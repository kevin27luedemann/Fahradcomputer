
Fahradcomputer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000218  00800100  00005fa6  0000603a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005fa6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000495  00800318  00800318  00006252  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00006252  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000003b8  00000000  00000000  000062ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000847c  00000000  00000000  00006666  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001611  00000000  00000000  0000eae2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001716  00000000  00000000  000100f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000e58  00000000  00000000  0001180c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00001163  00000000  00000000  00012664  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000622c  00000000  00000000  000137c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000003a0  00000000  00000000  000199f3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 bf 02 	jmp	0x57e	; 0x57e <__dtors_end>
       4:	0c 94 e7 02 	jmp	0x5ce	; 0x5ce <__bad_interrupt>
       8:	0c 94 e7 02 	jmp	0x5ce	; 0x5ce <__bad_interrupt>
       c:	0c 94 e7 02 	jmp	0x5ce	; 0x5ce <__bad_interrupt>
      10:	0c 94 e7 02 	jmp	0x5ce	; 0x5ce <__bad_interrupt>
      14:	0c 94 e7 02 	jmp	0x5ce	; 0x5ce <__bad_interrupt>
      18:	0c 94 e7 02 	jmp	0x5ce	; 0x5ce <__bad_interrupt>
      1c:	0c 94 e7 02 	jmp	0x5ce	; 0x5ce <__bad_interrupt>
      20:	0c 94 e7 02 	jmp	0x5ce	; 0x5ce <__bad_interrupt>
      24:	0c 94 2c 19 	jmp	0x3258	; 0x3258 <__vector_9>
      28:	0c 94 e7 02 	jmp	0x5ce	; 0x5ce <__bad_interrupt>
      2c:	0c 94 e7 02 	jmp	0x5ce	; 0x5ce <__bad_interrupt>
      30:	0c 94 e7 02 	jmp	0x5ce	; 0x5ce <__bad_interrupt>
      34:	0c 94 e7 02 	jmp	0x5ce	; 0x5ce <__bad_interrupt>
      38:	0c 94 e7 02 	jmp	0x5ce	; 0x5ce <__bad_interrupt>
      3c:	0c 94 e7 02 	jmp	0x5ce	; 0x5ce <__bad_interrupt>
      40:	0c 94 e7 02 	jmp	0x5ce	; 0x5ce <__bad_interrupt>
      44:	0c 94 e7 02 	jmp	0x5ce	; 0x5ce <__bad_interrupt>
      48:	0c 94 e7 02 	jmp	0x5ce	; 0x5ce <__bad_interrupt>
      4c:	0c 94 e7 02 	jmp	0x5ce	; 0x5ce <__bad_interrupt>
      50:	0c 94 e7 02 	jmp	0x5ce	; 0x5ce <__bad_interrupt>
      54:	0c 94 e7 02 	jmp	0x5ce	; 0x5ce <__bad_interrupt>
      58:	0c 94 e7 02 	jmp	0x5ce	; 0x5ce <__bad_interrupt>
      5c:	0c 94 e7 02 	jmp	0x5ce	; 0x5ce <__bad_interrupt>
      60:	0c 94 e7 02 	jmp	0x5ce	; 0x5ce <__bad_interrupt>
      64:	0c 94 e7 02 	jmp	0x5ce	; 0x5ce <__bad_interrupt>
      68:	7d 16       	cp	r7, r29
      6a:	a5 16       	cp	r10, r21
      6c:	cf 16       	cp	r12, r31
      6e:	fa 16       	cp	r15, r26
      70:	24 17       	cp	r18, r20
      72:	4d 17       	cp	r20, r29
      74:	75 17       	cp	r23, r21
      76:	9e 17       	cp	r25, r30
      78:	16 18       	sub	r1, r6
      7a:	41 18       	sub	r4, r1
      7c:	08 1d       	adc	r16, r8
      7e:	13 1d       	adc	r17, r3
      80:	21 1d       	adc	r18, r1
      82:	27 1d       	adc	r18, r7
      84:	2e 1d       	adc	r18, r14
      86:	35 1d       	adc	r19, r5
      88:	43 1d       	adc	r20, r3
      8a:	d2 1d       	adc	r29, r2
      8c:	d9 1d       	adc	r29, r9
      8e:	e0 1d       	adc	r30, r0
      90:	e7 1d       	adc	r30, r7
      92:	ee 1d       	adc	r30, r14
      94:	f5 1d       	adc	r31, r5
      96:	fc 1d       	adc	r31, r12
      98:	03 1e       	adc	r0, r19
      9a:	08 4a       	sbci	r16, 0xA8	; 168
      9c:	d7 3b       	cpi	r29, 0xB7	; 183
      9e:	3b ce       	rjmp	.-906    	; 0xfffffd16 <__eeprom_end+0xff7efd16>
      a0:	01 6e       	ori	r16, 0xE1	; 225
      a2:	84 bc       	out	0x24, r8	; 36
      a4:	bf fd       	.word	0xfdbf	; ????
      a6:	c1 2f       	mov	r28, r17
      a8:	3d 6c       	ori	r19, 0xCD	; 205
      aa:	74 31       	cpi	r23, 0x14	; 20
      ac:	9a bd       	out	0x2a, r25	; 42
      ae:	56 83       	std	Z+6, r21	; 0x06
      b0:	3d da       	rcall	.-2950   	; 0xfffff52c <__eeprom_end+0xff7ef52c>
      b2:	3d 00       	.word	0x003d	; ????
      b4:	c7 7f       	andi	r28, 0xF7	; 247
      b6:	11 be       	out	0x31, r1	; 49
      b8:	d9 e4       	ldi	r29, 0x49	; 73
      ba:	bb 4c       	sbci	r27, 0xCB	; 203
      bc:	3e 91       	ld	r19, -X
      be:	6b aa       	std	Y+51, r6	; 0x33
      c0:	aa be       	out	0x3a, r10	; 58
      c2:	00 00       	nop
      c4:	00 80       	ld	r0, Z
      c6:	3f 05       	cpc	r19, r15
      c8:	a8 4c       	sbci	r26, 0xC8	; 200
      ca:	cd b2       	in	r12, 0x1d	; 29
      cc:	d4 4e       	sbci	r29, 0xE4	; 228
      ce:	b9 38       	cpi	r27, 0x89	; 137
      d0:	36 a9       	ldd	r19, Z+54	; 0x36
      d2:	02 0c       	add	r0, r2
      d4:	50 b9       	out	0x00, r21	; 0
      d6:	91 86       	std	Z+9, r9	; 0x09
      d8:	88 08       	sbc	r8, r8
      da:	3c a6       	std	Y+44, r3	; 0x2c
      dc:	aa aa       	std	Y+50, r10	; 0x32
      de:	2a be       	out	0x3a, r2	; 58
      e0:	00 00       	nop
      e2:	00 80       	ld	r0, Z
      e4:	3f 08       	sbc	r3, r15
      e6:	00 00       	nop
      e8:	00 be       	out	0x30, r0	; 48
      ea:	92 24       	eor	r9, r2
      ec:	49 12       	cpse	r4, r25
      ee:	3e ab       	std	Y+54, r19	; 0x36
      f0:	aa aa       	std	Y+50, r10	; 0x32
      f2:	2a be       	out	0x3a, r2	; 58
      f4:	cd cc       	rjmp	.-1638   	; 0xfffffa90 <__eeprom_end+0xff7efa90>
      f6:	cc 4c       	sbci	r28, 0xCC	; 204
      f8:	3e 00       	.word	0x003e	; ????
      fa:	00 00       	nop
      fc:	80 be       	out	0x30, r8	; 48
      fe:	ab aa       	std	Y+51, r10	; 0x33
     100:	aa aa       	std	Y+50, r10	; 0x32
     102:	3e 00       	.word	0x003e	; ????
     104:	00 00       	nop
     106:	00 bf       	out	0x30, r16	; 48
     108:	00 00       	nop
     10a:	00 80       	ld	r0, Z
     10c:	3f 00       	.word	0x003f	; ????
     10e:	00 00       	nop
     110:	00 00       	nop
     112:	08 41       	sbci	r16, 0x18	; 24
     114:	78 d3       	rcall	.+1776   	; 0x806 <_ZN7Display9drawPixelEhhh+0x5a>
     116:	bb 43       	sbci	r27, 0x3B	; 59
     118:	87 d1       	rcall	.+782    	; 0x428 <_ZL7font5x8+0x186>
     11a:	13 3d       	cpi	r17, 0xD3	; 211
     11c:	19 0e       	add	r1, r25
     11e:	3c c3       	rjmp	.+1656   	; 0x798 <_ZN7Display9sendFrameEv+0x72>
     120:	bd 42       	sbci	r27, 0x2D	; 45
     122:	82 ad       	ldd	r24, Z+58	; 0x3a
     124:	2b 3e       	cpi	r18, 0xEB	; 235
     126:	68 ec       	ldi	r22, 0xC8	; 200
     128:	82 76       	andi	r24, 0x62	; 98
     12a:	be d9       	rcall	.-3204   	; 0xfffff4a8 <__eeprom_end+0xff7ef4a8>
     12c:	8f e1       	ldi	r24, 0x1F	; 31
     12e:	a9 3e       	cpi	r26, 0xE9	; 233
     130:	4c 80       	ldd	r4, Y+4	; 0x04
     132:	ef ff       	.word	0xffef	; ????
     134:	be 01       	movw	r22, r28
     136:	c4 ff       	sbrs	r28, 4
     138:	7f 3f       	cpi	r23, 0xFF	; 255
     13a:	00 00       	nop
     13c:	00 00       	nop
     13e:	00 06       	cpc	r0, r16
     140:	64 ec       	ldi	r22, 0xC4	; 196
     142:	1b 3c       	cpi	r17, 0xCB	; 203
     144:	04 bc       	out	0x24, r0	; 36
     146:	16 3e       	cpi	r17, 0xE6	; 230
     148:	3b e5       	ldi	r19, 0x5B	; 91
     14a:	b9 3c       	cpi	r27, 0xC9	; 201
     14c:	c9 3c       	cpi	r28, 0xC9	; 201
     14e:	37 c2       	rjmp	.+1134   	; 0x5be <__do_global_ctors+0xe>
     150:	9e 5a       	subi	r25, 0xAE	; 174
     152:	3d 66       	ori	r19, 0x6D	; 109
     154:	04 98       	cbi	0x00, 4	; 0
     156:	08 3e       	cpi	r16, 0xE8	; 232
     158:	ea 69       	ori	r30, 0x9A	; 154
     15a:	aa aa       	std	Y+50, r10	; 0x32
     15c:	3e 00       	.word	0x003e	; ????
     15e:	00 00       	nop
     160:	80 3f       	cpi	r24, 0xF0	; 240

00000162 <__trampolines_end>:
     162:	00 e0       	ldi	r16, 0x00	; 0
     164:	f8 fc       	.word	0xfcf8	; ????
     166:	fe 1e       	adc	r15, r30
     168:	07 07       	cpc	r16, r23
     16a:	07 07       	cpc	r16, r23
     16c:	1e fe       	.word	0xfe1e	; ????
     16e:	fc f8       	.word	0xf8fc	; ????
     170:	f0 00       	.word	0x00f0	; ????
     172:	00 07       	cpc	r16, r16
     174:	0f 3f       	cpi	r16, 0xFF	; 255
     176:	3f 7c       	andi	r19, 0xCF	; 207
     178:	70 70       	andi	r23, 0x00	; 0
     17a:	70 70       	andi	r23, 0x00	; 0
     17c:	7c 3f       	cpi	r23, 0xFC	; 252
     17e:	1f 1f       	adc	r17, r31
     180:	07 00       	.word	0x0007	; ????
     182:	00 00       	nop
     184:	00 06       	cpc	r0, r16
     186:	07 07       	cpc	r16, r23
     188:	ff ff       	.word	0xffff	; ????
     18a:	ff ff       	.word	0xffff	; ????
	...
     198:	7f 7f       	andi	r23, 0xFF	; 255
     19a:	7f 7f       	andi	r23, 0xFF	; 255
     19c:	00 00       	nop
     19e:	00 00       	nop
     1a0:	00 00       	nop
     1a2:	00 38       	cpi	r16, 0x80	; 128
     1a4:	3c 3e       	cpi	r19, 0xEC	; 236
     1a6:	3e 0f       	add	r19, r30
     1a8:	07 07       	cpc	r16, r23
     1aa:	07 cf       	rjmp	.-498    	; 0xffffffba <__eeprom_end+0xff7effba>
     1ac:	ff fe       	.word	0xfeff	; ????
     1ae:	fe 38       	cpi	r31, 0x8E	; 142
     1b0:	00 00       	nop
     1b2:	00 40       	sbci	r16, 0x00	; 0
     1b4:	40 60       	ori	r20, 0x00	; 0
     1b6:	70 78       	andi	r23, 0x80	; 128
     1b8:	7c 7e       	andi	r23, 0xEC	; 236
     1ba:	7f 77       	andi	r23, 0x7F	; 127
     1bc:	73 71       	andi	r23, 0x13	; 19
     1be:	70 70       	andi	r23, 0x00	; 0
     1c0:	00 00       	nop
     1c2:	00 18       	sub	r0, r0
     1c4:	1c 1e       	adc	r1, r28
     1c6:	1e 0f       	add	r17, r30
     1c8:	c7 c7       	rjmp	.+3982   	; 0x1158 <_ZN7Display6analogEhhhh+0x420>
     1ca:	e7 ff       	sbrs	r30, 7
     1cc:	fe be       	out	0x3e, r15	; 62
     1ce:	9c 00       	.word	0x009c	; ????
     1d0:	00 00       	nop
     1d2:	00 0c       	add	r0, r0
     1d4:	1c 3c       	cpi	r17, 0xCC	; 204
     1d6:	3c 78       	andi	r19, 0x8C	; 140
     1d8:	70 70       	andi	r23, 0x00	; 0
     1da:	70 79       	andi	r23, 0x90	; 144
     1dc:	7f 3f       	cpi	r23, 0xFF	; 255
     1de:	1f 0f       	add	r17, r31
     1e0:	00 00       	nop
     1e2:	00 00       	nop
     1e4:	80 c0       	rjmp	.+256    	; 0x2e6 <_ZL7font5x8+0x44>
     1e6:	e0 70       	andi	r30, 0x00	; 0
     1e8:	38 1c       	adc	r3, r8
     1ea:	1e ff       	.word	0xff1e	; ????
     1ec:	ff ff       	.word	0xffff	; ????
     1ee:	ff 00       	.word	0x00ff	; ????
     1f0:	00 00       	nop
     1f2:	06 07       	cpc	r16, r22
     1f4:	07 07       	cpc	r16, r23
     1f6:	06 06       	cpc	r0, r22
     1f8:	06 06       	cpc	r0, r22
     1fa:	06 7f       	andi	r16, 0xF6	; 246
     1fc:	7f 7f       	andi	r23, 0xFF	; 255
     1fe:	7f 06       	cpc	r7, r31
     200:	06 00       	.word	0x0006	; ????
     202:	00 00       	nop
     204:	00 00       	nop
     206:	f0 ff       	sbrs	r31, 0
     208:	ff ff       	.word	0xffff	; ????
     20a:	e7 e7       	ldi	r30, 0x77	; 119
     20c:	e7 e7       	ldi	r30, 0x77	; 119
     20e:	c7 87       	std	Z+15, r28	; 0x0f
     210:	00 00       	nop
     212:	00 00       	nop
     214:	38 78       	andi	r19, 0x88	; 136
     216:	71 70       	andi	r23, 0x01	; 1
     218:	70 70       	andi	r23, 0x00	; 0
     21a:	70 70       	andi	r23, 0x00	; 0
     21c:	39 3f       	cpi	r19, 0xF9	; 249
     21e:	3f 1f       	adc	r19, r31
     220:	0f 00       	.word	0x000f	; ????
     222:	00 80       	ld	r0, Z
     224:	e0 f0       	brcs	.+56     	; 0x25e <__trampolines_end+0xfc>
     226:	f8 fc       	.word	0xfcf8	; ????
     228:	7f 7f       	andi	r23, 0xFF	; 255
     22a:	6f 67       	ori	r22, 0x7F	; 127
     22c:	e1 e1       	ldi	r30, 0x11	; 17
     22e:	c0 80       	ld	r12, Z
     230:	00 00       	nop
     232:	00 0f       	add	r16, r16
     234:	1f 3f       	cpi	r17, 0xFF	; 255
     236:	3f 78       	andi	r19, 0x8F	; 143
     238:	70 70       	andi	r23, 0x00	; 0
     23a:	70 70       	andi	r23, 0x00	; 0
     23c:	78 3f       	cpi	r23, 0xF8	; 248
     23e:	3f 1f       	adc	r19, r31
     240:	0f 00       	.word	0x000f	; ????
     242:	00 07       	cpc	r16, r16
     244:	07 07       	cpc	r16, r23
     246:	07 07       	cpc	r16, r23
     248:	c7 e7       	ldi	r28, 0x77	; 119
     24a:	f7 ff       	sbrs	r31, 7
     24c:	7f 3f       	cpi	r23, 0xFF	; 255
     24e:	1f 07       	cpc	r17, r31
     250:	03 01       	movw	r0, r6
     252:	00 20       	and	r0, r0
     254:	38 7c       	andi	r19, 0xC8	; 200
     256:	7e 3f       	cpi	r23, 0xFE	; 254
     258:	0f 07       	cpc	r16, r31
     25a:	03 00       	.word	0x0003	; ????
	...
     264:	00 1c       	adc	r0, r0
     266:	be fe       	.word	0xfebe	; ????
     268:	ff e7       	ldi	r31, 0x7F	; 127
     26a:	c3 c3       	rjmp	.+1926   	; 0x9f2 <_ZN7Display13draw_triangleEhhhff+0x8c>
     26c:	e7 ff       	sbrs	r30, 7
     26e:	fe be       	out	0x3e, r15	; 62
     270:	1c 00       	.word	0x001c	; ????
     272:	00 00       	nop
     274:	0e 3f       	cpi	r16, 0xFE	; 254
     276:	3f 7f       	andi	r19, 0xFF	; 255
     278:	71 60       	ori	r23, 0x01	; 1
     27a:	60 60       	ori	r22, 0x00	; 0
     27c:	71 7f       	andi	r23, 0xF1	; 241
     27e:	3f 3f       	cpi	r19, 0xFF	; 255
     280:	0f 00       	.word	0x000f	; ????
     282:	00 78       	andi	r16, 0x80	; 128
     284:	fc fe       	.word	0xfefc	; ????
     286:	fe 8f       	std	Y+30, r31	; 0x1e
     288:	07 07       	cpc	r16, r23
     28a:	07 07       	cpc	r16, r23
     28c:	8f fe       	.word	0xfe8f	; ????
     28e:	fe fc       	.word	0xfcfe	; ????
     290:	f8 00       	.word	0x00f8	; ????
     292:	00 00       	nop
     294:	00 01       	movw	r0, r0
     296:	43 43       	sbci	r20, 0x33	; 51
     298:	73 7b       	andi	r23, 0xB3	; 179
     29a:	7f 7f       	andi	r23, 0xFF	; 255
     29c:	1f 0f       	add	r17, r31
     29e:	07 03       	mulsu	r16, r23
	...

000002a2 <_ZL7font5x8>:
     2a2:	00 00 5f 00 00 00 07 00 07 00 14 7f 14 7f 14 24     .._............$
     2b2:	2a 7f 2a 12 23 13 08 64 62 36 49 55 22 50 00 05     *.*.#..db6IU"P..
     2c2:	03 00 00 00 1c 22 41 00 00 41 22 1c 00 14 08 3e     ....."A..A"....>
     2d2:	08 14 08 08 3e 08 08 00 50 30 00 00 08 08 08 08     ....>...P0......
     2e2:	08 00 60 60 00 00 20 10 08 04 02 3e 51 49 45 3e     ..``.. ....>QIE>
     2f2:	00 42 7f 40 00 42 61 51 49 46 21 41 45 4b 31 18     .B.@.BaQIF!AEK1.
     302:	14 12 7f 10 27 45 45 45 39 3c 4a 49 49 30 01 71     ....'EEE9<JII0.q
     312:	09 05 03 36 49 49 49 36 06 49 49 29 1e 00 36 36     ...6III6.II)..66
     322:	00 00 00 56 36 00 00 08 14 22 41 00 14 14 14 14     ...V6...."A.....
     332:	14 00 41 22 14 08 02 01 51 09 06 32 49 79 41 3e     ..A"....Q..2IyA>
     342:	7e 11 11 11 7e 7f 49 49 49 36 3e 41 41 41 22 7f     ~...~.III6>AAA".
     352:	41 41 22 1c 7f 49 49 49 41 7f 09 09 09 01 3e 41     AA"..IIIA.....>A
     362:	49 49 7a 7f 08 08 08 7f 00 41 7f 41 00 20 40 41     IIz......A.A. @A
     372:	3f 01 7f 08 14 22 41 7f 40 40 40 40 7f 02 0c 02     ?...."A.@@@@....
     382:	7f 7f 04 08 10 7f 3e 41 41 41 3e 7f 09 09 09 06     ......>AAA>.....
     392:	3e 41 51 21 5e 7f 09 19 29 46 46 49 49 49 31 01     >AQ!^...)FFIII1.
     3a2:	01 7f 01 01 3f 40 40 40 3f 1f 20 40 20 1f 3f 40     ....?@@@?. @ .?@
     3b2:	38 40 3f 63 14 08 14 63 07 08 70 08 07 61 51 49     8@?c...c..p..aQI
     3c2:	45 43 00 7f 41 41 00 02 04 08 10 20 00 41 41 7f     EC..AA..... .AA.
     3d2:	00 04 02 01 02 04 40 40 40 40 40 00 01 02 04 00     ......@@@@@.....
     3e2:	20 54 54 54 78 7f 48 44 44 38 38 44 44 44 20 38      TTTx.HDD88DDD 8
     3f2:	44 44 48 7f 38 54 54 54 18 08 7e 09 01 02 0c 52     DDH.8TTT..~....R
     402:	52 52 3e 7f 08 04 04 78 00 44 7d 40 00 20 40 44     RR>....x.D}@. @D
     412:	3d 00 7f 10 28 44 00 00 41 7f 40 00 7c 04 18 04     =...(D..A.@.|...
     422:	78 7c 08 04 04 78 38 44 44 44 38 7c 14 14 14 08     x|...x8DDD8|....
     432:	08 14 14 18 7c 7c 08 04 04 08 48 54 54 54 20 04     ....||....HTTT .
     442:	3f 44 40 20 3c 40 40 20 7c 1c 20 40 20 1c 3c 40     ?D@ <@@ |. @ .<@
     452:	30 40 3c 44 28 10 28 44 0c 50 50 50 3c 44 64 54     0@<D(.(D.PPP<DdT
     462:	4c 44 00 08 36 41 00 00 00 7f 00 00 00 41 36 08     LD..6A.......A6.
     472:	00 10 08 08 10 08                                   ......

00000478 <__c.2161>:
     478:	6e 61 6e 00                                         nan.

0000047c <__c.2159>:
     47c:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     48c:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     49c:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     4ac:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     4bc:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     4cc:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     4dc:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     4ec:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     4fc:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     50c:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     51c:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     52c:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     53c:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     54c:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     55c:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     56c:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

0000057a <__ctors_start>:
     57a:	18 20       	and	r1, r8

0000057c <__ctors_end>:
     57c:	41 20       	and	r4, r1

0000057e <__dtors_end>:
     57e:	11 24       	eor	r1, r1
     580:	1f be       	out	0x3f, r1	; 63
     582:	cf ef       	ldi	r28, 0xFF	; 255
     584:	d8 e0       	ldi	r29, 0x08	; 8
     586:	de bf       	out	0x3e, r29	; 62
     588:	cd bf       	out	0x3d, r28	; 61

0000058a <__do_copy_data>:
     58a:	13 e0       	ldi	r17, 0x03	; 3
     58c:	a0 e0       	ldi	r26, 0x00	; 0
     58e:	b1 e0       	ldi	r27, 0x01	; 1
     590:	e6 ea       	ldi	r30, 0xA6	; 166
     592:	ff e5       	ldi	r31, 0x5F	; 95
     594:	02 c0       	rjmp	.+4      	; 0x59a <__do_copy_data+0x10>
     596:	05 90       	lpm	r0, Z+
     598:	0d 92       	st	X+, r0
     59a:	a8 31       	cpi	r26, 0x18	; 24
     59c:	b1 07       	cpc	r27, r17
     59e:	d9 f7       	brne	.-10     	; 0x596 <__do_copy_data+0xc>

000005a0 <__do_clear_bss>:
     5a0:	27 e0       	ldi	r18, 0x07	; 7
     5a2:	a8 e1       	ldi	r26, 0x18	; 24
     5a4:	b3 e0       	ldi	r27, 0x03	; 3
     5a6:	01 c0       	rjmp	.+2      	; 0x5aa <.do_clear_bss_start>

000005a8 <.do_clear_bss_loop>:
     5a8:	1d 92       	st	X+, r1

000005aa <.do_clear_bss_start>:
     5aa:	ad 3a       	cpi	r26, 0xAD	; 173
     5ac:	b2 07       	cpc	r27, r18
     5ae:	e1 f7       	brne	.-8      	; 0x5a8 <.do_clear_bss_loop>

000005b0 <__do_global_ctors>:
     5b0:	15 e0       	ldi	r17, 0x05	; 5
     5b2:	cc e7       	ldi	r28, 0x7C	; 124
     5b4:	d5 e0       	ldi	r29, 0x05	; 5
     5b6:	04 c0       	rjmp	.+8      	; 0x5c0 <__do_global_ctors+0x10>
     5b8:	22 97       	sbiw	r28, 0x02	; 2
     5ba:	fe 01       	movw	r30, r28
     5bc:	0e 94 eb 2d 	call	0x5bd6	; 0x5bd6 <__tablejump__>
     5c0:	ca 37       	cpi	r28, 0x7A	; 122
     5c2:	d1 07       	cpc	r29, r17
     5c4:	c9 f7       	brne	.-14     	; 0x5b8 <__do_global_ctors+0x8>
     5c6:	0e 94 0b 20 	call	0x4016	; 0x4016 <main>
     5ca:	0c 94 c6 2f 	jmp	0x5f8c	; 0x5f8c <__do_global_dtors>

000005ce <__bad_interrupt>:
     5ce:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000005d2 <_ZN7DisplayD1Ev>:
	//}
	InitializeDisplay();
} //Display

// default destructor
Display::~Display()
     5d2:	9c 5f       	subi	r25, 0xFC	; 252
     5d4:	0e 94 6a 20 	call	0x40d4	; 0x40d4 <_ZN3I2CD1Ev>
     5d8:	08 95       	ret

000005da <_ZN7Display10clearFrameEv>:
{
} //~Display

void Display::clearFrame(){
     5da:	fc 01       	movw	r30, r24
	for(uint16_t i=0;i<1024;i++){
     5dc:	20 e0       	ldi	r18, 0x00	; 0
     5de:	30 e0       	ldi	r19, 0x00	; 0
		Displayframe[i]=0;
     5e0:	11 92       	st	Z+, r1
Display::~Display()
{
} //~Display

void Display::clearFrame(){
	for(uint16_t i=0;i<1024;i++){
     5e2:	2f 5f       	subi	r18, 0xFF	; 255
     5e4:	3f 4f       	sbci	r19, 0xFF	; 255
     5e6:	21 15       	cp	r18, r1
     5e8:	84 e0       	ldi	r24, 0x04	; 4
     5ea:	38 07       	cpc	r19, r24
     5ec:	c9 f7       	brne	.-14     	; 0x5e0 <_ZN7Display10clearFrameEv+0x6>
		Displayframe[i]=0;
	}
}
     5ee:	08 95       	ret

000005f0 <_ZN7Display15ssd1306_commandEh>:

void Display::ssd1306_command(uint8_t c){
     5f0:	1f 93       	push	r17
     5f2:	cf 93       	push	r28
     5f4:	df 93       	push	r29
     5f6:	16 2f       	mov	r17, r22
	i2c.twi_start();
     5f8:	ec 01       	movw	r28, r24
     5fa:	dc 5f       	subi	r29, 0xFC	; 252
     5fc:	ce 01       	movw	r24, r28
     5fe:	0e 94 6b 20 	call	0x40d6	; 0x40d6 <_ZN3I2C9twi_startEv>
	i2c.twi_write(OLEDADRESSE);
     602:	68 e7       	ldi	r22, 0x78	; 120
     604:	ce 01       	movw	r24, r28
     606:	0e 94 73 20 	call	0x40e6	; 0x40e6 <_ZN3I2C9twi_writeEh>
	i2c.twi_write(OLEDBEFEHL);
     60a:	60 e0       	ldi	r22, 0x00	; 0
     60c:	ce 01       	movw	r24, r28
     60e:	0e 94 73 20 	call	0x40e6	; 0x40e6 <_ZN3I2C9twi_writeEh>
	i2c.twi_write(c);
     612:	61 2f       	mov	r22, r17
     614:	ce 01       	movw	r24, r28
     616:	0e 94 73 20 	call	0x40e6	; 0x40e6 <_ZN3I2C9twi_writeEh>
	i2c.twi_stop();
     61a:	ce 01       	movw	r24, r28
     61c:	0e 94 6f 20 	call	0x40de	; 0x40de <_ZN3I2C8twi_stopEv>
}
     620:	df 91       	pop	r29
     622:	cf 91       	pop	r28
     624:	1f 91       	pop	r17
     626:	08 95       	ret

00000628 <_ZN7Display17InitializeDisplayEv>:

void Display::InitializeDisplay()
{
     628:	cf 93       	push	r28
     62a:	df 93       	push	r29
     62c:	ec 01       	movw	r28, r24
	// Init sequence for 128x64 OLED module
	ssd1306_command(SSD1306_DISPLAYOFF);                    // 0xAE
     62e:	6e ea       	ldi	r22, 0xAE	; 174
     630:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <_ZN7Display15ssd1306_commandEh>

	ssd1306_command(SSD1306_SETDISPLAYCLOCKDIV);            // 0xD5
     634:	65 ed       	ldi	r22, 0xD5	; 213
     636:	ce 01       	movw	r24, r28
     638:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <_ZN7Display15ssd1306_commandEh>
	ssd1306_command(0x80);                 // the suggested ratio 0x80
     63c:	60 e8       	ldi	r22, 0x80	; 128
     63e:	ce 01       	movw	r24, r28
     640:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <_ZN7Display15ssd1306_commandEh>

	ssd1306_command(SSD1306_SETMULTIPLEX);                  // 0xA8
     644:	68 ea       	ldi	r22, 0xA8	; 168
     646:	ce 01       	movw	r24, r28
     648:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <_ZN7Display15ssd1306_commandEh>
	ssd1306_command(0x3F);
     64c:	6f e3       	ldi	r22, 0x3F	; 63
     64e:	ce 01       	movw	r24, r28
     650:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <_ZN7Display15ssd1306_commandEh>

	ssd1306_command(SSD1306_SETDISPLAYOFFSET);              // 0xD3
     654:	63 ed       	ldi	r22, 0xD3	; 211
     656:	ce 01       	movw	r24, r28
     658:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <_ZN7Display15ssd1306_commandEh>
	ssd1306_command(0x0);                                   // no offset
     65c:	60 e0       	ldi	r22, 0x00	; 0
     65e:	ce 01       	movw	r24, r28
     660:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <_ZN7Display15ssd1306_commandEh>

	ssd1306_command(SSD1306_SETSTARTLINE);// | 0x0);        // line #0
     664:	60 e4       	ldi	r22, 0x40	; 64
     666:	ce 01       	movw	r24, r28
     668:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <_ZN7Display15ssd1306_commandEh>

	ssd1306_command(SSD1306_CHARGEPUMP);                    // 0x8D
     66c:	6d e8       	ldi	r22, 0x8D	; 141
     66e:	ce 01       	movw	r24, r28
     670:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <_ZN7Display15ssd1306_commandEh>
	ssd1306_command(0x14);  // using internal VCC
     674:	64 e1       	ldi	r22, 0x14	; 20
     676:	ce 01       	movw	r24, r28
     678:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <_ZN7Display15ssd1306_commandEh>

	ssd1306_command(SSD1306_MEMORYMODE);                    // 0x20
     67c:	60 e2       	ldi	r22, 0x20	; 32
     67e:	ce 01       	movw	r24, r28
     680:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <_ZN7Display15ssd1306_commandEh>
	ssd1306_command(0x00);          // 0x00 horizontal addressing
     684:	60 e0       	ldi	r22, 0x00	; 0
     686:	ce 01       	movw	r24, r28
     688:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <_ZN7Display15ssd1306_commandEh>

	ssd1306_command(SSD1306_SEGREMAP | 0x1); // rotate screen 180
     68c:	61 ea       	ldi	r22, 0xA1	; 161
     68e:	ce 01       	movw	r24, r28
     690:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <_ZN7Display15ssd1306_commandEh>

	ssd1306_command(SSD1306_COMSCANDEC); // rotate screen 180
     694:	68 ec       	ldi	r22, 0xC8	; 200
     696:	ce 01       	movw	r24, r28
     698:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <_ZN7Display15ssd1306_commandEh>

	ssd1306_command(SSD1306_SETCOMPINS);                    // 0xDA
     69c:	6a ed       	ldi	r22, 0xDA	; 218
     69e:	ce 01       	movw	r24, r28
     6a0:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <_ZN7Display15ssd1306_commandEh>
	ssd1306_command(0x12);
     6a4:	62 e1       	ldi	r22, 0x12	; 18
     6a6:	ce 01       	movw	r24, r28
     6a8:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <_ZN7Display15ssd1306_commandEh>

	ssd1306_command(SSD1306_SETCONTRAST);                   // 0x81
     6ac:	61 e8       	ldi	r22, 0x81	; 129
     6ae:	ce 01       	movw	r24, r28
     6b0:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <_ZN7Display15ssd1306_commandEh>
	ssd1306_command(0xCF);
     6b4:	6f ec       	ldi	r22, 0xCF	; 207
     6b6:	ce 01       	movw	r24, r28
     6b8:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <_ZN7Display15ssd1306_commandEh>

	ssd1306_command(SSD1306_SETPRECHARGE);                  // 0xd9
     6bc:	69 ed       	ldi	r22, 0xD9	; 217
     6be:	ce 01       	movw	r24, r28
     6c0:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <_ZN7Display15ssd1306_commandEh>
	ssd1306_command(0xF1);
     6c4:	61 ef       	ldi	r22, 0xF1	; 241
     6c6:	ce 01       	movw	r24, r28
     6c8:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <_ZN7Display15ssd1306_commandEh>

	ssd1306_command(SSD1306_SETVCOMDETECT);                 // 0xDB
     6cc:	6b ed       	ldi	r22, 0xDB	; 219
     6ce:	ce 01       	movw	r24, r28
     6d0:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <_ZN7Display15ssd1306_commandEh>
	ssd1306_command(0x40);
     6d4:	60 e4       	ldi	r22, 0x40	; 64
     6d6:	ce 01       	movw	r24, r28
     6d8:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <_ZN7Display15ssd1306_commandEh>

	ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
     6dc:	64 ea       	ldi	r22, 0xA4	; 164
     6de:	ce 01       	movw	r24, r28
     6e0:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <_ZN7Display15ssd1306_commandEh>

	ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
     6e4:	66 ea       	ldi	r22, 0xA6	; 166
     6e6:	ce 01       	movw	r24, r28
     6e8:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <_ZN7Display15ssd1306_commandEh>

	ssd1306_command(SSD1306_DISPLAYON);                     //switch on OLED
     6ec:	6f ea       	ldi	r22, 0xAF	; 175
     6ee:	ce 01       	movw	r24, r28
     6f0:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <_ZN7Display15ssd1306_commandEh>
}
     6f4:	df 91       	pop	r29
     6f6:	cf 91       	pop	r28
     6f8:	08 95       	ret

000006fa <_ZN7DisplayC1Ev>:


#include "Display.h"

// default constructor
Display::Display()
     6fa:	cf 93       	push	r28
     6fc:	df 93       	push	r29
     6fe:	ec 01       	movw	r28, r24
     700:	9c 5f       	subi	r25, 0xFC	; 252
     702:	0e 94 66 20 	call	0x40cc	; 0x40cc <_ZN3I2CC1Ev>
{
	//for (uint8_t i=0;i<1024;i++)
	//{
		//Displayframe[i]=0;
	//}
	InitializeDisplay();
     706:	ce 01       	movw	r24, r28
     708:	0e 94 14 03 	call	0x628	; 0x628 <_ZN7Display17InitializeDisplayEv>
} //Display
     70c:	df 91       	pop	r29
     70e:	cf 91       	pop	r28
     710:	08 95       	ret

00000712 <_ZN7Display6invertEh>:

	ssd1306_command(SSD1306_DISPLAYON);                     //switch on OLED
}

void Display::invert(uint8_t inverted) {
	if (inverted) {
     712:	66 23       	and	r22, r22
     714:	21 f0       	breq	.+8      	; 0x71e <_ZN7Display6invertEh+0xc>
		ssd1306_command(SSD1306_INVERTDISPLAY);
     716:	67 ea       	ldi	r22, 0xA7	; 167
     718:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <_ZN7Display15ssd1306_commandEh>
     71c:	08 95       	ret
	}
	else {
		ssd1306_command(SSD1306_NORMALDISPLAY);
     71e:	66 ea       	ldi	r22, 0xA6	; 166
     720:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <_ZN7Display15ssd1306_commandEh>
     724:	08 95       	ret

00000726 <_ZN7Display9sendFrameEv>:
	}
}

void Display::sendFrame(){
     726:	ef 92       	push	r14
     728:	ff 92       	push	r15
     72a:	0f 93       	push	r16
     72c:	1f 93       	push	r17
     72e:	cf 93       	push	r28
     730:	df 93       	push	r29
     732:	8c 01       	movw	r16, r24
	//Cursor an den Anfang setzen
	ssd1306_command(SSD1306_COLUMNADDR);
     734:	61 e2       	ldi	r22, 0x21	; 33
     736:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <_ZN7Display15ssd1306_commandEh>
	ssd1306_command(0x00);
     73a:	60 e0       	ldi	r22, 0x00	; 0
     73c:	c8 01       	movw	r24, r16
     73e:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <_ZN7Display15ssd1306_commandEh>
	ssd1306_command(0x7F);
     742:	6f e7       	ldi	r22, 0x7F	; 127
     744:	c8 01       	movw	r24, r16
     746:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <_ZN7Display15ssd1306_commandEh>

	ssd1306_command(SSD1306_PAGEADDR);
     74a:	62 e2       	ldi	r22, 0x22	; 34
     74c:	c8 01       	movw	r24, r16
     74e:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <_ZN7Display15ssd1306_commandEh>
	ssd1306_command(0x00);
     752:	60 e0       	ldi	r22, 0x00	; 0
     754:	c8 01       	movw	r24, r16
     756:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <_ZN7Display15ssd1306_commandEh>
	ssd1306_command(0x07);
     75a:	67 e0       	ldi	r22, 0x07	; 7
     75c:	c8 01       	movw	r24, r16
     75e:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <_ZN7Display15ssd1306_commandEh>

	i2c.twi_start();
     762:	78 01       	movw	r14, r16
     764:	8c ef       	ldi	r24, 0xFC	; 252
     766:	f8 1a       	sub	r15, r24
     768:	c7 01       	movw	r24, r14
     76a:	0e 94 6b 20 	call	0x40d6	; 0x40d6 <_ZN3I2C9twi_startEv>
	i2c.twi_write(OLEDADRESSE);
     76e:	68 e7       	ldi	r22, 0x78	; 120
     770:	c7 01       	movw	r24, r14
     772:	0e 94 73 20 	call	0x40e6	; 0x40e6 <_ZN3I2C9twi_writeEh>
	i2c.twi_write(OLEDDATA);
     776:	60 e4       	ldi	r22, 0x40	; 64
     778:	c7 01       	movw	r24, r14
     77a:	0e 94 73 20 	call	0x40e6	; 0x40e6 <_ZN3I2C9twi_writeEh>
	
	for(uint16_t i=0; i<1024;i++){
     77e:	c0 e0       	ldi	r28, 0x00	; 0
     780:	d0 e0       	ldi	r29, 0x00	; 0
		i2c.twi_write(Displayframe[i]);
     782:	f8 01       	movw	r30, r16
     784:	61 91       	ld	r22, Z+
     786:	8f 01       	movw	r16, r30
     788:	c7 01       	movw	r24, r14
     78a:	0e 94 73 20 	call	0x40e6	; 0x40e6 <_ZN3I2C9twi_writeEh>

	i2c.twi_start();
	i2c.twi_write(OLEDADRESSE);
	i2c.twi_write(OLEDDATA);
	
	for(uint16_t i=0; i<1024;i++){
     78e:	21 96       	adiw	r28, 0x01	; 1
     790:	c1 15       	cp	r28, r1
     792:	f4 e0       	ldi	r31, 0x04	; 4
     794:	df 07       	cpc	r29, r31
     796:	a9 f7       	brne	.-22     	; 0x782 <_ZN7Display9sendFrameEv+0x5c>
		i2c.twi_write(Displayframe[i]);
	}
	i2c.twi_stop();
     798:	c7 01       	movw	r24, r14
     79a:	0e 94 6f 20 	call	0x40de	; 0x40de <_ZN3I2C8twi_stopEv>
}
     79e:	df 91       	pop	r29
     7a0:	cf 91       	pop	r28
     7a2:	1f 91       	pop	r17
     7a4:	0f 91       	pop	r16
     7a6:	ff 90       	pop	r15
     7a8:	ef 90       	pop	r14
     7aa:	08 95       	ret

000007ac <_ZN7Display9drawPixelEhhh>:

void Display::drawPixel(uint8_t pos_x, uint8_t pos_y, uint8_t erase){
	if(!(pos_x >= SSD1306_WIDTH || pos_y >= SSD1306_HEIGHT)){
     7ac:	66 23       	and	r22, r22
     7ae:	bc f1       	brlt	.+110    	; 0x81e <_ZN7Display9drawPixelEhhh+0x72>
     7b0:	40 34       	cpi	r20, 0x40	; 64
     7b2:	a8 f5       	brcc	.+106    	; 0x81e <_ZN7Display9drawPixelEhhh+0x72>
		if(!erase){
     7b4:	21 11       	cpse	r18, r1
     7b6:	19 c0       	rjmp	.+50     	; 0x7ea <_ZN7Display9drawPixelEhhh+0x3e>
			Displayframe[pos_x+(pos_y/8)*SSD1306_WIDTH] |= (1 << (pos_y&7));
     7b8:	e4 2f       	mov	r30, r20
     7ba:	e6 95       	lsr	r30
     7bc:	e6 95       	lsr	r30
     7be:	e6 95       	lsr	r30
     7c0:	20 e8       	ldi	r18, 0x80	; 128
     7c2:	e2 9f       	mul	r30, r18
     7c4:	f0 01       	movw	r30, r0
     7c6:	11 24       	eor	r1, r1
     7c8:	e6 0f       	add	r30, r22
     7ca:	f1 1d       	adc	r31, r1
     7cc:	e8 0f       	add	r30, r24
     7ce:	f9 1f       	adc	r31, r25
     7d0:	47 70       	andi	r20, 0x07	; 7
     7d2:	21 e0       	ldi	r18, 0x01	; 1
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	c9 01       	movw	r24, r18
     7d8:	02 c0       	rjmp	.+4      	; 0x7de <_ZN7Display9drawPixelEhhh+0x32>
     7da:	88 0f       	add	r24, r24
     7dc:	99 1f       	adc	r25, r25
     7de:	4a 95       	dec	r20
     7e0:	e2 f7       	brpl	.-8      	; 0x7da <_ZN7Display9drawPixelEhhh+0x2e>
     7e2:	90 81       	ld	r25, Z
     7e4:	89 2b       	or	r24, r25
     7e6:	80 83       	st	Z, r24
     7e8:	08 95       	ret
		}
		else {
			Displayframe[pos_x+(pos_y/8)*SSD1306_WIDTH] &= ~(1 << (pos_y&7));
     7ea:	e4 2f       	mov	r30, r20
     7ec:	e6 95       	lsr	r30
     7ee:	e6 95       	lsr	r30
     7f0:	e6 95       	lsr	r30
     7f2:	30 e8       	ldi	r19, 0x80	; 128
     7f4:	e3 9f       	mul	r30, r19
     7f6:	f0 01       	movw	r30, r0
     7f8:	11 24       	eor	r1, r1
     7fa:	e6 0f       	add	r30, r22
     7fc:	f1 1d       	adc	r31, r1
     7fe:	e8 0f       	add	r30, r24
     800:	f9 1f       	adc	r31, r25
     802:	47 70       	andi	r20, 0x07	; 7
     804:	81 e0       	ldi	r24, 0x01	; 1
     806:	90 e0       	ldi	r25, 0x00	; 0
     808:	9c 01       	movw	r18, r24
     80a:	02 c0       	rjmp	.+4      	; 0x810 <_ZN7Display9drawPixelEhhh+0x64>
     80c:	22 0f       	add	r18, r18
     80e:	33 1f       	adc	r19, r19
     810:	4a 95       	dec	r20
     812:	e2 f7       	brpl	.-8      	; 0x80c <_ZN7Display9drawPixelEhhh+0x60>
     814:	a9 01       	movw	r20, r18
     816:	40 95       	com	r20
     818:	80 81       	ld	r24, Z
     81a:	48 23       	and	r20, r24
     81c:	40 83       	st	Z, r20
     81e:	08 95       	ret

00000820 <_ZN7Display9draw_lineEhhhf>:
		}
	}
}

//eigene Zeichenfunktionen
void Display::draw_line(uint8_t x, uint8_t y, uint8_t length, float phi){
     820:	2f 92       	push	r2
     822:	3f 92       	push	r3
     824:	4f 92       	push	r4
     826:	5f 92       	push	r5
     828:	6f 92       	push	r6
     82a:	7f 92       	push	r7
     82c:	8f 92       	push	r8
     82e:	9f 92       	push	r9
     830:	af 92       	push	r10
     832:	bf 92       	push	r11
     834:	cf 92       	push	r12
     836:	df 92       	push	r13
     838:	ef 92       	push	r14
     83a:	ff 92       	push	r15
     83c:	0f 93       	push	r16
     83e:	1f 93       	push	r17
     840:	cf 93       	push	r28
     842:	df 93       	push	r29
     844:	cd b7       	in	r28, 0x3d	; 61
     846:	de b7       	in	r29, 0x3e	; 62
     848:	2b 97       	sbiw	r28, 0x0b	; 11
     84a:	0f b6       	in	r0, 0x3f	; 63
     84c:	f8 94       	cli
     84e:	de bf       	out	0x3e, r29	; 62
     850:	0f be       	out	0x3f, r0	; 63
     852:	cd bf       	out	0x3d, r28	; 61
     854:	1c 01       	movw	r2, r24
     856:	d6 2e       	mov	r13, r22
     858:	c4 2e       	mov	r12, r20
     85a:	29 83       	std	Y+1, r18	; 0x01
	//phi*=M_PI/180.0;
	uint8_t pos_x=0, pos_y=0;
	for (uint8_t i=0;i<length;i++)
     85c:	22 23       	and	r18, r18
     85e:	09 f4       	brne	.+2      	; 0x862 <_ZN7Display9draw_lineEhhhf+0x42>
     860:	69 c0       	rjmp	.+210    	; 0x934 <__stack+0x35>
	{
		pos_x=(uint8_t) (-i*cos(phi)+x);
     862:	c8 01       	movw	r24, r16
     864:	b7 01       	movw	r22, r14
     866:	0e 94 c7 27 	call	0x4f8e	; 0x4f8e <cos>
     86a:	2b 01       	movw	r4, r22
     86c:	3c 01       	movw	r6, r24
		pos_y=(uint8_t) (i*sin(phi)+y);
     86e:	c8 01       	movw	r24, r16
     870:	b7 01       	movw	r22, r14
     872:	0e 94 26 2a 	call	0x544c	; 0x544c <sin>
     876:	4b 01       	movw	r8, r22
     878:	5c 01       	movw	r10, r24
     87a:	1b 86       	std	Y+11, r1	; 0x0b
     87c:	1a 86       	std	Y+10, r1	; 0x0a
     87e:	8c 2d       	mov	r24, r12
     880:	90 e0       	ldi	r25, 0x00	; 0
     882:	a0 e0       	ldi	r26, 0x00	; 0
     884:	b0 e0       	ldi	r27, 0x00	; 0
     886:	8a 83       	std	Y+2, r24	; 0x02
     888:	9b 83       	std	Y+3, r25	; 0x03
     88a:	ac 83       	std	Y+4, r26	; 0x04
     88c:	bd 83       	std	Y+5, r27	; 0x05
void Display::draw_line(uint8_t x, uint8_t y, uint8_t length, float phi){
	//phi*=M_PI/180.0;
	uint8_t pos_x=0, pos_y=0;
	for (uint8_t i=0;i<length;i++)
	{
		pos_x=(uint8_t) (-i*cos(phi)+x);
     88e:	8d 2d       	mov	r24, r13
     890:	90 e0       	ldi	r25, 0x00	; 0
     892:	a0 e0       	ldi	r26, 0x00	; 0
     894:	b0 e0       	ldi	r27, 0x00	; 0
     896:	8e 83       	std	Y+6, r24	; 0x06
     898:	9f 83       	std	Y+7, r25	; 0x07
     89a:	a8 87       	std	Y+8, r26	; 0x08
     89c:	b9 87       	std	Y+9, r27	; 0x09
		pos_y=(uint8_t) (i*sin(phi)+y);
     89e:	aa 85       	ldd	r26, Y+10	; 0x0a
     8a0:	bb 85       	ldd	r27, Y+11	; 0x0b
     8a2:	bd 01       	movw	r22, r26
     8a4:	88 27       	eor	r24, r24
     8a6:	77 fd       	sbrc	r23, 7
     8a8:	80 95       	com	r24
     8aa:	98 2f       	mov	r25, r24
     8ac:	0e 94 65 28 	call	0x50ca	; 0x50ca <__floatsisf>
     8b0:	a5 01       	movw	r20, r10
     8b2:	94 01       	movw	r18, r8
     8b4:	0e 94 c3 29 	call	0x5386	; 0x5386 <__mulsf3>
     8b8:	6b 01       	movw	r12, r22
     8ba:	7c 01       	movw	r14, r24
     8bc:	6a 81       	ldd	r22, Y+2	; 0x02
     8be:	7b 81       	ldd	r23, Y+3	; 0x03
     8c0:	8c 81       	ldd	r24, Y+4	; 0x04
     8c2:	9d 81       	ldd	r25, Y+5	; 0x05
     8c4:	0e 94 65 28 	call	0x50ca	; 0x50ca <__floatsisf>
     8c8:	9b 01       	movw	r18, r22
     8ca:	ac 01       	movw	r20, r24
     8cc:	c7 01       	movw	r24, r14
     8ce:	b6 01       	movw	r22, r12
     8d0:	0e 94 fd 26 	call	0x4dfa	; 0x4dfa <__addsf3>
     8d4:	0e 94 37 28 	call	0x506e	; 0x506e <__fixunssfsi>
     8d8:	16 2f       	mov	r17, r22
     8da:	6a 85       	ldd	r22, Y+10	; 0x0a
     8dc:	7b 85       	ldd	r23, Y+11	; 0x0b
     8de:	71 95       	neg	r23
     8e0:	61 95       	neg	r22
     8e2:	71 09       	sbc	r23, r1
void Display::draw_line(uint8_t x, uint8_t y, uint8_t length, float phi){
	//phi*=M_PI/180.0;
	uint8_t pos_x=0, pos_y=0;
	for (uint8_t i=0;i<length;i++)
	{
		pos_x=(uint8_t) (-i*cos(phi)+x);
     8e4:	88 27       	eor	r24, r24
     8e6:	77 fd       	sbrc	r23, 7
     8e8:	80 95       	com	r24
     8ea:	98 2f       	mov	r25, r24
     8ec:	0e 94 65 28 	call	0x50ca	; 0x50ca <__floatsisf>
     8f0:	a3 01       	movw	r20, r6
     8f2:	92 01       	movw	r18, r4
     8f4:	0e 94 c3 29 	call	0x5386	; 0x5386 <__mulsf3>
     8f8:	6b 01       	movw	r12, r22
     8fa:	7c 01       	movw	r14, r24
     8fc:	6e 81       	ldd	r22, Y+6	; 0x06
     8fe:	7f 81       	ldd	r23, Y+7	; 0x07
     900:	88 85       	ldd	r24, Y+8	; 0x08
     902:	99 85       	ldd	r25, Y+9	; 0x09
     904:	0e 94 65 28 	call	0x50ca	; 0x50ca <__floatsisf>
     908:	9b 01       	movw	r18, r22
     90a:	ac 01       	movw	r20, r24
     90c:	c7 01       	movw	r24, r14
     90e:	b6 01       	movw	r22, r12
     910:	0e 94 fd 26 	call	0x4dfa	; 0x4dfa <__addsf3>
     914:	0e 94 37 28 	call	0x506e	; 0x506e <__fixunssfsi>
		pos_y=(uint8_t) (i*sin(phi)+y);
		drawPixel(pos_x,pos_y,0);
     918:	20 e0       	ldi	r18, 0x00	; 0
     91a:	41 2f       	mov	r20, r17
     91c:	c1 01       	movw	r24, r2
     91e:	0e 94 d6 03 	call	0x7ac	; 0x7ac <_ZN7Display9drawPixelEhhh>
     922:	ea 85       	ldd	r30, Y+10	; 0x0a
     924:	fb 85       	ldd	r31, Y+11	; 0x0b
     926:	31 96       	adiw	r30, 0x01	; 1
     928:	fb 87       	std	Y+11, r31	; 0x0b
     92a:	ea 87       	std	Y+10, r30	; 0x0a

//eigene Zeichenfunktionen
void Display::draw_line(uint8_t x, uint8_t y, uint8_t length, float phi){
	//phi*=M_PI/180.0;
	uint8_t pos_x=0, pos_y=0;
	for (uint8_t i=0;i<length;i++)
     92c:	f9 81       	ldd	r31, Y+1	; 0x01
     92e:	ef 17       	cp	r30, r31
     930:	08 f4       	brcc	.+2      	; 0x934 <__stack+0x35>
     932:	b5 cf       	rjmp	.-150    	; 0x89e <_ZN7Display9draw_lineEhhhf+0x7e>
	{
		pos_x=(uint8_t) (-i*cos(phi)+x);
		pos_y=(uint8_t) (i*sin(phi)+y);
		drawPixel(pos_x,pos_y,0);
	}
}
     934:	2b 96       	adiw	r28, 0x0b	; 11
     936:	0f b6       	in	r0, 0x3f	; 63
     938:	f8 94       	cli
     93a:	de bf       	out	0x3e, r29	; 62
     93c:	0f be       	out	0x3f, r0	; 63
     93e:	cd bf       	out	0x3d, r28	; 61
     940:	df 91       	pop	r29
     942:	cf 91       	pop	r28
     944:	1f 91       	pop	r17
     946:	0f 91       	pop	r16
     948:	ff 90       	pop	r15
     94a:	ef 90       	pop	r14
     94c:	df 90       	pop	r13
     94e:	cf 90       	pop	r12
     950:	bf 90       	pop	r11
     952:	af 90       	pop	r10
     954:	9f 90       	pop	r9
     956:	8f 90       	pop	r8
     958:	7f 90       	pop	r7
     95a:	6f 90       	pop	r6
     95c:	5f 90       	pop	r5
     95e:	4f 90       	pop	r4
     960:	3f 90       	pop	r3
     962:	2f 90       	pop	r2
     964:	08 95       	ret

00000966 <_ZN7Display13draw_triangleEhhhff>:

//using basecenterpoint as turningpoint for rotation
//upright triangle has rotationangle of 0
//turning clockwise considered in x transformation
//baseangle=70 is for 1/3 type
void Display::draw_triangle(uint8_t basecenter_x, uint8_t basecenter_y, uint8_t baselength, float baseangle, float rotationangle){
     966:	2f 92       	push	r2
     968:	3f 92       	push	r3
     96a:	4f 92       	push	r4
     96c:	5f 92       	push	r5
     96e:	6f 92       	push	r6
     970:	7f 92       	push	r7
     972:	8f 92       	push	r8
     974:	9f 92       	push	r9
     976:	af 92       	push	r10
     978:	bf 92       	push	r11
     97a:	cf 92       	push	r12
     97c:	df 92       	push	r13
     97e:	ef 92       	push	r14
     980:	ff 92       	push	r15
     982:	0f 93       	push	r16
     984:	1f 93       	push	r17
     986:	cf 93       	push	r28
     988:	df 93       	push	r29
     98a:	cd b7       	in	r28, 0x3d	; 61
     98c:	de b7       	in	r29, 0x3e	; 62
     98e:	60 97       	sbiw	r28, 0x10	; 16
     990:	0f b6       	in	r0, 0x3f	; 63
     992:	f8 94       	cli
     994:	de bf       	out	0x3e, r29	; 62
     996:	0f be       	out	0x3f, r0	; 63
     998:	cd bf       	out	0x3d, r28	; 61
     99a:	1c 01       	movw	r2, r24
     99c:	6f 87       	std	Y+15, r22	; 0x0f
     99e:	4d 83       	std	Y+5, r20	; 0x05
     9a0:	29 83       	std	Y+1, r18	; 0x01
     9a2:	c6 01       	movw	r24, r12
     9a4:	b5 01       	movw	r22, r10
	//correcting rotationangle
	rotationangle*=M_PI/180.0;
     9a6:	25 e3       	ldi	r18, 0x35	; 53
     9a8:	3a ef       	ldi	r19, 0xFA	; 250
     9aa:	4e e8       	ldi	r20, 0x8E	; 142
     9ac:	5c e3       	ldi	r21, 0x3C	; 60
     9ae:	0e 94 c3 29 	call	0x5386	; 0x5386 <__mulsf3>
     9b2:	4b 01       	movw	r8, r22
     9b4:	5c 01       	movw	r10, r24
	baseangle*=M_PI/180.0;
     9b6:	25 e3       	ldi	r18, 0x35	; 53
     9b8:	3a ef       	ldi	r19, 0xFA	; 250
     9ba:	4e e8       	ldi	r20, 0x8E	; 142
     9bc:	5c e3       	ldi	r21, 0x3C	; 60
     9be:	c8 01       	movw	r24, r16
     9c0:	b7 01       	movw	r22, r14
     9c2:	0e 94 c3 29 	call	0x5386	; 0x5386 <__mulsf3>
     9c6:	6e 83       	std	Y+6, r22	; 0x06
     9c8:	7f 83       	std	Y+7, r23	; 0x07
     9ca:	88 87       	std	Y+8, r24	; 0x08
     9cc:	99 87       	std	Y+9, r25	; 0x09
	//draw baseline
	draw_line(basecenter_x,basecenter_y,baselength/2,rotationangle);
     9ce:	79 80       	ldd	r7, Y+1	; 0x01
     9d0:	76 94       	lsr	r7
     9d2:	85 01       	movw	r16, r10
     9d4:	74 01       	movw	r14, r8
     9d6:	27 2d       	mov	r18, r7
     9d8:	4d 81       	ldd	r20, Y+5	; 0x05
     9da:	6f 85       	ldd	r22, Y+15	; 0x0f
     9dc:	c1 01       	movw	r24, r2
     9de:	0e 94 10 04 	call	0x820	; 0x820 <_ZN7Display9draw_lineEhhhf>
	draw_line(basecenter_x,basecenter_y,baselength/2,rotationangle-M_PI);
     9e2:	2b ed       	ldi	r18, 0xDB	; 219
     9e4:	3f e0       	ldi	r19, 0x0F	; 15
     9e6:	49 e4       	ldi	r20, 0x49	; 73
     9e8:	50 e4       	ldi	r21, 0x40	; 64
     9ea:	c5 01       	movw	r24, r10
     9ec:	b4 01       	movw	r22, r8
     9ee:	0e 94 fc 26 	call	0x4df8	; 0x4df8 <__subsf3>
     9f2:	7b 01       	movw	r14, r22
     9f4:	8c 01       	movw	r16, r24
     9f6:	27 2d       	mov	r18, r7
     9f8:	4d 81       	ldd	r20, Y+5	; 0x05
     9fa:	6f 85       	ldd	r22, Y+15	; 0x0f
     9fc:	c1 01       	movw	r24, r2
     9fe:	0e 94 10 04 	call	0x820	; 0x820 <_ZN7Display9draw_lineEhhhf>
	//draw midleline
	uint8_t middlelength=baselength/2*tan(baseangle);
     a02:	6e 81       	ldd	r22, Y+6	; 0x06
     a04:	7f 81       	ldd	r23, Y+7	; 0x07
     a06:	88 85       	ldd	r24, Y+8	; 0x08
     a08:	99 85       	ldd	r25, Y+9	; 0x09
     a0a:	0e 94 2f 2a 	call	0x545e	; 0x545e <tan>
     a0e:	6b 01       	movw	r12, r22
     a10:	7c 01       	movw	r14, r24
     a12:	67 2d       	mov	r22, r7
     a14:	70 e0       	ldi	r23, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	90 e0       	ldi	r25, 0x00	; 0
     a1a:	0e 94 65 28 	call	0x50ca	; 0x50ca <__floatsisf>
     a1e:	a7 01       	movw	r20, r14
     a20:	96 01       	movw	r18, r12
     a22:	0e 94 c3 29 	call	0x5386	; 0x5386 <__mulsf3>
     a26:	0e 94 37 28 	call	0x506e	; 0x506e <__fixunssfsi>
     a2a:	68 8b       	std	Y+16, r22	; 0x10
	draw_line(basecenter_x,basecenter_y,middlelength,rotationangle-M_PI_2);
     a2c:	2b ed       	ldi	r18, 0xDB	; 219
     a2e:	3f e0       	ldi	r19, 0x0F	; 15
     a30:	49 ec       	ldi	r20, 0xC9	; 201
     a32:	5f e3       	ldi	r21, 0x3F	; 63
     a34:	c5 01       	movw	r24, r10
     a36:	b4 01       	movw	r22, r8
     a38:	0e 94 fc 26 	call	0x4df8	; 0x4df8 <__subsf3>
     a3c:	6a 87       	std	Y+10, r22	; 0x0a
     a3e:	7b 87       	std	Y+11, r23	; 0x0b
     a40:	8c 87       	std	Y+12, r24	; 0x0c
     a42:	9d 87       	std	Y+13, r25	; 0x0d
     a44:	7b 01       	movw	r14, r22
     a46:	8c 01       	movw	r16, r24
     a48:	28 89       	ldd	r18, Y+16	; 0x10
     a4a:	4d 81       	ldd	r20, Y+5	; 0x05
     a4c:	6f 85       	ldd	r22, Y+15	; 0x0f
     a4e:	c1 01       	movw	r24, r2
     a50:	0e 94 10 04 	call	0x820	; 0x820 <_ZN7Display9draw_lineEhhhf>
	//draw left arm
	uint8_t lengtharm=baselength/(2*cos(baseangle));
     a54:	6e 81       	ldd	r22, Y+6	; 0x06
     a56:	7f 81       	ldd	r23, Y+7	; 0x07
     a58:	88 85       	ldd	r24, Y+8	; 0x08
     a5a:	99 85       	ldd	r25, Y+9	; 0x09
     a5c:	0e 94 c7 27 	call	0x4f8e	; 0x4f8e <cos>
     a60:	6b 01       	movw	r12, r22
     a62:	7c 01       	movw	r14, r24
     a64:	29 81       	ldd	r18, Y+1	; 0x01
     a66:	62 2f       	mov	r22, r18
     a68:	70 e0       	ldi	r23, 0x00	; 0
     a6a:	80 e0       	ldi	r24, 0x00	; 0
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	0e 94 65 28 	call	0x50ca	; 0x50ca <__floatsisf>
     a72:	2b 01       	movw	r4, r22
     a74:	3c 01       	movw	r6, r24
     a76:	a7 01       	movw	r20, r14
     a78:	96 01       	movw	r18, r12
     a7a:	c7 01       	movw	r24, r14
     a7c:	b6 01       	movw	r22, r12
     a7e:	0e 94 fd 26 	call	0x4dfa	; 0x4dfa <__addsf3>
     a82:	9b 01       	movw	r18, r22
     a84:	ac 01       	movw	r20, r24
     a86:	c3 01       	movw	r24, r6
     a88:	b2 01       	movw	r22, r4
     a8a:	0e 94 ca 27 	call	0x4f94	; 0x4f94 <__divsf3>
     a8e:	0e 94 37 28 	call	0x506e	; 0x506e <__fixunssfsi>
     a92:	6e 87       	std	Y+14, r22	; 0x0e
	uint8_t sx = basecenter_x-middlelength*cos(rotationangle-M_PI_2);
     a94:	e8 89       	ldd	r30, Y+16	; 0x10
     a96:	6e 2f       	mov	r22, r30
     a98:	70 e0       	ldi	r23, 0x00	; 0
     a9a:	80 e0       	ldi	r24, 0x00	; 0
     a9c:	90 e0       	ldi	r25, 0x00	; 0
     a9e:	0e 94 65 28 	call	0x50ca	; 0x50ca <__floatsisf>
     aa2:	69 83       	std	Y+1, r22	; 0x01
     aa4:	7a 83       	std	Y+2, r23	; 0x02
     aa6:	8b 83       	std	Y+3, r24	; 0x03
     aa8:	9c 83       	std	Y+4, r25	; 0x04
     aaa:	6a 85       	ldd	r22, Y+10	; 0x0a
     aac:	7b 85       	ldd	r23, Y+11	; 0x0b
     aae:	8c 85       	ldd	r24, Y+12	; 0x0c
     ab0:	9d 85       	ldd	r25, Y+13	; 0x0d
     ab2:	0e 94 c7 27 	call	0x4f8e	; 0x4f8e <cos>
     ab6:	6b 01       	movw	r12, r22
     ab8:	7c 01       	movw	r14, r24
     aba:	ff 85       	ldd	r31, Y+15	; 0x0f
     abc:	6f 2f       	mov	r22, r31
     abe:	70 e0       	ldi	r23, 0x00	; 0
     ac0:	80 e0       	ldi	r24, 0x00	; 0
     ac2:	90 e0       	ldi	r25, 0x00	; 0
     ac4:	0e 94 65 28 	call	0x50ca	; 0x50ca <__floatsisf>
     ac8:	2b 01       	movw	r4, r22
     aca:	3c 01       	movw	r6, r24
     acc:	a7 01       	movw	r20, r14
     ace:	96 01       	movw	r18, r12
     ad0:	69 81       	ldd	r22, Y+1	; 0x01
     ad2:	7a 81       	ldd	r23, Y+2	; 0x02
     ad4:	8b 81       	ldd	r24, Y+3	; 0x03
     ad6:	9c 81       	ldd	r25, Y+4	; 0x04
     ad8:	0e 94 c3 29 	call	0x5386	; 0x5386 <__mulsf3>
     adc:	9b 01       	movw	r18, r22
     ade:	ac 01       	movw	r20, r24
     ae0:	c3 01       	movw	r24, r6
     ae2:	b2 01       	movw	r22, r4
     ae4:	0e 94 fc 26 	call	0x4df8	; 0x4df8 <__subsf3>
     ae8:	0e 94 37 28 	call	0x506e	; 0x506e <__fixunssfsi>
     aec:	6f 87       	std	Y+15, r22	; 0x0f
	uint8_t sy = basecenter_y+middlelength*sin(rotationangle-M_PI_2);
     aee:	6a 85       	ldd	r22, Y+10	; 0x0a
     af0:	7b 85       	ldd	r23, Y+11	; 0x0b
     af2:	8c 85       	ldd	r24, Y+12	; 0x0c
     af4:	9d 85       	ldd	r25, Y+13	; 0x0d
     af6:	0e 94 26 2a 	call	0x544c	; 0x544c <sin>
     afa:	6b 01       	movw	r12, r22
     afc:	7c 01       	movw	r14, r24
     afe:	2d 81       	ldd	r18, Y+5	; 0x05
     b00:	62 2f       	mov	r22, r18
     b02:	70 e0       	ldi	r23, 0x00	; 0
     b04:	80 e0       	ldi	r24, 0x00	; 0
     b06:	90 e0       	ldi	r25, 0x00	; 0
     b08:	0e 94 65 28 	call	0x50ca	; 0x50ca <__floatsisf>
     b0c:	2b 01       	movw	r4, r22
     b0e:	3c 01       	movw	r6, r24
     b10:	a7 01       	movw	r20, r14
     b12:	96 01       	movw	r18, r12
     b14:	69 81       	ldd	r22, Y+1	; 0x01
     b16:	7a 81       	ldd	r23, Y+2	; 0x02
     b18:	8b 81       	ldd	r24, Y+3	; 0x03
     b1a:	9c 81       	ldd	r25, Y+4	; 0x04
     b1c:	0e 94 c3 29 	call	0x5386	; 0x5386 <__mulsf3>
     b20:	9b 01       	movw	r18, r22
     b22:	ac 01       	movw	r20, r24
     b24:	c3 01       	movw	r24, r6
     b26:	b2 01       	movw	r22, r4
     b28:	0e 94 fd 26 	call	0x4dfa	; 0x4dfa <__addsf3>
     b2c:	0e 94 37 28 	call	0x506e	; 0x506e <__fixunssfsi>
     b30:	d6 2e       	mov	r13, r22
	draw_line(sx,sy,lengtharm,baseangle+rotationangle);
     b32:	a5 01       	movw	r20, r10
     b34:	94 01       	movw	r18, r8
     b36:	6e 81       	ldd	r22, Y+6	; 0x06
     b38:	7f 81       	ldd	r23, Y+7	; 0x07
     b3a:	88 85       	ldd	r24, Y+8	; 0x08
     b3c:	99 85       	ldd	r25, Y+9	; 0x09
     b3e:	0e 94 fd 26 	call	0x4dfa	; 0x4dfa <__addsf3>
     b42:	7b 01       	movw	r14, r22
     b44:	8c 01       	movw	r16, r24
     b46:	2e 85       	ldd	r18, Y+14	; 0x0e
     b48:	4d 2d       	mov	r20, r13
     b4a:	6f 85       	ldd	r22, Y+15	; 0x0f
     b4c:	c1 01       	movw	r24, r2
     b4e:	0e 94 10 04 	call	0x820	; 0x820 <_ZN7Display9draw_lineEhhhf>
	//draw right arm
	draw_line(sx,sy,lengtharm,-baseangle+rotationangle-M_PI);
     b52:	2e 81       	ldd	r18, Y+6	; 0x06
     b54:	3f 81       	ldd	r19, Y+7	; 0x07
     b56:	48 85       	ldd	r20, Y+8	; 0x08
     b58:	59 85       	ldd	r21, Y+9	; 0x09
     b5a:	c5 01       	movw	r24, r10
     b5c:	b4 01       	movw	r22, r8
     b5e:	0e 94 fc 26 	call	0x4df8	; 0x4df8 <__subsf3>
     b62:	2b ed       	ldi	r18, 0xDB	; 219
     b64:	3f e0       	ldi	r19, 0x0F	; 15
     b66:	49 e4       	ldi	r20, 0x49	; 73
     b68:	50 e4       	ldi	r21, 0x40	; 64
     b6a:	0e 94 fc 26 	call	0x4df8	; 0x4df8 <__subsf3>
     b6e:	7b 01       	movw	r14, r22
     b70:	8c 01       	movw	r16, r24
     b72:	2e 85       	ldd	r18, Y+14	; 0x0e
     b74:	4d 2d       	mov	r20, r13
     b76:	6f 85       	ldd	r22, Y+15	; 0x0f
     b78:	c1 01       	movw	r24, r2
     b7a:	0e 94 10 04 	call	0x820	; 0x820 <_ZN7Display9draw_lineEhhhf>
}
     b7e:	60 96       	adiw	r28, 0x10	; 16
     b80:	0f b6       	in	r0, 0x3f	; 63
     b82:	f8 94       	cli
     b84:	de bf       	out	0x3e, r29	; 62
     b86:	0f be       	out	0x3f, r0	; 63
     b88:	cd bf       	out	0x3d, r28	; 61
     b8a:	df 91       	pop	r29
     b8c:	cf 91       	pop	r28
     b8e:	1f 91       	pop	r17
     b90:	0f 91       	pop	r16
     b92:	ff 90       	pop	r15
     b94:	ef 90       	pop	r14
     b96:	df 90       	pop	r13
     b98:	cf 90       	pop	r12
     b9a:	bf 90       	pop	r11
     b9c:	af 90       	pop	r10
     b9e:	9f 90       	pop	r9
     ba0:	8f 90       	pop	r8
     ba2:	7f 90       	pop	r7
     ba4:	6f 90       	pop	r6
     ba6:	5f 90       	pop	r5
     ba8:	4f 90       	pop	r4
     baa:	3f 90       	pop	r3
     bac:	2f 90       	pop	r2
     bae:	08 95       	ret

00000bb0 <_ZN7Display9draw_ASCIEhhh>:

void Display::draw_ASCI(uint8_t sym,uint8_t x, uint8_t y){
     bb0:	0f 93       	push	r16
     bb2:	1f 93       	push	r17
     bb4:	cf 93       	push	r28
     bb6:	df 93       	push	r29
	if(sym!=' ' && sym>=33){
     bb8:	61 32       	cpi	r22, 0x21	; 33
     bba:	08 f4       	brcc	.+2      	; 0xbbe <_ZN7Display9draw_ASCIEhhh+0xe>
     bbc:	42 c0       	rjmp	.+132    	; 0xc42 <_ZN7Display9draw_ASCIEhhh+0x92>
		sym-=33;
		uint16_t symbol;
		for(uint8_t i = 0; i < 5; i++){
			symbol = pgm_read_byte(&font5x8[sym][i]);
			symbol = symbol << y%8;
			Displayframe[x+(y/8)*SSD1306_WIDTH+i] |=(uint8_t) (symbol & 0x00FF);
     bbe:	a4 2f       	mov	r26, r20
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	02 2f       	mov	r16, r18
     bc4:	06 95       	lsr	r16
     bc6:	06 95       	lsr	r16
     bc8:	06 95       	lsr	r16
     bca:	30 e8       	ldi	r19, 0x80	; 128
     bcc:	03 9f       	mul	r16, r19
     bce:	80 01       	movw	r16, r0
     bd0:	11 24       	eor	r1, r1
     bd2:	ed 01       	movw	r28, r26
     bd4:	c0 0f       	add	r28, r16
     bd6:	d1 1f       	adc	r29, r17
			if(((symbol&0xFF00)>>8)==0){
				Displayframe[x+(y/8+1)*SSD1306_WIDTH+i] |= 0;
			}
			else {
				Displayframe[x+(y/8+1)*SSD1306_WIDTH+i] |= (uint8_t) ((symbol & 0xFF00)>>8);
     bd8:	00 58       	subi	r16, 0x80	; 128
     bda:	1f 4f       	sbci	r17, 0xFF	; 255
     bdc:	0a 0f       	add	r16, r26
     bde:	1b 1f       	adc	r17, r27
	draw_line(sx,sy,lengtharm,-baseangle+rotationangle-M_PI);
}

void Display::draw_ASCI(uint8_t sym,uint8_t x, uint8_t y){
	if(sym!=' ' && sym>=33){
		sym-=33;
     be0:	61 52       	subi	r22, 0x21	; 33
     be2:	46 2f       	mov	r20, r22
     be4:	50 e0       	ldi	r21, 0x00	; 0
     be6:	fa 01       	movw	r30, r20
     be8:	ee 0f       	add	r30, r30
     bea:	ff 1f       	adc	r31, r31
     bec:	ee 0f       	add	r30, r30
     bee:	ff 1f       	adc	r31, r31
     bf0:	e4 0f       	add	r30, r20
     bf2:	f5 1f       	adc	r31, r21
     bf4:	ee 55       	subi	r30, 0x5E	; 94
     bf6:	fd 4f       	sbci	r31, 0xFD	; 253
     bf8:	dc 01       	movw	r26, r24
     bfa:	ac 0f       	add	r26, r28
     bfc:	bd 1f       	adc	r27, r29
     bfe:	ae 01       	movw	r20, r28
     c00:	05 96       	adiw	r24, 0x05	; 5
     c02:	8c 0f       	add	r24, r28
     c04:	9d 1f       	adc	r25, r29
		uint16_t symbol;
		for(uint8_t i = 0; i < 5; i++){
			symbol = pgm_read_byte(&font5x8[sym][i]);
			symbol = symbol << y%8;
     c06:	27 70       	andi	r18, 0x07	; 7
void Display::draw_ASCI(uint8_t sym,uint8_t x, uint8_t y){
	if(sym!=' ' && sym>=33){
		sym-=33;
		uint16_t symbol;
		for(uint8_t i = 0; i < 5; i++){
			symbol = pgm_read_byte(&font5x8[sym][i]);
     c08:	64 91       	lpm	r22, Z
     c0a:	70 e0       	ldi	r23, 0x00	; 0
			symbol = symbol << y%8;
     c0c:	02 2e       	mov	r0, r18
     c0e:	02 c0       	rjmp	.+4      	; 0xc14 <_ZN7Display9draw_ASCIEhhh+0x64>
     c10:	66 0f       	add	r22, r22
     c12:	77 1f       	adc	r23, r23
     c14:	0a 94       	dec	r0
     c16:	e2 f7       	brpl	.-8      	; 0xc10 <_ZN7Display9draw_ASCIEhhh+0x60>
			Displayframe[x+(y/8)*SSD1306_WIDTH+i] |=(uint8_t) (symbol & 0x00FF);
     c18:	3c 91       	ld	r19, X
     c1a:	36 2b       	or	r19, r22
     c1c:	3c 93       	st	X, r19
			if(((symbol&0xFF00)>>8)==0){
     c1e:	67 2f       	mov	r22, r23
     c20:	77 27       	eor	r23, r23
     c22:	61 15       	cp	r22, r1
     c24:	71 05       	cpc	r23, r1
     c26:	41 f0       	breq	.+16     	; 0xc38 <_ZN7Display9draw_ASCIEhhh+0x88>
     c28:	ed 01       	movw	r28, r26
     c2a:	c4 1b       	sub	r28, r20
     c2c:	d5 0b       	sbc	r29, r21
     c2e:	c0 0f       	add	r28, r16
     c30:	d1 1f       	adc	r29, r17
				Displayframe[x+(y/8+1)*SSD1306_WIDTH+i] |= 0;
			}
			else {
				Displayframe[x+(y/8+1)*SSD1306_WIDTH+i] |= (uint8_t) ((symbol & 0xFF00)>>8);
     c32:	38 81       	ld	r19, Y
     c34:	63 2b       	or	r22, r19
     c36:	68 83       	st	Y, r22
     c38:	31 96       	adiw	r30, 0x01	; 1
     c3a:	11 96       	adiw	r26, 0x01	; 1

void Display::draw_ASCI(uint8_t sym,uint8_t x, uint8_t y){
	if(sym!=' ' && sym>=33){
		sym-=33;
		uint16_t symbol;
		for(uint8_t i = 0; i < 5; i++){
     c3c:	a8 17       	cp	r26, r24
     c3e:	b9 07       	cpc	r27, r25
     c40:	19 f7       	brne	.-58     	; 0xc08 <_ZN7Display9draw_ASCIEhhh+0x58>
	else{
		for(uint8_t i = 0; i < 7; i++){
			Displayframe[x+(y/8)*SSD1306_WIDTH+i] |= 0;
		}
	}
}
     c42:	df 91       	pop	r29
     c44:	cf 91       	pop	r28
     c46:	1f 91       	pop	r17
     c48:	0f 91       	pop	r16
     c4a:	08 95       	ret

00000c4c <_ZN7Display16draw_number16x16Ehhh>:

void Display::draw_number16x16(uint8_t number, uint8_t x, uint8_t y){
     c4c:	ef 92       	push	r14
     c4e:	ff 92       	push	r15
     c50:	0f 93       	push	r16
     c52:	1f 93       	push	r17
     c54:	cf 93       	push	r28
     c56:	df 93       	push	r29
	uint16_t symbol;
	if(number>=0 && number<10){
     c58:	6a 30       	cpi	r22, 0x0A	; 10
     c5a:	08 f0       	brcs	.+2      	; 0xc5e <_ZN7Display16draw_number16x16Ehhh+0x12>
     c5c:	66 c0       	rjmp	.+204    	; 0xd2a <_ZN7Display16draw_number16x16Ehhh+0xde>
		for(uint8_t i = 0; i < 32;i++){
			symbol = pgm_read_byte(&digits16x16[number][i]);
			symbol = symbol << y%8;
			if(i<16){
				Displayframe[x+(y/8)*SSD1306_WIDTH+i] |=(uint8_t) (symbol & 0x00FF);
     c5e:	50 e0       	ldi	r21, 0x00	; 0
     c60:	02 2f       	mov	r16, r18
     c62:	06 95       	lsr	r16
     c64:	06 95       	lsr	r16
     c66:	06 95       	lsr	r16
     c68:	10 e0       	ldi	r17, 0x00	; 0
     c6a:	d8 01       	movw	r26, r16
     c6c:	b6 95       	lsr	r27
     c6e:	ba 2f       	mov	r27, r26
     c70:	aa 27       	eor	r26, r26
     c72:	b7 95       	ror	r27
     c74:	a7 95       	ror	r26
				if(((symbol&0xFF00)>>8)==0){
					Displayframe[x+(y/8+1)*SSD1306_WIDTH+i] |= 0;
				}
				else {
					Displayframe[x+(y/8+1)*SSD1306_WIDTH+i] |= (uint8_t) ((symbol & 0xFF00)>>8);
     c76:	0f 5f       	subi	r16, 0xFF	; 255
     c78:	1f 4f       	sbci	r17, 0xFF	; 255
				}
			}
			else {
				Displayframe[x+(y/8+1)*SSD1306_WIDTH+(i-16)] |= (uint8_t) (symbol & 0x00FF);
     c7a:	16 95       	lsr	r17
     c7c:	10 2f       	mov	r17, r16
     c7e:	00 27       	eor	r16, r16
     c80:	17 95       	ror	r17
     c82:	07 95       	ror	r16
				Displayframe[x+(y/8)*SSD1306_WIDTH+i] |=(uint8_t) (symbol & 0x00FF);
				if(((symbol&0xFF00)>>8)==0){
					Displayframe[x+(y/8+1)*SSD1306_WIDTH+i] |= 0;
				}
				else {
					Displayframe[x+(y/8+1)*SSD1306_WIDTH+i] |= (uint8_t) ((symbol & 0xFF00)>>8);
     c84:	7d 01       	movw	r14, r26
     c86:	30 e8       	ldi	r19, 0x80	; 128
     c88:	e3 0e       	add	r14, r19
     c8a:	f1 1c       	adc	r15, r1
     c8c:	e4 0e       	add	r14, r20
     c8e:	f5 1e       	adc	r15, r21
     c90:	e8 0e       	add	r14, r24
     c92:	f9 1e       	adc	r15, r25
				}
			}
			else {
				Displayframe[x+(y/8+1)*SSD1306_WIDTH+(i-16)] |= (uint8_t) (symbol & 0x00FF);
     c94:	ea 01       	movw	r28, r20
     c96:	c0 0f       	add	r28, r16
     c98:	d1 1f       	adc	r29, r17
     c9a:	60 97       	sbiw	r28, 0x10	; 16
     c9c:	c8 0f       	add	r28, r24
     c9e:	d9 1f       	adc	r29, r25
				if(((symbol&0xFF00)>>8)==0){
					Displayframe[x+(y/8+2)*SSD1306_WIDTH+(i-16)] |= 0;
				}
				else {
					Displayframe[x+(y/8+2)*SSD1306_WIDTH+(i-16)] |= (uint8_t) ((symbol & 0xFF00)>>8);
     ca0:	04 0f       	add	r16, r20
     ca2:	15 1f       	adc	r17, r21
     ca4:	00 59       	subi	r16, 0x90	; 144
     ca6:	1f 4f       	sbci	r17, 0xFF	; 255
     ca8:	08 0f       	add	r16, r24
     caa:	19 1f       	adc	r17, r25
	if(number>=0 && number<10){
		for(uint8_t i = 0; i < 32;i++){
			symbol = pgm_read_byte(&digits16x16[number][i]);
			symbol = symbol << y%8;
			if(i<16){
				Displayframe[x+(y/8)*SSD1306_WIDTH+i] |=(uint8_t) (symbol & 0x00FF);
     cac:	a4 0f       	add	r26, r20
     cae:	b5 1f       	adc	r27, r21
     cb0:	a8 0f       	add	r26, r24
     cb2:	b9 1f       	adc	r27, r25
     cb4:	e0 e2       	ldi	r30, 0x20	; 32
     cb6:	6e 9f       	mul	r22, r30
     cb8:	c0 01       	movw	r24, r0
     cba:	11 24       	eor	r1, r1
				Displayframe[x+(y/8+1)*SSD1306_WIDTH+(i-16)] |= (uint8_t) (symbol & 0x00FF);
				if(((symbol&0xFF00)>>8)==0){
					Displayframe[x+(y/8+2)*SSD1306_WIDTH+(i-16)] |= 0;
				}
				else {
					Displayframe[x+(y/8+2)*SSD1306_WIDTH+(i-16)] |= (uint8_t) ((symbol & 0xFF00)>>8);
     cbc:	40 e0       	ldi	r20, 0x00	; 0
     cbe:	50 e0       	ldi	r21, 0x00	; 0
     cc0:	8e 59       	subi	r24, 0x9E	; 158
     cc2:	9e 4f       	sbci	r25, 0xFE	; 254
void Display::draw_number16x16(uint8_t number, uint8_t x, uint8_t y){
	uint16_t symbol;
	if(number>=0 && number<10){
		for(uint8_t i = 0; i < 32;i++){
			symbol = pgm_read_byte(&digits16x16[number][i]);
			symbol = symbol << y%8;
     cc4:	27 70       	andi	r18, 0x07	; 7
     cc6:	fc 01       	movw	r30, r24
     cc8:	e4 0f       	add	r30, r20
     cca:	f5 1f       	adc	r31, r21

void Display::draw_number16x16(uint8_t number, uint8_t x, uint8_t y){
	uint16_t symbol;
	if(number>=0 && number<10){
		for(uint8_t i = 0; i < 32;i++){
			symbol = pgm_read_byte(&digits16x16[number][i]);
     ccc:	e4 91       	lpm	r30, Z
     cce:	f0 e0       	ldi	r31, 0x00	; 0
			symbol = symbol << y%8;
     cd0:	02 2e       	mov	r0, r18
     cd2:	02 c0       	rjmp	.+4      	; 0xcd8 <_ZN7Display16draw_number16x16Ehhh+0x8c>
     cd4:	ee 0f       	add	r30, r30
     cd6:	ff 1f       	adc	r31, r31
     cd8:	0a 94       	dec	r0
     cda:	e2 f7       	brpl	.-8      	; 0xcd4 <_ZN7Display16draw_number16x16Ehhh+0x88>
			if(i<16){
     cdc:	40 31       	cpi	r20, 0x10	; 16
     cde:	68 f4       	brcc	.+26     	; 0xcfa <_ZN7Display16draw_number16x16Ehhh+0xae>
				Displayframe[x+(y/8)*SSD1306_WIDTH+i] |=(uint8_t) (symbol & 0x00FF);
     ce0:	3c 91       	ld	r19, X
     ce2:	3e 2b       	or	r19, r30
     ce4:	3c 93       	st	X, r19
				if(((symbol&0xFF00)>>8)==0){
     ce6:	6f 2f       	mov	r22, r31
     ce8:	77 27       	eor	r23, r23
     cea:	61 15       	cp	r22, r1
     cec:	71 05       	cpc	r23, r1
     cee:	89 f0       	breq	.+34     	; 0xd12 <_ZN7Display16draw_number16x16Ehhh+0xc6>
					Displayframe[x+(y/8+1)*SSD1306_WIDTH+i] |= 0;
				}
				else {
					Displayframe[x+(y/8+1)*SSD1306_WIDTH+i] |= (uint8_t) ((symbol & 0xFF00)>>8);
     cf0:	f7 01       	movw	r30, r14
     cf2:	30 81       	ld	r19, Z
     cf4:	36 2b       	or	r19, r22
     cf6:	30 83       	st	Z, r19
     cf8:	0c c0       	rjmp	.+24     	; 0xd12 <_ZN7Display16draw_number16x16Ehhh+0xc6>
				}
			}
			else {
				Displayframe[x+(y/8+1)*SSD1306_WIDTH+(i-16)] |= (uint8_t) (symbol & 0x00FF);
     cfa:	38 81       	ld	r19, Y
     cfc:	3e 2b       	or	r19, r30
     cfe:	38 83       	st	Y, r19
				if(((symbol&0xFF00)>>8)==0){
     d00:	6f 2f       	mov	r22, r31
     d02:	77 27       	eor	r23, r23
     d04:	61 15       	cp	r22, r1
     d06:	71 05       	cpc	r23, r1
     d08:	21 f0       	breq	.+8      	; 0xd12 <_ZN7Display16draw_number16x16Ehhh+0xc6>
					Displayframe[x+(y/8+2)*SSD1306_WIDTH+(i-16)] |= 0;
				}
				else {
					Displayframe[x+(y/8+2)*SSD1306_WIDTH+(i-16)] |= (uint8_t) ((symbol & 0xFF00)>>8);
     d0a:	f8 01       	movw	r30, r16
     d0c:	30 81       	ld	r19, Z
     d0e:	36 2b       	or	r19, r22
     d10:	30 83       	st	Z, r19
     d12:	4f 5f       	subi	r20, 0xFF	; 255
     d14:	5f 4f       	sbci	r21, 0xFF	; 255
     d16:	ff ef       	ldi	r31, 0xFF	; 255
     d18:	ef 1a       	sub	r14, r31
     d1a:	ff 0a       	sbc	r15, r31
     d1c:	21 96       	adiw	r28, 0x01	; 1
     d1e:	0f 5f       	subi	r16, 0xFF	; 255
     d20:	1f 4f       	sbci	r17, 0xFF	; 255
     d22:	11 96       	adiw	r26, 0x01	; 1
}

void Display::draw_number16x16(uint8_t number, uint8_t x, uint8_t y){
	uint16_t symbol;
	if(number>=0 && number<10){
		for(uint8_t i = 0; i < 32;i++){
     d24:	40 32       	cpi	r20, 0x20	; 32
     d26:	51 05       	cpc	r21, r1
     d28:	71 f6       	brne	.-100    	; 0xcc6 <_ZN7Display16draw_number16x16Ehhh+0x7a>
					Displayframe[x+(y/8+2)*SSD1306_WIDTH+(i-16)] |= (uint8_t) ((symbol & 0xFF00)>>8);
				}
			}
		}
	}
}
     d2a:	df 91       	pop	r29
     d2c:	cf 91       	pop	r28
     d2e:	1f 91       	pop	r17
     d30:	0f 91       	pop	r16
     d32:	ff 90       	pop	r15
     d34:	ef 90       	pop	r14
     d36:	08 95       	ret

00000d38 <_ZN7Display6analogEhhhh>:

void Display::analog(uint8_t stunde, uint8_t minute, uint8_t sekunde, uint8_t sekanzeige){
     d38:	2f 92       	push	r2
     d3a:	3f 92       	push	r3
     d3c:	4f 92       	push	r4
     d3e:	5f 92       	push	r5
     d40:	6f 92       	push	r6
     d42:	7f 92       	push	r7
     d44:	8f 92       	push	r8
     d46:	9f 92       	push	r9
     d48:	af 92       	push	r10
     d4a:	bf 92       	push	r11
     d4c:	cf 92       	push	r12
     d4e:	df 92       	push	r13
     d50:	ef 92       	push	r14
     d52:	ff 92       	push	r15
     d54:	0f 93       	push	r16
     d56:	1f 93       	push	r17
     d58:	cf 93       	push	r28
     d5a:	df 93       	push	r29
     d5c:	cd b7       	in	r28, 0x3d	; 61
     d5e:	de b7       	in	r29, 0x3e	; 62
     d60:	27 97       	sbiw	r28, 0x07	; 7
     d62:	0f b6       	in	r0, 0x3f	; 63
     d64:	f8 94       	cli
     d66:	de bf       	out	0x3e, r29	; 62
     d68:	0f be       	out	0x3f, r0	; 63
     d6a:	cd bf       	out	0x3d, r28	; 61
     d6c:	9f 83       	std	Y+7, r25	; 0x07
     d6e:	8e 83       	std	Y+6, r24	; 0x06
     d70:	6d 83       	std	Y+5, r22	; 0x05
     d72:	34 2e       	mov	r3, r20
	uint8_t Px=32-1;
	uint8_t Py=32-1;
	uint8_t x=0,y=0;
	float winkel=0;
	
	if (sekanzeige)
     d74:	00 23       	and	r16, r16
     d76:	09 f4       	brne	.+2      	; 0xd7a <_ZN7Display6analogEhhhh+0x42>
     d78:	29 c1       	rjmp	.+594    	; 0xfcc <_ZN7Display6analogEhhhh+0x294>
	{
		//Berechnen des Sekundenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(sekunde*6.0)*M_PI/180.0-M_PI/2.0;
     d7a:	62 2f       	mov	r22, r18
     d7c:	70 e0       	ldi	r23, 0x00	; 0
     d7e:	80 e0       	ldi	r24, 0x00	; 0
     d80:	90 e0       	ldi	r25, 0x00	; 0
     d82:	0e 94 65 28 	call	0x50ca	; 0x50ca <__floatsisf>
     d86:	20 e0       	ldi	r18, 0x00	; 0
     d88:	30 e0       	ldi	r19, 0x00	; 0
     d8a:	40 ec       	ldi	r20, 0xC0	; 192
     d8c:	50 e4       	ldi	r21, 0x40	; 64
     d8e:	0e 94 c3 29 	call	0x5386	; 0x5386 <__mulsf3>
     d92:	2b ed       	ldi	r18, 0xDB	; 219
     d94:	3f e0       	ldi	r19, 0x0F	; 15
     d96:	49 e4       	ldi	r20, 0x49	; 73
     d98:	50 e4       	ldi	r21, 0x40	; 64
     d9a:	0e 94 c3 29 	call	0x5386	; 0x5386 <__mulsf3>
     d9e:	20 e0       	ldi	r18, 0x00	; 0
     da0:	30 e0       	ldi	r19, 0x00	; 0
     da2:	44 e3       	ldi	r20, 0x34	; 52
     da4:	53 e4       	ldi	r21, 0x43	; 67
     da6:	0e 94 ca 27 	call	0x4f94	; 0x4f94 <__divsf3>
     daa:	2b ed       	ldi	r18, 0xDB	; 219
     dac:	3f e0       	ldi	r19, 0x0F	; 15
     dae:	49 ec       	ldi	r20, 0xC9	; 201
     db0:	5f e3       	ldi	r21, 0x3F	; 63
     db2:	0e 94 fc 26 	call	0x4df8	; 0x4df8 <__subsf3>
     db6:	6b 01       	movw	r12, r22
     db8:	7c 01       	movw	r14, r24
			x=(uint8_t) i*cos(winkel)+Px;
     dba:	0e 94 c7 27 	call	0x4f8e	; 0x4f8e <cos>
     dbe:	2b 01       	movw	r4, r22
     dc0:	3c 01       	movw	r6, r24
			y=(uint8_t) i*sin(winkel)+Py;
     dc2:	c7 01       	movw	r24, r14
     dc4:	b6 01       	movw	r22, r12
     dc6:	0e 94 26 2a 	call	0x544c	; 0x544c <sin>
     dca:	4b 01       	movw	r8, r22
     dcc:	5c 01       	movw	r10, r24
     dce:	00 e0       	ldi	r16, 0x00	; 0
     dd0:	10 e0       	ldi	r17, 0x00	; 0
	if (sekanzeige)
	{
		//Berechnen des Sekundenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(sekunde*6.0)*M_PI/180.0-M_PI/2.0;
			x=(uint8_t) i*cos(winkel)+Px;
     dd2:	b8 01       	movw	r22, r16
     dd4:	88 27       	eor	r24, r24
     dd6:	77 fd       	sbrc	r23, 7
     dd8:	80 95       	com	r24
     dda:	98 2f       	mov	r25, r24
     ddc:	0e 94 65 28 	call	0x50ca	; 0x50ca <__floatsisf>
     de0:	6b 01       	movw	r12, r22
     de2:	7c 01       	movw	r14, r24
			y=(uint8_t) i*sin(winkel)+Py;
     de4:	a5 01       	movw	r20, r10
     de6:	94 01       	movw	r18, r8
     de8:	0e 94 c3 29 	call	0x5386	; 0x5386 <__mulsf3>
     dec:	20 e0       	ldi	r18, 0x00	; 0
     dee:	30 e0       	ldi	r19, 0x00	; 0
     df0:	48 ef       	ldi	r20, 0xF8	; 248
     df2:	51 e4       	ldi	r21, 0x41	; 65
     df4:	0e 94 fd 26 	call	0x4dfa	; 0x4dfa <__addsf3>
     df8:	0e 94 37 28 	call	0x506e	; 0x506e <__fixunssfsi>
     dfc:	26 2e       	mov	r2, r22
	if (sekanzeige)
	{
		//Berechnen des Sekundenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(sekunde*6.0)*M_PI/180.0-M_PI/2.0;
			x=(uint8_t) i*cos(winkel)+Px;
     dfe:	a3 01       	movw	r20, r6
     e00:	92 01       	movw	r18, r4
     e02:	c7 01       	movw	r24, r14
     e04:	b6 01       	movw	r22, r12
     e06:	0e 94 c3 29 	call	0x5386	; 0x5386 <__mulsf3>
     e0a:	20 e0       	ldi	r18, 0x00	; 0
     e0c:	30 e0       	ldi	r19, 0x00	; 0
     e0e:	48 ef       	ldi	r20, 0xF8	; 248
     e10:	51 e4       	ldi	r21, 0x41	; 65
     e12:	0e 94 fd 26 	call	0x4dfa	; 0x4dfa <__addsf3>
     e16:	0e 94 37 28 	call	0x506e	; 0x506e <__fixunssfsi>
			y=(uint8_t) i*sin(winkel)+Py;

			drawPixel(x,y,0);
     e1a:	20 e0       	ldi	r18, 0x00	; 0
     e1c:	42 2d       	mov	r20, r2
     e1e:	8e 81       	ldd	r24, Y+6	; 0x06
     e20:	9f 81       	ldd	r25, Y+7	; 0x07
     e22:	0e 94 d6 03 	call	0x7ac	; 0x7ac <_ZN7Display9drawPixelEhhh>
     e26:	0f 5f       	subi	r16, 0xFF	; 255
     e28:	1f 4f       	sbci	r17, 0xFF	; 255
	float winkel=0;
	
	if (sekanzeige)
	{
		//Berechnen des Sekundenzeigers
		for(uint8_t i=0;i<r;i++){
     e2a:	09 31       	cpi	r16, 0x19	; 25
     e2c:	11 05       	cpc	r17, r1
     e2e:	89 f6       	brne	.-94     	; 0xdd2 <_ZN7Display6analogEhhhh+0x9a>
		}

		r=21;
		//Berechnen des Minutenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(minute*6.0)*M_PI/180.0-M_PI/2.0;
     e30:	63 2d       	mov	r22, r3
     e32:	70 e0       	ldi	r23, 0x00	; 0
     e34:	80 e0       	ldi	r24, 0x00	; 0
     e36:	90 e0       	ldi	r25, 0x00	; 0
     e38:	0e 94 65 28 	call	0x50ca	; 0x50ca <__floatsisf>
     e3c:	69 83       	std	Y+1, r22	; 0x01
     e3e:	7a 83       	std	Y+2, r23	; 0x02
     e40:	8b 83       	std	Y+3, r24	; 0x03
     e42:	9c 83       	std	Y+4, r25	; 0x04
     e44:	20 e0       	ldi	r18, 0x00	; 0
     e46:	30 e0       	ldi	r19, 0x00	; 0
     e48:	40 ec       	ldi	r20, 0xC0	; 192
     e4a:	50 e4       	ldi	r21, 0x40	; 64
     e4c:	0e 94 c3 29 	call	0x5386	; 0x5386 <__mulsf3>
     e50:	2b ed       	ldi	r18, 0xDB	; 219
     e52:	3f e0       	ldi	r19, 0x0F	; 15
     e54:	49 e4       	ldi	r20, 0x49	; 73
     e56:	50 e4       	ldi	r21, 0x40	; 64
     e58:	0e 94 c3 29 	call	0x5386	; 0x5386 <__mulsf3>
     e5c:	20 e0       	ldi	r18, 0x00	; 0
     e5e:	30 e0       	ldi	r19, 0x00	; 0
     e60:	44 e3       	ldi	r20, 0x34	; 52
     e62:	53 e4       	ldi	r21, 0x43	; 67
     e64:	0e 94 ca 27 	call	0x4f94	; 0x4f94 <__divsf3>
     e68:	2b ed       	ldi	r18, 0xDB	; 219
     e6a:	3f e0       	ldi	r19, 0x0F	; 15
     e6c:	49 ec       	ldi	r20, 0xC9	; 201
     e6e:	5f e3       	ldi	r21, 0x3F	; 63
     e70:	0e 94 fc 26 	call	0x4df8	; 0x4df8 <__subsf3>
     e74:	6b 01       	movw	r12, r22
     e76:	7c 01       	movw	r14, r24
			x=(uint8_t) i*cos(winkel)+Px;
     e78:	0e 94 c7 27 	call	0x4f8e	; 0x4f8e <cos>
     e7c:	4b 01       	movw	r8, r22
     e7e:	5c 01       	movw	r10, r24
			y=(uint8_t) i*sin(winkel)+Py;
     e80:	c7 01       	movw	r24, r14
     e82:	b6 01       	movw	r22, r12
     e84:	0e 94 26 2a 	call	0x544c	; 0x544c <sin>
     e88:	2b 01       	movw	r4, r22
     e8a:	3c 01       	movw	r6, r24
     e8c:	00 e0       	ldi	r16, 0x00	; 0
     e8e:	10 e0       	ldi	r17, 0x00	; 0

		r=21;
		//Berechnen des Minutenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(minute*6.0)*M_PI/180.0-M_PI/2.0;
			x=(uint8_t) i*cos(winkel)+Px;
     e90:	b8 01       	movw	r22, r16
     e92:	88 27       	eor	r24, r24
     e94:	77 fd       	sbrc	r23, 7
     e96:	80 95       	com	r24
     e98:	98 2f       	mov	r25, r24
     e9a:	0e 94 65 28 	call	0x50ca	; 0x50ca <__floatsisf>
     e9e:	6b 01       	movw	r12, r22
     ea0:	7c 01       	movw	r14, r24
			y=(uint8_t) i*sin(winkel)+Py;
     ea2:	a3 01       	movw	r20, r6
     ea4:	92 01       	movw	r18, r4
     ea6:	0e 94 c3 29 	call	0x5386	; 0x5386 <__mulsf3>
     eaa:	20 e0       	ldi	r18, 0x00	; 0
     eac:	30 e0       	ldi	r19, 0x00	; 0
     eae:	48 ef       	ldi	r20, 0xF8	; 248
     eb0:	51 e4       	ldi	r21, 0x41	; 65
     eb2:	0e 94 fd 26 	call	0x4dfa	; 0x4dfa <__addsf3>
     eb6:	0e 94 37 28 	call	0x506e	; 0x506e <__fixunssfsi>
     eba:	36 2e       	mov	r3, r22

		r=21;
		//Berechnen des Minutenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(minute*6.0)*M_PI/180.0-M_PI/2.0;
			x=(uint8_t) i*cos(winkel)+Px;
     ebc:	a5 01       	movw	r20, r10
     ebe:	94 01       	movw	r18, r8
     ec0:	c7 01       	movw	r24, r14
     ec2:	b6 01       	movw	r22, r12
     ec4:	0e 94 c3 29 	call	0x5386	; 0x5386 <__mulsf3>
     ec8:	20 e0       	ldi	r18, 0x00	; 0
     eca:	30 e0       	ldi	r19, 0x00	; 0
     ecc:	48 ef       	ldi	r20, 0xF8	; 248
     ece:	51 e4       	ldi	r21, 0x41	; 65
     ed0:	0e 94 fd 26 	call	0x4dfa	; 0x4dfa <__addsf3>
     ed4:	0e 94 37 28 	call	0x506e	; 0x506e <__fixunssfsi>
			y=(uint8_t) i*sin(winkel)+Py;

			drawPixel(x,y,0);
     ed8:	20 e0       	ldi	r18, 0x00	; 0
     eda:	43 2d       	mov	r20, r3
     edc:	8e 81       	ldd	r24, Y+6	; 0x06
     ede:	9f 81       	ldd	r25, Y+7	; 0x07
     ee0:	0e 94 d6 03 	call	0x7ac	; 0x7ac <_ZN7Display9drawPixelEhhh>
     ee4:	0f 5f       	subi	r16, 0xFF	; 255
     ee6:	1f 4f       	sbci	r17, 0xFF	; 255
			drawPixel(x,y,0);
		}

		r=21;
		//Berechnen des Minutenzeigers
		for(uint8_t i=0;i<r;i++){
     ee8:	05 31       	cpi	r16, 0x15	; 21
     eea:	11 05       	cpc	r17, r1
     eec:	89 f6       	brne	.-94     	; 0xe90 <_ZN7Display6analogEhhhh+0x158>
		}

		r=13;
		//Berechnen des Stundenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(stunde*30.0+minute/2.0)*M_PI/180.0-M_PI/2.0;
     eee:	2d 81       	ldd	r18, Y+5	; 0x05
     ef0:	62 2f       	mov	r22, r18
     ef2:	70 e0       	ldi	r23, 0x00	; 0
     ef4:	80 e0       	ldi	r24, 0x00	; 0
     ef6:	90 e0       	ldi	r25, 0x00	; 0
     ef8:	0e 94 65 28 	call	0x50ca	; 0x50ca <__floatsisf>
     efc:	20 e0       	ldi	r18, 0x00	; 0
     efe:	30 e0       	ldi	r19, 0x00	; 0
     f00:	40 ef       	ldi	r20, 0xF0	; 240
     f02:	51 e4       	ldi	r21, 0x41	; 65
     f04:	0e 94 c3 29 	call	0x5386	; 0x5386 <__mulsf3>
     f08:	6b 01       	movw	r12, r22
     f0a:	7c 01       	movw	r14, r24
     f0c:	20 e0       	ldi	r18, 0x00	; 0
     f0e:	30 e0       	ldi	r19, 0x00	; 0
     f10:	40 e0       	ldi	r20, 0x00	; 0
     f12:	5f e3       	ldi	r21, 0x3F	; 63
     f14:	69 81       	ldd	r22, Y+1	; 0x01
     f16:	7a 81       	ldd	r23, Y+2	; 0x02
     f18:	8b 81       	ldd	r24, Y+3	; 0x03
     f1a:	9c 81       	ldd	r25, Y+4	; 0x04
     f1c:	0e 94 c3 29 	call	0x5386	; 0x5386 <__mulsf3>
     f20:	9b 01       	movw	r18, r22
     f22:	ac 01       	movw	r20, r24
     f24:	c7 01       	movw	r24, r14
     f26:	b6 01       	movw	r22, r12
     f28:	0e 94 fd 26 	call	0x4dfa	; 0x4dfa <__addsf3>
     f2c:	2b ed       	ldi	r18, 0xDB	; 219
     f2e:	3f e0       	ldi	r19, 0x0F	; 15
     f30:	49 e4       	ldi	r20, 0x49	; 73
     f32:	50 e4       	ldi	r21, 0x40	; 64
     f34:	0e 94 c3 29 	call	0x5386	; 0x5386 <__mulsf3>
     f38:	20 e0       	ldi	r18, 0x00	; 0
     f3a:	30 e0       	ldi	r19, 0x00	; 0
     f3c:	44 e3       	ldi	r20, 0x34	; 52
     f3e:	53 e4       	ldi	r21, 0x43	; 67
     f40:	0e 94 ca 27 	call	0x4f94	; 0x4f94 <__divsf3>
     f44:	2b ed       	ldi	r18, 0xDB	; 219
     f46:	3f e0       	ldi	r19, 0x0F	; 15
     f48:	49 ec       	ldi	r20, 0xC9	; 201
     f4a:	5f e3       	ldi	r21, 0x3F	; 63
     f4c:	0e 94 fc 26 	call	0x4df8	; 0x4df8 <__subsf3>
     f50:	6b 01       	movw	r12, r22
     f52:	7c 01       	movw	r14, r24
			x= (uint8_t) i*cos(winkel) +Px;
     f54:	0e 94 c7 27 	call	0x4f8e	; 0x4f8e <cos>
     f58:	2b 01       	movw	r4, r22
     f5a:	3c 01       	movw	r6, r24
			y= (uint8_t) i*sin(winkel) +Py;
     f5c:	c7 01       	movw	r24, r14
     f5e:	b6 01       	movw	r22, r12
     f60:	0e 94 26 2a 	call	0x544c	; 0x544c <sin>
     f64:	4b 01       	movw	r8, r22
     f66:	5c 01       	movw	r10, r24
     f68:	00 e0       	ldi	r16, 0x00	; 0
     f6a:	10 e0       	ldi	r17, 0x00	; 0

		r=13;
		//Berechnen des Stundenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(stunde*30.0+minute/2.0)*M_PI/180.0-M_PI/2.0;
			x= (uint8_t) i*cos(winkel) +Px;
     f6c:	b8 01       	movw	r22, r16
     f6e:	88 27       	eor	r24, r24
     f70:	77 fd       	sbrc	r23, 7
     f72:	80 95       	com	r24
     f74:	98 2f       	mov	r25, r24
     f76:	0e 94 65 28 	call	0x50ca	; 0x50ca <__floatsisf>
     f7a:	6b 01       	movw	r12, r22
     f7c:	7c 01       	movw	r14, r24
			y= (uint8_t) i*sin(winkel) +Py;
     f7e:	a5 01       	movw	r20, r10
     f80:	94 01       	movw	r18, r8
     f82:	0e 94 c3 29 	call	0x5386	; 0x5386 <__mulsf3>
     f86:	20 e0       	ldi	r18, 0x00	; 0
     f88:	30 e0       	ldi	r19, 0x00	; 0
     f8a:	48 ef       	ldi	r20, 0xF8	; 248
     f8c:	51 e4       	ldi	r21, 0x41	; 65
     f8e:	0e 94 fd 26 	call	0x4dfa	; 0x4dfa <__addsf3>
     f92:	0e 94 37 28 	call	0x506e	; 0x506e <__fixunssfsi>
     f96:	36 2e       	mov	r3, r22

		r=13;
		//Berechnen des Stundenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(stunde*30.0+minute/2.0)*M_PI/180.0-M_PI/2.0;
			x= (uint8_t) i*cos(winkel) +Px;
     f98:	a3 01       	movw	r20, r6
     f9a:	92 01       	movw	r18, r4
     f9c:	c7 01       	movw	r24, r14
     f9e:	b6 01       	movw	r22, r12
     fa0:	0e 94 c3 29 	call	0x5386	; 0x5386 <__mulsf3>
     fa4:	20 e0       	ldi	r18, 0x00	; 0
     fa6:	30 e0       	ldi	r19, 0x00	; 0
     fa8:	48 ef       	ldi	r20, 0xF8	; 248
     faa:	51 e4       	ldi	r21, 0x41	; 65
     fac:	0e 94 fd 26 	call	0x4dfa	; 0x4dfa <__addsf3>
     fb0:	0e 94 37 28 	call	0x506e	; 0x506e <__fixunssfsi>
			y= (uint8_t) i*sin(winkel) +Py;

			drawPixel(x,y,0);
     fb4:	20 e0       	ldi	r18, 0x00	; 0
     fb6:	43 2d       	mov	r20, r3
     fb8:	8e 81       	ldd	r24, Y+6	; 0x06
     fba:	9f 81       	ldd	r25, Y+7	; 0x07
     fbc:	0e 94 d6 03 	call	0x7ac	; 0x7ac <_ZN7Display9drawPixelEhhh>
     fc0:	0f 5f       	subi	r16, 0xFF	; 255
     fc2:	1f 4f       	sbci	r17, 0xFF	; 255
			drawPixel(x,y,0);
		}

		r=13;
		//Berechnen des Stundenzeigers
		for(uint8_t i=0;i<r;i++){
     fc4:	0d 30       	cpi	r16, 0x0D	; 13
     fc6:	11 05       	cpc	r17, r1
     fc8:	89 f6       	brne	.-94     	; 0xf6c <_ZN7Display6analogEhhhh+0x234>
     fca:	cd c0       	rjmp	.+410    	; 0x1166 <_ZN7Display6analogEhhhh+0x42e>
	}
	else{
		r=25;
		//Berechnen des Minutenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(minute*6.0)*M_PI/180.0-M_PI/2.0;
     fcc:	64 2f       	mov	r22, r20
     fce:	70 e0       	ldi	r23, 0x00	; 0
     fd0:	80 e0       	ldi	r24, 0x00	; 0
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	0e 94 65 28 	call	0x50ca	; 0x50ca <__floatsisf>
     fd8:	69 83       	std	Y+1, r22	; 0x01
     fda:	7a 83       	std	Y+2, r23	; 0x02
     fdc:	8b 83       	std	Y+3, r24	; 0x03
     fde:	9c 83       	std	Y+4, r25	; 0x04
     fe0:	20 e0       	ldi	r18, 0x00	; 0
     fe2:	30 e0       	ldi	r19, 0x00	; 0
     fe4:	40 ec       	ldi	r20, 0xC0	; 192
     fe6:	50 e4       	ldi	r21, 0x40	; 64
     fe8:	0e 94 c3 29 	call	0x5386	; 0x5386 <__mulsf3>
     fec:	2b ed       	ldi	r18, 0xDB	; 219
     fee:	3f e0       	ldi	r19, 0x0F	; 15
     ff0:	49 e4       	ldi	r20, 0x49	; 73
     ff2:	50 e4       	ldi	r21, 0x40	; 64
     ff4:	0e 94 c3 29 	call	0x5386	; 0x5386 <__mulsf3>
     ff8:	20 e0       	ldi	r18, 0x00	; 0
     ffa:	30 e0       	ldi	r19, 0x00	; 0
     ffc:	44 e3       	ldi	r20, 0x34	; 52
     ffe:	53 e4       	ldi	r21, 0x43	; 67
    1000:	0e 94 ca 27 	call	0x4f94	; 0x4f94 <__divsf3>
    1004:	2b ed       	ldi	r18, 0xDB	; 219
    1006:	3f e0       	ldi	r19, 0x0F	; 15
    1008:	49 ec       	ldi	r20, 0xC9	; 201
    100a:	5f e3       	ldi	r21, 0x3F	; 63
    100c:	0e 94 fc 26 	call	0x4df8	; 0x4df8 <__subsf3>
    1010:	6b 01       	movw	r12, r22
    1012:	7c 01       	movw	r14, r24
			x=(uint8_t) i*cos(winkel)+Px;
    1014:	0e 94 c7 27 	call	0x4f8e	; 0x4f8e <cos>
    1018:	4b 01       	movw	r8, r22
    101a:	5c 01       	movw	r10, r24
			y=(uint8_t) i*sin(winkel)+Py;
    101c:	c7 01       	movw	r24, r14
    101e:	b6 01       	movw	r22, r12
    1020:	0e 94 26 2a 	call	0x544c	; 0x544c <sin>
    1024:	2b 01       	movw	r4, r22
    1026:	3c 01       	movw	r6, r24
    1028:	00 e0       	ldi	r16, 0x00	; 0
    102a:	10 e0       	ldi	r17, 0x00	; 0
	else{
		r=25;
		//Berechnen des Minutenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(minute*6.0)*M_PI/180.0-M_PI/2.0;
			x=(uint8_t) i*cos(winkel)+Px;
    102c:	b8 01       	movw	r22, r16
    102e:	88 27       	eor	r24, r24
    1030:	77 fd       	sbrc	r23, 7
    1032:	80 95       	com	r24
    1034:	98 2f       	mov	r25, r24
    1036:	0e 94 65 28 	call	0x50ca	; 0x50ca <__floatsisf>
    103a:	6b 01       	movw	r12, r22
    103c:	7c 01       	movw	r14, r24
			y=(uint8_t) i*sin(winkel)+Py;
    103e:	a3 01       	movw	r20, r6
    1040:	92 01       	movw	r18, r4
    1042:	0e 94 c3 29 	call	0x5386	; 0x5386 <__mulsf3>
    1046:	20 e0       	ldi	r18, 0x00	; 0
    1048:	30 e0       	ldi	r19, 0x00	; 0
    104a:	48 ef       	ldi	r20, 0xF8	; 248
    104c:	51 e4       	ldi	r21, 0x41	; 65
    104e:	0e 94 fd 26 	call	0x4dfa	; 0x4dfa <__addsf3>
    1052:	0e 94 37 28 	call	0x506e	; 0x506e <__fixunssfsi>
    1056:	36 2e       	mov	r3, r22
	else{
		r=25;
		//Berechnen des Minutenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(minute*6.0)*M_PI/180.0-M_PI/2.0;
			x=(uint8_t) i*cos(winkel)+Px;
    1058:	a5 01       	movw	r20, r10
    105a:	94 01       	movw	r18, r8
    105c:	c7 01       	movw	r24, r14
    105e:	b6 01       	movw	r22, r12
    1060:	0e 94 c3 29 	call	0x5386	; 0x5386 <__mulsf3>
    1064:	20 e0       	ldi	r18, 0x00	; 0
    1066:	30 e0       	ldi	r19, 0x00	; 0
    1068:	48 ef       	ldi	r20, 0xF8	; 248
    106a:	51 e4       	ldi	r21, 0x41	; 65
    106c:	0e 94 fd 26 	call	0x4dfa	; 0x4dfa <__addsf3>
    1070:	0e 94 37 28 	call	0x506e	; 0x506e <__fixunssfsi>
			y=(uint8_t) i*sin(winkel)+Py;

			drawPixel(x,y,0);
    1074:	20 e0       	ldi	r18, 0x00	; 0
    1076:	43 2d       	mov	r20, r3
    1078:	8e 81       	ldd	r24, Y+6	; 0x06
    107a:	9f 81       	ldd	r25, Y+7	; 0x07
    107c:	0e 94 d6 03 	call	0x7ac	; 0x7ac <_ZN7Display9drawPixelEhhh>
    1080:	0f 5f       	subi	r16, 0xFF	; 255
    1082:	1f 4f       	sbci	r17, 0xFF	; 255
		}
	}
	else{
		r=25;
		//Berechnen des Minutenzeigers
		for(uint8_t i=0;i<r;i++){
    1084:	09 31       	cpi	r16, 0x19	; 25
    1086:	11 05       	cpc	r17, r1
    1088:	89 f6       	brne	.-94     	; 0x102c <_ZN7Display6analogEhhhh+0x2f4>
		}

		r=17;
		//Berechnen des Stundenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(stunde*30.0+minute/2.0)*M_PI/180.0-M_PI/2.0;
    108a:	ed 81       	ldd	r30, Y+5	; 0x05
    108c:	6e 2f       	mov	r22, r30
    108e:	70 e0       	ldi	r23, 0x00	; 0
    1090:	80 e0       	ldi	r24, 0x00	; 0
    1092:	90 e0       	ldi	r25, 0x00	; 0
    1094:	0e 94 65 28 	call	0x50ca	; 0x50ca <__floatsisf>
    1098:	20 e0       	ldi	r18, 0x00	; 0
    109a:	30 e0       	ldi	r19, 0x00	; 0
    109c:	40 ef       	ldi	r20, 0xF0	; 240
    109e:	51 e4       	ldi	r21, 0x41	; 65
    10a0:	0e 94 c3 29 	call	0x5386	; 0x5386 <__mulsf3>
    10a4:	6b 01       	movw	r12, r22
    10a6:	7c 01       	movw	r14, r24
    10a8:	20 e0       	ldi	r18, 0x00	; 0
    10aa:	30 e0       	ldi	r19, 0x00	; 0
    10ac:	40 e0       	ldi	r20, 0x00	; 0
    10ae:	5f e3       	ldi	r21, 0x3F	; 63
    10b0:	69 81       	ldd	r22, Y+1	; 0x01
    10b2:	7a 81       	ldd	r23, Y+2	; 0x02
    10b4:	8b 81       	ldd	r24, Y+3	; 0x03
    10b6:	9c 81       	ldd	r25, Y+4	; 0x04
    10b8:	0e 94 c3 29 	call	0x5386	; 0x5386 <__mulsf3>
    10bc:	9b 01       	movw	r18, r22
    10be:	ac 01       	movw	r20, r24
    10c0:	c7 01       	movw	r24, r14
    10c2:	b6 01       	movw	r22, r12
    10c4:	0e 94 fd 26 	call	0x4dfa	; 0x4dfa <__addsf3>
    10c8:	2b ed       	ldi	r18, 0xDB	; 219
    10ca:	3f e0       	ldi	r19, 0x0F	; 15
    10cc:	49 e4       	ldi	r20, 0x49	; 73
    10ce:	50 e4       	ldi	r21, 0x40	; 64
    10d0:	0e 94 c3 29 	call	0x5386	; 0x5386 <__mulsf3>
    10d4:	20 e0       	ldi	r18, 0x00	; 0
    10d6:	30 e0       	ldi	r19, 0x00	; 0
    10d8:	44 e3       	ldi	r20, 0x34	; 52
    10da:	53 e4       	ldi	r21, 0x43	; 67
    10dc:	0e 94 ca 27 	call	0x4f94	; 0x4f94 <__divsf3>
    10e0:	2b ed       	ldi	r18, 0xDB	; 219
    10e2:	3f e0       	ldi	r19, 0x0F	; 15
    10e4:	49 ec       	ldi	r20, 0xC9	; 201
    10e6:	5f e3       	ldi	r21, 0x3F	; 63
    10e8:	0e 94 fc 26 	call	0x4df8	; 0x4df8 <__subsf3>
    10ec:	6b 01       	movw	r12, r22
    10ee:	7c 01       	movw	r14, r24
			x= (uint8_t) i*cos(winkel) +Px;
    10f0:	0e 94 c7 27 	call	0x4f8e	; 0x4f8e <cos>
    10f4:	2b 01       	movw	r4, r22
    10f6:	3c 01       	movw	r6, r24
			y= (uint8_t) i*sin(winkel) +Py;
    10f8:	c7 01       	movw	r24, r14
    10fa:	b6 01       	movw	r22, r12
    10fc:	0e 94 26 2a 	call	0x544c	; 0x544c <sin>
    1100:	4b 01       	movw	r8, r22
    1102:	5c 01       	movw	r10, r24
    1104:	00 e0       	ldi	r16, 0x00	; 0
    1106:	10 e0       	ldi	r17, 0x00	; 0

		r=17;
		//Berechnen des Stundenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(stunde*30.0+minute/2.0)*M_PI/180.0-M_PI/2.0;
			x= (uint8_t) i*cos(winkel) +Px;
    1108:	b8 01       	movw	r22, r16
    110a:	88 27       	eor	r24, r24
    110c:	77 fd       	sbrc	r23, 7
    110e:	80 95       	com	r24
    1110:	98 2f       	mov	r25, r24
    1112:	0e 94 65 28 	call	0x50ca	; 0x50ca <__floatsisf>
    1116:	6b 01       	movw	r12, r22
    1118:	7c 01       	movw	r14, r24
			y= (uint8_t) i*sin(winkel) +Py;
    111a:	a5 01       	movw	r20, r10
    111c:	94 01       	movw	r18, r8
    111e:	0e 94 c3 29 	call	0x5386	; 0x5386 <__mulsf3>
    1122:	20 e0       	ldi	r18, 0x00	; 0
    1124:	30 e0       	ldi	r19, 0x00	; 0
    1126:	48 ef       	ldi	r20, 0xF8	; 248
    1128:	51 e4       	ldi	r21, 0x41	; 65
    112a:	0e 94 fd 26 	call	0x4dfa	; 0x4dfa <__addsf3>
    112e:	0e 94 37 28 	call	0x506e	; 0x506e <__fixunssfsi>
    1132:	36 2e       	mov	r3, r22

		r=17;
		//Berechnen des Stundenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(stunde*30.0+minute/2.0)*M_PI/180.0-M_PI/2.0;
			x= (uint8_t) i*cos(winkel) +Px;
    1134:	a3 01       	movw	r20, r6
    1136:	92 01       	movw	r18, r4
    1138:	c7 01       	movw	r24, r14
    113a:	b6 01       	movw	r22, r12
    113c:	0e 94 c3 29 	call	0x5386	; 0x5386 <__mulsf3>
    1140:	20 e0       	ldi	r18, 0x00	; 0
    1142:	30 e0       	ldi	r19, 0x00	; 0
    1144:	48 ef       	ldi	r20, 0xF8	; 248
    1146:	51 e4       	ldi	r21, 0x41	; 65
    1148:	0e 94 fd 26 	call	0x4dfa	; 0x4dfa <__addsf3>
    114c:	0e 94 37 28 	call	0x506e	; 0x506e <__fixunssfsi>
			y= (uint8_t) i*sin(winkel) +Py;

			drawPixel(x,y,0);
    1150:	20 e0       	ldi	r18, 0x00	; 0
    1152:	43 2d       	mov	r20, r3
    1154:	8e 81       	ldd	r24, Y+6	; 0x06
    1156:	9f 81       	ldd	r25, Y+7	; 0x07
    1158:	0e 94 d6 03 	call	0x7ac	; 0x7ac <_ZN7Display9drawPixelEhhh>
    115c:	0f 5f       	subi	r16, 0xFF	; 255
    115e:	1f 4f       	sbci	r17, 0xFF	; 255
			drawPixel(x,y,0);
		}

		r=17;
		//Berechnen des Stundenzeigers
		for(uint8_t i=0;i<r;i++){
    1160:	01 31       	cpi	r16, 0x11	; 17
    1162:	11 05       	cpc	r17, r1
    1164:	89 f6       	brne	.-94     	; 0x1108 <_ZN7Display6analogEhhhh+0x3d0>
		}
	}
	

	//Anzeige der Zahlen
	draw_ASCI('1',32-charsize,0);
    1166:	20 e0       	ldi	r18, 0x00	; 0
    1168:	4a e1       	ldi	r20, 0x1A	; 26
    116a:	61 e3       	ldi	r22, 0x31	; 49
    116c:	8e 81       	ldd	r24, Y+6	; 0x06
    116e:	9f 81       	ldd	r25, Y+7	; 0x07
    1170:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
	draw_ASCI('2',32,0);
    1174:	20 e0       	ldi	r18, 0x00	; 0
    1176:	40 e2       	ldi	r20, 0x20	; 32
    1178:	62 e3       	ldi	r22, 0x32	; 50
    117a:	8e 81       	ldd	r24, Y+6	; 0x06
    117c:	9f 81       	ldd	r25, Y+7	; 0x07
    117e:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
	draw_ASCI('3',64-charsize,4*charhighte-charhighte/2);
    1182:	2c e1       	ldi	r18, 0x1C	; 28
    1184:	4a e3       	ldi	r20, 0x3A	; 58
    1186:	63 e3       	ldi	r22, 0x33	; 51
    1188:	8e 81       	ldd	r24, Y+6	; 0x06
    118a:	9f 81       	ldd	r25, Y+7	; 0x07
    118c:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
	draw_ASCI('6',32-charsize/2,7*charhighte);
    1190:	28 e3       	ldi	r18, 0x38	; 56
    1192:	4d e1       	ldi	r20, 0x1D	; 29
    1194:	66 e3       	ldi	r22, 0x36	; 54
    1196:	8e 81       	ldd	r24, Y+6	; 0x06
    1198:	9f 81       	ldd	r25, Y+7	; 0x07
    119a:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
	draw_ASCI('9',0,4*charhighte-charhighte/2);
    119e:	2c e1       	ldi	r18, 0x1C	; 28
    11a0:	40 e0       	ldi	r20, 0x00	; 0
    11a2:	69 e3       	ldi	r22, 0x39	; 57
    11a4:	8e 81       	ldd	r24, Y+6	; 0x06
    11a6:	9f 81       	ldd	r25, Y+7	; 0x07
    11a8:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>

	//anzeige des Rings fuer die Restlichen Stunden Zahlen
	//1
	drawPixel(26*cos((30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
    11ac:	20 e0       	ldi	r18, 0x00	; 0
    11ae:	48 e0       	ldi	r20, 0x08	; 8
    11b0:	6c e2       	ldi	r22, 0x2C	; 44
    11b2:	8e 81       	ldd	r24, Y+6	; 0x06
    11b4:	9f 81       	ldd	r25, Y+7	; 0x07
    11b6:	0e 94 d6 03 	call	0x7ac	; 0x7ac <_ZN7Display9drawPixelEhhh>
	//2
	drawPixel(26*cos((2*30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((2*30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
    11ba:	20 e0       	ldi	r18, 0x00	; 0
    11bc:	42 e1       	ldi	r20, 0x12	; 18
    11be:	65 e3       	ldi	r22, 0x35	; 53
    11c0:	8e 81       	ldd	r24, Y+6	; 0x06
    11c2:	9f 81       	ldd	r25, Y+7	; 0x07
    11c4:	0e 94 d6 03 	call	0x7ac	; 0x7ac <_ZN7Display9drawPixelEhhh>
	//4
	drawPixel(26*cos((4*30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((4*30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
    11c8:	20 e0       	ldi	r18, 0x00	; 0
    11ca:	4c e2       	ldi	r20, 0x2C	; 44
    11cc:	65 e3       	ldi	r22, 0x35	; 53
    11ce:	8e 81       	ldd	r24, Y+6	; 0x06
    11d0:	9f 81       	ldd	r25, Y+7	; 0x07
    11d2:	0e 94 d6 03 	call	0x7ac	; 0x7ac <_ZN7Display9drawPixelEhhh>
	//5
	drawPixel(26*cos((5*30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((5*30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
    11d6:	20 e0       	ldi	r18, 0x00	; 0
    11d8:	45 e3       	ldi	r20, 0x35	; 53
    11da:	6b e2       	ldi	r22, 0x2B	; 43
    11dc:	8e 81       	ldd	r24, Y+6	; 0x06
    11de:	9f 81       	ldd	r25, Y+7	; 0x07
    11e0:	0e 94 d6 03 	call	0x7ac	; 0x7ac <_ZN7Display9drawPixelEhhh>
	//7
	drawPixel(26*cos((7*30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((7*30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
    11e4:	20 e0       	ldi	r18, 0x00	; 0
    11e6:	45 e3       	ldi	r20, 0x35	; 53
    11e8:	61 e1       	ldi	r22, 0x11	; 17
    11ea:	8e 81       	ldd	r24, Y+6	; 0x06
    11ec:	9f 81       	ldd	r25, Y+7	; 0x07
    11ee:	0e 94 d6 03 	call	0x7ac	; 0x7ac <_ZN7Display9drawPixelEhhh>
	//8
	drawPixel(26*cos((8*30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((8*30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
    11f2:	20 e0       	ldi	r18, 0x00	; 0
    11f4:	4c e2       	ldi	r20, 0x2C	; 44
    11f6:	68 e0       	ldi	r22, 0x08	; 8
    11f8:	8e 81       	ldd	r24, Y+6	; 0x06
    11fa:	9f 81       	ldd	r25, Y+7	; 0x07
    11fc:	0e 94 d6 03 	call	0x7ac	; 0x7ac <_ZN7Display9drawPixelEhhh>
	//10
	drawPixel(26*cos((10*30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((10*30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
    1200:	20 e0       	ldi	r18, 0x00	; 0
    1202:	41 e1       	ldi	r20, 0x11	; 17
    1204:	68 e0       	ldi	r22, 0x08	; 8
    1206:	8e 81       	ldd	r24, Y+6	; 0x06
    1208:	9f 81       	ldd	r25, Y+7	; 0x07
    120a:	0e 94 d6 03 	call	0x7ac	; 0x7ac <_ZN7Display9drawPixelEhhh>
	//11
	drawPixel(26*cos((11*30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((11*30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
    120e:	20 e0       	ldi	r18, 0x00	; 0
    1210:	48 e0       	ldi	r20, 0x08	; 8
    1212:	62 e1       	ldi	r22, 0x12	; 18
    1214:	8e 81       	ldd	r24, Y+6	; 0x06
    1216:	9f 81       	ldd	r25, Y+7	; 0x07
    1218:	0e 94 d6 03 	call	0x7ac	; 0x7ac <_ZN7Display9drawPixelEhhh>
}
    121c:	27 96       	adiw	r28, 0x07	; 7
    121e:	0f b6       	in	r0, 0x3f	; 63
    1220:	f8 94       	cli
    1222:	de bf       	out	0x3e, r29	; 62
    1224:	0f be       	out	0x3f, r0	; 63
    1226:	cd bf       	out	0x3d, r28	; 61
    1228:	df 91       	pop	r29
    122a:	cf 91       	pop	r28
    122c:	1f 91       	pop	r17
    122e:	0f 91       	pop	r16
    1230:	ff 90       	pop	r15
    1232:	ef 90       	pop	r14
    1234:	df 90       	pop	r13
    1236:	cf 90       	pop	r12
    1238:	bf 90       	pop	r11
    123a:	af 90       	pop	r10
    123c:	9f 90       	pop	r9
    123e:	8f 90       	pop	r8
    1240:	7f 90       	pop	r7
    1242:	6f 90       	pop	r6
    1244:	5f 90       	pop	r5
    1246:	4f 90       	pop	r4
    1248:	3f 90       	pop	r3
    124a:	2f 90       	pop	r2
    124c:	08 95       	ret

0000124e <_Z8ADC_Readh>:
#ifndef ADC_H_
#define ADC_H_

uint16_t ADC_Read( uint8_t channel )
{
	ADMUX = (ADMUX & ~(0x1F)) | (channel & 0x1F);
    124e:	ec e7       	ldi	r30, 0x7C	; 124
    1250:	f0 e0       	ldi	r31, 0x00	; 0
    1252:	90 81       	ld	r25, Z
    1254:	8f 71       	andi	r24, 0x1F	; 31
    1256:	90 7e       	andi	r25, 0xE0	; 224
    1258:	98 2b       	or	r25, r24
    125a:	90 83       	st	Z, r25
	ADCSRA |= (1<<ADSC);
    125c:	ea e7       	ldi	r30, 0x7A	; 122
    125e:	f0 e0       	ldi	r31, 0x00	; 0
    1260:	80 81       	ld	r24, Z
    1262:	80 64       	ori	r24, 0x40	; 64
    1264:	80 83       	st	Z, r24
	while (ADCSRA & (1<<ADSC) ) {
    1266:	80 81       	ld	r24, Z
    1268:	86 fd       	sbrc	r24, 6
    126a:	fd cf       	rjmp	.-6      	; 0x1266 <_Z8ADC_Readh+0x18>
	}
	return ADCW;
    126c:	80 91 78 00 	lds	r24, 0x0078
    1270:	90 91 79 00 	lds	r25, 0x0079
}
    1274:	08 95       	ret

00001276 <_Z14Batteriestatusv>:
	return (uint16_t)( sum / nsamples );
}

double batterie;
int8_t Batteriestatus(){
	uint16_t ADCwert=ADC_Read(0);
    1276:	80 e0       	ldi	r24, 0x00	; 0
    1278:	0e 94 27 09 	call	0x124e	; 0x124e <_Z8ADC_Readh>
	batterie = (ADCwert/1023.0)*3.2*SPANNUNGSTEILER;
    127c:	bc 01       	movw	r22, r24
    127e:	80 e0       	ldi	r24, 0x00	; 0
    1280:	90 e0       	ldi	r25, 0x00	; 0
    1282:	0e 94 63 28 	call	0x50c6	; 0x50c6 <__floatunsisf>
    1286:	20 e0       	ldi	r18, 0x00	; 0
    1288:	30 ec       	ldi	r19, 0xC0	; 192
    128a:	4f e7       	ldi	r20, 0x7F	; 127
    128c:	54 e4       	ldi	r21, 0x44	; 68
    128e:	0e 94 ca 27 	call	0x4f94	; 0x4f94 <__divsf3>
    1292:	2d ec       	ldi	r18, 0xCD	; 205
    1294:	3c ec       	ldi	r19, 0xCC	; 204
    1296:	4c e4       	ldi	r20, 0x4C	; 76
    1298:	50 e4       	ldi	r21, 0x40	; 64
    129a:	0e 94 c3 29 	call	0x5386	; 0x5386 <__mulsf3>
    129e:	2b e7       	ldi	r18, 0x7B	; 123
    12a0:	34 e1       	ldi	r19, 0x14	; 20
    12a2:	4e ef       	ldi	r20, 0xFE	; 254
    12a4:	5f e3       	ldi	r21, 0x3F	; 63
    12a6:	0e 94 c3 29 	call	0x5386	; 0x5386 <__mulsf3>
    12aa:	60 93 2b 03 	sts	0x032B, r22
    12ae:	70 93 2c 03 	sts	0x032C, r23
    12b2:	80 93 2d 03 	sts	0x032D, r24
    12b6:	90 93 2e 03 	sts	0x032E, r25
	return ((batterie-3.0)/(4.2-3.0)*100);
    12ba:	20 e0       	ldi	r18, 0x00	; 0
    12bc:	30 e0       	ldi	r19, 0x00	; 0
    12be:	40 e4       	ldi	r20, 0x40	; 64
    12c0:	50 e4       	ldi	r21, 0x40	; 64
    12c2:	0e 94 fc 26 	call	0x4df8	; 0x4df8 <__subsf3>
    12c6:	28 e9       	ldi	r18, 0x98	; 152
    12c8:	39 e9       	ldi	r19, 0x99	; 153
    12ca:	49 e9       	ldi	r20, 0x99	; 153
    12cc:	5f e3       	ldi	r21, 0x3F	; 63
    12ce:	0e 94 ca 27 	call	0x4f94	; 0x4f94 <__divsf3>
    12d2:	20 e0       	ldi	r18, 0x00	; 0
    12d4:	30 e0       	ldi	r19, 0x00	; 0
    12d6:	48 ec       	ldi	r20, 0xC8	; 200
    12d8:	52 e4       	ldi	r21, 0x42	; 66
    12da:	0e 94 c3 29 	call	0x5386	; 0x5386 <__mulsf3>
    12de:	0e 94 32 28 	call	0x5064	; 0x5064 <__fixsfsi>
    12e2:	86 2f       	mov	r24, r22
}
    12e4:	08 95       	ret

000012e6 <_Z14willkommenpagev>:
#ifndef SEITEN_H_
#define SEITEN_H_

//Diese Funktionen schreiben nur in den Framebuffer und das Schreiben passiert in der Main ueber einen Interupt

void willkommenpage(){
    12e6:	cf 92       	push	r12
    12e8:	df 92       	push	r13
    12ea:	ef 92       	push	r14
    12ec:	ff 92       	push	r15
    12ee:	0f 93       	push	r16
    12f0:	1f 93       	push	r17
    12f2:	cf 93       	push	r28
    12f4:	df 93       	push	r29
    12f6:	cd b7       	in	r28, 0x3d	; 61
    12f8:	de b7       	in	r29, 0x3e	; 62
    12fa:	64 97       	sbiw	r28, 0x14	; 20
    12fc:	0f b6       	in	r0, 0x3f	; 63
    12fe:	f8 94       	cli
    1300:	de bf       	out	0x3e, r29	; 62
    1302:	0f be       	out	0x3f, r0	; 63
    1304:	cd bf       	out	0x3d, r28	; 61
	char buffer[20];
	uint8_t buffersize;
	oled.clearFrame();
    1306:	82 e4       	ldi	r24, 0x42	; 66
    1308:	93 e0       	ldi	r25, 0x03	; 3
    130a:	0e 94 ed 02 	call	0x5da	; 0x5da <_ZN7Display10clearFrameEv>
	buffersize=sprintf(buffer,"Fahradcomputer");
    130e:	8f e0       	ldi	r24, 0x0F	; 15
    1310:	e0 e0       	ldi	r30, 0x00	; 0
    1312:	f1 e0       	ldi	r31, 0x01	; 1
    1314:	8e 01       	movw	r16, r28
    1316:	0f 5f       	subi	r16, 0xFF	; 255
    1318:	1f 4f       	sbci	r17, 0xFF	; 255
    131a:	d8 01       	movw	r26, r16
    131c:	01 90       	ld	r0, Z+
    131e:	0d 92       	st	X+, r0
    1320:	8a 95       	dec	r24
    1322:	e1 f7       	brne	.-8      	; 0x131c <_Z14willkommenpagev+0x36>
    1324:	c0 2e       	mov	r12, r16
    1326:	d1 2e       	mov	r13, r17
    1328:	78 01       	movw	r14, r16
    132a:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0; i < buffersize;i++){
		oled.draw_ASCI(buffer[i],i*charsize,0);
    132c:	f7 01       	movw	r30, r14
    132e:	61 91       	ld	r22, Z+
    1330:	7f 01       	movw	r14, r30
    1332:	20 e0       	ldi	r18, 0x00	; 0
    1334:	41 2f       	mov	r20, r17
    1336:	82 e4       	ldi	r24, 0x42	; 66
    1338:	93 e0       	ldi	r25, 0x03	; 3
    133a:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    133e:	1a 5f       	subi	r17, 0xFA	; 250
void willkommenpage(){
	char buffer[20];
	uint8_t buffersize;
	oled.clearFrame();
	buffersize=sprintf(buffer,"Fahradcomputer");
	for(uint8_t i=0; i < buffersize;i++){
    1340:	14 35       	cpi	r17, 0x54	; 84
    1342:	a1 f7       	brne	.-24     	; 0x132c <_Z14willkommenpagev+0x46>
		oled.draw_ASCI(buffer[i],i*charsize,0);
	}
	buffersize=sprintf(buffer,"--------------");
    1344:	8f e0       	ldi	r24, 0x0F	; 15
    1346:	ef e0       	ldi	r30, 0x0F	; 15
    1348:	f1 e0       	ldi	r31, 0x01	; 1
    134a:	de 01       	movw	r26, r28
    134c:	11 96       	adiw	r26, 0x01	; 1
    134e:	01 90       	ld	r0, Z+
    1350:	0d 92       	st	X+, r0
    1352:	8a 95       	dec	r24
    1354:	e1 f7       	brne	.-8      	; 0x134e <_Z14willkommenpagev+0x68>
    1356:	ec 2c       	mov	r14, r12
    1358:	fd 2c       	mov	r15, r13
    135a:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0; i < buffersize;i++){
		oled.draw_ASCI(buffer[i],i*charsize,8);
    135c:	f7 01       	movw	r30, r14
    135e:	61 91       	ld	r22, Z+
    1360:	7f 01       	movw	r14, r30
    1362:	28 e0       	ldi	r18, 0x08	; 8
    1364:	41 2f       	mov	r20, r17
    1366:	82 e4       	ldi	r24, 0x42	; 66
    1368:	93 e0       	ldi	r25, 0x03	; 3
    136a:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    136e:	1a 5f       	subi	r17, 0xFA	; 250
	buffersize=sprintf(buffer,"Fahradcomputer");
	for(uint8_t i=0; i < buffersize;i++){
		oled.draw_ASCI(buffer[i],i*charsize,0);
	}
	buffersize=sprintf(buffer,"--------------");
	for(uint8_t i=0; i < buffersize;i++){
    1370:	14 35       	cpi	r17, 0x54	; 84
    1372:	a1 f7       	brne	.-24     	; 0x135c <_Z14willkommenpagev+0x76>
		oled.draw_ASCI(buffer[i],i*charsize,8);
	}
	buffersize=sprintf(buffer,"Version: %.2f",VERSIONSNUMMER);
    1374:	8f e3       	ldi	r24, 0x3F	; 63
    1376:	8f 93       	push	r24
    1378:	85 eb       	ldi	r24, 0xB5	; 181
    137a:	8f 93       	push	r24
    137c:	82 ec       	ldi	r24, 0xC2	; 194
    137e:	8f 93       	push	r24
    1380:	8f e8       	ldi	r24, 0x8F	; 143
    1382:	8f 93       	push	r24
    1384:	8e e1       	ldi	r24, 0x1E	; 30
    1386:	91 e0       	ldi	r25, 0x01	; 1
    1388:	9f 93       	push	r25
    138a:	8f 93       	push	r24
    138c:	ce 01       	movw	r24, r28
    138e:	01 96       	adiw	r24, 0x01	; 1
    1390:	9f 93       	push	r25
    1392:	8f 93       	push	r24
    1394:	0e 94 46 2f 	call	0x5e8c	; 0x5e8c <sprintf>
	for(uint8_t i=0; i < buffersize;i++){
    1398:	0f b6       	in	r0, 0x3f	; 63
    139a:	f8 94       	cli
    139c:	de bf       	out	0x3e, r29	; 62
    139e:	0f be       	out	0x3f, r0	; 63
    13a0:	cd bf       	out	0x3d, r28	; 61
    13a2:	88 23       	and	r24, r24
    13a4:	d1 f0       	breq	.+52     	; 0x13da <_Z14willkommenpagev+0xf4>
    13a6:	81 50       	subi	r24, 0x01	; 1
    13a8:	68 94       	set
    13aa:	ee 24       	eor	r14, r14
    13ac:	e1 f8       	bld	r14, 1
    13ae:	f1 2c       	mov	r15, r1
    13b0:	ec 0e       	add	r14, r28
    13b2:	fd 1e       	adc	r15, r29
    13b4:	e8 0e       	add	r14, r24
    13b6:	f1 1c       	adc	r15, r1
    13b8:	0c 2d       	mov	r16, r12
    13ba:	1d 2d       	mov	r17, r13
    13bc:	d1 2c       	mov	r13, r1
		oled.draw_ASCI(buffer[i],i*charsize,32);
    13be:	f8 01       	movw	r30, r16
    13c0:	61 91       	ld	r22, Z+
    13c2:	8f 01       	movw	r16, r30
    13c4:	20 e2       	ldi	r18, 0x20	; 32
    13c6:	4d 2d       	mov	r20, r13
    13c8:	82 e4       	ldi	r24, 0x42	; 66
    13ca:	93 e0       	ldi	r25, 0x03	; 3
    13cc:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    13d0:	f6 e0       	ldi	r31, 0x06	; 6
    13d2:	df 0e       	add	r13, r31
	buffersize=sprintf(buffer,"--------------");
	for(uint8_t i=0; i < buffersize;i++){
		oled.draw_ASCI(buffer[i],i*charsize,8);
	}
	buffersize=sprintf(buffer,"Version: %.2f",VERSIONSNUMMER);
	for(uint8_t i=0; i < buffersize;i++){
    13d4:	0e 15       	cp	r16, r14
    13d6:	1f 05       	cpc	r17, r15
    13d8:	91 f7       	brne	.-28     	; 0x13be <_Z14willkommenpagev+0xd8>
		oled.draw_ASCI(buffer[i],i*charsize,32);

	}
	oled.sendFrame();
    13da:	82 e4       	ldi	r24, 0x42	; 66
    13dc:	93 e0       	ldi	r25, 0x03	; 3
    13de:	0e 94 93 03 	call	0x726	; 0x726 <_ZN7Display9sendFrameEv>
	oled.clearFrame();
    13e2:	82 e4       	ldi	r24, 0x42	; 66
    13e4:	93 e0       	ldi	r25, 0x03	; 3
    13e6:	0e 94 ed 02 	call	0x5da	; 0x5da <_ZN7Display10clearFrameEv>
    13ea:	85 e0       	ldi	r24, 0x05	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    13ec:	2f e7       	ldi	r18, 0x7F	; 127
    13ee:	38 e3       	ldi	r19, 0x38	; 56
    13f0:	91 e0       	ldi	r25, 0x01	; 1
    13f2:	21 50       	subi	r18, 0x01	; 1
    13f4:	30 40       	sbci	r19, 0x00	; 0
    13f6:	90 40       	sbci	r25, 0x00	; 0
    13f8:	e1 f7       	brne	.-8      	; 0x13f2 <_Z14willkommenpagev+0x10c>
    13fa:	00 c0       	rjmp	.+0      	; 0x13fc <_Z14willkommenpagev+0x116>
    13fc:	00 00       	nop
    13fe:	ef e7       	ldi	r30, 0x7F	; 127
    1400:	f8 e3       	ldi	r31, 0x38	; 56
    1402:	21 e0       	ldi	r18, 0x01	; 1
    1404:	e1 50       	subi	r30, 0x01	; 1
    1406:	f0 40       	sbci	r31, 0x00	; 0
    1408:	20 40       	sbci	r18, 0x00	; 0
    140a:	e1 f7       	brne	.-8      	; 0x1404 <_Z14willkommenpagev+0x11e>
    140c:	00 c0       	rjmp	.+0      	; 0x140e <_Z14willkommenpagev+0x128>
    140e:	00 00       	nop
    1410:	81 50       	subi	r24, 0x01	; 1
	for (uint8_t i=0;i<5;i++)
    1412:	61 f7       	brne	.-40     	; 0x13ec <_Z14willkommenpagev+0x106>
	{
		_delay_ms(50);
		_delay_ms(50);
	}
}
    1414:	64 96       	adiw	r28, 0x14	; 20
    1416:	0f b6       	in	r0, 0x3f	; 63
    1418:	f8 94       	cli
    141a:	de bf       	out	0x3e, r29	; 62
    141c:	0f be       	out	0x3f, r0	; 63
    141e:	cd bf       	out	0x3d, r28	; 61
    1420:	df 91       	pop	r29
    1422:	cf 91       	pop	r28
    1424:	1f 91       	pop	r17
    1426:	0f 91       	pop	r16
    1428:	ff 90       	pop	r15
    142a:	ef 90       	pop	r14
    142c:	df 90       	pop	r13
    142e:	cf 90       	pop	r12
    1430:	08 95       	ret

00001432 <_Z6headerh>:

void header(uint8_t page){
    1432:	ef 92       	push	r14
    1434:	ff 92       	push	r15
    1436:	0f 93       	push	r16
    1438:	1f 93       	push	r17
    143a:	cf 93       	push	r28
    143c:	df 93       	push	r29
    143e:	cd b7       	in	r28, 0x3d	; 61
    1440:	de b7       	in	r29, 0x3e	; 62
    1442:	64 97       	sbiw	r28, 0x14	; 20
    1444:	0f b6       	in	r0, 0x3f	; 63
    1446:	f8 94       	cli
    1448:	de bf       	out	0x3e, r29	; 62
    144a:	0f be       	out	0x3f, r0	; 63
    144c:	cd bf       	out	0x3d, r28	; 61
	char buffer[20];
	uint8_t buffersize=0;;
	switch (page) {
    144e:	81 30       	cpi	r24, 0x01	; 1
    1450:	09 f4       	brne	.+2      	; 0x1454 <_Z6headerh+0x22>
    1452:	54 c0       	rjmp	.+168    	; 0x14fc <_Z6headerh+0xca>
    1454:	20 f0       	brcs	.+8      	; 0x145e <_Z6headerh+0x2c>
    1456:	82 30       	cpi	r24, 0x02	; 2
    1458:	09 f4       	brne	.+2      	; 0x145c <_Z6headerh+0x2a>
    145a:	8c c0       	rjmp	.+280    	; 0x1574 <_Z6headerh+0x142>
    145c:	c5 c0       	rjmp	.+394    	; 0x15e8 <_Z6headerh+0x1b6>
    145e:	0f 2e       	mov	r0, r31
    1460:	f9 e7       	ldi	r31, 0x79	; 121
    1462:	ef 2e       	mov	r14, r31
    1464:	f7 e0       	ldi	r31, 0x07	; 7
    1466:	ff 2e       	mov	r15, r31
    1468:	f0 2d       	mov	r31, r0
    146a:	10 e0       	ldi	r17, 0x00	; 0
		case 0:	//standard Header fuer fast alle Pages
			for(uint8_t i=0;i<8;i++){
				oled.draw_ASCI(rtc.msg_uhr[i],i*charsize,0);
    146c:	f7 01       	movw	r30, r14
    146e:	61 91       	ld	r22, Z+
    1470:	7f 01       	movw	r14, r30
    1472:	20 e0       	ldi	r18, 0x00	; 0
    1474:	41 2f       	mov	r20, r17
    1476:	82 e4       	ldi	r24, 0x42	; 66
    1478:	93 e0       	ldi	r25, 0x03	; 3
    147a:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    147e:	1a 5f       	subi	r17, 0xFA	; 250
void header(uint8_t page){
	char buffer[20];
	uint8_t buffersize=0;;
	switch (page) {
		case 0:	//standard Header fuer fast alle Pages
			for(uint8_t i=0;i<8;i++){
    1480:	10 33       	cpi	r17, 0x30	; 48
    1482:	a1 f7       	brne	.-24     	; 0x146c <_Z6headerh+0x3a>
				oled.draw_ASCI(rtc.msg_uhr[i],i*charsize,0);
			}
			buffersize=sprintf(buffer,"Bat: %i%%",Batteriestatus());
    1484:	0e 94 3b 09 	call	0x1276	; 0x1276 <_Z14Batteriestatusv>
    1488:	28 2f       	mov	r18, r24
    148a:	33 27       	eor	r19, r19
    148c:	27 fd       	sbrc	r18, 7
    148e:	30 95       	com	r19
    1490:	3f 93       	push	r19
    1492:	8f 93       	push	r24
    1494:	8c e2       	ldi	r24, 0x2C	; 44
    1496:	91 e0       	ldi	r25, 0x01	; 1
    1498:	9f 93       	push	r25
    149a:	8f 93       	push	r24
    149c:	ce 01       	movw	r24, r28
    149e:	01 96       	adiw	r24, 0x01	; 1
    14a0:	9f 93       	push	r25
    14a2:	8f 93       	push	r24
    14a4:	0e 94 46 2f 	call	0x5e8c	; 0x5e8c <sprintf>
			for(uint8_t i=((SSD1306_WIDTH/charsize)-buffersize);i<(SSD1306_WIDTH/charsize);i++){
    14a8:	25 e1       	ldi	r18, 0x15	; 21
    14aa:	f2 2e       	mov	r15, r18
    14ac:	f8 1a       	sub	r15, r24
    14ae:	0f 90       	pop	r0
    14b0:	0f 90       	pop	r0
    14b2:	0f 90       	pop	r0
    14b4:	0f 90       	pop	r0
    14b6:	0f 90       	pop	r0
    14b8:	0f 90       	pop	r0
    14ba:	f4 e1       	ldi	r31, 0x14	; 20
    14bc:	ff 15       	cp	r31, r15
    14be:	08 f4       	brcc	.+2      	; 0x14c2 <_Z6headerh+0x90>
    14c0:	93 c0       	rjmp	.+294    	; 0x15e8 <_Z6headerh+0x1b6>
    14c2:	ef 2c       	mov	r14, r15
    14c4:	ee 0c       	add	r14, r14
    14c6:	ef 0c       	add	r14, r15
    14c8:	ee 0c       	add	r14, r14
				oled.draw_ASCI(buffer[i-((SSD1306_WIDTH/charsize)-buffersize)],i*charsize,0);
    14ca:	8c 01       	movw	r16, r24
    14cc:	11 27       	eor	r17, r17
    14ce:	e1 e0       	ldi	r30, 0x01	; 1
    14d0:	f0 e0       	ldi	r31, 0x00	; 0
    14d2:	ec 0f       	add	r30, r28
    14d4:	fd 1f       	adc	r31, r29
    14d6:	ef 0d       	add	r30, r15
    14d8:	f1 1d       	adc	r31, r1
    14da:	e0 0f       	add	r30, r16
    14dc:	f1 1f       	adc	r31, r17
    14de:	75 97       	sbiw	r30, 0x15	; 21
    14e0:	20 e0       	ldi	r18, 0x00	; 0
    14e2:	4e 2d       	mov	r20, r14
    14e4:	60 81       	ld	r22, Z
    14e6:	82 e4       	ldi	r24, 0x42	; 66
    14e8:	93 e0       	ldi	r25, 0x03	; 3
    14ea:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
		case 0:	//standard Header fuer fast alle Pages
			for(uint8_t i=0;i<8;i++){
				oled.draw_ASCI(rtc.msg_uhr[i],i*charsize,0);
			}
			buffersize=sprintf(buffer,"Bat: %i%%",Batteriestatus());
			for(uint8_t i=((SSD1306_WIDTH/charsize)-buffersize);i<(SSD1306_WIDTH/charsize);i++){
    14ee:	f3 94       	inc	r15
    14f0:	26 e0       	ldi	r18, 0x06	; 6
    14f2:	e2 0e       	add	r14, r18
    14f4:	85 e1       	ldi	r24, 0x15	; 21
    14f6:	f8 12       	cpse	r15, r24
    14f8:	ea cf       	rjmp	.-44     	; 0x14ce <_Z6headerh+0x9c>
    14fa:	76 c0       	rjmp	.+236    	; 0x15e8 <_Z6headerh+0x1b6>
				oled.draw_ASCI(buffer[i-((SSD1306_WIDTH/charsize)-buffersize)],i*charsize,0);
			}
			break;
		case 1:
			buffersize=sprintf(buffer,"Bat: %i%%",Batteriestatus());
    14fc:	0e 94 3b 09 	call	0x1276	; 0x1276 <_Z14Batteriestatusv>
    1500:	28 2f       	mov	r18, r24
    1502:	33 27       	eor	r19, r19
    1504:	27 fd       	sbrc	r18, 7
    1506:	30 95       	com	r19
    1508:	3f 93       	push	r19
    150a:	8f 93       	push	r24
    150c:	8c e2       	ldi	r24, 0x2C	; 44
    150e:	91 e0       	ldi	r25, 0x01	; 1
    1510:	9f 93       	push	r25
    1512:	8f 93       	push	r24
    1514:	ce 01       	movw	r24, r28
    1516:	01 96       	adiw	r24, 0x01	; 1
    1518:	9f 93       	push	r25
    151a:	8f 93       	push	r24
    151c:	0e 94 46 2f 	call	0x5e8c	; 0x5e8c <sprintf>
			for(uint8_t i=((SSD1306_WIDTH/charsize)-buffersize);i<(SSD1306_WIDTH/charsize);i++){
    1520:	25 e1       	ldi	r18, 0x15	; 21
    1522:	f2 2e       	mov	r15, r18
    1524:	f8 1a       	sub	r15, r24
    1526:	0f 90       	pop	r0
    1528:	0f 90       	pop	r0
    152a:	0f 90       	pop	r0
    152c:	0f 90       	pop	r0
    152e:	0f 90       	pop	r0
    1530:	0f 90       	pop	r0
    1532:	e4 e1       	ldi	r30, 0x14	; 20
    1534:	ef 15       	cp	r30, r15
    1536:	08 f4       	brcc	.+2      	; 0x153a <_Z6headerh+0x108>
    1538:	57 c0       	rjmp	.+174    	; 0x15e8 <_Z6headerh+0x1b6>
    153a:	ef 2c       	mov	r14, r15
    153c:	ee 0c       	add	r14, r14
    153e:	ef 0c       	add	r14, r15
    1540:	ee 0c       	add	r14, r14
				oled.draw_ASCI(buffer[i-((SSD1306_WIDTH/charsize)-buffersize)],i*charsize,0);
    1542:	8c 01       	movw	r16, r24
    1544:	11 27       	eor	r17, r17
    1546:	e1 e0       	ldi	r30, 0x01	; 1
    1548:	f0 e0       	ldi	r31, 0x00	; 0
    154a:	ec 0f       	add	r30, r28
    154c:	fd 1f       	adc	r31, r29
    154e:	ef 0d       	add	r30, r15
    1550:	f1 1d       	adc	r31, r1
    1552:	e0 0f       	add	r30, r16
    1554:	f1 1f       	adc	r31, r17
    1556:	75 97       	sbiw	r30, 0x15	; 21
    1558:	20 e0       	ldi	r18, 0x00	; 0
    155a:	4e 2d       	mov	r20, r14
    155c:	60 81       	ld	r22, Z
    155e:	82 e4       	ldi	r24, 0x42	; 66
    1560:	93 e0       	ldi	r25, 0x03	; 3
    1562:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
				oled.draw_ASCI(buffer[i-((SSD1306_WIDTH/charsize)-buffersize)],i*charsize,0);
			}
			break;
		case 1:
			buffersize=sprintf(buffer,"Bat: %i%%",Batteriestatus());
			for(uint8_t i=((SSD1306_WIDTH/charsize)-buffersize);i<(SSD1306_WIDTH/charsize);i++){
    1566:	f3 94       	inc	r15
    1568:	f6 e0       	ldi	r31, 0x06	; 6
    156a:	ef 0e       	add	r14, r31
    156c:	25 e1       	ldi	r18, 0x15	; 21
    156e:	f2 12       	cpse	r15, r18
    1570:	ea cf       	rjmp	.-44     	; 0x1546 <_Z6headerh+0x114>
    1572:	3a c0       	rjmp	.+116    	; 0x15e8 <_Z6headerh+0x1b6>
				oled.draw_ASCI(buffer[i-((SSD1306_WIDTH/charsize)-buffersize)],i*charsize,0);
			}
			break;
		case 2:
			buffersize=sprintf(buffer,"%i%%",Batteriestatus());
    1574:	0e 94 3b 09 	call	0x1276	; 0x1276 <_Z14Batteriestatusv>
    1578:	28 2f       	mov	r18, r24
    157a:	33 27       	eor	r19, r19
    157c:	27 fd       	sbrc	r18, 7
    157e:	30 95       	com	r19
    1580:	3f 93       	push	r19
    1582:	8f 93       	push	r24
    1584:	81 e3       	ldi	r24, 0x31	; 49
    1586:	91 e0       	ldi	r25, 0x01	; 1
    1588:	9f 93       	push	r25
    158a:	8f 93       	push	r24
    158c:	ce 01       	movw	r24, r28
    158e:	01 96       	adiw	r24, 0x01	; 1
    1590:	9f 93       	push	r25
    1592:	8f 93       	push	r24
    1594:	0e 94 46 2f 	call	0x5e8c	; 0x5e8c <sprintf>
			for(uint8_t i=((SSD1306_WIDTH/charsize)-buffersize);i<(SSD1306_WIDTH/charsize);i++){
    1598:	25 e1       	ldi	r18, 0x15	; 21
    159a:	f2 2e       	mov	r15, r18
    159c:	f8 1a       	sub	r15, r24
    159e:	0f 90       	pop	r0
    15a0:	0f 90       	pop	r0
    15a2:	0f 90       	pop	r0
    15a4:	0f 90       	pop	r0
    15a6:	0f 90       	pop	r0
    15a8:	0f 90       	pop	r0
    15aa:	e4 e1       	ldi	r30, 0x14	; 20
    15ac:	ef 15       	cp	r30, r15
    15ae:	e0 f0       	brcs	.+56     	; 0x15e8 <_Z6headerh+0x1b6>
    15b0:	ef 2c       	mov	r14, r15
    15b2:	ee 0c       	add	r14, r14
    15b4:	ef 0c       	add	r14, r15
    15b6:	ee 0c       	add	r14, r14
				oled.draw_ASCI(buffer[i-((SSD1306_WIDTH/charsize)-buffersize)],i*charsize,0);
    15b8:	8c 01       	movw	r16, r24
    15ba:	11 27       	eor	r17, r17
    15bc:	e1 e0       	ldi	r30, 0x01	; 1
    15be:	f0 e0       	ldi	r31, 0x00	; 0
    15c0:	ec 0f       	add	r30, r28
    15c2:	fd 1f       	adc	r31, r29
    15c4:	ef 0d       	add	r30, r15
    15c6:	f1 1d       	adc	r31, r1
    15c8:	e0 0f       	add	r30, r16
    15ca:	f1 1f       	adc	r31, r17
    15cc:	75 97       	sbiw	r30, 0x15	; 21
    15ce:	20 e0       	ldi	r18, 0x00	; 0
    15d0:	4e 2d       	mov	r20, r14
    15d2:	60 81       	ld	r22, Z
    15d4:	82 e4       	ldi	r24, 0x42	; 66
    15d6:	93 e0       	ldi	r25, 0x03	; 3
    15d8:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
				oled.draw_ASCI(buffer[i-((SSD1306_WIDTH/charsize)-buffersize)],i*charsize,0);
			}
			break;
		case 2:
			buffersize=sprintf(buffer,"%i%%",Batteriestatus());
			for(uint8_t i=((SSD1306_WIDTH/charsize)-buffersize);i<(SSD1306_WIDTH/charsize);i++){
    15dc:	f3 94       	inc	r15
    15de:	f6 e0       	ldi	r31, 0x06	; 6
    15e0:	ef 0e       	add	r14, r31
    15e2:	25 e1       	ldi	r18, 0x15	; 21
    15e4:	f2 12       	cpse	r15, r18
    15e6:	ea cf       	rjmp	.-44     	; 0x15bc <_Z6headerh+0x18a>
			}
			break;
		default:
			break;
	}
}
    15e8:	64 96       	adiw	r28, 0x14	; 20
    15ea:	0f b6       	in	r0, 0x3f	; 63
    15ec:	f8 94       	cli
    15ee:	de bf       	out	0x3e, r29	; 62
    15f0:	0f be       	out	0x3f, r0	; 63
    15f2:	cd bf       	out	0x3d, r28	; 61
    15f4:	df 91       	pop	r29
    15f6:	cf 91       	pop	r28
    15f8:	1f 91       	pop	r17
    15fa:	0f 91       	pop	r16
    15fc:	ff 90       	pop	r15
    15fe:	ef 90       	pop	r14
    1600:	08 95       	ret

00001602 <_Z6bottomh>:

void bottom(uint8_t page){
    1602:	1f 93       	push	r17
    1604:	cf 93       	push	r28
    1606:	df 93       	push	r29
	switch (page) {
    1608:	88 23       	and	r24, r24
    160a:	19 f0       	breq	.+6      	; 0x1612 <_Z6bottomh+0x10>
    160c:	81 30       	cpi	r24, 0x01	; 1
    160e:	79 f0       	breq	.+30     	; 0x162e <_Z6bottomh+0x2c>
    1610:	1b c0       	rjmp	.+54     	; 0x1648 <_Z6bottomh+0x46>
    1612:	c1 e8       	ldi	r28, 0x81	; 129
    1614:	d7 e0       	ldi	r29, 0x07	; 7
    1616:	10 e5       	ldi	r17, 0x50	; 80
		case 0:	//standard Header fuer fast alle Pages
			for(uint8_t i=0;i<8;i++){
				oled.draw_ASCI(rtc.msg_dat[i],i*charsize+(SSD1306_WIDTH-bitsderrtc*charsize),7*charhighte);
    1618:	69 91       	ld	r22, Y+
    161a:	28 e3       	ldi	r18, 0x38	; 56
    161c:	41 2f       	mov	r20, r17
    161e:	82 e4       	ldi	r24, 0x42	; 66
    1620:	93 e0       	ldi	r25, 0x03	; 3
    1622:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    1626:	1a 5f       	subi	r17, 0xFA	; 250
}

void bottom(uint8_t page){
	switch (page) {
		case 0:	//standard Header fuer fast alle Pages
			for(uint8_t i=0;i<8;i++){
    1628:	10 38       	cpi	r17, 0x80	; 128
    162a:	b1 f7       	brne	.-20     	; 0x1618 <_Z6bottomh+0x16>
    162c:	0d c0       	rjmp	.+26     	; 0x1648 <_Z6bottomh+0x46>
    162e:	c1 e8       	ldi	r28, 0x81	; 129
    1630:	d7 e0       	ldi	r29, 0x07	; 7
			break;
	}
}

void bottom(uint8_t page){
	switch (page) {
    1632:	15 e0       	ldi	r17, 0x05	; 5
				oled.draw_ASCI(rtc.msg_dat[i],i*charsize+(SSD1306_WIDTH-bitsderrtc*charsize),7*charhighte);
			}
			break;
		case 1:
			for(uint8_t i=0;i<8;i++){
				oled.draw_ASCI(rtc.msg_dat[i],5+i*charsize,7*charhighte);
    1634:	69 91       	ld	r22, Y+
    1636:	28 e3       	ldi	r18, 0x38	; 56
    1638:	41 2f       	mov	r20, r17
    163a:	82 e4       	ldi	r24, 0x42	; 66
    163c:	93 e0       	ldi	r25, 0x03	; 3
    163e:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    1642:	1a 5f       	subi	r17, 0xFA	; 250
			for(uint8_t i=0;i<8;i++){
				oled.draw_ASCI(rtc.msg_dat[i],i*charsize+(SSD1306_WIDTH-bitsderrtc*charsize),7*charhighte);
			}
			break;
		case 1:
			for(uint8_t i=0;i<8;i++){
    1644:	15 33       	cpi	r17, 0x35	; 53
    1646:	b1 f7       	brne	.-20     	; 0x1634 <_Z6bottomh+0x32>
			}
			break;
		default:
			break;
		}
}
    1648:	df 91       	pop	r29
    164a:	cf 91       	pop	r28
    164c:	1f 91       	pop	r17
    164e:	08 95       	ret

00001650 <_Z16anzeige_richtungf>:

void anzeige_richtung(float winkel){
    1650:	cf 92       	push	r12
    1652:	df 92       	push	r13
    1654:	ef 92       	push	r14
    1656:	ff 92       	push	r15
    1658:	6b 01       	movw	r12, r22
    165a:	7c 01       	movw	r14, r24
	//finden der Ziffer fuer die Anzeige
	if ((winkel<45/2) || (winkel >= 360-45/2))
    165c:	20 e0       	ldi	r18, 0x00	; 0
    165e:	30 e0       	ldi	r19, 0x00	; 0
    1660:	40 eb       	ldi	r20, 0xB0	; 176
    1662:	51 e4       	ldi	r21, 0x41	; 65
    1664:	0e 94 c3 27 	call	0x4f86	; 0x4f86 <__cmpsf2>
    1668:	88 23       	and	r24, r24
    166a:	54 f0       	brlt	.+20     	; 0x1680 <_Z16anzeige_richtungf+0x30>
    166c:	20 e0       	ldi	r18, 0x00	; 0
    166e:	30 e0       	ldi	r19, 0x00	; 0
    1670:	49 ea       	ldi	r20, 0xA9	; 169
    1672:	53 e4       	ldi	r21, 0x43	; 67
    1674:	c7 01       	movw	r24, r14
    1676:	b6 01       	movw	r22, r12
    1678:	0e 94 73 29 	call	0x52e6	; 0x52e6 <__gesf2>
    167c:	88 23       	and	r24, r24
    167e:	44 f0       	brlt	.+16     	; 0x1690 <_Z16anzeige_richtungf+0x40>
	{
		oled.draw_ASCI('N',80,3.5*charhighte);
    1680:	2c e1       	ldi	r18, 0x1C	; 28
    1682:	40 e5       	ldi	r20, 0x50	; 80
    1684:	6e e4       	ldi	r22, 0x4E	; 78
    1686:	82 e4       	ldi	r24, 0x42	; 66
    1688:	93 e0       	ldi	r25, 0x03	; 3
    168a:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    168e:	99 c0       	rjmp	.+306    	; 0x17c2 <_Z16anzeige_richtungf+0x172>
	}
	else if (winkel<90-45/2)
    1690:	20 e0       	ldi	r18, 0x00	; 0
    1692:	30 e0       	ldi	r19, 0x00	; 0
    1694:	48 e8       	ldi	r20, 0x88	; 136
    1696:	52 e4       	ldi	r21, 0x42	; 66
    1698:	c7 01       	movw	r24, r14
    169a:	b6 01       	movw	r22, r12
    169c:	0e 94 c3 27 	call	0x4f86	; 0x4f86 <__cmpsf2>
    16a0:	88 23       	and	r24, r24
    16a2:	7c f4       	brge	.+30     	; 0x16c2 <_Z16anzeige_richtungf+0x72>
	{
		oled.draw_ASCI('N',80-charsize/2,3.5*charhighte);
    16a4:	2c e1       	ldi	r18, 0x1C	; 28
    16a6:	4d e4       	ldi	r20, 0x4D	; 77
    16a8:	6e e4       	ldi	r22, 0x4E	; 78
    16aa:	82 e4       	ldi	r24, 0x42	; 66
    16ac:	93 e0       	ldi	r25, 0x03	; 3
    16ae:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
		oled.draw_ASCI('O',80+charsize/2,3.5*charhighte);
    16b2:	2c e1       	ldi	r18, 0x1C	; 28
    16b4:	43 e5       	ldi	r20, 0x53	; 83
    16b6:	6f e4       	ldi	r22, 0x4F	; 79
    16b8:	82 e4       	ldi	r24, 0x42	; 66
    16ba:	93 e0       	ldi	r25, 0x03	; 3
    16bc:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    16c0:	80 c0       	rjmp	.+256    	; 0x17c2 <_Z16anzeige_richtungf+0x172>
	}
	else if (winkel<135-45/2)
    16c2:	20 e0       	ldi	r18, 0x00	; 0
    16c4:	30 e0       	ldi	r19, 0x00	; 0
    16c6:	42 ee       	ldi	r20, 0xE2	; 226
    16c8:	52 e4       	ldi	r21, 0x42	; 66
    16ca:	c7 01       	movw	r24, r14
    16cc:	b6 01       	movw	r22, r12
    16ce:	0e 94 c3 27 	call	0x4f86	; 0x4f86 <__cmpsf2>
    16d2:	88 23       	and	r24, r24
    16d4:	44 f4       	brge	.+16     	; 0x16e6 <_Z16anzeige_richtungf+0x96>
	{
		oled.draw_ASCI('O',80,3.5*charhighte);
    16d6:	2c e1       	ldi	r18, 0x1C	; 28
    16d8:	40 e5       	ldi	r20, 0x50	; 80
    16da:	6f e4       	ldi	r22, 0x4F	; 79
    16dc:	82 e4       	ldi	r24, 0x42	; 66
    16de:	93 e0       	ldi	r25, 0x03	; 3
    16e0:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    16e4:	6e c0       	rjmp	.+220    	; 0x17c2 <_Z16anzeige_richtungf+0x172>
	}
	else if (winkel<180-45/2)
    16e6:	20 e0       	ldi	r18, 0x00	; 0
    16e8:	30 e0       	ldi	r19, 0x00	; 0
    16ea:	4e e1       	ldi	r20, 0x1E	; 30
    16ec:	53 e4       	ldi	r21, 0x43	; 67
    16ee:	c7 01       	movw	r24, r14
    16f0:	b6 01       	movw	r22, r12
    16f2:	0e 94 c3 27 	call	0x4f86	; 0x4f86 <__cmpsf2>
    16f6:	88 23       	and	r24, r24
    16f8:	7c f4       	brge	.+30     	; 0x1718 <_Z16anzeige_richtungf+0xc8>
	{
		oled.draw_ASCI('S',80-charsize/2,3.5*charhighte);
    16fa:	2c e1       	ldi	r18, 0x1C	; 28
    16fc:	4d e4       	ldi	r20, 0x4D	; 77
    16fe:	63 e5       	ldi	r22, 0x53	; 83
    1700:	82 e4       	ldi	r24, 0x42	; 66
    1702:	93 e0       	ldi	r25, 0x03	; 3
    1704:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
		oled.draw_ASCI('O',80+charsize/2,3.5*charhighte);
    1708:	2c e1       	ldi	r18, 0x1C	; 28
    170a:	43 e5       	ldi	r20, 0x53	; 83
    170c:	6f e4       	ldi	r22, 0x4F	; 79
    170e:	82 e4       	ldi	r24, 0x42	; 66
    1710:	93 e0       	ldi	r25, 0x03	; 3
    1712:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    1716:	55 c0       	rjmp	.+170    	; 0x17c2 <_Z16anzeige_richtungf+0x172>
	}
	else if (winkel<225-45/2)
    1718:	20 e0       	ldi	r18, 0x00	; 0
    171a:	30 e0       	ldi	r19, 0x00	; 0
    171c:	4b e4       	ldi	r20, 0x4B	; 75
    171e:	53 e4       	ldi	r21, 0x43	; 67
    1720:	c7 01       	movw	r24, r14
    1722:	b6 01       	movw	r22, r12
    1724:	0e 94 c3 27 	call	0x4f86	; 0x4f86 <__cmpsf2>
    1728:	88 23       	and	r24, r24
    172a:	44 f4       	brge	.+16     	; 0x173c <_Z16anzeige_richtungf+0xec>
	{
		oled.draw_ASCI('S',80,3.5*charhighte);
    172c:	2c e1       	ldi	r18, 0x1C	; 28
    172e:	40 e5       	ldi	r20, 0x50	; 80
    1730:	63 e5       	ldi	r22, 0x53	; 83
    1732:	82 e4       	ldi	r24, 0x42	; 66
    1734:	93 e0       	ldi	r25, 0x03	; 3
    1736:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    173a:	43 c0       	rjmp	.+134    	; 0x17c2 <_Z16anzeige_richtungf+0x172>
	}
	else if (winkel<270-45/2)
    173c:	20 e0       	ldi	r18, 0x00	; 0
    173e:	30 e0       	ldi	r19, 0x00	; 0
    1740:	48 e7       	ldi	r20, 0x78	; 120
    1742:	53 e4       	ldi	r21, 0x43	; 67
    1744:	c7 01       	movw	r24, r14
    1746:	b6 01       	movw	r22, r12
    1748:	0e 94 c3 27 	call	0x4f86	; 0x4f86 <__cmpsf2>
    174c:	88 23       	and	r24, r24
    174e:	7c f4       	brge	.+30     	; 0x176e <_Z16anzeige_richtungf+0x11e>
	{
		oled.draw_ASCI('S',80-charsize/2,3.5*charhighte);
    1750:	2c e1       	ldi	r18, 0x1C	; 28
    1752:	4d e4       	ldi	r20, 0x4D	; 77
    1754:	63 e5       	ldi	r22, 0x53	; 83
    1756:	82 e4       	ldi	r24, 0x42	; 66
    1758:	93 e0       	ldi	r25, 0x03	; 3
    175a:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
		oled.draw_ASCI('W',80+charsize/2,3.5*charhighte);
    175e:	2c e1       	ldi	r18, 0x1C	; 28
    1760:	43 e5       	ldi	r20, 0x53	; 83
    1762:	67 e5       	ldi	r22, 0x57	; 87
    1764:	82 e4       	ldi	r24, 0x42	; 66
    1766:	93 e0       	ldi	r25, 0x03	; 3
    1768:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    176c:	2a c0       	rjmp	.+84     	; 0x17c2 <_Z16anzeige_richtungf+0x172>
	}
	else if (winkel<315-45/2)
    176e:	20 e0       	ldi	r18, 0x00	; 0
    1770:	30 e8       	ldi	r19, 0x80	; 128
    1772:	42 e9       	ldi	r20, 0x92	; 146
    1774:	53 e4       	ldi	r21, 0x43	; 67
    1776:	c7 01       	movw	r24, r14
    1778:	b6 01       	movw	r22, r12
    177a:	0e 94 c3 27 	call	0x4f86	; 0x4f86 <__cmpsf2>
    177e:	88 23       	and	r24, r24
    1780:	44 f4       	brge	.+16     	; 0x1792 <_Z16anzeige_richtungf+0x142>
	{
		oled.draw_ASCI('W',80,3.5*charhighte);
    1782:	2c e1       	ldi	r18, 0x1C	; 28
    1784:	40 e5       	ldi	r20, 0x50	; 80
    1786:	67 e5       	ldi	r22, 0x57	; 87
    1788:	82 e4       	ldi	r24, 0x42	; 66
    178a:	93 e0       	ldi	r25, 0x03	; 3
    178c:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    1790:	18 c0       	rjmp	.+48     	; 0x17c2 <_Z16anzeige_richtungf+0x172>
	}
	else if (winkel<360-45/2)
    1792:	20 e0       	ldi	r18, 0x00	; 0
    1794:	30 e0       	ldi	r19, 0x00	; 0
    1796:	49 ea       	ldi	r20, 0xA9	; 169
    1798:	53 e4       	ldi	r21, 0x43	; 67
    179a:	c7 01       	movw	r24, r14
    179c:	b6 01       	movw	r22, r12
    179e:	0e 94 c3 27 	call	0x4f86	; 0x4f86 <__cmpsf2>
    17a2:	88 23       	and	r24, r24
    17a4:	74 f4       	brge	.+28     	; 0x17c2 <_Z16anzeige_richtungf+0x172>
	{
		oled.draw_ASCI('N',80-charsize/2,3.5*charhighte);
    17a6:	2c e1       	ldi	r18, 0x1C	; 28
    17a8:	4d e4       	ldi	r20, 0x4D	; 77
    17aa:	6e e4       	ldi	r22, 0x4E	; 78
    17ac:	82 e4       	ldi	r24, 0x42	; 66
    17ae:	93 e0       	ldi	r25, 0x03	; 3
    17b0:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
		oled.draw_ASCI('W',80+charsize/2,3.5*charhighte);
    17b4:	2c e1       	ldi	r18, 0x1C	; 28
    17b6:	43 e5       	ldi	r20, 0x53	; 83
    17b8:	67 e5       	ldi	r22, 0x57	; 87
    17ba:	82 e4       	ldi	r24, 0x42	; 66
    17bc:	93 e0       	ldi	r25, 0x03	; 3
    17be:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
	}
}
    17c2:	ff 90       	pop	r15
    17c4:	ef 90       	pop	r14
    17c6:	df 90       	pop	r13
    17c8:	cf 90       	pop	r12
    17ca:	08 95       	ret

000017cc <_Z13anzeige_nadelhhf>:

void anzeige_nadel(uint8_t x, uint8_t y, float angle){
    17cc:	af 92       	push	r10
    17ce:	bf 92       	push	r11
    17d0:	cf 92       	push	r12
    17d2:	df 92       	push	r13
    17d4:	ef 92       	push	r14
    17d6:	ff 92       	push	r15
    17d8:	0f 93       	push	r16
    17da:	1f 93       	push	r17
	//fixed parameters for drawing the arrow
	oled.draw_triangle(x,y,20,70,angle);
    17dc:	59 01       	movw	r10, r18
    17de:	6a 01       	movw	r12, r20
    17e0:	e1 2c       	mov	r14, r1
    17e2:	f1 2c       	mov	r15, r1
    17e4:	0c e8       	ldi	r16, 0x8C	; 140
    17e6:	12 e4       	ldi	r17, 0x42	; 66
    17e8:	24 e1       	ldi	r18, 0x14	; 20
    17ea:	46 2f       	mov	r20, r22
    17ec:	68 2f       	mov	r22, r24
    17ee:	82 e4       	ldi	r24, 0x42	; 66
    17f0:	93 e0       	ldi	r25, 0x03	; 3
    17f2:	0e 94 b3 04 	call	0x966	; 0x966 <_ZN7Display13draw_triangleEhhhff>
}
    17f6:	1f 91       	pop	r17
    17f8:	0f 91       	pop	r16
    17fa:	ff 90       	pop	r15
    17fc:	ef 90       	pop	r14
    17fe:	df 90       	pop	r13
    1800:	cf 90       	pop	r12
    1802:	bf 90       	pop	r11
    1804:	af 90       	pop	r10
    1806:	08 95       	ret

00001808 <_Z19anzeige_kleinenadelhhf>:
void anzeige_kleinenadel(uint8_t x, uint8_t y, float angle){
    1808:	af 92       	push	r10
    180a:	bf 92       	push	r11
    180c:	cf 92       	push	r12
    180e:	df 92       	push	r13
    1810:	ef 92       	push	r14
    1812:	ff 92       	push	r15
    1814:	0f 93       	push	r16
    1816:	1f 93       	push	r17
	//fixed parameters for drawing the arrow
	oled.draw_triangle(x,y,10,70,angle);
    1818:	59 01       	movw	r10, r18
    181a:	6a 01       	movw	r12, r20
    181c:	e1 2c       	mov	r14, r1
    181e:	f1 2c       	mov	r15, r1
    1820:	0c e8       	ldi	r16, 0x8C	; 140
    1822:	12 e4       	ldi	r17, 0x42	; 66
    1824:	2a e0       	ldi	r18, 0x0A	; 10
    1826:	46 2f       	mov	r20, r22
    1828:	68 2f       	mov	r22, r24
    182a:	82 e4       	ldi	r24, 0x42	; 66
    182c:	93 e0       	ldi	r25, 0x03	; 3
    182e:	0e 94 b3 04 	call	0x966	; 0x966 <_ZN7Display13draw_triangleEhhhff>
}
    1832:	1f 91       	pop	r17
    1834:	0f 91       	pop	r16
    1836:	ff 90       	pop	r15
    1838:	ef 90       	pop	r14
    183a:	df 90       	pop	r13
    183c:	cf 90       	pop	r12
    183e:	bf 90       	pop	r11
    1840:	af 90       	pop	r10
    1842:	08 95       	ret

00001844 <_Z11menue_hauptv>:

void menue_haupt(){
    1844:	cf 92       	push	r12
    1846:	df 92       	push	r13
    1848:	ef 92       	push	r14
    184a:	ff 92       	push	r15
    184c:	0f 93       	push	r16
    184e:	1f 93       	push	r17
    1850:	cf 93       	push	r28
    1852:	df 93       	push	r29
    1854:	cd b7       	in	r28, 0x3d	; 61
    1856:	de b7       	in	r29, 0x3e	; 62
    1858:	64 97       	sbiw	r28, 0x14	; 20
    185a:	0f b6       	in	r0, 0x3f	; 63
    185c:	f8 94       	cli
    185e:	de bf       	out	0x3e, r29	; 62
    1860:	0f be       	out	0x3f, r0	; 63
    1862:	cd bf       	out	0x3d, r28	; 61
	char buffer[20];
	uint8_t buffersize=0;

	oled.clearFrame();
    1864:	82 e4       	ldi	r24, 0x42	; 66
    1866:	93 e0       	ldi	r25, 0x03	; 3
    1868:	0e 94 ed 02 	call	0x5da	; 0x5da <_ZN7Display10clearFrameEv>
	buffersize=sprintf(buffer,"1:Fahradanzeige");
    186c:	80 e1       	ldi	r24, 0x10	; 16
    186e:	e6 e3       	ldi	r30, 0x36	; 54
    1870:	f1 e0       	ldi	r31, 0x01	; 1
    1872:	8e 01       	movw	r16, r28
    1874:	0f 5f       	subi	r16, 0xFF	; 255
    1876:	1f 4f       	sbci	r17, 0xFF	; 255
    1878:	d8 01       	movw	r26, r16
    187a:	01 90       	ld	r0, Z+
    187c:	0d 92       	st	X+, r0
    187e:	8a 95       	dec	r24
    1880:	e1 f7       	brne	.-8      	; 0x187a <_Z11menue_hauptv+0x36>
    1882:	e0 2e       	mov	r14, r16
    1884:	f1 2e       	mov	r15, r17
    1886:	68 01       	movw	r12, r16
    1888:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,0*charhighte);}
    188a:	f6 01       	movw	r30, r12
    188c:	61 91       	ld	r22, Z+
    188e:	6f 01       	movw	r12, r30
    1890:	20 e0       	ldi	r18, 0x00	; 0
    1892:	41 2f       	mov	r20, r17
    1894:	82 e4       	ldi	r24, 0x42	; 66
    1896:	93 e0       	ldi	r25, 0x03	; 3
    1898:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    189c:	1a 5f       	subi	r17, 0xFA	; 250
    189e:	1a 35       	cpi	r17, 0x5A	; 90
    18a0:	a1 f7       	brne	.-24     	; 0x188a <_Z11menue_hauptv+0x46>
	buffersize=sprintf(buffer,"2:Taschenrechner");
    18a2:	81 e1       	ldi	r24, 0x11	; 17
    18a4:	e6 e4       	ldi	r30, 0x46	; 70
    18a6:	f1 e0       	ldi	r31, 0x01	; 1
    18a8:	de 01       	movw	r26, r28
    18aa:	11 96       	adiw	r26, 0x01	; 1
    18ac:	01 90       	ld	r0, Z+
    18ae:	0d 92       	st	X+, r0
    18b0:	8a 95       	dec	r24
    18b2:	e1 f7       	brne	.-8      	; 0x18ac <_Z11menue_hauptv+0x68>
    18b4:	ce 2c       	mov	r12, r14
    18b6:	df 2c       	mov	r13, r15
    18b8:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,1*charhighte);}
    18ba:	f6 01       	movw	r30, r12
    18bc:	61 91       	ld	r22, Z+
    18be:	6f 01       	movw	r12, r30
    18c0:	28 e0       	ldi	r18, 0x08	; 8
    18c2:	41 2f       	mov	r20, r17
    18c4:	82 e4       	ldi	r24, 0x42	; 66
    18c6:	93 e0       	ldi	r25, 0x03	; 3
    18c8:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    18cc:	1a 5f       	subi	r17, 0xFA	; 250
    18ce:	10 36       	cpi	r17, 0x60	; 96
    18d0:	a1 f7       	brne	.-24     	; 0x18ba <_Z11menue_hauptv+0x76>
	buffersize=sprintf(buffer,"3:Kompass");
    18d2:	8a e0       	ldi	r24, 0x0A	; 10
    18d4:	e7 e5       	ldi	r30, 0x57	; 87
    18d6:	f1 e0       	ldi	r31, 0x01	; 1
    18d8:	de 01       	movw	r26, r28
    18da:	11 96       	adiw	r26, 0x01	; 1
    18dc:	01 90       	ld	r0, Z+
    18de:	0d 92       	st	X+, r0
    18e0:	8a 95       	dec	r24
    18e2:	e1 f7       	brne	.-8      	; 0x18dc <_Z11menue_hauptv+0x98>
    18e4:	ce 2c       	mov	r12, r14
    18e6:	df 2c       	mov	r13, r15
    18e8:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,2*charhighte);}
    18ea:	f6 01       	movw	r30, r12
    18ec:	61 91       	ld	r22, Z+
    18ee:	6f 01       	movw	r12, r30
    18f0:	20 e1       	ldi	r18, 0x10	; 16
    18f2:	41 2f       	mov	r20, r17
    18f4:	82 e4       	ldi	r24, 0x42	; 66
    18f6:	93 e0       	ldi	r25, 0x03	; 3
    18f8:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    18fc:	1a 5f       	subi	r17, 0xFA	; 250
    18fe:	16 33       	cpi	r17, 0x36	; 54
    1900:	a1 f7       	brne	.-24     	; 0x18ea <_Z11menue_hauptv+0xa6>
	buffersize=sprintf(buffer,"4:Uhrmenue");
    1902:	8b e0       	ldi	r24, 0x0B	; 11
    1904:	e1 e6       	ldi	r30, 0x61	; 97
    1906:	f1 e0       	ldi	r31, 0x01	; 1
    1908:	de 01       	movw	r26, r28
    190a:	11 96       	adiw	r26, 0x01	; 1
    190c:	01 90       	ld	r0, Z+
    190e:	0d 92       	st	X+, r0
    1910:	8a 95       	dec	r24
    1912:	e1 f7       	brne	.-8      	; 0x190c <_Z11menue_hauptv+0xc8>
    1914:	ce 2c       	mov	r12, r14
    1916:	df 2c       	mov	r13, r15
    1918:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,3*charhighte);}
    191a:	f6 01       	movw	r30, r12
    191c:	61 91       	ld	r22, Z+
    191e:	6f 01       	movw	r12, r30
    1920:	28 e1       	ldi	r18, 0x18	; 24
    1922:	41 2f       	mov	r20, r17
    1924:	82 e4       	ldi	r24, 0x42	; 66
    1926:	93 e0       	ldi	r25, 0x03	; 3
    1928:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    192c:	1a 5f       	subi	r17, 0xFA	; 250
    192e:	1c 33       	cpi	r17, 0x3C	; 60
    1930:	a1 f7       	brne	.-24     	; 0x191a <_Z11menue_hauptv+0xd6>
	buffersize=sprintf(buffer,"5:Einstellungen");
    1932:	80 e1       	ldi	r24, 0x10	; 16
    1934:	ec e6       	ldi	r30, 0x6C	; 108
    1936:	f1 e0       	ldi	r31, 0x01	; 1
    1938:	de 01       	movw	r26, r28
    193a:	11 96       	adiw	r26, 0x01	; 1
    193c:	01 90       	ld	r0, Z+
    193e:	0d 92       	st	X+, r0
    1940:	8a 95       	dec	r24
    1942:	e1 f7       	brne	.-8      	; 0x193c <_Z11menue_hauptv+0xf8>
    1944:	ce 2c       	mov	r12, r14
    1946:	df 2c       	mov	r13, r15
    1948:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,4*charhighte);}
    194a:	f6 01       	movw	r30, r12
    194c:	61 91       	ld	r22, Z+
    194e:	6f 01       	movw	r12, r30
    1950:	20 e2       	ldi	r18, 0x20	; 32
    1952:	41 2f       	mov	r20, r17
    1954:	82 e4       	ldi	r24, 0x42	; 66
    1956:	93 e0       	ldi	r25, 0x03	; 3
    1958:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    195c:	1a 5f       	subi	r17, 0xFA	; 250
    195e:	1a 35       	cpi	r17, 0x5A	; 90
    1960:	a1 f7       	brne	.-24     	; 0x194a <_Z11menue_hauptv+0x106>
	buffersize=sprintf(buffer,"6:Display aus");
    1962:	8e e0       	ldi	r24, 0x0E	; 14
    1964:	ec e7       	ldi	r30, 0x7C	; 124
    1966:	f1 e0       	ldi	r31, 0x01	; 1
    1968:	de 01       	movw	r26, r28
    196a:	11 96       	adiw	r26, 0x01	; 1
    196c:	01 90       	ld	r0, Z+
    196e:	0d 92       	st	X+, r0
    1970:	8a 95       	dec	r24
    1972:	e1 f7       	brne	.-8      	; 0x196c <_Z11menue_hauptv+0x128>
    1974:	ce 2c       	mov	r12, r14
    1976:	df 2c       	mov	r13, r15
    1978:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,5*charhighte);}
    197a:	f6 01       	movw	r30, r12
    197c:	61 91       	ld	r22, Z+
    197e:	6f 01       	movw	r12, r30
    1980:	28 e2       	ldi	r18, 0x28	; 40
    1982:	41 2f       	mov	r20, r17
    1984:	82 e4       	ldi	r24, 0x42	; 66
    1986:	93 e0       	ldi	r25, 0x03	; 3
    1988:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    198c:	1a 5f       	subi	r17, 0xFA	; 250
    198e:	1e 34       	cpi	r17, 0x4E	; 78
    1990:	a1 f7       	brne	.-24     	; 0x197a <_Z11menue_hauptv+0x136>
	buffersize=sprintf(buffer,"7:Drucksensor");
    1992:	8e e0       	ldi	r24, 0x0E	; 14
    1994:	ea e8       	ldi	r30, 0x8A	; 138
    1996:	f1 e0       	ldi	r31, 0x01	; 1
    1998:	de 01       	movw	r26, r28
    199a:	11 96       	adiw	r26, 0x01	; 1
    199c:	01 90       	ld	r0, Z+
    199e:	0d 92       	st	X+, r0
    19a0:	8a 95       	dec	r24
    19a2:	e1 f7       	brne	.-8      	; 0x199c <_Z11menue_hauptv+0x158>
    19a4:	ce 2c       	mov	r12, r14
    19a6:	df 2c       	mov	r13, r15
    19a8:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,6*charhighte);}
    19aa:	f6 01       	movw	r30, r12
    19ac:	61 91       	ld	r22, Z+
    19ae:	6f 01       	movw	r12, r30
    19b0:	20 e3       	ldi	r18, 0x30	; 48
    19b2:	41 2f       	mov	r20, r17
    19b4:	82 e4       	ldi	r24, 0x42	; 66
    19b6:	93 e0       	ldi	r25, 0x03	; 3
    19b8:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    19bc:	1a 5f       	subi	r17, 0xFA	; 250
    19be:	1e 34       	cpi	r17, 0x4E	; 78
    19c0:	a1 f7       	brne	.-24     	; 0x19aa <_Z11menue_hauptv+0x166>
}
    19c2:	64 96       	adiw	r28, 0x14	; 20
    19c4:	0f b6       	in	r0, 0x3f	; 63
    19c6:	f8 94       	cli
    19c8:	de bf       	out	0x3e, r29	; 62
    19ca:	0f be       	out	0x3f, r0	; 63
    19cc:	cd bf       	out	0x3d, r28	; 61
    19ce:	df 91       	pop	r29
    19d0:	cf 91       	pop	r28
    19d2:	1f 91       	pop	r17
    19d4:	0f 91       	pop	r16
    19d6:	ff 90       	pop	r15
    19d8:	ef 90       	pop	r14
    19da:	df 90       	pop	r13
    19dc:	cf 90       	pop	r12
    19de:	08 95       	ret

000019e0 <_Z11menue_einstv>:
void menue_einst(){
    19e0:	af 92       	push	r10
    19e2:	bf 92       	push	r11
    19e4:	df 92       	push	r13
    19e6:	ef 92       	push	r14
    19e8:	0f 93       	push	r16
    19ea:	1f 93       	push	r17
    19ec:	cf 93       	push	r28
    19ee:	df 93       	push	r29
    19f0:	cd b7       	in	r28, 0x3d	; 61
    19f2:	de b7       	in	r29, 0x3e	; 62
    19f4:	64 97       	sbiw	r28, 0x14	; 20
    19f6:	0f b6       	in	r0, 0x3f	; 63
    19f8:	f8 94       	cli
    19fa:	de bf       	out	0x3e, r29	; 62
    19fc:	0f be       	out	0x3f, r0	; 63
    19fe:	cd bf       	out	0x3d, r28	; 61
	char buffer[20];
	uint8_t buffersize=0;

	oled.clearFrame();
    1a00:	82 e4       	ldi	r24, 0x42	; 66
    1a02:	93 e0       	ldi	r25, 0x03	; 3
    1a04:	0e 94 ed 02 	call	0x5da	; 0x5da <_ZN7Display10clearFrameEv>
	buffersize=sprintf(buffer,"1:Kompass kalib.");
    1a08:	81 e1       	ldi	r24, 0x11	; 17
    1a0a:	e8 e9       	ldi	r30, 0x98	; 152
    1a0c:	f1 e0       	ldi	r31, 0x01	; 1
    1a0e:	8e 01       	movw	r16, r28
    1a10:	0f 5f       	subi	r16, 0xFF	; 255
    1a12:	1f 4f       	sbci	r17, 0xFF	; 255
    1a14:	d8 01       	movw	r26, r16
    1a16:	01 90       	ld	r0, Z+
    1a18:	0d 92       	st	X+, r0
    1a1a:	8a 95       	dec	r24
    1a1c:	e1 f7       	brne	.-8      	; 0x1a16 <_Z11menue_einstv+0x36>
    1a1e:	d0 2e       	mov	r13, r16
    1a20:	e1 2e       	mov	r14, r17
    1a22:	58 01       	movw	r10, r16
    1a24:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,0*charhighte);}
    1a26:	f5 01       	movw	r30, r10
    1a28:	61 91       	ld	r22, Z+
    1a2a:	5f 01       	movw	r10, r30
    1a2c:	20 e0       	ldi	r18, 0x00	; 0
    1a2e:	41 2f       	mov	r20, r17
    1a30:	82 e4       	ldi	r24, 0x42	; 66
    1a32:	93 e0       	ldi	r25, 0x03	; 3
    1a34:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    1a38:	1a 5f       	subi	r17, 0xFA	; 250
    1a3a:	10 36       	cpi	r17, 0x60	; 96
    1a3c:	a1 f7       	brne	.-24     	; 0x1a26 <_Z11menue_einstv+0x46>
	buffersize=sprintf(buffer,"2:Kompassverstaerkung");
    1a3e:	86 e1       	ldi	r24, 0x16	; 22
    1a40:	e9 ea       	ldi	r30, 0xA9	; 169
    1a42:	f1 e0       	ldi	r31, 0x01	; 1
    1a44:	de 01       	movw	r26, r28
    1a46:	11 96       	adiw	r26, 0x01	; 1
    1a48:	01 90       	ld	r0, Z+
    1a4a:	0d 92       	st	X+, r0
    1a4c:	8a 95       	dec	r24
    1a4e:	e1 f7       	brne	.-8      	; 0x1a48 <_Z11menue_einstv+0x68>
    1a50:	ad 2c       	mov	r10, r13
    1a52:	be 2c       	mov	r11, r14
    1a54:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,1*charhighte);}
    1a56:	f5 01       	movw	r30, r10
    1a58:	61 91       	ld	r22, Z+
    1a5a:	5f 01       	movw	r10, r30
    1a5c:	28 e0       	ldi	r18, 0x08	; 8
    1a5e:	41 2f       	mov	r20, r17
    1a60:	82 e4       	ldi	r24, 0x42	; 66
    1a62:	93 e0       	ldi	r25, 0x03	; 3
    1a64:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    1a68:	1a 5f       	subi	r17, 0xFA	; 250
    1a6a:	1e 37       	cpi	r17, 0x7E	; 126
    1a6c:	a1 f7       	brne	.-24     	; 0x1a56 <_Z11menue_einstv+0x76>
	buffersize=sprintf(buffer,"3:Uhr einstellen");
    1a6e:	81 e1       	ldi	r24, 0x11	; 17
    1a70:	ef eb       	ldi	r30, 0xBF	; 191
    1a72:	f1 e0       	ldi	r31, 0x01	; 1
    1a74:	de 01       	movw	r26, r28
    1a76:	11 96       	adiw	r26, 0x01	; 1
    1a78:	01 90       	ld	r0, Z+
    1a7a:	0d 92       	st	X+, r0
    1a7c:	8a 95       	dec	r24
    1a7e:	e1 f7       	brne	.-8      	; 0x1a78 <_Z11menue_einstv+0x98>
    1a80:	ad 2c       	mov	r10, r13
    1a82:	be 2c       	mov	r11, r14
    1a84:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,2*charhighte);}
    1a86:	f5 01       	movw	r30, r10
    1a88:	61 91       	ld	r22, Z+
    1a8a:	5f 01       	movw	r10, r30
    1a8c:	20 e1       	ldi	r18, 0x10	; 16
    1a8e:	41 2f       	mov	r20, r17
    1a90:	82 e4       	ldi	r24, 0x42	; 66
    1a92:	93 e0       	ldi	r25, 0x03	; 3
    1a94:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    1a98:	1a 5f       	subi	r17, 0xFA	; 250
    1a9a:	10 36       	cpi	r17, 0x60	; 96
    1a9c:	a1 f7       	brne	.-24     	; 0x1a86 <_Z11menue_einstv+0xa6>
	buffersize=sprintf(buffer,"4:Weckereinstellen");
    1a9e:	83 e1       	ldi	r24, 0x13	; 19
    1aa0:	e0 ed       	ldi	r30, 0xD0	; 208
    1aa2:	f1 e0       	ldi	r31, 0x01	; 1
    1aa4:	de 01       	movw	r26, r28
    1aa6:	11 96       	adiw	r26, 0x01	; 1
    1aa8:	01 90       	ld	r0, Z+
    1aaa:	0d 92       	st	X+, r0
    1aac:	8a 95       	dec	r24
    1aae:	e1 f7       	brne	.-8      	; 0x1aa8 <_Z11menue_einstv+0xc8>
    1ab0:	ad 2c       	mov	r10, r13
    1ab2:	be 2c       	mov	r11, r14
    1ab4:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,3*charhighte);}
    1ab6:	f5 01       	movw	r30, r10
    1ab8:	61 91       	ld	r22, Z+
    1aba:	5f 01       	movw	r10, r30
    1abc:	28 e1       	ldi	r18, 0x18	; 24
    1abe:	41 2f       	mov	r20, r17
    1ac0:	82 e4       	ldi	r24, 0x42	; 66
    1ac2:	93 e0       	ldi	r25, 0x03	; 3
    1ac4:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    1ac8:	1a 5f       	subi	r17, 0xFA	; 250
    1aca:	1c 36       	cpi	r17, 0x6C	; 108
    1acc:	a1 f7       	brne	.-24     	; 0x1ab6 <_Z11menue_einstv+0xd6>
	//for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,4*charhighte);}
	//buffersize=sprintf(buffer,"6:HMC5883L Gain");
	//for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,5*charhighte);}
	//buffersize=sprintf(buffer,"7:Uhr einstellen");
	//for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,6*charhighte);}
}
    1ace:	64 96       	adiw	r28, 0x14	; 20
    1ad0:	0f b6       	in	r0, 0x3f	; 63
    1ad2:	f8 94       	cli
    1ad4:	de bf       	out	0x3e, r29	; 62
    1ad6:	0f be       	out	0x3f, r0	; 63
    1ad8:	cd bf       	out	0x3d, r28	; 61
    1ada:	df 91       	pop	r29
    1adc:	cf 91       	pop	r28
    1ade:	1f 91       	pop	r17
    1ae0:	0f 91       	pop	r16
    1ae2:	ef 90       	pop	r14
    1ae4:	df 90       	pop	r13
    1ae6:	bf 90       	pop	r11
    1ae8:	af 90       	pop	r10
    1aea:	08 95       	ret

00001aec <_Z9menue_uhrv>:
void menue_uhr(){
    1aec:	cf 92       	push	r12
    1aee:	df 92       	push	r13
    1af0:	ef 92       	push	r14
    1af2:	ff 92       	push	r15
    1af4:	0f 93       	push	r16
    1af6:	1f 93       	push	r17
    1af8:	cf 93       	push	r28
    1afa:	df 93       	push	r29
    1afc:	cd b7       	in	r28, 0x3d	; 61
    1afe:	de b7       	in	r29, 0x3e	; 62
    1b00:	64 97       	sbiw	r28, 0x14	; 20
    1b02:	0f b6       	in	r0, 0x3f	; 63
    1b04:	f8 94       	cli
    1b06:	de bf       	out	0x3e, r29	; 62
    1b08:	0f be       	out	0x3f, r0	; 63
    1b0a:	cd bf       	out	0x3d, r28	; 61
	char buffer[20];
	uint8_t buffersize=0;

	oled.clearFrame();
    1b0c:	82 e4       	ldi	r24, 0x42	; 66
    1b0e:	93 e0       	ldi	r25, 0x03	; 3
    1b10:	0e 94 ed 02 	call	0x5da	; 0x5da <_ZN7Display10clearFrameEv>
	buffersize=sprintf(buffer,"1:Uhr");
    1b14:	86 e0       	ldi	r24, 0x06	; 6
    1b16:	e3 ee       	ldi	r30, 0xE3	; 227
    1b18:	f1 e0       	ldi	r31, 0x01	; 1
    1b1a:	8e 01       	movw	r16, r28
    1b1c:	0f 5f       	subi	r16, 0xFF	; 255
    1b1e:	1f 4f       	sbci	r17, 0xFF	; 255
    1b20:	d8 01       	movw	r26, r16
    1b22:	01 90       	ld	r0, Z+
    1b24:	0d 92       	st	X+, r0
    1b26:	8a 95       	dec	r24
    1b28:	e1 f7       	brne	.-8      	; 0x1b22 <_Z9menue_uhrv+0x36>
    1b2a:	e0 2e       	mov	r14, r16
    1b2c:	f1 2e       	mov	r15, r17
    1b2e:	68 01       	movw	r12, r16
    1b30:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,0*charhighte);}
    1b32:	f6 01       	movw	r30, r12
    1b34:	61 91       	ld	r22, Z+
    1b36:	6f 01       	movw	r12, r30
    1b38:	20 e0       	ldi	r18, 0x00	; 0
    1b3a:	41 2f       	mov	r20, r17
    1b3c:	82 e4       	ldi	r24, 0x42	; 66
    1b3e:	93 e0       	ldi	r25, 0x03	; 3
    1b40:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    1b44:	1a 5f       	subi	r17, 0xFA	; 250
    1b46:	1e 31       	cpi	r17, 0x1E	; 30
    1b48:	a1 f7       	brne	.-24     	; 0x1b32 <_Z9menue_uhrv+0x46>
	buffersize=sprintf(buffer,"2:Stoppuhr");
    1b4a:	8b e0       	ldi	r24, 0x0B	; 11
    1b4c:	e9 ee       	ldi	r30, 0xE9	; 233
    1b4e:	f1 e0       	ldi	r31, 0x01	; 1
    1b50:	de 01       	movw	r26, r28
    1b52:	11 96       	adiw	r26, 0x01	; 1
    1b54:	01 90       	ld	r0, Z+
    1b56:	0d 92       	st	X+, r0
    1b58:	8a 95       	dec	r24
    1b5a:	e1 f7       	brne	.-8      	; 0x1b54 <_Z9menue_uhrv+0x68>
    1b5c:	ce 2c       	mov	r12, r14
    1b5e:	df 2c       	mov	r13, r15
    1b60:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,1*charhighte);}
    1b62:	f6 01       	movw	r30, r12
    1b64:	61 91       	ld	r22, Z+
    1b66:	6f 01       	movw	r12, r30
    1b68:	28 e0       	ldi	r18, 0x08	; 8
    1b6a:	41 2f       	mov	r20, r17
    1b6c:	82 e4       	ldi	r24, 0x42	; 66
    1b6e:	93 e0       	ldi	r25, 0x03	; 3
    1b70:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    1b74:	1a 5f       	subi	r17, 0xFA	; 250
    1b76:	1c 33       	cpi	r17, 0x3C	; 60
    1b78:	a1 f7       	brne	.-24     	; 0x1b62 <_Z9menue_uhrv+0x76>
	buffersize=sprintf(buffer,"3:Timer");
    1b7a:	88 e0       	ldi	r24, 0x08	; 8
    1b7c:	e4 ef       	ldi	r30, 0xF4	; 244
    1b7e:	f1 e0       	ldi	r31, 0x01	; 1
    1b80:	de 01       	movw	r26, r28
    1b82:	11 96       	adiw	r26, 0x01	; 1
    1b84:	01 90       	ld	r0, Z+
    1b86:	0d 92       	st	X+, r0
    1b88:	8a 95       	dec	r24
    1b8a:	e1 f7       	brne	.-8      	; 0x1b84 <_Z9menue_uhrv+0x98>
    1b8c:	ce 2c       	mov	r12, r14
    1b8e:	df 2c       	mov	r13, r15
    1b90:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,2*charhighte);}
    1b92:	f6 01       	movw	r30, r12
    1b94:	61 91       	ld	r22, Z+
    1b96:	6f 01       	movw	r12, r30
    1b98:	20 e1       	ldi	r18, 0x10	; 16
    1b9a:	41 2f       	mov	r20, r17
    1b9c:	82 e4       	ldi	r24, 0x42	; 66
    1b9e:	93 e0       	ldi	r25, 0x03	; 3
    1ba0:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    1ba4:	1a 5f       	subi	r17, 0xFA	; 250
    1ba6:	1a 32       	cpi	r17, 0x2A	; 42
    1ba8:	a1 f7       	brne	.-24     	; 0x1b92 <_Z9menue_uhrv+0xa6>
	buffersize=sprintf(buffer,"4:Alarm");
    1baa:	88 e0       	ldi	r24, 0x08	; 8
    1bac:	ec ef       	ldi	r30, 0xFC	; 252
    1bae:	f1 e0       	ldi	r31, 0x01	; 1
    1bb0:	de 01       	movw	r26, r28
    1bb2:	11 96       	adiw	r26, 0x01	; 1
    1bb4:	01 90       	ld	r0, Z+
    1bb6:	0d 92       	st	X+, r0
    1bb8:	8a 95       	dec	r24
    1bba:	e1 f7       	brne	.-8      	; 0x1bb4 <_Z9menue_uhrv+0xc8>
    1bbc:	ce 2c       	mov	r12, r14
    1bbe:	df 2c       	mov	r13, r15
    1bc0:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,3*charhighte);}
    1bc2:	f6 01       	movw	r30, r12
    1bc4:	61 91       	ld	r22, Z+
    1bc6:	6f 01       	movw	r12, r30
    1bc8:	28 e1       	ldi	r18, 0x18	; 24
    1bca:	41 2f       	mov	r20, r17
    1bcc:	82 e4       	ldi	r24, 0x42	; 66
    1bce:	93 e0       	ldi	r25, 0x03	; 3
    1bd0:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    1bd4:	1a 5f       	subi	r17, 0xFA	; 250
    1bd6:	1a 32       	cpi	r17, 0x2A	; 42
    1bd8:	a1 f7       	brne	.-24     	; 0x1bc2 <_Z9menue_uhrv+0xd6>
	buffersize=sprintf(buffer,"5:Uhr gross");
    1bda:	8c e0       	ldi	r24, 0x0C	; 12
    1bdc:	e4 e0       	ldi	r30, 0x04	; 4
    1bde:	f2 e0       	ldi	r31, 0x02	; 2
    1be0:	de 01       	movw	r26, r28
    1be2:	11 96       	adiw	r26, 0x01	; 1
    1be4:	01 90       	ld	r0, Z+
    1be6:	0d 92       	st	X+, r0
    1be8:	8a 95       	dec	r24
    1bea:	e1 f7       	brne	.-8      	; 0x1be4 <_Z9menue_uhrv+0xf8>
    1bec:	ce 2c       	mov	r12, r14
    1bee:	df 2c       	mov	r13, r15
    1bf0:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,4*charhighte);}
    1bf2:	f6 01       	movw	r30, r12
    1bf4:	61 91       	ld	r22, Z+
    1bf6:	6f 01       	movw	r12, r30
    1bf8:	20 e2       	ldi	r18, 0x20	; 32
    1bfa:	41 2f       	mov	r20, r17
    1bfc:	82 e4       	ldi	r24, 0x42	; 66
    1bfe:	93 e0       	ldi	r25, 0x03	; 3
    1c00:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    1c04:	1a 5f       	subi	r17, 0xFA	; 250
    1c06:	12 34       	cpi	r17, 0x42	; 66
    1c08:	a1 f7       	brne	.-24     	; 0x1bf2 <_Z9menue_uhrv+0x106>
	buffersize=sprintf(buffer,"6:Wecker");
    1c0a:	89 e0       	ldi	r24, 0x09	; 9
    1c0c:	e0 e1       	ldi	r30, 0x10	; 16
    1c0e:	f2 e0       	ldi	r31, 0x02	; 2
    1c10:	de 01       	movw	r26, r28
    1c12:	11 96       	adiw	r26, 0x01	; 1
    1c14:	01 90       	ld	r0, Z+
    1c16:	0d 92       	st	X+, r0
    1c18:	8a 95       	dec	r24
    1c1a:	e1 f7       	brne	.-8      	; 0x1c14 <_Z9menue_uhrv+0x128>
    1c1c:	ce 2c       	mov	r12, r14
    1c1e:	df 2c       	mov	r13, r15
    1c20:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,5*charhighte);}
    1c22:	f6 01       	movw	r30, r12
    1c24:	61 91       	ld	r22, Z+
    1c26:	6f 01       	movw	r12, r30
    1c28:	28 e2       	ldi	r18, 0x28	; 40
    1c2a:	41 2f       	mov	r20, r17
    1c2c:	82 e4       	ldi	r24, 0x42	; 66
    1c2e:	93 e0       	ldi	r25, 0x03	; 3
    1c30:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    1c34:	1a 5f       	subi	r17, 0xFA	; 250
    1c36:	10 33       	cpi	r17, 0x30	; 48
    1c38:	a1 f7       	brne	.-24     	; 0x1c22 <_Z9menue_uhrv+0x136>
	//buffersize=sprintf(buffer,"7:Uhr einstellen");
	//for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,6*charhighte);}
}
    1c3a:	64 96       	adiw	r28, 0x14	; 20
    1c3c:	0f b6       	in	r0, 0x3f	; 63
    1c3e:	f8 94       	cli
    1c40:	de bf       	out	0x3e, r29	; 62
    1c42:	0f be       	out	0x3f, r0	; 63
    1c44:	cd bf       	out	0x3d, r28	; 61
    1c46:	df 91       	pop	r29
    1c48:	cf 91       	pop	r28
    1c4a:	1f 91       	pop	r17
    1c4c:	0f 91       	pop	r16
    1c4e:	ff 90       	pop	r15
    1c50:	ef 90       	pop	r14
    1c52:	df 90       	pop	r13
    1c54:	cf 90       	pop	r12
    1c56:	08 95       	ret

00001c58 <_Z11uhranzeigenv>:

void uhranzeigen(){
    1c58:	df 92       	push	r13
    1c5a:	ef 92       	push	r14
    1c5c:	ff 92       	push	r15
    1c5e:	0f 93       	push	r16
    1c60:	1f 93       	push	r17
    1c62:	cf 93       	push	r28
    1c64:	df 93       	push	r29
    1c66:	cd b7       	in	r28, 0x3d	; 61
    1c68:	de b7       	in	r29, 0x3e	; 62
    1c6a:	64 97       	sbiw	r28, 0x14	; 20
    1c6c:	0f b6       	in	r0, 0x3f	; 63
    1c6e:	f8 94       	cli
    1c70:	de bf       	out	0x3e, r29	; 62
    1c72:	0f be       	out	0x3f, r0	; 63
    1c74:	cd bf       	out	0x3d, r28	; 61
	Baro.READ_Temperature();
    1c76:	8f e2       	ldi	r24, 0x2F	; 47
    1c78:	93 e0       	ldi	r25, 0x03	; 3
    1c7a:	0e 94 dd 24 	call	0x49ba	; 0x49ba <_ZN8Pressure16READ_TemperatureEv>
	uint8_t buffersize;
	char Buffer[20];
	oled.clearFrame();
    1c7e:	82 e4       	ldi	r24, 0x42	; 66
    1c80:	93 e0       	ldi	r25, 0x03	; 3
    1c82:	0e 94 ed 02 	call	0x5da	; 0x5da <_ZN7Display10clearFrameEv>
	oled.analog(rtc.Stunden,rtc.Minuten,rtc.Sekunden,1);
    1c86:	01 e0       	ldi	r16, 0x01	; 1
    1c88:	20 91 8b 07 	lds	r18, 0x078B
    1c8c:	40 91 8a 07 	lds	r20, 0x078A
    1c90:	60 91 89 07 	lds	r22, 0x0789
    1c94:	82 e4       	ldi	r24, 0x42	; 66
    1c96:	93 e0       	ldi	r25, 0x03	; 3
    1c98:	0e 94 9c 06 	call	0xd38	; 0xd38 <_ZN7Display6analogEhhhh>
    1c9c:	0f 2e       	mov	r0, r31
    1c9e:	f9 e7       	ldi	r31, 0x79	; 121
    1ca0:	ef 2e       	mov	r14, r31
    1ca2:	f7 e0       	ldi	r31, 0x07	; 7
    1ca4:	ff 2e       	mov	r15, r31
    1ca6:	f0 2d       	mov	r31, r0
    1ca8:	11 e4       	ldi	r17, 0x41	; 65
	for(uint8_t i=0;i<bitsderrtc;i++){oled.draw_ASCI(rtc.msg_uhr[i],65+i*charsize,0*charhighte);}
    1caa:	f7 01       	movw	r30, r14
    1cac:	61 91       	ld	r22, Z+
    1cae:	7f 01       	movw	r14, r30
    1cb0:	20 e0       	ldi	r18, 0x00	; 0
    1cb2:	41 2f       	mov	r20, r17
    1cb4:	82 e4       	ldi	r24, 0x42	; 66
    1cb6:	93 e0       	ldi	r25, 0x03	; 3
    1cb8:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    1cbc:	1a 5f       	subi	r17, 0xFA	; 250
    1cbe:	11 37       	cpi	r17, 0x71	; 113
    1cc0:	a1 f7       	brne	.-24     	; 0x1caa <_Z11uhranzeigenv+0x52>
    1cc2:	0f 2e       	mov	r0, r31
    1cc4:	f1 e8       	ldi	r31, 0x81	; 129
    1cc6:	ef 2e       	mov	r14, r31
    1cc8:	f7 e0       	ldi	r31, 0x07	; 7
    1cca:	ff 2e       	mov	r15, r31
    1ccc:	f0 2d       	mov	r31, r0
    1cce:	11 e4       	ldi	r17, 0x41	; 65
	for(uint8_t i=0;i<bitsderrtc;i++){oled.draw_ASCI(rtc.msg_dat[i],65+i*charsize,7*charhighte);}
    1cd0:	f7 01       	movw	r30, r14
    1cd2:	61 91       	ld	r22, Z+
    1cd4:	7f 01       	movw	r14, r30
    1cd6:	28 e3       	ldi	r18, 0x38	; 56
    1cd8:	41 2f       	mov	r20, r17
    1cda:	82 e4       	ldi	r24, 0x42	; 66
    1cdc:	93 e0       	ldi	r25, 0x03	; 3
    1cde:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    1ce2:	1a 5f       	subi	r17, 0xFA	; 250
    1ce4:	11 37       	cpi	r17, 0x71	; 113
    1ce6:	a1 f7       	brne	.-24     	; 0x1cd0 <_Z11uhranzeigenv+0x78>
	buffersize=sprintf(Buffer,"%i%%",Batteriestatus());
    1ce8:	0e 94 3b 09 	call	0x1276	; 0x1276 <_Z14Batteriestatusv>
    1cec:	28 2f       	mov	r18, r24
    1cee:	33 27       	eor	r19, r19
    1cf0:	27 fd       	sbrc	r18, 7
    1cf2:	30 95       	com	r19
    1cf4:	3f 93       	push	r19
    1cf6:	8f 93       	push	r24
    1cf8:	81 e3       	ldi	r24, 0x31	; 49
    1cfa:	91 e0       	ldi	r25, 0x01	; 1
    1cfc:	9f 93       	push	r25
    1cfe:	8f 93       	push	r24
    1d00:	ce 01       	movw	r24, r28
    1d02:	01 96       	adiw	r24, 0x01	; 1
    1d04:	9f 93       	push	r25
    1d06:	8f 93       	push	r24
    1d08:	0e 94 46 2f 	call	0x5e8c	; 0x5e8c <sprintf>
	for(uint8_t i=0;i<buffersize;i++){
    1d0c:	0f 90       	pop	r0
    1d0e:	0f 90       	pop	r0
    1d10:	0f 90       	pop	r0
    1d12:	0f 90       	pop	r0
    1d14:	0f 90       	pop	r0
    1d16:	0f 90       	pop	r0
    1d18:	88 23       	and	r24, r24
    1d1a:	59 f1       	breq	.+86     	; 0x1d72 <_Z11uhranzeigenv+0x11a>
    1d1c:	8e 01       	movw	r16, r28
    1d1e:	0f 5f       	subi	r16, 0xFF	; 255
    1d20:	1f 4f       	sbci	r17, 0xFF	; 255
    1d22:	81 50       	subi	r24, 0x01	; 1
    1d24:	68 94       	set
    1d26:	ee 24       	eor	r14, r14
    1d28:	e1 f8       	bld	r14, 1
    1d2a:	f1 2c       	mov	r15, r1
    1d2c:	ec 0e       	add	r14, r28
    1d2e:	fd 1e       	adc	r15, r29
    1d30:	e8 0e       	add	r14, r24
    1d32:	f1 1c       	adc	r15, r1
    1d34:	0f 2e       	mov	r0, r31
    1d36:	f9 e4       	ldi	r31, 0x49	; 73
    1d38:	df 2e       	mov	r13, r31
    1d3a:	f0 2d       	mov	r31, r0
		if (Buffer[i]=='%' || Buffer[i]=='-')
    1d3c:	f8 01       	movw	r30, r16
    1d3e:	61 91       	ld	r22, Z+
    1d40:	8f 01       	movw	r16, r30
    1d42:	86 2f       	mov	r24, r22
    1d44:	87 7f       	andi	r24, 0xF7	; 247
    1d46:	85 32       	cpi	r24, 0x25	; 37
    1d48:	39 f4       	brne	.+14     	; 0x1d58 <_Z11uhranzeigenv+0x100>
		{
			oled.draw_ASCI(Buffer[i],73+i*numbersmalsize,3*charhighte);
    1d4a:	28 e1       	ldi	r18, 0x18	; 24
    1d4c:	4d 2d       	mov	r20, r13
    1d4e:	82 e4       	ldi	r24, 0x42	; 66
    1d50:	93 e0       	ldi	r25, 0x03	; 3
    1d52:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    1d56:	08 c0       	rjmp	.+16     	; 0x1d68 <_Z11uhranzeigenv+0x110>
		}
		else{
			oled.draw_number16x16(Buffer[i]-'0',70+i*numbersmalsize,2.5*charhighte);
    1d58:	60 53       	subi	r22, 0x30	; 48
    1d5a:	24 e1       	ldi	r18, 0x14	; 20
    1d5c:	4d ef       	ldi	r20, 0xFD	; 253
    1d5e:	4d 0d       	add	r20, r13
    1d60:	82 e4       	ldi	r24, 0x42	; 66
    1d62:	93 e0       	ldi	r25, 0x03	; 3
    1d64:	0e 94 26 06 	call	0xc4c	; 0xc4c <_ZN7Display16draw_number16x16Ehhh>
    1d68:	f0 e1       	ldi	r31, 0x10	; 16
    1d6a:	df 0e       	add	r13, r31
	oled.clearFrame();
	oled.analog(rtc.Stunden,rtc.Minuten,rtc.Sekunden,1);
	for(uint8_t i=0;i<bitsderrtc;i++){oled.draw_ASCI(rtc.msg_uhr[i],65+i*charsize,0*charhighte);}
	for(uint8_t i=0;i<bitsderrtc;i++){oled.draw_ASCI(rtc.msg_dat[i],65+i*charsize,7*charhighte);}
	buffersize=sprintf(Buffer,"%i%%",Batteriestatus());
	for(uint8_t i=0;i<buffersize;i++){
    1d6c:	0e 15       	cp	r16, r14
    1d6e:	1f 05       	cpc	r17, r15
    1d70:	29 f7       	brne	.-54     	; 0x1d3c <_Z11uhranzeigenv+0xe4>
		}
		else{
			oled.draw_number16x16(Buffer[i]-'0',70+i*numbersmalsize,2.5*charhighte);
		}
	}
	buffersize=sprintf(Buffer,"%.1f C",(double)Baro.Tempera);
    1d72:	e3 e3       	ldi	r30, 0x33	; 51
    1d74:	f3 e0       	ldi	r31, 0x03	; 3
    1d76:	83 81       	ldd	r24, Z+3	; 0x03
    1d78:	8f 93       	push	r24
    1d7a:	82 81       	ldd	r24, Z+2	; 0x02
    1d7c:	8f 93       	push	r24
    1d7e:	81 81       	ldd	r24, Z+1	; 0x01
    1d80:	8f 93       	push	r24
    1d82:	80 81       	ld	r24, Z
    1d84:	8f 93       	push	r24
    1d86:	89 e1       	ldi	r24, 0x19	; 25
    1d88:	92 e0       	ldi	r25, 0x02	; 2
    1d8a:	9f 93       	push	r25
    1d8c:	8f 93       	push	r24
    1d8e:	ce 01       	movw	r24, r28
    1d90:	01 96       	adiw	r24, 0x01	; 1
    1d92:	9f 93       	push	r25
    1d94:	8f 93       	push	r24
    1d96:	0e 94 46 2f 	call	0x5e8c	; 0x5e8c <sprintf>
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(Buffer[i],70+i*charsize,5*charhighte);}
    1d9a:	0f b6       	in	r0, 0x3f	; 63
    1d9c:	f8 94       	cli
    1d9e:	de bf       	out	0x3e, r29	; 62
    1da0:	0f be       	out	0x3f, r0	; 63
    1da2:	cd bf       	out	0x3d, r28	; 61
    1da4:	88 23       	and	r24, r24
    1da6:	f1 f0       	breq	.+60     	; 0x1de4 <_Z11uhranzeigenv+0x18c>
    1da8:	8e 01       	movw	r16, r28
    1daa:	0f 5f       	subi	r16, 0xFF	; 255
    1dac:	1f 4f       	sbci	r17, 0xFF	; 255
    1dae:	81 50       	subi	r24, 0x01	; 1
    1db0:	68 94       	set
    1db2:	ee 24       	eor	r14, r14
    1db4:	e1 f8       	bld	r14, 1
    1db6:	f1 2c       	mov	r15, r1
    1db8:	ec 0e       	add	r14, r28
    1dba:	fd 1e       	adc	r15, r29
    1dbc:	e8 0e       	add	r14, r24
    1dbe:	f1 1c       	adc	r15, r1
    1dc0:	0f 2e       	mov	r0, r31
    1dc2:	f6 e4       	ldi	r31, 0x46	; 70
    1dc4:	df 2e       	mov	r13, r31
    1dc6:	f0 2d       	mov	r31, r0
    1dc8:	f8 01       	movw	r30, r16
    1dca:	61 91       	ld	r22, Z+
    1dcc:	8f 01       	movw	r16, r30
    1dce:	28 e2       	ldi	r18, 0x28	; 40
    1dd0:	4d 2d       	mov	r20, r13
    1dd2:	82 e4       	ldi	r24, 0x42	; 66
    1dd4:	93 e0       	ldi	r25, 0x03	; 3
    1dd6:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    1dda:	f6 e0       	ldi	r31, 0x06	; 6
    1ddc:	df 0e       	add	r13, r31
    1dde:	0e 15       	cp	r16, r14
    1de0:	1f 05       	cpc	r17, r15
    1de2:	91 f7       	brne	.-28     	; 0x1dc8 <_Z11uhranzeigenv+0x170>
}
    1de4:	64 96       	adiw	r28, 0x14	; 20
    1de6:	0f b6       	in	r0, 0x3f	; 63
    1de8:	f8 94       	cli
    1dea:	de bf       	out	0x3e, r29	; 62
    1dec:	0f be       	out	0x3f, r0	; 63
    1dee:	cd bf       	out	0x3d, r28	; 61
    1df0:	df 91       	pop	r29
    1df2:	cf 91       	pop	r28
    1df4:	1f 91       	pop	r17
    1df6:	0f 91       	pop	r16
    1df8:	ff 90       	pop	r15
    1dfa:	ef 90       	pop	r14
    1dfc:	df 90       	pop	r13
    1dfe:	08 95       	ret

00001e00 <_Z14uhranzeigenminv>:

void uhranzeigenmin(){
    1e00:	0f 93       	push	r16
    1e02:	1f 93       	push	r17
    1e04:	cf 93       	push	r28
    1e06:	df 93       	push	r29
	oled.clearFrame();
    1e08:	82 e4       	ldi	r24, 0x42	; 66
    1e0a:	93 e0       	ldi	r25, 0x03	; 3
    1e0c:	0e 94 ed 02 	call	0x5da	; 0x5da <_ZN7Display10clearFrameEv>
	header(2);
    1e10:	82 e0       	ldi	r24, 0x02	; 2
    1e12:	0e 94 19 0a 	call	0x1432	; 0x1432 <_Z6headerh>
	oled.analog(rtc.Stunden,rtc.Minuten,rtc.Sekunden,0);
    1e16:	00 e0       	ldi	r16, 0x00	; 0
    1e18:	20 91 8b 07 	lds	r18, 0x078B
    1e1c:	40 91 8a 07 	lds	r20, 0x078A
    1e20:	60 91 89 07 	lds	r22, 0x0789
    1e24:	82 e4       	ldi	r24, 0x42	; 66
    1e26:	93 e0       	ldi	r25, 0x03	; 3
    1e28:	0e 94 9c 06 	call	0xd38	; 0xd38 <_ZN7Display6analogEhhhh>
    1e2c:	c9 e7       	ldi	r28, 0x79	; 121
    1e2e:	d7 e0       	ldi	r29, 0x07	; 7
    1e30:	11 e4       	ldi	r17, 0x41	; 65
	for(uint8_t i=0;i<(bitsderrtc-3);i++){oled.draw_ASCI(rtc.msg_uhr[i],65+i*charsize,0*charhighte);}
    1e32:	69 91       	ld	r22, Y+
    1e34:	20 e0       	ldi	r18, 0x00	; 0
    1e36:	41 2f       	mov	r20, r17
    1e38:	82 e4       	ldi	r24, 0x42	; 66
    1e3a:	93 e0       	ldi	r25, 0x03	; 3
    1e3c:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    1e40:	1a 5f       	subi	r17, 0xFA	; 250
    1e42:	1f 35       	cpi	r17, 0x5F	; 95
    1e44:	b1 f7       	brne	.-20     	; 0x1e32 <_Z14uhranzeigenminv+0x32>
    1e46:	c1 e8       	ldi	r28, 0x81	; 129
    1e48:	d7 e0       	ldi	r29, 0x07	; 7
    1e4a:	11 e4       	ldi	r17, 0x41	; 65
	for(uint8_t i=0;i<bitsderrtc;i++){oled.draw_ASCI(rtc.msg_dat[i],65+i*charsize,7*charhighte);}
    1e4c:	69 91       	ld	r22, Y+
    1e4e:	28 e3       	ldi	r18, 0x38	; 56
    1e50:	41 2f       	mov	r20, r17
    1e52:	82 e4       	ldi	r24, 0x42	; 66
    1e54:	93 e0       	ldi	r25, 0x03	; 3
    1e56:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    1e5a:	1a 5f       	subi	r17, 0xFA	; 250
    1e5c:	11 37       	cpi	r17, 0x71	; 113
    1e5e:	b1 f7       	brne	.-20     	; 0x1e4c <_Z14uhranzeigenminv+0x4c>
	//show hours and minutes in big numbers
	oled.draw_number16x16(rtc.msg_uhr[0]-'0',70,1.66*charhighte);
    1e60:	60 91 79 07 	lds	r22, 0x0779
    1e64:	60 53       	subi	r22, 0x30	; 48
    1e66:	2d e0       	ldi	r18, 0x0D	; 13
    1e68:	46 e4       	ldi	r20, 0x46	; 70
    1e6a:	82 e4       	ldi	r24, 0x42	; 66
    1e6c:	93 e0       	ldi	r25, 0x03	; 3
    1e6e:	0e 94 26 06 	call	0xc4c	; 0xc4c <_ZN7Display16draw_number16x16Ehhh>
	oled.draw_number16x16(rtc.msg_uhr[1]-'0',70+numbersmalsize,1.66*charhighte);
    1e72:	60 91 7a 07 	lds	r22, 0x077A
    1e76:	60 53       	subi	r22, 0x30	; 48
    1e78:	2d e0       	ldi	r18, 0x0D	; 13
    1e7a:	46 e5       	ldi	r20, 0x56	; 86
    1e7c:	82 e4       	ldi	r24, 0x42	; 66
    1e7e:	93 e0       	ldi	r25, 0x03	; 3
    1e80:	0e 94 26 06 	call	0xc4c	; 0xc4c <_ZN7Display16draw_number16x16Ehhh>
	oled.draw_number16x16(rtc.msg_uhr[3]-'0',70,2.33*charhighte+numbersmalhight);
    1e84:	60 91 7c 07 	lds	r22, 0x077C
    1e88:	60 53       	subi	r22, 0x30	; 48
    1e8a:	22 e2       	ldi	r18, 0x22	; 34
    1e8c:	46 e4       	ldi	r20, 0x46	; 70
    1e8e:	82 e4       	ldi	r24, 0x42	; 66
    1e90:	93 e0       	ldi	r25, 0x03	; 3
    1e92:	0e 94 26 06 	call	0xc4c	; 0xc4c <_ZN7Display16draw_number16x16Ehhh>
	oled.draw_number16x16(rtc.msg_uhr[4]-'0',70+numbersmalsize,2.33*charhighte+numbersmalhight);
    1e96:	60 91 7d 07 	lds	r22, 0x077D
    1e9a:	60 53       	subi	r22, 0x30	; 48
    1e9c:	22 e2       	ldi	r18, 0x22	; 34
    1e9e:	46 e5       	ldi	r20, 0x56	; 86
    1ea0:	82 e4       	ldi	r24, 0x42	; 66
    1ea2:	93 e0       	ldi	r25, 0x03	; 3
    1ea4:	0e 94 26 06 	call	0xc4c	; 0xc4c <_ZN7Display16draw_number16x16Ehhh>
		//}
		//else{
			//oled.draw_number16x16(Buffer[i]-'0',70+i*numbersmalsize,3*charhighte);
		//}
	//}
}
    1ea8:	df 91       	pop	r29
    1eaa:	cf 91       	pop	r28
    1eac:	1f 91       	pop	r17
    1eae:	0f 91       	pop	r16
    1eb0:	08 95       	ret

00001eb2 <_Z13Weckeranzeigev>:

void Weckeranzeige(){
    1eb2:	1f 93       	push	r17
    1eb4:	cf 93       	push	r28
    1eb6:	df 93       	push	r29
	oled.clearFrame();
    1eb8:	82 e4       	ldi	r24, 0x42	; 66
    1eba:	93 e0       	ldi	r25, 0x03	; 3
    1ebc:	0e 94 ed 02 	call	0x5da	; 0x5da <_ZN7Display10clearFrameEv>
	bottom(1);
    1ec0:	81 e0       	ldi	r24, 0x01	; 1
    1ec2:	0e 94 01 0b 	call	0x1602	; 0x1602 <_Z6bottomh>
	header(1);
    1ec6:	81 e0       	ldi	r24, 0x01	; 1
    1ec8:	0e 94 19 0a 	call	0x1432	; 0x1432 <_Z6headerh>
	//Uhr
	oled.draw_number16x16(rtc.msg_uhr[0]-'0',5,1.66*charhighte);
    1ecc:	60 91 79 07 	lds	r22, 0x0779
    1ed0:	60 53       	subi	r22, 0x30	; 48
    1ed2:	2d e0       	ldi	r18, 0x0D	; 13
    1ed4:	45 e0       	ldi	r20, 0x05	; 5
    1ed6:	82 e4       	ldi	r24, 0x42	; 66
    1ed8:	93 e0       	ldi	r25, 0x03	; 3
    1eda:	0e 94 26 06 	call	0xc4c	; 0xc4c <_ZN7Display16draw_number16x16Ehhh>
	oled.draw_number16x16(rtc.msg_uhr[1]-'0',5+numbersmalsize,1.66*charhighte);
    1ede:	60 91 7a 07 	lds	r22, 0x077A
    1ee2:	60 53       	subi	r22, 0x30	; 48
    1ee4:	2d e0       	ldi	r18, 0x0D	; 13
    1ee6:	45 e1       	ldi	r20, 0x15	; 21
    1ee8:	82 e4       	ldi	r24, 0x42	; 66
    1eea:	93 e0       	ldi	r25, 0x03	; 3
    1eec:	0e 94 26 06 	call	0xc4c	; 0xc4c <_ZN7Display16draw_number16x16Ehhh>
	oled.draw_number16x16(rtc.msg_uhr[3]-'0',5,2.33*charhighte+numbersmalhight);
    1ef0:	60 91 7c 07 	lds	r22, 0x077C
    1ef4:	60 53       	subi	r22, 0x30	; 48
    1ef6:	22 e2       	ldi	r18, 0x22	; 34
    1ef8:	45 e0       	ldi	r20, 0x05	; 5
    1efa:	82 e4       	ldi	r24, 0x42	; 66
    1efc:	93 e0       	ldi	r25, 0x03	; 3
    1efe:	0e 94 26 06 	call	0xc4c	; 0xc4c <_ZN7Display16draw_number16x16Ehhh>
	oled.draw_number16x16(rtc.msg_uhr[4]-'0',5+numbersmalsize,2.33*charhighte+numbersmalhight);
    1f02:	60 91 7d 07 	lds	r22, 0x077D
    1f06:	60 53       	subi	r22, 0x30	; 48
    1f08:	22 e2       	ldi	r18, 0x22	; 34
    1f0a:	45 e1       	ldi	r20, 0x15	; 21
    1f0c:	82 e4       	ldi	r24, 0x42	; 66
    1f0e:	93 e0       	ldi	r25, 0x03	; 3
    1f10:	0e 94 26 06 	call	0xc4c	; 0xc4c <_ZN7Display16draw_number16x16Ehhh>
	
	//Weckerzeit
	oled.draw_number16x16(rtc.WStunden/10,70,1.66*charhighte);
    1f14:	c3 e9       	ldi	r28, 0x93	; 147
    1f16:	d7 e0       	ldi	r29, 0x07	; 7
    1f18:	68 81       	ld	r22, Y
    1f1a:	1d ec       	ldi	r17, 0xCD	; 205
    1f1c:	61 9f       	mul	r22, r17
    1f1e:	61 2d       	mov	r22, r1
    1f20:	11 24       	eor	r1, r1
    1f22:	66 95       	lsr	r22
    1f24:	66 95       	lsr	r22
    1f26:	66 95       	lsr	r22
    1f28:	2d e0       	ldi	r18, 0x0D	; 13
    1f2a:	46 e4       	ldi	r20, 0x46	; 70
    1f2c:	82 e4       	ldi	r24, 0x42	; 66
    1f2e:	93 e0       	ldi	r25, 0x03	; 3
    1f30:	0e 94 26 06 	call	0xc4c	; 0xc4c <_ZN7Display16draw_number16x16Ehhh>
	oled.draw_number16x16(rtc.WStunden%10,70+numbersmalsize,1.66*charhighte);
    1f34:	68 81       	ld	r22, Y
    1f36:	61 9f       	mul	r22, r17
    1f38:	81 2d       	mov	r24, r1
    1f3a:	11 24       	eor	r1, r1
    1f3c:	86 95       	lsr	r24
    1f3e:	86 95       	lsr	r24
    1f40:	86 95       	lsr	r24
    1f42:	88 0f       	add	r24, r24
    1f44:	98 2f       	mov	r25, r24
    1f46:	99 0f       	add	r25, r25
    1f48:	99 0f       	add	r25, r25
    1f4a:	89 0f       	add	r24, r25
    1f4c:	68 1b       	sub	r22, r24
    1f4e:	2d e0       	ldi	r18, 0x0D	; 13
    1f50:	46 e5       	ldi	r20, 0x56	; 86
    1f52:	82 e4       	ldi	r24, 0x42	; 66
    1f54:	93 e0       	ldi	r25, 0x03	; 3
    1f56:	0e 94 26 06 	call	0xc4c	; 0xc4c <_ZN7Display16draw_number16x16Ehhh>
	oled.draw_number16x16(rtc.WMinuten/10,70,2.33*charhighte+numbersmalhight);
    1f5a:	c2 e9       	ldi	r28, 0x92	; 146
    1f5c:	d7 e0       	ldi	r29, 0x07	; 7
    1f5e:	68 81       	ld	r22, Y
    1f60:	61 9f       	mul	r22, r17
    1f62:	61 2d       	mov	r22, r1
    1f64:	11 24       	eor	r1, r1
    1f66:	66 95       	lsr	r22
    1f68:	66 95       	lsr	r22
    1f6a:	66 95       	lsr	r22
    1f6c:	22 e2       	ldi	r18, 0x22	; 34
    1f6e:	46 e4       	ldi	r20, 0x46	; 70
    1f70:	82 e4       	ldi	r24, 0x42	; 66
    1f72:	93 e0       	ldi	r25, 0x03	; 3
    1f74:	0e 94 26 06 	call	0xc4c	; 0xc4c <_ZN7Display16draw_number16x16Ehhh>
	oled.draw_number16x16(rtc.WMinuten%10,70+numbersmalsize,2.33*charhighte+numbersmalhight);
    1f78:	68 81       	ld	r22, Y
    1f7a:	61 9f       	mul	r22, r17
    1f7c:	11 2d       	mov	r17, r1
    1f7e:	11 24       	eor	r1, r1
    1f80:	16 95       	lsr	r17
    1f82:	16 95       	lsr	r17
    1f84:	16 95       	lsr	r17
    1f86:	11 0f       	add	r17, r17
    1f88:	81 2f       	mov	r24, r17
    1f8a:	88 0f       	add	r24, r24
    1f8c:	88 0f       	add	r24, r24
    1f8e:	18 0f       	add	r17, r24
    1f90:	61 1b       	sub	r22, r17
    1f92:	22 e2       	ldi	r18, 0x22	; 34
    1f94:	46 e5       	ldi	r20, 0x56	; 86
    1f96:	82 e4       	ldi	r24, 0x42	; 66
    1f98:	93 e0       	ldi	r25, 0x03	; 3
    1f9a:	0e 94 26 06 	call	0xc4c	; 0xc4c <_ZN7Display16draw_number16x16Ehhh>
	
	//Weckeraktiv Zeichen
	if ((rtc.interupts&(1<<Weckerein)))
    1f9e:	80 91 91 07 	lds	r24, 0x0791
    1fa2:	83 ff       	sbrs	r24, 3
    1fa4:	07 c0       	rjmp	.+14     	; 0x1fb4 <_Z13Weckeranzeigev+0x102>
	{
		oled.draw_ASCI('o',0,0);
    1fa6:	20 e0       	ldi	r18, 0x00	; 0
    1fa8:	40 e0       	ldi	r20, 0x00	; 0
    1faa:	6f e6       	ldi	r22, 0x6F	; 111
    1fac:	82 e4       	ldi	r24, 0x42	; 66
    1fae:	93 e0       	ldi	r25, 0x03	; 3
    1fb0:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
	}
	
	//Einstellungsmoeglichekeit
	if ((anzeige&(1<<Einstellungsflag)))
    1fb4:	80 91 29 03 	lds	r24, 0x0329
    1fb8:	83 ff       	sbrs	r24, 3
    1fba:	09 c0       	rjmp	.+18     	; 0x1fce <_Z13Weckeranzeigev+0x11c>
	{
		oled.draw_ASCI(pos+'0',1*charsize,0*charhighte);
    1fbc:	60 91 28 03 	lds	r22, 0x0328
    1fc0:	60 5d       	subi	r22, 0xD0	; 208
    1fc2:	20 e0       	ldi	r18, 0x00	; 0
    1fc4:	46 e0       	ldi	r20, 0x06	; 6
    1fc6:	82 e4       	ldi	r24, 0x42	; 66
    1fc8:	93 e0       	ldi	r25, 0x03	; 3
    1fca:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
	}
}
    1fce:	df 91       	pop	r29
    1fd0:	cf 91       	pop	r28
    1fd2:	1f 91       	pop	r17
    1fd4:	08 95       	ret

00001fd6 <_Z12fahradschirmddddm>:

void fahradschirm(double winkelgeschw, double angle, double weite, double maxgeschwinsigkeit, uint32_t Zeit){
    1fd6:	2f 92       	push	r2
    1fd8:	3f 92       	push	r3
    1fda:	4f 92       	push	r4
    1fdc:	5f 92       	push	r5
    1fde:	6f 92       	push	r6
    1fe0:	7f 92       	push	r7
    1fe2:	8f 92       	push	r8
    1fe4:	9f 92       	push	r9
    1fe6:	af 92       	push	r10
    1fe8:	bf 92       	push	r11
    1fea:	cf 92       	push	r12
    1fec:	df 92       	push	r13
    1fee:	ef 92       	push	r14
    1ff0:	ff 92       	push	r15
    1ff2:	0f 93       	push	r16
    1ff4:	1f 93       	push	r17
    1ff6:	cf 93       	push	r28
    1ff8:	df 93       	push	r29
    1ffa:	cd b7       	in	r28, 0x3d	; 61
    1ffc:	de b7       	in	r29, 0x3e	; 62
    1ffe:	62 97       	sbiw	r28, 0x12	; 18
    2000:	0f b6       	in	r0, 0x3f	; 63
    2002:	f8 94       	cli
    2004:	de bf       	out	0x3e, r29	; 62
    2006:	0f be       	out	0x3f, r0	; 63
    2008:	cd bf       	out	0x3d, r28	; 61
    200a:	76 2e       	mov	r7, r22
    200c:	67 2e       	mov	r6, r23
    200e:	58 2e       	mov	r5, r24
    2010:	49 2e       	mov	r4, r25
    2012:	82 2e       	mov	r8, r18
    2014:	23 2e       	mov	r2, r19
    2016:	94 2e       	mov	r9, r20
    2018:	35 2e       	mov	r3, r21
    201a:	eb 86       	std	Y+11, r14	; 0x0b
    201c:	fc 86       	std	Y+12, r15	; 0x0c
    201e:	0d 87       	std	Y+13, r16	; 0x0d
    2020:	1e 87       	std	Y+14, r17	; 0x0e
    2022:	2f a1       	ldd	r18, Y+39	; 0x27
    2024:	2f 87       	std	Y+15, r18	; 0x0f
    2026:	38 a5       	ldd	r19, Y+40	; 0x28
    2028:	38 8b       	std	Y+16, r19	; 0x10
    202a:	89 a5       	ldd	r24, Y+41	; 0x29
    202c:	89 8b       	std	Y+17, r24	; 0x11
    202e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2030:	9a 8b       	std	Y+18, r25	; 0x12
	char buffer[10];
	uint8_t buffersize=0;
	oled.clearFrame();
    2032:	82 e4       	ldi	r24, 0x42	; 66
    2034:	93 e0       	ldi	r25, 0x03	; 3
    2036:	0e 94 ed 02 	call	0x5da	; 0x5da <_ZN7Display10clearFrameEv>
	header(0);
    203a:	80 e0       	ldi	r24, 0x00	; 0
    203c:	0e 94 19 0a 	call	0x1432	; 0x1432 <_Z6headerh>
	bottom(0);
    2040:	80 e0       	ldi	r24, 0x00	; 0
    2042:	0e 94 01 0b 	call	0x1602	; 0x1602 <_Z6bottomh>
	//Ausgabe der Geschwidigkeit
	buffersize=sprintf(buffer,"%3.1f",winkelgeschw);
    2046:	4f 92       	push	r4
    2048:	5f 92       	push	r5
    204a:	6f 92       	push	r6
    204c:	7f 92       	push	r7
    204e:	80 e2       	ldi	r24, 0x20	; 32
    2050:	92 e0       	ldi	r25, 0x02	; 2
    2052:	9f 93       	push	r25
    2054:	8f 93       	push	r24
    2056:	ce 01       	movw	r24, r28
    2058:	01 96       	adiw	r24, 0x01	; 1
    205a:	9f 93       	push	r25
    205c:	8f 93       	push	r24
    205e:	0e 94 46 2f 	call	0x5e8c	; 0x5e8c <sprintf>
	for(uint8_t i=((SSD1306_WIDTH/numbersmalsize)-buffersize-1);i<((SSD1306_WIDTH/numbersmalsize)-1);i++){
    2062:	27 e0       	ldi	r18, 0x07	; 7
    2064:	02 2f       	mov	r16, r18
    2066:	08 1b       	sub	r16, r24
    2068:	0f b6       	in	r0, 0x3f	; 63
    206a:	f8 94       	cli
    206c:	de bf       	out	0x3e, r29	; 62
    206e:	0f be       	out	0x3f, r0	; 63
    2070:	cd bf       	out	0x3d, r28	; 61
    2072:	07 30       	cpi	r16, 0x07	; 7
    2074:	18 f5       	brcc	.+70     	; 0x20bc <_Z12fahradschirmddddm+0xe6>
    2076:	10 2f       	mov	r17, r16
    2078:	12 95       	swap	r17
    207a:	10 7f       	andi	r17, 0xF0	; 240
		if(buffer[i-((SSD1306_WIDTH/numbersmalsize)-buffersize-1)]=='.'){
    207c:	7c 01       	movw	r14, r24
    207e:	ff 24       	eor	r15, r15
    2080:	e1 e0       	ldi	r30, 0x01	; 1
    2082:	f0 e0       	ldi	r31, 0x00	; 0
    2084:	ec 0f       	add	r30, r28
    2086:	fd 1f       	adc	r31, r29
    2088:	e0 0f       	add	r30, r16
    208a:	f1 1d       	adc	r31, r1
    208c:	ee 0d       	add	r30, r14
    208e:	ff 1d       	adc	r31, r15
    2090:	37 97       	sbiw	r30, 0x07	; 7
    2092:	60 81       	ld	r22, Z
    2094:	6e 32       	cpi	r22, 0x2E	; 46
    2096:	39 f4       	brne	.+14     	; 0x20a6 <_Z12fahradschirmddddm+0xd0>
			oled.draw_ASCI(buffer[i-((SSD1306_WIDTH/numbersmalsize)-buffersize-1)],i*numbersmalsize,4*charhighte);
    2098:	20 e2       	ldi	r18, 0x20	; 32
    209a:	41 2f       	mov	r20, r17
    209c:	82 e4       	ldi	r24, 0x42	; 66
    209e:	93 e0       	ldi	r25, 0x03	; 3
    20a0:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    20a4:	07 c0       	rjmp	.+14     	; 0x20b4 <_Z12fahradschirmddddm+0xde>
		}
		else{
			oled.draw_number16x16(buffer[i-((SSD1306_WIDTH/numbersmalsize)-buffersize-1)]-'0',i*numbersmalsize,3*charhighte);
    20a6:	60 53       	subi	r22, 0x30	; 48
    20a8:	28 e1       	ldi	r18, 0x18	; 24
    20aa:	41 2f       	mov	r20, r17
    20ac:	82 e4       	ldi	r24, 0x42	; 66
    20ae:	93 e0       	ldi	r25, 0x03	; 3
    20b0:	0e 94 26 06 	call	0xc4c	; 0xc4c <_ZN7Display16draw_number16x16Ehhh>
	oled.clearFrame();
	header(0);
	bottom(0);
	//Ausgabe der Geschwidigkeit
	buffersize=sprintf(buffer,"%3.1f",winkelgeschw);
	for(uint8_t i=((SSD1306_WIDTH/numbersmalsize)-buffersize-1);i<((SSD1306_WIDTH/numbersmalsize)-1);i++){
    20b4:	0f 5f       	subi	r16, 0xFF	; 255
    20b6:	10 5f       	subi	r17, 0xF0	; 240
    20b8:	07 30       	cpi	r16, 0x07	; 7
    20ba:	11 f7       	brne	.-60     	; 0x2080 <_Z12fahradschirmddddm+0xaa>
		}
		else{
			oled.draw_number16x16(buffer[i-((SSD1306_WIDTH/numbersmalsize)-buffersize-1)]-'0',i*numbersmalsize,3*charhighte);
		}
	}
	oled.draw_ASCI('k',((SSD1306_WIDTH/charsize-2)*charsize),3*charhighte);
    20bc:	28 e1       	ldi	r18, 0x18	; 24
    20be:	42 e7       	ldi	r20, 0x72	; 114
    20c0:	6b e6       	ldi	r22, 0x6B	; 107
    20c2:	82 e4       	ldi	r24, 0x42	; 66
    20c4:	93 e0       	ldi	r25, 0x03	; 3
    20c6:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
	oled.draw_ASCI('m',((SSD1306_WIDTH/charsize-1)*charsize),3*charhighte);
    20ca:	28 e1       	ldi	r18, 0x18	; 24
    20cc:	48 e7       	ldi	r20, 0x78	; 120
    20ce:	6d e6       	ldi	r22, 0x6D	; 109
    20d0:	82 e4       	ldi	r24, 0x42	; 66
    20d2:	93 e0       	ldi	r25, 0x03	; 3
    20d4:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
	oled.draw_ASCI('h',((SSD1306_WIDTH/charsize-2)*charsize),4*charhighte);
    20d8:	20 e2       	ldi	r18, 0x20	; 32
    20da:	42 e7       	ldi	r20, 0x72	; 114
    20dc:	68 e6       	ldi	r22, 0x68	; 104
    20de:	82 e4       	ldi	r24, 0x42	; 66
    20e0:	93 e0       	ldi	r25, 0x03	; 3
    20e2:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
	//winkelausgabe
	buffersize=sprintf(buffer,"%3.1f",angle);
    20e6:	3f 92       	push	r3
    20e8:	9f 92       	push	r9
    20ea:	2f 92       	push	r2
    20ec:	8f 92       	push	r8
    20ee:	80 e2       	ldi	r24, 0x20	; 32
    20f0:	92 e0       	ldi	r25, 0x02	; 2
    20f2:	9f 93       	push	r25
    20f4:	8f 93       	push	r24
    20f6:	ce 01       	movw	r24, r28
    20f8:	01 96       	adiw	r24, 0x01	; 1
    20fa:	9f 93       	push	r25
    20fc:	8f 93       	push	r24
    20fe:	0e 94 46 2f 	call	0x5e8c	; 0x5e8c <sprintf>
    2102:	48 2e       	mov	r4, r24
	for (uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,7*charhighte);}
    2104:	0f b6       	in	r0, 0x3f	; 63
    2106:	f8 94       	cli
    2108:	de bf       	out	0x3e, r29	; 62
    210a:	0f be       	out	0x3f, r0	; 63
    210c:	cd bf       	out	0x3d, r28	; 61
    210e:	88 23       	and	r24, r24
    2110:	99 f0       	breq	.+38     	; 0x2138 <_Z12fahradschirmddddm+0x162>
    2112:	ce 01       	movw	r24, r28
    2114:	01 96       	adiw	r24, 0x01	; 1
    2116:	3c 01       	movw	r6, r24
    2118:	7c 01       	movw	r14, r24
    211a:	10 e0       	ldi	r17, 0x00	; 0
    211c:	f7 01       	movw	r30, r14
    211e:	61 91       	ld	r22, Z+
    2120:	7f 01       	movw	r14, r30
    2122:	28 e3       	ldi	r18, 0x38	; 56
    2124:	41 2f       	mov	r20, r17
    2126:	82 e4       	ldi	r24, 0x42	; 66
    2128:	93 e0       	ldi	r25, 0x03	; 3
    212a:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    212e:	1a 5f       	subi	r17, 0xFA	; 250
    2130:	8e 2d       	mov	r24, r14
    2132:	86 19       	sub	r24, r6
    2134:	84 15       	cp	r24, r4
    2136:	90 f3       	brcs	.-28     	; 0x211c <_Z12fahradschirmddddm+0x146>
	anzeige_kleinenadel(31,31,angle);
    2138:	28 2d       	mov	r18, r8
    213a:	32 2d       	mov	r19, r2
    213c:	49 2d       	mov	r20, r9
    213e:	53 2d       	mov	r21, r3
    2140:	6f e1       	ldi	r22, 0x1F	; 31
    2142:	8f e1       	ldi	r24, 0x1F	; 31
    2144:	0e 94 04 0c 	call	0x1808	; 0x1808 <_Z19anzeige_kleinenadelhhf>
	//anzeige der gesammtstrecke
	buffersize=sprintf(buffer,"%.1fm",weite);
    2148:	fe 85       	ldd	r31, Y+14	; 0x0e
    214a:	ff 93       	push	r31
    214c:	2d 85       	ldd	r18, Y+13	; 0x0d
    214e:	2f 93       	push	r18
    2150:	3c 85       	ldd	r19, Y+12	; 0x0c
    2152:	3f 93       	push	r19
    2154:	8b 85       	ldd	r24, Y+11	; 0x0b
    2156:	8f 93       	push	r24
    2158:	86 e2       	ldi	r24, 0x26	; 38
    215a:	92 e0       	ldi	r25, 0x02	; 2
    215c:	9f 93       	push	r25
    215e:	8f 93       	push	r24
    2160:	ce 01       	movw	r24, r28
    2162:	01 96       	adiw	r24, 0x01	; 1
    2164:	9f 93       	push	r25
    2166:	8f 93       	push	r24
    2168:	0e 94 46 2f 	call	0x5e8c	; 0x5e8c <sprintf>
    216c:	88 2e       	mov	r8, r24
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize+70,2*charhighte);}
    216e:	0f b6       	in	r0, 0x3f	; 63
    2170:	f8 94       	cli
    2172:	de bf       	out	0x3e, r29	; 62
    2174:	0f be       	out	0x3f, r0	; 63
    2176:	cd bf       	out	0x3d, r28	; 61
    2178:	88 23       	and	r24, r24
    217a:	c1 f0       	breq	.+48     	; 0x21ac <_Z12fahradschirmddddm+0x1d6>
    217c:	9e 01       	movw	r18, r28
    217e:	2f 5f       	subi	r18, 0xFF	; 255
    2180:	3f 4f       	sbci	r19, 0xFF	; 255
    2182:	79 01       	movw	r14, r18
    2184:	89 01       	movw	r16, r18
    2186:	0f 2e       	mov	r0, r31
    2188:	f6 e4       	ldi	r31, 0x46	; 70
    218a:	9f 2e       	mov	r9, r31
    218c:	f0 2d       	mov	r31, r0
    218e:	f8 01       	movw	r30, r16
    2190:	61 91       	ld	r22, Z+
    2192:	8f 01       	movw	r16, r30
    2194:	20 e1       	ldi	r18, 0x10	; 16
    2196:	49 2d       	mov	r20, r9
    2198:	82 e4       	ldi	r24, 0x42	; 66
    219a:	93 e0       	ldi	r25, 0x03	; 3
    219c:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    21a0:	f6 e0       	ldi	r31, 0x06	; 6
    21a2:	9f 0e       	add	r9, r31
    21a4:	90 2f       	mov	r25, r16
    21a6:	9e 19       	sub	r25, r14
    21a8:	98 15       	cp	r25, r8
    21aa:	88 f3       	brcs	.-30     	; 0x218e <_Z12fahradschirmddddm+0x1b8>
	//anzeige der max geschwindigkeit
	buffersize=sprintf(buffer,"%.1fkm/h",maxgeschwinsigkeit);
    21ac:	df 92       	push	r13
    21ae:	cf 92       	push	r12
    21b0:	bf 92       	push	r11
    21b2:	af 92       	push	r10
    21b4:	8c e2       	ldi	r24, 0x2C	; 44
    21b6:	92 e0       	ldi	r25, 0x02	; 2
    21b8:	9f 93       	push	r25
    21ba:	8f 93       	push	r24
    21bc:	ce 01       	movw	r24, r28
    21be:	01 96       	adiw	r24, 0x01	; 1
    21c0:	9f 93       	push	r25
    21c2:	8f 93       	push	r24
    21c4:	0e 94 46 2f 	call	0x5e8c	; 0x5e8c <sprintf>
    21c8:	c8 2e       	mov	r12, r24
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize+70,5*charhighte);}
    21ca:	0f b6       	in	r0, 0x3f	; 63
    21cc:	f8 94       	cli
    21ce:	de bf       	out	0x3e, r29	; 62
    21d0:	0f be       	out	0x3f, r0	; 63
    21d2:	cd bf       	out	0x3d, r28	; 61
    21d4:	88 23       	and	r24, r24
    21d6:	b9 f0       	breq	.+46     	; 0x2206 <_Z12fahradschirmddddm+0x230>
    21d8:	ce 01       	movw	r24, r28
    21da:	01 96       	adiw	r24, 0x01	; 1
    21dc:	7c 01       	movw	r14, r24
    21de:	8c 01       	movw	r16, r24
    21e0:	0f 2e       	mov	r0, r31
    21e2:	f6 e4       	ldi	r31, 0x46	; 70
    21e4:	df 2e       	mov	r13, r31
    21e6:	f0 2d       	mov	r31, r0
    21e8:	f8 01       	movw	r30, r16
    21ea:	61 91       	ld	r22, Z+
    21ec:	8f 01       	movw	r16, r30
    21ee:	28 e2       	ldi	r18, 0x28	; 40
    21f0:	4d 2d       	mov	r20, r13
    21f2:	82 e4       	ldi	r24, 0x42	; 66
    21f4:	93 e0       	ldi	r25, 0x03	; 3
    21f6:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    21fa:	f6 e0       	ldi	r31, 0x06	; 6
    21fc:	df 0e       	add	r13, r31
    21fe:	90 2f       	mov	r25, r16
    2200:	9e 19       	sub	r25, r14
    2202:	9c 15       	cp	r25, r12
    2204:	88 f3       	brcs	.-30     	; 0x21e8 <_Z12fahradschirmddddm+0x212>
	//anzeige der Fahrtzeit
	buffersize=sprintf(buffer,"%lus",Zeit);
    2206:	2a 89       	ldd	r18, Y+18	; 0x12
    2208:	2f 93       	push	r18
    220a:	39 89       	ldd	r19, Y+17	; 0x11
    220c:	3f 93       	push	r19
    220e:	88 89       	ldd	r24, Y+16	; 0x10
    2210:	8f 93       	push	r24
    2212:	9f 85       	ldd	r25, Y+15	; 0x0f
    2214:	9f 93       	push	r25
    2216:	85 e3       	ldi	r24, 0x35	; 53
    2218:	92 e0       	ldi	r25, 0x02	; 2
    221a:	9f 93       	push	r25
    221c:	8f 93       	push	r24
    221e:	ce 01       	movw	r24, r28
    2220:	01 96       	adiw	r24, 0x01	; 1
    2222:	9f 93       	push	r25
    2224:	8f 93       	push	r24
    2226:	0e 94 46 2f 	call	0x5e8c	; 0x5e8c <sprintf>
    222a:	c8 2e       	mov	r12, r24
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize+70,6*charhighte);}
    222c:	0f b6       	in	r0, 0x3f	; 63
    222e:	f8 94       	cli
    2230:	de bf       	out	0x3e, r29	; 62
    2232:	0f be       	out	0x3f, r0	; 63
    2234:	cd bf       	out	0x3d, r28	; 61
    2236:	88 23       	and	r24, r24
    2238:	c1 f0       	breq	.+48     	; 0x226a <_Z12fahradschirmddddm+0x294>
    223a:	9e 01       	movw	r18, r28
    223c:	2f 5f       	subi	r18, 0xFF	; 255
    223e:	3f 4f       	sbci	r19, 0xFF	; 255
    2240:	79 01       	movw	r14, r18
    2242:	89 01       	movw	r16, r18
    2244:	0f 2e       	mov	r0, r31
    2246:	f6 e4       	ldi	r31, 0x46	; 70
    2248:	df 2e       	mov	r13, r31
    224a:	f0 2d       	mov	r31, r0
    224c:	f8 01       	movw	r30, r16
    224e:	61 91       	ld	r22, Z+
    2250:	8f 01       	movw	r16, r30
    2252:	20 e3       	ldi	r18, 0x30	; 48
    2254:	4d 2d       	mov	r20, r13
    2256:	82 e4       	ldi	r24, 0x42	; 66
    2258:	93 e0       	ldi	r25, 0x03	; 3
    225a:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    225e:	f6 e0       	ldi	r31, 0x06	; 6
    2260:	df 0e       	add	r13, r31
    2262:	90 2f       	mov	r25, r16
    2264:	9e 19       	sub	r25, r14
    2266:	9c 15       	cp	r25, r12
    2268:	88 f3       	brcs	.-30     	; 0x224c <_Z12fahradschirmddddm+0x276>
}
    226a:	62 96       	adiw	r28, 0x12	; 18
    226c:	0f b6       	in	r0, 0x3f	; 63
    226e:	f8 94       	cli
    2270:	de bf       	out	0x3e, r29	; 62
    2272:	0f be       	out	0x3f, r0	; 63
    2274:	cd bf       	out	0x3d, r28	; 61
    2276:	df 91       	pop	r29
    2278:	cf 91       	pop	r28
    227a:	1f 91       	pop	r17
    227c:	0f 91       	pop	r16
    227e:	ff 90       	pop	r15
    2280:	ef 90       	pop	r14
    2282:	df 90       	pop	r13
    2284:	cf 90       	pop	r12
    2286:	bf 90       	pop	r11
    2288:	af 90       	pop	r10
    228a:	9f 90       	pop	r9
    228c:	8f 90       	pop	r8
    228e:	7f 90       	pop	r7
    2290:	6f 90       	pop	r6
    2292:	5f 90       	pop	r5
    2294:	4f 90       	pop	r4
    2296:	3f 90       	pop	r3
    2298:	2f 90       	pop	r2
    229a:	08 95       	ret

0000229c <_Z14Gaineinstellenv>:

void Gaineinstellen(){
    229c:	cf 92       	push	r12
    229e:	df 92       	push	r13
    22a0:	ef 92       	push	r14
    22a2:	ff 92       	push	r15
    22a4:	0f 93       	push	r16
    22a6:	1f 93       	push	r17
    22a8:	cf 93       	push	r28
    22aa:	df 93       	push	r29
    22ac:	cd b7       	in	r28, 0x3d	; 61
    22ae:	de b7       	in	r29, 0x3e	; 62
    22b0:	64 97       	sbiw	r28, 0x14	; 20
    22b2:	0f b6       	in	r0, 0x3f	; 63
    22b4:	f8 94       	cli
    22b6:	de bf       	out	0x3e, r29	; 62
    22b8:	0f be       	out	0x3f, r0	; 63
    22ba:	cd bf       	out	0x3d, r28	; 61
	char buffer[20];
	uint8_t buffersize=0;

	oled.clearFrame();
    22bc:	82 e4       	ldi	r24, 0x42	; 66
    22be:	93 e0       	ldi	r25, 0x03	; 3
    22c0:	0e 94 ed 02 	call	0x5da	; 0x5da <_ZN7Display10clearFrameEv>
	buffersize=sprintf(buffer,"1: 1370");
    22c4:	88 e0       	ldi	r24, 0x08	; 8
    22c6:	ea e3       	ldi	r30, 0x3A	; 58
    22c8:	f2 e0       	ldi	r31, 0x02	; 2
    22ca:	8e 01       	movw	r16, r28
    22cc:	0f 5f       	subi	r16, 0xFF	; 255
    22ce:	1f 4f       	sbci	r17, 0xFF	; 255
    22d0:	d8 01       	movw	r26, r16
    22d2:	01 90       	ld	r0, Z+
    22d4:	0d 92       	st	X+, r0
    22d6:	8a 95       	dec	r24
    22d8:	e1 f7       	brne	.-8      	; 0x22d2 <_Z14Gaineinstellenv+0x36>
    22da:	e0 2e       	mov	r14, r16
    22dc:	f1 2e       	mov	r15, r17
    22de:	68 01       	movw	r12, r16
    22e0:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,0*charhighte);}
    22e2:	f6 01       	movw	r30, r12
    22e4:	61 91       	ld	r22, Z+
    22e6:	6f 01       	movw	r12, r30
    22e8:	20 e0       	ldi	r18, 0x00	; 0
    22ea:	41 2f       	mov	r20, r17
    22ec:	82 e4       	ldi	r24, 0x42	; 66
    22ee:	93 e0       	ldi	r25, 0x03	; 3
    22f0:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    22f4:	1a 5f       	subi	r17, 0xFA	; 250
    22f6:	1a 32       	cpi	r17, 0x2A	; 42
    22f8:	a1 f7       	brne	.-24     	; 0x22e2 <_Z14Gaineinstellenv+0x46>
	buffersize=sprintf(buffer,"2: 1090");
    22fa:	88 e0       	ldi	r24, 0x08	; 8
    22fc:	e2 e4       	ldi	r30, 0x42	; 66
    22fe:	f2 e0       	ldi	r31, 0x02	; 2
    2300:	de 01       	movw	r26, r28
    2302:	11 96       	adiw	r26, 0x01	; 1
    2304:	01 90       	ld	r0, Z+
    2306:	0d 92       	st	X+, r0
    2308:	8a 95       	dec	r24
    230a:	e1 f7       	brne	.-8      	; 0x2304 <_Z14Gaineinstellenv+0x68>
    230c:	ce 2c       	mov	r12, r14
    230e:	df 2c       	mov	r13, r15
    2310:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,1*charhighte);}
    2312:	f6 01       	movw	r30, r12
    2314:	61 91       	ld	r22, Z+
    2316:	6f 01       	movw	r12, r30
    2318:	28 e0       	ldi	r18, 0x08	; 8
    231a:	41 2f       	mov	r20, r17
    231c:	82 e4       	ldi	r24, 0x42	; 66
    231e:	93 e0       	ldi	r25, 0x03	; 3
    2320:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    2324:	1a 5f       	subi	r17, 0xFA	; 250
    2326:	1a 32       	cpi	r17, 0x2A	; 42
    2328:	a1 f7       	brne	.-24     	; 0x2312 <_Z14Gaineinstellenv+0x76>
	buffersize=sprintf(buffer,"3:  820");
    232a:	88 e0       	ldi	r24, 0x08	; 8
    232c:	ea e4       	ldi	r30, 0x4A	; 74
    232e:	f2 e0       	ldi	r31, 0x02	; 2
    2330:	de 01       	movw	r26, r28
    2332:	11 96       	adiw	r26, 0x01	; 1
    2334:	01 90       	ld	r0, Z+
    2336:	0d 92       	st	X+, r0
    2338:	8a 95       	dec	r24
    233a:	e1 f7       	brne	.-8      	; 0x2334 <_Z14Gaineinstellenv+0x98>
    233c:	ce 2c       	mov	r12, r14
    233e:	df 2c       	mov	r13, r15
    2340:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,2*charhighte);}
    2342:	f6 01       	movw	r30, r12
    2344:	61 91       	ld	r22, Z+
    2346:	6f 01       	movw	r12, r30
    2348:	20 e1       	ldi	r18, 0x10	; 16
    234a:	41 2f       	mov	r20, r17
    234c:	82 e4       	ldi	r24, 0x42	; 66
    234e:	93 e0       	ldi	r25, 0x03	; 3
    2350:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    2354:	1a 5f       	subi	r17, 0xFA	; 250
    2356:	1a 32       	cpi	r17, 0x2A	; 42
    2358:	a1 f7       	brne	.-24     	; 0x2342 <_Z14Gaineinstellenv+0xa6>
	buffersize=sprintf(buffer,"4:  660");
    235a:	88 e0       	ldi	r24, 0x08	; 8
    235c:	e2 e5       	ldi	r30, 0x52	; 82
    235e:	f2 e0       	ldi	r31, 0x02	; 2
    2360:	de 01       	movw	r26, r28
    2362:	11 96       	adiw	r26, 0x01	; 1
    2364:	01 90       	ld	r0, Z+
    2366:	0d 92       	st	X+, r0
    2368:	8a 95       	dec	r24
    236a:	e1 f7       	brne	.-8      	; 0x2364 <_Z14Gaineinstellenv+0xc8>
    236c:	ce 2c       	mov	r12, r14
    236e:	df 2c       	mov	r13, r15
    2370:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,3*charhighte);}
    2372:	f6 01       	movw	r30, r12
    2374:	61 91       	ld	r22, Z+
    2376:	6f 01       	movw	r12, r30
    2378:	28 e1       	ldi	r18, 0x18	; 24
    237a:	41 2f       	mov	r20, r17
    237c:	82 e4       	ldi	r24, 0x42	; 66
    237e:	93 e0       	ldi	r25, 0x03	; 3
    2380:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    2384:	1a 5f       	subi	r17, 0xFA	; 250
    2386:	1a 32       	cpi	r17, 0x2A	; 42
    2388:	a1 f7       	brne	.-24     	; 0x2372 <_Z14Gaineinstellenv+0xd6>
	buffersize=sprintf(buffer,"5:  440");
    238a:	88 e0       	ldi	r24, 0x08	; 8
    238c:	ea e5       	ldi	r30, 0x5A	; 90
    238e:	f2 e0       	ldi	r31, 0x02	; 2
    2390:	de 01       	movw	r26, r28
    2392:	11 96       	adiw	r26, 0x01	; 1
    2394:	01 90       	ld	r0, Z+
    2396:	0d 92       	st	X+, r0
    2398:	8a 95       	dec	r24
    239a:	e1 f7       	brne	.-8      	; 0x2394 <_Z14Gaineinstellenv+0xf8>
    239c:	ce 2c       	mov	r12, r14
    239e:	df 2c       	mov	r13, r15
    23a0:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,4*charhighte);}
    23a2:	f6 01       	movw	r30, r12
    23a4:	61 91       	ld	r22, Z+
    23a6:	6f 01       	movw	r12, r30
    23a8:	20 e2       	ldi	r18, 0x20	; 32
    23aa:	41 2f       	mov	r20, r17
    23ac:	82 e4       	ldi	r24, 0x42	; 66
    23ae:	93 e0       	ldi	r25, 0x03	; 3
    23b0:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    23b4:	1a 5f       	subi	r17, 0xFA	; 250
    23b6:	1a 32       	cpi	r17, 0x2A	; 42
    23b8:	a1 f7       	brne	.-24     	; 0x23a2 <_Z14Gaineinstellenv+0x106>
	buffersize=sprintf(buffer,"6:  390");
    23ba:	88 e0       	ldi	r24, 0x08	; 8
    23bc:	e2 e6       	ldi	r30, 0x62	; 98
    23be:	f2 e0       	ldi	r31, 0x02	; 2
    23c0:	de 01       	movw	r26, r28
    23c2:	11 96       	adiw	r26, 0x01	; 1
    23c4:	01 90       	ld	r0, Z+
    23c6:	0d 92       	st	X+, r0
    23c8:	8a 95       	dec	r24
    23ca:	e1 f7       	brne	.-8      	; 0x23c4 <_Z14Gaineinstellenv+0x128>
    23cc:	ce 2c       	mov	r12, r14
    23ce:	df 2c       	mov	r13, r15
    23d0:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,5*charhighte);}
    23d2:	f6 01       	movw	r30, r12
    23d4:	61 91       	ld	r22, Z+
    23d6:	6f 01       	movw	r12, r30
    23d8:	28 e2       	ldi	r18, 0x28	; 40
    23da:	41 2f       	mov	r20, r17
    23dc:	82 e4       	ldi	r24, 0x42	; 66
    23de:	93 e0       	ldi	r25, 0x03	; 3
    23e0:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    23e4:	1a 5f       	subi	r17, 0xFA	; 250
    23e6:	1a 32       	cpi	r17, 0x2A	; 42
    23e8:	a1 f7       	brne	.-24     	; 0x23d2 <_Z14Gaineinstellenv+0x136>
	buffersize=sprintf(buffer,"7:  330");
    23ea:	88 e0       	ldi	r24, 0x08	; 8
    23ec:	ea e6       	ldi	r30, 0x6A	; 106
    23ee:	f2 e0       	ldi	r31, 0x02	; 2
    23f0:	de 01       	movw	r26, r28
    23f2:	11 96       	adiw	r26, 0x01	; 1
    23f4:	01 90       	ld	r0, Z+
    23f6:	0d 92       	st	X+, r0
    23f8:	8a 95       	dec	r24
    23fa:	e1 f7       	brne	.-8      	; 0x23f4 <_Z14Gaineinstellenv+0x158>
    23fc:	ce 2c       	mov	r12, r14
    23fe:	df 2c       	mov	r13, r15
    2400:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,6*charhighte);}
    2402:	f6 01       	movw	r30, r12
    2404:	61 91       	ld	r22, Z+
    2406:	6f 01       	movw	r12, r30
    2408:	20 e3       	ldi	r18, 0x30	; 48
    240a:	41 2f       	mov	r20, r17
    240c:	82 e4       	ldi	r24, 0x42	; 66
    240e:	93 e0       	ldi	r25, 0x03	; 3
    2410:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    2414:	1a 5f       	subi	r17, 0xFA	; 250
    2416:	1a 32       	cpi	r17, 0x2A	; 42
    2418:	a1 f7       	brne	.-24     	; 0x2402 <_Z14Gaineinstellenv+0x166>
	buffersize=sprintf(buffer,"8:  230");
    241a:	88 e0       	ldi	r24, 0x08	; 8
    241c:	e2 e7       	ldi	r30, 0x72	; 114
    241e:	f2 e0       	ldi	r31, 0x02	; 2
    2420:	de 01       	movw	r26, r28
    2422:	11 96       	adiw	r26, 0x01	; 1
    2424:	01 90       	ld	r0, Z+
    2426:	0d 92       	st	X+, r0
    2428:	8a 95       	dec	r24
    242a:	e1 f7       	brne	.-8      	; 0x2424 <_Z14Gaineinstellenv+0x188>
    242c:	ce 2c       	mov	r12, r14
    242e:	df 2c       	mov	r13, r15
    2430:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,7*charhighte);}
    2432:	f6 01       	movw	r30, r12
    2434:	61 91       	ld	r22, Z+
    2436:	6f 01       	movw	r12, r30
    2438:	28 e3       	ldi	r18, 0x38	; 56
    243a:	41 2f       	mov	r20, r17
    243c:	82 e4       	ldi	r24, 0x42	; 66
    243e:	93 e0       	ldi	r25, 0x03	; 3
    2440:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    2444:	1a 5f       	subi	r17, 0xFA	; 250
    2446:	1a 32       	cpi	r17, 0x2A	; 42
    2448:	a1 f7       	brne	.-24     	; 0x2432 <_Z14Gaineinstellenv+0x196>
}
    244a:	64 96       	adiw	r28, 0x14	; 20
    244c:	0f b6       	in	r0, 0x3f	; 63
    244e:	f8 94       	cli
    2450:	de bf       	out	0x3e, r29	; 62
    2452:	0f be       	out	0x3f, r0	; 63
    2454:	cd bf       	out	0x3d, r28	; 61
    2456:	df 91       	pop	r29
    2458:	cf 91       	pop	r28
    245a:	1f 91       	pop	r17
    245c:	0f 91       	pop	r16
    245e:	ff 90       	pop	r15
    2460:	ef 90       	pop	r14
    2462:	df 90       	pop	r13
    2464:	cf 90       	pop	r12
    2466:	08 95       	ret

00002468 <_Z15anzeige_kompassd>:

void anzeige_kompass(double winkel){
    2468:	9f 92       	push	r9
    246a:	af 92       	push	r10
    246c:	bf 92       	push	r11
    246e:	cf 92       	push	r12
    2470:	df 92       	push	r13
    2472:	ef 92       	push	r14
    2474:	ff 92       	push	r15
    2476:	0f 93       	push	r16
    2478:	1f 93       	push	r17
    247a:	cf 93       	push	r28
    247c:	df 93       	push	r29
    247e:	cd b7       	in	r28, 0x3d	; 61
    2480:	de b7       	in	r29, 0x3e	; 62
    2482:	64 97       	sbiw	r28, 0x14	; 20
    2484:	0f b6       	in	r0, 0x3f	; 63
    2486:	f8 94       	cli
    2488:	de bf       	out	0x3e, r29	; 62
    248a:	0f be       	out	0x3f, r0	; 63
    248c:	cd bf       	out	0x3d, r28	; 61
    248e:	c6 2e       	mov	r12, r22
    2490:	d7 2e       	mov	r13, r23
    2492:	e8 2e       	mov	r14, r24
    2494:	f9 2e       	mov	r15, r25
	Baro.READ_Pressure_once();
    2496:	8f e2       	ldi	r24, 0x2F	; 47
    2498:	93 e0       	ldi	r25, 0x03	; 3
    249a:	0e 94 55 24 	call	0x48aa	; 0x48aa <_ZN8Pressure18READ_Pressure_onceEv>
	Baro.READ_Temperature();
    249e:	8f e2       	ldi	r24, 0x2F	; 47
    24a0:	93 e0       	ldi	r25, 0x03	; 3
    24a2:	0e 94 dd 24 	call	0x49ba	; 0x49ba <_ZN8Pressure16READ_TemperatureEv>
	oled.clearFrame();
    24a6:	82 e4       	ldi	r24, 0x42	; 66
    24a8:	93 e0       	ldi	r25, 0x03	; 3
    24aa:	0e 94 ed 02 	call	0x5da	; 0x5da <_ZN7Display10clearFrameEv>
    24ae:	0f 2e       	mov	r0, r31
    24b0:	f9 e7       	ldi	r31, 0x79	; 121
    24b2:	af 2e       	mov	r10, r31
    24b4:	f7 e0       	ldi	r31, 0x07	; 7
    24b6:	bf 2e       	mov	r11, r31
    24b8:	f0 2d       	mov	r31, r0
    24ba:	11 e4       	ldi	r17, 0x41	; 65
	char buffer[20];
	uint8_t buffersize=0;
	//Uhrzeit
	for(uint8_t i=0;i<bitsderrtc;i++){oled.draw_ASCI(rtc.msg_uhr[i],65+i*charsize,0*charhighte);}
    24bc:	f5 01       	movw	r30, r10
    24be:	61 91       	ld	r22, Z+
    24c0:	5f 01       	movw	r10, r30
    24c2:	20 e0       	ldi	r18, 0x00	; 0
    24c4:	41 2f       	mov	r20, r17
    24c6:	82 e4       	ldi	r24, 0x42	; 66
    24c8:	93 e0       	ldi	r25, 0x03	; 3
    24ca:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    24ce:	1a 5f       	subi	r17, 0xFA	; 250
    24d0:	11 37       	cpi	r17, 0x71	; 113
    24d2:	a1 f7       	brne	.-24     	; 0x24bc <_Z15anzeige_kompassd+0x54>
    24d4:	0f 2e       	mov	r0, r31
    24d6:	f1 e8       	ldi	r31, 0x81	; 129
    24d8:	af 2e       	mov	r10, r31
    24da:	f7 e0       	ldi	r31, 0x07	; 7
    24dc:	bf 2e       	mov	r11, r31
    24de:	f0 2d       	mov	r31, r0
    24e0:	11 e4       	ldi	r17, 0x41	; 65
	for(uint8_t i=0;i<bitsderrtc;i++){oled.draw_ASCI(rtc.msg_dat[i],65+i*charsize,7*charhighte);}
    24e2:	f5 01       	movw	r30, r10
    24e4:	61 91       	ld	r22, Z+
    24e6:	5f 01       	movw	r10, r30
    24e8:	28 e3       	ldi	r18, 0x38	; 56
    24ea:	41 2f       	mov	r20, r17
    24ec:	82 e4       	ldi	r24, 0x42	; 66
    24ee:	93 e0       	ldi	r25, 0x03	; 3
    24f0:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    24f4:	1a 5f       	subi	r17, 0xFA	; 250
    24f6:	11 37       	cpi	r17, 0x71	; 113
    24f8:	a1 f7       	brne	.-24     	; 0x24e2 <_Z15anzeige_kompassd+0x7a>
	//Azeige der Hoehe ueber Altitude
	buffersize=sprintf(buffer,"H: %.1f m",(double)Baro.altitude(Baro.Press));
    24fa:	40 91 2f 03 	lds	r20, 0x032F
    24fe:	50 91 30 03 	lds	r21, 0x0330
    2502:	60 91 31 03 	lds	r22, 0x0331
    2506:	70 91 32 03 	lds	r23, 0x0332
    250a:	8f e2       	ldi	r24, 0x2F	; 47
    250c:	93 e0       	ldi	r25, 0x03	; 3
    250e:	0e 94 5a 25 	call	0x4ab4	; 0x4ab4 <_ZN8Pressure8altitudeEd>
    2512:	9f 93       	push	r25
    2514:	8f 93       	push	r24
    2516:	7f 93       	push	r23
    2518:	6f 93       	push	r22
    251a:	8a e7       	ldi	r24, 0x7A	; 122
    251c:	92 e0       	ldi	r25, 0x02	; 2
    251e:	9f 93       	push	r25
    2520:	8f 93       	push	r24
    2522:	ce 01       	movw	r24, r28
    2524:	01 96       	adiw	r24, 0x01	; 1
    2526:	9f 93       	push	r25
    2528:	8f 93       	push	r24
    252a:	0e 94 46 2f 	call	0x5e8c	; 0x5e8c <sprintf>
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],65+i*charsize,1.33*charhighte);}
    252e:	0f b6       	in	r0, 0x3f	; 63
    2530:	f8 94       	cli
    2532:	de bf       	out	0x3e, r29	; 62
    2534:	0f be       	out	0x3f, r0	; 63
    2536:	cd bf       	out	0x3d, r28	; 61
    2538:	88 23       	and	r24, r24
    253a:	f1 f0       	breq	.+60     	; 0x2578 <_Z15anzeige_kompassd+0x110>
    253c:	8e 01       	movw	r16, r28
    253e:	0f 5f       	subi	r16, 0xFF	; 255
    2540:	1f 4f       	sbci	r17, 0xFF	; 255
    2542:	81 50       	subi	r24, 0x01	; 1
    2544:	68 94       	set
    2546:	aa 24       	eor	r10, r10
    2548:	a1 f8       	bld	r10, 1
    254a:	b1 2c       	mov	r11, r1
    254c:	ac 0e       	add	r10, r28
    254e:	bd 1e       	adc	r11, r29
    2550:	a8 0e       	add	r10, r24
    2552:	b1 1c       	adc	r11, r1
    2554:	0f 2e       	mov	r0, r31
    2556:	f1 e4       	ldi	r31, 0x41	; 65
    2558:	9f 2e       	mov	r9, r31
    255a:	f0 2d       	mov	r31, r0
    255c:	f8 01       	movw	r30, r16
    255e:	61 91       	ld	r22, Z+
    2560:	8f 01       	movw	r16, r30
    2562:	2a e0       	ldi	r18, 0x0A	; 10
    2564:	49 2d       	mov	r20, r9
    2566:	82 e4       	ldi	r24, 0x42	; 66
    2568:	93 e0       	ldi	r25, 0x03	; 3
    256a:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    256e:	f6 e0       	ldi	r31, 0x06	; 6
    2570:	9f 0e       	add	r9, r31
    2572:	0a 15       	cp	r16, r10
    2574:	1b 05       	cpc	r17, r11
    2576:	91 f7       	brne	.-28     	; 0x255c <_Z15anzeige_kompassd+0xf4>
	//Anzeige der Temperatur
	buffersize=sprintf(buffer,"%.1f C",(double)Baro.Tempera);
    2578:	e3 e3       	ldi	r30, 0x33	; 51
    257a:	f3 e0       	ldi	r31, 0x03	; 3
    257c:	83 81       	ldd	r24, Z+3	; 0x03
    257e:	8f 93       	push	r24
    2580:	82 81       	ldd	r24, Z+2	; 0x02
    2582:	8f 93       	push	r24
    2584:	81 81       	ldd	r24, Z+1	; 0x01
    2586:	8f 93       	push	r24
    2588:	80 81       	ld	r24, Z
    258a:	8f 93       	push	r24
    258c:	89 e1       	ldi	r24, 0x19	; 25
    258e:	92 e0       	ldi	r25, 0x02	; 2
    2590:	9f 93       	push	r25
    2592:	8f 93       	push	r24
    2594:	ce 01       	movw	r24, r28
    2596:	01 96       	adiw	r24, 0x01	; 1
    2598:	9f 93       	push	r25
    259a:	8f 93       	push	r24
    259c:	0e 94 46 2f 	call	0x5e8c	; 0x5e8c <sprintf>
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],65+i*charsize,5*charhighte);}
    25a0:	0f b6       	in	r0, 0x3f	; 63
    25a2:	f8 94       	cli
    25a4:	de bf       	out	0x3e, r29	; 62
    25a6:	0f be       	out	0x3f, r0	; 63
    25a8:	cd bf       	out	0x3d, r28	; 61
    25aa:	88 23       	and	r24, r24
    25ac:	f1 f0       	breq	.+60     	; 0x25ea <_Z15anzeige_kompassd+0x182>
    25ae:	8e 01       	movw	r16, r28
    25b0:	0f 5f       	subi	r16, 0xFF	; 255
    25b2:	1f 4f       	sbci	r17, 0xFF	; 255
    25b4:	81 50       	subi	r24, 0x01	; 1
    25b6:	68 94       	set
    25b8:	aa 24       	eor	r10, r10
    25ba:	a1 f8       	bld	r10, 1
    25bc:	b1 2c       	mov	r11, r1
    25be:	ac 0e       	add	r10, r28
    25c0:	bd 1e       	adc	r11, r29
    25c2:	a8 0e       	add	r10, r24
    25c4:	b1 1c       	adc	r11, r1
    25c6:	0f 2e       	mov	r0, r31
    25c8:	f1 e4       	ldi	r31, 0x41	; 65
    25ca:	9f 2e       	mov	r9, r31
    25cc:	f0 2d       	mov	r31, r0
    25ce:	f8 01       	movw	r30, r16
    25d0:	61 91       	ld	r22, Z+
    25d2:	8f 01       	movw	r16, r30
    25d4:	28 e2       	ldi	r18, 0x28	; 40
    25d6:	49 2d       	mov	r20, r9
    25d8:	82 e4       	ldi	r24, 0x42	; 66
    25da:	93 e0       	ldi	r25, 0x03	; 3
    25dc:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    25e0:	f6 e0       	ldi	r31, 0x06	; 6
    25e2:	9f 0e       	add	r9, r31
    25e4:	0a 15       	cp	r16, r10
    25e6:	1b 05       	cpc	r17, r11
    25e8:	91 f7       	brne	.-28     	; 0x25ce <_Z15anzeige_kompassd+0x166>
	//winkel als Zahl ausgeben
	buffersize=sprintf(buffer,"angle=%.0f",winkel);
    25ea:	ff 92       	push	r15
    25ec:	ef 92       	push	r14
    25ee:	df 92       	push	r13
    25f0:	cf 92       	push	r12
    25f2:	84 e8       	ldi	r24, 0x84	; 132
    25f4:	92 e0       	ldi	r25, 0x02	; 2
    25f6:	9f 93       	push	r25
    25f8:	8f 93       	push	r24
    25fa:	ce 01       	movw	r24, r28
    25fc:	01 96       	adiw	r24, 0x01	; 1
    25fe:	9f 93       	push	r25
    2600:	8f 93       	push	r24
    2602:	0e 94 46 2f 	call	0x5e8c	; 0x5e8c <sprintf>
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],65+i*charsize,6*charhighte);}
    2606:	0f b6       	in	r0, 0x3f	; 63
    2608:	f8 94       	cli
    260a:	de bf       	out	0x3e, r29	; 62
    260c:	0f be       	out	0x3f, r0	; 63
    260e:	cd bf       	out	0x3d, r28	; 61
    2610:	88 23       	and	r24, r24
    2612:	f1 f0       	breq	.+60     	; 0x2650 <_Z15anzeige_kompassd+0x1e8>
    2614:	8e 01       	movw	r16, r28
    2616:	0f 5f       	subi	r16, 0xFF	; 255
    2618:	1f 4f       	sbci	r17, 0xFF	; 255
    261a:	81 50       	subi	r24, 0x01	; 1
    261c:	68 94       	set
    261e:	aa 24       	eor	r10, r10
    2620:	a1 f8       	bld	r10, 1
    2622:	b1 2c       	mov	r11, r1
    2624:	ac 0e       	add	r10, r28
    2626:	bd 1e       	adc	r11, r29
    2628:	a8 0e       	add	r10, r24
    262a:	b1 1c       	adc	r11, r1
    262c:	0f 2e       	mov	r0, r31
    262e:	f1 e4       	ldi	r31, 0x41	; 65
    2630:	9f 2e       	mov	r9, r31
    2632:	f0 2d       	mov	r31, r0
    2634:	f8 01       	movw	r30, r16
    2636:	61 91       	ld	r22, Z+
    2638:	8f 01       	movw	r16, r30
    263a:	20 e3       	ldi	r18, 0x30	; 48
    263c:	49 2d       	mov	r20, r9
    263e:	82 e4       	ldi	r24, 0x42	; 66
    2640:	93 e0       	ldi	r25, 0x03	; 3
    2642:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    2646:	f6 e0       	ldi	r31, 0x06	; 6
    2648:	9f 0e       	add	r9, r31
    264a:	0a 15       	cp	r16, r10
    264c:	1b 05       	cpc	r17, r11
    264e:	91 f7       	brne	.-28     	; 0x2634 <_Z15anzeige_kompassd+0x1cc>
	//dreieck als Zeiger
	anzeige_nadel(31,31,winkel);
    2650:	2c 2d       	mov	r18, r12
    2652:	3d 2d       	mov	r19, r13
    2654:	4e 2d       	mov	r20, r14
    2656:	5f 2d       	mov	r21, r15
    2658:	6f e1       	ldi	r22, 0x1F	; 31
    265a:	8f e1       	ldi	r24, 0x1F	; 31
    265c:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <_Z13anzeige_nadelhhf>
	//Richtung ausgeben
	anzeige_richtung(winkel);	
    2660:	6c 2d       	mov	r22, r12
    2662:	7d 2d       	mov	r23, r13
    2664:	8e 2d       	mov	r24, r14
    2666:	9f 2d       	mov	r25, r15
    2668:	0e 94 28 0b 	call	0x1650	; 0x1650 <_Z16anzeige_richtungf>
}
    266c:	64 96       	adiw	r28, 0x14	; 20
    266e:	0f b6       	in	r0, 0x3f	; 63
    2670:	f8 94       	cli
    2672:	de bf       	out	0x3e, r29	; 62
    2674:	0f be       	out	0x3f, r0	; 63
    2676:	cd bf       	out	0x3d, r28	; 61
    2678:	df 91       	pop	r29
    267a:	cf 91       	pop	r28
    267c:	1f 91       	pop	r17
    267e:	0f 91       	pop	r16
    2680:	ff 90       	pop	r15
    2682:	ef 90       	pop	r14
    2684:	df 90       	pop	r13
    2686:	cf 90       	pop	r12
    2688:	bf 90       	pop	r11
    268a:	af 90       	pop	r10
    268c:	9f 90       	pop	r9
    268e:	08 95       	ret

00002690 <_Z10timerseitev>:

void timerseite(){
    2690:	af 92       	push	r10
    2692:	bf 92       	push	r11
    2694:	df 92       	push	r13
    2696:	ef 92       	push	r14
    2698:	0f 93       	push	r16
    269a:	1f 93       	push	r17
    269c:	cf 93       	push	r28
    269e:	df 93       	push	r29
    26a0:	cd b7       	in	r28, 0x3d	; 61
    26a2:	de b7       	in	r29, 0x3e	; 62
    26a4:	64 97       	sbiw	r28, 0x14	; 20
    26a6:	0f b6       	in	r0, 0x3f	; 63
    26a8:	f8 94       	cli
    26aa:	de bf       	out	0x3e, r29	; 62
    26ac:	0f be       	out	0x3f, r0	; 63
    26ae:	cd bf       	out	0x3d, r28	; 61
	char buffer[20];
	uint8_t buffersize=0;
	oled.clearFrame();
    26b0:	82 e4       	ldi	r24, 0x42	; 66
    26b2:	93 e0       	ldi	r25, 0x03	; 3
    26b4:	0e 94 ed 02 	call	0x5da	; 0x5da <_ZN7Display10clearFrameEv>
	buffersize=sprintf(buffer,"Timer: ");
    26b8:	88 e0       	ldi	r24, 0x08	; 8
    26ba:	ef e8       	ldi	r30, 0x8F	; 143
    26bc:	f2 e0       	ldi	r31, 0x02	; 2
    26be:	8e 01       	movw	r16, r28
    26c0:	0f 5f       	subi	r16, 0xFF	; 255
    26c2:	1f 4f       	sbci	r17, 0xFF	; 255
    26c4:	d8 01       	movw	r26, r16
    26c6:	01 90       	ld	r0, Z+
    26c8:	0d 92       	st	X+, r0
    26ca:	8a 95       	dec	r24
    26cc:	e1 f7       	brne	.-8      	; 0x26c6 <_Z10timerseitev+0x36>
    26ce:	d0 2e       	mov	r13, r16
    26d0:	e1 2e       	mov	r14, r17
    26d2:	58 01       	movw	r10, r16
    26d4:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,0*charhighte);}
    26d6:	f5 01       	movw	r30, r10
    26d8:	61 91       	ld	r22, Z+
    26da:	5f 01       	movw	r10, r30
    26dc:	20 e0       	ldi	r18, 0x00	; 0
    26de:	41 2f       	mov	r20, r17
    26e0:	82 e4       	ldi	r24, 0x42	; 66
    26e2:	93 e0       	ldi	r25, 0x03	; 3
    26e4:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    26e8:	1a 5f       	subi	r17, 0xFA	; 250
    26ea:	1a 32       	cpi	r17, 0x2A	; 42
    26ec:	a1 f7       	brne	.-24     	; 0x26d6 <_Z10timerseitev+0x46>
	if (pos!=0)
    26ee:	60 91 28 03 	lds	r22, 0x0328
    26f2:	66 23       	and	r22, r22
    26f4:	39 f0       	breq	.+14     	; 0x2704 <_Z10timerseitev+0x74>
	{
		oled.draw_ASCI(pos+'0',buffersize*charsize,0*charhighte);
    26f6:	60 5d       	subi	r22, 0xD0	; 208
    26f8:	20 e0       	ldi	r18, 0x00	; 0
    26fa:	4a e2       	ldi	r20, 0x2A	; 42
    26fc:	82 e4       	ldi	r24, 0x42	; 66
    26fe:	93 e0       	ldi	r25, 0x03	; 3
    2700:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
	}
		
	buffer[0]=zaehler.Stunden/10;
    2704:	90 91 6e 07 	lds	r25, 0x076E
    2708:	8d ec       	ldi	r24, 0xCD	; 205
    270a:	98 9f       	mul	r25, r24
    270c:	21 2d       	mov	r18, r1
    270e:	11 24       	eor	r1, r1
    2710:	26 95       	lsr	r18
    2712:	26 95       	lsr	r18
    2714:	26 95       	lsr	r18
    2716:	29 83       	std	Y+1, r18	; 0x01
	buffer[1]=zaehler.Stunden%10;
    2718:	22 0f       	add	r18, r18
    271a:	32 2f       	mov	r19, r18
    271c:	33 0f       	add	r19, r19
    271e:	33 0f       	add	r19, r19
    2720:	23 0f       	add	r18, r19
    2722:	92 1b       	sub	r25, r18
    2724:	9a 83       	std	Y+2, r25	; 0x02
	buffer[2]=':';
    2726:	9a e3       	ldi	r25, 0x3A	; 58
    2728:	9b 83       	std	Y+3, r25	; 0x03
	buffer[3]=zaehler.Minuten/10;
    272a:	20 91 6f 07 	lds	r18, 0x076F
    272e:	28 9f       	mul	r18, r24
    2730:	31 2d       	mov	r19, r1
    2732:	11 24       	eor	r1, r1
    2734:	36 95       	lsr	r19
    2736:	36 95       	lsr	r19
    2738:	36 95       	lsr	r19
    273a:	3c 83       	std	Y+4, r19	; 0x04
	buffer[4]=zaehler.Minuten%10;
    273c:	33 0f       	add	r19, r19
    273e:	43 2f       	mov	r20, r19
    2740:	44 0f       	add	r20, r20
    2742:	44 0f       	add	r20, r20
    2744:	34 0f       	add	r19, r20
    2746:	23 1b       	sub	r18, r19
    2748:	2d 83       	std	Y+5, r18	; 0x05
	buffer[5]=':';
    274a:	9e 83       	std	Y+6, r25	; 0x06
	buffer[6]=zaehler.Sekunden/10;
    274c:	90 91 70 07 	lds	r25, 0x0770
    2750:	98 9f       	mul	r25, r24
    2752:	81 2d       	mov	r24, r1
    2754:	11 24       	eor	r1, r1
    2756:	86 95       	lsr	r24
    2758:	86 95       	lsr	r24
    275a:	86 95       	lsr	r24
    275c:	8f 83       	std	Y+7, r24	; 0x07
	buffer[7]=zaehler.Sekunden%10;
    275e:	88 0f       	add	r24, r24
    2760:	28 2f       	mov	r18, r24
    2762:	22 0f       	add	r18, r18
    2764:	22 0f       	add	r18, r18
    2766:	82 0f       	add	r24, r18
    2768:	98 1b       	sub	r25, r24
    276a:	98 87       	std	Y+8, r25	; 0x08
    276c:	ad 2c       	mov	r10, r13
    276e:	be 2c       	mov	r11, r14
    2770:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<bitsderrtc;i++){
		if (buffer[i]==':')
    2772:	f5 01       	movw	r30, r10
    2774:	61 91       	ld	r22, Z+
    2776:	5f 01       	movw	r10, r30
    2778:	6a 33       	cpi	r22, 0x3A	; 58
    277a:	39 f4       	brne	.+14     	; 0x278a <_Z10timerseitev+0xfa>
		{
			oled.draw_ASCI(buffer[i],i*numbersmalsize,2.5*charhighte);
    277c:	24 e1       	ldi	r18, 0x14	; 20
    277e:	41 2f       	mov	r20, r17
    2780:	82 e4       	ldi	r24, 0x42	; 66
    2782:	93 e0       	ldi	r25, 0x03	; 3
    2784:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    2788:	06 c0       	rjmp	.+12     	; 0x2796 <_Z10timerseitev+0x106>
		}
		else{
			oled.draw_number16x16(buffer[i],i*numbersmalsize,2*charhighte);
    278a:	20 e1       	ldi	r18, 0x10	; 16
    278c:	41 2f       	mov	r20, r17
    278e:	82 e4       	ldi	r24, 0x42	; 66
    2790:	93 e0       	ldi	r25, 0x03	; 3
    2792:	0e 94 26 06 	call	0xc4c	; 0xc4c <_ZN7Display16draw_number16x16Ehhh>
    2796:	10 5f       	subi	r17, 0xF0	; 240
	buffer[3]=zaehler.Minuten/10;
	buffer[4]=zaehler.Minuten%10;
	buffer[5]=':';
	buffer[6]=zaehler.Sekunden/10;
	buffer[7]=zaehler.Sekunden%10;
	for(uint8_t i=0;i<bitsderrtc;i++){
    2798:	10 38       	cpi	r17, 0x80	; 128
    279a:	59 f7       	brne	.-42     	; 0x2772 <_Z10timerseitev+0xe2>
		}
		else{
			oled.draw_number16x16(buffer[i],i*numbersmalsize,2*charhighte);
		}
	}
}
    279c:	64 96       	adiw	r28, 0x14	; 20
    279e:	0f b6       	in	r0, 0x3f	; 63
    27a0:	f8 94       	cli
    27a2:	de bf       	out	0x3e, r29	; 62
    27a4:	0f be       	out	0x3f, r0	; 63
    27a6:	cd bf       	out	0x3d, r28	; 61
    27a8:	df 91       	pop	r29
    27aa:	cf 91       	pop	r28
    27ac:	1f 91       	pop	r17
    27ae:	0f 91       	pop	r16
    27b0:	ef 90       	pop	r14
    27b2:	df 90       	pop	r13
    27b4:	bf 90       	pop	r11
    27b6:	af 90       	pop	r10
    27b8:	08 95       	ret

000027ba <_Z13Stoppuhrseitev>:

void Stoppuhrseite(){
    27ba:	af 92       	push	r10
    27bc:	bf 92       	push	r11
    27be:	df 92       	push	r13
    27c0:	ef 92       	push	r14
    27c2:	0f 93       	push	r16
    27c4:	1f 93       	push	r17
    27c6:	cf 93       	push	r28
    27c8:	df 93       	push	r29
    27ca:	cd b7       	in	r28, 0x3d	; 61
    27cc:	de b7       	in	r29, 0x3e	; 62
    27ce:	64 97       	sbiw	r28, 0x14	; 20
    27d0:	0f b6       	in	r0, 0x3f	; 63
    27d2:	f8 94       	cli
    27d4:	de bf       	out	0x3e, r29	; 62
    27d6:	0f be       	out	0x3f, r0	; 63
    27d8:	cd bf       	out	0x3d, r28	; 61
	char buffer[20];
	uint8_t buffersize=0;
	oled.clearFrame();
    27da:	82 e4       	ldi	r24, 0x42	; 66
    27dc:	93 e0       	ldi	r25, 0x03	; 3
    27de:	0e 94 ed 02 	call	0x5da	; 0x5da <_ZN7Display10clearFrameEv>
	buffersize=sprintf(buffer,"Stoppuhr: ");
    27e2:	8b e0       	ldi	r24, 0x0B	; 11
    27e4:	e7 e9       	ldi	r30, 0x97	; 151
    27e6:	f2 e0       	ldi	r31, 0x02	; 2
    27e8:	8e 01       	movw	r16, r28
    27ea:	0f 5f       	subi	r16, 0xFF	; 255
    27ec:	1f 4f       	sbci	r17, 0xFF	; 255
    27ee:	d8 01       	movw	r26, r16
    27f0:	01 90       	ld	r0, Z+
    27f2:	0d 92       	st	X+, r0
    27f4:	8a 95       	dec	r24
    27f6:	e1 f7       	brne	.-8      	; 0x27f0 <_Z13Stoppuhrseitev+0x36>
    27f8:	d0 2e       	mov	r13, r16
    27fa:	e1 2e       	mov	r14, r17
    27fc:	58 01       	movw	r10, r16
    27fe:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,0*charhighte);}
    2800:	f5 01       	movw	r30, r10
    2802:	61 91       	ld	r22, Z+
    2804:	5f 01       	movw	r10, r30
    2806:	20 e0       	ldi	r18, 0x00	; 0
    2808:	41 2f       	mov	r20, r17
    280a:	82 e4       	ldi	r24, 0x42	; 66
    280c:	93 e0       	ldi	r25, 0x03	; 3
    280e:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    2812:	1a 5f       	subi	r17, 0xFA	; 250
    2814:	1c 33       	cpi	r17, 0x3C	; 60
    2816:	a1 f7       	brne	.-24     	; 0x2800 <_Z13Stoppuhrseitev+0x46>
	
	buffer[0]=stoppuhr.Stunden/10;
    2818:	90 91 53 07 	lds	r25, 0x0753
    281c:	8d ec       	ldi	r24, 0xCD	; 205
    281e:	98 9f       	mul	r25, r24
    2820:	21 2d       	mov	r18, r1
    2822:	11 24       	eor	r1, r1
    2824:	26 95       	lsr	r18
    2826:	26 95       	lsr	r18
    2828:	26 95       	lsr	r18
    282a:	29 83       	std	Y+1, r18	; 0x01
	buffer[1]=stoppuhr.Stunden%10;
    282c:	22 0f       	add	r18, r18
    282e:	32 2f       	mov	r19, r18
    2830:	33 0f       	add	r19, r19
    2832:	33 0f       	add	r19, r19
    2834:	23 0f       	add	r18, r19
    2836:	92 1b       	sub	r25, r18
    2838:	9a 83       	std	Y+2, r25	; 0x02
	buffer[2]=':';
    283a:	9a e3       	ldi	r25, 0x3A	; 58
    283c:	9b 83       	std	Y+3, r25	; 0x03
	buffer[3]=stoppuhr.Minuten/10;
    283e:	20 91 54 07 	lds	r18, 0x0754
    2842:	28 9f       	mul	r18, r24
    2844:	31 2d       	mov	r19, r1
    2846:	11 24       	eor	r1, r1
    2848:	36 95       	lsr	r19
    284a:	36 95       	lsr	r19
    284c:	36 95       	lsr	r19
    284e:	3c 83       	std	Y+4, r19	; 0x04
	buffer[4]=stoppuhr.Minuten%10;
    2850:	33 0f       	add	r19, r19
    2852:	43 2f       	mov	r20, r19
    2854:	44 0f       	add	r20, r20
    2856:	44 0f       	add	r20, r20
    2858:	34 0f       	add	r19, r20
    285a:	23 1b       	sub	r18, r19
    285c:	2d 83       	std	Y+5, r18	; 0x05
	buffer[5]=':';
    285e:	9e 83       	std	Y+6, r25	; 0x06
	buffer[6]=stoppuhr.Sekunden/10;
    2860:	90 91 55 07 	lds	r25, 0x0755
    2864:	98 9f       	mul	r25, r24
    2866:	81 2d       	mov	r24, r1
    2868:	11 24       	eor	r1, r1
    286a:	86 95       	lsr	r24
    286c:	86 95       	lsr	r24
    286e:	86 95       	lsr	r24
    2870:	8f 83       	std	Y+7, r24	; 0x07
	buffer[7]=stoppuhr.Sekunden%10;
    2872:	88 0f       	add	r24, r24
    2874:	28 2f       	mov	r18, r24
    2876:	22 0f       	add	r18, r18
    2878:	22 0f       	add	r18, r18
    287a:	82 0f       	add	r24, r18
    287c:	98 1b       	sub	r25, r24
    287e:	98 87       	std	Y+8, r25	; 0x08
    2880:	ad 2c       	mov	r10, r13
    2882:	be 2c       	mov	r11, r14
    2884:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<bitsderrtc;i++){
		if (buffer[i]==':')
    2886:	f5 01       	movw	r30, r10
    2888:	61 91       	ld	r22, Z+
    288a:	5f 01       	movw	r10, r30
    288c:	6a 33       	cpi	r22, 0x3A	; 58
    288e:	39 f4       	brne	.+14     	; 0x289e <_Z13Stoppuhrseitev+0xe4>
		{
			oled.draw_ASCI(buffer[i],i*numbersmalsize,2.5*charhighte);
    2890:	24 e1       	ldi	r18, 0x14	; 20
    2892:	41 2f       	mov	r20, r17
    2894:	82 e4       	ldi	r24, 0x42	; 66
    2896:	93 e0       	ldi	r25, 0x03	; 3
    2898:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    289c:	06 c0       	rjmp	.+12     	; 0x28aa <_Z13Stoppuhrseitev+0xf0>
		}
		else{
			oled.draw_number16x16(buffer[i],i*numbersmalsize,2*charhighte);
    289e:	20 e1       	ldi	r18, 0x10	; 16
    28a0:	41 2f       	mov	r20, r17
    28a2:	82 e4       	ldi	r24, 0x42	; 66
    28a4:	93 e0       	ldi	r25, 0x03	; 3
    28a6:	0e 94 26 06 	call	0xc4c	; 0xc4c <_ZN7Display16draw_number16x16Ehhh>
    28aa:	10 5f       	subi	r17, 0xF0	; 240
	buffer[3]=stoppuhr.Minuten/10;
	buffer[4]=stoppuhr.Minuten%10;
	buffer[5]=':';
	buffer[6]=stoppuhr.Sekunden/10;
	buffer[7]=stoppuhr.Sekunden%10;
	for(uint8_t i=0;i<bitsderrtc;i++){
    28ac:	10 38       	cpi	r17, 0x80	; 128
    28ae:	59 f7       	brne	.-42     	; 0x2886 <_Z13Stoppuhrseitev+0xcc>
		}
		else{
			oled.draw_number16x16(buffer[i],i*numbersmalsize,2*charhighte);
		}
	}
}
    28b0:	64 96       	adiw	r28, 0x14	; 20
    28b2:	0f b6       	in	r0, 0x3f	; 63
    28b4:	f8 94       	cli
    28b6:	de bf       	out	0x3e, r29	; 62
    28b8:	0f be       	out	0x3f, r0	; 63
    28ba:	cd bf       	out	0x3d, r28	; 61
    28bc:	df 91       	pop	r29
    28be:	cf 91       	pop	r28
    28c0:	1f 91       	pop	r17
    28c2:	0f 91       	pop	r16
    28c4:	ef 90       	pop	r14
    28c6:	df 90       	pop	r13
    28c8:	bf 90       	pop	r11
    28ca:	af 90       	pop	r10
    28cc:	08 95       	ret

000028ce <_Z14Pressuresensorv>:

void Pressuresensor(){
    28ce:	bf 92       	push	r11
    28d0:	cf 92       	push	r12
    28d2:	df 92       	push	r13
    28d4:	ef 92       	push	r14
    28d6:	ff 92       	push	r15
    28d8:	0f 93       	push	r16
    28da:	1f 93       	push	r17
    28dc:	cf 93       	push	r28
    28de:	df 93       	push	r29
    28e0:	cd b7       	in	r28, 0x3d	; 61
    28e2:	de b7       	in	r29, 0x3e	; 62
    28e4:	64 97       	sbiw	r28, 0x14	; 20
    28e6:	0f b6       	in	r0, 0x3f	; 63
    28e8:	f8 94       	cli
    28ea:	de bf       	out	0x3e, r29	; 62
    28ec:	0f be       	out	0x3f, r0	; 63
    28ee:	cd bf       	out	0x3d, r28	; 61
	Baro.READ_Pressure_once();
    28f0:	8f e2       	ldi	r24, 0x2F	; 47
    28f2:	93 e0       	ldi	r25, 0x03	; 3
    28f4:	0e 94 55 24 	call	0x48aa	; 0x48aa <_ZN8Pressure18READ_Pressure_onceEv>
	Baro.READ_Temperature();
    28f8:	8f e2       	ldi	r24, 0x2F	; 47
    28fa:	93 e0       	ldi	r25, 0x03	; 3
    28fc:	0e 94 dd 24 	call	0x49ba	; 0x49ba <_ZN8Pressure16READ_TemperatureEv>
	char buffer[20];
	uint8_t buffersize=0;
	oled.clearFrame();
    2900:	82 e4       	ldi	r24, 0x42	; 66
    2902:	93 e0       	ldi	r25, 0x03	; 3
    2904:	0e 94 ed 02 	call	0x5da	; 0x5da <_ZN7Display10clearFrameEv>
	header(0);
    2908:	80 e0       	ldi	r24, 0x00	; 0
    290a:	0e 94 19 0a 	call	0x1432	; 0x1432 <_Z6headerh>
	bottom(0);
    290e:	80 e0       	ldi	r24, 0x00	; 0
    2910:	0e 94 01 0b 	call	0x1602	; 0x1602 <_Z6bottomh>
	buffersize=sprintf(buffer,"LPS25H Daten:");
    2914:	8e e0       	ldi	r24, 0x0E	; 14
    2916:	e2 ea       	ldi	r30, 0xA2	; 162
    2918:	f2 e0       	ldi	r31, 0x02	; 2
    291a:	8e 01       	movw	r16, r28
    291c:	0f 5f       	subi	r16, 0xFF	; 255
    291e:	1f 4f       	sbci	r17, 0xFF	; 255
    2920:	d8 01       	movw	r26, r16
    2922:	01 90       	ld	r0, Z+
    2924:	0d 92       	st	X+, r0
    2926:	8a 95       	dec	r24
    2928:	e1 f7       	brne	.-8      	; 0x2922 <_Z14Pressuresensorv+0x54>
    292a:	c0 2e       	mov	r12, r16
    292c:	d1 2e       	mov	r13, r17
    292e:	78 01       	movw	r14, r16
    2930:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,2*charhighte);}
    2932:	f7 01       	movw	r30, r14
    2934:	61 91       	ld	r22, Z+
    2936:	7f 01       	movw	r14, r30
    2938:	20 e1       	ldi	r18, 0x10	; 16
    293a:	41 2f       	mov	r20, r17
    293c:	82 e4       	ldi	r24, 0x42	; 66
    293e:	93 e0       	ldi	r25, 0x03	; 3
    2940:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    2944:	1a 5f       	subi	r17, 0xFA	; 250
    2946:	1e 34       	cpi	r17, 0x4E	; 78
    2948:	a1 f7       	brne	.-24     	; 0x2932 <_Z14Pressuresensorv+0x64>
	buffersize=sprintf(buffer,"%.1f HPa",Baro.Press);
    294a:	ef e2       	ldi	r30, 0x2F	; 47
    294c:	f3 e0       	ldi	r31, 0x03	; 3
    294e:	83 81       	ldd	r24, Z+3	; 0x03
    2950:	8f 93       	push	r24
    2952:	82 81       	ldd	r24, Z+2	; 0x02
    2954:	8f 93       	push	r24
    2956:	81 81       	ldd	r24, Z+1	; 0x01
    2958:	8f 93       	push	r24
    295a:	80 81       	ld	r24, Z
    295c:	8f 93       	push	r24
    295e:	80 eb       	ldi	r24, 0xB0	; 176
    2960:	92 e0       	ldi	r25, 0x02	; 2
    2962:	9f 93       	push	r25
    2964:	8f 93       	push	r24
    2966:	ce 01       	movw	r24, r28
    2968:	01 96       	adiw	r24, 0x01	; 1
    296a:	9f 93       	push	r25
    296c:	8f 93       	push	r24
    296e:	0e 94 46 2f 	call	0x5e8c	; 0x5e8c <sprintf>
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,3*charhighte);}
    2972:	0f b6       	in	r0, 0x3f	; 63
    2974:	f8 94       	cli
    2976:	de bf       	out	0x3e, r29	; 62
    2978:	0f be       	out	0x3f, r0	; 63
    297a:	cd bf       	out	0x3d, r28	; 61
    297c:	88 23       	and	r24, r24
    297e:	d1 f0       	breq	.+52     	; 0x29b4 <_Z14Pressuresensorv+0xe6>
    2980:	81 50       	subi	r24, 0x01	; 1
    2982:	68 94       	set
    2984:	ee 24       	eor	r14, r14
    2986:	e1 f8       	bld	r14, 1
    2988:	f1 2c       	mov	r15, r1
    298a:	ec 0e       	add	r14, r28
    298c:	fd 1e       	adc	r15, r29
    298e:	e8 0e       	add	r14, r24
    2990:	f1 1c       	adc	r15, r1
    2992:	0c 2d       	mov	r16, r12
    2994:	1d 2d       	mov	r17, r13
    2996:	b1 2c       	mov	r11, r1
    2998:	f8 01       	movw	r30, r16
    299a:	61 91       	ld	r22, Z+
    299c:	8f 01       	movw	r16, r30
    299e:	28 e1       	ldi	r18, 0x18	; 24
    29a0:	4b 2d       	mov	r20, r11
    29a2:	82 e4       	ldi	r24, 0x42	; 66
    29a4:	93 e0       	ldi	r25, 0x03	; 3
    29a6:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    29aa:	f6 e0       	ldi	r31, 0x06	; 6
    29ac:	bf 0e       	add	r11, r31
    29ae:	0e 15       	cp	r16, r14
    29b0:	1f 05       	cpc	r17, r15
    29b2:	91 f7       	brne	.-28     	; 0x2998 <_Z14Pressuresensorv+0xca>
	buffersize=sprintf(buffer,"Hoehe: %.1f m",(double)Baro.altitude(Baro.Press));
    29b4:	40 91 2f 03 	lds	r20, 0x032F
    29b8:	50 91 30 03 	lds	r21, 0x0330
    29bc:	60 91 31 03 	lds	r22, 0x0331
    29c0:	70 91 32 03 	lds	r23, 0x0332
    29c4:	8f e2       	ldi	r24, 0x2F	; 47
    29c6:	93 e0       	ldi	r25, 0x03	; 3
    29c8:	0e 94 5a 25 	call	0x4ab4	; 0x4ab4 <_ZN8Pressure8altitudeEd>
    29cc:	9f 93       	push	r25
    29ce:	8f 93       	push	r24
    29d0:	7f 93       	push	r23
    29d2:	6f 93       	push	r22
    29d4:	89 eb       	ldi	r24, 0xB9	; 185
    29d6:	92 e0       	ldi	r25, 0x02	; 2
    29d8:	9f 93       	push	r25
    29da:	8f 93       	push	r24
    29dc:	ce 01       	movw	r24, r28
    29de:	01 96       	adiw	r24, 0x01	; 1
    29e0:	9f 93       	push	r25
    29e2:	8f 93       	push	r24
    29e4:	0e 94 46 2f 	call	0x5e8c	; 0x5e8c <sprintf>
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,4*charhighte);}
    29e8:	0f b6       	in	r0, 0x3f	; 63
    29ea:	f8 94       	cli
    29ec:	de bf       	out	0x3e, r29	; 62
    29ee:	0f be       	out	0x3f, r0	; 63
    29f0:	cd bf       	out	0x3d, r28	; 61
    29f2:	88 23       	and	r24, r24
    29f4:	d1 f0       	breq	.+52     	; 0x2a2a <_Z14Pressuresensorv+0x15c>
    29f6:	81 50       	subi	r24, 0x01	; 1
    29f8:	68 94       	set
    29fa:	ee 24       	eor	r14, r14
    29fc:	e1 f8       	bld	r14, 1
    29fe:	f1 2c       	mov	r15, r1
    2a00:	ec 0e       	add	r14, r28
    2a02:	fd 1e       	adc	r15, r29
    2a04:	e8 0e       	add	r14, r24
    2a06:	f1 1c       	adc	r15, r1
    2a08:	0c 2d       	mov	r16, r12
    2a0a:	1d 2d       	mov	r17, r13
    2a0c:	b1 2c       	mov	r11, r1
    2a0e:	f8 01       	movw	r30, r16
    2a10:	61 91       	ld	r22, Z+
    2a12:	8f 01       	movw	r16, r30
    2a14:	20 e2       	ldi	r18, 0x20	; 32
    2a16:	4b 2d       	mov	r20, r11
    2a18:	82 e4       	ldi	r24, 0x42	; 66
    2a1a:	93 e0       	ldi	r25, 0x03	; 3
    2a1c:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    2a20:	f6 e0       	ldi	r31, 0x06	; 6
    2a22:	bf 0e       	add	r11, r31
    2a24:	0e 15       	cp	r16, r14
    2a26:	1f 05       	cpc	r17, r15
    2a28:	91 f7       	brne	.-28     	; 0x2a0e <_Z14Pressuresensorv+0x140>
	buffersize=sprintf(buffer,"%.1f C",(double)Baro.Tempera);
    2a2a:	e3 e3       	ldi	r30, 0x33	; 51
    2a2c:	f3 e0       	ldi	r31, 0x03	; 3
    2a2e:	83 81       	ldd	r24, Z+3	; 0x03
    2a30:	8f 93       	push	r24
    2a32:	82 81       	ldd	r24, Z+2	; 0x02
    2a34:	8f 93       	push	r24
    2a36:	81 81       	ldd	r24, Z+1	; 0x01
    2a38:	8f 93       	push	r24
    2a3a:	80 81       	ld	r24, Z
    2a3c:	8f 93       	push	r24
    2a3e:	89 e1       	ldi	r24, 0x19	; 25
    2a40:	92 e0       	ldi	r25, 0x02	; 2
    2a42:	9f 93       	push	r25
    2a44:	8f 93       	push	r24
    2a46:	ce 01       	movw	r24, r28
    2a48:	01 96       	adiw	r24, 0x01	; 1
    2a4a:	9f 93       	push	r25
    2a4c:	8f 93       	push	r24
    2a4e:	0e 94 46 2f 	call	0x5e8c	; 0x5e8c <sprintf>
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,6*charhighte);}
    2a52:	0f b6       	in	r0, 0x3f	; 63
    2a54:	f8 94       	cli
    2a56:	de bf       	out	0x3e, r29	; 62
    2a58:	0f be       	out	0x3f, r0	; 63
    2a5a:	cd bf       	out	0x3d, r28	; 61
    2a5c:	88 23       	and	r24, r24
    2a5e:	d1 f0       	breq	.+52     	; 0x2a94 <_Z14Pressuresensorv+0x1c6>
    2a60:	81 50       	subi	r24, 0x01	; 1
    2a62:	68 94       	set
    2a64:	ee 24       	eor	r14, r14
    2a66:	e1 f8       	bld	r14, 1
    2a68:	f1 2c       	mov	r15, r1
    2a6a:	ec 0e       	add	r14, r28
    2a6c:	fd 1e       	adc	r15, r29
    2a6e:	e8 0e       	add	r14, r24
    2a70:	f1 1c       	adc	r15, r1
    2a72:	0c 2d       	mov	r16, r12
    2a74:	1d 2d       	mov	r17, r13
    2a76:	d1 2c       	mov	r13, r1
    2a78:	f8 01       	movw	r30, r16
    2a7a:	61 91       	ld	r22, Z+
    2a7c:	8f 01       	movw	r16, r30
    2a7e:	20 e3       	ldi	r18, 0x30	; 48
    2a80:	4d 2d       	mov	r20, r13
    2a82:	82 e4       	ldi	r24, 0x42	; 66
    2a84:	93 e0       	ldi	r25, 0x03	; 3
    2a86:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    2a8a:	f6 e0       	ldi	r31, 0x06	; 6
    2a8c:	df 0e       	add	r13, r31
    2a8e:	0e 15       	cp	r16, r14
    2a90:	1f 05       	cpc	r17, r15
    2a92:	91 f7       	brne	.-28     	; 0x2a78 <_Z14Pressuresensorv+0x1aa>
	//buffersize=sprintf(buffer,"%i",Baro.Wertedruck[1]);
	//for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,4*charhighte);}
	//buffersize=sprintf(buffer,"%i",Baro.Wertedruck[2]);
	//for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,5*charhighte);}
}
    2a94:	64 96       	adiw	r28, 0x14	; 20
    2a96:	0f b6       	in	r0, 0x3f	; 63
    2a98:	f8 94       	cli
    2a9a:	de bf       	out	0x3e, r29	; 62
    2a9c:	0f be       	out	0x3f, r0	; 63
    2a9e:	cd bf       	out	0x3d, r28	; 61
    2aa0:	df 91       	pop	r29
    2aa2:	cf 91       	pop	r28
    2aa4:	1f 91       	pop	r17
    2aa6:	0f 91       	pop	r16
    2aa8:	ff 90       	pop	r15
    2aaa:	ef 90       	pop	r14
    2aac:	df 90       	pop	r13
    2aae:	cf 90       	pop	r12
    2ab0:	bf 90       	pop	r11
    2ab2:	08 95       	ret

00002ab4 <_Z13uhreinstellenv>:

void uhreinstellen(){
    2ab4:	2f 92       	push	r2
    2ab6:	3f 92       	push	r3
    2ab8:	4f 92       	push	r4
    2aba:	5f 92       	push	r5
    2abc:	6f 92       	push	r6
    2abe:	7f 92       	push	r7
    2ac0:	8f 92       	push	r8
    2ac2:	9f 92       	push	r9
    2ac4:	af 92       	push	r10
    2ac6:	bf 92       	push	r11
    2ac8:	cf 92       	push	r12
    2aca:	df 92       	push	r13
    2acc:	ef 92       	push	r14
    2ace:	ff 92       	push	r15
    2ad0:	0f 93       	push	r16
    2ad2:	1f 93       	push	r17
    2ad4:	cf 93       	push	r28
    2ad6:	df 93       	push	r29
    2ad8:	cd b7       	in	r28, 0x3d	; 61
    2ada:	de b7       	in	r29, 0x3e	; 62
    2adc:	66 97       	sbiw	r28, 0x16	; 22
    2ade:	0f b6       	in	r0, 0x3f	; 63
    2ae0:	f8 94       	cli
    2ae2:	de bf       	out	0x3e, r29	; 62
    2ae4:	0f be       	out	0x3f, r0	; 63
    2ae6:	cd bf       	out	0x3d, r28	; 61
	rtc.RTCstop();
    2ae8:	89 e7       	ldi	r24, 0x79	; 121
    2aea:	97 e0       	ldi	r25, 0x07	; 7
    2aec:	0e 94 d9 26 	call	0x4db2	; 0x4db2 <_ZN3RTC7RTCstopEv>
	
	oled.clearFrame();
    2af0:	82 e4       	ldi	r24, 0x42	; 66
    2af2:	93 e0       	ldi	r25, 0x03	; 3
    2af4:	0e 94 ed 02 	call	0x5da	; 0x5da <_ZN7Display10clearFrameEv>
	char buffer[20];
	uint8_t buffersize;
	uint8_t pos=0;
    2af8:	91 2c       	mov	r9, r1
	while(pos<11){
		buffersize=sprintf(buffer,"Uhreinstellung");
    2afa:	0f 2e       	mov	r0, r31
    2afc:	ff e0       	ldi	r31, 0x0F	; 15
    2afe:	6f 2e       	mov	r6, r31
    2b00:	f0 2d       	mov	r31, r0
    2b02:	ce 01       	movw	r24, r28
    2b04:	01 96       	adiw	r24, 0x01	; 1
    2b06:	7c 01       	movw	r14, r24
    2b08:	78 2e       	mov	r7, r24
    2b0a:	8f 2c       	mov	r8, r15
    2b0c:	b1 2c       	mov	r11, r1
		for(uint8_t i = 0; i<buffersize;i++){
			oled.draw_ASCI(buffer[i],charsize*i,0);
		}
		buffersize=sprintf(buffer,"--------------");
    2b0e:	8d 8b       	std	Y+21, r24	; 0x15
    2b10:	fe 8a       	std	Y+22, r15	; 0x16
		for(uint8_t i = 0; i<buffersize;i++){
			oled.draw_ASCI(buffer[i],charsize*i,8);
		}
		buffer[0]=rtc.Stunden/10;
    2b12:	0f 2e       	mov	r0, r31
    2b14:	fd ec       	ldi	r31, 0xCD	; 205
    2b16:	af 2e       	mov	r10, r31
    2b18:	f0 2d       	mov	r31, r0
		buffer[1]=rtc.Stunden%10;
		buffer[2]=':';
		buffer[3]=rtc.Minuten/10;
		buffer[4]=rtc.Minuten%10;
		buffer[5]=' ';
		buffer[6]=rtc.Tag/10;
    2b1a:	0f 2e       	mov	r0, r31
    2b1c:	fd e8       	ldi	r31, 0x8D	; 141
    2b1e:	4f 2e       	mov	r4, r31
    2b20:	f7 e0       	ldi	r31, 0x07	; 7
    2b22:	5f 2e       	mov	r5, r31
    2b24:	f0 2d       	mov	r31, r0
		buffer[7]=rtc.Tag%10;
		buffer[8]='.';
		buffer[9]=rtc.Monat/10;
    2b26:	0f 2e       	mov	r0, r31
    2b28:	ff e8       	ldi	r31, 0x8F	; 143
    2b2a:	cf 2e       	mov	r12, r31
    2b2c:	f7 e0       	ldi	r31, 0x07	; 7
    2b2e:	df 2e       	mov	r13, r31
    2b30:	f0 2d       	mov	r31, r0
	oled.clearFrame();
	char buffer[20];
	uint8_t buffersize;
	uint8_t pos=0;
	while(pos<11){
		buffersize=sprintf(buffer,"Uhreinstellung");
    2b32:	e7 ec       	ldi	r30, 0xC7	; 199
    2b34:	f2 e0       	ldi	r31, 0x02	; 2
    2b36:	a7 2d       	mov	r26, r7
    2b38:	b8 2d       	mov	r27, r8
    2b3a:	86 2d       	mov	r24, r6
    2b3c:	01 90       	ld	r0, Z+
    2b3e:	0d 92       	st	X+, r0
    2b40:	8a 95       	dec	r24
    2b42:	e1 f7       	brne	.-8      	; 0x2b3c <_Z13uhreinstellenv+0x88>
    2b44:	27 2c       	mov	r2, r7
    2b46:	38 2c       	mov	r3, r8
    2b48:	1b 2d       	mov	r17, r11
		for(uint8_t i = 0; i<buffersize;i++){
			oled.draw_ASCI(buffer[i],charsize*i,0);
    2b4a:	f1 01       	movw	r30, r2
    2b4c:	61 91       	ld	r22, Z+
    2b4e:	1f 01       	movw	r2, r30
    2b50:	2b 2d       	mov	r18, r11
    2b52:	41 2f       	mov	r20, r17
    2b54:	82 e4       	ldi	r24, 0x42	; 66
    2b56:	93 e0       	ldi	r25, 0x03	; 3
    2b58:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    2b5c:	1a 5f       	subi	r17, 0xFA	; 250
	char buffer[20];
	uint8_t buffersize;
	uint8_t pos=0;
	while(pos<11){
		buffersize=sprintf(buffer,"Uhreinstellung");
		for(uint8_t i = 0; i<buffersize;i++){
    2b5e:	14 35       	cpi	r17, 0x54	; 84
    2b60:	a1 f7       	brne	.-24     	; 0x2b4a <_Z13uhreinstellenv+0x96>
			oled.draw_ASCI(buffer[i],charsize*i,0);
		}
		buffersize=sprintf(buffer,"--------------");
    2b62:	ef e0       	ldi	r30, 0x0F	; 15
    2b64:	f1 e0       	ldi	r31, 0x01	; 1
    2b66:	a7 2d       	mov	r26, r7
    2b68:	b8 2d       	mov	r27, r8
    2b6a:	86 2d       	mov	r24, r6
    2b6c:	01 90       	ld	r0, Z+
    2b6e:	0d 92       	st	X+, r0
    2b70:	8a 95       	dec	r24
    2b72:	e1 f7       	brne	.-8      	; 0x2b6c <_Z13uhreinstellenv+0xb8>
    2b74:	2d 88       	ldd	r2, Y+21	; 0x15
    2b76:	3e 88       	ldd	r3, Y+22	; 0x16
    2b78:	1b 2d       	mov	r17, r11
		for(uint8_t i = 0; i<buffersize;i++){
			oled.draw_ASCI(buffer[i],charsize*i,8);
    2b7a:	f1 01       	movw	r30, r2
    2b7c:	61 91       	ld	r22, Z+
    2b7e:	1f 01       	movw	r2, r30
    2b80:	28 e0       	ldi	r18, 0x08	; 8
    2b82:	41 2f       	mov	r20, r17
    2b84:	82 e4       	ldi	r24, 0x42	; 66
    2b86:	93 e0       	ldi	r25, 0x03	; 3
    2b88:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    2b8c:	1a 5f       	subi	r17, 0xFA	; 250
		buffersize=sprintf(buffer,"Uhreinstellung");
		for(uint8_t i = 0; i<buffersize;i++){
			oled.draw_ASCI(buffer[i],charsize*i,0);
		}
		buffersize=sprintf(buffer,"--------------");
		for(uint8_t i = 0; i<buffersize;i++){
    2b8e:	14 35       	cpi	r17, 0x54	; 84
    2b90:	a1 f7       	brne	.-24     	; 0x2b7a <_Z13uhreinstellenv+0xc6>
			oled.draw_ASCI(buffer[i],charsize*i,8);
		}
		buffer[0]=rtc.Stunden/10;
    2b92:	e9 e8       	ldi	r30, 0x89	; 137
    2b94:	f7 e0       	ldi	r31, 0x07	; 7
    2b96:	80 81       	ld	r24, Z
    2b98:	8a 9d       	mul	r24, r10
    2b9a:	91 2d       	mov	r25, r1
    2b9c:	11 24       	eor	r1, r1
    2b9e:	96 95       	lsr	r25
    2ba0:	96 95       	lsr	r25
    2ba2:	96 95       	lsr	r25
    2ba4:	99 83       	std	Y+1, r25	; 0x01
		buffer[1]=rtc.Stunden%10;
    2ba6:	99 0f       	add	r25, r25
    2ba8:	29 2f       	mov	r18, r25
    2baa:	22 0f       	add	r18, r18
    2bac:	22 0f       	add	r18, r18
    2bae:	92 0f       	add	r25, r18
    2bb0:	89 1b       	sub	r24, r25
    2bb2:	8a 83       	std	Y+2, r24	; 0x02
		buffer[2]=':';
    2bb4:	fa e3       	ldi	r31, 0x3A	; 58
    2bb6:	fb 83       	std	Y+3, r31	; 0x03
		buffer[3]=rtc.Minuten/10;
    2bb8:	ea e8       	ldi	r30, 0x8A	; 138
    2bba:	f7 e0       	ldi	r31, 0x07	; 7
    2bbc:	80 81       	ld	r24, Z
    2bbe:	8a 9d       	mul	r24, r10
    2bc0:	91 2d       	mov	r25, r1
    2bc2:	11 24       	eor	r1, r1
    2bc4:	96 95       	lsr	r25
    2bc6:	96 95       	lsr	r25
    2bc8:	96 95       	lsr	r25
    2bca:	9c 83       	std	Y+4, r25	; 0x04
		buffer[4]=rtc.Minuten%10;
    2bcc:	99 0f       	add	r25, r25
    2bce:	29 2f       	mov	r18, r25
    2bd0:	22 0f       	add	r18, r18
    2bd2:	22 0f       	add	r18, r18
    2bd4:	92 0f       	add	r25, r18
    2bd6:	89 1b       	sub	r24, r25
    2bd8:	8d 83       	std	Y+5, r24	; 0x05
		buffer[5]=' ';
    2bda:	80 e2       	ldi	r24, 0x20	; 32
    2bdc:	8e 83       	std	Y+6, r24	; 0x06
		buffer[6]=rtc.Tag/10;
    2bde:	f2 01       	movw	r30, r4
    2be0:	80 81       	ld	r24, Z
    2be2:	8a 9d       	mul	r24, r10
    2be4:	91 2d       	mov	r25, r1
    2be6:	11 24       	eor	r1, r1
    2be8:	96 95       	lsr	r25
    2bea:	96 95       	lsr	r25
    2bec:	96 95       	lsr	r25
    2bee:	9f 83       	std	Y+7, r25	; 0x07
		buffer[7]=rtc.Tag%10;
    2bf0:	99 0f       	add	r25, r25
    2bf2:	29 2f       	mov	r18, r25
    2bf4:	22 0f       	add	r18, r18
    2bf6:	22 0f       	add	r18, r18
    2bf8:	92 0f       	add	r25, r18
    2bfa:	89 1b       	sub	r24, r25
    2bfc:	88 87       	std	Y+8, r24	; 0x08
		buffer[8]='.';
    2bfe:	8e e2       	ldi	r24, 0x2E	; 46
    2c00:	89 87       	std	Y+9, r24	; 0x09
		buffer[9]=rtc.Monat/10;
    2c02:	f6 01       	movw	r30, r12
    2c04:	90 81       	ld	r25, Z
    2c06:	9a 9d       	mul	r25, r10
    2c08:	21 2d       	mov	r18, r1
    2c0a:	11 24       	eor	r1, r1
    2c0c:	26 95       	lsr	r18
    2c0e:	26 95       	lsr	r18
    2c10:	26 95       	lsr	r18
    2c12:	2a 87       	std	Y+10, r18	; 0x0a
		buffer[10]=rtc.Monat%10;
    2c14:	22 0f       	add	r18, r18
    2c16:	32 2f       	mov	r19, r18
    2c18:	33 0f       	add	r19, r19
    2c1a:	33 0f       	add	r19, r19
    2c1c:	23 0f       	add	r18, r19
    2c1e:	92 1b       	sub	r25, r18
    2c20:	9b 87       	std	Y+11, r25	; 0x0b
		buffer[11]='.';
    2c22:	8c 87       	std	Y+12, r24	; 0x0c
		buffer[12]=rtc.Jahr/10;
    2c24:	e0 e9       	ldi	r30, 0x90	; 144
    2c26:	f7 e0       	ldi	r31, 0x07	; 7
    2c28:	80 81       	ld	r24, Z
    2c2a:	8a 9d       	mul	r24, r10
    2c2c:	91 2d       	mov	r25, r1
    2c2e:	11 24       	eor	r1, r1
    2c30:	96 95       	lsr	r25
    2c32:	96 95       	lsr	r25
    2c34:	96 95       	lsr	r25
    2c36:	9d 87       	std	Y+13, r25	; 0x0d
		buffer[13]=rtc.Jahr%10;
    2c38:	99 0f       	add	r25, r25
    2c3a:	29 2f       	mov	r18, r25
    2c3c:	22 0f       	add	r18, r18
    2c3e:	22 0f       	add	r18, r18
    2c40:	92 0f       	add	r25, r18
    2c42:	89 1b       	sub	r24, r25
    2c44:	8e 87       	std	Y+14, r24	; 0x0e
    2c46:	3b 2c       	mov	r3, r11
    2c48:	01 e0       	ldi	r16, 0x01	; 1
    2c4a:	1b 2d       	mov	r17, r11
    2c4c:	04 c0       	rjmp	.+8      	; 0x2c56 <_Z13uhreinstellenv+0x1a2>
    2c4e:	1f 5f       	subi	r17, 0xFF	; 255
    2c50:	0f 5f       	subi	r16, 0xFF	; 255
    2c52:	f0 e1       	ldi	r31, 0x10	; 16
    2c54:	3f 0e       	add	r3, r31
		buffersize=14;
		for(uint8_t i = 0; i<5;i++){
			if(i!=2){
    2c56:	12 30       	cpi	r17, 0x02	; 2
    2c58:	69 f0       	breq	.+26     	; 0x2c74 <_Z13uhreinstellenv+0x1c0>
				oled.draw_number16x16(buffer[i],i*numbersmalsize,2*charhighte);
    2c5a:	20 e1       	ldi	r18, 0x10	; 16
    2c5c:	43 2d       	mov	r20, r3
    2c5e:	f7 01       	movw	r30, r14
    2c60:	e1 0f       	add	r30, r17
    2c62:	f1 1d       	adc	r31, r1
    2c64:	60 81       	ld	r22, Z
    2c66:	82 e4       	ldi	r24, 0x42	; 66
    2c68:	93 e0       	ldi	r25, 0x03	; 3
    2c6a:	0e 94 26 06 	call	0xc4c	; 0xc4c <_ZN7Display16draw_number16x16Ehhh>
		buffer[10]=rtc.Monat%10;
		buffer[11]='.';
		buffer[12]=rtc.Jahr/10;
		buffer[13]=rtc.Jahr%10;
		buffersize=14;
		for(uint8_t i = 0; i<5;i++){
    2c6e:	05 30       	cpi	r16, 0x05	; 5
    2c70:	70 f3       	brcs	.-36     	; 0x2c4e <_Z13uhreinstellenv+0x19a>
    2c72:	08 c0       	rjmp	.+16     	; 0x2c84 <_Z13uhreinstellenv+0x1d0>
			if(i!=2){
				oled.draw_number16x16(buffer[i],i*numbersmalsize,2*charhighte);
			}
			else {
				oled.draw_ASCI(buffer[i],i*numbersmalsize+numbersmalsize/2,2*charhighte+charhighte/2);
    2c74:	24 e1       	ldi	r18, 0x14	; 20
    2c76:	48 e2       	ldi	r20, 0x28	; 40
    2c78:	6b 81       	ldd	r22, Y+3	; 0x03
    2c7a:	82 e4       	ldi	r24, 0x42	; 66
    2c7c:	93 e0       	ldi	r25, 0x03	; 3
    2c7e:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    2c82:	e5 cf       	rjmp	.-54     	; 0x2c4e <_Z13uhreinstellenv+0x19a>
    2c84:	8e 01       	movw	r16, r28
    2c86:	09 5f       	subi	r16, 0xF9	; 249
    2c88:	1f 4f       	sbci	r17, 0xFF	; 255
		buffer[10]=rtc.Monat%10;
		buffer[11]='.';
		buffer[12]=rtc.Jahr/10;
		buffer[13]=rtc.Jahr%10;
		buffersize=14;
		for(uint8_t i = 0; i<5;i++){
    2c8a:	2b 2c       	mov	r2, r11
    2c8c:	0f 2e       	mov	r0, r31
    2c8e:	f6 e0       	ldi	r31, 0x06	; 6
    2c90:	3f 2e       	mov	r3, r31
    2c92:	f0 2d       	mov	r31, r0
			else {
				oled.draw_ASCI(buffer[i],i*numbersmalsize+numbersmalsize/2,2*charhighte+charhighte/2);
			}
		}
		for(uint8_t i = 6; i<buffersize;i++){
			if(i!=8 && i!=11){
    2c94:	88 e0       	ldi	r24, 0x08	; 8
    2c96:	38 16       	cp	r3, r24
    2c98:	61 f0       	breq	.+24     	; 0x2cb2 <_Z13uhreinstellenv+0x1fe>
    2c9a:	9b e0       	ldi	r25, 0x0B	; 11
    2c9c:	39 16       	cp	r3, r25
    2c9e:	49 f0       	breq	.+18     	; 0x2cb2 <_Z13uhreinstellenv+0x1fe>
				oled.draw_number16x16(buffer[i],i*numbersmalsize-6*numbersmalsize,4*charhighte);
    2ca0:	20 e2       	ldi	r18, 0x20	; 32
    2ca2:	42 2d       	mov	r20, r2
    2ca4:	f8 01       	movw	r30, r16
    2ca6:	60 81       	ld	r22, Z
    2ca8:	82 e4       	ldi	r24, 0x42	; 66
    2caa:	93 e0       	ldi	r25, 0x03	; 3
    2cac:	0e 94 26 06 	call	0xc4c	; 0xc4c <_ZN7Display16draw_number16x16Ehhh>
    2cb0:	09 c0       	rjmp	.+18     	; 0x2cc4 <_Z13uhreinstellenv+0x210>
			}
			else {
				oled.draw_ASCI(buffer[i],i*numbersmalsize+numbersmalsize/2-6*numbersmalsize,5*charhighte);
    2cb2:	28 e2       	ldi	r18, 0x28	; 40
    2cb4:	48 e0       	ldi	r20, 0x08	; 8
    2cb6:	42 0d       	add	r20, r2
    2cb8:	f8 01       	movw	r30, r16
    2cba:	60 81       	ld	r22, Z
    2cbc:	82 e4       	ldi	r24, 0x42	; 66
    2cbe:	93 e0       	ldi	r25, 0x03	; 3
    2cc0:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
			}
			else {
				oled.draw_ASCI(buffer[i],i*numbersmalsize+numbersmalsize/2,2*charhighte+charhighte/2);
			}
		}
		for(uint8_t i = 6; i<buffersize;i++){
    2cc4:	33 94       	inc	r3
    2cc6:	0f 5f       	subi	r16, 0xFF	; 255
    2cc8:	1f 4f       	sbci	r17, 0xFF	; 255
    2cca:	f0 e1       	ldi	r31, 0x10	; 16
    2ccc:	2f 0e       	add	r2, r31
    2cce:	8e e0       	ldi	r24, 0x0E	; 14
    2cd0:	38 12       	cpse	r3, r24
    2cd2:	e0 cf       	rjmp	.-64     	; 0x2c94 <_Z13uhreinstellenv+0x1e0>
			else {
				oled.draw_ASCI(buffer[i],i*numbersmalsize+numbersmalsize/2-6*numbersmalsize,5*charhighte);
			}
		}

		oled.sendFrame();
    2cd4:	82 e4       	ldi	r24, 0x42	; 66
    2cd6:	93 e0       	ldi	r25, 0x03	; 3
    2cd8:	0e 94 93 03 	call	0x726	; 0x726 <_ZN7Display9sendFrameEv>
		oled.clearFrame();
    2cdc:	82 e4       	ldi	r24, 0x42	; 66
    2cde:	93 e0       	ldi	r25, 0x03	; 3
    2ce0:	0e 94 ed 02 	call	0x5da	; 0x5da <_ZN7Display10clearFrameEv>
		switch (pos) {
    2ce4:	89 2d       	mov	r24, r9
    2ce6:	90 e0       	ldi	r25, 0x00	; 0
    2ce8:	8a 30       	cpi	r24, 0x0A	; 10
    2cea:	91 05       	cpc	r25, r1
    2cec:	08 f0       	brcs	.+2      	; 0x2cf0 <_Z13uhreinstellenv+0x23c>
    2cee:	47 c2       	rjmp	.+1166   	; 0x317e <_Z13uhreinstellenv+0x6ca>
    2cf0:	fc 01       	movw	r30, r24
    2cf2:	ec 5c       	subi	r30, 0xCC	; 204
    2cf4:	ff 4f       	sbci	r31, 0xFF	; 255
    2cf6:	0c 94 e9 2d 	jmp	0x5bd2	; 0x5bd2 <__tablejump2__>
			case 0:
				rtc.Stunden=Tastatur.ZahlenausTastatur()*10;
    2cfa:	81 e4       	ldi	r24, 0x41	; 65
    2cfc:	93 e0       	ldi	r25, 0x03	; 3
    2cfe:	0e 94 56 21 	call	0x42ac	; 0x42ac <_ZN9Interface17ZahlenausTastaturEv>
    2d02:	88 0f       	add	r24, r24
    2d04:	98 2f       	mov	r25, r24
    2d06:	99 0f       	add	r25, r25
    2d08:	99 0f       	add	r25, r25
    2d0a:	89 0f       	add	r24, r25
				if(rtc.Stunden>=24){
    2d0c:	88 31       	cpi	r24, 0x18	; 24
    2d0e:	08 f4       	brcc	.+2      	; 0x2d12 <_Z13uhreinstellenv+0x25e>
    2d10:	51 c2       	rjmp	.+1186   	; 0x31b4 <_Z13uhreinstellenv+0x700>
					rtc.Stunden=0;
    2d12:	e9 e8       	ldi	r30, 0x89	; 137
    2d14:	f7 e0       	ldi	r31, 0x07	; 7
    2d16:	10 82       	st	Z, r1
					pos=-1;
					buffersize=sprintf(buffer,"Stunden falsch");
    2d18:	e6 ed       	ldi	r30, 0xD6	; 214
    2d1a:	f2 e0       	ldi	r31, 0x02	; 2
    2d1c:	a7 2d       	mov	r26, r7
    2d1e:	b8 2d       	mov	r27, r8
    2d20:	86 2d       	mov	r24, r6
    2d22:	01 90       	ld	r0, Z+
    2d24:	0d 92       	st	X+, r0
    2d26:	8a 95       	dec	r24
    2d28:	e1 f7       	brne	.-8      	; 0x2d22 <_Z13uhreinstellenv+0x26e>
    2d2a:	2d 88       	ldd	r2, Y+21	; 0x15
    2d2c:	3e 88       	ldd	r3, Y+22	; 0x16
    2d2e:	1b 2d       	mov	r17, r11
					for(uint8_t i = 0; i<buffersize;i++){
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
    2d30:	f1 01       	movw	r30, r2
    2d32:	61 91       	ld	r22, Z+
    2d34:	1f 01       	movw	r2, r30
    2d36:	28 e3       	ldi	r18, 0x38	; 56
    2d38:	41 2f       	mov	r20, r17
    2d3a:	82 e4       	ldi	r24, 0x42	; 66
    2d3c:	93 e0       	ldi	r25, 0x03	; 3
    2d3e:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    2d42:	1a 5f       	subi	r17, 0xFA	; 250
				rtc.Stunden=Tastatur.ZahlenausTastatur()*10;
				if(rtc.Stunden>=24){
					rtc.Stunden=0;
					pos=-1;
					buffersize=sprintf(buffer,"Stunden falsch");
					for(uint8_t i = 0; i<buffersize;i++){
    2d44:	14 35       	cpi	r17, 0x54	; 84
    2d46:	a1 f7       	brne	.-24     	; 0x2d30 <_Z13uhreinstellenv+0x27c>
    2d48:	39 c2       	rjmp	.+1138   	; 0x31bc <_Z13uhreinstellenv+0x708>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 1:
				rtc.Stunden+=Tastatur.ZahlenausTastatur();
    2d4a:	81 e4       	ldi	r24, 0x41	; 65
    2d4c:	93 e0       	ldi	r25, 0x03	; 3
    2d4e:	0e 94 56 21 	call	0x42ac	; 0x42ac <_ZN9Interface17ZahlenausTastaturEv>
    2d52:	e9 e8       	ldi	r30, 0x89	; 137
    2d54:	f7 e0       	ldi	r31, 0x07	; 7
    2d56:	20 81       	ld	r18, Z
    2d58:	90 e0       	ldi	r25, 0x00	; 0
    2d5a:	82 0f       	add	r24, r18
    2d5c:	91 1d       	adc	r25, r1
				if(rtc.Stunden>=24){
    2d5e:	88 31       	cpi	r24, 0x18	; 24
    2d60:	10 f4       	brcc	.+4      	; 0x2d66 <_Z13uhreinstellenv+0x2b2>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 1:
				rtc.Stunden+=Tastatur.ZahlenausTastatur();
    2d62:	80 83       	st	Z, r24
    2d64:	5e c2       	rjmp	.+1212   	; 0x3222 <_Z13uhreinstellenv+0x76e>
				if(rtc.Stunden>=24){
					rtc.Stunden=0;
    2d66:	e9 e8       	ldi	r30, 0x89	; 137
    2d68:	f7 e0       	ldi	r31, 0x07	; 7
    2d6a:	10 82       	st	Z, r1
					pos=-1;
					buffersize=sprintf(buffer,"Stunden falsch");
    2d6c:	e6 ed       	ldi	r30, 0xD6	; 214
    2d6e:	f2 e0       	ldi	r31, 0x02	; 2
    2d70:	a7 2d       	mov	r26, r7
    2d72:	b8 2d       	mov	r27, r8
    2d74:	86 2d       	mov	r24, r6
    2d76:	01 90       	ld	r0, Z+
    2d78:	0d 92       	st	X+, r0
    2d7a:	8a 95       	dec	r24
    2d7c:	e1 f7       	brne	.-8      	; 0x2d76 <_Z13uhreinstellenv+0x2c2>
    2d7e:	2d 88       	ldd	r2, Y+21	; 0x15
    2d80:	3e 88       	ldd	r3, Y+22	; 0x16
    2d82:	1b 2d       	mov	r17, r11
					for(uint8_t i = 0; i<buffersize;i++){
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
    2d84:	f1 01       	movw	r30, r2
    2d86:	61 91       	ld	r22, Z+
    2d88:	1f 01       	movw	r2, r30
    2d8a:	28 e3       	ldi	r18, 0x38	; 56
    2d8c:	41 2f       	mov	r20, r17
    2d8e:	82 e4       	ldi	r24, 0x42	; 66
    2d90:	93 e0       	ldi	r25, 0x03	; 3
    2d92:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    2d96:	1a 5f       	subi	r17, 0xFA	; 250
				rtc.Stunden+=Tastatur.ZahlenausTastatur();
				if(rtc.Stunden>=24){
					rtc.Stunden=0;
					pos=-1;
					buffersize=sprintf(buffer,"Stunden falsch");
					for(uint8_t i = 0; i<buffersize;i++){
    2d98:	14 35       	cpi	r17, 0x54	; 84
    2d9a:	a1 f7       	brne	.-24     	; 0x2d84 <_Z13uhreinstellenv+0x2d0>
    2d9c:	12 c2       	rjmp	.+1060   	; 0x31c2 <_Z13uhreinstellenv+0x70e>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 2:
				rtc.Minuten=Tastatur.ZahlenausTastatur()*10;
    2d9e:	81 e4       	ldi	r24, 0x41	; 65
    2da0:	93 e0       	ldi	r25, 0x03	; 3
    2da2:	0e 94 56 21 	call	0x42ac	; 0x42ac <_ZN9Interface17ZahlenausTastaturEv>
    2da6:	88 0f       	add	r24, r24
    2da8:	98 2f       	mov	r25, r24
    2daa:	99 0f       	add	r25, r25
    2dac:	99 0f       	add	r25, r25
    2dae:	89 0f       	add	r24, r25
				if(rtc.Minuten>=60){
    2db0:	8c 33       	cpi	r24, 0x3C	; 60
    2db2:	20 f4       	brcc	.+8      	; 0x2dbc <_Z13uhreinstellenv+0x308>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 2:
				rtc.Minuten=Tastatur.ZahlenausTastatur()*10;
    2db4:	ea e8       	ldi	r30, 0x8A	; 138
    2db6:	f7 e0       	ldi	r31, 0x07	; 7
    2db8:	80 83       	st	Z, r24
    2dba:	33 c2       	rjmp	.+1126   	; 0x3222 <_Z13uhreinstellenv+0x76e>
				if(rtc.Minuten>=60){
					rtc.Minuten=0;
    2dbc:	ea e8       	ldi	r30, 0x8A	; 138
    2dbe:	f7 e0       	ldi	r31, 0x07	; 7
    2dc0:	10 82       	st	Z, r1
					pos=1;
					buffersize=sprintf(buffer,"Minuten falsch");
    2dc2:	e5 ee       	ldi	r30, 0xE5	; 229
    2dc4:	f2 e0       	ldi	r31, 0x02	; 2
    2dc6:	a7 2d       	mov	r26, r7
    2dc8:	b8 2d       	mov	r27, r8
    2dca:	86 2d       	mov	r24, r6
    2dcc:	01 90       	ld	r0, Z+
    2dce:	0d 92       	st	X+, r0
    2dd0:	8a 95       	dec	r24
    2dd2:	e1 f7       	brne	.-8      	; 0x2dcc <_Z13uhreinstellenv+0x318>
    2dd4:	2d 88       	ldd	r2, Y+21	; 0x15
    2dd6:	3e 88       	ldd	r3, Y+22	; 0x16
    2dd8:	1b 2d       	mov	r17, r11
					for(uint8_t i = 0; i<buffersize;i++){
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
    2dda:	f1 01       	movw	r30, r2
    2ddc:	61 91       	ld	r22, Z+
    2dde:	1f 01       	movw	r2, r30
    2de0:	28 e3       	ldi	r18, 0x38	; 56
    2de2:	41 2f       	mov	r20, r17
    2de4:	82 e4       	ldi	r24, 0x42	; 66
    2de6:	93 e0       	ldi	r25, 0x03	; 3
    2de8:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    2dec:	1a 5f       	subi	r17, 0xFA	; 250
				rtc.Minuten=Tastatur.ZahlenausTastatur()*10;
				if(rtc.Minuten>=60){
					rtc.Minuten=0;
					pos=1;
					buffersize=sprintf(buffer,"Minuten falsch");
					for(uint8_t i = 0; i<buffersize;i++){
    2dee:	14 35       	cpi	r17, 0x54	; 84
    2df0:	a1 f7       	brne	.-24     	; 0x2dda <_Z13uhreinstellenv+0x326>
    2df2:	ea c1       	rjmp	.+980    	; 0x31c8 <_Z13uhreinstellenv+0x714>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 3:
				rtc.Minuten+=Tastatur.ZahlenausTastatur();
    2df4:	81 e4       	ldi	r24, 0x41	; 65
    2df6:	93 e0       	ldi	r25, 0x03	; 3
    2df8:	0e 94 56 21 	call	0x42ac	; 0x42ac <_ZN9Interface17ZahlenausTastaturEv>
    2dfc:	ea e8       	ldi	r30, 0x8A	; 138
    2dfe:	f7 e0       	ldi	r31, 0x07	; 7
    2e00:	20 81       	ld	r18, Z
    2e02:	90 e0       	ldi	r25, 0x00	; 0
    2e04:	82 0f       	add	r24, r18
    2e06:	91 1d       	adc	r25, r1
				if(rtc.Minuten>=60){
    2e08:	8c 33       	cpi	r24, 0x3C	; 60
    2e0a:	10 f4       	brcc	.+4      	; 0x2e10 <_Z13uhreinstellenv+0x35c>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 3:
				rtc.Minuten+=Tastatur.ZahlenausTastatur();
    2e0c:	80 83       	st	Z, r24
    2e0e:	09 c2       	rjmp	.+1042   	; 0x3222 <_Z13uhreinstellenv+0x76e>
				if(rtc.Minuten>=60){
					rtc.Minuten=0;
    2e10:	ea e8       	ldi	r30, 0x8A	; 138
    2e12:	f7 e0       	ldi	r31, 0x07	; 7
    2e14:	10 82       	st	Z, r1
					pos=1;
					buffersize=sprintf(buffer,"Minuten falsch");
    2e16:	e5 ee       	ldi	r30, 0xE5	; 229
    2e18:	f2 e0       	ldi	r31, 0x02	; 2
    2e1a:	a7 2d       	mov	r26, r7
    2e1c:	b8 2d       	mov	r27, r8
    2e1e:	86 2d       	mov	r24, r6
    2e20:	01 90       	ld	r0, Z+
    2e22:	0d 92       	st	X+, r0
    2e24:	8a 95       	dec	r24
    2e26:	e1 f7       	brne	.-8      	; 0x2e20 <_Z13uhreinstellenv+0x36c>
    2e28:	2d 88       	ldd	r2, Y+21	; 0x15
    2e2a:	3e 88       	ldd	r3, Y+22	; 0x16
    2e2c:	1b 2d       	mov	r17, r11
					for(uint8_t i = 0; i<buffersize;i++){
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
    2e2e:	f1 01       	movw	r30, r2
    2e30:	61 91       	ld	r22, Z+
    2e32:	1f 01       	movw	r2, r30
    2e34:	28 e3       	ldi	r18, 0x38	; 56
    2e36:	41 2f       	mov	r20, r17
    2e38:	82 e4       	ldi	r24, 0x42	; 66
    2e3a:	93 e0       	ldi	r25, 0x03	; 3
    2e3c:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    2e40:	1a 5f       	subi	r17, 0xFA	; 250
				rtc.Minuten+=Tastatur.ZahlenausTastatur();
				if(rtc.Minuten>=60){
					rtc.Minuten=0;
					pos=1;
					buffersize=sprintf(buffer,"Minuten falsch");
					for(uint8_t i = 0; i<buffersize;i++){
    2e42:	14 35       	cpi	r17, 0x54	; 84
    2e44:	a1 f7       	brne	.-24     	; 0x2e2e <_Z13uhreinstellenv+0x37a>
    2e46:	c3 c1       	rjmp	.+902    	; 0x31ce <_Z13uhreinstellenv+0x71a>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 4:
				rtc.Tag=Tastatur.ZahlenausTastatur()*10;
    2e48:	81 e4       	ldi	r24, 0x41	; 65
    2e4a:	93 e0       	ldi	r25, 0x03	; 3
    2e4c:	0e 94 56 21 	call	0x42ac	; 0x42ac <_ZN9Interface17ZahlenausTastaturEv>
    2e50:	88 0f       	add	r24, r24
    2e52:	98 2f       	mov	r25, r24
    2e54:	99 0f       	add	r25, r25
    2e56:	99 0f       	add	r25, r25
    2e58:	89 0f       	add	r24, r25
				if(rtc.Tag>=32){
    2e5a:	80 32       	cpi	r24, 0x20	; 32
    2e5c:	18 f4       	brcc	.+6      	; 0x2e64 <_Z13uhreinstellenv+0x3b0>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 4:
				rtc.Tag=Tastatur.ZahlenausTastatur()*10;
    2e5e:	f2 01       	movw	r30, r4
    2e60:	80 83       	st	Z, r24
    2e62:	df c1       	rjmp	.+958    	; 0x3222 <_Z13uhreinstellenv+0x76e>
				if(rtc.Tag>=32){
					rtc.Tag=0;
    2e64:	f2 01       	movw	r30, r4
    2e66:	10 82       	st	Z, r1
					pos=3;
					buffersize=sprintf(buffer,"Tag falsch");
    2e68:	8b e0       	ldi	r24, 0x0B	; 11
    2e6a:	e4 ef       	ldi	r30, 0xF4	; 244
    2e6c:	f2 e0       	ldi	r31, 0x02	; 2
    2e6e:	a7 2d       	mov	r26, r7
    2e70:	b8 2d       	mov	r27, r8
    2e72:	01 90       	ld	r0, Z+
    2e74:	0d 92       	st	X+, r0
    2e76:	8a 95       	dec	r24
    2e78:	e1 f7       	brne	.-8      	; 0x2e72 <_Z13uhreinstellenv+0x3be>
    2e7a:	2d 88       	ldd	r2, Y+21	; 0x15
    2e7c:	3e 88       	ldd	r3, Y+22	; 0x16
    2e7e:	1b 2d       	mov	r17, r11
					for(uint8_t i = 0; i<buffersize;i++){
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
    2e80:	f1 01       	movw	r30, r2
    2e82:	61 91       	ld	r22, Z+
    2e84:	1f 01       	movw	r2, r30
    2e86:	28 e3       	ldi	r18, 0x38	; 56
    2e88:	41 2f       	mov	r20, r17
    2e8a:	82 e4       	ldi	r24, 0x42	; 66
    2e8c:	93 e0       	ldi	r25, 0x03	; 3
    2e8e:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    2e92:	1a 5f       	subi	r17, 0xFA	; 250
				rtc.Tag=Tastatur.ZahlenausTastatur()*10;
				if(rtc.Tag>=32){
					rtc.Tag=0;
					pos=3;
					buffersize=sprintf(buffer,"Tag falsch");
					for(uint8_t i = 0; i<buffersize;i++){
    2e94:	1c 33       	cpi	r17, 0x3C	; 60
    2e96:	a1 f7       	brne	.-24     	; 0x2e80 <_Z13uhreinstellenv+0x3cc>
    2e98:	9d c1       	rjmp	.+826    	; 0x31d4 <_Z13uhreinstellenv+0x720>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 5:
				rtc.Tag+=Tastatur.ZahlenausTastatur();
    2e9a:	81 e4       	ldi	r24, 0x41	; 65
    2e9c:	93 e0       	ldi	r25, 0x03	; 3
    2e9e:	0e 94 56 21 	call	0x42ac	; 0x42ac <_ZN9Interface17ZahlenausTastaturEv>
    2ea2:	f2 01       	movw	r30, r4
    2ea4:	20 81       	ld	r18, Z
    2ea6:	90 e0       	ldi	r25, 0x00	; 0
    2ea8:	82 0f       	add	r24, r18
    2eaa:	91 1d       	adc	r25, r1
				if(rtc.Tag>=32){
    2eac:	80 32       	cpi	r24, 0x20	; 32
    2eae:	10 f4       	brcc	.+4      	; 0x2eb4 <_Z13uhreinstellenv+0x400>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 5:
				rtc.Tag+=Tastatur.ZahlenausTastatur();
    2eb0:	80 83       	st	Z, r24
    2eb2:	b7 c1       	rjmp	.+878    	; 0x3222 <_Z13uhreinstellenv+0x76e>
				if(rtc.Tag>=32){
					rtc.Tag=0;
    2eb4:	f2 01       	movw	r30, r4
    2eb6:	10 82       	st	Z, r1
					pos=3;
					buffersize=sprintf(buffer,"Tag falsch");
    2eb8:	8b e0       	ldi	r24, 0x0B	; 11
    2eba:	e4 ef       	ldi	r30, 0xF4	; 244
    2ebc:	f2 e0       	ldi	r31, 0x02	; 2
    2ebe:	a7 2d       	mov	r26, r7
    2ec0:	b8 2d       	mov	r27, r8
    2ec2:	01 90       	ld	r0, Z+
    2ec4:	0d 92       	st	X+, r0
    2ec6:	8a 95       	dec	r24
    2ec8:	e1 f7       	brne	.-8      	; 0x2ec2 <_Z13uhreinstellenv+0x40e>
    2eca:	2d 88       	ldd	r2, Y+21	; 0x15
    2ecc:	3e 88       	ldd	r3, Y+22	; 0x16
    2ece:	1b 2d       	mov	r17, r11
					for(uint8_t i = 0; i<buffersize;i++){
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
    2ed0:	f1 01       	movw	r30, r2
    2ed2:	61 91       	ld	r22, Z+
    2ed4:	1f 01       	movw	r2, r30
    2ed6:	28 e3       	ldi	r18, 0x38	; 56
    2ed8:	41 2f       	mov	r20, r17
    2eda:	82 e4       	ldi	r24, 0x42	; 66
    2edc:	93 e0       	ldi	r25, 0x03	; 3
    2ede:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    2ee2:	1a 5f       	subi	r17, 0xFA	; 250
				rtc.Tag+=Tastatur.ZahlenausTastatur();
				if(rtc.Tag>=32){
					rtc.Tag=0;
					pos=3;
					buffersize=sprintf(buffer,"Tag falsch");
					for(uint8_t i = 0; i<buffersize;i++){
    2ee4:	1c 33       	cpi	r17, 0x3C	; 60
    2ee6:	a1 f7       	brne	.-24     	; 0x2ed0 <_Z13uhreinstellenv+0x41c>
    2ee8:	7a c1       	rjmp	.+756    	; 0x31de <_Z13uhreinstellenv+0x72a>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 6:
				rtc.Monat=Tastatur.ZahlenausTastatur()*10;
    2eea:	81 e4       	ldi	r24, 0x41	; 65
    2eec:	93 e0       	ldi	r25, 0x03	; 3
    2eee:	0e 94 56 21 	call	0x42ac	; 0x42ac <_ZN9Interface17ZahlenausTastaturEv>
    2ef2:	88 0f       	add	r24, r24
    2ef4:	98 2f       	mov	r25, r24
    2ef6:	99 0f       	add	r25, r25
    2ef8:	99 0f       	add	r25, r25
    2efa:	89 0f       	add	r24, r25
				if(rtc.Monat>=13){
    2efc:	8d 30       	cpi	r24, 0x0D	; 13
    2efe:	18 f4       	brcc	.+6      	; 0x2f06 <_Z13uhreinstellenv+0x452>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 6:
				rtc.Monat=Tastatur.ZahlenausTastatur()*10;
    2f00:	f6 01       	movw	r30, r12
    2f02:	80 83       	st	Z, r24
    2f04:	8e c1       	rjmp	.+796    	; 0x3222 <_Z13uhreinstellenv+0x76e>
				if(rtc.Monat>=13){
					rtc.Monat=0;
    2f06:	f6 01       	movw	r30, r12
    2f08:	10 82       	st	Z, r1
					pos=5;
					buffersize=sprintf(buffer,"Monat falsch");
    2f0a:	8d e0       	ldi	r24, 0x0D	; 13
    2f0c:	ef ef       	ldi	r30, 0xFF	; 255
    2f0e:	f2 e0       	ldi	r31, 0x02	; 2
    2f10:	a7 2d       	mov	r26, r7
    2f12:	b8 2d       	mov	r27, r8
    2f14:	01 90       	ld	r0, Z+
    2f16:	0d 92       	st	X+, r0
    2f18:	8a 95       	dec	r24
    2f1a:	e1 f7       	brne	.-8      	; 0x2f14 <_Z13uhreinstellenv+0x460>
    2f1c:	2d 88       	ldd	r2, Y+21	; 0x15
    2f1e:	3e 88       	ldd	r3, Y+22	; 0x16
    2f20:	1b 2d       	mov	r17, r11
					for(uint8_t i = 0; i<buffersize;i++){
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
    2f22:	f1 01       	movw	r30, r2
    2f24:	61 91       	ld	r22, Z+
    2f26:	1f 01       	movw	r2, r30
    2f28:	28 e3       	ldi	r18, 0x38	; 56
    2f2a:	41 2f       	mov	r20, r17
    2f2c:	82 e4       	ldi	r24, 0x42	; 66
    2f2e:	93 e0       	ldi	r25, 0x03	; 3
    2f30:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    2f34:	1a 5f       	subi	r17, 0xFA	; 250
				rtc.Monat=Tastatur.ZahlenausTastatur()*10;
				if(rtc.Monat>=13){
					rtc.Monat=0;
					pos=5;
					buffersize=sprintf(buffer,"Monat falsch");
					for(uint8_t i = 0; i<buffersize;i++){
    2f36:	18 34       	cpi	r17, 0x48	; 72
    2f38:	a1 f7       	brne	.-24     	; 0x2f22 <_Z13uhreinstellenv+0x46e>
    2f3a:	56 c1       	rjmp	.+684    	; 0x31e8 <_Z13uhreinstellenv+0x734>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 7:
				rtc.Monat+=Tastatur.ZahlenausTastatur();
    2f3c:	81 e4       	ldi	r24, 0x41	; 65
    2f3e:	93 e0       	ldi	r25, 0x03	; 3
    2f40:	0e 94 56 21 	call	0x42ac	; 0x42ac <_ZN9Interface17ZahlenausTastaturEv>
    2f44:	f6 01       	movw	r30, r12
    2f46:	20 81       	ld	r18, Z
    2f48:	90 e0       	ldi	r25, 0x00	; 0
    2f4a:	82 0f       	add	r24, r18
    2f4c:	91 1d       	adc	r25, r1
				if(rtc.Monat>=13){
    2f4e:	8d 30       	cpi	r24, 0x0D	; 13
    2f50:	10 f4       	brcc	.+4      	; 0x2f56 <_Z13uhreinstellenv+0x4a2>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 7:
				rtc.Monat+=Tastatur.ZahlenausTastatur();
    2f52:	80 83       	st	Z, r24
    2f54:	1e c0       	rjmp	.+60     	; 0x2f92 <_Z13uhreinstellenv+0x4de>
				if(rtc.Monat>=13){
					rtc.Monat=0;
    2f56:	f6 01       	movw	r30, r12
    2f58:	10 82       	st	Z, r1
					pos=5;
					buffersize=sprintf(buffer,"Monat falsch");
    2f5a:	8d e0       	ldi	r24, 0x0D	; 13
    2f5c:	ef ef       	ldi	r30, 0xFF	; 255
    2f5e:	f2 e0       	ldi	r31, 0x02	; 2
    2f60:	a7 2d       	mov	r26, r7
    2f62:	b8 2d       	mov	r27, r8
    2f64:	01 90       	ld	r0, Z+
    2f66:	0d 92       	st	X+, r0
    2f68:	8a 95       	dec	r24
    2f6a:	e1 f7       	brne	.-8      	; 0x2f64 <_Z13uhreinstellenv+0x4b0>
    2f6c:	2d 88       	ldd	r2, Y+21	; 0x15
    2f6e:	3e 88       	ldd	r3, Y+22	; 0x16
    2f70:	1b 2d       	mov	r17, r11
					for(uint8_t i = 0; i<buffersize;i++){
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
    2f72:	f1 01       	movw	r30, r2
    2f74:	61 91       	ld	r22, Z+
    2f76:	1f 01       	movw	r2, r30
    2f78:	28 e3       	ldi	r18, 0x38	; 56
    2f7a:	41 2f       	mov	r20, r17
    2f7c:	82 e4       	ldi	r24, 0x42	; 66
    2f7e:	93 e0       	ldi	r25, 0x03	; 3
    2f80:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    2f84:	1a 5f       	subi	r17, 0xFA	; 250
				rtc.Monat+=Tastatur.ZahlenausTastatur();
				if(rtc.Monat>=13){
					rtc.Monat=0;
					pos=5;
					buffersize=sprintf(buffer,"Monat falsch");
					for(uint8_t i = 0; i<buffersize;i++){
    2f86:	18 34       	cpi	r17, 0x48	; 72
    2f88:	a1 f7       	brne	.-24     	; 0x2f72 <_Z13uhreinstellenv+0x4be>
				break;
			case 7:
				rtc.Monat+=Tastatur.ZahlenausTastatur();
				if(rtc.Monat>=13){
					rtc.Monat=0;
					pos=5;
    2f8a:	0f 2e       	mov	r0, r31
    2f8c:	f5 e0       	ldi	r31, 0x05	; 5
    2f8e:	9f 2e       	mov	r9, r31
    2f90:	f0 2d       	mov	r31, r0
					buffersize=sprintf(buffer,"Monat falsch");
					for(uint8_t i = 0; i<buffersize;i++){
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				if(rtc.Monat==4||rtc.Monat==6||rtc.Monat==9||rtc.Monat==11){
    2f92:	f6 01       	movw	r30, r12
    2f94:	90 81       	ld	r25, Z
    2f96:	89 2f       	mov	r24, r25
    2f98:	8d 7f       	andi	r24, 0xFD	; 253
    2f9a:	84 30       	cpi	r24, 0x04	; 4
    2f9c:	11 f0       	breq	.+4      	; 0x2fa2 <_Z13uhreinstellenv+0x4ee>
    2f9e:	89 30       	cpi	r24, 0x09	; 9
    2fa0:	09 f5       	brne	.+66     	; 0x2fe4 <_Z13uhreinstellenv+0x530>
					if(rtc.Tag>=31){
    2fa2:	f2 01       	movw	r30, r4
    2fa4:	80 81       	ld	r24, Z
    2fa6:	8f 31       	cpi	r24, 0x1F	; 31
    2fa8:	08 f4       	brcc	.+2      	; 0x2fac <_Z13uhreinstellenv+0x4f8>
    2faa:	ea c0       	rjmp	.+468    	; 0x3180 <_Z13uhreinstellenv+0x6cc>
						rtc.Tag=0;
    2fac:	10 82       	st	Z, r1
						rtc.Monat=0;
    2fae:	f6 01       	movw	r30, r12
    2fb0:	10 82       	st	Z, r1
						pos=3;
						buffersize=sprintf(buffer,"Tag falsch");
    2fb2:	8b e0       	ldi	r24, 0x0B	; 11
    2fb4:	e4 ef       	ldi	r30, 0xF4	; 244
    2fb6:	f2 e0       	ldi	r31, 0x02	; 2
    2fb8:	a7 2d       	mov	r26, r7
    2fba:	b8 2d       	mov	r27, r8
    2fbc:	01 90       	ld	r0, Z+
    2fbe:	0d 92       	st	X+, r0
    2fc0:	8a 95       	dec	r24
    2fc2:	e1 f7       	brne	.-8      	; 0x2fbc <_Z13uhreinstellenv+0x508>
    2fc4:	2d 88       	ldd	r2, Y+21	; 0x15
    2fc6:	3e 88       	ldd	r3, Y+22	; 0x16
    2fc8:	1b 2d       	mov	r17, r11
						for(uint8_t i = 0; i<buffersize;i++){
							oled.draw_ASCI(buffer[i],charsize*i,7*8);
    2fca:	f1 01       	movw	r30, r2
    2fcc:	61 91       	ld	r22, Z+
    2fce:	1f 01       	movw	r2, r30
    2fd0:	28 e3       	ldi	r18, 0x38	; 56
    2fd2:	41 2f       	mov	r20, r17
    2fd4:	82 e4       	ldi	r24, 0x42	; 66
    2fd6:	93 e0       	ldi	r25, 0x03	; 3
    2fd8:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    2fdc:	1a 5f       	subi	r17, 0xFA	; 250
					if(rtc.Tag>=31){
						rtc.Tag=0;
						rtc.Monat=0;
						pos=3;
						buffersize=sprintf(buffer,"Tag falsch");
						for(uint8_t i = 0; i<buffersize;i++){
    2fde:	1c 33       	cpi	r17, 0x3C	; 60
    2fe0:	a1 f7       	brne	.-24     	; 0x2fca <_Z13uhreinstellenv+0x516>
    2fe2:	07 c1       	rjmp	.+526    	; 0x31f2 <_Z13uhreinstellenv+0x73e>
							oled.draw_ASCI(buffer[i],charsize*i,7*8);
						}
					}
				}
				else if(rtc.Monat==2){
    2fe4:	92 30       	cpi	r25, 0x02	; 2
    2fe6:	09 f0       	breq	.+2      	; 0x2fea <_Z13uhreinstellenv+0x536>
    2fe8:	cb c0       	rjmp	.+406    	; 0x3180 <_Z13uhreinstellenv+0x6cc>
					if(rtc.Tag>=30){
    2fea:	f2 01       	movw	r30, r4
    2fec:	80 81       	ld	r24, Z
    2fee:	8e 31       	cpi	r24, 0x1E	; 30
    2ff0:	08 f4       	brcc	.+2      	; 0x2ff4 <_Z13uhreinstellenv+0x540>
    2ff2:	c6 c0       	rjmp	.+396    	; 0x3180 <_Z13uhreinstellenv+0x6cc>
						rtc.Tag=0;
    2ff4:	10 82       	st	Z, r1
						rtc.Monat=0;
    2ff6:	f6 01       	movw	r30, r12
    2ff8:	10 82       	st	Z, r1
						pos=3;
						buffersize=sprintf(buffer,"Tag falsch");
    2ffa:	8b e0       	ldi	r24, 0x0B	; 11
    2ffc:	e4 ef       	ldi	r30, 0xF4	; 244
    2ffe:	f2 e0       	ldi	r31, 0x02	; 2
    3000:	a7 2d       	mov	r26, r7
    3002:	b8 2d       	mov	r27, r8
    3004:	01 90       	ld	r0, Z+
    3006:	0d 92       	st	X+, r0
    3008:	8a 95       	dec	r24
    300a:	e1 f7       	brne	.-8      	; 0x3004 <_Z13uhreinstellenv+0x550>
    300c:	2d 88       	ldd	r2, Y+21	; 0x15
    300e:	3e 88       	ldd	r3, Y+22	; 0x16
    3010:	1b 2d       	mov	r17, r11
						for(uint8_t i = 0; i<buffersize;i++){
							oled.draw_ASCI(buffer[i],charsize*i,7*8);
    3012:	f1 01       	movw	r30, r2
    3014:	61 91       	ld	r22, Z+
    3016:	1f 01       	movw	r2, r30
    3018:	28 e3       	ldi	r18, 0x38	; 56
    301a:	41 2f       	mov	r20, r17
    301c:	82 e4       	ldi	r24, 0x42	; 66
    301e:	93 e0       	ldi	r25, 0x03	; 3
    3020:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    3024:	1a 5f       	subi	r17, 0xFA	; 250
					if(rtc.Tag>=30){
						rtc.Tag=0;
						rtc.Monat=0;
						pos=3;
						buffersize=sprintf(buffer,"Tag falsch");
						for(uint8_t i = 0; i<buffersize;i++){
    3026:	1c 33       	cpi	r17, 0x3C	; 60
    3028:	a1 f7       	brne	.-24     	; 0x3012 <_Z13uhreinstellenv+0x55e>
    302a:	e8 c0       	rjmp	.+464    	; 0x31fc <_Z13uhreinstellenv+0x748>
						}
					}
				}
				break;
			case 8:
				rtc.Jahr=Tastatur.ZahlenausTastatur()*10;
    302c:	81 e4       	ldi	r24, 0x41	; 65
    302e:	93 e0       	ldi	r25, 0x03	; 3
    3030:	0e 94 56 21 	call	0x42ac	; 0x42ac <_ZN9Interface17ZahlenausTastaturEv>
    3034:	88 0f       	add	r24, r24
    3036:	98 2f       	mov	r25, r24
    3038:	99 0f       	add	r25, r25
    303a:	99 0f       	add	r25, r25
    303c:	89 0f       	add	r24, r25
				if(rtc.Jahr>=50){
    303e:	82 33       	cpi	r24, 0x32	; 50
    3040:	20 f4       	brcc	.+8      	; 0x304a <_Z13uhreinstellenv+0x596>
						}
					}
				}
				break;
			case 8:
				rtc.Jahr=Tastatur.ZahlenausTastatur()*10;
    3042:	e0 e9       	ldi	r30, 0x90	; 144
    3044:	f7 e0       	ldi	r31, 0x07	; 7
    3046:	80 83       	st	Z, r24
    3048:	ec c0       	rjmp	.+472    	; 0x3222 <_Z13uhreinstellenv+0x76e>
				if(rtc.Jahr>=50){
					rtc.Jahr=0;
    304a:	e0 e9       	ldi	r30, 0x90	; 144
    304c:	f7 e0       	ldi	r31, 0x07	; 7
    304e:	10 82       	st	Z, r1
					pos=7;
					buffersize=sprintf(buffer,"Jahr falsch");
    3050:	8c e0       	ldi	r24, 0x0C	; 12
    3052:	ec e0       	ldi	r30, 0x0C	; 12
    3054:	f3 e0       	ldi	r31, 0x03	; 3
    3056:	a7 2d       	mov	r26, r7
    3058:	b8 2d       	mov	r27, r8
    305a:	01 90       	ld	r0, Z+
    305c:	0d 92       	st	X+, r0
    305e:	8a 95       	dec	r24
    3060:	e1 f7       	brne	.-8      	; 0x305a <_Z13uhreinstellenv+0x5a6>
    3062:	2d 88       	ldd	r2, Y+21	; 0x15
    3064:	3e 88       	ldd	r3, Y+22	; 0x16
    3066:	1b 2d       	mov	r17, r11
					for(uint8_t i = 0; i<buffersize;i++){
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
    3068:	f1 01       	movw	r30, r2
    306a:	61 91       	ld	r22, Z+
    306c:	1f 01       	movw	r2, r30
    306e:	28 e3       	ldi	r18, 0x38	; 56
    3070:	41 2f       	mov	r20, r17
    3072:	82 e4       	ldi	r24, 0x42	; 66
    3074:	93 e0       	ldi	r25, 0x03	; 3
    3076:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    307a:	1a 5f       	subi	r17, 0xFA	; 250
				rtc.Jahr=Tastatur.ZahlenausTastatur()*10;
				if(rtc.Jahr>=50){
					rtc.Jahr=0;
					pos=7;
					buffersize=sprintf(buffer,"Jahr falsch");
					for(uint8_t i = 0; i<buffersize;i++){
    307c:	12 34       	cpi	r17, 0x42	; 66
    307e:	a1 f7       	brne	.-24     	; 0x3068 <_Z13uhreinstellenv+0x5b4>
    3080:	c2 c0       	rjmp	.+388    	; 0x3206 <_Z13uhreinstellenv+0x752>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 9:
				rtc.Jahr+=Tastatur.ZahlenausTastatur();
    3082:	81 e4       	ldi	r24, 0x41	; 65
    3084:	93 e0       	ldi	r25, 0x03	; 3
    3086:	0e 94 56 21 	call	0x42ac	; 0x42ac <_ZN9Interface17ZahlenausTastaturEv>
    308a:	e0 e9       	ldi	r30, 0x90	; 144
    308c:	f7 e0       	ldi	r31, 0x07	; 7
    308e:	20 81       	ld	r18, Z
    3090:	90 e0       	ldi	r25, 0x00	; 0
    3092:	82 0f       	add	r24, r18
    3094:	91 1d       	adc	r25, r1
				if(rtc.Jahr>=50){
    3096:	82 33       	cpi	r24, 0x32	; 50
    3098:	10 f4       	brcc	.+4      	; 0x309e <_Z13uhreinstellenv+0x5ea>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 9:
				rtc.Jahr+=Tastatur.ZahlenausTastatur();
    309a:	80 83       	st	Z, r24
    309c:	1f c0       	rjmp	.+62     	; 0x30dc <_Z13uhreinstellenv+0x628>
				if(rtc.Jahr>=50){
					rtc.Jahr=0;
    309e:	e0 e9       	ldi	r30, 0x90	; 144
    30a0:	f7 e0       	ldi	r31, 0x07	; 7
    30a2:	10 82       	st	Z, r1
					pos=7;
					buffersize=sprintf(buffer,"Jahr falsch");
    30a4:	8c e0       	ldi	r24, 0x0C	; 12
    30a6:	ec e0       	ldi	r30, 0x0C	; 12
    30a8:	f3 e0       	ldi	r31, 0x03	; 3
    30aa:	a7 2d       	mov	r26, r7
    30ac:	b8 2d       	mov	r27, r8
    30ae:	01 90       	ld	r0, Z+
    30b0:	0d 92       	st	X+, r0
    30b2:	8a 95       	dec	r24
    30b4:	e1 f7       	brne	.-8      	; 0x30ae <_Z13uhreinstellenv+0x5fa>
    30b6:	2d 88       	ldd	r2, Y+21	; 0x15
    30b8:	3e 88       	ldd	r3, Y+22	; 0x16
    30ba:	1b 2d       	mov	r17, r11
					for(uint8_t i = 0; i<buffersize;i++){
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
    30bc:	f1 01       	movw	r30, r2
    30be:	61 91       	ld	r22, Z+
    30c0:	1f 01       	movw	r2, r30
    30c2:	28 e3       	ldi	r18, 0x38	; 56
    30c4:	41 2f       	mov	r20, r17
    30c6:	82 e4       	ldi	r24, 0x42	; 66
    30c8:	93 e0       	ldi	r25, 0x03	; 3
    30ca:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    30ce:	1a 5f       	subi	r17, 0xFA	; 250
				rtc.Jahr+=Tastatur.ZahlenausTastatur();
				if(rtc.Jahr>=50){
					rtc.Jahr=0;
					pos=7;
					buffersize=sprintf(buffer,"Jahr falsch");
					for(uint8_t i = 0; i<buffersize;i++){
    30d0:	12 34       	cpi	r17, 0x42	; 66
    30d2:	a1 f7       	brne	.-24     	; 0x30bc <_Z13uhreinstellenv+0x608>
				break;
			case 9:
				rtc.Jahr+=Tastatur.ZahlenausTastatur();
				if(rtc.Jahr>=50){
					rtc.Jahr=0;
					pos=7;
    30d4:	0f 2e       	mov	r0, r31
    30d6:	f7 e0       	ldi	r31, 0x07	; 7
    30d8:	9f 2e       	mov	r9, r31
    30da:	f0 2d       	mov	r31, r0
					buffersize=sprintf(buffer,"Jahr falsch");
					for(uint8_t i = 0; i<buffersize;i++){
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				if(rtc.Monat==2){
    30dc:	f6 01       	movw	r30, r12
    30de:	80 81       	ld	r24, Z
    30e0:	82 30       	cpi	r24, 0x02	; 2
    30e2:	09 f0       	breq	.+2      	; 0x30e6 <_Z13uhreinstellenv+0x632>
    30e4:	4d c0       	rjmp	.+154    	; 0x3180 <_Z13uhreinstellenv+0x6cc>
					if(rtc.Jahr%4==0){
    30e6:	e0 e9       	ldi	r30, 0x90	; 144
    30e8:	f7 e0       	ldi	r31, 0x07	; 7
    30ea:	80 81       	ld	r24, Z
    30ec:	83 70       	andi	r24, 0x03	; 3
    30ee:	21 f5       	brne	.+72     	; 0x3138 <_Z13uhreinstellenv+0x684>
						if (rtc.Tag>=30)
    30f0:	f2 01       	movw	r30, r4
    30f2:	80 81       	ld	r24, Z
    30f4:	8e 31       	cpi	r24, 0x1E	; 30
    30f6:	08 f4       	brcc	.+2      	; 0x30fa <_Z13uhreinstellenv+0x646>
    30f8:	43 c0       	rjmp	.+134    	; 0x3180 <_Z13uhreinstellenv+0x6cc>
						{
							rtc.Tag=0;
    30fa:	10 82       	st	Z, r1
							rtc.Monat=0;
    30fc:	f6 01       	movw	r30, r12
    30fe:	10 82       	st	Z, r1
							rtc.Jahr=0;
    3100:	e0 e9       	ldi	r30, 0x90	; 144
    3102:	f7 e0       	ldi	r31, 0x07	; 7
    3104:	10 82       	st	Z, r1
							pos=3;
							buffersize=sprintf(buffer,"Tag falsch");
    3106:	8b e0       	ldi	r24, 0x0B	; 11
    3108:	e4 ef       	ldi	r30, 0xF4	; 244
    310a:	f2 e0       	ldi	r31, 0x02	; 2
    310c:	a7 2d       	mov	r26, r7
    310e:	b8 2d       	mov	r27, r8
    3110:	01 90       	ld	r0, Z+
    3112:	0d 92       	st	X+, r0
    3114:	8a 95       	dec	r24
    3116:	e1 f7       	brne	.-8      	; 0x3110 <_Z13uhreinstellenv+0x65c>
    3118:	2d 88       	ldd	r2, Y+21	; 0x15
    311a:	3e 88       	ldd	r3, Y+22	; 0x16
    311c:	1b 2d       	mov	r17, r11
							for(uint8_t i = 0; i<buffersize;i++){
								oled.draw_ASCI(buffer[i],charsize*i,7*8);
    311e:	f1 01       	movw	r30, r2
    3120:	61 91       	ld	r22, Z+
    3122:	1f 01       	movw	r2, r30
    3124:	28 e3       	ldi	r18, 0x38	; 56
    3126:	41 2f       	mov	r20, r17
    3128:	82 e4       	ldi	r24, 0x42	; 66
    312a:	93 e0       	ldi	r25, 0x03	; 3
    312c:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    3130:	1a 5f       	subi	r17, 0xFA	; 250
							rtc.Tag=0;
							rtc.Monat=0;
							rtc.Jahr=0;
							pos=3;
							buffersize=sprintf(buffer,"Tag falsch");
							for(uint8_t i = 0; i<buffersize;i++){
    3132:	1c 33       	cpi	r17, 0x3C	; 60
    3134:	a1 f7       	brne	.-24     	; 0x311e <_Z13uhreinstellenv+0x66a>
    3136:	6c c0       	rjmp	.+216    	; 0x3210 <_Z13uhreinstellenv+0x75c>
								oled.draw_ASCI(buffer[i],charsize*i,7*8);
							}
						}
					}
					else{
						if(rtc.Tag>=29){
    3138:	f2 01       	movw	r30, r4
    313a:	80 81       	ld	r24, Z
    313c:	8d 31       	cpi	r24, 0x1D	; 29
    313e:	00 f1       	brcs	.+64     	; 0x3180 <_Z13uhreinstellenv+0x6cc>
							rtc.Tag=0;
    3140:	10 82       	st	Z, r1
							rtc.Monat=0;
    3142:	f6 01       	movw	r30, r12
    3144:	10 82       	st	Z, r1
							rtc.Jahr=0;
    3146:	e0 e9       	ldi	r30, 0x90	; 144
    3148:	f7 e0       	ldi	r31, 0x07	; 7
    314a:	10 82       	st	Z, r1
							pos=3;
							buffersize=sprintf(buffer,"Tag falsch");
    314c:	8b e0       	ldi	r24, 0x0B	; 11
    314e:	e4 ef       	ldi	r30, 0xF4	; 244
    3150:	f2 e0       	ldi	r31, 0x02	; 2
    3152:	a7 2d       	mov	r26, r7
    3154:	b8 2d       	mov	r27, r8
    3156:	01 90       	ld	r0, Z+
    3158:	0d 92       	st	X+, r0
    315a:	8a 95       	dec	r24
    315c:	e1 f7       	brne	.-8      	; 0x3156 <_Z13uhreinstellenv+0x6a2>
    315e:	2d 88       	ldd	r2, Y+21	; 0x15
    3160:	3e 88       	ldd	r3, Y+22	; 0x16
    3162:	1b 2d       	mov	r17, r11
							for(uint8_t i = 0; i<buffersize;i++){
								oled.draw_ASCI(buffer[i],charsize*i,7*8);
    3164:	f1 01       	movw	r30, r2
    3166:	61 91       	ld	r22, Z+
    3168:	1f 01       	movw	r2, r30
    316a:	28 e3       	ldi	r18, 0x38	; 56
    316c:	41 2f       	mov	r20, r17
    316e:	82 e4       	ldi	r24, 0x42	; 66
    3170:	93 e0       	ldi	r25, 0x03	; 3
    3172:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    3176:	1a 5f       	subi	r17, 0xFA	; 250
							rtc.Tag=0;
							rtc.Monat=0;
							rtc.Jahr=0;
							pos=3;
							buffersize=sprintf(buffer,"Tag falsch");
							for(uint8_t i = 0; i<buffersize;i++){
    3178:	1c 33       	cpi	r17, 0x3C	; 60
    317a:	a1 f7       	brne	.-24     	; 0x3164 <_Z13uhreinstellenv+0x6b0>
    317c:	4e c0       	rjmp	.+156    	; 0x321a <_Z13uhreinstellenv+0x766>
						}
					}
				}
				break;
			default:
				pos++;
    317e:	93 94       	inc	r9
				break;
		}
		pos++;
    3180:	93 94       	inc	r9
	
	oled.clearFrame();
	char buffer[20];
	uint8_t buffersize;
	uint8_t pos=0;
	while(pos<11){
    3182:	fa e0       	ldi	r31, 0x0A	; 10
    3184:	f9 15       	cp	r31, r9
    3186:	08 f0       	brcs	.+2      	; 0x318a <_Z13uhreinstellenv+0x6d6>
    3188:	d4 cc       	rjmp	.-1624   	; 0x2b32 <_Z13uhreinstellenv+0x7e>
				break;
		}
		pos++;
	}
	
	rtc.Sekunden		= 0;
    318a:	10 92 8b 07 	sts	0x078B, r1
	rtc.HundSekunden	= 0;
    318e:	10 92 8c 07 	sts	0x078C, r1
	oled.clearFrame();
    3192:	82 e4       	ldi	r24, 0x42	; 66
    3194:	93 e0       	ldi	r25, 0x03	; 3
    3196:	0e 94 ed 02 	call	0x5da	; 0x5da <_ZN7Display10clearFrameEv>
	rtc.ausgabedatumneu();
    319a:	89 e7       	ldi	r24, 0x79	; 121
    319c:	97 e0       	ldi	r25, 0x07	; 7
    319e:	0e 94 dd 25 	call	0x4bba	; 0x4bba <_ZN3RTC15ausgabedatumneuEv>
	rtc.ausgabezeitneu();
    31a2:	89 e7       	ldi	r24, 0x79	; 121
    31a4:	97 e0       	ldi	r25, 0x07	; 7
    31a6:	0e 94 a4 25 	call	0x4b48	; 0x4b48 <_ZN3RTC14ausgabezeitneuEv>
	rtc.RTCstart();
    31aa:	89 e7       	ldi	r24, 0x79	; 121
    31ac:	97 e0       	ldi	r25, 0x07	; 7
    31ae:	0e 94 c0 26 	call	0x4d80	; 0x4d80 <_ZN3RTC8RTCstartEv>
    31b2:	39 c0       	rjmp	.+114    	; 0x3226 <_Z13uhreinstellenv+0x772>

		oled.sendFrame();
		oled.clearFrame();
		switch (pos) {
			case 0:
				rtc.Stunden=Tastatur.ZahlenausTastatur()*10;
    31b4:	e9 e8       	ldi	r30, 0x89	; 137
    31b6:	f7 e0       	ldi	r31, 0x07	; 7
    31b8:	80 83       	st	Z, r24
    31ba:	33 c0       	rjmp	.+102    	; 0x3222 <_Z13uhreinstellenv+0x76e>
				if(rtc.Stunden>=24){
					rtc.Stunden=0;
					pos=-1;
    31bc:	99 24       	eor	r9, r9
    31be:	9a 94       	dec	r9
    31c0:	30 c0       	rjmp	.+96     	; 0x3222 <_Z13uhreinstellenv+0x76e>
				break;
			case 1:
				rtc.Stunden+=Tastatur.ZahlenausTastatur();
				if(rtc.Stunden>=24){
					rtc.Stunden=0;
					pos=-1;
    31c2:	99 24       	eor	r9, r9
    31c4:	9a 94       	dec	r9
    31c6:	2d c0       	rjmp	.+90     	; 0x3222 <_Z13uhreinstellenv+0x76e>
				break;
			case 2:
				rtc.Minuten=Tastatur.ZahlenausTastatur()*10;
				if(rtc.Minuten>=60){
					rtc.Minuten=0;
					pos=1;
    31c8:	99 24       	eor	r9, r9
    31ca:	93 94       	inc	r9
    31cc:	2a c0       	rjmp	.+84     	; 0x3222 <_Z13uhreinstellenv+0x76e>
				break;
			case 3:
				rtc.Minuten+=Tastatur.ZahlenausTastatur();
				if(rtc.Minuten>=60){
					rtc.Minuten=0;
					pos=1;
    31ce:	99 24       	eor	r9, r9
    31d0:	93 94       	inc	r9
    31d2:	27 c0       	rjmp	.+78     	; 0x3222 <_Z13uhreinstellenv+0x76e>
				break;
			case 4:
				rtc.Tag=Tastatur.ZahlenausTastatur()*10;
				if(rtc.Tag>=32){
					rtc.Tag=0;
					pos=3;
    31d4:	0f 2e       	mov	r0, r31
    31d6:	f3 e0       	ldi	r31, 0x03	; 3
    31d8:	9f 2e       	mov	r9, r31
    31da:	f0 2d       	mov	r31, r0
    31dc:	22 c0       	rjmp	.+68     	; 0x3222 <_Z13uhreinstellenv+0x76e>
				break;
			case 5:
				rtc.Tag+=Tastatur.ZahlenausTastatur();
				if(rtc.Tag>=32){
					rtc.Tag=0;
					pos=3;
    31de:	0f 2e       	mov	r0, r31
    31e0:	f3 e0       	ldi	r31, 0x03	; 3
    31e2:	9f 2e       	mov	r9, r31
    31e4:	f0 2d       	mov	r31, r0
    31e6:	1d c0       	rjmp	.+58     	; 0x3222 <_Z13uhreinstellenv+0x76e>
				break;
			case 6:
				rtc.Monat=Tastatur.ZahlenausTastatur()*10;
				if(rtc.Monat>=13){
					rtc.Monat=0;
					pos=5;
    31e8:	0f 2e       	mov	r0, r31
    31ea:	f5 e0       	ldi	r31, 0x05	; 5
    31ec:	9f 2e       	mov	r9, r31
    31ee:	f0 2d       	mov	r31, r0
    31f0:	18 c0       	rjmp	.+48     	; 0x3222 <_Z13uhreinstellenv+0x76e>
				}
				if(rtc.Monat==4||rtc.Monat==6||rtc.Monat==9||rtc.Monat==11){
					if(rtc.Tag>=31){
						rtc.Tag=0;
						rtc.Monat=0;
						pos=3;
    31f2:	0f 2e       	mov	r0, r31
    31f4:	f3 e0       	ldi	r31, 0x03	; 3
    31f6:	9f 2e       	mov	r9, r31
    31f8:	f0 2d       	mov	r31, r0
    31fa:	13 c0       	rjmp	.+38     	; 0x3222 <_Z13uhreinstellenv+0x76e>
				}
				else if(rtc.Monat==2){
					if(rtc.Tag>=30){
						rtc.Tag=0;
						rtc.Monat=0;
						pos=3;
    31fc:	0f 2e       	mov	r0, r31
    31fe:	f3 e0       	ldi	r31, 0x03	; 3
    3200:	9f 2e       	mov	r9, r31
    3202:	f0 2d       	mov	r31, r0
    3204:	0e c0       	rjmp	.+28     	; 0x3222 <_Z13uhreinstellenv+0x76e>
				break;
			case 8:
				rtc.Jahr=Tastatur.ZahlenausTastatur()*10;
				if(rtc.Jahr>=50){
					rtc.Jahr=0;
					pos=7;
    3206:	0f 2e       	mov	r0, r31
    3208:	f7 e0       	ldi	r31, 0x07	; 7
    320a:	9f 2e       	mov	r9, r31
    320c:	f0 2d       	mov	r31, r0
    320e:	09 c0       	rjmp	.+18     	; 0x3222 <_Z13uhreinstellenv+0x76e>
						if (rtc.Tag>=30)
						{
							rtc.Tag=0;
							rtc.Monat=0;
							rtc.Jahr=0;
							pos=3;
    3210:	0f 2e       	mov	r0, r31
    3212:	f3 e0       	ldi	r31, 0x03	; 3
    3214:	9f 2e       	mov	r9, r31
    3216:	f0 2d       	mov	r31, r0
    3218:	04 c0       	rjmp	.+8      	; 0x3222 <_Z13uhreinstellenv+0x76e>
					else{
						if(rtc.Tag>=29){
							rtc.Tag=0;
							rtc.Monat=0;
							rtc.Jahr=0;
							pos=3;
    321a:	0f 2e       	mov	r0, r31
    321c:	f3 e0       	ldi	r31, 0x03	; 3
    321e:	9f 2e       	mov	r9, r31
    3220:	f0 2d       	mov	r31, r0
				break;
			default:
				pos++;
				break;
		}
		pos++;
    3222:	93 94       	inc	r9
    3224:	86 cc       	rjmp	.-1780   	; 0x2b32 <_Z13uhreinstellenv+0x7e>
	rtc.HundSekunden	= 0;
	oled.clearFrame();
	rtc.ausgabedatumneu();
	rtc.ausgabezeitneu();
	rtc.RTCstart();
}
    3226:	66 96       	adiw	r28, 0x16	; 22
    3228:	0f b6       	in	r0, 0x3f	; 63
    322a:	f8 94       	cli
    322c:	de bf       	out	0x3e, r29	; 62
    322e:	0f be       	out	0x3f, r0	; 63
    3230:	cd bf       	out	0x3d, r28	; 61
    3232:	df 91       	pop	r29
    3234:	cf 91       	pop	r28
    3236:	1f 91       	pop	r17
    3238:	0f 91       	pop	r16
    323a:	ff 90       	pop	r15
    323c:	ef 90       	pop	r14
    323e:	df 90       	pop	r13
    3240:	cf 90       	pop	r12
    3242:	bf 90       	pop	r11
    3244:	af 90       	pop	r10
    3246:	9f 90       	pop	r9
    3248:	8f 90       	pop	r8
    324a:	7f 90       	pop	r7
    324c:	6f 90       	pop	r6
    324e:	5f 90       	pop	r5
    3250:	4f 90       	pop	r4
    3252:	3f 90       	pop	r3
    3254:	2f 90       	pop	r2
    3256:	08 95       	ret

00003258 <__vector_9>:
uint8_t pos;		//Handler fuer die Einganbe von Zahlen

//Ausgelagerte Sammlung der einzelnen Seitenlayouts
#include "Seiten.h"

ISR(TIMER2_OVF_vect){	//Vektor fuer die RTC
    3258:	1f 92       	push	r1
    325a:	0f 92       	push	r0
    325c:	0f b6       	in	r0, 0x3f	; 63
    325e:	0f 92       	push	r0
    3260:	11 24       	eor	r1, r1
    3262:	8f 93       	push	r24
    3264:	ef 93       	push	r30
    3266:	ff 93       	push	r31
	TCNT2=TIMER2RTCTIME;
    3268:	10 92 b2 00 	sts	0x00B2, r1
	rtc.Sekunden++;
    326c:	eb e8       	ldi	r30, 0x8B	; 139
    326e:	f7 e0       	ldi	r31, 0x07	; 7
    3270:	80 81       	ld	r24, Z
    3272:	8f 5f       	subi	r24, 0xFF	; 255
    3274:	80 83       	st	Z, r24
	rtc.interupts|= (1<<sekundeninterupt);
    3276:	e1 e9       	ldi	r30, 0x91	; 145
    3278:	f7 e0       	ldi	r31, 0x07	; 7
    327a:	80 81       	ld	r24, Z
    327c:	82 60       	ori	r24, 0x02	; 2
    327e:	80 83       	st	Z, r24
}
    3280:	ff 91       	pop	r31
    3282:	ef 91       	pop	r30
    3284:	8f 91       	pop	r24
    3286:	0f 90       	pop	r0
    3288:	0f be       	out	0x3f, r0	; 63
    328a:	0f 90       	pop	r0
    328c:	1f 90       	pop	r1
    328e:	18 95       	reti

00003290 <_Z15geschwindigkeitf>:

double geschw;
double strecke;
double maxgeschw;
uint32_t Fahrtzeit;
void geschwindigkeit(float durch){
    3290:	cf 92       	push	r12
    3292:	df 92       	push	r13
    3294:	ef 92       	push	r14
    3296:	ff 92       	push	r15
    3298:	cf 93       	push	r28
    329a:	df 93       	push	r29
	//uint16_t zaehlungen = (TCNT1H<<8) | (TCNT1L);
	uint16_t zaehlungen = TCNT1;
    329c:	c0 91 84 00 	lds	r28, 0x0084
    32a0:	d0 91 85 00 	lds	r29, 0x0085
	//geschw = durch*M_PI/(REEDMS+((double)zaehlungen/zaehlungenprozeiteinheit)*zeitproachtzaehlungen);
	double umlaufzeit = (REEDMS/1000.0+(zaehlungen/zaehlungenprozeiteinheit)*zeitproachtzaehlungen);
	//geschw = umlaufzeit;
	geschw = (durch)*M_PI*3.6;
    32a4:	2b ed       	ldi	r18, 0xDB	; 219
    32a6:	3f e0       	ldi	r19, 0x0F	; 15
    32a8:	49 e4       	ldi	r20, 0x49	; 73
    32aa:	50 e4       	ldi	r21, 0x40	; 64
    32ac:	0e 94 c3 29 	call	0x5386	; 0x5386 <__mulsf3>
    32b0:	26 e6       	ldi	r18, 0x66	; 102
    32b2:	36 e6       	ldi	r19, 0x66	; 102
    32b4:	46 e6       	ldi	r20, 0x66	; 102
    32b6:	50 e4       	ldi	r21, 0x40	; 64
    32b8:	0e 94 c3 29 	call	0x5386	; 0x5386 <__mulsf3>
    32bc:	6b 01       	movw	r12, r22
    32be:	7c 01       	movw	r14, r24
uint32_t Fahrtzeit;
void geschwindigkeit(float durch){
	//uint16_t zaehlungen = (TCNT1H<<8) | (TCNT1L);
	uint16_t zaehlungen = TCNT1;
	//geschw = durch*M_PI/(REEDMS+((double)zaehlungen/zaehlungenprozeiteinheit)*zeitproachtzaehlungen);
	double umlaufzeit = (REEDMS/1000.0+(zaehlungen/zaehlungenprozeiteinheit)*zeitproachtzaehlungen);
    32c0:	be 01       	movw	r22, r28
    32c2:	80 e0       	ldi	r24, 0x00	; 0
    32c4:	90 e0       	ldi	r25, 0x00	; 0
    32c6:	0e 94 63 28 	call	0x50c6	; 0x50c6 <__floatunsisf>
    32ca:	20 e0       	ldi	r18, 0x00	; 0
    32cc:	30 e0       	ldi	r19, 0x00	; 0
    32ce:	40 e0       	ldi	r20, 0x00	; 0
    32d0:	5e e3       	ldi	r21, 0x3E	; 62
    32d2:	0e 94 c3 29 	call	0x5386	; 0x5386 <__mulsf3>
    32d6:	2d eb       	ldi	r18, 0xBD	; 189
    32d8:	37 e3       	ldi	r19, 0x37	; 55
    32da:	46 e8       	ldi	r20, 0x86	; 134
    32dc:	5a e3       	ldi	r21, 0x3A	; 58
    32de:	0e 94 c3 29 	call	0x5386	; 0x5386 <__mulsf3>
    32e2:	2a e0       	ldi	r18, 0x0A	; 10
    32e4:	37 ed       	ldi	r19, 0xD7	; 215
    32e6:	43 ea       	ldi	r20, 0xA3	; 163
    32e8:	5b e3       	ldi	r21, 0x3B	; 59
    32ea:	0e 94 fd 26 	call	0x4dfa	; 0x4dfa <__addsf3>
    32ee:	9b 01       	movw	r18, r22
    32f0:	ac 01       	movw	r20, r24
	//geschw = umlaufzeit;
	geschw = (durch)*M_PI*3.6;
	geschw /= umlaufzeit;
    32f2:	c7 01       	movw	r24, r14
    32f4:	b6 01       	movw	r22, r12
    32f6:	0e 94 ca 27 	call	0x4f94	; 0x4f94 <__divsf3>
    32fa:	6b 01       	movw	r12, r22
    32fc:	7c 01       	movw	r14, r24
	if (geschw >=160)
    32fe:	20 e0       	ldi	r18, 0x00	; 0
    3300:	30 e0       	ldi	r19, 0x00	; 0
    3302:	40 e2       	ldi	r20, 0x20	; 32
    3304:	53 e4       	ldi	r21, 0x43	; 67
    3306:	0e 94 73 29 	call	0x52e6	; 0x52e6 <__gesf2>
    330a:	88 23       	and	r24, r24
    330c:	4c f4       	brge	.+18     	; 0x3320 <_Z15geschwindigkeitf+0x90>
	uint16_t zaehlungen = TCNT1;
	//geschw = durch*M_PI/(REEDMS+((double)zaehlungen/zaehlungenprozeiteinheit)*zeitproachtzaehlungen);
	double umlaufzeit = (REEDMS/1000.0+(zaehlungen/zaehlungenprozeiteinheit)*zeitproachtzaehlungen);
	//geschw = umlaufzeit;
	geschw = (durch)*M_PI*3.6;
	geschw /= umlaufzeit;
    330e:	c0 92 24 03 	sts	0x0324, r12
    3312:	d0 92 25 03 	sts	0x0325, r13
    3316:	e0 92 26 03 	sts	0x0326, r14
    331a:	f0 92 27 03 	sts	0x0327, r15
    331e:	08 c0       	rjmp	.+16     	; 0x3330 <_Z15geschwindigkeitf+0xa0>
	if (geschw >=160)
	{
		geschw=0;
    3320:	10 92 24 03 	sts	0x0324, r1
    3324:	10 92 25 03 	sts	0x0325, r1
    3328:	10 92 26 03 	sts	0x0326, r1
    332c:	10 92 27 03 	sts	0x0327, r1
	}
	//im kn/h *3.6
	//geschw*=3.6;
	//TCNT1H = 0;
	//TCNT1L = 0;
	TCNT1 = 0;
    3330:	10 92 85 00 	sts	0x0085, r1
    3334:	10 92 84 00 	sts	0x0084, r1
}
    3338:	df 91       	pop	r29
    333a:	cf 91       	pop	r28
    333c:	ff 90       	pop	r15
    333e:	ef 90       	pop	r14
    3340:	df 90       	pop	r13
    3342:	cf 90       	pop	r12
    3344:	08 95       	ret

00003346 <_Z13reed_debouncePVhh>:

uint8_t reed_debounce(volatile uint8_t *port, uint8_t pin)
{
	if ( !(*port & (1 << pin)) )
    3346:	fc 01       	movw	r30, r24
    3348:	20 81       	ld	r18, Z
    334a:	30 e0       	ldi	r19, 0x00	; 0
    334c:	06 2e       	mov	r0, r22
    334e:	02 c0       	rjmp	.+4      	; 0x3354 <_Z13reed_debouncePVhh+0xe>
    3350:	35 95       	asr	r19
    3352:	27 95       	ror	r18
    3354:	0a 94       	dec	r0
    3356:	e2 f7       	brpl	.-8      	; 0x3350 <_Z13reed_debouncePVhh+0xa>
    3358:	20 fd       	sbrc	r18, 0
    335a:	17 c0       	rjmp	.+46     	; 0x338a <_Z13reed_debouncePVhh+0x44>
    335c:	ef e0       	ldi	r30, 0x0F	; 15
    335e:	f7 e2       	ldi	r31, 0x27	; 39
    3360:	31 97       	sbiw	r30, 0x01	; 1
    3362:	f1 f7       	brne	.-4      	; 0x3360 <_Z13reed_debouncePVhh+0x1a>
    3364:	00 c0       	rjmp	.+0      	; 0x3366 <_Z13reed_debouncePVhh+0x20>
    3366:	00 00       	nop
	{
		/* Pin wurde auf Masse gezogen, ms warten   */
		//_delay_us(50);
		//_delay_us(50);
		_delay_ms(REEDMS);
		if ( (*port & (1 << pin)) )
    3368:	fc 01       	movw	r30, r24
    336a:	80 81       	ld	r24, Z
    336c:	90 e0       	ldi	r25, 0x00	; 0
    336e:	9c 01       	movw	r18, r24
    3370:	02 c0       	rjmp	.+4      	; 0x3376 <_Z13reed_debouncePVhh+0x30>
    3372:	35 95       	asr	r19
    3374:	27 95       	ror	r18
    3376:	6a 95       	dec	r22
    3378:	e2 f7       	brpl	.-8      	; 0x3372 <_Z13reed_debouncePVhh+0x2c>
    337a:	20 ff       	sbrs	r18, 0
    337c:	08 c0       	rjmp	.+16     	; 0x338e <_Z13reed_debouncePVhh+0x48>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    337e:	32 e0       	ldi	r19, 0x02	; 2
    3380:	3a 95       	dec	r19
    3382:	f1 f7       	brne	.-4      	; 0x3380 <_Z13reed_debouncePVhh+0x3a>
    3384:	00 c0       	rjmp	.+0      	; 0x3386 <_Z13reed_debouncePVhh+0x40>
		{
			/* Anwender Zeit zum Loslassen des Tasters geben */
			_delay_us(1);
			return 1;
    3386:	81 e0       	ldi	r24, 0x01	; 1
    3388:	08 95       	ret
		}
	}
	return 0;
    338a:	80 e0       	ldi	r24, 0x00	; 0
    338c:	08 95       	ret
    338e:	80 e0       	ldi	r24, 0x00	; 0
}
    3390:	08 95       	ret

00003392 <_Z15initialisierungv>:
    }
}

void initialisierung(){
	//nullen der Flagregister
	rtc.interupts=0;
    3392:	10 92 91 07 	sts	0x0791, r1
	anzeige=0;
    3396:	10 92 2a 03 	sts	0x032A, r1
    339a:	10 92 29 03 	sts	0x0329, r1
	pos=0;
    339e:	10 92 28 03 	sts	0x0328, r1
	//initialisieren des Zaehler fuer die Winkelgeschw sowie den Timer
	geschw=0;
    33a2:	10 92 24 03 	sts	0x0324, r1
    33a6:	10 92 25 03 	sts	0x0325, r1
    33aa:	10 92 26 03 	sts	0x0326, r1
    33ae:	10 92 27 03 	sts	0x0327, r1
	strecke = 0;
    33b2:	10 92 20 03 	sts	0x0320, r1
    33b6:	10 92 21 03 	sts	0x0321, r1
    33ba:	10 92 22 03 	sts	0x0322, r1
    33be:	10 92 23 03 	sts	0x0323, r1
	maxgeschw = 0;
    33c2:	10 92 1c 03 	sts	0x031C, r1
    33c6:	10 92 1d 03 	sts	0x031D, r1
    33ca:	10 92 1e 03 	sts	0x031E, r1
    33ce:	10 92 1f 03 	sts	0x031F, r1
	Fahrtzeit = 0;
    33d2:	10 92 18 03 	sts	0x0318, r1
    33d6:	10 92 19 03 	sts	0x0319, r1
    33da:	10 92 1a 03 	sts	0x031A, r1
    33de:	10 92 1b 03 	sts	0x031B, r1
	TCNT1=0;
    33e2:	10 92 85 00 	sts	0x0085, r1
    33e6:	10 92 84 00 	sts	0x0084, r1
	//Ausgaenge und Eingaenge einstellen
	DDRD = (1<<PIND0) | (1<<PIND1) | (1<<PIND2) | (1<<PIND3);	//Pins zur Ausgabe
    33ea:	8f e0       	ldi	r24, 0x0F	; 15
    33ec:	8a b9       	out	0x0a, r24	; 10
	DDRD &= ~((1<<PIND4) | (1<<PIND5) | (1<<PIND6));			//Restliche Pins als Eingaenge schalten
    33ee:	8a b1       	in	r24, 0x0a	; 10
    33f0:	8f 78       	andi	r24, 0x8F	; 143
    33f2:	8a b9       	out	0x0a, r24	; 10
	//Eingang fuer den Reedkontak schalten mit internem Pullup
	DDRC &= ~((1<<PORTC3));
    33f4:	3b 98       	cbi	0x07, 3	; 7
	PORTC |= (1<<PORTC3);
    33f6:	43 9a       	sbi	0x08, 3	; 8
	//I2C Interface
	//twi_init();
	//Display
	oled.InitializeDisplay();
    33f8:	82 e4       	ldi	r24, 0x42	; 66
    33fa:	93 e0       	ldi	r25, 0x03	; 3
    33fc:	0e 94 14 03 	call	0x628	; 0x628 <_ZN7Display17InitializeDisplayEv>
	//initialisierung wird im konstruktor vorgenommen
	oled.clearFrame();
    3400:	82 e4       	ldi	r24, 0x42	; 66
    3402:	93 e0       	ldi	r25, 0x03	; 3
    3404:	0e 94 ed 02 	call	0x5da	; 0x5da <_ZN7Display10clearFrameEv>
	//HMC5883L initialisieren
	//kompass.initialize_HMC5883L();
	//initialisierung wird im Konstruktor erledigt
	
	//ADC Initialisieren auf CH0
	ADMUX = (1<<REFS0);
    3408:	80 e4       	ldi	r24, 0x40	; 64
    340a:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA = (1<<ADPS1) | (1<<ADPS0);
    340e:	ea e7       	ldi	r30, 0x7A	; 122
    3410:	f0 e0       	ldi	r31, 0x00	; 0
    3412:	83 e0       	ldi	r24, 0x03	; 3
    3414:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADEN);
    3416:	80 81       	ld	r24, Z
    3418:	80 68       	ori	r24, 0x80	; 128
    341a:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);
    341c:	80 81       	ld	r24, Z
    341e:	80 64       	ori	r24, 0x40	; 64
    3420:	80 83       	st	Z, r24
	while (ADCSRA & (1<<ADSC) ) {
    3422:	80 81       	ld	r24, Z
    3424:	86 fd       	sbrc	r24, 6
    3426:	fd cf       	rjmp	.-6      	; 0x3422 <_Z15initialisierungv+0x90>
	}
	(void) ADCW;
    3428:	80 91 78 00 	lds	r24, 0x0078
    342c:	90 91 79 00 	lds	r25, 0x0079
	//Wilkommensanzeige
	willkommenpage();
    3430:	0e 94 73 09 	call	0x12e6	; 0x12e6 <_Z14willkommenpagev>
	//Uhreinstellungen
	//uhreinstellen();
	//*************************************************
	//Nur Test, damit es schneller geht beim Start
	rtc.dummyeinst();
    3434:	89 e7       	ldi	r24, 0x79	; 121
    3436:	97 e0       	ldi	r25, 0x07	; 7
    3438:	0e 94 aa 26 	call	0x4d54	; 0x4d54 <_ZN3RTC10dummyeinstEv>
	//*********************************
	rtc.RTCstart();
    343c:	89 e7       	ldi	r24, 0x79	; 121
    343e:	97 e0       	ldi	r25, 0x07	; 7
    3440:	0e 94 c0 26 	call	0x4d80	; 0x4d80 <_ZN3RTC8RTCstartEv>
	//ausgabe starten
	anzeige|=(1<<Uhrflag);
    3444:	80 91 29 03 	lds	r24, 0x0329
    3448:	90 91 2a 03 	lds	r25, 0x032A
    344c:	81 60       	ori	r24, 0x01	; 1
    344e:	90 93 2a 03 	sts	0x032A, r25
    3452:	80 93 29 03 	sts	0x0329, r24
	sei();
    3456:	78 94       	sei
    3458:	08 95       	ret

0000345a <_Z19maininterupthandlerv>:
	//interupt dierekt aus der rtc
	//if((rtc.interupts & (1<<hundinterupt))){
		//rtc.zeit();
		//rtc.interupts&=~(1<<hundinterupt);
	//}
	if ((anzeige&(1<<Fahradflag)))
    345a:	80 91 29 03 	lds	r24, 0x0329
    345e:	81 ff       	sbrs	r24, 1
    3460:	0d c0       	rjmp	.+26     	; 0x347c <_Z19maininterupthandlerv+0x22>
	{
		//debounce Funktion fuer den Reedswitch
		if (reed_debounce(&PINC,PINC3))
    3462:	63 e0       	ldi	r22, 0x03	; 3
    3464:	86 e2       	ldi	r24, 0x26	; 38
    3466:	90 e0       	ldi	r25, 0x00	; 0
    3468:	0e 94 a3 19 	call	0x3346	; 0x3346 <_Z13reed_debouncePVhh>
    346c:	88 23       	and	r24, r24
    346e:	31 f0       	breq	.+12     	; 0x347c <_Z19maininterupthandlerv+0x22>
		{
			//Durchmesser ist 28 Zoll
			geschwindigkeit(28.0*2.54/100.0);
    3470:	63 e3       	ldi	r22, 0x33	; 51
    3472:	71 e1       	ldi	r23, 0x11	; 17
    3474:	86 e3       	ldi	r24, 0x36	; 54
    3476:	9f e3       	ldi	r25, 0x3F	; 63
    3478:	0e 94 48 19 	call	0x3290	; 0x3290 <_Z15geschwindigkeitf>
		}
	}
	if ((rtc.interupts&(1<<Weckeractiv)))
    347c:	20 91 91 07 	lds	r18, 0x0791
    3480:	82 2f       	mov	r24, r18
    3482:	88 71       	andi	r24, 0x18	; 24
	{
		if ((rtc.interupts&(1<<Weckerein)))
    3484:	88 31       	cpi	r24, 0x18	; 24
    3486:	61 f4       	brne	.+24     	; 0x34a0 <_Z19maininterupthandlerv+0x46>
		{
			anzeige |= (1<<blinkflag) | (1<<refreshdisplay);
    3488:	80 91 29 03 	lds	r24, 0x0329
    348c:	90 91 2a 03 	lds	r25, 0x032A
    3490:	90 6c       	ori	r25, 0xC0	; 192
    3492:	90 93 2a 03 	sts	0x032A, r25
    3496:	80 93 29 03 	sts	0x0329, r24
			rtc.interupts &= ~(1<<Weckerein);
    349a:	27 7f       	andi	r18, 0xF7	; 247
    349c:	20 93 91 07 	sts	0x0791, r18
    34a0:	08 95       	ret

000034a2 <_Z14anzeigehandlerv>:
		}
	}
}

void anzeigehandler(){
    34a2:	4f 92       	push	r4
    34a4:	5f 92       	push	r5
    34a6:	6f 92       	push	r6
    34a8:	7f 92       	push	r7
    34aa:	af 92       	push	r10
    34ac:	bf 92       	push	r11
    34ae:	cf 92       	push	r12
    34b0:	df 92       	push	r13
    34b2:	ef 92       	push	r14
    34b4:	ff 92       	push	r15
    34b6:	0f 93       	push	r16
    34b8:	1f 93       	push	r17
    34ba:	cf 93       	push	r28
    34bc:	df 93       	push	r29
	//Handler fuer 1Hz Flag
	if ((rtc.interupts & (1<<sekundeninterupt)))
    34be:	80 91 91 07 	lds	r24, 0x0791
    34c2:	81 ff       	sbrs	r24, 1
    34c4:	85 c1       	rjmp	.+778    	; 0x37d0 <_Z14anzeigehandlerv+0x32e>
	{
		rtc.zeit();
    34c6:	89 e7       	ldi	r24, 0x79	; 121
    34c8:	97 e0       	ldi	r25, 0x07	; 7
    34ca:	0e 94 82 26 	call	0x4d04	; 0x4d04 <_ZN3RTC4zeitEv>
		//Handler fuer die Anzeige der Seiten
		//Die einzelnen Funktionen beschreiben nur den Framebuffer und nicht dierekt das Display
		if ((anzeige&(1<<menueflag)) && (anzeige&(1<<Uhrflag)))
    34ce:	80 91 29 03 	lds	r24, 0x0329
    34d2:	90 91 2a 03 	lds	r25, 0x032A
    34d6:	9c 01       	movw	r18, r24
    34d8:	21 70       	andi	r18, 0x01	; 1
    34da:	30 72       	andi	r19, 0x20	; 32
    34dc:	21 30       	cpi	r18, 0x01	; 1
    34de:	30 42       	sbci	r19, 0x20	; 32
    34e0:	61 f4       	brne	.+24     	; 0x34fa <_Z14anzeigehandlerv+0x58>
		{
			menue_uhr();
    34e2:	0e 94 76 0d 	call	0x1aec	; 0x1aec <_Z9menue_uhrv>
			anzeige|=(1<<refreshdisplay);
    34e6:	80 91 29 03 	lds	r24, 0x0329
    34ea:	90 91 2a 03 	lds	r25, 0x032A
    34ee:	90 68       	ori	r25, 0x80	; 128
    34f0:	90 93 2a 03 	sts	0x032A, r25
    34f4:	80 93 29 03 	sts	0x0329, r24
    34f8:	51 c1       	rjmp	.+674    	; 0x379c <_Z14anzeigehandlerv+0x2fa>
    34fa:	9c 01       	movw	r18, r24
    34fc:	28 70       	andi	r18, 0x08	; 8
    34fe:	30 72       	andi	r19, 0x20	; 32
		}
		else if ((anzeige&(1<<menueflag)) && (anzeige&(1<<Einstellungsflag)))
    3500:	28 30       	cpi	r18, 0x08	; 8
    3502:	30 42       	sbci	r19, 0x20	; 32
    3504:	61 f4       	brne	.+24     	; 0x351e <_Z14anzeigehandlerv+0x7c>
		{
			menue_einst();
    3506:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <_Z11menue_einstv>
			anzeige|=(1<<refreshdisplay);
    350a:	80 91 29 03 	lds	r24, 0x0329
    350e:	90 91 2a 03 	lds	r25, 0x032A
    3512:	90 68       	ori	r25, 0x80	; 128
    3514:	90 93 2a 03 	sts	0x032A, r25
    3518:	80 93 29 03 	sts	0x0329, r24
    351c:	3f c1       	rjmp	.+638    	; 0x379c <_Z14anzeigehandlerv+0x2fa>
		}
		else if ((anzeige&(1<<menueflag)))
    351e:	95 ff       	sbrs	r25, 5
    3520:	0c c0       	rjmp	.+24     	; 0x353a <_Z14anzeigehandlerv+0x98>
		{
			menue_haupt();
    3522:	0e 94 22 0c 	call	0x1844	; 0x1844 <_Z11menue_hauptv>
			anzeige|=(1<<refreshdisplay);
    3526:	80 91 29 03 	lds	r24, 0x0329
    352a:	90 91 2a 03 	lds	r25, 0x032A
    352e:	90 68       	ori	r25, 0x80	; 128
    3530:	90 93 2a 03 	sts	0x032A, r25
    3534:	80 93 29 03 	sts	0x0329, r24
    3538:	31 c1       	rjmp	.+610    	; 0x379c <_Z14anzeigehandlerv+0x2fa>
		}
		else if ((anzeige&(1<<Kompasgaineinstellenflag)))
    353a:	85 ff       	sbrs	r24, 5
    353c:	0c c0       	rjmp	.+24     	; 0x3556 <_Z14anzeigehandlerv+0xb4>
		{
			Gaineinstellen();
    353e:	0e 94 4e 11 	call	0x229c	; 0x229c <_Z14Gaineinstellenv>
			anzeige|=(1<<refreshdisplay);
    3542:	80 91 29 03 	lds	r24, 0x0329
    3546:	90 91 2a 03 	lds	r25, 0x032A
    354a:	90 68       	ori	r25, 0x80	; 128
    354c:	90 93 2a 03 	sts	0x032A, r25
    3550:	80 93 29 03 	sts	0x0329, r24
    3554:	23 c1       	rjmp	.+582    	; 0x379c <_Z14anzeigehandlerv+0x2fa>
		}
		else if ((anzeige&(1<<Uhrflag)))
    3556:	80 ff       	sbrs	r24, 0
    3558:	0c c0       	rjmp	.+24     	; 0x3572 <_Z14anzeigehandlerv+0xd0>
		{
			uhranzeigen();
    355a:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <_Z11uhranzeigenv>
			anzeige|=(1<<refreshdisplay);
    355e:	80 91 29 03 	lds	r24, 0x0329
    3562:	90 91 2a 03 	lds	r25, 0x032A
    3566:	90 68       	ori	r25, 0x80	; 128
    3568:	90 93 2a 03 	sts	0x032A, r25
    356c:	80 93 29 03 	sts	0x0329, r24
    3570:	15 c1       	rjmp	.+554    	; 0x379c <_Z14anzeigehandlerv+0x2fa>
		}
		else if ((anzeige&(1<<Kompasflag)))
    3572:	82 ff       	sbrs	r24, 2
    3574:	10 c0       	rjmp	.+32     	; 0x3596 <_Z14anzeigehandlerv+0xf4>
		{
			anzeige_kompass(kompass.angle());
    3576:	84 e9       	ldi	r24, 0x94	; 148
    3578:	97 e0       	ldi	r25, 0x07	; 7
    357a:	0e 94 69 22 	call	0x44d2	; 0x44d2 <_ZN7Kompass5angleEv>
    357e:	0e 94 34 12 	call	0x2468	; 0x2468 <_Z15anzeige_kompassd>
			anzeige|=(1<<refreshdisplay);
    3582:	80 91 29 03 	lds	r24, 0x0329
    3586:	90 91 2a 03 	lds	r25, 0x032A
    358a:	90 68       	ori	r25, 0x80	; 128
    358c:	90 93 2a 03 	sts	0x032A, r25
    3590:	80 93 29 03 	sts	0x0329, r24
    3594:	03 c1       	rjmp	.+518    	; 0x379c <_Z14anzeigehandlerv+0x2fa>
		}
		else if ((anzeige&(1<<Fahradflag)))
    3596:	81 ff       	sbrs	r24, 1
    3598:	96 c0       	rjmp	.+300    	; 0x36c6 <_Z14anzeigehandlerv+0x224>
		{
			//fahradschirm(12.3,kompass.angle());
			if (geschw>maxgeschw)
    359a:	40 90 24 03 	lds	r4, 0x0324
    359e:	50 90 25 03 	lds	r5, 0x0325
    35a2:	60 90 26 03 	lds	r6, 0x0326
    35a6:	70 90 27 03 	lds	r7, 0x0327
    35aa:	20 91 1c 03 	lds	r18, 0x031C
    35ae:	30 91 1d 03 	lds	r19, 0x031D
    35b2:	40 91 1e 03 	lds	r20, 0x031E
    35b6:	50 91 1f 03 	lds	r21, 0x031F
    35ba:	c3 01       	movw	r24, r6
    35bc:	b2 01       	movw	r22, r4
    35be:	0e 94 73 29 	call	0x52e6	; 0x52e6 <__gesf2>
    35c2:	18 16       	cp	r1, r24
    35c4:	44 f4       	brge	.+16     	; 0x35d6 <_Z14anzeigehandlerv+0x134>
			{
				maxgeschw=geschw;
    35c6:	40 92 1c 03 	sts	0x031C, r4
    35ca:	50 92 1d 03 	sts	0x031D, r5
    35ce:	60 92 1e 03 	sts	0x031E, r6
    35d2:	70 92 1f 03 	sts	0x031F, r7
			}
			if (geschw != 0)
    35d6:	20 e0       	ldi	r18, 0x00	; 0
    35d8:	30 e0       	ldi	r19, 0x00	; 0
    35da:	a9 01       	movw	r20, r18
    35dc:	c3 01       	movw	r24, r6
    35de:	b2 01       	movw	r22, r4
    35e0:	0e 94 c3 27 	call	0x4f86	; 0x4f86 <__cmpsf2>
    35e4:	88 23       	and	r24, r24
    35e6:	99 f0       	breq	.+38     	; 0x360e <_Z14anzeigehandlerv+0x16c>
			{
				Fahrtzeit++;
    35e8:	80 91 18 03 	lds	r24, 0x0318
    35ec:	90 91 19 03 	lds	r25, 0x0319
    35f0:	a0 91 1a 03 	lds	r26, 0x031A
    35f4:	b0 91 1b 03 	lds	r27, 0x031B
    35f8:	01 96       	adiw	r24, 0x01	; 1
    35fa:	a1 1d       	adc	r26, r1
    35fc:	b1 1d       	adc	r27, r1
    35fe:	80 93 18 03 	sts	0x0318, r24
    3602:	90 93 19 03 	sts	0x0319, r25
    3606:	a0 93 1a 03 	sts	0x031A, r26
    360a:	b0 93 1b 03 	sts	0x031B, r27
			}
			strecke+=geschw/3.6;
    360e:	26 e6       	ldi	r18, 0x66	; 102
    3610:	36 e6       	ldi	r19, 0x66	; 102
    3612:	46 e6       	ldi	r20, 0x66	; 102
    3614:	50 e4       	ldi	r21, 0x40	; 64
    3616:	c3 01       	movw	r24, r6
    3618:	b2 01       	movw	r22, r4
    361a:	0e 94 ca 27 	call	0x4f94	; 0x4f94 <__divsf3>
    361e:	20 91 20 03 	lds	r18, 0x0320
    3622:	30 91 21 03 	lds	r19, 0x0321
    3626:	40 91 22 03 	lds	r20, 0x0322
    362a:	50 91 23 03 	lds	r21, 0x0323
    362e:	0e 94 fd 26 	call	0x4dfa	; 0x4dfa <__addsf3>
    3632:	2b 01       	movw	r4, r22
    3634:	3c 01       	movw	r6, r24
    3636:	60 93 20 03 	sts	0x0320, r22
    363a:	70 93 21 03 	sts	0x0321, r23
    363e:	80 93 22 03 	sts	0x0322, r24
    3642:	90 93 23 03 	sts	0x0323, r25
			fahradschirm(geschw,kompass.angle(),strecke,maxgeschw, Fahrtzeit);
    3646:	c0 91 18 03 	lds	r28, 0x0318
    364a:	d0 91 19 03 	lds	r29, 0x0319
    364e:	10 91 1a 03 	lds	r17, 0x031A
    3652:	00 91 1b 03 	lds	r16, 0x031B
    3656:	a0 90 1c 03 	lds	r10, 0x031C
    365a:	b0 90 1d 03 	lds	r11, 0x031D
    365e:	c0 90 1e 03 	lds	r12, 0x031E
    3662:	d0 90 1f 03 	lds	r13, 0x031F
    3666:	84 e9       	ldi	r24, 0x94	; 148
    3668:	97 e0       	ldi	r25, 0x07	; 7
    366a:	0e 94 69 22 	call	0x44d2	; 0x44d2 <_ZN7Kompass5angleEv>
    366e:	9b 01       	movw	r18, r22
    3670:	ac 01       	movw	r20, r24
    3672:	60 91 24 03 	lds	r22, 0x0324
    3676:	70 91 25 03 	lds	r23, 0x0325
    367a:	80 91 26 03 	lds	r24, 0x0326
    367e:	90 91 27 03 	lds	r25, 0x0327
    3682:	0f 93       	push	r16
    3684:	1f 93       	push	r17
    3686:	df 93       	push	r29
    3688:	cf 93       	push	r28
    368a:	83 01       	movw	r16, r6
    368c:	72 01       	movw	r14, r4
    368e:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <_Z12fahradschirmddddm>
			if (rtc.Sekunden%2)
    3692:	80 91 8b 07 	lds	r24, 0x078B
    3696:	0f 90       	pop	r0
    3698:	0f 90       	pop	r0
    369a:	0f 90       	pop	r0
    369c:	0f 90       	pop	r0
    369e:	80 ff       	sbrs	r24, 0
    36a0:	08 c0       	rjmp	.+16     	; 0x36b2 <_Z14anzeigehandlerv+0x210>
			{
				geschw=0;
    36a2:	10 92 24 03 	sts	0x0324, r1
    36a6:	10 92 25 03 	sts	0x0325, r1
    36aa:	10 92 26 03 	sts	0x0326, r1
    36ae:	10 92 27 03 	sts	0x0327, r1
			}
			anzeige|=(1<<refreshdisplay);
    36b2:	80 91 29 03 	lds	r24, 0x0329
    36b6:	90 91 2a 03 	lds	r25, 0x032A
    36ba:	90 68       	ori	r25, 0x80	; 128
    36bc:	90 93 2a 03 	sts	0x032A, r25
    36c0:	80 93 29 03 	sts	0x0329, r24
    36c4:	6b c0       	rjmp	.+214    	; 0x379c <_Z14anzeigehandlerv+0x2fa>
    36c6:	9c 01       	movw	r18, r24
    36c8:	28 74       	andi	r18, 0x48	; 72
    36ca:	33 27       	eor	r19, r19
		}
		else if ((anzeige&(1<<Einstellungsflag)) && (anzeige&(1<<Timerflag)))
    36cc:	28 34       	cpi	r18, 0x48	; 72
    36ce:	31 05       	cpc	r19, r1
    36d0:	61 f4       	brne	.+24     	; 0x36ea <_Z14anzeigehandlerv+0x248>
		{
			timerseite();
    36d2:	0e 94 48 13 	call	0x2690	; 0x2690 <_Z10timerseitev>
			anzeige|=(1<<refreshdisplay);
    36d6:	80 91 29 03 	lds	r24, 0x0329
    36da:	90 91 2a 03 	lds	r25, 0x032A
    36de:	90 68       	ori	r25, 0x80	; 128
    36e0:	90 93 2a 03 	sts	0x032A, r25
    36e4:	80 93 29 03 	sts	0x0329, r24
    36e8:	59 c0       	rjmp	.+178    	; 0x379c <_Z14anzeigehandlerv+0x2fa>
		}
		else if ((anzeige&(1<<Stoppuhrflag)))
    36ea:	87 ff       	sbrs	r24, 7
    36ec:	17 c0       	rjmp	.+46     	; 0x371c <_Z14anzeigehandlerv+0x27a>
		{
			if ((anzeige&(1<<Einstellungsflag)))
    36ee:	83 ff       	sbrs	r24, 3
    36f0:	09 c0       	rjmp	.+18     	; 0x3704 <_Z14anzeigehandlerv+0x262>
			{
				stoppuhr.Sekunden++;
    36f2:	e5 e5       	ldi	r30, 0x55	; 85
    36f4:	f7 e0       	ldi	r31, 0x07	; 7
    36f6:	80 81       	ld	r24, Z
    36f8:	8f 5f       	subi	r24, 0xFF	; 255
    36fa:	80 83       	st	Z, r24
				stoppuhr.zeit();
    36fc:	83 e4       	ldi	r24, 0x43	; 67
    36fe:	97 e0       	ldi	r25, 0x07	; 7
    3700:	0e 94 82 26 	call	0x4d04	; 0x4d04 <_ZN3RTC4zeitEv>
			}
			Stoppuhrseite();
    3704:	0e 94 dd 13 	call	0x27ba	; 0x27ba <_Z13Stoppuhrseitev>
			anzeige|=(1<<refreshdisplay);
    3708:	80 91 29 03 	lds	r24, 0x0329
    370c:	90 91 2a 03 	lds	r25, 0x032A
    3710:	90 68       	ori	r25, 0x80	; 128
    3712:	90 93 2a 03 	sts	0x032A, r25
    3716:	80 93 29 03 	sts	0x0329, r24
    371a:	40 c0       	rjmp	.+128    	; 0x379c <_Z14anzeigehandlerv+0x2fa>
		}
		else if ((anzeige&(1<<Timerflag)))
    371c:	86 ff       	sbrs	r24, 6
    371e:	20 c0       	rjmp	.+64     	; 0x3760 <_Z14anzeigehandlerv+0x2be>
		{
			zaehler.Sekunden--;
    3720:	e0 e7       	ldi	r30, 0x70	; 112
    3722:	f7 e0       	ldi	r31, 0x07	; 7
    3724:	80 81       	ld	r24, Z
    3726:	81 50       	subi	r24, 0x01	; 1
    3728:	80 83       	st	Z, r24
			if(zaehler.timer()){
    372a:	8e e5       	ldi	r24, 0x5E	; 94
    372c:	97 e0       	ldi	r25, 0x07	; 7
    372e:	0e 94 df 26 	call	0x4dbe	; 0x4dbe <_ZN3RTC5timerEv>
    3732:	88 23       	and	r24, r24
    3734:	49 f0       	breq	.+18     	; 0x3748 <_Z14anzeigehandlerv+0x2a6>
				anzeige|=(1<<blinkflag);
    3736:	80 91 29 03 	lds	r24, 0x0329
    373a:	90 91 2a 03 	lds	r25, 0x032A
    373e:	90 64       	ori	r25, 0x40	; 64
    3740:	90 93 2a 03 	sts	0x032A, r25
    3744:	80 93 29 03 	sts	0x0329, r24
			}
			timerseite();
    3748:	0e 94 48 13 	call	0x2690	; 0x2690 <_Z10timerseitev>
			anzeige|=(1<<refreshdisplay);
    374c:	80 91 29 03 	lds	r24, 0x0329
    3750:	90 91 2a 03 	lds	r25, 0x032A
    3754:	90 68       	ori	r25, 0x80	; 128
    3756:	90 93 2a 03 	sts	0x032A, r25
    375a:	80 93 29 03 	sts	0x0329, r24
    375e:	1e c0       	rjmp	.+60     	; 0x379c <_Z14anzeigehandlerv+0x2fa>
		}
		else if ((anzeige&(1<<Druckflag)))
    3760:	91 ff       	sbrs	r25, 1
    3762:	0c c0       	rjmp	.+24     	; 0x377c <_Z14anzeigehandlerv+0x2da>
		{
			Pressuresensor();
    3764:	0e 94 67 14 	call	0x28ce	; 0x28ce <_Z14Pressuresensorv>
			anzeige |= (1<<refreshdisplay);
    3768:	80 91 29 03 	lds	r24, 0x0329
    376c:	90 91 2a 03 	lds	r25, 0x032A
    3770:	90 68       	ori	r25, 0x80	; 128
    3772:	90 93 2a 03 	sts	0x032A, r25
    3776:	80 93 29 03 	sts	0x0329, r24
    377a:	10 c0       	rjmp	.+32     	; 0x379c <_Z14anzeigehandlerv+0x2fa>
    377c:	88 70       	andi	r24, 0x08	; 8
    377e:	98 70       	andi	r25, 0x08	; 8
		}
		else if ((anzeige&(1<<Weckeranzeigeflag))&&(anzeige&(1<<Einstellungsflag)))
    3780:	88 30       	cpi	r24, 0x08	; 8
    3782:	98 40       	sbci	r25, 0x08	; 8
    3784:	59 f4       	brne	.+22     	; 0x379c <_Z14anzeigehandlerv+0x2fa>
		{
			Weckeranzeige();
    3786:	0e 94 59 0f 	call	0x1eb2	; 0x1eb2 <_Z13Weckeranzeigev>
			anzeige|=(1<<refreshdisplay);
    378a:	80 91 29 03 	lds	r24, 0x0329
    378e:	90 91 2a 03 	lds	r25, 0x032A
    3792:	90 68       	ori	r25, 0x80	; 128
    3794:	90 93 2a 03 	sts	0x032A, r25
    3798:	80 93 29 03 	sts	0x0329, r24
		}
		if ((anzeige&(1<<blinkflag)))
    379c:	80 91 29 03 	lds	r24, 0x0329
    37a0:	90 91 2a 03 	lds	r25, 0x032A
    37a4:	96 ff       	sbrs	r25, 6
    37a6:	0f c0       	rjmp	.+30     	; 0x37c6 <_Z14anzeigehandlerv+0x324>
		{
			oled.invert(rtc.Sekunden%2);
    37a8:	60 91 8b 07 	lds	r22, 0x078B
    37ac:	61 70       	andi	r22, 0x01	; 1
    37ae:	82 e4       	ldi	r24, 0x42	; 66
    37b0:	93 e0       	ldi	r25, 0x03	; 3
    37b2:	0e 94 89 03 	call	0x712	; 0x712 <_ZN7Display6invertEh>
			LED.toggle();
    37b6:	8f e3       	ldi	r24, 0x3F	; 63
    37b8:	93 e0       	ldi	r25, 0x03	; 3
    37ba:	0e 94 c1 23 	call	0x4782	; 0x4782 <_ZN6Output6toggleEv>
			Vibrationsmotor.on();
    37be:	8d e3       	ldi	r24, 0x3D	; 61
    37c0:	93 e0       	ldi	r25, 0x03	; 3
    37c2:	0e 94 26 23 	call	0x464c	; 0x464c <_ZN6Output2onEv>
		}
		rtc.interupts&=~(1<<sekundeninterupt);
    37c6:	e1 e9       	ldi	r30, 0x91	; 145
    37c8:	f7 e0       	ldi	r31, 0x07	; 7
    37ca:	80 81       	ld	r24, Z
    37cc:	8d 7f       	andi	r24, 0xFD	; 253
    37ce:	80 83       	st	Z, r24
	}
	//Minuteninterrupt
	if ((rtc.interupts&(1<<minuteninterupt)))
    37d0:	80 91 91 07 	lds	r24, 0x0791
    37d4:	82 ff       	sbrs	r24, 2
    37d6:	24 c0       	rjmp	.+72     	; 0x3820 <_Z14anzeigehandlerv+0x37e>
	{
		if ((anzeige&(1<<Uhrflaggross)))
    37d8:	80 91 29 03 	lds	r24, 0x0329
    37dc:	90 91 2a 03 	lds	r25, 0x032A
    37e0:	92 ff       	sbrs	r25, 2
    37e2:	0c c0       	rjmp	.+24     	; 0x37fc <_Z14anzeigehandlerv+0x35a>
		{
			uhranzeigenmin();
    37e4:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <_Z14uhranzeigenminv>
			anzeige|=(1<<refreshdisplay);
    37e8:	80 91 29 03 	lds	r24, 0x0329
    37ec:	90 91 2a 03 	lds	r25, 0x032A
    37f0:	90 68       	ori	r25, 0x80	; 128
    37f2:	90 93 2a 03 	sts	0x032A, r25
    37f6:	80 93 29 03 	sts	0x0329, r24
    37fa:	0d c0       	rjmp	.+26     	; 0x3816 <_Z14anzeigehandlerv+0x374>
		}
		else if ((anzeige&(1<<Weckeranzeigeflag)))
    37fc:	93 ff       	sbrs	r25, 3
    37fe:	0b c0       	rjmp	.+22     	; 0x3816 <_Z14anzeigehandlerv+0x374>
		{
			Weckeranzeige();
    3800:	0e 94 59 0f 	call	0x1eb2	; 0x1eb2 <_Z13Weckeranzeigev>
			anzeige|=(1<<refreshdisplay);
    3804:	80 91 29 03 	lds	r24, 0x0329
    3808:	90 91 2a 03 	lds	r25, 0x032A
    380c:	90 68       	ori	r25, 0x80	; 128
    380e:	90 93 2a 03 	sts	0x032A, r25
    3812:	80 93 29 03 	sts	0x0329, r24
		}
		rtc.interupts&=~(1<<minuteninterupt);
    3816:	e1 e9       	ldi	r30, 0x91	; 145
    3818:	f7 e0       	ldi	r31, 0x07	; 7
    381a:	80 81       	ld	r24, Z
    381c:	8b 7f       	andi	r24, 0xFB	; 251
    381e:	80 83       	st	Z, r24
	}
	//neuen Framebuffer an das Dispay senden
	if ((anzeige&(1<<refreshdisplay)))
    3820:	80 91 29 03 	lds	r24, 0x0329
    3824:	90 91 2a 03 	lds	r25, 0x032A
    3828:	99 23       	and	r25, r25
    382a:	6c f4       	brge	.+26     	; 0x3846 <_Z14anzeigehandlerv+0x3a4>
	{
		oled.sendFrame();
    382c:	82 e4       	ldi	r24, 0x42	; 66
    382e:	93 e0       	ldi	r25, 0x03	; 3
    3830:	0e 94 93 03 	call	0x726	; 0x726 <_ZN7Display9sendFrameEv>
		anzeige&=~(1<<refreshdisplay);
    3834:	80 91 29 03 	lds	r24, 0x0329
    3838:	90 91 2a 03 	lds	r25, 0x032A
    383c:	9f 77       	andi	r25, 0x7F	; 127
    383e:	90 93 2a 03 	sts	0x032A, r25
    3842:	80 93 29 03 	sts	0x0329, r24
	}
}
    3846:	df 91       	pop	r29
    3848:	cf 91       	pop	r28
    384a:	1f 91       	pop	r17
    384c:	0f 91       	pop	r16
    384e:	ff 90       	pop	r15
    3850:	ef 90       	pop	r14
    3852:	df 90       	pop	r13
    3854:	cf 90       	pop	r12
    3856:	bf 90       	pop	r11
    3858:	af 90       	pop	r10
    385a:	7f 90       	pop	r7
    385c:	6f 90       	pop	r6
    385e:	5f 90       	pop	r5
    3860:	4f 90       	pop	r4
    3862:	08 95       	ret

00003864 <_Z14eingabehandlerh>:

void eingabehandler(uint8_t taste){
	if (taste!='A')
    3864:	81 34       	cpi	r24, 0x41	; 65
    3866:	09 f4       	brne	.+2      	; 0x386a <_Z14eingabehandlerh+0x6>
    3868:	d5 c3       	rjmp	.+1962   	; 0x4014 <_Z14eingabehandlerh+0x7b0>
	{
		rtc.interupts |= (1<<sekundeninterupt);
    386a:	e1 e9       	ldi	r30, 0x91	; 145
    386c:	f7 e0       	ldi	r31, 0x07	; 7
    386e:	90 81       	ld	r25, Z
    3870:	29 2f       	mov	r18, r25
    3872:	22 60       	ori	r18, 0x02	; 2
    3874:	20 83       	st	Z, r18
		if (anzeige==255)
    3876:	20 91 29 03 	lds	r18, 0x0329
    387a:	30 91 2a 03 	lds	r19, 0x032A
    387e:	2f 3f       	cpi	r18, 0xFF	; 255
    3880:	31 05       	cpc	r19, r1
    3882:	61 f4       	brne	.+24     	; 0x389c <_Z14eingabehandlerh+0x38>
		{
			oled.ssd1306_command(SSD1306_DISPLAYON);
    3884:	6f ea       	ldi	r22, 0xAF	; 175
    3886:	82 e4       	ldi	r24, 0x42	; 66
    3888:	93 e0       	ldi	r25, 0x03	; 3
    388a:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <_ZN7Display15ssd1306_commandEh>
			//entweder display aus oder das Menue starten
			anzeige=(1<<menueflag);
    388e:	80 e0       	ldi	r24, 0x00	; 0
    3890:	90 e2       	ldi	r25, 0x20	; 32
    3892:	90 93 2a 03 	sts	0x032A, r25
    3896:	80 93 29 03 	sts	0x0329, r24
    389a:	08 95       	ret
    389c:	a9 01       	movw	r20, r18
    389e:	41 70       	andi	r20, 0x01	; 1
    38a0:	50 72       	andi	r21, 0x20	; 32
		}
		//gleicher Handler wie oben, aber hier speziell fuer die Bearbeitung von Tastereingaben mit switch fuer die Tasten
		//es sind einfach so viele Tasten moeglich 
		else if ((anzeige&(1<<menueflag)) && (anzeige&(1<<Uhrflag)))	//Menue der Uhr
    38a2:	41 30       	cpi	r20, 0x01	; 1
    38a4:	50 42       	sbci	r21, 0x20	; 32
    38a6:	09 f0       	breq	.+2      	; 0x38aa <_Z14eingabehandlerh+0x46>
    38a8:	5a c0       	rjmp	.+180    	; 0x395e <_Z14eingabehandlerh+0xfa>
		{	
			anzeige&=~((1<<menueflag)|(1<<Uhrflag));
    38aa:	2e 7f       	andi	r18, 0xFE	; 254
    38ac:	3f 7d       	andi	r19, 0xDF	; 223
    38ae:	30 93 2a 03 	sts	0x032A, r19
    38b2:	20 93 29 03 	sts	0x0329, r18
			switch (taste)
    38b6:	83 33       	cpi	r24, 0x33	; 51
    38b8:	f9 f0       	breq	.+62     	; 0x38f8 <_Z14eingabehandlerh+0x94>
    38ba:	28 f4       	brcc	.+10     	; 0x38c6 <_Z14eingabehandlerh+0x62>
    38bc:	81 33       	cpi	r24, 0x31	; 49
    38be:	49 f0       	breq	.+18     	; 0x38d2 <_Z14eingabehandlerh+0x6e>
    38c0:	82 33       	cpi	r24, 0x32	; 50
    38c2:	69 f0       	breq	.+26     	; 0x38de <_Z14eingabehandlerh+0x7a>
    38c4:	45 c0       	rjmp	.+138    	; 0x3950 <_Z14eingabehandlerh+0xec>
    38c6:	85 33       	cpi	r24, 0x35	; 53
    38c8:	89 f1       	breq	.+98     	; 0x392c <_Z14eingabehandlerh+0xc8>
    38ca:	10 f1       	brcs	.+68     	; 0x3910 <_Z14eingabehandlerh+0xac>
    38cc:	86 33       	cpi	r24, 0x36	; 54
    38ce:	b9 f1       	breq	.+110    	; 0x393e <_Z14eingabehandlerh+0xda>
    38d0:	3f c0       	rjmp	.+126    	; 0x3950 <_Z14eingabehandlerh+0xec>
			{
				case '1':
					//Wechseln auf die Uhr
					anzeige|=(1<<Uhrflag);
    38d2:	21 60       	ori	r18, 0x01	; 1
    38d4:	30 93 2a 03 	sts	0x032A, r19
    38d8:	20 93 29 03 	sts	0x0329, r18
					break;
    38dc:	08 95       	ret
				
				case '2':
					//starten der Stoppuhr APP
					stoppuhr.Sekunden=0;
    38de:	10 92 55 07 	sts	0x0755, r1
					stoppuhr.Minuten=0;
    38e2:	10 92 54 07 	sts	0x0754, r1
					stoppuhr.Stunden=0;
    38e6:	10 92 53 07 	sts	0x0753, r1
					anzeige|=(1<<refreshdisplay) | (1<<Stoppuhrflag);
    38ea:	20 68       	ori	r18, 0x80	; 128
    38ec:	30 68       	ori	r19, 0x80	; 128
    38ee:	30 93 2a 03 	sts	0x032A, r19
    38f2:	20 93 29 03 	sts	0x0329, r18
					break;
    38f6:	08 95       	ret
				
				case '3':
					//Starten der Timer APP
					zaehler.Sekunden=0;
    38f8:	10 92 70 07 	sts	0x0770, r1
					zaehler.Minuten=0;
    38fc:	10 92 6f 07 	sts	0x076F, r1
					zaehler.Stunden=0;
    3900:	10 92 6e 07 	sts	0x076E, r1
					
					anzeige|=(1<<Timerflag) | (1<<Einstellungsflag);
    3904:	28 64       	ori	r18, 0x48	; 72
    3906:	30 93 2a 03 	sts	0x032A, r19
    390a:	20 93 29 03 	sts	0x0329, r18
					break;
    390e:	08 95       	ret
				
				case '4':
					//Starten der Alarmapp, momentan nicht implementiert
					oled.clearFrame();
    3910:	82 e4       	ldi	r24, 0x42	; 66
    3912:	93 e0       	ldi	r25, 0x03	; 3
    3914:	0e 94 ed 02 	call	0x5da	; 0x5da <_ZN7Display10clearFrameEv>
					anzeige|=(1<<refreshdisplay);
    3918:	80 91 29 03 	lds	r24, 0x0329
    391c:	90 91 2a 03 	lds	r25, 0x032A
    3920:	90 68       	ori	r25, 0x80	; 128
    3922:	90 93 2a 03 	sts	0x032A, r25
    3926:	80 93 29 03 	sts	0x0329, r24
					break;
    392a:	08 95       	ret
				
				case '5':
					//Wechseln auf grosse Uhr
					rtc.interupts |=(1<<minuteninterupt);
    392c:	96 60       	ori	r25, 0x06	; 6
    392e:	90 93 91 07 	sts	0x0791, r25
					anzeige |=(1<<Uhrflaggross) | (1<<refreshdisplay);	
    3932:	34 68       	ori	r19, 0x84	; 132
    3934:	30 93 2a 03 	sts	0x032A, r19
    3938:	20 93 29 03 	sts	0x0329, r18
					break;
    393c:	08 95       	ret
				case '6':
					rtc.interupts |=(1<<minuteninterupt);
    393e:	96 60       	ori	r25, 0x06	; 6
    3940:	90 93 91 07 	sts	0x0791, r25
					anzeige |= (1<<Weckeranzeigeflag);
    3944:	38 60       	ori	r19, 0x08	; 8
    3946:	30 93 2a 03 	sts	0x032A, r19
    394a:	20 93 29 03 	sts	0x0329, r18
					break;
    394e:	08 95       	ret
				default:
					//menueflag erneu setzen
					anzeige|=(1<<menueflag)|(1<<Uhrflag);
    3950:	21 60       	ori	r18, 0x01	; 1
    3952:	30 62       	ori	r19, 0x20	; 32
    3954:	30 93 2a 03 	sts	0x032A, r19
    3958:	20 93 29 03 	sts	0x0329, r18
					break;
    395c:	31 c3       	rjmp	.+1634   	; 0x3fc0 <_Z14eingabehandlerh+0x75c>
    395e:	a9 01       	movw	r20, r18
    3960:	48 70       	andi	r20, 0x08	; 8
    3962:	50 72       	andi	r21, 0x20	; 32
			}
		}
		else if ((anzeige&(1<<menueflag)) && (anzeige&(1<<Einstellungsflag)))	//Menue der Einstellungen
    3964:	48 30       	cpi	r20, 0x08	; 8
    3966:	50 42       	sbci	r21, 0x20	; 32
    3968:	09 f0       	breq	.+2      	; 0x396c <_Z14eingabehandlerh+0x108>
    396a:	3f c0       	rjmp	.+126    	; 0x39ea <_Z14eingabehandlerh+0x186>
		{
			anzeige&=~((1<<menueflag)|(1<<Einstellungsflag));
    396c:	27 7f       	andi	r18, 0xF7	; 247
    396e:	3f 7d       	andi	r19, 0xDF	; 223
    3970:	30 93 2a 03 	sts	0x032A, r19
    3974:	20 93 29 03 	sts	0x0329, r18
			switch (taste)
    3978:	82 33       	cpi	r24, 0x32	; 50
    397a:	b9 f0       	breq	.+46     	; 0x39aa <_Z14eingabehandlerh+0x146>
    397c:	18 f4       	brcc	.+6      	; 0x3984 <_Z14eingabehandlerh+0x120>
    397e:	81 33       	cpi	r24, 0x31	; 49
    3980:	31 f0       	breq	.+12     	; 0x398e <_Z14eingabehandlerh+0x12a>
    3982:	2c c0       	rjmp	.+88     	; 0x39dc <_Z14eingabehandlerh+0x178>
    3984:	83 33       	cpi	r24, 0x33	; 51
    3986:	b9 f0       	breq	.+46     	; 0x39b6 <_Z14eingabehandlerh+0x152>
    3988:	84 33       	cpi	r24, 0x34	; 52
    398a:	09 f1       	breq	.+66     	; 0x39ce <_Z14eingabehandlerh+0x16a>
    398c:	27 c0       	rjmp	.+78     	; 0x39dc <_Z14eingabehandlerh+0x178>
			{
				case '1':
					//zuruecksetzen der Kalibrierung, da passive Kallibrierung eingebaut
					kompass.kallibrierung_ruecksetzen();
    398e:	84 e9       	ldi	r24, 0x94	; 148
    3990:	97 e0       	ldi	r25, 0x07	; 7
    3992:	0e 94 e1 22 	call	0x45c2	; 0x45c2 <_ZN7Kompass25kallibrierung_ruecksetzenEv>
					anzeige|=(1<<Kompasflag);
    3996:	80 91 29 03 	lds	r24, 0x0329
    399a:	90 91 2a 03 	lds	r25, 0x032A
    399e:	84 60       	ori	r24, 0x04	; 4
    39a0:	90 93 2a 03 	sts	0x032A, r25
    39a4:	80 93 29 03 	sts	0x0329, r24
					break;
    39a8:	08 95       	ret
				case '2':
					//Gaineinstellung fuer den Kompass
					anzeige|=(1<<Kompasgaineinstellenflag);
    39aa:	20 62       	ori	r18, 0x20	; 32
    39ac:	30 93 2a 03 	sts	0x032A, r19
    39b0:	20 93 29 03 	sts	0x0329, r18
					break;
    39b4:	08 95       	ret
				case '3':
					//dies ist eine der wenigen Funktinen, die die Handler Strucktur nicht anwenden, da sie die rtc anhaellt
					uhreinstellen();
    39b6:	0e 94 5a 15 	call	0x2ab4	; 0x2ab4 <_Z13uhreinstellenv>
					anzeige|=(1<<Uhrflag);
    39ba:	80 91 29 03 	lds	r24, 0x0329
    39be:	90 91 2a 03 	lds	r25, 0x032A
    39c2:	81 60       	ori	r24, 0x01	; 1
    39c4:	90 93 2a 03 	sts	0x032A, r25
    39c8:	80 93 29 03 	sts	0x0329, r24
					break;
    39cc:	08 95       	ret
				case '4':
					anzeige |= (1<<Einstellungsflag) | (1<<Weckeranzeigeflag);
    39ce:	28 60       	ori	r18, 0x08	; 8
    39d0:	38 60       	ori	r19, 0x08	; 8
    39d2:	30 93 2a 03 	sts	0x032A, r19
    39d6:	20 93 29 03 	sts	0x0329, r18
					break;
    39da:	08 95       	ret
				default:
					//Menueflag neu setzten
					anzeige|=(1<<menueflag)|(1<<Einstellungsflag);
    39dc:	28 60       	ori	r18, 0x08	; 8
    39de:	30 62       	ori	r19, 0x20	; 32
    39e0:	30 93 2a 03 	sts	0x032A, r19
    39e4:	20 93 29 03 	sts	0x0329, r18
					break;
    39e8:	eb c2       	rjmp	.+1494   	; 0x3fc0 <_Z14eingabehandlerh+0x75c>
			}
		}
		else if ((anzeige&(1<<menueflag)))	//nur das grosse menue
    39ea:	35 ff       	sbrs	r19, 5
    39ec:	58 c0       	rjmp	.+176    	; 0x3a9e <_Z14eingabehandlerh+0x23a>
		{
			anzeige&=~(1<<menueflag);
    39ee:	3f 7d       	andi	r19, 0xDF	; 223
    39f0:	30 93 2a 03 	sts	0x032A, r19
    39f4:	20 93 29 03 	sts	0x0329, r18
			switch (taste)
    39f8:	48 2f       	mov	r20, r24
    39fa:	50 e0       	ldi	r21, 0x00	; 0
    39fc:	fa 01       	movw	r30, r20
    39fe:	f1 97       	sbiw	r30, 0x31	; 49
    3a00:	e7 30       	cpi	r30, 0x07	; 7
    3a02:	f1 05       	cpc	r31, r1
    3a04:	08 f0       	brcs	.+2      	; 0x3a08 <_Z14eingabehandlerh+0x1a4>
    3a06:	45 c0       	rjmp	.+138    	; 0x3a92 <_Z14eingabehandlerh+0x22e>
    3a08:	e2 5c       	subi	r30, 0xC2	; 194
    3a0a:	ff 4f       	sbci	r31, 0xFF	; 255
    3a0c:	0c 94 e9 2d 	jmp	0x5bd2	; 0x5bd2 <__tablejump2__>
			{
				case '1':
					anzeige|=(1<<Fahradflag);
    3a10:	22 60       	ori	r18, 0x02	; 2
    3a12:	30 93 2a 03 	sts	0x032A, r19
    3a16:	20 93 29 03 	sts	0x0329, r18
					//starten des Timers fuer die geschwindigkeit
					TCCR1B |= ((1<<CS12) | (1<<CS10));
    3a1a:	e1 e8       	ldi	r30, 0x81	; 129
    3a1c:	f0 e0       	ldi	r31, 0x00	; 0
    3a1e:	80 81       	ld	r24, Z
    3a20:	85 60       	ori	r24, 0x05	; 5
    3a22:	80 83       	st	Z, r24
					break;
    3a24:	08 95       	ret
				
				case '2':
					//Taschenrechner starten
					//Monentan deaktiv, da Umstellung der Handler 
					//operation(Flieskommazahleingabe());
					oled.clearFrame();
    3a26:	82 e4       	ldi	r24, 0x42	; 66
    3a28:	93 e0       	ldi	r25, 0x03	; 3
    3a2a:	0e 94 ed 02 	call	0x5da	; 0x5da <_ZN7Display10clearFrameEv>
					anzeige|=(1<<refreshdisplay);	
    3a2e:	80 91 29 03 	lds	r24, 0x0329
    3a32:	90 91 2a 03 	lds	r25, 0x032A
    3a36:	90 68       	ori	r25, 0x80	; 128
    3a38:	90 93 2a 03 	sts	0x032A, r25
    3a3c:	80 93 29 03 	sts	0x0329, r24
					break;
    3a40:	08 95       	ret
				
				case '3':
					anzeige|=(1<<Kompasflag);
    3a42:	24 60       	ori	r18, 0x04	; 4
    3a44:	30 93 2a 03 	sts	0x032A, r19
    3a48:	20 93 29 03 	sts	0x0329, r18
					break;
    3a4c:	08 95       	ret
				
				case '4':
					//Menue der Uhr
					anzeige|=(1<<menueflag) | (1<<Uhrflag);
    3a4e:	21 60       	ori	r18, 0x01	; 1
    3a50:	30 62       	ori	r19, 0x20	; 32
    3a52:	30 93 2a 03 	sts	0x032A, r19
    3a56:	20 93 29 03 	sts	0x0329, r18
					break;
    3a5a:	08 95       	ret
				
				case '5':
					//menue der Einstellungen
					anzeige|=(1<<menueflag) | (1<<Einstellungsflag);
    3a5c:	28 60       	ori	r18, 0x08	; 8
    3a5e:	30 62       	ori	r19, 0x20	; 32
    3a60:	30 93 2a 03 	sts	0x032A, r19
    3a64:	20 93 29 03 	sts	0x0329, r18
					break;
    3a68:	08 95       	ret
				
				case '6':
					//Display ausschalten
					//anzeige=255;
					oled.clearFrame();
    3a6a:	82 e4       	ldi	r24, 0x42	; 66
    3a6c:	93 e0       	ldi	r25, 0x03	; 3
    3a6e:	0e 94 ed 02 	call	0x5da	; 0x5da <_ZN7Display10clearFrameEv>
					anzeige|=(1<<refreshdisplay);
    3a72:	80 91 29 03 	lds	r24, 0x0329
    3a76:	90 91 2a 03 	lds	r25, 0x032A
    3a7a:	90 68       	ori	r25, 0x80	; 128
    3a7c:	90 93 2a 03 	sts	0x032A, r25
    3a80:	80 93 29 03 	sts	0x0329, r24
					break;
    3a84:	08 95       	ret
				case '7':
					anzeige |= (1<<Druckflag);
    3a86:	32 60       	ori	r19, 0x02	; 2
    3a88:	30 93 2a 03 	sts	0x032A, r19
    3a8c:	20 93 29 03 	sts	0x0329, r18
					break;
    3a90:	08 95       	ret
				default:
					//menueflag erneut setzen um abschalten zu verhindern
					anzeige|=(1<<menueflag);
    3a92:	30 62       	ori	r19, 0x20	; 32
    3a94:	30 93 2a 03 	sts	0x032A, r19
    3a98:	20 93 29 03 	sts	0x0329, r18
					break;
    3a9c:	91 c2       	rjmp	.+1314   	; 0x3fc0 <_Z14eingabehandlerh+0x75c>
    3a9e:	a9 01       	movw	r20, r18
    3aa0:	48 70       	andi	r20, 0x08	; 8
    3aa2:	58 70       	andi	r21, 0x08	; 8
			}
		}
		else if ((anzeige&(1<<Einstellungsflag))&&(anzeige&(1<<Weckeranzeigeflag)))
    3aa4:	48 30       	cpi	r20, 0x08	; 8
    3aa6:	58 40       	sbci	r21, 0x08	; 8
    3aa8:	09 f0       	breq	.+2      	; 0x3aac <_Z14eingabehandlerh+0x248>
    3aaa:	68 c0       	rjmp	.+208    	; 0x3b7c <_Z14eingabehandlerh+0x318>
		{
			switch (pos)
    3aac:	40 91 28 03 	lds	r20, 0x0328
    3ab0:	41 30       	cpi	r20, 0x01	; 1
    3ab2:	11 f1       	breq	.+68     	; 0x3af8 <_Z14eingabehandlerh+0x294>
    3ab4:	30 f0       	brcs	.+12     	; 0x3ac2 <_Z14eingabehandlerh+0x25e>
    3ab6:	42 30       	cpi	r20, 0x02	; 2
    3ab8:	79 f1       	breq	.+94     	; 0x3b18 <_Z14eingabehandlerh+0x2b4>
    3aba:	43 30       	cpi	r20, 0x03	; 3
    3abc:	09 f4       	brne	.+2      	; 0x3ac0 <_Z14eingabehandlerh+0x25c>
    3abe:	3f c0       	rjmp	.+126    	; 0x3b3e <_Z14eingabehandlerh+0x2da>
    3ac0:	7f c2       	rjmp	.+1278   	; 0x3fc0 <_Z14eingabehandlerh+0x75c>
			{
				case 0:
					rtc.WStunden=0;
    3ac2:	10 92 93 07 	sts	0x0793, r1
					rtc.WMinuten=0;
    3ac6:	10 92 92 07 	sts	0x0792, r1
					rtc.interupts &= ~((1<<Weckerein)|(1<<Weckeractiv));
    3aca:	97 7e       	andi	r25, 0xE7	; 231
    3acc:	92 60       	ori	r25, 0x02	; 2
    3ace:	90 93 91 07 	sts	0x0791, r25
					switch (taste)
    3ad2:	83 32       	cpi	r24, 0x23	; 35
    3ad4:	09 f4       	brne	.+2      	; 0x3ad8 <_Z14eingabehandlerh+0x274>
    3ad6:	74 c2       	rjmp	.+1256   	; 0x3fc0 <_Z14eingabehandlerh+0x75c>
    3ad8:	8a 32       	cpi	r24, 0x2A	; 42
    3ada:	09 f4       	brne	.+2      	; 0x3ade <_Z14eingabehandlerh+0x27a>
    3adc:	71 c2       	rjmp	.+1250   	; 0x3fc0 <_Z14eingabehandlerh+0x75c>
						case '#':
							break;
						case '*':
							break;
						default:
							rtc.WStunden=(taste-'0')*10;
    3ade:	98 2f       	mov	r25, r24
    3ae0:	99 0f       	add	r25, r25
    3ae2:	90 56       	subi	r25, 0x60	; 96
    3ae4:	29 2f       	mov	r18, r25
    3ae6:	22 0f       	add	r18, r18
    3ae8:	22 0f       	add	r18, r18
    3aea:	92 0f       	add	r25, r18
    3aec:	90 93 93 07 	sts	0x0793, r25
							pos++;
    3af0:	91 e0       	ldi	r25, 0x01	; 1
    3af2:	90 93 28 03 	sts	0x0328, r25
						break;
    3af6:	64 c2       	rjmp	.+1224   	; 0x3fc0 <_Z14eingabehandlerh+0x75c>
					}
					break;
				case 1:
					switch (taste)
    3af8:	83 32       	cpi	r24, 0x23	; 35
    3afa:	09 f4       	brne	.+2      	; 0x3afe <_Z14eingabehandlerh+0x29a>
    3afc:	61 c2       	rjmp	.+1218   	; 0x3fc0 <_Z14eingabehandlerh+0x75c>
    3afe:	8a 32       	cpi	r24, 0x2A	; 42
    3b00:	09 f4       	brne	.+2      	; 0x3b04 <_Z14eingabehandlerh+0x2a0>
    3b02:	5e c2       	rjmp	.+1212   	; 0x3fc0 <_Z14eingabehandlerh+0x75c>
						case '#':
							break;
						case '*':
							break;
						default:
							rtc.WStunden+=(taste-'0');
    3b04:	e3 e9       	ldi	r30, 0x93	; 147
    3b06:	f7 e0       	ldi	r31, 0x07	; 7
    3b08:	90 81       	ld	r25, Z
    3b0a:	90 53       	subi	r25, 0x30	; 48
    3b0c:	98 0f       	add	r25, r24
    3b0e:	90 83       	st	Z, r25
							pos++;
    3b10:	92 e0       	ldi	r25, 0x02	; 2
    3b12:	90 93 28 03 	sts	0x0328, r25
						break;
    3b16:	54 c2       	rjmp	.+1192   	; 0x3fc0 <_Z14eingabehandlerh+0x75c>
					}
					break;
				case 2:
					switch (taste)
    3b18:	83 32       	cpi	r24, 0x23	; 35
    3b1a:	09 f4       	brne	.+2      	; 0x3b1e <_Z14eingabehandlerh+0x2ba>
    3b1c:	51 c2       	rjmp	.+1186   	; 0x3fc0 <_Z14eingabehandlerh+0x75c>
    3b1e:	8a 32       	cpi	r24, 0x2A	; 42
    3b20:	09 f4       	brne	.+2      	; 0x3b24 <_Z14eingabehandlerh+0x2c0>
    3b22:	4e c2       	rjmp	.+1180   	; 0x3fc0 <_Z14eingabehandlerh+0x75c>
						case '#':
							break;
						case '*':
							break;
						default:
							rtc.WMinuten=(taste-'0')*10;
    3b24:	98 2f       	mov	r25, r24
    3b26:	99 0f       	add	r25, r25
    3b28:	90 56       	subi	r25, 0x60	; 96
    3b2a:	29 2f       	mov	r18, r25
    3b2c:	22 0f       	add	r18, r18
    3b2e:	22 0f       	add	r18, r18
    3b30:	92 0f       	add	r25, r18
    3b32:	90 93 92 07 	sts	0x0792, r25
							pos++;
    3b36:	93 e0       	ldi	r25, 0x03	; 3
    3b38:	90 93 28 03 	sts	0x0328, r25
						break;
    3b3c:	41 c2       	rjmp	.+1154   	; 0x3fc0 <_Z14eingabehandlerh+0x75c>
					}
					break;
				case 3:
					switch (taste)
    3b3e:	83 32       	cpi	r24, 0x23	; 35
    3b40:	41 f0       	breq	.+16     	; 0x3b52 <_Z14eingabehandlerh+0x2ee>
    3b42:	8a 32       	cpi	r24, 0x2A	; 42
    3b44:	31 f0       	breq	.+12     	; 0x3b52 <_Z14eingabehandlerh+0x2ee>
						case '#':
							break;
						case '*':
							break;
						default:
							rtc.WMinuten+=(taste-'0');
    3b46:	e2 e9       	ldi	r30, 0x92	; 146
    3b48:	f7 e0       	ldi	r31, 0x07	; 7
    3b4a:	40 81       	ld	r20, Z
    3b4c:	40 53       	subi	r20, 0x30	; 48
    3b4e:	48 0f       	add	r20, r24
    3b50:	40 83       	st	Z, r20
							pos++;
						break;
					}
					pos=0;
    3b52:	10 92 28 03 	sts	0x0328, r1
					if (!(rtc.WStunden>=24) && !(rtc.WMinuten>=60))
    3b56:	40 91 93 07 	lds	r20, 0x0793
    3b5a:	48 31       	cpi	r20, 0x18	; 24
    3b5c:	08 f0       	brcs	.+2      	; 0x3b60 <_Z14eingabehandlerh+0x2fc>
    3b5e:	30 c2       	rjmp	.+1120   	; 0x3fc0 <_Z14eingabehandlerh+0x75c>
    3b60:	40 91 92 07 	lds	r20, 0x0792
    3b64:	4c 33       	cpi	r20, 0x3C	; 60
    3b66:	08 f0       	brcs	.+2      	; 0x3b6a <_Z14eingabehandlerh+0x306>
    3b68:	2b c2       	rjmp	.+1110   	; 0x3fc0 <_Z14eingabehandlerh+0x75c>
					{
						anzeige&=~(1<<Einstellungsflag);
    3b6a:	27 7f       	andi	r18, 0xF7	; 247
    3b6c:	30 93 2a 03 	sts	0x032A, r19
    3b70:	20 93 29 03 	sts	0x0329, r18
						rtc.interupts|=(1<<Weckerein);
						rtc.interupts|=(1<<minuteninterupt);
    3b74:	9e 60       	ori	r25, 0x0E	; 14
    3b76:	90 93 91 07 	sts	0x0791, r25
    3b7a:	22 c2       	rjmp	.+1092   	; 0x3fc0 <_Z14eingabehandlerh+0x75c>
					}
					break;
			}
		}
		else if ((anzeige&(1<<Kompasgaineinstellenflag)))
    3b7c:	25 ff       	sbrs	r18, 5
    3b7e:	51 c0       	rjmp	.+162    	; 0x3c22 <_Z14eingabehandlerh+0x3be>
		{
			anzeige&=~(1<<Kompasgaineinstellenflag);
    3b80:	a9 01       	movw	r20, r18
    3b82:	4f 7d       	andi	r20, 0xDF	; 223
			anzeige|=(1<<Kompasflag);
    3b84:	44 60       	ori	r20, 0x04	; 4
    3b86:	50 93 2a 03 	sts	0x032A, r21
    3b8a:	40 93 29 03 	sts	0x0329, r20
			switch (taste) {
    3b8e:	48 2f       	mov	r20, r24
    3b90:	50 e0       	ldi	r21, 0x00	; 0
    3b92:	fa 01       	movw	r30, r20
    3b94:	f1 97       	sbiw	r30, 0x31	; 49
    3b96:	e8 30       	cpi	r30, 0x08	; 8
    3b98:	f1 05       	cpc	r31, r1
    3b9a:	e0 f5       	brcc	.+120    	; 0x3c14 <_Z14eingabehandlerh+0x3b0>
    3b9c:	eb 5b       	subi	r30, 0xBB	; 187
    3b9e:	ff 4f       	sbci	r31, 0xFF	; 255
    3ba0:	0c 94 e9 2d 	jmp	0x5bd2	; 0x5bd2 <__tablejump2__>
				case '1':
					kompass.HMC5883L_command(0x01,HMCGAIN1370);
    3ba4:	40 e0       	ldi	r20, 0x00	; 0
    3ba6:	61 e0       	ldi	r22, 0x01	; 1
    3ba8:	84 e9       	ldi	r24, 0x94	; 148
    3baa:	97 e0       	ldi	r25, 0x07	; 7
    3bac:	0e 94 66 21 	call	0x42cc	; 0x42cc <_ZN7Kompass16HMC5883L_commandEhh>
					break;
    3bb0:	08 95       	ret
				case '2':
					kompass.HMC5883L_command(0x01,HMCGAIN1090);
    3bb2:	40 e2       	ldi	r20, 0x20	; 32
    3bb4:	61 e0       	ldi	r22, 0x01	; 1
    3bb6:	84 e9       	ldi	r24, 0x94	; 148
    3bb8:	97 e0       	ldi	r25, 0x07	; 7
    3bba:	0e 94 66 21 	call	0x42cc	; 0x42cc <_ZN7Kompass16HMC5883L_commandEhh>
					break;
    3bbe:	08 95       	ret
				case '3':
					kompass.HMC5883L_command(0x01,HMCGAIN820);
    3bc0:	40 e4       	ldi	r20, 0x40	; 64
    3bc2:	61 e0       	ldi	r22, 0x01	; 1
    3bc4:	84 e9       	ldi	r24, 0x94	; 148
    3bc6:	97 e0       	ldi	r25, 0x07	; 7
    3bc8:	0e 94 66 21 	call	0x42cc	; 0x42cc <_ZN7Kompass16HMC5883L_commandEhh>
					break;
    3bcc:	08 95       	ret
				case '4':
					kompass.HMC5883L_command(0x01,HMCGAIN660);
    3bce:	40 e6       	ldi	r20, 0x60	; 96
    3bd0:	61 e0       	ldi	r22, 0x01	; 1
    3bd2:	84 e9       	ldi	r24, 0x94	; 148
    3bd4:	97 e0       	ldi	r25, 0x07	; 7
    3bd6:	0e 94 66 21 	call	0x42cc	; 0x42cc <_ZN7Kompass16HMC5883L_commandEhh>
					break;
    3bda:	08 95       	ret
				case '5':
					kompass.HMC5883L_command(0x01,HMCGAIN440);
    3bdc:	40 e8       	ldi	r20, 0x80	; 128
    3bde:	61 e0       	ldi	r22, 0x01	; 1
    3be0:	84 e9       	ldi	r24, 0x94	; 148
    3be2:	97 e0       	ldi	r25, 0x07	; 7
    3be4:	0e 94 66 21 	call	0x42cc	; 0x42cc <_ZN7Kompass16HMC5883L_commandEhh>
					break;
    3be8:	08 95       	ret
				case '6':
					kompass.HMC5883L_command(0x01,HMCGAIN390);
    3bea:	40 ea       	ldi	r20, 0xA0	; 160
    3bec:	61 e0       	ldi	r22, 0x01	; 1
    3bee:	84 e9       	ldi	r24, 0x94	; 148
    3bf0:	97 e0       	ldi	r25, 0x07	; 7
    3bf2:	0e 94 66 21 	call	0x42cc	; 0x42cc <_ZN7Kompass16HMC5883L_commandEhh>
					break;
    3bf6:	08 95       	ret
				case '7':
					kompass.HMC5883L_command(0x01,HMCGAIN330);
    3bf8:	40 ec       	ldi	r20, 0xC0	; 192
    3bfa:	61 e0       	ldi	r22, 0x01	; 1
    3bfc:	84 e9       	ldi	r24, 0x94	; 148
    3bfe:	97 e0       	ldi	r25, 0x07	; 7
    3c00:	0e 94 66 21 	call	0x42cc	; 0x42cc <_ZN7Kompass16HMC5883L_commandEhh>
					break;
    3c04:	08 95       	ret
				case '8':
					kompass.HMC5883L_command(0x01,HMCGAIN230);
    3c06:	40 ee       	ldi	r20, 0xE0	; 224
    3c08:	61 e0       	ldi	r22, 0x01	; 1
    3c0a:	84 e9       	ldi	r24, 0x94	; 148
    3c0c:	97 e0       	ldi	r25, 0x07	; 7
    3c0e:	0e 94 66 21 	call	0x42cc	; 0x42cc <_ZN7Kompass16HMC5883L_commandEhh>
					break;
    3c12:	08 95       	ret
				default:
					anzeige &=~(1<<Kompasflag);
    3c14:	2b 7d       	andi	r18, 0xDB	; 219
					anzeige|=(1<<Kompasgaineinstellenflag);
    3c16:	20 62       	ori	r18, 0x20	; 32
    3c18:	30 93 2a 03 	sts	0x032A, r19
    3c1c:	20 93 29 03 	sts	0x0329, r18
					break;
    3c20:	cf c1       	rjmp	.+926    	; 0x3fc0 <_Z14eingabehandlerh+0x75c>
    3c22:	a9 01       	movw	r20, r18
    3c24:	48 74       	andi	r20, 0x48	; 72
    3c26:	55 27       	eor	r21, r21
			}
		}
		else if ((anzeige&(1<<Einstellungsflag)) && (anzeige&(1<<Timerflag)))
    3c28:	48 34       	cpi	r20, 0x48	; 72
    3c2a:	51 05       	cpc	r21, r1
    3c2c:	09 f0       	breq	.+2      	; 0x3c30 <_Z14eingabehandlerh+0x3cc>
    3c2e:	87 c0       	rjmp	.+270    	; 0x3d3e <_Z14eingabehandlerh+0x4da>
		{
			switch (pos)
    3c30:	90 91 28 03 	lds	r25, 0x0328
    3c34:	92 30       	cpi	r25, 0x02	; 2
    3c36:	a9 f1       	breq	.+106    	; 0x3ca2 <_Z14eingabehandlerh+0x43e>
    3c38:	28 f4       	brcc	.+10     	; 0x3c44 <_Z14eingabehandlerh+0x3e0>
    3c3a:	99 23       	and	r25, r25
    3c3c:	61 f0       	breq	.+24     	; 0x3c56 <_Z14eingabehandlerh+0x3f2>
    3c3e:	91 30       	cpi	r25, 0x01	; 1
    3c40:	01 f1       	breq	.+64     	; 0x3c82 <_Z14eingabehandlerh+0x41e>
    3c42:	be c1       	rjmp	.+892    	; 0x3fc0 <_Z14eingabehandlerh+0x75c>
    3c44:	94 30       	cpi	r25, 0x04	; 4
    3c46:	09 f4       	brne	.+2      	; 0x3c4a <_Z14eingabehandlerh+0x3e6>
    3c48:	52 c0       	rjmp	.+164    	; 0x3cee <_Z14eingabehandlerh+0x48a>
    3c4a:	08 f4       	brcc	.+2      	; 0x3c4e <_Z14eingabehandlerh+0x3ea>
    3c4c:	40 c0       	rjmp	.+128    	; 0x3cce <_Z14eingabehandlerh+0x46a>
    3c4e:	95 30       	cpi	r25, 0x05	; 5
    3c50:	09 f4       	brne	.+2      	; 0x3c54 <_Z14eingabehandlerh+0x3f0>
    3c52:	63 c0       	rjmp	.+198    	; 0x3d1a <_Z14eingabehandlerh+0x4b6>
    3c54:	b5 c1       	rjmp	.+874    	; 0x3fc0 <_Z14eingabehandlerh+0x75c>
			{
			case 0:
				switch (taste)
    3c56:	83 32       	cpi	r24, 0x23	; 35
    3c58:	09 f4       	brne	.+2      	; 0x3c5c <_Z14eingabehandlerh+0x3f8>
    3c5a:	b2 c1       	rjmp	.+868    	; 0x3fc0 <_Z14eingabehandlerh+0x75c>
    3c5c:	8a 32       	cpi	r24, 0x2A	; 42
    3c5e:	09 f4       	brne	.+2      	; 0x3c62 <_Z14eingabehandlerh+0x3fe>
    3c60:	af c1       	rjmp	.+862    	; 0x3fc0 <_Z14eingabehandlerh+0x75c>
					case '#':
						break;
					case '*':
						break;
					default:
						zaehler.Sekunden+=(taste-'0')*10;
    3c62:	e0 e7       	ldi	r30, 0x70	; 112
    3c64:	f7 e0       	ldi	r31, 0x07	; 7
    3c66:	98 2f       	mov	r25, r24
    3c68:	99 0f       	add	r25, r25
    3c6a:	90 56       	subi	r25, 0x60	; 96
    3c6c:	29 2f       	mov	r18, r25
    3c6e:	22 0f       	add	r18, r18
    3c70:	22 0f       	add	r18, r18
    3c72:	92 0f       	add	r25, r18
    3c74:	20 81       	ld	r18, Z
    3c76:	92 0f       	add	r25, r18
    3c78:	90 83       	st	Z, r25
						pos++;
    3c7a:	91 e0       	ldi	r25, 0x01	; 1
    3c7c:	90 93 28 03 	sts	0x0328, r25
						break;
    3c80:	9f c1       	rjmp	.+830    	; 0x3fc0 <_Z14eingabehandlerh+0x75c>
				}
				break;
			case 1:
				switch (taste)
    3c82:	83 32       	cpi	r24, 0x23	; 35
    3c84:	09 f4       	brne	.+2      	; 0x3c88 <_Z14eingabehandlerh+0x424>
    3c86:	9c c1       	rjmp	.+824    	; 0x3fc0 <_Z14eingabehandlerh+0x75c>
    3c88:	8a 32       	cpi	r24, 0x2A	; 42
    3c8a:	09 f4       	brne	.+2      	; 0x3c8e <_Z14eingabehandlerh+0x42a>
    3c8c:	99 c1       	rjmp	.+818    	; 0x3fc0 <_Z14eingabehandlerh+0x75c>
					case '#':
					break;
					case '*':
					break;
					default:
					zaehler.Sekunden+=(taste-'0');
    3c8e:	e0 e7       	ldi	r30, 0x70	; 112
    3c90:	f7 e0       	ldi	r31, 0x07	; 7
    3c92:	90 81       	ld	r25, Z
    3c94:	90 53       	subi	r25, 0x30	; 48
    3c96:	98 0f       	add	r25, r24
    3c98:	90 83       	st	Z, r25
					pos++;
    3c9a:	92 e0       	ldi	r25, 0x02	; 2
    3c9c:	90 93 28 03 	sts	0x0328, r25
					break;
    3ca0:	8f c1       	rjmp	.+798    	; 0x3fc0 <_Z14eingabehandlerh+0x75c>
				}
				break;
			case 2:
				switch (taste)
    3ca2:	83 32       	cpi	r24, 0x23	; 35
    3ca4:	09 f4       	brne	.+2      	; 0x3ca8 <_Z14eingabehandlerh+0x444>
    3ca6:	8c c1       	rjmp	.+792    	; 0x3fc0 <_Z14eingabehandlerh+0x75c>
    3ca8:	8a 32       	cpi	r24, 0x2A	; 42
    3caa:	09 f4       	brne	.+2      	; 0x3cae <_Z14eingabehandlerh+0x44a>
    3cac:	89 c1       	rjmp	.+786    	; 0x3fc0 <_Z14eingabehandlerh+0x75c>
					case '#':
					break;
					case '*':
					break;
					default:
					zaehler.Minuten+=(taste-'0')*10;
    3cae:	ef e6       	ldi	r30, 0x6F	; 111
    3cb0:	f7 e0       	ldi	r31, 0x07	; 7
    3cb2:	98 2f       	mov	r25, r24
    3cb4:	99 0f       	add	r25, r25
    3cb6:	90 56       	subi	r25, 0x60	; 96
    3cb8:	29 2f       	mov	r18, r25
    3cba:	22 0f       	add	r18, r18
    3cbc:	22 0f       	add	r18, r18
    3cbe:	92 0f       	add	r25, r18
    3cc0:	20 81       	ld	r18, Z
    3cc2:	92 0f       	add	r25, r18
    3cc4:	90 83       	st	Z, r25
					pos++;
    3cc6:	93 e0       	ldi	r25, 0x03	; 3
    3cc8:	90 93 28 03 	sts	0x0328, r25
					break;
    3ccc:	79 c1       	rjmp	.+754    	; 0x3fc0 <_Z14eingabehandlerh+0x75c>
				}
				break;
			case 3:
				switch (taste)
    3cce:	83 32       	cpi	r24, 0x23	; 35
    3cd0:	09 f4       	brne	.+2      	; 0x3cd4 <_Z14eingabehandlerh+0x470>
    3cd2:	76 c1       	rjmp	.+748    	; 0x3fc0 <_Z14eingabehandlerh+0x75c>
    3cd4:	8a 32       	cpi	r24, 0x2A	; 42
    3cd6:	09 f4       	brne	.+2      	; 0x3cda <_Z14eingabehandlerh+0x476>
    3cd8:	73 c1       	rjmp	.+742    	; 0x3fc0 <_Z14eingabehandlerh+0x75c>
					case '#':
					break;
					case '*':
					break;
					default:
					zaehler.Minuten+=(taste-'0');
    3cda:	ef e6       	ldi	r30, 0x6F	; 111
    3cdc:	f7 e0       	ldi	r31, 0x07	; 7
    3cde:	90 81       	ld	r25, Z
    3ce0:	90 53       	subi	r25, 0x30	; 48
    3ce2:	98 0f       	add	r25, r24
    3ce4:	90 83       	st	Z, r25
					pos++;
    3ce6:	94 e0       	ldi	r25, 0x04	; 4
    3ce8:	90 93 28 03 	sts	0x0328, r25
					break;
    3cec:	69 c1       	rjmp	.+722    	; 0x3fc0 <_Z14eingabehandlerh+0x75c>
				}
				break;
			case 4:
				switch (taste)
    3cee:	83 32       	cpi	r24, 0x23	; 35
    3cf0:	09 f4       	brne	.+2      	; 0x3cf4 <_Z14eingabehandlerh+0x490>
    3cf2:	66 c1       	rjmp	.+716    	; 0x3fc0 <_Z14eingabehandlerh+0x75c>
    3cf4:	8a 32       	cpi	r24, 0x2A	; 42
    3cf6:	09 f4       	brne	.+2      	; 0x3cfa <_Z14eingabehandlerh+0x496>
    3cf8:	63 c1       	rjmp	.+710    	; 0x3fc0 <_Z14eingabehandlerh+0x75c>
					case '#':
					break;
					case '*':
					break;
					default:
					zaehler.Stunden+=(taste-'0')*10;
    3cfa:	ee e6       	ldi	r30, 0x6E	; 110
    3cfc:	f7 e0       	ldi	r31, 0x07	; 7
    3cfe:	98 2f       	mov	r25, r24
    3d00:	99 0f       	add	r25, r25
    3d02:	90 56       	subi	r25, 0x60	; 96
    3d04:	29 2f       	mov	r18, r25
    3d06:	22 0f       	add	r18, r18
    3d08:	22 0f       	add	r18, r18
    3d0a:	92 0f       	add	r25, r18
    3d0c:	20 81       	ld	r18, Z
    3d0e:	92 0f       	add	r25, r18
    3d10:	90 83       	st	Z, r25
					pos++;
    3d12:	95 e0       	ldi	r25, 0x05	; 5
    3d14:	90 93 28 03 	sts	0x0328, r25
					break;
    3d18:	53 c1       	rjmp	.+678    	; 0x3fc0 <_Z14eingabehandlerh+0x75c>
				}
				break;
			case 5:
				switch (taste)
    3d1a:	83 32       	cpi	r24, 0x23	; 35
    3d1c:	41 f0       	breq	.+16     	; 0x3d2e <_Z14eingabehandlerh+0x4ca>
    3d1e:	8a 32       	cpi	r24, 0x2A	; 42
    3d20:	31 f0       	breq	.+12     	; 0x3d2e <_Z14eingabehandlerh+0x4ca>
					case '#':
					break;
					case '*':
					break;
					default:
					zaehler.Stunden+=(taste-'0');
    3d22:	ee e6       	ldi	r30, 0x6E	; 110
    3d24:	f7 e0       	ldi	r31, 0x07	; 7
    3d26:	90 81       	ld	r25, Z
    3d28:	90 53       	subi	r25, 0x30	; 48
    3d2a:	98 0f       	add	r25, r24
    3d2c:	90 83       	st	Z, r25
					pos++;
					break;
				}
				pos=0;
    3d2e:	10 92 28 03 	sts	0x0328, r1
				anzeige&=~(1<<Einstellungsflag);
    3d32:	27 7f       	andi	r18, 0xF7	; 247
    3d34:	30 93 2a 03 	sts	0x032A, r19
    3d38:	20 93 29 03 	sts	0x0329, r18
				break;
    3d3c:	41 c1       	rjmp	.+642    	; 0x3fc0 <_Z14eingabehandlerh+0x75c>
			}
		}
		else if ((anzeige&(1<<Stoppuhrflag)))
    3d3e:	27 ff       	sbrs	r18, 7
    3d40:	23 c0       	rjmp	.+70     	; 0x3d88 <_Z14eingabehandlerh+0x524>
		{
			if (taste=='*')
    3d42:	8a 32       	cpi	r24, 0x2A	; 42
    3d44:	71 f4       	brne	.+28     	; 0x3d62 <_Z14eingabehandlerh+0x4fe>
			{
				if ((anzeige&(1<<Einstellungsflag)))
    3d46:	23 ff       	sbrs	r18, 3
    3d48:	06 c0       	rjmp	.+12     	; 0x3d56 <_Z14eingabehandlerh+0x4f2>
				{
					anzeige&=~(1<<Einstellungsflag);
    3d4a:	27 7f       	andi	r18, 0xF7	; 247
    3d4c:	30 93 2a 03 	sts	0x032A, r19
    3d50:	20 93 29 03 	sts	0x0329, r18
    3d54:	59 c1       	rjmp	.+690    	; 0x4008 <_Z14eingabehandlerh+0x7a4>
				}
				else{
					anzeige|=(1<<Einstellungsflag);
    3d56:	28 60       	ori	r18, 0x08	; 8
    3d58:	30 93 2a 03 	sts	0x032A, r19
    3d5c:	20 93 29 03 	sts	0x0329, r18
    3d60:	53 c1       	rjmp	.+678    	; 0x4008 <_Z14eingabehandlerh+0x7a4>
				}
			}
			else if (taste=='0')
    3d62:	80 33       	cpi	r24, 0x30	; 48
    3d64:	39 f4       	brne	.+14     	; 0x3d74 <_Z14eingabehandlerh+0x510>
			{
				stoppuhr.Sekunden=0;
    3d66:	10 92 55 07 	sts	0x0755, r1
				stoppuhr.Minuten=0;
    3d6a:	10 92 54 07 	sts	0x0754, r1
				stoppuhr.Stunden=0;
    3d6e:	10 92 53 07 	sts	0x0753, r1
    3d72:	08 95       	ret
			}
			else if (taste=='#')
    3d74:	83 32       	cpi	r24, 0x23	; 35
    3d76:	09 f0       	breq	.+2      	; 0x3d7a <_Z14eingabehandlerh+0x516>
    3d78:	4d c1       	rjmp	.+666    	; 0x4014 <_Z14eingabehandlerh+0x7b0>
			{
				anzeige&=~((1<<Stoppuhrflag)|(1<<Einstellungsflag));
    3d7a:	27 77       	andi	r18, 0x77	; 119
				anzeige|=(1<<menueflag);
    3d7c:	30 62       	ori	r19, 0x20	; 32
    3d7e:	30 93 2a 03 	sts	0x032A, r19
    3d82:	20 93 29 03 	sts	0x0329, r18
    3d86:	08 95       	ret
			}
		}
		else if ((anzeige&(1<<Uhrflag)))
    3d88:	20 ff       	sbrs	r18, 0
    3d8a:	1c c0       	rjmp	.+56     	; 0x3dc4 <_Z14eingabehandlerh+0x560>
		{
			if (taste=='#')
    3d8c:	83 32       	cpi	r24, 0x23	; 35
    3d8e:	39 f4       	brne	.+14     	; 0x3d9e <_Z14eingabehandlerh+0x53a>
			{
				anzeige&=~(1<<Uhrflag);
    3d90:	2e 7f       	andi	r18, 0xFE	; 254
				anzeige|=(1<<menueflag);
    3d92:	30 62       	ori	r19, 0x20	; 32
    3d94:	30 93 2a 03 	sts	0x032A, r19
    3d98:	20 93 29 03 	sts	0x0329, r18
    3d9c:	08 95       	ret
			}
			else if (taste=='0')
    3d9e:	80 33       	cpi	r24, 0x30	; 48
    3da0:	09 f0       	breq	.+2      	; 0x3da4 <_Z14eingabehandlerh+0x540>
    3da2:	0e c1       	rjmp	.+540    	; 0x3fc0 <_Z14eingabehandlerh+0x75c>
			{
				if (LED.ison())
    3da4:	8f e3       	ldi	r24, 0x3F	; 63
    3da6:	93 e0       	ldi	r25, 0x03	; 3
    3da8:	0e 94 5a 23 	call	0x46b4	; 0x46b4 <_ZN6Output4isonEv>
    3dac:	88 23       	and	r24, r24
    3dae:	29 f0       	breq	.+10     	; 0x3dba <_Z14eingabehandlerh+0x556>
				{
					LED.off();
    3db0:	8f e3       	ldi	r24, 0x3F	; 63
    3db2:	93 e0       	ldi	r25, 0x03	; 3
    3db4:	0e 94 8a 23 	call	0x4714	; 0x4714 <_ZN6Output3offEv>
    3db8:	08 95       	ret
				}
				else{
					LED.on();
    3dba:	8f e3       	ldi	r24, 0x3F	; 63
    3dbc:	93 e0       	ldi	r25, 0x03	; 3
    3dbe:	0e 94 26 23 	call	0x464c	; 0x464c <_ZN6Output2onEv>
    3dc2:	08 95       	ret
				}
			}
		}
		else if ((anzeige&(1<<Kompasflag)))
    3dc4:	22 ff       	sbrs	r18, 2
    3dc6:	1d c0       	rjmp	.+58     	; 0x3e02 <_Z14eingabehandlerh+0x59e>
		{
			if (taste=='#')
    3dc8:	83 32       	cpi	r24, 0x23	; 35
    3dca:	41 f4       	brne	.+16     	; 0x3ddc <_Z14eingabehandlerh+0x578>
			{
				anzeige&=~(1<<Kompasflag);
    3dcc:	c9 01       	movw	r24, r18
    3dce:	8b 7f       	andi	r24, 0xFB	; 251
				anzeige|=(1<<menueflag);
    3dd0:	90 62       	ori	r25, 0x20	; 32
    3dd2:	90 93 2a 03 	sts	0x032A, r25
    3dd6:	80 93 29 03 	sts	0x0329, r24
    3dda:	08 95       	ret
			}
			else if (taste=='0')
    3ddc:	80 33       	cpi	r24, 0x30	; 48
    3dde:	09 f0       	breq	.+2      	; 0x3de2 <_Z14eingabehandlerh+0x57e>
    3de0:	ef c0       	rjmp	.+478    	; 0x3fc0 <_Z14eingabehandlerh+0x75c>
			{
				if (LED.ison())
    3de2:	8f e3       	ldi	r24, 0x3F	; 63
    3de4:	93 e0       	ldi	r25, 0x03	; 3
    3de6:	0e 94 5a 23 	call	0x46b4	; 0x46b4 <_ZN6Output4isonEv>
    3dea:	88 23       	and	r24, r24
    3dec:	29 f0       	breq	.+10     	; 0x3df8 <_Z14eingabehandlerh+0x594>
				{
					LED.off();
    3dee:	8f e3       	ldi	r24, 0x3F	; 63
    3df0:	93 e0       	ldi	r25, 0x03	; 3
    3df2:	0e 94 8a 23 	call	0x4714	; 0x4714 <_ZN6Output3offEv>
    3df6:	08 95       	ret
				}
				else{
					LED.on();
    3df8:	8f e3       	ldi	r24, 0x3F	; 63
    3dfa:	93 e0       	ldi	r25, 0x03	; 3
    3dfc:	0e 94 26 23 	call	0x464c	; 0x464c <_ZN6Output2onEv>
    3e00:	08 95       	ret
				}
			}
		}
		else if ((anzeige&(1<<Fahradflag)))
    3e02:	21 ff       	sbrs	r18, 1
    3e04:	3d c0       	rjmp	.+122    	; 0x3e80 <_Z14eingabehandlerh+0x61c>
		{
			if (taste=='#')
    3e06:	83 32       	cpi	r24, 0x23	; 35
    3e08:	69 f4       	brne	.+26     	; 0x3e24 <_Z14eingabehandlerh+0x5c0>
			{
				anzeige&=~(1<<Fahradflag);
    3e0a:	c9 01       	movw	r24, r18
    3e0c:	8d 7f       	andi	r24, 0xFD	; 253
				anzeige|=(1<<menueflag);
    3e0e:	90 62       	ori	r25, 0x20	; 32
    3e10:	90 93 2a 03 	sts	0x032A, r25
    3e14:	80 93 29 03 	sts	0x0329, r24
				TCCR1B &= ~((1<<CS12) | (1<<CS10));
    3e18:	e1 e8       	ldi	r30, 0x81	; 129
    3e1a:	f0 e0       	ldi	r31, 0x00	; 0
    3e1c:	80 81       	ld	r24, Z
    3e1e:	8a 7f       	andi	r24, 0xFA	; 250
    3e20:	80 83       	st	Z, r24
    3e22:	08 95       	ret
			}
			else if (taste=='*')
    3e24:	8a 32       	cpi	r24, 0x2A	; 42
    3e26:	c9 f4       	brne	.+50     	; 0x3e5a <_Z14eingabehandlerh+0x5f6>
			{
				maxgeschw = 0;
    3e28:	10 92 1c 03 	sts	0x031C, r1
    3e2c:	10 92 1d 03 	sts	0x031D, r1
    3e30:	10 92 1e 03 	sts	0x031E, r1
    3e34:	10 92 1f 03 	sts	0x031F, r1
				strecke = 0;
    3e38:	10 92 20 03 	sts	0x0320, r1
    3e3c:	10 92 21 03 	sts	0x0321, r1
    3e40:	10 92 22 03 	sts	0x0322, r1
    3e44:	10 92 23 03 	sts	0x0323, r1
				Fahrtzeit = 0;
    3e48:	10 92 18 03 	sts	0x0318, r1
    3e4c:	10 92 19 03 	sts	0x0319, r1
    3e50:	10 92 1a 03 	sts	0x031A, r1
    3e54:	10 92 1b 03 	sts	0x031B, r1
    3e58:	d7 c0       	rjmp	.+430    	; 0x4008 <_Z14eingabehandlerh+0x7a4>
			}
			else if (taste=='0')
    3e5a:	80 33       	cpi	r24, 0x30	; 48
    3e5c:	09 f0       	breq	.+2      	; 0x3e60 <_Z14eingabehandlerh+0x5fc>
    3e5e:	da c0       	rjmp	.+436    	; 0x4014 <_Z14eingabehandlerh+0x7b0>
			{
				if (LED.ison())
    3e60:	8f e3       	ldi	r24, 0x3F	; 63
    3e62:	93 e0       	ldi	r25, 0x03	; 3
    3e64:	0e 94 5a 23 	call	0x46b4	; 0x46b4 <_ZN6Output4isonEv>
    3e68:	88 23       	and	r24, r24
    3e6a:	29 f0       	breq	.+10     	; 0x3e76 <_Z14eingabehandlerh+0x612>
				{
					LED.off();
    3e6c:	8f e3       	ldi	r24, 0x3F	; 63
    3e6e:	93 e0       	ldi	r25, 0x03	; 3
    3e70:	0e 94 8a 23 	call	0x4714	; 0x4714 <_ZN6Output3offEv>
    3e74:	08 95       	ret
				}
				else{
					LED.on();
    3e76:	8f e3       	ldi	r24, 0x3F	; 63
    3e78:	93 e0       	ldi	r25, 0x03	; 3
    3e7a:	0e 94 26 23 	call	0x464c	; 0x464c <_ZN6Output2onEv>
    3e7e:	08 95       	ret
				}
			}
		}
		else if ((anzeige&(1<<Druckflag)))
    3e80:	31 ff       	sbrs	r19, 1
    3e82:	2c c0       	rjmp	.+88     	; 0x3edc <_Z14eingabehandlerh+0x678>
		{
			if (taste=='#')
    3e84:	83 32       	cpi	r24, 0x23	; 35
    3e86:	41 f4       	brne	.+16     	; 0x3e98 <_Z14eingabehandlerh+0x634>
			{
				anzeige&=~(1<<Druckflag);
    3e88:	c9 01       	movw	r24, r18
    3e8a:	9d 7f       	andi	r25, 0xFD	; 253
				anzeige|=(1<<menueflag);
    3e8c:	90 62       	ori	r25, 0x20	; 32
    3e8e:	90 93 2a 03 	sts	0x032A, r25
    3e92:	80 93 29 03 	sts	0x0329, r24
    3e96:	08 95       	ret
			}
			else if (taste=='*')
    3e98:	8a 32       	cpi	r24, 0x2A	; 42
    3e9a:	69 f4       	brne	.+26     	; 0x3eb6 <_Z14eingabehandlerh+0x652>
			{
				Baro.set_Pressure0(Baro.Press);
    3e9c:	40 91 2f 03 	lds	r20, 0x032F
    3ea0:	50 91 30 03 	lds	r21, 0x0330
    3ea4:	60 91 31 03 	lds	r22, 0x0331
    3ea8:	70 91 32 03 	lds	r23, 0x0332
    3eac:	8f e2       	ldi	r24, 0x2F	; 47
    3eae:	93 e0       	ldi	r25, 0x03	; 3
    3eb0:	0e 94 8c 25 	call	0x4b18	; 0x4b18 <_ZN8Pressure13set_Pressure0Ed>
    3eb4:	a9 c0       	rjmp	.+338    	; 0x4008 <_Z14eingabehandlerh+0x7a4>
			}
			else if (taste=='0')
    3eb6:	80 33       	cpi	r24, 0x30	; 48
    3eb8:	09 f0       	breq	.+2      	; 0x3ebc <_Z14eingabehandlerh+0x658>
    3eba:	ac c0       	rjmp	.+344    	; 0x4014 <_Z14eingabehandlerh+0x7b0>
			{
				if (LED.ison())
    3ebc:	8f e3       	ldi	r24, 0x3F	; 63
    3ebe:	93 e0       	ldi	r25, 0x03	; 3
    3ec0:	0e 94 5a 23 	call	0x46b4	; 0x46b4 <_ZN6Output4isonEv>
    3ec4:	88 23       	and	r24, r24
    3ec6:	29 f0       	breq	.+10     	; 0x3ed2 <_Z14eingabehandlerh+0x66e>
				{
					LED.off();
    3ec8:	8f e3       	ldi	r24, 0x3F	; 63
    3eca:	93 e0       	ldi	r25, 0x03	; 3
    3ecc:	0e 94 8a 23 	call	0x4714	; 0x4714 <_ZN6Output3offEv>
    3ed0:	08 95       	ret
				}
				else{
					LED.on();
    3ed2:	8f e3       	ldi	r24, 0x3F	; 63
    3ed4:	93 e0       	ldi	r25, 0x03	; 3
    3ed6:	0e 94 26 23 	call	0x464c	; 0x464c <_ZN6Output2onEv>
    3eda:	08 95       	ret
				}
			}
		}
		else if ((anzeige&(1<<Timerflag)))
    3edc:	26 ff       	sbrs	r18, 6
    3ede:	20 c0       	rjmp	.+64     	; 0x3f20 <_Z14eingabehandlerh+0x6bc>
		{
			if (taste=='#')
    3ee0:	83 32       	cpi	r24, 0x23	; 35
    3ee2:	09 f0       	breq	.+2      	; 0x3ee6 <_Z14eingabehandlerh+0x682>
    3ee4:	6d c0       	rjmp	.+218    	; 0x3fc0 <_Z14eingabehandlerh+0x75c>
			{
				anzeige&=~((1<<Timerflag)|(1<<blinkflag));
    3ee6:	2f 7b       	andi	r18, 0xBF	; 191
    3ee8:	3f 7b       	andi	r19, 0xBF	; 191
    3eea:	30 93 2a 03 	sts	0x032A, r19
    3eee:	20 93 29 03 	sts	0x0329, r18
				oled.invert(0);	//fuer den Fall, dass es invertiert blieb (50% der Faelle)
    3ef2:	60 e0       	ldi	r22, 0x00	; 0
    3ef4:	82 e4       	ldi	r24, 0x42	; 66
    3ef6:	93 e0       	ldi	r25, 0x03	; 3
    3ef8:	0e 94 89 03 	call	0x712	; 0x712 <_ZN7Display6invertEh>
				LED.off();
    3efc:	8f e3       	ldi	r24, 0x3F	; 63
    3efe:	93 e0       	ldi	r25, 0x03	; 3
    3f00:	0e 94 8a 23 	call	0x4714	; 0x4714 <_ZN6Output3offEv>
				Vibrationsmotor.off();
    3f04:	8d e3       	ldi	r24, 0x3D	; 61
    3f06:	93 e0       	ldi	r25, 0x03	; 3
    3f08:	0e 94 8a 23 	call	0x4714	; 0x4714 <_ZN6Output3offEv>
				
				anzeige|=(1<<menueflag);
    3f0c:	80 91 29 03 	lds	r24, 0x0329
    3f10:	90 91 2a 03 	lds	r25, 0x032A
    3f14:	90 62       	ori	r25, 0x20	; 32
    3f16:	90 93 2a 03 	sts	0x032A, r25
    3f1a:	80 93 29 03 	sts	0x0329, r24
    3f1e:	08 95       	ret
			}
		}
		else if ((anzeige&(1<<Uhrflaggross)))
    3f20:	32 ff       	sbrs	r19, 2
    3f22:	1d c0       	rjmp	.+58     	; 0x3f5e <_Z14eingabehandlerh+0x6fa>
		{
			if (taste=='#')
    3f24:	83 32       	cpi	r24, 0x23	; 35
    3f26:	41 f4       	brne	.+16     	; 0x3f38 <_Z14eingabehandlerh+0x6d4>
			{
				anzeige&=~(1<<Uhrflaggross);
    3f28:	c9 01       	movw	r24, r18
    3f2a:	9b 7f       	andi	r25, 0xFB	; 251
				anzeige|=(1<<menueflag);
    3f2c:	90 62       	ori	r25, 0x20	; 32
    3f2e:	90 93 2a 03 	sts	0x032A, r25
    3f32:	80 93 29 03 	sts	0x0329, r24
    3f36:	08 95       	ret
			}
			else if (taste=='0')
    3f38:	80 33       	cpi	r24, 0x30	; 48
    3f3a:	09 f0       	breq	.+2      	; 0x3f3e <_Z14eingabehandlerh+0x6da>
    3f3c:	41 c0       	rjmp	.+130    	; 0x3fc0 <_Z14eingabehandlerh+0x75c>
			{
				if (LED.ison())
    3f3e:	8f e3       	ldi	r24, 0x3F	; 63
    3f40:	93 e0       	ldi	r25, 0x03	; 3
    3f42:	0e 94 5a 23 	call	0x46b4	; 0x46b4 <_ZN6Output4isonEv>
    3f46:	88 23       	and	r24, r24
    3f48:	29 f0       	breq	.+10     	; 0x3f54 <_Z14eingabehandlerh+0x6f0>
				{
					LED.off();
    3f4a:	8f e3       	ldi	r24, 0x3F	; 63
    3f4c:	93 e0       	ldi	r25, 0x03	; 3
    3f4e:	0e 94 8a 23 	call	0x4714	; 0x4714 <_ZN6Output3offEv>
    3f52:	08 95       	ret
				}
				else{
					LED.on();
    3f54:	8f e3       	ldi	r24, 0x3F	; 63
    3f56:	93 e0       	ldi	r25, 0x03	; 3
    3f58:	0e 94 26 23 	call	0x464c	; 0x464c <_ZN6Output2onEv>
    3f5c:	08 95       	ret
				}
			}
		}
		else if ((anzeige&(1<<Weckeranzeigeflag)))
    3f5e:	33 ff       	sbrs	r19, 3
    3f60:	26 c0       	rjmp	.+76     	; 0x3fae <_Z14eingabehandlerh+0x74a>
		{
			if (taste=='#')
    3f62:	83 32       	cpi	r24, 0x23	; 35
    3f64:	41 f4       	brne	.+16     	; 0x3f76 <_Z14eingabehandlerh+0x712>
			{
				anzeige&=~(1<<Weckeranzeigeflag);
    3f66:	c9 01       	movw	r24, r18
    3f68:	97 7f       	andi	r25, 0xF7	; 247
				anzeige|=(1<<menueflag);
    3f6a:	90 62       	ori	r25, 0x20	; 32
    3f6c:	90 93 2a 03 	sts	0x032A, r25
    3f70:	80 93 29 03 	sts	0x0329, r24
    3f74:	08 95       	ret
			}
			if (taste=='*')
    3f76:	8a 32       	cpi	r24, 0x2A	; 42
    3f78:	09 f0       	breq	.+2      	; 0x3f7c <_Z14eingabehandlerh+0x718>
    3f7a:	4c c0       	rjmp	.+152    	; 0x4014 <_Z14eingabehandlerh+0x7b0>
			{
				if (rtc.interupts&(1<<Weckeractiv))
    3f7c:	94 ff       	sbrs	r25, 4
    3f7e:	06 c0       	rjmp	.+12     	; 0x3f8c <_Z14eingabehandlerh+0x728>
				{
					rtc.interupts &= ~((1<<Weckerein) | (1<<Weckeractiv));
    3f80:	89 2f       	mov	r24, r25
    3f82:	87 7e       	andi	r24, 0xE7	; 231
    3f84:	82 60       	ori	r24, 0x02	; 2
    3f86:	80 93 91 07 	sts	0x0791, r24
    3f8a:	0b c0       	rjmp	.+22     	; 0x3fa2 <_Z14eingabehandlerh+0x73e>
				}
				else if ((rtc.interupts&(1<<Weckerein)))
    3f8c:	93 ff       	sbrs	r25, 3
    3f8e:	06 c0       	rjmp	.+12     	; 0x3f9c <_Z14eingabehandlerh+0x738>
				{
					rtc.interupts &= ~(1<<Weckerein);
    3f90:	89 2f       	mov	r24, r25
    3f92:	87 7f       	andi	r24, 0xF7	; 247
    3f94:	82 60       	ori	r24, 0x02	; 2
    3f96:	80 93 91 07 	sts	0x0791, r24
    3f9a:	03 c0       	rjmp	.+6      	; 0x3fa2 <_Z14eingabehandlerh+0x73e>
				}
				else{
					rtc.interupts |= (1<<Weckerein);
    3f9c:	9a 60       	ori	r25, 0x0A	; 10
    3f9e:	90 93 91 07 	sts	0x0791, r25
				}
				rtc.interupts|=(1<<minuteninterupt);
    3fa2:	e1 e9       	ldi	r30, 0x91	; 145
    3fa4:	f7 e0       	ldi	r31, 0x07	; 7
    3fa6:	80 81       	ld	r24, Z
    3fa8:	84 60       	ori	r24, 0x04	; 4
    3faa:	80 83       	st	Z, r24
    3fac:	2d c0       	rjmp	.+90     	; 0x4008 <_Z14eingabehandlerh+0x7a4>
			}
		}
		else if (anzeige==0)
    3fae:	23 2b       	or	r18, r19
    3fb0:	39 f4       	brne	.+14     	; 0x3fc0 <_Z14eingabehandlerh+0x75c>
		{
			anzeige|=(1<<menueflag);
    3fb2:	80 e0       	ldi	r24, 0x00	; 0
    3fb4:	90 e2       	ldi	r25, 0x20	; 32
    3fb6:	90 93 2a 03 	sts	0x032A, r25
    3fba:	80 93 29 03 	sts	0x0329, r24
    3fbe:	08 95       	ret
		}
		if ((anzeige&(1<<blinkflag)))
    3fc0:	20 91 29 03 	lds	r18, 0x0329
    3fc4:	30 91 2a 03 	lds	r19, 0x032A
    3fc8:	36 ff       	sbrs	r19, 6
    3fca:	24 c0       	rjmp	.+72     	; 0x4014 <_Z14eingabehandlerh+0x7b0>
		{
			if (taste=='*')
    3fcc:	8a 32       	cpi	r24, 0x2A	; 42
    3fce:	11 f5       	brne	.+68     	; 0x4014 <_Z14eingabehandlerh+0x7b0>
			{
				anzeige &=~(1<<blinkflag);
    3fd0:	3f 7b       	andi	r19, 0xBF	; 191
    3fd2:	30 93 2a 03 	sts	0x032A, r19
    3fd6:	20 93 29 03 	sts	0x0329, r18
				oled.invert(0);	//fuer den Fall, dass es invertiert blieb (50% der Faelle)
    3fda:	60 e0       	ldi	r22, 0x00	; 0
    3fdc:	82 e4       	ldi	r24, 0x42	; 66
    3fde:	93 e0       	ldi	r25, 0x03	; 3
    3fe0:	0e 94 89 03 	call	0x712	; 0x712 <_ZN7Display6invertEh>
				LED.off();
    3fe4:	8f e3       	ldi	r24, 0x3F	; 63
    3fe6:	93 e0       	ldi	r25, 0x03	; 3
    3fe8:	0e 94 8a 23 	call	0x4714	; 0x4714 <_ZN6Output3offEv>
				Vibrationsmotor.off();
    3fec:	8d e3       	ldi	r24, 0x3D	; 61
    3fee:	93 e0       	ldi	r25, 0x03	; 3
    3ff0:	0e 94 8a 23 	call	0x4714	; 0x4714 <_ZN6Output3offEv>
				if ((rtc.interupts&(1<<Weckeractiv)))
    3ff4:	80 91 91 07 	lds	r24, 0x0791
    3ff8:	98 2f       	mov	r25, r24
    3ffa:	98 71       	andi	r25, 0x18	; 24
				{
					if ((rtc.interupts&(1<<Weckerein)))
    3ffc:	98 31       	cpi	r25, 0x18	; 24
    3ffe:	51 f4       	brne	.+20     	; 0x4014 <_Z14eingabehandlerh+0x7b0>
					{
						rtc.interupts &= ~((1<<Weckerein)|(1<<Weckeractiv));
    4000:	87 7e       	andi	r24, 0xE7	; 231
    4002:	80 93 91 07 	sts	0x0791, r24
    4006:	08 95       	ret
		}
		else if (anzeige==0)
		{
			anzeige|=(1<<menueflag);
		}
		if ((anzeige&(1<<blinkflag)))
    4008:	20 91 29 03 	lds	r18, 0x0329
    400c:	30 91 2a 03 	lds	r19, 0x032A
    4010:	36 fd       	sbrc	r19, 6
    4012:	de cf       	rjmp	.-68     	; 0x3fd0 <_Z14eingabehandlerh+0x76c>
    4014:	08 95       	ret

00004016 <main>:
void eingabehandler(uint8_t taste);

int main(void)
{
	//initialisierung
	initialisierung();
    4016:	0e 94 c9 19 	call	0x3392	; 0x3392 <_Z15initialisierungv>
	
    while(1)
    {
		//Steuerung der interupts durch Handler
		maininterupthandler();
    401a:	0e 94 2d 1a 	call	0x345a	; 0x345a <_Z19maininterupthandlerv>
		//Steuerung der Anzeige alle Sekunde zur aktualisierung maximale Aktulisierungsrate ist 1Hz
		anzeigehandler();
    401e:	0e 94 51 1a 	call	0x34a2	; 0x34a2 <_Z14anzeigehandlerv>
		//Tasthandler
		eingabehandler(Tastatur.Taster());
    4022:	81 e4       	ldi	r24, 0x41	; 65
    4024:	93 e0       	ldi	r25, 0x03	; 3
    4026:	0e 94 bc 20 	call	0x4178	; 0x4178 <_ZN9Interface6TasterEv>
    402a:	0e 94 32 1c 	call	0x3864	; 0x3864 <_Z14eingabehandlerh>
    402e:	f5 cf       	rjmp	.-22     	; 0x401a <main+0x4>

00004030 <_GLOBAL__sub_I_kompass>:
#include <stdlib.h>
#include <stdio.h>
#include <avr/interrupt.h>

#include "Kompass.h"
Kompass kompass;
    4030:	84 e9       	ldi	r24, 0x94	; 148
    4032:	97 e0       	ldi	r25, 0x07	; 7
    4034:	0e 94 85 21 	call	0x430a	; 0x430a <_ZN7KompassC1Ev>

#include "RTC.h"
RTC rtc;
    4038:	89 e7       	ldi	r24, 0x79	; 121
    403a:	97 e0       	ldi	r25, 0x07	; 7
    403c:	0e 94 16 26 	call	0x4c2c	; 0x4c2c <_ZN3RTCC1Ev>
RTC zaehler;
    4040:	8e e5       	ldi	r24, 0x5E	; 94
    4042:	97 e0       	ldi	r25, 0x07	; 7
    4044:	0e 94 16 26 	call	0x4c2c	; 0x4c2c <_ZN3RTCC1Ev>
RTC stoppuhr;
    4048:	83 e4       	ldi	r24, 0x43	; 67
    404a:	97 e0       	ldi	r25, 0x07	; 7
    404c:	0e 94 16 26 	call	0x4c2c	; 0x4c2c <_ZN3RTCC1Ev>

#include "Display.h"
Display oled;
    4050:	82 e4       	ldi	r24, 0x42	; 66
    4052:	93 e0       	ldi	r25, 0x03	; 3
    4054:	0e 94 7d 03 	call	0x6fa	; 0x6fa <_ZN7DisplayC1Ev>

#include "Interface.h"
Interface Tastatur;
    4058:	81 e4       	ldi	r24, 0x41	; 65
    405a:	93 e0       	ldi	r25, 0x03	; 3
    405c:	0e 94 94 20 	call	0x4128	; 0x4128 <_ZN9InterfaceC1Ev>

#include "Output.h"
Output LED('D',PORTD7);
    4060:	47 e0       	ldi	r20, 0x07	; 7
    4062:	64 e4       	ldi	r22, 0x44	; 68
    4064:	8f e3       	ldi	r24, 0x3F	; 63
    4066:	93 e0       	ldi	r25, 0x03	; 3
    4068:	0e 94 f5 22 	call	0x45ea	; 0x45ea <_ZN6OutputC1Ehh>
Output Vibrationsmotor('B',PORTB0);
    406c:	40 e0       	ldi	r20, 0x00	; 0
    406e:	62 e4       	ldi	r22, 0x42	; 66
    4070:	8d e3       	ldi	r24, 0x3D	; 61
    4072:	93 e0       	ldi	r25, 0x03	; 3
    4074:	0e 94 f5 22 	call	0x45ea	; 0x45ea <_ZN6OutputC1Ehh>

#include "Pressure.h"
Pressure Baro;
    4078:	8f e2       	ldi	r24, 0x2F	; 47
    407a:	93 e0       	ldi	r25, 0x03	; 3
    407c:	0e 94 37 24 	call	0x486e	; 0x486e <_ZN8PressureC1Ev>
    4080:	08 95       	ret

00004082 <_GLOBAL__sub_D_kompass>:
    4082:	8f e2       	ldi	r24, 0x2F	; 47
    4084:	93 e0       	ldi	r25, 0x03	; 3
    4086:	0e 94 fb 23 	call	0x47f6	; 0x47f6 <_ZN8PressureD1Ev>
#include "Interface.h"
Interface Tastatur;

#include "Output.h"
Output LED('D',PORTD7);
Output Vibrationsmotor('B',PORTB0);
    408a:	8d e3       	ldi	r24, 0x3D	; 61
    408c:	93 e0       	ldi	r25, 0x03	; 3
    408e:	0e 94 25 23 	call	0x464a	; 0x464a <_ZN6OutputD1Ev>

#include "Interface.h"
Interface Tastatur;

#include "Output.h"
Output LED('D',PORTD7);
    4092:	8f e3       	ldi	r24, 0x3F	; 63
    4094:	93 e0       	ldi	r25, 0x03	; 3
    4096:	0e 94 25 23 	call	0x464a	; 0x464a <_ZN6OutputD1Ev>

#include "Display.h"
Display oled;

#include "Interface.h"
Interface Tastatur;
    409a:	81 e4       	ldi	r24, 0x41	; 65
    409c:	93 e0       	ldi	r25, 0x03	; 3
    409e:	0e 94 95 20 	call	0x412a	; 0x412a <_ZN9InterfaceD1Ev>
RTC rtc;
RTC zaehler;
RTC stoppuhr;

#include "Display.h"
Display oled;
    40a2:	82 e4       	ldi	r24, 0x42	; 66
    40a4:	93 e0       	ldi	r25, 0x03	; 3
    40a6:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <_ZN7DisplayD1Ev>
Kompass kompass;

#include "RTC.h"
RTC rtc;
RTC zaehler;
RTC stoppuhr;
    40aa:	83 e4       	ldi	r24, 0x43	; 67
    40ac:	97 e0       	ldi	r25, 0x07	; 7
    40ae:	0e 94 92 25 	call	0x4b24	; 0x4b24 <_ZN3RTCD1Ev>
#include "Kompass.h"
Kompass kompass;

#include "RTC.h"
RTC rtc;
RTC zaehler;
    40b2:	8e e5       	ldi	r24, 0x5E	; 94
    40b4:	97 e0       	ldi	r25, 0x07	; 7
    40b6:	0e 94 92 25 	call	0x4b24	; 0x4b24 <_ZN3RTCD1Ev>

#include "Kompass.h"
Kompass kompass;

#include "RTC.h"
RTC rtc;
    40ba:	89 e7       	ldi	r24, 0x79	; 121
    40bc:	97 e0       	ldi	r25, 0x07	; 7
    40be:	0e 94 92 25 	call	0x4b24	; 0x4b24 <_ZN3RTCD1Ev>
#include <stdlib.h>
#include <stdio.h>
#include <avr/interrupt.h>

#include "Kompass.h"
Kompass kompass;
    40c2:	84 e9       	ldi	r24, 0x94	; 148
    40c4:	97 e0       	ldi	r25, 0x07	; 7
    40c6:	0e 94 62 21 	call	0x42c4	; 0x42c4 <_ZN7KompassD1Ev>
    40ca:	08 95       	ret

000040cc <_ZN3I2CC1Ev>:

// default constructor
I2C::I2C()
{
	//TWBR = 10; //Bit fuer 100khz an Tackrate, reicht gerade noch so
	TWBR=2; //fuer 8MHz und 400kHz in SCL
    40cc:	82 e0       	ldi	r24, 0x02	; 2
    40ce:	80 93 b8 00 	sts	0x00B8, r24
    40d2:	08 95       	ret

000040d4 <_ZN3I2CD1Ev>:
} //I2C

// default destructor
I2C::~I2C()
    40d4:	08 95       	ret

000040d6 <_ZN3I2C9twi_startEv>:
{
} //~I2C

void I2C::twi_start(){
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    40d6:	84 ea       	ldi	r24, 0xA4	; 164
    40d8:	80 93 bc 00 	sts	0x00BC, r24
    40dc:	08 95       	ret

000040de <_ZN3I2C8twi_stopEv>:
}
void I2C::twi_stop(){
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    40de:	84 e9       	ldi	r24, 0x94	; 148
    40e0:	80 93 bc 00 	sts	0x00BC, r24
    40e4:	08 95       	ret

000040e6 <_ZN3I2C9twi_writeEh>:
	TWCR = (1<<TWINT) | (1<<TWEN);
	TWCR &= ~(1<<TWEA);
}

void I2C::twi_write(uint8_t data){
	while(!(TWCR & (1<<TWINT)));
    40e6:	ec eb       	ldi	r30, 0xBC	; 188
    40e8:	f0 e0       	ldi	r31, 0x00	; 0
    40ea:	80 81       	ld	r24, Z
    40ec:	88 23       	and	r24, r24
    40ee:	ec f7       	brge	.-6      	; 0x40ea <_ZN3I2C9twi_writeEh+0x4>
	TWDR = data;
    40f0:	60 93 bb 00 	sts	0x00BB, r22
	TWCR = (1<<TWINT) | (1<<TWEN);
    40f4:	84 e8       	ldi	r24, 0x84	; 132
    40f6:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));
    40fa:	ec eb       	ldi	r30, 0xBC	; 188
    40fc:	f0 e0       	ldi	r31, 0x00	; 0
    40fe:	80 81       	ld	r24, Z
    4100:	88 23       	and	r24, r24
    4102:	ec f7       	brge	.-6      	; 0x40fe <_ZN3I2C9twi_writeEh+0x18>
}
    4104:	08 95       	ret

00004106 <_ZN3I2C8twi_readEh>:

uint8_t I2C::twi_read(uint8_t ack){
	if (ack)
    4106:	66 23       	and	r22, r22
    4108:	21 f0       	breq	.+8      	; 0x4112 <_ZN3I2C8twi_readEh+0xc>
	{
		TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    410a:	84 ec       	ldi	r24, 0xC4	; 196
    410c:	80 93 bc 00 	sts	0x00BC, r24
    4110:	03 c0       	rjmp	.+6      	; 0x4118 <_ZN3I2C8twi_readEh+0x12>
	}
	else{
		TWCR = (1<<TWINT) | (1<<TWEN);
    4112:	84 e8       	ldi	r24, 0x84	; 132
    4114:	80 93 bc 00 	sts	0x00BC, r24
	}
	
	while(!(TWCR & (1<<TWINT)));
    4118:	ec eb       	ldi	r30, 0xBC	; 188
    411a:	f0 e0       	ldi	r31, 0x00	; 0
    411c:	80 81       	ld	r24, Z
    411e:	88 23       	and	r24, r24
    4120:	ec f7       	brge	.-6      	; 0x411c <_ZN3I2C8twi_readEh+0x16>
	return TWDR;
    4122:	80 91 bb 00 	lds	r24, 0x00BB
    4126:	08 95       	ret

00004128 <_ZN9InterfaceC1Ev>:


#include "Interface.h"

// default constructor
Interface::Interface()
    4128:	08 95       	ret

0000412a <_ZN9InterfaceD1Ev>:
{
} //Interface

// default destructor
Interface::~Interface()
    412a:	08 95       	ret

0000412c <_ZN9Interface8debounceEPVhh>:
{
} //~Interface

uint8_t Interface::debounce(volatile uint8_t *port, uint8_t pin)
{
	if ( (*port & (1 << pin)) )
    412c:	fb 01       	movw	r30, r22
    412e:	80 81       	ld	r24, Z
    4130:	90 e0       	ldi	r25, 0x00	; 0
    4132:	04 2e       	mov	r0, r20
    4134:	02 c0       	rjmp	.+4      	; 0x413a <_ZN9Interface8debounceEPVhh+0xe>
    4136:	95 95       	asr	r25
    4138:	87 95       	ror	r24
    413a:	0a 94       	dec	r0
    413c:	e2 f7       	brpl	.-8      	; 0x4136 <_ZN9Interface8debounceEPVhh+0xa>
    413e:	80 ff       	sbrs	r24, 0
    4140:	17 c0       	rjmp	.+46     	; 0x4170 <_ZN9Interface8debounceEPVhh+0x44>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    4142:	8f ec       	ldi	r24, 0xCF	; 207
    4144:	97 e0       	ldi	r25, 0x07	; 7
    4146:	01 97       	sbiw	r24, 0x01	; 1
    4148:	f1 f7       	brne	.-4      	; 0x4146 <_ZN9Interface8debounceEPVhh+0x1a>
    414a:	00 c0       	rjmp	.+0      	; 0x414c <_ZN9Interface8debounceEPVhh+0x20>
    414c:	00 00       	nop
	{
		/* Pin wurde auf Masse gezogen, 100ms warten   */
		_delay_ms(1);
		if ( !(*port & (1 << pin)) )
    414e:	fb 01       	movw	r30, r22
    4150:	80 81       	ld	r24, Z
    4152:	90 e0       	ldi	r25, 0x00	; 0
    4154:	9c 01       	movw	r18, r24
    4156:	02 c0       	rjmp	.+4      	; 0x415c <_ZN9Interface8debounceEPVhh+0x30>
    4158:	35 95       	asr	r19
    415a:	27 95       	ror	r18
    415c:	4a 95       	dec	r20
    415e:	e2 f7       	brpl	.-8      	; 0x4158 <_ZN9Interface8debounceEPVhh+0x2c>
    4160:	20 fd       	sbrc	r18, 0
    4162:	08 c0       	rjmp	.+16     	; 0x4174 <_ZN9Interface8debounceEPVhh+0x48>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    4164:	3a e1       	ldi	r19, 0x1A	; 26
    4166:	3a 95       	dec	r19
    4168:	f1 f7       	brne	.-4      	; 0x4166 <_ZN9Interface8debounceEPVhh+0x3a>
    416a:	00 c0       	rjmp	.+0      	; 0x416c <_ZN9Interface8debounceEPVhh+0x40>
		{
			/* Anwender Zeit zum Loslassen des Tasters geben */
			_delay_us(10);
			return 1;
    416c:	81 e0       	ldi	r24, 0x01	; 1
    416e:	08 95       	ret
		}
	}
	return 0;
    4170:	80 e0       	ldi	r24, 0x00	; 0
    4172:	08 95       	ret
    4174:	80 e0       	ldi	r24, 0x00	; 0
}
    4176:	08 95       	ret

00004178 <_ZN9Interface6TasterEv>:
		break;
	}
	return abfrage;
}

uint8_t Interface::Taster(){
    4178:	1f 93       	push	r17
    417a:	cf 93       	push	r28
    417c:	df 93       	push	r29
    417e:	ec 01       	movw	r28, r24
	uint8_t taste = 'A';
	
	//erste Zeile
	PORTD |= (1<<PORTD3);
    4180:	5b 9a       	sbi	0x0b, 3	; 11
    4182:	82 e0       	ldi	r24, 0x02	; 2
    4184:	8a 95       	dec	r24
    4186:	f1 f7       	brne	.-4      	; 0x4184 <_ZN9Interface6TasterEv+0xc>
    4188:	00 c0       	rjmp	.+0      	; 0x418a <_ZN9Interface6TasterEv+0x12>
	_delay_us(1);
	if(debounce(&PIND,PIND4)){
    418a:	44 e0       	ldi	r20, 0x04	; 4
    418c:	69 e2       	ldi	r22, 0x29	; 41
    418e:	70 e0       	ldi	r23, 0x00	; 0
    4190:	ce 01       	movw	r24, r28
    4192:	0e 94 96 20 	call	0x412c	; 0x412c <_ZN9Interface8debounceEPVhh>
    4196:	81 11       	cpse	r24, r1
    4198:	12 c0       	rjmp	.+36     	; 0x41be <_ZN9Interface6TasterEv+0x46>
		taste = '3';
	}
	else if (debounce(&PIND,PIND5))
    419a:	45 e0       	ldi	r20, 0x05	; 5
    419c:	69 e2       	ldi	r22, 0x29	; 41
    419e:	70 e0       	ldi	r23, 0x00	; 0
    41a0:	ce 01       	movw	r24, r28
    41a2:	0e 94 96 20 	call	0x412c	; 0x412c <_ZN9Interface8debounceEPVhh>
    41a6:	81 11       	cpse	r24, r1
    41a8:	0c c0       	rjmp	.+24     	; 0x41c2 <_ZN9Interface6TasterEv+0x4a>
	{
		taste = '2';
	}
	else if (debounce(&PIND,PIND6))
    41aa:	46 e0       	ldi	r20, 0x06	; 6
    41ac:	69 e2       	ldi	r22, 0x29	; 41
    41ae:	70 e0       	ldi	r23, 0x00	; 0
    41b0:	ce 01       	movw	r24, r28
    41b2:	0e 94 96 20 	call	0x412c	; 0x412c <_ZN9Interface8debounceEPVhh>
    41b6:	81 11       	cpse	r24, r1
    41b8:	06 c0       	rjmp	.+12     	; 0x41c6 <_ZN9Interface6TasterEv+0x4e>
	}
	return abfrage;
}

uint8_t Interface::Taster(){
	uint8_t taste = 'A';
    41ba:	11 e4       	ldi	r17, 0x41	; 65
    41bc:	05 c0       	rjmp	.+10     	; 0x41c8 <_ZN9Interface6TasterEv+0x50>
	
	//erste Zeile
	PORTD |= (1<<PORTD3);
	_delay_us(1);
	if(debounce(&PIND,PIND4)){
		taste = '3';
    41be:	13 e3       	ldi	r17, 0x33	; 51
    41c0:	03 c0       	rjmp	.+6      	; 0x41c8 <_ZN9Interface6TasterEv+0x50>
	}
	else if (debounce(&PIND,PIND5))
	{
		taste = '2';
    41c2:	12 e3       	ldi	r17, 0x32	; 50
    41c4:	01 c0       	rjmp	.+2      	; 0x41c8 <_ZN9Interface6TasterEv+0x50>
	}
	else if (debounce(&PIND,PIND6))
	{
		taste = '1';
    41c6:	11 e3       	ldi	r17, 0x31	; 49
	}
	PORTD &= ~(1<<PORTD3);
    41c8:	5b 98       	cbi	0x0b, 3	; 11
	
	//zweite Zeile
	PORTD |= (1<<PORTD2);
    41ca:	5a 9a       	sbi	0x0b, 2	; 11
    41cc:	82 e0       	ldi	r24, 0x02	; 2
    41ce:	8a 95       	dec	r24
    41d0:	f1 f7       	brne	.-4      	; 0x41ce <_ZN9Interface6TasterEv+0x56>
    41d2:	00 c0       	rjmp	.+0      	; 0x41d4 <_ZN9Interface6TasterEv+0x5c>
	_delay_us(1);
	if(debounce(&PIND,PIND4)){
    41d4:	44 e0       	ldi	r20, 0x04	; 4
    41d6:	69 e2       	ldi	r22, 0x29	; 41
    41d8:	70 e0       	ldi	r23, 0x00	; 0
    41da:	ce 01       	movw	r24, r28
    41dc:	0e 94 96 20 	call	0x412c	; 0x412c <_ZN9Interface8debounceEPVhh>
    41e0:	81 11       	cpse	r24, r1
    41e2:	11 c0       	rjmp	.+34     	; 0x4206 <_ZN9Interface6TasterEv+0x8e>
		taste = '6';
	}
	else if (debounce(&PIND,PIND5))
    41e4:	45 e0       	ldi	r20, 0x05	; 5
    41e6:	69 e2       	ldi	r22, 0x29	; 41
    41e8:	70 e0       	ldi	r23, 0x00	; 0
    41ea:	ce 01       	movw	r24, r28
    41ec:	0e 94 96 20 	call	0x412c	; 0x412c <_ZN9Interface8debounceEPVhh>
    41f0:	81 11       	cpse	r24, r1
    41f2:	0b c0       	rjmp	.+22     	; 0x420a <_ZN9Interface6TasterEv+0x92>
	{
		taste = '5';
	}
	else if (debounce(&PIND,PIND6))
    41f4:	46 e0       	ldi	r20, 0x06	; 6
    41f6:	69 e2       	ldi	r22, 0x29	; 41
    41f8:	70 e0       	ldi	r23, 0x00	; 0
    41fa:	ce 01       	movw	r24, r28
    41fc:	0e 94 96 20 	call	0x412c	; 0x412c <_ZN9Interface8debounceEPVhh>
    4200:	81 11       	cpse	r24, r1
    4202:	05 c0       	rjmp	.+10     	; 0x420e <_ZN9Interface6TasterEv+0x96>
    4204:	05 c0       	rjmp	.+10     	; 0x4210 <_ZN9Interface6TasterEv+0x98>
	
	//zweite Zeile
	PORTD |= (1<<PORTD2);
	_delay_us(1);
	if(debounce(&PIND,PIND4)){
		taste = '6';
    4206:	16 e3       	ldi	r17, 0x36	; 54
    4208:	03 c0       	rjmp	.+6      	; 0x4210 <_ZN9Interface6TasterEv+0x98>
	}
	else if (debounce(&PIND,PIND5))
	{
		taste = '5';
    420a:	15 e3       	ldi	r17, 0x35	; 53
    420c:	01 c0       	rjmp	.+2      	; 0x4210 <_ZN9Interface6TasterEv+0x98>
	}
	else if (debounce(&PIND,PIND6))
	{
		taste = '4';
    420e:	14 e3       	ldi	r17, 0x34	; 52
	}
	PORTD &= ~(1<<PORTD2);
    4210:	5a 98       	cbi	0x0b, 2	; 11
	
	//dritte Zeile
	PORTD |= (1<<PORTD1);
    4212:	59 9a       	sbi	0x0b, 1	; 11
    4214:	82 e0       	ldi	r24, 0x02	; 2
    4216:	8a 95       	dec	r24
    4218:	f1 f7       	brne	.-4      	; 0x4216 <_ZN9Interface6TasterEv+0x9e>
    421a:	00 c0       	rjmp	.+0      	; 0x421c <_ZN9Interface6TasterEv+0xa4>
	_delay_us(1);
	if(debounce(&PIND,PIND4)){
    421c:	44 e0       	ldi	r20, 0x04	; 4
    421e:	69 e2       	ldi	r22, 0x29	; 41
    4220:	70 e0       	ldi	r23, 0x00	; 0
    4222:	ce 01       	movw	r24, r28
    4224:	0e 94 96 20 	call	0x412c	; 0x412c <_ZN9Interface8debounceEPVhh>
    4228:	81 11       	cpse	r24, r1
    422a:	11 c0       	rjmp	.+34     	; 0x424e <_ZN9Interface6TasterEv+0xd6>
		taste = '9';
	}
	else if (debounce(&PIND,PIND5))
    422c:	45 e0       	ldi	r20, 0x05	; 5
    422e:	69 e2       	ldi	r22, 0x29	; 41
    4230:	70 e0       	ldi	r23, 0x00	; 0
    4232:	ce 01       	movw	r24, r28
    4234:	0e 94 96 20 	call	0x412c	; 0x412c <_ZN9Interface8debounceEPVhh>
    4238:	81 11       	cpse	r24, r1
    423a:	0b c0       	rjmp	.+22     	; 0x4252 <_ZN9Interface6TasterEv+0xda>
	{
		taste = '8';
	}
	else if (debounce(&PIND,PIND6))
    423c:	46 e0       	ldi	r20, 0x06	; 6
    423e:	69 e2       	ldi	r22, 0x29	; 41
    4240:	70 e0       	ldi	r23, 0x00	; 0
    4242:	ce 01       	movw	r24, r28
    4244:	0e 94 96 20 	call	0x412c	; 0x412c <_ZN9Interface8debounceEPVhh>
    4248:	81 11       	cpse	r24, r1
    424a:	05 c0       	rjmp	.+10     	; 0x4256 <_ZN9Interface6TasterEv+0xde>
    424c:	05 c0       	rjmp	.+10     	; 0x4258 <_ZN9Interface6TasterEv+0xe0>
	
	//dritte Zeile
	PORTD |= (1<<PORTD1);
	_delay_us(1);
	if(debounce(&PIND,PIND4)){
		taste = '9';
    424e:	19 e3       	ldi	r17, 0x39	; 57
    4250:	03 c0       	rjmp	.+6      	; 0x4258 <_ZN9Interface6TasterEv+0xe0>
	}
	else if (debounce(&PIND,PIND5))
	{
		taste = '8';
    4252:	18 e3       	ldi	r17, 0x38	; 56
    4254:	01 c0       	rjmp	.+2      	; 0x4258 <_ZN9Interface6TasterEv+0xe0>
	}
	else if (debounce(&PIND,PIND6))
	{
		taste = '7';
    4256:	17 e3       	ldi	r17, 0x37	; 55
	}
	PORTD &= ~(1<<PORT1);
    4258:	59 98       	cbi	0x0b, 1	; 11
	
	//vierte Zeile
	PORTD |= (1<<PORTD0);
    425a:	58 9a       	sbi	0x0b, 0	; 11
    425c:	82 e0       	ldi	r24, 0x02	; 2
    425e:	8a 95       	dec	r24
    4260:	f1 f7       	brne	.-4      	; 0x425e <_ZN9Interface6TasterEv+0xe6>
    4262:	00 c0       	rjmp	.+0      	; 0x4264 <_ZN9Interface6TasterEv+0xec>
	_delay_us(1);
	if(debounce(&PIND,PIND4)){
    4264:	44 e0       	ldi	r20, 0x04	; 4
    4266:	69 e2       	ldi	r22, 0x29	; 41
    4268:	70 e0       	ldi	r23, 0x00	; 0
    426a:	ce 01       	movw	r24, r28
    426c:	0e 94 96 20 	call	0x412c	; 0x412c <_ZN9Interface8debounceEPVhh>
    4270:	81 11       	cpse	r24, r1
    4272:	11 c0       	rjmp	.+34     	; 0x4296 <_ZN9Interface6TasterEv+0x11e>
		taste = '#';
	}
	else if (debounce(&PIND,PIND5))
    4274:	45 e0       	ldi	r20, 0x05	; 5
    4276:	69 e2       	ldi	r22, 0x29	; 41
    4278:	70 e0       	ldi	r23, 0x00	; 0
    427a:	ce 01       	movw	r24, r28
    427c:	0e 94 96 20 	call	0x412c	; 0x412c <_ZN9Interface8debounceEPVhh>
    4280:	81 11       	cpse	r24, r1
    4282:	0b c0       	rjmp	.+22     	; 0x429a <_ZN9Interface6TasterEv+0x122>
	{
		taste = '0';
	}
	else if (debounce(&PIND,PIND6))
    4284:	46 e0       	ldi	r20, 0x06	; 6
    4286:	69 e2       	ldi	r22, 0x29	; 41
    4288:	70 e0       	ldi	r23, 0x00	; 0
    428a:	ce 01       	movw	r24, r28
    428c:	0e 94 96 20 	call	0x412c	; 0x412c <_ZN9Interface8debounceEPVhh>
    4290:	81 11       	cpse	r24, r1
    4292:	05 c0       	rjmp	.+10     	; 0x429e <_ZN9Interface6TasterEv+0x126>
    4294:	05 c0       	rjmp	.+10     	; 0x42a0 <_ZN9Interface6TasterEv+0x128>
	
	//vierte Zeile
	PORTD |= (1<<PORTD0);
	_delay_us(1);
	if(debounce(&PIND,PIND4)){
		taste = '#';
    4296:	13 e2       	ldi	r17, 0x23	; 35
    4298:	03 c0       	rjmp	.+6      	; 0x42a0 <_ZN9Interface6TasterEv+0x128>
	}
	else if (debounce(&PIND,PIND5))
	{
		taste = '0';
    429a:	10 e3       	ldi	r17, 0x30	; 48
    429c:	01 c0       	rjmp	.+2      	; 0x42a0 <_ZN9Interface6TasterEv+0x128>
	}
	else if (debounce(&PIND,PIND6))
	{
		taste = '*';
    429e:	1a e2       	ldi	r17, 0x2A	; 42
	}
	PORTD &= ~(1<<PORTD0);
    42a0:	58 98       	cbi	0x0b, 0	; 11
	
	return taste;
}
    42a2:	81 2f       	mov	r24, r17
    42a4:	df 91       	pop	r29
    42a6:	cf 91       	pop	r28
    42a8:	1f 91       	pop	r17
    42aa:	08 95       	ret

000042ac <_ZN9Interface17ZahlenausTastaturEv>:

uint8_t Interface::ZahlenausTastatur(){
    42ac:	cf 93       	push	r28
    42ae:	df 93       	push	r29
    42b0:	ec 01       	movw	r28, r24
	while(true){
		uint8_t taste = Taster();
    42b2:	ce 01       	movw	r24, r28
    42b4:	0e 94 bc 20 	call	0x4178	; 0x4178 <_ZN9Interface6TasterEv>
		if(taste>='0' && taste<='9'){
    42b8:	80 53       	subi	r24, 0x30	; 48
    42ba:	8a 30       	cpi	r24, 0x0A	; 10
    42bc:	d0 f7       	brcc	.-12     	; 0x42b2 <_ZN9Interface17ZahlenausTastaturEv+0x6>
			return taste - '0';
		}
	}
}
    42be:	df 91       	pop	r29
    42c0:	cf 91       	pop	r28
    42c2:	08 95       	ret

000042c4 <_ZN7KompassD1Ev>:
		offset[i]=0;
	}
} //Kompass

// default destructor
Kompass::~Kompass()
    42c4:	06 96       	adiw	r24, 0x06	; 6
    42c6:	0e 94 6a 20 	call	0x40d4	; 0x40d4 <_ZN3I2CD1Ev>
    42ca:	08 95       	ret

000042cc <_ZN7Kompass16HMC5883L_commandEhh>:
{
} //~Kompass

void Kompass::HMC5883L_command(uint8_t adresse, uint8_t command){
    42cc:	0f 93       	push	r16
    42ce:	1f 93       	push	r17
    42d0:	cf 93       	push	r28
    42d2:	df 93       	push	r29
    42d4:	06 2f       	mov	r16, r22
    42d6:	14 2f       	mov	r17, r20
	i2c.twi_start();
    42d8:	ec 01       	movw	r28, r24
    42da:	26 96       	adiw	r28, 0x06	; 6
    42dc:	ce 01       	movw	r24, r28
    42de:	0e 94 6b 20 	call	0x40d6	; 0x40d6 <_ZN3I2C9twi_startEv>
	i2c.twi_write(HMCWRITEADRESSE);
    42e2:	6c e3       	ldi	r22, 0x3C	; 60
    42e4:	ce 01       	movw	r24, r28
    42e6:	0e 94 73 20 	call	0x40e6	; 0x40e6 <_ZN3I2C9twi_writeEh>
	i2c.twi_write(adresse);
    42ea:	60 2f       	mov	r22, r16
    42ec:	ce 01       	movw	r24, r28
    42ee:	0e 94 73 20 	call	0x40e6	; 0x40e6 <_ZN3I2C9twi_writeEh>
	i2c.twi_write(command);
    42f2:	61 2f       	mov	r22, r17
    42f4:	ce 01       	movw	r24, r28
    42f6:	0e 94 73 20 	call	0x40e6	; 0x40e6 <_ZN3I2C9twi_writeEh>
	i2c.twi_stop();
    42fa:	ce 01       	movw	r24, r28
    42fc:	0e 94 6f 20 	call	0x40de	; 0x40de <_ZN3I2C8twi_stopEv>
}
    4300:	df 91       	pop	r29
    4302:	cf 91       	pop	r28
    4304:	1f 91       	pop	r17
    4306:	0f 91       	pop	r16
    4308:	08 95       	ret

0000430a <_ZN7KompassC1Ev>:


#include "Kompass.h"

// default constructor
Kompass::Kompass()
    430a:	cf 93       	push	r28
    430c:	df 93       	push	r29
    430e:	ec 01       	movw	r28, r24
    4310:	06 96       	adiw	r24, 0x06	; 6
    4312:	0e 94 66 20 	call	0x40cc	; 0x40cc <_ZN3I2CC1Ev>
{
	//Config Register A
	HMC5883L_command(0x00, HMCSAMPLES8+HMCDATARATE15+HMCMEASUREMODENORMAL);
    4316:	40 e7       	ldi	r20, 0x70	; 112
    4318:	60 e0       	ldi	r22, 0x00	; 0
    431a:	ce 01       	movw	r24, r28
    431c:	0e 94 66 21 	call	0x42cc	; 0x42cc <_ZN7Kompass16HMC5883L_commandEhh>

	//Config Gain
	HMC5883L_command(0x01, HMCGAIN1090);
    4320:	40 e2       	ldi	r20, 0x20	; 32
    4322:	61 e0       	ldi	r22, 0x01	; 1
    4324:	ce 01       	movw	r24, r28
    4326:	0e 94 66 21 	call	0x42cc	; 0x42cc <_ZN7Kompass16HMC5883L_commandEhh>

	//Set Mode auf single
	HMC5883L_command(0x02, HMCSIGLEMODE);
    432a:	41 e0       	ldi	r20, 0x01	; 1
    432c:	62 e0       	ldi	r22, 0x02	; 2
    432e:	ce 01       	movw	r24, r28
    4330:	0e 94 66 21 	call	0x42cc	; 0x42cc <_ZN7Kompass16HMC5883L_commandEhh>
	//Variablen
	for(uint8_t i=0;i<3;i++){
		achsen[i]=0;
    4334:	19 82       	std	Y+1, r1	; 0x01
    4336:	18 82       	st	Y, r1
		offset[i]=0;
    4338:	18 86       	std	Y+8, r1	; 0x08
    433a:	1f 82       	std	Y+7, r1	; 0x07

	//Set Mode auf single
	HMC5883L_command(0x02, HMCSIGLEMODE);
	//Variablen
	for(uint8_t i=0;i<3;i++){
		achsen[i]=0;
    433c:	1b 82       	std	Y+3, r1	; 0x03
    433e:	1a 82       	std	Y+2, r1	; 0x02
		offset[i]=0;
    4340:	1a 86       	std	Y+10, r1	; 0x0a
    4342:	19 86       	std	Y+9, r1	; 0x09

	//Set Mode auf single
	HMC5883L_command(0x02, HMCSIGLEMODE);
	//Variablen
	for(uint8_t i=0;i<3;i++){
		achsen[i]=0;
    4344:	1d 82       	std	Y+5, r1	; 0x05
    4346:	1c 82       	std	Y+4, r1	; 0x04
		offset[i]=0;
    4348:	1c 86       	std	Y+12, r1	; 0x0c
    434a:	1b 86       	std	Y+11, r1	; 0x0b
	}
} //Kompass
    434c:	df 91       	pop	r29
    434e:	cf 91       	pop	r28
    4350:	08 95       	ret

00004352 <_ZN7Kompass20HMC5883L_readHeadingEv>:
		achsen[i]=0;
		offset[i]=0;
	}
}

uint8_t Kompass::HMC5883L_readHeading(){
    4352:	bf 92       	push	r11
    4354:	cf 92       	push	r12
    4356:	df 92       	push	r13
    4358:	ef 92       	push	r14
    435a:	ff 92       	push	r15
    435c:	0f 93       	push	r16
    435e:	1f 93       	push	r17
    4360:	cf 93       	push	r28
    4362:	df 93       	push	r29
    4364:	00 d0       	rcall	.+0      	; 0x4366 <_ZN7Kompass20HMC5883L_readHeadingEv+0x14>
    4366:	00 d0       	rcall	.+0      	; 0x4368 <_ZN7Kompass20HMC5883L_readHeadingEv+0x16>
    4368:	00 d0       	rcall	.+0      	; 0x436a <_ZN7Kompass20HMC5883L_readHeadingEv+0x18>
    436a:	cd b7       	in	r28, 0x3d	; 61
    436c:	de b7       	in	r29, 0x3e	; 62
    436e:	6c 01       	movw	r12, r24
	cli();
    4370:	f8 94       	cli
	uint8_t heading[6];
	i2c.twi_start();
    4372:	7c 01       	movw	r14, r24
    4374:	26 e0       	ldi	r18, 0x06	; 6
    4376:	e2 0e       	add	r14, r18
    4378:	f1 1c       	adc	r15, r1
    437a:	c7 01       	movw	r24, r14
    437c:	0e 94 6b 20 	call	0x40d6	; 0x40d6 <_ZN3I2C9twi_startEv>
	i2c.twi_write(HMCWRITEADRESSE);
    4380:	6c e3       	ldi	r22, 0x3C	; 60
    4382:	c7 01       	movw	r24, r14
    4384:	0e 94 73 20 	call	0x40e6	; 0x40e6 <_ZN3I2C9twi_writeEh>
	i2c.twi_write(0x03);
    4388:	63 e0       	ldi	r22, 0x03	; 3
    438a:	c7 01       	movw	r24, r14
    438c:	0e 94 73 20 	call	0x40e6	; 0x40e6 <_ZN3I2C9twi_writeEh>
	i2c.twi_start();
    4390:	c7 01       	movw	r24, r14
    4392:	0e 94 6b 20 	call	0x40d6	; 0x40d6 <_ZN3I2C9twi_startEv>
	i2c.twi_write(HMCREADADRESSE);
    4396:	6d e3       	ldi	r22, 0x3D	; 61
    4398:	c7 01       	movw	r24, r14
    439a:	0e 94 73 20 	call	0x40e6	; 0x40e6 <_ZN3I2C9twi_writeEh>
    439e:	8e 01       	movw	r16, r28
    43a0:	0f 5f       	subi	r16, 0xFF	; 255
    43a2:	1f 4f       	sbci	r17, 0xFF	; 255
	
	for(uint8_t i=0; i<6;i++){
    43a4:	b1 2c       	mov	r11, r1
		if (i<5)
    43a6:	84 e0       	ldi	r24, 0x04	; 4
    43a8:	8b 15       	cp	r24, r11
    43aa:	38 f0       	brcs	.+14     	; 0x43ba <_ZN7Kompass20HMC5883L_readHeadingEv+0x68>
		{
			heading[i]=i2c.twi_read(1);
    43ac:	61 e0       	ldi	r22, 0x01	; 1
    43ae:	c7 01       	movw	r24, r14
    43b0:	0e 94 83 20 	call	0x4106	; 0x4106 <_ZN3I2C8twi_readEh>
    43b4:	f8 01       	movw	r30, r16
    43b6:	80 83       	st	Z, r24
    43b8:	06 c0       	rjmp	.+12     	; 0x43c6 <_ZN7Kompass20HMC5883L_readHeadingEv+0x74>
		}
		else
		{
			heading[i]=i2c.twi_read(0);
    43ba:	60 e0       	ldi	r22, 0x00	; 0
    43bc:	c7 01       	movw	r24, r14
    43be:	0e 94 83 20 	call	0x4106	; 0x4106 <_ZN3I2C8twi_readEh>
    43c2:	f8 01       	movw	r30, r16
    43c4:	80 83       	st	Z, r24
	i2c.twi_write(HMCWRITEADRESSE);
	i2c.twi_write(0x03);
	i2c.twi_start();
	i2c.twi_write(HMCREADADRESSE);
	
	for(uint8_t i=0; i<6;i++){
    43c6:	b3 94       	inc	r11
    43c8:	0f 5f       	subi	r16, 0xFF	; 255
    43ca:	1f 4f       	sbci	r17, 0xFF	; 255
    43cc:	f6 e0       	ldi	r31, 0x06	; 6
    43ce:	bf 12       	cpse	r11, r31
    43d0:	ea cf       	rjmp	.-44     	; 0x43a6 <_ZN7Kompass20HMC5883L_readHeadingEv+0x54>
		{
			heading[i]=i2c.twi_read(0);
		}
		
	}
	i2c.twi_stop();
    43d2:	c7 01       	movw	r24, r14
    43d4:	0e 94 6f 20 	call	0x40de	; 0x40de <_ZN3I2C8twi_stopEv>
	achsen[0] =(int16_t) (heading[1] | (heading[0] << 8));
    43d8:	89 81       	ldd	r24, Y+1	; 0x01
    43da:	90 e0       	ldi	r25, 0x00	; 0
    43dc:	98 2f       	mov	r25, r24
    43de:	88 27       	eor	r24, r24
    43e0:	2a 81       	ldd	r18, Y+2	; 0x02
    43e2:	82 2b       	or	r24, r18
    43e4:	f6 01       	movw	r30, r12
    43e6:	91 83       	std	Z+1, r25	; 0x01
    43e8:	80 83       	st	Z, r24
	achsen[2] =(int16_t) (heading[3] | (heading[2] << 8));
    43ea:	8b 81       	ldd	r24, Y+3	; 0x03
    43ec:	90 e0       	ldi	r25, 0x00	; 0
    43ee:	98 2f       	mov	r25, r24
    43f0:	88 27       	eor	r24, r24
    43f2:	2c 81       	ldd	r18, Y+4	; 0x04
    43f4:	82 2b       	or	r24, r18
    43f6:	95 83       	std	Z+5, r25	; 0x05
    43f8:	84 83       	std	Z+4, r24	; 0x04
	achsen[1] =(int16_t) (heading[5] | (heading[4] << 8));
    43fa:	8d 81       	ldd	r24, Y+5	; 0x05
    43fc:	90 e0       	ldi	r25, 0x00	; 0
    43fe:	98 2f       	mov	r25, r24
    4400:	88 27       	eor	r24, r24
    4402:	2e 81       	ldd	r18, Y+6	; 0x06
    4404:	82 2b       	or	r24, r18
    4406:	93 83       	std	Z+3, r25	; 0x03
    4408:	82 83       	std	Z+2, r24	; 0x02
	sei();
    440a:	78 94       	sei
	if (achsen[0]==-4096 || achsen[1]==-4096 || achsen[2]==-4096)
    440c:	f6 01       	movw	r30, r12
    440e:	80 81       	ld	r24, Z
    4410:	91 81       	ldd	r25, Z+1	; 0x01
    4412:	81 15       	cp	r24, r1
    4414:	90 4f       	sbci	r25, 0xF0	; 240
    4416:	09 f4       	brne	.+2      	; 0x441a <_ZN7Kompass20HMC5883L_readHeadingEv+0xc8>
    4418:	47 c0       	rjmp	.+142    	; 0x44a8 <_ZN7Kompass20HMC5883L_readHeadingEv+0x156>
    441a:	f6 01       	movw	r30, r12
    441c:	82 81       	ldd	r24, Z+2	; 0x02
    441e:	93 81       	ldd	r25, Z+3	; 0x03
    4420:	81 15       	cp	r24, r1
    4422:	90 4f       	sbci	r25, 0xF0	; 240
    4424:	09 f4       	brne	.+2      	; 0x4428 <_ZN7Kompass20HMC5883L_readHeadingEv+0xd6>
    4426:	42 c0       	rjmp	.+132    	; 0x44ac <_ZN7Kompass20HMC5883L_readHeadingEv+0x15a>
    4428:	f6 01       	movw	r30, r12
    442a:	84 81       	ldd	r24, Z+4	; 0x04
    442c:	95 81       	ldd	r25, Z+5	; 0x05
    442e:	81 15       	cp	r24, r1
    4430:	90 4f       	sbci	r25, 0xF0	; 240
    4432:	f1 f1       	breq	.+124    	; 0x44b0 <_ZN7Kompass20HMC5883L_readHeadingEv+0x15e>
    4434:	f6 01       	movw	r30, r12
    4436:	83 e0       	ldi	r24, 0x03	; 3
    4438:	df 01       	movw	r26, r30
	}
	//Kallibrierung durchfuehren, jedes mal, wenn eine abfrage stattfindet
	//somit passive kalibrierung
	else{
		for(uint8_t i=0;i<3;i++){
			if(achsen[i]>max[i]){
    443a:	20 81       	ld	r18, Z
    443c:	31 81       	ldd	r19, Z+1	; 0x01
    443e:	45 85       	ldd	r20, Z+13	; 0x0d
    4440:	56 85       	ldd	r21, Z+14	; 0x0e
    4442:	42 17       	cp	r20, r18
    4444:	53 07       	cpc	r21, r19
    4446:	8c f4       	brge	.+34     	; 0x446a <_ZN7Kompass20HMC5883L_readHeadingEv+0x118>
				max[i]=achsen[i];
    4448:	36 87       	std	Z+14, r19	; 0x0e
    444a:	25 87       	std	Z+13, r18	; 0x0d
				offset[i]=(max[i]+min[i])/2;
    444c:	43 89       	ldd	r20, Z+19	; 0x13
    444e:	54 89       	ldd	r21, Z+20	; 0x14
    4450:	24 0f       	add	r18, r20
    4452:	35 1f       	adc	r19, r21
    4454:	33 23       	and	r19, r19
    4456:	14 f4       	brge	.+4      	; 0x445c <_ZN7Kompass20HMC5883L_readHeadingEv+0x10a>
    4458:	2f 5f       	subi	r18, 0xFF	; 255
    445a:	3f 4f       	sbci	r19, 0xFF	; 255
    445c:	35 95       	asr	r19
    445e:	27 95       	ror	r18
    4460:	18 96       	adiw	r26, 0x08	; 8
    4462:	3c 93       	st	X, r19
    4464:	2e 93       	st	-X, r18
    4466:	17 97       	sbiw	r26, 0x07	; 7
    4468:	1a c0       	rjmp	.+52     	; 0x449e <_ZN7Kompass20HMC5883L_readHeadingEv+0x14c>
			}
			else if(achsen[i]<min[i]){
    446a:	63 89       	ldd	r22, Z+19	; 0x13
    446c:	74 89       	ldd	r23, Z+20	; 0x14
    446e:	26 17       	cp	r18, r22
    4470:	37 07       	cpc	r19, r23
    4472:	7c f4       	brge	.+30     	; 0x4492 <_ZN7Kompass20HMC5883L_readHeadingEv+0x140>
				min[i]=achsen[i];
    4474:	34 8b       	std	Z+20, r19	; 0x14
    4476:	23 8b       	std	Z+19, r18	; 0x13
				offset[i]=(max[i]+min[i])/2;
    4478:	24 0f       	add	r18, r20
    447a:	35 1f       	adc	r19, r21
    447c:	33 23       	and	r19, r19
    447e:	14 f4       	brge	.+4      	; 0x4484 <_ZN7Kompass20HMC5883L_readHeadingEv+0x132>
    4480:	2f 5f       	subi	r18, 0xFF	; 255
    4482:	3f 4f       	sbci	r19, 0xFF	; 255
    4484:	35 95       	asr	r19
    4486:	27 95       	ror	r18
    4488:	18 96       	adiw	r26, 0x08	; 8
    448a:	3c 93       	st	X, r19
    448c:	2e 93       	st	-X, r18
    448e:	17 97       	sbiw	r26, 0x07	; 7
    4490:	06 c0       	rjmp	.+12     	; 0x449e <_ZN7Kompass20HMC5883L_readHeadingEv+0x14c>
			}
			else {
				achsen[i]-=offset[i];
    4492:	47 81       	ldd	r20, Z+7	; 0x07
    4494:	50 85       	ldd	r21, Z+8	; 0x08
    4496:	24 1b       	sub	r18, r20
    4498:	35 0b       	sbc	r19, r21
    449a:	31 83       	std	Z+1, r19	; 0x01
    449c:	20 83       	st	Z, r18
    449e:	81 50       	subi	r24, 0x01	; 1
    44a0:	32 96       	adiw	r30, 0x02	; 2
		return 1;
	}
	//Kallibrierung durchfuehren, jedes mal, wenn eine abfrage stattfindet
	//somit passive kalibrierung
	else{
		for(uint8_t i=0;i<3;i++){
    44a2:	81 11       	cpse	r24, r1
    44a4:	c9 cf       	rjmp	.-110    	; 0x4438 <_ZN7Kompass20HMC5883L_readHeadingEv+0xe6>
    44a6:	05 c0       	rjmp	.+10     	; 0x44b2 <_ZN7Kompass20HMC5883L_readHeadingEv+0x160>
	achsen[2] =(int16_t) (heading[3] | (heading[2] << 8));
	achsen[1] =(int16_t) (heading[5] | (heading[4] << 8));
	sei();
	if (achsen[0]==-4096 || achsen[1]==-4096 || achsen[2]==-4096)
	{
		return 1;
    44a8:	81 e0       	ldi	r24, 0x01	; 1
    44aa:	03 c0       	rjmp	.+6      	; 0x44b2 <_ZN7Kompass20HMC5883L_readHeadingEv+0x160>
    44ac:	81 e0       	ldi	r24, 0x01	; 1
    44ae:	01 c0       	rjmp	.+2      	; 0x44b2 <_ZN7Kompass20HMC5883L_readHeadingEv+0x160>
    44b0:	81 e0       	ldi	r24, 0x01	; 1
			}
		}
	}
	
	return 0;
}
    44b2:	26 96       	adiw	r28, 0x06	; 6
    44b4:	0f b6       	in	r0, 0x3f	; 63
    44b6:	f8 94       	cli
    44b8:	de bf       	out	0x3e, r29	; 62
    44ba:	0f be       	out	0x3f, r0	; 63
    44bc:	cd bf       	out	0x3d, r28	; 61
    44be:	df 91       	pop	r29
    44c0:	cf 91       	pop	r28
    44c2:	1f 91       	pop	r17
    44c4:	0f 91       	pop	r16
    44c6:	ff 90       	pop	r15
    44c8:	ef 90       	pop	r14
    44ca:	df 90       	pop	r13
    44cc:	cf 90       	pop	r12
    44ce:	bf 90       	pop	r11
    44d0:	08 95       	ret

000044d2 <_ZN7Kompass5angleEv>:

double Kompass::angle(){
    44d2:	cf 92       	push	r12
    44d4:	df 92       	push	r13
    44d6:	ef 92       	push	r14
    44d8:	ff 92       	push	r15
    44da:	cf 93       	push	r28
    44dc:	df 93       	push	r29
    44de:	ec 01       	movw	r28, r24
	double angle=0;
	if (HMC5883L_readHeading())
    44e0:	0e 94 a9 21 	call	0x4352	; 0x4352 <_ZN7Kompass20HMC5883L_readHeadingEv>
    44e4:	81 11       	cpse	r24, r1
    44e6:	57 c0       	rjmp	.+174    	; 0x4596 <_ZN7Kompass5angleEv+0xc4>
	{
		angle=-1.0;
	}
	else{
		angle=atan2f(achsen[0],achsen[2])*180.0/M_PI+180.0;
    44e8:	6c 81       	ldd	r22, Y+4	; 0x04
    44ea:	7d 81       	ldd	r23, Y+5	; 0x05
    44ec:	88 27       	eor	r24, r24
    44ee:	77 fd       	sbrc	r23, 7
    44f0:	80 95       	com	r24
    44f2:	98 2f       	mov	r25, r24
    44f4:	0e 94 65 28 	call	0x50ca	; 0x50ca <__floatsisf>
    44f8:	6b 01       	movw	r12, r22
    44fa:	7c 01       	movw	r14, r24
    44fc:	68 81       	ld	r22, Y
    44fe:	79 81       	ldd	r23, Y+1	; 0x01
    4500:	88 27       	eor	r24, r24
    4502:	77 fd       	sbrc	r23, 7
    4504:	80 95       	com	r24
    4506:	98 2f       	mov	r25, r24
    4508:	0e 94 65 28 	call	0x50ca	; 0x50ca <__floatsisf>
    450c:	a7 01       	movw	r20, r14
    450e:	96 01       	movw	r18, r12
    4510:	0e 94 70 27 	call	0x4ee0	; 0x4ee0 <atan2>
    4514:	20 e0       	ldi	r18, 0x00	; 0
    4516:	30 e0       	ldi	r19, 0x00	; 0
    4518:	44 e3       	ldi	r20, 0x34	; 52
    451a:	53 e4       	ldi	r21, 0x43	; 67
    451c:	0e 94 c3 29 	call	0x5386	; 0x5386 <__mulsf3>
    4520:	2b ed       	ldi	r18, 0xDB	; 219
    4522:	3f e0       	ldi	r19, 0x0F	; 15
    4524:	49 e4       	ldi	r20, 0x49	; 73
    4526:	50 e4       	ldi	r21, 0x40	; 64
    4528:	0e 94 ca 27 	call	0x4f94	; 0x4f94 <__divsf3>
    452c:	20 e0       	ldi	r18, 0x00	; 0
    452e:	30 e0       	ldi	r19, 0x00	; 0
    4530:	44 e3       	ldi	r20, 0x34	; 52
    4532:	53 e4       	ldi	r21, 0x43	; 67
    4534:	0e 94 fd 26 	call	0x4dfa	; 0x4dfa <__addsf3>
		//deklination
		angle+=2.35;
    4538:	26 e6       	ldi	r18, 0x66	; 102
    453a:	36 e6       	ldi	r19, 0x66	; 102
    453c:	46 e1       	ldi	r20, 0x16	; 22
    453e:	50 e4       	ldi	r21, 0x40	; 64
    4540:	0e 94 fd 26 	call	0x4dfa	; 0x4dfa <__addsf3>
    4544:	6b 01       	movw	r12, r22
    4546:	7c 01       	movw	r14, r24
		//Normierung auf %360
		if (angle>=360)
    4548:	20 e0       	ldi	r18, 0x00	; 0
    454a:	30 e0       	ldi	r19, 0x00	; 0
    454c:	44 eb       	ldi	r20, 0xB4	; 180
    454e:	53 e4       	ldi	r21, 0x43	; 67
    4550:	0e 94 73 29 	call	0x52e6	; 0x52e6 <__gesf2>
    4554:	88 23       	and	r24, r24
    4556:	5c f0       	brlt	.+22     	; 0x456e <_ZN7Kompass5angleEv+0x9c>
		{
			angle-=360;
    4558:	20 e0       	ldi	r18, 0x00	; 0
    455a:	30 e0       	ldi	r19, 0x00	; 0
    455c:	44 eb       	ldi	r20, 0xB4	; 180
    455e:	53 e4       	ldi	r21, 0x43	; 67
    4560:	c7 01       	movw	r24, r14
    4562:	b6 01       	movw	r22, r12
    4564:	0e 94 fc 26 	call	0x4df8	; 0x4df8 <__subsf3>
    4568:	6b 01       	movw	r12, r22
    456a:	7c 01       	movw	r14, r24
    456c:	1c c0       	rjmp	.+56     	; 0x45a6 <_ZN7Kompass5angleEv+0xd4>
		}
		else if (angle < 0)
    456e:	20 e0       	ldi	r18, 0x00	; 0
    4570:	30 e0       	ldi	r19, 0x00	; 0
    4572:	a9 01       	movw	r20, r18
    4574:	c7 01       	movw	r24, r14
    4576:	b6 01       	movw	r22, r12
    4578:	0e 94 c3 27 	call	0x4f86	; 0x4f86 <__cmpsf2>
    457c:	88 23       	and	r24, r24
    457e:	9c f4       	brge	.+38     	; 0x45a6 <_ZN7Kompass5angleEv+0xd4>
		{
			angle+=360;
    4580:	20 e0       	ldi	r18, 0x00	; 0
    4582:	30 e0       	ldi	r19, 0x00	; 0
    4584:	44 eb       	ldi	r20, 0xB4	; 180
    4586:	53 e4       	ldi	r21, 0x43	; 67
    4588:	c7 01       	movw	r24, r14
    458a:	b6 01       	movw	r22, r12
    458c:	0e 94 fd 26 	call	0x4dfa	; 0x4dfa <__addsf3>
    4590:	6b 01       	movw	r12, r22
    4592:	7c 01       	movw	r14, r24
    4594:	08 c0       	rjmp	.+16     	; 0x45a6 <_ZN7Kompass5angleEv+0xd4>

double Kompass::angle(){
	double angle=0;
	if (HMC5883L_readHeading())
	{
		angle=-1.0;
    4596:	0f 2e       	mov	r0, r31
    4598:	c1 2c       	mov	r12, r1
    459a:	d1 2c       	mov	r13, r1
    459c:	f0 e8       	ldi	r31, 0x80	; 128
    459e:	ef 2e       	mov	r14, r31
    45a0:	ff eb       	ldi	r31, 0xBF	; 191
    45a2:	ff 2e       	mov	r15, r31
    45a4:	f0 2d       	mov	r31, r0
		{
			angle+=360;
		}
	}
	
	HMC5883L_command(0x02,HMCSIGLEMODE);
    45a6:	41 e0       	ldi	r20, 0x01	; 1
    45a8:	62 e0       	ldi	r22, 0x02	; 2
    45aa:	ce 01       	movw	r24, r28
    45ac:	0e 94 66 21 	call	0x42cc	; 0x42cc <_ZN7Kompass16HMC5883L_commandEhh>
	return angle;
}
    45b0:	c7 01       	movw	r24, r14
    45b2:	b6 01       	movw	r22, r12
    45b4:	df 91       	pop	r29
    45b6:	cf 91       	pop	r28
    45b8:	ff 90       	pop	r15
    45ba:	ef 90       	pop	r14
    45bc:	df 90       	pop	r13
    45be:	cf 90       	pop	r12
    45c0:	08 95       	ret

000045c2 <_ZN7Kompass25kallibrierung_ruecksetzenEv>:

void Kompass::kallibrierung_ruecksetzen(){
    45c2:	fc 01       	movw	r30, r24
	for (uint8_t i=0;i<3;i++)
	{
		max[i]=0;
    45c4:	16 86       	std	Z+14, r1	; 0x0e
    45c6:	15 86       	std	Z+13, r1	; 0x0d
		min[i]=0;
    45c8:	14 8a       	std	Z+20, r1	; 0x14
    45ca:	13 8a       	std	Z+19, r1	; 0x13
		offset[i]=0;
    45cc:	10 86       	std	Z+8, r1	; 0x08
    45ce:	17 82       	std	Z+7, r1	; 0x07
}

void Kompass::kallibrierung_ruecksetzen(){
	for (uint8_t i=0;i<3;i++)
	{
		max[i]=0;
    45d0:	10 8a       	std	Z+16, r1	; 0x10
    45d2:	17 86       	std	Z+15, r1	; 0x0f
		min[i]=0;
    45d4:	16 8a       	std	Z+22, r1	; 0x16
    45d6:	15 8a       	std	Z+21, r1	; 0x15
		offset[i]=0;
    45d8:	12 86       	std	Z+10, r1	; 0x0a
    45da:	11 86       	std	Z+9, r1	; 0x09
}

void Kompass::kallibrierung_ruecksetzen(){
	for (uint8_t i=0;i<3;i++)
	{
		max[i]=0;
    45dc:	12 8a       	std	Z+18, r1	; 0x12
    45de:	11 8a       	std	Z+17, r1	; 0x11
		min[i]=0;
    45e0:	10 8e       	std	Z+24, r1	; 0x18
    45e2:	17 8a       	std	Z+23, r1	; 0x17
		offset[i]=0;
    45e4:	14 86       	std	Z+12, r1	; 0x0c
    45e6:	13 86       	std	Z+11, r1	; 0x0b
    45e8:	08 95       	ret

000045ea <_ZN6OutputC1Ehh>:
#include "Output.h"

// default constructor
Output::Output(uint8_t Portpraefix, uint8_t Pinnumber)
{
	Pin=Pinnumber;
    45ea:	fc 01       	movw	r30, r24
    45ec:	41 83       	std	Z+1, r20	; 0x01
	Port=Portpraefix;
    45ee:	60 83       	st	Z, r22
	switch (Portpraefix)
    45f0:	63 34       	cpi	r22, 0x43	; 67
    45f2:	89 f0       	breq	.+34     	; 0x4616 <_ZN6OutputC1Ehh+0x2c>
    45f4:	64 34       	cpi	r22, 0x44	; 68
    45f6:	e1 f0       	breq	.+56     	; 0x4630 <_ZN6OutputC1Ehh+0x46>
    45f8:	62 34       	cpi	r22, 0x42	; 66
    45fa:	31 f5       	brne	.+76     	; 0x4648 <_ZN6OutputC1Ehh+0x5e>
	{
	case 'B':
		DDRB |= (1<<Pin);
    45fc:	24 b1       	in	r18, 0x04	; 4
    45fe:	81 e0       	ldi	r24, 0x01	; 1
    4600:	90 e0       	ldi	r25, 0x00	; 0
    4602:	bc 01       	movw	r22, r24
    4604:	02 c0       	rjmp	.+4      	; 0x460a <_ZN6OutputC1Ehh+0x20>
    4606:	66 0f       	add	r22, r22
    4608:	77 1f       	adc	r23, r23
    460a:	4a 95       	dec	r20
    460c:	e2 f7       	brpl	.-8      	; 0x4606 <_ZN6OutputC1Ehh+0x1c>
    460e:	ab 01       	movw	r20, r22
    4610:	42 2b       	or	r20, r18
    4612:	44 b9       	out	0x04, r20	; 4
		break;
    4614:	08 95       	ret
	case 'C':
		DDRC |= (1<<Pin);
    4616:	27 b1       	in	r18, 0x07	; 7
    4618:	81 e0       	ldi	r24, 0x01	; 1
    461a:	90 e0       	ldi	r25, 0x00	; 0
    461c:	fc 01       	movw	r30, r24
    461e:	02 c0       	rjmp	.+4      	; 0x4624 <_ZN6OutputC1Ehh+0x3a>
    4620:	ee 0f       	add	r30, r30
    4622:	ff 1f       	adc	r31, r31
    4624:	4a 95       	dec	r20
    4626:	e2 f7       	brpl	.-8      	; 0x4620 <_ZN6OutputC1Ehh+0x36>
    4628:	af 01       	movw	r20, r30
    462a:	42 2b       	or	r20, r18
    462c:	47 b9       	out	0x07, r20	; 7
		break;
    462e:	08 95       	ret
	case 'D':
		DDRD |= (1<<Pin);
    4630:	2a b1       	in	r18, 0x0a	; 10
    4632:	81 e0       	ldi	r24, 0x01	; 1
    4634:	90 e0       	ldi	r25, 0x00	; 0
    4636:	bc 01       	movw	r22, r24
    4638:	02 c0       	rjmp	.+4      	; 0x463e <_ZN6OutputC1Ehh+0x54>
    463a:	66 0f       	add	r22, r22
    463c:	77 1f       	adc	r23, r23
    463e:	4a 95       	dec	r20
    4640:	e2 f7       	brpl	.-8      	; 0x463a <_ZN6OutputC1Ehh+0x50>
    4642:	ab 01       	movw	r20, r22
    4644:	42 2b       	or	r20, r18
    4646:	4a b9       	out	0x0a, r20	; 10
    4648:	08 95       	ret

0000464a <_ZN6OutputD1Ev>:
		break;
	}
} //Output

// default destructor
Output::~Output()
    464a:	08 95       	ret

0000464c <_ZN6Output2onEv>:
{
} //~Output

void Output::on(){
	switch (Port)
    464c:	fc 01       	movw	r30, r24
    464e:	20 81       	ld	r18, Z
    4650:	23 34       	cpi	r18, 0x43	; 67
    4652:	91 f0       	breq	.+36     	; 0x4678 <_ZN6Output2onEv+0x2c>
    4654:	24 34       	cpi	r18, 0x44	; 68
    4656:	f9 f0       	breq	.+62     	; 0x4696 <_ZN6Output2onEv+0x4a>
    4658:	22 34       	cpi	r18, 0x42	; 66
    465a:	59 f5       	brne	.+86     	; 0x46b2 <_ZN6Output2onEv+0x66>
	{
		case 'B':
			PORTB |= (1<<Pin);
    465c:	45 b1       	in	r20, 0x05	; 5
    465e:	21 e0       	ldi	r18, 0x01	; 1
    4660:	30 e0       	ldi	r19, 0x00	; 0
    4662:	b9 01       	movw	r22, r18
    4664:	01 80       	ldd	r0, Z+1	; 0x01
    4666:	02 c0       	rjmp	.+4      	; 0x466c <_ZN6Output2onEv+0x20>
    4668:	66 0f       	add	r22, r22
    466a:	77 1f       	adc	r23, r23
    466c:	0a 94       	dec	r0
    466e:	e2 f7       	brpl	.-8      	; 0x4668 <_ZN6Output2onEv+0x1c>
    4670:	cb 01       	movw	r24, r22
    4672:	84 2b       	or	r24, r20
    4674:	85 b9       	out	0x05, r24	; 5
			break;
    4676:	08 95       	ret
		case 'C':
			PORTC |= (1<<Pin);
    4678:	48 b1       	in	r20, 0x08	; 8
    467a:	21 e0       	ldi	r18, 0x01	; 1
    467c:	30 e0       	ldi	r19, 0x00	; 0
    467e:	b9 01       	movw	r22, r18
    4680:	fc 01       	movw	r30, r24
    4682:	01 80       	ldd	r0, Z+1	; 0x01
    4684:	02 c0       	rjmp	.+4      	; 0x468a <_ZN6Output2onEv+0x3e>
    4686:	66 0f       	add	r22, r22
    4688:	77 1f       	adc	r23, r23
    468a:	0a 94       	dec	r0
    468c:	e2 f7       	brpl	.-8      	; 0x4686 <_ZN6Output2onEv+0x3a>
    468e:	cb 01       	movw	r24, r22
    4690:	84 2b       	or	r24, r20
    4692:	88 b9       	out	0x08, r24	; 8
			break;
    4694:	08 95       	ret
		case 'D':
			PORTD |= (1<<Pin);
    4696:	4b b1       	in	r20, 0x0b	; 11
    4698:	21 e0       	ldi	r18, 0x01	; 1
    469a:	30 e0       	ldi	r19, 0x00	; 0
    469c:	b9 01       	movw	r22, r18
    469e:	fc 01       	movw	r30, r24
    46a0:	01 80       	ldd	r0, Z+1	; 0x01
    46a2:	02 c0       	rjmp	.+4      	; 0x46a8 <_ZN6Output2onEv+0x5c>
    46a4:	66 0f       	add	r22, r22
    46a6:	77 1f       	adc	r23, r23
    46a8:	0a 94       	dec	r0
    46aa:	e2 f7       	brpl	.-8      	; 0x46a4 <_ZN6Output2onEv+0x58>
    46ac:	cb 01       	movw	r24, r22
    46ae:	84 2b       	or	r24, r20
    46b0:	8b b9       	out	0x0b, r24	; 11
    46b2:	08 95       	ret

000046b4 <_ZN6Output4isonEv>:
	}
}

uint8_t Output::ison(){
	uint8_t returnparam=0;
	switch (Port)
    46b4:	fc 01       	movw	r30, r24
    46b6:	20 81       	ld	r18, Z
    46b8:	23 34       	cpi	r18, 0x43	; 67
    46ba:	81 f0       	breq	.+32     	; 0x46dc <_ZN6Output4isonEv+0x28>
    46bc:	24 34       	cpi	r18, 0x44	; 68
    46be:	d9 f0       	breq	.+54     	; 0x46f6 <_ZN6Output4isonEv+0x42>
    46c0:	22 34       	cpi	r18, 0x42	; 66
    46c2:	31 f5       	brne	.+76     	; 0x4710 <_ZN6Output4isonEv+0x5c>
	{
		case 'B':
			if ((PORTB&(1<<Pin)))
    46c4:	25 b1       	in	r18, 0x05	; 5
    46c6:	30 e0       	ldi	r19, 0x00	; 0
    46c8:	a9 01       	movw	r20, r18
    46ca:	01 80       	ldd	r0, Z+1	; 0x01
    46cc:	02 c0       	rjmp	.+4      	; 0x46d2 <_ZN6Output4isonEv+0x1e>
    46ce:	55 95       	asr	r21
    46d0:	47 95       	ror	r20
    46d2:	0a 94       	dec	r0
    46d4:	e2 f7       	brpl	.-8      	; 0x46ce <_ZN6Output4isonEv+0x1a>
    46d6:	ca 01       	movw	r24, r20
    46d8:	81 70       	andi	r24, 0x01	; 1
    46da:	08 95       	ret
			{
				returnparam = 1;
			}
			break;
		case 'C':
			if ((PORTC&(1<<Pin)))
    46dc:	28 b1       	in	r18, 0x08	; 8
    46de:	30 e0       	ldi	r19, 0x00	; 0
    46e0:	a9 01       	movw	r20, r18
    46e2:	fc 01       	movw	r30, r24
    46e4:	01 80       	ldd	r0, Z+1	; 0x01
    46e6:	02 c0       	rjmp	.+4      	; 0x46ec <_ZN6Output4isonEv+0x38>
    46e8:	55 95       	asr	r21
    46ea:	47 95       	ror	r20
    46ec:	0a 94       	dec	r0
    46ee:	e2 f7       	brpl	.-8      	; 0x46e8 <_ZN6Output4isonEv+0x34>
    46f0:	ca 01       	movw	r24, r20
    46f2:	81 70       	andi	r24, 0x01	; 1
    46f4:	08 95       	ret
			{
				returnparam = 1;
			}
			break;
		case 'D':
			if ((PORTD&(1<<Pin)))
    46f6:	2b b1       	in	r18, 0x0b	; 11
    46f8:	30 e0       	ldi	r19, 0x00	; 0
    46fa:	a9 01       	movw	r20, r18
    46fc:	fc 01       	movw	r30, r24
    46fe:	01 80       	ldd	r0, Z+1	; 0x01
    4700:	02 c0       	rjmp	.+4      	; 0x4706 <_ZN6Output4isonEv+0x52>
    4702:	55 95       	asr	r21
    4704:	47 95       	ror	r20
    4706:	0a 94       	dec	r0
    4708:	e2 f7       	brpl	.-8      	; 0x4702 <_ZN6Output4isonEv+0x4e>
    470a:	ca 01       	movw	r24, r20
    470c:	81 70       	andi	r24, 0x01	; 1
    470e:	08 95       	ret
			{
				returnparam = 1;
			}
			break;
		default:
		returnparam = 2;
    4710:	82 e0       	ldi	r24, 0x02	; 2
			break;
	}
	return returnparam;
}
    4712:	08 95       	ret

00004714 <_ZN6Output3offEv>:

void Output::off(){
	switch (Port)
    4714:	fc 01       	movw	r30, r24
    4716:	20 81       	ld	r18, Z
    4718:	23 34       	cpi	r18, 0x43	; 67
    471a:	99 f0       	breq	.+38     	; 0x4742 <_ZN6Output3offEv+0x2e>
    471c:	24 34       	cpi	r18, 0x44	; 68
    471e:	09 f1       	breq	.+66     	; 0x4762 <_ZN6Output3offEv+0x4e>
    4720:	22 34       	cpi	r18, 0x42	; 66
    4722:	71 f5       	brne	.+92     	; 0x4780 <_ZN6Output3offEv+0x6c>
	{
		case 'B':
			PORTB &= ~(1<<Pin);
    4724:	45 b1       	in	r20, 0x05	; 5
    4726:	21 e0       	ldi	r18, 0x01	; 1
    4728:	30 e0       	ldi	r19, 0x00	; 0
    472a:	b9 01       	movw	r22, r18
    472c:	01 80       	ldd	r0, Z+1	; 0x01
    472e:	02 c0       	rjmp	.+4      	; 0x4734 <_ZN6Output3offEv+0x20>
    4730:	66 0f       	add	r22, r22
    4732:	77 1f       	adc	r23, r23
    4734:	0a 94       	dec	r0
    4736:	e2 f7       	brpl	.-8      	; 0x4730 <_ZN6Output3offEv+0x1c>
    4738:	cb 01       	movw	r24, r22
    473a:	80 95       	com	r24
    473c:	84 23       	and	r24, r20
    473e:	85 b9       	out	0x05, r24	; 5
			break;
    4740:	08 95       	ret
		case 'C':
			PORTC &= ~(1<<Pin);
    4742:	48 b1       	in	r20, 0x08	; 8
    4744:	21 e0       	ldi	r18, 0x01	; 1
    4746:	30 e0       	ldi	r19, 0x00	; 0
    4748:	b9 01       	movw	r22, r18
    474a:	fc 01       	movw	r30, r24
    474c:	01 80       	ldd	r0, Z+1	; 0x01
    474e:	02 c0       	rjmp	.+4      	; 0x4754 <_ZN6Output3offEv+0x40>
    4750:	66 0f       	add	r22, r22
    4752:	77 1f       	adc	r23, r23
    4754:	0a 94       	dec	r0
    4756:	e2 f7       	brpl	.-8      	; 0x4750 <_ZN6Output3offEv+0x3c>
    4758:	cb 01       	movw	r24, r22
    475a:	80 95       	com	r24
    475c:	84 23       	and	r24, r20
    475e:	88 b9       	out	0x08, r24	; 8
			break;
    4760:	08 95       	ret
		case 'D':
			PORTD &= ~(1<<Pin);
    4762:	4b b1       	in	r20, 0x0b	; 11
    4764:	21 e0       	ldi	r18, 0x01	; 1
    4766:	30 e0       	ldi	r19, 0x00	; 0
    4768:	b9 01       	movw	r22, r18
    476a:	fc 01       	movw	r30, r24
    476c:	01 80       	ldd	r0, Z+1	; 0x01
    476e:	02 c0       	rjmp	.+4      	; 0x4774 <_ZN6Output3offEv+0x60>
    4770:	66 0f       	add	r22, r22
    4772:	77 1f       	adc	r23, r23
    4774:	0a 94       	dec	r0
    4776:	e2 f7       	brpl	.-8      	; 0x4770 <_ZN6Output3offEv+0x5c>
    4778:	cb 01       	movw	r24, r22
    477a:	80 95       	com	r24
    477c:	84 23       	and	r24, r20
    477e:	8b b9       	out	0x0b, r24	; 11
    4780:	08 95       	ret

00004782 <_ZN6Output6toggleEv>:
			break;
	}
}

void Output::toggle(){
	switch (Port)
    4782:	fc 01       	movw	r30, r24
    4784:	20 81       	ld	r18, Z
    4786:	23 34       	cpi	r18, 0x43	; 67
    4788:	a1 f0       	breq	.+40     	; 0x47b2 <_ZN6Output6toggleEv+0x30>
    478a:	24 34       	cpi	r18, 0x44	; 68
    478c:	19 f1       	breq	.+70     	; 0x47d4 <_ZN6Output6toggleEv+0x52>
    478e:	22 34       	cpi	r18, 0x42	; 66
    4790:	89 f5       	brne	.+98     	; 0x47f4 <_ZN6Output6toggleEv+0x72>
	{
		case 'B':
			if ((PORTB&(1<<Pin)))
    4792:	25 b1       	in	r18, 0x05	; 5
    4794:	30 e0       	ldi	r19, 0x00	; 0
    4796:	01 80       	ldd	r0, Z+1	; 0x01
    4798:	02 c0       	rjmp	.+4      	; 0x479e <_ZN6Output6toggleEv+0x1c>
    479a:	35 95       	asr	r19
    479c:	27 95       	ror	r18
    479e:	0a 94       	dec	r0
    47a0:	e2 f7       	brpl	.-8      	; 0x479a <_ZN6Output6toggleEv+0x18>
    47a2:	20 ff       	sbrs	r18, 0
    47a4:	03 c0       	rjmp	.+6      	; 0x47ac <_ZN6Output6toggleEv+0x2a>
			{
				off();
    47a6:	0e 94 8a 23 	call	0x4714	; 0x4714 <_ZN6Output3offEv>
    47aa:	08 95       	ret
			}
			else{
				on();
    47ac:	0e 94 26 23 	call	0x464c	; 0x464c <_ZN6Output2onEv>
    47b0:	08 95       	ret
			}
			break;
		case 'C':
			if ((PORTC&(1<<Pin)))
    47b2:	28 b1       	in	r18, 0x08	; 8
    47b4:	30 e0       	ldi	r19, 0x00	; 0
    47b6:	fc 01       	movw	r30, r24
    47b8:	01 80       	ldd	r0, Z+1	; 0x01
    47ba:	02 c0       	rjmp	.+4      	; 0x47c0 <_ZN6Output6toggleEv+0x3e>
    47bc:	35 95       	asr	r19
    47be:	27 95       	ror	r18
    47c0:	0a 94       	dec	r0
    47c2:	e2 f7       	brpl	.-8      	; 0x47bc <_ZN6Output6toggleEv+0x3a>
    47c4:	20 ff       	sbrs	r18, 0
    47c6:	03 c0       	rjmp	.+6      	; 0x47ce <_ZN6Output6toggleEv+0x4c>
			{
				off();
    47c8:	0e 94 8a 23 	call	0x4714	; 0x4714 <_ZN6Output3offEv>
    47cc:	08 95       	ret
			}
			else{
				on();
    47ce:	0e 94 26 23 	call	0x464c	; 0x464c <_ZN6Output2onEv>
    47d2:	08 95       	ret
			}
			break;
		case 'D':
			if ((PORTD&(1<<Pin)))
    47d4:	2b b1       	in	r18, 0x0b	; 11
    47d6:	30 e0       	ldi	r19, 0x00	; 0
    47d8:	fc 01       	movw	r30, r24
    47da:	01 80       	ldd	r0, Z+1	; 0x01
    47dc:	02 c0       	rjmp	.+4      	; 0x47e2 <_ZN6Output6toggleEv+0x60>
    47de:	35 95       	asr	r19
    47e0:	27 95       	ror	r18
    47e2:	0a 94       	dec	r0
    47e4:	e2 f7       	brpl	.-8      	; 0x47de <_ZN6Output6toggleEv+0x5c>
    47e6:	20 ff       	sbrs	r18, 0
    47e8:	03 c0       	rjmp	.+6      	; 0x47f0 <_ZN6Output6toggleEv+0x6e>
			{
				off();
    47ea:	0e 94 8a 23 	call	0x4714	; 0x4714 <_ZN6Output3offEv>
    47ee:	08 95       	ret
			}
			else{
				on();
    47f0:	0e 94 26 23 	call	0x464c	; 0x464c <_ZN6Output2onEv>
    47f4:	08 95       	ret

000047f6 <_ZN8PressureD1Ev>:
	Pressure0=1;
	LPS25H_initialize();
} //Pressure

// default destructor
Pressure::~Pressure()
    47f6:	0d 96       	adiw	r24, 0x0d	; 13
    47f8:	0e 94 6a 20 	call	0x40d4	; 0x40d4 <_ZN3I2CD1Ev>
    47fc:	08 95       	ret

000047fe <_ZN8Pressure14LPS25H_commandEhh>:
{
} //~Pressure

void Pressure::LPS25H_command(uint8_t add, uint8_t command){
    47fe:	0f 93       	push	r16
    4800:	1f 93       	push	r17
    4802:	cf 93       	push	r28
    4804:	df 93       	push	r29
    4806:	06 2f       	mov	r16, r22
    4808:	14 2f       	mov	r17, r20
	i2c.twi_start();
    480a:	ec 01       	movw	r28, r24
    480c:	2d 96       	adiw	r28, 0x0d	; 13
    480e:	ce 01       	movw	r24, r28
    4810:	0e 94 6b 20 	call	0x40d6	; 0x40d6 <_ZN3I2C9twi_startEv>
	i2c.twi_write(LPS25H_SA1_Write);
    4814:	6a eb       	ldi	r22, 0xBA	; 186
    4816:	ce 01       	movw	r24, r28
    4818:	0e 94 73 20 	call	0x40e6	; 0x40e6 <_ZN3I2C9twi_writeEh>
	i2c.twi_write(add);
    481c:	60 2f       	mov	r22, r16
    481e:	ce 01       	movw	r24, r28
    4820:	0e 94 73 20 	call	0x40e6	; 0x40e6 <_ZN3I2C9twi_writeEh>
	i2c.twi_write(command);
    4824:	61 2f       	mov	r22, r17
    4826:	ce 01       	movw	r24, r28
    4828:	0e 94 73 20 	call	0x40e6	; 0x40e6 <_ZN3I2C9twi_writeEh>
	i2c.twi_stop();
    482c:	ce 01       	movw	r24, r28
    482e:	0e 94 6f 20 	call	0x40de	; 0x40de <_ZN3I2C8twi_stopEv>
}
    4832:	df 91       	pop	r29
    4834:	cf 91       	pop	r28
    4836:	1f 91       	pop	r17
    4838:	0f 91       	pop	r16
    483a:	08 95       	ret

0000483c <_ZN8Pressure17LPS25H_initializeEv>:

void Pressure::LPS25H_initialize(){
    483c:	cf 93       	push	r28
    483e:	df 93       	push	r29
    4840:	ec 01       	movw	r28, r24
	uint8_t temp=0;
	//internal averages Pressure and Temperature (both 8)
	temp &= ~((1<<AVGT1) | (1<<AVGT0) | (1<<AVGP1) | (1<<AVGP0)); 
	LPS25H_command(RES_CONF,temp);
    4842:	40 e0       	ldi	r20, 0x00	; 0
    4844:	60 e1       	ldi	r22, 0x10	; 16
    4846:	0e 94 ff 23 	call	0x47fe	; 0x47fe <_ZN8Pressure14LPS25H_commandEhh>
	temp=0;
	//Enable device and set a single shot as well as Lock while reading
	temp |= (1<<PD) | (1<<BDU) | (1<<ODR1);
	LPS25H_command(CTRL_REG1,temp);
    484a:	44 ea       	ldi	r20, 0xA4	; 164
    484c:	60 e2       	ldi	r22, 0x20	; 32
    484e:	ce 01       	movw	r24, r28
    4850:	0e 94 ff 23 	call	0x47fe	; 0x47fe <_ZN8Pressure14LPS25H_commandEhh>
	temp=0;
	//FIFO on, no watermark no reset, reboot memory content, FIFO MEAN Mode
	temp |= (1<<BOOT) | (1<<FIFO_EN) | (1<<FIFO_MEAN_DEC);
	LPS25H_command(CTRL_REG2,temp);
    4854:	40 ed       	ldi	r20, 0xD0	; 208
    4856:	61 e2       	ldi	r22, 0x21	; 33
    4858:	ce 01       	movw	r24, r28
    485a:	0e 94 ff 23 	call	0x47fe	; 0x47fe <_ZN8Pressure14LPS25H_commandEhh>
	temp=0;
	//FIFO Controll register for MEAN Mode und 8 moving averages
	temp|=(1<<F_MODE2) | (1<<F_MODE1) | (1<<WTM_POINT0) | (1<<WTM_POINT1) | (1<<WTM_POINT2);
	LPS25H_command(FIFO_CTRL,temp);
    485e:	47 ec       	ldi	r20, 0xC7	; 199
    4860:	6e e2       	ldi	r22, 0x2E	; 46
    4862:	ce 01       	movw	r24, r28
    4864:	0e 94 ff 23 	call	0x47fe	; 0x47fe <_ZN8Pressure14LPS25H_commandEhh>
	//CTRL_REG4 not set
	//INTERRUPT_CFG not set
	//no threshold used
	//no Pressure offset used
	
}
    4868:	df 91       	pop	r29
    486a:	cf 91       	pop	r28
    486c:	08 95       	ret

0000486e <_ZN8PressureC1Ev>:


#include "Pressure.h"

// default constructor
Pressure::Pressure()
    486e:	cf 93       	push	r28
    4870:	df 93       	push	r29
    4872:	ec 01       	movw	r28, r24
    4874:	0d 96       	adiw	r24, 0x0d	; 13
    4876:	0e 94 66 20 	call	0x40cc	; 0x40cc <_ZN3I2CC1Ev>
{
	Press = 0;
    487a:	18 82       	st	Y, r1
    487c:	19 82       	std	Y+1, r1	; 0x01
    487e:	1a 82       	std	Y+2, r1	; 0x02
    4880:	1b 82       	std	Y+3, r1	; 0x03
	Tempera = 0;
    4882:	1c 82       	std	Y+4, r1	; 0x04
    4884:	1d 82       	std	Y+5, r1	; 0x05
    4886:	1e 82       	std	Y+6, r1	; 0x06
    4888:	1f 82       	std	Y+7, r1	; 0x07
	Tempoffset = -4;	//Aus Erfahrung
    488a:	8c ef       	ldi	r24, 0xFC	; 252
    488c:	88 87       	std	Y+8, r24	; 0x08
	Pressure0=1;
    488e:	40 e0       	ldi	r20, 0x00	; 0
    4890:	50 e0       	ldi	r21, 0x00	; 0
    4892:	60 e8       	ldi	r22, 0x80	; 128
    4894:	7f e3       	ldi	r23, 0x3F	; 63
    4896:	49 87       	std	Y+9, r20	; 0x09
    4898:	5a 87       	std	Y+10, r21	; 0x0a
    489a:	6b 87       	std	Y+11, r22	; 0x0b
    489c:	7c 87       	std	Y+12, r23	; 0x0c
	LPS25H_initialize();
    489e:	ce 01       	movw	r24, r28
    48a0:	0e 94 1e 24 	call	0x483c	; 0x483c <_ZN8Pressure17LPS25H_initializeEv>
} //Pressure
    48a4:	df 91       	pop	r29
    48a6:	cf 91       	pop	r28
    48a8:	08 95       	ret

000048aa <_ZN8Pressure18READ_Pressure_onceEv>:
	//no threshold used
	//no Pressure offset used
	
}

void Pressure::READ_Pressure_once(){
    48aa:	af 92       	push	r10
    48ac:	bf 92       	push	r11
    48ae:	cf 92       	push	r12
    48b0:	df 92       	push	r13
    48b2:	ef 92       	push	r14
    48b4:	ff 92       	push	r15
    48b6:	1f 93       	push	r17
    48b8:	cf 93       	push	r28
    48ba:	df 93       	push	r29
    48bc:	00 d0       	rcall	.+0      	; 0x48be <_ZN8Pressure18READ_Pressure_onceEv+0x14>
    48be:	1f 92       	push	r1
    48c0:	cd b7       	in	r28, 0x3d	; 61
    48c2:	de b7       	in	r29, 0x3e	; 62
    48c4:	5c 01       	movw	r10, r24
	uint8_t Wertedruck[3];
	cli();
    48c6:	f8 94       	cli
	i2c.twi_start();
    48c8:	7c 01       	movw	r14, r24
    48ca:	8d e0       	ldi	r24, 0x0D	; 13
    48cc:	e8 0e       	add	r14, r24
    48ce:	f1 1c       	adc	r15, r1
    48d0:	c7 01       	movw	r24, r14
    48d2:	0e 94 6b 20 	call	0x40d6	; 0x40d6 <_ZN3I2C9twi_startEv>
	i2c.twi_write(LPS25H_SA1_Write);
    48d6:	6a eb       	ldi	r22, 0xBA	; 186
    48d8:	c7 01       	movw	r24, r14
    48da:	0e 94 73 20 	call	0x40e6	; 0x40e6 <_ZN3I2C9twi_writeEh>
	i2c.twi_write(PRESS_OUT_XL|(1<<autoincrement));
    48de:	68 ea       	ldi	r22, 0xA8	; 168
    48e0:	c7 01       	movw	r24, r14
    48e2:	0e 94 73 20 	call	0x40e6	; 0x40e6 <_ZN3I2C9twi_writeEh>
	i2c.twi_start();
    48e6:	c7 01       	movw	r24, r14
    48e8:	0e 94 6b 20 	call	0x40d6	; 0x40d6 <_ZN3I2C9twi_startEv>
	i2c.twi_write(LPS25H_SA1_READ);
    48ec:	6b eb       	ldi	r22, 0xBB	; 187
    48ee:	c7 01       	movw	r24, r14
    48f0:	0e 94 73 20 	call	0x40e6	; 0x40e6 <_ZN3I2C9twi_writeEh>
    48f4:	fe 01       	movw	r30, r28
    48f6:	31 96       	adiw	r30, 0x01	; 1
    48f8:	6f 01       	movw	r12, r30
	for (uint8_t i=0;i<3;i++)
    48fa:	10 e0       	ldi	r17, 0x00	; 0
	{
		if (i<2)
    48fc:	12 30       	cpi	r17, 0x02	; 2
    48fe:	38 f4       	brcc	.+14     	; 0x490e <_ZN8Pressure18READ_Pressure_onceEv+0x64>
		{
			Wertedruck[i] = i2c.twi_read(1);
    4900:	61 e0       	ldi	r22, 0x01	; 1
    4902:	c7 01       	movw	r24, r14
    4904:	0e 94 83 20 	call	0x4106	; 0x4106 <_ZN3I2C8twi_readEh>
    4908:	f6 01       	movw	r30, r12
    490a:	80 83       	st	Z, r24
    490c:	06 c0       	rjmp	.+12     	; 0x491a <_ZN8Pressure18READ_Pressure_onceEv+0x70>
		}
		else{
			Wertedruck[i] = i2c.twi_read(0);
    490e:	60 e0       	ldi	r22, 0x00	; 0
    4910:	c7 01       	movw	r24, r14
    4912:	0e 94 83 20 	call	0x4106	; 0x4106 <_ZN3I2C8twi_readEh>
    4916:	f6 01       	movw	r30, r12
    4918:	80 83       	st	Z, r24
	i2c.twi_start();
	i2c.twi_write(LPS25H_SA1_Write);
	i2c.twi_write(PRESS_OUT_XL|(1<<autoincrement));
	i2c.twi_start();
	i2c.twi_write(LPS25H_SA1_READ);
	for (uint8_t i=0;i<3;i++)
    491a:	1f 5f       	subi	r17, 0xFF	; 255
    491c:	ff ef       	ldi	r31, 0xFF	; 255
    491e:	cf 1a       	sub	r12, r31
    4920:	df 0a       	sbc	r13, r31
    4922:	13 30       	cpi	r17, 0x03	; 3
    4924:	59 f7       	brne	.-42     	; 0x48fc <_ZN8Pressure18READ_Pressure_onceEv+0x52>
		}
		else{
			Wertedruck[i] = i2c.twi_read(0);
		}
	}
	i2c.twi_stop();
    4926:	c7 01       	movw	r24, r14
    4928:	0e 94 6f 20 	call	0x40de	; 0x40de <_ZN3I2C8twi_stopEv>
	Press = ((double)Wertedruck[2]*65536);
    492c:	6b 81       	ldd	r22, Y+3	; 0x03
    492e:	70 e0       	ldi	r23, 0x00	; 0
    4930:	80 e0       	ldi	r24, 0x00	; 0
    4932:	90 e0       	ldi	r25, 0x00	; 0
    4934:	0e 94 63 28 	call	0x50c6	; 0x50c6 <__floatunsisf>
    4938:	20 e0       	ldi	r18, 0x00	; 0
    493a:	30 e0       	ldi	r19, 0x00	; 0
    493c:	40 e8       	ldi	r20, 0x80	; 128
    493e:	57 e4       	ldi	r21, 0x47	; 71
    4940:	0e 94 c3 29 	call	0x5386	; 0x5386 <__mulsf3>
    4944:	6b 01       	movw	r12, r22
    4946:	7c 01       	movw	r14, r24
	Press += ((double)Wertedruck[1]*256);
    4948:	6a 81       	ldd	r22, Y+2	; 0x02
    494a:	70 e0       	ldi	r23, 0x00	; 0
    494c:	80 e0       	ldi	r24, 0x00	; 0
    494e:	90 e0       	ldi	r25, 0x00	; 0
    4950:	0e 94 63 28 	call	0x50c6	; 0x50c6 <__floatunsisf>
    4954:	20 e0       	ldi	r18, 0x00	; 0
    4956:	30 e0       	ldi	r19, 0x00	; 0
    4958:	40 e8       	ldi	r20, 0x80	; 128
    495a:	53 e4       	ldi	r21, 0x43	; 67
    495c:	0e 94 c3 29 	call	0x5386	; 0x5386 <__mulsf3>
    4960:	9b 01       	movw	r18, r22
    4962:	ac 01       	movw	r20, r24
    4964:	c7 01       	movw	r24, r14
    4966:	b6 01       	movw	r22, r12
    4968:	0e 94 fd 26 	call	0x4dfa	; 0x4dfa <__addsf3>
    496c:	6b 01       	movw	r12, r22
    496e:	7c 01       	movw	r14, r24
	Press += (double)Wertedruck[0];
    4970:	69 81       	ldd	r22, Y+1	; 0x01
    4972:	70 e0       	ldi	r23, 0x00	; 0
    4974:	80 e0       	ldi	r24, 0x00	; 0
    4976:	90 e0       	ldi	r25, 0x00	; 0
    4978:	0e 94 63 28 	call	0x50c6	; 0x50c6 <__floatunsisf>
    497c:	9b 01       	movw	r18, r22
    497e:	ac 01       	movw	r20, r24
    4980:	c7 01       	movw	r24, r14
    4982:	b6 01       	movw	r22, r12
    4984:	0e 94 fd 26 	call	0x4dfa	; 0x4dfa <__addsf3>
	//Press = (Wertedruck[0] + (Wertedruck[1]*256) + (Wertedruck[2]*65536));
	Press/=4096.0;
    4988:	20 e0       	ldi	r18, 0x00	; 0
    498a:	30 e0       	ldi	r19, 0x00	; 0
    498c:	40 e8       	ldi	r20, 0x80	; 128
    498e:	59 e3       	ldi	r21, 0x39	; 57
    4990:	0e 94 c3 29 	call	0x5386	; 0x5386 <__mulsf3>
    4994:	f5 01       	movw	r30, r10
    4996:	60 83       	st	Z, r22
    4998:	71 83       	std	Z+1, r23	; 0x01
    499a:	82 83       	std	Z+2, r24	; 0x02
    499c:	93 83       	std	Z+3, r25	; 0x03
	sei();
    499e:	78 94       	sei
}
    49a0:	0f 90       	pop	r0
    49a2:	0f 90       	pop	r0
    49a4:	0f 90       	pop	r0
    49a6:	df 91       	pop	r29
    49a8:	cf 91       	pop	r28
    49aa:	1f 91       	pop	r17
    49ac:	ff 90       	pop	r15
    49ae:	ef 90       	pop	r14
    49b0:	df 90       	pop	r13
    49b2:	cf 90       	pop	r12
    49b4:	bf 90       	pop	r11
    49b6:	af 90       	pop	r10
    49b8:	08 95       	ret

000049ba <_ZN8Pressure16READ_TemperatureEv>:

void Pressure::READ_Temperature(){
    49ba:	cf 92       	push	r12
    49bc:	df 92       	push	r13
    49be:	ef 92       	push	r14
    49c0:	ff 92       	push	r15
    49c2:	0f 93       	push	r16
    49c4:	1f 93       	push	r17
    49c6:	cf 93       	push	r28
    49c8:	df 93       	push	r29
    49ca:	00 d0       	rcall	.+0      	; 0x49cc <_ZN8Pressure16READ_TemperatureEv+0x12>
    49cc:	cd b7       	in	r28, 0x3d	; 61
    49ce:	de b7       	in	r29, 0x3e	; 62
    49d0:	8c 01       	movw	r16, r24
	cli();
    49d2:	f8 94       	cli
	uint8_t Wert[2];
	i2c.twi_start();
    49d4:	7c 01       	movw	r14, r24
    49d6:	8d e0       	ldi	r24, 0x0D	; 13
    49d8:	e8 0e       	add	r14, r24
    49da:	f1 1c       	adc	r15, r1
    49dc:	c7 01       	movw	r24, r14
    49de:	0e 94 6b 20 	call	0x40d6	; 0x40d6 <_ZN3I2C9twi_startEv>
	i2c.twi_write(LPS25H_SA1_Write);
    49e2:	6a eb       	ldi	r22, 0xBA	; 186
    49e4:	c7 01       	movw	r24, r14
    49e6:	0e 94 73 20 	call	0x40e6	; 0x40e6 <_ZN3I2C9twi_writeEh>
	i2c.twi_write(TEMP_OUT_L|(1<<autoincrement));
    49ea:	6b ea       	ldi	r22, 0xAB	; 171
    49ec:	c7 01       	movw	r24, r14
    49ee:	0e 94 73 20 	call	0x40e6	; 0x40e6 <_ZN3I2C9twi_writeEh>
	i2c.twi_start();
    49f2:	c7 01       	movw	r24, r14
    49f4:	0e 94 6b 20 	call	0x40d6	; 0x40d6 <_ZN3I2C9twi_startEv>
	i2c.twi_write(LPS25H_SA1_READ);
    49f8:	6b eb       	ldi	r22, 0xBB	; 187
    49fa:	c7 01       	movw	r24, r14
    49fc:	0e 94 73 20 	call	0x40e6	; 0x40e6 <_ZN3I2C9twi_writeEh>
    4a00:	cc 24       	eor	r12, r12
    4a02:	c3 94       	inc	r12
    4a04:	d1 2c       	mov	r13, r1
    4a06:	02 c0       	rjmp	.+4      	; 0x4a0c <_ZN8Pressure16READ_TemperatureEv+0x52>
    4a08:	d3 94       	inc	r13
    4a0a:	c3 94       	inc	r12
	for (uint8_t i=0;i<2;i++)
	{
		if (i<1)
    4a0c:	d1 10       	cpse	r13, r1
    4a0e:	06 c0       	rjmp	.+12     	; 0x4a1c <_ZN8Pressure16READ_TemperatureEv+0x62>
		{
			Wert[i] = i2c.twi_read(1);
    4a10:	61 e0       	ldi	r22, 0x01	; 1
    4a12:	c7 01       	movw	r24, r14
    4a14:	0e 94 83 20 	call	0x4106	; 0x4106 <_ZN3I2C8twi_readEh>
    4a18:	89 83       	std	Y+1, r24	; 0x01
    4a1a:	f6 cf       	rjmp	.-20     	; 0x4a08 <_ZN8Pressure16READ_TemperatureEv+0x4e>
		}
		else{
			Wert[i] = i2c.twi_read(0);
    4a1c:	60 e0       	ldi	r22, 0x00	; 0
    4a1e:	c7 01       	movw	r24, r14
    4a20:	0e 94 83 20 	call	0x4106	; 0x4106 <_ZN3I2C8twi_readEh>
    4a24:	e1 e0       	ldi	r30, 0x01	; 1
    4a26:	f0 e0       	ldi	r31, 0x00	; 0
    4a28:	ec 0f       	add	r30, r28
    4a2a:	fd 1f       	adc	r31, r29
    4a2c:	ed 0d       	add	r30, r13
    4a2e:	f1 1d       	adc	r31, r1
    4a30:	80 83       	st	Z, r24
	i2c.twi_start();
	i2c.twi_write(LPS25H_SA1_Write);
	i2c.twi_write(TEMP_OUT_L|(1<<autoincrement));
	i2c.twi_start();
	i2c.twi_write(LPS25H_SA1_READ);
	for (uint8_t i=0;i<2;i++)
    4a32:	e1 e0       	ldi	r30, 0x01	; 1
    4a34:	ec 15       	cp	r30, r12
    4a36:	40 f7       	brcc	.-48     	; 0x4a08 <_ZN8Pressure16READ_TemperatureEv+0x4e>
		}
		else{
			Wert[i] = i2c.twi_read(0);
		}
	}
	i2c.twi_stop();
    4a38:	c7 01       	movw	r24, r14
    4a3a:	0e 94 6f 20 	call	0x40de	; 0x40de <_ZN3I2C8twi_stopEv>
	Tempera = ((int16_t)(Wert[0]+(Wert[1]<<8)))/480.0;
    4a3e:	89 81       	ldd	r24, Y+1	; 0x01
    4a40:	6a 81       	ldd	r22, Y+2	; 0x02
    4a42:	70 e0       	ldi	r23, 0x00	; 0
    4a44:	76 2f       	mov	r23, r22
    4a46:	66 27       	eor	r22, r22
    4a48:	68 0f       	add	r22, r24
    4a4a:	71 1d       	adc	r23, r1
    4a4c:	88 27       	eor	r24, r24
    4a4e:	77 fd       	sbrc	r23, 7
    4a50:	80 95       	com	r24
    4a52:	98 2f       	mov	r25, r24
    4a54:	0e 94 65 28 	call	0x50ca	; 0x50ca <__floatsisf>
    4a58:	20 e0       	ldi	r18, 0x00	; 0
    4a5a:	30 e0       	ldi	r19, 0x00	; 0
    4a5c:	40 ef       	ldi	r20, 0xF0	; 240
    4a5e:	53 e4       	ldi	r21, 0x43	; 67
    4a60:	0e 94 ca 27 	call	0x4f94	; 0x4f94 <__divsf3>
    4a64:	6b 01       	movw	r12, r22
    4a66:	7c 01       	movw	r14, r24
	Tempera+=42.5+Tempoffset;
    4a68:	f8 01       	movw	r30, r16
    4a6a:	60 85       	ldd	r22, Z+8	; 0x08
    4a6c:	77 27       	eor	r23, r23
    4a6e:	67 fd       	sbrc	r22, 7
    4a70:	70 95       	com	r23
    4a72:	87 2f       	mov	r24, r23
    4a74:	97 2f       	mov	r25, r23
    4a76:	0e 94 65 28 	call	0x50ca	; 0x50ca <__floatsisf>
    4a7a:	20 e0       	ldi	r18, 0x00	; 0
    4a7c:	30 e0       	ldi	r19, 0x00	; 0
    4a7e:	4a e2       	ldi	r20, 0x2A	; 42
    4a80:	52 e4       	ldi	r21, 0x42	; 66
    4a82:	0e 94 fd 26 	call	0x4dfa	; 0x4dfa <__addsf3>
    4a86:	9b 01       	movw	r18, r22
    4a88:	ac 01       	movw	r20, r24
    4a8a:	c7 01       	movw	r24, r14
    4a8c:	b6 01       	movw	r22, r12
    4a8e:	0e 94 fd 26 	call	0x4dfa	; 0x4dfa <__addsf3>
    4a92:	f8 01       	movw	r30, r16
    4a94:	64 83       	std	Z+4, r22	; 0x04
    4a96:	75 83       	std	Z+5, r23	; 0x05
    4a98:	86 83       	std	Z+6, r24	; 0x06
    4a9a:	97 83       	std	Z+7, r25	; 0x07
	sei();
    4a9c:	78 94       	sei
}
    4a9e:	0f 90       	pop	r0
    4aa0:	0f 90       	pop	r0
    4aa2:	df 91       	pop	r29
    4aa4:	cf 91       	pop	r28
    4aa6:	1f 91       	pop	r17
    4aa8:	0f 91       	pop	r16
    4aaa:	ff 90       	pop	r15
    4aac:	ef 90       	pop	r14
    4aae:	df 90       	pop	r13
    4ab0:	cf 90       	pop	r12
    4ab2:	08 95       	ret

00004ab4 <_ZN8Pressure8altitudeEd>:

double Pressure::altitude(double Pressurevalue){
    4ab4:	8f 92       	push	r8
    4ab6:	9f 92       	push	r9
    4ab8:	af 92       	push	r10
    4aba:	bf 92       	push	r11
    4abc:	cf 92       	push	r12
    4abe:	df 92       	push	r13
    4ac0:	ef 92       	push	r14
    4ac2:	ff 92       	push	r15
	return (Pressure0*100*log(Pressure0/Pressurevalue)/(1.2041*9.81));
    4ac4:	fc 01       	movw	r30, r24
    4ac6:	c1 84       	ldd	r12, Z+9	; 0x09
    4ac8:	d2 84       	ldd	r13, Z+10	; 0x0a
    4aca:	e3 84       	ldd	r14, Z+11	; 0x0b
    4acc:	f4 84       	ldd	r15, Z+12	; 0x0c
    4ace:	9a 01       	movw	r18, r20
    4ad0:	ab 01       	movw	r20, r22
    4ad2:	c7 01       	movw	r24, r14
    4ad4:	b6 01       	movw	r22, r12
    4ad6:	0e 94 ca 27 	call	0x4f94	; 0x4f94 <__divsf3>
    4ada:	0e 94 83 29 	call	0x5306	; 0x5306 <log>
    4ade:	4b 01       	movw	r8, r22
    4ae0:	5c 01       	movw	r10, r24
    4ae2:	20 e0       	ldi	r18, 0x00	; 0
    4ae4:	30 e0       	ldi	r19, 0x00	; 0
    4ae6:	48 ec       	ldi	r20, 0xC8	; 200
    4ae8:	52 e4       	ldi	r21, 0x42	; 66
    4aea:	c7 01       	movw	r24, r14
    4aec:	b6 01       	movw	r22, r12
    4aee:	0e 94 c3 29 	call	0x5386	; 0x5386 <__mulsf3>
    4af2:	a5 01       	movw	r20, r10
    4af4:	94 01       	movw	r18, r8
    4af6:	0e 94 c3 29 	call	0x5386	; 0x5386 <__mulsf3>
    4afa:	2c ed       	ldi	r18, 0xDC	; 220
    4afc:	3e ef       	ldi	r19, 0xFE	; 254
    4afe:	4c e3       	ldi	r20, 0x3C	; 60
    4b00:	51 e4       	ldi	r21, 0x41	; 65
    4b02:	0e 94 ca 27 	call	0x4f94	; 0x4f94 <__divsf3>
}
    4b06:	ff 90       	pop	r15
    4b08:	ef 90       	pop	r14
    4b0a:	df 90       	pop	r13
    4b0c:	cf 90       	pop	r12
    4b0e:	bf 90       	pop	r11
    4b10:	af 90       	pop	r10
    4b12:	9f 90       	pop	r9
    4b14:	8f 90       	pop	r8
    4b16:	08 95       	ret

00004b18 <_ZN8Pressure13set_Pressure0Ed>:
void Pressure::set_Pressure0(double Pressurevalue){
	Pressure0=Pressurevalue;
    4b18:	fc 01       	movw	r30, r24
    4b1a:	41 87       	std	Z+9, r20	; 0x09
    4b1c:	52 87       	std	Z+10, r21	; 0x0a
    4b1e:	63 87       	std	Z+11, r22	; 0x0b
    4b20:	74 87       	std	Z+12, r23	; 0x0c
    4b22:	08 95       	ret

00004b24 <_ZN3RTCD1Ev>:
	ausgabezeitneu();
	ausgabedatumneu();
} //RTC

// default destructor
RTC::~RTC()
    4b24:	08 95       	ret

00004b26 <_ZN3RTC6WeckerEv>:
		}
	}
	ausgabedatumneu();
}

void RTC::Wecker(){
    4b26:	fc 01       	movw	r30, r24
	if ((interupts&(1<<Weckerein))&&!(interupts&(1<<Weckeractiv)))
    4b28:	80 8d       	ldd	r24, Z+24	; 0x18
    4b2a:	83 ff       	sbrs	r24, 3
    4b2c:	0c c0       	rjmp	.+24     	; 0x4b46 <_ZN3RTC6WeckerEv+0x20>
    4b2e:	84 fd       	sbrc	r24, 4
    4b30:	0a c0       	rjmp	.+20     	; 0x4b46 <_ZN3RTC6WeckerEv+0x20>
	{
		if (WStunden==Stunden)
    4b32:	22 8d       	ldd	r18, Z+26	; 0x1a
    4b34:	90 89       	ldd	r25, Z+16	; 0x10
    4b36:	29 13       	cpse	r18, r25
    4b38:	06 c0       	rjmp	.+12     	; 0x4b46 <_ZN3RTC6WeckerEv+0x20>
		{
			if (WMinuten==Minuten)
    4b3a:	21 8d       	ldd	r18, Z+25	; 0x19
    4b3c:	91 89       	ldd	r25, Z+17	; 0x11
    4b3e:	29 13       	cpse	r18, r25
    4b40:	02 c0       	rjmp	.+4      	; 0x4b46 <_ZN3RTC6WeckerEv+0x20>
			{
				interupts|=(1<<Weckeractiv);
    4b42:	80 61       	ori	r24, 0x10	; 16
    4b44:	80 8f       	std	Z+24, r24	; 0x18
    4b46:	08 95       	ret

00004b48 <_ZN3RTC14ausgabezeitneuEv>:
		}
	}
}


void RTC::ausgabezeitneu(){
    4b48:	fc 01       	movw	r30, r24
	msg_uhr[0]='0'+Stunden/10;
    4b4a:	90 89       	ldd	r25, Z+16	; 0x10
    4b4c:	8d ec       	ldi	r24, 0xCD	; 205
    4b4e:	98 9f       	mul	r25, r24
    4b50:	21 2d       	mov	r18, r1
    4b52:	11 24       	eor	r1, r1
    4b54:	26 95       	lsr	r18
    4b56:	26 95       	lsr	r18
    4b58:	26 95       	lsr	r18
    4b5a:	30 e3       	ldi	r19, 0x30	; 48
    4b5c:	32 0f       	add	r19, r18
    4b5e:	30 83       	st	Z, r19
	msg_uhr[1]='0'+Stunden%10;
    4b60:	22 0f       	add	r18, r18
    4b62:	32 2f       	mov	r19, r18
    4b64:	33 0f       	add	r19, r19
    4b66:	33 0f       	add	r19, r19
    4b68:	23 0f       	add	r18, r19
    4b6a:	92 1b       	sub	r25, r18
    4b6c:	90 5d       	subi	r25, 0xD0	; 208
    4b6e:	91 83       	std	Z+1, r25	; 0x01
	msg_uhr[3]='0'+Minuten/10;
    4b70:	91 89       	ldd	r25, Z+17	; 0x11
    4b72:	98 9f       	mul	r25, r24
    4b74:	21 2d       	mov	r18, r1
    4b76:	11 24       	eor	r1, r1
    4b78:	26 95       	lsr	r18
    4b7a:	26 95       	lsr	r18
    4b7c:	26 95       	lsr	r18
    4b7e:	30 e3       	ldi	r19, 0x30	; 48
    4b80:	32 0f       	add	r19, r18
    4b82:	33 83       	std	Z+3, r19	; 0x03
	msg_uhr[4]='0'+Minuten%10;
    4b84:	22 0f       	add	r18, r18
    4b86:	32 2f       	mov	r19, r18
    4b88:	33 0f       	add	r19, r19
    4b8a:	33 0f       	add	r19, r19
    4b8c:	23 0f       	add	r18, r19
    4b8e:	92 1b       	sub	r25, r18
    4b90:	90 5d       	subi	r25, 0xD0	; 208
    4b92:	94 83       	std	Z+4, r25	; 0x04
	msg_uhr[6]='0'+Sekunden/10;
    4b94:	92 89       	ldd	r25, Z+18	; 0x12
    4b96:	98 9f       	mul	r25, r24
    4b98:	81 2d       	mov	r24, r1
    4b9a:	11 24       	eor	r1, r1
    4b9c:	86 95       	lsr	r24
    4b9e:	86 95       	lsr	r24
    4ba0:	86 95       	lsr	r24
    4ba2:	20 e3       	ldi	r18, 0x30	; 48
    4ba4:	28 0f       	add	r18, r24
    4ba6:	26 83       	std	Z+6, r18	; 0x06
	msg_uhr[7]='0'+Sekunden%10;
    4ba8:	88 0f       	add	r24, r24
    4baa:	28 2f       	mov	r18, r24
    4bac:	22 0f       	add	r18, r18
    4bae:	22 0f       	add	r18, r18
    4bb0:	82 0f       	add	r24, r18
    4bb2:	98 1b       	sub	r25, r24
    4bb4:	90 5d       	subi	r25, 0xD0	; 208
    4bb6:	97 83       	std	Z+7, r25	; 0x07
    4bb8:	08 95       	ret

00004bba <_ZN3RTC15ausgabedatumneuEv>:
}
void RTC::ausgabedatumneu(){
    4bba:	fc 01       	movw	r30, r24
	msg_dat[0]='0'+Tag/10;
    4bbc:	94 89       	ldd	r25, Z+20	; 0x14
    4bbe:	8d ec       	ldi	r24, 0xCD	; 205
    4bc0:	98 9f       	mul	r25, r24
    4bc2:	21 2d       	mov	r18, r1
    4bc4:	11 24       	eor	r1, r1
    4bc6:	26 95       	lsr	r18
    4bc8:	26 95       	lsr	r18
    4bca:	26 95       	lsr	r18
    4bcc:	30 e3       	ldi	r19, 0x30	; 48
    4bce:	32 0f       	add	r19, r18
    4bd0:	30 87       	std	Z+8, r19	; 0x08
	msg_dat[1]='0'+Tag%10;
    4bd2:	22 0f       	add	r18, r18
    4bd4:	32 2f       	mov	r19, r18
    4bd6:	33 0f       	add	r19, r19
    4bd8:	33 0f       	add	r19, r19
    4bda:	23 0f       	add	r18, r19
    4bdc:	92 1b       	sub	r25, r18
    4bde:	90 5d       	subi	r25, 0xD0	; 208
    4be0:	91 87       	std	Z+9, r25	; 0x09
	msg_dat[3]='0'+Monat/10;
    4be2:	96 89       	ldd	r25, Z+22	; 0x16
    4be4:	98 9f       	mul	r25, r24
    4be6:	21 2d       	mov	r18, r1
    4be8:	11 24       	eor	r1, r1
    4bea:	26 95       	lsr	r18
    4bec:	26 95       	lsr	r18
    4bee:	26 95       	lsr	r18
    4bf0:	30 e3       	ldi	r19, 0x30	; 48
    4bf2:	32 0f       	add	r19, r18
    4bf4:	33 87       	std	Z+11, r19	; 0x0b
	msg_dat[4]='0'+Monat%10;
    4bf6:	22 0f       	add	r18, r18
    4bf8:	32 2f       	mov	r19, r18
    4bfa:	33 0f       	add	r19, r19
    4bfc:	33 0f       	add	r19, r19
    4bfe:	23 0f       	add	r18, r19
    4c00:	92 1b       	sub	r25, r18
    4c02:	90 5d       	subi	r25, 0xD0	; 208
    4c04:	94 87       	std	Z+12, r25	; 0x0c
	msg_dat[6]='0'+Jahr/10;
    4c06:	97 89       	ldd	r25, Z+23	; 0x17
    4c08:	98 9f       	mul	r25, r24
    4c0a:	81 2d       	mov	r24, r1
    4c0c:	11 24       	eor	r1, r1
    4c0e:	86 95       	lsr	r24
    4c10:	86 95       	lsr	r24
    4c12:	86 95       	lsr	r24
    4c14:	20 e3       	ldi	r18, 0x30	; 48
    4c16:	28 0f       	add	r18, r24
    4c18:	26 87       	std	Z+14, r18	; 0x0e
	msg_dat[7]='0'+Jahr%10;
    4c1a:	88 0f       	add	r24, r24
    4c1c:	28 2f       	mov	r18, r24
    4c1e:	22 0f       	add	r18, r18
    4c20:	22 0f       	add	r18, r18
    4c22:	82 0f       	add	r24, r18
    4c24:	98 1b       	sub	r25, r24
    4c26:	90 5d       	subi	r25, 0xD0	; 208
    4c28:	97 87       	std	Z+15, r25	; 0x0f
    4c2a:	08 95       	ret

00004c2c <_ZN3RTCC1Ev>:


#include "RTC.h"

// default constructor
RTC::RTC()
    4c2c:	cf 93       	push	r28
    4c2e:	df 93       	push	r29
    4c30:	ec 01       	movw	r28, r24
{
	Sekunden=0;
    4c32:	1a 8a       	std	Y+18, r1	; 0x12
	HundSekunden=0;
    4c34:	1b 8a       	std	Y+19, r1	; 0x13
	Minuten=0;
    4c36:	19 8a       	std	Y+17, r1	; 0x11
	Stunden=0;
    4c38:	18 8a       	std	Y+16, r1	; 0x10
	Tag=0;
    4c3a:	1c 8a       	std	Y+20, r1	; 0x14
	Monat=0;
    4c3c:	1e 8a       	std	Y+22, r1	; 0x16
	Jahr=0;
    4c3e:	1f 8a       	std	Y+23, r1	; 0x17
	WTag=0;
    4c40:	1d 8a       	std	Y+21, r1	; 0x15
	WMinuten=40;
    4c42:	88 e2       	ldi	r24, 0x28	; 40
    4c44:	89 8f       	std	Y+25, r24	; 0x19
	WStunden=10;
    4c46:	8a e0       	ldi	r24, 0x0A	; 10
    4c48:	8a 8f       	std	Y+26, r24	; 0x1a
    4c4a:	de 01       	movw	r26, r28
    4c4c:	fe 01       	movw	r30, r28
    4c4e:	38 96       	adiw	r30, 0x08	; 8
	for(uint8_t i=0;i<bitsderrtc;i++){
    4c50:	80 e0       	ldi	r24, 0x00	; 0
		msg_uhr[i]=0;
    4c52:	1d 92       	st	X+, r1
		msg_dat[i]=0;
    4c54:	11 92       	st	Z+, r1
	Monat=0;
	Jahr=0;
	WTag=0;
	WMinuten=40;
	WStunden=10;
	for(uint8_t i=0;i<bitsderrtc;i++){
    4c56:	8f 5f       	subi	r24, 0xFF	; 255
    4c58:	88 30       	cpi	r24, 0x08	; 8
    4c5a:	d9 f7       	brne	.-10     	; 0x4c52 <_ZN3RTCC1Ev+0x26>
		msg_uhr[i]=0;
		msg_dat[i]=0;
	}
	//Einstellungen des Ausgabebuffers
	msg_uhr[2]=':';
    4c5c:	8a e3       	ldi	r24, 0x3A	; 58
    4c5e:	8a 83       	std	Y+2, r24	; 0x02
	msg_uhr[5]=':';
    4c60:	8d 83       	std	Y+5, r24	; 0x05
	msg_dat[2]='.';
    4c62:	8e e2       	ldi	r24, 0x2E	; 46
    4c64:	8a 87       	std	Y+10, r24	; 0x0a
	msg_dat[5]='.';
    4c66:	8d 87       	std	Y+13, r24	; 0x0d
	ausgabezeitneu();
    4c68:	ce 01       	movw	r24, r28
    4c6a:	0e 94 a4 25 	call	0x4b48	; 0x4b48 <_ZN3RTC14ausgabezeitneuEv>
	ausgabedatumneu();
    4c6e:	ce 01       	movw	r24, r28
    4c70:	0e 94 dd 25 	call	0x4bba	; 0x4bba <_ZN3RTC15ausgabedatumneuEv>
} //RTC
    4c74:	df 91       	pop	r29
    4c76:	cf 91       	pop	r28
    4c78:	08 95       	ret

00004c7a <_ZN3RTC8kalenderEv>:
	ausgabezeitneu();
	return 0;
}

void RTC::kalender(){
	if (Monat==4||Monat==6||Monat==9||Monat==11)
    4c7a:	fc 01       	movw	r30, r24
    4c7c:	26 89       	ldd	r18, Z+22	; 0x16
    4c7e:	32 2f       	mov	r19, r18
    4c80:	3d 7f       	andi	r19, 0xFD	; 253
    4c82:	34 30       	cpi	r19, 0x04	; 4
    4c84:	11 f0       	breq	.+4      	; 0x4c8a <_ZN3RTC8kalenderEv+0x10>
    4c86:	39 30       	cpi	r19, 0x09	; 9
    4c88:	91 f4       	brne	.+36     	; 0x4cae <_ZN3RTC8kalenderEv+0x34>
	{
		if (Tag>=31)
    4c8a:	fc 01       	movw	r30, r24
    4c8c:	34 89       	ldd	r19, Z+20	; 0x14
    4c8e:	3f 31       	cpi	r19, 0x1F	; 31
    4c90:	b0 f1       	brcs	.+108    	; 0x4cfe <_ZN3RTC8kalenderEv+0x84>
		{
			Tag=1;
    4c92:	31 e0       	ldi	r19, 0x01	; 1
    4c94:	34 8b       	std	Z+20, r19	; 0x14
			Monat++;
    4c96:	2f 5f       	subi	r18, 0xFF	; 255
			if (Monat>=13)
    4c98:	2d 30       	cpi	r18, 0x0D	; 13
    4c9a:	10 f4       	brcc	.+4      	; 0x4ca0 <_ZN3RTC8kalenderEv+0x26>
	if (Monat==4||Monat==6||Monat==9||Monat==11)
	{
		if (Tag>=31)
		{
			Tag=1;
			Monat++;
    4c9c:	26 8b       	std	Z+22, r18	; 0x16
    4c9e:	2f c0       	rjmp	.+94     	; 0x4cfe <_ZN3RTC8kalenderEv+0x84>
			if (Monat>=13)
			{
				Monat=1;
    4ca0:	21 e0       	ldi	r18, 0x01	; 1
    4ca2:	fc 01       	movw	r30, r24
    4ca4:	26 8b       	std	Z+22, r18	; 0x16
				Jahr++;
    4ca6:	27 89       	ldd	r18, Z+23	; 0x17
    4ca8:	2f 5f       	subi	r18, 0xFF	; 255
    4caa:	27 8b       	std	Z+23, r18	; 0x17
    4cac:	28 c0       	rjmp	.+80     	; 0x4cfe <_ZN3RTC8kalenderEv+0x84>
			}
		}
	}
	else if (Monat==2)
    4cae:	22 30       	cpi	r18, 0x02	; 2
    4cb0:	a9 f4       	brne	.+42     	; 0x4cdc <_ZN3RTC8kalenderEv+0x62>
	{
		if (Jahr%4==0)
    4cb2:	fc 01       	movw	r30, r24
    4cb4:	27 89       	ldd	r18, Z+23	; 0x17
    4cb6:	23 70       	andi	r18, 0x03	; 3
    4cb8:	41 f4       	brne	.+16     	; 0x4cca <_ZN3RTC8kalenderEv+0x50>
		{
			if (Tag>=30)
    4cba:	24 89       	ldd	r18, Z+20	; 0x14
    4cbc:	2e 31       	cpi	r18, 0x1E	; 30
    4cbe:	f8 f0       	brcs	.+62     	; 0x4cfe <_ZN3RTC8kalenderEv+0x84>
			{
				Tag=1;
    4cc0:	21 e0       	ldi	r18, 0x01	; 1
    4cc2:	24 8b       	std	Z+20, r18	; 0x14
				Monat++;
    4cc4:	23 e0       	ldi	r18, 0x03	; 3
    4cc6:	26 8b       	std	Z+22, r18	; 0x16
    4cc8:	1a c0       	rjmp	.+52     	; 0x4cfe <_ZN3RTC8kalenderEv+0x84>
					Jahr++;
				}
			}
		}
		else{
			if (Tag>=29)
    4cca:	fc 01       	movw	r30, r24
    4ccc:	24 89       	ldd	r18, Z+20	; 0x14
    4cce:	2d 31       	cpi	r18, 0x1D	; 29
    4cd0:	b0 f0       	brcs	.+44     	; 0x4cfe <_ZN3RTC8kalenderEv+0x84>
			{
				Tag=1;
    4cd2:	21 e0       	ldi	r18, 0x01	; 1
    4cd4:	24 8b       	std	Z+20, r18	; 0x14
				Monat++;
    4cd6:	23 e0       	ldi	r18, 0x03	; 3
    4cd8:	26 8b       	std	Z+22, r18	; 0x16
    4cda:	11 c0       	rjmp	.+34     	; 0x4cfe <_ZN3RTC8kalenderEv+0x84>
				}
			}
		}
	}
	else{
		if (Tag>=32)
    4cdc:	fc 01       	movw	r30, r24
    4cde:	34 89       	ldd	r19, Z+20	; 0x14
    4ce0:	30 32       	cpi	r19, 0x20	; 32
    4ce2:	68 f0       	brcs	.+26     	; 0x4cfe <_ZN3RTC8kalenderEv+0x84>
		{
			Tag=1;
    4ce4:	31 e0       	ldi	r19, 0x01	; 1
    4ce6:	34 8b       	std	Z+20, r19	; 0x14
			Monat++;
    4ce8:	2f 5f       	subi	r18, 0xFF	; 255
			if (Monat>=13)
    4cea:	2d 30       	cpi	r18, 0x0D	; 13
    4cec:	10 f4       	brcc	.+4      	; 0x4cf2 <_ZN3RTC8kalenderEv+0x78>
	}
	else{
		if (Tag>=32)
		{
			Tag=1;
			Monat++;
    4cee:	26 8b       	std	Z+22, r18	; 0x16
    4cf0:	06 c0       	rjmp	.+12     	; 0x4cfe <_ZN3RTC8kalenderEv+0x84>
			if (Monat>=13)
			{
				Monat=1;
    4cf2:	21 e0       	ldi	r18, 0x01	; 1
    4cf4:	fc 01       	movw	r30, r24
    4cf6:	26 8b       	std	Z+22, r18	; 0x16
				Jahr++;
    4cf8:	27 89       	ldd	r18, Z+23	; 0x17
    4cfa:	2f 5f       	subi	r18, 0xFF	; 255
    4cfc:	27 8b       	std	Z+23, r18	; 0x17
			}
		}
	}
	ausgabedatumneu();
    4cfe:	0e 94 dd 25 	call	0x4bba	; 0x4bba <_ZN3RTC15ausgabedatumneuEv>
    4d02:	08 95       	ret

00004d04 <_ZN3RTC4zeitEv>:
	}
	ausgabezeitneu();
	return 0;
}

uint8_t RTC::zeit(){
    4d04:	cf 93       	push	r28
    4d06:	df 93       	push	r29
    4d08:	ec 01       	movw	r28, r24
	//Sekunden++; sitzt im Vektor um Taster besser entprellen zu koennen
	if (Sekunden >= 60 && Sekunden <=200){
    4d0a:	8a 89       	ldd	r24, Y+18	; 0x12
    4d0c:	8c 53       	subi	r24, 0x3C	; 60
    4d0e:	8d 38       	cpi	r24, 0x8D	; 141
    4d10:	d0 f4       	brcc	.+52     	; 0x4d46 <_ZN3RTC4zeitEv+0x42>
		Sekunden = 0;
    4d12:	1a 8a       	std	Y+18, r1	; 0x12
		Minuten++;
    4d14:	89 89       	ldd	r24, Y+17	; 0x11
    4d16:	8f 5f       	subi	r24, 0xFF	; 255
    4d18:	89 8b       	std	Y+17, r24	; 0x11
		interupts |= (1<<minuteninterupt);
    4d1a:	98 8d       	ldd	r25, Y+24	; 0x18
    4d1c:	94 60       	ori	r25, 0x04	; 4
    4d1e:	98 8f       	std	Y+24, r25	; 0x18
		if(Minuten >= 60){
    4d20:	8c 33       	cpi	r24, 0x3C	; 60
    4d22:	70 f0       	brcs	.+28     	; 0x4d40 <_ZN3RTC4zeitEv+0x3c>
			Minuten = 0;
    4d24:	19 8a       	std	Y+17, r1	; 0x11
			Stunden++;
    4d26:	88 89       	ldd	r24, Y+16	; 0x10
    4d28:	8f 5f       	subi	r24, 0xFF	; 255
			if(Stunden >= 24){
    4d2a:	88 31       	cpi	r24, 0x18	; 24
    4d2c:	10 f4       	brcc	.+4      	; 0x4d32 <_ZN3RTC4zeitEv+0x2e>
		Sekunden = 0;
		Minuten++;
		interupts |= (1<<minuteninterupt);
		if(Minuten >= 60){
			Minuten = 0;
			Stunden++;
    4d2e:	88 8b       	std	Y+16, r24	; 0x10
    4d30:	07 c0       	rjmp	.+14     	; 0x4d40 <_ZN3RTC4zeitEv+0x3c>
			if(Stunden >= 24){
				Stunden = 0;
    4d32:	18 8a       	std	Y+16, r1	; 0x10
				Tag++;
    4d34:	8c 89       	ldd	r24, Y+20	; 0x14
    4d36:	8f 5f       	subi	r24, 0xFF	; 255
    4d38:	8c 8b       	std	Y+20, r24	; 0x14
				kalender();
    4d3a:	ce 01       	movw	r24, r28
    4d3c:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <_ZN3RTC8kalenderEv>
			}
		}
		Wecker();
    4d40:	ce 01       	movw	r24, r28
    4d42:	0e 94 93 25 	call	0x4b26	; 0x4b26 <_ZN3RTC6WeckerEv>
	}
	ausgabezeitneu();
    4d46:	ce 01       	movw	r24, r28
    4d48:	0e 94 a4 25 	call	0x4b48	; 0x4b48 <_ZN3RTC14ausgabezeitneuEv>
	return 0;
}
    4d4c:	80 e0       	ldi	r24, 0x00	; 0
    4d4e:	df 91       	pop	r29
    4d50:	cf 91       	pop	r28
    4d52:	08 95       	ret

00004d54 <_ZN3RTC10dummyeinstEv>:
	msg_dat[4]='0'+Monat%10;
	msg_dat[6]='0'+Jahr/10;
	msg_dat[7]='0'+Jahr%10;
}

void RTC::dummyeinst(){
    4d54:	cf 93       	push	r28
    4d56:	df 93       	push	r29
    4d58:	ec 01       	movw	r28, r24
	Stunden=10;
    4d5a:	8a e0       	ldi	r24, 0x0A	; 10
    4d5c:	88 8b       	std	Y+16, r24	; 0x10
	Minuten=30;
    4d5e:	8e e1       	ldi	r24, 0x1E	; 30
    4d60:	89 8b       	std	Y+17, r24	; 0x11
	Tag=7;
    4d62:	87 e0       	ldi	r24, 0x07	; 7
    4d64:	8c 8b       	std	Y+20, r24	; 0x14
	Monat=9;
    4d66:	89 e0       	ldi	r24, 0x09	; 9
    4d68:	8e 8b       	std	Y+22, r24	; 0x16
	Jahr=15;
    4d6a:	8f e0       	ldi	r24, 0x0F	; 15
    4d6c:	8f 8b       	std	Y+23, r24	; 0x17
	ausgabedatumneu();
    4d6e:	ce 01       	movw	r24, r28
    4d70:	0e 94 dd 25 	call	0x4bba	; 0x4bba <_ZN3RTC15ausgabedatumneuEv>
	ausgabezeitneu();
    4d74:	ce 01       	movw	r24, r28
    4d76:	0e 94 a4 25 	call	0x4b48	; 0x4b48 <_ZN3RTC14ausgabezeitneuEv>
}
    4d7a:	df 91       	pop	r29
    4d7c:	cf 91       	pop	r28
    4d7e:	08 95       	ret

00004d80 <_ZN3RTC8RTCstartEv>:

void RTC::RTCstart(){
    4d80:	fc 01       	movw	r30, r24
	//Einstellungen des Ausgabebuffers
	msg_uhr[0]='0';
    4d82:	80 e3       	ldi	r24, 0x30	; 48
    4d84:	80 83       	st	Z, r24
	msg_uhr[1]='0';
    4d86:	81 83       	std	Z+1, r24	; 0x01
	msg_uhr[2]=':';
    4d88:	9a e3       	ldi	r25, 0x3A	; 58
    4d8a:	92 83       	std	Z+2, r25	; 0x02
	msg_uhr[3]='0';
    4d8c:	83 83       	std	Z+3, r24	; 0x03
	msg_uhr[4]='0';
    4d8e:	84 83       	std	Z+4, r24	; 0x04
	msg_uhr[5]=':';
    4d90:	95 83       	std	Z+5, r25	; 0x05
	msg_uhr[6]='0';
    4d92:	86 83       	std	Z+6, r24	; 0x06
	msg_uhr[7]='0';
    4d94:	87 83       	std	Z+7, r24	; 0x07
	//Timer2 als 1ms Timer fuer die RTC
	//asynchron mit 32.768 kHz (noch synchrom)
	TCNT2 = TIMER2RTCTIME;
    4d96:	10 92 b2 00 	sts	0x00B2, r1
	ASSR |= (1<<AS2);
    4d9a:	e6 eb       	ldi	r30, 0xB6	; 182
    4d9c:	f0 e0       	ldi	r31, 0x00	; 0
    4d9e:	80 81       	ld	r24, Z
    4da0:	80 62       	ori	r24, 0x20	; 32
    4da2:	80 83       	st	Z, r24
	TIMSK2 = (1<<TOIE2);
    4da4:	81 e0       	ldi	r24, 0x01	; 1
    4da6:	80 93 70 00 	sts	0x0070, r24
	TCCR2B = (1<<CS22) | (1<<CS20);		//Vorteiler 256
    4daa:	85 e0       	ldi	r24, 0x05	; 5
    4dac:	80 93 b1 00 	sts	0x00B1, r24
    4db0:	08 95       	ret

00004db2 <_ZN3RTC7RTCstopEv>:
}

void RTC::RTCstop(){
	TCCR2B &= ~((1<<CS22) | (1<<CS21));
    4db2:	e1 eb       	ldi	r30, 0xB1	; 177
    4db4:	f0 e0       	ldi	r31, 0x00	; 0
    4db6:	80 81       	ld	r24, Z
    4db8:	89 7f       	andi	r24, 0xF9	; 249
    4dba:	80 83       	st	Z, r24
    4dbc:	08 95       	ret

00004dbe <_ZN3RTC5timerEv>:
}

uint8_t RTC::timer(){
    4dbe:	fc 01       	movw	r30, r24
	if (Sekunden>60)
    4dc0:	82 89       	ldd	r24, Z+18	; 0x12
    4dc2:	8d 33       	cpi	r24, 0x3D	; 61
    4dc4:	b8 f0       	brcs	.+46     	; 0x4df4 <_ZN3RTC5timerEv+0x36>
	{
		Sekunden=59;
    4dc6:	8b e3       	ldi	r24, 0x3B	; 59
    4dc8:	82 8b       	std	Z+18, r24	; 0x12
		Minuten--;
    4dca:	81 89       	ldd	r24, Z+17	; 0x11
    4dcc:	81 50       	subi	r24, 0x01	; 1
		if (Minuten>60)
    4dce:	8d 33       	cpi	r24, 0x3D	; 61
    4dd0:	18 f4       	brcc	.+6      	; 0x4dd8 <_ZN3RTC5timerEv+0x1a>

uint8_t RTC::timer(){
	if (Sekunden>60)
	{
		Sekunden=59;
		Minuten--;
    4dd2:	81 8b       	std	Z+17, r24	; 0x11
				Sekunden=0;
				return 1;
			}
		}
	}
	return 0;
    4dd4:	80 e0       	ldi	r24, 0x00	; 0
    4dd6:	08 95       	ret
	{
		Sekunden=59;
		Minuten--;
		if (Minuten>60)
		{
			Minuten=59;
    4dd8:	8b e3       	ldi	r24, 0x3B	; 59
    4dda:	81 8b       	std	Z+17, r24	; 0x11
			Stunden--;
    4ddc:	80 89       	ldd	r24, Z+16	; 0x10
    4dde:	81 50       	subi	r24, 0x01	; 1
			if (Stunden>24)
    4de0:	89 31       	cpi	r24, 0x19	; 25
    4de2:	18 f4       	brcc	.+6      	; 0x4dea <_ZN3RTC5timerEv+0x2c>
		Sekunden=59;
		Minuten--;
		if (Minuten>60)
		{
			Minuten=59;
			Stunden--;
    4de4:	80 8b       	std	Z+16, r24	; 0x10
				Sekunden=0;
				return 1;
			}
		}
	}
	return 0;
    4de6:	80 e0       	ldi	r24, 0x00	; 0
    4de8:	08 95       	ret
		{
			Minuten=59;
			Stunden--;
			if (Stunden>24)
			{
				Stunden=0;
    4dea:	10 8a       	std	Z+16, r1	; 0x10
				Minuten=0;
    4dec:	11 8a       	std	Z+17, r1	; 0x11
				Sekunden=0;
    4dee:	12 8a       	std	Z+18, r1	; 0x12
				return 1;
    4df0:	81 e0       	ldi	r24, 0x01	; 1
    4df2:	08 95       	ret
			}
		}
	}
	return 0;
    4df4:	80 e0       	ldi	r24, 0x00	; 0
}
    4df6:	08 95       	ret

00004df8 <__subsf3>:
    4df8:	50 58       	subi	r21, 0x80	; 128

00004dfa <__addsf3>:
    4dfa:	bb 27       	eor	r27, r27
    4dfc:	aa 27       	eor	r26, r26
    4dfe:	0e d0       	rcall	.+28     	; 0x4e1c <__addsf3x>
    4e00:	27 c2       	rjmp	.+1102   	; 0x5250 <__fp_round>
    4e02:	f0 d1       	rcall	.+992    	; 0x51e4 <__fp_pscA>
    4e04:	30 f0       	brcs	.+12     	; 0x4e12 <__addsf3+0x18>
    4e06:	f5 d1       	rcall	.+1002   	; 0x51f2 <__fp_pscB>
    4e08:	20 f0       	brcs	.+8      	; 0x4e12 <__addsf3+0x18>
    4e0a:	31 f4       	brne	.+12     	; 0x4e18 <__addsf3+0x1e>
    4e0c:	9f 3f       	cpi	r25, 0xFF	; 255
    4e0e:	11 f4       	brne	.+4      	; 0x4e14 <__addsf3+0x1a>
    4e10:	1e f4       	brtc	.+6      	; 0x4e18 <__addsf3+0x1e>
    4e12:	c0 c1       	rjmp	.+896    	; 0x5194 <__fp_nan>
    4e14:	0e f4       	brtc	.+2      	; 0x4e18 <__addsf3+0x1e>
    4e16:	e0 95       	com	r30
    4e18:	e7 fb       	bst	r30, 7
    4e1a:	b6 c1       	rjmp	.+876    	; 0x5188 <__fp_inf>

00004e1c <__addsf3x>:
    4e1c:	e9 2f       	mov	r30, r25
    4e1e:	3a d2       	rcall	.+1140   	; 0x5294 <__fp_split3>
    4e20:	80 f3       	brcs	.-32     	; 0x4e02 <__addsf3+0x8>
    4e22:	ba 17       	cp	r27, r26
    4e24:	62 07       	cpc	r22, r18
    4e26:	73 07       	cpc	r23, r19
    4e28:	84 07       	cpc	r24, r20
    4e2a:	95 07       	cpc	r25, r21
    4e2c:	18 f0       	brcs	.+6      	; 0x4e34 <__addsf3x+0x18>
    4e2e:	71 f4       	brne	.+28     	; 0x4e4c <__addsf3x+0x30>
    4e30:	9e f5       	brtc	.+102    	; 0x4e98 <__addsf3x+0x7c>
    4e32:	52 c2       	rjmp	.+1188   	; 0x52d8 <__fp_zero>
    4e34:	0e f4       	brtc	.+2      	; 0x4e38 <__addsf3x+0x1c>
    4e36:	e0 95       	com	r30
    4e38:	0b 2e       	mov	r0, r27
    4e3a:	ba 2f       	mov	r27, r26
    4e3c:	a0 2d       	mov	r26, r0
    4e3e:	0b 01       	movw	r0, r22
    4e40:	b9 01       	movw	r22, r18
    4e42:	90 01       	movw	r18, r0
    4e44:	0c 01       	movw	r0, r24
    4e46:	ca 01       	movw	r24, r20
    4e48:	a0 01       	movw	r20, r0
    4e4a:	11 24       	eor	r1, r1
    4e4c:	ff 27       	eor	r31, r31
    4e4e:	59 1b       	sub	r21, r25
    4e50:	99 f0       	breq	.+38     	; 0x4e78 <__addsf3x+0x5c>
    4e52:	59 3f       	cpi	r21, 0xF9	; 249
    4e54:	50 f4       	brcc	.+20     	; 0x4e6a <__addsf3x+0x4e>
    4e56:	50 3e       	cpi	r21, 0xE0	; 224
    4e58:	68 f1       	brcs	.+90     	; 0x4eb4 <__addsf3x+0x98>
    4e5a:	1a 16       	cp	r1, r26
    4e5c:	f0 40       	sbci	r31, 0x00	; 0
    4e5e:	a2 2f       	mov	r26, r18
    4e60:	23 2f       	mov	r18, r19
    4e62:	34 2f       	mov	r19, r20
    4e64:	44 27       	eor	r20, r20
    4e66:	58 5f       	subi	r21, 0xF8	; 248
    4e68:	f3 cf       	rjmp	.-26     	; 0x4e50 <__addsf3x+0x34>
    4e6a:	46 95       	lsr	r20
    4e6c:	37 95       	ror	r19
    4e6e:	27 95       	ror	r18
    4e70:	a7 95       	ror	r26
    4e72:	f0 40       	sbci	r31, 0x00	; 0
    4e74:	53 95       	inc	r21
    4e76:	c9 f7       	brne	.-14     	; 0x4e6a <__addsf3x+0x4e>
    4e78:	7e f4       	brtc	.+30     	; 0x4e98 <__addsf3x+0x7c>
    4e7a:	1f 16       	cp	r1, r31
    4e7c:	ba 0b       	sbc	r27, r26
    4e7e:	62 0b       	sbc	r22, r18
    4e80:	73 0b       	sbc	r23, r19
    4e82:	84 0b       	sbc	r24, r20
    4e84:	ba f0       	brmi	.+46     	; 0x4eb4 <__addsf3x+0x98>
    4e86:	91 50       	subi	r25, 0x01	; 1
    4e88:	a1 f0       	breq	.+40     	; 0x4eb2 <__addsf3x+0x96>
    4e8a:	ff 0f       	add	r31, r31
    4e8c:	bb 1f       	adc	r27, r27
    4e8e:	66 1f       	adc	r22, r22
    4e90:	77 1f       	adc	r23, r23
    4e92:	88 1f       	adc	r24, r24
    4e94:	c2 f7       	brpl	.-16     	; 0x4e86 <__addsf3x+0x6a>
    4e96:	0e c0       	rjmp	.+28     	; 0x4eb4 <__addsf3x+0x98>
    4e98:	ba 0f       	add	r27, r26
    4e9a:	62 1f       	adc	r22, r18
    4e9c:	73 1f       	adc	r23, r19
    4e9e:	84 1f       	adc	r24, r20
    4ea0:	48 f4       	brcc	.+18     	; 0x4eb4 <__addsf3x+0x98>
    4ea2:	87 95       	ror	r24
    4ea4:	77 95       	ror	r23
    4ea6:	67 95       	ror	r22
    4ea8:	b7 95       	ror	r27
    4eaa:	f7 95       	ror	r31
    4eac:	9e 3f       	cpi	r25, 0xFE	; 254
    4eae:	08 f0       	brcs	.+2      	; 0x4eb2 <__addsf3x+0x96>
    4eb0:	b3 cf       	rjmp	.-154    	; 0x4e18 <__addsf3+0x1e>
    4eb2:	93 95       	inc	r25
    4eb4:	88 0f       	add	r24, r24
    4eb6:	08 f0       	brcs	.+2      	; 0x4eba <__addsf3x+0x9e>
    4eb8:	99 27       	eor	r25, r25
    4eba:	ee 0f       	add	r30, r30
    4ebc:	97 95       	ror	r25
    4ebe:	87 95       	ror	r24
    4ec0:	08 95       	ret
    4ec2:	90 d1       	rcall	.+800    	; 0x51e4 <__fp_pscA>
    4ec4:	58 f0       	brcs	.+22     	; 0x4edc <__addsf3x+0xc0>
    4ec6:	80 e8       	ldi	r24, 0x80	; 128
    4ec8:	91 e0       	ldi	r25, 0x01	; 1
    4eca:	09 f4       	brne	.+2      	; 0x4ece <__addsf3x+0xb2>
    4ecc:	9e ef       	ldi	r25, 0xFE	; 254
    4ece:	91 d1       	rcall	.+802    	; 0x51f2 <__fp_pscB>
    4ed0:	28 f0       	brcs	.+10     	; 0x4edc <__addsf3x+0xc0>
    4ed2:	40 e8       	ldi	r20, 0x80	; 128
    4ed4:	51 e0       	ldi	r21, 0x01	; 1
    4ed6:	59 f4       	brne	.+22     	; 0x4eee <atan2+0xe>
    4ed8:	5e ef       	ldi	r21, 0xFE	; 254
    4eda:	09 c0       	rjmp	.+18     	; 0x4eee <atan2+0xe>
    4edc:	5b c1       	rjmp	.+694    	; 0x5194 <__fp_nan>
    4ede:	fc c1       	rjmp	.+1016   	; 0x52d8 <__fp_zero>

00004ee0 <atan2>:
    4ee0:	e9 2f       	mov	r30, r25
    4ee2:	e0 78       	andi	r30, 0x80	; 128
    4ee4:	d7 d1       	rcall	.+942    	; 0x5294 <__fp_split3>
    4ee6:	68 f3       	brcs	.-38     	; 0x4ec2 <__addsf3x+0xa6>
    4ee8:	09 2e       	mov	r0, r25
    4eea:	05 2a       	or	r0, r21
    4eec:	c1 f3       	breq	.-16     	; 0x4ede <__addsf3x+0xc2>
    4eee:	26 17       	cp	r18, r22
    4ef0:	37 07       	cpc	r19, r23
    4ef2:	48 07       	cpc	r20, r24
    4ef4:	59 07       	cpc	r21, r25
    4ef6:	38 f0       	brcs	.+14     	; 0x4f06 <atan2+0x26>
    4ef8:	0e 2e       	mov	r0, r30
    4efa:	07 f8       	bld	r0, 7
    4efc:	e0 25       	eor	r30, r0
    4efe:	69 f0       	breq	.+26     	; 0x4f1a <atan2+0x3a>
    4f00:	e0 25       	eor	r30, r0
    4f02:	e0 64       	ori	r30, 0x40	; 64
    4f04:	0a c0       	rjmp	.+20     	; 0x4f1a <atan2+0x3a>
    4f06:	ef 63       	ori	r30, 0x3F	; 63
    4f08:	07 f8       	bld	r0, 7
    4f0a:	00 94       	com	r0
    4f0c:	07 fa       	bst	r0, 7
    4f0e:	db 01       	movw	r26, r22
    4f10:	b9 01       	movw	r22, r18
    4f12:	9d 01       	movw	r18, r26
    4f14:	dc 01       	movw	r26, r24
    4f16:	ca 01       	movw	r24, r20
    4f18:	ad 01       	movw	r20, r26
    4f1a:	ef 93       	push	r30
    4f1c:	4a d0       	rcall	.+148    	; 0x4fb2 <__divsf3_pse>
    4f1e:	98 d1       	rcall	.+816    	; 0x5250 <__fp_round>
    4f20:	0a d0       	rcall	.+20     	; 0x4f36 <atan>
    4f22:	5f 91       	pop	r21
    4f24:	55 23       	and	r21, r21
    4f26:	31 f0       	breq	.+12     	; 0x4f34 <atan2+0x54>
    4f28:	2b ed       	ldi	r18, 0xDB	; 219
    4f2a:	3f e0       	ldi	r19, 0x0F	; 15
    4f2c:	49 e4       	ldi	r20, 0x49	; 73
    4f2e:	50 fd       	sbrc	r21, 0
    4f30:	49 ec       	ldi	r20, 0xC9	; 201
    4f32:	63 cf       	rjmp	.-314    	; 0x4dfa <__addsf3>
    4f34:	08 95       	ret

00004f36 <atan>:
    4f36:	df 93       	push	r29
    4f38:	dd 27       	eor	r29, r29
    4f3a:	b9 2f       	mov	r27, r25
    4f3c:	bf 77       	andi	r27, 0x7F	; 127
    4f3e:	40 e8       	ldi	r20, 0x80	; 128
    4f40:	5f e3       	ldi	r21, 0x3F	; 63
    4f42:	16 16       	cp	r1, r22
    4f44:	17 06       	cpc	r1, r23
    4f46:	48 07       	cpc	r20, r24
    4f48:	5b 07       	cpc	r21, r27
    4f4a:	10 f4       	brcc	.+4      	; 0x4f50 <atan+0x1a>
    4f4c:	d9 2f       	mov	r29, r25
    4f4e:	cf d1       	rcall	.+926    	; 0x52ee <inverse>
    4f50:	9f 93       	push	r25
    4f52:	8f 93       	push	r24
    4f54:	7f 93       	push	r23
    4f56:	6f 93       	push	r22
    4f58:	7f d2       	rcall	.+1278   	; 0x5458 <square>
    4f5a:	ea e9       	ldi	r30, 0x9A	; 154
    4f5c:	f0 e0       	ldi	r31, 0x00	; 0
    4f5e:	1d d1       	rcall	.+570    	; 0x519a <__fp_powser>
    4f60:	77 d1       	rcall	.+750    	; 0x5250 <__fp_round>
    4f62:	2f 91       	pop	r18
    4f64:	3f 91       	pop	r19
    4f66:	4f 91       	pop	r20
    4f68:	5f 91       	pop	r21
    4f6a:	19 d2       	rcall	.+1074   	; 0x539e <__mulsf3x>
    4f6c:	dd 23       	and	r29, r29
    4f6e:	49 f0       	breq	.+18     	; 0x4f82 <atan+0x4c>
    4f70:	90 58       	subi	r25, 0x80	; 128
    4f72:	a2 ea       	ldi	r26, 0xA2	; 162
    4f74:	2a ed       	ldi	r18, 0xDA	; 218
    4f76:	3f e0       	ldi	r19, 0x0F	; 15
    4f78:	49 ec       	ldi	r20, 0xC9	; 201
    4f7a:	5f e3       	ldi	r21, 0x3F	; 63
    4f7c:	d0 78       	andi	r29, 0x80	; 128
    4f7e:	5d 27       	eor	r21, r29
    4f80:	4d df       	rcall	.-358    	; 0x4e1c <__addsf3x>
    4f82:	df 91       	pop	r29
    4f84:	65 c1       	rjmp	.+714    	; 0x5250 <__fp_round>

00004f86 <__cmpsf2>:
    4f86:	dc d0       	rcall	.+440    	; 0x5140 <__fp_cmp>
    4f88:	08 f4       	brcc	.+2      	; 0x4f8c <__cmpsf2+0x6>
    4f8a:	81 e0       	ldi	r24, 0x01	; 1
    4f8c:	08 95       	ret

00004f8e <cos>:
    4f8e:	39 d1       	rcall	.+626    	; 0x5202 <__fp_rempio2>
    4f90:	e3 95       	inc	r30
    4f92:	6f c1       	rjmp	.+734    	; 0x5272 <__fp_sinus>

00004f94 <__divsf3>:
    4f94:	0c d0       	rcall	.+24     	; 0x4fae <__divsf3x>
    4f96:	5c c1       	rjmp	.+696    	; 0x5250 <__fp_round>
    4f98:	2c d1       	rcall	.+600    	; 0x51f2 <__fp_pscB>
    4f9a:	40 f0       	brcs	.+16     	; 0x4fac <__divsf3+0x18>
    4f9c:	23 d1       	rcall	.+582    	; 0x51e4 <__fp_pscA>
    4f9e:	30 f0       	brcs	.+12     	; 0x4fac <__divsf3+0x18>
    4fa0:	21 f4       	brne	.+8      	; 0x4faa <__divsf3+0x16>
    4fa2:	5f 3f       	cpi	r21, 0xFF	; 255
    4fa4:	19 f0       	breq	.+6      	; 0x4fac <__divsf3+0x18>
    4fa6:	f0 c0       	rjmp	.+480    	; 0x5188 <__fp_inf>
    4fa8:	51 11       	cpse	r21, r1
    4faa:	97 c1       	rjmp	.+814    	; 0x52da <__fp_szero>
    4fac:	f3 c0       	rjmp	.+486    	; 0x5194 <__fp_nan>

00004fae <__divsf3x>:
    4fae:	72 d1       	rcall	.+740    	; 0x5294 <__fp_split3>
    4fb0:	98 f3       	brcs	.-26     	; 0x4f98 <__divsf3+0x4>

00004fb2 <__divsf3_pse>:
    4fb2:	99 23       	and	r25, r25
    4fb4:	c9 f3       	breq	.-14     	; 0x4fa8 <__divsf3+0x14>
    4fb6:	55 23       	and	r21, r21
    4fb8:	b1 f3       	breq	.-20     	; 0x4fa6 <__divsf3+0x12>
    4fba:	95 1b       	sub	r25, r21
    4fbc:	55 0b       	sbc	r21, r21
    4fbe:	bb 27       	eor	r27, r27
    4fc0:	aa 27       	eor	r26, r26
    4fc2:	62 17       	cp	r22, r18
    4fc4:	73 07       	cpc	r23, r19
    4fc6:	84 07       	cpc	r24, r20
    4fc8:	38 f0       	brcs	.+14     	; 0x4fd8 <__divsf3_pse+0x26>
    4fca:	9f 5f       	subi	r25, 0xFF	; 255
    4fcc:	5f 4f       	sbci	r21, 0xFF	; 255
    4fce:	22 0f       	add	r18, r18
    4fd0:	33 1f       	adc	r19, r19
    4fd2:	44 1f       	adc	r20, r20
    4fd4:	aa 1f       	adc	r26, r26
    4fd6:	a9 f3       	breq	.-22     	; 0x4fc2 <__divsf3_pse+0x10>
    4fd8:	33 d0       	rcall	.+102    	; 0x5040 <__divsf3_pse+0x8e>
    4fda:	0e 2e       	mov	r0, r30
    4fdc:	3a f0       	brmi	.+14     	; 0x4fec <__divsf3_pse+0x3a>
    4fde:	e0 e8       	ldi	r30, 0x80	; 128
    4fe0:	30 d0       	rcall	.+96     	; 0x5042 <__divsf3_pse+0x90>
    4fe2:	91 50       	subi	r25, 0x01	; 1
    4fe4:	50 40       	sbci	r21, 0x00	; 0
    4fe6:	e6 95       	lsr	r30
    4fe8:	00 1c       	adc	r0, r0
    4fea:	ca f7       	brpl	.-14     	; 0x4fde <__divsf3_pse+0x2c>
    4fec:	29 d0       	rcall	.+82     	; 0x5040 <__divsf3_pse+0x8e>
    4fee:	fe 2f       	mov	r31, r30
    4ff0:	27 d0       	rcall	.+78     	; 0x5040 <__divsf3_pse+0x8e>
    4ff2:	66 0f       	add	r22, r22
    4ff4:	77 1f       	adc	r23, r23
    4ff6:	88 1f       	adc	r24, r24
    4ff8:	bb 1f       	adc	r27, r27
    4ffa:	26 17       	cp	r18, r22
    4ffc:	37 07       	cpc	r19, r23
    4ffe:	48 07       	cpc	r20, r24
    5000:	ab 07       	cpc	r26, r27
    5002:	b0 e8       	ldi	r27, 0x80	; 128
    5004:	09 f0       	breq	.+2      	; 0x5008 <__divsf3_pse+0x56>
    5006:	bb 0b       	sbc	r27, r27
    5008:	80 2d       	mov	r24, r0
    500a:	bf 01       	movw	r22, r30
    500c:	ff 27       	eor	r31, r31
    500e:	93 58       	subi	r25, 0x83	; 131
    5010:	5f 4f       	sbci	r21, 0xFF	; 255
    5012:	2a f0       	brmi	.+10     	; 0x501e <__divsf3_pse+0x6c>
    5014:	9e 3f       	cpi	r25, 0xFE	; 254
    5016:	51 05       	cpc	r21, r1
    5018:	68 f0       	brcs	.+26     	; 0x5034 <__divsf3_pse+0x82>
    501a:	b6 c0       	rjmp	.+364    	; 0x5188 <__fp_inf>
    501c:	5e c1       	rjmp	.+700    	; 0x52da <__fp_szero>
    501e:	5f 3f       	cpi	r21, 0xFF	; 255
    5020:	ec f3       	brlt	.-6      	; 0x501c <__divsf3_pse+0x6a>
    5022:	98 3e       	cpi	r25, 0xE8	; 232
    5024:	dc f3       	brlt	.-10     	; 0x501c <__divsf3_pse+0x6a>
    5026:	86 95       	lsr	r24
    5028:	77 95       	ror	r23
    502a:	67 95       	ror	r22
    502c:	b7 95       	ror	r27
    502e:	f7 95       	ror	r31
    5030:	9f 5f       	subi	r25, 0xFF	; 255
    5032:	c9 f7       	brne	.-14     	; 0x5026 <__divsf3_pse+0x74>
    5034:	88 0f       	add	r24, r24
    5036:	91 1d       	adc	r25, r1
    5038:	96 95       	lsr	r25
    503a:	87 95       	ror	r24
    503c:	97 f9       	bld	r25, 7
    503e:	08 95       	ret
    5040:	e1 e0       	ldi	r30, 0x01	; 1
    5042:	66 0f       	add	r22, r22
    5044:	77 1f       	adc	r23, r23
    5046:	88 1f       	adc	r24, r24
    5048:	bb 1f       	adc	r27, r27
    504a:	62 17       	cp	r22, r18
    504c:	73 07       	cpc	r23, r19
    504e:	84 07       	cpc	r24, r20
    5050:	ba 07       	cpc	r27, r26
    5052:	20 f0       	brcs	.+8      	; 0x505c <__divsf3_pse+0xaa>
    5054:	62 1b       	sub	r22, r18
    5056:	73 0b       	sbc	r23, r19
    5058:	84 0b       	sbc	r24, r20
    505a:	ba 0b       	sbc	r27, r26
    505c:	ee 1f       	adc	r30, r30
    505e:	88 f7       	brcc	.-30     	; 0x5042 <__divsf3_pse+0x90>
    5060:	e0 95       	com	r30
    5062:	08 95       	ret

00005064 <__fixsfsi>:
    5064:	04 d0       	rcall	.+8      	; 0x506e <__fixunssfsi>
    5066:	68 94       	set
    5068:	b1 11       	cpse	r27, r1
    506a:	37 c1       	rjmp	.+622    	; 0x52da <__fp_szero>
    506c:	08 95       	ret

0000506e <__fixunssfsi>:
    506e:	1a d1       	rcall	.+564    	; 0x52a4 <__fp_splitA>
    5070:	88 f0       	brcs	.+34     	; 0x5094 <__fixunssfsi+0x26>
    5072:	9f 57       	subi	r25, 0x7F	; 127
    5074:	90 f0       	brcs	.+36     	; 0x509a <__fixunssfsi+0x2c>
    5076:	b9 2f       	mov	r27, r25
    5078:	99 27       	eor	r25, r25
    507a:	b7 51       	subi	r27, 0x17	; 23
    507c:	a0 f0       	brcs	.+40     	; 0x50a6 <__fixunssfsi+0x38>
    507e:	d1 f0       	breq	.+52     	; 0x50b4 <__fixunssfsi+0x46>
    5080:	66 0f       	add	r22, r22
    5082:	77 1f       	adc	r23, r23
    5084:	88 1f       	adc	r24, r24
    5086:	99 1f       	adc	r25, r25
    5088:	1a f0       	brmi	.+6      	; 0x5090 <__fixunssfsi+0x22>
    508a:	ba 95       	dec	r27
    508c:	c9 f7       	brne	.-14     	; 0x5080 <__fixunssfsi+0x12>
    508e:	12 c0       	rjmp	.+36     	; 0x50b4 <__fixunssfsi+0x46>
    5090:	b1 30       	cpi	r27, 0x01	; 1
    5092:	81 f0       	breq	.+32     	; 0x50b4 <__fixunssfsi+0x46>
    5094:	21 d1       	rcall	.+578    	; 0x52d8 <__fp_zero>
    5096:	b1 e0       	ldi	r27, 0x01	; 1
    5098:	08 95       	ret
    509a:	1e c1       	rjmp	.+572    	; 0x52d8 <__fp_zero>
    509c:	67 2f       	mov	r22, r23
    509e:	78 2f       	mov	r23, r24
    50a0:	88 27       	eor	r24, r24
    50a2:	b8 5f       	subi	r27, 0xF8	; 248
    50a4:	39 f0       	breq	.+14     	; 0x50b4 <__fixunssfsi+0x46>
    50a6:	b9 3f       	cpi	r27, 0xF9	; 249
    50a8:	cc f3       	brlt	.-14     	; 0x509c <__fixunssfsi+0x2e>
    50aa:	86 95       	lsr	r24
    50ac:	77 95       	ror	r23
    50ae:	67 95       	ror	r22
    50b0:	b3 95       	inc	r27
    50b2:	d9 f7       	brne	.-10     	; 0x50aa <__fixunssfsi+0x3c>
    50b4:	3e f4       	brtc	.+14     	; 0x50c4 <__fixunssfsi+0x56>
    50b6:	90 95       	com	r25
    50b8:	80 95       	com	r24
    50ba:	70 95       	com	r23
    50bc:	61 95       	neg	r22
    50be:	7f 4f       	sbci	r23, 0xFF	; 255
    50c0:	8f 4f       	sbci	r24, 0xFF	; 255
    50c2:	9f 4f       	sbci	r25, 0xFF	; 255
    50c4:	08 95       	ret

000050c6 <__floatunsisf>:
    50c6:	e8 94       	clt
    50c8:	09 c0       	rjmp	.+18     	; 0x50dc <__floatsisf+0x12>

000050ca <__floatsisf>:
    50ca:	97 fb       	bst	r25, 7
    50cc:	3e f4       	brtc	.+14     	; 0x50dc <__floatsisf+0x12>
    50ce:	90 95       	com	r25
    50d0:	80 95       	com	r24
    50d2:	70 95       	com	r23
    50d4:	61 95       	neg	r22
    50d6:	7f 4f       	sbci	r23, 0xFF	; 255
    50d8:	8f 4f       	sbci	r24, 0xFF	; 255
    50da:	9f 4f       	sbci	r25, 0xFF	; 255
    50dc:	99 23       	and	r25, r25
    50de:	a9 f0       	breq	.+42     	; 0x510a <__floatsisf+0x40>
    50e0:	f9 2f       	mov	r31, r25
    50e2:	96 e9       	ldi	r25, 0x96	; 150
    50e4:	bb 27       	eor	r27, r27
    50e6:	93 95       	inc	r25
    50e8:	f6 95       	lsr	r31
    50ea:	87 95       	ror	r24
    50ec:	77 95       	ror	r23
    50ee:	67 95       	ror	r22
    50f0:	b7 95       	ror	r27
    50f2:	f1 11       	cpse	r31, r1
    50f4:	f8 cf       	rjmp	.-16     	; 0x50e6 <__floatsisf+0x1c>
    50f6:	fa f4       	brpl	.+62     	; 0x5136 <__floatsisf+0x6c>
    50f8:	bb 0f       	add	r27, r27
    50fa:	11 f4       	brne	.+4      	; 0x5100 <__floatsisf+0x36>
    50fc:	60 ff       	sbrs	r22, 0
    50fe:	1b c0       	rjmp	.+54     	; 0x5136 <__floatsisf+0x6c>
    5100:	6f 5f       	subi	r22, 0xFF	; 255
    5102:	7f 4f       	sbci	r23, 0xFF	; 255
    5104:	8f 4f       	sbci	r24, 0xFF	; 255
    5106:	9f 4f       	sbci	r25, 0xFF	; 255
    5108:	16 c0       	rjmp	.+44     	; 0x5136 <__floatsisf+0x6c>
    510a:	88 23       	and	r24, r24
    510c:	11 f0       	breq	.+4      	; 0x5112 <__floatsisf+0x48>
    510e:	96 e9       	ldi	r25, 0x96	; 150
    5110:	11 c0       	rjmp	.+34     	; 0x5134 <__floatsisf+0x6a>
    5112:	77 23       	and	r23, r23
    5114:	21 f0       	breq	.+8      	; 0x511e <__floatsisf+0x54>
    5116:	9e e8       	ldi	r25, 0x8E	; 142
    5118:	87 2f       	mov	r24, r23
    511a:	76 2f       	mov	r23, r22
    511c:	05 c0       	rjmp	.+10     	; 0x5128 <__floatsisf+0x5e>
    511e:	66 23       	and	r22, r22
    5120:	71 f0       	breq	.+28     	; 0x513e <__floatsisf+0x74>
    5122:	96 e8       	ldi	r25, 0x86	; 134
    5124:	86 2f       	mov	r24, r22
    5126:	70 e0       	ldi	r23, 0x00	; 0
    5128:	60 e0       	ldi	r22, 0x00	; 0
    512a:	2a f0       	brmi	.+10     	; 0x5136 <__floatsisf+0x6c>
    512c:	9a 95       	dec	r25
    512e:	66 0f       	add	r22, r22
    5130:	77 1f       	adc	r23, r23
    5132:	88 1f       	adc	r24, r24
    5134:	da f7       	brpl	.-10     	; 0x512c <__floatsisf+0x62>
    5136:	88 0f       	add	r24, r24
    5138:	96 95       	lsr	r25
    513a:	87 95       	ror	r24
    513c:	97 f9       	bld	r25, 7
    513e:	08 95       	ret

00005140 <__fp_cmp>:
    5140:	99 0f       	add	r25, r25
    5142:	00 08       	sbc	r0, r0
    5144:	55 0f       	add	r21, r21
    5146:	aa 0b       	sbc	r26, r26
    5148:	e0 e8       	ldi	r30, 0x80	; 128
    514a:	fe ef       	ldi	r31, 0xFE	; 254
    514c:	16 16       	cp	r1, r22
    514e:	17 06       	cpc	r1, r23
    5150:	e8 07       	cpc	r30, r24
    5152:	f9 07       	cpc	r31, r25
    5154:	c0 f0       	brcs	.+48     	; 0x5186 <__fp_cmp+0x46>
    5156:	12 16       	cp	r1, r18
    5158:	13 06       	cpc	r1, r19
    515a:	e4 07       	cpc	r30, r20
    515c:	f5 07       	cpc	r31, r21
    515e:	98 f0       	brcs	.+38     	; 0x5186 <__fp_cmp+0x46>
    5160:	62 1b       	sub	r22, r18
    5162:	73 0b       	sbc	r23, r19
    5164:	84 0b       	sbc	r24, r20
    5166:	95 0b       	sbc	r25, r21
    5168:	39 f4       	brne	.+14     	; 0x5178 <__fp_cmp+0x38>
    516a:	0a 26       	eor	r0, r26
    516c:	61 f0       	breq	.+24     	; 0x5186 <__fp_cmp+0x46>
    516e:	23 2b       	or	r18, r19
    5170:	24 2b       	or	r18, r20
    5172:	25 2b       	or	r18, r21
    5174:	21 f4       	brne	.+8      	; 0x517e <__fp_cmp+0x3e>
    5176:	08 95       	ret
    5178:	0a 26       	eor	r0, r26
    517a:	09 f4       	brne	.+2      	; 0x517e <__fp_cmp+0x3e>
    517c:	a1 40       	sbci	r26, 0x01	; 1
    517e:	a6 95       	lsr	r26
    5180:	8f ef       	ldi	r24, 0xFF	; 255
    5182:	81 1d       	adc	r24, r1
    5184:	81 1d       	adc	r24, r1
    5186:	08 95       	ret

00005188 <__fp_inf>:
    5188:	97 f9       	bld	r25, 7
    518a:	9f 67       	ori	r25, 0x7F	; 127
    518c:	80 e8       	ldi	r24, 0x80	; 128
    518e:	70 e0       	ldi	r23, 0x00	; 0
    5190:	60 e0       	ldi	r22, 0x00	; 0
    5192:	08 95       	ret

00005194 <__fp_nan>:
    5194:	9f ef       	ldi	r25, 0xFF	; 255
    5196:	80 ec       	ldi	r24, 0xC0	; 192
    5198:	08 95       	ret

0000519a <__fp_powser>:
    519a:	df 93       	push	r29
    519c:	cf 93       	push	r28
    519e:	1f 93       	push	r17
    51a0:	0f 93       	push	r16
    51a2:	ff 92       	push	r15
    51a4:	ef 92       	push	r14
    51a6:	df 92       	push	r13
    51a8:	7b 01       	movw	r14, r22
    51aa:	8c 01       	movw	r16, r24
    51ac:	68 94       	set
    51ae:	05 c0       	rjmp	.+10     	; 0x51ba <__fp_powser+0x20>
    51b0:	da 2e       	mov	r13, r26
    51b2:	ef 01       	movw	r28, r30
    51b4:	f4 d0       	rcall	.+488    	; 0x539e <__mulsf3x>
    51b6:	fe 01       	movw	r30, r28
    51b8:	e8 94       	clt
    51ba:	a5 91       	lpm	r26, Z+
    51bc:	25 91       	lpm	r18, Z+
    51be:	35 91       	lpm	r19, Z+
    51c0:	45 91       	lpm	r20, Z+
    51c2:	55 91       	lpm	r21, Z+
    51c4:	ae f3       	brts	.-22     	; 0x51b0 <__fp_powser+0x16>
    51c6:	ef 01       	movw	r28, r30
    51c8:	29 de       	rcall	.-942    	; 0x4e1c <__addsf3x>
    51ca:	fe 01       	movw	r30, r28
    51cc:	97 01       	movw	r18, r14
    51ce:	a8 01       	movw	r20, r16
    51d0:	da 94       	dec	r13
    51d2:	79 f7       	brne	.-34     	; 0x51b2 <__fp_powser+0x18>
    51d4:	df 90       	pop	r13
    51d6:	ef 90       	pop	r14
    51d8:	ff 90       	pop	r15
    51da:	0f 91       	pop	r16
    51dc:	1f 91       	pop	r17
    51de:	cf 91       	pop	r28
    51e0:	df 91       	pop	r29
    51e2:	08 95       	ret

000051e4 <__fp_pscA>:
    51e4:	00 24       	eor	r0, r0
    51e6:	0a 94       	dec	r0
    51e8:	16 16       	cp	r1, r22
    51ea:	17 06       	cpc	r1, r23
    51ec:	18 06       	cpc	r1, r24
    51ee:	09 06       	cpc	r0, r25
    51f0:	08 95       	ret

000051f2 <__fp_pscB>:
    51f2:	00 24       	eor	r0, r0
    51f4:	0a 94       	dec	r0
    51f6:	12 16       	cp	r1, r18
    51f8:	13 06       	cpc	r1, r19
    51fa:	14 06       	cpc	r1, r20
    51fc:	05 06       	cpc	r0, r21
    51fe:	08 95       	ret
    5200:	c9 cf       	rjmp	.-110    	; 0x5194 <__fp_nan>

00005202 <__fp_rempio2>:
    5202:	50 d0       	rcall	.+160    	; 0x52a4 <__fp_splitA>
    5204:	e8 f3       	brcs	.-6      	; 0x5200 <__fp_pscB+0xe>
    5206:	e8 94       	clt
    5208:	e0 e0       	ldi	r30, 0x00	; 0
    520a:	bb 27       	eor	r27, r27
    520c:	9f 57       	subi	r25, 0x7F	; 127
    520e:	f0 f0       	brcs	.+60     	; 0x524c <__fp_rempio2+0x4a>
    5210:	2a ed       	ldi	r18, 0xDA	; 218
    5212:	3f e0       	ldi	r19, 0x0F	; 15
    5214:	49 ec       	ldi	r20, 0xC9	; 201
    5216:	06 c0       	rjmp	.+12     	; 0x5224 <__fp_rempio2+0x22>
    5218:	ee 0f       	add	r30, r30
    521a:	bb 0f       	add	r27, r27
    521c:	66 1f       	adc	r22, r22
    521e:	77 1f       	adc	r23, r23
    5220:	88 1f       	adc	r24, r24
    5222:	28 f0       	brcs	.+10     	; 0x522e <__fp_rempio2+0x2c>
    5224:	b2 3a       	cpi	r27, 0xA2	; 162
    5226:	62 07       	cpc	r22, r18
    5228:	73 07       	cpc	r23, r19
    522a:	84 07       	cpc	r24, r20
    522c:	28 f0       	brcs	.+10     	; 0x5238 <__fp_rempio2+0x36>
    522e:	b2 5a       	subi	r27, 0xA2	; 162
    5230:	62 0b       	sbc	r22, r18
    5232:	73 0b       	sbc	r23, r19
    5234:	84 0b       	sbc	r24, r20
    5236:	e3 95       	inc	r30
    5238:	9a 95       	dec	r25
    523a:	72 f7       	brpl	.-36     	; 0x5218 <__fp_rempio2+0x16>
    523c:	80 38       	cpi	r24, 0x80	; 128
    523e:	30 f4       	brcc	.+12     	; 0x524c <__fp_rempio2+0x4a>
    5240:	9a 95       	dec	r25
    5242:	bb 0f       	add	r27, r27
    5244:	66 1f       	adc	r22, r22
    5246:	77 1f       	adc	r23, r23
    5248:	88 1f       	adc	r24, r24
    524a:	d2 f7       	brpl	.-12     	; 0x5240 <__fp_rempio2+0x3e>
    524c:	90 48       	sbci	r25, 0x80	; 128
    524e:	29 c1       	rjmp	.+594    	; 0x54a2 <__fp_mpack_finite>

00005250 <__fp_round>:
    5250:	09 2e       	mov	r0, r25
    5252:	03 94       	inc	r0
    5254:	00 0c       	add	r0, r0
    5256:	11 f4       	brne	.+4      	; 0x525c <__fp_round+0xc>
    5258:	88 23       	and	r24, r24
    525a:	52 f0       	brmi	.+20     	; 0x5270 <__fp_round+0x20>
    525c:	bb 0f       	add	r27, r27
    525e:	40 f4       	brcc	.+16     	; 0x5270 <__fp_round+0x20>
    5260:	bf 2b       	or	r27, r31
    5262:	11 f4       	brne	.+4      	; 0x5268 <__fp_round+0x18>
    5264:	60 ff       	sbrs	r22, 0
    5266:	04 c0       	rjmp	.+8      	; 0x5270 <__fp_round+0x20>
    5268:	6f 5f       	subi	r22, 0xFF	; 255
    526a:	7f 4f       	sbci	r23, 0xFF	; 255
    526c:	8f 4f       	sbci	r24, 0xFF	; 255
    526e:	9f 4f       	sbci	r25, 0xFF	; 255
    5270:	08 95       	ret

00005272 <__fp_sinus>:
    5272:	ef 93       	push	r30
    5274:	e0 ff       	sbrs	r30, 0
    5276:	06 c0       	rjmp	.+12     	; 0x5284 <__fp_sinus+0x12>
    5278:	a2 ea       	ldi	r26, 0xA2	; 162
    527a:	2a ed       	ldi	r18, 0xDA	; 218
    527c:	3f e0       	ldi	r19, 0x0F	; 15
    527e:	49 ec       	ldi	r20, 0xC9	; 201
    5280:	5f eb       	ldi	r21, 0xBF	; 191
    5282:	cc dd       	rcall	.-1128   	; 0x4e1c <__addsf3x>
    5284:	e5 df       	rcall	.-54     	; 0x5250 <__fp_round>
    5286:	0f 90       	pop	r0
    5288:	03 94       	inc	r0
    528a:	01 fc       	sbrc	r0, 1
    528c:	90 58       	subi	r25, 0x80	; 128
    528e:	e7 ec       	ldi	r30, 0xC7	; 199
    5290:	f0 e0       	ldi	r31, 0x00	; 0
    5292:	13 c1       	rjmp	.+550    	; 0x54ba <__fp_powsodd>

00005294 <__fp_split3>:
    5294:	57 fd       	sbrc	r21, 7
    5296:	90 58       	subi	r25, 0x80	; 128
    5298:	44 0f       	add	r20, r20
    529a:	55 1f       	adc	r21, r21
    529c:	59 f0       	breq	.+22     	; 0x52b4 <__fp_splitA+0x10>
    529e:	5f 3f       	cpi	r21, 0xFF	; 255
    52a0:	71 f0       	breq	.+28     	; 0x52be <__fp_splitA+0x1a>
    52a2:	47 95       	ror	r20

000052a4 <__fp_splitA>:
    52a4:	88 0f       	add	r24, r24
    52a6:	97 fb       	bst	r25, 7
    52a8:	99 1f       	adc	r25, r25
    52aa:	61 f0       	breq	.+24     	; 0x52c4 <__fp_splitA+0x20>
    52ac:	9f 3f       	cpi	r25, 0xFF	; 255
    52ae:	79 f0       	breq	.+30     	; 0x52ce <__fp_splitA+0x2a>
    52b0:	87 95       	ror	r24
    52b2:	08 95       	ret
    52b4:	12 16       	cp	r1, r18
    52b6:	13 06       	cpc	r1, r19
    52b8:	14 06       	cpc	r1, r20
    52ba:	55 1f       	adc	r21, r21
    52bc:	f2 cf       	rjmp	.-28     	; 0x52a2 <__fp_split3+0xe>
    52be:	46 95       	lsr	r20
    52c0:	f1 df       	rcall	.-30     	; 0x52a4 <__fp_splitA>
    52c2:	08 c0       	rjmp	.+16     	; 0x52d4 <__fp_splitA+0x30>
    52c4:	16 16       	cp	r1, r22
    52c6:	17 06       	cpc	r1, r23
    52c8:	18 06       	cpc	r1, r24
    52ca:	99 1f       	adc	r25, r25
    52cc:	f1 cf       	rjmp	.-30     	; 0x52b0 <__fp_splitA+0xc>
    52ce:	86 95       	lsr	r24
    52d0:	71 05       	cpc	r23, r1
    52d2:	61 05       	cpc	r22, r1
    52d4:	08 94       	sec
    52d6:	08 95       	ret

000052d8 <__fp_zero>:
    52d8:	e8 94       	clt

000052da <__fp_szero>:
    52da:	bb 27       	eor	r27, r27
    52dc:	66 27       	eor	r22, r22
    52de:	77 27       	eor	r23, r23
    52e0:	cb 01       	movw	r24, r22
    52e2:	97 f9       	bld	r25, 7
    52e4:	08 95       	ret

000052e6 <__gesf2>:
    52e6:	2c df       	rcall	.-424    	; 0x5140 <__fp_cmp>
    52e8:	08 f4       	brcc	.+2      	; 0x52ec <__gesf2+0x6>
    52ea:	8f ef       	ldi	r24, 0xFF	; 255
    52ec:	08 95       	ret

000052ee <inverse>:
    52ee:	9b 01       	movw	r18, r22
    52f0:	ac 01       	movw	r20, r24
    52f2:	60 e0       	ldi	r22, 0x00	; 0
    52f4:	70 e0       	ldi	r23, 0x00	; 0
    52f6:	80 e8       	ldi	r24, 0x80	; 128
    52f8:	9f e3       	ldi	r25, 0x3F	; 63
    52fa:	4c ce       	rjmp	.-872    	; 0x4f94 <__divsf3>
    52fc:	0e f0       	brts	.+2      	; 0x5300 <inverse+0x12>
    52fe:	cf c0       	rjmp	.+414    	; 0x549e <__fp_mpack>
    5300:	49 cf       	rjmp	.-366    	; 0x5194 <__fp_nan>
    5302:	68 94       	set
    5304:	41 cf       	rjmp	.-382    	; 0x5188 <__fp_inf>

00005306 <log>:
    5306:	ce df       	rcall	.-100    	; 0x52a4 <__fp_splitA>
    5308:	c8 f3       	brcs	.-14     	; 0x52fc <inverse+0xe>
    530a:	99 23       	and	r25, r25
    530c:	d1 f3       	breq	.-12     	; 0x5302 <inverse+0x14>
    530e:	c6 f3       	brts	.-16     	; 0x5300 <inverse+0x12>
    5310:	df 93       	push	r29
    5312:	cf 93       	push	r28
    5314:	1f 93       	push	r17
    5316:	0f 93       	push	r16
    5318:	ff 92       	push	r15
    531a:	c9 2f       	mov	r28, r25
    531c:	dd 27       	eor	r29, r29
    531e:	88 23       	and	r24, r24
    5320:	2a f0       	brmi	.+10     	; 0x532c <log+0x26>
    5322:	21 97       	sbiw	r28, 0x01	; 1
    5324:	66 0f       	add	r22, r22
    5326:	77 1f       	adc	r23, r23
    5328:	88 1f       	adc	r24, r24
    532a:	da f7       	brpl	.-10     	; 0x5322 <log+0x1c>
    532c:	20 e0       	ldi	r18, 0x00	; 0
    532e:	30 e0       	ldi	r19, 0x00	; 0
    5330:	40 e8       	ldi	r20, 0x80	; 128
    5332:	5f eb       	ldi	r21, 0xBF	; 191
    5334:	9f e3       	ldi	r25, 0x3F	; 63
    5336:	88 39       	cpi	r24, 0x98	; 152
    5338:	20 f0       	brcs	.+8      	; 0x5342 <log+0x3c>
    533a:	80 3e       	cpi	r24, 0xE0	; 224
    533c:	30 f0       	brcs	.+12     	; 0x534a <log+0x44>
    533e:	21 96       	adiw	r28, 0x01	; 1
    5340:	8f 77       	andi	r24, 0x7F	; 127
    5342:	5b dd       	rcall	.-1354   	; 0x4dfa <__addsf3>
    5344:	e5 ee       	ldi	r30, 0xE5	; 229
    5346:	f0 e0       	ldi	r31, 0x00	; 0
    5348:	03 c0       	rjmp	.+6      	; 0x5350 <log+0x4a>
    534a:	57 dd       	rcall	.-1362   	; 0x4dfa <__addsf3>
    534c:	e2 e1       	ldi	r30, 0x12	; 18
    534e:	f1 e0       	ldi	r31, 0x01	; 1
    5350:	24 df       	rcall	.-440    	; 0x519a <__fp_powser>
    5352:	8b 01       	movw	r16, r22
    5354:	be 01       	movw	r22, r28
    5356:	ec 01       	movw	r28, r24
    5358:	fb 2e       	mov	r15, r27
    535a:	6f 57       	subi	r22, 0x7F	; 127
    535c:	71 09       	sbc	r23, r1
    535e:	75 95       	asr	r23
    5360:	77 1f       	adc	r23, r23
    5362:	88 0b       	sbc	r24, r24
    5364:	99 0b       	sbc	r25, r25
    5366:	b1 de       	rcall	.-670    	; 0x50ca <__floatsisf>
    5368:	28 e1       	ldi	r18, 0x18	; 24
    536a:	32 e7       	ldi	r19, 0x72	; 114
    536c:	41 e3       	ldi	r20, 0x31	; 49
    536e:	5f e3       	ldi	r21, 0x3F	; 63
    5370:	16 d0       	rcall	.+44     	; 0x539e <__mulsf3x>
    5372:	af 2d       	mov	r26, r15
    5374:	98 01       	movw	r18, r16
    5376:	ae 01       	movw	r20, r28
    5378:	ff 90       	pop	r15
    537a:	0f 91       	pop	r16
    537c:	1f 91       	pop	r17
    537e:	cf 91       	pop	r28
    5380:	df 91       	pop	r29
    5382:	4c dd       	rcall	.-1384   	; 0x4e1c <__addsf3x>
    5384:	65 cf       	rjmp	.-310    	; 0x5250 <__fp_round>

00005386 <__mulsf3>:
    5386:	0b d0       	rcall	.+22     	; 0x539e <__mulsf3x>
    5388:	63 cf       	rjmp	.-314    	; 0x5250 <__fp_round>
    538a:	2c df       	rcall	.-424    	; 0x51e4 <__fp_pscA>
    538c:	28 f0       	brcs	.+10     	; 0x5398 <__mulsf3+0x12>
    538e:	31 df       	rcall	.-414    	; 0x51f2 <__fp_pscB>
    5390:	18 f0       	brcs	.+6      	; 0x5398 <__mulsf3+0x12>
    5392:	95 23       	and	r25, r21
    5394:	09 f0       	breq	.+2      	; 0x5398 <__mulsf3+0x12>
    5396:	f8 ce       	rjmp	.-528    	; 0x5188 <__fp_inf>
    5398:	fd ce       	rjmp	.-518    	; 0x5194 <__fp_nan>
    539a:	11 24       	eor	r1, r1
    539c:	9e cf       	rjmp	.-196    	; 0x52da <__fp_szero>

0000539e <__mulsf3x>:
    539e:	7a df       	rcall	.-268    	; 0x5294 <__fp_split3>
    53a0:	a0 f3       	brcs	.-24     	; 0x538a <__mulsf3+0x4>

000053a2 <__mulsf3_pse>:
    53a2:	95 9f       	mul	r25, r21
    53a4:	d1 f3       	breq	.-12     	; 0x539a <__mulsf3+0x14>
    53a6:	95 0f       	add	r25, r21
    53a8:	50 e0       	ldi	r21, 0x00	; 0
    53aa:	55 1f       	adc	r21, r21
    53ac:	62 9f       	mul	r22, r18
    53ae:	f0 01       	movw	r30, r0
    53b0:	72 9f       	mul	r23, r18
    53b2:	bb 27       	eor	r27, r27
    53b4:	f0 0d       	add	r31, r0
    53b6:	b1 1d       	adc	r27, r1
    53b8:	63 9f       	mul	r22, r19
    53ba:	aa 27       	eor	r26, r26
    53bc:	f0 0d       	add	r31, r0
    53be:	b1 1d       	adc	r27, r1
    53c0:	aa 1f       	adc	r26, r26
    53c2:	64 9f       	mul	r22, r20
    53c4:	66 27       	eor	r22, r22
    53c6:	b0 0d       	add	r27, r0
    53c8:	a1 1d       	adc	r26, r1
    53ca:	66 1f       	adc	r22, r22
    53cc:	82 9f       	mul	r24, r18
    53ce:	22 27       	eor	r18, r18
    53d0:	b0 0d       	add	r27, r0
    53d2:	a1 1d       	adc	r26, r1
    53d4:	62 1f       	adc	r22, r18
    53d6:	73 9f       	mul	r23, r19
    53d8:	b0 0d       	add	r27, r0
    53da:	a1 1d       	adc	r26, r1
    53dc:	62 1f       	adc	r22, r18
    53de:	83 9f       	mul	r24, r19
    53e0:	a0 0d       	add	r26, r0
    53e2:	61 1d       	adc	r22, r1
    53e4:	22 1f       	adc	r18, r18
    53e6:	74 9f       	mul	r23, r20
    53e8:	33 27       	eor	r19, r19
    53ea:	a0 0d       	add	r26, r0
    53ec:	61 1d       	adc	r22, r1
    53ee:	23 1f       	adc	r18, r19
    53f0:	84 9f       	mul	r24, r20
    53f2:	60 0d       	add	r22, r0
    53f4:	21 1d       	adc	r18, r1
    53f6:	82 2f       	mov	r24, r18
    53f8:	76 2f       	mov	r23, r22
    53fa:	6a 2f       	mov	r22, r26
    53fc:	11 24       	eor	r1, r1
    53fe:	9f 57       	subi	r25, 0x7F	; 127
    5400:	50 40       	sbci	r21, 0x00	; 0
    5402:	8a f0       	brmi	.+34     	; 0x5426 <__mulsf3_pse+0x84>
    5404:	e1 f0       	breq	.+56     	; 0x543e <__mulsf3_pse+0x9c>
    5406:	88 23       	and	r24, r24
    5408:	4a f0       	brmi	.+18     	; 0x541c <__mulsf3_pse+0x7a>
    540a:	ee 0f       	add	r30, r30
    540c:	ff 1f       	adc	r31, r31
    540e:	bb 1f       	adc	r27, r27
    5410:	66 1f       	adc	r22, r22
    5412:	77 1f       	adc	r23, r23
    5414:	88 1f       	adc	r24, r24
    5416:	91 50       	subi	r25, 0x01	; 1
    5418:	50 40       	sbci	r21, 0x00	; 0
    541a:	a9 f7       	brne	.-22     	; 0x5406 <__mulsf3_pse+0x64>
    541c:	9e 3f       	cpi	r25, 0xFE	; 254
    541e:	51 05       	cpc	r21, r1
    5420:	70 f0       	brcs	.+28     	; 0x543e <__mulsf3_pse+0x9c>
    5422:	b2 ce       	rjmp	.-668    	; 0x5188 <__fp_inf>
    5424:	5a cf       	rjmp	.-332    	; 0x52da <__fp_szero>
    5426:	5f 3f       	cpi	r21, 0xFF	; 255
    5428:	ec f3       	brlt	.-6      	; 0x5424 <__mulsf3_pse+0x82>
    542a:	98 3e       	cpi	r25, 0xE8	; 232
    542c:	dc f3       	brlt	.-10     	; 0x5424 <__mulsf3_pse+0x82>
    542e:	86 95       	lsr	r24
    5430:	77 95       	ror	r23
    5432:	67 95       	ror	r22
    5434:	b7 95       	ror	r27
    5436:	f7 95       	ror	r31
    5438:	e7 95       	ror	r30
    543a:	9f 5f       	subi	r25, 0xFF	; 255
    543c:	c1 f7       	brne	.-16     	; 0x542e <__mulsf3_pse+0x8c>
    543e:	fe 2b       	or	r31, r30
    5440:	88 0f       	add	r24, r24
    5442:	91 1d       	adc	r25, r1
    5444:	96 95       	lsr	r25
    5446:	87 95       	ror	r24
    5448:	97 f9       	bld	r25, 7
    544a:	08 95       	ret

0000544c <sin>:
    544c:	9f 93       	push	r25
    544e:	d9 de       	rcall	.-590    	; 0x5202 <__fp_rempio2>
    5450:	0f 90       	pop	r0
    5452:	07 fc       	sbrc	r0, 7
    5454:	ee 5f       	subi	r30, 0xFE	; 254
    5456:	0d cf       	rjmp	.-486    	; 0x5272 <__fp_sinus>

00005458 <square>:
    5458:	9b 01       	movw	r18, r22
    545a:	ac 01       	movw	r20, r24
    545c:	94 cf       	rjmp	.-216    	; 0x5386 <__mulsf3>

0000545e <tan>:
    545e:	df 93       	push	r29
    5460:	d9 2f       	mov	r29, r25
    5462:	cf de       	rcall	.-610    	; 0x5202 <__fp_rempio2>
    5464:	e6 95       	lsr	r30
    5466:	d7 95       	ror	r29
    5468:	2a ed       	ldi	r18, 0xDA	; 218
    546a:	3f e0       	ldi	r19, 0x0F	; 15
    546c:	49 e4       	ldi	r20, 0x49	; 73
    546e:	5f e3       	ldi	r21, 0x3F	; 63
    5470:	b3 3a       	cpi	r27, 0xA3	; 163
    5472:	62 07       	cpc	r22, r18
    5474:	73 07       	cpc	r23, r19
    5476:	84 07       	cpc	r24, r20
    5478:	95 07       	cpc	r25, r21
    547a:	d7 95       	ror	r29
    547c:	2a f0       	brmi	.+10     	; 0x5488 <tan+0x2a>
    547e:	a2 ea       	ldi	r26, 0xA2	; 162
    5480:	49 ec       	ldi	r20, 0xC9	; 201
    5482:	90 68       	ori	r25, 0x80	; 128
    5484:	cb dc       	rcall	.-1642   	; 0x4e1c <__addsf3x>
    5486:	e4 de       	rcall	.-568    	; 0x5250 <__fp_round>
    5488:	ef e3       	ldi	r30, 0x3F	; 63
    548a:	f1 e0       	ldi	r31, 0x01	; 1
    548c:	16 d0       	rcall	.+44     	; 0x54ba <__fp_powsodd>
    548e:	dd 0f       	add	r29, r29
    5490:	0b f0       	brvs	.+2      	; 0x5494 <tan+0x36>
    5492:	2d df       	rcall	.-422    	; 0x52ee <inverse>
    5494:	dd 0f       	add	r29, r29
    5496:	0b f4       	brvc	.+2      	; 0x549a <tan+0x3c>
    5498:	90 58       	subi	r25, 0x80	; 128
    549a:	df 91       	pop	r29
    549c:	08 95       	ret

0000549e <__fp_mpack>:
    549e:	9f 3f       	cpi	r25, 0xFF	; 255
    54a0:	31 f0       	breq	.+12     	; 0x54ae <__fp_mpack_finite+0xc>

000054a2 <__fp_mpack_finite>:
    54a2:	91 50       	subi	r25, 0x01	; 1
    54a4:	20 f4       	brcc	.+8      	; 0x54ae <__fp_mpack_finite+0xc>
    54a6:	87 95       	ror	r24
    54a8:	77 95       	ror	r23
    54aa:	67 95       	ror	r22
    54ac:	b7 95       	ror	r27
    54ae:	88 0f       	add	r24, r24
    54b0:	91 1d       	adc	r25, r1
    54b2:	96 95       	lsr	r25
    54b4:	87 95       	ror	r24
    54b6:	97 f9       	bld	r25, 7
    54b8:	08 95       	ret

000054ba <__fp_powsodd>:
    54ba:	9f 93       	push	r25
    54bc:	8f 93       	push	r24
    54be:	7f 93       	push	r23
    54c0:	6f 93       	push	r22
    54c2:	ff 93       	push	r31
    54c4:	ef 93       	push	r30
    54c6:	9b 01       	movw	r18, r22
    54c8:	ac 01       	movw	r20, r24
    54ca:	5d df       	rcall	.-326    	; 0x5386 <__mulsf3>
    54cc:	ef 91       	pop	r30
    54ce:	ff 91       	pop	r31
    54d0:	64 de       	rcall	.-824    	; 0x519a <__fp_powser>
    54d2:	2f 91       	pop	r18
    54d4:	3f 91       	pop	r19
    54d6:	4f 91       	pop	r20
    54d8:	5f 91       	pop	r21
    54da:	55 cf       	rjmp	.-342    	; 0x5386 <__mulsf3>

000054dc <vfprintf>:
    54dc:	a3 e1       	ldi	r26, 0x13	; 19
    54de:	b0 e0       	ldi	r27, 0x00	; 0
    54e0:	e4 e7       	ldi	r30, 0x74	; 116
    54e2:	fa e2       	ldi	r31, 0x2A	; 42
    54e4:	0c 94 ef 2d 	jmp	0x5bde	; 0x5bde <__prologue_saves__>
    54e8:	7c 01       	movw	r14, r24
    54ea:	1b 01       	movw	r2, r22
    54ec:	6a 01       	movw	r12, r20
    54ee:	fc 01       	movw	r30, r24
    54f0:	17 82       	std	Z+7, r1	; 0x07
    54f2:	16 82       	std	Z+6, r1	; 0x06
    54f4:	83 81       	ldd	r24, Z+3	; 0x03
    54f6:	81 ff       	sbrs	r24, 1
    54f8:	66 c3       	rjmp	.+1740   	; 0x5bc6 <vfprintf+0x6ea>
    54fa:	be 01       	movw	r22, r28
    54fc:	6f 5f       	subi	r22, 0xFF	; 255
    54fe:	7f 4f       	sbci	r23, 0xFF	; 255
    5500:	4b 01       	movw	r8, r22
    5502:	f7 01       	movw	r30, r14
    5504:	93 81       	ldd	r25, Z+3	; 0x03
    5506:	f1 01       	movw	r30, r2
    5508:	93 fd       	sbrc	r25, 3
    550a:	85 91       	lpm	r24, Z+
    550c:	93 ff       	sbrs	r25, 3
    550e:	81 91       	ld	r24, Z+
    5510:	1f 01       	movw	r2, r30
    5512:	88 23       	and	r24, r24
    5514:	09 f4       	brne	.+2      	; 0x5518 <vfprintf+0x3c>
    5516:	53 c3       	rjmp	.+1702   	; 0x5bbe <vfprintf+0x6e2>
    5518:	85 32       	cpi	r24, 0x25	; 37
    551a:	39 f4       	brne	.+14     	; 0x552a <vfprintf+0x4e>
    551c:	93 fd       	sbrc	r25, 3
    551e:	85 91       	lpm	r24, Z+
    5520:	93 ff       	sbrs	r25, 3
    5522:	81 91       	ld	r24, Z+
    5524:	1f 01       	movw	r2, r30
    5526:	85 32       	cpi	r24, 0x25	; 37
    5528:	39 f4       	brne	.+14     	; 0x5538 <vfprintf+0x5c>
    552a:	b7 01       	movw	r22, r14
    552c:	90 e0       	ldi	r25, 0x00	; 0
    552e:	0e 94 14 2f 	call	0x5e28	; 0x5e28 <fputc>
    5532:	56 01       	movw	r10, r12
    5534:	65 01       	movw	r12, r10
    5536:	e5 cf       	rjmp	.-54     	; 0x5502 <vfprintf+0x26>
    5538:	10 e0       	ldi	r17, 0x00	; 0
    553a:	51 2c       	mov	r5, r1
    553c:	20 e0       	ldi	r18, 0x00	; 0
    553e:	20 32       	cpi	r18, 0x20	; 32
    5540:	a0 f4       	brcc	.+40     	; 0x556a <vfprintf+0x8e>
    5542:	8b 32       	cpi	r24, 0x2B	; 43
    5544:	69 f0       	breq	.+26     	; 0x5560 <vfprintf+0x84>
    5546:	30 f4       	brcc	.+12     	; 0x5554 <vfprintf+0x78>
    5548:	80 32       	cpi	r24, 0x20	; 32
    554a:	59 f0       	breq	.+22     	; 0x5562 <vfprintf+0x86>
    554c:	83 32       	cpi	r24, 0x23	; 35
    554e:	69 f4       	brne	.+26     	; 0x556a <vfprintf+0x8e>
    5550:	20 61       	ori	r18, 0x10	; 16
    5552:	2c c0       	rjmp	.+88     	; 0x55ac <vfprintf+0xd0>
    5554:	8d 32       	cpi	r24, 0x2D	; 45
    5556:	39 f0       	breq	.+14     	; 0x5566 <vfprintf+0x8a>
    5558:	80 33       	cpi	r24, 0x30	; 48
    555a:	39 f4       	brne	.+14     	; 0x556a <vfprintf+0x8e>
    555c:	21 60       	ori	r18, 0x01	; 1
    555e:	26 c0       	rjmp	.+76     	; 0x55ac <vfprintf+0xd0>
    5560:	22 60       	ori	r18, 0x02	; 2
    5562:	24 60       	ori	r18, 0x04	; 4
    5564:	23 c0       	rjmp	.+70     	; 0x55ac <vfprintf+0xd0>
    5566:	28 60       	ori	r18, 0x08	; 8
    5568:	21 c0       	rjmp	.+66     	; 0x55ac <vfprintf+0xd0>
    556a:	27 fd       	sbrc	r18, 7
    556c:	27 c0       	rjmp	.+78     	; 0x55bc <vfprintf+0xe0>
    556e:	30 ed       	ldi	r19, 0xD0	; 208
    5570:	38 0f       	add	r19, r24
    5572:	3a 30       	cpi	r19, 0x0A	; 10
    5574:	78 f4       	brcc	.+30     	; 0x5594 <vfprintf+0xb8>
    5576:	26 ff       	sbrs	r18, 6
    5578:	06 c0       	rjmp	.+12     	; 0x5586 <vfprintf+0xaa>
    557a:	fa e0       	ldi	r31, 0x0A	; 10
    557c:	1f 9f       	mul	r17, r31
    557e:	30 0d       	add	r19, r0
    5580:	11 24       	eor	r1, r1
    5582:	13 2f       	mov	r17, r19
    5584:	13 c0       	rjmp	.+38     	; 0x55ac <vfprintf+0xd0>
    5586:	6a e0       	ldi	r22, 0x0A	; 10
    5588:	56 9e       	mul	r5, r22
    558a:	30 0d       	add	r19, r0
    558c:	11 24       	eor	r1, r1
    558e:	53 2e       	mov	r5, r19
    5590:	20 62       	ori	r18, 0x20	; 32
    5592:	0c c0       	rjmp	.+24     	; 0x55ac <vfprintf+0xd0>
    5594:	8e 32       	cpi	r24, 0x2E	; 46
    5596:	21 f4       	brne	.+8      	; 0x55a0 <vfprintf+0xc4>
    5598:	26 fd       	sbrc	r18, 6
    559a:	11 c3       	rjmp	.+1570   	; 0x5bbe <vfprintf+0x6e2>
    559c:	20 64       	ori	r18, 0x40	; 64
    559e:	06 c0       	rjmp	.+12     	; 0x55ac <vfprintf+0xd0>
    55a0:	8c 36       	cpi	r24, 0x6C	; 108
    55a2:	11 f4       	brne	.+4      	; 0x55a8 <vfprintf+0xcc>
    55a4:	20 68       	ori	r18, 0x80	; 128
    55a6:	02 c0       	rjmp	.+4      	; 0x55ac <vfprintf+0xd0>
    55a8:	88 36       	cpi	r24, 0x68	; 104
    55aa:	41 f4       	brne	.+16     	; 0x55bc <vfprintf+0xe0>
    55ac:	f1 01       	movw	r30, r2
    55ae:	93 fd       	sbrc	r25, 3
    55b0:	85 91       	lpm	r24, Z+
    55b2:	93 ff       	sbrs	r25, 3
    55b4:	81 91       	ld	r24, Z+
    55b6:	1f 01       	movw	r2, r30
    55b8:	81 11       	cpse	r24, r1
    55ba:	c1 cf       	rjmp	.-126    	; 0x553e <vfprintf+0x62>
    55bc:	9b eb       	ldi	r25, 0xBB	; 187
    55be:	98 0f       	add	r25, r24
    55c0:	93 30       	cpi	r25, 0x03	; 3
    55c2:	18 f4       	brcc	.+6      	; 0x55ca <vfprintf+0xee>
    55c4:	20 61       	ori	r18, 0x10	; 16
    55c6:	80 5e       	subi	r24, 0xE0	; 224
    55c8:	06 c0       	rjmp	.+12     	; 0x55d6 <vfprintf+0xfa>
    55ca:	9b e9       	ldi	r25, 0x9B	; 155
    55cc:	98 0f       	add	r25, r24
    55ce:	93 30       	cpi	r25, 0x03	; 3
    55d0:	08 f0       	brcs	.+2      	; 0x55d4 <vfprintf+0xf8>
    55d2:	aa c1       	rjmp	.+852    	; 0x5928 <vfprintf+0x44c>
    55d4:	2f 7e       	andi	r18, 0xEF	; 239
    55d6:	26 ff       	sbrs	r18, 6
    55d8:	16 e0       	ldi	r17, 0x06	; 6
    55da:	2f 73       	andi	r18, 0x3F	; 63
    55dc:	72 2e       	mov	r7, r18
    55de:	85 36       	cpi	r24, 0x65	; 101
    55e0:	21 f4       	brne	.+8      	; 0x55ea <vfprintf+0x10e>
    55e2:	f2 2f       	mov	r31, r18
    55e4:	f0 64       	ori	r31, 0x40	; 64
    55e6:	7f 2e       	mov	r7, r31
    55e8:	08 c0       	rjmp	.+16     	; 0x55fa <vfprintf+0x11e>
    55ea:	86 36       	cpi	r24, 0x66	; 102
    55ec:	21 f4       	brne	.+8      	; 0x55f6 <vfprintf+0x11a>
    55ee:	62 2f       	mov	r22, r18
    55f0:	60 68       	ori	r22, 0x80	; 128
    55f2:	76 2e       	mov	r7, r22
    55f4:	02 c0       	rjmp	.+4      	; 0x55fa <vfprintf+0x11e>
    55f6:	11 11       	cpse	r17, r1
    55f8:	11 50       	subi	r17, 0x01	; 1
    55fa:	77 fe       	sbrs	r7, 7
    55fc:	07 c0       	rjmp	.+14     	; 0x560c <vfprintf+0x130>
    55fe:	1c 33       	cpi	r17, 0x3C	; 60
    5600:	48 f4       	brcc	.+18     	; 0x5614 <vfprintf+0x138>
    5602:	44 24       	eor	r4, r4
    5604:	43 94       	inc	r4
    5606:	41 0e       	add	r4, r17
    5608:	27 e0       	ldi	r18, 0x07	; 7
    560a:	0b c0       	rjmp	.+22     	; 0x5622 <vfprintf+0x146>
    560c:	18 30       	cpi	r17, 0x08	; 8
    560e:	30 f4       	brcc	.+12     	; 0x561c <vfprintf+0x140>
    5610:	21 2f       	mov	r18, r17
    5612:	06 c0       	rjmp	.+12     	; 0x5620 <vfprintf+0x144>
    5614:	27 e0       	ldi	r18, 0x07	; 7
    5616:	4c e3       	ldi	r20, 0x3C	; 60
    5618:	44 2e       	mov	r4, r20
    561a:	03 c0       	rjmp	.+6      	; 0x5622 <vfprintf+0x146>
    561c:	27 e0       	ldi	r18, 0x07	; 7
    561e:	17 e0       	ldi	r17, 0x07	; 7
    5620:	41 2c       	mov	r4, r1
    5622:	56 01       	movw	r10, r12
    5624:	74 e0       	ldi	r23, 0x04	; 4
    5626:	a7 0e       	add	r10, r23
    5628:	b1 1c       	adc	r11, r1
    562a:	f6 01       	movw	r30, r12
    562c:	60 81       	ld	r22, Z
    562e:	71 81       	ldd	r23, Z+1	; 0x01
    5630:	82 81       	ldd	r24, Z+2	; 0x02
    5632:	93 81       	ldd	r25, Z+3	; 0x03
    5634:	04 2d       	mov	r16, r4
    5636:	a4 01       	movw	r20, r8
    5638:	0e 94 26 2e 	call	0x5c4c	; 0x5c4c <__ftoa_engine>
    563c:	6c 01       	movw	r12, r24
    563e:	09 81       	ldd	r16, Y+1	; 0x01
    5640:	00 ff       	sbrs	r16, 0
    5642:	02 c0       	rjmp	.+4      	; 0x5648 <vfprintf+0x16c>
    5644:	03 ff       	sbrs	r16, 3
    5646:	06 c0       	rjmp	.+12     	; 0x5654 <vfprintf+0x178>
    5648:	71 fc       	sbrc	r7, 1
    564a:	07 c0       	rjmp	.+14     	; 0x565a <vfprintf+0x17e>
    564c:	72 fc       	sbrc	r7, 2
    564e:	08 c0       	rjmp	.+16     	; 0x5660 <vfprintf+0x184>
    5650:	61 2c       	mov	r6, r1
    5652:	08 c0       	rjmp	.+16     	; 0x5664 <vfprintf+0x188>
    5654:	3d e2       	ldi	r19, 0x2D	; 45
    5656:	63 2e       	mov	r6, r19
    5658:	05 c0       	rjmp	.+10     	; 0x5664 <vfprintf+0x188>
    565a:	2b e2       	ldi	r18, 0x2B	; 43
    565c:	62 2e       	mov	r6, r18
    565e:	02 c0       	rjmp	.+4      	; 0x5664 <vfprintf+0x188>
    5660:	90 e2       	ldi	r25, 0x20	; 32
    5662:	69 2e       	mov	r6, r25
    5664:	80 2f       	mov	r24, r16
    5666:	8c 70       	andi	r24, 0x0C	; 12
    5668:	99 f1       	breq	.+102    	; 0x56d0 <vfprintf+0x1f4>
    566a:	66 20       	and	r6, r6
    566c:	11 f0       	breq	.+4      	; 0x5672 <vfprintf+0x196>
    566e:	84 e0       	ldi	r24, 0x04	; 4
    5670:	01 c0       	rjmp	.+2      	; 0x5674 <vfprintf+0x198>
    5672:	83 e0       	ldi	r24, 0x03	; 3
    5674:	85 15       	cp	r24, r5
    5676:	10 f0       	brcs	.+4      	; 0x567c <vfprintf+0x1a0>
    5678:	51 2c       	mov	r5, r1
    567a:	0b c0       	rjmp	.+22     	; 0x5692 <vfprintf+0x1b6>
    567c:	58 1a       	sub	r5, r24
    567e:	73 fc       	sbrc	r7, 3
    5680:	08 c0       	rjmp	.+16     	; 0x5692 <vfprintf+0x1b6>
    5682:	b7 01       	movw	r22, r14
    5684:	80 e2       	ldi	r24, 0x20	; 32
    5686:	90 e0       	ldi	r25, 0x00	; 0
    5688:	0e 94 14 2f 	call	0x5e28	; 0x5e28 <fputc>
    568c:	5a 94       	dec	r5
    568e:	c9 f7       	brne	.-14     	; 0x5682 <vfprintf+0x1a6>
    5690:	f3 cf       	rjmp	.-26     	; 0x5678 <vfprintf+0x19c>
    5692:	66 20       	and	r6, r6
    5694:	29 f0       	breq	.+10     	; 0x56a0 <vfprintf+0x1c4>
    5696:	b7 01       	movw	r22, r14
    5698:	86 2d       	mov	r24, r6
    569a:	90 e0       	ldi	r25, 0x00	; 0
    569c:	0e 94 14 2f 	call	0x5e28	; 0x5e28 <fputc>
    56a0:	03 fd       	sbrc	r16, 3
    56a2:	03 c0       	rjmp	.+6      	; 0x56aa <vfprintf+0x1ce>
    56a4:	0c e7       	ldi	r16, 0x7C	; 124
    56a6:	14 e0       	ldi	r17, 0x04	; 4
    56a8:	02 c0       	rjmp	.+4      	; 0x56ae <vfprintf+0x1d2>
    56aa:	08 e7       	ldi	r16, 0x78	; 120
    56ac:	14 e0       	ldi	r17, 0x04	; 4
    56ae:	f7 2d       	mov	r31, r7
    56b0:	f0 71       	andi	r31, 0x10	; 16
    56b2:	7f 2e       	mov	r7, r31
    56b4:	f8 01       	movw	r30, r16
    56b6:	84 91       	lpm	r24, Z
    56b8:	88 23       	and	r24, r24
    56ba:	09 f4       	brne	.+2      	; 0x56be <vfprintf+0x1e2>
    56bc:	76 c2       	rjmp	.+1260   	; 0x5baa <vfprintf+0x6ce>
    56be:	71 10       	cpse	r7, r1
    56c0:	80 52       	subi	r24, 0x20	; 32
    56c2:	b7 01       	movw	r22, r14
    56c4:	90 e0       	ldi	r25, 0x00	; 0
    56c6:	0e 94 14 2f 	call	0x5e28	; 0x5e28 <fputc>
    56ca:	0f 5f       	subi	r16, 0xFF	; 255
    56cc:	1f 4f       	sbci	r17, 0xFF	; 255
    56ce:	f2 cf       	rjmp	.-28     	; 0x56b4 <vfprintf+0x1d8>
    56d0:	77 fe       	sbrs	r7, 7
    56d2:	0f c0       	rjmp	.+30     	; 0x56f2 <vfprintf+0x216>
    56d4:	4c 0c       	add	r4, r12
    56d6:	04 ff       	sbrs	r16, 4
    56d8:	04 c0       	rjmp	.+8      	; 0x56e2 <vfprintf+0x206>
    56da:	8a 81       	ldd	r24, Y+2	; 0x02
    56dc:	81 33       	cpi	r24, 0x31	; 49
    56de:	09 f4       	brne	.+2      	; 0x56e2 <vfprintf+0x206>
    56e0:	4a 94       	dec	r4
    56e2:	14 14       	cp	r1, r4
    56e4:	74 f5       	brge	.+92     	; 0x5742 <vfprintf+0x266>
    56e6:	f8 e0       	ldi	r31, 0x08	; 8
    56e8:	f4 15       	cp	r31, r4
    56ea:	78 f5       	brcc	.+94     	; 0x574a <vfprintf+0x26e>
    56ec:	88 e0       	ldi	r24, 0x08	; 8
    56ee:	48 2e       	mov	r4, r24
    56f0:	2c c0       	rjmp	.+88     	; 0x574a <vfprintf+0x26e>
    56f2:	76 fc       	sbrc	r7, 6
    56f4:	2a c0       	rjmp	.+84     	; 0x574a <vfprintf+0x26e>
    56f6:	81 2f       	mov	r24, r17
    56f8:	90 e0       	ldi	r25, 0x00	; 0
    56fa:	8c 15       	cp	r24, r12
    56fc:	9d 05       	cpc	r25, r13
    56fe:	9c f0       	brlt	.+38     	; 0x5726 <vfprintf+0x24a>
    5700:	6c ef       	ldi	r22, 0xFC	; 252
    5702:	c6 16       	cp	r12, r22
    5704:	6f ef       	ldi	r22, 0xFF	; 255
    5706:	d6 06       	cpc	r13, r22
    5708:	74 f0       	brlt	.+28     	; 0x5726 <vfprintf+0x24a>
    570a:	77 2d       	mov	r23, r7
    570c:	70 68       	ori	r23, 0x80	; 128
    570e:	77 2e       	mov	r7, r23
    5710:	0a c0       	rjmp	.+20     	; 0x5726 <vfprintf+0x24a>
    5712:	e2 e0       	ldi	r30, 0x02	; 2
    5714:	f0 e0       	ldi	r31, 0x00	; 0
    5716:	ec 0f       	add	r30, r28
    5718:	fd 1f       	adc	r31, r29
    571a:	e1 0f       	add	r30, r17
    571c:	f1 1d       	adc	r31, r1
    571e:	80 81       	ld	r24, Z
    5720:	80 33       	cpi	r24, 0x30	; 48
    5722:	19 f4       	brne	.+6      	; 0x572a <vfprintf+0x24e>
    5724:	11 50       	subi	r17, 0x01	; 1
    5726:	11 11       	cpse	r17, r1
    5728:	f4 cf       	rjmp	.-24     	; 0x5712 <vfprintf+0x236>
    572a:	77 fe       	sbrs	r7, 7
    572c:	0e c0       	rjmp	.+28     	; 0x574a <vfprintf+0x26e>
    572e:	44 24       	eor	r4, r4
    5730:	43 94       	inc	r4
    5732:	41 0e       	add	r4, r17
    5734:	81 2f       	mov	r24, r17
    5736:	90 e0       	ldi	r25, 0x00	; 0
    5738:	c8 16       	cp	r12, r24
    573a:	d9 06       	cpc	r13, r25
    573c:	2c f4       	brge	.+10     	; 0x5748 <vfprintf+0x26c>
    573e:	1c 19       	sub	r17, r12
    5740:	04 c0       	rjmp	.+8      	; 0x574a <vfprintf+0x26e>
    5742:	44 24       	eor	r4, r4
    5744:	43 94       	inc	r4
    5746:	01 c0       	rjmp	.+2      	; 0x574a <vfprintf+0x26e>
    5748:	10 e0       	ldi	r17, 0x00	; 0
    574a:	77 fe       	sbrs	r7, 7
    574c:	07 c0       	rjmp	.+14     	; 0x575c <vfprintf+0x280>
    574e:	1c 14       	cp	r1, r12
    5750:	1d 04       	cpc	r1, r13
    5752:	3c f4       	brge	.+14     	; 0x5762 <vfprintf+0x286>
    5754:	96 01       	movw	r18, r12
    5756:	2f 5f       	subi	r18, 0xFF	; 255
    5758:	3f 4f       	sbci	r19, 0xFF	; 255
    575a:	05 c0       	rjmp	.+10     	; 0x5766 <vfprintf+0x28a>
    575c:	25 e0       	ldi	r18, 0x05	; 5
    575e:	30 e0       	ldi	r19, 0x00	; 0
    5760:	02 c0       	rjmp	.+4      	; 0x5766 <vfprintf+0x28a>
    5762:	21 e0       	ldi	r18, 0x01	; 1
    5764:	30 e0       	ldi	r19, 0x00	; 0
    5766:	66 20       	and	r6, r6
    5768:	11 f0       	breq	.+4      	; 0x576e <vfprintf+0x292>
    576a:	2f 5f       	subi	r18, 0xFF	; 255
    576c:	3f 4f       	sbci	r19, 0xFF	; 255
    576e:	11 23       	and	r17, r17
    5770:	31 f0       	breq	.+12     	; 0x577e <vfprintf+0x2a2>
    5772:	41 2f       	mov	r20, r17
    5774:	50 e0       	ldi	r21, 0x00	; 0
    5776:	4f 5f       	subi	r20, 0xFF	; 255
    5778:	5f 4f       	sbci	r21, 0xFF	; 255
    577a:	24 0f       	add	r18, r20
    577c:	35 1f       	adc	r19, r21
    577e:	45 2d       	mov	r20, r5
    5780:	50 e0       	ldi	r21, 0x00	; 0
    5782:	24 17       	cp	r18, r20
    5784:	35 07       	cpc	r19, r21
    5786:	14 f4       	brge	.+4      	; 0x578c <vfprintf+0x2b0>
    5788:	52 1a       	sub	r5, r18
    578a:	01 c0       	rjmp	.+2      	; 0x578e <vfprintf+0x2b2>
    578c:	51 2c       	mov	r5, r1
    578e:	87 2d       	mov	r24, r7
    5790:	89 70       	andi	r24, 0x09	; 9
    5792:	49 f4       	brne	.+18     	; 0x57a6 <vfprintf+0x2ca>
    5794:	55 20       	and	r5, r5
    5796:	39 f0       	breq	.+14     	; 0x57a6 <vfprintf+0x2ca>
    5798:	b7 01       	movw	r22, r14
    579a:	80 e2       	ldi	r24, 0x20	; 32
    579c:	90 e0       	ldi	r25, 0x00	; 0
    579e:	0e 94 14 2f 	call	0x5e28	; 0x5e28 <fputc>
    57a2:	5a 94       	dec	r5
    57a4:	f7 cf       	rjmp	.-18     	; 0x5794 <vfprintf+0x2b8>
    57a6:	66 20       	and	r6, r6
    57a8:	29 f0       	breq	.+10     	; 0x57b4 <vfprintf+0x2d8>
    57aa:	b7 01       	movw	r22, r14
    57ac:	86 2d       	mov	r24, r6
    57ae:	90 e0       	ldi	r25, 0x00	; 0
    57b0:	0e 94 14 2f 	call	0x5e28	; 0x5e28 <fputc>
    57b4:	73 fc       	sbrc	r7, 3
    57b6:	09 c0       	rjmp	.+18     	; 0x57ca <vfprintf+0x2ee>
    57b8:	55 20       	and	r5, r5
    57ba:	39 f0       	breq	.+14     	; 0x57ca <vfprintf+0x2ee>
    57bc:	b7 01       	movw	r22, r14
    57be:	80 e3       	ldi	r24, 0x30	; 48
    57c0:	90 e0       	ldi	r25, 0x00	; 0
    57c2:	0e 94 14 2f 	call	0x5e28	; 0x5e28 <fputc>
    57c6:	5a 94       	dec	r5
    57c8:	f7 cf       	rjmp	.-18     	; 0x57b8 <vfprintf+0x2dc>
    57ca:	77 fe       	sbrs	r7, 7
    57cc:	5f c0       	rjmp	.+190    	; 0x588c <vfprintf+0x3b0>
    57ce:	9c 2d       	mov	r25, r12
    57d0:	8d 2d       	mov	r24, r13
    57d2:	d7 fe       	sbrs	r13, 7
    57d4:	02 c0       	rjmp	.+4      	; 0x57da <vfprintf+0x2fe>
    57d6:	90 e0       	ldi	r25, 0x00	; 0
    57d8:	80 e0       	ldi	r24, 0x00	; 0
    57da:	69 2e       	mov	r6, r25
    57dc:	78 2e       	mov	r7, r24
    57de:	40 e0       	ldi	r20, 0x00	; 0
    57e0:	50 e0       	ldi	r21, 0x00	; 0
    57e2:	c6 01       	movw	r24, r12
    57e4:	84 19       	sub	r24, r4
    57e6:	91 09       	sbc	r25, r1
    57e8:	9d 87       	std	Y+13, r25	; 0x0d
    57ea:	8c 87       	std	Y+12, r24	; 0x0c
    57ec:	96 01       	movw	r18, r12
    57ee:	26 19       	sub	r18, r6
    57f0:	37 09       	sbc	r19, r7
    57f2:	28 0d       	add	r18, r8
    57f4:	39 1d       	adc	r19, r9
    57f6:	81 2f       	mov	r24, r17
    57f8:	90 e0       	ldi	r25, 0x00	; 0
    57fa:	ee 27       	eor	r30, r30
    57fc:	ff 27       	eor	r31, r31
    57fe:	e8 1b       	sub	r30, r24
    5800:	f9 0b       	sbc	r31, r25
    5802:	ff 87       	std	Y+15, r31	; 0x0f
    5804:	ee 87       	std	Y+14, r30	; 0x0e
    5806:	ff ef       	ldi	r31, 0xFF	; 255
    5808:	6f 16       	cp	r6, r31
    580a:	7f 06       	cpc	r7, r31
    580c:	69 f4       	brne	.+26     	; 0x5828 <vfprintf+0x34c>
    580e:	b7 01       	movw	r22, r14
    5810:	8e e2       	ldi	r24, 0x2E	; 46
    5812:	90 e0       	ldi	r25, 0x00	; 0
    5814:	2b 8b       	std	Y+19, r18	; 0x13
    5816:	3a 8b       	std	Y+18, r19	; 0x12
    5818:	48 8b       	std	Y+16, r20	; 0x10
    581a:	59 8b       	std	Y+17, r21	; 0x11
    581c:	0e 94 14 2f 	call	0x5e28	; 0x5e28 <fputc>
    5820:	59 89       	ldd	r21, Y+17	; 0x11
    5822:	48 89       	ldd	r20, Y+16	; 0x10
    5824:	3a 89       	ldd	r19, Y+18	; 0x12
    5826:	2b 89       	ldd	r18, Y+19	; 0x13
    5828:	c6 14       	cp	r12, r6
    582a:	d7 04       	cpc	r13, r7
    582c:	54 f0       	brlt	.+20     	; 0x5842 <vfprintf+0x366>
    582e:	6c 85       	ldd	r22, Y+12	; 0x0c
    5830:	7d 85       	ldd	r23, Y+13	; 0x0d
    5832:	66 15       	cp	r22, r6
    5834:	77 05       	cpc	r23, r7
    5836:	2c f4       	brge	.+10     	; 0x5842 <vfprintf+0x366>
    5838:	f9 01       	movw	r30, r18
    583a:	e4 0f       	add	r30, r20
    583c:	f5 1f       	adc	r31, r21
    583e:	81 81       	ldd	r24, Z+1	; 0x01
    5840:	01 c0       	rjmp	.+2      	; 0x5844 <vfprintf+0x368>
    5842:	80 e3       	ldi	r24, 0x30	; 48
    5844:	71 e0       	ldi	r23, 0x01	; 1
    5846:	67 1a       	sub	r6, r23
    5848:	71 08       	sbc	r7, r1
    584a:	4f 5f       	subi	r20, 0xFF	; 255
    584c:	5f 4f       	sbci	r21, 0xFF	; 255
    584e:	ee 85       	ldd	r30, Y+14	; 0x0e
    5850:	ff 85       	ldd	r31, Y+15	; 0x0f
    5852:	6e 16       	cp	r6, r30
    5854:	7f 06       	cpc	r7, r31
    5856:	6c f0       	brlt	.+26     	; 0x5872 <vfprintf+0x396>
    5858:	b7 01       	movw	r22, r14
    585a:	90 e0       	ldi	r25, 0x00	; 0
    585c:	2b 8b       	std	Y+19, r18	; 0x13
    585e:	3a 8b       	std	Y+18, r19	; 0x12
    5860:	48 8b       	std	Y+16, r20	; 0x10
    5862:	59 8b       	std	Y+17, r21	; 0x11
    5864:	0e 94 14 2f 	call	0x5e28	; 0x5e28 <fputc>
    5868:	2b 89       	ldd	r18, Y+19	; 0x13
    586a:	3a 89       	ldd	r19, Y+18	; 0x12
    586c:	48 89       	ldd	r20, Y+16	; 0x10
    586e:	59 89       	ldd	r21, Y+17	; 0x11
    5870:	ca cf       	rjmp	.-108    	; 0x5806 <vfprintf+0x32a>
    5872:	6c 14       	cp	r6, r12
    5874:	7d 04       	cpc	r7, r13
    5876:	39 f4       	brne	.+14     	; 0x5886 <vfprintf+0x3aa>
    5878:	9a 81       	ldd	r25, Y+2	; 0x02
    587a:	96 33       	cpi	r25, 0x36	; 54
    587c:	18 f4       	brcc	.+6      	; 0x5884 <vfprintf+0x3a8>
    587e:	95 33       	cpi	r25, 0x35	; 53
    5880:	11 f4       	brne	.+4      	; 0x5886 <vfprintf+0x3aa>
    5882:	04 ff       	sbrs	r16, 4
    5884:	81 e3       	ldi	r24, 0x31	; 49
    5886:	b7 01       	movw	r22, r14
    5888:	90 e0       	ldi	r25, 0x00	; 0
    588a:	4b c0       	rjmp	.+150    	; 0x5922 <vfprintf+0x446>
    588c:	8a 81       	ldd	r24, Y+2	; 0x02
    588e:	81 33       	cpi	r24, 0x31	; 49
    5890:	09 f0       	breq	.+2      	; 0x5894 <vfprintf+0x3b8>
    5892:	0f 7e       	andi	r16, 0xEF	; 239
    5894:	b7 01       	movw	r22, r14
    5896:	90 e0       	ldi	r25, 0x00	; 0
    5898:	0e 94 14 2f 	call	0x5e28	; 0x5e28 <fputc>
    589c:	11 11       	cpse	r17, r1
    589e:	05 c0       	rjmp	.+10     	; 0x58aa <vfprintf+0x3ce>
    58a0:	74 fe       	sbrs	r7, 4
    58a2:	18 c0       	rjmp	.+48     	; 0x58d4 <vfprintf+0x3f8>
    58a4:	85 e4       	ldi	r24, 0x45	; 69
    58a6:	90 e0       	ldi	r25, 0x00	; 0
    58a8:	17 c0       	rjmp	.+46     	; 0x58d8 <vfprintf+0x3fc>
    58aa:	b7 01       	movw	r22, r14
    58ac:	8e e2       	ldi	r24, 0x2E	; 46
    58ae:	90 e0       	ldi	r25, 0x00	; 0
    58b0:	0e 94 14 2f 	call	0x5e28	; 0x5e28 <fputc>
    58b4:	82 e0       	ldi	r24, 0x02	; 2
    58b6:	66 24       	eor	r6, r6
    58b8:	63 94       	inc	r6
    58ba:	68 0e       	add	r6, r24
    58bc:	f4 01       	movw	r30, r8
    58be:	e8 0f       	add	r30, r24
    58c0:	f1 1d       	adc	r31, r1
    58c2:	80 81       	ld	r24, Z
    58c4:	b7 01       	movw	r22, r14
    58c6:	90 e0       	ldi	r25, 0x00	; 0
    58c8:	0e 94 14 2f 	call	0x5e28	; 0x5e28 <fputc>
    58cc:	11 50       	subi	r17, 0x01	; 1
    58ce:	41 f3       	breq	.-48     	; 0x58a0 <vfprintf+0x3c4>
    58d0:	86 2d       	mov	r24, r6
    58d2:	f1 cf       	rjmp	.-30     	; 0x58b6 <vfprintf+0x3da>
    58d4:	85 e6       	ldi	r24, 0x65	; 101
    58d6:	90 e0       	ldi	r25, 0x00	; 0
    58d8:	b7 01       	movw	r22, r14
    58da:	0e 94 14 2f 	call	0x5e28	; 0x5e28 <fputc>
    58de:	d7 fc       	sbrc	r13, 7
    58e0:	05 c0       	rjmp	.+10     	; 0x58ec <vfprintf+0x410>
    58e2:	c1 14       	cp	r12, r1
    58e4:	d1 04       	cpc	r13, r1
    58e6:	39 f4       	brne	.+14     	; 0x58f6 <vfprintf+0x41a>
    58e8:	04 ff       	sbrs	r16, 4
    58ea:	05 c0       	rjmp	.+10     	; 0x58f6 <vfprintf+0x41a>
    58ec:	d1 94       	neg	r13
    58ee:	c1 94       	neg	r12
    58f0:	d1 08       	sbc	r13, r1
    58f2:	8d e2       	ldi	r24, 0x2D	; 45
    58f4:	01 c0       	rjmp	.+2      	; 0x58f8 <vfprintf+0x41c>
    58f6:	8b e2       	ldi	r24, 0x2B	; 43
    58f8:	b7 01       	movw	r22, r14
    58fa:	90 e0       	ldi	r25, 0x00	; 0
    58fc:	0e 94 14 2f 	call	0x5e28	; 0x5e28 <fputc>
    5900:	80 e3       	ldi	r24, 0x30	; 48
    5902:	6a e0       	ldi	r22, 0x0A	; 10
    5904:	c6 16       	cp	r12, r22
    5906:	d1 04       	cpc	r13, r1
    5908:	2c f0       	brlt	.+10     	; 0x5914 <vfprintf+0x438>
    590a:	8f 5f       	subi	r24, 0xFF	; 255
    590c:	fa e0       	ldi	r31, 0x0A	; 10
    590e:	cf 1a       	sub	r12, r31
    5910:	d1 08       	sbc	r13, r1
    5912:	f7 cf       	rjmp	.-18     	; 0x5902 <vfprintf+0x426>
    5914:	b7 01       	movw	r22, r14
    5916:	90 e0       	ldi	r25, 0x00	; 0
    5918:	0e 94 14 2f 	call	0x5e28	; 0x5e28 <fputc>
    591c:	b7 01       	movw	r22, r14
    591e:	c6 01       	movw	r24, r12
    5920:	c0 96       	adiw	r24, 0x30	; 48
    5922:	0e 94 14 2f 	call	0x5e28	; 0x5e28 <fputc>
    5926:	41 c1       	rjmp	.+642    	; 0x5baa <vfprintf+0x6ce>
    5928:	83 36       	cpi	r24, 0x63	; 99
    592a:	31 f0       	breq	.+12     	; 0x5938 <vfprintf+0x45c>
    592c:	83 37       	cpi	r24, 0x73	; 115
    592e:	79 f0       	breq	.+30     	; 0x594e <vfprintf+0x472>
    5930:	83 35       	cpi	r24, 0x53	; 83
    5932:	09 f0       	breq	.+2      	; 0x5936 <vfprintf+0x45a>
    5934:	58 c0       	rjmp	.+176    	; 0x59e6 <vfprintf+0x50a>
    5936:	21 c0       	rjmp	.+66     	; 0x597a <vfprintf+0x49e>
    5938:	56 01       	movw	r10, r12
    593a:	72 e0       	ldi	r23, 0x02	; 2
    593c:	a7 0e       	add	r10, r23
    593e:	b1 1c       	adc	r11, r1
    5940:	f6 01       	movw	r30, r12
    5942:	80 81       	ld	r24, Z
    5944:	89 83       	std	Y+1, r24	; 0x01
    5946:	01 e0       	ldi	r16, 0x01	; 1
    5948:	10 e0       	ldi	r17, 0x00	; 0
    594a:	64 01       	movw	r12, r8
    594c:	14 c0       	rjmp	.+40     	; 0x5976 <vfprintf+0x49a>
    594e:	56 01       	movw	r10, r12
    5950:	f2 e0       	ldi	r31, 0x02	; 2
    5952:	af 0e       	add	r10, r31
    5954:	b1 1c       	adc	r11, r1
    5956:	f6 01       	movw	r30, r12
    5958:	c0 80       	ld	r12, Z
    595a:	d1 80       	ldd	r13, Z+1	; 0x01
    595c:	26 ff       	sbrs	r18, 6
    595e:	03 c0       	rjmp	.+6      	; 0x5966 <vfprintf+0x48a>
    5960:	61 2f       	mov	r22, r17
    5962:	70 e0       	ldi	r23, 0x00	; 0
    5964:	02 c0       	rjmp	.+4      	; 0x596a <vfprintf+0x48e>
    5966:	6f ef       	ldi	r22, 0xFF	; 255
    5968:	7f ef       	ldi	r23, 0xFF	; 255
    596a:	c6 01       	movw	r24, r12
    596c:	2b 8b       	std	Y+19, r18	; 0x13
    596e:	0e 94 09 2f 	call	0x5e12	; 0x5e12 <strnlen>
    5972:	8c 01       	movw	r16, r24
    5974:	2b 89       	ldd	r18, Y+19	; 0x13
    5976:	2f 77       	andi	r18, 0x7F	; 127
    5978:	15 c0       	rjmp	.+42     	; 0x59a4 <vfprintf+0x4c8>
    597a:	56 01       	movw	r10, r12
    597c:	f2 e0       	ldi	r31, 0x02	; 2
    597e:	af 0e       	add	r10, r31
    5980:	b1 1c       	adc	r11, r1
    5982:	f6 01       	movw	r30, r12
    5984:	c0 80       	ld	r12, Z
    5986:	d1 80       	ldd	r13, Z+1	; 0x01
    5988:	26 ff       	sbrs	r18, 6
    598a:	03 c0       	rjmp	.+6      	; 0x5992 <vfprintf+0x4b6>
    598c:	61 2f       	mov	r22, r17
    598e:	70 e0       	ldi	r23, 0x00	; 0
    5990:	02 c0       	rjmp	.+4      	; 0x5996 <vfprintf+0x4ba>
    5992:	6f ef       	ldi	r22, 0xFF	; 255
    5994:	7f ef       	ldi	r23, 0xFF	; 255
    5996:	c6 01       	movw	r24, r12
    5998:	2b 8b       	std	Y+19, r18	; 0x13
    599a:	0e 94 fe 2e 	call	0x5dfc	; 0x5dfc <strnlen_P>
    599e:	8c 01       	movw	r16, r24
    59a0:	2b 89       	ldd	r18, Y+19	; 0x13
    59a2:	20 68       	ori	r18, 0x80	; 128
    59a4:	72 2e       	mov	r7, r18
    59a6:	23 fd       	sbrc	r18, 3
    59a8:	1a c0       	rjmp	.+52     	; 0x59de <vfprintf+0x502>
    59aa:	85 2d       	mov	r24, r5
    59ac:	90 e0       	ldi	r25, 0x00	; 0
    59ae:	08 17       	cp	r16, r24
    59b0:	19 07       	cpc	r17, r25
    59b2:	a8 f4       	brcc	.+42     	; 0x59de <vfprintf+0x502>
    59b4:	b7 01       	movw	r22, r14
    59b6:	80 e2       	ldi	r24, 0x20	; 32
    59b8:	90 e0       	ldi	r25, 0x00	; 0
    59ba:	0e 94 14 2f 	call	0x5e28	; 0x5e28 <fputc>
    59be:	5a 94       	dec	r5
    59c0:	f4 cf       	rjmp	.-24     	; 0x59aa <vfprintf+0x4ce>
    59c2:	f6 01       	movw	r30, r12
    59c4:	77 fc       	sbrc	r7, 7
    59c6:	85 91       	lpm	r24, Z+
    59c8:	77 fe       	sbrs	r7, 7
    59ca:	81 91       	ld	r24, Z+
    59cc:	6f 01       	movw	r12, r30
    59ce:	b7 01       	movw	r22, r14
    59d0:	90 e0       	ldi	r25, 0x00	; 0
    59d2:	0e 94 14 2f 	call	0x5e28	; 0x5e28 <fputc>
    59d6:	51 10       	cpse	r5, r1
    59d8:	5a 94       	dec	r5
    59da:	01 50       	subi	r16, 0x01	; 1
    59dc:	11 09       	sbc	r17, r1
    59de:	01 15       	cp	r16, r1
    59e0:	11 05       	cpc	r17, r1
    59e2:	79 f7       	brne	.-34     	; 0x59c2 <vfprintf+0x4e6>
    59e4:	e2 c0       	rjmp	.+452    	; 0x5baa <vfprintf+0x6ce>
    59e6:	84 36       	cpi	r24, 0x64	; 100
    59e8:	11 f0       	breq	.+4      	; 0x59ee <vfprintf+0x512>
    59ea:	89 36       	cpi	r24, 0x69	; 105
    59ec:	51 f5       	brne	.+84     	; 0x5a42 <vfprintf+0x566>
    59ee:	56 01       	movw	r10, r12
    59f0:	27 ff       	sbrs	r18, 7
    59f2:	09 c0       	rjmp	.+18     	; 0x5a06 <vfprintf+0x52a>
    59f4:	f4 e0       	ldi	r31, 0x04	; 4
    59f6:	af 0e       	add	r10, r31
    59f8:	b1 1c       	adc	r11, r1
    59fa:	f6 01       	movw	r30, r12
    59fc:	60 81       	ld	r22, Z
    59fe:	71 81       	ldd	r23, Z+1	; 0x01
    5a00:	82 81       	ldd	r24, Z+2	; 0x02
    5a02:	93 81       	ldd	r25, Z+3	; 0x03
    5a04:	0a c0       	rjmp	.+20     	; 0x5a1a <vfprintf+0x53e>
    5a06:	f2 e0       	ldi	r31, 0x02	; 2
    5a08:	af 0e       	add	r10, r31
    5a0a:	b1 1c       	adc	r11, r1
    5a0c:	f6 01       	movw	r30, r12
    5a0e:	60 81       	ld	r22, Z
    5a10:	71 81       	ldd	r23, Z+1	; 0x01
    5a12:	88 27       	eor	r24, r24
    5a14:	77 fd       	sbrc	r23, 7
    5a16:	80 95       	com	r24
    5a18:	98 2f       	mov	r25, r24
    5a1a:	02 2f       	mov	r16, r18
    5a1c:	0f 76       	andi	r16, 0x6F	; 111
    5a1e:	97 ff       	sbrs	r25, 7
    5a20:	08 c0       	rjmp	.+16     	; 0x5a32 <vfprintf+0x556>
    5a22:	90 95       	com	r25
    5a24:	80 95       	com	r24
    5a26:	70 95       	com	r23
    5a28:	61 95       	neg	r22
    5a2a:	7f 4f       	sbci	r23, 0xFF	; 255
    5a2c:	8f 4f       	sbci	r24, 0xFF	; 255
    5a2e:	9f 4f       	sbci	r25, 0xFF	; 255
    5a30:	00 68       	ori	r16, 0x80	; 128
    5a32:	2a e0       	ldi	r18, 0x0A	; 10
    5a34:	30 e0       	ldi	r19, 0x00	; 0
    5a36:	a4 01       	movw	r20, r8
    5a38:	0e 94 68 2f 	call	0x5ed0	; 0x5ed0 <__ultoa_invert>
    5a3c:	c8 2e       	mov	r12, r24
    5a3e:	c8 18       	sub	r12, r8
    5a40:	3e c0       	rjmp	.+124    	; 0x5abe <vfprintf+0x5e2>
    5a42:	02 2f       	mov	r16, r18
    5a44:	85 37       	cpi	r24, 0x75	; 117
    5a46:	21 f4       	brne	.+8      	; 0x5a50 <vfprintf+0x574>
    5a48:	0f 7e       	andi	r16, 0xEF	; 239
    5a4a:	2a e0       	ldi	r18, 0x0A	; 10
    5a4c:	30 e0       	ldi	r19, 0x00	; 0
    5a4e:	1d c0       	rjmp	.+58     	; 0x5a8a <vfprintf+0x5ae>
    5a50:	09 7f       	andi	r16, 0xF9	; 249
    5a52:	8f 36       	cpi	r24, 0x6F	; 111
    5a54:	91 f0       	breq	.+36     	; 0x5a7a <vfprintf+0x59e>
    5a56:	18 f4       	brcc	.+6      	; 0x5a5e <vfprintf+0x582>
    5a58:	88 35       	cpi	r24, 0x58	; 88
    5a5a:	59 f0       	breq	.+22     	; 0x5a72 <vfprintf+0x596>
    5a5c:	b0 c0       	rjmp	.+352    	; 0x5bbe <vfprintf+0x6e2>
    5a5e:	80 37       	cpi	r24, 0x70	; 112
    5a60:	19 f0       	breq	.+6      	; 0x5a68 <vfprintf+0x58c>
    5a62:	88 37       	cpi	r24, 0x78	; 120
    5a64:	11 f0       	breq	.+4      	; 0x5a6a <vfprintf+0x58e>
    5a66:	ab c0       	rjmp	.+342    	; 0x5bbe <vfprintf+0x6e2>
    5a68:	00 61       	ori	r16, 0x10	; 16
    5a6a:	04 ff       	sbrs	r16, 4
    5a6c:	09 c0       	rjmp	.+18     	; 0x5a80 <vfprintf+0x5a4>
    5a6e:	04 60       	ori	r16, 0x04	; 4
    5a70:	07 c0       	rjmp	.+14     	; 0x5a80 <vfprintf+0x5a4>
    5a72:	24 ff       	sbrs	r18, 4
    5a74:	08 c0       	rjmp	.+16     	; 0x5a86 <vfprintf+0x5aa>
    5a76:	06 60       	ori	r16, 0x06	; 6
    5a78:	06 c0       	rjmp	.+12     	; 0x5a86 <vfprintf+0x5aa>
    5a7a:	28 e0       	ldi	r18, 0x08	; 8
    5a7c:	30 e0       	ldi	r19, 0x00	; 0
    5a7e:	05 c0       	rjmp	.+10     	; 0x5a8a <vfprintf+0x5ae>
    5a80:	20 e1       	ldi	r18, 0x10	; 16
    5a82:	30 e0       	ldi	r19, 0x00	; 0
    5a84:	02 c0       	rjmp	.+4      	; 0x5a8a <vfprintf+0x5ae>
    5a86:	20 e1       	ldi	r18, 0x10	; 16
    5a88:	32 e0       	ldi	r19, 0x02	; 2
    5a8a:	56 01       	movw	r10, r12
    5a8c:	07 ff       	sbrs	r16, 7
    5a8e:	09 c0       	rjmp	.+18     	; 0x5aa2 <vfprintf+0x5c6>
    5a90:	f4 e0       	ldi	r31, 0x04	; 4
    5a92:	af 0e       	add	r10, r31
    5a94:	b1 1c       	adc	r11, r1
    5a96:	f6 01       	movw	r30, r12
    5a98:	60 81       	ld	r22, Z
    5a9a:	71 81       	ldd	r23, Z+1	; 0x01
    5a9c:	82 81       	ldd	r24, Z+2	; 0x02
    5a9e:	93 81       	ldd	r25, Z+3	; 0x03
    5aa0:	08 c0       	rjmp	.+16     	; 0x5ab2 <vfprintf+0x5d6>
    5aa2:	f2 e0       	ldi	r31, 0x02	; 2
    5aa4:	af 0e       	add	r10, r31
    5aa6:	b1 1c       	adc	r11, r1
    5aa8:	f6 01       	movw	r30, r12
    5aaa:	60 81       	ld	r22, Z
    5aac:	71 81       	ldd	r23, Z+1	; 0x01
    5aae:	80 e0       	ldi	r24, 0x00	; 0
    5ab0:	90 e0       	ldi	r25, 0x00	; 0
    5ab2:	a4 01       	movw	r20, r8
    5ab4:	0e 94 68 2f 	call	0x5ed0	; 0x5ed0 <__ultoa_invert>
    5ab8:	c8 2e       	mov	r12, r24
    5aba:	c8 18       	sub	r12, r8
    5abc:	0f 77       	andi	r16, 0x7F	; 127
    5abe:	06 ff       	sbrs	r16, 6
    5ac0:	0b c0       	rjmp	.+22     	; 0x5ad8 <vfprintf+0x5fc>
    5ac2:	20 2f       	mov	r18, r16
    5ac4:	2e 7f       	andi	r18, 0xFE	; 254
    5ac6:	c1 16       	cp	r12, r17
    5ac8:	50 f4       	brcc	.+20     	; 0x5ade <vfprintf+0x602>
    5aca:	04 ff       	sbrs	r16, 4
    5acc:	0a c0       	rjmp	.+20     	; 0x5ae2 <vfprintf+0x606>
    5ace:	02 fd       	sbrc	r16, 2
    5ad0:	08 c0       	rjmp	.+16     	; 0x5ae2 <vfprintf+0x606>
    5ad2:	20 2f       	mov	r18, r16
    5ad4:	2e 7e       	andi	r18, 0xEE	; 238
    5ad6:	05 c0       	rjmp	.+10     	; 0x5ae2 <vfprintf+0x606>
    5ad8:	dc 2c       	mov	r13, r12
    5ada:	20 2f       	mov	r18, r16
    5adc:	03 c0       	rjmp	.+6      	; 0x5ae4 <vfprintf+0x608>
    5ade:	dc 2c       	mov	r13, r12
    5ae0:	01 c0       	rjmp	.+2      	; 0x5ae4 <vfprintf+0x608>
    5ae2:	d1 2e       	mov	r13, r17
    5ae4:	24 ff       	sbrs	r18, 4
    5ae6:	0d c0       	rjmp	.+26     	; 0x5b02 <vfprintf+0x626>
    5ae8:	fe 01       	movw	r30, r28
    5aea:	ec 0d       	add	r30, r12
    5aec:	f1 1d       	adc	r31, r1
    5aee:	80 81       	ld	r24, Z
    5af0:	80 33       	cpi	r24, 0x30	; 48
    5af2:	11 f4       	brne	.+4      	; 0x5af8 <vfprintf+0x61c>
    5af4:	29 7e       	andi	r18, 0xE9	; 233
    5af6:	09 c0       	rjmp	.+18     	; 0x5b0a <vfprintf+0x62e>
    5af8:	22 ff       	sbrs	r18, 2
    5afa:	06 c0       	rjmp	.+12     	; 0x5b08 <vfprintf+0x62c>
    5afc:	d3 94       	inc	r13
    5afe:	d3 94       	inc	r13
    5b00:	04 c0       	rjmp	.+8      	; 0x5b0a <vfprintf+0x62e>
    5b02:	82 2f       	mov	r24, r18
    5b04:	86 78       	andi	r24, 0x86	; 134
    5b06:	09 f0       	breq	.+2      	; 0x5b0a <vfprintf+0x62e>
    5b08:	d3 94       	inc	r13
    5b0a:	23 fd       	sbrc	r18, 3
    5b0c:	13 c0       	rjmp	.+38     	; 0x5b34 <vfprintf+0x658>
    5b0e:	20 ff       	sbrs	r18, 0
    5b10:	06 c0       	rjmp	.+12     	; 0x5b1e <vfprintf+0x642>
    5b12:	1c 2d       	mov	r17, r12
    5b14:	d5 14       	cp	r13, r5
    5b16:	18 f4       	brcc	.+6      	; 0x5b1e <vfprintf+0x642>
    5b18:	15 0d       	add	r17, r5
    5b1a:	1d 19       	sub	r17, r13
    5b1c:	d5 2c       	mov	r13, r5
    5b1e:	d5 14       	cp	r13, r5
    5b20:	68 f4       	brcc	.+26     	; 0x5b3c <vfprintf+0x660>
    5b22:	b7 01       	movw	r22, r14
    5b24:	80 e2       	ldi	r24, 0x20	; 32
    5b26:	90 e0       	ldi	r25, 0x00	; 0
    5b28:	2b 8b       	std	Y+19, r18	; 0x13
    5b2a:	0e 94 14 2f 	call	0x5e28	; 0x5e28 <fputc>
    5b2e:	d3 94       	inc	r13
    5b30:	2b 89       	ldd	r18, Y+19	; 0x13
    5b32:	f5 cf       	rjmp	.-22     	; 0x5b1e <vfprintf+0x642>
    5b34:	d5 14       	cp	r13, r5
    5b36:	10 f4       	brcc	.+4      	; 0x5b3c <vfprintf+0x660>
    5b38:	5d 18       	sub	r5, r13
    5b3a:	01 c0       	rjmp	.+2      	; 0x5b3e <vfprintf+0x662>
    5b3c:	51 2c       	mov	r5, r1
    5b3e:	24 ff       	sbrs	r18, 4
    5b40:	12 c0       	rjmp	.+36     	; 0x5b66 <vfprintf+0x68a>
    5b42:	b7 01       	movw	r22, r14
    5b44:	80 e3       	ldi	r24, 0x30	; 48
    5b46:	90 e0       	ldi	r25, 0x00	; 0
    5b48:	2b 8b       	std	Y+19, r18	; 0x13
    5b4a:	0e 94 14 2f 	call	0x5e28	; 0x5e28 <fputc>
    5b4e:	2b 89       	ldd	r18, Y+19	; 0x13
    5b50:	22 ff       	sbrs	r18, 2
    5b52:	17 c0       	rjmp	.+46     	; 0x5b82 <vfprintf+0x6a6>
    5b54:	21 ff       	sbrs	r18, 1
    5b56:	03 c0       	rjmp	.+6      	; 0x5b5e <vfprintf+0x682>
    5b58:	88 e5       	ldi	r24, 0x58	; 88
    5b5a:	90 e0       	ldi	r25, 0x00	; 0
    5b5c:	02 c0       	rjmp	.+4      	; 0x5b62 <vfprintf+0x686>
    5b5e:	88 e7       	ldi	r24, 0x78	; 120
    5b60:	90 e0       	ldi	r25, 0x00	; 0
    5b62:	b7 01       	movw	r22, r14
    5b64:	0c c0       	rjmp	.+24     	; 0x5b7e <vfprintf+0x6a2>
    5b66:	82 2f       	mov	r24, r18
    5b68:	86 78       	andi	r24, 0x86	; 134
    5b6a:	59 f0       	breq	.+22     	; 0x5b82 <vfprintf+0x6a6>
    5b6c:	21 fd       	sbrc	r18, 1
    5b6e:	02 c0       	rjmp	.+4      	; 0x5b74 <vfprintf+0x698>
    5b70:	80 e2       	ldi	r24, 0x20	; 32
    5b72:	01 c0       	rjmp	.+2      	; 0x5b76 <vfprintf+0x69a>
    5b74:	8b e2       	ldi	r24, 0x2B	; 43
    5b76:	27 fd       	sbrc	r18, 7
    5b78:	8d e2       	ldi	r24, 0x2D	; 45
    5b7a:	b7 01       	movw	r22, r14
    5b7c:	90 e0       	ldi	r25, 0x00	; 0
    5b7e:	0e 94 14 2f 	call	0x5e28	; 0x5e28 <fputc>
    5b82:	c1 16       	cp	r12, r17
    5b84:	38 f4       	brcc	.+14     	; 0x5b94 <vfprintf+0x6b8>
    5b86:	b7 01       	movw	r22, r14
    5b88:	80 e3       	ldi	r24, 0x30	; 48
    5b8a:	90 e0       	ldi	r25, 0x00	; 0
    5b8c:	0e 94 14 2f 	call	0x5e28	; 0x5e28 <fputc>
    5b90:	11 50       	subi	r17, 0x01	; 1
    5b92:	f7 cf       	rjmp	.-18     	; 0x5b82 <vfprintf+0x6a6>
    5b94:	ca 94       	dec	r12
    5b96:	f4 01       	movw	r30, r8
    5b98:	ec 0d       	add	r30, r12
    5b9a:	f1 1d       	adc	r31, r1
    5b9c:	80 81       	ld	r24, Z
    5b9e:	b7 01       	movw	r22, r14
    5ba0:	90 e0       	ldi	r25, 0x00	; 0
    5ba2:	0e 94 14 2f 	call	0x5e28	; 0x5e28 <fputc>
    5ba6:	c1 10       	cpse	r12, r1
    5ba8:	f5 cf       	rjmp	.-22     	; 0x5b94 <vfprintf+0x6b8>
    5baa:	55 20       	and	r5, r5
    5bac:	09 f4       	brne	.+2      	; 0x5bb0 <vfprintf+0x6d4>
    5bae:	c2 cc       	rjmp	.-1660   	; 0x5534 <vfprintf+0x58>
    5bb0:	b7 01       	movw	r22, r14
    5bb2:	80 e2       	ldi	r24, 0x20	; 32
    5bb4:	90 e0       	ldi	r25, 0x00	; 0
    5bb6:	0e 94 14 2f 	call	0x5e28	; 0x5e28 <fputc>
    5bba:	5a 94       	dec	r5
    5bbc:	f6 cf       	rjmp	.-20     	; 0x5baa <vfprintf+0x6ce>
    5bbe:	f7 01       	movw	r30, r14
    5bc0:	86 81       	ldd	r24, Z+6	; 0x06
    5bc2:	97 81       	ldd	r25, Z+7	; 0x07
    5bc4:	02 c0       	rjmp	.+4      	; 0x5bca <vfprintf+0x6ee>
    5bc6:	8f ef       	ldi	r24, 0xFF	; 255
    5bc8:	9f ef       	ldi	r25, 0xFF	; 255
    5bca:	63 96       	adiw	r28, 0x13	; 19
    5bcc:	e2 e1       	ldi	r30, 0x12	; 18
    5bce:	0c 94 0b 2e 	jmp	0x5c16	; 0x5c16 <__epilogue_restores__>

00005bd2 <__tablejump2__>:
    5bd2:	ee 0f       	add	r30, r30
    5bd4:	ff 1f       	adc	r31, r31

00005bd6 <__tablejump__>:
    5bd6:	05 90       	lpm	r0, Z+
    5bd8:	f4 91       	lpm	r31, Z
    5bda:	e0 2d       	mov	r30, r0
    5bdc:	09 94       	ijmp

00005bde <__prologue_saves__>:
    5bde:	2f 92       	push	r2
    5be0:	3f 92       	push	r3
    5be2:	4f 92       	push	r4
    5be4:	5f 92       	push	r5
    5be6:	6f 92       	push	r6
    5be8:	7f 92       	push	r7
    5bea:	8f 92       	push	r8
    5bec:	9f 92       	push	r9
    5bee:	af 92       	push	r10
    5bf0:	bf 92       	push	r11
    5bf2:	cf 92       	push	r12
    5bf4:	df 92       	push	r13
    5bf6:	ef 92       	push	r14
    5bf8:	ff 92       	push	r15
    5bfa:	0f 93       	push	r16
    5bfc:	1f 93       	push	r17
    5bfe:	cf 93       	push	r28
    5c00:	df 93       	push	r29
    5c02:	cd b7       	in	r28, 0x3d	; 61
    5c04:	de b7       	in	r29, 0x3e	; 62
    5c06:	ca 1b       	sub	r28, r26
    5c08:	db 0b       	sbc	r29, r27
    5c0a:	0f b6       	in	r0, 0x3f	; 63
    5c0c:	f8 94       	cli
    5c0e:	de bf       	out	0x3e, r29	; 62
    5c10:	0f be       	out	0x3f, r0	; 63
    5c12:	cd bf       	out	0x3d, r28	; 61
    5c14:	09 94       	ijmp

00005c16 <__epilogue_restores__>:
    5c16:	2a 88       	ldd	r2, Y+18	; 0x12
    5c18:	39 88       	ldd	r3, Y+17	; 0x11
    5c1a:	48 88       	ldd	r4, Y+16	; 0x10
    5c1c:	5f 84       	ldd	r5, Y+15	; 0x0f
    5c1e:	6e 84       	ldd	r6, Y+14	; 0x0e
    5c20:	7d 84       	ldd	r7, Y+13	; 0x0d
    5c22:	8c 84       	ldd	r8, Y+12	; 0x0c
    5c24:	9b 84       	ldd	r9, Y+11	; 0x0b
    5c26:	aa 84       	ldd	r10, Y+10	; 0x0a
    5c28:	b9 84       	ldd	r11, Y+9	; 0x09
    5c2a:	c8 84       	ldd	r12, Y+8	; 0x08
    5c2c:	df 80       	ldd	r13, Y+7	; 0x07
    5c2e:	ee 80       	ldd	r14, Y+6	; 0x06
    5c30:	fd 80       	ldd	r15, Y+5	; 0x05
    5c32:	0c 81       	ldd	r16, Y+4	; 0x04
    5c34:	1b 81       	ldd	r17, Y+3	; 0x03
    5c36:	aa 81       	ldd	r26, Y+2	; 0x02
    5c38:	b9 81       	ldd	r27, Y+1	; 0x01
    5c3a:	ce 0f       	add	r28, r30
    5c3c:	d1 1d       	adc	r29, r1
    5c3e:	0f b6       	in	r0, 0x3f	; 63
    5c40:	f8 94       	cli
    5c42:	de bf       	out	0x3e, r29	; 62
    5c44:	0f be       	out	0x3f, r0	; 63
    5c46:	cd bf       	out	0x3d, r28	; 61
    5c48:	ed 01       	movw	r28, r26
    5c4a:	08 95       	ret

00005c4c <__ftoa_engine>:
    5c4c:	28 30       	cpi	r18, 0x08	; 8
    5c4e:	08 f0       	brcs	.+2      	; 0x5c52 <__ftoa_engine+0x6>
    5c50:	27 e0       	ldi	r18, 0x07	; 7
    5c52:	33 27       	eor	r19, r19
    5c54:	da 01       	movw	r26, r20
    5c56:	99 0f       	add	r25, r25
    5c58:	31 1d       	adc	r19, r1
    5c5a:	87 fd       	sbrc	r24, 7
    5c5c:	91 60       	ori	r25, 0x01	; 1
    5c5e:	00 96       	adiw	r24, 0x00	; 0
    5c60:	61 05       	cpc	r22, r1
    5c62:	71 05       	cpc	r23, r1
    5c64:	39 f4       	brne	.+14     	; 0x5c74 <__ftoa_engine+0x28>
    5c66:	32 60       	ori	r19, 0x02	; 2
    5c68:	2e 5f       	subi	r18, 0xFE	; 254
    5c6a:	3d 93       	st	X+, r19
    5c6c:	30 e3       	ldi	r19, 0x30	; 48
    5c6e:	2a 95       	dec	r18
    5c70:	e1 f7       	brne	.-8      	; 0x5c6a <__ftoa_engine+0x1e>
    5c72:	08 95       	ret
    5c74:	9f 3f       	cpi	r25, 0xFF	; 255
    5c76:	30 f0       	brcs	.+12     	; 0x5c84 <__ftoa_engine+0x38>
    5c78:	80 38       	cpi	r24, 0x80	; 128
    5c7a:	71 05       	cpc	r23, r1
    5c7c:	61 05       	cpc	r22, r1
    5c7e:	09 f0       	breq	.+2      	; 0x5c82 <__ftoa_engine+0x36>
    5c80:	3c 5f       	subi	r19, 0xFC	; 252
    5c82:	3c 5f       	subi	r19, 0xFC	; 252
    5c84:	3d 93       	st	X+, r19
    5c86:	91 30       	cpi	r25, 0x01	; 1
    5c88:	08 f0       	brcs	.+2      	; 0x5c8c <__ftoa_engine+0x40>
    5c8a:	80 68       	ori	r24, 0x80	; 128
    5c8c:	91 1d       	adc	r25, r1
    5c8e:	df 93       	push	r29
    5c90:	cf 93       	push	r28
    5c92:	1f 93       	push	r17
    5c94:	0f 93       	push	r16
    5c96:	ff 92       	push	r15
    5c98:	ef 92       	push	r14
    5c9a:	19 2f       	mov	r17, r25
    5c9c:	98 7f       	andi	r25, 0xF8	; 248
    5c9e:	96 95       	lsr	r25
    5ca0:	e9 2f       	mov	r30, r25
    5ca2:	96 95       	lsr	r25
    5ca4:	96 95       	lsr	r25
    5ca6:	e9 0f       	add	r30, r25
    5ca8:	ff 27       	eor	r31, r31
    5caa:	e6 52       	subi	r30, 0x26	; 38
    5cac:	fb 4f       	sbci	r31, 0xFB	; 251
    5cae:	99 27       	eor	r25, r25
    5cb0:	33 27       	eor	r19, r19
    5cb2:	ee 24       	eor	r14, r14
    5cb4:	ff 24       	eor	r15, r15
    5cb6:	a7 01       	movw	r20, r14
    5cb8:	e7 01       	movw	r28, r14
    5cba:	05 90       	lpm	r0, Z+
    5cbc:	08 94       	sec
    5cbe:	07 94       	ror	r0
    5cc0:	28 f4       	brcc	.+10     	; 0x5ccc <__ftoa_engine+0x80>
    5cc2:	36 0f       	add	r19, r22
    5cc4:	e7 1e       	adc	r14, r23
    5cc6:	f8 1e       	adc	r15, r24
    5cc8:	49 1f       	adc	r20, r25
    5cca:	51 1d       	adc	r21, r1
    5ccc:	66 0f       	add	r22, r22
    5cce:	77 1f       	adc	r23, r23
    5cd0:	88 1f       	adc	r24, r24
    5cd2:	99 1f       	adc	r25, r25
    5cd4:	06 94       	lsr	r0
    5cd6:	a1 f7       	brne	.-24     	; 0x5cc0 <__ftoa_engine+0x74>
    5cd8:	05 90       	lpm	r0, Z+
    5cda:	07 94       	ror	r0
    5cdc:	28 f4       	brcc	.+10     	; 0x5ce8 <__ftoa_engine+0x9c>
    5cde:	e7 0e       	add	r14, r23
    5ce0:	f8 1e       	adc	r15, r24
    5ce2:	49 1f       	adc	r20, r25
    5ce4:	56 1f       	adc	r21, r22
    5ce6:	c1 1d       	adc	r28, r1
    5ce8:	77 0f       	add	r23, r23
    5cea:	88 1f       	adc	r24, r24
    5cec:	99 1f       	adc	r25, r25
    5cee:	66 1f       	adc	r22, r22
    5cf0:	06 94       	lsr	r0
    5cf2:	a1 f7       	brne	.-24     	; 0x5cdc <__ftoa_engine+0x90>
    5cf4:	05 90       	lpm	r0, Z+
    5cf6:	07 94       	ror	r0
    5cf8:	28 f4       	brcc	.+10     	; 0x5d04 <__ftoa_engine+0xb8>
    5cfa:	f8 0e       	add	r15, r24
    5cfc:	49 1f       	adc	r20, r25
    5cfe:	56 1f       	adc	r21, r22
    5d00:	c7 1f       	adc	r28, r23
    5d02:	d1 1d       	adc	r29, r1
    5d04:	88 0f       	add	r24, r24
    5d06:	99 1f       	adc	r25, r25
    5d08:	66 1f       	adc	r22, r22
    5d0a:	77 1f       	adc	r23, r23
    5d0c:	06 94       	lsr	r0
    5d0e:	a1 f7       	brne	.-24     	; 0x5cf8 <__ftoa_engine+0xac>
    5d10:	05 90       	lpm	r0, Z+
    5d12:	07 94       	ror	r0
    5d14:	20 f4       	brcc	.+8      	; 0x5d1e <__ftoa_engine+0xd2>
    5d16:	49 0f       	add	r20, r25
    5d18:	56 1f       	adc	r21, r22
    5d1a:	c7 1f       	adc	r28, r23
    5d1c:	d8 1f       	adc	r29, r24
    5d1e:	99 0f       	add	r25, r25
    5d20:	66 1f       	adc	r22, r22
    5d22:	77 1f       	adc	r23, r23
    5d24:	88 1f       	adc	r24, r24
    5d26:	06 94       	lsr	r0
    5d28:	a9 f7       	brne	.-22     	; 0x5d14 <__ftoa_engine+0xc8>
    5d2a:	84 91       	lpm	r24, Z
    5d2c:	10 95       	com	r17
    5d2e:	17 70       	andi	r17, 0x07	; 7
    5d30:	41 f0       	breq	.+16     	; 0x5d42 <__ftoa_engine+0xf6>
    5d32:	d6 95       	lsr	r29
    5d34:	c7 95       	ror	r28
    5d36:	57 95       	ror	r21
    5d38:	47 95       	ror	r20
    5d3a:	f7 94       	ror	r15
    5d3c:	e7 94       	ror	r14
    5d3e:	1a 95       	dec	r17
    5d40:	c1 f7       	brne	.-16     	; 0x5d32 <__ftoa_engine+0xe6>
    5d42:	e0 e8       	ldi	r30, 0x80	; 128
    5d44:	f4 e0       	ldi	r31, 0x04	; 4
    5d46:	68 94       	set
    5d48:	15 90       	lpm	r1, Z+
    5d4a:	15 91       	lpm	r17, Z+
    5d4c:	35 91       	lpm	r19, Z+
    5d4e:	65 91       	lpm	r22, Z+
    5d50:	95 91       	lpm	r25, Z+
    5d52:	05 90       	lpm	r0, Z+
    5d54:	7f e2       	ldi	r23, 0x2F	; 47
    5d56:	73 95       	inc	r23
    5d58:	e1 18       	sub	r14, r1
    5d5a:	f1 0a       	sbc	r15, r17
    5d5c:	43 0b       	sbc	r20, r19
    5d5e:	56 0b       	sbc	r21, r22
    5d60:	c9 0b       	sbc	r28, r25
    5d62:	d0 09       	sbc	r29, r0
    5d64:	c0 f7       	brcc	.-16     	; 0x5d56 <__ftoa_engine+0x10a>
    5d66:	e1 0c       	add	r14, r1
    5d68:	f1 1e       	adc	r15, r17
    5d6a:	43 1f       	adc	r20, r19
    5d6c:	56 1f       	adc	r21, r22
    5d6e:	c9 1f       	adc	r28, r25
    5d70:	d0 1d       	adc	r29, r0
    5d72:	7e f4       	brtc	.+30     	; 0x5d92 <__ftoa_engine+0x146>
    5d74:	70 33       	cpi	r23, 0x30	; 48
    5d76:	11 f4       	brne	.+4      	; 0x5d7c <__ftoa_engine+0x130>
    5d78:	8a 95       	dec	r24
    5d7a:	e6 cf       	rjmp	.-52     	; 0x5d48 <__ftoa_engine+0xfc>
    5d7c:	e8 94       	clt
    5d7e:	01 50       	subi	r16, 0x01	; 1
    5d80:	30 f0       	brcs	.+12     	; 0x5d8e <__ftoa_engine+0x142>
    5d82:	08 0f       	add	r16, r24
    5d84:	0a f4       	brpl	.+2      	; 0x5d88 <__ftoa_engine+0x13c>
    5d86:	00 27       	eor	r16, r16
    5d88:	02 17       	cp	r16, r18
    5d8a:	08 f4       	brcc	.+2      	; 0x5d8e <__ftoa_engine+0x142>
    5d8c:	20 2f       	mov	r18, r16
    5d8e:	23 95       	inc	r18
    5d90:	02 2f       	mov	r16, r18
    5d92:	7a 33       	cpi	r23, 0x3A	; 58
    5d94:	28 f0       	brcs	.+10     	; 0x5da0 <__ftoa_engine+0x154>
    5d96:	79 e3       	ldi	r23, 0x39	; 57
    5d98:	7d 93       	st	X+, r23
    5d9a:	2a 95       	dec	r18
    5d9c:	e9 f7       	brne	.-6      	; 0x5d98 <__ftoa_engine+0x14c>
    5d9e:	10 c0       	rjmp	.+32     	; 0x5dc0 <__ftoa_engine+0x174>
    5da0:	7d 93       	st	X+, r23
    5da2:	2a 95       	dec	r18
    5da4:	89 f6       	brne	.-94     	; 0x5d48 <__ftoa_engine+0xfc>
    5da6:	06 94       	lsr	r0
    5da8:	97 95       	ror	r25
    5daa:	67 95       	ror	r22
    5dac:	37 95       	ror	r19
    5dae:	17 95       	ror	r17
    5db0:	17 94       	ror	r1
    5db2:	e1 18       	sub	r14, r1
    5db4:	f1 0a       	sbc	r15, r17
    5db6:	43 0b       	sbc	r20, r19
    5db8:	56 0b       	sbc	r21, r22
    5dba:	c9 0b       	sbc	r28, r25
    5dbc:	d0 09       	sbc	r29, r0
    5dbe:	98 f0       	brcs	.+38     	; 0x5de6 <__ftoa_engine+0x19a>
    5dc0:	23 95       	inc	r18
    5dc2:	7e 91       	ld	r23, -X
    5dc4:	73 95       	inc	r23
    5dc6:	7a 33       	cpi	r23, 0x3A	; 58
    5dc8:	08 f0       	brcs	.+2      	; 0x5dcc <__ftoa_engine+0x180>
    5dca:	70 e3       	ldi	r23, 0x30	; 48
    5dcc:	7c 93       	st	X, r23
    5dce:	20 13       	cpse	r18, r16
    5dd0:	b8 f7       	brcc	.-18     	; 0x5dc0 <__ftoa_engine+0x174>
    5dd2:	7e 91       	ld	r23, -X
    5dd4:	70 61       	ori	r23, 0x10	; 16
    5dd6:	7d 93       	st	X+, r23
    5dd8:	30 f0       	brcs	.+12     	; 0x5de6 <__ftoa_engine+0x19a>
    5dda:	83 95       	inc	r24
    5ddc:	71 e3       	ldi	r23, 0x31	; 49
    5dde:	7d 93       	st	X+, r23
    5de0:	70 e3       	ldi	r23, 0x30	; 48
    5de2:	2a 95       	dec	r18
    5de4:	e1 f7       	brne	.-8      	; 0x5dde <__ftoa_engine+0x192>
    5de6:	11 24       	eor	r1, r1
    5de8:	ef 90       	pop	r14
    5dea:	ff 90       	pop	r15
    5dec:	0f 91       	pop	r16
    5dee:	1f 91       	pop	r17
    5df0:	cf 91       	pop	r28
    5df2:	df 91       	pop	r29
    5df4:	99 27       	eor	r25, r25
    5df6:	87 fd       	sbrc	r24, 7
    5df8:	90 95       	com	r25
    5dfa:	08 95       	ret

00005dfc <strnlen_P>:
    5dfc:	fc 01       	movw	r30, r24
    5dfe:	05 90       	lpm	r0, Z+
    5e00:	61 50       	subi	r22, 0x01	; 1
    5e02:	70 40       	sbci	r23, 0x00	; 0
    5e04:	01 10       	cpse	r0, r1
    5e06:	d8 f7       	brcc	.-10     	; 0x5dfe <strnlen_P+0x2>
    5e08:	80 95       	com	r24
    5e0a:	90 95       	com	r25
    5e0c:	8e 0f       	add	r24, r30
    5e0e:	9f 1f       	adc	r25, r31
    5e10:	08 95       	ret

00005e12 <strnlen>:
    5e12:	fc 01       	movw	r30, r24
    5e14:	61 50       	subi	r22, 0x01	; 1
    5e16:	70 40       	sbci	r23, 0x00	; 0
    5e18:	01 90       	ld	r0, Z+
    5e1a:	01 10       	cpse	r0, r1
    5e1c:	d8 f7       	brcc	.-10     	; 0x5e14 <strnlen+0x2>
    5e1e:	80 95       	com	r24
    5e20:	90 95       	com	r25
    5e22:	8e 0f       	add	r24, r30
    5e24:	9f 1f       	adc	r25, r31
    5e26:	08 95       	ret

00005e28 <fputc>:
    5e28:	0f 93       	push	r16
    5e2a:	1f 93       	push	r17
    5e2c:	cf 93       	push	r28
    5e2e:	df 93       	push	r29
    5e30:	18 2f       	mov	r17, r24
    5e32:	09 2f       	mov	r16, r25
    5e34:	eb 01       	movw	r28, r22
    5e36:	8b 81       	ldd	r24, Y+3	; 0x03
    5e38:	81 fd       	sbrc	r24, 1
    5e3a:	03 c0       	rjmp	.+6      	; 0x5e42 <fputc+0x1a>
    5e3c:	8f ef       	ldi	r24, 0xFF	; 255
    5e3e:	9f ef       	ldi	r25, 0xFF	; 255
    5e40:	20 c0       	rjmp	.+64     	; 0x5e82 <fputc+0x5a>
    5e42:	82 ff       	sbrs	r24, 2
    5e44:	10 c0       	rjmp	.+32     	; 0x5e66 <fputc+0x3e>
    5e46:	4e 81       	ldd	r20, Y+6	; 0x06
    5e48:	5f 81       	ldd	r21, Y+7	; 0x07
    5e4a:	2c 81       	ldd	r18, Y+4	; 0x04
    5e4c:	3d 81       	ldd	r19, Y+5	; 0x05
    5e4e:	42 17       	cp	r20, r18
    5e50:	53 07       	cpc	r21, r19
    5e52:	7c f4       	brge	.+30     	; 0x5e72 <fputc+0x4a>
    5e54:	e8 81       	ld	r30, Y
    5e56:	f9 81       	ldd	r31, Y+1	; 0x01
    5e58:	9f 01       	movw	r18, r30
    5e5a:	2f 5f       	subi	r18, 0xFF	; 255
    5e5c:	3f 4f       	sbci	r19, 0xFF	; 255
    5e5e:	39 83       	std	Y+1, r19	; 0x01
    5e60:	28 83       	st	Y, r18
    5e62:	10 83       	st	Z, r17
    5e64:	06 c0       	rjmp	.+12     	; 0x5e72 <fputc+0x4a>
    5e66:	e8 85       	ldd	r30, Y+8	; 0x08
    5e68:	f9 85       	ldd	r31, Y+9	; 0x09
    5e6a:	81 2f       	mov	r24, r17
    5e6c:	09 95       	icall
    5e6e:	89 2b       	or	r24, r25
    5e70:	29 f7       	brne	.-54     	; 0x5e3c <fputc+0x14>
    5e72:	2e 81       	ldd	r18, Y+6	; 0x06
    5e74:	3f 81       	ldd	r19, Y+7	; 0x07
    5e76:	2f 5f       	subi	r18, 0xFF	; 255
    5e78:	3f 4f       	sbci	r19, 0xFF	; 255
    5e7a:	3f 83       	std	Y+7, r19	; 0x07
    5e7c:	2e 83       	std	Y+6, r18	; 0x06
    5e7e:	81 2f       	mov	r24, r17
    5e80:	90 2f       	mov	r25, r16
    5e82:	df 91       	pop	r29
    5e84:	cf 91       	pop	r28
    5e86:	1f 91       	pop	r17
    5e88:	0f 91       	pop	r16
    5e8a:	08 95       	ret

00005e8c <sprintf>:
    5e8c:	ae e0       	ldi	r26, 0x0E	; 14
    5e8e:	b0 e0       	ldi	r27, 0x00	; 0
    5e90:	ec e4       	ldi	r30, 0x4C	; 76
    5e92:	ff e2       	ldi	r31, 0x2F	; 47
    5e94:	0c 94 fd 2d 	jmp	0x5bfa	; 0x5bfa <__prologue_saves__+0x1c>
    5e98:	0d 89       	ldd	r16, Y+21	; 0x15
    5e9a:	1e 89       	ldd	r17, Y+22	; 0x16
    5e9c:	86 e0       	ldi	r24, 0x06	; 6
    5e9e:	8c 83       	std	Y+4, r24	; 0x04
    5ea0:	1a 83       	std	Y+2, r17	; 0x02
    5ea2:	09 83       	std	Y+1, r16	; 0x01
    5ea4:	8f ef       	ldi	r24, 0xFF	; 255
    5ea6:	9f e7       	ldi	r25, 0x7F	; 127
    5ea8:	9e 83       	std	Y+6, r25	; 0x06
    5eaa:	8d 83       	std	Y+5, r24	; 0x05
    5eac:	ae 01       	movw	r20, r28
    5eae:	47 5e       	subi	r20, 0xE7	; 231
    5eb0:	5f 4f       	sbci	r21, 0xFF	; 255
    5eb2:	6f 89       	ldd	r22, Y+23	; 0x17
    5eb4:	78 8d       	ldd	r23, Y+24	; 0x18
    5eb6:	ce 01       	movw	r24, r28
    5eb8:	01 96       	adiw	r24, 0x01	; 1
    5eba:	0e 94 6e 2a 	call	0x54dc	; 0x54dc <vfprintf>
    5ebe:	ef 81       	ldd	r30, Y+7	; 0x07
    5ec0:	f8 85       	ldd	r31, Y+8	; 0x08
    5ec2:	e0 0f       	add	r30, r16
    5ec4:	f1 1f       	adc	r31, r17
    5ec6:	10 82       	st	Z, r1
    5ec8:	2e 96       	adiw	r28, 0x0e	; 14
    5eca:	e4 e0       	ldi	r30, 0x04	; 4
    5ecc:	0c 94 19 2e 	jmp	0x5c32	; 0x5c32 <__epilogue_restores__+0x1c>

00005ed0 <__ultoa_invert>:
    5ed0:	fa 01       	movw	r30, r20
    5ed2:	aa 27       	eor	r26, r26
    5ed4:	28 30       	cpi	r18, 0x08	; 8
    5ed6:	51 f1       	breq	.+84     	; 0x5f2c <__ultoa_invert+0x5c>
    5ed8:	20 31       	cpi	r18, 0x10	; 16
    5eda:	81 f1       	breq	.+96     	; 0x5f3c <__ultoa_invert+0x6c>
    5edc:	e8 94       	clt
    5ede:	6f 93       	push	r22
    5ee0:	6e 7f       	andi	r22, 0xFE	; 254
    5ee2:	6e 5f       	subi	r22, 0xFE	; 254
    5ee4:	7f 4f       	sbci	r23, 0xFF	; 255
    5ee6:	8f 4f       	sbci	r24, 0xFF	; 255
    5ee8:	9f 4f       	sbci	r25, 0xFF	; 255
    5eea:	af 4f       	sbci	r26, 0xFF	; 255
    5eec:	b1 e0       	ldi	r27, 0x01	; 1
    5eee:	3e d0       	rcall	.+124    	; 0x5f6c <__ultoa_invert+0x9c>
    5ef0:	b4 e0       	ldi	r27, 0x04	; 4
    5ef2:	3c d0       	rcall	.+120    	; 0x5f6c <__ultoa_invert+0x9c>
    5ef4:	67 0f       	add	r22, r23
    5ef6:	78 1f       	adc	r23, r24
    5ef8:	89 1f       	adc	r24, r25
    5efa:	9a 1f       	adc	r25, r26
    5efc:	a1 1d       	adc	r26, r1
    5efe:	68 0f       	add	r22, r24
    5f00:	79 1f       	adc	r23, r25
    5f02:	8a 1f       	adc	r24, r26
    5f04:	91 1d       	adc	r25, r1
    5f06:	a1 1d       	adc	r26, r1
    5f08:	6a 0f       	add	r22, r26
    5f0a:	71 1d       	adc	r23, r1
    5f0c:	81 1d       	adc	r24, r1
    5f0e:	91 1d       	adc	r25, r1
    5f10:	a1 1d       	adc	r26, r1
    5f12:	20 d0       	rcall	.+64     	; 0x5f54 <__ultoa_invert+0x84>
    5f14:	09 f4       	brne	.+2      	; 0x5f18 <__ultoa_invert+0x48>
    5f16:	68 94       	set
    5f18:	3f 91       	pop	r19
    5f1a:	2a e0       	ldi	r18, 0x0A	; 10
    5f1c:	26 9f       	mul	r18, r22
    5f1e:	11 24       	eor	r1, r1
    5f20:	30 19       	sub	r19, r0
    5f22:	30 5d       	subi	r19, 0xD0	; 208
    5f24:	31 93       	st	Z+, r19
    5f26:	de f6       	brtc	.-74     	; 0x5ede <__ultoa_invert+0xe>
    5f28:	cf 01       	movw	r24, r30
    5f2a:	08 95       	ret
    5f2c:	46 2f       	mov	r20, r22
    5f2e:	47 70       	andi	r20, 0x07	; 7
    5f30:	40 5d       	subi	r20, 0xD0	; 208
    5f32:	41 93       	st	Z+, r20
    5f34:	b3 e0       	ldi	r27, 0x03	; 3
    5f36:	0f d0       	rcall	.+30     	; 0x5f56 <__ultoa_invert+0x86>
    5f38:	c9 f7       	brne	.-14     	; 0x5f2c <__ultoa_invert+0x5c>
    5f3a:	f6 cf       	rjmp	.-20     	; 0x5f28 <__ultoa_invert+0x58>
    5f3c:	46 2f       	mov	r20, r22
    5f3e:	4f 70       	andi	r20, 0x0F	; 15
    5f40:	40 5d       	subi	r20, 0xD0	; 208
    5f42:	4a 33       	cpi	r20, 0x3A	; 58
    5f44:	18 f0       	brcs	.+6      	; 0x5f4c <__ultoa_invert+0x7c>
    5f46:	49 5d       	subi	r20, 0xD9	; 217
    5f48:	31 fd       	sbrc	r19, 1
    5f4a:	40 52       	subi	r20, 0x20	; 32
    5f4c:	41 93       	st	Z+, r20
    5f4e:	02 d0       	rcall	.+4      	; 0x5f54 <__ultoa_invert+0x84>
    5f50:	a9 f7       	brne	.-22     	; 0x5f3c <__ultoa_invert+0x6c>
    5f52:	ea cf       	rjmp	.-44     	; 0x5f28 <__ultoa_invert+0x58>
    5f54:	b4 e0       	ldi	r27, 0x04	; 4
    5f56:	a6 95       	lsr	r26
    5f58:	97 95       	ror	r25
    5f5a:	87 95       	ror	r24
    5f5c:	77 95       	ror	r23
    5f5e:	67 95       	ror	r22
    5f60:	ba 95       	dec	r27
    5f62:	c9 f7       	brne	.-14     	; 0x5f56 <__ultoa_invert+0x86>
    5f64:	00 97       	sbiw	r24, 0x00	; 0
    5f66:	61 05       	cpc	r22, r1
    5f68:	71 05       	cpc	r23, r1
    5f6a:	08 95       	ret
    5f6c:	9b 01       	movw	r18, r22
    5f6e:	ac 01       	movw	r20, r24
    5f70:	0a 2e       	mov	r0, r26
    5f72:	06 94       	lsr	r0
    5f74:	57 95       	ror	r21
    5f76:	47 95       	ror	r20
    5f78:	37 95       	ror	r19
    5f7a:	27 95       	ror	r18
    5f7c:	ba 95       	dec	r27
    5f7e:	c9 f7       	brne	.-14     	; 0x5f72 <__ultoa_invert+0xa2>
    5f80:	62 0f       	add	r22, r18
    5f82:	73 1f       	adc	r23, r19
    5f84:	84 1f       	adc	r24, r20
    5f86:	95 1f       	adc	r25, r21
    5f88:	a0 1d       	adc	r26, r0
    5f8a:	08 95       	ret

00005f8c <__do_global_dtors>:
    5f8c:	15 e0       	ldi	r17, 0x05	; 5
    5f8e:	cc e7       	ldi	r28, 0x7C	; 124
    5f90:	d5 e0       	ldi	r29, 0x05	; 5
    5f92:	04 c0       	rjmp	.+8      	; 0x5f9c <__do_global_dtors+0x10>
    5f94:	fe 01       	movw	r30, r28
    5f96:	0e 94 eb 2d 	call	0x5bd6	; 0x5bd6 <__tablejump__>
    5f9a:	22 96       	adiw	r28, 0x02	; 2
    5f9c:	ce 37       	cpi	r28, 0x7E	; 126
    5f9e:	d1 07       	cpc	r29, r17
    5fa0:	c9 f7       	brne	.-14     	; 0x5f94 <__do_global_dtors+0x8>
    5fa2:	f8 94       	cli

00005fa4 <__stop_program>:
    5fa4:	ff cf       	rjmp	.-2      	; 0x5fa4 <__stop_program>
