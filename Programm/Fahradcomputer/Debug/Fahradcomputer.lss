
Fahradcomputer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001c4  00800100  0000508c  00005120  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000508c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000047c  008002c4  008002c4  000052e4  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000052e4  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000388  00000000  00000000  00005340  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00007683  00000000  00000000  000056c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001559  00000000  00000000  0000cd4b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000014d3  00000000  00000000  0000e2a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000d40  00000000  00000000  0000f778  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000103c  00000000  00000000  000104b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000562d  00000000  00000000  000114f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000370  00000000  00000000  00016b21  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 92 02 	jmp	0x524	; 0x524 <__dtors_end>
       4:	0c 94 ba 02 	jmp	0x574	; 0x574 <__bad_interrupt>
       8:	0c 94 ba 02 	jmp	0x574	; 0x574 <__bad_interrupt>
       c:	0c 94 ba 02 	jmp	0x574	; 0x574 <__bad_interrupt>
      10:	0c 94 ba 02 	jmp	0x574	; 0x574 <__bad_interrupt>
      14:	0c 94 ba 02 	jmp	0x574	; 0x574 <__bad_interrupt>
      18:	0c 94 ba 02 	jmp	0x574	; 0x574 <__bad_interrupt>
      1c:	0c 94 ba 02 	jmp	0x574	; 0x574 <__bad_interrupt>
      20:	0c 94 ba 02 	jmp	0x574	; 0x574 <__bad_interrupt>
      24:	0c 94 d0 14 	jmp	0x29a0	; 0x29a0 <__vector_9>
      28:	0c 94 ba 02 	jmp	0x574	; 0x574 <__bad_interrupt>
      2c:	0c 94 ba 02 	jmp	0x574	; 0x574 <__bad_interrupt>
      30:	0c 94 ba 02 	jmp	0x574	; 0x574 <__bad_interrupt>
      34:	0c 94 ba 02 	jmp	0x574	; 0x574 <__bad_interrupt>
      38:	0c 94 ba 02 	jmp	0x574	; 0x574 <__bad_interrupt>
      3c:	0c 94 ba 02 	jmp	0x574	; 0x574 <__bad_interrupt>
      40:	0c 94 ba 02 	jmp	0x574	; 0x574 <__bad_interrupt>
      44:	0c 94 ba 02 	jmp	0x574	; 0x574 <__bad_interrupt>
      48:	0c 94 ba 02 	jmp	0x574	; 0x574 <__bad_interrupt>
      4c:	0c 94 ba 02 	jmp	0x574	; 0x574 <__bad_interrupt>
      50:	0c 94 ba 02 	jmp	0x574	; 0x574 <__bad_interrupt>
      54:	0c 94 ba 02 	jmp	0x574	; 0x574 <__bad_interrupt>
      58:	0c 94 ba 02 	jmp	0x574	; 0x574 <__bad_interrupt>
      5c:	0c 94 ba 02 	jmp	0x574	; 0x574 <__bad_interrupt>
      60:	0c 94 ba 02 	jmp	0x574	; 0x574 <__bad_interrupt>
      64:	0c 94 ba 02 	jmp	0x574	; 0x574 <__bad_interrupt>
      68:	21 12       	cpse	r2, r17
      6a:	49 12       	cpse	r4, r25
      6c:	73 12       	cpse	r7, r19
      6e:	9e 12       	cpse	r9, r30
      70:	c8 12       	cpse	r12, r24
      72:	f1 12       	cpse	r15, r17
      74:	19 13       	cpse	r17, r25
      76:	42 13       	cpse	r20, r18
      78:	ba 13       	cpse	r27, r26
      7a:	e5 13       	cpse	r30, r21
      7c:	80 17       	cp	r24, r16
      7e:	8b 17       	cp	r24, r27
      80:	99 17       	cp	r25, r25
      82:	9f 17       	cp	r25, r31
      84:	a6 17       	cp	r26, r22
      86:	ad 17       	cp	r26, r29
      88:	bb 17       	cp	r27, r27
      8a:	db 17       	cp	r29, r27
      8c:	e2 17       	cp	r30, r18
      8e:	e9 17       	cp	r30, r25
      90:	f0 17       	cp	r31, r16
      92:	f7 17       	cp	r31, r23
      94:	fe 17       	cp	r31, r30
      96:	05 18       	sub	r0, r5
      98:	0c 18       	sub	r0, r12
      9a:	08 4a       	sbci	r16, 0xA8	; 168
      9c:	d7 3b       	cpi	r29, 0xB7	; 183
      9e:	3b ce       	rjmp	.-906    	; 0xfffffd16 <__eeprom_end+0xff7efd16>
      a0:	01 6e       	ori	r16, 0xE1	; 225
      a2:	84 bc       	out	0x24, r8	; 36
      a4:	bf fd       	.word	0xfdbf	; ????
      a6:	c1 2f       	mov	r28, r17
      a8:	3d 6c       	ori	r19, 0xCD	; 205
      aa:	74 31       	cpi	r23, 0x14	; 20
      ac:	9a bd       	out	0x2a, r25	; 42
      ae:	56 83       	std	Z+6, r21	; 0x06
      b0:	3d da       	rcall	.-2950   	; 0xfffff52c <__eeprom_end+0xff7ef52c>
      b2:	3d 00       	.word	0x003d	; ????
      b4:	c7 7f       	andi	r28, 0xF7	; 247
      b6:	11 be       	out	0x31, r1	; 49
      b8:	d9 e4       	ldi	r29, 0x49	; 73
      ba:	bb 4c       	sbci	r27, 0xCB	; 203
      bc:	3e 91       	ld	r19, -X
      be:	6b aa       	std	Y+51, r6	; 0x33
      c0:	aa be       	out	0x3a, r10	; 58
      c2:	00 00       	nop
      c4:	00 80       	ld	r0, Z
      c6:	3f 05       	cpc	r19, r15
      c8:	a8 4c       	sbci	r26, 0xC8	; 200
      ca:	cd b2       	in	r12, 0x1d	; 29
      cc:	d4 4e       	sbci	r29, 0xE4	; 228
      ce:	b9 38       	cpi	r27, 0x89	; 137
      d0:	36 a9       	ldd	r19, Z+54	; 0x36
      d2:	02 0c       	add	r0, r2
      d4:	50 b9       	out	0x00, r21	; 0
      d6:	91 86       	std	Z+9, r9	; 0x09
      d8:	88 08       	sbc	r8, r8
      da:	3c a6       	std	Y+44, r3	; 0x2c
      dc:	aa aa       	std	Y+50, r10	; 0x32
      de:	2a be       	out	0x3a, r2	; 58
      e0:	00 00       	nop
      e2:	00 80       	ld	r0, Z
      e4:	3f 06       	cpc	r3, r31
      e6:	64 ec       	ldi	r22, 0xC4	; 196
      e8:	1b 3c       	cpi	r17, 0xCB	; 203
      ea:	04 bc       	out	0x24, r0	; 36
      ec:	16 3e       	cpi	r17, 0xE6	; 230
      ee:	3b e5       	ldi	r19, 0x5B	; 91
      f0:	b9 3c       	cpi	r27, 0xC9	; 201
      f2:	c9 3c       	cpi	r28, 0xC9	; 201
      f4:	37 c2       	rjmp	.+1134   	; 0x564 <__do_global_ctors+0xe>
      f6:	9e 5a       	subi	r25, 0xAE	; 174
      f8:	3d 66       	ori	r19, 0x6D	; 109
      fa:	04 98       	cbi	0x00, 4	; 0
      fc:	08 3e       	cpi	r16, 0xE8	; 232
      fe:	ea 69       	ori	r30, 0x9A	; 154
     100:	aa aa       	std	Y+50, r10	; 0x32
     102:	3e 00       	.word	0x003e	; ????
     104:	00 00       	nop
     106:	80 3f       	cpi	r24, 0xF0	; 240

00000108 <__trampolines_end>:
     108:	00 e0       	ldi	r16, 0x00	; 0
     10a:	f8 fc       	.word	0xfcf8	; ????
     10c:	fe 1e       	adc	r15, r30
     10e:	07 07       	cpc	r16, r23
     110:	07 07       	cpc	r16, r23
     112:	1e fe       	.word	0xfe1e	; ????
     114:	fc f8       	.word	0xf8fc	; ????
     116:	f0 00       	.word	0x00f0	; ????
     118:	00 07       	cpc	r16, r16
     11a:	0f 3f       	cpi	r16, 0xFF	; 255
     11c:	3f 7c       	andi	r19, 0xCF	; 207
     11e:	70 70       	andi	r23, 0x00	; 0
     120:	70 70       	andi	r23, 0x00	; 0
     122:	7c 3f       	cpi	r23, 0xFC	; 252
     124:	1f 1f       	adc	r17, r31
     126:	07 00       	.word	0x0007	; ????
     128:	00 00       	nop
     12a:	00 06       	cpc	r0, r16
     12c:	07 07       	cpc	r16, r23
     12e:	ff ff       	.word	0xffff	; ????
     130:	ff ff       	.word	0xffff	; ????
	...
     13e:	7f 7f       	andi	r23, 0xFF	; 255
     140:	7f 7f       	andi	r23, 0xFF	; 255
     142:	00 00       	nop
     144:	00 00       	nop
     146:	00 00       	nop
     148:	00 38       	cpi	r16, 0x80	; 128
     14a:	3c 3e       	cpi	r19, 0xEC	; 236
     14c:	3e 0f       	add	r19, r30
     14e:	07 07       	cpc	r16, r23
     150:	07 cf       	rjmp	.-498    	; 0xffffff60 <__eeprom_end+0xff7eff60>
     152:	ff fe       	.word	0xfeff	; ????
     154:	fe 38       	cpi	r31, 0x8E	; 142
     156:	00 00       	nop
     158:	00 40       	sbci	r16, 0x00	; 0
     15a:	40 60       	ori	r20, 0x00	; 0
     15c:	70 78       	andi	r23, 0x80	; 128
     15e:	7c 7e       	andi	r23, 0xEC	; 236
     160:	7f 77       	andi	r23, 0x7F	; 127
     162:	73 71       	andi	r23, 0x13	; 19
     164:	70 70       	andi	r23, 0x00	; 0
     166:	00 00       	nop
     168:	00 18       	sub	r0, r0
     16a:	1c 1e       	adc	r1, r28
     16c:	1e 0f       	add	r17, r30
     16e:	c7 c7       	rjmp	.+3982   	; 0x10fe <_Z14willkommenpagev+0x14>
     170:	e7 ff       	sbrs	r30, 7
     172:	fe be       	out	0x3e, r15	; 62
     174:	9c 00       	.word	0x009c	; ????
     176:	00 00       	nop
     178:	00 0c       	add	r0, r0
     17a:	1c 3c       	cpi	r17, 0xCC	; 204
     17c:	3c 78       	andi	r19, 0x8C	; 140
     17e:	70 70       	andi	r23, 0x00	; 0
     180:	70 79       	andi	r23, 0x90	; 144
     182:	7f 3f       	cpi	r23, 0xFF	; 255
     184:	1f 0f       	add	r17, r31
     186:	00 00       	nop
     188:	00 00       	nop
     18a:	80 c0       	rjmp	.+256    	; 0x28c <_ZL7font5x8+0x44>
     18c:	e0 70       	andi	r30, 0x00	; 0
     18e:	38 1c       	adc	r3, r8
     190:	1e ff       	.word	0xff1e	; ????
     192:	ff ff       	.word	0xffff	; ????
     194:	ff 00       	.word	0x00ff	; ????
     196:	00 00       	nop
     198:	06 07       	cpc	r16, r22
     19a:	07 07       	cpc	r16, r23
     19c:	06 06       	cpc	r0, r22
     19e:	06 06       	cpc	r0, r22
     1a0:	06 7f       	andi	r16, 0xF6	; 246
     1a2:	7f 7f       	andi	r23, 0xFF	; 255
     1a4:	7f 06       	cpc	r7, r31
     1a6:	06 00       	.word	0x0006	; ????
     1a8:	00 00       	nop
     1aa:	00 00       	nop
     1ac:	f0 ff       	sbrs	r31, 0
     1ae:	ff ff       	.word	0xffff	; ????
     1b0:	e7 e7       	ldi	r30, 0x77	; 119
     1b2:	e7 e7       	ldi	r30, 0x77	; 119
     1b4:	c7 87       	std	Z+15, r28	; 0x0f
     1b6:	00 00       	nop
     1b8:	00 00       	nop
     1ba:	38 78       	andi	r19, 0x88	; 136
     1bc:	71 70       	andi	r23, 0x01	; 1
     1be:	70 70       	andi	r23, 0x00	; 0
     1c0:	70 70       	andi	r23, 0x00	; 0
     1c2:	39 3f       	cpi	r19, 0xF9	; 249
     1c4:	3f 1f       	adc	r19, r31
     1c6:	0f 00       	.word	0x000f	; ????
     1c8:	00 80       	ld	r0, Z
     1ca:	e0 f0       	brcs	.+56     	; 0x204 <__trampolines_end+0xfc>
     1cc:	f8 fc       	.word	0xfcf8	; ????
     1ce:	7f 7f       	andi	r23, 0xFF	; 255
     1d0:	6f 67       	ori	r22, 0x7F	; 127
     1d2:	e1 e1       	ldi	r30, 0x11	; 17
     1d4:	c0 80       	ld	r12, Z
     1d6:	00 00       	nop
     1d8:	00 0f       	add	r16, r16
     1da:	1f 3f       	cpi	r17, 0xFF	; 255
     1dc:	3f 78       	andi	r19, 0x8F	; 143
     1de:	70 70       	andi	r23, 0x00	; 0
     1e0:	70 70       	andi	r23, 0x00	; 0
     1e2:	78 3f       	cpi	r23, 0xF8	; 248
     1e4:	3f 1f       	adc	r19, r31
     1e6:	0f 00       	.word	0x000f	; ????
     1e8:	00 07       	cpc	r16, r16
     1ea:	07 07       	cpc	r16, r23
     1ec:	07 07       	cpc	r16, r23
     1ee:	c7 e7       	ldi	r28, 0x77	; 119
     1f0:	f7 ff       	sbrs	r31, 7
     1f2:	7f 3f       	cpi	r23, 0xFF	; 255
     1f4:	1f 07       	cpc	r17, r31
     1f6:	03 01       	movw	r0, r6
     1f8:	00 20       	and	r0, r0
     1fa:	38 7c       	andi	r19, 0xC8	; 200
     1fc:	7e 3f       	cpi	r23, 0xFE	; 254
     1fe:	0f 07       	cpc	r16, r31
     200:	03 00       	.word	0x0003	; ????
	...
     20a:	00 1c       	adc	r0, r0
     20c:	be fe       	.word	0xfebe	; ????
     20e:	ff e7       	ldi	r31, 0x7F	; 127
     210:	c3 c3       	rjmp	.+1926   	; 0x998 <_ZN7Display13draw_triangleEhhhff+0x8c>
     212:	e7 ff       	sbrs	r30, 7
     214:	fe be       	out	0x3e, r15	; 62
     216:	1c 00       	.word	0x001c	; ????
     218:	00 00       	nop
     21a:	0e 3f       	cpi	r16, 0xFE	; 254
     21c:	3f 7f       	andi	r19, 0xFF	; 255
     21e:	71 60       	ori	r23, 0x01	; 1
     220:	60 60       	ori	r22, 0x00	; 0
     222:	71 7f       	andi	r23, 0xF1	; 241
     224:	3f 3f       	cpi	r19, 0xFF	; 255
     226:	0f 00       	.word	0x000f	; ????
     228:	00 78       	andi	r16, 0x80	; 128
     22a:	fc fe       	.word	0xfefc	; ????
     22c:	fe 8f       	std	Y+30, r31	; 0x1e
     22e:	07 07       	cpc	r16, r23
     230:	07 07       	cpc	r16, r23
     232:	8f fe       	.word	0xfe8f	; ????
     234:	fe fc       	.word	0xfcfe	; ????
     236:	f8 00       	.word	0x00f8	; ????
     238:	00 00       	nop
     23a:	00 01       	movw	r0, r0
     23c:	43 43       	sbci	r20, 0x33	; 51
     23e:	73 7b       	andi	r23, 0xB3	; 179
     240:	7f 7f       	andi	r23, 0xFF	; 255
     242:	1f 0f       	add	r17, r31
     244:	07 03       	mulsu	r16, r23
	...

00000248 <_ZL7font5x8>:
     248:	00 00 5f 00 00 00 07 00 07 00 14 7f 14 7f 14 24     .._............$
     258:	2a 7f 2a 12 23 13 08 64 62 36 49 55 22 50 00 05     *.*.#..db6IU"P..
     268:	03 00 00 00 1c 22 41 00 00 41 22 1c 00 14 08 3e     ....."A..A"....>
     278:	08 14 08 08 3e 08 08 00 50 30 00 00 08 08 08 08     ....>...P0......
     288:	08 00 60 60 00 00 20 10 08 04 02 3e 51 49 45 3e     ..``.. ....>QIE>
     298:	00 42 7f 40 00 42 61 51 49 46 21 41 45 4b 31 18     .B.@.BaQIF!AEK1.
     2a8:	14 12 7f 10 27 45 45 45 39 3c 4a 49 49 30 01 71     ....'EEE9<JII0.q
     2b8:	09 05 03 36 49 49 49 36 06 49 49 29 1e 00 36 36     ...6III6.II)..66
     2c8:	00 00 00 56 36 00 00 08 14 22 41 00 14 14 14 14     ...V6...."A.....
     2d8:	14 00 41 22 14 08 02 01 51 09 06 32 49 79 41 3e     ..A"....Q..2IyA>
     2e8:	7e 11 11 11 7e 7f 49 49 49 36 3e 41 41 41 22 7f     ~...~.III6>AAA".
     2f8:	41 41 22 1c 7f 49 49 49 41 7f 09 09 09 01 3e 41     AA"..IIIA.....>A
     308:	49 49 7a 7f 08 08 08 7f 00 41 7f 41 00 20 40 41     IIz......A.A. @A
     318:	3f 01 7f 08 14 22 41 7f 40 40 40 40 7f 02 0c 02     ?...."A.@@@@....
     328:	7f 7f 04 08 10 7f 3e 41 41 41 3e 7f 09 09 09 06     ......>AAA>.....
     338:	3e 41 51 21 5e 7f 09 19 29 46 46 49 49 49 31 01     >AQ!^...)FFIII1.
     348:	01 7f 01 01 3f 40 40 40 3f 1f 20 40 20 1f 3f 40     ....?@@@?. @ .?@
     358:	38 40 3f 63 14 08 14 63 07 08 70 08 07 61 51 49     8@?c...c..p..aQI
     368:	45 43 00 7f 41 41 00 02 04 08 10 20 00 41 41 7f     EC..AA..... .AA.
     378:	00 04 02 01 02 04 40 40 40 40 40 00 01 02 04 00     ......@@@@@.....
     388:	20 54 54 54 78 7f 48 44 44 38 38 44 44 44 20 38      TTTx.HDD88DDD 8
     398:	44 44 48 7f 38 54 54 54 18 08 7e 09 01 02 0c 52     DDH.8TTT..~....R
     3a8:	52 52 3e 7f 08 04 04 78 00 44 7d 40 00 20 40 44     RR>....x.D}@. @D
     3b8:	3d 00 7f 10 28 44 00 00 41 7f 40 00 7c 04 18 04     =...(D..A.@.|...
     3c8:	78 7c 08 04 04 78 38 44 44 44 38 7c 14 14 14 08     x|...x8DDD8|....
     3d8:	08 14 14 18 7c 7c 08 04 04 08 48 54 54 54 20 04     ....||....HTTT .
     3e8:	3f 44 40 20 3c 40 40 20 7c 1c 20 40 20 1c 3c 40     ?D@ <@@ |. @ .<@
     3f8:	30 40 3c 44 28 10 28 44 0c 50 50 50 3c 44 64 54     0@<D(.(D.PPP<DdT
     408:	4c 44 00 08 36 41 00 00 00 7f 00 00 00 41 36 08     LD..6A.......A6.
     418:	00 10 08 08 10 08                                   ......

0000041e <__c.2161>:
     41e:	6e 61 6e 00                                         nan.

00000422 <__c.2159>:
     422:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     432:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     442:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     452:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     462:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     472:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     482:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     492:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     4a2:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     4b2:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     4c2:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     4d2:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     4e2:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     4f2:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     502:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     512:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000520 <__ctors_start>:
     520:	5c 19       	sub	r21, r12

00000522 <__ctors_end>:
     522:	85 19       	sub	r24, r5

00000524 <__dtors_end>:
     524:	11 24       	eor	r1, r1
     526:	1f be       	out	0x3f, r1	; 63
     528:	cf ef       	ldi	r28, 0xFF	; 255
     52a:	d8 e0       	ldi	r29, 0x08	; 8
     52c:	de bf       	out	0x3e, r29	; 62
     52e:	cd bf       	out	0x3d, r28	; 61

00000530 <__do_copy_data>:
     530:	12 e0       	ldi	r17, 0x02	; 2
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b1 e0       	ldi	r27, 0x01	; 1
     536:	ec e8       	ldi	r30, 0x8C	; 140
     538:	f0 e5       	ldi	r31, 0x50	; 80
     53a:	02 c0       	rjmp	.+4      	; 0x540 <__do_copy_data+0x10>
     53c:	05 90       	lpm	r0, Z+
     53e:	0d 92       	st	X+, r0
     540:	a4 3c       	cpi	r26, 0xC4	; 196
     542:	b1 07       	cpc	r27, r17
     544:	d9 f7       	brne	.-10     	; 0x53c <__do_copy_data+0xc>

00000546 <__do_clear_bss>:
     546:	27 e0       	ldi	r18, 0x07	; 7
     548:	a4 ec       	ldi	r26, 0xC4	; 196
     54a:	b2 e0       	ldi	r27, 0x02	; 2
     54c:	01 c0       	rjmp	.+2      	; 0x550 <.do_clear_bss_start>

0000054e <.do_clear_bss_loop>:
     54e:	1d 92       	st	X+, r1

00000550 <.do_clear_bss_start>:
     550:	a0 34       	cpi	r26, 0x40	; 64
     552:	b2 07       	cpc	r27, r18
     554:	e1 f7       	brne	.-8      	; 0x54e <.do_clear_bss_loop>

00000556 <__do_global_ctors>:
     556:	15 e0       	ldi	r17, 0x05	; 5
     558:	c2 e2       	ldi	r28, 0x22	; 34
     55a:	d5 e0       	ldi	r29, 0x05	; 5
     55c:	04 c0       	rjmp	.+8      	; 0x566 <__do_global_ctors+0x10>
     55e:	22 97       	sbiw	r28, 0x02	; 2
     560:	fe 01       	movw	r30, r28
     562:	0e 94 5e 26 	call	0x4cbc	; 0x4cbc <__tablejump__>
     566:	c0 32       	cpi	r28, 0x20	; 32
     568:	d1 07       	cpc	r29, r17
     56a:	c9 f7       	brne	.-14     	; 0x55e <__do_global_ctors+0x8>
     56c:	0e 94 4f 19 	call	0x329e	; 0x329e <main>
     570:	0c 94 39 28 	jmp	0x5072	; 0x5072 <__do_global_dtors>

00000574 <__bad_interrupt>:
     574:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000578 <_ZN7DisplayD1Ev>:
	//}
	InitializeDisplay();
} //Display

// default destructor
Display::~Display()
     578:	9c 5f       	subi	r25, 0xFC	; 252
     57a:	0e 94 ae 19 	call	0x335c	; 0x335c <_ZN3I2CD1Ev>
     57e:	08 95       	ret

00000580 <_ZN7Display10clearFrameEv>:
{
} //~Display

void Display::clearFrame(){
     580:	fc 01       	movw	r30, r24
	for(uint16_t i=0;i<1024;i++){
     582:	20 e0       	ldi	r18, 0x00	; 0
     584:	30 e0       	ldi	r19, 0x00	; 0
		Displayframe[i]=0;
     586:	11 92       	st	Z+, r1
Display::~Display()
{
} //~Display

void Display::clearFrame(){
	for(uint16_t i=0;i<1024;i++){
     588:	2f 5f       	subi	r18, 0xFF	; 255
     58a:	3f 4f       	sbci	r19, 0xFF	; 255
     58c:	21 15       	cp	r18, r1
     58e:	84 e0       	ldi	r24, 0x04	; 4
     590:	38 07       	cpc	r19, r24
     592:	c9 f7       	brne	.-14     	; 0x586 <_ZN7Display10clearFrameEv+0x6>
		Displayframe[i]=0;
	}
}
     594:	08 95       	ret

00000596 <_ZN7Display15ssd1306_commandEh>:

void Display::ssd1306_command(uint8_t c){
     596:	1f 93       	push	r17
     598:	cf 93       	push	r28
     59a:	df 93       	push	r29
     59c:	16 2f       	mov	r17, r22
	i2c.twi_start();
     59e:	ec 01       	movw	r28, r24
     5a0:	dc 5f       	subi	r29, 0xFC	; 252
     5a2:	ce 01       	movw	r24, r28
     5a4:	0e 94 af 19 	call	0x335e	; 0x335e <_ZN3I2C9twi_startEv>
	i2c.twi_write(OLEDADRESSE);
     5a8:	68 e7       	ldi	r22, 0x78	; 120
     5aa:	ce 01       	movw	r24, r28
     5ac:	0e 94 b7 19 	call	0x336e	; 0x336e <_ZN3I2C9twi_writeEh>
	i2c.twi_write(OLEDBEFEHL);
     5b0:	60 e0       	ldi	r22, 0x00	; 0
     5b2:	ce 01       	movw	r24, r28
     5b4:	0e 94 b7 19 	call	0x336e	; 0x336e <_ZN3I2C9twi_writeEh>
	i2c.twi_write(c);
     5b8:	61 2f       	mov	r22, r17
     5ba:	ce 01       	movw	r24, r28
     5bc:	0e 94 b7 19 	call	0x336e	; 0x336e <_ZN3I2C9twi_writeEh>
	i2c.twi_stop();
     5c0:	ce 01       	movw	r24, r28
     5c2:	0e 94 b3 19 	call	0x3366	; 0x3366 <_ZN3I2C8twi_stopEv>
}
     5c6:	df 91       	pop	r29
     5c8:	cf 91       	pop	r28
     5ca:	1f 91       	pop	r17
     5cc:	08 95       	ret

000005ce <_ZN7Display17InitializeDisplayEv>:

void Display::InitializeDisplay()
{
     5ce:	cf 93       	push	r28
     5d0:	df 93       	push	r29
     5d2:	ec 01       	movw	r28, r24
	// Init sequence for 128x64 OLED module
	ssd1306_command(SSD1306_DISPLAYOFF);                    // 0xAE
     5d4:	6e ea       	ldi	r22, 0xAE	; 174
     5d6:	0e 94 cb 02 	call	0x596	; 0x596 <_ZN7Display15ssd1306_commandEh>

	ssd1306_command(SSD1306_SETDISPLAYCLOCKDIV);            // 0xD5
     5da:	65 ed       	ldi	r22, 0xD5	; 213
     5dc:	ce 01       	movw	r24, r28
     5de:	0e 94 cb 02 	call	0x596	; 0x596 <_ZN7Display15ssd1306_commandEh>
	ssd1306_command(0x80);                 // the suggested ratio 0x80
     5e2:	60 e8       	ldi	r22, 0x80	; 128
     5e4:	ce 01       	movw	r24, r28
     5e6:	0e 94 cb 02 	call	0x596	; 0x596 <_ZN7Display15ssd1306_commandEh>

	ssd1306_command(SSD1306_SETMULTIPLEX);                  // 0xA8
     5ea:	68 ea       	ldi	r22, 0xA8	; 168
     5ec:	ce 01       	movw	r24, r28
     5ee:	0e 94 cb 02 	call	0x596	; 0x596 <_ZN7Display15ssd1306_commandEh>
	ssd1306_command(0x3F);
     5f2:	6f e3       	ldi	r22, 0x3F	; 63
     5f4:	ce 01       	movw	r24, r28
     5f6:	0e 94 cb 02 	call	0x596	; 0x596 <_ZN7Display15ssd1306_commandEh>

	ssd1306_command(SSD1306_SETDISPLAYOFFSET);              // 0xD3
     5fa:	63 ed       	ldi	r22, 0xD3	; 211
     5fc:	ce 01       	movw	r24, r28
     5fe:	0e 94 cb 02 	call	0x596	; 0x596 <_ZN7Display15ssd1306_commandEh>
	ssd1306_command(0x0);                                   // no offset
     602:	60 e0       	ldi	r22, 0x00	; 0
     604:	ce 01       	movw	r24, r28
     606:	0e 94 cb 02 	call	0x596	; 0x596 <_ZN7Display15ssd1306_commandEh>

	ssd1306_command(SSD1306_SETSTARTLINE);// | 0x0);        // line #0
     60a:	60 e4       	ldi	r22, 0x40	; 64
     60c:	ce 01       	movw	r24, r28
     60e:	0e 94 cb 02 	call	0x596	; 0x596 <_ZN7Display15ssd1306_commandEh>

	ssd1306_command(SSD1306_CHARGEPUMP);                    // 0x8D
     612:	6d e8       	ldi	r22, 0x8D	; 141
     614:	ce 01       	movw	r24, r28
     616:	0e 94 cb 02 	call	0x596	; 0x596 <_ZN7Display15ssd1306_commandEh>
	ssd1306_command(0x14);  // using internal VCC
     61a:	64 e1       	ldi	r22, 0x14	; 20
     61c:	ce 01       	movw	r24, r28
     61e:	0e 94 cb 02 	call	0x596	; 0x596 <_ZN7Display15ssd1306_commandEh>

	ssd1306_command(SSD1306_MEMORYMODE);                    // 0x20
     622:	60 e2       	ldi	r22, 0x20	; 32
     624:	ce 01       	movw	r24, r28
     626:	0e 94 cb 02 	call	0x596	; 0x596 <_ZN7Display15ssd1306_commandEh>
	ssd1306_command(0x00);          // 0x00 horizontal addressing
     62a:	60 e0       	ldi	r22, 0x00	; 0
     62c:	ce 01       	movw	r24, r28
     62e:	0e 94 cb 02 	call	0x596	; 0x596 <_ZN7Display15ssd1306_commandEh>

	ssd1306_command(SSD1306_SEGREMAP | 0x1); // rotate screen 180
     632:	61 ea       	ldi	r22, 0xA1	; 161
     634:	ce 01       	movw	r24, r28
     636:	0e 94 cb 02 	call	0x596	; 0x596 <_ZN7Display15ssd1306_commandEh>

	ssd1306_command(SSD1306_COMSCANDEC); // rotate screen 180
     63a:	68 ec       	ldi	r22, 0xC8	; 200
     63c:	ce 01       	movw	r24, r28
     63e:	0e 94 cb 02 	call	0x596	; 0x596 <_ZN7Display15ssd1306_commandEh>

	ssd1306_command(SSD1306_SETCOMPINS);                    // 0xDA
     642:	6a ed       	ldi	r22, 0xDA	; 218
     644:	ce 01       	movw	r24, r28
     646:	0e 94 cb 02 	call	0x596	; 0x596 <_ZN7Display15ssd1306_commandEh>
	ssd1306_command(0x12);
     64a:	62 e1       	ldi	r22, 0x12	; 18
     64c:	ce 01       	movw	r24, r28
     64e:	0e 94 cb 02 	call	0x596	; 0x596 <_ZN7Display15ssd1306_commandEh>

	ssd1306_command(SSD1306_SETCONTRAST);                   // 0x81
     652:	61 e8       	ldi	r22, 0x81	; 129
     654:	ce 01       	movw	r24, r28
     656:	0e 94 cb 02 	call	0x596	; 0x596 <_ZN7Display15ssd1306_commandEh>
	ssd1306_command(0xCF);
     65a:	6f ec       	ldi	r22, 0xCF	; 207
     65c:	ce 01       	movw	r24, r28
     65e:	0e 94 cb 02 	call	0x596	; 0x596 <_ZN7Display15ssd1306_commandEh>

	ssd1306_command(SSD1306_SETPRECHARGE);                  // 0xd9
     662:	69 ed       	ldi	r22, 0xD9	; 217
     664:	ce 01       	movw	r24, r28
     666:	0e 94 cb 02 	call	0x596	; 0x596 <_ZN7Display15ssd1306_commandEh>
	ssd1306_command(0xF1);
     66a:	61 ef       	ldi	r22, 0xF1	; 241
     66c:	ce 01       	movw	r24, r28
     66e:	0e 94 cb 02 	call	0x596	; 0x596 <_ZN7Display15ssd1306_commandEh>

	ssd1306_command(SSD1306_SETVCOMDETECT);                 // 0xDB
     672:	6b ed       	ldi	r22, 0xDB	; 219
     674:	ce 01       	movw	r24, r28
     676:	0e 94 cb 02 	call	0x596	; 0x596 <_ZN7Display15ssd1306_commandEh>
	ssd1306_command(0x40);
     67a:	60 e4       	ldi	r22, 0x40	; 64
     67c:	ce 01       	movw	r24, r28
     67e:	0e 94 cb 02 	call	0x596	; 0x596 <_ZN7Display15ssd1306_commandEh>

	ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
     682:	64 ea       	ldi	r22, 0xA4	; 164
     684:	ce 01       	movw	r24, r28
     686:	0e 94 cb 02 	call	0x596	; 0x596 <_ZN7Display15ssd1306_commandEh>

	ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
     68a:	66 ea       	ldi	r22, 0xA6	; 166
     68c:	ce 01       	movw	r24, r28
     68e:	0e 94 cb 02 	call	0x596	; 0x596 <_ZN7Display15ssd1306_commandEh>

	ssd1306_command(SSD1306_DISPLAYON);                     //switch on OLED
     692:	6f ea       	ldi	r22, 0xAF	; 175
     694:	ce 01       	movw	r24, r28
     696:	0e 94 cb 02 	call	0x596	; 0x596 <_ZN7Display15ssd1306_commandEh>
}
     69a:	df 91       	pop	r29
     69c:	cf 91       	pop	r28
     69e:	08 95       	ret

000006a0 <_ZN7DisplayC1Ev>:


#include "Display.h"

// default constructor
Display::Display()
     6a0:	cf 93       	push	r28
     6a2:	df 93       	push	r29
     6a4:	ec 01       	movw	r28, r24
     6a6:	9c 5f       	subi	r25, 0xFC	; 252
     6a8:	0e 94 aa 19 	call	0x3354	; 0x3354 <_ZN3I2CC1Ev>
{
	//for (uint8_t i=0;i<1024;i++)
	//{
		//Displayframe[i]=0;
	//}
	InitializeDisplay();
     6ac:	ce 01       	movw	r24, r28
     6ae:	0e 94 e7 02 	call	0x5ce	; 0x5ce <_ZN7Display17InitializeDisplayEv>
} //Display
     6b2:	df 91       	pop	r29
     6b4:	cf 91       	pop	r28
     6b6:	08 95       	ret

000006b8 <_ZN7Display6invertEh>:

	ssd1306_command(SSD1306_DISPLAYON);                     //switch on OLED
}

void Display::invert(uint8_t inverted) {
	if (inverted) {
     6b8:	66 23       	and	r22, r22
     6ba:	21 f0       	breq	.+8      	; 0x6c4 <_ZN7Display6invertEh+0xc>
		ssd1306_command(SSD1306_INVERTDISPLAY);
     6bc:	67 ea       	ldi	r22, 0xA7	; 167
     6be:	0e 94 cb 02 	call	0x596	; 0x596 <_ZN7Display15ssd1306_commandEh>
     6c2:	08 95       	ret
	}
	else {
		ssd1306_command(SSD1306_NORMALDISPLAY);
     6c4:	66 ea       	ldi	r22, 0xA6	; 166
     6c6:	0e 94 cb 02 	call	0x596	; 0x596 <_ZN7Display15ssd1306_commandEh>
     6ca:	08 95       	ret

000006cc <_ZN7Display9sendFrameEv>:
	}
}

void Display::sendFrame(){
     6cc:	ef 92       	push	r14
     6ce:	ff 92       	push	r15
     6d0:	0f 93       	push	r16
     6d2:	1f 93       	push	r17
     6d4:	cf 93       	push	r28
     6d6:	df 93       	push	r29
     6d8:	8c 01       	movw	r16, r24
	//Cursor an den Anfang setzen
	ssd1306_command(SSD1306_COLUMNADDR);
     6da:	61 e2       	ldi	r22, 0x21	; 33
     6dc:	0e 94 cb 02 	call	0x596	; 0x596 <_ZN7Display15ssd1306_commandEh>
	ssd1306_command(0x00);
     6e0:	60 e0       	ldi	r22, 0x00	; 0
     6e2:	c8 01       	movw	r24, r16
     6e4:	0e 94 cb 02 	call	0x596	; 0x596 <_ZN7Display15ssd1306_commandEh>
	ssd1306_command(0x7F);
     6e8:	6f e7       	ldi	r22, 0x7F	; 127
     6ea:	c8 01       	movw	r24, r16
     6ec:	0e 94 cb 02 	call	0x596	; 0x596 <_ZN7Display15ssd1306_commandEh>

	ssd1306_command(SSD1306_PAGEADDR);
     6f0:	62 e2       	ldi	r22, 0x22	; 34
     6f2:	c8 01       	movw	r24, r16
     6f4:	0e 94 cb 02 	call	0x596	; 0x596 <_ZN7Display15ssd1306_commandEh>
	ssd1306_command(0x00);
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	c8 01       	movw	r24, r16
     6fc:	0e 94 cb 02 	call	0x596	; 0x596 <_ZN7Display15ssd1306_commandEh>
	ssd1306_command(0x07);
     700:	67 e0       	ldi	r22, 0x07	; 7
     702:	c8 01       	movw	r24, r16
     704:	0e 94 cb 02 	call	0x596	; 0x596 <_ZN7Display15ssd1306_commandEh>

	i2c.twi_start();
     708:	78 01       	movw	r14, r16
     70a:	8c ef       	ldi	r24, 0xFC	; 252
     70c:	f8 1a       	sub	r15, r24
     70e:	c7 01       	movw	r24, r14
     710:	0e 94 af 19 	call	0x335e	; 0x335e <_ZN3I2C9twi_startEv>
	i2c.twi_write(OLEDADRESSE);
     714:	68 e7       	ldi	r22, 0x78	; 120
     716:	c7 01       	movw	r24, r14
     718:	0e 94 b7 19 	call	0x336e	; 0x336e <_ZN3I2C9twi_writeEh>
	i2c.twi_write(OLEDDATA);
     71c:	60 e4       	ldi	r22, 0x40	; 64
     71e:	c7 01       	movw	r24, r14
     720:	0e 94 b7 19 	call	0x336e	; 0x336e <_ZN3I2C9twi_writeEh>
	
	for(uint16_t i=0; i<1024;i++){
     724:	c0 e0       	ldi	r28, 0x00	; 0
     726:	d0 e0       	ldi	r29, 0x00	; 0
		i2c.twi_write(Displayframe[i]);
     728:	f8 01       	movw	r30, r16
     72a:	61 91       	ld	r22, Z+
     72c:	8f 01       	movw	r16, r30
     72e:	c7 01       	movw	r24, r14
     730:	0e 94 b7 19 	call	0x336e	; 0x336e <_ZN3I2C9twi_writeEh>

	i2c.twi_start();
	i2c.twi_write(OLEDADRESSE);
	i2c.twi_write(OLEDDATA);
	
	for(uint16_t i=0; i<1024;i++){
     734:	21 96       	adiw	r28, 0x01	; 1
     736:	c1 15       	cp	r28, r1
     738:	f4 e0       	ldi	r31, 0x04	; 4
     73a:	df 07       	cpc	r29, r31
     73c:	a9 f7       	brne	.-22     	; 0x728 <_ZN7Display9sendFrameEv+0x5c>
		i2c.twi_write(Displayframe[i]);
	}
	i2c.twi_stop();
     73e:	c7 01       	movw	r24, r14
     740:	0e 94 b3 19 	call	0x3366	; 0x3366 <_ZN3I2C8twi_stopEv>
}
     744:	df 91       	pop	r29
     746:	cf 91       	pop	r28
     748:	1f 91       	pop	r17
     74a:	0f 91       	pop	r16
     74c:	ff 90       	pop	r15
     74e:	ef 90       	pop	r14
     750:	08 95       	ret

00000752 <_ZN7Display9drawPixelEhhh>:

void Display::drawPixel(uint8_t pos_x, uint8_t pos_y, uint8_t erase){
	if(!(pos_x >= SSD1306_WIDTH || pos_y >= SSD1306_HEIGHT)){
     752:	66 23       	and	r22, r22
     754:	bc f1       	brlt	.+110    	; 0x7c4 <_ZN7Display9drawPixelEhhh+0x72>
     756:	40 34       	cpi	r20, 0x40	; 64
     758:	a8 f5       	brcc	.+106    	; 0x7c4 <_ZN7Display9drawPixelEhhh+0x72>
		if(!erase){
     75a:	21 11       	cpse	r18, r1
     75c:	19 c0       	rjmp	.+50     	; 0x790 <_ZN7Display9drawPixelEhhh+0x3e>
			Displayframe[pos_x+(pos_y/8)*SSD1306_WIDTH] |= (1 << (pos_y&7));
     75e:	e4 2f       	mov	r30, r20
     760:	e6 95       	lsr	r30
     762:	e6 95       	lsr	r30
     764:	e6 95       	lsr	r30
     766:	20 e8       	ldi	r18, 0x80	; 128
     768:	e2 9f       	mul	r30, r18
     76a:	f0 01       	movw	r30, r0
     76c:	11 24       	eor	r1, r1
     76e:	e6 0f       	add	r30, r22
     770:	f1 1d       	adc	r31, r1
     772:	e8 0f       	add	r30, r24
     774:	f9 1f       	adc	r31, r25
     776:	47 70       	andi	r20, 0x07	; 7
     778:	21 e0       	ldi	r18, 0x01	; 1
     77a:	30 e0       	ldi	r19, 0x00	; 0
     77c:	c9 01       	movw	r24, r18
     77e:	02 c0       	rjmp	.+4      	; 0x784 <_ZN7Display9drawPixelEhhh+0x32>
     780:	88 0f       	add	r24, r24
     782:	99 1f       	adc	r25, r25
     784:	4a 95       	dec	r20
     786:	e2 f7       	brpl	.-8      	; 0x780 <_ZN7Display9drawPixelEhhh+0x2e>
     788:	90 81       	ld	r25, Z
     78a:	89 2b       	or	r24, r25
     78c:	80 83       	st	Z, r24
     78e:	08 95       	ret
		}
		else {
			Displayframe[pos_x+(pos_y/8)*SSD1306_WIDTH] &= ~(1 << (pos_y&7));
     790:	e4 2f       	mov	r30, r20
     792:	e6 95       	lsr	r30
     794:	e6 95       	lsr	r30
     796:	e6 95       	lsr	r30
     798:	30 e8       	ldi	r19, 0x80	; 128
     79a:	e3 9f       	mul	r30, r19
     79c:	f0 01       	movw	r30, r0
     79e:	11 24       	eor	r1, r1
     7a0:	e6 0f       	add	r30, r22
     7a2:	f1 1d       	adc	r31, r1
     7a4:	e8 0f       	add	r30, r24
     7a6:	f9 1f       	adc	r31, r25
     7a8:	47 70       	andi	r20, 0x07	; 7
     7aa:	81 e0       	ldi	r24, 0x01	; 1
     7ac:	90 e0       	ldi	r25, 0x00	; 0
     7ae:	9c 01       	movw	r18, r24
     7b0:	02 c0       	rjmp	.+4      	; 0x7b6 <_ZN7Display9drawPixelEhhh+0x64>
     7b2:	22 0f       	add	r18, r18
     7b4:	33 1f       	adc	r19, r19
     7b6:	4a 95       	dec	r20
     7b8:	e2 f7       	brpl	.-8      	; 0x7b2 <_ZN7Display9drawPixelEhhh+0x60>
     7ba:	a9 01       	movw	r20, r18
     7bc:	40 95       	com	r20
     7be:	80 81       	ld	r24, Z
     7c0:	48 23       	and	r20, r24
     7c2:	40 83       	st	Z, r20
     7c4:	08 95       	ret

000007c6 <_ZN7Display9draw_lineEhhhf>:
		}
	}
}

//eigene Zeichenfunktionen
void Display::draw_line(uint8_t x, uint8_t y, uint8_t length, float phi){
     7c6:	2f 92       	push	r2
     7c8:	3f 92       	push	r3
     7ca:	4f 92       	push	r4
     7cc:	5f 92       	push	r5
     7ce:	6f 92       	push	r6
     7d0:	7f 92       	push	r7
     7d2:	8f 92       	push	r8
     7d4:	9f 92       	push	r9
     7d6:	af 92       	push	r10
     7d8:	bf 92       	push	r11
     7da:	cf 92       	push	r12
     7dc:	df 92       	push	r13
     7de:	ef 92       	push	r14
     7e0:	ff 92       	push	r15
     7e2:	0f 93       	push	r16
     7e4:	1f 93       	push	r17
     7e6:	cf 93       	push	r28
     7e8:	df 93       	push	r29
     7ea:	cd b7       	in	r28, 0x3d	; 61
     7ec:	de b7       	in	r29, 0x3e	; 62
     7ee:	2b 97       	sbiw	r28, 0x0b	; 11
     7f0:	0f b6       	in	r0, 0x3f	; 63
     7f2:	f8 94       	cli
     7f4:	de bf       	out	0x3e, r29	; 62
     7f6:	0f be       	out	0x3f, r0	; 63
     7f8:	cd bf       	out	0x3d, r28	; 61
     7fa:	1c 01       	movw	r2, r24
     7fc:	d6 2e       	mov	r13, r22
     7fe:	c4 2e       	mov	r12, r20
     800:	29 83       	std	Y+1, r18	; 0x01
	//phi*=M_PI/180.0;
	uint8_t pos_x=0, pos_y=0;
	for (uint8_t i=0;i<length;i++)
     802:	22 23       	and	r18, r18
     804:	09 f4       	brne	.+2      	; 0x808 <_ZN7Display9draw_lineEhhhf+0x42>
     806:	69 c0       	rjmp	.+210    	; 0x8da <_ZN7Display9draw_lineEhhhf+0x114>
	{
		pos_x=(uint8_t) (-i*cos(phi)+x);
     808:	c8 01       	movw	r24, r16
     80a:	b7 01       	movw	r22, r14
     80c:	0e 94 7f 20 	call	0x40fe	; 0x40fe <cos>
     810:	2b 01       	movw	r4, r22
     812:	3c 01       	movw	r6, r24
		pos_y=(uint8_t) (i*sin(phi)+y);
     814:	c8 01       	movw	r24, r16
     816:	b7 01       	movw	r22, r14
     818:	0e 94 99 22 	call	0x4532	; 0x4532 <sin>
     81c:	4b 01       	movw	r8, r22
     81e:	5c 01       	movw	r10, r24
     820:	1b 86       	std	Y+11, r1	; 0x0b
     822:	1a 86       	std	Y+10, r1	; 0x0a
     824:	8c 2d       	mov	r24, r12
     826:	90 e0       	ldi	r25, 0x00	; 0
     828:	a0 e0       	ldi	r26, 0x00	; 0
     82a:	b0 e0       	ldi	r27, 0x00	; 0
     82c:	8a 83       	std	Y+2, r24	; 0x02
     82e:	9b 83       	std	Y+3, r25	; 0x03
     830:	ac 83       	std	Y+4, r26	; 0x04
     832:	bd 83       	std	Y+5, r27	; 0x05
void Display::draw_line(uint8_t x, uint8_t y, uint8_t length, float phi){
	//phi*=M_PI/180.0;
	uint8_t pos_x=0, pos_y=0;
	for (uint8_t i=0;i<length;i++)
	{
		pos_x=(uint8_t) (-i*cos(phi)+x);
     834:	8d 2d       	mov	r24, r13
     836:	90 e0       	ldi	r25, 0x00	; 0
     838:	a0 e0       	ldi	r26, 0x00	; 0
     83a:	b0 e0       	ldi	r27, 0x00	; 0
     83c:	8e 83       	std	Y+6, r24	; 0x06
     83e:	9f 83       	std	Y+7, r25	; 0x07
     840:	a8 87       	std	Y+8, r26	; 0x08
     842:	b9 87       	std	Y+9, r27	; 0x09
		pos_y=(uint8_t) (i*sin(phi)+y);
     844:	aa 85       	ldd	r26, Y+10	; 0x0a
     846:	bb 85       	ldd	r27, Y+11	; 0x0b
     848:	bd 01       	movw	r22, r26
     84a:	88 27       	eor	r24, r24
     84c:	77 fd       	sbrc	r23, 7
     84e:	80 95       	com	r24
     850:	98 2f       	mov	r25, r24
     852:	0e 94 1d 21 	call	0x423a	; 0x423a <__floatsisf>
     856:	a5 01       	movw	r20, r10
     858:	94 01       	movw	r18, r8
     85a:	0e 94 36 22 	call	0x446c	; 0x446c <__mulsf3>
     85e:	6b 01       	movw	r12, r22
     860:	7c 01       	movw	r14, r24
     862:	6a 81       	ldd	r22, Y+2	; 0x02
     864:	7b 81       	ldd	r23, Y+3	; 0x03
     866:	8c 81       	ldd	r24, Y+4	; 0x04
     868:	9d 81       	ldd	r25, Y+5	; 0x05
     86a:	0e 94 1d 21 	call	0x423a	; 0x423a <__floatsisf>
     86e:	9b 01       	movw	r18, r22
     870:	ac 01       	movw	r20, r24
     872:	c7 01       	movw	r24, r14
     874:	b6 01       	movw	r22, r12
     876:	0e 94 b5 1f 	call	0x3f6a	; 0x3f6a <__addsf3>
     87a:	0e 94 ef 20 	call	0x41de	; 0x41de <__fixunssfsi>
     87e:	16 2f       	mov	r17, r22
     880:	6a 85       	ldd	r22, Y+10	; 0x0a
     882:	7b 85       	ldd	r23, Y+11	; 0x0b
     884:	71 95       	neg	r23
     886:	61 95       	neg	r22
     888:	71 09       	sbc	r23, r1
void Display::draw_line(uint8_t x, uint8_t y, uint8_t length, float phi){
	//phi*=M_PI/180.0;
	uint8_t pos_x=0, pos_y=0;
	for (uint8_t i=0;i<length;i++)
	{
		pos_x=(uint8_t) (-i*cos(phi)+x);
     88a:	88 27       	eor	r24, r24
     88c:	77 fd       	sbrc	r23, 7
     88e:	80 95       	com	r24
     890:	98 2f       	mov	r25, r24
     892:	0e 94 1d 21 	call	0x423a	; 0x423a <__floatsisf>
     896:	a3 01       	movw	r20, r6
     898:	92 01       	movw	r18, r4
     89a:	0e 94 36 22 	call	0x446c	; 0x446c <__mulsf3>
     89e:	6b 01       	movw	r12, r22
     8a0:	7c 01       	movw	r14, r24
     8a2:	6e 81       	ldd	r22, Y+6	; 0x06
     8a4:	7f 81       	ldd	r23, Y+7	; 0x07
     8a6:	88 85       	ldd	r24, Y+8	; 0x08
     8a8:	99 85       	ldd	r25, Y+9	; 0x09
     8aa:	0e 94 1d 21 	call	0x423a	; 0x423a <__floatsisf>
     8ae:	9b 01       	movw	r18, r22
     8b0:	ac 01       	movw	r20, r24
     8b2:	c7 01       	movw	r24, r14
     8b4:	b6 01       	movw	r22, r12
     8b6:	0e 94 b5 1f 	call	0x3f6a	; 0x3f6a <__addsf3>
     8ba:	0e 94 ef 20 	call	0x41de	; 0x41de <__fixunssfsi>
		pos_y=(uint8_t) (i*sin(phi)+y);
		drawPixel(pos_x,pos_y,0);
     8be:	20 e0       	ldi	r18, 0x00	; 0
     8c0:	41 2f       	mov	r20, r17
     8c2:	c1 01       	movw	r24, r2
     8c4:	0e 94 a9 03 	call	0x752	; 0x752 <_ZN7Display9drawPixelEhhh>
     8c8:	ea 85       	ldd	r30, Y+10	; 0x0a
     8ca:	fb 85       	ldd	r31, Y+11	; 0x0b
     8cc:	31 96       	adiw	r30, 0x01	; 1
     8ce:	fb 87       	std	Y+11, r31	; 0x0b
     8d0:	ea 87       	std	Y+10, r30	; 0x0a

//eigene Zeichenfunktionen
void Display::draw_line(uint8_t x, uint8_t y, uint8_t length, float phi){
	//phi*=M_PI/180.0;
	uint8_t pos_x=0, pos_y=0;
	for (uint8_t i=0;i<length;i++)
     8d2:	f9 81       	ldd	r31, Y+1	; 0x01
     8d4:	ef 17       	cp	r30, r31
     8d6:	08 f4       	brcc	.+2      	; 0x8da <_ZN7Display9draw_lineEhhhf+0x114>
     8d8:	b5 cf       	rjmp	.-150    	; 0x844 <_ZN7Display9draw_lineEhhhf+0x7e>
	{
		pos_x=(uint8_t) (-i*cos(phi)+x);
		pos_y=(uint8_t) (i*sin(phi)+y);
		drawPixel(pos_x,pos_y,0);
	}
}
     8da:	2b 96       	adiw	r28, 0x0b	; 11
     8dc:	0f b6       	in	r0, 0x3f	; 63
     8de:	f8 94       	cli
     8e0:	de bf       	out	0x3e, r29	; 62
     8e2:	0f be       	out	0x3f, r0	; 63
     8e4:	cd bf       	out	0x3d, r28	; 61
     8e6:	df 91       	pop	r29
     8e8:	cf 91       	pop	r28
     8ea:	1f 91       	pop	r17
     8ec:	0f 91       	pop	r16
     8ee:	ff 90       	pop	r15
     8f0:	ef 90       	pop	r14
     8f2:	df 90       	pop	r13
     8f4:	cf 90       	pop	r12
     8f6:	bf 90       	pop	r11
     8f8:	af 90       	pop	r10
     8fa:	9f 90       	pop	r9
     8fc:	8f 90       	pop	r8
     8fe:	7f 90       	pop	r7
     900:	6f 90       	pop	r6
     902:	5f 90       	pop	r5
     904:	4f 90       	pop	r4
     906:	3f 90       	pop	r3
     908:	2f 90       	pop	r2
     90a:	08 95       	ret

0000090c <_ZN7Display13draw_triangleEhhhff>:

//using basecenterpoint as turningpoint for rotation
//upright triangle has rotationangle of 0
//turning clockwise considered in x transformation
//baseangle=70 is for 1/3 type
void Display::draw_triangle(uint8_t basecenter_x, uint8_t basecenter_y, uint8_t baselength, float baseangle, float rotationangle){
     90c:	2f 92       	push	r2
     90e:	3f 92       	push	r3
     910:	4f 92       	push	r4
     912:	5f 92       	push	r5
     914:	6f 92       	push	r6
     916:	7f 92       	push	r7
     918:	8f 92       	push	r8
     91a:	9f 92       	push	r9
     91c:	af 92       	push	r10
     91e:	bf 92       	push	r11
     920:	cf 92       	push	r12
     922:	df 92       	push	r13
     924:	ef 92       	push	r14
     926:	ff 92       	push	r15
     928:	0f 93       	push	r16
     92a:	1f 93       	push	r17
     92c:	cf 93       	push	r28
     92e:	df 93       	push	r29
     930:	cd b7       	in	r28, 0x3d	; 61
     932:	de b7       	in	r29, 0x3e	; 62
     934:	60 97       	sbiw	r28, 0x10	; 16
     936:	0f b6       	in	r0, 0x3f	; 63
     938:	f8 94       	cli
     93a:	de bf       	out	0x3e, r29	; 62
     93c:	0f be       	out	0x3f, r0	; 63
     93e:	cd bf       	out	0x3d, r28	; 61
     940:	1c 01       	movw	r2, r24
     942:	6f 87       	std	Y+15, r22	; 0x0f
     944:	4d 83       	std	Y+5, r20	; 0x05
     946:	29 83       	std	Y+1, r18	; 0x01
     948:	c6 01       	movw	r24, r12
     94a:	b5 01       	movw	r22, r10
	//correcting rotationangle
	rotationangle*=M_PI/180.0;
     94c:	25 e3       	ldi	r18, 0x35	; 53
     94e:	3a ef       	ldi	r19, 0xFA	; 250
     950:	4e e8       	ldi	r20, 0x8E	; 142
     952:	5c e3       	ldi	r21, 0x3C	; 60
     954:	0e 94 36 22 	call	0x446c	; 0x446c <__mulsf3>
     958:	4b 01       	movw	r8, r22
     95a:	5c 01       	movw	r10, r24
	baseangle*=M_PI/180.0;
     95c:	25 e3       	ldi	r18, 0x35	; 53
     95e:	3a ef       	ldi	r19, 0xFA	; 250
     960:	4e e8       	ldi	r20, 0x8E	; 142
     962:	5c e3       	ldi	r21, 0x3C	; 60
     964:	c8 01       	movw	r24, r16
     966:	b7 01       	movw	r22, r14
     968:	0e 94 36 22 	call	0x446c	; 0x446c <__mulsf3>
     96c:	6e 83       	std	Y+6, r22	; 0x06
     96e:	7f 83       	std	Y+7, r23	; 0x07
     970:	88 87       	std	Y+8, r24	; 0x08
     972:	99 87       	std	Y+9, r25	; 0x09
	//draw baseline
	draw_line(basecenter_x,basecenter_y,baselength/2,rotationangle);
     974:	79 80       	ldd	r7, Y+1	; 0x01
     976:	76 94       	lsr	r7
     978:	85 01       	movw	r16, r10
     97a:	74 01       	movw	r14, r8
     97c:	27 2d       	mov	r18, r7
     97e:	4d 81       	ldd	r20, Y+5	; 0x05
     980:	6f 85       	ldd	r22, Y+15	; 0x0f
     982:	c1 01       	movw	r24, r2
     984:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <_ZN7Display9draw_lineEhhhf>
	draw_line(basecenter_x,basecenter_y,baselength/2,rotationangle-M_PI);
     988:	2b ed       	ldi	r18, 0xDB	; 219
     98a:	3f e0       	ldi	r19, 0x0F	; 15
     98c:	49 e4       	ldi	r20, 0x49	; 73
     98e:	50 e4       	ldi	r21, 0x40	; 64
     990:	c5 01       	movw	r24, r10
     992:	b4 01       	movw	r22, r8
     994:	0e 94 b4 1f 	call	0x3f68	; 0x3f68 <__subsf3>
     998:	7b 01       	movw	r14, r22
     99a:	8c 01       	movw	r16, r24
     99c:	27 2d       	mov	r18, r7
     99e:	4d 81       	ldd	r20, Y+5	; 0x05
     9a0:	6f 85       	ldd	r22, Y+15	; 0x0f
     9a2:	c1 01       	movw	r24, r2
     9a4:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <_ZN7Display9draw_lineEhhhf>
	//draw midleline
	uint8_t middlelength=baselength/2*tan(baseangle);
     9a8:	6e 81       	ldd	r22, Y+6	; 0x06
     9aa:	7f 81       	ldd	r23, Y+7	; 0x07
     9ac:	88 85       	ldd	r24, Y+8	; 0x08
     9ae:	99 85       	ldd	r25, Y+9	; 0x09
     9b0:	0e 94 a2 22 	call	0x4544	; 0x4544 <tan>
     9b4:	6b 01       	movw	r12, r22
     9b6:	7c 01       	movw	r14, r24
     9b8:	67 2d       	mov	r22, r7
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	80 e0       	ldi	r24, 0x00	; 0
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	0e 94 1d 21 	call	0x423a	; 0x423a <__floatsisf>
     9c4:	a7 01       	movw	r20, r14
     9c6:	96 01       	movw	r18, r12
     9c8:	0e 94 36 22 	call	0x446c	; 0x446c <__mulsf3>
     9cc:	0e 94 ef 20 	call	0x41de	; 0x41de <__fixunssfsi>
     9d0:	68 8b       	std	Y+16, r22	; 0x10
	draw_line(basecenter_x,basecenter_y,middlelength,rotationangle-M_PI_2);
     9d2:	2b ed       	ldi	r18, 0xDB	; 219
     9d4:	3f e0       	ldi	r19, 0x0F	; 15
     9d6:	49 ec       	ldi	r20, 0xC9	; 201
     9d8:	5f e3       	ldi	r21, 0x3F	; 63
     9da:	c5 01       	movw	r24, r10
     9dc:	b4 01       	movw	r22, r8
     9de:	0e 94 b4 1f 	call	0x3f68	; 0x3f68 <__subsf3>
     9e2:	6a 87       	std	Y+10, r22	; 0x0a
     9e4:	7b 87       	std	Y+11, r23	; 0x0b
     9e6:	8c 87       	std	Y+12, r24	; 0x0c
     9e8:	9d 87       	std	Y+13, r25	; 0x0d
     9ea:	7b 01       	movw	r14, r22
     9ec:	8c 01       	movw	r16, r24
     9ee:	28 89       	ldd	r18, Y+16	; 0x10
     9f0:	4d 81       	ldd	r20, Y+5	; 0x05
     9f2:	6f 85       	ldd	r22, Y+15	; 0x0f
     9f4:	c1 01       	movw	r24, r2
     9f6:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <_ZN7Display9draw_lineEhhhf>
	//draw left arm
	uint8_t lengtharm=baselength/(2*cos(baseangle));
     9fa:	6e 81       	ldd	r22, Y+6	; 0x06
     9fc:	7f 81       	ldd	r23, Y+7	; 0x07
     9fe:	88 85       	ldd	r24, Y+8	; 0x08
     a00:	99 85       	ldd	r25, Y+9	; 0x09
     a02:	0e 94 7f 20 	call	0x40fe	; 0x40fe <cos>
     a06:	6b 01       	movw	r12, r22
     a08:	7c 01       	movw	r14, r24
     a0a:	29 81       	ldd	r18, Y+1	; 0x01
     a0c:	62 2f       	mov	r22, r18
     a0e:	70 e0       	ldi	r23, 0x00	; 0
     a10:	80 e0       	ldi	r24, 0x00	; 0
     a12:	90 e0       	ldi	r25, 0x00	; 0
     a14:	0e 94 1d 21 	call	0x423a	; 0x423a <__floatsisf>
     a18:	2b 01       	movw	r4, r22
     a1a:	3c 01       	movw	r6, r24
     a1c:	a7 01       	movw	r20, r14
     a1e:	96 01       	movw	r18, r12
     a20:	c7 01       	movw	r24, r14
     a22:	b6 01       	movw	r22, r12
     a24:	0e 94 b5 1f 	call	0x3f6a	; 0x3f6a <__addsf3>
     a28:	9b 01       	movw	r18, r22
     a2a:	ac 01       	movw	r20, r24
     a2c:	c3 01       	movw	r24, r6
     a2e:	b2 01       	movw	r22, r4
     a30:	0e 94 82 20 	call	0x4104	; 0x4104 <__divsf3>
     a34:	0e 94 ef 20 	call	0x41de	; 0x41de <__fixunssfsi>
     a38:	6e 87       	std	Y+14, r22	; 0x0e
	uint8_t sx = basecenter_x-middlelength*cos(rotationangle-M_PI_2);
     a3a:	e8 89       	ldd	r30, Y+16	; 0x10
     a3c:	6e 2f       	mov	r22, r30
     a3e:	70 e0       	ldi	r23, 0x00	; 0
     a40:	80 e0       	ldi	r24, 0x00	; 0
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	0e 94 1d 21 	call	0x423a	; 0x423a <__floatsisf>
     a48:	69 83       	std	Y+1, r22	; 0x01
     a4a:	7a 83       	std	Y+2, r23	; 0x02
     a4c:	8b 83       	std	Y+3, r24	; 0x03
     a4e:	9c 83       	std	Y+4, r25	; 0x04
     a50:	6a 85       	ldd	r22, Y+10	; 0x0a
     a52:	7b 85       	ldd	r23, Y+11	; 0x0b
     a54:	8c 85       	ldd	r24, Y+12	; 0x0c
     a56:	9d 85       	ldd	r25, Y+13	; 0x0d
     a58:	0e 94 7f 20 	call	0x40fe	; 0x40fe <cos>
     a5c:	6b 01       	movw	r12, r22
     a5e:	7c 01       	movw	r14, r24
     a60:	ff 85       	ldd	r31, Y+15	; 0x0f
     a62:	6f 2f       	mov	r22, r31
     a64:	70 e0       	ldi	r23, 0x00	; 0
     a66:	80 e0       	ldi	r24, 0x00	; 0
     a68:	90 e0       	ldi	r25, 0x00	; 0
     a6a:	0e 94 1d 21 	call	0x423a	; 0x423a <__floatsisf>
     a6e:	2b 01       	movw	r4, r22
     a70:	3c 01       	movw	r6, r24
     a72:	a7 01       	movw	r20, r14
     a74:	96 01       	movw	r18, r12
     a76:	69 81       	ldd	r22, Y+1	; 0x01
     a78:	7a 81       	ldd	r23, Y+2	; 0x02
     a7a:	8b 81       	ldd	r24, Y+3	; 0x03
     a7c:	9c 81       	ldd	r25, Y+4	; 0x04
     a7e:	0e 94 36 22 	call	0x446c	; 0x446c <__mulsf3>
     a82:	9b 01       	movw	r18, r22
     a84:	ac 01       	movw	r20, r24
     a86:	c3 01       	movw	r24, r6
     a88:	b2 01       	movw	r22, r4
     a8a:	0e 94 b4 1f 	call	0x3f68	; 0x3f68 <__subsf3>
     a8e:	0e 94 ef 20 	call	0x41de	; 0x41de <__fixunssfsi>
     a92:	6f 87       	std	Y+15, r22	; 0x0f
	uint8_t sy = basecenter_y+middlelength*sin(rotationangle-M_PI_2);
     a94:	6a 85       	ldd	r22, Y+10	; 0x0a
     a96:	7b 85       	ldd	r23, Y+11	; 0x0b
     a98:	8c 85       	ldd	r24, Y+12	; 0x0c
     a9a:	9d 85       	ldd	r25, Y+13	; 0x0d
     a9c:	0e 94 99 22 	call	0x4532	; 0x4532 <sin>
     aa0:	6b 01       	movw	r12, r22
     aa2:	7c 01       	movw	r14, r24
     aa4:	2d 81       	ldd	r18, Y+5	; 0x05
     aa6:	62 2f       	mov	r22, r18
     aa8:	70 e0       	ldi	r23, 0x00	; 0
     aaa:	80 e0       	ldi	r24, 0x00	; 0
     aac:	90 e0       	ldi	r25, 0x00	; 0
     aae:	0e 94 1d 21 	call	0x423a	; 0x423a <__floatsisf>
     ab2:	2b 01       	movw	r4, r22
     ab4:	3c 01       	movw	r6, r24
     ab6:	a7 01       	movw	r20, r14
     ab8:	96 01       	movw	r18, r12
     aba:	69 81       	ldd	r22, Y+1	; 0x01
     abc:	7a 81       	ldd	r23, Y+2	; 0x02
     abe:	8b 81       	ldd	r24, Y+3	; 0x03
     ac0:	9c 81       	ldd	r25, Y+4	; 0x04
     ac2:	0e 94 36 22 	call	0x446c	; 0x446c <__mulsf3>
     ac6:	9b 01       	movw	r18, r22
     ac8:	ac 01       	movw	r20, r24
     aca:	c3 01       	movw	r24, r6
     acc:	b2 01       	movw	r22, r4
     ace:	0e 94 b5 1f 	call	0x3f6a	; 0x3f6a <__addsf3>
     ad2:	0e 94 ef 20 	call	0x41de	; 0x41de <__fixunssfsi>
     ad6:	d6 2e       	mov	r13, r22
	draw_line(sx,sy,lengtharm,baseangle+rotationangle);
     ad8:	a5 01       	movw	r20, r10
     ada:	94 01       	movw	r18, r8
     adc:	6e 81       	ldd	r22, Y+6	; 0x06
     ade:	7f 81       	ldd	r23, Y+7	; 0x07
     ae0:	88 85       	ldd	r24, Y+8	; 0x08
     ae2:	99 85       	ldd	r25, Y+9	; 0x09
     ae4:	0e 94 b5 1f 	call	0x3f6a	; 0x3f6a <__addsf3>
     ae8:	7b 01       	movw	r14, r22
     aea:	8c 01       	movw	r16, r24
     aec:	2e 85       	ldd	r18, Y+14	; 0x0e
     aee:	4d 2d       	mov	r20, r13
     af0:	6f 85       	ldd	r22, Y+15	; 0x0f
     af2:	c1 01       	movw	r24, r2
     af4:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <_ZN7Display9draw_lineEhhhf>
	//draw right arm
	draw_line(sx,sy,lengtharm,-baseangle+rotationangle-M_PI);
     af8:	2e 81       	ldd	r18, Y+6	; 0x06
     afa:	3f 81       	ldd	r19, Y+7	; 0x07
     afc:	48 85       	ldd	r20, Y+8	; 0x08
     afe:	59 85       	ldd	r21, Y+9	; 0x09
     b00:	c5 01       	movw	r24, r10
     b02:	b4 01       	movw	r22, r8
     b04:	0e 94 b4 1f 	call	0x3f68	; 0x3f68 <__subsf3>
     b08:	2b ed       	ldi	r18, 0xDB	; 219
     b0a:	3f e0       	ldi	r19, 0x0F	; 15
     b0c:	49 e4       	ldi	r20, 0x49	; 73
     b0e:	50 e4       	ldi	r21, 0x40	; 64
     b10:	0e 94 b4 1f 	call	0x3f68	; 0x3f68 <__subsf3>
     b14:	7b 01       	movw	r14, r22
     b16:	8c 01       	movw	r16, r24
     b18:	2e 85       	ldd	r18, Y+14	; 0x0e
     b1a:	4d 2d       	mov	r20, r13
     b1c:	6f 85       	ldd	r22, Y+15	; 0x0f
     b1e:	c1 01       	movw	r24, r2
     b20:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <_ZN7Display9draw_lineEhhhf>
}
     b24:	60 96       	adiw	r28, 0x10	; 16
     b26:	0f b6       	in	r0, 0x3f	; 63
     b28:	f8 94       	cli
     b2a:	de bf       	out	0x3e, r29	; 62
     b2c:	0f be       	out	0x3f, r0	; 63
     b2e:	cd bf       	out	0x3d, r28	; 61
     b30:	df 91       	pop	r29
     b32:	cf 91       	pop	r28
     b34:	1f 91       	pop	r17
     b36:	0f 91       	pop	r16
     b38:	ff 90       	pop	r15
     b3a:	ef 90       	pop	r14
     b3c:	df 90       	pop	r13
     b3e:	cf 90       	pop	r12
     b40:	bf 90       	pop	r11
     b42:	af 90       	pop	r10
     b44:	9f 90       	pop	r9
     b46:	8f 90       	pop	r8
     b48:	7f 90       	pop	r7
     b4a:	6f 90       	pop	r6
     b4c:	5f 90       	pop	r5
     b4e:	4f 90       	pop	r4
     b50:	3f 90       	pop	r3
     b52:	2f 90       	pop	r2
     b54:	08 95       	ret

00000b56 <_ZN7Display9draw_ASCIEhhh>:

void Display::draw_ASCI(uint8_t sym,uint8_t x, uint8_t y){
     b56:	0f 93       	push	r16
     b58:	1f 93       	push	r17
     b5a:	cf 93       	push	r28
     b5c:	df 93       	push	r29
	if(sym!=' ' && sym>=33){
     b5e:	61 32       	cpi	r22, 0x21	; 33
     b60:	08 f4       	brcc	.+2      	; 0xb64 <_ZN7Display9draw_ASCIEhhh+0xe>
     b62:	42 c0       	rjmp	.+132    	; 0xbe8 <_ZN7Display9draw_ASCIEhhh+0x92>
		sym-=33;
		uint16_t symbol;
		for(uint8_t i = 0; i < 5; i++){
			symbol = pgm_read_byte(&font5x8[sym][i]);
			symbol = symbol << y%8;
			Displayframe[x+(y/8)*SSD1306_WIDTH+i] |=(uint8_t) (symbol & 0x00FF);
     b64:	a4 2f       	mov	r26, r20
     b66:	b0 e0       	ldi	r27, 0x00	; 0
     b68:	02 2f       	mov	r16, r18
     b6a:	06 95       	lsr	r16
     b6c:	06 95       	lsr	r16
     b6e:	06 95       	lsr	r16
     b70:	30 e8       	ldi	r19, 0x80	; 128
     b72:	03 9f       	mul	r16, r19
     b74:	80 01       	movw	r16, r0
     b76:	11 24       	eor	r1, r1
     b78:	ed 01       	movw	r28, r26
     b7a:	c0 0f       	add	r28, r16
     b7c:	d1 1f       	adc	r29, r17
			if(((symbol&0xFF00)>>8)==0){
				Displayframe[x+(y/8+1)*SSD1306_WIDTH+i] |= 0;
			}
			else {
				Displayframe[x+(y/8+1)*SSD1306_WIDTH+i] |= (uint8_t) ((symbol & 0xFF00)>>8);
     b7e:	00 58       	subi	r16, 0x80	; 128
     b80:	1f 4f       	sbci	r17, 0xFF	; 255
     b82:	0a 0f       	add	r16, r26
     b84:	1b 1f       	adc	r17, r27
	draw_line(sx,sy,lengtharm,-baseangle+rotationangle-M_PI);
}

void Display::draw_ASCI(uint8_t sym,uint8_t x, uint8_t y){
	if(sym!=' ' && sym>=33){
		sym-=33;
     b86:	61 52       	subi	r22, 0x21	; 33
     b88:	46 2f       	mov	r20, r22
     b8a:	50 e0       	ldi	r21, 0x00	; 0
     b8c:	fa 01       	movw	r30, r20
     b8e:	ee 0f       	add	r30, r30
     b90:	ff 1f       	adc	r31, r31
     b92:	ee 0f       	add	r30, r30
     b94:	ff 1f       	adc	r31, r31
     b96:	e4 0f       	add	r30, r20
     b98:	f5 1f       	adc	r31, r21
     b9a:	e8 5b       	subi	r30, 0xB8	; 184
     b9c:	fd 4f       	sbci	r31, 0xFD	; 253
     b9e:	dc 01       	movw	r26, r24
     ba0:	ac 0f       	add	r26, r28
     ba2:	bd 1f       	adc	r27, r29
     ba4:	ae 01       	movw	r20, r28
     ba6:	05 96       	adiw	r24, 0x05	; 5
     ba8:	8c 0f       	add	r24, r28
     baa:	9d 1f       	adc	r25, r29
		uint16_t symbol;
		for(uint8_t i = 0; i < 5; i++){
			symbol = pgm_read_byte(&font5x8[sym][i]);
			symbol = symbol << y%8;
     bac:	27 70       	andi	r18, 0x07	; 7
void Display::draw_ASCI(uint8_t sym,uint8_t x, uint8_t y){
	if(sym!=' ' && sym>=33){
		sym-=33;
		uint16_t symbol;
		for(uint8_t i = 0; i < 5; i++){
			symbol = pgm_read_byte(&font5x8[sym][i]);
     bae:	64 91       	lpm	r22, Z
     bb0:	70 e0       	ldi	r23, 0x00	; 0
			symbol = symbol << y%8;
     bb2:	02 2e       	mov	r0, r18
     bb4:	02 c0       	rjmp	.+4      	; 0xbba <_ZN7Display9draw_ASCIEhhh+0x64>
     bb6:	66 0f       	add	r22, r22
     bb8:	77 1f       	adc	r23, r23
     bba:	0a 94       	dec	r0
     bbc:	e2 f7       	brpl	.-8      	; 0xbb6 <_ZN7Display9draw_ASCIEhhh+0x60>
			Displayframe[x+(y/8)*SSD1306_WIDTH+i] |=(uint8_t) (symbol & 0x00FF);
     bbe:	3c 91       	ld	r19, X
     bc0:	36 2b       	or	r19, r22
     bc2:	3c 93       	st	X, r19
			if(((symbol&0xFF00)>>8)==0){
     bc4:	67 2f       	mov	r22, r23
     bc6:	77 27       	eor	r23, r23
     bc8:	61 15       	cp	r22, r1
     bca:	71 05       	cpc	r23, r1
     bcc:	41 f0       	breq	.+16     	; 0xbde <_ZN7Display9draw_ASCIEhhh+0x88>
     bce:	ed 01       	movw	r28, r26
     bd0:	c4 1b       	sub	r28, r20
     bd2:	d5 0b       	sbc	r29, r21
     bd4:	c0 0f       	add	r28, r16
     bd6:	d1 1f       	adc	r29, r17
				Displayframe[x+(y/8+1)*SSD1306_WIDTH+i] |= 0;
			}
			else {
				Displayframe[x+(y/8+1)*SSD1306_WIDTH+i] |= (uint8_t) ((symbol & 0xFF00)>>8);
     bd8:	38 81       	ld	r19, Y
     bda:	63 2b       	or	r22, r19
     bdc:	68 83       	st	Y, r22
     bde:	31 96       	adiw	r30, 0x01	; 1
     be0:	11 96       	adiw	r26, 0x01	; 1

void Display::draw_ASCI(uint8_t sym,uint8_t x, uint8_t y){
	if(sym!=' ' && sym>=33){
		sym-=33;
		uint16_t symbol;
		for(uint8_t i = 0; i < 5; i++){
     be2:	a8 17       	cp	r26, r24
     be4:	b9 07       	cpc	r27, r25
     be6:	19 f7       	brne	.-58     	; 0xbae <_ZN7Display9draw_ASCIEhhh+0x58>
	else{
		for(uint8_t i = 0; i < 7; i++){
			Displayframe[x+(y/8)*SSD1306_WIDTH+i] |= 0;
		}
	}
}
     be8:	df 91       	pop	r29
     bea:	cf 91       	pop	r28
     bec:	1f 91       	pop	r17
     bee:	0f 91       	pop	r16
     bf0:	08 95       	ret

00000bf2 <_ZN7Display16draw_number16x16Ehhh>:

void Display::draw_number16x16(uint8_t number, uint8_t x, uint8_t y){
     bf2:	ef 92       	push	r14
     bf4:	ff 92       	push	r15
     bf6:	0f 93       	push	r16
     bf8:	1f 93       	push	r17
     bfa:	cf 93       	push	r28
     bfc:	df 93       	push	r29
	uint16_t symbol;
	if(number>=0 && number<10){
     bfe:	6a 30       	cpi	r22, 0x0A	; 10
     c00:	08 f0       	brcs	.+2      	; 0xc04 <_ZN7Display16draw_number16x16Ehhh+0x12>
     c02:	66 c0       	rjmp	.+204    	; 0xcd0 <_ZN7Display16draw_number16x16Ehhh+0xde>
		for(uint8_t i = 0; i < 32;i++){
			symbol = pgm_read_byte(&digits16x16[number][i]);
			symbol = symbol << y%8;
			if(i<16){
				Displayframe[x+(y/8)*SSD1306_WIDTH+i] |=(uint8_t) (symbol & 0x00FF);
     c04:	50 e0       	ldi	r21, 0x00	; 0
     c06:	02 2f       	mov	r16, r18
     c08:	06 95       	lsr	r16
     c0a:	06 95       	lsr	r16
     c0c:	06 95       	lsr	r16
     c0e:	10 e0       	ldi	r17, 0x00	; 0
     c10:	d8 01       	movw	r26, r16
     c12:	b6 95       	lsr	r27
     c14:	ba 2f       	mov	r27, r26
     c16:	aa 27       	eor	r26, r26
     c18:	b7 95       	ror	r27
     c1a:	a7 95       	ror	r26
				if(((symbol&0xFF00)>>8)==0){
					Displayframe[x+(y/8+1)*SSD1306_WIDTH+i] |= 0;
				}
				else {
					Displayframe[x+(y/8+1)*SSD1306_WIDTH+i] |= (uint8_t) ((symbol & 0xFF00)>>8);
     c1c:	0f 5f       	subi	r16, 0xFF	; 255
     c1e:	1f 4f       	sbci	r17, 0xFF	; 255
				}
			}
			else {
				Displayframe[x+(y/8+1)*SSD1306_WIDTH+(i-16)] |= (uint8_t) (symbol & 0x00FF);
     c20:	16 95       	lsr	r17
     c22:	10 2f       	mov	r17, r16
     c24:	00 27       	eor	r16, r16
     c26:	17 95       	ror	r17
     c28:	07 95       	ror	r16
				Displayframe[x+(y/8)*SSD1306_WIDTH+i] |=(uint8_t) (symbol & 0x00FF);
				if(((symbol&0xFF00)>>8)==0){
					Displayframe[x+(y/8+1)*SSD1306_WIDTH+i] |= 0;
				}
				else {
					Displayframe[x+(y/8+1)*SSD1306_WIDTH+i] |= (uint8_t) ((symbol & 0xFF00)>>8);
     c2a:	7d 01       	movw	r14, r26
     c2c:	30 e8       	ldi	r19, 0x80	; 128
     c2e:	e3 0e       	add	r14, r19
     c30:	f1 1c       	adc	r15, r1
     c32:	e4 0e       	add	r14, r20
     c34:	f5 1e       	adc	r15, r21
     c36:	e8 0e       	add	r14, r24
     c38:	f9 1e       	adc	r15, r25
				}
			}
			else {
				Displayframe[x+(y/8+1)*SSD1306_WIDTH+(i-16)] |= (uint8_t) (symbol & 0x00FF);
     c3a:	ea 01       	movw	r28, r20
     c3c:	c0 0f       	add	r28, r16
     c3e:	d1 1f       	adc	r29, r17
     c40:	60 97       	sbiw	r28, 0x10	; 16
     c42:	c8 0f       	add	r28, r24
     c44:	d9 1f       	adc	r29, r25
				if(((symbol&0xFF00)>>8)==0){
					Displayframe[x+(y/8+2)*SSD1306_WIDTH+(i-16)] |= 0;
				}
				else {
					Displayframe[x+(y/8+2)*SSD1306_WIDTH+(i-16)] |= (uint8_t) ((symbol & 0xFF00)>>8);
     c46:	04 0f       	add	r16, r20
     c48:	15 1f       	adc	r17, r21
     c4a:	00 59       	subi	r16, 0x90	; 144
     c4c:	1f 4f       	sbci	r17, 0xFF	; 255
     c4e:	08 0f       	add	r16, r24
     c50:	19 1f       	adc	r17, r25
	if(number>=0 && number<10){
		for(uint8_t i = 0; i < 32;i++){
			symbol = pgm_read_byte(&digits16x16[number][i]);
			symbol = symbol << y%8;
			if(i<16){
				Displayframe[x+(y/8)*SSD1306_WIDTH+i] |=(uint8_t) (symbol & 0x00FF);
     c52:	a4 0f       	add	r26, r20
     c54:	b5 1f       	adc	r27, r21
     c56:	a8 0f       	add	r26, r24
     c58:	b9 1f       	adc	r27, r25
     c5a:	e0 e2       	ldi	r30, 0x20	; 32
     c5c:	6e 9f       	mul	r22, r30
     c5e:	c0 01       	movw	r24, r0
     c60:	11 24       	eor	r1, r1
				Displayframe[x+(y/8+1)*SSD1306_WIDTH+(i-16)] |= (uint8_t) (symbol & 0x00FF);
				if(((symbol&0xFF00)>>8)==0){
					Displayframe[x+(y/8+2)*SSD1306_WIDTH+(i-16)] |= 0;
				}
				else {
					Displayframe[x+(y/8+2)*SSD1306_WIDTH+(i-16)] |= (uint8_t) ((symbol & 0xFF00)>>8);
     c62:	40 e0       	ldi	r20, 0x00	; 0
     c64:	50 e0       	ldi	r21, 0x00	; 0
     c66:	88 5f       	subi	r24, 0xF8	; 248
     c68:	9e 4f       	sbci	r25, 0xFE	; 254
void Display::draw_number16x16(uint8_t number, uint8_t x, uint8_t y){
	uint16_t symbol;
	if(number>=0 && number<10){
		for(uint8_t i = 0; i < 32;i++){
			symbol = pgm_read_byte(&digits16x16[number][i]);
			symbol = symbol << y%8;
     c6a:	27 70       	andi	r18, 0x07	; 7
     c6c:	fc 01       	movw	r30, r24
     c6e:	e4 0f       	add	r30, r20
     c70:	f5 1f       	adc	r31, r21

void Display::draw_number16x16(uint8_t number, uint8_t x, uint8_t y){
	uint16_t symbol;
	if(number>=0 && number<10){
		for(uint8_t i = 0; i < 32;i++){
			symbol = pgm_read_byte(&digits16x16[number][i]);
     c72:	e4 91       	lpm	r30, Z
     c74:	f0 e0       	ldi	r31, 0x00	; 0
			symbol = symbol << y%8;
     c76:	02 2e       	mov	r0, r18
     c78:	02 c0       	rjmp	.+4      	; 0xc7e <_ZN7Display16draw_number16x16Ehhh+0x8c>
     c7a:	ee 0f       	add	r30, r30
     c7c:	ff 1f       	adc	r31, r31
     c7e:	0a 94       	dec	r0
     c80:	e2 f7       	brpl	.-8      	; 0xc7a <_ZN7Display16draw_number16x16Ehhh+0x88>
			if(i<16){
     c82:	40 31       	cpi	r20, 0x10	; 16
     c84:	68 f4       	brcc	.+26     	; 0xca0 <_ZN7Display16draw_number16x16Ehhh+0xae>
				Displayframe[x+(y/8)*SSD1306_WIDTH+i] |=(uint8_t) (symbol & 0x00FF);
     c86:	3c 91       	ld	r19, X
     c88:	3e 2b       	or	r19, r30
     c8a:	3c 93       	st	X, r19
				if(((symbol&0xFF00)>>8)==0){
     c8c:	6f 2f       	mov	r22, r31
     c8e:	77 27       	eor	r23, r23
     c90:	61 15       	cp	r22, r1
     c92:	71 05       	cpc	r23, r1
     c94:	89 f0       	breq	.+34     	; 0xcb8 <_ZN7Display16draw_number16x16Ehhh+0xc6>
					Displayframe[x+(y/8+1)*SSD1306_WIDTH+i] |= 0;
				}
				else {
					Displayframe[x+(y/8+1)*SSD1306_WIDTH+i] |= (uint8_t) ((symbol & 0xFF00)>>8);
     c96:	f7 01       	movw	r30, r14
     c98:	30 81       	ld	r19, Z
     c9a:	36 2b       	or	r19, r22
     c9c:	30 83       	st	Z, r19
     c9e:	0c c0       	rjmp	.+24     	; 0xcb8 <_ZN7Display16draw_number16x16Ehhh+0xc6>
				}
			}
			else {
				Displayframe[x+(y/8+1)*SSD1306_WIDTH+(i-16)] |= (uint8_t) (symbol & 0x00FF);
     ca0:	38 81       	ld	r19, Y
     ca2:	3e 2b       	or	r19, r30
     ca4:	38 83       	st	Y, r19
				if(((symbol&0xFF00)>>8)==0){
     ca6:	6f 2f       	mov	r22, r31
     ca8:	77 27       	eor	r23, r23
     caa:	61 15       	cp	r22, r1
     cac:	71 05       	cpc	r23, r1
     cae:	21 f0       	breq	.+8      	; 0xcb8 <_ZN7Display16draw_number16x16Ehhh+0xc6>
					Displayframe[x+(y/8+2)*SSD1306_WIDTH+(i-16)] |= 0;
				}
				else {
					Displayframe[x+(y/8+2)*SSD1306_WIDTH+(i-16)] |= (uint8_t) ((symbol & 0xFF00)>>8);
     cb0:	f8 01       	movw	r30, r16
     cb2:	30 81       	ld	r19, Z
     cb4:	36 2b       	or	r19, r22
     cb6:	30 83       	st	Z, r19
     cb8:	4f 5f       	subi	r20, 0xFF	; 255
     cba:	5f 4f       	sbci	r21, 0xFF	; 255
     cbc:	ff ef       	ldi	r31, 0xFF	; 255
     cbe:	ef 1a       	sub	r14, r31
     cc0:	ff 0a       	sbc	r15, r31
     cc2:	21 96       	adiw	r28, 0x01	; 1
     cc4:	0f 5f       	subi	r16, 0xFF	; 255
     cc6:	1f 4f       	sbci	r17, 0xFF	; 255
     cc8:	11 96       	adiw	r26, 0x01	; 1
}

void Display::draw_number16x16(uint8_t number, uint8_t x, uint8_t y){
	uint16_t symbol;
	if(number>=0 && number<10){
		for(uint8_t i = 0; i < 32;i++){
     cca:	40 32       	cpi	r20, 0x20	; 32
     ccc:	51 05       	cpc	r21, r1
     cce:	71 f6       	brne	.-100    	; 0xc6c <_ZN7Display16draw_number16x16Ehhh+0x7a>
					Displayframe[x+(y/8+2)*SSD1306_WIDTH+(i-16)] |= (uint8_t) ((symbol & 0xFF00)>>8);
				}
			}
		}
	}
}
     cd0:	df 91       	pop	r29
     cd2:	cf 91       	pop	r28
     cd4:	1f 91       	pop	r17
     cd6:	0f 91       	pop	r16
     cd8:	ff 90       	pop	r15
     cda:	ef 90       	pop	r14
     cdc:	08 95       	ret

00000cde <_ZN7Display6analogEhhh>:

void Display::analog(uint8_t stunde, uint8_t minute, uint8_t sekunde){
     cde:	2f 92       	push	r2
     ce0:	3f 92       	push	r3
     ce2:	4f 92       	push	r4
     ce4:	5f 92       	push	r5
     ce6:	6f 92       	push	r6
     ce8:	7f 92       	push	r7
     cea:	8f 92       	push	r8
     cec:	9f 92       	push	r9
     cee:	af 92       	push	r10
     cf0:	bf 92       	push	r11
     cf2:	cf 92       	push	r12
     cf4:	df 92       	push	r13
     cf6:	ef 92       	push	r14
     cf8:	ff 92       	push	r15
     cfa:	0f 93       	push	r16
     cfc:	1f 93       	push	r17
     cfe:	cf 93       	push	r28
     d00:	df 93       	push	r29
     d02:	cd b7       	in	r28, 0x3d	; 61
     d04:	de b7       	in	r29, 0x3e	; 62
     d06:	27 97       	sbiw	r28, 0x07	; 7
     d08:	0f b6       	in	r0, 0x3f	; 63
     d0a:	f8 94       	cli
     d0c:	de bf       	out	0x3e, r29	; 62
     d0e:	0f be       	out	0x3f, r0	; 63
     d10:	cd bf       	out	0x3d, r28	; 61
     d12:	9f 83       	std	Y+7, r25	; 0x07
     d14:	8e 83       	std	Y+6, r24	; 0x06
     d16:	6d 83       	std	Y+5, r22	; 0x05
     d18:	24 2e       	mov	r2, r20
	uint8_t x=0,y=0;
	float winkel=0;

	//Berechnen des Sekundenzeigers
	for(uint8_t i=0;i<r;i++){
		winkel=(sekunde*6.0)*M_PI/180.0-M_PI/2.0;
     d1a:	62 2f       	mov	r22, r18
     d1c:	70 e0       	ldi	r23, 0x00	; 0
     d1e:	80 e0       	ldi	r24, 0x00	; 0
     d20:	90 e0       	ldi	r25, 0x00	; 0
     d22:	0e 94 1d 21 	call	0x423a	; 0x423a <__floatsisf>
     d26:	20 e0       	ldi	r18, 0x00	; 0
     d28:	30 e0       	ldi	r19, 0x00	; 0
     d2a:	40 ec       	ldi	r20, 0xC0	; 192
     d2c:	50 e4       	ldi	r21, 0x40	; 64
     d2e:	0e 94 36 22 	call	0x446c	; 0x446c <__mulsf3>
     d32:	2b ed       	ldi	r18, 0xDB	; 219
     d34:	3f e0       	ldi	r19, 0x0F	; 15
     d36:	49 e4       	ldi	r20, 0x49	; 73
     d38:	50 e4       	ldi	r21, 0x40	; 64
     d3a:	0e 94 36 22 	call	0x446c	; 0x446c <__mulsf3>
     d3e:	20 e0       	ldi	r18, 0x00	; 0
     d40:	30 e0       	ldi	r19, 0x00	; 0
     d42:	44 e3       	ldi	r20, 0x34	; 52
     d44:	53 e4       	ldi	r21, 0x43	; 67
     d46:	0e 94 82 20 	call	0x4104	; 0x4104 <__divsf3>
     d4a:	2b ed       	ldi	r18, 0xDB	; 219
     d4c:	3f e0       	ldi	r19, 0x0F	; 15
     d4e:	49 ec       	ldi	r20, 0xC9	; 201
     d50:	5f e3       	ldi	r21, 0x3F	; 63
     d52:	0e 94 b4 1f 	call	0x3f68	; 0x3f68 <__subsf3>
     d56:	6b 01       	movw	r12, r22
     d58:	7c 01       	movw	r14, r24
		x=(uint8_t) i*cos(winkel)+Px;
     d5a:	0e 94 7f 20 	call	0x40fe	; 0x40fe <cos>
     d5e:	2b 01       	movw	r4, r22
     d60:	3c 01       	movw	r6, r24
		y=(uint8_t) i*sin(winkel)+Py;
     d62:	c7 01       	movw	r24, r14
     d64:	b6 01       	movw	r22, r12
     d66:	0e 94 99 22 	call	0x4532	; 0x4532 <sin>
     d6a:	4b 01       	movw	r8, r22
     d6c:	5c 01       	movw	r10, r24
     d6e:	00 e0       	ldi	r16, 0x00	; 0
     d70:	10 e0       	ldi	r17, 0x00	; 0
	float winkel=0;

	//Berechnen des Sekundenzeigers
	for(uint8_t i=0;i<r;i++){
		winkel=(sekunde*6.0)*M_PI/180.0-M_PI/2.0;
		x=(uint8_t) i*cos(winkel)+Px;
     d72:	b8 01       	movw	r22, r16
     d74:	88 27       	eor	r24, r24
     d76:	77 fd       	sbrc	r23, 7
     d78:	80 95       	com	r24
     d7a:	98 2f       	mov	r25, r24
     d7c:	0e 94 1d 21 	call	0x423a	; 0x423a <__floatsisf>
     d80:	6b 01       	movw	r12, r22
     d82:	7c 01       	movw	r14, r24
		y=(uint8_t) i*sin(winkel)+Py;
     d84:	a5 01       	movw	r20, r10
     d86:	94 01       	movw	r18, r8
     d88:	0e 94 36 22 	call	0x446c	; 0x446c <__mulsf3>
     d8c:	20 e0       	ldi	r18, 0x00	; 0
     d8e:	30 e0       	ldi	r19, 0x00	; 0
     d90:	48 ef       	ldi	r20, 0xF8	; 248
     d92:	51 e4       	ldi	r21, 0x41	; 65
     d94:	0e 94 b5 1f 	call	0x3f6a	; 0x3f6a <__addsf3>
     d98:	0e 94 ef 20 	call	0x41de	; 0x41de <__fixunssfsi>
     d9c:	36 2e       	mov	r3, r22
	float winkel=0;

	//Berechnen des Sekundenzeigers
	for(uint8_t i=0;i<r;i++){
		winkel=(sekunde*6.0)*M_PI/180.0-M_PI/2.0;
		x=(uint8_t) i*cos(winkel)+Px;
     d9e:	a3 01       	movw	r20, r6
     da0:	92 01       	movw	r18, r4
     da2:	c7 01       	movw	r24, r14
     da4:	b6 01       	movw	r22, r12
     da6:	0e 94 36 22 	call	0x446c	; 0x446c <__mulsf3>
     daa:	20 e0       	ldi	r18, 0x00	; 0
     dac:	30 e0       	ldi	r19, 0x00	; 0
     dae:	48 ef       	ldi	r20, 0xF8	; 248
     db0:	51 e4       	ldi	r21, 0x41	; 65
     db2:	0e 94 b5 1f 	call	0x3f6a	; 0x3f6a <__addsf3>
     db6:	0e 94 ef 20 	call	0x41de	; 0x41de <__fixunssfsi>
		y=(uint8_t) i*sin(winkel)+Py;

		drawPixel(x,y,0);
     dba:	20 e0       	ldi	r18, 0x00	; 0
     dbc:	43 2d       	mov	r20, r3
     dbe:	8e 81       	ldd	r24, Y+6	; 0x06
     dc0:	9f 81       	ldd	r25, Y+7	; 0x07
     dc2:	0e 94 a9 03 	call	0x752	; 0x752 <_ZN7Display9drawPixelEhhh>
     dc6:	0f 5f       	subi	r16, 0xFF	; 255
     dc8:	1f 4f       	sbci	r17, 0xFF	; 255
	uint8_t Py=32-1;
	uint8_t x=0,y=0;
	float winkel=0;

	//Berechnen des Sekundenzeigers
	for(uint8_t i=0;i<r;i++){
     dca:	09 31       	cpi	r16, 0x19	; 25
     dcc:	11 05       	cpc	r17, r1
     dce:	89 f6       	brne	.-94     	; 0xd72 <_ZN7Display6analogEhhh+0x94>
	}

	r=21;
	//Berechnen des Minutenzeigers
	for(uint8_t i=0;i<r;i++){
		winkel=(minute*6.0)*M_PI/180.0-M_PI/2.0;
     dd0:	62 2d       	mov	r22, r2
     dd2:	70 e0       	ldi	r23, 0x00	; 0
     dd4:	80 e0       	ldi	r24, 0x00	; 0
     dd6:	90 e0       	ldi	r25, 0x00	; 0
     dd8:	0e 94 1d 21 	call	0x423a	; 0x423a <__floatsisf>
     ddc:	69 83       	std	Y+1, r22	; 0x01
     dde:	7a 83       	std	Y+2, r23	; 0x02
     de0:	8b 83       	std	Y+3, r24	; 0x03
     de2:	9c 83       	std	Y+4, r25	; 0x04
     de4:	20 e0       	ldi	r18, 0x00	; 0
     de6:	30 e0       	ldi	r19, 0x00	; 0
     de8:	40 ec       	ldi	r20, 0xC0	; 192
     dea:	50 e4       	ldi	r21, 0x40	; 64
     dec:	0e 94 36 22 	call	0x446c	; 0x446c <__mulsf3>
     df0:	2b ed       	ldi	r18, 0xDB	; 219
     df2:	3f e0       	ldi	r19, 0x0F	; 15
     df4:	49 e4       	ldi	r20, 0x49	; 73
     df6:	50 e4       	ldi	r21, 0x40	; 64
     df8:	0e 94 36 22 	call	0x446c	; 0x446c <__mulsf3>
     dfc:	20 e0       	ldi	r18, 0x00	; 0
     dfe:	30 e0       	ldi	r19, 0x00	; 0
     e00:	44 e3       	ldi	r20, 0x34	; 52
     e02:	53 e4       	ldi	r21, 0x43	; 67
     e04:	0e 94 82 20 	call	0x4104	; 0x4104 <__divsf3>
     e08:	2b ed       	ldi	r18, 0xDB	; 219
     e0a:	3f e0       	ldi	r19, 0x0F	; 15
     e0c:	49 ec       	ldi	r20, 0xC9	; 201
     e0e:	5f e3       	ldi	r21, 0x3F	; 63
     e10:	0e 94 b4 1f 	call	0x3f68	; 0x3f68 <__subsf3>
     e14:	6b 01       	movw	r12, r22
     e16:	7c 01       	movw	r14, r24
		x=(uint8_t) i*cos(winkel)+Px;
     e18:	0e 94 7f 20 	call	0x40fe	; 0x40fe <cos>
     e1c:	4b 01       	movw	r8, r22
     e1e:	5c 01       	movw	r10, r24
		y=(uint8_t) i*sin(winkel)+Py;
     e20:	c7 01       	movw	r24, r14
     e22:	b6 01       	movw	r22, r12
     e24:	0e 94 99 22 	call	0x4532	; 0x4532 <sin>
     e28:	2b 01       	movw	r4, r22
     e2a:	3c 01       	movw	r6, r24
     e2c:	00 e0       	ldi	r16, 0x00	; 0
     e2e:	10 e0       	ldi	r17, 0x00	; 0

	r=21;
	//Berechnen des Minutenzeigers
	for(uint8_t i=0;i<r;i++){
		winkel=(minute*6.0)*M_PI/180.0-M_PI/2.0;
		x=(uint8_t) i*cos(winkel)+Px;
     e30:	b8 01       	movw	r22, r16
     e32:	88 27       	eor	r24, r24
     e34:	77 fd       	sbrc	r23, 7
     e36:	80 95       	com	r24
     e38:	98 2f       	mov	r25, r24
     e3a:	0e 94 1d 21 	call	0x423a	; 0x423a <__floatsisf>
     e3e:	6b 01       	movw	r12, r22
     e40:	7c 01       	movw	r14, r24
		y=(uint8_t) i*sin(winkel)+Py;
     e42:	a3 01       	movw	r20, r6
     e44:	92 01       	movw	r18, r4
     e46:	0e 94 36 22 	call	0x446c	; 0x446c <__mulsf3>
     e4a:	20 e0       	ldi	r18, 0x00	; 0
     e4c:	30 e0       	ldi	r19, 0x00	; 0
     e4e:	48 ef       	ldi	r20, 0xF8	; 248
     e50:	51 e4       	ldi	r21, 0x41	; 65
     e52:	0e 94 b5 1f 	call	0x3f6a	; 0x3f6a <__addsf3>
     e56:	0e 94 ef 20 	call	0x41de	; 0x41de <__fixunssfsi>
     e5a:	36 2e       	mov	r3, r22

	r=21;
	//Berechnen des Minutenzeigers
	for(uint8_t i=0;i<r;i++){
		winkel=(minute*6.0)*M_PI/180.0-M_PI/2.0;
		x=(uint8_t) i*cos(winkel)+Px;
     e5c:	a5 01       	movw	r20, r10
     e5e:	94 01       	movw	r18, r8
     e60:	c7 01       	movw	r24, r14
     e62:	b6 01       	movw	r22, r12
     e64:	0e 94 36 22 	call	0x446c	; 0x446c <__mulsf3>
     e68:	20 e0       	ldi	r18, 0x00	; 0
     e6a:	30 e0       	ldi	r19, 0x00	; 0
     e6c:	48 ef       	ldi	r20, 0xF8	; 248
     e6e:	51 e4       	ldi	r21, 0x41	; 65
     e70:	0e 94 b5 1f 	call	0x3f6a	; 0x3f6a <__addsf3>
     e74:	0e 94 ef 20 	call	0x41de	; 0x41de <__fixunssfsi>
		y=(uint8_t) i*sin(winkel)+Py;

		drawPixel(x,y,0);
     e78:	20 e0       	ldi	r18, 0x00	; 0
     e7a:	43 2d       	mov	r20, r3
     e7c:	8e 81       	ldd	r24, Y+6	; 0x06
     e7e:	9f 81       	ldd	r25, Y+7	; 0x07
     e80:	0e 94 a9 03 	call	0x752	; 0x752 <_ZN7Display9drawPixelEhhh>
     e84:	0f 5f       	subi	r16, 0xFF	; 255
     e86:	1f 4f       	sbci	r17, 0xFF	; 255
		drawPixel(x,y,0);
	}

	r=21;
	//Berechnen des Minutenzeigers
	for(uint8_t i=0;i<r;i++){
     e88:	05 31       	cpi	r16, 0x15	; 21
     e8a:	11 05       	cpc	r17, r1
     e8c:	89 f6       	brne	.-94     	; 0xe30 <_ZN7Display6analogEhhh+0x152>
	}

	r=13;
	//Berechnen des Stundenzeigers
	for(uint8_t i=0;i<r;i++){
		winkel=(stunde*30.0+minute/2.0)*M_PI/180.0-M_PI/2.0;
     e8e:	2d 81       	ldd	r18, Y+5	; 0x05
     e90:	62 2f       	mov	r22, r18
     e92:	70 e0       	ldi	r23, 0x00	; 0
     e94:	80 e0       	ldi	r24, 0x00	; 0
     e96:	90 e0       	ldi	r25, 0x00	; 0
     e98:	0e 94 1d 21 	call	0x423a	; 0x423a <__floatsisf>
     e9c:	20 e0       	ldi	r18, 0x00	; 0
     e9e:	30 e0       	ldi	r19, 0x00	; 0
     ea0:	40 ef       	ldi	r20, 0xF0	; 240
     ea2:	51 e4       	ldi	r21, 0x41	; 65
     ea4:	0e 94 36 22 	call	0x446c	; 0x446c <__mulsf3>
     ea8:	6b 01       	movw	r12, r22
     eaa:	7c 01       	movw	r14, r24
     eac:	20 e0       	ldi	r18, 0x00	; 0
     eae:	30 e0       	ldi	r19, 0x00	; 0
     eb0:	40 e0       	ldi	r20, 0x00	; 0
     eb2:	5f e3       	ldi	r21, 0x3F	; 63
     eb4:	69 81       	ldd	r22, Y+1	; 0x01
     eb6:	7a 81       	ldd	r23, Y+2	; 0x02
     eb8:	8b 81       	ldd	r24, Y+3	; 0x03
     eba:	9c 81       	ldd	r25, Y+4	; 0x04
     ebc:	0e 94 36 22 	call	0x446c	; 0x446c <__mulsf3>
     ec0:	9b 01       	movw	r18, r22
     ec2:	ac 01       	movw	r20, r24
     ec4:	c7 01       	movw	r24, r14
     ec6:	b6 01       	movw	r22, r12
     ec8:	0e 94 b5 1f 	call	0x3f6a	; 0x3f6a <__addsf3>
     ecc:	2b ed       	ldi	r18, 0xDB	; 219
     ece:	3f e0       	ldi	r19, 0x0F	; 15
     ed0:	49 e4       	ldi	r20, 0x49	; 73
     ed2:	50 e4       	ldi	r21, 0x40	; 64
     ed4:	0e 94 36 22 	call	0x446c	; 0x446c <__mulsf3>
     ed8:	20 e0       	ldi	r18, 0x00	; 0
     eda:	30 e0       	ldi	r19, 0x00	; 0
     edc:	44 e3       	ldi	r20, 0x34	; 52
     ede:	53 e4       	ldi	r21, 0x43	; 67
     ee0:	0e 94 82 20 	call	0x4104	; 0x4104 <__divsf3>
     ee4:	2b ed       	ldi	r18, 0xDB	; 219
     ee6:	3f e0       	ldi	r19, 0x0F	; 15
     ee8:	49 ec       	ldi	r20, 0xC9	; 201
     eea:	5f e3       	ldi	r21, 0x3F	; 63
     eec:	0e 94 b4 1f 	call	0x3f68	; 0x3f68 <__subsf3>
     ef0:	6b 01       	movw	r12, r22
     ef2:	7c 01       	movw	r14, r24
		x= (uint8_t) i*cos(winkel) +Px;
     ef4:	0e 94 7f 20 	call	0x40fe	; 0x40fe <cos>
     ef8:	2b 01       	movw	r4, r22
     efa:	3c 01       	movw	r6, r24
		y= (uint8_t) i*sin(winkel) +Py;
     efc:	c7 01       	movw	r24, r14
     efe:	b6 01       	movw	r22, r12
     f00:	0e 94 99 22 	call	0x4532	; 0x4532 <sin>
     f04:	4b 01       	movw	r8, r22
     f06:	5c 01       	movw	r10, r24
     f08:	00 e0       	ldi	r16, 0x00	; 0
     f0a:	10 e0       	ldi	r17, 0x00	; 0

	r=13;
	//Berechnen des Stundenzeigers
	for(uint8_t i=0;i<r;i++){
		winkel=(stunde*30.0+minute/2.0)*M_PI/180.0-M_PI/2.0;
		x= (uint8_t) i*cos(winkel) +Px;
     f0c:	b8 01       	movw	r22, r16
     f0e:	88 27       	eor	r24, r24
     f10:	77 fd       	sbrc	r23, 7
     f12:	80 95       	com	r24
     f14:	98 2f       	mov	r25, r24
     f16:	0e 94 1d 21 	call	0x423a	; 0x423a <__floatsisf>
     f1a:	6b 01       	movw	r12, r22
     f1c:	7c 01       	movw	r14, r24
		y= (uint8_t) i*sin(winkel) +Py;
     f1e:	a5 01       	movw	r20, r10
     f20:	94 01       	movw	r18, r8
     f22:	0e 94 36 22 	call	0x446c	; 0x446c <__mulsf3>
     f26:	20 e0       	ldi	r18, 0x00	; 0
     f28:	30 e0       	ldi	r19, 0x00	; 0
     f2a:	48 ef       	ldi	r20, 0xF8	; 248
     f2c:	51 e4       	ldi	r21, 0x41	; 65
     f2e:	0e 94 b5 1f 	call	0x3f6a	; 0x3f6a <__addsf3>
     f32:	0e 94 ef 20 	call	0x41de	; 0x41de <__fixunssfsi>
     f36:	36 2e       	mov	r3, r22

	r=13;
	//Berechnen des Stundenzeigers
	for(uint8_t i=0;i<r;i++){
		winkel=(stunde*30.0+minute/2.0)*M_PI/180.0-M_PI/2.0;
		x= (uint8_t) i*cos(winkel) +Px;
     f38:	a3 01       	movw	r20, r6
     f3a:	92 01       	movw	r18, r4
     f3c:	c7 01       	movw	r24, r14
     f3e:	b6 01       	movw	r22, r12
     f40:	0e 94 36 22 	call	0x446c	; 0x446c <__mulsf3>
     f44:	20 e0       	ldi	r18, 0x00	; 0
     f46:	30 e0       	ldi	r19, 0x00	; 0
     f48:	48 ef       	ldi	r20, 0xF8	; 248
     f4a:	51 e4       	ldi	r21, 0x41	; 65
     f4c:	0e 94 b5 1f 	call	0x3f6a	; 0x3f6a <__addsf3>
     f50:	0e 94 ef 20 	call	0x41de	; 0x41de <__fixunssfsi>
		y= (uint8_t) i*sin(winkel) +Py;

		drawPixel(x,y,0);
     f54:	20 e0       	ldi	r18, 0x00	; 0
     f56:	43 2d       	mov	r20, r3
     f58:	8e 81       	ldd	r24, Y+6	; 0x06
     f5a:	9f 81       	ldd	r25, Y+7	; 0x07
     f5c:	0e 94 a9 03 	call	0x752	; 0x752 <_ZN7Display9drawPixelEhhh>
     f60:	0f 5f       	subi	r16, 0xFF	; 255
     f62:	1f 4f       	sbci	r17, 0xFF	; 255
		drawPixel(x,y,0);
	}

	r=13;
	//Berechnen des Stundenzeigers
	for(uint8_t i=0;i<r;i++){
     f64:	0d 30       	cpi	r16, 0x0D	; 13
     f66:	11 05       	cpc	r17, r1
     f68:	89 f6       	brne	.-94     	; 0xf0c <_ZN7Display6analogEhhh+0x22e>

		drawPixel(x,y,0);
	}

	//Anzeige der Zahlen
	draw_ASCI('1',32-charsize,0);
     f6a:	20 e0       	ldi	r18, 0x00	; 0
     f6c:	4a e1       	ldi	r20, 0x1A	; 26
     f6e:	61 e3       	ldi	r22, 0x31	; 49
     f70:	8e 81       	ldd	r24, Y+6	; 0x06
     f72:	9f 81       	ldd	r25, Y+7	; 0x07
     f74:	0e 94 ab 05 	call	0xb56	; 0xb56 <_ZN7Display9draw_ASCIEhhh>
	draw_ASCI('2',32,0);
     f78:	20 e0       	ldi	r18, 0x00	; 0
     f7a:	40 e2       	ldi	r20, 0x20	; 32
     f7c:	62 e3       	ldi	r22, 0x32	; 50
     f7e:	8e 81       	ldd	r24, Y+6	; 0x06
     f80:	9f 81       	ldd	r25, Y+7	; 0x07
     f82:	0e 94 ab 05 	call	0xb56	; 0xb56 <_ZN7Display9draw_ASCIEhhh>
	draw_ASCI('3',64-charsize,4*charhighte-charhighte/2);
     f86:	2c e1       	ldi	r18, 0x1C	; 28
     f88:	4a e3       	ldi	r20, 0x3A	; 58
     f8a:	63 e3       	ldi	r22, 0x33	; 51
     f8c:	8e 81       	ldd	r24, Y+6	; 0x06
     f8e:	9f 81       	ldd	r25, Y+7	; 0x07
     f90:	0e 94 ab 05 	call	0xb56	; 0xb56 <_ZN7Display9draw_ASCIEhhh>
	draw_ASCI('6',32-charsize/2,7*charhighte);
     f94:	28 e3       	ldi	r18, 0x38	; 56
     f96:	4d e1       	ldi	r20, 0x1D	; 29
     f98:	66 e3       	ldi	r22, 0x36	; 54
     f9a:	8e 81       	ldd	r24, Y+6	; 0x06
     f9c:	9f 81       	ldd	r25, Y+7	; 0x07
     f9e:	0e 94 ab 05 	call	0xb56	; 0xb56 <_ZN7Display9draw_ASCIEhhh>
	draw_ASCI('9',0,4*charhighte-charhighte/2);
     fa2:	2c e1       	ldi	r18, 0x1C	; 28
     fa4:	40 e0       	ldi	r20, 0x00	; 0
     fa6:	69 e3       	ldi	r22, 0x39	; 57
     fa8:	8e 81       	ldd	r24, Y+6	; 0x06
     faa:	9f 81       	ldd	r25, Y+7	; 0x07
     fac:	0e 94 ab 05 	call	0xb56	; 0xb56 <_ZN7Display9draw_ASCIEhhh>

	//anzeige des Rings fuer die Restlichen Stunden Zahlen
	//1
	drawPixel(26*cos((30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
     fb0:	20 e0       	ldi	r18, 0x00	; 0
     fb2:	48 e0       	ldi	r20, 0x08	; 8
     fb4:	6c e2       	ldi	r22, 0x2C	; 44
     fb6:	8e 81       	ldd	r24, Y+6	; 0x06
     fb8:	9f 81       	ldd	r25, Y+7	; 0x07
     fba:	0e 94 a9 03 	call	0x752	; 0x752 <_ZN7Display9drawPixelEhhh>
	//2
	drawPixel(26*cos((2*30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((2*30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
     fbe:	20 e0       	ldi	r18, 0x00	; 0
     fc0:	42 e1       	ldi	r20, 0x12	; 18
     fc2:	65 e3       	ldi	r22, 0x35	; 53
     fc4:	8e 81       	ldd	r24, Y+6	; 0x06
     fc6:	9f 81       	ldd	r25, Y+7	; 0x07
     fc8:	0e 94 a9 03 	call	0x752	; 0x752 <_ZN7Display9drawPixelEhhh>
	//4
	drawPixel(26*cos((4*30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((4*30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
     fcc:	20 e0       	ldi	r18, 0x00	; 0
     fce:	4c e2       	ldi	r20, 0x2C	; 44
     fd0:	65 e3       	ldi	r22, 0x35	; 53
     fd2:	8e 81       	ldd	r24, Y+6	; 0x06
     fd4:	9f 81       	ldd	r25, Y+7	; 0x07
     fd6:	0e 94 a9 03 	call	0x752	; 0x752 <_ZN7Display9drawPixelEhhh>
	//5
	drawPixel(26*cos((5*30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((5*30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
     fda:	20 e0       	ldi	r18, 0x00	; 0
     fdc:	45 e3       	ldi	r20, 0x35	; 53
     fde:	6b e2       	ldi	r22, 0x2B	; 43
     fe0:	8e 81       	ldd	r24, Y+6	; 0x06
     fe2:	9f 81       	ldd	r25, Y+7	; 0x07
     fe4:	0e 94 a9 03 	call	0x752	; 0x752 <_ZN7Display9drawPixelEhhh>
	//7
	drawPixel(26*cos((7*30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((7*30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
     fe8:	20 e0       	ldi	r18, 0x00	; 0
     fea:	45 e3       	ldi	r20, 0x35	; 53
     fec:	61 e1       	ldi	r22, 0x11	; 17
     fee:	8e 81       	ldd	r24, Y+6	; 0x06
     ff0:	9f 81       	ldd	r25, Y+7	; 0x07
     ff2:	0e 94 a9 03 	call	0x752	; 0x752 <_ZN7Display9drawPixelEhhh>
	//8
	drawPixel(26*cos((8*30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((8*30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
     ff6:	20 e0       	ldi	r18, 0x00	; 0
     ff8:	4c e2       	ldi	r20, 0x2C	; 44
     ffa:	68 e0       	ldi	r22, 0x08	; 8
     ffc:	8e 81       	ldd	r24, Y+6	; 0x06
     ffe:	9f 81       	ldd	r25, Y+7	; 0x07
    1000:	0e 94 a9 03 	call	0x752	; 0x752 <_ZN7Display9drawPixelEhhh>
	//10
	drawPixel(26*cos((10*30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((10*30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
    1004:	20 e0       	ldi	r18, 0x00	; 0
    1006:	41 e1       	ldi	r20, 0x11	; 17
    1008:	68 e0       	ldi	r22, 0x08	; 8
    100a:	8e 81       	ldd	r24, Y+6	; 0x06
    100c:	9f 81       	ldd	r25, Y+7	; 0x07
    100e:	0e 94 a9 03 	call	0x752	; 0x752 <_ZN7Display9drawPixelEhhh>
	//11
	drawPixel(26*cos((11*30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((11*30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
    1012:	20 e0       	ldi	r18, 0x00	; 0
    1014:	48 e0       	ldi	r20, 0x08	; 8
    1016:	62 e1       	ldi	r22, 0x12	; 18
    1018:	8e 81       	ldd	r24, Y+6	; 0x06
    101a:	9f 81       	ldd	r25, Y+7	; 0x07
    101c:	0e 94 a9 03 	call	0x752	; 0x752 <_ZN7Display9drawPixelEhhh>
}
    1020:	27 96       	adiw	r28, 0x07	; 7
    1022:	0f b6       	in	r0, 0x3f	; 63
    1024:	f8 94       	cli
    1026:	de bf       	out	0x3e, r29	; 62
    1028:	0f be       	out	0x3f, r0	; 63
    102a:	cd bf       	out	0x3d, r28	; 61
    102c:	df 91       	pop	r29
    102e:	cf 91       	pop	r28
    1030:	1f 91       	pop	r17
    1032:	0f 91       	pop	r16
    1034:	ff 90       	pop	r15
    1036:	ef 90       	pop	r14
    1038:	df 90       	pop	r13
    103a:	cf 90       	pop	r12
    103c:	bf 90       	pop	r11
    103e:	af 90       	pop	r10
    1040:	9f 90       	pop	r9
    1042:	8f 90       	pop	r8
    1044:	7f 90       	pop	r7
    1046:	6f 90       	pop	r6
    1048:	5f 90       	pop	r5
    104a:	4f 90       	pop	r4
    104c:	3f 90       	pop	r3
    104e:	2f 90       	pop	r2
    1050:	08 95       	ret

00001052 <_Z8ADC_Readh>:
#ifndef ADC_H_
#define ADC_H_

uint16_t ADC_Read( uint8_t channel )
{
	ADMUX = (ADMUX & ~(0x1F)) | (channel & 0x1F);
    1052:	ec e7       	ldi	r30, 0x7C	; 124
    1054:	f0 e0       	ldi	r31, 0x00	; 0
    1056:	90 81       	ld	r25, Z
    1058:	8f 71       	andi	r24, 0x1F	; 31
    105a:	90 7e       	andi	r25, 0xE0	; 224
    105c:	98 2b       	or	r25, r24
    105e:	90 83       	st	Z, r25
	ADCSRA |= (1<<ADSC);
    1060:	ea e7       	ldi	r30, 0x7A	; 122
    1062:	f0 e0       	ldi	r31, 0x00	; 0
    1064:	80 81       	ld	r24, Z
    1066:	80 64       	ori	r24, 0x40	; 64
    1068:	80 83       	st	Z, r24
	while (ADCSRA & (1<<ADSC) ) {
    106a:	80 81       	ld	r24, Z
    106c:	86 fd       	sbrc	r24, 6
    106e:	fd cf       	rjmp	.-6      	; 0x106a <_Z8ADC_Readh+0x18>
	}
	return ADCW;
    1070:	80 91 78 00 	lds	r24, 0x0078
    1074:	90 91 79 00 	lds	r25, 0x0079
}
    1078:	08 95       	ret

0000107a <_Z14Batteriestatusv>:
	return (uint16_t)( sum / nsamples );
}

double batterie;
int8_t Batteriestatus(){
	uint16_t ADCwert=ADC_Read(0);
    107a:	80 e0       	ldi	r24, 0x00	; 0
    107c:	0e 94 29 08 	call	0x1052	; 0x1052 <_Z8ADC_Readh>
	batterie = (ADCwert/1023.0)*3.2*SPANNUNGSTEILER;
    1080:	bc 01       	movw	r22, r24
    1082:	80 e0       	ldi	r24, 0x00	; 0
    1084:	90 e0       	ldi	r25, 0x00	; 0
    1086:	0e 94 1b 21 	call	0x4236	; 0x4236 <__floatunsisf>
    108a:	20 e0       	ldi	r18, 0x00	; 0
    108c:	30 ec       	ldi	r19, 0xC0	; 192
    108e:	4f e7       	ldi	r20, 0x7F	; 127
    1090:	54 e4       	ldi	r21, 0x44	; 68
    1092:	0e 94 82 20 	call	0x4104	; 0x4104 <__divsf3>
    1096:	2d ec       	ldi	r18, 0xCD	; 205
    1098:	3c ec       	ldi	r19, 0xCC	; 204
    109a:	4c e4       	ldi	r20, 0x4C	; 76
    109c:	50 e4       	ldi	r21, 0x40	; 64
    109e:	0e 94 36 22 	call	0x446c	; 0x446c <__mulsf3>
    10a2:	2b e7       	ldi	r18, 0x7B	; 123
    10a4:	34 e1       	ldi	r19, 0x14	; 20
    10a6:	4e ef       	ldi	r20, 0xFE	; 254
    10a8:	5f e3       	ldi	r21, 0x3F	; 63
    10aa:	0e 94 36 22 	call	0x446c	; 0x446c <__mulsf3>
    10ae:	60 93 cb 02 	sts	0x02CB, r22
    10b2:	70 93 cc 02 	sts	0x02CC, r23
    10b6:	80 93 cd 02 	sts	0x02CD, r24
    10ba:	90 93 ce 02 	sts	0x02CE, r25
	return ((batterie-3.0)/(4.2-3.0)*100);
    10be:	20 e0       	ldi	r18, 0x00	; 0
    10c0:	30 e0       	ldi	r19, 0x00	; 0
    10c2:	40 e4       	ldi	r20, 0x40	; 64
    10c4:	50 e4       	ldi	r21, 0x40	; 64
    10c6:	0e 94 b4 1f 	call	0x3f68	; 0x3f68 <__subsf3>
    10ca:	28 e9       	ldi	r18, 0x98	; 152
    10cc:	39 e9       	ldi	r19, 0x99	; 153
    10ce:	49 e9       	ldi	r20, 0x99	; 153
    10d0:	5f e3       	ldi	r21, 0x3F	; 63
    10d2:	0e 94 82 20 	call	0x4104	; 0x4104 <__divsf3>
    10d6:	20 e0       	ldi	r18, 0x00	; 0
    10d8:	30 e0       	ldi	r19, 0x00	; 0
    10da:	48 ec       	ldi	r20, 0xC8	; 200
    10dc:	52 e4       	ldi	r21, 0x42	; 66
    10de:	0e 94 36 22 	call	0x446c	; 0x446c <__mulsf3>
    10e2:	0e 94 ea 20 	call	0x41d4	; 0x41d4 <__fixsfsi>
    10e6:	86 2f       	mov	r24, r22
}
    10e8:	08 95       	ret

000010ea <_Z14willkommenpagev>:
#ifndef SEITEN_H_
#define SEITEN_H_

//Diese Funktionen schreiben nur in den Framebuffer und das Schreiben passiert in der Main ueber einen Interupt

void willkommenpage(){
    10ea:	cf 92       	push	r12
    10ec:	df 92       	push	r13
    10ee:	ef 92       	push	r14
    10f0:	ff 92       	push	r15
    10f2:	0f 93       	push	r16
    10f4:	1f 93       	push	r17
    10f6:	cf 93       	push	r28
    10f8:	df 93       	push	r29
    10fa:	cd b7       	in	r28, 0x3d	; 61
    10fc:	de b7       	in	r29, 0x3e	; 62
    10fe:	64 97       	sbiw	r28, 0x14	; 20
    1100:	0f b6       	in	r0, 0x3f	; 63
    1102:	f8 94       	cli
    1104:	de bf       	out	0x3e, r29	; 62
    1106:	0f be       	out	0x3f, r0	; 63
    1108:	cd bf       	out	0x3d, r28	; 61
	char buffer[20];
	uint8_t buffersize;
	oled.clearFrame();
    110a:	8e ed       	ldi	r24, 0xDE	; 222
    110c:	92 e0       	ldi	r25, 0x02	; 2
    110e:	0e 94 c0 02 	call	0x580	; 0x580 <_ZN7Display10clearFrameEv>
	buffersize=sprintf(buffer,"Fahradcomputer");
    1112:	8f e0       	ldi	r24, 0x0F	; 15
    1114:	e0 e0       	ldi	r30, 0x00	; 0
    1116:	f1 e0       	ldi	r31, 0x01	; 1
    1118:	8e 01       	movw	r16, r28
    111a:	0f 5f       	subi	r16, 0xFF	; 255
    111c:	1f 4f       	sbci	r17, 0xFF	; 255
    111e:	d8 01       	movw	r26, r16
    1120:	01 90       	ld	r0, Z+
    1122:	0d 92       	st	X+, r0
    1124:	8a 95       	dec	r24
    1126:	e1 f7       	brne	.-8      	; 0x1120 <_Z14willkommenpagev+0x36>
    1128:	c0 2e       	mov	r12, r16
    112a:	d1 2e       	mov	r13, r17
    112c:	78 01       	movw	r14, r16
    112e:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0; i < buffersize;i++){
		oled.draw_ASCI(buffer[i],i*charsize,0);
    1130:	f7 01       	movw	r30, r14
    1132:	61 91       	ld	r22, Z+
    1134:	7f 01       	movw	r14, r30
    1136:	20 e0       	ldi	r18, 0x00	; 0
    1138:	41 2f       	mov	r20, r17
    113a:	8e ed       	ldi	r24, 0xDE	; 222
    113c:	92 e0       	ldi	r25, 0x02	; 2
    113e:	0e 94 ab 05 	call	0xb56	; 0xb56 <_ZN7Display9draw_ASCIEhhh>
    1142:	1a 5f       	subi	r17, 0xFA	; 250
void willkommenpage(){
	char buffer[20];
	uint8_t buffersize;
	oled.clearFrame();
	buffersize=sprintf(buffer,"Fahradcomputer");
	for(uint8_t i=0; i < buffersize;i++){
    1144:	14 35       	cpi	r17, 0x54	; 84
    1146:	a1 f7       	brne	.-24     	; 0x1130 <_Z14willkommenpagev+0x46>
		oled.draw_ASCI(buffer[i],i*charsize,0);
	}
	buffersize=sprintf(buffer,"--------------");
    1148:	8f e0       	ldi	r24, 0x0F	; 15
    114a:	ef e0       	ldi	r30, 0x0F	; 15
    114c:	f1 e0       	ldi	r31, 0x01	; 1
    114e:	de 01       	movw	r26, r28
    1150:	11 96       	adiw	r26, 0x01	; 1
    1152:	01 90       	ld	r0, Z+
    1154:	0d 92       	st	X+, r0
    1156:	8a 95       	dec	r24
    1158:	e1 f7       	brne	.-8      	; 0x1152 <_Z14willkommenpagev+0x68>
    115a:	ec 2c       	mov	r14, r12
    115c:	fd 2c       	mov	r15, r13
    115e:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0; i < buffersize;i++){
		oled.draw_ASCI(buffer[i],i*charsize,8);
    1160:	f7 01       	movw	r30, r14
    1162:	61 91       	ld	r22, Z+
    1164:	7f 01       	movw	r14, r30
    1166:	28 e0       	ldi	r18, 0x08	; 8
    1168:	41 2f       	mov	r20, r17
    116a:	8e ed       	ldi	r24, 0xDE	; 222
    116c:	92 e0       	ldi	r25, 0x02	; 2
    116e:	0e 94 ab 05 	call	0xb56	; 0xb56 <_ZN7Display9draw_ASCIEhhh>
    1172:	1a 5f       	subi	r17, 0xFA	; 250
	buffersize=sprintf(buffer,"Fahradcomputer");
	for(uint8_t i=0; i < buffersize;i++){
		oled.draw_ASCI(buffer[i],i*charsize,0);
	}
	buffersize=sprintf(buffer,"--------------");
	for(uint8_t i=0; i < buffersize;i++){
    1174:	14 35       	cpi	r17, 0x54	; 84
    1176:	a1 f7       	brne	.-24     	; 0x1160 <_Z14willkommenpagev+0x76>
		oled.draw_ASCI(buffer[i],i*charsize,8);
	}
	buffersize=sprintf(buffer,"Version: %.2f",VERSIONSNUMMER);
    1178:	8f e3       	ldi	r24, 0x3F	; 63
    117a:	8f 93       	push	r24
    117c:	86 ea       	ldi	r24, 0xA6	; 166
    117e:	8f 93       	push	r24
    1180:	86 e6       	ldi	r24, 0x66	; 102
    1182:	8f 93       	push	r24
    1184:	8f 93       	push	r24
    1186:	8e e1       	ldi	r24, 0x1E	; 30
    1188:	91 e0       	ldi	r25, 0x01	; 1
    118a:	9f 93       	push	r25
    118c:	8f 93       	push	r24
    118e:	ce 01       	movw	r24, r28
    1190:	01 96       	adiw	r24, 0x01	; 1
    1192:	9f 93       	push	r25
    1194:	8f 93       	push	r24
    1196:	0e 94 b9 27 	call	0x4f72	; 0x4f72 <sprintf>
	for(uint8_t i=0; i < buffersize;i++){
    119a:	0f b6       	in	r0, 0x3f	; 63
    119c:	f8 94       	cli
    119e:	de bf       	out	0x3e, r29	; 62
    11a0:	0f be       	out	0x3f, r0	; 63
    11a2:	cd bf       	out	0x3d, r28	; 61
    11a4:	88 23       	and	r24, r24
    11a6:	d1 f0       	breq	.+52     	; 0x11dc <_Z14willkommenpagev+0xf2>
    11a8:	81 50       	subi	r24, 0x01	; 1
    11aa:	68 94       	set
    11ac:	ee 24       	eor	r14, r14
    11ae:	e1 f8       	bld	r14, 1
    11b0:	f1 2c       	mov	r15, r1
    11b2:	ec 0e       	add	r14, r28
    11b4:	fd 1e       	adc	r15, r29
    11b6:	e8 0e       	add	r14, r24
    11b8:	f1 1c       	adc	r15, r1
    11ba:	0c 2d       	mov	r16, r12
    11bc:	1d 2d       	mov	r17, r13
    11be:	d1 2c       	mov	r13, r1
		oled.draw_ASCI(buffer[i],i*charsize,32);
    11c0:	f8 01       	movw	r30, r16
    11c2:	61 91       	ld	r22, Z+
    11c4:	8f 01       	movw	r16, r30
    11c6:	20 e2       	ldi	r18, 0x20	; 32
    11c8:	4d 2d       	mov	r20, r13
    11ca:	8e ed       	ldi	r24, 0xDE	; 222
    11cc:	92 e0       	ldi	r25, 0x02	; 2
    11ce:	0e 94 ab 05 	call	0xb56	; 0xb56 <_ZN7Display9draw_ASCIEhhh>
    11d2:	f6 e0       	ldi	r31, 0x06	; 6
    11d4:	df 0e       	add	r13, r31
	buffersize=sprintf(buffer,"--------------");
	for(uint8_t i=0; i < buffersize;i++){
		oled.draw_ASCI(buffer[i],i*charsize,8);
	}
	buffersize=sprintf(buffer,"Version: %.2f",VERSIONSNUMMER);
	for(uint8_t i=0; i < buffersize;i++){
    11d6:	0e 15       	cp	r16, r14
    11d8:	1f 05       	cpc	r17, r15
    11da:	91 f7       	brne	.-28     	; 0x11c0 <_Z14willkommenpagev+0xd6>
		oled.draw_ASCI(buffer[i],i*charsize,32);

	}
	oled.sendFrame();
    11dc:	8e ed       	ldi	r24, 0xDE	; 222
    11de:	92 e0       	ldi	r25, 0x02	; 2
    11e0:	0e 94 66 03 	call	0x6cc	; 0x6cc <_ZN7Display9sendFrameEv>
	oled.clearFrame();
    11e4:	8e ed       	ldi	r24, 0xDE	; 222
    11e6:	92 e0       	ldi	r25, 0x02	; 2
    11e8:	0e 94 c0 02 	call	0x580	; 0x580 <_ZN7Display10clearFrameEv>
    11ec:	85 e0       	ldi	r24, 0x05	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    11ee:	2f e7       	ldi	r18, 0x7F	; 127
    11f0:	38 e3       	ldi	r19, 0x38	; 56
    11f2:	91 e0       	ldi	r25, 0x01	; 1
    11f4:	21 50       	subi	r18, 0x01	; 1
    11f6:	30 40       	sbci	r19, 0x00	; 0
    11f8:	90 40       	sbci	r25, 0x00	; 0
    11fa:	e1 f7       	brne	.-8      	; 0x11f4 <_Z14willkommenpagev+0x10a>
    11fc:	00 c0       	rjmp	.+0      	; 0x11fe <_Z14willkommenpagev+0x114>
    11fe:	00 00       	nop
    1200:	ef e7       	ldi	r30, 0x7F	; 127
    1202:	f8 e3       	ldi	r31, 0x38	; 56
    1204:	21 e0       	ldi	r18, 0x01	; 1
    1206:	e1 50       	subi	r30, 0x01	; 1
    1208:	f0 40       	sbci	r31, 0x00	; 0
    120a:	20 40       	sbci	r18, 0x00	; 0
    120c:	e1 f7       	brne	.-8      	; 0x1206 <_Z14willkommenpagev+0x11c>
    120e:	00 c0       	rjmp	.+0      	; 0x1210 <_Z14willkommenpagev+0x126>
    1210:	00 00       	nop
    1212:	81 50       	subi	r24, 0x01	; 1
	for (uint8_t i=0;i<5;i++)
    1214:	61 f7       	brne	.-40     	; 0x11ee <_Z14willkommenpagev+0x104>
	{
		_delay_ms(50);
		_delay_ms(50);
	}
}
    1216:	64 96       	adiw	r28, 0x14	; 20
    1218:	0f b6       	in	r0, 0x3f	; 63
    121a:	f8 94       	cli
    121c:	de bf       	out	0x3e, r29	; 62
    121e:	0f be       	out	0x3f, r0	; 63
    1220:	cd bf       	out	0x3d, r28	; 61
    1222:	df 91       	pop	r29
    1224:	cf 91       	pop	r28
    1226:	1f 91       	pop	r17
    1228:	0f 91       	pop	r16
    122a:	ff 90       	pop	r15
    122c:	ef 90       	pop	r14
    122e:	df 90       	pop	r13
    1230:	cf 90       	pop	r12
    1232:	08 95       	ret

00001234 <_Z6headerh>:

void header(uint8_t page){
    1234:	ef 92       	push	r14
    1236:	ff 92       	push	r15
    1238:	0f 93       	push	r16
    123a:	1f 93       	push	r17
    123c:	cf 93       	push	r28
    123e:	df 93       	push	r29
    1240:	cd b7       	in	r28, 0x3d	; 61
    1242:	de b7       	in	r29, 0x3e	; 62
    1244:	64 97       	sbiw	r28, 0x14	; 20
    1246:	0f b6       	in	r0, 0x3f	; 63
    1248:	f8 94       	cli
    124a:	de bf       	out	0x3e, r29	; 62
    124c:	0f be       	out	0x3f, r0	; 63
    124e:	cd bf       	out	0x3d, r28	; 61
	char buffer[20];
	uint8_t buffersize=0;;
	switch (page) {
    1250:	81 11       	cpse	r24, r1
    1252:	4d c0       	rjmp	.+154    	; 0x12ee <_Z6headerh+0xba>
    1254:	0f 2e       	mov	r0, r31
    1256:	ff e0       	ldi	r31, 0x0F	; 15
    1258:	ef 2e       	mov	r14, r31
    125a:	f7 e0       	ldi	r31, 0x07	; 7
    125c:	ff 2e       	mov	r15, r31
    125e:	f0 2d       	mov	r31, r0
    1260:	10 e0       	ldi	r17, 0x00	; 0
		case 0:	//standard Header fuer fast alle Pages
			for(uint8_t i=0;i<8;i++){
				oled.draw_ASCI(rtc.msg_uhr[i],i*charsize,0);
    1262:	f7 01       	movw	r30, r14
    1264:	61 91       	ld	r22, Z+
    1266:	7f 01       	movw	r14, r30
    1268:	20 e0       	ldi	r18, 0x00	; 0
    126a:	41 2f       	mov	r20, r17
    126c:	8e ed       	ldi	r24, 0xDE	; 222
    126e:	92 e0       	ldi	r25, 0x02	; 2
    1270:	0e 94 ab 05 	call	0xb56	; 0xb56 <_ZN7Display9draw_ASCIEhhh>
    1274:	1a 5f       	subi	r17, 0xFA	; 250
void header(uint8_t page){
	char buffer[20];
	uint8_t buffersize=0;;
	switch (page) {
		case 0:	//standard Header fuer fast alle Pages
			for(uint8_t i=0;i<8;i++){
    1276:	10 33       	cpi	r17, 0x30	; 48
    1278:	a1 f7       	brne	.-24     	; 0x1262 <_Z6headerh+0x2e>
				oled.draw_ASCI(rtc.msg_uhr[i],i*charsize,0);
			}
			buffersize=sprintf(buffer,"Bat: %i%%",Batteriestatus());
    127a:	0e 94 3d 08 	call	0x107a	; 0x107a <_Z14Batteriestatusv>
    127e:	28 2f       	mov	r18, r24
    1280:	33 27       	eor	r19, r19
    1282:	27 fd       	sbrc	r18, 7
    1284:	30 95       	com	r19
    1286:	3f 93       	push	r19
    1288:	8f 93       	push	r24
    128a:	8c e2       	ldi	r24, 0x2C	; 44
    128c:	91 e0       	ldi	r25, 0x01	; 1
    128e:	9f 93       	push	r25
    1290:	8f 93       	push	r24
    1292:	ce 01       	movw	r24, r28
    1294:	01 96       	adiw	r24, 0x01	; 1
    1296:	9f 93       	push	r25
    1298:	8f 93       	push	r24
    129a:	0e 94 b9 27 	call	0x4f72	; 0x4f72 <sprintf>
			for(uint8_t i=((SSD1306_WIDTH/charsize)-buffersize);i<(SSD1306_WIDTH/charsize);i++){
    129e:	25 e1       	ldi	r18, 0x15	; 21
    12a0:	f2 2e       	mov	r15, r18
    12a2:	f8 1a       	sub	r15, r24
    12a4:	0f 90       	pop	r0
    12a6:	0f 90       	pop	r0
    12a8:	0f 90       	pop	r0
    12aa:	0f 90       	pop	r0
    12ac:	0f 90       	pop	r0
    12ae:	0f 90       	pop	r0
    12b0:	f4 e1       	ldi	r31, 0x14	; 20
    12b2:	ff 15       	cp	r31, r15
    12b4:	e0 f0       	brcs	.+56     	; 0x12ee <_Z6headerh+0xba>
    12b6:	ef 2c       	mov	r14, r15
    12b8:	ee 0c       	add	r14, r14
    12ba:	ef 0c       	add	r14, r15
    12bc:	ee 0c       	add	r14, r14
				oled.draw_ASCI(buffer[i-((SSD1306_WIDTH/charsize)-buffersize)],i*charsize,0);
    12be:	8c 01       	movw	r16, r24
    12c0:	11 27       	eor	r17, r17
    12c2:	e1 e0       	ldi	r30, 0x01	; 1
    12c4:	f0 e0       	ldi	r31, 0x00	; 0
    12c6:	ec 0f       	add	r30, r28
    12c8:	fd 1f       	adc	r31, r29
    12ca:	ef 0d       	add	r30, r15
    12cc:	f1 1d       	adc	r31, r1
    12ce:	e0 0f       	add	r30, r16
    12d0:	f1 1f       	adc	r31, r17
    12d2:	75 97       	sbiw	r30, 0x15	; 21
    12d4:	20 e0       	ldi	r18, 0x00	; 0
    12d6:	4e 2d       	mov	r20, r14
    12d8:	60 81       	ld	r22, Z
    12da:	8e ed       	ldi	r24, 0xDE	; 222
    12dc:	92 e0       	ldi	r25, 0x02	; 2
    12de:	0e 94 ab 05 	call	0xb56	; 0xb56 <_ZN7Display9draw_ASCIEhhh>
		case 0:	//standard Header fuer fast alle Pages
			for(uint8_t i=0;i<8;i++){
				oled.draw_ASCI(rtc.msg_uhr[i],i*charsize,0);
			}
			buffersize=sprintf(buffer,"Bat: %i%%",Batteriestatus());
			for(uint8_t i=((SSD1306_WIDTH/charsize)-buffersize);i<(SSD1306_WIDTH/charsize);i++){
    12e2:	f3 94       	inc	r15
    12e4:	26 e0       	ldi	r18, 0x06	; 6
    12e6:	e2 0e       	add	r14, r18
    12e8:	85 e1       	ldi	r24, 0x15	; 21
    12ea:	f8 12       	cpse	r15, r24
    12ec:	ea cf       	rjmp	.-44     	; 0x12c2 <_Z6headerh+0x8e>
			}
			break;
		default:
			break;
	}
}
    12ee:	64 96       	adiw	r28, 0x14	; 20
    12f0:	0f b6       	in	r0, 0x3f	; 63
    12f2:	f8 94       	cli
    12f4:	de bf       	out	0x3e, r29	; 62
    12f6:	0f be       	out	0x3f, r0	; 63
    12f8:	cd bf       	out	0x3d, r28	; 61
    12fa:	df 91       	pop	r29
    12fc:	cf 91       	pop	r28
    12fe:	1f 91       	pop	r17
    1300:	0f 91       	pop	r16
    1302:	ff 90       	pop	r15
    1304:	ef 90       	pop	r14
    1306:	08 95       	ret

00001308 <_Z6bottomh>:

void bottom(uint8_t page){
    1308:	1f 93       	push	r17
    130a:	cf 93       	push	r28
    130c:	df 93       	push	r29
	switch (page) {
    130e:	81 11       	cpse	r24, r1
    1310:	0d c0       	rjmp	.+26     	; 0x132c <_Z6bottomh+0x24>
    1312:	c7 e1       	ldi	r28, 0x17	; 23
    1314:	d7 e0       	ldi	r29, 0x07	; 7
    1316:	10 e5       	ldi	r17, 0x50	; 80
		case 0:	//standard Header fuer fast alle Pages
			for(uint8_t i=0;i<8;i++){
				oled.draw_ASCI(rtc.msg_dat[i],i*charsize+(SSD1306_WIDTH-bitsderrtc*charsize),7*charhighte);
    1318:	69 91       	ld	r22, Y+
    131a:	28 e3       	ldi	r18, 0x38	; 56
    131c:	41 2f       	mov	r20, r17
    131e:	8e ed       	ldi	r24, 0xDE	; 222
    1320:	92 e0       	ldi	r25, 0x02	; 2
    1322:	0e 94 ab 05 	call	0xb56	; 0xb56 <_ZN7Display9draw_ASCIEhhh>
    1326:	1a 5f       	subi	r17, 0xFA	; 250
}

void bottom(uint8_t page){
	switch (page) {
		case 0:	//standard Header fuer fast alle Pages
			for(uint8_t i=0;i<8;i++){
    1328:	10 38       	cpi	r17, 0x80	; 128
    132a:	b1 f7       	brne	.-20     	; 0x1318 <_Z6bottomh+0x10>
			}
			break;
		default:
			break;
		}
}
    132c:	df 91       	pop	r29
    132e:	cf 91       	pop	r28
    1330:	1f 91       	pop	r17
    1332:	08 95       	ret

00001334 <_Z16anzeige_richtungf>:

void anzeige_richtung(float winkel){
    1334:	cf 92       	push	r12
    1336:	df 92       	push	r13
    1338:	ef 92       	push	r14
    133a:	ff 92       	push	r15
    133c:	6b 01       	movw	r12, r22
    133e:	7c 01       	movw	r14, r24
	//finden der Ziffer fuer die Anzeige
	if ((winkel<45/2) || (winkel == 360-45/2))
    1340:	20 e0       	ldi	r18, 0x00	; 0
    1342:	30 e0       	ldi	r19, 0x00	; 0
    1344:	40 eb       	ldi	r20, 0xB0	; 176
    1346:	51 e4       	ldi	r21, 0x41	; 65
    1348:	0e 94 7b 20 	call	0x40f6	; 0x40f6 <__cmpsf2>
    134c:	88 23       	and	r24, r24
    134e:	54 f0       	brlt	.+20     	; 0x1364 <_Z16anzeige_richtungf+0x30>
    1350:	20 e0       	ldi	r18, 0x00	; 0
    1352:	30 e0       	ldi	r19, 0x00	; 0
    1354:	49 ea       	ldi	r20, 0xA9	; 169
    1356:	53 e4       	ldi	r21, 0x43	; 67
    1358:	c7 01       	movw	r24, r14
    135a:	b6 01       	movw	r22, r12
    135c:	0e 94 7b 20 	call	0x40f6	; 0x40f6 <__cmpsf2>
    1360:	81 11       	cpse	r24, r1
    1362:	08 c0       	rjmp	.+16     	; 0x1374 <_Z16anzeige_richtungf+0x40>
	{
		oled.draw_ASCI('N',80,3.5*charhighte);
    1364:	2c e1       	ldi	r18, 0x1C	; 28
    1366:	40 e5       	ldi	r20, 0x50	; 80
    1368:	6e e4       	ldi	r22, 0x4E	; 78
    136a:	8e ed       	ldi	r24, 0xDE	; 222
    136c:	92 e0       	ldi	r25, 0x02	; 2
    136e:	0e 94 ab 05 	call	0xb56	; 0xb56 <_ZN7Display9draw_ASCIEhhh>
    1372:	99 c0       	rjmp	.+306    	; 0x14a6 <_Z16anzeige_richtungf+0x172>
	}
	else if (winkel<90-45/2)
    1374:	20 e0       	ldi	r18, 0x00	; 0
    1376:	30 e0       	ldi	r19, 0x00	; 0
    1378:	48 e8       	ldi	r20, 0x88	; 136
    137a:	52 e4       	ldi	r21, 0x42	; 66
    137c:	c7 01       	movw	r24, r14
    137e:	b6 01       	movw	r22, r12
    1380:	0e 94 7b 20 	call	0x40f6	; 0x40f6 <__cmpsf2>
    1384:	88 23       	and	r24, r24
    1386:	7c f4       	brge	.+30     	; 0x13a6 <_Z16anzeige_richtungf+0x72>
	{
		oled.draw_ASCI('N',80-charsize/2,3.5*charhighte);
    1388:	2c e1       	ldi	r18, 0x1C	; 28
    138a:	4d e4       	ldi	r20, 0x4D	; 77
    138c:	6e e4       	ldi	r22, 0x4E	; 78
    138e:	8e ed       	ldi	r24, 0xDE	; 222
    1390:	92 e0       	ldi	r25, 0x02	; 2
    1392:	0e 94 ab 05 	call	0xb56	; 0xb56 <_ZN7Display9draw_ASCIEhhh>
		oled.draw_ASCI('O',80+charsize/2,3.5*charhighte);
    1396:	2c e1       	ldi	r18, 0x1C	; 28
    1398:	43 e5       	ldi	r20, 0x53	; 83
    139a:	6f e4       	ldi	r22, 0x4F	; 79
    139c:	8e ed       	ldi	r24, 0xDE	; 222
    139e:	92 e0       	ldi	r25, 0x02	; 2
    13a0:	0e 94 ab 05 	call	0xb56	; 0xb56 <_ZN7Display9draw_ASCIEhhh>
    13a4:	80 c0       	rjmp	.+256    	; 0x14a6 <_Z16anzeige_richtungf+0x172>
	}
	else if (winkel<135-45/2)
    13a6:	20 e0       	ldi	r18, 0x00	; 0
    13a8:	30 e0       	ldi	r19, 0x00	; 0
    13aa:	42 ee       	ldi	r20, 0xE2	; 226
    13ac:	52 e4       	ldi	r21, 0x42	; 66
    13ae:	c7 01       	movw	r24, r14
    13b0:	b6 01       	movw	r22, r12
    13b2:	0e 94 7b 20 	call	0x40f6	; 0x40f6 <__cmpsf2>
    13b6:	88 23       	and	r24, r24
    13b8:	44 f4       	brge	.+16     	; 0x13ca <_Z16anzeige_richtungf+0x96>
	{
		oled.draw_ASCI('O',80,3.5*charhighte);
    13ba:	2c e1       	ldi	r18, 0x1C	; 28
    13bc:	40 e5       	ldi	r20, 0x50	; 80
    13be:	6f e4       	ldi	r22, 0x4F	; 79
    13c0:	8e ed       	ldi	r24, 0xDE	; 222
    13c2:	92 e0       	ldi	r25, 0x02	; 2
    13c4:	0e 94 ab 05 	call	0xb56	; 0xb56 <_ZN7Display9draw_ASCIEhhh>
    13c8:	6e c0       	rjmp	.+220    	; 0x14a6 <_Z16anzeige_richtungf+0x172>
	}
	else if (winkel<180-45/2)
    13ca:	20 e0       	ldi	r18, 0x00	; 0
    13cc:	30 e0       	ldi	r19, 0x00	; 0
    13ce:	4e e1       	ldi	r20, 0x1E	; 30
    13d0:	53 e4       	ldi	r21, 0x43	; 67
    13d2:	c7 01       	movw	r24, r14
    13d4:	b6 01       	movw	r22, r12
    13d6:	0e 94 7b 20 	call	0x40f6	; 0x40f6 <__cmpsf2>
    13da:	88 23       	and	r24, r24
    13dc:	7c f4       	brge	.+30     	; 0x13fc <_Z16anzeige_richtungf+0xc8>
	{
		oled.draw_ASCI('S',80-charsize/2,3.5*charhighte);
    13de:	2c e1       	ldi	r18, 0x1C	; 28
    13e0:	4d e4       	ldi	r20, 0x4D	; 77
    13e2:	63 e5       	ldi	r22, 0x53	; 83
    13e4:	8e ed       	ldi	r24, 0xDE	; 222
    13e6:	92 e0       	ldi	r25, 0x02	; 2
    13e8:	0e 94 ab 05 	call	0xb56	; 0xb56 <_ZN7Display9draw_ASCIEhhh>
		oled.draw_ASCI('O',80+charsize/2,3.5*charhighte);
    13ec:	2c e1       	ldi	r18, 0x1C	; 28
    13ee:	43 e5       	ldi	r20, 0x53	; 83
    13f0:	6f e4       	ldi	r22, 0x4F	; 79
    13f2:	8e ed       	ldi	r24, 0xDE	; 222
    13f4:	92 e0       	ldi	r25, 0x02	; 2
    13f6:	0e 94 ab 05 	call	0xb56	; 0xb56 <_ZN7Display9draw_ASCIEhhh>
    13fa:	55 c0       	rjmp	.+170    	; 0x14a6 <_Z16anzeige_richtungf+0x172>
	}
	else if (winkel<225-45/2)
    13fc:	20 e0       	ldi	r18, 0x00	; 0
    13fe:	30 e0       	ldi	r19, 0x00	; 0
    1400:	4b e4       	ldi	r20, 0x4B	; 75
    1402:	53 e4       	ldi	r21, 0x43	; 67
    1404:	c7 01       	movw	r24, r14
    1406:	b6 01       	movw	r22, r12
    1408:	0e 94 7b 20 	call	0x40f6	; 0x40f6 <__cmpsf2>
    140c:	88 23       	and	r24, r24
    140e:	44 f4       	brge	.+16     	; 0x1420 <_Z16anzeige_richtungf+0xec>
	{
		oled.draw_ASCI('S',80,3.5*charhighte);
    1410:	2c e1       	ldi	r18, 0x1C	; 28
    1412:	40 e5       	ldi	r20, 0x50	; 80
    1414:	63 e5       	ldi	r22, 0x53	; 83
    1416:	8e ed       	ldi	r24, 0xDE	; 222
    1418:	92 e0       	ldi	r25, 0x02	; 2
    141a:	0e 94 ab 05 	call	0xb56	; 0xb56 <_ZN7Display9draw_ASCIEhhh>
    141e:	43 c0       	rjmp	.+134    	; 0x14a6 <_Z16anzeige_richtungf+0x172>
	}
	else if (winkel<270-45/2)
    1420:	20 e0       	ldi	r18, 0x00	; 0
    1422:	30 e0       	ldi	r19, 0x00	; 0
    1424:	48 e7       	ldi	r20, 0x78	; 120
    1426:	53 e4       	ldi	r21, 0x43	; 67
    1428:	c7 01       	movw	r24, r14
    142a:	b6 01       	movw	r22, r12
    142c:	0e 94 7b 20 	call	0x40f6	; 0x40f6 <__cmpsf2>
    1430:	88 23       	and	r24, r24
    1432:	7c f4       	brge	.+30     	; 0x1452 <_Z16anzeige_richtungf+0x11e>
	{
		oled.draw_ASCI('S',80-charsize/2,3.5*charhighte);
    1434:	2c e1       	ldi	r18, 0x1C	; 28
    1436:	4d e4       	ldi	r20, 0x4D	; 77
    1438:	63 e5       	ldi	r22, 0x53	; 83
    143a:	8e ed       	ldi	r24, 0xDE	; 222
    143c:	92 e0       	ldi	r25, 0x02	; 2
    143e:	0e 94 ab 05 	call	0xb56	; 0xb56 <_ZN7Display9draw_ASCIEhhh>
		oled.draw_ASCI('W',80+charsize/2,3.5*charhighte);
    1442:	2c e1       	ldi	r18, 0x1C	; 28
    1444:	43 e5       	ldi	r20, 0x53	; 83
    1446:	67 e5       	ldi	r22, 0x57	; 87
    1448:	8e ed       	ldi	r24, 0xDE	; 222
    144a:	92 e0       	ldi	r25, 0x02	; 2
    144c:	0e 94 ab 05 	call	0xb56	; 0xb56 <_ZN7Display9draw_ASCIEhhh>
    1450:	2a c0       	rjmp	.+84     	; 0x14a6 <_Z16anzeige_richtungf+0x172>
	}
	else if (winkel<315-45/2)
    1452:	20 e0       	ldi	r18, 0x00	; 0
    1454:	30 e8       	ldi	r19, 0x80	; 128
    1456:	42 e9       	ldi	r20, 0x92	; 146
    1458:	53 e4       	ldi	r21, 0x43	; 67
    145a:	c7 01       	movw	r24, r14
    145c:	b6 01       	movw	r22, r12
    145e:	0e 94 7b 20 	call	0x40f6	; 0x40f6 <__cmpsf2>
    1462:	88 23       	and	r24, r24
    1464:	44 f4       	brge	.+16     	; 0x1476 <_Z16anzeige_richtungf+0x142>
	{
		oled.draw_ASCI('W',80,3.5*charhighte);
    1466:	2c e1       	ldi	r18, 0x1C	; 28
    1468:	40 e5       	ldi	r20, 0x50	; 80
    146a:	67 e5       	ldi	r22, 0x57	; 87
    146c:	8e ed       	ldi	r24, 0xDE	; 222
    146e:	92 e0       	ldi	r25, 0x02	; 2
    1470:	0e 94 ab 05 	call	0xb56	; 0xb56 <_ZN7Display9draw_ASCIEhhh>
    1474:	18 c0       	rjmp	.+48     	; 0x14a6 <_Z16anzeige_richtungf+0x172>
	}
	else if (winkel<360-45/2)
    1476:	20 e0       	ldi	r18, 0x00	; 0
    1478:	30 e0       	ldi	r19, 0x00	; 0
    147a:	49 ea       	ldi	r20, 0xA9	; 169
    147c:	53 e4       	ldi	r21, 0x43	; 67
    147e:	c7 01       	movw	r24, r14
    1480:	b6 01       	movw	r22, r12
    1482:	0e 94 7b 20 	call	0x40f6	; 0x40f6 <__cmpsf2>
    1486:	88 23       	and	r24, r24
    1488:	74 f4       	brge	.+28     	; 0x14a6 <_Z16anzeige_richtungf+0x172>
	{
		oled.draw_ASCI('N',80-charsize/2,3.5*charhighte);
    148a:	2c e1       	ldi	r18, 0x1C	; 28
    148c:	4d e4       	ldi	r20, 0x4D	; 77
    148e:	6e e4       	ldi	r22, 0x4E	; 78
    1490:	8e ed       	ldi	r24, 0xDE	; 222
    1492:	92 e0       	ldi	r25, 0x02	; 2
    1494:	0e 94 ab 05 	call	0xb56	; 0xb56 <_ZN7Display9draw_ASCIEhhh>
		oled.draw_ASCI('W',80+charsize/2,3.5*charhighte);
    1498:	2c e1       	ldi	r18, 0x1C	; 28
    149a:	43 e5       	ldi	r20, 0x53	; 83
    149c:	67 e5       	ldi	r22, 0x57	; 87
    149e:	8e ed       	ldi	r24, 0xDE	; 222
    14a0:	92 e0       	ldi	r25, 0x02	; 2
    14a2:	0e 94 ab 05 	call	0xb56	; 0xb56 <_ZN7Display9draw_ASCIEhhh>
	}
}
    14a6:	ff 90       	pop	r15
    14a8:	ef 90       	pop	r14
    14aa:	df 90       	pop	r13
    14ac:	cf 90       	pop	r12
    14ae:	08 95       	ret

000014b0 <_Z13anzeige_nadelhhf>:

void anzeige_nadel(uint8_t x, uint8_t y, float angle){
    14b0:	af 92       	push	r10
    14b2:	bf 92       	push	r11
    14b4:	cf 92       	push	r12
    14b6:	df 92       	push	r13
    14b8:	ef 92       	push	r14
    14ba:	ff 92       	push	r15
    14bc:	0f 93       	push	r16
    14be:	1f 93       	push	r17
	//fixed parameters for drawing the arrow
	oled.draw_triangle(x,y,20,70,angle);
    14c0:	59 01       	movw	r10, r18
    14c2:	6a 01       	movw	r12, r20
    14c4:	e1 2c       	mov	r14, r1
    14c6:	f1 2c       	mov	r15, r1
    14c8:	0c e8       	ldi	r16, 0x8C	; 140
    14ca:	12 e4       	ldi	r17, 0x42	; 66
    14cc:	24 e1       	ldi	r18, 0x14	; 20
    14ce:	46 2f       	mov	r20, r22
    14d0:	68 2f       	mov	r22, r24
    14d2:	8e ed       	ldi	r24, 0xDE	; 222
    14d4:	92 e0       	ldi	r25, 0x02	; 2
    14d6:	0e 94 86 04 	call	0x90c	; 0x90c <_ZN7Display13draw_triangleEhhhff>
}
    14da:	1f 91       	pop	r17
    14dc:	0f 91       	pop	r16
    14de:	ff 90       	pop	r15
    14e0:	ef 90       	pop	r14
    14e2:	df 90       	pop	r13
    14e4:	cf 90       	pop	r12
    14e6:	bf 90       	pop	r11
    14e8:	af 90       	pop	r10
    14ea:	08 95       	ret

000014ec <_Z19anzeige_kleinenadelhhf>:
void anzeige_kleinenadel(uint8_t x, uint8_t y, float angle){
    14ec:	af 92       	push	r10
    14ee:	bf 92       	push	r11
    14f0:	cf 92       	push	r12
    14f2:	df 92       	push	r13
    14f4:	ef 92       	push	r14
    14f6:	ff 92       	push	r15
    14f8:	0f 93       	push	r16
    14fa:	1f 93       	push	r17
	//fixed parameters for drawing the arrow
	oled.draw_triangle(x,y,10,70,angle);
    14fc:	59 01       	movw	r10, r18
    14fe:	6a 01       	movw	r12, r20
    1500:	e1 2c       	mov	r14, r1
    1502:	f1 2c       	mov	r15, r1
    1504:	0c e8       	ldi	r16, 0x8C	; 140
    1506:	12 e4       	ldi	r17, 0x42	; 66
    1508:	2a e0       	ldi	r18, 0x0A	; 10
    150a:	46 2f       	mov	r20, r22
    150c:	68 2f       	mov	r22, r24
    150e:	8e ed       	ldi	r24, 0xDE	; 222
    1510:	92 e0       	ldi	r25, 0x02	; 2
    1512:	0e 94 86 04 	call	0x90c	; 0x90c <_ZN7Display13draw_triangleEhhhff>
}
    1516:	1f 91       	pop	r17
    1518:	0f 91       	pop	r16
    151a:	ff 90       	pop	r15
    151c:	ef 90       	pop	r14
    151e:	df 90       	pop	r13
    1520:	cf 90       	pop	r12
    1522:	bf 90       	pop	r11
    1524:	af 90       	pop	r10
    1526:	08 95       	ret

00001528 <_Z11menue_hauptv>:

void menue_haupt(){
    1528:	cf 92       	push	r12
    152a:	df 92       	push	r13
    152c:	ef 92       	push	r14
    152e:	ff 92       	push	r15
    1530:	0f 93       	push	r16
    1532:	1f 93       	push	r17
    1534:	cf 93       	push	r28
    1536:	df 93       	push	r29
    1538:	cd b7       	in	r28, 0x3d	; 61
    153a:	de b7       	in	r29, 0x3e	; 62
    153c:	64 97       	sbiw	r28, 0x14	; 20
    153e:	0f b6       	in	r0, 0x3f	; 63
    1540:	f8 94       	cli
    1542:	de bf       	out	0x3e, r29	; 62
    1544:	0f be       	out	0x3f, r0	; 63
    1546:	cd bf       	out	0x3d, r28	; 61
	char buffer[20];
	uint8_t buffersize=0;

	oled.clearFrame();
    1548:	8e ed       	ldi	r24, 0xDE	; 222
    154a:	92 e0       	ldi	r25, 0x02	; 2
    154c:	0e 94 c0 02 	call	0x580	; 0x580 <_ZN7Display10clearFrameEv>
	buffersize=sprintf(buffer,"1:Fahradanzeige");
    1550:	80 e1       	ldi	r24, 0x10	; 16
    1552:	e6 e3       	ldi	r30, 0x36	; 54
    1554:	f1 e0       	ldi	r31, 0x01	; 1
    1556:	8e 01       	movw	r16, r28
    1558:	0f 5f       	subi	r16, 0xFF	; 255
    155a:	1f 4f       	sbci	r17, 0xFF	; 255
    155c:	d8 01       	movw	r26, r16
    155e:	01 90       	ld	r0, Z+
    1560:	0d 92       	st	X+, r0
    1562:	8a 95       	dec	r24
    1564:	e1 f7       	brne	.-8      	; 0x155e <_Z11menue_hauptv+0x36>
    1566:	e0 2e       	mov	r14, r16
    1568:	f1 2e       	mov	r15, r17
    156a:	68 01       	movw	r12, r16
    156c:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,0*charhighte);}
    156e:	f6 01       	movw	r30, r12
    1570:	61 91       	ld	r22, Z+
    1572:	6f 01       	movw	r12, r30
    1574:	20 e0       	ldi	r18, 0x00	; 0
    1576:	41 2f       	mov	r20, r17
    1578:	8e ed       	ldi	r24, 0xDE	; 222
    157a:	92 e0       	ldi	r25, 0x02	; 2
    157c:	0e 94 ab 05 	call	0xb56	; 0xb56 <_ZN7Display9draw_ASCIEhhh>
    1580:	1a 5f       	subi	r17, 0xFA	; 250
    1582:	1a 35       	cpi	r17, 0x5A	; 90
    1584:	a1 f7       	brne	.-24     	; 0x156e <_Z11menue_hauptv+0x46>
	buffersize=sprintf(buffer,"2:Taschenrechner");
    1586:	81 e1       	ldi	r24, 0x11	; 17
    1588:	e6 e4       	ldi	r30, 0x46	; 70
    158a:	f1 e0       	ldi	r31, 0x01	; 1
    158c:	de 01       	movw	r26, r28
    158e:	11 96       	adiw	r26, 0x01	; 1
    1590:	01 90       	ld	r0, Z+
    1592:	0d 92       	st	X+, r0
    1594:	8a 95       	dec	r24
    1596:	e1 f7       	brne	.-8      	; 0x1590 <_Z11menue_hauptv+0x68>
    1598:	ce 2c       	mov	r12, r14
    159a:	df 2c       	mov	r13, r15
    159c:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,1*charhighte);}
    159e:	f6 01       	movw	r30, r12
    15a0:	61 91       	ld	r22, Z+
    15a2:	6f 01       	movw	r12, r30
    15a4:	28 e0       	ldi	r18, 0x08	; 8
    15a6:	41 2f       	mov	r20, r17
    15a8:	8e ed       	ldi	r24, 0xDE	; 222
    15aa:	92 e0       	ldi	r25, 0x02	; 2
    15ac:	0e 94 ab 05 	call	0xb56	; 0xb56 <_ZN7Display9draw_ASCIEhhh>
    15b0:	1a 5f       	subi	r17, 0xFA	; 250
    15b2:	10 36       	cpi	r17, 0x60	; 96
    15b4:	a1 f7       	brne	.-24     	; 0x159e <_Z11menue_hauptv+0x76>
	buffersize=sprintf(buffer,"3:Kompass");
    15b6:	8a e0       	ldi	r24, 0x0A	; 10
    15b8:	e7 e5       	ldi	r30, 0x57	; 87
    15ba:	f1 e0       	ldi	r31, 0x01	; 1
    15bc:	de 01       	movw	r26, r28
    15be:	11 96       	adiw	r26, 0x01	; 1
    15c0:	01 90       	ld	r0, Z+
    15c2:	0d 92       	st	X+, r0
    15c4:	8a 95       	dec	r24
    15c6:	e1 f7       	brne	.-8      	; 0x15c0 <_Z11menue_hauptv+0x98>
    15c8:	ce 2c       	mov	r12, r14
    15ca:	df 2c       	mov	r13, r15
    15cc:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,2*charhighte);}
    15ce:	f6 01       	movw	r30, r12
    15d0:	61 91       	ld	r22, Z+
    15d2:	6f 01       	movw	r12, r30
    15d4:	20 e1       	ldi	r18, 0x10	; 16
    15d6:	41 2f       	mov	r20, r17
    15d8:	8e ed       	ldi	r24, 0xDE	; 222
    15da:	92 e0       	ldi	r25, 0x02	; 2
    15dc:	0e 94 ab 05 	call	0xb56	; 0xb56 <_ZN7Display9draw_ASCIEhhh>
    15e0:	1a 5f       	subi	r17, 0xFA	; 250
    15e2:	16 33       	cpi	r17, 0x36	; 54
    15e4:	a1 f7       	brne	.-24     	; 0x15ce <_Z11menue_hauptv+0xa6>
	buffersize=sprintf(buffer,"4:Uhrmenue");
    15e6:	8b e0       	ldi	r24, 0x0B	; 11
    15e8:	e1 e6       	ldi	r30, 0x61	; 97
    15ea:	f1 e0       	ldi	r31, 0x01	; 1
    15ec:	de 01       	movw	r26, r28
    15ee:	11 96       	adiw	r26, 0x01	; 1
    15f0:	01 90       	ld	r0, Z+
    15f2:	0d 92       	st	X+, r0
    15f4:	8a 95       	dec	r24
    15f6:	e1 f7       	brne	.-8      	; 0x15f0 <_Z11menue_hauptv+0xc8>
    15f8:	ce 2c       	mov	r12, r14
    15fa:	df 2c       	mov	r13, r15
    15fc:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,3*charhighte);}
    15fe:	f6 01       	movw	r30, r12
    1600:	61 91       	ld	r22, Z+
    1602:	6f 01       	movw	r12, r30
    1604:	28 e1       	ldi	r18, 0x18	; 24
    1606:	41 2f       	mov	r20, r17
    1608:	8e ed       	ldi	r24, 0xDE	; 222
    160a:	92 e0       	ldi	r25, 0x02	; 2
    160c:	0e 94 ab 05 	call	0xb56	; 0xb56 <_ZN7Display9draw_ASCIEhhh>
    1610:	1a 5f       	subi	r17, 0xFA	; 250
    1612:	1c 33       	cpi	r17, 0x3C	; 60
    1614:	a1 f7       	brne	.-24     	; 0x15fe <_Z11menue_hauptv+0xd6>
	buffersize=sprintf(buffer,"5:Einstellungen");
    1616:	80 e1       	ldi	r24, 0x10	; 16
    1618:	ec e6       	ldi	r30, 0x6C	; 108
    161a:	f1 e0       	ldi	r31, 0x01	; 1
    161c:	de 01       	movw	r26, r28
    161e:	11 96       	adiw	r26, 0x01	; 1
    1620:	01 90       	ld	r0, Z+
    1622:	0d 92       	st	X+, r0
    1624:	8a 95       	dec	r24
    1626:	e1 f7       	brne	.-8      	; 0x1620 <_Z11menue_hauptv+0xf8>
    1628:	ce 2c       	mov	r12, r14
    162a:	df 2c       	mov	r13, r15
    162c:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,4*charhighte);}
    162e:	f6 01       	movw	r30, r12
    1630:	61 91       	ld	r22, Z+
    1632:	6f 01       	movw	r12, r30
    1634:	20 e2       	ldi	r18, 0x20	; 32
    1636:	41 2f       	mov	r20, r17
    1638:	8e ed       	ldi	r24, 0xDE	; 222
    163a:	92 e0       	ldi	r25, 0x02	; 2
    163c:	0e 94 ab 05 	call	0xb56	; 0xb56 <_ZN7Display9draw_ASCIEhhh>
    1640:	1a 5f       	subi	r17, 0xFA	; 250
    1642:	1a 35       	cpi	r17, 0x5A	; 90
    1644:	a1 f7       	brne	.-24     	; 0x162e <_Z11menue_hauptv+0x106>
	buffersize=sprintf(buffer,"6:Display aus");
    1646:	8e e0       	ldi	r24, 0x0E	; 14
    1648:	ec e7       	ldi	r30, 0x7C	; 124
    164a:	f1 e0       	ldi	r31, 0x01	; 1
    164c:	de 01       	movw	r26, r28
    164e:	11 96       	adiw	r26, 0x01	; 1
    1650:	01 90       	ld	r0, Z+
    1652:	0d 92       	st	X+, r0
    1654:	8a 95       	dec	r24
    1656:	e1 f7       	brne	.-8      	; 0x1650 <_Z11menue_hauptv+0x128>
    1658:	ce 2c       	mov	r12, r14
    165a:	df 2c       	mov	r13, r15
    165c:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,5*charhighte);}
    165e:	f6 01       	movw	r30, r12
    1660:	61 91       	ld	r22, Z+
    1662:	6f 01       	movw	r12, r30
    1664:	28 e2       	ldi	r18, 0x28	; 40
    1666:	41 2f       	mov	r20, r17
    1668:	8e ed       	ldi	r24, 0xDE	; 222
    166a:	92 e0       	ldi	r25, 0x02	; 2
    166c:	0e 94 ab 05 	call	0xb56	; 0xb56 <_ZN7Display9draw_ASCIEhhh>
    1670:	1a 5f       	subi	r17, 0xFA	; 250
    1672:	1e 34       	cpi	r17, 0x4E	; 78
    1674:	a1 f7       	brne	.-24     	; 0x165e <_Z11menue_hauptv+0x136>
	buffersize=sprintf(buffer,"7:Drucksensor");
    1676:	8e e0       	ldi	r24, 0x0E	; 14
    1678:	ea e8       	ldi	r30, 0x8A	; 138
    167a:	f1 e0       	ldi	r31, 0x01	; 1
    167c:	de 01       	movw	r26, r28
    167e:	11 96       	adiw	r26, 0x01	; 1
    1680:	01 90       	ld	r0, Z+
    1682:	0d 92       	st	X+, r0
    1684:	8a 95       	dec	r24
    1686:	e1 f7       	brne	.-8      	; 0x1680 <_Z11menue_hauptv+0x158>
    1688:	ce 2c       	mov	r12, r14
    168a:	df 2c       	mov	r13, r15
    168c:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,6*charhighte);}
    168e:	f6 01       	movw	r30, r12
    1690:	61 91       	ld	r22, Z+
    1692:	6f 01       	movw	r12, r30
    1694:	20 e3       	ldi	r18, 0x30	; 48
    1696:	41 2f       	mov	r20, r17
    1698:	8e ed       	ldi	r24, 0xDE	; 222
    169a:	92 e0       	ldi	r25, 0x02	; 2
    169c:	0e 94 ab 05 	call	0xb56	; 0xb56 <_ZN7Display9draw_ASCIEhhh>
    16a0:	1a 5f       	subi	r17, 0xFA	; 250
    16a2:	1e 34       	cpi	r17, 0x4E	; 78
    16a4:	a1 f7       	brne	.-24     	; 0x168e <_Z11menue_hauptv+0x166>
}
    16a6:	64 96       	adiw	r28, 0x14	; 20
    16a8:	0f b6       	in	r0, 0x3f	; 63
    16aa:	f8 94       	cli
    16ac:	de bf       	out	0x3e, r29	; 62
    16ae:	0f be       	out	0x3f, r0	; 63
    16b0:	cd bf       	out	0x3d, r28	; 61
    16b2:	df 91       	pop	r29
    16b4:	cf 91       	pop	r28
    16b6:	1f 91       	pop	r17
    16b8:	0f 91       	pop	r16
    16ba:	ff 90       	pop	r15
    16bc:	ef 90       	pop	r14
    16be:	df 90       	pop	r13
    16c0:	cf 90       	pop	r12
    16c2:	08 95       	ret

000016c4 <_Z11menue_einstv>:
void menue_einst(){
    16c4:	af 92       	push	r10
    16c6:	bf 92       	push	r11
    16c8:	df 92       	push	r13
    16ca:	ef 92       	push	r14
    16cc:	0f 93       	push	r16
    16ce:	1f 93       	push	r17
    16d0:	cf 93       	push	r28
    16d2:	df 93       	push	r29
    16d4:	cd b7       	in	r28, 0x3d	; 61
    16d6:	de b7       	in	r29, 0x3e	; 62
    16d8:	64 97       	sbiw	r28, 0x14	; 20
    16da:	0f b6       	in	r0, 0x3f	; 63
    16dc:	f8 94       	cli
    16de:	de bf       	out	0x3e, r29	; 62
    16e0:	0f be       	out	0x3f, r0	; 63
    16e2:	cd bf       	out	0x3d, r28	; 61
	char buffer[20];
	uint8_t buffersize=0;

	oled.clearFrame();
    16e4:	8e ed       	ldi	r24, 0xDE	; 222
    16e6:	92 e0       	ldi	r25, 0x02	; 2
    16e8:	0e 94 c0 02 	call	0x580	; 0x580 <_ZN7Display10clearFrameEv>
	buffersize=sprintf(buffer,"1:Kompass kalib.");
    16ec:	81 e1       	ldi	r24, 0x11	; 17
    16ee:	e8 e9       	ldi	r30, 0x98	; 152
    16f0:	f1 e0       	ldi	r31, 0x01	; 1
    16f2:	8e 01       	movw	r16, r28
    16f4:	0f 5f       	subi	r16, 0xFF	; 255
    16f6:	1f 4f       	sbci	r17, 0xFF	; 255
    16f8:	d8 01       	movw	r26, r16
    16fa:	01 90       	ld	r0, Z+
    16fc:	0d 92       	st	X+, r0
    16fe:	8a 95       	dec	r24
    1700:	e1 f7       	brne	.-8      	; 0x16fa <_Z11menue_einstv+0x36>
    1702:	d0 2e       	mov	r13, r16
    1704:	e1 2e       	mov	r14, r17
    1706:	58 01       	movw	r10, r16
    1708:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,0*charhighte);}
    170a:	f5 01       	movw	r30, r10
    170c:	61 91       	ld	r22, Z+
    170e:	5f 01       	movw	r10, r30
    1710:	20 e0       	ldi	r18, 0x00	; 0
    1712:	41 2f       	mov	r20, r17
    1714:	8e ed       	ldi	r24, 0xDE	; 222
    1716:	92 e0       	ldi	r25, 0x02	; 2
    1718:	0e 94 ab 05 	call	0xb56	; 0xb56 <_ZN7Display9draw_ASCIEhhh>
    171c:	1a 5f       	subi	r17, 0xFA	; 250
    171e:	10 36       	cpi	r17, 0x60	; 96
    1720:	a1 f7       	brne	.-24     	; 0x170a <_Z11menue_einstv+0x46>
	buffersize=sprintf(buffer,"2:Kompassverstaerkung");
    1722:	86 e1       	ldi	r24, 0x16	; 22
    1724:	e9 ea       	ldi	r30, 0xA9	; 169
    1726:	f1 e0       	ldi	r31, 0x01	; 1
    1728:	de 01       	movw	r26, r28
    172a:	11 96       	adiw	r26, 0x01	; 1
    172c:	01 90       	ld	r0, Z+
    172e:	0d 92       	st	X+, r0
    1730:	8a 95       	dec	r24
    1732:	e1 f7       	brne	.-8      	; 0x172c <_Z11menue_einstv+0x68>
    1734:	ad 2c       	mov	r10, r13
    1736:	be 2c       	mov	r11, r14
    1738:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,1*charhighte);}
    173a:	f5 01       	movw	r30, r10
    173c:	61 91       	ld	r22, Z+
    173e:	5f 01       	movw	r10, r30
    1740:	28 e0       	ldi	r18, 0x08	; 8
    1742:	41 2f       	mov	r20, r17
    1744:	8e ed       	ldi	r24, 0xDE	; 222
    1746:	92 e0       	ldi	r25, 0x02	; 2
    1748:	0e 94 ab 05 	call	0xb56	; 0xb56 <_ZN7Display9draw_ASCIEhhh>
    174c:	1a 5f       	subi	r17, 0xFA	; 250
    174e:	1e 37       	cpi	r17, 0x7E	; 126
    1750:	a1 f7       	brne	.-24     	; 0x173a <_Z11menue_einstv+0x76>
	buffersize=sprintf(buffer,"3:Uhr einstellen");
    1752:	81 e1       	ldi	r24, 0x11	; 17
    1754:	ef eb       	ldi	r30, 0xBF	; 191
    1756:	f1 e0       	ldi	r31, 0x01	; 1
    1758:	de 01       	movw	r26, r28
    175a:	11 96       	adiw	r26, 0x01	; 1
    175c:	01 90       	ld	r0, Z+
    175e:	0d 92       	st	X+, r0
    1760:	8a 95       	dec	r24
    1762:	e1 f7       	brne	.-8      	; 0x175c <_Z11menue_einstv+0x98>
    1764:	ad 2c       	mov	r10, r13
    1766:	be 2c       	mov	r11, r14
    1768:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,2*charhighte);}
    176a:	f5 01       	movw	r30, r10
    176c:	61 91       	ld	r22, Z+
    176e:	5f 01       	movw	r10, r30
    1770:	20 e1       	ldi	r18, 0x10	; 16
    1772:	41 2f       	mov	r20, r17
    1774:	8e ed       	ldi	r24, 0xDE	; 222
    1776:	92 e0       	ldi	r25, 0x02	; 2
    1778:	0e 94 ab 05 	call	0xb56	; 0xb56 <_ZN7Display9draw_ASCIEhhh>
    177c:	1a 5f       	subi	r17, 0xFA	; 250
    177e:	10 36       	cpi	r17, 0x60	; 96
    1780:	a1 f7       	brne	.-24     	; 0x176a <_Z11menue_einstv+0xa6>
	//for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,4*charhighte);}
	//buffersize=sprintf(buffer,"6:HMC5883L Gain");
	//for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,5*charhighte);}
	//buffersize=sprintf(buffer,"7:Uhr einstellen");
	//for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,6*charhighte);}
}
    1782:	64 96       	adiw	r28, 0x14	; 20
    1784:	0f b6       	in	r0, 0x3f	; 63
    1786:	f8 94       	cli
    1788:	de bf       	out	0x3e, r29	; 62
    178a:	0f be       	out	0x3f, r0	; 63
    178c:	cd bf       	out	0x3d, r28	; 61
    178e:	df 91       	pop	r29
    1790:	cf 91       	pop	r28
    1792:	1f 91       	pop	r17
    1794:	0f 91       	pop	r16
    1796:	ef 90       	pop	r14
    1798:	df 90       	pop	r13
    179a:	bf 90       	pop	r11
    179c:	af 90       	pop	r10
    179e:	08 95       	ret

000017a0 <_Z9menue_uhrv>:
void menue_uhr(){
    17a0:	af 92       	push	r10
    17a2:	bf 92       	push	r11
    17a4:	df 92       	push	r13
    17a6:	ef 92       	push	r14
    17a8:	0f 93       	push	r16
    17aa:	1f 93       	push	r17
    17ac:	cf 93       	push	r28
    17ae:	df 93       	push	r29
    17b0:	cd b7       	in	r28, 0x3d	; 61
    17b2:	de b7       	in	r29, 0x3e	; 62
    17b4:	64 97       	sbiw	r28, 0x14	; 20
    17b6:	0f b6       	in	r0, 0x3f	; 63
    17b8:	f8 94       	cli
    17ba:	de bf       	out	0x3e, r29	; 62
    17bc:	0f be       	out	0x3f, r0	; 63
    17be:	cd bf       	out	0x3d, r28	; 61
	char buffer[20];
	uint8_t buffersize=0;

	oled.clearFrame();
    17c0:	8e ed       	ldi	r24, 0xDE	; 222
    17c2:	92 e0       	ldi	r25, 0x02	; 2
    17c4:	0e 94 c0 02 	call	0x580	; 0x580 <_ZN7Display10clearFrameEv>
	buffersize=sprintf(buffer,"1:Uhr");
    17c8:	86 e0       	ldi	r24, 0x06	; 6
    17ca:	e0 ed       	ldi	r30, 0xD0	; 208
    17cc:	f1 e0       	ldi	r31, 0x01	; 1
    17ce:	8e 01       	movw	r16, r28
    17d0:	0f 5f       	subi	r16, 0xFF	; 255
    17d2:	1f 4f       	sbci	r17, 0xFF	; 255
    17d4:	d8 01       	movw	r26, r16
    17d6:	01 90       	ld	r0, Z+
    17d8:	0d 92       	st	X+, r0
    17da:	8a 95       	dec	r24
    17dc:	e1 f7       	brne	.-8      	; 0x17d6 <_Z9menue_uhrv+0x36>
    17de:	d0 2e       	mov	r13, r16
    17e0:	e1 2e       	mov	r14, r17
    17e2:	58 01       	movw	r10, r16
    17e4:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,0*charhighte);}
    17e6:	f5 01       	movw	r30, r10
    17e8:	61 91       	ld	r22, Z+
    17ea:	5f 01       	movw	r10, r30
    17ec:	20 e0       	ldi	r18, 0x00	; 0
    17ee:	41 2f       	mov	r20, r17
    17f0:	8e ed       	ldi	r24, 0xDE	; 222
    17f2:	92 e0       	ldi	r25, 0x02	; 2
    17f4:	0e 94 ab 05 	call	0xb56	; 0xb56 <_ZN7Display9draw_ASCIEhhh>
    17f8:	1a 5f       	subi	r17, 0xFA	; 250
    17fa:	1e 31       	cpi	r17, 0x1E	; 30
    17fc:	a1 f7       	brne	.-24     	; 0x17e6 <_Z9menue_uhrv+0x46>
	buffersize=sprintf(buffer,"2:Stoppuhr");
    17fe:	8b e0       	ldi	r24, 0x0B	; 11
    1800:	e6 ed       	ldi	r30, 0xD6	; 214
    1802:	f1 e0       	ldi	r31, 0x01	; 1
    1804:	de 01       	movw	r26, r28
    1806:	11 96       	adiw	r26, 0x01	; 1
    1808:	01 90       	ld	r0, Z+
    180a:	0d 92       	st	X+, r0
    180c:	8a 95       	dec	r24
    180e:	e1 f7       	brne	.-8      	; 0x1808 <_Z9menue_uhrv+0x68>
    1810:	ad 2c       	mov	r10, r13
    1812:	be 2c       	mov	r11, r14
    1814:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,1*charhighte);}
    1816:	f5 01       	movw	r30, r10
    1818:	61 91       	ld	r22, Z+
    181a:	5f 01       	movw	r10, r30
    181c:	28 e0       	ldi	r18, 0x08	; 8
    181e:	41 2f       	mov	r20, r17
    1820:	8e ed       	ldi	r24, 0xDE	; 222
    1822:	92 e0       	ldi	r25, 0x02	; 2
    1824:	0e 94 ab 05 	call	0xb56	; 0xb56 <_ZN7Display9draw_ASCIEhhh>
    1828:	1a 5f       	subi	r17, 0xFA	; 250
    182a:	1c 33       	cpi	r17, 0x3C	; 60
    182c:	a1 f7       	brne	.-24     	; 0x1816 <_Z9menue_uhrv+0x76>
	buffersize=sprintf(buffer,"3:Timer");
    182e:	88 e0       	ldi	r24, 0x08	; 8
    1830:	e1 ee       	ldi	r30, 0xE1	; 225
    1832:	f1 e0       	ldi	r31, 0x01	; 1
    1834:	de 01       	movw	r26, r28
    1836:	11 96       	adiw	r26, 0x01	; 1
    1838:	01 90       	ld	r0, Z+
    183a:	0d 92       	st	X+, r0
    183c:	8a 95       	dec	r24
    183e:	e1 f7       	brne	.-8      	; 0x1838 <_Z9menue_uhrv+0x98>
    1840:	ad 2c       	mov	r10, r13
    1842:	be 2c       	mov	r11, r14
    1844:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,2*charhighte);}
    1846:	f5 01       	movw	r30, r10
    1848:	61 91       	ld	r22, Z+
    184a:	5f 01       	movw	r10, r30
    184c:	20 e1       	ldi	r18, 0x10	; 16
    184e:	41 2f       	mov	r20, r17
    1850:	8e ed       	ldi	r24, 0xDE	; 222
    1852:	92 e0       	ldi	r25, 0x02	; 2
    1854:	0e 94 ab 05 	call	0xb56	; 0xb56 <_ZN7Display9draw_ASCIEhhh>
    1858:	1a 5f       	subi	r17, 0xFA	; 250
    185a:	1a 32       	cpi	r17, 0x2A	; 42
    185c:	a1 f7       	brne	.-24     	; 0x1846 <_Z9menue_uhrv+0xa6>
	buffersize=sprintf(buffer,"4:Alarm");
    185e:	88 e0       	ldi	r24, 0x08	; 8
    1860:	e9 ee       	ldi	r30, 0xE9	; 233
    1862:	f1 e0       	ldi	r31, 0x01	; 1
    1864:	de 01       	movw	r26, r28
    1866:	11 96       	adiw	r26, 0x01	; 1
    1868:	01 90       	ld	r0, Z+
    186a:	0d 92       	st	X+, r0
    186c:	8a 95       	dec	r24
    186e:	e1 f7       	brne	.-8      	; 0x1868 <_Z9menue_uhrv+0xc8>
    1870:	ad 2c       	mov	r10, r13
    1872:	be 2c       	mov	r11, r14
    1874:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,3*charhighte);}
    1876:	f5 01       	movw	r30, r10
    1878:	61 91       	ld	r22, Z+
    187a:	5f 01       	movw	r10, r30
    187c:	28 e1       	ldi	r18, 0x18	; 24
    187e:	41 2f       	mov	r20, r17
    1880:	8e ed       	ldi	r24, 0xDE	; 222
    1882:	92 e0       	ldi	r25, 0x02	; 2
    1884:	0e 94 ab 05 	call	0xb56	; 0xb56 <_ZN7Display9draw_ASCIEhhh>
    1888:	1a 5f       	subi	r17, 0xFA	; 250
    188a:	1a 32       	cpi	r17, 0x2A	; 42
    188c:	a1 f7       	brne	.-24     	; 0x1876 <_Z9menue_uhrv+0xd6>
	//for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,4*charhighte);}
	//buffersize=sprintf(buffer,"6:HMC5883L Gain");
	//for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,5*charhighte);}
	//buffersize=sprintf(buffer,"7:Uhr einstellen");
	//for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,6*charhighte);}
}
    188e:	64 96       	adiw	r28, 0x14	; 20
    1890:	0f b6       	in	r0, 0x3f	; 63
    1892:	f8 94       	cli
    1894:	de bf       	out	0x3e, r29	; 62
    1896:	0f be       	out	0x3f, r0	; 63
    1898:	cd bf       	out	0x3d, r28	; 61
    189a:	df 91       	pop	r29
    189c:	cf 91       	pop	r28
    189e:	1f 91       	pop	r17
    18a0:	0f 91       	pop	r16
    18a2:	ef 90       	pop	r14
    18a4:	df 90       	pop	r13
    18a6:	bf 90       	pop	r11
    18a8:	af 90       	pop	r10
    18aa:	08 95       	ret

000018ac <_Z11uhranzeigenv>:

void uhranzeigen(){
    18ac:	df 92       	push	r13
    18ae:	ef 92       	push	r14
    18b0:	ff 92       	push	r15
    18b2:	0f 93       	push	r16
    18b4:	1f 93       	push	r17
    18b6:	cf 93       	push	r28
    18b8:	df 93       	push	r29
    18ba:	cd b7       	in	r28, 0x3d	; 61
    18bc:	de b7       	in	r29, 0x3e	; 62
    18be:	64 97       	sbiw	r28, 0x14	; 20
    18c0:	0f b6       	in	r0, 0x3f	; 63
    18c2:	f8 94       	cli
    18c4:	de bf       	out	0x3e, r29	; 62
    18c6:	0f be       	out	0x3f, r0	; 63
    18c8:	cd bf       	out	0x3d, r28	; 61
	uint8_t buffersize;
	char Buffer[20];
	oled.clearFrame();
    18ca:	8e ed       	ldi	r24, 0xDE	; 222
    18cc:	92 e0       	ldi	r25, 0x02	; 2
    18ce:	0e 94 c0 02 	call	0x580	; 0x580 <_ZN7Display10clearFrameEv>
	oled.analog(rtc.Stunden,rtc.Minuten,rtc.Sekunden);
    18d2:	20 91 21 07 	lds	r18, 0x0721
    18d6:	40 91 20 07 	lds	r20, 0x0720
    18da:	60 91 1f 07 	lds	r22, 0x071F
    18de:	8e ed       	ldi	r24, 0xDE	; 222
    18e0:	92 e0       	ldi	r25, 0x02	; 2
    18e2:	0e 94 6f 06 	call	0xcde	; 0xcde <_ZN7Display6analogEhhh>
    18e6:	0f 2e       	mov	r0, r31
    18e8:	ff e0       	ldi	r31, 0x0F	; 15
    18ea:	ef 2e       	mov	r14, r31
    18ec:	f7 e0       	ldi	r31, 0x07	; 7
    18ee:	ff 2e       	mov	r15, r31
    18f0:	f0 2d       	mov	r31, r0
    18f2:	11 e4       	ldi	r17, 0x41	; 65
	for(uint8_t i=0;i<bitsderrtc;i++){oled.draw_ASCI(rtc.msg_uhr[i],65+i*charsize,0*charhighte);}
    18f4:	f7 01       	movw	r30, r14
    18f6:	61 91       	ld	r22, Z+
    18f8:	7f 01       	movw	r14, r30
    18fa:	20 e0       	ldi	r18, 0x00	; 0
    18fc:	41 2f       	mov	r20, r17
    18fe:	8e ed       	ldi	r24, 0xDE	; 222
    1900:	92 e0       	ldi	r25, 0x02	; 2
    1902:	0e 94 ab 05 	call	0xb56	; 0xb56 <_ZN7Display9draw_ASCIEhhh>
    1906:	1a 5f       	subi	r17, 0xFA	; 250
    1908:	11 37       	cpi	r17, 0x71	; 113
    190a:	a1 f7       	brne	.-24     	; 0x18f4 <_Z11uhranzeigenv+0x48>
    190c:	0f 2e       	mov	r0, r31
    190e:	f7 e1       	ldi	r31, 0x17	; 23
    1910:	ef 2e       	mov	r14, r31
    1912:	f7 e0       	ldi	r31, 0x07	; 7
    1914:	ff 2e       	mov	r15, r31
    1916:	f0 2d       	mov	r31, r0
    1918:	11 e4       	ldi	r17, 0x41	; 65
	for(uint8_t i=0;i<bitsderrtc;i++){oled.draw_ASCI(rtc.msg_dat[i],65+i*charsize,7*charhighte);}
    191a:	f7 01       	movw	r30, r14
    191c:	61 91       	ld	r22, Z+
    191e:	7f 01       	movw	r14, r30
    1920:	28 e3       	ldi	r18, 0x38	; 56
    1922:	41 2f       	mov	r20, r17
    1924:	8e ed       	ldi	r24, 0xDE	; 222
    1926:	92 e0       	ldi	r25, 0x02	; 2
    1928:	0e 94 ab 05 	call	0xb56	; 0xb56 <_ZN7Display9draw_ASCIEhhh>
    192c:	1a 5f       	subi	r17, 0xFA	; 250
    192e:	11 37       	cpi	r17, 0x71	; 113
    1930:	a1 f7       	brne	.-24     	; 0x191a <_Z11uhranzeigenv+0x6e>
	buffersize=sprintf(Buffer,"%i%%",Batteriestatus());
    1932:	0e 94 3d 08 	call	0x107a	; 0x107a <_Z14Batteriestatusv>
    1936:	28 2f       	mov	r18, r24
    1938:	33 27       	eor	r19, r19
    193a:	27 fd       	sbrc	r18, 7
    193c:	30 95       	com	r19
    193e:	3f 93       	push	r19
    1940:	8f 93       	push	r24
    1942:	81 e3       	ldi	r24, 0x31	; 49
    1944:	91 e0       	ldi	r25, 0x01	; 1
    1946:	9f 93       	push	r25
    1948:	8f 93       	push	r24
    194a:	ce 01       	movw	r24, r28
    194c:	01 96       	adiw	r24, 0x01	; 1
    194e:	9f 93       	push	r25
    1950:	8f 93       	push	r24
    1952:	0e 94 b9 27 	call	0x4f72	; 0x4f72 <sprintf>
	for(uint8_t i=0;i<buffersize;i++){
    1956:	0f 90       	pop	r0
    1958:	0f 90       	pop	r0
    195a:	0f 90       	pop	r0
    195c:	0f 90       	pop	r0
    195e:	0f 90       	pop	r0
    1960:	0f 90       	pop	r0
    1962:	88 23       	and	r24, r24
    1964:	59 f1       	breq	.+86     	; 0x19bc <_Z11uhranzeigenv+0x110>
    1966:	8e 01       	movw	r16, r28
    1968:	0f 5f       	subi	r16, 0xFF	; 255
    196a:	1f 4f       	sbci	r17, 0xFF	; 255
    196c:	81 50       	subi	r24, 0x01	; 1
    196e:	68 94       	set
    1970:	ee 24       	eor	r14, r14
    1972:	e1 f8       	bld	r14, 1
    1974:	f1 2c       	mov	r15, r1
    1976:	ec 0e       	add	r14, r28
    1978:	fd 1e       	adc	r15, r29
    197a:	e8 0e       	add	r14, r24
    197c:	f1 1c       	adc	r15, r1
    197e:	0f 2e       	mov	r0, r31
    1980:	f9 e4       	ldi	r31, 0x49	; 73
    1982:	df 2e       	mov	r13, r31
    1984:	f0 2d       	mov	r31, r0
		if (Buffer[i]=='%' || Buffer[i]=='-')
    1986:	f8 01       	movw	r30, r16
    1988:	61 91       	ld	r22, Z+
    198a:	8f 01       	movw	r16, r30
    198c:	86 2f       	mov	r24, r22
    198e:	87 7f       	andi	r24, 0xF7	; 247
    1990:	85 32       	cpi	r24, 0x25	; 37
    1992:	39 f4       	brne	.+14     	; 0x19a2 <_Z11uhranzeigenv+0xf6>
		{
			oled.draw_ASCI(Buffer[i],73+i*numbersmalsize,3.5*charhighte);
    1994:	2c e1       	ldi	r18, 0x1C	; 28
    1996:	4d 2d       	mov	r20, r13
    1998:	8e ed       	ldi	r24, 0xDE	; 222
    199a:	92 e0       	ldi	r25, 0x02	; 2
    199c:	0e 94 ab 05 	call	0xb56	; 0xb56 <_ZN7Display9draw_ASCIEhhh>
    19a0:	08 c0       	rjmp	.+16     	; 0x19b2 <_Z11uhranzeigenv+0x106>
		}
		else{
			oled.draw_number16x16(Buffer[i]-'0',70+i*numbersmalsize,3*charhighte);
    19a2:	60 53       	subi	r22, 0x30	; 48
    19a4:	28 e1       	ldi	r18, 0x18	; 24
    19a6:	4d ef       	ldi	r20, 0xFD	; 253
    19a8:	4d 0d       	add	r20, r13
    19aa:	8e ed       	ldi	r24, 0xDE	; 222
    19ac:	92 e0       	ldi	r25, 0x02	; 2
    19ae:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <_ZN7Display16draw_number16x16Ehhh>
    19b2:	f0 e1       	ldi	r31, 0x10	; 16
    19b4:	df 0e       	add	r13, r31
	oled.clearFrame();
	oled.analog(rtc.Stunden,rtc.Minuten,rtc.Sekunden);
	for(uint8_t i=0;i<bitsderrtc;i++){oled.draw_ASCI(rtc.msg_uhr[i],65+i*charsize,0*charhighte);}
	for(uint8_t i=0;i<bitsderrtc;i++){oled.draw_ASCI(rtc.msg_dat[i],65+i*charsize,7*charhighte);}
	buffersize=sprintf(Buffer,"%i%%",Batteriestatus());
	for(uint8_t i=0;i<buffersize;i++){
    19b6:	0e 15       	cp	r16, r14
    19b8:	1f 05       	cpc	r17, r15
    19ba:	29 f7       	brne	.-54     	; 0x1986 <_Z11uhranzeigenv+0xda>
		}
		else{
			oled.draw_number16x16(Buffer[i]-'0',70+i*numbersmalsize,3*charhighte);
		}
	}
}
    19bc:	64 96       	adiw	r28, 0x14	; 20
    19be:	0f b6       	in	r0, 0x3f	; 63
    19c0:	f8 94       	cli
    19c2:	de bf       	out	0x3e, r29	; 62
    19c4:	0f be       	out	0x3f, r0	; 63
    19c6:	cd bf       	out	0x3d, r28	; 61
    19c8:	df 91       	pop	r29
    19ca:	cf 91       	pop	r28
    19cc:	1f 91       	pop	r17
    19ce:	0f 91       	pop	r16
    19d0:	ff 90       	pop	r15
    19d2:	ef 90       	pop	r14
    19d4:	df 90       	pop	r13
    19d6:	08 95       	ret

000019d8 <_Z12fahradschirmdd>:

void fahradschirm(double winkelgeschw, double angle){
    19d8:	8f 92       	push	r8
    19da:	9f 92       	push	r9
    19dc:	af 92       	push	r10
    19de:	bf 92       	push	r11
    19e0:	cf 92       	push	r12
    19e2:	df 92       	push	r13
    19e4:	ef 92       	push	r14
    19e6:	ff 92       	push	r15
    19e8:	0f 93       	push	r16
    19ea:	1f 93       	push	r17
    19ec:	cf 93       	push	r28
    19ee:	df 93       	push	r29
    19f0:	cd b7       	in	r28, 0x3d	; 61
    19f2:	de b7       	in	r29, 0x3e	; 62
    19f4:	2a 97       	sbiw	r28, 0x0a	; 10
    19f6:	0f b6       	in	r0, 0x3f	; 63
    19f8:	f8 94       	cli
    19fa:	de bf       	out	0x3e, r29	; 62
    19fc:	0f be       	out	0x3f, r0	; 63
    19fe:	cd bf       	out	0x3d, r28	; 61
    1a00:	16 2f       	mov	r17, r22
    1a02:	07 2f       	mov	r16, r23
    1a04:	f8 2e       	mov	r15, r24
    1a06:	e9 2e       	mov	r14, r25
    1a08:	a2 2e       	mov	r10, r18
    1a0a:	b3 2e       	mov	r11, r19
    1a0c:	c4 2e       	mov	r12, r20
    1a0e:	d5 2e       	mov	r13, r21
	char buffer[10];
	uint8_t buffersize=0;
	oled.clearFrame();
    1a10:	8e ed       	ldi	r24, 0xDE	; 222
    1a12:	92 e0       	ldi	r25, 0x02	; 2
    1a14:	0e 94 c0 02 	call	0x580	; 0x580 <_ZN7Display10clearFrameEv>
	header(0);
    1a18:	80 e0       	ldi	r24, 0x00	; 0
    1a1a:	0e 94 1a 09 	call	0x1234	; 0x1234 <_Z6headerh>
	bottom(0);
    1a1e:	80 e0       	ldi	r24, 0x00	; 0
    1a20:	0e 94 84 09 	call	0x1308	; 0x1308 <_Z6bottomh>
	//Ausgabe der Geschwidigkeit
	buffersize=sprintf(buffer,"%3.1f",winkelgeschw);
    1a24:	ef 92       	push	r14
    1a26:	ff 92       	push	r15
    1a28:	0f 93       	push	r16
    1a2a:	1f 93       	push	r17
    1a2c:	81 ef       	ldi	r24, 0xF1	; 241
    1a2e:	91 e0       	ldi	r25, 0x01	; 1
    1a30:	9f 93       	push	r25
    1a32:	8f 93       	push	r24
    1a34:	ce 01       	movw	r24, r28
    1a36:	01 96       	adiw	r24, 0x01	; 1
    1a38:	9f 93       	push	r25
    1a3a:	8f 93       	push	r24
    1a3c:	0e 94 b9 27 	call	0x4f72	; 0x4f72 <sprintf>
	for(uint8_t i=((SSD1306_WIDTH/numbersmalsize)-buffersize-1);i<((SSD1306_WIDTH/numbersmalsize)-1);i++){
    1a40:	27 e0       	ldi	r18, 0x07	; 7
    1a42:	f2 2e       	mov	r15, r18
    1a44:	f8 1a       	sub	r15, r24
    1a46:	0f b6       	in	r0, 0x3f	; 63
    1a48:	f8 94       	cli
    1a4a:	de bf       	out	0x3e, r29	; 62
    1a4c:	0f be       	out	0x3f, r0	; 63
    1a4e:	cd bf       	out	0x3d, r28	; 61
    1a50:	36 e0       	ldi	r19, 0x06	; 6
    1a52:	3f 15       	cp	r19, r15
    1a54:	38 f1       	brcs	.+78     	; 0x1aa4 <_Z12fahradschirmdd+0xcc>
    1a56:	ef 2c       	mov	r14, r15
    1a58:	ee 0c       	add	r14, r14
    1a5a:	ee 0c       	add	r14, r14
    1a5c:	ee 0c       	add	r14, r14
    1a5e:	ee 0c       	add	r14, r14
		if(buffer[i-((SSD1306_WIDTH/numbersmalsize)-buffersize-1)]=='.'){
    1a60:	8c 01       	movw	r16, r24
    1a62:	11 27       	eor	r17, r17
    1a64:	e1 e0       	ldi	r30, 0x01	; 1
    1a66:	f0 e0       	ldi	r31, 0x00	; 0
    1a68:	ec 0f       	add	r30, r28
    1a6a:	fd 1f       	adc	r31, r29
    1a6c:	ef 0d       	add	r30, r15
    1a6e:	f1 1d       	adc	r31, r1
    1a70:	e0 0f       	add	r30, r16
    1a72:	f1 1f       	adc	r31, r17
    1a74:	37 97       	sbiw	r30, 0x07	; 7
    1a76:	60 81       	ld	r22, Z
    1a78:	6e 32       	cpi	r22, 0x2E	; 46
    1a7a:	39 f4       	brne	.+14     	; 0x1a8a <_Z12fahradschirmdd+0xb2>
			oled.draw_ASCI(buffer[i-((SSD1306_WIDTH/numbersmalsize)-buffersize-1)],i*numbersmalsize,4*charhighte);
    1a7c:	20 e2       	ldi	r18, 0x20	; 32
    1a7e:	4e 2d       	mov	r20, r14
    1a80:	8e ed       	ldi	r24, 0xDE	; 222
    1a82:	92 e0       	ldi	r25, 0x02	; 2
    1a84:	0e 94 ab 05 	call	0xb56	; 0xb56 <_ZN7Display9draw_ASCIEhhh>
    1a88:	07 c0       	rjmp	.+14     	; 0x1a98 <_Z12fahradschirmdd+0xc0>
		}
		else{
			oled.draw_number16x16(buffer[i-((SSD1306_WIDTH/numbersmalsize)-buffersize-1)]-'0',i*numbersmalsize,3*charhighte);
    1a8a:	60 53       	subi	r22, 0x30	; 48
    1a8c:	28 e1       	ldi	r18, 0x18	; 24
    1a8e:	4e 2d       	mov	r20, r14
    1a90:	8e ed       	ldi	r24, 0xDE	; 222
    1a92:	92 e0       	ldi	r25, 0x02	; 2
    1a94:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <_ZN7Display16draw_number16x16Ehhh>
	oled.clearFrame();
	header(0);
	bottom(0);
	//Ausgabe der Geschwidigkeit
	buffersize=sprintf(buffer,"%3.1f",winkelgeschw);
	for(uint8_t i=((SSD1306_WIDTH/numbersmalsize)-buffersize-1);i<((SSD1306_WIDTH/numbersmalsize)-1);i++){
    1a98:	f3 94       	inc	r15
    1a9a:	80 e1       	ldi	r24, 0x10	; 16
    1a9c:	e8 0e       	add	r14, r24
    1a9e:	97 e0       	ldi	r25, 0x07	; 7
    1aa0:	f9 12       	cpse	r15, r25
    1aa2:	e0 cf       	rjmp	.-64     	; 0x1a64 <_Z12fahradschirmdd+0x8c>
		}
		else{
			oled.draw_number16x16(buffer[i-((SSD1306_WIDTH/numbersmalsize)-buffersize-1)]-'0',i*numbersmalsize,3*charhighte);
		}
	}
	oled.draw_ASCI('k',((SSD1306_WIDTH/charsize-2)*charsize),3*charhighte);
    1aa4:	28 e1       	ldi	r18, 0x18	; 24
    1aa6:	42 e7       	ldi	r20, 0x72	; 114
    1aa8:	6b e6       	ldi	r22, 0x6B	; 107
    1aaa:	8e ed       	ldi	r24, 0xDE	; 222
    1aac:	92 e0       	ldi	r25, 0x02	; 2
    1aae:	0e 94 ab 05 	call	0xb56	; 0xb56 <_ZN7Display9draw_ASCIEhhh>
	oled.draw_ASCI('m',((SSD1306_WIDTH/charsize-1)*charsize),3*charhighte);
    1ab2:	28 e1       	ldi	r18, 0x18	; 24
    1ab4:	48 e7       	ldi	r20, 0x78	; 120
    1ab6:	6d e6       	ldi	r22, 0x6D	; 109
    1ab8:	8e ed       	ldi	r24, 0xDE	; 222
    1aba:	92 e0       	ldi	r25, 0x02	; 2
    1abc:	0e 94 ab 05 	call	0xb56	; 0xb56 <_ZN7Display9draw_ASCIEhhh>
	oled.draw_ASCI('h',((SSD1306_WIDTH/charsize-2)*charsize),4*charhighte);
    1ac0:	20 e2       	ldi	r18, 0x20	; 32
    1ac2:	42 e7       	ldi	r20, 0x72	; 114
    1ac4:	68 e6       	ldi	r22, 0x68	; 104
    1ac6:	8e ed       	ldi	r24, 0xDE	; 222
    1ac8:	92 e0       	ldi	r25, 0x02	; 2
    1aca:	0e 94 ab 05 	call	0xb56	; 0xb56 <_ZN7Display9draw_ASCIEhhh>
	//winkelausgabe
	buffersize=sprintf(buffer,"%3.1f",angle);
    1ace:	df 92       	push	r13
    1ad0:	cf 92       	push	r12
    1ad2:	bf 92       	push	r11
    1ad4:	af 92       	push	r10
    1ad6:	81 ef       	ldi	r24, 0xF1	; 241
    1ad8:	91 e0       	ldi	r25, 0x01	; 1
    1ada:	9f 93       	push	r25
    1adc:	8f 93       	push	r24
    1ade:	ce 01       	movw	r24, r28
    1ae0:	01 96       	adiw	r24, 0x01	; 1
    1ae2:	9f 93       	push	r25
    1ae4:	8f 93       	push	r24
    1ae6:	0e 94 b9 27 	call	0x4f72	; 0x4f72 <sprintf>
    1aea:	88 2e       	mov	r8, r24
	for (uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,7*charhighte);}
    1aec:	0f b6       	in	r0, 0x3f	; 63
    1aee:	f8 94       	cli
    1af0:	de bf       	out	0x3e, r29	; 62
    1af2:	0f be       	out	0x3f, r0	; 63
    1af4:	cd bf       	out	0x3d, r28	; 61
    1af6:	88 23       	and	r24, r24
    1af8:	a9 f0       	breq	.+42     	; 0x1b24 <_Z12fahradschirmdd+0x14c>
    1afa:	9e 01       	movw	r18, r28
    1afc:	2f 5f       	subi	r18, 0xFF	; 255
    1afe:	3f 4f       	sbci	r19, 0xFF	; 255
    1b00:	79 01       	movw	r14, r18
    1b02:	89 01       	movw	r16, r18
    1b04:	91 2c       	mov	r9, r1
    1b06:	f8 01       	movw	r30, r16
    1b08:	61 91       	ld	r22, Z+
    1b0a:	8f 01       	movw	r16, r30
    1b0c:	28 e3       	ldi	r18, 0x38	; 56
    1b0e:	49 2d       	mov	r20, r9
    1b10:	8e ed       	ldi	r24, 0xDE	; 222
    1b12:	92 e0       	ldi	r25, 0x02	; 2
    1b14:	0e 94 ab 05 	call	0xb56	; 0xb56 <_ZN7Display9draw_ASCIEhhh>
    1b18:	f6 e0       	ldi	r31, 0x06	; 6
    1b1a:	9f 0e       	add	r9, r31
    1b1c:	90 2f       	mov	r25, r16
    1b1e:	9e 19       	sub	r25, r14
    1b20:	98 15       	cp	r25, r8
    1b22:	88 f3       	brcs	.-30     	; 0x1b06 <_Z12fahradschirmdd+0x12e>
	anzeige_kleinenadel(31,31,angle);
    1b24:	2a 2d       	mov	r18, r10
    1b26:	3b 2d       	mov	r19, r11
    1b28:	4c 2d       	mov	r20, r12
    1b2a:	5d 2d       	mov	r21, r13
    1b2c:	6f e1       	ldi	r22, 0x1F	; 31
    1b2e:	8f e1       	ldi	r24, 0x1F	; 31
    1b30:	0e 94 76 0a 	call	0x14ec	; 0x14ec <_Z19anzeige_kleinenadelhhf>
}
    1b34:	2a 96       	adiw	r28, 0x0a	; 10
    1b36:	0f b6       	in	r0, 0x3f	; 63
    1b38:	f8 94       	cli
    1b3a:	de bf       	out	0x3e, r29	; 62
    1b3c:	0f be       	out	0x3f, r0	; 63
    1b3e:	cd bf       	out	0x3d, r28	; 61
    1b40:	df 91       	pop	r29
    1b42:	cf 91       	pop	r28
    1b44:	1f 91       	pop	r17
    1b46:	0f 91       	pop	r16
    1b48:	ff 90       	pop	r15
    1b4a:	ef 90       	pop	r14
    1b4c:	df 90       	pop	r13
    1b4e:	cf 90       	pop	r12
    1b50:	bf 90       	pop	r11
    1b52:	af 90       	pop	r10
    1b54:	9f 90       	pop	r9
    1b56:	8f 90       	pop	r8
    1b58:	08 95       	ret

00001b5a <_Z14Gaineinstellenv>:

void Gaineinstellen(){
    1b5a:	cf 92       	push	r12
    1b5c:	df 92       	push	r13
    1b5e:	ef 92       	push	r14
    1b60:	ff 92       	push	r15
    1b62:	0f 93       	push	r16
    1b64:	1f 93       	push	r17
    1b66:	cf 93       	push	r28
    1b68:	df 93       	push	r29
    1b6a:	cd b7       	in	r28, 0x3d	; 61
    1b6c:	de b7       	in	r29, 0x3e	; 62
    1b6e:	64 97       	sbiw	r28, 0x14	; 20
    1b70:	0f b6       	in	r0, 0x3f	; 63
    1b72:	f8 94       	cli
    1b74:	de bf       	out	0x3e, r29	; 62
    1b76:	0f be       	out	0x3f, r0	; 63
    1b78:	cd bf       	out	0x3d, r28	; 61
	char buffer[20];
	uint8_t buffersize=0;

	oled.clearFrame();
    1b7a:	8e ed       	ldi	r24, 0xDE	; 222
    1b7c:	92 e0       	ldi	r25, 0x02	; 2
    1b7e:	0e 94 c0 02 	call	0x580	; 0x580 <_ZN7Display10clearFrameEv>
	buffersize=sprintf(buffer,"1: 1370");
    1b82:	88 e0       	ldi	r24, 0x08	; 8
    1b84:	e7 ef       	ldi	r30, 0xF7	; 247
    1b86:	f1 e0       	ldi	r31, 0x01	; 1
    1b88:	8e 01       	movw	r16, r28
    1b8a:	0f 5f       	subi	r16, 0xFF	; 255
    1b8c:	1f 4f       	sbci	r17, 0xFF	; 255
    1b8e:	d8 01       	movw	r26, r16
    1b90:	01 90       	ld	r0, Z+
    1b92:	0d 92       	st	X+, r0
    1b94:	8a 95       	dec	r24
    1b96:	e1 f7       	brne	.-8      	; 0x1b90 <_Z14Gaineinstellenv+0x36>
    1b98:	e0 2e       	mov	r14, r16
    1b9a:	f1 2e       	mov	r15, r17
    1b9c:	68 01       	movw	r12, r16
    1b9e:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,0*charhighte);}
    1ba0:	f6 01       	movw	r30, r12
    1ba2:	61 91       	ld	r22, Z+
    1ba4:	6f 01       	movw	r12, r30
    1ba6:	20 e0       	ldi	r18, 0x00	; 0
    1ba8:	41 2f       	mov	r20, r17
    1baa:	8e ed       	ldi	r24, 0xDE	; 222
    1bac:	92 e0       	ldi	r25, 0x02	; 2
    1bae:	0e 94 ab 05 	call	0xb56	; 0xb56 <_ZN7Display9draw_ASCIEhhh>
    1bb2:	1a 5f       	subi	r17, 0xFA	; 250
    1bb4:	1a 32       	cpi	r17, 0x2A	; 42
    1bb6:	a1 f7       	brne	.-24     	; 0x1ba0 <_Z14Gaineinstellenv+0x46>
	buffersize=sprintf(buffer,"2: 1090");
    1bb8:	88 e0       	ldi	r24, 0x08	; 8
    1bba:	ef ef       	ldi	r30, 0xFF	; 255
    1bbc:	f1 e0       	ldi	r31, 0x01	; 1
    1bbe:	de 01       	movw	r26, r28
    1bc0:	11 96       	adiw	r26, 0x01	; 1
    1bc2:	01 90       	ld	r0, Z+
    1bc4:	0d 92       	st	X+, r0
    1bc6:	8a 95       	dec	r24
    1bc8:	e1 f7       	brne	.-8      	; 0x1bc2 <_Z14Gaineinstellenv+0x68>
    1bca:	ce 2c       	mov	r12, r14
    1bcc:	df 2c       	mov	r13, r15
    1bce:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,1*charhighte);}
    1bd0:	f6 01       	movw	r30, r12
    1bd2:	61 91       	ld	r22, Z+
    1bd4:	6f 01       	movw	r12, r30
    1bd6:	28 e0       	ldi	r18, 0x08	; 8
    1bd8:	41 2f       	mov	r20, r17
    1bda:	8e ed       	ldi	r24, 0xDE	; 222
    1bdc:	92 e0       	ldi	r25, 0x02	; 2
    1bde:	0e 94 ab 05 	call	0xb56	; 0xb56 <_ZN7Display9draw_ASCIEhhh>
    1be2:	1a 5f       	subi	r17, 0xFA	; 250
    1be4:	1a 32       	cpi	r17, 0x2A	; 42
    1be6:	a1 f7       	brne	.-24     	; 0x1bd0 <_Z14Gaineinstellenv+0x76>
	buffersize=sprintf(buffer,"3:  820");
    1be8:	88 e0       	ldi	r24, 0x08	; 8
    1bea:	e7 e0       	ldi	r30, 0x07	; 7
    1bec:	f2 e0       	ldi	r31, 0x02	; 2
    1bee:	de 01       	movw	r26, r28
    1bf0:	11 96       	adiw	r26, 0x01	; 1
    1bf2:	01 90       	ld	r0, Z+
    1bf4:	0d 92       	st	X+, r0
    1bf6:	8a 95       	dec	r24
    1bf8:	e1 f7       	brne	.-8      	; 0x1bf2 <_Z14Gaineinstellenv+0x98>
    1bfa:	ce 2c       	mov	r12, r14
    1bfc:	df 2c       	mov	r13, r15
    1bfe:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,2*charhighte);}
    1c00:	f6 01       	movw	r30, r12
    1c02:	61 91       	ld	r22, Z+
    1c04:	6f 01       	movw	r12, r30
    1c06:	20 e1       	ldi	r18, 0x10	; 16
    1c08:	41 2f       	mov	r20, r17
    1c0a:	8e ed       	ldi	r24, 0xDE	; 222
    1c0c:	92 e0       	ldi	r25, 0x02	; 2
    1c0e:	0e 94 ab 05 	call	0xb56	; 0xb56 <_ZN7Display9draw_ASCIEhhh>
    1c12:	1a 5f       	subi	r17, 0xFA	; 250
    1c14:	1a 32       	cpi	r17, 0x2A	; 42
    1c16:	a1 f7       	brne	.-24     	; 0x1c00 <_Z14Gaineinstellenv+0xa6>
	buffersize=sprintf(buffer,"4:  660");
    1c18:	88 e0       	ldi	r24, 0x08	; 8
    1c1a:	ef e0       	ldi	r30, 0x0F	; 15
    1c1c:	f2 e0       	ldi	r31, 0x02	; 2
    1c1e:	de 01       	movw	r26, r28
    1c20:	11 96       	adiw	r26, 0x01	; 1
    1c22:	01 90       	ld	r0, Z+
    1c24:	0d 92       	st	X+, r0
    1c26:	8a 95       	dec	r24
    1c28:	e1 f7       	brne	.-8      	; 0x1c22 <_Z14Gaineinstellenv+0xc8>
    1c2a:	ce 2c       	mov	r12, r14
    1c2c:	df 2c       	mov	r13, r15
    1c2e:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,3*charhighte);}
    1c30:	f6 01       	movw	r30, r12
    1c32:	61 91       	ld	r22, Z+
    1c34:	6f 01       	movw	r12, r30
    1c36:	28 e1       	ldi	r18, 0x18	; 24
    1c38:	41 2f       	mov	r20, r17
    1c3a:	8e ed       	ldi	r24, 0xDE	; 222
    1c3c:	92 e0       	ldi	r25, 0x02	; 2
    1c3e:	0e 94 ab 05 	call	0xb56	; 0xb56 <_ZN7Display9draw_ASCIEhhh>
    1c42:	1a 5f       	subi	r17, 0xFA	; 250
    1c44:	1a 32       	cpi	r17, 0x2A	; 42
    1c46:	a1 f7       	brne	.-24     	; 0x1c30 <_Z14Gaineinstellenv+0xd6>
	buffersize=sprintf(buffer,"5:  440");
    1c48:	88 e0       	ldi	r24, 0x08	; 8
    1c4a:	e7 e1       	ldi	r30, 0x17	; 23
    1c4c:	f2 e0       	ldi	r31, 0x02	; 2
    1c4e:	de 01       	movw	r26, r28
    1c50:	11 96       	adiw	r26, 0x01	; 1
    1c52:	01 90       	ld	r0, Z+
    1c54:	0d 92       	st	X+, r0
    1c56:	8a 95       	dec	r24
    1c58:	e1 f7       	brne	.-8      	; 0x1c52 <_Z14Gaineinstellenv+0xf8>
    1c5a:	ce 2c       	mov	r12, r14
    1c5c:	df 2c       	mov	r13, r15
    1c5e:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,4*charhighte);}
    1c60:	f6 01       	movw	r30, r12
    1c62:	61 91       	ld	r22, Z+
    1c64:	6f 01       	movw	r12, r30
    1c66:	20 e2       	ldi	r18, 0x20	; 32
    1c68:	41 2f       	mov	r20, r17
    1c6a:	8e ed       	ldi	r24, 0xDE	; 222
    1c6c:	92 e0       	ldi	r25, 0x02	; 2
    1c6e:	0e 94 ab 05 	call	0xb56	; 0xb56 <_ZN7Display9draw_ASCIEhhh>
    1c72:	1a 5f       	subi	r17, 0xFA	; 250
    1c74:	1a 32       	cpi	r17, 0x2A	; 42
    1c76:	a1 f7       	brne	.-24     	; 0x1c60 <_Z14Gaineinstellenv+0x106>
	buffersize=sprintf(buffer,"6:  390");
    1c78:	88 e0       	ldi	r24, 0x08	; 8
    1c7a:	ef e1       	ldi	r30, 0x1F	; 31
    1c7c:	f2 e0       	ldi	r31, 0x02	; 2
    1c7e:	de 01       	movw	r26, r28
    1c80:	11 96       	adiw	r26, 0x01	; 1
    1c82:	01 90       	ld	r0, Z+
    1c84:	0d 92       	st	X+, r0
    1c86:	8a 95       	dec	r24
    1c88:	e1 f7       	brne	.-8      	; 0x1c82 <_Z14Gaineinstellenv+0x128>
    1c8a:	ce 2c       	mov	r12, r14
    1c8c:	df 2c       	mov	r13, r15
    1c8e:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,5*charhighte);}
    1c90:	f6 01       	movw	r30, r12
    1c92:	61 91       	ld	r22, Z+
    1c94:	6f 01       	movw	r12, r30
    1c96:	28 e2       	ldi	r18, 0x28	; 40
    1c98:	41 2f       	mov	r20, r17
    1c9a:	8e ed       	ldi	r24, 0xDE	; 222
    1c9c:	92 e0       	ldi	r25, 0x02	; 2
    1c9e:	0e 94 ab 05 	call	0xb56	; 0xb56 <_ZN7Display9draw_ASCIEhhh>
    1ca2:	1a 5f       	subi	r17, 0xFA	; 250
    1ca4:	1a 32       	cpi	r17, 0x2A	; 42
    1ca6:	a1 f7       	brne	.-24     	; 0x1c90 <_Z14Gaineinstellenv+0x136>
	buffersize=sprintf(buffer,"7:  330");
    1ca8:	88 e0       	ldi	r24, 0x08	; 8
    1caa:	e7 e2       	ldi	r30, 0x27	; 39
    1cac:	f2 e0       	ldi	r31, 0x02	; 2
    1cae:	de 01       	movw	r26, r28
    1cb0:	11 96       	adiw	r26, 0x01	; 1
    1cb2:	01 90       	ld	r0, Z+
    1cb4:	0d 92       	st	X+, r0
    1cb6:	8a 95       	dec	r24
    1cb8:	e1 f7       	brne	.-8      	; 0x1cb2 <_Z14Gaineinstellenv+0x158>
    1cba:	ce 2c       	mov	r12, r14
    1cbc:	df 2c       	mov	r13, r15
    1cbe:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,6*charhighte);}
    1cc0:	f6 01       	movw	r30, r12
    1cc2:	61 91       	ld	r22, Z+
    1cc4:	6f 01       	movw	r12, r30
    1cc6:	20 e3       	ldi	r18, 0x30	; 48
    1cc8:	41 2f       	mov	r20, r17
    1cca:	8e ed       	ldi	r24, 0xDE	; 222
    1ccc:	92 e0       	ldi	r25, 0x02	; 2
    1cce:	0e 94 ab 05 	call	0xb56	; 0xb56 <_ZN7Display9draw_ASCIEhhh>
    1cd2:	1a 5f       	subi	r17, 0xFA	; 250
    1cd4:	1a 32       	cpi	r17, 0x2A	; 42
    1cd6:	a1 f7       	brne	.-24     	; 0x1cc0 <_Z14Gaineinstellenv+0x166>
	buffersize=sprintf(buffer,"8:  230");
    1cd8:	88 e0       	ldi	r24, 0x08	; 8
    1cda:	ef e2       	ldi	r30, 0x2F	; 47
    1cdc:	f2 e0       	ldi	r31, 0x02	; 2
    1cde:	de 01       	movw	r26, r28
    1ce0:	11 96       	adiw	r26, 0x01	; 1
    1ce2:	01 90       	ld	r0, Z+
    1ce4:	0d 92       	st	X+, r0
    1ce6:	8a 95       	dec	r24
    1ce8:	e1 f7       	brne	.-8      	; 0x1ce2 <_Z14Gaineinstellenv+0x188>
    1cea:	ce 2c       	mov	r12, r14
    1cec:	df 2c       	mov	r13, r15
    1cee:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,7*charhighte);}
    1cf0:	f6 01       	movw	r30, r12
    1cf2:	61 91       	ld	r22, Z+
    1cf4:	6f 01       	movw	r12, r30
    1cf6:	28 e3       	ldi	r18, 0x38	; 56
    1cf8:	41 2f       	mov	r20, r17
    1cfa:	8e ed       	ldi	r24, 0xDE	; 222
    1cfc:	92 e0       	ldi	r25, 0x02	; 2
    1cfe:	0e 94 ab 05 	call	0xb56	; 0xb56 <_ZN7Display9draw_ASCIEhhh>
    1d02:	1a 5f       	subi	r17, 0xFA	; 250
    1d04:	1a 32       	cpi	r17, 0x2A	; 42
    1d06:	a1 f7       	brne	.-24     	; 0x1cf0 <_Z14Gaineinstellenv+0x196>
}
    1d08:	64 96       	adiw	r28, 0x14	; 20
    1d0a:	0f b6       	in	r0, 0x3f	; 63
    1d0c:	f8 94       	cli
    1d0e:	de bf       	out	0x3e, r29	; 62
    1d10:	0f be       	out	0x3f, r0	; 63
    1d12:	cd bf       	out	0x3d, r28	; 61
    1d14:	df 91       	pop	r29
    1d16:	cf 91       	pop	r28
    1d18:	1f 91       	pop	r17
    1d1a:	0f 91       	pop	r16
    1d1c:	ff 90       	pop	r15
    1d1e:	ef 90       	pop	r14
    1d20:	df 90       	pop	r13
    1d22:	cf 90       	pop	r12
    1d24:	08 95       	ret

00001d26 <_Z15anzeige_kompassd>:

void anzeige_kompass(double winkel){
    1d26:	9f 92       	push	r9
    1d28:	af 92       	push	r10
    1d2a:	bf 92       	push	r11
    1d2c:	cf 92       	push	r12
    1d2e:	df 92       	push	r13
    1d30:	ef 92       	push	r14
    1d32:	ff 92       	push	r15
    1d34:	0f 93       	push	r16
    1d36:	1f 93       	push	r17
    1d38:	cf 93       	push	r28
    1d3a:	df 93       	push	r29
    1d3c:	cd b7       	in	r28, 0x3d	; 61
    1d3e:	de b7       	in	r29, 0x3e	; 62
    1d40:	64 97       	sbiw	r28, 0x14	; 20
    1d42:	0f b6       	in	r0, 0x3f	; 63
    1d44:	f8 94       	cli
    1d46:	de bf       	out	0x3e, r29	; 62
    1d48:	0f be       	out	0x3f, r0	; 63
    1d4a:	cd bf       	out	0x3d, r28	; 61
    1d4c:	a6 2e       	mov	r10, r22
    1d4e:	b7 2e       	mov	r11, r23
    1d50:	c8 2e       	mov	r12, r24
    1d52:	d9 2e       	mov	r13, r25
	oled.clearFrame();
    1d54:	8e ed       	ldi	r24, 0xDE	; 222
    1d56:	92 e0       	ldi	r25, 0x02	; 2
    1d58:	0e 94 c0 02 	call	0x580	; 0x580 <_ZN7Display10clearFrameEv>
    1d5c:	0f 2e       	mov	r0, r31
    1d5e:	ff e0       	ldi	r31, 0x0F	; 15
    1d60:	ef 2e       	mov	r14, r31
    1d62:	f7 e0       	ldi	r31, 0x07	; 7
    1d64:	ff 2e       	mov	r15, r31
    1d66:	f0 2d       	mov	r31, r0
    1d68:	11 e4       	ldi	r17, 0x41	; 65
	char buffer[20];
	uint8_t buffersize=0;
	//Uhrzeit
	for(uint8_t i=0;i<bitsderrtc;i++){oled.draw_ASCI(rtc.msg_uhr[i],65+i*charsize,0*charhighte);}
    1d6a:	f7 01       	movw	r30, r14
    1d6c:	61 91       	ld	r22, Z+
    1d6e:	7f 01       	movw	r14, r30
    1d70:	20 e0       	ldi	r18, 0x00	; 0
    1d72:	41 2f       	mov	r20, r17
    1d74:	8e ed       	ldi	r24, 0xDE	; 222
    1d76:	92 e0       	ldi	r25, 0x02	; 2
    1d78:	0e 94 ab 05 	call	0xb56	; 0xb56 <_ZN7Display9draw_ASCIEhhh>
    1d7c:	1a 5f       	subi	r17, 0xFA	; 250
    1d7e:	11 37       	cpi	r17, 0x71	; 113
    1d80:	a1 f7       	brne	.-24     	; 0x1d6a <_Z15anzeige_kompassd+0x44>
    1d82:	0f 2e       	mov	r0, r31
    1d84:	f7 e1       	ldi	r31, 0x17	; 23
    1d86:	ef 2e       	mov	r14, r31
    1d88:	f7 e0       	ldi	r31, 0x07	; 7
    1d8a:	ff 2e       	mov	r15, r31
    1d8c:	f0 2d       	mov	r31, r0
    1d8e:	11 e4       	ldi	r17, 0x41	; 65
	for(uint8_t i=0;i<bitsderrtc;i++){oled.draw_ASCI(rtc.msg_dat[i],65+i*charsize,7*charhighte);}
    1d90:	f7 01       	movw	r30, r14
    1d92:	61 91       	ld	r22, Z+
    1d94:	7f 01       	movw	r14, r30
    1d96:	28 e3       	ldi	r18, 0x38	; 56
    1d98:	41 2f       	mov	r20, r17
    1d9a:	8e ed       	ldi	r24, 0xDE	; 222
    1d9c:	92 e0       	ldi	r25, 0x02	; 2
    1d9e:	0e 94 ab 05 	call	0xb56	; 0xb56 <_ZN7Display9draw_ASCIEhhh>
    1da2:	1a 5f       	subi	r17, 0xFA	; 250
    1da4:	11 37       	cpi	r17, 0x71	; 113
    1da6:	a1 f7       	brne	.-24     	; 0x1d90 <_Z15anzeige_kompassd+0x6a>
	//winkel als Zahl ausgeben
	buffersize=sprintf(buffer,"angle=%.0f",winkel);
    1da8:	df 92       	push	r13
    1daa:	cf 92       	push	r12
    1dac:	bf 92       	push	r11
    1dae:	af 92       	push	r10
    1db0:	87 e3       	ldi	r24, 0x37	; 55
    1db2:	92 e0       	ldi	r25, 0x02	; 2
    1db4:	9f 93       	push	r25
    1db6:	8f 93       	push	r24
    1db8:	ce 01       	movw	r24, r28
    1dba:	01 96       	adiw	r24, 0x01	; 1
    1dbc:	9f 93       	push	r25
    1dbe:	8f 93       	push	r24
    1dc0:	0e 94 b9 27 	call	0x4f72	; 0x4f72 <sprintf>
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],65+i*charsize,6*charhighte);}
    1dc4:	0f b6       	in	r0, 0x3f	; 63
    1dc6:	f8 94       	cli
    1dc8:	de bf       	out	0x3e, r29	; 62
    1dca:	0f be       	out	0x3f, r0	; 63
    1dcc:	cd bf       	out	0x3d, r28	; 61
    1dce:	88 23       	and	r24, r24
    1dd0:	f1 f0       	breq	.+60     	; 0x1e0e <_Z15anzeige_kompassd+0xe8>
    1dd2:	8e 01       	movw	r16, r28
    1dd4:	0f 5f       	subi	r16, 0xFF	; 255
    1dd6:	1f 4f       	sbci	r17, 0xFF	; 255
    1dd8:	81 50       	subi	r24, 0x01	; 1
    1dda:	68 94       	set
    1ddc:	ee 24       	eor	r14, r14
    1dde:	e1 f8       	bld	r14, 1
    1de0:	f1 2c       	mov	r15, r1
    1de2:	ec 0e       	add	r14, r28
    1de4:	fd 1e       	adc	r15, r29
    1de6:	e8 0e       	add	r14, r24
    1de8:	f1 1c       	adc	r15, r1
    1dea:	0f 2e       	mov	r0, r31
    1dec:	f1 e4       	ldi	r31, 0x41	; 65
    1dee:	9f 2e       	mov	r9, r31
    1df0:	f0 2d       	mov	r31, r0
    1df2:	f8 01       	movw	r30, r16
    1df4:	61 91       	ld	r22, Z+
    1df6:	8f 01       	movw	r16, r30
    1df8:	20 e3       	ldi	r18, 0x30	; 48
    1dfa:	49 2d       	mov	r20, r9
    1dfc:	8e ed       	ldi	r24, 0xDE	; 222
    1dfe:	92 e0       	ldi	r25, 0x02	; 2
    1e00:	0e 94 ab 05 	call	0xb56	; 0xb56 <_ZN7Display9draw_ASCIEhhh>
    1e04:	f6 e0       	ldi	r31, 0x06	; 6
    1e06:	9f 0e       	add	r9, r31
    1e08:	0e 15       	cp	r16, r14
    1e0a:	1f 05       	cpc	r17, r15
    1e0c:	91 f7       	brne	.-28     	; 0x1df2 <_Z15anzeige_kompassd+0xcc>
	//dreieck als Zeiger
	anzeige_nadel(31,31,winkel);
    1e0e:	2a 2d       	mov	r18, r10
    1e10:	3b 2d       	mov	r19, r11
    1e12:	4c 2d       	mov	r20, r12
    1e14:	5d 2d       	mov	r21, r13
    1e16:	6f e1       	ldi	r22, 0x1F	; 31
    1e18:	8f e1       	ldi	r24, 0x1F	; 31
    1e1a:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <_Z13anzeige_nadelhhf>
	//Richtung ausgeben
	anzeige_richtung(winkel);	
    1e1e:	6a 2d       	mov	r22, r10
    1e20:	7b 2d       	mov	r23, r11
    1e22:	8c 2d       	mov	r24, r12
    1e24:	9d 2d       	mov	r25, r13
    1e26:	0e 94 9a 09 	call	0x1334	; 0x1334 <_Z16anzeige_richtungf>
}
    1e2a:	64 96       	adiw	r28, 0x14	; 20
    1e2c:	0f b6       	in	r0, 0x3f	; 63
    1e2e:	f8 94       	cli
    1e30:	de bf       	out	0x3e, r29	; 62
    1e32:	0f be       	out	0x3f, r0	; 63
    1e34:	cd bf       	out	0x3d, r28	; 61
    1e36:	df 91       	pop	r29
    1e38:	cf 91       	pop	r28
    1e3a:	1f 91       	pop	r17
    1e3c:	0f 91       	pop	r16
    1e3e:	ff 90       	pop	r15
    1e40:	ef 90       	pop	r14
    1e42:	df 90       	pop	r13
    1e44:	cf 90       	pop	r12
    1e46:	bf 90       	pop	r11
    1e48:	af 90       	pop	r10
    1e4a:	9f 90       	pop	r9
    1e4c:	08 95       	ret

00001e4e <_Z10timerseitev>:

void timerseite(){
    1e4e:	af 92       	push	r10
    1e50:	bf 92       	push	r11
    1e52:	df 92       	push	r13
    1e54:	ef 92       	push	r14
    1e56:	0f 93       	push	r16
    1e58:	1f 93       	push	r17
    1e5a:	cf 93       	push	r28
    1e5c:	df 93       	push	r29
    1e5e:	cd b7       	in	r28, 0x3d	; 61
    1e60:	de b7       	in	r29, 0x3e	; 62
    1e62:	64 97       	sbiw	r28, 0x14	; 20
    1e64:	0f b6       	in	r0, 0x3f	; 63
    1e66:	f8 94       	cli
    1e68:	de bf       	out	0x3e, r29	; 62
    1e6a:	0f be       	out	0x3f, r0	; 63
    1e6c:	cd bf       	out	0x3d, r28	; 61
	char buffer[20];
	uint8_t buffersize=0;
	oled.clearFrame();
    1e6e:	8e ed       	ldi	r24, 0xDE	; 222
    1e70:	92 e0       	ldi	r25, 0x02	; 2
    1e72:	0e 94 c0 02 	call	0x580	; 0x580 <_ZN7Display10clearFrameEv>
	buffersize=sprintf(buffer,"Timer: ");
    1e76:	88 e0       	ldi	r24, 0x08	; 8
    1e78:	e2 e4       	ldi	r30, 0x42	; 66
    1e7a:	f2 e0       	ldi	r31, 0x02	; 2
    1e7c:	8e 01       	movw	r16, r28
    1e7e:	0f 5f       	subi	r16, 0xFF	; 255
    1e80:	1f 4f       	sbci	r17, 0xFF	; 255
    1e82:	d8 01       	movw	r26, r16
    1e84:	01 90       	ld	r0, Z+
    1e86:	0d 92       	st	X+, r0
    1e88:	8a 95       	dec	r24
    1e8a:	e1 f7       	brne	.-8      	; 0x1e84 <_Z10timerseitev+0x36>
    1e8c:	d0 2e       	mov	r13, r16
    1e8e:	e1 2e       	mov	r14, r17
    1e90:	58 01       	movw	r10, r16
    1e92:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,0*charhighte);}
    1e94:	f5 01       	movw	r30, r10
    1e96:	61 91       	ld	r22, Z+
    1e98:	5f 01       	movw	r10, r30
    1e9a:	20 e0       	ldi	r18, 0x00	; 0
    1e9c:	41 2f       	mov	r20, r17
    1e9e:	8e ed       	ldi	r24, 0xDE	; 222
    1ea0:	92 e0       	ldi	r25, 0x02	; 2
    1ea2:	0e 94 ab 05 	call	0xb56	; 0xb56 <_ZN7Display9draw_ASCIEhhh>
    1ea6:	1a 5f       	subi	r17, 0xFA	; 250
    1ea8:	1a 32       	cpi	r17, 0x2A	; 42
    1eaa:	a1 f7       	brne	.-24     	; 0x1e94 <_Z10timerseitev+0x46>
	if (pos!=0)
    1eac:	60 91 c8 02 	lds	r22, 0x02C8
    1eb0:	66 23       	and	r22, r22
    1eb2:	39 f0       	breq	.+14     	; 0x1ec2 <_Z10timerseitev+0x74>
	{
		oled.draw_ASCI(pos+'0',buffersize*charsize,0*charhighte);
    1eb4:	60 5d       	subi	r22, 0xD0	; 208
    1eb6:	20 e0       	ldi	r18, 0x00	; 0
    1eb8:	4a e2       	ldi	r20, 0x2A	; 42
    1eba:	8e ed       	ldi	r24, 0xDE	; 222
    1ebc:	92 e0       	ldi	r25, 0x02	; 2
    1ebe:	0e 94 ab 05 	call	0xb56	; 0xb56 <_ZN7Display9draw_ASCIEhhh>
	}
		
	buffer[0]=zaehler.Stunden/10;
    1ec2:	90 91 07 07 	lds	r25, 0x0707
    1ec6:	8d ec       	ldi	r24, 0xCD	; 205
    1ec8:	98 9f       	mul	r25, r24
    1eca:	21 2d       	mov	r18, r1
    1ecc:	11 24       	eor	r1, r1
    1ece:	26 95       	lsr	r18
    1ed0:	26 95       	lsr	r18
    1ed2:	26 95       	lsr	r18
    1ed4:	29 83       	std	Y+1, r18	; 0x01
	buffer[1]=zaehler.Stunden%10;
    1ed6:	22 0f       	add	r18, r18
    1ed8:	32 2f       	mov	r19, r18
    1eda:	33 0f       	add	r19, r19
    1edc:	33 0f       	add	r19, r19
    1ede:	23 0f       	add	r18, r19
    1ee0:	92 1b       	sub	r25, r18
    1ee2:	9a 83       	std	Y+2, r25	; 0x02
	buffer[2]=':';
    1ee4:	9a e3       	ldi	r25, 0x3A	; 58
    1ee6:	9b 83       	std	Y+3, r25	; 0x03
	buffer[3]=zaehler.Minuten/10;
    1ee8:	20 91 08 07 	lds	r18, 0x0708
    1eec:	28 9f       	mul	r18, r24
    1eee:	31 2d       	mov	r19, r1
    1ef0:	11 24       	eor	r1, r1
    1ef2:	36 95       	lsr	r19
    1ef4:	36 95       	lsr	r19
    1ef6:	36 95       	lsr	r19
    1ef8:	3c 83       	std	Y+4, r19	; 0x04
	buffer[4]=zaehler.Minuten%10;
    1efa:	33 0f       	add	r19, r19
    1efc:	43 2f       	mov	r20, r19
    1efe:	44 0f       	add	r20, r20
    1f00:	44 0f       	add	r20, r20
    1f02:	34 0f       	add	r19, r20
    1f04:	23 1b       	sub	r18, r19
    1f06:	2d 83       	std	Y+5, r18	; 0x05
	buffer[5]=':';
    1f08:	9e 83       	std	Y+6, r25	; 0x06
	buffer[6]=zaehler.Sekunden/10;
    1f0a:	90 91 09 07 	lds	r25, 0x0709
    1f0e:	98 9f       	mul	r25, r24
    1f10:	81 2d       	mov	r24, r1
    1f12:	11 24       	eor	r1, r1
    1f14:	86 95       	lsr	r24
    1f16:	86 95       	lsr	r24
    1f18:	86 95       	lsr	r24
    1f1a:	8f 83       	std	Y+7, r24	; 0x07
	buffer[7]=zaehler.Sekunden%10;
    1f1c:	88 0f       	add	r24, r24
    1f1e:	28 2f       	mov	r18, r24
    1f20:	22 0f       	add	r18, r18
    1f22:	22 0f       	add	r18, r18
    1f24:	82 0f       	add	r24, r18
    1f26:	98 1b       	sub	r25, r24
    1f28:	98 87       	std	Y+8, r25	; 0x08
    1f2a:	ad 2c       	mov	r10, r13
    1f2c:	be 2c       	mov	r11, r14
    1f2e:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<bitsderrtc;i++){
		if (buffer[i]==':')
    1f30:	f5 01       	movw	r30, r10
    1f32:	61 91       	ld	r22, Z+
    1f34:	5f 01       	movw	r10, r30
    1f36:	6a 33       	cpi	r22, 0x3A	; 58
    1f38:	39 f4       	brne	.+14     	; 0x1f48 <_Z10timerseitev+0xfa>
		{
			oled.draw_ASCI(buffer[i],i*numbersmalsize,2.5*charhighte);
    1f3a:	24 e1       	ldi	r18, 0x14	; 20
    1f3c:	41 2f       	mov	r20, r17
    1f3e:	8e ed       	ldi	r24, 0xDE	; 222
    1f40:	92 e0       	ldi	r25, 0x02	; 2
    1f42:	0e 94 ab 05 	call	0xb56	; 0xb56 <_ZN7Display9draw_ASCIEhhh>
    1f46:	06 c0       	rjmp	.+12     	; 0x1f54 <_Z10timerseitev+0x106>
		}
		else{
			oled.draw_number16x16(buffer[i],i*numbersmalsize,2*charhighte);
    1f48:	20 e1       	ldi	r18, 0x10	; 16
    1f4a:	41 2f       	mov	r20, r17
    1f4c:	8e ed       	ldi	r24, 0xDE	; 222
    1f4e:	92 e0       	ldi	r25, 0x02	; 2
    1f50:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <_ZN7Display16draw_number16x16Ehhh>
    1f54:	10 5f       	subi	r17, 0xF0	; 240
	buffer[3]=zaehler.Minuten/10;
	buffer[4]=zaehler.Minuten%10;
	buffer[5]=':';
	buffer[6]=zaehler.Sekunden/10;
	buffer[7]=zaehler.Sekunden%10;
	for(uint8_t i=0;i<bitsderrtc;i++){
    1f56:	10 38       	cpi	r17, 0x80	; 128
    1f58:	59 f7       	brne	.-42     	; 0x1f30 <_Z10timerseitev+0xe2>
		}
		else{
			oled.draw_number16x16(buffer[i],i*numbersmalsize,2*charhighte);
		}
	}
}
    1f5a:	64 96       	adiw	r28, 0x14	; 20
    1f5c:	0f b6       	in	r0, 0x3f	; 63
    1f5e:	f8 94       	cli
    1f60:	de bf       	out	0x3e, r29	; 62
    1f62:	0f be       	out	0x3f, r0	; 63
    1f64:	cd bf       	out	0x3d, r28	; 61
    1f66:	df 91       	pop	r29
    1f68:	cf 91       	pop	r28
    1f6a:	1f 91       	pop	r17
    1f6c:	0f 91       	pop	r16
    1f6e:	ef 90       	pop	r14
    1f70:	df 90       	pop	r13
    1f72:	bf 90       	pop	r11
    1f74:	af 90       	pop	r10
    1f76:	08 95       	ret

00001f78 <_Z13Stoppuhrseitev>:

void Stoppuhrseite(){
    1f78:	af 92       	push	r10
    1f7a:	bf 92       	push	r11
    1f7c:	df 92       	push	r13
    1f7e:	ef 92       	push	r14
    1f80:	0f 93       	push	r16
    1f82:	1f 93       	push	r17
    1f84:	cf 93       	push	r28
    1f86:	df 93       	push	r29
    1f88:	cd b7       	in	r28, 0x3d	; 61
    1f8a:	de b7       	in	r29, 0x3e	; 62
    1f8c:	64 97       	sbiw	r28, 0x14	; 20
    1f8e:	0f b6       	in	r0, 0x3f	; 63
    1f90:	f8 94       	cli
    1f92:	de bf       	out	0x3e, r29	; 62
    1f94:	0f be       	out	0x3f, r0	; 63
    1f96:	cd bf       	out	0x3d, r28	; 61
	char buffer[20];
	uint8_t buffersize=0;
	oled.clearFrame();
    1f98:	8e ed       	ldi	r24, 0xDE	; 222
    1f9a:	92 e0       	ldi	r25, 0x02	; 2
    1f9c:	0e 94 c0 02 	call	0x580	; 0x580 <_ZN7Display10clearFrameEv>
	buffersize=sprintf(buffer,"Stoppuhr: ");
    1fa0:	8b e0       	ldi	r24, 0x0B	; 11
    1fa2:	ea e4       	ldi	r30, 0x4A	; 74
    1fa4:	f2 e0       	ldi	r31, 0x02	; 2
    1fa6:	8e 01       	movw	r16, r28
    1fa8:	0f 5f       	subi	r16, 0xFF	; 255
    1faa:	1f 4f       	sbci	r17, 0xFF	; 255
    1fac:	d8 01       	movw	r26, r16
    1fae:	01 90       	ld	r0, Z+
    1fb0:	0d 92       	st	X+, r0
    1fb2:	8a 95       	dec	r24
    1fb4:	e1 f7       	brne	.-8      	; 0x1fae <_Z13Stoppuhrseitev+0x36>
    1fb6:	d0 2e       	mov	r13, r16
    1fb8:	e1 2e       	mov	r14, r17
    1fba:	58 01       	movw	r10, r16
    1fbc:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,0*charhighte);}
    1fbe:	f5 01       	movw	r30, r10
    1fc0:	61 91       	ld	r22, Z+
    1fc2:	5f 01       	movw	r10, r30
    1fc4:	20 e0       	ldi	r18, 0x00	; 0
    1fc6:	41 2f       	mov	r20, r17
    1fc8:	8e ed       	ldi	r24, 0xDE	; 222
    1fca:	92 e0       	ldi	r25, 0x02	; 2
    1fcc:	0e 94 ab 05 	call	0xb56	; 0xb56 <_ZN7Display9draw_ASCIEhhh>
    1fd0:	1a 5f       	subi	r17, 0xFA	; 250
    1fd2:	1c 33       	cpi	r17, 0x3C	; 60
    1fd4:	a1 f7       	brne	.-24     	; 0x1fbe <_Z13Stoppuhrseitev+0x46>
	
	buffer[0]=stoppuhr.Stunden/10;
    1fd6:	90 91 ef 06 	lds	r25, 0x06EF
    1fda:	8d ec       	ldi	r24, 0xCD	; 205
    1fdc:	98 9f       	mul	r25, r24
    1fde:	21 2d       	mov	r18, r1
    1fe0:	11 24       	eor	r1, r1
    1fe2:	26 95       	lsr	r18
    1fe4:	26 95       	lsr	r18
    1fe6:	26 95       	lsr	r18
    1fe8:	29 83       	std	Y+1, r18	; 0x01
	buffer[1]=stoppuhr.Stunden%10;
    1fea:	22 0f       	add	r18, r18
    1fec:	32 2f       	mov	r19, r18
    1fee:	33 0f       	add	r19, r19
    1ff0:	33 0f       	add	r19, r19
    1ff2:	23 0f       	add	r18, r19
    1ff4:	92 1b       	sub	r25, r18
    1ff6:	9a 83       	std	Y+2, r25	; 0x02
	buffer[2]=':';
    1ff8:	9a e3       	ldi	r25, 0x3A	; 58
    1ffa:	9b 83       	std	Y+3, r25	; 0x03
	buffer[3]=stoppuhr.Minuten/10;
    1ffc:	20 91 f0 06 	lds	r18, 0x06F0
    2000:	28 9f       	mul	r18, r24
    2002:	31 2d       	mov	r19, r1
    2004:	11 24       	eor	r1, r1
    2006:	36 95       	lsr	r19
    2008:	36 95       	lsr	r19
    200a:	36 95       	lsr	r19
    200c:	3c 83       	std	Y+4, r19	; 0x04
	buffer[4]=stoppuhr.Minuten%10;
    200e:	33 0f       	add	r19, r19
    2010:	43 2f       	mov	r20, r19
    2012:	44 0f       	add	r20, r20
    2014:	44 0f       	add	r20, r20
    2016:	34 0f       	add	r19, r20
    2018:	23 1b       	sub	r18, r19
    201a:	2d 83       	std	Y+5, r18	; 0x05
	buffer[5]=':';
    201c:	9e 83       	std	Y+6, r25	; 0x06
	buffer[6]=stoppuhr.Sekunden/10;
    201e:	90 91 f1 06 	lds	r25, 0x06F1
    2022:	98 9f       	mul	r25, r24
    2024:	81 2d       	mov	r24, r1
    2026:	11 24       	eor	r1, r1
    2028:	86 95       	lsr	r24
    202a:	86 95       	lsr	r24
    202c:	86 95       	lsr	r24
    202e:	8f 83       	std	Y+7, r24	; 0x07
	buffer[7]=stoppuhr.Sekunden%10;
    2030:	88 0f       	add	r24, r24
    2032:	28 2f       	mov	r18, r24
    2034:	22 0f       	add	r18, r18
    2036:	22 0f       	add	r18, r18
    2038:	82 0f       	add	r24, r18
    203a:	98 1b       	sub	r25, r24
    203c:	98 87       	std	Y+8, r25	; 0x08
    203e:	ad 2c       	mov	r10, r13
    2040:	be 2c       	mov	r11, r14
    2042:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<bitsderrtc;i++){
		if (buffer[i]==':')
    2044:	f5 01       	movw	r30, r10
    2046:	61 91       	ld	r22, Z+
    2048:	5f 01       	movw	r10, r30
    204a:	6a 33       	cpi	r22, 0x3A	; 58
    204c:	39 f4       	brne	.+14     	; 0x205c <_Z13Stoppuhrseitev+0xe4>
		{
			oled.draw_ASCI(buffer[i],i*numbersmalsize,2.5*charhighte);
    204e:	24 e1       	ldi	r18, 0x14	; 20
    2050:	41 2f       	mov	r20, r17
    2052:	8e ed       	ldi	r24, 0xDE	; 222
    2054:	92 e0       	ldi	r25, 0x02	; 2
    2056:	0e 94 ab 05 	call	0xb56	; 0xb56 <_ZN7Display9draw_ASCIEhhh>
    205a:	06 c0       	rjmp	.+12     	; 0x2068 <_Z13Stoppuhrseitev+0xf0>
		}
		else{
			oled.draw_number16x16(buffer[i],i*numbersmalsize,2*charhighte);
    205c:	20 e1       	ldi	r18, 0x10	; 16
    205e:	41 2f       	mov	r20, r17
    2060:	8e ed       	ldi	r24, 0xDE	; 222
    2062:	92 e0       	ldi	r25, 0x02	; 2
    2064:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <_ZN7Display16draw_number16x16Ehhh>
    2068:	10 5f       	subi	r17, 0xF0	; 240
	buffer[3]=stoppuhr.Minuten/10;
	buffer[4]=stoppuhr.Minuten%10;
	buffer[5]=':';
	buffer[6]=stoppuhr.Sekunden/10;
	buffer[7]=stoppuhr.Sekunden%10;
	for(uint8_t i=0;i<bitsderrtc;i++){
    206a:	10 38       	cpi	r17, 0x80	; 128
    206c:	59 f7       	brne	.-42     	; 0x2044 <_Z13Stoppuhrseitev+0xcc>
		}
		else{
			oled.draw_number16x16(buffer[i],i*numbersmalsize,2*charhighte);
		}
	}
}
    206e:	64 96       	adiw	r28, 0x14	; 20
    2070:	0f b6       	in	r0, 0x3f	; 63
    2072:	f8 94       	cli
    2074:	de bf       	out	0x3e, r29	; 62
    2076:	0f be       	out	0x3f, r0	; 63
    2078:	cd bf       	out	0x3d, r28	; 61
    207a:	df 91       	pop	r29
    207c:	cf 91       	pop	r28
    207e:	1f 91       	pop	r17
    2080:	0f 91       	pop	r16
    2082:	ef 90       	pop	r14
    2084:	df 90       	pop	r13
    2086:	bf 90       	pop	r11
    2088:	af 90       	pop	r10
    208a:	08 95       	ret

0000208c <_Z14Pressuresensorv>:

void Pressuresensor(){
    208c:	bf 92       	push	r11
    208e:	cf 92       	push	r12
    2090:	df 92       	push	r13
    2092:	ef 92       	push	r14
    2094:	ff 92       	push	r15
    2096:	0f 93       	push	r16
    2098:	1f 93       	push	r17
    209a:	cf 93       	push	r28
    209c:	df 93       	push	r29
    209e:	cd b7       	in	r28, 0x3d	; 61
    20a0:	de b7       	in	r29, 0x3e	; 62
    20a2:	64 97       	sbiw	r28, 0x14	; 20
    20a4:	0f b6       	in	r0, 0x3f	; 63
    20a6:	f8 94       	cli
    20a8:	de bf       	out	0x3e, r29	; 62
    20aa:	0f be       	out	0x3f, r0	; 63
    20ac:	cd bf       	out	0x3d, r28	; 61
	Baro.READ_Pressure_once();
    20ae:	8f ec       	ldi	r24, 0xCF	; 207
    20b0:	92 e0       	ldi	r25, 0x02	; 2
    20b2:	0e 94 61 1d 	call	0x3ac2	; 0x3ac2 <_ZN8Pressure18READ_Pressure_onceEv>
	Baro.READ_Temperature();
    20b6:	8f ec       	ldi	r24, 0xCF	; 207
    20b8:	92 e0       	ldi	r25, 0x02	; 2
    20ba:	0e 94 e9 1d 	call	0x3bd2	; 0x3bd2 <_ZN8Pressure16READ_TemperatureEv>
	char buffer[20];
	uint8_t buffersize=0;
	oled.clearFrame();
    20be:	8e ed       	ldi	r24, 0xDE	; 222
    20c0:	92 e0       	ldi	r25, 0x02	; 2
    20c2:	0e 94 c0 02 	call	0x580	; 0x580 <_ZN7Display10clearFrameEv>
	header(0);
    20c6:	80 e0       	ldi	r24, 0x00	; 0
    20c8:	0e 94 1a 09 	call	0x1234	; 0x1234 <_Z6headerh>
	bottom(0);
    20cc:	80 e0       	ldi	r24, 0x00	; 0
    20ce:	0e 94 84 09 	call	0x1308	; 0x1308 <_Z6bottomh>
	buffersize=sprintf(buffer,"LPS25H Daten:");
    20d2:	8e e0       	ldi	r24, 0x0E	; 14
    20d4:	e5 e5       	ldi	r30, 0x55	; 85
    20d6:	f2 e0       	ldi	r31, 0x02	; 2
    20d8:	8e 01       	movw	r16, r28
    20da:	0f 5f       	subi	r16, 0xFF	; 255
    20dc:	1f 4f       	sbci	r17, 0xFF	; 255
    20de:	d8 01       	movw	r26, r16
    20e0:	01 90       	ld	r0, Z+
    20e2:	0d 92       	st	X+, r0
    20e4:	8a 95       	dec	r24
    20e6:	e1 f7       	brne	.-8      	; 0x20e0 <_Z14Pressuresensorv+0x54>
    20e8:	c0 2e       	mov	r12, r16
    20ea:	d1 2e       	mov	r13, r17
    20ec:	78 01       	movw	r14, r16
    20ee:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,2*charhighte);}
    20f0:	f7 01       	movw	r30, r14
    20f2:	61 91       	ld	r22, Z+
    20f4:	7f 01       	movw	r14, r30
    20f6:	20 e1       	ldi	r18, 0x10	; 16
    20f8:	41 2f       	mov	r20, r17
    20fa:	8e ed       	ldi	r24, 0xDE	; 222
    20fc:	92 e0       	ldi	r25, 0x02	; 2
    20fe:	0e 94 ab 05 	call	0xb56	; 0xb56 <_ZN7Display9draw_ASCIEhhh>
    2102:	1a 5f       	subi	r17, 0xFA	; 250
    2104:	1e 34       	cpi	r17, 0x4E	; 78
    2106:	a1 f7       	brne	.-24     	; 0x20f0 <_Z14Pressuresensorv+0x64>
	buffersize=sprintf(buffer,"%.2f HPa",Baro.Press);
    2108:	ef ec       	ldi	r30, 0xCF	; 207
    210a:	f2 e0       	ldi	r31, 0x02	; 2
    210c:	83 81       	ldd	r24, Z+3	; 0x03
    210e:	8f 93       	push	r24
    2110:	82 81       	ldd	r24, Z+2	; 0x02
    2112:	8f 93       	push	r24
    2114:	81 81       	ldd	r24, Z+1	; 0x01
    2116:	8f 93       	push	r24
    2118:	80 81       	ld	r24, Z
    211a:	8f 93       	push	r24
    211c:	83 e6       	ldi	r24, 0x63	; 99
    211e:	92 e0       	ldi	r25, 0x02	; 2
    2120:	9f 93       	push	r25
    2122:	8f 93       	push	r24
    2124:	ce 01       	movw	r24, r28
    2126:	01 96       	adiw	r24, 0x01	; 1
    2128:	9f 93       	push	r25
    212a:	8f 93       	push	r24
    212c:	0e 94 b9 27 	call	0x4f72	; 0x4f72 <sprintf>
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,3*charhighte);}
    2130:	0f b6       	in	r0, 0x3f	; 63
    2132:	f8 94       	cli
    2134:	de bf       	out	0x3e, r29	; 62
    2136:	0f be       	out	0x3f, r0	; 63
    2138:	cd bf       	out	0x3d, r28	; 61
    213a:	88 23       	and	r24, r24
    213c:	d1 f0       	breq	.+52     	; 0x2172 <_Z14Pressuresensorv+0xe6>
    213e:	81 50       	subi	r24, 0x01	; 1
    2140:	68 94       	set
    2142:	ee 24       	eor	r14, r14
    2144:	e1 f8       	bld	r14, 1
    2146:	f1 2c       	mov	r15, r1
    2148:	ec 0e       	add	r14, r28
    214a:	fd 1e       	adc	r15, r29
    214c:	e8 0e       	add	r14, r24
    214e:	f1 1c       	adc	r15, r1
    2150:	0c 2d       	mov	r16, r12
    2152:	1d 2d       	mov	r17, r13
    2154:	b1 2c       	mov	r11, r1
    2156:	f8 01       	movw	r30, r16
    2158:	61 91       	ld	r22, Z+
    215a:	8f 01       	movw	r16, r30
    215c:	28 e1       	ldi	r18, 0x18	; 24
    215e:	4b 2d       	mov	r20, r11
    2160:	8e ed       	ldi	r24, 0xDE	; 222
    2162:	92 e0       	ldi	r25, 0x02	; 2
    2164:	0e 94 ab 05 	call	0xb56	; 0xb56 <_ZN7Display9draw_ASCIEhhh>
    2168:	f6 e0       	ldi	r31, 0x06	; 6
    216a:	bf 0e       	add	r11, r31
    216c:	0e 15       	cp	r16, r14
    216e:	1f 05       	cpc	r17, r15
    2170:	91 f7       	brne	.-28     	; 0x2156 <_Z14Pressuresensorv+0xca>
	buffersize=sprintf(buffer,"%.1f C",(double)Baro.Tempera);
    2172:	e3 ed       	ldi	r30, 0xD3	; 211
    2174:	f2 e0       	ldi	r31, 0x02	; 2
    2176:	83 81       	ldd	r24, Z+3	; 0x03
    2178:	8f 93       	push	r24
    217a:	82 81       	ldd	r24, Z+2	; 0x02
    217c:	8f 93       	push	r24
    217e:	81 81       	ldd	r24, Z+1	; 0x01
    2180:	8f 93       	push	r24
    2182:	80 81       	ld	r24, Z
    2184:	8f 93       	push	r24
    2186:	8c e6       	ldi	r24, 0x6C	; 108
    2188:	92 e0       	ldi	r25, 0x02	; 2
    218a:	9f 93       	push	r25
    218c:	8f 93       	push	r24
    218e:	ce 01       	movw	r24, r28
    2190:	01 96       	adiw	r24, 0x01	; 1
    2192:	9f 93       	push	r25
    2194:	8f 93       	push	r24
    2196:	0e 94 b9 27 	call	0x4f72	; 0x4f72 <sprintf>
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,5*charhighte);}
    219a:	0f b6       	in	r0, 0x3f	; 63
    219c:	f8 94       	cli
    219e:	de bf       	out	0x3e, r29	; 62
    21a0:	0f be       	out	0x3f, r0	; 63
    21a2:	cd bf       	out	0x3d, r28	; 61
    21a4:	88 23       	and	r24, r24
    21a6:	d1 f0       	breq	.+52     	; 0x21dc <_Z14Pressuresensorv+0x150>
    21a8:	81 50       	subi	r24, 0x01	; 1
    21aa:	68 94       	set
    21ac:	ee 24       	eor	r14, r14
    21ae:	e1 f8       	bld	r14, 1
    21b0:	f1 2c       	mov	r15, r1
    21b2:	ec 0e       	add	r14, r28
    21b4:	fd 1e       	adc	r15, r29
    21b6:	e8 0e       	add	r14, r24
    21b8:	f1 1c       	adc	r15, r1
    21ba:	0c 2d       	mov	r16, r12
    21bc:	1d 2d       	mov	r17, r13
    21be:	d1 2c       	mov	r13, r1
    21c0:	f8 01       	movw	r30, r16
    21c2:	61 91       	ld	r22, Z+
    21c4:	8f 01       	movw	r16, r30
    21c6:	28 e2       	ldi	r18, 0x28	; 40
    21c8:	4d 2d       	mov	r20, r13
    21ca:	8e ed       	ldi	r24, 0xDE	; 222
    21cc:	92 e0       	ldi	r25, 0x02	; 2
    21ce:	0e 94 ab 05 	call	0xb56	; 0xb56 <_ZN7Display9draw_ASCIEhhh>
    21d2:	f6 e0       	ldi	r31, 0x06	; 6
    21d4:	df 0e       	add	r13, r31
    21d6:	0e 15       	cp	r16, r14
    21d8:	1f 05       	cpc	r17, r15
    21da:	91 f7       	brne	.-28     	; 0x21c0 <_Z14Pressuresensorv+0x134>
	//buffersize=sprintf(buffer,"%i",Baro.Wertedruck[1]);
	//for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,4*charhighte);}
	//buffersize=sprintf(buffer,"%i",Baro.Wertedruck[2]);
	//for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,5*charhighte);}
}
    21dc:	64 96       	adiw	r28, 0x14	; 20
    21de:	0f b6       	in	r0, 0x3f	; 63
    21e0:	f8 94       	cli
    21e2:	de bf       	out	0x3e, r29	; 62
    21e4:	0f be       	out	0x3f, r0	; 63
    21e6:	cd bf       	out	0x3d, r28	; 61
    21e8:	df 91       	pop	r29
    21ea:	cf 91       	pop	r28
    21ec:	1f 91       	pop	r17
    21ee:	0f 91       	pop	r16
    21f0:	ff 90       	pop	r15
    21f2:	ef 90       	pop	r14
    21f4:	df 90       	pop	r13
    21f6:	cf 90       	pop	r12
    21f8:	bf 90       	pop	r11
    21fa:	08 95       	ret

000021fc <_Z13uhreinstellenv>:

void uhreinstellen(){
    21fc:	2f 92       	push	r2
    21fe:	3f 92       	push	r3
    2200:	4f 92       	push	r4
    2202:	5f 92       	push	r5
    2204:	6f 92       	push	r6
    2206:	7f 92       	push	r7
    2208:	8f 92       	push	r8
    220a:	9f 92       	push	r9
    220c:	af 92       	push	r10
    220e:	bf 92       	push	r11
    2210:	cf 92       	push	r12
    2212:	df 92       	push	r13
    2214:	ef 92       	push	r14
    2216:	ff 92       	push	r15
    2218:	0f 93       	push	r16
    221a:	1f 93       	push	r17
    221c:	cf 93       	push	r28
    221e:	df 93       	push	r29
    2220:	cd b7       	in	r28, 0x3d	; 61
    2222:	de b7       	in	r29, 0x3e	; 62
    2224:	66 97       	sbiw	r28, 0x16	; 22
    2226:	0f b6       	in	r0, 0x3f	; 63
    2228:	f8 94       	cli
    222a:	de bf       	out	0x3e, r29	; 62
    222c:	0f be       	out	0x3f, r0	; 63
    222e:	cd bf       	out	0x3d, r28	; 61
	rtc.RTCstop();
    2230:	8f e0       	ldi	r24, 0x0F	; 15
    2232:	97 e0       	ldi	r25, 0x07	; 7
    2234:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <_ZN3RTC7RTCstopEv>
	
	oled.clearFrame();
    2238:	8e ed       	ldi	r24, 0xDE	; 222
    223a:	92 e0       	ldi	r25, 0x02	; 2
    223c:	0e 94 c0 02 	call	0x580	; 0x580 <_ZN7Display10clearFrameEv>
	char buffer[20];
	uint8_t buffersize;
	uint8_t pos=0;
    2240:	91 2c       	mov	r9, r1
	while(pos<11){
		buffersize=sprintf(buffer,"Uhreinstellung");
    2242:	0f 2e       	mov	r0, r31
    2244:	ff e0       	ldi	r31, 0x0F	; 15
    2246:	6f 2e       	mov	r6, r31
    2248:	f0 2d       	mov	r31, r0
    224a:	ce 01       	movw	r24, r28
    224c:	01 96       	adiw	r24, 0x01	; 1
    224e:	7c 01       	movw	r14, r24
    2250:	78 2e       	mov	r7, r24
    2252:	8f 2c       	mov	r8, r15
    2254:	b1 2c       	mov	r11, r1
		for(uint8_t i = 0; i<buffersize;i++){
			oled.draw_ASCI(buffer[i],charsize*i,0);
		}
		buffersize=sprintf(buffer,"--------------");
    2256:	8d 8b       	std	Y+21, r24	; 0x15
    2258:	fe 8a       	std	Y+22, r15	; 0x16
		for(uint8_t i = 0; i<buffersize;i++){
			oled.draw_ASCI(buffer[i],charsize*i,8);
		}
		buffer[0]=rtc.Stunden/10;
    225a:	0f 2e       	mov	r0, r31
    225c:	fd ec       	ldi	r31, 0xCD	; 205
    225e:	af 2e       	mov	r10, r31
    2260:	f0 2d       	mov	r31, r0
		buffer[1]=rtc.Stunden%10;
		buffer[2]=':';
		buffer[3]=rtc.Minuten/10;
		buffer[4]=rtc.Minuten%10;
		buffer[5]=' ';
		buffer[6]=rtc.Tag/10;
    2262:	0f 2e       	mov	r0, r31
    2264:	f3 e2       	ldi	r31, 0x23	; 35
    2266:	4f 2e       	mov	r4, r31
    2268:	f7 e0       	ldi	r31, 0x07	; 7
    226a:	5f 2e       	mov	r5, r31
    226c:	f0 2d       	mov	r31, r0
		buffer[7]=rtc.Tag%10;
		buffer[8]='.';
		buffer[9]=rtc.Monat/10;
    226e:	0f 2e       	mov	r0, r31
    2270:	f4 e2       	ldi	r31, 0x24	; 36
    2272:	cf 2e       	mov	r12, r31
    2274:	f7 e0       	ldi	r31, 0x07	; 7
    2276:	df 2e       	mov	r13, r31
    2278:	f0 2d       	mov	r31, r0
	oled.clearFrame();
	char buffer[20];
	uint8_t buffersize;
	uint8_t pos=0;
	while(pos<11){
		buffersize=sprintf(buffer,"Uhreinstellung");
    227a:	e3 e7       	ldi	r30, 0x73	; 115
    227c:	f2 e0       	ldi	r31, 0x02	; 2
    227e:	a7 2d       	mov	r26, r7
    2280:	b8 2d       	mov	r27, r8
    2282:	86 2d       	mov	r24, r6
    2284:	01 90       	ld	r0, Z+
    2286:	0d 92       	st	X+, r0
    2288:	8a 95       	dec	r24
    228a:	e1 f7       	brne	.-8      	; 0x2284 <_Z13uhreinstellenv+0x88>
    228c:	27 2c       	mov	r2, r7
    228e:	38 2c       	mov	r3, r8
    2290:	1b 2d       	mov	r17, r11
		for(uint8_t i = 0; i<buffersize;i++){
			oled.draw_ASCI(buffer[i],charsize*i,0);
    2292:	f1 01       	movw	r30, r2
    2294:	61 91       	ld	r22, Z+
    2296:	1f 01       	movw	r2, r30
    2298:	2b 2d       	mov	r18, r11
    229a:	41 2f       	mov	r20, r17
    229c:	8e ed       	ldi	r24, 0xDE	; 222
    229e:	92 e0       	ldi	r25, 0x02	; 2
    22a0:	0e 94 ab 05 	call	0xb56	; 0xb56 <_ZN7Display9draw_ASCIEhhh>
    22a4:	1a 5f       	subi	r17, 0xFA	; 250
	char buffer[20];
	uint8_t buffersize;
	uint8_t pos=0;
	while(pos<11){
		buffersize=sprintf(buffer,"Uhreinstellung");
		for(uint8_t i = 0; i<buffersize;i++){
    22a6:	14 35       	cpi	r17, 0x54	; 84
    22a8:	a1 f7       	brne	.-24     	; 0x2292 <_Z13uhreinstellenv+0x96>
			oled.draw_ASCI(buffer[i],charsize*i,0);
		}
		buffersize=sprintf(buffer,"--------------");
    22aa:	ef e0       	ldi	r30, 0x0F	; 15
    22ac:	f1 e0       	ldi	r31, 0x01	; 1
    22ae:	a7 2d       	mov	r26, r7
    22b0:	b8 2d       	mov	r27, r8
    22b2:	86 2d       	mov	r24, r6
    22b4:	01 90       	ld	r0, Z+
    22b6:	0d 92       	st	X+, r0
    22b8:	8a 95       	dec	r24
    22ba:	e1 f7       	brne	.-8      	; 0x22b4 <_Z13uhreinstellenv+0xb8>
    22bc:	2d 88       	ldd	r2, Y+21	; 0x15
    22be:	3e 88       	ldd	r3, Y+22	; 0x16
    22c0:	1b 2d       	mov	r17, r11
		for(uint8_t i = 0; i<buffersize;i++){
			oled.draw_ASCI(buffer[i],charsize*i,8);
    22c2:	f1 01       	movw	r30, r2
    22c4:	61 91       	ld	r22, Z+
    22c6:	1f 01       	movw	r2, r30
    22c8:	28 e0       	ldi	r18, 0x08	; 8
    22ca:	41 2f       	mov	r20, r17
    22cc:	8e ed       	ldi	r24, 0xDE	; 222
    22ce:	92 e0       	ldi	r25, 0x02	; 2
    22d0:	0e 94 ab 05 	call	0xb56	; 0xb56 <_ZN7Display9draw_ASCIEhhh>
    22d4:	1a 5f       	subi	r17, 0xFA	; 250
		buffersize=sprintf(buffer,"Uhreinstellung");
		for(uint8_t i = 0; i<buffersize;i++){
			oled.draw_ASCI(buffer[i],charsize*i,0);
		}
		buffersize=sprintf(buffer,"--------------");
		for(uint8_t i = 0; i<buffersize;i++){
    22d6:	14 35       	cpi	r17, 0x54	; 84
    22d8:	a1 f7       	brne	.-24     	; 0x22c2 <_Z13uhreinstellenv+0xc6>
			oled.draw_ASCI(buffer[i],charsize*i,8);
		}
		buffer[0]=rtc.Stunden/10;
    22da:	ef e1       	ldi	r30, 0x1F	; 31
    22dc:	f7 e0       	ldi	r31, 0x07	; 7
    22de:	80 81       	ld	r24, Z
    22e0:	8a 9d       	mul	r24, r10
    22e2:	91 2d       	mov	r25, r1
    22e4:	11 24       	eor	r1, r1
    22e6:	96 95       	lsr	r25
    22e8:	96 95       	lsr	r25
    22ea:	96 95       	lsr	r25
    22ec:	99 83       	std	Y+1, r25	; 0x01
		buffer[1]=rtc.Stunden%10;
    22ee:	99 0f       	add	r25, r25
    22f0:	29 2f       	mov	r18, r25
    22f2:	22 0f       	add	r18, r18
    22f4:	22 0f       	add	r18, r18
    22f6:	92 0f       	add	r25, r18
    22f8:	89 1b       	sub	r24, r25
    22fa:	8a 83       	std	Y+2, r24	; 0x02
		buffer[2]=':';
    22fc:	fa e3       	ldi	r31, 0x3A	; 58
    22fe:	fb 83       	std	Y+3, r31	; 0x03
		buffer[3]=rtc.Minuten/10;
    2300:	e0 e2       	ldi	r30, 0x20	; 32
    2302:	f7 e0       	ldi	r31, 0x07	; 7
    2304:	80 81       	ld	r24, Z
    2306:	8a 9d       	mul	r24, r10
    2308:	91 2d       	mov	r25, r1
    230a:	11 24       	eor	r1, r1
    230c:	96 95       	lsr	r25
    230e:	96 95       	lsr	r25
    2310:	96 95       	lsr	r25
    2312:	9c 83       	std	Y+4, r25	; 0x04
		buffer[4]=rtc.Minuten%10;
    2314:	99 0f       	add	r25, r25
    2316:	29 2f       	mov	r18, r25
    2318:	22 0f       	add	r18, r18
    231a:	22 0f       	add	r18, r18
    231c:	92 0f       	add	r25, r18
    231e:	89 1b       	sub	r24, r25
    2320:	8d 83       	std	Y+5, r24	; 0x05
		buffer[5]=' ';
    2322:	80 e2       	ldi	r24, 0x20	; 32
    2324:	8e 83       	std	Y+6, r24	; 0x06
		buffer[6]=rtc.Tag/10;
    2326:	f2 01       	movw	r30, r4
    2328:	80 81       	ld	r24, Z
    232a:	8a 9d       	mul	r24, r10
    232c:	91 2d       	mov	r25, r1
    232e:	11 24       	eor	r1, r1
    2330:	96 95       	lsr	r25
    2332:	96 95       	lsr	r25
    2334:	96 95       	lsr	r25
    2336:	9f 83       	std	Y+7, r25	; 0x07
		buffer[7]=rtc.Tag%10;
    2338:	99 0f       	add	r25, r25
    233a:	29 2f       	mov	r18, r25
    233c:	22 0f       	add	r18, r18
    233e:	22 0f       	add	r18, r18
    2340:	92 0f       	add	r25, r18
    2342:	89 1b       	sub	r24, r25
    2344:	88 87       	std	Y+8, r24	; 0x08
		buffer[8]='.';
    2346:	8e e2       	ldi	r24, 0x2E	; 46
    2348:	89 87       	std	Y+9, r24	; 0x09
		buffer[9]=rtc.Monat/10;
    234a:	f6 01       	movw	r30, r12
    234c:	90 81       	ld	r25, Z
    234e:	9a 9d       	mul	r25, r10
    2350:	21 2d       	mov	r18, r1
    2352:	11 24       	eor	r1, r1
    2354:	26 95       	lsr	r18
    2356:	26 95       	lsr	r18
    2358:	26 95       	lsr	r18
    235a:	2a 87       	std	Y+10, r18	; 0x0a
		buffer[10]=rtc.Monat%10;
    235c:	22 0f       	add	r18, r18
    235e:	32 2f       	mov	r19, r18
    2360:	33 0f       	add	r19, r19
    2362:	33 0f       	add	r19, r19
    2364:	23 0f       	add	r18, r19
    2366:	92 1b       	sub	r25, r18
    2368:	9b 87       	std	Y+11, r25	; 0x0b
		buffer[11]='.';
    236a:	8c 87       	std	Y+12, r24	; 0x0c
		buffer[12]=rtc.Jahr/10;
    236c:	e5 e2       	ldi	r30, 0x25	; 37
    236e:	f7 e0       	ldi	r31, 0x07	; 7
    2370:	80 81       	ld	r24, Z
    2372:	8a 9d       	mul	r24, r10
    2374:	91 2d       	mov	r25, r1
    2376:	11 24       	eor	r1, r1
    2378:	96 95       	lsr	r25
    237a:	96 95       	lsr	r25
    237c:	96 95       	lsr	r25
    237e:	9d 87       	std	Y+13, r25	; 0x0d
		buffer[13]=rtc.Jahr%10;
    2380:	99 0f       	add	r25, r25
    2382:	29 2f       	mov	r18, r25
    2384:	22 0f       	add	r18, r18
    2386:	22 0f       	add	r18, r18
    2388:	92 0f       	add	r25, r18
    238a:	89 1b       	sub	r24, r25
    238c:	8e 87       	std	Y+14, r24	; 0x0e
    238e:	3b 2c       	mov	r3, r11
    2390:	01 e0       	ldi	r16, 0x01	; 1
    2392:	1b 2d       	mov	r17, r11
    2394:	04 c0       	rjmp	.+8      	; 0x239e <_Z13uhreinstellenv+0x1a2>
    2396:	1f 5f       	subi	r17, 0xFF	; 255
    2398:	0f 5f       	subi	r16, 0xFF	; 255
    239a:	f0 e1       	ldi	r31, 0x10	; 16
    239c:	3f 0e       	add	r3, r31
		buffersize=14;
		for(uint8_t i = 0; i<5;i++){
			if(i!=2){
    239e:	12 30       	cpi	r17, 0x02	; 2
    23a0:	69 f0       	breq	.+26     	; 0x23bc <_Z13uhreinstellenv+0x1c0>
				oled.draw_number16x16(buffer[i],i*numbersmalsize,2*charhighte);
    23a2:	20 e1       	ldi	r18, 0x10	; 16
    23a4:	43 2d       	mov	r20, r3
    23a6:	f7 01       	movw	r30, r14
    23a8:	e1 0f       	add	r30, r17
    23aa:	f1 1d       	adc	r31, r1
    23ac:	60 81       	ld	r22, Z
    23ae:	8e ed       	ldi	r24, 0xDE	; 222
    23b0:	92 e0       	ldi	r25, 0x02	; 2
    23b2:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <_ZN7Display16draw_number16x16Ehhh>
		buffer[10]=rtc.Monat%10;
		buffer[11]='.';
		buffer[12]=rtc.Jahr/10;
		buffer[13]=rtc.Jahr%10;
		buffersize=14;
		for(uint8_t i = 0; i<5;i++){
    23b6:	05 30       	cpi	r16, 0x05	; 5
    23b8:	70 f3       	brcs	.-36     	; 0x2396 <_Z13uhreinstellenv+0x19a>
    23ba:	08 c0       	rjmp	.+16     	; 0x23cc <_Z13uhreinstellenv+0x1d0>
			if(i!=2){
				oled.draw_number16x16(buffer[i],i*numbersmalsize,2*charhighte);
			}
			else {
				oled.draw_ASCI(buffer[i],i*numbersmalsize+numbersmalsize/2,2*charhighte+charhighte/2);
    23bc:	24 e1       	ldi	r18, 0x14	; 20
    23be:	48 e2       	ldi	r20, 0x28	; 40
    23c0:	6b 81       	ldd	r22, Y+3	; 0x03
    23c2:	8e ed       	ldi	r24, 0xDE	; 222
    23c4:	92 e0       	ldi	r25, 0x02	; 2
    23c6:	0e 94 ab 05 	call	0xb56	; 0xb56 <_ZN7Display9draw_ASCIEhhh>
    23ca:	e5 cf       	rjmp	.-54     	; 0x2396 <_Z13uhreinstellenv+0x19a>
    23cc:	8e 01       	movw	r16, r28
    23ce:	09 5f       	subi	r16, 0xF9	; 249
    23d0:	1f 4f       	sbci	r17, 0xFF	; 255
		buffer[10]=rtc.Monat%10;
		buffer[11]='.';
		buffer[12]=rtc.Jahr/10;
		buffer[13]=rtc.Jahr%10;
		buffersize=14;
		for(uint8_t i = 0; i<5;i++){
    23d2:	2b 2c       	mov	r2, r11
    23d4:	0f 2e       	mov	r0, r31
    23d6:	f6 e0       	ldi	r31, 0x06	; 6
    23d8:	3f 2e       	mov	r3, r31
    23da:	f0 2d       	mov	r31, r0
			else {
				oled.draw_ASCI(buffer[i],i*numbersmalsize+numbersmalsize/2,2*charhighte+charhighte/2);
			}
		}
		for(uint8_t i = 6; i<buffersize;i++){
			if(i!=8 && i!=11){
    23dc:	88 e0       	ldi	r24, 0x08	; 8
    23de:	38 16       	cp	r3, r24
    23e0:	61 f0       	breq	.+24     	; 0x23fa <_Z13uhreinstellenv+0x1fe>
    23e2:	9b e0       	ldi	r25, 0x0B	; 11
    23e4:	39 16       	cp	r3, r25
    23e6:	49 f0       	breq	.+18     	; 0x23fa <_Z13uhreinstellenv+0x1fe>
				oled.draw_number16x16(buffer[i],i*numbersmalsize-6*numbersmalsize,4*charhighte);
    23e8:	20 e2       	ldi	r18, 0x20	; 32
    23ea:	42 2d       	mov	r20, r2
    23ec:	f8 01       	movw	r30, r16
    23ee:	60 81       	ld	r22, Z
    23f0:	8e ed       	ldi	r24, 0xDE	; 222
    23f2:	92 e0       	ldi	r25, 0x02	; 2
    23f4:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <_ZN7Display16draw_number16x16Ehhh>
    23f8:	09 c0       	rjmp	.+18     	; 0x240c <_Z13uhreinstellenv+0x210>
			}
			else {
				oled.draw_ASCI(buffer[i],i*numbersmalsize+numbersmalsize/2-6*numbersmalsize,5*charhighte);
    23fa:	28 e2       	ldi	r18, 0x28	; 40
    23fc:	48 e0       	ldi	r20, 0x08	; 8
    23fe:	42 0d       	add	r20, r2
    2400:	f8 01       	movw	r30, r16
    2402:	60 81       	ld	r22, Z
    2404:	8e ed       	ldi	r24, 0xDE	; 222
    2406:	92 e0       	ldi	r25, 0x02	; 2
    2408:	0e 94 ab 05 	call	0xb56	; 0xb56 <_ZN7Display9draw_ASCIEhhh>
			}
			else {
				oled.draw_ASCI(buffer[i],i*numbersmalsize+numbersmalsize/2,2*charhighte+charhighte/2);
			}
		}
		for(uint8_t i = 6; i<buffersize;i++){
    240c:	33 94       	inc	r3
    240e:	0f 5f       	subi	r16, 0xFF	; 255
    2410:	1f 4f       	sbci	r17, 0xFF	; 255
    2412:	f0 e1       	ldi	r31, 0x10	; 16
    2414:	2f 0e       	add	r2, r31
    2416:	8e e0       	ldi	r24, 0x0E	; 14
    2418:	38 12       	cpse	r3, r24
    241a:	e0 cf       	rjmp	.-64     	; 0x23dc <_Z13uhreinstellenv+0x1e0>
			else {
				oled.draw_ASCI(buffer[i],i*numbersmalsize+numbersmalsize/2-6*numbersmalsize,5*charhighte);
			}
		}

		oled.sendFrame();
    241c:	8e ed       	ldi	r24, 0xDE	; 222
    241e:	92 e0       	ldi	r25, 0x02	; 2
    2420:	0e 94 66 03 	call	0x6cc	; 0x6cc <_ZN7Display9sendFrameEv>
		oled.clearFrame();
    2424:	8e ed       	ldi	r24, 0xDE	; 222
    2426:	92 e0       	ldi	r25, 0x02	; 2
    2428:	0e 94 c0 02 	call	0x580	; 0x580 <_ZN7Display10clearFrameEv>
		switch (pos) {
    242c:	89 2d       	mov	r24, r9
    242e:	90 e0       	ldi	r25, 0x00	; 0
    2430:	8a 30       	cpi	r24, 0x0A	; 10
    2432:	91 05       	cpc	r25, r1
    2434:	08 f0       	brcs	.+2      	; 0x2438 <_Z13uhreinstellenv+0x23c>
    2436:	47 c2       	rjmp	.+1166   	; 0x28c6 <_Z13uhreinstellenv+0x6ca>
    2438:	fc 01       	movw	r30, r24
    243a:	ec 5c       	subi	r30, 0xCC	; 204
    243c:	ff 4f       	sbci	r31, 0xFF	; 255
    243e:	0c 94 5c 26 	jmp	0x4cb8	; 0x4cb8 <__tablejump2__>
			case 0:
				rtc.Stunden=Tastatur.ZahlenausTastatur()*10;
    2442:	8d ed       	ldi	r24, 0xDD	; 221
    2444:	92 e0       	ldi	r25, 0x02	; 2
    2446:	0e 94 9a 1a 	call	0x3534	; 0x3534 <_ZN9Interface17ZahlenausTastaturEv>
    244a:	88 0f       	add	r24, r24
    244c:	98 2f       	mov	r25, r24
    244e:	99 0f       	add	r25, r25
    2450:	99 0f       	add	r25, r25
    2452:	89 0f       	add	r24, r25
				if(rtc.Stunden>=24){
    2454:	88 31       	cpi	r24, 0x18	; 24
    2456:	08 f4       	brcc	.+2      	; 0x245a <_Z13uhreinstellenv+0x25e>
    2458:	51 c2       	rjmp	.+1186   	; 0x28fc <_Z13uhreinstellenv+0x700>
					rtc.Stunden=0;
    245a:	ef e1       	ldi	r30, 0x1F	; 31
    245c:	f7 e0       	ldi	r31, 0x07	; 7
    245e:	10 82       	st	Z, r1
					pos=-1;
					buffersize=sprintf(buffer,"Stunden falsch");
    2460:	e2 e8       	ldi	r30, 0x82	; 130
    2462:	f2 e0       	ldi	r31, 0x02	; 2
    2464:	a7 2d       	mov	r26, r7
    2466:	b8 2d       	mov	r27, r8
    2468:	86 2d       	mov	r24, r6
    246a:	01 90       	ld	r0, Z+
    246c:	0d 92       	st	X+, r0
    246e:	8a 95       	dec	r24
    2470:	e1 f7       	brne	.-8      	; 0x246a <_Z13uhreinstellenv+0x26e>
    2472:	2d 88       	ldd	r2, Y+21	; 0x15
    2474:	3e 88       	ldd	r3, Y+22	; 0x16
    2476:	1b 2d       	mov	r17, r11
					for(uint8_t i = 0; i<buffersize;i++){
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
    2478:	f1 01       	movw	r30, r2
    247a:	61 91       	ld	r22, Z+
    247c:	1f 01       	movw	r2, r30
    247e:	28 e3       	ldi	r18, 0x38	; 56
    2480:	41 2f       	mov	r20, r17
    2482:	8e ed       	ldi	r24, 0xDE	; 222
    2484:	92 e0       	ldi	r25, 0x02	; 2
    2486:	0e 94 ab 05 	call	0xb56	; 0xb56 <_ZN7Display9draw_ASCIEhhh>
    248a:	1a 5f       	subi	r17, 0xFA	; 250
				rtc.Stunden=Tastatur.ZahlenausTastatur()*10;
				if(rtc.Stunden>=24){
					rtc.Stunden=0;
					pos=-1;
					buffersize=sprintf(buffer,"Stunden falsch");
					for(uint8_t i = 0; i<buffersize;i++){
    248c:	14 35       	cpi	r17, 0x54	; 84
    248e:	a1 f7       	brne	.-24     	; 0x2478 <_Z13uhreinstellenv+0x27c>
    2490:	39 c2       	rjmp	.+1138   	; 0x2904 <_Z13uhreinstellenv+0x708>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 1:
				rtc.Stunden+=Tastatur.ZahlenausTastatur();
    2492:	8d ed       	ldi	r24, 0xDD	; 221
    2494:	92 e0       	ldi	r25, 0x02	; 2
    2496:	0e 94 9a 1a 	call	0x3534	; 0x3534 <_ZN9Interface17ZahlenausTastaturEv>
    249a:	ef e1       	ldi	r30, 0x1F	; 31
    249c:	f7 e0       	ldi	r31, 0x07	; 7
    249e:	20 81       	ld	r18, Z
    24a0:	90 e0       	ldi	r25, 0x00	; 0
    24a2:	82 0f       	add	r24, r18
    24a4:	91 1d       	adc	r25, r1
				if(rtc.Stunden>=24){
    24a6:	88 31       	cpi	r24, 0x18	; 24
    24a8:	10 f4       	brcc	.+4      	; 0x24ae <_Z13uhreinstellenv+0x2b2>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 1:
				rtc.Stunden+=Tastatur.ZahlenausTastatur();
    24aa:	80 83       	st	Z, r24
    24ac:	5e c2       	rjmp	.+1212   	; 0x296a <_Z13uhreinstellenv+0x76e>
				if(rtc.Stunden>=24){
					rtc.Stunden=0;
    24ae:	ef e1       	ldi	r30, 0x1F	; 31
    24b0:	f7 e0       	ldi	r31, 0x07	; 7
    24b2:	10 82       	st	Z, r1
					pos=-1;
					buffersize=sprintf(buffer,"Stunden falsch");
    24b4:	e2 e8       	ldi	r30, 0x82	; 130
    24b6:	f2 e0       	ldi	r31, 0x02	; 2
    24b8:	a7 2d       	mov	r26, r7
    24ba:	b8 2d       	mov	r27, r8
    24bc:	86 2d       	mov	r24, r6
    24be:	01 90       	ld	r0, Z+
    24c0:	0d 92       	st	X+, r0
    24c2:	8a 95       	dec	r24
    24c4:	e1 f7       	brne	.-8      	; 0x24be <_Z13uhreinstellenv+0x2c2>
    24c6:	2d 88       	ldd	r2, Y+21	; 0x15
    24c8:	3e 88       	ldd	r3, Y+22	; 0x16
    24ca:	1b 2d       	mov	r17, r11
					for(uint8_t i = 0; i<buffersize;i++){
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
    24cc:	f1 01       	movw	r30, r2
    24ce:	61 91       	ld	r22, Z+
    24d0:	1f 01       	movw	r2, r30
    24d2:	28 e3       	ldi	r18, 0x38	; 56
    24d4:	41 2f       	mov	r20, r17
    24d6:	8e ed       	ldi	r24, 0xDE	; 222
    24d8:	92 e0       	ldi	r25, 0x02	; 2
    24da:	0e 94 ab 05 	call	0xb56	; 0xb56 <_ZN7Display9draw_ASCIEhhh>
    24de:	1a 5f       	subi	r17, 0xFA	; 250
				rtc.Stunden+=Tastatur.ZahlenausTastatur();
				if(rtc.Stunden>=24){
					rtc.Stunden=0;
					pos=-1;
					buffersize=sprintf(buffer,"Stunden falsch");
					for(uint8_t i = 0; i<buffersize;i++){
    24e0:	14 35       	cpi	r17, 0x54	; 84
    24e2:	a1 f7       	brne	.-24     	; 0x24cc <_Z13uhreinstellenv+0x2d0>
    24e4:	12 c2       	rjmp	.+1060   	; 0x290a <_Z13uhreinstellenv+0x70e>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 2:
				rtc.Minuten=Tastatur.ZahlenausTastatur()*10;
    24e6:	8d ed       	ldi	r24, 0xDD	; 221
    24e8:	92 e0       	ldi	r25, 0x02	; 2
    24ea:	0e 94 9a 1a 	call	0x3534	; 0x3534 <_ZN9Interface17ZahlenausTastaturEv>
    24ee:	88 0f       	add	r24, r24
    24f0:	98 2f       	mov	r25, r24
    24f2:	99 0f       	add	r25, r25
    24f4:	99 0f       	add	r25, r25
    24f6:	89 0f       	add	r24, r25
				if(rtc.Minuten>=60){
    24f8:	8c 33       	cpi	r24, 0x3C	; 60
    24fa:	20 f4       	brcc	.+8      	; 0x2504 <_Z13uhreinstellenv+0x308>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 2:
				rtc.Minuten=Tastatur.ZahlenausTastatur()*10;
    24fc:	e0 e2       	ldi	r30, 0x20	; 32
    24fe:	f7 e0       	ldi	r31, 0x07	; 7
    2500:	80 83       	st	Z, r24
    2502:	33 c2       	rjmp	.+1126   	; 0x296a <_Z13uhreinstellenv+0x76e>
				if(rtc.Minuten>=60){
					rtc.Minuten=0;
    2504:	e0 e2       	ldi	r30, 0x20	; 32
    2506:	f7 e0       	ldi	r31, 0x07	; 7
    2508:	10 82       	st	Z, r1
					pos=1;
					buffersize=sprintf(buffer,"Minuten falsch");
    250a:	e1 e9       	ldi	r30, 0x91	; 145
    250c:	f2 e0       	ldi	r31, 0x02	; 2
    250e:	a7 2d       	mov	r26, r7
    2510:	b8 2d       	mov	r27, r8
    2512:	86 2d       	mov	r24, r6
    2514:	01 90       	ld	r0, Z+
    2516:	0d 92       	st	X+, r0
    2518:	8a 95       	dec	r24
    251a:	e1 f7       	brne	.-8      	; 0x2514 <_Z13uhreinstellenv+0x318>
    251c:	2d 88       	ldd	r2, Y+21	; 0x15
    251e:	3e 88       	ldd	r3, Y+22	; 0x16
    2520:	1b 2d       	mov	r17, r11
					for(uint8_t i = 0; i<buffersize;i++){
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
    2522:	f1 01       	movw	r30, r2
    2524:	61 91       	ld	r22, Z+
    2526:	1f 01       	movw	r2, r30
    2528:	28 e3       	ldi	r18, 0x38	; 56
    252a:	41 2f       	mov	r20, r17
    252c:	8e ed       	ldi	r24, 0xDE	; 222
    252e:	92 e0       	ldi	r25, 0x02	; 2
    2530:	0e 94 ab 05 	call	0xb56	; 0xb56 <_ZN7Display9draw_ASCIEhhh>
    2534:	1a 5f       	subi	r17, 0xFA	; 250
				rtc.Minuten=Tastatur.ZahlenausTastatur()*10;
				if(rtc.Minuten>=60){
					rtc.Minuten=0;
					pos=1;
					buffersize=sprintf(buffer,"Minuten falsch");
					for(uint8_t i = 0; i<buffersize;i++){
    2536:	14 35       	cpi	r17, 0x54	; 84
    2538:	a1 f7       	brne	.-24     	; 0x2522 <_Z13uhreinstellenv+0x326>
    253a:	ea c1       	rjmp	.+980    	; 0x2910 <_Z13uhreinstellenv+0x714>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 3:
				rtc.Minuten+=Tastatur.ZahlenausTastatur();
    253c:	8d ed       	ldi	r24, 0xDD	; 221
    253e:	92 e0       	ldi	r25, 0x02	; 2
    2540:	0e 94 9a 1a 	call	0x3534	; 0x3534 <_ZN9Interface17ZahlenausTastaturEv>
    2544:	e0 e2       	ldi	r30, 0x20	; 32
    2546:	f7 e0       	ldi	r31, 0x07	; 7
    2548:	20 81       	ld	r18, Z
    254a:	90 e0       	ldi	r25, 0x00	; 0
    254c:	82 0f       	add	r24, r18
    254e:	91 1d       	adc	r25, r1
				if(rtc.Minuten>=60){
    2550:	8c 33       	cpi	r24, 0x3C	; 60
    2552:	10 f4       	brcc	.+4      	; 0x2558 <_Z13uhreinstellenv+0x35c>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 3:
				rtc.Minuten+=Tastatur.ZahlenausTastatur();
    2554:	80 83       	st	Z, r24
    2556:	09 c2       	rjmp	.+1042   	; 0x296a <_Z13uhreinstellenv+0x76e>
				if(rtc.Minuten>=60){
					rtc.Minuten=0;
    2558:	e0 e2       	ldi	r30, 0x20	; 32
    255a:	f7 e0       	ldi	r31, 0x07	; 7
    255c:	10 82       	st	Z, r1
					pos=1;
					buffersize=sprintf(buffer,"Minuten falsch");
    255e:	e1 e9       	ldi	r30, 0x91	; 145
    2560:	f2 e0       	ldi	r31, 0x02	; 2
    2562:	a7 2d       	mov	r26, r7
    2564:	b8 2d       	mov	r27, r8
    2566:	86 2d       	mov	r24, r6
    2568:	01 90       	ld	r0, Z+
    256a:	0d 92       	st	X+, r0
    256c:	8a 95       	dec	r24
    256e:	e1 f7       	brne	.-8      	; 0x2568 <_Z13uhreinstellenv+0x36c>
    2570:	2d 88       	ldd	r2, Y+21	; 0x15
    2572:	3e 88       	ldd	r3, Y+22	; 0x16
    2574:	1b 2d       	mov	r17, r11
					for(uint8_t i = 0; i<buffersize;i++){
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
    2576:	f1 01       	movw	r30, r2
    2578:	61 91       	ld	r22, Z+
    257a:	1f 01       	movw	r2, r30
    257c:	28 e3       	ldi	r18, 0x38	; 56
    257e:	41 2f       	mov	r20, r17
    2580:	8e ed       	ldi	r24, 0xDE	; 222
    2582:	92 e0       	ldi	r25, 0x02	; 2
    2584:	0e 94 ab 05 	call	0xb56	; 0xb56 <_ZN7Display9draw_ASCIEhhh>
    2588:	1a 5f       	subi	r17, 0xFA	; 250
				rtc.Minuten+=Tastatur.ZahlenausTastatur();
				if(rtc.Minuten>=60){
					rtc.Minuten=0;
					pos=1;
					buffersize=sprintf(buffer,"Minuten falsch");
					for(uint8_t i = 0; i<buffersize;i++){
    258a:	14 35       	cpi	r17, 0x54	; 84
    258c:	a1 f7       	brne	.-24     	; 0x2576 <_Z13uhreinstellenv+0x37a>
    258e:	c3 c1       	rjmp	.+902    	; 0x2916 <_Z13uhreinstellenv+0x71a>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 4:
				rtc.Tag=Tastatur.ZahlenausTastatur()*10;
    2590:	8d ed       	ldi	r24, 0xDD	; 221
    2592:	92 e0       	ldi	r25, 0x02	; 2
    2594:	0e 94 9a 1a 	call	0x3534	; 0x3534 <_ZN9Interface17ZahlenausTastaturEv>
    2598:	88 0f       	add	r24, r24
    259a:	98 2f       	mov	r25, r24
    259c:	99 0f       	add	r25, r25
    259e:	99 0f       	add	r25, r25
    25a0:	89 0f       	add	r24, r25
				if(rtc.Tag>=32){
    25a2:	80 32       	cpi	r24, 0x20	; 32
    25a4:	18 f4       	brcc	.+6      	; 0x25ac <_Z13uhreinstellenv+0x3b0>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 4:
				rtc.Tag=Tastatur.ZahlenausTastatur()*10;
    25a6:	f2 01       	movw	r30, r4
    25a8:	80 83       	st	Z, r24
    25aa:	df c1       	rjmp	.+958    	; 0x296a <_Z13uhreinstellenv+0x76e>
				if(rtc.Tag>=32){
					rtc.Tag=0;
    25ac:	f2 01       	movw	r30, r4
    25ae:	10 82       	st	Z, r1
					pos=3;
					buffersize=sprintf(buffer,"Tag falsch");
    25b0:	8b e0       	ldi	r24, 0x0B	; 11
    25b2:	e0 ea       	ldi	r30, 0xA0	; 160
    25b4:	f2 e0       	ldi	r31, 0x02	; 2
    25b6:	a7 2d       	mov	r26, r7
    25b8:	b8 2d       	mov	r27, r8
    25ba:	01 90       	ld	r0, Z+
    25bc:	0d 92       	st	X+, r0
    25be:	8a 95       	dec	r24
    25c0:	e1 f7       	brne	.-8      	; 0x25ba <_Z13uhreinstellenv+0x3be>
    25c2:	2d 88       	ldd	r2, Y+21	; 0x15
    25c4:	3e 88       	ldd	r3, Y+22	; 0x16
    25c6:	1b 2d       	mov	r17, r11
					for(uint8_t i = 0; i<buffersize;i++){
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
    25c8:	f1 01       	movw	r30, r2
    25ca:	61 91       	ld	r22, Z+
    25cc:	1f 01       	movw	r2, r30
    25ce:	28 e3       	ldi	r18, 0x38	; 56
    25d0:	41 2f       	mov	r20, r17
    25d2:	8e ed       	ldi	r24, 0xDE	; 222
    25d4:	92 e0       	ldi	r25, 0x02	; 2
    25d6:	0e 94 ab 05 	call	0xb56	; 0xb56 <_ZN7Display9draw_ASCIEhhh>
    25da:	1a 5f       	subi	r17, 0xFA	; 250
				rtc.Tag=Tastatur.ZahlenausTastatur()*10;
				if(rtc.Tag>=32){
					rtc.Tag=0;
					pos=3;
					buffersize=sprintf(buffer,"Tag falsch");
					for(uint8_t i = 0; i<buffersize;i++){
    25dc:	1c 33       	cpi	r17, 0x3C	; 60
    25de:	a1 f7       	brne	.-24     	; 0x25c8 <_Z13uhreinstellenv+0x3cc>
    25e0:	9d c1       	rjmp	.+826    	; 0x291c <_Z13uhreinstellenv+0x720>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 5:
				rtc.Tag+=Tastatur.ZahlenausTastatur();
    25e2:	8d ed       	ldi	r24, 0xDD	; 221
    25e4:	92 e0       	ldi	r25, 0x02	; 2
    25e6:	0e 94 9a 1a 	call	0x3534	; 0x3534 <_ZN9Interface17ZahlenausTastaturEv>
    25ea:	f2 01       	movw	r30, r4
    25ec:	20 81       	ld	r18, Z
    25ee:	90 e0       	ldi	r25, 0x00	; 0
    25f0:	82 0f       	add	r24, r18
    25f2:	91 1d       	adc	r25, r1
				if(rtc.Tag>=32){
    25f4:	80 32       	cpi	r24, 0x20	; 32
    25f6:	10 f4       	brcc	.+4      	; 0x25fc <_Z13uhreinstellenv+0x400>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 5:
				rtc.Tag+=Tastatur.ZahlenausTastatur();
    25f8:	80 83       	st	Z, r24
    25fa:	b7 c1       	rjmp	.+878    	; 0x296a <_Z13uhreinstellenv+0x76e>
				if(rtc.Tag>=32){
					rtc.Tag=0;
    25fc:	f2 01       	movw	r30, r4
    25fe:	10 82       	st	Z, r1
					pos=3;
					buffersize=sprintf(buffer,"Tag falsch");
    2600:	8b e0       	ldi	r24, 0x0B	; 11
    2602:	e0 ea       	ldi	r30, 0xA0	; 160
    2604:	f2 e0       	ldi	r31, 0x02	; 2
    2606:	a7 2d       	mov	r26, r7
    2608:	b8 2d       	mov	r27, r8
    260a:	01 90       	ld	r0, Z+
    260c:	0d 92       	st	X+, r0
    260e:	8a 95       	dec	r24
    2610:	e1 f7       	brne	.-8      	; 0x260a <_Z13uhreinstellenv+0x40e>
    2612:	2d 88       	ldd	r2, Y+21	; 0x15
    2614:	3e 88       	ldd	r3, Y+22	; 0x16
    2616:	1b 2d       	mov	r17, r11
					for(uint8_t i = 0; i<buffersize;i++){
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
    2618:	f1 01       	movw	r30, r2
    261a:	61 91       	ld	r22, Z+
    261c:	1f 01       	movw	r2, r30
    261e:	28 e3       	ldi	r18, 0x38	; 56
    2620:	41 2f       	mov	r20, r17
    2622:	8e ed       	ldi	r24, 0xDE	; 222
    2624:	92 e0       	ldi	r25, 0x02	; 2
    2626:	0e 94 ab 05 	call	0xb56	; 0xb56 <_ZN7Display9draw_ASCIEhhh>
    262a:	1a 5f       	subi	r17, 0xFA	; 250
				rtc.Tag+=Tastatur.ZahlenausTastatur();
				if(rtc.Tag>=32){
					rtc.Tag=0;
					pos=3;
					buffersize=sprintf(buffer,"Tag falsch");
					for(uint8_t i = 0; i<buffersize;i++){
    262c:	1c 33       	cpi	r17, 0x3C	; 60
    262e:	a1 f7       	brne	.-24     	; 0x2618 <_Z13uhreinstellenv+0x41c>
    2630:	7a c1       	rjmp	.+756    	; 0x2926 <_Z13uhreinstellenv+0x72a>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 6:
				rtc.Monat=Tastatur.ZahlenausTastatur()*10;
    2632:	8d ed       	ldi	r24, 0xDD	; 221
    2634:	92 e0       	ldi	r25, 0x02	; 2
    2636:	0e 94 9a 1a 	call	0x3534	; 0x3534 <_ZN9Interface17ZahlenausTastaturEv>
    263a:	88 0f       	add	r24, r24
    263c:	98 2f       	mov	r25, r24
    263e:	99 0f       	add	r25, r25
    2640:	99 0f       	add	r25, r25
    2642:	89 0f       	add	r24, r25
				if(rtc.Monat>=13){
    2644:	8d 30       	cpi	r24, 0x0D	; 13
    2646:	18 f4       	brcc	.+6      	; 0x264e <_Z13uhreinstellenv+0x452>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 6:
				rtc.Monat=Tastatur.ZahlenausTastatur()*10;
    2648:	f6 01       	movw	r30, r12
    264a:	80 83       	st	Z, r24
    264c:	8e c1       	rjmp	.+796    	; 0x296a <_Z13uhreinstellenv+0x76e>
				if(rtc.Monat>=13){
					rtc.Monat=0;
    264e:	f6 01       	movw	r30, r12
    2650:	10 82       	st	Z, r1
					pos=5;
					buffersize=sprintf(buffer,"Monat falsch");
    2652:	8d e0       	ldi	r24, 0x0D	; 13
    2654:	eb ea       	ldi	r30, 0xAB	; 171
    2656:	f2 e0       	ldi	r31, 0x02	; 2
    2658:	a7 2d       	mov	r26, r7
    265a:	b8 2d       	mov	r27, r8
    265c:	01 90       	ld	r0, Z+
    265e:	0d 92       	st	X+, r0
    2660:	8a 95       	dec	r24
    2662:	e1 f7       	brne	.-8      	; 0x265c <_Z13uhreinstellenv+0x460>
    2664:	2d 88       	ldd	r2, Y+21	; 0x15
    2666:	3e 88       	ldd	r3, Y+22	; 0x16
    2668:	1b 2d       	mov	r17, r11
					for(uint8_t i = 0; i<buffersize;i++){
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
    266a:	f1 01       	movw	r30, r2
    266c:	61 91       	ld	r22, Z+
    266e:	1f 01       	movw	r2, r30
    2670:	28 e3       	ldi	r18, 0x38	; 56
    2672:	41 2f       	mov	r20, r17
    2674:	8e ed       	ldi	r24, 0xDE	; 222
    2676:	92 e0       	ldi	r25, 0x02	; 2
    2678:	0e 94 ab 05 	call	0xb56	; 0xb56 <_ZN7Display9draw_ASCIEhhh>
    267c:	1a 5f       	subi	r17, 0xFA	; 250
				rtc.Monat=Tastatur.ZahlenausTastatur()*10;
				if(rtc.Monat>=13){
					rtc.Monat=0;
					pos=5;
					buffersize=sprintf(buffer,"Monat falsch");
					for(uint8_t i = 0; i<buffersize;i++){
    267e:	18 34       	cpi	r17, 0x48	; 72
    2680:	a1 f7       	brne	.-24     	; 0x266a <_Z13uhreinstellenv+0x46e>
    2682:	56 c1       	rjmp	.+684    	; 0x2930 <_Z13uhreinstellenv+0x734>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 7:
				rtc.Monat+=Tastatur.ZahlenausTastatur();
    2684:	8d ed       	ldi	r24, 0xDD	; 221
    2686:	92 e0       	ldi	r25, 0x02	; 2
    2688:	0e 94 9a 1a 	call	0x3534	; 0x3534 <_ZN9Interface17ZahlenausTastaturEv>
    268c:	f6 01       	movw	r30, r12
    268e:	20 81       	ld	r18, Z
    2690:	90 e0       	ldi	r25, 0x00	; 0
    2692:	82 0f       	add	r24, r18
    2694:	91 1d       	adc	r25, r1
				if(rtc.Monat>=13){
    2696:	8d 30       	cpi	r24, 0x0D	; 13
    2698:	10 f4       	brcc	.+4      	; 0x269e <_Z13uhreinstellenv+0x4a2>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 7:
				rtc.Monat+=Tastatur.ZahlenausTastatur();
    269a:	80 83       	st	Z, r24
    269c:	1e c0       	rjmp	.+60     	; 0x26da <_Z13uhreinstellenv+0x4de>
				if(rtc.Monat>=13){
					rtc.Monat=0;
    269e:	f6 01       	movw	r30, r12
    26a0:	10 82       	st	Z, r1
					pos=5;
					buffersize=sprintf(buffer,"Monat falsch");
    26a2:	8d e0       	ldi	r24, 0x0D	; 13
    26a4:	eb ea       	ldi	r30, 0xAB	; 171
    26a6:	f2 e0       	ldi	r31, 0x02	; 2
    26a8:	a7 2d       	mov	r26, r7
    26aa:	b8 2d       	mov	r27, r8
    26ac:	01 90       	ld	r0, Z+
    26ae:	0d 92       	st	X+, r0
    26b0:	8a 95       	dec	r24
    26b2:	e1 f7       	brne	.-8      	; 0x26ac <_Z13uhreinstellenv+0x4b0>
    26b4:	2d 88       	ldd	r2, Y+21	; 0x15
    26b6:	3e 88       	ldd	r3, Y+22	; 0x16
    26b8:	1b 2d       	mov	r17, r11
					for(uint8_t i = 0; i<buffersize;i++){
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
    26ba:	f1 01       	movw	r30, r2
    26bc:	61 91       	ld	r22, Z+
    26be:	1f 01       	movw	r2, r30
    26c0:	28 e3       	ldi	r18, 0x38	; 56
    26c2:	41 2f       	mov	r20, r17
    26c4:	8e ed       	ldi	r24, 0xDE	; 222
    26c6:	92 e0       	ldi	r25, 0x02	; 2
    26c8:	0e 94 ab 05 	call	0xb56	; 0xb56 <_ZN7Display9draw_ASCIEhhh>
    26cc:	1a 5f       	subi	r17, 0xFA	; 250
				rtc.Monat+=Tastatur.ZahlenausTastatur();
				if(rtc.Monat>=13){
					rtc.Monat=0;
					pos=5;
					buffersize=sprintf(buffer,"Monat falsch");
					for(uint8_t i = 0; i<buffersize;i++){
    26ce:	18 34       	cpi	r17, 0x48	; 72
    26d0:	a1 f7       	brne	.-24     	; 0x26ba <_Z13uhreinstellenv+0x4be>
				break;
			case 7:
				rtc.Monat+=Tastatur.ZahlenausTastatur();
				if(rtc.Monat>=13){
					rtc.Monat=0;
					pos=5;
    26d2:	0f 2e       	mov	r0, r31
    26d4:	f5 e0       	ldi	r31, 0x05	; 5
    26d6:	9f 2e       	mov	r9, r31
    26d8:	f0 2d       	mov	r31, r0
					buffersize=sprintf(buffer,"Monat falsch");
					for(uint8_t i = 0; i<buffersize;i++){
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				if(rtc.Monat==4||rtc.Monat==6||rtc.Monat==9||rtc.Monat==11){
    26da:	f6 01       	movw	r30, r12
    26dc:	90 81       	ld	r25, Z
    26de:	89 2f       	mov	r24, r25
    26e0:	8d 7f       	andi	r24, 0xFD	; 253
    26e2:	84 30       	cpi	r24, 0x04	; 4
    26e4:	11 f0       	breq	.+4      	; 0x26ea <_Z13uhreinstellenv+0x4ee>
    26e6:	89 30       	cpi	r24, 0x09	; 9
    26e8:	09 f5       	brne	.+66     	; 0x272c <_Z13uhreinstellenv+0x530>
					if(rtc.Tag>=31){
    26ea:	f2 01       	movw	r30, r4
    26ec:	80 81       	ld	r24, Z
    26ee:	8f 31       	cpi	r24, 0x1F	; 31
    26f0:	08 f4       	brcc	.+2      	; 0x26f4 <_Z13uhreinstellenv+0x4f8>
    26f2:	ea c0       	rjmp	.+468    	; 0x28c8 <_Z13uhreinstellenv+0x6cc>
						rtc.Tag=0;
    26f4:	10 82       	st	Z, r1
						rtc.Monat=0;
    26f6:	f6 01       	movw	r30, r12
    26f8:	10 82       	st	Z, r1
						pos=3;
						buffersize=sprintf(buffer,"Tag falsch");
    26fa:	8b e0       	ldi	r24, 0x0B	; 11
    26fc:	e0 ea       	ldi	r30, 0xA0	; 160
    26fe:	f2 e0       	ldi	r31, 0x02	; 2
    2700:	a7 2d       	mov	r26, r7
    2702:	b8 2d       	mov	r27, r8
    2704:	01 90       	ld	r0, Z+
    2706:	0d 92       	st	X+, r0
    2708:	8a 95       	dec	r24
    270a:	e1 f7       	brne	.-8      	; 0x2704 <_Z13uhreinstellenv+0x508>
    270c:	2d 88       	ldd	r2, Y+21	; 0x15
    270e:	3e 88       	ldd	r3, Y+22	; 0x16
    2710:	1b 2d       	mov	r17, r11
						for(uint8_t i = 0; i<buffersize;i++){
							oled.draw_ASCI(buffer[i],charsize*i,7*8);
    2712:	f1 01       	movw	r30, r2
    2714:	61 91       	ld	r22, Z+
    2716:	1f 01       	movw	r2, r30
    2718:	28 e3       	ldi	r18, 0x38	; 56
    271a:	41 2f       	mov	r20, r17
    271c:	8e ed       	ldi	r24, 0xDE	; 222
    271e:	92 e0       	ldi	r25, 0x02	; 2
    2720:	0e 94 ab 05 	call	0xb56	; 0xb56 <_ZN7Display9draw_ASCIEhhh>
    2724:	1a 5f       	subi	r17, 0xFA	; 250
					if(rtc.Tag>=31){
						rtc.Tag=0;
						rtc.Monat=0;
						pos=3;
						buffersize=sprintf(buffer,"Tag falsch");
						for(uint8_t i = 0; i<buffersize;i++){
    2726:	1c 33       	cpi	r17, 0x3C	; 60
    2728:	a1 f7       	brne	.-24     	; 0x2712 <_Z13uhreinstellenv+0x516>
    272a:	07 c1       	rjmp	.+526    	; 0x293a <_Z13uhreinstellenv+0x73e>
							oled.draw_ASCI(buffer[i],charsize*i,7*8);
						}
					}
				}
				else if(rtc.Monat==2){
    272c:	92 30       	cpi	r25, 0x02	; 2
    272e:	09 f0       	breq	.+2      	; 0x2732 <_Z13uhreinstellenv+0x536>
    2730:	cb c0       	rjmp	.+406    	; 0x28c8 <_Z13uhreinstellenv+0x6cc>
					if(rtc.Tag>=30){
    2732:	f2 01       	movw	r30, r4
    2734:	80 81       	ld	r24, Z
    2736:	8e 31       	cpi	r24, 0x1E	; 30
    2738:	08 f4       	brcc	.+2      	; 0x273c <_Z13uhreinstellenv+0x540>
    273a:	c6 c0       	rjmp	.+396    	; 0x28c8 <_Z13uhreinstellenv+0x6cc>
						rtc.Tag=0;
    273c:	10 82       	st	Z, r1
						rtc.Monat=0;
    273e:	f6 01       	movw	r30, r12
    2740:	10 82       	st	Z, r1
						pos=3;
						buffersize=sprintf(buffer,"Tag falsch");
    2742:	8b e0       	ldi	r24, 0x0B	; 11
    2744:	e0 ea       	ldi	r30, 0xA0	; 160
    2746:	f2 e0       	ldi	r31, 0x02	; 2
    2748:	a7 2d       	mov	r26, r7
    274a:	b8 2d       	mov	r27, r8
    274c:	01 90       	ld	r0, Z+
    274e:	0d 92       	st	X+, r0
    2750:	8a 95       	dec	r24
    2752:	e1 f7       	brne	.-8      	; 0x274c <_Z13uhreinstellenv+0x550>
    2754:	2d 88       	ldd	r2, Y+21	; 0x15
    2756:	3e 88       	ldd	r3, Y+22	; 0x16
    2758:	1b 2d       	mov	r17, r11
						for(uint8_t i = 0; i<buffersize;i++){
							oled.draw_ASCI(buffer[i],charsize*i,7*8);
    275a:	f1 01       	movw	r30, r2
    275c:	61 91       	ld	r22, Z+
    275e:	1f 01       	movw	r2, r30
    2760:	28 e3       	ldi	r18, 0x38	; 56
    2762:	41 2f       	mov	r20, r17
    2764:	8e ed       	ldi	r24, 0xDE	; 222
    2766:	92 e0       	ldi	r25, 0x02	; 2
    2768:	0e 94 ab 05 	call	0xb56	; 0xb56 <_ZN7Display9draw_ASCIEhhh>
    276c:	1a 5f       	subi	r17, 0xFA	; 250
					if(rtc.Tag>=30){
						rtc.Tag=0;
						rtc.Monat=0;
						pos=3;
						buffersize=sprintf(buffer,"Tag falsch");
						for(uint8_t i = 0; i<buffersize;i++){
    276e:	1c 33       	cpi	r17, 0x3C	; 60
    2770:	a1 f7       	brne	.-24     	; 0x275a <_Z13uhreinstellenv+0x55e>
    2772:	e8 c0       	rjmp	.+464    	; 0x2944 <_Z13uhreinstellenv+0x748>
						}
					}
				}
				break;
			case 8:
				rtc.Jahr=Tastatur.ZahlenausTastatur()*10;
    2774:	8d ed       	ldi	r24, 0xDD	; 221
    2776:	92 e0       	ldi	r25, 0x02	; 2
    2778:	0e 94 9a 1a 	call	0x3534	; 0x3534 <_ZN9Interface17ZahlenausTastaturEv>
    277c:	88 0f       	add	r24, r24
    277e:	98 2f       	mov	r25, r24
    2780:	99 0f       	add	r25, r25
    2782:	99 0f       	add	r25, r25
    2784:	89 0f       	add	r24, r25
				if(rtc.Jahr>=50){
    2786:	82 33       	cpi	r24, 0x32	; 50
    2788:	20 f4       	brcc	.+8      	; 0x2792 <_Z13uhreinstellenv+0x596>
						}
					}
				}
				break;
			case 8:
				rtc.Jahr=Tastatur.ZahlenausTastatur()*10;
    278a:	e5 e2       	ldi	r30, 0x25	; 37
    278c:	f7 e0       	ldi	r31, 0x07	; 7
    278e:	80 83       	st	Z, r24
    2790:	ec c0       	rjmp	.+472    	; 0x296a <_Z13uhreinstellenv+0x76e>
				if(rtc.Jahr>=50){
					rtc.Jahr=0;
    2792:	e5 e2       	ldi	r30, 0x25	; 37
    2794:	f7 e0       	ldi	r31, 0x07	; 7
    2796:	10 82       	st	Z, r1
					pos=7;
					buffersize=sprintf(buffer,"Jahr falsch");
    2798:	8c e0       	ldi	r24, 0x0C	; 12
    279a:	e8 eb       	ldi	r30, 0xB8	; 184
    279c:	f2 e0       	ldi	r31, 0x02	; 2
    279e:	a7 2d       	mov	r26, r7
    27a0:	b8 2d       	mov	r27, r8
    27a2:	01 90       	ld	r0, Z+
    27a4:	0d 92       	st	X+, r0
    27a6:	8a 95       	dec	r24
    27a8:	e1 f7       	brne	.-8      	; 0x27a2 <_Z13uhreinstellenv+0x5a6>
    27aa:	2d 88       	ldd	r2, Y+21	; 0x15
    27ac:	3e 88       	ldd	r3, Y+22	; 0x16
    27ae:	1b 2d       	mov	r17, r11
					for(uint8_t i = 0; i<buffersize;i++){
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
    27b0:	f1 01       	movw	r30, r2
    27b2:	61 91       	ld	r22, Z+
    27b4:	1f 01       	movw	r2, r30
    27b6:	28 e3       	ldi	r18, 0x38	; 56
    27b8:	41 2f       	mov	r20, r17
    27ba:	8e ed       	ldi	r24, 0xDE	; 222
    27bc:	92 e0       	ldi	r25, 0x02	; 2
    27be:	0e 94 ab 05 	call	0xb56	; 0xb56 <_ZN7Display9draw_ASCIEhhh>
    27c2:	1a 5f       	subi	r17, 0xFA	; 250
				rtc.Jahr=Tastatur.ZahlenausTastatur()*10;
				if(rtc.Jahr>=50){
					rtc.Jahr=0;
					pos=7;
					buffersize=sprintf(buffer,"Jahr falsch");
					for(uint8_t i = 0; i<buffersize;i++){
    27c4:	12 34       	cpi	r17, 0x42	; 66
    27c6:	a1 f7       	brne	.-24     	; 0x27b0 <_Z13uhreinstellenv+0x5b4>
    27c8:	c2 c0       	rjmp	.+388    	; 0x294e <_Z13uhreinstellenv+0x752>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 9:
				rtc.Jahr+=Tastatur.ZahlenausTastatur();
    27ca:	8d ed       	ldi	r24, 0xDD	; 221
    27cc:	92 e0       	ldi	r25, 0x02	; 2
    27ce:	0e 94 9a 1a 	call	0x3534	; 0x3534 <_ZN9Interface17ZahlenausTastaturEv>
    27d2:	e5 e2       	ldi	r30, 0x25	; 37
    27d4:	f7 e0       	ldi	r31, 0x07	; 7
    27d6:	20 81       	ld	r18, Z
    27d8:	90 e0       	ldi	r25, 0x00	; 0
    27da:	82 0f       	add	r24, r18
    27dc:	91 1d       	adc	r25, r1
				if(rtc.Jahr>=50){
    27de:	82 33       	cpi	r24, 0x32	; 50
    27e0:	10 f4       	brcc	.+4      	; 0x27e6 <_Z13uhreinstellenv+0x5ea>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 9:
				rtc.Jahr+=Tastatur.ZahlenausTastatur();
    27e2:	80 83       	st	Z, r24
    27e4:	1f c0       	rjmp	.+62     	; 0x2824 <_Z13uhreinstellenv+0x628>
				if(rtc.Jahr>=50){
					rtc.Jahr=0;
    27e6:	e5 e2       	ldi	r30, 0x25	; 37
    27e8:	f7 e0       	ldi	r31, 0x07	; 7
    27ea:	10 82       	st	Z, r1
					pos=7;
					buffersize=sprintf(buffer,"Jahr falsch");
    27ec:	8c e0       	ldi	r24, 0x0C	; 12
    27ee:	e8 eb       	ldi	r30, 0xB8	; 184
    27f0:	f2 e0       	ldi	r31, 0x02	; 2
    27f2:	a7 2d       	mov	r26, r7
    27f4:	b8 2d       	mov	r27, r8
    27f6:	01 90       	ld	r0, Z+
    27f8:	0d 92       	st	X+, r0
    27fa:	8a 95       	dec	r24
    27fc:	e1 f7       	brne	.-8      	; 0x27f6 <_Z13uhreinstellenv+0x5fa>
    27fe:	2d 88       	ldd	r2, Y+21	; 0x15
    2800:	3e 88       	ldd	r3, Y+22	; 0x16
    2802:	1b 2d       	mov	r17, r11
					for(uint8_t i = 0; i<buffersize;i++){
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
    2804:	f1 01       	movw	r30, r2
    2806:	61 91       	ld	r22, Z+
    2808:	1f 01       	movw	r2, r30
    280a:	28 e3       	ldi	r18, 0x38	; 56
    280c:	41 2f       	mov	r20, r17
    280e:	8e ed       	ldi	r24, 0xDE	; 222
    2810:	92 e0       	ldi	r25, 0x02	; 2
    2812:	0e 94 ab 05 	call	0xb56	; 0xb56 <_ZN7Display9draw_ASCIEhhh>
    2816:	1a 5f       	subi	r17, 0xFA	; 250
				rtc.Jahr+=Tastatur.ZahlenausTastatur();
				if(rtc.Jahr>=50){
					rtc.Jahr=0;
					pos=7;
					buffersize=sprintf(buffer,"Jahr falsch");
					for(uint8_t i = 0; i<buffersize;i++){
    2818:	12 34       	cpi	r17, 0x42	; 66
    281a:	a1 f7       	brne	.-24     	; 0x2804 <_Z13uhreinstellenv+0x608>
				break;
			case 9:
				rtc.Jahr+=Tastatur.ZahlenausTastatur();
				if(rtc.Jahr>=50){
					rtc.Jahr=0;
					pos=7;
    281c:	0f 2e       	mov	r0, r31
    281e:	f7 e0       	ldi	r31, 0x07	; 7
    2820:	9f 2e       	mov	r9, r31
    2822:	f0 2d       	mov	r31, r0
					buffersize=sprintf(buffer,"Jahr falsch");
					for(uint8_t i = 0; i<buffersize;i++){
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				if(rtc.Monat==2){
    2824:	f6 01       	movw	r30, r12
    2826:	80 81       	ld	r24, Z
    2828:	82 30       	cpi	r24, 0x02	; 2
    282a:	09 f0       	breq	.+2      	; 0x282e <_Z13uhreinstellenv+0x632>
    282c:	4d c0       	rjmp	.+154    	; 0x28c8 <_Z13uhreinstellenv+0x6cc>
					if(rtc.Jahr%4==0){
    282e:	e5 e2       	ldi	r30, 0x25	; 37
    2830:	f7 e0       	ldi	r31, 0x07	; 7
    2832:	80 81       	ld	r24, Z
    2834:	83 70       	andi	r24, 0x03	; 3
    2836:	21 f5       	brne	.+72     	; 0x2880 <_Z13uhreinstellenv+0x684>
						if (rtc.Tag>=30)
    2838:	f2 01       	movw	r30, r4
    283a:	80 81       	ld	r24, Z
    283c:	8e 31       	cpi	r24, 0x1E	; 30
    283e:	08 f4       	brcc	.+2      	; 0x2842 <_Z13uhreinstellenv+0x646>
    2840:	43 c0       	rjmp	.+134    	; 0x28c8 <_Z13uhreinstellenv+0x6cc>
						{
							rtc.Tag=0;
    2842:	10 82       	st	Z, r1
							rtc.Monat=0;
    2844:	f6 01       	movw	r30, r12
    2846:	10 82       	st	Z, r1
							rtc.Jahr=0;
    2848:	e5 e2       	ldi	r30, 0x25	; 37
    284a:	f7 e0       	ldi	r31, 0x07	; 7
    284c:	10 82       	st	Z, r1
							pos=3;
							buffersize=sprintf(buffer,"Tag falsch");
    284e:	8b e0       	ldi	r24, 0x0B	; 11
    2850:	e0 ea       	ldi	r30, 0xA0	; 160
    2852:	f2 e0       	ldi	r31, 0x02	; 2
    2854:	a7 2d       	mov	r26, r7
    2856:	b8 2d       	mov	r27, r8
    2858:	01 90       	ld	r0, Z+
    285a:	0d 92       	st	X+, r0
    285c:	8a 95       	dec	r24
    285e:	e1 f7       	brne	.-8      	; 0x2858 <_Z13uhreinstellenv+0x65c>
    2860:	2d 88       	ldd	r2, Y+21	; 0x15
    2862:	3e 88       	ldd	r3, Y+22	; 0x16
    2864:	1b 2d       	mov	r17, r11
							for(uint8_t i = 0; i<buffersize;i++){
								oled.draw_ASCI(buffer[i],charsize*i,7*8);
    2866:	f1 01       	movw	r30, r2
    2868:	61 91       	ld	r22, Z+
    286a:	1f 01       	movw	r2, r30
    286c:	28 e3       	ldi	r18, 0x38	; 56
    286e:	41 2f       	mov	r20, r17
    2870:	8e ed       	ldi	r24, 0xDE	; 222
    2872:	92 e0       	ldi	r25, 0x02	; 2
    2874:	0e 94 ab 05 	call	0xb56	; 0xb56 <_ZN7Display9draw_ASCIEhhh>
    2878:	1a 5f       	subi	r17, 0xFA	; 250
							rtc.Tag=0;
							rtc.Monat=0;
							rtc.Jahr=0;
							pos=3;
							buffersize=sprintf(buffer,"Tag falsch");
							for(uint8_t i = 0; i<buffersize;i++){
    287a:	1c 33       	cpi	r17, 0x3C	; 60
    287c:	a1 f7       	brne	.-24     	; 0x2866 <_Z13uhreinstellenv+0x66a>
    287e:	6c c0       	rjmp	.+216    	; 0x2958 <_Z13uhreinstellenv+0x75c>
								oled.draw_ASCI(buffer[i],charsize*i,7*8);
							}
						}
					}
					else{
						if(rtc.Tag>=29){
    2880:	f2 01       	movw	r30, r4
    2882:	80 81       	ld	r24, Z
    2884:	8d 31       	cpi	r24, 0x1D	; 29
    2886:	00 f1       	brcs	.+64     	; 0x28c8 <_Z13uhreinstellenv+0x6cc>
							rtc.Tag=0;
    2888:	10 82       	st	Z, r1
							rtc.Monat=0;
    288a:	f6 01       	movw	r30, r12
    288c:	10 82       	st	Z, r1
							rtc.Jahr=0;
    288e:	e5 e2       	ldi	r30, 0x25	; 37
    2890:	f7 e0       	ldi	r31, 0x07	; 7
    2892:	10 82       	st	Z, r1
							pos=3;
							buffersize=sprintf(buffer,"Tag falsch");
    2894:	8b e0       	ldi	r24, 0x0B	; 11
    2896:	e0 ea       	ldi	r30, 0xA0	; 160
    2898:	f2 e0       	ldi	r31, 0x02	; 2
    289a:	a7 2d       	mov	r26, r7
    289c:	b8 2d       	mov	r27, r8
    289e:	01 90       	ld	r0, Z+
    28a0:	0d 92       	st	X+, r0
    28a2:	8a 95       	dec	r24
    28a4:	e1 f7       	brne	.-8      	; 0x289e <_Z13uhreinstellenv+0x6a2>
    28a6:	2d 88       	ldd	r2, Y+21	; 0x15
    28a8:	3e 88       	ldd	r3, Y+22	; 0x16
    28aa:	1b 2d       	mov	r17, r11
							for(uint8_t i = 0; i<buffersize;i++){
								oled.draw_ASCI(buffer[i],charsize*i,7*8);
    28ac:	f1 01       	movw	r30, r2
    28ae:	61 91       	ld	r22, Z+
    28b0:	1f 01       	movw	r2, r30
    28b2:	28 e3       	ldi	r18, 0x38	; 56
    28b4:	41 2f       	mov	r20, r17
    28b6:	8e ed       	ldi	r24, 0xDE	; 222
    28b8:	92 e0       	ldi	r25, 0x02	; 2
    28ba:	0e 94 ab 05 	call	0xb56	; 0xb56 <_ZN7Display9draw_ASCIEhhh>
    28be:	1a 5f       	subi	r17, 0xFA	; 250
							rtc.Tag=0;
							rtc.Monat=0;
							rtc.Jahr=0;
							pos=3;
							buffersize=sprintf(buffer,"Tag falsch");
							for(uint8_t i = 0; i<buffersize;i++){
    28c0:	1c 33       	cpi	r17, 0x3C	; 60
    28c2:	a1 f7       	brne	.-24     	; 0x28ac <_Z13uhreinstellenv+0x6b0>
    28c4:	4e c0       	rjmp	.+156    	; 0x2962 <_Z13uhreinstellenv+0x766>
						}
					}
				}
				break;
			default:
				pos++;
    28c6:	93 94       	inc	r9
				break;
		}
		pos++;
    28c8:	93 94       	inc	r9
	
	oled.clearFrame();
	char buffer[20];
	uint8_t buffersize;
	uint8_t pos=0;
	while(pos<11){
    28ca:	fa e0       	ldi	r31, 0x0A	; 10
    28cc:	f9 15       	cp	r31, r9
    28ce:	08 f0       	brcs	.+2      	; 0x28d2 <_Z13uhreinstellenv+0x6d6>
    28d0:	d4 cc       	rjmp	.-1624   	; 0x227a <_Z13uhreinstellenv+0x7e>
				break;
		}
		pos++;
	}
	
	rtc.Sekunden		= 0;
    28d2:	10 92 21 07 	sts	0x0721, r1
	rtc.HundSekunden	= 0;
    28d6:	10 92 22 07 	sts	0x0722, r1
	oled.clearFrame();
    28da:	8e ed       	ldi	r24, 0xDE	; 222
    28dc:	92 e0       	ldi	r25, 0x02	; 2
    28de:	0e 94 c0 02 	call	0x580	; 0x580 <_ZN7Display10clearFrameEv>
	rtc.ausgabedatumneu();
    28e2:	8f e0       	ldi	r24, 0x0F	; 15
    28e4:	97 e0       	ldi	r25, 0x07	; 7
    28e6:	0e 94 a0 1e 	call	0x3d40	; 0x3d40 <_ZN3RTC15ausgabedatumneuEv>
	rtc.ausgabezeitneu();
    28ea:	8f e0       	ldi	r24, 0x0F	; 15
    28ec:	97 e0       	ldi	r25, 0x07	; 7
    28ee:	0e 94 67 1e 	call	0x3cce	; 0x3cce <_ZN3RTC14ausgabezeitneuEv>
	rtc.RTCstart();
    28f2:	8f e0       	ldi	r24, 0x0F	; 15
    28f4:	97 e0       	ldi	r25, 0x07	; 7
    28f6:	0e 94 78 1f 	call	0x3ef0	; 0x3ef0 <_ZN3RTC8RTCstartEv>
    28fa:	39 c0       	rjmp	.+114    	; 0x296e <_Z13uhreinstellenv+0x772>

		oled.sendFrame();
		oled.clearFrame();
		switch (pos) {
			case 0:
				rtc.Stunden=Tastatur.ZahlenausTastatur()*10;
    28fc:	ef e1       	ldi	r30, 0x1F	; 31
    28fe:	f7 e0       	ldi	r31, 0x07	; 7
    2900:	80 83       	st	Z, r24
    2902:	33 c0       	rjmp	.+102    	; 0x296a <_Z13uhreinstellenv+0x76e>
				if(rtc.Stunden>=24){
					rtc.Stunden=0;
					pos=-1;
    2904:	99 24       	eor	r9, r9
    2906:	9a 94       	dec	r9
    2908:	30 c0       	rjmp	.+96     	; 0x296a <_Z13uhreinstellenv+0x76e>
				break;
			case 1:
				rtc.Stunden+=Tastatur.ZahlenausTastatur();
				if(rtc.Stunden>=24){
					rtc.Stunden=0;
					pos=-1;
    290a:	99 24       	eor	r9, r9
    290c:	9a 94       	dec	r9
    290e:	2d c0       	rjmp	.+90     	; 0x296a <_Z13uhreinstellenv+0x76e>
				break;
			case 2:
				rtc.Minuten=Tastatur.ZahlenausTastatur()*10;
				if(rtc.Minuten>=60){
					rtc.Minuten=0;
					pos=1;
    2910:	99 24       	eor	r9, r9
    2912:	93 94       	inc	r9
    2914:	2a c0       	rjmp	.+84     	; 0x296a <_Z13uhreinstellenv+0x76e>
				break;
			case 3:
				rtc.Minuten+=Tastatur.ZahlenausTastatur();
				if(rtc.Minuten>=60){
					rtc.Minuten=0;
					pos=1;
    2916:	99 24       	eor	r9, r9
    2918:	93 94       	inc	r9
    291a:	27 c0       	rjmp	.+78     	; 0x296a <_Z13uhreinstellenv+0x76e>
				break;
			case 4:
				rtc.Tag=Tastatur.ZahlenausTastatur()*10;
				if(rtc.Tag>=32){
					rtc.Tag=0;
					pos=3;
    291c:	0f 2e       	mov	r0, r31
    291e:	f3 e0       	ldi	r31, 0x03	; 3
    2920:	9f 2e       	mov	r9, r31
    2922:	f0 2d       	mov	r31, r0
    2924:	22 c0       	rjmp	.+68     	; 0x296a <_Z13uhreinstellenv+0x76e>
				break;
			case 5:
				rtc.Tag+=Tastatur.ZahlenausTastatur();
				if(rtc.Tag>=32){
					rtc.Tag=0;
					pos=3;
    2926:	0f 2e       	mov	r0, r31
    2928:	f3 e0       	ldi	r31, 0x03	; 3
    292a:	9f 2e       	mov	r9, r31
    292c:	f0 2d       	mov	r31, r0
    292e:	1d c0       	rjmp	.+58     	; 0x296a <_Z13uhreinstellenv+0x76e>
				break;
			case 6:
				rtc.Monat=Tastatur.ZahlenausTastatur()*10;
				if(rtc.Monat>=13){
					rtc.Monat=0;
					pos=5;
    2930:	0f 2e       	mov	r0, r31
    2932:	f5 e0       	ldi	r31, 0x05	; 5
    2934:	9f 2e       	mov	r9, r31
    2936:	f0 2d       	mov	r31, r0
    2938:	18 c0       	rjmp	.+48     	; 0x296a <_Z13uhreinstellenv+0x76e>
				}
				if(rtc.Monat==4||rtc.Monat==6||rtc.Monat==9||rtc.Monat==11){
					if(rtc.Tag>=31){
						rtc.Tag=0;
						rtc.Monat=0;
						pos=3;
    293a:	0f 2e       	mov	r0, r31
    293c:	f3 e0       	ldi	r31, 0x03	; 3
    293e:	9f 2e       	mov	r9, r31
    2940:	f0 2d       	mov	r31, r0
    2942:	13 c0       	rjmp	.+38     	; 0x296a <_Z13uhreinstellenv+0x76e>
				}
				else if(rtc.Monat==2){
					if(rtc.Tag>=30){
						rtc.Tag=0;
						rtc.Monat=0;
						pos=3;
    2944:	0f 2e       	mov	r0, r31
    2946:	f3 e0       	ldi	r31, 0x03	; 3
    2948:	9f 2e       	mov	r9, r31
    294a:	f0 2d       	mov	r31, r0
    294c:	0e c0       	rjmp	.+28     	; 0x296a <_Z13uhreinstellenv+0x76e>
				break;
			case 8:
				rtc.Jahr=Tastatur.ZahlenausTastatur()*10;
				if(rtc.Jahr>=50){
					rtc.Jahr=0;
					pos=7;
    294e:	0f 2e       	mov	r0, r31
    2950:	f7 e0       	ldi	r31, 0x07	; 7
    2952:	9f 2e       	mov	r9, r31
    2954:	f0 2d       	mov	r31, r0
    2956:	09 c0       	rjmp	.+18     	; 0x296a <_Z13uhreinstellenv+0x76e>
						if (rtc.Tag>=30)
						{
							rtc.Tag=0;
							rtc.Monat=0;
							rtc.Jahr=0;
							pos=3;
    2958:	0f 2e       	mov	r0, r31
    295a:	f3 e0       	ldi	r31, 0x03	; 3
    295c:	9f 2e       	mov	r9, r31
    295e:	f0 2d       	mov	r31, r0
    2960:	04 c0       	rjmp	.+8      	; 0x296a <_Z13uhreinstellenv+0x76e>
					else{
						if(rtc.Tag>=29){
							rtc.Tag=0;
							rtc.Monat=0;
							rtc.Jahr=0;
							pos=3;
    2962:	0f 2e       	mov	r0, r31
    2964:	f3 e0       	ldi	r31, 0x03	; 3
    2966:	9f 2e       	mov	r9, r31
    2968:	f0 2d       	mov	r31, r0
				break;
			default:
				pos++;
				break;
		}
		pos++;
    296a:	93 94       	inc	r9
    296c:	86 cc       	rjmp	.-1780   	; 0x227a <_Z13uhreinstellenv+0x7e>
	rtc.HundSekunden	= 0;
	oled.clearFrame();
	rtc.ausgabedatumneu();
	rtc.ausgabezeitneu();
	rtc.RTCstart();
}
    296e:	66 96       	adiw	r28, 0x16	; 22
    2970:	0f b6       	in	r0, 0x3f	; 63
    2972:	f8 94       	cli
    2974:	de bf       	out	0x3e, r29	; 62
    2976:	0f be       	out	0x3f, r0	; 63
    2978:	cd bf       	out	0x3d, r28	; 61
    297a:	df 91       	pop	r29
    297c:	cf 91       	pop	r28
    297e:	1f 91       	pop	r17
    2980:	0f 91       	pop	r16
    2982:	ff 90       	pop	r15
    2984:	ef 90       	pop	r14
    2986:	df 90       	pop	r13
    2988:	cf 90       	pop	r12
    298a:	bf 90       	pop	r11
    298c:	af 90       	pop	r10
    298e:	9f 90       	pop	r9
    2990:	8f 90       	pop	r8
    2992:	7f 90       	pop	r7
    2994:	6f 90       	pop	r6
    2996:	5f 90       	pop	r5
    2998:	4f 90       	pop	r4
    299a:	3f 90       	pop	r3
    299c:	2f 90       	pop	r2
    299e:	08 95       	ret

000029a0 <__vector_9>:
uint8_t pos;		//Handler fuer die Einganbe von Zahlen

//Ausgelagerte Sammlung der einzelnen Seitenlayouts
#include "Seiten.h"

ISR(TIMER2_OVF_vect){	//Vektor fuer die RTC
    29a0:	1f 92       	push	r1
    29a2:	0f 92       	push	r0
    29a4:	0f b6       	in	r0, 0x3f	; 63
    29a6:	0f 92       	push	r0
    29a8:	11 24       	eor	r1, r1
    29aa:	8f 93       	push	r24
    29ac:	ef 93       	push	r30
    29ae:	ff 93       	push	r31
	TCNT2=TIMER2RTCTIME;
    29b0:	10 92 b2 00 	sts	0x00B2, r1
	rtc.Sekunden++;
    29b4:	e1 e2       	ldi	r30, 0x21	; 33
    29b6:	f7 e0       	ldi	r31, 0x07	; 7
    29b8:	80 81       	ld	r24, Z
    29ba:	8f 5f       	subi	r24, 0xFF	; 255
    29bc:	80 83       	st	Z, r24
	rtc.interupts|= (1<<sekundeninterupt);
    29be:	e6 e2       	ldi	r30, 0x26	; 38
    29c0:	f7 e0       	ldi	r31, 0x07	; 7
    29c2:	80 81       	ld	r24, Z
    29c4:	82 60       	ori	r24, 0x02	; 2
    29c6:	80 83       	st	Z, r24
}
    29c8:	ff 91       	pop	r31
    29ca:	ef 91       	pop	r30
    29cc:	8f 91       	pop	r24
    29ce:	0f 90       	pop	r0
    29d0:	0f be       	out	0x3f, r0	; 63
    29d2:	0f 90       	pop	r0
    29d4:	1f 90       	pop	r1
    29d6:	18 95       	reti

000029d8 <_Z15geschwindigkeitf>:

#define zeitproachtzaehlungen 0.001024
#define zaehlungenprozeiteinheit 8.0

double geschw;
void geschwindigkeit(float radius){
    29d8:	cf 92       	push	r12
    29da:	df 92       	push	r13
    29dc:	ef 92       	push	r14
    29de:	ff 92       	push	r15
    29e0:	0f 93       	push	r16
    29e2:	1f 93       	push	r17
    29e4:	cf 93       	push	r28
    29e6:	df 93       	push	r29
	//uint16_t zaehlungen = (TCNT1H<<8) | (TCNT1L);
	uint16_t zaehlungen = TCNT1;
    29e8:	c4 e8       	ldi	r28, 0x84	; 132
    29ea:	d0 e0       	ldi	r29, 0x00	; 0
    29ec:	08 81       	ld	r16, Y
    29ee:	19 81       	ldd	r17, Y+1	; 0x01
	geschw = (radius/100.0)*2*M_PI/((zaehlungen/zaehlungenprozeiteinheit)*zeitproachtzaehlungen);
    29f0:	20 e0       	ldi	r18, 0x00	; 0
    29f2:	30 e0       	ldi	r19, 0x00	; 0
    29f4:	48 ec       	ldi	r20, 0xC8	; 200
    29f6:	52 e4       	ldi	r21, 0x42	; 66
    29f8:	0e 94 82 20 	call	0x4104	; 0x4104 <__divsf3>
    29fc:	9b 01       	movw	r18, r22
    29fe:	ac 01       	movw	r20, r24
    2a00:	0e 94 b5 1f 	call	0x3f6a	; 0x3f6a <__addsf3>
    2a04:	2b ed       	ldi	r18, 0xDB	; 219
    2a06:	3f e0       	ldi	r19, 0x0F	; 15
    2a08:	49 e4       	ldi	r20, 0x49	; 73
    2a0a:	50 e4       	ldi	r21, 0x40	; 64
    2a0c:	0e 94 36 22 	call	0x446c	; 0x446c <__mulsf3>
    2a10:	6b 01       	movw	r12, r22
    2a12:	7c 01       	movw	r14, r24
    2a14:	b8 01       	movw	r22, r16
    2a16:	80 e0       	ldi	r24, 0x00	; 0
    2a18:	90 e0       	ldi	r25, 0x00	; 0
    2a1a:	0e 94 1b 21 	call	0x4236	; 0x4236 <__floatunsisf>
    2a1e:	20 e0       	ldi	r18, 0x00	; 0
    2a20:	30 e0       	ldi	r19, 0x00	; 0
    2a22:	40 e0       	ldi	r20, 0x00	; 0
    2a24:	5e e3       	ldi	r21, 0x3E	; 62
    2a26:	0e 94 36 22 	call	0x446c	; 0x446c <__mulsf3>
    2a2a:	2d eb       	ldi	r18, 0xBD	; 189
    2a2c:	37 e3       	ldi	r19, 0x37	; 55
    2a2e:	46 e8       	ldi	r20, 0x86	; 134
    2a30:	5a e3       	ldi	r21, 0x3A	; 58
    2a32:	0e 94 36 22 	call	0x446c	; 0x446c <__mulsf3>
    2a36:	9b 01       	movw	r18, r22
    2a38:	ac 01       	movw	r20, r24
    2a3a:	c7 01       	movw	r24, r14
    2a3c:	b6 01       	movw	r22, r12
    2a3e:	0e 94 82 20 	call	0x4104	; 0x4104 <__divsf3>
    2a42:	60 93 c4 02 	sts	0x02C4, r22
    2a46:	70 93 c5 02 	sts	0x02C5, r23
    2a4a:	80 93 c6 02 	sts	0x02C6, r24
    2a4e:	90 93 c7 02 	sts	0x02C7, r25
	//TCNT1H = 0;
	//TCNT1L = 0;
	TCNT1 = 0;
    2a52:	19 82       	std	Y+1, r1	; 0x01
    2a54:	18 82       	st	Y, r1
}
    2a56:	df 91       	pop	r29
    2a58:	cf 91       	pop	r28
    2a5a:	1f 91       	pop	r17
    2a5c:	0f 91       	pop	r16
    2a5e:	ff 90       	pop	r15
    2a60:	ef 90       	pop	r14
    2a62:	df 90       	pop	r13
    2a64:	cf 90       	pop	r12
    2a66:	08 95       	ret

00002a68 <_Z13reed_debouncePVhh>:

uint8_t reed_debounce(volatile uint8_t *port, uint8_t pin)
{
	if ( !(*port & (1 << pin)) )
    2a68:	fc 01       	movw	r30, r24
    2a6a:	20 81       	ld	r18, Z
    2a6c:	30 e0       	ldi	r19, 0x00	; 0
    2a6e:	06 2e       	mov	r0, r22
    2a70:	02 c0       	rjmp	.+4      	; 0x2a76 <_Z13reed_debouncePVhh+0xe>
    2a72:	35 95       	asr	r19
    2a74:	27 95       	ror	r18
    2a76:	0a 94       	dec	r0
    2a78:	e2 f7       	brpl	.-8      	; 0x2a72 <_Z13reed_debouncePVhh+0xa>
    2a7a:	20 fd       	sbrc	r18, 0
    2a7c:	15 c0       	rjmp	.+42     	; 0x2aa8 <_Z13reed_debouncePVhh+0x40>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2a7e:	f5 e8       	ldi	r31, 0x85	; 133
    2a80:	fa 95       	dec	r31
    2a82:	f1 f7       	brne	.-4      	; 0x2a80 <_Z13reed_debouncePVhh+0x18>
    2a84:	00 00       	nop
	{
		/* Pin wurde auf Masse gezogen, ms warten   */
		_delay_us(50);
		//_delay_us(50);
		if ( (*port & (1 << pin)) )
    2a86:	fc 01       	movw	r30, r24
    2a88:	80 81       	ld	r24, Z
    2a8a:	90 e0       	ldi	r25, 0x00	; 0
    2a8c:	9c 01       	movw	r18, r24
    2a8e:	02 c0       	rjmp	.+4      	; 0x2a94 <_Z13reed_debouncePVhh+0x2c>
    2a90:	35 95       	asr	r19
    2a92:	27 95       	ror	r18
    2a94:	6a 95       	dec	r22
    2a96:	e2 f7       	brpl	.-8      	; 0x2a90 <_Z13reed_debouncePVhh+0x28>
    2a98:	20 ff       	sbrs	r18, 0
    2a9a:	08 c0       	rjmp	.+16     	; 0x2aac <_Z13reed_debouncePVhh+0x44>
    2a9c:	32 e0       	ldi	r19, 0x02	; 2
    2a9e:	3a 95       	dec	r19
    2aa0:	f1 f7       	brne	.-4      	; 0x2a9e <_Z13reed_debouncePVhh+0x36>
    2aa2:	00 c0       	rjmp	.+0      	; 0x2aa4 <_Z13reed_debouncePVhh+0x3c>
		{
			/* Anwender Zeit zum Loslassen des Tasters geben */
			_delay_us(1);
			return 1;
    2aa4:	81 e0       	ldi	r24, 0x01	; 1
    2aa6:	08 95       	ret
		}
	}
	return 0;
    2aa8:	80 e0       	ldi	r24, 0x00	; 0
    2aaa:	08 95       	ret
    2aac:	80 e0       	ldi	r24, 0x00	; 0
}
    2aae:	08 95       	ret

00002ab0 <_Z15initialisierungv>:
    }
}

void initialisierung(){
	//nullen der Flagregister
	rtc.interupts=0;
    2ab0:	10 92 26 07 	sts	0x0726, r1
	anzeige=0;
    2ab4:	10 92 ca 02 	sts	0x02CA, r1
    2ab8:	10 92 c9 02 	sts	0x02C9, r1
	pos=0;
    2abc:	10 92 c8 02 	sts	0x02C8, r1
	//initialisieren des Zaehler fuer die Winkelgeschw sowie den Timer
	geschw=0;
    2ac0:	10 92 c4 02 	sts	0x02C4, r1
    2ac4:	10 92 c5 02 	sts	0x02C5, r1
    2ac8:	10 92 c6 02 	sts	0x02C6, r1
    2acc:	10 92 c7 02 	sts	0x02C7, r1
	TCNT1=0;
    2ad0:	10 92 85 00 	sts	0x0085, r1
    2ad4:	10 92 84 00 	sts	0x0084, r1
	//Ausgaenge und Eingaenge einstellen
	DDRD = (1<<PIND0) | (1<<PIND1) | (1<<PIND2) | (1<<PIND3);	//Pins zur Ausgabe
    2ad8:	8f e0       	ldi	r24, 0x0F	; 15
    2ada:	8a b9       	out	0x0a, r24	; 10
	DDRD &= ~((1<<PIND4) | (1<<PIND5) | (1<<PIND6));			//Restliche Pins als Eingaenge schalten
    2adc:	8a b1       	in	r24, 0x0a	; 10
    2ade:	8f 78       	andi	r24, 0x8F	; 143
    2ae0:	8a b9       	out	0x0a, r24	; 10
	//Eingang fuer den Reedkontak schalten mit internem Pullup
	DDRC &= ~((1<<PORTC3)|(1<<PORTC2));
    2ae2:	87 b1       	in	r24, 0x07	; 7
    2ae4:	83 7f       	andi	r24, 0xF3	; 243
    2ae6:	87 b9       	out	0x07, r24	; 7
	PORTC |= (1<<PORTC3) | (1<<PORTC2);
    2ae8:	88 b1       	in	r24, 0x08	; 8
    2aea:	8c 60       	ori	r24, 0x0C	; 12
    2aec:	88 b9       	out	0x08, r24	; 8
	//I2C Interface
	//twi_init();
	//Display
	oled.InitializeDisplay();
    2aee:	8e ed       	ldi	r24, 0xDE	; 222
    2af0:	92 e0       	ldi	r25, 0x02	; 2
    2af2:	0e 94 e7 02 	call	0x5ce	; 0x5ce <_ZN7Display17InitializeDisplayEv>
	//initialisierung wird im konstruktor vorgenommen
	oled.clearFrame();
    2af6:	8e ed       	ldi	r24, 0xDE	; 222
    2af8:	92 e0       	ldi	r25, 0x02	; 2
    2afa:	0e 94 c0 02 	call	0x580	; 0x580 <_ZN7Display10clearFrameEv>
	//HMC5883L initialisieren
	//kompass.initialize_HMC5883L();
	//initialisierung wird im Konstruktor erledigt
	
	//ADC Initialisieren auf CH0
	ADMUX = (1<<REFS0);
    2afe:	80 e4       	ldi	r24, 0x40	; 64
    2b00:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA = (1<<ADPS1) | (1<<ADPS0);
    2b04:	ea e7       	ldi	r30, 0x7A	; 122
    2b06:	f0 e0       	ldi	r31, 0x00	; 0
    2b08:	83 e0       	ldi	r24, 0x03	; 3
    2b0a:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADEN);
    2b0c:	80 81       	ld	r24, Z
    2b0e:	80 68       	ori	r24, 0x80	; 128
    2b10:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);
    2b12:	80 81       	ld	r24, Z
    2b14:	80 64       	ori	r24, 0x40	; 64
    2b16:	80 83       	st	Z, r24
	while (ADCSRA & (1<<ADSC) ) {
    2b18:	80 81       	ld	r24, Z
    2b1a:	86 fd       	sbrc	r24, 6
    2b1c:	fd cf       	rjmp	.-6      	; 0x2b18 <_Z15initialisierungv+0x68>
	}
	(void) ADCW;
    2b1e:	80 91 78 00 	lds	r24, 0x0078
    2b22:	90 91 79 00 	lds	r25, 0x0079
	//Wilkommensanzeige
	willkommenpage();
    2b26:	0e 94 75 08 	call	0x10ea	; 0x10ea <_Z14willkommenpagev>
	//Uhreinstellungen
	//uhreinstellen();
	//*************************************************
	//Nur Test, damit es schneller geht beim Start
	rtc.dummyeinst();
    2b2a:	8f e0       	ldi	r24, 0x0F	; 15
    2b2c:	97 e0       	ldi	r25, 0x07	; 7
    2b2e:	0e 94 62 1f 	call	0x3ec4	; 0x3ec4 <_ZN3RTC10dummyeinstEv>
	//*********************************
	rtc.RTCstart();
    2b32:	8f e0       	ldi	r24, 0x0F	; 15
    2b34:	97 e0       	ldi	r25, 0x07	; 7
    2b36:	0e 94 78 1f 	call	0x3ef0	; 0x3ef0 <_ZN3RTC8RTCstartEv>
	//ausgabe starten
	anzeige|=(1<<Uhrflag);
    2b3a:	80 91 c9 02 	lds	r24, 0x02C9
    2b3e:	90 91 ca 02 	lds	r25, 0x02CA
    2b42:	81 60       	ori	r24, 0x01	; 1
    2b44:	90 93 ca 02 	sts	0x02CA, r25
    2b48:	80 93 c9 02 	sts	0x02C9, r24
	sei();
    2b4c:	78 94       	sei
    2b4e:	08 95       	ret

00002b50 <_Z19maininterupthandlerv>:
	//interupt dierekt aus der rtc
	//if((rtc.interupts & (1<<hundinterupt))){
		//rtc.zeit();
		//rtc.interupts&=~(1<<hundinterupt);
	//}
	if ((anzeige&(1<<Fahradflag)))
    2b50:	80 91 c9 02 	lds	r24, 0x02C9
    2b54:	81 ff       	sbrs	r24, 1
    2b56:	0d c0       	rjmp	.+26     	; 0x2b72 <_Z19maininterupthandlerv+0x22>
	{
		//debounce Funktion fuer den Reedswitch
		if (reed_debounce(&PINC,PINC3))
    2b58:	63 e0       	ldi	r22, 0x03	; 3
    2b5a:	86 e2       	ldi	r24, 0x26	; 38
    2b5c:	90 e0       	ldi	r25, 0x00	; 0
    2b5e:	0e 94 34 15 	call	0x2a68	; 0x2a68 <_Z13reed_debouncePVhh>
    2b62:	88 23       	and	r24, r24
    2b64:	31 f0       	breq	.+12     	; 0x2b72 <_Z19maininterupthandlerv+0x22>
		{
			geschwindigkeit(14.0*2.54);
    2b66:	60 e7       	ldi	r22, 0x70	; 112
    2b68:	7d e3       	ldi	r23, 0x3D	; 61
    2b6a:	8e e0       	ldi	r24, 0x0E	; 14
    2b6c:	92 e4       	ldi	r25, 0x42	; 66
    2b6e:	0e 94 ec 14 	call	0x29d8	; 0x29d8 <_Z15geschwindigkeitf>
    2b72:	08 95       	ret

00002b74 <_Z14anzeigehandlerv>:
	}
}

void anzeigehandler(){
	//Handler fuer 1Hz Flag
	if ((rtc.interupts & (1<<sekundeninterupt)))
    2b74:	80 91 26 07 	lds	r24, 0x0726
    2b78:	81 ff       	sbrs	r24, 1
    2b7a:	eb c0       	rjmp	.+470    	; 0x2d52 <_Z14anzeigehandlerv+0x1de>
	{
		rtc.zeit();
    2b7c:	8f e0       	ldi	r24, 0x0F	; 15
    2b7e:	97 e0       	ldi	r25, 0x07	; 7
    2b80:	0e 94 3d 1f 	call	0x3e7a	; 0x3e7a <_ZN3RTC4zeitEv>
		//Handler fuer die Anzeige der Seiten
		//Die einzelnen Funktionen beschreiben nur den Framebuffer und nicht dierekt das Display
		if ((anzeige&(1<<menueflag)) && (anzeige&(1<<Uhrflag)))
    2b84:	80 91 c9 02 	lds	r24, 0x02C9
    2b88:	90 91 ca 02 	lds	r25, 0x02CA
    2b8c:	9c 01       	movw	r18, r24
    2b8e:	21 70       	andi	r18, 0x01	; 1
    2b90:	30 72       	andi	r19, 0x20	; 32
    2b92:	21 30       	cpi	r18, 0x01	; 1
    2b94:	30 42       	sbci	r19, 0x20	; 32
    2b96:	61 f4       	brne	.+24     	; 0x2bb0 <_Z14anzeigehandlerv+0x3c>
		{
			menue_uhr();
    2b98:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <_Z9menue_uhrv>
			anzeige|=(1<<refreshdisplay);
    2b9c:	80 91 c9 02 	lds	r24, 0x02C9
    2ba0:	90 91 ca 02 	lds	r25, 0x02CA
    2ba4:	90 68       	ori	r25, 0x80	; 128
    2ba6:	90 93 ca 02 	sts	0x02CA, r25
    2baa:	80 93 c9 02 	sts	0x02C9, r24
    2bae:	cc c0       	rjmp	.+408    	; 0x2d48 <_Z14anzeigehandlerv+0x1d4>
    2bb0:	9c 01       	movw	r18, r24
    2bb2:	28 70       	andi	r18, 0x08	; 8
    2bb4:	30 72       	andi	r19, 0x20	; 32
		}
		else if ((anzeige&(1<<menueflag)) && (anzeige&(1<<Einstellungsflag)))
    2bb6:	28 30       	cpi	r18, 0x08	; 8
    2bb8:	30 42       	sbci	r19, 0x20	; 32
    2bba:	61 f4       	brne	.+24     	; 0x2bd4 <_Z14anzeigehandlerv+0x60>
		{
			menue_einst();
    2bbc:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <_Z11menue_einstv>
			anzeige|=(1<<refreshdisplay);
    2bc0:	80 91 c9 02 	lds	r24, 0x02C9
    2bc4:	90 91 ca 02 	lds	r25, 0x02CA
    2bc8:	90 68       	ori	r25, 0x80	; 128
    2bca:	90 93 ca 02 	sts	0x02CA, r25
    2bce:	80 93 c9 02 	sts	0x02C9, r24
    2bd2:	ba c0       	rjmp	.+372    	; 0x2d48 <_Z14anzeigehandlerv+0x1d4>
		}
		else if ((anzeige&(1<<menueflag)))
    2bd4:	95 ff       	sbrs	r25, 5
    2bd6:	0c c0       	rjmp	.+24     	; 0x2bf0 <_Z14anzeigehandlerv+0x7c>
		{
			menue_haupt();
    2bd8:	0e 94 94 0a 	call	0x1528	; 0x1528 <_Z11menue_hauptv>
			anzeige|=(1<<refreshdisplay);
    2bdc:	80 91 c9 02 	lds	r24, 0x02C9
    2be0:	90 91 ca 02 	lds	r25, 0x02CA
    2be4:	90 68       	ori	r25, 0x80	; 128
    2be6:	90 93 ca 02 	sts	0x02CA, r25
    2bea:	80 93 c9 02 	sts	0x02C9, r24
    2bee:	ac c0       	rjmp	.+344    	; 0x2d48 <_Z14anzeigehandlerv+0x1d4>
		}
		else if ((anzeige&(1<<Kompasgaineinstellenflag)))
    2bf0:	85 ff       	sbrs	r24, 5
    2bf2:	0c c0       	rjmp	.+24     	; 0x2c0c <_Z14anzeigehandlerv+0x98>
		{
			Gaineinstellen();
    2bf4:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <_Z14Gaineinstellenv>
			anzeige|=(1<<refreshdisplay);
    2bf8:	80 91 c9 02 	lds	r24, 0x02C9
    2bfc:	90 91 ca 02 	lds	r25, 0x02CA
    2c00:	90 68       	ori	r25, 0x80	; 128
    2c02:	90 93 ca 02 	sts	0x02CA, r25
    2c06:	80 93 c9 02 	sts	0x02C9, r24
    2c0a:	9e c0       	rjmp	.+316    	; 0x2d48 <_Z14anzeigehandlerv+0x1d4>
		}
		else if ((anzeige&(1<<Uhrflag)))
    2c0c:	80 ff       	sbrs	r24, 0
    2c0e:	0c c0       	rjmp	.+24     	; 0x2c28 <_Z14anzeigehandlerv+0xb4>
		{
			uhranzeigen();
    2c10:	0e 94 56 0c 	call	0x18ac	; 0x18ac <_Z11uhranzeigenv>
			//Pressuresensor();
			anzeige|=(1<<refreshdisplay);
    2c14:	80 91 c9 02 	lds	r24, 0x02C9
    2c18:	90 91 ca 02 	lds	r25, 0x02CA
    2c1c:	90 68       	ori	r25, 0x80	; 128
    2c1e:	90 93 ca 02 	sts	0x02CA, r25
    2c22:	80 93 c9 02 	sts	0x02C9, r24
    2c26:	90 c0       	rjmp	.+288    	; 0x2d48 <_Z14anzeigehandlerv+0x1d4>
		}
		else if ((anzeige&(1<<Kompasflag)))
    2c28:	82 ff       	sbrs	r24, 2
    2c2a:	10 c0       	rjmp	.+32     	; 0x2c4c <_Z14anzeigehandlerv+0xd8>
		{
			anzeige_kompass(kompass.angle());
    2c2c:	87 e2       	ldi	r24, 0x27	; 39
    2c2e:	97 e0       	ldi	r25, 0x07	; 7
    2c30:	0e 94 ad 1b 	call	0x375a	; 0x375a <_ZN7Kompass5angleEv>
    2c34:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <_Z15anzeige_kompassd>
			anzeige|=(1<<refreshdisplay);
    2c38:	80 91 c9 02 	lds	r24, 0x02C9
    2c3c:	90 91 ca 02 	lds	r25, 0x02CA
    2c40:	90 68       	ori	r25, 0x80	; 128
    2c42:	90 93 ca 02 	sts	0x02CA, r25
    2c46:	80 93 c9 02 	sts	0x02C9, r24
    2c4a:	7e c0       	rjmp	.+252    	; 0x2d48 <_Z14anzeigehandlerv+0x1d4>
		}
		else if ((anzeige&(1<<Fahradflag)))
    2c4c:	81 ff       	sbrs	r24, 1
    2c4e:	22 c0       	rjmp	.+68     	; 0x2c94 <_Z14anzeigehandlerv+0x120>
		{
			//fahradschirm(12.3,kompass.angle());
			fahradschirm(geschw,kompass.angle());
    2c50:	87 e2       	ldi	r24, 0x27	; 39
    2c52:	97 e0       	ldi	r25, 0x07	; 7
    2c54:	0e 94 ad 1b 	call	0x375a	; 0x375a <_ZN7Kompass5angleEv>
    2c58:	9b 01       	movw	r18, r22
    2c5a:	ac 01       	movw	r20, r24
    2c5c:	60 91 c4 02 	lds	r22, 0x02C4
    2c60:	70 91 c5 02 	lds	r23, 0x02C5
    2c64:	80 91 c6 02 	lds	r24, 0x02C6
    2c68:	90 91 c7 02 	lds	r25, 0x02C7
    2c6c:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <_Z12fahradschirmdd>
			geschw=0;
    2c70:	10 92 c4 02 	sts	0x02C4, r1
    2c74:	10 92 c5 02 	sts	0x02C5, r1
    2c78:	10 92 c6 02 	sts	0x02C6, r1
    2c7c:	10 92 c7 02 	sts	0x02C7, r1
			anzeige|=(1<<refreshdisplay);
    2c80:	80 91 c9 02 	lds	r24, 0x02C9
    2c84:	90 91 ca 02 	lds	r25, 0x02CA
    2c88:	90 68       	ori	r25, 0x80	; 128
    2c8a:	90 93 ca 02 	sts	0x02CA, r25
    2c8e:	80 93 c9 02 	sts	0x02C9, r24
    2c92:	5a c0       	rjmp	.+180    	; 0x2d48 <_Z14anzeigehandlerv+0x1d4>
    2c94:	9c 01       	movw	r18, r24
    2c96:	28 74       	andi	r18, 0x48	; 72
    2c98:	33 27       	eor	r19, r19
		}
		else if ((anzeige&(1<<Einstellungsflag)) && (anzeige&(1<<Timerflag)))
    2c9a:	28 34       	cpi	r18, 0x48	; 72
    2c9c:	31 05       	cpc	r19, r1
    2c9e:	61 f4       	brne	.+24     	; 0x2cb8 <_Z14anzeigehandlerv+0x144>
		{
			timerseite();
    2ca0:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <_Z10timerseitev>
			anzeige|=(1<<refreshdisplay);
    2ca4:	80 91 c9 02 	lds	r24, 0x02C9
    2ca8:	90 91 ca 02 	lds	r25, 0x02CA
    2cac:	90 68       	ori	r25, 0x80	; 128
    2cae:	90 93 ca 02 	sts	0x02CA, r25
    2cb2:	80 93 c9 02 	sts	0x02C9, r24
    2cb6:	48 c0       	rjmp	.+144    	; 0x2d48 <_Z14anzeigehandlerv+0x1d4>
		}
		else if ((anzeige&(1<<Stoppuhrflag)))
    2cb8:	87 ff       	sbrs	r24, 7
    2cba:	17 c0       	rjmp	.+46     	; 0x2cea <_Z14anzeigehandlerv+0x176>
		{
			if ((anzeige&(1<<Einstellungsflag)))
    2cbc:	83 ff       	sbrs	r24, 3
    2cbe:	09 c0       	rjmp	.+18     	; 0x2cd2 <_Z14anzeigehandlerv+0x15e>
			{
				stoppuhr.Sekunden++;
    2cc0:	e1 ef       	ldi	r30, 0xF1	; 241
    2cc2:	f6 e0       	ldi	r31, 0x06	; 6
    2cc4:	80 81       	ld	r24, Z
    2cc6:	8f 5f       	subi	r24, 0xFF	; 255
    2cc8:	80 83       	st	Z, r24
				stoppuhr.zeit();
    2cca:	8f ed       	ldi	r24, 0xDF	; 223
    2ccc:	96 e0       	ldi	r25, 0x06	; 6
    2cce:	0e 94 3d 1f 	call	0x3e7a	; 0x3e7a <_ZN3RTC4zeitEv>
			}
			Stoppuhrseite();
    2cd2:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <_Z13Stoppuhrseitev>
			anzeige|=(1<<refreshdisplay);
    2cd6:	80 91 c9 02 	lds	r24, 0x02C9
    2cda:	90 91 ca 02 	lds	r25, 0x02CA
    2cde:	90 68       	ori	r25, 0x80	; 128
    2ce0:	90 93 ca 02 	sts	0x02CA, r25
    2ce4:	80 93 c9 02 	sts	0x02C9, r24
    2ce8:	2f c0       	rjmp	.+94     	; 0x2d48 <_Z14anzeigehandlerv+0x1d4>
		}
		else if ((anzeige&(1<<Timerflag)))
    2cea:	86 ff       	sbrs	r24, 6
    2cec:	20 c0       	rjmp	.+64     	; 0x2d2e <_Z14anzeigehandlerv+0x1ba>
		{
			zaehler.Sekunden--;
    2cee:	e9 e0       	ldi	r30, 0x09	; 9
    2cf0:	f7 e0       	ldi	r31, 0x07	; 7
    2cf2:	80 81       	ld	r24, Z
    2cf4:	81 50       	subi	r24, 0x01	; 1
    2cf6:	80 83       	st	Z, r24
			if(zaehler.timer()){
    2cf8:	87 ef       	ldi	r24, 0xF7	; 247
    2cfa:	96 e0       	ldi	r25, 0x06	; 6
    2cfc:	0e 94 97 1f 	call	0x3f2e	; 0x3f2e <_ZN3RTC5timerEv>
    2d00:	88 23       	and	r24, r24
    2d02:	49 f0       	breq	.+18     	; 0x2d16 <_Z14anzeigehandlerv+0x1a2>
				anzeige|=(1<<blinkflag);
    2d04:	80 91 c9 02 	lds	r24, 0x02C9
    2d08:	90 91 ca 02 	lds	r25, 0x02CA
    2d0c:	90 64       	ori	r25, 0x40	; 64
    2d0e:	90 93 ca 02 	sts	0x02CA, r25
    2d12:	80 93 c9 02 	sts	0x02C9, r24
			}
			timerseite();
    2d16:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <_Z10timerseitev>
			anzeige|=(1<<refreshdisplay);
    2d1a:	80 91 c9 02 	lds	r24, 0x02C9
    2d1e:	90 91 ca 02 	lds	r25, 0x02CA
    2d22:	90 68       	ori	r25, 0x80	; 128
    2d24:	90 93 ca 02 	sts	0x02CA, r25
    2d28:	80 93 c9 02 	sts	0x02C9, r24
    2d2c:	0d c0       	rjmp	.+26     	; 0x2d48 <_Z14anzeigehandlerv+0x1d4>
		}
		else if ((anzeige&(1<<Druckflag)))
    2d2e:	91 ff       	sbrs	r25, 1
    2d30:	0b c0       	rjmp	.+22     	; 0x2d48 <_Z14anzeigehandlerv+0x1d4>
		{
			Pressuresensor();
    2d32:	0e 94 46 10 	call	0x208c	; 0x208c <_Z14Pressuresensorv>
			anzeige |= (1<<refreshdisplay);
    2d36:	80 91 c9 02 	lds	r24, 0x02C9
    2d3a:	90 91 ca 02 	lds	r25, 0x02CA
    2d3e:	90 68       	ori	r25, 0x80	; 128
    2d40:	90 93 ca 02 	sts	0x02CA, r25
    2d44:	80 93 c9 02 	sts	0x02C9, r24
		}
		rtc.interupts&=~(1<<sekundeninterupt);
    2d48:	e6 e2       	ldi	r30, 0x26	; 38
    2d4a:	f7 e0       	ldi	r31, 0x07	; 7
    2d4c:	80 81       	ld	r24, Z
    2d4e:	8d 7f       	andi	r24, 0xFD	; 253
    2d50:	80 83       	st	Z, r24
	}
	//neuen Framebuffer an das Dispay senden
	if ((anzeige&(1<<refreshdisplay)))
    2d52:	80 91 c9 02 	lds	r24, 0x02C9
    2d56:	90 91 ca 02 	lds	r25, 0x02CA
    2d5a:	99 23       	and	r25, r25
    2d5c:	14 f5       	brge	.+68     	; 0x2da2 <_Z14anzeigehandlerv+0x22e>
	{
		oled.sendFrame();
    2d5e:	8e ed       	ldi	r24, 0xDE	; 222
    2d60:	92 e0       	ldi	r25, 0x02	; 2
    2d62:	0e 94 66 03 	call	0x6cc	; 0x6cc <_ZN7Display9sendFrameEv>
		if ((anzeige&(1<<blinkflag)))
    2d66:	80 91 c9 02 	lds	r24, 0x02C9
    2d6a:	90 91 ca 02 	lds	r25, 0x02CA
    2d6e:	96 ff       	sbrs	r25, 6
    2d70:	0f c0       	rjmp	.+30     	; 0x2d90 <_Z14anzeigehandlerv+0x21c>
		{
			oled.invert(rtc.Sekunden%2);
    2d72:	60 91 21 07 	lds	r22, 0x0721
    2d76:	61 70       	andi	r22, 0x01	; 1
    2d78:	8e ed       	ldi	r24, 0xDE	; 222
    2d7a:	92 e0       	ldi	r25, 0x02	; 2
    2d7c:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <_ZN7Display6invertEh>
			LED.toggle();
    2d80:	8b ed       	ldi	r24, 0xDB	; 219
    2d82:	92 e0       	ldi	r25, 0x02	; 2
    2d84:	0e 94 d5 1c 	call	0x39aa	; 0x39aa <_ZN6Output6toggleEv>
			Vibrationsmotor.on();
    2d88:	89 ed       	ldi	r24, 0xD9	; 217
    2d8a:	92 e0       	ldi	r25, 0x02	; 2
    2d8c:	0e 94 6a 1c 	call	0x38d4	; 0x38d4 <_ZN6Output2onEv>
		}
		anzeige&=~(1<<refreshdisplay);
    2d90:	80 91 c9 02 	lds	r24, 0x02C9
    2d94:	90 91 ca 02 	lds	r25, 0x02CA
    2d98:	9f 77       	andi	r25, 0x7F	; 127
    2d9a:	90 93 ca 02 	sts	0x02CA, r25
    2d9e:	80 93 c9 02 	sts	0x02C9, r24
    2da2:	08 95       	ret

00002da4 <_Z14eingabehandlerh>:
	}
}

void eingabehandler(uint8_t taste){
	if (taste!='A')
    2da4:	81 34       	cpi	r24, 0x41	; 65
    2da6:	09 f4       	brne	.+2      	; 0x2daa <_Z14eingabehandlerh+0x6>
    2da8:	79 c2       	rjmp	.+1266   	; 0x329c <_Z14eingabehandlerh+0x4f8>
	{
		if (anzeige==255)
    2daa:	20 91 c9 02 	lds	r18, 0x02C9
    2dae:	30 91 ca 02 	lds	r19, 0x02CA
    2db2:	2f 3f       	cpi	r18, 0xFF	; 255
    2db4:	31 05       	cpc	r19, r1
    2db6:	61 f4       	brne	.+24     	; 0x2dd0 <_Z14eingabehandlerh+0x2c>
		{
			oled.ssd1306_command(SSD1306_DISPLAYON);
    2db8:	6f ea       	ldi	r22, 0xAF	; 175
    2dba:	8e ed       	ldi	r24, 0xDE	; 222
    2dbc:	92 e0       	ldi	r25, 0x02	; 2
    2dbe:	0e 94 cb 02 	call	0x596	; 0x596 <_ZN7Display15ssd1306_commandEh>
			//entweder display aus oder das Menue starten
			anzeige=(1<<menueflag);
    2dc2:	80 e0       	ldi	r24, 0x00	; 0
    2dc4:	90 e2       	ldi	r25, 0x20	; 32
    2dc6:	90 93 ca 02 	sts	0x02CA, r25
    2dca:	80 93 c9 02 	sts	0x02C9, r24
    2dce:	08 95       	ret
    2dd0:	a9 01       	movw	r20, r18
    2dd2:	41 70       	andi	r20, 0x01	; 1
    2dd4:	50 72       	andi	r21, 0x20	; 32
		}
		//gleicher Handler wie oben, aber hier speziell fuer die Bearbeitung von Tastereingaben mit switch fuer die Tasten
		//es sind einfach so viele Tasten moeglich 
		else if ((anzeige&(1<<menueflag)) && (anzeige&(1<<Uhrflag)))	//Menue der Uhr
    2dd6:	41 30       	cpi	r20, 0x01	; 1
    2dd8:	50 42       	sbci	r21, 0x20	; 32
    2dda:	09 f0       	breq	.+2      	; 0x2dde <_Z14eingabehandlerh+0x3a>
    2ddc:	45 c0       	rjmp	.+138    	; 0x2e68 <_Z14eingabehandlerh+0xc4>
		{	
			anzeige&=~((1<<menueflag)|(1<<Uhrflag));
    2dde:	2e 7f       	andi	r18, 0xFE	; 254
    2de0:	3f 7d       	andi	r19, 0xDF	; 223
    2de2:	30 93 ca 02 	sts	0x02CA, r19
    2de6:	20 93 c9 02 	sts	0x02C9, r18
			switch (taste)
    2dea:	82 33       	cpi	r24, 0x32	; 50
    2dec:	79 f0       	breq	.+30     	; 0x2e0c <_Z14eingabehandlerh+0x68>
    2dee:	18 f4       	brcc	.+6      	; 0x2df6 <_Z14eingabehandlerh+0x52>
    2df0:	81 33       	cpi	r24, 0x31	; 49
    2df2:	31 f0       	breq	.+12     	; 0x2e00 <_Z14eingabehandlerh+0x5c>
    2df4:	32 c0       	rjmp	.+100    	; 0x2e5a <_Z14eingabehandlerh+0xb6>
    2df6:	83 33       	cpi	r24, 0x33	; 51
    2df8:	b1 f0       	breq	.+44     	; 0x2e26 <_Z14eingabehandlerh+0x82>
    2dfa:	84 33       	cpi	r24, 0x34	; 52
    2dfc:	01 f1       	breq	.+64     	; 0x2e3e <_Z14eingabehandlerh+0x9a>
    2dfe:	2d c0       	rjmp	.+90     	; 0x2e5a <_Z14eingabehandlerh+0xb6>
			{
				case '1':
					//Wechseln auf die Uhr
					anzeige|=(1<<Uhrflag);
    2e00:	21 60       	ori	r18, 0x01	; 1
    2e02:	30 93 ca 02 	sts	0x02CA, r19
    2e06:	20 93 c9 02 	sts	0x02C9, r18
					break;
    2e0a:	08 95       	ret
				
				case '2':
					//starten der Stoppuhr APP
					stoppuhr.Sekunden=0;
    2e0c:	10 92 f1 06 	sts	0x06F1, r1
					stoppuhr.Minuten=0;
    2e10:	10 92 f0 06 	sts	0x06F0, r1
					stoppuhr.Stunden=0;
    2e14:	10 92 ef 06 	sts	0x06EF, r1
					anzeige|=(1<<refreshdisplay) | (1<<Stoppuhrflag);
    2e18:	20 68       	ori	r18, 0x80	; 128
    2e1a:	30 68       	ori	r19, 0x80	; 128
    2e1c:	30 93 ca 02 	sts	0x02CA, r19
    2e20:	20 93 c9 02 	sts	0x02C9, r18
					break;
    2e24:	08 95       	ret
				
				case '3':
					//Starten der Timer APP
					zaehler.Sekunden=0;
    2e26:	10 92 09 07 	sts	0x0709, r1
					zaehler.Minuten=0;
    2e2a:	10 92 08 07 	sts	0x0708, r1
					zaehler.Stunden=0;
    2e2e:	10 92 07 07 	sts	0x0707, r1
					
					anzeige|=(1<<Timerflag) | (1<<Einstellungsflag);
    2e32:	28 64       	ori	r18, 0x48	; 72
    2e34:	30 93 ca 02 	sts	0x02CA, r19
    2e38:	20 93 c9 02 	sts	0x02C9, r18
					break;
    2e3c:	08 95       	ret
				
				case '4':
					//Starten der Alarmapp, momentan nicht implementiert
					oled.clearFrame();
    2e3e:	8e ed       	ldi	r24, 0xDE	; 222
    2e40:	92 e0       	ldi	r25, 0x02	; 2
    2e42:	0e 94 c0 02 	call	0x580	; 0x580 <_ZN7Display10clearFrameEv>
					anzeige|=(1<<refreshdisplay);
    2e46:	80 91 c9 02 	lds	r24, 0x02C9
    2e4a:	90 91 ca 02 	lds	r25, 0x02CA
    2e4e:	90 68       	ori	r25, 0x80	; 128
    2e50:	90 93 ca 02 	sts	0x02CA, r25
    2e54:	80 93 c9 02 	sts	0x02C9, r24
					break;
    2e58:	08 95       	ret
				
				default:
					//menueflag erneu setzen
					anzeige|=(1<<menueflag)|(1<<Uhrflag);
    2e5a:	21 60       	ori	r18, 0x01	; 1
    2e5c:	30 62       	ori	r19, 0x20	; 32
    2e5e:	30 93 ca 02 	sts	0x02CA, r19
    2e62:	20 93 c9 02 	sts	0x02C9, r18
					break;
    2e66:	f9 c1       	rjmp	.+1010   	; 0x325a <_Z14eingabehandlerh+0x4b6>
    2e68:	a9 01       	movw	r20, r18
    2e6a:	48 70       	andi	r20, 0x08	; 8
    2e6c:	50 72       	andi	r21, 0x20	; 32
			}
		}
		else if ((anzeige&(1<<menueflag)) && (anzeige&(1<<Einstellungsflag)))	//Menue der Einstellungen
    2e6e:	48 30       	cpi	r20, 0x08	; 8
    2e70:	50 42       	sbci	r21, 0x20	; 32
    2e72:	99 f5       	brne	.+102    	; 0x2eda <_Z14eingabehandlerh+0x136>
		{
			anzeige&=~((1<<menueflag)|(1<<Einstellungsflag));
    2e74:	27 7f       	andi	r18, 0xF7	; 247
    2e76:	3f 7d       	andi	r19, 0xDF	; 223
    2e78:	30 93 ca 02 	sts	0x02CA, r19
    2e7c:	20 93 c9 02 	sts	0x02C9, r18
			switch (taste)
    2e80:	82 33       	cpi	r24, 0x32	; 50
    2e82:	91 f0       	breq	.+36     	; 0x2ea8 <_Z14eingabehandlerh+0x104>
    2e84:	83 33       	cpi	r24, 0x33	; 51
    2e86:	b1 f0       	breq	.+44     	; 0x2eb4 <_Z14eingabehandlerh+0x110>
    2e88:	81 33       	cpi	r24, 0x31	; 49
    2e8a:	01 f5       	brne	.+64     	; 0x2ecc <_Z14eingabehandlerh+0x128>
			{
				case '1':
					//zuruecksetzen der Kalibrierung, da passive Kallibrierung eingebaut
					kompass.kallibrierung_ruecksetzen();
    2e8c:	87 e2       	ldi	r24, 0x27	; 39
    2e8e:	97 e0       	ldi	r25, 0x07	; 7
    2e90:	0e 94 25 1c 	call	0x384a	; 0x384a <_ZN7Kompass25kallibrierung_ruecksetzenEv>
					anzeige|=(1<<Kompasflag);
    2e94:	80 91 c9 02 	lds	r24, 0x02C9
    2e98:	90 91 ca 02 	lds	r25, 0x02CA
    2e9c:	84 60       	ori	r24, 0x04	; 4
    2e9e:	90 93 ca 02 	sts	0x02CA, r25
    2ea2:	80 93 c9 02 	sts	0x02C9, r24
					break;
    2ea6:	08 95       	ret
				case '2':
					//Gaineinstellung fuer den Kompass
					anzeige|=(1<<Kompasgaineinstellenflag);
    2ea8:	20 62       	ori	r18, 0x20	; 32
    2eaa:	30 93 ca 02 	sts	0x02CA, r19
    2eae:	20 93 c9 02 	sts	0x02C9, r18
					break;
    2eb2:	08 95       	ret
				case '3':
					//dies ist eine der wenigen Funktinen, die die Handler Strucktur nicht anwenden, da sie die rtc anhaellt
					uhreinstellen();
    2eb4:	0e 94 fe 10 	call	0x21fc	; 0x21fc <_Z13uhreinstellenv>
					anzeige|=(1<<Uhrflag);
    2eb8:	80 91 c9 02 	lds	r24, 0x02C9
    2ebc:	90 91 ca 02 	lds	r25, 0x02CA
    2ec0:	81 60       	ori	r24, 0x01	; 1
    2ec2:	90 93 ca 02 	sts	0x02CA, r25
    2ec6:	80 93 c9 02 	sts	0x02C9, r24
					break;
    2eca:	08 95       	ret
				default:
					//Menueflag neu setzten
					anzeige|=(1<<menueflag)|(1<<Einstellungsflag);
    2ecc:	28 60       	ori	r18, 0x08	; 8
    2ece:	30 62       	ori	r19, 0x20	; 32
    2ed0:	30 93 ca 02 	sts	0x02CA, r19
    2ed4:	20 93 c9 02 	sts	0x02C9, r18
					break;
    2ed8:	c0 c1       	rjmp	.+896    	; 0x325a <_Z14eingabehandlerh+0x4b6>
			}
		}
		else if ((anzeige&(1<<menueflag)))	//nur das grosse menue
    2eda:	35 ff       	sbrs	r19, 5
    2edc:	58 c0       	rjmp	.+176    	; 0x2f8e <_Z14eingabehandlerh+0x1ea>
		{
			anzeige&=~(1<<menueflag);
    2ede:	3f 7d       	andi	r19, 0xDF	; 223
    2ee0:	30 93 ca 02 	sts	0x02CA, r19
    2ee4:	20 93 c9 02 	sts	0x02C9, r18
			switch (taste)
    2ee8:	48 2f       	mov	r20, r24
    2eea:	50 e0       	ldi	r21, 0x00	; 0
    2eec:	fa 01       	movw	r30, r20
    2eee:	f1 97       	sbiw	r30, 0x31	; 49
    2ef0:	e7 30       	cpi	r30, 0x07	; 7
    2ef2:	f1 05       	cpc	r31, r1
    2ef4:	08 f0       	brcs	.+2      	; 0x2ef8 <_Z14eingabehandlerh+0x154>
    2ef6:	45 c0       	rjmp	.+138    	; 0x2f82 <_Z14eingabehandlerh+0x1de>
    2ef8:	e2 5c       	subi	r30, 0xC2	; 194
    2efa:	ff 4f       	sbci	r31, 0xFF	; 255
    2efc:	0c 94 5c 26 	jmp	0x4cb8	; 0x4cb8 <__tablejump2__>
			{
				case '1':
					anzeige|=(1<<Fahradflag);
    2f00:	22 60       	ori	r18, 0x02	; 2
    2f02:	30 93 ca 02 	sts	0x02CA, r19
    2f06:	20 93 c9 02 	sts	0x02C9, r18
					//starten des Timers fuer die geschwindigkeit
					TCCR1B |= ((1<<CS12) | (1<<CS10));
    2f0a:	e1 e8       	ldi	r30, 0x81	; 129
    2f0c:	f0 e0       	ldi	r31, 0x00	; 0
    2f0e:	80 81       	ld	r24, Z
    2f10:	85 60       	ori	r24, 0x05	; 5
    2f12:	80 83       	st	Z, r24
					break;
    2f14:	08 95       	ret
				
				case '2':
					//Taschenrechner starten
					//Monentan deaktiv, da Umstellung der Handler 
					//operation(Flieskommazahleingabe());
					oled.clearFrame();
    2f16:	8e ed       	ldi	r24, 0xDE	; 222
    2f18:	92 e0       	ldi	r25, 0x02	; 2
    2f1a:	0e 94 c0 02 	call	0x580	; 0x580 <_ZN7Display10clearFrameEv>
					anzeige|=(1<<refreshdisplay);	
    2f1e:	80 91 c9 02 	lds	r24, 0x02C9
    2f22:	90 91 ca 02 	lds	r25, 0x02CA
    2f26:	90 68       	ori	r25, 0x80	; 128
    2f28:	90 93 ca 02 	sts	0x02CA, r25
    2f2c:	80 93 c9 02 	sts	0x02C9, r24
					break;
    2f30:	08 95       	ret
				
				case '3':
					anzeige|=(1<<Kompasflag);
    2f32:	24 60       	ori	r18, 0x04	; 4
    2f34:	30 93 ca 02 	sts	0x02CA, r19
    2f38:	20 93 c9 02 	sts	0x02C9, r18
					break;
    2f3c:	08 95       	ret
				
				case '4':
					//Menue der Uhr
					anzeige|=(1<<menueflag) | (1<<Uhrflag);
    2f3e:	21 60       	ori	r18, 0x01	; 1
    2f40:	30 62       	ori	r19, 0x20	; 32
    2f42:	30 93 ca 02 	sts	0x02CA, r19
    2f46:	20 93 c9 02 	sts	0x02C9, r18
					break;
    2f4a:	08 95       	ret
				
				case '5':
					//menue der Einstellungen
					anzeige|=(1<<menueflag) | (1<<Einstellungsflag);
    2f4c:	28 60       	ori	r18, 0x08	; 8
    2f4e:	30 62       	ori	r19, 0x20	; 32
    2f50:	30 93 ca 02 	sts	0x02CA, r19
    2f54:	20 93 c9 02 	sts	0x02C9, r18
					break;
    2f58:	08 95       	ret
				
				case '6':
					//Display ausschalten
					//anzeige=255;
					oled.clearFrame();
    2f5a:	8e ed       	ldi	r24, 0xDE	; 222
    2f5c:	92 e0       	ldi	r25, 0x02	; 2
    2f5e:	0e 94 c0 02 	call	0x580	; 0x580 <_ZN7Display10clearFrameEv>
					anzeige|=(1<<refreshdisplay);
    2f62:	80 91 c9 02 	lds	r24, 0x02C9
    2f66:	90 91 ca 02 	lds	r25, 0x02CA
    2f6a:	90 68       	ori	r25, 0x80	; 128
    2f6c:	90 93 ca 02 	sts	0x02CA, r25
    2f70:	80 93 c9 02 	sts	0x02C9, r24
					break;
    2f74:	08 95       	ret
				case '7':
					anzeige |= (1<<Druckflag);
    2f76:	32 60       	ori	r19, 0x02	; 2
    2f78:	30 93 ca 02 	sts	0x02CA, r19
    2f7c:	20 93 c9 02 	sts	0x02C9, r18
					break;
    2f80:	08 95       	ret
				default:
					//menueflag erneut setzen um abschalten zu verhindern
					anzeige|=(1<<menueflag);
    2f82:	30 62       	ori	r19, 0x20	; 32
    2f84:	30 93 ca 02 	sts	0x02CA, r19
    2f88:	20 93 c9 02 	sts	0x02C9, r18
					break;
    2f8c:	66 c1       	rjmp	.+716    	; 0x325a <_Z14eingabehandlerh+0x4b6>
			}
		}
		else if ((anzeige&(1<<Kompasgaineinstellenflag)))
    2f8e:	25 ff       	sbrs	r18, 5
    2f90:	51 c0       	rjmp	.+162    	; 0x3034 <_Z14eingabehandlerh+0x290>
		{
			anzeige&=~(1<<Kompasgaineinstellenflag);
    2f92:	a9 01       	movw	r20, r18
    2f94:	4f 7d       	andi	r20, 0xDF	; 223
			anzeige|=(1<<Kompasflag);
    2f96:	44 60       	ori	r20, 0x04	; 4
    2f98:	50 93 ca 02 	sts	0x02CA, r21
    2f9c:	40 93 c9 02 	sts	0x02C9, r20
			switch (taste) {
    2fa0:	48 2f       	mov	r20, r24
    2fa2:	50 e0       	ldi	r21, 0x00	; 0
    2fa4:	fa 01       	movw	r30, r20
    2fa6:	f1 97       	sbiw	r30, 0x31	; 49
    2fa8:	e8 30       	cpi	r30, 0x08	; 8
    2faa:	f1 05       	cpc	r31, r1
    2fac:	e0 f5       	brcc	.+120    	; 0x3026 <_Z14eingabehandlerh+0x282>
    2fae:	eb 5b       	subi	r30, 0xBB	; 187
    2fb0:	ff 4f       	sbci	r31, 0xFF	; 255
    2fb2:	0c 94 5c 26 	jmp	0x4cb8	; 0x4cb8 <__tablejump2__>
				case '1':
					kompass.HMC5883L_command(0x01,HMCGAIN1370);
    2fb6:	40 e0       	ldi	r20, 0x00	; 0
    2fb8:	61 e0       	ldi	r22, 0x01	; 1
    2fba:	87 e2       	ldi	r24, 0x27	; 39
    2fbc:	97 e0       	ldi	r25, 0x07	; 7
    2fbe:	0e 94 aa 1a 	call	0x3554	; 0x3554 <_ZN7Kompass16HMC5883L_commandEhh>
					break;
    2fc2:	08 95       	ret
				case '2':
					kompass.HMC5883L_command(0x01,HMCGAIN1090);
    2fc4:	40 e2       	ldi	r20, 0x20	; 32
    2fc6:	61 e0       	ldi	r22, 0x01	; 1
    2fc8:	87 e2       	ldi	r24, 0x27	; 39
    2fca:	97 e0       	ldi	r25, 0x07	; 7
    2fcc:	0e 94 aa 1a 	call	0x3554	; 0x3554 <_ZN7Kompass16HMC5883L_commandEhh>
					break;
    2fd0:	08 95       	ret
				case '3':
					kompass.HMC5883L_command(0x01,HMCGAIN820);
    2fd2:	40 e4       	ldi	r20, 0x40	; 64
    2fd4:	61 e0       	ldi	r22, 0x01	; 1
    2fd6:	87 e2       	ldi	r24, 0x27	; 39
    2fd8:	97 e0       	ldi	r25, 0x07	; 7
    2fda:	0e 94 aa 1a 	call	0x3554	; 0x3554 <_ZN7Kompass16HMC5883L_commandEhh>
					break;
    2fde:	08 95       	ret
				case '4':
					kompass.HMC5883L_command(0x01,HMCGAIN660);
    2fe0:	40 e6       	ldi	r20, 0x60	; 96
    2fe2:	61 e0       	ldi	r22, 0x01	; 1
    2fe4:	87 e2       	ldi	r24, 0x27	; 39
    2fe6:	97 e0       	ldi	r25, 0x07	; 7
    2fe8:	0e 94 aa 1a 	call	0x3554	; 0x3554 <_ZN7Kompass16HMC5883L_commandEhh>
					break;
    2fec:	08 95       	ret
				case '5':
					kompass.HMC5883L_command(0x01,HMCGAIN440);
    2fee:	40 e8       	ldi	r20, 0x80	; 128
    2ff0:	61 e0       	ldi	r22, 0x01	; 1
    2ff2:	87 e2       	ldi	r24, 0x27	; 39
    2ff4:	97 e0       	ldi	r25, 0x07	; 7
    2ff6:	0e 94 aa 1a 	call	0x3554	; 0x3554 <_ZN7Kompass16HMC5883L_commandEhh>
					break;
    2ffa:	08 95       	ret
				case '6':
					kompass.HMC5883L_command(0x01,HMCGAIN390);
    2ffc:	40 ea       	ldi	r20, 0xA0	; 160
    2ffe:	61 e0       	ldi	r22, 0x01	; 1
    3000:	87 e2       	ldi	r24, 0x27	; 39
    3002:	97 e0       	ldi	r25, 0x07	; 7
    3004:	0e 94 aa 1a 	call	0x3554	; 0x3554 <_ZN7Kompass16HMC5883L_commandEhh>
					break;
    3008:	08 95       	ret
				case '7':
					kompass.HMC5883L_command(0x01,HMCGAIN330);
    300a:	40 ec       	ldi	r20, 0xC0	; 192
    300c:	61 e0       	ldi	r22, 0x01	; 1
    300e:	87 e2       	ldi	r24, 0x27	; 39
    3010:	97 e0       	ldi	r25, 0x07	; 7
    3012:	0e 94 aa 1a 	call	0x3554	; 0x3554 <_ZN7Kompass16HMC5883L_commandEhh>
					break;
    3016:	08 95       	ret
				case '8':
					kompass.HMC5883L_command(0x01,HMCGAIN230);
    3018:	40 ee       	ldi	r20, 0xE0	; 224
    301a:	61 e0       	ldi	r22, 0x01	; 1
    301c:	87 e2       	ldi	r24, 0x27	; 39
    301e:	97 e0       	ldi	r25, 0x07	; 7
    3020:	0e 94 aa 1a 	call	0x3554	; 0x3554 <_ZN7Kompass16HMC5883L_commandEhh>
					break;
    3024:	08 95       	ret
				default:
					anzeige &=~(1<<Kompasflag);
    3026:	2b 7d       	andi	r18, 0xDB	; 219
					anzeige|=(1<<Kompasgaineinstellenflag);
    3028:	20 62       	ori	r18, 0x20	; 32
    302a:	30 93 ca 02 	sts	0x02CA, r19
    302e:	20 93 c9 02 	sts	0x02C9, r18
					break;
    3032:	13 c1       	rjmp	.+550    	; 0x325a <_Z14eingabehandlerh+0x4b6>
    3034:	a9 01       	movw	r20, r18
    3036:	48 74       	andi	r20, 0x48	; 72
    3038:	55 27       	eor	r21, r21
			}
		}
		else if ((anzeige&(1<<Einstellungsflag)) && (anzeige&(1<<Timerflag)))
    303a:	48 34       	cpi	r20, 0x48	; 72
    303c:	51 05       	cpc	r21, r1
    303e:	09 f0       	breq	.+2      	; 0x3042 <_Z14eingabehandlerh+0x29e>
    3040:	87 c0       	rjmp	.+270    	; 0x3150 <_Z14eingabehandlerh+0x3ac>
		{
			switch (pos)
    3042:	90 91 c8 02 	lds	r25, 0x02C8
    3046:	92 30       	cpi	r25, 0x02	; 2
    3048:	a9 f1       	breq	.+106    	; 0x30b4 <_Z14eingabehandlerh+0x310>
    304a:	28 f4       	brcc	.+10     	; 0x3056 <_Z14eingabehandlerh+0x2b2>
    304c:	99 23       	and	r25, r25
    304e:	61 f0       	breq	.+24     	; 0x3068 <_Z14eingabehandlerh+0x2c4>
    3050:	91 30       	cpi	r25, 0x01	; 1
    3052:	01 f1       	breq	.+64     	; 0x3094 <_Z14eingabehandlerh+0x2f0>
    3054:	02 c1       	rjmp	.+516    	; 0x325a <_Z14eingabehandlerh+0x4b6>
    3056:	94 30       	cpi	r25, 0x04	; 4
    3058:	09 f4       	brne	.+2      	; 0x305c <_Z14eingabehandlerh+0x2b8>
    305a:	52 c0       	rjmp	.+164    	; 0x3100 <_Z14eingabehandlerh+0x35c>
    305c:	08 f4       	brcc	.+2      	; 0x3060 <_Z14eingabehandlerh+0x2bc>
    305e:	40 c0       	rjmp	.+128    	; 0x30e0 <_Z14eingabehandlerh+0x33c>
    3060:	95 30       	cpi	r25, 0x05	; 5
    3062:	09 f4       	brne	.+2      	; 0x3066 <_Z14eingabehandlerh+0x2c2>
    3064:	63 c0       	rjmp	.+198    	; 0x312c <_Z14eingabehandlerh+0x388>
    3066:	f9 c0       	rjmp	.+498    	; 0x325a <_Z14eingabehandlerh+0x4b6>
			{
			case 0:
				switch (taste)
    3068:	83 32       	cpi	r24, 0x23	; 35
    306a:	09 f4       	brne	.+2      	; 0x306e <_Z14eingabehandlerh+0x2ca>
    306c:	f6 c0       	rjmp	.+492    	; 0x325a <_Z14eingabehandlerh+0x4b6>
    306e:	8a 32       	cpi	r24, 0x2A	; 42
    3070:	09 f4       	brne	.+2      	; 0x3074 <_Z14eingabehandlerh+0x2d0>
    3072:	f3 c0       	rjmp	.+486    	; 0x325a <_Z14eingabehandlerh+0x4b6>
					case '#':
						break;
					case '*':
						break;
					default:
						zaehler.Sekunden+=(taste-'0')*10;
    3074:	e9 e0       	ldi	r30, 0x09	; 9
    3076:	f7 e0       	ldi	r31, 0x07	; 7
    3078:	98 2f       	mov	r25, r24
    307a:	99 0f       	add	r25, r25
    307c:	90 56       	subi	r25, 0x60	; 96
    307e:	29 2f       	mov	r18, r25
    3080:	22 0f       	add	r18, r18
    3082:	22 0f       	add	r18, r18
    3084:	92 0f       	add	r25, r18
    3086:	20 81       	ld	r18, Z
    3088:	92 0f       	add	r25, r18
    308a:	90 83       	st	Z, r25
						pos++;
    308c:	91 e0       	ldi	r25, 0x01	; 1
    308e:	90 93 c8 02 	sts	0x02C8, r25
						break;
    3092:	e3 c0       	rjmp	.+454    	; 0x325a <_Z14eingabehandlerh+0x4b6>
				}
				break;
			case 1:
				switch (taste)
    3094:	83 32       	cpi	r24, 0x23	; 35
    3096:	09 f4       	brne	.+2      	; 0x309a <_Z14eingabehandlerh+0x2f6>
    3098:	e0 c0       	rjmp	.+448    	; 0x325a <_Z14eingabehandlerh+0x4b6>
    309a:	8a 32       	cpi	r24, 0x2A	; 42
    309c:	09 f4       	brne	.+2      	; 0x30a0 <_Z14eingabehandlerh+0x2fc>
    309e:	dd c0       	rjmp	.+442    	; 0x325a <_Z14eingabehandlerh+0x4b6>
					case '#':
					break;
					case '*':
					break;
					default:
					zaehler.Sekunden+=(taste-'0');
    30a0:	e9 e0       	ldi	r30, 0x09	; 9
    30a2:	f7 e0       	ldi	r31, 0x07	; 7
    30a4:	90 81       	ld	r25, Z
    30a6:	90 53       	subi	r25, 0x30	; 48
    30a8:	98 0f       	add	r25, r24
    30aa:	90 83       	st	Z, r25
					pos++;
    30ac:	92 e0       	ldi	r25, 0x02	; 2
    30ae:	90 93 c8 02 	sts	0x02C8, r25
					break;
    30b2:	d3 c0       	rjmp	.+422    	; 0x325a <_Z14eingabehandlerh+0x4b6>
				}
				break;
			case 2:
				switch (taste)
    30b4:	83 32       	cpi	r24, 0x23	; 35
    30b6:	09 f4       	brne	.+2      	; 0x30ba <_Z14eingabehandlerh+0x316>
    30b8:	d0 c0       	rjmp	.+416    	; 0x325a <_Z14eingabehandlerh+0x4b6>
    30ba:	8a 32       	cpi	r24, 0x2A	; 42
    30bc:	09 f4       	brne	.+2      	; 0x30c0 <_Z14eingabehandlerh+0x31c>
    30be:	cd c0       	rjmp	.+410    	; 0x325a <_Z14eingabehandlerh+0x4b6>
					case '#':
					break;
					case '*':
					break;
					default:
					zaehler.Minuten+=(taste-'0')*10;
    30c0:	e8 e0       	ldi	r30, 0x08	; 8
    30c2:	f7 e0       	ldi	r31, 0x07	; 7
    30c4:	98 2f       	mov	r25, r24
    30c6:	99 0f       	add	r25, r25
    30c8:	90 56       	subi	r25, 0x60	; 96
    30ca:	29 2f       	mov	r18, r25
    30cc:	22 0f       	add	r18, r18
    30ce:	22 0f       	add	r18, r18
    30d0:	92 0f       	add	r25, r18
    30d2:	20 81       	ld	r18, Z
    30d4:	92 0f       	add	r25, r18
    30d6:	90 83       	st	Z, r25
					pos++;
    30d8:	93 e0       	ldi	r25, 0x03	; 3
    30da:	90 93 c8 02 	sts	0x02C8, r25
					break;
    30de:	bd c0       	rjmp	.+378    	; 0x325a <_Z14eingabehandlerh+0x4b6>
				}
				break;
			case 3:
				switch (taste)
    30e0:	83 32       	cpi	r24, 0x23	; 35
    30e2:	09 f4       	brne	.+2      	; 0x30e6 <_Z14eingabehandlerh+0x342>
    30e4:	ba c0       	rjmp	.+372    	; 0x325a <_Z14eingabehandlerh+0x4b6>
    30e6:	8a 32       	cpi	r24, 0x2A	; 42
    30e8:	09 f4       	brne	.+2      	; 0x30ec <_Z14eingabehandlerh+0x348>
    30ea:	b7 c0       	rjmp	.+366    	; 0x325a <_Z14eingabehandlerh+0x4b6>
					case '#':
					break;
					case '*':
					break;
					default:
					zaehler.Minuten+=(taste-'0');
    30ec:	e8 e0       	ldi	r30, 0x08	; 8
    30ee:	f7 e0       	ldi	r31, 0x07	; 7
    30f0:	90 81       	ld	r25, Z
    30f2:	90 53       	subi	r25, 0x30	; 48
    30f4:	98 0f       	add	r25, r24
    30f6:	90 83       	st	Z, r25
					pos++;
    30f8:	94 e0       	ldi	r25, 0x04	; 4
    30fa:	90 93 c8 02 	sts	0x02C8, r25
					break;
    30fe:	ad c0       	rjmp	.+346    	; 0x325a <_Z14eingabehandlerh+0x4b6>
				}
				break;
			case 4:
				switch (taste)
    3100:	83 32       	cpi	r24, 0x23	; 35
    3102:	09 f4       	brne	.+2      	; 0x3106 <_Z14eingabehandlerh+0x362>
    3104:	aa c0       	rjmp	.+340    	; 0x325a <_Z14eingabehandlerh+0x4b6>
    3106:	8a 32       	cpi	r24, 0x2A	; 42
    3108:	09 f4       	brne	.+2      	; 0x310c <_Z14eingabehandlerh+0x368>
    310a:	a7 c0       	rjmp	.+334    	; 0x325a <_Z14eingabehandlerh+0x4b6>
					case '#':
					break;
					case '*':
					break;
					default:
					zaehler.Stunden+=(taste-'0')*10;
    310c:	e7 e0       	ldi	r30, 0x07	; 7
    310e:	f7 e0       	ldi	r31, 0x07	; 7
    3110:	98 2f       	mov	r25, r24
    3112:	99 0f       	add	r25, r25
    3114:	90 56       	subi	r25, 0x60	; 96
    3116:	29 2f       	mov	r18, r25
    3118:	22 0f       	add	r18, r18
    311a:	22 0f       	add	r18, r18
    311c:	92 0f       	add	r25, r18
    311e:	20 81       	ld	r18, Z
    3120:	92 0f       	add	r25, r18
    3122:	90 83       	st	Z, r25
					pos++;
    3124:	95 e0       	ldi	r25, 0x05	; 5
    3126:	90 93 c8 02 	sts	0x02C8, r25
					break;
    312a:	97 c0       	rjmp	.+302    	; 0x325a <_Z14eingabehandlerh+0x4b6>
				}
				break;
			case 5:
				switch (taste)
    312c:	83 32       	cpi	r24, 0x23	; 35
    312e:	41 f0       	breq	.+16     	; 0x3140 <_Z14eingabehandlerh+0x39c>
    3130:	8a 32       	cpi	r24, 0x2A	; 42
    3132:	31 f0       	breq	.+12     	; 0x3140 <_Z14eingabehandlerh+0x39c>
					case '#':
					break;
					case '*':
					break;
					default:
					zaehler.Stunden+=(taste-'0');
    3134:	e7 e0       	ldi	r30, 0x07	; 7
    3136:	f7 e0       	ldi	r31, 0x07	; 7
    3138:	90 81       	ld	r25, Z
    313a:	90 53       	subi	r25, 0x30	; 48
    313c:	98 0f       	add	r25, r24
    313e:	90 83       	st	Z, r25
					pos++;
					break;
				}
				pos=0;
    3140:	10 92 c8 02 	sts	0x02C8, r1
				anzeige&=~(1<<Einstellungsflag);
    3144:	27 7f       	andi	r18, 0xF7	; 247
    3146:	30 93 ca 02 	sts	0x02CA, r19
    314a:	20 93 c9 02 	sts	0x02C9, r18
				break;
    314e:	85 c0       	rjmp	.+266    	; 0x325a <_Z14eingabehandlerh+0x4b6>
			}
		}
		else if ((anzeige&(1<<Stoppuhrflag)))
    3150:	27 ff       	sbrs	r18, 7
    3152:	23 c0       	rjmp	.+70     	; 0x319a <_Z14eingabehandlerh+0x3f6>
		{
			if (taste=='*')
    3154:	8a 32       	cpi	r24, 0x2A	; 42
    3156:	71 f4       	brne	.+28     	; 0x3174 <_Z14eingabehandlerh+0x3d0>
			{
				if ((anzeige&(1<<Einstellungsflag)))
    3158:	23 ff       	sbrs	r18, 3
    315a:	06 c0       	rjmp	.+12     	; 0x3168 <_Z14eingabehandlerh+0x3c4>
				{
					anzeige&=~(1<<Einstellungsflag);
    315c:	27 7f       	andi	r18, 0xF7	; 247
    315e:	30 93 ca 02 	sts	0x02CA, r19
    3162:	20 93 c9 02 	sts	0x02C9, r18
    3166:	94 c0       	rjmp	.+296    	; 0x3290 <_Z14eingabehandlerh+0x4ec>
				}
				else{
					anzeige|=(1<<Einstellungsflag);
    3168:	28 60       	ori	r18, 0x08	; 8
    316a:	30 93 ca 02 	sts	0x02CA, r19
    316e:	20 93 c9 02 	sts	0x02C9, r18
    3172:	8e c0       	rjmp	.+284    	; 0x3290 <_Z14eingabehandlerh+0x4ec>
				}
			}
			else if (taste=='0')
    3174:	80 33       	cpi	r24, 0x30	; 48
    3176:	39 f4       	brne	.+14     	; 0x3186 <_Z14eingabehandlerh+0x3e2>
			{
				stoppuhr.Sekunden=0;
    3178:	10 92 f1 06 	sts	0x06F1, r1
				stoppuhr.Minuten=0;
    317c:	10 92 f0 06 	sts	0x06F0, r1
				stoppuhr.Stunden=0;
    3180:	10 92 ef 06 	sts	0x06EF, r1
    3184:	08 95       	ret
			}
			else if (taste=='#')
    3186:	83 32       	cpi	r24, 0x23	; 35
    3188:	09 f0       	breq	.+2      	; 0x318c <_Z14eingabehandlerh+0x3e8>
    318a:	88 c0       	rjmp	.+272    	; 0x329c <_Z14eingabehandlerh+0x4f8>
			{
				anzeige&=~((1<<Stoppuhrflag)|(1<<Einstellungsflag));
    318c:	27 77       	andi	r18, 0x77	; 119
				anzeige|=(1<<menueflag);
    318e:	30 62       	ori	r19, 0x20	; 32
    3190:	30 93 ca 02 	sts	0x02CA, r19
    3194:	20 93 c9 02 	sts	0x02C9, r18
    3198:	08 95       	ret
			}
		}
		else if ((anzeige&(1<<Uhrflag)))
    319a:	20 ff       	sbrs	r18, 0
    319c:	0a c0       	rjmp	.+20     	; 0x31b2 <_Z14eingabehandlerh+0x40e>
		{
			if (taste=='#')
    319e:	83 32       	cpi	r24, 0x23	; 35
    31a0:	09 f0       	breq	.+2      	; 0x31a4 <_Z14eingabehandlerh+0x400>
    31a2:	5b c0       	rjmp	.+182    	; 0x325a <_Z14eingabehandlerh+0x4b6>
			{
				anzeige&=~(1<<Uhrflag);
    31a4:	2e 7f       	andi	r18, 0xFE	; 254
				anzeige|=(1<<menueflag);
    31a6:	30 62       	ori	r19, 0x20	; 32
    31a8:	30 93 ca 02 	sts	0x02CA, r19
    31ac:	20 93 c9 02 	sts	0x02C9, r18
    31b0:	08 95       	ret
			}
		}
		else if ((anzeige&(1<<Kompasflag)))
    31b2:	22 ff       	sbrs	r18, 2
    31b4:	0a c0       	rjmp	.+20     	; 0x31ca <_Z14eingabehandlerh+0x426>
		{
			if (taste=='#')
    31b6:	83 32       	cpi	r24, 0x23	; 35
    31b8:	09 f0       	breq	.+2      	; 0x31bc <_Z14eingabehandlerh+0x418>
    31ba:	4f c0       	rjmp	.+158    	; 0x325a <_Z14eingabehandlerh+0x4b6>
			{
				anzeige&=~(1<<Kompasflag);
    31bc:	2b 7f       	andi	r18, 0xFB	; 251
				anzeige|=(1<<menueflag);
    31be:	30 62       	ori	r19, 0x20	; 32
    31c0:	30 93 ca 02 	sts	0x02CA, r19
    31c4:	20 93 c9 02 	sts	0x02C9, r18
    31c8:	08 95       	ret
			}
		}
		else if ((anzeige&(1<<Fahradflag)))
    31ca:	21 ff       	sbrs	r18, 1
    31cc:	10 c0       	rjmp	.+32     	; 0x31ee <_Z14eingabehandlerh+0x44a>
		{
			if (taste=='#')
    31ce:	83 32       	cpi	r24, 0x23	; 35
    31d0:	09 f0       	breq	.+2      	; 0x31d4 <_Z14eingabehandlerh+0x430>
    31d2:	43 c0       	rjmp	.+134    	; 0x325a <_Z14eingabehandlerh+0x4b6>
			{
				anzeige&=~(1<<Fahradflag);
    31d4:	c9 01       	movw	r24, r18
    31d6:	8d 7f       	andi	r24, 0xFD	; 253
				anzeige|=(1<<menueflag);
    31d8:	90 62       	ori	r25, 0x20	; 32
    31da:	90 93 ca 02 	sts	0x02CA, r25
    31de:	80 93 c9 02 	sts	0x02C9, r24
				TCCR1B &= ~((1<<CS12) | (1<<CS10));
    31e2:	e1 e8       	ldi	r30, 0x81	; 129
    31e4:	f0 e0       	ldi	r31, 0x00	; 0
    31e6:	80 81       	ld	r24, Z
    31e8:	8a 7f       	andi	r24, 0xFA	; 250
    31ea:	80 83       	st	Z, r24
    31ec:	08 95       	ret
			}
		}
		else if ((anzeige&(1<<Druckflag)))
    31ee:	31 ff       	sbrs	r19, 1
    31f0:	0a c0       	rjmp	.+20     	; 0x3206 <_Z14eingabehandlerh+0x462>
		{
			if (taste=='#')
    31f2:	83 32       	cpi	r24, 0x23	; 35
    31f4:	91 f5       	brne	.+100    	; 0x325a <_Z14eingabehandlerh+0x4b6>
			{
				anzeige&=~(1<<Druckflag);
    31f6:	c9 01       	movw	r24, r18
    31f8:	9d 7f       	andi	r25, 0xFD	; 253
				anzeige|=(1<<menueflag);
    31fa:	90 62       	ori	r25, 0x20	; 32
    31fc:	90 93 ca 02 	sts	0x02CA, r25
    3200:	80 93 c9 02 	sts	0x02C9, r24
    3204:	08 95       	ret
			}
		}
		else if ((anzeige&(1<<Timerflag)))
    3206:	26 ff       	sbrs	r18, 6
    3208:	1f c0       	rjmp	.+62     	; 0x3248 <_Z14eingabehandlerh+0x4a4>
		{
			if (taste=='#')
    320a:	83 32       	cpi	r24, 0x23	; 35
    320c:	31 f5       	brne	.+76     	; 0x325a <_Z14eingabehandlerh+0x4b6>
			{
				anzeige&=~((1<<Timerflag)|(1<<blinkflag));
    320e:	2f 7b       	andi	r18, 0xBF	; 191
    3210:	3f 7b       	andi	r19, 0xBF	; 191
    3212:	30 93 ca 02 	sts	0x02CA, r19
    3216:	20 93 c9 02 	sts	0x02C9, r18
				oled.invert(0);	//fuer den Fall, dass es invertiert blieb (50% der Faelle)
    321a:	60 e0       	ldi	r22, 0x00	; 0
    321c:	8e ed       	ldi	r24, 0xDE	; 222
    321e:	92 e0       	ldi	r25, 0x02	; 2
    3220:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <_ZN7Display6invertEh>
				LED.off();
    3224:	8b ed       	ldi	r24, 0xDB	; 219
    3226:	92 e0       	ldi	r25, 0x02	; 2
    3228:	0e 94 9e 1c 	call	0x393c	; 0x393c <_ZN6Output3offEv>
				Vibrationsmotor.off();
    322c:	89 ed       	ldi	r24, 0xD9	; 217
    322e:	92 e0       	ldi	r25, 0x02	; 2
    3230:	0e 94 9e 1c 	call	0x393c	; 0x393c <_ZN6Output3offEv>
				
				anzeige|=(1<<menueflag);
    3234:	80 91 c9 02 	lds	r24, 0x02C9
    3238:	90 91 ca 02 	lds	r25, 0x02CA
    323c:	90 62       	ori	r25, 0x20	; 32
    323e:	90 93 ca 02 	sts	0x02CA, r25
    3242:	80 93 c9 02 	sts	0x02C9, r24
    3246:	08 95       	ret
			}
		}
		else if (anzeige==0)
    3248:	23 2b       	or	r18, r19
    324a:	39 f4       	brne	.+14     	; 0x325a <_Z14eingabehandlerh+0x4b6>
		{
			anzeige|=(1<<menueflag);
    324c:	80 e0       	ldi	r24, 0x00	; 0
    324e:	90 e2       	ldi	r25, 0x20	; 32
    3250:	90 93 ca 02 	sts	0x02CA, r25
    3254:	80 93 c9 02 	sts	0x02C9, r24
    3258:	08 95       	ret
		}
		if ((anzeige&(1<<blinkflag)))
    325a:	20 91 c9 02 	lds	r18, 0x02C9
    325e:	30 91 ca 02 	lds	r19, 0x02CA
    3262:	36 ff       	sbrs	r19, 6
    3264:	1b c0       	rjmp	.+54     	; 0x329c <_Z14eingabehandlerh+0x4f8>
		{
			if (taste=='*')
    3266:	8a 32       	cpi	r24, 0x2A	; 42
    3268:	c9 f4       	brne	.+50     	; 0x329c <_Z14eingabehandlerh+0x4f8>
			{
				anzeige &=~(1<<blinkflag);
    326a:	3f 7b       	andi	r19, 0xBF	; 191
    326c:	30 93 ca 02 	sts	0x02CA, r19
    3270:	20 93 c9 02 	sts	0x02C9, r18
				oled.invert(0);	//fuer den Fall, dass es invertiert blieb (50% der Faelle)
    3274:	60 e0       	ldi	r22, 0x00	; 0
    3276:	8e ed       	ldi	r24, 0xDE	; 222
    3278:	92 e0       	ldi	r25, 0x02	; 2
    327a:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <_ZN7Display6invertEh>
				LED.off();
    327e:	8b ed       	ldi	r24, 0xDB	; 219
    3280:	92 e0       	ldi	r25, 0x02	; 2
    3282:	0e 94 9e 1c 	call	0x393c	; 0x393c <_ZN6Output3offEv>
				Vibrationsmotor.off();
    3286:	89 ed       	ldi	r24, 0xD9	; 217
    3288:	92 e0       	ldi	r25, 0x02	; 2
    328a:	0e 94 9e 1c 	call	0x393c	; 0x393c <_ZN6Output3offEv>
    328e:	08 95       	ret
		}
		else if (anzeige==0)
		{
			anzeige|=(1<<menueflag);
		}
		if ((anzeige&(1<<blinkflag)))
    3290:	20 91 c9 02 	lds	r18, 0x02C9
    3294:	30 91 ca 02 	lds	r19, 0x02CA
    3298:	36 fd       	sbrc	r19, 6
    329a:	e7 cf       	rjmp	.-50     	; 0x326a <_Z14eingabehandlerh+0x4c6>
    329c:	08 95       	ret

0000329e <main>:
void eingabehandler(uint8_t taste);

int main(void)
{
	//initialisierung
	initialisierung();
    329e:	0e 94 58 15 	call	0x2ab0	; 0x2ab0 <_Z15initialisierungv>
	
    while(1)
    {
		//Steuerung der interupts durch Handler
		maininterupthandler();
    32a2:	0e 94 a8 15 	call	0x2b50	; 0x2b50 <_Z19maininterupthandlerv>
		//Steuerung der Anzeige alle Sekunde zur aktualisierung maximale Aktulisierungsrate ist 1Hz
		anzeigehandler();
    32a6:	0e 94 ba 15 	call	0x2b74	; 0x2b74 <_Z14anzeigehandlerv>
		//Tasthandler
		eingabehandler(Tastatur.Taster());
    32aa:	8d ed       	ldi	r24, 0xDD	; 221
    32ac:	92 e0       	ldi	r25, 0x02	; 2
    32ae:	0e 94 00 1a 	call	0x3400	; 0x3400 <_ZN9Interface6TasterEv>
    32b2:	0e 94 d2 16 	call	0x2da4	; 0x2da4 <_Z14eingabehandlerh>
    32b6:	f5 cf       	rjmp	.-22     	; 0x32a2 <main+0x4>

000032b8 <_GLOBAL__sub_I_kompass>:
#include <stdlib.h>
#include <stdio.h>
#include <avr/interrupt.h>

#include "Kompass.h"
Kompass kompass;
    32b8:	87 e2       	ldi	r24, 0x27	; 39
    32ba:	97 e0       	ldi	r25, 0x07	; 7
    32bc:	0e 94 c9 1a 	call	0x3592	; 0x3592 <_ZN7KompassC1Ev>

#include "RTC.h"
RTC rtc;
    32c0:	8f e0       	ldi	r24, 0x0F	; 15
    32c2:	97 e0       	ldi	r25, 0x07	; 7
    32c4:	0e 94 d9 1e 	call	0x3db2	; 0x3db2 <_ZN3RTCC1Ev>
RTC zaehler;
    32c8:	87 ef       	ldi	r24, 0xF7	; 247
    32ca:	96 e0       	ldi	r25, 0x06	; 6
    32cc:	0e 94 d9 1e 	call	0x3db2	; 0x3db2 <_ZN3RTCC1Ev>
RTC stoppuhr;
    32d0:	8f ed       	ldi	r24, 0xDF	; 223
    32d2:	96 e0       	ldi	r25, 0x06	; 6
    32d4:	0e 94 d9 1e 	call	0x3db2	; 0x3db2 <_ZN3RTCC1Ev>

#include "Display.h"
Display oled;
    32d8:	8e ed       	ldi	r24, 0xDE	; 222
    32da:	92 e0       	ldi	r25, 0x02	; 2
    32dc:	0e 94 50 03 	call	0x6a0	; 0x6a0 <_ZN7DisplayC1Ev>

#include "Interface.h"
Interface Tastatur;
    32e0:	8d ed       	ldi	r24, 0xDD	; 221
    32e2:	92 e0       	ldi	r25, 0x02	; 2
    32e4:	0e 94 d8 19 	call	0x33b0	; 0x33b0 <_ZN9InterfaceC1Ev>

#include "Output.h"
Output LED('D',PORTD7);
    32e8:	47 e0       	ldi	r20, 0x07	; 7
    32ea:	64 e4       	ldi	r22, 0x44	; 68
    32ec:	8b ed       	ldi	r24, 0xDB	; 219
    32ee:	92 e0       	ldi	r25, 0x02	; 2
    32f0:	0e 94 39 1c 	call	0x3872	; 0x3872 <_ZN6OutputC1Ehh>
Output Vibrationsmotor('B',PORTB0);
    32f4:	40 e0       	ldi	r20, 0x00	; 0
    32f6:	62 e4       	ldi	r22, 0x42	; 66
    32f8:	89 ed       	ldi	r24, 0xD9	; 217
    32fa:	92 e0       	ldi	r25, 0x02	; 2
    32fc:	0e 94 39 1c 	call	0x3872	; 0x3872 <_ZN6OutputC1Ehh>

#include "Pressure.h"
Pressure Baro;
    3300:	8f ec       	ldi	r24, 0xCF	; 207
    3302:	92 e0       	ldi	r25, 0x02	; 2
    3304:	0e 94 4b 1d 	call	0x3a96	; 0x3a96 <_ZN8PressureC1Ev>
    3308:	08 95       	ret

0000330a <_GLOBAL__sub_D_kompass>:
    330a:	8f ec       	ldi	r24, 0xCF	; 207
    330c:	92 e0       	ldi	r25, 0x02	; 2
    330e:	0e 94 0f 1d 	call	0x3a1e	; 0x3a1e <_ZN8PressureD1Ev>
#include "Interface.h"
Interface Tastatur;

#include "Output.h"
Output LED('D',PORTD7);
Output Vibrationsmotor('B',PORTB0);
    3312:	89 ed       	ldi	r24, 0xD9	; 217
    3314:	92 e0       	ldi	r25, 0x02	; 2
    3316:	0e 94 69 1c 	call	0x38d2	; 0x38d2 <_ZN6OutputD1Ev>

#include "Interface.h"
Interface Tastatur;

#include "Output.h"
Output LED('D',PORTD7);
    331a:	8b ed       	ldi	r24, 0xDB	; 219
    331c:	92 e0       	ldi	r25, 0x02	; 2
    331e:	0e 94 69 1c 	call	0x38d2	; 0x38d2 <_ZN6OutputD1Ev>

#include "Display.h"
Display oled;

#include "Interface.h"
Interface Tastatur;
    3322:	8d ed       	ldi	r24, 0xDD	; 221
    3324:	92 e0       	ldi	r25, 0x02	; 2
    3326:	0e 94 d9 19 	call	0x33b2	; 0x33b2 <_ZN9InterfaceD1Ev>
RTC rtc;
RTC zaehler;
RTC stoppuhr;

#include "Display.h"
Display oled;
    332a:	8e ed       	ldi	r24, 0xDE	; 222
    332c:	92 e0       	ldi	r25, 0x02	; 2
    332e:	0e 94 bc 02 	call	0x578	; 0x578 <_ZN7DisplayD1Ev>
Kompass kompass;

#include "RTC.h"
RTC rtc;
RTC zaehler;
RTC stoppuhr;
    3332:	8f ed       	ldi	r24, 0xDF	; 223
    3334:	96 e0       	ldi	r25, 0x06	; 6
    3336:	0e 94 66 1e 	call	0x3ccc	; 0x3ccc <_ZN3RTCD1Ev>
#include "Kompass.h"
Kompass kompass;

#include "RTC.h"
RTC rtc;
RTC zaehler;
    333a:	87 ef       	ldi	r24, 0xF7	; 247
    333c:	96 e0       	ldi	r25, 0x06	; 6
    333e:	0e 94 66 1e 	call	0x3ccc	; 0x3ccc <_ZN3RTCD1Ev>

#include "Kompass.h"
Kompass kompass;

#include "RTC.h"
RTC rtc;
    3342:	8f e0       	ldi	r24, 0x0F	; 15
    3344:	97 e0       	ldi	r25, 0x07	; 7
    3346:	0e 94 66 1e 	call	0x3ccc	; 0x3ccc <_ZN3RTCD1Ev>
#include <stdlib.h>
#include <stdio.h>
#include <avr/interrupt.h>

#include "Kompass.h"
Kompass kompass;
    334a:	87 e2       	ldi	r24, 0x27	; 39
    334c:	97 e0       	ldi	r25, 0x07	; 7
    334e:	0e 94 a6 1a 	call	0x354c	; 0x354c <_ZN7KompassD1Ev>
    3352:	08 95       	ret

00003354 <_ZN3I2CC1Ev>:

// default constructor
I2C::I2C()
{
	//TWBR = 10; //Bit fuer 100khz an Tackrate, reicht gerade noch so
	TWBR=2; //fuer 8MHz und 400kHz in SCL
    3354:	82 e0       	ldi	r24, 0x02	; 2
    3356:	80 93 b8 00 	sts	0x00B8, r24
    335a:	08 95       	ret

0000335c <_ZN3I2CD1Ev>:
} //I2C

// default destructor
I2C::~I2C()
    335c:	08 95       	ret

0000335e <_ZN3I2C9twi_startEv>:
{
} //~I2C

void I2C::twi_start(){
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    335e:	84 ea       	ldi	r24, 0xA4	; 164
    3360:	80 93 bc 00 	sts	0x00BC, r24
    3364:	08 95       	ret

00003366 <_ZN3I2C8twi_stopEv>:
}
void I2C::twi_stop(){
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    3366:	84 e9       	ldi	r24, 0x94	; 148
    3368:	80 93 bc 00 	sts	0x00BC, r24
    336c:	08 95       	ret

0000336e <_ZN3I2C9twi_writeEh>:
	TWCR = (1<<TWINT) | (1<<TWEN);
	TWCR &= ~(1<<TWEA);
}

void I2C::twi_write(uint8_t data){
	while(!(TWCR & (1<<TWINT)));
    336e:	ec eb       	ldi	r30, 0xBC	; 188
    3370:	f0 e0       	ldi	r31, 0x00	; 0
    3372:	80 81       	ld	r24, Z
    3374:	88 23       	and	r24, r24
    3376:	ec f7       	brge	.-6      	; 0x3372 <_ZN3I2C9twi_writeEh+0x4>
	TWDR = data;
    3378:	60 93 bb 00 	sts	0x00BB, r22
	TWCR = (1<<TWINT) | (1<<TWEN);
    337c:	84 e8       	ldi	r24, 0x84	; 132
    337e:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));
    3382:	ec eb       	ldi	r30, 0xBC	; 188
    3384:	f0 e0       	ldi	r31, 0x00	; 0
    3386:	80 81       	ld	r24, Z
    3388:	88 23       	and	r24, r24
    338a:	ec f7       	brge	.-6      	; 0x3386 <_ZN3I2C9twi_writeEh+0x18>
}
    338c:	08 95       	ret

0000338e <_ZN3I2C8twi_readEh>:

uint8_t I2C::twi_read(uint8_t ack){
	if (ack)
    338e:	66 23       	and	r22, r22
    3390:	21 f0       	breq	.+8      	; 0x339a <_ZN3I2C8twi_readEh+0xc>
	{
		TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    3392:	84 ec       	ldi	r24, 0xC4	; 196
    3394:	80 93 bc 00 	sts	0x00BC, r24
    3398:	03 c0       	rjmp	.+6      	; 0x33a0 <_ZN3I2C8twi_readEh+0x12>
	}
	else{
		TWCR = (1<<TWINT) | (1<<TWEN);
    339a:	84 e8       	ldi	r24, 0x84	; 132
    339c:	80 93 bc 00 	sts	0x00BC, r24
	}
	
	while(!(TWCR & (1<<TWINT)));
    33a0:	ec eb       	ldi	r30, 0xBC	; 188
    33a2:	f0 e0       	ldi	r31, 0x00	; 0
    33a4:	80 81       	ld	r24, Z
    33a6:	88 23       	and	r24, r24
    33a8:	ec f7       	brge	.-6      	; 0x33a4 <_ZN3I2C8twi_readEh+0x16>
	return TWDR;
    33aa:	80 91 bb 00 	lds	r24, 0x00BB
    33ae:	08 95       	ret

000033b0 <_ZN9InterfaceC1Ev>:


#include "Interface.h"

// default constructor
Interface::Interface()
    33b0:	08 95       	ret

000033b2 <_ZN9InterfaceD1Ev>:
{
} //Interface

// default destructor
Interface::~Interface()
    33b2:	08 95       	ret

000033b4 <_ZN9Interface8debounceEPVhh>:
{
} //~Interface

uint8_t Interface::debounce(volatile uint8_t *port, uint8_t pin)
{
	if ( (*port & (1 << pin)) )
    33b4:	fb 01       	movw	r30, r22
    33b6:	80 81       	ld	r24, Z
    33b8:	90 e0       	ldi	r25, 0x00	; 0
    33ba:	04 2e       	mov	r0, r20
    33bc:	02 c0       	rjmp	.+4      	; 0x33c2 <_ZN9Interface8debounceEPVhh+0xe>
    33be:	95 95       	asr	r25
    33c0:	87 95       	ror	r24
    33c2:	0a 94       	dec	r0
    33c4:	e2 f7       	brpl	.-8      	; 0x33be <_ZN9Interface8debounceEPVhh+0xa>
    33c6:	80 ff       	sbrs	r24, 0
    33c8:	17 c0       	rjmp	.+46     	; 0x33f8 <_ZN9Interface8debounceEPVhh+0x44>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    33ca:	8f ec       	ldi	r24, 0xCF	; 207
    33cc:	97 e0       	ldi	r25, 0x07	; 7
    33ce:	01 97       	sbiw	r24, 0x01	; 1
    33d0:	f1 f7       	brne	.-4      	; 0x33ce <_ZN9Interface8debounceEPVhh+0x1a>
    33d2:	00 c0       	rjmp	.+0      	; 0x33d4 <_ZN9Interface8debounceEPVhh+0x20>
    33d4:	00 00       	nop
	{
		/* Pin wurde auf Masse gezogen, 100ms warten   */
		_delay_ms(1);
		if ( !(*port & (1 << pin)) )
    33d6:	fb 01       	movw	r30, r22
    33d8:	80 81       	ld	r24, Z
    33da:	90 e0       	ldi	r25, 0x00	; 0
    33dc:	9c 01       	movw	r18, r24
    33de:	02 c0       	rjmp	.+4      	; 0x33e4 <_ZN9Interface8debounceEPVhh+0x30>
    33e0:	35 95       	asr	r19
    33e2:	27 95       	ror	r18
    33e4:	4a 95       	dec	r20
    33e6:	e2 f7       	brpl	.-8      	; 0x33e0 <_ZN9Interface8debounceEPVhh+0x2c>
    33e8:	20 fd       	sbrc	r18, 0
    33ea:	08 c0       	rjmp	.+16     	; 0x33fc <_ZN9Interface8debounceEPVhh+0x48>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    33ec:	3a e1       	ldi	r19, 0x1A	; 26
    33ee:	3a 95       	dec	r19
    33f0:	f1 f7       	brne	.-4      	; 0x33ee <_ZN9Interface8debounceEPVhh+0x3a>
    33f2:	00 c0       	rjmp	.+0      	; 0x33f4 <_ZN9Interface8debounceEPVhh+0x40>
		{
			/* Anwender Zeit zum Loslassen des Tasters geben */
			_delay_us(10);
			return 1;
    33f4:	81 e0       	ldi	r24, 0x01	; 1
    33f6:	08 95       	ret
		}
	}
	return 0;
    33f8:	80 e0       	ldi	r24, 0x00	; 0
    33fa:	08 95       	ret
    33fc:	80 e0       	ldi	r24, 0x00	; 0
}
    33fe:	08 95       	ret

00003400 <_ZN9Interface6TasterEv>:
		break;
	}
	return abfrage;
}

uint8_t Interface::Taster(){
    3400:	1f 93       	push	r17
    3402:	cf 93       	push	r28
    3404:	df 93       	push	r29
    3406:	ec 01       	movw	r28, r24
	uint8_t taste = 'A';
	
	//erste Zeile
	PORTD |= (1<<PORTD3);
    3408:	5b 9a       	sbi	0x0b, 3	; 11
    340a:	82 e0       	ldi	r24, 0x02	; 2
    340c:	8a 95       	dec	r24
    340e:	f1 f7       	brne	.-4      	; 0x340c <_ZN9Interface6TasterEv+0xc>
    3410:	00 c0       	rjmp	.+0      	; 0x3412 <_ZN9Interface6TasterEv+0x12>
	_delay_us(1);
	if(debounce(&PIND,PIND4)){
    3412:	44 e0       	ldi	r20, 0x04	; 4
    3414:	69 e2       	ldi	r22, 0x29	; 41
    3416:	70 e0       	ldi	r23, 0x00	; 0
    3418:	ce 01       	movw	r24, r28
    341a:	0e 94 da 19 	call	0x33b4	; 0x33b4 <_ZN9Interface8debounceEPVhh>
    341e:	81 11       	cpse	r24, r1
    3420:	12 c0       	rjmp	.+36     	; 0x3446 <_ZN9Interface6TasterEv+0x46>
		taste = '3';
	}
	else if (debounce(&PIND,PIND5))
    3422:	45 e0       	ldi	r20, 0x05	; 5
    3424:	69 e2       	ldi	r22, 0x29	; 41
    3426:	70 e0       	ldi	r23, 0x00	; 0
    3428:	ce 01       	movw	r24, r28
    342a:	0e 94 da 19 	call	0x33b4	; 0x33b4 <_ZN9Interface8debounceEPVhh>
    342e:	81 11       	cpse	r24, r1
    3430:	0c c0       	rjmp	.+24     	; 0x344a <_ZN9Interface6TasterEv+0x4a>
	{
		taste = '2';
	}
	else if (debounce(&PIND,PIND6))
    3432:	46 e0       	ldi	r20, 0x06	; 6
    3434:	69 e2       	ldi	r22, 0x29	; 41
    3436:	70 e0       	ldi	r23, 0x00	; 0
    3438:	ce 01       	movw	r24, r28
    343a:	0e 94 da 19 	call	0x33b4	; 0x33b4 <_ZN9Interface8debounceEPVhh>
    343e:	81 11       	cpse	r24, r1
    3440:	06 c0       	rjmp	.+12     	; 0x344e <_ZN9Interface6TasterEv+0x4e>
	}
	return abfrage;
}

uint8_t Interface::Taster(){
	uint8_t taste = 'A';
    3442:	11 e4       	ldi	r17, 0x41	; 65
    3444:	05 c0       	rjmp	.+10     	; 0x3450 <_ZN9Interface6TasterEv+0x50>
	
	//erste Zeile
	PORTD |= (1<<PORTD3);
	_delay_us(1);
	if(debounce(&PIND,PIND4)){
		taste = '3';
    3446:	13 e3       	ldi	r17, 0x33	; 51
    3448:	03 c0       	rjmp	.+6      	; 0x3450 <_ZN9Interface6TasterEv+0x50>
	}
	else if (debounce(&PIND,PIND5))
	{
		taste = '2';
    344a:	12 e3       	ldi	r17, 0x32	; 50
    344c:	01 c0       	rjmp	.+2      	; 0x3450 <_ZN9Interface6TasterEv+0x50>
	}
	else if (debounce(&PIND,PIND6))
	{
		taste = '1';
    344e:	11 e3       	ldi	r17, 0x31	; 49
	}
	PORTD &= ~(1<<PORTD3);
    3450:	5b 98       	cbi	0x0b, 3	; 11
	
	//zweite Zeile
	PORTD |= (1<<PORTD2);
    3452:	5a 9a       	sbi	0x0b, 2	; 11
    3454:	82 e0       	ldi	r24, 0x02	; 2
    3456:	8a 95       	dec	r24
    3458:	f1 f7       	brne	.-4      	; 0x3456 <_ZN9Interface6TasterEv+0x56>
    345a:	00 c0       	rjmp	.+0      	; 0x345c <_ZN9Interface6TasterEv+0x5c>
	_delay_us(1);
	if(debounce(&PIND,PIND4)){
    345c:	44 e0       	ldi	r20, 0x04	; 4
    345e:	69 e2       	ldi	r22, 0x29	; 41
    3460:	70 e0       	ldi	r23, 0x00	; 0
    3462:	ce 01       	movw	r24, r28
    3464:	0e 94 da 19 	call	0x33b4	; 0x33b4 <_ZN9Interface8debounceEPVhh>
    3468:	81 11       	cpse	r24, r1
    346a:	11 c0       	rjmp	.+34     	; 0x348e <_ZN9Interface6TasterEv+0x8e>
		taste = '6';
	}
	else if (debounce(&PIND,PIND5))
    346c:	45 e0       	ldi	r20, 0x05	; 5
    346e:	69 e2       	ldi	r22, 0x29	; 41
    3470:	70 e0       	ldi	r23, 0x00	; 0
    3472:	ce 01       	movw	r24, r28
    3474:	0e 94 da 19 	call	0x33b4	; 0x33b4 <_ZN9Interface8debounceEPVhh>
    3478:	81 11       	cpse	r24, r1
    347a:	0b c0       	rjmp	.+22     	; 0x3492 <_ZN9Interface6TasterEv+0x92>
	{
		taste = '5';
	}
	else if (debounce(&PIND,PIND6))
    347c:	46 e0       	ldi	r20, 0x06	; 6
    347e:	69 e2       	ldi	r22, 0x29	; 41
    3480:	70 e0       	ldi	r23, 0x00	; 0
    3482:	ce 01       	movw	r24, r28
    3484:	0e 94 da 19 	call	0x33b4	; 0x33b4 <_ZN9Interface8debounceEPVhh>
    3488:	81 11       	cpse	r24, r1
    348a:	05 c0       	rjmp	.+10     	; 0x3496 <_ZN9Interface6TasterEv+0x96>
    348c:	05 c0       	rjmp	.+10     	; 0x3498 <_ZN9Interface6TasterEv+0x98>
	
	//zweite Zeile
	PORTD |= (1<<PORTD2);
	_delay_us(1);
	if(debounce(&PIND,PIND4)){
		taste = '6';
    348e:	16 e3       	ldi	r17, 0x36	; 54
    3490:	03 c0       	rjmp	.+6      	; 0x3498 <_ZN9Interface6TasterEv+0x98>
	}
	else if (debounce(&PIND,PIND5))
	{
		taste = '5';
    3492:	15 e3       	ldi	r17, 0x35	; 53
    3494:	01 c0       	rjmp	.+2      	; 0x3498 <_ZN9Interface6TasterEv+0x98>
	}
	else if (debounce(&PIND,PIND6))
	{
		taste = '4';
    3496:	14 e3       	ldi	r17, 0x34	; 52
	}
	PORTD &= ~(1<<PORTD2);
    3498:	5a 98       	cbi	0x0b, 2	; 11
	
	//dritte Zeile
	PORTD |= (1<<PORTD1);
    349a:	59 9a       	sbi	0x0b, 1	; 11
    349c:	82 e0       	ldi	r24, 0x02	; 2
    349e:	8a 95       	dec	r24
    34a0:	f1 f7       	brne	.-4      	; 0x349e <_ZN9Interface6TasterEv+0x9e>
    34a2:	00 c0       	rjmp	.+0      	; 0x34a4 <_ZN9Interface6TasterEv+0xa4>
	_delay_us(1);
	if(debounce(&PIND,PIND4)){
    34a4:	44 e0       	ldi	r20, 0x04	; 4
    34a6:	69 e2       	ldi	r22, 0x29	; 41
    34a8:	70 e0       	ldi	r23, 0x00	; 0
    34aa:	ce 01       	movw	r24, r28
    34ac:	0e 94 da 19 	call	0x33b4	; 0x33b4 <_ZN9Interface8debounceEPVhh>
    34b0:	81 11       	cpse	r24, r1
    34b2:	11 c0       	rjmp	.+34     	; 0x34d6 <_ZN9Interface6TasterEv+0xd6>
		taste = '9';
	}
	else if (debounce(&PIND,PIND5))
    34b4:	45 e0       	ldi	r20, 0x05	; 5
    34b6:	69 e2       	ldi	r22, 0x29	; 41
    34b8:	70 e0       	ldi	r23, 0x00	; 0
    34ba:	ce 01       	movw	r24, r28
    34bc:	0e 94 da 19 	call	0x33b4	; 0x33b4 <_ZN9Interface8debounceEPVhh>
    34c0:	81 11       	cpse	r24, r1
    34c2:	0b c0       	rjmp	.+22     	; 0x34da <_ZN9Interface6TasterEv+0xda>
	{
		taste = '8';
	}
	else if (debounce(&PIND,PIND6))
    34c4:	46 e0       	ldi	r20, 0x06	; 6
    34c6:	69 e2       	ldi	r22, 0x29	; 41
    34c8:	70 e0       	ldi	r23, 0x00	; 0
    34ca:	ce 01       	movw	r24, r28
    34cc:	0e 94 da 19 	call	0x33b4	; 0x33b4 <_ZN9Interface8debounceEPVhh>
    34d0:	81 11       	cpse	r24, r1
    34d2:	05 c0       	rjmp	.+10     	; 0x34de <_ZN9Interface6TasterEv+0xde>
    34d4:	05 c0       	rjmp	.+10     	; 0x34e0 <_ZN9Interface6TasterEv+0xe0>
	
	//dritte Zeile
	PORTD |= (1<<PORTD1);
	_delay_us(1);
	if(debounce(&PIND,PIND4)){
		taste = '9';
    34d6:	19 e3       	ldi	r17, 0x39	; 57
    34d8:	03 c0       	rjmp	.+6      	; 0x34e0 <_ZN9Interface6TasterEv+0xe0>
	}
	else if (debounce(&PIND,PIND5))
	{
		taste = '8';
    34da:	18 e3       	ldi	r17, 0x38	; 56
    34dc:	01 c0       	rjmp	.+2      	; 0x34e0 <_ZN9Interface6TasterEv+0xe0>
	}
	else if (debounce(&PIND,PIND6))
	{
		taste = '7';
    34de:	17 e3       	ldi	r17, 0x37	; 55
	}
	PORTD &= ~(1<<PORT1);
    34e0:	59 98       	cbi	0x0b, 1	; 11
	
	//vierte Zeile
	PORTD |= (1<<PORTD0);
    34e2:	58 9a       	sbi	0x0b, 0	; 11
    34e4:	82 e0       	ldi	r24, 0x02	; 2
    34e6:	8a 95       	dec	r24
    34e8:	f1 f7       	brne	.-4      	; 0x34e6 <_ZN9Interface6TasterEv+0xe6>
    34ea:	00 c0       	rjmp	.+0      	; 0x34ec <_ZN9Interface6TasterEv+0xec>
	_delay_us(1);
	if(debounce(&PIND,PIND4)){
    34ec:	44 e0       	ldi	r20, 0x04	; 4
    34ee:	69 e2       	ldi	r22, 0x29	; 41
    34f0:	70 e0       	ldi	r23, 0x00	; 0
    34f2:	ce 01       	movw	r24, r28
    34f4:	0e 94 da 19 	call	0x33b4	; 0x33b4 <_ZN9Interface8debounceEPVhh>
    34f8:	81 11       	cpse	r24, r1
    34fa:	11 c0       	rjmp	.+34     	; 0x351e <_ZN9Interface6TasterEv+0x11e>
		taste = '#';
	}
	else if (debounce(&PIND,PIND5))
    34fc:	45 e0       	ldi	r20, 0x05	; 5
    34fe:	69 e2       	ldi	r22, 0x29	; 41
    3500:	70 e0       	ldi	r23, 0x00	; 0
    3502:	ce 01       	movw	r24, r28
    3504:	0e 94 da 19 	call	0x33b4	; 0x33b4 <_ZN9Interface8debounceEPVhh>
    3508:	81 11       	cpse	r24, r1
    350a:	0b c0       	rjmp	.+22     	; 0x3522 <_ZN9Interface6TasterEv+0x122>
	{
		taste = '0';
	}
	else if (debounce(&PIND,PIND6))
    350c:	46 e0       	ldi	r20, 0x06	; 6
    350e:	69 e2       	ldi	r22, 0x29	; 41
    3510:	70 e0       	ldi	r23, 0x00	; 0
    3512:	ce 01       	movw	r24, r28
    3514:	0e 94 da 19 	call	0x33b4	; 0x33b4 <_ZN9Interface8debounceEPVhh>
    3518:	81 11       	cpse	r24, r1
    351a:	05 c0       	rjmp	.+10     	; 0x3526 <_ZN9Interface6TasterEv+0x126>
    351c:	05 c0       	rjmp	.+10     	; 0x3528 <_ZN9Interface6TasterEv+0x128>
	
	//vierte Zeile
	PORTD |= (1<<PORTD0);
	_delay_us(1);
	if(debounce(&PIND,PIND4)){
		taste = '#';
    351e:	13 e2       	ldi	r17, 0x23	; 35
    3520:	03 c0       	rjmp	.+6      	; 0x3528 <_ZN9Interface6TasterEv+0x128>
	}
	else if (debounce(&PIND,PIND5))
	{
		taste = '0';
    3522:	10 e3       	ldi	r17, 0x30	; 48
    3524:	01 c0       	rjmp	.+2      	; 0x3528 <_ZN9Interface6TasterEv+0x128>
	}
	else if (debounce(&PIND,PIND6))
	{
		taste = '*';
    3526:	1a e2       	ldi	r17, 0x2A	; 42
	}
	PORTD &= ~(1<<PORTD0);
    3528:	58 98       	cbi	0x0b, 0	; 11
	
	return taste;
}
    352a:	81 2f       	mov	r24, r17
    352c:	df 91       	pop	r29
    352e:	cf 91       	pop	r28
    3530:	1f 91       	pop	r17
    3532:	08 95       	ret

00003534 <_ZN9Interface17ZahlenausTastaturEv>:

uint8_t Interface::ZahlenausTastatur(){
    3534:	cf 93       	push	r28
    3536:	df 93       	push	r29
    3538:	ec 01       	movw	r28, r24
	while(true){
		uint8_t taste = Taster();
    353a:	ce 01       	movw	r24, r28
    353c:	0e 94 00 1a 	call	0x3400	; 0x3400 <_ZN9Interface6TasterEv>
		if(taste>='0' && taste<='9'){
    3540:	80 53       	subi	r24, 0x30	; 48
    3542:	8a 30       	cpi	r24, 0x0A	; 10
    3544:	d0 f7       	brcc	.-12     	; 0x353a <_ZN9Interface17ZahlenausTastaturEv+0x6>
			return taste - '0';
		}
	}
}
    3546:	df 91       	pop	r29
    3548:	cf 91       	pop	r28
    354a:	08 95       	ret

0000354c <_ZN7KompassD1Ev>:
		offset[i]=0;
	}
} //Kompass

// default destructor
Kompass::~Kompass()
    354c:	06 96       	adiw	r24, 0x06	; 6
    354e:	0e 94 ae 19 	call	0x335c	; 0x335c <_ZN3I2CD1Ev>
    3552:	08 95       	ret

00003554 <_ZN7Kompass16HMC5883L_commandEhh>:
{
} //~Kompass

void Kompass::HMC5883L_command(uint8_t adresse, uint8_t command){
    3554:	0f 93       	push	r16
    3556:	1f 93       	push	r17
    3558:	cf 93       	push	r28
    355a:	df 93       	push	r29
    355c:	06 2f       	mov	r16, r22
    355e:	14 2f       	mov	r17, r20
	i2c.twi_start();
    3560:	ec 01       	movw	r28, r24
    3562:	26 96       	adiw	r28, 0x06	; 6
    3564:	ce 01       	movw	r24, r28
    3566:	0e 94 af 19 	call	0x335e	; 0x335e <_ZN3I2C9twi_startEv>
	i2c.twi_write(HMCWRITEADRESSE);
    356a:	6c e3       	ldi	r22, 0x3C	; 60
    356c:	ce 01       	movw	r24, r28
    356e:	0e 94 b7 19 	call	0x336e	; 0x336e <_ZN3I2C9twi_writeEh>
	i2c.twi_write(adresse);
    3572:	60 2f       	mov	r22, r16
    3574:	ce 01       	movw	r24, r28
    3576:	0e 94 b7 19 	call	0x336e	; 0x336e <_ZN3I2C9twi_writeEh>
	i2c.twi_write(command);
    357a:	61 2f       	mov	r22, r17
    357c:	ce 01       	movw	r24, r28
    357e:	0e 94 b7 19 	call	0x336e	; 0x336e <_ZN3I2C9twi_writeEh>
	i2c.twi_stop();
    3582:	ce 01       	movw	r24, r28
    3584:	0e 94 b3 19 	call	0x3366	; 0x3366 <_ZN3I2C8twi_stopEv>
}
    3588:	df 91       	pop	r29
    358a:	cf 91       	pop	r28
    358c:	1f 91       	pop	r17
    358e:	0f 91       	pop	r16
    3590:	08 95       	ret

00003592 <_ZN7KompassC1Ev>:


#include "Kompass.h"

// default constructor
Kompass::Kompass()
    3592:	cf 93       	push	r28
    3594:	df 93       	push	r29
    3596:	ec 01       	movw	r28, r24
    3598:	06 96       	adiw	r24, 0x06	; 6
    359a:	0e 94 aa 19 	call	0x3354	; 0x3354 <_ZN3I2CC1Ev>
{
	//Config Register A
	HMC5883L_command(0x00, HMCSAMPLES8+HMCDATARATE15+HMCMEASUREMODENORMAL);
    359e:	40 e7       	ldi	r20, 0x70	; 112
    35a0:	60 e0       	ldi	r22, 0x00	; 0
    35a2:	ce 01       	movw	r24, r28
    35a4:	0e 94 aa 1a 	call	0x3554	; 0x3554 <_ZN7Kompass16HMC5883L_commandEhh>

	//Config Gain
	HMC5883L_command(0x01, HMCGAIN1090);
    35a8:	40 e2       	ldi	r20, 0x20	; 32
    35aa:	61 e0       	ldi	r22, 0x01	; 1
    35ac:	ce 01       	movw	r24, r28
    35ae:	0e 94 aa 1a 	call	0x3554	; 0x3554 <_ZN7Kompass16HMC5883L_commandEhh>

	//Set Mode auf single
	HMC5883L_command(0x02, HMCSIGLEMODE);
    35b2:	41 e0       	ldi	r20, 0x01	; 1
    35b4:	62 e0       	ldi	r22, 0x02	; 2
    35b6:	ce 01       	movw	r24, r28
    35b8:	0e 94 aa 1a 	call	0x3554	; 0x3554 <_ZN7Kompass16HMC5883L_commandEhh>
	//Variablen
	for(uint8_t i=0;i<3;i++){
		achsen[i]=0;
    35bc:	19 82       	std	Y+1, r1	; 0x01
    35be:	18 82       	st	Y, r1
		offset[i]=0;
    35c0:	18 86       	std	Y+8, r1	; 0x08
    35c2:	1f 82       	std	Y+7, r1	; 0x07

	//Set Mode auf single
	HMC5883L_command(0x02, HMCSIGLEMODE);
	//Variablen
	for(uint8_t i=0;i<3;i++){
		achsen[i]=0;
    35c4:	1b 82       	std	Y+3, r1	; 0x03
    35c6:	1a 82       	std	Y+2, r1	; 0x02
		offset[i]=0;
    35c8:	1a 86       	std	Y+10, r1	; 0x0a
    35ca:	19 86       	std	Y+9, r1	; 0x09

	//Set Mode auf single
	HMC5883L_command(0x02, HMCSIGLEMODE);
	//Variablen
	for(uint8_t i=0;i<3;i++){
		achsen[i]=0;
    35cc:	1d 82       	std	Y+5, r1	; 0x05
    35ce:	1c 82       	std	Y+4, r1	; 0x04
		offset[i]=0;
    35d0:	1c 86       	std	Y+12, r1	; 0x0c
    35d2:	1b 86       	std	Y+11, r1	; 0x0b
	}
} //Kompass
    35d4:	df 91       	pop	r29
    35d6:	cf 91       	pop	r28
    35d8:	08 95       	ret

000035da <_ZN7Kompass20HMC5883L_readHeadingEv>:
		achsen[i]=0;
		offset[i]=0;
	}
}

uint8_t Kompass::HMC5883L_readHeading(){
    35da:	bf 92       	push	r11
    35dc:	cf 92       	push	r12
    35de:	df 92       	push	r13
    35e0:	ef 92       	push	r14
    35e2:	ff 92       	push	r15
    35e4:	0f 93       	push	r16
    35e6:	1f 93       	push	r17
    35e8:	cf 93       	push	r28
    35ea:	df 93       	push	r29
    35ec:	00 d0       	rcall	.+0      	; 0x35ee <_ZN7Kompass20HMC5883L_readHeadingEv+0x14>
    35ee:	00 d0       	rcall	.+0      	; 0x35f0 <_ZN7Kompass20HMC5883L_readHeadingEv+0x16>
    35f0:	00 d0       	rcall	.+0      	; 0x35f2 <_ZN7Kompass20HMC5883L_readHeadingEv+0x18>
    35f2:	cd b7       	in	r28, 0x3d	; 61
    35f4:	de b7       	in	r29, 0x3e	; 62
    35f6:	6c 01       	movw	r12, r24
	cli();
    35f8:	f8 94       	cli
	uint8_t heading[6];
	i2c.twi_start();
    35fa:	7c 01       	movw	r14, r24
    35fc:	26 e0       	ldi	r18, 0x06	; 6
    35fe:	e2 0e       	add	r14, r18
    3600:	f1 1c       	adc	r15, r1
    3602:	c7 01       	movw	r24, r14
    3604:	0e 94 af 19 	call	0x335e	; 0x335e <_ZN3I2C9twi_startEv>
	i2c.twi_write(HMCWRITEADRESSE);
    3608:	6c e3       	ldi	r22, 0x3C	; 60
    360a:	c7 01       	movw	r24, r14
    360c:	0e 94 b7 19 	call	0x336e	; 0x336e <_ZN3I2C9twi_writeEh>
	i2c.twi_write(0x03);
    3610:	63 e0       	ldi	r22, 0x03	; 3
    3612:	c7 01       	movw	r24, r14
    3614:	0e 94 b7 19 	call	0x336e	; 0x336e <_ZN3I2C9twi_writeEh>
	i2c.twi_start();
    3618:	c7 01       	movw	r24, r14
    361a:	0e 94 af 19 	call	0x335e	; 0x335e <_ZN3I2C9twi_startEv>
	i2c.twi_write(HMCREADADRESSE);
    361e:	6d e3       	ldi	r22, 0x3D	; 61
    3620:	c7 01       	movw	r24, r14
    3622:	0e 94 b7 19 	call	0x336e	; 0x336e <_ZN3I2C9twi_writeEh>
    3626:	8e 01       	movw	r16, r28
    3628:	0f 5f       	subi	r16, 0xFF	; 255
    362a:	1f 4f       	sbci	r17, 0xFF	; 255
	
	for(uint8_t i=0; i<6;i++){
    362c:	b1 2c       	mov	r11, r1
		if (i<5)
    362e:	84 e0       	ldi	r24, 0x04	; 4
    3630:	8b 15       	cp	r24, r11
    3632:	38 f0       	brcs	.+14     	; 0x3642 <_ZN7Kompass20HMC5883L_readHeadingEv+0x68>
		{
			heading[i]=i2c.twi_read(1);
    3634:	61 e0       	ldi	r22, 0x01	; 1
    3636:	c7 01       	movw	r24, r14
    3638:	0e 94 c7 19 	call	0x338e	; 0x338e <_ZN3I2C8twi_readEh>
    363c:	f8 01       	movw	r30, r16
    363e:	80 83       	st	Z, r24
    3640:	06 c0       	rjmp	.+12     	; 0x364e <_ZN7Kompass20HMC5883L_readHeadingEv+0x74>
		}
		else
		{
			heading[i]=i2c.twi_read(0);
    3642:	60 e0       	ldi	r22, 0x00	; 0
    3644:	c7 01       	movw	r24, r14
    3646:	0e 94 c7 19 	call	0x338e	; 0x338e <_ZN3I2C8twi_readEh>
    364a:	f8 01       	movw	r30, r16
    364c:	80 83       	st	Z, r24
	i2c.twi_write(HMCWRITEADRESSE);
	i2c.twi_write(0x03);
	i2c.twi_start();
	i2c.twi_write(HMCREADADRESSE);
	
	for(uint8_t i=0; i<6;i++){
    364e:	b3 94       	inc	r11
    3650:	0f 5f       	subi	r16, 0xFF	; 255
    3652:	1f 4f       	sbci	r17, 0xFF	; 255
    3654:	f6 e0       	ldi	r31, 0x06	; 6
    3656:	bf 12       	cpse	r11, r31
    3658:	ea cf       	rjmp	.-44     	; 0x362e <_ZN7Kompass20HMC5883L_readHeadingEv+0x54>
		{
			heading[i]=i2c.twi_read(0);
		}
		
	}
	i2c.twi_stop();
    365a:	c7 01       	movw	r24, r14
    365c:	0e 94 b3 19 	call	0x3366	; 0x3366 <_ZN3I2C8twi_stopEv>
	achsen[0] =(int16_t) (heading[1] | (heading[0] << 8));
    3660:	89 81       	ldd	r24, Y+1	; 0x01
    3662:	90 e0       	ldi	r25, 0x00	; 0
    3664:	98 2f       	mov	r25, r24
    3666:	88 27       	eor	r24, r24
    3668:	2a 81       	ldd	r18, Y+2	; 0x02
    366a:	82 2b       	or	r24, r18
    366c:	f6 01       	movw	r30, r12
    366e:	91 83       	std	Z+1, r25	; 0x01
    3670:	80 83       	st	Z, r24
	achsen[2] =(int16_t) (heading[3] | (heading[2] << 8));
    3672:	8b 81       	ldd	r24, Y+3	; 0x03
    3674:	90 e0       	ldi	r25, 0x00	; 0
    3676:	98 2f       	mov	r25, r24
    3678:	88 27       	eor	r24, r24
    367a:	2c 81       	ldd	r18, Y+4	; 0x04
    367c:	82 2b       	or	r24, r18
    367e:	95 83       	std	Z+5, r25	; 0x05
    3680:	84 83       	std	Z+4, r24	; 0x04
	achsen[1] =(int16_t) (heading[5] | (heading[4] << 8));
    3682:	8d 81       	ldd	r24, Y+5	; 0x05
    3684:	90 e0       	ldi	r25, 0x00	; 0
    3686:	98 2f       	mov	r25, r24
    3688:	88 27       	eor	r24, r24
    368a:	2e 81       	ldd	r18, Y+6	; 0x06
    368c:	82 2b       	or	r24, r18
    368e:	93 83       	std	Z+3, r25	; 0x03
    3690:	82 83       	std	Z+2, r24	; 0x02
	sei();
    3692:	78 94       	sei
	if (achsen[0]==-4096 || achsen[1]==-4096 || achsen[2]==-4096)
    3694:	f6 01       	movw	r30, r12
    3696:	80 81       	ld	r24, Z
    3698:	91 81       	ldd	r25, Z+1	; 0x01
    369a:	81 15       	cp	r24, r1
    369c:	90 4f       	sbci	r25, 0xF0	; 240
    369e:	09 f4       	brne	.+2      	; 0x36a2 <_ZN7Kompass20HMC5883L_readHeadingEv+0xc8>
    36a0:	47 c0       	rjmp	.+142    	; 0x3730 <_ZN7Kompass20HMC5883L_readHeadingEv+0x156>
    36a2:	f6 01       	movw	r30, r12
    36a4:	82 81       	ldd	r24, Z+2	; 0x02
    36a6:	93 81       	ldd	r25, Z+3	; 0x03
    36a8:	81 15       	cp	r24, r1
    36aa:	90 4f       	sbci	r25, 0xF0	; 240
    36ac:	09 f4       	brne	.+2      	; 0x36b0 <_ZN7Kompass20HMC5883L_readHeadingEv+0xd6>
    36ae:	42 c0       	rjmp	.+132    	; 0x3734 <_ZN7Kompass20HMC5883L_readHeadingEv+0x15a>
    36b0:	f6 01       	movw	r30, r12
    36b2:	84 81       	ldd	r24, Z+4	; 0x04
    36b4:	95 81       	ldd	r25, Z+5	; 0x05
    36b6:	81 15       	cp	r24, r1
    36b8:	90 4f       	sbci	r25, 0xF0	; 240
    36ba:	f1 f1       	breq	.+124    	; 0x3738 <_ZN7Kompass20HMC5883L_readHeadingEv+0x15e>
    36bc:	f6 01       	movw	r30, r12
    36be:	83 e0       	ldi	r24, 0x03	; 3
    36c0:	df 01       	movw	r26, r30
	}
	//Kallibrierung durchfuehren, jedes mal, wenn eine abfrage stattfindet
	//somit passive kalibrierung
	else{
		for(uint8_t i=0;i<3;i++){
			if(achsen[i]>max[i]){
    36c2:	20 81       	ld	r18, Z
    36c4:	31 81       	ldd	r19, Z+1	; 0x01
    36c6:	45 85       	ldd	r20, Z+13	; 0x0d
    36c8:	56 85       	ldd	r21, Z+14	; 0x0e
    36ca:	42 17       	cp	r20, r18
    36cc:	53 07       	cpc	r21, r19
    36ce:	8c f4       	brge	.+34     	; 0x36f2 <_ZN7Kompass20HMC5883L_readHeadingEv+0x118>
				max[i]=achsen[i];
    36d0:	36 87       	std	Z+14, r19	; 0x0e
    36d2:	25 87       	std	Z+13, r18	; 0x0d
				offset[i]=(max[i]+min[i])/2;
    36d4:	43 89       	ldd	r20, Z+19	; 0x13
    36d6:	54 89       	ldd	r21, Z+20	; 0x14
    36d8:	24 0f       	add	r18, r20
    36da:	35 1f       	adc	r19, r21
    36dc:	33 23       	and	r19, r19
    36de:	14 f4       	brge	.+4      	; 0x36e4 <_ZN7Kompass20HMC5883L_readHeadingEv+0x10a>
    36e0:	2f 5f       	subi	r18, 0xFF	; 255
    36e2:	3f 4f       	sbci	r19, 0xFF	; 255
    36e4:	35 95       	asr	r19
    36e6:	27 95       	ror	r18
    36e8:	18 96       	adiw	r26, 0x08	; 8
    36ea:	3c 93       	st	X, r19
    36ec:	2e 93       	st	-X, r18
    36ee:	17 97       	sbiw	r26, 0x07	; 7
    36f0:	1a c0       	rjmp	.+52     	; 0x3726 <_ZN7Kompass20HMC5883L_readHeadingEv+0x14c>
			}
			else if(achsen[i]<min[i]){
    36f2:	63 89       	ldd	r22, Z+19	; 0x13
    36f4:	74 89       	ldd	r23, Z+20	; 0x14
    36f6:	26 17       	cp	r18, r22
    36f8:	37 07       	cpc	r19, r23
    36fa:	7c f4       	brge	.+30     	; 0x371a <_ZN7Kompass20HMC5883L_readHeadingEv+0x140>
				min[i]=achsen[i];
    36fc:	34 8b       	std	Z+20, r19	; 0x14
    36fe:	23 8b       	std	Z+19, r18	; 0x13
				offset[i]=(max[i]+min[i])/2;
    3700:	24 0f       	add	r18, r20
    3702:	35 1f       	adc	r19, r21
    3704:	33 23       	and	r19, r19
    3706:	14 f4       	brge	.+4      	; 0x370c <_ZN7Kompass20HMC5883L_readHeadingEv+0x132>
    3708:	2f 5f       	subi	r18, 0xFF	; 255
    370a:	3f 4f       	sbci	r19, 0xFF	; 255
    370c:	35 95       	asr	r19
    370e:	27 95       	ror	r18
    3710:	18 96       	adiw	r26, 0x08	; 8
    3712:	3c 93       	st	X, r19
    3714:	2e 93       	st	-X, r18
    3716:	17 97       	sbiw	r26, 0x07	; 7
    3718:	06 c0       	rjmp	.+12     	; 0x3726 <_ZN7Kompass20HMC5883L_readHeadingEv+0x14c>
			}
			else {
				achsen[i]-=offset[i];
    371a:	47 81       	ldd	r20, Z+7	; 0x07
    371c:	50 85       	ldd	r21, Z+8	; 0x08
    371e:	24 1b       	sub	r18, r20
    3720:	35 0b       	sbc	r19, r21
    3722:	31 83       	std	Z+1, r19	; 0x01
    3724:	20 83       	st	Z, r18
    3726:	81 50       	subi	r24, 0x01	; 1
    3728:	32 96       	adiw	r30, 0x02	; 2
		return 1;
	}
	//Kallibrierung durchfuehren, jedes mal, wenn eine abfrage stattfindet
	//somit passive kalibrierung
	else{
		for(uint8_t i=0;i<3;i++){
    372a:	81 11       	cpse	r24, r1
    372c:	c9 cf       	rjmp	.-110    	; 0x36c0 <_ZN7Kompass20HMC5883L_readHeadingEv+0xe6>
    372e:	05 c0       	rjmp	.+10     	; 0x373a <_ZN7Kompass20HMC5883L_readHeadingEv+0x160>
	achsen[2] =(int16_t) (heading[3] | (heading[2] << 8));
	achsen[1] =(int16_t) (heading[5] | (heading[4] << 8));
	sei();
	if (achsen[0]==-4096 || achsen[1]==-4096 || achsen[2]==-4096)
	{
		return 1;
    3730:	81 e0       	ldi	r24, 0x01	; 1
    3732:	03 c0       	rjmp	.+6      	; 0x373a <_ZN7Kompass20HMC5883L_readHeadingEv+0x160>
    3734:	81 e0       	ldi	r24, 0x01	; 1
    3736:	01 c0       	rjmp	.+2      	; 0x373a <_ZN7Kompass20HMC5883L_readHeadingEv+0x160>
    3738:	81 e0       	ldi	r24, 0x01	; 1
			}
		}
	}
	
	return 0;
}
    373a:	26 96       	adiw	r28, 0x06	; 6
    373c:	0f b6       	in	r0, 0x3f	; 63
    373e:	f8 94       	cli
    3740:	de bf       	out	0x3e, r29	; 62
    3742:	0f be       	out	0x3f, r0	; 63
    3744:	cd bf       	out	0x3d, r28	; 61
    3746:	df 91       	pop	r29
    3748:	cf 91       	pop	r28
    374a:	1f 91       	pop	r17
    374c:	0f 91       	pop	r16
    374e:	ff 90       	pop	r15
    3750:	ef 90       	pop	r14
    3752:	df 90       	pop	r13
    3754:	cf 90       	pop	r12
    3756:	bf 90       	pop	r11
    3758:	08 95       	ret

0000375a <_ZN7Kompass5angleEv>:

double Kompass::angle(){
    375a:	cf 92       	push	r12
    375c:	df 92       	push	r13
    375e:	ef 92       	push	r14
    3760:	ff 92       	push	r15
    3762:	cf 93       	push	r28
    3764:	df 93       	push	r29
    3766:	ec 01       	movw	r28, r24
	double angle=0;
	if (HMC5883L_readHeading())
    3768:	0e 94 ed 1a 	call	0x35da	; 0x35da <_ZN7Kompass20HMC5883L_readHeadingEv>
    376c:	81 11       	cpse	r24, r1
    376e:	57 c0       	rjmp	.+174    	; 0x381e <_ZN7Kompass5angleEv+0xc4>
	{
		angle=-1.0;
	}
	else{
		angle=atan2f(achsen[0],achsen[2])*180.0/M_PI+180.0;
    3770:	6c 81       	ldd	r22, Y+4	; 0x04
    3772:	7d 81       	ldd	r23, Y+5	; 0x05
    3774:	88 27       	eor	r24, r24
    3776:	77 fd       	sbrc	r23, 7
    3778:	80 95       	com	r24
    377a:	98 2f       	mov	r25, r24
    377c:	0e 94 1d 21 	call	0x423a	; 0x423a <__floatsisf>
    3780:	6b 01       	movw	r12, r22
    3782:	7c 01       	movw	r14, r24
    3784:	68 81       	ld	r22, Y
    3786:	79 81       	ldd	r23, Y+1	; 0x01
    3788:	88 27       	eor	r24, r24
    378a:	77 fd       	sbrc	r23, 7
    378c:	80 95       	com	r24
    378e:	98 2f       	mov	r25, r24
    3790:	0e 94 1d 21 	call	0x423a	; 0x423a <__floatsisf>
    3794:	a7 01       	movw	r20, r14
    3796:	96 01       	movw	r18, r12
    3798:	0e 94 28 20 	call	0x4050	; 0x4050 <atan2>
    379c:	20 e0       	ldi	r18, 0x00	; 0
    379e:	30 e0       	ldi	r19, 0x00	; 0
    37a0:	44 e3       	ldi	r20, 0x34	; 52
    37a2:	53 e4       	ldi	r21, 0x43	; 67
    37a4:	0e 94 36 22 	call	0x446c	; 0x446c <__mulsf3>
    37a8:	2b ed       	ldi	r18, 0xDB	; 219
    37aa:	3f e0       	ldi	r19, 0x0F	; 15
    37ac:	49 e4       	ldi	r20, 0x49	; 73
    37ae:	50 e4       	ldi	r21, 0x40	; 64
    37b0:	0e 94 82 20 	call	0x4104	; 0x4104 <__divsf3>
    37b4:	20 e0       	ldi	r18, 0x00	; 0
    37b6:	30 e0       	ldi	r19, 0x00	; 0
    37b8:	44 e3       	ldi	r20, 0x34	; 52
    37ba:	53 e4       	ldi	r21, 0x43	; 67
    37bc:	0e 94 b5 1f 	call	0x3f6a	; 0x3f6a <__addsf3>
		//deklination
		angle+=2.35;
    37c0:	26 e6       	ldi	r18, 0x66	; 102
    37c2:	36 e6       	ldi	r19, 0x66	; 102
    37c4:	46 e1       	ldi	r20, 0x16	; 22
    37c6:	50 e4       	ldi	r21, 0x40	; 64
    37c8:	0e 94 b5 1f 	call	0x3f6a	; 0x3f6a <__addsf3>
    37cc:	6b 01       	movw	r12, r22
    37ce:	7c 01       	movw	r14, r24
		//Normierung auf %360
		if (angle>=360)
    37d0:	20 e0       	ldi	r18, 0x00	; 0
    37d2:	30 e0       	ldi	r19, 0x00	; 0
    37d4:	44 eb       	ldi	r20, 0xB4	; 180
    37d6:	53 e4       	ldi	r21, 0x43	; 67
    37d8:	0e 94 2b 22 	call	0x4456	; 0x4456 <__gesf2>
    37dc:	88 23       	and	r24, r24
    37de:	5c f0       	brlt	.+22     	; 0x37f6 <_ZN7Kompass5angleEv+0x9c>
		{
			angle-=360;
    37e0:	20 e0       	ldi	r18, 0x00	; 0
    37e2:	30 e0       	ldi	r19, 0x00	; 0
    37e4:	44 eb       	ldi	r20, 0xB4	; 180
    37e6:	53 e4       	ldi	r21, 0x43	; 67
    37e8:	c7 01       	movw	r24, r14
    37ea:	b6 01       	movw	r22, r12
    37ec:	0e 94 b4 1f 	call	0x3f68	; 0x3f68 <__subsf3>
    37f0:	6b 01       	movw	r12, r22
    37f2:	7c 01       	movw	r14, r24
    37f4:	1c c0       	rjmp	.+56     	; 0x382e <_ZN7Kompass5angleEv+0xd4>
		}
		else if (angle < 0)
    37f6:	20 e0       	ldi	r18, 0x00	; 0
    37f8:	30 e0       	ldi	r19, 0x00	; 0
    37fa:	a9 01       	movw	r20, r18
    37fc:	c7 01       	movw	r24, r14
    37fe:	b6 01       	movw	r22, r12
    3800:	0e 94 7b 20 	call	0x40f6	; 0x40f6 <__cmpsf2>
    3804:	88 23       	and	r24, r24
    3806:	9c f4       	brge	.+38     	; 0x382e <_ZN7Kompass5angleEv+0xd4>
		{
			angle+=360;
    3808:	20 e0       	ldi	r18, 0x00	; 0
    380a:	30 e0       	ldi	r19, 0x00	; 0
    380c:	44 eb       	ldi	r20, 0xB4	; 180
    380e:	53 e4       	ldi	r21, 0x43	; 67
    3810:	c7 01       	movw	r24, r14
    3812:	b6 01       	movw	r22, r12
    3814:	0e 94 b5 1f 	call	0x3f6a	; 0x3f6a <__addsf3>
    3818:	6b 01       	movw	r12, r22
    381a:	7c 01       	movw	r14, r24
    381c:	08 c0       	rjmp	.+16     	; 0x382e <_ZN7Kompass5angleEv+0xd4>

double Kompass::angle(){
	double angle=0;
	if (HMC5883L_readHeading())
	{
		angle=-1.0;
    381e:	0f 2e       	mov	r0, r31
    3820:	c1 2c       	mov	r12, r1
    3822:	d1 2c       	mov	r13, r1
    3824:	f0 e8       	ldi	r31, 0x80	; 128
    3826:	ef 2e       	mov	r14, r31
    3828:	ff eb       	ldi	r31, 0xBF	; 191
    382a:	ff 2e       	mov	r15, r31
    382c:	f0 2d       	mov	r31, r0
		{
			angle+=360;
		}
	}
	
	HMC5883L_command(0x02,HMCSIGLEMODE);
    382e:	41 e0       	ldi	r20, 0x01	; 1
    3830:	62 e0       	ldi	r22, 0x02	; 2
    3832:	ce 01       	movw	r24, r28
    3834:	0e 94 aa 1a 	call	0x3554	; 0x3554 <_ZN7Kompass16HMC5883L_commandEhh>
	return angle;
}
    3838:	c7 01       	movw	r24, r14
    383a:	b6 01       	movw	r22, r12
    383c:	df 91       	pop	r29
    383e:	cf 91       	pop	r28
    3840:	ff 90       	pop	r15
    3842:	ef 90       	pop	r14
    3844:	df 90       	pop	r13
    3846:	cf 90       	pop	r12
    3848:	08 95       	ret

0000384a <_ZN7Kompass25kallibrierung_ruecksetzenEv>:

void Kompass::kallibrierung_ruecksetzen(){
    384a:	fc 01       	movw	r30, r24
	for (uint8_t i=0;i<3;i++)
	{
		max[i]=0;
    384c:	16 86       	std	Z+14, r1	; 0x0e
    384e:	15 86       	std	Z+13, r1	; 0x0d
		min[i]=0;
    3850:	14 8a       	std	Z+20, r1	; 0x14
    3852:	13 8a       	std	Z+19, r1	; 0x13
		offset[i]=0;
    3854:	10 86       	std	Z+8, r1	; 0x08
    3856:	17 82       	std	Z+7, r1	; 0x07
}

void Kompass::kallibrierung_ruecksetzen(){
	for (uint8_t i=0;i<3;i++)
	{
		max[i]=0;
    3858:	10 8a       	std	Z+16, r1	; 0x10
    385a:	17 86       	std	Z+15, r1	; 0x0f
		min[i]=0;
    385c:	16 8a       	std	Z+22, r1	; 0x16
    385e:	15 8a       	std	Z+21, r1	; 0x15
		offset[i]=0;
    3860:	12 86       	std	Z+10, r1	; 0x0a
    3862:	11 86       	std	Z+9, r1	; 0x09
}

void Kompass::kallibrierung_ruecksetzen(){
	for (uint8_t i=0;i<3;i++)
	{
		max[i]=0;
    3864:	12 8a       	std	Z+18, r1	; 0x12
    3866:	11 8a       	std	Z+17, r1	; 0x11
		min[i]=0;
    3868:	10 8e       	std	Z+24, r1	; 0x18
    386a:	17 8a       	std	Z+23, r1	; 0x17
		offset[i]=0;
    386c:	14 86       	std	Z+12, r1	; 0x0c
    386e:	13 86       	std	Z+11, r1	; 0x0b
    3870:	08 95       	ret

00003872 <_ZN6OutputC1Ehh>:
#include "Output.h"

// default constructor
Output::Output(uint8_t Portpraefix, uint8_t Pinnumber)
{
	Pin=Pinnumber;
    3872:	fc 01       	movw	r30, r24
    3874:	41 83       	std	Z+1, r20	; 0x01
	Port=Portpraefix;
    3876:	60 83       	st	Z, r22
	switch (Portpraefix)
    3878:	63 34       	cpi	r22, 0x43	; 67
    387a:	89 f0       	breq	.+34     	; 0x389e <_ZN6OutputC1Ehh+0x2c>
    387c:	64 34       	cpi	r22, 0x44	; 68
    387e:	e1 f0       	breq	.+56     	; 0x38b8 <_ZN6OutputC1Ehh+0x46>
    3880:	62 34       	cpi	r22, 0x42	; 66
    3882:	31 f5       	brne	.+76     	; 0x38d0 <_ZN6OutputC1Ehh+0x5e>
	{
	case 'B':
		DDRB |= (1<<Pin);
    3884:	24 b1       	in	r18, 0x04	; 4
    3886:	81 e0       	ldi	r24, 0x01	; 1
    3888:	90 e0       	ldi	r25, 0x00	; 0
    388a:	bc 01       	movw	r22, r24
    388c:	02 c0       	rjmp	.+4      	; 0x3892 <_ZN6OutputC1Ehh+0x20>
    388e:	66 0f       	add	r22, r22
    3890:	77 1f       	adc	r23, r23
    3892:	4a 95       	dec	r20
    3894:	e2 f7       	brpl	.-8      	; 0x388e <_ZN6OutputC1Ehh+0x1c>
    3896:	ab 01       	movw	r20, r22
    3898:	42 2b       	or	r20, r18
    389a:	44 b9       	out	0x04, r20	; 4
		break;
    389c:	08 95       	ret
	case 'C':
		DDRC |= (1<<Pin);
    389e:	27 b1       	in	r18, 0x07	; 7
    38a0:	81 e0       	ldi	r24, 0x01	; 1
    38a2:	90 e0       	ldi	r25, 0x00	; 0
    38a4:	fc 01       	movw	r30, r24
    38a6:	02 c0       	rjmp	.+4      	; 0x38ac <_ZN6OutputC1Ehh+0x3a>
    38a8:	ee 0f       	add	r30, r30
    38aa:	ff 1f       	adc	r31, r31
    38ac:	4a 95       	dec	r20
    38ae:	e2 f7       	brpl	.-8      	; 0x38a8 <_ZN6OutputC1Ehh+0x36>
    38b0:	af 01       	movw	r20, r30
    38b2:	42 2b       	or	r20, r18
    38b4:	47 b9       	out	0x07, r20	; 7
		break;
    38b6:	08 95       	ret
	case 'D':
		DDRD |= (1<<Pin);
    38b8:	2a b1       	in	r18, 0x0a	; 10
    38ba:	81 e0       	ldi	r24, 0x01	; 1
    38bc:	90 e0       	ldi	r25, 0x00	; 0
    38be:	bc 01       	movw	r22, r24
    38c0:	02 c0       	rjmp	.+4      	; 0x38c6 <_ZN6OutputC1Ehh+0x54>
    38c2:	66 0f       	add	r22, r22
    38c4:	77 1f       	adc	r23, r23
    38c6:	4a 95       	dec	r20
    38c8:	e2 f7       	brpl	.-8      	; 0x38c2 <_ZN6OutputC1Ehh+0x50>
    38ca:	ab 01       	movw	r20, r22
    38cc:	42 2b       	or	r20, r18
    38ce:	4a b9       	out	0x0a, r20	; 10
    38d0:	08 95       	ret

000038d2 <_ZN6OutputD1Ev>:
		break;
	}
} //Output

// default destructor
Output::~Output()
    38d2:	08 95       	ret

000038d4 <_ZN6Output2onEv>:
{
} //~Output

void Output::on(){
	switch (Port)
    38d4:	fc 01       	movw	r30, r24
    38d6:	20 81       	ld	r18, Z
    38d8:	23 34       	cpi	r18, 0x43	; 67
    38da:	91 f0       	breq	.+36     	; 0x3900 <_ZN6Output2onEv+0x2c>
    38dc:	24 34       	cpi	r18, 0x44	; 68
    38de:	f9 f0       	breq	.+62     	; 0x391e <_ZN6Output2onEv+0x4a>
    38e0:	22 34       	cpi	r18, 0x42	; 66
    38e2:	59 f5       	brne	.+86     	; 0x393a <_ZN6Output2onEv+0x66>
	{
		case 'B':
			PORTB |= (1<<Pin);
    38e4:	45 b1       	in	r20, 0x05	; 5
    38e6:	21 e0       	ldi	r18, 0x01	; 1
    38e8:	30 e0       	ldi	r19, 0x00	; 0
    38ea:	b9 01       	movw	r22, r18
    38ec:	01 80       	ldd	r0, Z+1	; 0x01
    38ee:	02 c0       	rjmp	.+4      	; 0x38f4 <_ZN6Output2onEv+0x20>
    38f0:	66 0f       	add	r22, r22
    38f2:	77 1f       	adc	r23, r23
    38f4:	0a 94       	dec	r0
    38f6:	e2 f7       	brpl	.-8      	; 0x38f0 <_ZN6Output2onEv+0x1c>
    38f8:	cb 01       	movw	r24, r22
    38fa:	84 2b       	or	r24, r20
    38fc:	85 b9       	out	0x05, r24	; 5
			break;
    38fe:	08 95       	ret
		case 'C':
			PORTC |= (1<<Pin);
    3900:	48 b1       	in	r20, 0x08	; 8
    3902:	21 e0       	ldi	r18, 0x01	; 1
    3904:	30 e0       	ldi	r19, 0x00	; 0
    3906:	b9 01       	movw	r22, r18
    3908:	fc 01       	movw	r30, r24
    390a:	01 80       	ldd	r0, Z+1	; 0x01
    390c:	02 c0       	rjmp	.+4      	; 0x3912 <_ZN6Output2onEv+0x3e>
    390e:	66 0f       	add	r22, r22
    3910:	77 1f       	adc	r23, r23
    3912:	0a 94       	dec	r0
    3914:	e2 f7       	brpl	.-8      	; 0x390e <_ZN6Output2onEv+0x3a>
    3916:	cb 01       	movw	r24, r22
    3918:	84 2b       	or	r24, r20
    391a:	88 b9       	out	0x08, r24	; 8
			break;
    391c:	08 95       	ret
		case 'D':
			PORTD |= (1<<Pin);
    391e:	4b b1       	in	r20, 0x0b	; 11
    3920:	21 e0       	ldi	r18, 0x01	; 1
    3922:	30 e0       	ldi	r19, 0x00	; 0
    3924:	b9 01       	movw	r22, r18
    3926:	fc 01       	movw	r30, r24
    3928:	01 80       	ldd	r0, Z+1	; 0x01
    392a:	02 c0       	rjmp	.+4      	; 0x3930 <_ZN6Output2onEv+0x5c>
    392c:	66 0f       	add	r22, r22
    392e:	77 1f       	adc	r23, r23
    3930:	0a 94       	dec	r0
    3932:	e2 f7       	brpl	.-8      	; 0x392c <_ZN6Output2onEv+0x58>
    3934:	cb 01       	movw	r24, r22
    3936:	84 2b       	or	r24, r20
    3938:	8b b9       	out	0x0b, r24	; 11
    393a:	08 95       	ret

0000393c <_ZN6Output3offEv>:
			break;
	}
}

void Output::off(){
	switch (Port)
    393c:	fc 01       	movw	r30, r24
    393e:	20 81       	ld	r18, Z
    3940:	23 34       	cpi	r18, 0x43	; 67
    3942:	99 f0       	breq	.+38     	; 0x396a <_ZN6Output3offEv+0x2e>
    3944:	24 34       	cpi	r18, 0x44	; 68
    3946:	09 f1       	breq	.+66     	; 0x398a <_ZN6Output3offEv+0x4e>
    3948:	22 34       	cpi	r18, 0x42	; 66
    394a:	71 f5       	brne	.+92     	; 0x39a8 <_ZN6Output3offEv+0x6c>
	{
		case 'B':
			PORTB &= ~(1<<Pin);
    394c:	45 b1       	in	r20, 0x05	; 5
    394e:	21 e0       	ldi	r18, 0x01	; 1
    3950:	30 e0       	ldi	r19, 0x00	; 0
    3952:	b9 01       	movw	r22, r18
    3954:	01 80       	ldd	r0, Z+1	; 0x01
    3956:	02 c0       	rjmp	.+4      	; 0x395c <_ZN6Output3offEv+0x20>
    3958:	66 0f       	add	r22, r22
    395a:	77 1f       	adc	r23, r23
    395c:	0a 94       	dec	r0
    395e:	e2 f7       	brpl	.-8      	; 0x3958 <_ZN6Output3offEv+0x1c>
    3960:	cb 01       	movw	r24, r22
    3962:	80 95       	com	r24
    3964:	84 23       	and	r24, r20
    3966:	85 b9       	out	0x05, r24	; 5
			break;
    3968:	08 95       	ret
		case 'C':
			PORTC &= ~(1<<Pin);
    396a:	48 b1       	in	r20, 0x08	; 8
    396c:	21 e0       	ldi	r18, 0x01	; 1
    396e:	30 e0       	ldi	r19, 0x00	; 0
    3970:	b9 01       	movw	r22, r18
    3972:	fc 01       	movw	r30, r24
    3974:	01 80       	ldd	r0, Z+1	; 0x01
    3976:	02 c0       	rjmp	.+4      	; 0x397c <_ZN6Output3offEv+0x40>
    3978:	66 0f       	add	r22, r22
    397a:	77 1f       	adc	r23, r23
    397c:	0a 94       	dec	r0
    397e:	e2 f7       	brpl	.-8      	; 0x3978 <_ZN6Output3offEv+0x3c>
    3980:	cb 01       	movw	r24, r22
    3982:	80 95       	com	r24
    3984:	84 23       	and	r24, r20
    3986:	88 b9       	out	0x08, r24	; 8
			break;
    3988:	08 95       	ret
		case 'D':
			PORTD &= ~(1<<Pin);
    398a:	4b b1       	in	r20, 0x0b	; 11
    398c:	21 e0       	ldi	r18, 0x01	; 1
    398e:	30 e0       	ldi	r19, 0x00	; 0
    3990:	b9 01       	movw	r22, r18
    3992:	fc 01       	movw	r30, r24
    3994:	01 80       	ldd	r0, Z+1	; 0x01
    3996:	02 c0       	rjmp	.+4      	; 0x399c <_ZN6Output3offEv+0x60>
    3998:	66 0f       	add	r22, r22
    399a:	77 1f       	adc	r23, r23
    399c:	0a 94       	dec	r0
    399e:	e2 f7       	brpl	.-8      	; 0x3998 <_ZN6Output3offEv+0x5c>
    39a0:	cb 01       	movw	r24, r22
    39a2:	80 95       	com	r24
    39a4:	84 23       	and	r24, r20
    39a6:	8b b9       	out	0x0b, r24	; 11
    39a8:	08 95       	ret

000039aa <_ZN6Output6toggleEv>:
			break;
	}
}

void Output::toggle(){
	switch (Port)
    39aa:	fc 01       	movw	r30, r24
    39ac:	20 81       	ld	r18, Z
    39ae:	23 34       	cpi	r18, 0x43	; 67
    39b0:	a1 f0       	breq	.+40     	; 0x39da <_ZN6Output6toggleEv+0x30>
    39b2:	24 34       	cpi	r18, 0x44	; 68
    39b4:	19 f1       	breq	.+70     	; 0x39fc <_ZN6Output6toggleEv+0x52>
    39b6:	22 34       	cpi	r18, 0x42	; 66
    39b8:	89 f5       	brne	.+98     	; 0x3a1c <_ZN6Output6toggleEv+0x72>
	{
		case 'B':
			if ((PORTB&(1<<Pin)))
    39ba:	25 b1       	in	r18, 0x05	; 5
    39bc:	30 e0       	ldi	r19, 0x00	; 0
    39be:	01 80       	ldd	r0, Z+1	; 0x01
    39c0:	02 c0       	rjmp	.+4      	; 0x39c6 <_ZN6Output6toggleEv+0x1c>
    39c2:	35 95       	asr	r19
    39c4:	27 95       	ror	r18
    39c6:	0a 94       	dec	r0
    39c8:	e2 f7       	brpl	.-8      	; 0x39c2 <_ZN6Output6toggleEv+0x18>
    39ca:	20 ff       	sbrs	r18, 0
    39cc:	03 c0       	rjmp	.+6      	; 0x39d4 <_ZN6Output6toggleEv+0x2a>
			{
				off();
    39ce:	0e 94 9e 1c 	call	0x393c	; 0x393c <_ZN6Output3offEv>
    39d2:	08 95       	ret
			}
			else{
				on();
    39d4:	0e 94 6a 1c 	call	0x38d4	; 0x38d4 <_ZN6Output2onEv>
    39d8:	08 95       	ret
			}
			break;
		case 'C':
			if ((PORTC&(1<<Pin)))
    39da:	28 b1       	in	r18, 0x08	; 8
    39dc:	30 e0       	ldi	r19, 0x00	; 0
    39de:	fc 01       	movw	r30, r24
    39e0:	01 80       	ldd	r0, Z+1	; 0x01
    39e2:	02 c0       	rjmp	.+4      	; 0x39e8 <_ZN6Output6toggleEv+0x3e>
    39e4:	35 95       	asr	r19
    39e6:	27 95       	ror	r18
    39e8:	0a 94       	dec	r0
    39ea:	e2 f7       	brpl	.-8      	; 0x39e4 <_ZN6Output6toggleEv+0x3a>
    39ec:	20 ff       	sbrs	r18, 0
    39ee:	03 c0       	rjmp	.+6      	; 0x39f6 <_ZN6Output6toggleEv+0x4c>
			{
				off();
    39f0:	0e 94 9e 1c 	call	0x393c	; 0x393c <_ZN6Output3offEv>
    39f4:	08 95       	ret
			}
			else{
				on();
    39f6:	0e 94 6a 1c 	call	0x38d4	; 0x38d4 <_ZN6Output2onEv>
    39fa:	08 95       	ret
			}
			break;
		case 'D':
			if ((PORTD&(1<<Pin)))
    39fc:	2b b1       	in	r18, 0x0b	; 11
    39fe:	30 e0       	ldi	r19, 0x00	; 0
    3a00:	fc 01       	movw	r30, r24
    3a02:	01 80       	ldd	r0, Z+1	; 0x01
    3a04:	02 c0       	rjmp	.+4      	; 0x3a0a <_ZN6Output6toggleEv+0x60>
    3a06:	35 95       	asr	r19
    3a08:	27 95       	ror	r18
    3a0a:	0a 94       	dec	r0
    3a0c:	e2 f7       	brpl	.-8      	; 0x3a06 <_ZN6Output6toggleEv+0x5c>
    3a0e:	20 ff       	sbrs	r18, 0
    3a10:	03 c0       	rjmp	.+6      	; 0x3a18 <_ZN6Output6toggleEv+0x6e>
			{
				off();
    3a12:	0e 94 9e 1c 	call	0x393c	; 0x393c <_ZN6Output3offEv>
    3a16:	08 95       	ret
			}
			else{
				on();
    3a18:	0e 94 6a 1c 	call	0x38d4	; 0x38d4 <_ZN6Output2onEv>
    3a1c:	08 95       	ret

00003a1e <_ZN8PressureD1Ev>:
	Tempoffset = -4;	//Aus Erfahrung
	LPS25H_initialize();
} //Pressure

// default destructor
Pressure::~Pressure()
    3a1e:	09 96       	adiw	r24, 0x09	; 9
    3a20:	0e 94 ae 19 	call	0x335c	; 0x335c <_ZN3I2CD1Ev>
    3a24:	08 95       	ret

00003a26 <_ZN8Pressure14LPS25H_commandEhh>:
{
} //~Pressure

void Pressure::LPS25H_command(uint8_t add, uint8_t command){
    3a26:	0f 93       	push	r16
    3a28:	1f 93       	push	r17
    3a2a:	cf 93       	push	r28
    3a2c:	df 93       	push	r29
    3a2e:	06 2f       	mov	r16, r22
    3a30:	14 2f       	mov	r17, r20
	i2c.twi_start();
    3a32:	ec 01       	movw	r28, r24
    3a34:	29 96       	adiw	r28, 0x09	; 9
    3a36:	ce 01       	movw	r24, r28
    3a38:	0e 94 af 19 	call	0x335e	; 0x335e <_ZN3I2C9twi_startEv>
	i2c.twi_write(LPS25H_SA1_Write);
    3a3c:	6a eb       	ldi	r22, 0xBA	; 186
    3a3e:	ce 01       	movw	r24, r28
    3a40:	0e 94 b7 19 	call	0x336e	; 0x336e <_ZN3I2C9twi_writeEh>
	i2c.twi_write(add);
    3a44:	60 2f       	mov	r22, r16
    3a46:	ce 01       	movw	r24, r28
    3a48:	0e 94 b7 19 	call	0x336e	; 0x336e <_ZN3I2C9twi_writeEh>
	i2c.twi_write(command);
    3a4c:	61 2f       	mov	r22, r17
    3a4e:	ce 01       	movw	r24, r28
    3a50:	0e 94 b7 19 	call	0x336e	; 0x336e <_ZN3I2C9twi_writeEh>
	i2c.twi_stop();
    3a54:	ce 01       	movw	r24, r28
    3a56:	0e 94 b3 19 	call	0x3366	; 0x3366 <_ZN3I2C8twi_stopEv>
}
    3a5a:	df 91       	pop	r29
    3a5c:	cf 91       	pop	r28
    3a5e:	1f 91       	pop	r17
    3a60:	0f 91       	pop	r16
    3a62:	08 95       	ret

00003a64 <_ZN8Pressure17LPS25H_initializeEv>:

void Pressure::LPS25H_initialize(){
    3a64:	cf 93       	push	r28
    3a66:	df 93       	push	r29
    3a68:	ec 01       	movw	r28, r24
	uint8_t temp=0;
	//internal averages Pressure and Temperature (both 8)
	temp &= ~((1<<AVGT1) | (1<<AVGT0) | (1<<AVGP1) | (1<<AVGP0)); 
	LPS25H_command(RES_CONF,temp);
    3a6a:	40 e0       	ldi	r20, 0x00	; 0
    3a6c:	60 e1       	ldi	r22, 0x10	; 16
    3a6e:	0e 94 13 1d 	call	0x3a26	; 0x3a26 <_ZN8Pressure14LPS25H_commandEhh>
	temp=0;
	//Enable device and set a single shot as well as Lock while reading
	temp |= (1<<PD) | (1<<BDU) | (1<<ODR1);
	LPS25H_command(CTRL_REG1,temp);
    3a72:	44 ea       	ldi	r20, 0xA4	; 164
    3a74:	60 e2       	ldi	r22, 0x20	; 32
    3a76:	ce 01       	movw	r24, r28
    3a78:	0e 94 13 1d 	call	0x3a26	; 0x3a26 <_ZN8Pressure14LPS25H_commandEhh>
	temp=0;
	//FIFO on, no watermark no reset, reboot memory content, FIFO MEAN Mode
	temp |= (1<<BOOT) | (1<<FIFO_EN) | (1<<FIFO_MEAN_DEC);
	LPS25H_command(CTRL_REG2,temp);
    3a7c:	40 ed       	ldi	r20, 0xD0	; 208
    3a7e:	61 e2       	ldi	r22, 0x21	; 33
    3a80:	ce 01       	movw	r24, r28
    3a82:	0e 94 13 1d 	call	0x3a26	; 0x3a26 <_ZN8Pressure14LPS25H_commandEhh>
	temp=0;
	//FIFO Controll register for MEAN Mode und 8 moving averages
	temp|=(1<<F_MODE2) | (1<<F_MODE1) | (1<<WTM_POINT0) | (1<<WTM_POINT1) | (1<<WTM_POINT2);
	LPS25H_command(FIFO_CTRL,temp);
    3a86:	47 ec       	ldi	r20, 0xC7	; 199
    3a88:	6e e2       	ldi	r22, 0x2E	; 46
    3a8a:	ce 01       	movw	r24, r28
    3a8c:	0e 94 13 1d 	call	0x3a26	; 0x3a26 <_ZN8Pressure14LPS25H_commandEhh>
	//CTRL_REG4 not set
	//INTERRUPT_CFG not set
	//no threshold used
	//no Pressure offset used
	
}
    3a90:	df 91       	pop	r29
    3a92:	cf 91       	pop	r28
    3a94:	08 95       	ret

00003a96 <_ZN8PressureC1Ev>:


#include "Pressure.h"

// default constructor
Pressure::Pressure()
    3a96:	cf 93       	push	r28
    3a98:	df 93       	push	r29
    3a9a:	ec 01       	movw	r28, r24
    3a9c:	09 96       	adiw	r24, 0x09	; 9
    3a9e:	0e 94 aa 19 	call	0x3354	; 0x3354 <_ZN3I2CC1Ev>
{
	Press = 0;
    3aa2:	18 82       	st	Y, r1
    3aa4:	19 82       	std	Y+1, r1	; 0x01
    3aa6:	1a 82       	std	Y+2, r1	; 0x02
    3aa8:	1b 82       	std	Y+3, r1	; 0x03
	Tempera = 0;
    3aaa:	1c 82       	std	Y+4, r1	; 0x04
    3aac:	1d 82       	std	Y+5, r1	; 0x05
    3aae:	1e 82       	std	Y+6, r1	; 0x06
    3ab0:	1f 82       	std	Y+7, r1	; 0x07
	Tempoffset = -4;	//Aus Erfahrung
    3ab2:	8c ef       	ldi	r24, 0xFC	; 252
    3ab4:	88 87       	std	Y+8, r24	; 0x08
	LPS25H_initialize();
    3ab6:	ce 01       	movw	r24, r28
    3ab8:	0e 94 32 1d 	call	0x3a64	; 0x3a64 <_ZN8Pressure17LPS25H_initializeEv>
} //Pressure
    3abc:	df 91       	pop	r29
    3abe:	cf 91       	pop	r28
    3ac0:	08 95       	ret

00003ac2 <_ZN8Pressure18READ_Pressure_onceEv>:
	//no threshold used
	//no Pressure offset used
	
}

void Pressure::READ_Pressure_once(){
    3ac2:	af 92       	push	r10
    3ac4:	bf 92       	push	r11
    3ac6:	cf 92       	push	r12
    3ac8:	df 92       	push	r13
    3aca:	ef 92       	push	r14
    3acc:	ff 92       	push	r15
    3ace:	1f 93       	push	r17
    3ad0:	cf 93       	push	r28
    3ad2:	df 93       	push	r29
    3ad4:	00 d0       	rcall	.+0      	; 0x3ad6 <_ZN8Pressure18READ_Pressure_onceEv+0x14>
    3ad6:	1f 92       	push	r1
    3ad8:	cd b7       	in	r28, 0x3d	; 61
    3ada:	de b7       	in	r29, 0x3e	; 62
    3adc:	5c 01       	movw	r10, r24
	uint8_t Wertedruck[3];
	cli();
    3ade:	f8 94       	cli
	i2c.twi_start();
    3ae0:	7c 01       	movw	r14, r24
    3ae2:	89 e0       	ldi	r24, 0x09	; 9
    3ae4:	e8 0e       	add	r14, r24
    3ae6:	f1 1c       	adc	r15, r1
    3ae8:	c7 01       	movw	r24, r14
    3aea:	0e 94 af 19 	call	0x335e	; 0x335e <_ZN3I2C9twi_startEv>
	i2c.twi_write(LPS25H_SA1_Write);
    3aee:	6a eb       	ldi	r22, 0xBA	; 186
    3af0:	c7 01       	movw	r24, r14
    3af2:	0e 94 b7 19 	call	0x336e	; 0x336e <_ZN3I2C9twi_writeEh>
	i2c.twi_write(PRESS_OUT_XL|(1<<autoincrement));
    3af6:	68 ea       	ldi	r22, 0xA8	; 168
    3af8:	c7 01       	movw	r24, r14
    3afa:	0e 94 b7 19 	call	0x336e	; 0x336e <_ZN3I2C9twi_writeEh>
	i2c.twi_start();
    3afe:	c7 01       	movw	r24, r14
    3b00:	0e 94 af 19 	call	0x335e	; 0x335e <_ZN3I2C9twi_startEv>
	i2c.twi_write(LPS25H_SA1_READ);
    3b04:	6b eb       	ldi	r22, 0xBB	; 187
    3b06:	c7 01       	movw	r24, r14
    3b08:	0e 94 b7 19 	call	0x336e	; 0x336e <_ZN3I2C9twi_writeEh>
    3b0c:	fe 01       	movw	r30, r28
    3b0e:	31 96       	adiw	r30, 0x01	; 1
    3b10:	6f 01       	movw	r12, r30
	for (uint8_t i=0;i<3;i++)
    3b12:	10 e0       	ldi	r17, 0x00	; 0
	{
		if (i<2)
    3b14:	12 30       	cpi	r17, 0x02	; 2
    3b16:	38 f4       	brcc	.+14     	; 0x3b26 <_ZN8Pressure18READ_Pressure_onceEv+0x64>
		{
			Wertedruck[i] = i2c.twi_read(1);
    3b18:	61 e0       	ldi	r22, 0x01	; 1
    3b1a:	c7 01       	movw	r24, r14
    3b1c:	0e 94 c7 19 	call	0x338e	; 0x338e <_ZN3I2C8twi_readEh>
    3b20:	f6 01       	movw	r30, r12
    3b22:	80 83       	st	Z, r24
    3b24:	06 c0       	rjmp	.+12     	; 0x3b32 <_ZN8Pressure18READ_Pressure_onceEv+0x70>
		}
		else{
			Wertedruck[i] = i2c.twi_read(0);
    3b26:	60 e0       	ldi	r22, 0x00	; 0
    3b28:	c7 01       	movw	r24, r14
    3b2a:	0e 94 c7 19 	call	0x338e	; 0x338e <_ZN3I2C8twi_readEh>
    3b2e:	f6 01       	movw	r30, r12
    3b30:	80 83       	st	Z, r24
	i2c.twi_start();
	i2c.twi_write(LPS25H_SA1_Write);
	i2c.twi_write(PRESS_OUT_XL|(1<<autoincrement));
	i2c.twi_start();
	i2c.twi_write(LPS25H_SA1_READ);
	for (uint8_t i=0;i<3;i++)
    3b32:	1f 5f       	subi	r17, 0xFF	; 255
    3b34:	ff ef       	ldi	r31, 0xFF	; 255
    3b36:	cf 1a       	sub	r12, r31
    3b38:	df 0a       	sbc	r13, r31
    3b3a:	13 30       	cpi	r17, 0x03	; 3
    3b3c:	59 f7       	brne	.-42     	; 0x3b14 <_ZN8Pressure18READ_Pressure_onceEv+0x52>
		}
		else{
			Wertedruck[i] = i2c.twi_read(0);
		}
	}
	i2c.twi_stop();
    3b3e:	c7 01       	movw	r24, r14
    3b40:	0e 94 b3 19 	call	0x3366	; 0x3366 <_ZN3I2C8twi_stopEv>
	Press = ((double)Wertedruck[2]*65536);
    3b44:	6b 81       	ldd	r22, Y+3	; 0x03
    3b46:	70 e0       	ldi	r23, 0x00	; 0
    3b48:	80 e0       	ldi	r24, 0x00	; 0
    3b4a:	90 e0       	ldi	r25, 0x00	; 0
    3b4c:	0e 94 1b 21 	call	0x4236	; 0x4236 <__floatunsisf>
    3b50:	20 e0       	ldi	r18, 0x00	; 0
    3b52:	30 e0       	ldi	r19, 0x00	; 0
    3b54:	40 e8       	ldi	r20, 0x80	; 128
    3b56:	57 e4       	ldi	r21, 0x47	; 71
    3b58:	0e 94 36 22 	call	0x446c	; 0x446c <__mulsf3>
    3b5c:	6b 01       	movw	r12, r22
    3b5e:	7c 01       	movw	r14, r24
	Press += ((double)Wertedruck[1]*256);
    3b60:	6a 81       	ldd	r22, Y+2	; 0x02
    3b62:	70 e0       	ldi	r23, 0x00	; 0
    3b64:	80 e0       	ldi	r24, 0x00	; 0
    3b66:	90 e0       	ldi	r25, 0x00	; 0
    3b68:	0e 94 1b 21 	call	0x4236	; 0x4236 <__floatunsisf>
    3b6c:	20 e0       	ldi	r18, 0x00	; 0
    3b6e:	30 e0       	ldi	r19, 0x00	; 0
    3b70:	40 e8       	ldi	r20, 0x80	; 128
    3b72:	53 e4       	ldi	r21, 0x43	; 67
    3b74:	0e 94 36 22 	call	0x446c	; 0x446c <__mulsf3>
    3b78:	9b 01       	movw	r18, r22
    3b7a:	ac 01       	movw	r20, r24
    3b7c:	c7 01       	movw	r24, r14
    3b7e:	b6 01       	movw	r22, r12
    3b80:	0e 94 b5 1f 	call	0x3f6a	; 0x3f6a <__addsf3>
    3b84:	6b 01       	movw	r12, r22
    3b86:	7c 01       	movw	r14, r24
	Press += (double)Wertedruck[0];
    3b88:	69 81       	ldd	r22, Y+1	; 0x01
    3b8a:	70 e0       	ldi	r23, 0x00	; 0
    3b8c:	80 e0       	ldi	r24, 0x00	; 0
    3b8e:	90 e0       	ldi	r25, 0x00	; 0
    3b90:	0e 94 1b 21 	call	0x4236	; 0x4236 <__floatunsisf>
    3b94:	9b 01       	movw	r18, r22
    3b96:	ac 01       	movw	r20, r24
    3b98:	c7 01       	movw	r24, r14
    3b9a:	b6 01       	movw	r22, r12
    3b9c:	0e 94 b5 1f 	call	0x3f6a	; 0x3f6a <__addsf3>
	//Press = (Wertedruck[0] + (Wertedruck[1]*256) + (Wertedruck[2]*65536));
	Press/=4096.0;
    3ba0:	20 e0       	ldi	r18, 0x00	; 0
    3ba2:	30 e0       	ldi	r19, 0x00	; 0
    3ba4:	40 e8       	ldi	r20, 0x80	; 128
    3ba6:	59 e3       	ldi	r21, 0x39	; 57
    3ba8:	0e 94 36 22 	call	0x446c	; 0x446c <__mulsf3>
    3bac:	f5 01       	movw	r30, r10
    3bae:	60 83       	st	Z, r22
    3bb0:	71 83       	std	Z+1, r23	; 0x01
    3bb2:	82 83       	std	Z+2, r24	; 0x02
    3bb4:	93 83       	std	Z+3, r25	; 0x03
	sei();
    3bb6:	78 94       	sei
}
    3bb8:	0f 90       	pop	r0
    3bba:	0f 90       	pop	r0
    3bbc:	0f 90       	pop	r0
    3bbe:	df 91       	pop	r29
    3bc0:	cf 91       	pop	r28
    3bc2:	1f 91       	pop	r17
    3bc4:	ff 90       	pop	r15
    3bc6:	ef 90       	pop	r14
    3bc8:	df 90       	pop	r13
    3bca:	cf 90       	pop	r12
    3bcc:	bf 90       	pop	r11
    3bce:	af 90       	pop	r10
    3bd0:	08 95       	ret

00003bd2 <_ZN8Pressure16READ_TemperatureEv>:

void Pressure::READ_Temperature(){
    3bd2:	cf 92       	push	r12
    3bd4:	df 92       	push	r13
    3bd6:	ef 92       	push	r14
    3bd8:	ff 92       	push	r15
    3bda:	0f 93       	push	r16
    3bdc:	1f 93       	push	r17
    3bde:	cf 93       	push	r28
    3be0:	df 93       	push	r29
    3be2:	00 d0       	rcall	.+0      	; 0x3be4 <_ZN8Pressure16READ_TemperatureEv+0x12>
    3be4:	cd b7       	in	r28, 0x3d	; 61
    3be6:	de b7       	in	r29, 0x3e	; 62
    3be8:	8c 01       	movw	r16, r24
	cli();
    3bea:	f8 94       	cli
	uint8_t Wert[2];
	i2c.twi_start();
    3bec:	7c 01       	movw	r14, r24
    3bee:	89 e0       	ldi	r24, 0x09	; 9
    3bf0:	e8 0e       	add	r14, r24
    3bf2:	f1 1c       	adc	r15, r1
    3bf4:	c7 01       	movw	r24, r14
    3bf6:	0e 94 af 19 	call	0x335e	; 0x335e <_ZN3I2C9twi_startEv>
	i2c.twi_write(LPS25H_SA1_Write);
    3bfa:	6a eb       	ldi	r22, 0xBA	; 186
    3bfc:	c7 01       	movw	r24, r14
    3bfe:	0e 94 b7 19 	call	0x336e	; 0x336e <_ZN3I2C9twi_writeEh>
	i2c.twi_write(TEMP_OUT_L|(1<<autoincrement));
    3c02:	6b ea       	ldi	r22, 0xAB	; 171
    3c04:	c7 01       	movw	r24, r14
    3c06:	0e 94 b7 19 	call	0x336e	; 0x336e <_ZN3I2C9twi_writeEh>
	i2c.twi_start();
    3c0a:	c7 01       	movw	r24, r14
    3c0c:	0e 94 af 19 	call	0x335e	; 0x335e <_ZN3I2C9twi_startEv>
	i2c.twi_write(LPS25H_SA1_READ);
    3c10:	6b eb       	ldi	r22, 0xBB	; 187
    3c12:	c7 01       	movw	r24, r14
    3c14:	0e 94 b7 19 	call	0x336e	; 0x336e <_ZN3I2C9twi_writeEh>
    3c18:	cc 24       	eor	r12, r12
    3c1a:	c3 94       	inc	r12
    3c1c:	d1 2c       	mov	r13, r1
    3c1e:	02 c0       	rjmp	.+4      	; 0x3c24 <_ZN8Pressure16READ_TemperatureEv+0x52>
    3c20:	d3 94       	inc	r13
    3c22:	c3 94       	inc	r12
	for (uint8_t i=0;i<2;i++)
	{
		if (i<1)
    3c24:	d1 10       	cpse	r13, r1
    3c26:	06 c0       	rjmp	.+12     	; 0x3c34 <_ZN8Pressure16READ_TemperatureEv+0x62>
		{
			Wert[i] = i2c.twi_read(1);
    3c28:	61 e0       	ldi	r22, 0x01	; 1
    3c2a:	c7 01       	movw	r24, r14
    3c2c:	0e 94 c7 19 	call	0x338e	; 0x338e <_ZN3I2C8twi_readEh>
    3c30:	89 83       	std	Y+1, r24	; 0x01
    3c32:	f6 cf       	rjmp	.-20     	; 0x3c20 <_ZN8Pressure16READ_TemperatureEv+0x4e>
		}
		else{
			Wert[i] = i2c.twi_read(0);
    3c34:	60 e0       	ldi	r22, 0x00	; 0
    3c36:	c7 01       	movw	r24, r14
    3c38:	0e 94 c7 19 	call	0x338e	; 0x338e <_ZN3I2C8twi_readEh>
    3c3c:	e1 e0       	ldi	r30, 0x01	; 1
    3c3e:	f0 e0       	ldi	r31, 0x00	; 0
    3c40:	ec 0f       	add	r30, r28
    3c42:	fd 1f       	adc	r31, r29
    3c44:	ed 0d       	add	r30, r13
    3c46:	f1 1d       	adc	r31, r1
    3c48:	80 83       	st	Z, r24
	i2c.twi_start();
	i2c.twi_write(LPS25H_SA1_Write);
	i2c.twi_write(TEMP_OUT_L|(1<<autoincrement));
	i2c.twi_start();
	i2c.twi_write(LPS25H_SA1_READ);
	for (uint8_t i=0;i<2;i++)
    3c4a:	e1 e0       	ldi	r30, 0x01	; 1
    3c4c:	ec 15       	cp	r30, r12
    3c4e:	40 f7       	brcc	.-48     	; 0x3c20 <_ZN8Pressure16READ_TemperatureEv+0x4e>
		}
		else{
			Wert[i] = i2c.twi_read(0);
		}
	}
	i2c.twi_stop();
    3c50:	c7 01       	movw	r24, r14
    3c52:	0e 94 b3 19 	call	0x3366	; 0x3366 <_ZN3I2C8twi_stopEv>
	Tempera = ((int16_t)(Wert[0]+(Wert[1]<<8)))/480.0;
    3c56:	89 81       	ldd	r24, Y+1	; 0x01
    3c58:	6a 81       	ldd	r22, Y+2	; 0x02
    3c5a:	70 e0       	ldi	r23, 0x00	; 0
    3c5c:	76 2f       	mov	r23, r22
    3c5e:	66 27       	eor	r22, r22
    3c60:	68 0f       	add	r22, r24
    3c62:	71 1d       	adc	r23, r1
    3c64:	88 27       	eor	r24, r24
    3c66:	77 fd       	sbrc	r23, 7
    3c68:	80 95       	com	r24
    3c6a:	98 2f       	mov	r25, r24
    3c6c:	0e 94 1d 21 	call	0x423a	; 0x423a <__floatsisf>
    3c70:	20 e0       	ldi	r18, 0x00	; 0
    3c72:	30 e0       	ldi	r19, 0x00	; 0
    3c74:	40 ef       	ldi	r20, 0xF0	; 240
    3c76:	53 e4       	ldi	r21, 0x43	; 67
    3c78:	0e 94 82 20 	call	0x4104	; 0x4104 <__divsf3>
    3c7c:	6b 01       	movw	r12, r22
    3c7e:	7c 01       	movw	r14, r24
	Tempera+=42.5+Tempoffset;
    3c80:	f8 01       	movw	r30, r16
    3c82:	60 85       	ldd	r22, Z+8	; 0x08
    3c84:	77 27       	eor	r23, r23
    3c86:	67 fd       	sbrc	r22, 7
    3c88:	70 95       	com	r23
    3c8a:	87 2f       	mov	r24, r23
    3c8c:	97 2f       	mov	r25, r23
    3c8e:	0e 94 1d 21 	call	0x423a	; 0x423a <__floatsisf>
    3c92:	20 e0       	ldi	r18, 0x00	; 0
    3c94:	30 e0       	ldi	r19, 0x00	; 0
    3c96:	4a e2       	ldi	r20, 0x2A	; 42
    3c98:	52 e4       	ldi	r21, 0x42	; 66
    3c9a:	0e 94 b5 1f 	call	0x3f6a	; 0x3f6a <__addsf3>
    3c9e:	9b 01       	movw	r18, r22
    3ca0:	ac 01       	movw	r20, r24
    3ca2:	c7 01       	movw	r24, r14
    3ca4:	b6 01       	movw	r22, r12
    3ca6:	0e 94 b5 1f 	call	0x3f6a	; 0x3f6a <__addsf3>
    3caa:	f8 01       	movw	r30, r16
    3cac:	64 83       	std	Z+4, r22	; 0x04
    3cae:	75 83       	std	Z+5, r23	; 0x05
    3cb0:	86 83       	std	Z+6, r24	; 0x06
    3cb2:	97 83       	std	Z+7, r25	; 0x07
	sei();
    3cb4:	78 94       	sei
}
    3cb6:	0f 90       	pop	r0
    3cb8:	0f 90       	pop	r0
    3cba:	df 91       	pop	r29
    3cbc:	cf 91       	pop	r28
    3cbe:	1f 91       	pop	r17
    3cc0:	0f 91       	pop	r16
    3cc2:	ff 90       	pop	r15
    3cc4:	ef 90       	pop	r14
    3cc6:	df 90       	pop	r13
    3cc8:	cf 90       	pop	r12
    3cca:	08 95       	ret

00003ccc <_ZN3RTCD1Ev>:
	ausgabezeitneu();
	ausgabedatumneu();
} //RTC

// default destructor
RTC::~RTC()
    3ccc:	08 95       	ret

00003cce <_ZN3RTC14ausgabezeitneuEv>:
		}
	}
	ausgabedatumneu();
}

void RTC::ausgabezeitneu(){
    3cce:	fc 01       	movw	r30, r24
	msg_uhr[0]='0'+Stunden/10;
    3cd0:	90 89       	ldd	r25, Z+16	; 0x10
    3cd2:	8d ec       	ldi	r24, 0xCD	; 205
    3cd4:	98 9f       	mul	r25, r24
    3cd6:	21 2d       	mov	r18, r1
    3cd8:	11 24       	eor	r1, r1
    3cda:	26 95       	lsr	r18
    3cdc:	26 95       	lsr	r18
    3cde:	26 95       	lsr	r18
    3ce0:	30 e3       	ldi	r19, 0x30	; 48
    3ce2:	32 0f       	add	r19, r18
    3ce4:	30 83       	st	Z, r19
	msg_uhr[1]='0'+Stunden%10;
    3ce6:	22 0f       	add	r18, r18
    3ce8:	32 2f       	mov	r19, r18
    3cea:	33 0f       	add	r19, r19
    3cec:	33 0f       	add	r19, r19
    3cee:	23 0f       	add	r18, r19
    3cf0:	92 1b       	sub	r25, r18
    3cf2:	90 5d       	subi	r25, 0xD0	; 208
    3cf4:	91 83       	std	Z+1, r25	; 0x01
	msg_uhr[3]='0'+Minuten/10;
    3cf6:	91 89       	ldd	r25, Z+17	; 0x11
    3cf8:	98 9f       	mul	r25, r24
    3cfa:	21 2d       	mov	r18, r1
    3cfc:	11 24       	eor	r1, r1
    3cfe:	26 95       	lsr	r18
    3d00:	26 95       	lsr	r18
    3d02:	26 95       	lsr	r18
    3d04:	30 e3       	ldi	r19, 0x30	; 48
    3d06:	32 0f       	add	r19, r18
    3d08:	33 83       	std	Z+3, r19	; 0x03
	msg_uhr[4]='0'+Minuten%10;
    3d0a:	22 0f       	add	r18, r18
    3d0c:	32 2f       	mov	r19, r18
    3d0e:	33 0f       	add	r19, r19
    3d10:	33 0f       	add	r19, r19
    3d12:	23 0f       	add	r18, r19
    3d14:	92 1b       	sub	r25, r18
    3d16:	90 5d       	subi	r25, 0xD0	; 208
    3d18:	94 83       	std	Z+4, r25	; 0x04
	msg_uhr[6]='0'+Sekunden/10;
    3d1a:	92 89       	ldd	r25, Z+18	; 0x12
    3d1c:	98 9f       	mul	r25, r24
    3d1e:	81 2d       	mov	r24, r1
    3d20:	11 24       	eor	r1, r1
    3d22:	86 95       	lsr	r24
    3d24:	86 95       	lsr	r24
    3d26:	86 95       	lsr	r24
    3d28:	20 e3       	ldi	r18, 0x30	; 48
    3d2a:	28 0f       	add	r18, r24
    3d2c:	26 83       	std	Z+6, r18	; 0x06
	msg_uhr[7]='0'+Sekunden%10;
    3d2e:	88 0f       	add	r24, r24
    3d30:	28 2f       	mov	r18, r24
    3d32:	22 0f       	add	r18, r18
    3d34:	22 0f       	add	r18, r18
    3d36:	82 0f       	add	r24, r18
    3d38:	98 1b       	sub	r25, r24
    3d3a:	90 5d       	subi	r25, 0xD0	; 208
    3d3c:	97 83       	std	Z+7, r25	; 0x07
    3d3e:	08 95       	ret

00003d40 <_ZN3RTC15ausgabedatumneuEv>:
}
void RTC::ausgabedatumneu(){
    3d40:	fc 01       	movw	r30, r24
	msg_dat[0]='0'+Tag/10;
    3d42:	94 89       	ldd	r25, Z+20	; 0x14
    3d44:	8d ec       	ldi	r24, 0xCD	; 205
    3d46:	98 9f       	mul	r25, r24
    3d48:	21 2d       	mov	r18, r1
    3d4a:	11 24       	eor	r1, r1
    3d4c:	26 95       	lsr	r18
    3d4e:	26 95       	lsr	r18
    3d50:	26 95       	lsr	r18
    3d52:	30 e3       	ldi	r19, 0x30	; 48
    3d54:	32 0f       	add	r19, r18
    3d56:	30 87       	std	Z+8, r19	; 0x08
	msg_dat[1]='0'+Tag%10;
    3d58:	22 0f       	add	r18, r18
    3d5a:	32 2f       	mov	r19, r18
    3d5c:	33 0f       	add	r19, r19
    3d5e:	33 0f       	add	r19, r19
    3d60:	23 0f       	add	r18, r19
    3d62:	92 1b       	sub	r25, r18
    3d64:	90 5d       	subi	r25, 0xD0	; 208
    3d66:	91 87       	std	Z+9, r25	; 0x09
	msg_dat[3]='0'+Monat/10;
    3d68:	95 89       	ldd	r25, Z+21	; 0x15
    3d6a:	98 9f       	mul	r25, r24
    3d6c:	21 2d       	mov	r18, r1
    3d6e:	11 24       	eor	r1, r1
    3d70:	26 95       	lsr	r18
    3d72:	26 95       	lsr	r18
    3d74:	26 95       	lsr	r18
    3d76:	30 e3       	ldi	r19, 0x30	; 48
    3d78:	32 0f       	add	r19, r18
    3d7a:	33 87       	std	Z+11, r19	; 0x0b
	msg_dat[4]='0'+Monat%10;
    3d7c:	22 0f       	add	r18, r18
    3d7e:	32 2f       	mov	r19, r18
    3d80:	33 0f       	add	r19, r19
    3d82:	33 0f       	add	r19, r19
    3d84:	23 0f       	add	r18, r19
    3d86:	92 1b       	sub	r25, r18
    3d88:	90 5d       	subi	r25, 0xD0	; 208
    3d8a:	94 87       	std	Z+12, r25	; 0x0c
	msg_dat[6]='0'+Jahr/10;
    3d8c:	96 89       	ldd	r25, Z+22	; 0x16
    3d8e:	98 9f       	mul	r25, r24
    3d90:	81 2d       	mov	r24, r1
    3d92:	11 24       	eor	r1, r1
    3d94:	86 95       	lsr	r24
    3d96:	86 95       	lsr	r24
    3d98:	86 95       	lsr	r24
    3d9a:	20 e3       	ldi	r18, 0x30	; 48
    3d9c:	28 0f       	add	r18, r24
    3d9e:	26 87       	std	Z+14, r18	; 0x0e
	msg_dat[7]='0'+Jahr%10;
    3da0:	88 0f       	add	r24, r24
    3da2:	28 2f       	mov	r18, r24
    3da4:	22 0f       	add	r18, r18
    3da6:	22 0f       	add	r18, r18
    3da8:	82 0f       	add	r24, r18
    3daa:	98 1b       	sub	r25, r24
    3dac:	90 5d       	subi	r25, 0xD0	; 208
    3dae:	97 87       	std	Z+15, r25	; 0x0f
    3db0:	08 95       	ret

00003db2 <_ZN3RTCC1Ev>:


#include "RTC.h"

// default constructor
RTC::RTC()
    3db2:	cf 93       	push	r28
    3db4:	df 93       	push	r29
    3db6:	ec 01       	movw	r28, r24
{
	Sekunden=0;
    3db8:	1a 8a       	std	Y+18, r1	; 0x12
	HundSekunden=0;
    3dba:	1b 8a       	std	Y+19, r1	; 0x13
	Minuten=0;
    3dbc:	19 8a       	std	Y+17, r1	; 0x11
	Stunden=0;
    3dbe:	18 8a       	std	Y+16, r1	; 0x10
	Tag=0;
    3dc0:	1c 8a       	std	Y+20, r1	; 0x14
	Monat=0;
    3dc2:	1d 8a       	std	Y+21, r1	; 0x15
	Jahr=0;
    3dc4:	1e 8a       	std	Y+22, r1	; 0x16
    3dc6:	fc 01       	movw	r30, r24
	for(uint8_t i=0;i<bitsderrtc;i++){
    3dc8:	80 e0       	ldi	r24, 0x00	; 0
		msg_uhr[i]=0;
    3dca:	11 92       	st	Z+, r1
	Minuten=0;
	Stunden=0;
	Tag=0;
	Monat=0;
	Jahr=0;
	for(uint8_t i=0;i<bitsderrtc;i++){
    3dcc:	8f 5f       	subi	r24, 0xFF	; 255
    3dce:	88 30       	cpi	r24, 0x08	; 8
    3dd0:	e1 f7       	brne	.-8      	; 0x3dca <_ZN3RTCC1Ev+0x18>
		msg_uhr[i]=0;
	}
	//Einstellungen des Ausgabebuffers
	msg_uhr[2]=':';
    3dd2:	8a e3       	ldi	r24, 0x3A	; 58
    3dd4:	8a 83       	std	Y+2, r24	; 0x02
	msg_uhr[5]=':';
    3dd6:	8d 83       	std	Y+5, r24	; 0x05
	msg_dat[2]='.';
    3dd8:	8e e2       	ldi	r24, 0x2E	; 46
    3dda:	8a 87       	std	Y+10, r24	; 0x0a
	msg_dat[5]='.';
    3ddc:	8d 87       	std	Y+13, r24	; 0x0d
	ausgabezeitneu();
    3dde:	ce 01       	movw	r24, r28
    3de0:	0e 94 67 1e 	call	0x3cce	; 0x3cce <_ZN3RTC14ausgabezeitneuEv>
	ausgabedatumneu();
    3de4:	ce 01       	movw	r24, r28
    3de6:	0e 94 a0 1e 	call	0x3d40	; 0x3d40 <_ZN3RTC15ausgabedatumneuEv>
} //RTC
    3dea:	df 91       	pop	r29
    3dec:	cf 91       	pop	r28
    3dee:	08 95       	ret

00003df0 <_ZN3RTC8kalenderEv>:
	ausgabezeitneu();
	return 0;
}

void RTC::kalender(){
	if (Monat==4||Monat==6||Monat==9||Monat==11)
    3df0:	fc 01       	movw	r30, r24
    3df2:	25 89       	ldd	r18, Z+21	; 0x15
    3df4:	32 2f       	mov	r19, r18
    3df6:	3d 7f       	andi	r19, 0xFD	; 253
    3df8:	34 30       	cpi	r19, 0x04	; 4
    3dfa:	11 f0       	breq	.+4      	; 0x3e00 <_ZN3RTC8kalenderEv+0x10>
    3dfc:	39 30       	cpi	r19, 0x09	; 9
    3dfe:	91 f4       	brne	.+36     	; 0x3e24 <_ZN3RTC8kalenderEv+0x34>
	{
		if (Tag>=31)
    3e00:	fc 01       	movw	r30, r24
    3e02:	34 89       	ldd	r19, Z+20	; 0x14
    3e04:	3f 31       	cpi	r19, 0x1F	; 31
    3e06:	b0 f1       	brcs	.+108    	; 0x3e74 <_ZN3RTC8kalenderEv+0x84>
		{
			Tag=1;
    3e08:	31 e0       	ldi	r19, 0x01	; 1
    3e0a:	34 8b       	std	Z+20, r19	; 0x14
			Monat++;
    3e0c:	2f 5f       	subi	r18, 0xFF	; 255
			if (Monat>=13)
    3e0e:	2d 30       	cpi	r18, 0x0D	; 13
    3e10:	10 f4       	brcc	.+4      	; 0x3e16 <_ZN3RTC8kalenderEv+0x26>
	if (Monat==4||Monat==6||Monat==9||Monat==11)
	{
		if (Tag>=31)
		{
			Tag=1;
			Monat++;
    3e12:	25 8b       	std	Z+21, r18	; 0x15
    3e14:	2f c0       	rjmp	.+94     	; 0x3e74 <_ZN3RTC8kalenderEv+0x84>
			if (Monat>=13)
			{
				Monat=1;
    3e16:	21 e0       	ldi	r18, 0x01	; 1
    3e18:	fc 01       	movw	r30, r24
    3e1a:	25 8b       	std	Z+21, r18	; 0x15
				Jahr++;
    3e1c:	26 89       	ldd	r18, Z+22	; 0x16
    3e1e:	2f 5f       	subi	r18, 0xFF	; 255
    3e20:	26 8b       	std	Z+22, r18	; 0x16
    3e22:	28 c0       	rjmp	.+80     	; 0x3e74 <_ZN3RTC8kalenderEv+0x84>
			}
		}
	}
	else if (Monat==2)
    3e24:	22 30       	cpi	r18, 0x02	; 2
    3e26:	a9 f4       	brne	.+42     	; 0x3e52 <_ZN3RTC8kalenderEv+0x62>
	{
		if (Jahr%4==0)
    3e28:	fc 01       	movw	r30, r24
    3e2a:	26 89       	ldd	r18, Z+22	; 0x16
    3e2c:	23 70       	andi	r18, 0x03	; 3
    3e2e:	41 f4       	brne	.+16     	; 0x3e40 <_ZN3RTC8kalenderEv+0x50>
		{
			if (Tag>=30)
    3e30:	24 89       	ldd	r18, Z+20	; 0x14
    3e32:	2e 31       	cpi	r18, 0x1E	; 30
    3e34:	f8 f0       	brcs	.+62     	; 0x3e74 <_ZN3RTC8kalenderEv+0x84>
			{
				Tag=1;
    3e36:	21 e0       	ldi	r18, 0x01	; 1
    3e38:	24 8b       	std	Z+20, r18	; 0x14
				Monat++;
    3e3a:	23 e0       	ldi	r18, 0x03	; 3
    3e3c:	25 8b       	std	Z+21, r18	; 0x15
    3e3e:	1a c0       	rjmp	.+52     	; 0x3e74 <_ZN3RTC8kalenderEv+0x84>
					Jahr++;
				}
			}
		}
		else{
			if (Tag>=29)
    3e40:	fc 01       	movw	r30, r24
    3e42:	24 89       	ldd	r18, Z+20	; 0x14
    3e44:	2d 31       	cpi	r18, 0x1D	; 29
    3e46:	b0 f0       	brcs	.+44     	; 0x3e74 <_ZN3RTC8kalenderEv+0x84>
			{
				Tag=1;
    3e48:	21 e0       	ldi	r18, 0x01	; 1
    3e4a:	24 8b       	std	Z+20, r18	; 0x14
				Monat++;
    3e4c:	23 e0       	ldi	r18, 0x03	; 3
    3e4e:	25 8b       	std	Z+21, r18	; 0x15
    3e50:	11 c0       	rjmp	.+34     	; 0x3e74 <_ZN3RTC8kalenderEv+0x84>
				}
			}
		}
	}
	else{
		if (Tag>=32)
    3e52:	fc 01       	movw	r30, r24
    3e54:	34 89       	ldd	r19, Z+20	; 0x14
    3e56:	30 32       	cpi	r19, 0x20	; 32
    3e58:	68 f0       	brcs	.+26     	; 0x3e74 <_ZN3RTC8kalenderEv+0x84>
		{
			Tag=1;
    3e5a:	31 e0       	ldi	r19, 0x01	; 1
    3e5c:	34 8b       	std	Z+20, r19	; 0x14
			Monat++;
    3e5e:	2f 5f       	subi	r18, 0xFF	; 255
			if (Monat>=13)
    3e60:	2d 30       	cpi	r18, 0x0D	; 13
    3e62:	10 f4       	brcc	.+4      	; 0x3e68 <_ZN3RTC8kalenderEv+0x78>
	}
	else{
		if (Tag>=32)
		{
			Tag=1;
			Monat++;
    3e64:	25 8b       	std	Z+21, r18	; 0x15
    3e66:	06 c0       	rjmp	.+12     	; 0x3e74 <_ZN3RTC8kalenderEv+0x84>
			if (Monat>=13)
			{
				Monat=1;
    3e68:	21 e0       	ldi	r18, 0x01	; 1
    3e6a:	fc 01       	movw	r30, r24
    3e6c:	25 8b       	std	Z+21, r18	; 0x15
				Jahr++;
    3e6e:	26 89       	ldd	r18, Z+22	; 0x16
    3e70:	2f 5f       	subi	r18, 0xFF	; 255
    3e72:	26 8b       	std	Z+22, r18	; 0x16
			}
		}
	}
	ausgabedatumneu();
    3e74:	0e 94 a0 1e 	call	0x3d40	; 0x3d40 <_ZN3RTC15ausgabedatumneuEv>
    3e78:	08 95       	ret

00003e7a <_ZN3RTC4zeitEv>:
	}
	ausgabezeitneu();
	return 0;
}

uint8_t RTC::zeit(){
    3e7a:	cf 93       	push	r28
    3e7c:	df 93       	push	r29
    3e7e:	ec 01       	movw	r28, r24
	//Sekunden++; sitzt im Vektor um Taster besser entprellen zu koennen
	if (Sekunden >= 60 && Sekunden <=200){
    3e80:	8a 89       	ldd	r24, Y+18	; 0x12
    3e82:	8c 53       	subi	r24, 0x3C	; 60
    3e84:	8d 38       	cpi	r24, 0x8D	; 141
    3e86:	b8 f4       	brcc	.+46     	; 0x3eb6 <_ZN3RTC4zeitEv+0x3c>
		Sekunden = 0;
    3e88:	1a 8a       	std	Y+18, r1	; 0x12
		Minuten++;
    3e8a:	89 89       	ldd	r24, Y+17	; 0x11
    3e8c:	8f 5f       	subi	r24, 0xFF	; 255
    3e8e:	89 8b       	std	Y+17, r24	; 0x11
		interupts |= (1<<minuteninterupt);
    3e90:	9f 89       	ldd	r25, Y+23	; 0x17
    3e92:	94 60       	ori	r25, 0x04	; 4
    3e94:	9f 8b       	std	Y+23, r25	; 0x17
		if(Minuten >= 60){
    3e96:	8c 33       	cpi	r24, 0x3C	; 60
    3e98:	20 f0       	brcs	.+8      	; 0x3ea2 <_ZN3RTC4zeitEv+0x28>
			Minuten = 0;
    3e9a:	19 8a       	std	Y+17, r1	; 0x11
			Stunden++;
    3e9c:	88 89       	ldd	r24, Y+16	; 0x10
    3e9e:	8f 5f       	subi	r24, 0xFF	; 255
    3ea0:	88 8b       	std	Y+16, r24	; 0x10
		}
		if(Stunden >= 24){
    3ea2:	88 89       	ldd	r24, Y+16	; 0x10
    3ea4:	88 31       	cpi	r24, 0x18	; 24
    3ea6:	38 f0       	brcs	.+14     	; 0x3eb6 <_ZN3RTC4zeitEv+0x3c>
			Stunden = 0;
    3ea8:	18 8a       	std	Y+16, r1	; 0x10
			Tag++;
    3eaa:	8c 89       	ldd	r24, Y+20	; 0x14
    3eac:	8f 5f       	subi	r24, 0xFF	; 255
    3eae:	8c 8b       	std	Y+20, r24	; 0x14
			kalender();
    3eb0:	ce 01       	movw	r24, r28
    3eb2:	0e 94 f8 1e 	call	0x3df0	; 0x3df0 <_ZN3RTC8kalenderEv>
		}
	}
	ausgabezeitneu();
    3eb6:	ce 01       	movw	r24, r28
    3eb8:	0e 94 67 1e 	call	0x3cce	; 0x3cce <_ZN3RTC14ausgabezeitneuEv>
	return 0;
}
    3ebc:	80 e0       	ldi	r24, 0x00	; 0
    3ebe:	df 91       	pop	r29
    3ec0:	cf 91       	pop	r28
    3ec2:	08 95       	ret

00003ec4 <_ZN3RTC10dummyeinstEv>:
	msg_dat[4]='0'+Monat%10;
	msg_dat[6]='0'+Jahr/10;
	msg_dat[7]='0'+Jahr%10;
}

void RTC::dummyeinst(){
    3ec4:	cf 93       	push	r28
    3ec6:	df 93       	push	r29
    3ec8:	ec 01       	movw	r28, r24
	Stunden=10;
    3eca:	8a e0       	ldi	r24, 0x0A	; 10
    3ecc:	88 8b       	std	Y+16, r24	; 0x10
	Minuten=30;
    3ece:	8e e1       	ldi	r24, 0x1E	; 30
    3ed0:	89 8b       	std	Y+17, r24	; 0x11
	Tag=7;
    3ed2:	87 e0       	ldi	r24, 0x07	; 7
    3ed4:	8c 8b       	std	Y+20, r24	; 0x14
	Monat=9;
    3ed6:	89 e0       	ldi	r24, 0x09	; 9
    3ed8:	8d 8b       	std	Y+21, r24	; 0x15
	Jahr=15;
    3eda:	8f e0       	ldi	r24, 0x0F	; 15
    3edc:	8e 8b       	std	Y+22, r24	; 0x16
	ausgabedatumneu();
    3ede:	ce 01       	movw	r24, r28
    3ee0:	0e 94 a0 1e 	call	0x3d40	; 0x3d40 <_ZN3RTC15ausgabedatumneuEv>
	ausgabezeitneu();
    3ee4:	ce 01       	movw	r24, r28
    3ee6:	0e 94 67 1e 	call	0x3cce	; 0x3cce <_ZN3RTC14ausgabezeitneuEv>
}
    3eea:	df 91       	pop	r29
    3eec:	cf 91       	pop	r28
    3eee:	08 95       	ret

00003ef0 <_ZN3RTC8RTCstartEv>:

void RTC::RTCstart(){
    3ef0:	fc 01       	movw	r30, r24
	//Einstellungen des Ausgabebuffers
	msg_uhr[0]='0';
    3ef2:	80 e3       	ldi	r24, 0x30	; 48
    3ef4:	80 83       	st	Z, r24
	msg_uhr[1]='0';
    3ef6:	81 83       	std	Z+1, r24	; 0x01
	msg_uhr[2]=':';
    3ef8:	9a e3       	ldi	r25, 0x3A	; 58
    3efa:	92 83       	std	Z+2, r25	; 0x02
	msg_uhr[3]='0';
    3efc:	83 83       	std	Z+3, r24	; 0x03
	msg_uhr[4]='0';
    3efe:	84 83       	std	Z+4, r24	; 0x04
	msg_uhr[5]=':';
    3f00:	95 83       	std	Z+5, r25	; 0x05
	msg_uhr[6]='0';
    3f02:	86 83       	std	Z+6, r24	; 0x06
	msg_uhr[7]='0';
    3f04:	87 83       	std	Z+7, r24	; 0x07
	//Timer2 als 1ms Timer fuer die RTC
	//asynchron mit 32.768 kHz (noch synchrom)
	TCNT2 = TIMER2RTCTIME;
    3f06:	10 92 b2 00 	sts	0x00B2, r1
	ASSR |= (1<<AS2);
    3f0a:	e6 eb       	ldi	r30, 0xB6	; 182
    3f0c:	f0 e0       	ldi	r31, 0x00	; 0
    3f0e:	80 81       	ld	r24, Z
    3f10:	80 62       	ori	r24, 0x20	; 32
    3f12:	80 83       	st	Z, r24
	TIMSK2 = (1<<TOIE2);
    3f14:	81 e0       	ldi	r24, 0x01	; 1
    3f16:	80 93 70 00 	sts	0x0070, r24
	TCCR2B = (1<<CS22) | (1<<CS20);		//Vorteiler 256
    3f1a:	85 e0       	ldi	r24, 0x05	; 5
    3f1c:	80 93 b1 00 	sts	0x00B1, r24
    3f20:	08 95       	ret

00003f22 <_ZN3RTC7RTCstopEv>:
}

void RTC::RTCstop(){
	TCCR2B &= ~((1<<CS22) | (1<<CS21));
    3f22:	e1 eb       	ldi	r30, 0xB1	; 177
    3f24:	f0 e0       	ldi	r31, 0x00	; 0
    3f26:	80 81       	ld	r24, Z
    3f28:	89 7f       	andi	r24, 0xF9	; 249
    3f2a:	80 83       	st	Z, r24
    3f2c:	08 95       	ret

00003f2e <_ZN3RTC5timerEv>:
}

uint8_t RTC::timer(){
    3f2e:	fc 01       	movw	r30, r24
	if (Sekunden>60)
    3f30:	82 89       	ldd	r24, Z+18	; 0x12
    3f32:	8d 33       	cpi	r24, 0x3D	; 61
    3f34:	b8 f0       	brcs	.+46     	; 0x3f64 <_ZN3RTC5timerEv+0x36>
	{
		Sekunden=59;
    3f36:	8b e3       	ldi	r24, 0x3B	; 59
    3f38:	82 8b       	std	Z+18, r24	; 0x12
		Minuten--;
    3f3a:	81 89       	ldd	r24, Z+17	; 0x11
    3f3c:	81 50       	subi	r24, 0x01	; 1
		if (Minuten>60)
    3f3e:	8d 33       	cpi	r24, 0x3D	; 61
    3f40:	18 f4       	brcc	.+6      	; 0x3f48 <_ZN3RTC5timerEv+0x1a>

uint8_t RTC::timer(){
	if (Sekunden>60)
	{
		Sekunden=59;
		Minuten--;
    3f42:	81 8b       	std	Z+17, r24	; 0x11
				Sekunden=0;
				return 1;
			}
		}
	}
	return 0;
    3f44:	80 e0       	ldi	r24, 0x00	; 0
    3f46:	08 95       	ret
	{
		Sekunden=59;
		Minuten--;
		if (Minuten>60)
		{
			Minuten=59;
    3f48:	8b e3       	ldi	r24, 0x3B	; 59
    3f4a:	81 8b       	std	Z+17, r24	; 0x11
			Stunden--;
    3f4c:	80 89       	ldd	r24, Z+16	; 0x10
    3f4e:	81 50       	subi	r24, 0x01	; 1
			if (Stunden>24)
    3f50:	89 31       	cpi	r24, 0x19	; 25
    3f52:	18 f4       	brcc	.+6      	; 0x3f5a <_ZN3RTC5timerEv+0x2c>
		Sekunden=59;
		Minuten--;
		if (Minuten>60)
		{
			Minuten=59;
			Stunden--;
    3f54:	80 8b       	std	Z+16, r24	; 0x10
				Sekunden=0;
				return 1;
			}
		}
	}
	return 0;
    3f56:	80 e0       	ldi	r24, 0x00	; 0
    3f58:	08 95       	ret
		{
			Minuten=59;
			Stunden--;
			if (Stunden>24)
			{
				Stunden=0;
    3f5a:	10 8a       	std	Z+16, r1	; 0x10
				Minuten=0;
    3f5c:	11 8a       	std	Z+17, r1	; 0x11
				Sekunden=0;
    3f5e:	12 8a       	std	Z+18, r1	; 0x12
				return 1;
    3f60:	81 e0       	ldi	r24, 0x01	; 1
    3f62:	08 95       	ret
			}
		}
	}
	return 0;
    3f64:	80 e0       	ldi	r24, 0x00	; 0
}
    3f66:	08 95       	ret

00003f68 <__subsf3>:
    3f68:	50 58       	subi	r21, 0x80	; 128

00003f6a <__addsf3>:
    3f6a:	bb 27       	eor	r27, r27
    3f6c:	aa 27       	eor	r26, r26
    3f6e:	0e d0       	rcall	.+28     	; 0x3f8c <__addsf3x>
    3f70:	27 c2       	rjmp	.+1102   	; 0x43c0 <__fp_round>
    3f72:	f0 d1       	rcall	.+992    	; 0x4354 <__fp_pscA>
    3f74:	30 f0       	brcs	.+12     	; 0x3f82 <__addsf3+0x18>
    3f76:	f5 d1       	rcall	.+1002   	; 0x4362 <__fp_pscB>
    3f78:	20 f0       	brcs	.+8      	; 0x3f82 <__addsf3+0x18>
    3f7a:	31 f4       	brne	.+12     	; 0x3f88 <__addsf3+0x1e>
    3f7c:	9f 3f       	cpi	r25, 0xFF	; 255
    3f7e:	11 f4       	brne	.+4      	; 0x3f84 <__addsf3+0x1a>
    3f80:	1e f4       	brtc	.+6      	; 0x3f88 <__addsf3+0x1e>
    3f82:	c0 c1       	rjmp	.+896    	; 0x4304 <__fp_nan>
    3f84:	0e f4       	brtc	.+2      	; 0x3f88 <__addsf3+0x1e>
    3f86:	e0 95       	com	r30
    3f88:	e7 fb       	bst	r30, 7
    3f8a:	b6 c1       	rjmp	.+876    	; 0x42f8 <__fp_inf>

00003f8c <__addsf3x>:
    3f8c:	e9 2f       	mov	r30, r25
    3f8e:	3a d2       	rcall	.+1140   	; 0x4404 <__fp_split3>
    3f90:	80 f3       	brcs	.-32     	; 0x3f72 <__addsf3+0x8>
    3f92:	ba 17       	cp	r27, r26
    3f94:	62 07       	cpc	r22, r18
    3f96:	73 07       	cpc	r23, r19
    3f98:	84 07       	cpc	r24, r20
    3f9a:	95 07       	cpc	r25, r21
    3f9c:	18 f0       	brcs	.+6      	; 0x3fa4 <__addsf3x+0x18>
    3f9e:	71 f4       	brne	.+28     	; 0x3fbc <__addsf3x+0x30>
    3fa0:	9e f5       	brtc	.+102    	; 0x4008 <__addsf3x+0x7c>
    3fa2:	52 c2       	rjmp	.+1188   	; 0x4448 <__fp_zero>
    3fa4:	0e f4       	brtc	.+2      	; 0x3fa8 <__addsf3x+0x1c>
    3fa6:	e0 95       	com	r30
    3fa8:	0b 2e       	mov	r0, r27
    3faa:	ba 2f       	mov	r27, r26
    3fac:	a0 2d       	mov	r26, r0
    3fae:	0b 01       	movw	r0, r22
    3fb0:	b9 01       	movw	r22, r18
    3fb2:	90 01       	movw	r18, r0
    3fb4:	0c 01       	movw	r0, r24
    3fb6:	ca 01       	movw	r24, r20
    3fb8:	a0 01       	movw	r20, r0
    3fba:	11 24       	eor	r1, r1
    3fbc:	ff 27       	eor	r31, r31
    3fbe:	59 1b       	sub	r21, r25
    3fc0:	99 f0       	breq	.+38     	; 0x3fe8 <__addsf3x+0x5c>
    3fc2:	59 3f       	cpi	r21, 0xF9	; 249
    3fc4:	50 f4       	brcc	.+20     	; 0x3fda <__addsf3x+0x4e>
    3fc6:	50 3e       	cpi	r21, 0xE0	; 224
    3fc8:	68 f1       	brcs	.+90     	; 0x4024 <__addsf3x+0x98>
    3fca:	1a 16       	cp	r1, r26
    3fcc:	f0 40       	sbci	r31, 0x00	; 0
    3fce:	a2 2f       	mov	r26, r18
    3fd0:	23 2f       	mov	r18, r19
    3fd2:	34 2f       	mov	r19, r20
    3fd4:	44 27       	eor	r20, r20
    3fd6:	58 5f       	subi	r21, 0xF8	; 248
    3fd8:	f3 cf       	rjmp	.-26     	; 0x3fc0 <__addsf3x+0x34>
    3fda:	46 95       	lsr	r20
    3fdc:	37 95       	ror	r19
    3fde:	27 95       	ror	r18
    3fe0:	a7 95       	ror	r26
    3fe2:	f0 40       	sbci	r31, 0x00	; 0
    3fe4:	53 95       	inc	r21
    3fe6:	c9 f7       	brne	.-14     	; 0x3fda <__addsf3x+0x4e>
    3fe8:	7e f4       	brtc	.+30     	; 0x4008 <__addsf3x+0x7c>
    3fea:	1f 16       	cp	r1, r31
    3fec:	ba 0b       	sbc	r27, r26
    3fee:	62 0b       	sbc	r22, r18
    3ff0:	73 0b       	sbc	r23, r19
    3ff2:	84 0b       	sbc	r24, r20
    3ff4:	ba f0       	brmi	.+46     	; 0x4024 <__addsf3x+0x98>
    3ff6:	91 50       	subi	r25, 0x01	; 1
    3ff8:	a1 f0       	breq	.+40     	; 0x4022 <__addsf3x+0x96>
    3ffa:	ff 0f       	add	r31, r31
    3ffc:	bb 1f       	adc	r27, r27
    3ffe:	66 1f       	adc	r22, r22
    4000:	77 1f       	adc	r23, r23
    4002:	88 1f       	adc	r24, r24
    4004:	c2 f7       	brpl	.-16     	; 0x3ff6 <__addsf3x+0x6a>
    4006:	0e c0       	rjmp	.+28     	; 0x4024 <__addsf3x+0x98>
    4008:	ba 0f       	add	r27, r26
    400a:	62 1f       	adc	r22, r18
    400c:	73 1f       	adc	r23, r19
    400e:	84 1f       	adc	r24, r20
    4010:	48 f4       	brcc	.+18     	; 0x4024 <__addsf3x+0x98>
    4012:	87 95       	ror	r24
    4014:	77 95       	ror	r23
    4016:	67 95       	ror	r22
    4018:	b7 95       	ror	r27
    401a:	f7 95       	ror	r31
    401c:	9e 3f       	cpi	r25, 0xFE	; 254
    401e:	08 f0       	brcs	.+2      	; 0x4022 <__addsf3x+0x96>
    4020:	b3 cf       	rjmp	.-154    	; 0x3f88 <__addsf3+0x1e>
    4022:	93 95       	inc	r25
    4024:	88 0f       	add	r24, r24
    4026:	08 f0       	brcs	.+2      	; 0x402a <__addsf3x+0x9e>
    4028:	99 27       	eor	r25, r25
    402a:	ee 0f       	add	r30, r30
    402c:	97 95       	ror	r25
    402e:	87 95       	ror	r24
    4030:	08 95       	ret
    4032:	90 d1       	rcall	.+800    	; 0x4354 <__fp_pscA>
    4034:	58 f0       	brcs	.+22     	; 0x404c <__addsf3x+0xc0>
    4036:	80 e8       	ldi	r24, 0x80	; 128
    4038:	91 e0       	ldi	r25, 0x01	; 1
    403a:	09 f4       	brne	.+2      	; 0x403e <__addsf3x+0xb2>
    403c:	9e ef       	ldi	r25, 0xFE	; 254
    403e:	91 d1       	rcall	.+802    	; 0x4362 <__fp_pscB>
    4040:	28 f0       	brcs	.+10     	; 0x404c <__addsf3x+0xc0>
    4042:	40 e8       	ldi	r20, 0x80	; 128
    4044:	51 e0       	ldi	r21, 0x01	; 1
    4046:	59 f4       	brne	.+22     	; 0x405e <atan2+0xe>
    4048:	5e ef       	ldi	r21, 0xFE	; 254
    404a:	09 c0       	rjmp	.+18     	; 0x405e <atan2+0xe>
    404c:	5b c1       	rjmp	.+694    	; 0x4304 <__fp_nan>
    404e:	fc c1       	rjmp	.+1016   	; 0x4448 <__fp_zero>

00004050 <atan2>:
    4050:	e9 2f       	mov	r30, r25
    4052:	e0 78       	andi	r30, 0x80	; 128
    4054:	d7 d1       	rcall	.+942    	; 0x4404 <__fp_split3>
    4056:	68 f3       	brcs	.-38     	; 0x4032 <__addsf3x+0xa6>
    4058:	09 2e       	mov	r0, r25
    405a:	05 2a       	or	r0, r21
    405c:	c1 f3       	breq	.-16     	; 0x404e <__addsf3x+0xc2>
    405e:	26 17       	cp	r18, r22
    4060:	37 07       	cpc	r19, r23
    4062:	48 07       	cpc	r20, r24
    4064:	59 07       	cpc	r21, r25
    4066:	38 f0       	brcs	.+14     	; 0x4076 <atan2+0x26>
    4068:	0e 2e       	mov	r0, r30
    406a:	07 f8       	bld	r0, 7
    406c:	e0 25       	eor	r30, r0
    406e:	69 f0       	breq	.+26     	; 0x408a <atan2+0x3a>
    4070:	e0 25       	eor	r30, r0
    4072:	e0 64       	ori	r30, 0x40	; 64
    4074:	0a c0       	rjmp	.+20     	; 0x408a <atan2+0x3a>
    4076:	ef 63       	ori	r30, 0x3F	; 63
    4078:	07 f8       	bld	r0, 7
    407a:	00 94       	com	r0
    407c:	07 fa       	bst	r0, 7
    407e:	db 01       	movw	r26, r22
    4080:	b9 01       	movw	r22, r18
    4082:	9d 01       	movw	r18, r26
    4084:	dc 01       	movw	r26, r24
    4086:	ca 01       	movw	r24, r20
    4088:	ad 01       	movw	r20, r26
    408a:	ef 93       	push	r30
    408c:	4a d0       	rcall	.+148    	; 0x4122 <__divsf3_pse>
    408e:	98 d1       	rcall	.+816    	; 0x43c0 <__fp_round>
    4090:	0a d0       	rcall	.+20     	; 0x40a6 <atan>
    4092:	5f 91       	pop	r21
    4094:	55 23       	and	r21, r21
    4096:	31 f0       	breq	.+12     	; 0x40a4 <atan2+0x54>
    4098:	2b ed       	ldi	r18, 0xDB	; 219
    409a:	3f e0       	ldi	r19, 0x0F	; 15
    409c:	49 e4       	ldi	r20, 0x49	; 73
    409e:	50 fd       	sbrc	r21, 0
    40a0:	49 ec       	ldi	r20, 0xC9	; 201
    40a2:	63 cf       	rjmp	.-314    	; 0x3f6a <__addsf3>
    40a4:	08 95       	ret

000040a6 <atan>:
    40a6:	df 93       	push	r29
    40a8:	dd 27       	eor	r29, r29
    40aa:	b9 2f       	mov	r27, r25
    40ac:	bf 77       	andi	r27, 0x7F	; 127
    40ae:	40 e8       	ldi	r20, 0x80	; 128
    40b0:	5f e3       	ldi	r21, 0x3F	; 63
    40b2:	16 16       	cp	r1, r22
    40b4:	17 06       	cpc	r1, r23
    40b6:	48 07       	cpc	r20, r24
    40b8:	5b 07       	cpc	r21, r27
    40ba:	10 f4       	brcc	.+4      	; 0x40c0 <atan+0x1a>
    40bc:	d9 2f       	mov	r29, r25
    40be:	cf d1       	rcall	.+926    	; 0x445e <inverse>
    40c0:	9f 93       	push	r25
    40c2:	8f 93       	push	r24
    40c4:	7f 93       	push	r23
    40c6:	6f 93       	push	r22
    40c8:	3a d2       	rcall	.+1140   	; 0x453e <square>
    40ca:	ea e9       	ldi	r30, 0x9A	; 154
    40cc:	f0 e0       	ldi	r31, 0x00	; 0
    40ce:	1d d1       	rcall	.+570    	; 0x430a <__fp_powser>
    40d0:	77 d1       	rcall	.+750    	; 0x43c0 <__fp_round>
    40d2:	2f 91       	pop	r18
    40d4:	3f 91       	pop	r19
    40d6:	4f 91       	pop	r20
    40d8:	5f 91       	pop	r21
    40da:	d4 d1       	rcall	.+936    	; 0x4484 <__mulsf3x>
    40dc:	dd 23       	and	r29, r29
    40de:	49 f0       	breq	.+18     	; 0x40f2 <atan+0x4c>
    40e0:	90 58       	subi	r25, 0x80	; 128
    40e2:	a2 ea       	ldi	r26, 0xA2	; 162
    40e4:	2a ed       	ldi	r18, 0xDA	; 218
    40e6:	3f e0       	ldi	r19, 0x0F	; 15
    40e8:	49 ec       	ldi	r20, 0xC9	; 201
    40ea:	5f e3       	ldi	r21, 0x3F	; 63
    40ec:	d0 78       	andi	r29, 0x80	; 128
    40ee:	5d 27       	eor	r21, r29
    40f0:	4d df       	rcall	.-358    	; 0x3f8c <__addsf3x>
    40f2:	df 91       	pop	r29
    40f4:	65 c1       	rjmp	.+714    	; 0x43c0 <__fp_round>

000040f6 <__cmpsf2>:
    40f6:	dc d0       	rcall	.+440    	; 0x42b0 <__fp_cmp>
    40f8:	08 f4       	brcc	.+2      	; 0x40fc <__cmpsf2+0x6>
    40fa:	81 e0       	ldi	r24, 0x01	; 1
    40fc:	08 95       	ret

000040fe <cos>:
    40fe:	39 d1       	rcall	.+626    	; 0x4372 <__fp_rempio2>
    4100:	e3 95       	inc	r30
    4102:	6f c1       	rjmp	.+734    	; 0x43e2 <__fp_sinus>

00004104 <__divsf3>:
    4104:	0c d0       	rcall	.+24     	; 0x411e <__divsf3x>
    4106:	5c c1       	rjmp	.+696    	; 0x43c0 <__fp_round>
    4108:	2c d1       	rcall	.+600    	; 0x4362 <__fp_pscB>
    410a:	40 f0       	brcs	.+16     	; 0x411c <__divsf3+0x18>
    410c:	23 d1       	rcall	.+582    	; 0x4354 <__fp_pscA>
    410e:	30 f0       	brcs	.+12     	; 0x411c <__divsf3+0x18>
    4110:	21 f4       	brne	.+8      	; 0x411a <__divsf3+0x16>
    4112:	5f 3f       	cpi	r21, 0xFF	; 255
    4114:	19 f0       	breq	.+6      	; 0x411c <__divsf3+0x18>
    4116:	f0 c0       	rjmp	.+480    	; 0x42f8 <__fp_inf>
    4118:	51 11       	cpse	r21, r1
    411a:	97 c1       	rjmp	.+814    	; 0x444a <__fp_szero>
    411c:	f3 c0       	rjmp	.+486    	; 0x4304 <__fp_nan>

0000411e <__divsf3x>:
    411e:	72 d1       	rcall	.+740    	; 0x4404 <__fp_split3>
    4120:	98 f3       	brcs	.-26     	; 0x4108 <__divsf3+0x4>

00004122 <__divsf3_pse>:
    4122:	99 23       	and	r25, r25
    4124:	c9 f3       	breq	.-14     	; 0x4118 <__divsf3+0x14>
    4126:	55 23       	and	r21, r21
    4128:	b1 f3       	breq	.-20     	; 0x4116 <__divsf3+0x12>
    412a:	95 1b       	sub	r25, r21
    412c:	55 0b       	sbc	r21, r21
    412e:	bb 27       	eor	r27, r27
    4130:	aa 27       	eor	r26, r26
    4132:	62 17       	cp	r22, r18
    4134:	73 07       	cpc	r23, r19
    4136:	84 07       	cpc	r24, r20
    4138:	38 f0       	brcs	.+14     	; 0x4148 <__divsf3_pse+0x26>
    413a:	9f 5f       	subi	r25, 0xFF	; 255
    413c:	5f 4f       	sbci	r21, 0xFF	; 255
    413e:	22 0f       	add	r18, r18
    4140:	33 1f       	adc	r19, r19
    4142:	44 1f       	adc	r20, r20
    4144:	aa 1f       	adc	r26, r26
    4146:	a9 f3       	breq	.-22     	; 0x4132 <__divsf3_pse+0x10>
    4148:	33 d0       	rcall	.+102    	; 0x41b0 <__divsf3_pse+0x8e>
    414a:	0e 2e       	mov	r0, r30
    414c:	3a f0       	brmi	.+14     	; 0x415c <__divsf3_pse+0x3a>
    414e:	e0 e8       	ldi	r30, 0x80	; 128
    4150:	30 d0       	rcall	.+96     	; 0x41b2 <__divsf3_pse+0x90>
    4152:	91 50       	subi	r25, 0x01	; 1
    4154:	50 40       	sbci	r21, 0x00	; 0
    4156:	e6 95       	lsr	r30
    4158:	00 1c       	adc	r0, r0
    415a:	ca f7       	brpl	.-14     	; 0x414e <__divsf3_pse+0x2c>
    415c:	29 d0       	rcall	.+82     	; 0x41b0 <__divsf3_pse+0x8e>
    415e:	fe 2f       	mov	r31, r30
    4160:	27 d0       	rcall	.+78     	; 0x41b0 <__divsf3_pse+0x8e>
    4162:	66 0f       	add	r22, r22
    4164:	77 1f       	adc	r23, r23
    4166:	88 1f       	adc	r24, r24
    4168:	bb 1f       	adc	r27, r27
    416a:	26 17       	cp	r18, r22
    416c:	37 07       	cpc	r19, r23
    416e:	48 07       	cpc	r20, r24
    4170:	ab 07       	cpc	r26, r27
    4172:	b0 e8       	ldi	r27, 0x80	; 128
    4174:	09 f0       	breq	.+2      	; 0x4178 <__divsf3_pse+0x56>
    4176:	bb 0b       	sbc	r27, r27
    4178:	80 2d       	mov	r24, r0
    417a:	bf 01       	movw	r22, r30
    417c:	ff 27       	eor	r31, r31
    417e:	93 58       	subi	r25, 0x83	; 131
    4180:	5f 4f       	sbci	r21, 0xFF	; 255
    4182:	2a f0       	brmi	.+10     	; 0x418e <__divsf3_pse+0x6c>
    4184:	9e 3f       	cpi	r25, 0xFE	; 254
    4186:	51 05       	cpc	r21, r1
    4188:	68 f0       	brcs	.+26     	; 0x41a4 <__divsf3_pse+0x82>
    418a:	b6 c0       	rjmp	.+364    	; 0x42f8 <__fp_inf>
    418c:	5e c1       	rjmp	.+700    	; 0x444a <__fp_szero>
    418e:	5f 3f       	cpi	r21, 0xFF	; 255
    4190:	ec f3       	brlt	.-6      	; 0x418c <__divsf3_pse+0x6a>
    4192:	98 3e       	cpi	r25, 0xE8	; 232
    4194:	dc f3       	brlt	.-10     	; 0x418c <__divsf3_pse+0x6a>
    4196:	86 95       	lsr	r24
    4198:	77 95       	ror	r23
    419a:	67 95       	ror	r22
    419c:	b7 95       	ror	r27
    419e:	f7 95       	ror	r31
    41a0:	9f 5f       	subi	r25, 0xFF	; 255
    41a2:	c9 f7       	brne	.-14     	; 0x4196 <__divsf3_pse+0x74>
    41a4:	88 0f       	add	r24, r24
    41a6:	91 1d       	adc	r25, r1
    41a8:	96 95       	lsr	r25
    41aa:	87 95       	ror	r24
    41ac:	97 f9       	bld	r25, 7
    41ae:	08 95       	ret
    41b0:	e1 e0       	ldi	r30, 0x01	; 1
    41b2:	66 0f       	add	r22, r22
    41b4:	77 1f       	adc	r23, r23
    41b6:	88 1f       	adc	r24, r24
    41b8:	bb 1f       	adc	r27, r27
    41ba:	62 17       	cp	r22, r18
    41bc:	73 07       	cpc	r23, r19
    41be:	84 07       	cpc	r24, r20
    41c0:	ba 07       	cpc	r27, r26
    41c2:	20 f0       	brcs	.+8      	; 0x41cc <__divsf3_pse+0xaa>
    41c4:	62 1b       	sub	r22, r18
    41c6:	73 0b       	sbc	r23, r19
    41c8:	84 0b       	sbc	r24, r20
    41ca:	ba 0b       	sbc	r27, r26
    41cc:	ee 1f       	adc	r30, r30
    41ce:	88 f7       	brcc	.-30     	; 0x41b2 <__divsf3_pse+0x90>
    41d0:	e0 95       	com	r30
    41d2:	08 95       	ret

000041d4 <__fixsfsi>:
    41d4:	04 d0       	rcall	.+8      	; 0x41de <__fixunssfsi>
    41d6:	68 94       	set
    41d8:	b1 11       	cpse	r27, r1
    41da:	37 c1       	rjmp	.+622    	; 0x444a <__fp_szero>
    41dc:	08 95       	ret

000041de <__fixunssfsi>:
    41de:	1a d1       	rcall	.+564    	; 0x4414 <__fp_splitA>
    41e0:	88 f0       	brcs	.+34     	; 0x4204 <__fixunssfsi+0x26>
    41e2:	9f 57       	subi	r25, 0x7F	; 127
    41e4:	90 f0       	brcs	.+36     	; 0x420a <__fixunssfsi+0x2c>
    41e6:	b9 2f       	mov	r27, r25
    41e8:	99 27       	eor	r25, r25
    41ea:	b7 51       	subi	r27, 0x17	; 23
    41ec:	a0 f0       	brcs	.+40     	; 0x4216 <__fixunssfsi+0x38>
    41ee:	d1 f0       	breq	.+52     	; 0x4224 <__fixunssfsi+0x46>
    41f0:	66 0f       	add	r22, r22
    41f2:	77 1f       	adc	r23, r23
    41f4:	88 1f       	adc	r24, r24
    41f6:	99 1f       	adc	r25, r25
    41f8:	1a f0       	brmi	.+6      	; 0x4200 <__fixunssfsi+0x22>
    41fa:	ba 95       	dec	r27
    41fc:	c9 f7       	brne	.-14     	; 0x41f0 <__fixunssfsi+0x12>
    41fe:	12 c0       	rjmp	.+36     	; 0x4224 <__fixunssfsi+0x46>
    4200:	b1 30       	cpi	r27, 0x01	; 1
    4202:	81 f0       	breq	.+32     	; 0x4224 <__fixunssfsi+0x46>
    4204:	21 d1       	rcall	.+578    	; 0x4448 <__fp_zero>
    4206:	b1 e0       	ldi	r27, 0x01	; 1
    4208:	08 95       	ret
    420a:	1e c1       	rjmp	.+572    	; 0x4448 <__fp_zero>
    420c:	67 2f       	mov	r22, r23
    420e:	78 2f       	mov	r23, r24
    4210:	88 27       	eor	r24, r24
    4212:	b8 5f       	subi	r27, 0xF8	; 248
    4214:	39 f0       	breq	.+14     	; 0x4224 <__fixunssfsi+0x46>
    4216:	b9 3f       	cpi	r27, 0xF9	; 249
    4218:	cc f3       	brlt	.-14     	; 0x420c <__fixunssfsi+0x2e>
    421a:	86 95       	lsr	r24
    421c:	77 95       	ror	r23
    421e:	67 95       	ror	r22
    4220:	b3 95       	inc	r27
    4222:	d9 f7       	brne	.-10     	; 0x421a <__fixunssfsi+0x3c>
    4224:	3e f4       	brtc	.+14     	; 0x4234 <__fixunssfsi+0x56>
    4226:	90 95       	com	r25
    4228:	80 95       	com	r24
    422a:	70 95       	com	r23
    422c:	61 95       	neg	r22
    422e:	7f 4f       	sbci	r23, 0xFF	; 255
    4230:	8f 4f       	sbci	r24, 0xFF	; 255
    4232:	9f 4f       	sbci	r25, 0xFF	; 255
    4234:	08 95       	ret

00004236 <__floatunsisf>:
    4236:	e8 94       	clt
    4238:	09 c0       	rjmp	.+18     	; 0x424c <__floatsisf+0x12>

0000423a <__floatsisf>:
    423a:	97 fb       	bst	r25, 7
    423c:	3e f4       	brtc	.+14     	; 0x424c <__floatsisf+0x12>
    423e:	90 95       	com	r25
    4240:	80 95       	com	r24
    4242:	70 95       	com	r23
    4244:	61 95       	neg	r22
    4246:	7f 4f       	sbci	r23, 0xFF	; 255
    4248:	8f 4f       	sbci	r24, 0xFF	; 255
    424a:	9f 4f       	sbci	r25, 0xFF	; 255
    424c:	99 23       	and	r25, r25
    424e:	a9 f0       	breq	.+42     	; 0x427a <__floatsisf+0x40>
    4250:	f9 2f       	mov	r31, r25
    4252:	96 e9       	ldi	r25, 0x96	; 150
    4254:	bb 27       	eor	r27, r27
    4256:	93 95       	inc	r25
    4258:	f6 95       	lsr	r31
    425a:	87 95       	ror	r24
    425c:	77 95       	ror	r23
    425e:	67 95       	ror	r22
    4260:	b7 95       	ror	r27
    4262:	f1 11       	cpse	r31, r1
    4264:	f8 cf       	rjmp	.-16     	; 0x4256 <__floatsisf+0x1c>
    4266:	fa f4       	brpl	.+62     	; 0x42a6 <__floatsisf+0x6c>
    4268:	bb 0f       	add	r27, r27
    426a:	11 f4       	brne	.+4      	; 0x4270 <__floatsisf+0x36>
    426c:	60 ff       	sbrs	r22, 0
    426e:	1b c0       	rjmp	.+54     	; 0x42a6 <__floatsisf+0x6c>
    4270:	6f 5f       	subi	r22, 0xFF	; 255
    4272:	7f 4f       	sbci	r23, 0xFF	; 255
    4274:	8f 4f       	sbci	r24, 0xFF	; 255
    4276:	9f 4f       	sbci	r25, 0xFF	; 255
    4278:	16 c0       	rjmp	.+44     	; 0x42a6 <__floatsisf+0x6c>
    427a:	88 23       	and	r24, r24
    427c:	11 f0       	breq	.+4      	; 0x4282 <__floatsisf+0x48>
    427e:	96 e9       	ldi	r25, 0x96	; 150
    4280:	11 c0       	rjmp	.+34     	; 0x42a4 <__floatsisf+0x6a>
    4282:	77 23       	and	r23, r23
    4284:	21 f0       	breq	.+8      	; 0x428e <__floatsisf+0x54>
    4286:	9e e8       	ldi	r25, 0x8E	; 142
    4288:	87 2f       	mov	r24, r23
    428a:	76 2f       	mov	r23, r22
    428c:	05 c0       	rjmp	.+10     	; 0x4298 <__floatsisf+0x5e>
    428e:	66 23       	and	r22, r22
    4290:	71 f0       	breq	.+28     	; 0x42ae <__floatsisf+0x74>
    4292:	96 e8       	ldi	r25, 0x86	; 134
    4294:	86 2f       	mov	r24, r22
    4296:	70 e0       	ldi	r23, 0x00	; 0
    4298:	60 e0       	ldi	r22, 0x00	; 0
    429a:	2a f0       	brmi	.+10     	; 0x42a6 <__floatsisf+0x6c>
    429c:	9a 95       	dec	r25
    429e:	66 0f       	add	r22, r22
    42a0:	77 1f       	adc	r23, r23
    42a2:	88 1f       	adc	r24, r24
    42a4:	da f7       	brpl	.-10     	; 0x429c <__floatsisf+0x62>
    42a6:	88 0f       	add	r24, r24
    42a8:	96 95       	lsr	r25
    42aa:	87 95       	ror	r24
    42ac:	97 f9       	bld	r25, 7
    42ae:	08 95       	ret

000042b0 <__fp_cmp>:
    42b0:	99 0f       	add	r25, r25
    42b2:	00 08       	sbc	r0, r0
    42b4:	55 0f       	add	r21, r21
    42b6:	aa 0b       	sbc	r26, r26
    42b8:	e0 e8       	ldi	r30, 0x80	; 128
    42ba:	fe ef       	ldi	r31, 0xFE	; 254
    42bc:	16 16       	cp	r1, r22
    42be:	17 06       	cpc	r1, r23
    42c0:	e8 07       	cpc	r30, r24
    42c2:	f9 07       	cpc	r31, r25
    42c4:	c0 f0       	brcs	.+48     	; 0x42f6 <__fp_cmp+0x46>
    42c6:	12 16       	cp	r1, r18
    42c8:	13 06       	cpc	r1, r19
    42ca:	e4 07       	cpc	r30, r20
    42cc:	f5 07       	cpc	r31, r21
    42ce:	98 f0       	brcs	.+38     	; 0x42f6 <__fp_cmp+0x46>
    42d0:	62 1b       	sub	r22, r18
    42d2:	73 0b       	sbc	r23, r19
    42d4:	84 0b       	sbc	r24, r20
    42d6:	95 0b       	sbc	r25, r21
    42d8:	39 f4       	brne	.+14     	; 0x42e8 <__fp_cmp+0x38>
    42da:	0a 26       	eor	r0, r26
    42dc:	61 f0       	breq	.+24     	; 0x42f6 <__fp_cmp+0x46>
    42de:	23 2b       	or	r18, r19
    42e0:	24 2b       	or	r18, r20
    42e2:	25 2b       	or	r18, r21
    42e4:	21 f4       	brne	.+8      	; 0x42ee <__fp_cmp+0x3e>
    42e6:	08 95       	ret
    42e8:	0a 26       	eor	r0, r26
    42ea:	09 f4       	brne	.+2      	; 0x42ee <__fp_cmp+0x3e>
    42ec:	a1 40       	sbci	r26, 0x01	; 1
    42ee:	a6 95       	lsr	r26
    42f0:	8f ef       	ldi	r24, 0xFF	; 255
    42f2:	81 1d       	adc	r24, r1
    42f4:	81 1d       	adc	r24, r1
    42f6:	08 95       	ret

000042f8 <__fp_inf>:
    42f8:	97 f9       	bld	r25, 7
    42fa:	9f 67       	ori	r25, 0x7F	; 127
    42fc:	80 e8       	ldi	r24, 0x80	; 128
    42fe:	70 e0       	ldi	r23, 0x00	; 0
    4300:	60 e0       	ldi	r22, 0x00	; 0
    4302:	08 95       	ret

00004304 <__fp_nan>:
    4304:	9f ef       	ldi	r25, 0xFF	; 255
    4306:	80 ec       	ldi	r24, 0xC0	; 192
    4308:	08 95       	ret

0000430a <__fp_powser>:
    430a:	df 93       	push	r29
    430c:	cf 93       	push	r28
    430e:	1f 93       	push	r17
    4310:	0f 93       	push	r16
    4312:	ff 92       	push	r15
    4314:	ef 92       	push	r14
    4316:	df 92       	push	r13
    4318:	7b 01       	movw	r14, r22
    431a:	8c 01       	movw	r16, r24
    431c:	68 94       	set
    431e:	05 c0       	rjmp	.+10     	; 0x432a <__fp_powser+0x20>
    4320:	da 2e       	mov	r13, r26
    4322:	ef 01       	movw	r28, r30
    4324:	af d0       	rcall	.+350    	; 0x4484 <__mulsf3x>
    4326:	fe 01       	movw	r30, r28
    4328:	e8 94       	clt
    432a:	a5 91       	lpm	r26, Z+
    432c:	25 91       	lpm	r18, Z+
    432e:	35 91       	lpm	r19, Z+
    4330:	45 91       	lpm	r20, Z+
    4332:	55 91       	lpm	r21, Z+
    4334:	ae f3       	brts	.-22     	; 0x4320 <__fp_powser+0x16>
    4336:	ef 01       	movw	r28, r30
    4338:	29 de       	rcall	.-942    	; 0x3f8c <__addsf3x>
    433a:	fe 01       	movw	r30, r28
    433c:	97 01       	movw	r18, r14
    433e:	a8 01       	movw	r20, r16
    4340:	da 94       	dec	r13
    4342:	79 f7       	brne	.-34     	; 0x4322 <__fp_powser+0x18>
    4344:	df 90       	pop	r13
    4346:	ef 90       	pop	r14
    4348:	ff 90       	pop	r15
    434a:	0f 91       	pop	r16
    434c:	1f 91       	pop	r17
    434e:	cf 91       	pop	r28
    4350:	df 91       	pop	r29
    4352:	08 95       	ret

00004354 <__fp_pscA>:
    4354:	00 24       	eor	r0, r0
    4356:	0a 94       	dec	r0
    4358:	16 16       	cp	r1, r22
    435a:	17 06       	cpc	r1, r23
    435c:	18 06       	cpc	r1, r24
    435e:	09 06       	cpc	r0, r25
    4360:	08 95       	ret

00004362 <__fp_pscB>:
    4362:	00 24       	eor	r0, r0
    4364:	0a 94       	dec	r0
    4366:	12 16       	cp	r1, r18
    4368:	13 06       	cpc	r1, r19
    436a:	14 06       	cpc	r1, r20
    436c:	05 06       	cpc	r0, r21
    436e:	08 95       	ret
    4370:	c9 cf       	rjmp	.-110    	; 0x4304 <__fp_nan>

00004372 <__fp_rempio2>:
    4372:	50 d0       	rcall	.+160    	; 0x4414 <__fp_splitA>
    4374:	e8 f3       	brcs	.-6      	; 0x4370 <__fp_pscB+0xe>
    4376:	e8 94       	clt
    4378:	e0 e0       	ldi	r30, 0x00	; 0
    437a:	bb 27       	eor	r27, r27
    437c:	9f 57       	subi	r25, 0x7F	; 127
    437e:	f0 f0       	brcs	.+60     	; 0x43bc <__fp_rempio2+0x4a>
    4380:	2a ed       	ldi	r18, 0xDA	; 218
    4382:	3f e0       	ldi	r19, 0x0F	; 15
    4384:	49 ec       	ldi	r20, 0xC9	; 201
    4386:	06 c0       	rjmp	.+12     	; 0x4394 <__fp_rempio2+0x22>
    4388:	ee 0f       	add	r30, r30
    438a:	bb 0f       	add	r27, r27
    438c:	66 1f       	adc	r22, r22
    438e:	77 1f       	adc	r23, r23
    4390:	88 1f       	adc	r24, r24
    4392:	28 f0       	brcs	.+10     	; 0x439e <__fp_rempio2+0x2c>
    4394:	b2 3a       	cpi	r27, 0xA2	; 162
    4396:	62 07       	cpc	r22, r18
    4398:	73 07       	cpc	r23, r19
    439a:	84 07       	cpc	r24, r20
    439c:	28 f0       	brcs	.+10     	; 0x43a8 <__fp_rempio2+0x36>
    439e:	b2 5a       	subi	r27, 0xA2	; 162
    43a0:	62 0b       	sbc	r22, r18
    43a2:	73 0b       	sbc	r23, r19
    43a4:	84 0b       	sbc	r24, r20
    43a6:	e3 95       	inc	r30
    43a8:	9a 95       	dec	r25
    43aa:	72 f7       	brpl	.-36     	; 0x4388 <__fp_rempio2+0x16>
    43ac:	80 38       	cpi	r24, 0x80	; 128
    43ae:	30 f4       	brcc	.+12     	; 0x43bc <__fp_rempio2+0x4a>
    43b0:	9a 95       	dec	r25
    43b2:	bb 0f       	add	r27, r27
    43b4:	66 1f       	adc	r22, r22
    43b6:	77 1f       	adc	r23, r23
    43b8:	88 1f       	adc	r24, r24
    43ba:	d2 f7       	brpl	.-12     	; 0x43b0 <__fp_rempio2+0x3e>
    43bc:	90 48       	sbci	r25, 0x80	; 128
    43be:	e4 c0       	rjmp	.+456    	; 0x4588 <__fp_mpack_finite>

000043c0 <__fp_round>:
    43c0:	09 2e       	mov	r0, r25
    43c2:	03 94       	inc	r0
    43c4:	00 0c       	add	r0, r0
    43c6:	11 f4       	brne	.+4      	; 0x43cc <__fp_round+0xc>
    43c8:	88 23       	and	r24, r24
    43ca:	52 f0       	brmi	.+20     	; 0x43e0 <__fp_round+0x20>
    43cc:	bb 0f       	add	r27, r27
    43ce:	40 f4       	brcc	.+16     	; 0x43e0 <__fp_round+0x20>
    43d0:	bf 2b       	or	r27, r31
    43d2:	11 f4       	brne	.+4      	; 0x43d8 <__fp_round+0x18>
    43d4:	60 ff       	sbrs	r22, 0
    43d6:	04 c0       	rjmp	.+8      	; 0x43e0 <__fp_round+0x20>
    43d8:	6f 5f       	subi	r22, 0xFF	; 255
    43da:	7f 4f       	sbci	r23, 0xFF	; 255
    43dc:	8f 4f       	sbci	r24, 0xFF	; 255
    43de:	9f 4f       	sbci	r25, 0xFF	; 255
    43e0:	08 95       	ret

000043e2 <__fp_sinus>:
    43e2:	ef 93       	push	r30
    43e4:	e0 ff       	sbrs	r30, 0
    43e6:	06 c0       	rjmp	.+12     	; 0x43f4 <__fp_sinus+0x12>
    43e8:	a2 ea       	ldi	r26, 0xA2	; 162
    43ea:	2a ed       	ldi	r18, 0xDA	; 218
    43ec:	3f e0       	ldi	r19, 0x0F	; 15
    43ee:	49 ec       	ldi	r20, 0xC9	; 201
    43f0:	5f eb       	ldi	r21, 0xBF	; 191
    43f2:	cc dd       	rcall	.-1128   	; 0x3f8c <__addsf3x>
    43f4:	e5 df       	rcall	.-54     	; 0x43c0 <__fp_round>
    43f6:	0f 90       	pop	r0
    43f8:	03 94       	inc	r0
    43fa:	01 fc       	sbrc	r0, 1
    43fc:	90 58       	subi	r25, 0x80	; 128
    43fe:	e7 ec       	ldi	r30, 0xC7	; 199
    4400:	f0 e0       	ldi	r31, 0x00	; 0
    4402:	ce c0       	rjmp	.+412    	; 0x45a0 <__fp_powsodd>

00004404 <__fp_split3>:
    4404:	57 fd       	sbrc	r21, 7
    4406:	90 58       	subi	r25, 0x80	; 128
    4408:	44 0f       	add	r20, r20
    440a:	55 1f       	adc	r21, r21
    440c:	59 f0       	breq	.+22     	; 0x4424 <__fp_splitA+0x10>
    440e:	5f 3f       	cpi	r21, 0xFF	; 255
    4410:	71 f0       	breq	.+28     	; 0x442e <__fp_splitA+0x1a>
    4412:	47 95       	ror	r20

00004414 <__fp_splitA>:
    4414:	88 0f       	add	r24, r24
    4416:	97 fb       	bst	r25, 7
    4418:	99 1f       	adc	r25, r25
    441a:	61 f0       	breq	.+24     	; 0x4434 <__fp_splitA+0x20>
    441c:	9f 3f       	cpi	r25, 0xFF	; 255
    441e:	79 f0       	breq	.+30     	; 0x443e <__fp_splitA+0x2a>
    4420:	87 95       	ror	r24
    4422:	08 95       	ret
    4424:	12 16       	cp	r1, r18
    4426:	13 06       	cpc	r1, r19
    4428:	14 06       	cpc	r1, r20
    442a:	55 1f       	adc	r21, r21
    442c:	f2 cf       	rjmp	.-28     	; 0x4412 <__fp_split3+0xe>
    442e:	46 95       	lsr	r20
    4430:	f1 df       	rcall	.-30     	; 0x4414 <__fp_splitA>
    4432:	08 c0       	rjmp	.+16     	; 0x4444 <__fp_splitA+0x30>
    4434:	16 16       	cp	r1, r22
    4436:	17 06       	cpc	r1, r23
    4438:	18 06       	cpc	r1, r24
    443a:	99 1f       	adc	r25, r25
    443c:	f1 cf       	rjmp	.-30     	; 0x4420 <__fp_splitA+0xc>
    443e:	86 95       	lsr	r24
    4440:	71 05       	cpc	r23, r1
    4442:	61 05       	cpc	r22, r1
    4444:	08 94       	sec
    4446:	08 95       	ret

00004448 <__fp_zero>:
    4448:	e8 94       	clt

0000444a <__fp_szero>:
    444a:	bb 27       	eor	r27, r27
    444c:	66 27       	eor	r22, r22
    444e:	77 27       	eor	r23, r23
    4450:	cb 01       	movw	r24, r22
    4452:	97 f9       	bld	r25, 7
    4454:	08 95       	ret

00004456 <__gesf2>:
    4456:	2c df       	rcall	.-424    	; 0x42b0 <__fp_cmp>
    4458:	08 f4       	brcc	.+2      	; 0x445c <__gesf2+0x6>
    445a:	8f ef       	ldi	r24, 0xFF	; 255
    445c:	08 95       	ret

0000445e <inverse>:
    445e:	9b 01       	movw	r18, r22
    4460:	ac 01       	movw	r20, r24
    4462:	60 e0       	ldi	r22, 0x00	; 0
    4464:	70 e0       	ldi	r23, 0x00	; 0
    4466:	80 e8       	ldi	r24, 0x80	; 128
    4468:	9f e3       	ldi	r25, 0x3F	; 63
    446a:	4c ce       	rjmp	.-872    	; 0x4104 <__divsf3>

0000446c <__mulsf3>:
    446c:	0b d0       	rcall	.+22     	; 0x4484 <__mulsf3x>
    446e:	a8 cf       	rjmp	.-176    	; 0x43c0 <__fp_round>
    4470:	71 df       	rcall	.-286    	; 0x4354 <__fp_pscA>
    4472:	28 f0       	brcs	.+10     	; 0x447e <__mulsf3+0x12>
    4474:	76 df       	rcall	.-276    	; 0x4362 <__fp_pscB>
    4476:	18 f0       	brcs	.+6      	; 0x447e <__mulsf3+0x12>
    4478:	95 23       	and	r25, r21
    447a:	09 f0       	breq	.+2      	; 0x447e <__mulsf3+0x12>
    447c:	3d cf       	rjmp	.-390    	; 0x42f8 <__fp_inf>
    447e:	42 cf       	rjmp	.-380    	; 0x4304 <__fp_nan>
    4480:	11 24       	eor	r1, r1
    4482:	e3 cf       	rjmp	.-58     	; 0x444a <__fp_szero>

00004484 <__mulsf3x>:
    4484:	bf df       	rcall	.-130    	; 0x4404 <__fp_split3>
    4486:	a0 f3       	brcs	.-24     	; 0x4470 <__mulsf3+0x4>

00004488 <__mulsf3_pse>:
    4488:	95 9f       	mul	r25, r21
    448a:	d1 f3       	breq	.-12     	; 0x4480 <__mulsf3+0x14>
    448c:	95 0f       	add	r25, r21
    448e:	50 e0       	ldi	r21, 0x00	; 0
    4490:	55 1f       	adc	r21, r21
    4492:	62 9f       	mul	r22, r18
    4494:	f0 01       	movw	r30, r0
    4496:	72 9f       	mul	r23, r18
    4498:	bb 27       	eor	r27, r27
    449a:	f0 0d       	add	r31, r0
    449c:	b1 1d       	adc	r27, r1
    449e:	63 9f       	mul	r22, r19
    44a0:	aa 27       	eor	r26, r26
    44a2:	f0 0d       	add	r31, r0
    44a4:	b1 1d       	adc	r27, r1
    44a6:	aa 1f       	adc	r26, r26
    44a8:	64 9f       	mul	r22, r20
    44aa:	66 27       	eor	r22, r22
    44ac:	b0 0d       	add	r27, r0
    44ae:	a1 1d       	adc	r26, r1
    44b0:	66 1f       	adc	r22, r22
    44b2:	82 9f       	mul	r24, r18
    44b4:	22 27       	eor	r18, r18
    44b6:	b0 0d       	add	r27, r0
    44b8:	a1 1d       	adc	r26, r1
    44ba:	62 1f       	adc	r22, r18
    44bc:	73 9f       	mul	r23, r19
    44be:	b0 0d       	add	r27, r0
    44c0:	a1 1d       	adc	r26, r1
    44c2:	62 1f       	adc	r22, r18
    44c4:	83 9f       	mul	r24, r19
    44c6:	a0 0d       	add	r26, r0
    44c8:	61 1d       	adc	r22, r1
    44ca:	22 1f       	adc	r18, r18
    44cc:	74 9f       	mul	r23, r20
    44ce:	33 27       	eor	r19, r19
    44d0:	a0 0d       	add	r26, r0
    44d2:	61 1d       	adc	r22, r1
    44d4:	23 1f       	adc	r18, r19
    44d6:	84 9f       	mul	r24, r20
    44d8:	60 0d       	add	r22, r0
    44da:	21 1d       	adc	r18, r1
    44dc:	82 2f       	mov	r24, r18
    44de:	76 2f       	mov	r23, r22
    44e0:	6a 2f       	mov	r22, r26
    44e2:	11 24       	eor	r1, r1
    44e4:	9f 57       	subi	r25, 0x7F	; 127
    44e6:	50 40       	sbci	r21, 0x00	; 0
    44e8:	8a f0       	brmi	.+34     	; 0x450c <__mulsf3_pse+0x84>
    44ea:	e1 f0       	breq	.+56     	; 0x4524 <__mulsf3_pse+0x9c>
    44ec:	88 23       	and	r24, r24
    44ee:	4a f0       	brmi	.+18     	; 0x4502 <__mulsf3_pse+0x7a>
    44f0:	ee 0f       	add	r30, r30
    44f2:	ff 1f       	adc	r31, r31
    44f4:	bb 1f       	adc	r27, r27
    44f6:	66 1f       	adc	r22, r22
    44f8:	77 1f       	adc	r23, r23
    44fa:	88 1f       	adc	r24, r24
    44fc:	91 50       	subi	r25, 0x01	; 1
    44fe:	50 40       	sbci	r21, 0x00	; 0
    4500:	a9 f7       	brne	.-22     	; 0x44ec <__mulsf3_pse+0x64>
    4502:	9e 3f       	cpi	r25, 0xFE	; 254
    4504:	51 05       	cpc	r21, r1
    4506:	70 f0       	brcs	.+28     	; 0x4524 <__mulsf3_pse+0x9c>
    4508:	f7 ce       	rjmp	.-530    	; 0x42f8 <__fp_inf>
    450a:	9f cf       	rjmp	.-194    	; 0x444a <__fp_szero>
    450c:	5f 3f       	cpi	r21, 0xFF	; 255
    450e:	ec f3       	brlt	.-6      	; 0x450a <__mulsf3_pse+0x82>
    4510:	98 3e       	cpi	r25, 0xE8	; 232
    4512:	dc f3       	brlt	.-10     	; 0x450a <__mulsf3_pse+0x82>
    4514:	86 95       	lsr	r24
    4516:	77 95       	ror	r23
    4518:	67 95       	ror	r22
    451a:	b7 95       	ror	r27
    451c:	f7 95       	ror	r31
    451e:	e7 95       	ror	r30
    4520:	9f 5f       	subi	r25, 0xFF	; 255
    4522:	c1 f7       	brne	.-16     	; 0x4514 <__mulsf3_pse+0x8c>
    4524:	fe 2b       	or	r31, r30
    4526:	88 0f       	add	r24, r24
    4528:	91 1d       	adc	r25, r1
    452a:	96 95       	lsr	r25
    452c:	87 95       	ror	r24
    452e:	97 f9       	bld	r25, 7
    4530:	08 95       	ret

00004532 <sin>:
    4532:	9f 93       	push	r25
    4534:	1e df       	rcall	.-452    	; 0x4372 <__fp_rempio2>
    4536:	0f 90       	pop	r0
    4538:	07 fc       	sbrc	r0, 7
    453a:	ee 5f       	subi	r30, 0xFE	; 254
    453c:	52 cf       	rjmp	.-348    	; 0x43e2 <__fp_sinus>

0000453e <square>:
    453e:	9b 01       	movw	r18, r22
    4540:	ac 01       	movw	r20, r24
    4542:	94 cf       	rjmp	.-216    	; 0x446c <__mulsf3>

00004544 <tan>:
    4544:	df 93       	push	r29
    4546:	d9 2f       	mov	r29, r25
    4548:	14 df       	rcall	.-472    	; 0x4372 <__fp_rempio2>
    454a:	e6 95       	lsr	r30
    454c:	d7 95       	ror	r29
    454e:	2a ed       	ldi	r18, 0xDA	; 218
    4550:	3f e0       	ldi	r19, 0x0F	; 15
    4552:	49 e4       	ldi	r20, 0x49	; 73
    4554:	5f e3       	ldi	r21, 0x3F	; 63
    4556:	b3 3a       	cpi	r27, 0xA3	; 163
    4558:	62 07       	cpc	r22, r18
    455a:	73 07       	cpc	r23, r19
    455c:	84 07       	cpc	r24, r20
    455e:	95 07       	cpc	r25, r21
    4560:	d7 95       	ror	r29
    4562:	2a f0       	brmi	.+10     	; 0x456e <tan+0x2a>
    4564:	a2 ea       	ldi	r26, 0xA2	; 162
    4566:	49 ec       	ldi	r20, 0xC9	; 201
    4568:	90 68       	ori	r25, 0x80	; 128
    456a:	10 dd       	rcall	.-1504   	; 0x3f8c <__addsf3x>
    456c:	29 df       	rcall	.-430    	; 0x43c0 <__fp_round>
    456e:	e5 ee       	ldi	r30, 0xE5	; 229
    4570:	f0 e0       	ldi	r31, 0x00	; 0
    4572:	16 d0       	rcall	.+44     	; 0x45a0 <__fp_powsodd>
    4574:	dd 0f       	add	r29, r29
    4576:	0b f0       	brvs	.+2      	; 0x457a <tan+0x36>
    4578:	72 df       	rcall	.-284    	; 0x445e <inverse>
    457a:	dd 0f       	add	r29, r29
    457c:	0b f4       	brvc	.+2      	; 0x4580 <tan+0x3c>
    457e:	90 58       	subi	r25, 0x80	; 128
    4580:	df 91       	pop	r29
    4582:	08 95       	ret

00004584 <__fp_mpack>:
    4584:	9f 3f       	cpi	r25, 0xFF	; 255
    4586:	31 f0       	breq	.+12     	; 0x4594 <__fp_mpack_finite+0xc>

00004588 <__fp_mpack_finite>:
    4588:	91 50       	subi	r25, 0x01	; 1
    458a:	20 f4       	brcc	.+8      	; 0x4594 <__fp_mpack_finite+0xc>
    458c:	87 95       	ror	r24
    458e:	77 95       	ror	r23
    4590:	67 95       	ror	r22
    4592:	b7 95       	ror	r27
    4594:	88 0f       	add	r24, r24
    4596:	91 1d       	adc	r25, r1
    4598:	96 95       	lsr	r25
    459a:	87 95       	ror	r24
    459c:	97 f9       	bld	r25, 7
    459e:	08 95       	ret

000045a0 <__fp_powsodd>:
    45a0:	9f 93       	push	r25
    45a2:	8f 93       	push	r24
    45a4:	7f 93       	push	r23
    45a6:	6f 93       	push	r22
    45a8:	ff 93       	push	r31
    45aa:	ef 93       	push	r30
    45ac:	9b 01       	movw	r18, r22
    45ae:	ac 01       	movw	r20, r24
    45b0:	5d df       	rcall	.-326    	; 0x446c <__mulsf3>
    45b2:	ef 91       	pop	r30
    45b4:	ff 91       	pop	r31
    45b6:	a9 de       	rcall	.-686    	; 0x430a <__fp_powser>
    45b8:	2f 91       	pop	r18
    45ba:	3f 91       	pop	r19
    45bc:	4f 91       	pop	r20
    45be:	5f 91       	pop	r21
    45c0:	55 cf       	rjmp	.-342    	; 0x446c <__mulsf3>

000045c2 <vfprintf>:
    45c2:	a3 e1       	ldi	r26, 0x13	; 19
    45c4:	b0 e0       	ldi	r27, 0x00	; 0
    45c6:	e7 ee       	ldi	r30, 0xE7	; 231
    45c8:	f2 e2       	ldi	r31, 0x22	; 34
    45ca:	0c 94 62 26 	jmp	0x4cc4	; 0x4cc4 <__prologue_saves__>
    45ce:	7c 01       	movw	r14, r24
    45d0:	1b 01       	movw	r2, r22
    45d2:	6a 01       	movw	r12, r20
    45d4:	fc 01       	movw	r30, r24
    45d6:	17 82       	std	Z+7, r1	; 0x07
    45d8:	16 82       	std	Z+6, r1	; 0x06
    45da:	83 81       	ldd	r24, Z+3	; 0x03
    45dc:	81 ff       	sbrs	r24, 1
    45de:	66 c3       	rjmp	.+1740   	; 0x4cac <vfprintf+0x6ea>
    45e0:	be 01       	movw	r22, r28
    45e2:	6f 5f       	subi	r22, 0xFF	; 255
    45e4:	7f 4f       	sbci	r23, 0xFF	; 255
    45e6:	4b 01       	movw	r8, r22
    45e8:	f7 01       	movw	r30, r14
    45ea:	93 81       	ldd	r25, Z+3	; 0x03
    45ec:	f1 01       	movw	r30, r2
    45ee:	93 fd       	sbrc	r25, 3
    45f0:	85 91       	lpm	r24, Z+
    45f2:	93 ff       	sbrs	r25, 3
    45f4:	81 91       	ld	r24, Z+
    45f6:	1f 01       	movw	r2, r30
    45f8:	88 23       	and	r24, r24
    45fa:	09 f4       	brne	.+2      	; 0x45fe <vfprintf+0x3c>
    45fc:	53 c3       	rjmp	.+1702   	; 0x4ca4 <vfprintf+0x6e2>
    45fe:	85 32       	cpi	r24, 0x25	; 37
    4600:	39 f4       	brne	.+14     	; 0x4610 <vfprintf+0x4e>
    4602:	93 fd       	sbrc	r25, 3
    4604:	85 91       	lpm	r24, Z+
    4606:	93 ff       	sbrs	r25, 3
    4608:	81 91       	ld	r24, Z+
    460a:	1f 01       	movw	r2, r30
    460c:	85 32       	cpi	r24, 0x25	; 37
    460e:	39 f4       	brne	.+14     	; 0x461e <vfprintf+0x5c>
    4610:	b7 01       	movw	r22, r14
    4612:	90 e0       	ldi	r25, 0x00	; 0
    4614:	0e 94 87 27 	call	0x4f0e	; 0x4f0e <fputc>
    4618:	56 01       	movw	r10, r12
    461a:	65 01       	movw	r12, r10
    461c:	e5 cf       	rjmp	.-54     	; 0x45e8 <vfprintf+0x26>
    461e:	10 e0       	ldi	r17, 0x00	; 0
    4620:	51 2c       	mov	r5, r1
    4622:	20 e0       	ldi	r18, 0x00	; 0
    4624:	20 32       	cpi	r18, 0x20	; 32
    4626:	a0 f4       	brcc	.+40     	; 0x4650 <vfprintf+0x8e>
    4628:	8b 32       	cpi	r24, 0x2B	; 43
    462a:	69 f0       	breq	.+26     	; 0x4646 <vfprintf+0x84>
    462c:	30 f4       	brcc	.+12     	; 0x463a <vfprintf+0x78>
    462e:	80 32       	cpi	r24, 0x20	; 32
    4630:	59 f0       	breq	.+22     	; 0x4648 <vfprintf+0x86>
    4632:	83 32       	cpi	r24, 0x23	; 35
    4634:	69 f4       	brne	.+26     	; 0x4650 <vfprintf+0x8e>
    4636:	20 61       	ori	r18, 0x10	; 16
    4638:	2c c0       	rjmp	.+88     	; 0x4692 <vfprintf+0xd0>
    463a:	8d 32       	cpi	r24, 0x2D	; 45
    463c:	39 f0       	breq	.+14     	; 0x464c <vfprintf+0x8a>
    463e:	80 33       	cpi	r24, 0x30	; 48
    4640:	39 f4       	brne	.+14     	; 0x4650 <vfprintf+0x8e>
    4642:	21 60       	ori	r18, 0x01	; 1
    4644:	26 c0       	rjmp	.+76     	; 0x4692 <vfprintf+0xd0>
    4646:	22 60       	ori	r18, 0x02	; 2
    4648:	24 60       	ori	r18, 0x04	; 4
    464a:	23 c0       	rjmp	.+70     	; 0x4692 <vfprintf+0xd0>
    464c:	28 60       	ori	r18, 0x08	; 8
    464e:	21 c0       	rjmp	.+66     	; 0x4692 <vfprintf+0xd0>
    4650:	27 fd       	sbrc	r18, 7
    4652:	27 c0       	rjmp	.+78     	; 0x46a2 <vfprintf+0xe0>
    4654:	30 ed       	ldi	r19, 0xD0	; 208
    4656:	38 0f       	add	r19, r24
    4658:	3a 30       	cpi	r19, 0x0A	; 10
    465a:	78 f4       	brcc	.+30     	; 0x467a <vfprintf+0xb8>
    465c:	26 ff       	sbrs	r18, 6
    465e:	06 c0       	rjmp	.+12     	; 0x466c <vfprintf+0xaa>
    4660:	fa e0       	ldi	r31, 0x0A	; 10
    4662:	1f 9f       	mul	r17, r31
    4664:	30 0d       	add	r19, r0
    4666:	11 24       	eor	r1, r1
    4668:	13 2f       	mov	r17, r19
    466a:	13 c0       	rjmp	.+38     	; 0x4692 <vfprintf+0xd0>
    466c:	6a e0       	ldi	r22, 0x0A	; 10
    466e:	56 9e       	mul	r5, r22
    4670:	30 0d       	add	r19, r0
    4672:	11 24       	eor	r1, r1
    4674:	53 2e       	mov	r5, r19
    4676:	20 62       	ori	r18, 0x20	; 32
    4678:	0c c0       	rjmp	.+24     	; 0x4692 <vfprintf+0xd0>
    467a:	8e 32       	cpi	r24, 0x2E	; 46
    467c:	21 f4       	brne	.+8      	; 0x4686 <vfprintf+0xc4>
    467e:	26 fd       	sbrc	r18, 6
    4680:	11 c3       	rjmp	.+1570   	; 0x4ca4 <vfprintf+0x6e2>
    4682:	20 64       	ori	r18, 0x40	; 64
    4684:	06 c0       	rjmp	.+12     	; 0x4692 <vfprintf+0xd0>
    4686:	8c 36       	cpi	r24, 0x6C	; 108
    4688:	11 f4       	brne	.+4      	; 0x468e <vfprintf+0xcc>
    468a:	20 68       	ori	r18, 0x80	; 128
    468c:	02 c0       	rjmp	.+4      	; 0x4692 <vfprintf+0xd0>
    468e:	88 36       	cpi	r24, 0x68	; 104
    4690:	41 f4       	brne	.+16     	; 0x46a2 <vfprintf+0xe0>
    4692:	f1 01       	movw	r30, r2
    4694:	93 fd       	sbrc	r25, 3
    4696:	85 91       	lpm	r24, Z+
    4698:	93 ff       	sbrs	r25, 3
    469a:	81 91       	ld	r24, Z+
    469c:	1f 01       	movw	r2, r30
    469e:	81 11       	cpse	r24, r1
    46a0:	c1 cf       	rjmp	.-126    	; 0x4624 <vfprintf+0x62>
    46a2:	9b eb       	ldi	r25, 0xBB	; 187
    46a4:	98 0f       	add	r25, r24
    46a6:	93 30       	cpi	r25, 0x03	; 3
    46a8:	18 f4       	brcc	.+6      	; 0x46b0 <vfprintf+0xee>
    46aa:	20 61       	ori	r18, 0x10	; 16
    46ac:	80 5e       	subi	r24, 0xE0	; 224
    46ae:	06 c0       	rjmp	.+12     	; 0x46bc <vfprintf+0xfa>
    46b0:	9b e9       	ldi	r25, 0x9B	; 155
    46b2:	98 0f       	add	r25, r24
    46b4:	93 30       	cpi	r25, 0x03	; 3
    46b6:	08 f0       	brcs	.+2      	; 0x46ba <vfprintf+0xf8>
    46b8:	aa c1       	rjmp	.+852    	; 0x4a0e <vfprintf+0x44c>
    46ba:	2f 7e       	andi	r18, 0xEF	; 239
    46bc:	26 ff       	sbrs	r18, 6
    46be:	16 e0       	ldi	r17, 0x06	; 6
    46c0:	2f 73       	andi	r18, 0x3F	; 63
    46c2:	72 2e       	mov	r7, r18
    46c4:	85 36       	cpi	r24, 0x65	; 101
    46c6:	21 f4       	brne	.+8      	; 0x46d0 <vfprintf+0x10e>
    46c8:	f2 2f       	mov	r31, r18
    46ca:	f0 64       	ori	r31, 0x40	; 64
    46cc:	7f 2e       	mov	r7, r31
    46ce:	08 c0       	rjmp	.+16     	; 0x46e0 <vfprintf+0x11e>
    46d0:	86 36       	cpi	r24, 0x66	; 102
    46d2:	21 f4       	brne	.+8      	; 0x46dc <vfprintf+0x11a>
    46d4:	62 2f       	mov	r22, r18
    46d6:	60 68       	ori	r22, 0x80	; 128
    46d8:	76 2e       	mov	r7, r22
    46da:	02 c0       	rjmp	.+4      	; 0x46e0 <vfprintf+0x11e>
    46dc:	11 11       	cpse	r17, r1
    46de:	11 50       	subi	r17, 0x01	; 1
    46e0:	77 fe       	sbrs	r7, 7
    46e2:	07 c0       	rjmp	.+14     	; 0x46f2 <vfprintf+0x130>
    46e4:	1c 33       	cpi	r17, 0x3C	; 60
    46e6:	48 f4       	brcc	.+18     	; 0x46fa <vfprintf+0x138>
    46e8:	44 24       	eor	r4, r4
    46ea:	43 94       	inc	r4
    46ec:	41 0e       	add	r4, r17
    46ee:	27 e0       	ldi	r18, 0x07	; 7
    46f0:	0b c0       	rjmp	.+22     	; 0x4708 <vfprintf+0x146>
    46f2:	18 30       	cpi	r17, 0x08	; 8
    46f4:	30 f4       	brcc	.+12     	; 0x4702 <vfprintf+0x140>
    46f6:	21 2f       	mov	r18, r17
    46f8:	06 c0       	rjmp	.+12     	; 0x4706 <vfprintf+0x144>
    46fa:	27 e0       	ldi	r18, 0x07	; 7
    46fc:	4c e3       	ldi	r20, 0x3C	; 60
    46fe:	44 2e       	mov	r4, r20
    4700:	03 c0       	rjmp	.+6      	; 0x4708 <vfprintf+0x146>
    4702:	27 e0       	ldi	r18, 0x07	; 7
    4704:	17 e0       	ldi	r17, 0x07	; 7
    4706:	41 2c       	mov	r4, r1
    4708:	56 01       	movw	r10, r12
    470a:	74 e0       	ldi	r23, 0x04	; 4
    470c:	a7 0e       	add	r10, r23
    470e:	b1 1c       	adc	r11, r1
    4710:	f6 01       	movw	r30, r12
    4712:	60 81       	ld	r22, Z
    4714:	71 81       	ldd	r23, Z+1	; 0x01
    4716:	82 81       	ldd	r24, Z+2	; 0x02
    4718:	93 81       	ldd	r25, Z+3	; 0x03
    471a:	04 2d       	mov	r16, r4
    471c:	a4 01       	movw	r20, r8
    471e:	0e 94 99 26 	call	0x4d32	; 0x4d32 <__ftoa_engine>
    4722:	6c 01       	movw	r12, r24
    4724:	09 81       	ldd	r16, Y+1	; 0x01
    4726:	00 ff       	sbrs	r16, 0
    4728:	02 c0       	rjmp	.+4      	; 0x472e <vfprintf+0x16c>
    472a:	03 ff       	sbrs	r16, 3
    472c:	06 c0       	rjmp	.+12     	; 0x473a <vfprintf+0x178>
    472e:	71 fc       	sbrc	r7, 1
    4730:	07 c0       	rjmp	.+14     	; 0x4740 <vfprintf+0x17e>
    4732:	72 fc       	sbrc	r7, 2
    4734:	08 c0       	rjmp	.+16     	; 0x4746 <vfprintf+0x184>
    4736:	61 2c       	mov	r6, r1
    4738:	08 c0       	rjmp	.+16     	; 0x474a <vfprintf+0x188>
    473a:	3d e2       	ldi	r19, 0x2D	; 45
    473c:	63 2e       	mov	r6, r19
    473e:	05 c0       	rjmp	.+10     	; 0x474a <vfprintf+0x188>
    4740:	2b e2       	ldi	r18, 0x2B	; 43
    4742:	62 2e       	mov	r6, r18
    4744:	02 c0       	rjmp	.+4      	; 0x474a <vfprintf+0x188>
    4746:	90 e2       	ldi	r25, 0x20	; 32
    4748:	69 2e       	mov	r6, r25
    474a:	80 2f       	mov	r24, r16
    474c:	8c 70       	andi	r24, 0x0C	; 12
    474e:	99 f1       	breq	.+102    	; 0x47b6 <vfprintf+0x1f4>
    4750:	66 20       	and	r6, r6
    4752:	11 f0       	breq	.+4      	; 0x4758 <vfprintf+0x196>
    4754:	84 e0       	ldi	r24, 0x04	; 4
    4756:	01 c0       	rjmp	.+2      	; 0x475a <vfprintf+0x198>
    4758:	83 e0       	ldi	r24, 0x03	; 3
    475a:	85 15       	cp	r24, r5
    475c:	10 f0       	brcs	.+4      	; 0x4762 <vfprintf+0x1a0>
    475e:	51 2c       	mov	r5, r1
    4760:	0b c0       	rjmp	.+22     	; 0x4778 <vfprintf+0x1b6>
    4762:	58 1a       	sub	r5, r24
    4764:	73 fc       	sbrc	r7, 3
    4766:	08 c0       	rjmp	.+16     	; 0x4778 <vfprintf+0x1b6>
    4768:	b7 01       	movw	r22, r14
    476a:	80 e2       	ldi	r24, 0x20	; 32
    476c:	90 e0       	ldi	r25, 0x00	; 0
    476e:	0e 94 87 27 	call	0x4f0e	; 0x4f0e <fputc>
    4772:	5a 94       	dec	r5
    4774:	c9 f7       	brne	.-14     	; 0x4768 <vfprintf+0x1a6>
    4776:	f3 cf       	rjmp	.-26     	; 0x475e <vfprintf+0x19c>
    4778:	66 20       	and	r6, r6
    477a:	29 f0       	breq	.+10     	; 0x4786 <vfprintf+0x1c4>
    477c:	b7 01       	movw	r22, r14
    477e:	86 2d       	mov	r24, r6
    4780:	90 e0       	ldi	r25, 0x00	; 0
    4782:	0e 94 87 27 	call	0x4f0e	; 0x4f0e <fputc>
    4786:	03 fd       	sbrc	r16, 3
    4788:	03 c0       	rjmp	.+6      	; 0x4790 <vfprintf+0x1ce>
    478a:	02 e2       	ldi	r16, 0x22	; 34
    478c:	14 e0       	ldi	r17, 0x04	; 4
    478e:	02 c0       	rjmp	.+4      	; 0x4794 <vfprintf+0x1d2>
    4790:	0e e1       	ldi	r16, 0x1E	; 30
    4792:	14 e0       	ldi	r17, 0x04	; 4
    4794:	f7 2d       	mov	r31, r7
    4796:	f0 71       	andi	r31, 0x10	; 16
    4798:	7f 2e       	mov	r7, r31
    479a:	f8 01       	movw	r30, r16
    479c:	84 91       	lpm	r24, Z
    479e:	88 23       	and	r24, r24
    47a0:	09 f4       	brne	.+2      	; 0x47a4 <vfprintf+0x1e2>
    47a2:	76 c2       	rjmp	.+1260   	; 0x4c90 <vfprintf+0x6ce>
    47a4:	71 10       	cpse	r7, r1
    47a6:	80 52       	subi	r24, 0x20	; 32
    47a8:	b7 01       	movw	r22, r14
    47aa:	90 e0       	ldi	r25, 0x00	; 0
    47ac:	0e 94 87 27 	call	0x4f0e	; 0x4f0e <fputc>
    47b0:	0f 5f       	subi	r16, 0xFF	; 255
    47b2:	1f 4f       	sbci	r17, 0xFF	; 255
    47b4:	f2 cf       	rjmp	.-28     	; 0x479a <vfprintf+0x1d8>
    47b6:	77 fe       	sbrs	r7, 7
    47b8:	0f c0       	rjmp	.+30     	; 0x47d8 <vfprintf+0x216>
    47ba:	4c 0c       	add	r4, r12
    47bc:	04 ff       	sbrs	r16, 4
    47be:	04 c0       	rjmp	.+8      	; 0x47c8 <vfprintf+0x206>
    47c0:	8a 81       	ldd	r24, Y+2	; 0x02
    47c2:	81 33       	cpi	r24, 0x31	; 49
    47c4:	09 f4       	brne	.+2      	; 0x47c8 <vfprintf+0x206>
    47c6:	4a 94       	dec	r4
    47c8:	14 14       	cp	r1, r4
    47ca:	74 f5       	brge	.+92     	; 0x4828 <vfprintf+0x266>
    47cc:	f8 e0       	ldi	r31, 0x08	; 8
    47ce:	f4 15       	cp	r31, r4
    47d0:	78 f5       	brcc	.+94     	; 0x4830 <vfprintf+0x26e>
    47d2:	88 e0       	ldi	r24, 0x08	; 8
    47d4:	48 2e       	mov	r4, r24
    47d6:	2c c0       	rjmp	.+88     	; 0x4830 <vfprintf+0x26e>
    47d8:	76 fc       	sbrc	r7, 6
    47da:	2a c0       	rjmp	.+84     	; 0x4830 <vfprintf+0x26e>
    47dc:	81 2f       	mov	r24, r17
    47de:	90 e0       	ldi	r25, 0x00	; 0
    47e0:	8c 15       	cp	r24, r12
    47e2:	9d 05       	cpc	r25, r13
    47e4:	9c f0       	brlt	.+38     	; 0x480c <vfprintf+0x24a>
    47e6:	6c ef       	ldi	r22, 0xFC	; 252
    47e8:	c6 16       	cp	r12, r22
    47ea:	6f ef       	ldi	r22, 0xFF	; 255
    47ec:	d6 06       	cpc	r13, r22
    47ee:	74 f0       	brlt	.+28     	; 0x480c <vfprintf+0x24a>
    47f0:	77 2d       	mov	r23, r7
    47f2:	70 68       	ori	r23, 0x80	; 128
    47f4:	77 2e       	mov	r7, r23
    47f6:	0a c0       	rjmp	.+20     	; 0x480c <vfprintf+0x24a>
    47f8:	e2 e0       	ldi	r30, 0x02	; 2
    47fa:	f0 e0       	ldi	r31, 0x00	; 0
    47fc:	ec 0f       	add	r30, r28
    47fe:	fd 1f       	adc	r31, r29
    4800:	e1 0f       	add	r30, r17
    4802:	f1 1d       	adc	r31, r1
    4804:	80 81       	ld	r24, Z
    4806:	80 33       	cpi	r24, 0x30	; 48
    4808:	19 f4       	brne	.+6      	; 0x4810 <vfprintf+0x24e>
    480a:	11 50       	subi	r17, 0x01	; 1
    480c:	11 11       	cpse	r17, r1
    480e:	f4 cf       	rjmp	.-24     	; 0x47f8 <vfprintf+0x236>
    4810:	77 fe       	sbrs	r7, 7
    4812:	0e c0       	rjmp	.+28     	; 0x4830 <vfprintf+0x26e>
    4814:	44 24       	eor	r4, r4
    4816:	43 94       	inc	r4
    4818:	41 0e       	add	r4, r17
    481a:	81 2f       	mov	r24, r17
    481c:	90 e0       	ldi	r25, 0x00	; 0
    481e:	c8 16       	cp	r12, r24
    4820:	d9 06       	cpc	r13, r25
    4822:	2c f4       	brge	.+10     	; 0x482e <vfprintf+0x26c>
    4824:	1c 19       	sub	r17, r12
    4826:	04 c0       	rjmp	.+8      	; 0x4830 <vfprintf+0x26e>
    4828:	44 24       	eor	r4, r4
    482a:	43 94       	inc	r4
    482c:	01 c0       	rjmp	.+2      	; 0x4830 <vfprintf+0x26e>
    482e:	10 e0       	ldi	r17, 0x00	; 0
    4830:	77 fe       	sbrs	r7, 7
    4832:	07 c0       	rjmp	.+14     	; 0x4842 <vfprintf+0x280>
    4834:	1c 14       	cp	r1, r12
    4836:	1d 04       	cpc	r1, r13
    4838:	3c f4       	brge	.+14     	; 0x4848 <vfprintf+0x286>
    483a:	96 01       	movw	r18, r12
    483c:	2f 5f       	subi	r18, 0xFF	; 255
    483e:	3f 4f       	sbci	r19, 0xFF	; 255
    4840:	05 c0       	rjmp	.+10     	; 0x484c <vfprintf+0x28a>
    4842:	25 e0       	ldi	r18, 0x05	; 5
    4844:	30 e0       	ldi	r19, 0x00	; 0
    4846:	02 c0       	rjmp	.+4      	; 0x484c <vfprintf+0x28a>
    4848:	21 e0       	ldi	r18, 0x01	; 1
    484a:	30 e0       	ldi	r19, 0x00	; 0
    484c:	66 20       	and	r6, r6
    484e:	11 f0       	breq	.+4      	; 0x4854 <vfprintf+0x292>
    4850:	2f 5f       	subi	r18, 0xFF	; 255
    4852:	3f 4f       	sbci	r19, 0xFF	; 255
    4854:	11 23       	and	r17, r17
    4856:	31 f0       	breq	.+12     	; 0x4864 <vfprintf+0x2a2>
    4858:	41 2f       	mov	r20, r17
    485a:	50 e0       	ldi	r21, 0x00	; 0
    485c:	4f 5f       	subi	r20, 0xFF	; 255
    485e:	5f 4f       	sbci	r21, 0xFF	; 255
    4860:	24 0f       	add	r18, r20
    4862:	35 1f       	adc	r19, r21
    4864:	45 2d       	mov	r20, r5
    4866:	50 e0       	ldi	r21, 0x00	; 0
    4868:	24 17       	cp	r18, r20
    486a:	35 07       	cpc	r19, r21
    486c:	14 f4       	brge	.+4      	; 0x4872 <vfprintf+0x2b0>
    486e:	52 1a       	sub	r5, r18
    4870:	01 c0       	rjmp	.+2      	; 0x4874 <vfprintf+0x2b2>
    4872:	51 2c       	mov	r5, r1
    4874:	87 2d       	mov	r24, r7
    4876:	89 70       	andi	r24, 0x09	; 9
    4878:	49 f4       	brne	.+18     	; 0x488c <vfprintf+0x2ca>
    487a:	55 20       	and	r5, r5
    487c:	39 f0       	breq	.+14     	; 0x488c <vfprintf+0x2ca>
    487e:	b7 01       	movw	r22, r14
    4880:	80 e2       	ldi	r24, 0x20	; 32
    4882:	90 e0       	ldi	r25, 0x00	; 0
    4884:	0e 94 87 27 	call	0x4f0e	; 0x4f0e <fputc>
    4888:	5a 94       	dec	r5
    488a:	f7 cf       	rjmp	.-18     	; 0x487a <vfprintf+0x2b8>
    488c:	66 20       	and	r6, r6
    488e:	29 f0       	breq	.+10     	; 0x489a <vfprintf+0x2d8>
    4890:	b7 01       	movw	r22, r14
    4892:	86 2d       	mov	r24, r6
    4894:	90 e0       	ldi	r25, 0x00	; 0
    4896:	0e 94 87 27 	call	0x4f0e	; 0x4f0e <fputc>
    489a:	73 fc       	sbrc	r7, 3
    489c:	09 c0       	rjmp	.+18     	; 0x48b0 <vfprintf+0x2ee>
    489e:	55 20       	and	r5, r5
    48a0:	39 f0       	breq	.+14     	; 0x48b0 <vfprintf+0x2ee>
    48a2:	b7 01       	movw	r22, r14
    48a4:	80 e3       	ldi	r24, 0x30	; 48
    48a6:	90 e0       	ldi	r25, 0x00	; 0
    48a8:	0e 94 87 27 	call	0x4f0e	; 0x4f0e <fputc>
    48ac:	5a 94       	dec	r5
    48ae:	f7 cf       	rjmp	.-18     	; 0x489e <vfprintf+0x2dc>
    48b0:	77 fe       	sbrs	r7, 7
    48b2:	5f c0       	rjmp	.+190    	; 0x4972 <vfprintf+0x3b0>
    48b4:	9c 2d       	mov	r25, r12
    48b6:	8d 2d       	mov	r24, r13
    48b8:	d7 fe       	sbrs	r13, 7
    48ba:	02 c0       	rjmp	.+4      	; 0x48c0 <vfprintf+0x2fe>
    48bc:	90 e0       	ldi	r25, 0x00	; 0
    48be:	80 e0       	ldi	r24, 0x00	; 0
    48c0:	69 2e       	mov	r6, r25
    48c2:	78 2e       	mov	r7, r24
    48c4:	40 e0       	ldi	r20, 0x00	; 0
    48c6:	50 e0       	ldi	r21, 0x00	; 0
    48c8:	c6 01       	movw	r24, r12
    48ca:	84 19       	sub	r24, r4
    48cc:	91 09       	sbc	r25, r1
    48ce:	9d 87       	std	Y+13, r25	; 0x0d
    48d0:	8c 87       	std	Y+12, r24	; 0x0c
    48d2:	96 01       	movw	r18, r12
    48d4:	26 19       	sub	r18, r6
    48d6:	37 09       	sbc	r19, r7
    48d8:	28 0d       	add	r18, r8
    48da:	39 1d       	adc	r19, r9
    48dc:	81 2f       	mov	r24, r17
    48de:	90 e0       	ldi	r25, 0x00	; 0
    48e0:	ee 27       	eor	r30, r30
    48e2:	ff 27       	eor	r31, r31
    48e4:	e8 1b       	sub	r30, r24
    48e6:	f9 0b       	sbc	r31, r25
    48e8:	ff 87       	std	Y+15, r31	; 0x0f
    48ea:	ee 87       	std	Y+14, r30	; 0x0e
    48ec:	ff ef       	ldi	r31, 0xFF	; 255
    48ee:	6f 16       	cp	r6, r31
    48f0:	7f 06       	cpc	r7, r31
    48f2:	69 f4       	brne	.+26     	; 0x490e <vfprintf+0x34c>
    48f4:	b7 01       	movw	r22, r14
    48f6:	8e e2       	ldi	r24, 0x2E	; 46
    48f8:	90 e0       	ldi	r25, 0x00	; 0
    48fa:	2b 8b       	std	Y+19, r18	; 0x13
    48fc:	3a 8b       	std	Y+18, r19	; 0x12
    48fe:	48 8b       	std	Y+16, r20	; 0x10
    4900:	59 8b       	std	Y+17, r21	; 0x11
    4902:	0e 94 87 27 	call	0x4f0e	; 0x4f0e <fputc>
    4906:	59 89       	ldd	r21, Y+17	; 0x11
    4908:	48 89       	ldd	r20, Y+16	; 0x10
    490a:	3a 89       	ldd	r19, Y+18	; 0x12
    490c:	2b 89       	ldd	r18, Y+19	; 0x13
    490e:	c6 14       	cp	r12, r6
    4910:	d7 04       	cpc	r13, r7
    4912:	54 f0       	brlt	.+20     	; 0x4928 <vfprintf+0x366>
    4914:	6c 85       	ldd	r22, Y+12	; 0x0c
    4916:	7d 85       	ldd	r23, Y+13	; 0x0d
    4918:	66 15       	cp	r22, r6
    491a:	77 05       	cpc	r23, r7
    491c:	2c f4       	brge	.+10     	; 0x4928 <vfprintf+0x366>
    491e:	f9 01       	movw	r30, r18
    4920:	e4 0f       	add	r30, r20
    4922:	f5 1f       	adc	r31, r21
    4924:	81 81       	ldd	r24, Z+1	; 0x01
    4926:	01 c0       	rjmp	.+2      	; 0x492a <vfprintf+0x368>
    4928:	80 e3       	ldi	r24, 0x30	; 48
    492a:	71 e0       	ldi	r23, 0x01	; 1
    492c:	67 1a       	sub	r6, r23
    492e:	71 08       	sbc	r7, r1
    4930:	4f 5f       	subi	r20, 0xFF	; 255
    4932:	5f 4f       	sbci	r21, 0xFF	; 255
    4934:	ee 85       	ldd	r30, Y+14	; 0x0e
    4936:	ff 85       	ldd	r31, Y+15	; 0x0f
    4938:	6e 16       	cp	r6, r30
    493a:	7f 06       	cpc	r7, r31
    493c:	6c f0       	brlt	.+26     	; 0x4958 <vfprintf+0x396>
    493e:	b7 01       	movw	r22, r14
    4940:	90 e0       	ldi	r25, 0x00	; 0
    4942:	2b 8b       	std	Y+19, r18	; 0x13
    4944:	3a 8b       	std	Y+18, r19	; 0x12
    4946:	48 8b       	std	Y+16, r20	; 0x10
    4948:	59 8b       	std	Y+17, r21	; 0x11
    494a:	0e 94 87 27 	call	0x4f0e	; 0x4f0e <fputc>
    494e:	2b 89       	ldd	r18, Y+19	; 0x13
    4950:	3a 89       	ldd	r19, Y+18	; 0x12
    4952:	48 89       	ldd	r20, Y+16	; 0x10
    4954:	59 89       	ldd	r21, Y+17	; 0x11
    4956:	ca cf       	rjmp	.-108    	; 0x48ec <vfprintf+0x32a>
    4958:	6c 14       	cp	r6, r12
    495a:	7d 04       	cpc	r7, r13
    495c:	39 f4       	brne	.+14     	; 0x496c <vfprintf+0x3aa>
    495e:	9a 81       	ldd	r25, Y+2	; 0x02
    4960:	96 33       	cpi	r25, 0x36	; 54
    4962:	18 f4       	brcc	.+6      	; 0x496a <vfprintf+0x3a8>
    4964:	95 33       	cpi	r25, 0x35	; 53
    4966:	11 f4       	brne	.+4      	; 0x496c <vfprintf+0x3aa>
    4968:	04 ff       	sbrs	r16, 4
    496a:	81 e3       	ldi	r24, 0x31	; 49
    496c:	b7 01       	movw	r22, r14
    496e:	90 e0       	ldi	r25, 0x00	; 0
    4970:	4b c0       	rjmp	.+150    	; 0x4a08 <vfprintf+0x446>
    4972:	8a 81       	ldd	r24, Y+2	; 0x02
    4974:	81 33       	cpi	r24, 0x31	; 49
    4976:	09 f0       	breq	.+2      	; 0x497a <vfprintf+0x3b8>
    4978:	0f 7e       	andi	r16, 0xEF	; 239
    497a:	b7 01       	movw	r22, r14
    497c:	90 e0       	ldi	r25, 0x00	; 0
    497e:	0e 94 87 27 	call	0x4f0e	; 0x4f0e <fputc>
    4982:	11 11       	cpse	r17, r1
    4984:	05 c0       	rjmp	.+10     	; 0x4990 <vfprintf+0x3ce>
    4986:	74 fe       	sbrs	r7, 4
    4988:	18 c0       	rjmp	.+48     	; 0x49ba <vfprintf+0x3f8>
    498a:	85 e4       	ldi	r24, 0x45	; 69
    498c:	90 e0       	ldi	r25, 0x00	; 0
    498e:	17 c0       	rjmp	.+46     	; 0x49be <vfprintf+0x3fc>
    4990:	b7 01       	movw	r22, r14
    4992:	8e e2       	ldi	r24, 0x2E	; 46
    4994:	90 e0       	ldi	r25, 0x00	; 0
    4996:	0e 94 87 27 	call	0x4f0e	; 0x4f0e <fputc>
    499a:	82 e0       	ldi	r24, 0x02	; 2
    499c:	66 24       	eor	r6, r6
    499e:	63 94       	inc	r6
    49a0:	68 0e       	add	r6, r24
    49a2:	f4 01       	movw	r30, r8
    49a4:	e8 0f       	add	r30, r24
    49a6:	f1 1d       	adc	r31, r1
    49a8:	80 81       	ld	r24, Z
    49aa:	b7 01       	movw	r22, r14
    49ac:	90 e0       	ldi	r25, 0x00	; 0
    49ae:	0e 94 87 27 	call	0x4f0e	; 0x4f0e <fputc>
    49b2:	11 50       	subi	r17, 0x01	; 1
    49b4:	41 f3       	breq	.-48     	; 0x4986 <vfprintf+0x3c4>
    49b6:	86 2d       	mov	r24, r6
    49b8:	f1 cf       	rjmp	.-30     	; 0x499c <vfprintf+0x3da>
    49ba:	85 e6       	ldi	r24, 0x65	; 101
    49bc:	90 e0       	ldi	r25, 0x00	; 0
    49be:	b7 01       	movw	r22, r14
    49c0:	0e 94 87 27 	call	0x4f0e	; 0x4f0e <fputc>
    49c4:	d7 fc       	sbrc	r13, 7
    49c6:	05 c0       	rjmp	.+10     	; 0x49d2 <vfprintf+0x410>
    49c8:	c1 14       	cp	r12, r1
    49ca:	d1 04       	cpc	r13, r1
    49cc:	39 f4       	brne	.+14     	; 0x49dc <vfprintf+0x41a>
    49ce:	04 ff       	sbrs	r16, 4
    49d0:	05 c0       	rjmp	.+10     	; 0x49dc <vfprintf+0x41a>
    49d2:	d1 94       	neg	r13
    49d4:	c1 94       	neg	r12
    49d6:	d1 08       	sbc	r13, r1
    49d8:	8d e2       	ldi	r24, 0x2D	; 45
    49da:	01 c0       	rjmp	.+2      	; 0x49de <vfprintf+0x41c>
    49dc:	8b e2       	ldi	r24, 0x2B	; 43
    49de:	b7 01       	movw	r22, r14
    49e0:	90 e0       	ldi	r25, 0x00	; 0
    49e2:	0e 94 87 27 	call	0x4f0e	; 0x4f0e <fputc>
    49e6:	80 e3       	ldi	r24, 0x30	; 48
    49e8:	6a e0       	ldi	r22, 0x0A	; 10
    49ea:	c6 16       	cp	r12, r22
    49ec:	d1 04       	cpc	r13, r1
    49ee:	2c f0       	brlt	.+10     	; 0x49fa <vfprintf+0x438>
    49f0:	8f 5f       	subi	r24, 0xFF	; 255
    49f2:	fa e0       	ldi	r31, 0x0A	; 10
    49f4:	cf 1a       	sub	r12, r31
    49f6:	d1 08       	sbc	r13, r1
    49f8:	f7 cf       	rjmp	.-18     	; 0x49e8 <vfprintf+0x426>
    49fa:	b7 01       	movw	r22, r14
    49fc:	90 e0       	ldi	r25, 0x00	; 0
    49fe:	0e 94 87 27 	call	0x4f0e	; 0x4f0e <fputc>
    4a02:	b7 01       	movw	r22, r14
    4a04:	c6 01       	movw	r24, r12
    4a06:	c0 96       	adiw	r24, 0x30	; 48
    4a08:	0e 94 87 27 	call	0x4f0e	; 0x4f0e <fputc>
    4a0c:	41 c1       	rjmp	.+642    	; 0x4c90 <vfprintf+0x6ce>
    4a0e:	83 36       	cpi	r24, 0x63	; 99
    4a10:	31 f0       	breq	.+12     	; 0x4a1e <vfprintf+0x45c>
    4a12:	83 37       	cpi	r24, 0x73	; 115
    4a14:	79 f0       	breq	.+30     	; 0x4a34 <vfprintf+0x472>
    4a16:	83 35       	cpi	r24, 0x53	; 83
    4a18:	09 f0       	breq	.+2      	; 0x4a1c <vfprintf+0x45a>
    4a1a:	58 c0       	rjmp	.+176    	; 0x4acc <vfprintf+0x50a>
    4a1c:	21 c0       	rjmp	.+66     	; 0x4a60 <vfprintf+0x49e>
    4a1e:	56 01       	movw	r10, r12
    4a20:	72 e0       	ldi	r23, 0x02	; 2
    4a22:	a7 0e       	add	r10, r23
    4a24:	b1 1c       	adc	r11, r1
    4a26:	f6 01       	movw	r30, r12
    4a28:	80 81       	ld	r24, Z
    4a2a:	89 83       	std	Y+1, r24	; 0x01
    4a2c:	01 e0       	ldi	r16, 0x01	; 1
    4a2e:	10 e0       	ldi	r17, 0x00	; 0
    4a30:	64 01       	movw	r12, r8
    4a32:	14 c0       	rjmp	.+40     	; 0x4a5c <vfprintf+0x49a>
    4a34:	56 01       	movw	r10, r12
    4a36:	f2 e0       	ldi	r31, 0x02	; 2
    4a38:	af 0e       	add	r10, r31
    4a3a:	b1 1c       	adc	r11, r1
    4a3c:	f6 01       	movw	r30, r12
    4a3e:	c0 80       	ld	r12, Z
    4a40:	d1 80       	ldd	r13, Z+1	; 0x01
    4a42:	26 ff       	sbrs	r18, 6
    4a44:	03 c0       	rjmp	.+6      	; 0x4a4c <vfprintf+0x48a>
    4a46:	61 2f       	mov	r22, r17
    4a48:	70 e0       	ldi	r23, 0x00	; 0
    4a4a:	02 c0       	rjmp	.+4      	; 0x4a50 <vfprintf+0x48e>
    4a4c:	6f ef       	ldi	r22, 0xFF	; 255
    4a4e:	7f ef       	ldi	r23, 0xFF	; 255
    4a50:	c6 01       	movw	r24, r12
    4a52:	2b 8b       	std	Y+19, r18	; 0x13
    4a54:	0e 94 7c 27 	call	0x4ef8	; 0x4ef8 <strnlen>
    4a58:	8c 01       	movw	r16, r24
    4a5a:	2b 89       	ldd	r18, Y+19	; 0x13
    4a5c:	2f 77       	andi	r18, 0x7F	; 127
    4a5e:	15 c0       	rjmp	.+42     	; 0x4a8a <vfprintf+0x4c8>
    4a60:	56 01       	movw	r10, r12
    4a62:	f2 e0       	ldi	r31, 0x02	; 2
    4a64:	af 0e       	add	r10, r31
    4a66:	b1 1c       	adc	r11, r1
    4a68:	f6 01       	movw	r30, r12
    4a6a:	c0 80       	ld	r12, Z
    4a6c:	d1 80       	ldd	r13, Z+1	; 0x01
    4a6e:	26 ff       	sbrs	r18, 6
    4a70:	03 c0       	rjmp	.+6      	; 0x4a78 <vfprintf+0x4b6>
    4a72:	61 2f       	mov	r22, r17
    4a74:	70 e0       	ldi	r23, 0x00	; 0
    4a76:	02 c0       	rjmp	.+4      	; 0x4a7c <vfprintf+0x4ba>
    4a78:	6f ef       	ldi	r22, 0xFF	; 255
    4a7a:	7f ef       	ldi	r23, 0xFF	; 255
    4a7c:	c6 01       	movw	r24, r12
    4a7e:	2b 8b       	std	Y+19, r18	; 0x13
    4a80:	0e 94 71 27 	call	0x4ee2	; 0x4ee2 <strnlen_P>
    4a84:	8c 01       	movw	r16, r24
    4a86:	2b 89       	ldd	r18, Y+19	; 0x13
    4a88:	20 68       	ori	r18, 0x80	; 128
    4a8a:	72 2e       	mov	r7, r18
    4a8c:	23 fd       	sbrc	r18, 3
    4a8e:	1a c0       	rjmp	.+52     	; 0x4ac4 <vfprintf+0x502>
    4a90:	85 2d       	mov	r24, r5
    4a92:	90 e0       	ldi	r25, 0x00	; 0
    4a94:	08 17       	cp	r16, r24
    4a96:	19 07       	cpc	r17, r25
    4a98:	a8 f4       	brcc	.+42     	; 0x4ac4 <vfprintf+0x502>
    4a9a:	b7 01       	movw	r22, r14
    4a9c:	80 e2       	ldi	r24, 0x20	; 32
    4a9e:	90 e0       	ldi	r25, 0x00	; 0
    4aa0:	0e 94 87 27 	call	0x4f0e	; 0x4f0e <fputc>
    4aa4:	5a 94       	dec	r5
    4aa6:	f4 cf       	rjmp	.-24     	; 0x4a90 <vfprintf+0x4ce>
    4aa8:	f6 01       	movw	r30, r12
    4aaa:	77 fc       	sbrc	r7, 7
    4aac:	85 91       	lpm	r24, Z+
    4aae:	77 fe       	sbrs	r7, 7
    4ab0:	81 91       	ld	r24, Z+
    4ab2:	6f 01       	movw	r12, r30
    4ab4:	b7 01       	movw	r22, r14
    4ab6:	90 e0       	ldi	r25, 0x00	; 0
    4ab8:	0e 94 87 27 	call	0x4f0e	; 0x4f0e <fputc>
    4abc:	51 10       	cpse	r5, r1
    4abe:	5a 94       	dec	r5
    4ac0:	01 50       	subi	r16, 0x01	; 1
    4ac2:	11 09       	sbc	r17, r1
    4ac4:	01 15       	cp	r16, r1
    4ac6:	11 05       	cpc	r17, r1
    4ac8:	79 f7       	brne	.-34     	; 0x4aa8 <vfprintf+0x4e6>
    4aca:	e2 c0       	rjmp	.+452    	; 0x4c90 <vfprintf+0x6ce>
    4acc:	84 36       	cpi	r24, 0x64	; 100
    4ace:	11 f0       	breq	.+4      	; 0x4ad4 <vfprintf+0x512>
    4ad0:	89 36       	cpi	r24, 0x69	; 105
    4ad2:	51 f5       	brne	.+84     	; 0x4b28 <vfprintf+0x566>
    4ad4:	56 01       	movw	r10, r12
    4ad6:	27 ff       	sbrs	r18, 7
    4ad8:	09 c0       	rjmp	.+18     	; 0x4aec <vfprintf+0x52a>
    4ada:	f4 e0       	ldi	r31, 0x04	; 4
    4adc:	af 0e       	add	r10, r31
    4ade:	b1 1c       	adc	r11, r1
    4ae0:	f6 01       	movw	r30, r12
    4ae2:	60 81       	ld	r22, Z
    4ae4:	71 81       	ldd	r23, Z+1	; 0x01
    4ae6:	82 81       	ldd	r24, Z+2	; 0x02
    4ae8:	93 81       	ldd	r25, Z+3	; 0x03
    4aea:	0a c0       	rjmp	.+20     	; 0x4b00 <vfprintf+0x53e>
    4aec:	f2 e0       	ldi	r31, 0x02	; 2
    4aee:	af 0e       	add	r10, r31
    4af0:	b1 1c       	adc	r11, r1
    4af2:	f6 01       	movw	r30, r12
    4af4:	60 81       	ld	r22, Z
    4af6:	71 81       	ldd	r23, Z+1	; 0x01
    4af8:	88 27       	eor	r24, r24
    4afa:	77 fd       	sbrc	r23, 7
    4afc:	80 95       	com	r24
    4afe:	98 2f       	mov	r25, r24
    4b00:	02 2f       	mov	r16, r18
    4b02:	0f 76       	andi	r16, 0x6F	; 111
    4b04:	97 ff       	sbrs	r25, 7
    4b06:	08 c0       	rjmp	.+16     	; 0x4b18 <vfprintf+0x556>
    4b08:	90 95       	com	r25
    4b0a:	80 95       	com	r24
    4b0c:	70 95       	com	r23
    4b0e:	61 95       	neg	r22
    4b10:	7f 4f       	sbci	r23, 0xFF	; 255
    4b12:	8f 4f       	sbci	r24, 0xFF	; 255
    4b14:	9f 4f       	sbci	r25, 0xFF	; 255
    4b16:	00 68       	ori	r16, 0x80	; 128
    4b18:	2a e0       	ldi	r18, 0x0A	; 10
    4b1a:	30 e0       	ldi	r19, 0x00	; 0
    4b1c:	a4 01       	movw	r20, r8
    4b1e:	0e 94 db 27 	call	0x4fb6	; 0x4fb6 <__ultoa_invert>
    4b22:	c8 2e       	mov	r12, r24
    4b24:	c8 18       	sub	r12, r8
    4b26:	3e c0       	rjmp	.+124    	; 0x4ba4 <vfprintf+0x5e2>
    4b28:	02 2f       	mov	r16, r18
    4b2a:	85 37       	cpi	r24, 0x75	; 117
    4b2c:	21 f4       	brne	.+8      	; 0x4b36 <vfprintf+0x574>
    4b2e:	0f 7e       	andi	r16, 0xEF	; 239
    4b30:	2a e0       	ldi	r18, 0x0A	; 10
    4b32:	30 e0       	ldi	r19, 0x00	; 0
    4b34:	1d c0       	rjmp	.+58     	; 0x4b70 <vfprintf+0x5ae>
    4b36:	09 7f       	andi	r16, 0xF9	; 249
    4b38:	8f 36       	cpi	r24, 0x6F	; 111
    4b3a:	91 f0       	breq	.+36     	; 0x4b60 <vfprintf+0x59e>
    4b3c:	18 f4       	brcc	.+6      	; 0x4b44 <vfprintf+0x582>
    4b3e:	88 35       	cpi	r24, 0x58	; 88
    4b40:	59 f0       	breq	.+22     	; 0x4b58 <vfprintf+0x596>
    4b42:	b0 c0       	rjmp	.+352    	; 0x4ca4 <vfprintf+0x6e2>
    4b44:	80 37       	cpi	r24, 0x70	; 112
    4b46:	19 f0       	breq	.+6      	; 0x4b4e <vfprintf+0x58c>
    4b48:	88 37       	cpi	r24, 0x78	; 120
    4b4a:	11 f0       	breq	.+4      	; 0x4b50 <vfprintf+0x58e>
    4b4c:	ab c0       	rjmp	.+342    	; 0x4ca4 <vfprintf+0x6e2>
    4b4e:	00 61       	ori	r16, 0x10	; 16
    4b50:	04 ff       	sbrs	r16, 4
    4b52:	09 c0       	rjmp	.+18     	; 0x4b66 <vfprintf+0x5a4>
    4b54:	04 60       	ori	r16, 0x04	; 4
    4b56:	07 c0       	rjmp	.+14     	; 0x4b66 <vfprintf+0x5a4>
    4b58:	24 ff       	sbrs	r18, 4
    4b5a:	08 c0       	rjmp	.+16     	; 0x4b6c <vfprintf+0x5aa>
    4b5c:	06 60       	ori	r16, 0x06	; 6
    4b5e:	06 c0       	rjmp	.+12     	; 0x4b6c <vfprintf+0x5aa>
    4b60:	28 e0       	ldi	r18, 0x08	; 8
    4b62:	30 e0       	ldi	r19, 0x00	; 0
    4b64:	05 c0       	rjmp	.+10     	; 0x4b70 <vfprintf+0x5ae>
    4b66:	20 e1       	ldi	r18, 0x10	; 16
    4b68:	30 e0       	ldi	r19, 0x00	; 0
    4b6a:	02 c0       	rjmp	.+4      	; 0x4b70 <vfprintf+0x5ae>
    4b6c:	20 e1       	ldi	r18, 0x10	; 16
    4b6e:	32 e0       	ldi	r19, 0x02	; 2
    4b70:	56 01       	movw	r10, r12
    4b72:	07 ff       	sbrs	r16, 7
    4b74:	09 c0       	rjmp	.+18     	; 0x4b88 <vfprintf+0x5c6>
    4b76:	f4 e0       	ldi	r31, 0x04	; 4
    4b78:	af 0e       	add	r10, r31
    4b7a:	b1 1c       	adc	r11, r1
    4b7c:	f6 01       	movw	r30, r12
    4b7e:	60 81       	ld	r22, Z
    4b80:	71 81       	ldd	r23, Z+1	; 0x01
    4b82:	82 81       	ldd	r24, Z+2	; 0x02
    4b84:	93 81       	ldd	r25, Z+3	; 0x03
    4b86:	08 c0       	rjmp	.+16     	; 0x4b98 <vfprintf+0x5d6>
    4b88:	f2 e0       	ldi	r31, 0x02	; 2
    4b8a:	af 0e       	add	r10, r31
    4b8c:	b1 1c       	adc	r11, r1
    4b8e:	f6 01       	movw	r30, r12
    4b90:	60 81       	ld	r22, Z
    4b92:	71 81       	ldd	r23, Z+1	; 0x01
    4b94:	80 e0       	ldi	r24, 0x00	; 0
    4b96:	90 e0       	ldi	r25, 0x00	; 0
    4b98:	a4 01       	movw	r20, r8
    4b9a:	0e 94 db 27 	call	0x4fb6	; 0x4fb6 <__ultoa_invert>
    4b9e:	c8 2e       	mov	r12, r24
    4ba0:	c8 18       	sub	r12, r8
    4ba2:	0f 77       	andi	r16, 0x7F	; 127
    4ba4:	06 ff       	sbrs	r16, 6
    4ba6:	0b c0       	rjmp	.+22     	; 0x4bbe <vfprintf+0x5fc>
    4ba8:	20 2f       	mov	r18, r16
    4baa:	2e 7f       	andi	r18, 0xFE	; 254
    4bac:	c1 16       	cp	r12, r17
    4bae:	50 f4       	brcc	.+20     	; 0x4bc4 <vfprintf+0x602>
    4bb0:	04 ff       	sbrs	r16, 4
    4bb2:	0a c0       	rjmp	.+20     	; 0x4bc8 <vfprintf+0x606>
    4bb4:	02 fd       	sbrc	r16, 2
    4bb6:	08 c0       	rjmp	.+16     	; 0x4bc8 <vfprintf+0x606>
    4bb8:	20 2f       	mov	r18, r16
    4bba:	2e 7e       	andi	r18, 0xEE	; 238
    4bbc:	05 c0       	rjmp	.+10     	; 0x4bc8 <vfprintf+0x606>
    4bbe:	dc 2c       	mov	r13, r12
    4bc0:	20 2f       	mov	r18, r16
    4bc2:	03 c0       	rjmp	.+6      	; 0x4bca <vfprintf+0x608>
    4bc4:	dc 2c       	mov	r13, r12
    4bc6:	01 c0       	rjmp	.+2      	; 0x4bca <vfprintf+0x608>
    4bc8:	d1 2e       	mov	r13, r17
    4bca:	24 ff       	sbrs	r18, 4
    4bcc:	0d c0       	rjmp	.+26     	; 0x4be8 <vfprintf+0x626>
    4bce:	fe 01       	movw	r30, r28
    4bd0:	ec 0d       	add	r30, r12
    4bd2:	f1 1d       	adc	r31, r1
    4bd4:	80 81       	ld	r24, Z
    4bd6:	80 33       	cpi	r24, 0x30	; 48
    4bd8:	11 f4       	brne	.+4      	; 0x4bde <vfprintf+0x61c>
    4bda:	29 7e       	andi	r18, 0xE9	; 233
    4bdc:	09 c0       	rjmp	.+18     	; 0x4bf0 <vfprintf+0x62e>
    4bde:	22 ff       	sbrs	r18, 2
    4be0:	06 c0       	rjmp	.+12     	; 0x4bee <vfprintf+0x62c>
    4be2:	d3 94       	inc	r13
    4be4:	d3 94       	inc	r13
    4be6:	04 c0       	rjmp	.+8      	; 0x4bf0 <vfprintf+0x62e>
    4be8:	82 2f       	mov	r24, r18
    4bea:	86 78       	andi	r24, 0x86	; 134
    4bec:	09 f0       	breq	.+2      	; 0x4bf0 <vfprintf+0x62e>
    4bee:	d3 94       	inc	r13
    4bf0:	23 fd       	sbrc	r18, 3
    4bf2:	13 c0       	rjmp	.+38     	; 0x4c1a <vfprintf+0x658>
    4bf4:	20 ff       	sbrs	r18, 0
    4bf6:	06 c0       	rjmp	.+12     	; 0x4c04 <vfprintf+0x642>
    4bf8:	1c 2d       	mov	r17, r12
    4bfa:	d5 14       	cp	r13, r5
    4bfc:	18 f4       	brcc	.+6      	; 0x4c04 <vfprintf+0x642>
    4bfe:	15 0d       	add	r17, r5
    4c00:	1d 19       	sub	r17, r13
    4c02:	d5 2c       	mov	r13, r5
    4c04:	d5 14       	cp	r13, r5
    4c06:	68 f4       	brcc	.+26     	; 0x4c22 <vfprintf+0x660>
    4c08:	b7 01       	movw	r22, r14
    4c0a:	80 e2       	ldi	r24, 0x20	; 32
    4c0c:	90 e0       	ldi	r25, 0x00	; 0
    4c0e:	2b 8b       	std	Y+19, r18	; 0x13
    4c10:	0e 94 87 27 	call	0x4f0e	; 0x4f0e <fputc>
    4c14:	d3 94       	inc	r13
    4c16:	2b 89       	ldd	r18, Y+19	; 0x13
    4c18:	f5 cf       	rjmp	.-22     	; 0x4c04 <vfprintf+0x642>
    4c1a:	d5 14       	cp	r13, r5
    4c1c:	10 f4       	brcc	.+4      	; 0x4c22 <vfprintf+0x660>
    4c1e:	5d 18       	sub	r5, r13
    4c20:	01 c0       	rjmp	.+2      	; 0x4c24 <vfprintf+0x662>
    4c22:	51 2c       	mov	r5, r1
    4c24:	24 ff       	sbrs	r18, 4
    4c26:	12 c0       	rjmp	.+36     	; 0x4c4c <vfprintf+0x68a>
    4c28:	b7 01       	movw	r22, r14
    4c2a:	80 e3       	ldi	r24, 0x30	; 48
    4c2c:	90 e0       	ldi	r25, 0x00	; 0
    4c2e:	2b 8b       	std	Y+19, r18	; 0x13
    4c30:	0e 94 87 27 	call	0x4f0e	; 0x4f0e <fputc>
    4c34:	2b 89       	ldd	r18, Y+19	; 0x13
    4c36:	22 ff       	sbrs	r18, 2
    4c38:	17 c0       	rjmp	.+46     	; 0x4c68 <vfprintf+0x6a6>
    4c3a:	21 ff       	sbrs	r18, 1
    4c3c:	03 c0       	rjmp	.+6      	; 0x4c44 <vfprintf+0x682>
    4c3e:	88 e5       	ldi	r24, 0x58	; 88
    4c40:	90 e0       	ldi	r25, 0x00	; 0
    4c42:	02 c0       	rjmp	.+4      	; 0x4c48 <vfprintf+0x686>
    4c44:	88 e7       	ldi	r24, 0x78	; 120
    4c46:	90 e0       	ldi	r25, 0x00	; 0
    4c48:	b7 01       	movw	r22, r14
    4c4a:	0c c0       	rjmp	.+24     	; 0x4c64 <vfprintf+0x6a2>
    4c4c:	82 2f       	mov	r24, r18
    4c4e:	86 78       	andi	r24, 0x86	; 134
    4c50:	59 f0       	breq	.+22     	; 0x4c68 <vfprintf+0x6a6>
    4c52:	21 fd       	sbrc	r18, 1
    4c54:	02 c0       	rjmp	.+4      	; 0x4c5a <vfprintf+0x698>
    4c56:	80 e2       	ldi	r24, 0x20	; 32
    4c58:	01 c0       	rjmp	.+2      	; 0x4c5c <vfprintf+0x69a>
    4c5a:	8b e2       	ldi	r24, 0x2B	; 43
    4c5c:	27 fd       	sbrc	r18, 7
    4c5e:	8d e2       	ldi	r24, 0x2D	; 45
    4c60:	b7 01       	movw	r22, r14
    4c62:	90 e0       	ldi	r25, 0x00	; 0
    4c64:	0e 94 87 27 	call	0x4f0e	; 0x4f0e <fputc>
    4c68:	c1 16       	cp	r12, r17
    4c6a:	38 f4       	brcc	.+14     	; 0x4c7a <vfprintf+0x6b8>
    4c6c:	b7 01       	movw	r22, r14
    4c6e:	80 e3       	ldi	r24, 0x30	; 48
    4c70:	90 e0       	ldi	r25, 0x00	; 0
    4c72:	0e 94 87 27 	call	0x4f0e	; 0x4f0e <fputc>
    4c76:	11 50       	subi	r17, 0x01	; 1
    4c78:	f7 cf       	rjmp	.-18     	; 0x4c68 <vfprintf+0x6a6>
    4c7a:	ca 94       	dec	r12
    4c7c:	f4 01       	movw	r30, r8
    4c7e:	ec 0d       	add	r30, r12
    4c80:	f1 1d       	adc	r31, r1
    4c82:	80 81       	ld	r24, Z
    4c84:	b7 01       	movw	r22, r14
    4c86:	90 e0       	ldi	r25, 0x00	; 0
    4c88:	0e 94 87 27 	call	0x4f0e	; 0x4f0e <fputc>
    4c8c:	c1 10       	cpse	r12, r1
    4c8e:	f5 cf       	rjmp	.-22     	; 0x4c7a <vfprintf+0x6b8>
    4c90:	55 20       	and	r5, r5
    4c92:	09 f4       	brne	.+2      	; 0x4c96 <vfprintf+0x6d4>
    4c94:	c2 cc       	rjmp	.-1660   	; 0x461a <vfprintf+0x58>
    4c96:	b7 01       	movw	r22, r14
    4c98:	80 e2       	ldi	r24, 0x20	; 32
    4c9a:	90 e0       	ldi	r25, 0x00	; 0
    4c9c:	0e 94 87 27 	call	0x4f0e	; 0x4f0e <fputc>
    4ca0:	5a 94       	dec	r5
    4ca2:	f6 cf       	rjmp	.-20     	; 0x4c90 <vfprintf+0x6ce>
    4ca4:	f7 01       	movw	r30, r14
    4ca6:	86 81       	ldd	r24, Z+6	; 0x06
    4ca8:	97 81       	ldd	r25, Z+7	; 0x07
    4caa:	02 c0       	rjmp	.+4      	; 0x4cb0 <vfprintf+0x6ee>
    4cac:	8f ef       	ldi	r24, 0xFF	; 255
    4cae:	9f ef       	ldi	r25, 0xFF	; 255
    4cb0:	63 96       	adiw	r28, 0x13	; 19
    4cb2:	e2 e1       	ldi	r30, 0x12	; 18
    4cb4:	0c 94 7e 26 	jmp	0x4cfc	; 0x4cfc <__epilogue_restores__>

00004cb8 <__tablejump2__>:
    4cb8:	ee 0f       	add	r30, r30
    4cba:	ff 1f       	adc	r31, r31

00004cbc <__tablejump__>:
    4cbc:	05 90       	lpm	r0, Z+
    4cbe:	f4 91       	lpm	r31, Z
    4cc0:	e0 2d       	mov	r30, r0
    4cc2:	09 94       	ijmp

00004cc4 <__prologue_saves__>:
    4cc4:	2f 92       	push	r2
    4cc6:	3f 92       	push	r3
    4cc8:	4f 92       	push	r4
    4cca:	5f 92       	push	r5
    4ccc:	6f 92       	push	r6
    4cce:	7f 92       	push	r7
    4cd0:	8f 92       	push	r8
    4cd2:	9f 92       	push	r9
    4cd4:	af 92       	push	r10
    4cd6:	bf 92       	push	r11
    4cd8:	cf 92       	push	r12
    4cda:	df 92       	push	r13
    4cdc:	ef 92       	push	r14
    4cde:	ff 92       	push	r15
    4ce0:	0f 93       	push	r16
    4ce2:	1f 93       	push	r17
    4ce4:	cf 93       	push	r28
    4ce6:	df 93       	push	r29
    4ce8:	cd b7       	in	r28, 0x3d	; 61
    4cea:	de b7       	in	r29, 0x3e	; 62
    4cec:	ca 1b       	sub	r28, r26
    4cee:	db 0b       	sbc	r29, r27
    4cf0:	0f b6       	in	r0, 0x3f	; 63
    4cf2:	f8 94       	cli
    4cf4:	de bf       	out	0x3e, r29	; 62
    4cf6:	0f be       	out	0x3f, r0	; 63
    4cf8:	cd bf       	out	0x3d, r28	; 61
    4cfa:	09 94       	ijmp

00004cfc <__epilogue_restores__>:
    4cfc:	2a 88       	ldd	r2, Y+18	; 0x12
    4cfe:	39 88       	ldd	r3, Y+17	; 0x11
    4d00:	48 88       	ldd	r4, Y+16	; 0x10
    4d02:	5f 84       	ldd	r5, Y+15	; 0x0f
    4d04:	6e 84       	ldd	r6, Y+14	; 0x0e
    4d06:	7d 84       	ldd	r7, Y+13	; 0x0d
    4d08:	8c 84       	ldd	r8, Y+12	; 0x0c
    4d0a:	9b 84       	ldd	r9, Y+11	; 0x0b
    4d0c:	aa 84       	ldd	r10, Y+10	; 0x0a
    4d0e:	b9 84       	ldd	r11, Y+9	; 0x09
    4d10:	c8 84       	ldd	r12, Y+8	; 0x08
    4d12:	df 80       	ldd	r13, Y+7	; 0x07
    4d14:	ee 80       	ldd	r14, Y+6	; 0x06
    4d16:	fd 80       	ldd	r15, Y+5	; 0x05
    4d18:	0c 81       	ldd	r16, Y+4	; 0x04
    4d1a:	1b 81       	ldd	r17, Y+3	; 0x03
    4d1c:	aa 81       	ldd	r26, Y+2	; 0x02
    4d1e:	b9 81       	ldd	r27, Y+1	; 0x01
    4d20:	ce 0f       	add	r28, r30
    4d22:	d1 1d       	adc	r29, r1
    4d24:	0f b6       	in	r0, 0x3f	; 63
    4d26:	f8 94       	cli
    4d28:	de bf       	out	0x3e, r29	; 62
    4d2a:	0f be       	out	0x3f, r0	; 63
    4d2c:	cd bf       	out	0x3d, r28	; 61
    4d2e:	ed 01       	movw	r28, r26
    4d30:	08 95       	ret

00004d32 <__ftoa_engine>:
    4d32:	28 30       	cpi	r18, 0x08	; 8
    4d34:	08 f0       	brcs	.+2      	; 0x4d38 <__ftoa_engine+0x6>
    4d36:	27 e0       	ldi	r18, 0x07	; 7
    4d38:	33 27       	eor	r19, r19
    4d3a:	da 01       	movw	r26, r20
    4d3c:	99 0f       	add	r25, r25
    4d3e:	31 1d       	adc	r19, r1
    4d40:	87 fd       	sbrc	r24, 7
    4d42:	91 60       	ori	r25, 0x01	; 1
    4d44:	00 96       	adiw	r24, 0x00	; 0
    4d46:	61 05       	cpc	r22, r1
    4d48:	71 05       	cpc	r23, r1
    4d4a:	39 f4       	brne	.+14     	; 0x4d5a <__ftoa_engine+0x28>
    4d4c:	32 60       	ori	r19, 0x02	; 2
    4d4e:	2e 5f       	subi	r18, 0xFE	; 254
    4d50:	3d 93       	st	X+, r19
    4d52:	30 e3       	ldi	r19, 0x30	; 48
    4d54:	2a 95       	dec	r18
    4d56:	e1 f7       	brne	.-8      	; 0x4d50 <__ftoa_engine+0x1e>
    4d58:	08 95       	ret
    4d5a:	9f 3f       	cpi	r25, 0xFF	; 255
    4d5c:	30 f0       	brcs	.+12     	; 0x4d6a <__ftoa_engine+0x38>
    4d5e:	80 38       	cpi	r24, 0x80	; 128
    4d60:	71 05       	cpc	r23, r1
    4d62:	61 05       	cpc	r22, r1
    4d64:	09 f0       	breq	.+2      	; 0x4d68 <__ftoa_engine+0x36>
    4d66:	3c 5f       	subi	r19, 0xFC	; 252
    4d68:	3c 5f       	subi	r19, 0xFC	; 252
    4d6a:	3d 93       	st	X+, r19
    4d6c:	91 30       	cpi	r25, 0x01	; 1
    4d6e:	08 f0       	brcs	.+2      	; 0x4d72 <__ftoa_engine+0x40>
    4d70:	80 68       	ori	r24, 0x80	; 128
    4d72:	91 1d       	adc	r25, r1
    4d74:	df 93       	push	r29
    4d76:	cf 93       	push	r28
    4d78:	1f 93       	push	r17
    4d7a:	0f 93       	push	r16
    4d7c:	ff 92       	push	r15
    4d7e:	ef 92       	push	r14
    4d80:	19 2f       	mov	r17, r25
    4d82:	98 7f       	andi	r25, 0xF8	; 248
    4d84:	96 95       	lsr	r25
    4d86:	e9 2f       	mov	r30, r25
    4d88:	96 95       	lsr	r25
    4d8a:	96 95       	lsr	r25
    4d8c:	e9 0f       	add	r30, r25
    4d8e:	ff 27       	eor	r31, r31
    4d90:	e0 58       	subi	r30, 0x80	; 128
    4d92:	fb 4f       	sbci	r31, 0xFB	; 251
    4d94:	99 27       	eor	r25, r25
    4d96:	33 27       	eor	r19, r19
    4d98:	ee 24       	eor	r14, r14
    4d9a:	ff 24       	eor	r15, r15
    4d9c:	a7 01       	movw	r20, r14
    4d9e:	e7 01       	movw	r28, r14
    4da0:	05 90       	lpm	r0, Z+
    4da2:	08 94       	sec
    4da4:	07 94       	ror	r0
    4da6:	28 f4       	brcc	.+10     	; 0x4db2 <__ftoa_engine+0x80>
    4da8:	36 0f       	add	r19, r22
    4daa:	e7 1e       	adc	r14, r23
    4dac:	f8 1e       	adc	r15, r24
    4dae:	49 1f       	adc	r20, r25
    4db0:	51 1d       	adc	r21, r1
    4db2:	66 0f       	add	r22, r22
    4db4:	77 1f       	adc	r23, r23
    4db6:	88 1f       	adc	r24, r24
    4db8:	99 1f       	adc	r25, r25
    4dba:	06 94       	lsr	r0
    4dbc:	a1 f7       	brne	.-24     	; 0x4da6 <__ftoa_engine+0x74>
    4dbe:	05 90       	lpm	r0, Z+
    4dc0:	07 94       	ror	r0
    4dc2:	28 f4       	brcc	.+10     	; 0x4dce <__ftoa_engine+0x9c>
    4dc4:	e7 0e       	add	r14, r23
    4dc6:	f8 1e       	adc	r15, r24
    4dc8:	49 1f       	adc	r20, r25
    4dca:	56 1f       	adc	r21, r22
    4dcc:	c1 1d       	adc	r28, r1
    4dce:	77 0f       	add	r23, r23
    4dd0:	88 1f       	adc	r24, r24
    4dd2:	99 1f       	adc	r25, r25
    4dd4:	66 1f       	adc	r22, r22
    4dd6:	06 94       	lsr	r0
    4dd8:	a1 f7       	brne	.-24     	; 0x4dc2 <__ftoa_engine+0x90>
    4dda:	05 90       	lpm	r0, Z+
    4ddc:	07 94       	ror	r0
    4dde:	28 f4       	brcc	.+10     	; 0x4dea <__ftoa_engine+0xb8>
    4de0:	f8 0e       	add	r15, r24
    4de2:	49 1f       	adc	r20, r25
    4de4:	56 1f       	adc	r21, r22
    4de6:	c7 1f       	adc	r28, r23
    4de8:	d1 1d       	adc	r29, r1
    4dea:	88 0f       	add	r24, r24
    4dec:	99 1f       	adc	r25, r25
    4dee:	66 1f       	adc	r22, r22
    4df0:	77 1f       	adc	r23, r23
    4df2:	06 94       	lsr	r0
    4df4:	a1 f7       	brne	.-24     	; 0x4dde <__ftoa_engine+0xac>
    4df6:	05 90       	lpm	r0, Z+
    4df8:	07 94       	ror	r0
    4dfa:	20 f4       	brcc	.+8      	; 0x4e04 <__ftoa_engine+0xd2>
    4dfc:	49 0f       	add	r20, r25
    4dfe:	56 1f       	adc	r21, r22
    4e00:	c7 1f       	adc	r28, r23
    4e02:	d8 1f       	adc	r29, r24
    4e04:	99 0f       	add	r25, r25
    4e06:	66 1f       	adc	r22, r22
    4e08:	77 1f       	adc	r23, r23
    4e0a:	88 1f       	adc	r24, r24
    4e0c:	06 94       	lsr	r0
    4e0e:	a9 f7       	brne	.-22     	; 0x4dfa <__ftoa_engine+0xc8>
    4e10:	84 91       	lpm	r24, Z
    4e12:	10 95       	com	r17
    4e14:	17 70       	andi	r17, 0x07	; 7
    4e16:	41 f0       	breq	.+16     	; 0x4e28 <__ftoa_engine+0xf6>
    4e18:	d6 95       	lsr	r29
    4e1a:	c7 95       	ror	r28
    4e1c:	57 95       	ror	r21
    4e1e:	47 95       	ror	r20
    4e20:	f7 94       	ror	r15
    4e22:	e7 94       	ror	r14
    4e24:	1a 95       	dec	r17
    4e26:	c1 f7       	brne	.-16     	; 0x4e18 <__ftoa_engine+0xe6>
    4e28:	e6 e2       	ldi	r30, 0x26	; 38
    4e2a:	f4 e0       	ldi	r31, 0x04	; 4
    4e2c:	68 94       	set
    4e2e:	15 90       	lpm	r1, Z+
    4e30:	15 91       	lpm	r17, Z+
    4e32:	35 91       	lpm	r19, Z+
    4e34:	65 91       	lpm	r22, Z+
    4e36:	95 91       	lpm	r25, Z+
    4e38:	05 90       	lpm	r0, Z+
    4e3a:	7f e2       	ldi	r23, 0x2F	; 47
    4e3c:	73 95       	inc	r23
    4e3e:	e1 18       	sub	r14, r1
    4e40:	f1 0a       	sbc	r15, r17
    4e42:	43 0b       	sbc	r20, r19
    4e44:	56 0b       	sbc	r21, r22
    4e46:	c9 0b       	sbc	r28, r25
    4e48:	d0 09       	sbc	r29, r0
    4e4a:	c0 f7       	brcc	.-16     	; 0x4e3c <__ftoa_engine+0x10a>
    4e4c:	e1 0c       	add	r14, r1
    4e4e:	f1 1e       	adc	r15, r17
    4e50:	43 1f       	adc	r20, r19
    4e52:	56 1f       	adc	r21, r22
    4e54:	c9 1f       	adc	r28, r25
    4e56:	d0 1d       	adc	r29, r0
    4e58:	7e f4       	brtc	.+30     	; 0x4e78 <__ftoa_engine+0x146>
    4e5a:	70 33       	cpi	r23, 0x30	; 48
    4e5c:	11 f4       	brne	.+4      	; 0x4e62 <__ftoa_engine+0x130>
    4e5e:	8a 95       	dec	r24
    4e60:	e6 cf       	rjmp	.-52     	; 0x4e2e <__ftoa_engine+0xfc>
    4e62:	e8 94       	clt
    4e64:	01 50       	subi	r16, 0x01	; 1
    4e66:	30 f0       	brcs	.+12     	; 0x4e74 <__ftoa_engine+0x142>
    4e68:	08 0f       	add	r16, r24
    4e6a:	0a f4       	brpl	.+2      	; 0x4e6e <__ftoa_engine+0x13c>
    4e6c:	00 27       	eor	r16, r16
    4e6e:	02 17       	cp	r16, r18
    4e70:	08 f4       	brcc	.+2      	; 0x4e74 <__ftoa_engine+0x142>
    4e72:	20 2f       	mov	r18, r16
    4e74:	23 95       	inc	r18
    4e76:	02 2f       	mov	r16, r18
    4e78:	7a 33       	cpi	r23, 0x3A	; 58
    4e7a:	28 f0       	brcs	.+10     	; 0x4e86 <__ftoa_engine+0x154>
    4e7c:	79 e3       	ldi	r23, 0x39	; 57
    4e7e:	7d 93       	st	X+, r23
    4e80:	2a 95       	dec	r18
    4e82:	e9 f7       	brne	.-6      	; 0x4e7e <__ftoa_engine+0x14c>
    4e84:	10 c0       	rjmp	.+32     	; 0x4ea6 <__ftoa_engine+0x174>
    4e86:	7d 93       	st	X+, r23
    4e88:	2a 95       	dec	r18
    4e8a:	89 f6       	brne	.-94     	; 0x4e2e <__ftoa_engine+0xfc>
    4e8c:	06 94       	lsr	r0
    4e8e:	97 95       	ror	r25
    4e90:	67 95       	ror	r22
    4e92:	37 95       	ror	r19
    4e94:	17 95       	ror	r17
    4e96:	17 94       	ror	r1
    4e98:	e1 18       	sub	r14, r1
    4e9a:	f1 0a       	sbc	r15, r17
    4e9c:	43 0b       	sbc	r20, r19
    4e9e:	56 0b       	sbc	r21, r22
    4ea0:	c9 0b       	sbc	r28, r25
    4ea2:	d0 09       	sbc	r29, r0
    4ea4:	98 f0       	brcs	.+38     	; 0x4ecc <__ftoa_engine+0x19a>
    4ea6:	23 95       	inc	r18
    4ea8:	7e 91       	ld	r23, -X
    4eaa:	73 95       	inc	r23
    4eac:	7a 33       	cpi	r23, 0x3A	; 58
    4eae:	08 f0       	brcs	.+2      	; 0x4eb2 <__ftoa_engine+0x180>
    4eb0:	70 e3       	ldi	r23, 0x30	; 48
    4eb2:	7c 93       	st	X, r23
    4eb4:	20 13       	cpse	r18, r16
    4eb6:	b8 f7       	brcc	.-18     	; 0x4ea6 <__ftoa_engine+0x174>
    4eb8:	7e 91       	ld	r23, -X
    4eba:	70 61       	ori	r23, 0x10	; 16
    4ebc:	7d 93       	st	X+, r23
    4ebe:	30 f0       	brcs	.+12     	; 0x4ecc <__ftoa_engine+0x19a>
    4ec0:	83 95       	inc	r24
    4ec2:	71 e3       	ldi	r23, 0x31	; 49
    4ec4:	7d 93       	st	X+, r23
    4ec6:	70 e3       	ldi	r23, 0x30	; 48
    4ec8:	2a 95       	dec	r18
    4eca:	e1 f7       	brne	.-8      	; 0x4ec4 <__ftoa_engine+0x192>
    4ecc:	11 24       	eor	r1, r1
    4ece:	ef 90       	pop	r14
    4ed0:	ff 90       	pop	r15
    4ed2:	0f 91       	pop	r16
    4ed4:	1f 91       	pop	r17
    4ed6:	cf 91       	pop	r28
    4ed8:	df 91       	pop	r29
    4eda:	99 27       	eor	r25, r25
    4edc:	87 fd       	sbrc	r24, 7
    4ede:	90 95       	com	r25
    4ee0:	08 95       	ret

00004ee2 <strnlen_P>:
    4ee2:	fc 01       	movw	r30, r24
    4ee4:	05 90       	lpm	r0, Z+
    4ee6:	61 50       	subi	r22, 0x01	; 1
    4ee8:	70 40       	sbci	r23, 0x00	; 0
    4eea:	01 10       	cpse	r0, r1
    4eec:	d8 f7       	brcc	.-10     	; 0x4ee4 <strnlen_P+0x2>
    4eee:	80 95       	com	r24
    4ef0:	90 95       	com	r25
    4ef2:	8e 0f       	add	r24, r30
    4ef4:	9f 1f       	adc	r25, r31
    4ef6:	08 95       	ret

00004ef8 <strnlen>:
    4ef8:	fc 01       	movw	r30, r24
    4efa:	61 50       	subi	r22, 0x01	; 1
    4efc:	70 40       	sbci	r23, 0x00	; 0
    4efe:	01 90       	ld	r0, Z+
    4f00:	01 10       	cpse	r0, r1
    4f02:	d8 f7       	brcc	.-10     	; 0x4efa <strnlen+0x2>
    4f04:	80 95       	com	r24
    4f06:	90 95       	com	r25
    4f08:	8e 0f       	add	r24, r30
    4f0a:	9f 1f       	adc	r25, r31
    4f0c:	08 95       	ret

00004f0e <fputc>:
    4f0e:	0f 93       	push	r16
    4f10:	1f 93       	push	r17
    4f12:	cf 93       	push	r28
    4f14:	df 93       	push	r29
    4f16:	18 2f       	mov	r17, r24
    4f18:	09 2f       	mov	r16, r25
    4f1a:	eb 01       	movw	r28, r22
    4f1c:	8b 81       	ldd	r24, Y+3	; 0x03
    4f1e:	81 fd       	sbrc	r24, 1
    4f20:	03 c0       	rjmp	.+6      	; 0x4f28 <fputc+0x1a>
    4f22:	8f ef       	ldi	r24, 0xFF	; 255
    4f24:	9f ef       	ldi	r25, 0xFF	; 255
    4f26:	20 c0       	rjmp	.+64     	; 0x4f68 <fputc+0x5a>
    4f28:	82 ff       	sbrs	r24, 2
    4f2a:	10 c0       	rjmp	.+32     	; 0x4f4c <fputc+0x3e>
    4f2c:	4e 81       	ldd	r20, Y+6	; 0x06
    4f2e:	5f 81       	ldd	r21, Y+7	; 0x07
    4f30:	2c 81       	ldd	r18, Y+4	; 0x04
    4f32:	3d 81       	ldd	r19, Y+5	; 0x05
    4f34:	42 17       	cp	r20, r18
    4f36:	53 07       	cpc	r21, r19
    4f38:	7c f4       	brge	.+30     	; 0x4f58 <fputc+0x4a>
    4f3a:	e8 81       	ld	r30, Y
    4f3c:	f9 81       	ldd	r31, Y+1	; 0x01
    4f3e:	9f 01       	movw	r18, r30
    4f40:	2f 5f       	subi	r18, 0xFF	; 255
    4f42:	3f 4f       	sbci	r19, 0xFF	; 255
    4f44:	39 83       	std	Y+1, r19	; 0x01
    4f46:	28 83       	st	Y, r18
    4f48:	10 83       	st	Z, r17
    4f4a:	06 c0       	rjmp	.+12     	; 0x4f58 <fputc+0x4a>
    4f4c:	e8 85       	ldd	r30, Y+8	; 0x08
    4f4e:	f9 85       	ldd	r31, Y+9	; 0x09
    4f50:	81 2f       	mov	r24, r17
    4f52:	09 95       	icall
    4f54:	89 2b       	or	r24, r25
    4f56:	29 f7       	brne	.-54     	; 0x4f22 <fputc+0x14>
    4f58:	2e 81       	ldd	r18, Y+6	; 0x06
    4f5a:	3f 81       	ldd	r19, Y+7	; 0x07
    4f5c:	2f 5f       	subi	r18, 0xFF	; 255
    4f5e:	3f 4f       	sbci	r19, 0xFF	; 255
    4f60:	3f 83       	std	Y+7, r19	; 0x07
    4f62:	2e 83       	std	Y+6, r18	; 0x06
    4f64:	81 2f       	mov	r24, r17
    4f66:	90 2f       	mov	r25, r16
    4f68:	df 91       	pop	r29
    4f6a:	cf 91       	pop	r28
    4f6c:	1f 91       	pop	r17
    4f6e:	0f 91       	pop	r16
    4f70:	08 95       	ret

00004f72 <sprintf>:
    4f72:	ae e0       	ldi	r26, 0x0E	; 14
    4f74:	b0 e0       	ldi	r27, 0x00	; 0
    4f76:	ef eb       	ldi	r30, 0xBF	; 191
    4f78:	f7 e2       	ldi	r31, 0x27	; 39
    4f7a:	0c 94 70 26 	jmp	0x4ce0	; 0x4ce0 <__prologue_saves__+0x1c>
    4f7e:	0d 89       	ldd	r16, Y+21	; 0x15
    4f80:	1e 89       	ldd	r17, Y+22	; 0x16
    4f82:	86 e0       	ldi	r24, 0x06	; 6
    4f84:	8c 83       	std	Y+4, r24	; 0x04
    4f86:	1a 83       	std	Y+2, r17	; 0x02
    4f88:	09 83       	std	Y+1, r16	; 0x01
    4f8a:	8f ef       	ldi	r24, 0xFF	; 255
    4f8c:	9f e7       	ldi	r25, 0x7F	; 127
    4f8e:	9e 83       	std	Y+6, r25	; 0x06
    4f90:	8d 83       	std	Y+5, r24	; 0x05
    4f92:	ae 01       	movw	r20, r28
    4f94:	47 5e       	subi	r20, 0xE7	; 231
    4f96:	5f 4f       	sbci	r21, 0xFF	; 255
    4f98:	6f 89       	ldd	r22, Y+23	; 0x17
    4f9a:	78 8d       	ldd	r23, Y+24	; 0x18
    4f9c:	ce 01       	movw	r24, r28
    4f9e:	01 96       	adiw	r24, 0x01	; 1
    4fa0:	0e 94 e1 22 	call	0x45c2	; 0x45c2 <vfprintf>
    4fa4:	ef 81       	ldd	r30, Y+7	; 0x07
    4fa6:	f8 85       	ldd	r31, Y+8	; 0x08
    4fa8:	e0 0f       	add	r30, r16
    4faa:	f1 1f       	adc	r31, r17
    4fac:	10 82       	st	Z, r1
    4fae:	2e 96       	adiw	r28, 0x0e	; 14
    4fb0:	e4 e0       	ldi	r30, 0x04	; 4
    4fb2:	0c 94 8c 26 	jmp	0x4d18	; 0x4d18 <__epilogue_restores__+0x1c>

00004fb6 <__ultoa_invert>:
    4fb6:	fa 01       	movw	r30, r20
    4fb8:	aa 27       	eor	r26, r26
    4fba:	28 30       	cpi	r18, 0x08	; 8
    4fbc:	51 f1       	breq	.+84     	; 0x5012 <__ultoa_invert+0x5c>
    4fbe:	20 31       	cpi	r18, 0x10	; 16
    4fc0:	81 f1       	breq	.+96     	; 0x5022 <__ultoa_invert+0x6c>
    4fc2:	e8 94       	clt
    4fc4:	6f 93       	push	r22
    4fc6:	6e 7f       	andi	r22, 0xFE	; 254
    4fc8:	6e 5f       	subi	r22, 0xFE	; 254
    4fca:	7f 4f       	sbci	r23, 0xFF	; 255
    4fcc:	8f 4f       	sbci	r24, 0xFF	; 255
    4fce:	9f 4f       	sbci	r25, 0xFF	; 255
    4fd0:	af 4f       	sbci	r26, 0xFF	; 255
    4fd2:	b1 e0       	ldi	r27, 0x01	; 1
    4fd4:	3e d0       	rcall	.+124    	; 0x5052 <__ultoa_invert+0x9c>
    4fd6:	b4 e0       	ldi	r27, 0x04	; 4
    4fd8:	3c d0       	rcall	.+120    	; 0x5052 <__ultoa_invert+0x9c>
    4fda:	67 0f       	add	r22, r23
    4fdc:	78 1f       	adc	r23, r24
    4fde:	89 1f       	adc	r24, r25
    4fe0:	9a 1f       	adc	r25, r26
    4fe2:	a1 1d       	adc	r26, r1
    4fe4:	68 0f       	add	r22, r24
    4fe6:	79 1f       	adc	r23, r25
    4fe8:	8a 1f       	adc	r24, r26
    4fea:	91 1d       	adc	r25, r1
    4fec:	a1 1d       	adc	r26, r1
    4fee:	6a 0f       	add	r22, r26
    4ff0:	71 1d       	adc	r23, r1
    4ff2:	81 1d       	adc	r24, r1
    4ff4:	91 1d       	adc	r25, r1
    4ff6:	a1 1d       	adc	r26, r1
    4ff8:	20 d0       	rcall	.+64     	; 0x503a <__ultoa_invert+0x84>
    4ffa:	09 f4       	brne	.+2      	; 0x4ffe <__ultoa_invert+0x48>
    4ffc:	68 94       	set
    4ffe:	3f 91       	pop	r19
    5000:	2a e0       	ldi	r18, 0x0A	; 10
    5002:	26 9f       	mul	r18, r22
    5004:	11 24       	eor	r1, r1
    5006:	30 19       	sub	r19, r0
    5008:	30 5d       	subi	r19, 0xD0	; 208
    500a:	31 93       	st	Z+, r19
    500c:	de f6       	brtc	.-74     	; 0x4fc4 <__ultoa_invert+0xe>
    500e:	cf 01       	movw	r24, r30
    5010:	08 95       	ret
    5012:	46 2f       	mov	r20, r22
    5014:	47 70       	andi	r20, 0x07	; 7
    5016:	40 5d       	subi	r20, 0xD0	; 208
    5018:	41 93       	st	Z+, r20
    501a:	b3 e0       	ldi	r27, 0x03	; 3
    501c:	0f d0       	rcall	.+30     	; 0x503c <__ultoa_invert+0x86>
    501e:	c9 f7       	brne	.-14     	; 0x5012 <__ultoa_invert+0x5c>
    5020:	f6 cf       	rjmp	.-20     	; 0x500e <__ultoa_invert+0x58>
    5022:	46 2f       	mov	r20, r22
    5024:	4f 70       	andi	r20, 0x0F	; 15
    5026:	40 5d       	subi	r20, 0xD0	; 208
    5028:	4a 33       	cpi	r20, 0x3A	; 58
    502a:	18 f0       	brcs	.+6      	; 0x5032 <__ultoa_invert+0x7c>
    502c:	49 5d       	subi	r20, 0xD9	; 217
    502e:	31 fd       	sbrc	r19, 1
    5030:	40 52       	subi	r20, 0x20	; 32
    5032:	41 93       	st	Z+, r20
    5034:	02 d0       	rcall	.+4      	; 0x503a <__ultoa_invert+0x84>
    5036:	a9 f7       	brne	.-22     	; 0x5022 <__ultoa_invert+0x6c>
    5038:	ea cf       	rjmp	.-44     	; 0x500e <__ultoa_invert+0x58>
    503a:	b4 e0       	ldi	r27, 0x04	; 4
    503c:	a6 95       	lsr	r26
    503e:	97 95       	ror	r25
    5040:	87 95       	ror	r24
    5042:	77 95       	ror	r23
    5044:	67 95       	ror	r22
    5046:	ba 95       	dec	r27
    5048:	c9 f7       	brne	.-14     	; 0x503c <__ultoa_invert+0x86>
    504a:	00 97       	sbiw	r24, 0x00	; 0
    504c:	61 05       	cpc	r22, r1
    504e:	71 05       	cpc	r23, r1
    5050:	08 95       	ret
    5052:	9b 01       	movw	r18, r22
    5054:	ac 01       	movw	r20, r24
    5056:	0a 2e       	mov	r0, r26
    5058:	06 94       	lsr	r0
    505a:	57 95       	ror	r21
    505c:	47 95       	ror	r20
    505e:	37 95       	ror	r19
    5060:	27 95       	ror	r18
    5062:	ba 95       	dec	r27
    5064:	c9 f7       	brne	.-14     	; 0x5058 <__ultoa_invert+0xa2>
    5066:	62 0f       	add	r22, r18
    5068:	73 1f       	adc	r23, r19
    506a:	84 1f       	adc	r24, r20
    506c:	95 1f       	adc	r25, r21
    506e:	a0 1d       	adc	r26, r0
    5070:	08 95       	ret

00005072 <__do_global_dtors>:
    5072:	15 e0       	ldi	r17, 0x05	; 5
    5074:	c2 e2       	ldi	r28, 0x22	; 34
    5076:	d5 e0       	ldi	r29, 0x05	; 5
    5078:	04 c0       	rjmp	.+8      	; 0x5082 <__do_global_dtors+0x10>
    507a:	fe 01       	movw	r30, r28
    507c:	0e 94 5e 26 	call	0x4cbc	; 0x4cbc <__tablejump__>
    5080:	22 96       	adiw	r28, 0x02	; 2
    5082:	c4 32       	cpi	r28, 0x24	; 36
    5084:	d1 07       	cpc	r29, r17
    5086:	c9 f7       	brne	.-14     	; 0x507a <__do_global_dtors+0x8>
    5088:	f8 94       	cli

0000508a <__stop_program>:
    508a:	ff cf       	rjmp	.-2      	; 0x508a <__stop_program>
