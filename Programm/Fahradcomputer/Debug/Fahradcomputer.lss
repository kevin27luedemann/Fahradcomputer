
Fahradcomputer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001d2  00800100  00005286  0000531a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005286  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000480  008002d2  008002d2  000054ec  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000054ec  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000398  00000000  00000000  00005548  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000784f  00000000  00000000  000058e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000015a2  00000000  00000000  0000d12f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000150f  00000000  00000000  0000e6d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000d88  00000000  00000000  0000fbe0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00001097  00000000  00000000  00010968  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000576e  00000000  00000000  000119ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000380  00000000  00000000  0001716d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 bf 02 	jmp	0x57e	; 0x57e <__dtors_end>
       4:	0c 94 e7 02 	jmp	0x5ce	; 0x5ce <__bad_interrupt>
       8:	0c 94 e7 02 	jmp	0x5ce	; 0x5ce <__bad_interrupt>
       c:	0c 94 e7 02 	jmp	0x5ce	; 0x5ce <__bad_interrupt>
      10:	0c 94 e7 02 	jmp	0x5ce	; 0x5ce <__bad_interrupt>
      14:	0c 94 e7 02 	jmp	0x5ce	; 0x5ce <__bad_interrupt>
      18:	0c 94 e7 02 	jmp	0x5ce	; 0x5ce <__bad_interrupt>
      1c:	0c 94 e7 02 	jmp	0x5ce	; 0x5ce <__bad_interrupt>
      20:	0c 94 e7 02 	jmp	0x5ce	; 0x5ce <__bad_interrupt>
      24:	0c 94 38 15 	jmp	0x2a70	; 0x2a70 <__vector_9>
      28:	0c 94 e7 02 	jmp	0x5ce	; 0x5ce <__bad_interrupt>
      2c:	0c 94 e7 02 	jmp	0x5ce	; 0x5ce <__bad_interrupt>
      30:	0c 94 e7 02 	jmp	0x5ce	; 0x5ce <__bad_interrupt>
      34:	0c 94 e7 02 	jmp	0x5ce	; 0x5ce <__bad_interrupt>
      38:	0c 94 e7 02 	jmp	0x5ce	; 0x5ce <__bad_interrupt>
      3c:	0c 94 e7 02 	jmp	0x5ce	; 0x5ce <__bad_interrupt>
      40:	0c 94 e7 02 	jmp	0x5ce	; 0x5ce <__bad_interrupt>
      44:	0c 94 e7 02 	jmp	0x5ce	; 0x5ce <__bad_interrupt>
      48:	0c 94 e7 02 	jmp	0x5ce	; 0x5ce <__bad_interrupt>
      4c:	0c 94 e7 02 	jmp	0x5ce	; 0x5ce <__bad_interrupt>
      50:	0c 94 e7 02 	jmp	0x5ce	; 0x5ce <__bad_interrupt>
      54:	0c 94 e7 02 	jmp	0x5ce	; 0x5ce <__bad_interrupt>
      58:	0c 94 e7 02 	jmp	0x5ce	; 0x5ce <__bad_interrupt>
      5c:	0c 94 e7 02 	jmp	0x5ce	; 0x5ce <__bad_interrupt>
      60:	0c 94 e7 02 	jmp	0x5ce	; 0x5ce <__bad_interrupt>
      64:	0c 94 e7 02 	jmp	0x5ce	; 0x5ce <__bad_interrupt>
      68:	89 12       	cpse	r8, r25
      6a:	b1 12       	cpse	r11, r17
      6c:	db 12       	cpse	r13, r27
      6e:	06 13       	cpse	r16, r22
      70:	30 13       	cpse	r19, r16
      72:	59 13       	cpse	r21, r25
      74:	81 13       	cpse	r24, r17
      76:	aa 13       	cpse	r26, r26
      78:	22 14       	cp	r2, r2
      7a:	4d 14       	cp	r4, r13
      7c:	e8 17       	cp	r30, r24
      7e:	f3 17       	cp	r31, r19
      80:	01 18       	sub	r0, r1
      82:	07 18       	sub	r0, r7
      84:	0e 18       	sub	r0, r14
      86:	15 18       	sub	r1, r5
      88:	23 18       	sub	r2, r3
      8a:	43 18       	sub	r4, r3
      8c:	4a 18       	sub	r4, r10
      8e:	51 18       	sub	r5, r1
      90:	58 18       	sub	r5, r8
      92:	5f 18       	sub	r5, r15
      94:	66 18       	sub	r6, r6
      96:	6d 18       	sub	r6, r13
      98:	74 18       	sub	r7, r4
      9a:	08 4a       	sbci	r16, 0xA8	; 168
      9c:	d7 3b       	cpi	r29, 0xB7	; 183
      9e:	3b ce       	rjmp	.-906    	; 0xfffffd16 <__eeprom_end+0xff7efd16>
      a0:	01 6e       	ori	r16, 0xE1	; 225
      a2:	84 bc       	out	0x24, r8	; 36
      a4:	bf fd       	.word	0xfdbf	; ????
      a6:	c1 2f       	mov	r28, r17
      a8:	3d 6c       	ori	r19, 0xCD	; 205
      aa:	74 31       	cpi	r23, 0x14	; 20
      ac:	9a bd       	out	0x2a, r25	; 42
      ae:	56 83       	std	Z+6, r21	; 0x06
      b0:	3d da       	rcall	.-2950   	; 0xfffff52c <__eeprom_end+0xff7ef52c>
      b2:	3d 00       	.word	0x003d	; ????
      b4:	c7 7f       	andi	r28, 0xF7	; 247
      b6:	11 be       	out	0x31, r1	; 49
      b8:	d9 e4       	ldi	r29, 0x49	; 73
      ba:	bb 4c       	sbci	r27, 0xCB	; 203
      bc:	3e 91       	ld	r19, -X
      be:	6b aa       	std	Y+51, r6	; 0x33
      c0:	aa be       	out	0x3a, r10	; 58
      c2:	00 00       	nop
      c4:	00 80       	ld	r0, Z
      c6:	3f 05       	cpc	r19, r15
      c8:	a8 4c       	sbci	r26, 0xC8	; 200
      ca:	cd b2       	in	r12, 0x1d	; 29
      cc:	d4 4e       	sbci	r29, 0xE4	; 228
      ce:	b9 38       	cpi	r27, 0x89	; 137
      d0:	36 a9       	ldd	r19, Z+54	; 0x36
      d2:	02 0c       	add	r0, r2
      d4:	50 b9       	out	0x00, r21	; 0
      d6:	91 86       	std	Z+9, r9	; 0x09
      d8:	88 08       	sbc	r8, r8
      da:	3c a6       	std	Y+44, r3	; 0x2c
      dc:	aa aa       	std	Y+50, r10	; 0x32
      de:	2a be       	out	0x3a, r2	; 58
      e0:	00 00       	nop
      e2:	00 80       	ld	r0, Z
      e4:	3f 08       	sbc	r3, r15
      e6:	00 00       	nop
      e8:	00 be       	out	0x30, r0	; 48
      ea:	92 24       	eor	r9, r2
      ec:	49 12       	cpse	r4, r25
      ee:	3e ab       	std	Y+54, r19	; 0x36
      f0:	aa aa       	std	Y+50, r10	; 0x32
      f2:	2a be       	out	0x3a, r2	; 58
      f4:	cd cc       	rjmp	.-1638   	; 0xfffffa90 <__eeprom_end+0xff7efa90>
      f6:	cc 4c       	sbci	r28, 0xCC	; 204
      f8:	3e 00       	.word	0x003e	; ????
      fa:	00 00       	nop
      fc:	80 be       	out	0x30, r8	; 48
      fe:	ab aa       	std	Y+51, r10	; 0x33
     100:	aa aa       	std	Y+50, r10	; 0x32
     102:	3e 00       	.word	0x003e	; ????
     104:	00 00       	nop
     106:	00 bf       	out	0x30, r16	; 48
     108:	00 00       	nop
     10a:	00 80       	ld	r0, Z
     10c:	3f 00       	.word	0x003f	; ????
     10e:	00 00       	nop
     110:	00 00       	nop
     112:	08 41       	sbci	r16, 0x18	; 24
     114:	78 d3       	rcall	.+1776   	; 0x806 <_ZN7Display9drawPixelEhhh+0x5a>
     116:	bb 43       	sbci	r27, 0x3B	; 59
     118:	87 d1       	rcall	.+782    	; 0x428 <_ZL7font5x8+0x186>
     11a:	13 3d       	cpi	r17, 0xD3	; 211
     11c:	19 0e       	add	r1, r25
     11e:	3c c3       	rjmp	.+1656   	; 0x798 <_ZN7Display9sendFrameEv+0x72>
     120:	bd 42       	sbci	r27, 0x2D	; 45
     122:	82 ad       	ldd	r24, Z+58	; 0x3a
     124:	2b 3e       	cpi	r18, 0xEB	; 235
     126:	68 ec       	ldi	r22, 0xC8	; 200
     128:	82 76       	andi	r24, 0x62	; 98
     12a:	be d9       	rcall	.-3204   	; 0xfffff4a8 <__eeprom_end+0xff7ef4a8>
     12c:	8f e1       	ldi	r24, 0x1F	; 31
     12e:	a9 3e       	cpi	r26, 0xE9	; 233
     130:	4c 80       	ldd	r4, Y+4	; 0x04
     132:	ef ff       	.word	0xffef	; ????
     134:	be 01       	movw	r22, r28
     136:	c4 ff       	sbrs	r28, 4
     138:	7f 3f       	cpi	r23, 0xFF	; 255
     13a:	00 00       	nop
     13c:	00 00       	nop
     13e:	00 06       	cpc	r0, r16
     140:	64 ec       	ldi	r22, 0xC4	; 196
     142:	1b 3c       	cpi	r17, 0xCB	; 203
     144:	04 bc       	out	0x24, r0	; 36
     146:	16 3e       	cpi	r17, 0xE6	; 230
     148:	3b e5       	ldi	r19, 0x5B	; 91
     14a:	b9 3c       	cpi	r27, 0xC9	; 201
     14c:	c9 3c       	cpi	r28, 0xC9	; 201
     14e:	37 c2       	rjmp	.+1134   	; 0x5be <__do_global_ctors+0xe>
     150:	9e 5a       	subi	r25, 0xAE	; 174
     152:	3d 66       	ori	r19, 0x6D	; 109
     154:	04 98       	cbi	0x00, 4	; 0
     156:	08 3e       	cpi	r16, 0xE8	; 232
     158:	ea 69       	ori	r30, 0x9A	; 154
     15a:	aa aa       	std	Y+50, r10	; 0x32
     15c:	3e 00       	.word	0x003e	; ????
     15e:	00 00       	nop
     160:	80 3f       	cpi	r24, 0xF0	; 240

00000162 <__trampolines_end>:
     162:	00 e0       	ldi	r16, 0x00	; 0
     164:	f8 fc       	.word	0xfcf8	; ????
     166:	fe 1e       	adc	r15, r30
     168:	07 07       	cpc	r16, r23
     16a:	07 07       	cpc	r16, r23
     16c:	1e fe       	.word	0xfe1e	; ????
     16e:	fc f8       	.word	0xf8fc	; ????
     170:	f0 00       	.word	0x00f0	; ????
     172:	00 07       	cpc	r16, r16
     174:	0f 3f       	cpi	r16, 0xFF	; 255
     176:	3f 7c       	andi	r19, 0xCF	; 207
     178:	70 70       	andi	r23, 0x00	; 0
     17a:	70 70       	andi	r23, 0x00	; 0
     17c:	7c 3f       	cpi	r23, 0xFC	; 252
     17e:	1f 1f       	adc	r17, r31
     180:	07 00       	.word	0x0007	; ????
     182:	00 00       	nop
     184:	00 06       	cpc	r0, r16
     186:	07 07       	cpc	r16, r23
     188:	ff ff       	.word	0xffff	; ????
     18a:	ff ff       	.word	0xffff	; ????
	...
     198:	7f 7f       	andi	r23, 0xFF	; 255
     19a:	7f 7f       	andi	r23, 0xFF	; 255
     19c:	00 00       	nop
     19e:	00 00       	nop
     1a0:	00 00       	nop
     1a2:	00 38       	cpi	r16, 0x80	; 128
     1a4:	3c 3e       	cpi	r19, 0xEC	; 236
     1a6:	3e 0f       	add	r19, r30
     1a8:	07 07       	cpc	r16, r23
     1aa:	07 cf       	rjmp	.-498    	; 0xffffffba <__eeprom_end+0xff7effba>
     1ac:	ff fe       	.word	0xfeff	; ????
     1ae:	fe 38       	cpi	r31, 0x8E	; 142
     1b0:	00 00       	nop
     1b2:	00 40       	sbci	r16, 0x00	; 0
     1b4:	40 60       	ori	r20, 0x00	; 0
     1b6:	70 78       	andi	r23, 0x80	; 128
     1b8:	7c 7e       	andi	r23, 0xEC	; 236
     1ba:	7f 77       	andi	r23, 0x7F	; 127
     1bc:	73 71       	andi	r23, 0x13	; 19
     1be:	70 70       	andi	r23, 0x00	; 0
     1c0:	00 00       	nop
     1c2:	00 18       	sub	r0, r0
     1c4:	1c 1e       	adc	r1, r28
     1c6:	1e 0f       	add	r17, r30
     1c8:	c7 c7       	rjmp	.+3982   	; 0x1158 <_Z14willkommenpagev+0x14>
     1ca:	e7 ff       	sbrs	r30, 7
     1cc:	fe be       	out	0x3e, r15	; 62
     1ce:	9c 00       	.word	0x009c	; ????
     1d0:	00 00       	nop
     1d2:	00 0c       	add	r0, r0
     1d4:	1c 3c       	cpi	r17, 0xCC	; 204
     1d6:	3c 78       	andi	r19, 0x8C	; 140
     1d8:	70 70       	andi	r23, 0x00	; 0
     1da:	70 79       	andi	r23, 0x90	; 144
     1dc:	7f 3f       	cpi	r23, 0xFF	; 255
     1de:	1f 0f       	add	r17, r31
     1e0:	00 00       	nop
     1e2:	00 00       	nop
     1e4:	80 c0       	rjmp	.+256    	; 0x2e6 <_ZL7font5x8+0x44>
     1e6:	e0 70       	andi	r30, 0x00	; 0
     1e8:	38 1c       	adc	r3, r8
     1ea:	1e ff       	.word	0xff1e	; ????
     1ec:	ff ff       	.word	0xffff	; ????
     1ee:	ff 00       	.word	0x00ff	; ????
     1f0:	00 00       	nop
     1f2:	06 07       	cpc	r16, r22
     1f4:	07 07       	cpc	r16, r23
     1f6:	06 06       	cpc	r0, r22
     1f8:	06 06       	cpc	r0, r22
     1fa:	06 7f       	andi	r16, 0xF6	; 246
     1fc:	7f 7f       	andi	r23, 0xFF	; 255
     1fe:	7f 06       	cpc	r7, r31
     200:	06 00       	.word	0x0006	; ????
     202:	00 00       	nop
     204:	00 00       	nop
     206:	f0 ff       	sbrs	r31, 0
     208:	ff ff       	.word	0xffff	; ????
     20a:	e7 e7       	ldi	r30, 0x77	; 119
     20c:	e7 e7       	ldi	r30, 0x77	; 119
     20e:	c7 87       	std	Z+15, r28	; 0x0f
     210:	00 00       	nop
     212:	00 00       	nop
     214:	38 78       	andi	r19, 0x88	; 136
     216:	71 70       	andi	r23, 0x01	; 1
     218:	70 70       	andi	r23, 0x00	; 0
     21a:	70 70       	andi	r23, 0x00	; 0
     21c:	39 3f       	cpi	r19, 0xF9	; 249
     21e:	3f 1f       	adc	r19, r31
     220:	0f 00       	.word	0x000f	; ????
     222:	00 80       	ld	r0, Z
     224:	e0 f0       	brcs	.+56     	; 0x25e <__trampolines_end+0xfc>
     226:	f8 fc       	.word	0xfcf8	; ????
     228:	7f 7f       	andi	r23, 0xFF	; 255
     22a:	6f 67       	ori	r22, 0x7F	; 127
     22c:	e1 e1       	ldi	r30, 0x11	; 17
     22e:	c0 80       	ld	r12, Z
     230:	00 00       	nop
     232:	00 0f       	add	r16, r16
     234:	1f 3f       	cpi	r17, 0xFF	; 255
     236:	3f 78       	andi	r19, 0x8F	; 143
     238:	70 70       	andi	r23, 0x00	; 0
     23a:	70 70       	andi	r23, 0x00	; 0
     23c:	78 3f       	cpi	r23, 0xF8	; 248
     23e:	3f 1f       	adc	r19, r31
     240:	0f 00       	.word	0x000f	; ????
     242:	00 07       	cpc	r16, r16
     244:	07 07       	cpc	r16, r23
     246:	07 07       	cpc	r16, r23
     248:	c7 e7       	ldi	r28, 0x77	; 119
     24a:	f7 ff       	sbrs	r31, 7
     24c:	7f 3f       	cpi	r23, 0xFF	; 255
     24e:	1f 07       	cpc	r17, r31
     250:	03 01       	movw	r0, r6
     252:	00 20       	and	r0, r0
     254:	38 7c       	andi	r19, 0xC8	; 200
     256:	7e 3f       	cpi	r23, 0xFE	; 254
     258:	0f 07       	cpc	r16, r31
     25a:	03 00       	.word	0x0003	; ????
	...
     264:	00 1c       	adc	r0, r0
     266:	be fe       	.word	0xfebe	; ????
     268:	ff e7       	ldi	r31, 0x7F	; 127
     26a:	c3 c3       	rjmp	.+1926   	; 0x9f2 <_ZN7Display13draw_triangleEhhhff+0x8c>
     26c:	e7 ff       	sbrs	r30, 7
     26e:	fe be       	out	0x3e, r15	; 62
     270:	1c 00       	.word	0x001c	; ????
     272:	00 00       	nop
     274:	0e 3f       	cpi	r16, 0xFE	; 254
     276:	3f 7f       	andi	r19, 0xFF	; 255
     278:	71 60       	ori	r23, 0x01	; 1
     27a:	60 60       	ori	r22, 0x00	; 0
     27c:	71 7f       	andi	r23, 0xF1	; 241
     27e:	3f 3f       	cpi	r19, 0xFF	; 255
     280:	0f 00       	.word	0x000f	; ????
     282:	00 78       	andi	r16, 0x80	; 128
     284:	fc fe       	.word	0xfefc	; ????
     286:	fe 8f       	std	Y+30, r31	; 0x1e
     288:	07 07       	cpc	r16, r23
     28a:	07 07       	cpc	r16, r23
     28c:	8f fe       	.word	0xfe8f	; ????
     28e:	fe fc       	.word	0xfcfe	; ????
     290:	f8 00       	.word	0x00f8	; ????
     292:	00 00       	nop
     294:	00 01       	movw	r0, r0
     296:	43 43       	sbci	r20, 0x33	; 51
     298:	73 7b       	andi	r23, 0xB3	; 179
     29a:	7f 7f       	andi	r23, 0xFF	; 255
     29c:	1f 0f       	add	r17, r31
     29e:	07 03       	mulsu	r16, r23
	...

000002a2 <_ZL7font5x8>:
     2a2:	00 00 5f 00 00 00 07 00 07 00 14 7f 14 7f 14 24     .._............$
     2b2:	2a 7f 2a 12 23 13 08 64 62 36 49 55 22 50 00 05     *.*.#..db6IU"P..
     2c2:	03 00 00 00 1c 22 41 00 00 41 22 1c 00 14 08 3e     ....."A..A"....>
     2d2:	08 14 08 08 3e 08 08 00 50 30 00 00 08 08 08 08     ....>...P0......
     2e2:	08 00 60 60 00 00 20 10 08 04 02 3e 51 49 45 3e     ..``.. ....>QIE>
     2f2:	00 42 7f 40 00 42 61 51 49 46 21 41 45 4b 31 18     .B.@.BaQIF!AEK1.
     302:	14 12 7f 10 27 45 45 45 39 3c 4a 49 49 30 01 71     ....'EEE9<JII0.q
     312:	09 05 03 36 49 49 49 36 06 49 49 29 1e 00 36 36     ...6III6.II)..66
     322:	00 00 00 56 36 00 00 08 14 22 41 00 14 14 14 14     ...V6...."A.....
     332:	14 00 41 22 14 08 02 01 51 09 06 32 49 79 41 3e     ..A"....Q..2IyA>
     342:	7e 11 11 11 7e 7f 49 49 49 36 3e 41 41 41 22 7f     ~...~.III6>AAA".
     352:	41 41 22 1c 7f 49 49 49 41 7f 09 09 09 01 3e 41     AA"..IIIA.....>A
     362:	49 49 7a 7f 08 08 08 7f 00 41 7f 41 00 20 40 41     IIz......A.A. @A
     372:	3f 01 7f 08 14 22 41 7f 40 40 40 40 7f 02 0c 02     ?...."A.@@@@....
     382:	7f 7f 04 08 10 7f 3e 41 41 41 3e 7f 09 09 09 06     ......>AAA>.....
     392:	3e 41 51 21 5e 7f 09 19 29 46 46 49 49 49 31 01     >AQ!^...)FFIII1.
     3a2:	01 7f 01 01 3f 40 40 40 3f 1f 20 40 20 1f 3f 40     ....?@@@?. @ .?@
     3b2:	38 40 3f 63 14 08 14 63 07 08 70 08 07 61 51 49     8@?c...c..p..aQI
     3c2:	45 43 00 7f 41 41 00 02 04 08 10 20 00 41 41 7f     EC..AA..... .AA.
     3d2:	00 04 02 01 02 04 40 40 40 40 40 00 01 02 04 00     ......@@@@@.....
     3e2:	20 54 54 54 78 7f 48 44 44 38 38 44 44 44 20 38      TTTx.HDD88DDD 8
     3f2:	44 44 48 7f 38 54 54 54 18 08 7e 09 01 02 0c 52     DDH.8TTT..~....R
     402:	52 52 3e 7f 08 04 04 78 00 44 7d 40 00 20 40 44     RR>....x.D}@. @D
     412:	3d 00 7f 10 28 44 00 00 41 7f 40 00 7c 04 18 04     =...(D..A.@.|...
     422:	78 7c 08 04 04 78 38 44 44 44 38 7c 14 14 14 08     x|...x8DDD8|....
     432:	08 14 14 18 7c 7c 08 04 04 08 48 54 54 54 20 04     ....||....HTTT .
     442:	3f 44 40 20 3c 40 40 20 7c 1c 20 40 20 1c 3c 40     ?D@ <@@ |. @ .<@
     452:	30 40 3c 44 28 10 28 44 0c 50 50 50 3c 44 64 54     0@<D(.(D.PPP<DdT
     462:	4c 44 00 08 36 41 00 00 00 7f 00 00 00 41 36 08     LD..6A.......A6.
     472:	00 10 08 08 10 08                                   ......

00000478 <__c.2161>:
     478:	6e 61 6e 00                                         nan.

0000047c <__c.2159>:
     47c:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     48c:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     49c:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     4ac:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     4bc:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     4cc:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     4dc:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     4ec:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     4fc:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     50c:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     51c:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     52c:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     53c:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     54c:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     55c:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     56c:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

0000057a <__ctors_start>:
     57a:	d4 19       	sub	r29, r4

0000057c <__ctors_end>:
     57c:	fd 19       	sub	r31, r13

0000057e <__dtors_end>:
     57e:	11 24       	eor	r1, r1
     580:	1f be       	out	0x3f, r1	; 63
     582:	cf ef       	ldi	r28, 0xFF	; 255
     584:	d8 e0       	ldi	r29, 0x08	; 8
     586:	de bf       	out	0x3e, r29	; 62
     588:	cd bf       	out	0x3d, r28	; 61

0000058a <__do_copy_data>:
     58a:	12 e0       	ldi	r17, 0x02	; 2
     58c:	a0 e0       	ldi	r26, 0x00	; 0
     58e:	b1 e0       	ldi	r27, 0x01	; 1
     590:	e6 e8       	ldi	r30, 0x86	; 134
     592:	f2 e5       	ldi	r31, 0x52	; 82
     594:	02 c0       	rjmp	.+4      	; 0x59a <__do_copy_data+0x10>
     596:	05 90       	lpm	r0, Z+
     598:	0d 92       	st	X+, r0
     59a:	a2 3d       	cpi	r26, 0xD2	; 210
     59c:	b1 07       	cpc	r27, r17
     59e:	d9 f7       	brne	.-10     	; 0x596 <__do_copy_data+0xc>

000005a0 <__do_clear_bss>:
     5a0:	27 e0       	ldi	r18, 0x07	; 7
     5a2:	a2 ed       	ldi	r26, 0xD2	; 210
     5a4:	b2 e0       	ldi	r27, 0x02	; 2
     5a6:	01 c0       	rjmp	.+2      	; 0x5aa <.do_clear_bss_start>

000005a8 <.do_clear_bss_loop>:
     5a8:	1d 92       	st	X+, r1

000005aa <.do_clear_bss_start>:
     5aa:	a2 35       	cpi	r26, 0x52	; 82
     5ac:	b2 07       	cpc	r27, r18
     5ae:	e1 f7       	brne	.-8      	; 0x5a8 <.do_clear_bss_loop>

000005b0 <__do_global_ctors>:
     5b0:	15 e0       	ldi	r17, 0x05	; 5
     5b2:	cc e7       	ldi	r28, 0x7C	; 124
     5b4:	d5 e0       	ldi	r29, 0x05	; 5
     5b6:	04 c0       	rjmp	.+8      	; 0x5c0 <__do_global_ctors+0x10>
     5b8:	22 97       	sbiw	r28, 0x02	; 2
     5ba:	fe 01       	movw	r30, r28
     5bc:	0e 94 5b 27 	call	0x4eb6	; 0x4eb6 <__tablejump__>
     5c0:	ca 37       	cpi	r28, 0x7A	; 122
     5c2:	d1 07       	cpc	r29, r17
     5c4:	c9 f7       	brne	.-14     	; 0x5b8 <__do_global_ctors+0x8>
     5c6:	0e 94 c7 19 	call	0x338e	; 0x338e <main>
     5ca:	0c 94 36 29 	jmp	0x526c	; 0x526c <__do_global_dtors>

000005ce <__bad_interrupt>:
     5ce:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000005d2 <_ZN7DisplayD1Ev>:
	//}
	InitializeDisplay();
} //Display

// default destructor
Display::~Display()
     5d2:	9c 5f       	subi	r25, 0xFC	; 252
     5d4:	0e 94 26 1a 	call	0x344c	; 0x344c <_ZN3I2CD1Ev>
     5d8:	08 95       	ret

000005da <_ZN7Display10clearFrameEv>:
{
} //~Display

void Display::clearFrame(){
     5da:	fc 01       	movw	r30, r24
	for(uint16_t i=0;i<1024;i++){
     5dc:	20 e0       	ldi	r18, 0x00	; 0
     5de:	30 e0       	ldi	r19, 0x00	; 0
		Displayframe[i]=0;
     5e0:	11 92       	st	Z+, r1
Display::~Display()
{
} //~Display

void Display::clearFrame(){
	for(uint16_t i=0;i<1024;i++){
     5e2:	2f 5f       	subi	r18, 0xFF	; 255
     5e4:	3f 4f       	sbci	r19, 0xFF	; 255
     5e6:	21 15       	cp	r18, r1
     5e8:	84 e0       	ldi	r24, 0x04	; 4
     5ea:	38 07       	cpc	r19, r24
     5ec:	c9 f7       	brne	.-14     	; 0x5e0 <_ZN7Display10clearFrameEv+0x6>
		Displayframe[i]=0;
	}
}
     5ee:	08 95       	ret

000005f0 <_ZN7Display15ssd1306_commandEh>:

void Display::ssd1306_command(uint8_t c){
     5f0:	1f 93       	push	r17
     5f2:	cf 93       	push	r28
     5f4:	df 93       	push	r29
     5f6:	16 2f       	mov	r17, r22
	i2c.twi_start();
     5f8:	ec 01       	movw	r28, r24
     5fa:	dc 5f       	subi	r29, 0xFC	; 252
     5fc:	ce 01       	movw	r24, r28
     5fe:	0e 94 27 1a 	call	0x344e	; 0x344e <_ZN3I2C9twi_startEv>
	i2c.twi_write(OLEDADRESSE);
     602:	68 e7       	ldi	r22, 0x78	; 120
     604:	ce 01       	movw	r24, r28
     606:	0e 94 2f 1a 	call	0x345e	; 0x345e <_ZN3I2C9twi_writeEh>
	i2c.twi_write(OLEDBEFEHL);
     60a:	60 e0       	ldi	r22, 0x00	; 0
     60c:	ce 01       	movw	r24, r28
     60e:	0e 94 2f 1a 	call	0x345e	; 0x345e <_ZN3I2C9twi_writeEh>
	i2c.twi_write(c);
     612:	61 2f       	mov	r22, r17
     614:	ce 01       	movw	r24, r28
     616:	0e 94 2f 1a 	call	0x345e	; 0x345e <_ZN3I2C9twi_writeEh>
	i2c.twi_stop();
     61a:	ce 01       	movw	r24, r28
     61c:	0e 94 2b 1a 	call	0x3456	; 0x3456 <_ZN3I2C8twi_stopEv>
}
     620:	df 91       	pop	r29
     622:	cf 91       	pop	r28
     624:	1f 91       	pop	r17
     626:	08 95       	ret

00000628 <_ZN7Display17InitializeDisplayEv>:

void Display::InitializeDisplay()
{
     628:	cf 93       	push	r28
     62a:	df 93       	push	r29
     62c:	ec 01       	movw	r28, r24
	// Init sequence for 128x64 OLED module
	ssd1306_command(SSD1306_DISPLAYOFF);                    // 0xAE
     62e:	6e ea       	ldi	r22, 0xAE	; 174
     630:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <_ZN7Display15ssd1306_commandEh>

	ssd1306_command(SSD1306_SETDISPLAYCLOCKDIV);            // 0xD5
     634:	65 ed       	ldi	r22, 0xD5	; 213
     636:	ce 01       	movw	r24, r28
     638:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <_ZN7Display15ssd1306_commandEh>
	ssd1306_command(0x80);                 // the suggested ratio 0x80
     63c:	60 e8       	ldi	r22, 0x80	; 128
     63e:	ce 01       	movw	r24, r28
     640:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <_ZN7Display15ssd1306_commandEh>

	ssd1306_command(SSD1306_SETMULTIPLEX);                  // 0xA8
     644:	68 ea       	ldi	r22, 0xA8	; 168
     646:	ce 01       	movw	r24, r28
     648:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <_ZN7Display15ssd1306_commandEh>
	ssd1306_command(0x3F);
     64c:	6f e3       	ldi	r22, 0x3F	; 63
     64e:	ce 01       	movw	r24, r28
     650:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <_ZN7Display15ssd1306_commandEh>

	ssd1306_command(SSD1306_SETDISPLAYOFFSET);              // 0xD3
     654:	63 ed       	ldi	r22, 0xD3	; 211
     656:	ce 01       	movw	r24, r28
     658:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <_ZN7Display15ssd1306_commandEh>
	ssd1306_command(0x0);                                   // no offset
     65c:	60 e0       	ldi	r22, 0x00	; 0
     65e:	ce 01       	movw	r24, r28
     660:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <_ZN7Display15ssd1306_commandEh>

	ssd1306_command(SSD1306_SETSTARTLINE);// | 0x0);        // line #0
     664:	60 e4       	ldi	r22, 0x40	; 64
     666:	ce 01       	movw	r24, r28
     668:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <_ZN7Display15ssd1306_commandEh>

	ssd1306_command(SSD1306_CHARGEPUMP);                    // 0x8D
     66c:	6d e8       	ldi	r22, 0x8D	; 141
     66e:	ce 01       	movw	r24, r28
     670:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <_ZN7Display15ssd1306_commandEh>
	ssd1306_command(0x14);  // using internal VCC
     674:	64 e1       	ldi	r22, 0x14	; 20
     676:	ce 01       	movw	r24, r28
     678:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <_ZN7Display15ssd1306_commandEh>

	ssd1306_command(SSD1306_MEMORYMODE);                    // 0x20
     67c:	60 e2       	ldi	r22, 0x20	; 32
     67e:	ce 01       	movw	r24, r28
     680:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <_ZN7Display15ssd1306_commandEh>
	ssd1306_command(0x00);          // 0x00 horizontal addressing
     684:	60 e0       	ldi	r22, 0x00	; 0
     686:	ce 01       	movw	r24, r28
     688:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <_ZN7Display15ssd1306_commandEh>

	ssd1306_command(SSD1306_SEGREMAP | 0x1); // rotate screen 180
     68c:	61 ea       	ldi	r22, 0xA1	; 161
     68e:	ce 01       	movw	r24, r28
     690:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <_ZN7Display15ssd1306_commandEh>

	ssd1306_command(SSD1306_COMSCANDEC); // rotate screen 180
     694:	68 ec       	ldi	r22, 0xC8	; 200
     696:	ce 01       	movw	r24, r28
     698:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <_ZN7Display15ssd1306_commandEh>

	ssd1306_command(SSD1306_SETCOMPINS);                    // 0xDA
     69c:	6a ed       	ldi	r22, 0xDA	; 218
     69e:	ce 01       	movw	r24, r28
     6a0:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <_ZN7Display15ssd1306_commandEh>
	ssd1306_command(0x12);
     6a4:	62 e1       	ldi	r22, 0x12	; 18
     6a6:	ce 01       	movw	r24, r28
     6a8:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <_ZN7Display15ssd1306_commandEh>

	ssd1306_command(SSD1306_SETCONTRAST);                   // 0x81
     6ac:	61 e8       	ldi	r22, 0x81	; 129
     6ae:	ce 01       	movw	r24, r28
     6b0:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <_ZN7Display15ssd1306_commandEh>
	ssd1306_command(0xCF);
     6b4:	6f ec       	ldi	r22, 0xCF	; 207
     6b6:	ce 01       	movw	r24, r28
     6b8:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <_ZN7Display15ssd1306_commandEh>

	ssd1306_command(SSD1306_SETPRECHARGE);                  // 0xd9
     6bc:	69 ed       	ldi	r22, 0xD9	; 217
     6be:	ce 01       	movw	r24, r28
     6c0:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <_ZN7Display15ssd1306_commandEh>
	ssd1306_command(0xF1);
     6c4:	61 ef       	ldi	r22, 0xF1	; 241
     6c6:	ce 01       	movw	r24, r28
     6c8:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <_ZN7Display15ssd1306_commandEh>

	ssd1306_command(SSD1306_SETVCOMDETECT);                 // 0xDB
     6cc:	6b ed       	ldi	r22, 0xDB	; 219
     6ce:	ce 01       	movw	r24, r28
     6d0:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <_ZN7Display15ssd1306_commandEh>
	ssd1306_command(0x40);
     6d4:	60 e4       	ldi	r22, 0x40	; 64
     6d6:	ce 01       	movw	r24, r28
     6d8:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <_ZN7Display15ssd1306_commandEh>

	ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
     6dc:	64 ea       	ldi	r22, 0xA4	; 164
     6de:	ce 01       	movw	r24, r28
     6e0:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <_ZN7Display15ssd1306_commandEh>

	ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
     6e4:	66 ea       	ldi	r22, 0xA6	; 166
     6e6:	ce 01       	movw	r24, r28
     6e8:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <_ZN7Display15ssd1306_commandEh>

	ssd1306_command(SSD1306_DISPLAYON);                     //switch on OLED
     6ec:	6f ea       	ldi	r22, 0xAF	; 175
     6ee:	ce 01       	movw	r24, r28
     6f0:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <_ZN7Display15ssd1306_commandEh>
}
     6f4:	df 91       	pop	r29
     6f6:	cf 91       	pop	r28
     6f8:	08 95       	ret

000006fa <_ZN7DisplayC1Ev>:


#include "Display.h"

// default constructor
Display::Display()
     6fa:	cf 93       	push	r28
     6fc:	df 93       	push	r29
     6fe:	ec 01       	movw	r28, r24
     700:	9c 5f       	subi	r25, 0xFC	; 252
     702:	0e 94 22 1a 	call	0x3444	; 0x3444 <_ZN3I2CC1Ev>
{
	//for (uint8_t i=0;i<1024;i++)
	//{
		//Displayframe[i]=0;
	//}
	InitializeDisplay();
     706:	ce 01       	movw	r24, r28
     708:	0e 94 14 03 	call	0x628	; 0x628 <_ZN7Display17InitializeDisplayEv>
} //Display
     70c:	df 91       	pop	r29
     70e:	cf 91       	pop	r28
     710:	08 95       	ret

00000712 <_ZN7Display6invertEh>:

	ssd1306_command(SSD1306_DISPLAYON);                     //switch on OLED
}

void Display::invert(uint8_t inverted) {
	if (inverted) {
     712:	66 23       	and	r22, r22
     714:	21 f0       	breq	.+8      	; 0x71e <_ZN7Display6invertEh+0xc>
		ssd1306_command(SSD1306_INVERTDISPLAY);
     716:	67 ea       	ldi	r22, 0xA7	; 167
     718:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <_ZN7Display15ssd1306_commandEh>
     71c:	08 95       	ret
	}
	else {
		ssd1306_command(SSD1306_NORMALDISPLAY);
     71e:	66 ea       	ldi	r22, 0xA6	; 166
     720:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <_ZN7Display15ssd1306_commandEh>
     724:	08 95       	ret

00000726 <_ZN7Display9sendFrameEv>:
	}
}

void Display::sendFrame(){
     726:	ef 92       	push	r14
     728:	ff 92       	push	r15
     72a:	0f 93       	push	r16
     72c:	1f 93       	push	r17
     72e:	cf 93       	push	r28
     730:	df 93       	push	r29
     732:	8c 01       	movw	r16, r24
	//Cursor an den Anfang setzen
	ssd1306_command(SSD1306_COLUMNADDR);
     734:	61 e2       	ldi	r22, 0x21	; 33
     736:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <_ZN7Display15ssd1306_commandEh>
	ssd1306_command(0x00);
     73a:	60 e0       	ldi	r22, 0x00	; 0
     73c:	c8 01       	movw	r24, r16
     73e:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <_ZN7Display15ssd1306_commandEh>
	ssd1306_command(0x7F);
     742:	6f e7       	ldi	r22, 0x7F	; 127
     744:	c8 01       	movw	r24, r16
     746:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <_ZN7Display15ssd1306_commandEh>

	ssd1306_command(SSD1306_PAGEADDR);
     74a:	62 e2       	ldi	r22, 0x22	; 34
     74c:	c8 01       	movw	r24, r16
     74e:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <_ZN7Display15ssd1306_commandEh>
	ssd1306_command(0x00);
     752:	60 e0       	ldi	r22, 0x00	; 0
     754:	c8 01       	movw	r24, r16
     756:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <_ZN7Display15ssd1306_commandEh>
	ssd1306_command(0x07);
     75a:	67 e0       	ldi	r22, 0x07	; 7
     75c:	c8 01       	movw	r24, r16
     75e:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <_ZN7Display15ssd1306_commandEh>

	i2c.twi_start();
     762:	78 01       	movw	r14, r16
     764:	8c ef       	ldi	r24, 0xFC	; 252
     766:	f8 1a       	sub	r15, r24
     768:	c7 01       	movw	r24, r14
     76a:	0e 94 27 1a 	call	0x344e	; 0x344e <_ZN3I2C9twi_startEv>
	i2c.twi_write(OLEDADRESSE);
     76e:	68 e7       	ldi	r22, 0x78	; 120
     770:	c7 01       	movw	r24, r14
     772:	0e 94 2f 1a 	call	0x345e	; 0x345e <_ZN3I2C9twi_writeEh>
	i2c.twi_write(OLEDDATA);
     776:	60 e4       	ldi	r22, 0x40	; 64
     778:	c7 01       	movw	r24, r14
     77a:	0e 94 2f 1a 	call	0x345e	; 0x345e <_ZN3I2C9twi_writeEh>
	
	for(uint16_t i=0; i<1024;i++){
     77e:	c0 e0       	ldi	r28, 0x00	; 0
     780:	d0 e0       	ldi	r29, 0x00	; 0
		i2c.twi_write(Displayframe[i]);
     782:	f8 01       	movw	r30, r16
     784:	61 91       	ld	r22, Z+
     786:	8f 01       	movw	r16, r30
     788:	c7 01       	movw	r24, r14
     78a:	0e 94 2f 1a 	call	0x345e	; 0x345e <_ZN3I2C9twi_writeEh>

	i2c.twi_start();
	i2c.twi_write(OLEDADRESSE);
	i2c.twi_write(OLEDDATA);
	
	for(uint16_t i=0; i<1024;i++){
     78e:	21 96       	adiw	r28, 0x01	; 1
     790:	c1 15       	cp	r28, r1
     792:	f4 e0       	ldi	r31, 0x04	; 4
     794:	df 07       	cpc	r29, r31
     796:	a9 f7       	brne	.-22     	; 0x782 <_ZN7Display9sendFrameEv+0x5c>
		i2c.twi_write(Displayframe[i]);
	}
	i2c.twi_stop();
     798:	c7 01       	movw	r24, r14
     79a:	0e 94 2b 1a 	call	0x3456	; 0x3456 <_ZN3I2C8twi_stopEv>
}
     79e:	df 91       	pop	r29
     7a0:	cf 91       	pop	r28
     7a2:	1f 91       	pop	r17
     7a4:	0f 91       	pop	r16
     7a6:	ff 90       	pop	r15
     7a8:	ef 90       	pop	r14
     7aa:	08 95       	ret

000007ac <_ZN7Display9drawPixelEhhh>:

void Display::drawPixel(uint8_t pos_x, uint8_t pos_y, uint8_t erase){
	if(!(pos_x >= SSD1306_WIDTH || pos_y >= SSD1306_HEIGHT)){
     7ac:	66 23       	and	r22, r22
     7ae:	bc f1       	brlt	.+110    	; 0x81e <_ZN7Display9drawPixelEhhh+0x72>
     7b0:	40 34       	cpi	r20, 0x40	; 64
     7b2:	a8 f5       	brcc	.+106    	; 0x81e <_ZN7Display9drawPixelEhhh+0x72>
		if(!erase){
     7b4:	21 11       	cpse	r18, r1
     7b6:	19 c0       	rjmp	.+50     	; 0x7ea <_ZN7Display9drawPixelEhhh+0x3e>
			Displayframe[pos_x+(pos_y/8)*SSD1306_WIDTH] |= (1 << (pos_y&7));
     7b8:	e4 2f       	mov	r30, r20
     7ba:	e6 95       	lsr	r30
     7bc:	e6 95       	lsr	r30
     7be:	e6 95       	lsr	r30
     7c0:	20 e8       	ldi	r18, 0x80	; 128
     7c2:	e2 9f       	mul	r30, r18
     7c4:	f0 01       	movw	r30, r0
     7c6:	11 24       	eor	r1, r1
     7c8:	e6 0f       	add	r30, r22
     7ca:	f1 1d       	adc	r31, r1
     7cc:	e8 0f       	add	r30, r24
     7ce:	f9 1f       	adc	r31, r25
     7d0:	47 70       	andi	r20, 0x07	; 7
     7d2:	21 e0       	ldi	r18, 0x01	; 1
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	c9 01       	movw	r24, r18
     7d8:	02 c0       	rjmp	.+4      	; 0x7de <_ZN7Display9drawPixelEhhh+0x32>
     7da:	88 0f       	add	r24, r24
     7dc:	99 1f       	adc	r25, r25
     7de:	4a 95       	dec	r20
     7e0:	e2 f7       	brpl	.-8      	; 0x7da <_ZN7Display9drawPixelEhhh+0x2e>
     7e2:	90 81       	ld	r25, Z
     7e4:	89 2b       	or	r24, r25
     7e6:	80 83       	st	Z, r24
     7e8:	08 95       	ret
		}
		else {
			Displayframe[pos_x+(pos_y/8)*SSD1306_WIDTH] &= ~(1 << (pos_y&7));
     7ea:	e4 2f       	mov	r30, r20
     7ec:	e6 95       	lsr	r30
     7ee:	e6 95       	lsr	r30
     7f0:	e6 95       	lsr	r30
     7f2:	30 e8       	ldi	r19, 0x80	; 128
     7f4:	e3 9f       	mul	r30, r19
     7f6:	f0 01       	movw	r30, r0
     7f8:	11 24       	eor	r1, r1
     7fa:	e6 0f       	add	r30, r22
     7fc:	f1 1d       	adc	r31, r1
     7fe:	e8 0f       	add	r30, r24
     800:	f9 1f       	adc	r31, r25
     802:	47 70       	andi	r20, 0x07	; 7
     804:	81 e0       	ldi	r24, 0x01	; 1
     806:	90 e0       	ldi	r25, 0x00	; 0
     808:	9c 01       	movw	r18, r24
     80a:	02 c0       	rjmp	.+4      	; 0x810 <_ZN7Display9drawPixelEhhh+0x64>
     80c:	22 0f       	add	r18, r18
     80e:	33 1f       	adc	r19, r19
     810:	4a 95       	dec	r20
     812:	e2 f7       	brpl	.-8      	; 0x80c <_ZN7Display9drawPixelEhhh+0x60>
     814:	a9 01       	movw	r20, r18
     816:	40 95       	com	r20
     818:	80 81       	ld	r24, Z
     81a:	48 23       	and	r20, r24
     81c:	40 83       	st	Z, r20
     81e:	08 95       	ret

00000820 <_ZN7Display9draw_lineEhhhf>:
		}
	}
}

//eigene Zeichenfunktionen
void Display::draw_line(uint8_t x, uint8_t y, uint8_t length, float phi){
     820:	2f 92       	push	r2
     822:	3f 92       	push	r3
     824:	4f 92       	push	r4
     826:	5f 92       	push	r5
     828:	6f 92       	push	r6
     82a:	7f 92       	push	r7
     82c:	8f 92       	push	r8
     82e:	9f 92       	push	r9
     830:	af 92       	push	r10
     832:	bf 92       	push	r11
     834:	cf 92       	push	r12
     836:	df 92       	push	r13
     838:	ef 92       	push	r14
     83a:	ff 92       	push	r15
     83c:	0f 93       	push	r16
     83e:	1f 93       	push	r17
     840:	cf 93       	push	r28
     842:	df 93       	push	r29
     844:	cd b7       	in	r28, 0x3d	; 61
     846:	de b7       	in	r29, 0x3e	; 62
     848:	2b 97       	sbiw	r28, 0x0b	; 11
     84a:	0f b6       	in	r0, 0x3f	; 63
     84c:	f8 94       	cli
     84e:	de bf       	out	0x3e, r29	; 62
     850:	0f be       	out	0x3f, r0	; 63
     852:	cd bf       	out	0x3d, r28	; 61
     854:	1c 01       	movw	r2, r24
     856:	d6 2e       	mov	r13, r22
     858:	c4 2e       	mov	r12, r20
     85a:	29 83       	std	Y+1, r18	; 0x01
	//phi*=M_PI/180.0;
	uint8_t pos_x=0, pos_y=0;
	for (uint8_t i=0;i<length;i++)
     85c:	22 23       	and	r18, r18
     85e:	09 f4       	brne	.+2      	; 0x862 <_ZN7Display9draw_lineEhhhf+0x42>
     860:	69 c0       	rjmp	.+210    	; 0x934 <__stack+0x35>
	{
		pos_x=(uint8_t) (-i*cos(phi)+x);
     862:	c8 01       	movw	r24, r16
     864:	b7 01       	movw	r22, r14
     866:	0e 94 37 21 	call	0x426e	; 0x426e <cos>
     86a:	2b 01       	movw	r4, r22
     86c:	3c 01       	movw	r6, r24
		pos_y=(uint8_t) (i*sin(phi)+y);
     86e:	c8 01       	movw	r24, r16
     870:	b7 01       	movw	r22, r14
     872:	0e 94 96 23 	call	0x472c	; 0x472c <sin>
     876:	4b 01       	movw	r8, r22
     878:	5c 01       	movw	r10, r24
     87a:	1b 86       	std	Y+11, r1	; 0x0b
     87c:	1a 86       	std	Y+10, r1	; 0x0a
     87e:	8c 2d       	mov	r24, r12
     880:	90 e0       	ldi	r25, 0x00	; 0
     882:	a0 e0       	ldi	r26, 0x00	; 0
     884:	b0 e0       	ldi	r27, 0x00	; 0
     886:	8a 83       	std	Y+2, r24	; 0x02
     888:	9b 83       	std	Y+3, r25	; 0x03
     88a:	ac 83       	std	Y+4, r26	; 0x04
     88c:	bd 83       	std	Y+5, r27	; 0x05
void Display::draw_line(uint8_t x, uint8_t y, uint8_t length, float phi){
	//phi*=M_PI/180.0;
	uint8_t pos_x=0, pos_y=0;
	for (uint8_t i=0;i<length;i++)
	{
		pos_x=(uint8_t) (-i*cos(phi)+x);
     88e:	8d 2d       	mov	r24, r13
     890:	90 e0       	ldi	r25, 0x00	; 0
     892:	a0 e0       	ldi	r26, 0x00	; 0
     894:	b0 e0       	ldi	r27, 0x00	; 0
     896:	8e 83       	std	Y+6, r24	; 0x06
     898:	9f 83       	std	Y+7, r25	; 0x07
     89a:	a8 87       	std	Y+8, r26	; 0x08
     89c:	b9 87       	std	Y+9, r27	; 0x09
		pos_y=(uint8_t) (i*sin(phi)+y);
     89e:	aa 85       	ldd	r26, Y+10	; 0x0a
     8a0:	bb 85       	ldd	r27, Y+11	; 0x0b
     8a2:	bd 01       	movw	r22, r26
     8a4:	88 27       	eor	r24, r24
     8a6:	77 fd       	sbrc	r23, 7
     8a8:	80 95       	com	r24
     8aa:	98 2f       	mov	r25, r24
     8ac:	0e 94 d5 21 	call	0x43aa	; 0x43aa <__floatsisf>
     8b0:	a5 01       	movw	r20, r10
     8b2:	94 01       	movw	r18, r8
     8b4:	0e 94 33 23 	call	0x4666	; 0x4666 <__mulsf3>
     8b8:	6b 01       	movw	r12, r22
     8ba:	7c 01       	movw	r14, r24
     8bc:	6a 81       	ldd	r22, Y+2	; 0x02
     8be:	7b 81       	ldd	r23, Y+3	; 0x03
     8c0:	8c 81       	ldd	r24, Y+4	; 0x04
     8c2:	9d 81       	ldd	r25, Y+5	; 0x05
     8c4:	0e 94 d5 21 	call	0x43aa	; 0x43aa <__floatsisf>
     8c8:	9b 01       	movw	r18, r22
     8ca:	ac 01       	movw	r20, r24
     8cc:	c7 01       	movw	r24, r14
     8ce:	b6 01       	movw	r22, r12
     8d0:	0e 94 6d 20 	call	0x40da	; 0x40da <__addsf3>
     8d4:	0e 94 a7 21 	call	0x434e	; 0x434e <__fixunssfsi>
     8d8:	16 2f       	mov	r17, r22
     8da:	6a 85       	ldd	r22, Y+10	; 0x0a
     8dc:	7b 85       	ldd	r23, Y+11	; 0x0b
     8de:	71 95       	neg	r23
     8e0:	61 95       	neg	r22
     8e2:	71 09       	sbc	r23, r1
void Display::draw_line(uint8_t x, uint8_t y, uint8_t length, float phi){
	//phi*=M_PI/180.0;
	uint8_t pos_x=0, pos_y=0;
	for (uint8_t i=0;i<length;i++)
	{
		pos_x=(uint8_t) (-i*cos(phi)+x);
     8e4:	88 27       	eor	r24, r24
     8e6:	77 fd       	sbrc	r23, 7
     8e8:	80 95       	com	r24
     8ea:	98 2f       	mov	r25, r24
     8ec:	0e 94 d5 21 	call	0x43aa	; 0x43aa <__floatsisf>
     8f0:	a3 01       	movw	r20, r6
     8f2:	92 01       	movw	r18, r4
     8f4:	0e 94 33 23 	call	0x4666	; 0x4666 <__mulsf3>
     8f8:	6b 01       	movw	r12, r22
     8fa:	7c 01       	movw	r14, r24
     8fc:	6e 81       	ldd	r22, Y+6	; 0x06
     8fe:	7f 81       	ldd	r23, Y+7	; 0x07
     900:	88 85       	ldd	r24, Y+8	; 0x08
     902:	99 85       	ldd	r25, Y+9	; 0x09
     904:	0e 94 d5 21 	call	0x43aa	; 0x43aa <__floatsisf>
     908:	9b 01       	movw	r18, r22
     90a:	ac 01       	movw	r20, r24
     90c:	c7 01       	movw	r24, r14
     90e:	b6 01       	movw	r22, r12
     910:	0e 94 6d 20 	call	0x40da	; 0x40da <__addsf3>
     914:	0e 94 a7 21 	call	0x434e	; 0x434e <__fixunssfsi>
		pos_y=(uint8_t) (i*sin(phi)+y);
		drawPixel(pos_x,pos_y,0);
     918:	20 e0       	ldi	r18, 0x00	; 0
     91a:	41 2f       	mov	r20, r17
     91c:	c1 01       	movw	r24, r2
     91e:	0e 94 d6 03 	call	0x7ac	; 0x7ac <_ZN7Display9drawPixelEhhh>
     922:	ea 85       	ldd	r30, Y+10	; 0x0a
     924:	fb 85       	ldd	r31, Y+11	; 0x0b
     926:	31 96       	adiw	r30, 0x01	; 1
     928:	fb 87       	std	Y+11, r31	; 0x0b
     92a:	ea 87       	std	Y+10, r30	; 0x0a

//eigene Zeichenfunktionen
void Display::draw_line(uint8_t x, uint8_t y, uint8_t length, float phi){
	//phi*=M_PI/180.0;
	uint8_t pos_x=0, pos_y=0;
	for (uint8_t i=0;i<length;i++)
     92c:	f9 81       	ldd	r31, Y+1	; 0x01
     92e:	ef 17       	cp	r30, r31
     930:	08 f4       	brcc	.+2      	; 0x934 <__stack+0x35>
     932:	b5 cf       	rjmp	.-150    	; 0x89e <_ZN7Display9draw_lineEhhhf+0x7e>
	{
		pos_x=(uint8_t) (-i*cos(phi)+x);
		pos_y=(uint8_t) (i*sin(phi)+y);
		drawPixel(pos_x,pos_y,0);
	}
}
     934:	2b 96       	adiw	r28, 0x0b	; 11
     936:	0f b6       	in	r0, 0x3f	; 63
     938:	f8 94       	cli
     93a:	de bf       	out	0x3e, r29	; 62
     93c:	0f be       	out	0x3f, r0	; 63
     93e:	cd bf       	out	0x3d, r28	; 61
     940:	df 91       	pop	r29
     942:	cf 91       	pop	r28
     944:	1f 91       	pop	r17
     946:	0f 91       	pop	r16
     948:	ff 90       	pop	r15
     94a:	ef 90       	pop	r14
     94c:	df 90       	pop	r13
     94e:	cf 90       	pop	r12
     950:	bf 90       	pop	r11
     952:	af 90       	pop	r10
     954:	9f 90       	pop	r9
     956:	8f 90       	pop	r8
     958:	7f 90       	pop	r7
     95a:	6f 90       	pop	r6
     95c:	5f 90       	pop	r5
     95e:	4f 90       	pop	r4
     960:	3f 90       	pop	r3
     962:	2f 90       	pop	r2
     964:	08 95       	ret

00000966 <_ZN7Display13draw_triangleEhhhff>:

//using basecenterpoint as turningpoint for rotation
//upright triangle has rotationangle of 0
//turning clockwise considered in x transformation
//baseangle=70 is for 1/3 type
void Display::draw_triangle(uint8_t basecenter_x, uint8_t basecenter_y, uint8_t baselength, float baseangle, float rotationangle){
     966:	2f 92       	push	r2
     968:	3f 92       	push	r3
     96a:	4f 92       	push	r4
     96c:	5f 92       	push	r5
     96e:	6f 92       	push	r6
     970:	7f 92       	push	r7
     972:	8f 92       	push	r8
     974:	9f 92       	push	r9
     976:	af 92       	push	r10
     978:	bf 92       	push	r11
     97a:	cf 92       	push	r12
     97c:	df 92       	push	r13
     97e:	ef 92       	push	r14
     980:	ff 92       	push	r15
     982:	0f 93       	push	r16
     984:	1f 93       	push	r17
     986:	cf 93       	push	r28
     988:	df 93       	push	r29
     98a:	cd b7       	in	r28, 0x3d	; 61
     98c:	de b7       	in	r29, 0x3e	; 62
     98e:	60 97       	sbiw	r28, 0x10	; 16
     990:	0f b6       	in	r0, 0x3f	; 63
     992:	f8 94       	cli
     994:	de bf       	out	0x3e, r29	; 62
     996:	0f be       	out	0x3f, r0	; 63
     998:	cd bf       	out	0x3d, r28	; 61
     99a:	1c 01       	movw	r2, r24
     99c:	6f 87       	std	Y+15, r22	; 0x0f
     99e:	4d 83       	std	Y+5, r20	; 0x05
     9a0:	29 83       	std	Y+1, r18	; 0x01
     9a2:	c6 01       	movw	r24, r12
     9a4:	b5 01       	movw	r22, r10
	//correcting rotationangle
	rotationangle*=M_PI/180.0;
     9a6:	25 e3       	ldi	r18, 0x35	; 53
     9a8:	3a ef       	ldi	r19, 0xFA	; 250
     9aa:	4e e8       	ldi	r20, 0x8E	; 142
     9ac:	5c e3       	ldi	r21, 0x3C	; 60
     9ae:	0e 94 33 23 	call	0x4666	; 0x4666 <__mulsf3>
     9b2:	4b 01       	movw	r8, r22
     9b4:	5c 01       	movw	r10, r24
	baseangle*=M_PI/180.0;
     9b6:	25 e3       	ldi	r18, 0x35	; 53
     9b8:	3a ef       	ldi	r19, 0xFA	; 250
     9ba:	4e e8       	ldi	r20, 0x8E	; 142
     9bc:	5c e3       	ldi	r21, 0x3C	; 60
     9be:	c8 01       	movw	r24, r16
     9c0:	b7 01       	movw	r22, r14
     9c2:	0e 94 33 23 	call	0x4666	; 0x4666 <__mulsf3>
     9c6:	6e 83       	std	Y+6, r22	; 0x06
     9c8:	7f 83       	std	Y+7, r23	; 0x07
     9ca:	88 87       	std	Y+8, r24	; 0x08
     9cc:	99 87       	std	Y+9, r25	; 0x09
	//draw baseline
	draw_line(basecenter_x,basecenter_y,baselength/2,rotationangle);
     9ce:	79 80       	ldd	r7, Y+1	; 0x01
     9d0:	76 94       	lsr	r7
     9d2:	85 01       	movw	r16, r10
     9d4:	74 01       	movw	r14, r8
     9d6:	27 2d       	mov	r18, r7
     9d8:	4d 81       	ldd	r20, Y+5	; 0x05
     9da:	6f 85       	ldd	r22, Y+15	; 0x0f
     9dc:	c1 01       	movw	r24, r2
     9de:	0e 94 10 04 	call	0x820	; 0x820 <_ZN7Display9draw_lineEhhhf>
	draw_line(basecenter_x,basecenter_y,baselength/2,rotationangle-M_PI);
     9e2:	2b ed       	ldi	r18, 0xDB	; 219
     9e4:	3f e0       	ldi	r19, 0x0F	; 15
     9e6:	49 e4       	ldi	r20, 0x49	; 73
     9e8:	50 e4       	ldi	r21, 0x40	; 64
     9ea:	c5 01       	movw	r24, r10
     9ec:	b4 01       	movw	r22, r8
     9ee:	0e 94 6c 20 	call	0x40d8	; 0x40d8 <__subsf3>
     9f2:	7b 01       	movw	r14, r22
     9f4:	8c 01       	movw	r16, r24
     9f6:	27 2d       	mov	r18, r7
     9f8:	4d 81       	ldd	r20, Y+5	; 0x05
     9fa:	6f 85       	ldd	r22, Y+15	; 0x0f
     9fc:	c1 01       	movw	r24, r2
     9fe:	0e 94 10 04 	call	0x820	; 0x820 <_ZN7Display9draw_lineEhhhf>
	//draw midleline
	uint8_t middlelength=baselength/2*tan(baseangle);
     a02:	6e 81       	ldd	r22, Y+6	; 0x06
     a04:	7f 81       	ldd	r23, Y+7	; 0x07
     a06:	88 85       	ldd	r24, Y+8	; 0x08
     a08:	99 85       	ldd	r25, Y+9	; 0x09
     a0a:	0e 94 9f 23 	call	0x473e	; 0x473e <tan>
     a0e:	6b 01       	movw	r12, r22
     a10:	7c 01       	movw	r14, r24
     a12:	67 2d       	mov	r22, r7
     a14:	70 e0       	ldi	r23, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	90 e0       	ldi	r25, 0x00	; 0
     a1a:	0e 94 d5 21 	call	0x43aa	; 0x43aa <__floatsisf>
     a1e:	a7 01       	movw	r20, r14
     a20:	96 01       	movw	r18, r12
     a22:	0e 94 33 23 	call	0x4666	; 0x4666 <__mulsf3>
     a26:	0e 94 a7 21 	call	0x434e	; 0x434e <__fixunssfsi>
     a2a:	68 8b       	std	Y+16, r22	; 0x10
	draw_line(basecenter_x,basecenter_y,middlelength,rotationangle-M_PI_2);
     a2c:	2b ed       	ldi	r18, 0xDB	; 219
     a2e:	3f e0       	ldi	r19, 0x0F	; 15
     a30:	49 ec       	ldi	r20, 0xC9	; 201
     a32:	5f e3       	ldi	r21, 0x3F	; 63
     a34:	c5 01       	movw	r24, r10
     a36:	b4 01       	movw	r22, r8
     a38:	0e 94 6c 20 	call	0x40d8	; 0x40d8 <__subsf3>
     a3c:	6a 87       	std	Y+10, r22	; 0x0a
     a3e:	7b 87       	std	Y+11, r23	; 0x0b
     a40:	8c 87       	std	Y+12, r24	; 0x0c
     a42:	9d 87       	std	Y+13, r25	; 0x0d
     a44:	7b 01       	movw	r14, r22
     a46:	8c 01       	movw	r16, r24
     a48:	28 89       	ldd	r18, Y+16	; 0x10
     a4a:	4d 81       	ldd	r20, Y+5	; 0x05
     a4c:	6f 85       	ldd	r22, Y+15	; 0x0f
     a4e:	c1 01       	movw	r24, r2
     a50:	0e 94 10 04 	call	0x820	; 0x820 <_ZN7Display9draw_lineEhhhf>
	//draw left arm
	uint8_t lengtharm=baselength/(2*cos(baseangle));
     a54:	6e 81       	ldd	r22, Y+6	; 0x06
     a56:	7f 81       	ldd	r23, Y+7	; 0x07
     a58:	88 85       	ldd	r24, Y+8	; 0x08
     a5a:	99 85       	ldd	r25, Y+9	; 0x09
     a5c:	0e 94 37 21 	call	0x426e	; 0x426e <cos>
     a60:	6b 01       	movw	r12, r22
     a62:	7c 01       	movw	r14, r24
     a64:	29 81       	ldd	r18, Y+1	; 0x01
     a66:	62 2f       	mov	r22, r18
     a68:	70 e0       	ldi	r23, 0x00	; 0
     a6a:	80 e0       	ldi	r24, 0x00	; 0
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	0e 94 d5 21 	call	0x43aa	; 0x43aa <__floatsisf>
     a72:	2b 01       	movw	r4, r22
     a74:	3c 01       	movw	r6, r24
     a76:	a7 01       	movw	r20, r14
     a78:	96 01       	movw	r18, r12
     a7a:	c7 01       	movw	r24, r14
     a7c:	b6 01       	movw	r22, r12
     a7e:	0e 94 6d 20 	call	0x40da	; 0x40da <__addsf3>
     a82:	9b 01       	movw	r18, r22
     a84:	ac 01       	movw	r20, r24
     a86:	c3 01       	movw	r24, r6
     a88:	b2 01       	movw	r22, r4
     a8a:	0e 94 3a 21 	call	0x4274	; 0x4274 <__divsf3>
     a8e:	0e 94 a7 21 	call	0x434e	; 0x434e <__fixunssfsi>
     a92:	6e 87       	std	Y+14, r22	; 0x0e
	uint8_t sx = basecenter_x-middlelength*cos(rotationangle-M_PI_2);
     a94:	e8 89       	ldd	r30, Y+16	; 0x10
     a96:	6e 2f       	mov	r22, r30
     a98:	70 e0       	ldi	r23, 0x00	; 0
     a9a:	80 e0       	ldi	r24, 0x00	; 0
     a9c:	90 e0       	ldi	r25, 0x00	; 0
     a9e:	0e 94 d5 21 	call	0x43aa	; 0x43aa <__floatsisf>
     aa2:	69 83       	std	Y+1, r22	; 0x01
     aa4:	7a 83       	std	Y+2, r23	; 0x02
     aa6:	8b 83       	std	Y+3, r24	; 0x03
     aa8:	9c 83       	std	Y+4, r25	; 0x04
     aaa:	6a 85       	ldd	r22, Y+10	; 0x0a
     aac:	7b 85       	ldd	r23, Y+11	; 0x0b
     aae:	8c 85       	ldd	r24, Y+12	; 0x0c
     ab0:	9d 85       	ldd	r25, Y+13	; 0x0d
     ab2:	0e 94 37 21 	call	0x426e	; 0x426e <cos>
     ab6:	6b 01       	movw	r12, r22
     ab8:	7c 01       	movw	r14, r24
     aba:	ff 85       	ldd	r31, Y+15	; 0x0f
     abc:	6f 2f       	mov	r22, r31
     abe:	70 e0       	ldi	r23, 0x00	; 0
     ac0:	80 e0       	ldi	r24, 0x00	; 0
     ac2:	90 e0       	ldi	r25, 0x00	; 0
     ac4:	0e 94 d5 21 	call	0x43aa	; 0x43aa <__floatsisf>
     ac8:	2b 01       	movw	r4, r22
     aca:	3c 01       	movw	r6, r24
     acc:	a7 01       	movw	r20, r14
     ace:	96 01       	movw	r18, r12
     ad0:	69 81       	ldd	r22, Y+1	; 0x01
     ad2:	7a 81       	ldd	r23, Y+2	; 0x02
     ad4:	8b 81       	ldd	r24, Y+3	; 0x03
     ad6:	9c 81       	ldd	r25, Y+4	; 0x04
     ad8:	0e 94 33 23 	call	0x4666	; 0x4666 <__mulsf3>
     adc:	9b 01       	movw	r18, r22
     ade:	ac 01       	movw	r20, r24
     ae0:	c3 01       	movw	r24, r6
     ae2:	b2 01       	movw	r22, r4
     ae4:	0e 94 6c 20 	call	0x40d8	; 0x40d8 <__subsf3>
     ae8:	0e 94 a7 21 	call	0x434e	; 0x434e <__fixunssfsi>
     aec:	6f 87       	std	Y+15, r22	; 0x0f
	uint8_t sy = basecenter_y+middlelength*sin(rotationangle-M_PI_2);
     aee:	6a 85       	ldd	r22, Y+10	; 0x0a
     af0:	7b 85       	ldd	r23, Y+11	; 0x0b
     af2:	8c 85       	ldd	r24, Y+12	; 0x0c
     af4:	9d 85       	ldd	r25, Y+13	; 0x0d
     af6:	0e 94 96 23 	call	0x472c	; 0x472c <sin>
     afa:	6b 01       	movw	r12, r22
     afc:	7c 01       	movw	r14, r24
     afe:	2d 81       	ldd	r18, Y+5	; 0x05
     b00:	62 2f       	mov	r22, r18
     b02:	70 e0       	ldi	r23, 0x00	; 0
     b04:	80 e0       	ldi	r24, 0x00	; 0
     b06:	90 e0       	ldi	r25, 0x00	; 0
     b08:	0e 94 d5 21 	call	0x43aa	; 0x43aa <__floatsisf>
     b0c:	2b 01       	movw	r4, r22
     b0e:	3c 01       	movw	r6, r24
     b10:	a7 01       	movw	r20, r14
     b12:	96 01       	movw	r18, r12
     b14:	69 81       	ldd	r22, Y+1	; 0x01
     b16:	7a 81       	ldd	r23, Y+2	; 0x02
     b18:	8b 81       	ldd	r24, Y+3	; 0x03
     b1a:	9c 81       	ldd	r25, Y+4	; 0x04
     b1c:	0e 94 33 23 	call	0x4666	; 0x4666 <__mulsf3>
     b20:	9b 01       	movw	r18, r22
     b22:	ac 01       	movw	r20, r24
     b24:	c3 01       	movw	r24, r6
     b26:	b2 01       	movw	r22, r4
     b28:	0e 94 6d 20 	call	0x40da	; 0x40da <__addsf3>
     b2c:	0e 94 a7 21 	call	0x434e	; 0x434e <__fixunssfsi>
     b30:	d6 2e       	mov	r13, r22
	draw_line(sx,sy,lengtharm,baseangle+rotationangle);
     b32:	a5 01       	movw	r20, r10
     b34:	94 01       	movw	r18, r8
     b36:	6e 81       	ldd	r22, Y+6	; 0x06
     b38:	7f 81       	ldd	r23, Y+7	; 0x07
     b3a:	88 85       	ldd	r24, Y+8	; 0x08
     b3c:	99 85       	ldd	r25, Y+9	; 0x09
     b3e:	0e 94 6d 20 	call	0x40da	; 0x40da <__addsf3>
     b42:	7b 01       	movw	r14, r22
     b44:	8c 01       	movw	r16, r24
     b46:	2e 85       	ldd	r18, Y+14	; 0x0e
     b48:	4d 2d       	mov	r20, r13
     b4a:	6f 85       	ldd	r22, Y+15	; 0x0f
     b4c:	c1 01       	movw	r24, r2
     b4e:	0e 94 10 04 	call	0x820	; 0x820 <_ZN7Display9draw_lineEhhhf>
	//draw right arm
	draw_line(sx,sy,lengtharm,-baseangle+rotationangle-M_PI);
     b52:	2e 81       	ldd	r18, Y+6	; 0x06
     b54:	3f 81       	ldd	r19, Y+7	; 0x07
     b56:	48 85       	ldd	r20, Y+8	; 0x08
     b58:	59 85       	ldd	r21, Y+9	; 0x09
     b5a:	c5 01       	movw	r24, r10
     b5c:	b4 01       	movw	r22, r8
     b5e:	0e 94 6c 20 	call	0x40d8	; 0x40d8 <__subsf3>
     b62:	2b ed       	ldi	r18, 0xDB	; 219
     b64:	3f e0       	ldi	r19, 0x0F	; 15
     b66:	49 e4       	ldi	r20, 0x49	; 73
     b68:	50 e4       	ldi	r21, 0x40	; 64
     b6a:	0e 94 6c 20 	call	0x40d8	; 0x40d8 <__subsf3>
     b6e:	7b 01       	movw	r14, r22
     b70:	8c 01       	movw	r16, r24
     b72:	2e 85       	ldd	r18, Y+14	; 0x0e
     b74:	4d 2d       	mov	r20, r13
     b76:	6f 85       	ldd	r22, Y+15	; 0x0f
     b78:	c1 01       	movw	r24, r2
     b7a:	0e 94 10 04 	call	0x820	; 0x820 <_ZN7Display9draw_lineEhhhf>
}
     b7e:	60 96       	adiw	r28, 0x10	; 16
     b80:	0f b6       	in	r0, 0x3f	; 63
     b82:	f8 94       	cli
     b84:	de bf       	out	0x3e, r29	; 62
     b86:	0f be       	out	0x3f, r0	; 63
     b88:	cd bf       	out	0x3d, r28	; 61
     b8a:	df 91       	pop	r29
     b8c:	cf 91       	pop	r28
     b8e:	1f 91       	pop	r17
     b90:	0f 91       	pop	r16
     b92:	ff 90       	pop	r15
     b94:	ef 90       	pop	r14
     b96:	df 90       	pop	r13
     b98:	cf 90       	pop	r12
     b9a:	bf 90       	pop	r11
     b9c:	af 90       	pop	r10
     b9e:	9f 90       	pop	r9
     ba0:	8f 90       	pop	r8
     ba2:	7f 90       	pop	r7
     ba4:	6f 90       	pop	r6
     ba6:	5f 90       	pop	r5
     ba8:	4f 90       	pop	r4
     baa:	3f 90       	pop	r3
     bac:	2f 90       	pop	r2
     bae:	08 95       	ret

00000bb0 <_ZN7Display9draw_ASCIEhhh>:

void Display::draw_ASCI(uint8_t sym,uint8_t x, uint8_t y){
     bb0:	0f 93       	push	r16
     bb2:	1f 93       	push	r17
     bb4:	cf 93       	push	r28
     bb6:	df 93       	push	r29
	if(sym!=' ' && sym>=33){
     bb8:	61 32       	cpi	r22, 0x21	; 33
     bba:	08 f4       	brcc	.+2      	; 0xbbe <_ZN7Display9draw_ASCIEhhh+0xe>
     bbc:	42 c0       	rjmp	.+132    	; 0xc42 <_ZN7Display9draw_ASCIEhhh+0x92>
		sym-=33;
		uint16_t symbol;
		for(uint8_t i = 0; i < 5; i++){
			symbol = pgm_read_byte(&font5x8[sym][i]);
			symbol = symbol << y%8;
			Displayframe[x+(y/8)*SSD1306_WIDTH+i] |=(uint8_t) (symbol & 0x00FF);
     bbe:	a4 2f       	mov	r26, r20
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	02 2f       	mov	r16, r18
     bc4:	06 95       	lsr	r16
     bc6:	06 95       	lsr	r16
     bc8:	06 95       	lsr	r16
     bca:	30 e8       	ldi	r19, 0x80	; 128
     bcc:	03 9f       	mul	r16, r19
     bce:	80 01       	movw	r16, r0
     bd0:	11 24       	eor	r1, r1
     bd2:	ed 01       	movw	r28, r26
     bd4:	c0 0f       	add	r28, r16
     bd6:	d1 1f       	adc	r29, r17
			if(((symbol&0xFF00)>>8)==0){
				Displayframe[x+(y/8+1)*SSD1306_WIDTH+i] |= 0;
			}
			else {
				Displayframe[x+(y/8+1)*SSD1306_WIDTH+i] |= (uint8_t) ((symbol & 0xFF00)>>8);
     bd8:	00 58       	subi	r16, 0x80	; 128
     bda:	1f 4f       	sbci	r17, 0xFF	; 255
     bdc:	0a 0f       	add	r16, r26
     bde:	1b 1f       	adc	r17, r27
	draw_line(sx,sy,lengtharm,-baseangle+rotationangle-M_PI);
}

void Display::draw_ASCI(uint8_t sym,uint8_t x, uint8_t y){
	if(sym!=' ' && sym>=33){
		sym-=33;
     be0:	61 52       	subi	r22, 0x21	; 33
     be2:	46 2f       	mov	r20, r22
     be4:	50 e0       	ldi	r21, 0x00	; 0
     be6:	fa 01       	movw	r30, r20
     be8:	ee 0f       	add	r30, r30
     bea:	ff 1f       	adc	r31, r31
     bec:	ee 0f       	add	r30, r30
     bee:	ff 1f       	adc	r31, r31
     bf0:	e4 0f       	add	r30, r20
     bf2:	f5 1f       	adc	r31, r21
     bf4:	ee 55       	subi	r30, 0x5E	; 94
     bf6:	fd 4f       	sbci	r31, 0xFD	; 253
     bf8:	dc 01       	movw	r26, r24
     bfa:	ac 0f       	add	r26, r28
     bfc:	bd 1f       	adc	r27, r29
     bfe:	ae 01       	movw	r20, r28
     c00:	05 96       	adiw	r24, 0x05	; 5
     c02:	8c 0f       	add	r24, r28
     c04:	9d 1f       	adc	r25, r29
		uint16_t symbol;
		for(uint8_t i = 0; i < 5; i++){
			symbol = pgm_read_byte(&font5x8[sym][i]);
			symbol = symbol << y%8;
     c06:	27 70       	andi	r18, 0x07	; 7
void Display::draw_ASCI(uint8_t sym,uint8_t x, uint8_t y){
	if(sym!=' ' && sym>=33){
		sym-=33;
		uint16_t symbol;
		for(uint8_t i = 0; i < 5; i++){
			symbol = pgm_read_byte(&font5x8[sym][i]);
     c08:	64 91       	lpm	r22, Z
     c0a:	70 e0       	ldi	r23, 0x00	; 0
			symbol = symbol << y%8;
     c0c:	02 2e       	mov	r0, r18
     c0e:	02 c0       	rjmp	.+4      	; 0xc14 <_ZN7Display9draw_ASCIEhhh+0x64>
     c10:	66 0f       	add	r22, r22
     c12:	77 1f       	adc	r23, r23
     c14:	0a 94       	dec	r0
     c16:	e2 f7       	brpl	.-8      	; 0xc10 <_ZN7Display9draw_ASCIEhhh+0x60>
			Displayframe[x+(y/8)*SSD1306_WIDTH+i] |=(uint8_t) (symbol & 0x00FF);
     c18:	3c 91       	ld	r19, X
     c1a:	36 2b       	or	r19, r22
     c1c:	3c 93       	st	X, r19
			if(((symbol&0xFF00)>>8)==0){
     c1e:	67 2f       	mov	r22, r23
     c20:	77 27       	eor	r23, r23
     c22:	61 15       	cp	r22, r1
     c24:	71 05       	cpc	r23, r1
     c26:	41 f0       	breq	.+16     	; 0xc38 <_ZN7Display9draw_ASCIEhhh+0x88>
     c28:	ed 01       	movw	r28, r26
     c2a:	c4 1b       	sub	r28, r20
     c2c:	d5 0b       	sbc	r29, r21
     c2e:	c0 0f       	add	r28, r16
     c30:	d1 1f       	adc	r29, r17
				Displayframe[x+(y/8+1)*SSD1306_WIDTH+i] |= 0;
			}
			else {
				Displayframe[x+(y/8+1)*SSD1306_WIDTH+i] |= (uint8_t) ((symbol & 0xFF00)>>8);
     c32:	38 81       	ld	r19, Y
     c34:	63 2b       	or	r22, r19
     c36:	68 83       	st	Y, r22
     c38:	31 96       	adiw	r30, 0x01	; 1
     c3a:	11 96       	adiw	r26, 0x01	; 1

void Display::draw_ASCI(uint8_t sym,uint8_t x, uint8_t y){
	if(sym!=' ' && sym>=33){
		sym-=33;
		uint16_t symbol;
		for(uint8_t i = 0; i < 5; i++){
     c3c:	a8 17       	cp	r26, r24
     c3e:	b9 07       	cpc	r27, r25
     c40:	19 f7       	brne	.-58     	; 0xc08 <_ZN7Display9draw_ASCIEhhh+0x58>
	else{
		for(uint8_t i = 0; i < 7; i++){
			Displayframe[x+(y/8)*SSD1306_WIDTH+i] |= 0;
		}
	}
}
     c42:	df 91       	pop	r29
     c44:	cf 91       	pop	r28
     c46:	1f 91       	pop	r17
     c48:	0f 91       	pop	r16
     c4a:	08 95       	ret

00000c4c <_ZN7Display16draw_number16x16Ehhh>:

void Display::draw_number16x16(uint8_t number, uint8_t x, uint8_t y){
     c4c:	ef 92       	push	r14
     c4e:	ff 92       	push	r15
     c50:	0f 93       	push	r16
     c52:	1f 93       	push	r17
     c54:	cf 93       	push	r28
     c56:	df 93       	push	r29
	uint16_t symbol;
	if(number>=0 && number<10){
     c58:	6a 30       	cpi	r22, 0x0A	; 10
     c5a:	08 f0       	brcs	.+2      	; 0xc5e <_ZN7Display16draw_number16x16Ehhh+0x12>
     c5c:	66 c0       	rjmp	.+204    	; 0xd2a <_ZN7Display16draw_number16x16Ehhh+0xde>
		for(uint8_t i = 0; i < 32;i++){
			symbol = pgm_read_byte(&digits16x16[number][i]);
			symbol = symbol << y%8;
			if(i<16){
				Displayframe[x+(y/8)*SSD1306_WIDTH+i] |=(uint8_t) (symbol & 0x00FF);
     c5e:	50 e0       	ldi	r21, 0x00	; 0
     c60:	02 2f       	mov	r16, r18
     c62:	06 95       	lsr	r16
     c64:	06 95       	lsr	r16
     c66:	06 95       	lsr	r16
     c68:	10 e0       	ldi	r17, 0x00	; 0
     c6a:	d8 01       	movw	r26, r16
     c6c:	b6 95       	lsr	r27
     c6e:	ba 2f       	mov	r27, r26
     c70:	aa 27       	eor	r26, r26
     c72:	b7 95       	ror	r27
     c74:	a7 95       	ror	r26
				if(((symbol&0xFF00)>>8)==0){
					Displayframe[x+(y/8+1)*SSD1306_WIDTH+i] |= 0;
				}
				else {
					Displayframe[x+(y/8+1)*SSD1306_WIDTH+i] |= (uint8_t) ((symbol & 0xFF00)>>8);
     c76:	0f 5f       	subi	r16, 0xFF	; 255
     c78:	1f 4f       	sbci	r17, 0xFF	; 255
				}
			}
			else {
				Displayframe[x+(y/8+1)*SSD1306_WIDTH+(i-16)] |= (uint8_t) (symbol & 0x00FF);
     c7a:	16 95       	lsr	r17
     c7c:	10 2f       	mov	r17, r16
     c7e:	00 27       	eor	r16, r16
     c80:	17 95       	ror	r17
     c82:	07 95       	ror	r16
				Displayframe[x+(y/8)*SSD1306_WIDTH+i] |=(uint8_t) (symbol & 0x00FF);
				if(((symbol&0xFF00)>>8)==0){
					Displayframe[x+(y/8+1)*SSD1306_WIDTH+i] |= 0;
				}
				else {
					Displayframe[x+(y/8+1)*SSD1306_WIDTH+i] |= (uint8_t) ((symbol & 0xFF00)>>8);
     c84:	7d 01       	movw	r14, r26
     c86:	30 e8       	ldi	r19, 0x80	; 128
     c88:	e3 0e       	add	r14, r19
     c8a:	f1 1c       	adc	r15, r1
     c8c:	e4 0e       	add	r14, r20
     c8e:	f5 1e       	adc	r15, r21
     c90:	e8 0e       	add	r14, r24
     c92:	f9 1e       	adc	r15, r25
				}
			}
			else {
				Displayframe[x+(y/8+1)*SSD1306_WIDTH+(i-16)] |= (uint8_t) (symbol & 0x00FF);
     c94:	ea 01       	movw	r28, r20
     c96:	c0 0f       	add	r28, r16
     c98:	d1 1f       	adc	r29, r17
     c9a:	60 97       	sbiw	r28, 0x10	; 16
     c9c:	c8 0f       	add	r28, r24
     c9e:	d9 1f       	adc	r29, r25
				if(((symbol&0xFF00)>>8)==0){
					Displayframe[x+(y/8+2)*SSD1306_WIDTH+(i-16)] |= 0;
				}
				else {
					Displayframe[x+(y/8+2)*SSD1306_WIDTH+(i-16)] |= (uint8_t) ((symbol & 0xFF00)>>8);
     ca0:	04 0f       	add	r16, r20
     ca2:	15 1f       	adc	r17, r21
     ca4:	00 59       	subi	r16, 0x90	; 144
     ca6:	1f 4f       	sbci	r17, 0xFF	; 255
     ca8:	08 0f       	add	r16, r24
     caa:	19 1f       	adc	r17, r25
	if(number>=0 && number<10){
		for(uint8_t i = 0; i < 32;i++){
			symbol = pgm_read_byte(&digits16x16[number][i]);
			symbol = symbol << y%8;
			if(i<16){
				Displayframe[x+(y/8)*SSD1306_WIDTH+i] |=(uint8_t) (symbol & 0x00FF);
     cac:	a4 0f       	add	r26, r20
     cae:	b5 1f       	adc	r27, r21
     cb0:	a8 0f       	add	r26, r24
     cb2:	b9 1f       	adc	r27, r25
     cb4:	e0 e2       	ldi	r30, 0x20	; 32
     cb6:	6e 9f       	mul	r22, r30
     cb8:	c0 01       	movw	r24, r0
     cba:	11 24       	eor	r1, r1
				Displayframe[x+(y/8+1)*SSD1306_WIDTH+(i-16)] |= (uint8_t) (symbol & 0x00FF);
				if(((symbol&0xFF00)>>8)==0){
					Displayframe[x+(y/8+2)*SSD1306_WIDTH+(i-16)] |= 0;
				}
				else {
					Displayframe[x+(y/8+2)*SSD1306_WIDTH+(i-16)] |= (uint8_t) ((symbol & 0xFF00)>>8);
     cbc:	40 e0       	ldi	r20, 0x00	; 0
     cbe:	50 e0       	ldi	r21, 0x00	; 0
     cc0:	8e 59       	subi	r24, 0x9E	; 158
     cc2:	9e 4f       	sbci	r25, 0xFE	; 254
void Display::draw_number16x16(uint8_t number, uint8_t x, uint8_t y){
	uint16_t symbol;
	if(number>=0 && number<10){
		for(uint8_t i = 0; i < 32;i++){
			symbol = pgm_read_byte(&digits16x16[number][i]);
			symbol = symbol << y%8;
     cc4:	27 70       	andi	r18, 0x07	; 7
     cc6:	fc 01       	movw	r30, r24
     cc8:	e4 0f       	add	r30, r20
     cca:	f5 1f       	adc	r31, r21

void Display::draw_number16x16(uint8_t number, uint8_t x, uint8_t y){
	uint16_t symbol;
	if(number>=0 && number<10){
		for(uint8_t i = 0; i < 32;i++){
			symbol = pgm_read_byte(&digits16x16[number][i]);
     ccc:	e4 91       	lpm	r30, Z
     cce:	f0 e0       	ldi	r31, 0x00	; 0
			symbol = symbol << y%8;
     cd0:	02 2e       	mov	r0, r18
     cd2:	02 c0       	rjmp	.+4      	; 0xcd8 <_ZN7Display16draw_number16x16Ehhh+0x8c>
     cd4:	ee 0f       	add	r30, r30
     cd6:	ff 1f       	adc	r31, r31
     cd8:	0a 94       	dec	r0
     cda:	e2 f7       	brpl	.-8      	; 0xcd4 <_ZN7Display16draw_number16x16Ehhh+0x88>
			if(i<16){
     cdc:	40 31       	cpi	r20, 0x10	; 16
     cde:	68 f4       	brcc	.+26     	; 0xcfa <_ZN7Display16draw_number16x16Ehhh+0xae>
				Displayframe[x+(y/8)*SSD1306_WIDTH+i] |=(uint8_t) (symbol & 0x00FF);
     ce0:	3c 91       	ld	r19, X
     ce2:	3e 2b       	or	r19, r30
     ce4:	3c 93       	st	X, r19
				if(((symbol&0xFF00)>>8)==0){
     ce6:	6f 2f       	mov	r22, r31
     ce8:	77 27       	eor	r23, r23
     cea:	61 15       	cp	r22, r1
     cec:	71 05       	cpc	r23, r1
     cee:	89 f0       	breq	.+34     	; 0xd12 <_ZN7Display16draw_number16x16Ehhh+0xc6>
					Displayframe[x+(y/8+1)*SSD1306_WIDTH+i] |= 0;
				}
				else {
					Displayframe[x+(y/8+1)*SSD1306_WIDTH+i] |= (uint8_t) ((symbol & 0xFF00)>>8);
     cf0:	f7 01       	movw	r30, r14
     cf2:	30 81       	ld	r19, Z
     cf4:	36 2b       	or	r19, r22
     cf6:	30 83       	st	Z, r19
     cf8:	0c c0       	rjmp	.+24     	; 0xd12 <_ZN7Display16draw_number16x16Ehhh+0xc6>
				}
			}
			else {
				Displayframe[x+(y/8+1)*SSD1306_WIDTH+(i-16)] |= (uint8_t) (symbol & 0x00FF);
     cfa:	38 81       	ld	r19, Y
     cfc:	3e 2b       	or	r19, r30
     cfe:	38 83       	st	Y, r19
				if(((symbol&0xFF00)>>8)==0){
     d00:	6f 2f       	mov	r22, r31
     d02:	77 27       	eor	r23, r23
     d04:	61 15       	cp	r22, r1
     d06:	71 05       	cpc	r23, r1
     d08:	21 f0       	breq	.+8      	; 0xd12 <_ZN7Display16draw_number16x16Ehhh+0xc6>
					Displayframe[x+(y/8+2)*SSD1306_WIDTH+(i-16)] |= 0;
				}
				else {
					Displayframe[x+(y/8+2)*SSD1306_WIDTH+(i-16)] |= (uint8_t) ((symbol & 0xFF00)>>8);
     d0a:	f8 01       	movw	r30, r16
     d0c:	30 81       	ld	r19, Z
     d0e:	36 2b       	or	r19, r22
     d10:	30 83       	st	Z, r19
     d12:	4f 5f       	subi	r20, 0xFF	; 255
     d14:	5f 4f       	sbci	r21, 0xFF	; 255
     d16:	ff ef       	ldi	r31, 0xFF	; 255
     d18:	ef 1a       	sub	r14, r31
     d1a:	ff 0a       	sbc	r15, r31
     d1c:	21 96       	adiw	r28, 0x01	; 1
     d1e:	0f 5f       	subi	r16, 0xFF	; 255
     d20:	1f 4f       	sbci	r17, 0xFF	; 255
     d22:	11 96       	adiw	r26, 0x01	; 1
}

void Display::draw_number16x16(uint8_t number, uint8_t x, uint8_t y){
	uint16_t symbol;
	if(number>=0 && number<10){
		for(uint8_t i = 0; i < 32;i++){
     d24:	40 32       	cpi	r20, 0x20	; 32
     d26:	51 05       	cpc	r21, r1
     d28:	71 f6       	brne	.-100    	; 0xcc6 <_ZN7Display16draw_number16x16Ehhh+0x7a>
					Displayframe[x+(y/8+2)*SSD1306_WIDTH+(i-16)] |= (uint8_t) ((symbol & 0xFF00)>>8);
				}
			}
		}
	}
}
     d2a:	df 91       	pop	r29
     d2c:	cf 91       	pop	r28
     d2e:	1f 91       	pop	r17
     d30:	0f 91       	pop	r16
     d32:	ff 90       	pop	r15
     d34:	ef 90       	pop	r14
     d36:	08 95       	ret

00000d38 <_ZN7Display6analogEhhh>:

void Display::analog(uint8_t stunde, uint8_t minute, uint8_t sekunde){
     d38:	2f 92       	push	r2
     d3a:	3f 92       	push	r3
     d3c:	4f 92       	push	r4
     d3e:	5f 92       	push	r5
     d40:	6f 92       	push	r6
     d42:	7f 92       	push	r7
     d44:	8f 92       	push	r8
     d46:	9f 92       	push	r9
     d48:	af 92       	push	r10
     d4a:	bf 92       	push	r11
     d4c:	cf 92       	push	r12
     d4e:	df 92       	push	r13
     d50:	ef 92       	push	r14
     d52:	ff 92       	push	r15
     d54:	0f 93       	push	r16
     d56:	1f 93       	push	r17
     d58:	cf 93       	push	r28
     d5a:	df 93       	push	r29
     d5c:	cd b7       	in	r28, 0x3d	; 61
     d5e:	de b7       	in	r29, 0x3e	; 62
     d60:	27 97       	sbiw	r28, 0x07	; 7
     d62:	0f b6       	in	r0, 0x3f	; 63
     d64:	f8 94       	cli
     d66:	de bf       	out	0x3e, r29	; 62
     d68:	0f be       	out	0x3f, r0	; 63
     d6a:	cd bf       	out	0x3d, r28	; 61
     d6c:	9f 83       	std	Y+7, r25	; 0x07
     d6e:	8e 83       	std	Y+6, r24	; 0x06
     d70:	6d 83       	std	Y+5, r22	; 0x05
     d72:	24 2e       	mov	r2, r20
	uint8_t x=0,y=0;
	float winkel=0;

	//Berechnen des Sekundenzeigers
	for(uint8_t i=0;i<r;i++){
		winkel=(sekunde*6.0)*M_PI/180.0-M_PI/2.0;
     d74:	62 2f       	mov	r22, r18
     d76:	70 e0       	ldi	r23, 0x00	; 0
     d78:	80 e0       	ldi	r24, 0x00	; 0
     d7a:	90 e0       	ldi	r25, 0x00	; 0
     d7c:	0e 94 d5 21 	call	0x43aa	; 0x43aa <__floatsisf>
     d80:	20 e0       	ldi	r18, 0x00	; 0
     d82:	30 e0       	ldi	r19, 0x00	; 0
     d84:	40 ec       	ldi	r20, 0xC0	; 192
     d86:	50 e4       	ldi	r21, 0x40	; 64
     d88:	0e 94 33 23 	call	0x4666	; 0x4666 <__mulsf3>
     d8c:	2b ed       	ldi	r18, 0xDB	; 219
     d8e:	3f e0       	ldi	r19, 0x0F	; 15
     d90:	49 e4       	ldi	r20, 0x49	; 73
     d92:	50 e4       	ldi	r21, 0x40	; 64
     d94:	0e 94 33 23 	call	0x4666	; 0x4666 <__mulsf3>
     d98:	20 e0       	ldi	r18, 0x00	; 0
     d9a:	30 e0       	ldi	r19, 0x00	; 0
     d9c:	44 e3       	ldi	r20, 0x34	; 52
     d9e:	53 e4       	ldi	r21, 0x43	; 67
     da0:	0e 94 3a 21 	call	0x4274	; 0x4274 <__divsf3>
     da4:	2b ed       	ldi	r18, 0xDB	; 219
     da6:	3f e0       	ldi	r19, 0x0F	; 15
     da8:	49 ec       	ldi	r20, 0xC9	; 201
     daa:	5f e3       	ldi	r21, 0x3F	; 63
     dac:	0e 94 6c 20 	call	0x40d8	; 0x40d8 <__subsf3>
     db0:	6b 01       	movw	r12, r22
     db2:	7c 01       	movw	r14, r24
		x=(uint8_t) i*cos(winkel)+Px;
     db4:	0e 94 37 21 	call	0x426e	; 0x426e <cos>
     db8:	2b 01       	movw	r4, r22
     dba:	3c 01       	movw	r6, r24
		y=(uint8_t) i*sin(winkel)+Py;
     dbc:	c7 01       	movw	r24, r14
     dbe:	b6 01       	movw	r22, r12
     dc0:	0e 94 96 23 	call	0x472c	; 0x472c <sin>
     dc4:	4b 01       	movw	r8, r22
     dc6:	5c 01       	movw	r10, r24
     dc8:	00 e0       	ldi	r16, 0x00	; 0
     dca:	10 e0       	ldi	r17, 0x00	; 0
	float winkel=0;

	//Berechnen des Sekundenzeigers
	for(uint8_t i=0;i<r;i++){
		winkel=(sekunde*6.0)*M_PI/180.0-M_PI/2.0;
		x=(uint8_t) i*cos(winkel)+Px;
     dcc:	b8 01       	movw	r22, r16
     dce:	88 27       	eor	r24, r24
     dd0:	77 fd       	sbrc	r23, 7
     dd2:	80 95       	com	r24
     dd4:	98 2f       	mov	r25, r24
     dd6:	0e 94 d5 21 	call	0x43aa	; 0x43aa <__floatsisf>
     dda:	6b 01       	movw	r12, r22
     ddc:	7c 01       	movw	r14, r24
		y=(uint8_t) i*sin(winkel)+Py;
     dde:	a5 01       	movw	r20, r10
     de0:	94 01       	movw	r18, r8
     de2:	0e 94 33 23 	call	0x4666	; 0x4666 <__mulsf3>
     de6:	20 e0       	ldi	r18, 0x00	; 0
     de8:	30 e0       	ldi	r19, 0x00	; 0
     dea:	48 ef       	ldi	r20, 0xF8	; 248
     dec:	51 e4       	ldi	r21, 0x41	; 65
     dee:	0e 94 6d 20 	call	0x40da	; 0x40da <__addsf3>
     df2:	0e 94 a7 21 	call	0x434e	; 0x434e <__fixunssfsi>
     df6:	36 2e       	mov	r3, r22
	float winkel=0;

	//Berechnen des Sekundenzeigers
	for(uint8_t i=0;i<r;i++){
		winkel=(sekunde*6.0)*M_PI/180.0-M_PI/2.0;
		x=(uint8_t) i*cos(winkel)+Px;
     df8:	a3 01       	movw	r20, r6
     dfa:	92 01       	movw	r18, r4
     dfc:	c7 01       	movw	r24, r14
     dfe:	b6 01       	movw	r22, r12
     e00:	0e 94 33 23 	call	0x4666	; 0x4666 <__mulsf3>
     e04:	20 e0       	ldi	r18, 0x00	; 0
     e06:	30 e0       	ldi	r19, 0x00	; 0
     e08:	48 ef       	ldi	r20, 0xF8	; 248
     e0a:	51 e4       	ldi	r21, 0x41	; 65
     e0c:	0e 94 6d 20 	call	0x40da	; 0x40da <__addsf3>
     e10:	0e 94 a7 21 	call	0x434e	; 0x434e <__fixunssfsi>
		y=(uint8_t) i*sin(winkel)+Py;

		drawPixel(x,y,0);
     e14:	20 e0       	ldi	r18, 0x00	; 0
     e16:	43 2d       	mov	r20, r3
     e18:	8e 81       	ldd	r24, Y+6	; 0x06
     e1a:	9f 81       	ldd	r25, Y+7	; 0x07
     e1c:	0e 94 d6 03 	call	0x7ac	; 0x7ac <_ZN7Display9drawPixelEhhh>
     e20:	0f 5f       	subi	r16, 0xFF	; 255
     e22:	1f 4f       	sbci	r17, 0xFF	; 255
	uint8_t Py=32-1;
	uint8_t x=0,y=0;
	float winkel=0;

	//Berechnen des Sekundenzeigers
	for(uint8_t i=0;i<r;i++){
     e24:	09 31       	cpi	r16, 0x19	; 25
     e26:	11 05       	cpc	r17, r1
     e28:	89 f6       	brne	.-94     	; 0xdcc <_ZN7Display6analogEhhh+0x94>
	}

	r=21;
	//Berechnen des Minutenzeigers
	for(uint8_t i=0;i<r;i++){
		winkel=(minute*6.0)*M_PI/180.0-M_PI/2.0;
     e2a:	62 2d       	mov	r22, r2
     e2c:	70 e0       	ldi	r23, 0x00	; 0
     e2e:	80 e0       	ldi	r24, 0x00	; 0
     e30:	90 e0       	ldi	r25, 0x00	; 0
     e32:	0e 94 d5 21 	call	0x43aa	; 0x43aa <__floatsisf>
     e36:	69 83       	std	Y+1, r22	; 0x01
     e38:	7a 83       	std	Y+2, r23	; 0x02
     e3a:	8b 83       	std	Y+3, r24	; 0x03
     e3c:	9c 83       	std	Y+4, r25	; 0x04
     e3e:	20 e0       	ldi	r18, 0x00	; 0
     e40:	30 e0       	ldi	r19, 0x00	; 0
     e42:	40 ec       	ldi	r20, 0xC0	; 192
     e44:	50 e4       	ldi	r21, 0x40	; 64
     e46:	0e 94 33 23 	call	0x4666	; 0x4666 <__mulsf3>
     e4a:	2b ed       	ldi	r18, 0xDB	; 219
     e4c:	3f e0       	ldi	r19, 0x0F	; 15
     e4e:	49 e4       	ldi	r20, 0x49	; 73
     e50:	50 e4       	ldi	r21, 0x40	; 64
     e52:	0e 94 33 23 	call	0x4666	; 0x4666 <__mulsf3>
     e56:	20 e0       	ldi	r18, 0x00	; 0
     e58:	30 e0       	ldi	r19, 0x00	; 0
     e5a:	44 e3       	ldi	r20, 0x34	; 52
     e5c:	53 e4       	ldi	r21, 0x43	; 67
     e5e:	0e 94 3a 21 	call	0x4274	; 0x4274 <__divsf3>
     e62:	2b ed       	ldi	r18, 0xDB	; 219
     e64:	3f e0       	ldi	r19, 0x0F	; 15
     e66:	49 ec       	ldi	r20, 0xC9	; 201
     e68:	5f e3       	ldi	r21, 0x3F	; 63
     e6a:	0e 94 6c 20 	call	0x40d8	; 0x40d8 <__subsf3>
     e6e:	6b 01       	movw	r12, r22
     e70:	7c 01       	movw	r14, r24
		x=(uint8_t) i*cos(winkel)+Px;
     e72:	0e 94 37 21 	call	0x426e	; 0x426e <cos>
     e76:	4b 01       	movw	r8, r22
     e78:	5c 01       	movw	r10, r24
		y=(uint8_t) i*sin(winkel)+Py;
     e7a:	c7 01       	movw	r24, r14
     e7c:	b6 01       	movw	r22, r12
     e7e:	0e 94 96 23 	call	0x472c	; 0x472c <sin>
     e82:	2b 01       	movw	r4, r22
     e84:	3c 01       	movw	r6, r24
     e86:	00 e0       	ldi	r16, 0x00	; 0
     e88:	10 e0       	ldi	r17, 0x00	; 0

	r=21;
	//Berechnen des Minutenzeigers
	for(uint8_t i=0;i<r;i++){
		winkel=(minute*6.0)*M_PI/180.0-M_PI/2.0;
		x=(uint8_t) i*cos(winkel)+Px;
     e8a:	b8 01       	movw	r22, r16
     e8c:	88 27       	eor	r24, r24
     e8e:	77 fd       	sbrc	r23, 7
     e90:	80 95       	com	r24
     e92:	98 2f       	mov	r25, r24
     e94:	0e 94 d5 21 	call	0x43aa	; 0x43aa <__floatsisf>
     e98:	6b 01       	movw	r12, r22
     e9a:	7c 01       	movw	r14, r24
		y=(uint8_t) i*sin(winkel)+Py;
     e9c:	a3 01       	movw	r20, r6
     e9e:	92 01       	movw	r18, r4
     ea0:	0e 94 33 23 	call	0x4666	; 0x4666 <__mulsf3>
     ea4:	20 e0       	ldi	r18, 0x00	; 0
     ea6:	30 e0       	ldi	r19, 0x00	; 0
     ea8:	48 ef       	ldi	r20, 0xF8	; 248
     eaa:	51 e4       	ldi	r21, 0x41	; 65
     eac:	0e 94 6d 20 	call	0x40da	; 0x40da <__addsf3>
     eb0:	0e 94 a7 21 	call	0x434e	; 0x434e <__fixunssfsi>
     eb4:	36 2e       	mov	r3, r22

	r=21;
	//Berechnen des Minutenzeigers
	for(uint8_t i=0;i<r;i++){
		winkel=(minute*6.0)*M_PI/180.0-M_PI/2.0;
		x=(uint8_t) i*cos(winkel)+Px;
     eb6:	a5 01       	movw	r20, r10
     eb8:	94 01       	movw	r18, r8
     eba:	c7 01       	movw	r24, r14
     ebc:	b6 01       	movw	r22, r12
     ebe:	0e 94 33 23 	call	0x4666	; 0x4666 <__mulsf3>
     ec2:	20 e0       	ldi	r18, 0x00	; 0
     ec4:	30 e0       	ldi	r19, 0x00	; 0
     ec6:	48 ef       	ldi	r20, 0xF8	; 248
     ec8:	51 e4       	ldi	r21, 0x41	; 65
     eca:	0e 94 6d 20 	call	0x40da	; 0x40da <__addsf3>
     ece:	0e 94 a7 21 	call	0x434e	; 0x434e <__fixunssfsi>
		y=(uint8_t) i*sin(winkel)+Py;

		drawPixel(x,y,0);
     ed2:	20 e0       	ldi	r18, 0x00	; 0
     ed4:	43 2d       	mov	r20, r3
     ed6:	8e 81       	ldd	r24, Y+6	; 0x06
     ed8:	9f 81       	ldd	r25, Y+7	; 0x07
     eda:	0e 94 d6 03 	call	0x7ac	; 0x7ac <_ZN7Display9drawPixelEhhh>
     ede:	0f 5f       	subi	r16, 0xFF	; 255
     ee0:	1f 4f       	sbci	r17, 0xFF	; 255
		drawPixel(x,y,0);
	}

	r=21;
	//Berechnen des Minutenzeigers
	for(uint8_t i=0;i<r;i++){
     ee2:	05 31       	cpi	r16, 0x15	; 21
     ee4:	11 05       	cpc	r17, r1
     ee6:	89 f6       	brne	.-94     	; 0xe8a <_ZN7Display6analogEhhh+0x152>
	}

	r=13;
	//Berechnen des Stundenzeigers
	for(uint8_t i=0;i<r;i++){
		winkel=(stunde*30.0+minute/2.0)*M_PI/180.0-M_PI/2.0;
     ee8:	2d 81       	ldd	r18, Y+5	; 0x05
     eea:	62 2f       	mov	r22, r18
     eec:	70 e0       	ldi	r23, 0x00	; 0
     eee:	80 e0       	ldi	r24, 0x00	; 0
     ef0:	90 e0       	ldi	r25, 0x00	; 0
     ef2:	0e 94 d5 21 	call	0x43aa	; 0x43aa <__floatsisf>
     ef6:	20 e0       	ldi	r18, 0x00	; 0
     ef8:	30 e0       	ldi	r19, 0x00	; 0
     efa:	40 ef       	ldi	r20, 0xF0	; 240
     efc:	51 e4       	ldi	r21, 0x41	; 65
     efe:	0e 94 33 23 	call	0x4666	; 0x4666 <__mulsf3>
     f02:	6b 01       	movw	r12, r22
     f04:	7c 01       	movw	r14, r24
     f06:	20 e0       	ldi	r18, 0x00	; 0
     f08:	30 e0       	ldi	r19, 0x00	; 0
     f0a:	40 e0       	ldi	r20, 0x00	; 0
     f0c:	5f e3       	ldi	r21, 0x3F	; 63
     f0e:	69 81       	ldd	r22, Y+1	; 0x01
     f10:	7a 81       	ldd	r23, Y+2	; 0x02
     f12:	8b 81       	ldd	r24, Y+3	; 0x03
     f14:	9c 81       	ldd	r25, Y+4	; 0x04
     f16:	0e 94 33 23 	call	0x4666	; 0x4666 <__mulsf3>
     f1a:	9b 01       	movw	r18, r22
     f1c:	ac 01       	movw	r20, r24
     f1e:	c7 01       	movw	r24, r14
     f20:	b6 01       	movw	r22, r12
     f22:	0e 94 6d 20 	call	0x40da	; 0x40da <__addsf3>
     f26:	2b ed       	ldi	r18, 0xDB	; 219
     f28:	3f e0       	ldi	r19, 0x0F	; 15
     f2a:	49 e4       	ldi	r20, 0x49	; 73
     f2c:	50 e4       	ldi	r21, 0x40	; 64
     f2e:	0e 94 33 23 	call	0x4666	; 0x4666 <__mulsf3>
     f32:	20 e0       	ldi	r18, 0x00	; 0
     f34:	30 e0       	ldi	r19, 0x00	; 0
     f36:	44 e3       	ldi	r20, 0x34	; 52
     f38:	53 e4       	ldi	r21, 0x43	; 67
     f3a:	0e 94 3a 21 	call	0x4274	; 0x4274 <__divsf3>
     f3e:	2b ed       	ldi	r18, 0xDB	; 219
     f40:	3f e0       	ldi	r19, 0x0F	; 15
     f42:	49 ec       	ldi	r20, 0xC9	; 201
     f44:	5f e3       	ldi	r21, 0x3F	; 63
     f46:	0e 94 6c 20 	call	0x40d8	; 0x40d8 <__subsf3>
     f4a:	6b 01       	movw	r12, r22
     f4c:	7c 01       	movw	r14, r24
		x= (uint8_t) i*cos(winkel) +Px;
     f4e:	0e 94 37 21 	call	0x426e	; 0x426e <cos>
     f52:	2b 01       	movw	r4, r22
     f54:	3c 01       	movw	r6, r24
		y= (uint8_t) i*sin(winkel) +Py;
     f56:	c7 01       	movw	r24, r14
     f58:	b6 01       	movw	r22, r12
     f5a:	0e 94 96 23 	call	0x472c	; 0x472c <sin>
     f5e:	4b 01       	movw	r8, r22
     f60:	5c 01       	movw	r10, r24
     f62:	00 e0       	ldi	r16, 0x00	; 0
     f64:	10 e0       	ldi	r17, 0x00	; 0

	r=13;
	//Berechnen des Stundenzeigers
	for(uint8_t i=0;i<r;i++){
		winkel=(stunde*30.0+minute/2.0)*M_PI/180.0-M_PI/2.0;
		x= (uint8_t) i*cos(winkel) +Px;
     f66:	b8 01       	movw	r22, r16
     f68:	88 27       	eor	r24, r24
     f6a:	77 fd       	sbrc	r23, 7
     f6c:	80 95       	com	r24
     f6e:	98 2f       	mov	r25, r24
     f70:	0e 94 d5 21 	call	0x43aa	; 0x43aa <__floatsisf>
     f74:	6b 01       	movw	r12, r22
     f76:	7c 01       	movw	r14, r24
		y= (uint8_t) i*sin(winkel) +Py;
     f78:	a5 01       	movw	r20, r10
     f7a:	94 01       	movw	r18, r8
     f7c:	0e 94 33 23 	call	0x4666	; 0x4666 <__mulsf3>
     f80:	20 e0       	ldi	r18, 0x00	; 0
     f82:	30 e0       	ldi	r19, 0x00	; 0
     f84:	48 ef       	ldi	r20, 0xF8	; 248
     f86:	51 e4       	ldi	r21, 0x41	; 65
     f88:	0e 94 6d 20 	call	0x40da	; 0x40da <__addsf3>
     f8c:	0e 94 a7 21 	call	0x434e	; 0x434e <__fixunssfsi>
     f90:	36 2e       	mov	r3, r22

	r=13;
	//Berechnen des Stundenzeigers
	for(uint8_t i=0;i<r;i++){
		winkel=(stunde*30.0+minute/2.0)*M_PI/180.0-M_PI/2.0;
		x= (uint8_t) i*cos(winkel) +Px;
     f92:	a3 01       	movw	r20, r6
     f94:	92 01       	movw	r18, r4
     f96:	c7 01       	movw	r24, r14
     f98:	b6 01       	movw	r22, r12
     f9a:	0e 94 33 23 	call	0x4666	; 0x4666 <__mulsf3>
     f9e:	20 e0       	ldi	r18, 0x00	; 0
     fa0:	30 e0       	ldi	r19, 0x00	; 0
     fa2:	48 ef       	ldi	r20, 0xF8	; 248
     fa4:	51 e4       	ldi	r21, 0x41	; 65
     fa6:	0e 94 6d 20 	call	0x40da	; 0x40da <__addsf3>
     faa:	0e 94 a7 21 	call	0x434e	; 0x434e <__fixunssfsi>
		y= (uint8_t) i*sin(winkel) +Py;

		drawPixel(x,y,0);
     fae:	20 e0       	ldi	r18, 0x00	; 0
     fb0:	43 2d       	mov	r20, r3
     fb2:	8e 81       	ldd	r24, Y+6	; 0x06
     fb4:	9f 81       	ldd	r25, Y+7	; 0x07
     fb6:	0e 94 d6 03 	call	0x7ac	; 0x7ac <_ZN7Display9drawPixelEhhh>
     fba:	0f 5f       	subi	r16, 0xFF	; 255
     fbc:	1f 4f       	sbci	r17, 0xFF	; 255
		drawPixel(x,y,0);
	}

	r=13;
	//Berechnen des Stundenzeigers
	for(uint8_t i=0;i<r;i++){
     fbe:	0d 30       	cpi	r16, 0x0D	; 13
     fc0:	11 05       	cpc	r17, r1
     fc2:	89 f6       	brne	.-94     	; 0xf66 <_ZN7Display6analogEhhh+0x22e>

		drawPixel(x,y,0);
	}

	//Anzeige der Zahlen
	draw_ASCI('1',32-charsize,0);
     fc4:	20 e0       	ldi	r18, 0x00	; 0
     fc6:	4a e1       	ldi	r20, 0x1A	; 26
     fc8:	61 e3       	ldi	r22, 0x31	; 49
     fca:	8e 81       	ldd	r24, Y+6	; 0x06
     fcc:	9f 81       	ldd	r25, Y+7	; 0x07
     fce:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
	draw_ASCI('2',32,0);
     fd2:	20 e0       	ldi	r18, 0x00	; 0
     fd4:	40 e2       	ldi	r20, 0x20	; 32
     fd6:	62 e3       	ldi	r22, 0x32	; 50
     fd8:	8e 81       	ldd	r24, Y+6	; 0x06
     fda:	9f 81       	ldd	r25, Y+7	; 0x07
     fdc:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
	draw_ASCI('3',64-charsize,4*charhighte-charhighte/2);
     fe0:	2c e1       	ldi	r18, 0x1C	; 28
     fe2:	4a e3       	ldi	r20, 0x3A	; 58
     fe4:	63 e3       	ldi	r22, 0x33	; 51
     fe6:	8e 81       	ldd	r24, Y+6	; 0x06
     fe8:	9f 81       	ldd	r25, Y+7	; 0x07
     fea:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
	draw_ASCI('6',32-charsize/2,7*charhighte);
     fee:	28 e3       	ldi	r18, 0x38	; 56
     ff0:	4d e1       	ldi	r20, 0x1D	; 29
     ff2:	66 e3       	ldi	r22, 0x36	; 54
     ff4:	8e 81       	ldd	r24, Y+6	; 0x06
     ff6:	9f 81       	ldd	r25, Y+7	; 0x07
     ff8:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
	draw_ASCI('9',0,4*charhighte-charhighte/2);
     ffc:	2c e1       	ldi	r18, 0x1C	; 28
     ffe:	40 e0       	ldi	r20, 0x00	; 0
    1000:	69 e3       	ldi	r22, 0x39	; 57
    1002:	8e 81       	ldd	r24, Y+6	; 0x06
    1004:	9f 81       	ldd	r25, Y+7	; 0x07
    1006:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>

	//anzeige des Rings fuer die Restlichen Stunden Zahlen
	//1
	drawPixel(26*cos((30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
    100a:	20 e0       	ldi	r18, 0x00	; 0
    100c:	48 e0       	ldi	r20, 0x08	; 8
    100e:	6c e2       	ldi	r22, 0x2C	; 44
    1010:	8e 81       	ldd	r24, Y+6	; 0x06
    1012:	9f 81       	ldd	r25, Y+7	; 0x07
    1014:	0e 94 d6 03 	call	0x7ac	; 0x7ac <_ZN7Display9drawPixelEhhh>
	//2
	drawPixel(26*cos((2*30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((2*30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
    1018:	20 e0       	ldi	r18, 0x00	; 0
    101a:	42 e1       	ldi	r20, 0x12	; 18
    101c:	65 e3       	ldi	r22, 0x35	; 53
    101e:	8e 81       	ldd	r24, Y+6	; 0x06
    1020:	9f 81       	ldd	r25, Y+7	; 0x07
    1022:	0e 94 d6 03 	call	0x7ac	; 0x7ac <_ZN7Display9drawPixelEhhh>
	//4
	drawPixel(26*cos((4*30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((4*30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
    1026:	20 e0       	ldi	r18, 0x00	; 0
    1028:	4c e2       	ldi	r20, 0x2C	; 44
    102a:	65 e3       	ldi	r22, 0x35	; 53
    102c:	8e 81       	ldd	r24, Y+6	; 0x06
    102e:	9f 81       	ldd	r25, Y+7	; 0x07
    1030:	0e 94 d6 03 	call	0x7ac	; 0x7ac <_ZN7Display9drawPixelEhhh>
	//5
	drawPixel(26*cos((5*30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((5*30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
    1034:	20 e0       	ldi	r18, 0x00	; 0
    1036:	45 e3       	ldi	r20, 0x35	; 53
    1038:	6b e2       	ldi	r22, 0x2B	; 43
    103a:	8e 81       	ldd	r24, Y+6	; 0x06
    103c:	9f 81       	ldd	r25, Y+7	; 0x07
    103e:	0e 94 d6 03 	call	0x7ac	; 0x7ac <_ZN7Display9drawPixelEhhh>
	//7
	drawPixel(26*cos((7*30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((7*30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
    1042:	20 e0       	ldi	r18, 0x00	; 0
    1044:	45 e3       	ldi	r20, 0x35	; 53
    1046:	61 e1       	ldi	r22, 0x11	; 17
    1048:	8e 81       	ldd	r24, Y+6	; 0x06
    104a:	9f 81       	ldd	r25, Y+7	; 0x07
    104c:	0e 94 d6 03 	call	0x7ac	; 0x7ac <_ZN7Display9drawPixelEhhh>
	//8
	drawPixel(26*cos((8*30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((8*30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
    1050:	20 e0       	ldi	r18, 0x00	; 0
    1052:	4c e2       	ldi	r20, 0x2C	; 44
    1054:	68 e0       	ldi	r22, 0x08	; 8
    1056:	8e 81       	ldd	r24, Y+6	; 0x06
    1058:	9f 81       	ldd	r25, Y+7	; 0x07
    105a:	0e 94 d6 03 	call	0x7ac	; 0x7ac <_ZN7Display9drawPixelEhhh>
	//10
	drawPixel(26*cos((10*30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((10*30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
    105e:	20 e0       	ldi	r18, 0x00	; 0
    1060:	41 e1       	ldi	r20, 0x11	; 17
    1062:	68 e0       	ldi	r22, 0x08	; 8
    1064:	8e 81       	ldd	r24, Y+6	; 0x06
    1066:	9f 81       	ldd	r25, Y+7	; 0x07
    1068:	0e 94 d6 03 	call	0x7ac	; 0x7ac <_ZN7Display9drawPixelEhhh>
	//11
	drawPixel(26*cos((11*30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((11*30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
    106c:	20 e0       	ldi	r18, 0x00	; 0
    106e:	48 e0       	ldi	r20, 0x08	; 8
    1070:	62 e1       	ldi	r22, 0x12	; 18
    1072:	8e 81       	ldd	r24, Y+6	; 0x06
    1074:	9f 81       	ldd	r25, Y+7	; 0x07
    1076:	0e 94 d6 03 	call	0x7ac	; 0x7ac <_ZN7Display9drawPixelEhhh>
}
    107a:	27 96       	adiw	r28, 0x07	; 7
    107c:	0f b6       	in	r0, 0x3f	; 63
    107e:	f8 94       	cli
    1080:	de bf       	out	0x3e, r29	; 62
    1082:	0f be       	out	0x3f, r0	; 63
    1084:	cd bf       	out	0x3d, r28	; 61
    1086:	df 91       	pop	r29
    1088:	cf 91       	pop	r28
    108a:	1f 91       	pop	r17
    108c:	0f 91       	pop	r16
    108e:	ff 90       	pop	r15
    1090:	ef 90       	pop	r14
    1092:	df 90       	pop	r13
    1094:	cf 90       	pop	r12
    1096:	bf 90       	pop	r11
    1098:	af 90       	pop	r10
    109a:	9f 90       	pop	r9
    109c:	8f 90       	pop	r8
    109e:	7f 90       	pop	r7
    10a0:	6f 90       	pop	r6
    10a2:	5f 90       	pop	r5
    10a4:	4f 90       	pop	r4
    10a6:	3f 90       	pop	r3
    10a8:	2f 90       	pop	r2
    10aa:	08 95       	ret

000010ac <_Z8ADC_Readh>:
#ifndef ADC_H_
#define ADC_H_

uint16_t ADC_Read( uint8_t channel )
{
	ADMUX = (ADMUX & ~(0x1F)) | (channel & 0x1F);
    10ac:	ec e7       	ldi	r30, 0x7C	; 124
    10ae:	f0 e0       	ldi	r31, 0x00	; 0
    10b0:	90 81       	ld	r25, Z
    10b2:	8f 71       	andi	r24, 0x1F	; 31
    10b4:	90 7e       	andi	r25, 0xE0	; 224
    10b6:	98 2b       	or	r25, r24
    10b8:	90 83       	st	Z, r25
	ADCSRA |= (1<<ADSC);
    10ba:	ea e7       	ldi	r30, 0x7A	; 122
    10bc:	f0 e0       	ldi	r31, 0x00	; 0
    10be:	80 81       	ld	r24, Z
    10c0:	80 64       	ori	r24, 0x40	; 64
    10c2:	80 83       	st	Z, r24
	while (ADCSRA & (1<<ADSC) ) {
    10c4:	80 81       	ld	r24, Z
    10c6:	86 fd       	sbrc	r24, 6
    10c8:	fd cf       	rjmp	.-6      	; 0x10c4 <_Z8ADC_Readh+0x18>
	}
	return ADCW;
    10ca:	80 91 78 00 	lds	r24, 0x0078
    10ce:	90 91 79 00 	lds	r25, 0x0079
}
    10d2:	08 95       	ret

000010d4 <_Z14Batteriestatusv>:
	return (uint16_t)( sum / nsamples );
}

double batterie;
int8_t Batteriestatus(){
	uint16_t ADCwert=ADC_Read(0);
    10d4:	80 e0       	ldi	r24, 0x00	; 0
    10d6:	0e 94 56 08 	call	0x10ac	; 0x10ac <_Z8ADC_Readh>
	batterie = (ADCwert/1023.0)*3.2*SPANNUNGSTEILER;
    10da:	bc 01       	movw	r22, r24
    10dc:	80 e0       	ldi	r24, 0x00	; 0
    10de:	90 e0       	ldi	r25, 0x00	; 0
    10e0:	0e 94 d3 21 	call	0x43a6	; 0x43a6 <__floatunsisf>
    10e4:	20 e0       	ldi	r18, 0x00	; 0
    10e6:	30 ec       	ldi	r19, 0xC0	; 192
    10e8:	4f e7       	ldi	r20, 0x7F	; 127
    10ea:	54 e4       	ldi	r21, 0x44	; 68
    10ec:	0e 94 3a 21 	call	0x4274	; 0x4274 <__divsf3>
    10f0:	2d ec       	ldi	r18, 0xCD	; 205
    10f2:	3c ec       	ldi	r19, 0xCC	; 204
    10f4:	4c e4       	ldi	r20, 0x4C	; 76
    10f6:	50 e4       	ldi	r21, 0x40	; 64
    10f8:	0e 94 33 23 	call	0x4666	; 0x4666 <__mulsf3>
    10fc:	2b e7       	ldi	r18, 0x7B	; 123
    10fe:	34 e1       	ldi	r19, 0x14	; 20
    1100:	4e ef       	ldi	r20, 0xFE	; 254
    1102:	5f e3       	ldi	r21, 0x3F	; 63
    1104:	0e 94 33 23 	call	0x4666	; 0x4666 <__mulsf3>
    1108:	60 93 d9 02 	sts	0x02D9, r22
    110c:	70 93 da 02 	sts	0x02DA, r23
    1110:	80 93 db 02 	sts	0x02DB, r24
    1114:	90 93 dc 02 	sts	0x02DC, r25
	return ((batterie-3.0)/(4.2-3.0)*100);
    1118:	20 e0       	ldi	r18, 0x00	; 0
    111a:	30 e0       	ldi	r19, 0x00	; 0
    111c:	40 e4       	ldi	r20, 0x40	; 64
    111e:	50 e4       	ldi	r21, 0x40	; 64
    1120:	0e 94 6c 20 	call	0x40d8	; 0x40d8 <__subsf3>
    1124:	28 e9       	ldi	r18, 0x98	; 152
    1126:	39 e9       	ldi	r19, 0x99	; 153
    1128:	49 e9       	ldi	r20, 0x99	; 153
    112a:	5f e3       	ldi	r21, 0x3F	; 63
    112c:	0e 94 3a 21 	call	0x4274	; 0x4274 <__divsf3>
    1130:	20 e0       	ldi	r18, 0x00	; 0
    1132:	30 e0       	ldi	r19, 0x00	; 0
    1134:	48 ec       	ldi	r20, 0xC8	; 200
    1136:	52 e4       	ldi	r21, 0x42	; 66
    1138:	0e 94 33 23 	call	0x4666	; 0x4666 <__mulsf3>
    113c:	0e 94 a2 21 	call	0x4344	; 0x4344 <__fixsfsi>
    1140:	86 2f       	mov	r24, r22
}
    1142:	08 95       	ret

00001144 <_Z14willkommenpagev>:
#ifndef SEITEN_H_
#define SEITEN_H_

//Diese Funktionen schreiben nur in den Framebuffer und das Schreiben passiert in der Main ueber einen Interupt

void willkommenpage(){
    1144:	cf 92       	push	r12
    1146:	df 92       	push	r13
    1148:	ef 92       	push	r14
    114a:	ff 92       	push	r15
    114c:	0f 93       	push	r16
    114e:	1f 93       	push	r17
    1150:	cf 93       	push	r28
    1152:	df 93       	push	r29
    1154:	cd b7       	in	r28, 0x3d	; 61
    1156:	de b7       	in	r29, 0x3e	; 62
    1158:	64 97       	sbiw	r28, 0x14	; 20
    115a:	0f b6       	in	r0, 0x3f	; 63
    115c:	f8 94       	cli
    115e:	de bf       	out	0x3e, r29	; 62
    1160:	0f be       	out	0x3f, r0	; 63
    1162:	cd bf       	out	0x3d, r28	; 61
	char buffer[20];
	uint8_t buffersize;
	oled.clearFrame();
    1164:	80 ef       	ldi	r24, 0xF0	; 240
    1166:	92 e0       	ldi	r25, 0x02	; 2
    1168:	0e 94 ed 02 	call	0x5da	; 0x5da <_ZN7Display10clearFrameEv>
	buffersize=sprintf(buffer,"Fahradcomputer");
    116c:	8f e0       	ldi	r24, 0x0F	; 15
    116e:	e0 e0       	ldi	r30, 0x00	; 0
    1170:	f1 e0       	ldi	r31, 0x01	; 1
    1172:	8e 01       	movw	r16, r28
    1174:	0f 5f       	subi	r16, 0xFF	; 255
    1176:	1f 4f       	sbci	r17, 0xFF	; 255
    1178:	d8 01       	movw	r26, r16
    117a:	01 90       	ld	r0, Z+
    117c:	0d 92       	st	X+, r0
    117e:	8a 95       	dec	r24
    1180:	e1 f7       	brne	.-8      	; 0x117a <_Z14willkommenpagev+0x36>
    1182:	c0 2e       	mov	r12, r16
    1184:	d1 2e       	mov	r13, r17
    1186:	78 01       	movw	r14, r16
    1188:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0; i < buffersize;i++){
		oled.draw_ASCI(buffer[i],i*charsize,0);
    118a:	f7 01       	movw	r30, r14
    118c:	61 91       	ld	r22, Z+
    118e:	7f 01       	movw	r14, r30
    1190:	20 e0       	ldi	r18, 0x00	; 0
    1192:	41 2f       	mov	r20, r17
    1194:	80 ef       	ldi	r24, 0xF0	; 240
    1196:	92 e0       	ldi	r25, 0x02	; 2
    1198:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    119c:	1a 5f       	subi	r17, 0xFA	; 250
void willkommenpage(){
	char buffer[20];
	uint8_t buffersize;
	oled.clearFrame();
	buffersize=sprintf(buffer,"Fahradcomputer");
	for(uint8_t i=0; i < buffersize;i++){
    119e:	14 35       	cpi	r17, 0x54	; 84
    11a0:	a1 f7       	brne	.-24     	; 0x118a <_Z14willkommenpagev+0x46>
		oled.draw_ASCI(buffer[i],i*charsize,0);
	}
	buffersize=sprintf(buffer,"--------------");
    11a2:	8f e0       	ldi	r24, 0x0F	; 15
    11a4:	ef e0       	ldi	r30, 0x0F	; 15
    11a6:	f1 e0       	ldi	r31, 0x01	; 1
    11a8:	de 01       	movw	r26, r28
    11aa:	11 96       	adiw	r26, 0x01	; 1
    11ac:	01 90       	ld	r0, Z+
    11ae:	0d 92       	st	X+, r0
    11b0:	8a 95       	dec	r24
    11b2:	e1 f7       	brne	.-8      	; 0x11ac <_Z14willkommenpagev+0x68>
    11b4:	ec 2c       	mov	r14, r12
    11b6:	fd 2c       	mov	r15, r13
    11b8:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0; i < buffersize;i++){
		oled.draw_ASCI(buffer[i],i*charsize,8);
    11ba:	f7 01       	movw	r30, r14
    11bc:	61 91       	ld	r22, Z+
    11be:	7f 01       	movw	r14, r30
    11c0:	28 e0       	ldi	r18, 0x08	; 8
    11c2:	41 2f       	mov	r20, r17
    11c4:	80 ef       	ldi	r24, 0xF0	; 240
    11c6:	92 e0       	ldi	r25, 0x02	; 2
    11c8:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    11cc:	1a 5f       	subi	r17, 0xFA	; 250
	buffersize=sprintf(buffer,"Fahradcomputer");
	for(uint8_t i=0; i < buffersize;i++){
		oled.draw_ASCI(buffer[i],i*charsize,0);
	}
	buffersize=sprintf(buffer,"--------------");
	for(uint8_t i=0; i < buffersize;i++){
    11ce:	14 35       	cpi	r17, 0x54	; 84
    11d0:	a1 f7       	brne	.-24     	; 0x11ba <_Z14willkommenpagev+0x76>
		oled.draw_ASCI(buffer[i],i*charsize,8);
	}
	buffersize=sprintf(buffer,"Version: %.2f",VERSIONSNUMMER);
    11d2:	8f e3       	ldi	r24, 0x3F	; 63
    11d4:	8f 93       	push	r24
    11d6:	86 ea       	ldi	r24, 0xA6	; 166
    11d8:	8f 93       	push	r24
    11da:	86 e6       	ldi	r24, 0x66	; 102
    11dc:	8f 93       	push	r24
    11de:	8f 93       	push	r24
    11e0:	8e e1       	ldi	r24, 0x1E	; 30
    11e2:	91 e0       	ldi	r25, 0x01	; 1
    11e4:	9f 93       	push	r25
    11e6:	8f 93       	push	r24
    11e8:	ce 01       	movw	r24, r28
    11ea:	01 96       	adiw	r24, 0x01	; 1
    11ec:	9f 93       	push	r25
    11ee:	8f 93       	push	r24
    11f0:	0e 94 b6 28 	call	0x516c	; 0x516c <sprintf>
	for(uint8_t i=0; i < buffersize;i++){
    11f4:	0f b6       	in	r0, 0x3f	; 63
    11f6:	f8 94       	cli
    11f8:	de bf       	out	0x3e, r29	; 62
    11fa:	0f be       	out	0x3f, r0	; 63
    11fc:	cd bf       	out	0x3d, r28	; 61
    11fe:	88 23       	and	r24, r24
    1200:	d1 f0       	breq	.+52     	; 0x1236 <_Z14willkommenpagev+0xf2>
    1202:	81 50       	subi	r24, 0x01	; 1
    1204:	68 94       	set
    1206:	ee 24       	eor	r14, r14
    1208:	e1 f8       	bld	r14, 1
    120a:	f1 2c       	mov	r15, r1
    120c:	ec 0e       	add	r14, r28
    120e:	fd 1e       	adc	r15, r29
    1210:	e8 0e       	add	r14, r24
    1212:	f1 1c       	adc	r15, r1
    1214:	0c 2d       	mov	r16, r12
    1216:	1d 2d       	mov	r17, r13
    1218:	d1 2c       	mov	r13, r1
		oled.draw_ASCI(buffer[i],i*charsize,32);
    121a:	f8 01       	movw	r30, r16
    121c:	61 91       	ld	r22, Z+
    121e:	8f 01       	movw	r16, r30
    1220:	20 e2       	ldi	r18, 0x20	; 32
    1222:	4d 2d       	mov	r20, r13
    1224:	80 ef       	ldi	r24, 0xF0	; 240
    1226:	92 e0       	ldi	r25, 0x02	; 2
    1228:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    122c:	f6 e0       	ldi	r31, 0x06	; 6
    122e:	df 0e       	add	r13, r31
	buffersize=sprintf(buffer,"--------------");
	for(uint8_t i=0; i < buffersize;i++){
		oled.draw_ASCI(buffer[i],i*charsize,8);
	}
	buffersize=sprintf(buffer,"Version: %.2f",VERSIONSNUMMER);
	for(uint8_t i=0; i < buffersize;i++){
    1230:	0e 15       	cp	r16, r14
    1232:	1f 05       	cpc	r17, r15
    1234:	91 f7       	brne	.-28     	; 0x121a <_Z14willkommenpagev+0xd6>
		oled.draw_ASCI(buffer[i],i*charsize,32);

	}
	oled.sendFrame();
    1236:	80 ef       	ldi	r24, 0xF0	; 240
    1238:	92 e0       	ldi	r25, 0x02	; 2
    123a:	0e 94 93 03 	call	0x726	; 0x726 <_ZN7Display9sendFrameEv>
	oled.clearFrame();
    123e:	80 ef       	ldi	r24, 0xF0	; 240
    1240:	92 e0       	ldi	r25, 0x02	; 2
    1242:	0e 94 ed 02 	call	0x5da	; 0x5da <_ZN7Display10clearFrameEv>
    1246:	85 e0       	ldi	r24, 0x05	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1248:	2f e7       	ldi	r18, 0x7F	; 127
    124a:	38 e3       	ldi	r19, 0x38	; 56
    124c:	91 e0       	ldi	r25, 0x01	; 1
    124e:	21 50       	subi	r18, 0x01	; 1
    1250:	30 40       	sbci	r19, 0x00	; 0
    1252:	90 40       	sbci	r25, 0x00	; 0
    1254:	e1 f7       	brne	.-8      	; 0x124e <_Z14willkommenpagev+0x10a>
    1256:	00 c0       	rjmp	.+0      	; 0x1258 <_Z14willkommenpagev+0x114>
    1258:	00 00       	nop
    125a:	ef e7       	ldi	r30, 0x7F	; 127
    125c:	f8 e3       	ldi	r31, 0x38	; 56
    125e:	21 e0       	ldi	r18, 0x01	; 1
    1260:	e1 50       	subi	r30, 0x01	; 1
    1262:	f0 40       	sbci	r31, 0x00	; 0
    1264:	20 40       	sbci	r18, 0x00	; 0
    1266:	e1 f7       	brne	.-8      	; 0x1260 <_Z14willkommenpagev+0x11c>
    1268:	00 c0       	rjmp	.+0      	; 0x126a <_Z14willkommenpagev+0x126>
    126a:	00 00       	nop
    126c:	81 50       	subi	r24, 0x01	; 1
	for (uint8_t i=0;i<5;i++)
    126e:	61 f7       	brne	.-40     	; 0x1248 <_Z14willkommenpagev+0x104>
	{
		_delay_ms(50);
		_delay_ms(50);
	}
}
    1270:	64 96       	adiw	r28, 0x14	; 20
    1272:	0f b6       	in	r0, 0x3f	; 63
    1274:	f8 94       	cli
    1276:	de bf       	out	0x3e, r29	; 62
    1278:	0f be       	out	0x3f, r0	; 63
    127a:	cd bf       	out	0x3d, r28	; 61
    127c:	df 91       	pop	r29
    127e:	cf 91       	pop	r28
    1280:	1f 91       	pop	r17
    1282:	0f 91       	pop	r16
    1284:	ff 90       	pop	r15
    1286:	ef 90       	pop	r14
    1288:	df 90       	pop	r13
    128a:	cf 90       	pop	r12
    128c:	08 95       	ret

0000128e <_Z6headerh>:

void header(uint8_t page){
    128e:	ef 92       	push	r14
    1290:	ff 92       	push	r15
    1292:	0f 93       	push	r16
    1294:	1f 93       	push	r17
    1296:	cf 93       	push	r28
    1298:	df 93       	push	r29
    129a:	cd b7       	in	r28, 0x3d	; 61
    129c:	de b7       	in	r29, 0x3e	; 62
    129e:	64 97       	sbiw	r28, 0x14	; 20
    12a0:	0f b6       	in	r0, 0x3f	; 63
    12a2:	f8 94       	cli
    12a4:	de bf       	out	0x3e, r29	; 62
    12a6:	0f be       	out	0x3f, r0	; 63
    12a8:	cd bf       	out	0x3d, r28	; 61
	char buffer[20];
	uint8_t buffersize=0;;
	switch (page) {
    12aa:	81 11       	cpse	r24, r1
    12ac:	4d c0       	rjmp	.+154    	; 0x1348 <_Z6headerh+0xba>
    12ae:	0f 2e       	mov	r0, r31
    12b0:	f1 e2       	ldi	r31, 0x21	; 33
    12b2:	ef 2e       	mov	r14, r31
    12b4:	f7 e0       	ldi	r31, 0x07	; 7
    12b6:	ff 2e       	mov	r15, r31
    12b8:	f0 2d       	mov	r31, r0
    12ba:	10 e0       	ldi	r17, 0x00	; 0
		case 0:	//standard Header fuer fast alle Pages
			for(uint8_t i=0;i<8;i++){
				oled.draw_ASCI(rtc.msg_uhr[i],i*charsize,0);
    12bc:	f7 01       	movw	r30, r14
    12be:	61 91       	ld	r22, Z+
    12c0:	7f 01       	movw	r14, r30
    12c2:	20 e0       	ldi	r18, 0x00	; 0
    12c4:	41 2f       	mov	r20, r17
    12c6:	80 ef       	ldi	r24, 0xF0	; 240
    12c8:	92 e0       	ldi	r25, 0x02	; 2
    12ca:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    12ce:	1a 5f       	subi	r17, 0xFA	; 250
void header(uint8_t page){
	char buffer[20];
	uint8_t buffersize=0;;
	switch (page) {
		case 0:	//standard Header fuer fast alle Pages
			for(uint8_t i=0;i<8;i++){
    12d0:	10 33       	cpi	r17, 0x30	; 48
    12d2:	a1 f7       	brne	.-24     	; 0x12bc <_Z6headerh+0x2e>
				oled.draw_ASCI(rtc.msg_uhr[i],i*charsize,0);
			}
			buffersize=sprintf(buffer,"Bat: %i%%",Batteriestatus());
    12d4:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <_Z14Batteriestatusv>
    12d8:	28 2f       	mov	r18, r24
    12da:	33 27       	eor	r19, r19
    12dc:	27 fd       	sbrc	r18, 7
    12de:	30 95       	com	r19
    12e0:	3f 93       	push	r19
    12e2:	8f 93       	push	r24
    12e4:	8c e2       	ldi	r24, 0x2C	; 44
    12e6:	91 e0       	ldi	r25, 0x01	; 1
    12e8:	9f 93       	push	r25
    12ea:	8f 93       	push	r24
    12ec:	ce 01       	movw	r24, r28
    12ee:	01 96       	adiw	r24, 0x01	; 1
    12f0:	9f 93       	push	r25
    12f2:	8f 93       	push	r24
    12f4:	0e 94 b6 28 	call	0x516c	; 0x516c <sprintf>
			for(uint8_t i=((SSD1306_WIDTH/charsize)-buffersize);i<(SSD1306_WIDTH/charsize);i++){
    12f8:	25 e1       	ldi	r18, 0x15	; 21
    12fa:	f2 2e       	mov	r15, r18
    12fc:	f8 1a       	sub	r15, r24
    12fe:	0f 90       	pop	r0
    1300:	0f 90       	pop	r0
    1302:	0f 90       	pop	r0
    1304:	0f 90       	pop	r0
    1306:	0f 90       	pop	r0
    1308:	0f 90       	pop	r0
    130a:	f4 e1       	ldi	r31, 0x14	; 20
    130c:	ff 15       	cp	r31, r15
    130e:	e0 f0       	brcs	.+56     	; 0x1348 <_Z6headerh+0xba>
    1310:	ef 2c       	mov	r14, r15
    1312:	ee 0c       	add	r14, r14
    1314:	ef 0c       	add	r14, r15
    1316:	ee 0c       	add	r14, r14
				oled.draw_ASCI(buffer[i-((SSD1306_WIDTH/charsize)-buffersize)],i*charsize,0);
    1318:	8c 01       	movw	r16, r24
    131a:	11 27       	eor	r17, r17
    131c:	e1 e0       	ldi	r30, 0x01	; 1
    131e:	f0 e0       	ldi	r31, 0x00	; 0
    1320:	ec 0f       	add	r30, r28
    1322:	fd 1f       	adc	r31, r29
    1324:	ef 0d       	add	r30, r15
    1326:	f1 1d       	adc	r31, r1
    1328:	e0 0f       	add	r30, r16
    132a:	f1 1f       	adc	r31, r17
    132c:	75 97       	sbiw	r30, 0x15	; 21
    132e:	20 e0       	ldi	r18, 0x00	; 0
    1330:	4e 2d       	mov	r20, r14
    1332:	60 81       	ld	r22, Z
    1334:	80 ef       	ldi	r24, 0xF0	; 240
    1336:	92 e0       	ldi	r25, 0x02	; 2
    1338:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
		case 0:	//standard Header fuer fast alle Pages
			for(uint8_t i=0;i<8;i++){
				oled.draw_ASCI(rtc.msg_uhr[i],i*charsize,0);
			}
			buffersize=sprintf(buffer,"Bat: %i%%",Batteriestatus());
			for(uint8_t i=((SSD1306_WIDTH/charsize)-buffersize);i<(SSD1306_WIDTH/charsize);i++){
    133c:	f3 94       	inc	r15
    133e:	26 e0       	ldi	r18, 0x06	; 6
    1340:	e2 0e       	add	r14, r18
    1342:	85 e1       	ldi	r24, 0x15	; 21
    1344:	f8 12       	cpse	r15, r24
    1346:	ea cf       	rjmp	.-44     	; 0x131c <_Z6headerh+0x8e>
			}
			break;
		default:
			break;
	}
}
    1348:	64 96       	adiw	r28, 0x14	; 20
    134a:	0f b6       	in	r0, 0x3f	; 63
    134c:	f8 94       	cli
    134e:	de bf       	out	0x3e, r29	; 62
    1350:	0f be       	out	0x3f, r0	; 63
    1352:	cd bf       	out	0x3d, r28	; 61
    1354:	df 91       	pop	r29
    1356:	cf 91       	pop	r28
    1358:	1f 91       	pop	r17
    135a:	0f 91       	pop	r16
    135c:	ff 90       	pop	r15
    135e:	ef 90       	pop	r14
    1360:	08 95       	ret

00001362 <_Z6bottomh>:

void bottom(uint8_t page){
    1362:	1f 93       	push	r17
    1364:	cf 93       	push	r28
    1366:	df 93       	push	r29
	switch (page) {
    1368:	81 11       	cpse	r24, r1
    136a:	0d c0       	rjmp	.+26     	; 0x1386 <_Z6bottomh+0x24>
    136c:	c9 e2       	ldi	r28, 0x29	; 41
    136e:	d7 e0       	ldi	r29, 0x07	; 7
    1370:	10 e5       	ldi	r17, 0x50	; 80
		case 0:	//standard Header fuer fast alle Pages
			for(uint8_t i=0;i<8;i++){
				oled.draw_ASCI(rtc.msg_dat[i],i*charsize+(SSD1306_WIDTH-bitsderrtc*charsize),7*charhighte);
    1372:	69 91       	ld	r22, Y+
    1374:	28 e3       	ldi	r18, 0x38	; 56
    1376:	41 2f       	mov	r20, r17
    1378:	80 ef       	ldi	r24, 0xF0	; 240
    137a:	92 e0       	ldi	r25, 0x02	; 2
    137c:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    1380:	1a 5f       	subi	r17, 0xFA	; 250
}

void bottom(uint8_t page){
	switch (page) {
		case 0:	//standard Header fuer fast alle Pages
			for(uint8_t i=0;i<8;i++){
    1382:	10 38       	cpi	r17, 0x80	; 128
    1384:	b1 f7       	brne	.-20     	; 0x1372 <_Z6bottomh+0x10>
			}
			break;
		default:
			break;
		}
}
    1386:	df 91       	pop	r29
    1388:	cf 91       	pop	r28
    138a:	1f 91       	pop	r17
    138c:	08 95       	ret

0000138e <_Z16anzeige_richtungf>:

void anzeige_richtung(float winkel){
    138e:	cf 92       	push	r12
    1390:	df 92       	push	r13
    1392:	ef 92       	push	r14
    1394:	ff 92       	push	r15
    1396:	6b 01       	movw	r12, r22
    1398:	7c 01       	movw	r14, r24
	//finden der Ziffer fuer die Anzeige
	if ((winkel<45/2) || (winkel == 360-45/2))
    139a:	20 e0       	ldi	r18, 0x00	; 0
    139c:	30 e0       	ldi	r19, 0x00	; 0
    139e:	40 eb       	ldi	r20, 0xB0	; 176
    13a0:	51 e4       	ldi	r21, 0x41	; 65
    13a2:	0e 94 33 21 	call	0x4266	; 0x4266 <__cmpsf2>
    13a6:	88 23       	and	r24, r24
    13a8:	54 f0       	brlt	.+20     	; 0x13be <_Z16anzeige_richtungf+0x30>
    13aa:	20 e0       	ldi	r18, 0x00	; 0
    13ac:	30 e0       	ldi	r19, 0x00	; 0
    13ae:	49 ea       	ldi	r20, 0xA9	; 169
    13b0:	53 e4       	ldi	r21, 0x43	; 67
    13b2:	c7 01       	movw	r24, r14
    13b4:	b6 01       	movw	r22, r12
    13b6:	0e 94 33 21 	call	0x4266	; 0x4266 <__cmpsf2>
    13ba:	81 11       	cpse	r24, r1
    13bc:	08 c0       	rjmp	.+16     	; 0x13ce <_Z16anzeige_richtungf+0x40>
	{
		oled.draw_ASCI('N',80,3.5*charhighte);
    13be:	2c e1       	ldi	r18, 0x1C	; 28
    13c0:	40 e5       	ldi	r20, 0x50	; 80
    13c2:	6e e4       	ldi	r22, 0x4E	; 78
    13c4:	80 ef       	ldi	r24, 0xF0	; 240
    13c6:	92 e0       	ldi	r25, 0x02	; 2
    13c8:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    13cc:	99 c0       	rjmp	.+306    	; 0x1500 <_Z16anzeige_richtungf+0x172>
	}
	else if (winkel<90-45/2)
    13ce:	20 e0       	ldi	r18, 0x00	; 0
    13d0:	30 e0       	ldi	r19, 0x00	; 0
    13d2:	48 e8       	ldi	r20, 0x88	; 136
    13d4:	52 e4       	ldi	r21, 0x42	; 66
    13d6:	c7 01       	movw	r24, r14
    13d8:	b6 01       	movw	r22, r12
    13da:	0e 94 33 21 	call	0x4266	; 0x4266 <__cmpsf2>
    13de:	88 23       	and	r24, r24
    13e0:	7c f4       	brge	.+30     	; 0x1400 <_Z16anzeige_richtungf+0x72>
	{
		oled.draw_ASCI('N',80-charsize/2,3.5*charhighte);
    13e2:	2c e1       	ldi	r18, 0x1C	; 28
    13e4:	4d e4       	ldi	r20, 0x4D	; 77
    13e6:	6e e4       	ldi	r22, 0x4E	; 78
    13e8:	80 ef       	ldi	r24, 0xF0	; 240
    13ea:	92 e0       	ldi	r25, 0x02	; 2
    13ec:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
		oled.draw_ASCI('O',80+charsize/2,3.5*charhighte);
    13f0:	2c e1       	ldi	r18, 0x1C	; 28
    13f2:	43 e5       	ldi	r20, 0x53	; 83
    13f4:	6f e4       	ldi	r22, 0x4F	; 79
    13f6:	80 ef       	ldi	r24, 0xF0	; 240
    13f8:	92 e0       	ldi	r25, 0x02	; 2
    13fa:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    13fe:	80 c0       	rjmp	.+256    	; 0x1500 <_Z16anzeige_richtungf+0x172>
	}
	else if (winkel<135-45/2)
    1400:	20 e0       	ldi	r18, 0x00	; 0
    1402:	30 e0       	ldi	r19, 0x00	; 0
    1404:	42 ee       	ldi	r20, 0xE2	; 226
    1406:	52 e4       	ldi	r21, 0x42	; 66
    1408:	c7 01       	movw	r24, r14
    140a:	b6 01       	movw	r22, r12
    140c:	0e 94 33 21 	call	0x4266	; 0x4266 <__cmpsf2>
    1410:	88 23       	and	r24, r24
    1412:	44 f4       	brge	.+16     	; 0x1424 <_Z16anzeige_richtungf+0x96>
	{
		oled.draw_ASCI('O',80,3.5*charhighte);
    1414:	2c e1       	ldi	r18, 0x1C	; 28
    1416:	40 e5       	ldi	r20, 0x50	; 80
    1418:	6f e4       	ldi	r22, 0x4F	; 79
    141a:	80 ef       	ldi	r24, 0xF0	; 240
    141c:	92 e0       	ldi	r25, 0x02	; 2
    141e:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    1422:	6e c0       	rjmp	.+220    	; 0x1500 <_Z16anzeige_richtungf+0x172>
	}
	else if (winkel<180-45/2)
    1424:	20 e0       	ldi	r18, 0x00	; 0
    1426:	30 e0       	ldi	r19, 0x00	; 0
    1428:	4e e1       	ldi	r20, 0x1E	; 30
    142a:	53 e4       	ldi	r21, 0x43	; 67
    142c:	c7 01       	movw	r24, r14
    142e:	b6 01       	movw	r22, r12
    1430:	0e 94 33 21 	call	0x4266	; 0x4266 <__cmpsf2>
    1434:	88 23       	and	r24, r24
    1436:	7c f4       	brge	.+30     	; 0x1456 <_Z16anzeige_richtungf+0xc8>
	{
		oled.draw_ASCI('S',80-charsize/2,3.5*charhighte);
    1438:	2c e1       	ldi	r18, 0x1C	; 28
    143a:	4d e4       	ldi	r20, 0x4D	; 77
    143c:	63 e5       	ldi	r22, 0x53	; 83
    143e:	80 ef       	ldi	r24, 0xF0	; 240
    1440:	92 e0       	ldi	r25, 0x02	; 2
    1442:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
		oled.draw_ASCI('O',80+charsize/2,3.5*charhighte);
    1446:	2c e1       	ldi	r18, 0x1C	; 28
    1448:	43 e5       	ldi	r20, 0x53	; 83
    144a:	6f e4       	ldi	r22, 0x4F	; 79
    144c:	80 ef       	ldi	r24, 0xF0	; 240
    144e:	92 e0       	ldi	r25, 0x02	; 2
    1450:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    1454:	55 c0       	rjmp	.+170    	; 0x1500 <_Z16anzeige_richtungf+0x172>
	}
	else if (winkel<225-45/2)
    1456:	20 e0       	ldi	r18, 0x00	; 0
    1458:	30 e0       	ldi	r19, 0x00	; 0
    145a:	4b e4       	ldi	r20, 0x4B	; 75
    145c:	53 e4       	ldi	r21, 0x43	; 67
    145e:	c7 01       	movw	r24, r14
    1460:	b6 01       	movw	r22, r12
    1462:	0e 94 33 21 	call	0x4266	; 0x4266 <__cmpsf2>
    1466:	88 23       	and	r24, r24
    1468:	44 f4       	brge	.+16     	; 0x147a <_Z16anzeige_richtungf+0xec>
	{
		oled.draw_ASCI('S',80,3.5*charhighte);
    146a:	2c e1       	ldi	r18, 0x1C	; 28
    146c:	40 e5       	ldi	r20, 0x50	; 80
    146e:	63 e5       	ldi	r22, 0x53	; 83
    1470:	80 ef       	ldi	r24, 0xF0	; 240
    1472:	92 e0       	ldi	r25, 0x02	; 2
    1474:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    1478:	43 c0       	rjmp	.+134    	; 0x1500 <_Z16anzeige_richtungf+0x172>
	}
	else if (winkel<270-45/2)
    147a:	20 e0       	ldi	r18, 0x00	; 0
    147c:	30 e0       	ldi	r19, 0x00	; 0
    147e:	48 e7       	ldi	r20, 0x78	; 120
    1480:	53 e4       	ldi	r21, 0x43	; 67
    1482:	c7 01       	movw	r24, r14
    1484:	b6 01       	movw	r22, r12
    1486:	0e 94 33 21 	call	0x4266	; 0x4266 <__cmpsf2>
    148a:	88 23       	and	r24, r24
    148c:	7c f4       	brge	.+30     	; 0x14ac <_Z16anzeige_richtungf+0x11e>
	{
		oled.draw_ASCI('S',80-charsize/2,3.5*charhighte);
    148e:	2c e1       	ldi	r18, 0x1C	; 28
    1490:	4d e4       	ldi	r20, 0x4D	; 77
    1492:	63 e5       	ldi	r22, 0x53	; 83
    1494:	80 ef       	ldi	r24, 0xF0	; 240
    1496:	92 e0       	ldi	r25, 0x02	; 2
    1498:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
		oled.draw_ASCI('W',80+charsize/2,3.5*charhighte);
    149c:	2c e1       	ldi	r18, 0x1C	; 28
    149e:	43 e5       	ldi	r20, 0x53	; 83
    14a0:	67 e5       	ldi	r22, 0x57	; 87
    14a2:	80 ef       	ldi	r24, 0xF0	; 240
    14a4:	92 e0       	ldi	r25, 0x02	; 2
    14a6:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    14aa:	2a c0       	rjmp	.+84     	; 0x1500 <_Z16anzeige_richtungf+0x172>
	}
	else if (winkel<315-45/2)
    14ac:	20 e0       	ldi	r18, 0x00	; 0
    14ae:	30 e8       	ldi	r19, 0x80	; 128
    14b0:	42 e9       	ldi	r20, 0x92	; 146
    14b2:	53 e4       	ldi	r21, 0x43	; 67
    14b4:	c7 01       	movw	r24, r14
    14b6:	b6 01       	movw	r22, r12
    14b8:	0e 94 33 21 	call	0x4266	; 0x4266 <__cmpsf2>
    14bc:	88 23       	and	r24, r24
    14be:	44 f4       	brge	.+16     	; 0x14d0 <_Z16anzeige_richtungf+0x142>
	{
		oled.draw_ASCI('W',80,3.5*charhighte);
    14c0:	2c e1       	ldi	r18, 0x1C	; 28
    14c2:	40 e5       	ldi	r20, 0x50	; 80
    14c4:	67 e5       	ldi	r22, 0x57	; 87
    14c6:	80 ef       	ldi	r24, 0xF0	; 240
    14c8:	92 e0       	ldi	r25, 0x02	; 2
    14ca:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    14ce:	18 c0       	rjmp	.+48     	; 0x1500 <_Z16anzeige_richtungf+0x172>
	}
	else if (winkel<360-45/2)
    14d0:	20 e0       	ldi	r18, 0x00	; 0
    14d2:	30 e0       	ldi	r19, 0x00	; 0
    14d4:	49 ea       	ldi	r20, 0xA9	; 169
    14d6:	53 e4       	ldi	r21, 0x43	; 67
    14d8:	c7 01       	movw	r24, r14
    14da:	b6 01       	movw	r22, r12
    14dc:	0e 94 33 21 	call	0x4266	; 0x4266 <__cmpsf2>
    14e0:	88 23       	and	r24, r24
    14e2:	74 f4       	brge	.+28     	; 0x1500 <_Z16anzeige_richtungf+0x172>
	{
		oled.draw_ASCI('N',80-charsize/2,3.5*charhighte);
    14e4:	2c e1       	ldi	r18, 0x1C	; 28
    14e6:	4d e4       	ldi	r20, 0x4D	; 77
    14e8:	6e e4       	ldi	r22, 0x4E	; 78
    14ea:	80 ef       	ldi	r24, 0xF0	; 240
    14ec:	92 e0       	ldi	r25, 0x02	; 2
    14ee:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
		oled.draw_ASCI('W',80+charsize/2,3.5*charhighte);
    14f2:	2c e1       	ldi	r18, 0x1C	; 28
    14f4:	43 e5       	ldi	r20, 0x53	; 83
    14f6:	67 e5       	ldi	r22, 0x57	; 87
    14f8:	80 ef       	ldi	r24, 0xF0	; 240
    14fa:	92 e0       	ldi	r25, 0x02	; 2
    14fc:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
	}
}
    1500:	ff 90       	pop	r15
    1502:	ef 90       	pop	r14
    1504:	df 90       	pop	r13
    1506:	cf 90       	pop	r12
    1508:	08 95       	ret

0000150a <_Z13anzeige_nadelhhf>:

void anzeige_nadel(uint8_t x, uint8_t y, float angle){
    150a:	af 92       	push	r10
    150c:	bf 92       	push	r11
    150e:	cf 92       	push	r12
    1510:	df 92       	push	r13
    1512:	ef 92       	push	r14
    1514:	ff 92       	push	r15
    1516:	0f 93       	push	r16
    1518:	1f 93       	push	r17
	//fixed parameters for drawing the arrow
	oled.draw_triangle(x,y,20,70,angle);
    151a:	59 01       	movw	r10, r18
    151c:	6a 01       	movw	r12, r20
    151e:	e1 2c       	mov	r14, r1
    1520:	f1 2c       	mov	r15, r1
    1522:	0c e8       	ldi	r16, 0x8C	; 140
    1524:	12 e4       	ldi	r17, 0x42	; 66
    1526:	24 e1       	ldi	r18, 0x14	; 20
    1528:	46 2f       	mov	r20, r22
    152a:	68 2f       	mov	r22, r24
    152c:	80 ef       	ldi	r24, 0xF0	; 240
    152e:	92 e0       	ldi	r25, 0x02	; 2
    1530:	0e 94 b3 04 	call	0x966	; 0x966 <_ZN7Display13draw_triangleEhhhff>
}
    1534:	1f 91       	pop	r17
    1536:	0f 91       	pop	r16
    1538:	ff 90       	pop	r15
    153a:	ef 90       	pop	r14
    153c:	df 90       	pop	r13
    153e:	cf 90       	pop	r12
    1540:	bf 90       	pop	r11
    1542:	af 90       	pop	r10
    1544:	08 95       	ret

00001546 <_Z19anzeige_kleinenadelhhf>:
void anzeige_kleinenadel(uint8_t x, uint8_t y, float angle){
    1546:	af 92       	push	r10
    1548:	bf 92       	push	r11
    154a:	cf 92       	push	r12
    154c:	df 92       	push	r13
    154e:	ef 92       	push	r14
    1550:	ff 92       	push	r15
    1552:	0f 93       	push	r16
    1554:	1f 93       	push	r17
	//fixed parameters for drawing the arrow
	oled.draw_triangle(x,y,10,70,angle);
    1556:	59 01       	movw	r10, r18
    1558:	6a 01       	movw	r12, r20
    155a:	e1 2c       	mov	r14, r1
    155c:	f1 2c       	mov	r15, r1
    155e:	0c e8       	ldi	r16, 0x8C	; 140
    1560:	12 e4       	ldi	r17, 0x42	; 66
    1562:	2a e0       	ldi	r18, 0x0A	; 10
    1564:	46 2f       	mov	r20, r22
    1566:	68 2f       	mov	r22, r24
    1568:	80 ef       	ldi	r24, 0xF0	; 240
    156a:	92 e0       	ldi	r25, 0x02	; 2
    156c:	0e 94 b3 04 	call	0x966	; 0x966 <_ZN7Display13draw_triangleEhhhff>
}
    1570:	1f 91       	pop	r17
    1572:	0f 91       	pop	r16
    1574:	ff 90       	pop	r15
    1576:	ef 90       	pop	r14
    1578:	df 90       	pop	r13
    157a:	cf 90       	pop	r12
    157c:	bf 90       	pop	r11
    157e:	af 90       	pop	r10
    1580:	08 95       	ret

00001582 <_Z11menue_hauptv>:

void menue_haupt(){
    1582:	cf 92       	push	r12
    1584:	df 92       	push	r13
    1586:	ef 92       	push	r14
    1588:	ff 92       	push	r15
    158a:	0f 93       	push	r16
    158c:	1f 93       	push	r17
    158e:	cf 93       	push	r28
    1590:	df 93       	push	r29
    1592:	cd b7       	in	r28, 0x3d	; 61
    1594:	de b7       	in	r29, 0x3e	; 62
    1596:	64 97       	sbiw	r28, 0x14	; 20
    1598:	0f b6       	in	r0, 0x3f	; 63
    159a:	f8 94       	cli
    159c:	de bf       	out	0x3e, r29	; 62
    159e:	0f be       	out	0x3f, r0	; 63
    15a0:	cd bf       	out	0x3d, r28	; 61
	char buffer[20];
	uint8_t buffersize=0;

	oled.clearFrame();
    15a2:	80 ef       	ldi	r24, 0xF0	; 240
    15a4:	92 e0       	ldi	r25, 0x02	; 2
    15a6:	0e 94 ed 02 	call	0x5da	; 0x5da <_ZN7Display10clearFrameEv>
	buffersize=sprintf(buffer,"1:Fahradanzeige");
    15aa:	80 e1       	ldi	r24, 0x10	; 16
    15ac:	e6 e3       	ldi	r30, 0x36	; 54
    15ae:	f1 e0       	ldi	r31, 0x01	; 1
    15b0:	8e 01       	movw	r16, r28
    15b2:	0f 5f       	subi	r16, 0xFF	; 255
    15b4:	1f 4f       	sbci	r17, 0xFF	; 255
    15b6:	d8 01       	movw	r26, r16
    15b8:	01 90       	ld	r0, Z+
    15ba:	0d 92       	st	X+, r0
    15bc:	8a 95       	dec	r24
    15be:	e1 f7       	brne	.-8      	; 0x15b8 <_Z11menue_hauptv+0x36>
    15c0:	e0 2e       	mov	r14, r16
    15c2:	f1 2e       	mov	r15, r17
    15c4:	68 01       	movw	r12, r16
    15c6:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,0*charhighte);}
    15c8:	f6 01       	movw	r30, r12
    15ca:	61 91       	ld	r22, Z+
    15cc:	6f 01       	movw	r12, r30
    15ce:	20 e0       	ldi	r18, 0x00	; 0
    15d0:	41 2f       	mov	r20, r17
    15d2:	80 ef       	ldi	r24, 0xF0	; 240
    15d4:	92 e0       	ldi	r25, 0x02	; 2
    15d6:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    15da:	1a 5f       	subi	r17, 0xFA	; 250
    15dc:	1a 35       	cpi	r17, 0x5A	; 90
    15de:	a1 f7       	brne	.-24     	; 0x15c8 <_Z11menue_hauptv+0x46>
	buffersize=sprintf(buffer,"2:Taschenrechner");
    15e0:	81 e1       	ldi	r24, 0x11	; 17
    15e2:	e6 e4       	ldi	r30, 0x46	; 70
    15e4:	f1 e0       	ldi	r31, 0x01	; 1
    15e6:	de 01       	movw	r26, r28
    15e8:	11 96       	adiw	r26, 0x01	; 1
    15ea:	01 90       	ld	r0, Z+
    15ec:	0d 92       	st	X+, r0
    15ee:	8a 95       	dec	r24
    15f0:	e1 f7       	brne	.-8      	; 0x15ea <_Z11menue_hauptv+0x68>
    15f2:	ce 2c       	mov	r12, r14
    15f4:	df 2c       	mov	r13, r15
    15f6:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,1*charhighte);}
    15f8:	f6 01       	movw	r30, r12
    15fa:	61 91       	ld	r22, Z+
    15fc:	6f 01       	movw	r12, r30
    15fe:	28 e0       	ldi	r18, 0x08	; 8
    1600:	41 2f       	mov	r20, r17
    1602:	80 ef       	ldi	r24, 0xF0	; 240
    1604:	92 e0       	ldi	r25, 0x02	; 2
    1606:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    160a:	1a 5f       	subi	r17, 0xFA	; 250
    160c:	10 36       	cpi	r17, 0x60	; 96
    160e:	a1 f7       	brne	.-24     	; 0x15f8 <_Z11menue_hauptv+0x76>
	buffersize=sprintf(buffer,"3:Kompass");
    1610:	8a e0       	ldi	r24, 0x0A	; 10
    1612:	e7 e5       	ldi	r30, 0x57	; 87
    1614:	f1 e0       	ldi	r31, 0x01	; 1
    1616:	de 01       	movw	r26, r28
    1618:	11 96       	adiw	r26, 0x01	; 1
    161a:	01 90       	ld	r0, Z+
    161c:	0d 92       	st	X+, r0
    161e:	8a 95       	dec	r24
    1620:	e1 f7       	brne	.-8      	; 0x161a <_Z11menue_hauptv+0x98>
    1622:	ce 2c       	mov	r12, r14
    1624:	df 2c       	mov	r13, r15
    1626:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,2*charhighte);}
    1628:	f6 01       	movw	r30, r12
    162a:	61 91       	ld	r22, Z+
    162c:	6f 01       	movw	r12, r30
    162e:	20 e1       	ldi	r18, 0x10	; 16
    1630:	41 2f       	mov	r20, r17
    1632:	80 ef       	ldi	r24, 0xF0	; 240
    1634:	92 e0       	ldi	r25, 0x02	; 2
    1636:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    163a:	1a 5f       	subi	r17, 0xFA	; 250
    163c:	16 33       	cpi	r17, 0x36	; 54
    163e:	a1 f7       	brne	.-24     	; 0x1628 <_Z11menue_hauptv+0xa6>
	buffersize=sprintf(buffer,"4:Uhrmenue");
    1640:	8b e0       	ldi	r24, 0x0B	; 11
    1642:	e1 e6       	ldi	r30, 0x61	; 97
    1644:	f1 e0       	ldi	r31, 0x01	; 1
    1646:	de 01       	movw	r26, r28
    1648:	11 96       	adiw	r26, 0x01	; 1
    164a:	01 90       	ld	r0, Z+
    164c:	0d 92       	st	X+, r0
    164e:	8a 95       	dec	r24
    1650:	e1 f7       	brne	.-8      	; 0x164a <_Z11menue_hauptv+0xc8>
    1652:	ce 2c       	mov	r12, r14
    1654:	df 2c       	mov	r13, r15
    1656:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,3*charhighte);}
    1658:	f6 01       	movw	r30, r12
    165a:	61 91       	ld	r22, Z+
    165c:	6f 01       	movw	r12, r30
    165e:	28 e1       	ldi	r18, 0x18	; 24
    1660:	41 2f       	mov	r20, r17
    1662:	80 ef       	ldi	r24, 0xF0	; 240
    1664:	92 e0       	ldi	r25, 0x02	; 2
    1666:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    166a:	1a 5f       	subi	r17, 0xFA	; 250
    166c:	1c 33       	cpi	r17, 0x3C	; 60
    166e:	a1 f7       	brne	.-24     	; 0x1658 <_Z11menue_hauptv+0xd6>
	buffersize=sprintf(buffer,"5:Einstellungen");
    1670:	80 e1       	ldi	r24, 0x10	; 16
    1672:	ec e6       	ldi	r30, 0x6C	; 108
    1674:	f1 e0       	ldi	r31, 0x01	; 1
    1676:	de 01       	movw	r26, r28
    1678:	11 96       	adiw	r26, 0x01	; 1
    167a:	01 90       	ld	r0, Z+
    167c:	0d 92       	st	X+, r0
    167e:	8a 95       	dec	r24
    1680:	e1 f7       	brne	.-8      	; 0x167a <_Z11menue_hauptv+0xf8>
    1682:	ce 2c       	mov	r12, r14
    1684:	df 2c       	mov	r13, r15
    1686:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,4*charhighte);}
    1688:	f6 01       	movw	r30, r12
    168a:	61 91       	ld	r22, Z+
    168c:	6f 01       	movw	r12, r30
    168e:	20 e2       	ldi	r18, 0x20	; 32
    1690:	41 2f       	mov	r20, r17
    1692:	80 ef       	ldi	r24, 0xF0	; 240
    1694:	92 e0       	ldi	r25, 0x02	; 2
    1696:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    169a:	1a 5f       	subi	r17, 0xFA	; 250
    169c:	1a 35       	cpi	r17, 0x5A	; 90
    169e:	a1 f7       	brne	.-24     	; 0x1688 <_Z11menue_hauptv+0x106>
	buffersize=sprintf(buffer,"6:Display aus");
    16a0:	8e e0       	ldi	r24, 0x0E	; 14
    16a2:	ec e7       	ldi	r30, 0x7C	; 124
    16a4:	f1 e0       	ldi	r31, 0x01	; 1
    16a6:	de 01       	movw	r26, r28
    16a8:	11 96       	adiw	r26, 0x01	; 1
    16aa:	01 90       	ld	r0, Z+
    16ac:	0d 92       	st	X+, r0
    16ae:	8a 95       	dec	r24
    16b0:	e1 f7       	brne	.-8      	; 0x16aa <_Z11menue_hauptv+0x128>
    16b2:	ce 2c       	mov	r12, r14
    16b4:	df 2c       	mov	r13, r15
    16b6:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,5*charhighte);}
    16b8:	f6 01       	movw	r30, r12
    16ba:	61 91       	ld	r22, Z+
    16bc:	6f 01       	movw	r12, r30
    16be:	28 e2       	ldi	r18, 0x28	; 40
    16c0:	41 2f       	mov	r20, r17
    16c2:	80 ef       	ldi	r24, 0xF0	; 240
    16c4:	92 e0       	ldi	r25, 0x02	; 2
    16c6:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    16ca:	1a 5f       	subi	r17, 0xFA	; 250
    16cc:	1e 34       	cpi	r17, 0x4E	; 78
    16ce:	a1 f7       	brne	.-24     	; 0x16b8 <_Z11menue_hauptv+0x136>
	buffersize=sprintf(buffer,"7:Drucksensor");
    16d0:	8e e0       	ldi	r24, 0x0E	; 14
    16d2:	ea e8       	ldi	r30, 0x8A	; 138
    16d4:	f1 e0       	ldi	r31, 0x01	; 1
    16d6:	de 01       	movw	r26, r28
    16d8:	11 96       	adiw	r26, 0x01	; 1
    16da:	01 90       	ld	r0, Z+
    16dc:	0d 92       	st	X+, r0
    16de:	8a 95       	dec	r24
    16e0:	e1 f7       	brne	.-8      	; 0x16da <_Z11menue_hauptv+0x158>
    16e2:	ce 2c       	mov	r12, r14
    16e4:	df 2c       	mov	r13, r15
    16e6:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,6*charhighte);}
    16e8:	f6 01       	movw	r30, r12
    16ea:	61 91       	ld	r22, Z+
    16ec:	6f 01       	movw	r12, r30
    16ee:	20 e3       	ldi	r18, 0x30	; 48
    16f0:	41 2f       	mov	r20, r17
    16f2:	80 ef       	ldi	r24, 0xF0	; 240
    16f4:	92 e0       	ldi	r25, 0x02	; 2
    16f6:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    16fa:	1a 5f       	subi	r17, 0xFA	; 250
    16fc:	1e 34       	cpi	r17, 0x4E	; 78
    16fe:	a1 f7       	brne	.-24     	; 0x16e8 <_Z11menue_hauptv+0x166>
}
    1700:	64 96       	adiw	r28, 0x14	; 20
    1702:	0f b6       	in	r0, 0x3f	; 63
    1704:	f8 94       	cli
    1706:	de bf       	out	0x3e, r29	; 62
    1708:	0f be       	out	0x3f, r0	; 63
    170a:	cd bf       	out	0x3d, r28	; 61
    170c:	df 91       	pop	r29
    170e:	cf 91       	pop	r28
    1710:	1f 91       	pop	r17
    1712:	0f 91       	pop	r16
    1714:	ff 90       	pop	r15
    1716:	ef 90       	pop	r14
    1718:	df 90       	pop	r13
    171a:	cf 90       	pop	r12
    171c:	08 95       	ret

0000171e <_Z11menue_einstv>:
void menue_einst(){
    171e:	af 92       	push	r10
    1720:	bf 92       	push	r11
    1722:	df 92       	push	r13
    1724:	ef 92       	push	r14
    1726:	0f 93       	push	r16
    1728:	1f 93       	push	r17
    172a:	cf 93       	push	r28
    172c:	df 93       	push	r29
    172e:	cd b7       	in	r28, 0x3d	; 61
    1730:	de b7       	in	r29, 0x3e	; 62
    1732:	64 97       	sbiw	r28, 0x14	; 20
    1734:	0f b6       	in	r0, 0x3f	; 63
    1736:	f8 94       	cli
    1738:	de bf       	out	0x3e, r29	; 62
    173a:	0f be       	out	0x3f, r0	; 63
    173c:	cd bf       	out	0x3d, r28	; 61
	char buffer[20];
	uint8_t buffersize=0;

	oled.clearFrame();
    173e:	80 ef       	ldi	r24, 0xF0	; 240
    1740:	92 e0       	ldi	r25, 0x02	; 2
    1742:	0e 94 ed 02 	call	0x5da	; 0x5da <_ZN7Display10clearFrameEv>
	buffersize=sprintf(buffer,"1:Kompass kalib.");
    1746:	81 e1       	ldi	r24, 0x11	; 17
    1748:	e8 e9       	ldi	r30, 0x98	; 152
    174a:	f1 e0       	ldi	r31, 0x01	; 1
    174c:	8e 01       	movw	r16, r28
    174e:	0f 5f       	subi	r16, 0xFF	; 255
    1750:	1f 4f       	sbci	r17, 0xFF	; 255
    1752:	d8 01       	movw	r26, r16
    1754:	01 90       	ld	r0, Z+
    1756:	0d 92       	st	X+, r0
    1758:	8a 95       	dec	r24
    175a:	e1 f7       	brne	.-8      	; 0x1754 <_Z11menue_einstv+0x36>
    175c:	d0 2e       	mov	r13, r16
    175e:	e1 2e       	mov	r14, r17
    1760:	58 01       	movw	r10, r16
    1762:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,0*charhighte);}
    1764:	f5 01       	movw	r30, r10
    1766:	61 91       	ld	r22, Z+
    1768:	5f 01       	movw	r10, r30
    176a:	20 e0       	ldi	r18, 0x00	; 0
    176c:	41 2f       	mov	r20, r17
    176e:	80 ef       	ldi	r24, 0xF0	; 240
    1770:	92 e0       	ldi	r25, 0x02	; 2
    1772:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    1776:	1a 5f       	subi	r17, 0xFA	; 250
    1778:	10 36       	cpi	r17, 0x60	; 96
    177a:	a1 f7       	brne	.-24     	; 0x1764 <_Z11menue_einstv+0x46>
	buffersize=sprintf(buffer,"2:Kompassverstaerkung");
    177c:	86 e1       	ldi	r24, 0x16	; 22
    177e:	e9 ea       	ldi	r30, 0xA9	; 169
    1780:	f1 e0       	ldi	r31, 0x01	; 1
    1782:	de 01       	movw	r26, r28
    1784:	11 96       	adiw	r26, 0x01	; 1
    1786:	01 90       	ld	r0, Z+
    1788:	0d 92       	st	X+, r0
    178a:	8a 95       	dec	r24
    178c:	e1 f7       	brne	.-8      	; 0x1786 <_Z11menue_einstv+0x68>
    178e:	ad 2c       	mov	r10, r13
    1790:	be 2c       	mov	r11, r14
    1792:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,1*charhighte);}
    1794:	f5 01       	movw	r30, r10
    1796:	61 91       	ld	r22, Z+
    1798:	5f 01       	movw	r10, r30
    179a:	28 e0       	ldi	r18, 0x08	; 8
    179c:	41 2f       	mov	r20, r17
    179e:	80 ef       	ldi	r24, 0xF0	; 240
    17a0:	92 e0       	ldi	r25, 0x02	; 2
    17a2:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    17a6:	1a 5f       	subi	r17, 0xFA	; 250
    17a8:	1e 37       	cpi	r17, 0x7E	; 126
    17aa:	a1 f7       	brne	.-24     	; 0x1794 <_Z11menue_einstv+0x76>
	buffersize=sprintf(buffer,"3:Uhr einstellen");
    17ac:	81 e1       	ldi	r24, 0x11	; 17
    17ae:	ef eb       	ldi	r30, 0xBF	; 191
    17b0:	f1 e0       	ldi	r31, 0x01	; 1
    17b2:	de 01       	movw	r26, r28
    17b4:	11 96       	adiw	r26, 0x01	; 1
    17b6:	01 90       	ld	r0, Z+
    17b8:	0d 92       	st	X+, r0
    17ba:	8a 95       	dec	r24
    17bc:	e1 f7       	brne	.-8      	; 0x17b6 <_Z11menue_einstv+0x98>
    17be:	ad 2c       	mov	r10, r13
    17c0:	be 2c       	mov	r11, r14
    17c2:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,2*charhighte);}
    17c4:	f5 01       	movw	r30, r10
    17c6:	61 91       	ld	r22, Z+
    17c8:	5f 01       	movw	r10, r30
    17ca:	20 e1       	ldi	r18, 0x10	; 16
    17cc:	41 2f       	mov	r20, r17
    17ce:	80 ef       	ldi	r24, 0xF0	; 240
    17d0:	92 e0       	ldi	r25, 0x02	; 2
    17d2:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    17d6:	1a 5f       	subi	r17, 0xFA	; 250
    17d8:	10 36       	cpi	r17, 0x60	; 96
    17da:	a1 f7       	brne	.-24     	; 0x17c4 <_Z11menue_einstv+0xa6>
	//for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,4*charhighte);}
	//buffersize=sprintf(buffer,"6:HMC5883L Gain");
	//for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,5*charhighte);}
	//buffersize=sprintf(buffer,"7:Uhr einstellen");
	//for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,6*charhighte);}
}
    17dc:	64 96       	adiw	r28, 0x14	; 20
    17de:	0f b6       	in	r0, 0x3f	; 63
    17e0:	f8 94       	cli
    17e2:	de bf       	out	0x3e, r29	; 62
    17e4:	0f be       	out	0x3f, r0	; 63
    17e6:	cd bf       	out	0x3d, r28	; 61
    17e8:	df 91       	pop	r29
    17ea:	cf 91       	pop	r28
    17ec:	1f 91       	pop	r17
    17ee:	0f 91       	pop	r16
    17f0:	ef 90       	pop	r14
    17f2:	df 90       	pop	r13
    17f4:	bf 90       	pop	r11
    17f6:	af 90       	pop	r10
    17f8:	08 95       	ret

000017fa <_Z9menue_uhrv>:
void menue_uhr(){
    17fa:	af 92       	push	r10
    17fc:	bf 92       	push	r11
    17fe:	df 92       	push	r13
    1800:	ef 92       	push	r14
    1802:	0f 93       	push	r16
    1804:	1f 93       	push	r17
    1806:	cf 93       	push	r28
    1808:	df 93       	push	r29
    180a:	cd b7       	in	r28, 0x3d	; 61
    180c:	de b7       	in	r29, 0x3e	; 62
    180e:	64 97       	sbiw	r28, 0x14	; 20
    1810:	0f b6       	in	r0, 0x3f	; 63
    1812:	f8 94       	cli
    1814:	de bf       	out	0x3e, r29	; 62
    1816:	0f be       	out	0x3f, r0	; 63
    1818:	cd bf       	out	0x3d, r28	; 61
	char buffer[20];
	uint8_t buffersize=0;

	oled.clearFrame();
    181a:	80 ef       	ldi	r24, 0xF0	; 240
    181c:	92 e0       	ldi	r25, 0x02	; 2
    181e:	0e 94 ed 02 	call	0x5da	; 0x5da <_ZN7Display10clearFrameEv>
	buffersize=sprintf(buffer,"1:Uhr");
    1822:	86 e0       	ldi	r24, 0x06	; 6
    1824:	e0 ed       	ldi	r30, 0xD0	; 208
    1826:	f1 e0       	ldi	r31, 0x01	; 1
    1828:	8e 01       	movw	r16, r28
    182a:	0f 5f       	subi	r16, 0xFF	; 255
    182c:	1f 4f       	sbci	r17, 0xFF	; 255
    182e:	d8 01       	movw	r26, r16
    1830:	01 90       	ld	r0, Z+
    1832:	0d 92       	st	X+, r0
    1834:	8a 95       	dec	r24
    1836:	e1 f7       	brne	.-8      	; 0x1830 <_Z9menue_uhrv+0x36>
    1838:	d0 2e       	mov	r13, r16
    183a:	e1 2e       	mov	r14, r17
    183c:	58 01       	movw	r10, r16
    183e:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,0*charhighte);}
    1840:	f5 01       	movw	r30, r10
    1842:	61 91       	ld	r22, Z+
    1844:	5f 01       	movw	r10, r30
    1846:	20 e0       	ldi	r18, 0x00	; 0
    1848:	41 2f       	mov	r20, r17
    184a:	80 ef       	ldi	r24, 0xF0	; 240
    184c:	92 e0       	ldi	r25, 0x02	; 2
    184e:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    1852:	1a 5f       	subi	r17, 0xFA	; 250
    1854:	1e 31       	cpi	r17, 0x1E	; 30
    1856:	a1 f7       	brne	.-24     	; 0x1840 <_Z9menue_uhrv+0x46>
	buffersize=sprintf(buffer,"2:Stoppuhr");
    1858:	8b e0       	ldi	r24, 0x0B	; 11
    185a:	e6 ed       	ldi	r30, 0xD6	; 214
    185c:	f1 e0       	ldi	r31, 0x01	; 1
    185e:	de 01       	movw	r26, r28
    1860:	11 96       	adiw	r26, 0x01	; 1
    1862:	01 90       	ld	r0, Z+
    1864:	0d 92       	st	X+, r0
    1866:	8a 95       	dec	r24
    1868:	e1 f7       	brne	.-8      	; 0x1862 <_Z9menue_uhrv+0x68>
    186a:	ad 2c       	mov	r10, r13
    186c:	be 2c       	mov	r11, r14
    186e:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,1*charhighte);}
    1870:	f5 01       	movw	r30, r10
    1872:	61 91       	ld	r22, Z+
    1874:	5f 01       	movw	r10, r30
    1876:	28 e0       	ldi	r18, 0x08	; 8
    1878:	41 2f       	mov	r20, r17
    187a:	80 ef       	ldi	r24, 0xF0	; 240
    187c:	92 e0       	ldi	r25, 0x02	; 2
    187e:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    1882:	1a 5f       	subi	r17, 0xFA	; 250
    1884:	1c 33       	cpi	r17, 0x3C	; 60
    1886:	a1 f7       	brne	.-24     	; 0x1870 <_Z9menue_uhrv+0x76>
	buffersize=sprintf(buffer,"3:Timer");
    1888:	88 e0       	ldi	r24, 0x08	; 8
    188a:	e1 ee       	ldi	r30, 0xE1	; 225
    188c:	f1 e0       	ldi	r31, 0x01	; 1
    188e:	de 01       	movw	r26, r28
    1890:	11 96       	adiw	r26, 0x01	; 1
    1892:	01 90       	ld	r0, Z+
    1894:	0d 92       	st	X+, r0
    1896:	8a 95       	dec	r24
    1898:	e1 f7       	brne	.-8      	; 0x1892 <_Z9menue_uhrv+0x98>
    189a:	ad 2c       	mov	r10, r13
    189c:	be 2c       	mov	r11, r14
    189e:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,2*charhighte);}
    18a0:	f5 01       	movw	r30, r10
    18a2:	61 91       	ld	r22, Z+
    18a4:	5f 01       	movw	r10, r30
    18a6:	20 e1       	ldi	r18, 0x10	; 16
    18a8:	41 2f       	mov	r20, r17
    18aa:	80 ef       	ldi	r24, 0xF0	; 240
    18ac:	92 e0       	ldi	r25, 0x02	; 2
    18ae:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    18b2:	1a 5f       	subi	r17, 0xFA	; 250
    18b4:	1a 32       	cpi	r17, 0x2A	; 42
    18b6:	a1 f7       	brne	.-24     	; 0x18a0 <_Z9menue_uhrv+0xa6>
	buffersize=sprintf(buffer,"4:Alarm");
    18b8:	88 e0       	ldi	r24, 0x08	; 8
    18ba:	e9 ee       	ldi	r30, 0xE9	; 233
    18bc:	f1 e0       	ldi	r31, 0x01	; 1
    18be:	de 01       	movw	r26, r28
    18c0:	11 96       	adiw	r26, 0x01	; 1
    18c2:	01 90       	ld	r0, Z+
    18c4:	0d 92       	st	X+, r0
    18c6:	8a 95       	dec	r24
    18c8:	e1 f7       	brne	.-8      	; 0x18c2 <_Z9menue_uhrv+0xc8>
    18ca:	ad 2c       	mov	r10, r13
    18cc:	be 2c       	mov	r11, r14
    18ce:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,3*charhighte);}
    18d0:	f5 01       	movw	r30, r10
    18d2:	61 91       	ld	r22, Z+
    18d4:	5f 01       	movw	r10, r30
    18d6:	28 e1       	ldi	r18, 0x18	; 24
    18d8:	41 2f       	mov	r20, r17
    18da:	80 ef       	ldi	r24, 0xF0	; 240
    18dc:	92 e0       	ldi	r25, 0x02	; 2
    18de:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    18e2:	1a 5f       	subi	r17, 0xFA	; 250
    18e4:	1a 32       	cpi	r17, 0x2A	; 42
    18e6:	a1 f7       	brne	.-24     	; 0x18d0 <_Z9menue_uhrv+0xd6>
	//for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,4*charhighte);}
	//buffersize=sprintf(buffer,"6:HMC5883L Gain");
	//for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,5*charhighte);}
	//buffersize=sprintf(buffer,"7:Uhr einstellen");
	//for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,6*charhighte);}
}
    18e8:	64 96       	adiw	r28, 0x14	; 20
    18ea:	0f b6       	in	r0, 0x3f	; 63
    18ec:	f8 94       	cli
    18ee:	de bf       	out	0x3e, r29	; 62
    18f0:	0f be       	out	0x3f, r0	; 63
    18f2:	cd bf       	out	0x3d, r28	; 61
    18f4:	df 91       	pop	r29
    18f6:	cf 91       	pop	r28
    18f8:	1f 91       	pop	r17
    18fa:	0f 91       	pop	r16
    18fc:	ef 90       	pop	r14
    18fe:	df 90       	pop	r13
    1900:	bf 90       	pop	r11
    1902:	af 90       	pop	r10
    1904:	08 95       	ret

00001906 <_Z11uhranzeigenv>:

void uhranzeigen(){
    1906:	df 92       	push	r13
    1908:	ef 92       	push	r14
    190a:	ff 92       	push	r15
    190c:	0f 93       	push	r16
    190e:	1f 93       	push	r17
    1910:	cf 93       	push	r28
    1912:	df 93       	push	r29
    1914:	cd b7       	in	r28, 0x3d	; 61
    1916:	de b7       	in	r29, 0x3e	; 62
    1918:	64 97       	sbiw	r28, 0x14	; 20
    191a:	0f b6       	in	r0, 0x3f	; 63
    191c:	f8 94       	cli
    191e:	de bf       	out	0x3e, r29	; 62
    1920:	0f be       	out	0x3f, r0	; 63
    1922:	cd bf       	out	0x3d, r28	; 61
	uint8_t buffersize;
	char Buffer[20];
	oled.clearFrame();
    1924:	80 ef       	ldi	r24, 0xF0	; 240
    1926:	92 e0       	ldi	r25, 0x02	; 2
    1928:	0e 94 ed 02 	call	0x5da	; 0x5da <_ZN7Display10clearFrameEv>
	oled.analog(rtc.Stunden,rtc.Minuten,rtc.Sekunden);
    192c:	20 91 33 07 	lds	r18, 0x0733
    1930:	40 91 32 07 	lds	r20, 0x0732
    1934:	60 91 31 07 	lds	r22, 0x0731
    1938:	80 ef       	ldi	r24, 0xF0	; 240
    193a:	92 e0       	ldi	r25, 0x02	; 2
    193c:	0e 94 9c 06 	call	0xd38	; 0xd38 <_ZN7Display6analogEhhh>
    1940:	0f 2e       	mov	r0, r31
    1942:	f1 e2       	ldi	r31, 0x21	; 33
    1944:	ef 2e       	mov	r14, r31
    1946:	f7 e0       	ldi	r31, 0x07	; 7
    1948:	ff 2e       	mov	r15, r31
    194a:	f0 2d       	mov	r31, r0
    194c:	11 e4       	ldi	r17, 0x41	; 65
	for(uint8_t i=0;i<bitsderrtc;i++){oled.draw_ASCI(rtc.msg_uhr[i],65+i*charsize,0*charhighte);}
    194e:	f7 01       	movw	r30, r14
    1950:	61 91       	ld	r22, Z+
    1952:	7f 01       	movw	r14, r30
    1954:	20 e0       	ldi	r18, 0x00	; 0
    1956:	41 2f       	mov	r20, r17
    1958:	80 ef       	ldi	r24, 0xF0	; 240
    195a:	92 e0       	ldi	r25, 0x02	; 2
    195c:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    1960:	1a 5f       	subi	r17, 0xFA	; 250
    1962:	11 37       	cpi	r17, 0x71	; 113
    1964:	a1 f7       	brne	.-24     	; 0x194e <_Z11uhranzeigenv+0x48>
    1966:	0f 2e       	mov	r0, r31
    1968:	f9 e2       	ldi	r31, 0x29	; 41
    196a:	ef 2e       	mov	r14, r31
    196c:	f7 e0       	ldi	r31, 0x07	; 7
    196e:	ff 2e       	mov	r15, r31
    1970:	f0 2d       	mov	r31, r0
    1972:	11 e4       	ldi	r17, 0x41	; 65
	for(uint8_t i=0;i<bitsderrtc;i++){oled.draw_ASCI(rtc.msg_dat[i],65+i*charsize,7*charhighte);}
    1974:	f7 01       	movw	r30, r14
    1976:	61 91       	ld	r22, Z+
    1978:	7f 01       	movw	r14, r30
    197a:	28 e3       	ldi	r18, 0x38	; 56
    197c:	41 2f       	mov	r20, r17
    197e:	80 ef       	ldi	r24, 0xF0	; 240
    1980:	92 e0       	ldi	r25, 0x02	; 2
    1982:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    1986:	1a 5f       	subi	r17, 0xFA	; 250
    1988:	11 37       	cpi	r17, 0x71	; 113
    198a:	a1 f7       	brne	.-24     	; 0x1974 <_Z11uhranzeigenv+0x6e>
	buffersize=sprintf(Buffer,"%i%%",Batteriestatus());
    198c:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <_Z14Batteriestatusv>
    1990:	28 2f       	mov	r18, r24
    1992:	33 27       	eor	r19, r19
    1994:	27 fd       	sbrc	r18, 7
    1996:	30 95       	com	r19
    1998:	3f 93       	push	r19
    199a:	8f 93       	push	r24
    199c:	81 e3       	ldi	r24, 0x31	; 49
    199e:	91 e0       	ldi	r25, 0x01	; 1
    19a0:	9f 93       	push	r25
    19a2:	8f 93       	push	r24
    19a4:	ce 01       	movw	r24, r28
    19a6:	01 96       	adiw	r24, 0x01	; 1
    19a8:	9f 93       	push	r25
    19aa:	8f 93       	push	r24
    19ac:	0e 94 b6 28 	call	0x516c	; 0x516c <sprintf>
	for(uint8_t i=0;i<buffersize;i++){
    19b0:	0f 90       	pop	r0
    19b2:	0f 90       	pop	r0
    19b4:	0f 90       	pop	r0
    19b6:	0f 90       	pop	r0
    19b8:	0f 90       	pop	r0
    19ba:	0f 90       	pop	r0
    19bc:	88 23       	and	r24, r24
    19be:	59 f1       	breq	.+86     	; 0x1a16 <_Z11uhranzeigenv+0x110>
    19c0:	8e 01       	movw	r16, r28
    19c2:	0f 5f       	subi	r16, 0xFF	; 255
    19c4:	1f 4f       	sbci	r17, 0xFF	; 255
    19c6:	81 50       	subi	r24, 0x01	; 1
    19c8:	68 94       	set
    19ca:	ee 24       	eor	r14, r14
    19cc:	e1 f8       	bld	r14, 1
    19ce:	f1 2c       	mov	r15, r1
    19d0:	ec 0e       	add	r14, r28
    19d2:	fd 1e       	adc	r15, r29
    19d4:	e8 0e       	add	r14, r24
    19d6:	f1 1c       	adc	r15, r1
    19d8:	0f 2e       	mov	r0, r31
    19da:	f9 e4       	ldi	r31, 0x49	; 73
    19dc:	df 2e       	mov	r13, r31
    19de:	f0 2d       	mov	r31, r0
		if (Buffer[i]=='%' || Buffer[i]=='-')
    19e0:	f8 01       	movw	r30, r16
    19e2:	61 91       	ld	r22, Z+
    19e4:	8f 01       	movw	r16, r30
    19e6:	86 2f       	mov	r24, r22
    19e8:	87 7f       	andi	r24, 0xF7	; 247
    19ea:	85 32       	cpi	r24, 0x25	; 37
    19ec:	39 f4       	brne	.+14     	; 0x19fc <_Z11uhranzeigenv+0xf6>
		{
			oled.draw_ASCI(Buffer[i],73+i*numbersmalsize,3.5*charhighte);
    19ee:	2c e1       	ldi	r18, 0x1C	; 28
    19f0:	4d 2d       	mov	r20, r13
    19f2:	80 ef       	ldi	r24, 0xF0	; 240
    19f4:	92 e0       	ldi	r25, 0x02	; 2
    19f6:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    19fa:	08 c0       	rjmp	.+16     	; 0x1a0c <_Z11uhranzeigenv+0x106>
		}
		else{
			oled.draw_number16x16(Buffer[i]-'0',70+i*numbersmalsize,3*charhighte);
    19fc:	60 53       	subi	r22, 0x30	; 48
    19fe:	28 e1       	ldi	r18, 0x18	; 24
    1a00:	4d ef       	ldi	r20, 0xFD	; 253
    1a02:	4d 0d       	add	r20, r13
    1a04:	80 ef       	ldi	r24, 0xF0	; 240
    1a06:	92 e0       	ldi	r25, 0x02	; 2
    1a08:	0e 94 26 06 	call	0xc4c	; 0xc4c <_ZN7Display16draw_number16x16Ehhh>
    1a0c:	f0 e1       	ldi	r31, 0x10	; 16
    1a0e:	df 0e       	add	r13, r31
	oled.clearFrame();
	oled.analog(rtc.Stunden,rtc.Minuten,rtc.Sekunden);
	for(uint8_t i=0;i<bitsderrtc;i++){oled.draw_ASCI(rtc.msg_uhr[i],65+i*charsize,0*charhighte);}
	for(uint8_t i=0;i<bitsderrtc;i++){oled.draw_ASCI(rtc.msg_dat[i],65+i*charsize,7*charhighte);}
	buffersize=sprintf(Buffer,"%i%%",Batteriestatus());
	for(uint8_t i=0;i<buffersize;i++){
    1a10:	0e 15       	cp	r16, r14
    1a12:	1f 05       	cpc	r17, r15
    1a14:	29 f7       	brne	.-54     	; 0x19e0 <_Z11uhranzeigenv+0xda>
		}
		else{
			oled.draw_number16x16(Buffer[i]-'0',70+i*numbersmalsize,3*charhighte);
		}
	}
}
    1a16:	64 96       	adiw	r28, 0x14	; 20
    1a18:	0f b6       	in	r0, 0x3f	; 63
    1a1a:	f8 94       	cli
    1a1c:	de bf       	out	0x3e, r29	; 62
    1a1e:	0f be       	out	0x3f, r0	; 63
    1a20:	cd bf       	out	0x3d, r28	; 61
    1a22:	df 91       	pop	r29
    1a24:	cf 91       	pop	r28
    1a26:	1f 91       	pop	r17
    1a28:	0f 91       	pop	r16
    1a2a:	ff 90       	pop	r15
    1a2c:	ef 90       	pop	r14
    1a2e:	df 90       	pop	r13
    1a30:	08 95       	ret

00001a32 <_Z12fahradschirmdd>:

void fahradschirm(double winkelgeschw, double angle){
    1a32:	8f 92       	push	r8
    1a34:	9f 92       	push	r9
    1a36:	af 92       	push	r10
    1a38:	bf 92       	push	r11
    1a3a:	cf 92       	push	r12
    1a3c:	df 92       	push	r13
    1a3e:	ef 92       	push	r14
    1a40:	ff 92       	push	r15
    1a42:	0f 93       	push	r16
    1a44:	1f 93       	push	r17
    1a46:	cf 93       	push	r28
    1a48:	df 93       	push	r29
    1a4a:	cd b7       	in	r28, 0x3d	; 61
    1a4c:	de b7       	in	r29, 0x3e	; 62
    1a4e:	2a 97       	sbiw	r28, 0x0a	; 10
    1a50:	0f b6       	in	r0, 0x3f	; 63
    1a52:	f8 94       	cli
    1a54:	de bf       	out	0x3e, r29	; 62
    1a56:	0f be       	out	0x3f, r0	; 63
    1a58:	cd bf       	out	0x3d, r28	; 61
    1a5a:	16 2f       	mov	r17, r22
    1a5c:	07 2f       	mov	r16, r23
    1a5e:	f8 2e       	mov	r15, r24
    1a60:	e9 2e       	mov	r14, r25
    1a62:	a2 2e       	mov	r10, r18
    1a64:	b3 2e       	mov	r11, r19
    1a66:	c4 2e       	mov	r12, r20
    1a68:	d5 2e       	mov	r13, r21
	char buffer[10];
	uint8_t buffersize=0;
	oled.clearFrame();
    1a6a:	80 ef       	ldi	r24, 0xF0	; 240
    1a6c:	92 e0       	ldi	r25, 0x02	; 2
    1a6e:	0e 94 ed 02 	call	0x5da	; 0x5da <_ZN7Display10clearFrameEv>
	header(0);
    1a72:	80 e0       	ldi	r24, 0x00	; 0
    1a74:	0e 94 47 09 	call	0x128e	; 0x128e <_Z6headerh>
	bottom(0);
    1a78:	80 e0       	ldi	r24, 0x00	; 0
    1a7a:	0e 94 b1 09 	call	0x1362	; 0x1362 <_Z6bottomh>
	//Ausgabe der Geschwidigkeit
	buffersize=sprintf(buffer,"%3.1f",winkelgeschw);
    1a7e:	ef 92       	push	r14
    1a80:	ff 92       	push	r15
    1a82:	0f 93       	push	r16
    1a84:	1f 93       	push	r17
    1a86:	81 ef       	ldi	r24, 0xF1	; 241
    1a88:	91 e0       	ldi	r25, 0x01	; 1
    1a8a:	9f 93       	push	r25
    1a8c:	8f 93       	push	r24
    1a8e:	ce 01       	movw	r24, r28
    1a90:	01 96       	adiw	r24, 0x01	; 1
    1a92:	9f 93       	push	r25
    1a94:	8f 93       	push	r24
    1a96:	0e 94 b6 28 	call	0x516c	; 0x516c <sprintf>
	for(uint8_t i=((SSD1306_WIDTH/numbersmalsize)-buffersize-1);i<((SSD1306_WIDTH/numbersmalsize)-1);i++){
    1a9a:	27 e0       	ldi	r18, 0x07	; 7
    1a9c:	f2 2e       	mov	r15, r18
    1a9e:	f8 1a       	sub	r15, r24
    1aa0:	0f b6       	in	r0, 0x3f	; 63
    1aa2:	f8 94       	cli
    1aa4:	de bf       	out	0x3e, r29	; 62
    1aa6:	0f be       	out	0x3f, r0	; 63
    1aa8:	cd bf       	out	0x3d, r28	; 61
    1aaa:	36 e0       	ldi	r19, 0x06	; 6
    1aac:	3f 15       	cp	r19, r15
    1aae:	38 f1       	brcs	.+78     	; 0x1afe <_Z12fahradschirmdd+0xcc>
    1ab0:	ef 2c       	mov	r14, r15
    1ab2:	ee 0c       	add	r14, r14
    1ab4:	ee 0c       	add	r14, r14
    1ab6:	ee 0c       	add	r14, r14
    1ab8:	ee 0c       	add	r14, r14
		if(buffer[i-((SSD1306_WIDTH/numbersmalsize)-buffersize-1)]=='.'){
    1aba:	8c 01       	movw	r16, r24
    1abc:	11 27       	eor	r17, r17
    1abe:	e1 e0       	ldi	r30, 0x01	; 1
    1ac0:	f0 e0       	ldi	r31, 0x00	; 0
    1ac2:	ec 0f       	add	r30, r28
    1ac4:	fd 1f       	adc	r31, r29
    1ac6:	ef 0d       	add	r30, r15
    1ac8:	f1 1d       	adc	r31, r1
    1aca:	e0 0f       	add	r30, r16
    1acc:	f1 1f       	adc	r31, r17
    1ace:	37 97       	sbiw	r30, 0x07	; 7
    1ad0:	60 81       	ld	r22, Z
    1ad2:	6e 32       	cpi	r22, 0x2E	; 46
    1ad4:	39 f4       	brne	.+14     	; 0x1ae4 <_Z12fahradschirmdd+0xb2>
			oled.draw_ASCI(buffer[i-((SSD1306_WIDTH/numbersmalsize)-buffersize-1)],i*numbersmalsize,4*charhighte);
    1ad6:	20 e2       	ldi	r18, 0x20	; 32
    1ad8:	4e 2d       	mov	r20, r14
    1ada:	80 ef       	ldi	r24, 0xF0	; 240
    1adc:	92 e0       	ldi	r25, 0x02	; 2
    1ade:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    1ae2:	07 c0       	rjmp	.+14     	; 0x1af2 <_Z12fahradschirmdd+0xc0>
		}
		else{
			oled.draw_number16x16(buffer[i-((SSD1306_WIDTH/numbersmalsize)-buffersize-1)]-'0',i*numbersmalsize,3*charhighte);
    1ae4:	60 53       	subi	r22, 0x30	; 48
    1ae6:	28 e1       	ldi	r18, 0x18	; 24
    1ae8:	4e 2d       	mov	r20, r14
    1aea:	80 ef       	ldi	r24, 0xF0	; 240
    1aec:	92 e0       	ldi	r25, 0x02	; 2
    1aee:	0e 94 26 06 	call	0xc4c	; 0xc4c <_ZN7Display16draw_number16x16Ehhh>
	oled.clearFrame();
	header(0);
	bottom(0);
	//Ausgabe der Geschwidigkeit
	buffersize=sprintf(buffer,"%3.1f",winkelgeschw);
	for(uint8_t i=((SSD1306_WIDTH/numbersmalsize)-buffersize-1);i<((SSD1306_WIDTH/numbersmalsize)-1);i++){
    1af2:	f3 94       	inc	r15
    1af4:	80 e1       	ldi	r24, 0x10	; 16
    1af6:	e8 0e       	add	r14, r24
    1af8:	97 e0       	ldi	r25, 0x07	; 7
    1afa:	f9 12       	cpse	r15, r25
    1afc:	e0 cf       	rjmp	.-64     	; 0x1abe <_Z12fahradschirmdd+0x8c>
		}
		else{
			oled.draw_number16x16(buffer[i-((SSD1306_WIDTH/numbersmalsize)-buffersize-1)]-'0',i*numbersmalsize,3*charhighte);
		}
	}
	oled.draw_ASCI('k',((SSD1306_WIDTH/charsize-2)*charsize),3*charhighte);
    1afe:	28 e1       	ldi	r18, 0x18	; 24
    1b00:	42 e7       	ldi	r20, 0x72	; 114
    1b02:	6b e6       	ldi	r22, 0x6B	; 107
    1b04:	80 ef       	ldi	r24, 0xF0	; 240
    1b06:	92 e0       	ldi	r25, 0x02	; 2
    1b08:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
	oled.draw_ASCI('m',((SSD1306_WIDTH/charsize-1)*charsize),3*charhighte);
    1b0c:	28 e1       	ldi	r18, 0x18	; 24
    1b0e:	48 e7       	ldi	r20, 0x78	; 120
    1b10:	6d e6       	ldi	r22, 0x6D	; 109
    1b12:	80 ef       	ldi	r24, 0xF0	; 240
    1b14:	92 e0       	ldi	r25, 0x02	; 2
    1b16:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
	oled.draw_ASCI('h',((SSD1306_WIDTH/charsize-2)*charsize),4*charhighte);
    1b1a:	20 e2       	ldi	r18, 0x20	; 32
    1b1c:	42 e7       	ldi	r20, 0x72	; 114
    1b1e:	68 e6       	ldi	r22, 0x68	; 104
    1b20:	80 ef       	ldi	r24, 0xF0	; 240
    1b22:	92 e0       	ldi	r25, 0x02	; 2
    1b24:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
	//winkelausgabe
	buffersize=sprintf(buffer,"%3.1f",angle);
    1b28:	df 92       	push	r13
    1b2a:	cf 92       	push	r12
    1b2c:	bf 92       	push	r11
    1b2e:	af 92       	push	r10
    1b30:	81 ef       	ldi	r24, 0xF1	; 241
    1b32:	91 e0       	ldi	r25, 0x01	; 1
    1b34:	9f 93       	push	r25
    1b36:	8f 93       	push	r24
    1b38:	ce 01       	movw	r24, r28
    1b3a:	01 96       	adiw	r24, 0x01	; 1
    1b3c:	9f 93       	push	r25
    1b3e:	8f 93       	push	r24
    1b40:	0e 94 b6 28 	call	0x516c	; 0x516c <sprintf>
    1b44:	88 2e       	mov	r8, r24
	for (uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,7*charhighte);}
    1b46:	0f b6       	in	r0, 0x3f	; 63
    1b48:	f8 94       	cli
    1b4a:	de bf       	out	0x3e, r29	; 62
    1b4c:	0f be       	out	0x3f, r0	; 63
    1b4e:	cd bf       	out	0x3d, r28	; 61
    1b50:	88 23       	and	r24, r24
    1b52:	a9 f0       	breq	.+42     	; 0x1b7e <_Z12fahradschirmdd+0x14c>
    1b54:	9e 01       	movw	r18, r28
    1b56:	2f 5f       	subi	r18, 0xFF	; 255
    1b58:	3f 4f       	sbci	r19, 0xFF	; 255
    1b5a:	79 01       	movw	r14, r18
    1b5c:	89 01       	movw	r16, r18
    1b5e:	91 2c       	mov	r9, r1
    1b60:	f8 01       	movw	r30, r16
    1b62:	61 91       	ld	r22, Z+
    1b64:	8f 01       	movw	r16, r30
    1b66:	28 e3       	ldi	r18, 0x38	; 56
    1b68:	49 2d       	mov	r20, r9
    1b6a:	80 ef       	ldi	r24, 0xF0	; 240
    1b6c:	92 e0       	ldi	r25, 0x02	; 2
    1b6e:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    1b72:	f6 e0       	ldi	r31, 0x06	; 6
    1b74:	9f 0e       	add	r9, r31
    1b76:	90 2f       	mov	r25, r16
    1b78:	9e 19       	sub	r25, r14
    1b7a:	98 15       	cp	r25, r8
    1b7c:	88 f3       	brcs	.-30     	; 0x1b60 <_Z12fahradschirmdd+0x12e>
	anzeige_kleinenadel(31,31,angle);
    1b7e:	2a 2d       	mov	r18, r10
    1b80:	3b 2d       	mov	r19, r11
    1b82:	4c 2d       	mov	r20, r12
    1b84:	5d 2d       	mov	r21, r13
    1b86:	6f e1       	ldi	r22, 0x1F	; 31
    1b88:	8f e1       	ldi	r24, 0x1F	; 31
    1b8a:	0e 94 a3 0a 	call	0x1546	; 0x1546 <_Z19anzeige_kleinenadelhhf>
}
    1b8e:	2a 96       	adiw	r28, 0x0a	; 10
    1b90:	0f b6       	in	r0, 0x3f	; 63
    1b92:	f8 94       	cli
    1b94:	de bf       	out	0x3e, r29	; 62
    1b96:	0f be       	out	0x3f, r0	; 63
    1b98:	cd bf       	out	0x3d, r28	; 61
    1b9a:	df 91       	pop	r29
    1b9c:	cf 91       	pop	r28
    1b9e:	1f 91       	pop	r17
    1ba0:	0f 91       	pop	r16
    1ba2:	ff 90       	pop	r15
    1ba4:	ef 90       	pop	r14
    1ba6:	df 90       	pop	r13
    1ba8:	cf 90       	pop	r12
    1baa:	bf 90       	pop	r11
    1bac:	af 90       	pop	r10
    1bae:	9f 90       	pop	r9
    1bb0:	8f 90       	pop	r8
    1bb2:	08 95       	ret

00001bb4 <_Z14Gaineinstellenv>:

void Gaineinstellen(){
    1bb4:	cf 92       	push	r12
    1bb6:	df 92       	push	r13
    1bb8:	ef 92       	push	r14
    1bba:	ff 92       	push	r15
    1bbc:	0f 93       	push	r16
    1bbe:	1f 93       	push	r17
    1bc0:	cf 93       	push	r28
    1bc2:	df 93       	push	r29
    1bc4:	cd b7       	in	r28, 0x3d	; 61
    1bc6:	de b7       	in	r29, 0x3e	; 62
    1bc8:	64 97       	sbiw	r28, 0x14	; 20
    1bca:	0f b6       	in	r0, 0x3f	; 63
    1bcc:	f8 94       	cli
    1bce:	de bf       	out	0x3e, r29	; 62
    1bd0:	0f be       	out	0x3f, r0	; 63
    1bd2:	cd bf       	out	0x3d, r28	; 61
	char buffer[20];
	uint8_t buffersize=0;

	oled.clearFrame();
    1bd4:	80 ef       	ldi	r24, 0xF0	; 240
    1bd6:	92 e0       	ldi	r25, 0x02	; 2
    1bd8:	0e 94 ed 02 	call	0x5da	; 0x5da <_ZN7Display10clearFrameEv>
	buffersize=sprintf(buffer,"1: 1370");
    1bdc:	88 e0       	ldi	r24, 0x08	; 8
    1bde:	e7 ef       	ldi	r30, 0xF7	; 247
    1be0:	f1 e0       	ldi	r31, 0x01	; 1
    1be2:	8e 01       	movw	r16, r28
    1be4:	0f 5f       	subi	r16, 0xFF	; 255
    1be6:	1f 4f       	sbci	r17, 0xFF	; 255
    1be8:	d8 01       	movw	r26, r16
    1bea:	01 90       	ld	r0, Z+
    1bec:	0d 92       	st	X+, r0
    1bee:	8a 95       	dec	r24
    1bf0:	e1 f7       	brne	.-8      	; 0x1bea <_Z14Gaineinstellenv+0x36>
    1bf2:	e0 2e       	mov	r14, r16
    1bf4:	f1 2e       	mov	r15, r17
    1bf6:	68 01       	movw	r12, r16
    1bf8:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,0*charhighte);}
    1bfa:	f6 01       	movw	r30, r12
    1bfc:	61 91       	ld	r22, Z+
    1bfe:	6f 01       	movw	r12, r30
    1c00:	20 e0       	ldi	r18, 0x00	; 0
    1c02:	41 2f       	mov	r20, r17
    1c04:	80 ef       	ldi	r24, 0xF0	; 240
    1c06:	92 e0       	ldi	r25, 0x02	; 2
    1c08:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    1c0c:	1a 5f       	subi	r17, 0xFA	; 250
    1c0e:	1a 32       	cpi	r17, 0x2A	; 42
    1c10:	a1 f7       	brne	.-24     	; 0x1bfa <_Z14Gaineinstellenv+0x46>
	buffersize=sprintf(buffer,"2: 1090");
    1c12:	88 e0       	ldi	r24, 0x08	; 8
    1c14:	ef ef       	ldi	r30, 0xFF	; 255
    1c16:	f1 e0       	ldi	r31, 0x01	; 1
    1c18:	de 01       	movw	r26, r28
    1c1a:	11 96       	adiw	r26, 0x01	; 1
    1c1c:	01 90       	ld	r0, Z+
    1c1e:	0d 92       	st	X+, r0
    1c20:	8a 95       	dec	r24
    1c22:	e1 f7       	brne	.-8      	; 0x1c1c <_Z14Gaineinstellenv+0x68>
    1c24:	ce 2c       	mov	r12, r14
    1c26:	df 2c       	mov	r13, r15
    1c28:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,1*charhighte);}
    1c2a:	f6 01       	movw	r30, r12
    1c2c:	61 91       	ld	r22, Z+
    1c2e:	6f 01       	movw	r12, r30
    1c30:	28 e0       	ldi	r18, 0x08	; 8
    1c32:	41 2f       	mov	r20, r17
    1c34:	80 ef       	ldi	r24, 0xF0	; 240
    1c36:	92 e0       	ldi	r25, 0x02	; 2
    1c38:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    1c3c:	1a 5f       	subi	r17, 0xFA	; 250
    1c3e:	1a 32       	cpi	r17, 0x2A	; 42
    1c40:	a1 f7       	brne	.-24     	; 0x1c2a <_Z14Gaineinstellenv+0x76>
	buffersize=sprintf(buffer,"3:  820");
    1c42:	88 e0       	ldi	r24, 0x08	; 8
    1c44:	e7 e0       	ldi	r30, 0x07	; 7
    1c46:	f2 e0       	ldi	r31, 0x02	; 2
    1c48:	de 01       	movw	r26, r28
    1c4a:	11 96       	adiw	r26, 0x01	; 1
    1c4c:	01 90       	ld	r0, Z+
    1c4e:	0d 92       	st	X+, r0
    1c50:	8a 95       	dec	r24
    1c52:	e1 f7       	brne	.-8      	; 0x1c4c <_Z14Gaineinstellenv+0x98>
    1c54:	ce 2c       	mov	r12, r14
    1c56:	df 2c       	mov	r13, r15
    1c58:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,2*charhighte);}
    1c5a:	f6 01       	movw	r30, r12
    1c5c:	61 91       	ld	r22, Z+
    1c5e:	6f 01       	movw	r12, r30
    1c60:	20 e1       	ldi	r18, 0x10	; 16
    1c62:	41 2f       	mov	r20, r17
    1c64:	80 ef       	ldi	r24, 0xF0	; 240
    1c66:	92 e0       	ldi	r25, 0x02	; 2
    1c68:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    1c6c:	1a 5f       	subi	r17, 0xFA	; 250
    1c6e:	1a 32       	cpi	r17, 0x2A	; 42
    1c70:	a1 f7       	brne	.-24     	; 0x1c5a <_Z14Gaineinstellenv+0xa6>
	buffersize=sprintf(buffer,"4:  660");
    1c72:	88 e0       	ldi	r24, 0x08	; 8
    1c74:	ef e0       	ldi	r30, 0x0F	; 15
    1c76:	f2 e0       	ldi	r31, 0x02	; 2
    1c78:	de 01       	movw	r26, r28
    1c7a:	11 96       	adiw	r26, 0x01	; 1
    1c7c:	01 90       	ld	r0, Z+
    1c7e:	0d 92       	st	X+, r0
    1c80:	8a 95       	dec	r24
    1c82:	e1 f7       	brne	.-8      	; 0x1c7c <_Z14Gaineinstellenv+0xc8>
    1c84:	ce 2c       	mov	r12, r14
    1c86:	df 2c       	mov	r13, r15
    1c88:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,3*charhighte);}
    1c8a:	f6 01       	movw	r30, r12
    1c8c:	61 91       	ld	r22, Z+
    1c8e:	6f 01       	movw	r12, r30
    1c90:	28 e1       	ldi	r18, 0x18	; 24
    1c92:	41 2f       	mov	r20, r17
    1c94:	80 ef       	ldi	r24, 0xF0	; 240
    1c96:	92 e0       	ldi	r25, 0x02	; 2
    1c98:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    1c9c:	1a 5f       	subi	r17, 0xFA	; 250
    1c9e:	1a 32       	cpi	r17, 0x2A	; 42
    1ca0:	a1 f7       	brne	.-24     	; 0x1c8a <_Z14Gaineinstellenv+0xd6>
	buffersize=sprintf(buffer,"5:  440");
    1ca2:	88 e0       	ldi	r24, 0x08	; 8
    1ca4:	e7 e1       	ldi	r30, 0x17	; 23
    1ca6:	f2 e0       	ldi	r31, 0x02	; 2
    1ca8:	de 01       	movw	r26, r28
    1caa:	11 96       	adiw	r26, 0x01	; 1
    1cac:	01 90       	ld	r0, Z+
    1cae:	0d 92       	st	X+, r0
    1cb0:	8a 95       	dec	r24
    1cb2:	e1 f7       	brne	.-8      	; 0x1cac <_Z14Gaineinstellenv+0xf8>
    1cb4:	ce 2c       	mov	r12, r14
    1cb6:	df 2c       	mov	r13, r15
    1cb8:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,4*charhighte);}
    1cba:	f6 01       	movw	r30, r12
    1cbc:	61 91       	ld	r22, Z+
    1cbe:	6f 01       	movw	r12, r30
    1cc0:	20 e2       	ldi	r18, 0x20	; 32
    1cc2:	41 2f       	mov	r20, r17
    1cc4:	80 ef       	ldi	r24, 0xF0	; 240
    1cc6:	92 e0       	ldi	r25, 0x02	; 2
    1cc8:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    1ccc:	1a 5f       	subi	r17, 0xFA	; 250
    1cce:	1a 32       	cpi	r17, 0x2A	; 42
    1cd0:	a1 f7       	brne	.-24     	; 0x1cba <_Z14Gaineinstellenv+0x106>
	buffersize=sprintf(buffer,"6:  390");
    1cd2:	88 e0       	ldi	r24, 0x08	; 8
    1cd4:	ef e1       	ldi	r30, 0x1F	; 31
    1cd6:	f2 e0       	ldi	r31, 0x02	; 2
    1cd8:	de 01       	movw	r26, r28
    1cda:	11 96       	adiw	r26, 0x01	; 1
    1cdc:	01 90       	ld	r0, Z+
    1cde:	0d 92       	st	X+, r0
    1ce0:	8a 95       	dec	r24
    1ce2:	e1 f7       	brne	.-8      	; 0x1cdc <_Z14Gaineinstellenv+0x128>
    1ce4:	ce 2c       	mov	r12, r14
    1ce6:	df 2c       	mov	r13, r15
    1ce8:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,5*charhighte);}
    1cea:	f6 01       	movw	r30, r12
    1cec:	61 91       	ld	r22, Z+
    1cee:	6f 01       	movw	r12, r30
    1cf0:	28 e2       	ldi	r18, 0x28	; 40
    1cf2:	41 2f       	mov	r20, r17
    1cf4:	80 ef       	ldi	r24, 0xF0	; 240
    1cf6:	92 e0       	ldi	r25, 0x02	; 2
    1cf8:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    1cfc:	1a 5f       	subi	r17, 0xFA	; 250
    1cfe:	1a 32       	cpi	r17, 0x2A	; 42
    1d00:	a1 f7       	brne	.-24     	; 0x1cea <_Z14Gaineinstellenv+0x136>
	buffersize=sprintf(buffer,"7:  330");
    1d02:	88 e0       	ldi	r24, 0x08	; 8
    1d04:	e7 e2       	ldi	r30, 0x27	; 39
    1d06:	f2 e0       	ldi	r31, 0x02	; 2
    1d08:	de 01       	movw	r26, r28
    1d0a:	11 96       	adiw	r26, 0x01	; 1
    1d0c:	01 90       	ld	r0, Z+
    1d0e:	0d 92       	st	X+, r0
    1d10:	8a 95       	dec	r24
    1d12:	e1 f7       	brne	.-8      	; 0x1d0c <_Z14Gaineinstellenv+0x158>
    1d14:	ce 2c       	mov	r12, r14
    1d16:	df 2c       	mov	r13, r15
    1d18:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,6*charhighte);}
    1d1a:	f6 01       	movw	r30, r12
    1d1c:	61 91       	ld	r22, Z+
    1d1e:	6f 01       	movw	r12, r30
    1d20:	20 e3       	ldi	r18, 0x30	; 48
    1d22:	41 2f       	mov	r20, r17
    1d24:	80 ef       	ldi	r24, 0xF0	; 240
    1d26:	92 e0       	ldi	r25, 0x02	; 2
    1d28:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    1d2c:	1a 5f       	subi	r17, 0xFA	; 250
    1d2e:	1a 32       	cpi	r17, 0x2A	; 42
    1d30:	a1 f7       	brne	.-24     	; 0x1d1a <_Z14Gaineinstellenv+0x166>
	buffersize=sprintf(buffer,"8:  230");
    1d32:	88 e0       	ldi	r24, 0x08	; 8
    1d34:	ef e2       	ldi	r30, 0x2F	; 47
    1d36:	f2 e0       	ldi	r31, 0x02	; 2
    1d38:	de 01       	movw	r26, r28
    1d3a:	11 96       	adiw	r26, 0x01	; 1
    1d3c:	01 90       	ld	r0, Z+
    1d3e:	0d 92       	st	X+, r0
    1d40:	8a 95       	dec	r24
    1d42:	e1 f7       	brne	.-8      	; 0x1d3c <_Z14Gaineinstellenv+0x188>
    1d44:	ce 2c       	mov	r12, r14
    1d46:	df 2c       	mov	r13, r15
    1d48:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,7*charhighte);}
    1d4a:	f6 01       	movw	r30, r12
    1d4c:	61 91       	ld	r22, Z+
    1d4e:	6f 01       	movw	r12, r30
    1d50:	28 e3       	ldi	r18, 0x38	; 56
    1d52:	41 2f       	mov	r20, r17
    1d54:	80 ef       	ldi	r24, 0xF0	; 240
    1d56:	92 e0       	ldi	r25, 0x02	; 2
    1d58:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    1d5c:	1a 5f       	subi	r17, 0xFA	; 250
    1d5e:	1a 32       	cpi	r17, 0x2A	; 42
    1d60:	a1 f7       	brne	.-24     	; 0x1d4a <_Z14Gaineinstellenv+0x196>
}
    1d62:	64 96       	adiw	r28, 0x14	; 20
    1d64:	0f b6       	in	r0, 0x3f	; 63
    1d66:	f8 94       	cli
    1d68:	de bf       	out	0x3e, r29	; 62
    1d6a:	0f be       	out	0x3f, r0	; 63
    1d6c:	cd bf       	out	0x3d, r28	; 61
    1d6e:	df 91       	pop	r29
    1d70:	cf 91       	pop	r28
    1d72:	1f 91       	pop	r17
    1d74:	0f 91       	pop	r16
    1d76:	ff 90       	pop	r15
    1d78:	ef 90       	pop	r14
    1d7a:	df 90       	pop	r13
    1d7c:	cf 90       	pop	r12
    1d7e:	08 95       	ret

00001d80 <_Z15anzeige_kompassd>:

void anzeige_kompass(double winkel){
    1d80:	9f 92       	push	r9
    1d82:	af 92       	push	r10
    1d84:	bf 92       	push	r11
    1d86:	cf 92       	push	r12
    1d88:	df 92       	push	r13
    1d8a:	ef 92       	push	r14
    1d8c:	ff 92       	push	r15
    1d8e:	0f 93       	push	r16
    1d90:	1f 93       	push	r17
    1d92:	cf 93       	push	r28
    1d94:	df 93       	push	r29
    1d96:	cd b7       	in	r28, 0x3d	; 61
    1d98:	de b7       	in	r29, 0x3e	; 62
    1d9a:	64 97       	sbiw	r28, 0x14	; 20
    1d9c:	0f b6       	in	r0, 0x3f	; 63
    1d9e:	f8 94       	cli
    1da0:	de bf       	out	0x3e, r29	; 62
    1da2:	0f be       	out	0x3f, r0	; 63
    1da4:	cd bf       	out	0x3d, r28	; 61
    1da6:	a6 2e       	mov	r10, r22
    1da8:	b7 2e       	mov	r11, r23
    1daa:	c8 2e       	mov	r12, r24
    1dac:	d9 2e       	mov	r13, r25
	oled.clearFrame();
    1dae:	80 ef       	ldi	r24, 0xF0	; 240
    1db0:	92 e0       	ldi	r25, 0x02	; 2
    1db2:	0e 94 ed 02 	call	0x5da	; 0x5da <_ZN7Display10clearFrameEv>
    1db6:	0f 2e       	mov	r0, r31
    1db8:	f1 e2       	ldi	r31, 0x21	; 33
    1dba:	ef 2e       	mov	r14, r31
    1dbc:	f7 e0       	ldi	r31, 0x07	; 7
    1dbe:	ff 2e       	mov	r15, r31
    1dc0:	f0 2d       	mov	r31, r0
    1dc2:	11 e4       	ldi	r17, 0x41	; 65
	char buffer[20];
	uint8_t buffersize=0;
	//Uhrzeit
	for(uint8_t i=0;i<bitsderrtc;i++){oled.draw_ASCI(rtc.msg_uhr[i],65+i*charsize,0*charhighte);}
    1dc4:	f7 01       	movw	r30, r14
    1dc6:	61 91       	ld	r22, Z+
    1dc8:	7f 01       	movw	r14, r30
    1dca:	20 e0       	ldi	r18, 0x00	; 0
    1dcc:	41 2f       	mov	r20, r17
    1dce:	80 ef       	ldi	r24, 0xF0	; 240
    1dd0:	92 e0       	ldi	r25, 0x02	; 2
    1dd2:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    1dd6:	1a 5f       	subi	r17, 0xFA	; 250
    1dd8:	11 37       	cpi	r17, 0x71	; 113
    1dda:	a1 f7       	brne	.-24     	; 0x1dc4 <_Z15anzeige_kompassd+0x44>
    1ddc:	0f 2e       	mov	r0, r31
    1dde:	f9 e2       	ldi	r31, 0x29	; 41
    1de0:	ef 2e       	mov	r14, r31
    1de2:	f7 e0       	ldi	r31, 0x07	; 7
    1de4:	ff 2e       	mov	r15, r31
    1de6:	f0 2d       	mov	r31, r0
    1de8:	11 e4       	ldi	r17, 0x41	; 65
	for(uint8_t i=0;i<bitsderrtc;i++){oled.draw_ASCI(rtc.msg_dat[i],65+i*charsize,7*charhighte);}
    1dea:	f7 01       	movw	r30, r14
    1dec:	61 91       	ld	r22, Z+
    1dee:	7f 01       	movw	r14, r30
    1df0:	28 e3       	ldi	r18, 0x38	; 56
    1df2:	41 2f       	mov	r20, r17
    1df4:	80 ef       	ldi	r24, 0xF0	; 240
    1df6:	92 e0       	ldi	r25, 0x02	; 2
    1df8:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    1dfc:	1a 5f       	subi	r17, 0xFA	; 250
    1dfe:	11 37       	cpi	r17, 0x71	; 113
    1e00:	a1 f7       	brne	.-24     	; 0x1dea <_Z15anzeige_kompassd+0x6a>
	//winkel als Zahl ausgeben
	buffersize=sprintf(buffer,"angle=%.0f",winkel);
    1e02:	df 92       	push	r13
    1e04:	cf 92       	push	r12
    1e06:	bf 92       	push	r11
    1e08:	af 92       	push	r10
    1e0a:	87 e3       	ldi	r24, 0x37	; 55
    1e0c:	92 e0       	ldi	r25, 0x02	; 2
    1e0e:	9f 93       	push	r25
    1e10:	8f 93       	push	r24
    1e12:	ce 01       	movw	r24, r28
    1e14:	01 96       	adiw	r24, 0x01	; 1
    1e16:	9f 93       	push	r25
    1e18:	8f 93       	push	r24
    1e1a:	0e 94 b6 28 	call	0x516c	; 0x516c <sprintf>
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],65+i*charsize,6*charhighte);}
    1e1e:	0f b6       	in	r0, 0x3f	; 63
    1e20:	f8 94       	cli
    1e22:	de bf       	out	0x3e, r29	; 62
    1e24:	0f be       	out	0x3f, r0	; 63
    1e26:	cd bf       	out	0x3d, r28	; 61
    1e28:	88 23       	and	r24, r24
    1e2a:	f1 f0       	breq	.+60     	; 0x1e68 <_Z15anzeige_kompassd+0xe8>
    1e2c:	8e 01       	movw	r16, r28
    1e2e:	0f 5f       	subi	r16, 0xFF	; 255
    1e30:	1f 4f       	sbci	r17, 0xFF	; 255
    1e32:	81 50       	subi	r24, 0x01	; 1
    1e34:	68 94       	set
    1e36:	ee 24       	eor	r14, r14
    1e38:	e1 f8       	bld	r14, 1
    1e3a:	f1 2c       	mov	r15, r1
    1e3c:	ec 0e       	add	r14, r28
    1e3e:	fd 1e       	adc	r15, r29
    1e40:	e8 0e       	add	r14, r24
    1e42:	f1 1c       	adc	r15, r1
    1e44:	0f 2e       	mov	r0, r31
    1e46:	f1 e4       	ldi	r31, 0x41	; 65
    1e48:	9f 2e       	mov	r9, r31
    1e4a:	f0 2d       	mov	r31, r0
    1e4c:	f8 01       	movw	r30, r16
    1e4e:	61 91       	ld	r22, Z+
    1e50:	8f 01       	movw	r16, r30
    1e52:	20 e3       	ldi	r18, 0x30	; 48
    1e54:	49 2d       	mov	r20, r9
    1e56:	80 ef       	ldi	r24, 0xF0	; 240
    1e58:	92 e0       	ldi	r25, 0x02	; 2
    1e5a:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    1e5e:	f6 e0       	ldi	r31, 0x06	; 6
    1e60:	9f 0e       	add	r9, r31
    1e62:	0e 15       	cp	r16, r14
    1e64:	1f 05       	cpc	r17, r15
    1e66:	91 f7       	brne	.-28     	; 0x1e4c <_Z15anzeige_kompassd+0xcc>
	//dreieck als Zeiger
	anzeige_nadel(31,31,winkel);
    1e68:	2a 2d       	mov	r18, r10
    1e6a:	3b 2d       	mov	r19, r11
    1e6c:	4c 2d       	mov	r20, r12
    1e6e:	5d 2d       	mov	r21, r13
    1e70:	6f e1       	ldi	r22, 0x1F	; 31
    1e72:	8f e1       	ldi	r24, 0x1F	; 31
    1e74:	0e 94 85 0a 	call	0x150a	; 0x150a <_Z13anzeige_nadelhhf>
	//Richtung ausgeben
	anzeige_richtung(winkel);	
    1e78:	6a 2d       	mov	r22, r10
    1e7a:	7b 2d       	mov	r23, r11
    1e7c:	8c 2d       	mov	r24, r12
    1e7e:	9d 2d       	mov	r25, r13
    1e80:	0e 94 c7 09 	call	0x138e	; 0x138e <_Z16anzeige_richtungf>
}
    1e84:	64 96       	adiw	r28, 0x14	; 20
    1e86:	0f b6       	in	r0, 0x3f	; 63
    1e88:	f8 94       	cli
    1e8a:	de bf       	out	0x3e, r29	; 62
    1e8c:	0f be       	out	0x3f, r0	; 63
    1e8e:	cd bf       	out	0x3d, r28	; 61
    1e90:	df 91       	pop	r29
    1e92:	cf 91       	pop	r28
    1e94:	1f 91       	pop	r17
    1e96:	0f 91       	pop	r16
    1e98:	ff 90       	pop	r15
    1e9a:	ef 90       	pop	r14
    1e9c:	df 90       	pop	r13
    1e9e:	cf 90       	pop	r12
    1ea0:	bf 90       	pop	r11
    1ea2:	af 90       	pop	r10
    1ea4:	9f 90       	pop	r9
    1ea6:	08 95       	ret

00001ea8 <_Z10timerseitev>:

void timerseite(){
    1ea8:	af 92       	push	r10
    1eaa:	bf 92       	push	r11
    1eac:	df 92       	push	r13
    1eae:	ef 92       	push	r14
    1eb0:	0f 93       	push	r16
    1eb2:	1f 93       	push	r17
    1eb4:	cf 93       	push	r28
    1eb6:	df 93       	push	r29
    1eb8:	cd b7       	in	r28, 0x3d	; 61
    1eba:	de b7       	in	r29, 0x3e	; 62
    1ebc:	64 97       	sbiw	r28, 0x14	; 20
    1ebe:	0f b6       	in	r0, 0x3f	; 63
    1ec0:	f8 94       	cli
    1ec2:	de bf       	out	0x3e, r29	; 62
    1ec4:	0f be       	out	0x3f, r0	; 63
    1ec6:	cd bf       	out	0x3d, r28	; 61
	char buffer[20];
	uint8_t buffersize=0;
	oled.clearFrame();
    1ec8:	80 ef       	ldi	r24, 0xF0	; 240
    1eca:	92 e0       	ldi	r25, 0x02	; 2
    1ecc:	0e 94 ed 02 	call	0x5da	; 0x5da <_ZN7Display10clearFrameEv>
	buffersize=sprintf(buffer,"Timer: ");
    1ed0:	88 e0       	ldi	r24, 0x08	; 8
    1ed2:	e2 e4       	ldi	r30, 0x42	; 66
    1ed4:	f2 e0       	ldi	r31, 0x02	; 2
    1ed6:	8e 01       	movw	r16, r28
    1ed8:	0f 5f       	subi	r16, 0xFF	; 255
    1eda:	1f 4f       	sbci	r17, 0xFF	; 255
    1edc:	d8 01       	movw	r26, r16
    1ede:	01 90       	ld	r0, Z+
    1ee0:	0d 92       	st	X+, r0
    1ee2:	8a 95       	dec	r24
    1ee4:	e1 f7       	brne	.-8      	; 0x1ede <_Z10timerseitev+0x36>
    1ee6:	d0 2e       	mov	r13, r16
    1ee8:	e1 2e       	mov	r14, r17
    1eea:	58 01       	movw	r10, r16
    1eec:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,0*charhighte);}
    1eee:	f5 01       	movw	r30, r10
    1ef0:	61 91       	ld	r22, Z+
    1ef2:	5f 01       	movw	r10, r30
    1ef4:	20 e0       	ldi	r18, 0x00	; 0
    1ef6:	41 2f       	mov	r20, r17
    1ef8:	80 ef       	ldi	r24, 0xF0	; 240
    1efa:	92 e0       	ldi	r25, 0x02	; 2
    1efc:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    1f00:	1a 5f       	subi	r17, 0xFA	; 250
    1f02:	1a 32       	cpi	r17, 0x2A	; 42
    1f04:	a1 f7       	brne	.-24     	; 0x1eee <_Z10timerseitev+0x46>
	if (pos!=0)
    1f06:	60 91 d6 02 	lds	r22, 0x02D6
    1f0a:	66 23       	and	r22, r22
    1f0c:	39 f0       	breq	.+14     	; 0x1f1c <_Z10timerseitev+0x74>
	{
		oled.draw_ASCI(pos+'0',buffersize*charsize,0*charhighte);
    1f0e:	60 5d       	subi	r22, 0xD0	; 208
    1f10:	20 e0       	ldi	r18, 0x00	; 0
    1f12:	4a e2       	ldi	r20, 0x2A	; 42
    1f14:	80 ef       	ldi	r24, 0xF0	; 240
    1f16:	92 e0       	ldi	r25, 0x02	; 2
    1f18:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
	}
		
	buffer[0]=zaehler.Stunden/10;
    1f1c:	90 91 19 07 	lds	r25, 0x0719
    1f20:	8d ec       	ldi	r24, 0xCD	; 205
    1f22:	98 9f       	mul	r25, r24
    1f24:	21 2d       	mov	r18, r1
    1f26:	11 24       	eor	r1, r1
    1f28:	26 95       	lsr	r18
    1f2a:	26 95       	lsr	r18
    1f2c:	26 95       	lsr	r18
    1f2e:	29 83       	std	Y+1, r18	; 0x01
	buffer[1]=zaehler.Stunden%10;
    1f30:	22 0f       	add	r18, r18
    1f32:	32 2f       	mov	r19, r18
    1f34:	33 0f       	add	r19, r19
    1f36:	33 0f       	add	r19, r19
    1f38:	23 0f       	add	r18, r19
    1f3a:	92 1b       	sub	r25, r18
    1f3c:	9a 83       	std	Y+2, r25	; 0x02
	buffer[2]=':';
    1f3e:	9a e3       	ldi	r25, 0x3A	; 58
    1f40:	9b 83       	std	Y+3, r25	; 0x03
	buffer[3]=zaehler.Minuten/10;
    1f42:	20 91 1a 07 	lds	r18, 0x071A
    1f46:	28 9f       	mul	r18, r24
    1f48:	31 2d       	mov	r19, r1
    1f4a:	11 24       	eor	r1, r1
    1f4c:	36 95       	lsr	r19
    1f4e:	36 95       	lsr	r19
    1f50:	36 95       	lsr	r19
    1f52:	3c 83       	std	Y+4, r19	; 0x04
	buffer[4]=zaehler.Minuten%10;
    1f54:	33 0f       	add	r19, r19
    1f56:	43 2f       	mov	r20, r19
    1f58:	44 0f       	add	r20, r20
    1f5a:	44 0f       	add	r20, r20
    1f5c:	34 0f       	add	r19, r20
    1f5e:	23 1b       	sub	r18, r19
    1f60:	2d 83       	std	Y+5, r18	; 0x05
	buffer[5]=':';
    1f62:	9e 83       	std	Y+6, r25	; 0x06
	buffer[6]=zaehler.Sekunden/10;
    1f64:	90 91 1b 07 	lds	r25, 0x071B
    1f68:	98 9f       	mul	r25, r24
    1f6a:	81 2d       	mov	r24, r1
    1f6c:	11 24       	eor	r1, r1
    1f6e:	86 95       	lsr	r24
    1f70:	86 95       	lsr	r24
    1f72:	86 95       	lsr	r24
    1f74:	8f 83       	std	Y+7, r24	; 0x07
	buffer[7]=zaehler.Sekunden%10;
    1f76:	88 0f       	add	r24, r24
    1f78:	28 2f       	mov	r18, r24
    1f7a:	22 0f       	add	r18, r18
    1f7c:	22 0f       	add	r18, r18
    1f7e:	82 0f       	add	r24, r18
    1f80:	98 1b       	sub	r25, r24
    1f82:	98 87       	std	Y+8, r25	; 0x08
    1f84:	ad 2c       	mov	r10, r13
    1f86:	be 2c       	mov	r11, r14
    1f88:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<bitsderrtc;i++){
		if (buffer[i]==':')
    1f8a:	f5 01       	movw	r30, r10
    1f8c:	61 91       	ld	r22, Z+
    1f8e:	5f 01       	movw	r10, r30
    1f90:	6a 33       	cpi	r22, 0x3A	; 58
    1f92:	39 f4       	brne	.+14     	; 0x1fa2 <_Z10timerseitev+0xfa>
		{
			oled.draw_ASCI(buffer[i],i*numbersmalsize,2.5*charhighte);
    1f94:	24 e1       	ldi	r18, 0x14	; 20
    1f96:	41 2f       	mov	r20, r17
    1f98:	80 ef       	ldi	r24, 0xF0	; 240
    1f9a:	92 e0       	ldi	r25, 0x02	; 2
    1f9c:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    1fa0:	06 c0       	rjmp	.+12     	; 0x1fae <_Z10timerseitev+0x106>
		}
		else{
			oled.draw_number16x16(buffer[i],i*numbersmalsize,2*charhighte);
    1fa2:	20 e1       	ldi	r18, 0x10	; 16
    1fa4:	41 2f       	mov	r20, r17
    1fa6:	80 ef       	ldi	r24, 0xF0	; 240
    1fa8:	92 e0       	ldi	r25, 0x02	; 2
    1faa:	0e 94 26 06 	call	0xc4c	; 0xc4c <_ZN7Display16draw_number16x16Ehhh>
    1fae:	10 5f       	subi	r17, 0xF0	; 240
	buffer[3]=zaehler.Minuten/10;
	buffer[4]=zaehler.Minuten%10;
	buffer[5]=':';
	buffer[6]=zaehler.Sekunden/10;
	buffer[7]=zaehler.Sekunden%10;
	for(uint8_t i=0;i<bitsderrtc;i++){
    1fb0:	10 38       	cpi	r17, 0x80	; 128
    1fb2:	59 f7       	brne	.-42     	; 0x1f8a <_Z10timerseitev+0xe2>
		}
		else{
			oled.draw_number16x16(buffer[i],i*numbersmalsize,2*charhighte);
		}
	}
}
    1fb4:	64 96       	adiw	r28, 0x14	; 20
    1fb6:	0f b6       	in	r0, 0x3f	; 63
    1fb8:	f8 94       	cli
    1fba:	de bf       	out	0x3e, r29	; 62
    1fbc:	0f be       	out	0x3f, r0	; 63
    1fbe:	cd bf       	out	0x3d, r28	; 61
    1fc0:	df 91       	pop	r29
    1fc2:	cf 91       	pop	r28
    1fc4:	1f 91       	pop	r17
    1fc6:	0f 91       	pop	r16
    1fc8:	ef 90       	pop	r14
    1fca:	df 90       	pop	r13
    1fcc:	bf 90       	pop	r11
    1fce:	af 90       	pop	r10
    1fd0:	08 95       	ret

00001fd2 <_Z13Stoppuhrseitev>:

void Stoppuhrseite(){
    1fd2:	af 92       	push	r10
    1fd4:	bf 92       	push	r11
    1fd6:	df 92       	push	r13
    1fd8:	ef 92       	push	r14
    1fda:	0f 93       	push	r16
    1fdc:	1f 93       	push	r17
    1fde:	cf 93       	push	r28
    1fe0:	df 93       	push	r29
    1fe2:	cd b7       	in	r28, 0x3d	; 61
    1fe4:	de b7       	in	r29, 0x3e	; 62
    1fe6:	64 97       	sbiw	r28, 0x14	; 20
    1fe8:	0f b6       	in	r0, 0x3f	; 63
    1fea:	f8 94       	cli
    1fec:	de bf       	out	0x3e, r29	; 62
    1fee:	0f be       	out	0x3f, r0	; 63
    1ff0:	cd bf       	out	0x3d, r28	; 61
	char buffer[20];
	uint8_t buffersize=0;
	oled.clearFrame();
    1ff2:	80 ef       	ldi	r24, 0xF0	; 240
    1ff4:	92 e0       	ldi	r25, 0x02	; 2
    1ff6:	0e 94 ed 02 	call	0x5da	; 0x5da <_ZN7Display10clearFrameEv>
	buffersize=sprintf(buffer,"Stoppuhr: ");
    1ffa:	8b e0       	ldi	r24, 0x0B	; 11
    1ffc:	ea e4       	ldi	r30, 0x4A	; 74
    1ffe:	f2 e0       	ldi	r31, 0x02	; 2
    2000:	8e 01       	movw	r16, r28
    2002:	0f 5f       	subi	r16, 0xFF	; 255
    2004:	1f 4f       	sbci	r17, 0xFF	; 255
    2006:	d8 01       	movw	r26, r16
    2008:	01 90       	ld	r0, Z+
    200a:	0d 92       	st	X+, r0
    200c:	8a 95       	dec	r24
    200e:	e1 f7       	brne	.-8      	; 0x2008 <_Z13Stoppuhrseitev+0x36>
    2010:	d0 2e       	mov	r13, r16
    2012:	e1 2e       	mov	r14, r17
    2014:	58 01       	movw	r10, r16
    2016:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,0*charhighte);}
    2018:	f5 01       	movw	r30, r10
    201a:	61 91       	ld	r22, Z+
    201c:	5f 01       	movw	r10, r30
    201e:	20 e0       	ldi	r18, 0x00	; 0
    2020:	41 2f       	mov	r20, r17
    2022:	80 ef       	ldi	r24, 0xF0	; 240
    2024:	92 e0       	ldi	r25, 0x02	; 2
    2026:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    202a:	1a 5f       	subi	r17, 0xFA	; 250
    202c:	1c 33       	cpi	r17, 0x3C	; 60
    202e:	a1 f7       	brne	.-24     	; 0x2018 <_Z13Stoppuhrseitev+0x46>
	
	buffer[0]=stoppuhr.Stunden/10;
    2030:	90 91 01 07 	lds	r25, 0x0701
    2034:	8d ec       	ldi	r24, 0xCD	; 205
    2036:	98 9f       	mul	r25, r24
    2038:	21 2d       	mov	r18, r1
    203a:	11 24       	eor	r1, r1
    203c:	26 95       	lsr	r18
    203e:	26 95       	lsr	r18
    2040:	26 95       	lsr	r18
    2042:	29 83       	std	Y+1, r18	; 0x01
	buffer[1]=stoppuhr.Stunden%10;
    2044:	22 0f       	add	r18, r18
    2046:	32 2f       	mov	r19, r18
    2048:	33 0f       	add	r19, r19
    204a:	33 0f       	add	r19, r19
    204c:	23 0f       	add	r18, r19
    204e:	92 1b       	sub	r25, r18
    2050:	9a 83       	std	Y+2, r25	; 0x02
	buffer[2]=':';
    2052:	9a e3       	ldi	r25, 0x3A	; 58
    2054:	9b 83       	std	Y+3, r25	; 0x03
	buffer[3]=stoppuhr.Minuten/10;
    2056:	20 91 02 07 	lds	r18, 0x0702
    205a:	28 9f       	mul	r18, r24
    205c:	31 2d       	mov	r19, r1
    205e:	11 24       	eor	r1, r1
    2060:	36 95       	lsr	r19
    2062:	36 95       	lsr	r19
    2064:	36 95       	lsr	r19
    2066:	3c 83       	std	Y+4, r19	; 0x04
	buffer[4]=stoppuhr.Minuten%10;
    2068:	33 0f       	add	r19, r19
    206a:	43 2f       	mov	r20, r19
    206c:	44 0f       	add	r20, r20
    206e:	44 0f       	add	r20, r20
    2070:	34 0f       	add	r19, r20
    2072:	23 1b       	sub	r18, r19
    2074:	2d 83       	std	Y+5, r18	; 0x05
	buffer[5]=':';
    2076:	9e 83       	std	Y+6, r25	; 0x06
	buffer[6]=stoppuhr.Sekunden/10;
    2078:	90 91 03 07 	lds	r25, 0x0703
    207c:	98 9f       	mul	r25, r24
    207e:	81 2d       	mov	r24, r1
    2080:	11 24       	eor	r1, r1
    2082:	86 95       	lsr	r24
    2084:	86 95       	lsr	r24
    2086:	86 95       	lsr	r24
    2088:	8f 83       	std	Y+7, r24	; 0x07
	buffer[7]=stoppuhr.Sekunden%10;
    208a:	88 0f       	add	r24, r24
    208c:	28 2f       	mov	r18, r24
    208e:	22 0f       	add	r18, r18
    2090:	22 0f       	add	r18, r18
    2092:	82 0f       	add	r24, r18
    2094:	98 1b       	sub	r25, r24
    2096:	98 87       	std	Y+8, r25	; 0x08
    2098:	ad 2c       	mov	r10, r13
    209a:	be 2c       	mov	r11, r14
    209c:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<bitsderrtc;i++){
		if (buffer[i]==':')
    209e:	f5 01       	movw	r30, r10
    20a0:	61 91       	ld	r22, Z+
    20a2:	5f 01       	movw	r10, r30
    20a4:	6a 33       	cpi	r22, 0x3A	; 58
    20a6:	39 f4       	brne	.+14     	; 0x20b6 <_Z13Stoppuhrseitev+0xe4>
		{
			oled.draw_ASCI(buffer[i],i*numbersmalsize,2.5*charhighte);
    20a8:	24 e1       	ldi	r18, 0x14	; 20
    20aa:	41 2f       	mov	r20, r17
    20ac:	80 ef       	ldi	r24, 0xF0	; 240
    20ae:	92 e0       	ldi	r25, 0x02	; 2
    20b0:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    20b4:	06 c0       	rjmp	.+12     	; 0x20c2 <_Z13Stoppuhrseitev+0xf0>
		}
		else{
			oled.draw_number16x16(buffer[i],i*numbersmalsize,2*charhighte);
    20b6:	20 e1       	ldi	r18, 0x10	; 16
    20b8:	41 2f       	mov	r20, r17
    20ba:	80 ef       	ldi	r24, 0xF0	; 240
    20bc:	92 e0       	ldi	r25, 0x02	; 2
    20be:	0e 94 26 06 	call	0xc4c	; 0xc4c <_ZN7Display16draw_number16x16Ehhh>
    20c2:	10 5f       	subi	r17, 0xF0	; 240
	buffer[3]=stoppuhr.Minuten/10;
	buffer[4]=stoppuhr.Minuten%10;
	buffer[5]=':';
	buffer[6]=stoppuhr.Sekunden/10;
	buffer[7]=stoppuhr.Sekunden%10;
	for(uint8_t i=0;i<bitsderrtc;i++){
    20c4:	10 38       	cpi	r17, 0x80	; 128
    20c6:	59 f7       	brne	.-42     	; 0x209e <_Z13Stoppuhrseitev+0xcc>
		}
		else{
			oled.draw_number16x16(buffer[i],i*numbersmalsize,2*charhighte);
		}
	}
}
    20c8:	64 96       	adiw	r28, 0x14	; 20
    20ca:	0f b6       	in	r0, 0x3f	; 63
    20cc:	f8 94       	cli
    20ce:	de bf       	out	0x3e, r29	; 62
    20d0:	0f be       	out	0x3f, r0	; 63
    20d2:	cd bf       	out	0x3d, r28	; 61
    20d4:	df 91       	pop	r29
    20d6:	cf 91       	pop	r28
    20d8:	1f 91       	pop	r17
    20da:	0f 91       	pop	r16
    20dc:	ef 90       	pop	r14
    20de:	df 90       	pop	r13
    20e0:	bf 90       	pop	r11
    20e2:	af 90       	pop	r10
    20e4:	08 95       	ret

000020e6 <_Z14Pressuresensorv>:

void Pressuresensor(){
    20e6:	bf 92       	push	r11
    20e8:	cf 92       	push	r12
    20ea:	df 92       	push	r13
    20ec:	ef 92       	push	r14
    20ee:	ff 92       	push	r15
    20f0:	0f 93       	push	r16
    20f2:	1f 93       	push	r17
    20f4:	cf 93       	push	r28
    20f6:	df 93       	push	r29
    20f8:	cd b7       	in	r28, 0x3d	; 61
    20fa:	de b7       	in	r29, 0x3e	; 62
    20fc:	64 97       	sbiw	r28, 0x14	; 20
    20fe:	0f b6       	in	r0, 0x3f	; 63
    2100:	f8 94       	cli
    2102:	de bf       	out	0x3e, r29	; 62
    2104:	0f be       	out	0x3f, r0	; 63
    2106:	cd bf       	out	0x3d, r28	; 61
	Baro.READ_Pressure_once();
    2108:	8d ed       	ldi	r24, 0xDD	; 221
    210a:	92 e0       	ldi	r25, 0x02	; 2
    210c:	0e 94 e1 1d 	call	0x3bc2	; 0x3bc2 <_ZN8Pressure18READ_Pressure_onceEv>
	Baro.READ_Temperature();
    2110:	8d ed       	ldi	r24, 0xDD	; 221
    2112:	92 e0       	ldi	r25, 0x02	; 2
    2114:	0e 94 69 1e 	call	0x3cd2	; 0x3cd2 <_ZN8Pressure16READ_TemperatureEv>
	char buffer[20];
	uint8_t buffersize=0;
	oled.clearFrame();
    2118:	80 ef       	ldi	r24, 0xF0	; 240
    211a:	92 e0       	ldi	r25, 0x02	; 2
    211c:	0e 94 ed 02 	call	0x5da	; 0x5da <_ZN7Display10clearFrameEv>
	header(0);
    2120:	80 e0       	ldi	r24, 0x00	; 0
    2122:	0e 94 47 09 	call	0x128e	; 0x128e <_Z6headerh>
	bottom(0);
    2126:	80 e0       	ldi	r24, 0x00	; 0
    2128:	0e 94 b1 09 	call	0x1362	; 0x1362 <_Z6bottomh>
	buffersize=sprintf(buffer,"LPS25H Daten:");
    212c:	8e e0       	ldi	r24, 0x0E	; 14
    212e:	e5 e5       	ldi	r30, 0x55	; 85
    2130:	f2 e0       	ldi	r31, 0x02	; 2
    2132:	8e 01       	movw	r16, r28
    2134:	0f 5f       	subi	r16, 0xFF	; 255
    2136:	1f 4f       	sbci	r17, 0xFF	; 255
    2138:	d8 01       	movw	r26, r16
    213a:	01 90       	ld	r0, Z+
    213c:	0d 92       	st	X+, r0
    213e:	8a 95       	dec	r24
    2140:	e1 f7       	brne	.-8      	; 0x213a <_Z14Pressuresensorv+0x54>
    2142:	c0 2e       	mov	r12, r16
    2144:	d1 2e       	mov	r13, r17
    2146:	78 01       	movw	r14, r16
    2148:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,2*charhighte);}
    214a:	f7 01       	movw	r30, r14
    214c:	61 91       	ld	r22, Z+
    214e:	7f 01       	movw	r14, r30
    2150:	20 e1       	ldi	r18, 0x10	; 16
    2152:	41 2f       	mov	r20, r17
    2154:	80 ef       	ldi	r24, 0xF0	; 240
    2156:	92 e0       	ldi	r25, 0x02	; 2
    2158:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    215c:	1a 5f       	subi	r17, 0xFA	; 250
    215e:	1e 34       	cpi	r17, 0x4E	; 78
    2160:	a1 f7       	brne	.-24     	; 0x214a <_Z14Pressuresensorv+0x64>
	buffersize=sprintf(buffer,"%.1f HPa",Baro.Press);
    2162:	ed ed       	ldi	r30, 0xDD	; 221
    2164:	f2 e0       	ldi	r31, 0x02	; 2
    2166:	83 81       	ldd	r24, Z+3	; 0x03
    2168:	8f 93       	push	r24
    216a:	82 81       	ldd	r24, Z+2	; 0x02
    216c:	8f 93       	push	r24
    216e:	81 81       	ldd	r24, Z+1	; 0x01
    2170:	8f 93       	push	r24
    2172:	80 81       	ld	r24, Z
    2174:	8f 93       	push	r24
    2176:	83 e6       	ldi	r24, 0x63	; 99
    2178:	92 e0       	ldi	r25, 0x02	; 2
    217a:	9f 93       	push	r25
    217c:	8f 93       	push	r24
    217e:	ce 01       	movw	r24, r28
    2180:	01 96       	adiw	r24, 0x01	; 1
    2182:	9f 93       	push	r25
    2184:	8f 93       	push	r24
    2186:	0e 94 b6 28 	call	0x516c	; 0x516c <sprintf>
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,3*charhighte);}
    218a:	0f b6       	in	r0, 0x3f	; 63
    218c:	f8 94       	cli
    218e:	de bf       	out	0x3e, r29	; 62
    2190:	0f be       	out	0x3f, r0	; 63
    2192:	cd bf       	out	0x3d, r28	; 61
    2194:	88 23       	and	r24, r24
    2196:	d1 f0       	breq	.+52     	; 0x21cc <_Z14Pressuresensorv+0xe6>
    2198:	81 50       	subi	r24, 0x01	; 1
    219a:	68 94       	set
    219c:	ee 24       	eor	r14, r14
    219e:	e1 f8       	bld	r14, 1
    21a0:	f1 2c       	mov	r15, r1
    21a2:	ec 0e       	add	r14, r28
    21a4:	fd 1e       	adc	r15, r29
    21a6:	e8 0e       	add	r14, r24
    21a8:	f1 1c       	adc	r15, r1
    21aa:	0c 2d       	mov	r16, r12
    21ac:	1d 2d       	mov	r17, r13
    21ae:	b1 2c       	mov	r11, r1
    21b0:	f8 01       	movw	r30, r16
    21b2:	61 91       	ld	r22, Z+
    21b4:	8f 01       	movw	r16, r30
    21b6:	28 e1       	ldi	r18, 0x18	; 24
    21b8:	4b 2d       	mov	r20, r11
    21ba:	80 ef       	ldi	r24, 0xF0	; 240
    21bc:	92 e0       	ldi	r25, 0x02	; 2
    21be:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    21c2:	f6 e0       	ldi	r31, 0x06	; 6
    21c4:	bf 0e       	add	r11, r31
    21c6:	0e 15       	cp	r16, r14
    21c8:	1f 05       	cpc	r17, r15
    21ca:	91 f7       	brne	.-28     	; 0x21b0 <_Z14Pressuresensorv+0xca>
	buffersize=sprintf(buffer,"Hoehe: %.1f m",(double)Baro.altitude(Baro.Press));
    21cc:	40 91 dd 02 	lds	r20, 0x02DD
    21d0:	50 91 de 02 	lds	r21, 0x02DE
    21d4:	60 91 df 02 	lds	r22, 0x02DF
    21d8:	70 91 e0 02 	lds	r23, 0x02E0
    21dc:	8d ed       	ldi	r24, 0xDD	; 221
    21de:	92 e0       	ldi	r25, 0x02	; 2
    21e0:	0e 94 e6 1e 	call	0x3dcc	; 0x3dcc <_ZN8Pressure8altitudeEd>
    21e4:	9f 93       	push	r25
    21e6:	8f 93       	push	r24
    21e8:	7f 93       	push	r23
    21ea:	6f 93       	push	r22
    21ec:	8c e6       	ldi	r24, 0x6C	; 108
    21ee:	92 e0       	ldi	r25, 0x02	; 2
    21f0:	9f 93       	push	r25
    21f2:	8f 93       	push	r24
    21f4:	ce 01       	movw	r24, r28
    21f6:	01 96       	adiw	r24, 0x01	; 1
    21f8:	9f 93       	push	r25
    21fa:	8f 93       	push	r24
    21fc:	0e 94 b6 28 	call	0x516c	; 0x516c <sprintf>
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,4*charhighte);}
    2200:	0f b6       	in	r0, 0x3f	; 63
    2202:	f8 94       	cli
    2204:	de bf       	out	0x3e, r29	; 62
    2206:	0f be       	out	0x3f, r0	; 63
    2208:	cd bf       	out	0x3d, r28	; 61
    220a:	88 23       	and	r24, r24
    220c:	d1 f0       	breq	.+52     	; 0x2242 <_Z14Pressuresensorv+0x15c>
    220e:	81 50       	subi	r24, 0x01	; 1
    2210:	68 94       	set
    2212:	ee 24       	eor	r14, r14
    2214:	e1 f8       	bld	r14, 1
    2216:	f1 2c       	mov	r15, r1
    2218:	ec 0e       	add	r14, r28
    221a:	fd 1e       	adc	r15, r29
    221c:	e8 0e       	add	r14, r24
    221e:	f1 1c       	adc	r15, r1
    2220:	0c 2d       	mov	r16, r12
    2222:	1d 2d       	mov	r17, r13
    2224:	b1 2c       	mov	r11, r1
    2226:	f8 01       	movw	r30, r16
    2228:	61 91       	ld	r22, Z+
    222a:	8f 01       	movw	r16, r30
    222c:	20 e2       	ldi	r18, 0x20	; 32
    222e:	4b 2d       	mov	r20, r11
    2230:	80 ef       	ldi	r24, 0xF0	; 240
    2232:	92 e0       	ldi	r25, 0x02	; 2
    2234:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    2238:	f6 e0       	ldi	r31, 0x06	; 6
    223a:	bf 0e       	add	r11, r31
    223c:	0e 15       	cp	r16, r14
    223e:	1f 05       	cpc	r17, r15
    2240:	91 f7       	brne	.-28     	; 0x2226 <_Z14Pressuresensorv+0x140>
	buffersize=sprintf(buffer,"%.1f C",(double)Baro.Tempera);
    2242:	e1 ee       	ldi	r30, 0xE1	; 225
    2244:	f2 e0       	ldi	r31, 0x02	; 2
    2246:	83 81       	ldd	r24, Z+3	; 0x03
    2248:	8f 93       	push	r24
    224a:	82 81       	ldd	r24, Z+2	; 0x02
    224c:	8f 93       	push	r24
    224e:	81 81       	ldd	r24, Z+1	; 0x01
    2250:	8f 93       	push	r24
    2252:	80 81       	ld	r24, Z
    2254:	8f 93       	push	r24
    2256:	8a e7       	ldi	r24, 0x7A	; 122
    2258:	92 e0       	ldi	r25, 0x02	; 2
    225a:	9f 93       	push	r25
    225c:	8f 93       	push	r24
    225e:	ce 01       	movw	r24, r28
    2260:	01 96       	adiw	r24, 0x01	; 1
    2262:	9f 93       	push	r25
    2264:	8f 93       	push	r24
    2266:	0e 94 b6 28 	call	0x516c	; 0x516c <sprintf>
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,6*charhighte);}
    226a:	0f b6       	in	r0, 0x3f	; 63
    226c:	f8 94       	cli
    226e:	de bf       	out	0x3e, r29	; 62
    2270:	0f be       	out	0x3f, r0	; 63
    2272:	cd bf       	out	0x3d, r28	; 61
    2274:	88 23       	and	r24, r24
    2276:	d1 f0       	breq	.+52     	; 0x22ac <_Z14Pressuresensorv+0x1c6>
    2278:	81 50       	subi	r24, 0x01	; 1
    227a:	68 94       	set
    227c:	ee 24       	eor	r14, r14
    227e:	e1 f8       	bld	r14, 1
    2280:	f1 2c       	mov	r15, r1
    2282:	ec 0e       	add	r14, r28
    2284:	fd 1e       	adc	r15, r29
    2286:	e8 0e       	add	r14, r24
    2288:	f1 1c       	adc	r15, r1
    228a:	0c 2d       	mov	r16, r12
    228c:	1d 2d       	mov	r17, r13
    228e:	d1 2c       	mov	r13, r1
    2290:	f8 01       	movw	r30, r16
    2292:	61 91       	ld	r22, Z+
    2294:	8f 01       	movw	r16, r30
    2296:	20 e3       	ldi	r18, 0x30	; 48
    2298:	4d 2d       	mov	r20, r13
    229a:	80 ef       	ldi	r24, 0xF0	; 240
    229c:	92 e0       	ldi	r25, 0x02	; 2
    229e:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    22a2:	f6 e0       	ldi	r31, 0x06	; 6
    22a4:	df 0e       	add	r13, r31
    22a6:	0e 15       	cp	r16, r14
    22a8:	1f 05       	cpc	r17, r15
    22aa:	91 f7       	brne	.-28     	; 0x2290 <_Z14Pressuresensorv+0x1aa>
	//buffersize=sprintf(buffer,"%i",Baro.Wertedruck[1]);
	//for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,4*charhighte);}
	//buffersize=sprintf(buffer,"%i",Baro.Wertedruck[2]);
	//for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,5*charhighte);}
}
    22ac:	64 96       	adiw	r28, 0x14	; 20
    22ae:	0f b6       	in	r0, 0x3f	; 63
    22b0:	f8 94       	cli
    22b2:	de bf       	out	0x3e, r29	; 62
    22b4:	0f be       	out	0x3f, r0	; 63
    22b6:	cd bf       	out	0x3d, r28	; 61
    22b8:	df 91       	pop	r29
    22ba:	cf 91       	pop	r28
    22bc:	1f 91       	pop	r17
    22be:	0f 91       	pop	r16
    22c0:	ff 90       	pop	r15
    22c2:	ef 90       	pop	r14
    22c4:	df 90       	pop	r13
    22c6:	cf 90       	pop	r12
    22c8:	bf 90       	pop	r11
    22ca:	08 95       	ret

000022cc <_Z13uhreinstellenv>:

void uhreinstellen(){
    22cc:	2f 92       	push	r2
    22ce:	3f 92       	push	r3
    22d0:	4f 92       	push	r4
    22d2:	5f 92       	push	r5
    22d4:	6f 92       	push	r6
    22d6:	7f 92       	push	r7
    22d8:	8f 92       	push	r8
    22da:	9f 92       	push	r9
    22dc:	af 92       	push	r10
    22de:	bf 92       	push	r11
    22e0:	cf 92       	push	r12
    22e2:	df 92       	push	r13
    22e4:	ef 92       	push	r14
    22e6:	ff 92       	push	r15
    22e8:	0f 93       	push	r16
    22ea:	1f 93       	push	r17
    22ec:	cf 93       	push	r28
    22ee:	df 93       	push	r29
    22f0:	cd b7       	in	r28, 0x3d	; 61
    22f2:	de b7       	in	r29, 0x3e	; 62
    22f4:	66 97       	sbiw	r28, 0x16	; 22
    22f6:	0f b6       	in	r0, 0x3f	; 63
    22f8:	f8 94       	cli
    22fa:	de bf       	out	0x3e, r29	; 62
    22fc:	0f be       	out	0x3f, r0	; 63
    22fe:	cd bf       	out	0x3d, r28	; 61
	rtc.RTCstop();
    2300:	81 e2       	ldi	r24, 0x21	; 33
    2302:	97 e0       	ldi	r25, 0x07	; 7
    2304:	0e 94 49 20 	call	0x4092	; 0x4092 <_ZN3RTC7RTCstopEv>
	
	oled.clearFrame();
    2308:	80 ef       	ldi	r24, 0xF0	; 240
    230a:	92 e0       	ldi	r25, 0x02	; 2
    230c:	0e 94 ed 02 	call	0x5da	; 0x5da <_ZN7Display10clearFrameEv>
	char buffer[20];
	uint8_t buffersize;
	uint8_t pos=0;
    2310:	91 2c       	mov	r9, r1
	while(pos<11){
		buffersize=sprintf(buffer,"Uhreinstellung");
    2312:	0f 2e       	mov	r0, r31
    2314:	ff e0       	ldi	r31, 0x0F	; 15
    2316:	6f 2e       	mov	r6, r31
    2318:	f0 2d       	mov	r31, r0
    231a:	ce 01       	movw	r24, r28
    231c:	01 96       	adiw	r24, 0x01	; 1
    231e:	7c 01       	movw	r14, r24
    2320:	78 2e       	mov	r7, r24
    2322:	8f 2c       	mov	r8, r15
    2324:	b1 2c       	mov	r11, r1
		for(uint8_t i = 0; i<buffersize;i++){
			oled.draw_ASCI(buffer[i],charsize*i,0);
		}
		buffersize=sprintf(buffer,"--------------");
    2326:	8d 8b       	std	Y+21, r24	; 0x15
    2328:	fe 8a       	std	Y+22, r15	; 0x16
		for(uint8_t i = 0; i<buffersize;i++){
			oled.draw_ASCI(buffer[i],charsize*i,8);
		}
		buffer[0]=rtc.Stunden/10;
    232a:	0f 2e       	mov	r0, r31
    232c:	fd ec       	ldi	r31, 0xCD	; 205
    232e:	af 2e       	mov	r10, r31
    2330:	f0 2d       	mov	r31, r0
		buffer[1]=rtc.Stunden%10;
		buffer[2]=':';
		buffer[3]=rtc.Minuten/10;
		buffer[4]=rtc.Minuten%10;
		buffer[5]=' ';
		buffer[6]=rtc.Tag/10;
    2332:	0f 2e       	mov	r0, r31
    2334:	f5 e3       	ldi	r31, 0x35	; 53
    2336:	4f 2e       	mov	r4, r31
    2338:	f7 e0       	ldi	r31, 0x07	; 7
    233a:	5f 2e       	mov	r5, r31
    233c:	f0 2d       	mov	r31, r0
		buffer[7]=rtc.Tag%10;
		buffer[8]='.';
		buffer[9]=rtc.Monat/10;
    233e:	0f 2e       	mov	r0, r31
    2340:	f6 e3       	ldi	r31, 0x36	; 54
    2342:	cf 2e       	mov	r12, r31
    2344:	f7 e0       	ldi	r31, 0x07	; 7
    2346:	df 2e       	mov	r13, r31
    2348:	f0 2d       	mov	r31, r0
	oled.clearFrame();
	char buffer[20];
	uint8_t buffersize;
	uint8_t pos=0;
	while(pos<11){
		buffersize=sprintf(buffer,"Uhreinstellung");
    234a:	e1 e8       	ldi	r30, 0x81	; 129
    234c:	f2 e0       	ldi	r31, 0x02	; 2
    234e:	a7 2d       	mov	r26, r7
    2350:	b8 2d       	mov	r27, r8
    2352:	86 2d       	mov	r24, r6
    2354:	01 90       	ld	r0, Z+
    2356:	0d 92       	st	X+, r0
    2358:	8a 95       	dec	r24
    235a:	e1 f7       	brne	.-8      	; 0x2354 <_Z13uhreinstellenv+0x88>
    235c:	27 2c       	mov	r2, r7
    235e:	38 2c       	mov	r3, r8
    2360:	1b 2d       	mov	r17, r11
		for(uint8_t i = 0; i<buffersize;i++){
			oled.draw_ASCI(buffer[i],charsize*i,0);
    2362:	f1 01       	movw	r30, r2
    2364:	61 91       	ld	r22, Z+
    2366:	1f 01       	movw	r2, r30
    2368:	2b 2d       	mov	r18, r11
    236a:	41 2f       	mov	r20, r17
    236c:	80 ef       	ldi	r24, 0xF0	; 240
    236e:	92 e0       	ldi	r25, 0x02	; 2
    2370:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    2374:	1a 5f       	subi	r17, 0xFA	; 250
	char buffer[20];
	uint8_t buffersize;
	uint8_t pos=0;
	while(pos<11){
		buffersize=sprintf(buffer,"Uhreinstellung");
		for(uint8_t i = 0; i<buffersize;i++){
    2376:	14 35       	cpi	r17, 0x54	; 84
    2378:	a1 f7       	brne	.-24     	; 0x2362 <_Z13uhreinstellenv+0x96>
			oled.draw_ASCI(buffer[i],charsize*i,0);
		}
		buffersize=sprintf(buffer,"--------------");
    237a:	ef e0       	ldi	r30, 0x0F	; 15
    237c:	f1 e0       	ldi	r31, 0x01	; 1
    237e:	a7 2d       	mov	r26, r7
    2380:	b8 2d       	mov	r27, r8
    2382:	86 2d       	mov	r24, r6
    2384:	01 90       	ld	r0, Z+
    2386:	0d 92       	st	X+, r0
    2388:	8a 95       	dec	r24
    238a:	e1 f7       	brne	.-8      	; 0x2384 <_Z13uhreinstellenv+0xb8>
    238c:	2d 88       	ldd	r2, Y+21	; 0x15
    238e:	3e 88       	ldd	r3, Y+22	; 0x16
    2390:	1b 2d       	mov	r17, r11
		for(uint8_t i = 0; i<buffersize;i++){
			oled.draw_ASCI(buffer[i],charsize*i,8);
    2392:	f1 01       	movw	r30, r2
    2394:	61 91       	ld	r22, Z+
    2396:	1f 01       	movw	r2, r30
    2398:	28 e0       	ldi	r18, 0x08	; 8
    239a:	41 2f       	mov	r20, r17
    239c:	80 ef       	ldi	r24, 0xF0	; 240
    239e:	92 e0       	ldi	r25, 0x02	; 2
    23a0:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    23a4:	1a 5f       	subi	r17, 0xFA	; 250
		buffersize=sprintf(buffer,"Uhreinstellung");
		for(uint8_t i = 0; i<buffersize;i++){
			oled.draw_ASCI(buffer[i],charsize*i,0);
		}
		buffersize=sprintf(buffer,"--------------");
		for(uint8_t i = 0; i<buffersize;i++){
    23a6:	14 35       	cpi	r17, 0x54	; 84
    23a8:	a1 f7       	brne	.-24     	; 0x2392 <_Z13uhreinstellenv+0xc6>
			oled.draw_ASCI(buffer[i],charsize*i,8);
		}
		buffer[0]=rtc.Stunden/10;
    23aa:	e1 e3       	ldi	r30, 0x31	; 49
    23ac:	f7 e0       	ldi	r31, 0x07	; 7
    23ae:	80 81       	ld	r24, Z
    23b0:	8a 9d       	mul	r24, r10
    23b2:	91 2d       	mov	r25, r1
    23b4:	11 24       	eor	r1, r1
    23b6:	96 95       	lsr	r25
    23b8:	96 95       	lsr	r25
    23ba:	96 95       	lsr	r25
    23bc:	99 83       	std	Y+1, r25	; 0x01
		buffer[1]=rtc.Stunden%10;
    23be:	99 0f       	add	r25, r25
    23c0:	29 2f       	mov	r18, r25
    23c2:	22 0f       	add	r18, r18
    23c4:	22 0f       	add	r18, r18
    23c6:	92 0f       	add	r25, r18
    23c8:	89 1b       	sub	r24, r25
    23ca:	8a 83       	std	Y+2, r24	; 0x02
		buffer[2]=':';
    23cc:	fa e3       	ldi	r31, 0x3A	; 58
    23ce:	fb 83       	std	Y+3, r31	; 0x03
		buffer[3]=rtc.Minuten/10;
    23d0:	e2 e3       	ldi	r30, 0x32	; 50
    23d2:	f7 e0       	ldi	r31, 0x07	; 7
    23d4:	80 81       	ld	r24, Z
    23d6:	8a 9d       	mul	r24, r10
    23d8:	91 2d       	mov	r25, r1
    23da:	11 24       	eor	r1, r1
    23dc:	96 95       	lsr	r25
    23de:	96 95       	lsr	r25
    23e0:	96 95       	lsr	r25
    23e2:	9c 83       	std	Y+4, r25	; 0x04
		buffer[4]=rtc.Minuten%10;
    23e4:	99 0f       	add	r25, r25
    23e6:	29 2f       	mov	r18, r25
    23e8:	22 0f       	add	r18, r18
    23ea:	22 0f       	add	r18, r18
    23ec:	92 0f       	add	r25, r18
    23ee:	89 1b       	sub	r24, r25
    23f0:	8d 83       	std	Y+5, r24	; 0x05
		buffer[5]=' ';
    23f2:	80 e2       	ldi	r24, 0x20	; 32
    23f4:	8e 83       	std	Y+6, r24	; 0x06
		buffer[6]=rtc.Tag/10;
    23f6:	f2 01       	movw	r30, r4
    23f8:	80 81       	ld	r24, Z
    23fa:	8a 9d       	mul	r24, r10
    23fc:	91 2d       	mov	r25, r1
    23fe:	11 24       	eor	r1, r1
    2400:	96 95       	lsr	r25
    2402:	96 95       	lsr	r25
    2404:	96 95       	lsr	r25
    2406:	9f 83       	std	Y+7, r25	; 0x07
		buffer[7]=rtc.Tag%10;
    2408:	99 0f       	add	r25, r25
    240a:	29 2f       	mov	r18, r25
    240c:	22 0f       	add	r18, r18
    240e:	22 0f       	add	r18, r18
    2410:	92 0f       	add	r25, r18
    2412:	89 1b       	sub	r24, r25
    2414:	88 87       	std	Y+8, r24	; 0x08
		buffer[8]='.';
    2416:	8e e2       	ldi	r24, 0x2E	; 46
    2418:	89 87       	std	Y+9, r24	; 0x09
		buffer[9]=rtc.Monat/10;
    241a:	f6 01       	movw	r30, r12
    241c:	90 81       	ld	r25, Z
    241e:	9a 9d       	mul	r25, r10
    2420:	21 2d       	mov	r18, r1
    2422:	11 24       	eor	r1, r1
    2424:	26 95       	lsr	r18
    2426:	26 95       	lsr	r18
    2428:	26 95       	lsr	r18
    242a:	2a 87       	std	Y+10, r18	; 0x0a
		buffer[10]=rtc.Monat%10;
    242c:	22 0f       	add	r18, r18
    242e:	32 2f       	mov	r19, r18
    2430:	33 0f       	add	r19, r19
    2432:	33 0f       	add	r19, r19
    2434:	23 0f       	add	r18, r19
    2436:	92 1b       	sub	r25, r18
    2438:	9b 87       	std	Y+11, r25	; 0x0b
		buffer[11]='.';
    243a:	8c 87       	std	Y+12, r24	; 0x0c
		buffer[12]=rtc.Jahr/10;
    243c:	e7 e3       	ldi	r30, 0x37	; 55
    243e:	f7 e0       	ldi	r31, 0x07	; 7
    2440:	80 81       	ld	r24, Z
    2442:	8a 9d       	mul	r24, r10
    2444:	91 2d       	mov	r25, r1
    2446:	11 24       	eor	r1, r1
    2448:	96 95       	lsr	r25
    244a:	96 95       	lsr	r25
    244c:	96 95       	lsr	r25
    244e:	9d 87       	std	Y+13, r25	; 0x0d
		buffer[13]=rtc.Jahr%10;
    2450:	99 0f       	add	r25, r25
    2452:	29 2f       	mov	r18, r25
    2454:	22 0f       	add	r18, r18
    2456:	22 0f       	add	r18, r18
    2458:	92 0f       	add	r25, r18
    245a:	89 1b       	sub	r24, r25
    245c:	8e 87       	std	Y+14, r24	; 0x0e
    245e:	3b 2c       	mov	r3, r11
    2460:	01 e0       	ldi	r16, 0x01	; 1
    2462:	1b 2d       	mov	r17, r11
    2464:	04 c0       	rjmp	.+8      	; 0x246e <_Z13uhreinstellenv+0x1a2>
    2466:	1f 5f       	subi	r17, 0xFF	; 255
    2468:	0f 5f       	subi	r16, 0xFF	; 255
    246a:	f0 e1       	ldi	r31, 0x10	; 16
    246c:	3f 0e       	add	r3, r31
		buffersize=14;
		for(uint8_t i = 0; i<5;i++){
			if(i!=2){
    246e:	12 30       	cpi	r17, 0x02	; 2
    2470:	69 f0       	breq	.+26     	; 0x248c <_Z13uhreinstellenv+0x1c0>
				oled.draw_number16x16(buffer[i],i*numbersmalsize,2*charhighte);
    2472:	20 e1       	ldi	r18, 0x10	; 16
    2474:	43 2d       	mov	r20, r3
    2476:	f7 01       	movw	r30, r14
    2478:	e1 0f       	add	r30, r17
    247a:	f1 1d       	adc	r31, r1
    247c:	60 81       	ld	r22, Z
    247e:	80 ef       	ldi	r24, 0xF0	; 240
    2480:	92 e0       	ldi	r25, 0x02	; 2
    2482:	0e 94 26 06 	call	0xc4c	; 0xc4c <_ZN7Display16draw_number16x16Ehhh>
		buffer[10]=rtc.Monat%10;
		buffer[11]='.';
		buffer[12]=rtc.Jahr/10;
		buffer[13]=rtc.Jahr%10;
		buffersize=14;
		for(uint8_t i = 0; i<5;i++){
    2486:	05 30       	cpi	r16, 0x05	; 5
    2488:	70 f3       	brcs	.-36     	; 0x2466 <_Z13uhreinstellenv+0x19a>
    248a:	08 c0       	rjmp	.+16     	; 0x249c <_Z13uhreinstellenv+0x1d0>
			if(i!=2){
				oled.draw_number16x16(buffer[i],i*numbersmalsize,2*charhighte);
			}
			else {
				oled.draw_ASCI(buffer[i],i*numbersmalsize+numbersmalsize/2,2*charhighte+charhighte/2);
    248c:	24 e1       	ldi	r18, 0x14	; 20
    248e:	48 e2       	ldi	r20, 0x28	; 40
    2490:	6b 81       	ldd	r22, Y+3	; 0x03
    2492:	80 ef       	ldi	r24, 0xF0	; 240
    2494:	92 e0       	ldi	r25, 0x02	; 2
    2496:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    249a:	e5 cf       	rjmp	.-54     	; 0x2466 <_Z13uhreinstellenv+0x19a>
    249c:	8e 01       	movw	r16, r28
    249e:	09 5f       	subi	r16, 0xF9	; 249
    24a0:	1f 4f       	sbci	r17, 0xFF	; 255
		buffer[10]=rtc.Monat%10;
		buffer[11]='.';
		buffer[12]=rtc.Jahr/10;
		buffer[13]=rtc.Jahr%10;
		buffersize=14;
		for(uint8_t i = 0; i<5;i++){
    24a2:	2b 2c       	mov	r2, r11
    24a4:	0f 2e       	mov	r0, r31
    24a6:	f6 e0       	ldi	r31, 0x06	; 6
    24a8:	3f 2e       	mov	r3, r31
    24aa:	f0 2d       	mov	r31, r0
			else {
				oled.draw_ASCI(buffer[i],i*numbersmalsize+numbersmalsize/2,2*charhighte+charhighte/2);
			}
		}
		for(uint8_t i = 6; i<buffersize;i++){
			if(i!=8 && i!=11){
    24ac:	88 e0       	ldi	r24, 0x08	; 8
    24ae:	38 16       	cp	r3, r24
    24b0:	61 f0       	breq	.+24     	; 0x24ca <_Z13uhreinstellenv+0x1fe>
    24b2:	9b e0       	ldi	r25, 0x0B	; 11
    24b4:	39 16       	cp	r3, r25
    24b6:	49 f0       	breq	.+18     	; 0x24ca <_Z13uhreinstellenv+0x1fe>
				oled.draw_number16x16(buffer[i],i*numbersmalsize-6*numbersmalsize,4*charhighte);
    24b8:	20 e2       	ldi	r18, 0x20	; 32
    24ba:	42 2d       	mov	r20, r2
    24bc:	f8 01       	movw	r30, r16
    24be:	60 81       	ld	r22, Z
    24c0:	80 ef       	ldi	r24, 0xF0	; 240
    24c2:	92 e0       	ldi	r25, 0x02	; 2
    24c4:	0e 94 26 06 	call	0xc4c	; 0xc4c <_ZN7Display16draw_number16x16Ehhh>
    24c8:	09 c0       	rjmp	.+18     	; 0x24dc <_Z13uhreinstellenv+0x210>
			}
			else {
				oled.draw_ASCI(buffer[i],i*numbersmalsize+numbersmalsize/2-6*numbersmalsize,5*charhighte);
    24ca:	28 e2       	ldi	r18, 0x28	; 40
    24cc:	48 e0       	ldi	r20, 0x08	; 8
    24ce:	42 0d       	add	r20, r2
    24d0:	f8 01       	movw	r30, r16
    24d2:	60 81       	ld	r22, Z
    24d4:	80 ef       	ldi	r24, 0xF0	; 240
    24d6:	92 e0       	ldi	r25, 0x02	; 2
    24d8:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
			}
			else {
				oled.draw_ASCI(buffer[i],i*numbersmalsize+numbersmalsize/2,2*charhighte+charhighte/2);
			}
		}
		for(uint8_t i = 6; i<buffersize;i++){
    24dc:	33 94       	inc	r3
    24de:	0f 5f       	subi	r16, 0xFF	; 255
    24e0:	1f 4f       	sbci	r17, 0xFF	; 255
    24e2:	f0 e1       	ldi	r31, 0x10	; 16
    24e4:	2f 0e       	add	r2, r31
    24e6:	8e e0       	ldi	r24, 0x0E	; 14
    24e8:	38 12       	cpse	r3, r24
    24ea:	e0 cf       	rjmp	.-64     	; 0x24ac <_Z13uhreinstellenv+0x1e0>
			else {
				oled.draw_ASCI(buffer[i],i*numbersmalsize+numbersmalsize/2-6*numbersmalsize,5*charhighte);
			}
		}

		oled.sendFrame();
    24ec:	80 ef       	ldi	r24, 0xF0	; 240
    24ee:	92 e0       	ldi	r25, 0x02	; 2
    24f0:	0e 94 93 03 	call	0x726	; 0x726 <_ZN7Display9sendFrameEv>
		oled.clearFrame();
    24f4:	80 ef       	ldi	r24, 0xF0	; 240
    24f6:	92 e0       	ldi	r25, 0x02	; 2
    24f8:	0e 94 ed 02 	call	0x5da	; 0x5da <_ZN7Display10clearFrameEv>
		switch (pos) {
    24fc:	89 2d       	mov	r24, r9
    24fe:	90 e0       	ldi	r25, 0x00	; 0
    2500:	8a 30       	cpi	r24, 0x0A	; 10
    2502:	91 05       	cpc	r25, r1
    2504:	08 f0       	brcs	.+2      	; 0x2508 <_Z13uhreinstellenv+0x23c>
    2506:	47 c2       	rjmp	.+1166   	; 0x2996 <_Z13uhreinstellenv+0x6ca>
    2508:	fc 01       	movw	r30, r24
    250a:	ec 5c       	subi	r30, 0xCC	; 204
    250c:	ff 4f       	sbci	r31, 0xFF	; 255
    250e:	0c 94 59 27 	jmp	0x4eb2	; 0x4eb2 <__tablejump2__>
			case 0:
				rtc.Stunden=Tastatur.ZahlenausTastatur()*10;
    2512:	8f ee       	ldi	r24, 0xEF	; 239
    2514:	92 e0       	ldi	r25, 0x02	; 2
    2516:	0e 94 12 1b 	call	0x3624	; 0x3624 <_ZN9Interface17ZahlenausTastaturEv>
    251a:	88 0f       	add	r24, r24
    251c:	98 2f       	mov	r25, r24
    251e:	99 0f       	add	r25, r25
    2520:	99 0f       	add	r25, r25
    2522:	89 0f       	add	r24, r25
				if(rtc.Stunden>=24){
    2524:	88 31       	cpi	r24, 0x18	; 24
    2526:	08 f4       	brcc	.+2      	; 0x252a <_Z13uhreinstellenv+0x25e>
    2528:	51 c2       	rjmp	.+1186   	; 0x29cc <_Z13uhreinstellenv+0x700>
					rtc.Stunden=0;
    252a:	e1 e3       	ldi	r30, 0x31	; 49
    252c:	f7 e0       	ldi	r31, 0x07	; 7
    252e:	10 82       	st	Z, r1
					pos=-1;
					buffersize=sprintf(buffer,"Stunden falsch");
    2530:	e0 e9       	ldi	r30, 0x90	; 144
    2532:	f2 e0       	ldi	r31, 0x02	; 2
    2534:	a7 2d       	mov	r26, r7
    2536:	b8 2d       	mov	r27, r8
    2538:	86 2d       	mov	r24, r6
    253a:	01 90       	ld	r0, Z+
    253c:	0d 92       	st	X+, r0
    253e:	8a 95       	dec	r24
    2540:	e1 f7       	brne	.-8      	; 0x253a <_Z13uhreinstellenv+0x26e>
    2542:	2d 88       	ldd	r2, Y+21	; 0x15
    2544:	3e 88       	ldd	r3, Y+22	; 0x16
    2546:	1b 2d       	mov	r17, r11
					for(uint8_t i = 0; i<buffersize;i++){
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
    2548:	f1 01       	movw	r30, r2
    254a:	61 91       	ld	r22, Z+
    254c:	1f 01       	movw	r2, r30
    254e:	28 e3       	ldi	r18, 0x38	; 56
    2550:	41 2f       	mov	r20, r17
    2552:	80 ef       	ldi	r24, 0xF0	; 240
    2554:	92 e0       	ldi	r25, 0x02	; 2
    2556:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    255a:	1a 5f       	subi	r17, 0xFA	; 250
				rtc.Stunden=Tastatur.ZahlenausTastatur()*10;
				if(rtc.Stunden>=24){
					rtc.Stunden=0;
					pos=-1;
					buffersize=sprintf(buffer,"Stunden falsch");
					for(uint8_t i = 0; i<buffersize;i++){
    255c:	14 35       	cpi	r17, 0x54	; 84
    255e:	a1 f7       	brne	.-24     	; 0x2548 <_Z13uhreinstellenv+0x27c>
    2560:	39 c2       	rjmp	.+1138   	; 0x29d4 <_Z13uhreinstellenv+0x708>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 1:
				rtc.Stunden+=Tastatur.ZahlenausTastatur();
    2562:	8f ee       	ldi	r24, 0xEF	; 239
    2564:	92 e0       	ldi	r25, 0x02	; 2
    2566:	0e 94 12 1b 	call	0x3624	; 0x3624 <_ZN9Interface17ZahlenausTastaturEv>
    256a:	e1 e3       	ldi	r30, 0x31	; 49
    256c:	f7 e0       	ldi	r31, 0x07	; 7
    256e:	20 81       	ld	r18, Z
    2570:	90 e0       	ldi	r25, 0x00	; 0
    2572:	82 0f       	add	r24, r18
    2574:	91 1d       	adc	r25, r1
				if(rtc.Stunden>=24){
    2576:	88 31       	cpi	r24, 0x18	; 24
    2578:	10 f4       	brcc	.+4      	; 0x257e <_Z13uhreinstellenv+0x2b2>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 1:
				rtc.Stunden+=Tastatur.ZahlenausTastatur();
    257a:	80 83       	st	Z, r24
    257c:	5e c2       	rjmp	.+1212   	; 0x2a3a <_Z13uhreinstellenv+0x76e>
				if(rtc.Stunden>=24){
					rtc.Stunden=0;
    257e:	e1 e3       	ldi	r30, 0x31	; 49
    2580:	f7 e0       	ldi	r31, 0x07	; 7
    2582:	10 82       	st	Z, r1
					pos=-1;
					buffersize=sprintf(buffer,"Stunden falsch");
    2584:	e0 e9       	ldi	r30, 0x90	; 144
    2586:	f2 e0       	ldi	r31, 0x02	; 2
    2588:	a7 2d       	mov	r26, r7
    258a:	b8 2d       	mov	r27, r8
    258c:	86 2d       	mov	r24, r6
    258e:	01 90       	ld	r0, Z+
    2590:	0d 92       	st	X+, r0
    2592:	8a 95       	dec	r24
    2594:	e1 f7       	brne	.-8      	; 0x258e <_Z13uhreinstellenv+0x2c2>
    2596:	2d 88       	ldd	r2, Y+21	; 0x15
    2598:	3e 88       	ldd	r3, Y+22	; 0x16
    259a:	1b 2d       	mov	r17, r11
					for(uint8_t i = 0; i<buffersize;i++){
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
    259c:	f1 01       	movw	r30, r2
    259e:	61 91       	ld	r22, Z+
    25a0:	1f 01       	movw	r2, r30
    25a2:	28 e3       	ldi	r18, 0x38	; 56
    25a4:	41 2f       	mov	r20, r17
    25a6:	80 ef       	ldi	r24, 0xF0	; 240
    25a8:	92 e0       	ldi	r25, 0x02	; 2
    25aa:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    25ae:	1a 5f       	subi	r17, 0xFA	; 250
				rtc.Stunden+=Tastatur.ZahlenausTastatur();
				if(rtc.Stunden>=24){
					rtc.Stunden=0;
					pos=-1;
					buffersize=sprintf(buffer,"Stunden falsch");
					for(uint8_t i = 0; i<buffersize;i++){
    25b0:	14 35       	cpi	r17, 0x54	; 84
    25b2:	a1 f7       	brne	.-24     	; 0x259c <_Z13uhreinstellenv+0x2d0>
    25b4:	12 c2       	rjmp	.+1060   	; 0x29da <_Z13uhreinstellenv+0x70e>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 2:
				rtc.Minuten=Tastatur.ZahlenausTastatur()*10;
    25b6:	8f ee       	ldi	r24, 0xEF	; 239
    25b8:	92 e0       	ldi	r25, 0x02	; 2
    25ba:	0e 94 12 1b 	call	0x3624	; 0x3624 <_ZN9Interface17ZahlenausTastaturEv>
    25be:	88 0f       	add	r24, r24
    25c0:	98 2f       	mov	r25, r24
    25c2:	99 0f       	add	r25, r25
    25c4:	99 0f       	add	r25, r25
    25c6:	89 0f       	add	r24, r25
				if(rtc.Minuten>=60){
    25c8:	8c 33       	cpi	r24, 0x3C	; 60
    25ca:	20 f4       	brcc	.+8      	; 0x25d4 <_Z13uhreinstellenv+0x308>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 2:
				rtc.Minuten=Tastatur.ZahlenausTastatur()*10;
    25cc:	e2 e3       	ldi	r30, 0x32	; 50
    25ce:	f7 e0       	ldi	r31, 0x07	; 7
    25d0:	80 83       	st	Z, r24
    25d2:	33 c2       	rjmp	.+1126   	; 0x2a3a <_Z13uhreinstellenv+0x76e>
				if(rtc.Minuten>=60){
					rtc.Minuten=0;
    25d4:	e2 e3       	ldi	r30, 0x32	; 50
    25d6:	f7 e0       	ldi	r31, 0x07	; 7
    25d8:	10 82       	st	Z, r1
					pos=1;
					buffersize=sprintf(buffer,"Minuten falsch");
    25da:	ef e9       	ldi	r30, 0x9F	; 159
    25dc:	f2 e0       	ldi	r31, 0x02	; 2
    25de:	a7 2d       	mov	r26, r7
    25e0:	b8 2d       	mov	r27, r8
    25e2:	86 2d       	mov	r24, r6
    25e4:	01 90       	ld	r0, Z+
    25e6:	0d 92       	st	X+, r0
    25e8:	8a 95       	dec	r24
    25ea:	e1 f7       	brne	.-8      	; 0x25e4 <_Z13uhreinstellenv+0x318>
    25ec:	2d 88       	ldd	r2, Y+21	; 0x15
    25ee:	3e 88       	ldd	r3, Y+22	; 0x16
    25f0:	1b 2d       	mov	r17, r11
					for(uint8_t i = 0; i<buffersize;i++){
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
    25f2:	f1 01       	movw	r30, r2
    25f4:	61 91       	ld	r22, Z+
    25f6:	1f 01       	movw	r2, r30
    25f8:	28 e3       	ldi	r18, 0x38	; 56
    25fa:	41 2f       	mov	r20, r17
    25fc:	80 ef       	ldi	r24, 0xF0	; 240
    25fe:	92 e0       	ldi	r25, 0x02	; 2
    2600:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    2604:	1a 5f       	subi	r17, 0xFA	; 250
				rtc.Minuten=Tastatur.ZahlenausTastatur()*10;
				if(rtc.Minuten>=60){
					rtc.Minuten=0;
					pos=1;
					buffersize=sprintf(buffer,"Minuten falsch");
					for(uint8_t i = 0; i<buffersize;i++){
    2606:	14 35       	cpi	r17, 0x54	; 84
    2608:	a1 f7       	brne	.-24     	; 0x25f2 <_Z13uhreinstellenv+0x326>
    260a:	ea c1       	rjmp	.+980    	; 0x29e0 <_Z13uhreinstellenv+0x714>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 3:
				rtc.Minuten+=Tastatur.ZahlenausTastatur();
    260c:	8f ee       	ldi	r24, 0xEF	; 239
    260e:	92 e0       	ldi	r25, 0x02	; 2
    2610:	0e 94 12 1b 	call	0x3624	; 0x3624 <_ZN9Interface17ZahlenausTastaturEv>
    2614:	e2 e3       	ldi	r30, 0x32	; 50
    2616:	f7 e0       	ldi	r31, 0x07	; 7
    2618:	20 81       	ld	r18, Z
    261a:	90 e0       	ldi	r25, 0x00	; 0
    261c:	82 0f       	add	r24, r18
    261e:	91 1d       	adc	r25, r1
				if(rtc.Minuten>=60){
    2620:	8c 33       	cpi	r24, 0x3C	; 60
    2622:	10 f4       	brcc	.+4      	; 0x2628 <_Z13uhreinstellenv+0x35c>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 3:
				rtc.Minuten+=Tastatur.ZahlenausTastatur();
    2624:	80 83       	st	Z, r24
    2626:	09 c2       	rjmp	.+1042   	; 0x2a3a <_Z13uhreinstellenv+0x76e>
				if(rtc.Minuten>=60){
					rtc.Minuten=0;
    2628:	e2 e3       	ldi	r30, 0x32	; 50
    262a:	f7 e0       	ldi	r31, 0x07	; 7
    262c:	10 82       	st	Z, r1
					pos=1;
					buffersize=sprintf(buffer,"Minuten falsch");
    262e:	ef e9       	ldi	r30, 0x9F	; 159
    2630:	f2 e0       	ldi	r31, 0x02	; 2
    2632:	a7 2d       	mov	r26, r7
    2634:	b8 2d       	mov	r27, r8
    2636:	86 2d       	mov	r24, r6
    2638:	01 90       	ld	r0, Z+
    263a:	0d 92       	st	X+, r0
    263c:	8a 95       	dec	r24
    263e:	e1 f7       	brne	.-8      	; 0x2638 <_Z13uhreinstellenv+0x36c>
    2640:	2d 88       	ldd	r2, Y+21	; 0x15
    2642:	3e 88       	ldd	r3, Y+22	; 0x16
    2644:	1b 2d       	mov	r17, r11
					for(uint8_t i = 0; i<buffersize;i++){
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
    2646:	f1 01       	movw	r30, r2
    2648:	61 91       	ld	r22, Z+
    264a:	1f 01       	movw	r2, r30
    264c:	28 e3       	ldi	r18, 0x38	; 56
    264e:	41 2f       	mov	r20, r17
    2650:	80 ef       	ldi	r24, 0xF0	; 240
    2652:	92 e0       	ldi	r25, 0x02	; 2
    2654:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    2658:	1a 5f       	subi	r17, 0xFA	; 250
				rtc.Minuten+=Tastatur.ZahlenausTastatur();
				if(rtc.Minuten>=60){
					rtc.Minuten=0;
					pos=1;
					buffersize=sprintf(buffer,"Minuten falsch");
					for(uint8_t i = 0; i<buffersize;i++){
    265a:	14 35       	cpi	r17, 0x54	; 84
    265c:	a1 f7       	brne	.-24     	; 0x2646 <_Z13uhreinstellenv+0x37a>
    265e:	c3 c1       	rjmp	.+902    	; 0x29e6 <_Z13uhreinstellenv+0x71a>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 4:
				rtc.Tag=Tastatur.ZahlenausTastatur()*10;
    2660:	8f ee       	ldi	r24, 0xEF	; 239
    2662:	92 e0       	ldi	r25, 0x02	; 2
    2664:	0e 94 12 1b 	call	0x3624	; 0x3624 <_ZN9Interface17ZahlenausTastaturEv>
    2668:	88 0f       	add	r24, r24
    266a:	98 2f       	mov	r25, r24
    266c:	99 0f       	add	r25, r25
    266e:	99 0f       	add	r25, r25
    2670:	89 0f       	add	r24, r25
				if(rtc.Tag>=32){
    2672:	80 32       	cpi	r24, 0x20	; 32
    2674:	18 f4       	brcc	.+6      	; 0x267c <_Z13uhreinstellenv+0x3b0>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 4:
				rtc.Tag=Tastatur.ZahlenausTastatur()*10;
    2676:	f2 01       	movw	r30, r4
    2678:	80 83       	st	Z, r24
    267a:	df c1       	rjmp	.+958    	; 0x2a3a <_Z13uhreinstellenv+0x76e>
				if(rtc.Tag>=32){
					rtc.Tag=0;
    267c:	f2 01       	movw	r30, r4
    267e:	10 82       	st	Z, r1
					pos=3;
					buffersize=sprintf(buffer,"Tag falsch");
    2680:	8b e0       	ldi	r24, 0x0B	; 11
    2682:	ee ea       	ldi	r30, 0xAE	; 174
    2684:	f2 e0       	ldi	r31, 0x02	; 2
    2686:	a7 2d       	mov	r26, r7
    2688:	b8 2d       	mov	r27, r8
    268a:	01 90       	ld	r0, Z+
    268c:	0d 92       	st	X+, r0
    268e:	8a 95       	dec	r24
    2690:	e1 f7       	brne	.-8      	; 0x268a <_Z13uhreinstellenv+0x3be>
    2692:	2d 88       	ldd	r2, Y+21	; 0x15
    2694:	3e 88       	ldd	r3, Y+22	; 0x16
    2696:	1b 2d       	mov	r17, r11
					for(uint8_t i = 0; i<buffersize;i++){
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
    2698:	f1 01       	movw	r30, r2
    269a:	61 91       	ld	r22, Z+
    269c:	1f 01       	movw	r2, r30
    269e:	28 e3       	ldi	r18, 0x38	; 56
    26a0:	41 2f       	mov	r20, r17
    26a2:	80 ef       	ldi	r24, 0xF0	; 240
    26a4:	92 e0       	ldi	r25, 0x02	; 2
    26a6:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    26aa:	1a 5f       	subi	r17, 0xFA	; 250
				rtc.Tag=Tastatur.ZahlenausTastatur()*10;
				if(rtc.Tag>=32){
					rtc.Tag=0;
					pos=3;
					buffersize=sprintf(buffer,"Tag falsch");
					for(uint8_t i = 0; i<buffersize;i++){
    26ac:	1c 33       	cpi	r17, 0x3C	; 60
    26ae:	a1 f7       	brne	.-24     	; 0x2698 <_Z13uhreinstellenv+0x3cc>
    26b0:	9d c1       	rjmp	.+826    	; 0x29ec <_Z13uhreinstellenv+0x720>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 5:
				rtc.Tag+=Tastatur.ZahlenausTastatur();
    26b2:	8f ee       	ldi	r24, 0xEF	; 239
    26b4:	92 e0       	ldi	r25, 0x02	; 2
    26b6:	0e 94 12 1b 	call	0x3624	; 0x3624 <_ZN9Interface17ZahlenausTastaturEv>
    26ba:	f2 01       	movw	r30, r4
    26bc:	20 81       	ld	r18, Z
    26be:	90 e0       	ldi	r25, 0x00	; 0
    26c0:	82 0f       	add	r24, r18
    26c2:	91 1d       	adc	r25, r1
				if(rtc.Tag>=32){
    26c4:	80 32       	cpi	r24, 0x20	; 32
    26c6:	10 f4       	brcc	.+4      	; 0x26cc <_Z13uhreinstellenv+0x400>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 5:
				rtc.Tag+=Tastatur.ZahlenausTastatur();
    26c8:	80 83       	st	Z, r24
    26ca:	b7 c1       	rjmp	.+878    	; 0x2a3a <_Z13uhreinstellenv+0x76e>
				if(rtc.Tag>=32){
					rtc.Tag=0;
    26cc:	f2 01       	movw	r30, r4
    26ce:	10 82       	st	Z, r1
					pos=3;
					buffersize=sprintf(buffer,"Tag falsch");
    26d0:	8b e0       	ldi	r24, 0x0B	; 11
    26d2:	ee ea       	ldi	r30, 0xAE	; 174
    26d4:	f2 e0       	ldi	r31, 0x02	; 2
    26d6:	a7 2d       	mov	r26, r7
    26d8:	b8 2d       	mov	r27, r8
    26da:	01 90       	ld	r0, Z+
    26dc:	0d 92       	st	X+, r0
    26de:	8a 95       	dec	r24
    26e0:	e1 f7       	brne	.-8      	; 0x26da <_Z13uhreinstellenv+0x40e>
    26e2:	2d 88       	ldd	r2, Y+21	; 0x15
    26e4:	3e 88       	ldd	r3, Y+22	; 0x16
    26e6:	1b 2d       	mov	r17, r11
					for(uint8_t i = 0; i<buffersize;i++){
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
    26e8:	f1 01       	movw	r30, r2
    26ea:	61 91       	ld	r22, Z+
    26ec:	1f 01       	movw	r2, r30
    26ee:	28 e3       	ldi	r18, 0x38	; 56
    26f0:	41 2f       	mov	r20, r17
    26f2:	80 ef       	ldi	r24, 0xF0	; 240
    26f4:	92 e0       	ldi	r25, 0x02	; 2
    26f6:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    26fa:	1a 5f       	subi	r17, 0xFA	; 250
				rtc.Tag+=Tastatur.ZahlenausTastatur();
				if(rtc.Tag>=32){
					rtc.Tag=0;
					pos=3;
					buffersize=sprintf(buffer,"Tag falsch");
					for(uint8_t i = 0; i<buffersize;i++){
    26fc:	1c 33       	cpi	r17, 0x3C	; 60
    26fe:	a1 f7       	brne	.-24     	; 0x26e8 <_Z13uhreinstellenv+0x41c>
    2700:	7a c1       	rjmp	.+756    	; 0x29f6 <_Z13uhreinstellenv+0x72a>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 6:
				rtc.Monat=Tastatur.ZahlenausTastatur()*10;
    2702:	8f ee       	ldi	r24, 0xEF	; 239
    2704:	92 e0       	ldi	r25, 0x02	; 2
    2706:	0e 94 12 1b 	call	0x3624	; 0x3624 <_ZN9Interface17ZahlenausTastaturEv>
    270a:	88 0f       	add	r24, r24
    270c:	98 2f       	mov	r25, r24
    270e:	99 0f       	add	r25, r25
    2710:	99 0f       	add	r25, r25
    2712:	89 0f       	add	r24, r25
				if(rtc.Monat>=13){
    2714:	8d 30       	cpi	r24, 0x0D	; 13
    2716:	18 f4       	brcc	.+6      	; 0x271e <_Z13uhreinstellenv+0x452>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 6:
				rtc.Monat=Tastatur.ZahlenausTastatur()*10;
    2718:	f6 01       	movw	r30, r12
    271a:	80 83       	st	Z, r24
    271c:	8e c1       	rjmp	.+796    	; 0x2a3a <_Z13uhreinstellenv+0x76e>
				if(rtc.Monat>=13){
					rtc.Monat=0;
    271e:	f6 01       	movw	r30, r12
    2720:	10 82       	st	Z, r1
					pos=5;
					buffersize=sprintf(buffer,"Monat falsch");
    2722:	8d e0       	ldi	r24, 0x0D	; 13
    2724:	e9 eb       	ldi	r30, 0xB9	; 185
    2726:	f2 e0       	ldi	r31, 0x02	; 2
    2728:	a7 2d       	mov	r26, r7
    272a:	b8 2d       	mov	r27, r8
    272c:	01 90       	ld	r0, Z+
    272e:	0d 92       	st	X+, r0
    2730:	8a 95       	dec	r24
    2732:	e1 f7       	brne	.-8      	; 0x272c <_Z13uhreinstellenv+0x460>
    2734:	2d 88       	ldd	r2, Y+21	; 0x15
    2736:	3e 88       	ldd	r3, Y+22	; 0x16
    2738:	1b 2d       	mov	r17, r11
					for(uint8_t i = 0; i<buffersize;i++){
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
    273a:	f1 01       	movw	r30, r2
    273c:	61 91       	ld	r22, Z+
    273e:	1f 01       	movw	r2, r30
    2740:	28 e3       	ldi	r18, 0x38	; 56
    2742:	41 2f       	mov	r20, r17
    2744:	80 ef       	ldi	r24, 0xF0	; 240
    2746:	92 e0       	ldi	r25, 0x02	; 2
    2748:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    274c:	1a 5f       	subi	r17, 0xFA	; 250
				rtc.Monat=Tastatur.ZahlenausTastatur()*10;
				if(rtc.Monat>=13){
					rtc.Monat=0;
					pos=5;
					buffersize=sprintf(buffer,"Monat falsch");
					for(uint8_t i = 0; i<buffersize;i++){
    274e:	18 34       	cpi	r17, 0x48	; 72
    2750:	a1 f7       	brne	.-24     	; 0x273a <_Z13uhreinstellenv+0x46e>
    2752:	56 c1       	rjmp	.+684    	; 0x2a00 <_Z13uhreinstellenv+0x734>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 7:
				rtc.Monat+=Tastatur.ZahlenausTastatur();
    2754:	8f ee       	ldi	r24, 0xEF	; 239
    2756:	92 e0       	ldi	r25, 0x02	; 2
    2758:	0e 94 12 1b 	call	0x3624	; 0x3624 <_ZN9Interface17ZahlenausTastaturEv>
    275c:	f6 01       	movw	r30, r12
    275e:	20 81       	ld	r18, Z
    2760:	90 e0       	ldi	r25, 0x00	; 0
    2762:	82 0f       	add	r24, r18
    2764:	91 1d       	adc	r25, r1
				if(rtc.Monat>=13){
    2766:	8d 30       	cpi	r24, 0x0D	; 13
    2768:	10 f4       	brcc	.+4      	; 0x276e <_Z13uhreinstellenv+0x4a2>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 7:
				rtc.Monat+=Tastatur.ZahlenausTastatur();
    276a:	80 83       	st	Z, r24
    276c:	1e c0       	rjmp	.+60     	; 0x27aa <_Z13uhreinstellenv+0x4de>
				if(rtc.Monat>=13){
					rtc.Monat=0;
    276e:	f6 01       	movw	r30, r12
    2770:	10 82       	st	Z, r1
					pos=5;
					buffersize=sprintf(buffer,"Monat falsch");
    2772:	8d e0       	ldi	r24, 0x0D	; 13
    2774:	e9 eb       	ldi	r30, 0xB9	; 185
    2776:	f2 e0       	ldi	r31, 0x02	; 2
    2778:	a7 2d       	mov	r26, r7
    277a:	b8 2d       	mov	r27, r8
    277c:	01 90       	ld	r0, Z+
    277e:	0d 92       	st	X+, r0
    2780:	8a 95       	dec	r24
    2782:	e1 f7       	brne	.-8      	; 0x277c <_Z13uhreinstellenv+0x4b0>
    2784:	2d 88       	ldd	r2, Y+21	; 0x15
    2786:	3e 88       	ldd	r3, Y+22	; 0x16
    2788:	1b 2d       	mov	r17, r11
					for(uint8_t i = 0; i<buffersize;i++){
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
    278a:	f1 01       	movw	r30, r2
    278c:	61 91       	ld	r22, Z+
    278e:	1f 01       	movw	r2, r30
    2790:	28 e3       	ldi	r18, 0x38	; 56
    2792:	41 2f       	mov	r20, r17
    2794:	80 ef       	ldi	r24, 0xF0	; 240
    2796:	92 e0       	ldi	r25, 0x02	; 2
    2798:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    279c:	1a 5f       	subi	r17, 0xFA	; 250
				rtc.Monat+=Tastatur.ZahlenausTastatur();
				if(rtc.Monat>=13){
					rtc.Monat=0;
					pos=5;
					buffersize=sprintf(buffer,"Monat falsch");
					for(uint8_t i = 0; i<buffersize;i++){
    279e:	18 34       	cpi	r17, 0x48	; 72
    27a0:	a1 f7       	brne	.-24     	; 0x278a <_Z13uhreinstellenv+0x4be>
				break;
			case 7:
				rtc.Monat+=Tastatur.ZahlenausTastatur();
				if(rtc.Monat>=13){
					rtc.Monat=0;
					pos=5;
    27a2:	0f 2e       	mov	r0, r31
    27a4:	f5 e0       	ldi	r31, 0x05	; 5
    27a6:	9f 2e       	mov	r9, r31
    27a8:	f0 2d       	mov	r31, r0
					buffersize=sprintf(buffer,"Monat falsch");
					for(uint8_t i = 0; i<buffersize;i++){
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				if(rtc.Monat==4||rtc.Monat==6||rtc.Monat==9||rtc.Monat==11){
    27aa:	f6 01       	movw	r30, r12
    27ac:	90 81       	ld	r25, Z
    27ae:	89 2f       	mov	r24, r25
    27b0:	8d 7f       	andi	r24, 0xFD	; 253
    27b2:	84 30       	cpi	r24, 0x04	; 4
    27b4:	11 f0       	breq	.+4      	; 0x27ba <_Z13uhreinstellenv+0x4ee>
    27b6:	89 30       	cpi	r24, 0x09	; 9
    27b8:	09 f5       	brne	.+66     	; 0x27fc <_Z13uhreinstellenv+0x530>
					if(rtc.Tag>=31){
    27ba:	f2 01       	movw	r30, r4
    27bc:	80 81       	ld	r24, Z
    27be:	8f 31       	cpi	r24, 0x1F	; 31
    27c0:	08 f4       	brcc	.+2      	; 0x27c4 <_Z13uhreinstellenv+0x4f8>
    27c2:	ea c0       	rjmp	.+468    	; 0x2998 <_Z13uhreinstellenv+0x6cc>
						rtc.Tag=0;
    27c4:	10 82       	st	Z, r1
						rtc.Monat=0;
    27c6:	f6 01       	movw	r30, r12
    27c8:	10 82       	st	Z, r1
						pos=3;
						buffersize=sprintf(buffer,"Tag falsch");
    27ca:	8b e0       	ldi	r24, 0x0B	; 11
    27cc:	ee ea       	ldi	r30, 0xAE	; 174
    27ce:	f2 e0       	ldi	r31, 0x02	; 2
    27d0:	a7 2d       	mov	r26, r7
    27d2:	b8 2d       	mov	r27, r8
    27d4:	01 90       	ld	r0, Z+
    27d6:	0d 92       	st	X+, r0
    27d8:	8a 95       	dec	r24
    27da:	e1 f7       	brne	.-8      	; 0x27d4 <_Z13uhreinstellenv+0x508>
    27dc:	2d 88       	ldd	r2, Y+21	; 0x15
    27de:	3e 88       	ldd	r3, Y+22	; 0x16
    27e0:	1b 2d       	mov	r17, r11
						for(uint8_t i = 0; i<buffersize;i++){
							oled.draw_ASCI(buffer[i],charsize*i,7*8);
    27e2:	f1 01       	movw	r30, r2
    27e4:	61 91       	ld	r22, Z+
    27e6:	1f 01       	movw	r2, r30
    27e8:	28 e3       	ldi	r18, 0x38	; 56
    27ea:	41 2f       	mov	r20, r17
    27ec:	80 ef       	ldi	r24, 0xF0	; 240
    27ee:	92 e0       	ldi	r25, 0x02	; 2
    27f0:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    27f4:	1a 5f       	subi	r17, 0xFA	; 250
					if(rtc.Tag>=31){
						rtc.Tag=0;
						rtc.Monat=0;
						pos=3;
						buffersize=sprintf(buffer,"Tag falsch");
						for(uint8_t i = 0; i<buffersize;i++){
    27f6:	1c 33       	cpi	r17, 0x3C	; 60
    27f8:	a1 f7       	brne	.-24     	; 0x27e2 <_Z13uhreinstellenv+0x516>
    27fa:	07 c1       	rjmp	.+526    	; 0x2a0a <_Z13uhreinstellenv+0x73e>
							oled.draw_ASCI(buffer[i],charsize*i,7*8);
						}
					}
				}
				else if(rtc.Monat==2){
    27fc:	92 30       	cpi	r25, 0x02	; 2
    27fe:	09 f0       	breq	.+2      	; 0x2802 <_Z13uhreinstellenv+0x536>
    2800:	cb c0       	rjmp	.+406    	; 0x2998 <_Z13uhreinstellenv+0x6cc>
					if(rtc.Tag>=30){
    2802:	f2 01       	movw	r30, r4
    2804:	80 81       	ld	r24, Z
    2806:	8e 31       	cpi	r24, 0x1E	; 30
    2808:	08 f4       	brcc	.+2      	; 0x280c <_Z13uhreinstellenv+0x540>
    280a:	c6 c0       	rjmp	.+396    	; 0x2998 <_Z13uhreinstellenv+0x6cc>
						rtc.Tag=0;
    280c:	10 82       	st	Z, r1
						rtc.Monat=0;
    280e:	f6 01       	movw	r30, r12
    2810:	10 82       	st	Z, r1
						pos=3;
						buffersize=sprintf(buffer,"Tag falsch");
    2812:	8b e0       	ldi	r24, 0x0B	; 11
    2814:	ee ea       	ldi	r30, 0xAE	; 174
    2816:	f2 e0       	ldi	r31, 0x02	; 2
    2818:	a7 2d       	mov	r26, r7
    281a:	b8 2d       	mov	r27, r8
    281c:	01 90       	ld	r0, Z+
    281e:	0d 92       	st	X+, r0
    2820:	8a 95       	dec	r24
    2822:	e1 f7       	brne	.-8      	; 0x281c <_Z13uhreinstellenv+0x550>
    2824:	2d 88       	ldd	r2, Y+21	; 0x15
    2826:	3e 88       	ldd	r3, Y+22	; 0x16
    2828:	1b 2d       	mov	r17, r11
						for(uint8_t i = 0; i<buffersize;i++){
							oled.draw_ASCI(buffer[i],charsize*i,7*8);
    282a:	f1 01       	movw	r30, r2
    282c:	61 91       	ld	r22, Z+
    282e:	1f 01       	movw	r2, r30
    2830:	28 e3       	ldi	r18, 0x38	; 56
    2832:	41 2f       	mov	r20, r17
    2834:	80 ef       	ldi	r24, 0xF0	; 240
    2836:	92 e0       	ldi	r25, 0x02	; 2
    2838:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    283c:	1a 5f       	subi	r17, 0xFA	; 250
					if(rtc.Tag>=30){
						rtc.Tag=0;
						rtc.Monat=0;
						pos=3;
						buffersize=sprintf(buffer,"Tag falsch");
						for(uint8_t i = 0; i<buffersize;i++){
    283e:	1c 33       	cpi	r17, 0x3C	; 60
    2840:	a1 f7       	brne	.-24     	; 0x282a <_Z13uhreinstellenv+0x55e>
    2842:	e8 c0       	rjmp	.+464    	; 0x2a14 <_Z13uhreinstellenv+0x748>
						}
					}
				}
				break;
			case 8:
				rtc.Jahr=Tastatur.ZahlenausTastatur()*10;
    2844:	8f ee       	ldi	r24, 0xEF	; 239
    2846:	92 e0       	ldi	r25, 0x02	; 2
    2848:	0e 94 12 1b 	call	0x3624	; 0x3624 <_ZN9Interface17ZahlenausTastaturEv>
    284c:	88 0f       	add	r24, r24
    284e:	98 2f       	mov	r25, r24
    2850:	99 0f       	add	r25, r25
    2852:	99 0f       	add	r25, r25
    2854:	89 0f       	add	r24, r25
				if(rtc.Jahr>=50){
    2856:	82 33       	cpi	r24, 0x32	; 50
    2858:	20 f4       	brcc	.+8      	; 0x2862 <_Z13uhreinstellenv+0x596>
						}
					}
				}
				break;
			case 8:
				rtc.Jahr=Tastatur.ZahlenausTastatur()*10;
    285a:	e7 e3       	ldi	r30, 0x37	; 55
    285c:	f7 e0       	ldi	r31, 0x07	; 7
    285e:	80 83       	st	Z, r24
    2860:	ec c0       	rjmp	.+472    	; 0x2a3a <_Z13uhreinstellenv+0x76e>
				if(rtc.Jahr>=50){
					rtc.Jahr=0;
    2862:	e7 e3       	ldi	r30, 0x37	; 55
    2864:	f7 e0       	ldi	r31, 0x07	; 7
    2866:	10 82       	st	Z, r1
					pos=7;
					buffersize=sprintf(buffer,"Jahr falsch");
    2868:	8c e0       	ldi	r24, 0x0C	; 12
    286a:	e6 ec       	ldi	r30, 0xC6	; 198
    286c:	f2 e0       	ldi	r31, 0x02	; 2
    286e:	a7 2d       	mov	r26, r7
    2870:	b8 2d       	mov	r27, r8
    2872:	01 90       	ld	r0, Z+
    2874:	0d 92       	st	X+, r0
    2876:	8a 95       	dec	r24
    2878:	e1 f7       	brne	.-8      	; 0x2872 <_Z13uhreinstellenv+0x5a6>
    287a:	2d 88       	ldd	r2, Y+21	; 0x15
    287c:	3e 88       	ldd	r3, Y+22	; 0x16
    287e:	1b 2d       	mov	r17, r11
					for(uint8_t i = 0; i<buffersize;i++){
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
    2880:	f1 01       	movw	r30, r2
    2882:	61 91       	ld	r22, Z+
    2884:	1f 01       	movw	r2, r30
    2886:	28 e3       	ldi	r18, 0x38	; 56
    2888:	41 2f       	mov	r20, r17
    288a:	80 ef       	ldi	r24, 0xF0	; 240
    288c:	92 e0       	ldi	r25, 0x02	; 2
    288e:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    2892:	1a 5f       	subi	r17, 0xFA	; 250
				rtc.Jahr=Tastatur.ZahlenausTastatur()*10;
				if(rtc.Jahr>=50){
					rtc.Jahr=0;
					pos=7;
					buffersize=sprintf(buffer,"Jahr falsch");
					for(uint8_t i = 0; i<buffersize;i++){
    2894:	12 34       	cpi	r17, 0x42	; 66
    2896:	a1 f7       	brne	.-24     	; 0x2880 <_Z13uhreinstellenv+0x5b4>
    2898:	c2 c0       	rjmp	.+388    	; 0x2a1e <_Z13uhreinstellenv+0x752>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 9:
				rtc.Jahr+=Tastatur.ZahlenausTastatur();
    289a:	8f ee       	ldi	r24, 0xEF	; 239
    289c:	92 e0       	ldi	r25, 0x02	; 2
    289e:	0e 94 12 1b 	call	0x3624	; 0x3624 <_ZN9Interface17ZahlenausTastaturEv>
    28a2:	e7 e3       	ldi	r30, 0x37	; 55
    28a4:	f7 e0       	ldi	r31, 0x07	; 7
    28a6:	20 81       	ld	r18, Z
    28a8:	90 e0       	ldi	r25, 0x00	; 0
    28aa:	82 0f       	add	r24, r18
    28ac:	91 1d       	adc	r25, r1
				if(rtc.Jahr>=50){
    28ae:	82 33       	cpi	r24, 0x32	; 50
    28b0:	10 f4       	brcc	.+4      	; 0x28b6 <_Z13uhreinstellenv+0x5ea>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 9:
				rtc.Jahr+=Tastatur.ZahlenausTastatur();
    28b2:	80 83       	st	Z, r24
    28b4:	1f c0       	rjmp	.+62     	; 0x28f4 <_Z13uhreinstellenv+0x628>
				if(rtc.Jahr>=50){
					rtc.Jahr=0;
    28b6:	e7 e3       	ldi	r30, 0x37	; 55
    28b8:	f7 e0       	ldi	r31, 0x07	; 7
    28ba:	10 82       	st	Z, r1
					pos=7;
					buffersize=sprintf(buffer,"Jahr falsch");
    28bc:	8c e0       	ldi	r24, 0x0C	; 12
    28be:	e6 ec       	ldi	r30, 0xC6	; 198
    28c0:	f2 e0       	ldi	r31, 0x02	; 2
    28c2:	a7 2d       	mov	r26, r7
    28c4:	b8 2d       	mov	r27, r8
    28c6:	01 90       	ld	r0, Z+
    28c8:	0d 92       	st	X+, r0
    28ca:	8a 95       	dec	r24
    28cc:	e1 f7       	brne	.-8      	; 0x28c6 <_Z13uhreinstellenv+0x5fa>
    28ce:	2d 88       	ldd	r2, Y+21	; 0x15
    28d0:	3e 88       	ldd	r3, Y+22	; 0x16
    28d2:	1b 2d       	mov	r17, r11
					for(uint8_t i = 0; i<buffersize;i++){
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
    28d4:	f1 01       	movw	r30, r2
    28d6:	61 91       	ld	r22, Z+
    28d8:	1f 01       	movw	r2, r30
    28da:	28 e3       	ldi	r18, 0x38	; 56
    28dc:	41 2f       	mov	r20, r17
    28de:	80 ef       	ldi	r24, 0xF0	; 240
    28e0:	92 e0       	ldi	r25, 0x02	; 2
    28e2:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    28e6:	1a 5f       	subi	r17, 0xFA	; 250
				rtc.Jahr+=Tastatur.ZahlenausTastatur();
				if(rtc.Jahr>=50){
					rtc.Jahr=0;
					pos=7;
					buffersize=sprintf(buffer,"Jahr falsch");
					for(uint8_t i = 0; i<buffersize;i++){
    28e8:	12 34       	cpi	r17, 0x42	; 66
    28ea:	a1 f7       	brne	.-24     	; 0x28d4 <_Z13uhreinstellenv+0x608>
				break;
			case 9:
				rtc.Jahr+=Tastatur.ZahlenausTastatur();
				if(rtc.Jahr>=50){
					rtc.Jahr=0;
					pos=7;
    28ec:	0f 2e       	mov	r0, r31
    28ee:	f7 e0       	ldi	r31, 0x07	; 7
    28f0:	9f 2e       	mov	r9, r31
    28f2:	f0 2d       	mov	r31, r0
					buffersize=sprintf(buffer,"Jahr falsch");
					for(uint8_t i = 0; i<buffersize;i++){
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				if(rtc.Monat==2){
    28f4:	f6 01       	movw	r30, r12
    28f6:	80 81       	ld	r24, Z
    28f8:	82 30       	cpi	r24, 0x02	; 2
    28fa:	09 f0       	breq	.+2      	; 0x28fe <_Z13uhreinstellenv+0x632>
    28fc:	4d c0       	rjmp	.+154    	; 0x2998 <_Z13uhreinstellenv+0x6cc>
					if(rtc.Jahr%4==0){
    28fe:	e7 e3       	ldi	r30, 0x37	; 55
    2900:	f7 e0       	ldi	r31, 0x07	; 7
    2902:	80 81       	ld	r24, Z
    2904:	83 70       	andi	r24, 0x03	; 3
    2906:	21 f5       	brne	.+72     	; 0x2950 <_Z13uhreinstellenv+0x684>
						if (rtc.Tag>=30)
    2908:	f2 01       	movw	r30, r4
    290a:	80 81       	ld	r24, Z
    290c:	8e 31       	cpi	r24, 0x1E	; 30
    290e:	08 f4       	brcc	.+2      	; 0x2912 <_Z13uhreinstellenv+0x646>
    2910:	43 c0       	rjmp	.+134    	; 0x2998 <_Z13uhreinstellenv+0x6cc>
						{
							rtc.Tag=0;
    2912:	10 82       	st	Z, r1
							rtc.Monat=0;
    2914:	f6 01       	movw	r30, r12
    2916:	10 82       	st	Z, r1
							rtc.Jahr=0;
    2918:	e7 e3       	ldi	r30, 0x37	; 55
    291a:	f7 e0       	ldi	r31, 0x07	; 7
    291c:	10 82       	st	Z, r1
							pos=3;
							buffersize=sprintf(buffer,"Tag falsch");
    291e:	8b e0       	ldi	r24, 0x0B	; 11
    2920:	ee ea       	ldi	r30, 0xAE	; 174
    2922:	f2 e0       	ldi	r31, 0x02	; 2
    2924:	a7 2d       	mov	r26, r7
    2926:	b8 2d       	mov	r27, r8
    2928:	01 90       	ld	r0, Z+
    292a:	0d 92       	st	X+, r0
    292c:	8a 95       	dec	r24
    292e:	e1 f7       	brne	.-8      	; 0x2928 <_Z13uhreinstellenv+0x65c>
    2930:	2d 88       	ldd	r2, Y+21	; 0x15
    2932:	3e 88       	ldd	r3, Y+22	; 0x16
    2934:	1b 2d       	mov	r17, r11
							for(uint8_t i = 0; i<buffersize;i++){
								oled.draw_ASCI(buffer[i],charsize*i,7*8);
    2936:	f1 01       	movw	r30, r2
    2938:	61 91       	ld	r22, Z+
    293a:	1f 01       	movw	r2, r30
    293c:	28 e3       	ldi	r18, 0x38	; 56
    293e:	41 2f       	mov	r20, r17
    2940:	80 ef       	ldi	r24, 0xF0	; 240
    2942:	92 e0       	ldi	r25, 0x02	; 2
    2944:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    2948:	1a 5f       	subi	r17, 0xFA	; 250
							rtc.Tag=0;
							rtc.Monat=0;
							rtc.Jahr=0;
							pos=3;
							buffersize=sprintf(buffer,"Tag falsch");
							for(uint8_t i = 0; i<buffersize;i++){
    294a:	1c 33       	cpi	r17, 0x3C	; 60
    294c:	a1 f7       	brne	.-24     	; 0x2936 <_Z13uhreinstellenv+0x66a>
    294e:	6c c0       	rjmp	.+216    	; 0x2a28 <_Z13uhreinstellenv+0x75c>
								oled.draw_ASCI(buffer[i],charsize*i,7*8);
							}
						}
					}
					else{
						if(rtc.Tag>=29){
    2950:	f2 01       	movw	r30, r4
    2952:	80 81       	ld	r24, Z
    2954:	8d 31       	cpi	r24, 0x1D	; 29
    2956:	00 f1       	brcs	.+64     	; 0x2998 <_Z13uhreinstellenv+0x6cc>
							rtc.Tag=0;
    2958:	10 82       	st	Z, r1
							rtc.Monat=0;
    295a:	f6 01       	movw	r30, r12
    295c:	10 82       	st	Z, r1
							rtc.Jahr=0;
    295e:	e7 e3       	ldi	r30, 0x37	; 55
    2960:	f7 e0       	ldi	r31, 0x07	; 7
    2962:	10 82       	st	Z, r1
							pos=3;
							buffersize=sprintf(buffer,"Tag falsch");
    2964:	8b e0       	ldi	r24, 0x0B	; 11
    2966:	ee ea       	ldi	r30, 0xAE	; 174
    2968:	f2 e0       	ldi	r31, 0x02	; 2
    296a:	a7 2d       	mov	r26, r7
    296c:	b8 2d       	mov	r27, r8
    296e:	01 90       	ld	r0, Z+
    2970:	0d 92       	st	X+, r0
    2972:	8a 95       	dec	r24
    2974:	e1 f7       	brne	.-8      	; 0x296e <_Z13uhreinstellenv+0x6a2>
    2976:	2d 88       	ldd	r2, Y+21	; 0x15
    2978:	3e 88       	ldd	r3, Y+22	; 0x16
    297a:	1b 2d       	mov	r17, r11
							for(uint8_t i = 0; i<buffersize;i++){
								oled.draw_ASCI(buffer[i],charsize*i,7*8);
    297c:	f1 01       	movw	r30, r2
    297e:	61 91       	ld	r22, Z+
    2980:	1f 01       	movw	r2, r30
    2982:	28 e3       	ldi	r18, 0x38	; 56
    2984:	41 2f       	mov	r20, r17
    2986:	80 ef       	ldi	r24, 0xF0	; 240
    2988:	92 e0       	ldi	r25, 0x02	; 2
    298a:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    298e:	1a 5f       	subi	r17, 0xFA	; 250
							rtc.Tag=0;
							rtc.Monat=0;
							rtc.Jahr=0;
							pos=3;
							buffersize=sprintf(buffer,"Tag falsch");
							for(uint8_t i = 0; i<buffersize;i++){
    2990:	1c 33       	cpi	r17, 0x3C	; 60
    2992:	a1 f7       	brne	.-24     	; 0x297c <_Z13uhreinstellenv+0x6b0>
    2994:	4e c0       	rjmp	.+156    	; 0x2a32 <_Z13uhreinstellenv+0x766>
						}
					}
				}
				break;
			default:
				pos++;
    2996:	93 94       	inc	r9
				break;
		}
		pos++;
    2998:	93 94       	inc	r9
	
	oled.clearFrame();
	char buffer[20];
	uint8_t buffersize;
	uint8_t pos=0;
	while(pos<11){
    299a:	fa e0       	ldi	r31, 0x0A	; 10
    299c:	f9 15       	cp	r31, r9
    299e:	08 f0       	brcs	.+2      	; 0x29a2 <_Z13uhreinstellenv+0x6d6>
    29a0:	d4 cc       	rjmp	.-1624   	; 0x234a <_Z13uhreinstellenv+0x7e>
				break;
		}
		pos++;
	}
	
	rtc.Sekunden		= 0;
    29a2:	10 92 33 07 	sts	0x0733, r1
	rtc.HundSekunden	= 0;
    29a6:	10 92 34 07 	sts	0x0734, r1
	oled.clearFrame();
    29aa:	80 ef       	ldi	r24, 0xF0	; 240
    29ac:	92 e0       	ldi	r25, 0x02	; 2
    29ae:	0e 94 ed 02 	call	0x5da	; 0x5da <_ZN7Display10clearFrameEv>
	rtc.ausgabedatumneu();
    29b2:	81 e2       	ldi	r24, 0x21	; 33
    29b4:	97 e0       	ldi	r25, 0x07	; 7
    29b6:	0e 94 58 1f 	call	0x3eb0	; 0x3eb0 <_ZN3RTC15ausgabedatumneuEv>
	rtc.ausgabezeitneu();
    29ba:	81 e2       	ldi	r24, 0x21	; 33
    29bc:	97 e0       	ldi	r25, 0x07	; 7
    29be:	0e 94 1f 1f 	call	0x3e3e	; 0x3e3e <_ZN3RTC14ausgabezeitneuEv>
	rtc.RTCstart();
    29c2:	81 e2       	ldi	r24, 0x21	; 33
    29c4:	97 e0       	ldi	r25, 0x07	; 7
    29c6:	0e 94 30 20 	call	0x4060	; 0x4060 <_ZN3RTC8RTCstartEv>
    29ca:	39 c0       	rjmp	.+114    	; 0x2a3e <_Z13uhreinstellenv+0x772>

		oled.sendFrame();
		oled.clearFrame();
		switch (pos) {
			case 0:
				rtc.Stunden=Tastatur.ZahlenausTastatur()*10;
    29cc:	e1 e3       	ldi	r30, 0x31	; 49
    29ce:	f7 e0       	ldi	r31, 0x07	; 7
    29d0:	80 83       	st	Z, r24
    29d2:	33 c0       	rjmp	.+102    	; 0x2a3a <_Z13uhreinstellenv+0x76e>
				if(rtc.Stunden>=24){
					rtc.Stunden=0;
					pos=-1;
    29d4:	99 24       	eor	r9, r9
    29d6:	9a 94       	dec	r9
    29d8:	30 c0       	rjmp	.+96     	; 0x2a3a <_Z13uhreinstellenv+0x76e>
				break;
			case 1:
				rtc.Stunden+=Tastatur.ZahlenausTastatur();
				if(rtc.Stunden>=24){
					rtc.Stunden=0;
					pos=-1;
    29da:	99 24       	eor	r9, r9
    29dc:	9a 94       	dec	r9
    29de:	2d c0       	rjmp	.+90     	; 0x2a3a <_Z13uhreinstellenv+0x76e>
				break;
			case 2:
				rtc.Minuten=Tastatur.ZahlenausTastatur()*10;
				if(rtc.Minuten>=60){
					rtc.Minuten=0;
					pos=1;
    29e0:	99 24       	eor	r9, r9
    29e2:	93 94       	inc	r9
    29e4:	2a c0       	rjmp	.+84     	; 0x2a3a <_Z13uhreinstellenv+0x76e>
				break;
			case 3:
				rtc.Minuten+=Tastatur.ZahlenausTastatur();
				if(rtc.Minuten>=60){
					rtc.Minuten=0;
					pos=1;
    29e6:	99 24       	eor	r9, r9
    29e8:	93 94       	inc	r9
    29ea:	27 c0       	rjmp	.+78     	; 0x2a3a <_Z13uhreinstellenv+0x76e>
				break;
			case 4:
				rtc.Tag=Tastatur.ZahlenausTastatur()*10;
				if(rtc.Tag>=32){
					rtc.Tag=0;
					pos=3;
    29ec:	0f 2e       	mov	r0, r31
    29ee:	f3 e0       	ldi	r31, 0x03	; 3
    29f0:	9f 2e       	mov	r9, r31
    29f2:	f0 2d       	mov	r31, r0
    29f4:	22 c0       	rjmp	.+68     	; 0x2a3a <_Z13uhreinstellenv+0x76e>
				break;
			case 5:
				rtc.Tag+=Tastatur.ZahlenausTastatur();
				if(rtc.Tag>=32){
					rtc.Tag=0;
					pos=3;
    29f6:	0f 2e       	mov	r0, r31
    29f8:	f3 e0       	ldi	r31, 0x03	; 3
    29fa:	9f 2e       	mov	r9, r31
    29fc:	f0 2d       	mov	r31, r0
    29fe:	1d c0       	rjmp	.+58     	; 0x2a3a <_Z13uhreinstellenv+0x76e>
				break;
			case 6:
				rtc.Monat=Tastatur.ZahlenausTastatur()*10;
				if(rtc.Monat>=13){
					rtc.Monat=0;
					pos=5;
    2a00:	0f 2e       	mov	r0, r31
    2a02:	f5 e0       	ldi	r31, 0x05	; 5
    2a04:	9f 2e       	mov	r9, r31
    2a06:	f0 2d       	mov	r31, r0
    2a08:	18 c0       	rjmp	.+48     	; 0x2a3a <_Z13uhreinstellenv+0x76e>
				}
				if(rtc.Monat==4||rtc.Monat==6||rtc.Monat==9||rtc.Monat==11){
					if(rtc.Tag>=31){
						rtc.Tag=0;
						rtc.Monat=0;
						pos=3;
    2a0a:	0f 2e       	mov	r0, r31
    2a0c:	f3 e0       	ldi	r31, 0x03	; 3
    2a0e:	9f 2e       	mov	r9, r31
    2a10:	f0 2d       	mov	r31, r0
    2a12:	13 c0       	rjmp	.+38     	; 0x2a3a <_Z13uhreinstellenv+0x76e>
				}
				else if(rtc.Monat==2){
					if(rtc.Tag>=30){
						rtc.Tag=0;
						rtc.Monat=0;
						pos=3;
    2a14:	0f 2e       	mov	r0, r31
    2a16:	f3 e0       	ldi	r31, 0x03	; 3
    2a18:	9f 2e       	mov	r9, r31
    2a1a:	f0 2d       	mov	r31, r0
    2a1c:	0e c0       	rjmp	.+28     	; 0x2a3a <_Z13uhreinstellenv+0x76e>
				break;
			case 8:
				rtc.Jahr=Tastatur.ZahlenausTastatur()*10;
				if(rtc.Jahr>=50){
					rtc.Jahr=0;
					pos=7;
    2a1e:	0f 2e       	mov	r0, r31
    2a20:	f7 e0       	ldi	r31, 0x07	; 7
    2a22:	9f 2e       	mov	r9, r31
    2a24:	f0 2d       	mov	r31, r0
    2a26:	09 c0       	rjmp	.+18     	; 0x2a3a <_Z13uhreinstellenv+0x76e>
						if (rtc.Tag>=30)
						{
							rtc.Tag=0;
							rtc.Monat=0;
							rtc.Jahr=0;
							pos=3;
    2a28:	0f 2e       	mov	r0, r31
    2a2a:	f3 e0       	ldi	r31, 0x03	; 3
    2a2c:	9f 2e       	mov	r9, r31
    2a2e:	f0 2d       	mov	r31, r0
    2a30:	04 c0       	rjmp	.+8      	; 0x2a3a <_Z13uhreinstellenv+0x76e>
					else{
						if(rtc.Tag>=29){
							rtc.Tag=0;
							rtc.Monat=0;
							rtc.Jahr=0;
							pos=3;
    2a32:	0f 2e       	mov	r0, r31
    2a34:	f3 e0       	ldi	r31, 0x03	; 3
    2a36:	9f 2e       	mov	r9, r31
    2a38:	f0 2d       	mov	r31, r0
				break;
			default:
				pos++;
				break;
		}
		pos++;
    2a3a:	93 94       	inc	r9
    2a3c:	86 cc       	rjmp	.-1780   	; 0x234a <_Z13uhreinstellenv+0x7e>
	rtc.HundSekunden	= 0;
	oled.clearFrame();
	rtc.ausgabedatumneu();
	rtc.ausgabezeitneu();
	rtc.RTCstart();
}
    2a3e:	66 96       	adiw	r28, 0x16	; 22
    2a40:	0f b6       	in	r0, 0x3f	; 63
    2a42:	f8 94       	cli
    2a44:	de bf       	out	0x3e, r29	; 62
    2a46:	0f be       	out	0x3f, r0	; 63
    2a48:	cd bf       	out	0x3d, r28	; 61
    2a4a:	df 91       	pop	r29
    2a4c:	cf 91       	pop	r28
    2a4e:	1f 91       	pop	r17
    2a50:	0f 91       	pop	r16
    2a52:	ff 90       	pop	r15
    2a54:	ef 90       	pop	r14
    2a56:	df 90       	pop	r13
    2a58:	cf 90       	pop	r12
    2a5a:	bf 90       	pop	r11
    2a5c:	af 90       	pop	r10
    2a5e:	9f 90       	pop	r9
    2a60:	8f 90       	pop	r8
    2a62:	7f 90       	pop	r7
    2a64:	6f 90       	pop	r6
    2a66:	5f 90       	pop	r5
    2a68:	4f 90       	pop	r4
    2a6a:	3f 90       	pop	r3
    2a6c:	2f 90       	pop	r2
    2a6e:	08 95       	ret

00002a70 <__vector_9>:
uint8_t pos;		//Handler fuer die Einganbe von Zahlen

//Ausgelagerte Sammlung der einzelnen Seitenlayouts
#include "Seiten.h"

ISR(TIMER2_OVF_vect){	//Vektor fuer die RTC
    2a70:	1f 92       	push	r1
    2a72:	0f 92       	push	r0
    2a74:	0f b6       	in	r0, 0x3f	; 63
    2a76:	0f 92       	push	r0
    2a78:	11 24       	eor	r1, r1
    2a7a:	8f 93       	push	r24
    2a7c:	ef 93       	push	r30
    2a7e:	ff 93       	push	r31
	TCNT2=TIMER2RTCTIME;
    2a80:	10 92 b2 00 	sts	0x00B2, r1
	rtc.Sekunden++;
    2a84:	e3 e3       	ldi	r30, 0x33	; 51
    2a86:	f7 e0       	ldi	r31, 0x07	; 7
    2a88:	80 81       	ld	r24, Z
    2a8a:	8f 5f       	subi	r24, 0xFF	; 255
    2a8c:	80 83       	st	Z, r24
	rtc.interupts|= (1<<sekundeninterupt);
    2a8e:	e8 e3       	ldi	r30, 0x38	; 56
    2a90:	f7 e0       	ldi	r31, 0x07	; 7
    2a92:	80 81       	ld	r24, Z
    2a94:	82 60       	ori	r24, 0x02	; 2
    2a96:	80 83       	st	Z, r24
}
    2a98:	ff 91       	pop	r31
    2a9a:	ef 91       	pop	r30
    2a9c:	8f 91       	pop	r24
    2a9e:	0f 90       	pop	r0
    2aa0:	0f be       	out	0x3f, r0	; 63
    2aa2:	0f 90       	pop	r0
    2aa4:	1f 90       	pop	r1
    2aa6:	18 95       	reti

00002aa8 <_Z15geschwindigkeitf>:

#define zeitproachtzaehlungen 0.001024
#define zaehlungenprozeiteinheit 8.0

double geschw;
void geschwindigkeit(float radius){
    2aa8:	cf 92       	push	r12
    2aaa:	df 92       	push	r13
    2aac:	ef 92       	push	r14
    2aae:	ff 92       	push	r15
    2ab0:	0f 93       	push	r16
    2ab2:	1f 93       	push	r17
    2ab4:	cf 93       	push	r28
    2ab6:	df 93       	push	r29
	//uint16_t zaehlungen = (TCNT1H<<8) | (TCNT1L);
	uint16_t zaehlungen = TCNT1;
    2ab8:	c4 e8       	ldi	r28, 0x84	; 132
    2aba:	d0 e0       	ldi	r29, 0x00	; 0
    2abc:	08 81       	ld	r16, Y
    2abe:	19 81       	ldd	r17, Y+1	; 0x01
	geschw = (radius/100.0)*2*M_PI/((zaehlungen/zaehlungenprozeiteinheit)*zeitproachtzaehlungen);
    2ac0:	20 e0       	ldi	r18, 0x00	; 0
    2ac2:	30 e0       	ldi	r19, 0x00	; 0
    2ac4:	48 ec       	ldi	r20, 0xC8	; 200
    2ac6:	52 e4       	ldi	r21, 0x42	; 66
    2ac8:	0e 94 3a 21 	call	0x4274	; 0x4274 <__divsf3>
    2acc:	9b 01       	movw	r18, r22
    2ace:	ac 01       	movw	r20, r24
    2ad0:	0e 94 6d 20 	call	0x40da	; 0x40da <__addsf3>
    2ad4:	2b ed       	ldi	r18, 0xDB	; 219
    2ad6:	3f e0       	ldi	r19, 0x0F	; 15
    2ad8:	49 e4       	ldi	r20, 0x49	; 73
    2ada:	50 e4       	ldi	r21, 0x40	; 64
    2adc:	0e 94 33 23 	call	0x4666	; 0x4666 <__mulsf3>
    2ae0:	6b 01       	movw	r12, r22
    2ae2:	7c 01       	movw	r14, r24
    2ae4:	b8 01       	movw	r22, r16
    2ae6:	80 e0       	ldi	r24, 0x00	; 0
    2ae8:	90 e0       	ldi	r25, 0x00	; 0
    2aea:	0e 94 d3 21 	call	0x43a6	; 0x43a6 <__floatunsisf>
    2aee:	20 e0       	ldi	r18, 0x00	; 0
    2af0:	30 e0       	ldi	r19, 0x00	; 0
    2af2:	40 e0       	ldi	r20, 0x00	; 0
    2af4:	5e e3       	ldi	r21, 0x3E	; 62
    2af6:	0e 94 33 23 	call	0x4666	; 0x4666 <__mulsf3>
    2afa:	2d eb       	ldi	r18, 0xBD	; 189
    2afc:	37 e3       	ldi	r19, 0x37	; 55
    2afe:	46 e8       	ldi	r20, 0x86	; 134
    2b00:	5a e3       	ldi	r21, 0x3A	; 58
    2b02:	0e 94 33 23 	call	0x4666	; 0x4666 <__mulsf3>
    2b06:	9b 01       	movw	r18, r22
    2b08:	ac 01       	movw	r20, r24
    2b0a:	c7 01       	movw	r24, r14
    2b0c:	b6 01       	movw	r22, r12
    2b0e:	0e 94 3a 21 	call	0x4274	; 0x4274 <__divsf3>
    2b12:	60 93 d2 02 	sts	0x02D2, r22
    2b16:	70 93 d3 02 	sts	0x02D3, r23
    2b1a:	80 93 d4 02 	sts	0x02D4, r24
    2b1e:	90 93 d5 02 	sts	0x02D5, r25
	//TCNT1H = 0;
	//TCNT1L = 0;
	TCNT1 = 0;
    2b22:	19 82       	std	Y+1, r1	; 0x01
    2b24:	18 82       	st	Y, r1
}
    2b26:	df 91       	pop	r29
    2b28:	cf 91       	pop	r28
    2b2a:	1f 91       	pop	r17
    2b2c:	0f 91       	pop	r16
    2b2e:	ff 90       	pop	r15
    2b30:	ef 90       	pop	r14
    2b32:	df 90       	pop	r13
    2b34:	cf 90       	pop	r12
    2b36:	08 95       	ret

00002b38 <_Z13reed_debouncePVhh>:

uint8_t reed_debounce(volatile uint8_t *port, uint8_t pin)
{
	if ( !(*port & (1 << pin)) )
    2b38:	fc 01       	movw	r30, r24
    2b3a:	20 81       	ld	r18, Z
    2b3c:	30 e0       	ldi	r19, 0x00	; 0
    2b3e:	06 2e       	mov	r0, r22
    2b40:	02 c0       	rjmp	.+4      	; 0x2b46 <_Z13reed_debouncePVhh+0xe>
    2b42:	35 95       	asr	r19
    2b44:	27 95       	ror	r18
    2b46:	0a 94       	dec	r0
    2b48:	e2 f7       	brpl	.-8      	; 0x2b42 <_Z13reed_debouncePVhh+0xa>
    2b4a:	20 fd       	sbrc	r18, 0
    2b4c:	15 c0       	rjmp	.+42     	; 0x2b78 <_Z13reed_debouncePVhh+0x40>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2b4e:	f5 e8       	ldi	r31, 0x85	; 133
    2b50:	fa 95       	dec	r31
    2b52:	f1 f7       	brne	.-4      	; 0x2b50 <_Z13reed_debouncePVhh+0x18>
    2b54:	00 00       	nop
	{
		/* Pin wurde auf Masse gezogen, ms warten   */
		_delay_us(50);
		//_delay_us(50);
		if ( (*port & (1 << pin)) )
    2b56:	fc 01       	movw	r30, r24
    2b58:	80 81       	ld	r24, Z
    2b5a:	90 e0       	ldi	r25, 0x00	; 0
    2b5c:	9c 01       	movw	r18, r24
    2b5e:	02 c0       	rjmp	.+4      	; 0x2b64 <_Z13reed_debouncePVhh+0x2c>
    2b60:	35 95       	asr	r19
    2b62:	27 95       	ror	r18
    2b64:	6a 95       	dec	r22
    2b66:	e2 f7       	brpl	.-8      	; 0x2b60 <_Z13reed_debouncePVhh+0x28>
    2b68:	20 ff       	sbrs	r18, 0
    2b6a:	08 c0       	rjmp	.+16     	; 0x2b7c <_Z13reed_debouncePVhh+0x44>
    2b6c:	32 e0       	ldi	r19, 0x02	; 2
    2b6e:	3a 95       	dec	r19
    2b70:	f1 f7       	brne	.-4      	; 0x2b6e <_Z13reed_debouncePVhh+0x36>
    2b72:	00 c0       	rjmp	.+0      	; 0x2b74 <_Z13reed_debouncePVhh+0x3c>
		{
			/* Anwender Zeit zum Loslassen des Tasters geben */
			_delay_us(1);
			return 1;
    2b74:	81 e0       	ldi	r24, 0x01	; 1
    2b76:	08 95       	ret
		}
	}
	return 0;
    2b78:	80 e0       	ldi	r24, 0x00	; 0
    2b7a:	08 95       	ret
    2b7c:	80 e0       	ldi	r24, 0x00	; 0
}
    2b7e:	08 95       	ret

00002b80 <_Z15initialisierungv>:
    }
}

void initialisierung(){
	//nullen der Flagregister
	rtc.interupts=0;
    2b80:	10 92 38 07 	sts	0x0738, r1
	anzeige=0;
    2b84:	10 92 d8 02 	sts	0x02D8, r1
    2b88:	10 92 d7 02 	sts	0x02D7, r1
	pos=0;
    2b8c:	10 92 d6 02 	sts	0x02D6, r1
	//initialisieren des Zaehler fuer die Winkelgeschw sowie den Timer
	geschw=0;
    2b90:	10 92 d2 02 	sts	0x02D2, r1
    2b94:	10 92 d3 02 	sts	0x02D3, r1
    2b98:	10 92 d4 02 	sts	0x02D4, r1
    2b9c:	10 92 d5 02 	sts	0x02D5, r1
	TCNT1=0;
    2ba0:	10 92 85 00 	sts	0x0085, r1
    2ba4:	10 92 84 00 	sts	0x0084, r1
	//Ausgaenge und Eingaenge einstellen
	DDRD = (1<<PIND0) | (1<<PIND1) | (1<<PIND2) | (1<<PIND3);	//Pins zur Ausgabe
    2ba8:	8f e0       	ldi	r24, 0x0F	; 15
    2baa:	8a b9       	out	0x0a, r24	; 10
	DDRD &= ~((1<<PIND4) | (1<<PIND5) | (1<<PIND6));			//Restliche Pins als Eingaenge schalten
    2bac:	8a b1       	in	r24, 0x0a	; 10
    2bae:	8f 78       	andi	r24, 0x8F	; 143
    2bb0:	8a b9       	out	0x0a, r24	; 10
	//Eingang fuer den Reedkontak schalten mit internem Pullup
	DDRC &= ~((1<<PORTC3)|(1<<PORTC2));
    2bb2:	87 b1       	in	r24, 0x07	; 7
    2bb4:	83 7f       	andi	r24, 0xF3	; 243
    2bb6:	87 b9       	out	0x07, r24	; 7
	PORTC |= (1<<PORTC3) | (1<<PORTC2);
    2bb8:	88 b1       	in	r24, 0x08	; 8
    2bba:	8c 60       	ori	r24, 0x0C	; 12
    2bbc:	88 b9       	out	0x08, r24	; 8
	//I2C Interface
	//twi_init();
	//Display
	oled.InitializeDisplay();
    2bbe:	80 ef       	ldi	r24, 0xF0	; 240
    2bc0:	92 e0       	ldi	r25, 0x02	; 2
    2bc2:	0e 94 14 03 	call	0x628	; 0x628 <_ZN7Display17InitializeDisplayEv>
	//initialisierung wird im konstruktor vorgenommen
	oled.clearFrame();
    2bc6:	80 ef       	ldi	r24, 0xF0	; 240
    2bc8:	92 e0       	ldi	r25, 0x02	; 2
    2bca:	0e 94 ed 02 	call	0x5da	; 0x5da <_ZN7Display10clearFrameEv>
	//HMC5883L initialisieren
	//kompass.initialize_HMC5883L();
	//initialisierung wird im Konstruktor erledigt
	
	//ADC Initialisieren auf CH0
	ADMUX = (1<<REFS0);
    2bce:	80 e4       	ldi	r24, 0x40	; 64
    2bd0:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA = (1<<ADPS1) | (1<<ADPS0);
    2bd4:	ea e7       	ldi	r30, 0x7A	; 122
    2bd6:	f0 e0       	ldi	r31, 0x00	; 0
    2bd8:	83 e0       	ldi	r24, 0x03	; 3
    2bda:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADEN);
    2bdc:	80 81       	ld	r24, Z
    2bde:	80 68       	ori	r24, 0x80	; 128
    2be0:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);
    2be2:	80 81       	ld	r24, Z
    2be4:	80 64       	ori	r24, 0x40	; 64
    2be6:	80 83       	st	Z, r24
	while (ADCSRA & (1<<ADSC) ) {
    2be8:	80 81       	ld	r24, Z
    2bea:	86 fd       	sbrc	r24, 6
    2bec:	fd cf       	rjmp	.-6      	; 0x2be8 <_Z15initialisierungv+0x68>
	}
	(void) ADCW;
    2bee:	80 91 78 00 	lds	r24, 0x0078
    2bf2:	90 91 79 00 	lds	r25, 0x0079
	//Wilkommensanzeige
	willkommenpage();
    2bf6:	0e 94 a2 08 	call	0x1144	; 0x1144 <_Z14willkommenpagev>
	//Uhreinstellungen
	//uhreinstellen();
	//*************************************************
	//Nur Test, damit es schneller geht beim Start
	rtc.dummyeinst();
    2bfa:	81 e2       	ldi	r24, 0x21	; 33
    2bfc:	97 e0       	ldi	r25, 0x07	; 7
    2bfe:	0e 94 1a 20 	call	0x4034	; 0x4034 <_ZN3RTC10dummyeinstEv>
	//*********************************
	rtc.RTCstart();
    2c02:	81 e2       	ldi	r24, 0x21	; 33
    2c04:	97 e0       	ldi	r25, 0x07	; 7
    2c06:	0e 94 30 20 	call	0x4060	; 0x4060 <_ZN3RTC8RTCstartEv>
	//ausgabe starten
	anzeige|=(1<<Uhrflag);
    2c0a:	80 91 d7 02 	lds	r24, 0x02D7
    2c0e:	90 91 d8 02 	lds	r25, 0x02D8
    2c12:	81 60       	ori	r24, 0x01	; 1
    2c14:	90 93 d8 02 	sts	0x02D8, r25
    2c18:	80 93 d7 02 	sts	0x02D7, r24
	sei();
    2c1c:	78 94       	sei
    2c1e:	08 95       	ret

00002c20 <_Z19maininterupthandlerv>:
	//interupt dierekt aus der rtc
	//if((rtc.interupts & (1<<hundinterupt))){
		//rtc.zeit();
		//rtc.interupts&=~(1<<hundinterupt);
	//}
	if ((anzeige&(1<<Fahradflag)))
    2c20:	80 91 d7 02 	lds	r24, 0x02D7
    2c24:	81 ff       	sbrs	r24, 1
    2c26:	0d c0       	rjmp	.+26     	; 0x2c42 <_Z19maininterupthandlerv+0x22>
	{
		//debounce Funktion fuer den Reedswitch
		if (reed_debounce(&PINC,PINC3))
    2c28:	63 e0       	ldi	r22, 0x03	; 3
    2c2a:	86 e2       	ldi	r24, 0x26	; 38
    2c2c:	90 e0       	ldi	r25, 0x00	; 0
    2c2e:	0e 94 9c 15 	call	0x2b38	; 0x2b38 <_Z13reed_debouncePVhh>
    2c32:	88 23       	and	r24, r24
    2c34:	31 f0       	breq	.+12     	; 0x2c42 <_Z19maininterupthandlerv+0x22>
		{
			geschwindigkeit(14.0*2.54);
    2c36:	60 e7       	ldi	r22, 0x70	; 112
    2c38:	7d e3       	ldi	r23, 0x3D	; 61
    2c3a:	8e e0       	ldi	r24, 0x0E	; 14
    2c3c:	92 e4       	ldi	r25, 0x42	; 66
    2c3e:	0e 94 54 15 	call	0x2aa8	; 0x2aa8 <_Z15geschwindigkeitf>
    2c42:	08 95       	ret

00002c44 <_Z14anzeigehandlerv>:
	}
}

void anzeigehandler(){
	//Handler fuer 1Hz Flag
	if ((rtc.interupts & (1<<sekundeninterupt)))
    2c44:	80 91 38 07 	lds	r24, 0x0738
    2c48:	81 ff       	sbrs	r24, 1
    2c4a:	eb c0       	rjmp	.+470    	; 0x2e22 <_Z14anzeigehandlerv+0x1de>
	{
		rtc.zeit();
    2c4c:	81 e2       	ldi	r24, 0x21	; 33
    2c4e:	97 e0       	ldi	r25, 0x07	; 7
    2c50:	0e 94 f5 1f 	call	0x3fea	; 0x3fea <_ZN3RTC4zeitEv>
		//Handler fuer die Anzeige der Seiten
		//Die einzelnen Funktionen beschreiben nur den Framebuffer und nicht dierekt das Display
		if ((anzeige&(1<<menueflag)) && (anzeige&(1<<Uhrflag)))
    2c54:	80 91 d7 02 	lds	r24, 0x02D7
    2c58:	90 91 d8 02 	lds	r25, 0x02D8
    2c5c:	9c 01       	movw	r18, r24
    2c5e:	21 70       	andi	r18, 0x01	; 1
    2c60:	30 72       	andi	r19, 0x20	; 32
    2c62:	21 30       	cpi	r18, 0x01	; 1
    2c64:	30 42       	sbci	r19, 0x20	; 32
    2c66:	61 f4       	brne	.+24     	; 0x2c80 <_Z14anzeigehandlerv+0x3c>
		{
			menue_uhr();
    2c68:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <_Z9menue_uhrv>
			anzeige|=(1<<refreshdisplay);
    2c6c:	80 91 d7 02 	lds	r24, 0x02D7
    2c70:	90 91 d8 02 	lds	r25, 0x02D8
    2c74:	90 68       	ori	r25, 0x80	; 128
    2c76:	90 93 d8 02 	sts	0x02D8, r25
    2c7a:	80 93 d7 02 	sts	0x02D7, r24
    2c7e:	cc c0       	rjmp	.+408    	; 0x2e18 <_Z14anzeigehandlerv+0x1d4>
    2c80:	9c 01       	movw	r18, r24
    2c82:	28 70       	andi	r18, 0x08	; 8
    2c84:	30 72       	andi	r19, 0x20	; 32
		}
		else if ((anzeige&(1<<menueflag)) && (anzeige&(1<<Einstellungsflag)))
    2c86:	28 30       	cpi	r18, 0x08	; 8
    2c88:	30 42       	sbci	r19, 0x20	; 32
    2c8a:	61 f4       	brne	.+24     	; 0x2ca4 <_Z14anzeigehandlerv+0x60>
		{
			menue_einst();
    2c8c:	0e 94 8f 0b 	call	0x171e	; 0x171e <_Z11menue_einstv>
			anzeige|=(1<<refreshdisplay);
    2c90:	80 91 d7 02 	lds	r24, 0x02D7
    2c94:	90 91 d8 02 	lds	r25, 0x02D8
    2c98:	90 68       	ori	r25, 0x80	; 128
    2c9a:	90 93 d8 02 	sts	0x02D8, r25
    2c9e:	80 93 d7 02 	sts	0x02D7, r24
    2ca2:	ba c0       	rjmp	.+372    	; 0x2e18 <_Z14anzeigehandlerv+0x1d4>
		}
		else if ((anzeige&(1<<menueflag)))
    2ca4:	95 ff       	sbrs	r25, 5
    2ca6:	0c c0       	rjmp	.+24     	; 0x2cc0 <_Z14anzeigehandlerv+0x7c>
		{
			menue_haupt();
    2ca8:	0e 94 c1 0a 	call	0x1582	; 0x1582 <_Z11menue_hauptv>
			anzeige|=(1<<refreshdisplay);
    2cac:	80 91 d7 02 	lds	r24, 0x02D7
    2cb0:	90 91 d8 02 	lds	r25, 0x02D8
    2cb4:	90 68       	ori	r25, 0x80	; 128
    2cb6:	90 93 d8 02 	sts	0x02D8, r25
    2cba:	80 93 d7 02 	sts	0x02D7, r24
    2cbe:	ac c0       	rjmp	.+344    	; 0x2e18 <_Z14anzeigehandlerv+0x1d4>
		}
		else if ((anzeige&(1<<Kompasgaineinstellenflag)))
    2cc0:	85 ff       	sbrs	r24, 5
    2cc2:	0c c0       	rjmp	.+24     	; 0x2cdc <_Z14anzeigehandlerv+0x98>
		{
			Gaineinstellen();
    2cc4:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <_Z14Gaineinstellenv>
			anzeige|=(1<<refreshdisplay);
    2cc8:	80 91 d7 02 	lds	r24, 0x02D7
    2ccc:	90 91 d8 02 	lds	r25, 0x02D8
    2cd0:	90 68       	ori	r25, 0x80	; 128
    2cd2:	90 93 d8 02 	sts	0x02D8, r25
    2cd6:	80 93 d7 02 	sts	0x02D7, r24
    2cda:	9e c0       	rjmp	.+316    	; 0x2e18 <_Z14anzeigehandlerv+0x1d4>
		}
		else if ((anzeige&(1<<Uhrflag)))
    2cdc:	80 ff       	sbrs	r24, 0
    2cde:	0c c0       	rjmp	.+24     	; 0x2cf8 <_Z14anzeigehandlerv+0xb4>
		{
			uhranzeigen();
    2ce0:	0e 94 83 0c 	call	0x1906	; 0x1906 <_Z11uhranzeigenv>
			//Pressuresensor();
			anzeige|=(1<<refreshdisplay);
    2ce4:	80 91 d7 02 	lds	r24, 0x02D7
    2ce8:	90 91 d8 02 	lds	r25, 0x02D8
    2cec:	90 68       	ori	r25, 0x80	; 128
    2cee:	90 93 d8 02 	sts	0x02D8, r25
    2cf2:	80 93 d7 02 	sts	0x02D7, r24
    2cf6:	90 c0       	rjmp	.+288    	; 0x2e18 <_Z14anzeigehandlerv+0x1d4>
		}
		else if ((anzeige&(1<<Kompasflag)))
    2cf8:	82 ff       	sbrs	r24, 2
    2cfa:	10 c0       	rjmp	.+32     	; 0x2d1c <_Z14anzeigehandlerv+0xd8>
		{
			anzeige_kompass(kompass.angle());
    2cfc:	89 e3       	ldi	r24, 0x39	; 57
    2cfe:	97 e0       	ldi	r25, 0x07	; 7
    2d00:	0e 94 25 1c 	call	0x384a	; 0x384a <_ZN7Kompass5angleEv>
    2d04:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <_Z15anzeige_kompassd>
			anzeige|=(1<<refreshdisplay);
    2d08:	80 91 d7 02 	lds	r24, 0x02D7
    2d0c:	90 91 d8 02 	lds	r25, 0x02D8
    2d10:	90 68       	ori	r25, 0x80	; 128
    2d12:	90 93 d8 02 	sts	0x02D8, r25
    2d16:	80 93 d7 02 	sts	0x02D7, r24
    2d1a:	7e c0       	rjmp	.+252    	; 0x2e18 <_Z14anzeigehandlerv+0x1d4>
		}
		else if ((anzeige&(1<<Fahradflag)))
    2d1c:	81 ff       	sbrs	r24, 1
    2d1e:	22 c0       	rjmp	.+68     	; 0x2d64 <_Z14anzeigehandlerv+0x120>
		{
			//fahradschirm(12.3,kompass.angle());
			fahradschirm(geschw,kompass.angle());
    2d20:	89 e3       	ldi	r24, 0x39	; 57
    2d22:	97 e0       	ldi	r25, 0x07	; 7
    2d24:	0e 94 25 1c 	call	0x384a	; 0x384a <_ZN7Kompass5angleEv>
    2d28:	9b 01       	movw	r18, r22
    2d2a:	ac 01       	movw	r20, r24
    2d2c:	60 91 d2 02 	lds	r22, 0x02D2
    2d30:	70 91 d3 02 	lds	r23, 0x02D3
    2d34:	80 91 d4 02 	lds	r24, 0x02D4
    2d38:	90 91 d5 02 	lds	r25, 0x02D5
    2d3c:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <_Z12fahradschirmdd>
			geschw=0;
    2d40:	10 92 d2 02 	sts	0x02D2, r1
    2d44:	10 92 d3 02 	sts	0x02D3, r1
    2d48:	10 92 d4 02 	sts	0x02D4, r1
    2d4c:	10 92 d5 02 	sts	0x02D5, r1
			anzeige|=(1<<refreshdisplay);
    2d50:	80 91 d7 02 	lds	r24, 0x02D7
    2d54:	90 91 d8 02 	lds	r25, 0x02D8
    2d58:	90 68       	ori	r25, 0x80	; 128
    2d5a:	90 93 d8 02 	sts	0x02D8, r25
    2d5e:	80 93 d7 02 	sts	0x02D7, r24
    2d62:	5a c0       	rjmp	.+180    	; 0x2e18 <_Z14anzeigehandlerv+0x1d4>
    2d64:	9c 01       	movw	r18, r24
    2d66:	28 74       	andi	r18, 0x48	; 72
    2d68:	33 27       	eor	r19, r19
		}
		else if ((anzeige&(1<<Einstellungsflag)) && (anzeige&(1<<Timerflag)))
    2d6a:	28 34       	cpi	r18, 0x48	; 72
    2d6c:	31 05       	cpc	r19, r1
    2d6e:	61 f4       	brne	.+24     	; 0x2d88 <_Z14anzeigehandlerv+0x144>
		{
			timerseite();
    2d70:	0e 94 54 0f 	call	0x1ea8	; 0x1ea8 <_Z10timerseitev>
			anzeige|=(1<<refreshdisplay);
    2d74:	80 91 d7 02 	lds	r24, 0x02D7
    2d78:	90 91 d8 02 	lds	r25, 0x02D8
    2d7c:	90 68       	ori	r25, 0x80	; 128
    2d7e:	90 93 d8 02 	sts	0x02D8, r25
    2d82:	80 93 d7 02 	sts	0x02D7, r24
    2d86:	48 c0       	rjmp	.+144    	; 0x2e18 <_Z14anzeigehandlerv+0x1d4>
		}
		else if ((anzeige&(1<<Stoppuhrflag)))
    2d88:	87 ff       	sbrs	r24, 7
    2d8a:	17 c0       	rjmp	.+46     	; 0x2dba <_Z14anzeigehandlerv+0x176>
		{
			if ((anzeige&(1<<Einstellungsflag)))
    2d8c:	83 ff       	sbrs	r24, 3
    2d8e:	09 c0       	rjmp	.+18     	; 0x2da2 <_Z14anzeigehandlerv+0x15e>
			{
				stoppuhr.Sekunden++;
    2d90:	e3 e0       	ldi	r30, 0x03	; 3
    2d92:	f7 e0       	ldi	r31, 0x07	; 7
    2d94:	80 81       	ld	r24, Z
    2d96:	8f 5f       	subi	r24, 0xFF	; 255
    2d98:	80 83       	st	Z, r24
				stoppuhr.zeit();
    2d9a:	81 ef       	ldi	r24, 0xF1	; 241
    2d9c:	96 e0       	ldi	r25, 0x06	; 6
    2d9e:	0e 94 f5 1f 	call	0x3fea	; 0x3fea <_ZN3RTC4zeitEv>
			}
			Stoppuhrseite();
    2da2:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <_Z13Stoppuhrseitev>
			anzeige|=(1<<refreshdisplay);
    2da6:	80 91 d7 02 	lds	r24, 0x02D7
    2daa:	90 91 d8 02 	lds	r25, 0x02D8
    2dae:	90 68       	ori	r25, 0x80	; 128
    2db0:	90 93 d8 02 	sts	0x02D8, r25
    2db4:	80 93 d7 02 	sts	0x02D7, r24
    2db8:	2f c0       	rjmp	.+94     	; 0x2e18 <_Z14anzeigehandlerv+0x1d4>
		}
		else if ((anzeige&(1<<Timerflag)))
    2dba:	86 ff       	sbrs	r24, 6
    2dbc:	20 c0       	rjmp	.+64     	; 0x2dfe <_Z14anzeigehandlerv+0x1ba>
		{
			zaehler.Sekunden--;
    2dbe:	eb e1       	ldi	r30, 0x1B	; 27
    2dc0:	f7 e0       	ldi	r31, 0x07	; 7
    2dc2:	80 81       	ld	r24, Z
    2dc4:	81 50       	subi	r24, 0x01	; 1
    2dc6:	80 83       	st	Z, r24
			if(zaehler.timer()){
    2dc8:	89 e0       	ldi	r24, 0x09	; 9
    2dca:	97 e0       	ldi	r25, 0x07	; 7
    2dcc:	0e 94 4f 20 	call	0x409e	; 0x409e <_ZN3RTC5timerEv>
    2dd0:	88 23       	and	r24, r24
    2dd2:	49 f0       	breq	.+18     	; 0x2de6 <_Z14anzeigehandlerv+0x1a2>
				anzeige|=(1<<blinkflag);
    2dd4:	80 91 d7 02 	lds	r24, 0x02D7
    2dd8:	90 91 d8 02 	lds	r25, 0x02D8
    2ddc:	90 64       	ori	r25, 0x40	; 64
    2dde:	90 93 d8 02 	sts	0x02D8, r25
    2de2:	80 93 d7 02 	sts	0x02D7, r24
			}
			timerseite();
    2de6:	0e 94 54 0f 	call	0x1ea8	; 0x1ea8 <_Z10timerseitev>
			anzeige|=(1<<refreshdisplay);
    2dea:	80 91 d7 02 	lds	r24, 0x02D7
    2dee:	90 91 d8 02 	lds	r25, 0x02D8
    2df2:	90 68       	ori	r25, 0x80	; 128
    2df4:	90 93 d8 02 	sts	0x02D8, r25
    2df8:	80 93 d7 02 	sts	0x02D7, r24
    2dfc:	0d c0       	rjmp	.+26     	; 0x2e18 <_Z14anzeigehandlerv+0x1d4>
		}
		else if ((anzeige&(1<<Druckflag)))
    2dfe:	91 ff       	sbrs	r25, 1
    2e00:	0b c0       	rjmp	.+22     	; 0x2e18 <_Z14anzeigehandlerv+0x1d4>
		{
			Pressuresensor();
    2e02:	0e 94 73 10 	call	0x20e6	; 0x20e6 <_Z14Pressuresensorv>
			anzeige |= (1<<refreshdisplay);
    2e06:	80 91 d7 02 	lds	r24, 0x02D7
    2e0a:	90 91 d8 02 	lds	r25, 0x02D8
    2e0e:	90 68       	ori	r25, 0x80	; 128
    2e10:	90 93 d8 02 	sts	0x02D8, r25
    2e14:	80 93 d7 02 	sts	0x02D7, r24
		}
		rtc.interupts&=~(1<<sekundeninterupt);
    2e18:	e8 e3       	ldi	r30, 0x38	; 56
    2e1a:	f7 e0       	ldi	r31, 0x07	; 7
    2e1c:	80 81       	ld	r24, Z
    2e1e:	8d 7f       	andi	r24, 0xFD	; 253
    2e20:	80 83       	st	Z, r24
	}
	//neuen Framebuffer an das Dispay senden
	if ((anzeige&(1<<refreshdisplay)))
    2e22:	80 91 d7 02 	lds	r24, 0x02D7
    2e26:	90 91 d8 02 	lds	r25, 0x02D8
    2e2a:	99 23       	and	r25, r25
    2e2c:	14 f5       	brge	.+68     	; 0x2e72 <_Z14anzeigehandlerv+0x22e>
	{
		oled.sendFrame();
    2e2e:	80 ef       	ldi	r24, 0xF0	; 240
    2e30:	92 e0       	ldi	r25, 0x02	; 2
    2e32:	0e 94 93 03 	call	0x726	; 0x726 <_ZN7Display9sendFrameEv>
		if ((anzeige&(1<<blinkflag)))
    2e36:	80 91 d7 02 	lds	r24, 0x02D7
    2e3a:	90 91 d8 02 	lds	r25, 0x02D8
    2e3e:	96 ff       	sbrs	r25, 6
    2e40:	0f c0       	rjmp	.+30     	; 0x2e60 <_Z14anzeigehandlerv+0x21c>
		{
			oled.invert(rtc.Sekunden%2);
    2e42:	60 91 33 07 	lds	r22, 0x0733
    2e46:	61 70       	andi	r22, 0x01	; 1
    2e48:	80 ef       	ldi	r24, 0xF0	; 240
    2e4a:	92 e0       	ldi	r25, 0x02	; 2
    2e4c:	0e 94 89 03 	call	0x712	; 0x712 <_ZN7Display6invertEh>
			LED.toggle();
    2e50:	8d ee       	ldi	r24, 0xED	; 237
    2e52:	92 e0       	ldi	r25, 0x02	; 2
    2e54:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <_ZN6Output6toggleEv>
			Vibrationsmotor.on();
    2e58:	8b ee       	ldi	r24, 0xEB	; 235
    2e5a:	92 e0       	ldi	r25, 0x02	; 2
    2e5c:	0e 94 e2 1c 	call	0x39c4	; 0x39c4 <_ZN6Output2onEv>
		}
		anzeige&=~(1<<refreshdisplay);
    2e60:	80 91 d7 02 	lds	r24, 0x02D7
    2e64:	90 91 d8 02 	lds	r25, 0x02D8
    2e68:	9f 77       	andi	r25, 0x7F	; 127
    2e6a:	90 93 d8 02 	sts	0x02D8, r25
    2e6e:	80 93 d7 02 	sts	0x02D7, r24
    2e72:	08 95       	ret

00002e74 <_Z14eingabehandlerh>:
	}
}

void eingabehandler(uint8_t taste){
	if (taste!='A')
    2e74:	81 34       	cpi	r24, 0x41	; 65
    2e76:	09 f4       	brne	.+2      	; 0x2e7a <_Z14eingabehandlerh+0x6>
    2e78:	89 c2       	rjmp	.+1298   	; 0x338c <_Z14eingabehandlerh+0x518>
	{
		if (anzeige==255)
    2e7a:	20 91 d7 02 	lds	r18, 0x02D7
    2e7e:	30 91 d8 02 	lds	r19, 0x02D8
    2e82:	2f 3f       	cpi	r18, 0xFF	; 255
    2e84:	31 05       	cpc	r19, r1
    2e86:	61 f4       	brne	.+24     	; 0x2ea0 <_Z14eingabehandlerh+0x2c>
		{
			oled.ssd1306_command(SSD1306_DISPLAYON);
    2e88:	6f ea       	ldi	r22, 0xAF	; 175
    2e8a:	80 ef       	ldi	r24, 0xF0	; 240
    2e8c:	92 e0       	ldi	r25, 0x02	; 2
    2e8e:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <_ZN7Display15ssd1306_commandEh>
			//entweder display aus oder das Menue starten
			anzeige=(1<<menueflag);
    2e92:	80 e0       	ldi	r24, 0x00	; 0
    2e94:	90 e2       	ldi	r25, 0x20	; 32
    2e96:	90 93 d8 02 	sts	0x02D8, r25
    2e9a:	80 93 d7 02 	sts	0x02D7, r24
    2e9e:	08 95       	ret
    2ea0:	a9 01       	movw	r20, r18
    2ea2:	41 70       	andi	r20, 0x01	; 1
    2ea4:	50 72       	andi	r21, 0x20	; 32
		}
		//gleicher Handler wie oben, aber hier speziell fuer die Bearbeitung von Tastereingaben mit switch fuer die Tasten
		//es sind einfach so viele Tasten moeglich 
		else if ((anzeige&(1<<menueflag)) && (anzeige&(1<<Uhrflag)))	//Menue der Uhr
    2ea6:	41 30       	cpi	r20, 0x01	; 1
    2ea8:	50 42       	sbci	r21, 0x20	; 32
    2eaa:	09 f0       	breq	.+2      	; 0x2eae <_Z14eingabehandlerh+0x3a>
    2eac:	45 c0       	rjmp	.+138    	; 0x2f38 <_Z14eingabehandlerh+0xc4>
		{	
			anzeige&=~((1<<menueflag)|(1<<Uhrflag));
    2eae:	2e 7f       	andi	r18, 0xFE	; 254
    2eb0:	3f 7d       	andi	r19, 0xDF	; 223
    2eb2:	30 93 d8 02 	sts	0x02D8, r19
    2eb6:	20 93 d7 02 	sts	0x02D7, r18
			switch (taste)
    2eba:	82 33       	cpi	r24, 0x32	; 50
    2ebc:	79 f0       	breq	.+30     	; 0x2edc <_Z14eingabehandlerh+0x68>
    2ebe:	18 f4       	brcc	.+6      	; 0x2ec6 <_Z14eingabehandlerh+0x52>
    2ec0:	81 33       	cpi	r24, 0x31	; 49
    2ec2:	31 f0       	breq	.+12     	; 0x2ed0 <_Z14eingabehandlerh+0x5c>
    2ec4:	32 c0       	rjmp	.+100    	; 0x2f2a <_Z14eingabehandlerh+0xb6>
    2ec6:	83 33       	cpi	r24, 0x33	; 51
    2ec8:	b1 f0       	breq	.+44     	; 0x2ef6 <_Z14eingabehandlerh+0x82>
    2eca:	84 33       	cpi	r24, 0x34	; 52
    2ecc:	01 f1       	breq	.+64     	; 0x2f0e <_Z14eingabehandlerh+0x9a>
    2ece:	2d c0       	rjmp	.+90     	; 0x2f2a <_Z14eingabehandlerh+0xb6>
			{
				case '1':
					//Wechseln auf die Uhr
					anzeige|=(1<<Uhrflag);
    2ed0:	21 60       	ori	r18, 0x01	; 1
    2ed2:	30 93 d8 02 	sts	0x02D8, r19
    2ed6:	20 93 d7 02 	sts	0x02D7, r18
					break;
    2eda:	08 95       	ret
				
				case '2':
					//starten der Stoppuhr APP
					stoppuhr.Sekunden=0;
    2edc:	10 92 03 07 	sts	0x0703, r1
					stoppuhr.Minuten=0;
    2ee0:	10 92 02 07 	sts	0x0702, r1
					stoppuhr.Stunden=0;
    2ee4:	10 92 01 07 	sts	0x0701, r1
					anzeige|=(1<<refreshdisplay) | (1<<Stoppuhrflag);
    2ee8:	20 68       	ori	r18, 0x80	; 128
    2eea:	30 68       	ori	r19, 0x80	; 128
    2eec:	30 93 d8 02 	sts	0x02D8, r19
    2ef0:	20 93 d7 02 	sts	0x02D7, r18
					break;
    2ef4:	08 95       	ret
				
				case '3':
					//Starten der Timer APP
					zaehler.Sekunden=0;
    2ef6:	10 92 1b 07 	sts	0x071B, r1
					zaehler.Minuten=0;
    2efa:	10 92 1a 07 	sts	0x071A, r1
					zaehler.Stunden=0;
    2efe:	10 92 19 07 	sts	0x0719, r1
					
					anzeige|=(1<<Timerflag) | (1<<Einstellungsflag);
    2f02:	28 64       	ori	r18, 0x48	; 72
    2f04:	30 93 d8 02 	sts	0x02D8, r19
    2f08:	20 93 d7 02 	sts	0x02D7, r18
					break;
    2f0c:	08 95       	ret
				
				case '4':
					//Starten der Alarmapp, momentan nicht implementiert
					oled.clearFrame();
    2f0e:	80 ef       	ldi	r24, 0xF0	; 240
    2f10:	92 e0       	ldi	r25, 0x02	; 2
    2f12:	0e 94 ed 02 	call	0x5da	; 0x5da <_ZN7Display10clearFrameEv>
					anzeige|=(1<<refreshdisplay);
    2f16:	80 91 d7 02 	lds	r24, 0x02D7
    2f1a:	90 91 d8 02 	lds	r25, 0x02D8
    2f1e:	90 68       	ori	r25, 0x80	; 128
    2f20:	90 93 d8 02 	sts	0x02D8, r25
    2f24:	80 93 d7 02 	sts	0x02D7, r24
					break;
    2f28:	08 95       	ret
				
				default:
					//menueflag erneu setzen
					anzeige|=(1<<menueflag)|(1<<Uhrflag);
    2f2a:	21 60       	ori	r18, 0x01	; 1
    2f2c:	30 62       	ori	r19, 0x20	; 32
    2f2e:	30 93 d8 02 	sts	0x02D8, r19
    2f32:	20 93 d7 02 	sts	0x02D7, r18
					break;
    2f36:	09 c2       	rjmp	.+1042   	; 0x334a <_Z14eingabehandlerh+0x4d6>
    2f38:	a9 01       	movw	r20, r18
    2f3a:	48 70       	andi	r20, 0x08	; 8
    2f3c:	50 72       	andi	r21, 0x20	; 32
			}
		}
		else if ((anzeige&(1<<menueflag)) && (anzeige&(1<<Einstellungsflag)))	//Menue der Einstellungen
    2f3e:	48 30       	cpi	r20, 0x08	; 8
    2f40:	50 42       	sbci	r21, 0x20	; 32
    2f42:	99 f5       	brne	.+102    	; 0x2faa <_Z14eingabehandlerh+0x136>
		{
			anzeige&=~((1<<menueflag)|(1<<Einstellungsflag));
    2f44:	27 7f       	andi	r18, 0xF7	; 247
    2f46:	3f 7d       	andi	r19, 0xDF	; 223
    2f48:	30 93 d8 02 	sts	0x02D8, r19
    2f4c:	20 93 d7 02 	sts	0x02D7, r18
			switch (taste)
    2f50:	82 33       	cpi	r24, 0x32	; 50
    2f52:	91 f0       	breq	.+36     	; 0x2f78 <_Z14eingabehandlerh+0x104>
    2f54:	83 33       	cpi	r24, 0x33	; 51
    2f56:	b1 f0       	breq	.+44     	; 0x2f84 <_Z14eingabehandlerh+0x110>
    2f58:	81 33       	cpi	r24, 0x31	; 49
    2f5a:	01 f5       	brne	.+64     	; 0x2f9c <_Z14eingabehandlerh+0x128>
			{
				case '1':
					//zuruecksetzen der Kalibrierung, da passive Kallibrierung eingebaut
					kompass.kallibrierung_ruecksetzen();
    2f5c:	89 e3       	ldi	r24, 0x39	; 57
    2f5e:	97 e0       	ldi	r25, 0x07	; 7
    2f60:	0e 94 9d 1c 	call	0x393a	; 0x393a <_ZN7Kompass25kallibrierung_ruecksetzenEv>
					anzeige|=(1<<Kompasflag);
    2f64:	80 91 d7 02 	lds	r24, 0x02D7
    2f68:	90 91 d8 02 	lds	r25, 0x02D8
    2f6c:	84 60       	ori	r24, 0x04	; 4
    2f6e:	90 93 d8 02 	sts	0x02D8, r25
    2f72:	80 93 d7 02 	sts	0x02D7, r24
					break;
    2f76:	08 95       	ret
				case '2':
					//Gaineinstellung fuer den Kompass
					anzeige|=(1<<Kompasgaineinstellenflag);
    2f78:	20 62       	ori	r18, 0x20	; 32
    2f7a:	30 93 d8 02 	sts	0x02D8, r19
    2f7e:	20 93 d7 02 	sts	0x02D7, r18
					break;
    2f82:	08 95       	ret
				case '3':
					//dies ist eine der wenigen Funktinen, die die Handler Strucktur nicht anwenden, da sie die rtc anhaellt
					uhreinstellen();
    2f84:	0e 94 66 11 	call	0x22cc	; 0x22cc <_Z13uhreinstellenv>
					anzeige|=(1<<Uhrflag);
    2f88:	80 91 d7 02 	lds	r24, 0x02D7
    2f8c:	90 91 d8 02 	lds	r25, 0x02D8
    2f90:	81 60       	ori	r24, 0x01	; 1
    2f92:	90 93 d8 02 	sts	0x02D8, r25
    2f96:	80 93 d7 02 	sts	0x02D7, r24
					break;
    2f9a:	08 95       	ret
				default:
					//Menueflag neu setzten
					anzeige|=(1<<menueflag)|(1<<Einstellungsflag);
    2f9c:	28 60       	ori	r18, 0x08	; 8
    2f9e:	30 62       	ori	r19, 0x20	; 32
    2fa0:	30 93 d8 02 	sts	0x02D8, r19
    2fa4:	20 93 d7 02 	sts	0x02D7, r18
					break;
    2fa8:	d0 c1       	rjmp	.+928    	; 0x334a <_Z14eingabehandlerh+0x4d6>
			}
		}
		else if ((anzeige&(1<<menueflag)))	//nur das grosse menue
    2faa:	35 ff       	sbrs	r19, 5
    2fac:	58 c0       	rjmp	.+176    	; 0x305e <_Z14eingabehandlerh+0x1ea>
		{
			anzeige&=~(1<<menueflag);
    2fae:	3f 7d       	andi	r19, 0xDF	; 223
    2fb0:	30 93 d8 02 	sts	0x02D8, r19
    2fb4:	20 93 d7 02 	sts	0x02D7, r18
			switch (taste)
    2fb8:	48 2f       	mov	r20, r24
    2fba:	50 e0       	ldi	r21, 0x00	; 0
    2fbc:	fa 01       	movw	r30, r20
    2fbe:	f1 97       	sbiw	r30, 0x31	; 49
    2fc0:	e7 30       	cpi	r30, 0x07	; 7
    2fc2:	f1 05       	cpc	r31, r1
    2fc4:	08 f0       	brcs	.+2      	; 0x2fc8 <_Z14eingabehandlerh+0x154>
    2fc6:	45 c0       	rjmp	.+138    	; 0x3052 <_Z14eingabehandlerh+0x1de>
    2fc8:	e2 5c       	subi	r30, 0xC2	; 194
    2fca:	ff 4f       	sbci	r31, 0xFF	; 255
    2fcc:	0c 94 59 27 	jmp	0x4eb2	; 0x4eb2 <__tablejump2__>
			{
				case '1':
					anzeige|=(1<<Fahradflag);
    2fd0:	22 60       	ori	r18, 0x02	; 2
    2fd2:	30 93 d8 02 	sts	0x02D8, r19
    2fd6:	20 93 d7 02 	sts	0x02D7, r18
					//starten des Timers fuer die geschwindigkeit
					TCCR1B |= ((1<<CS12) | (1<<CS10));
    2fda:	e1 e8       	ldi	r30, 0x81	; 129
    2fdc:	f0 e0       	ldi	r31, 0x00	; 0
    2fde:	80 81       	ld	r24, Z
    2fe0:	85 60       	ori	r24, 0x05	; 5
    2fe2:	80 83       	st	Z, r24
					break;
    2fe4:	08 95       	ret
				
				case '2':
					//Taschenrechner starten
					//Monentan deaktiv, da Umstellung der Handler 
					//operation(Flieskommazahleingabe());
					oled.clearFrame();
    2fe6:	80 ef       	ldi	r24, 0xF0	; 240
    2fe8:	92 e0       	ldi	r25, 0x02	; 2
    2fea:	0e 94 ed 02 	call	0x5da	; 0x5da <_ZN7Display10clearFrameEv>
					anzeige|=(1<<refreshdisplay);	
    2fee:	80 91 d7 02 	lds	r24, 0x02D7
    2ff2:	90 91 d8 02 	lds	r25, 0x02D8
    2ff6:	90 68       	ori	r25, 0x80	; 128
    2ff8:	90 93 d8 02 	sts	0x02D8, r25
    2ffc:	80 93 d7 02 	sts	0x02D7, r24
					break;
    3000:	08 95       	ret
				
				case '3':
					anzeige|=(1<<Kompasflag);
    3002:	24 60       	ori	r18, 0x04	; 4
    3004:	30 93 d8 02 	sts	0x02D8, r19
    3008:	20 93 d7 02 	sts	0x02D7, r18
					break;
    300c:	08 95       	ret
				
				case '4':
					//Menue der Uhr
					anzeige|=(1<<menueflag) | (1<<Uhrflag);
    300e:	21 60       	ori	r18, 0x01	; 1
    3010:	30 62       	ori	r19, 0x20	; 32
    3012:	30 93 d8 02 	sts	0x02D8, r19
    3016:	20 93 d7 02 	sts	0x02D7, r18
					break;
    301a:	08 95       	ret
				
				case '5':
					//menue der Einstellungen
					anzeige|=(1<<menueflag) | (1<<Einstellungsflag);
    301c:	28 60       	ori	r18, 0x08	; 8
    301e:	30 62       	ori	r19, 0x20	; 32
    3020:	30 93 d8 02 	sts	0x02D8, r19
    3024:	20 93 d7 02 	sts	0x02D7, r18
					break;
    3028:	08 95       	ret
				
				case '6':
					//Display ausschalten
					//anzeige=255;
					oled.clearFrame();
    302a:	80 ef       	ldi	r24, 0xF0	; 240
    302c:	92 e0       	ldi	r25, 0x02	; 2
    302e:	0e 94 ed 02 	call	0x5da	; 0x5da <_ZN7Display10clearFrameEv>
					anzeige|=(1<<refreshdisplay);
    3032:	80 91 d7 02 	lds	r24, 0x02D7
    3036:	90 91 d8 02 	lds	r25, 0x02D8
    303a:	90 68       	ori	r25, 0x80	; 128
    303c:	90 93 d8 02 	sts	0x02D8, r25
    3040:	80 93 d7 02 	sts	0x02D7, r24
					break;
    3044:	08 95       	ret
				case '7':
					anzeige |= (1<<Druckflag);
    3046:	32 60       	ori	r19, 0x02	; 2
    3048:	30 93 d8 02 	sts	0x02D8, r19
    304c:	20 93 d7 02 	sts	0x02D7, r18
					break;
    3050:	08 95       	ret
				default:
					//menueflag erneut setzen um abschalten zu verhindern
					anzeige|=(1<<menueflag);
    3052:	30 62       	ori	r19, 0x20	; 32
    3054:	30 93 d8 02 	sts	0x02D8, r19
    3058:	20 93 d7 02 	sts	0x02D7, r18
					break;
    305c:	76 c1       	rjmp	.+748    	; 0x334a <_Z14eingabehandlerh+0x4d6>
			}
		}
		else if ((anzeige&(1<<Kompasgaineinstellenflag)))
    305e:	25 ff       	sbrs	r18, 5
    3060:	51 c0       	rjmp	.+162    	; 0x3104 <_Z14eingabehandlerh+0x290>
		{
			anzeige&=~(1<<Kompasgaineinstellenflag);
    3062:	a9 01       	movw	r20, r18
    3064:	4f 7d       	andi	r20, 0xDF	; 223
			anzeige|=(1<<Kompasflag);
    3066:	44 60       	ori	r20, 0x04	; 4
    3068:	50 93 d8 02 	sts	0x02D8, r21
    306c:	40 93 d7 02 	sts	0x02D7, r20
			switch (taste) {
    3070:	48 2f       	mov	r20, r24
    3072:	50 e0       	ldi	r21, 0x00	; 0
    3074:	fa 01       	movw	r30, r20
    3076:	f1 97       	sbiw	r30, 0x31	; 49
    3078:	e8 30       	cpi	r30, 0x08	; 8
    307a:	f1 05       	cpc	r31, r1
    307c:	e0 f5       	brcc	.+120    	; 0x30f6 <_Z14eingabehandlerh+0x282>
    307e:	eb 5b       	subi	r30, 0xBB	; 187
    3080:	ff 4f       	sbci	r31, 0xFF	; 255
    3082:	0c 94 59 27 	jmp	0x4eb2	; 0x4eb2 <__tablejump2__>
				case '1':
					kompass.HMC5883L_command(0x01,HMCGAIN1370);
    3086:	40 e0       	ldi	r20, 0x00	; 0
    3088:	61 e0       	ldi	r22, 0x01	; 1
    308a:	89 e3       	ldi	r24, 0x39	; 57
    308c:	97 e0       	ldi	r25, 0x07	; 7
    308e:	0e 94 22 1b 	call	0x3644	; 0x3644 <_ZN7Kompass16HMC5883L_commandEhh>
					break;
    3092:	08 95       	ret
				case '2':
					kompass.HMC5883L_command(0x01,HMCGAIN1090);
    3094:	40 e2       	ldi	r20, 0x20	; 32
    3096:	61 e0       	ldi	r22, 0x01	; 1
    3098:	89 e3       	ldi	r24, 0x39	; 57
    309a:	97 e0       	ldi	r25, 0x07	; 7
    309c:	0e 94 22 1b 	call	0x3644	; 0x3644 <_ZN7Kompass16HMC5883L_commandEhh>
					break;
    30a0:	08 95       	ret
				case '3':
					kompass.HMC5883L_command(0x01,HMCGAIN820);
    30a2:	40 e4       	ldi	r20, 0x40	; 64
    30a4:	61 e0       	ldi	r22, 0x01	; 1
    30a6:	89 e3       	ldi	r24, 0x39	; 57
    30a8:	97 e0       	ldi	r25, 0x07	; 7
    30aa:	0e 94 22 1b 	call	0x3644	; 0x3644 <_ZN7Kompass16HMC5883L_commandEhh>
					break;
    30ae:	08 95       	ret
				case '4':
					kompass.HMC5883L_command(0x01,HMCGAIN660);
    30b0:	40 e6       	ldi	r20, 0x60	; 96
    30b2:	61 e0       	ldi	r22, 0x01	; 1
    30b4:	89 e3       	ldi	r24, 0x39	; 57
    30b6:	97 e0       	ldi	r25, 0x07	; 7
    30b8:	0e 94 22 1b 	call	0x3644	; 0x3644 <_ZN7Kompass16HMC5883L_commandEhh>
					break;
    30bc:	08 95       	ret
				case '5':
					kompass.HMC5883L_command(0x01,HMCGAIN440);
    30be:	40 e8       	ldi	r20, 0x80	; 128
    30c0:	61 e0       	ldi	r22, 0x01	; 1
    30c2:	89 e3       	ldi	r24, 0x39	; 57
    30c4:	97 e0       	ldi	r25, 0x07	; 7
    30c6:	0e 94 22 1b 	call	0x3644	; 0x3644 <_ZN7Kompass16HMC5883L_commandEhh>
					break;
    30ca:	08 95       	ret
				case '6':
					kompass.HMC5883L_command(0x01,HMCGAIN390);
    30cc:	40 ea       	ldi	r20, 0xA0	; 160
    30ce:	61 e0       	ldi	r22, 0x01	; 1
    30d0:	89 e3       	ldi	r24, 0x39	; 57
    30d2:	97 e0       	ldi	r25, 0x07	; 7
    30d4:	0e 94 22 1b 	call	0x3644	; 0x3644 <_ZN7Kompass16HMC5883L_commandEhh>
					break;
    30d8:	08 95       	ret
				case '7':
					kompass.HMC5883L_command(0x01,HMCGAIN330);
    30da:	40 ec       	ldi	r20, 0xC0	; 192
    30dc:	61 e0       	ldi	r22, 0x01	; 1
    30de:	89 e3       	ldi	r24, 0x39	; 57
    30e0:	97 e0       	ldi	r25, 0x07	; 7
    30e2:	0e 94 22 1b 	call	0x3644	; 0x3644 <_ZN7Kompass16HMC5883L_commandEhh>
					break;
    30e6:	08 95       	ret
				case '8':
					kompass.HMC5883L_command(0x01,HMCGAIN230);
    30e8:	40 ee       	ldi	r20, 0xE0	; 224
    30ea:	61 e0       	ldi	r22, 0x01	; 1
    30ec:	89 e3       	ldi	r24, 0x39	; 57
    30ee:	97 e0       	ldi	r25, 0x07	; 7
    30f0:	0e 94 22 1b 	call	0x3644	; 0x3644 <_ZN7Kompass16HMC5883L_commandEhh>
					break;
    30f4:	08 95       	ret
				default:
					anzeige &=~(1<<Kompasflag);
    30f6:	2b 7d       	andi	r18, 0xDB	; 219
					anzeige|=(1<<Kompasgaineinstellenflag);
    30f8:	20 62       	ori	r18, 0x20	; 32
    30fa:	30 93 d8 02 	sts	0x02D8, r19
    30fe:	20 93 d7 02 	sts	0x02D7, r18
					break;
    3102:	23 c1       	rjmp	.+582    	; 0x334a <_Z14eingabehandlerh+0x4d6>
    3104:	a9 01       	movw	r20, r18
    3106:	48 74       	andi	r20, 0x48	; 72
    3108:	55 27       	eor	r21, r21
			}
		}
		else if ((anzeige&(1<<Einstellungsflag)) && (anzeige&(1<<Timerflag)))
    310a:	48 34       	cpi	r20, 0x48	; 72
    310c:	51 05       	cpc	r21, r1
    310e:	09 f0       	breq	.+2      	; 0x3112 <_Z14eingabehandlerh+0x29e>
    3110:	87 c0       	rjmp	.+270    	; 0x3220 <_Z14eingabehandlerh+0x3ac>
		{
			switch (pos)
    3112:	90 91 d6 02 	lds	r25, 0x02D6
    3116:	92 30       	cpi	r25, 0x02	; 2
    3118:	a9 f1       	breq	.+106    	; 0x3184 <_Z14eingabehandlerh+0x310>
    311a:	28 f4       	brcc	.+10     	; 0x3126 <_Z14eingabehandlerh+0x2b2>
    311c:	99 23       	and	r25, r25
    311e:	61 f0       	breq	.+24     	; 0x3138 <_Z14eingabehandlerh+0x2c4>
    3120:	91 30       	cpi	r25, 0x01	; 1
    3122:	01 f1       	breq	.+64     	; 0x3164 <_Z14eingabehandlerh+0x2f0>
    3124:	12 c1       	rjmp	.+548    	; 0x334a <_Z14eingabehandlerh+0x4d6>
    3126:	94 30       	cpi	r25, 0x04	; 4
    3128:	09 f4       	brne	.+2      	; 0x312c <_Z14eingabehandlerh+0x2b8>
    312a:	52 c0       	rjmp	.+164    	; 0x31d0 <_Z14eingabehandlerh+0x35c>
    312c:	08 f4       	brcc	.+2      	; 0x3130 <_Z14eingabehandlerh+0x2bc>
    312e:	40 c0       	rjmp	.+128    	; 0x31b0 <_Z14eingabehandlerh+0x33c>
    3130:	95 30       	cpi	r25, 0x05	; 5
    3132:	09 f4       	brne	.+2      	; 0x3136 <_Z14eingabehandlerh+0x2c2>
    3134:	63 c0       	rjmp	.+198    	; 0x31fc <_Z14eingabehandlerh+0x388>
    3136:	09 c1       	rjmp	.+530    	; 0x334a <_Z14eingabehandlerh+0x4d6>
			{
			case 0:
				switch (taste)
    3138:	83 32       	cpi	r24, 0x23	; 35
    313a:	09 f4       	brne	.+2      	; 0x313e <_Z14eingabehandlerh+0x2ca>
    313c:	06 c1       	rjmp	.+524    	; 0x334a <_Z14eingabehandlerh+0x4d6>
    313e:	8a 32       	cpi	r24, 0x2A	; 42
    3140:	09 f4       	brne	.+2      	; 0x3144 <_Z14eingabehandlerh+0x2d0>
    3142:	03 c1       	rjmp	.+518    	; 0x334a <_Z14eingabehandlerh+0x4d6>
					case '#':
						break;
					case '*':
						break;
					default:
						zaehler.Sekunden+=(taste-'0')*10;
    3144:	eb e1       	ldi	r30, 0x1B	; 27
    3146:	f7 e0       	ldi	r31, 0x07	; 7
    3148:	98 2f       	mov	r25, r24
    314a:	99 0f       	add	r25, r25
    314c:	90 56       	subi	r25, 0x60	; 96
    314e:	29 2f       	mov	r18, r25
    3150:	22 0f       	add	r18, r18
    3152:	22 0f       	add	r18, r18
    3154:	92 0f       	add	r25, r18
    3156:	20 81       	ld	r18, Z
    3158:	92 0f       	add	r25, r18
    315a:	90 83       	st	Z, r25
						pos++;
    315c:	91 e0       	ldi	r25, 0x01	; 1
    315e:	90 93 d6 02 	sts	0x02D6, r25
						break;
    3162:	f3 c0       	rjmp	.+486    	; 0x334a <_Z14eingabehandlerh+0x4d6>
				}
				break;
			case 1:
				switch (taste)
    3164:	83 32       	cpi	r24, 0x23	; 35
    3166:	09 f4       	brne	.+2      	; 0x316a <_Z14eingabehandlerh+0x2f6>
    3168:	f0 c0       	rjmp	.+480    	; 0x334a <_Z14eingabehandlerh+0x4d6>
    316a:	8a 32       	cpi	r24, 0x2A	; 42
    316c:	09 f4       	brne	.+2      	; 0x3170 <_Z14eingabehandlerh+0x2fc>
    316e:	ed c0       	rjmp	.+474    	; 0x334a <_Z14eingabehandlerh+0x4d6>
					case '#':
					break;
					case '*':
					break;
					default:
					zaehler.Sekunden+=(taste-'0');
    3170:	eb e1       	ldi	r30, 0x1B	; 27
    3172:	f7 e0       	ldi	r31, 0x07	; 7
    3174:	90 81       	ld	r25, Z
    3176:	90 53       	subi	r25, 0x30	; 48
    3178:	98 0f       	add	r25, r24
    317a:	90 83       	st	Z, r25
					pos++;
    317c:	92 e0       	ldi	r25, 0x02	; 2
    317e:	90 93 d6 02 	sts	0x02D6, r25
					break;
    3182:	e3 c0       	rjmp	.+454    	; 0x334a <_Z14eingabehandlerh+0x4d6>
				}
				break;
			case 2:
				switch (taste)
    3184:	83 32       	cpi	r24, 0x23	; 35
    3186:	09 f4       	brne	.+2      	; 0x318a <_Z14eingabehandlerh+0x316>
    3188:	e0 c0       	rjmp	.+448    	; 0x334a <_Z14eingabehandlerh+0x4d6>
    318a:	8a 32       	cpi	r24, 0x2A	; 42
    318c:	09 f4       	brne	.+2      	; 0x3190 <_Z14eingabehandlerh+0x31c>
    318e:	dd c0       	rjmp	.+442    	; 0x334a <_Z14eingabehandlerh+0x4d6>
					case '#':
					break;
					case '*':
					break;
					default:
					zaehler.Minuten+=(taste-'0')*10;
    3190:	ea e1       	ldi	r30, 0x1A	; 26
    3192:	f7 e0       	ldi	r31, 0x07	; 7
    3194:	98 2f       	mov	r25, r24
    3196:	99 0f       	add	r25, r25
    3198:	90 56       	subi	r25, 0x60	; 96
    319a:	29 2f       	mov	r18, r25
    319c:	22 0f       	add	r18, r18
    319e:	22 0f       	add	r18, r18
    31a0:	92 0f       	add	r25, r18
    31a2:	20 81       	ld	r18, Z
    31a4:	92 0f       	add	r25, r18
    31a6:	90 83       	st	Z, r25
					pos++;
    31a8:	93 e0       	ldi	r25, 0x03	; 3
    31aa:	90 93 d6 02 	sts	0x02D6, r25
					break;
    31ae:	cd c0       	rjmp	.+410    	; 0x334a <_Z14eingabehandlerh+0x4d6>
				}
				break;
			case 3:
				switch (taste)
    31b0:	83 32       	cpi	r24, 0x23	; 35
    31b2:	09 f4       	brne	.+2      	; 0x31b6 <_Z14eingabehandlerh+0x342>
    31b4:	ca c0       	rjmp	.+404    	; 0x334a <_Z14eingabehandlerh+0x4d6>
    31b6:	8a 32       	cpi	r24, 0x2A	; 42
    31b8:	09 f4       	brne	.+2      	; 0x31bc <_Z14eingabehandlerh+0x348>
    31ba:	c7 c0       	rjmp	.+398    	; 0x334a <_Z14eingabehandlerh+0x4d6>
					case '#':
					break;
					case '*':
					break;
					default:
					zaehler.Minuten+=(taste-'0');
    31bc:	ea e1       	ldi	r30, 0x1A	; 26
    31be:	f7 e0       	ldi	r31, 0x07	; 7
    31c0:	90 81       	ld	r25, Z
    31c2:	90 53       	subi	r25, 0x30	; 48
    31c4:	98 0f       	add	r25, r24
    31c6:	90 83       	st	Z, r25
					pos++;
    31c8:	94 e0       	ldi	r25, 0x04	; 4
    31ca:	90 93 d6 02 	sts	0x02D6, r25
					break;
    31ce:	bd c0       	rjmp	.+378    	; 0x334a <_Z14eingabehandlerh+0x4d6>
				}
				break;
			case 4:
				switch (taste)
    31d0:	83 32       	cpi	r24, 0x23	; 35
    31d2:	09 f4       	brne	.+2      	; 0x31d6 <_Z14eingabehandlerh+0x362>
    31d4:	ba c0       	rjmp	.+372    	; 0x334a <_Z14eingabehandlerh+0x4d6>
    31d6:	8a 32       	cpi	r24, 0x2A	; 42
    31d8:	09 f4       	brne	.+2      	; 0x31dc <_Z14eingabehandlerh+0x368>
    31da:	b7 c0       	rjmp	.+366    	; 0x334a <_Z14eingabehandlerh+0x4d6>
					case '#':
					break;
					case '*':
					break;
					default:
					zaehler.Stunden+=(taste-'0')*10;
    31dc:	e9 e1       	ldi	r30, 0x19	; 25
    31de:	f7 e0       	ldi	r31, 0x07	; 7
    31e0:	98 2f       	mov	r25, r24
    31e2:	99 0f       	add	r25, r25
    31e4:	90 56       	subi	r25, 0x60	; 96
    31e6:	29 2f       	mov	r18, r25
    31e8:	22 0f       	add	r18, r18
    31ea:	22 0f       	add	r18, r18
    31ec:	92 0f       	add	r25, r18
    31ee:	20 81       	ld	r18, Z
    31f0:	92 0f       	add	r25, r18
    31f2:	90 83       	st	Z, r25
					pos++;
    31f4:	95 e0       	ldi	r25, 0x05	; 5
    31f6:	90 93 d6 02 	sts	0x02D6, r25
					break;
    31fa:	a7 c0       	rjmp	.+334    	; 0x334a <_Z14eingabehandlerh+0x4d6>
				}
				break;
			case 5:
				switch (taste)
    31fc:	83 32       	cpi	r24, 0x23	; 35
    31fe:	41 f0       	breq	.+16     	; 0x3210 <_Z14eingabehandlerh+0x39c>
    3200:	8a 32       	cpi	r24, 0x2A	; 42
    3202:	31 f0       	breq	.+12     	; 0x3210 <_Z14eingabehandlerh+0x39c>
					case '#':
					break;
					case '*':
					break;
					default:
					zaehler.Stunden+=(taste-'0');
    3204:	e9 e1       	ldi	r30, 0x19	; 25
    3206:	f7 e0       	ldi	r31, 0x07	; 7
    3208:	90 81       	ld	r25, Z
    320a:	90 53       	subi	r25, 0x30	; 48
    320c:	98 0f       	add	r25, r24
    320e:	90 83       	st	Z, r25
					pos++;
					break;
				}
				pos=0;
    3210:	10 92 d6 02 	sts	0x02D6, r1
				anzeige&=~(1<<Einstellungsflag);
    3214:	27 7f       	andi	r18, 0xF7	; 247
    3216:	30 93 d8 02 	sts	0x02D8, r19
    321a:	20 93 d7 02 	sts	0x02D7, r18
				break;
    321e:	95 c0       	rjmp	.+298    	; 0x334a <_Z14eingabehandlerh+0x4d6>
			}
		}
		else if ((anzeige&(1<<Stoppuhrflag)))
    3220:	27 ff       	sbrs	r18, 7
    3222:	23 c0       	rjmp	.+70     	; 0x326a <_Z14eingabehandlerh+0x3f6>
		{
			if (taste=='*')
    3224:	8a 32       	cpi	r24, 0x2A	; 42
    3226:	71 f4       	brne	.+28     	; 0x3244 <_Z14eingabehandlerh+0x3d0>
			{
				if ((anzeige&(1<<Einstellungsflag)))
    3228:	23 ff       	sbrs	r18, 3
    322a:	06 c0       	rjmp	.+12     	; 0x3238 <_Z14eingabehandlerh+0x3c4>
				{
					anzeige&=~(1<<Einstellungsflag);
    322c:	27 7f       	andi	r18, 0xF7	; 247
    322e:	30 93 d8 02 	sts	0x02D8, r19
    3232:	20 93 d7 02 	sts	0x02D7, r18
    3236:	a4 c0       	rjmp	.+328    	; 0x3380 <_Z14eingabehandlerh+0x50c>
				}
				else{
					anzeige|=(1<<Einstellungsflag);
    3238:	28 60       	ori	r18, 0x08	; 8
    323a:	30 93 d8 02 	sts	0x02D8, r19
    323e:	20 93 d7 02 	sts	0x02D7, r18
    3242:	9e c0       	rjmp	.+316    	; 0x3380 <_Z14eingabehandlerh+0x50c>
				}
			}
			else if (taste=='0')
    3244:	80 33       	cpi	r24, 0x30	; 48
    3246:	39 f4       	brne	.+14     	; 0x3256 <_Z14eingabehandlerh+0x3e2>
			{
				stoppuhr.Sekunden=0;
    3248:	10 92 03 07 	sts	0x0703, r1
				stoppuhr.Minuten=0;
    324c:	10 92 02 07 	sts	0x0702, r1
				stoppuhr.Stunden=0;
    3250:	10 92 01 07 	sts	0x0701, r1
    3254:	08 95       	ret
			}
			else if (taste=='#')
    3256:	83 32       	cpi	r24, 0x23	; 35
    3258:	09 f0       	breq	.+2      	; 0x325c <_Z14eingabehandlerh+0x3e8>
    325a:	98 c0       	rjmp	.+304    	; 0x338c <_Z14eingabehandlerh+0x518>
			{
				anzeige&=~((1<<Stoppuhrflag)|(1<<Einstellungsflag));
    325c:	27 77       	andi	r18, 0x77	; 119
				anzeige|=(1<<menueflag);
    325e:	30 62       	ori	r19, 0x20	; 32
    3260:	30 93 d8 02 	sts	0x02D8, r19
    3264:	20 93 d7 02 	sts	0x02D7, r18
    3268:	08 95       	ret
			}
		}
		else if ((anzeige&(1<<Uhrflag)))
    326a:	20 ff       	sbrs	r18, 0
    326c:	0a c0       	rjmp	.+20     	; 0x3282 <_Z14eingabehandlerh+0x40e>
		{
			if (taste=='#')
    326e:	83 32       	cpi	r24, 0x23	; 35
    3270:	09 f0       	breq	.+2      	; 0x3274 <_Z14eingabehandlerh+0x400>
    3272:	6b c0       	rjmp	.+214    	; 0x334a <_Z14eingabehandlerh+0x4d6>
			{
				anzeige&=~(1<<Uhrflag);
    3274:	2e 7f       	andi	r18, 0xFE	; 254
				anzeige|=(1<<menueflag);
    3276:	30 62       	ori	r19, 0x20	; 32
    3278:	30 93 d8 02 	sts	0x02D8, r19
    327c:	20 93 d7 02 	sts	0x02D7, r18
    3280:	08 95       	ret
			}
		}
		else if ((anzeige&(1<<Kompasflag)))
    3282:	22 ff       	sbrs	r18, 2
    3284:	0a c0       	rjmp	.+20     	; 0x329a <_Z14eingabehandlerh+0x426>
		{
			if (taste=='#')
    3286:	83 32       	cpi	r24, 0x23	; 35
    3288:	09 f0       	breq	.+2      	; 0x328c <_Z14eingabehandlerh+0x418>
    328a:	5f c0       	rjmp	.+190    	; 0x334a <_Z14eingabehandlerh+0x4d6>
			{
				anzeige&=~(1<<Kompasflag);
    328c:	2b 7f       	andi	r18, 0xFB	; 251
				anzeige|=(1<<menueflag);
    328e:	30 62       	ori	r19, 0x20	; 32
    3290:	30 93 d8 02 	sts	0x02D8, r19
    3294:	20 93 d7 02 	sts	0x02D7, r18
    3298:	08 95       	ret
			}
		}
		else if ((anzeige&(1<<Fahradflag)))
    329a:	21 ff       	sbrs	r18, 1
    329c:	10 c0       	rjmp	.+32     	; 0x32be <_Z14eingabehandlerh+0x44a>
		{
			if (taste=='#')
    329e:	83 32       	cpi	r24, 0x23	; 35
    32a0:	09 f0       	breq	.+2      	; 0x32a4 <_Z14eingabehandlerh+0x430>
    32a2:	53 c0       	rjmp	.+166    	; 0x334a <_Z14eingabehandlerh+0x4d6>
			{
				anzeige&=~(1<<Fahradflag);
    32a4:	c9 01       	movw	r24, r18
    32a6:	8d 7f       	andi	r24, 0xFD	; 253
				anzeige|=(1<<menueflag);
    32a8:	90 62       	ori	r25, 0x20	; 32
    32aa:	90 93 d8 02 	sts	0x02D8, r25
    32ae:	80 93 d7 02 	sts	0x02D7, r24
				TCCR1B &= ~((1<<CS12) | (1<<CS10));
    32b2:	e1 e8       	ldi	r30, 0x81	; 129
    32b4:	f0 e0       	ldi	r31, 0x00	; 0
    32b6:	80 81       	ld	r24, Z
    32b8:	8a 7f       	andi	r24, 0xFA	; 250
    32ba:	80 83       	st	Z, r24
    32bc:	08 95       	ret
			}
		}
		else if ((anzeige&(1<<Druckflag)))
    32be:	31 ff       	sbrs	r19, 1
    32c0:	1a c0       	rjmp	.+52     	; 0x32f6 <_Z14eingabehandlerh+0x482>
		{
			if (taste=='#')
    32c2:	83 32       	cpi	r24, 0x23	; 35
    32c4:	41 f4       	brne	.+16     	; 0x32d6 <_Z14eingabehandlerh+0x462>
			{
				anzeige&=~(1<<Druckflag);
    32c6:	c9 01       	movw	r24, r18
    32c8:	9d 7f       	andi	r25, 0xFD	; 253
				anzeige|=(1<<menueflag);
    32ca:	90 62       	ori	r25, 0x20	; 32
    32cc:	90 93 d8 02 	sts	0x02D8, r25
    32d0:	80 93 d7 02 	sts	0x02D7, r24
    32d4:	08 95       	ret
			}
			else if (taste=='*')
    32d6:	8a 32       	cpi	r24, 0x2A	; 42
    32d8:	09 f0       	breq	.+2      	; 0x32dc <_Z14eingabehandlerh+0x468>
    32da:	58 c0       	rjmp	.+176    	; 0x338c <_Z14eingabehandlerh+0x518>
			{
				Baro.set_Pressure0(Baro.Press);
    32dc:	40 91 dd 02 	lds	r20, 0x02DD
    32e0:	50 91 de 02 	lds	r21, 0x02DE
    32e4:	60 91 df 02 	lds	r22, 0x02DF
    32e8:	70 91 e0 02 	lds	r23, 0x02E0
    32ec:	8d ed       	ldi	r24, 0xDD	; 221
    32ee:	92 e0       	ldi	r25, 0x02	; 2
    32f0:	0e 94 18 1f 	call	0x3e30	; 0x3e30 <_ZN8Pressure13set_Pressure0Ed>
    32f4:	45 c0       	rjmp	.+138    	; 0x3380 <_Z14eingabehandlerh+0x50c>
			}
		}
		else if ((anzeige&(1<<Timerflag)))
    32f6:	26 ff       	sbrs	r18, 6
    32f8:	1f c0       	rjmp	.+62     	; 0x3338 <_Z14eingabehandlerh+0x4c4>
		{
			if (taste=='#')
    32fa:	83 32       	cpi	r24, 0x23	; 35
    32fc:	31 f5       	brne	.+76     	; 0x334a <_Z14eingabehandlerh+0x4d6>
			{
				anzeige&=~((1<<Timerflag)|(1<<blinkflag));
    32fe:	2f 7b       	andi	r18, 0xBF	; 191
    3300:	3f 7b       	andi	r19, 0xBF	; 191
    3302:	30 93 d8 02 	sts	0x02D8, r19
    3306:	20 93 d7 02 	sts	0x02D7, r18
				oled.invert(0);	//fuer den Fall, dass es invertiert blieb (50% der Faelle)
    330a:	60 e0       	ldi	r22, 0x00	; 0
    330c:	80 ef       	ldi	r24, 0xF0	; 240
    330e:	92 e0       	ldi	r25, 0x02	; 2
    3310:	0e 94 89 03 	call	0x712	; 0x712 <_ZN7Display6invertEh>
				LED.off();
    3314:	8d ee       	ldi	r24, 0xED	; 237
    3316:	92 e0       	ldi	r25, 0x02	; 2
    3318:	0e 94 16 1d 	call	0x3a2c	; 0x3a2c <_ZN6Output3offEv>
				Vibrationsmotor.off();
    331c:	8b ee       	ldi	r24, 0xEB	; 235
    331e:	92 e0       	ldi	r25, 0x02	; 2
    3320:	0e 94 16 1d 	call	0x3a2c	; 0x3a2c <_ZN6Output3offEv>
				
				anzeige|=(1<<menueflag);
    3324:	80 91 d7 02 	lds	r24, 0x02D7
    3328:	90 91 d8 02 	lds	r25, 0x02D8
    332c:	90 62       	ori	r25, 0x20	; 32
    332e:	90 93 d8 02 	sts	0x02D8, r25
    3332:	80 93 d7 02 	sts	0x02D7, r24
    3336:	08 95       	ret
			}
		}
		else if (anzeige==0)
    3338:	23 2b       	or	r18, r19
    333a:	39 f4       	brne	.+14     	; 0x334a <_Z14eingabehandlerh+0x4d6>
		{
			anzeige|=(1<<menueflag);
    333c:	80 e0       	ldi	r24, 0x00	; 0
    333e:	90 e2       	ldi	r25, 0x20	; 32
    3340:	90 93 d8 02 	sts	0x02D8, r25
    3344:	80 93 d7 02 	sts	0x02D7, r24
    3348:	08 95       	ret
		}
		if ((anzeige&(1<<blinkflag)))
    334a:	20 91 d7 02 	lds	r18, 0x02D7
    334e:	30 91 d8 02 	lds	r19, 0x02D8
    3352:	36 ff       	sbrs	r19, 6
    3354:	1b c0       	rjmp	.+54     	; 0x338c <_Z14eingabehandlerh+0x518>
		{
			if (taste=='*')
    3356:	8a 32       	cpi	r24, 0x2A	; 42
    3358:	c9 f4       	brne	.+50     	; 0x338c <_Z14eingabehandlerh+0x518>
			{
				anzeige &=~(1<<blinkflag);
    335a:	3f 7b       	andi	r19, 0xBF	; 191
    335c:	30 93 d8 02 	sts	0x02D8, r19
    3360:	20 93 d7 02 	sts	0x02D7, r18
				oled.invert(0);	//fuer den Fall, dass es invertiert blieb (50% der Faelle)
    3364:	60 e0       	ldi	r22, 0x00	; 0
    3366:	80 ef       	ldi	r24, 0xF0	; 240
    3368:	92 e0       	ldi	r25, 0x02	; 2
    336a:	0e 94 89 03 	call	0x712	; 0x712 <_ZN7Display6invertEh>
				LED.off();
    336e:	8d ee       	ldi	r24, 0xED	; 237
    3370:	92 e0       	ldi	r25, 0x02	; 2
    3372:	0e 94 16 1d 	call	0x3a2c	; 0x3a2c <_ZN6Output3offEv>
				Vibrationsmotor.off();
    3376:	8b ee       	ldi	r24, 0xEB	; 235
    3378:	92 e0       	ldi	r25, 0x02	; 2
    337a:	0e 94 16 1d 	call	0x3a2c	; 0x3a2c <_ZN6Output3offEv>
    337e:	08 95       	ret
		}
		else if (anzeige==0)
		{
			anzeige|=(1<<menueflag);
		}
		if ((anzeige&(1<<blinkflag)))
    3380:	20 91 d7 02 	lds	r18, 0x02D7
    3384:	30 91 d8 02 	lds	r19, 0x02D8
    3388:	36 fd       	sbrc	r19, 6
    338a:	e7 cf       	rjmp	.-50     	; 0x335a <_Z14eingabehandlerh+0x4e6>
    338c:	08 95       	ret

0000338e <main>:
void eingabehandler(uint8_t taste);

int main(void)
{
	//initialisierung
	initialisierung();
    338e:	0e 94 c0 15 	call	0x2b80	; 0x2b80 <_Z15initialisierungv>
	
    while(1)
    {
		//Steuerung der interupts durch Handler
		maininterupthandler();
    3392:	0e 94 10 16 	call	0x2c20	; 0x2c20 <_Z19maininterupthandlerv>
		//Steuerung der Anzeige alle Sekunde zur aktualisierung maximale Aktulisierungsrate ist 1Hz
		anzeigehandler();
    3396:	0e 94 22 16 	call	0x2c44	; 0x2c44 <_Z14anzeigehandlerv>
		//Tasthandler
		eingabehandler(Tastatur.Taster());
    339a:	8f ee       	ldi	r24, 0xEF	; 239
    339c:	92 e0       	ldi	r25, 0x02	; 2
    339e:	0e 94 78 1a 	call	0x34f0	; 0x34f0 <_ZN9Interface6TasterEv>
    33a2:	0e 94 3a 17 	call	0x2e74	; 0x2e74 <_Z14eingabehandlerh>
    33a6:	f5 cf       	rjmp	.-22     	; 0x3392 <main+0x4>

000033a8 <_GLOBAL__sub_I_kompass>:
#include <stdlib.h>
#include <stdio.h>
#include <avr/interrupt.h>

#include "Kompass.h"
Kompass kompass;
    33a8:	89 e3       	ldi	r24, 0x39	; 57
    33aa:	97 e0       	ldi	r25, 0x07	; 7
    33ac:	0e 94 41 1b 	call	0x3682	; 0x3682 <_ZN7KompassC1Ev>

#include "RTC.h"
RTC rtc;
    33b0:	81 e2       	ldi	r24, 0x21	; 33
    33b2:	97 e0       	ldi	r25, 0x07	; 7
    33b4:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <_ZN3RTCC1Ev>
RTC zaehler;
    33b8:	89 e0       	ldi	r24, 0x09	; 9
    33ba:	97 e0       	ldi	r25, 0x07	; 7
    33bc:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <_ZN3RTCC1Ev>
RTC stoppuhr;
    33c0:	81 ef       	ldi	r24, 0xF1	; 241
    33c2:	96 e0       	ldi	r25, 0x06	; 6
    33c4:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <_ZN3RTCC1Ev>

#include "Display.h"
Display oled;
    33c8:	80 ef       	ldi	r24, 0xF0	; 240
    33ca:	92 e0       	ldi	r25, 0x02	; 2
    33cc:	0e 94 7d 03 	call	0x6fa	; 0x6fa <_ZN7DisplayC1Ev>

#include "Interface.h"
Interface Tastatur;
    33d0:	8f ee       	ldi	r24, 0xEF	; 239
    33d2:	92 e0       	ldi	r25, 0x02	; 2
    33d4:	0e 94 50 1a 	call	0x34a0	; 0x34a0 <_ZN9InterfaceC1Ev>

#include "Output.h"
Output LED('D',PORTD7);
    33d8:	47 e0       	ldi	r20, 0x07	; 7
    33da:	64 e4       	ldi	r22, 0x44	; 68
    33dc:	8d ee       	ldi	r24, 0xED	; 237
    33de:	92 e0       	ldi	r25, 0x02	; 2
    33e0:	0e 94 b1 1c 	call	0x3962	; 0x3962 <_ZN6OutputC1Ehh>
Output Vibrationsmotor('B',PORTB0);
    33e4:	40 e0       	ldi	r20, 0x00	; 0
    33e6:	62 e4       	ldi	r22, 0x42	; 66
    33e8:	8b ee       	ldi	r24, 0xEB	; 235
    33ea:	92 e0       	ldi	r25, 0x02	; 2
    33ec:	0e 94 b1 1c 	call	0x3962	; 0x3962 <_ZN6OutputC1Ehh>

#include "Pressure.h"
Pressure Baro;
    33f0:	8d ed       	ldi	r24, 0xDD	; 221
    33f2:	92 e0       	ldi	r25, 0x02	; 2
    33f4:	0e 94 c3 1d 	call	0x3b86	; 0x3b86 <_ZN8PressureC1Ev>
    33f8:	08 95       	ret

000033fa <_GLOBAL__sub_D_kompass>:
    33fa:	8d ed       	ldi	r24, 0xDD	; 221
    33fc:	92 e0       	ldi	r25, 0x02	; 2
    33fe:	0e 94 87 1d 	call	0x3b0e	; 0x3b0e <_ZN8PressureD1Ev>
#include "Interface.h"
Interface Tastatur;

#include "Output.h"
Output LED('D',PORTD7);
Output Vibrationsmotor('B',PORTB0);
    3402:	8b ee       	ldi	r24, 0xEB	; 235
    3404:	92 e0       	ldi	r25, 0x02	; 2
    3406:	0e 94 e1 1c 	call	0x39c2	; 0x39c2 <_ZN6OutputD1Ev>

#include "Interface.h"
Interface Tastatur;

#include "Output.h"
Output LED('D',PORTD7);
    340a:	8d ee       	ldi	r24, 0xED	; 237
    340c:	92 e0       	ldi	r25, 0x02	; 2
    340e:	0e 94 e1 1c 	call	0x39c2	; 0x39c2 <_ZN6OutputD1Ev>

#include "Display.h"
Display oled;

#include "Interface.h"
Interface Tastatur;
    3412:	8f ee       	ldi	r24, 0xEF	; 239
    3414:	92 e0       	ldi	r25, 0x02	; 2
    3416:	0e 94 51 1a 	call	0x34a2	; 0x34a2 <_ZN9InterfaceD1Ev>
RTC rtc;
RTC zaehler;
RTC stoppuhr;

#include "Display.h"
Display oled;
    341a:	80 ef       	ldi	r24, 0xF0	; 240
    341c:	92 e0       	ldi	r25, 0x02	; 2
    341e:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <_ZN7DisplayD1Ev>
Kompass kompass;

#include "RTC.h"
RTC rtc;
RTC zaehler;
RTC stoppuhr;
    3422:	81 ef       	ldi	r24, 0xF1	; 241
    3424:	96 e0       	ldi	r25, 0x06	; 6
    3426:	0e 94 1e 1f 	call	0x3e3c	; 0x3e3c <_ZN3RTCD1Ev>
#include "Kompass.h"
Kompass kompass;

#include "RTC.h"
RTC rtc;
RTC zaehler;
    342a:	89 e0       	ldi	r24, 0x09	; 9
    342c:	97 e0       	ldi	r25, 0x07	; 7
    342e:	0e 94 1e 1f 	call	0x3e3c	; 0x3e3c <_ZN3RTCD1Ev>

#include "Kompass.h"
Kompass kompass;

#include "RTC.h"
RTC rtc;
    3432:	81 e2       	ldi	r24, 0x21	; 33
    3434:	97 e0       	ldi	r25, 0x07	; 7
    3436:	0e 94 1e 1f 	call	0x3e3c	; 0x3e3c <_ZN3RTCD1Ev>
#include <stdlib.h>
#include <stdio.h>
#include <avr/interrupt.h>

#include "Kompass.h"
Kompass kompass;
    343a:	89 e3       	ldi	r24, 0x39	; 57
    343c:	97 e0       	ldi	r25, 0x07	; 7
    343e:	0e 94 1e 1b 	call	0x363c	; 0x363c <_ZN7KompassD1Ev>
    3442:	08 95       	ret

00003444 <_ZN3I2CC1Ev>:

// default constructor
I2C::I2C()
{
	//TWBR = 10; //Bit fuer 100khz an Tackrate, reicht gerade noch so
	TWBR=2; //fuer 8MHz und 400kHz in SCL
    3444:	82 e0       	ldi	r24, 0x02	; 2
    3446:	80 93 b8 00 	sts	0x00B8, r24
    344a:	08 95       	ret

0000344c <_ZN3I2CD1Ev>:
} //I2C

// default destructor
I2C::~I2C()
    344c:	08 95       	ret

0000344e <_ZN3I2C9twi_startEv>:
{
} //~I2C

void I2C::twi_start(){
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    344e:	84 ea       	ldi	r24, 0xA4	; 164
    3450:	80 93 bc 00 	sts	0x00BC, r24
    3454:	08 95       	ret

00003456 <_ZN3I2C8twi_stopEv>:
}
void I2C::twi_stop(){
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    3456:	84 e9       	ldi	r24, 0x94	; 148
    3458:	80 93 bc 00 	sts	0x00BC, r24
    345c:	08 95       	ret

0000345e <_ZN3I2C9twi_writeEh>:
	TWCR = (1<<TWINT) | (1<<TWEN);
	TWCR &= ~(1<<TWEA);
}

void I2C::twi_write(uint8_t data){
	while(!(TWCR & (1<<TWINT)));
    345e:	ec eb       	ldi	r30, 0xBC	; 188
    3460:	f0 e0       	ldi	r31, 0x00	; 0
    3462:	80 81       	ld	r24, Z
    3464:	88 23       	and	r24, r24
    3466:	ec f7       	brge	.-6      	; 0x3462 <_ZN3I2C9twi_writeEh+0x4>
	TWDR = data;
    3468:	60 93 bb 00 	sts	0x00BB, r22
	TWCR = (1<<TWINT) | (1<<TWEN);
    346c:	84 e8       	ldi	r24, 0x84	; 132
    346e:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));
    3472:	ec eb       	ldi	r30, 0xBC	; 188
    3474:	f0 e0       	ldi	r31, 0x00	; 0
    3476:	80 81       	ld	r24, Z
    3478:	88 23       	and	r24, r24
    347a:	ec f7       	brge	.-6      	; 0x3476 <_ZN3I2C9twi_writeEh+0x18>
}
    347c:	08 95       	ret

0000347e <_ZN3I2C8twi_readEh>:

uint8_t I2C::twi_read(uint8_t ack){
	if (ack)
    347e:	66 23       	and	r22, r22
    3480:	21 f0       	breq	.+8      	; 0x348a <_ZN3I2C8twi_readEh+0xc>
	{
		TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    3482:	84 ec       	ldi	r24, 0xC4	; 196
    3484:	80 93 bc 00 	sts	0x00BC, r24
    3488:	03 c0       	rjmp	.+6      	; 0x3490 <_ZN3I2C8twi_readEh+0x12>
	}
	else{
		TWCR = (1<<TWINT) | (1<<TWEN);
    348a:	84 e8       	ldi	r24, 0x84	; 132
    348c:	80 93 bc 00 	sts	0x00BC, r24
	}
	
	while(!(TWCR & (1<<TWINT)));
    3490:	ec eb       	ldi	r30, 0xBC	; 188
    3492:	f0 e0       	ldi	r31, 0x00	; 0
    3494:	80 81       	ld	r24, Z
    3496:	88 23       	and	r24, r24
    3498:	ec f7       	brge	.-6      	; 0x3494 <_ZN3I2C8twi_readEh+0x16>
	return TWDR;
    349a:	80 91 bb 00 	lds	r24, 0x00BB
    349e:	08 95       	ret

000034a0 <_ZN9InterfaceC1Ev>:


#include "Interface.h"

// default constructor
Interface::Interface()
    34a0:	08 95       	ret

000034a2 <_ZN9InterfaceD1Ev>:
{
} //Interface

// default destructor
Interface::~Interface()
    34a2:	08 95       	ret

000034a4 <_ZN9Interface8debounceEPVhh>:
{
} //~Interface

uint8_t Interface::debounce(volatile uint8_t *port, uint8_t pin)
{
	if ( (*port & (1 << pin)) )
    34a4:	fb 01       	movw	r30, r22
    34a6:	80 81       	ld	r24, Z
    34a8:	90 e0       	ldi	r25, 0x00	; 0
    34aa:	04 2e       	mov	r0, r20
    34ac:	02 c0       	rjmp	.+4      	; 0x34b2 <_ZN9Interface8debounceEPVhh+0xe>
    34ae:	95 95       	asr	r25
    34b0:	87 95       	ror	r24
    34b2:	0a 94       	dec	r0
    34b4:	e2 f7       	brpl	.-8      	; 0x34ae <_ZN9Interface8debounceEPVhh+0xa>
    34b6:	80 ff       	sbrs	r24, 0
    34b8:	17 c0       	rjmp	.+46     	; 0x34e8 <_ZN9Interface8debounceEPVhh+0x44>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    34ba:	8f ec       	ldi	r24, 0xCF	; 207
    34bc:	97 e0       	ldi	r25, 0x07	; 7
    34be:	01 97       	sbiw	r24, 0x01	; 1
    34c0:	f1 f7       	brne	.-4      	; 0x34be <_ZN9Interface8debounceEPVhh+0x1a>
    34c2:	00 c0       	rjmp	.+0      	; 0x34c4 <_ZN9Interface8debounceEPVhh+0x20>
    34c4:	00 00       	nop
	{
		/* Pin wurde auf Masse gezogen, 100ms warten   */
		_delay_ms(1);
		if ( !(*port & (1 << pin)) )
    34c6:	fb 01       	movw	r30, r22
    34c8:	80 81       	ld	r24, Z
    34ca:	90 e0       	ldi	r25, 0x00	; 0
    34cc:	9c 01       	movw	r18, r24
    34ce:	02 c0       	rjmp	.+4      	; 0x34d4 <_ZN9Interface8debounceEPVhh+0x30>
    34d0:	35 95       	asr	r19
    34d2:	27 95       	ror	r18
    34d4:	4a 95       	dec	r20
    34d6:	e2 f7       	brpl	.-8      	; 0x34d0 <_ZN9Interface8debounceEPVhh+0x2c>
    34d8:	20 fd       	sbrc	r18, 0
    34da:	08 c0       	rjmp	.+16     	; 0x34ec <_ZN9Interface8debounceEPVhh+0x48>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    34dc:	3a e1       	ldi	r19, 0x1A	; 26
    34de:	3a 95       	dec	r19
    34e0:	f1 f7       	brne	.-4      	; 0x34de <_ZN9Interface8debounceEPVhh+0x3a>
    34e2:	00 c0       	rjmp	.+0      	; 0x34e4 <_ZN9Interface8debounceEPVhh+0x40>
		{
			/* Anwender Zeit zum Loslassen des Tasters geben */
			_delay_us(10);
			return 1;
    34e4:	81 e0       	ldi	r24, 0x01	; 1
    34e6:	08 95       	ret
		}
	}
	return 0;
    34e8:	80 e0       	ldi	r24, 0x00	; 0
    34ea:	08 95       	ret
    34ec:	80 e0       	ldi	r24, 0x00	; 0
}
    34ee:	08 95       	ret

000034f0 <_ZN9Interface6TasterEv>:
		break;
	}
	return abfrage;
}

uint8_t Interface::Taster(){
    34f0:	1f 93       	push	r17
    34f2:	cf 93       	push	r28
    34f4:	df 93       	push	r29
    34f6:	ec 01       	movw	r28, r24
	uint8_t taste = 'A';
	
	//erste Zeile
	PORTD |= (1<<PORTD3);
    34f8:	5b 9a       	sbi	0x0b, 3	; 11
    34fa:	82 e0       	ldi	r24, 0x02	; 2
    34fc:	8a 95       	dec	r24
    34fe:	f1 f7       	brne	.-4      	; 0x34fc <_ZN9Interface6TasterEv+0xc>
    3500:	00 c0       	rjmp	.+0      	; 0x3502 <_ZN9Interface6TasterEv+0x12>
	_delay_us(1);
	if(debounce(&PIND,PIND4)){
    3502:	44 e0       	ldi	r20, 0x04	; 4
    3504:	69 e2       	ldi	r22, 0x29	; 41
    3506:	70 e0       	ldi	r23, 0x00	; 0
    3508:	ce 01       	movw	r24, r28
    350a:	0e 94 52 1a 	call	0x34a4	; 0x34a4 <_ZN9Interface8debounceEPVhh>
    350e:	81 11       	cpse	r24, r1
    3510:	12 c0       	rjmp	.+36     	; 0x3536 <_ZN9Interface6TasterEv+0x46>
		taste = '3';
	}
	else if (debounce(&PIND,PIND5))
    3512:	45 e0       	ldi	r20, 0x05	; 5
    3514:	69 e2       	ldi	r22, 0x29	; 41
    3516:	70 e0       	ldi	r23, 0x00	; 0
    3518:	ce 01       	movw	r24, r28
    351a:	0e 94 52 1a 	call	0x34a4	; 0x34a4 <_ZN9Interface8debounceEPVhh>
    351e:	81 11       	cpse	r24, r1
    3520:	0c c0       	rjmp	.+24     	; 0x353a <_ZN9Interface6TasterEv+0x4a>
	{
		taste = '2';
	}
	else if (debounce(&PIND,PIND6))
    3522:	46 e0       	ldi	r20, 0x06	; 6
    3524:	69 e2       	ldi	r22, 0x29	; 41
    3526:	70 e0       	ldi	r23, 0x00	; 0
    3528:	ce 01       	movw	r24, r28
    352a:	0e 94 52 1a 	call	0x34a4	; 0x34a4 <_ZN9Interface8debounceEPVhh>
    352e:	81 11       	cpse	r24, r1
    3530:	06 c0       	rjmp	.+12     	; 0x353e <_ZN9Interface6TasterEv+0x4e>
	}
	return abfrage;
}

uint8_t Interface::Taster(){
	uint8_t taste = 'A';
    3532:	11 e4       	ldi	r17, 0x41	; 65
    3534:	05 c0       	rjmp	.+10     	; 0x3540 <_ZN9Interface6TasterEv+0x50>
	
	//erste Zeile
	PORTD |= (1<<PORTD3);
	_delay_us(1);
	if(debounce(&PIND,PIND4)){
		taste = '3';
    3536:	13 e3       	ldi	r17, 0x33	; 51
    3538:	03 c0       	rjmp	.+6      	; 0x3540 <_ZN9Interface6TasterEv+0x50>
	}
	else if (debounce(&PIND,PIND5))
	{
		taste = '2';
    353a:	12 e3       	ldi	r17, 0x32	; 50
    353c:	01 c0       	rjmp	.+2      	; 0x3540 <_ZN9Interface6TasterEv+0x50>
	}
	else if (debounce(&PIND,PIND6))
	{
		taste = '1';
    353e:	11 e3       	ldi	r17, 0x31	; 49
	}
	PORTD &= ~(1<<PORTD3);
    3540:	5b 98       	cbi	0x0b, 3	; 11
	
	//zweite Zeile
	PORTD |= (1<<PORTD2);
    3542:	5a 9a       	sbi	0x0b, 2	; 11
    3544:	82 e0       	ldi	r24, 0x02	; 2
    3546:	8a 95       	dec	r24
    3548:	f1 f7       	brne	.-4      	; 0x3546 <_ZN9Interface6TasterEv+0x56>
    354a:	00 c0       	rjmp	.+0      	; 0x354c <_ZN9Interface6TasterEv+0x5c>
	_delay_us(1);
	if(debounce(&PIND,PIND4)){
    354c:	44 e0       	ldi	r20, 0x04	; 4
    354e:	69 e2       	ldi	r22, 0x29	; 41
    3550:	70 e0       	ldi	r23, 0x00	; 0
    3552:	ce 01       	movw	r24, r28
    3554:	0e 94 52 1a 	call	0x34a4	; 0x34a4 <_ZN9Interface8debounceEPVhh>
    3558:	81 11       	cpse	r24, r1
    355a:	11 c0       	rjmp	.+34     	; 0x357e <_ZN9Interface6TasterEv+0x8e>
		taste = '6';
	}
	else if (debounce(&PIND,PIND5))
    355c:	45 e0       	ldi	r20, 0x05	; 5
    355e:	69 e2       	ldi	r22, 0x29	; 41
    3560:	70 e0       	ldi	r23, 0x00	; 0
    3562:	ce 01       	movw	r24, r28
    3564:	0e 94 52 1a 	call	0x34a4	; 0x34a4 <_ZN9Interface8debounceEPVhh>
    3568:	81 11       	cpse	r24, r1
    356a:	0b c0       	rjmp	.+22     	; 0x3582 <_ZN9Interface6TasterEv+0x92>
	{
		taste = '5';
	}
	else if (debounce(&PIND,PIND6))
    356c:	46 e0       	ldi	r20, 0x06	; 6
    356e:	69 e2       	ldi	r22, 0x29	; 41
    3570:	70 e0       	ldi	r23, 0x00	; 0
    3572:	ce 01       	movw	r24, r28
    3574:	0e 94 52 1a 	call	0x34a4	; 0x34a4 <_ZN9Interface8debounceEPVhh>
    3578:	81 11       	cpse	r24, r1
    357a:	05 c0       	rjmp	.+10     	; 0x3586 <_ZN9Interface6TasterEv+0x96>
    357c:	05 c0       	rjmp	.+10     	; 0x3588 <_ZN9Interface6TasterEv+0x98>
	
	//zweite Zeile
	PORTD |= (1<<PORTD2);
	_delay_us(1);
	if(debounce(&PIND,PIND4)){
		taste = '6';
    357e:	16 e3       	ldi	r17, 0x36	; 54
    3580:	03 c0       	rjmp	.+6      	; 0x3588 <_ZN9Interface6TasterEv+0x98>
	}
	else if (debounce(&PIND,PIND5))
	{
		taste = '5';
    3582:	15 e3       	ldi	r17, 0x35	; 53
    3584:	01 c0       	rjmp	.+2      	; 0x3588 <_ZN9Interface6TasterEv+0x98>
	}
	else if (debounce(&PIND,PIND6))
	{
		taste = '4';
    3586:	14 e3       	ldi	r17, 0x34	; 52
	}
	PORTD &= ~(1<<PORTD2);
    3588:	5a 98       	cbi	0x0b, 2	; 11
	
	//dritte Zeile
	PORTD |= (1<<PORTD1);
    358a:	59 9a       	sbi	0x0b, 1	; 11
    358c:	82 e0       	ldi	r24, 0x02	; 2
    358e:	8a 95       	dec	r24
    3590:	f1 f7       	brne	.-4      	; 0x358e <_ZN9Interface6TasterEv+0x9e>
    3592:	00 c0       	rjmp	.+0      	; 0x3594 <_ZN9Interface6TasterEv+0xa4>
	_delay_us(1);
	if(debounce(&PIND,PIND4)){
    3594:	44 e0       	ldi	r20, 0x04	; 4
    3596:	69 e2       	ldi	r22, 0x29	; 41
    3598:	70 e0       	ldi	r23, 0x00	; 0
    359a:	ce 01       	movw	r24, r28
    359c:	0e 94 52 1a 	call	0x34a4	; 0x34a4 <_ZN9Interface8debounceEPVhh>
    35a0:	81 11       	cpse	r24, r1
    35a2:	11 c0       	rjmp	.+34     	; 0x35c6 <_ZN9Interface6TasterEv+0xd6>
		taste = '9';
	}
	else if (debounce(&PIND,PIND5))
    35a4:	45 e0       	ldi	r20, 0x05	; 5
    35a6:	69 e2       	ldi	r22, 0x29	; 41
    35a8:	70 e0       	ldi	r23, 0x00	; 0
    35aa:	ce 01       	movw	r24, r28
    35ac:	0e 94 52 1a 	call	0x34a4	; 0x34a4 <_ZN9Interface8debounceEPVhh>
    35b0:	81 11       	cpse	r24, r1
    35b2:	0b c0       	rjmp	.+22     	; 0x35ca <_ZN9Interface6TasterEv+0xda>
	{
		taste = '8';
	}
	else if (debounce(&PIND,PIND6))
    35b4:	46 e0       	ldi	r20, 0x06	; 6
    35b6:	69 e2       	ldi	r22, 0x29	; 41
    35b8:	70 e0       	ldi	r23, 0x00	; 0
    35ba:	ce 01       	movw	r24, r28
    35bc:	0e 94 52 1a 	call	0x34a4	; 0x34a4 <_ZN9Interface8debounceEPVhh>
    35c0:	81 11       	cpse	r24, r1
    35c2:	05 c0       	rjmp	.+10     	; 0x35ce <_ZN9Interface6TasterEv+0xde>
    35c4:	05 c0       	rjmp	.+10     	; 0x35d0 <_ZN9Interface6TasterEv+0xe0>
	
	//dritte Zeile
	PORTD |= (1<<PORTD1);
	_delay_us(1);
	if(debounce(&PIND,PIND4)){
		taste = '9';
    35c6:	19 e3       	ldi	r17, 0x39	; 57
    35c8:	03 c0       	rjmp	.+6      	; 0x35d0 <_ZN9Interface6TasterEv+0xe0>
	}
	else if (debounce(&PIND,PIND5))
	{
		taste = '8';
    35ca:	18 e3       	ldi	r17, 0x38	; 56
    35cc:	01 c0       	rjmp	.+2      	; 0x35d0 <_ZN9Interface6TasterEv+0xe0>
	}
	else if (debounce(&PIND,PIND6))
	{
		taste = '7';
    35ce:	17 e3       	ldi	r17, 0x37	; 55
	}
	PORTD &= ~(1<<PORT1);
    35d0:	59 98       	cbi	0x0b, 1	; 11
	
	//vierte Zeile
	PORTD |= (1<<PORTD0);
    35d2:	58 9a       	sbi	0x0b, 0	; 11
    35d4:	82 e0       	ldi	r24, 0x02	; 2
    35d6:	8a 95       	dec	r24
    35d8:	f1 f7       	brne	.-4      	; 0x35d6 <_ZN9Interface6TasterEv+0xe6>
    35da:	00 c0       	rjmp	.+0      	; 0x35dc <_ZN9Interface6TasterEv+0xec>
	_delay_us(1);
	if(debounce(&PIND,PIND4)){
    35dc:	44 e0       	ldi	r20, 0x04	; 4
    35de:	69 e2       	ldi	r22, 0x29	; 41
    35e0:	70 e0       	ldi	r23, 0x00	; 0
    35e2:	ce 01       	movw	r24, r28
    35e4:	0e 94 52 1a 	call	0x34a4	; 0x34a4 <_ZN9Interface8debounceEPVhh>
    35e8:	81 11       	cpse	r24, r1
    35ea:	11 c0       	rjmp	.+34     	; 0x360e <_ZN9Interface6TasterEv+0x11e>
		taste = '#';
	}
	else if (debounce(&PIND,PIND5))
    35ec:	45 e0       	ldi	r20, 0x05	; 5
    35ee:	69 e2       	ldi	r22, 0x29	; 41
    35f0:	70 e0       	ldi	r23, 0x00	; 0
    35f2:	ce 01       	movw	r24, r28
    35f4:	0e 94 52 1a 	call	0x34a4	; 0x34a4 <_ZN9Interface8debounceEPVhh>
    35f8:	81 11       	cpse	r24, r1
    35fa:	0b c0       	rjmp	.+22     	; 0x3612 <_ZN9Interface6TasterEv+0x122>
	{
		taste = '0';
	}
	else if (debounce(&PIND,PIND6))
    35fc:	46 e0       	ldi	r20, 0x06	; 6
    35fe:	69 e2       	ldi	r22, 0x29	; 41
    3600:	70 e0       	ldi	r23, 0x00	; 0
    3602:	ce 01       	movw	r24, r28
    3604:	0e 94 52 1a 	call	0x34a4	; 0x34a4 <_ZN9Interface8debounceEPVhh>
    3608:	81 11       	cpse	r24, r1
    360a:	05 c0       	rjmp	.+10     	; 0x3616 <_ZN9Interface6TasterEv+0x126>
    360c:	05 c0       	rjmp	.+10     	; 0x3618 <_ZN9Interface6TasterEv+0x128>
	
	//vierte Zeile
	PORTD |= (1<<PORTD0);
	_delay_us(1);
	if(debounce(&PIND,PIND4)){
		taste = '#';
    360e:	13 e2       	ldi	r17, 0x23	; 35
    3610:	03 c0       	rjmp	.+6      	; 0x3618 <_ZN9Interface6TasterEv+0x128>
	}
	else if (debounce(&PIND,PIND5))
	{
		taste = '0';
    3612:	10 e3       	ldi	r17, 0x30	; 48
    3614:	01 c0       	rjmp	.+2      	; 0x3618 <_ZN9Interface6TasterEv+0x128>
	}
	else if (debounce(&PIND,PIND6))
	{
		taste = '*';
    3616:	1a e2       	ldi	r17, 0x2A	; 42
	}
	PORTD &= ~(1<<PORTD0);
    3618:	58 98       	cbi	0x0b, 0	; 11
	
	return taste;
}
    361a:	81 2f       	mov	r24, r17
    361c:	df 91       	pop	r29
    361e:	cf 91       	pop	r28
    3620:	1f 91       	pop	r17
    3622:	08 95       	ret

00003624 <_ZN9Interface17ZahlenausTastaturEv>:

uint8_t Interface::ZahlenausTastatur(){
    3624:	cf 93       	push	r28
    3626:	df 93       	push	r29
    3628:	ec 01       	movw	r28, r24
	while(true){
		uint8_t taste = Taster();
    362a:	ce 01       	movw	r24, r28
    362c:	0e 94 78 1a 	call	0x34f0	; 0x34f0 <_ZN9Interface6TasterEv>
		if(taste>='0' && taste<='9'){
    3630:	80 53       	subi	r24, 0x30	; 48
    3632:	8a 30       	cpi	r24, 0x0A	; 10
    3634:	d0 f7       	brcc	.-12     	; 0x362a <_ZN9Interface17ZahlenausTastaturEv+0x6>
			return taste - '0';
		}
	}
}
    3636:	df 91       	pop	r29
    3638:	cf 91       	pop	r28
    363a:	08 95       	ret

0000363c <_ZN7KompassD1Ev>:
		offset[i]=0;
	}
} //Kompass

// default destructor
Kompass::~Kompass()
    363c:	06 96       	adiw	r24, 0x06	; 6
    363e:	0e 94 26 1a 	call	0x344c	; 0x344c <_ZN3I2CD1Ev>
    3642:	08 95       	ret

00003644 <_ZN7Kompass16HMC5883L_commandEhh>:
{
} //~Kompass

void Kompass::HMC5883L_command(uint8_t adresse, uint8_t command){
    3644:	0f 93       	push	r16
    3646:	1f 93       	push	r17
    3648:	cf 93       	push	r28
    364a:	df 93       	push	r29
    364c:	06 2f       	mov	r16, r22
    364e:	14 2f       	mov	r17, r20
	i2c.twi_start();
    3650:	ec 01       	movw	r28, r24
    3652:	26 96       	adiw	r28, 0x06	; 6
    3654:	ce 01       	movw	r24, r28
    3656:	0e 94 27 1a 	call	0x344e	; 0x344e <_ZN3I2C9twi_startEv>
	i2c.twi_write(HMCWRITEADRESSE);
    365a:	6c e3       	ldi	r22, 0x3C	; 60
    365c:	ce 01       	movw	r24, r28
    365e:	0e 94 2f 1a 	call	0x345e	; 0x345e <_ZN3I2C9twi_writeEh>
	i2c.twi_write(adresse);
    3662:	60 2f       	mov	r22, r16
    3664:	ce 01       	movw	r24, r28
    3666:	0e 94 2f 1a 	call	0x345e	; 0x345e <_ZN3I2C9twi_writeEh>
	i2c.twi_write(command);
    366a:	61 2f       	mov	r22, r17
    366c:	ce 01       	movw	r24, r28
    366e:	0e 94 2f 1a 	call	0x345e	; 0x345e <_ZN3I2C9twi_writeEh>
	i2c.twi_stop();
    3672:	ce 01       	movw	r24, r28
    3674:	0e 94 2b 1a 	call	0x3456	; 0x3456 <_ZN3I2C8twi_stopEv>
}
    3678:	df 91       	pop	r29
    367a:	cf 91       	pop	r28
    367c:	1f 91       	pop	r17
    367e:	0f 91       	pop	r16
    3680:	08 95       	ret

00003682 <_ZN7KompassC1Ev>:


#include "Kompass.h"

// default constructor
Kompass::Kompass()
    3682:	cf 93       	push	r28
    3684:	df 93       	push	r29
    3686:	ec 01       	movw	r28, r24
    3688:	06 96       	adiw	r24, 0x06	; 6
    368a:	0e 94 22 1a 	call	0x3444	; 0x3444 <_ZN3I2CC1Ev>
{
	//Config Register A
	HMC5883L_command(0x00, HMCSAMPLES8+HMCDATARATE15+HMCMEASUREMODENORMAL);
    368e:	40 e7       	ldi	r20, 0x70	; 112
    3690:	60 e0       	ldi	r22, 0x00	; 0
    3692:	ce 01       	movw	r24, r28
    3694:	0e 94 22 1b 	call	0x3644	; 0x3644 <_ZN7Kompass16HMC5883L_commandEhh>

	//Config Gain
	HMC5883L_command(0x01, HMCGAIN1090);
    3698:	40 e2       	ldi	r20, 0x20	; 32
    369a:	61 e0       	ldi	r22, 0x01	; 1
    369c:	ce 01       	movw	r24, r28
    369e:	0e 94 22 1b 	call	0x3644	; 0x3644 <_ZN7Kompass16HMC5883L_commandEhh>

	//Set Mode auf single
	HMC5883L_command(0x02, HMCSIGLEMODE);
    36a2:	41 e0       	ldi	r20, 0x01	; 1
    36a4:	62 e0       	ldi	r22, 0x02	; 2
    36a6:	ce 01       	movw	r24, r28
    36a8:	0e 94 22 1b 	call	0x3644	; 0x3644 <_ZN7Kompass16HMC5883L_commandEhh>
	//Variablen
	for(uint8_t i=0;i<3;i++){
		achsen[i]=0;
    36ac:	19 82       	std	Y+1, r1	; 0x01
    36ae:	18 82       	st	Y, r1
		offset[i]=0;
    36b0:	18 86       	std	Y+8, r1	; 0x08
    36b2:	1f 82       	std	Y+7, r1	; 0x07

	//Set Mode auf single
	HMC5883L_command(0x02, HMCSIGLEMODE);
	//Variablen
	for(uint8_t i=0;i<3;i++){
		achsen[i]=0;
    36b4:	1b 82       	std	Y+3, r1	; 0x03
    36b6:	1a 82       	std	Y+2, r1	; 0x02
		offset[i]=0;
    36b8:	1a 86       	std	Y+10, r1	; 0x0a
    36ba:	19 86       	std	Y+9, r1	; 0x09

	//Set Mode auf single
	HMC5883L_command(0x02, HMCSIGLEMODE);
	//Variablen
	for(uint8_t i=0;i<3;i++){
		achsen[i]=0;
    36bc:	1d 82       	std	Y+5, r1	; 0x05
    36be:	1c 82       	std	Y+4, r1	; 0x04
		offset[i]=0;
    36c0:	1c 86       	std	Y+12, r1	; 0x0c
    36c2:	1b 86       	std	Y+11, r1	; 0x0b
	}
} //Kompass
    36c4:	df 91       	pop	r29
    36c6:	cf 91       	pop	r28
    36c8:	08 95       	ret

000036ca <_ZN7Kompass20HMC5883L_readHeadingEv>:
		achsen[i]=0;
		offset[i]=0;
	}
}

uint8_t Kompass::HMC5883L_readHeading(){
    36ca:	bf 92       	push	r11
    36cc:	cf 92       	push	r12
    36ce:	df 92       	push	r13
    36d0:	ef 92       	push	r14
    36d2:	ff 92       	push	r15
    36d4:	0f 93       	push	r16
    36d6:	1f 93       	push	r17
    36d8:	cf 93       	push	r28
    36da:	df 93       	push	r29
    36dc:	00 d0       	rcall	.+0      	; 0x36de <_ZN7Kompass20HMC5883L_readHeadingEv+0x14>
    36de:	00 d0       	rcall	.+0      	; 0x36e0 <_ZN7Kompass20HMC5883L_readHeadingEv+0x16>
    36e0:	00 d0       	rcall	.+0      	; 0x36e2 <_ZN7Kompass20HMC5883L_readHeadingEv+0x18>
    36e2:	cd b7       	in	r28, 0x3d	; 61
    36e4:	de b7       	in	r29, 0x3e	; 62
    36e6:	6c 01       	movw	r12, r24
	cli();
    36e8:	f8 94       	cli
	uint8_t heading[6];
	i2c.twi_start();
    36ea:	7c 01       	movw	r14, r24
    36ec:	26 e0       	ldi	r18, 0x06	; 6
    36ee:	e2 0e       	add	r14, r18
    36f0:	f1 1c       	adc	r15, r1
    36f2:	c7 01       	movw	r24, r14
    36f4:	0e 94 27 1a 	call	0x344e	; 0x344e <_ZN3I2C9twi_startEv>
	i2c.twi_write(HMCWRITEADRESSE);
    36f8:	6c e3       	ldi	r22, 0x3C	; 60
    36fa:	c7 01       	movw	r24, r14
    36fc:	0e 94 2f 1a 	call	0x345e	; 0x345e <_ZN3I2C9twi_writeEh>
	i2c.twi_write(0x03);
    3700:	63 e0       	ldi	r22, 0x03	; 3
    3702:	c7 01       	movw	r24, r14
    3704:	0e 94 2f 1a 	call	0x345e	; 0x345e <_ZN3I2C9twi_writeEh>
	i2c.twi_start();
    3708:	c7 01       	movw	r24, r14
    370a:	0e 94 27 1a 	call	0x344e	; 0x344e <_ZN3I2C9twi_startEv>
	i2c.twi_write(HMCREADADRESSE);
    370e:	6d e3       	ldi	r22, 0x3D	; 61
    3710:	c7 01       	movw	r24, r14
    3712:	0e 94 2f 1a 	call	0x345e	; 0x345e <_ZN3I2C9twi_writeEh>
    3716:	8e 01       	movw	r16, r28
    3718:	0f 5f       	subi	r16, 0xFF	; 255
    371a:	1f 4f       	sbci	r17, 0xFF	; 255
	
	for(uint8_t i=0; i<6;i++){
    371c:	b1 2c       	mov	r11, r1
		if (i<5)
    371e:	84 e0       	ldi	r24, 0x04	; 4
    3720:	8b 15       	cp	r24, r11
    3722:	38 f0       	brcs	.+14     	; 0x3732 <_ZN7Kompass20HMC5883L_readHeadingEv+0x68>
		{
			heading[i]=i2c.twi_read(1);
    3724:	61 e0       	ldi	r22, 0x01	; 1
    3726:	c7 01       	movw	r24, r14
    3728:	0e 94 3f 1a 	call	0x347e	; 0x347e <_ZN3I2C8twi_readEh>
    372c:	f8 01       	movw	r30, r16
    372e:	80 83       	st	Z, r24
    3730:	06 c0       	rjmp	.+12     	; 0x373e <_ZN7Kompass20HMC5883L_readHeadingEv+0x74>
		}
		else
		{
			heading[i]=i2c.twi_read(0);
    3732:	60 e0       	ldi	r22, 0x00	; 0
    3734:	c7 01       	movw	r24, r14
    3736:	0e 94 3f 1a 	call	0x347e	; 0x347e <_ZN3I2C8twi_readEh>
    373a:	f8 01       	movw	r30, r16
    373c:	80 83       	st	Z, r24
	i2c.twi_write(HMCWRITEADRESSE);
	i2c.twi_write(0x03);
	i2c.twi_start();
	i2c.twi_write(HMCREADADRESSE);
	
	for(uint8_t i=0; i<6;i++){
    373e:	b3 94       	inc	r11
    3740:	0f 5f       	subi	r16, 0xFF	; 255
    3742:	1f 4f       	sbci	r17, 0xFF	; 255
    3744:	f6 e0       	ldi	r31, 0x06	; 6
    3746:	bf 12       	cpse	r11, r31
    3748:	ea cf       	rjmp	.-44     	; 0x371e <_ZN7Kompass20HMC5883L_readHeadingEv+0x54>
		{
			heading[i]=i2c.twi_read(0);
		}
		
	}
	i2c.twi_stop();
    374a:	c7 01       	movw	r24, r14
    374c:	0e 94 2b 1a 	call	0x3456	; 0x3456 <_ZN3I2C8twi_stopEv>
	achsen[0] =(int16_t) (heading[1] | (heading[0] << 8));
    3750:	89 81       	ldd	r24, Y+1	; 0x01
    3752:	90 e0       	ldi	r25, 0x00	; 0
    3754:	98 2f       	mov	r25, r24
    3756:	88 27       	eor	r24, r24
    3758:	2a 81       	ldd	r18, Y+2	; 0x02
    375a:	82 2b       	or	r24, r18
    375c:	f6 01       	movw	r30, r12
    375e:	91 83       	std	Z+1, r25	; 0x01
    3760:	80 83       	st	Z, r24
	achsen[2] =(int16_t) (heading[3] | (heading[2] << 8));
    3762:	8b 81       	ldd	r24, Y+3	; 0x03
    3764:	90 e0       	ldi	r25, 0x00	; 0
    3766:	98 2f       	mov	r25, r24
    3768:	88 27       	eor	r24, r24
    376a:	2c 81       	ldd	r18, Y+4	; 0x04
    376c:	82 2b       	or	r24, r18
    376e:	95 83       	std	Z+5, r25	; 0x05
    3770:	84 83       	std	Z+4, r24	; 0x04
	achsen[1] =(int16_t) (heading[5] | (heading[4] << 8));
    3772:	8d 81       	ldd	r24, Y+5	; 0x05
    3774:	90 e0       	ldi	r25, 0x00	; 0
    3776:	98 2f       	mov	r25, r24
    3778:	88 27       	eor	r24, r24
    377a:	2e 81       	ldd	r18, Y+6	; 0x06
    377c:	82 2b       	or	r24, r18
    377e:	93 83       	std	Z+3, r25	; 0x03
    3780:	82 83       	std	Z+2, r24	; 0x02
	sei();
    3782:	78 94       	sei
	if (achsen[0]==-4096 || achsen[1]==-4096 || achsen[2]==-4096)
    3784:	f6 01       	movw	r30, r12
    3786:	80 81       	ld	r24, Z
    3788:	91 81       	ldd	r25, Z+1	; 0x01
    378a:	81 15       	cp	r24, r1
    378c:	90 4f       	sbci	r25, 0xF0	; 240
    378e:	09 f4       	brne	.+2      	; 0x3792 <_ZN7Kompass20HMC5883L_readHeadingEv+0xc8>
    3790:	47 c0       	rjmp	.+142    	; 0x3820 <_ZN7Kompass20HMC5883L_readHeadingEv+0x156>
    3792:	f6 01       	movw	r30, r12
    3794:	82 81       	ldd	r24, Z+2	; 0x02
    3796:	93 81       	ldd	r25, Z+3	; 0x03
    3798:	81 15       	cp	r24, r1
    379a:	90 4f       	sbci	r25, 0xF0	; 240
    379c:	09 f4       	brne	.+2      	; 0x37a0 <_ZN7Kompass20HMC5883L_readHeadingEv+0xd6>
    379e:	42 c0       	rjmp	.+132    	; 0x3824 <_ZN7Kompass20HMC5883L_readHeadingEv+0x15a>
    37a0:	f6 01       	movw	r30, r12
    37a2:	84 81       	ldd	r24, Z+4	; 0x04
    37a4:	95 81       	ldd	r25, Z+5	; 0x05
    37a6:	81 15       	cp	r24, r1
    37a8:	90 4f       	sbci	r25, 0xF0	; 240
    37aa:	f1 f1       	breq	.+124    	; 0x3828 <_ZN7Kompass20HMC5883L_readHeadingEv+0x15e>
    37ac:	f6 01       	movw	r30, r12
    37ae:	83 e0       	ldi	r24, 0x03	; 3
    37b0:	df 01       	movw	r26, r30
	}
	//Kallibrierung durchfuehren, jedes mal, wenn eine abfrage stattfindet
	//somit passive kalibrierung
	else{
		for(uint8_t i=0;i<3;i++){
			if(achsen[i]>max[i]){
    37b2:	20 81       	ld	r18, Z
    37b4:	31 81       	ldd	r19, Z+1	; 0x01
    37b6:	45 85       	ldd	r20, Z+13	; 0x0d
    37b8:	56 85       	ldd	r21, Z+14	; 0x0e
    37ba:	42 17       	cp	r20, r18
    37bc:	53 07       	cpc	r21, r19
    37be:	8c f4       	brge	.+34     	; 0x37e2 <_ZN7Kompass20HMC5883L_readHeadingEv+0x118>
				max[i]=achsen[i];
    37c0:	36 87       	std	Z+14, r19	; 0x0e
    37c2:	25 87       	std	Z+13, r18	; 0x0d
				offset[i]=(max[i]+min[i])/2;
    37c4:	43 89       	ldd	r20, Z+19	; 0x13
    37c6:	54 89       	ldd	r21, Z+20	; 0x14
    37c8:	24 0f       	add	r18, r20
    37ca:	35 1f       	adc	r19, r21
    37cc:	33 23       	and	r19, r19
    37ce:	14 f4       	brge	.+4      	; 0x37d4 <_ZN7Kompass20HMC5883L_readHeadingEv+0x10a>
    37d0:	2f 5f       	subi	r18, 0xFF	; 255
    37d2:	3f 4f       	sbci	r19, 0xFF	; 255
    37d4:	35 95       	asr	r19
    37d6:	27 95       	ror	r18
    37d8:	18 96       	adiw	r26, 0x08	; 8
    37da:	3c 93       	st	X, r19
    37dc:	2e 93       	st	-X, r18
    37de:	17 97       	sbiw	r26, 0x07	; 7
    37e0:	1a c0       	rjmp	.+52     	; 0x3816 <_ZN7Kompass20HMC5883L_readHeadingEv+0x14c>
			}
			else if(achsen[i]<min[i]){
    37e2:	63 89       	ldd	r22, Z+19	; 0x13
    37e4:	74 89       	ldd	r23, Z+20	; 0x14
    37e6:	26 17       	cp	r18, r22
    37e8:	37 07       	cpc	r19, r23
    37ea:	7c f4       	brge	.+30     	; 0x380a <_ZN7Kompass20HMC5883L_readHeadingEv+0x140>
				min[i]=achsen[i];
    37ec:	34 8b       	std	Z+20, r19	; 0x14
    37ee:	23 8b       	std	Z+19, r18	; 0x13
				offset[i]=(max[i]+min[i])/2;
    37f0:	24 0f       	add	r18, r20
    37f2:	35 1f       	adc	r19, r21
    37f4:	33 23       	and	r19, r19
    37f6:	14 f4       	brge	.+4      	; 0x37fc <_ZN7Kompass20HMC5883L_readHeadingEv+0x132>
    37f8:	2f 5f       	subi	r18, 0xFF	; 255
    37fa:	3f 4f       	sbci	r19, 0xFF	; 255
    37fc:	35 95       	asr	r19
    37fe:	27 95       	ror	r18
    3800:	18 96       	adiw	r26, 0x08	; 8
    3802:	3c 93       	st	X, r19
    3804:	2e 93       	st	-X, r18
    3806:	17 97       	sbiw	r26, 0x07	; 7
    3808:	06 c0       	rjmp	.+12     	; 0x3816 <_ZN7Kompass20HMC5883L_readHeadingEv+0x14c>
			}
			else {
				achsen[i]-=offset[i];
    380a:	47 81       	ldd	r20, Z+7	; 0x07
    380c:	50 85       	ldd	r21, Z+8	; 0x08
    380e:	24 1b       	sub	r18, r20
    3810:	35 0b       	sbc	r19, r21
    3812:	31 83       	std	Z+1, r19	; 0x01
    3814:	20 83       	st	Z, r18
    3816:	81 50       	subi	r24, 0x01	; 1
    3818:	32 96       	adiw	r30, 0x02	; 2
		return 1;
	}
	//Kallibrierung durchfuehren, jedes mal, wenn eine abfrage stattfindet
	//somit passive kalibrierung
	else{
		for(uint8_t i=0;i<3;i++){
    381a:	81 11       	cpse	r24, r1
    381c:	c9 cf       	rjmp	.-110    	; 0x37b0 <_ZN7Kompass20HMC5883L_readHeadingEv+0xe6>
    381e:	05 c0       	rjmp	.+10     	; 0x382a <_ZN7Kompass20HMC5883L_readHeadingEv+0x160>
	achsen[2] =(int16_t) (heading[3] | (heading[2] << 8));
	achsen[1] =(int16_t) (heading[5] | (heading[4] << 8));
	sei();
	if (achsen[0]==-4096 || achsen[1]==-4096 || achsen[2]==-4096)
	{
		return 1;
    3820:	81 e0       	ldi	r24, 0x01	; 1
    3822:	03 c0       	rjmp	.+6      	; 0x382a <_ZN7Kompass20HMC5883L_readHeadingEv+0x160>
    3824:	81 e0       	ldi	r24, 0x01	; 1
    3826:	01 c0       	rjmp	.+2      	; 0x382a <_ZN7Kompass20HMC5883L_readHeadingEv+0x160>
    3828:	81 e0       	ldi	r24, 0x01	; 1
			}
		}
	}
	
	return 0;
}
    382a:	26 96       	adiw	r28, 0x06	; 6
    382c:	0f b6       	in	r0, 0x3f	; 63
    382e:	f8 94       	cli
    3830:	de bf       	out	0x3e, r29	; 62
    3832:	0f be       	out	0x3f, r0	; 63
    3834:	cd bf       	out	0x3d, r28	; 61
    3836:	df 91       	pop	r29
    3838:	cf 91       	pop	r28
    383a:	1f 91       	pop	r17
    383c:	0f 91       	pop	r16
    383e:	ff 90       	pop	r15
    3840:	ef 90       	pop	r14
    3842:	df 90       	pop	r13
    3844:	cf 90       	pop	r12
    3846:	bf 90       	pop	r11
    3848:	08 95       	ret

0000384a <_ZN7Kompass5angleEv>:

double Kompass::angle(){
    384a:	cf 92       	push	r12
    384c:	df 92       	push	r13
    384e:	ef 92       	push	r14
    3850:	ff 92       	push	r15
    3852:	cf 93       	push	r28
    3854:	df 93       	push	r29
    3856:	ec 01       	movw	r28, r24
	double angle=0;
	if (HMC5883L_readHeading())
    3858:	0e 94 65 1b 	call	0x36ca	; 0x36ca <_ZN7Kompass20HMC5883L_readHeadingEv>
    385c:	81 11       	cpse	r24, r1
    385e:	57 c0       	rjmp	.+174    	; 0x390e <_ZN7Kompass5angleEv+0xc4>
	{
		angle=-1.0;
	}
	else{
		angle=atan2f(achsen[0],achsen[2])*180.0/M_PI+180.0;
    3860:	6c 81       	ldd	r22, Y+4	; 0x04
    3862:	7d 81       	ldd	r23, Y+5	; 0x05
    3864:	88 27       	eor	r24, r24
    3866:	77 fd       	sbrc	r23, 7
    3868:	80 95       	com	r24
    386a:	98 2f       	mov	r25, r24
    386c:	0e 94 d5 21 	call	0x43aa	; 0x43aa <__floatsisf>
    3870:	6b 01       	movw	r12, r22
    3872:	7c 01       	movw	r14, r24
    3874:	68 81       	ld	r22, Y
    3876:	79 81       	ldd	r23, Y+1	; 0x01
    3878:	88 27       	eor	r24, r24
    387a:	77 fd       	sbrc	r23, 7
    387c:	80 95       	com	r24
    387e:	98 2f       	mov	r25, r24
    3880:	0e 94 d5 21 	call	0x43aa	; 0x43aa <__floatsisf>
    3884:	a7 01       	movw	r20, r14
    3886:	96 01       	movw	r18, r12
    3888:	0e 94 e0 20 	call	0x41c0	; 0x41c0 <atan2>
    388c:	20 e0       	ldi	r18, 0x00	; 0
    388e:	30 e0       	ldi	r19, 0x00	; 0
    3890:	44 e3       	ldi	r20, 0x34	; 52
    3892:	53 e4       	ldi	r21, 0x43	; 67
    3894:	0e 94 33 23 	call	0x4666	; 0x4666 <__mulsf3>
    3898:	2b ed       	ldi	r18, 0xDB	; 219
    389a:	3f e0       	ldi	r19, 0x0F	; 15
    389c:	49 e4       	ldi	r20, 0x49	; 73
    389e:	50 e4       	ldi	r21, 0x40	; 64
    38a0:	0e 94 3a 21 	call	0x4274	; 0x4274 <__divsf3>
    38a4:	20 e0       	ldi	r18, 0x00	; 0
    38a6:	30 e0       	ldi	r19, 0x00	; 0
    38a8:	44 e3       	ldi	r20, 0x34	; 52
    38aa:	53 e4       	ldi	r21, 0x43	; 67
    38ac:	0e 94 6d 20 	call	0x40da	; 0x40da <__addsf3>
		//deklination
		angle+=2.35;
    38b0:	26 e6       	ldi	r18, 0x66	; 102
    38b2:	36 e6       	ldi	r19, 0x66	; 102
    38b4:	46 e1       	ldi	r20, 0x16	; 22
    38b6:	50 e4       	ldi	r21, 0x40	; 64
    38b8:	0e 94 6d 20 	call	0x40da	; 0x40da <__addsf3>
    38bc:	6b 01       	movw	r12, r22
    38be:	7c 01       	movw	r14, r24
		//Normierung auf %360
		if (angle>=360)
    38c0:	20 e0       	ldi	r18, 0x00	; 0
    38c2:	30 e0       	ldi	r19, 0x00	; 0
    38c4:	44 eb       	ldi	r20, 0xB4	; 180
    38c6:	53 e4       	ldi	r21, 0x43	; 67
    38c8:	0e 94 e3 22 	call	0x45c6	; 0x45c6 <__gesf2>
    38cc:	88 23       	and	r24, r24
    38ce:	5c f0       	brlt	.+22     	; 0x38e6 <_ZN7Kompass5angleEv+0x9c>
		{
			angle-=360;
    38d0:	20 e0       	ldi	r18, 0x00	; 0
    38d2:	30 e0       	ldi	r19, 0x00	; 0
    38d4:	44 eb       	ldi	r20, 0xB4	; 180
    38d6:	53 e4       	ldi	r21, 0x43	; 67
    38d8:	c7 01       	movw	r24, r14
    38da:	b6 01       	movw	r22, r12
    38dc:	0e 94 6c 20 	call	0x40d8	; 0x40d8 <__subsf3>
    38e0:	6b 01       	movw	r12, r22
    38e2:	7c 01       	movw	r14, r24
    38e4:	1c c0       	rjmp	.+56     	; 0x391e <_ZN7Kompass5angleEv+0xd4>
		}
		else if (angle < 0)
    38e6:	20 e0       	ldi	r18, 0x00	; 0
    38e8:	30 e0       	ldi	r19, 0x00	; 0
    38ea:	a9 01       	movw	r20, r18
    38ec:	c7 01       	movw	r24, r14
    38ee:	b6 01       	movw	r22, r12
    38f0:	0e 94 33 21 	call	0x4266	; 0x4266 <__cmpsf2>
    38f4:	88 23       	and	r24, r24
    38f6:	9c f4       	brge	.+38     	; 0x391e <_ZN7Kompass5angleEv+0xd4>
		{
			angle+=360;
    38f8:	20 e0       	ldi	r18, 0x00	; 0
    38fa:	30 e0       	ldi	r19, 0x00	; 0
    38fc:	44 eb       	ldi	r20, 0xB4	; 180
    38fe:	53 e4       	ldi	r21, 0x43	; 67
    3900:	c7 01       	movw	r24, r14
    3902:	b6 01       	movw	r22, r12
    3904:	0e 94 6d 20 	call	0x40da	; 0x40da <__addsf3>
    3908:	6b 01       	movw	r12, r22
    390a:	7c 01       	movw	r14, r24
    390c:	08 c0       	rjmp	.+16     	; 0x391e <_ZN7Kompass5angleEv+0xd4>

double Kompass::angle(){
	double angle=0;
	if (HMC5883L_readHeading())
	{
		angle=-1.0;
    390e:	0f 2e       	mov	r0, r31
    3910:	c1 2c       	mov	r12, r1
    3912:	d1 2c       	mov	r13, r1
    3914:	f0 e8       	ldi	r31, 0x80	; 128
    3916:	ef 2e       	mov	r14, r31
    3918:	ff eb       	ldi	r31, 0xBF	; 191
    391a:	ff 2e       	mov	r15, r31
    391c:	f0 2d       	mov	r31, r0
		{
			angle+=360;
		}
	}
	
	HMC5883L_command(0x02,HMCSIGLEMODE);
    391e:	41 e0       	ldi	r20, 0x01	; 1
    3920:	62 e0       	ldi	r22, 0x02	; 2
    3922:	ce 01       	movw	r24, r28
    3924:	0e 94 22 1b 	call	0x3644	; 0x3644 <_ZN7Kompass16HMC5883L_commandEhh>
	return angle;
}
    3928:	c7 01       	movw	r24, r14
    392a:	b6 01       	movw	r22, r12
    392c:	df 91       	pop	r29
    392e:	cf 91       	pop	r28
    3930:	ff 90       	pop	r15
    3932:	ef 90       	pop	r14
    3934:	df 90       	pop	r13
    3936:	cf 90       	pop	r12
    3938:	08 95       	ret

0000393a <_ZN7Kompass25kallibrierung_ruecksetzenEv>:

void Kompass::kallibrierung_ruecksetzen(){
    393a:	fc 01       	movw	r30, r24
	for (uint8_t i=0;i<3;i++)
	{
		max[i]=0;
    393c:	16 86       	std	Z+14, r1	; 0x0e
    393e:	15 86       	std	Z+13, r1	; 0x0d
		min[i]=0;
    3940:	14 8a       	std	Z+20, r1	; 0x14
    3942:	13 8a       	std	Z+19, r1	; 0x13
		offset[i]=0;
    3944:	10 86       	std	Z+8, r1	; 0x08
    3946:	17 82       	std	Z+7, r1	; 0x07
}

void Kompass::kallibrierung_ruecksetzen(){
	for (uint8_t i=0;i<3;i++)
	{
		max[i]=0;
    3948:	10 8a       	std	Z+16, r1	; 0x10
    394a:	17 86       	std	Z+15, r1	; 0x0f
		min[i]=0;
    394c:	16 8a       	std	Z+22, r1	; 0x16
    394e:	15 8a       	std	Z+21, r1	; 0x15
		offset[i]=0;
    3950:	12 86       	std	Z+10, r1	; 0x0a
    3952:	11 86       	std	Z+9, r1	; 0x09
}

void Kompass::kallibrierung_ruecksetzen(){
	for (uint8_t i=0;i<3;i++)
	{
		max[i]=0;
    3954:	12 8a       	std	Z+18, r1	; 0x12
    3956:	11 8a       	std	Z+17, r1	; 0x11
		min[i]=0;
    3958:	10 8e       	std	Z+24, r1	; 0x18
    395a:	17 8a       	std	Z+23, r1	; 0x17
		offset[i]=0;
    395c:	14 86       	std	Z+12, r1	; 0x0c
    395e:	13 86       	std	Z+11, r1	; 0x0b
    3960:	08 95       	ret

00003962 <_ZN6OutputC1Ehh>:
#include "Output.h"

// default constructor
Output::Output(uint8_t Portpraefix, uint8_t Pinnumber)
{
	Pin=Pinnumber;
    3962:	fc 01       	movw	r30, r24
    3964:	41 83       	std	Z+1, r20	; 0x01
	Port=Portpraefix;
    3966:	60 83       	st	Z, r22
	switch (Portpraefix)
    3968:	63 34       	cpi	r22, 0x43	; 67
    396a:	89 f0       	breq	.+34     	; 0x398e <_ZN6OutputC1Ehh+0x2c>
    396c:	64 34       	cpi	r22, 0x44	; 68
    396e:	e1 f0       	breq	.+56     	; 0x39a8 <_ZN6OutputC1Ehh+0x46>
    3970:	62 34       	cpi	r22, 0x42	; 66
    3972:	31 f5       	brne	.+76     	; 0x39c0 <_ZN6OutputC1Ehh+0x5e>
	{
	case 'B':
		DDRB |= (1<<Pin);
    3974:	24 b1       	in	r18, 0x04	; 4
    3976:	81 e0       	ldi	r24, 0x01	; 1
    3978:	90 e0       	ldi	r25, 0x00	; 0
    397a:	bc 01       	movw	r22, r24
    397c:	02 c0       	rjmp	.+4      	; 0x3982 <_ZN6OutputC1Ehh+0x20>
    397e:	66 0f       	add	r22, r22
    3980:	77 1f       	adc	r23, r23
    3982:	4a 95       	dec	r20
    3984:	e2 f7       	brpl	.-8      	; 0x397e <_ZN6OutputC1Ehh+0x1c>
    3986:	ab 01       	movw	r20, r22
    3988:	42 2b       	or	r20, r18
    398a:	44 b9       	out	0x04, r20	; 4
		break;
    398c:	08 95       	ret
	case 'C':
		DDRC |= (1<<Pin);
    398e:	27 b1       	in	r18, 0x07	; 7
    3990:	81 e0       	ldi	r24, 0x01	; 1
    3992:	90 e0       	ldi	r25, 0x00	; 0
    3994:	fc 01       	movw	r30, r24
    3996:	02 c0       	rjmp	.+4      	; 0x399c <_ZN6OutputC1Ehh+0x3a>
    3998:	ee 0f       	add	r30, r30
    399a:	ff 1f       	adc	r31, r31
    399c:	4a 95       	dec	r20
    399e:	e2 f7       	brpl	.-8      	; 0x3998 <_ZN6OutputC1Ehh+0x36>
    39a0:	af 01       	movw	r20, r30
    39a2:	42 2b       	or	r20, r18
    39a4:	47 b9       	out	0x07, r20	; 7
		break;
    39a6:	08 95       	ret
	case 'D':
		DDRD |= (1<<Pin);
    39a8:	2a b1       	in	r18, 0x0a	; 10
    39aa:	81 e0       	ldi	r24, 0x01	; 1
    39ac:	90 e0       	ldi	r25, 0x00	; 0
    39ae:	bc 01       	movw	r22, r24
    39b0:	02 c0       	rjmp	.+4      	; 0x39b6 <_ZN6OutputC1Ehh+0x54>
    39b2:	66 0f       	add	r22, r22
    39b4:	77 1f       	adc	r23, r23
    39b6:	4a 95       	dec	r20
    39b8:	e2 f7       	brpl	.-8      	; 0x39b2 <_ZN6OutputC1Ehh+0x50>
    39ba:	ab 01       	movw	r20, r22
    39bc:	42 2b       	or	r20, r18
    39be:	4a b9       	out	0x0a, r20	; 10
    39c0:	08 95       	ret

000039c2 <_ZN6OutputD1Ev>:
		break;
	}
} //Output

// default destructor
Output::~Output()
    39c2:	08 95       	ret

000039c4 <_ZN6Output2onEv>:
{
} //~Output

void Output::on(){
	switch (Port)
    39c4:	fc 01       	movw	r30, r24
    39c6:	20 81       	ld	r18, Z
    39c8:	23 34       	cpi	r18, 0x43	; 67
    39ca:	91 f0       	breq	.+36     	; 0x39f0 <_ZN6Output2onEv+0x2c>
    39cc:	24 34       	cpi	r18, 0x44	; 68
    39ce:	f9 f0       	breq	.+62     	; 0x3a0e <_ZN6Output2onEv+0x4a>
    39d0:	22 34       	cpi	r18, 0x42	; 66
    39d2:	59 f5       	brne	.+86     	; 0x3a2a <_ZN6Output2onEv+0x66>
	{
		case 'B':
			PORTB |= (1<<Pin);
    39d4:	45 b1       	in	r20, 0x05	; 5
    39d6:	21 e0       	ldi	r18, 0x01	; 1
    39d8:	30 e0       	ldi	r19, 0x00	; 0
    39da:	b9 01       	movw	r22, r18
    39dc:	01 80       	ldd	r0, Z+1	; 0x01
    39de:	02 c0       	rjmp	.+4      	; 0x39e4 <_ZN6Output2onEv+0x20>
    39e0:	66 0f       	add	r22, r22
    39e2:	77 1f       	adc	r23, r23
    39e4:	0a 94       	dec	r0
    39e6:	e2 f7       	brpl	.-8      	; 0x39e0 <_ZN6Output2onEv+0x1c>
    39e8:	cb 01       	movw	r24, r22
    39ea:	84 2b       	or	r24, r20
    39ec:	85 b9       	out	0x05, r24	; 5
			break;
    39ee:	08 95       	ret
		case 'C':
			PORTC |= (1<<Pin);
    39f0:	48 b1       	in	r20, 0x08	; 8
    39f2:	21 e0       	ldi	r18, 0x01	; 1
    39f4:	30 e0       	ldi	r19, 0x00	; 0
    39f6:	b9 01       	movw	r22, r18
    39f8:	fc 01       	movw	r30, r24
    39fa:	01 80       	ldd	r0, Z+1	; 0x01
    39fc:	02 c0       	rjmp	.+4      	; 0x3a02 <_ZN6Output2onEv+0x3e>
    39fe:	66 0f       	add	r22, r22
    3a00:	77 1f       	adc	r23, r23
    3a02:	0a 94       	dec	r0
    3a04:	e2 f7       	brpl	.-8      	; 0x39fe <_ZN6Output2onEv+0x3a>
    3a06:	cb 01       	movw	r24, r22
    3a08:	84 2b       	or	r24, r20
    3a0a:	88 b9       	out	0x08, r24	; 8
			break;
    3a0c:	08 95       	ret
		case 'D':
			PORTD |= (1<<Pin);
    3a0e:	4b b1       	in	r20, 0x0b	; 11
    3a10:	21 e0       	ldi	r18, 0x01	; 1
    3a12:	30 e0       	ldi	r19, 0x00	; 0
    3a14:	b9 01       	movw	r22, r18
    3a16:	fc 01       	movw	r30, r24
    3a18:	01 80       	ldd	r0, Z+1	; 0x01
    3a1a:	02 c0       	rjmp	.+4      	; 0x3a20 <_ZN6Output2onEv+0x5c>
    3a1c:	66 0f       	add	r22, r22
    3a1e:	77 1f       	adc	r23, r23
    3a20:	0a 94       	dec	r0
    3a22:	e2 f7       	brpl	.-8      	; 0x3a1c <_ZN6Output2onEv+0x58>
    3a24:	cb 01       	movw	r24, r22
    3a26:	84 2b       	or	r24, r20
    3a28:	8b b9       	out	0x0b, r24	; 11
    3a2a:	08 95       	ret

00003a2c <_ZN6Output3offEv>:
			break;
	}
}

void Output::off(){
	switch (Port)
    3a2c:	fc 01       	movw	r30, r24
    3a2e:	20 81       	ld	r18, Z
    3a30:	23 34       	cpi	r18, 0x43	; 67
    3a32:	99 f0       	breq	.+38     	; 0x3a5a <_ZN6Output3offEv+0x2e>
    3a34:	24 34       	cpi	r18, 0x44	; 68
    3a36:	09 f1       	breq	.+66     	; 0x3a7a <_ZN6Output3offEv+0x4e>
    3a38:	22 34       	cpi	r18, 0x42	; 66
    3a3a:	71 f5       	brne	.+92     	; 0x3a98 <_ZN6Output3offEv+0x6c>
	{
		case 'B':
			PORTB &= ~(1<<Pin);
    3a3c:	45 b1       	in	r20, 0x05	; 5
    3a3e:	21 e0       	ldi	r18, 0x01	; 1
    3a40:	30 e0       	ldi	r19, 0x00	; 0
    3a42:	b9 01       	movw	r22, r18
    3a44:	01 80       	ldd	r0, Z+1	; 0x01
    3a46:	02 c0       	rjmp	.+4      	; 0x3a4c <_ZN6Output3offEv+0x20>
    3a48:	66 0f       	add	r22, r22
    3a4a:	77 1f       	adc	r23, r23
    3a4c:	0a 94       	dec	r0
    3a4e:	e2 f7       	brpl	.-8      	; 0x3a48 <_ZN6Output3offEv+0x1c>
    3a50:	cb 01       	movw	r24, r22
    3a52:	80 95       	com	r24
    3a54:	84 23       	and	r24, r20
    3a56:	85 b9       	out	0x05, r24	; 5
			break;
    3a58:	08 95       	ret
		case 'C':
			PORTC &= ~(1<<Pin);
    3a5a:	48 b1       	in	r20, 0x08	; 8
    3a5c:	21 e0       	ldi	r18, 0x01	; 1
    3a5e:	30 e0       	ldi	r19, 0x00	; 0
    3a60:	b9 01       	movw	r22, r18
    3a62:	fc 01       	movw	r30, r24
    3a64:	01 80       	ldd	r0, Z+1	; 0x01
    3a66:	02 c0       	rjmp	.+4      	; 0x3a6c <_ZN6Output3offEv+0x40>
    3a68:	66 0f       	add	r22, r22
    3a6a:	77 1f       	adc	r23, r23
    3a6c:	0a 94       	dec	r0
    3a6e:	e2 f7       	brpl	.-8      	; 0x3a68 <_ZN6Output3offEv+0x3c>
    3a70:	cb 01       	movw	r24, r22
    3a72:	80 95       	com	r24
    3a74:	84 23       	and	r24, r20
    3a76:	88 b9       	out	0x08, r24	; 8
			break;
    3a78:	08 95       	ret
		case 'D':
			PORTD &= ~(1<<Pin);
    3a7a:	4b b1       	in	r20, 0x0b	; 11
    3a7c:	21 e0       	ldi	r18, 0x01	; 1
    3a7e:	30 e0       	ldi	r19, 0x00	; 0
    3a80:	b9 01       	movw	r22, r18
    3a82:	fc 01       	movw	r30, r24
    3a84:	01 80       	ldd	r0, Z+1	; 0x01
    3a86:	02 c0       	rjmp	.+4      	; 0x3a8c <_ZN6Output3offEv+0x60>
    3a88:	66 0f       	add	r22, r22
    3a8a:	77 1f       	adc	r23, r23
    3a8c:	0a 94       	dec	r0
    3a8e:	e2 f7       	brpl	.-8      	; 0x3a88 <_ZN6Output3offEv+0x5c>
    3a90:	cb 01       	movw	r24, r22
    3a92:	80 95       	com	r24
    3a94:	84 23       	and	r24, r20
    3a96:	8b b9       	out	0x0b, r24	; 11
    3a98:	08 95       	ret

00003a9a <_ZN6Output6toggleEv>:
			break;
	}
}

void Output::toggle(){
	switch (Port)
    3a9a:	fc 01       	movw	r30, r24
    3a9c:	20 81       	ld	r18, Z
    3a9e:	23 34       	cpi	r18, 0x43	; 67
    3aa0:	a1 f0       	breq	.+40     	; 0x3aca <_ZN6Output6toggleEv+0x30>
    3aa2:	24 34       	cpi	r18, 0x44	; 68
    3aa4:	19 f1       	breq	.+70     	; 0x3aec <_ZN6Output6toggleEv+0x52>
    3aa6:	22 34       	cpi	r18, 0x42	; 66
    3aa8:	89 f5       	brne	.+98     	; 0x3b0c <_ZN6Output6toggleEv+0x72>
	{
		case 'B':
			if ((PORTB&(1<<Pin)))
    3aaa:	25 b1       	in	r18, 0x05	; 5
    3aac:	30 e0       	ldi	r19, 0x00	; 0
    3aae:	01 80       	ldd	r0, Z+1	; 0x01
    3ab0:	02 c0       	rjmp	.+4      	; 0x3ab6 <_ZN6Output6toggleEv+0x1c>
    3ab2:	35 95       	asr	r19
    3ab4:	27 95       	ror	r18
    3ab6:	0a 94       	dec	r0
    3ab8:	e2 f7       	brpl	.-8      	; 0x3ab2 <_ZN6Output6toggleEv+0x18>
    3aba:	20 ff       	sbrs	r18, 0
    3abc:	03 c0       	rjmp	.+6      	; 0x3ac4 <_ZN6Output6toggleEv+0x2a>
			{
				off();
    3abe:	0e 94 16 1d 	call	0x3a2c	; 0x3a2c <_ZN6Output3offEv>
    3ac2:	08 95       	ret
			}
			else{
				on();
    3ac4:	0e 94 e2 1c 	call	0x39c4	; 0x39c4 <_ZN6Output2onEv>
    3ac8:	08 95       	ret
			}
			break;
		case 'C':
			if ((PORTC&(1<<Pin)))
    3aca:	28 b1       	in	r18, 0x08	; 8
    3acc:	30 e0       	ldi	r19, 0x00	; 0
    3ace:	fc 01       	movw	r30, r24
    3ad0:	01 80       	ldd	r0, Z+1	; 0x01
    3ad2:	02 c0       	rjmp	.+4      	; 0x3ad8 <_ZN6Output6toggleEv+0x3e>
    3ad4:	35 95       	asr	r19
    3ad6:	27 95       	ror	r18
    3ad8:	0a 94       	dec	r0
    3ada:	e2 f7       	brpl	.-8      	; 0x3ad4 <_ZN6Output6toggleEv+0x3a>
    3adc:	20 ff       	sbrs	r18, 0
    3ade:	03 c0       	rjmp	.+6      	; 0x3ae6 <_ZN6Output6toggleEv+0x4c>
			{
				off();
    3ae0:	0e 94 16 1d 	call	0x3a2c	; 0x3a2c <_ZN6Output3offEv>
    3ae4:	08 95       	ret
			}
			else{
				on();
    3ae6:	0e 94 e2 1c 	call	0x39c4	; 0x39c4 <_ZN6Output2onEv>
    3aea:	08 95       	ret
			}
			break;
		case 'D':
			if ((PORTD&(1<<Pin)))
    3aec:	2b b1       	in	r18, 0x0b	; 11
    3aee:	30 e0       	ldi	r19, 0x00	; 0
    3af0:	fc 01       	movw	r30, r24
    3af2:	01 80       	ldd	r0, Z+1	; 0x01
    3af4:	02 c0       	rjmp	.+4      	; 0x3afa <_ZN6Output6toggleEv+0x60>
    3af6:	35 95       	asr	r19
    3af8:	27 95       	ror	r18
    3afa:	0a 94       	dec	r0
    3afc:	e2 f7       	brpl	.-8      	; 0x3af6 <_ZN6Output6toggleEv+0x5c>
    3afe:	20 ff       	sbrs	r18, 0
    3b00:	03 c0       	rjmp	.+6      	; 0x3b08 <_ZN6Output6toggleEv+0x6e>
			{
				off();
    3b02:	0e 94 16 1d 	call	0x3a2c	; 0x3a2c <_ZN6Output3offEv>
    3b06:	08 95       	ret
			}
			else{
				on();
    3b08:	0e 94 e2 1c 	call	0x39c4	; 0x39c4 <_ZN6Output2onEv>
    3b0c:	08 95       	ret

00003b0e <_ZN8PressureD1Ev>:
	Pressure0=1;
	LPS25H_initialize();
} //Pressure

// default destructor
Pressure::~Pressure()
    3b0e:	0d 96       	adiw	r24, 0x0d	; 13
    3b10:	0e 94 26 1a 	call	0x344c	; 0x344c <_ZN3I2CD1Ev>
    3b14:	08 95       	ret

00003b16 <_ZN8Pressure14LPS25H_commandEhh>:
{
} //~Pressure

void Pressure::LPS25H_command(uint8_t add, uint8_t command){
    3b16:	0f 93       	push	r16
    3b18:	1f 93       	push	r17
    3b1a:	cf 93       	push	r28
    3b1c:	df 93       	push	r29
    3b1e:	06 2f       	mov	r16, r22
    3b20:	14 2f       	mov	r17, r20
	i2c.twi_start();
    3b22:	ec 01       	movw	r28, r24
    3b24:	2d 96       	adiw	r28, 0x0d	; 13
    3b26:	ce 01       	movw	r24, r28
    3b28:	0e 94 27 1a 	call	0x344e	; 0x344e <_ZN3I2C9twi_startEv>
	i2c.twi_write(LPS25H_SA1_Write);
    3b2c:	6a eb       	ldi	r22, 0xBA	; 186
    3b2e:	ce 01       	movw	r24, r28
    3b30:	0e 94 2f 1a 	call	0x345e	; 0x345e <_ZN3I2C9twi_writeEh>
	i2c.twi_write(add);
    3b34:	60 2f       	mov	r22, r16
    3b36:	ce 01       	movw	r24, r28
    3b38:	0e 94 2f 1a 	call	0x345e	; 0x345e <_ZN3I2C9twi_writeEh>
	i2c.twi_write(command);
    3b3c:	61 2f       	mov	r22, r17
    3b3e:	ce 01       	movw	r24, r28
    3b40:	0e 94 2f 1a 	call	0x345e	; 0x345e <_ZN3I2C9twi_writeEh>
	i2c.twi_stop();
    3b44:	ce 01       	movw	r24, r28
    3b46:	0e 94 2b 1a 	call	0x3456	; 0x3456 <_ZN3I2C8twi_stopEv>
}
    3b4a:	df 91       	pop	r29
    3b4c:	cf 91       	pop	r28
    3b4e:	1f 91       	pop	r17
    3b50:	0f 91       	pop	r16
    3b52:	08 95       	ret

00003b54 <_ZN8Pressure17LPS25H_initializeEv>:

void Pressure::LPS25H_initialize(){
    3b54:	cf 93       	push	r28
    3b56:	df 93       	push	r29
    3b58:	ec 01       	movw	r28, r24
	uint8_t temp=0;
	//internal averages Pressure and Temperature (both 8)
	temp &= ~((1<<AVGT1) | (1<<AVGT0) | (1<<AVGP1) | (1<<AVGP0)); 
	LPS25H_command(RES_CONF,temp);
    3b5a:	40 e0       	ldi	r20, 0x00	; 0
    3b5c:	60 e1       	ldi	r22, 0x10	; 16
    3b5e:	0e 94 8b 1d 	call	0x3b16	; 0x3b16 <_ZN8Pressure14LPS25H_commandEhh>
	temp=0;
	//Enable device and set a single shot as well as Lock while reading
	temp |= (1<<PD) | (1<<BDU) | (1<<ODR1);
	LPS25H_command(CTRL_REG1,temp);
    3b62:	44 ea       	ldi	r20, 0xA4	; 164
    3b64:	60 e2       	ldi	r22, 0x20	; 32
    3b66:	ce 01       	movw	r24, r28
    3b68:	0e 94 8b 1d 	call	0x3b16	; 0x3b16 <_ZN8Pressure14LPS25H_commandEhh>
	temp=0;
	//FIFO on, no watermark no reset, reboot memory content, FIFO MEAN Mode
	temp |= (1<<BOOT) | (1<<FIFO_EN) | (1<<FIFO_MEAN_DEC);
	LPS25H_command(CTRL_REG2,temp);
    3b6c:	40 ed       	ldi	r20, 0xD0	; 208
    3b6e:	61 e2       	ldi	r22, 0x21	; 33
    3b70:	ce 01       	movw	r24, r28
    3b72:	0e 94 8b 1d 	call	0x3b16	; 0x3b16 <_ZN8Pressure14LPS25H_commandEhh>
	temp=0;
	//FIFO Controll register for MEAN Mode und 8 moving averages
	temp|=(1<<F_MODE2) | (1<<F_MODE1) | (1<<WTM_POINT0) | (1<<WTM_POINT1) | (1<<WTM_POINT2);
	LPS25H_command(FIFO_CTRL,temp);
    3b76:	47 ec       	ldi	r20, 0xC7	; 199
    3b78:	6e e2       	ldi	r22, 0x2E	; 46
    3b7a:	ce 01       	movw	r24, r28
    3b7c:	0e 94 8b 1d 	call	0x3b16	; 0x3b16 <_ZN8Pressure14LPS25H_commandEhh>
	//CTRL_REG4 not set
	//INTERRUPT_CFG not set
	//no threshold used
	//no Pressure offset used
	
}
    3b80:	df 91       	pop	r29
    3b82:	cf 91       	pop	r28
    3b84:	08 95       	ret

00003b86 <_ZN8PressureC1Ev>:


#include "Pressure.h"

// default constructor
Pressure::Pressure()
    3b86:	cf 93       	push	r28
    3b88:	df 93       	push	r29
    3b8a:	ec 01       	movw	r28, r24
    3b8c:	0d 96       	adiw	r24, 0x0d	; 13
    3b8e:	0e 94 22 1a 	call	0x3444	; 0x3444 <_ZN3I2CC1Ev>
{
	Press = 0;
    3b92:	18 82       	st	Y, r1
    3b94:	19 82       	std	Y+1, r1	; 0x01
    3b96:	1a 82       	std	Y+2, r1	; 0x02
    3b98:	1b 82       	std	Y+3, r1	; 0x03
	Tempera = 0;
    3b9a:	1c 82       	std	Y+4, r1	; 0x04
    3b9c:	1d 82       	std	Y+5, r1	; 0x05
    3b9e:	1e 82       	std	Y+6, r1	; 0x06
    3ba0:	1f 82       	std	Y+7, r1	; 0x07
	Tempoffset = -4;	//Aus Erfahrung
    3ba2:	8c ef       	ldi	r24, 0xFC	; 252
    3ba4:	88 87       	std	Y+8, r24	; 0x08
	Pressure0=1;
    3ba6:	40 e0       	ldi	r20, 0x00	; 0
    3ba8:	50 e0       	ldi	r21, 0x00	; 0
    3baa:	60 e8       	ldi	r22, 0x80	; 128
    3bac:	7f e3       	ldi	r23, 0x3F	; 63
    3bae:	49 87       	std	Y+9, r20	; 0x09
    3bb0:	5a 87       	std	Y+10, r21	; 0x0a
    3bb2:	6b 87       	std	Y+11, r22	; 0x0b
    3bb4:	7c 87       	std	Y+12, r23	; 0x0c
	LPS25H_initialize();
    3bb6:	ce 01       	movw	r24, r28
    3bb8:	0e 94 aa 1d 	call	0x3b54	; 0x3b54 <_ZN8Pressure17LPS25H_initializeEv>
} //Pressure
    3bbc:	df 91       	pop	r29
    3bbe:	cf 91       	pop	r28
    3bc0:	08 95       	ret

00003bc2 <_ZN8Pressure18READ_Pressure_onceEv>:
	//no threshold used
	//no Pressure offset used
	
}

void Pressure::READ_Pressure_once(){
    3bc2:	af 92       	push	r10
    3bc4:	bf 92       	push	r11
    3bc6:	cf 92       	push	r12
    3bc8:	df 92       	push	r13
    3bca:	ef 92       	push	r14
    3bcc:	ff 92       	push	r15
    3bce:	1f 93       	push	r17
    3bd0:	cf 93       	push	r28
    3bd2:	df 93       	push	r29
    3bd4:	00 d0       	rcall	.+0      	; 0x3bd6 <_ZN8Pressure18READ_Pressure_onceEv+0x14>
    3bd6:	1f 92       	push	r1
    3bd8:	cd b7       	in	r28, 0x3d	; 61
    3bda:	de b7       	in	r29, 0x3e	; 62
    3bdc:	5c 01       	movw	r10, r24
	uint8_t Wertedruck[3];
	cli();
    3bde:	f8 94       	cli
	i2c.twi_start();
    3be0:	7c 01       	movw	r14, r24
    3be2:	8d e0       	ldi	r24, 0x0D	; 13
    3be4:	e8 0e       	add	r14, r24
    3be6:	f1 1c       	adc	r15, r1
    3be8:	c7 01       	movw	r24, r14
    3bea:	0e 94 27 1a 	call	0x344e	; 0x344e <_ZN3I2C9twi_startEv>
	i2c.twi_write(LPS25H_SA1_Write);
    3bee:	6a eb       	ldi	r22, 0xBA	; 186
    3bf0:	c7 01       	movw	r24, r14
    3bf2:	0e 94 2f 1a 	call	0x345e	; 0x345e <_ZN3I2C9twi_writeEh>
	i2c.twi_write(PRESS_OUT_XL|(1<<autoincrement));
    3bf6:	68 ea       	ldi	r22, 0xA8	; 168
    3bf8:	c7 01       	movw	r24, r14
    3bfa:	0e 94 2f 1a 	call	0x345e	; 0x345e <_ZN3I2C9twi_writeEh>
	i2c.twi_start();
    3bfe:	c7 01       	movw	r24, r14
    3c00:	0e 94 27 1a 	call	0x344e	; 0x344e <_ZN3I2C9twi_startEv>
	i2c.twi_write(LPS25H_SA1_READ);
    3c04:	6b eb       	ldi	r22, 0xBB	; 187
    3c06:	c7 01       	movw	r24, r14
    3c08:	0e 94 2f 1a 	call	0x345e	; 0x345e <_ZN3I2C9twi_writeEh>
    3c0c:	fe 01       	movw	r30, r28
    3c0e:	31 96       	adiw	r30, 0x01	; 1
    3c10:	6f 01       	movw	r12, r30
	for (uint8_t i=0;i<3;i++)
    3c12:	10 e0       	ldi	r17, 0x00	; 0
	{
		if (i<2)
    3c14:	12 30       	cpi	r17, 0x02	; 2
    3c16:	38 f4       	brcc	.+14     	; 0x3c26 <_ZN8Pressure18READ_Pressure_onceEv+0x64>
		{
			Wertedruck[i] = i2c.twi_read(1);
    3c18:	61 e0       	ldi	r22, 0x01	; 1
    3c1a:	c7 01       	movw	r24, r14
    3c1c:	0e 94 3f 1a 	call	0x347e	; 0x347e <_ZN3I2C8twi_readEh>
    3c20:	f6 01       	movw	r30, r12
    3c22:	80 83       	st	Z, r24
    3c24:	06 c0       	rjmp	.+12     	; 0x3c32 <_ZN8Pressure18READ_Pressure_onceEv+0x70>
		}
		else{
			Wertedruck[i] = i2c.twi_read(0);
    3c26:	60 e0       	ldi	r22, 0x00	; 0
    3c28:	c7 01       	movw	r24, r14
    3c2a:	0e 94 3f 1a 	call	0x347e	; 0x347e <_ZN3I2C8twi_readEh>
    3c2e:	f6 01       	movw	r30, r12
    3c30:	80 83       	st	Z, r24
	i2c.twi_start();
	i2c.twi_write(LPS25H_SA1_Write);
	i2c.twi_write(PRESS_OUT_XL|(1<<autoincrement));
	i2c.twi_start();
	i2c.twi_write(LPS25H_SA1_READ);
	for (uint8_t i=0;i<3;i++)
    3c32:	1f 5f       	subi	r17, 0xFF	; 255
    3c34:	ff ef       	ldi	r31, 0xFF	; 255
    3c36:	cf 1a       	sub	r12, r31
    3c38:	df 0a       	sbc	r13, r31
    3c3a:	13 30       	cpi	r17, 0x03	; 3
    3c3c:	59 f7       	brne	.-42     	; 0x3c14 <_ZN8Pressure18READ_Pressure_onceEv+0x52>
		}
		else{
			Wertedruck[i] = i2c.twi_read(0);
		}
	}
	i2c.twi_stop();
    3c3e:	c7 01       	movw	r24, r14
    3c40:	0e 94 2b 1a 	call	0x3456	; 0x3456 <_ZN3I2C8twi_stopEv>
	Press = ((double)Wertedruck[2]*65536);
    3c44:	6b 81       	ldd	r22, Y+3	; 0x03
    3c46:	70 e0       	ldi	r23, 0x00	; 0
    3c48:	80 e0       	ldi	r24, 0x00	; 0
    3c4a:	90 e0       	ldi	r25, 0x00	; 0
    3c4c:	0e 94 d3 21 	call	0x43a6	; 0x43a6 <__floatunsisf>
    3c50:	20 e0       	ldi	r18, 0x00	; 0
    3c52:	30 e0       	ldi	r19, 0x00	; 0
    3c54:	40 e8       	ldi	r20, 0x80	; 128
    3c56:	57 e4       	ldi	r21, 0x47	; 71
    3c58:	0e 94 33 23 	call	0x4666	; 0x4666 <__mulsf3>
    3c5c:	6b 01       	movw	r12, r22
    3c5e:	7c 01       	movw	r14, r24
	Press += ((double)Wertedruck[1]*256);
    3c60:	6a 81       	ldd	r22, Y+2	; 0x02
    3c62:	70 e0       	ldi	r23, 0x00	; 0
    3c64:	80 e0       	ldi	r24, 0x00	; 0
    3c66:	90 e0       	ldi	r25, 0x00	; 0
    3c68:	0e 94 d3 21 	call	0x43a6	; 0x43a6 <__floatunsisf>
    3c6c:	20 e0       	ldi	r18, 0x00	; 0
    3c6e:	30 e0       	ldi	r19, 0x00	; 0
    3c70:	40 e8       	ldi	r20, 0x80	; 128
    3c72:	53 e4       	ldi	r21, 0x43	; 67
    3c74:	0e 94 33 23 	call	0x4666	; 0x4666 <__mulsf3>
    3c78:	9b 01       	movw	r18, r22
    3c7a:	ac 01       	movw	r20, r24
    3c7c:	c7 01       	movw	r24, r14
    3c7e:	b6 01       	movw	r22, r12
    3c80:	0e 94 6d 20 	call	0x40da	; 0x40da <__addsf3>
    3c84:	6b 01       	movw	r12, r22
    3c86:	7c 01       	movw	r14, r24
	Press += (double)Wertedruck[0];
    3c88:	69 81       	ldd	r22, Y+1	; 0x01
    3c8a:	70 e0       	ldi	r23, 0x00	; 0
    3c8c:	80 e0       	ldi	r24, 0x00	; 0
    3c8e:	90 e0       	ldi	r25, 0x00	; 0
    3c90:	0e 94 d3 21 	call	0x43a6	; 0x43a6 <__floatunsisf>
    3c94:	9b 01       	movw	r18, r22
    3c96:	ac 01       	movw	r20, r24
    3c98:	c7 01       	movw	r24, r14
    3c9a:	b6 01       	movw	r22, r12
    3c9c:	0e 94 6d 20 	call	0x40da	; 0x40da <__addsf3>
	//Press = (Wertedruck[0] + (Wertedruck[1]*256) + (Wertedruck[2]*65536));
	Press/=4096.0;
    3ca0:	20 e0       	ldi	r18, 0x00	; 0
    3ca2:	30 e0       	ldi	r19, 0x00	; 0
    3ca4:	40 e8       	ldi	r20, 0x80	; 128
    3ca6:	59 e3       	ldi	r21, 0x39	; 57
    3ca8:	0e 94 33 23 	call	0x4666	; 0x4666 <__mulsf3>
    3cac:	f5 01       	movw	r30, r10
    3cae:	60 83       	st	Z, r22
    3cb0:	71 83       	std	Z+1, r23	; 0x01
    3cb2:	82 83       	std	Z+2, r24	; 0x02
    3cb4:	93 83       	std	Z+3, r25	; 0x03
	sei();
    3cb6:	78 94       	sei
}
    3cb8:	0f 90       	pop	r0
    3cba:	0f 90       	pop	r0
    3cbc:	0f 90       	pop	r0
    3cbe:	df 91       	pop	r29
    3cc0:	cf 91       	pop	r28
    3cc2:	1f 91       	pop	r17
    3cc4:	ff 90       	pop	r15
    3cc6:	ef 90       	pop	r14
    3cc8:	df 90       	pop	r13
    3cca:	cf 90       	pop	r12
    3ccc:	bf 90       	pop	r11
    3cce:	af 90       	pop	r10
    3cd0:	08 95       	ret

00003cd2 <_ZN8Pressure16READ_TemperatureEv>:

void Pressure::READ_Temperature(){
    3cd2:	cf 92       	push	r12
    3cd4:	df 92       	push	r13
    3cd6:	ef 92       	push	r14
    3cd8:	ff 92       	push	r15
    3cda:	0f 93       	push	r16
    3cdc:	1f 93       	push	r17
    3cde:	cf 93       	push	r28
    3ce0:	df 93       	push	r29
    3ce2:	00 d0       	rcall	.+0      	; 0x3ce4 <_ZN8Pressure16READ_TemperatureEv+0x12>
    3ce4:	cd b7       	in	r28, 0x3d	; 61
    3ce6:	de b7       	in	r29, 0x3e	; 62
    3ce8:	8c 01       	movw	r16, r24
	cli();
    3cea:	f8 94       	cli
	uint8_t Wert[2];
	i2c.twi_start();
    3cec:	7c 01       	movw	r14, r24
    3cee:	8d e0       	ldi	r24, 0x0D	; 13
    3cf0:	e8 0e       	add	r14, r24
    3cf2:	f1 1c       	adc	r15, r1
    3cf4:	c7 01       	movw	r24, r14
    3cf6:	0e 94 27 1a 	call	0x344e	; 0x344e <_ZN3I2C9twi_startEv>
	i2c.twi_write(LPS25H_SA1_Write);
    3cfa:	6a eb       	ldi	r22, 0xBA	; 186
    3cfc:	c7 01       	movw	r24, r14
    3cfe:	0e 94 2f 1a 	call	0x345e	; 0x345e <_ZN3I2C9twi_writeEh>
	i2c.twi_write(TEMP_OUT_L|(1<<autoincrement));
    3d02:	6b ea       	ldi	r22, 0xAB	; 171
    3d04:	c7 01       	movw	r24, r14
    3d06:	0e 94 2f 1a 	call	0x345e	; 0x345e <_ZN3I2C9twi_writeEh>
	i2c.twi_start();
    3d0a:	c7 01       	movw	r24, r14
    3d0c:	0e 94 27 1a 	call	0x344e	; 0x344e <_ZN3I2C9twi_startEv>
	i2c.twi_write(LPS25H_SA1_READ);
    3d10:	6b eb       	ldi	r22, 0xBB	; 187
    3d12:	c7 01       	movw	r24, r14
    3d14:	0e 94 2f 1a 	call	0x345e	; 0x345e <_ZN3I2C9twi_writeEh>
    3d18:	cc 24       	eor	r12, r12
    3d1a:	c3 94       	inc	r12
    3d1c:	d1 2c       	mov	r13, r1
    3d1e:	02 c0       	rjmp	.+4      	; 0x3d24 <_ZN8Pressure16READ_TemperatureEv+0x52>
    3d20:	d3 94       	inc	r13
    3d22:	c3 94       	inc	r12
	for (uint8_t i=0;i<2;i++)
	{
		if (i<1)
    3d24:	d1 10       	cpse	r13, r1
    3d26:	06 c0       	rjmp	.+12     	; 0x3d34 <_ZN8Pressure16READ_TemperatureEv+0x62>
		{
			Wert[i] = i2c.twi_read(1);
    3d28:	61 e0       	ldi	r22, 0x01	; 1
    3d2a:	c7 01       	movw	r24, r14
    3d2c:	0e 94 3f 1a 	call	0x347e	; 0x347e <_ZN3I2C8twi_readEh>
    3d30:	89 83       	std	Y+1, r24	; 0x01
    3d32:	f6 cf       	rjmp	.-20     	; 0x3d20 <_ZN8Pressure16READ_TemperatureEv+0x4e>
		}
		else{
			Wert[i] = i2c.twi_read(0);
    3d34:	60 e0       	ldi	r22, 0x00	; 0
    3d36:	c7 01       	movw	r24, r14
    3d38:	0e 94 3f 1a 	call	0x347e	; 0x347e <_ZN3I2C8twi_readEh>
    3d3c:	e1 e0       	ldi	r30, 0x01	; 1
    3d3e:	f0 e0       	ldi	r31, 0x00	; 0
    3d40:	ec 0f       	add	r30, r28
    3d42:	fd 1f       	adc	r31, r29
    3d44:	ed 0d       	add	r30, r13
    3d46:	f1 1d       	adc	r31, r1
    3d48:	80 83       	st	Z, r24
	i2c.twi_start();
	i2c.twi_write(LPS25H_SA1_Write);
	i2c.twi_write(TEMP_OUT_L|(1<<autoincrement));
	i2c.twi_start();
	i2c.twi_write(LPS25H_SA1_READ);
	for (uint8_t i=0;i<2;i++)
    3d4a:	e1 e0       	ldi	r30, 0x01	; 1
    3d4c:	ec 15       	cp	r30, r12
    3d4e:	40 f7       	brcc	.-48     	; 0x3d20 <_ZN8Pressure16READ_TemperatureEv+0x4e>
		}
		else{
			Wert[i] = i2c.twi_read(0);
		}
	}
	i2c.twi_stop();
    3d50:	c7 01       	movw	r24, r14
    3d52:	0e 94 2b 1a 	call	0x3456	; 0x3456 <_ZN3I2C8twi_stopEv>
	Tempera = ((int16_t)(Wert[0]+(Wert[1]<<8)))/480.0;
    3d56:	89 81       	ldd	r24, Y+1	; 0x01
    3d58:	6a 81       	ldd	r22, Y+2	; 0x02
    3d5a:	70 e0       	ldi	r23, 0x00	; 0
    3d5c:	76 2f       	mov	r23, r22
    3d5e:	66 27       	eor	r22, r22
    3d60:	68 0f       	add	r22, r24
    3d62:	71 1d       	adc	r23, r1
    3d64:	88 27       	eor	r24, r24
    3d66:	77 fd       	sbrc	r23, 7
    3d68:	80 95       	com	r24
    3d6a:	98 2f       	mov	r25, r24
    3d6c:	0e 94 d5 21 	call	0x43aa	; 0x43aa <__floatsisf>
    3d70:	20 e0       	ldi	r18, 0x00	; 0
    3d72:	30 e0       	ldi	r19, 0x00	; 0
    3d74:	40 ef       	ldi	r20, 0xF0	; 240
    3d76:	53 e4       	ldi	r21, 0x43	; 67
    3d78:	0e 94 3a 21 	call	0x4274	; 0x4274 <__divsf3>
    3d7c:	6b 01       	movw	r12, r22
    3d7e:	7c 01       	movw	r14, r24
	Tempera+=42.5+Tempoffset;
    3d80:	f8 01       	movw	r30, r16
    3d82:	60 85       	ldd	r22, Z+8	; 0x08
    3d84:	77 27       	eor	r23, r23
    3d86:	67 fd       	sbrc	r22, 7
    3d88:	70 95       	com	r23
    3d8a:	87 2f       	mov	r24, r23
    3d8c:	97 2f       	mov	r25, r23
    3d8e:	0e 94 d5 21 	call	0x43aa	; 0x43aa <__floatsisf>
    3d92:	20 e0       	ldi	r18, 0x00	; 0
    3d94:	30 e0       	ldi	r19, 0x00	; 0
    3d96:	4a e2       	ldi	r20, 0x2A	; 42
    3d98:	52 e4       	ldi	r21, 0x42	; 66
    3d9a:	0e 94 6d 20 	call	0x40da	; 0x40da <__addsf3>
    3d9e:	9b 01       	movw	r18, r22
    3da0:	ac 01       	movw	r20, r24
    3da2:	c7 01       	movw	r24, r14
    3da4:	b6 01       	movw	r22, r12
    3da6:	0e 94 6d 20 	call	0x40da	; 0x40da <__addsf3>
    3daa:	f8 01       	movw	r30, r16
    3dac:	64 83       	std	Z+4, r22	; 0x04
    3dae:	75 83       	std	Z+5, r23	; 0x05
    3db0:	86 83       	std	Z+6, r24	; 0x06
    3db2:	97 83       	std	Z+7, r25	; 0x07
	sei();
    3db4:	78 94       	sei
}
    3db6:	0f 90       	pop	r0
    3db8:	0f 90       	pop	r0
    3dba:	df 91       	pop	r29
    3dbc:	cf 91       	pop	r28
    3dbe:	1f 91       	pop	r17
    3dc0:	0f 91       	pop	r16
    3dc2:	ff 90       	pop	r15
    3dc4:	ef 90       	pop	r14
    3dc6:	df 90       	pop	r13
    3dc8:	cf 90       	pop	r12
    3dca:	08 95       	ret

00003dcc <_ZN8Pressure8altitudeEd>:

double Pressure::altitude(double Pressurevalue){
    3dcc:	8f 92       	push	r8
    3dce:	9f 92       	push	r9
    3dd0:	af 92       	push	r10
    3dd2:	bf 92       	push	r11
    3dd4:	cf 92       	push	r12
    3dd6:	df 92       	push	r13
    3dd8:	ef 92       	push	r14
    3dda:	ff 92       	push	r15
	return (Pressure0*100*log(Pressure0/Pressurevalue)/(1.2041*9.81));
    3ddc:	fc 01       	movw	r30, r24
    3dde:	c1 84       	ldd	r12, Z+9	; 0x09
    3de0:	d2 84       	ldd	r13, Z+10	; 0x0a
    3de2:	e3 84       	ldd	r14, Z+11	; 0x0b
    3de4:	f4 84       	ldd	r15, Z+12	; 0x0c
    3de6:	9a 01       	movw	r18, r20
    3de8:	ab 01       	movw	r20, r22
    3dea:	c7 01       	movw	r24, r14
    3dec:	b6 01       	movw	r22, r12
    3dee:	0e 94 3a 21 	call	0x4274	; 0x4274 <__divsf3>
    3df2:	0e 94 f3 22 	call	0x45e6	; 0x45e6 <log>
    3df6:	4b 01       	movw	r8, r22
    3df8:	5c 01       	movw	r10, r24
    3dfa:	20 e0       	ldi	r18, 0x00	; 0
    3dfc:	30 e0       	ldi	r19, 0x00	; 0
    3dfe:	48 ec       	ldi	r20, 0xC8	; 200
    3e00:	52 e4       	ldi	r21, 0x42	; 66
    3e02:	c7 01       	movw	r24, r14
    3e04:	b6 01       	movw	r22, r12
    3e06:	0e 94 33 23 	call	0x4666	; 0x4666 <__mulsf3>
    3e0a:	a5 01       	movw	r20, r10
    3e0c:	94 01       	movw	r18, r8
    3e0e:	0e 94 33 23 	call	0x4666	; 0x4666 <__mulsf3>
    3e12:	2c ed       	ldi	r18, 0xDC	; 220
    3e14:	3e ef       	ldi	r19, 0xFE	; 254
    3e16:	4c e3       	ldi	r20, 0x3C	; 60
    3e18:	51 e4       	ldi	r21, 0x41	; 65
    3e1a:	0e 94 3a 21 	call	0x4274	; 0x4274 <__divsf3>
}
    3e1e:	ff 90       	pop	r15
    3e20:	ef 90       	pop	r14
    3e22:	df 90       	pop	r13
    3e24:	cf 90       	pop	r12
    3e26:	bf 90       	pop	r11
    3e28:	af 90       	pop	r10
    3e2a:	9f 90       	pop	r9
    3e2c:	8f 90       	pop	r8
    3e2e:	08 95       	ret

00003e30 <_ZN8Pressure13set_Pressure0Ed>:
void Pressure::set_Pressure0(double Pressurevalue){
	Pressure0=Pressurevalue;
    3e30:	fc 01       	movw	r30, r24
    3e32:	41 87       	std	Z+9, r20	; 0x09
    3e34:	52 87       	std	Z+10, r21	; 0x0a
    3e36:	63 87       	std	Z+11, r22	; 0x0b
    3e38:	74 87       	std	Z+12, r23	; 0x0c
    3e3a:	08 95       	ret

00003e3c <_ZN3RTCD1Ev>:
	ausgabezeitneu();
	ausgabedatumneu();
} //RTC

// default destructor
RTC::~RTC()
    3e3c:	08 95       	ret

00003e3e <_ZN3RTC14ausgabezeitneuEv>:
		}
	}
	ausgabedatumneu();
}

void RTC::ausgabezeitneu(){
    3e3e:	fc 01       	movw	r30, r24
	msg_uhr[0]='0'+Stunden/10;
    3e40:	90 89       	ldd	r25, Z+16	; 0x10
    3e42:	8d ec       	ldi	r24, 0xCD	; 205
    3e44:	98 9f       	mul	r25, r24
    3e46:	21 2d       	mov	r18, r1
    3e48:	11 24       	eor	r1, r1
    3e4a:	26 95       	lsr	r18
    3e4c:	26 95       	lsr	r18
    3e4e:	26 95       	lsr	r18
    3e50:	30 e3       	ldi	r19, 0x30	; 48
    3e52:	32 0f       	add	r19, r18
    3e54:	30 83       	st	Z, r19
	msg_uhr[1]='0'+Stunden%10;
    3e56:	22 0f       	add	r18, r18
    3e58:	32 2f       	mov	r19, r18
    3e5a:	33 0f       	add	r19, r19
    3e5c:	33 0f       	add	r19, r19
    3e5e:	23 0f       	add	r18, r19
    3e60:	92 1b       	sub	r25, r18
    3e62:	90 5d       	subi	r25, 0xD0	; 208
    3e64:	91 83       	std	Z+1, r25	; 0x01
	msg_uhr[3]='0'+Minuten/10;
    3e66:	91 89       	ldd	r25, Z+17	; 0x11
    3e68:	98 9f       	mul	r25, r24
    3e6a:	21 2d       	mov	r18, r1
    3e6c:	11 24       	eor	r1, r1
    3e6e:	26 95       	lsr	r18
    3e70:	26 95       	lsr	r18
    3e72:	26 95       	lsr	r18
    3e74:	30 e3       	ldi	r19, 0x30	; 48
    3e76:	32 0f       	add	r19, r18
    3e78:	33 83       	std	Z+3, r19	; 0x03
	msg_uhr[4]='0'+Minuten%10;
    3e7a:	22 0f       	add	r18, r18
    3e7c:	32 2f       	mov	r19, r18
    3e7e:	33 0f       	add	r19, r19
    3e80:	33 0f       	add	r19, r19
    3e82:	23 0f       	add	r18, r19
    3e84:	92 1b       	sub	r25, r18
    3e86:	90 5d       	subi	r25, 0xD0	; 208
    3e88:	94 83       	std	Z+4, r25	; 0x04
	msg_uhr[6]='0'+Sekunden/10;
    3e8a:	92 89       	ldd	r25, Z+18	; 0x12
    3e8c:	98 9f       	mul	r25, r24
    3e8e:	81 2d       	mov	r24, r1
    3e90:	11 24       	eor	r1, r1
    3e92:	86 95       	lsr	r24
    3e94:	86 95       	lsr	r24
    3e96:	86 95       	lsr	r24
    3e98:	20 e3       	ldi	r18, 0x30	; 48
    3e9a:	28 0f       	add	r18, r24
    3e9c:	26 83       	std	Z+6, r18	; 0x06
	msg_uhr[7]='0'+Sekunden%10;
    3e9e:	88 0f       	add	r24, r24
    3ea0:	28 2f       	mov	r18, r24
    3ea2:	22 0f       	add	r18, r18
    3ea4:	22 0f       	add	r18, r18
    3ea6:	82 0f       	add	r24, r18
    3ea8:	98 1b       	sub	r25, r24
    3eaa:	90 5d       	subi	r25, 0xD0	; 208
    3eac:	97 83       	std	Z+7, r25	; 0x07
    3eae:	08 95       	ret

00003eb0 <_ZN3RTC15ausgabedatumneuEv>:
}
void RTC::ausgabedatumneu(){
    3eb0:	fc 01       	movw	r30, r24
	msg_dat[0]='0'+Tag/10;
    3eb2:	94 89       	ldd	r25, Z+20	; 0x14
    3eb4:	8d ec       	ldi	r24, 0xCD	; 205
    3eb6:	98 9f       	mul	r25, r24
    3eb8:	21 2d       	mov	r18, r1
    3eba:	11 24       	eor	r1, r1
    3ebc:	26 95       	lsr	r18
    3ebe:	26 95       	lsr	r18
    3ec0:	26 95       	lsr	r18
    3ec2:	30 e3       	ldi	r19, 0x30	; 48
    3ec4:	32 0f       	add	r19, r18
    3ec6:	30 87       	std	Z+8, r19	; 0x08
	msg_dat[1]='0'+Tag%10;
    3ec8:	22 0f       	add	r18, r18
    3eca:	32 2f       	mov	r19, r18
    3ecc:	33 0f       	add	r19, r19
    3ece:	33 0f       	add	r19, r19
    3ed0:	23 0f       	add	r18, r19
    3ed2:	92 1b       	sub	r25, r18
    3ed4:	90 5d       	subi	r25, 0xD0	; 208
    3ed6:	91 87       	std	Z+9, r25	; 0x09
	msg_dat[3]='0'+Monat/10;
    3ed8:	95 89       	ldd	r25, Z+21	; 0x15
    3eda:	98 9f       	mul	r25, r24
    3edc:	21 2d       	mov	r18, r1
    3ede:	11 24       	eor	r1, r1
    3ee0:	26 95       	lsr	r18
    3ee2:	26 95       	lsr	r18
    3ee4:	26 95       	lsr	r18
    3ee6:	30 e3       	ldi	r19, 0x30	; 48
    3ee8:	32 0f       	add	r19, r18
    3eea:	33 87       	std	Z+11, r19	; 0x0b
	msg_dat[4]='0'+Monat%10;
    3eec:	22 0f       	add	r18, r18
    3eee:	32 2f       	mov	r19, r18
    3ef0:	33 0f       	add	r19, r19
    3ef2:	33 0f       	add	r19, r19
    3ef4:	23 0f       	add	r18, r19
    3ef6:	92 1b       	sub	r25, r18
    3ef8:	90 5d       	subi	r25, 0xD0	; 208
    3efa:	94 87       	std	Z+12, r25	; 0x0c
	msg_dat[6]='0'+Jahr/10;
    3efc:	96 89       	ldd	r25, Z+22	; 0x16
    3efe:	98 9f       	mul	r25, r24
    3f00:	81 2d       	mov	r24, r1
    3f02:	11 24       	eor	r1, r1
    3f04:	86 95       	lsr	r24
    3f06:	86 95       	lsr	r24
    3f08:	86 95       	lsr	r24
    3f0a:	20 e3       	ldi	r18, 0x30	; 48
    3f0c:	28 0f       	add	r18, r24
    3f0e:	26 87       	std	Z+14, r18	; 0x0e
	msg_dat[7]='0'+Jahr%10;
    3f10:	88 0f       	add	r24, r24
    3f12:	28 2f       	mov	r18, r24
    3f14:	22 0f       	add	r18, r18
    3f16:	22 0f       	add	r18, r18
    3f18:	82 0f       	add	r24, r18
    3f1a:	98 1b       	sub	r25, r24
    3f1c:	90 5d       	subi	r25, 0xD0	; 208
    3f1e:	97 87       	std	Z+15, r25	; 0x0f
    3f20:	08 95       	ret

00003f22 <_ZN3RTCC1Ev>:


#include "RTC.h"

// default constructor
RTC::RTC()
    3f22:	cf 93       	push	r28
    3f24:	df 93       	push	r29
    3f26:	ec 01       	movw	r28, r24
{
	Sekunden=0;
    3f28:	1a 8a       	std	Y+18, r1	; 0x12
	HundSekunden=0;
    3f2a:	1b 8a       	std	Y+19, r1	; 0x13
	Minuten=0;
    3f2c:	19 8a       	std	Y+17, r1	; 0x11
	Stunden=0;
    3f2e:	18 8a       	std	Y+16, r1	; 0x10
	Tag=0;
    3f30:	1c 8a       	std	Y+20, r1	; 0x14
	Monat=0;
    3f32:	1d 8a       	std	Y+21, r1	; 0x15
	Jahr=0;
    3f34:	1e 8a       	std	Y+22, r1	; 0x16
    3f36:	fc 01       	movw	r30, r24
	for(uint8_t i=0;i<bitsderrtc;i++){
    3f38:	80 e0       	ldi	r24, 0x00	; 0
		msg_uhr[i]=0;
    3f3a:	11 92       	st	Z+, r1
	Minuten=0;
	Stunden=0;
	Tag=0;
	Monat=0;
	Jahr=0;
	for(uint8_t i=0;i<bitsderrtc;i++){
    3f3c:	8f 5f       	subi	r24, 0xFF	; 255
    3f3e:	88 30       	cpi	r24, 0x08	; 8
    3f40:	e1 f7       	brne	.-8      	; 0x3f3a <_ZN3RTCC1Ev+0x18>
		msg_uhr[i]=0;
	}
	//Einstellungen des Ausgabebuffers
	msg_uhr[2]=':';
    3f42:	8a e3       	ldi	r24, 0x3A	; 58
    3f44:	8a 83       	std	Y+2, r24	; 0x02
	msg_uhr[5]=':';
    3f46:	8d 83       	std	Y+5, r24	; 0x05
	msg_dat[2]='.';
    3f48:	8e e2       	ldi	r24, 0x2E	; 46
    3f4a:	8a 87       	std	Y+10, r24	; 0x0a
	msg_dat[5]='.';
    3f4c:	8d 87       	std	Y+13, r24	; 0x0d
	ausgabezeitneu();
    3f4e:	ce 01       	movw	r24, r28
    3f50:	0e 94 1f 1f 	call	0x3e3e	; 0x3e3e <_ZN3RTC14ausgabezeitneuEv>
	ausgabedatumneu();
    3f54:	ce 01       	movw	r24, r28
    3f56:	0e 94 58 1f 	call	0x3eb0	; 0x3eb0 <_ZN3RTC15ausgabedatumneuEv>
} //RTC
    3f5a:	df 91       	pop	r29
    3f5c:	cf 91       	pop	r28
    3f5e:	08 95       	ret

00003f60 <_ZN3RTC8kalenderEv>:
	ausgabezeitneu();
	return 0;
}

void RTC::kalender(){
	if (Monat==4||Monat==6||Monat==9||Monat==11)
    3f60:	fc 01       	movw	r30, r24
    3f62:	25 89       	ldd	r18, Z+21	; 0x15
    3f64:	32 2f       	mov	r19, r18
    3f66:	3d 7f       	andi	r19, 0xFD	; 253
    3f68:	34 30       	cpi	r19, 0x04	; 4
    3f6a:	11 f0       	breq	.+4      	; 0x3f70 <_ZN3RTC8kalenderEv+0x10>
    3f6c:	39 30       	cpi	r19, 0x09	; 9
    3f6e:	91 f4       	brne	.+36     	; 0x3f94 <_ZN3RTC8kalenderEv+0x34>
	{
		if (Tag>=31)
    3f70:	fc 01       	movw	r30, r24
    3f72:	34 89       	ldd	r19, Z+20	; 0x14
    3f74:	3f 31       	cpi	r19, 0x1F	; 31
    3f76:	b0 f1       	brcs	.+108    	; 0x3fe4 <_ZN3RTC8kalenderEv+0x84>
		{
			Tag=1;
    3f78:	31 e0       	ldi	r19, 0x01	; 1
    3f7a:	34 8b       	std	Z+20, r19	; 0x14
			Monat++;
    3f7c:	2f 5f       	subi	r18, 0xFF	; 255
			if (Monat>=13)
    3f7e:	2d 30       	cpi	r18, 0x0D	; 13
    3f80:	10 f4       	brcc	.+4      	; 0x3f86 <_ZN3RTC8kalenderEv+0x26>
	if (Monat==4||Monat==6||Monat==9||Monat==11)
	{
		if (Tag>=31)
		{
			Tag=1;
			Monat++;
    3f82:	25 8b       	std	Z+21, r18	; 0x15
    3f84:	2f c0       	rjmp	.+94     	; 0x3fe4 <_ZN3RTC8kalenderEv+0x84>
			if (Monat>=13)
			{
				Monat=1;
    3f86:	21 e0       	ldi	r18, 0x01	; 1
    3f88:	fc 01       	movw	r30, r24
    3f8a:	25 8b       	std	Z+21, r18	; 0x15
				Jahr++;
    3f8c:	26 89       	ldd	r18, Z+22	; 0x16
    3f8e:	2f 5f       	subi	r18, 0xFF	; 255
    3f90:	26 8b       	std	Z+22, r18	; 0x16
    3f92:	28 c0       	rjmp	.+80     	; 0x3fe4 <_ZN3RTC8kalenderEv+0x84>
			}
		}
	}
	else if (Monat==2)
    3f94:	22 30       	cpi	r18, 0x02	; 2
    3f96:	a9 f4       	brne	.+42     	; 0x3fc2 <_ZN3RTC8kalenderEv+0x62>
	{
		if (Jahr%4==0)
    3f98:	fc 01       	movw	r30, r24
    3f9a:	26 89       	ldd	r18, Z+22	; 0x16
    3f9c:	23 70       	andi	r18, 0x03	; 3
    3f9e:	41 f4       	brne	.+16     	; 0x3fb0 <_ZN3RTC8kalenderEv+0x50>
		{
			if (Tag>=30)
    3fa0:	24 89       	ldd	r18, Z+20	; 0x14
    3fa2:	2e 31       	cpi	r18, 0x1E	; 30
    3fa4:	f8 f0       	brcs	.+62     	; 0x3fe4 <_ZN3RTC8kalenderEv+0x84>
			{
				Tag=1;
    3fa6:	21 e0       	ldi	r18, 0x01	; 1
    3fa8:	24 8b       	std	Z+20, r18	; 0x14
				Monat++;
    3faa:	23 e0       	ldi	r18, 0x03	; 3
    3fac:	25 8b       	std	Z+21, r18	; 0x15
    3fae:	1a c0       	rjmp	.+52     	; 0x3fe4 <_ZN3RTC8kalenderEv+0x84>
					Jahr++;
				}
			}
		}
		else{
			if (Tag>=29)
    3fb0:	fc 01       	movw	r30, r24
    3fb2:	24 89       	ldd	r18, Z+20	; 0x14
    3fb4:	2d 31       	cpi	r18, 0x1D	; 29
    3fb6:	b0 f0       	brcs	.+44     	; 0x3fe4 <_ZN3RTC8kalenderEv+0x84>
			{
				Tag=1;
    3fb8:	21 e0       	ldi	r18, 0x01	; 1
    3fba:	24 8b       	std	Z+20, r18	; 0x14
				Monat++;
    3fbc:	23 e0       	ldi	r18, 0x03	; 3
    3fbe:	25 8b       	std	Z+21, r18	; 0x15
    3fc0:	11 c0       	rjmp	.+34     	; 0x3fe4 <_ZN3RTC8kalenderEv+0x84>
				}
			}
		}
	}
	else{
		if (Tag>=32)
    3fc2:	fc 01       	movw	r30, r24
    3fc4:	34 89       	ldd	r19, Z+20	; 0x14
    3fc6:	30 32       	cpi	r19, 0x20	; 32
    3fc8:	68 f0       	brcs	.+26     	; 0x3fe4 <_ZN3RTC8kalenderEv+0x84>
		{
			Tag=1;
    3fca:	31 e0       	ldi	r19, 0x01	; 1
    3fcc:	34 8b       	std	Z+20, r19	; 0x14
			Monat++;
    3fce:	2f 5f       	subi	r18, 0xFF	; 255
			if (Monat>=13)
    3fd0:	2d 30       	cpi	r18, 0x0D	; 13
    3fd2:	10 f4       	brcc	.+4      	; 0x3fd8 <_ZN3RTC8kalenderEv+0x78>
	}
	else{
		if (Tag>=32)
		{
			Tag=1;
			Monat++;
    3fd4:	25 8b       	std	Z+21, r18	; 0x15
    3fd6:	06 c0       	rjmp	.+12     	; 0x3fe4 <_ZN3RTC8kalenderEv+0x84>
			if (Monat>=13)
			{
				Monat=1;
    3fd8:	21 e0       	ldi	r18, 0x01	; 1
    3fda:	fc 01       	movw	r30, r24
    3fdc:	25 8b       	std	Z+21, r18	; 0x15
				Jahr++;
    3fde:	26 89       	ldd	r18, Z+22	; 0x16
    3fe0:	2f 5f       	subi	r18, 0xFF	; 255
    3fe2:	26 8b       	std	Z+22, r18	; 0x16
			}
		}
	}
	ausgabedatumneu();
    3fe4:	0e 94 58 1f 	call	0x3eb0	; 0x3eb0 <_ZN3RTC15ausgabedatumneuEv>
    3fe8:	08 95       	ret

00003fea <_ZN3RTC4zeitEv>:
	}
	ausgabezeitneu();
	return 0;
}

uint8_t RTC::zeit(){
    3fea:	cf 93       	push	r28
    3fec:	df 93       	push	r29
    3fee:	ec 01       	movw	r28, r24
	//Sekunden++; sitzt im Vektor um Taster besser entprellen zu koennen
	if (Sekunden >= 60 && Sekunden <=200){
    3ff0:	8a 89       	ldd	r24, Y+18	; 0x12
    3ff2:	8c 53       	subi	r24, 0x3C	; 60
    3ff4:	8d 38       	cpi	r24, 0x8D	; 141
    3ff6:	b8 f4       	brcc	.+46     	; 0x4026 <_ZN3RTC4zeitEv+0x3c>
		Sekunden = 0;
    3ff8:	1a 8a       	std	Y+18, r1	; 0x12
		Minuten++;
    3ffa:	89 89       	ldd	r24, Y+17	; 0x11
    3ffc:	8f 5f       	subi	r24, 0xFF	; 255
    3ffe:	89 8b       	std	Y+17, r24	; 0x11
		interupts |= (1<<minuteninterupt);
    4000:	9f 89       	ldd	r25, Y+23	; 0x17
    4002:	94 60       	ori	r25, 0x04	; 4
    4004:	9f 8b       	std	Y+23, r25	; 0x17
		if(Minuten >= 60){
    4006:	8c 33       	cpi	r24, 0x3C	; 60
    4008:	20 f0       	brcs	.+8      	; 0x4012 <_ZN3RTC4zeitEv+0x28>
			Minuten = 0;
    400a:	19 8a       	std	Y+17, r1	; 0x11
			Stunden++;
    400c:	88 89       	ldd	r24, Y+16	; 0x10
    400e:	8f 5f       	subi	r24, 0xFF	; 255
    4010:	88 8b       	std	Y+16, r24	; 0x10
		}
		if(Stunden >= 24){
    4012:	88 89       	ldd	r24, Y+16	; 0x10
    4014:	88 31       	cpi	r24, 0x18	; 24
    4016:	38 f0       	brcs	.+14     	; 0x4026 <_ZN3RTC4zeitEv+0x3c>
			Stunden = 0;
    4018:	18 8a       	std	Y+16, r1	; 0x10
			Tag++;
    401a:	8c 89       	ldd	r24, Y+20	; 0x14
    401c:	8f 5f       	subi	r24, 0xFF	; 255
    401e:	8c 8b       	std	Y+20, r24	; 0x14
			kalender();
    4020:	ce 01       	movw	r24, r28
    4022:	0e 94 b0 1f 	call	0x3f60	; 0x3f60 <_ZN3RTC8kalenderEv>
		}
	}
	ausgabezeitneu();
    4026:	ce 01       	movw	r24, r28
    4028:	0e 94 1f 1f 	call	0x3e3e	; 0x3e3e <_ZN3RTC14ausgabezeitneuEv>
	return 0;
}
    402c:	80 e0       	ldi	r24, 0x00	; 0
    402e:	df 91       	pop	r29
    4030:	cf 91       	pop	r28
    4032:	08 95       	ret

00004034 <_ZN3RTC10dummyeinstEv>:
	msg_dat[4]='0'+Monat%10;
	msg_dat[6]='0'+Jahr/10;
	msg_dat[7]='0'+Jahr%10;
}

void RTC::dummyeinst(){
    4034:	cf 93       	push	r28
    4036:	df 93       	push	r29
    4038:	ec 01       	movw	r28, r24
	Stunden=10;
    403a:	8a e0       	ldi	r24, 0x0A	; 10
    403c:	88 8b       	std	Y+16, r24	; 0x10
	Minuten=30;
    403e:	8e e1       	ldi	r24, 0x1E	; 30
    4040:	89 8b       	std	Y+17, r24	; 0x11
	Tag=7;
    4042:	87 e0       	ldi	r24, 0x07	; 7
    4044:	8c 8b       	std	Y+20, r24	; 0x14
	Monat=9;
    4046:	89 e0       	ldi	r24, 0x09	; 9
    4048:	8d 8b       	std	Y+21, r24	; 0x15
	Jahr=15;
    404a:	8f e0       	ldi	r24, 0x0F	; 15
    404c:	8e 8b       	std	Y+22, r24	; 0x16
	ausgabedatumneu();
    404e:	ce 01       	movw	r24, r28
    4050:	0e 94 58 1f 	call	0x3eb0	; 0x3eb0 <_ZN3RTC15ausgabedatumneuEv>
	ausgabezeitneu();
    4054:	ce 01       	movw	r24, r28
    4056:	0e 94 1f 1f 	call	0x3e3e	; 0x3e3e <_ZN3RTC14ausgabezeitneuEv>
}
    405a:	df 91       	pop	r29
    405c:	cf 91       	pop	r28
    405e:	08 95       	ret

00004060 <_ZN3RTC8RTCstartEv>:

void RTC::RTCstart(){
    4060:	fc 01       	movw	r30, r24
	//Einstellungen des Ausgabebuffers
	msg_uhr[0]='0';
    4062:	80 e3       	ldi	r24, 0x30	; 48
    4064:	80 83       	st	Z, r24
	msg_uhr[1]='0';
    4066:	81 83       	std	Z+1, r24	; 0x01
	msg_uhr[2]=':';
    4068:	9a e3       	ldi	r25, 0x3A	; 58
    406a:	92 83       	std	Z+2, r25	; 0x02
	msg_uhr[3]='0';
    406c:	83 83       	std	Z+3, r24	; 0x03
	msg_uhr[4]='0';
    406e:	84 83       	std	Z+4, r24	; 0x04
	msg_uhr[5]=':';
    4070:	95 83       	std	Z+5, r25	; 0x05
	msg_uhr[6]='0';
    4072:	86 83       	std	Z+6, r24	; 0x06
	msg_uhr[7]='0';
    4074:	87 83       	std	Z+7, r24	; 0x07
	//Timer2 als 1ms Timer fuer die RTC
	//asynchron mit 32.768 kHz (noch synchrom)
	TCNT2 = TIMER2RTCTIME;
    4076:	10 92 b2 00 	sts	0x00B2, r1
	ASSR |= (1<<AS2);
    407a:	e6 eb       	ldi	r30, 0xB6	; 182
    407c:	f0 e0       	ldi	r31, 0x00	; 0
    407e:	80 81       	ld	r24, Z
    4080:	80 62       	ori	r24, 0x20	; 32
    4082:	80 83       	st	Z, r24
	TIMSK2 = (1<<TOIE2);
    4084:	81 e0       	ldi	r24, 0x01	; 1
    4086:	80 93 70 00 	sts	0x0070, r24
	TCCR2B = (1<<CS22) | (1<<CS20);		//Vorteiler 256
    408a:	85 e0       	ldi	r24, 0x05	; 5
    408c:	80 93 b1 00 	sts	0x00B1, r24
    4090:	08 95       	ret

00004092 <_ZN3RTC7RTCstopEv>:
}

void RTC::RTCstop(){
	TCCR2B &= ~((1<<CS22) | (1<<CS21));
    4092:	e1 eb       	ldi	r30, 0xB1	; 177
    4094:	f0 e0       	ldi	r31, 0x00	; 0
    4096:	80 81       	ld	r24, Z
    4098:	89 7f       	andi	r24, 0xF9	; 249
    409a:	80 83       	st	Z, r24
    409c:	08 95       	ret

0000409e <_ZN3RTC5timerEv>:
}

uint8_t RTC::timer(){
    409e:	fc 01       	movw	r30, r24
	if (Sekunden>60)
    40a0:	82 89       	ldd	r24, Z+18	; 0x12
    40a2:	8d 33       	cpi	r24, 0x3D	; 61
    40a4:	b8 f0       	brcs	.+46     	; 0x40d4 <_ZN3RTC5timerEv+0x36>
	{
		Sekunden=59;
    40a6:	8b e3       	ldi	r24, 0x3B	; 59
    40a8:	82 8b       	std	Z+18, r24	; 0x12
		Minuten--;
    40aa:	81 89       	ldd	r24, Z+17	; 0x11
    40ac:	81 50       	subi	r24, 0x01	; 1
		if (Minuten>60)
    40ae:	8d 33       	cpi	r24, 0x3D	; 61
    40b0:	18 f4       	brcc	.+6      	; 0x40b8 <_ZN3RTC5timerEv+0x1a>

uint8_t RTC::timer(){
	if (Sekunden>60)
	{
		Sekunden=59;
		Minuten--;
    40b2:	81 8b       	std	Z+17, r24	; 0x11
				Sekunden=0;
				return 1;
			}
		}
	}
	return 0;
    40b4:	80 e0       	ldi	r24, 0x00	; 0
    40b6:	08 95       	ret
	{
		Sekunden=59;
		Minuten--;
		if (Minuten>60)
		{
			Minuten=59;
    40b8:	8b e3       	ldi	r24, 0x3B	; 59
    40ba:	81 8b       	std	Z+17, r24	; 0x11
			Stunden--;
    40bc:	80 89       	ldd	r24, Z+16	; 0x10
    40be:	81 50       	subi	r24, 0x01	; 1
			if (Stunden>24)
    40c0:	89 31       	cpi	r24, 0x19	; 25
    40c2:	18 f4       	brcc	.+6      	; 0x40ca <_ZN3RTC5timerEv+0x2c>
		Sekunden=59;
		Minuten--;
		if (Minuten>60)
		{
			Minuten=59;
			Stunden--;
    40c4:	80 8b       	std	Z+16, r24	; 0x10
				Sekunden=0;
				return 1;
			}
		}
	}
	return 0;
    40c6:	80 e0       	ldi	r24, 0x00	; 0
    40c8:	08 95       	ret
		{
			Minuten=59;
			Stunden--;
			if (Stunden>24)
			{
				Stunden=0;
    40ca:	10 8a       	std	Z+16, r1	; 0x10
				Minuten=0;
    40cc:	11 8a       	std	Z+17, r1	; 0x11
				Sekunden=0;
    40ce:	12 8a       	std	Z+18, r1	; 0x12
				return 1;
    40d0:	81 e0       	ldi	r24, 0x01	; 1
    40d2:	08 95       	ret
			}
		}
	}
	return 0;
    40d4:	80 e0       	ldi	r24, 0x00	; 0
}
    40d6:	08 95       	ret

000040d8 <__subsf3>:
    40d8:	50 58       	subi	r21, 0x80	; 128

000040da <__addsf3>:
    40da:	bb 27       	eor	r27, r27
    40dc:	aa 27       	eor	r26, r26
    40de:	0e d0       	rcall	.+28     	; 0x40fc <__addsf3x>
    40e0:	27 c2       	rjmp	.+1102   	; 0x4530 <__fp_round>
    40e2:	f0 d1       	rcall	.+992    	; 0x44c4 <__fp_pscA>
    40e4:	30 f0       	brcs	.+12     	; 0x40f2 <__addsf3+0x18>
    40e6:	f5 d1       	rcall	.+1002   	; 0x44d2 <__fp_pscB>
    40e8:	20 f0       	brcs	.+8      	; 0x40f2 <__addsf3+0x18>
    40ea:	31 f4       	brne	.+12     	; 0x40f8 <__addsf3+0x1e>
    40ec:	9f 3f       	cpi	r25, 0xFF	; 255
    40ee:	11 f4       	brne	.+4      	; 0x40f4 <__addsf3+0x1a>
    40f0:	1e f4       	brtc	.+6      	; 0x40f8 <__addsf3+0x1e>
    40f2:	c0 c1       	rjmp	.+896    	; 0x4474 <__fp_nan>
    40f4:	0e f4       	brtc	.+2      	; 0x40f8 <__addsf3+0x1e>
    40f6:	e0 95       	com	r30
    40f8:	e7 fb       	bst	r30, 7
    40fa:	b6 c1       	rjmp	.+876    	; 0x4468 <__fp_inf>

000040fc <__addsf3x>:
    40fc:	e9 2f       	mov	r30, r25
    40fe:	3a d2       	rcall	.+1140   	; 0x4574 <__fp_split3>
    4100:	80 f3       	brcs	.-32     	; 0x40e2 <__addsf3+0x8>
    4102:	ba 17       	cp	r27, r26
    4104:	62 07       	cpc	r22, r18
    4106:	73 07       	cpc	r23, r19
    4108:	84 07       	cpc	r24, r20
    410a:	95 07       	cpc	r25, r21
    410c:	18 f0       	brcs	.+6      	; 0x4114 <__addsf3x+0x18>
    410e:	71 f4       	brne	.+28     	; 0x412c <__addsf3x+0x30>
    4110:	9e f5       	brtc	.+102    	; 0x4178 <__addsf3x+0x7c>
    4112:	52 c2       	rjmp	.+1188   	; 0x45b8 <__fp_zero>
    4114:	0e f4       	brtc	.+2      	; 0x4118 <__addsf3x+0x1c>
    4116:	e0 95       	com	r30
    4118:	0b 2e       	mov	r0, r27
    411a:	ba 2f       	mov	r27, r26
    411c:	a0 2d       	mov	r26, r0
    411e:	0b 01       	movw	r0, r22
    4120:	b9 01       	movw	r22, r18
    4122:	90 01       	movw	r18, r0
    4124:	0c 01       	movw	r0, r24
    4126:	ca 01       	movw	r24, r20
    4128:	a0 01       	movw	r20, r0
    412a:	11 24       	eor	r1, r1
    412c:	ff 27       	eor	r31, r31
    412e:	59 1b       	sub	r21, r25
    4130:	99 f0       	breq	.+38     	; 0x4158 <__addsf3x+0x5c>
    4132:	59 3f       	cpi	r21, 0xF9	; 249
    4134:	50 f4       	brcc	.+20     	; 0x414a <__addsf3x+0x4e>
    4136:	50 3e       	cpi	r21, 0xE0	; 224
    4138:	68 f1       	brcs	.+90     	; 0x4194 <__addsf3x+0x98>
    413a:	1a 16       	cp	r1, r26
    413c:	f0 40       	sbci	r31, 0x00	; 0
    413e:	a2 2f       	mov	r26, r18
    4140:	23 2f       	mov	r18, r19
    4142:	34 2f       	mov	r19, r20
    4144:	44 27       	eor	r20, r20
    4146:	58 5f       	subi	r21, 0xF8	; 248
    4148:	f3 cf       	rjmp	.-26     	; 0x4130 <__addsf3x+0x34>
    414a:	46 95       	lsr	r20
    414c:	37 95       	ror	r19
    414e:	27 95       	ror	r18
    4150:	a7 95       	ror	r26
    4152:	f0 40       	sbci	r31, 0x00	; 0
    4154:	53 95       	inc	r21
    4156:	c9 f7       	brne	.-14     	; 0x414a <__addsf3x+0x4e>
    4158:	7e f4       	brtc	.+30     	; 0x4178 <__addsf3x+0x7c>
    415a:	1f 16       	cp	r1, r31
    415c:	ba 0b       	sbc	r27, r26
    415e:	62 0b       	sbc	r22, r18
    4160:	73 0b       	sbc	r23, r19
    4162:	84 0b       	sbc	r24, r20
    4164:	ba f0       	brmi	.+46     	; 0x4194 <__addsf3x+0x98>
    4166:	91 50       	subi	r25, 0x01	; 1
    4168:	a1 f0       	breq	.+40     	; 0x4192 <__addsf3x+0x96>
    416a:	ff 0f       	add	r31, r31
    416c:	bb 1f       	adc	r27, r27
    416e:	66 1f       	adc	r22, r22
    4170:	77 1f       	adc	r23, r23
    4172:	88 1f       	adc	r24, r24
    4174:	c2 f7       	brpl	.-16     	; 0x4166 <__addsf3x+0x6a>
    4176:	0e c0       	rjmp	.+28     	; 0x4194 <__addsf3x+0x98>
    4178:	ba 0f       	add	r27, r26
    417a:	62 1f       	adc	r22, r18
    417c:	73 1f       	adc	r23, r19
    417e:	84 1f       	adc	r24, r20
    4180:	48 f4       	brcc	.+18     	; 0x4194 <__addsf3x+0x98>
    4182:	87 95       	ror	r24
    4184:	77 95       	ror	r23
    4186:	67 95       	ror	r22
    4188:	b7 95       	ror	r27
    418a:	f7 95       	ror	r31
    418c:	9e 3f       	cpi	r25, 0xFE	; 254
    418e:	08 f0       	brcs	.+2      	; 0x4192 <__addsf3x+0x96>
    4190:	b3 cf       	rjmp	.-154    	; 0x40f8 <__addsf3+0x1e>
    4192:	93 95       	inc	r25
    4194:	88 0f       	add	r24, r24
    4196:	08 f0       	brcs	.+2      	; 0x419a <__addsf3x+0x9e>
    4198:	99 27       	eor	r25, r25
    419a:	ee 0f       	add	r30, r30
    419c:	97 95       	ror	r25
    419e:	87 95       	ror	r24
    41a0:	08 95       	ret
    41a2:	90 d1       	rcall	.+800    	; 0x44c4 <__fp_pscA>
    41a4:	58 f0       	brcs	.+22     	; 0x41bc <__addsf3x+0xc0>
    41a6:	80 e8       	ldi	r24, 0x80	; 128
    41a8:	91 e0       	ldi	r25, 0x01	; 1
    41aa:	09 f4       	brne	.+2      	; 0x41ae <__addsf3x+0xb2>
    41ac:	9e ef       	ldi	r25, 0xFE	; 254
    41ae:	91 d1       	rcall	.+802    	; 0x44d2 <__fp_pscB>
    41b0:	28 f0       	brcs	.+10     	; 0x41bc <__addsf3x+0xc0>
    41b2:	40 e8       	ldi	r20, 0x80	; 128
    41b4:	51 e0       	ldi	r21, 0x01	; 1
    41b6:	59 f4       	brne	.+22     	; 0x41ce <atan2+0xe>
    41b8:	5e ef       	ldi	r21, 0xFE	; 254
    41ba:	09 c0       	rjmp	.+18     	; 0x41ce <atan2+0xe>
    41bc:	5b c1       	rjmp	.+694    	; 0x4474 <__fp_nan>
    41be:	fc c1       	rjmp	.+1016   	; 0x45b8 <__fp_zero>

000041c0 <atan2>:
    41c0:	e9 2f       	mov	r30, r25
    41c2:	e0 78       	andi	r30, 0x80	; 128
    41c4:	d7 d1       	rcall	.+942    	; 0x4574 <__fp_split3>
    41c6:	68 f3       	brcs	.-38     	; 0x41a2 <__addsf3x+0xa6>
    41c8:	09 2e       	mov	r0, r25
    41ca:	05 2a       	or	r0, r21
    41cc:	c1 f3       	breq	.-16     	; 0x41be <__addsf3x+0xc2>
    41ce:	26 17       	cp	r18, r22
    41d0:	37 07       	cpc	r19, r23
    41d2:	48 07       	cpc	r20, r24
    41d4:	59 07       	cpc	r21, r25
    41d6:	38 f0       	brcs	.+14     	; 0x41e6 <atan2+0x26>
    41d8:	0e 2e       	mov	r0, r30
    41da:	07 f8       	bld	r0, 7
    41dc:	e0 25       	eor	r30, r0
    41de:	69 f0       	breq	.+26     	; 0x41fa <atan2+0x3a>
    41e0:	e0 25       	eor	r30, r0
    41e2:	e0 64       	ori	r30, 0x40	; 64
    41e4:	0a c0       	rjmp	.+20     	; 0x41fa <atan2+0x3a>
    41e6:	ef 63       	ori	r30, 0x3F	; 63
    41e8:	07 f8       	bld	r0, 7
    41ea:	00 94       	com	r0
    41ec:	07 fa       	bst	r0, 7
    41ee:	db 01       	movw	r26, r22
    41f0:	b9 01       	movw	r22, r18
    41f2:	9d 01       	movw	r18, r26
    41f4:	dc 01       	movw	r26, r24
    41f6:	ca 01       	movw	r24, r20
    41f8:	ad 01       	movw	r20, r26
    41fa:	ef 93       	push	r30
    41fc:	4a d0       	rcall	.+148    	; 0x4292 <__divsf3_pse>
    41fe:	98 d1       	rcall	.+816    	; 0x4530 <__fp_round>
    4200:	0a d0       	rcall	.+20     	; 0x4216 <atan>
    4202:	5f 91       	pop	r21
    4204:	55 23       	and	r21, r21
    4206:	31 f0       	breq	.+12     	; 0x4214 <atan2+0x54>
    4208:	2b ed       	ldi	r18, 0xDB	; 219
    420a:	3f e0       	ldi	r19, 0x0F	; 15
    420c:	49 e4       	ldi	r20, 0x49	; 73
    420e:	50 fd       	sbrc	r21, 0
    4210:	49 ec       	ldi	r20, 0xC9	; 201
    4212:	63 cf       	rjmp	.-314    	; 0x40da <__addsf3>
    4214:	08 95       	ret

00004216 <atan>:
    4216:	df 93       	push	r29
    4218:	dd 27       	eor	r29, r29
    421a:	b9 2f       	mov	r27, r25
    421c:	bf 77       	andi	r27, 0x7F	; 127
    421e:	40 e8       	ldi	r20, 0x80	; 128
    4220:	5f e3       	ldi	r21, 0x3F	; 63
    4222:	16 16       	cp	r1, r22
    4224:	17 06       	cpc	r1, r23
    4226:	48 07       	cpc	r20, r24
    4228:	5b 07       	cpc	r21, r27
    422a:	10 f4       	brcc	.+4      	; 0x4230 <atan+0x1a>
    422c:	d9 2f       	mov	r29, r25
    422e:	cf d1       	rcall	.+926    	; 0x45ce <inverse>
    4230:	9f 93       	push	r25
    4232:	8f 93       	push	r24
    4234:	7f 93       	push	r23
    4236:	6f 93       	push	r22
    4238:	7f d2       	rcall	.+1278   	; 0x4738 <square>
    423a:	ea e9       	ldi	r30, 0x9A	; 154
    423c:	f0 e0       	ldi	r31, 0x00	; 0
    423e:	1d d1       	rcall	.+570    	; 0x447a <__fp_powser>
    4240:	77 d1       	rcall	.+750    	; 0x4530 <__fp_round>
    4242:	2f 91       	pop	r18
    4244:	3f 91       	pop	r19
    4246:	4f 91       	pop	r20
    4248:	5f 91       	pop	r21
    424a:	19 d2       	rcall	.+1074   	; 0x467e <__mulsf3x>
    424c:	dd 23       	and	r29, r29
    424e:	49 f0       	breq	.+18     	; 0x4262 <atan+0x4c>
    4250:	90 58       	subi	r25, 0x80	; 128
    4252:	a2 ea       	ldi	r26, 0xA2	; 162
    4254:	2a ed       	ldi	r18, 0xDA	; 218
    4256:	3f e0       	ldi	r19, 0x0F	; 15
    4258:	49 ec       	ldi	r20, 0xC9	; 201
    425a:	5f e3       	ldi	r21, 0x3F	; 63
    425c:	d0 78       	andi	r29, 0x80	; 128
    425e:	5d 27       	eor	r21, r29
    4260:	4d df       	rcall	.-358    	; 0x40fc <__addsf3x>
    4262:	df 91       	pop	r29
    4264:	65 c1       	rjmp	.+714    	; 0x4530 <__fp_round>

00004266 <__cmpsf2>:
    4266:	dc d0       	rcall	.+440    	; 0x4420 <__fp_cmp>
    4268:	08 f4       	brcc	.+2      	; 0x426c <__cmpsf2+0x6>
    426a:	81 e0       	ldi	r24, 0x01	; 1
    426c:	08 95       	ret

0000426e <cos>:
    426e:	39 d1       	rcall	.+626    	; 0x44e2 <__fp_rempio2>
    4270:	e3 95       	inc	r30
    4272:	6f c1       	rjmp	.+734    	; 0x4552 <__fp_sinus>

00004274 <__divsf3>:
    4274:	0c d0       	rcall	.+24     	; 0x428e <__divsf3x>
    4276:	5c c1       	rjmp	.+696    	; 0x4530 <__fp_round>
    4278:	2c d1       	rcall	.+600    	; 0x44d2 <__fp_pscB>
    427a:	40 f0       	brcs	.+16     	; 0x428c <__divsf3+0x18>
    427c:	23 d1       	rcall	.+582    	; 0x44c4 <__fp_pscA>
    427e:	30 f0       	brcs	.+12     	; 0x428c <__divsf3+0x18>
    4280:	21 f4       	brne	.+8      	; 0x428a <__divsf3+0x16>
    4282:	5f 3f       	cpi	r21, 0xFF	; 255
    4284:	19 f0       	breq	.+6      	; 0x428c <__divsf3+0x18>
    4286:	f0 c0       	rjmp	.+480    	; 0x4468 <__fp_inf>
    4288:	51 11       	cpse	r21, r1
    428a:	97 c1       	rjmp	.+814    	; 0x45ba <__fp_szero>
    428c:	f3 c0       	rjmp	.+486    	; 0x4474 <__fp_nan>

0000428e <__divsf3x>:
    428e:	72 d1       	rcall	.+740    	; 0x4574 <__fp_split3>
    4290:	98 f3       	brcs	.-26     	; 0x4278 <__divsf3+0x4>

00004292 <__divsf3_pse>:
    4292:	99 23       	and	r25, r25
    4294:	c9 f3       	breq	.-14     	; 0x4288 <__divsf3+0x14>
    4296:	55 23       	and	r21, r21
    4298:	b1 f3       	breq	.-20     	; 0x4286 <__divsf3+0x12>
    429a:	95 1b       	sub	r25, r21
    429c:	55 0b       	sbc	r21, r21
    429e:	bb 27       	eor	r27, r27
    42a0:	aa 27       	eor	r26, r26
    42a2:	62 17       	cp	r22, r18
    42a4:	73 07       	cpc	r23, r19
    42a6:	84 07       	cpc	r24, r20
    42a8:	38 f0       	brcs	.+14     	; 0x42b8 <__divsf3_pse+0x26>
    42aa:	9f 5f       	subi	r25, 0xFF	; 255
    42ac:	5f 4f       	sbci	r21, 0xFF	; 255
    42ae:	22 0f       	add	r18, r18
    42b0:	33 1f       	adc	r19, r19
    42b2:	44 1f       	adc	r20, r20
    42b4:	aa 1f       	adc	r26, r26
    42b6:	a9 f3       	breq	.-22     	; 0x42a2 <__divsf3_pse+0x10>
    42b8:	33 d0       	rcall	.+102    	; 0x4320 <__divsf3_pse+0x8e>
    42ba:	0e 2e       	mov	r0, r30
    42bc:	3a f0       	brmi	.+14     	; 0x42cc <__divsf3_pse+0x3a>
    42be:	e0 e8       	ldi	r30, 0x80	; 128
    42c0:	30 d0       	rcall	.+96     	; 0x4322 <__divsf3_pse+0x90>
    42c2:	91 50       	subi	r25, 0x01	; 1
    42c4:	50 40       	sbci	r21, 0x00	; 0
    42c6:	e6 95       	lsr	r30
    42c8:	00 1c       	adc	r0, r0
    42ca:	ca f7       	brpl	.-14     	; 0x42be <__divsf3_pse+0x2c>
    42cc:	29 d0       	rcall	.+82     	; 0x4320 <__divsf3_pse+0x8e>
    42ce:	fe 2f       	mov	r31, r30
    42d0:	27 d0       	rcall	.+78     	; 0x4320 <__divsf3_pse+0x8e>
    42d2:	66 0f       	add	r22, r22
    42d4:	77 1f       	adc	r23, r23
    42d6:	88 1f       	adc	r24, r24
    42d8:	bb 1f       	adc	r27, r27
    42da:	26 17       	cp	r18, r22
    42dc:	37 07       	cpc	r19, r23
    42de:	48 07       	cpc	r20, r24
    42e0:	ab 07       	cpc	r26, r27
    42e2:	b0 e8       	ldi	r27, 0x80	; 128
    42e4:	09 f0       	breq	.+2      	; 0x42e8 <__divsf3_pse+0x56>
    42e6:	bb 0b       	sbc	r27, r27
    42e8:	80 2d       	mov	r24, r0
    42ea:	bf 01       	movw	r22, r30
    42ec:	ff 27       	eor	r31, r31
    42ee:	93 58       	subi	r25, 0x83	; 131
    42f0:	5f 4f       	sbci	r21, 0xFF	; 255
    42f2:	2a f0       	brmi	.+10     	; 0x42fe <__divsf3_pse+0x6c>
    42f4:	9e 3f       	cpi	r25, 0xFE	; 254
    42f6:	51 05       	cpc	r21, r1
    42f8:	68 f0       	brcs	.+26     	; 0x4314 <__divsf3_pse+0x82>
    42fa:	b6 c0       	rjmp	.+364    	; 0x4468 <__fp_inf>
    42fc:	5e c1       	rjmp	.+700    	; 0x45ba <__fp_szero>
    42fe:	5f 3f       	cpi	r21, 0xFF	; 255
    4300:	ec f3       	brlt	.-6      	; 0x42fc <__divsf3_pse+0x6a>
    4302:	98 3e       	cpi	r25, 0xE8	; 232
    4304:	dc f3       	brlt	.-10     	; 0x42fc <__divsf3_pse+0x6a>
    4306:	86 95       	lsr	r24
    4308:	77 95       	ror	r23
    430a:	67 95       	ror	r22
    430c:	b7 95       	ror	r27
    430e:	f7 95       	ror	r31
    4310:	9f 5f       	subi	r25, 0xFF	; 255
    4312:	c9 f7       	brne	.-14     	; 0x4306 <__divsf3_pse+0x74>
    4314:	88 0f       	add	r24, r24
    4316:	91 1d       	adc	r25, r1
    4318:	96 95       	lsr	r25
    431a:	87 95       	ror	r24
    431c:	97 f9       	bld	r25, 7
    431e:	08 95       	ret
    4320:	e1 e0       	ldi	r30, 0x01	; 1
    4322:	66 0f       	add	r22, r22
    4324:	77 1f       	adc	r23, r23
    4326:	88 1f       	adc	r24, r24
    4328:	bb 1f       	adc	r27, r27
    432a:	62 17       	cp	r22, r18
    432c:	73 07       	cpc	r23, r19
    432e:	84 07       	cpc	r24, r20
    4330:	ba 07       	cpc	r27, r26
    4332:	20 f0       	brcs	.+8      	; 0x433c <__divsf3_pse+0xaa>
    4334:	62 1b       	sub	r22, r18
    4336:	73 0b       	sbc	r23, r19
    4338:	84 0b       	sbc	r24, r20
    433a:	ba 0b       	sbc	r27, r26
    433c:	ee 1f       	adc	r30, r30
    433e:	88 f7       	brcc	.-30     	; 0x4322 <__divsf3_pse+0x90>
    4340:	e0 95       	com	r30
    4342:	08 95       	ret

00004344 <__fixsfsi>:
    4344:	04 d0       	rcall	.+8      	; 0x434e <__fixunssfsi>
    4346:	68 94       	set
    4348:	b1 11       	cpse	r27, r1
    434a:	37 c1       	rjmp	.+622    	; 0x45ba <__fp_szero>
    434c:	08 95       	ret

0000434e <__fixunssfsi>:
    434e:	1a d1       	rcall	.+564    	; 0x4584 <__fp_splitA>
    4350:	88 f0       	brcs	.+34     	; 0x4374 <__fixunssfsi+0x26>
    4352:	9f 57       	subi	r25, 0x7F	; 127
    4354:	90 f0       	brcs	.+36     	; 0x437a <__fixunssfsi+0x2c>
    4356:	b9 2f       	mov	r27, r25
    4358:	99 27       	eor	r25, r25
    435a:	b7 51       	subi	r27, 0x17	; 23
    435c:	a0 f0       	brcs	.+40     	; 0x4386 <__fixunssfsi+0x38>
    435e:	d1 f0       	breq	.+52     	; 0x4394 <__fixunssfsi+0x46>
    4360:	66 0f       	add	r22, r22
    4362:	77 1f       	adc	r23, r23
    4364:	88 1f       	adc	r24, r24
    4366:	99 1f       	adc	r25, r25
    4368:	1a f0       	brmi	.+6      	; 0x4370 <__fixunssfsi+0x22>
    436a:	ba 95       	dec	r27
    436c:	c9 f7       	brne	.-14     	; 0x4360 <__fixunssfsi+0x12>
    436e:	12 c0       	rjmp	.+36     	; 0x4394 <__fixunssfsi+0x46>
    4370:	b1 30       	cpi	r27, 0x01	; 1
    4372:	81 f0       	breq	.+32     	; 0x4394 <__fixunssfsi+0x46>
    4374:	21 d1       	rcall	.+578    	; 0x45b8 <__fp_zero>
    4376:	b1 e0       	ldi	r27, 0x01	; 1
    4378:	08 95       	ret
    437a:	1e c1       	rjmp	.+572    	; 0x45b8 <__fp_zero>
    437c:	67 2f       	mov	r22, r23
    437e:	78 2f       	mov	r23, r24
    4380:	88 27       	eor	r24, r24
    4382:	b8 5f       	subi	r27, 0xF8	; 248
    4384:	39 f0       	breq	.+14     	; 0x4394 <__fixunssfsi+0x46>
    4386:	b9 3f       	cpi	r27, 0xF9	; 249
    4388:	cc f3       	brlt	.-14     	; 0x437c <__fixunssfsi+0x2e>
    438a:	86 95       	lsr	r24
    438c:	77 95       	ror	r23
    438e:	67 95       	ror	r22
    4390:	b3 95       	inc	r27
    4392:	d9 f7       	brne	.-10     	; 0x438a <__fixunssfsi+0x3c>
    4394:	3e f4       	brtc	.+14     	; 0x43a4 <__fixunssfsi+0x56>
    4396:	90 95       	com	r25
    4398:	80 95       	com	r24
    439a:	70 95       	com	r23
    439c:	61 95       	neg	r22
    439e:	7f 4f       	sbci	r23, 0xFF	; 255
    43a0:	8f 4f       	sbci	r24, 0xFF	; 255
    43a2:	9f 4f       	sbci	r25, 0xFF	; 255
    43a4:	08 95       	ret

000043a6 <__floatunsisf>:
    43a6:	e8 94       	clt
    43a8:	09 c0       	rjmp	.+18     	; 0x43bc <__floatsisf+0x12>

000043aa <__floatsisf>:
    43aa:	97 fb       	bst	r25, 7
    43ac:	3e f4       	brtc	.+14     	; 0x43bc <__floatsisf+0x12>
    43ae:	90 95       	com	r25
    43b0:	80 95       	com	r24
    43b2:	70 95       	com	r23
    43b4:	61 95       	neg	r22
    43b6:	7f 4f       	sbci	r23, 0xFF	; 255
    43b8:	8f 4f       	sbci	r24, 0xFF	; 255
    43ba:	9f 4f       	sbci	r25, 0xFF	; 255
    43bc:	99 23       	and	r25, r25
    43be:	a9 f0       	breq	.+42     	; 0x43ea <__floatsisf+0x40>
    43c0:	f9 2f       	mov	r31, r25
    43c2:	96 e9       	ldi	r25, 0x96	; 150
    43c4:	bb 27       	eor	r27, r27
    43c6:	93 95       	inc	r25
    43c8:	f6 95       	lsr	r31
    43ca:	87 95       	ror	r24
    43cc:	77 95       	ror	r23
    43ce:	67 95       	ror	r22
    43d0:	b7 95       	ror	r27
    43d2:	f1 11       	cpse	r31, r1
    43d4:	f8 cf       	rjmp	.-16     	; 0x43c6 <__floatsisf+0x1c>
    43d6:	fa f4       	brpl	.+62     	; 0x4416 <__floatsisf+0x6c>
    43d8:	bb 0f       	add	r27, r27
    43da:	11 f4       	brne	.+4      	; 0x43e0 <__floatsisf+0x36>
    43dc:	60 ff       	sbrs	r22, 0
    43de:	1b c0       	rjmp	.+54     	; 0x4416 <__floatsisf+0x6c>
    43e0:	6f 5f       	subi	r22, 0xFF	; 255
    43e2:	7f 4f       	sbci	r23, 0xFF	; 255
    43e4:	8f 4f       	sbci	r24, 0xFF	; 255
    43e6:	9f 4f       	sbci	r25, 0xFF	; 255
    43e8:	16 c0       	rjmp	.+44     	; 0x4416 <__floatsisf+0x6c>
    43ea:	88 23       	and	r24, r24
    43ec:	11 f0       	breq	.+4      	; 0x43f2 <__floatsisf+0x48>
    43ee:	96 e9       	ldi	r25, 0x96	; 150
    43f0:	11 c0       	rjmp	.+34     	; 0x4414 <__floatsisf+0x6a>
    43f2:	77 23       	and	r23, r23
    43f4:	21 f0       	breq	.+8      	; 0x43fe <__floatsisf+0x54>
    43f6:	9e e8       	ldi	r25, 0x8E	; 142
    43f8:	87 2f       	mov	r24, r23
    43fa:	76 2f       	mov	r23, r22
    43fc:	05 c0       	rjmp	.+10     	; 0x4408 <__floatsisf+0x5e>
    43fe:	66 23       	and	r22, r22
    4400:	71 f0       	breq	.+28     	; 0x441e <__floatsisf+0x74>
    4402:	96 e8       	ldi	r25, 0x86	; 134
    4404:	86 2f       	mov	r24, r22
    4406:	70 e0       	ldi	r23, 0x00	; 0
    4408:	60 e0       	ldi	r22, 0x00	; 0
    440a:	2a f0       	brmi	.+10     	; 0x4416 <__floatsisf+0x6c>
    440c:	9a 95       	dec	r25
    440e:	66 0f       	add	r22, r22
    4410:	77 1f       	adc	r23, r23
    4412:	88 1f       	adc	r24, r24
    4414:	da f7       	brpl	.-10     	; 0x440c <__floatsisf+0x62>
    4416:	88 0f       	add	r24, r24
    4418:	96 95       	lsr	r25
    441a:	87 95       	ror	r24
    441c:	97 f9       	bld	r25, 7
    441e:	08 95       	ret

00004420 <__fp_cmp>:
    4420:	99 0f       	add	r25, r25
    4422:	00 08       	sbc	r0, r0
    4424:	55 0f       	add	r21, r21
    4426:	aa 0b       	sbc	r26, r26
    4428:	e0 e8       	ldi	r30, 0x80	; 128
    442a:	fe ef       	ldi	r31, 0xFE	; 254
    442c:	16 16       	cp	r1, r22
    442e:	17 06       	cpc	r1, r23
    4430:	e8 07       	cpc	r30, r24
    4432:	f9 07       	cpc	r31, r25
    4434:	c0 f0       	brcs	.+48     	; 0x4466 <__fp_cmp+0x46>
    4436:	12 16       	cp	r1, r18
    4438:	13 06       	cpc	r1, r19
    443a:	e4 07       	cpc	r30, r20
    443c:	f5 07       	cpc	r31, r21
    443e:	98 f0       	brcs	.+38     	; 0x4466 <__fp_cmp+0x46>
    4440:	62 1b       	sub	r22, r18
    4442:	73 0b       	sbc	r23, r19
    4444:	84 0b       	sbc	r24, r20
    4446:	95 0b       	sbc	r25, r21
    4448:	39 f4       	brne	.+14     	; 0x4458 <__fp_cmp+0x38>
    444a:	0a 26       	eor	r0, r26
    444c:	61 f0       	breq	.+24     	; 0x4466 <__fp_cmp+0x46>
    444e:	23 2b       	or	r18, r19
    4450:	24 2b       	or	r18, r20
    4452:	25 2b       	or	r18, r21
    4454:	21 f4       	brne	.+8      	; 0x445e <__fp_cmp+0x3e>
    4456:	08 95       	ret
    4458:	0a 26       	eor	r0, r26
    445a:	09 f4       	brne	.+2      	; 0x445e <__fp_cmp+0x3e>
    445c:	a1 40       	sbci	r26, 0x01	; 1
    445e:	a6 95       	lsr	r26
    4460:	8f ef       	ldi	r24, 0xFF	; 255
    4462:	81 1d       	adc	r24, r1
    4464:	81 1d       	adc	r24, r1
    4466:	08 95       	ret

00004468 <__fp_inf>:
    4468:	97 f9       	bld	r25, 7
    446a:	9f 67       	ori	r25, 0x7F	; 127
    446c:	80 e8       	ldi	r24, 0x80	; 128
    446e:	70 e0       	ldi	r23, 0x00	; 0
    4470:	60 e0       	ldi	r22, 0x00	; 0
    4472:	08 95       	ret

00004474 <__fp_nan>:
    4474:	9f ef       	ldi	r25, 0xFF	; 255
    4476:	80 ec       	ldi	r24, 0xC0	; 192
    4478:	08 95       	ret

0000447a <__fp_powser>:
    447a:	df 93       	push	r29
    447c:	cf 93       	push	r28
    447e:	1f 93       	push	r17
    4480:	0f 93       	push	r16
    4482:	ff 92       	push	r15
    4484:	ef 92       	push	r14
    4486:	df 92       	push	r13
    4488:	7b 01       	movw	r14, r22
    448a:	8c 01       	movw	r16, r24
    448c:	68 94       	set
    448e:	05 c0       	rjmp	.+10     	; 0x449a <__fp_powser+0x20>
    4490:	da 2e       	mov	r13, r26
    4492:	ef 01       	movw	r28, r30
    4494:	f4 d0       	rcall	.+488    	; 0x467e <__mulsf3x>
    4496:	fe 01       	movw	r30, r28
    4498:	e8 94       	clt
    449a:	a5 91       	lpm	r26, Z+
    449c:	25 91       	lpm	r18, Z+
    449e:	35 91       	lpm	r19, Z+
    44a0:	45 91       	lpm	r20, Z+
    44a2:	55 91       	lpm	r21, Z+
    44a4:	ae f3       	brts	.-22     	; 0x4490 <__fp_powser+0x16>
    44a6:	ef 01       	movw	r28, r30
    44a8:	29 de       	rcall	.-942    	; 0x40fc <__addsf3x>
    44aa:	fe 01       	movw	r30, r28
    44ac:	97 01       	movw	r18, r14
    44ae:	a8 01       	movw	r20, r16
    44b0:	da 94       	dec	r13
    44b2:	79 f7       	brne	.-34     	; 0x4492 <__fp_powser+0x18>
    44b4:	df 90       	pop	r13
    44b6:	ef 90       	pop	r14
    44b8:	ff 90       	pop	r15
    44ba:	0f 91       	pop	r16
    44bc:	1f 91       	pop	r17
    44be:	cf 91       	pop	r28
    44c0:	df 91       	pop	r29
    44c2:	08 95       	ret

000044c4 <__fp_pscA>:
    44c4:	00 24       	eor	r0, r0
    44c6:	0a 94       	dec	r0
    44c8:	16 16       	cp	r1, r22
    44ca:	17 06       	cpc	r1, r23
    44cc:	18 06       	cpc	r1, r24
    44ce:	09 06       	cpc	r0, r25
    44d0:	08 95       	ret

000044d2 <__fp_pscB>:
    44d2:	00 24       	eor	r0, r0
    44d4:	0a 94       	dec	r0
    44d6:	12 16       	cp	r1, r18
    44d8:	13 06       	cpc	r1, r19
    44da:	14 06       	cpc	r1, r20
    44dc:	05 06       	cpc	r0, r21
    44de:	08 95       	ret
    44e0:	c9 cf       	rjmp	.-110    	; 0x4474 <__fp_nan>

000044e2 <__fp_rempio2>:
    44e2:	50 d0       	rcall	.+160    	; 0x4584 <__fp_splitA>
    44e4:	e8 f3       	brcs	.-6      	; 0x44e0 <__fp_pscB+0xe>
    44e6:	e8 94       	clt
    44e8:	e0 e0       	ldi	r30, 0x00	; 0
    44ea:	bb 27       	eor	r27, r27
    44ec:	9f 57       	subi	r25, 0x7F	; 127
    44ee:	f0 f0       	brcs	.+60     	; 0x452c <__fp_rempio2+0x4a>
    44f0:	2a ed       	ldi	r18, 0xDA	; 218
    44f2:	3f e0       	ldi	r19, 0x0F	; 15
    44f4:	49 ec       	ldi	r20, 0xC9	; 201
    44f6:	06 c0       	rjmp	.+12     	; 0x4504 <__fp_rempio2+0x22>
    44f8:	ee 0f       	add	r30, r30
    44fa:	bb 0f       	add	r27, r27
    44fc:	66 1f       	adc	r22, r22
    44fe:	77 1f       	adc	r23, r23
    4500:	88 1f       	adc	r24, r24
    4502:	28 f0       	brcs	.+10     	; 0x450e <__fp_rempio2+0x2c>
    4504:	b2 3a       	cpi	r27, 0xA2	; 162
    4506:	62 07       	cpc	r22, r18
    4508:	73 07       	cpc	r23, r19
    450a:	84 07       	cpc	r24, r20
    450c:	28 f0       	brcs	.+10     	; 0x4518 <__fp_rempio2+0x36>
    450e:	b2 5a       	subi	r27, 0xA2	; 162
    4510:	62 0b       	sbc	r22, r18
    4512:	73 0b       	sbc	r23, r19
    4514:	84 0b       	sbc	r24, r20
    4516:	e3 95       	inc	r30
    4518:	9a 95       	dec	r25
    451a:	72 f7       	brpl	.-36     	; 0x44f8 <__fp_rempio2+0x16>
    451c:	80 38       	cpi	r24, 0x80	; 128
    451e:	30 f4       	brcc	.+12     	; 0x452c <__fp_rempio2+0x4a>
    4520:	9a 95       	dec	r25
    4522:	bb 0f       	add	r27, r27
    4524:	66 1f       	adc	r22, r22
    4526:	77 1f       	adc	r23, r23
    4528:	88 1f       	adc	r24, r24
    452a:	d2 f7       	brpl	.-12     	; 0x4520 <__fp_rempio2+0x3e>
    452c:	90 48       	sbci	r25, 0x80	; 128
    452e:	29 c1       	rjmp	.+594    	; 0x4782 <__fp_mpack_finite>

00004530 <__fp_round>:
    4530:	09 2e       	mov	r0, r25
    4532:	03 94       	inc	r0
    4534:	00 0c       	add	r0, r0
    4536:	11 f4       	brne	.+4      	; 0x453c <__fp_round+0xc>
    4538:	88 23       	and	r24, r24
    453a:	52 f0       	brmi	.+20     	; 0x4550 <__fp_round+0x20>
    453c:	bb 0f       	add	r27, r27
    453e:	40 f4       	brcc	.+16     	; 0x4550 <__fp_round+0x20>
    4540:	bf 2b       	or	r27, r31
    4542:	11 f4       	brne	.+4      	; 0x4548 <__fp_round+0x18>
    4544:	60 ff       	sbrs	r22, 0
    4546:	04 c0       	rjmp	.+8      	; 0x4550 <__fp_round+0x20>
    4548:	6f 5f       	subi	r22, 0xFF	; 255
    454a:	7f 4f       	sbci	r23, 0xFF	; 255
    454c:	8f 4f       	sbci	r24, 0xFF	; 255
    454e:	9f 4f       	sbci	r25, 0xFF	; 255
    4550:	08 95       	ret

00004552 <__fp_sinus>:
    4552:	ef 93       	push	r30
    4554:	e0 ff       	sbrs	r30, 0
    4556:	06 c0       	rjmp	.+12     	; 0x4564 <__fp_sinus+0x12>
    4558:	a2 ea       	ldi	r26, 0xA2	; 162
    455a:	2a ed       	ldi	r18, 0xDA	; 218
    455c:	3f e0       	ldi	r19, 0x0F	; 15
    455e:	49 ec       	ldi	r20, 0xC9	; 201
    4560:	5f eb       	ldi	r21, 0xBF	; 191
    4562:	cc dd       	rcall	.-1128   	; 0x40fc <__addsf3x>
    4564:	e5 df       	rcall	.-54     	; 0x4530 <__fp_round>
    4566:	0f 90       	pop	r0
    4568:	03 94       	inc	r0
    456a:	01 fc       	sbrc	r0, 1
    456c:	90 58       	subi	r25, 0x80	; 128
    456e:	e7 ec       	ldi	r30, 0xC7	; 199
    4570:	f0 e0       	ldi	r31, 0x00	; 0
    4572:	13 c1       	rjmp	.+550    	; 0x479a <__fp_powsodd>

00004574 <__fp_split3>:
    4574:	57 fd       	sbrc	r21, 7
    4576:	90 58       	subi	r25, 0x80	; 128
    4578:	44 0f       	add	r20, r20
    457a:	55 1f       	adc	r21, r21
    457c:	59 f0       	breq	.+22     	; 0x4594 <__fp_splitA+0x10>
    457e:	5f 3f       	cpi	r21, 0xFF	; 255
    4580:	71 f0       	breq	.+28     	; 0x459e <__fp_splitA+0x1a>
    4582:	47 95       	ror	r20

00004584 <__fp_splitA>:
    4584:	88 0f       	add	r24, r24
    4586:	97 fb       	bst	r25, 7
    4588:	99 1f       	adc	r25, r25
    458a:	61 f0       	breq	.+24     	; 0x45a4 <__fp_splitA+0x20>
    458c:	9f 3f       	cpi	r25, 0xFF	; 255
    458e:	79 f0       	breq	.+30     	; 0x45ae <__fp_splitA+0x2a>
    4590:	87 95       	ror	r24
    4592:	08 95       	ret
    4594:	12 16       	cp	r1, r18
    4596:	13 06       	cpc	r1, r19
    4598:	14 06       	cpc	r1, r20
    459a:	55 1f       	adc	r21, r21
    459c:	f2 cf       	rjmp	.-28     	; 0x4582 <__fp_split3+0xe>
    459e:	46 95       	lsr	r20
    45a0:	f1 df       	rcall	.-30     	; 0x4584 <__fp_splitA>
    45a2:	08 c0       	rjmp	.+16     	; 0x45b4 <__fp_splitA+0x30>
    45a4:	16 16       	cp	r1, r22
    45a6:	17 06       	cpc	r1, r23
    45a8:	18 06       	cpc	r1, r24
    45aa:	99 1f       	adc	r25, r25
    45ac:	f1 cf       	rjmp	.-30     	; 0x4590 <__fp_splitA+0xc>
    45ae:	86 95       	lsr	r24
    45b0:	71 05       	cpc	r23, r1
    45b2:	61 05       	cpc	r22, r1
    45b4:	08 94       	sec
    45b6:	08 95       	ret

000045b8 <__fp_zero>:
    45b8:	e8 94       	clt

000045ba <__fp_szero>:
    45ba:	bb 27       	eor	r27, r27
    45bc:	66 27       	eor	r22, r22
    45be:	77 27       	eor	r23, r23
    45c0:	cb 01       	movw	r24, r22
    45c2:	97 f9       	bld	r25, 7
    45c4:	08 95       	ret

000045c6 <__gesf2>:
    45c6:	2c df       	rcall	.-424    	; 0x4420 <__fp_cmp>
    45c8:	08 f4       	brcc	.+2      	; 0x45cc <__gesf2+0x6>
    45ca:	8f ef       	ldi	r24, 0xFF	; 255
    45cc:	08 95       	ret

000045ce <inverse>:
    45ce:	9b 01       	movw	r18, r22
    45d0:	ac 01       	movw	r20, r24
    45d2:	60 e0       	ldi	r22, 0x00	; 0
    45d4:	70 e0       	ldi	r23, 0x00	; 0
    45d6:	80 e8       	ldi	r24, 0x80	; 128
    45d8:	9f e3       	ldi	r25, 0x3F	; 63
    45da:	4c ce       	rjmp	.-872    	; 0x4274 <__divsf3>
    45dc:	0e f0       	brts	.+2      	; 0x45e0 <inverse+0x12>
    45de:	cf c0       	rjmp	.+414    	; 0x477e <__fp_mpack>
    45e0:	49 cf       	rjmp	.-366    	; 0x4474 <__fp_nan>
    45e2:	68 94       	set
    45e4:	41 cf       	rjmp	.-382    	; 0x4468 <__fp_inf>

000045e6 <log>:
    45e6:	ce df       	rcall	.-100    	; 0x4584 <__fp_splitA>
    45e8:	c8 f3       	brcs	.-14     	; 0x45dc <inverse+0xe>
    45ea:	99 23       	and	r25, r25
    45ec:	d1 f3       	breq	.-12     	; 0x45e2 <inverse+0x14>
    45ee:	c6 f3       	brts	.-16     	; 0x45e0 <inverse+0x12>
    45f0:	df 93       	push	r29
    45f2:	cf 93       	push	r28
    45f4:	1f 93       	push	r17
    45f6:	0f 93       	push	r16
    45f8:	ff 92       	push	r15
    45fa:	c9 2f       	mov	r28, r25
    45fc:	dd 27       	eor	r29, r29
    45fe:	88 23       	and	r24, r24
    4600:	2a f0       	brmi	.+10     	; 0x460c <log+0x26>
    4602:	21 97       	sbiw	r28, 0x01	; 1
    4604:	66 0f       	add	r22, r22
    4606:	77 1f       	adc	r23, r23
    4608:	88 1f       	adc	r24, r24
    460a:	da f7       	brpl	.-10     	; 0x4602 <log+0x1c>
    460c:	20 e0       	ldi	r18, 0x00	; 0
    460e:	30 e0       	ldi	r19, 0x00	; 0
    4610:	40 e8       	ldi	r20, 0x80	; 128
    4612:	5f eb       	ldi	r21, 0xBF	; 191
    4614:	9f e3       	ldi	r25, 0x3F	; 63
    4616:	88 39       	cpi	r24, 0x98	; 152
    4618:	20 f0       	brcs	.+8      	; 0x4622 <log+0x3c>
    461a:	80 3e       	cpi	r24, 0xE0	; 224
    461c:	30 f0       	brcs	.+12     	; 0x462a <log+0x44>
    461e:	21 96       	adiw	r28, 0x01	; 1
    4620:	8f 77       	andi	r24, 0x7F	; 127
    4622:	5b dd       	rcall	.-1354   	; 0x40da <__addsf3>
    4624:	e5 ee       	ldi	r30, 0xE5	; 229
    4626:	f0 e0       	ldi	r31, 0x00	; 0
    4628:	03 c0       	rjmp	.+6      	; 0x4630 <log+0x4a>
    462a:	57 dd       	rcall	.-1362   	; 0x40da <__addsf3>
    462c:	e2 e1       	ldi	r30, 0x12	; 18
    462e:	f1 e0       	ldi	r31, 0x01	; 1
    4630:	24 df       	rcall	.-440    	; 0x447a <__fp_powser>
    4632:	8b 01       	movw	r16, r22
    4634:	be 01       	movw	r22, r28
    4636:	ec 01       	movw	r28, r24
    4638:	fb 2e       	mov	r15, r27
    463a:	6f 57       	subi	r22, 0x7F	; 127
    463c:	71 09       	sbc	r23, r1
    463e:	75 95       	asr	r23
    4640:	77 1f       	adc	r23, r23
    4642:	88 0b       	sbc	r24, r24
    4644:	99 0b       	sbc	r25, r25
    4646:	b1 de       	rcall	.-670    	; 0x43aa <__floatsisf>
    4648:	28 e1       	ldi	r18, 0x18	; 24
    464a:	32 e7       	ldi	r19, 0x72	; 114
    464c:	41 e3       	ldi	r20, 0x31	; 49
    464e:	5f e3       	ldi	r21, 0x3F	; 63
    4650:	16 d0       	rcall	.+44     	; 0x467e <__mulsf3x>
    4652:	af 2d       	mov	r26, r15
    4654:	98 01       	movw	r18, r16
    4656:	ae 01       	movw	r20, r28
    4658:	ff 90       	pop	r15
    465a:	0f 91       	pop	r16
    465c:	1f 91       	pop	r17
    465e:	cf 91       	pop	r28
    4660:	df 91       	pop	r29
    4662:	4c dd       	rcall	.-1384   	; 0x40fc <__addsf3x>
    4664:	65 cf       	rjmp	.-310    	; 0x4530 <__fp_round>

00004666 <__mulsf3>:
    4666:	0b d0       	rcall	.+22     	; 0x467e <__mulsf3x>
    4668:	63 cf       	rjmp	.-314    	; 0x4530 <__fp_round>
    466a:	2c df       	rcall	.-424    	; 0x44c4 <__fp_pscA>
    466c:	28 f0       	brcs	.+10     	; 0x4678 <__mulsf3+0x12>
    466e:	31 df       	rcall	.-414    	; 0x44d2 <__fp_pscB>
    4670:	18 f0       	brcs	.+6      	; 0x4678 <__mulsf3+0x12>
    4672:	95 23       	and	r25, r21
    4674:	09 f0       	breq	.+2      	; 0x4678 <__mulsf3+0x12>
    4676:	f8 ce       	rjmp	.-528    	; 0x4468 <__fp_inf>
    4678:	fd ce       	rjmp	.-518    	; 0x4474 <__fp_nan>
    467a:	11 24       	eor	r1, r1
    467c:	9e cf       	rjmp	.-196    	; 0x45ba <__fp_szero>

0000467e <__mulsf3x>:
    467e:	7a df       	rcall	.-268    	; 0x4574 <__fp_split3>
    4680:	a0 f3       	brcs	.-24     	; 0x466a <__mulsf3+0x4>

00004682 <__mulsf3_pse>:
    4682:	95 9f       	mul	r25, r21
    4684:	d1 f3       	breq	.-12     	; 0x467a <__mulsf3+0x14>
    4686:	95 0f       	add	r25, r21
    4688:	50 e0       	ldi	r21, 0x00	; 0
    468a:	55 1f       	adc	r21, r21
    468c:	62 9f       	mul	r22, r18
    468e:	f0 01       	movw	r30, r0
    4690:	72 9f       	mul	r23, r18
    4692:	bb 27       	eor	r27, r27
    4694:	f0 0d       	add	r31, r0
    4696:	b1 1d       	adc	r27, r1
    4698:	63 9f       	mul	r22, r19
    469a:	aa 27       	eor	r26, r26
    469c:	f0 0d       	add	r31, r0
    469e:	b1 1d       	adc	r27, r1
    46a0:	aa 1f       	adc	r26, r26
    46a2:	64 9f       	mul	r22, r20
    46a4:	66 27       	eor	r22, r22
    46a6:	b0 0d       	add	r27, r0
    46a8:	a1 1d       	adc	r26, r1
    46aa:	66 1f       	adc	r22, r22
    46ac:	82 9f       	mul	r24, r18
    46ae:	22 27       	eor	r18, r18
    46b0:	b0 0d       	add	r27, r0
    46b2:	a1 1d       	adc	r26, r1
    46b4:	62 1f       	adc	r22, r18
    46b6:	73 9f       	mul	r23, r19
    46b8:	b0 0d       	add	r27, r0
    46ba:	a1 1d       	adc	r26, r1
    46bc:	62 1f       	adc	r22, r18
    46be:	83 9f       	mul	r24, r19
    46c0:	a0 0d       	add	r26, r0
    46c2:	61 1d       	adc	r22, r1
    46c4:	22 1f       	adc	r18, r18
    46c6:	74 9f       	mul	r23, r20
    46c8:	33 27       	eor	r19, r19
    46ca:	a0 0d       	add	r26, r0
    46cc:	61 1d       	adc	r22, r1
    46ce:	23 1f       	adc	r18, r19
    46d0:	84 9f       	mul	r24, r20
    46d2:	60 0d       	add	r22, r0
    46d4:	21 1d       	adc	r18, r1
    46d6:	82 2f       	mov	r24, r18
    46d8:	76 2f       	mov	r23, r22
    46da:	6a 2f       	mov	r22, r26
    46dc:	11 24       	eor	r1, r1
    46de:	9f 57       	subi	r25, 0x7F	; 127
    46e0:	50 40       	sbci	r21, 0x00	; 0
    46e2:	8a f0       	brmi	.+34     	; 0x4706 <__mulsf3_pse+0x84>
    46e4:	e1 f0       	breq	.+56     	; 0x471e <__mulsf3_pse+0x9c>
    46e6:	88 23       	and	r24, r24
    46e8:	4a f0       	brmi	.+18     	; 0x46fc <__mulsf3_pse+0x7a>
    46ea:	ee 0f       	add	r30, r30
    46ec:	ff 1f       	adc	r31, r31
    46ee:	bb 1f       	adc	r27, r27
    46f0:	66 1f       	adc	r22, r22
    46f2:	77 1f       	adc	r23, r23
    46f4:	88 1f       	adc	r24, r24
    46f6:	91 50       	subi	r25, 0x01	; 1
    46f8:	50 40       	sbci	r21, 0x00	; 0
    46fa:	a9 f7       	brne	.-22     	; 0x46e6 <__mulsf3_pse+0x64>
    46fc:	9e 3f       	cpi	r25, 0xFE	; 254
    46fe:	51 05       	cpc	r21, r1
    4700:	70 f0       	brcs	.+28     	; 0x471e <__mulsf3_pse+0x9c>
    4702:	b2 ce       	rjmp	.-668    	; 0x4468 <__fp_inf>
    4704:	5a cf       	rjmp	.-332    	; 0x45ba <__fp_szero>
    4706:	5f 3f       	cpi	r21, 0xFF	; 255
    4708:	ec f3       	brlt	.-6      	; 0x4704 <__mulsf3_pse+0x82>
    470a:	98 3e       	cpi	r25, 0xE8	; 232
    470c:	dc f3       	brlt	.-10     	; 0x4704 <__mulsf3_pse+0x82>
    470e:	86 95       	lsr	r24
    4710:	77 95       	ror	r23
    4712:	67 95       	ror	r22
    4714:	b7 95       	ror	r27
    4716:	f7 95       	ror	r31
    4718:	e7 95       	ror	r30
    471a:	9f 5f       	subi	r25, 0xFF	; 255
    471c:	c1 f7       	brne	.-16     	; 0x470e <__mulsf3_pse+0x8c>
    471e:	fe 2b       	or	r31, r30
    4720:	88 0f       	add	r24, r24
    4722:	91 1d       	adc	r25, r1
    4724:	96 95       	lsr	r25
    4726:	87 95       	ror	r24
    4728:	97 f9       	bld	r25, 7
    472a:	08 95       	ret

0000472c <sin>:
    472c:	9f 93       	push	r25
    472e:	d9 de       	rcall	.-590    	; 0x44e2 <__fp_rempio2>
    4730:	0f 90       	pop	r0
    4732:	07 fc       	sbrc	r0, 7
    4734:	ee 5f       	subi	r30, 0xFE	; 254
    4736:	0d cf       	rjmp	.-486    	; 0x4552 <__fp_sinus>

00004738 <square>:
    4738:	9b 01       	movw	r18, r22
    473a:	ac 01       	movw	r20, r24
    473c:	94 cf       	rjmp	.-216    	; 0x4666 <__mulsf3>

0000473e <tan>:
    473e:	df 93       	push	r29
    4740:	d9 2f       	mov	r29, r25
    4742:	cf de       	rcall	.-610    	; 0x44e2 <__fp_rempio2>
    4744:	e6 95       	lsr	r30
    4746:	d7 95       	ror	r29
    4748:	2a ed       	ldi	r18, 0xDA	; 218
    474a:	3f e0       	ldi	r19, 0x0F	; 15
    474c:	49 e4       	ldi	r20, 0x49	; 73
    474e:	5f e3       	ldi	r21, 0x3F	; 63
    4750:	b3 3a       	cpi	r27, 0xA3	; 163
    4752:	62 07       	cpc	r22, r18
    4754:	73 07       	cpc	r23, r19
    4756:	84 07       	cpc	r24, r20
    4758:	95 07       	cpc	r25, r21
    475a:	d7 95       	ror	r29
    475c:	2a f0       	brmi	.+10     	; 0x4768 <tan+0x2a>
    475e:	a2 ea       	ldi	r26, 0xA2	; 162
    4760:	49 ec       	ldi	r20, 0xC9	; 201
    4762:	90 68       	ori	r25, 0x80	; 128
    4764:	cb dc       	rcall	.-1642   	; 0x40fc <__addsf3x>
    4766:	e4 de       	rcall	.-568    	; 0x4530 <__fp_round>
    4768:	ef e3       	ldi	r30, 0x3F	; 63
    476a:	f1 e0       	ldi	r31, 0x01	; 1
    476c:	16 d0       	rcall	.+44     	; 0x479a <__fp_powsodd>
    476e:	dd 0f       	add	r29, r29
    4770:	0b f0       	brvs	.+2      	; 0x4774 <tan+0x36>
    4772:	2d df       	rcall	.-422    	; 0x45ce <inverse>
    4774:	dd 0f       	add	r29, r29
    4776:	0b f4       	brvc	.+2      	; 0x477a <tan+0x3c>
    4778:	90 58       	subi	r25, 0x80	; 128
    477a:	df 91       	pop	r29
    477c:	08 95       	ret

0000477e <__fp_mpack>:
    477e:	9f 3f       	cpi	r25, 0xFF	; 255
    4780:	31 f0       	breq	.+12     	; 0x478e <__fp_mpack_finite+0xc>

00004782 <__fp_mpack_finite>:
    4782:	91 50       	subi	r25, 0x01	; 1
    4784:	20 f4       	brcc	.+8      	; 0x478e <__fp_mpack_finite+0xc>
    4786:	87 95       	ror	r24
    4788:	77 95       	ror	r23
    478a:	67 95       	ror	r22
    478c:	b7 95       	ror	r27
    478e:	88 0f       	add	r24, r24
    4790:	91 1d       	adc	r25, r1
    4792:	96 95       	lsr	r25
    4794:	87 95       	ror	r24
    4796:	97 f9       	bld	r25, 7
    4798:	08 95       	ret

0000479a <__fp_powsodd>:
    479a:	9f 93       	push	r25
    479c:	8f 93       	push	r24
    479e:	7f 93       	push	r23
    47a0:	6f 93       	push	r22
    47a2:	ff 93       	push	r31
    47a4:	ef 93       	push	r30
    47a6:	9b 01       	movw	r18, r22
    47a8:	ac 01       	movw	r20, r24
    47aa:	5d df       	rcall	.-326    	; 0x4666 <__mulsf3>
    47ac:	ef 91       	pop	r30
    47ae:	ff 91       	pop	r31
    47b0:	64 de       	rcall	.-824    	; 0x447a <__fp_powser>
    47b2:	2f 91       	pop	r18
    47b4:	3f 91       	pop	r19
    47b6:	4f 91       	pop	r20
    47b8:	5f 91       	pop	r21
    47ba:	55 cf       	rjmp	.-342    	; 0x4666 <__mulsf3>

000047bc <vfprintf>:
    47bc:	a3 e1       	ldi	r26, 0x13	; 19
    47be:	b0 e0       	ldi	r27, 0x00	; 0
    47c0:	e4 ee       	ldi	r30, 0xE4	; 228
    47c2:	f3 e2       	ldi	r31, 0x23	; 35
    47c4:	0c 94 5f 27 	jmp	0x4ebe	; 0x4ebe <__prologue_saves__>
    47c8:	7c 01       	movw	r14, r24
    47ca:	1b 01       	movw	r2, r22
    47cc:	6a 01       	movw	r12, r20
    47ce:	fc 01       	movw	r30, r24
    47d0:	17 82       	std	Z+7, r1	; 0x07
    47d2:	16 82       	std	Z+6, r1	; 0x06
    47d4:	83 81       	ldd	r24, Z+3	; 0x03
    47d6:	81 ff       	sbrs	r24, 1
    47d8:	66 c3       	rjmp	.+1740   	; 0x4ea6 <vfprintf+0x6ea>
    47da:	be 01       	movw	r22, r28
    47dc:	6f 5f       	subi	r22, 0xFF	; 255
    47de:	7f 4f       	sbci	r23, 0xFF	; 255
    47e0:	4b 01       	movw	r8, r22
    47e2:	f7 01       	movw	r30, r14
    47e4:	93 81       	ldd	r25, Z+3	; 0x03
    47e6:	f1 01       	movw	r30, r2
    47e8:	93 fd       	sbrc	r25, 3
    47ea:	85 91       	lpm	r24, Z+
    47ec:	93 ff       	sbrs	r25, 3
    47ee:	81 91       	ld	r24, Z+
    47f0:	1f 01       	movw	r2, r30
    47f2:	88 23       	and	r24, r24
    47f4:	09 f4       	brne	.+2      	; 0x47f8 <vfprintf+0x3c>
    47f6:	53 c3       	rjmp	.+1702   	; 0x4e9e <vfprintf+0x6e2>
    47f8:	85 32       	cpi	r24, 0x25	; 37
    47fa:	39 f4       	brne	.+14     	; 0x480a <vfprintf+0x4e>
    47fc:	93 fd       	sbrc	r25, 3
    47fe:	85 91       	lpm	r24, Z+
    4800:	93 ff       	sbrs	r25, 3
    4802:	81 91       	ld	r24, Z+
    4804:	1f 01       	movw	r2, r30
    4806:	85 32       	cpi	r24, 0x25	; 37
    4808:	39 f4       	brne	.+14     	; 0x4818 <vfprintf+0x5c>
    480a:	b7 01       	movw	r22, r14
    480c:	90 e0       	ldi	r25, 0x00	; 0
    480e:	0e 94 84 28 	call	0x5108	; 0x5108 <fputc>
    4812:	56 01       	movw	r10, r12
    4814:	65 01       	movw	r12, r10
    4816:	e5 cf       	rjmp	.-54     	; 0x47e2 <vfprintf+0x26>
    4818:	10 e0       	ldi	r17, 0x00	; 0
    481a:	51 2c       	mov	r5, r1
    481c:	20 e0       	ldi	r18, 0x00	; 0
    481e:	20 32       	cpi	r18, 0x20	; 32
    4820:	a0 f4       	brcc	.+40     	; 0x484a <vfprintf+0x8e>
    4822:	8b 32       	cpi	r24, 0x2B	; 43
    4824:	69 f0       	breq	.+26     	; 0x4840 <vfprintf+0x84>
    4826:	30 f4       	brcc	.+12     	; 0x4834 <vfprintf+0x78>
    4828:	80 32       	cpi	r24, 0x20	; 32
    482a:	59 f0       	breq	.+22     	; 0x4842 <vfprintf+0x86>
    482c:	83 32       	cpi	r24, 0x23	; 35
    482e:	69 f4       	brne	.+26     	; 0x484a <vfprintf+0x8e>
    4830:	20 61       	ori	r18, 0x10	; 16
    4832:	2c c0       	rjmp	.+88     	; 0x488c <vfprintf+0xd0>
    4834:	8d 32       	cpi	r24, 0x2D	; 45
    4836:	39 f0       	breq	.+14     	; 0x4846 <vfprintf+0x8a>
    4838:	80 33       	cpi	r24, 0x30	; 48
    483a:	39 f4       	brne	.+14     	; 0x484a <vfprintf+0x8e>
    483c:	21 60       	ori	r18, 0x01	; 1
    483e:	26 c0       	rjmp	.+76     	; 0x488c <vfprintf+0xd0>
    4840:	22 60       	ori	r18, 0x02	; 2
    4842:	24 60       	ori	r18, 0x04	; 4
    4844:	23 c0       	rjmp	.+70     	; 0x488c <vfprintf+0xd0>
    4846:	28 60       	ori	r18, 0x08	; 8
    4848:	21 c0       	rjmp	.+66     	; 0x488c <vfprintf+0xd0>
    484a:	27 fd       	sbrc	r18, 7
    484c:	27 c0       	rjmp	.+78     	; 0x489c <vfprintf+0xe0>
    484e:	30 ed       	ldi	r19, 0xD0	; 208
    4850:	38 0f       	add	r19, r24
    4852:	3a 30       	cpi	r19, 0x0A	; 10
    4854:	78 f4       	brcc	.+30     	; 0x4874 <vfprintf+0xb8>
    4856:	26 ff       	sbrs	r18, 6
    4858:	06 c0       	rjmp	.+12     	; 0x4866 <vfprintf+0xaa>
    485a:	fa e0       	ldi	r31, 0x0A	; 10
    485c:	1f 9f       	mul	r17, r31
    485e:	30 0d       	add	r19, r0
    4860:	11 24       	eor	r1, r1
    4862:	13 2f       	mov	r17, r19
    4864:	13 c0       	rjmp	.+38     	; 0x488c <vfprintf+0xd0>
    4866:	6a e0       	ldi	r22, 0x0A	; 10
    4868:	56 9e       	mul	r5, r22
    486a:	30 0d       	add	r19, r0
    486c:	11 24       	eor	r1, r1
    486e:	53 2e       	mov	r5, r19
    4870:	20 62       	ori	r18, 0x20	; 32
    4872:	0c c0       	rjmp	.+24     	; 0x488c <vfprintf+0xd0>
    4874:	8e 32       	cpi	r24, 0x2E	; 46
    4876:	21 f4       	brne	.+8      	; 0x4880 <vfprintf+0xc4>
    4878:	26 fd       	sbrc	r18, 6
    487a:	11 c3       	rjmp	.+1570   	; 0x4e9e <vfprintf+0x6e2>
    487c:	20 64       	ori	r18, 0x40	; 64
    487e:	06 c0       	rjmp	.+12     	; 0x488c <vfprintf+0xd0>
    4880:	8c 36       	cpi	r24, 0x6C	; 108
    4882:	11 f4       	brne	.+4      	; 0x4888 <vfprintf+0xcc>
    4884:	20 68       	ori	r18, 0x80	; 128
    4886:	02 c0       	rjmp	.+4      	; 0x488c <vfprintf+0xd0>
    4888:	88 36       	cpi	r24, 0x68	; 104
    488a:	41 f4       	brne	.+16     	; 0x489c <vfprintf+0xe0>
    488c:	f1 01       	movw	r30, r2
    488e:	93 fd       	sbrc	r25, 3
    4890:	85 91       	lpm	r24, Z+
    4892:	93 ff       	sbrs	r25, 3
    4894:	81 91       	ld	r24, Z+
    4896:	1f 01       	movw	r2, r30
    4898:	81 11       	cpse	r24, r1
    489a:	c1 cf       	rjmp	.-126    	; 0x481e <vfprintf+0x62>
    489c:	9b eb       	ldi	r25, 0xBB	; 187
    489e:	98 0f       	add	r25, r24
    48a0:	93 30       	cpi	r25, 0x03	; 3
    48a2:	18 f4       	brcc	.+6      	; 0x48aa <vfprintf+0xee>
    48a4:	20 61       	ori	r18, 0x10	; 16
    48a6:	80 5e       	subi	r24, 0xE0	; 224
    48a8:	06 c0       	rjmp	.+12     	; 0x48b6 <vfprintf+0xfa>
    48aa:	9b e9       	ldi	r25, 0x9B	; 155
    48ac:	98 0f       	add	r25, r24
    48ae:	93 30       	cpi	r25, 0x03	; 3
    48b0:	08 f0       	brcs	.+2      	; 0x48b4 <vfprintf+0xf8>
    48b2:	aa c1       	rjmp	.+852    	; 0x4c08 <vfprintf+0x44c>
    48b4:	2f 7e       	andi	r18, 0xEF	; 239
    48b6:	26 ff       	sbrs	r18, 6
    48b8:	16 e0       	ldi	r17, 0x06	; 6
    48ba:	2f 73       	andi	r18, 0x3F	; 63
    48bc:	72 2e       	mov	r7, r18
    48be:	85 36       	cpi	r24, 0x65	; 101
    48c0:	21 f4       	brne	.+8      	; 0x48ca <vfprintf+0x10e>
    48c2:	f2 2f       	mov	r31, r18
    48c4:	f0 64       	ori	r31, 0x40	; 64
    48c6:	7f 2e       	mov	r7, r31
    48c8:	08 c0       	rjmp	.+16     	; 0x48da <vfprintf+0x11e>
    48ca:	86 36       	cpi	r24, 0x66	; 102
    48cc:	21 f4       	brne	.+8      	; 0x48d6 <vfprintf+0x11a>
    48ce:	62 2f       	mov	r22, r18
    48d0:	60 68       	ori	r22, 0x80	; 128
    48d2:	76 2e       	mov	r7, r22
    48d4:	02 c0       	rjmp	.+4      	; 0x48da <vfprintf+0x11e>
    48d6:	11 11       	cpse	r17, r1
    48d8:	11 50       	subi	r17, 0x01	; 1
    48da:	77 fe       	sbrs	r7, 7
    48dc:	07 c0       	rjmp	.+14     	; 0x48ec <vfprintf+0x130>
    48de:	1c 33       	cpi	r17, 0x3C	; 60
    48e0:	48 f4       	brcc	.+18     	; 0x48f4 <vfprintf+0x138>
    48e2:	44 24       	eor	r4, r4
    48e4:	43 94       	inc	r4
    48e6:	41 0e       	add	r4, r17
    48e8:	27 e0       	ldi	r18, 0x07	; 7
    48ea:	0b c0       	rjmp	.+22     	; 0x4902 <vfprintf+0x146>
    48ec:	18 30       	cpi	r17, 0x08	; 8
    48ee:	30 f4       	brcc	.+12     	; 0x48fc <vfprintf+0x140>
    48f0:	21 2f       	mov	r18, r17
    48f2:	06 c0       	rjmp	.+12     	; 0x4900 <vfprintf+0x144>
    48f4:	27 e0       	ldi	r18, 0x07	; 7
    48f6:	4c e3       	ldi	r20, 0x3C	; 60
    48f8:	44 2e       	mov	r4, r20
    48fa:	03 c0       	rjmp	.+6      	; 0x4902 <vfprintf+0x146>
    48fc:	27 e0       	ldi	r18, 0x07	; 7
    48fe:	17 e0       	ldi	r17, 0x07	; 7
    4900:	41 2c       	mov	r4, r1
    4902:	56 01       	movw	r10, r12
    4904:	74 e0       	ldi	r23, 0x04	; 4
    4906:	a7 0e       	add	r10, r23
    4908:	b1 1c       	adc	r11, r1
    490a:	f6 01       	movw	r30, r12
    490c:	60 81       	ld	r22, Z
    490e:	71 81       	ldd	r23, Z+1	; 0x01
    4910:	82 81       	ldd	r24, Z+2	; 0x02
    4912:	93 81       	ldd	r25, Z+3	; 0x03
    4914:	04 2d       	mov	r16, r4
    4916:	a4 01       	movw	r20, r8
    4918:	0e 94 96 27 	call	0x4f2c	; 0x4f2c <__ftoa_engine>
    491c:	6c 01       	movw	r12, r24
    491e:	09 81       	ldd	r16, Y+1	; 0x01
    4920:	00 ff       	sbrs	r16, 0
    4922:	02 c0       	rjmp	.+4      	; 0x4928 <vfprintf+0x16c>
    4924:	03 ff       	sbrs	r16, 3
    4926:	06 c0       	rjmp	.+12     	; 0x4934 <vfprintf+0x178>
    4928:	71 fc       	sbrc	r7, 1
    492a:	07 c0       	rjmp	.+14     	; 0x493a <vfprintf+0x17e>
    492c:	72 fc       	sbrc	r7, 2
    492e:	08 c0       	rjmp	.+16     	; 0x4940 <vfprintf+0x184>
    4930:	61 2c       	mov	r6, r1
    4932:	08 c0       	rjmp	.+16     	; 0x4944 <vfprintf+0x188>
    4934:	3d e2       	ldi	r19, 0x2D	; 45
    4936:	63 2e       	mov	r6, r19
    4938:	05 c0       	rjmp	.+10     	; 0x4944 <vfprintf+0x188>
    493a:	2b e2       	ldi	r18, 0x2B	; 43
    493c:	62 2e       	mov	r6, r18
    493e:	02 c0       	rjmp	.+4      	; 0x4944 <vfprintf+0x188>
    4940:	90 e2       	ldi	r25, 0x20	; 32
    4942:	69 2e       	mov	r6, r25
    4944:	80 2f       	mov	r24, r16
    4946:	8c 70       	andi	r24, 0x0C	; 12
    4948:	99 f1       	breq	.+102    	; 0x49b0 <vfprintf+0x1f4>
    494a:	66 20       	and	r6, r6
    494c:	11 f0       	breq	.+4      	; 0x4952 <vfprintf+0x196>
    494e:	84 e0       	ldi	r24, 0x04	; 4
    4950:	01 c0       	rjmp	.+2      	; 0x4954 <vfprintf+0x198>
    4952:	83 e0       	ldi	r24, 0x03	; 3
    4954:	85 15       	cp	r24, r5
    4956:	10 f0       	brcs	.+4      	; 0x495c <vfprintf+0x1a0>
    4958:	51 2c       	mov	r5, r1
    495a:	0b c0       	rjmp	.+22     	; 0x4972 <vfprintf+0x1b6>
    495c:	58 1a       	sub	r5, r24
    495e:	73 fc       	sbrc	r7, 3
    4960:	08 c0       	rjmp	.+16     	; 0x4972 <vfprintf+0x1b6>
    4962:	b7 01       	movw	r22, r14
    4964:	80 e2       	ldi	r24, 0x20	; 32
    4966:	90 e0       	ldi	r25, 0x00	; 0
    4968:	0e 94 84 28 	call	0x5108	; 0x5108 <fputc>
    496c:	5a 94       	dec	r5
    496e:	c9 f7       	brne	.-14     	; 0x4962 <vfprintf+0x1a6>
    4970:	f3 cf       	rjmp	.-26     	; 0x4958 <vfprintf+0x19c>
    4972:	66 20       	and	r6, r6
    4974:	29 f0       	breq	.+10     	; 0x4980 <vfprintf+0x1c4>
    4976:	b7 01       	movw	r22, r14
    4978:	86 2d       	mov	r24, r6
    497a:	90 e0       	ldi	r25, 0x00	; 0
    497c:	0e 94 84 28 	call	0x5108	; 0x5108 <fputc>
    4980:	03 fd       	sbrc	r16, 3
    4982:	03 c0       	rjmp	.+6      	; 0x498a <vfprintf+0x1ce>
    4984:	0c e7       	ldi	r16, 0x7C	; 124
    4986:	14 e0       	ldi	r17, 0x04	; 4
    4988:	02 c0       	rjmp	.+4      	; 0x498e <vfprintf+0x1d2>
    498a:	08 e7       	ldi	r16, 0x78	; 120
    498c:	14 e0       	ldi	r17, 0x04	; 4
    498e:	f7 2d       	mov	r31, r7
    4990:	f0 71       	andi	r31, 0x10	; 16
    4992:	7f 2e       	mov	r7, r31
    4994:	f8 01       	movw	r30, r16
    4996:	84 91       	lpm	r24, Z
    4998:	88 23       	and	r24, r24
    499a:	09 f4       	brne	.+2      	; 0x499e <vfprintf+0x1e2>
    499c:	76 c2       	rjmp	.+1260   	; 0x4e8a <vfprintf+0x6ce>
    499e:	71 10       	cpse	r7, r1
    49a0:	80 52       	subi	r24, 0x20	; 32
    49a2:	b7 01       	movw	r22, r14
    49a4:	90 e0       	ldi	r25, 0x00	; 0
    49a6:	0e 94 84 28 	call	0x5108	; 0x5108 <fputc>
    49aa:	0f 5f       	subi	r16, 0xFF	; 255
    49ac:	1f 4f       	sbci	r17, 0xFF	; 255
    49ae:	f2 cf       	rjmp	.-28     	; 0x4994 <vfprintf+0x1d8>
    49b0:	77 fe       	sbrs	r7, 7
    49b2:	0f c0       	rjmp	.+30     	; 0x49d2 <vfprintf+0x216>
    49b4:	4c 0c       	add	r4, r12
    49b6:	04 ff       	sbrs	r16, 4
    49b8:	04 c0       	rjmp	.+8      	; 0x49c2 <vfprintf+0x206>
    49ba:	8a 81       	ldd	r24, Y+2	; 0x02
    49bc:	81 33       	cpi	r24, 0x31	; 49
    49be:	09 f4       	brne	.+2      	; 0x49c2 <vfprintf+0x206>
    49c0:	4a 94       	dec	r4
    49c2:	14 14       	cp	r1, r4
    49c4:	74 f5       	brge	.+92     	; 0x4a22 <vfprintf+0x266>
    49c6:	f8 e0       	ldi	r31, 0x08	; 8
    49c8:	f4 15       	cp	r31, r4
    49ca:	78 f5       	brcc	.+94     	; 0x4a2a <vfprintf+0x26e>
    49cc:	88 e0       	ldi	r24, 0x08	; 8
    49ce:	48 2e       	mov	r4, r24
    49d0:	2c c0       	rjmp	.+88     	; 0x4a2a <vfprintf+0x26e>
    49d2:	76 fc       	sbrc	r7, 6
    49d4:	2a c0       	rjmp	.+84     	; 0x4a2a <vfprintf+0x26e>
    49d6:	81 2f       	mov	r24, r17
    49d8:	90 e0       	ldi	r25, 0x00	; 0
    49da:	8c 15       	cp	r24, r12
    49dc:	9d 05       	cpc	r25, r13
    49de:	9c f0       	brlt	.+38     	; 0x4a06 <vfprintf+0x24a>
    49e0:	6c ef       	ldi	r22, 0xFC	; 252
    49e2:	c6 16       	cp	r12, r22
    49e4:	6f ef       	ldi	r22, 0xFF	; 255
    49e6:	d6 06       	cpc	r13, r22
    49e8:	74 f0       	brlt	.+28     	; 0x4a06 <vfprintf+0x24a>
    49ea:	77 2d       	mov	r23, r7
    49ec:	70 68       	ori	r23, 0x80	; 128
    49ee:	77 2e       	mov	r7, r23
    49f0:	0a c0       	rjmp	.+20     	; 0x4a06 <vfprintf+0x24a>
    49f2:	e2 e0       	ldi	r30, 0x02	; 2
    49f4:	f0 e0       	ldi	r31, 0x00	; 0
    49f6:	ec 0f       	add	r30, r28
    49f8:	fd 1f       	adc	r31, r29
    49fa:	e1 0f       	add	r30, r17
    49fc:	f1 1d       	adc	r31, r1
    49fe:	80 81       	ld	r24, Z
    4a00:	80 33       	cpi	r24, 0x30	; 48
    4a02:	19 f4       	brne	.+6      	; 0x4a0a <vfprintf+0x24e>
    4a04:	11 50       	subi	r17, 0x01	; 1
    4a06:	11 11       	cpse	r17, r1
    4a08:	f4 cf       	rjmp	.-24     	; 0x49f2 <vfprintf+0x236>
    4a0a:	77 fe       	sbrs	r7, 7
    4a0c:	0e c0       	rjmp	.+28     	; 0x4a2a <vfprintf+0x26e>
    4a0e:	44 24       	eor	r4, r4
    4a10:	43 94       	inc	r4
    4a12:	41 0e       	add	r4, r17
    4a14:	81 2f       	mov	r24, r17
    4a16:	90 e0       	ldi	r25, 0x00	; 0
    4a18:	c8 16       	cp	r12, r24
    4a1a:	d9 06       	cpc	r13, r25
    4a1c:	2c f4       	brge	.+10     	; 0x4a28 <vfprintf+0x26c>
    4a1e:	1c 19       	sub	r17, r12
    4a20:	04 c0       	rjmp	.+8      	; 0x4a2a <vfprintf+0x26e>
    4a22:	44 24       	eor	r4, r4
    4a24:	43 94       	inc	r4
    4a26:	01 c0       	rjmp	.+2      	; 0x4a2a <vfprintf+0x26e>
    4a28:	10 e0       	ldi	r17, 0x00	; 0
    4a2a:	77 fe       	sbrs	r7, 7
    4a2c:	07 c0       	rjmp	.+14     	; 0x4a3c <vfprintf+0x280>
    4a2e:	1c 14       	cp	r1, r12
    4a30:	1d 04       	cpc	r1, r13
    4a32:	3c f4       	brge	.+14     	; 0x4a42 <vfprintf+0x286>
    4a34:	96 01       	movw	r18, r12
    4a36:	2f 5f       	subi	r18, 0xFF	; 255
    4a38:	3f 4f       	sbci	r19, 0xFF	; 255
    4a3a:	05 c0       	rjmp	.+10     	; 0x4a46 <vfprintf+0x28a>
    4a3c:	25 e0       	ldi	r18, 0x05	; 5
    4a3e:	30 e0       	ldi	r19, 0x00	; 0
    4a40:	02 c0       	rjmp	.+4      	; 0x4a46 <vfprintf+0x28a>
    4a42:	21 e0       	ldi	r18, 0x01	; 1
    4a44:	30 e0       	ldi	r19, 0x00	; 0
    4a46:	66 20       	and	r6, r6
    4a48:	11 f0       	breq	.+4      	; 0x4a4e <vfprintf+0x292>
    4a4a:	2f 5f       	subi	r18, 0xFF	; 255
    4a4c:	3f 4f       	sbci	r19, 0xFF	; 255
    4a4e:	11 23       	and	r17, r17
    4a50:	31 f0       	breq	.+12     	; 0x4a5e <vfprintf+0x2a2>
    4a52:	41 2f       	mov	r20, r17
    4a54:	50 e0       	ldi	r21, 0x00	; 0
    4a56:	4f 5f       	subi	r20, 0xFF	; 255
    4a58:	5f 4f       	sbci	r21, 0xFF	; 255
    4a5a:	24 0f       	add	r18, r20
    4a5c:	35 1f       	adc	r19, r21
    4a5e:	45 2d       	mov	r20, r5
    4a60:	50 e0       	ldi	r21, 0x00	; 0
    4a62:	24 17       	cp	r18, r20
    4a64:	35 07       	cpc	r19, r21
    4a66:	14 f4       	brge	.+4      	; 0x4a6c <vfprintf+0x2b0>
    4a68:	52 1a       	sub	r5, r18
    4a6a:	01 c0       	rjmp	.+2      	; 0x4a6e <vfprintf+0x2b2>
    4a6c:	51 2c       	mov	r5, r1
    4a6e:	87 2d       	mov	r24, r7
    4a70:	89 70       	andi	r24, 0x09	; 9
    4a72:	49 f4       	brne	.+18     	; 0x4a86 <vfprintf+0x2ca>
    4a74:	55 20       	and	r5, r5
    4a76:	39 f0       	breq	.+14     	; 0x4a86 <vfprintf+0x2ca>
    4a78:	b7 01       	movw	r22, r14
    4a7a:	80 e2       	ldi	r24, 0x20	; 32
    4a7c:	90 e0       	ldi	r25, 0x00	; 0
    4a7e:	0e 94 84 28 	call	0x5108	; 0x5108 <fputc>
    4a82:	5a 94       	dec	r5
    4a84:	f7 cf       	rjmp	.-18     	; 0x4a74 <vfprintf+0x2b8>
    4a86:	66 20       	and	r6, r6
    4a88:	29 f0       	breq	.+10     	; 0x4a94 <vfprintf+0x2d8>
    4a8a:	b7 01       	movw	r22, r14
    4a8c:	86 2d       	mov	r24, r6
    4a8e:	90 e0       	ldi	r25, 0x00	; 0
    4a90:	0e 94 84 28 	call	0x5108	; 0x5108 <fputc>
    4a94:	73 fc       	sbrc	r7, 3
    4a96:	09 c0       	rjmp	.+18     	; 0x4aaa <vfprintf+0x2ee>
    4a98:	55 20       	and	r5, r5
    4a9a:	39 f0       	breq	.+14     	; 0x4aaa <vfprintf+0x2ee>
    4a9c:	b7 01       	movw	r22, r14
    4a9e:	80 e3       	ldi	r24, 0x30	; 48
    4aa0:	90 e0       	ldi	r25, 0x00	; 0
    4aa2:	0e 94 84 28 	call	0x5108	; 0x5108 <fputc>
    4aa6:	5a 94       	dec	r5
    4aa8:	f7 cf       	rjmp	.-18     	; 0x4a98 <vfprintf+0x2dc>
    4aaa:	77 fe       	sbrs	r7, 7
    4aac:	5f c0       	rjmp	.+190    	; 0x4b6c <vfprintf+0x3b0>
    4aae:	9c 2d       	mov	r25, r12
    4ab0:	8d 2d       	mov	r24, r13
    4ab2:	d7 fe       	sbrs	r13, 7
    4ab4:	02 c0       	rjmp	.+4      	; 0x4aba <vfprintf+0x2fe>
    4ab6:	90 e0       	ldi	r25, 0x00	; 0
    4ab8:	80 e0       	ldi	r24, 0x00	; 0
    4aba:	69 2e       	mov	r6, r25
    4abc:	78 2e       	mov	r7, r24
    4abe:	40 e0       	ldi	r20, 0x00	; 0
    4ac0:	50 e0       	ldi	r21, 0x00	; 0
    4ac2:	c6 01       	movw	r24, r12
    4ac4:	84 19       	sub	r24, r4
    4ac6:	91 09       	sbc	r25, r1
    4ac8:	9d 87       	std	Y+13, r25	; 0x0d
    4aca:	8c 87       	std	Y+12, r24	; 0x0c
    4acc:	96 01       	movw	r18, r12
    4ace:	26 19       	sub	r18, r6
    4ad0:	37 09       	sbc	r19, r7
    4ad2:	28 0d       	add	r18, r8
    4ad4:	39 1d       	adc	r19, r9
    4ad6:	81 2f       	mov	r24, r17
    4ad8:	90 e0       	ldi	r25, 0x00	; 0
    4ada:	ee 27       	eor	r30, r30
    4adc:	ff 27       	eor	r31, r31
    4ade:	e8 1b       	sub	r30, r24
    4ae0:	f9 0b       	sbc	r31, r25
    4ae2:	ff 87       	std	Y+15, r31	; 0x0f
    4ae4:	ee 87       	std	Y+14, r30	; 0x0e
    4ae6:	ff ef       	ldi	r31, 0xFF	; 255
    4ae8:	6f 16       	cp	r6, r31
    4aea:	7f 06       	cpc	r7, r31
    4aec:	69 f4       	brne	.+26     	; 0x4b08 <vfprintf+0x34c>
    4aee:	b7 01       	movw	r22, r14
    4af0:	8e e2       	ldi	r24, 0x2E	; 46
    4af2:	90 e0       	ldi	r25, 0x00	; 0
    4af4:	2b 8b       	std	Y+19, r18	; 0x13
    4af6:	3a 8b       	std	Y+18, r19	; 0x12
    4af8:	48 8b       	std	Y+16, r20	; 0x10
    4afa:	59 8b       	std	Y+17, r21	; 0x11
    4afc:	0e 94 84 28 	call	0x5108	; 0x5108 <fputc>
    4b00:	59 89       	ldd	r21, Y+17	; 0x11
    4b02:	48 89       	ldd	r20, Y+16	; 0x10
    4b04:	3a 89       	ldd	r19, Y+18	; 0x12
    4b06:	2b 89       	ldd	r18, Y+19	; 0x13
    4b08:	c6 14       	cp	r12, r6
    4b0a:	d7 04       	cpc	r13, r7
    4b0c:	54 f0       	brlt	.+20     	; 0x4b22 <vfprintf+0x366>
    4b0e:	6c 85       	ldd	r22, Y+12	; 0x0c
    4b10:	7d 85       	ldd	r23, Y+13	; 0x0d
    4b12:	66 15       	cp	r22, r6
    4b14:	77 05       	cpc	r23, r7
    4b16:	2c f4       	brge	.+10     	; 0x4b22 <vfprintf+0x366>
    4b18:	f9 01       	movw	r30, r18
    4b1a:	e4 0f       	add	r30, r20
    4b1c:	f5 1f       	adc	r31, r21
    4b1e:	81 81       	ldd	r24, Z+1	; 0x01
    4b20:	01 c0       	rjmp	.+2      	; 0x4b24 <vfprintf+0x368>
    4b22:	80 e3       	ldi	r24, 0x30	; 48
    4b24:	71 e0       	ldi	r23, 0x01	; 1
    4b26:	67 1a       	sub	r6, r23
    4b28:	71 08       	sbc	r7, r1
    4b2a:	4f 5f       	subi	r20, 0xFF	; 255
    4b2c:	5f 4f       	sbci	r21, 0xFF	; 255
    4b2e:	ee 85       	ldd	r30, Y+14	; 0x0e
    4b30:	ff 85       	ldd	r31, Y+15	; 0x0f
    4b32:	6e 16       	cp	r6, r30
    4b34:	7f 06       	cpc	r7, r31
    4b36:	6c f0       	brlt	.+26     	; 0x4b52 <vfprintf+0x396>
    4b38:	b7 01       	movw	r22, r14
    4b3a:	90 e0       	ldi	r25, 0x00	; 0
    4b3c:	2b 8b       	std	Y+19, r18	; 0x13
    4b3e:	3a 8b       	std	Y+18, r19	; 0x12
    4b40:	48 8b       	std	Y+16, r20	; 0x10
    4b42:	59 8b       	std	Y+17, r21	; 0x11
    4b44:	0e 94 84 28 	call	0x5108	; 0x5108 <fputc>
    4b48:	2b 89       	ldd	r18, Y+19	; 0x13
    4b4a:	3a 89       	ldd	r19, Y+18	; 0x12
    4b4c:	48 89       	ldd	r20, Y+16	; 0x10
    4b4e:	59 89       	ldd	r21, Y+17	; 0x11
    4b50:	ca cf       	rjmp	.-108    	; 0x4ae6 <vfprintf+0x32a>
    4b52:	6c 14       	cp	r6, r12
    4b54:	7d 04       	cpc	r7, r13
    4b56:	39 f4       	brne	.+14     	; 0x4b66 <vfprintf+0x3aa>
    4b58:	9a 81       	ldd	r25, Y+2	; 0x02
    4b5a:	96 33       	cpi	r25, 0x36	; 54
    4b5c:	18 f4       	brcc	.+6      	; 0x4b64 <vfprintf+0x3a8>
    4b5e:	95 33       	cpi	r25, 0x35	; 53
    4b60:	11 f4       	brne	.+4      	; 0x4b66 <vfprintf+0x3aa>
    4b62:	04 ff       	sbrs	r16, 4
    4b64:	81 e3       	ldi	r24, 0x31	; 49
    4b66:	b7 01       	movw	r22, r14
    4b68:	90 e0       	ldi	r25, 0x00	; 0
    4b6a:	4b c0       	rjmp	.+150    	; 0x4c02 <vfprintf+0x446>
    4b6c:	8a 81       	ldd	r24, Y+2	; 0x02
    4b6e:	81 33       	cpi	r24, 0x31	; 49
    4b70:	09 f0       	breq	.+2      	; 0x4b74 <vfprintf+0x3b8>
    4b72:	0f 7e       	andi	r16, 0xEF	; 239
    4b74:	b7 01       	movw	r22, r14
    4b76:	90 e0       	ldi	r25, 0x00	; 0
    4b78:	0e 94 84 28 	call	0x5108	; 0x5108 <fputc>
    4b7c:	11 11       	cpse	r17, r1
    4b7e:	05 c0       	rjmp	.+10     	; 0x4b8a <vfprintf+0x3ce>
    4b80:	74 fe       	sbrs	r7, 4
    4b82:	18 c0       	rjmp	.+48     	; 0x4bb4 <vfprintf+0x3f8>
    4b84:	85 e4       	ldi	r24, 0x45	; 69
    4b86:	90 e0       	ldi	r25, 0x00	; 0
    4b88:	17 c0       	rjmp	.+46     	; 0x4bb8 <vfprintf+0x3fc>
    4b8a:	b7 01       	movw	r22, r14
    4b8c:	8e e2       	ldi	r24, 0x2E	; 46
    4b8e:	90 e0       	ldi	r25, 0x00	; 0
    4b90:	0e 94 84 28 	call	0x5108	; 0x5108 <fputc>
    4b94:	82 e0       	ldi	r24, 0x02	; 2
    4b96:	66 24       	eor	r6, r6
    4b98:	63 94       	inc	r6
    4b9a:	68 0e       	add	r6, r24
    4b9c:	f4 01       	movw	r30, r8
    4b9e:	e8 0f       	add	r30, r24
    4ba0:	f1 1d       	adc	r31, r1
    4ba2:	80 81       	ld	r24, Z
    4ba4:	b7 01       	movw	r22, r14
    4ba6:	90 e0       	ldi	r25, 0x00	; 0
    4ba8:	0e 94 84 28 	call	0x5108	; 0x5108 <fputc>
    4bac:	11 50       	subi	r17, 0x01	; 1
    4bae:	41 f3       	breq	.-48     	; 0x4b80 <vfprintf+0x3c4>
    4bb0:	86 2d       	mov	r24, r6
    4bb2:	f1 cf       	rjmp	.-30     	; 0x4b96 <vfprintf+0x3da>
    4bb4:	85 e6       	ldi	r24, 0x65	; 101
    4bb6:	90 e0       	ldi	r25, 0x00	; 0
    4bb8:	b7 01       	movw	r22, r14
    4bba:	0e 94 84 28 	call	0x5108	; 0x5108 <fputc>
    4bbe:	d7 fc       	sbrc	r13, 7
    4bc0:	05 c0       	rjmp	.+10     	; 0x4bcc <vfprintf+0x410>
    4bc2:	c1 14       	cp	r12, r1
    4bc4:	d1 04       	cpc	r13, r1
    4bc6:	39 f4       	brne	.+14     	; 0x4bd6 <vfprintf+0x41a>
    4bc8:	04 ff       	sbrs	r16, 4
    4bca:	05 c0       	rjmp	.+10     	; 0x4bd6 <vfprintf+0x41a>
    4bcc:	d1 94       	neg	r13
    4bce:	c1 94       	neg	r12
    4bd0:	d1 08       	sbc	r13, r1
    4bd2:	8d e2       	ldi	r24, 0x2D	; 45
    4bd4:	01 c0       	rjmp	.+2      	; 0x4bd8 <vfprintf+0x41c>
    4bd6:	8b e2       	ldi	r24, 0x2B	; 43
    4bd8:	b7 01       	movw	r22, r14
    4bda:	90 e0       	ldi	r25, 0x00	; 0
    4bdc:	0e 94 84 28 	call	0x5108	; 0x5108 <fputc>
    4be0:	80 e3       	ldi	r24, 0x30	; 48
    4be2:	6a e0       	ldi	r22, 0x0A	; 10
    4be4:	c6 16       	cp	r12, r22
    4be6:	d1 04       	cpc	r13, r1
    4be8:	2c f0       	brlt	.+10     	; 0x4bf4 <vfprintf+0x438>
    4bea:	8f 5f       	subi	r24, 0xFF	; 255
    4bec:	fa e0       	ldi	r31, 0x0A	; 10
    4bee:	cf 1a       	sub	r12, r31
    4bf0:	d1 08       	sbc	r13, r1
    4bf2:	f7 cf       	rjmp	.-18     	; 0x4be2 <vfprintf+0x426>
    4bf4:	b7 01       	movw	r22, r14
    4bf6:	90 e0       	ldi	r25, 0x00	; 0
    4bf8:	0e 94 84 28 	call	0x5108	; 0x5108 <fputc>
    4bfc:	b7 01       	movw	r22, r14
    4bfe:	c6 01       	movw	r24, r12
    4c00:	c0 96       	adiw	r24, 0x30	; 48
    4c02:	0e 94 84 28 	call	0x5108	; 0x5108 <fputc>
    4c06:	41 c1       	rjmp	.+642    	; 0x4e8a <vfprintf+0x6ce>
    4c08:	83 36       	cpi	r24, 0x63	; 99
    4c0a:	31 f0       	breq	.+12     	; 0x4c18 <vfprintf+0x45c>
    4c0c:	83 37       	cpi	r24, 0x73	; 115
    4c0e:	79 f0       	breq	.+30     	; 0x4c2e <vfprintf+0x472>
    4c10:	83 35       	cpi	r24, 0x53	; 83
    4c12:	09 f0       	breq	.+2      	; 0x4c16 <vfprintf+0x45a>
    4c14:	58 c0       	rjmp	.+176    	; 0x4cc6 <vfprintf+0x50a>
    4c16:	21 c0       	rjmp	.+66     	; 0x4c5a <vfprintf+0x49e>
    4c18:	56 01       	movw	r10, r12
    4c1a:	72 e0       	ldi	r23, 0x02	; 2
    4c1c:	a7 0e       	add	r10, r23
    4c1e:	b1 1c       	adc	r11, r1
    4c20:	f6 01       	movw	r30, r12
    4c22:	80 81       	ld	r24, Z
    4c24:	89 83       	std	Y+1, r24	; 0x01
    4c26:	01 e0       	ldi	r16, 0x01	; 1
    4c28:	10 e0       	ldi	r17, 0x00	; 0
    4c2a:	64 01       	movw	r12, r8
    4c2c:	14 c0       	rjmp	.+40     	; 0x4c56 <vfprintf+0x49a>
    4c2e:	56 01       	movw	r10, r12
    4c30:	f2 e0       	ldi	r31, 0x02	; 2
    4c32:	af 0e       	add	r10, r31
    4c34:	b1 1c       	adc	r11, r1
    4c36:	f6 01       	movw	r30, r12
    4c38:	c0 80       	ld	r12, Z
    4c3a:	d1 80       	ldd	r13, Z+1	; 0x01
    4c3c:	26 ff       	sbrs	r18, 6
    4c3e:	03 c0       	rjmp	.+6      	; 0x4c46 <vfprintf+0x48a>
    4c40:	61 2f       	mov	r22, r17
    4c42:	70 e0       	ldi	r23, 0x00	; 0
    4c44:	02 c0       	rjmp	.+4      	; 0x4c4a <vfprintf+0x48e>
    4c46:	6f ef       	ldi	r22, 0xFF	; 255
    4c48:	7f ef       	ldi	r23, 0xFF	; 255
    4c4a:	c6 01       	movw	r24, r12
    4c4c:	2b 8b       	std	Y+19, r18	; 0x13
    4c4e:	0e 94 79 28 	call	0x50f2	; 0x50f2 <strnlen>
    4c52:	8c 01       	movw	r16, r24
    4c54:	2b 89       	ldd	r18, Y+19	; 0x13
    4c56:	2f 77       	andi	r18, 0x7F	; 127
    4c58:	15 c0       	rjmp	.+42     	; 0x4c84 <vfprintf+0x4c8>
    4c5a:	56 01       	movw	r10, r12
    4c5c:	f2 e0       	ldi	r31, 0x02	; 2
    4c5e:	af 0e       	add	r10, r31
    4c60:	b1 1c       	adc	r11, r1
    4c62:	f6 01       	movw	r30, r12
    4c64:	c0 80       	ld	r12, Z
    4c66:	d1 80       	ldd	r13, Z+1	; 0x01
    4c68:	26 ff       	sbrs	r18, 6
    4c6a:	03 c0       	rjmp	.+6      	; 0x4c72 <vfprintf+0x4b6>
    4c6c:	61 2f       	mov	r22, r17
    4c6e:	70 e0       	ldi	r23, 0x00	; 0
    4c70:	02 c0       	rjmp	.+4      	; 0x4c76 <vfprintf+0x4ba>
    4c72:	6f ef       	ldi	r22, 0xFF	; 255
    4c74:	7f ef       	ldi	r23, 0xFF	; 255
    4c76:	c6 01       	movw	r24, r12
    4c78:	2b 8b       	std	Y+19, r18	; 0x13
    4c7a:	0e 94 6e 28 	call	0x50dc	; 0x50dc <strnlen_P>
    4c7e:	8c 01       	movw	r16, r24
    4c80:	2b 89       	ldd	r18, Y+19	; 0x13
    4c82:	20 68       	ori	r18, 0x80	; 128
    4c84:	72 2e       	mov	r7, r18
    4c86:	23 fd       	sbrc	r18, 3
    4c88:	1a c0       	rjmp	.+52     	; 0x4cbe <vfprintf+0x502>
    4c8a:	85 2d       	mov	r24, r5
    4c8c:	90 e0       	ldi	r25, 0x00	; 0
    4c8e:	08 17       	cp	r16, r24
    4c90:	19 07       	cpc	r17, r25
    4c92:	a8 f4       	brcc	.+42     	; 0x4cbe <vfprintf+0x502>
    4c94:	b7 01       	movw	r22, r14
    4c96:	80 e2       	ldi	r24, 0x20	; 32
    4c98:	90 e0       	ldi	r25, 0x00	; 0
    4c9a:	0e 94 84 28 	call	0x5108	; 0x5108 <fputc>
    4c9e:	5a 94       	dec	r5
    4ca0:	f4 cf       	rjmp	.-24     	; 0x4c8a <vfprintf+0x4ce>
    4ca2:	f6 01       	movw	r30, r12
    4ca4:	77 fc       	sbrc	r7, 7
    4ca6:	85 91       	lpm	r24, Z+
    4ca8:	77 fe       	sbrs	r7, 7
    4caa:	81 91       	ld	r24, Z+
    4cac:	6f 01       	movw	r12, r30
    4cae:	b7 01       	movw	r22, r14
    4cb0:	90 e0       	ldi	r25, 0x00	; 0
    4cb2:	0e 94 84 28 	call	0x5108	; 0x5108 <fputc>
    4cb6:	51 10       	cpse	r5, r1
    4cb8:	5a 94       	dec	r5
    4cba:	01 50       	subi	r16, 0x01	; 1
    4cbc:	11 09       	sbc	r17, r1
    4cbe:	01 15       	cp	r16, r1
    4cc0:	11 05       	cpc	r17, r1
    4cc2:	79 f7       	brne	.-34     	; 0x4ca2 <vfprintf+0x4e6>
    4cc4:	e2 c0       	rjmp	.+452    	; 0x4e8a <vfprintf+0x6ce>
    4cc6:	84 36       	cpi	r24, 0x64	; 100
    4cc8:	11 f0       	breq	.+4      	; 0x4cce <vfprintf+0x512>
    4cca:	89 36       	cpi	r24, 0x69	; 105
    4ccc:	51 f5       	brne	.+84     	; 0x4d22 <vfprintf+0x566>
    4cce:	56 01       	movw	r10, r12
    4cd0:	27 ff       	sbrs	r18, 7
    4cd2:	09 c0       	rjmp	.+18     	; 0x4ce6 <vfprintf+0x52a>
    4cd4:	f4 e0       	ldi	r31, 0x04	; 4
    4cd6:	af 0e       	add	r10, r31
    4cd8:	b1 1c       	adc	r11, r1
    4cda:	f6 01       	movw	r30, r12
    4cdc:	60 81       	ld	r22, Z
    4cde:	71 81       	ldd	r23, Z+1	; 0x01
    4ce0:	82 81       	ldd	r24, Z+2	; 0x02
    4ce2:	93 81       	ldd	r25, Z+3	; 0x03
    4ce4:	0a c0       	rjmp	.+20     	; 0x4cfa <vfprintf+0x53e>
    4ce6:	f2 e0       	ldi	r31, 0x02	; 2
    4ce8:	af 0e       	add	r10, r31
    4cea:	b1 1c       	adc	r11, r1
    4cec:	f6 01       	movw	r30, r12
    4cee:	60 81       	ld	r22, Z
    4cf0:	71 81       	ldd	r23, Z+1	; 0x01
    4cf2:	88 27       	eor	r24, r24
    4cf4:	77 fd       	sbrc	r23, 7
    4cf6:	80 95       	com	r24
    4cf8:	98 2f       	mov	r25, r24
    4cfa:	02 2f       	mov	r16, r18
    4cfc:	0f 76       	andi	r16, 0x6F	; 111
    4cfe:	97 ff       	sbrs	r25, 7
    4d00:	08 c0       	rjmp	.+16     	; 0x4d12 <vfprintf+0x556>
    4d02:	90 95       	com	r25
    4d04:	80 95       	com	r24
    4d06:	70 95       	com	r23
    4d08:	61 95       	neg	r22
    4d0a:	7f 4f       	sbci	r23, 0xFF	; 255
    4d0c:	8f 4f       	sbci	r24, 0xFF	; 255
    4d0e:	9f 4f       	sbci	r25, 0xFF	; 255
    4d10:	00 68       	ori	r16, 0x80	; 128
    4d12:	2a e0       	ldi	r18, 0x0A	; 10
    4d14:	30 e0       	ldi	r19, 0x00	; 0
    4d16:	a4 01       	movw	r20, r8
    4d18:	0e 94 d8 28 	call	0x51b0	; 0x51b0 <__ultoa_invert>
    4d1c:	c8 2e       	mov	r12, r24
    4d1e:	c8 18       	sub	r12, r8
    4d20:	3e c0       	rjmp	.+124    	; 0x4d9e <vfprintf+0x5e2>
    4d22:	02 2f       	mov	r16, r18
    4d24:	85 37       	cpi	r24, 0x75	; 117
    4d26:	21 f4       	brne	.+8      	; 0x4d30 <vfprintf+0x574>
    4d28:	0f 7e       	andi	r16, 0xEF	; 239
    4d2a:	2a e0       	ldi	r18, 0x0A	; 10
    4d2c:	30 e0       	ldi	r19, 0x00	; 0
    4d2e:	1d c0       	rjmp	.+58     	; 0x4d6a <vfprintf+0x5ae>
    4d30:	09 7f       	andi	r16, 0xF9	; 249
    4d32:	8f 36       	cpi	r24, 0x6F	; 111
    4d34:	91 f0       	breq	.+36     	; 0x4d5a <vfprintf+0x59e>
    4d36:	18 f4       	brcc	.+6      	; 0x4d3e <vfprintf+0x582>
    4d38:	88 35       	cpi	r24, 0x58	; 88
    4d3a:	59 f0       	breq	.+22     	; 0x4d52 <vfprintf+0x596>
    4d3c:	b0 c0       	rjmp	.+352    	; 0x4e9e <vfprintf+0x6e2>
    4d3e:	80 37       	cpi	r24, 0x70	; 112
    4d40:	19 f0       	breq	.+6      	; 0x4d48 <vfprintf+0x58c>
    4d42:	88 37       	cpi	r24, 0x78	; 120
    4d44:	11 f0       	breq	.+4      	; 0x4d4a <vfprintf+0x58e>
    4d46:	ab c0       	rjmp	.+342    	; 0x4e9e <vfprintf+0x6e2>
    4d48:	00 61       	ori	r16, 0x10	; 16
    4d4a:	04 ff       	sbrs	r16, 4
    4d4c:	09 c0       	rjmp	.+18     	; 0x4d60 <vfprintf+0x5a4>
    4d4e:	04 60       	ori	r16, 0x04	; 4
    4d50:	07 c0       	rjmp	.+14     	; 0x4d60 <vfprintf+0x5a4>
    4d52:	24 ff       	sbrs	r18, 4
    4d54:	08 c0       	rjmp	.+16     	; 0x4d66 <vfprintf+0x5aa>
    4d56:	06 60       	ori	r16, 0x06	; 6
    4d58:	06 c0       	rjmp	.+12     	; 0x4d66 <vfprintf+0x5aa>
    4d5a:	28 e0       	ldi	r18, 0x08	; 8
    4d5c:	30 e0       	ldi	r19, 0x00	; 0
    4d5e:	05 c0       	rjmp	.+10     	; 0x4d6a <vfprintf+0x5ae>
    4d60:	20 e1       	ldi	r18, 0x10	; 16
    4d62:	30 e0       	ldi	r19, 0x00	; 0
    4d64:	02 c0       	rjmp	.+4      	; 0x4d6a <vfprintf+0x5ae>
    4d66:	20 e1       	ldi	r18, 0x10	; 16
    4d68:	32 e0       	ldi	r19, 0x02	; 2
    4d6a:	56 01       	movw	r10, r12
    4d6c:	07 ff       	sbrs	r16, 7
    4d6e:	09 c0       	rjmp	.+18     	; 0x4d82 <vfprintf+0x5c6>
    4d70:	f4 e0       	ldi	r31, 0x04	; 4
    4d72:	af 0e       	add	r10, r31
    4d74:	b1 1c       	adc	r11, r1
    4d76:	f6 01       	movw	r30, r12
    4d78:	60 81       	ld	r22, Z
    4d7a:	71 81       	ldd	r23, Z+1	; 0x01
    4d7c:	82 81       	ldd	r24, Z+2	; 0x02
    4d7e:	93 81       	ldd	r25, Z+3	; 0x03
    4d80:	08 c0       	rjmp	.+16     	; 0x4d92 <vfprintf+0x5d6>
    4d82:	f2 e0       	ldi	r31, 0x02	; 2
    4d84:	af 0e       	add	r10, r31
    4d86:	b1 1c       	adc	r11, r1
    4d88:	f6 01       	movw	r30, r12
    4d8a:	60 81       	ld	r22, Z
    4d8c:	71 81       	ldd	r23, Z+1	; 0x01
    4d8e:	80 e0       	ldi	r24, 0x00	; 0
    4d90:	90 e0       	ldi	r25, 0x00	; 0
    4d92:	a4 01       	movw	r20, r8
    4d94:	0e 94 d8 28 	call	0x51b0	; 0x51b0 <__ultoa_invert>
    4d98:	c8 2e       	mov	r12, r24
    4d9a:	c8 18       	sub	r12, r8
    4d9c:	0f 77       	andi	r16, 0x7F	; 127
    4d9e:	06 ff       	sbrs	r16, 6
    4da0:	0b c0       	rjmp	.+22     	; 0x4db8 <vfprintf+0x5fc>
    4da2:	20 2f       	mov	r18, r16
    4da4:	2e 7f       	andi	r18, 0xFE	; 254
    4da6:	c1 16       	cp	r12, r17
    4da8:	50 f4       	brcc	.+20     	; 0x4dbe <vfprintf+0x602>
    4daa:	04 ff       	sbrs	r16, 4
    4dac:	0a c0       	rjmp	.+20     	; 0x4dc2 <vfprintf+0x606>
    4dae:	02 fd       	sbrc	r16, 2
    4db0:	08 c0       	rjmp	.+16     	; 0x4dc2 <vfprintf+0x606>
    4db2:	20 2f       	mov	r18, r16
    4db4:	2e 7e       	andi	r18, 0xEE	; 238
    4db6:	05 c0       	rjmp	.+10     	; 0x4dc2 <vfprintf+0x606>
    4db8:	dc 2c       	mov	r13, r12
    4dba:	20 2f       	mov	r18, r16
    4dbc:	03 c0       	rjmp	.+6      	; 0x4dc4 <vfprintf+0x608>
    4dbe:	dc 2c       	mov	r13, r12
    4dc0:	01 c0       	rjmp	.+2      	; 0x4dc4 <vfprintf+0x608>
    4dc2:	d1 2e       	mov	r13, r17
    4dc4:	24 ff       	sbrs	r18, 4
    4dc6:	0d c0       	rjmp	.+26     	; 0x4de2 <vfprintf+0x626>
    4dc8:	fe 01       	movw	r30, r28
    4dca:	ec 0d       	add	r30, r12
    4dcc:	f1 1d       	adc	r31, r1
    4dce:	80 81       	ld	r24, Z
    4dd0:	80 33       	cpi	r24, 0x30	; 48
    4dd2:	11 f4       	brne	.+4      	; 0x4dd8 <vfprintf+0x61c>
    4dd4:	29 7e       	andi	r18, 0xE9	; 233
    4dd6:	09 c0       	rjmp	.+18     	; 0x4dea <vfprintf+0x62e>
    4dd8:	22 ff       	sbrs	r18, 2
    4dda:	06 c0       	rjmp	.+12     	; 0x4de8 <vfprintf+0x62c>
    4ddc:	d3 94       	inc	r13
    4dde:	d3 94       	inc	r13
    4de0:	04 c0       	rjmp	.+8      	; 0x4dea <vfprintf+0x62e>
    4de2:	82 2f       	mov	r24, r18
    4de4:	86 78       	andi	r24, 0x86	; 134
    4de6:	09 f0       	breq	.+2      	; 0x4dea <vfprintf+0x62e>
    4de8:	d3 94       	inc	r13
    4dea:	23 fd       	sbrc	r18, 3
    4dec:	13 c0       	rjmp	.+38     	; 0x4e14 <vfprintf+0x658>
    4dee:	20 ff       	sbrs	r18, 0
    4df0:	06 c0       	rjmp	.+12     	; 0x4dfe <vfprintf+0x642>
    4df2:	1c 2d       	mov	r17, r12
    4df4:	d5 14       	cp	r13, r5
    4df6:	18 f4       	brcc	.+6      	; 0x4dfe <vfprintf+0x642>
    4df8:	15 0d       	add	r17, r5
    4dfa:	1d 19       	sub	r17, r13
    4dfc:	d5 2c       	mov	r13, r5
    4dfe:	d5 14       	cp	r13, r5
    4e00:	68 f4       	brcc	.+26     	; 0x4e1c <vfprintf+0x660>
    4e02:	b7 01       	movw	r22, r14
    4e04:	80 e2       	ldi	r24, 0x20	; 32
    4e06:	90 e0       	ldi	r25, 0x00	; 0
    4e08:	2b 8b       	std	Y+19, r18	; 0x13
    4e0a:	0e 94 84 28 	call	0x5108	; 0x5108 <fputc>
    4e0e:	d3 94       	inc	r13
    4e10:	2b 89       	ldd	r18, Y+19	; 0x13
    4e12:	f5 cf       	rjmp	.-22     	; 0x4dfe <vfprintf+0x642>
    4e14:	d5 14       	cp	r13, r5
    4e16:	10 f4       	brcc	.+4      	; 0x4e1c <vfprintf+0x660>
    4e18:	5d 18       	sub	r5, r13
    4e1a:	01 c0       	rjmp	.+2      	; 0x4e1e <vfprintf+0x662>
    4e1c:	51 2c       	mov	r5, r1
    4e1e:	24 ff       	sbrs	r18, 4
    4e20:	12 c0       	rjmp	.+36     	; 0x4e46 <vfprintf+0x68a>
    4e22:	b7 01       	movw	r22, r14
    4e24:	80 e3       	ldi	r24, 0x30	; 48
    4e26:	90 e0       	ldi	r25, 0x00	; 0
    4e28:	2b 8b       	std	Y+19, r18	; 0x13
    4e2a:	0e 94 84 28 	call	0x5108	; 0x5108 <fputc>
    4e2e:	2b 89       	ldd	r18, Y+19	; 0x13
    4e30:	22 ff       	sbrs	r18, 2
    4e32:	17 c0       	rjmp	.+46     	; 0x4e62 <vfprintf+0x6a6>
    4e34:	21 ff       	sbrs	r18, 1
    4e36:	03 c0       	rjmp	.+6      	; 0x4e3e <vfprintf+0x682>
    4e38:	88 e5       	ldi	r24, 0x58	; 88
    4e3a:	90 e0       	ldi	r25, 0x00	; 0
    4e3c:	02 c0       	rjmp	.+4      	; 0x4e42 <vfprintf+0x686>
    4e3e:	88 e7       	ldi	r24, 0x78	; 120
    4e40:	90 e0       	ldi	r25, 0x00	; 0
    4e42:	b7 01       	movw	r22, r14
    4e44:	0c c0       	rjmp	.+24     	; 0x4e5e <vfprintf+0x6a2>
    4e46:	82 2f       	mov	r24, r18
    4e48:	86 78       	andi	r24, 0x86	; 134
    4e4a:	59 f0       	breq	.+22     	; 0x4e62 <vfprintf+0x6a6>
    4e4c:	21 fd       	sbrc	r18, 1
    4e4e:	02 c0       	rjmp	.+4      	; 0x4e54 <vfprintf+0x698>
    4e50:	80 e2       	ldi	r24, 0x20	; 32
    4e52:	01 c0       	rjmp	.+2      	; 0x4e56 <vfprintf+0x69a>
    4e54:	8b e2       	ldi	r24, 0x2B	; 43
    4e56:	27 fd       	sbrc	r18, 7
    4e58:	8d e2       	ldi	r24, 0x2D	; 45
    4e5a:	b7 01       	movw	r22, r14
    4e5c:	90 e0       	ldi	r25, 0x00	; 0
    4e5e:	0e 94 84 28 	call	0x5108	; 0x5108 <fputc>
    4e62:	c1 16       	cp	r12, r17
    4e64:	38 f4       	brcc	.+14     	; 0x4e74 <vfprintf+0x6b8>
    4e66:	b7 01       	movw	r22, r14
    4e68:	80 e3       	ldi	r24, 0x30	; 48
    4e6a:	90 e0       	ldi	r25, 0x00	; 0
    4e6c:	0e 94 84 28 	call	0x5108	; 0x5108 <fputc>
    4e70:	11 50       	subi	r17, 0x01	; 1
    4e72:	f7 cf       	rjmp	.-18     	; 0x4e62 <vfprintf+0x6a6>
    4e74:	ca 94       	dec	r12
    4e76:	f4 01       	movw	r30, r8
    4e78:	ec 0d       	add	r30, r12
    4e7a:	f1 1d       	adc	r31, r1
    4e7c:	80 81       	ld	r24, Z
    4e7e:	b7 01       	movw	r22, r14
    4e80:	90 e0       	ldi	r25, 0x00	; 0
    4e82:	0e 94 84 28 	call	0x5108	; 0x5108 <fputc>
    4e86:	c1 10       	cpse	r12, r1
    4e88:	f5 cf       	rjmp	.-22     	; 0x4e74 <vfprintf+0x6b8>
    4e8a:	55 20       	and	r5, r5
    4e8c:	09 f4       	brne	.+2      	; 0x4e90 <vfprintf+0x6d4>
    4e8e:	c2 cc       	rjmp	.-1660   	; 0x4814 <vfprintf+0x58>
    4e90:	b7 01       	movw	r22, r14
    4e92:	80 e2       	ldi	r24, 0x20	; 32
    4e94:	90 e0       	ldi	r25, 0x00	; 0
    4e96:	0e 94 84 28 	call	0x5108	; 0x5108 <fputc>
    4e9a:	5a 94       	dec	r5
    4e9c:	f6 cf       	rjmp	.-20     	; 0x4e8a <vfprintf+0x6ce>
    4e9e:	f7 01       	movw	r30, r14
    4ea0:	86 81       	ldd	r24, Z+6	; 0x06
    4ea2:	97 81       	ldd	r25, Z+7	; 0x07
    4ea4:	02 c0       	rjmp	.+4      	; 0x4eaa <vfprintf+0x6ee>
    4ea6:	8f ef       	ldi	r24, 0xFF	; 255
    4ea8:	9f ef       	ldi	r25, 0xFF	; 255
    4eaa:	63 96       	adiw	r28, 0x13	; 19
    4eac:	e2 e1       	ldi	r30, 0x12	; 18
    4eae:	0c 94 7b 27 	jmp	0x4ef6	; 0x4ef6 <__epilogue_restores__>

00004eb2 <__tablejump2__>:
    4eb2:	ee 0f       	add	r30, r30
    4eb4:	ff 1f       	adc	r31, r31

00004eb6 <__tablejump__>:
    4eb6:	05 90       	lpm	r0, Z+
    4eb8:	f4 91       	lpm	r31, Z
    4eba:	e0 2d       	mov	r30, r0
    4ebc:	09 94       	ijmp

00004ebe <__prologue_saves__>:
    4ebe:	2f 92       	push	r2
    4ec0:	3f 92       	push	r3
    4ec2:	4f 92       	push	r4
    4ec4:	5f 92       	push	r5
    4ec6:	6f 92       	push	r6
    4ec8:	7f 92       	push	r7
    4eca:	8f 92       	push	r8
    4ecc:	9f 92       	push	r9
    4ece:	af 92       	push	r10
    4ed0:	bf 92       	push	r11
    4ed2:	cf 92       	push	r12
    4ed4:	df 92       	push	r13
    4ed6:	ef 92       	push	r14
    4ed8:	ff 92       	push	r15
    4eda:	0f 93       	push	r16
    4edc:	1f 93       	push	r17
    4ede:	cf 93       	push	r28
    4ee0:	df 93       	push	r29
    4ee2:	cd b7       	in	r28, 0x3d	; 61
    4ee4:	de b7       	in	r29, 0x3e	; 62
    4ee6:	ca 1b       	sub	r28, r26
    4ee8:	db 0b       	sbc	r29, r27
    4eea:	0f b6       	in	r0, 0x3f	; 63
    4eec:	f8 94       	cli
    4eee:	de bf       	out	0x3e, r29	; 62
    4ef0:	0f be       	out	0x3f, r0	; 63
    4ef2:	cd bf       	out	0x3d, r28	; 61
    4ef4:	09 94       	ijmp

00004ef6 <__epilogue_restores__>:
    4ef6:	2a 88       	ldd	r2, Y+18	; 0x12
    4ef8:	39 88       	ldd	r3, Y+17	; 0x11
    4efa:	48 88       	ldd	r4, Y+16	; 0x10
    4efc:	5f 84       	ldd	r5, Y+15	; 0x0f
    4efe:	6e 84       	ldd	r6, Y+14	; 0x0e
    4f00:	7d 84       	ldd	r7, Y+13	; 0x0d
    4f02:	8c 84       	ldd	r8, Y+12	; 0x0c
    4f04:	9b 84       	ldd	r9, Y+11	; 0x0b
    4f06:	aa 84       	ldd	r10, Y+10	; 0x0a
    4f08:	b9 84       	ldd	r11, Y+9	; 0x09
    4f0a:	c8 84       	ldd	r12, Y+8	; 0x08
    4f0c:	df 80       	ldd	r13, Y+7	; 0x07
    4f0e:	ee 80       	ldd	r14, Y+6	; 0x06
    4f10:	fd 80       	ldd	r15, Y+5	; 0x05
    4f12:	0c 81       	ldd	r16, Y+4	; 0x04
    4f14:	1b 81       	ldd	r17, Y+3	; 0x03
    4f16:	aa 81       	ldd	r26, Y+2	; 0x02
    4f18:	b9 81       	ldd	r27, Y+1	; 0x01
    4f1a:	ce 0f       	add	r28, r30
    4f1c:	d1 1d       	adc	r29, r1
    4f1e:	0f b6       	in	r0, 0x3f	; 63
    4f20:	f8 94       	cli
    4f22:	de bf       	out	0x3e, r29	; 62
    4f24:	0f be       	out	0x3f, r0	; 63
    4f26:	cd bf       	out	0x3d, r28	; 61
    4f28:	ed 01       	movw	r28, r26
    4f2a:	08 95       	ret

00004f2c <__ftoa_engine>:
    4f2c:	28 30       	cpi	r18, 0x08	; 8
    4f2e:	08 f0       	brcs	.+2      	; 0x4f32 <__ftoa_engine+0x6>
    4f30:	27 e0       	ldi	r18, 0x07	; 7
    4f32:	33 27       	eor	r19, r19
    4f34:	da 01       	movw	r26, r20
    4f36:	99 0f       	add	r25, r25
    4f38:	31 1d       	adc	r19, r1
    4f3a:	87 fd       	sbrc	r24, 7
    4f3c:	91 60       	ori	r25, 0x01	; 1
    4f3e:	00 96       	adiw	r24, 0x00	; 0
    4f40:	61 05       	cpc	r22, r1
    4f42:	71 05       	cpc	r23, r1
    4f44:	39 f4       	brne	.+14     	; 0x4f54 <__ftoa_engine+0x28>
    4f46:	32 60       	ori	r19, 0x02	; 2
    4f48:	2e 5f       	subi	r18, 0xFE	; 254
    4f4a:	3d 93       	st	X+, r19
    4f4c:	30 e3       	ldi	r19, 0x30	; 48
    4f4e:	2a 95       	dec	r18
    4f50:	e1 f7       	brne	.-8      	; 0x4f4a <__ftoa_engine+0x1e>
    4f52:	08 95       	ret
    4f54:	9f 3f       	cpi	r25, 0xFF	; 255
    4f56:	30 f0       	brcs	.+12     	; 0x4f64 <__ftoa_engine+0x38>
    4f58:	80 38       	cpi	r24, 0x80	; 128
    4f5a:	71 05       	cpc	r23, r1
    4f5c:	61 05       	cpc	r22, r1
    4f5e:	09 f0       	breq	.+2      	; 0x4f62 <__ftoa_engine+0x36>
    4f60:	3c 5f       	subi	r19, 0xFC	; 252
    4f62:	3c 5f       	subi	r19, 0xFC	; 252
    4f64:	3d 93       	st	X+, r19
    4f66:	91 30       	cpi	r25, 0x01	; 1
    4f68:	08 f0       	brcs	.+2      	; 0x4f6c <__ftoa_engine+0x40>
    4f6a:	80 68       	ori	r24, 0x80	; 128
    4f6c:	91 1d       	adc	r25, r1
    4f6e:	df 93       	push	r29
    4f70:	cf 93       	push	r28
    4f72:	1f 93       	push	r17
    4f74:	0f 93       	push	r16
    4f76:	ff 92       	push	r15
    4f78:	ef 92       	push	r14
    4f7a:	19 2f       	mov	r17, r25
    4f7c:	98 7f       	andi	r25, 0xF8	; 248
    4f7e:	96 95       	lsr	r25
    4f80:	e9 2f       	mov	r30, r25
    4f82:	96 95       	lsr	r25
    4f84:	96 95       	lsr	r25
    4f86:	e9 0f       	add	r30, r25
    4f88:	ff 27       	eor	r31, r31
    4f8a:	e6 52       	subi	r30, 0x26	; 38
    4f8c:	fb 4f       	sbci	r31, 0xFB	; 251
    4f8e:	99 27       	eor	r25, r25
    4f90:	33 27       	eor	r19, r19
    4f92:	ee 24       	eor	r14, r14
    4f94:	ff 24       	eor	r15, r15
    4f96:	a7 01       	movw	r20, r14
    4f98:	e7 01       	movw	r28, r14
    4f9a:	05 90       	lpm	r0, Z+
    4f9c:	08 94       	sec
    4f9e:	07 94       	ror	r0
    4fa0:	28 f4       	brcc	.+10     	; 0x4fac <__ftoa_engine+0x80>
    4fa2:	36 0f       	add	r19, r22
    4fa4:	e7 1e       	adc	r14, r23
    4fa6:	f8 1e       	adc	r15, r24
    4fa8:	49 1f       	adc	r20, r25
    4faa:	51 1d       	adc	r21, r1
    4fac:	66 0f       	add	r22, r22
    4fae:	77 1f       	adc	r23, r23
    4fb0:	88 1f       	adc	r24, r24
    4fb2:	99 1f       	adc	r25, r25
    4fb4:	06 94       	lsr	r0
    4fb6:	a1 f7       	brne	.-24     	; 0x4fa0 <__ftoa_engine+0x74>
    4fb8:	05 90       	lpm	r0, Z+
    4fba:	07 94       	ror	r0
    4fbc:	28 f4       	brcc	.+10     	; 0x4fc8 <__ftoa_engine+0x9c>
    4fbe:	e7 0e       	add	r14, r23
    4fc0:	f8 1e       	adc	r15, r24
    4fc2:	49 1f       	adc	r20, r25
    4fc4:	56 1f       	adc	r21, r22
    4fc6:	c1 1d       	adc	r28, r1
    4fc8:	77 0f       	add	r23, r23
    4fca:	88 1f       	adc	r24, r24
    4fcc:	99 1f       	adc	r25, r25
    4fce:	66 1f       	adc	r22, r22
    4fd0:	06 94       	lsr	r0
    4fd2:	a1 f7       	brne	.-24     	; 0x4fbc <__ftoa_engine+0x90>
    4fd4:	05 90       	lpm	r0, Z+
    4fd6:	07 94       	ror	r0
    4fd8:	28 f4       	brcc	.+10     	; 0x4fe4 <__ftoa_engine+0xb8>
    4fda:	f8 0e       	add	r15, r24
    4fdc:	49 1f       	adc	r20, r25
    4fde:	56 1f       	adc	r21, r22
    4fe0:	c7 1f       	adc	r28, r23
    4fe2:	d1 1d       	adc	r29, r1
    4fe4:	88 0f       	add	r24, r24
    4fe6:	99 1f       	adc	r25, r25
    4fe8:	66 1f       	adc	r22, r22
    4fea:	77 1f       	adc	r23, r23
    4fec:	06 94       	lsr	r0
    4fee:	a1 f7       	brne	.-24     	; 0x4fd8 <__ftoa_engine+0xac>
    4ff0:	05 90       	lpm	r0, Z+
    4ff2:	07 94       	ror	r0
    4ff4:	20 f4       	brcc	.+8      	; 0x4ffe <__ftoa_engine+0xd2>
    4ff6:	49 0f       	add	r20, r25
    4ff8:	56 1f       	adc	r21, r22
    4ffa:	c7 1f       	adc	r28, r23
    4ffc:	d8 1f       	adc	r29, r24
    4ffe:	99 0f       	add	r25, r25
    5000:	66 1f       	adc	r22, r22
    5002:	77 1f       	adc	r23, r23
    5004:	88 1f       	adc	r24, r24
    5006:	06 94       	lsr	r0
    5008:	a9 f7       	brne	.-22     	; 0x4ff4 <__ftoa_engine+0xc8>
    500a:	84 91       	lpm	r24, Z
    500c:	10 95       	com	r17
    500e:	17 70       	andi	r17, 0x07	; 7
    5010:	41 f0       	breq	.+16     	; 0x5022 <__ftoa_engine+0xf6>
    5012:	d6 95       	lsr	r29
    5014:	c7 95       	ror	r28
    5016:	57 95       	ror	r21
    5018:	47 95       	ror	r20
    501a:	f7 94       	ror	r15
    501c:	e7 94       	ror	r14
    501e:	1a 95       	dec	r17
    5020:	c1 f7       	brne	.-16     	; 0x5012 <__ftoa_engine+0xe6>
    5022:	e0 e8       	ldi	r30, 0x80	; 128
    5024:	f4 e0       	ldi	r31, 0x04	; 4
    5026:	68 94       	set
    5028:	15 90       	lpm	r1, Z+
    502a:	15 91       	lpm	r17, Z+
    502c:	35 91       	lpm	r19, Z+
    502e:	65 91       	lpm	r22, Z+
    5030:	95 91       	lpm	r25, Z+
    5032:	05 90       	lpm	r0, Z+
    5034:	7f e2       	ldi	r23, 0x2F	; 47
    5036:	73 95       	inc	r23
    5038:	e1 18       	sub	r14, r1
    503a:	f1 0a       	sbc	r15, r17
    503c:	43 0b       	sbc	r20, r19
    503e:	56 0b       	sbc	r21, r22
    5040:	c9 0b       	sbc	r28, r25
    5042:	d0 09       	sbc	r29, r0
    5044:	c0 f7       	brcc	.-16     	; 0x5036 <__ftoa_engine+0x10a>
    5046:	e1 0c       	add	r14, r1
    5048:	f1 1e       	adc	r15, r17
    504a:	43 1f       	adc	r20, r19
    504c:	56 1f       	adc	r21, r22
    504e:	c9 1f       	adc	r28, r25
    5050:	d0 1d       	adc	r29, r0
    5052:	7e f4       	brtc	.+30     	; 0x5072 <__ftoa_engine+0x146>
    5054:	70 33       	cpi	r23, 0x30	; 48
    5056:	11 f4       	brne	.+4      	; 0x505c <__ftoa_engine+0x130>
    5058:	8a 95       	dec	r24
    505a:	e6 cf       	rjmp	.-52     	; 0x5028 <__ftoa_engine+0xfc>
    505c:	e8 94       	clt
    505e:	01 50       	subi	r16, 0x01	; 1
    5060:	30 f0       	brcs	.+12     	; 0x506e <__ftoa_engine+0x142>
    5062:	08 0f       	add	r16, r24
    5064:	0a f4       	brpl	.+2      	; 0x5068 <__ftoa_engine+0x13c>
    5066:	00 27       	eor	r16, r16
    5068:	02 17       	cp	r16, r18
    506a:	08 f4       	brcc	.+2      	; 0x506e <__ftoa_engine+0x142>
    506c:	20 2f       	mov	r18, r16
    506e:	23 95       	inc	r18
    5070:	02 2f       	mov	r16, r18
    5072:	7a 33       	cpi	r23, 0x3A	; 58
    5074:	28 f0       	brcs	.+10     	; 0x5080 <__ftoa_engine+0x154>
    5076:	79 e3       	ldi	r23, 0x39	; 57
    5078:	7d 93       	st	X+, r23
    507a:	2a 95       	dec	r18
    507c:	e9 f7       	brne	.-6      	; 0x5078 <__ftoa_engine+0x14c>
    507e:	10 c0       	rjmp	.+32     	; 0x50a0 <__ftoa_engine+0x174>
    5080:	7d 93       	st	X+, r23
    5082:	2a 95       	dec	r18
    5084:	89 f6       	brne	.-94     	; 0x5028 <__ftoa_engine+0xfc>
    5086:	06 94       	lsr	r0
    5088:	97 95       	ror	r25
    508a:	67 95       	ror	r22
    508c:	37 95       	ror	r19
    508e:	17 95       	ror	r17
    5090:	17 94       	ror	r1
    5092:	e1 18       	sub	r14, r1
    5094:	f1 0a       	sbc	r15, r17
    5096:	43 0b       	sbc	r20, r19
    5098:	56 0b       	sbc	r21, r22
    509a:	c9 0b       	sbc	r28, r25
    509c:	d0 09       	sbc	r29, r0
    509e:	98 f0       	brcs	.+38     	; 0x50c6 <__ftoa_engine+0x19a>
    50a0:	23 95       	inc	r18
    50a2:	7e 91       	ld	r23, -X
    50a4:	73 95       	inc	r23
    50a6:	7a 33       	cpi	r23, 0x3A	; 58
    50a8:	08 f0       	brcs	.+2      	; 0x50ac <__ftoa_engine+0x180>
    50aa:	70 e3       	ldi	r23, 0x30	; 48
    50ac:	7c 93       	st	X, r23
    50ae:	20 13       	cpse	r18, r16
    50b0:	b8 f7       	brcc	.-18     	; 0x50a0 <__ftoa_engine+0x174>
    50b2:	7e 91       	ld	r23, -X
    50b4:	70 61       	ori	r23, 0x10	; 16
    50b6:	7d 93       	st	X+, r23
    50b8:	30 f0       	brcs	.+12     	; 0x50c6 <__ftoa_engine+0x19a>
    50ba:	83 95       	inc	r24
    50bc:	71 e3       	ldi	r23, 0x31	; 49
    50be:	7d 93       	st	X+, r23
    50c0:	70 e3       	ldi	r23, 0x30	; 48
    50c2:	2a 95       	dec	r18
    50c4:	e1 f7       	brne	.-8      	; 0x50be <__ftoa_engine+0x192>
    50c6:	11 24       	eor	r1, r1
    50c8:	ef 90       	pop	r14
    50ca:	ff 90       	pop	r15
    50cc:	0f 91       	pop	r16
    50ce:	1f 91       	pop	r17
    50d0:	cf 91       	pop	r28
    50d2:	df 91       	pop	r29
    50d4:	99 27       	eor	r25, r25
    50d6:	87 fd       	sbrc	r24, 7
    50d8:	90 95       	com	r25
    50da:	08 95       	ret

000050dc <strnlen_P>:
    50dc:	fc 01       	movw	r30, r24
    50de:	05 90       	lpm	r0, Z+
    50e0:	61 50       	subi	r22, 0x01	; 1
    50e2:	70 40       	sbci	r23, 0x00	; 0
    50e4:	01 10       	cpse	r0, r1
    50e6:	d8 f7       	brcc	.-10     	; 0x50de <strnlen_P+0x2>
    50e8:	80 95       	com	r24
    50ea:	90 95       	com	r25
    50ec:	8e 0f       	add	r24, r30
    50ee:	9f 1f       	adc	r25, r31
    50f0:	08 95       	ret

000050f2 <strnlen>:
    50f2:	fc 01       	movw	r30, r24
    50f4:	61 50       	subi	r22, 0x01	; 1
    50f6:	70 40       	sbci	r23, 0x00	; 0
    50f8:	01 90       	ld	r0, Z+
    50fa:	01 10       	cpse	r0, r1
    50fc:	d8 f7       	brcc	.-10     	; 0x50f4 <strnlen+0x2>
    50fe:	80 95       	com	r24
    5100:	90 95       	com	r25
    5102:	8e 0f       	add	r24, r30
    5104:	9f 1f       	adc	r25, r31
    5106:	08 95       	ret

00005108 <fputc>:
    5108:	0f 93       	push	r16
    510a:	1f 93       	push	r17
    510c:	cf 93       	push	r28
    510e:	df 93       	push	r29
    5110:	18 2f       	mov	r17, r24
    5112:	09 2f       	mov	r16, r25
    5114:	eb 01       	movw	r28, r22
    5116:	8b 81       	ldd	r24, Y+3	; 0x03
    5118:	81 fd       	sbrc	r24, 1
    511a:	03 c0       	rjmp	.+6      	; 0x5122 <fputc+0x1a>
    511c:	8f ef       	ldi	r24, 0xFF	; 255
    511e:	9f ef       	ldi	r25, 0xFF	; 255
    5120:	20 c0       	rjmp	.+64     	; 0x5162 <fputc+0x5a>
    5122:	82 ff       	sbrs	r24, 2
    5124:	10 c0       	rjmp	.+32     	; 0x5146 <fputc+0x3e>
    5126:	4e 81       	ldd	r20, Y+6	; 0x06
    5128:	5f 81       	ldd	r21, Y+7	; 0x07
    512a:	2c 81       	ldd	r18, Y+4	; 0x04
    512c:	3d 81       	ldd	r19, Y+5	; 0x05
    512e:	42 17       	cp	r20, r18
    5130:	53 07       	cpc	r21, r19
    5132:	7c f4       	brge	.+30     	; 0x5152 <fputc+0x4a>
    5134:	e8 81       	ld	r30, Y
    5136:	f9 81       	ldd	r31, Y+1	; 0x01
    5138:	9f 01       	movw	r18, r30
    513a:	2f 5f       	subi	r18, 0xFF	; 255
    513c:	3f 4f       	sbci	r19, 0xFF	; 255
    513e:	39 83       	std	Y+1, r19	; 0x01
    5140:	28 83       	st	Y, r18
    5142:	10 83       	st	Z, r17
    5144:	06 c0       	rjmp	.+12     	; 0x5152 <fputc+0x4a>
    5146:	e8 85       	ldd	r30, Y+8	; 0x08
    5148:	f9 85       	ldd	r31, Y+9	; 0x09
    514a:	81 2f       	mov	r24, r17
    514c:	09 95       	icall
    514e:	89 2b       	or	r24, r25
    5150:	29 f7       	brne	.-54     	; 0x511c <fputc+0x14>
    5152:	2e 81       	ldd	r18, Y+6	; 0x06
    5154:	3f 81       	ldd	r19, Y+7	; 0x07
    5156:	2f 5f       	subi	r18, 0xFF	; 255
    5158:	3f 4f       	sbci	r19, 0xFF	; 255
    515a:	3f 83       	std	Y+7, r19	; 0x07
    515c:	2e 83       	std	Y+6, r18	; 0x06
    515e:	81 2f       	mov	r24, r17
    5160:	90 2f       	mov	r25, r16
    5162:	df 91       	pop	r29
    5164:	cf 91       	pop	r28
    5166:	1f 91       	pop	r17
    5168:	0f 91       	pop	r16
    516a:	08 95       	ret

0000516c <sprintf>:
    516c:	ae e0       	ldi	r26, 0x0E	; 14
    516e:	b0 e0       	ldi	r27, 0x00	; 0
    5170:	ec eb       	ldi	r30, 0xBC	; 188
    5172:	f8 e2       	ldi	r31, 0x28	; 40
    5174:	0c 94 6d 27 	jmp	0x4eda	; 0x4eda <__prologue_saves__+0x1c>
    5178:	0d 89       	ldd	r16, Y+21	; 0x15
    517a:	1e 89       	ldd	r17, Y+22	; 0x16
    517c:	86 e0       	ldi	r24, 0x06	; 6
    517e:	8c 83       	std	Y+4, r24	; 0x04
    5180:	1a 83       	std	Y+2, r17	; 0x02
    5182:	09 83       	std	Y+1, r16	; 0x01
    5184:	8f ef       	ldi	r24, 0xFF	; 255
    5186:	9f e7       	ldi	r25, 0x7F	; 127
    5188:	9e 83       	std	Y+6, r25	; 0x06
    518a:	8d 83       	std	Y+5, r24	; 0x05
    518c:	ae 01       	movw	r20, r28
    518e:	47 5e       	subi	r20, 0xE7	; 231
    5190:	5f 4f       	sbci	r21, 0xFF	; 255
    5192:	6f 89       	ldd	r22, Y+23	; 0x17
    5194:	78 8d       	ldd	r23, Y+24	; 0x18
    5196:	ce 01       	movw	r24, r28
    5198:	01 96       	adiw	r24, 0x01	; 1
    519a:	0e 94 de 23 	call	0x47bc	; 0x47bc <vfprintf>
    519e:	ef 81       	ldd	r30, Y+7	; 0x07
    51a0:	f8 85       	ldd	r31, Y+8	; 0x08
    51a2:	e0 0f       	add	r30, r16
    51a4:	f1 1f       	adc	r31, r17
    51a6:	10 82       	st	Z, r1
    51a8:	2e 96       	adiw	r28, 0x0e	; 14
    51aa:	e4 e0       	ldi	r30, 0x04	; 4
    51ac:	0c 94 89 27 	jmp	0x4f12	; 0x4f12 <__epilogue_restores__+0x1c>

000051b0 <__ultoa_invert>:
    51b0:	fa 01       	movw	r30, r20
    51b2:	aa 27       	eor	r26, r26
    51b4:	28 30       	cpi	r18, 0x08	; 8
    51b6:	51 f1       	breq	.+84     	; 0x520c <__ultoa_invert+0x5c>
    51b8:	20 31       	cpi	r18, 0x10	; 16
    51ba:	81 f1       	breq	.+96     	; 0x521c <__ultoa_invert+0x6c>
    51bc:	e8 94       	clt
    51be:	6f 93       	push	r22
    51c0:	6e 7f       	andi	r22, 0xFE	; 254
    51c2:	6e 5f       	subi	r22, 0xFE	; 254
    51c4:	7f 4f       	sbci	r23, 0xFF	; 255
    51c6:	8f 4f       	sbci	r24, 0xFF	; 255
    51c8:	9f 4f       	sbci	r25, 0xFF	; 255
    51ca:	af 4f       	sbci	r26, 0xFF	; 255
    51cc:	b1 e0       	ldi	r27, 0x01	; 1
    51ce:	3e d0       	rcall	.+124    	; 0x524c <__ultoa_invert+0x9c>
    51d0:	b4 e0       	ldi	r27, 0x04	; 4
    51d2:	3c d0       	rcall	.+120    	; 0x524c <__ultoa_invert+0x9c>
    51d4:	67 0f       	add	r22, r23
    51d6:	78 1f       	adc	r23, r24
    51d8:	89 1f       	adc	r24, r25
    51da:	9a 1f       	adc	r25, r26
    51dc:	a1 1d       	adc	r26, r1
    51de:	68 0f       	add	r22, r24
    51e0:	79 1f       	adc	r23, r25
    51e2:	8a 1f       	adc	r24, r26
    51e4:	91 1d       	adc	r25, r1
    51e6:	a1 1d       	adc	r26, r1
    51e8:	6a 0f       	add	r22, r26
    51ea:	71 1d       	adc	r23, r1
    51ec:	81 1d       	adc	r24, r1
    51ee:	91 1d       	adc	r25, r1
    51f0:	a1 1d       	adc	r26, r1
    51f2:	20 d0       	rcall	.+64     	; 0x5234 <__ultoa_invert+0x84>
    51f4:	09 f4       	brne	.+2      	; 0x51f8 <__ultoa_invert+0x48>
    51f6:	68 94       	set
    51f8:	3f 91       	pop	r19
    51fa:	2a e0       	ldi	r18, 0x0A	; 10
    51fc:	26 9f       	mul	r18, r22
    51fe:	11 24       	eor	r1, r1
    5200:	30 19       	sub	r19, r0
    5202:	30 5d       	subi	r19, 0xD0	; 208
    5204:	31 93       	st	Z+, r19
    5206:	de f6       	brtc	.-74     	; 0x51be <__ultoa_invert+0xe>
    5208:	cf 01       	movw	r24, r30
    520a:	08 95       	ret
    520c:	46 2f       	mov	r20, r22
    520e:	47 70       	andi	r20, 0x07	; 7
    5210:	40 5d       	subi	r20, 0xD0	; 208
    5212:	41 93       	st	Z+, r20
    5214:	b3 e0       	ldi	r27, 0x03	; 3
    5216:	0f d0       	rcall	.+30     	; 0x5236 <__ultoa_invert+0x86>
    5218:	c9 f7       	brne	.-14     	; 0x520c <__ultoa_invert+0x5c>
    521a:	f6 cf       	rjmp	.-20     	; 0x5208 <__ultoa_invert+0x58>
    521c:	46 2f       	mov	r20, r22
    521e:	4f 70       	andi	r20, 0x0F	; 15
    5220:	40 5d       	subi	r20, 0xD0	; 208
    5222:	4a 33       	cpi	r20, 0x3A	; 58
    5224:	18 f0       	brcs	.+6      	; 0x522c <__ultoa_invert+0x7c>
    5226:	49 5d       	subi	r20, 0xD9	; 217
    5228:	31 fd       	sbrc	r19, 1
    522a:	40 52       	subi	r20, 0x20	; 32
    522c:	41 93       	st	Z+, r20
    522e:	02 d0       	rcall	.+4      	; 0x5234 <__ultoa_invert+0x84>
    5230:	a9 f7       	brne	.-22     	; 0x521c <__ultoa_invert+0x6c>
    5232:	ea cf       	rjmp	.-44     	; 0x5208 <__ultoa_invert+0x58>
    5234:	b4 e0       	ldi	r27, 0x04	; 4
    5236:	a6 95       	lsr	r26
    5238:	97 95       	ror	r25
    523a:	87 95       	ror	r24
    523c:	77 95       	ror	r23
    523e:	67 95       	ror	r22
    5240:	ba 95       	dec	r27
    5242:	c9 f7       	brne	.-14     	; 0x5236 <__ultoa_invert+0x86>
    5244:	00 97       	sbiw	r24, 0x00	; 0
    5246:	61 05       	cpc	r22, r1
    5248:	71 05       	cpc	r23, r1
    524a:	08 95       	ret
    524c:	9b 01       	movw	r18, r22
    524e:	ac 01       	movw	r20, r24
    5250:	0a 2e       	mov	r0, r26
    5252:	06 94       	lsr	r0
    5254:	57 95       	ror	r21
    5256:	47 95       	ror	r20
    5258:	37 95       	ror	r19
    525a:	27 95       	ror	r18
    525c:	ba 95       	dec	r27
    525e:	c9 f7       	brne	.-14     	; 0x5252 <__ultoa_invert+0xa2>
    5260:	62 0f       	add	r22, r18
    5262:	73 1f       	adc	r23, r19
    5264:	84 1f       	adc	r24, r20
    5266:	95 1f       	adc	r25, r21
    5268:	a0 1d       	adc	r26, r0
    526a:	08 95       	ret

0000526c <__do_global_dtors>:
    526c:	15 e0       	ldi	r17, 0x05	; 5
    526e:	cc e7       	ldi	r28, 0x7C	; 124
    5270:	d5 e0       	ldi	r29, 0x05	; 5
    5272:	04 c0       	rjmp	.+8      	; 0x527c <__do_global_dtors+0x10>
    5274:	fe 01       	movw	r30, r28
    5276:	0e 94 5b 27 	call	0x4eb6	; 0x4eb6 <__tablejump__>
    527a:	22 96       	adiw	r28, 0x02	; 2
    527c:	ce 37       	cpi	r28, 0x7E	; 126
    527e:	d1 07       	cpc	r29, r17
    5280:	c9 f7       	brne	.-14     	; 0x5274 <__do_global_dtors+0x8>
    5282:	f8 94       	cli

00005284 <__stop_program>:
    5284:	ff cf       	rjmp	.-2      	; 0x5284 <__stop_program>
