
Fahradcomputer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000019e  00800100  0000484a  000048de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000484a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000456  0080029e  0080029e  00004a7c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00004a7c  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000002e0  00000000  00000000  00004ad8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000062ec  00000000  00000000  00004db8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000010a1  00000000  00000000  0000b0a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000011a1  00000000  00000000  0000c145  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000b24  00000000  00000000  0000d2e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000de8  00000000  00000000  0000de0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00005096  00000000  00000000  0000ebf4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000002e8  00000000  00000000  00013c8a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 8b 02 	jmp	0x516	; 0x516 <__dtors_end>
       4:	0c 94 b3 02 	jmp	0x566	; 0x566 <__bad_interrupt>
       8:	0c 94 b3 02 	jmp	0x566	; 0x566 <__bad_interrupt>
       c:	0c 94 b3 02 	jmp	0x566	; 0x566 <__bad_interrupt>
      10:	0c 94 b3 02 	jmp	0x566	; 0x566 <__bad_interrupt>
      14:	0c 94 b3 02 	jmp	0x566	; 0x566 <__bad_interrupt>
      18:	0c 94 b3 02 	jmp	0x566	; 0x566 <__bad_interrupt>
      1c:	0c 94 b3 02 	jmp	0x566	; 0x566 <__bad_interrupt>
      20:	0c 94 b3 02 	jmp	0x566	; 0x566 <__bad_interrupt>
      24:	0c 94 c0 13 	jmp	0x2780	; 0x2780 <__vector_9>
      28:	0c 94 b3 02 	jmp	0x566	; 0x566 <__bad_interrupt>
      2c:	0c 94 b3 02 	jmp	0x566	; 0x566 <__bad_interrupt>
      30:	0c 94 b3 02 	jmp	0x566	; 0x566 <__bad_interrupt>
      34:	0c 94 b3 02 	jmp	0x566	; 0x566 <__bad_interrupt>
      38:	0c 94 b3 02 	jmp	0x566	; 0x566 <__bad_interrupt>
      3c:	0c 94 b3 02 	jmp	0x566	; 0x566 <__bad_interrupt>
      40:	0c 94 b3 02 	jmp	0x566	; 0x566 <__bad_interrupt>
      44:	0c 94 b3 02 	jmp	0x566	; 0x566 <__bad_interrupt>
      48:	0c 94 b3 02 	jmp	0x566	; 0x566 <__bad_interrupt>
      4c:	0c 94 b3 02 	jmp	0x566	; 0x566 <__bad_interrupt>
      50:	0c 94 b3 02 	jmp	0x566	; 0x566 <__bad_interrupt>
      54:	0c 94 b3 02 	jmp	0x566	; 0x566 <__bad_interrupt>
      58:	0c 94 b3 02 	jmp	0x566	; 0x566 <__bad_interrupt>
      5c:	0c 94 b3 02 	jmp	0x566	; 0x566 <__bad_interrupt>
      60:	0c 94 b3 02 	jmp	0x566	; 0x566 <__bad_interrupt>
      64:	0c 94 b3 02 	jmp	0x566	; 0x566 <__bad_interrupt>
      68:	1d 11       	cpse	r17, r13
      6a:	45 11       	cpse	r20, r5
      6c:	6f 11       	cpse	r22, r15
      6e:	9a 11       	cpse	r25, r10
      70:	c4 11       	cpse	r28, r4
      72:	ed 11       	cpse	r30, r13
      74:	15 12       	cpse	r1, r21
      76:	3e 12       	cpse	r3, r30
      78:	b6 12       	cpse	r11, r22
      7a:	e1 12       	cpse	r14, r17
      7c:	b1 16       	cp	r11, r17
      7e:	b8 16       	cp	r11, r24
      80:	bf 16       	cp	r11, r31
      82:	c6 16       	cp	r12, r22
      84:	cd 16       	cp	r12, r29
      86:	d4 16       	cp	r13, r20
      88:	db 16       	cp	r13, r27
      8a:	e2 16       	cp	r14, r18
      8c:	08 4a       	sbci	r16, 0xA8	; 168
      8e:	d7 3b       	cpi	r29, 0xB7	; 183
      90:	3b ce       	rjmp	.-906    	; 0xfffffd08 <__eeprom_end+0xff7efd08>
      92:	01 6e       	ori	r16, 0xE1	; 225
      94:	84 bc       	out	0x24, r8	; 36
      96:	bf fd       	.word	0xfdbf	; ????
      98:	c1 2f       	mov	r28, r17
      9a:	3d 6c       	ori	r19, 0xCD	; 205
      9c:	74 31       	cpi	r23, 0x14	; 20
      9e:	9a bd       	out	0x2a, r25	; 42
      a0:	56 83       	std	Z+6, r21	; 0x06
      a2:	3d da       	rcall	.-2950   	; 0xfffff51e <__eeprom_end+0xff7ef51e>
      a4:	3d 00       	.word	0x003d	; ????
      a6:	c7 7f       	andi	r28, 0xF7	; 247
      a8:	11 be       	out	0x31, r1	; 49
      aa:	d9 e4       	ldi	r29, 0x49	; 73
      ac:	bb 4c       	sbci	r27, 0xCB	; 203
      ae:	3e 91       	ld	r19, -X
      b0:	6b aa       	std	Y+51, r6	; 0x33
      b2:	aa be       	out	0x3a, r10	; 58
      b4:	00 00       	nop
      b6:	00 80       	ld	r0, Z
      b8:	3f 05       	cpc	r19, r15
      ba:	a8 4c       	sbci	r26, 0xC8	; 200
      bc:	cd b2       	in	r12, 0x1d	; 29
      be:	d4 4e       	sbci	r29, 0xE4	; 228
      c0:	b9 38       	cpi	r27, 0x89	; 137
      c2:	36 a9       	ldd	r19, Z+54	; 0x36
      c4:	02 0c       	add	r0, r2
      c6:	50 b9       	out	0x00, r21	; 0
      c8:	91 86       	std	Z+9, r9	; 0x09
      ca:	88 08       	sbc	r8, r8
      cc:	3c a6       	std	Y+44, r3	; 0x2c
      ce:	aa aa       	std	Y+50, r10	; 0x32
      d0:	2a be       	out	0x3a, r2	; 58
      d2:	00 00       	nop
      d4:	00 80       	ld	r0, Z
      d6:	3f 06       	cpc	r3, r31
      d8:	64 ec       	ldi	r22, 0xC4	; 196
      da:	1b 3c       	cpi	r17, 0xCB	; 203
      dc:	04 bc       	out	0x24, r0	; 36
      de:	16 3e       	cpi	r17, 0xE6	; 230
      e0:	3b e5       	ldi	r19, 0x5B	; 91
      e2:	b9 3c       	cpi	r27, 0xC9	; 201
      e4:	c9 3c       	cpi	r28, 0xC9	; 201
      e6:	37 c2       	rjmp	.+1134   	; 0x556 <__do_global_ctors+0xe>
      e8:	9e 5a       	subi	r25, 0xAE	; 174
      ea:	3d 66       	ori	r19, 0x6D	; 109
      ec:	04 98       	cbi	0x00, 4	; 0
      ee:	08 3e       	cpi	r16, 0xE8	; 232
      f0:	ea 69       	ori	r30, 0x9A	; 154
      f2:	aa aa       	std	Y+50, r10	; 0x32
      f4:	3e 00       	.word	0x003e	; ????
      f6:	00 00       	nop
      f8:	80 3f       	cpi	r24, 0xF0	; 240

000000fa <__trampolines_end>:
      fa:	00 e0       	ldi	r16, 0x00	; 0
      fc:	f8 fc       	.word	0xfcf8	; ????
      fe:	fe 1e       	adc	r15, r30
     100:	07 07       	cpc	r16, r23
     102:	07 07       	cpc	r16, r23
     104:	1e fe       	.word	0xfe1e	; ????
     106:	fc f8       	.word	0xf8fc	; ????
     108:	f0 00       	.word	0x00f0	; ????
     10a:	00 07       	cpc	r16, r16
     10c:	0f 3f       	cpi	r16, 0xFF	; 255
     10e:	3f 7c       	andi	r19, 0xCF	; 207
     110:	70 70       	andi	r23, 0x00	; 0
     112:	70 70       	andi	r23, 0x00	; 0
     114:	7c 3f       	cpi	r23, 0xFC	; 252
     116:	1f 1f       	adc	r17, r31
     118:	07 00       	.word	0x0007	; ????
     11a:	00 00       	nop
     11c:	00 06       	cpc	r0, r16
     11e:	07 07       	cpc	r16, r23
     120:	ff ff       	.word	0xffff	; ????
     122:	ff ff       	.word	0xffff	; ????
	...
     130:	7f 7f       	andi	r23, 0xFF	; 255
     132:	7f 7f       	andi	r23, 0xFF	; 255
     134:	00 00       	nop
     136:	00 00       	nop
     138:	00 00       	nop
     13a:	00 38       	cpi	r16, 0x80	; 128
     13c:	3c 3e       	cpi	r19, 0xEC	; 236
     13e:	3e 0f       	add	r19, r30
     140:	07 07       	cpc	r16, r23
     142:	07 cf       	rjmp	.-498    	; 0xffffff52 <__eeprom_end+0xff7eff52>
     144:	ff fe       	.word	0xfeff	; ????
     146:	fe 38       	cpi	r31, 0x8E	; 142
     148:	00 00       	nop
     14a:	00 40       	sbci	r16, 0x00	; 0
     14c:	40 60       	ori	r20, 0x00	; 0
     14e:	70 78       	andi	r23, 0x80	; 128
     150:	7c 7e       	andi	r23, 0xEC	; 236
     152:	7f 77       	andi	r23, 0x7F	; 127
     154:	73 71       	andi	r23, 0x13	; 19
     156:	70 70       	andi	r23, 0x00	; 0
     158:	00 00       	nop
     15a:	00 18       	sub	r0, r0
     15c:	1c 1e       	adc	r1, r28
     15e:	1e 0f       	add	r17, r30
     160:	c7 c7       	rjmp	.+3982   	; 0x10f0 <_Z14willkommenpagev+0x4e>
     162:	e7 ff       	sbrs	r30, 7
     164:	fe be       	out	0x3e, r15	; 62
     166:	9c 00       	.word	0x009c	; ????
     168:	00 00       	nop
     16a:	00 0c       	add	r0, r0
     16c:	1c 3c       	cpi	r17, 0xCC	; 204
     16e:	3c 78       	andi	r19, 0x8C	; 140
     170:	70 70       	andi	r23, 0x00	; 0
     172:	70 79       	andi	r23, 0x90	; 144
     174:	7f 3f       	cpi	r23, 0xFF	; 255
     176:	1f 0f       	add	r17, r31
     178:	00 00       	nop
     17a:	00 00       	nop
     17c:	80 c0       	rjmp	.+256    	; 0x27e <_ZL7font5x8+0x44>
     17e:	e0 70       	andi	r30, 0x00	; 0
     180:	38 1c       	adc	r3, r8
     182:	1e ff       	.word	0xff1e	; ????
     184:	ff ff       	.word	0xffff	; ????
     186:	ff 00       	.word	0x00ff	; ????
     188:	00 00       	nop
     18a:	06 07       	cpc	r16, r22
     18c:	07 07       	cpc	r16, r23
     18e:	06 06       	cpc	r0, r22
     190:	06 06       	cpc	r0, r22
     192:	06 7f       	andi	r16, 0xF6	; 246
     194:	7f 7f       	andi	r23, 0xFF	; 255
     196:	7f 06       	cpc	r7, r31
     198:	06 00       	.word	0x0006	; ????
     19a:	00 00       	nop
     19c:	00 00       	nop
     19e:	f0 ff       	sbrs	r31, 0
     1a0:	ff ff       	.word	0xffff	; ????
     1a2:	e7 e7       	ldi	r30, 0x77	; 119
     1a4:	e7 e7       	ldi	r30, 0x77	; 119
     1a6:	c7 87       	std	Z+15, r28	; 0x0f
     1a8:	00 00       	nop
     1aa:	00 00       	nop
     1ac:	38 78       	andi	r19, 0x88	; 136
     1ae:	71 70       	andi	r23, 0x01	; 1
     1b0:	70 70       	andi	r23, 0x00	; 0
     1b2:	70 70       	andi	r23, 0x00	; 0
     1b4:	39 3f       	cpi	r19, 0xF9	; 249
     1b6:	3f 1f       	adc	r19, r31
     1b8:	0f 00       	.word	0x000f	; ????
     1ba:	00 80       	ld	r0, Z
     1bc:	e0 f0       	brcs	.+56     	; 0x1f6 <__trampolines_end+0xfc>
     1be:	f8 fc       	.word	0xfcf8	; ????
     1c0:	7f 7f       	andi	r23, 0xFF	; 255
     1c2:	6f 67       	ori	r22, 0x7F	; 127
     1c4:	e1 e1       	ldi	r30, 0x11	; 17
     1c6:	c0 80       	ld	r12, Z
     1c8:	00 00       	nop
     1ca:	00 0f       	add	r16, r16
     1cc:	1f 3f       	cpi	r17, 0xFF	; 255
     1ce:	3f 78       	andi	r19, 0x8F	; 143
     1d0:	70 70       	andi	r23, 0x00	; 0
     1d2:	70 70       	andi	r23, 0x00	; 0
     1d4:	78 3f       	cpi	r23, 0xF8	; 248
     1d6:	3f 1f       	adc	r19, r31
     1d8:	0f 00       	.word	0x000f	; ????
     1da:	00 07       	cpc	r16, r16
     1dc:	07 07       	cpc	r16, r23
     1de:	07 07       	cpc	r16, r23
     1e0:	c7 e7       	ldi	r28, 0x77	; 119
     1e2:	f7 ff       	sbrs	r31, 7
     1e4:	7f 3f       	cpi	r23, 0xFF	; 255
     1e6:	1f 07       	cpc	r17, r31
     1e8:	03 01       	movw	r0, r6
     1ea:	00 20       	and	r0, r0
     1ec:	38 7c       	andi	r19, 0xC8	; 200
     1ee:	7e 3f       	cpi	r23, 0xFE	; 254
     1f0:	0f 07       	cpc	r16, r31
     1f2:	03 00       	.word	0x0003	; ????
	...
     1fc:	00 1c       	adc	r0, r0
     1fe:	be fe       	.word	0xfebe	; ????
     200:	ff e7       	ldi	r31, 0x7F	; 127
     202:	c3 c3       	rjmp	.+1926   	; 0x98a <__stack+0x8b>
     204:	e7 ff       	sbrs	r30, 7
     206:	fe be       	out	0x3e, r15	; 62
     208:	1c 00       	.word	0x001c	; ????
     20a:	00 00       	nop
     20c:	0e 3f       	cpi	r16, 0xFE	; 254
     20e:	3f 7f       	andi	r19, 0xFF	; 255
     210:	71 60       	ori	r23, 0x01	; 1
     212:	60 60       	ori	r22, 0x00	; 0
     214:	71 7f       	andi	r23, 0xF1	; 241
     216:	3f 3f       	cpi	r19, 0xFF	; 255
     218:	0f 00       	.word	0x000f	; ????
     21a:	00 78       	andi	r16, 0x80	; 128
     21c:	fc fe       	.word	0xfefc	; ????
     21e:	fe 8f       	std	Y+30, r31	; 0x1e
     220:	07 07       	cpc	r16, r23
     222:	07 07       	cpc	r16, r23
     224:	8f fe       	.word	0xfe8f	; ????
     226:	fe fc       	.word	0xfcfe	; ????
     228:	f8 00       	.word	0x00f8	; ????
     22a:	00 00       	nop
     22c:	00 01       	movw	r0, r0
     22e:	43 43       	sbci	r20, 0x33	; 51
     230:	73 7b       	andi	r23, 0xB3	; 179
     232:	7f 7f       	andi	r23, 0xFF	; 255
     234:	1f 0f       	add	r17, r31
     236:	07 03       	mulsu	r16, r23
	...

0000023a <_ZL7font5x8>:
     23a:	00 00 5f 00 00 00 07 00 07 00 14 7f 14 7f 14 24     .._............$
     24a:	2a 7f 2a 12 23 13 08 64 62 36 49 55 22 50 00 05     *.*.#..db6IU"P..
     25a:	03 00 00 00 1c 22 41 00 00 41 22 1c 00 14 08 3e     ....."A..A"....>
     26a:	08 14 08 08 3e 08 08 00 50 30 00 00 08 08 08 08     ....>...P0......
     27a:	08 00 60 60 00 00 20 10 08 04 02 3e 51 49 45 3e     ..``.. ....>QIE>
     28a:	00 42 7f 40 00 42 61 51 49 46 21 41 45 4b 31 18     .B.@.BaQIF!AEK1.
     29a:	14 12 7f 10 27 45 45 45 39 3c 4a 49 49 30 01 71     ....'EEE9<JII0.q
     2aa:	09 05 03 36 49 49 49 36 06 49 49 29 1e 00 36 36     ...6III6.II)..66
     2ba:	00 00 00 56 36 00 00 08 14 22 41 00 14 14 14 14     ...V6...."A.....
     2ca:	14 00 41 22 14 08 02 01 51 09 06 32 49 79 41 3e     ..A"....Q..2IyA>
     2da:	7e 11 11 11 7e 7f 49 49 49 36 3e 41 41 41 22 7f     ~...~.III6>AAA".
     2ea:	41 41 22 1c 7f 49 49 49 41 7f 09 09 09 01 3e 41     AA"..IIIA.....>A
     2fa:	49 49 7a 7f 08 08 08 7f 00 41 7f 41 00 20 40 41     IIz......A.A. @A
     30a:	3f 01 7f 08 14 22 41 7f 40 40 40 40 7f 02 0c 02     ?...."A.@@@@....
     31a:	7f 7f 04 08 10 7f 3e 41 41 41 3e 7f 09 09 09 06     ......>AAA>.....
     32a:	3e 41 51 21 5e 7f 09 19 29 46 46 49 49 49 31 01     >AQ!^...)FFIII1.
     33a:	01 7f 01 01 3f 40 40 40 3f 1f 20 40 20 1f 3f 40     ....?@@@?. @ .?@
     34a:	38 40 3f 63 14 08 14 63 07 08 70 08 07 61 51 49     8@?c...c..p..aQI
     35a:	45 43 00 7f 41 41 00 02 04 08 10 20 00 41 41 7f     EC..AA..... .AA.
     36a:	00 04 02 01 02 04 40 40 40 40 40 00 01 02 04 00     ......@@@@@.....
     37a:	20 54 54 54 78 7f 48 44 44 38 38 44 44 44 20 38      TTTx.HDD88DDD 8
     38a:	44 44 48 7f 38 54 54 54 18 08 7e 09 01 02 0c 52     DDH.8TTT..~....R
     39a:	52 52 3e 7f 08 04 04 78 00 44 7d 40 00 20 40 44     RR>....x.D}@. @D
     3aa:	3d 00 7f 10 28 44 00 00 41 7f 40 00 7c 04 18 04     =...(D..A.@.|...
     3ba:	78 7c 08 04 04 78 38 44 44 44 38 7c 14 14 14 08     x|...x8DDD8|....
     3ca:	08 14 14 18 7c 7c 08 04 04 08 48 54 54 54 20 04     ....||....HTTT .
     3da:	3f 44 40 20 3c 40 40 20 7c 1c 20 40 20 1c 3c 40     ?D@ <@@ |. @ .<@
     3ea:	30 40 3c 44 28 10 28 44 0c 50 50 50 3c 44 64 54     0@<D(.(D.PPP<DdT
     3fa:	4c 44 00 08 36 41 00 00 00 7f 00 00 00 41 36 08     LD..6A.......A6.
     40a:	00 10 08 08 10 08                                   ......

00000410 <__c.2161>:
     410:	6e 61 6e 00                                         nan.

00000414 <__c.2159>:
     414:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     424:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     434:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     444:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     454:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     464:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     474:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     484:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     494:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     4a4:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     4b4:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     4c4:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     4d4:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     4e4:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     4f4:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     504:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000512 <__ctors_start>:
     512:	14 18       	sub	r1, r4

00000514 <__ctors_end>:
     514:	2d 18       	sub	r2, r13

00000516 <__dtors_end>:
     516:	11 24       	eor	r1, r1
     518:	1f be       	out	0x3f, r1	; 63
     51a:	cf ef       	ldi	r28, 0xFF	; 255
     51c:	d8 e0       	ldi	r29, 0x08	; 8
     51e:	de bf       	out	0x3e, r29	; 62
     520:	cd bf       	out	0x3d, r28	; 61

00000522 <__do_copy_data>:
     522:	12 e0       	ldi	r17, 0x02	; 2
     524:	a0 e0       	ldi	r26, 0x00	; 0
     526:	b1 e0       	ldi	r27, 0x01	; 1
     528:	ea e4       	ldi	r30, 0x4A	; 74
     52a:	f8 e4       	ldi	r31, 0x48	; 72
     52c:	02 c0       	rjmp	.+4      	; 0x532 <__do_copy_data+0x10>
     52e:	05 90       	lpm	r0, Z+
     530:	0d 92       	st	X+, r0
     532:	ae 39       	cpi	r26, 0x9E	; 158
     534:	b1 07       	cpc	r27, r17
     536:	d9 f7       	brne	.-10     	; 0x52e <__do_copy_data+0xc>

00000538 <__do_clear_bss>:
     538:	26 e0       	ldi	r18, 0x06	; 6
     53a:	ae e9       	ldi	r26, 0x9E	; 158
     53c:	b2 e0       	ldi	r27, 0x02	; 2
     53e:	01 c0       	rjmp	.+2      	; 0x542 <.do_clear_bss_start>

00000540 <.do_clear_bss_loop>:
     540:	1d 92       	st	X+, r1

00000542 <.do_clear_bss_start>:
     542:	a4 3f       	cpi	r26, 0xF4	; 244
     544:	b2 07       	cpc	r27, r18
     546:	e1 f7       	brne	.-8      	; 0x540 <.do_clear_bss_loop>

00000548 <__do_global_ctors>:
     548:	15 e0       	ldi	r17, 0x05	; 5
     54a:	c4 e1       	ldi	r28, 0x14	; 20
     54c:	d5 e0       	ldi	r29, 0x05	; 5
     54e:	04 c0       	rjmp	.+8      	; 0x558 <__do_global_ctors+0x10>
     550:	22 97       	sbiw	r28, 0x02	; 2
     552:	fe 01       	movw	r30, r28
     554:	0e 94 3d 22 	call	0x447a	; 0x447a <__tablejump__>
     558:	c2 31       	cpi	r28, 0x12	; 18
     55a:	d1 07       	cpc	r29, r17
     55c:	c9 f7       	brne	.-14     	; 0x550 <__do_global_ctors+0x8>
     55e:	0e 94 07 18 	call	0x300e	; 0x300e <main>
     562:	0c 94 18 24 	jmp	0x4830	; 0x4830 <__do_global_dtors>

00000566 <__bad_interrupt>:
     566:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000056a <_ZN7DisplayD1Ev>:
	//}
	InitializeDisplay();
} //Display

// default destructor
Display::~Display()
     56a:	9c 5f       	subi	r25, 0xFC	; 252
     56c:	0e 94 4a 18 	call	0x3094	; 0x3094 <_ZN3I2CD1Ev>
     570:	08 95       	ret

00000572 <_ZN7Display10clearFrameEv>:
{
} //~Display

void Display::clearFrame(){
     572:	fc 01       	movw	r30, r24
	for(uint16_t i=0;i<1024;i++){
     574:	20 e0       	ldi	r18, 0x00	; 0
     576:	30 e0       	ldi	r19, 0x00	; 0
		Displayframe[i]=0;
     578:	11 92       	st	Z+, r1
Display::~Display()
{
} //~Display

void Display::clearFrame(){
	for(uint16_t i=0;i<1024;i++){
     57a:	2f 5f       	subi	r18, 0xFF	; 255
     57c:	3f 4f       	sbci	r19, 0xFF	; 255
     57e:	21 15       	cp	r18, r1
     580:	84 e0       	ldi	r24, 0x04	; 4
     582:	38 07       	cpc	r19, r24
     584:	c9 f7       	brne	.-14     	; 0x578 <_ZN7Display10clearFrameEv+0x6>
		Displayframe[i]=0;
	}
}
     586:	08 95       	ret

00000588 <_ZN7Display15ssd1306_commandEh>:

void Display::ssd1306_command(uint8_t c){
     588:	1f 93       	push	r17
     58a:	cf 93       	push	r28
     58c:	df 93       	push	r29
     58e:	16 2f       	mov	r17, r22
	i2c.twi_start();
     590:	ec 01       	movw	r28, r24
     592:	dc 5f       	subi	r29, 0xFC	; 252
     594:	ce 01       	movw	r24, r28
     596:	0e 94 4b 18 	call	0x3096	; 0x3096 <_ZN3I2C9twi_startEv>
	i2c.twi_write(OLEDADRESSE);
     59a:	68 e7       	ldi	r22, 0x78	; 120
     59c:	ce 01       	movw	r24, r28
     59e:	0e 94 53 18 	call	0x30a6	; 0x30a6 <_ZN3I2C9twi_writeEh>
	i2c.twi_write(OLEDBEFEHL);
     5a2:	60 e0       	ldi	r22, 0x00	; 0
     5a4:	ce 01       	movw	r24, r28
     5a6:	0e 94 53 18 	call	0x30a6	; 0x30a6 <_ZN3I2C9twi_writeEh>
	i2c.twi_write(c);
     5aa:	61 2f       	mov	r22, r17
     5ac:	ce 01       	movw	r24, r28
     5ae:	0e 94 53 18 	call	0x30a6	; 0x30a6 <_ZN3I2C9twi_writeEh>
	i2c.twi_stop();
     5b2:	ce 01       	movw	r24, r28
     5b4:	0e 94 4f 18 	call	0x309e	; 0x309e <_ZN3I2C8twi_stopEv>
}
     5b8:	df 91       	pop	r29
     5ba:	cf 91       	pop	r28
     5bc:	1f 91       	pop	r17
     5be:	08 95       	ret

000005c0 <_ZN7Display17InitializeDisplayEv>:

void Display::InitializeDisplay()
{
     5c0:	cf 93       	push	r28
     5c2:	df 93       	push	r29
     5c4:	ec 01       	movw	r28, r24
	// Init sequence for 128x64 OLED module
	ssd1306_command(SSD1306_DISPLAYOFF);                    // 0xAE
     5c6:	6e ea       	ldi	r22, 0xAE	; 174
     5c8:	0e 94 c4 02 	call	0x588	; 0x588 <_ZN7Display15ssd1306_commandEh>

	ssd1306_command(SSD1306_SETDISPLAYCLOCKDIV);            // 0xD5
     5cc:	65 ed       	ldi	r22, 0xD5	; 213
     5ce:	ce 01       	movw	r24, r28
     5d0:	0e 94 c4 02 	call	0x588	; 0x588 <_ZN7Display15ssd1306_commandEh>
	ssd1306_command(0x80);                 // the suggested ratio 0x80
     5d4:	60 e8       	ldi	r22, 0x80	; 128
     5d6:	ce 01       	movw	r24, r28
     5d8:	0e 94 c4 02 	call	0x588	; 0x588 <_ZN7Display15ssd1306_commandEh>

	ssd1306_command(SSD1306_SETMULTIPLEX);                  // 0xA8
     5dc:	68 ea       	ldi	r22, 0xA8	; 168
     5de:	ce 01       	movw	r24, r28
     5e0:	0e 94 c4 02 	call	0x588	; 0x588 <_ZN7Display15ssd1306_commandEh>
	ssd1306_command(0x3F);
     5e4:	6f e3       	ldi	r22, 0x3F	; 63
     5e6:	ce 01       	movw	r24, r28
     5e8:	0e 94 c4 02 	call	0x588	; 0x588 <_ZN7Display15ssd1306_commandEh>

	ssd1306_command(SSD1306_SETDISPLAYOFFSET);              // 0xD3
     5ec:	63 ed       	ldi	r22, 0xD3	; 211
     5ee:	ce 01       	movw	r24, r28
     5f0:	0e 94 c4 02 	call	0x588	; 0x588 <_ZN7Display15ssd1306_commandEh>
	ssd1306_command(0x0);                                   // no offset
     5f4:	60 e0       	ldi	r22, 0x00	; 0
     5f6:	ce 01       	movw	r24, r28
     5f8:	0e 94 c4 02 	call	0x588	; 0x588 <_ZN7Display15ssd1306_commandEh>

	ssd1306_command(SSD1306_SETSTARTLINE);// | 0x0);        // line #0
     5fc:	60 e4       	ldi	r22, 0x40	; 64
     5fe:	ce 01       	movw	r24, r28
     600:	0e 94 c4 02 	call	0x588	; 0x588 <_ZN7Display15ssd1306_commandEh>

	ssd1306_command(SSD1306_CHARGEPUMP);                    // 0x8D
     604:	6d e8       	ldi	r22, 0x8D	; 141
     606:	ce 01       	movw	r24, r28
     608:	0e 94 c4 02 	call	0x588	; 0x588 <_ZN7Display15ssd1306_commandEh>
	ssd1306_command(0x14);  // using internal VCC
     60c:	64 e1       	ldi	r22, 0x14	; 20
     60e:	ce 01       	movw	r24, r28
     610:	0e 94 c4 02 	call	0x588	; 0x588 <_ZN7Display15ssd1306_commandEh>

	ssd1306_command(SSD1306_MEMORYMODE);                    // 0x20
     614:	60 e2       	ldi	r22, 0x20	; 32
     616:	ce 01       	movw	r24, r28
     618:	0e 94 c4 02 	call	0x588	; 0x588 <_ZN7Display15ssd1306_commandEh>
	ssd1306_command(0x00);          // 0x00 horizontal addressing
     61c:	60 e0       	ldi	r22, 0x00	; 0
     61e:	ce 01       	movw	r24, r28
     620:	0e 94 c4 02 	call	0x588	; 0x588 <_ZN7Display15ssd1306_commandEh>

	ssd1306_command(SSD1306_SEGREMAP | 0x1); // rotate screen 180
     624:	61 ea       	ldi	r22, 0xA1	; 161
     626:	ce 01       	movw	r24, r28
     628:	0e 94 c4 02 	call	0x588	; 0x588 <_ZN7Display15ssd1306_commandEh>

	ssd1306_command(SSD1306_COMSCANDEC); // rotate screen 180
     62c:	68 ec       	ldi	r22, 0xC8	; 200
     62e:	ce 01       	movw	r24, r28
     630:	0e 94 c4 02 	call	0x588	; 0x588 <_ZN7Display15ssd1306_commandEh>

	ssd1306_command(SSD1306_SETCOMPINS);                    // 0xDA
     634:	6a ed       	ldi	r22, 0xDA	; 218
     636:	ce 01       	movw	r24, r28
     638:	0e 94 c4 02 	call	0x588	; 0x588 <_ZN7Display15ssd1306_commandEh>
	ssd1306_command(0x12);
     63c:	62 e1       	ldi	r22, 0x12	; 18
     63e:	ce 01       	movw	r24, r28
     640:	0e 94 c4 02 	call	0x588	; 0x588 <_ZN7Display15ssd1306_commandEh>

	ssd1306_command(SSD1306_SETCONTRAST);                   // 0x81
     644:	61 e8       	ldi	r22, 0x81	; 129
     646:	ce 01       	movw	r24, r28
     648:	0e 94 c4 02 	call	0x588	; 0x588 <_ZN7Display15ssd1306_commandEh>
	ssd1306_command(0xCF);
     64c:	6f ec       	ldi	r22, 0xCF	; 207
     64e:	ce 01       	movw	r24, r28
     650:	0e 94 c4 02 	call	0x588	; 0x588 <_ZN7Display15ssd1306_commandEh>

	ssd1306_command(SSD1306_SETPRECHARGE);                  // 0xd9
     654:	69 ed       	ldi	r22, 0xD9	; 217
     656:	ce 01       	movw	r24, r28
     658:	0e 94 c4 02 	call	0x588	; 0x588 <_ZN7Display15ssd1306_commandEh>
	ssd1306_command(0xF1);
     65c:	61 ef       	ldi	r22, 0xF1	; 241
     65e:	ce 01       	movw	r24, r28
     660:	0e 94 c4 02 	call	0x588	; 0x588 <_ZN7Display15ssd1306_commandEh>

	ssd1306_command(SSD1306_SETVCOMDETECT);                 // 0xDB
     664:	6b ed       	ldi	r22, 0xDB	; 219
     666:	ce 01       	movw	r24, r28
     668:	0e 94 c4 02 	call	0x588	; 0x588 <_ZN7Display15ssd1306_commandEh>
	ssd1306_command(0x40);
     66c:	60 e4       	ldi	r22, 0x40	; 64
     66e:	ce 01       	movw	r24, r28
     670:	0e 94 c4 02 	call	0x588	; 0x588 <_ZN7Display15ssd1306_commandEh>

	ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
     674:	64 ea       	ldi	r22, 0xA4	; 164
     676:	ce 01       	movw	r24, r28
     678:	0e 94 c4 02 	call	0x588	; 0x588 <_ZN7Display15ssd1306_commandEh>

	ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
     67c:	66 ea       	ldi	r22, 0xA6	; 166
     67e:	ce 01       	movw	r24, r28
     680:	0e 94 c4 02 	call	0x588	; 0x588 <_ZN7Display15ssd1306_commandEh>

	ssd1306_command(SSD1306_DISPLAYON);                     //switch on OLED
     684:	6f ea       	ldi	r22, 0xAF	; 175
     686:	ce 01       	movw	r24, r28
     688:	0e 94 c4 02 	call	0x588	; 0x588 <_ZN7Display15ssd1306_commandEh>
}
     68c:	df 91       	pop	r29
     68e:	cf 91       	pop	r28
     690:	08 95       	ret

00000692 <_ZN7DisplayC1Ev>:


#include "Display.h"

// default constructor
Display::Display()
     692:	cf 93       	push	r28
     694:	df 93       	push	r29
     696:	ec 01       	movw	r28, r24
     698:	9c 5f       	subi	r25, 0xFC	; 252
     69a:	0e 94 46 18 	call	0x308c	; 0x308c <_ZN3I2CC1Ev>
{
	//for (uint8_t i=0;i<1024;i++)
	//{
		//Displayframe[i]=0;
	//}
	InitializeDisplay();
     69e:	ce 01       	movw	r24, r28
     6a0:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <_ZN7Display17InitializeDisplayEv>
} //Display
     6a4:	df 91       	pop	r29
     6a6:	cf 91       	pop	r28
     6a8:	08 95       	ret

000006aa <_ZN7Display6invertEh>:

	ssd1306_command(SSD1306_DISPLAYON);                     //switch on OLED
}

void Display::invert(uint8_t inverted) {
	if (inverted) {
     6aa:	66 23       	and	r22, r22
     6ac:	21 f0       	breq	.+8      	; 0x6b6 <_ZN7Display6invertEh+0xc>
		ssd1306_command(SSD1306_INVERTDISPLAY);
     6ae:	67 ea       	ldi	r22, 0xA7	; 167
     6b0:	0e 94 c4 02 	call	0x588	; 0x588 <_ZN7Display15ssd1306_commandEh>
     6b4:	08 95       	ret
	}
	else {
		ssd1306_command(SSD1306_NORMALDISPLAY);
     6b6:	66 ea       	ldi	r22, 0xA6	; 166
     6b8:	0e 94 c4 02 	call	0x588	; 0x588 <_ZN7Display15ssd1306_commandEh>
     6bc:	08 95       	ret

000006be <_ZN7Display9sendFrameEv>:
	}
}

void Display::sendFrame(){
     6be:	ef 92       	push	r14
     6c0:	ff 92       	push	r15
     6c2:	0f 93       	push	r16
     6c4:	1f 93       	push	r17
     6c6:	cf 93       	push	r28
     6c8:	df 93       	push	r29
     6ca:	8c 01       	movw	r16, r24
	//Cursor an den Anfang setzen
	ssd1306_command(SSD1306_COLUMNADDR);
     6cc:	61 e2       	ldi	r22, 0x21	; 33
     6ce:	0e 94 c4 02 	call	0x588	; 0x588 <_ZN7Display15ssd1306_commandEh>
	ssd1306_command(0x00);
     6d2:	60 e0       	ldi	r22, 0x00	; 0
     6d4:	c8 01       	movw	r24, r16
     6d6:	0e 94 c4 02 	call	0x588	; 0x588 <_ZN7Display15ssd1306_commandEh>
	ssd1306_command(0x7F);
     6da:	6f e7       	ldi	r22, 0x7F	; 127
     6dc:	c8 01       	movw	r24, r16
     6de:	0e 94 c4 02 	call	0x588	; 0x588 <_ZN7Display15ssd1306_commandEh>

	ssd1306_command(SSD1306_PAGEADDR);
     6e2:	62 e2       	ldi	r22, 0x22	; 34
     6e4:	c8 01       	movw	r24, r16
     6e6:	0e 94 c4 02 	call	0x588	; 0x588 <_ZN7Display15ssd1306_commandEh>
	ssd1306_command(0x00);
     6ea:	60 e0       	ldi	r22, 0x00	; 0
     6ec:	c8 01       	movw	r24, r16
     6ee:	0e 94 c4 02 	call	0x588	; 0x588 <_ZN7Display15ssd1306_commandEh>
	ssd1306_command(0x07);
     6f2:	67 e0       	ldi	r22, 0x07	; 7
     6f4:	c8 01       	movw	r24, r16
     6f6:	0e 94 c4 02 	call	0x588	; 0x588 <_ZN7Display15ssd1306_commandEh>

	i2c.twi_start();
     6fa:	78 01       	movw	r14, r16
     6fc:	8c ef       	ldi	r24, 0xFC	; 252
     6fe:	f8 1a       	sub	r15, r24
     700:	c7 01       	movw	r24, r14
     702:	0e 94 4b 18 	call	0x3096	; 0x3096 <_ZN3I2C9twi_startEv>
	i2c.twi_write(OLEDADRESSE);
     706:	68 e7       	ldi	r22, 0x78	; 120
     708:	c7 01       	movw	r24, r14
     70a:	0e 94 53 18 	call	0x30a6	; 0x30a6 <_ZN3I2C9twi_writeEh>
	i2c.twi_write(OLEDDATA);
     70e:	60 e4       	ldi	r22, 0x40	; 64
     710:	c7 01       	movw	r24, r14
     712:	0e 94 53 18 	call	0x30a6	; 0x30a6 <_ZN3I2C9twi_writeEh>
	
	for(uint16_t i=0; i<1024;i++){
     716:	c0 e0       	ldi	r28, 0x00	; 0
     718:	d0 e0       	ldi	r29, 0x00	; 0
		i2c.twi_write(Displayframe[i]);
     71a:	f8 01       	movw	r30, r16
     71c:	61 91       	ld	r22, Z+
     71e:	8f 01       	movw	r16, r30
     720:	c7 01       	movw	r24, r14
     722:	0e 94 53 18 	call	0x30a6	; 0x30a6 <_ZN3I2C9twi_writeEh>

	i2c.twi_start();
	i2c.twi_write(OLEDADRESSE);
	i2c.twi_write(OLEDDATA);
	
	for(uint16_t i=0; i<1024;i++){
     726:	21 96       	adiw	r28, 0x01	; 1
     728:	c1 15       	cp	r28, r1
     72a:	f4 e0       	ldi	r31, 0x04	; 4
     72c:	df 07       	cpc	r29, r31
     72e:	a9 f7       	brne	.-22     	; 0x71a <_ZN7Display9sendFrameEv+0x5c>
		i2c.twi_write(Displayframe[i]);
	}
	i2c.twi_stop();
     730:	c7 01       	movw	r24, r14
     732:	0e 94 4f 18 	call	0x309e	; 0x309e <_ZN3I2C8twi_stopEv>
}
     736:	df 91       	pop	r29
     738:	cf 91       	pop	r28
     73a:	1f 91       	pop	r17
     73c:	0f 91       	pop	r16
     73e:	ff 90       	pop	r15
     740:	ef 90       	pop	r14
     742:	08 95       	ret

00000744 <_ZN7Display9drawPixelEhhh>:

void Display::drawPixel(uint8_t pos_x, uint8_t pos_y, uint8_t erase){
	if(!(pos_x >= SSD1306_WIDTH || pos_y >= SSD1306_HEIGHT)){
     744:	66 23       	and	r22, r22
     746:	bc f1       	brlt	.+110    	; 0x7b6 <_ZN7Display9drawPixelEhhh+0x72>
     748:	40 34       	cpi	r20, 0x40	; 64
     74a:	a8 f5       	brcc	.+106    	; 0x7b6 <_ZN7Display9drawPixelEhhh+0x72>
		if(!erase){
     74c:	21 11       	cpse	r18, r1
     74e:	19 c0       	rjmp	.+50     	; 0x782 <_ZN7Display9drawPixelEhhh+0x3e>
			Displayframe[pos_x+(pos_y/8)*SSD1306_WIDTH] |= (1 << (pos_y&7));
     750:	e4 2f       	mov	r30, r20
     752:	e6 95       	lsr	r30
     754:	e6 95       	lsr	r30
     756:	e6 95       	lsr	r30
     758:	20 e8       	ldi	r18, 0x80	; 128
     75a:	e2 9f       	mul	r30, r18
     75c:	f0 01       	movw	r30, r0
     75e:	11 24       	eor	r1, r1
     760:	e6 0f       	add	r30, r22
     762:	f1 1d       	adc	r31, r1
     764:	e8 0f       	add	r30, r24
     766:	f9 1f       	adc	r31, r25
     768:	47 70       	andi	r20, 0x07	; 7
     76a:	21 e0       	ldi	r18, 0x01	; 1
     76c:	30 e0       	ldi	r19, 0x00	; 0
     76e:	c9 01       	movw	r24, r18
     770:	02 c0       	rjmp	.+4      	; 0x776 <_ZN7Display9drawPixelEhhh+0x32>
     772:	88 0f       	add	r24, r24
     774:	99 1f       	adc	r25, r25
     776:	4a 95       	dec	r20
     778:	e2 f7       	brpl	.-8      	; 0x772 <_ZN7Display9drawPixelEhhh+0x2e>
     77a:	90 81       	ld	r25, Z
     77c:	89 2b       	or	r24, r25
     77e:	80 83       	st	Z, r24
     780:	08 95       	ret
		}
		else {
			Displayframe[pos_x+(pos_y/8)*SSD1306_WIDTH] &= ~(1 << (pos_y&7));
     782:	e4 2f       	mov	r30, r20
     784:	e6 95       	lsr	r30
     786:	e6 95       	lsr	r30
     788:	e6 95       	lsr	r30
     78a:	30 e8       	ldi	r19, 0x80	; 128
     78c:	e3 9f       	mul	r30, r19
     78e:	f0 01       	movw	r30, r0
     790:	11 24       	eor	r1, r1
     792:	e6 0f       	add	r30, r22
     794:	f1 1d       	adc	r31, r1
     796:	e8 0f       	add	r30, r24
     798:	f9 1f       	adc	r31, r25
     79a:	47 70       	andi	r20, 0x07	; 7
     79c:	81 e0       	ldi	r24, 0x01	; 1
     79e:	90 e0       	ldi	r25, 0x00	; 0
     7a0:	9c 01       	movw	r18, r24
     7a2:	02 c0       	rjmp	.+4      	; 0x7a8 <_ZN7Display9drawPixelEhhh+0x64>
     7a4:	22 0f       	add	r18, r18
     7a6:	33 1f       	adc	r19, r19
     7a8:	4a 95       	dec	r20
     7aa:	e2 f7       	brpl	.-8      	; 0x7a4 <_ZN7Display9drawPixelEhhh+0x60>
     7ac:	a9 01       	movw	r20, r18
     7ae:	40 95       	com	r20
     7b0:	80 81       	ld	r24, Z
     7b2:	48 23       	and	r20, r24
     7b4:	40 83       	st	Z, r20
     7b6:	08 95       	ret

000007b8 <_ZN7Display9draw_lineEhhhf>:
		}
	}
}

//eigene Zeichenfunktionen
void Display::draw_line(uint8_t x, uint8_t y, uint8_t length, float phi){
     7b8:	2f 92       	push	r2
     7ba:	3f 92       	push	r3
     7bc:	4f 92       	push	r4
     7be:	5f 92       	push	r5
     7c0:	6f 92       	push	r6
     7c2:	7f 92       	push	r7
     7c4:	8f 92       	push	r8
     7c6:	9f 92       	push	r9
     7c8:	af 92       	push	r10
     7ca:	bf 92       	push	r11
     7cc:	cf 92       	push	r12
     7ce:	df 92       	push	r13
     7d0:	ef 92       	push	r14
     7d2:	ff 92       	push	r15
     7d4:	0f 93       	push	r16
     7d6:	1f 93       	push	r17
     7d8:	cf 93       	push	r28
     7da:	df 93       	push	r29
     7dc:	cd b7       	in	r28, 0x3d	; 61
     7de:	de b7       	in	r29, 0x3e	; 62
     7e0:	2b 97       	sbiw	r28, 0x0b	; 11
     7e2:	0f b6       	in	r0, 0x3f	; 63
     7e4:	f8 94       	cli
     7e6:	de bf       	out	0x3e, r29	; 62
     7e8:	0f be       	out	0x3f, r0	; 63
     7ea:	cd bf       	out	0x3d, r28	; 61
     7ec:	1c 01       	movw	r2, r24
     7ee:	d6 2e       	mov	r13, r22
     7f0:	c4 2e       	mov	r12, r20
     7f2:	29 83       	std	Y+1, r18	; 0x01
	//phi*=M_PI/180.0;
	uint8_t pos_x=0, pos_y=0;
	for (uint8_t i=0;i<length;i++)
     7f4:	22 23       	and	r18, r18
     7f6:	09 f4       	brne	.+2      	; 0x7fa <_ZN7Display9draw_lineEhhhf+0x42>
     7f8:	69 c0       	rjmp	.+210    	; 0x8cc <_ZN7Display9draw_lineEhhhf+0x114>
	{
		pos_x=(uint8_t) (-i*cos(phi)+x);
     7fa:	c8 01       	movw	r24, r16
     7fc:	b7 01       	movw	r22, r14
     7fe:	0e 94 5e 1c 	call	0x38bc	; 0x38bc <cos>
     802:	2b 01       	movw	r4, r22
     804:	3c 01       	movw	r6, r24
		pos_y=(uint8_t) (i*sin(phi)+y);
     806:	c8 01       	movw	r24, r16
     808:	b7 01       	movw	r22, r14
     80a:	0e 94 78 1e 	call	0x3cf0	; 0x3cf0 <sin>
     80e:	4b 01       	movw	r8, r22
     810:	5c 01       	movw	r10, r24
     812:	1b 86       	std	Y+11, r1	; 0x0b
     814:	1a 86       	std	Y+10, r1	; 0x0a
     816:	8c 2d       	mov	r24, r12
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e0       	ldi	r26, 0x00	; 0
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	8a 83       	std	Y+2, r24	; 0x02
     820:	9b 83       	std	Y+3, r25	; 0x03
     822:	ac 83       	std	Y+4, r26	; 0x04
     824:	bd 83       	std	Y+5, r27	; 0x05
void Display::draw_line(uint8_t x, uint8_t y, uint8_t length, float phi){
	//phi*=M_PI/180.0;
	uint8_t pos_x=0, pos_y=0;
	for (uint8_t i=0;i<length;i++)
	{
		pos_x=(uint8_t) (-i*cos(phi)+x);
     826:	8d 2d       	mov	r24, r13
     828:	90 e0       	ldi	r25, 0x00	; 0
     82a:	a0 e0       	ldi	r26, 0x00	; 0
     82c:	b0 e0       	ldi	r27, 0x00	; 0
     82e:	8e 83       	std	Y+6, r24	; 0x06
     830:	9f 83       	std	Y+7, r25	; 0x07
     832:	a8 87       	std	Y+8, r26	; 0x08
     834:	b9 87       	std	Y+9, r27	; 0x09
		pos_y=(uint8_t) (i*sin(phi)+y);
     836:	aa 85       	ldd	r26, Y+10	; 0x0a
     838:	bb 85       	ldd	r27, Y+11	; 0x0b
     83a:	bd 01       	movw	r22, r26
     83c:	88 27       	eor	r24, r24
     83e:	77 fd       	sbrc	r23, 7
     840:	80 95       	com	r24
     842:	98 2f       	mov	r25, r24
     844:	0e 94 fc 1c 	call	0x39f8	; 0x39f8 <__floatsisf>
     848:	a5 01       	movw	r20, r10
     84a:	94 01       	movw	r18, r8
     84c:	0e 94 15 1e 	call	0x3c2a	; 0x3c2a <__mulsf3>
     850:	6b 01       	movw	r12, r22
     852:	7c 01       	movw	r14, r24
     854:	6a 81       	ldd	r22, Y+2	; 0x02
     856:	7b 81       	ldd	r23, Y+3	; 0x03
     858:	8c 81       	ldd	r24, Y+4	; 0x04
     85a:	9d 81       	ldd	r25, Y+5	; 0x05
     85c:	0e 94 fc 1c 	call	0x39f8	; 0x39f8 <__floatsisf>
     860:	9b 01       	movw	r18, r22
     862:	ac 01       	movw	r20, r24
     864:	c7 01       	movw	r24, r14
     866:	b6 01       	movw	r22, r12
     868:	0e 94 94 1b 	call	0x3728	; 0x3728 <__addsf3>
     86c:	0e 94 ce 1c 	call	0x399c	; 0x399c <__fixunssfsi>
     870:	16 2f       	mov	r17, r22
     872:	6a 85       	ldd	r22, Y+10	; 0x0a
     874:	7b 85       	ldd	r23, Y+11	; 0x0b
     876:	71 95       	neg	r23
     878:	61 95       	neg	r22
     87a:	71 09       	sbc	r23, r1
void Display::draw_line(uint8_t x, uint8_t y, uint8_t length, float phi){
	//phi*=M_PI/180.0;
	uint8_t pos_x=0, pos_y=0;
	for (uint8_t i=0;i<length;i++)
	{
		pos_x=(uint8_t) (-i*cos(phi)+x);
     87c:	88 27       	eor	r24, r24
     87e:	77 fd       	sbrc	r23, 7
     880:	80 95       	com	r24
     882:	98 2f       	mov	r25, r24
     884:	0e 94 fc 1c 	call	0x39f8	; 0x39f8 <__floatsisf>
     888:	a3 01       	movw	r20, r6
     88a:	92 01       	movw	r18, r4
     88c:	0e 94 15 1e 	call	0x3c2a	; 0x3c2a <__mulsf3>
     890:	6b 01       	movw	r12, r22
     892:	7c 01       	movw	r14, r24
     894:	6e 81       	ldd	r22, Y+6	; 0x06
     896:	7f 81       	ldd	r23, Y+7	; 0x07
     898:	88 85       	ldd	r24, Y+8	; 0x08
     89a:	99 85       	ldd	r25, Y+9	; 0x09
     89c:	0e 94 fc 1c 	call	0x39f8	; 0x39f8 <__floatsisf>
     8a0:	9b 01       	movw	r18, r22
     8a2:	ac 01       	movw	r20, r24
     8a4:	c7 01       	movw	r24, r14
     8a6:	b6 01       	movw	r22, r12
     8a8:	0e 94 94 1b 	call	0x3728	; 0x3728 <__addsf3>
     8ac:	0e 94 ce 1c 	call	0x399c	; 0x399c <__fixunssfsi>
		pos_y=(uint8_t) (i*sin(phi)+y);
		drawPixel(pos_x,pos_y,0);
     8b0:	20 e0       	ldi	r18, 0x00	; 0
     8b2:	41 2f       	mov	r20, r17
     8b4:	c1 01       	movw	r24, r2
     8b6:	0e 94 a2 03 	call	0x744	; 0x744 <_ZN7Display9drawPixelEhhh>
     8ba:	ea 85       	ldd	r30, Y+10	; 0x0a
     8bc:	fb 85       	ldd	r31, Y+11	; 0x0b
     8be:	31 96       	adiw	r30, 0x01	; 1
     8c0:	fb 87       	std	Y+11, r31	; 0x0b
     8c2:	ea 87       	std	Y+10, r30	; 0x0a

//eigene Zeichenfunktionen
void Display::draw_line(uint8_t x, uint8_t y, uint8_t length, float phi){
	//phi*=M_PI/180.0;
	uint8_t pos_x=0, pos_y=0;
	for (uint8_t i=0;i<length;i++)
     8c4:	f9 81       	ldd	r31, Y+1	; 0x01
     8c6:	ef 17       	cp	r30, r31
     8c8:	08 f4       	brcc	.+2      	; 0x8cc <_ZN7Display9draw_lineEhhhf+0x114>
     8ca:	b5 cf       	rjmp	.-150    	; 0x836 <_ZN7Display9draw_lineEhhhf+0x7e>
	{
		pos_x=(uint8_t) (-i*cos(phi)+x);
		pos_y=(uint8_t) (i*sin(phi)+y);
		drawPixel(pos_x,pos_y,0);
	}
}
     8cc:	2b 96       	adiw	r28, 0x0b	; 11
     8ce:	0f b6       	in	r0, 0x3f	; 63
     8d0:	f8 94       	cli
     8d2:	de bf       	out	0x3e, r29	; 62
     8d4:	0f be       	out	0x3f, r0	; 63
     8d6:	cd bf       	out	0x3d, r28	; 61
     8d8:	df 91       	pop	r29
     8da:	cf 91       	pop	r28
     8dc:	1f 91       	pop	r17
     8de:	0f 91       	pop	r16
     8e0:	ff 90       	pop	r15
     8e2:	ef 90       	pop	r14
     8e4:	df 90       	pop	r13
     8e6:	cf 90       	pop	r12
     8e8:	bf 90       	pop	r11
     8ea:	af 90       	pop	r10
     8ec:	9f 90       	pop	r9
     8ee:	8f 90       	pop	r8
     8f0:	7f 90       	pop	r7
     8f2:	6f 90       	pop	r6
     8f4:	5f 90       	pop	r5
     8f6:	4f 90       	pop	r4
     8f8:	3f 90       	pop	r3
     8fa:	2f 90       	pop	r2
     8fc:	08 95       	ret

000008fe <_ZN7Display13draw_triangleEhhhff>:

//using basecenterpoint as turningpoint for rotation
//upright triangle has rotationangle of 0
//turning clockwise considered in x transformation
//baseangle=70 is for 1/3 type
void Display::draw_triangle(uint8_t basecenter_x, uint8_t basecenter_y, uint8_t baselength, float baseangle, float rotationangle){
     8fe:	2f 92       	push	r2
     900:	3f 92       	push	r3
     902:	4f 92       	push	r4
     904:	5f 92       	push	r5
     906:	6f 92       	push	r6
     908:	7f 92       	push	r7
     90a:	8f 92       	push	r8
     90c:	9f 92       	push	r9
     90e:	af 92       	push	r10
     910:	bf 92       	push	r11
     912:	cf 92       	push	r12
     914:	df 92       	push	r13
     916:	ef 92       	push	r14
     918:	ff 92       	push	r15
     91a:	0f 93       	push	r16
     91c:	1f 93       	push	r17
     91e:	cf 93       	push	r28
     920:	df 93       	push	r29
     922:	cd b7       	in	r28, 0x3d	; 61
     924:	de b7       	in	r29, 0x3e	; 62
     926:	60 97       	sbiw	r28, 0x10	; 16
     928:	0f b6       	in	r0, 0x3f	; 63
     92a:	f8 94       	cli
     92c:	de bf       	out	0x3e, r29	; 62
     92e:	0f be       	out	0x3f, r0	; 63
     930:	cd bf       	out	0x3d, r28	; 61
     932:	1c 01       	movw	r2, r24
     934:	6f 87       	std	Y+15, r22	; 0x0f
     936:	4d 83       	std	Y+5, r20	; 0x05
     938:	29 83       	std	Y+1, r18	; 0x01
     93a:	c6 01       	movw	r24, r12
     93c:	b5 01       	movw	r22, r10
	//correcting rotationangle
	rotationangle*=M_PI/180.0;
     93e:	25 e3       	ldi	r18, 0x35	; 53
     940:	3a ef       	ldi	r19, 0xFA	; 250
     942:	4e e8       	ldi	r20, 0x8E	; 142
     944:	5c e3       	ldi	r21, 0x3C	; 60
     946:	0e 94 15 1e 	call	0x3c2a	; 0x3c2a <__mulsf3>
     94a:	4b 01       	movw	r8, r22
     94c:	5c 01       	movw	r10, r24
	baseangle*=M_PI/180.0;
     94e:	25 e3       	ldi	r18, 0x35	; 53
     950:	3a ef       	ldi	r19, 0xFA	; 250
     952:	4e e8       	ldi	r20, 0x8E	; 142
     954:	5c e3       	ldi	r21, 0x3C	; 60
     956:	c8 01       	movw	r24, r16
     958:	b7 01       	movw	r22, r14
     95a:	0e 94 15 1e 	call	0x3c2a	; 0x3c2a <__mulsf3>
     95e:	6e 83       	std	Y+6, r22	; 0x06
     960:	7f 83       	std	Y+7, r23	; 0x07
     962:	88 87       	std	Y+8, r24	; 0x08
     964:	99 87       	std	Y+9, r25	; 0x09
	//draw baseline
	draw_line(basecenter_x,basecenter_y,baselength/2,rotationangle);
     966:	79 80       	ldd	r7, Y+1	; 0x01
     968:	76 94       	lsr	r7
     96a:	85 01       	movw	r16, r10
     96c:	74 01       	movw	r14, r8
     96e:	27 2d       	mov	r18, r7
     970:	4d 81       	ldd	r20, Y+5	; 0x05
     972:	6f 85       	ldd	r22, Y+15	; 0x0f
     974:	c1 01       	movw	r24, r2
     976:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <_ZN7Display9draw_lineEhhhf>
	draw_line(basecenter_x,basecenter_y,baselength/2,rotationangle-M_PI);
     97a:	2b ed       	ldi	r18, 0xDB	; 219
     97c:	3f e0       	ldi	r19, 0x0F	; 15
     97e:	49 e4       	ldi	r20, 0x49	; 73
     980:	50 e4       	ldi	r21, 0x40	; 64
     982:	c5 01       	movw	r24, r10
     984:	b4 01       	movw	r22, r8
     986:	0e 94 93 1b 	call	0x3726	; 0x3726 <__subsf3>
     98a:	7b 01       	movw	r14, r22
     98c:	8c 01       	movw	r16, r24
     98e:	27 2d       	mov	r18, r7
     990:	4d 81       	ldd	r20, Y+5	; 0x05
     992:	6f 85       	ldd	r22, Y+15	; 0x0f
     994:	c1 01       	movw	r24, r2
     996:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <_ZN7Display9draw_lineEhhhf>
	//draw midleline
	uint8_t middlelength=baselength/2*tan(baseangle);
     99a:	6e 81       	ldd	r22, Y+6	; 0x06
     99c:	7f 81       	ldd	r23, Y+7	; 0x07
     99e:	88 85       	ldd	r24, Y+8	; 0x08
     9a0:	99 85       	ldd	r25, Y+9	; 0x09
     9a2:	0e 94 81 1e 	call	0x3d02	; 0x3d02 <tan>
     9a6:	6b 01       	movw	r12, r22
     9a8:	7c 01       	movw	r14, r24
     9aa:	67 2d       	mov	r22, r7
     9ac:	70 e0       	ldi	r23, 0x00	; 0
     9ae:	80 e0       	ldi	r24, 0x00	; 0
     9b0:	90 e0       	ldi	r25, 0x00	; 0
     9b2:	0e 94 fc 1c 	call	0x39f8	; 0x39f8 <__floatsisf>
     9b6:	a7 01       	movw	r20, r14
     9b8:	96 01       	movw	r18, r12
     9ba:	0e 94 15 1e 	call	0x3c2a	; 0x3c2a <__mulsf3>
     9be:	0e 94 ce 1c 	call	0x399c	; 0x399c <__fixunssfsi>
     9c2:	68 8b       	std	Y+16, r22	; 0x10
	draw_line(basecenter_x,basecenter_y,middlelength,rotationangle-M_PI_2);
     9c4:	2b ed       	ldi	r18, 0xDB	; 219
     9c6:	3f e0       	ldi	r19, 0x0F	; 15
     9c8:	49 ec       	ldi	r20, 0xC9	; 201
     9ca:	5f e3       	ldi	r21, 0x3F	; 63
     9cc:	c5 01       	movw	r24, r10
     9ce:	b4 01       	movw	r22, r8
     9d0:	0e 94 93 1b 	call	0x3726	; 0x3726 <__subsf3>
     9d4:	6a 87       	std	Y+10, r22	; 0x0a
     9d6:	7b 87       	std	Y+11, r23	; 0x0b
     9d8:	8c 87       	std	Y+12, r24	; 0x0c
     9da:	9d 87       	std	Y+13, r25	; 0x0d
     9dc:	7b 01       	movw	r14, r22
     9de:	8c 01       	movw	r16, r24
     9e0:	28 89       	ldd	r18, Y+16	; 0x10
     9e2:	4d 81       	ldd	r20, Y+5	; 0x05
     9e4:	6f 85       	ldd	r22, Y+15	; 0x0f
     9e6:	c1 01       	movw	r24, r2
     9e8:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <_ZN7Display9draw_lineEhhhf>
	//draw left arm
	uint8_t lengtharm=baselength/(2*cos(baseangle));
     9ec:	6e 81       	ldd	r22, Y+6	; 0x06
     9ee:	7f 81       	ldd	r23, Y+7	; 0x07
     9f0:	88 85       	ldd	r24, Y+8	; 0x08
     9f2:	99 85       	ldd	r25, Y+9	; 0x09
     9f4:	0e 94 5e 1c 	call	0x38bc	; 0x38bc <cos>
     9f8:	6b 01       	movw	r12, r22
     9fa:	7c 01       	movw	r14, r24
     9fc:	29 81       	ldd	r18, Y+1	; 0x01
     9fe:	62 2f       	mov	r22, r18
     a00:	70 e0       	ldi	r23, 0x00	; 0
     a02:	80 e0       	ldi	r24, 0x00	; 0
     a04:	90 e0       	ldi	r25, 0x00	; 0
     a06:	0e 94 fc 1c 	call	0x39f8	; 0x39f8 <__floatsisf>
     a0a:	2b 01       	movw	r4, r22
     a0c:	3c 01       	movw	r6, r24
     a0e:	a7 01       	movw	r20, r14
     a10:	96 01       	movw	r18, r12
     a12:	c7 01       	movw	r24, r14
     a14:	b6 01       	movw	r22, r12
     a16:	0e 94 94 1b 	call	0x3728	; 0x3728 <__addsf3>
     a1a:	9b 01       	movw	r18, r22
     a1c:	ac 01       	movw	r20, r24
     a1e:	c3 01       	movw	r24, r6
     a20:	b2 01       	movw	r22, r4
     a22:	0e 94 61 1c 	call	0x38c2	; 0x38c2 <__divsf3>
     a26:	0e 94 ce 1c 	call	0x399c	; 0x399c <__fixunssfsi>
     a2a:	6e 87       	std	Y+14, r22	; 0x0e
	uint8_t sx = basecenter_x-middlelength*cos(rotationangle-M_PI_2);
     a2c:	e8 89       	ldd	r30, Y+16	; 0x10
     a2e:	6e 2f       	mov	r22, r30
     a30:	70 e0       	ldi	r23, 0x00	; 0
     a32:	80 e0       	ldi	r24, 0x00	; 0
     a34:	90 e0       	ldi	r25, 0x00	; 0
     a36:	0e 94 fc 1c 	call	0x39f8	; 0x39f8 <__floatsisf>
     a3a:	69 83       	std	Y+1, r22	; 0x01
     a3c:	7a 83       	std	Y+2, r23	; 0x02
     a3e:	8b 83       	std	Y+3, r24	; 0x03
     a40:	9c 83       	std	Y+4, r25	; 0x04
     a42:	6a 85       	ldd	r22, Y+10	; 0x0a
     a44:	7b 85       	ldd	r23, Y+11	; 0x0b
     a46:	8c 85       	ldd	r24, Y+12	; 0x0c
     a48:	9d 85       	ldd	r25, Y+13	; 0x0d
     a4a:	0e 94 5e 1c 	call	0x38bc	; 0x38bc <cos>
     a4e:	6b 01       	movw	r12, r22
     a50:	7c 01       	movw	r14, r24
     a52:	ff 85       	ldd	r31, Y+15	; 0x0f
     a54:	6f 2f       	mov	r22, r31
     a56:	70 e0       	ldi	r23, 0x00	; 0
     a58:	80 e0       	ldi	r24, 0x00	; 0
     a5a:	90 e0       	ldi	r25, 0x00	; 0
     a5c:	0e 94 fc 1c 	call	0x39f8	; 0x39f8 <__floatsisf>
     a60:	2b 01       	movw	r4, r22
     a62:	3c 01       	movw	r6, r24
     a64:	a7 01       	movw	r20, r14
     a66:	96 01       	movw	r18, r12
     a68:	69 81       	ldd	r22, Y+1	; 0x01
     a6a:	7a 81       	ldd	r23, Y+2	; 0x02
     a6c:	8b 81       	ldd	r24, Y+3	; 0x03
     a6e:	9c 81       	ldd	r25, Y+4	; 0x04
     a70:	0e 94 15 1e 	call	0x3c2a	; 0x3c2a <__mulsf3>
     a74:	9b 01       	movw	r18, r22
     a76:	ac 01       	movw	r20, r24
     a78:	c3 01       	movw	r24, r6
     a7a:	b2 01       	movw	r22, r4
     a7c:	0e 94 93 1b 	call	0x3726	; 0x3726 <__subsf3>
     a80:	0e 94 ce 1c 	call	0x399c	; 0x399c <__fixunssfsi>
     a84:	6f 87       	std	Y+15, r22	; 0x0f
	uint8_t sy = basecenter_y+middlelength*sin(rotationangle-M_PI_2);
     a86:	6a 85       	ldd	r22, Y+10	; 0x0a
     a88:	7b 85       	ldd	r23, Y+11	; 0x0b
     a8a:	8c 85       	ldd	r24, Y+12	; 0x0c
     a8c:	9d 85       	ldd	r25, Y+13	; 0x0d
     a8e:	0e 94 78 1e 	call	0x3cf0	; 0x3cf0 <sin>
     a92:	6b 01       	movw	r12, r22
     a94:	7c 01       	movw	r14, r24
     a96:	2d 81       	ldd	r18, Y+5	; 0x05
     a98:	62 2f       	mov	r22, r18
     a9a:	70 e0       	ldi	r23, 0x00	; 0
     a9c:	80 e0       	ldi	r24, 0x00	; 0
     a9e:	90 e0       	ldi	r25, 0x00	; 0
     aa0:	0e 94 fc 1c 	call	0x39f8	; 0x39f8 <__floatsisf>
     aa4:	2b 01       	movw	r4, r22
     aa6:	3c 01       	movw	r6, r24
     aa8:	a7 01       	movw	r20, r14
     aaa:	96 01       	movw	r18, r12
     aac:	69 81       	ldd	r22, Y+1	; 0x01
     aae:	7a 81       	ldd	r23, Y+2	; 0x02
     ab0:	8b 81       	ldd	r24, Y+3	; 0x03
     ab2:	9c 81       	ldd	r25, Y+4	; 0x04
     ab4:	0e 94 15 1e 	call	0x3c2a	; 0x3c2a <__mulsf3>
     ab8:	9b 01       	movw	r18, r22
     aba:	ac 01       	movw	r20, r24
     abc:	c3 01       	movw	r24, r6
     abe:	b2 01       	movw	r22, r4
     ac0:	0e 94 94 1b 	call	0x3728	; 0x3728 <__addsf3>
     ac4:	0e 94 ce 1c 	call	0x399c	; 0x399c <__fixunssfsi>
     ac8:	d6 2e       	mov	r13, r22
	draw_line(sx,sy,lengtharm,baseangle+rotationangle);
     aca:	a5 01       	movw	r20, r10
     acc:	94 01       	movw	r18, r8
     ace:	6e 81       	ldd	r22, Y+6	; 0x06
     ad0:	7f 81       	ldd	r23, Y+7	; 0x07
     ad2:	88 85       	ldd	r24, Y+8	; 0x08
     ad4:	99 85       	ldd	r25, Y+9	; 0x09
     ad6:	0e 94 94 1b 	call	0x3728	; 0x3728 <__addsf3>
     ada:	7b 01       	movw	r14, r22
     adc:	8c 01       	movw	r16, r24
     ade:	2e 85       	ldd	r18, Y+14	; 0x0e
     ae0:	4d 2d       	mov	r20, r13
     ae2:	6f 85       	ldd	r22, Y+15	; 0x0f
     ae4:	c1 01       	movw	r24, r2
     ae6:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <_ZN7Display9draw_lineEhhhf>
	//draw right arm
	draw_line(sx,sy,lengtharm,-baseangle+rotationangle-M_PI);
     aea:	2e 81       	ldd	r18, Y+6	; 0x06
     aec:	3f 81       	ldd	r19, Y+7	; 0x07
     aee:	48 85       	ldd	r20, Y+8	; 0x08
     af0:	59 85       	ldd	r21, Y+9	; 0x09
     af2:	c5 01       	movw	r24, r10
     af4:	b4 01       	movw	r22, r8
     af6:	0e 94 93 1b 	call	0x3726	; 0x3726 <__subsf3>
     afa:	2b ed       	ldi	r18, 0xDB	; 219
     afc:	3f e0       	ldi	r19, 0x0F	; 15
     afe:	49 e4       	ldi	r20, 0x49	; 73
     b00:	50 e4       	ldi	r21, 0x40	; 64
     b02:	0e 94 93 1b 	call	0x3726	; 0x3726 <__subsf3>
     b06:	7b 01       	movw	r14, r22
     b08:	8c 01       	movw	r16, r24
     b0a:	2e 85       	ldd	r18, Y+14	; 0x0e
     b0c:	4d 2d       	mov	r20, r13
     b0e:	6f 85       	ldd	r22, Y+15	; 0x0f
     b10:	c1 01       	movw	r24, r2
     b12:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <_ZN7Display9draw_lineEhhhf>
}
     b16:	60 96       	adiw	r28, 0x10	; 16
     b18:	0f b6       	in	r0, 0x3f	; 63
     b1a:	f8 94       	cli
     b1c:	de bf       	out	0x3e, r29	; 62
     b1e:	0f be       	out	0x3f, r0	; 63
     b20:	cd bf       	out	0x3d, r28	; 61
     b22:	df 91       	pop	r29
     b24:	cf 91       	pop	r28
     b26:	1f 91       	pop	r17
     b28:	0f 91       	pop	r16
     b2a:	ff 90       	pop	r15
     b2c:	ef 90       	pop	r14
     b2e:	df 90       	pop	r13
     b30:	cf 90       	pop	r12
     b32:	bf 90       	pop	r11
     b34:	af 90       	pop	r10
     b36:	9f 90       	pop	r9
     b38:	8f 90       	pop	r8
     b3a:	7f 90       	pop	r7
     b3c:	6f 90       	pop	r6
     b3e:	5f 90       	pop	r5
     b40:	4f 90       	pop	r4
     b42:	3f 90       	pop	r3
     b44:	2f 90       	pop	r2
     b46:	08 95       	ret

00000b48 <_ZN7Display9draw_ASCIEhhh>:

void Display::draw_ASCI(uint8_t sym,uint8_t x, uint8_t y){
     b48:	0f 93       	push	r16
     b4a:	1f 93       	push	r17
     b4c:	cf 93       	push	r28
     b4e:	df 93       	push	r29
	if(sym!=' ' && sym>=33){
     b50:	61 32       	cpi	r22, 0x21	; 33
     b52:	08 f4       	brcc	.+2      	; 0xb56 <_ZN7Display9draw_ASCIEhhh+0xe>
     b54:	42 c0       	rjmp	.+132    	; 0xbda <_ZN7Display9draw_ASCIEhhh+0x92>
		sym-=33;
		uint16_t symbol;
		for(uint8_t i = 0; i < 5; i++){
			symbol = pgm_read_byte(&font5x8[sym][i]);
			symbol = symbol << y%8;
			Displayframe[x+(y/8)*SSD1306_WIDTH+i] |=(uint8_t) (symbol & 0x00FF);
     b56:	a4 2f       	mov	r26, r20
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	02 2f       	mov	r16, r18
     b5c:	06 95       	lsr	r16
     b5e:	06 95       	lsr	r16
     b60:	06 95       	lsr	r16
     b62:	30 e8       	ldi	r19, 0x80	; 128
     b64:	03 9f       	mul	r16, r19
     b66:	80 01       	movw	r16, r0
     b68:	11 24       	eor	r1, r1
     b6a:	ed 01       	movw	r28, r26
     b6c:	c0 0f       	add	r28, r16
     b6e:	d1 1f       	adc	r29, r17
			if(((symbol&0xFF00)>>8)==0){
				Displayframe[x+(y/8+1)*SSD1306_WIDTH+i] |= 0;
			}
			else {
				Displayframe[x+(y/8+1)*SSD1306_WIDTH+i] |= (uint8_t) ((symbol & 0xFF00)>>8);
     b70:	00 58       	subi	r16, 0x80	; 128
     b72:	1f 4f       	sbci	r17, 0xFF	; 255
     b74:	0a 0f       	add	r16, r26
     b76:	1b 1f       	adc	r17, r27
	draw_line(sx,sy,lengtharm,-baseangle+rotationangle-M_PI);
}

void Display::draw_ASCI(uint8_t sym,uint8_t x, uint8_t y){
	if(sym!=' ' && sym>=33){
		sym-=33;
     b78:	61 52       	subi	r22, 0x21	; 33
     b7a:	46 2f       	mov	r20, r22
     b7c:	50 e0       	ldi	r21, 0x00	; 0
     b7e:	fa 01       	movw	r30, r20
     b80:	ee 0f       	add	r30, r30
     b82:	ff 1f       	adc	r31, r31
     b84:	ee 0f       	add	r30, r30
     b86:	ff 1f       	adc	r31, r31
     b88:	e4 0f       	add	r30, r20
     b8a:	f5 1f       	adc	r31, r21
     b8c:	e6 5c       	subi	r30, 0xC6	; 198
     b8e:	fd 4f       	sbci	r31, 0xFD	; 253
     b90:	dc 01       	movw	r26, r24
     b92:	ac 0f       	add	r26, r28
     b94:	bd 1f       	adc	r27, r29
     b96:	ae 01       	movw	r20, r28
     b98:	05 96       	adiw	r24, 0x05	; 5
     b9a:	8c 0f       	add	r24, r28
     b9c:	9d 1f       	adc	r25, r29
		uint16_t symbol;
		for(uint8_t i = 0; i < 5; i++){
			symbol = pgm_read_byte(&font5x8[sym][i]);
			symbol = symbol << y%8;
     b9e:	27 70       	andi	r18, 0x07	; 7
void Display::draw_ASCI(uint8_t sym,uint8_t x, uint8_t y){
	if(sym!=' ' && sym>=33){
		sym-=33;
		uint16_t symbol;
		for(uint8_t i = 0; i < 5; i++){
			symbol = pgm_read_byte(&font5x8[sym][i]);
     ba0:	64 91       	lpm	r22, Z
     ba2:	70 e0       	ldi	r23, 0x00	; 0
			symbol = symbol << y%8;
     ba4:	02 2e       	mov	r0, r18
     ba6:	02 c0       	rjmp	.+4      	; 0xbac <_ZN7Display9draw_ASCIEhhh+0x64>
     ba8:	66 0f       	add	r22, r22
     baa:	77 1f       	adc	r23, r23
     bac:	0a 94       	dec	r0
     bae:	e2 f7       	brpl	.-8      	; 0xba8 <_ZN7Display9draw_ASCIEhhh+0x60>
			Displayframe[x+(y/8)*SSD1306_WIDTH+i] |=(uint8_t) (symbol & 0x00FF);
     bb0:	3c 91       	ld	r19, X
     bb2:	36 2b       	or	r19, r22
     bb4:	3c 93       	st	X, r19
			if(((symbol&0xFF00)>>8)==0){
     bb6:	67 2f       	mov	r22, r23
     bb8:	77 27       	eor	r23, r23
     bba:	61 15       	cp	r22, r1
     bbc:	71 05       	cpc	r23, r1
     bbe:	41 f0       	breq	.+16     	; 0xbd0 <_ZN7Display9draw_ASCIEhhh+0x88>
     bc0:	ed 01       	movw	r28, r26
     bc2:	c4 1b       	sub	r28, r20
     bc4:	d5 0b       	sbc	r29, r21
     bc6:	c0 0f       	add	r28, r16
     bc8:	d1 1f       	adc	r29, r17
				Displayframe[x+(y/8+1)*SSD1306_WIDTH+i] |= 0;
			}
			else {
				Displayframe[x+(y/8+1)*SSD1306_WIDTH+i] |= (uint8_t) ((symbol & 0xFF00)>>8);
     bca:	38 81       	ld	r19, Y
     bcc:	63 2b       	or	r22, r19
     bce:	68 83       	st	Y, r22
     bd0:	31 96       	adiw	r30, 0x01	; 1
     bd2:	11 96       	adiw	r26, 0x01	; 1

void Display::draw_ASCI(uint8_t sym,uint8_t x, uint8_t y){
	if(sym!=' ' && sym>=33){
		sym-=33;
		uint16_t symbol;
		for(uint8_t i = 0; i < 5; i++){
     bd4:	a8 17       	cp	r26, r24
     bd6:	b9 07       	cpc	r27, r25
     bd8:	19 f7       	brne	.-58     	; 0xba0 <_ZN7Display9draw_ASCIEhhh+0x58>
	else{
		for(uint8_t i = 0; i < 7; i++){
			Displayframe[x+(y/8)*SSD1306_WIDTH+i] |= 0;
		}
	}
}
     bda:	df 91       	pop	r29
     bdc:	cf 91       	pop	r28
     bde:	1f 91       	pop	r17
     be0:	0f 91       	pop	r16
     be2:	08 95       	ret

00000be4 <_ZN7Display16draw_number16x16Ehhh>:

void Display::draw_number16x16(uint8_t number, uint8_t x, uint8_t y){
     be4:	ef 92       	push	r14
     be6:	ff 92       	push	r15
     be8:	0f 93       	push	r16
     bea:	1f 93       	push	r17
     bec:	cf 93       	push	r28
     bee:	df 93       	push	r29
	uint16_t symbol;
	if(number>=0 && number<10){
     bf0:	6a 30       	cpi	r22, 0x0A	; 10
     bf2:	08 f0       	brcs	.+2      	; 0xbf6 <_ZN7Display16draw_number16x16Ehhh+0x12>
     bf4:	66 c0       	rjmp	.+204    	; 0xcc2 <_ZN7Display16draw_number16x16Ehhh+0xde>
		for(uint8_t i = 0; i < 32;i++){
			symbol = pgm_read_byte(&digits16x16[number][i]);
			symbol = symbol << y%8;
			if(i<16){
				Displayframe[x+(y/8)*SSD1306_WIDTH+i] |=(uint8_t) (symbol & 0x00FF);
     bf6:	50 e0       	ldi	r21, 0x00	; 0
     bf8:	02 2f       	mov	r16, r18
     bfa:	06 95       	lsr	r16
     bfc:	06 95       	lsr	r16
     bfe:	06 95       	lsr	r16
     c00:	10 e0       	ldi	r17, 0x00	; 0
     c02:	d8 01       	movw	r26, r16
     c04:	b6 95       	lsr	r27
     c06:	ba 2f       	mov	r27, r26
     c08:	aa 27       	eor	r26, r26
     c0a:	b7 95       	ror	r27
     c0c:	a7 95       	ror	r26
				if(((symbol&0xFF00)>>8)==0){
					Displayframe[x+(y/8+1)*SSD1306_WIDTH+i] |= 0;
				}
				else {
					Displayframe[x+(y/8+1)*SSD1306_WIDTH+i] |= (uint8_t) ((symbol & 0xFF00)>>8);
     c0e:	0f 5f       	subi	r16, 0xFF	; 255
     c10:	1f 4f       	sbci	r17, 0xFF	; 255
				}
			}
			else {
				Displayframe[x+(y/8+1)*SSD1306_WIDTH+(i-16)] |= (uint8_t) (symbol & 0x00FF);
     c12:	16 95       	lsr	r17
     c14:	10 2f       	mov	r17, r16
     c16:	00 27       	eor	r16, r16
     c18:	17 95       	ror	r17
     c1a:	07 95       	ror	r16
				Displayframe[x+(y/8)*SSD1306_WIDTH+i] |=(uint8_t) (symbol & 0x00FF);
				if(((symbol&0xFF00)>>8)==0){
					Displayframe[x+(y/8+1)*SSD1306_WIDTH+i] |= 0;
				}
				else {
					Displayframe[x+(y/8+1)*SSD1306_WIDTH+i] |= (uint8_t) ((symbol & 0xFF00)>>8);
     c1c:	7d 01       	movw	r14, r26
     c1e:	30 e8       	ldi	r19, 0x80	; 128
     c20:	e3 0e       	add	r14, r19
     c22:	f1 1c       	adc	r15, r1
     c24:	e4 0e       	add	r14, r20
     c26:	f5 1e       	adc	r15, r21
     c28:	e8 0e       	add	r14, r24
     c2a:	f9 1e       	adc	r15, r25
				}
			}
			else {
				Displayframe[x+(y/8+1)*SSD1306_WIDTH+(i-16)] |= (uint8_t) (symbol & 0x00FF);
     c2c:	ea 01       	movw	r28, r20
     c2e:	c0 0f       	add	r28, r16
     c30:	d1 1f       	adc	r29, r17
     c32:	60 97       	sbiw	r28, 0x10	; 16
     c34:	c8 0f       	add	r28, r24
     c36:	d9 1f       	adc	r29, r25
				if(((symbol&0xFF00)>>8)==0){
					Displayframe[x+(y/8+2)*SSD1306_WIDTH+(i-16)] |= 0;
				}
				else {
					Displayframe[x+(y/8+2)*SSD1306_WIDTH+(i-16)] |= (uint8_t) ((symbol & 0xFF00)>>8);
     c38:	04 0f       	add	r16, r20
     c3a:	15 1f       	adc	r17, r21
     c3c:	00 59       	subi	r16, 0x90	; 144
     c3e:	1f 4f       	sbci	r17, 0xFF	; 255
     c40:	08 0f       	add	r16, r24
     c42:	19 1f       	adc	r17, r25
	if(number>=0 && number<10){
		for(uint8_t i = 0; i < 32;i++){
			symbol = pgm_read_byte(&digits16x16[number][i]);
			symbol = symbol << y%8;
			if(i<16){
				Displayframe[x+(y/8)*SSD1306_WIDTH+i] |=(uint8_t) (symbol & 0x00FF);
     c44:	a4 0f       	add	r26, r20
     c46:	b5 1f       	adc	r27, r21
     c48:	a8 0f       	add	r26, r24
     c4a:	b9 1f       	adc	r27, r25
     c4c:	e0 e2       	ldi	r30, 0x20	; 32
     c4e:	6e 9f       	mul	r22, r30
     c50:	c0 01       	movw	r24, r0
     c52:	11 24       	eor	r1, r1
				Displayframe[x+(y/8+1)*SSD1306_WIDTH+(i-16)] |= (uint8_t) (symbol & 0x00FF);
				if(((symbol&0xFF00)>>8)==0){
					Displayframe[x+(y/8+2)*SSD1306_WIDTH+(i-16)] |= 0;
				}
				else {
					Displayframe[x+(y/8+2)*SSD1306_WIDTH+(i-16)] |= (uint8_t) ((symbol & 0xFF00)>>8);
     c54:	40 e0       	ldi	r20, 0x00	; 0
     c56:	50 e0       	ldi	r21, 0x00	; 0
     c58:	86 50       	subi	r24, 0x06	; 6
     c5a:	9f 4f       	sbci	r25, 0xFF	; 255
void Display::draw_number16x16(uint8_t number, uint8_t x, uint8_t y){
	uint16_t symbol;
	if(number>=0 && number<10){
		for(uint8_t i = 0; i < 32;i++){
			symbol = pgm_read_byte(&digits16x16[number][i]);
			symbol = symbol << y%8;
     c5c:	27 70       	andi	r18, 0x07	; 7
     c5e:	fc 01       	movw	r30, r24
     c60:	e4 0f       	add	r30, r20
     c62:	f5 1f       	adc	r31, r21

void Display::draw_number16x16(uint8_t number, uint8_t x, uint8_t y){
	uint16_t symbol;
	if(number>=0 && number<10){
		for(uint8_t i = 0; i < 32;i++){
			symbol = pgm_read_byte(&digits16x16[number][i]);
     c64:	e4 91       	lpm	r30, Z
     c66:	f0 e0       	ldi	r31, 0x00	; 0
			symbol = symbol << y%8;
     c68:	02 2e       	mov	r0, r18
     c6a:	02 c0       	rjmp	.+4      	; 0xc70 <_ZN7Display16draw_number16x16Ehhh+0x8c>
     c6c:	ee 0f       	add	r30, r30
     c6e:	ff 1f       	adc	r31, r31
     c70:	0a 94       	dec	r0
     c72:	e2 f7       	brpl	.-8      	; 0xc6c <_ZN7Display16draw_number16x16Ehhh+0x88>
			if(i<16){
     c74:	40 31       	cpi	r20, 0x10	; 16
     c76:	68 f4       	brcc	.+26     	; 0xc92 <_ZN7Display16draw_number16x16Ehhh+0xae>
				Displayframe[x+(y/8)*SSD1306_WIDTH+i] |=(uint8_t) (symbol & 0x00FF);
     c78:	3c 91       	ld	r19, X
     c7a:	3e 2b       	or	r19, r30
     c7c:	3c 93       	st	X, r19
				if(((symbol&0xFF00)>>8)==0){
     c7e:	6f 2f       	mov	r22, r31
     c80:	77 27       	eor	r23, r23
     c82:	61 15       	cp	r22, r1
     c84:	71 05       	cpc	r23, r1
     c86:	89 f0       	breq	.+34     	; 0xcaa <_ZN7Display16draw_number16x16Ehhh+0xc6>
					Displayframe[x+(y/8+1)*SSD1306_WIDTH+i] |= 0;
				}
				else {
					Displayframe[x+(y/8+1)*SSD1306_WIDTH+i] |= (uint8_t) ((symbol & 0xFF00)>>8);
     c88:	f7 01       	movw	r30, r14
     c8a:	30 81       	ld	r19, Z
     c8c:	36 2b       	or	r19, r22
     c8e:	30 83       	st	Z, r19
     c90:	0c c0       	rjmp	.+24     	; 0xcaa <_ZN7Display16draw_number16x16Ehhh+0xc6>
				}
			}
			else {
				Displayframe[x+(y/8+1)*SSD1306_WIDTH+(i-16)] |= (uint8_t) (symbol & 0x00FF);
     c92:	38 81       	ld	r19, Y
     c94:	3e 2b       	or	r19, r30
     c96:	38 83       	st	Y, r19
				if(((symbol&0xFF00)>>8)==0){
     c98:	6f 2f       	mov	r22, r31
     c9a:	77 27       	eor	r23, r23
     c9c:	61 15       	cp	r22, r1
     c9e:	71 05       	cpc	r23, r1
     ca0:	21 f0       	breq	.+8      	; 0xcaa <_ZN7Display16draw_number16x16Ehhh+0xc6>
					Displayframe[x+(y/8+2)*SSD1306_WIDTH+(i-16)] |= 0;
				}
				else {
					Displayframe[x+(y/8+2)*SSD1306_WIDTH+(i-16)] |= (uint8_t) ((symbol & 0xFF00)>>8);
     ca2:	f8 01       	movw	r30, r16
     ca4:	30 81       	ld	r19, Z
     ca6:	36 2b       	or	r19, r22
     ca8:	30 83       	st	Z, r19
     caa:	4f 5f       	subi	r20, 0xFF	; 255
     cac:	5f 4f       	sbci	r21, 0xFF	; 255
     cae:	ff ef       	ldi	r31, 0xFF	; 255
     cb0:	ef 1a       	sub	r14, r31
     cb2:	ff 0a       	sbc	r15, r31
     cb4:	21 96       	adiw	r28, 0x01	; 1
     cb6:	0f 5f       	subi	r16, 0xFF	; 255
     cb8:	1f 4f       	sbci	r17, 0xFF	; 255
     cba:	11 96       	adiw	r26, 0x01	; 1
}

void Display::draw_number16x16(uint8_t number, uint8_t x, uint8_t y){
	uint16_t symbol;
	if(number>=0 && number<10){
		for(uint8_t i = 0; i < 32;i++){
     cbc:	40 32       	cpi	r20, 0x20	; 32
     cbe:	51 05       	cpc	r21, r1
     cc0:	71 f6       	brne	.-100    	; 0xc5e <_ZN7Display16draw_number16x16Ehhh+0x7a>
					Displayframe[x+(y/8+2)*SSD1306_WIDTH+(i-16)] |= (uint8_t) ((symbol & 0xFF00)>>8);
				}
			}
		}
	}
}
     cc2:	df 91       	pop	r29
     cc4:	cf 91       	pop	r28
     cc6:	1f 91       	pop	r17
     cc8:	0f 91       	pop	r16
     cca:	ff 90       	pop	r15
     ccc:	ef 90       	pop	r14
     cce:	08 95       	ret

00000cd0 <_ZN7Display6analogEhhh>:

void Display::analog(uint8_t stunde, uint8_t minute, uint8_t sekunde){
     cd0:	2f 92       	push	r2
     cd2:	3f 92       	push	r3
     cd4:	4f 92       	push	r4
     cd6:	5f 92       	push	r5
     cd8:	6f 92       	push	r6
     cda:	7f 92       	push	r7
     cdc:	8f 92       	push	r8
     cde:	9f 92       	push	r9
     ce0:	af 92       	push	r10
     ce2:	bf 92       	push	r11
     ce4:	cf 92       	push	r12
     ce6:	df 92       	push	r13
     ce8:	ef 92       	push	r14
     cea:	ff 92       	push	r15
     cec:	0f 93       	push	r16
     cee:	1f 93       	push	r17
     cf0:	cf 93       	push	r28
     cf2:	df 93       	push	r29
     cf4:	00 d0       	rcall	.+0      	; 0xcf6 <_ZN7Display6analogEhhh+0x26>
     cf6:	1f 92       	push	r1
     cf8:	cd b7       	in	r28, 0x3d	; 61
     cfa:	de b7       	in	r29, 0x3e	; 62
     cfc:	9b 83       	std	Y+3, r25	; 0x03
     cfe:	8a 83       	std	Y+2, r24	; 0x02
     d00:	69 83       	std	Y+1, r22	; 0x01
     d02:	24 2e       	mov	r2, r20
	uint8_t x=0,y=0;
	float winkel=0;

	//Berechnen des Sekundenzeigers
	for(uint8_t i=0;i<r;i++){
		winkel=(sekunde*6.0)*M_PI/180.0-M_PI/2.0;
     d04:	62 2f       	mov	r22, r18
     d06:	70 e0       	ldi	r23, 0x00	; 0
     d08:	80 e0       	ldi	r24, 0x00	; 0
     d0a:	90 e0       	ldi	r25, 0x00	; 0
     d0c:	0e 94 fc 1c 	call	0x39f8	; 0x39f8 <__floatsisf>
     d10:	20 e0       	ldi	r18, 0x00	; 0
     d12:	30 e0       	ldi	r19, 0x00	; 0
     d14:	40 ec       	ldi	r20, 0xC0	; 192
     d16:	50 e4       	ldi	r21, 0x40	; 64
     d18:	0e 94 15 1e 	call	0x3c2a	; 0x3c2a <__mulsf3>
     d1c:	2b ed       	ldi	r18, 0xDB	; 219
     d1e:	3f e0       	ldi	r19, 0x0F	; 15
     d20:	49 e4       	ldi	r20, 0x49	; 73
     d22:	50 e4       	ldi	r21, 0x40	; 64
     d24:	0e 94 15 1e 	call	0x3c2a	; 0x3c2a <__mulsf3>
     d28:	20 e0       	ldi	r18, 0x00	; 0
     d2a:	30 e0       	ldi	r19, 0x00	; 0
     d2c:	44 e3       	ldi	r20, 0x34	; 52
     d2e:	53 e4       	ldi	r21, 0x43	; 67
     d30:	0e 94 61 1c 	call	0x38c2	; 0x38c2 <__divsf3>
     d34:	2b ed       	ldi	r18, 0xDB	; 219
     d36:	3f e0       	ldi	r19, 0x0F	; 15
     d38:	49 ec       	ldi	r20, 0xC9	; 201
     d3a:	5f e3       	ldi	r21, 0x3F	; 63
     d3c:	0e 94 93 1b 	call	0x3726	; 0x3726 <__subsf3>
     d40:	6b 01       	movw	r12, r22
     d42:	7c 01       	movw	r14, r24
		x=(uint8_t) i*cos(winkel)+Px;
     d44:	0e 94 5e 1c 	call	0x38bc	; 0x38bc <cos>
     d48:	2b 01       	movw	r4, r22
     d4a:	3c 01       	movw	r6, r24
		y=(uint8_t) i*sin(winkel)+Py;
     d4c:	c7 01       	movw	r24, r14
     d4e:	b6 01       	movw	r22, r12
     d50:	0e 94 78 1e 	call	0x3cf0	; 0x3cf0 <sin>
     d54:	4b 01       	movw	r8, r22
     d56:	5c 01       	movw	r10, r24
     d58:	00 e0       	ldi	r16, 0x00	; 0
     d5a:	10 e0       	ldi	r17, 0x00	; 0
	float winkel=0;

	//Berechnen des Sekundenzeigers
	for(uint8_t i=0;i<r;i++){
		winkel=(sekunde*6.0)*M_PI/180.0-M_PI/2.0;
		x=(uint8_t) i*cos(winkel)+Px;
     d5c:	b8 01       	movw	r22, r16
     d5e:	88 27       	eor	r24, r24
     d60:	77 fd       	sbrc	r23, 7
     d62:	80 95       	com	r24
     d64:	98 2f       	mov	r25, r24
     d66:	0e 94 fc 1c 	call	0x39f8	; 0x39f8 <__floatsisf>
     d6a:	6b 01       	movw	r12, r22
     d6c:	7c 01       	movw	r14, r24
		y=(uint8_t) i*sin(winkel)+Py;
     d6e:	a5 01       	movw	r20, r10
     d70:	94 01       	movw	r18, r8
     d72:	0e 94 15 1e 	call	0x3c2a	; 0x3c2a <__mulsf3>
     d76:	20 e0       	ldi	r18, 0x00	; 0
     d78:	30 e0       	ldi	r19, 0x00	; 0
     d7a:	48 ef       	ldi	r20, 0xF8	; 248
     d7c:	51 e4       	ldi	r21, 0x41	; 65
     d7e:	0e 94 94 1b 	call	0x3728	; 0x3728 <__addsf3>
     d82:	0e 94 ce 1c 	call	0x399c	; 0x399c <__fixunssfsi>
     d86:	36 2e       	mov	r3, r22
	float winkel=0;

	//Berechnen des Sekundenzeigers
	for(uint8_t i=0;i<r;i++){
		winkel=(sekunde*6.0)*M_PI/180.0-M_PI/2.0;
		x=(uint8_t) i*cos(winkel)+Px;
     d88:	a3 01       	movw	r20, r6
     d8a:	92 01       	movw	r18, r4
     d8c:	c7 01       	movw	r24, r14
     d8e:	b6 01       	movw	r22, r12
     d90:	0e 94 15 1e 	call	0x3c2a	; 0x3c2a <__mulsf3>
     d94:	20 e0       	ldi	r18, 0x00	; 0
     d96:	30 e0       	ldi	r19, 0x00	; 0
     d98:	48 ef       	ldi	r20, 0xF8	; 248
     d9a:	51 e4       	ldi	r21, 0x41	; 65
     d9c:	0e 94 94 1b 	call	0x3728	; 0x3728 <__addsf3>
     da0:	0e 94 ce 1c 	call	0x399c	; 0x399c <__fixunssfsi>
		y=(uint8_t) i*sin(winkel)+Py;

		drawPixel(x,y,0);
     da4:	20 e0       	ldi	r18, 0x00	; 0
     da6:	43 2d       	mov	r20, r3
     da8:	8a 81       	ldd	r24, Y+2	; 0x02
     daa:	9b 81       	ldd	r25, Y+3	; 0x03
     dac:	0e 94 a2 03 	call	0x744	; 0x744 <_ZN7Display9drawPixelEhhh>
     db0:	0f 5f       	subi	r16, 0xFF	; 255
     db2:	1f 4f       	sbci	r17, 0xFF	; 255
	uint8_t Py=32-1;
	uint8_t x=0,y=0;
	float winkel=0;

	//Berechnen des Sekundenzeigers
	for(uint8_t i=0;i<r;i++){
     db4:	09 31       	cpi	r16, 0x19	; 25
     db6:	11 05       	cpc	r17, r1
     db8:	89 f6       	brne	.-94     	; 0xd5c <_ZN7Display6analogEhhh+0x8c>
	}

	r=21;
	//Berechnen des Minutenzeigers
	for(uint8_t i=0;i<r;i++){
		winkel=(minute*6.0)*M_PI/180.0-M_PI/2.0;
     dba:	62 2d       	mov	r22, r2
     dbc:	70 e0       	ldi	r23, 0x00	; 0
     dbe:	80 e0       	ldi	r24, 0x00	; 0
     dc0:	90 e0       	ldi	r25, 0x00	; 0
     dc2:	0e 94 fc 1c 	call	0x39f8	; 0x39f8 <__floatsisf>
     dc6:	20 e0       	ldi	r18, 0x00	; 0
     dc8:	30 e0       	ldi	r19, 0x00	; 0
     dca:	40 ec       	ldi	r20, 0xC0	; 192
     dcc:	50 e4       	ldi	r21, 0x40	; 64
     dce:	0e 94 15 1e 	call	0x3c2a	; 0x3c2a <__mulsf3>
     dd2:	2b ed       	ldi	r18, 0xDB	; 219
     dd4:	3f e0       	ldi	r19, 0x0F	; 15
     dd6:	49 e4       	ldi	r20, 0x49	; 73
     dd8:	50 e4       	ldi	r21, 0x40	; 64
     dda:	0e 94 15 1e 	call	0x3c2a	; 0x3c2a <__mulsf3>
     dde:	20 e0       	ldi	r18, 0x00	; 0
     de0:	30 e0       	ldi	r19, 0x00	; 0
     de2:	44 e3       	ldi	r20, 0x34	; 52
     de4:	53 e4       	ldi	r21, 0x43	; 67
     de6:	0e 94 61 1c 	call	0x38c2	; 0x38c2 <__divsf3>
     dea:	2b ed       	ldi	r18, 0xDB	; 219
     dec:	3f e0       	ldi	r19, 0x0F	; 15
     dee:	49 ec       	ldi	r20, 0xC9	; 201
     df0:	5f e3       	ldi	r21, 0x3F	; 63
     df2:	0e 94 93 1b 	call	0x3726	; 0x3726 <__subsf3>
     df6:	6b 01       	movw	r12, r22
     df8:	7c 01       	movw	r14, r24
		x=(uint8_t) i*cos(winkel)+Px;
     dfa:	0e 94 5e 1c 	call	0x38bc	; 0x38bc <cos>
     dfe:	2b 01       	movw	r4, r22
     e00:	3c 01       	movw	r6, r24
		y=(uint8_t) i*sin(winkel)+Py;
     e02:	c7 01       	movw	r24, r14
     e04:	b6 01       	movw	r22, r12
     e06:	0e 94 78 1e 	call	0x3cf0	; 0x3cf0 <sin>
     e0a:	4b 01       	movw	r8, r22
     e0c:	5c 01       	movw	r10, r24
     e0e:	00 e0       	ldi	r16, 0x00	; 0
     e10:	10 e0       	ldi	r17, 0x00	; 0

	r=21;
	//Berechnen des Minutenzeigers
	for(uint8_t i=0;i<r;i++){
		winkel=(minute*6.0)*M_PI/180.0-M_PI/2.0;
		x=(uint8_t) i*cos(winkel)+Px;
     e12:	b8 01       	movw	r22, r16
     e14:	88 27       	eor	r24, r24
     e16:	77 fd       	sbrc	r23, 7
     e18:	80 95       	com	r24
     e1a:	98 2f       	mov	r25, r24
     e1c:	0e 94 fc 1c 	call	0x39f8	; 0x39f8 <__floatsisf>
     e20:	6b 01       	movw	r12, r22
     e22:	7c 01       	movw	r14, r24
		y=(uint8_t) i*sin(winkel)+Py;
     e24:	a5 01       	movw	r20, r10
     e26:	94 01       	movw	r18, r8
     e28:	0e 94 15 1e 	call	0x3c2a	; 0x3c2a <__mulsf3>
     e2c:	20 e0       	ldi	r18, 0x00	; 0
     e2e:	30 e0       	ldi	r19, 0x00	; 0
     e30:	48 ef       	ldi	r20, 0xF8	; 248
     e32:	51 e4       	ldi	r21, 0x41	; 65
     e34:	0e 94 94 1b 	call	0x3728	; 0x3728 <__addsf3>
     e38:	0e 94 ce 1c 	call	0x399c	; 0x399c <__fixunssfsi>
     e3c:	36 2e       	mov	r3, r22

	r=21;
	//Berechnen des Minutenzeigers
	for(uint8_t i=0;i<r;i++){
		winkel=(minute*6.0)*M_PI/180.0-M_PI/2.0;
		x=(uint8_t) i*cos(winkel)+Px;
     e3e:	a3 01       	movw	r20, r6
     e40:	92 01       	movw	r18, r4
     e42:	c7 01       	movw	r24, r14
     e44:	b6 01       	movw	r22, r12
     e46:	0e 94 15 1e 	call	0x3c2a	; 0x3c2a <__mulsf3>
     e4a:	20 e0       	ldi	r18, 0x00	; 0
     e4c:	30 e0       	ldi	r19, 0x00	; 0
     e4e:	48 ef       	ldi	r20, 0xF8	; 248
     e50:	51 e4       	ldi	r21, 0x41	; 65
     e52:	0e 94 94 1b 	call	0x3728	; 0x3728 <__addsf3>
     e56:	0e 94 ce 1c 	call	0x399c	; 0x399c <__fixunssfsi>
		y=(uint8_t) i*sin(winkel)+Py;

		drawPixel(x,y,0);
     e5a:	20 e0       	ldi	r18, 0x00	; 0
     e5c:	43 2d       	mov	r20, r3
     e5e:	8a 81       	ldd	r24, Y+2	; 0x02
     e60:	9b 81       	ldd	r25, Y+3	; 0x03
     e62:	0e 94 a2 03 	call	0x744	; 0x744 <_ZN7Display9drawPixelEhhh>
     e66:	0f 5f       	subi	r16, 0xFF	; 255
     e68:	1f 4f       	sbci	r17, 0xFF	; 255
		drawPixel(x,y,0);
	}

	r=21;
	//Berechnen des Minutenzeigers
	for(uint8_t i=0;i<r;i++){
     e6a:	05 31       	cpi	r16, 0x15	; 21
     e6c:	11 05       	cpc	r17, r1
     e6e:	89 f6       	brne	.-94     	; 0xe12 <_ZN7Display6analogEhhh+0x142>
	}

	r=13;
	//Berechnen des Stundenzeigers
	for(uint8_t i=0;i<r;i++){
		winkel=(stunde*30.0)*M_PI/180.0-M_PI/2.0;
     e70:	29 81       	ldd	r18, Y+1	; 0x01
     e72:	62 2f       	mov	r22, r18
     e74:	70 e0       	ldi	r23, 0x00	; 0
     e76:	80 e0       	ldi	r24, 0x00	; 0
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	0e 94 fc 1c 	call	0x39f8	; 0x39f8 <__floatsisf>
     e7e:	20 e0       	ldi	r18, 0x00	; 0
     e80:	30 e0       	ldi	r19, 0x00	; 0
     e82:	40 ef       	ldi	r20, 0xF0	; 240
     e84:	51 e4       	ldi	r21, 0x41	; 65
     e86:	0e 94 15 1e 	call	0x3c2a	; 0x3c2a <__mulsf3>
     e8a:	2b ed       	ldi	r18, 0xDB	; 219
     e8c:	3f e0       	ldi	r19, 0x0F	; 15
     e8e:	49 e4       	ldi	r20, 0x49	; 73
     e90:	50 e4       	ldi	r21, 0x40	; 64
     e92:	0e 94 15 1e 	call	0x3c2a	; 0x3c2a <__mulsf3>
     e96:	20 e0       	ldi	r18, 0x00	; 0
     e98:	30 e0       	ldi	r19, 0x00	; 0
     e9a:	44 e3       	ldi	r20, 0x34	; 52
     e9c:	53 e4       	ldi	r21, 0x43	; 67
     e9e:	0e 94 61 1c 	call	0x38c2	; 0x38c2 <__divsf3>
     ea2:	2b ed       	ldi	r18, 0xDB	; 219
     ea4:	3f e0       	ldi	r19, 0x0F	; 15
     ea6:	49 ec       	ldi	r20, 0xC9	; 201
     ea8:	5f e3       	ldi	r21, 0x3F	; 63
     eaa:	0e 94 93 1b 	call	0x3726	; 0x3726 <__subsf3>
     eae:	6b 01       	movw	r12, r22
     eb0:	7c 01       	movw	r14, r24
		x= (uint8_t) i*cos(winkel) +Px;
     eb2:	0e 94 5e 1c 	call	0x38bc	; 0x38bc <cos>
     eb6:	2b 01       	movw	r4, r22
     eb8:	3c 01       	movw	r6, r24
		y= (uint8_t) i*sin(winkel) +Py;
     eba:	c7 01       	movw	r24, r14
     ebc:	b6 01       	movw	r22, r12
     ebe:	0e 94 78 1e 	call	0x3cf0	; 0x3cf0 <sin>
     ec2:	4b 01       	movw	r8, r22
     ec4:	5c 01       	movw	r10, r24
     ec6:	00 e0       	ldi	r16, 0x00	; 0
     ec8:	10 e0       	ldi	r17, 0x00	; 0

	r=13;
	//Berechnen des Stundenzeigers
	for(uint8_t i=0;i<r;i++){
		winkel=(stunde*30.0)*M_PI/180.0-M_PI/2.0;
		x= (uint8_t) i*cos(winkel) +Px;
     eca:	b8 01       	movw	r22, r16
     ecc:	88 27       	eor	r24, r24
     ece:	77 fd       	sbrc	r23, 7
     ed0:	80 95       	com	r24
     ed2:	98 2f       	mov	r25, r24
     ed4:	0e 94 fc 1c 	call	0x39f8	; 0x39f8 <__floatsisf>
     ed8:	6b 01       	movw	r12, r22
     eda:	7c 01       	movw	r14, r24
		y= (uint8_t) i*sin(winkel) +Py;
     edc:	a5 01       	movw	r20, r10
     ede:	94 01       	movw	r18, r8
     ee0:	0e 94 15 1e 	call	0x3c2a	; 0x3c2a <__mulsf3>
     ee4:	20 e0       	ldi	r18, 0x00	; 0
     ee6:	30 e0       	ldi	r19, 0x00	; 0
     ee8:	48 ef       	ldi	r20, 0xF8	; 248
     eea:	51 e4       	ldi	r21, 0x41	; 65
     eec:	0e 94 94 1b 	call	0x3728	; 0x3728 <__addsf3>
     ef0:	0e 94 ce 1c 	call	0x399c	; 0x399c <__fixunssfsi>
     ef4:	36 2e       	mov	r3, r22

	r=13;
	//Berechnen des Stundenzeigers
	for(uint8_t i=0;i<r;i++){
		winkel=(stunde*30.0)*M_PI/180.0-M_PI/2.0;
		x= (uint8_t) i*cos(winkel) +Px;
     ef6:	a3 01       	movw	r20, r6
     ef8:	92 01       	movw	r18, r4
     efa:	c7 01       	movw	r24, r14
     efc:	b6 01       	movw	r22, r12
     efe:	0e 94 15 1e 	call	0x3c2a	; 0x3c2a <__mulsf3>
     f02:	20 e0       	ldi	r18, 0x00	; 0
     f04:	30 e0       	ldi	r19, 0x00	; 0
     f06:	48 ef       	ldi	r20, 0xF8	; 248
     f08:	51 e4       	ldi	r21, 0x41	; 65
     f0a:	0e 94 94 1b 	call	0x3728	; 0x3728 <__addsf3>
     f0e:	0e 94 ce 1c 	call	0x399c	; 0x399c <__fixunssfsi>
		y= (uint8_t) i*sin(winkel) +Py;

		drawPixel(x,y,0);
     f12:	20 e0       	ldi	r18, 0x00	; 0
     f14:	43 2d       	mov	r20, r3
     f16:	8a 81       	ldd	r24, Y+2	; 0x02
     f18:	9b 81       	ldd	r25, Y+3	; 0x03
     f1a:	0e 94 a2 03 	call	0x744	; 0x744 <_ZN7Display9drawPixelEhhh>
     f1e:	0f 5f       	subi	r16, 0xFF	; 255
     f20:	1f 4f       	sbci	r17, 0xFF	; 255
		drawPixel(x,y,0);
	}

	r=13;
	//Berechnen des Stundenzeigers
	for(uint8_t i=0;i<r;i++){
     f22:	0d 30       	cpi	r16, 0x0D	; 13
     f24:	11 05       	cpc	r17, r1
     f26:	89 f6       	brne	.-94     	; 0xeca <_ZN7Display6analogEhhh+0x1fa>

		drawPixel(x,y,0);
	}

	//Anzeige der Zahlen
	draw_ASCI('1',32-charsize,0);
     f28:	20 e0       	ldi	r18, 0x00	; 0
     f2a:	4a e1       	ldi	r20, 0x1A	; 26
     f2c:	61 e3       	ldi	r22, 0x31	; 49
     f2e:	8a 81       	ldd	r24, Y+2	; 0x02
     f30:	9b 81       	ldd	r25, Y+3	; 0x03
     f32:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
	draw_ASCI('2',32,0);
     f36:	20 e0       	ldi	r18, 0x00	; 0
     f38:	40 e2       	ldi	r20, 0x20	; 32
     f3a:	62 e3       	ldi	r22, 0x32	; 50
     f3c:	8a 81       	ldd	r24, Y+2	; 0x02
     f3e:	9b 81       	ldd	r25, Y+3	; 0x03
     f40:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
	draw_ASCI('3',64-charsize,4*charhighte-charhighte/2);
     f44:	2c e1       	ldi	r18, 0x1C	; 28
     f46:	4a e3       	ldi	r20, 0x3A	; 58
     f48:	63 e3       	ldi	r22, 0x33	; 51
     f4a:	8a 81       	ldd	r24, Y+2	; 0x02
     f4c:	9b 81       	ldd	r25, Y+3	; 0x03
     f4e:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
	draw_ASCI('6',32-charsize/2,7*charhighte);
     f52:	28 e3       	ldi	r18, 0x38	; 56
     f54:	4d e1       	ldi	r20, 0x1D	; 29
     f56:	66 e3       	ldi	r22, 0x36	; 54
     f58:	8a 81       	ldd	r24, Y+2	; 0x02
     f5a:	9b 81       	ldd	r25, Y+3	; 0x03
     f5c:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
	draw_ASCI('9',0,4*charhighte-charhighte/2);
     f60:	2c e1       	ldi	r18, 0x1C	; 28
     f62:	40 e0       	ldi	r20, 0x00	; 0
     f64:	69 e3       	ldi	r22, 0x39	; 57
     f66:	8a 81       	ldd	r24, Y+2	; 0x02
     f68:	9b 81       	ldd	r25, Y+3	; 0x03
     f6a:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>

	//anzeige des Rings fuer die Restlichen Stunden Zahlen
	//1
	drawPixel(26*cos((30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
     f6e:	20 e0       	ldi	r18, 0x00	; 0
     f70:	48 e0       	ldi	r20, 0x08	; 8
     f72:	6c e2       	ldi	r22, 0x2C	; 44
     f74:	8a 81       	ldd	r24, Y+2	; 0x02
     f76:	9b 81       	ldd	r25, Y+3	; 0x03
     f78:	0e 94 a2 03 	call	0x744	; 0x744 <_ZN7Display9drawPixelEhhh>
	//2
	drawPixel(26*cos((2*30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((2*30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
     f7c:	20 e0       	ldi	r18, 0x00	; 0
     f7e:	42 e1       	ldi	r20, 0x12	; 18
     f80:	65 e3       	ldi	r22, 0x35	; 53
     f82:	8a 81       	ldd	r24, Y+2	; 0x02
     f84:	9b 81       	ldd	r25, Y+3	; 0x03
     f86:	0e 94 a2 03 	call	0x744	; 0x744 <_ZN7Display9drawPixelEhhh>
	//4
	drawPixel(26*cos((4*30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((4*30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
     f8a:	20 e0       	ldi	r18, 0x00	; 0
     f8c:	4c e2       	ldi	r20, 0x2C	; 44
     f8e:	65 e3       	ldi	r22, 0x35	; 53
     f90:	8a 81       	ldd	r24, Y+2	; 0x02
     f92:	9b 81       	ldd	r25, Y+3	; 0x03
     f94:	0e 94 a2 03 	call	0x744	; 0x744 <_ZN7Display9drawPixelEhhh>
	//5
	drawPixel(26*cos((5*30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((5*30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
     f98:	20 e0       	ldi	r18, 0x00	; 0
     f9a:	45 e3       	ldi	r20, 0x35	; 53
     f9c:	6b e2       	ldi	r22, 0x2B	; 43
     f9e:	8a 81       	ldd	r24, Y+2	; 0x02
     fa0:	9b 81       	ldd	r25, Y+3	; 0x03
     fa2:	0e 94 a2 03 	call	0x744	; 0x744 <_ZN7Display9drawPixelEhhh>
	//7
	drawPixel(26*cos((7*30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((7*30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
     fa6:	20 e0       	ldi	r18, 0x00	; 0
     fa8:	45 e3       	ldi	r20, 0x35	; 53
     faa:	61 e1       	ldi	r22, 0x11	; 17
     fac:	8a 81       	ldd	r24, Y+2	; 0x02
     fae:	9b 81       	ldd	r25, Y+3	; 0x03
     fb0:	0e 94 a2 03 	call	0x744	; 0x744 <_ZN7Display9drawPixelEhhh>
	//8
	drawPixel(26*cos((8*30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((8*30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
     fb4:	20 e0       	ldi	r18, 0x00	; 0
     fb6:	4c e2       	ldi	r20, 0x2C	; 44
     fb8:	68 e0       	ldi	r22, 0x08	; 8
     fba:	8a 81       	ldd	r24, Y+2	; 0x02
     fbc:	9b 81       	ldd	r25, Y+3	; 0x03
     fbe:	0e 94 a2 03 	call	0x744	; 0x744 <_ZN7Display9drawPixelEhhh>
	//10
	drawPixel(26*cos((10*30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((10*30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
     fc2:	20 e0       	ldi	r18, 0x00	; 0
     fc4:	41 e1       	ldi	r20, 0x11	; 17
     fc6:	68 e0       	ldi	r22, 0x08	; 8
     fc8:	8a 81       	ldd	r24, Y+2	; 0x02
     fca:	9b 81       	ldd	r25, Y+3	; 0x03
     fcc:	0e 94 a2 03 	call	0x744	; 0x744 <_ZN7Display9drawPixelEhhh>
	//11
	drawPixel(26*cos((11*30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((11*30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
     fd0:	20 e0       	ldi	r18, 0x00	; 0
     fd2:	48 e0       	ldi	r20, 0x08	; 8
     fd4:	62 e1       	ldi	r22, 0x12	; 18
     fd6:	8a 81       	ldd	r24, Y+2	; 0x02
     fd8:	9b 81       	ldd	r25, Y+3	; 0x03
     fda:	0e 94 a2 03 	call	0x744	; 0x744 <_ZN7Display9drawPixelEhhh>
}
     fde:	0f 90       	pop	r0
     fe0:	0f 90       	pop	r0
     fe2:	0f 90       	pop	r0
     fe4:	df 91       	pop	r29
     fe6:	cf 91       	pop	r28
     fe8:	1f 91       	pop	r17
     fea:	0f 91       	pop	r16
     fec:	ff 90       	pop	r15
     fee:	ef 90       	pop	r14
     ff0:	df 90       	pop	r13
     ff2:	cf 90       	pop	r12
     ff4:	bf 90       	pop	r11
     ff6:	af 90       	pop	r10
     ff8:	9f 90       	pop	r9
     ffa:	8f 90       	pop	r8
     ffc:	7f 90       	pop	r7
     ffe:	6f 90       	pop	r6
    1000:	5f 90       	pop	r5
    1002:	4f 90       	pop	r4
    1004:	3f 90       	pop	r3
    1006:	2f 90       	pop	r2
    1008:	08 95       	ret

0000100a <_Z8ADC_Readh>:
#ifndef ADC_H_
#define ADC_H_

uint16_t ADC_Read( uint8_t channel )
{
	ADMUX = (ADMUX & ~(0x1F)) | (channel & 0x1F);
    100a:	ec e7       	ldi	r30, 0x7C	; 124
    100c:	f0 e0       	ldi	r31, 0x00	; 0
    100e:	90 81       	ld	r25, Z
    1010:	8f 71       	andi	r24, 0x1F	; 31
    1012:	90 7e       	andi	r25, 0xE0	; 224
    1014:	98 2b       	or	r25, r24
    1016:	90 83       	st	Z, r25
	ADCSRA |= (1<<ADSC);
    1018:	ea e7       	ldi	r30, 0x7A	; 122
    101a:	f0 e0       	ldi	r31, 0x00	; 0
    101c:	80 81       	ld	r24, Z
    101e:	80 64       	ori	r24, 0x40	; 64
    1020:	80 83       	st	Z, r24
	while (ADCSRA & (1<<ADSC) ) {
    1022:	80 81       	ld	r24, Z
    1024:	86 fd       	sbrc	r24, 6
    1026:	fd cf       	rjmp	.-6      	; 0x1022 <_Z8ADC_Readh+0x18>
	}
	return ADCW;
    1028:	80 91 78 00 	lds	r24, 0x0078
    102c:	90 91 79 00 	lds	r25, 0x0079
}
    1030:	08 95       	ret

00001032 <_Z14Batteriestatusv>:
	return (uint16_t)( sum / nsamples );
}

double batterie;
int8_t Batteriestatus(){
	uint16_t ADCwert=ADC_Read(0);
    1032:	80 e0       	ldi	r24, 0x00	; 0
    1034:	0e 94 05 08 	call	0x100a	; 0x100a <_Z8ADC_Readh>
	batterie = (ADCwert/1023.0)*3.24*SPANNUNGSTEILER;
    1038:	bc 01       	movw	r22, r24
    103a:	80 e0       	ldi	r24, 0x00	; 0
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	0e 94 fa 1c 	call	0x39f4	; 0x39f4 <__floatunsisf>
    1042:	20 e0       	ldi	r18, 0x00	; 0
    1044:	30 ec       	ldi	r19, 0xC0	; 192
    1046:	4f e7       	ldi	r20, 0x7F	; 127
    1048:	54 e4       	ldi	r21, 0x44	; 68
    104a:	0e 94 61 1c 	call	0x38c2	; 0x38c2 <__divsf3>
    104e:	29 e2       	ldi	r18, 0x29	; 41
    1050:	3c e5       	ldi	r19, 0x5C	; 92
    1052:	4f e4       	ldi	r20, 0x4F	; 79
    1054:	50 e4       	ldi	r21, 0x40	; 64
    1056:	0e 94 15 1e 	call	0x3c2a	; 0x3c2a <__mulsf3>
    105a:	2b e7       	ldi	r18, 0x7B	; 123
    105c:	34 e1       	ldi	r19, 0x14	; 20
    105e:	4e ef       	ldi	r20, 0xFE	; 254
    1060:	5f e3       	ldi	r21, 0x3F	; 63
    1062:	0e 94 15 1e 	call	0x3c2a	; 0x3c2a <__mulsf3>
    1066:	60 93 a5 02 	sts	0x02A5, r22
    106a:	70 93 a6 02 	sts	0x02A6, r23
    106e:	80 93 a7 02 	sts	0x02A7, r24
    1072:	90 93 a8 02 	sts	0x02A8, r25
	return ((batterie-3.0)/(4.2-3.0)*100);
    1076:	20 e0       	ldi	r18, 0x00	; 0
    1078:	30 e0       	ldi	r19, 0x00	; 0
    107a:	40 e4       	ldi	r20, 0x40	; 64
    107c:	50 e4       	ldi	r21, 0x40	; 64
    107e:	0e 94 93 1b 	call	0x3726	; 0x3726 <__subsf3>
    1082:	28 e9       	ldi	r18, 0x98	; 152
    1084:	39 e9       	ldi	r19, 0x99	; 153
    1086:	49 e9       	ldi	r20, 0x99	; 153
    1088:	5f e3       	ldi	r21, 0x3F	; 63
    108a:	0e 94 61 1c 	call	0x38c2	; 0x38c2 <__divsf3>
    108e:	20 e0       	ldi	r18, 0x00	; 0
    1090:	30 e0       	ldi	r19, 0x00	; 0
    1092:	48 ec       	ldi	r20, 0xC8	; 200
    1094:	52 e4       	ldi	r21, 0x42	; 66
    1096:	0e 94 15 1e 	call	0x3c2a	; 0x3c2a <__mulsf3>
    109a:	0e 94 c9 1c 	call	0x3992	; 0x3992 <__fixsfsi>
    109e:	86 2f       	mov	r24, r22
}
    10a0:	08 95       	ret

000010a2 <_Z14willkommenpagev>:
#ifndef SEITEN_H_
#define SEITEN_H_

//Diese Funktionen schreiben nur in den Framebuffer und das Schreiben passiert in der Main ueber einen Interupt

void willkommenpage(){
    10a2:	cf 92       	push	r12
    10a4:	df 92       	push	r13
    10a6:	ef 92       	push	r14
    10a8:	ff 92       	push	r15
    10aa:	0f 93       	push	r16
    10ac:	1f 93       	push	r17
    10ae:	cf 93       	push	r28
    10b0:	df 93       	push	r29
    10b2:	cd b7       	in	r28, 0x3d	; 61
    10b4:	de b7       	in	r29, 0x3e	; 62
    10b6:	64 97       	sbiw	r28, 0x14	; 20
    10b8:	0f b6       	in	r0, 0x3f	; 63
    10ba:	f8 94       	cli
    10bc:	de bf       	out	0x3e, r29	; 62
    10be:	0f be       	out	0x3f, r0	; 63
    10c0:	cd bf       	out	0x3d, r28	; 61
	char buffer[20];
	uint8_t buffersize;
	oled.clearFrame();
    10c2:	8a ea       	ldi	r24, 0xAA	; 170
    10c4:	92 e0       	ldi	r25, 0x02	; 2
    10c6:	0e 94 b9 02 	call	0x572	; 0x572 <_ZN7Display10clearFrameEv>
	buffersize=sprintf(buffer,"Fahradcomputer");
    10ca:	8f e0       	ldi	r24, 0x0F	; 15
    10cc:	e0 e0       	ldi	r30, 0x00	; 0
    10ce:	f1 e0       	ldi	r31, 0x01	; 1
    10d0:	8e 01       	movw	r16, r28
    10d2:	0f 5f       	subi	r16, 0xFF	; 255
    10d4:	1f 4f       	sbci	r17, 0xFF	; 255
    10d6:	d8 01       	movw	r26, r16
    10d8:	01 90       	ld	r0, Z+
    10da:	0d 92       	st	X+, r0
    10dc:	8a 95       	dec	r24
    10de:	e1 f7       	brne	.-8      	; 0x10d8 <_Z14willkommenpagev+0x36>
    10e0:	c0 2e       	mov	r12, r16
    10e2:	d1 2e       	mov	r13, r17
    10e4:	78 01       	movw	r14, r16
    10e6:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0; i < buffersize;i++){
		oled.draw_ASCI(buffer[i],i*charsize,0);
    10e8:	f7 01       	movw	r30, r14
    10ea:	61 91       	ld	r22, Z+
    10ec:	7f 01       	movw	r14, r30
    10ee:	20 e0       	ldi	r18, 0x00	; 0
    10f0:	41 2f       	mov	r20, r17
    10f2:	8a ea       	ldi	r24, 0xAA	; 170
    10f4:	92 e0       	ldi	r25, 0x02	; 2
    10f6:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    10fa:	1a 5f       	subi	r17, 0xFA	; 250
void willkommenpage(){
	char buffer[20];
	uint8_t buffersize;
	oled.clearFrame();
	buffersize=sprintf(buffer,"Fahradcomputer");
	for(uint8_t i=0; i < buffersize;i++){
    10fc:	14 35       	cpi	r17, 0x54	; 84
    10fe:	a1 f7       	brne	.-24     	; 0x10e8 <_Z14willkommenpagev+0x46>
		oled.draw_ASCI(buffer[i],i*charsize,0);
	}
	buffersize=sprintf(buffer,"--------------");
    1100:	8f e0       	ldi	r24, 0x0F	; 15
    1102:	ef e0       	ldi	r30, 0x0F	; 15
    1104:	f1 e0       	ldi	r31, 0x01	; 1
    1106:	de 01       	movw	r26, r28
    1108:	11 96       	adiw	r26, 0x01	; 1
    110a:	01 90       	ld	r0, Z+
    110c:	0d 92       	st	X+, r0
    110e:	8a 95       	dec	r24
    1110:	e1 f7       	brne	.-8      	; 0x110a <_Z14willkommenpagev+0x68>
    1112:	ec 2c       	mov	r14, r12
    1114:	fd 2c       	mov	r15, r13
    1116:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0; i < buffersize;i++){
		oled.draw_ASCI(buffer[i],i*charsize,8);
    1118:	f7 01       	movw	r30, r14
    111a:	61 91       	ld	r22, Z+
    111c:	7f 01       	movw	r14, r30
    111e:	28 e0       	ldi	r18, 0x08	; 8
    1120:	41 2f       	mov	r20, r17
    1122:	8a ea       	ldi	r24, 0xAA	; 170
    1124:	92 e0       	ldi	r25, 0x02	; 2
    1126:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    112a:	1a 5f       	subi	r17, 0xFA	; 250
	buffersize=sprintf(buffer,"Fahradcomputer");
	for(uint8_t i=0; i < buffersize;i++){
		oled.draw_ASCI(buffer[i],i*charsize,0);
	}
	buffersize=sprintf(buffer,"--------------");
	for(uint8_t i=0; i < buffersize;i++){
    112c:	14 35       	cpi	r17, 0x54	; 84
    112e:	a1 f7       	brne	.-24     	; 0x1118 <_Z14willkommenpagev+0x76>
		oled.draw_ASCI(buffer[i],i*charsize,8);
	}
	buffersize=sprintf(buffer,"Version: %.2f",VERSIONSNUMMER);
    1130:	8f e3       	ldi	r24, 0x3F	; 63
    1132:	8f 93       	push	r24
    1134:	89 e9       	ldi	r24, 0x99	; 153
    1136:	8f 93       	push	r24
    1138:	8f 93       	push	r24
    113a:	8a e9       	ldi	r24, 0x9A	; 154
    113c:	8f 93       	push	r24
    113e:	8e e1       	ldi	r24, 0x1E	; 30
    1140:	91 e0       	ldi	r25, 0x01	; 1
    1142:	9f 93       	push	r25
    1144:	8f 93       	push	r24
    1146:	ce 01       	movw	r24, r28
    1148:	01 96       	adiw	r24, 0x01	; 1
    114a:	9f 93       	push	r25
    114c:	8f 93       	push	r24
    114e:	0e 94 98 23 	call	0x4730	; 0x4730 <sprintf>
	for(uint8_t i=0; i < buffersize;i++){
    1152:	0f b6       	in	r0, 0x3f	; 63
    1154:	f8 94       	cli
    1156:	de bf       	out	0x3e, r29	; 62
    1158:	0f be       	out	0x3f, r0	; 63
    115a:	cd bf       	out	0x3d, r28	; 61
    115c:	88 23       	and	r24, r24
    115e:	d1 f0       	breq	.+52     	; 0x1194 <_Z14willkommenpagev+0xf2>
    1160:	81 50       	subi	r24, 0x01	; 1
    1162:	68 94       	set
    1164:	ee 24       	eor	r14, r14
    1166:	e1 f8       	bld	r14, 1
    1168:	f1 2c       	mov	r15, r1
    116a:	ec 0e       	add	r14, r28
    116c:	fd 1e       	adc	r15, r29
    116e:	e8 0e       	add	r14, r24
    1170:	f1 1c       	adc	r15, r1
    1172:	0c 2d       	mov	r16, r12
    1174:	1d 2d       	mov	r17, r13
    1176:	d1 2c       	mov	r13, r1
		oled.draw_ASCI(buffer[i],i*charsize,32);
    1178:	f8 01       	movw	r30, r16
    117a:	61 91       	ld	r22, Z+
    117c:	8f 01       	movw	r16, r30
    117e:	20 e2       	ldi	r18, 0x20	; 32
    1180:	4d 2d       	mov	r20, r13
    1182:	8a ea       	ldi	r24, 0xAA	; 170
    1184:	92 e0       	ldi	r25, 0x02	; 2
    1186:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    118a:	f6 e0       	ldi	r31, 0x06	; 6
    118c:	df 0e       	add	r13, r31
	buffersize=sprintf(buffer,"--------------");
	for(uint8_t i=0; i < buffersize;i++){
		oled.draw_ASCI(buffer[i],i*charsize,8);
	}
	buffersize=sprintf(buffer,"Version: %.2f",VERSIONSNUMMER);
	for(uint8_t i=0; i < buffersize;i++){
    118e:	0e 15       	cp	r16, r14
    1190:	1f 05       	cpc	r17, r15
    1192:	91 f7       	brne	.-28     	; 0x1178 <_Z14willkommenpagev+0xd6>
		oled.draw_ASCI(buffer[i],i*charsize,32);

	}
	oled.sendFrame();
    1194:	8a ea       	ldi	r24, 0xAA	; 170
    1196:	92 e0       	ldi	r25, 0x02	; 2
    1198:	0e 94 5f 03 	call	0x6be	; 0x6be <_ZN7Display9sendFrameEv>
	oled.clearFrame();
    119c:	8a ea       	ldi	r24, 0xAA	; 170
    119e:	92 e0       	ldi	r25, 0x02	; 2
    11a0:	0e 94 b9 02 	call	0x572	; 0x572 <_ZN7Display10clearFrameEv>
    11a4:	8a e0       	ldi	r24, 0x0A	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    11a6:	2f e7       	ldi	r18, 0x7F	; 127
    11a8:	38 e3       	ldi	r19, 0x38	; 56
    11aa:	91 e0       	ldi	r25, 0x01	; 1
    11ac:	21 50       	subi	r18, 0x01	; 1
    11ae:	30 40       	sbci	r19, 0x00	; 0
    11b0:	90 40       	sbci	r25, 0x00	; 0
    11b2:	e1 f7       	brne	.-8      	; 0x11ac <_Z14willkommenpagev+0x10a>
    11b4:	00 c0       	rjmp	.+0      	; 0x11b6 <_Z14willkommenpagev+0x114>
    11b6:	00 00       	nop
    11b8:	ef e7       	ldi	r30, 0x7F	; 127
    11ba:	f8 e3       	ldi	r31, 0x38	; 56
    11bc:	21 e0       	ldi	r18, 0x01	; 1
    11be:	e1 50       	subi	r30, 0x01	; 1
    11c0:	f0 40       	sbci	r31, 0x00	; 0
    11c2:	20 40       	sbci	r18, 0x00	; 0
    11c4:	e1 f7       	brne	.-8      	; 0x11be <_Z14willkommenpagev+0x11c>
    11c6:	00 c0       	rjmp	.+0      	; 0x11c8 <_Z14willkommenpagev+0x126>
    11c8:	00 00       	nop
    11ca:	81 50       	subi	r24, 0x01	; 1
	for (uint8_t i=0;i<10;i++)
    11cc:	61 f7       	brne	.-40     	; 0x11a6 <_Z14willkommenpagev+0x104>
	{
		_delay_ms(50);
		_delay_ms(50);
	}
}
    11ce:	64 96       	adiw	r28, 0x14	; 20
    11d0:	0f b6       	in	r0, 0x3f	; 63
    11d2:	f8 94       	cli
    11d4:	de bf       	out	0x3e, r29	; 62
    11d6:	0f be       	out	0x3f, r0	; 63
    11d8:	cd bf       	out	0x3d, r28	; 61
    11da:	df 91       	pop	r29
    11dc:	cf 91       	pop	r28
    11de:	1f 91       	pop	r17
    11e0:	0f 91       	pop	r16
    11e2:	ff 90       	pop	r15
    11e4:	ef 90       	pop	r14
    11e6:	df 90       	pop	r13
    11e8:	cf 90       	pop	r12
    11ea:	08 95       	ret

000011ec <_Z6headerh>:

void header(uint8_t page){
    11ec:	ef 92       	push	r14
    11ee:	ff 92       	push	r15
    11f0:	0f 93       	push	r16
    11f2:	1f 93       	push	r17
    11f4:	cf 93       	push	r28
    11f6:	df 93       	push	r29
    11f8:	cd b7       	in	r28, 0x3d	; 61
    11fa:	de b7       	in	r29, 0x3e	; 62
    11fc:	64 97       	sbiw	r28, 0x14	; 20
    11fe:	0f b6       	in	r0, 0x3f	; 63
    1200:	f8 94       	cli
    1202:	de bf       	out	0x3e, r29	; 62
    1204:	0f be       	out	0x3f, r0	; 63
    1206:	cd bf       	out	0x3d, r28	; 61
	char buffer[20];
	uint8_t buffersize=0;;
	switch (page) {
    1208:	81 11       	cpse	r24, r1
    120a:	4d c0       	rjmp	.+154    	; 0x12a6 <_Z6headerh+0xba>
    120c:	0f 2e       	mov	r0, r31
    120e:	fb ec       	ldi	r31, 0xCB	; 203
    1210:	ef 2e       	mov	r14, r31
    1212:	f6 e0       	ldi	r31, 0x06	; 6
    1214:	ff 2e       	mov	r15, r31
    1216:	f0 2d       	mov	r31, r0
    1218:	10 e0       	ldi	r17, 0x00	; 0
		case 0:	//standard Header fuer fast alle Pages
			for(uint8_t i=0;i<8;i++){
				oled.draw_ASCI(rtc.msg_uhr[i],i*charsize,0);
    121a:	f7 01       	movw	r30, r14
    121c:	61 91       	ld	r22, Z+
    121e:	7f 01       	movw	r14, r30
    1220:	20 e0       	ldi	r18, 0x00	; 0
    1222:	41 2f       	mov	r20, r17
    1224:	8a ea       	ldi	r24, 0xAA	; 170
    1226:	92 e0       	ldi	r25, 0x02	; 2
    1228:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    122c:	1a 5f       	subi	r17, 0xFA	; 250
void header(uint8_t page){
	char buffer[20];
	uint8_t buffersize=0;;
	switch (page) {
		case 0:	//standard Header fuer fast alle Pages
			for(uint8_t i=0;i<8;i++){
    122e:	10 33       	cpi	r17, 0x30	; 48
    1230:	a1 f7       	brne	.-24     	; 0x121a <_Z6headerh+0x2e>
				oled.draw_ASCI(rtc.msg_uhr[i],i*charsize,0);
			}
			buffersize=sprintf(buffer,"Bat: %i%%",Batteriestatus());
    1232:	0e 94 19 08 	call	0x1032	; 0x1032 <_Z14Batteriestatusv>
    1236:	28 2f       	mov	r18, r24
    1238:	33 27       	eor	r19, r19
    123a:	27 fd       	sbrc	r18, 7
    123c:	30 95       	com	r19
    123e:	3f 93       	push	r19
    1240:	8f 93       	push	r24
    1242:	8c e2       	ldi	r24, 0x2C	; 44
    1244:	91 e0       	ldi	r25, 0x01	; 1
    1246:	9f 93       	push	r25
    1248:	8f 93       	push	r24
    124a:	ce 01       	movw	r24, r28
    124c:	01 96       	adiw	r24, 0x01	; 1
    124e:	9f 93       	push	r25
    1250:	8f 93       	push	r24
    1252:	0e 94 98 23 	call	0x4730	; 0x4730 <sprintf>
			for(uint8_t i=((SSD1306_WIDTH/charsize)-buffersize);i<(SSD1306_WIDTH/charsize);i++){
    1256:	25 e1       	ldi	r18, 0x15	; 21
    1258:	f2 2e       	mov	r15, r18
    125a:	f8 1a       	sub	r15, r24
    125c:	0f 90       	pop	r0
    125e:	0f 90       	pop	r0
    1260:	0f 90       	pop	r0
    1262:	0f 90       	pop	r0
    1264:	0f 90       	pop	r0
    1266:	0f 90       	pop	r0
    1268:	f4 e1       	ldi	r31, 0x14	; 20
    126a:	ff 15       	cp	r31, r15
    126c:	e0 f0       	brcs	.+56     	; 0x12a6 <_Z6headerh+0xba>
    126e:	ef 2c       	mov	r14, r15
    1270:	ee 0c       	add	r14, r14
    1272:	ef 0c       	add	r14, r15
    1274:	ee 0c       	add	r14, r14
				oled.draw_ASCI(buffer[i-((SSD1306_WIDTH/charsize)-buffersize)],i*charsize,0);
    1276:	8c 01       	movw	r16, r24
    1278:	11 27       	eor	r17, r17
    127a:	e1 e0       	ldi	r30, 0x01	; 1
    127c:	f0 e0       	ldi	r31, 0x00	; 0
    127e:	ec 0f       	add	r30, r28
    1280:	fd 1f       	adc	r31, r29
    1282:	ef 0d       	add	r30, r15
    1284:	f1 1d       	adc	r31, r1
    1286:	e0 0f       	add	r30, r16
    1288:	f1 1f       	adc	r31, r17
    128a:	75 97       	sbiw	r30, 0x15	; 21
    128c:	20 e0       	ldi	r18, 0x00	; 0
    128e:	4e 2d       	mov	r20, r14
    1290:	60 81       	ld	r22, Z
    1292:	8a ea       	ldi	r24, 0xAA	; 170
    1294:	92 e0       	ldi	r25, 0x02	; 2
    1296:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
		case 0:	//standard Header fuer fast alle Pages
			for(uint8_t i=0;i<8;i++){
				oled.draw_ASCI(rtc.msg_uhr[i],i*charsize,0);
			}
			buffersize=sprintf(buffer,"Bat: %i%%",Batteriestatus());
			for(uint8_t i=((SSD1306_WIDTH/charsize)-buffersize);i<(SSD1306_WIDTH/charsize);i++){
    129a:	f3 94       	inc	r15
    129c:	26 e0       	ldi	r18, 0x06	; 6
    129e:	e2 0e       	add	r14, r18
    12a0:	85 e1       	ldi	r24, 0x15	; 21
    12a2:	f8 12       	cpse	r15, r24
    12a4:	ea cf       	rjmp	.-44     	; 0x127a <_Z6headerh+0x8e>
			}
			break;
		default:
			break;
	}
}
    12a6:	64 96       	adiw	r28, 0x14	; 20
    12a8:	0f b6       	in	r0, 0x3f	; 63
    12aa:	f8 94       	cli
    12ac:	de bf       	out	0x3e, r29	; 62
    12ae:	0f be       	out	0x3f, r0	; 63
    12b0:	cd bf       	out	0x3d, r28	; 61
    12b2:	df 91       	pop	r29
    12b4:	cf 91       	pop	r28
    12b6:	1f 91       	pop	r17
    12b8:	0f 91       	pop	r16
    12ba:	ff 90       	pop	r15
    12bc:	ef 90       	pop	r14
    12be:	08 95       	ret

000012c0 <_Z16anzeige_richtungf>:

void anzeige_richtung(float winkel){
    12c0:	cf 92       	push	r12
    12c2:	df 92       	push	r13
    12c4:	ef 92       	push	r14
    12c6:	ff 92       	push	r15
    12c8:	6b 01       	movw	r12, r22
    12ca:	7c 01       	movw	r14, r24
	//finden der Ziffer fuer die Anzeige
	if ((winkel<45/2) || (winkel == 360-45/2))
    12cc:	20 e0       	ldi	r18, 0x00	; 0
    12ce:	30 e0       	ldi	r19, 0x00	; 0
    12d0:	40 eb       	ldi	r20, 0xB0	; 176
    12d2:	51 e4       	ldi	r21, 0x41	; 65
    12d4:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <__cmpsf2>
    12d8:	88 23       	and	r24, r24
    12da:	54 f0       	brlt	.+20     	; 0x12f0 <_Z16anzeige_richtungf+0x30>
    12dc:	20 e0       	ldi	r18, 0x00	; 0
    12de:	30 e0       	ldi	r19, 0x00	; 0
    12e0:	49 ea       	ldi	r20, 0xA9	; 169
    12e2:	53 e4       	ldi	r21, 0x43	; 67
    12e4:	c7 01       	movw	r24, r14
    12e6:	b6 01       	movw	r22, r12
    12e8:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <__cmpsf2>
    12ec:	81 11       	cpse	r24, r1
    12ee:	08 c0       	rjmp	.+16     	; 0x1300 <_Z16anzeige_richtungf+0x40>
	{
		oled.draw_ASCI('N',80,3.5*charhighte);
    12f0:	2c e1       	ldi	r18, 0x1C	; 28
    12f2:	40 e5       	ldi	r20, 0x50	; 80
    12f4:	6e e4       	ldi	r22, 0x4E	; 78
    12f6:	8a ea       	ldi	r24, 0xAA	; 170
    12f8:	92 e0       	ldi	r25, 0x02	; 2
    12fa:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    12fe:	99 c0       	rjmp	.+306    	; 0x1432 <_Z16anzeige_richtungf+0x172>
	}
	else if (winkel<90-45/2)
    1300:	20 e0       	ldi	r18, 0x00	; 0
    1302:	30 e0       	ldi	r19, 0x00	; 0
    1304:	48 e8       	ldi	r20, 0x88	; 136
    1306:	52 e4       	ldi	r21, 0x42	; 66
    1308:	c7 01       	movw	r24, r14
    130a:	b6 01       	movw	r22, r12
    130c:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <__cmpsf2>
    1310:	88 23       	and	r24, r24
    1312:	7c f4       	brge	.+30     	; 0x1332 <_Z16anzeige_richtungf+0x72>
	{
		oled.draw_ASCI('N',80-charsize/2,3.5*charhighte);
    1314:	2c e1       	ldi	r18, 0x1C	; 28
    1316:	4d e4       	ldi	r20, 0x4D	; 77
    1318:	6e e4       	ldi	r22, 0x4E	; 78
    131a:	8a ea       	ldi	r24, 0xAA	; 170
    131c:	92 e0       	ldi	r25, 0x02	; 2
    131e:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
		oled.draw_ASCI('O',80+charsize/2,3.5*charhighte);
    1322:	2c e1       	ldi	r18, 0x1C	; 28
    1324:	43 e5       	ldi	r20, 0x53	; 83
    1326:	6f e4       	ldi	r22, 0x4F	; 79
    1328:	8a ea       	ldi	r24, 0xAA	; 170
    132a:	92 e0       	ldi	r25, 0x02	; 2
    132c:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    1330:	80 c0       	rjmp	.+256    	; 0x1432 <_Z16anzeige_richtungf+0x172>
	}
	else if (winkel<135-45/2)
    1332:	20 e0       	ldi	r18, 0x00	; 0
    1334:	30 e0       	ldi	r19, 0x00	; 0
    1336:	42 ee       	ldi	r20, 0xE2	; 226
    1338:	52 e4       	ldi	r21, 0x42	; 66
    133a:	c7 01       	movw	r24, r14
    133c:	b6 01       	movw	r22, r12
    133e:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <__cmpsf2>
    1342:	88 23       	and	r24, r24
    1344:	44 f4       	brge	.+16     	; 0x1356 <_Z16anzeige_richtungf+0x96>
	{
		oled.draw_ASCI('O',80,3.5*charhighte);
    1346:	2c e1       	ldi	r18, 0x1C	; 28
    1348:	40 e5       	ldi	r20, 0x50	; 80
    134a:	6f e4       	ldi	r22, 0x4F	; 79
    134c:	8a ea       	ldi	r24, 0xAA	; 170
    134e:	92 e0       	ldi	r25, 0x02	; 2
    1350:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    1354:	6e c0       	rjmp	.+220    	; 0x1432 <_Z16anzeige_richtungf+0x172>
	}
	else if (winkel<180-45/2)
    1356:	20 e0       	ldi	r18, 0x00	; 0
    1358:	30 e0       	ldi	r19, 0x00	; 0
    135a:	4e e1       	ldi	r20, 0x1E	; 30
    135c:	53 e4       	ldi	r21, 0x43	; 67
    135e:	c7 01       	movw	r24, r14
    1360:	b6 01       	movw	r22, r12
    1362:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <__cmpsf2>
    1366:	88 23       	and	r24, r24
    1368:	7c f4       	brge	.+30     	; 0x1388 <_Z16anzeige_richtungf+0xc8>
	{
		oled.draw_ASCI('S',80-charsize/2,3.5*charhighte);
    136a:	2c e1       	ldi	r18, 0x1C	; 28
    136c:	4d e4       	ldi	r20, 0x4D	; 77
    136e:	63 e5       	ldi	r22, 0x53	; 83
    1370:	8a ea       	ldi	r24, 0xAA	; 170
    1372:	92 e0       	ldi	r25, 0x02	; 2
    1374:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
		oled.draw_ASCI('O',80+charsize/2,3.5*charhighte);
    1378:	2c e1       	ldi	r18, 0x1C	; 28
    137a:	43 e5       	ldi	r20, 0x53	; 83
    137c:	6f e4       	ldi	r22, 0x4F	; 79
    137e:	8a ea       	ldi	r24, 0xAA	; 170
    1380:	92 e0       	ldi	r25, 0x02	; 2
    1382:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    1386:	55 c0       	rjmp	.+170    	; 0x1432 <_Z16anzeige_richtungf+0x172>
	}
	else if (winkel<225-45/2)
    1388:	20 e0       	ldi	r18, 0x00	; 0
    138a:	30 e0       	ldi	r19, 0x00	; 0
    138c:	4b e4       	ldi	r20, 0x4B	; 75
    138e:	53 e4       	ldi	r21, 0x43	; 67
    1390:	c7 01       	movw	r24, r14
    1392:	b6 01       	movw	r22, r12
    1394:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <__cmpsf2>
    1398:	88 23       	and	r24, r24
    139a:	44 f4       	brge	.+16     	; 0x13ac <_Z16anzeige_richtungf+0xec>
	{
		oled.draw_ASCI('S',80,3.5*charhighte);
    139c:	2c e1       	ldi	r18, 0x1C	; 28
    139e:	40 e5       	ldi	r20, 0x50	; 80
    13a0:	63 e5       	ldi	r22, 0x53	; 83
    13a2:	8a ea       	ldi	r24, 0xAA	; 170
    13a4:	92 e0       	ldi	r25, 0x02	; 2
    13a6:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    13aa:	43 c0       	rjmp	.+134    	; 0x1432 <_Z16anzeige_richtungf+0x172>
	}
	else if (winkel<270-45/2)
    13ac:	20 e0       	ldi	r18, 0x00	; 0
    13ae:	30 e0       	ldi	r19, 0x00	; 0
    13b0:	48 e7       	ldi	r20, 0x78	; 120
    13b2:	53 e4       	ldi	r21, 0x43	; 67
    13b4:	c7 01       	movw	r24, r14
    13b6:	b6 01       	movw	r22, r12
    13b8:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <__cmpsf2>
    13bc:	88 23       	and	r24, r24
    13be:	7c f4       	brge	.+30     	; 0x13de <_Z16anzeige_richtungf+0x11e>
	{
		oled.draw_ASCI('S',80-charsize/2,3.5*charhighte);
    13c0:	2c e1       	ldi	r18, 0x1C	; 28
    13c2:	4d e4       	ldi	r20, 0x4D	; 77
    13c4:	63 e5       	ldi	r22, 0x53	; 83
    13c6:	8a ea       	ldi	r24, 0xAA	; 170
    13c8:	92 e0       	ldi	r25, 0x02	; 2
    13ca:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
		oled.draw_ASCI('W',80+charsize/2,3.5*charhighte);
    13ce:	2c e1       	ldi	r18, 0x1C	; 28
    13d0:	43 e5       	ldi	r20, 0x53	; 83
    13d2:	67 e5       	ldi	r22, 0x57	; 87
    13d4:	8a ea       	ldi	r24, 0xAA	; 170
    13d6:	92 e0       	ldi	r25, 0x02	; 2
    13d8:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    13dc:	2a c0       	rjmp	.+84     	; 0x1432 <_Z16anzeige_richtungf+0x172>
	}
	else if (winkel<315-45/2)
    13de:	20 e0       	ldi	r18, 0x00	; 0
    13e0:	30 e8       	ldi	r19, 0x80	; 128
    13e2:	42 e9       	ldi	r20, 0x92	; 146
    13e4:	53 e4       	ldi	r21, 0x43	; 67
    13e6:	c7 01       	movw	r24, r14
    13e8:	b6 01       	movw	r22, r12
    13ea:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <__cmpsf2>
    13ee:	88 23       	and	r24, r24
    13f0:	44 f4       	brge	.+16     	; 0x1402 <_Z16anzeige_richtungf+0x142>
	{
		oled.draw_ASCI('W',80,3.5*charhighte);
    13f2:	2c e1       	ldi	r18, 0x1C	; 28
    13f4:	40 e5       	ldi	r20, 0x50	; 80
    13f6:	67 e5       	ldi	r22, 0x57	; 87
    13f8:	8a ea       	ldi	r24, 0xAA	; 170
    13fa:	92 e0       	ldi	r25, 0x02	; 2
    13fc:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    1400:	18 c0       	rjmp	.+48     	; 0x1432 <_Z16anzeige_richtungf+0x172>
	}
	else if (winkel<360-45/2)
    1402:	20 e0       	ldi	r18, 0x00	; 0
    1404:	30 e0       	ldi	r19, 0x00	; 0
    1406:	49 ea       	ldi	r20, 0xA9	; 169
    1408:	53 e4       	ldi	r21, 0x43	; 67
    140a:	c7 01       	movw	r24, r14
    140c:	b6 01       	movw	r22, r12
    140e:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <__cmpsf2>
    1412:	88 23       	and	r24, r24
    1414:	74 f4       	brge	.+28     	; 0x1432 <_Z16anzeige_richtungf+0x172>
	{
		oled.draw_ASCI('N',80-charsize/2,3.5*charhighte);
    1416:	2c e1       	ldi	r18, 0x1C	; 28
    1418:	4d e4       	ldi	r20, 0x4D	; 77
    141a:	6e e4       	ldi	r22, 0x4E	; 78
    141c:	8a ea       	ldi	r24, 0xAA	; 170
    141e:	92 e0       	ldi	r25, 0x02	; 2
    1420:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
		oled.draw_ASCI('W',80+charsize/2,3.5*charhighte);
    1424:	2c e1       	ldi	r18, 0x1C	; 28
    1426:	43 e5       	ldi	r20, 0x53	; 83
    1428:	67 e5       	ldi	r22, 0x57	; 87
    142a:	8a ea       	ldi	r24, 0xAA	; 170
    142c:	92 e0       	ldi	r25, 0x02	; 2
    142e:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
	}
}
    1432:	ff 90       	pop	r15
    1434:	ef 90       	pop	r14
    1436:	df 90       	pop	r13
    1438:	cf 90       	pop	r12
    143a:	08 95       	ret

0000143c <_Z13anzeige_nadelhhf>:

void anzeige_nadel(uint8_t x, uint8_t y, float angle){
    143c:	af 92       	push	r10
    143e:	bf 92       	push	r11
    1440:	cf 92       	push	r12
    1442:	df 92       	push	r13
    1444:	ef 92       	push	r14
    1446:	ff 92       	push	r15
    1448:	0f 93       	push	r16
    144a:	1f 93       	push	r17
	//fixed parameters for drawing the arrow
	oled.draw_triangle(x,y,20,70,angle);
    144c:	59 01       	movw	r10, r18
    144e:	6a 01       	movw	r12, r20
    1450:	e1 2c       	mov	r14, r1
    1452:	f1 2c       	mov	r15, r1
    1454:	0c e8       	ldi	r16, 0x8C	; 140
    1456:	12 e4       	ldi	r17, 0x42	; 66
    1458:	24 e1       	ldi	r18, 0x14	; 20
    145a:	46 2f       	mov	r20, r22
    145c:	68 2f       	mov	r22, r24
    145e:	8a ea       	ldi	r24, 0xAA	; 170
    1460:	92 e0       	ldi	r25, 0x02	; 2
    1462:	0e 94 7f 04 	call	0x8fe	; 0x8fe <_ZN7Display13draw_triangleEhhhff>
}
    1466:	1f 91       	pop	r17
    1468:	0f 91       	pop	r16
    146a:	ff 90       	pop	r15
    146c:	ef 90       	pop	r14
    146e:	df 90       	pop	r13
    1470:	cf 90       	pop	r12
    1472:	bf 90       	pop	r11
    1474:	af 90       	pop	r10
    1476:	08 95       	ret

00001478 <_Z19anzeige_kleinenadelhhf>:
void anzeige_kleinenadel(uint8_t x, uint8_t y, float angle){
    1478:	af 92       	push	r10
    147a:	bf 92       	push	r11
    147c:	cf 92       	push	r12
    147e:	df 92       	push	r13
    1480:	ef 92       	push	r14
    1482:	ff 92       	push	r15
    1484:	0f 93       	push	r16
    1486:	1f 93       	push	r17
	//fixed parameters for drawing the arrow
	oled.draw_triangle(x,y,10,70,angle);
    1488:	59 01       	movw	r10, r18
    148a:	6a 01       	movw	r12, r20
    148c:	e1 2c       	mov	r14, r1
    148e:	f1 2c       	mov	r15, r1
    1490:	0c e8       	ldi	r16, 0x8C	; 140
    1492:	12 e4       	ldi	r17, 0x42	; 66
    1494:	2a e0       	ldi	r18, 0x0A	; 10
    1496:	46 2f       	mov	r20, r22
    1498:	68 2f       	mov	r22, r24
    149a:	8a ea       	ldi	r24, 0xAA	; 170
    149c:	92 e0       	ldi	r25, 0x02	; 2
    149e:	0e 94 7f 04 	call	0x8fe	; 0x8fe <_ZN7Display13draw_triangleEhhhff>
}
    14a2:	1f 91       	pop	r17
    14a4:	0f 91       	pop	r16
    14a6:	ff 90       	pop	r15
    14a8:	ef 90       	pop	r14
    14aa:	df 90       	pop	r13
    14ac:	cf 90       	pop	r12
    14ae:	bf 90       	pop	r11
    14b0:	af 90       	pop	r10
    14b2:	08 95       	ret

000014b4 <_Z11menue_hauptv>:
	for(uint8_t i=((SSD1306_WIDTH/charsize)-8);i<(SSD1306_WIDTH/charsize);i++){
		draw_ASCI(msg_dat[i-((SSD1306_WIDTH/charsize)-8)],i*charsize,7*charhighte);
	}
}
*/
void menue_haupt(){
    14b4:	cf 92       	push	r12
    14b6:	df 92       	push	r13
    14b8:	ef 92       	push	r14
    14ba:	ff 92       	push	r15
    14bc:	0f 93       	push	r16
    14be:	1f 93       	push	r17
    14c0:	cf 93       	push	r28
    14c2:	df 93       	push	r29
    14c4:	cd b7       	in	r28, 0x3d	; 61
    14c6:	de b7       	in	r29, 0x3e	; 62
    14c8:	64 97       	sbiw	r28, 0x14	; 20
    14ca:	0f b6       	in	r0, 0x3f	; 63
    14cc:	f8 94       	cli
    14ce:	de bf       	out	0x3e, r29	; 62
    14d0:	0f be       	out	0x3f, r0	; 63
    14d2:	cd bf       	out	0x3d, r28	; 61
	char buffer[20];
	uint8_t buffersize=0;

	oled.clearFrame();
    14d4:	8a ea       	ldi	r24, 0xAA	; 170
    14d6:	92 e0       	ldi	r25, 0x02	; 2
    14d8:	0e 94 b9 02 	call	0x572	; 0x572 <_ZN7Display10clearFrameEv>
	buffersize=sprintf(buffer,"1:Fahradanzeige");
    14dc:	80 e1       	ldi	r24, 0x10	; 16
    14de:	e6 e3       	ldi	r30, 0x36	; 54
    14e0:	f1 e0       	ldi	r31, 0x01	; 1
    14e2:	8e 01       	movw	r16, r28
    14e4:	0f 5f       	subi	r16, 0xFF	; 255
    14e6:	1f 4f       	sbci	r17, 0xFF	; 255
    14e8:	d8 01       	movw	r26, r16
    14ea:	01 90       	ld	r0, Z+
    14ec:	0d 92       	st	X+, r0
    14ee:	8a 95       	dec	r24
    14f0:	e1 f7       	brne	.-8      	; 0x14ea <_Z11menue_hauptv+0x36>
    14f2:	e0 2e       	mov	r14, r16
    14f4:	f1 2e       	mov	r15, r17
    14f6:	68 01       	movw	r12, r16
    14f8:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,0*charhighte);}
    14fa:	f6 01       	movw	r30, r12
    14fc:	61 91       	ld	r22, Z+
    14fe:	6f 01       	movw	r12, r30
    1500:	20 e0       	ldi	r18, 0x00	; 0
    1502:	41 2f       	mov	r20, r17
    1504:	8a ea       	ldi	r24, 0xAA	; 170
    1506:	92 e0       	ldi	r25, 0x02	; 2
    1508:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    150c:	1a 5f       	subi	r17, 0xFA	; 250
    150e:	1a 35       	cpi	r17, 0x5A	; 90
    1510:	a1 f7       	brne	.-24     	; 0x14fa <_Z11menue_hauptv+0x46>
	buffersize=sprintf(buffer,"2:Taschenrechner");
    1512:	81 e1       	ldi	r24, 0x11	; 17
    1514:	e6 e4       	ldi	r30, 0x46	; 70
    1516:	f1 e0       	ldi	r31, 0x01	; 1
    1518:	de 01       	movw	r26, r28
    151a:	11 96       	adiw	r26, 0x01	; 1
    151c:	01 90       	ld	r0, Z+
    151e:	0d 92       	st	X+, r0
    1520:	8a 95       	dec	r24
    1522:	e1 f7       	brne	.-8      	; 0x151c <_Z11menue_hauptv+0x68>
    1524:	ce 2c       	mov	r12, r14
    1526:	df 2c       	mov	r13, r15
    1528:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,1*charhighte);}
    152a:	f6 01       	movw	r30, r12
    152c:	61 91       	ld	r22, Z+
    152e:	6f 01       	movw	r12, r30
    1530:	28 e0       	ldi	r18, 0x08	; 8
    1532:	41 2f       	mov	r20, r17
    1534:	8a ea       	ldi	r24, 0xAA	; 170
    1536:	92 e0       	ldi	r25, 0x02	; 2
    1538:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    153c:	1a 5f       	subi	r17, 0xFA	; 250
    153e:	10 36       	cpi	r17, 0x60	; 96
    1540:	a1 f7       	brne	.-24     	; 0x152a <_Z11menue_hauptv+0x76>
	buffersize=sprintf(buffer,"3:Kompass");
    1542:	8a e0       	ldi	r24, 0x0A	; 10
    1544:	e7 e5       	ldi	r30, 0x57	; 87
    1546:	f1 e0       	ldi	r31, 0x01	; 1
    1548:	de 01       	movw	r26, r28
    154a:	11 96       	adiw	r26, 0x01	; 1
    154c:	01 90       	ld	r0, Z+
    154e:	0d 92       	st	X+, r0
    1550:	8a 95       	dec	r24
    1552:	e1 f7       	brne	.-8      	; 0x154c <_Z11menue_hauptv+0x98>
    1554:	ce 2c       	mov	r12, r14
    1556:	df 2c       	mov	r13, r15
    1558:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,2*charhighte);}
    155a:	f6 01       	movw	r30, r12
    155c:	61 91       	ld	r22, Z+
    155e:	6f 01       	movw	r12, r30
    1560:	20 e1       	ldi	r18, 0x10	; 16
    1562:	41 2f       	mov	r20, r17
    1564:	8a ea       	ldi	r24, 0xAA	; 170
    1566:	92 e0       	ldi	r25, 0x02	; 2
    1568:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    156c:	1a 5f       	subi	r17, 0xFA	; 250
    156e:	16 33       	cpi	r17, 0x36	; 54
    1570:	a1 f7       	brne	.-24     	; 0x155a <_Z11menue_hauptv+0xa6>
	buffersize=sprintf(buffer,"4:Uhrmenue");
    1572:	8b e0       	ldi	r24, 0x0B	; 11
    1574:	e1 e6       	ldi	r30, 0x61	; 97
    1576:	f1 e0       	ldi	r31, 0x01	; 1
    1578:	de 01       	movw	r26, r28
    157a:	11 96       	adiw	r26, 0x01	; 1
    157c:	01 90       	ld	r0, Z+
    157e:	0d 92       	st	X+, r0
    1580:	8a 95       	dec	r24
    1582:	e1 f7       	brne	.-8      	; 0x157c <_Z11menue_hauptv+0xc8>
    1584:	ce 2c       	mov	r12, r14
    1586:	df 2c       	mov	r13, r15
    1588:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,3*charhighte);}
    158a:	f6 01       	movw	r30, r12
    158c:	61 91       	ld	r22, Z+
    158e:	6f 01       	movw	r12, r30
    1590:	28 e1       	ldi	r18, 0x18	; 24
    1592:	41 2f       	mov	r20, r17
    1594:	8a ea       	ldi	r24, 0xAA	; 170
    1596:	92 e0       	ldi	r25, 0x02	; 2
    1598:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    159c:	1a 5f       	subi	r17, 0xFA	; 250
    159e:	1c 33       	cpi	r17, 0x3C	; 60
    15a0:	a1 f7       	brne	.-24     	; 0x158a <_Z11menue_hauptv+0xd6>
	buffersize=sprintf(buffer,"5:Einstellungen");
    15a2:	80 e1       	ldi	r24, 0x10	; 16
    15a4:	ec e6       	ldi	r30, 0x6C	; 108
    15a6:	f1 e0       	ldi	r31, 0x01	; 1
    15a8:	de 01       	movw	r26, r28
    15aa:	11 96       	adiw	r26, 0x01	; 1
    15ac:	01 90       	ld	r0, Z+
    15ae:	0d 92       	st	X+, r0
    15b0:	8a 95       	dec	r24
    15b2:	e1 f7       	brne	.-8      	; 0x15ac <_Z11menue_hauptv+0xf8>
    15b4:	ce 2c       	mov	r12, r14
    15b6:	df 2c       	mov	r13, r15
    15b8:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,4*charhighte);}
    15ba:	f6 01       	movw	r30, r12
    15bc:	61 91       	ld	r22, Z+
    15be:	6f 01       	movw	r12, r30
    15c0:	20 e2       	ldi	r18, 0x20	; 32
    15c2:	41 2f       	mov	r20, r17
    15c4:	8a ea       	ldi	r24, 0xAA	; 170
    15c6:	92 e0       	ldi	r25, 0x02	; 2
    15c8:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    15cc:	1a 5f       	subi	r17, 0xFA	; 250
    15ce:	1a 35       	cpi	r17, 0x5A	; 90
    15d0:	a1 f7       	brne	.-24     	; 0x15ba <_Z11menue_hauptv+0x106>
	buffersize=sprintf(buffer,"6:Display aus");
    15d2:	8e e0       	ldi	r24, 0x0E	; 14
    15d4:	ec e7       	ldi	r30, 0x7C	; 124
    15d6:	f1 e0       	ldi	r31, 0x01	; 1
    15d8:	de 01       	movw	r26, r28
    15da:	11 96       	adiw	r26, 0x01	; 1
    15dc:	01 90       	ld	r0, Z+
    15de:	0d 92       	st	X+, r0
    15e0:	8a 95       	dec	r24
    15e2:	e1 f7       	brne	.-8      	; 0x15dc <_Z11menue_hauptv+0x128>
    15e4:	ce 2c       	mov	r12, r14
    15e6:	df 2c       	mov	r13, r15
    15e8:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,5*charhighte);}
    15ea:	f6 01       	movw	r30, r12
    15ec:	61 91       	ld	r22, Z+
    15ee:	6f 01       	movw	r12, r30
    15f0:	28 e2       	ldi	r18, 0x28	; 40
    15f2:	41 2f       	mov	r20, r17
    15f4:	8a ea       	ldi	r24, 0xAA	; 170
    15f6:	92 e0       	ldi	r25, 0x02	; 2
    15f8:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    15fc:	1a 5f       	subi	r17, 0xFA	; 250
    15fe:	1e 34       	cpi	r17, 0x4E	; 78
    1600:	a1 f7       	brne	.-24     	; 0x15ea <_Z11menue_hauptv+0x136>
	//buffersize=sprintf(buffer,"7:Uhr einstellen");
	//for(uint8_t i=0;i<buffersize;i++){draw_ASCI(oled.buffer[i],i*charsize,6*charhighte);}
}
    1602:	64 96       	adiw	r28, 0x14	; 20
    1604:	0f b6       	in	r0, 0x3f	; 63
    1606:	f8 94       	cli
    1608:	de bf       	out	0x3e, r29	; 62
    160a:	0f be       	out	0x3f, r0	; 63
    160c:	cd bf       	out	0x3d, r28	; 61
    160e:	df 91       	pop	r29
    1610:	cf 91       	pop	r28
    1612:	1f 91       	pop	r17
    1614:	0f 91       	pop	r16
    1616:	ff 90       	pop	r15
    1618:	ef 90       	pop	r14
    161a:	df 90       	pop	r13
    161c:	cf 90       	pop	r12
    161e:	08 95       	ret

00001620 <_Z11menue_einstv>:
void menue_einst(){
    1620:	af 92       	push	r10
    1622:	bf 92       	push	r11
    1624:	df 92       	push	r13
    1626:	ef 92       	push	r14
    1628:	0f 93       	push	r16
    162a:	1f 93       	push	r17
    162c:	cf 93       	push	r28
    162e:	df 93       	push	r29
    1630:	cd b7       	in	r28, 0x3d	; 61
    1632:	de b7       	in	r29, 0x3e	; 62
    1634:	64 97       	sbiw	r28, 0x14	; 20
    1636:	0f b6       	in	r0, 0x3f	; 63
    1638:	f8 94       	cli
    163a:	de bf       	out	0x3e, r29	; 62
    163c:	0f be       	out	0x3f, r0	; 63
    163e:	cd bf       	out	0x3d, r28	; 61
	char buffer[20];
	uint8_t buffersize=0;

	oled.clearFrame();
    1640:	8a ea       	ldi	r24, 0xAA	; 170
    1642:	92 e0       	ldi	r25, 0x02	; 2
    1644:	0e 94 b9 02 	call	0x572	; 0x572 <_ZN7Display10clearFrameEv>
	buffersize=sprintf(buffer,"1:Kompass kalib.");
    1648:	81 e1       	ldi	r24, 0x11	; 17
    164a:	ea e8       	ldi	r30, 0x8A	; 138
    164c:	f1 e0       	ldi	r31, 0x01	; 1
    164e:	8e 01       	movw	r16, r28
    1650:	0f 5f       	subi	r16, 0xFF	; 255
    1652:	1f 4f       	sbci	r17, 0xFF	; 255
    1654:	d8 01       	movw	r26, r16
    1656:	01 90       	ld	r0, Z+
    1658:	0d 92       	st	X+, r0
    165a:	8a 95       	dec	r24
    165c:	e1 f7       	brne	.-8      	; 0x1656 <_Z11menue_einstv+0x36>
    165e:	d0 2e       	mov	r13, r16
    1660:	e1 2e       	mov	r14, r17
    1662:	58 01       	movw	r10, r16
    1664:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,0*charhighte);}
    1666:	f5 01       	movw	r30, r10
    1668:	61 91       	ld	r22, Z+
    166a:	5f 01       	movw	r10, r30
    166c:	20 e0       	ldi	r18, 0x00	; 0
    166e:	41 2f       	mov	r20, r17
    1670:	8a ea       	ldi	r24, 0xAA	; 170
    1672:	92 e0       	ldi	r25, 0x02	; 2
    1674:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    1678:	1a 5f       	subi	r17, 0xFA	; 250
    167a:	10 36       	cpi	r17, 0x60	; 96
    167c:	a1 f7       	brne	.-24     	; 0x1666 <_Z11menue_einstv+0x46>
	buffersize=sprintf(buffer,"2:Kompassverstaerkung");
    167e:	86 e1       	ldi	r24, 0x16	; 22
    1680:	eb e9       	ldi	r30, 0x9B	; 155
    1682:	f1 e0       	ldi	r31, 0x01	; 1
    1684:	de 01       	movw	r26, r28
    1686:	11 96       	adiw	r26, 0x01	; 1
    1688:	01 90       	ld	r0, Z+
    168a:	0d 92       	st	X+, r0
    168c:	8a 95       	dec	r24
    168e:	e1 f7       	brne	.-8      	; 0x1688 <_Z11menue_einstv+0x68>
    1690:	ad 2c       	mov	r10, r13
    1692:	be 2c       	mov	r11, r14
    1694:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,1*charhighte);}
    1696:	f5 01       	movw	r30, r10
    1698:	61 91       	ld	r22, Z+
    169a:	5f 01       	movw	r10, r30
    169c:	28 e0       	ldi	r18, 0x08	; 8
    169e:	41 2f       	mov	r20, r17
    16a0:	8a ea       	ldi	r24, 0xAA	; 170
    16a2:	92 e0       	ldi	r25, 0x02	; 2
    16a4:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    16a8:	1a 5f       	subi	r17, 0xFA	; 250
    16aa:	1e 37       	cpi	r17, 0x7E	; 126
    16ac:	a1 f7       	brne	.-24     	; 0x1696 <_Z11menue_einstv+0x76>
	buffersize=sprintf(buffer,"3:Uhr einstellen");
    16ae:	81 e1       	ldi	r24, 0x11	; 17
    16b0:	e1 eb       	ldi	r30, 0xB1	; 177
    16b2:	f1 e0       	ldi	r31, 0x01	; 1
    16b4:	de 01       	movw	r26, r28
    16b6:	11 96       	adiw	r26, 0x01	; 1
    16b8:	01 90       	ld	r0, Z+
    16ba:	0d 92       	st	X+, r0
    16bc:	8a 95       	dec	r24
    16be:	e1 f7       	brne	.-8      	; 0x16b8 <_Z11menue_einstv+0x98>
    16c0:	ad 2c       	mov	r10, r13
    16c2:	be 2c       	mov	r11, r14
    16c4:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,2*charhighte);}
    16c6:	f5 01       	movw	r30, r10
    16c8:	61 91       	ld	r22, Z+
    16ca:	5f 01       	movw	r10, r30
    16cc:	20 e1       	ldi	r18, 0x10	; 16
    16ce:	41 2f       	mov	r20, r17
    16d0:	8a ea       	ldi	r24, 0xAA	; 170
    16d2:	92 e0       	ldi	r25, 0x02	; 2
    16d4:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    16d8:	1a 5f       	subi	r17, 0xFA	; 250
    16da:	10 36       	cpi	r17, 0x60	; 96
    16dc:	a1 f7       	brne	.-24     	; 0x16c6 <_Z11menue_einstv+0xa6>
	//for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,4*charhighte);}
	//buffersize=sprintf(buffer,"6:HMC5883L Gain");
	//for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,5*charhighte);}
	//buffersize=sprintf(buffer,"7:Uhr einstellen");
	//for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,6*charhighte);}
}
    16de:	64 96       	adiw	r28, 0x14	; 20
    16e0:	0f b6       	in	r0, 0x3f	; 63
    16e2:	f8 94       	cli
    16e4:	de bf       	out	0x3e, r29	; 62
    16e6:	0f be       	out	0x3f, r0	; 63
    16e8:	cd bf       	out	0x3d, r28	; 61
    16ea:	df 91       	pop	r29
    16ec:	cf 91       	pop	r28
    16ee:	1f 91       	pop	r17
    16f0:	0f 91       	pop	r16
    16f2:	ef 90       	pop	r14
    16f4:	df 90       	pop	r13
    16f6:	bf 90       	pop	r11
    16f8:	af 90       	pop	r10
    16fa:	08 95       	ret

000016fc <_Z9menue_uhrv>:
void menue_uhr(){
    16fc:	af 92       	push	r10
    16fe:	bf 92       	push	r11
    1700:	df 92       	push	r13
    1702:	ef 92       	push	r14
    1704:	0f 93       	push	r16
    1706:	1f 93       	push	r17
    1708:	cf 93       	push	r28
    170a:	df 93       	push	r29
    170c:	cd b7       	in	r28, 0x3d	; 61
    170e:	de b7       	in	r29, 0x3e	; 62
    1710:	64 97       	sbiw	r28, 0x14	; 20
    1712:	0f b6       	in	r0, 0x3f	; 63
    1714:	f8 94       	cli
    1716:	de bf       	out	0x3e, r29	; 62
    1718:	0f be       	out	0x3f, r0	; 63
    171a:	cd bf       	out	0x3d, r28	; 61
	char buffer[20];
	uint8_t buffersize=0;

	oled.clearFrame();
    171c:	8a ea       	ldi	r24, 0xAA	; 170
    171e:	92 e0       	ldi	r25, 0x02	; 2
    1720:	0e 94 b9 02 	call	0x572	; 0x572 <_ZN7Display10clearFrameEv>
	buffersize=sprintf(buffer,"1:Uhr");
    1724:	86 e0       	ldi	r24, 0x06	; 6
    1726:	e2 ec       	ldi	r30, 0xC2	; 194
    1728:	f1 e0       	ldi	r31, 0x01	; 1
    172a:	8e 01       	movw	r16, r28
    172c:	0f 5f       	subi	r16, 0xFF	; 255
    172e:	1f 4f       	sbci	r17, 0xFF	; 255
    1730:	d8 01       	movw	r26, r16
    1732:	01 90       	ld	r0, Z+
    1734:	0d 92       	st	X+, r0
    1736:	8a 95       	dec	r24
    1738:	e1 f7       	brne	.-8      	; 0x1732 <_Z9menue_uhrv+0x36>
    173a:	d0 2e       	mov	r13, r16
    173c:	e1 2e       	mov	r14, r17
    173e:	58 01       	movw	r10, r16
    1740:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,0*charhighte);}
    1742:	f5 01       	movw	r30, r10
    1744:	61 91       	ld	r22, Z+
    1746:	5f 01       	movw	r10, r30
    1748:	20 e0       	ldi	r18, 0x00	; 0
    174a:	41 2f       	mov	r20, r17
    174c:	8a ea       	ldi	r24, 0xAA	; 170
    174e:	92 e0       	ldi	r25, 0x02	; 2
    1750:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    1754:	1a 5f       	subi	r17, 0xFA	; 250
    1756:	1e 31       	cpi	r17, 0x1E	; 30
    1758:	a1 f7       	brne	.-24     	; 0x1742 <_Z9menue_uhrv+0x46>
	buffersize=sprintf(buffer,"2:Stoppuhr");
    175a:	8b e0       	ldi	r24, 0x0B	; 11
    175c:	e8 ec       	ldi	r30, 0xC8	; 200
    175e:	f1 e0       	ldi	r31, 0x01	; 1
    1760:	de 01       	movw	r26, r28
    1762:	11 96       	adiw	r26, 0x01	; 1
    1764:	01 90       	ld	r0, Z+
    1766:	0d 92       	st	X+, r0
    1768:	8a 95       	dec	r24
    176a:	e1 f7       	brne	.-8      	; 0x1764 <_Z9menue_uhrv+0x68>
    176c:	ad 2c       	mov	r10, r13
    176e:	be 2c       	mov	r11, r14
    1770:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,1*charhighte);}
    1772:	f5 01       	movw	r30, r10
    1774:	61 91       	ld	r22, Z+
    1776:	5f 01       	movw	r10, r30
    1778:	28 e0       	ldi	r18, 0x08	; 8
    177a:	41 2f       	mov	r20, r17
    177c:	8a ea       	ldi	r24, 0xAA	; 170
    177e:	92 e0       	ldi	r25, 0x02	; 2
    1780:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    1784:	1a 5f       	subi	r17, 0xFA	; 250
    1786:	1c 33       	cpi	r17, 0x3C	; 60
    1788:	a1 f7       	brne	.-24     	; 0x1772 <_Z9menue_uhrv+0x76>
	buffersize=sprintf(buffer,"3:Timer");
    178a:	88 e0       	ldi	r24, 0x08	; 8
    178c:	e3 ed       	ldi	r30, 0xD3	; 211
    178e:	f1 e0       	ldi	r31, 0x01	; 1
    1790:	de 01       	movw	r26, r28
    1792:	11 96       	adiw	r26, 0x01	; 1
    1794:	01 90       	ld	r0, Z+
    1796:	0d 92       	st	X+, r0
    1798:	8a 95       	dec	r24
    179a:	e1 f7       	brne	.-8      	; 0x1794 <_Z9menue_uhrv+0x98>
    179c:	ad 2c       	mov	r10, r13
    179e:	be 2c       	mov	r11, r14
    17a0:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,2*charhighte);}
    17a2:	f5 01       	movw	r30, r10
    17a4:	61 91       	ld	r22, Z+
    17a6:	5f 01       	movw	r10, r30
    17a8:	20 e1       	ldi	r18, 0x10	; 16
    17aa:	41 2f       	mov	r20, r17
    17ac:	8a ea       	ldi	r24, 0xAA	; 170
    17ae:	92 e0       	ldi	r25, 0x02	; 2
    17b0:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    17b4:	1a 5f       	subi	r17, 0xFA	; 250
    17b6:	1a 32       	cpi	r17, 0x2A	; 42
    17b8:	a1 f7       	brne	.-24     	; 0x17a2 <_Z9menue_uhrv+0xa6>
	buffersize=sprintf(buffer,"4:Alarm");
    17ba:	88 e0       	ldi	r24, 0x08	; 8
    17bc:	eb ed       	ldi	r30, 0xDB	; 219
    17be:	f1 e0       	ldi	r31, 0x01	; 1
    17c0:	de 01       	movw	r26, r28
    17c2:	11 96       	adiw	r26, 0x01	; 1
    17c4:	01 90       	ld	r0, Z+
    17c6:	0d 92       	st	X+, r0
    17c8:	8a 95       	dec	r24
    17ca:	e1 f7       	brne	.-8      	; 0x17c4 <_Z9menue_uhrv+0xc8>
    17cc:	ad 2c       	mov	r10, r13
    17ce:	be 2c       	mov	r11, r14
    17d0:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,3*charhighte);}
    17d2:	f5 01       	movw	r30, r10
    17d4:	61 91       	ld	r22, Z+
    17d6:	5f 01       	movw	r10, r30
    17d8:	28 e1       	ldi	r18, 0x18	; 24
    17da:	41 2f       	mov	r20, r17
    17dc:	8a ea       	ldi	r24, 0xAA	; 170
    17de:	92 e0       	ldi	r25, 0x02	; 2
    17e0:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    17e4:	1a 5f       	subi	r17, 0xFA	; 250
    17e6:	1a 32       	cpi	r17, 0x2A	; 42
    17e8:	a1 f7       	brne	.-24     	; 0x17d2 <_Z9menue_uhrv+0xd6>
	//for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,4*charhighte);}
	//buffersize=sprintf(buffer,"6:HMC5883L Gain");
	//for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,5*charhighte);}
	//buffersize=sprintf(buffer,"7:Uhr einstellen");
	//for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,6*charhighte);}
}
    17ea:	64 96       	adiw	r28, 0x14	; 20
    17ec:	0f b6       	in	r0, 0x3f	; 63
    17ee:	f8 94       	cli
    17f0:	de bf       	out	0x3e, r29	; 62
    17f2:	0f be       	out	0x3f, r0	; 63
    17f4:	cd bf       	out	0x3d, r28	; 61
    17f6:	df 91       	pop	r29
    17f8:	cf 91       	pop	r28
    17fa:	1f 91       	pop	r17
    17fc:	0f 91       	pop	r16
    17fe:	ef 90       	pop	r14
    1800:	df 90       	pop	r13
    1802:	bf 90       	pop	r11
    1804:	af 90       	pop	r10
    1806:	08 95       	ret

00001808 <_Z11uhranzeigenv>:

void uhranzeigen(){
    1808:	df 92       	push	r13
    180a:	ef 92       	push	r14
    180c:	ff 92       	push	r15
    180e:	0f 93       	push	r16
    1810:	1f 93       	push	r17
    1812:	cf 93       	push	r28
    1814:	df 93       	push	r29
    1816:	cd b7       	in	r28, 0x3d	; 61
    1818:	de b7       	in	r29, 0x3e	; 62
    181a:	64 97       	sbiw	r28, 0x14	; 20
    181c:	0f b6       	in	r0, 0x3f	; 63
    181e:	f8 94       	cli
    1820:	de bf       	out	0x3e, r29	; 62
    1822:	0f be       	out	0x3f, r0	; 63
    1824:	cd bf       	out	0x3d, r28	; 61
	uint8_t buffersize;
	char Buffer[20];
	oled.clearFrame();
    1826:	8a ea       	ldi	r24, 0xAA	; 170
    1828:	92 e0       	ldi	r25, 0x02	; 2
    182a:	0e 94 b9 02 	call	0x572	; 0x572 <_ZN7Display10clearFrameEv>
	oled.analog(rtc.Stunden,rtc.Minuten,rtc.Sekunden);
    182e:	20 91 d5 06 	lds	r18, 0x06D5
    1832:	40 91 d4 06 	lds	r20, 0x06D4
    1836:	60 91 d3 06 	lds	r22, 0x06D3
    183a:	8a ea       	ldi	r24, 0xAA	; 170
    183c:	92 e0       	ldi	r25, 0x02	; 2
    183e:	0e 94 68 06 	call	0xcd0	; 0xcd0 <_ZN7Display6analogEhhh>
    1842:	0f 2e       	mov	r0, r31
    1844:	fb ec       	ldi	r31, 0xCB	; 203
    1846:	ef 2e       	mov	r14, r31
    1848:	f6 e0       	ldi	r31, 0x06	; 6
    184a:	ff 2e       	mov	r15, r31
    184c:	f0 2d       	mov	r31, r0
    184e:	11 e4       	ldi	r17, 0x41	; 65
	for(uint8_t i=0;i<bitsderrtc;i++){oled.draw_ASCI(rtc.msg_uhr[i],65+i*charsize,0);}
    1850:	f7 01       	movw	r30, r14
    1852:	61 91       	ld	r22, Z+
    1854:	7f 01       	movw	r14, r30
    1856:	20 e0       	ldi	r18, 0x00	; 0
    1858:	41 2f       	mov	r20, r17
    185a:	8a ea       	ldi	r24, 0xAA	; 170
    185c:	92 e0       	ldi	r25, 0x02	; 2
    185e:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    1862:	1a 5f       	subi	r17, 0xFA	; 250
    1864:	11 37       	cpi	r17, 0x71	; 113
    1866:	a1 f7       	brne	.-24     	; 0x1850 <_Z11uhranzeigenv+0x48>
	buffersize=sprintf(Buffer,"%i%%",Batteriestatus());
    1868:	0e 94 19 08 	call	0x1032	; 0x1032 <_Z14Batteriestatusv>
    186c:	28 2f       	mov	r18, r24
    186e:	33 27       	eor	r19, r19
    1870:	27 fd       	sbrc	r18, 7
    1872:	30 95       	com	r19
    1874:	3f 93       	push	r19
    1876:	8f 93       	push	r24
    1878:	81 e3       	ldi	r24, 0x31	; 49
    187a:	91 e0       	ldi	r25, 0x01	; 1
    187c:	9f 93       	push	r25
    187e:	8f 93       	push	r24
    1880:	ce 01       	movw	r24, r28
    1882:	01 96       	adiw	r24, 0x01	; 1
    1884:	9f 93       	push	r25
    1886:	8f 93       	push	r24
    1888:	0e 94 98 23 	call	0x4730	; 0x4730 <sprintf>
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(Buffer[i],65+i*charsize,2*charhighte);}
    188c:	0f 90       	pop	r0
    188e:	0f 90       	pop	r0
    1890:	0f 90       	pop	r0
    1892:	0f 90       	pop	r0
    1894:	0f 90       	pop	r0
    1896:	0f 90       	pop	r0
    1898:	88 23       	and	r24, r24
    189a:	f1 f0       	breq	.+60     	; 0x18d8 <_Z11uhranzeigenv+0xd0>
    189c:	8e 01       	movw	r16, r28
    189e:	0f 5f       	subi	r16, 0xFF	; 255
    18a0:	1f 4f       	sbci	r17, 0xFF	; 255
    18a2:	81 50       	subi	r24, 0x01	; 1
    18a4:	68 94       	set
    18a6:	ee 24       	eor	r14, r14
    18a8:	e1 f8       	bld	r14, 1
    18aa:	f1 2c       	mov	r15, r1
    18ac:	ec 0e       	add	r14, r28
    18ae:	fd 1e       	adc	r15, r29
    18b0:	e8 0e       	add	r14, r24
    18b2:	f1 1c       	adc	r15, r1
    18b4:	0f 2e       	mov	r0, r31
    18b6:	f1 e4       	ldi	r31, 0x41	; 65
    18b8:	df 2e       	mov	r13, r31
    18ba:	f0 2d       	mov	r31, r0
    18bc:	f8 01       	movw	r30, r16
    18be:	61 91       	ld	r22, Z+
    18c0:	8f 01       	movw	r16, r30
    18c2:	20 e1       	ldi	r18, 0x10	; 16
    18c4:	4d 2d       	mov	r20, r13
    18c6:	8a ea       	ldi	r24, 0xAA	; 170
    18c8:	92 e0       	ldi	r25, 0x02	; 2
    18ca:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    18ce:	f6 e0       	ldi	r31, 0x06	; 6
    18d0:	df 0e       	add	r13, r31
    18d2:	0e 15       	cp	r16, r14
    18d4:	1f 05       	cpc	r17, r15
    18d6:	91 f7       	brne	.-28     	; 0x18bc <_Z11uhranzeigenv+0xb4>
	buffersize=sprintf(Buffer,"%.3fV",batterie);
    18d8:	80 91 a8 02 	lds	r24, 0x02A8
    18dc:	8f 93       	push	r24
    18de:	80 91 a7 02 	lds	r24, 0x02A7
    18e2:	8f 93       	push	r24
    18e4:	80 91 a6 02 	lds	r24, 0x02A6
    18e8:	8f 93       	push	r24
    18ea:	80 91 a5 02 	lds	r24, 0x02A5
    18ee:	8f 93       	push	r24
    18f0:	83 ee       	ldi	r24, 0xE3	; 227
    18f2:	91 e0       	ldi	r25, 0x01	; 1
    18f4:	9f 93       	push	r25
    18f6:	8f 93       	push	r24
    18f8:	ce 01       	movw	r24, r28
    18fa:	01 96       	adiw	r24, 0x01	; 1
    18fc:	9f 93       	push	r25
    18fe:	8f 93       	push	r24
    1900:	0e 94 98 23 	call	0x4730	; 0x4730 <sprintf>
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(Buffer[i],65+i*charsize,3*charhighte);}
    1904:	0f b6       	in	r0, 0x3f	; 63
    1906:	f8 94       	cli
    1908:	de bf       	out	0x3e, r29	; 62
    190a:	0f be       	out	0x3f, r0	; 63
    190c:	cd bf       	out	0x3d, r28	; 61
    190e:	88 23       	and	r24, r24
    1910:	f1 f0       	breq	.+60     	; 0x194e <_Z11uhranzeigenv+0x146>
    1912:	8e 01       	movw	r16, r28
    1914:	0f 5f       	subi	r16, 0xFF	; 255
    1916:	1f 4f       	sbci	r17, 0xFF	; 255
    1918:	81 50       	subi	r24, 0x01	; 1
    191a:	68 94       	set
    191c:	ee 24       	eor	r14, r14
    191e:	e1 f8       	bld	r14, 1
    1920:	f1 2c       	mov	r15, r1
    1922:	ec 0e       	add	r14, r28
    1924:	fd 1e       	adc	r15, r29
    1926:	e8 0e       	add	r14, r24
    1928:	f1 1c       	adc	r15, r1
    192a:	0f 2e       	mov	r0, r31
    192c:	f1 e4       	ldi	r31, 0x41	; 65
    192e:	df 2e       	mov	r13, r31
    1930:	f0 2d       	mov	r31, r0
    1932:	f8 01       	movw	r30, r16
    1934:	61 91       	ld	r22, Z+
    1936:	8f 01       	movw	r16, r30
    1938:	28 e1       	ldi	r18, 0x18	; 24
    193a:	4d 2d       	mov	r20, r13
    193c:	8a ea       	ldi	r24, 0xAA	; 170
    193e:	92 e0       	ldi	r25, 0x02	; 2
    1940:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    1944:	f6 e0       	ldi	r31, 0x06	; 6
    1946:	df 0e       	add	r13, r31
    1948:	0e 15       	cp	r16, r14
    194a:	1f 05       	cpc	r17, r15
    194c:	91 f7       	brne	.-28     	; 0x1932 <_Z11uhranzeigenv+0x12a>
}
    194e:	64 96       	adiw	r28, 0x14	; 20
    1950:	0f b6       	in	r0, 0x3f	; 63
    1952:	f8 94       	cli
    1954:	de bf       	out	0x3e, r29	; 62
    1956:	0f be       	out	0x3f, r0	; 63
    1958:	cd bf       	out	0x3d, r28	; 61
    195a:	df 91       	pop	r29
    195c:	cf 91       	pop	r28
    195e:	1f 91       	pop	r17
    1960:	0f 91       	pop	r16
    1962:	ff 90       	pop	r15
    1964:	ef 90       	pop	r14
    1966:	df 90       	pop	r13
    1968:	08 95       	ret

0000196a <_Z12fahradschirmdd>:
	}
	
	return (24*stun+60*min+sek);
}*/

void fahradschirm(double winkelgeschw, double angle){
    196a:	8f 92       	push	r8
    196c:	9f 92       	push	r9
    196e:	af 92       	push	r10
    1970:	bf 92       	push	r11
    1972:	cf 92       	push	r12
    1974:	df 92       	push	r13
    1976:	ef 92       	push	r14
    1978:	ff 92       	push	r15
    197a:	0f 93       	push	r16
    197c:	1f 93       	push	r17
    197e:	cf 93       	push	r28
    1980:	df 93       	push	r29
    1982:	cd b7       	in	r28, 0x3d	; 61
    1984:	de b7       	in	r29, 0x3e	; 62
    1986:	2a 97       	sbiw	r28, 0x0a	; 10
    1988:	0f b6       	in	r0, 0x3f	; 63
    198a:	f8 94       	cli
    198c:	de bf       	out	0x3e, r29	; 62
    198e:	0f be       	out	0x3f, r0	; 63
    1990:	cd bf       	out	0x3d, r28	; 61
    1992:	16 2f       	mov	r17, r22
    1994:	07 2f       	mov	r16, r23
    1996:	f8 2e       	mov	r15, r24
    1998:	e9 2e       	mov	r14, r25
    199a:	a2 2e       	mov	r10, r18
    199c:	b3 2e       	mov	r11, r19
    199e:	c4 2e       	mov	r12, r20
    19a0:	d5 2e       	mov	r13, r21
	char buffer[10];
	uint8_t buffersize=0;
	oled.clearFrame();
    19a2:	8a ea       	ldi	r24, 0xAA	; 170
    19a4:	92 e0       	ldi	r25, 0x02	; 2
    19a6:	0e 94 b9 02 	call	0x572	; 0x572 <_ZN7Display10clearFrameEv>
	header(0);
    19aa:	80 e0       	ldi	r24, 0x00	; 0
    19ac:	0e 94 f6 08 	call	0x11ec	; 0x11ec <_Z6headerh>
	//bottom();
	//Ausgabe der Geschwidigkeit
	buffersize=sprintf(buffer,"%3.1f",winkelgeschw);
    19b0:	ef 92       	push	r14
    19b2:	ff 92       	push	r15
    19b4:	0f 93       	push	r16
    19b6:	1f 93       	push	r17
    19b8:	89 ee       	ldi	r24, 0xE9	; 233
    19ba:	91 e0       	ldi	r25, 0x01	; 1
    19bc:	9f 93       	push	r25
    19be:	8f 93       	push	r24
    19c0:	ce 01       	movw	r24, r28
    19c2:	01 96       	adiw	r24, 0x01	; 1
    19c4:	9f 93       	push	r25
    19c6:	8f 93       	push	r24
    19c8:	0e 94 98 23 	call	0x4730	; 0x4730 <sprintf>
	for(uint8_t i=((SSD1306_WIDTH/numbersmalsize)-buffersize-1);i<((SSD1306_WIDTH/numbersmalsize)-1);i++){
    19cc:	27 e0       	ldi	r18, 0x07	; 7
    19ce:	f2 2e       	mov	r15, r18
    19d0:	f8 1a       	sub	r15, r24
    19d2:	0f b6       	in	r0, 0x3f	; 63
    19d4:	f8 94       	cli
    19d6:	de bf       	out	0x3e, r29	; 62
    19d8:	0f be       	out	0x3f, r0	; 63
    19da:	cd bf       	out	0x3d, r28	; 61
    19dc:	36 e0       	ldi	r19, 0x06	; 6
    19de:	3f 15       	cp	r19, r15
    19e0:	38 f1       	brcs	.+78     	; 0x1a30 <_Z12fahradschirmdd+0xc6>
    19e2:	ef 2c       	mov	r14, r15
    19e4:	ee 0c       	add	r14, r14
    19e6:	ee 0c       	add	r14, r14
    19e8:	ee 0c       	add	r14, r14
    19ea:	ee 0c       	add	r14, r14
		if(buffer[i-((SSD1306_WIDTH/numbersmalsize)-buffersize-1)]=='.'){
    19ec:	8c 01       	movw	r16, r24
    19ee:	11 27       	eor	r17, r17
    19f0:	e1 e0       	ldi	r30, 0x01	; 1
    19f2:	f0 e0       	ldi	r31, 0x00	; 0
    19f4:	ec 0f       	add	r30, r28
    19f6:	fd 1f       	adc	r31, r29
    19f8:	ef 0d       	add	r30, r15
    19fa:	f1 1d       	adc	r31, r1
    19fc:	e0 0f       	add	r30, r16
    19fe:	f1 1f       	adc	r31, r17
    1a00:	37 97       	sbiw	r30, 0x07	; 7
    1a02:	60 81       	ld	r22, Z
    1a04:	6e 32       	cpi	r22, 0x2E	; 46
    1a06:	39 f4       	brne	.+14     	; 0x1a16 <_Z12fahradschirmdd+0xac>
			oled.draw_ASCI(buffer[i-((SSD1306_WIDTH/numbersmalsize)-buffersize-1)],i*numbersmalsize,4*charhighte);
    1a08:	20 e2       	ldi	r18, 0x20	; 32
    1a0a:	4e 2d       	mov	r20, r14
    1a0c:	8a ea       	ldi	r24, 0xAA	; 170
    1a0e:	92 e0       	ldi	r25, 0x02	; 2
    1a10:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    1a14:	07 c0       	rjmp	.+14     	; 0x1a24 <_Z12fahradschirmdd+0xba>
		}
		else{
			oled.draw_number16x16(buffer[i-((SSD1306_WIDTH/numbersmalsize)-buffersize-1)]-'0',i*numbersmalsize,3*charhighte);
    1a16:	60 53       	subi	r22, 0x30	; 48
    1a18:	28 e1       	ldi	r18, 0x18	; 24
    1a1a:	4e 2d       	mov	r20, r14
    1a1c:	8a ea       	ldi	r24, 0xAA	; 170
    1a1e:	92 e0       	ldi	r25, 0x02	; 2
    1a20:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <_ZN7Display16draw_number16x16Ehhh>
	oled.clearFrame();
	header(0);
	//bottom();
	//Ausgabe der Geschwidigkeit
	buffersize=sprintf(buffer,"%3.1f",winkelgeschw);
	for(uint8_t i=((SSD1306_WIDTH/numbersmalsize)-buffersize-1);i<((SSD1306_WIDTH/numbersmalsize)-1);i++){
    1a24:	f3 94       	inc	r15
    1a26:	80 e1       	ldi	r24, 0x10	; 16
    1a28:	e8 0e       	add	r14, r24
    1a2a:	97 e0       	ldi	r25, 0x07	; 7
    1a2c:	f9 12       	cpse	r15, r25
    1a2e:	e0 cf       	rjmp	.-64     	; 0x19f0 <_Z12fahradschirmdd+0x86>
		}
		else{
			oled.draw_number16x16(buffer[i-((SSD1306_WIDTH/numbersmalsize)-buffersize-1)]-'0',i*numbersmalsize,3*charhighte);
		}
	}
	oled.draw_ASCI('k',((SSD1306_WIDTH/charsize-2)*charsize),3*charhighte);
    1a30:	28 e1       	ldi	r18, 0x18	; 24
    1a32:	42 e7       	ldi	r20, 0x72	; 114
    1a34:	6b e6       	ldi	r22, 0x6B	; 107
    1a36:	8a ea       	ldi	r24, 0xAA	; 170
    1a38:	92 e0       	ldi	r25, 0x02	; 2
    1a3a:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
	oled.draw_ASCI('m',((SSD1306_WIDTH/charsize-1)*charsize),3*charhighte);
    1a3e:	28 e1       	ldi	r18, 0x18	; 24
    1a40:	48 e7       	ldi	r20, 0x78	; 120
    1a42:	6d e6       	ldi	r22, 0x6D	; 109
    1a44:	8a ea       	ldi	r24, 0xAA	; 170
    1a46:	92 e0       	ldi	r25, 0x02	; 2
    1a48:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
	oled.draw_ASCI('h',((SSD1306_WIDTH/charsize-2)*charsize),4*charhighte);
    1a4c:	20 e2       	ldi	r18, 0x20	; 32
    1a4e:	42 e7       	ldi	r20, 0x72	; 114
    1a50:	68 e6       	ldi	r22, 0x68	; 104
    1a52:	8a ea       	ldi	r24, 0xAA	; 170
    1a54:	92 e0       	ldi	r25, 0x02	; 2
    1a56:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
	//winkelausgabe
	buffersize=sprintf(buffer,"%3.1f",angle);
    1a5a:	df 92       	push	r13
    1a5c:	cf 92       	push	r12
    1a5e:	bf 92       	push	r11
    1a60:	af 92       	push	r10
    1a62:	89 ee       	ldi	r24, 0xE9	; 233
    1a64:	91 e0       	ldi	r25, 0x01	; 1
    1a66:	9f 93       	push	r25
    1a68:	8f 93       	push	r24
    1a6a:	ce 01       	movw	r24, r28
    1a6c:	01 96       	adiw	r24, 0x01	; 1
    1a6e:	9f 93       	push	r25
    1a70:	8f 93       	push	r24
    1a72:	0e 94 98 23 	call	0x4730	; 0x4730 <sprintf>
    1a76:	88 2e       	mov	r8, r24
	for (uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,7*charhighte);}
    1a78:	0f b6       	in	r0, 0x3f	; 63
    1a7a:	f8 94       	cli
    1a7c:	de bf       	out	0x3e, r29	; 62
    1a7e:	0f be       	out	0x3f, r0	; 63
    1a80:	cd bf       	out	0x3d, r28	; 61
    1a82:	88 23       	and	r24, r24
    1a84:	a9 f0       	breq	.+42     	; 0x1ab0 <_Z12fahradschirmdd+0x146>
    1a86:	9e 01       	movw	r18, r28
    1a88:	2f 5f       	subi	r18, 0xFF	; 255
    1a8a:	3f 4f       	sbci	r19, 0xFF	; 255
    1a8c:	79 01       	movw	r14, r18
    1a8e:	89 01       	movw	r16, r18
    1a90:	91 2c       	mov	r9, r1
    1a92:	f8 01       	movw	r30, r16
    1a94:	61 91       	ld	r22, Z+
    1a96:	8f 01       	movw	r16, r30
    1a98:	28 e3       	ldi	r18, 0x38	; 56
    1a9a:	49 2d       	mov	r20, r9
    1a9c:	8a ea       	ldi	r24, 0xAA	; 170
    1a9e:	92 e0       	ldi	r25, 0x02	; 2
    1aa0:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    1aa4:	f6 e0       	ldi	r31, 0x06	; 6
    1aa6:	9f 0e       	add	r9, r31
    1aa8:	90 2f       	mov	r25, r16
    1aaa:	9e 19       	sub	r25, r14
    1aac:	98 15       	cp	r25, r8
    1aae:	88 f3       	brcs	.-30     	; 0x1a92 <_Z12fahradschirmdd+0x128>
	anzeige_kleinenadel(31,31,angle);
    1ab0:	2a 2d       	mov	r18, r10
    1ab2:	3b 2d       	mov	r19, r11
    1ab4:	4c 2d       	mov	r20, r12
    1ab6:	5d 2d       	mov	r21, r13
    1ab8:	6f e1       	ldi	r22, 0x1F	; 31
    1aba:	8f e1       	ldi	r24, 0x1F	; 31
    1abc:	0e 94 3c 0a 	call	0x1478	; 0x1478 <_Z19anzeige_kleinenadelhhf>
}
    1ac0:	2a 96       	adiw	r28, 0x0a	; 10
    1ac2:	0f b6       	in	r0, 0x3f	; 63
    1ac4:	f8 94       	cli
    1ac6:	de bf       	out	0x3e, r29	; 62
    1ac8:	0f be       	out	0x3f, r0	; 63
    1aca:	cd bf       	out	0x3d, r28	; 61
    1acc:	df 91       	pop	r29
    1ace:	cf 91       	pop	r28
    1ad0:	1f 91       	pop	r17
    1ad2:	0f 91       	pop	r16
    1ad4:	ff 90       	pop	r15
    1ad6:	ef 90       	pop	r14
    1ad8:	df 90       	pop	r13
    1ada:	cf 90       	pop	r12
    1adc:	bf 90       	pop	r11
    1ade:	af 90       	pop	r10
    1ae0:	9f 90       	pop	r9
    1ae2:	8f 90       	pop	r8
    1ae4:	08 95       	ret

00001ae6 <_Z14Gaineinstellenv>:
	{
		offset[i]= (max[0]+min[0])/2;
	}
}
*/
void Gaineinstellen(){
    1ae6:	cf 92       	push	r12
    1ae8:	df 92       	push	r13
    1aea:	ef 92       	push	r14
    1aec:	ff 92       	push	r15
    1aee:	0f 93       	push	r16
    1af0:	1f 93       	push	r17
    1af2:	cf 93       	push	r28
    1af4:	df 93       	push	r29
    1af6:	cd b7       	in	r28, 0x3d	; 61
    1af8:	de b7       	in	r29, 0x3e	; 62
    1afa:	64 97       	sbiw	r28, 0x14	; 20
    1afc:	0f b6       	in	r0, 0x3f	; 63
    1afe:	f8 94       	cli
    1b00:	de bf       	out	0x3e, r29	; 62
    1b02:	0f be       	out	0x3f, r0	; 63
    1b04:	cd bf       	out	0x3d, r28	; 61
	char buffer[20];
	uint8_t buffersize=0;

	oled.clearFrame();
    1b06:	8a ea       	ldi	r24, 0xAA	; 170
    1b08:	92 e0       	ldi	r25, 0x02	; 2
    1b0a:	0e 94 b9 02 	call	0x572	; 0x572 <_ZN7Display10clearFrameEv>
	buffersize=sprintf(buffer,"1: 1370");
    1b0e:	88 e0       	ldi	r24, 0x08	; 8
    1b10:	ef ee       	ldi	r30, 0xEF	; 239
    1b12:	f1 e0       	ldi	r31, 0x01	; 1
    1b14:	8e 01       	movw	r16, r28
    1b16:	0f 5f       	subi	r16, 0xFF	; 255
    1b18:	1f 4f       	sbci	r17, 0xFF	; 255
    1b1a:	d8 01       	movw	r26, r16
    1b1c:	01 90       	ld	r0, Z+
    1b1e:	0d 92       	st	X+, r0
    1b20:	8a 95       	dec	r24
    1b22:	e1 f7       	brne	.-8      	; 0x1b1c <_Z14Gaineinstellenv+0x36>
    1b24:	e0 2e       	mov	r14, r16
    1b26:	f1 2e       	mov	r15, r17
    1b28:	68 01       	movw	r12, r16
    1b2a:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,0*charhighte);}
    1b2c:	f6 01       	movw	r30, r12
    1b2e:	61 91       	ld	r22, Z+
    1b30:	6f 01       	movw	r12, r30
    1b32:	20 e0       	ldi	r18, 0x00	; 0
    1b34:	41 2f       	mov	r20, r17
    1b36:	8a ea       	ldi	r24, 0xAA	; 170
    1b38:	92 e0       	ldi	r25, 0x02	; 2
    1b3a:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    1b3e:	1a 5f       	subi	r17, 0xFA	; 250
    1b40:	1a 32       	cpi	r17, 0x2A	; 42
    1b42:	a1 f7       	brne	.-24     	; 0x1b2c <_Z14Gaineinstellenv+0x46>
	buffersize=sprintf(buffer,"2: 1090");
    1b44:	88 e0       	ldi	r24, 0x08	; 8
    1b46:	e7 ef       	ldi	r30, 0xF7	; 247
    1b48:	f1 e0       	ldi	r31, 0x01	; 1
    1b4a:	de 01       	movw	r26, r28
    1b4c:	11 96       	adiw	r26, 0x01	; 1
    1b4e:	01 90       	ld	r0, Z+
    1b50:	0d 92       	st	X+, r0
    1b52:	8a 95       	dec	r24
    1b54:	e1 f7       	brne	.-8      	; 0x1b4e <_Z14Gaineinstellenv+0x68>
    1b56:	ce 2c       	mov	r12, r14
    1b58:	df 2c       	mov	r13, r15
    1b5a:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,1*charhighte);}
    1b5c:	f6 01       	movw	r30, r12
    1b5e:	61 91       	ld	r22, Z+
    1b60:	6f 01       	movw	r12, r30
    1b62:	28 e0       	ldi	r18, 0x08	; 8
    1b64:	41 2f       	mov	r20, r17
    1b66:	8a ea       	ldi	r24, 0xAA	; 170
    1b68:	92 e0       	ldi	r25, 0x02	; 2
    1b6a:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    1b6e:	1a 5f       	subi	r17, 0xFA	; 250
    1b70:	1a 32       	cpi	r17, 0x2A	; 42
    1b72:	a1 f7       	brne	.-24     	; 0x1b5c <_Z14Gaineinstellenv+0x76>
	buffersize=sprintf(buffer,"3:  820");
    1b74:	88 e0       	ldi	r24, 0x08	; 8
    1b76:	ef ef       	ldi	r30, 0xFF	; 255
    1b78:	f1 e0       	ldi	r31, 0x01	; 1
    1b7a:	de 01       	movw	r26, r28
    1b7c:	11 96       	adiw	r26, 0x01	; 1
    1b7e:	01 90       	ld	r0, Z+
    1b80:	0d 92       	st	X+, r0
    1b82:	8a 95       	dec	r24
    1b84:	e1 f7       	brne	.-8      	; 0x1b7e <_Z14Gaineinstellenv+0x98>
    1b86:	ce 2c       	mov	r12, r14
    1b88:	df 2c       	mov	r13, r15
    1b8a:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,2*charhighte);}
    1b8c:	f6 01       	movw	r30, r12
    1b8e:	61 91       	ld	r22, Z+
    1b90:	6f 01       	movw	r12, r30
    1b92:	20 e1       	ldi	r18, 0x10	; 16
    1b94:	41 2f       	mov	r20, r17
    1b96:	8a ea       	ldi	r24, 0xAA	; 170
    1b98:	92 e0       	ldi	r25, 0x02	; 2
    1b9a:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    1b9e:	1a 5f       	subi	r17, 0xFA	; 250
    1ba0:	1a 32       	cpi	r17, 0x2A	; 42
    1ba2:	a1 f7       	brne	.-24     	; 0x1b8c <_Z14Gaineinstellenv+0xa6>
	buffersize=sprintf(buffer,"4:  660");
    1ba4:	88 e0       	ldi	r24, 0x08	; 8
    1ba6:	e7 e0       	ldi	r30, 0x07	; 7
    1ba8:	f2 e0       	ldi	r31, 0x02	; 2
    1baa:	de 01       	movw	r26, r28
    1bac:	11 96       	adiw	r26, 0x01	; 1
    1bae:	01 90       	ld	r0, Z+
    1bb0:	0d 92       	st	X+, r0
    1bb2:	8a 95       	dec	r24
    1bb4:	e1 f7       	brne	.-8      	; 0x1bae <_Z14Gaineinstellenv+0xc8>
    1bb6:	ce 2c       	mov	r12, r14
    1bb8:	df 2c       	mov	r13, r15
    1bba:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,3*charhighte);}
    1bbc:	f6 01       	movw	r30, r12
    1bbe:	61 91       	ld	r22, Z+
    1bc0:	6f 01       	movw	r12, r30
    1bc2:	28 e1       	ldi	r18, 0x18	; 24
    1bc4:	41 2f       	mov	r20, r17
    1bc6:	8a ea       	ldi	r24, 0xAA	; 170
    1bc8:	92 e0       	ldi	r25, 0x02	; 2
    1bca:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    1bce:	1a 5f       	subi	r17, 0xFA	; 250
    1bd0:	1a 32       	cpi	r17, 0x2A	; 42
    1bd2:	a1 f7       	brne	.-24     	; 0x1bbc <_Z14Gaineinstellenv+0xd6>
	buffersize=sprintf(buffer,"5:  440");
    1bd4:	88 e0       	ldi	r24, 0x08	; 8
    1bd6:	ef e0       	ldi	r30, 0x0F	; 15
    1bd8:	f2 e0       	ldi	r31, 0x02	; 2
    1bda:	de 01       	movw	r26, r28
    1bdc:	11 96       	adiw	r26, 0x01	; 1
    1bde:	01 90       	ld	r0, Z+
    1be0:	0d 92       	st	X+, r0
    1be2:	8a 95       	dec	r24
    1be4:	e1 f7       	brne	.-8      	; 0x1bde <_Z14Gaineinstellenv+0xf8>
    1be6:	ce 2c       	mov	r12, r14
    1be8:	df 2c       	mov	r13, r15
    1bea:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,4*charhighte);}
    1bec:	f6 01       	movw	r30, r12
    1bee:	61 91       	ld	r22, Z+
    1bf0:	6f 01       	movw	r12, r30
    1bf2:	20 e2       	ldi	r18, 0x20	; 32
    1bf4:	41 2f       	mov	r20, r17
    1bf6:	8a ea       	ldi	r24, 0xAA	; 170
    1bf8:	92 e0       	ldi	r25, 0x02	; 2
    1bfa:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    1bfe:	1a 5f       	subi	r17, 0xFA	; 250
    1c00:	1a 32       	cpi	r17, 0x2A	; 42
    1c02:	a1 f7       	brne	.-24     	; 0x1bec <_Z14Gaineinstellenv+0x106>
	buffersize=sprintf(buffer,"6:  390");
    1c04:	88 e0       	ldi	r24, 0x08	; 8
    1c06:	e7 e1       	ldi	r30, 0x17	; 23
    1c08:	f2 e0       	ldi	r31, 0x02	; 2
    1c0a:	de 01       	movw	r26, r28
    1c0c:	11 96       	adiw	r26, 0x01	; 1
    1c0e:	01 90       	ld	r0, Z+
    1c10:	0d 92       	st	X+, r0
    1c12:	8a 95       	dec	r24
    1c14:	e1 f7       	brne	.-8      	; 0x1c0e <_Z14Gaineinstellenv+0x128>
    1c16:	ce 2c       	mov	r12, r14
    1c18:	df 2c       	mov	r13, r15
    1c1a:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,5*charhighte);}
    1c1c:	f6 01       	movw	r30, r12
    1c1e:	61 91       	ld	r22, Z+
    1c20:	6f 01       	movw	r12, r30
    1c22:	28 e2       	ldi	r18, 0x28	; 40
    1c24:	41 2f       	mov	r20, r17
    1c26:	8a ea       	ldi	r24, 0xAA	; 170
    1c28:	92 e0       	ldi	r25, 0x02	; 2
    1c2a:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    1c2e:	1a 5f       	subi	r17, 0xFA	; 250
    1c30:	1a 32       	cpi	r17, 0x2A	; 42
    1c32:	a1 f7       	brne	.-24     	; 0x1c1c <_Z14Gaineinstellenv+0x136>
	buffersize=sprintf(buffer,"7:  330");
    1c34:	88 e0       	ldi	r24, 0x08	; 8
    1c36:	ef e1       	ldi	r30, 0x1F	; 31
    1c38:	f2 e0       	ldi	r31, 0x02	; 2
    1c3a:	de 01       	movw	r26, r28
    1c3c:	11 96       	adiw	r26, 0x01	; 1
    1c3e:	01 90       	ld	r0, Z+
    1c40:	0d 92       	st	X+, r0
    1c42:	8a 95       	dec	r24
    1c44:	e1 f7       	brne	.-8      	; 0x1c3e <_Z14Gaineinstellenv+0x158>
    1c46:	ce 2c       	mov	r12, r14
    1c48:	df 2c       	mov	r13, r15
    1c4a:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,6*charhighte);}
    1c4c:	f6 01       	movw	r30, r12
    1c4e:	61 91       	ld	r22, Z+
    1c50:	6f 01       	movw	r12, r30
    1c52:	20 e3       	ldi	r18, 0x30	; 48
    1c54:	41 2f       	mov	r20, r17
    1c56:	8a ea       	ldi	r24, 0xAA	; 170
    1c58:	92 e0       	ldi	r25, 0x02	; 2
    1c5a:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    1c5e:	1a 5f       	subi	r17, 0xFA	; 250
    1c60:	1a 32       	cpi	r17, 0x2A	; 42
    1c62:	a1 f7       	brne	.-24     	; 0x1c4c <_Z14Gaineinstellenv+0x166>
	buffersize=sprintf(buffer,"8:  230");
    1c64:	88 e0       	ldi	r24, 0x08	; 8
    1c66:	e7 e2       	ldi	r30, 0x27	; 39
    1c68:	f2 e0       	ldi	r31, 0x02	; 2
    1c6a:	de 01       	movw	r26, r28
    1c6c:	11 96       	adiw	r26, 0x01	; 1
    1c6e:	01 90       	ld	r0, Z+
    1c70:	0d 92       	st	X+, r0
    1c72:	8a 95       	dec	r24
    1c74:	e1 f7       	brne	.-8      	; 0x1c6e <_Z14Gaineinstellenv+0x188>
    1c76:	ce 2c       	mov	r12, r14
    1c78:	df 2c       	mov	r13, r15
    1c7a:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,7*charhighte);}
    1c7c:	f6 01       	movw	r30, r12
    1c7e:	61 91       	ld	r22, Z+
    1c80:	6f 01       	movw	r12, r30
    1c82:	28 e3       	ldi	r18, 0x38	; 56
    1c84:	41 2f       	mov	r20, r17
    1c86:	8a ea       	ldi	r24, 0xAA	; 170
    1c88:	92 e0       	ldi	r25, 0x02	; 2
    1c8a:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    1c8e:	1a 5f       	subi	r17, 0xFA	; 250
    1c90:	1a 32       	cpi	r17, 0x2A	; 42
    1c92:	a1 f7       	brne	.-24     	; 0x1c7c <_Z14Gaineinstellenv+0x196>
}
    1c94:	64 96       	adiw	r28, 0x14	; 20
    1c96:	0f b6       	in	r0, 0x3f	; 63
    1c98:	f8 94       	cli
    1c9a:	de bf       	out	0x3e, r29	; 62
    1c9c:	0f be       	out	0x3f, r0	; 63
    1c9e:	cd bf       	out	0x3d, r28	; 61
    1ca0:	df 91       	pop	r29
    1ca2:	cf 91       	pop	r28
    1ca4:	1f 91       	pop	r17
    1ca6:	0f 91       	pop	r16
    1ca8:	ff 90       	pop	r15
    1caa:	ef 90       	pop	r14
    1cac:	df 90       	pop	r13
    1cae:	cf 90       	pop	r12
    1cb0:	08 95       	ret

00001cb2 <_Z15anzeige_kompassd>:

void anzeige_kompass(double winkel){
    1cb2:	9f 92       	push	r9
    1cb4:	af 92       	push	r10
    1cb6:	bf 92       	push	r11
    1cb8:	cf 92       	push	r12
    1cba:	df 92       	push	r13
    1cbc:	ef 92       	push	r14
    1cbe:	ff 92       	push	r15
    1cc0:	0f 93       	push	r16
    1cc2:	1f 93       	push	r17
    1cc4:	cf 93       	push	r28
    1cc6:	df 93       	push	r29
    1cc8:	cd b7       	in	r28, 0x3d	; 61
    1cca:	de b7       	in	r29, 0x3e	; 62
    1ccc:	64 97       	sbiw	r28, 0x14	; 20
    1cce:	0f b6       	in	r0, 0x3f	; 63
    1cd0:	f8 94       	cli
    1cd2:	de bf       	out	0x3e, r29	; 62
    1cd4:	0f be       	out	0x3f, r0	; 63
    1cd6:	cd bf       	out	0x3d, r28	; 61
    1cd8:	a6 2e       	mov	r10, r22
    1cda:	b7 2e       	mov	r11, r23
    1cdc:	c8 2e       	mov	r12, r24
    1cde:	d9 2e       	mov	r13, r25
	oled.clearFrame();
    1ce0:	8a ea       	ldi	r24, 0xAA	; 170
    1ce2:	92 e0       	ldi	r25, 0x02	; 2
    1ce4:	0e 94 b9 02 	call	0x572	; 0x572 <_ZN7Display10clearFrameEv>
    1ce8:	0f 2e       	mov	r0, r31
    1cea:	fb ec       	ldi	r31, 0xCB	; 203
    1cec:	ef 2e       	mov	r14, r31
    1cee:	f6 e0       	ldi	r31, 0x06	; 6
    1cf0:	ff 2e       	mov	r15, r31
    1cf2:	f0 2d       	mov	r31, r0
    1cf4:	11 e4       	ldi	r17, 0x41	; 65
	char buffer[20];
	uint8_t buffersize=0;
	//Uhrzeit
	for(uint8_t i=0;i<bitsderrtc;i++){oled.draw_ASCI(rtc.msg_uhr[i],65+i*charsize,0);}
    1cf6:	f7 01       	movw	r30, r14
    1cf8:	61 91       	ld	r22, Z+
    1cfa:	7f 01       	movw	r14, r30
    1cfc:	20 e0       	ldi	r18, 0x00	; 0
    1cfe:	41 2f       	mov	r20, r17
    1d00:	8a ea       	ldi	r24, 0xAA	; 170
    1d02:	92 e0       	ldi	r25, 0x02	; 2
    1d04:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    1d08:	1a 5f       	subi	r17, 0xFA	; 250
    1d0a:	11 37       	cpi	r17, 0x71	; 113
    1d0c:	a1 f7       	brne	.-24     	; 0x1cf6 <_Z15anzeige_kompassd+0x44>
	//winkel als Zahl ausgeben
	buffersize=sprintf(buffer,"angle=%.0f",winkel);
    1d0e:	df 92       	push	r13
    1d10:	cf 92       	push	r12
    1d12:	bf 92       	push	r11
    1d14:	af 92       	push	r10
    1d16:	8f e2       	ldi	r24, 0x2F	; 47
    1d18:	92 e0       	ldi	r25, 0x02	; 2
    1d1a:	9f 93       	push	r25
    1d1c:	8f 93       	push	r24
    1d1e:	9e 01       	movw	r18, r28
    1d20:	2f 5f       	subi	r18, 0xFF	; 255
    1d22:	3f 4f       	sbci	r19, 0xFF	; 255
    1d24:	3f 93       	push	r19
    1d26:	2f 93       	push	r18
    1d28:	0e 94 98 23 	call	0x4730	; 0x4730 <sprintf>
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],65+i*charsize,7*charhighte);}
    1d2c:	0f b6       	in	r0, 0x3f	; 63
    1d2e:	f8 94       	cli
    1d30:	de bf       	out	0x3e, r29	; 62
    1d32:	0f be       	out	0x3f, r0	; 63
    1d34:	cd bf       	out	0x3d, r28	; 61
    1d36:	88 23       	and	r24, r24
    1d38:	f1 f0       	breq	.+60     	; 0x1d76 <_Z15anzeige_kompassd+0xc4>
    1d3a:	8e 01       	movw	r16, r28
    1d3c:	0f 5f       	subi	r16, 0xFF	; 255
    1d3e:	1f 4f       	sbci	r17, 0xFF	; 255
    1d40:	81 50       	subi	r24, 0x01	; 1
    1d42:	68 94       	set
    1d44:	ee 24       	eor	r14, r14
    1d46:	e1 f8       	bld	r14, 1
    1d48:	f1 2c       	mov	r15, r1
    1d4a:	ec 0e       	add	r14, r28
    1d4c:	fd 1e       	adc	r15, r29
    1d4e:	e8 0e       	add	r14, r24
    1d50:	f1 1c       	adc	r15, r1
    1d52:	0f 2e       	mov	r0, r31
    1d54:	f1 e4       	ldi	r31, 0x41	; 65
    1d56:	9f 2e       	mov	r9, r31
    1d58:	f0 2d       	mov	r31, r0
    1d5a:	f8 01       	movw	r30, r16
    1d5c:	61 91       	ld	r22, Z+
    1d5e:	8f 01       	movw	r16, r30
    1d60:	28 e3       	ldi	r18, 0x38	; 56
    1d62:	49 2d       	mov	r20, r9
    1d64:	8a ea       	ldi	r24, 0xAA	; 170
    1d66:	92 e0       	ldi	r25, 0x02	; 2
    1d68:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    1d6c:	f6 e0       	ldi	r31, 0x06	; 6
    1d6e:	9f 0e       	add	r9, r31
    1d70:	0e 15       	cp	r16, r14
    1d72:	1f 05       	cpc	r17, r15
    1d74:	91 f7       	brne	.-28     	; 0x1d5a <_Z15anzeige_kompassd+0xa8>
	//dreieck als Zeiger
	anzeige_nadel(31,31,winkel);
    1d76:	2a 2d       	mov	r18, r10
    1d78:	3b 2d       	mov	r19, r11
    1d7a:	4c 2d       	mov	r20, r12
    1d7c:	5d 2d       	mov	r21, r13
    1d7e:	6f e1       	ldi	r22, 0x1F	; 31
    1d80:	8f e1       	ldi	r24, 0x1F	; 31
    1d82:	0e 94 1e 0a 	call	0x143c	; 0x143c <_Z13anzeige_nadelhhf>
	//Richtung ausgeben
	anzeige_richtung(winkel);	
    1d86:	6a 2d       	mov	r22, r10
    1d88:	7b 2d       	mov	r23, r11
    1d8a:	8c 2d       	mov	r24, r12
    1d8c:	9d 2d       	mov	r25, r13
    1d8e:	0e 94 60 09 	call	0x12c0	; 0x12c0 <_Z16anzeige_richtungf>
}
    1d92:	64 96       	adiw	r28, 0x14	; 20
    1d94:	0f b6       	in	r0, 0x3f	; 63
    1d96:	f8 94       	cli
    1d98:	de bf       	out	0x3e, r29	; 62
    1d9a:	0f be       	out	0x3f, r0	; 63
    1d9c:	cd bf       	out	0x3d, r28	; 61
    1d9e:	df 91       	pop	r29
    1da0:	cf 91       	pop	r28
    1da2:	1f 91       	pop	r17
    1da4:	0f 91       	pop	r16
    1da6:	ff 90       	pop	r15
    1da8:	ef 90       	pop	r14
    1daa:	df 90       	pop	r13
    1dac:	cf 90       	pop	r12
    1dae:	bf 90       	pop	r11
    1db0:	af 90       	pop	r10
    1db2:	9f 90       	pop	r9
    1db4:	08 95       	ret

00001db6 <_Z10timerseitev>:

void timerseite(){
    1db6:	af 92       	push	r10
    1db8:	bf 92       	push	r11
    1dba:	df 92       	push	r13
    1dbc:	ef 92       	push	r14
    1dbe:	0f 93       	push	r16
    1dc0:	1f 93       	push	r17
    1dc2:	cf 93       	push	r28
    1dc4:	df 93       	push	r29
    1dc6:	cd b7       	in	r28, 0x3d	; 61
    1dc8:	de b7       	in	r29, 0x3e	; 62
    1dca:	64 97       	sbiw	r28, 0x14	; 20
    1dcc:	0f b6       	in	r0, 0x3f	; 63
    1dce:	f8 94       	cli
    1dd0:	de bf       	out	0x3e, r29	; 62
    1dd2:	0f be       	out	0x3f, r0	; 63
    1dd4:	cd bf       	out	0x3d, r28	; 61
	char buffer[20];
	uint8_t buffersize=0;
	oled.clearFrame();
    1dd6:	8a ea       	ldi	r24, 0xAA	; 170
    1dd8:	92 e0       	ldi	r25, 0x02	; 2
    1dda:	0e 94 b9 02 	call	0x572	; 0x572 <_ZN7Display10clearFrameEv>
	buffersize=sprintf(buffer,"Timer: ");
    1dde:	88 e0       	ldi	r24, 0x08	; 8
    1de0:	ea e3       	ldi	r30, 0x3A	; 58
    1de2:	f2 e0       	ldi	r31, 0x02	; 2
    1de4:	8e 01       	movw	r16, r28
    1de6:	0f 5f       	subi	r16, 0xFF	; 255
    1de8:	1f 4f       	sbci	r17, 0xFF	; 255
    1dea:	d8 01       	movw	r26, r16
    1dec:	01 90       	ld	r0, Z+
    1dee:	0d 92       	st	X+, r0
    1df0:	8a 95       	dec	r24
    1df2:	e1 f7       	brne	.-8      	; 0x1dec <_Z10timerseitev+0x36>
    1df4:	d0 2e       	mov	r13, r16
    1df6:	e1 2e       	mov	r14, r17
    1df8:	58 01       	movw	r10, r16
    1dfa:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,0*charhighte);}
    1dfc:	f5 01       	movw	r30, r10
    1dfe:	61 91       	ld	r22, Z+
    1e00:	5f 01       	movw	r10, r30
    1e02:	20 e0       	ldi	r18, 0x00	; 0
    1e04:	41 2f       	mov	r20, r17
    1e06:	8a ea       	ldi	r24, 0xAA	; 170
    1e08:	92 e0       	ldi	r25, 0x02	; 2
    1e0a:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    1e0e:	1a 5f       	subi	r17, 0xFA	; 250
    1e10:	1a 32       	cpi	r17, 0x2A	; 42
    1e12:	a1 f7       	brne	.-24     	; 0x1dfc <_Z10timerseitev+0x46>
	if (pos!=0)
    1e14:	60 91 a2 02 	lds	r22, 0x02A2
    1e18:	66 23       	and	r22, r22
    1e1a:	39 f0       	breq	.+14     	; 0x1e2a <_Z10timerseitev+0x74>
	{
		oled.draw_ASCI(pos+'0',buffersize*charsize,0*charhighte);
    1e1c:	60 5d       	subi	r22, 0xD0	; 208
    1e1e:	20 e0       	ldi	r18, 0x00	; 0
    1e20:	4a e2       	ldi	r20, 0x2A	; 42
    1e22:	8a ea       	ldi	r24, 0xAA	; 170
    1e24:	92 e0       	ldi	r25, 0x02	; 2
    1e26:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
	}
		
	buffer[0]=zaehler.Stunden/10;
    1e2a:	90 91 c3 06 	lds	r25, 0x06C3
    1e2e:	8d ec       	ldi	r24, 0xCD	; 205
    1e30:	98 9f       	mul	r25, r24
    1e32:	21 2d       	mov	r18, r1
    1e34:	11 24       	eor	r1, r1
    1e36:	26 95       	lsr	r18
    1e38:	26 95       	lsr	r18
    1e3a:	26 95       	lsr	r18
    1e3c:	29 83       	std	Y+1, r18	; 0x01
	buffer[1]=zaehler.Stunden%10;
    1e3e:	22 0f       	add	r18, r18
    1e40:	32 2f       	mov	r19, r18
    1e42:	33 0f       	add	r19, r19
    1e44:	33 0f       	add	r19, r19
    1e46:	23 0f       	add	r18, r19
    1e48:	92 1b       	sub	r25, r18
    1e4a:	9a 83       	std	Y+2, r25	; 0x02
	buffer[2]=':';
    1e4c:	9a e3       	ldi	r25, 0x3A	; 58
    1e4e:	9b 83       	std	Y+3, r25	; 0x03
	buffer[3]=zaehler.Minuten/10;
    1e50:	20 91 c4 06 	lds	r18, 0x06C4
    1e54:	28 9f       	mul	r18, r24
    1e56:	31 2d       	mov	r19, r1
    1e58:	11 24       	eor	r1, r1
    1e5a:	36 95       	lsr	r19
    1e5c:	36 95       	lsr	r19
    1e5e:	36 95       	lsr	r19
    1e60:	3c 83       	std	Y+4, r19	; 0x04
	buffer[4]=zaehler.Minuten%10;
    1e62:	33 0f       	add	r19, r19
    1e64:	43 2f       	mov	r20, r19
    1e66:	44 0f       	add	r20, r20
    1e68:	44 0f       	add	r20, r20
    1e6a:	34 0f       	add	r19, r20
    1e6c:	23 1b       	sub	r18, r19
    1e6e:	2d 83       	std	Y+5, r18	; 0x05
	buffer[5]=':';
    1e70:	9e 83       	std	Y+6, r25	; 0x06
	buffer[6]=zaehler.Sekunden/10;
    1e72:	90 91 c5 06 	lds	r25, 0x06C5
    1e76:	98 9f       	mul	r25, r24
    1e78:	81 2d       	mov	r24, r1
    1e7a:	11 24       	eor	r1, r1
    1e7c:	86 95       	lsr	r24
    1e7e:	86 95       	lsr	r24
    1e80:	86 95       	lsr	r24
    1e82:	8f 83       	std	Y+7, r24	; 0x07
	buffer[7]=zaehler.Sekunden%10;
    1e84:	88 0f       	add	r24, r24
    1e86:	28 2f       	mov	r18, r24
    1e88:	22 0f       	add	r18, r18
    1e8a:	22 0f       	add	r18, r18
    1e8c:	82 0f       	add	r24, r18
    1e8e:	98 1b       	sub	r25, r24
    1e90:	98 87       	std	Y+8, r25	; 0x08
    1e92:	ad 2c       	mov	r10, r13
    1e94:	be 2c       	mov	r11, r14
    1e96:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<bitsderrtc;i++){
		if (buffer[i]==':')
    1e98:	f5 01       	movw	r30, r10
    1e9a:	61 91       	ld	r22, Z+
    1e9c:	5f 01       	movw	r10, r30
    1e9e:	6a 33       	cpi	r22, 0x3A	; 58
    1ea0:	39 f4       	brne	.+14     	; 0x1eb0 <_Z10timerseitev+0xfa>
		{
			oled.draw_ASCI(buffer[i],i*numbersmalsize,2.5*charhighte);
    1ea2:	24 e1       	ldi	r18, 0x14	; 20
    1ea4:	41 2f       	mov	r20, r17
    1ea6:	8a ea       	ldi	r24, 0xAA	; 170
    1ea8:	92 e0       	ldi	r25, 0x02	; 2
    1eaa:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    1eae:	06 c0       	rjmp	.+12     	; 0x1ebc <_Z10timerseitev+0x106>
		}
		else{
			oled.draw_number16x16(buffer[i],i*numbersmalsize,2*charhighte);
    1eb0:	20 e1       	ldi	r18, 0x10	; 16
    1eb2:	41 2f       	mov	r20, r17
    1eb4:	8a ea       	ldi	r24, 0xAA	; 170
    1eb6:	92 e0       	ldi	r25, 0x02	; 2
    1eb8:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <_ZN7Display16draw_number16x16Ehhh>
    1ebc:	10 5f       	subi	r17, 0xF0	; 240
	buffer[3]=zaehler.Minuten/10;
	buffer[4]=zaehler.Minuten%10;
	buffer[5]=':';
	buffer[6]=zaehler.Sekunden/10;
	buffer[7]=zaehler.Sekunden%10;
	for(uint8_t i=0;i<bitsderrtc;i++){
    1ebe:	10 38       	cpi	r17, 0x80	; 128
    1ec0:	59 f7       	brne	.-42     	; 0x1e98 <_Z10timerseitev+0xe2>
		}
		else{
			oled.draw_number16x16(buffer[i],i*numbersmalsize,2*charhighte);
		}
	}
}
    1ec2:	64 96       	adiw	r28, 0x14	; 20
    1ec4:	0f b6       	in	r0, 0x3f	; 63
    1ec6:	f8 94       	cli
    1ec8:	de bf       	out	0x3e, r29	; 62
    1eca:	0f be       	out	0x3f, r0	; 63
    1ecc:	cd bf       	out	0x3d, r28	; 61
    1ece:	df 91       	pop	r29
    1ed0:	cf 91       	pop	r28
    1ed2:	1f 91       	pop	r17
    1ed4:	0f 91       	pop	r16
    1ed6:	ef 90       	pop	r14
    1ed8:	df 90       	pop	r13
    1eda:	bf 90       	pop	r11
    1edc:	af 90       	pop	r10
    1ede:	08 95       	ret

00001ee0 <_Z13Stoppuhrseitev>:

void Stoppuhrseite(){
    1ee0:	af 92       	push	r10
    1ee2:	bf 92       	push	r11
    1ee4:	df 92       	push	r13
    1ee6:	ef 92       	push	r14
    1ee8:	0f 93       	push	r16
    1eea:	1f 93       	push	r17
    1eec:	cf 93       	push	r28
    1eee:	df 93       	push	r29
    1ef0:	cd b7       	in	r28, 0x3d	; 61
    1ef2:	de b7       	in	r29, 0x3e	; 62
    1ef4:	64 97       	sbiw	r28, 0x14	; 20
    1ef6:	0f b6       	in	r0, 0x3f	; 63
    1ef8:	f8 94       	cli
    1efa:	de bf       	out	0x3e, r29	; 62
    1efc:	0f be       	out	0x3f, r0	; 63
    1efe:	cd bf       	out	0x3d, r28	; 61
	char buffer[20];
	uint8_t buffersize=0;
	oled.clearFrame();
    1f00:	8a ea       	ldi	r24, 0xAA	; 170
    1f02:	92 e0       	ldi	r25, 0x02	; 2
    1f04:	0e 94 b9 02 	call	0x572	; 0x572 <_ZN7Display10clearFrameEv>
	buffersize=sprintf(buffer,"Stoppuhr: ");
    1f08:	8b e0       	ldi	r24, 0x0B	; 11
    1f0a:	e2 e4       	ldi	r30, 0x42	; 66
    1f0c:	f2 e0       	ldi	r31, 0x02	; 2
    1f0e:	8e 01       	movw	r16, r28
    1f10:	0f 5f       	subi	r16, 0xFF	; 255
    1f12:	1f 4f       	sbci	r17, 0xFF	; 255
    1f14:	d8 01       	movw	r26, r16
    1f16:	01 90       	ld	r0, Z+
    1f18:	0d 92       	st	X+, r0
    1f1a:	8a 95       	dec	r24
    1f1c:	e1 f7       	brne	.-8      	; 0x1f16 <_Z13Stoppuhrseitev+0x36>
    1f1e:	d0 2e       	mov	r13, r16
    1f20:	e1 2e       	mov	r14, r17
    1f22:	58 01       	movw	r10, r16
    1f24:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,0*charhighte);}
    1f26:	f5 01       	movw	r30, r10
    1f28:	61 91       	ld	r22, Z+
    1f2a:	5f 01       	movw	r10, r30
    1f2c:	20 e0       	ldi	r18, 0x00	; 0
    1f2e:	41 2f       	mov	r20, r17
    1f30:	8a ea       	ldi	r24, 0xAA	; 170
    1f32:	92 e0       	ldi	r25, 0x02	; 2
    1f34:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    1f38:	1a 5f       	subi	r17, 0xFA	; 250
    1f3a:	1c 33       	cpi	r17, 0x3C	; 60
    1f3c:	a1 f7       	brne	.-24     	; 0x1f26 <_Z13Stoppuhrseitev+0x46>
	
	buffer[0]=stoppuhr.Stunden/10;
    1f3e:	90 91 b3 06 	lds	r25, 0x06B3
    1f42:	8d ec       	ldi	r24, 0xCD	; 205
    1f44:	98 9f       	mul	r25, r24
    1f46:	21 2d       	mov	r18, r1
    1f48:	11 24       	eor	r1, r1
    1f4a:	26 95       	lsr	r18
    1f4c:	26 95       	lsr	r18
    1f4e:	26 95       	lsr	r18
    1f50:	29 83       	std	Y+1, r18	; 0x01
	buffer[1]=stoppuhr.Stunden%10;
    1f52:	22 0f       	add	r18, r18
    1f54:	32 2f       	mov	r19, r18
    1f56:	33 0f       	add	r19, r19
    1f58:	33 0f       	add	r19, r19
    1f5a:	23 0f       	add	r18, r19
    1f5c:	92 1b       	sub	r25, r18
    1f5e:	9a 83       	std	Y+2, r25	; 0x02
	buffer[2]=':';
    1f60:	9a e3       	ldi	r25, 0x3A	; 58
    1f62:	9b 83       	std	Y+3, r25	; 0x03
	buffer[3]=stoppuhr.Minuten/10;
    1f64:	20 91 b4 06 	lds	r18, 0x06B4
    1f68:	28 9f       	mul	r18, r24
    1f6a:	31 2d       	mov	r19, r1
    1f6c:	11 24       	eor	r1, r1
    1f6e:	36 95       	lsr	r19
    1f70:	36 95       	lsr	r19
    1f72:	36 95       	lsr	r19
    1f74:	3c 83       	std	Y+4, r19	; 0x04
	buffer[4]=stoppuhr.Minuten%10;
    1f76:	33 0f       	add	r19, r19
    1f78:	43 2f       	mov	r20, r19
    1f7a:	44 0f       	add	r20, r20
    1f7c:	44 0f       	add	r20, r20
    1f7e:	34 0f       	add	r19, r20
    1f80:	23 1b       	sub	r18, r19
    1f82:	2d 83       	std	Y+5, r18	; 0x05
	buffer[5]=':';
    1f84:	9e 83       	std	Y+6, r25	; 0x06
	buffer[6]=stoppuhr.Sekunden/10;
    1f86:	90 91 b5 06 	lds	r25, 0x06B5
    1f8a:	98 9f       	mul	r25, r24
    1f8c:	81 2d       	mov	r24, r1
    1f8e:	11 24       	eor	r1, r1
    1f90:	86 95       	lsr	r24
    1f92:	86 95       	lsr	r24
    1f94:	86 95       	lsr	r24
    1f96:	8f 83       	std	Y+7, r24	; 0x07
	buffer[7]=stoppuhr.Sekunden%10;
    1f98:	88 0f       	add	r24, r24
    1f9a:	28 2f       	mov	r18, r24
    1f9c:	22 0f       	add	r18, r18
    1f9e:	22 0f       	add	r18, r18
    1fa0:	82 0f       	add	r24, r18
    1fa2:	98 1b       	sub	r25, r24
    1fa4:	98 87       	std	Y+8, r25	; 0x08
    1fa6:	ad 2c       	mov	r10, r13
    1fa8:	be 2c       	mov	r11, r14
    1faa:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<bitsderrtc;i++){
		if (buffer[i]==':')
    1fac:	f5 01       	movw	r30, r10
    1fae:	61 91       	ld	r22, Z+
    1fb0:	5f 01       	movw	r10, r30
    1fb2:	6a 33       	cpi	r22, 0x3A	; 58
    1fb4:	39 f4       	brne	.+14     	; 0x1fc4 <_Z13Stoppuhrseitev+0xe4>
		{
			oled.draw_ASCI(buffer[i],i*numbersmalsize,2.5*charhighte);
    1fb6:	24 e1       	ldi	r18, 0x14	; 20
    1fb8:	41 2f       	mov	r20, r17
    1fba:	8a ea       	ldi	r24, 0xAA	; 170
    1fbc:	92 e0       	ldi	r25, 0x02	; 2
    1fbe:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    1fc2:	06 c0       	rjmp	.+12     	; 0x1fd0 <_Z13Stoppuhrseitev+0xf0>
		}
		else{
			oled.draw_number16x16(buffer[i],i*numbersmalsize,2*charhighte);
    1fc4:	20 e1       	ldi	r18, 0x10	; 16
    1fc6:	41 2f       	mov	r20, r17
    1fc8:	8a ea       	ldi	r24, 0xAA	; 170
    1fca:	92 e0       	ldi	r25, 0x02	; 2
    1fcc:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <_ZN7Display16draw_number16x16Ehhh>
    1fd0:	10 5f       	subi	r17, 0xF0	; 240
	buffer[3]=stoppuhr.Minuten/10;
	buffer[4]=stoppuhr.Minuten%10;
	buffer[5]=':';
	buffer[6]=stoppuhr.Sekunden/10;
	buffer[7]=stoppuhr.Sekunden%10;
	for(uint8_t i=0;i<bitsderrtc;i++){
    1fd2:	10 38       	cpi	r17, 0x80	; 128
    1fd4:	59 f7       	brne	.-42     	; 0x1fac <_Z13Stoppuhrseitev+0xcc>
		}
		else{
			oled.draw_number16x16(buffer[i],i*numbersmalsize,2*charhighte);
		}
	}
}
    1fd6:	64 96       	adiw	r28, 0x14	; 20
    1fd8:	0f b6       	in	r0, 0x3f	; 63
    1fda:	f8 94       	cli
    1fdc:	de bf       	out	0x3e, r29	; 62
    1fde:	0f be       	out	0x3f, r0	; 63
    1fe0:	cd bf       	out	0x3d, r28	; 61
    1fe2:	df 91       	pop	r29
    1fe4:	cf 91       	pop	r28
    1fe6:	1f 91       	pop	r17
    1fe8:	0f 91       	pop	r16
    1fea:	ef 90       	pop	r14
    1fec:	df 90       	pop	r13
    1fee:	bf 90       	pop	r11
    1ff0:	af 90       	pop	r10
    1ff2:	08 95       	ret

00001ff4 <_Z13uhreinstellenv>:

void uhreinstellen(){
    1ff4:	2f 92       	push	r2
    1ff6:	3f 92       	push	r3
    1ff8:	4f 92       	push	r4
    1ffa:	5f 92       	push	r5
    1ffc:	6f 92       	push	r6
    1ffe:	7f 92       	push	r7
    2000:	8f 92       	push	r8
    2002:	9f 92       	push	r9
    2004:	af 92       	push	r10
    2006:	bf 92       	push	r11
    2008:	cf 92       	push	r12
    200a:	df 92       	push	r13
    200c:	ef 92       	push	r14
    200e:	ff 92       	push	r15
    2010:	0f 93       	push	r16
    2012:	1f 93       	push	r17
    2014:	cf 93       	push	r28
    2016:	df 93       	push	r29
    2018:	cd b7       	in	r28, 0x3d	; 61
    201a:	de b7       	in	r29, 0x3e	; 62
    201c:	66 97       	sbiw	r28, 0x16	; 22
    201e:	0f b6       	in	r0, 0x3f	; 63
    2020:	f8 94       	cli
    2022:	de bf       	out	0x3e, r29	; 62
    2024:	0f be       	out	0x3f, r0	; 63
    2026:	cd bf       	out	0x3d, r28	; 61
	rtc.RTCstop();
    2028:	8b ec       	ldi	r24, 0xCB	; 203
    202a:	96 e0       	ldi	r25, 0x06	; 6
    202c:	0e 94 70 1b 	call	0x36e0	; 0x36e0 <_ZN3RTC7RTCstopEv>
	
	oled.clearFrame();
    2030:	8a ea       	ldi	r24, 0xAA	; 170
    2032:	92 e0       	ldi	r25, 0x02	; 2
    2034:	0e 94 b9 02 	call	0x572	; 0x572 <_ZN7Display10clearFrameEv>
	char buffer[20];
	uint8_t buffersize;
	uint8_t pos=0;
    2038:	91 2c       	mov	r9, r1
	while(pos<11){
		buffersize=sprintf(buffer,"Uhreinstellung");
    203a:	0f 2e       	mov	r0, r31
    203c:	ff e0       	ldi	r31, 0x0F	; 15
    203e:	6f 2e       	mov	r6, r31
    2040:	f0 2d       	mov	r31, r0
    2042:	ce 01       	movw	r24, r28
    2044:	01 96       	adiw	r24, 0x01	; 1
    2046:	7c 01       	movw	r14, r24
    2048:	78 2e       	mov	r7, r24
    204a:	8f 2c       	mov	r8, r15
    204c:	b1 2c       	mov	r11, r1
		for(uint8_t i = 0; i<buffersize;i++){
			oled.draw_ASCI(buffer[i],charsize*i,0);
		}
		buffersize=sprintf(buffer,"--------------");
    204e:	8d 8b       	std	Y+21, r24	; 0x15
    2050:	fe 8a       	std	Y+22, r15	; 0x16
		for(uint8_t i = 0; i<buffersize;i++){
			oled.draw_ASCI(buffer[i],charsize*i,8);
		}
		buffer[0]=rtc.Stunden/10;
    2052:	0f 2e       	mov	r0, r31
    2054:	fd ec       	ldi	r31, 0xCD	; 205
    2056:	af 2e       	mov	r10, r31
    2058:	f0 2d       	mov	r31, r0
		buffer[1]=rtc.Stunden%10;
		buffer[2]=':';
		buffer[3]=rtc.Minuten/10;
		buffer[4]=rtc.Minuten%10;
		buffer[5]=' ';
		buffer[6]=rtc.Tag/10;
    205a:	0f 2e       	mov	r0, r31
    205c:	f7 ed       	ldi	r31, 0xD7	; 215
    205e:	4f 2e       	mov	r4, r31
    2060:	f6 e0       	ldi	r31, 0x06	; 6
    2062:	5f 2e       	mov	r5, r31
    2064:	f0 2d       	mov	r31, r0
		buffer[7]=rtc.Tag%10;
		buffer[8]='.';
		buffer[9]=rtc.Monat/10;
    2066:	0f 2e       	mov	r0, r31
    2068:	f8 ed       	ldi	r31, 0xD8	; 216
    206a:	cf 2e       	mov	r12, r31
    206c:	f6 e0       	ldi	r31, 0x06	; 6
    206e:	df 2e       	mov	r13, r31
    2070:	f0 2d       	mov	r31, r0
	oled.clearFrame();
	char buffer[20];
	uint8_t buffersize;
	uint8_t pos=0;
	while(pos<11){
		buffersize=sprintf(buffer,"Uhreinstellung");
    2072:	ed e4       	ldi	r30, 0x4D	; 77
    2074:	f2 e0       	ldi	r31, 0x02	; 2
    2076:	a7 2d       	mov	r26, r7
    2078:	b8 2d       	mov	r27, r8
    207a:	86 2d       	mov	r24, r6
    207c:	01 90       	ld	r0, Z+
    207e:	0d 92       	st	X+, r0
    2080:	8a 95       	dec	r24
    2082:	e1 f7       	brne	.-8      	; 0x207c <_Z13uhreinstellenv+0x88>
    2084:	27 2c       	mov	r2, r7
    2086:	38 2c       	mov	r3, r8
    2088:	1b 2d       	mov	r17, r11
		for(uint8_t i = 0; i<buffersize;i++){
			oled.draw_ASCI(buffer[i],charsize*i,0);
    208a:	f1 01       	movw	r30, r2
    208c:	61 91       	ld	r22, Z+
    208e:	1f 01       	movw	r2, r30
    2090:	2b 2d       	mov	r18, r11
    2092:	41 2f       	mov	r20, r17
    2094:	8a ea       	ldi	r24, 0xAA	; 170
    2096:	92 e0       	ldi	r25, 0x02	; 2
    2098:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    209c:	1a 5f       	subi	r17, 0xFA	; 250
	char buffer[20];
	uint8_t buffersize;
	uint8_t pos=0;
	while(pos<11){
		buffersize=sprintf(buffer,"Uhreinstellung");
		for(uint8_t i = 0; i<buffersize;i++){
    209e:	14 35       	cpi	r17, 0x54	; 84
    20a0:	a1 f7       	brne	.-24     	; 0x208a <_Z13uhreinstellenv+0x96>
			oled.draw_ASCI(buffer[i],charsize*i,0);
		}
		buffersize=sprintf(buffer,"--------------");
    20a2:	ef e0       	ldi	r30, 0x0F	; 15
    20a4:	f1 e0       	ldi	r31, 0x01	; 1
    20a6:	a7 2d       	mov	r26, r7
    20a8:	b8 2d       	mov	r27, r8
    20aa:	86 2d       	mov	r24, r6
    20ac:	01 90       	ld	r0, Z+
    20ae:	0d 92       	st	X+, r0
    20b0:	8a 95       	dec	r24
    20b2:	e1 f7       	brne	.-8      	; 0x20ac <_Z13uhreinstellenv+0xb8>
    20b4:	2d 88       	ldd	r2, Y+21	; 0x15
    20b6:	3e 88       	ldd	r3, Y+22	; 0x16
    20b8:	1b 2d       	mov	r17, r11
		for(uint8_t i = 0; i<buffersize;i++){
			oled.draw_ASCI(buffer[i],charsize*i,8);
    20ba:	f1 01       	movw	r30, r2
    20bc:	61 91       	ld	r22, Z+
    20be:	1f 01       	movw	r2, r30
    20c0:	28 e0       	ldi	r18, 0x08	; 8
    20c2:	41 2f       	mov	r20, r17
    20c4:	8a ea       	ldi	r24, 0xAA	; 170
    20c6:	92 e0       	ldi	r25, 0x02	; 2
    20c8:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    20cc:	1a 5f       	subi	r17, 0xFA	; 250
		buffersize=sprintf(buffer,"Uhreinstellung");
		for(uint8_t i = 0; i<buffersize;i++){
			oled.draw_ASCI(buffer[i],charsize*i,0);
		}
		buffersize=sprintf(buffer,"--------------");
		for(uint8_t i = 0; i<buffersize;i++){
    20ce:	14 35       	cpi	r17, 0x54	; 84
    20d0:	a1 f7       	brne	.-24     	; 0x20ba <_Z13uhreinstellenv+0xc6>
			oled.draw_ASCI(buffer[i],charsize*i,8);
		}
		buffer[0]=rtc.Stunden/10;
    20d2:	e3 ed       	ldi	r30, 0xD3	; 211
    20d4:	f6 e0       	ldi	r31, 0x06	; 6
    20d6:	80 81       	ld	r24, Z
    20d8:	8a 9d       	mul	r24, r10
    20da:	91 2d       	mov	r25, r1
    20dc:	11 24       	eor	r1, r1
    20de:	96 95       	lsr	r25
    20e0:	96 95       	lsr	r25
    20e2:	96 95       	lsr	r25
    20e4:	99 83       	std	Y+1, r25	; 0x01
		buffer[1]=rtc.Stunden%10;
    20e6:	99 0f       	add	r25, r25
    20e8:	29 2f       	mov	r18, r25
    20ea:	22 0f       	add	r18, r18
    20ec:	22 0f       	add	r18, r18
    20ee:	92 0f       	add	r25, r18
    20f0:	89 1b       	sub	r24, r25
    20f2:	8a 83       	std	Y+2, r24	; 0x02
		buffer[2]=':';
    20f4:	fa e3       	ldi	r31, 0x3A	; 58
    20f6:	fb 83       	std	Y+3, r31	; 0x03
		buffer[3]=rtc.Minuten/10;
    20f8:	e4 ed       	ldi	r30, 0xD4	; 212
    20fa:	f6 e0       	ldi	r31, 0x06	; 6
    20fc:	80 81       	ld	r24, Z
    20fe:	8a 9d       	mul	r24, r10
    2100:	91 2d       	mov	r25, r1
    2102:	11 24       	eor	r1, r1
    2104:	96 95       	lsr	r25
    2106:	96 95       	lsr	r25
    2108:	96 95       	lsr	r25
    210a:	9c 83       	std	Y+4, r25	; 0x04
		buffer[4]=rtc.Minuten%10;
    210c:	99 0f       	add	r25, r25
    210e:	29 2f       	mov	r18, r25
    2110:	22 0f       	add	r18, r18
    2112:	22 0f       	add	r18, r18
    2114:	92 0f       	add	r25, r18
    2116:	89 1b       	sub	r24, r25
    2118:	8d 83       	std	Y+5, r24	; 0x05
		buffer[5]=' ';
    211a:	80 e2       	ldi	r24, 0x20	; 32
    211c:	8e 83       	std	Y+6, r24	; 0x06
		buffer[6]=rtc.Tag/10;
    211e:	f2 01       	movw	r30, r4
    2120:	80 81       	ld	r24, Z
    2122:	8a 9d       	mul	r24, r10
    2124:	91 2d       	mov	r25, r1
    2126:	11 24       	eor	r1, r1
    2128:	96 95       	lsr	r25
    212a:	96 95       	lsr	r25
    212c:	96 95       	lsr	r25
    212e:	9f 83       	std	Y+7, r25	; 0x07
		buffer[7]=rtc.Tag%10;
    2130:	99 0f       	add	r25, r25
    2132:	29 2f       	mov	r18, r25
    2134:	22 0f       	add	r18, r18
    2136:	22 0f       	add	r18, r18
    2138:	92 0f       	add	r25, r18
    213a:	89 1b       	sub	r24, r25
    213c:	88 87       	std	Y+8, r24	; 0x08
		buffer[8]='.';
    213e:	8e e2       	ldi	r24, 0x2E	; 46
    2140:	89 87       	std	Y+9, r24	; 0x09
		buffer[9]=rtc.Monat/10;
    2142:	f6 01       	movw	r30, r12
    2144:	90 81       	ld	r25, Z
    2146:	9a 9d       	mul	r25, r10
    2148:	21 2d       	mov	r18, r1
    214a:	11 24       	eor	r1, r1
    214c:	26 95       	lsr	r18
    214e:	26 95       	lsr	r18
    2150:	26 95       	lsr	r18
    2152:	2a 87       	std	Y+10, r18	; 0x0a
		buffer[10]=rtc.Monat%10;
    2154:	22 0f       	add	r18, r18
    2156:	32 2f       	mov	r19, r18
    2158:	33 0f       	add	r19, r19
    215a:	33 0f       	add	r19, r19
    215c:	23 0f       	add	r18, r19
    215e:	92 1b       	sub	r25, r18
    2160:	9b 87       	std	Y+11, r25	; 0x0b
		buffer[11]='.';
    2162:	8c 87       	std	Y+12, r24	; 0x0c
		buffer[12]=rtc.Jahr/10;
    2164:	e9 ed       	ldi	r30, 0xD9	; 217
    2166:	f6 e0       	ldi	r31, 0x06	; 6
    2168:	80 81       	ld	r24, Z
    216a:	8a 9d       	mul	r24, r10
    216c:	91 2d       	mov	r25, r1
    216e:	11 24       	eor	r1, r1
    2170:	96 95       	lsr	r25
    2172:	96 95       	lsr	r25
    2174:	96 95       	lsr	r25
    2176:	9d 87       	std	Y+13, r25	; 0x0d
		buffer[13]=rtc.Jahr%10;
    2178:	99 0f       	add	r25, r25
    217a:	29 2f       	mov	r18, r25
    217c:	22 0f       	add	r18, r18
    217e:	22 0f       	add	r18, r18
    2180:	92 0f       	add	r25, r18
    2182:	89 1b       	sub	r24, r25
    2184:	8e 87       	std	Y+14, r24	; 0x0e
    2186:	3b 2c       	mov	r3, r11
    2188:	01 e0       	ldi	r16, 0x01	; 1
    218a:	1b 2d       	mov	r17, r11
    218c:	04 c0       	rjmp	.+8      	; 0x2196 <_Z13uhreinstellenv+0x1a2>
    218e:	1f 5f       	subi	r17, 0xFF	; 255
    2190:	0f 5f       	subi	r16, 0xFF	; 255
    2192:	f0 e1       	ldi	r31, 0x10	; 16
    2194:	3f 0e       	add	r3, r31
		buffersize=14;
		for(uint8_t i = 0; i<5;i++){
			if(i!=2){
    2196:	12 30       	cpi	r17, 0x02	; 2
    2198:	69 f0       	breq	.+26     	; 0x21b4 <_Z13uhreinstellenv+0x1c0>
				oled.draw_number16x16(buffer[i],i*numbersmalsize,2*charhighte);
    219a:	20 e1       	ldi	r18, 0x10	; 16
    219c:	43 2d       	mov	r20, r3
    219e:	f7 01       	movw	r30, r14
    21a0:	e1 0f       	add	r30, r17
    21a2:	f1 1d       	adc	r31, r1
    21a4:	60 81       	ld	r22, Z
    21a6:	8a ea       	ldi	r24, 0xAA	; 170
    21a8:	92 e0       	ldi	r25, 0x02	; 2
    21aa:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <_ZN7Display16draw_number16x16Ehhh>
		buffer[10]=rtc.Monat%10;
		buffer[11]='.';
		buffer[12]=rtc.Jahr/10;
		buffer[13]=rtc.Jahr%10;
		buffersize=14;
		for(uint8_t i = 0; i<5;i++){
    21ae:	05 30       	cpi	r16, 0x05	; 5
    21b0:	70 f3       	brcs	.-36     	; 0x218e <_Z13uhreinstellenv+0x19a>
    21b2:	08 c0       	rjmp	.+16     	; 0x21c4 <_Z13uhreinstellenv+0x1d0>
			if(i!=2){
				oled.draw_number16x16(buffer[i],i*numbersmalsize,2*charhighte);
			}
			else {
				oled.draw_ASCI(buffer[i],i*numbersmalsize+numbersmalsize/2,2*charhighte+charhighte/2);
    21b4:	24 e1       	ldi	r18, 0x14	; 20
    21b6:	48 e2       	ldi	r20, 0x28	; 40
    21b8:	6b 81       	ldd	r22, Y+3	; 0x03
    21ba:	8a ea       	ldi	r24, 0xAA	; 170
    21bc:	92 e0       	ldi	r25, 0x02	; 2
    21be:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    21c2:	e5 cf       	rjmp	.-54     	; 0x218e <_Z13uhreinstellenv+0x19a>
    21c4:	8e 01       	movw	r16, r28
    21c6:	09 5f       	subi	r16, 0xF9	; 249
    21c8:	1f 4f       	sbci	r17, 0xFF	; 255
		buffer[10]=rtc.Monat%10;
		buffer[11]='.';
		buffer[12]=rtc.Jahr/10;
		buffer[13]=rtc.Jahr%10;
		buffersize=14;
		for(uint8_t i = 0; i<5;i++){
    21ca:	2b 2c       	mov	r2, r11
    21cc:	0f 2e       	mov	r0, r31
    21ce:	f6 e0       	ldi	r31, 0x06	; 6
    21d0:	3f 2e       	mov	r3, r31
    21d2:	f0 2d       	mov	r31, r0
			else {
				oled.draw_ASCI(buffer[i],i*numbersmalsize+numbersmalsize/2,2*charhighte+charhighte/2);
			}
		}
		for(uint8_t i = 6; i<buffersize;i++){
			if(i!=8 && i!=11){
    21d4:	88 e0       	ldi	r24, 0x08	; 8
    21d6:	38 16       	cp	r3, r24
    21d8:	61 f0       	breq	.+24     	; 0x21f2 <_Z13uhreinstellenv+0x1fe>
    21da:	9b e0       	ldi	r25, 0x0B	; 11
    21dc:	39 16       	cp	r3, r25
    21de:	49 f0       	breq	.+18     	; 0x21f2 <_Z13uhreinstellenv+0x1fe>
				oled.draw_number16x16(buffer[i],i*numbersmalsize-6*numbersmalsize,4*charhighte);
    21e0:	20 e2       	ldi	r18, 0x20	; 32
    21e2:	42 2d       	mov	r20, r2
    21e4:	f8 01       	movw	r30, r16
    21e6:	60 81       	ld	r22, Z
    21e8:	8a ea       	ldi	r24, 0xAA	; 170
    21ea:	92 e0       	ldi	r25, 0x02	; 2
    21ec:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <_ZN7Display16draw_number16x16Ehhh>
    21f0:	09 c0       	rjmp	.+18     	; 0x2204 <_Z13uhreinstellenv+0x210>
			}
			else {
				oled.draw_ASCI(buffer[i],i*numbersmalsize+numbersmalsize/2-6*numbersmalsize,5*charhighte);
    21f2:	28 e2       	ldi	r18, 0x28	; 40
    21f4:	48 e0       	ldi	r20, 0x08	; 8
    21f6:	42 0d       	add	r20, r2
    21f8:	f8 01       	movw	r30, r16
    21fa:	60 81       	ld	r22, Z
    21fc:	8a ea       	ldi	r24, 0xAA	; 170
    21fe:	92 e0       	ldi	r25, 0x02	; 2
    2200:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
			}
			else {
				oled.draw_ASCI(buffer[i],i*numbersmalsize+numbersmalsize/2,2*charhighte+charhighte/2);
			}
		}
		for(uint8_t i = 6; i<buffersize;i++){
    2204:	33 94       	inc	r3
    2206:	0f 5f       	subi	r16, 0xFF	; 255
    2208:	1f 4f       	sbci	r17, 0xFF	; 255
    220a:	f0 e1       	ldi	r31, 0x10	; 16
    220c:	2f 0e       	add	r2, r31
    220e:	8e e0       	ldi	r24, 0x0E	; 14
    2210:	38 12       	cpse	r3, r24
    2212:	e0 cf       	rjmp	.-64     	; 0x21d4 <_Z13uhreinstellenv+0x1e0>
			else {
				oled.draw_ASCI(buffer[i],i*numbersmalsize+numbersmalsize/2-6*numbersmalsize,5*charhighte);
			}
		}

		oled.sendFrame();
    2214:	8a ea       	ldi	r24, 0xAA	; 170
    2216:	92 e0       	ldi	r25, 0x02	; 2
    2218:	0e 94 5f 03 	call	0x6be	; 0x6be <_ZN7Display9sendFrameEv>
		oled.clearFrame();
    221c:	8a ea       	ldi	r24, 0xAA	; 170
    221e:	92 e0       	ldi	r25, 0x02	; 2
    2220:	0e 94 b9 02 	call	0x572	; 0x572 <_ZN7Display10clearFrameEv>
		switch (pos) {
    2224:	89 2d       	mov	r24, r9
    2226:	90 e0       	ldi	r25, 0x00	; 0
    2228:	8a 30       	cpi	r24, 0x0A	; 10
    222a:	91 05       	cpc	r25, r1
    222c:	08 f0       	brcs	.+2      	; 0x2230 <_Z13uhreinstellenv+0x23c>
    222e:	43 c2       	rjmp	.+1158   	; 0x26b6 <_Z13uhreinstellenv+0x6c2>
    2230:	fc 01       	movw	r30, r24
    2232:	ec 5c       	subi	r30, 0xCC	; 204
    2234:	ff 4f       	sbci	r31, 0xFF	; 255
    2236:	0c 94 3b 22 	jmp	0x4476	; 0x4476 <__tablejump2__>
			case 0:
				rtc.Stunden=Tastatur.ZahlenausTastatur()*10;
    223a:	89 ea       	ldi	r24, 0xA9	; 169
    223c:	92 e0       	ldi	r25, 0x02	; 2
    223e:	0e 94 36 19 	call	0x326c	; 0x326c <_ZN9Interface17ZahlenausTastaturEv>
    2242:	88 0f       	add	r24, r24
    2244:	98 2f       	mov	r25, r24
    2246:	99 0f       	add	r25, r25
    2248:	99 0f       	add	r25, r25
    224a:	89 0f       	add	r24, r25
				if(rtc.Stunden>=24){
    224c:	88 31       	cpi	r24, 0x18	; 24
    224e:	08 f4       	brcc	.+2      	; 0x2252 <_Z13uhreinstellenv+0x25e>
    2250:	45 c2       	rjmp	.+1162   	; 0x26dc <_Z13uhreinstellenv+0x6e8>
					rtc.Stunden=0;
    2252:	e3 ed       	ldi	r30, 0xD3	; 211
    2254:	f6 e0       	ldi	r31, 0x06	; 6
    2256:	10 82       	st	Z, r1
					pos=-1;
					buffersize=sprintf(buffer,"Stunden falsch");
    2258:	ec e5       	ldi	r30, 0x5C	; 92
    225a:	f2 e0       	ldi	r31, 0x02	; 2
    225c:	a7 2d       	mov	r26, r7
    225e:	b8 2d       	mov	r27, r8
    2260:	86 2d       	mov	r24, r6
    2262:	01 90       	ld	r0, Z+
    2264:	0d 92       	st	X+, r0
    2266:	8a 95       	dec	r24
    2268:	e1 f7       	brne	.-8      	; 0x2262 <_Z13uhreinstellenv+0x26e>
    226a:	2d 88       	ldd	r2, Y+21	; 0x15
    226c:	3e 88       	ldd	r3, Y+22	; 0x16
    226e:	1b 2d       	mov	r17, r11
					for(uint8_t i = 0; i<buffersize;i++){
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
    2270:	f1 01       	movw	r30, r2
    2272:	61 91       	ld	r22, Z+
    2274:	1f 01       	movw	r2, r30
    2276:	28 e3       	ldi	r18, 0x38	; 56
    2278:	41 2f       	mov	r20, r17
    227a:	8a ea       	ldi	r24, 0xAA	; 170
    227c:	92 e0       	ldi	r25, 0x02	; 2
    227e:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    2282:	1a 5f       	subi	r17, 0xFA	; 250
				rtc.Stunden=Tastatur.ZahlenausTastatur()*10;
				if(rtc.Stunden>=24){
					rtc.Stunden=0;
					pos=-1;
					buffersize=sprintf(buffer,"Stunden falsch");
					for(uint8_t i = 0; i<buffersize;i++){
    2284:	14 35       	cpi	r17, 0x54	; 84
    2286:	a1 f7       	brne	.-24     	; 0x2270 <_Z13uhreinstellenv+0x27c>
    2288:	2d c2       	rjmp	.+1114   	; 0x26e4 <_Z13uhreinstellenv+0x6f0>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 1:
				rtc.Stunden+=Tastatur.ZahlenausTastatur();
    228a:	89 ea       	ldi	r24, 0xA9	; 169
    228c:	92 e0       	ldi	r25, 0x02	; 2
    228e:	0e 94 36 19 	call	0x326c	; 0x326c <_ZN9Interface17ZahlenausTastaturEv>
    2292:	e3 ed       	ldi	r30, 0xD3	; 211
    2294:	f6 e0       	ldi	r31, 0x06	; 6
    2296:	20 81       	ld	r18, Z
    2298:	90 e0       	ldi	r25, 0x00	; 0
    229a:	82 0f       	add	r24, r18
    229c:	91 1d       	adc	r25, r1
				if(rtc.Stunden>=24){
    229e:	88 31       	cpi	r24, 0x18	; 24
    22a0:	10 f4       	brcc	.+4      	; 0x22a6 <_Z13uhreinstellenv+0x2b2>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 1:
				rtc.Stunden+=Tastatur.ZahlenausTastatur();
    22a2:	80 83       	st	Z, r24
    22a4:	52 c2       	rjmp	.+1188   	; 0x274a <_Z13uhreinstellenv+0x756>
				if(rtc.Stunden>=24){
					rtc.Stunden=0;
    22a6:	e3 ed       	ldi	r30, 0xD3	; 211
    22a8:	f6 e0       	ldi	r31, 0x06	; 6
    22aa:	10 82       	st	Z, r1
					pos=-1;
					buffersize=sprintf(buffer,"Stunden falsch");
    22ac:	ec e5       	ldi	r30, 0x5C	; 92
    22ae:	f2 e0       	ldi	r31, 0x02	; 2
    22b0:	a7 2d       	mov	r26, r7
    22b2:	b8 2d       	mov	r27, r8
    22b4:	86 2d       	mov	r24, r6
    22b6:	01 90       	ld	r0, Z+
    22b8:	0d 92       	st	X+, r0
    22ba:	8a 95       	dec	r24
    22bc:	e1 f7       	brne	.-8      	; 0x22b6 <_Z13uhreinstellenv+0x2c2>
    22be:	2d 88       	ldd	r2, Y+21	; 0x15
    22c0:	3e 88       	ldd	r3, Y+22	; 0x16
    22c2:	1b 2d       	mov	r17, r11
					for(uint8_t i = 0; i<buffersize;i++){
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
    22c4:	f1 01       	movw	r30, r2
    22c6:	61 91       	ld	r22, Z+
    22c8:	1f 01       	movw	r2, r30
    22ca:	28 e3       	ldi	r18, 0x38	; 56
    22cc:	41 2f       	mov	r20, r17
    22ce:	8a ea       	ldi	r24, 0xAA	; 170
    22d0:	92 e0       	ldi	r25, 0x02	; 2
    22d2:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    22d6:	1a 5f       	subi	r17, 0xFA	; 250
				rtc.Stunden+=Tastatur.ZahlenausTastatur();
				if(rtc.Stunden>=24){
					rtc.Stunden=0;
					pos=-1;
					buffersize=sprintf(buffer,"Stunden falsch");
					for(uint8_t i = 0; i<buffersize;i++){
    22d8:	14 35       	cpi	r17, 0x54	; 84
    22da:	a1 f7       	brne	.-24     	; 0x22c4 <_Z13uhreinstellenv+0x2d0>
    22dc:	06 c2       	rjmp	.+1036   	; 0x26ea <_Z13uhreinstellenv+0x6f6>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 2:
				rtc.Minuten=Tastatur.ZahlenausTastatur()*10;
    22de:	89 ea       	ldi	r24, 0xA9	; 169
    22e0:	92 e0       	ldi	r25, 0x02	; 2
    22e2:	0e 94 36 19 	call	0x326c	; 0x326c <_ZN9Interface17ZahlenausTastaturEv>
    22e6:	88 0f       	add	r24, r24
    22e8:	98 2f       	mov	r25, r24
    22ea:	99 0f       	add	r25, r25
    22ec:	99 0f       	add	r25, r25
    22ee:	89 0f       	add	r24, r25
				if(rtc.Minuten>=60){
    22f0:	8c 33       	cpi	r24, 0x3C	; 60
    22f2:	20 f4       	brcc	.+8      	; 0x22fc <_Z13uhreinstellenv+0x308>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 2:
				rtc.Minuten=Tastatur.ZahlenausTastatur()*10;
    22f4:	e4 ed       	ldi	r30, 0xD4	; 212
    22f6:	f6 e0       	ldi	r31, 0x06	; 6
    22f8:	80 83       	st	Z, r24
    22fa:	27 c2       	rjmp	.+1102   	; 0x274a <_Z13uhreinstellenv+0x756>
				if(rtc.Minuten>=60){
					rtc.Minuten=0;
    22fc:	e4 ed       	ldi	r30, 0xD4	; 212
    22fe:	f6 e0       	ldi	r31, 0x06	; 6
    2300:	10 82       	st	Z, r1
					pos=1;
					buffersize=sprintf(buffer,"Minuten falsch");
    2302:	eb e6       	ldi	r30, 0x6B	; 107
    2304:	f2 e0       	ldi	r31, 0x02	; 2
    2306:	a7 2d       	mov	r26, r7
    2308:	b8 2d       	mov	r27, r8
    230a:	86 2d       	mov	r24, r6
    230c:	01 90       	ld	r0, Z+
    230e:	0d 92       	st	X+, r0
    2310:	8a 95       	dec	r24
    2312:	e1 f7       	brne	.-8      	; 0x230c <_Z13uhreinstellenv+0x318>
    2314:	2d 88       	ldd	r2, Y+21	; 0x15
    2316:	3e 88       	ldd	r3, Y+22	; 0x16
    2318:	1b 2d       	mov	r17, r11
					for(uint8_t i = 0; i<buffersize;i++){
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
    231a:	f1 01       	movw	r30, r2
    231c:	61 91       	ld	r22, Z+
    231e:	1f 01       	movw	r2, r30
    2320:	28 e3       	ldi	r18, 0x38	; 56
    2322:	41 2f       	mov	r20, r17
    2324:	8a ea       	ldi	r24, 0xAA	; 170
    2326:	92 e0       	ldi	r25, 0x02	; 2
    2328:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    232c:	1a 5f       	subi	r17, 0xFA	; 250
				rtc.Minuten=Tastatur.ZahlenausTastatur()*10;
				if(rtc.Minuten>=60){
					rtc.Minuten=0;
					pos=1;
					buffersize=sprintf(buffer,"Minuten falsch");
					for(uint8_t i = 0; i<buffersize;i++){
    232e:	14 35       	cpi	r17, 0x54	; 84
    2330:	a1 f7       	brne	.-24     	; 0x231a <_Z13uhreinstellenv+0x326>
    2332:	de c1       	rjmp	.+956    	; 0x26f0 <_Z13uhreinstellenv+0x6fc>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 3:
				rtc.Minuten+=Tastatur.ZahlenausTastatur();
    2334:	89 ea       	ldi	r24, 0xA9	; 169
    2336:	92 e0       	ldi	r25, 0x02	; 2
    2338:	0e 94 36 19 	call	0x326c	; 0x326c <_ZN9Interface17ZahlenausTastaturEv>
    233c:	e4 ed       	ldi	r30, 0xD4	; 212
    233e:	f6 e0       	ldi	r31, 0x06	; 6
    2340:	20 81       	ld	r18, Z
    2342:	90 e0       	ldi	r25, 0x00	; 0
    2344:	82 0f       	add	r24, r18
    2346:	91 1d       	adc	r25, r1
				if(rtc.Minuten>=60){
    2348:	8c 33       	cpi	r24, 0x3C	; 60
    234a:	10 f4       	brcc	.+4      	; 0x2350 <_Z13uhreinstellenv+0x35c>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 3:
				rtc.Minuten+=Tastatur.ZahlenausTastatur();
    234c:	80 83       	st	Z, r24
    234e:	fd c1       	rjmp	.+1018   	; 0x274a <_Z13uhreinstellenv+0x756>
				if(rtc.Minuten>=60){
					rtc.Minuten=0;
    2350:	e4 ed       	ldi	r30, 0xD4	; 212
    2352:	f6 e0       	ldi	r31, 0x06	; 6
    2354:	10 82       	st	Z, r1
					pos=1;
					buffersize=sprintf(buffer,"Minuten falsch");
    2356:	eb e6       	ldi	r30, 0x6B	; 107
    2358:	f2 e0       	ldi	r31, 0x02	; 2
    235a:	a7 2d       	mov	r26, r7
    235c:	b8 2d       	mov	r27, r8
    235e:	86 2d       	mov	r24, r6
    2360:	01 90       	ld	r0, Z+
    2362:	0d 92       	st	X+, r0
    2364:	8a 95       	dec	r24
    2366:	e1 f7       	brne	.-8      	; 0x2360 <_Z13uhreinstellenv+0x36c>
    2368:	2d 88       	ldd	r2, Y+21	; 0x15
    236a:	3e 88       	ldd	r3, Y+22	; 0x16
    236c:	1b 2d       	mov	r17, r11
					for(uint8_t i = 0; i<buffersize;i++){
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
    236e:	f1 01       	movw	r30, r2
    2370:	61 91       	ld	r22, Z+
    2372:	1f 01       	movw	r2, r30
    2374:	28 e3       	ldi	r18, 0x38	; 56
    2376:	41 2f       	mov	r20, r17
    2378:	8a ea       	ldi	r24, 0xAA	; 170
    237a:	92 e0       	ldi	r25, 0x02	; 2
    237c:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    2380:	1a 5f       	subi	r17, 0xFA	; 250
				rtc.Minuten+=Tastatur.ZahlenausTastatur();
				if(rtc.Minuten>=60){
					rtc.Minuten=0;
					pos=1;
					buffersize=sprintf(buffer,"Minuten falsch");
					for(uint8_t i = 0; i<buffersize;i++){
    2382:	14 35       	cpi	r17, 0x54	; 84
    2384:	a1 f7       	brne	.-24     	; 0x236e <_Z13uhreinstellenv+0x37a>
    2386:	b7 c1       	rjmp	.+878    	; 0x26f6 <_Z13uhreinstellenv+0x702>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 4:
				rtc.Tag=Tastatur.ZahlenausTastatur()*10;
    2388:	89 ea       	ldi	r24, 0xA9	; 169
    238a:	92 e0       	ldi	r25, 0x02	; 2
    238c:	0e 94 36 19 	call	0x326c	; 0x326c <_ZN9Interface17ZahlenausTastaturEv>
    2390:	88 0f       	add	r24, r24
    2392:	98 2f       	mov	r25, r24
    2394:	99 0f       	add	r25, r25
    2396:	99 0f       	add	r25, r25
    2398:	89 0f       	add	r24, r25
				if(rtc.Tag>=32){
    239a:	80 32       	cpi	r24, 0x20	; 32
    239c:	18 f4       	brcc	.+6      	; 0x23a4 <_Z13uhreinstellenv+0x3b0>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 4:
				rtc.Tag=Tastatur.ZahlenausTastatur()*10;
    239e:	f2 01       	movw	r30, r4
    23a0:	80 83       	st	Z, r24
    23a2:	d3 c1       	rjmp	.+934    	; 0x274a <_Z13uhreinstellenv+0x756>
				if(rtc.Tag>=32){
					rtc.Tag=0;
    23a4:	f2 01       	movw	r30, r4
    23a6:	10 82       	st	Z, r1
					pos=3;
					buffersize=sprintf(buffer,"Tag falsch");
    23a8:	8b e0       	ldi	r24, 0x0B	; 11
    23aa:	ea e7       	ldi	r30, 0x7A	; 122
    23ac:	f2 e0       	ldi	r31, 0x02	; 2
    23ae:	a7 2d       	mov	r26, r7
    23b0:	b8 2d       	mov	r27, r8
    23b2:	01 90       	ld	r0, Z+
    23b4:	0d 92       	st	X+, r0
    23b6:	8a 95       	dec	r24
    23b8:	e1 f7       	brne	.-8      	; 0x23b2 <_Z13uhreinstellenv+0x3be>
    23ba:	2d 88       	ldd	r2, Y+21	; 0x15
    23bc:	3e 88       	ldd	r3, Y+22	; 0x16
    23be:	1b 2d       	mov	r17, r11
					for(uint8_t i = 0; i<buffersize;i++){
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
    23c0:	f1 01       	movw	r30, r2
    23c2:	61 91       	ld	r22, Z+
    23c4:	1f 01       	movw	r2, r30
    23c6:	28 e3       	ldi	r18, 0x38	; 56
    23c8:	41 2f       	mov	r20, r17
    23ca:	8a ea       	ldi	r24, 0xAA	; 170
    23cc:	92 e0       	ldi	r25, 0x02	; 2
    23ce:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    23d2:	1a 5f       	subi	r17, 0xFA	; 250
				rtc.Tag=Tastatur.ZahlenausTastatur()*10;
				if(rtc.Tag>=32){
					rtc.Tag=0;
					pos=3;
					buffersize=sprintf(buffer,"Tag falsch");
					for(uint8_t i = 0; i<buffersize;i++){
    23d4:	1c 33       	cpi	r17, 0x3C	; 60
    23d6:	a1 f7       	brne	.-24     	; 0x23c0 <_Z13uhreinstellenv+0x3cc>
    23d8:	91 c1       	rjmp	.+802    	; 0x26fc <_Z13uhreinstellenv+0x708>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 5:
				rtc.Tag+=Tastatur.ZahlenausTastatur();
    23da:	89 ea       	ldi	r24, 0xA9	; 169
    23dc:	92 e0       	ldi	r25, 0x02	; 2
    23de:	0e 94 36 19 	call	0x326c	; 0x326c <_ZN9Interface17ZahlenausTastaturEv>
    23e2:	f2 01       	movw	r30, r4
    23e4:	20 81       	ld	r18, Z
    23e6:	90 e0       	ldi	r25, 0x00	; 0
    23e8:	82 0f       	add	r24, r18
    23ea:	91 1d       	adc	r25, r1
				if(rtc.Tag>=32){
    23ec:	80 32       	cpi	r24, 0x20	; 32
    23ee:	10 f4       	brcc	.+4      	; 0x23f4 <_Z13uhreinstellenv+0x400>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 5:
				rtc.Tag+=Tastatur.ZahlenausTastatur();
    23f0:	80 83       	st	Z, r24
    23f2:	ab c1       	rjmp	.+854    	; 0x274a <_Z13uhreinstellenv+0x756>
				if(rtc.Tag>=32){
					rtc.Tag=0;
    23f4:	f2 01       	movw	r30, r4
    23f6:	10 82       	st	Z, r1
					pos=3;
					buffersize=sprintf(buffer,"Tag falsch");
    23f8:	8b e0       	ldi	r24, 0x0B	; 11
    23fa:	ea e7       	ldi	r30, 0x7A	; 122
    23fc:	f2 e0       	ldi	r31, 0x02	; 2
    23fe:	a7 2d       	mov	r26, r7
    2400:	b8 2d       	mov	r27, r8
    2402:	01 90       	ld	r0, Z+
    2404:	0d 92       	st	X+, r0
    2406:	8a 95       	dec	r24
    2408:	e1 f7       	brne	.-8      	; 0x2402 <_Z13uhreinstellenv+0x40e>
    240a:	2d 88       	ldd	r2, Y+21	; 0x15
    240c:	3e 88       	ldd	r3, Y+22	; 0x16
    240e:	1b 2d       	mov	r17, r11
					for(uint8_t i = 0; i<buffersize;i++){
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
    2410:	f1 01       	movw	r30, r2
    2412:	61 91       	ld	r22, Z+
    2414:	1f 01       	movw	r2, r30
    2416:	28 e3       	ldi	r18, 0x38	; 56
    2418:	41 2f       	mov	r20, r17
    241a:	8a ea       	ldi	r24, 0xAA	; 170
    241c:	92 e0       	ldi	r25, 0x02	; 2
    241e:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    2422:	1a 5f       	subi	r17, 0xFA	; 250
				rtc.Tag+=Tastatur.ZahlenausTastatur();
				if(rtc.Tag>=32){
					rtc.Tag=0;
					pos=3;
					buffersize=sprintf(buffer,"Tag falsch");
					for(uint8_t i = 0; i<buffersize;i++){
    2424:	1c 33       	cpi	r17, 0x3C	; 60
    2426:	a1 f7       	brne	.-24     	; 0x2410 <_Z13uhreinstellenv+0x41c>
    2428:	6e c1       	rjmp	.+732    	; 0x2706 <_Z13uhreinstellenv+0x712>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 6:
				rtc.Monat=Tastatur.ZahlenausTastatur()*10;
    242a:	89 ea       	ldi	r24, 0xA9	; 169
    242c:	92 e0       	ldi	r25, 0x02	; 2
    242e:	0e 94 36 19 	call	0x326c	; 0x326c <_ZN9Interface17ZahlenausTastaturEv>
    2432:	88 0f       	add	r24, r24
    2434:	98 2f       	mov	r25, r24
    2436:	99 0f       	add	r25, r25
    2438:	99 0f       	add	r25, r25
    243a:	89 0f       	add	r24, r25
				if(rtc.Monat>=13){
    243c:	8d 30       	cpi	r24, 0x0D	; 13
    243e:	18 f4       	brcc	.+6      	; 0x2446 <_Z13uhreinstellenv+0x452>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 6:
				rtc.Monat=Tastatur.ZahlenausTastatur()*10;
    2440:	f6 01       	movw	r30, r12
    2442:	80 83       	st	Z, r24
    2444:	82 c1       	rjmp	.+772    	; 0x274a <_Z13uhreinstellenv+0x756>
				if(rtc.Monat>=13){
					rtc.Monat=0;
    2446:	f6 01       	movw	r30, r12
    2448:	10 82       	st	Z, r1
					pos=5;
					buffersize=sprintf(buffer,"Monat falsch");
    244a:	8d e0       	ldi	r24, 0x0D	; 13
    244c:	e5 e8       	ldi	r30, 0x85	; 133
    244e:	f2 e0       	ldi	r31, 0x02	; 2
    2450:	a7 2d       	mov	r26, r7
    2452:	b8 2d       	mov	r27, r8
    2454:	01 90       	ld	r0, Z+
    2456:	0d 92       	st	X+, r0
    2458:	8a 95       	dec	r24
    245a:	e1 f7       	brne	.-8      	; 0x2454 <_Z13uhreinstellenv+0x460>
    245c:	2d 88       	ldd	r2, Y+21	; 0x15
    245e:	3e 88       	ldd	r3, Y+22	; 0x16
    2460:	1b 2d       	mov	r17, r11
					for(uint8_t i = 0; i<buffersize;i++){
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
    2462:	f1 01       	movw	r30, r2
    2464:	61 91       	ld	r22, Z+
    2466:	1f 01       	movw	r2, r30
    2468:	28 e3       	ldi	r18, 0x38	; 56
    246a:	41 2f       	mov	r20, r17
    246c:	8a ea       	ldi	r24, 0xAA	; 170
    246e:	92 e0       	ldi	r25, 0x02	; 2
    2470:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    2474:	1a 5f       	subi	r17, 0xFA	; 250
				rtc.Monat=Tastatur.ZahlenausTastatur()*10;
				if(rtc.Monat>=13){
					rtc.Monat=0;
					pos=5;
					buffersize=sprintf(buffer,"Monat falsch");
					for(uint8_t i = 0; i<buffersize;i++){
    2476:	18 34       	cpi	r17, 0x48	; 72
    2478:	a1 f7       	brne	.-24     	; 0x2462 <_Z13uhreinstellenv+0x46e>
    247a:	4a c1       	rjmp	.+660    	; 0x2710 <_Z13uhreinstellenv+0x71c>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 7:
				rtc.Monat+=Tastatur.ZahlenausTastatur();
    247c:	89 ea       	ldi	r24, 0xA9	; 169
    247e:	92 e0       	ldi	r25, 0x02	; 2
    2480:	0e 94 36 19 	call	0x326c	; 0x326c <_ZN9Interface17ZahlenausTastaturEv>
    2484:	f6 01       	movw	r30, r12
    2486:	20 81       	ld	r18, Z
    2488:	90 e0       	ldi	r25, 0x00	; 0
    248a:	82 0f       	add	r24, r18
    248c:	91 1d       	adc	r25, r1
				if(rtc.Monat>=13){
    248e:	8d 30       	cpi	r24, 0x0D	; 13
    2490:	10 f4       	brcc	.+4      	; 0x2496 <_Z13uhreinstellenv+0x4a2>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 7:
				rtc.Monat+=Tastatur.ZahlenausTastatur();
    2492:	80 83       	st	Z, r24
    2494:	1e c0       	rjmp	.+60     	; 0x24d2 <_Z13uhreinstellenv+0x4de>
				if(rtc.Monat>=13){
					rtc.Monat=0;
    2496:	f6 01       	movw	r30, r12
    2498:	10 82       	st	Z, r1
					pos=5;
					buffersize=sprintf(buffer,"Monat falsch");
    249a:	8d e0       	ldi	r24, 0x0D	; 13
    249c:	e5 e8       	ldi	r30, 0x85	; 133
    249e:	f2 e0       	ldi	r31, 0x02	; 2
    24a0:	a7 2d       	mov	r26, r7
    24a2:	b8 2d       	mov	r27, r8
    24a4:	01 90       	ld	r0, Z+
    24a6:	0d 92       	st	X+, r0
    24a8:	8a 95       	dec	r24
    24aa:	e1 f7       	brne	.-8      	; 0x24a4 <_Z13uhreinstellenv+0x4b0>
    24ac:	2d 88       	ldd	r2, Y+21	; 0x15
    24ae:	3e 88       	ldd	r3, Y+22	; 0x16
    24b0:	1b 2d       	mov	r17, r11
					for(uint8_t i = 0; i<buffersize;i++){
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
    24b2:	f1 01       	movw	r30, r2
    24b4:	61 91       	ld	r22, Z+
    24b6:	1f 01       	movw	r2, r30
    24b8:	28 e3       	ldi	r18, 0x38	; 56
    24ba:	41 2f       	mov	r20, r17
    24bc:	8a ea       	ldi	r24, 0xAA	; 170
    24be:	92 e0       	ldi	r25, 0x02	; 2
    24c0:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    24c4:	1a 5f       	subi	r17, 0xFA	; 250
				rtc.Monat+=Tastatur.ZahlenausTastatur();
				if(rtc.Monat>=13){
					rtc.Monat=0;
					pos=5;
					buffersize=sprintf(buffer,"Monat falsch");
					for(uint8_t i = 0; i<buffersize;i++){
    24c6:	18 34       	cpi	r17, 0x48	; 72
    24c8:	a1 f7       	brne	.-24     	; 0x24b2 <_Z13uhreinstellenv+0x4be>
				break;
			case 7:
				rtc.Monat+=Tastatur.ZahlenausTastatur();
				if(rtc.Monat>=13){
					rtc.Monat=0;
					pos=5;
    24ca:	0f 2e       	mov	r0, r31
    24cc:	f5 e0       	ldi	r31, 0x05	; 5
    24ce:	9f 2e       	mov	r9, r31
    24d0:	f0 2d       	mov	r31, r0
					buffersize=sprintf(buffer,"Monat falsch");
					for(uint8_t i = 0; i<buffersize;i++){
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				if(rtc.Monat==4||rtc.Monat==6||rtc.Monat==9||rtc.Monat==11){
    24d2:	f6 01       	movw	r30, r12
    24d4:	90 81       	ld	r25, Z
    24d6:	89 2f       	mov	r24, r25
    24d8:	8d 7f       	andi	r24, 0xFD	; 253
    24da:	84 30       	cpi	r24, 0x04	; 4
    24dc:	11 f0       	breq	.+4      	; 0x24e2 <_Z13uhreinstellenv+0x4ee>
    24de:	89 30       	cpi	r24, 0x09	; 9
    24e0:	09 f5       	brne	.+66     	; 0x2524 <_Z13uhreinstellenv+0x530>
					if(rtc.Tag>=31){
    24e2:	f2 01       	movw	r30, r4
    24e4:	80 81       	ld	r24, Z
    24e6:	8f 31       	cpi	r24, 0x1F	; 31
    24e8:	08 f4       	brcc	.+2      	; 0x24ec <_Z13uhreinstellenv+0x4f8>
    24ea:	e6 c0       	rjmp	.+460    	; 0x26b8 <_Z13uhreinstellenv+0x6c4>
						rtc.Tag=0;
    24ec:	10 82       	st	Z, r1
						rtc.Monat=0;
    24ee:	f6 01       	movw	r30, r12
    24f0:	10 82       	st	Z, r1
						pos=3;
						buffersize=sprintf(buffer,"Tag falsch");
    24f2:	8b e0       	ldi	r24, 0x0B	; 11
    24f4:	ea e7       	ldi	r30, 0x7A	; 122
    24f6:	f2 e0       	ldi	r31, 0x02	; 2
    24f8:	a7 2d       	mov	r26, r7
    24fa:	b8 2d       	mov	r27, r8
    24fc:	01 90       	ld	r0, Z+
    24fe:	0d 92       	st	X+, r0
    2500:	8a 95       	dec	r24
    2502:	e1 f7       	brne	.-8      	; 0x24fc <_Z13uhreinstellenv+0x508>
    2504:	2d 88       	ldd	r2, Y+21	; 0x15
    2506:	3e 88       	ldd	r3, Y+22	; 0x16
    2508:	1b 2d       	mov	r17, r11
						for(uint8_t i = 0; i<buffersize;i++){
							oled.draw_ASCI(buffer[i],charsize*i,7*8);
    250a:	f1 01       	movw	r30, r2
    250c:	61 91       	ld	r22, Z+
    250e:	1f 01       	movw	r2, r30
    2510:	28 e3       	ldi	r18, 0x38	; 56
    2512:	41 2f       	mov	r20, r17
    2514:	8a ea       	ldi	r24, 0xAA	; 170
    2516:	92 e0       	ldi	r25, 0x02	; 2
    2518:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    251c:	1a 5f       	subi	r17, 0xFA	; 250
					if(rtc.Tag>=31){
						rtc.Tag=0;
						rtc.Monat=0;
						pos=3;
						buffersize=sprintf(buffer,"Tag falsch");
						for(uint8_t i = 0; i<buffersize;i++){
    251e:	1c 33       	cpi	r17, 0x3C	; 60
    2520:	a1 f7       	brne	.-24     	; 0x250a <_Z13uhreinstellenv+0x516>
    2522:	fb c0       	rjmp	.+502    	; 0x271a <_Z13uhreinstellenv+0x726>
							oled.draw_ASCI(buffer[i],charsize*i,7*8);
						}
					}
				}
				else if(rtc.Monat==2){
    2524:	92 30       	cpi	r25, 0x02	; 2
    2526:	09 f0       	breq	.+2      	; 0x252a <_Z13uhreinstellenv+0x536>
    2528:	c7 c0       	rjmp	.+398    	; 0x26b8 <_Z13uhreinstellenv+0x6c4>
					if(rtc.Tag>=30){
    252a:	f2 01       	movw	r30, r4
    252c:	80 81       	ld	r24, Z
    252e:	8e 31       	cpi	r24, 0x1E	; 30
    2530:	08 f4       	brcc	.+2      	; 0x2534 <_Z13uhreinstellenv+0x540>
    2532:	c2 c0       	rjmp	.+388    	; 0x26b8 <_Z13uhreinstellenv+0x6c4>
						rtc.Tag=0;
    2534:	10 82       	st	Z, r1
						rtc.Monat=0;
    2536:	f6 01       	movw	r30, r12
    2538:	10 82       	st	Z, r1
						pos=3;
						buffersize=sprintf(buffer,"Tag falsch");
    253a:	8b e0       	ldi	r24, 0x0B	; 11
    253c:	ea e7       	ldi	r30, 0x7A	; 122
    253e:	f2 e0       	ldi	r31, 0x02	; 2
    2540:	a7 2d       	mov	r26, r7
    2542:	b8 2d       	mov	r27, r8
    2544:	01 90       	ld	r0, Z+
    2546:	0d 92       	st	X+, r0
    2548:	8a 95       	dec	r24
    254a:	e1 f7       	brne	.-8      	; 0x2544 <_Z13uhreinstellenv+0x550>
    254c:	2d 88       	ldd	r2, Y+21	; 0x15
    254e:	3e 88       	ldd	r3, Y+22	; 0x16
    2550:	1b 2d       	mov	r17, r11
						for(uint8_t i = 0; i<buffersize;i++){
							oled.draw_ASCI(buffer[i],charsize*i,7*8);
    2552:	f1 01       	movw	r30, r2
    2554:	61 91       	ld	r22, Z+
    2556:	1f 01       	movw	r2, r30
    2558:	28 e3       	ldi	r18, 0x38	; 56
    255a:	41 2f       	mov	r20, r17
    255c:	8a ea       	ldi	r24, 0xAA	; 170
    255e:	92 e0       	ldi	r25, 0x02	; 2
    2560:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    2564:	1a 5f       	subi	r17, 0xFA	; 250
					if(rtc.Tag>=30){
						rtc.Tag=0;
						rtc.Monat=0;
						pos=3;
						buffersize=sprintf(buffer,"Tag falsch");
						for(uint8_t i = 0; i<buffersize;i++){
    2566:	1c 33       	cpi	r17, 0x3C	; 60
    2568:	a1 f7       	brne	.-24     	; 0x2552 <_Z13uhreinstellenv+0x55e>
    256a:	dc c0       	rjmp	.+440    	; 0x2724 <_Z13uhreinstellenv+0x730>
						}
					}
				}
				break;
			case 8:
				rtc.Jahr=Tastatur.ZahlenausTastatur()*10;
    256c:	89 ea       	ldi	r24, 0xA9	; 169
    256e:	92 e0       	ldi	r25, 0x02	; 2
    2570:	0e 94 36 19 	call	0x326c	; 0x326c <_ZN9Interface17ZahlenausTastaturEv>
    2574:	88 0f       	add	r24, r24
    2576:	98 2f       	mov	r25, r24
    2578:	99 0f       	add	r25, r25
    257a:	99 0f       	add	r25, r25
    257c:	89 0f       	add	r24, r25
				if(rtc.Jahr>=50){
    257e:	82 33       	cpi	r24, 0x32	; 50
    2580:	20 f4       	brcc	.+8      	; 0x258a <_Z13uhreinstellenv+0x596>
						}
					}
				}
				break;
			case 8:
				rtc.Jahr=Tastatur.ZahlenausTastatur()*10;
    2582:	e9 ed       	ldi	r30, 0xD9	; 217
    2584:	f6 e0       	ldi	r31, 0x06	; 6
    2586:	80 83       	st	Z, r24
    2588:	e0 c0       	rjmp	.+448    	; 0x274a <_Z13uhreinstellenv+0x756>
				if(rtc.Jahr>=50){
					rtc.Jahr=0;
    258a:	e9 ed       	ldi	r30, 0xD9	; 217
    258c:	f6 e0       	ldi	r31, 0x06	; 6
    258e:	10 82       	st	Z, r1
					pos=7;
					buffersize=sprintf(buffer,"Jahr falsch");
    2590:	8c e0       	ldi	r24, 0x0C	; 12
    2592:	e2 e9       	ldi	r30, 0x92	; 146
    2594:	f2 e0       	ldi	r31, 0x02	; 2
    2596:	a7 2d       	mov	r26, r7
    2598:	b8 2d       	mov	r27, r8
    259a:	01 90       	ld	r0, Z+
    259c:	0d 92       	st	X+, r0
    259e:	8a 95       	dec	r24
    25a0:	e1 f7       	brne	.-8      	; 0x259a <_Z13uhreinstellenv+0x5a6>
    25a2:	2d 88       	ldd	r2, Y+21	; 0x15
    25a4:	3e 88       	ldd	r3, Y+22	; 0x16
    25a6:	1b 2d       	mov	r17, r11
					for(uint8_t i = 0; i<buffersize;i++){
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
    25a8:	f1 01       	movw	r30, r2
    25aa:	61 91       	ld	r22, Z+
    25ac:	1f 01       	movw	r2, r30
    25ae:	28 e3       	ldi	r18, 0x38	; 56
    25b0:	41 2f       	mov	r20, r17
    25b2:	8a ea       	ldi	r24, 0xAA	; 170
    25b4:	92 e0       	ldi	r25, 0x02	; 2
    25b6:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    25ba:	1a 5f       	subi	r17, 0xFA	; 250
				rtc.Jahr=Tastatur.ZahlenausTastatur()*10;
				if(rtc.Jahr>=50){
					rtc.Jahr=0;
					pos=7;
					buffersize=sprintf(buffer,"Jahr falsch");
					for(uint8_t i = 0; i<buffersize;i++){
    25bc:	12 34       	cpi	r17, 0x42	; 66
    25be:	a1 f7       	brne	.-24     	; 0x25a8 <_Z13uhreinstellenv+0x5b4>
    25c0:	b6 c0       	rjmp	.+364    	; 0x272e <_Z13uhreinstellenv+0x73a>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 9:
				rtc.Jahr+=Tastatur.ZahlenausTastatur();
    25c2:	89 ea       	ldi	r24, 0xA9	; 169
    25c4:	92 e0       	ldi	r25, 0x02	; 2
    25c6:	0e 94 36 19 	call	0x326c	; 0x326c <_ZN9Interface17ZahlenausTastaturEv>
    25ca:	e9 ed       	ldi	r30, 0xD9	; 217
    25cc:	f6 e0       	ldi	r31, 0x06	; 6
    25ce:	20 81       	ld	r18, Z
    25d0:	90 e0       	ldi	r25, 0x00	; 0
    25d2:	82 0f       	add	r24, r18
    25d4:	91 1d       	adc	r25, r1
				if(rtc.Jahr>=50){
    25d6:	82 33       	cpi	r24, 0x32	; 50
    25d8:	10 f4       	brcc	.+4      	; 0x25de <_Z13uhreinstellenv+0x5ea>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 9:
				rtc.Jahr+=Tastatur.ZahlenausTastatur();
    25da:	80 83       	st	Z, r24
    25dc:	1f c0       	rjmp	.+62     	; 0x261c <_Z13uhreinstellenv+0x628>
				if(rtc.Jahr>=50){
					rtc.Jahr=0;
    25de:	e9 ed       	ldi	r30, 0xD9	; 217
    25e0:	f6 e0       	ldi	r31, 0x06	; 6
    25e2:	10 82       	st	Z, r1
					pos=7;
					buffersize=sprintf(buffer,"Jahr falsch");
    25e4:	8c e0       	ldi	r24, 0x0C	; 12
    25e6:	e2 e9       	ldi	r30, 0x92	; 146
    25e8:	f2 e0       	ldi	r31, 0x02	; 2
    25ea:	a7 2d       	mov	r26, r7
    25ec:	b8 2d       	mov	r27, r8
    25ee:	01 90       	ld	r0, Z+
    25f0:	0d 92       	st	X+, r0
    25f2:	8a 95       	dec	r24
    25f4:	e1 f7       	brne	.-8      	; 0x25ee <_Z13uhreinstellenv+0x5fa>
    25f6:	2d 88       	ldd	r2, Y+21	; 0x15
    25f8:	3e 88       	ldd	r3, Y+22	; 0x16
    25fa:	1b 2d       	mov	r17, r11
					for(uint8_t i = 0; i<buffersize;i++){
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
    25fc:	f1 01       	movw	r30, r2
    25fe:	61 91       	ld	r22, Z+
    2600:	1f 01       	movw	r2, r30
    2602:	28 e3       	ldi	r18, 0x38	; 56
    2604:	41 2f       	mov	r20, r17
    2606:	8a ea       	ldi	r24, 0xAA	; 170
    2608:	92 e0       	ldi	r25, 0x02	; 2
    260a:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    260e:	1a 5f       	subi	r17, 0xFA	; 250
				rtc.Jahr+=Tastatur.ZahlenausTastatur();
				if(rtc.Jahr>=50){
					rtc.Jahr=0;
					pos=7;
					buffersize=sprintf(buffer,"Jahr falsch");
					for(uint8_t i = 0; i<buffersize;i++){
    2610:	12 34       	cpi	r17, 0x42	; 66
    2612:	a1 f7       	brne	.-24     	; 0x25fc <_Z13uhreinstellenv+0x608>
				break;
			case 9:
				rtc.Jahr+=Tastatur.ZahlenausTastatur();
				if(rtc.Jahr>=50){
					rtc.Jahr=0;
					pos=7;
    2614:	0f 2e       	mov	r0, r31
    2616:	f7 e0       	ldi	r31, 0x07	; 7
    2618:	9f 2e       	mov	r9, r31
    261a:	f0 2d       	mov	r31, r0
					buffersize=sprintf(buffer,"Jahr falsch");
					for(uint8_t i = 0; i<buffersize;i++){
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				if(rtc.Monat==2){
    261c:	f6 01       	movw	r30, r12
    261e:	80 81       	ld	r24, Z
    2620:	82 30       	cpi	r24, 0x02	; 2
    2622:	09 f0       	breq	.+2      	; 0x2626 <_Z13uhreinstellenv+0x632>
    2624:	49 c0       	rjmp	.+146    	; 0x26b8 <_Z13uhreinstellenv+0x6c4>
					if(rtc.Jahr%4==0){
    2626:	e9 ed       	ldi	r30, 0xD9	; 217
    2628:	f6 e0       	ldi	r31, 0x06	; 6
    262a:	80 81       	ld	r24, Z
    262c:	83 70       	andi	r24, 0x03	; 3
    262e:	01 f5       	brne	.+64     	; 0x2670 <_Z13uhreinstellenv+0x67c>
						rtc.Tag=0;
    2630:	f2 01       	movw	r30, r4
    2632:	10 82       	st	Z, r1
						rtc.Monat=0;
    2634:	f6 01       	movw	r30, r12
    2636:	10 82       	st	Z, r1
						rtc.Jahr=0;
    2638:	e9 ed       	ldi	r30, 0xD9	; 217
    263a:	f6 e0       	ldi	r31, 0x06	; 6
    263c:	10 82       	st	Z, r1
						pos=3;
						buffersize=sprintf(buffer,"Tag falsch");
    263e:	8b e0       	ldi	r24, 0x0B	; 11
    2640:	ea e7       	ldi	r30, 0x7A	; 122
    2642:	f2 e0       	ldi	r31, 0x02	; 2
    2644:	a7 2d       	mov	r26, r7
    2646:	b8 2d       	mov	r27, r8
    2648:	01 90       	ld	r0, Z+
    264a:	0d 92       	st	X+, r0
    264c:	8a 95       	dec	r24
    264e:	e1 f7       	brne	.-8      	; 0x2648 <_Z13uhreinstellenv+0x654>
    2650:	2d 88       	ldd	r2, Y+21	; 0x15
    2652:	3e 88       	ldd	r3, Y+22	; 0x16
    2654:	1b 2d       	mov	r17, r11
						for(uint8_t i = 0; i<buffersize;i++){
							oled.draw_ASCI(buffer[i],charsize*i,7*8);
    2656:	f1 01       	movw	r30, r2
    2658:	61 91       	ld	r22, Z+
    265a:	1f 01       	movw	r2, r30
    265c:	28 e3       	ldi	r18, 0x38	; 56
    265e:	41 2f       	mov	r20, r17
    2660:	8a ea       	ldi	r24, 0xAA	; 170
    2662:	92 e0       	ldi	r25, 0x02	; 2
    2664:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    2668:	1a 5f       	subi	r17, 0xFA	; 250
						rtc.Tag=0;
						rtc.Monat=0;
						rtc.Jahr=0;
						pos=3;
						buffersize=sprintf(buffer,"Tag falsch");
						for(uint8_t i = 0; i<buffersize;i++){
    266a:	1c 33       	cpi	r17, 0x3C	; 60
    266c:	a1 f7       	brne	.-24     	; 0x2656 <_Z13uhreinstellenv+0x662>
    266e:	64 c0       	rjmp	.+200    	; 0x2738 <_Z13uhreinstellenv+0x744>
							oled.draw_ASCI(buffer[i],charsize*i,7*8);
						}
					}
					else{
						if(rtc.Tag>=29){
    2670:	f2 01       	movw	r30, r4
    2672:	80 81       	ld	r24, Z
    2674:	8d 31       	cpi	r24, 0x1D	; 29
    2676:	00 f1       	brcs	.+64     	; 0x26b8 <_Z13uhreinstellenv+0x6c4>
							rtc.Tag=0;
    2678:	10 82       	st	Z, r1
							rtc.Monat=0;
    267a:	f6 01       	movw	r30, r12
    267c:	10 82       	st	Z, r1
							rtc.Jahr=0;
    267e:	e9 ed       	ldi	r30, 0xD9	; 217
    2680:	f6 e0       	ldi	r31, 0x06	; 6
    2682:	10 82       	st	Z, r1
							pos=3;
							buffersize=sprintf(buffer,"Tag falsch");
    2684:	8b e0       	ldi	r24, 0x0B	; 11
    2686:	ea e7       	ldi	r30, 0x7A	; 122
    2688:	f2 e0       	ldi	r31, 0x02	; 2
    268a:	a7 2d       	mov	r26, r7
    268c:	b8 2d       	mov	r27, r8
    268e:	01 90       	ld	r0, Z+
    2690:	0d 92       	st	X+, r0
    2692:	8a 95       	dec	r24
    2694:	e1 f7       	brne	.-8      	; 0x268e <_Z13uhreinstellenv+0x69a>
    2696:	2d 88       	ldd	r2, Y+21	; 0x15
    2698:	3e 88       	ldd	r3, Y+22	; 0x16
    269a:	1b 2d       	mov	r17, r11
							for(uint8_t i = 0; i<buffersize;i++){
								oled.draw_ASCI(buffer[i],charsize*i,7*8);
    269c:	f1 01       	movw	r30, r2
    269e:	61 91       	ld	r22, Z+
    26a0:	1f 01       	movw	r2, r30
    26a2:	28 e3       	ldi	r18, 0x38	; 56
    26a4:	41 2f       	mov	r20, r17
    26a6:	8a ea       	ldi	r24, 0xAA	; 170
    26a8:	92 e0       	ldi	r25, 0x02	; 2
    26aa:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    26ae:	1a 5f       	subi	r17, 0xFA	; 250
							rtc.Tag=0;
							rtc.Monat=0;
							rtc.Jahr=0;
							pos=3;
							buffersize=sprintf(buffer,"Tag falsch");
							for(uint8_t i = 0; i<buffersize;i++){
    26b0:	1c 33       	cpi	r17, 0x3C	; 60
    26b2:	a1 f7       	brne	.-24     	; 0x269c <_Z13uhreinstellenv+0x6a8>
    26b4:	46 c0       	rjmp	.+140    	; 0x2742 <_Z13uhreinstellenv+0x74e>
						}
					}
				}
				break;
			default:
				pos++;
    26b6:	93 94       	inc	r9
				break;
		}
		pos++;
    26b8:	93 94       	inc	r9
	
	oled.clearFrame();
	char buffer[20];
	uint8_t buffersize;
	uint8_t pos=0;
	while(pos<11){
    26ba:	fa e0       	ldi	r31, 0x0A	; 10
    26bc:	f9 15       	cp	r31, r9
    26be:	08 f0       	brcs	.+2      	; 0x26c2 <_Z13uhreinstellenv+0x6ce>
    26c0:	d8 cc       	rjmp	.-1616   	; 0x2072 <_Z13uhreinstellenv+0x7e>
				break;
		}
		pos++;
	}
	
	rtc.Sekunden		= 0;
    26c2:	10 92 d5 06 	sts	0x06D5, r1
	rtc.HundSekunden	= 0;
    26c6:	10 92 d6 06 	sts	0x06D6, r1
	oled.clearFrame();
    26ca:	8a ea       	ldi	r24, 0xAA	; 170
    26cc:	92 e0       	ldi	r25, 0x02	; 2
    26ce:	0e 94 b9 02 	call	0x572	; 0x572 <_ZN7Display10clearFrameEv>
	rtc.RTCstart();
    26d2:	8b ec       	ldi	r24, 0xCB	; 203
    26d4:	96 e0       	ldi	r25, 0x06	; 6
    26d6:	0e 94 57 1b 	call	0x36ae	; 0x36ae <_ZN3RTC8RTCstartEv>
    26da:	39 c0       	rjmp	.+114    	; 0x274e <_Z13uhreinstellenv+0x75a>

		oled.sendFrame();
		oled.clearFrame();
		switch (pos) {
			case 0:
				rtc.Stunden=Tastatur.ZahlenausTastatur()*10;
    26dc:	e3 ed       	ldi	r30, 0xD3	; 211
    26de:	f6 e0       	ldi	r31, 0x06	; 6
    26e0:	80 83       	st	Z, r24
    26e2:	33 c0       	rjmp	.+102    	; 0x274a <_Z13uhreinstellenv+0x756>
				if(rtc.Stunden>=24){
					rtc.Stunden=0;
					pos=-1;
    26e4:	99 24       	eor	r9, r9
    26e6:	9a 94       	dec	r9
    26e8:	30 c0       	rjmp	.+96     	; 0x274a <_Z13uhreinstellenv+0x756>
				break;
			case 1:
				rtc.Stunden+=Tastatur.ZahlenausTastatur();
				if(rtc.Stunden>=24){
					rtc.Stunden=0;
					pos=-1;
    26ea:	99 24       	eor	r9, r9
    26ec:	9a 94       	dec	r9
    26ee:	2d c0       	rjmp	.+90     	; 0x274a <_Z13uhreinstellenv+0x756>
				break;
			case 2:
				rtc.Minuten=Tastatur.ZahlenausTastatur()*10;
				if(rtc.Minuten>=60){
					rtc.Minuten=0;
					pos=1;
    26f0:	99 24       	eor	r9, r9
    26f2:	93 94       	inc	r9
    26f4:	2a c0       	rjmp	.+84     	; 0x274a <_Z13uhreinstellenv+0x756>
				break;
			case 3:
				rtc.Minuten+=Tastatur.ZahlenausTastatur();
				if(rtc.Minuten>=60){
					rtc.Minuten=0;
					pos=1;
    26f6:	99 24       	eor	r9, r9
    26f8:	93 94       	inc	r9
    26fa:	27 c0       	rjmp	.+78     	; 0x274a <_Z13uhreinstellenv+0x756>
				break;
			case 4:
				rtc.Tag=Tastatur.ZahlenausTastatur()*10;
				if(rtc.Tag>=32){
					rtc.Tag=0;
					pos=3;
    26fc:	0f 2e       	mov	r0, r31
    26fe:	f3 e0       	ldi	r31, 0x03	; 3
    2700:	9f 2e       	mov	r9, r31
    2702:	f0 2d       	mov	r31, r0
    2704:	22 c0       	rjmp	.+68     	; 0x274a <_Z13uhreinstellenv+0x756>
				break;
			case 5:
				rtc.Tag+=Tastatur.ZahlenausTastatur();
				if(rtc.Tag>=32){
					rtc.Tag=0;
					pos=3;
    2706:	0f 2e       	mov	r0, r31
    2708:	f3 e0       	ldi	r31, 0x03	; 3
    270a:	9f 2e       	mov	r9, r31
    270c:	f0 2d       	mov	r31, r0
    270e:	1d c0       	rjmp	.+58     	; 0x274a <_Z13uhreinstellenv+0x756>
				break;
			case 6:
				rtc.Monat=Tastatur.ZahlenausTastatur()*10;
				if(rtc.Monat>=13){
					rtc.Monat=0;
					pos=5;
    2710:	0f 2e       	mov	r0, r31
    2712:	f5 e0       	ldi	r31, 0x05	; 5
    2714:	9f 2e       	mov	r9, r31
    2716:	f0 2d       	mov	r31, r0
    2718:	18 c0       	rjmp	.+48     	; 0x274a <_Z13uhreinstellenv+0x756>
				}
				if(rtc.Monat==4||rtc.Monat==6||rtc.Monat==9||rtc.Monat==11){
					if(rtc.Tag>=31){
						rtc.Tag=0;
						rtc.Monat=0;
						pos=3;
    271a:	0f 2e       	mov	r0, r31
    271c:	f3 e0       	ldi	r31, 0x03	; 3
    271e:	9f 2e       	mov	r9, r31
    2720:	f0 2d       	mov	r31, r0
    2722:	13 c0       	rjmp	.+38     	; 0x274a <_Z13uhreinstellenv+0x756>
				}
				else if(rtc.Monat==2){
					if(rtc.Tag>=30){
						rtc.Tag=0;
						rtc.Monat=0;
						pos=3;
    2724:	0f 2e       	mov	r0, r31
    2726:	f3 e0       	ldi	r31, 0x03	; 3
    2728:	9f 2e       	mov	r9, r31
    272a:	f0 2d       	mov	r31, r0
    272c:	0e c0       	rjmp	.+28     	; 0x274a <_Z13uhreinstellenv+0x756>
				break;
			case 8:
				rtc.Jahr=Tastatur.ZahlenausTastatur()*10;
				if(rtc.Jahr>=50){
					rtc.Jahr=0;
					pos=7;
    272e:	0f 2e       	mov	r0, r31
    2730:	f7 e0       	ldi	r31, 0x07	; 7
    2732:	9f 2e       	mov	r9, r31
    2734:	f0 2d       	mov	r31, r0
    2736:	09 c0       	rjmp	.+18     	; 0x274a <_Z13uhreinstellenv+0x756>
				if(rtc.Monat==2){
					if(rtc.Jahr%4==0){
						rtc.Tag=0;
						rtc.Monat=0;
						rtc.Jahr=0;
						pos=3;
    2738:	0f 2e       	mov	r0, r31
    273a:	f3 e0       	ldi	r31, 0x03	; 3
    273c:	9f 2e       	mov	r9, r31
    273e:	f0 2d       	mov	r31, r0
    2740:	04 c0       	rjmp	.+8      	; 0x274a <_Z13uhreinstellenv+0x756>
					else{
						if(rtc.Tag>=29){
							rtc.Tag=0;
							rtc.Monat=0;
							rtc.Jahr=0;
							pos=3;
    2742:	0f 2e       	mov	r0, r31
    2744:	f3 e0       	ldi	r31, 0x03	; 3
    2746:	9f 2e       	mov	r9, r31
    2748:	f0 2d       	mov	r31, r0
				break;
			default:
				pos++;
				break;
		}
		pos++;
    274a:	93 94       	inc	r9
    274c:	92 cc       	rjmp	.-1756   	; 0x2072 <_Z13uhreinstellenv+0x7e>
	
	rtc.Sekunden		= 0;
	rtc.HundSekunden	= 0;
	oled.clearFrame();
	rtc.RTCstart();
}
    274e:	66 96       	adiw	r28, 0x16	; 22
    2750:	0f b6       	in	r0, 0x3f	; 63
    2752:	f8 94       	cli
    2754:	de bf       	out	0x3e, r29	; 62
    2756:	0f be       	out	0x3f, r0	; 63
    2758:	cd bf       	out	0x3d, r28	; 61
    275a:	df 91       	pop	r29
    275c:	cf 91       	pop	r28
    275e:	1f 91       	pop	r17
    2760:	0f 91       	pop	r16
    2762:	ff 90       	pop	r15
    2764:	ef 90       	pop	r14
    2766:	df 90       	pop	r13
    2768:	cf 90       	pop	r12
    276a:	bf 90       	pop	r11
    276c:	af 90       	pop	r10
    276e:	9f 90       	pop	r9
    2770:	8f 90       	pop	r8
    2772:	7f 90       	pop	r7
    2774:	6f 90       	pop	r6
    2776:	5f 90       	pop	r5
    2778:	4f 90       	pop	r4
    277a:	3f 90       	pop	r3
    277c:	2f 90       	pop	r2
    277e:	08 95       	ret

00002780 <__vector_9>:
uint16_t anzeige;	//Flagregister fuer die Anziegenschaltung
uint8_t pos;		//Handler fuer die Einganbe von Zahlen
//Ausgelagerte Sammlung der einzelnen Seitenlayouts
#include "Seiten.h"

ISR(TIMER2_OVF_vect){	//Vektor fuer die RTC
    2780:	1f 92       	push	r1
    2782:	0f 92       	push	r0
    2784:	0f b6       	in	r0, 0x3f	; 63
    2786:	0f 92       	push	r0
    2788:	11 24       	eor	r1, r1
    278a:	8f 93       	push	r24
    278c:	ef 93       	push	r30
    278e:	ff 93       	push	r31
	TCNT2=TIMER2RTCTIME;
    2790:	10 92 b2 00 	sts	0x00B2, r1
	rtc.Sekunden++;
    2794:	e5 ed       	ldi	r30, 0xD5	; 213
    2796:	f6 e0       	ldi	r31, 0x06	; 6
    2798:	80 81       	ld	r24, Z
    279a:	8f 5f       	subi	r24, 0xFF	; 255
    279c:	80 83       	st	Z, r24
	rtc.interupts|= (1<<sekundeninterupt);
    279e:	ea ed       	ldi	r30, 0xDA	; 218
    27a0:	f6 e0       	ldi	r31, 0x06	; 6
    27a2:	80 81       	ld	r24, Z
    27a4:	82 60       	ori	r24, 0x02	; 2
    27a6:	80 83       	st	Z, r24
}
    27a8:	ff 91       	pop	r31
    27aa:	ef 91       	pop	r30
    27ac:	8f 91       	pop	r24
    27ae:	0f 90       	pop	r0
    27b0:	0f be       	out	0x3f, r0	; 63
    27b2:	0f 90       	pop	r0
    27b4:	1f 90       	pop	r1
    27b6:	18 95       	reti

000027b8 <_Z15geschwindigkeitf>:

#define zeitproachtzaehlungen 0.001024
#define zaehlungenprozeiteinheit 8.0

double geschw;
void geschwindigkeit(float radius){
    27b8:	cf 92       	push	r12
    27ba:	df 92       	push	r13
    27bc:	ef 92       	push	r14
    27be:	ff 92       	push	r15
    27c0:	0f 93       	push	r16
    27c2:	1f 93       	push	r17
    27c4:	cf 93       	push	r28
    27c6:	df 93       	push	r29
	//uint16_t zaehlungen = (TCNT1H<<8) | (TCNT1L);
	uint16_t zaehlungen = TCNT1;
    27c8:	c4 e8       	ldi	r28, 0x84	; 132
    27ca:	d0 e0       	ldi	r29, 0x00	; 0
    27cc:	08 81       	ld	r16, Y
    27ce:	19 81       	ldd	r17, Y+1	; 0x01
	geschw = (radius/100.0)*2*M_PI/((zaehlungen/zaehlungenprozeiteinheit)*zeitproachtzaehlungen);
    27d0:	20 e0       	ldi	r18, 0x00	; 0
    27d2:	30 e0       	ldi	r19, 0x00	; 0
    27d4:	48 ec       	ldi	r20, 0xC8	; 200
    27d6:	52 e4       	ldi	r21, 0x42	; 66
    27d8:	0e 94 61 1c 	call	0x38c2	; 0x38c2 <__divsf3>
    27dc:	9b 01       	movw	r18, r22
    27de:	ac 01       	movw	r20, r24
    27e0:	0e 94 94 1b 	call	0x3728	; 0x3728 <__addsf3>
    27e4:	2b ed       	ldi	r18, 0xDB	; 219
    27e6:	3f e0       	ldi	r19, 0x0F	; 15
    27e8:	49 e4       	ldi	r20, 0x49	; 73
    27ea:	50 e4       	ldi	r21, 0x40	; 64
    27ec:	0e 94 15 1e 	call	0x3c2a	; 0x3c2a <__mulsf3>
    27f0:	6b 01       	movw	r12, r22
    27f2:	7c 01       	movw	r14, r24
    27f4:	b8 01       	movw	r22, r16
    27f6:	80 e0       	ldi	r24, 0x00	; 0
    27f8:	90 e0       	ldi	r25, 0x00	; 0
    27fa:	0e 94 fa 1c 	call	0x39f4	; 0x39f4 <__floatunsisf>
    27fe:	20 e0       	ldi	r18, 0x00	; 0
    2800:	30 e0       	ldi	r19, 0x00	; 0
    2802:	40 e0       	ldi	r20, 0x00	; 0
    2804:	5e e3       	ldi	r21, 0x3E	; 62
    2806:	0e 94 15 1e 	call	0x3c2a	; 0x3c2a <__mulsf3>
    280a:	2d eb       	ldi	r18, 0xBD	; 189
    280c:	37 e3       	ldi	r19, 0x37	; 55
    280e:	46 e8       	ldi	r20, 0x86	; 134
    2810:	5a e3       	ldi	r21, 0x3A	; 58
    2812:	0e 94 15 1e 	call	0x3c2a	; 0x3c2a <__mulsf3>
    2816:	9b 01       	movw	r18, r22
    2818:	ac 01       	movw	r20, r24
    281a:	c7 01       	movw	r24, r14
    281c:	b6 01       	movw	r22, r12
    281e:	0e 94 61 1c 	call	0x38c2	; 0x38c2 <__divsf3>
    2822:	60 93 9e 02 	sts	0x029E, r22
    2826:	70 93 9f 02 	sts	0x029F, r23
    282a:	80 93 a0 02 	sts	0x02A0, r24
    282e:	90 93 a1 02 	sts	0x02A1, r25
	//TCNT1H = 0;
	//TCNT1L = 0;
	TCNT1 = 0;
    2832:	19 82       	std	Y+1, r1	; 0x01
    2834:	18 82       	st	Y, r1
}
    2836:	df 91       	pop	r29
    2838:	cf 91       	pop	r28
    283a:	1f 91       	pop	r17
    283c:	0f 91       	pop	r16
    283e:	ff 90       	pop	r15
    2840:	ef 90       	pop	r14
    2842:	df 90       	pop	r13
    2844:	cf 90       	pop	r12
    2846:	08 95       	ret

00002848 <_Z13reed_debouncePVhh>:

uint8_t reed_debounce(volatile uint8_t *port, uint8_t pin)
{
	if ( !(*port & (1 << pin)) )
    2848:	fc 01       	movw	r30, r24
    284a:	20 81       	ld	r18, Z
    284c:	30 e0       	ldi	r19, 0x00	; 0
    284e:	06 2e       	mov	r0, r22
    2850:	02 c0       	rjmp	.+4      	; 0x2856 <_Z13reed_debouncePVhh+0xe>
    2852:	35 95       	asr	r19
    2854:	27 95       	ror	r18
    2856:	0a 94       	dec	r0
    2858:	e2 f7       	brpl	.-8      	; 0x2852 <_Z13reed_debouncePVhh+0xa>
    285a:	20 fd       	sbrc	r18, 0
    285c:	15 c0       	rjmp	.+42     	; 0x2888 <_Z13reed_debouncePVhh+0x40>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    285e:	f5 e8       	ldi	r31, 0x85	; 133
    2860:	fa 95       	dec	r31
    2862:	f1 f7       	brne	.-4      	; 0x2860 <_Z13reed_debouncePVhh+0x18>
    2864:	00 00       	nop
	{
		/* Pin wurde auf Masse gezogen, ms warten   */
		_delay_us(50);
		//_delay_us(50);
		if ( (*port & (1 << pin)) )
    2866:	fc 01       	movw	r30, r24
    2868:	80 81       	ld	r24, Z
    286a:	90 e0       	ldi	r25, 0x00	; 0
    286c:	9c 01       	movw	r18, r24
    286e:	02 c0       	rjmp	.+4      	; 0x2874 <_Z13reed_debouncePVhh+0x2c>
    2870:	35 95       	asr	r19
    2872:	27 95       	ror	r18
    2874:	6a 95       	dec	r22
    2876:	e2 f7       	brpl	.-8      	; 0x2870 <_Z13reed_debouncePVhh+0x28>
    2878:	20 ff       	sbrs	r18, 0
    287a:	08 c0       	rjmp	.+16     	; 0x288c <_Z13reed_debouncePVhh+0x44>
    287c:	32 e0       	ldi	r19, 0x02	; 2
    287e:	3a 95       	dec	r19
    2880:	f1 f7       	brne	.-4      	; 0x287e <_Z13reed_debouncePVhh+0x36>
    2882:	00 c0       	rjmp	.+0      	; 0x2884 <_Z13reed_debouncePVhh+0x3c>
		{
			/* Anwender Zeit zum Loslassen des Tasters geben */
			_delay_us(1);
			return 1;
    2884:	81 e0       	ldi	r24, 0x01	; 1
    2886:	08 95       	ret
		}
	}
	return 0;
    2888:	80 e0       	ldi	r24, 0x00	; 0
    288a:	08 95       	ret
    288c:	80 e0       	ldi	r24, 0x00	; 0
}
    288e:	08 95       	ret

00002890 <_Z15initialisierungv>:
    }
}

void initialisierung(){
	//nullen der Flagregister
	rtc.interupts=0;
    2890:	10 92 da 06 	sts	0x06DA, r1
	anzeige=0;
    2894:	10 92 a4 02 	sts	0x02A4, r1
    2898:	10 92 a3 02 	sts	0x02A3, r1
	pos=0;
    289c:	10 92 a2 02 	sts	0x02A2, r1
	//initialisieren des Zaehler fuer die Winkelgeschw sowie den Timer
	geschw=0;
    28a0:	10 92 9e 02 	sts	0x029E, r1
    28a4:	10 92 9f 02 	sts	0x029F, r1
    28a8:	10 92 a0 02 	sts	0x02A0, r1
    28ac:	10 92 a1 02 	sts	0x02A1, r1
	TCNT1=0;
    28b0:	10 92 85 00 	sts	0x0085, r1
    28b4:	10 92 84 00 	sts	0x0084, r1
	//Ausgaenge und Eingaenge einstellen
	DDRD = (1<<PIND0) | (1<<PIND1) | (1<<PIND2) | (1<<PIND3);	//Pins zur Ausgabe
    28b8:	8f e0       	ldi	r24, 0x0F	; 15
    28ba:	8a b9       	out	0x0a, r24	; 10
	DDRD &= ~((1<<PIND4) | (1<<PIND5) | (1<<PIND6));			//Restliche Pins als Eingaenge schalten
    28bc:	8a b1       	in	r24, 0x0a	; 10
    28be:	8f 78       	andi	r24, 0x8F	; 143
    28c0:	8a b9       	out	0x0a, r24	; 10
	//Eingang fuer den Reedkontak schalten mit internem Pullup
	DDRC &= ~((1<<PORTC3)|(1<<PORTC2));
    28c2:	87 b1       	in	r24, 0x07	; 7
    28c4:	83 7f       	andi	r24, 0xF3	; 243
    28c6:	87 b9       	out	0x07, r24	; 7
	PORTC |= (1<<PORTC3) | (1<<PORTC2);
    28c8:	88 b1       	in	r24, 0x08	; 8
    28ca:	8c 60       	ori	r24, 0x0C	; 12
    28cc:	88 b9       	out	0x08, r24	; 8
	//I2C Interface
	//twi_init();
	//Display
	oled.InitializeDisplay();
    28ce:	8a ea       	ldi	r24, 0xAA	; 170
    28d0:	92 e0       	ldi	r25, 0x02	; 2
    28d2:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <_ZN7Display17InitializeDisplayEv>
	//initialisierung wird im konstruktor vorgenommen
	oled.clearFrame();
    28d6:	8a ea       	ldi	r24, 0xAA	; 170
    28d8:	92 e0       	ldi	r25, 0x02	; 2
    28da:	0e 94 b9 02 	call	0x572	; 0x572 <_ZN7Display10clearFrameEv>
	//HMC5883L initialisieren
	//kompass.initialize_HMC5883L();
	//initialisierung wird im Konstruktor erledigt
	
	//ADC Initialisieren auf CH0
	ADMUX = (1<<REFS0);
    28de:	80 e4       	ldi	r24, 0x40	; 64
    28e0:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA = (1<<ADPS1) | (1<<ADPS0);
    28e4:	ea e7       	ldi	r30, 0x7A	; 122
    28e6:	f0 e0       	ldi	r31, 0x00	; 0
    28e8:	83 e0       	ldi	r24, 0x03	; 3
    28ea:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADEN);
    28ec:	80 81       	ld	r24, Z
    28ee:	80 68       	ori	r24, 0x80	; 128
    28f0:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);
    28f2:	80 81       	ld	r24, Z
    28f4:	80 64       	ori	r24, 0x40	; 64
    28f6:	80 83       	st	Z, r24
	while (ADCSRA & (1<<ADSC) ) {
    28f8:	80 81       	ld	r24, Z
    28fa:	86 fd       	sbrc	r24, 6
    28fc:	fd cf       	rjmp	.-6      	; 0x28f8 <_Z15initialisierungv+0x68>
	}
	(void) ADCW;
    28fe:	80 91 78 00 	lds	r24, 0x0078
    2902:	90 91 79 00 	lds	r25, 0x0079
	//Wilkommensanzeige
	willkommenpage();
    2906:	0e 94 51 08 	call	0x10a2	; 0x10a2 <_Z14willkommenpagev>
	//Uhreinstellungen
	//uhreinstellen();
	//*************************************************
	//Nur Test, damit es schneller geht beim Start
	rtc.dummyeinst();
    290a:	8b ec       	ldi	r24, 0xCB	; 203
    290c:	96 e0       	ldi	r25, 0x06	; 6
    290e:	0e 94 4b 1b 	call	0x3696	; 0x3696 <_ZN3RTC10dummyeinstEv>
	//*********************************
	rtc.RTCstart();
    2912:	8b ec       	ldi	r24, 0xCB	; 203
    2914:	96 e0       	ldi	r25, 0x06	; 6
    2916:	0e 94 57 1b 	call	0x36ae	; 0x36ae <_ZN3RTC8RTCstartEv>
	//ausgabe starten
	anzeige|=(1<<Uhrflag);
    291a:	80 91 a3 02 	lds	r24, 0x02A3
    291e:	90 91 a4 02 	lds	r25, 0x02A4
    2922:	81 60       	ori	r24, 0x01	; 1
    2924:	90 93 a4 02 	sts	0x02A4, r25
    2928:	80 93 a3 02 	sts	0x02A3, r24
	sei();
    292c:	78 94       	sei
    292e:	08 95       	ret

00002930 <_Z19maininterupthandlerv>:
	//interupt dierekt aus der rtc
	//if((rtc.interupts & (1<<hundinterupt))){
		//rtc.zeit();
		//rtc.interupts&=~(1<<hundinterupt);
	//}
	if ((anzeige&(1<<Fahradflag)))
    2930:	80 91 a3 02 	lds	r24, 0x02A3
    2934:	81 ff       	sbrs	r24, 1
    2936:	0d c0       	rjmp	.+26     	; 0x2952 <_Z19maininterupthandlerv+0x22>
	{
		//debounce Funktion fuer den Reedswitch
		if (reed_debounce(&PINC,PINC3))
    2938:	63 e0       	ldi	r22, 0x03	; 3
    293a:	86 e2       	ldi	r24, 0x26	; 38
    293c:	90 e0       	ldi	r25, 0x00	; 0
    293e:	0e 94 24 14 	call	0x2848	; 0x2848 <_Z13reed_debouncePVhh>
    2942:	88 23       	and	r24, r24
    2944:	31 f0       	breq	.+12     	; 0x2952 <_Z19maininterupthandlerv+0x22>
		{
			geschwindigkeit(14.0*2.54);
    2946:	60 e7       	ldi	r22, 0x70	; 112
    2948:	7d e3       	ldi	r23, 0x3D	; 61
    294a:	8e e0       	ldi	r24, 0x0E	; 14
    294c:	92 e4       	ldi	r25, 0x42	; 66
    294e:	0e 94 dc 13 	call	0x27b8	; 0x27b8 <_Z15geschwindigkeitf>
    2952:	08 95       	ret

00002954 <_Z14anzeigehandlerv>:
	}
}

void anzeigehandler(){
	//Handler fuer 1Hz Flag
	if ((rtc.interupts & (1<<sekundeninterupt)))
    2954:	80 91 da 06 	lds	r24, 0x06DA
    2958:	81 ff       	sbrs	r24, 1
    295a:	dd c0       	rjmp	.+442    	; 0x2b16 <_Z14anzeigehandlerv+0x1c2>
	{
		rtc.zeit();
    295c:	8b ec       	ldi	r24, 0xCB	; 203
    295e:	96 e0       	ldi	r25, 0x06	; 6
    2960:	0e 94 f9 1a 	call	0x35f2	; 0x35f2 <_ZN3RTC4zeitEv>
		//Handler fuer die Anzeige der Seiten
		//Die einzelnen Funktionen beschreiben nur den Framebuffer und nicht dierekt das Display
		if ((anzeige&(1<<menueflag)) && (anzeige&(1<<Uhrflag)))
    2964:	80 91 a3 02 	lds	r24, 0x02A3
    2968:	90 91 a4 02 	lds	r25, 0x02A4
    296c:	9c 01       	movw	r18, r24
    296e:	21 70       	andi	r18, 0x01	; 1
    2970:	30 72       	andi	r19, 0x20	; 32
    2972:	21 30       	cpi	r18, 0x01	; 1
    2974:	30 42       	sbci	r19, 0x20	; 32
    2976:	61 f4       	brne	.+24     	; 0x2990 <_Z14anzeigehandlerv+0x3c>
		{
			menue_uhr();
    2978:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <_Z9menue_uhrv>
			anzeige|=(1<<refreshdisplay);
    297c:	80 91 a3 02 	lds	r24, 0x02A3
    2980:	90 91 a4 02 	lds	r25, 0x02A4
    2984:	90 68       	ori	r25, 0x80	; 128
    2986:	90 93 a4 02 	sts	0x02A4, r25
    298a:	80 93 a3 02 	sts	0x02A3, r24
    298e:	be c0       	rjmp	.+380    	; 0x2b0c <_Z14anzeigehandlerv+0x1b8>
    2990:	9c 01       	movw	r18, r24
    2992:	28 70       	andi	r18, 0x08	; 8
    2994:	30 72       	andi	r19, 0x20	; 32
		}
		else if ((anzeige&(1<<menueflag)) && (anzeige&(1<<Einstellungsflag)))
    2996:	28 30       	cpi	r18, 0x08	; 8
    2998:	30 42       	sbci	r19, 0x20	; 32
    299a:	61 f4       	brne	.+24     	; 0x29b4 <_Z14anzeigehandlerv+0x60>
		{
			menue_einst();
    299c:	0e 94 10 0b 	call	0x1620	; 0x1620 <_Z11menue_einstv>
			anzeige|=(1<<refreshdisplay);
    29a0:	80 91 a3 02 	lds	r24, 0x02A3
    29a4:	90 91 a4 02 	lds	r25, 0x02A4
    29a8:	90 68       	ori	r25, 0x80	; 128
    29aa:	90 93 a4 02 	sts	0x02A4, r25
    29ae:	80 93 a3 02 	sts	0x02A3, r24
    29b2:	ac c0       	rjmp	.+344    	; 0x2b0c <_Z14anzeigehandlerv+0x1b8>
		}
		else if ((anzeige&(1<<menueflag)))
    29b4:	95 ff       	sbrs	r25, 5
    29b6:	0c c0       	rjmp	.+24     	; 0x29d0 <_Z14anzeigehandlerv+0x7c>
		{
			menue_haupt();
    29b8:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <_Z11menue_hauptv>
			anzeige|=(1<<refreshdisplay);
    29bc:	80 91 a3 02 	lds	r24, 0x02A3
    29c0:	90 91 a4 02 	lds	r25, 0x02A4
    29c4:	90 68       	ori	r25, 0x80	; 128
    29c6:	90 93 a4 02 	sts	0x02A4, r25
    29ca:	80 93 a3 02 	sts	0x02A3, r24
    29ce:	9e c0       	rjmp	.+316    	; 0x2b0c <_Z14anzeigehandlerv+0x1b8>
		}
		else if ((anzeige&(1<<Kompasgaineinstellenflag)))
    29d0:	85 ff       	sbrs	r24, 5
    29d2:	0c c0       	rjmp	.+24     	; 0x29ec <_Z14anzeigehandlerv+0x98>
		{
			Gaineinstellen();
    29d4:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <_Z14Gaineinstellenv>
			anzeige|=(1<<refreshdisplay);
    29d8:	80 91 a3 02 	lds	r24, 0x02A3
    29dc:	90 91 a4 02 	lds	r25, 0x02A4
    29e0:	90 68       	ori	r25, 0x80	; 128
    29e2:	90 93 a4 02 	sts	0x02A4, r25
    29e6:	80 93 a3 02 	sts	0x02A3, r24
    29ea:	90 c0       	rjmp	.+288    	; 0x2b0c <_Z14anzeigehandlerv+0x1b8>
		}
		else if ((anzeige&(1<<Uhrflag)))
    29ec:	80 ff       	sbrs	r24, 0
    29ee:	0c c0       	rjmp	.+24     	; 0x2a08 <_Z14anzeigehandlerv+0xb4>
		{
			uhranzeigen();
    29f0:	0e 94 04 0c 	call	0x1808	; 0x1808 <_Z11uhranzeigenv>
			anzeige|=(1<<refreshdisplay);
    29f4:	80 91 a3 02 	lds	r24, 0x02A3
    29f8:	90 91 a4 02 	lds	r25, 0x02A4
    29fc:	90 68       	ori	r25, 0x80	; 128
    29fe:	90 93 a4 02 	sts	0x02A4, r25
    2a02:	80 93 a3 02 	sts	0x02A3, r24
    2a06:	82 c0       	rjmp	.+260    	; 0x2b0c <_Z14anzeigehandlerv+0x1b8>
		}
		else if ((anzeige&(1<<Kompasflag)))
    2a08:	82 ff       	sbrs	r24, 2
    2a0a:	10 c0       	rjmp	.+32     	; 0x2a2c <_Z14anzeigehandlerv+0xd8>
		{
			anzeige_kompass(kompass.angle());
    2a0c:	8b ed       	ldi	r24, 0xDB	; 219
    2a0e:	96 e0       	ldi	r25, 0x06	; 6
    2a10:	0e 94 49 1a 	call	0x3492	; 0x3492 <_ZN7Kompass5angleEv>
    2a14:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <_Z15anzeige_kompassd>
			anzeige|=(1<<refreshdisplay);
    2a18:	80 91 a3 02 	lds	r24, 0x02A3
    2a1c:	90 91 a4 02 	lds	r25, 0x02A4
    2a20:	90 68       	ori	r25, 0x80	; 128
    2a22:	90 93 a4 02 	sts	0x02A4, r25
    2a26:	80 93 a3 02 	sts	0x02A3, r24
    2a2a:	70 c0       	rjmp	.+224    	; 0x2b0c <_Z14anzeigehandlerv+0x1b8>
		}
		else if ((anzeige&(1<<Fahradflag)))
    2a2c:	81 ff       	sbrs	r24, 1
    2a2e:	22 c0       	rjmp	.+68     	; 0x2a74 <_Z14anzeigehandlerv+0x120>
		{
			//fahradschirm(12.3,kompass.angle());
			fahradschirm(geschw,kompass.angle());
    2a30:	8b ed       	ldi	r24, 0xDB	; 219
    2a32:	96 e0       	ldi	r25, 0x06	; 6
    2a34:	0e 94 49 1a 	call	0x3492	; 0x3492 <_ZN7Kompass5angleEv>
    2a38:	9b 01       	movw	r18, r22
    2a3a:	ac 01       	movw	r20, r24
    2a3c:	60 91 9e 02 	lds	r22, 0x029E
    2a40:	70 91 9f 02 	lds	r23, 0x029F
    2a44:	80 91 a0 02 	lds	r24, 0x02A0
    2a48:	90 91 a1 02 	lds	r25, 0x02A1
    2a4c:	0e 94 b5 0c 	call	0x196a	; 0x196a <_Z12fahradschirmdd>
			geschw=0;
    2a50:	10 92 9e 02 	sts	0x029E, r1
    2a54:	10 92 9f 02 	sts	0x029F, r1
    2a58:	10 92 a0 02 	sts	0x02A0, r1
    2a5c:	10 92 a1 02 	sts	0x02A1, r1
			anzeige|=(1<<refreshdisplay);
    2a60:	80 91 a3 02 	lds	r24, 0x02A3
    2a64:	90 91 a4 02 	lds	r25, 0x02A4
    2a68:	90 68       	ori	r25, 0x80	; 128
    2a6a:	90 93 a4 02 	sts	0x02A4, r25
    2a6e:	80 93 a3 02 	sts	0x02A3, r24
    2a72:	4c c0       	rjmp	.+152    	; 0x2b0c <_Z14anzeigehandlerv+0x1b8>
    2a74:	9c 01       	movw	r18, r24
    2a76:	28 74       	andi	r18, 0x48	; 72
    2a78:	33 27       	eor	r19, r19
		}
		else if ((anzeige&(1<<Einstellungsflag)) && (anzeige&(1<<Timerflag)))
    2a7a:	28 34       	cpi	r18, 0x48	; 72
    2a7c:	31 05       	cpc	r19, r1
    2a7e:	61 f4       	brne	.+24     	; 0x2a98 <_Z14anzeigehandlerv+0x144>
		{
			timerseite();
    2a80:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <_Z10timerseitev>
			anzeige|=(1<<refreshdisplay);
    2a84:	80 91 a3 02 	lds	r24, 0x02A3
    2a88:	90 91 a4 02 	lds	r25, 0x02A4
    2a8c:	90 68       	ori	r25, 0x80	; 128
    2a8e:	90 93 a4 02 	sts	0x02A4, r25
    2a92:	80 93 a3 02 	sts	0x02A3, r24
    2a96:	3a c0       	rjmp	.+116    	; 0x2b0c <_Z14anzeigehandlerv+0x1b8>
		}
		else if ((anzeige&(1<<Stoppuhrflag)))
    2a98:	87 ff       	sbrs	r24, 7
    2a9a:	17 c0       	rjmp	.+46     	; 0x2aca <_Z14anzeigehandlerv+0x176>
		{
			if ((anzeige&(1<<Einstellungsflag)))
    2a9c:	83 ff       	sbrs	r24, 3
    2a9e:	09 c0       	rjmp	.+18     	; 0x2ab2 <_Z14anzeigehandlerv+0x15e>
			{
				stoppuhr.Sekunden++;
    2aa0:	e5 eb       	ldi	r30, 0xB5	; 181
    2aa2:	f6 e0       	ldi	r31, 0x06	; 6
    2aa4:	80 81       	ld	r24, Z
    2aa6:	8f 5f       	subi	r24, 0xFF	; 255
    2aa8:	80 83       	st	Z, r24
				stoppuhr.zeit();
    2aaa:	8b ea       	ldi	r24, 0xAB	; 171
    2aac:	96 e0       	ldi	r25, 0x06	; 6
    2aae:	0e 94 f9 1a 	call	0x35f2	; 0x35f2 <_ZN3RTC4zeitEv>
			}
			Stoppuhrseite();
    2ab2:	0e 94 70 0f 	call	0x1ee0	; 0x1ee0 <_Z13Stoppuhrseitev>
			anzeige|=(1<<refreshdisplay);
    2ab6:	80 91 a3 02 	lds	r24, 0x02A3
    2aba:	90 91 a4 02 	lds	r25, 0x02A4
    2abe:	90 68       	ori	r25, 0x80	; 128
    2ac0:	90 93 a4 02 	sts	0x02A4, r25
    2ac4:	80 93 a3 02 	sts	0x02A3, r24
    2ac8:	21 c0       	rjmp	.+66     	; 0x2b0c <_Z14anzeigehandlerv+0x1b8>
		}
		else if ((anzeige&(1<<Timerflag)))
    2aca:	86 ff       	sbrs	r24, 6
    2acc:	1f c0       	rjmp	.+62     	; 0x2b0c <_Z14anzeigehandlerv+0x1b8>
		{
			zaehler.Sekunden--;
    2ace:	e5 ec       	ldi	r30, 0xC5	; 197
    2ad0:	f6 e0       	ldi	r31, 0x06	; 6
    2ad2:	80 81       	ld	r24, Z
    2ad4:	81 50       	subi	r24, 0x01	; 1
    2ad6:	80 83       	st	Z, r24
			if(zaehler.timer()){
    2ad8:	8b eb       	ldi	r24, 0xBB	; 187
    2ada:	96 e0       	ldi	r25, 0x06	; 6
    2adc:	0e 94 76 1b 	call	0x36ec	; 0x36ec <_ZN3RTC5timerEv>
    2ae0:	88 23       	and	r24, r24
    2ae2:	49 f0       	breq	.+18     	; 0x2af6 <_Z14anzeigehandlerv+0x1a2>
				anzeige|=(1<<blinkflag);
    2ae4:	80 91 a3 02 	lds	r24, 0x02A3
    2ae8:	90 91 a4 02 	lds	r25, 0x02A4
    2aec:	90 64       	ori	r25, 0x40	; 64
    2aee:	90 93 a4 02 	sts	0x02A4, r25
    2af2:	80 93 a3 02 	sts	0x02A3, r24
			}
			timerseite();
    2af6:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <_Z10timerseitev>
			anzeige|=(1<<refreshdisplay);
    2afa:	80 91 a3 02 	lds	r24, 0x02A3
    2afe:	90 91 a4 02 	lds	r25, 0x02A4
    2b02:	90 68       	ori	r25, 0x80	; 128
    2b04:	90 93 a4 02 	sts	0x02A4, r25
    2b08:	80 93 a3 02 	sts	0x02A3, r24
		}
		rtc.interupts&=~(1<<sekundeninterupt);
    2b0c:	ea ed       	ldi	r30, 0xDA	; 218
    2b0e:	f6 e0       	ldi	r31, 0x06	; 6
    2b10:	80 81       	ld	r24, Z
    2b12:	8d 7f       	andi	r24, 0xFD	; 253
    2b14:	80 83       	st	Z, r24
	}
	//neuen Framebuffer an das Dispay senden
	if ((anzeige&(1<<refreshdisplay)))
    2b16:	80 91 a3 02 	lds	r24, 0x02A3
    2b1a:	90 91 a4 02 	lds	r25, 0x02A4
    2b1e:	99 23       	and	r25, r25
    2b20:	d4 f4       	brge	.+52     	; 0x2b56 <_Z14anzeigehandlerv+0x202>
	{
		oled.sendFrame();
    2b22:	8a ea       	ldi	r24, 0xAA	; 170
    2b24:	92 e0       	ldi	r25, 0x02	; 2
    2b26:	0e 94 5f 03 	call	0x6be	; 0x6be <_ZN7Display9sendFrameEv>
		if ((anzeige&(1<<blinkflag)))
    2b2a:	80 91 a3 02 	lds	r24, 0x02A3
    2b2e:	90 91 a4 02 	lds	r25, 0x02A4
    2b32:	96 ff       	sbrs	r25, 6
    2b34:	07 c0       	rjmp	.+14     	; 0x2b44 <_Z14anzeigehandlerv+0x1f0>
		{
			oled.invert(rtc.Sekunden%2);
    2b36:	60 91 d5 06 	lds	r22, 0x06D5
    2b3a:	61 70       	andi	r22, 0x01	; 1
    2b3c:	8a ea       	ldi	r24, 0xAA	; 170
    2b3e:	92 e0       	ldi	r25, 0x02	; 2
    2b40:	0e 94 55 03 	call	0x6aa	; 0x6aa <_ZN7Display6invertEh>
		}
		anzeige&=~(1<<refreshdisplay);
    2b44:	80 91 a3 02 	lds	r24, 0x02A3
    2b48:	90 91 a4 02 	lds	r25, 0x02A4
    2b4c:	9f 77       	andi	r25, 0x7F	; 127
    2b4e:	90 93 a4 02 	sts	0x02A4, r25
    2b52:	80 93 a3 02 	sts	0x02A3, r24
    2b56:	08 95       	ret

00002b58 <_Z14eingabehandlerh>:
	}
}

void eingabehandler(uint8_t taste){
	if (taste!='A')
    2b58:	81 34       	cpi	r24, 0x41	; 65
    2b5a:	09 f4       	brne	.+2      	; 0x2b5e <_Z14eingabehandlerh+0x6>
    2b5c:	57 c2       	rjmp	.+1198   	; 0x300c <_Z14eingabehandlerh+0x4b4>
	{
		if (anzeige==255)
    2b5e:	20 91 a3 02 	lds	r18, 0x02A3
    2b62:	30 91 a4 02 	lds	r19, 0x02A4
    2b66:	2f 3f       	cpi	r18, 0xFF	; 255
    2b68:	31 05       	cpc	r19, r1
    2b6a:	61 f4       	brne	.+24     	; 0x2b84 <_Z14eingabehandlerh+0x2c>
		{
			oled.ssd1306_command(SSD1306_DISPLAYON);
    2b6c:	6f ea       	ldi	r22, 0xAF	; 175
    2b6e:	8a ea       	ldi	r24, 0xAA	; 170
    2b70:	92 e0       	ldi	r25, 0x02	; 2
    2b72:	0e 94 c4 02 	call	0x588	; 0x588 <_ZN7Display15ssd1306_commandEh>
			//entweder display aus oder das Menue starten
			anzeige=(1<<menueflag);
    2b76:	80 e0       	ldi	r24, 0x00	; 0
    2b78:	90 e2       	ldi	r25, 0x20	; 32
    2b7a:	90 93 a4 02 	sts	0x02A4, r25
    2b7e:	80 93 a3 02 	sts	0x02A3, r24
    2b82:	08 95       	ret
    2b84:	a9 01       	movw	r20, r18
    2b86:	41 70       	andi	r20, 0x01	; 1
    2b88:	50 72       	andi	r21, 0x20	; 32
		}
		//gleicher Handler wie oben, aber hier speziell fuer die Bearbeitung von Tastereingaben mit switch fuer die Tasten
		//es sind einfach so viele Tasten moeglich 
		else if ((anzeige&(1<<menueflag)) && (anzeige&(1<<Uhrflag)))	//Menue der Uhr
    2b8a:	41 30       	cpi	r20, 0x01	; 1
    2b8c:	50 42       	sbci	r21, 0x20	; 32
    2b8e:	09 f0       	breq	.+2      	; 0x2b92 <_Z14eingabehandlerh+0x3a>
    2b90:	45 c0       	rjmp	.+138    	; 0x2c1c <_Z14eingabehandlerh+0xc4>
		{	
			anzeige&=~((1<<menueflag)|(1<<Uhrflag));
    2b92:	2e 7f       	andi	r18, 0xFE	; 254
    2b94:	3f 7d       	andi	r19, 0xDF	; 223
    2b96:	30 93 a4 02 	sts	0x02A4, r19
    2b9a:	20 93 a3 02 	sts	0x02A3, r18
			switch (taste)
    2b9e:	82 33       	cpi	r24, 0x32	; 50
    2ba0:	79 f0       	breq	.+30     	; 0x2bc0 <_Z14eingabehandlerh+0x68>
    2ba2:	18 f4       	brcc	.+6      	; 0x2baa <_Z14eingabehandlerh+0x52>
    2ba4:	81 33       	cpi	r24, 0x31	; 49
    2ba6:	31 f0       	breq	.+12     	; 0x2bb4 <_Z14eingabehandlerh+0x5c>
    2ba8:	32 c0       	rjmp	.+100    	; 0x2c0e <_Z14eingabehandlerh+0xb6>
    2baa:	83 33       	cpi	r24, 0x33	; 51
    2bac:	b1 f0       	breq	.+44     	; 0x2bda <_Z14eingabehandlerh+0x82>
    2bae:	84 33       	cpi	r24, 0x34	; 52
    2bb0:	01 f1       	breq	.+64     	; 0x2bf2 <_Z14eingabehandlerh+0x9a>
    2bb2:	2d c0       	rjmp	.+90     	; 0x2c0e <_Z14eingabehandlerh+0xb6>
			{
				case '1':
					//Wechseln auf die Uhr
					anzeige|=(1<<Uhrflag);
    2bb4:	21 60       	ori	r18, 0x01	; 1
    2bb6:	30 93 a4 02 	sts	0x02A4, r19
    2bba:	20 93 a3 02 	sts	0x02A3, r18
					break;
    2bbe:	08 95       	ret
				
				case '2':
					//starten der Stoppuhr APP
					stoppuhr.Sekunden=0;
    2bc0:	10 92 b5 06 	sts	0x06B5, r1
					stoppuhr.Minuten=0;
    2bc4:	10 92 b4 06 	sts	0x06B4, r1
					stoppuhr.Stunden=0;
    2bc8:	10 92 b3 06 	sts	0x06B3, r1
					anzeige|=(1<<refreshdisplay) | (1<<Stoppuhrflag);
    2bcc:	20 68       	ori	r18, 0x80	; 128
    2bce:	30 68       	ori	r19, 0x80	; 128
    2bd0:	30 93 a4 02 	sts	0x02A4, r19
    2bd4:	20 93 a3 02 	sts	0x02A3, r18
					break;
    2bd8:	08 95       	ret
				
				case '3':
					//Starten der Timer APP
					zaehler.Sekunden=0;
    2bda:	10 92 c5 06 	sts	0x06C5, r1
					zaehler.Minuten=0;
    2bde:	10 92 c4 06 	sts	0x06C4, r1
					zaehler.Stunden=0;
    2be2:	10 92 c3 06 	sts	0x06C3, r1
					
					anzeige|=(1<<Timerflag) | (1<<Einstellungsflag);
    2be6:	28 64       	ori	r18, 0x48	; 72
    2be8:	30 93 a4 02 	sts	0x02A4, r19
    2bec:	20 93 a3 02 	sts	0x02A3, r18
					break;
    2bf0:	08 95       	ret
				
				case '4':
					//Starten der Alarmapp, momentan nicht implementiert
					oled.clearFrame();
    2bf2:	8a ea       	ldi	r24, 0xAA	; 170
    2bf4:	92 e0       	ldi	r25, 0x02	; 2
    2bf6:	0e 94 b9 02 	call	0x572	; 0x572 <_ZN7Display10clearFrameEv>
					anzeige|=(1<<refreshdisplay);
    2bfa:	80 91 a3 02 	lds	r24, 0x02A3
    2bfe:	90 91 a4 02 	lds	r25, 0x02A4
    2c02:	90 68       	ori	r25, 0x80	; 128
    2c04:	90 93 a4 02 	sts	0x02A4, r25
    2c08:	80 93 a3 02 	sts	0x02A3, r24
					break;
    2c0c:	08 95       	ret
				
				default:
					//menueflag erneu setzen
					anzeige|=(1<<menueflag)|(1<<Uhrflag);
    2c0e:	21 60       	ori	r18, 0x01	; 1
    2c10:	30 62       	ori	r19, 0x20	; 32
    2c12:	30 93 a4 02 	sts	0x02A4, r19
    2c16:	20 93 a3 02 	sts	0x02A3, r18
					break;
    2c1a:	df c1       	rjmp	.+958    	; 0x2fda <_Z14eingabehandlerh+0x482>
    2c1c:	a9 01       	movw	r20, r18
    2c1e:	48 70       	andi	r20, 0x08	; 8
    2c20:	50 72       	andi	r21, 0x20	; 32
			}
		}
		else if ((anzeige&(1<<menueflag)) && (anzeige&(1<<Einstellungsflag)))	//Menue der Einstellungen
    2c22:	48 30       	cpi	r20, 0x08	; 8
    2c24:	50 42       	sbci	r21, 0x20	; 32
    2c26:	99 f5       	brne	.+102    	; 0x2c8e <_Z14eingabehandlerh+0x136>
		{
			anzeige&=~((1<<menueflag)|(1<<Einstellungsflag));
    2c28:	27 7f       	andi	r18, 0xF7	; 247
    2c2a:	3f 7d       	andi	r19, 0xDF	; 223
    2c2c:	30 93 a4 02 	sts	0x02A4, r19
    2c30:	20 93 a3 02 	sts	0x02A3, r18
			switch (taste)
    2c34:	82 33       	cpi	r24, 0x32	; 50
    2c36:	91 f0       	breq	.+36     	; 0x2c5c <_Z14eingabehandlerh+0x104>
    2c38:	83 33       	cpi	r24, 0x33	; 51
    2c3a:	b1 f0       	breq	.+44     	; 0x2c68 <_Z14eingabehandlerh+0x110>
    2c3c:	81 33       	cpi	r24, 0x31	; 49
    2c3e:	01 f5       	brne	.+64     	; 0x2c80 <_Z14eingabehandlerh+0x128>
			{
				case '1':
					//zuruecksetzen der Kalibrierung, da passive Kallibrierung eingebaut
					kompass.kallibrierung_ruecksetzen();
    2c40:	8b ed       	ldi	r24, 0xDB	; 219
    2c42:	96 e0       	ldi	r25, 0x06	; 6
    2c44:	0e 94 c1 1a 	call	0x3582	; 0x3582 <_ZN7Kompass25kallibrierung_ruecksetzenEv>
					anzeige|=(1<<Kompasflag);
    2c48:	80 91 a3 02 	lds	r24, 0x02A3
    2c4c:	90 91 a4 02 	lds	r25, 0x02A4
    2c50:	84 60       	ori	r24, 0x04	; 4
    2c52:	90 93 a4 02 	sts	0x02A4, r25
    2c56:	80 93 a3 02 	sts	0x02A3, r24
					break;
    2c5a:	08 95       	ret
				case '2':
					//Gaineinstellung fuer den Kompass
					anzeige|=(1<<Kompasgaineinstellenflag);
    2c5c:	20 62       	ori	r18, 0x20	; 32
    2c5e:	30 93 a4 02 	sts	0x02A4, r19
    2c62:	20 93 a3 02 	sts	0x02A3, r18
					break;
    2c66:	08 95       	ret
				case '3':
					//dies ist eine der wenigen Funktinen, die die Handler Strucktur nicht anwenden, da sie die rtc anhaellt
					uhreinstellen();
    2c68:	0e 94 fa 0f 	call	0x1ff4	; 0x1ff4 <_Z13uhreinstellenv>
					anzeige|=(1<<Uhrflag);
    2c6c:	80 91 a3 02 	lds	r24, 0x02A3
    2c70:	90 91 a4 02 	lds	r25, 0x02A4
    2c74:	81 60       	ori	r24, 0x01	; 1
    2c76:	90 93 a4 02 	sts	0x02A4, r25
    2c7a:	80 93 a3 02 	sts	0x02A3, r24
					break;
    2c7e:	08 95       	ret
				default:
					//Menueflag neu setzten
					anzeige|=(1<<menueflag)|(1<<Einstellungsflag);
    2c80:	28 60       	ori	r18, 0x08	; 8
    2c82:	30 62       	ori	r19, 0x20	; 32
    2c84:	30 93 a4 02 	sts	0x02A4, r19
    2c88:	20 93 a3 02 	sts	0x02A3, r18
					break;
    2c8c:	a6 c1       	rjmp	.+844    	; 0x2fda <_Z14eingabehandlerh+0x482>
			}
		}
		else if ((anzeige&(1<<menueflag)))	//nur das grosse menue
    2c8e:	35 ff       	sbrs	r19, 5
    2c90:	54 c0       	rjmp	.+168    	; 0x2d3a <_Z14eingabehandlerh+0x1e2>
		{
			anzeige&=~(1<<menueflag);
    2c92:	3f 7d       	andi	r19, 0xDF	; 223
    2c94:	30 93 a4 02 	sts	0x02A4, r19
    2c98:	20 93 a3 02 	sts	0x02A3, r18
			switch (taste)
    2c9c:	83 33       	cpi	r24, 0x33	; 51
    2c9e:	29 f1       	breq	.+74     	; 0x2cea <_Z14eingabehandlerh+0x192>
    2ca0:	28 f4       	brcc	.+10     	; 0x2cac <_Z14eingabehandlerh+0x154>
    2ca2:	81 33       	cpi	r24, 0x31	; 49
    2ca4:	49 f0       	breq	.+18     	; 0x2cb8 <_Z14eingabehandlerh+0x160>
    2ca6:	82 33       	cpi	r24, 0x32	; 50
    2ca8:	91 f0       	breq	.+36     	; 0x2cce <_Z14eingabehandlerh+0x176>
    2caa:	41 c0       	rjmp	.+130    	; 0x2d2e <_Z14eingabehandlerh+0x1d6>
    2cac:	85 33       	cpi	r24, 0x35	; 53
    2cae:	51 f1       	breq	.+84     	; 0x2d04 <_Z14eingabehandlerh+0x1ac>
    2cb0:	10 f1       	brcs	.+68     	; 0x2cf6 <_Z14eingabehandlerh+0x19e>
    2cb2:	86 33       	cpi	r24, 0x36	; 54
    2cb4:	71 f1       	breq	.+92     	; 0x2d12 <_Z14eingabehandlerh+0x1ba>
    2cb6:	3b c0       	rjmp	.+118    	; 0x2d2e <_Z14eingabehandlerh+0x1d6>
			{
				case '1':
					anzeige|=(1<<Fahradflag);
    2cb8:	22 60       	ori	r18, 0x02	; 2
    2cba:	30 93 a4 02 	sts	0x02A4, r19
    2cbe:	20 93 a3 02 	sts	0x02A3, r18
					//starten des Timers fuer die geschwindigkeit
					TCCR1B |= ((1<<CS12) | (1<<CS10));
    2cc2:	e1 e8       	ldi	r30, 0x81	; 129
    2cc4:	f0 e0       	ldi	r31, 0x00	; 0
    2cc6:	80 81       	ld	r24, Z
    2cc8:	85 60       	ori	r24, 0x05	; 5
    2cca:	80 83       	st	Z, r24
					break;
    2ccc:	08 95       	ret
				
				case '2':
					//Taschenrechner starten
					//Monentan deaktiv, da Umstellung der Handler 
					//operation(Flieskommazahleingabe());
					oled.clearFrame();
    2cce:	8a ea       	ldi	r24, 0xAA	; 170
    2cd0:	92 e0       	ldi	r25, 0x02	; 2
    2cd2:	0e 94 b9 02 	call	0x572	; 0x572 <_ZN7Display10clearFrameEv>
					anzeige|=(1<<refreshdisplay);	
    2cd6:	80 91 a3 02 	lds	r24, 0x02A3
    2cda:	90 91 a4 02 	lds	r25, 0x02A4
    2cde:	90 68       	ori	r25, 0x80	; 128
    2ce0:	90 93 a4 02 	sts	0x02A4, r25
    2ce4:	80 93 a3 02 	sts	0x02A3, r24
					break;
    2ce8:	08 95       	ret
				
				case '3':
					anzeige|=(1<<Kompasflag);
    2cea:	24 60       	ori	r18, 0x04	; 4
    2cec:	30 93 a4 02 	sts	0x02A4, r19
    2cf0:	20 93 a3 02 	sts	0x02A3, r18
					break;
    2cf4:	08 95       	ret
				
				case '4':
					//Menue der Uhr
					anzeige|=(1<<menueflag) | (1<<Uhrflag);
    2cf6:	21 60       	ori	r18, 0x01	; 1
    2cf8:	30 62       	ori	r19, 0x20	; 32
    2cfa:	30 93 a4 02 	sts	0x02A4, r19
    2cfe:	20 93 a3 02 	sts	0x02A3, r18
					break;
    2d02:	08 95       	ret
				
				case '5':
					//menue der Einstellungen
					anzeige|=(1<<menueflag) | (1<<Einstellungsflag);
    2d04:	28 60       	ori	r18, 0x08	; 8
    2d06:	30 62       	ori	r19, 0x20	; 32
    2d08:	30 93 a4 02 	sts	0x02A4, r19
    2d0c:	20 93 a3 02 	sts	0x02A3, r18
					break;
    2d10:	08 95       	ret
				
				case '6':
					//Display ausschalten
					//anzeige=255;
					oled.clearFrame();
    2d12:	8a ea       	ldi	r24, 0xAA	; 170
    2d14:	92 e0       	ldi	r25, 0x02	; 2
    2d16:	0e 94 b9 02 	call	0x572	; 0x572 <_ZN7Display10clearFrameEv>
					anzeige|=(1<<refreshdisplay);
    2d1a:	80 91 a3 02 	lds	r24, 0x02A3
    2d1e:	90 91 a4 02 	lds	r25, 0x02A4
    2d22:	90 68       	ori	r25, 0x80	; 128
    2d24:	90 93 a4 02 	sts	0x02A4, r25
    2d28:	80 93 a3 02 	sts	0x02A3, r24
					break;
    2d2c:	08 95       	ret
				
				default:
					//menueflag erneut setzen um abschalten zu verhindern
					anzeige|=(1<<menueflag);
    2d2e:	30 62       	ori	r19, 0x20	; 32
    2d30:	30 93 a4 02 	sts	0x02A4, r19
    2d34:	20 93 a3 02 	sts	0x02A3, r18
					break;
    2d38:	50 c1       	rjmp	.+672    	; 0x2fda <_Z14eingabehandlerh+0x482>
			}
		}
		else if ((anzeige&(1<<Kompasgaineinstellenflag)))
    2d3a:	25 ff       	sbrs	r18, 5
    2d3c:	51 c0       	rjmp	.+162    	; 0x2de0 <_Z14eingabehandlerh+0x288>
		{
			anzeige&=~(1<<Kompasgaineinstellenflag);
    2d3e:	a9 01       	movw	r20, r18
    2d40:	4f 7d       	andi	r20, 0xDF	; 223
			anzeige|=(1<<Kompasflag);
    2d42:	44 60       	ori	r20, 0x04	; 4
    2d44:	50 93 a4 02 	sts	0x02A4, r21
    2d48:	40 93 a3 02 	sts	0x02A3, r20
			switch (taste) {
    2d4c:	48 2f       	mov	r20, r24
    2d4e:	50 e0       	ldi	r21, 0x00	; 0
    2d50:	fa 01       	movw	r30, r20
    2d52:	f1 97       	sbiw	r30, 0x31	; 49
    2d54:	e8 30       	cpi	r30, 0x08	; 8
    2d56:	f1 05       	cpc	r31, r1
    2d58:	e0 f5       	brcc	.+120    	; 0x2dd2 <_Z14eingabehandlerh+0x27a>
    2d5a:	e2 5c       	subi	r30, 0xC2	; 194
    2d5c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d5e:	0c 94 3b 22 	jmp	0x4476	; 0x4476 <__tablejump2__>
				case '1':
					kompass.HMC5883L_command(0x01,HMCGAIN1370);
    2d62:	40 e0       	ldi	r20, 0x00	; 0
    2d64:	61 e0       	ldi	r22, 0x01	; 1
    2d66:	8b ed       	ldi	r24, 0xDB	; 219
    2d68:	96 e0       	ldi	r25, 0x06	; 6
    2d6a:	0e 94 46 19 	call	0x328c	; 0x328c <_ZN7Kompass16HMC5883L_commandEhh>
					break;
    2d6e:	08 95       	ret
				case '2':
					kompass.HMC5883L_command(0x01,HMCGAIN1090);
    2d70:	40 e2       	ldi	r20, 0x20	; 32
    2d72:	61 e0       	ldi	r22, 0x01	; 1
    2d74:	8b ed       	ldi	r24, 0xDB	; 219
    2d76:	96 e0       	ldi	r25, 0x06	; 6
    2d78:	0e 94 46 19 	call	0x328c	; 0x328c <_ZN7Kompass16HMC5883L_commandEhh>
					break;
    2d7c:	08 95       	ret
				case '3':
					kompass.HMC5883L_command(0x01,HMCGAIN820);
    2d7e:	40 e4       	ldi	r20, 0x40	; 64
    2d80:	61 e0       	ldi	r22, 0x01	; 1
    2d82:	8b ed       	ldi	r24, 0xDB	; 219
    2d84:	96 e0       	ldi	r25, 0x06	; 6
    2d86:	0e 94 46 19 	call	0x328c	; 0x328c <_ZN7Kompass16HMC5883L_commandEhh>
					break;
    2d8a:	08 95       	ret
				case '4':
					kompass.HMC5883L_command(0x01,HMCGAIN660);
    2d8c:	40 e6       	ldi	r20, 0x60	; 96
    2d8e:	61 e0       	ldi	r22, 0x01	; 1
    2d90:	8b ed       	ldi	r24, 0xDB	; 219
    2d92:	96 e0       	ldi	r25, 0x06	; 6
    2d94:	0e 94 46 19 	call	0x328c	; 0x328c <_ZN7Kompass16HMC5883L_commandEhh>
					break;
    2d98:	08 95       	ret
				case '5':
					kompass.HMC5883L_command(0x01,HMCGAIN440);
    2d9a:	40 e8       	ldi	r20, 0x80	; 128
    2d9c:	61 e0       	ldi	r22, 0x01	; 1
    2d9e:	8b ed       	ldi	r24, 0xDB	; 219
    2da0:	96 e0       	ldi	r25, 0x06	; 6
    2da2:	0e 94 46 19 	call	0x328c	; 0x328c <_ZN7Kompass16HMC5883L_commandEhh>
					break;
    2da6:	08 95       	ret
				case '6':
					kompass.HMC5883L_command(0x01,HMCGAIN390);
    2da8:	40 ea       	ldi	r20, 0xA0	; 160
    2daa:	61 e0       	ldi	r22, 0x01	; 1
    2dac:	8b ed       	ldi	r24, 0xDB	; 219
    2dae:	96 e0       	ldi	r25, 0x06	; 6
    2db0:	0e 94 46 19 	call	0x328c	; 0x328c <_ZN7Kompass16HMC5883L_commandEhh>
					break;
    2db4:	08 95       	ret
				case '7':
					kompass.HMC5883L_command(0x01,HMCGAIN330);
    2db6:	40 ec       	ldi	r20, 0xC0	; 192
    2db8:	61 e0       	ldi	r22, 0x01	; 1
    2dba:	8b ed       	ldi	r24, 0xDB	; 219
    2dbc:	96 e0       	ldi	r25, 0x06	; 6
    2dbe:	0e 94 46 19 	call	0x328c	; 0x328c <_ZN7Kompass16HMC5883L_commandEhh>
					break;
    2dc2:	08 95       	ret
				case '8':
					kompass.HMC5883L_command(0x01,HMCGAIN230);
    2dc4:	40 ee       	ldi	r20, 0xE0	; 224
    2dc6:	61 e0       	ldi	r22, 0x01	; 1
    2dc8:	8b ed       	ldi	r24, 0xDB	; 219
    2dca:	96 e0       	ldi	r25, 0x06	; 6
    2dcc:	0e 94 46 19 	call	0x328c	; 0x328c <_ZN7Kompass16HMC5883L_commandEhh>
					break;
    2dd0:	08 95       	ret
				default:
					anzeige &=~(1<<Kompasflag);
    2dd2:	2b 7d       	andi	r18, 0xDB	; 219
					anzeige|=(1<<Kompasgaineinstellenflag);
    2dd4:	20 62       	ori	r18, 0x20	; 32
    2dd6:	30 93 a4 02 	sts	0x02A4, r19
    2dda:	20 93 a3 02 	sts	0x02A3, r18
					break;
    2dde:	fd c0       	rjmp	.+506    	; 0x2fda <_Z14eingabehandlerh+0x482>
    2de0:	a9 01       	movw	r20, r18
    2de2:	48 74       	andi	r20, 0x48	; 72
    2de4:	55 27       	eor	r21, r21
			}
		}
		else if ((anzeige&(1<<Einstellungsflag)) && (anzeige&(1<<Timerflag)))
    2de6:	48 34       	cpi	r20, 0x48	; 72
    2de8:	51 05       	cpc	r21, r1
    2dea:	09 f0       	breq	.+2      	; 0x2dee <_Z14eingabehandlerh+0x296>
    2dec:	87 c0       	rjmp	.+270    	; 0x2efc <_Z14eingabehandlerh+0x3a4>
		{
			switch (pos)
    2dee:	90 91 a2 02 	lds	r25, 0x02A2
    2df2:	92 30       	cpi	r25, 0x02	; 2
    2df4:	a9 f1       	breq	.+106    	; 0x2e60 <_Z14eingabehandlerh+0x308>
    2df6:	28 f4       	brcc	.+10     	; 0x2e02 <_Z14eingabehandlerh+0x2aa>
    2df8:	99 23       	and	r25, r25
    2dfa:	61 f0       	breq	.+24     	; 0x2e14 <_Z14eingabehandlerh+0x2bc>
    2dfc:	91 30       	cpi	r25, 0x01	; 1
    2dfe:	01 f1       	breq	.+64     	; 0x2e40 <_Z14eingabehandlerh+0x2e8>
    2e00:	ec c0       	rjmp	.+472    	; 0x2fda <_Z14eingabehandlerh+0x482>
    2e02:	94 30       	cpi	r25, 0x04	; 4
    2e04:	09 f4       	brne	.+2      	; 0x2e08 <_Z14eingabehandlerh+0x2b0>
    2e06:	52 c0       	rjmp	.+164    	; 0x2eac <_Z14eingabehandlerh+0x354>
    2e08:	08 f4       	brcc	.+2      	; 0x2e0c <_Z14eingabehandlerh+0x2b4>
    2e0a:	40 c0       	rjmp	.+128    	; 0x2e8c <_Z14eingabehandlerh+0x334>
    2e0c:	95 30       	cpi	r25, 0x05	; 5
    2e0e:	09 f4       	brne	.+2      	; 0x2e12 <_Z14eingabehandlerh+0x2ba>
    2e10:	63 c0       	rjmp	.+198    	; 0x2ed8 <_Z14eingabehandlerh+0x380>
    2e12:	e3 c0       	rjmp	.+454    	; 0x2fda <_Z14eingabehandlerh+0x482>
			{
			case 0:
				switch (taste)
    2e14:	83 32       	cpi	r24, 0x23	; 35
    2e16:	09 f4       	brne	.+2      	; 0x2e1a <_Z14eingabehandlerh+0x2c2>
    2e18:	e0 c0       	rjmp	.+448    	; 0x2fda <_Z14eingabehandlerh+0x482>
    2e1a:	8a 32       	cpi	r24, 0x2A	; 42
    2e1c:	09 f4       	brne	.+2      	; 0x2e20 <_Z14eingabehandlerh+0x2c8>
    2e1e:	dd c0       	rjmp	.+442    	; 0x2fda <_Z14eingabehandlerh+0x482>
					case '#':
						break;
					case '*':
						break;
					default:
						zaehler.Sekunden+=(taste-'0')*10;
    2e20:	e5 ec       	ldi	r30, 0xC5	; 197
    2e22:	f6 e0       	ldi	r31, 0x06	; 6
    2e24:	98 2f       	mov	r25, r24
    2e26:	99 0f       	add	r25, r25
    2e28:	90 56       	subi	r25, 0x60	; 96
    2e2a:	29 2f       	mov	r18, r25
    2e2c:	22 0f       	add	r18, r18
    2e2e:	22 0f       	add	r18, r18
    2e30:	92 0f       	add	r25, r18
    2e32:	20 81       	ld	r18, Z
    2e34:	92 0f       	add	r25, r18
    2e36:	90 83       	st	Z, r25
						pos++;
    2e38:	91 e0       	ldi	r25, 0x01	; 1
    2e3a:	90 93 a2 02 	sts	0x02A2, r25
						break;
    2e3e:	cd c0       	rjmp	.+410    	; 0x2fda <_Z14eingabehandlerh+0x482>
				}
				break;
			case 1:
				switch (taste)
    2e40:	83 32       	cpi	r24, 0x23	; 35
    2e42:	09 f4       	brne	.+2      	; 0x2e46 <_Z14eingabehandlerh+0x2ee>
    2e44:	ca c0       	rjmp	.+404    	; 0x2fda <_Z14eingabehandlerh+0x482>
    2e46:	8a 32       	cpi	r24, 0x2A	; 42
    2e48:	09 f4       	brne	.+2      	; 0x2e4c <_Z14eingabehandlerh+0x2f4>
    2e4a:	c7 c0       	rjmp	.+398    	; 0x2fda <_Z14eingabehandlerh+0x482>
					case '#':
					break;
					case '*':
					break;
					default:
					zaehler.Sekunden+=(taste-'0');
    2e4c:	e5 ec       	ldi	r30, 0xC5	; 197
    2e4e:	f6 e0       	ldi	r31, 0x06	; 6
    2e50:	90 81       	ld	r25, Z
    2e52:	90 53       	subi	r25, 0x30	; 48
    2e54:	98 0f       	add	r25, r24
    2e56:	90 83       	st	Z, r25
					pos++;
    2e58:	92 e0       	ldi	r25, 0x02	; 2
    2e5a:	90 93 a2 02 	sts	0x02A2, r25
					break;
    2e5e:	bd c0       	rjmp	.+378    	; 0x2fda <_Z14eingabehandlerh+0x482>
				}
				break;
			case 2:
				switch (taste)
    2e60:	83 32       	cpi	r24, 0x23	; 35
    2e62:	09 f4       	brne	.+2      	; 0x2e66 <_Z14eingabehandlerh+0x30e>
    2e64:	ba c0       	rjmp	.+372    	; 0x2fda <_Z14eingabehandlerh+0x482>
    2e66:	8a 32       	cpi	r24, 0x2A	; 42
    2e68:	09 f4       	brne	.+2      	; 0x2e6c <_Z14eingabehandlerh+0x314>
    2e6a:	b7 c0       	rjmp	.+366    	; 0x2fda <_Z14eingabehandlerh+0x482>
					case '#':
					break;
					case '*':
					break;
					default:
					zaehler.Minuten+=(taste-'0')*10;
    2e6c:	e4 ec       	ldi	r30, 0xC4	; 196
    2e6e:	f6 e0       	ldi	r31, 0x06	; 6
    2e70:	98 2f       	mov	r25, r24
    2e72:	99 0f       	add	r25, r25
    2e74:	90 56       	subi	r25, 0x60	; 96
    2e76:	29 2f       	mov	r18, r25
    2e78:	22 0f       	add	r18, r18
    2e7a:	22 0f       	add	r18, r18
    2e7c:	92 0f       	add	r25, r18
    2e7e:	20 81       	ld	r18, Z
    2e80:	92 0f       	add	r25, r18
    2e82:	90 83       	st	Z, r25
					pos++;
    2e84:	93 e0       	ldi	r25, 0x03	; 3
    2e86:	90 93 a2 02 	sts	0x02A2, r25
					break;
    2e8a:	a7 c0       	rjmp	.+334    	; 0x2fda <_Z14eingabehandlerh+0x482>
				}
				break;
			case 3:
				switch (taste)
    2e8c:	83 32       	cpi	r24, 0x23	; 35
    2e8e:	09 f4       	brne	.+2      	; 0x2e92 <_Z14eingabehandlerh+0x33a>
    2e90:	a4 c0       	rjmp	.+328    	; 0x2fda <_Z14eingabehandlerh+0x482>
    2e92:	8a 32       	cpi	r24, 0x2A	; 42
    2e94:	09 f4       	brne	.+2      	; 0x2e98 <_Z14eingabehandlerh+0x340>
    2e96:	a1 c0       	rjmp	.+322    	; 0x2fda <_Z14eingabehandlerh+0x482>
					case '#':
					break;
					case '*':
					break;
					default:
					zaehler.Minuten+=(taste-'0');
    2e98:	e4 ec       	ldi	r30, 0xC4	; 196
    2e9a:	f6 e0       	ldi	r31, 0x06	; 6
    2e9c:	90 81       	ld	r25, Z
    2e9e:	90 53       	subi	r25, 0x30	; 48
    2ea0:	98 0f       	add	r25, r24
    2ea2:	90 83       	st	Z, r25
					pos++;
    2ea4:	94 e0       	ldi	r25, 0x04	; 4
    2ea6:	90 93 a2 02 	sts	0x02A2, r25
					break;
    2eaa:	97 c0       	rjmp	.+302    	; 0x2fda <_Z14eingabehandlerh+0x482>
				}
				break;
			case 4:
				switch (taste)
    2eac:	83 32       	cpi	r24, 0x23	; 35
    2eae:	09 f4       	brne	.+2      	; 0x2eb2 <_Z14eingabehandlerh+0x35a>
    2eb0:	94 c0       	rjmp	.+296    	; 0x2fda <_Z14eingabehandlerh+0x482>
    2eb2:	8a 32       	cpi	r24, 0x2A	; 42
    2eb4:	09 f4       	brne	.+2      	; 0x2eb8 <_Z14eingabehandlerh+0x360>
    2eb6:	91 c0       	rjmp	.+290    	; 0x2fda <_Z14eingabehandlerh+0x482>
					case '#':
					break;
					case '*':
					break;
					default:
					zaehler.Stunden+=(taste-'0')*10;
    2eb8:	e3 ec       	ldi	r30, 0xC3	; 195
    2eba:	f6 e0       	ldi	r31, 0x06	; 6
    2ebc:	98 2f       	mov	r25, r24
    2ebe:	99 0f       	add	r25, r25
    2ec0:	90 56       	subi	r25, 0x60	; 96
    2ec2:	29 2f       	mov	r18, r25
    2ec4:	22 0f       	add	r18, r18
    2ec6:	22 0f       	add	r18, r18
    2ec8:	92 0f       	add	r25, r18
    2eca:	20 81       	ld	r18, Z
    2ecc:	92 0f       	add	r25, r18
    2ece:	90 83       	st	Z, r25
					pos++;
    2ed0:	95 e0       	ldi	r25, 0x05	; 5
    2ed2:	90 93 a2 02 	sts	0x02A2, r25
					break;
    2ed6:	81 c0       	rjmp	.+258    	; 0x2fda <_Z14eingabehandlerh+0x482>
				}
				break;
			case 5:
				switch (taste)
    2ed8:	83 32       	cpi	r24, 0x23	; 35
    2eda:	41 f0       	breq	.+16     	; 0x2eec <_Z14eingabehandlerh+0x394>
    2edc:	8a 32       	cpi	r24, 0x2A	; 42
    2ede:	31 f0       	breq	.+12     	; 0x2eec <_Z14eingabehandlerh+0x394>
					case '#':
					break;
					case '*':
					break;
					default:
					zaehler.Stunden+=(taste-'0');
    2ee0:	e3 ec       	ldi	r30, 0xC3	; 195
    2ee2:	f6 e0       	ldi	r31, 0x06	; 6
    2ee4:	90 81       	ld	r25, Z
    2ee6:	90 53       	subi	r25, 0x30	; 48
    2ee8:	98 0f       	add	r25, r24
    2eea:	90 83       	st	Z, r25
					pos++;
					break;
				}
				pos=0;
    2eec:	10 92 a2 02 	sts	0x02A2, r1
				anzeige&=~(1<<Einstellungsflag);
    2ef0:	27 7f       	andi	r18, 0xF7	; 247
    2ef2:	30 93 a4 02 	sts	0x02A4, r19
    2ef6:	20 93 a3 02 	sts	0x02A3, r18
				break;
    2efa:	6f c0       	rjmp	.+222    	; 0x2fda <_Z14eingabehandlerh+0x482>
			}
		}
		else if ((anzeige&(1<<Stoppuhrflag)))
    2efc:	27 ff       	sbrs	r18, 7
    2efe:	23 c0       	rjmp	.+70     	; 0x2f46 <_Z14eingabehandlerh+0x3ee>
		{
			if (taste=='*')
    2f00:	8a 32       	cpi	r24, 0x2A	; 42
    2f02:	71 f4       	brne	.+28     	; 0x2f20 <_Z14eingabehandlerh+0x3c8>
			{
				if ((anzeige&(1<<Einstellungsflag)))
    2f04:	23 ff       	sbrs	r18, 3
    2f06:	06 c0       	rjmp	.+12     	; 0x2f14 <_Z14eingabehandlerh+0x3bc>
				{
					anzeige&=~(1<<Einstellungsflag);
    2f08:	27 7f       	andi	r18, 0xF7	; 247
    2f0a:	30 93 a4 02 	sts	0x02A4, r19
    2f0e:	20 93 a3 02 	sts	0x02A3, r18
    2f12:	76 c0       	rjmp	.+236    	; 0x3000 <_Z14eingabehandlerh+0x4a8>
				}
				else{
					anzeige|=(1<<Einstellungsflag);
    2f14:	28 60       	ori	r18, 0x08	; 8
    2f16:	30 93 a4 02 	sts	0x02A4, r19
    2f1a:	20 93 a3 02 	sts	0x02A3, r18
    2f1e:	70 c0       	rjmp	.+224    	; 0x3000 <_Z14eingabehandlerh+0x4a8>
				}
			}
			else if (taste=='0')
    2f20:	80 33       	cpi	r24, 0x30	; 48
    2f22:	39 f4       	brne	.+14     	; 0x2f32 <_Z14eingabehandlerh+0x3da>
			{
				stoppuhr.Sekunden=0;
    2f24:	10 92 b5 06 	sts	0x06B5, r1
				stoppuhr.Minuten=0;
    2f28:	10 92 b4 06 	sts	0x06B4, r1
				stoppuhr.Stunden=0;
    2f2c:	10 92 b3 06 	sts	0x06B3, r1
    2f30:	08 95       	ret
			}
			else if (taste=='#')
    2f32:	83 32       	cpi	r24, 0x23	; 35
    2f34:	09 f0       	breq	.+2      	; 0x2f38 <_Z14eingabehandlerh+0x3e0>
    2f36:	6a c0       	rjmp	.+212    	; 0x300c <_Z14eingabehandlerh+0x4b4>
			{
				anzeige&=~((1<<Stoppuhrflag)|(1<<Einstellungsflag));
    2f38:	27 77       	andi	r18, 0x77	; 119
				anzeige|=(1<<menueflag);
    2f3a:	30 62       	ori	r19, 0x20	; 32
    2f3c:	30 93 a4 02 	sts	0x02A4, r19
    2f40:	20 93 a3 02 	sts	0x02A3, r18
    2f44:	08 95       	ret
			}
		}
		else if ((anzeige&(1<<Uhrflag)))
    2f46:	20 ff       	sbrs	r18, 0
    2f48:	0a c0       	rjmp	.+20     	; 0x2f5e <_Z14eingabehandlerh+0x406>
		{
			if (taste=='#')
    2f4a:	83 32       	cpi	r24, 0x23	; 35
    2f4c:	09 f0       	breq	.+2      	; 0x2f50 <_Z14eingabehandlerh+0x3f8>
    2f4e:	45 c0       	rjmp	.+138    	; 0x2fda <_Z14eingabehandlerh+0x482>
			{
				anzeige&=~(1<<Uhrflag);
    2f50:	2e 7f       	andi	r18, 0xFE	; 254
				anzeige|=(1<<menueflag);
    2f52:	30 62       	ori	r19, 0x20	; 32
    2f54:	30 93 a4 02 	sts	0x02A4, r19
    2f58:	20 93 a3 02 	sts	0x02A3, r18
    2f5c:	08 95       	ret
			}
		}
		else if ((anzeige&(1<<Kompasflag)))
    2f5e:	22 ff       	sbrs	r18, 2
    2f60:	09 c0       	rjmp	.+18     	; 0x2f74 <_Z14eingabehandlerh+0x41c>
		{
			if (taste=='#')
    2f62:	83 32       	cpi	r24, 0x23	; 35
    2f64:	d1 f5       	brne	.+116    	; 0x2fda <_Z14eingabehandlerh+0x482>
			{
				anzeige&=~(1<<Kompasflag);
    2f66:	2b 7f       	andi	r18, 0xFB	; 251
				anzeige|=(1<<menueflag);
    2f68:	30 62       	ori	r19, 0x20	; 32
    2f6a:	30 93 a4 02 	sts	0x02A4, r19
    2f6e:	20 93 a3 02 	sts	0x02A3, r18
    2f72:	08 95       	ret
			}
		}
		else if ((anzeige&(1<<Fahradflag)))
    2f74:	21 ff       	sbrs	r18, 1
    2f76:	0f c0       	rjmp	.+30     	; 0x2f96 <_Z14eingabehandlerh+0x43e>
		{
			if (taste=='#')
    2f78:	83 32       	cpi	r24, 0x23	; 35
    2f7a:	79 f5       	brne	.+94     	; 0x2fda <_Z14eingabehandlerh+0x482>
			{
				anzeige&=~(1<<Fahradflag);
    2f7c:	c9 01       	movw	r24, r18
    2f7e:	8d 7f       	andi	r24, 0xFD	; 253
				anzeige|=(1<<menueflag);
    2f80:	90 62       	ori	r25, 0x20	; 32
    2f82:	90 93 a4 02 	sts	0x02A4, r25
    2f86:	80 93 a3 02 	sts	0x02A3, r24
				TCCR1B &= ~((1<<CS12) | (1<<CS10));
    2f8a:	e1 e8       	ldi	r30, 0x81	; 129
    2f8c:	f0 e0       	ldi	r31, 0x00	; 0
    2f8e:	80 81       	ld	r24, Z
    2f90:	8a 7f       	andi	r24, 0xFA	; 250
    2f92:	80 83       	st	Z, r24
    2f94:	08 95       	ret
			}
		}
		else if ((anzeige&(1<<Timerflag)))
    2f96:	26 ff       	sbrs	r18, 6
    2f98:	17 c0       	rjmp	.+46     	; 0x2fc8 <_Z14eingabehandlerh+0x470>
		{
			if (taste=='#')
    2f9a:	83 32       	cpi	r24, 0x23	; 35
    2f9c:	f1 f4       	brne	.+60     	; 0x2fda <_Z14eingabehandlerh+0x482>
			{
				anzeige&=~((1<<Timerflag)|(1<<blinkflag));
    2f9e:	2f 7b       	andi	r18, 0xBF	; 191
    2fa0:	3f 7b       	andi	r19, 0xBF	; 191
    2fa2:	30 93 a4 02 	sts	0x02A4, r19
    2fa6:	20 93 a3 02 	sts	0x02A3, r18
				oled.invert(0);	//fuer den Fall, dass es invertiert blieb (50% der Faelle)
    2faa:	60 e0       	ldi	r22, 0x00	; 0
    2fac:	8a ea       	ldi	r24, 0xAA	; 170
    2fae:	92 e0       	ldi	r25, 0x02	; 2
    2fb0:	0e 94 55 03 	call	0x6aa	; 0x6aa <_ZN7Display6invertEh>
				anzeige|=(1<<menueflag);
    2fb4:	80 91 a3 02 	lds	r24, 0x02A3
    2fb8:	90 91 a4 02 	lds	r25, 0x02A4
    2fbc:	90 62       	ori	r25, 0x20	; 32
    2fbe:	90 93 a4 02 	sts	0x02A4, r25
    2fc2:	80 93 a3 02 	sts	0x02A3, r24
    2fc6:	08 95       	ret
			}
		}
		else if (anzeige==0)
    2fc8:	23 2b       	or	r18, r19
    2fca:	39 f4       	brne	.+14     	; 0x2fda <_Z14eingabehandlerh+0x482>
		{
			anzeige|=(1<<menueflag);
    2fcc:	80 e0       	ldi	r24, 0x00	; 0
    2fce:	90 e2       	ldi	r25, 0x20	; 32
    2fd0:	90 93 a4 02 	sts	0x02A4, r25
    2fd4:	80 93 a3 02 	sts	0x02A3, r24
    2fd8:	08 95       	ret
		}
		if ((anzeige&(1<<blinkflag)))
    2fda:	20 91 a3 02 	lds	r18, 0x02A3
    2fde:	30 91 a4 02 	lds	r19, 0x02A4
    2fe2:	36 ff       	sbrs	r19, 6
    2fe4:	13 c0       	rjmp	.+38     	; 0x300c <_Z14eingabehandlerh+0x4b4>
		{
			if (taste=='*')
    2fe6:	8a 32       	cpi	r24, 0x2A	; 42
    2fe8:	89 f4       	brne	.+34     	; 0x300c <_Z14eingabehandlerh+0x4b4>
			{
				anzeige &=~(1<<blinkflag);
    2fea:	3f 7b       	andi	r19, 0xBF	; 191
    2fec:	30 93 a4 02 	sts	0x02A4, r19
    2ff0:	20 93 a3 02 	sts	0x02A3, r18
				oled.invert(0);	//fuer den Fall, dass es invertiert blieb (50% der Faelle)
    2ff4:	60 e0       	ldi	r22, 0x00	; 0
    2ff6:	8a ea       	ldi	r24, 0xAA	; 170
    2ff8:	92 e0       	ldi	r25, 0x02	; 2
    2ffa:	0e 94 55 03 	call	0x6aa	; 0x6aa <_ZN7Display6invertEh>
    2ffe:	08 95       	ret
		}
		else if (anzeige==0)
		{
			anzeige|=(1<<menueflag);
		}
		if ((anzeige&(1<<blinkflag)))
    3000:	20 91 a3 02 	lds	r18, 0x02A3
    3004:	30 91 a4 02 	lds	r19, 0x02A4
    3008:	36 fd       	sbrc	r19, 6
    300a:	ef cf       	rjmp	.-34     	; 0x2fea <_Z14eingabehandlerh+0x492>
    300c:	08 95       	ret

0000300e <main>:
void eingabehandler(uint8_t taste);

int main(void)
{
	//initialisierung
	initialisierung();
    300e:	0e 94 48 14 	call	0x2890	; 0x2890 <_Z15initialisierungv>
	
    while(1)
    {
		//Steuerung der interupts durch Handler
		maininterupthandler();
    3012:	0e 94 98 14 	call	0x2930	; 0x2930 <_Z19maininterupthandlerv>
		//Steuerung der Anzeige alle Sekunde zur aktualisierung maximale Aktulisierungsrate ist 1Hz
		anzeigehandler();
    3016:	0e 94 aa 14 	call	0x2954	; 0x2954 <_Z14anzeigehandlerv>
		//Tasthandler
		eingabehandler(Tastatur.Taster());
    301a:	89 ea       	ldi	r24, 0xA9	; 169
    301c:	92 e0       	ldi	r25, 0x02	; 2
    301e:	0e 94 9c 18 	call	0x3138	; 0x3138 <_ZN9Interface6TasterEv>
    3022:	0e 94 ac 15 	call	0x2b58	; 0x2b58 <_Z14eingabehandlerh>
    3026:	f5 cf       	rjmp	.-22     	; 0x3012 <main+0x4>

00003028 <_GLOBAL__sub_I_kompass>:
#include <stdlib.h>
#include <stdio.h>
#include <avr/interrupt.h>

#include "Kompass.h"
Kompass kompass;
    3028:	8b ed       	ldi	r24, 0xDB	; 219
    302a:	96 e0       	ldi	r25, 0x06	; 6
    302c:	0e 94 65 19 	call	0x32ca	; 0x32ca <_ZN7KompassC1Ev>

#include "RTC.h"
RTC rtc;
    3030:	8b ec       	ldi	r24, 0xCB	; 203
    3032:	96 e0       	ldi	r25, 0x06	; 6
    3034:	0e 94 d5 1a 	call	0x35aa	; 0x35aa <_ZN3RTCC1Ev>
RTC zaehler;
    3038:	8b eb       	ldi	r24, 0xBB	; 187
    303a:	96 e0       	ldi	r25, 0x06	; 6
    303c:	0e 94 d5 1a 	call	0x35aa	; 0x35aa <_ZN3RTCC1Ev>
RTC stoppuhr;
    3040:	8b ea       	ldi	r24, 0xAB	; 171
    3042:	96 e0       	ldi	r25, 0x06	; 6
    3044:	0e 94 d5 1a 	call	0x35aa	; 0x35aa <_ZN3RTCC1Ev>

#include "Display.h"
Display oled;
    3048:	8a ea       	ldi	r24, 0xAA	; 170
    304a:	92 e0       	ldi	r25, 0x02	; 2
    304c:	0e 94 49 03 	call	0x692	; 0x692 <_ZN7DisplayC1Ev>

#include "Interface.h"
Interface Tastatur;
    3050:	89 ea       	ldi	r24, 0xA9	; 169
    3052:	92 e0       	ldi	r25, 0x02	; 2
    3054:	0e 94 74 18 	call	0x30e8	; 0x30e8 <_ZN9InterfaceC1Ev>
    3058:	08 95       	ret

0000305a <_GLOBAL__sub_D_kompass>:
    305a:	89 ea       	ldi	r24, 0xA9	; 169
    305c:	92 e0       	ldi	r25, 0x02	; 2
    305e:	0e 94 75 18 	call	0x30ea	; 0x30ea <_ZN9InterfaceD1Ev>
RTC rtc;
RTC zaehler;
RTC stoppuhr;

#include "Display.h"
Display oled;
    3062:	8a ea       	ldi	r24, 0xAA	; 170
    3064:	92 e0       	ldi	r25, 0x02	; 2
    3066:	0e 94 b5 02 	call	0x56a	; 0x56a <_ZN7DisplayD1Ev>
Kompass kompass;

#include "RTC.h"
RTC rtc;
RTC zaehler;
RTC stoppuhr;
    306a:	8b ea       	ldi	r24, 0xAB	; 171
    306c:	96 e0       	ldi	r25, 0x06	; 6
    306e:	0e 94 f8 1a 	call	0x35f0	; 0x35f0 <_ZN3RTCD1Ev>
#include "Kompass.h"
Kompass kompass;

#include "RTC.h"
RTC rtc;
RTC zaehler;
    3072:	8b eb       	ldi	r24, 0xBB	; 187
    3074:	96 e0       	ldi	r25, 0x06	; 6
    3076:	0e 94 f8 1a 	call	0x35f0	; 0x35f0 <_ZN3RTCD1Ev>

#include "Kompass.h"
Kompass kompass;

#include "RTC.h"
RTC rtc;
    307a:	8b ec       	ldi	r24, 0xCB	; 203
    307c:	96 e0       	ldi	r25, 0x06	; 6
    307e:	0e 94 f8 1a 	call	0x35f0	; 0x35f0 <_ZN3RTCD1Ev>
#include <stdlib.h>
#include <stdio.h>
#include <avr/interrupt.h>

#include "Kompass.h"
Kompass kompass;
    3082:	8b ed       	ldi	r24, 0xDB	; 219
    3084:	96 e0       	ldi	r25, 0x06	; 6
    3086:	0e 94 42 19 	call	0x3284	; 0x3284 <_ZN7KompassD1Ev>
    308a:	08 95       	ret

0000308c <_ZN3I2CC1Ev>:
#include "I2C.h"

// default constructor
I2C::I2C()
{
	TWBR = 10; //Bit fuer 100khz an Tackrate, reicht gerade noch so
    308c:	8a e0       	ldi	r24, 0x0A	; 10
    308e:	80 93 b8 00 	sts	0x00B8, r24
    3092:	08 95       	ret

00003094 <_ZN3I2CD1Ev>:
} //I2C

// default destructor
I2C::~I2C()
    3094:	08 95       	ret

00003096 <_ZN3I2C9twi_startEv>:
{
} //~I2C

void I2C::twi_start(){
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    3096:	84 ea       	ldi	r24, 0xA4	; 164
    3098:	80 93 bc 00 	sts	0x00BC, r24
    309c:	08 95       	ret

0000309e <_ZN3I2C8twi_stopEv>:
}
void I2C::twi_stop(){
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    309e:	84 e9       	ldi	r24, 0x94	; 148
    30a0:	80 93 bc 00 	sts	0x00BC, r24
    30a4:	08 95       	ret

000030a6 <_ZN3I2C9twi_writeEh>:
	TWCR = (1<<TWINT) | (1<<TWEN);
	TWCR &= ~(1<<TWEA);
}

void I2C::twi_write(uint8_t data){
	while(!(TWCR & (1<<TWINT)));
    30a6:	ec eb       	ldi	r30, 0xBC	; 188
    30a8:	f0 e0       	ldi	r31, 0x00	; 0
    30aa:	80 81       	ld	r24, Z
    30ac:	88 23       	and	r24, r24
    30ae:	ec f7       	brge	.-6      	; 0x30aa <_ZN3I2C9twi_writeEh+0x4>
	TWDR = data;
    30b0:	60 93 bb 00 	sts	0x00BB, r22
	TWCR = (1<<TWINT) | (1<<TWEN);
    30b4:	84 e8       	ldi	r24, 0x84	; 132
    30b6:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));
    30ba:	ec eb       	ldi	r30, 0xBC	; 188
    30bc:	f0 e0       	ldi	r31, 0x00	; 0
    30be:	80 81       	ld	r24, Z
    30c0:	88 23       	and	r24, r24
    30c2:	ec f7       	brge	.-6      	; 0x30be <_ZN3I2C9twi_writeEh+0x18>
}
    30c4:	08 95       	ret

000030c6 <_ZN3I2C8twi_readEh>:

uint8_t I2C::twi_read(uint8_t ack){
	if (ack)
    30c6:	66 23       	and	r22, r22
    30c8:	21 f0       	breq	.+8      	; 0x30d2 <_ZN3I2C8twi_readEh+0xc>
	{
		TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    30ca:	84 ec       	ldi	r24, 0xC4	; 196
    30cc:	80 93 bc 00 	sts	0x00BC, r24
    30d0:	03 c0       	rjmp	.+6      	; 0x30d8 <_ZN3I2C8twi_readEh+0x12>
	}
	else{
		TWCR = (1<<TWINT) | (1<<TWEN);
    30d2:	84 e8       	ldi	r24, 0x84	; 132
    30d4:	80 93 bc 00 	sts	0x00BC, r24
	}
	
	while(!(TWCR & (1<<TWINT)));
    30d8:	ec eb       	ldi	r30, 0xBC	; 188
    30da:	f0 e0       	ldi	r31, 0x00	; 0
    30dc:	80 81       	ld	r24, Z
    30de:	88 23       	and	r24, r24
    30e0:	ec f7       	brge	.-6      	; 0x30dc <_ZN3I2C8twi_readEh+0x16>
	return TWDR;
    30e2:	80 91 bb 00 	lds	r24, 0x00BB
    30e6:	08 95       	ret

000030e8 <_ZN9InterfaceC1Ev>:


#include "Interface.h"

// default constructor
Interface::Interface()
    30e8:	08 95       	ret

000030ea <_ZN9InterfaceD1Ev>:
{
} //Interface

// default destructor
Interface::~Interface()
    30ea:	08 95       	ret

000030ec <_ZN9Interface8debounceEPVhh>:
{
} //~Interface

uint8_t Interface::debounce(volatile uint8_t *port, uint8_t pin)
{
	if ( (*port & (1 << pin)) )
    30ec:	fb 01       	movw	r30, r22
    30ee:	80 81       	ld	r24, Z
    30f0:	90 e0       	ldi	r25, 0x00	; 0
    30f2:	04 2e       	mov	r0, r20
    30f4:	02 c0       	rjmp	.+4      	; 0x30fa <_ZN9Interface8debounceEPVhh+0xe>
    30f6:	95 95       	asr	r25
    30f8:	87 95       	ror	r24
    30fa:	0a 94       	dec	r0
    30fc:	e2 f7       	brpl	.-8      	; 0x30f6 <_ZN9Interface8debounceEPVhh+0xa>
    30fe:	80 ff       	sbrs	r24, 0
    3100:	17 c0       	rjmp	.+46     	; 0x3130 <_ZN9Interface8debounceEPVhh+0x44>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3102:	8f ec       	ldi	r24, 0xCF	; 207
    3104:	97 e0       	ldi	r25, 0x07	; 7
    3106:	01 97       	sbiw	r24, 0x01	; 1
    3108:	f1 f7       	brne	.-4      	; 0x3106 <_ZN9Interface8debounceEPVhh+0x1a>
    310a:	00 c0       	rjmp	.+0      	; 0x310c <_ZN9Interface8debounceEPVhh+0x20>
    310c:	00 00       	nop
	{
		/* Pin wurde auf Masse gezogen, 100ms warten   */
		_delay_ms(1);
		if ( !(*port & (1 << pin)) )
    310e:	fb 01       	movw	r30, r22
    3110:	80 81       	ld	r24, Z
    3112:	90 e0       	ldi	r25, 0x00	; 0
    3114:	9c 01       	movw	r18, r24
    3116:	02 c0       	rjmp	.+4      	; 0x311c <_ZN9Interface8debounceEPVhh+0x30>
    3118:	35 95       	asr	r19
    311a:	27 95       	ror	r18
    311c:	4a 95       	dec	r20
    311e:	e2 f7       	brpl	.-8      	; 0x3118 <_ZN9Interface8debounceEPVhh+0x2c>
    3120:	20 fd       	sbrc	r18, 0
    3122:	08 c0       	rjmp	.+16     	; 0x3134 <_ZN9Interface8debounceEPVhh+0x48>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3124:	3a e1       	ldi	r19, 0x1A	; 26
    3126:	3a 95       	dec	r19
    3128:	f1 f7       	brne	.-4      	; 0x3126 <_ZN9Interface8debounceEPVhh+0x3a>
    312a:	00 c0       	rjmp	.+0      	; 0x312c <_ZN9Interface8debounceEPVhh+0x40>
		{
			/* Anwender Zeit zum Loslassen des Tasters geben */
			_delay_us(10);
			return 1;
    312c:	81 e0       	ldi	r24, 0x01	; 1
    312e:	08 95       	ret
		}
	}
	return 0;
    3130:	80 e0       	ldi	r24, 0x00	; 0
    3132:	08 95       	ret
    3134:	80 e0       	ldi	r24, 0x00	; 0
}
    3136:	08 95       	ret

00003138 <_ZN9Interface6TasterEv>:
		break;
	}
	return abfrage;
}

uint8_t Interface::Taster(){
    3138:	1f 93       	push	r17
    313a:	cf 93       	push	r28
    313c:	df 93       	push	r29
    313e:	ec 01       	movw	r28, r24
	uint8_t taste = 'A';
	
	//erste Zeile
	PORTD |= (1<<PORTD3);
    3140:	5b 9a       	sbi	0x0b, 3	; 11
    3142:	82 e0       	ldi	r24, 0x02	; 2
    3144:	8a 95       	dec	r24
    3146:	f1 f7       	brne	.-4      	; 0x3144 <_ZN9Interface6TasterEv+0xc>
    3148:	00 c0       	rjmp	.+0      	; 0x314a <_ZN9Interface6TasterEv+0x12>
	_delay_us(1);
	if(debounce(&PIND,PIND4)){
    314a:	44 e0       	ldi	r20, 0x04	; 4
    314c:	69 e2       	ldi	r22, 0x29	; 41
    314e:	70 e0       	ldi	r23, 0x00	; 0
    3150:	ce 01       	movw	r24, r28
    3152:	0e 94 76 18 	call	0x30ec	; 0x30ec <_ZN9Interface8debounceEPVhh>
    3156:	81 11       	cpse	r24, r1
    3158:	12 c0       	rjmp	.+36     	; 0x317e <_ZN9Interface6TasterEv+0x46>
		taste = '3';
	}
	else if (debounce(&PIND,PIND5))
    315a:	45 e0       	ldi	r20, 0x05	; 5
    315c:	69 e2       	ldi	r22, 0x29	; 41
    315e:	70 e0       	ldi	r23, 0x00	; 0
    3160:	ce 01       	movw	r24, r28
    3162:	0e 94 76 18 	call	0x30ec	; 0x30ec <_ZN9Interface8debounceEPVhh>
    3166:	81 11       	cpse	r24, r1
    3168:	0c c0       	rjmp	.+24     	; 0x3182 <_ZN9Interface6TasterEv+0x4a>
	{
		taste = '2';
	}
	else if (debounce(&PIND,PIND6))
    316a:	46 e0       	ldi	r20, 0x06	; 6
    316c:	69 e2       	ldi	r22, 0x29	; 41
    316e:	70 e0       	ldi	r23, 0x00	; 0
    3170:	ce 01       	movw	r24, r28
    3172:	0e 94 76 18 	call	0x30ec	; 0x30ec <_ZN9Interface8debounceEPVhh>
    3176:	81 11       	cpse	r24, r1
    3178:	06 c0       	rjmp	.+12     	; 0x3186 <_ZN9Interface6TasterEv+0x4e>
	}
	return abfrage;
}

uint8_t Interface::Taster(){
	uint8_t taste = 'A';
    317a:	11 e4       	ldi	r17, 0x41	; 65
    317c:	05 c0       	rjmp	.+10     	; 0x3188 <_ZN9Interface6TasterEv+0x50>
	
	//erste Zeile
	PORTD |= (1<<PORTD3);
	_delay_us(1);
	if(debounce(&PIND,PIND4)){
		taste = '3';
    317e:	13 e3       	ldi	r17, 0x33	; 51
    3180:	03 c0       	rjmp	.+6      	; 0x3188 <_ZN9Interface6TasterEv+0x50>
	}
	else if (debounce(&PIND,PIND5))
	{
		taste = '2';
    3182:	12 e3       	ldi	r17, 0x32	; 50
    3184:	01 c0       	rjmp	.+2      	; 0x3188 <_ZN9Interface6TasterEv+0x50>
	}
	else if (debounce(&PIND,PIND6))
	{
		taste = '1';
    3186:	11 e3       	ldi	r17, 0x31	; 49
	}
	PORTD &= ~(1<<PORTD3);
    3188:	5b 98       	cbi	0x0b, 3	; 11
	
	//zweite Zeile
	PORTD |= (1<<PORTD2);
    318a:	5a 9a       	sbi	0x0b, 2	; 11
    318c:	82 e0       	ldi	r24, 0x02	; 2
    318e:	8a 95       	dec	r24
    3190:	f1 f7       	brne	.-4      	; 0x318e <_ZN9Interface6TasterEv+0x56>
    3192:	00 c0       	rjmp	.+0      	; 0x3194 <_ZN9Interface6TasterEv+0x5c>
	_delay_us(1);
	if(debounce(&PIND,PIND4)){
    3194:	44 e0       	ldi	r20, 0x04	; 4
    3196:	69 e2       	ldi	r22, 0x29	; 41
    3198:	70 e0       	ldi	r23, 0x00	; 0
    319a:	ce 01       	movw	r24, r28
    319c:	0e 94 76 18 	call	0x30ec	; 0x30ec <_ZN9Interface8debounceEPVhh>
    31a0:	81 11       	cpse	r24, r1
    31a2:	11 c0       	rjmp	.+34     	; 0x31c6 <_ZN9Interface6TasterEv+0x8e>
		taste = '6';
	}
	else if (debounce(&PIND,PIND5))
    31a4:	45 e0       	ldi	r20, 0x05	; 5
    31a6:	69 e2       	ldi	r22, 0x29	; 41
    31a8:	70 e0       	ldi	r23, 0x00	; 0
    31aa:	ce 01       	movw	r24, r28
    31ac:	0e 94 76 18 	call	0x30ec	; 0x30ec <_ZN9Interface8debounceEPVhh>
    31b0:	81 11       	cpse	r24, r1
    31b2:	0b c0       	rjmp	.+22     	; 0x31ca <_ZN9Interface6TasterEv+0x92>
	{
		taste = '5';
	}
	else if (debounce(&PIND,PIND6))
    31b4:	46 e0       	ldi	r20, 0x06	; 6
    31b6:	69 e2       	ldi	r22, 0x29	; 41
    31b8:	70 e0       	ldi	r23, 0x00	; 0
    31ba:	ce 01       	movw	r24, r28
    31bc:	0e 94 76 18 	call	0x30ec	; 0x30ec <_ZN9Interface8debounceEPVhh>
    31c0:	81 11       	cpse	r24, r1
    31c2:	05 c0       	rjmp	.+10     	; 0x31ce <_ZN9Interface6TasterEv+0x96>
    31c4:	05 c0       	rjmp	.+10     	; 0x31d0 <_ZN9Interface6TasterEv+0x98>
	
	//zweite Zeile
	PORTD |= (1<<PORTD2);
	_delay_us(1);
	if(debounce(&PIND,PIND4)){
		taste = '6';
    31c6:	16 e3       	ldi	r17, 0x36	; 54
    31c8:	03 c0       	rjmp	.+6      	; 0x31d0 <_ZN9Interface6TasterEv+0x98>
	}
	else if (debounce(&PIND,PIND5))
	{
		taste = '5';
    31ca:	15 e3       	ldi	r17, 0x35	; 53
    31cc:	01 c0       	rjmp	.+2      	; 0x31d0 <_ZN9Interface6TasterEv+0x98>
	}
	else if (debounce(&PIND,PIND6))
	{
		taste = '4';
    31ce:	14 e3       	ldi	r17, 0x34	; 52
	}
	PORTD &= ~(1<<PORTD2);
    31d0:	5a 98       	cbi	0x0b, 2	; 11
	
	//dritte Zeile
	PORTD |= (1<<PORTD1);
    31d2:	59 9a       	sbi	0x0b, 1	; 11
    31d4:	82 e0       	ldi	r24, 0x02	; 2
    31d6:	8a 95       	dec	r24
    31d8:	f1 f7       	brne	.-4      	; 0x31d6 <_ZN9Interface6TasterEv+0x9e>
    31da:	00 c0       	rjmp	.+0      	; 0x31dc <_ZN9Interface6TasterEv+0xa4>
	_delay_us(1);
	if(debounce(&PIND,PIND4)){
    31dc:	44 e0       	ldi	r20, 0x04	; 4
    31de:	69 e2       	ldi	r22, 0x29	; 41
    31e0:	70 e0       	ldi	r23, 0x00	; 0
    31e2:	ce 01       	movw	r24, r28
    31e4:	0e 94 76 18 	call	0x30ec	; 0x30ec <_ZN9Interface8debounceEPVhh>
    31e8:	81 11       	cpse	r24, r1
    31ea:	11 c0       	rjmp	.+34     	; 0x320e <_ZN9Interface6TasterEv+0xd6>
		taste = '9';
	}
	else if (debounce(&PIND,PIND5))
    31ec:	45 e0       	ldi	r20, 0x05	; 5
    31ee:	69 e2       	ldi	r22, 0x29	; 41
    31f0:	70 e0       	ldi	r23, 0x00	; 0
    31f2:	ce 01       	movw	r24, r28
    31f4:	0e 94 76 18 	call	0x30ec	; 0x30ec <_ZN9Interface8debounceEPVhh>
    31f8:	81 11       	cpse	r24, r1
    31fa:	0b c0       	rjmp	.+22     	; 0x3212 <_ZN9Interface6TasterEv+0xda>
	{
		taste = '8';
	}
	else if (debounce(&PIND,PIND6))
    31fc:	46 e0       	ldi	r20, 0x06	; 6
    31fe:	69 e2       	ldi	r22, 0x29	; 41
    3200:	70 e0       	ldi	r23, 0x00	; 0
    3202:	ce 01       	movw	r24, r28
    3204:	0e 94 76 18 	call	0x30ec	; 0x30ec <_ZN9Interface8debounceEPVhh>
    3208:	81 11       	cpse	r24, r1
    320a:	05 c0       	rjmp	.+10     	; 0x3216 <_ZN9Interface6TasterEv+0xde>
    320c:	05 c0       	rjmp	.+10     	; 0x3218 <_ZN9Interface6TasterEv+0xe0>
	
	//dritte Zeile
	PORTD |= (1<<PORTD1);
	_delay_us(1);
	if(debounce(&PIND,PIND4)){
		taste = '9';
    320e:	19 e3       	ldi	r17, 0x39	; 57
    3210:	03 c0       	rjmp	.+6      	; 0x3218 <_ZN9Interface6TasterEv+0xe0>
	}
	else if (debounce(&PIND,PIND5))
	{
		taste = '8';
    3212:	18 e3       	ldi	r17, 0x38	; 56
    3214:	01 c0       	rjmp	.+2      	; 0x3218 <_ZN9Interface6TasterEv+0xe0>
	}
	else if (debounce(&PIND,PIND6))
	{
		taste = '7';
    3216:	17 e3       	ldi	r17, 0x37	; 55
	}
	PORTD &= ~(1<<PORT1);
    3218:	59 98       	cbi	0x0b, 1	; 11
	
	//vierte Zeile
	PORTD |= (1<<PORTD0);
    321a:	58 9a       	sbi	0x0b, 0	; 11
    321c:	82 e0       	ldi	r24, 0x02	; 2
    321e:	8a 95       	dec	r24
    3220:	f1 f7       	brne	.-4      	; 0x321e <_ZN9Interface6TasterEv+0xe6>
    3222:	00 c0       	rjmp	.+0      	; 0x3224 <_ZN9Interface6TasterEv+0xec>
	_delay_us(1);
	if(debounce(&PIND,PIND4)){
    3224:	44 e0       	ldi	r20, 0x04	; 4
    3226:	69 e2       	ldi	r22, 0x29	; 41
    3228:	70 e0       	ldi	r23, 0x00	; 0
    322a:	ce 01       	movw	r24, r28
    322c:	0e 94 76 18 	call	0x30ec	; 0x30ec <_ZN9Interface8debounceEPVhh>
    3230:	81 11       	cpse	r24, r1
    3232:	11 c0       	rjmp	.+34     	; 0x3256 <_ZN9Interface6TasterEv+0x11e>
		taste = '#';
	}
	else if (debounce(&PIND,PIND5))
    3234:	45 e0       	ldi	r20, 0x05	; 5
    3236:	69 e2       	ldi	r22, 0x29	; 41
    3238:	70 e0       	ldi	r23, 0x00	; 0
    323a:	ce 01       	movw	r24, r28
    323c:	0e 94 76 18 	call	0x30ec	; 0x30ec <_ZN9Interface8debounceEPVhh>
    3240:	81 11       	cpse	r24, r1
    3242:	0b c0       	rjmp	.+22     	; 0x325a <_ZN9Interface6TasterEv+0x122>
	{
		taste = '0';
	}
	else if (debounce(&PIND,PIND6))
    3244:	46 e0       	ldi	r20, 0x06	; 6
    3246:	69 e2       	ldi	r22, 0x29	; 41
    3248:	70 e0       	ldi	r23, 0x00	; 0
    324a:	ce 01       	movw	r24, r28
    324c:	0e 94 76 18 	call	0x30ec	; 0x30ec <_ZN9Interface8debounceEPVhh>
    3250:	81 11       	cpse	r24, r1
    3252:	05 c0       	rjmp	.+10     	; 0x325e <_ZN9Interface6TasterEv+0x126>
    3254:	05 c0       	rjmp	.+10     	; 0x3260 <_ZN9Interface6TasterEv+0x128>
	
	//vierte Zeile
	PORTD |= (1<<PORTD0);
	_delay_us(1);
	if(debounce(&PIND,PIND4)){
		taste = '#';
    3256:	13 e2       	ldi	r17, 0x23	; 35
    3258:	03 c0       	rjmp	.+6      	; 0x3260 <_ZN9Interface6TasterEv+0x128>
	}
	else if (debounce(&PIND,PIND5))
	{
		taste = '0';
    325a:	10 e3       	ldi	r17, 0x30	; 48
    325c:	01 c0       	rjmp	.+2      	; 0x3260 <_ZN9Interface6TasterEv+0x128>
	}
	else if (debounce(&PIND,PIND6))
	{
		taste = '*';
    325e:	1a e2       	ldi	r17, 0x2A	; 42
	}
	PORTD &= ~(1<<PORTD0);
    3260:	58 98       	cbi	0x0b, 0	; 11
	
	return taste;
}
    3262:	81 2f       	mov	r24, r17
    3264:	df 91       	pop	r29
    3266:	cf 91       	pop	r28
    3268:	1f 91       	pop	r17
    326a:	08 95       	ret

0000326c <_ZN9Interface17ZahlenausTastaturEv>:

uint8_t Interface::ZahlenausTastatur(){
    326c:	cf 93       	push	r28
    326e:	df 93       	push	r29
    3270:	ec 01       	movw	r28, r24
	while(true){
		uint8_t taste = Taster();
    3272:	ce 01       	movw	r24, r28
    3274:	0e 94 9c 18 	call	0x3138	; 0x3138 <_ZN9Interface6TasterEv>
		if(taste>='0' && taste<='9'){
    3278:	80 53       	subi	r24, 0x30	; 48
    327a:	8a 30       	cpi	r24, 0x0A	; 10
    327c:	d0 f7       	brcc	.-12     	; 0x3272 <_ZN9Interface17ZahlenausTastaturEv+0x6>
			return taste - '0';
		}
	}
}
    327e:	df 91       	pop	r29
    3280:	cf 91       	pop	r28
    3282:	08 95       	ret

00003284 <_ZN7KompassD1Ev>:
		offset[i]=0;
	}
} //Kompass

// default destructor
Kompass::~Kompass()
    3284:	06 96       	adiw	r24, 0x06	; 6
    3286:	0e 94 4a 18 	call	0x3094	; 0x3094 <_ZN3I2CD1Ev>
    328a:	08 95       	ret

0000328c <_ZN7Kompass16HMC5883L_commandEhh>:
{
} //~Kompass

void Kompass::HMC5883L_command(uint8_t adresse, uint8_t command){
    328c:	0f 93       	push	r16
    328e:	1f 93       	push	r17
    3290:	cf 93       	push	r28
    3292:	df 93       	push	r29
    3294:	06 2f       	mov	r16, r22
    3296:	14 2f       	mov	r17, r20
	i2c.twi_start();
    3298:	ec 01       	movw	r28, r24
    329a:	26 96       	adiw	r28, 0x06	; 6
    329c:	ce 01       	movw	r24, r28
    329e:	0e 94 4b 18 	call	0x3096	; 0x3096 <_ZN3I2C9twi_startEv>
	i2c.twi_write(HMCWRITEADRESSE);
    32a2:	6c e3       	ldi	r22, 0x3C	; 60
    32a4:	ce 01       	movw	r24, r28
    32a6:	0e 94 53 18 	call	0x30a6	; 0x30a6 <_ZN3I2C9twi_writeEh>
	i2c.twi_write(adresse);
    32aa:	60 2f       	mov	r22, r16
    32ac:	ce 01       	movw	r24, r28
    32ae:	0e 94 53 18 	call	0x30a6	; 0x30a6 <_ZN3I2C9twi_writeEh>
	i2c.twi_write(command);
    32b2:	61 2f       	mov	r22, r17
    32b4:	ce 01       	movw	r24, r28
    32b6:	0e 94 53 18 	call	0x30a6	; 0x30a6 <_ZN3I2C9twi_writeEh>
	i2c.twi_stop();
    32ba:	ce 01       	movw	r24, r28
    32bc:	0e 94 4f 18 	call	0x309e	; 0x309e <_ZN3I2C8twi_stopEv>
}
    32c0:	df 91       	pop	r29
    32c2:	cf 91       	pop	r28
    32c4:	1f 91       	pop	r17
    32c6:	0f 91       	pop	r16
    32c8:	08 95       	ret

000032ca <_ZN7KompassC1Ev>:


#include "Kompass.h"

// default constructor
Kompass::Kompass()
    32ca:	cf 93       	push	r28
    32cc:	df 93       	push	r29
    32ce:	ec 01       	movw	r28, r24
    32d0:	06 96       	adiw	r24, 0x06	; 6
    32d2:	0e 94 46 18 	call	0x308c	; 0x308c <_ZN3I2CC1Ev>
{
	//Config Register A
	HMC5883L_command(0x00, HMCSAMPLES8+HMCDATARATE15+HMCMEASUREMODENORMAL);
    32d6:	40 e7       	ldi	r20, 0x70	; 112
    32d8:	60 e0       	ldi	r22, 0x00	; 0
    32da:	ce 01       	movw	r24, r28
    32dc:	0e 94 46 19 	call	0x328c	; 0x328c <_ZN7Kompass16HMC5883L_commandEhh>

	//Config Gain
	HMC5883L_command(0x01, HMCGAIN1090);
    32e0:	40 e2       	ldi	r20, 0x20	; 32
    32e2:	61 e0       	ldi	r22, 0x01	; 1
    32e4:	ce 01       	movw	r24, r28
    32e6:	0e 94 46 19 	call	0x328c	; 0x328c <_ZN7Kompass16HMC5883L_commandEhh>

	//Set Mode auf single
	HMC5883L_command(0x02, HMCSIGLEMODE);
    32ea:	41 e0       	ldi	r20, 0x01	; 1
    32ec:	62 e0       	ldi	r22, 0x02	; 2
    32ee:	ce 01       	movw	r24, r28
    32f0:	0e 94 46 19 	call	0x328c	; 0x328c <_ZN7Kompass16HMC5883L_commandEhh>
	//Variablen
	for(uint8_t i=0;i<3;i++){
		achsen[i]=0;
    32f4:	19 82       	std	Y+1, r1	; 0x01
    32f6:	18 82       	st	Y, r1
		offset[i]=0;
    32f8:	18 86       	std	Y+8, r1	; 0x08
    32fa:	1f 82       	std	Y+7, r1	; 0x07

	//Set Mode auf single
	HMC5883L_command(0x02, HMCSIGLEMODE);
	//Variablen
	for(uint8_t i=0;i<3;i++){
		achsen[i]=0;
    32fc:	1b 82       	std	Y+3, r1	; 0x03
    32fe:	1a 82       	std	Y+2, r1	; 0x02
		offset[i]=0;
    3300:	1a 86       	std	Y+10, r1	; 0x0a
    3302:	19 86       	std	Y+9, r1	; 0x09

	//Set Mode auf single
	HMC5883L_command(0x02, HMCSIGLEMODE);
	//Variablen
	for(uint8_t i=0;i<3;i++){
		achsen[i]=0;
    3304:	1d 82       	std	Y+5, r1	; 0x05
    3306:	1c 82       	std	Y+4, r1	; 0x04
		offset[i]=0;
    3308:	1c 86       	std	Y+12, r1	; 0x0c
    330a:	1b 86       	std	Y+11, r1	; 0x0b
	}
} //Kompass
    330c:	df 91       	pop	r29
    330e:	cf 91       	pop	r28
    3310:	08 95       	ret

00003312 <_ZN7Kompass20HMC5883L_readHeadingEv>:
		achsen[i]=0;
		offset[i]=0;
	}
}

uint8_t Kompass::HMC5883L_readHeading(){
    3312:	bf 92       	push	r11
    3314:	cf 92       	push	r12
    3316:	df 92       	push	r13
    3318:	ef 92       	push	r14
    331a:	ff 92       	push	r15
    331c:	0f 93       	push	r16
    331e:	1f 93       	push	r17
    3320:	cf 93       	push	r28
    3322:	df 93       	push	r29
    3324:	00 d0       	rcall	.+0      	; 0x3326 <_ZN7Kompass20HMC5883L_readHeadingEv+0x14>
    3326:	00 d0       	rcall	.+0      	; 0x3328 <_ZN7Kompass20HMC5883L_readHeadingEv+0x16>
    3328:	00 d0       	rcall	.+0      	; 0x332a <_ZN7Kompass20HMC5883L_readHeadingEv+0x18>
    332a:	cd b7       	in	r28, 0x3d	; 61
    332c:	de b7       	in	r29, 0x3e	; 62
    332e:	6c 01       	movw	r12, r24
	cli();
    3330:	f8 94       	cli
	uint8_t heading[6];
	i2c.twi_start();
    3332:	7c 01       	movw	r14, r24
    3334:	26 e0       	ldi	r18, 0x06	; 6
    3336:	e2 0e       	add	r14, r18
    3338:	f1 1c       	adc	r15, r1
    333a:	c7 01       	movw	r24, r14
    333c:	0e 94 4b 18 	call	0x3096	; 0x3096 <_ZN3I2C9twi_startEv>
	i2c.twi_write(HMCWRITEADRESSE);
    3340:	6c e3       	ldi	r22, 0x3C	; 60
    3342:	c7 01       	movw	r24, r14
    3344:	0e 94 53 18 	call	0x30a6	; 0x30a6 <_ZN3I2C9twi_writeEh>
	i2c.twi_write(0x03);
    3348:	63 e0       	ldi	r22, 0x03	; 3
    334a:	c7 01       	movw	r24, r14
    334c:	0e 94 53 18 	call	0x30a6	; 0x30a6 <_ZN3I2C9twi_writeEh>
	i2c.twi_start();
    3350:	c7 01       	movw	r24, r14
    3352:	0e 94 4b 18 	call	0x3096	; 0x3096 <_ZN3I2C9twi_startEv>
	i2c.twi_write(HMCREADADRESSE);
    3356:	6d e3       	ldi	r22, 0x3D	; 61
    3358:	c7 01       	movw	r24, r14
    335a:	0e 94 53 18 	call	0x30a6	; 0x30a6 <_ZN3I2C9twi_writeEh>
    335e:	8e 01       	movw	r16, r28
    3360:	0f 5f       	subi	r16, 0xFF	; 255
    3362:	1f 4f       	sbci	r17, 0xFF	; 255
	
	for(uint8_t i=0; i<6;i++){
    3364:	b1 2c       	mov	r11, r1
		if (i<5)
    3366:	84 e0       	ldi	r24, 0x04	; 4
    3368:	8b 15       	cp	r24, r11
    336a:	38 f0       	brcs	.+14     	; 0x337a <_ZN7Kompass20HMC5883L_readHeadingEv+0x68>
		{
			heading[i]=i2c.twi_read(1);
    336c:	61 e0       	ldi	r22, 0x01	; 1
    336e:	c7 01       	movw	r24, r14
    3370:	0e 94 63 18 	call	0x30c6	; 0x30c6 <_ZN3I2C8twi_readEh>
    3374:	f8 01       	movw	r30, r16
    3376:	80 83       	st	Z, r24
    3378:	06 c0       	rjmp	.+12     	; 0x3386 <_ZN7Kompass20HMC5883L_readHeadingEv+0x74>
		}
		else
		{
			heading[i]=i2c.twi_read(0);
    337a:	60 e0       	ldi	r22, 0x00	; 0
    337c:	c7 01       	movw	r24, r14
    337e:	0e 94 63 18 	call	0x30c6	; 0x30c6 <_ZN3I2C8twi_readEh>
    3382:	f8 01       	movw	r30, r16
    3384:	80 83       	st	Z, r24
	i2c.twi_write(HMCWRITEADRESSE);
	i2c.twi_write(0x03);
	i2c.twi_start();
	i2c.twi_write(HMCREADADRESSE);
	
	for(uint8_t i=0; i<6;i++){
    3386:	b3 94       	inc	r11
    3388:	0f 5f       	subi	r16, 0xFF	; 255
    338a:	1f 4f       	sbci	r17, 0xFF	; 255
    338c:	f6 e0       	ldi	r31, 0x06	; 6
    338e:	bf 12       	cpse	r11, r31
    3390:	ea cf       	rjmp	.-44     	; 0x3366 <_ZN7Kompass20HMC5883L_readHeadingEv+0x54>
		{
			heading[i]=i2c.twi_read(0);
		}
		
	}
	i2c.twi_stop();
    3392:	c7 01       	movw	r24, r14
    3394:	0e 94 4f 18 	call	0x309e	; 0x309e <_ZN3I2C8twi_stopEv>
	achsen[0] =(int16_t) (heading[1] | (heading[0] << 8));
    3398:	89 81       	ldd	r24, Y+1	; 0x01
    339a:	90 e0       	ldi	r25, 0x00	; 0
    339c:	98 2f       	mov	r25, r24
    339e:	88 27       	eor	r24, r24
    33a0:	2a 81       	ldd	r18, Y+2	; 0x02
    33a2:	82 2b       	or	r24, r18
    33a4:	f6 01       	movw	r30, r12
    33a6:	91 83       	std	Z+1, r25	; 0x01
    33a8:	80 83       	st	Z, r24
	achsen[2] =(int16_t) (heading[3] | (heading[2] << 8));
    33aa:	8b 81       	ldd	r24, Y+3	; 0x03
    33ac:	90 e0       	ldi	r25, 0x00	; 0
    33ae:	98 2f       	mov	r25, r24
    33b0:	88 27       	eor	r24, r24
    33b2:	2c 81       	ldd	r18, Y+4	; 0x04
    33b4:	82 2b       	or	r24, r18
    33b6:	95 83       	std	Z+5, r25	; 0x05
    33b8:	84 83       	std	Z+4, r24	; 0x04
	achsen[1] =(int16_t) (heading[5] | (heading[4] << 8));
    33ba:	8d 81       	ldd	r24, Y+5	; 0x05
    33bc:	90 e0       	ldi	r25, 0x00	; 0
    33be:	98 2f       	mov	r25, r24
    33c0:	88 27       	eor	r24, r24
    33c2:	2e 81       	ldd	r18, Y+6	; 0x06
    33c4:	82 2b       	or	r24, r18
    33c6:	93 83       	std	Z+3, r25	; 0x03
    33c8:	82 83       	std	Z+2, r24	; 0x02
	sei();
    33ca:	78 94       	sei
	if (achsen[0]==-4096 || achsen[1]==-4096 || achsen[2]==-4096)
    33cc:	f6 01       	movw	r30, r12
    33ce:	80 81       	ld	r24, Z
    33d0:	91 81       	ldd	r25, Z+1	; 0x01
    33d2:	81 15       	cp	r24, r1
    33d4:	90 4f       	sbci	r25, 0xF0	; 240
    33d6:	09 f4       	brne	.+2      	; 0x33da <_ZN7Kompass20HMC5883L_readHeadingEv+0xc8>
    33d8:	47 c0       	rjmp	.+142    	; 0x3468 <_ZN7Kompass20HMC5883L_readHeadingEv+0x156>
    33da:	f6 01       	movw	r30, r12
    33dc:	82 81       	ldd	r24, Z+2	; 0x02
    33de:	93 81       	ldd	r25, Z+3	; 0x03
    33e0:	81 15       	cp	r24, r1
    33e2:	90 4f       	sbci	r25, 0xF0	; 240
    33e4:	09 f4       	brne	.+2      	; 0x33e8 <_ZN7Kompass20HMC5883L_readHeadingEv+0xd6>
    33e6:	42 c0       	rjmp	.+132    	; 0x346c <_ZN7Kompass20HMC5883L_readHeadingEv+0x15a>
    33e8:	f6 01       	movw	r30, r12
    33ea:	84 81       	ldd	r24, Z+4	; 0x04
    33ec:	95 81       	ldd	r25, Z+5	; 0x05
    33ee:	81 15       	cp	r24, r1
    33f0:	90 4f       	sbci	r25, 0xF0	; 240
    33f2:	f1 f1       	breq	.+124    	; 0x3470 <_ZN7Kompass20HMC5883L_readHeadingEv+0x15e>
    33f4:	f6 01       	movw	r30, r12
    33f6:	83 e0       	ldi	r24, 0x03	; 3
    33f8:	df 01       	movw	r26, r30
	}
	//Kallibrierung durchfuehren, jedes mal, wenn eine abfrage stattfindet
	//somit passive kalibrierung
	else{
		for(uint8_t i=0;i<3;i++){
			if(achsen[i]>max[i]){
    33fa:	20 81       	ld	r18, Z
    33fc:	31 81       	ldd	r19, Z+1	; 0x01
    33fe:	45 85       	ldd	r20, Z+13	; 0x0d
    3400:	56 85       	ldd	r21, Z+14	; 0x0e
    3402:	42 17       	cp	r20, r18
    3404:	53 07       	cpc	r21, r19
    3406:	8c f4       	brge	.+34     	; 0x342a <_ZN7Kompass20HMC5883L_readHeadingEv+0x118>
				max[i]=achsen[i];
    3408:	36 87       	std	Z+14, r19	; 0x0e
    340a:	25 87       	std	Z+13, r18	; 0x0d
				offset[i]=(max[i]+min[i])/2;
    340c:	43 89       	ldd	r20, Z+19	; 0x13
    340e:	54 89       	ldd	r21, Z+20	; 0x14
    3410:	24 0f       	add	r18, r20
    3412:	35 1f       	adc	r19, r21
    3414:	33 23       	and	r19, r19
    3416:	14 f4       	brge	.+4      	; 0x341c <_ZN7Kompass20HMC5883L_readHeadingEv+0x10a>
    3418:	2f 5f       	subi	r18, 0xFF	; 255
    341a:	3f 4f       	sbci	r19, 0xFF	; 255
    341c:	35 95       	asr	r19
    341e:	27 95       	ror	r18
    3420:	18 96       	adiw	r26, 0x08	; 8
    3422:	3c 93       	st	X, r19
    3424:	2e 93       	st	-X, r18
    3426:	17 97       	sbiw	r26, 0x07	; 7
    3428:	1a c0       	rjmp	.+52     	; 0x345e <_ZN7Kompass20HMC5883L_readHeadingEv+0x14c>
			}
			else if(achsen[i]<min[i]){
    342a:	63 89       	ldd	r22, Z+19	; 0x13
    342c:	74 89       	ldd	r23, Z+20	; 0x14
    342e:	26 17       	cp	r18, r22
    3430:	37 07       	cpc	r19, r23
    3432:	7c f4       	brge	.+30     	; 0x3452 <_ZN7Kompass20HMC5883L_readHeadingEv+0x140>
				min[i]=achsen[i];
    3434:	34 8b       	std	Z+20, r19	; 0x14
    3436:	23 8b       	std	Z+19, r18	; 0x13
				offset[i]=(max[i]+min[i])/2;
    3438:	24 0f       	add	r18, r20
    343a:	35 1f       	adc	r19, r21
    343c:	33 23       	and	r19, r19
    343e:	14 f4       	brge	.+4      	; 0x3444 <_ZN7Kompass20HMC5883L_readHeadingEv+0x132>
    3440:	2f 5f       	subi	r18, 0xFF	; 255
    3442:	3f 4f       	sbci	r19, 0xFF	; 255
    3444:	35 95       	asr	r19
    3446:	27 95       	ror	r18
    3448:	18 96       	adiw	r26, 0x08	; 8
    344a:	3c 93       	st	X, r19
    344c:	2e 93       	st	-X, r18
    344e:	17 97       	sbiw	r26, 0x07	; 7
    3450:	06 c0       	rjmp	.+12     	; 0x345e <_ZN7Kompass20HMC5883L_readHeadingEv+0x14c>
			}
			else {
				achsen[i]-=offset[i];
    3452:	47 81       	ldd	r20, Z+7	; 0x07
    3454:	50 85       	ldd	r21, Z+8	; 0x08
    3456:	24 1b       	sub	r18, r20
    3458:	35 0b       	sbc	r19, r21
    345a:	31 83       	std	Z+1, r19	; 0x01
    345c:	20 83       	st	Z, r18
    345e:	81 50       	subi	r24, 0x01	; 1
    3460:	32 96       	adiw	r30, 0x02	; 2
		return 1;
	}
	//Kallibrierung durchfuehren, jedes mal, wenn eine abfrage stattfindet
	//somit passive kalibrierung
	else{
		for(uint8_t i=0;i<3;i++){
    3462:	81 11       	cpse	r24, r1
    3464:	c9 cf       	rjmp	.-110    	; 0x33f8 <_ZN7Kompass20HMC5883L_readHeadingEv+0xe6>
    3466:	05 c0       	rjmp	.+10     	; 0x3472 <_ZN7Kompass20HMC5883L_readHeadingEv+0x160>
	achsen[2] =(int16_t) (heading[3] | (heading[2] << 8));
	achsen[1] =(int16_t) (heading[5] | (heading[4] << 8));
	sei();
	if (achsen[0]==-4096 || achsen[1]==-4096 || achsen[2]==-4096)
	{
		return 1;
    3468:	81 e0       	ldi	r24, 0x01	; 1
    346a:	03 c0       	rjmp	.+6      	; 0x3472 <_ZN7Kompass20HMC5883L_readHeadingEv+0x160>
    346c:	81 e0       	ldi	r24, 0x01	; 1
    346e:	01 c0       	rjmp	.+2      	; 0x3472 <_ZN7Kompass20HMC5883L_readHeadingEv+0x160>
    3470:	81 e0       	ldi	r24, 0x01	; 1
			}
		}
	}
	
	return 0;
}
    3472:	26 96       	adiw	r28, 0x06	; 6
    3474:	0f b6       	in	r0, 0x3f	; 63
    3476:	f8 94       	cli
    3478:	de bf       	out	0x3e, r29	; 62
    347a:	0f be       	out	0x3f, r0	; 63
    347c:	cd bf       	out	0x3d, r28	; 61
    347e:	df 91       	pop	r29
    3480:	cf 91       	pop	r28
    3482:	1f 91       	pop	r17
    3484:	0f 91       	pop	r16
    3486:	ff 90       	pop	r15
    3488:	ef 90       	pop	r14
    348a:	df 90       	pop	r13
    348c:	cf 90       	pop	r12
    348e:	bf 90       	pop	r11
    3490:	08 95       	ret

00003492 <_ZN7Kompass5angleEv>:

double Kompass::angle(){
    3492:	cf 92       	push	r12
    3494:	df 92       	push	r13
    3496:	ef 92       	push	r14
    3498:	ff 92       	push	r15
    349a:	cf 93       	push	r28
    349c:	df 93       	push	r29
    349e:	ec 01       	movw	r28, r24
	double angle=0;
	if (HMC5883L_readHeading())
    34a0:	0e 94 89 19 	call	0x3312	; 0x3312 <_ZN7Kompass20HMC5883L_readHeadingEv>
    34a4:	81 11       	cpse	r24, r1
    34a6:	57 c0       	rjmp	.+174    	; 0x3556 <_ZN7Kompass5angleEv+0xc4>
	{
		angle=-1.0;
	}
	else{
		angle=atan2f(achsen[0],achsen[2])*180.0/M_PI+180.0;
    34a8:	6c 81       	ldd	r22, Y+4	; 0x04
    34aa:	7d 81       	ldd	r23, Y+5	; 0x05
    34ac:	88 27       	eor	r24, r24
    34ae:	77 fd       	sbrc	r23, 7
    34b0:	80 95       	com	r24
    34b2:	98 2f       	mov	r25, r24
    34b4:	0e 94 fc 1c 	call	0x39f8	; 0x39f8 <__floatsisf>
    34b8:	6b 01       	movw	r12, r22
    34ba:	7c 01       	movw	r14, r24
    34bc:	68 81       	ld	r22, Y
    34be:	79 81       	ldd	r23, Y+1	; 0x01
    34c0:	88 27       	eor	r24, r24
    34c2:	77 fd       	sbrc	r23, 7
    34c4:	80 95       	com	r24
    34c6:	98 2f       	mov	r25, r24
    34c8:	0e 94 fc 1c 	call	0x39f8	; 0x39f8 <__floatsisf>
    34cc:	a7 01       	movw	r20, r14
    34ce:	96 01       	movw	r18, r12
    34d0:	0e 94 07 1c 	call	0x380e	; 0x380e <atan2>
    34d4:	20 e0       	ldi	r18, 0x00	; 0
    34d6:	30 e0       	ldi	r19, 0x00	; 0
    34d8:	44 e3       	ldi	r20, 0x34	; 52
    34da:	53 e4       	ldi	r21, 0x43	; 67
    34dc:	0e 94 15 1e 	call	0x3c2a	; 0x3c2a <__mulsf3>
    34e0:	2b ed       	ldi	r18, 0xDB	; 219
    34e2:	3f e0       	ldi	r19, 0x0F	; 15
    34e4:	49 e4       	ldi	r20, 0x49	; 73
    34e6:	50 e4       	ldi	r21, 0x40	; 64
    34e8:	0e 94 61 1c 	call	0x38c2	; 0x38c2 <__divsf3>
    34ec:	20 e0       	ldi	r18, 0x00	; 0
    34ee:	30 e0       	ldi	r19, 0x00	; 0
    34f0:	44 e3       	ldi	r20, 0x34	; 52
    34f2:	53 e4       	ldi	r21, 0x43	; 67
    34f4:	0e 94 94 1b 	call	0x3728	; 0x3728 <__addsf3>
		//deklination
		angle+=2.35;
    34f8:	26 e6       	ldi	r18, 0x66	; 102
    34fa:	36 e6       	ldi	r19, 0x66	; 102
    34fc:	46 e1       	ldi	r20, 0x16	; 22
    34fe:	50 e4       	ldi	r21, 0x40	; 64
    3500:	0e 94 94 1b 	call	0x3728	; 0x3728 <__addsf3>
    3504:	6b 01       	movw	r12, r22
    3506:	7c 01       	movw	r14, r24
		//Normierung auf %360
		if (angle>=360)
    3508:	20 e0       	ldi	r18, 0x00	; 0
    350a:	30 e0       	ldi	r19, 0x00	; 0
    350c:	44 eb       	ldi	r20, 0xB4	; 180
    350e:	53 e4       	ldi	r21, 0x43	; 67
    3510:	0e 94 0a 1e 	call	0x3c14	; 0x3c14 <__gesf2>
    3514:	88 23       	and	r24, r24
    3516:	5c f0       	brlt	.+22     	; 0x352e <_ZN7Kompass5angleEv+0x9c>
		{
			angle-=360;
    3518:	20 e0       	ldi	r18, 0x00	; 0
    351a:	30 e0       	ldi	r19, 0x00	; 0
    351c:	44 eb       	ldi	r20, 0xB4	; 180
    351e:	53 e4       	ldi	r21, 0x43	; 67
    3520:	c7 01       	movw	r24, r14
    3522:	b6 01       	movw	r22, r12
    3524:	0e 94 93 1b 	call	0x3726	; 0x3726 <__subsf3>
    3528:	6b 01       	movw	r12, r22
    352a:	7c 01       	movw	r14, r24
    352c:	1c c0       	rjmp	.+56     	; 0x3566 <_ZN7Kompass5angleEv+0xd4>
		}
		else if (angle < 0)
    352e:	20 e0       	ldi	r18, 0x00	; 0
    3530:	30 e0       	ldi	r19, 0x00	; 0
    3532:	a9 01       	movw	r20, r18
    3534:	c7 01       	movw	r24, r14
    3536:	b6 01       	movw	r22, r12
    3538:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <__cmpsf2>
    353c:	88 23       	and	r24, r24
    353e:	9c f4       	brge	.+38     	; 0x3566 <_ZN7Kompass5angleEv+0xd4>
		{
			angle+=360;
    3540:	20 e0       	ldi	r18, 0x00	; 0
    3542:	30 e0       	ldi	r19, 0x00	; 0
    3544:	44 eb       	ldi	r20, 0xB4	; 180
    3546:	53 e4       	ldi	r21, 0x43	; 67
    3548:	c7 01       	movw	r24, r14
    354a:	b6 01       	movw	r22, r12
    354c:	0e 94 94 1b 	call	0x3728	; 0x3728 <__addsf3>
    3550:	6b 01       	movw	r12, r22
    3552:	7c 01       	movw	r14, r24
    3554:	08 c0       	rjmp	.+16     	; 0x3566 <_ZN7Kompass5angleEv+0xd4>

double Kompass::angle(){
	double angle=0;
	if (HMC5883L_readHeading())
	{
		angle=-1.0;
    3556:	0f 2e       	mov	r0, r31
    3558:	c1 2c       	mov	r12, r1
    355a:	d1 2c       	mov	r13, r1
    355c:	f0 e8       	ldi	r31, 0x80	; 128
    355e:	ef 2e       	mov	r14, r31
    3560:	ff eb       	ldi	r31, 0xBF	; 191
    3562:	ff 2e       	mov	r15, r31
    3564:	f0 2d       	mov	r31, r0
		{
			angle+=360;
		}
	}
	
	HMC5883L_command(0x02,HMCSIGLEMODE);
    3566:	41 e0       	ldi	r20, 0x01	; 1
    3568:	62 e0       	ldi	r22, 0x02	; 2
    356a:	ce 01       	movw	r24, r28
    356c:	0e 94 46 19 	call	0x328c	; 0x328c <_ZN7Kompass16HMC5883L_commandEhh>
	return angle;
}
    3570:	c7 01       	movw	r24, r14
    3572:	b6 01       	movw	r22, r12
    3574:	df 91       	pop	r29
    3576:	cf 91       	pop	r28
    3578:	ff 90       	pop	r15
    357a:	ef 90       	pop	r14
    357c:	df 90       	pop	r13
    357e:	cf 90       	pop	r12
    3580:	08 95       	ret

00003582 <_ZN7Kompass25kallibrierung_ruecksetzenEv>:

void Kompass::kallibrierung_ruecksetzen(){
    3582:	fc 01       	movw	r30, r24
	for (uint8_t i=0;i<3;i++)
	{
		max[i]=0;
    3584:	16 86       	std	Z+14, r1	; 0x0e
    3586:	15 86       	std	Z+13, r1	; 0x0d
		min[i]=0;
    3588:	14 8a       	std	Z+20, r1	; 0x14
    358a:	13 8a       	std	Z+19, r1	; 0x13
		offset[i]=0;
    358c:	10 86       	std	Z+8, r1	; 0x08
    358e:	17 82       	std	Z+7, r1	; 0x07
}

void Kompass::kallibrierung_ruecksetzen(){
	for (uint8_t i=0;i<3;i++)
	{
		max[i]=0;
    3590:	10 8a       	std	Z+16, r1	; 0x10
    3592:	17 86       	std	Z+15, r1	; 0x0f
		min[i]=0;
    3594:	16 8a       	std	Z+22, r1	; 0x16
    3596:	15 8a       	std	Z+21, r1	; 0x15
		offset[i]=0;
    3598:	12 86       	std	Z+10, r1	; 0x0a
    359a:	11 86       	std	Z+9, r1	; 0x09
}

void Kompass::kallibrierung_ruecksetzen(){
	for (uint8_t i=0;i<3;i++)
	{
		max[i]=0;
    359c:	12 8a       	std	Z+18, r1	; 0x12
    359e:	11 8a       	std	Z+17, r1	; 0x11
		min[i]=0;
    35a0:	10 8e       	std	Z+24, r1	; 0x18
    35a2:	17 8a       	std	Z+23, r1	; 0x17
		offset[i]=0;
    35a4:	14 86       	std	Z+12, r1	; 0x0c
    35a6:	13 86       	std	Z+11, r1	; 0x0b
    35a8:	08 95       	ret

000035aa <_ZN3RTCC1Ev>:


#include "RTC.h"

// default constructor
RTC::RTC()
    35aa:	dc 01       	movw	r26, r24
{
	Sekunden=0;
    35ac:	1a 96       	adiw	r26, 0x0a	; 10
    35ae:	1c 92       	st	X, r1
    35b0:	1a 97       	sbiw	r26, 0x0a	; 10
	HundSekunden=0;
    35b2:	1b 96       	adiw	r26, 0x0b	; 11
    35b4:	1c 92       	st	X, r1
    35b6:	1b 97       	sbiw	r26, 0x0b	; 11
	Minuten=0;
    35b8:	19 96       	adiw	r26, 0x09	; 9
    35ba:	1c 92       	st	X, r1
    35bc:	19 97       	sbiw	r26, 0x09	; 9
	Stunden=0;
    35be:	18 96       	adiw	r26, 0x08	; 8
    35c0:	1c 92       	st	X, r1
    35c2:	18 97       	sbiw	r26, 0x08	; 8
	Tag=0;
    35c4:	1c 96       	adiw	r26, 0x0c	; 12
    35c6:	1c 92       	st	X, r1
    35c8:	1c 97       	sbiw	r26, 0x0c	; 12
	Monat=0;
    35ca:	1d 96       	adiw	r26, 0x0d	; 13
    35cc:	1c 92       	st	X, r1
    35ce:	1d 97       	sbiw	r26, 0x0d	; 13
	Jahr=0;
    35d0:	1e 96       	adiw	r26, 0x0e	; 14
    35d2:	1c 92       	st	X, r1
    35d4:	1e 97       	sbiw	r26, 0x0e	; 14
    35d6:	fc 01       	movw	r30, r24
	for(uint8_t i=0;i<bitsderrtc;i++){
    35d8:	80 e0       	ldi	r24, 0x00	; 0
		msg_uhr[i]=0;
    35da:	11 92       	st	Z+, r1
	Minuten=0;
	Stunden=0;
	Tag=0;
	Monat=0;
	Jahr=0;
	for(uint8_t i=0;i<bitsderrtc;i++){
    35dc:	8f 5f       	subi	r24, 0xFF	; 255
    35de:	88 30       	cpi	r24, 0x08	; 8
    35e0:	e1 f7       	brne	.-8      	; 0x35da <_ZN3RTCC1Ev+0x30>
		msg_uhr[i]=0;
	}
	//Einstellungen des Ausgabebuffers
	msg_uhr[2]=':';
    35e2:	8a e3       	ldi	r24, 0x3A	; 58
    35e4:	12 96       	adiw	r26, 0x02	; 2
    35e6:	8c 93       	st	X, r24
    35e8:	12 97       	sbiw	r26, 0x02	; 2
	msg_uhr[5]=':';
    35ea:	15 96       	adiw	r26, 0x05	; 5
    35ec:	8c 93       	st	X, r24
    35ee:	08 95       	ret

000035f0 <_ZN3RTCD1Ev>:
	//msg_dat[2]='.';
	//msg_dat[5]='.';
} //RTC

// default destructor
RTC::~RTC()
    35f0:	08 95       	ret

000035f2 <_ZN3RTC4zeitEv>:
	msg_dat[7]='0'+(GetTime.Year-2000)%10;
	*/
	return 0;
}

uint8_t RTC::zeit(){
    35f2:	fc 01       	movw	r30, r24
	//Sekunden++; sitzt im Vektor um Taster besser entprellen zu koennen
	if (Sekunden >= 60 && Sekunden <=200){
    35f4:	82 85       	ldd	r24, Z+10	; 0x0a
    35f6:	8c 53       	subi	r24, 0x3C	; 60
    35f8:	8d 38       	cpi	r24, 0x8D	; 141
    35fa:	a0 f4       	brcc	.+40     	; 0x3624 <_ZN3RTC4zeitEv+0x32>
		Sekunden = 0;
    35fc:	12 86       	std	Z+10, r1	; 0x0a
		Minuten++;
    35fe:	81 85       	ldd	r24, Z+9	; 0x09
    3600:	8f 5f       	subi	r24, 0xFF	; 255
    3602:	81 87       	std	Z+9, r24	; 0x09
		interupts |= (1<<minuteninterupt);
    3604:	97 85       	ldd	r25, Z+15	; 0x0f
    3606:	94 60       	ori	r25, 0x04	; 4
    3608:	97 87       	std	Z+15, r25	; 0x0f
		if(Minuten >= 60){
    360a:	8c 33       	cpi	r24, 0x3C	; 60
    360c:	20 f0       	brcs	.+8      	; 0x3616 <_ZN3RTC4zeitEv+0x24>
			Minuten = 0;
    360e:	11 86       	std	Z+9, r1	; 0x09
			Stunden++;
    3610:	80 85       	ldd	r24, Z+8	; 0x08
    3612:	8f 5f       	subi	r24, 0xFF	; 255
    3614:	80 87       	std	Z+8, r24	; 0x08
		}
		if(Stunden >= 24){
    3616:	80 85       	ldd	r24, Z+8	; 0x08
    3618:	88 31       	cpi	r24, 0x18	; 24
    361a:	20 f0       	brcs	.+8      	; 0x3624 <_ZN3RTC4zeitEv+0x32>
			Stunden = 0;
    361c:	10 86       	std	Z+8, r1	; 0x08
	*/
	return 0;
}

void RTC::kalender(){
	Tag++;
    361e:	84 85       	ldd	r24, Z+12	; 0x0c
    3620:	8f 5f       	subi	r24, 0xFF	; 255
    3622:	84 87       	std	Z+12, r24	; 0x0c
		if(Stunden >= 24){
			Stunden = 0;
			kalender();
		}
	}
	msg_uhr[0]='0'+Stunden/10;
    3624:	90 85       	ldd	r25, Z+8	; 0x08
    3626:	8d ec       	ldi	r24, 0xCD	; 205
    3628:	98 9f       	mul	r25, r24
    362a:	21 2d       	mov	r18, r1
    362c:	11 24       	eor	r1, r1
    362e:	26 95       	lsr	r18
    3630:	26 95       	lsr	r18
    3632:	26 95       	lsr	r18
    3634:	30 e3       	ldi	r19, 0x30	; 48
    3636:	32 0f       	add	r19, r18
    3638:	30 83       	st	Z, r19
	msg_uhr[1]='0'+Stunden%10;
    363a:	22 0f       	add	r18, r18
    363c:	32 2f       	mov	r19, r18
    363e:	33 0f       	add	r19, r19
    3640:	33 0f       	add	r19, r19
    3642:	23 0f       	add	r18, r19
    3644:	92 1b       	sub	r25, r18
    3646:	90 5d       	subi	r25, 0xD0	; 208
    3648:	91 83       	std	Z+1, r25	; 0x01
	msg_uhr[3]='0'+Minuten/10;
    364a:	91 85       	ldd	r25, Z+9	; 0x09
    364c:	98 9f       	mul	r25, r24
    364e:	21 2d       	mov	r18, r1
    3650:	11 24       	eor	r1, r1
    3652:	26 95       	lsr	r18
    3654:	26 95       	lsr	r18
    3656:	26 95       	lsr	r18
    3658:	30 e3       	ldi	r19, 0x30	; 48
    365a:	32 0f       	add	r19, r18
    365c:	33 83       	std	Z+3, r19	; 0x03
	msg_uhr[4]='0'+Minuten%10;
    365e:	22 0f       	add	r18, r18
    3660:	32 2f       	mov	r19, r18
    3662:	33 0f       	add	r19, r19
    3664:	33 0f       	add	r19, r19
    3666:	23 0f       	add	r18, r19
    3668:	92 1b       	sub	r25, r18
    366a:	90 5d       	subi	r25, 0xD0	; 208
    366c:	94 83       	std	Z+4, r25	; 0x04
	msg_uhr[6]='0'+Sekunden/10;
    366e:	92 85       	ldd	r25, Z+10	; 0x0a
    3670:	98 9f       	mul	r25, r24
    3672:	81 2d       	mov	r24, r1
    3674:	11 24       	eor	r1, r1
    3676:	86 95       	lsr	r24
    3678:	86 95       	lsr	r24
    367a:	86 95       	lsr	r24
    367c:	20 e3       	ldi	r18, 0x30	; 48
    367e:	28 0f       	add	r18, r24
    3680:	26 83       	std	Z+6, r18	; 0x06
	msg_uhr[7]='0'+Sekunden%10;
    3682:	88 0f       	add	r24, r24
    3684:	28 2f       	mov	r18, r24
    3686:	22 0f       	add	r18, r18
    3688:	22 0f       	add	r18, r18
    368a:	82 0f       	add	r24, r18
    368c:	98 1b       	sub	r25, r24
    368e:	90 5d       	subi	r25, 0xD0	; 208
    3690:	97 83       	std	Z+7, r25	; 0x07
	msg_dat[4]='0'+GetTime.Month%10;
	msg_dat[6]='0'+(GetTime.Year-2000)/10;
	msg_dat[7]='0'+(GetTime.Year-2000)%10;
	*/
	return 0;
}
    3692:	80 e0       	ldi	r24, 0x00	; 0
    3694:	08 95       	ret

00003696 <_ZN3RTC10dummyeinstEv>:

void RTC::kalender(){
	Tag++;
}

void RTC::dummyeinst(){
    3696:	fc 01       	movw	r30, r24
	Stunden=10;
    3698:	8a e0       	ldi	r24, 0x0A	; 10
    369a:	80 87       	std	Z+8, r24	; 0x08
	Minuten=30;
    369c:	8e e1       	ldi	r24, 0x1E	; 30
    369e:	81 87       	std	Z+9, r24	; 0x09
	Tag=27;
    36a0:	8b e1       	ldi	r24, 0x1B	; 27
    36a2:	84 87       	std	Z+12, r24	; 0x0c
	Monat=8;
    36a4:	88 e0       	ldi	r24, 0x08	; 8
    36a6:	85 87       	std	Z+13, r24	; 0x0d
	Jahr=15;
    36a8:	8f e0       	ldi	r24, 0x0F	; 15
    36aa:	86 87       	std	Z+14, r24	; 0x0e
    36ac:	08 95       	ret

000036ae <_ZN3RTC8RTCstartEv>:
}

void RTC::RTCstart(){
    36ae:	fc 01       	movw	r30, r24
	//Einstellungen des Ausgabebuffers
	msg_uhr[0]='0';
    36b0:	80 e3       	ldi	r24, 0x30	; 48
    36b2:	80 83       	st	Z, r24
	msg_uhr[1]='0';
    36b4:	81 83       	std	Z+1, r24	; 0x01
	msg_uhr[2]=':';
    36b6:	9a e3       	ldi	r25, 0x3A	; 58
    36b8:	92 83       	std	Z+2, r25	; 0x02
	msg_uhr[3]='0';
    36ba:	83 83       	std	Z+3, r24	; 0x03
	msg_uhr[4]='0';
    36bc:	84 83       	std	Z+4, r24	; 0x04
	msg_uhr[5]=':';
    36be:	95 83       	std	Z+5, r25	; 0x05
	msg_uhr[6]='0';
    36c0:	86 83       	std	Z+6, r24	; 0x06
	msg_uhr[7]='0';
    36c2:	87 83       	std	Z+7, r24	; 0x07
	//Timer2 als 1ms Timer fuer die RTC
	//asynchron mit 32.768 kHz (noch synchrom)
	TCNT2 = TIMER2RTCTIME;
    36c4:	10 92 b2 00 	sts	0x00B2, r1
	ASSR |= (1<<AS2);
    36c8:	e6 eb       	ldi	r30, 0xB6	; 182
    36ca:	f0 e0       	ldi	r31, 0x00	; 0
    36cc:	80 81       	ld	r24, Z
    36ce:	80 62       	ori	r24, 0x20	; 32
    36d0:	80 83       	st	Z, r24
	TIMSK2 = (1<<TOIE2);
    36d2:	81 e0       	ldi	r24, 0x01	; 1
    36d4:	80 93 70 00 	sts	0x0070, r24
	TCCR2B = (1<<CS22) | (1<<CS20);		//Vorteiler 256
    36d8:	85 e0       	ldi	r24, 0x05	; 5
    36da:	80 93 b1 00 	sts	0x00B1, r24
    36de:	08 95       	ret

000036e0 <_ZN3RTC7RTCstopEv>:
}

void RTC::RTCstop(){
	TCCR2B &= ~((1<<CS22) | (1<<CS21));
    36e0:	e1 eb       	ldi	r30, 0xB1	; 177
    36e2:	f0 e0       	ldi	r31, 0x00	; 0
    36e4:	80 81       	ld	r24, Z
    36e6:	89 7f       	andi	r24, 0xF9	; 249
    36e8:	80 83       	st	Z, r24
    36ea:	08 95       	ret

000036ec <_ZN3RTC5timerEv>:
}

uint8_t RTC::timer(){
    36ec:	fc 01       	movw	r30, r24
	if (Sekunden>60)
    36ee:	82 85       	ldd	r24, Z+10	; 0x0a
    36f0:	8d 33       	cpi	r24, 0x3D	; 61
    36f2:	b8 f0       	brcs	.+46     	; 0x3722 <_ZN3RTC5timerEv+0x36>
	{
		Sekunden=59;
    36f4:	8b e3       	ldi	r24, 0x3B	; 59
    36f6:	82 87       	std	Z+10, r24	; 0x0a
		Minuten--;
    36f8:	81 85       	ldd	r24, Z+9	; 0x09
    36fa:	81 50       	subi	r24, 0x01	; 1
		if (Minuten>60)
    36fc:	8d 33       	cpi	r24, 0x3D	; 61
    36fe:	18 f4       	brcc	.+6      	; 0x3706 <_ZN3RTC5timerEv+0x1a>

uint8_t RTC::timer(){
	if (Sekunden>60)
	{
		Sekunden=59;
		Minuten--;
    3700:	81 87       	std	Z+9, r24	; 0x09
				Sekunden=0;
				return 1;
			}
		}
	}
	return 0;
    3702:	80 e0       	ldi	r24, 0x00	; 0
    3704:	08 95       	ret
	{
		Sekunden=59;
		Minuten--;
		if (Minuten>60)
		{
			Minuten=59;
    3706:	8b e3       	ldi	r24, 0x3B	; 59
    3708:	81 87       	std	Z+9, r24	; 0x09
			Stunden--;
    370a:	80 85       	ldd	r24, Z+8	; 0x08
    370c:	81 50       	subi	r24, 0x01	; 1
			if (Stunden>24)
    370e:	89 31       	cpi	r24, 0x19	; 25
    3710:	18 f4       	brcc	.+6      	; 0x3718 <_ZN3RTC5timerEv+0x2c>
		Sekunden=59;
		Minuten--;
		if (Minuten>60)
		{
			Minuten=59;
			Stunden--;
    3712:	80 87       	std	Z+8, r24	; 0x08
				Sekunden=0;
				return 1;
			}
		}
	}
	return 0;
    3714:	80 e0       	ldi	r24, 0x00	; 0
    3716:	08 95       	ret
		{
			Minuten=59;
			Stunden--;
			if (Stunden>24)
			{
				Stunden=0;
    3718:	10 86       	std	Z+8, r1	; 0x08
				Minuten=0;
    371a:	11 86       	std	Z+9, r1	; 0x09
				Sekunden=0;
    371c:	12 86       	std	Z+10, r1	; 0x0a
				return 1;
    371e:	81 e0       	ldi	r24, 0x01	; 1
    3720:	08 95       	ret
			}
		}
	}
	return 0;
    3722:	80 e0       	ldi	r24, 0x00	; 0
}
    3724:	08 95       	ret

00003726 <__subsf3>:
    3726:	50 58       	subi	r21, 0x80	; 128

00003728 <__addsf3>:
    3728:	bb 27       	eor	r27, r27
    372a:	aa 27       	eor	r26, r26
    372c:	0e d0       	rcall	.+28     	; 0x374a <__addsf3x>
    372e:	27 c2       	rjmp	.+1102   	; 0x3b7e <__fp_round>
    3730:	f0 d1       	rcall	.+992    	; 0x3b12 <__fp_pscA>
    3732:	30 f0       	brcs	.+12     	; 0x3740 <__addsf3+0x18>
    3734:	f5 d1       	rcall	.+1002   	; 0x3b20 <__fp_pscB>
    3736:	20 f0       	brcs	.+8      	; 0x3740 <__addsf3+0x18>
    3738:	31 f4       	brne	.+12     	; 0x3746 <__addsf3+0x1e>
    373a:	9f 3f       	cpi	r25, 0xFF	; 255
    373c:	11 f4       	brne	.+4      	; 0x3742 <__addsf3+0x1a>
    373e:	1e f4       	brtc	.+6      	; 0x3746 <__addsf3+0x1e>
    3740:	c0 c1       	rjmp	.+896    	; 0x3ac2 <__fp_nan>
    3742:	0e f4       	brtc	.+2      	; 0x3746 <__addsf3+0x1e>
    3744:	e0 95       	com	r30
    3746:	e7 fb       	bst	r30, 7
    3748:	b6 c1       	rjmp	.+876    	; 0x3ab6 <__fp_inf>

0000374a <__addsf3x>:
    374a:	e9 2f       	mov	r30, r25
    374c:	3a d2       	rcall	.+1140   	; 0x3bc2 <__fp_split3>
    374e:	80 f3       	brcs	.-32     	; 0x3730 <__addsf3+0x8>
    3750:	ba 17       	cp	r27, r26
    3752:	62 07       	cpc	r22, r18
    3754:	73 07       	cpc	r23, r19
    3756:	84 07       	cpc	r24, r20
    3758:	95 07       	cpc	r25, r21
    375a:	18 f0       	brcs	.+6      	; 0x3762 <__addsf3x+0x18>
    375c:	71 f4       	brne	.+28     	; 0x377a <__addsf3x+0x30>
    375e:	9e f5       	brtc	.+102    	; 0x37c6 <__addsf3x+0x7c>
    3760:	52 c2       	rjmp	.+1188   	; 0x3c06 <__fp_zero>
    3762:	0e f4       	brtc	.+2      	; 0x3766 <__addsf3x+0x1c>
    3764:	e0 95       	com	r30
    3766:	0b 2e       	mov	r0, r27
    3768:	ba 2f       	mov	r27, r26
    376a:	a0 2d       	mov	r26, r0
    376c:	0b 01       	movw	r0, r22
    376e:	b9 01       	movw	r22, r18
    3770:	90 01       	movw	r18, r0
    3772:	0c 01       	movw	r0, r24
    3774:	ca 01       	movw	r24, r20
    3776:	a0 01       	movw	r20, r0
    3778:	11 24       	eor	r1, r1
    377a:	ff 27       	eor	r31, r31
    377c:	59 1b       	sub	r21, r25
    377e:	99 f0       	breq	.+38     	; 0x37a6 <__addsf3x+0x5c>
    3780:	59 3f       	cpi	r21, 0xF9	; 249
    3782:	50 f4       	brcc	.+20     	; 0x3798 <__addsf3x+0x4e>
    3784:	50 3e       	cpi	r21, 0xE0	; 224
    3786:	68 f1       	brcs	.+90     	; 0x37e2 <__addsf3x+0x98>
    3788:	1a 16       	cp	r1, r26
    378a:	f0 40       	sbci	r31, 0x00	; 0
    378c:	a2 2f       	mov	r26, r18
    378e:	23 2f       	mov	r18, r19
    3790:	34 2f       	mov	r19, r20
    3792:	44 27       	eor	r20, r20
    3794:	58 5f       	subi	r21, 0xF8	; 248
    3796:	f3 cf       	rjmp	.-26     	; 0x377e <__addsf3x+0x34>
    3798:	46 95       	lsr	r20
    379a:	37 95       	ror	r19
    379c:	27 95       	ror	r18
    379e:	a7 95       	ror	r26
    37a0:	f0 40       	sbci	r31, 0x00	; 0
    37a2:	53 95       	inc	r21
    37a4:	c9 f7       	brne	.-14     	; 0x3798 <__addsf3x+0x4e>
    37a6:	7e f4       	brtc	.+30     	; 0x37c6 <__addsf3x+0x7c>
    37a8:	1f 16       	cp	r1, r31
    37aa:	ba 0b       	sbc	r27, r26
    37ac:	62 0b       	sbc	r22, r18
    37ae:	73 0b       	sbc	r23, r19
    37b0:	84 0b       	sbc	r24, r20
    37b2:	ba f0       	brmi	.+46     	; 0x37e2 <__addsf3x+0x98>
    37b4:	91 50       	subi	r25, 0x01	; 1
    37b6:	a1 f0       	breq	.+40     	; 0x37e0 <__addsf3x+0x96>
    37b8:	ff 0f       	add	r31, r31
    37ba:	bb 1f       	adc	r27, r27
    37bc:	66 1f       	adc	r22, r22
    37be:	77 1f       	adc	r23, r23
    37c0:	88 1f       	adc	r24, r24
    37c2:	c2 f7       	brpl	.-16     	; 0x37b4 <__addsf3x+0x6a>
    37c4:	0e c0       	rjmp	.+28     	; 0x37e2 <__addsf3x+0x98>
    37c6:	ba 0f       	add	r27, r26
    37c8:	62 1f       	adc	r22, r18
    37ca:	73 1f       	adc	r23, r19
    37cc:	84 1f       	adc	r24, r20
    37ce:	48 f4       	brcc	.+18     	; 0x37e2 <__addsf3x+0x98>
    37d0:	87 95       	ror	r24
    37d2:	77 95       	ror	r23
    37d4:	67 95       	ror	r22
    37d6:	b7 95       	ror	r27
    37d8:	f7 95       	ror	r31
    37da:	9e 3f       	cpi	r25, 0xFE	; 254
    37dc:	08 f0       	brcs	.+2      	; 0x37e0 <__addsf3x+0x96>
    37de:	b3 cf       	rjmp	.-154    	; 0x3746 <__addsf3+0x1e>
    37e0:	93 95       	inc	r25
    37e2:	88 0f       	add	r24, r24
    37e4:	08 f0       	brcs	.+2      	; 0x37e8 <__addsf3x+0x9e>
    37e6:	99 27       	eor	r25, r25
    37e8:	ee 0f       	add	r30, r30
    37ea:	97 95       	ror	r25
    37ec:	87 95       	ror	r24
    37ee:	08 95       	ret
    37f0:	90 d1       	rcall	.+800    	; 0x3b12 <__fp_pscA>
    37f2:	58 f0       	brcs	.+22     	; 0x380a <__addsf3x+0xc0>
    37f4:	80 e8       	ldi	r24, 0x80	; 128
    37f6:	91 e0       	ldi	r25, 0x01	; 1
    37f8:	09 f4       	brne	.+2      	; 0x37fc <__addsf3x+0xb2>
    37fa:	9e ef       	ldi	r25, 0xFE	; 254
    37fc:	91 d1       	rcall	.+802    	; 0x3b20 <__fp_pscB>
    37fe:	28 f0       	brcs	.+10     	; 0x380a <__addsf3x+0xc0>
    3800:	40 e8       	ldi	r20, 0x80	; 128
    3802:	51 e0       	ldi	r21, 0x01	; 1
    3804:	59 f4       	brne	.+22     	; 0x381c <atan2+0xe>
    3806:	5e ef       	ldi	r21, 0xFE	; 254
    3808:	09 c0       	rjmp	.+18     	; 0x381c <atan2+0xe>
    380a:	5b c1       	rjmp	.+694    	; 0x3ac2 <__fp_nan>
    380c:	fc c1       	rjmp	.+1016   	; 0x3c06 <__fp_zero>

0000380e <atan2>:
    380e:	e9 2f       	mov	r30, r25
    3810:	e0 78       	andi	r30, 0x80	; 128
    3812:	d7 d1       	rcall	.+942    	; 0x3bc2 <__fp_split3>
    3814:	68 f3       	brcs	.-38     	; 0x37f0 <__addsf3x+0xa6>
    3816:	09 2e       	mov	r0, r25
    3818:	05 2a       	or	r0, r21
    381a:	c1 f3       	breq	.-16     	; 0x380c <__addsf3x+0xc2>
    381c:	26 17       	cp	r18, r22
    381e:	37 07       	cpc	r19, r23
    3820:	48 07       	cpc	r20, r24
    3822:	59 07       	cpc	r21, r25
    3824:	38 f0       	brcs	.+14     	; 0x3834 <atan2+0x26>
    3826:	0e 2e       	mov	r0, r30
    3828:	07 f8       	bld	r0, 7
    382a:	e0 25       	eor	r30, r0
    382c:	69 f0       	breq	.+26     	; 0x3848 <atan2+0x3a>
    382e:	e0 25       	eor	r30, r0
    3830:	e0 64       	ori	r30, 0x40	; 64
    3832:	0a c0       	rjmp	.+20     	; 0x3848 <atan2+0x3a>
    3834:	ef 63       	ori	r30, 0x3F	; 63
    3836:	07 f8       	bld	r0, 7
    3838:	00 94       	com	r0
    383a:	07 fa       	bst	r0, 7
    383c:	db 01       	movw	r26, r22
    383e:	b9 01       	movw	r22, r18
    3840:	9d 01       	movw	r18, r26
    3842:	dc 01       	movw	r26, r24
    3844:	ca 01       	movw	r24, r20
    3846:	ad 01       	movw	r20, r26
    3848:	ef 93       	push	r30
    384a:	4a d0       	rcall	.+148    	; 0x38e0 <__divsf3_pse>
    384c:	98 d1       	rcall	.+816    	; 0x3b7e <__fp_round>
    384e:	0a d0       	rcall	.+20     	; 0x3864 <atan>
    3850:	5f 91       	pop	r21
    3852:	55 23       	and	r21, r21
    3854:	31 f0       	breq	.+12     	; 0x3862 <atan2+0x54>
    3856:	2b ed       	ldi	r18, 0xDB	; 219
    3858:	3f e0       	ldi	r19, 0x0F	; 15
    385a:	49 e4       	ldi	r20, 0x49	; 73
    385c:	50 fd       	sbrc	r21, 0
    385e:	49 ec       	ldi	r20, 0xC9	; 201
    3860:	63 cf       	rjmp	.-314    	; 0x3728 <__addsf3>
    3862:	08 95       	ret

00003864 <atan>:
    3864:	df 93       	push	r29
    3866:	dd 27       	eor	r29, r29
    3868:	b9 2f       	mov	r27, r25
    386a:	bf 77       	andi	r27, 0x7F	; 127
    386c:	40 e8       	ldi	r20, 0x80	; 128
    386e:	5f e3       	ldi	r21, 0x3F	; 63
    3870:	16 16       	cp	r1, r22
    3872:	17 06       	cpc	r1, r23
    3874:	48 07       	cpc	r20, r24
    3876:	5b 07       	cpc	r21, r27
    3878:	10 f4       	brcc	.+4      	; 0x387e <atan+0x1a>
    387a:	d9 2f       	mov	r29, r25
    387c:	cf d1       	rcall	.+926    	; 0x3c1c <inverse>
    387e:	9f 93       	push	r25
    3880:	8f 93       	push	r24
    3882:	7f 93       	push	r23
    3884:	6f 93       	push	r22
    3886:	3a d2       	rcall	.+1140   	; 0x3cfc <square>
    3888:	ec e8       	ldi	r30, 0x8C	; 140
    388a:	f0 e0       	ldi	r31, 0x00	; 0
    388c:	1d d1       	rcall	.+570    	; 0x3ac8 <__fp_powser>
    388e:	77 d1       	rcall	.+750    	; 0x3b7e <__fp_round>
    3890:	2f 91       	pop	r18
    3892:	3f 91       	pop	r19
    3894:	4f 91       	pop	r20
    3896:	5f 91       	pop	r21
    3898:	d4 d1       	rcall	.+936    	; 0x3c42 <__mulsf3x>
    389a:	dd 23       	and	r29, r29
    389c:	49 f0       	breq	.+18     	; 0x38b0 <atan+0x4c>
    389e:	90 58       	subi	r25, 0x80	; 128
    38a0:	a2 ea       	ldi	r26, 0xA2	; 162
    38a2:	2a ed       	ldi	r18, 0xDA	; 218
    38a4:	3f e0       	ldi	r19, 0x0F	; 15
    38a6:	49 ec       	ldi	r20, 0xC9	; 201
    38a8:	5f e3       	ldi	r21, 0x3F	; 63
    38aa:	d0 78       	andi	r29, 0x80	; 128
    38ac:	5d 27       	eor	r21, r29
    38ae:	4d df       	rcall	.-358    	; 0x374a <__addsf3x>
    38b0:	df 91       	pop	r29
    38b2:	65 c1       	rjmp	.+714    	; 0x3b7e <__fp_round>

000038b4 <__cmpsf2>:
    38b4:	dc d0       	rcall	.+440    	; 0x3a6e <__fp_cmp>
    38b6:	08 f4       	brcc	.+2      	; 0x38ba <__cmpsf2+0x6>
    38b8:	81 e0       	ldi	r24, 0x01	; 1
    38ba:	08 95       	ret

000038bc <cos>:
    38bc:	39 d1       	rcall	.+626    	; 0x3b30 <__fp_rempio2>
    38be:	e3 95       	inc	r30
    38c0:	6f c1       	rjmp	.+734    	; 0x3ba0 <__fp_sinus>

000038c2 <__divsf3>:
    38c2:	0c d0       	rcall	.+24     	; 0x38dc <__divsf3x>
    38c4:	5c c1       	rjmp	.+696    	; 0x3b7e <__fp_round>
    38c6:	2c d1       	rcall	.+600    	; 0x3b20 <__fp_pscB>
    38c8:	40 f0       	brcs	.+16     	; 0x38da <__divsf3+0x18>
    38ca:	23 d1       	rcall	.+582    	; 0x3b12 <__fp_pscA>
    38cc:	30 f0       	brcs	.+12     	; 0x38da <__divsf3+0x18>
    38ce:	21 f4       	brne	.+8      	; 0x38d8 <__divsf3+0x16>
    38d0:	5f 3f       	cpi	r21, 0xFF	; 255
    38d2:	19 f0       	breq	.+6      	; 0x38da <__divsf3+0x18>
    38d4:	f0 c0       	rjmp	.+480    	; 0x3ab6 <__fp_inf>
    38d6:	51 11       	cpse	r21, r1
    38d8:	97 c1       	rjmp	.+814    	; 0x3c08 <__fp_szero>
    38da:	f3 c0       	rjmp	.+486    	; 0x3ac2 <__fp_nan>

000038dc <__divsf3x>:
    38dc:	72 d1       	rcall	.+740    	; 0x3bc2 <__fp_split3>
    38de:	98 f3       	brcs	.-26     	; 0x38c6 <__divsf3+0x4>

000038e0 <__divsf3_pse>:
    38e0:	99 23       	and	r25, r25
    38e2:	c9 f3       	breq	.-14     	; 0x38d6 <__divsf3+0x14>
    38e4:	55 23       	and	r21, r21
    38e6:	b1 f3       	breq	.-20     	; 0x38d4 <__divsf3+0x12>
    38e8:	95 1b       	sub	r25, r21
    38ea:	55 0b       	sbc	r21, r21
    38ec:	bb 27       	eor	r27, r27
    38ee:	aa 27       	eor	r26, r26
    38f0:	62 17       	cp	r22, r18
    38f2:	73 07       	cpc	r23, r19
    38f4:	84 07       	cpc	r24, r20
    38f6:	38 f0       	brcs	.+14     	; 0x3906 <__divsf3_pse+0x26>
    38f8:	9f 5f       	subi	r25, 0xFF	; 255
    38fa:	5f 4f       	sbci	r21, 0xFF	; 255
    38fc:	22 0f       	add	r18, r18
    38fe:	33 1f       	adc	r19, r19
    3900:	44 1f       	adc	r20, r20
    3902:	aa 1f       	adc	r26, r26
    3904:	a9 f3       	breq	.-22     	; 0x38f0 <__divsf3_pse+0x10>
    3906:	33 d0       	rcall	.+102    	; 0x396e <__divsf3_pse+0x8e>
    3908:	0e 2e       	mov	r0, r30
    390a:	3a f0       	brmi	.+14     	; 0x391a <__divsf3_pse+0x3a>
    390c:	e0 e8       	ldi	r30, 0x80	; 128
    390e:	30 d0       	rcall	.+96     	; 0x3970 <__divsf3_pse+0x90>
    3910:	91 50       	subi	r25, 0x01	; 1
    3912:	50 40       	sbci	r21, 0x00	; 0
    3914:	e6 95       	lsr	r30
    3916:	00 1c       	adc	r0, r0
    3918:	ca f7       	brpl	.-14     	; 0x390c <__divsf3_pse+0x2c>
    391a:	29 d0       	rcall	.+82     	; 0x396e <__divsf3_pse+0x8e>
    391c:	fe 2f       	mov	r31, r30
    391e:	27 d0       	rcall	.+78     	; 0x396e <__divsf3_pse+0x8e>
    3920:	66 0f       	add	r22, r22
    3922:	77 1f       	adc	r23, r23
    3924:	88 1f       	adc	r24, r24
    3926:	bb 1f       	adc	r27, r27
    3928:	26 17       	cp	r18, r22
    392a:	37 07       	cpc	r19, r23
    392c:	48 07       	cpc	r20, r24
    392e:	ab 07       	cpc	r26, r27
    3930:	b0 e8       	ldi	r27, 0x80	; 128
    3932:	09 f0       	breq	.+2      	; 0x3936 <__divsf3_pse+0x56>
    3934:	bb 0b       	sbc	r27, r27
    3936:	80 2d       	mov	r24, r0
    3938:	bf 01       	movw	r22, r30
    393a:	ff 27       	eor	r31, r31
    393c:	93 58       	subi	r25, 0x83	; 131
    393e:	5f 4f       	sbci	r21, 0xFF	; 255
    3940:	2a f0       	brmi	.+10     	; 0x394c <__divsf3_pse+0x6c>
    3942:	9e 3f       	cpi	r25, 0xFE	; 254
    3944:	51 05       	cpc	r21, r1
    3946:	68 f0       	brcs	.+26     	; 0x3962 <__divsf3_pse+0x82>
    3948:	b6 c0       	rjmp	.+364    	; 0x3ab6 <__fp_inf>
    394a:	5e c1       	rjmp	.+700    	; 0x3c08 <__fp_szero>
    394c:	5f 3f       	cpi	r21, 0xFF	; 255
    394e:	ec f3       	brlt	.-6      	; 0x394a <__divsf3_pse+0x6a>
    3950:	98 3e       	cpi	r25, 0xE8	; 232
    3952:	dc f3       	brlt	.-10     	; 0x394a <__divsf3_pse+0x6a>
    3954:	86 95       	lsr	r24
    3956:	77 95       	ror	r23
    3958:	67 95       	ror	r22
    395a:	b7 95       	ror	r27
    395c:	f7 95       	ror	r31
    395e:	9f 5f       	subi	r25, 0xFF	; 255
    3960:	c9 f7       	brne	.-14     	; 0x3954 <__divsf3_pse+0x74>
    3962:	88 0f       	add	r24, r24
    3964:	91 1d       	adc	r25, r1
    3966:	96 95       	lsr	r25
    3968:	87 95       	ror	r24
    396a:	97 f9       	bld	r25, 7
    396c:	08 95       	ret
    396e:	e1 e0       	ldi	r30, 0x01	; 1
    3970:	66 0f       	add	r22, r22
    3972:	77 1f       	adc	r23, r23
    3974:	88 1f       	adc	r24, r24
    3976:	bb 1f       	adc	r27, r27
    3978:	62 17       	cp	r22, r18
    397a:	73 07       	cpc	r23, r19
    397c:	84 07       	cpc	r24, r20
    397e:	ba 07       	cpc	r27, r26
    3980:	20 f0       	brcs	.+8      	; 0x398a <__divsf3_pse+0xaa>
    3982:	62 1b       	sub	r22, r18
    3984:	73 0b       	sbc	r23, r19
    3986:	84 0b       	sbc	r24, r20
    3988:	ba 0b       	sbc	r27, r26
    398a:	ee 1f       	adc	r30, r30
    398c:	88 f7       	brcc	.-30     	; 0x3970 <__divsf3_pse+0x90>
    398e:	e0 95       	com	r30
    3990:	08 95       	ret

00003992 <__fixsfsi>:
    3992:	04 d0       	rcall	.+8      	; 0x399c <__fixunssfsi>
    3994:	68 94       	set
    3996:	b1 11       	cpse	r27, r1
    3998:	37 c1       	rjmp	.+622    	; 0x3c08 <__fp_szero>
    399a:	08 95       	ret

0000399c <__fixunssfsi>:
    399c:	1a d1       	rcall	.+564    	; 0x3bd2 <__fp_splitA>
    399e:	88 f0       	brcs	.+34     	; 0x39c2 <__fixunssfsi+0x26>
    39a0:	9f 57       	subi	r25, 0x7F	; 127
    39a2:	90 f0       	brcs	.+36     	; 0x39c8 <__fixunssfsi+0x2c>
    39a4:	b9 2f       	mov	r27, r25
    39a6:	99 27       	eor	r25, r25
    39a8:	b7 51       	subi	r27, 0x17	; 23
    39aa:	a0 f0       	brcs	.+40     	; 0x39d4 <__fixunssfsi+0x38>
    39ac:	d1 f0       	breq	.+52     	; 0x39e2 <__fixunssfsi+0x46>
    39ae:	66 0f       	add	r22, r22
    39b0:	77 1f       	adc	r23, r23
    39b2:	88 1f       	adc	r24, r24
    39b4:	99 1f       	adc	r25, r25
    39b6:	1a f0       	brmi	.+6      	; 0x39be <__fixunssfsi+0x22>
    39b8:	ba 95       	dec	r27
    39ba:	c9 f7       	brne	.-14     	; 0x39ae <__fixunssfsi+0x12>
    39bc:	12 c0       	rjmp	.+36     	; 0x39e2 <__fixunssfsi+0x46>
    39be:	b1 30       	cpi	r27, 0x01	; 1
    39c0:	81 f0       	breq	.+32     	; 0x39e2 <__fixunssfsi+0x46>
    39c2:	21 d1       	rcall	.+578    	; 0x3c06 <__fp_zero>
    39c4:	b1 e0       	ldi	r27, 0x01	; 1
    39c6:	08 95       	ret
    39c8:	1e c1       	rjmp	.+572    	; 0x3c06 <__fp_zero>
    39ca:	67 2f       	mov	r22, r23
    39cc:	78 2f       	mov	r23, r24
    39ce:	88 27       	eor	r24, r24
    39d0:	b8 5f       	subi	r27, 0xF8	; 248
    39d2:	39 f0       	breq	.+14     	; 0x39e2 <__fixunssfsi+0x46>
    39d4:	b9 3f       	cpi	r27, 0xF9	; 249
    39d6:	cc f3       	brlt	.-14     	; 0x39ca <__fixunssfsi+0x2e>
    39d8:	86 95       	lsr	r24
    39da:	77 95       	ror	r23
    39dc:	67 95       	ror	r22
    39de:	b3 95       	inc	r27
    39e0:	d9 f7       	brne	.-10     	; 0x39d8 <__fixunssfsi+0x3c>
    39e2:	3e f4       	brtc	.+14     	; 0x39f2 <__fixunssfsi+0x56>
    39e4:	90 95       	com	r25
    39e6:	80 95       	com	r24
    39e8:	70 95       	com	r23
    39ea:	61 95       	neg	r22
    39ec:	7f 4f       	sbci	r23, 0xFF	; 255
    39ee:	8f 4f       	sbci	r24, 0xFF	; 255
    39f0:	9f 4f       	sbci	r25, 0xFF	; 255
    39f2:	08 95       	ret

000039f4 <__floatunsisf>:
    39f4:	e8 94       	clt
    39f6:	09 c0       	rjmp	.+18     	; 0x3a0a <__floatsisf+0x12>

000039f8 <__floatsisf>:
    39f8:	97 fb       	bst	r25, 7
    39fa:	3e f4       	brtc	.+14     	; 0x3a0a <__floatsisf+0x12>
    39fc:	90 95       	com	r25
    39fe:	80 95       	com	r24
    3a00:	70 95       	com	r23
    3a02:	61 95       	neg	r22
    3a04:	7f 4f       	sbci	r23, 0xFF	; 255
    3a06:	8f 4f       	sbci	r24, 0xFF	; 255
    3a08:	9f 4f       	sbci	r25, 0xFF	; 255
    3a0a:	99 23       	and	r25, r25
    3a0c:	a9 f0       	breq	.+42     	; 0x3a38 <__floatsisf+0x40>
    3a0e:	f9 2f       	mov	r31, r25
    3a10:	96 e9       	ldi	r25, 0x96	; 150
    3a12:	bb 27       	eor	r27, r27
    3a14:	93 95       	inc	r25
    3a16:	f6 95       	lsr	r31
    3a18:	87 95       	ror	r24
    3a1a:	77 95       	ror	r23
    3a1c:	67 95       	ror	r22
    3a1e:	b7 95       	ror	r27
    3a20:	f1 11       	cpse	r31, r1
    3a22:	f8 cf       	rjmp	.-16     	; 0x3a14 <__floatsisf+0x1c>
    3a24:	fa f4       	brpl	.+62     	; 0x3a64 <__floatsisf+0x6c>
    3a26:	bb 0f       	add	r27, r27
    3a28:	11 f4       	brne	.+4      	; 0x3a2e <__floatsisf+0x36>
    3a2a:	60 ff       	sbrs	r22, 0
    3a2c:	1b c0       	rjmp	.+54     	; 0x3a64 <__floatsisf+0x6c>
    3a2e:	6f 5f       	subi	r22, 0xFF	; 255
    3a30:	7f 4f       	sbci	r23, 0xFF	; 255
    3a32:	8f 4f       	sbci	r24, 0xFF	; 255
    3a34:	9f 4f       	sbci	r25, 0xFF	; 255
    3a36:	16 c0       	rjmp	.+44     	; 0x3a64 <__floatsisf+0x6c>
    3a38:	88 23       	and	r24, r24
    3a3a:	11 f0       	breq	.+4      	; 0x3a40 <__floatsisf+0x48>
    3a3c:	96 e9       	ldi	r25, 0x96	; 150
    3a3e:	11 c0       	rjmp	.+34     	; 0x3a62 <__floatsisf+0x6a>
    3a40:	77 23       	and	r23, r23
    3a42:	21 f0       	breq	.+8      	; 0x3a4c <__floatsisf+0x54>
    3a44:	9e e8       	ldi	r25, 0x8E	; 142
    3a46:	87 2f       	mov	r24, r23
    3a48:	76 2f       	mov	r23, r22
    3a4a:	05 c0       	rjmp	.+10     	; 0x3a56 <__floatsisf+0x5e>
    3a4c:	66 23       	and	r22, r22
    3a4e:	71 f0       	breq	.+28     	; 0x3a6c <__floatsisf+0x74>
    3a50:	96 e8       	ldi	r25, 0x86	; 134
    3a52:	86 2f       	mov	r24, r22
    3a54:	70 e0       	ldi	r23, 0x00	; 0
    3a56:	60 e0       	ldi	r22, 0x00	; 0
    3a58:	2a f0       	brmi	.+10     	; 0x3a64 <__floatsisf+0x6c>
    3a5a:	9a 95       	dec	r25
    3a5c:	66 0f       	add	r22, r22
    3a5e:	77 1f       	adc	r23, r23
    3a60:	88 1f       	adc	r24, r24
    3a62:	da f7       	brpl	.-10     	; 0x3a5a <__floatsisf+0x62>
    3a64:	88 0f       	add	r24, r24
    3a66:	96 95       	lsr	r25
    3a68:	87 95       	ror	r24
    3a6a:	97 f9       	bld	r25, 7
    3a6c:	08 95       	ret

00003a6e <__fp_cmp>:
    3a6e:	99 0f       	add	r25, r25
    3a70:	00 08       	sbc	r0, r0
    3a72:	55 0f       	add	r21, r21
    3a74:	aa 0b       	sbc	r26, r26
    3a76:	e0 e8       	ldi	r30, 0x80	; 128
    3a78:	fe ef       	ldi	r31, 0xFE	; 254
    3a7a:	16 16       	cp	r1, r22
    3a7c:	17 06       	cpc	r1, r23
    3a7e:	e8 07       	cpc	r30, r24
    3a80:	f9 07       	cpc	r31, r25
    3a82:	c0 f0       	brcs	.+48     	; 0x3ab4 <__fp_cmp+0x46>
    3a84:	12 16       	cp	r1, r18
    3a86:	13 06       	cpc	r1, r19
    3a88:	e4 07       	cpc	r30, r20
    3a8a:	f5 07       	cpc	r31, r21
    3a8c:	98 f0       	brcs	.+38     	; 0x3ab4 <__fp_cmp+0x46>
    3a8e:	62 1b       	sub	r22, r18
    3a90:	73 0b       	sbc	r23, r19
    3a92:	84 0b       	sbc	r24, r20
    3a94:	95 0b       	sbc	r25, r21
    3a96:	39 f4       	brne	.+14     	; 0x3aa6 <__fp_cmp+0x38>
    3a98:	0a 26       	eor	r0, r26
    3a9a:	61 f0       	breq	.+24     	; 0x3ab4 <__fp_cmp+0x46>
    3a9c:	23 2b       	or	r18, r19
    3a9e:	24 2b       	or	r18, r20
    3aa0:	25 2b       	or	r18, r21
    3aa2:	21 f4       	brne	.+8      	; 0x3aac <__fp_cmp+0x3e>
    3aa4:	08 95       	ret
    3aa6:	0a 26       	eor	r0, r26
    3aa8:	09 f4       	brne	.+2      	; 0x3aac <__fp_cmp+0x3e>
    3aaa:	a1 40       	sbci	r26, 0x01	; 1
    3aac:	a6 95       	lsr	r26
    3aae:	8f ef       	ldi	r24, 0xFF	; 255
    3ab0:	81 1d       	adc	r24, r1
    3ab2:	81 1d       	adc	r24, r1
    3ab4:	08 95       	ret

00003ab6 <__fp_inf>:
    3ab6:	97 f9       	bld	r25, 7
    3ab8:	9f 67       	ori	r25, 0x7F	; 127
    3aba:	80 e8       	ldi	r24, 0x80	; 128
    3abc:	70 e0       	ldi	r23, 0x00	; 0
    3abe:	60 e0       	ldi	r22, 0x00	; 0
    3ac0:	08 95       	ret

00003ac2 <__fp_nan>:
    3ac2:	9f ef       	ldi	r25, 0xFF	; 255
    3ac4:	80 ec       	ldi	r24, 0xC0	; 192
    3ac6:	08 95       	ret

00003ac8 <__fp_powser>:
    3ac8:	df 93       	push	r29
    3aca:	cf 93       	push	r28
    3acc:	1f 93       	push	r17
    3ace:	0f 93       	push	r16
    3ad0:	ff 92       	push	r15
    3ad2:	ef 92       	push	r14
    3ad4:	df 92       	push	r13
    3ad6:	7b 01       	movw	r14, r22
    3ad8:	8c 01       	movw	r16, r24
    3ada:	68 94       	set
    3adc:	05 c0       	rjmp	.+10     	; 0x3ae8 <__fp_powser+0x20>
    3ade:	da 2e       	mov	r13, r26
    3ae0:	ef 01       	movw	r28, r30
    3ae2:	af d0       	rcall	.+350    	; 0x3c42 <__mulsf3x>
    3ae4:	fe 01       	movw	r30, r28
    3ae6:	e8 94       	clt
    3ae8:	a5 91       	lpm	r26, Z+
    3aea:	25 91       	lpm	r18, Z+
    3aec:	35 91       	lpm	r19, Z+
    3aee:	45 91       	lpm	r20, Z+
    3af0:	55 91       	lpm	r21, Z+
    3af2:	ae f3       	brts	.-22     	; 0x3ade <__fp_powser+0x16>
    3af4:	ef 01       	movw	r28, r30
    3af6:	29 de       	rcall	.-942    	; 0x374a <__addsf3x>
    3af8:	fe 01       	movw	r30, r28
    3afa:	97 01       	movw	r18, r14
    3afc:	a8 01       	movw	r20, r16
    3afe:	da 94       	dec	r13
    3b00:	79 f7       	brne	.-34     	; 0x3ae0 <__fp_powser+0x18>
    3b02:	df 90       	pop	r13
    3b04:	ef 90       	pop	r14
    3b06:	ff 90       	pop	r15
    3b08:	0f 91       	pop	r16
    3b0a:	1f 91       	pop	r17
    3b0c:	cf 91       	pop	r28
    3b0e:	df 91       	pop	r29
    3b10:	08 95       	ret

00003b12 <__fp_pscA>:
    3b12:	00 24       	eor	r0, r0
    3b14:	0a 94       	dec	r0
    3b16:	16 16       	cp	r1, r22
    3b18:	17 06       	cpc	r1, r23
    3b1a:	18 06       	cpc	r1, r24
    3b1c:	09 06       	cpc	r0, r25
    3b1e:	08 95       	ret

00003b20 <__fp_pscB>:
    3b20:	00 24       	eor	r0, r0
    3b22:	0a 94       	dec	r0
    3b24:	12 16       	cp	r1, r18
    3b26:	13 06       	cpc	r1, r19
    3b28:	14 06       	cpc	r1, r20
    3b2a:	05 06       	cpc	r0, r21
    3b2c:	08 95       	ret
    3b2e:	c9 cf       	rjmp	.-110    	; 0x3ac2 <__fp_nan>

00003b30 <__fp_rempio2>:
    3b30:	50 d0       	rcall	.+160    	; 0x3bd2 <__fp_splitA>
    3b32:	e8 f3       	brcs	.-6      	; 0x3b2e <__fp_pscB+0xe>
    3b34:	e8 94       	clt
    3b36:	e0 e0       	ldi	r30, 0x00	; 0
    3b38:	bb 27       	eor	r27, r27
    3b3a:	9f 57       	subi	r25, 0x7F	; 127
    3b3c:	f0 f0       	brcs	.+60     	; 0x3b7a <__fp_rempio2+0x4a>
    3b3e:	2a ed       	ldi	r18, 0xDA	; 218
    3b40:	3f e0       	ldi	r19, 0x0F	; 15
    3b42:	49 ec       	ldi	r20, 0xC9	; 201
    3b44:	06 c0       	rjmp	.+12     	; 0x3b52 <__fp_rempio2+0x22>
    3b46:	ee 0f       	add	r30, r30
    3b48:	bb 0f       	add	r27, r27
    3b4a:	66 1f       	adc	r22, r22
    3b4c:	77 1f       	adc	r23, r23
    3b4e:	88 1f       	adc	r24, r24
    3b50:	28 f0       	brcs	.+10     	; 0x3b5c <__fp_rempio2+0x2c>
    3b52:	b2 3a       	cpi	r27, 0xA2	; 162
    3b54:	62 07       	cpc	r22, r18
    3b56:	73 07       	cpc	r23, r19
    3b58:	84 07       	cpc	r24, r20
    3b5a:	28 f0       	brcs	.+10     	; 0x3b66 <__fp_rempio2+0x36>
    3b5c:	b2 5a       	subi	r27, 0xA2	; 162
    3b5e:	62 0b       	sbc	r22, r18
    3b60:	73 0b       	sbc	r23, r19
    3b62:	84 0b       	sbc	r24, r20
    3b64:	e3 95       	inc	r30
    3b66:	9a 95       	dec	r25
    3b68:	72 f7       	brpl	.-36     	; 0x3b46 <__fp_rempio2+0x16>
    3b6a:	80 38       	cpi	r24, 0x80	; 128
    3b6c:	30 f4       	brcc	.+12     	; 0x3b7a <__fp_rempio2+0x4a>
    3b6e:	9a 95       	dec	r25
    3b70:	bb 0f       	add	r27, r27
    3b72:	66 1f       	adc	r22, r22
    3b74:	77 1f       	adc	r23, r23
    3b76:	88 1f       	adc	r24, r24
    3b78:	d2 f7       	brpl	.-12     	; 0x3b6e <__fp_rempio2+0x3e>
    3b7a:	90 48       	sbci	r25, 0x80	; 128
    3b7c:	e4 c0       	rjmp	.+456    	; 0x3d46 <__fp_mpack_finite>

00003b7e <__fp_round>:
    3b7e:	09 2e       	mov	r0, r25
    3b80:	03 94       	inc	r0
    3b82:	00 0c       	add	r0, r0
    3b84:	11 f4       	brne	.+4      	; 0x3b8a <__fp_round+0xc>
    3b86:	88 23       	and	r24, r24
    3b88:	52 f0       	brmi	.+20     	; 0x3b9e <__fp_round+0x20>
    3b8a:	bb 0f       	add	r27, r27
    3b8c:	40 f4       	brcc	.+16     	; 0x3b9e <__fp_round+0x20>
    3b8e:	bf 2b       	or	r27, r31
    3b90:	11 f4       	brne	.+4      	; 0x3b96 <__fp_round+0x18>
    3b92:	60 ff       	sbrs	r22, 0
    3b94:	04 c0       	rjmp	.+8      	; 0x3b9e <__fp_round+0x20>
    3b96:	6f 5f       	subi	r22, 0xFF	; 255
    3b98:	7f 4f       	sbci	r23, 0xFF	; 255
    3b9a:	8f 4f       	sbci	r24, 0xFF	; 255
    3b9c:	9f 4f       	sbci	r25, 0xFF	; 255
    3b9e:	08 95       	ret

00003ba0 <__fp_sinus>:
    3ba0:	ef 93       	push	r30
    3ba2:	e0 ff       	sbrs	r30, 0
    3ba4:	06 c0       	rjmp	.+12     	; 0x3bb2 <__fp_sinus+0x12>
    3ba6:	a2 ea       	ldi	r26, 0xA2	; 162
    3ba8:	2a ed       	ldi	r18, 0xDA	; 218
    3baa:	3f e0       	ldi	r19, 0x0F	; 15
    3bac:	49 ec       	ldi	r20, 0xC9	; 201
    3bae:	5f eb       	ldi	r21, 0xBF	; 191
    3bb0:	cc dd       	rcall	.-1128   	; 0x374a <__addsf3x>
    3bb2:	e5 df       	rcall	.-54     	; 0x3b7e <__fp_round>
    3bb4:	0f 90       	pop	r0
    3bb6:	03 94       	inc	r0
    3bb8:	01 fc       	sbrc	r0, 1
    3bba:	90 58       	subi	r25, 0x80	; 128
    3bbc:	e9 eb       	ldi	r30, 0xB9	; 185
    3bbe:	f0 e0       	ldi	r31, 0x00	; 0
    3bc0:	ce c0       	rjmp	.+412    	; 0x3d5e <__fp_powsodd>

00003bc2 <__fp_split3>:
    3bc2:	57 fd       	sbrc	r21, 7
    3bc4:	90 58       	subi	r25, 0x80	; 128
    3bc6:	44 0f       	add	r20, r20
    3bc8:	55 1f       	adc	r21, r21
    3bca:	59 f0       	breq	.+22     	; 0x3be2 <__fp_splitA+0x10>
    3bcc:	5f 3f       	cpi	r21, 0xFF	; 255
    3bce:	71 f0       	breq	.+28     	; 0x3bec <__fp_splitA+0x1a>
    3bd0:	47 95       	ror	r20

00003bd2 <__fp_splitA>:
    3bd2:	88 0f       	add	r24, r24
    3bd4:	97 fb       	bst	r25, 7
    3bd6:	99 1f       	adc	r25, r25
    3bd8:	61 f0       	breq	.+24     	; 0x3bf2 <__fp_splitA+0x20>
    3bda:	9f 3f       	cpi	r25, 0xFF	; 255
    3bdc:	79 f0       	breq	.+30     	; 0x3bfc <__fp_splitA+0x2a>
    3bde:	87 95       	ror	r24
    3be0:	08 95       	ret
    3be2:	12 16       	cp	r1, r18
    3be4:	13 06       	cpc	r1, r19
    3be6:	14 06       	cpc	r1, r20
    3be8:	55 1f       	adc	r21, r21
    3bea:	f2 cf       	rjmp	.-28     	; 0x3bd0 <__fp_split3+0xe>
    3bec:	46 95       	lsr	r20
    3bee:	f1 df       	rcall	.-30     	; 0x3bd2 <__fp_splitA>
    3bf0:	08 c0       	rjmp	.+16     	; 0x3c02 <__fp_splitA+0x30>
    3bf2:	16 16       	cp	r1, r22
    3bf4:	17 06       	cpc	r1, r23
    3bf6:	18 06       	cpc	r1, r24
    3bf8:	99 1f       	adc	r25, r25
    3bfa:	f1 cf       	rjmp	.-30     	; 0x3bde <__fp_splitA+0xc>
    3bfc:	86 95       	lsr	r24
    3bfe:	71 05       	cpc	r23, r1
    3c00:	61 05       	cpc	r22, r1
    3c02:	08 94       	sec
    3c04:	08 95       	ret

00003c06 <__fp_zero>:
    3c06:	e8 94       	clt

00003c08 <__fp_szero>:
    3c08:	bb 27       	eor	r27, r27
    3c0a:	66 27       	eor	r22, r22
    3c0c:	77 27       	eor	r23, r23
    3c0e:	cb 01       	movw	r24, r22
    3c10:	97 f9       	bld	r25, 7
    3c12:	08 95       	ret

00003c14 <__gesf2>:
    3c14:	2c df       	rcall	.-424    	; 0x3a6e <__fp_cmp>
    3c16:	08 f4       	brcc	.+2      	; 0x3c1a <__gesf2+0x6>
    3c18:	8f ef       	ldi	r24, 0xFF	; 255
    3c1a:	08 95       	ret

00003c1c <inverse>:
    3c1c:	9b 01       	movw	r18, r22
    3c1e:	ac 01       	movw	r20, r24
    3c20:	60 e0       	ldi	r22, 0x00	; 0
    3c22:	70 e0       	ldi	r23, 0x00	; 0
    3c24:	80 e8       	ldi	r24, 0x80	; 128
    3c26:	9f e3       	ldi	r25, 0x3F	; 63
    3c28:	4c ce       	rjmp	.-872    	; 0x38c2 <__divsf3>

00003c2a <__mulsf3>:
    3c2a:	0b d0       	rcall	.+22     	; 0x3c42 <__mulsf3x>
    3c2c:	a8 cf       	rjmp	.-176    	; 0x3b7e <__fp_round>
    3c2e:	71 df       	rcall	.-286    	; 0x3b12 <__fp_pscA>
    3c30:	28 f0       	brcs	.+10     	; 0x3c3c <__mulsf3+0x12>
    3c32:	76 df       	rcall	.-276    	; 0x3b20 <__fp_pscB>
    3c34:	18 f0       	brcs	.+6      	; 0x3c3c <__mulsf3+0x12>
    3c36:	95 23       	and	r25, r21
    3c38:	09 f0       	breq	.+2      	; 0x3c3c <__mulsf3+0x12>
    3c3a:	3d cf       	rjmp	.-390    	; 0x3ab6 <__fp_inf>
    3c3c:	42 cf       	rjmp	.-380    	; 0x3ac2 <__fp_nan>
    3c3e:	11 24       	eor	r1, r1
    3c40:	e3 cf       	rjmp	.-58     	; 0x3c08 <__fp_szero>

00003c42 <__mulsf3x>:
    3c42:	bf df       	rcall	.-130    	; 0x3bc2 <__fp_split3>
    3c44:	a0 f3       	brcs	.-24     	; 0x3c2e <__mulsf3+0x4>

00003c46 <__mulsf3_pse>:
    3c46:	95 9f       	mul	r25, r21
    3c48:	d1 f3       	breq	.-12     	; 0x3c3e <__mulsf3+0x14>
    3c4a:	95 0f       	add	r25, r21
    3c4c:	50 e0       	ldi	r21, 0x00	; 0
    3c4e:	55 1f       	adc	r21, r21
    3c50:	62 9f       	mul	r22, r18
    3c52:	f0 01       	movw	r30, r0
    3c54:	72 9f       	mul	r23, r18
    3c56:	bb 27       	eor	r27, r27
    3c58:	f0 0d       	add	r31, r0
    3c5a:	b1 1d       	adc	r27, r1
    3c5c:	63 9f       	mul	r22, r19
    3c5e:	aa 27       	eor	r26, r26
    3c60:	f0 0d       	add	r31, r0
    3c62:	b1 1d       	adc	r27, r1
    3c64:	aa 1f       	adc	r26, r26
    3c66:	64 9f       	mul	r22, r20
    3c68:	66 27       	eor	r22, r22
    3c6a:	b0 0d       	add	r27, r0
    3c6c:	a1 1d       	adc	r26, r1
    3c6e:	66 1f       	adc	r22, r22
    3c70:	82 9f       	mul	r24, r18
    3c72:	22 27       	eor	r18, r18
    3c74:	b0 0d       	add	r27, r0
    3c76:	a1 1d       	adc	r26, r1
    3c78:	62 1f       	adc	r22, r18
    3c7a:	73 9f       	mul	r23, r19
    3c7c:	b0 0d       	add	r27, r0
    3c7e:	a1 1d       	adc	r26, r1
    3c80:	62 1f       	adc	r22, r18
    3c82:	83 9f       	mul	r24, r19
    3c84:	a0 0d       	add	r26, r0
    3c86:	61 1d       	adc	r22, r1
    3c88:	22 1f       	adc	r18, r18
    3c8a:	74 9f       	mul	r23, r20
    3c8c:	33 27       	eor	r19, r19
    3c8e:	a0 0d       	add	r26, r0
    3c90:	61 1d       	adc	r22, r1
    3c92:	23 1f       	adc	r18, r19
    3c94:	84 9f       	mul	r24, r20
    3c96:	60 0d       	add	r22, r0
    3c98:	21 1d       	adc	r18, r1
    3c9a:	82 2f       	mov	r24, r18
    3c9c:	76 2f       	mov	r23, r22
    3c9e:	6a 2f       	mov	r22, r26
    3ca0:	11 24       	eor	r1, r1
    3ca2:	9f 57       	subi	r25, 0x7F	; 127
    3ca4:	50 40       	sbci	r21, 0x00	; 0
    3ca6:	8a f0       	brmi	.+34     	; 0x3cca <__mulsf3_pse+0x84>
    3ca8:	e1 f0       	breq	.+56     	; 0x3ce2 <__mulsf3_pse+0x9c>
    3caa:	88 23       	and	r24, r24
    3cac:	4a f0       	brmi	.+18     	; 0x3cc0 <__mulsf3_pse+0x7a>
    3cae:	ee 0f       	add	r30, r30
    3cb0:	ff 1f       	adc	r31, r31
    3cb2:	bb 1f       	adc	r27, r27
    3cb4:	66 1f       	adc	r22, r22
    3cb6:	77 1f       	adc	r23, r23
    3cb8:	88 1f       	adc	r24, r24
    3cba:	91 50       	subi	r25, 0x01	; 1
    3cbc:	50 40       	sbci	r21, 0x00	; 0
    3cbe:	a9 f7       	brne	.-22     	; 0x3caa <__mulsf3_pse+0x64>
    3cc0:	9e 3f       	cpi	r25, 0xFE	; 254
    3cc2:	51 05       	cpc	r21, r1
    3cc4:	70 f0       	brcs	.+28     	; 0x3ce2 <__mulsf3_pse+0x9c>
    3cc6:	f7 ce       	rjmp	.-530    	; 0x3ab6 <__fp_inf>
    3cc8:	9f cf       	rjmp	.-194    	; 0x3c08 <__fp_szero>
    3cca:	5f 3f       	cpi	r21, 0xFF	; 255
    3ccc:	ec f3       	brlt	.-6      	; 0x3cc8 <__mulsf3_pse+0x82>
    3cce:	98 3e       	cpi	r25, 0xE8	; 232
    3cd0:	dc f3       	brlt	.-10     	; 0x3cc8 <__mulsf3_pse+0x82>
    3cd2:	86 95       	lsr	r24
    3cd4:	77 95       	ror	r23
    3cd6:	67 95       	ror	r22
    3cd8:	b7 95       	ror	r27
    3cda:	f7 95       	ror	r31
    3cdc:	e7 95       	ror	r30
    3cde:	9f 5f       	subi	r25, 0xFF	; 255
    3ce0:	c1 f7       	brne	.-16     	; 0x3cd2 <__mulsf3_pse+0x8c>
    3ce2:	fe 2b       	or	r31, r30
    3ce4:	88 0f       	add	r24, r24
    3ce6:	91 1d       	adc	r25, r1
    3ce8:	96 95       	lsr	r25
    3cea:	87 95       	ror	r24
    3cec:	97 f9       	bld	r25, 7
    3cee:	08 95       	ret

00003cf0 <sin>:
    3cf0:	9f 93       	push	r25
    3cf2:	1e df       	rcall	.-452    	; 0x3b30 <__fp_rempio2>
    3cf4:	0f 90       	pop	r0
    3cf6:	07 fc       	sbrc	r0, 7
    3cf8:	ee 5f       	subi	r30, 0xFE	; 254
    3cfa:	52 cf       	rjmp	.-348    	; 0x3ba0 <__fp_sinus>

00003cfc <square>:
    3cfc:	9b 01       	movw	r18, r22
    3cfe:	ac 01       	movw	r20, r24
    3d00:	94 cf       	rjmp	.-216    	; 0x3c2a <__mulsf3>

00003d02 <tan>:
    3d02:	df 93       	push	r29
    3d04:	d9 2f       	mov	r29, r25
    3d06:	14 df       	rcall	.-472    	; 0x3b30 <__fp_rempio2>
    3d08:	e6 95       	lsr	r30
    3d0a:	d7 95       	ror	r29
    3d0c:	2a ed       	ldi	r18, 0xDA	; 218
    3d0e:	3f e0       	ldi	r19, 0x0F	; 15
    3d10:	49 e4       	ldi	r20, 0x49	; 73
    3d12:	5f e3       	ldi	r21, 0x3F	; 63
    3d14:	b3 3a       	cpi	r27, 0xA3	; 163
    3d16:	62 07       	cpc	r22, r18
    3d18:	73 07       	cpc	r23, r19
    3d1a:	84 07       	cpc	r24, r20
    3d1c:	95 07       	cpc	r25, r21
    3d1e:	d7 95       	ror	r29
    3d20:	2a f0       	brmi	.+10     	; 0x3d2c <tan+0x2a>
    3d22:	a2 ea       	ldi	r26, 0xA2	; 162
    3d24:	49 ec       	ldi	r20, 0xC9	; 201
    3d26:	90 68       	ori	r25, 0x80	; 128
    3d28:	10 dd       	rcall	.-1504   	; 0x374a <__addsf3x>
    3d2a:	29 df       	rcall	.-430    	; 0x3b7e <__fp_round>
    3d2c:	e7 ed       	ldi	r30, 0xD7	; 215
    3d2e:	f0 e0       	ldi	r31, 0x00	; 0
    3d30:	16 d0       	rcall	.+44     	; 0x3d5e <__fp_powsodd>
    3d32:	dd 0f       	add	r29, r29
    3d34:	0b f0       	brvs	.+2      	; 0x3d38 <tan+0x36>
    3d36:	72 df       	rcall	.-284    	; 0x3c1c <inverse>
    3d38:	dd 0f       	add	r29, r29
    3d3a:	0b f4       	brvc	.+2      	; 0x3d3e <tan+0x3c>
    3d3c:	90 58       	subi	r25, 0x80	; 128
    3d3e:	df 91       	pop	r29
    3d40:	08 95       	ret

00003d42 <__fp_mpack>:
    3d42:	9f 3f       	cpi	r25, 0xFF	; 255
    3d44:	31 f0       	breq	.+12     	; 0x3d52 <__fp_mpack_finite+0xc>

00003d46 <__fp_mpack_finite>:
    3d46:	91 50       	subi	r25, 0x01	; 1
    3d48:	20 f4       	brcc	.+8      	; 0x3d52 <__fp_mpack_finite+0xc>
    3d4a:	87 95       	ror	r24
    3d4c:	77 95       	ror	r23
    3d4e:	67 95       	ror	r22
    3d50:	b7 95       	ror	r27
    3d52:	88 0f       	add	r24, r24
    3d54:	91 1d       	adc	r25, r1
    3d56:	96 95       	lsr	r25
    3d58:	87 95       	ror	r24
    3d5a:	97 f9       	bld	r25, 7
    3d5c:	08 95       	ret

00003d5e <__fp_powsodd>:
    3d5e:	9f 93       	push	r25
    3d60:	8f 93       	push	r24
    3d62:	7f 93       	push	r23
    3d64:	6f 93       	push	r22
    3d66:	ff 93       	push	r31
    3d68:	ef 93       	push	r30
    3d6a:	9b 01       	movw	r18, r22
    3d6c:	ac 01       	movw	r20, r24
    3d6e:	5d df       	rcall	.-326    	; 0x3c2a <__mulsf3>
    3d70:	ef 91       	pop	r30
    3d72:	ff 91       	pop	r31
    3d74:	a9 de       	rcall	.-686    	; 0x3ac8 <__fp_powser>
    3d76:	2f 91       	pop	r18
    3d78:	3f 91       	pop	r19
    3d7a:	4f 91       	pop	r20
    3d7c:	5f 91       	pop	r21
    3d7e:	55 cf       	rjmp	.-342    	; 0x3c2a <__mulsf3>

00003d80 <vfprintf>:
    3d80:	a3 e1       	ldi	r26, 0x13	; 19
    3d82:	b0 e0       	ldi	r27, 0x00	; 0
    3d84:	e6 ec       	ldi	r30, 0xC6	; 198
    3d86:	fe e1       	ldi	r31, 0x1E	; 30
    3d88:	0c 94 41 22 	jmp	0x4482	; 0x4482 <__prologue_saves__>
    3d8c:	7c 01       	movw	r14, r24
    3d8e:	1b 01       	movw	r2, r22
    3d90:	6a 01       	movw	r12, r20
    3d92:	fc 01       	movw	r30, r24
    3d94:	17 82       	std	Z+7, r1	; 0x07
    3d96:	16 82       	std	Z+6, r1	; 0x06
    3d98:	83 81       	ldd	r24, Z+3	; 0x03
    3d9a:	81 ff       	sbrs	r24, 1
    3d9c:	66 c3       	rjmp	.+1740   	; 0x446a <vfprintf+0x6ea>
    3d9e:	be 01       	movw	r22, r28
    3da0:	6f 5f       	subi	r22, 0xFF	; 255
    3da2:	7f 4f       	sbci	r23, 0xFF	; 255
    3da4:	4b 01       	movw	r8, r22
    3da6:	f7 01       	movw	r30, r14
    3da8:	93 81       	ldd	r25, Z+3	; 0x03
    3daa:	f1 01       	movw	r30, r2
    3dac:	93 fd       	sbrc	r25, 3
    3dae:	85 91       	lpm	r24, Z+
    3db0:	93 ff       	sbrs	r25, 3
    3db2:	81 91       	ld	r24, Z+
    3db4:	1f 01       	movw	r2, r30
    3db6:	88 23       	and	r24, r24
    3db8:	09 f4       	brne	.+2      	; 0x3dbc <vfprintf+0x3c>
    3dba:	53 c3       	rjmp	.+1702   	; 0x4462 <vfprintf+0x6e2>
    3dbc:	85 32       	cpi	r24, 0x25	; 37
    3dbe:	39 f4       	brne	.+14     	; 0x3dce <vfprintf+0x4e>
    3dc0:	93 fd       	sbrc	r25, 3
    3dc2:	85 91       	lpm	r24, Z+
    3dc4:	93 ff       	sbrs	r25, 3
    3dc6:	81 91       	ld	r24, Z+
    3dc8:	1f 01       	movw	r2, r30
    3dca:	85 32       	cpi	r24, 0x25	; 37
    3dcc:	39 f4       	brne	.+14     	; 0x3ddc <vfprintf+0x5c>
    3dce:	b7 01       	movw	r22, r14
    3dd0:	90 e0       	ldi	r25, 0x00	; 0
    3dd2:	0e 94 66 23 	call	0x46cc	; 0x46cc <fputc>
    3dd6:	56 01       	movw	r10, r12
    3dd8:	65 01       	movw	r12, r10
    3dda:	e5 cf       	rjmp	.-54     	; 0x3da6 <vfprintf+0x26>
    3ddc:	10 e0       	ldi	r17, 0x00	; 0
    3dde:	51 2c       	mov	r5, r1
    3de0:	20 e0       	ldi	r18, 0x00	; 0
    3de2:	20 32       	cpi	r18, 0x20	; 32
    3de4:	a0 f4       	brcc	.+40     	; 0x3e0e <vfprintf+0x8e>
    3de6:	8b 32       	cpi	r24, 0x2B	; 43
    3de8:	69 f0       	breq	.+26     	; 0x3e04 <vfprintf+0x84>
    3dea:	30 f4       	brcc	.+12     	; 0x3df8 <vfprintf+0x78>
    3dec:	80 32       	cpi	r24, 0x20	; 32
    3dee:	59 f0       	breq	.+22     	; 0x3e06 <vfprintf+0x86>
    3df0:	83 32       	cpi	r24, 0x23	; 35
    3df2:	69 f4       	brne	.+26     	; 0x3e0e <vfprintf+0x8e>
    3df4:	20 61       	ori	r18, 0x10	; 16
    3df6:	2c c0       	rjmp	.+88     	; 0x3e50 <vfprintf+0xd0>
    3df8:	8d 32       	cpi	r24, 0x2D	; 45
    3dfa:	39 f0       	breq	.+14     	; 0x3e0a <vfprintf+0x8a>
    3dfc:	80 33       	cpi	r24, 0x30	; 48
    3dfe:	39 f4       	brne	.+14     	; 0x3e0e <vfprintf+0x8e>
    3e00:	21 60       	ori	r18, 0x01	; 1
    3e02:	26 c0       	rjmp	.+76     	; 0x3e50 <vfprintf+0xd0>
    3e04:	22 60       	ori	r18, 0x02	; 2
    3e06:	24 60       	ori	r18, 0x04	; 4
    3e08:	23 c0       	rjmp	.+70     	; 0x3e50 <vfprintf+0xd0>
    3e0a:	28 60       	ori	r18, 0x08	; 8
    3e0c:	21 c0       	rjmp	.+66     	; 0x3e50 <vfprintf+0xd0>
    3e0e:	27 fd       	sbrc	r18, 7
    3e10:	27 c0       	rjmp	.+78     	; 0x3e60 <vfprintf+0xe0>
    3e12:	30 ed       	ldi	r19, 0xD0	; 208
    3e14:	38 0f       	add	r19, r24
    3e16:	3a 30       	cpi	r19, 0x0A	; 10
    3e18:	78 f4       	brcc	.+30     	; 0x3e38 <vfprintf+0xb8>
    3e1a:	26 ff       	sbrs	r18, 6
    3e1c:	06 c0       	rjmp	.+12     	; 0x3e2a <vfprintf+0xaa>
    3e1e:	fa e0       	ldi	r31, 0x0A	; 10
    3e20:	1f 9f       	mul	r17, r31
    3e22:	30 0d       	add	r19, r0
    3e24:	11 24       	eor	r1, r1
    3e26:	13 2f       	mov	r17, r19
    3e28:	13 c0       	rjmp	.+38     	; 0x3e50 <vfprintf+0xd0>
    3e2a:	6a e0       	ldi	r22, 0x0A	; 10
    3e2c:	56 9e       	mul	r5, r22
    3e2e:	30 0d       	add	r19, r0
    3e30:	11 24       	eor	r1, r1
    3e32:	53 2e       	mov	r5, r19
    3e34:	20 62       	ori	r18, 0x20	; 32
    3e36:	0c c0       	rjmp	.+24     	; 0x3e50 <vfprintf+0xd0>
    3e38:	8e 32       	cpi	r24, 0x2E	; 46
    3e3a:	21 f4       	brne	.+8      	; 0x3e44 <vfprintf+0xc4>
    3e3c:	26 fd       	sbrc	r18, 6
    3e3e:	11 c3       	rjmp	.+1570   	; 0x4462 <vfprintf+0x6e2>
    3e40:	20 64       	ori	r18, 0x40	; 64
    3e42:	06 c0       	rjmp	.+12     	; 0x3e50 <vfprintf+0xd0>
    3e44:	8c 36       	cpi	r24, 0x6C	; 108
    3e46:	11 f4       	brne	.+4      	; 0x3e4c <vfprintf+0xcc>
    3e48:	20 68       	ori	r18, 0x80	; 128
    3e4a:	02 c0       	rjmp	.+4      	; 0x3e50 <vfprintf+0xd0>
    3e4c:	88 36       	cpi	r24, 0x68	; 104
    3e4e:	41 f4       	brne	.+16     	; 0x3e60 <vfprintf+0xe0>
    3e50:	f1 01       	movw	r30, r2
    3e52:	93 fd       	sbrc	r25, 3
    3e54:	85 91       	lpm	r24, Z+
    3e56:	93 ff       	sbrs	r25, 3
    3e58:	81 91       	ld	r24, Z+
    3e5a:	1f 01       	movw	r2, r30
    3e5c:	81 11       	cpse	r24, r1
    3e5e:	c1 cf       	rjmp	.-126    	; 0x3de2 <vfprintf+0x62>
    3e60:	9b eb       	ldi	r25, 0xBB	; 187
    3e62:	98 0f       	add	r25, r24
    3e64:	93 30       	cpi	r25, 0x03	; 3
    3e66:	18 f4       	brcc	.+6      	; 0x3e6e <vfprintf+0xee>
    3e68:	20 61       	ori	r18, 0x10	; 16
    3e6a:	80 5e       	subi	r24, 0xE0	; 224
    3e6c:	06 c0       	rjmp	.+12     	; 0x3e7a <vfprintf+0xfa>
    3e6e:	9b e9       	ldi	r25, 0x9B	; 155
    3e70:	98 0f       	add	r25, r24
    3e72:	93 30       	cpi	r25, 0x03	; 3
    3e74:	08 f0       	brcs	.+2      	; 0x3e78 <vfprintf+0xf8>
    3e76:	aa c1       	rjmp	.+852    	; 0x41cc <vfprintf+0x44c>
    3e78:	2f 7e       	andi	r18, 0xEF	; 239
    3e7a:	26 ff       	sbrs	r18, 6
    3e7c:	16 e0       	ldi	r17, 0x06	; 6
    3e7e:	2f 73       	andi	r18, 0x3F	; 63
    3e80:	72 2e       	mov	r7, r18
    3e82:	85 36       	cpi	r24, 0x65	; 101
    3e84:	21 f4       	brne	.+8      	; 0x3e8e <vfprintf+0x10e>
    3e86:	f2 2f       	mov	r31, r18
    3e88:	f0 64       	ori	r31, 0x40	; 64
    3e8a:	7f 2e       	mov	r7, r31
    3e8c:	08 c0       	rjmp	.+16     	; 0x3e9e <vfprintf+0x11e>
    3e8e:	86 36       	cpi	r24, 0x66	; 102
    3e90:	21 f4       	brne	.+8      	; 0x3e9a <vfprintf+0x11a>
    3e92:	62 2f       	mov	r22, r18
    3e94:	60 68       	ori	r22, 0x80	; 128
    3e96:	76 2e       	mov	r7, r22
    3e98:	02 c0       	rjmp	.+4      	; 0x3e9e <vfprintf+0x11e>
    3e9a:	11 11       	cpse	r17, r1
    3e9c:	11 50       	subi	r17, 0x01	; 1
    3e9e:	77 fe       	sbrs	r7, 7
    3ea0:	07 c0       	rjmp	.+14     	; 0x3eb0 <vfprintf+0x130>
    3ea2:	1c 33       	cpi	r17, 0x3C	; 60
    3ea4:	48 f4       	brcc	.+18     	; 0x3eb8 <vfprintf+0x138>
    3ea6:	44 24       	eor	r4, r4
    3ea8:	43 94       	inc	r4
    3eaa:	41 0e       	add	r4, r17
    3eac:	27 e0       	ldi	r18, 0x07	; 7
    3eae:	0b c0       	rjmp	.+22     	; 0x3ec6 <vfprintf+0x146>
    3eb0:	18 30       	cpi	r17, 0x08	; 8
    3eb2:	30 f4       	brcc	.+12     	; 0x3ec0 <vfprintf+0x140>
    3eb4:	21 2f       	mov	r18, r17
    3eb6:	06 c0       	rjmp	.+12     	; 0x3ec4 <vfprintf+0x144>
    3eb8:	27 e0       	ldi	r18, 0x07	; 7
    3eba:	4c e3       	ldi	r20, 0x3C	; 60
    3ebc:	44 2e       	mov	r4, r20
    3ebe:	03 c0       	rjmp	.+6      	; 0x3ec6 <vfprintf+0x146>
    3ec0:	27 e0       	ldi	r18, 0x07	; 7
    3ec2:	17 e0       	ldi	r17, 0x07	; 7
    3ec4:	41 2c       	mov	r4, r1
    3ec6:	56 01       	movw	r10, r12
    3ec8:	74 e0       	ldi	r23, 0x04	; 4
    3eca:	a7 0e       	add	r10, r23
    3ecc:	b1 1c       	adc	r11, r1
    3ece:	f6 01       	movw	r30, r12
    3ed0:	60 81       	ld	r22, Z
    3ed2:	71 81       	ldd	r23, Z+1	; 0x01
    3ed4:	82 81       	ldd	r24, Z+2	; 0x02
    3ed6:	93 81       	ldd	r25, Z+3	; 0x03
    3ed8:	04 2d       	mov	r16, r4
    3eda:	a4 01       	movw	r20, r8
    3edc:	0e 94 78 22 	call	0x44f0	; 0x44f0 <__ftoa_engine>
    3ee0:	6c 01       	movw	r12, r24
    3ee2:	09 81       	ldd	r16, Y+1	; 0x01
    3ee4:	00 ff       	sbrs	r16, 0
    3ee6:	02 c0       	rjmp	.+4      	; 0x3eec <vfprintf+0x16c>
    3ee8:	03 ff       	sbrs	r16, 3
    3eea:	06 c0       	rjmp	.+12     	; 0x3ef8 <vfprintf+0x178>
    3eec:	71 fc       	sbrc	r7, 1
    3eee:	07 c0       	rjmp	.+14     	; 0x3efe <vfprintf+0x17e>
    3ef0:	72 fc       	sbrc	r7, 2
    3ef2:	08 c0       	rjmp	.+16     	; 0x3f04 <vfprintf+0x184>
    3ef4:	61 2c       	mov	r6, r1
    3ef6:	08 c0       	rjmp	.+16     	; 0x3f08 <vfprintf+0x188>
    3ef8:	3d e2       	ldi	r19, 0x2D	; 45
    3efa:	63 2e       	mov	r6, r19
    3efc:	05 c0       	rjmp	.+10     	; 0x3f08 <vfprintf+0x188>
    3efe:	2b e2       	ldi	r18, 0x2B	; 43
    3f00:	62 2e       	mov	r6, r18
    3f02:	02 c0       	rjmp	.+4      	; 0x3f08 <vfprintf+0x188>
    3f04:	90 e2       	ldi	r25, 0x20	; 32
    3f06:	69 2e       	mov	r6, r25
    3f08:	80 2f       	mov	r24, r16
    3f0a:	8c 70       	andi	r24, 0x0C	; 12
    3f0c:	99 f1       	breq	.+102    	; 0x3f74 <vfprintf+0x1f4>
    3f0e:	66 20       	and	r6, r6
    3f10:	11 f0       	breq	.+4      	; 0x3f16 <vfprintf+0x196>
    3f12:	84 e0       	ldi	r24, 0x04	; 4
    3f14:	01 c0       	rjmp	.+2      	; 0x3f18 <vfprintf+0x198>
    3f16:	83 e0       	ldi	r24, 0x03	; 3
    3f18:	85 15       	cp	r24, r5
    3f1a:	10 f0       	brcs	.+4      	; 0x3f20 <vfprintf+0x1a0>
    3f1c:	51 2c       	mov	r5, r1
    3f1e:	0b c0       	rjmp	.+22     	; 0x3f36 <vfprintf+0x1b6>
    3f20:	58 1a       	sub	r5, r24
    3f22:	73 fc       	sbrc	r7, 3
    3f24:	08 c0       	rjmp	.+16     	; 0x3f36 <vfprintf+0x1b6>
    3f26:	b7 01       	movw	r22, r14
    3f28:	80 e2       	ldi	r24, 0x20	; 32
    3f2a:	90 e0       	ldi	r25, 0x00	; 0
    3f2c:	0e 94 66 23 	call	0x46cc	; 0x46cc <fputc>
    3f30:	5a 94       	dec	r5
    3f32:	c9 f7       	brne	.-14     	; 0x3f26 <vfprintf+0x1a6>
    3f34:	f3 cf       	rjmp	.-26     	; 0x3f1c <vfprintf+0x19c>
    3f36:	66 20       	and	r6, r6
    3f38:	29 f0       	breq	.+10     	; 0x3f44 <vfprintf+0x1c4>
    3f3a:	b7 01       	movw	r22, r14
    3f3c:	86 2d       	mov	r24, r6
    3f3e:	90 e0       	ldi	r25, 0x00	; 0
    3f40:	0e 94 66 23 	call	0x46cc	; 0x46cc <fputc>
    3f44:	03 fd       	sbrc	r16, 3
    3f46:	03 c0       	rjmp	.+6      	; 0x3f4e <vfprintf+0x1ce>
    3f48:	04 e1       	ldi	r16, 0x14	; 20
    3f4a:	14 e0       	ldi	r17, 0x04	; 4
    3f4c:	02 c0       	rjmp	.+4      	; 0x3f52 <vfprintf+0x1d2>
    3f4e:	00 e1       	ldi	r16, 0x10	; 16
    3f50:	14 e0       	ldi	r17, 0x04	; 4
    3f52:	f7 2d       	mov	r31, r7
    3f54:	f0 71       	andi	r31, 0x10	; 16
    3f56:	7f 2e       	mov	r7, r31
    3f58:	f8 01       	movw	r30, r16
    3f5a:	84 91       	lpm	r24, Z
    3f5c:	88 23       	and	r24, r24
    3f5e:	09 f4       	brne	.+2      	; 0x3f62 <vfprintf+0x1e2>
    3f60:	76 c2       	rjmp	.+1260   	; 0x444e <vfprintf+0x6ce>
    3f62:	71 10       	cpse	r7, r1
    3f64:	80 52       	subi	r24, 0x20	; 32
    3f66:	b7 01       	movw	r22, r14
    3f68:	90 e0       	ldi	r25, 0x00	; 0
    3f6a:	0e 94 66 23 	call	0x46cc	; 0x46cc <fputc>
    3f6e:	0f 5f       	subi	r16, 0xFF	; 255
    3f70:	1f 4f       	sbci	r17, 0xFF	; 255
    3f72:	f2 cf       	rjmp	.-28     	; 0x3f58 <vfprintf+0x1d8>
    3f74:	77 fe       	sbrs	r7, 7
    3f76:	0f c0       	rjmp	.+30     	; 0x3f96 <vfprintf+0x216>
    3f78:	4c 0c       	add	r4, r12
    3f7a:	04 ff       	sbrs	r16, 4
    3f7c:	04 c0       	rjmp	.+8      	; 0x3f86 <vfprintf+0x206>
    3f7e:	8a 81       	ldd	r24, Y+2	; 0x02
    3f80:	81 33       	cpi	r24, 0x31	; 49
    3f82:	09 f4       	brne	.+2      	; 0x3f86 <vfprintf+0x206>
    3f84:	4a 94       	dec	r4
    3f86:	14 14       	cp	r1, r4
    3f88:	74 f5       	brge	.+92     	; 0x3fe6 <vfprintf+0x266>
    3f8a:	f8 e0       	ldi	r31, 0x08	; 8
    3f8c:	f4 15       	cp	r31, r4
    3f8e:	78 f5       	brcc	.+94     	; 0x3fee <vfprintf+0x26e>
    3f90:	88 e0       	ldi	r24, 0x08	; 8
    3f92:	48 2e       	mov	r4, r24
    3f94:	2c c0       	rjmp	.+88     	; 0x3fee <vfprintf+0x26e>
    3f96:	76 fc       	sbrc	r7, 6
    3f98:	2a c0       	rjmp	.+84     	; 0x3fee <vfprintf+0x26e>
    3f9a:	81 2f       	mov	r24, r17
    3f9c:	90 e0       	ldi	r25, 0x00	; 0
    3f9e:	8c 15       	cp	r24, r12
    3fa0:	9d 05       	cpc	r25, r13
    3fa2:	9c f0       	brlt	.+38     	; 0x3fca <vfprintf+0x24a>
    3fa4:	6c ef       	ldi	r22, 0xFC	; 252
    3fa6:	c6 16       	cp	r12, r22
    3fa8:	6f ef       	ldi	r22, 0xFF	; 255
    3faa:	d6 06       	cpc	r13, r22
    3fac:	74 f0       	brlt	.+28     	; 0x3fca <vfprintf+0x24a>
    3fae:	77 2d       	mov	r23, r7
    3fb0:	70 68       	ori	r23, 0x80	; 128
    3fb2:	77 2e       	mov	r7, r23
    3fb4:	0a c0       	rjmp	.+20     	; 0x3fca <vfprintf+0x24a>
    3fb6:	e2 e0       	ldi	r30, 0x02	; 2
    3fb8:	f0 e0       	ldi	r31, 0x00	; 0
    3fba:	ec 0f       	add	r30, r28
    3fbc:	fd 1f       	adc	r31, r29
    3fbe:	e1 0f       	add	r30, r17
    3fc0:	f1 1d       	adc	r31, r1
    3fc2:	80 81       	ld	r24, Z
    3fc4:	80 33       	cpi	r24, 0x30	; 48
    3fc6:	19 f4       	brne	.+6      	; 0x3fce <vfprintf+0x24e>
    3fc8:	11 50       	subi	r17, 0x01	; 1
    3fca:	11 11       	cpse	r17, r1
    3fcc:	f4 cf       	rjmp	.-24     	; 0x3fb6 <vfprintf+0x236>
    3fce:	77 fe       	sbrs	r7, 7
    3fd0:	0e c0       	rjmp	.+28     	; 0x3fee <vfprintf+0x26e>
    3fd2:	44 24       	eor	r4, r4
    3fd4:	43 94       	inc	r4
    3fd6:	41 0e       	add	r4, r17
    3fd8:	81 2f       	mov	r24, r17
    3fda:	90 e0       	ldi	r25, 0x00	; 0
    3fdc:	c8 16       	cp	r12, r24
    3fde:	d9 06       	cpc	r13, r25
    3fe0:	2c f4       	brge	.+10     	; 0x3fec <vfprintf+0x26c>
    3fe2:	1c 19       	sub	r17, r12
    3fe4:	04 c0       	rjmp	.+8      	; 0x3fee <vfprintf+0x26e>
    3fe6:	44 24       	eor	r4, r4
    3fe8:	43 94       	inc	r4
    3fea:	01 c0       	rjmp	.+2      	; 0x3fee <vfprintf+0x26e>
    3fec:	10 e0       	ldi	r17, 0x00	; 0
    3fee:	77 fe       	sbrs	r7, 7
    3ff0:	07 c0       	rjmp	.+14     	; 0x4000 <vfprintf+0x280>
    3ff2:	1c 14       	cp	r1, r12
    3ff4:	1d 04       	cpc	r1, r13
    3ff6:	3c f4       	brge	.+14     	; 0x4006 <vfprintf+0x286>
    3ff8:	96 01       	movw	r18, r12
    3ffa:	2f 5f       	subi	r18, 0xFF	; 255
    3ffc:	3f 4f       	sbci	r19, 0xFF	; 255
    3ffe:	05 c0       	rjmp	.+10     	; 0x400a <vfprintf+0x28a>
    4000:	25 e0       	ldi	r18, 0x05	; 5
    4002:	30 e0       	ldi	r19, 0x00	; 0
    4004:	02 c0       	rjmp	.+4      	; 0x400a <vfprintf+0x28a>
    4006:	21 e0       	ldi	r18, 0x01	; 1
    4008:	30 e0       	ldi	r19, 0x00	; 0
    400a:	66 20       	and	r6, r6
    400c:	11 f0       	breq	.+4      	; 0x4012 <vfprintf+0x292>
    400e:	2f 5f       	subi	r18, 0xFF	; 255
    4010:	3f 4f       	sbci	r19, 0xFF	; 255
    4012:	11 23       	and	r17, r17
    4014:	31 f0       	breq	.+12     	; 0x4022 <vfprintf+0x2a2>
    4016:	41 2f       	mov	r20, r17
    4018:	50 e0       	ldi	r21, 0x00	; 0
    401a:	4f 5f       	subi	r20, 0xFF	; 255
    401c:	5f 4f       	sbci	r21, 0xFF	; 255
    401e:	24 0f       	add	r18, r20
    4020:	35 1f       	adc	r19, r21
    4022:	45 2d       	mov	r20, r5
    4024:	50 e0       	ldi	r21, 0x00	; 0
    4026:	24 17       	cp	r18, r20
    4028:	35 07       	cpc	r19, r21
    402a:	14 f4       	brge	.+4      	; 0x4030 <vfprintf+0x2b0>
    402c:	52 1a       	sub	r5, r18
    402e:	01 c0       	rjmp	.+2      	; 0x4032 <vfprintf+0x2b2>
    4030:	51 2c       	mov	r5, r1
    4032:	87 2d       	mov	r24, r7
    4034:	89 70       	andi	r24, 0x09	; 9
    4036:	49 f4       	brne	.+18     	; 0x404a <vfprintf+0x2ca>
    4038:	55 20       	and	r5, r5
    403a:	39 f0       	breq	.+14     	; 0x404a <vfprintf+0x2ca>
    403c:	b7 01       	movw	r22, r14
    403e:	80 e2       	ldi	r24, 0x20	; 32
    4040:	90 e0       	ldi	r25, 0x00	; 0
    4042:	0e 94 66 23 	call	0x46cc	; 0x46cc <fputc>
    4046:	5a 94       	dec	r5
    4048:	f7 cf       	rjmp	.-18     	; 0x4038 <vfprintf+0x2b8>
    404a:	66 20       	and	r6, r6
    404c:	29 f0       	breq	.+10     	; 0x4058 <vfprintf+0x2d8>
    404e:	b7 01       	movw	r22, r14
    4050:	86 2d       	mov	r24, r6
    4052:	90 e0       	ldi	r25, 0x00	; 0
    4054:	0e 94 66 23 	call	0x46cc	; 0x46cc <fputc>
    4058:	73 fc       	sbrc	r7, 3
    405a:	09 c0       	rjmp	.+18     	; 0x406e <vfprintf+0x2ee>
    405c:	55 20       	and	r5, r5
    405e:	39 f0       	breq	.+14     	; 0x406e <vfprintf+0x2ee>
    4060:	b7 01       	movw	r22, r14
    4062:	80 e3       	ldi	r24, 0x30	; 48
    4064:	90 e0       	ldi	r25, 0x00	; 0
    4066:	0e 94 66 23 	call	0x46cc	; 0x46cc <fputc>
    406a:	5a 94       	dec	r5
    406c:	f7 cf       	rjmp	.-18     	; 0x405c <vfprintf+0x2dc>
    406e:	77 fe       	sbrs	r7, 7
    4070:	5f c0       	rjmp	.+190    	; 0x4130 <vfprintf+0x3b0>
    4072:	9c 2d       	mov	r25, r12
    4074:	8d 2d       	mov	r24, r13
    4076:	d7 fe       	sbrs	r13, 7
    4078:	02 c0       	rjmp	.+4      	; 0x407e <vfprintf+0x2fe>
    407a:	90 e0       	ldi	r25, 0x00	; 0
    407c:	80 e0       	ldi	r24, 0x00	; 0
    407e:	69 2e       	mov	r6, r25
    4080:	78 2e       	mov	r7, r24
    4082:	40 e0       	ldi	r20, 0x00	; 0
    4084:	50 e0       	ldi	r21, 0x00	; 0
    4086:	c6 01       	movw	r24, r12
    4088:	84 19       	sub	r24, r4
    408a:	91 09       	sbc	r25, r1
    408c:	9d 87       	std	Y+13, r25	; 0x0d
    408e:	8c 87       	std	Y+12, r24	; 0x0c
    4090:	96 01       	movw	r18, r12
    4092:	26 19       	sub	r18, r6
    4094:	37 09       	sbc	r19, r7
    4096:	28 0d       	add	r18, r8
    4098:	39 1d       	adc	r19, r9
    409a:	81 2f       	mov	r24, r17
    409c:	90 e0       	ldi	r25, 0x00	; 0
    409e:	ee 27       	eor	r30, r30
    40a0:	ff 27       	eor	r31, r31
    40a2:	e8 1b       	sub	r30, r24
    40a4:	f9 0b       	sbc	r31, r25
    40a6:	ff 87       	std	Y+15, r31	; 0x0f
    40a8:	ee 87       	std	Y+14, r30	; 0x0e
    40aa:	ff ef       	ldi	r31, 0xFF	; 255
    40ac:	6f 16       	cp	r6, r31
    40ae:	7f 06       	cpc	r7, r31
    40b0:	69 f4       	brne	.+26     	; 0x40cc <vfprintf+0x34c>
    40b2:	b7 01       	movw	r22, r14
    40b4:	8e e2       	ldi	r24, 0x2E	; 46
    40b6:	90 e0       	ldi	r25, 0x00	; 0
    40b8:	2b 8b       	std	Y+19, r18	; 0x13
    40ba:	3a 8b       	std	Y+18, r19	; 0x12
    40bc:	48 8b       	std	Y+16, r20	; 0x10
    40be:	59 8b       	std	Y+17, r21	; 0x11
    40c0:	0e 94 66 23 	call	0x46cc	; 0x46cc <fputc>
    40c4:	59 89       	ldd	r21, Y+17	; 0x11
    40c6:	48 89       	ldd	r20, Y+16	; 0x10
    40c8:	3a 89       	ldd	r19, Y+18	; 0x12
    40ca:	2b 89       	ldd	r18, Y+19	; 0x13
    40cc:	c6 14       	cp	r12, r6
    40ce:	d7 04       	cpc	r13, r7
    40d0:	54 f0       	brlt	.+20     	; 0x40e6 <vfprintf+0x366>
    40d2:	6c 85       	ldd	r22, Y+12	; 0x0c
    40d4:	7d 85       	ldd	r23, Y+13	; 0x0d
    40d6:	66 15       	cp	r22, r6
    40d8:	77 05       	cpc	r23, r7
    40da:	2c f4       	brge	.+10     	; 0x40e6 <vfprintf+0x366>
    40dc:	f9 01       	movw	r30, r18
    40de:	e4 0f       	add	r30, r20
    40e0:	f5 1f       	adc	r31, r21
    40e2:	81 81       	ldd	r24, Z+1	; 0x01
    40e4:	01 c0       	rjmp	.+2      	; 0x40e8 <vfprintf+0x368>
    40e6:	80 e3       	ldi	r24, 0x30	; 48
    40e8:	71 e0       	ldi	r23, 0x01	; 1
    40ea:	67 1a       	sub	r6, r23
    40ec:	71 08       	sbc	r7, r1
    40ee:	4f 5f       	subi	r20, 0xFF	; 255
    40f0:	5f 4f       	sbci	r21, 0xFF	; 255
    40f2:	ee 85       	ldd	r30, Y+14	; 0x0e
    40f4:	ff 85       	ldd	r31, Y+15	; 0x0f
    40f6:	6e 16       	cp	r6, r30
    40f8:	7f 06       	cpc	r7, r31
    40fa:	6c f0       	brlt	.+26     	; 0x4116 <vfprintf+0x396>
    40fc:	b7 01       	movw	r22, r14
    40fe:	90 e0       	ldi	r25, 0x00	; 0
    4100:	2b 8b       	std	Y+19, r18	; 0x13
    4102:	3a 8b       	std	Y+18, r19	; 0x12
    4104:	48 8b       	std	Y+16, r20	; 0x10
    4106:	59 8b       	std	Y+17, r21	; 0x11
    4108:	0e 94 66 23 	call	0x46cc	; 0x46cc <fputc>
    410c:	2b 89       	ldd	r18, Y+19	; 0x13
    410e:	3a 89       	ldd	r19, Y+18	; 0x12
    4110:	48 89       	ldd	r20, Y+16	; 0x10
    4112:	59 89       	ldd	r21, Y+17	; 0x11
    4114:	ca cf       	rjmp	.-108    	; 0x40aa <vfprintf+0x32a>
    4116:	6c 14       	cp	r6, r12
    4118:	7d 04       	cpc	r7, r13
    411a:	39 f4       	brne	.+14     	; 0x412a <vfprintf+0x3aa>
    411c:	9a 81       	ldd	r25, Y+2	; 0x02
    411e:	96 33       	cpi	r25, 0x36	; 54
    4120:	18 f4       	brcc	.+6      	; 0x4128 <vfprintf+0x3a8>
    4122:	95 33       	cpi	r25, 0x35	; 53
    4124:	11 f4       	brne	.+4      	; 0x412a <vfprintf+0x3aa>
    4126:	04 ff       	sbrs	r16, 4
    4128:	81 e3       	ldi	r24, 0x31	; 49
    412a:	b7 01       	movw	r22, r14
    412c:	90 e0       	ldi	r25, 0x00	; 0
    412e:	4b c0       	rjmp	.+150    	; 0x41c6 <vfprintf+0x446>
    4130:	8a 81       	ldd	r24, Y+2	; 0x02
    4132:	81 33       	cpi	r24, 0x31	; 49
    4134:	09 f0       	breq	.+2      	; 0x4138 <vfprintf+0x3b8>
    4136:	0f 7e       	andi	r16, 0xEF	; 239
    4138:	b7 01       	movw	r22, r14
    413a:	90 e0       	ldi	r25, 0x00	; 0
    413c:	0e 94 66 23 	call	0x46cc	; 0x46cc <fputc>
    4140:	11 11       	cpse	r17, r1
    4142:	05 c0       	rjmp	.+10     	; 0x414e <vfprintf+0x3ce>
    4144:	74 fe       	sbrs	r7, 4
    4146:	18 c0       	rjmp	.+48     	; 0x4178 <vfprintf+0x3f8>
    4148:	85 e4       	ldi	r24, 0x45	; 69
    414a:	90 e0       	ldi	r25, 0x00	; 0
    414c:	17 c0       	rjmp	.+46     	; 0x417c <vfprintf+0x3fc>
    414e:	b7 01       	movw	r22, r14
    4150:	8e e2       	ldi	r24, 0x2E	; 46
    4152:	90 e0       	ldi	r25, 0x00	; 0
    4154:	0e 94 66 23 	call	0x46cc	; 0x46cc <fputc>
    4158:	82 e0       	ldi	r24, 0x02	; 2
    415a:	66 24       	eor	r6, r6
    415c:	63 94       	inc	r6
    415e:	68 0e       	add	r6, r24
    4160:	f4 01       	movw	r30, r8
    4162:	e8 0f       	add	r30, r24
    4164:	f1 1d       	adc	r31, r1
    4166:	80 81       	ld	r24, Z
    4168:	b7 01       	movw	r22, r14
    416a:	90 e0       	ldi	r25, 0x00	; 0
    416c:	0e 94 66 23 	call	0x46cc	; 0x46cc <fputc>
    4170:	11 50       	subi	r17, 0x01	; 1
    4172:	41 f3       	breq	.-48     	; 0x4144 <vfprintf+0x3c4>
    4174:	86 2d       	mov	r24, r6
    4176:	f1 cf       	rjmp	.-30     	; 0x415a <vfprintf+0x3da>
    4178:	85 e6       	ldi	r24, 0x65	; 101
    417a:	90 e0       	ldi	r25, 0x00	; 0
    417c:	b7 01       	movw	r22, r14
    417e:	0e 94 66 23 	call	0x46cc	; 0x46cc <fputc>
    4182:	d7 fc       	sbrc	r13, 7
    4184:	05 c0       	rjmp	.+10     	; 0x4190 <vfprintf+0x410>
    4186:	c1 14       	cp	r12, r1
    4188:	d1 04       	cpc	r13, r1
    418a:	39 f4       	brne	.+14     	; 0x419a <vfprintf+0x41a>
    418c:	04 ff       	sbrs	r16, 4
    418e:	05 c0       	rjmp	.+10     	; 0x419a <vfprintf+0x41a>
    4190:	d1 94       	neg	r13
    4192:	c1 94       	neg	r12
    4194:	d1 08       	sbc	r13, r1
    4196:	8d e2       	ldi	r24, 0x2D	; 45
    4198:	01 c0       	rjmp	.+2      	; 0x419c <vfprintf+0x41c>
    419a:	8b e2       	ldi	r24, 0x2B	; 43
    419c:	b7 01       	movw	r22, r14
    419e:	90 e0       	ldi	r25, 0x00	; 0
    41a0:	0e 94 66 23 	call	0x46cc	; 0x46cc <fputc>
    41a4:	80 e3       	ldi	r24, 0x30	; 48
    41a6:	6a e0       	ldi	r22, 0x0A	; 10
    41a8:	c6 16       	cp	r12, r22
    41aa:	d1 04       	cpc	r13, r1
    41ac:	2c f0       	brlt	.+10     	; 0x41b8 <vfprintf+0x438>
    41ae:	8f 5f       	subi	r24, 0xFF	; 255
    41b0:	fa e0       	ldi	r31, 0x0A	; 10
    41b2:	cf 1a       	sub	r12, r31
    41b4:	d1 08       	sbc	r13, r1
    41b6:	f7 cf       	rjmp	.-18     	; 0x41a6 <vfprintf+0x426>
    41b8:	b7 01       	movw	r22, r14
    41ba:	90 e0       	ldi	r25, 0x00	; 0
    41bc:	0e 94 66 23 	call	0x46cc	; 0x46cc <fputc>
    41c0:	b7 01       	movw	r22, r14
    41c2:	c6 01       	movw	r24, r12
    41c4:	c0 96       	adiw	r24, 0x30	; 48
    41c6:	0e 94 66 23 	call	0x46cc	; 0x46cc <fputc>
    41ca:	41 c1       	rjmp	.+642    	; 0x444e <vfprintf+0x6ce>
    41cc:	83 36       	cpi	r24, 0x63	; 99
    41ce:	31 f0       	breq	.+12     	; 0x41dc <vfprintf+0x45c>
    41d0:	83 37       	cpi	r24, 0x73	; 115
    41d2:	79 f0       	breq	.+30     	; 0x41f2 <vfprintf+0x472>
    41d4:	83 35       	cpi	r24, 0x53	; 83
    41d6:	09 f0       	breq	.+2      	; 0x41da <vfprintf+0x45a>
    41d8:	58 c0       	rjmp	.+176    	; 0x428a <vfprintf+0x50a>
    41da:	21 c0       	rjmp	.+66     	; 0x421e <vfprintf+0x49e>
    41dc:	56 01       	movw	r10, r12
    41de:	72 e0       	ldi	r23, 0x02	; 2
    41e0:	a7 0e       	add	r10, r23
    41e2:	b1 1c       	adc	r11, r1
    41e4:	f6 01       	movw	r30, r12
    41e6:	80 81       	ld	r24, Z
    41e8:	89 83       	std	Y+1, r24	; 0x01
    41ea:	01 e0       	ldi	r16, 0x01	; 1
    41ec:	10 e0       	ldi	r17, 0x00	; 0
    41ee:	64 01       	movw	r12, r8
    41f0:	14 c0       	rjmp	.+40     	; 0x421a <vfprintf+0x49a>
    41f2:	56 01       	movw	r10, r12
    41f4:	f2 e0       	ldi	r31, 0x02	; 2
    41f6:	af 0e       	add	r10, r31
    41f8:	b1 1c       	adc	r11, r1
    41fa:	f6 01       	movw	r30, r12
    41fc:	c0 80       	ld	r12, Z
    41fe:	d1 80       	ldd	r13, Z+1	; 0x01
    4200:	26 ff       	sbrs	r18, 6
    4202:	03 c0       	rjmp	.+6      	; 0x420a <vfprintf+0x48a>
    4204:	61 2f       	mov	r22, r17
    4206:	70 e0       	ldi	r23, 0x00	; 0
    4208:	02 c0       	rjmp	.+4      	; 0x420e <vfprintf+0x48e>
    420a:	6f ef       	ldi	r22, 0xFF	; 255
    420c:	7f ef       	ldi	r23, 0xFF	; 255
    420e:	c6 01       	movw	r24, r12
    4210:	2b 8b       	std	Y+19, r18	; 0x13
    4212:	0e 94 5b 23 	call	0x46b6	; 0x46b6 <strnlen>
    4216:	8c 01       	movw	r16, r24
    4218:	2b 89       	ldd	r18, Y+19	; 0x13
    421a:	2f 77       	andi	r18, 0x7F	; 127
    421c:	15 c0       	rjmp	.+42     	; 0x4248 <vfprintf+0x4c8>
    421e:	56 01       	movw	r10, r12
    4220:	f2 e0       	ldi	r31, 0x02	; 2
    4222:	af 0e       	add	r10, r31
    4224:	b1 1c       	adc	r11, r1
    4226:	f6 01       	movw	r30, r12
    4228:	c0 80       	ld	r12, Z
    422a:	d1 80       	ldd	r13, Z+1	; 0x01
    422c:	26 ff       	sbrs	r18, 6
    422e:	03 c0       	rjmp	.+6      	; 0x4236 <vfprintf+0x4b6>
    4230:	61 2f       	mov	r22, r17
    4232:	70 e0       	ldi	r23, 0x00	; 0
    4234:	02 c0       	rjmp	.+4      	; 0x423a <vfprintf+0x4ba>
    4236:	6f ef       	ldi	r22, 0xFF	; 255
    4238:	7f ef       	ldi	r23, 0xFF	; 255
    423a:	c6 01       	movw	r24, r12
    423c:	2b 8b       	std	Y+19, r18	; 0x13
    423e:	0e 94 50 23 	call	0x46a0	; 0x46a0 <strnlen_P>
    4242:	8c 01       	movw	r16, r24
    4244:	2b 89       	ldd	r18, Y+19	; 0x13
    4246:	20 68       	ori	r18, 0x80	; 128
    4248:	72 2e       	mov	r7, r18
    424a:	23 fd       	sbrc	r18, 3
    424c:	1a c0       	rjmp	.+52     	; 0x4282 <vfprintf+0x502>
    424e:	85 2d       	mov	r24, r5
    4250:	90 e0       	ldi	r25, 0x00	; 0
    4252:	08 17       	cp	r16, r24
    4254:	19 07       	cpc	r17, r25
    4256:	a8 f4       	brcc	.+42     	; 0x4282 <vfprintf+0x502>
    4258:	b7 01       	movw	r22, r14
    425a:	80 e2       	ldi	r24, 0x20	; 32
    425c:	90 e0       	ldi	r25, 0x00	; 0
    425e:	0e 94 66 23 	call	0x46cc	; 0x46cc <fputc>
    4262:	5a 94       	dec	r5
    4264:	f4 cf       	rjmp	.-24     	; 0x424e <vfprintf+0x4ce>
    4266:	f6 01       	movw	r30, r12
    4268:	77 fc       	sbrc	r7, 7
    426a:	85 91       	lpm	r24, Z+
    426c:	77 fe       	sbrs	r7, 7
    426e:	81 91       	ld	r24, Z+
    4270:	6f 01       	movw	r12, r30
    4272:	b7 01       	movw	r22, r14
    4274:	90 e0       	ldi	r25, 0x00	; 0
    4276:	0e 94 66 23 	call	0x46cc	; 0x46cc <fputc>
    427a:	51 10       	cpse	r5, r1
    427c:	5a 94       	dec	r5
    427e:	01 50       	subi	r16, 0x01	; 1
    4280:	11 09       	sbc	r17, r1
    4282:	01 15       	cp	r16, r1
    4284:	11 05       	cpc	r17, r1
    4286:	79 f7       	brne	.-34     	; 0x4266 <vfprintf+0x4e6>
    4288:	e2 c0       	rjmp	.+452    	; 0x444e <vfprintf+0x6ce>
    428a:	84 36       	cpi	r24, 0x64	; 100
    428c:	11 f0       	breq	.+4      	; 0x4292 <vfprintf+0x512>
    428e:	89 36       	cpi	r24, 0x69	; 105
    4290:	51 f5       	brne	.+84     	; 0x42e6 <vfprintf+0x566>
    4292:	56 01       	movw	r10, r12
    4294:	27 ff       	sbrs	r18, 7
    4296:	09 c0       	rjmp	.+18     	; 0x42aa <vfprintf+0x52a>
    4298:	f4 e0       	ldi	r31, 0x04	; 4
    429a:	af 0e       	add	r10, r31
    429c:	b1 1c       	adc	r11, r1
    429e:	f6 01       	movw	r30, r12
    42a0:	60 81       	ld	r22, Z
    42a2:	71 81       	ldd	r23, Z+1	; 0x01
    42a4:	82 81       	ldd	r24, Z+2	; 0x02
    42a6:	93 81       	ldd	r25, Z+3	; 0x03
    42a8:	0a c0       	rjmp	.+20     	; 0x42be <vfprintf+0x53e>
    42aa:	f2 e0       	ldi	r31, 0x02	; 2
    42ac:	af 0e       	add	r10, r31
    42ae:	b1 1c       	adc	r11, r1
    42b0:	f6 01       	movw	r30, r12
    42b2:	60 81       	ld	r22, Z
    42b4:	71 81       	ldd	r23, Z+1	; 0x01
    42b6:	88 27       	eor	r24, r24
    42b8:	77 fd       	sbrc	r23, 7
    42ba:	80 95       	com	r24
    42bc:	98 2f       	mov	r25, r24
    42be:	02 2f       	mov	r16, r18
    42c0:	0f 76       	andi	r16, 0x6F	; 111
    42c2:	97 ff       	sbrs	r25, 7
    42c4:	08 c0       	rjmp	.+16     	; 0x42d6 <vfprintf+0x556>
    42c6:	90 95       	com	r25
    42c8:	80 95       	com	r24
    42ca:	70 95       	com	r23
    42cc:	61 95       	neg	r22
    42ce:	7f 4f       	sbci	r23, 0xFF	; 255
    42d0:	8f 4f       	sbci	r24, 0xFF	; 255
    42d2:	9f 4f       	sbci	r25, 0xFF	; 255
    42d4:	00 68       	ori	r16, 0x80	; 128
    42d6:	2a e0       	ldi	r18, 0x0A	; 10
    42d8:	30 e0       	ldi	r19, 0x00	; 0
    42da:	a4 01       	movw	r20, r8
    42dc:	0e 94 ba 23 	call	0x4774	; 0x4774 <__ultoa_invert>
    42e0:	c8 2e       	mov	r12, r24
    42e2:	c8 18       	sub	r12, r8
    42e4:	3e c0       	rjmp	.+124    	; 0x4362 <vfprintf+0x5e2>
    42e6:	02 2f       	mov	r16, r18
    42e8:	85 37       	cpi	r24, 0x75	; 117
    42ea:	21 f4       	brne	.+8      	; 0x42f4 <vfprintf+0x574>
    42ec:	0f 7e       	andi	r16, 0xEF	; 239
    42ee:	2a e0       	ldi	r18, 0x0A	; 10
    42f0:	30 e0       	ldi	r19, 0x00	; 0
    42f2:	1d c0       	rjmp	.+58     	; 0x432e <vfprintf+0x5ae>
    42f4:	09 7f       	andi	r16, 0xF9	; 249
    42f6:	8f 36       	cpi	r24, 0x6F	; 111
    42f8:	91 f0       	breq	.+36     	; 0x431e <vfprintf+0x59e>
    42fa:	18 f4       	brcc	.+6      	; 0x4302 <vfprintf+0x582>
    42fc:	88 35       	cpi	r24, 0x58	; 88
    42fe:	59 f0       	breq	.+22     	; 0x4316 <vfprintf+0x596>
    4300:	b0 c0       	rjmp	.+352    	; 0x4462 <vfprintf+0x6e2>
    4302:	80 37       	cpi	r24, 0x70	; 112
    4304:	19 f0       	breq	.+6      	; 0x430c <vfprintf+0x58c>
    4306:	88 37       	cpi	r24, 0x78	; 120
    4308:	11 f0       	breq	.+4      	; 0x430e <vfprintf+0x58e>
    430a:	ab c0       	rjmp	.+342    	; 0x4462 <vfprintf+0x6e2>
    430c:	00 61       	ori	r16, 0x10	; 16
    430e:	04 ff       	sbrs	r16, 4
    4310:	09 c0       	rjmp	.+18     	; 0x4324 <vfprintf+0x5a4>
    4312:	04 60       	ori	r16, 0x04	; 4
    4314:	07 c0       	rjmp	.+14     	; 0x4324 <vfprintf+0x5a4>
    4316:	24 ff       	sbrs	r18, 4
    4318:	08 c0       	rjmp	.+16     	; 0x432a <vfprintf+0x5aa>
    431a:	06 60       	ori	r16, 0x06	; 6
    431c:	06 c0       	rjmp	.+12     	; 0x432a <vfprintf+0x5aa>
    431e:	28 e0       	ldi	r18, 0x08	; 8
    4320:	30 e0       	ldi	r19, 0x00	; 0
    4322:	05 c0       	rjmp	.+10     	; 0x432e <vfprintf+0x5ae>
    4324:	20 e1       	ldi	r18, 0x10	; 16
    4326:	30 e0       	ldi	r19, 0x00	; 0
    4328:	02 c0       	rjmp	.+4      	; 0x432e <vfprintf+0x5ae>
    432a:	20 e1       	ldi	r18, 0x10	; 16
    432c:	32 e0       	ldi	r19, 0x02	; 2
    432e:	56 01       	movw	r10, r12
    4330:	07 ff       	sbrs	r16, 7
    4332:	09 c0       	rjmp	.+18     	; 0x4346 <vfprintf+0x5c6>
    4334:	f4 e0       	ldi	r31, 0x04	; 4
    4336:	af 0e       	add	r10, r31
    4338:	b1 1c       	adc	r11, r1
    433a:	f6 01       	movw	r30, r12
    433c:	60 81       	ld	r22, Z
    433e:	71 81       	ldd	r23, Z+1	; 0x01
    4340:	82 81       	ldd	r24, Z+2	; 0x02
    4342:	93 81       	ldd	r25, Z+3	; 0x03
    4344:	08 c0       	rjmp	.+16     	; 0x4356 <vfprintf+0x5d6>
    4346:	f2 e0       	ldi	r31, 0x02	; 2
    4348:	af 0e       	add	r10, r31
    434a:	b1 1c       	adc	r11, r1
    434c:	f6 01       	movw	r30, r12
    434e:	60 81       	ld	r22, Z
    4350:	71 81       	ldd	r23, Z+1	; 0x01
    4352:	80 e0       	ldi	r24, 0x00	; 0
    4354:	90 e0       	ldi	r25, 0x00	; 0
    4356:	a4 01       	movw	r20, r8
    4358:	0e 94 ba 23 	call	0x4774	; 0x4774 <__ultoa_invert>
    435c:	c8 2e       	mov	r12, r24
    435e:	c8 18       	sub	r12, r8
    4360:	0f 77       	andi	r16, 0x7F	; 127
    4362:	06 ff       	sbrs	r16, 6
    4364:	0b c0       	rjmp	.+22     	; 0x437c <vfprintf+0x5fc>
    4366:	20 2f       	mov	r18, r16
    4368:	2e 7f       	andi	r18, 0xFE	; 254
    436a:	c1 16       	cp	r12, r17
    436c:	50 f4       	brcc	.+20     	; 0x4382 <vfprintf+0x602>
    436e:	04 ff       	sbrs	r16, 4
    4370:	0a c0       	rjmp	.+20     	; 0x4386 <vfprintf+0x606>
    4372:	02 fd       	sbrc	r16, 2
    4374:	08 c0       	rjmp	.+16     	; 0x4386 <vfprintf+0x606>
    4376:	20 2f       	mov	r18, r16
    4378:	2e 7e       	andi	r18, 0xEE	; 238
    437a:	05 c0       	rjmp	.+10     	; 0x4386 <vfprintf+0x606>
    437c:	dc 2c       	mov	r13, r12
    437e:	20 2f       	mov	r18, r16
    4380:	03 c0       	rjmp	.+6      	; 0x4388 <vfprintf+0x608>
    4382:	dc 2c       	mov	r13, r12
    4384:	01 c0       	rjmp	.+2      	; 0x4388 <vfprintf+0x608>
    4386:	d1 2e       	mov	r13, r17
    4388:	24 ff       	sbrs	r18, 4
    438a:	0d c0       	rjmp	.+26     	; 0x43a6 <vfprintf+0x626>
    438c:	fe 01       	movw	r30, r28
    438e:	ec 0d       	add	r30, r12
    4390:	f1 1d       	adc	r31, r1
    4392:	80 81       	ld	r24, Z
    4394:	80 33       	cpi	r24, 0x30	; 48
    4396:	11 f4       	brne	.+4      	; 0x439c <vfprintf+0x61c>
    4398:	29 7e       	andi	r18, 0xE9	; 233
    439a:	09 c0       	rjmp	.+18     	; 0x43ae <vfprintf+0x62e>
    439c:	22 ff       	sbrs	r18, 2
    439e:	06 c0       	rjmp	.+12     	; 0x43ac <vfprintf+0x62c>
    43a0:	d3 94       	inc	r13
    43a2:	d3 94       	inc	r13
    43a4:	04 c0       	rjmp	.+8      	; 0x43ae <vfprintf+0x62e>
    43a6:	82 2f       	mov	r24, r18
    43a8:	86 78       	andi	r24, 0x86	; 134
    43aa:	09 f0       	breq	.+2      	; 0x43ae <vfprintf+0x62e>
    43ac:	d3 94       	inc	r13
    43ae:	23 fd       	sbrc	r18, 3
    43b0:	13 c0       	rjmp	.+38     	; 0x43d8 <vfprintf+0x658>
    43b2:	20 ff       	sbrs	r18, 0
    43b4:	06 c0       	rjmp	.+12     	; 0x43c2 <vfprintf+0x642>
    43b6:	1c 2d       	mov	r17, r12
    43b8:	d5 14       	cp	r13, r5
    43ba:	18 f4       	brcc	.+6      	; 0x43c2 <vfprintf+0x642>
    43bc:	15 0d       	add	r17, r5
    43be:	1d 19       	sub	r17, r13
    43c0:	d5 2c       	mov	r13, r5
    43c2:	d5 14       	cp	r13, r5
    43c4:	68 f4       	brcc	.+26     	; 0x43e0 <vfprintf+0x660>
    43c6:	b7 01       	movw	r22, r14
    43c8:	80 e2       	ldi	r24, 0x20	; 32
    43ca:	90 e0       	ldi	r25, 0x00	; 0
    43cc:	2b 8b       	std	Y+19, r18	; 0x13
    43ce:	0e 94 66 23 	call	0x46cc	; 0x46cc <fputc>
    43d2:	d3 94       	inc	r13
    43d4:	2b 89       	ldd	r18, Y+19	; 0x13
    43d6:	f5 cf       	rjmp	.-22     	; 0x43c2 <vfprintf+0x642>
    43d8:	d5 14       	cp	r13, r5
    43da:	10 f4       	brcc	.+4      	; 0x43e0 <vfprintf+0x660>
    43dc:	5d 18       	sub	r5, r13
    43de:	01 c0       	rjmp	.+2      	; 0x43e2 <vfprintf+0x662>
    43e0:	51 2c       	mov	r5, r1
    43e2:	24 ff       	sbrs	r18, 4
    43e4:	12 c0       	rjmp	.+36     	; 0x440a <vfprintf+0x68a>
    43e6:	b7 01       	movw	r22, r14
    43e8:	80 e3       	ldi	r24, 0x30	; 48
    43ea:	90 e0       	ldi	r25, 0x00	; 0
    43ec:	2b 8b       	std	Y+19, r18	; 0x13
    43ee:	0e 94 66 23 	call	0x46cc	; 0x46cc <fputc>
    43f2:	2b 89       	ldd	r18, Y+19	; 0x13
    43f4:	22 ff       	sbrs	r18, 2
    43f6:	17 c0       	rjmp	.+46     	; 0x4426 <vfprintf+0x6a6>
    43f8:	21 ff       	sbrs	r18, 1
    43fa:	03 c0       	rjmp	.+6      	; 0x4402 <vfprintf+0x682>
    43fc:	88 e5       	ldi	r24, 0x58	; 88
    43fe:	90 e0       	ldi	r25, 0x00	; 0
    4400:	02 c0       	rjmp	.+4      	; 0x4406 <vfprintf+0x686>
    4402:	88 e7       	ldi	r24, 0x78	; 120
    4404:	90 e0       	ldi	r25, 0x00	; 0
    4406:	b7 01       	movw	r22, r14
    4408:	0c c0       	rjmp	.+24     	; 0x4422 <vfprintf+0x6a2>
    440a:	82 2f       	mov	r24, r18
    440c:	86 78       	andi	r24, 0x86	; 134
    440e:	59 f0       	breq	.+22     	; 0x4426 <vfprintf+0x6a6>
    4410:	21 fd       	sbrc	r18, 1
    4412:	02 c0       	rjmp	.+4      	; 0x4418 <vfprintf+0x698>
    4414:	80 e2       	ldi	r24, 0x20	; 32
    4416:	01 c0       	rjmp	.+2      	; 0x441a <vfprintf+0x69a>
    4418:	8b e2       	ldi	r24, 0x2B	; 43
    441a:	27 fd       	sbrc	r18, 7
    441c:	8d e2       	ldi	r24, 0x2D	; 45
    441e:	b7 01       	movw	r22, r14
    4420:	90 e0       	ldi	r25, 0x00	; 0
    4422:	0e 94 66 23 	call	0x46cc	; 0x46cc <fputc>
    4426:	c1 16       	cp	r12, r17
    4428:	38 f4       	brcc	.+14     	; 0x4438 <vfprintf+0x6b8>
    442a:	b7 01       	movw	r22, r14
    442c:	80 e3       	ldi	r24, 0x30	; 48
    442e:	90 e0       	ldi	r25, 0x00	; 0
    4430:	0e 94 66 23 	call	0x46cc	; 0x46cc <fputc>
    4434:	11 50       	subi	r17, 0x01	; 1
    4436:	f7 cf       	rjmp	.-18     	; 0x4426 <vfprintf+0x6a6>
    4438:	ca 94       	dec	r12
    443a:	f4 01       	movw	r30, r8
    443c:	ec 0d       	add	r30, r12
    443e:	f1 1d       	adc	r31, r1
    4440:	80 81       	ld	r24, Z
    4442:	b7 01       	movw	r22, r14
    4444:	90 e0       	ldi	r25, 0x00	; 0
    4446:	0e 94 66 23 	call	0x46cc	; 0x46cc <fputc>
    444a:	c1 10       	cpse	r12, r1
    444c:	f5 cf       	rjmp	.-22     	; 0x4438 <vfprintf+0x6b8>
    444e:	55 20       	and	r5, r5
    4450:	09 f4       	brne	.+2      	; 0x4454 <vfprintf+0x6d4>
    4452:	c2 cc       	rjmp	.-1660   	; 0x3dd8 <vfprintf+0x58>
    4454:	b7 01       	movw	r22, r14
    4456:	80 e2       	ldi	r24, 0x20	; 32
    4458:	90 e0       	ldi	r25, 0x00	; 0
    445a:	0e 94 66 23 	call	0x46cc	; 0x46cc <fputc>
    445e:	5a 94       	dec	r5
    4460:	f6 cf       	rjmp	.-20     	; 0x444e <vfprintf+0x6ce>
    4462:	f7 01       	movw	r30, r14
    4464:	86 81       	ldd	r24, Z+6	; 0x06
    4466:	97 81       	ldd	r25, Z+7	; 0x07
    4468:	02 c0       	rjmp	.+4      	; 0x446e <vfprintf+0x6ee>
    446a:	8f ef       	ldi	r24, 0xFF	; 255
    446c:	9f ef       	ldi	r25, 0xFF	; 255
    446e:	63 96       	adiw	r28, 0x13	; 19
    4470:	e2 e1       	ldi	r30, 0x12	; 18
    4472:	0c 94 5d 22 	jmp	0x44ba	; 0x44ba <__epilogue_restores__>

00004476 <__tablejump2__>:
    4476:	ee 0f       	add	r30, r30
    4478:	ff 1f       	adc	r31, r31

0000447a <__tablejump__>:
    447a:	05 90       	lpm	r0, Z+
    447c:	f4 91       	lpm	r31, Z
    447e:	e0 2d       	mov	r30, r0
    4480:	09 94       	ijmp

00004482 <__prologue_saves__>:
    4482:	2f 92       	push	r2
    4484:	3f 92       	push	r3
    4486:	4f 92       	push	r4
    4488:	5f 92       	push	r5
    448a:	6f 92       	push	r6
    448c:	7f 92       	push	r7
    448e:	8f 92       	push	r8
    4490:	9f 92       	push	r9
    4492:	af 92       	push	r10
    4494:	bf 92       	push	r11
    4496:	cf 92       	push	r12
    4498:	df 92       	push	r13
    449a:	ef 92       	push	r14
    449c:	ff 92       	push	r15
    449e:	0f 93       	push	r16
    44a0:	1f 93       	push	r17
    44a2:	cf 93       	push	r28
    44a4:	df 93       	push	r29
    44a6:	cd b7       	in	r28, 0x3d	; 61
    44a8:	de b7       	in	r29, 0x3e	; 62
    44aa:	ca 1b       	sub	r28, r26
    44ac:	db 0b       	sbc	r29, r27
    44ae:	0f b6       	in	r0, 0x3f	; 63
    44b0:	f8 94       	cli
    44b2:	de bf       	out	0x3e, r29	; 62
    44b4:	0f be       	out	0x3f, r0	; 63
    44b6:	cd bf       	out	0x3d, r28	; 61
    44b8:	09 94       	ijmp

000044ba <__epilogue_restores__>:
    44ba:	2a 88       	ldd	r2, Y+18	; 0x12
    44bc:	39 88       	ldd	r3, Y+17	; 0x11
    44be:	48 88       	ldd	r4, Y+16	; 0x10
    44c0:	5f 84       	ldd	r5, Y+15	; 0x0f
    44c2:	6e 84       	ldd	r6, Y+14	; 0x0e
    44c4:	7d 84       	ldd	r7, Y+13	; 0x0d
    44c6:	8c 84       	ldd	r8, Y+12	; 0x0c
    44c8:	9b 84       	ldd	r9, Y+11	; 0x0b
    44ca:	aa 84       	ldd	r10, Y+10	; 0x0a
    44cc:	b9 84       	ldd	r11, Y+9	; 0x09
    44ce:	c8 84       	ldd	r12, Y+8	; 0x08
    44d0:	df 80       	ldd	r13, Y+7	; 0x07
    44d2:	ee 80       	ldd	r14, Y+6	; 0x06
    44d4:	fd 80       	ldd	r15, Y+5	; 0x05
    44d6:	0c 81       	ldd	r16, Y+4	; 0x04
    44d8:	1b 81       	ldd	r17, Y+3	; 0x03
    44da:	aa 81       	ldd	r26, Y+2	; 0x02
    44dc:	b9 81       	ldd	r27, Y+1	; 0x01
    44de:	ce 0f       	add	r28, r30
    44e0:	d1 1d       	adc	r29, r1
    44e2:	0f b6       	in	r0, 0x3f	; 63
    44e4:	f8 94       	cli
    44e6:	de bf       	out	0x3e, r29	; 62
    44e8:	0f be       	out	0x3f, r0	; 63
    44ea:	cd bf       	out	0x3d, r28	; 61
    44ec:	ed 01       	movw	r28, r26
    44ee:	08 95       	ret

000044f0 <__ftoa_engine>:
    44f0:	28 30       	cpi	r18, 0x08	; 8
    44f2:	08 f0       	brcs	.+2      	; 0x44f6 <__ftoa_engine+0x6>
    44f4:	27 e0       	ldi	r18, 0x07	; 7
    44f6:	33 27       	eor	r19, r19
    44f8:	da 01       	movw	r26, r20
    44fa:	99 0f       	add	r25, r25
    44fc:	31 1d       	adc	r19, r1
    44fe:	87 fd       	sbrc	r24, 7
    4500:	91 60       	ori	r25, 0x01	; 1
    4502:	00 96       	adiw	r24, 0x00	; 0
    4504:	61 05       	cpc	r22, r1
    4506:	71 05       	cpc	r23, r1
    4508:	39 f4       	brne	.+14     	; 0x4518 <__ftoa_engine+0x28>
    450a:	32 60       	ori	r19, 0x02	; 2
    450c:	2e 5f       	subi	r18, 0xFE	; 254
    450e:	3d 93       	st	X+, r19
    4510:	30 e3       	ldi	r19, 0x30	; 48
    4512:	2a 95       	dec	r18
    4514:	e1 f7       	brne	.-8      	; 0x450e <__ftoa_engine+0x1e>
    4516:	08 95       	ret
    4518:	9f 3f       	cpi	r25, 0xFF	; 255
    451a:	30 f0       	brcs	.+12     	; 0x4528 <__ftoa_engine+0x38>
    451c:	80 38       	cpi	r24, 0x80	; 128
    451e:	71 05       	cpc	r23, r1
    4520:	61 05       	cpc	r22, r1
    4522:	09 f0       	breq	.+2      	; 0x4526 <__ftoa_engine+0x36>
    4524:	3c 5f       	subi	r19, 0xFC	; 252
    4526:	3c 5f       	subi	r19, 0xFC	; 252
    4528:	3d 93       	st	X+, r19
    452a:	91 30       	cpi	r25, 0x01	; 1
    452c:	08 f0       	brcs	.+2      	; 0x4530 <__ftoa_engine+0x40>
    452e:	80 68       	ori	r24, 0x80	; 128
    4530:	91 1d       	adc	r25, r1
    4532:	df 93       	push	r29
    4534:	cf 93       	push	r28
    4536:	1f 93       	push	r17
    4538:	0f 93       	push	r16
    453a:	ff 92       	push	r15
    453c:	ef 92       	push	r14
    453e:	19 2f       	mov	r17, r25
    4540:	98 7f       	andi	r25, 0xF8	; 248
    4542:	96 95       	lsr	r25
    4544:	e9 2f       	mov	r30, r25
    4546:	96 95       	lsr	r25
    4548:	96 95       	lsr	r25
    454a:	e9 0f       	add	r30, r25
    454c:	ff 27       	eor	r31, r31
    454e:	ee 58       	subi	r30, 0x8E	; 142
    4550:	fb 4f       	sbci	r31, 0xFB	; 251
    4552:	99 27       	eor	r25, r25
    4554:	33 27       	eor	r19, r19
    4556:	ee 24       	eor	r14, r14
    4558:	ff 24       	eor	r15, r15
    455a:	a7 01       	movw	r20, r14
    455c:	e7 01       	movw	r28, r14
    455e:	05 90       	lpm	r0, Z+
    4560:	08 94       	sec
    4562:	07 94       	ror	r0
    4564:	28 f4       	brcc	.+10     	; 0x4570 <__ftoa_engine+0x80>
    4566:	36 0f       	add	r19, r22
    4568:	e7 1e       	adc	r14, r23
    456a:	f8 1e       	adc	r15, r24
    456c:	49 1f       	adc	r20, r25
    456e:	51 1d       	adc	r21, r1
    4570:	66 0f       	add	r22, r22
    4572:	77 1f       	adc	r23, r23
    4574:	88 1f       	adc	r24, r24
    4576:	99 1f       	adc	r25, r25
    4578:	06 94       	lsr	r0
    457a:	a1 f7       	brne	.-24     	; 0x4564 <__ftoa_engine+0x74>
    457c:	05 90       	lpm	r0, Z+
    457e:	07 94       	ror	r0
    4580:	28 f4       	brcc	.+10     	; 0x458c <__ftoa_engine+0x9c>
    4582:	e7 0e       	add	r14, r23
    4584:	f8 1e       	adc	r15, r24
    4586:	49 1f       	adc	r20, r25
    4588:	56 1f       	adc	r21, r22
    458a:	c1 1d       	adc	r28, r1
    458c:	77 0f       	add	r23, r23
    458e:	88 1f       	adc	r24, r24
    4590:	99 1f       	adc	r25, r25
    4592:	66 1f       	adc	r22, r22
    4594:	06 94       	lsr	r0
    4596:	a1 f7       	brne	.-24     	; 0x4580 <__ftoa_engine+0x90>
    4598:	05 90       	lpm	r0, Z+
    459a:	07 94       	ror	r0
    459c:	28 f4       	brcc	.+10     	; 0x45a8 <__ftoa_engine+0xb8>
    459e:	f8 0e       	add	r15, r24
    45a0:	49 1f       	adc	r20, r25
    45a2:	56 1f       	adc	r21, r22
    45a4:	c7 1f       	adc	r28, r23
    45a6:	d1 1d       	adc	r29, r1
    45a8:	88 0f       	add	r24, r24
    45aa:	99 1f       	adc	r25, r25
    45ac:	66 1f       	adc	r22, r22
    45ae:	77 1f       	adc	r23, r23
    45b0:	06 94       	lsr	r0
    45b2:	a1 f7       	brne	.-24     	; 0x459c <__ftoa_engine+0xac>
    45b4:	05 90       	lpm	r0, Z+
    45b6:	07 94       	ror	r0
    45b8:	20 f4       	brcc	.+8      	; 0x45c2 <__ftoa_engine+0xd2>
    45ba:	49 0f       	add	r20, r25
    45bc:	56 1f       	adc	r21, r22
    45be:	c7 1f       	adc	r28, r23
    45c0:	d8 1f       	adc	r29, r24
    45c2:	99 0f       	add	r25, r25
    45c4:	66 1f       	adc	r22, r22
    45c6:	77 1f       	adc	r23, r23
    45c8:	88 1f       	adc	r24, r24
    45ca:	06 94       	lsr	r0
    45cc:	a9 f7       	brne	.-22     	; 0x45b8 <__ftoa_engine+0xc8>
    45ce:	84 91       	lpm	r24, Z
    45d0:	10 95       	com	r17
    45d2:	17 70       	andi	r17, 0x07	; 7
    45d4:	41 f0       	breq	.+16     	; 0x45e6 <__ftoa_engine+0xf6>
    45d6:	d6 95       	lsr	r29
    45d8:	c7 95       	ror	r28
    45da:	57 95       	ror	r21
    45dc:	47 95       	ror	r20
    45de:	f7 94       	ror	r15
    45e0:	e7 94       	ror	r14
    45e2:	1a 95       	dec	r17
    45e4:	c1 f7       	brne	.-16     	; 0x45d6 <__ftoa_engine+0xe6>
    45e6:	e8 e1       	ldi	r30, 0x18	; 24
    45e8:	f4 e0       	ldi	r31, 0x04	; 4
    45ea:	68 94       	set
    45ec:	15 90       	lpm	r1, Z+
    45ee:	15 91       	lpm	r17, Z+
    45f0:	35 91       	lpm	r19, Z+
    45f2:	65 91       	lpm	r22, Z+
    45f4:	95 91       	lpm	r25, Z+
    45f6:	05 90       	lpm	r0, Z+
    45f8:	7f e2       	ldi	r23, 0x2F	; 47
    45fa:	73 95       	inc	r23
    45fc:	e1 18       	sub	r14, r1
    45fe:	f1 0a       	sbc	r15, r17
    4600:	43 0b       	sbc	r20, r19
    4602:	56 0b       	sbc	r21, r22
    4604:	c9 0b       	sbc	r28, r25
    4606:	d0 09       	sbc	r29, r0
    4608:	c0 f7       	brcc	.-16     	; 0x45fa <__ftoa_engine+0x10a>
    460a:	e1 0c       	add	r14, r1
    460c:	f1 1e       	adc	r15, r17
    460e:	43 1f       	adc	r20, r19
    4610:	56 1f       	adc	r21, r22
    4612:	c9 1f       	adc	r28, r25
    4614:	d0 1d       	adc	r29, r0
    4616:	7e f4       	brtc	.+30     	; 0x4636 <__ftoa_engine+0x146>
    4618:	70 33       	cpi	r23, 0x30	; 48
    461a:	11 f4       	brne	.+4      	; 0x4620 <__ftoa_engine+0x130>
    461c:	8a 95       	dec	r24
    461e:	e6 cf       	rjmp	.-52     	; 0x45ec <__ftoa_engine+0xfc>
    4620:	e8 94       	clt
    4622:	01 50       	subi	r16, 0x01	; 1
    4624:	30 f0       	brcs	.+12     	; 0x4632 <__ftoa_engine+0x142>
    4626:	08 0f       	add	r16, r24
    4628:	0a f4       	brpl	.+2      	; 0x462c <__ftoa_engine+0x13c>
    462a:	00 27       	eor	r16, r16
    462c:	02 17       	cp	r16, r18
    462e:	08 f4       	brcc	.+2      	; 0x4632 <__ftoa_engine+0x142>
    4630:	20 2f       	mov	r18, r16
    4632:	23 95       	inc	r18
    4634:	02 2f       	mov	r16, r18
    4636:	7a 33       	cpi	r23, 0x3A	; 58
    4638:	28 f0       	brcs	.+10     	; 0x4644 <__ftoa_engine+0x154>
    463a:	79 e3       	ldi	r23, 0x39	; 57
    463c:	7d 93       	st	X+, r23
    463e:	2a 95       	dec	r18
    4640:	e9 f7       	brne	.-6      	; 0x463c <__ftoa_engine+0x14c>
    4642:	10 c0       	rjmp	.+32     	; 0x4664 <__ftoa_engine+0x174>
    4644:	7d 93       	st	X+, r23
    4646:	2a 95       	dec	r18
    4648:	89 f6       	brne	.-94     	; 0x45ec <__ftoa_engine+0xfc>
    464a:	06 94       	lsr	r0
    464c:	97 95       	ror	r25
    464e:	67 95       	ror	r22
    4650:	37 95       	ror	r19
    4652:	17 95       	ror	r17
    4654:	17 94       	ror	r1
    4656:	e1 18       	sub	r14, r1
    4658:	f1 0a       	sbc	r15, r17
    465a:	43 0b       	sbc	r20, r19
    465c:	56 0b       	sbc	r21, r22
    465e:	c9 0b       	sbc	r28, r25
    4660:	d0 09       	sbc	r29, r0
    4662:	98 f0       	brcs	.+38     	; 0x468a <__ftoa_engine+0x19a>
    4664:	23 95       	inc	r18
    4666:	7e 91       	ld	r23, -X
    4668:	73 95       	inc	r23
    466a:	7a 33       	cpi	r23, 0x3A	; 58
    466c:	08 f0       	brcs	.+2      	; 0x4670 <__ftoa_engine+0x180>
    466e:	70 e3       	ldi	r23, 0x30	; 48
    4670:	7c 93       	st	X, r23
    4672:	20 13       	cpse	r18, r16
    4674:	b8 f7       	brcc	.-18     	; 0x4664 <__ftoa_engine+0x174>
    4676:	7e 91       	ld	r23, -X
    4678:	70 61       	ori	r23, 0x10	; 16
    467a:	7d 93       	st	X+, r23
    467c:	30 f0       	brcs	.+12     	; 0x468a <__ftoa_engine+0x19a>
    467e:	83 95       	inc	r24
    4680:	71 e3       	ldi	r23, 0x31	; 49
    4682:	7d 93       	st	X+, r23
    4684:	70 e3       	ldi	r23, 0x30	; 48
    4686:	2a 95       	dec	r18
    4688:	e1 f7       	brne	.-8      	; 0x4682 <__ftoa_engine+0x192>
    468a:	11 24       	eor	r1, r1
    468c:	ef 90       	pop	r14
    468e:	ff 90       	pop	r15
    4690:	0f 91       	pop	r16
    4692:	1f 91       	pop	r17
    4694:	cf 91       	pop	r28
    4696:	df 91       	pop	r29
    4698:	99 27       	eor	r25, r25
    469a:	87 fd       	sbrc	r24, 7
    469c:	90 95       	com	r25
    469e:	08 95       	ret

000046a0 <strnlen_P>:
    46a0:	fc 01       	movw	r30, r24
    46a2:	05 90       	lpm	r0, Z+
    46a4:	61 50       	subi	r22, 0x01	; 1
    46a6:	70 40       	sbci	r23, 0x00	; 0
    46a8:	01 10       	cpse	r0, r1
    46aa:	d8 f7       	brcc	.-10     	; 0x46a2 <strnlen_P+0x2>
    46ac:	80 95       	com	r24
    46ae:	90 95       	com	r25
    46b0:	8e 0f       	add	r24, r30
    46b2:	9f 1f       	adc	r25, r31
    46b4:	08 95       	ret

000046b6 <strnlen>:
    46b6:	fc 01       	movw	r30, r24
    46b8:	61 50       	subi	r22, 0x01	; 1
    46ba:	70 40       	sbci	r23, 0x00	; 0
    46bc:	01 90       	ld	r0, Z+
    46be:	01 10       	cpse	r0, r1
    46c0:	d8 f7       	brcc	.-10     	; 0x46b8 <strnlen+0x2>
    46c2:	80 95       	com	r24
    46c4:	90 95       	com	r25
    46c6:	8e 0f       	add	r24, r30
    46c8:	9f 1f       	adc	r25, r31
    46ca:	08 95       	ret

000046cc <fputc>:
    46cc:	0f 93       	push	r16
    46ce:	1f 93       	push	r17
    46d0:	cf 93       	push	r28
    46d2:	df 93       	push	r29
    46d4:	18 2f       	mov	r17, r24
    46d6:	09 2f       	mov	r16, r25
    46d8:	eb 01       	movw	r28, r22
    46da:	8b 81       	ldd	r24, Y+3	; 0x03
    46dc:	81 fd       	sbrc	r24, 1
    46de:	03 c0       	rjmp	.+6      	; 0x46e6 <fputc+0x1a>
    46e0:	8f ef       	ldi	r24, 0xFF	; 255
    46e2:	9f ef       	ldi	r25, 0xFF	; 255
    46e4:	20 c0       	rjmp	.+64     	; 0x4726 <fputc+0x5a>
    46e6:	82 ff       	sbrs	r24, 2
    46e8:	10 c0       	rjmp	.+32     	; 0x470a <fputc+0x3e>
    46ea:	4e 81       	ldd	r20, Y+6	; 0x06
    46ec:	5f 81       	ldd	r21, Y+7	; 0x07
    46ee:	2c 81       	ldd	r18, Y+4	; 0x04
    46f0:	3d 81       	ldd	r19, Y+5	; 0x05
    46f2:	42 17       	cp	r20, r18
    46f4:	53 07       	cpc	r21, r19
    46f6:	7c f4       	brge	.+30     	; 0x4716 <fputc+0x4a>
    46f8:	e8 81       	ld	r30, Y
    46fa:	f9 81       	ldd	r31, Y+1	; 0x01
    46fc:	9f 01       	movw	r18, r30
    46fe:	2f 5f       	subi	r18, 0xFF	; 255
    4700:	3f 4f       	sbci	r19, 0xFF	; 255
    4702:	39 83       	std	Y+1, r19	; 0x01
    4704:	28 83       	st	Y, r18
    4706:	10 83       	st	Z, r17
    4708:	06 c0       	rjmp	.+12     	; 0x4716 <fputc+0x4a>
    470a:	e8 85       	ldd	r30, Y+8	; 0x08
    470c:	f9 85       	ldd	r31, Y+9	; 0x09
    470e:	81 2f       	mov	r24, r17
    4710:	09 95       	icall
    4712:	89 2b       	or	r24, r25
    4714:	29 f7       	brne	.-54     	; 0x46e0 <fputc+0x14>
    4716:	2e 81       	ldd	r18, Y+6	; 0x06
    4718:	3f 81       	ldd	r19, Y+7	; 0x07
    471a:	2f 5f       	subi	r18, 0xFF	; 255
    471c:	3f 4f       	sbci	r19, 0xFF	; 255
    471e:	3f 83       	std	Y+7, r19	; 0x07
    4720:	2e 83       	std	Y+6, r18	; 0x06
    4722:	81 2f       	mov	r24, r17
    4724:	90 2f       	mov	r25, r16
    4726:	df 91       	pop	r29
    4728:	cf 91       	pop	r28
    472a:	1f 91       	pop	r17
    472c:	0f 91       	pop	r16
    472e:	08 95       	ret

00004730 <sprintf>:
    4730:	ae e0       	ldi	r26, 0x0E	; 14
    4732:	b0 e0       	ldi	r27, 0x00	; 0
    4734:	ee e9       	ldi	r30, 0x9E	; 158
    4736:	f3 e2       	ldi	r31, 0x23	; 35
    4738:	0c 94 4f 22 	jmp	0x449e	; 0x449e <__prologue_saves__+0x1c>
    473c:	0d 89       	ldd	r16, Y+21	; 0x15
    473e:	1e 89       	ldd	r17, Y+22	; 0x16
    4740:	86 e0       	ldi	r24, 0x06	; 6
    4742:	8c 83       	std	Y+4, r24	; 0x04
    4744:	1a 83       	std	Y+2, r17	; 0x02
    4746:	09 83       	std	Y+1, r16	; 0x01
    4748:	8f ef       	ldi	r24, 0xFF	; 255
    474a:	9f e7       	ldi	r25, 0x7F	; 127
    474c:	9e 83       	std	Y+6, r25	; 0x06
    474e:	8d 83       	std	Y+5, r24	; 0x05
    4750:	ae 01       	movw	r20, r28
    4752:	47 5e       	subi	r20, 0xE7	; 231
    4754:	5f 4f       	sbci	r21, 0xFF	; 255
    4756:	6f 89       	ldd	r22, Y+23	; 0x17
    4758:	78 8d       	ldd	r23, Y+24	; 0x18
    475a:	ce 01       	movw	r24, r28
    475c:	01 96       	adiw	r24, 0x01	; 1
    475e:	0e 94 c0 1e 	call	0x3d80	; 0x3d80 <vfprintf>
    4762:	ef 81       	ldd	r30, Y+7	; 0x07
    4764:	f8 85       	ldd	r31, Y+8	; 0x08
    4766:	e0 0f       	add	r30, r16
    4768:	f1 1f       	adc	r31, r17
    476a:	10 82       	st	Z, r1
    476c:	2e 96       	adiw	r28, 0x0e	; 14
    476e:	e4 e0       	ldi	r30, 0x04	; 4
    4770:	0c 94 6b 22 	jmp	0x44d6	; 0x44d6 <__epilogue_restores__+0x1c>

00004774 <__ultoa_invert>:
    4774:	fa 01       	movw	r30, r20
    4776:	aa 27       	eor	r26, r26
    4778:	28 30       	cpi	r18, 0x08	; 8
    477a:	51 f1       	breq	.+84     	; 0x47d0 <__ultoa_invert+0x5c>
    477c:	20 31       	cpi	r18, 0x10	; 16
    477e:	81 f1       	breq	.+96     	; 0x47e0 <__ultoa_invert+0x6c>
    4780:	e8 94       	clt
    4782:	6f 93       	push	r22
    4784:	6e 7f       	andi	r22, 0xFE	; 254
    4786:	6e 5f       	subi	r22, 0xFE	; 254
    4788:	7f 4f       	sbci	r23, 0xFF	; 255
    478a:	8f 4f       	sbci	r24, 0xFF	; 255
    478c:	9f 4f       	sbci	r25, 0xFF	; 255
    478e:	af 4f       	sbci	r26, 0xFF	; 255
    4790:	b1 e0       	ldi	r27, 0x01	; 1
    4792:	3e d0       	rcall	.+124    	; 0x4810 <__ultoa_invert+0x9c>
    4794:	b4 e0       	ldi	r27, 0x04	; 4
    4796:	3c d0       	rcall	.+120    	; 0x4810 <__ultoa_invert+0x9c>
    4798:	67 0f       	add	r22, r23
    479a:	78 1f       	adc	r23, r24
    479c:	89 1f       	adc	r24, r25
    479e:	9a 1f       	adc	r25, r26
    47a0:	a1 1d       	adc	r26, r1
    47a2:	68 0f       	add	r22, r24
    47a4:	79 1f       	adc	r23, r25
    47a6:	8a 1f       	adc	r24, r26
    47a8:	91 1d       	adc	r25, r1
    47aa:	a1 1d       	adc	r26, r1
    47ac:	6a 0f       	add	r22, r26
    47ae:	71 1d       	adc	r23, r1
    47b0:	81 1d       	adc	r24, r1
    47b2:	91 1d       	adc	r25, r1
    47b4:	a1 1d       	adc	r26, r1
    47b6:	20 d0       	rcall	.+64     	; 0x47f8 <__ultoa_invert+0x84>
    47b8:	09 f4       	brne	.+2      	; 0x47bc <__ultoa_invert+0x48>
    47ba:	68 94       	set
    47bc:	3f 91       	pop	r19
    47be:	2a e0       	ldi	r18, 0x0A	; 10
    47c0:	26 9f       	mul	r18, r22
    47c2:	11 24       	eor	r1, r1
    47c4:	30 19       	sub	r19, r0
    47c6:	30 5d       	subi	r19, 0xD0	; 208
    47c8:	31 93       	st	Z+, r19
    47ca:	de f6       	brtc	.-74     	; 0x4782 <__ultoa_invert+0xe>
    47cc:	cf 01       	movw	r24, r30
    47ce:	08 95       	ret
    47d0:	46 2f       	mov	r20, r22
    47d2:	47 70       	andi	r20, 0x07	; 7
    47d4:	40 5d       	subi	r20, 0xD0	; 208
    47d6:	41 93       	st	Z+, r20
    47d8:	b3 e0       	ldi	r27, 0x03	; 3
    47da:	0f d0       	rcall	.+30     	; 0x47fa <__ultoa_invert+0x86>
    47dc:	c9 f7       	brne	.-14     	; 0x47d0 <__ultoa_invert+0x5c>
    47de:	f6 cf       	rjmp	.-20     	; 0x47cc <__ultoa_invert+0x58>
    47e0:	46 2f       	mov	r20, r22
    47e2:	4f 70       	andi	r20, 0x0F	; 15
    47e4:	40 5d       	subi	r20, 0xD0	; 208
    47e6:	4a 33       	cpi	r20, 0x3A	; 58
    47e8:	18 f0       	brcs	.+6      	; 0x47f0 <__ultoa_invert+0x7c>
    47ea:	49 5d       	subi	r20, 0xD9	; 217
    47ec:	31 fd       	sbrc	r19, 1
    47ee:	40 52       	subi	r20, 0x20	; 32
    47f0:	41 93       	st	Z+, r20
    47f2:	02 d0       	rcall	.+4      	; 0x47f8 <__ultoa_invert+0x84>
    47f4:	a9 f7       	brne	.-22     	; 0x47e0 <__ultoa_invert+0x6c>
    47f6:	ea cf       	rjmp	.-44     	; 0x47cc <__ultoa_invert+0x58>
    47f8:	b4 e0       	ldi	r27, 0x04	; 4
    47fa:	a6 95       	lsr	r26
    47fc:	97 95       	ror	r25
    47fe:	87 95       	ror	r24
    4800:	77 95       	ror	r23
    4802:	67 95       	ror	r22
    4804:	ba 95       	dec	r27
    4806:	c9 f7       	brne	.-14     	; 0x47fa <__ultoa_invert+0x86>
    4808:	00 97       	sbiw	r24, 0x00	; 0
    480a:	61 05       	cpc	r22, r1
    480c:	71 05       	cpc	r23, r1
    480e:	08 95       	ret
    4810:	9b 01       	movw	r18, r22
    4812:	ac 01       	movw	r20, r24
    4814:	0a 2e       	mov	r0, r26
    4816:	06 94       	lsr	r0
    4818:	57 95       	ror	r21
    481a:	47 95       	ror	r20
    481c:	37 95       	ror	r19
    481e:	27 95       	ror	r18
    4820:	ba 95       	dec	r27
    4822:	c9 f7       	brne	.-14     	; 0x4816 <__ultoa_invert+0xa2>
    4824:	62 0f       	add	r22, r18
    4826:	73 1f       	adc	r23, r19
    4828:	84 1f       	adc	r24, r20
    482a:	95 1f       	adc	r25, r21
    482c:	a0 1d       	adc	r26, r0
    482e:	08 95       	ret

00004830 <__do_global_dtors>:
    4830:	15 e0       	ldi	r17, 0x05	; 5
    4832:	c4 e1       	ldi	r28, 0x14	; 20
    4834:	d5 e0       	ldi	r29, 0x05	; 5
    4836:	04 c0       	rjmp	.+8      	; 0x4840 <__do_global_dtors+0x10>
    4838:	fe 01       	movw	r30, r28
    483a:	0e 94 3d 22 	call	0x447a	; 0x447a <__tablejump__>
    483e:	22 96       	adiw	r28, 0x02	; 2
    4840:	c6 31       	cpi	r28, 0x16	; 22
    4842:	d1 07       	cpc	r29, r17
    4844:	c9 f7       	brne	.-14     	; 0x4838 <__do_global_dtors+0x8>
    4846:	f8 94       	cli

00004848 <__stop_program>:
    4848:	ff cf       	rjmp	.-2      	; 0x4848 <__stop_program>
