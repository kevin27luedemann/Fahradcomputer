
Fahradcomputer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000019e  00800100  000046ec  00004780  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000046ec  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000452  0080029e  0080029e  0000491e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000491e  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000002c8  00000000  00000000  0000497a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000060cc  00000000  00000000  00004c42  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001065  00000000  00000000  0000ad0e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001127  00000000  00000000  0000bd73  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000acc  00000000  00000000  0000ce9c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000d78  00000000  00000000  0000d968  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00004d8f  00000000  00000000  0000e6e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000002d0  00000000  00000000  0001346f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 8b 02 	jmp	0x516	; 0x516 <__dtors_end>
       4:	0c 94 b3 02 	jmp	0x566	; 0x566 <__bad_interrupt>
       8:	0c 94 b3 02 	jmp	0x566	; 0x566 <__bad_interrupt>
       c:	0c 94 b3 02 	jmp	0x566	; 0x566 <__bad_interrupt>
      10:	0c 94 b3 02 	jmp	0x566	; 0x566 <__bad_interrupt>
      14:	0c 94 b3 02 	jmp	0x566	; 0x566 <__bad_interrupt>
      18:	0c 94 b3 02 	jmp	0x566	; 0x566 <__bad_interrupt>
      1c:	0c 94 b3 02 	jmp	0x566	; 0x566 <__bad_interrupt>
      20:	0c 94 b3 02 	jmp	0x566	; 0x566 <__bad_interrupt>
      24:	0c 94 b9 13 	jmp	0x2772	; 0x2772 <__vector_9>
      28:	0c 94 b3 02 	jmp	0x566	; 0x566 <__bad_interrupt>
      2c:	0c 94 b3 02 	jmp	0x566	; 0x566 <__bad_interrupt>
      30:	0c 94 b3 02 	jmp	0x566	; 0x566 <__bad_interrupt>
      34:	0c 94 b3 02 	jmp	0x566	; 0x566 <__bad_interrupt>
      38:	0c 94 b3 02 	jmp	0x566	; 0x566 <__bad_interrupt>
      3c:	0c 94 b3 02 	jmp	0x566	; 0x566 <__bad_interrupt>
      40:	0c 94 b3 02 	jmp	0x566	; 0x566 <__bad_interrupt>
      44:	0c 94 b3 02 	jmp	0x566	; 0x566 <__bad_interrupt>
      48:	0c 94 b3 02 	jmp	0x566	; 0x566 <__bad_interrupt>
      4c:	0c 94 b3 02 	jmp	0x566	; 0x566 <__bad_interrupt>
      50:	0c 94 b3 02 	jmp	0x566	; 0x566 <__bad_interrupt>
      54:	0c 94 b3 02 	jmp	0x566	; 0x566 <__bad_interrupt>
      58:	0c 94 b3 02 	jmp	0x566	; 0x566 <__bad_interrupt>
      5c:	0c 94 b3 02 	jmp	0x566	; 0x566 <__bad_interrupt>
      60:	0c 94 b3 02 	jmp	0x566	; 0x566 <__bad_interrupt>
      64:	0c 94 b3 02 	jmp	0x566	; 0x566 <__bad_interrupt>
      68:	16 11       	cpse	r17, r6
      6a:	3e 11       	cpse	r19, r14
      6c:	68 11       	cpse	r22, r8
      6e:	93 11       	cpse	r25, r3
      70:	bd 11       	cpse	r27, r13
      72:	e6 11       	cpse	r30, r6
      74:	0e 12       	cpse	r0, r30
      76:	37 12       	cpse	r3, r23
      78:	af 12       	cpse	r10, r31
      7a:	da 12       	cpse	r13, r26
      7c:	14 16       	cp	r1, r20
      7e:	1b 16       	cp	r1, r27
      80:	22 16       	cp	r2, r18
      82:	29 16       	cp	r2, r25
      84:	30 16       	cp	r3, r16
      86:	37 16       	cp	r3, r23
      88:	3e 16       	cp	r3, r30
      8a:	45 16       	cp	r4, r21
      8c:	08 4a       	sbci	r16, 0xA8	; 168
      8e:	d7 3b       	cpi	r29, 0xB7	; 183
      90:	3b ce       	rjmp	.-906    	; 0xfffffd08 <__eeprom_end+0xff7efd08>
      92:	01 6e       	ori	r16, 0xE1	; 225
      94:	84 bc       	out	0x24, r8	; 36
      96:	bf fd       	.word	0xfdbf	; ????
      98:	c1 2f       	mov	r28, r17
      9a:	3d 6c       	ori	r19, 0xCD	; 205
      9c:	74 31       	cpi	r23, 0x14	; 20
      9e:	9a bd       	out	0x2a, r25	; 42
      a0:	56 83       	std	Z+6, r21	; 0x06
      a2:	3d da       	rcall	.-2950   	; 0xfffff51e <__eeprom_end+0xff7ef51e>
      a4:	3d 00       	.word	0x003d	; ????
      a6:	c7 7f       	andi	r28, 0xF7	; 247
      a8:	11 be       	out	0x31, r1	; 49
      aa:	d9 e4       	ldi	r29, 0x49	; 73
      ac:	bb 4c       	sbci	r27, 0xCB	; 203
      ae:	3e 91       	ld	r19, -X
      b0:	6b aa       	std	Y+51, r6	; 0x33
      b2:	aa be       	out	0x3a, r10	; 58
      b4:	00 00       	nop
      b6:	00 80       	ld	r0, Z
      b8:	3f 05       	cpc	r19, r15
      ba:	a8 4c       	sbci	r26, 0xC8	; 200
      bc:	cd b2       	in	r12, 0x1d	; 29
      be:	d4 4e       	sbci	r29, 0xE4	; 228
      c0:	b9 38       	cpi	r27, 0x89	; 137
      c2:	36 a9       	ldd	r19, Z+54	; 0x36
      c4:	02 0c       	add	r0, r2
      c6:	50 b9       	out	0x00, r21	; 0
      c8:	91 86       	std	Z+9, r9	; 0x09
      ca:	88 08       	sbc	r8, r8
      cc:	3c a6       	std	Y+44, r3	; 0x2c
      ce:	aa aa       	std	Y+50, r10	; 0x32
      d0:	2a be       	out	0x3a, r2	; 58
      d2:	00 00       	nop
      d4:	00 80       	ld	r0, Z
      d6:	3f 06       	cpc	r3, r31
      d8:	64 ec       	ldi	r22, 0xC4	; 196
      da:	1b 3c       	cpi	r17, 0xCB	; 203
      dc:	04 bc       	out	0x24, r0	; 36
      de:	16 3e       	cpi	r17, 0xE6	; 230
      e0:	3b e5       	ldi	r19, 0x5B	; 91
      e2:	b9 3c       	cpi	r27, 0xC9	; 201
      e4:	c9 3c       	cpi	r28, 0xC9	; 201
      e6:	37 c2       	rjmp	.+1134   	; 0x556 <__do_global_ctors+0xe>
      e8:	9e 5a       	subi	r25, 0xAE	; 174
      ea:	3d 66       	ori	r19, 0x6D	; 109
      ec:	04 98       	cbi	0x00, 4	; 0
      ee:	08 3e       	cpi	r16, 0xE8	; 232
      f0:	ea 69       	ori	r30, 0x9A	; 154
      f2:	aa aa       	std	Y+50, r10	; 0x32
      f4:	3e 00       	.word	0x003e	; ????
      f6:	00 00       	nop
      f8:	80 3f       	cpi	r24, 0xF0	; 240

000000fa <__trampolines_end>:
      fa:	00 e0       	ldi	r16, 0x00	; 0
      fc:	f8 fc       	.word	0xfcf8	; ????
      fe:	fe 1e       	adc	r15, r30
     100:	07 07       	cpc	r16, r23
     102:	07 07       	cpc	r16, r23
     104:	1e fe       	.word	0xfe1e	; ????
     106:	fc f8       	.word	0xf8fc	; ????
     108:	f0 00       	.word	0x00f0	; ????
     10a:	00 07       	cpc	r16, r16
     10c:	0f 3f       	cpi	r16, 0xFF	; 255
     10e:	3f 7c       	andi	r19, 0xCF	; 207
     110:	70 70       	andi	r23, 0x00	; 0
     112:	70 70       	andi	r23, 0x00	; 0
     114:	7c 3f       	cpi	r23, 0xFC	; 252
     116:	1f 1f       	adc	r17, r31
     118:	07 00       	.word	0x0007	; ????
     11a:	00 00       	nop
     11c:	00 06       	cpc	r0, r16
     11e:	07 07       	cpc	r16, r23
     120:	ff ff       	.word	0xffff	; ????
     122:	ff ff       	.word	0xffff	; ????
	...
     130:	7f 7f       	andi	r23, 0xFF	; 255
     132:	7f 7f       	andi	r23, 0xFF	; 255
     134:	00 00       	nop
     136:	00 00       	nop
     138:	00 00       	nop
     13a:	00 38       	cpi	r16, 0x80	; 128
     13c:	3c 3e       	cpi	r19, 0xEC	; 236
     13e:	3e 0f       	add	r19, r30
     140:	07 07       	cpc	r16, r23
     142:	07 cf       	rjmp	.-498    	; 0xffffff52 <__eeprom_end+0xff7eff52>
     144:	ff fe       	.word	0xfeff	; ????
     146:	fe 38       	cpi	r31, 0x8E	; 142
     148:	00 00       	nop
     14a:	00 40       	sbci	r16, 0x00	; 0
     14c:	40 60       	ori	r20, 0x00	; 0
     14e:	70 78       	andi	r23, 0x80	; 128
     150:	7c 7e       	andi	r23, 0xEC	; 236
     152:	7f 77       	andi	r23, 0x7F	; 127
     154:	73 71       	andi	r23, 0x13	; 19
     156:	70 70       	andi	r23, 0x00	; 0
     158:	00 00       	nop
     15a:	00 18       	sub	r0, r0
     15c:	1c 1e       	adc	r1, r28
     15e:	1e 0f       	add	r17, r30
     160:	c7 c7       	rjmp	.+3982   	; 0x10f0 <_Z14willkommenpagev+0x50>
     162:	e7 ff       	sbrs	r30, 7
     164:	fe be       	out	0x3e, r15	; 62
     166:	9c 00       	.word	0x009c	; ????
     168:	00 00       	nop
     16a:	00 0c       	add	r0, r0
     16c:	1c 3c       	cpi	r17, 0xCC	; 204
     16e:	3c 78       	andi	r19, 0x8C	; 140
     170:	70 70       	andi	r23, 0x00	; 0
     172:	70 79       	andi	r23, 0x90	; 144
     174:	7f 3f       	cpi	r23, 0xFF	; 255
     176:	1f 0f       	add	r17, r31
     178:	00 00       	nop
     17a:	00 00       	nop
     17c:	80 c0       	rjmp	.+256    	; 0x27e <_ZL7font5x8+0x44>
     17e:	e0 70       	andi	r30, 0x00	; 0
     180:	38 1c       	adc	r3, r8
     182:	1e ff       	.word	0xff1e	; ????
     184:	ff ff       	.word	0xffff	; ????
     186:	ff 00       	.word	0x00ff	; ????
     188:	00 00       	nop
     18a:	06 07       	cpc	r16, r22
     18c:	07 07       	cpc	r16, r23
     18e:	06 06       	cpc	r0, r22
     190:	06 06       	cpc	r0, r22
     192:	06 7f       	andi	r16, 0xF6	; 246
     194:	7f 7f       	andi	r23, 0xFF	; 255
     196:	7f 06       	cpc	r7, r31
     198:	06 00       	.word	0x0006	; ????
     19a:	00 00       	nop
     19c:	00 00       	nop
     19e:	f0 ff       	sbrs	r31, 0
     1a0:	ff ff       	.word	0xffff	; ????
     1a2:	e7 e7       	ldi	r30, 0x77	; 119
     1a4:	e7 e7       	ldi	r30, 0x77	; 119
     1a6:	c7 87       	std	Z+15, r28	; 0x0f
     1a8:	00 00       	nop
     1aa:	00 00       	nop
     1ac:	38 78       	andi	r19, 0x88	; 136
     1ae:	71 70       	andi	r23, 0x01	; 1
     1b0:	70 70       	andi	r23, 0x00	; 0
     1b2:	70 70       	andi	r23, 0x00	; 0
     1b4:	39 3f       	cpi	r19, 0xF9	; 249
     1b6:	3f 1f       	adc	r19, r31
     1b8:	0f 00       	.word	0x000f	; ????
     1ba:	00 80       	ld	r0, Z
     1bc:	e0 f0       	brcs	.+56     	; 0x1f6 <__trampolines_end+0xfc>
     1be:	f8 fc       	.word	0xfcf8	; ????
     1c0:	7f 7f       	andi	r23, 0xFF	; 255
     1c2:	6f 67       	ori	r22, 0x7F	; 127
     1c4:	e1 e1       	ldi	r30, 0x11	; 17
     1c6:	c0 80       	ld	r12, Z
     1c8:	00 00       	nop
     1ca:	00 0f       	add	r16, r16
     1cc:	1f 3f       	cpi	r17, 0xFF	; 255
     1ce:	3f 78       	andi	r19, 0x8F	; 143
     1d0:	70 70       	andi	r23, 0x00	; 0
     1d2:	70 70       	andi	r23, 0x00	; 0
     1d4:	78 3f       	cpi	r23, 0xF8	; 248
     1d6:	3f 1f       	adc	r19, r31
     1d8:	0f 00       	.word	0x000f	; ????
     1da:	00 07       	cpc	r16, r16
     1dc:	07 07       	cpc	r16, r23
     1de:	07 07       	cpc	r16, r23
     1e0:	c7 e7       	ldi	r28, 0x77	; 119
     1e2:	f7 ff       	sbrs	r31, 7
     1e4:	7f 3f       	cpi	r23, 0xFF	; 255
     1e6:	1f 07       	cpc	r17, r31
     1e8:	03 01       	movw	r0, r6
     1ea:	00 20       	and	r0, r0
     1ec:	38 7c       	andi	r19, 0xC8	; 200
     1ee:	7e 3f       	cpi	r23, 0xFE	; 254
     1f0:	0f 07       	cpc	r16, r31
     1f2:	03 00       	.word	0x0003	; ????
	...
     1fc:	00 1c       	adc	r0, r0
     1fe:	be fe       	.word	0xfebe	; ????
     200:	ff e7       	ldi	r31, 0x7F	; 127
     202:	c3 c3       	rjmp	.+1926   	; 0x98a <__stack+0x8b>
     204:	e7 ff       	sbrs	r30, 7
     206:	fe be       	out	0x3e, r15	; 62
     208:	1c 00       	.word	0x001c	; ????
     20a:	00 00       	nop
     20c:	0e 3f       	cpi	r16, 0xFE	; 254
     20e:	3f 7f       	andi	r19, 0xFF	; 255
     210:	71 60       	ori	r23, 0x01	; 1
     212:	60 60       	ori	r22, 0x00	; 0
     214:	71 7f       	andi	r23, 0xF1	; 241
     216:	3f 3f       	cpi	r19, 0xFF	; 255
     218:	0f 00       	.word	0x000f	; ????
     21a:	00 78       	andi	r16, 0x80	; 128
     21c:	fc fe       	.word	0xfefc	; ????
     21e:	fe 8f       	std	Y+30, r31	; 0x1e
     220:	07 07       	cpc	r16, r23
     222:	07 07       	cpc	r16, r23
     224:	8f fe       	.word	0xfe8f	; ????
     226:	fe fc       	.word	0xfcfe	; ????
     228:	f8 00       	.word	0x00f8	; ????
     22a:	00 00       	nop
     22c:	00 01       	movw	r0, r0
     22e:	43 43       	sbci	r20, 0x33	; 51
     230:	73 7b       	andi	r23, 0xB3	; 179
     232:	7f 7f       	andi	r23, 0xFF	; 255
     234:	1f 0f       	add	r17, r31
     236:	07 03       	mulsu	r16, r23
	...

0000023a <_ZL7font5x8>:
     23a:	00 00 5f 00 00 00 07 00 07 00 14 7f 14 7f 14 24     .._............$
     24a:	2a 7f 2a 12 23 13 08 64 62 36 49 55 22 50 00 05     *.*.#..db6IU"P..
     25a:	03 00 00 00 1c 22 41 00 00 41 22 1c 00 14 08 3e     ....."A..A"....>
     26a:	08 14 08 08 3e 08 08 00 50 30 00 00 08 08 08 08     ....>...P0......
     27a:	08 00 60 60 00 00 20 10 08 04 02 3e 51 49 45 3e     ..``.. ....>QIE>
     28a:	00 42 7f 40 00 42 61 51 49 46 21 41 45 4b 31 18     .B.@.BaQIF!AEK1.
     29a:	14 12 7f 10 27 45 45 45 39 3c 4a 49 49 30 01 71     ....'EEE9<JII0.q
     2aa:	09 05 03 36 49 49 49 36 06 49 49 29 1e 00 36 36     ...6III6.II)..66
     2ba:	00 00 00 56 36 00 00 08 14 22 41 00 14 14 14 14     ...V6...."A.....
     2ca:	14 00 41 22 14 08 02 01 51 09 06 32 49 79 41 3e     ..A"....Q..2IyA>
     2da:	7e 11 11 11 7e 7f 49 49 49 36 3e 41 41 41 22 7f     ~...~.III6>AAA".
     2ea:	41 41 22 1c 7f 49 49 49 41 7f 09 09 09 01 3e 41     AA"..IIIA.....>A
     2fa:	49 49 7a 7f 08 08 08 7f 00 41 7f 41 00 20 40 41     IIz......A.A. @A
     30a:	3f 01 7f 08 14 22 41 7f 40 40 40 40 7f 02 0c 02     ?...."A.@@@@....
     31a:	7f 7f 04 08 10 7f 3e 41 41 41 3e 7f 09 09 09 06     ......>AAA>.....
     32a:	3e 41 51 21 5e 7f 09 19 29 46 46 49 49 49 31 01     >AQ!^...)FFIII1.
     33a:	01 7f 01 01 3f 40 40 40 3f 1f 20 40 20 1f 3f 40     ....?@@@?. @ .?@
     34a:	38 40 3f 63 14 08 14 63 07 08 70 08 07 61 51 49     8@?c...c..p..aQI
     35a:	45 43 00 7f 41 41 00 02 04 08 10 20 00 41 41 7f     EC..AA..... .AA.
     36a:	00 04 02 01 02 04 40 40 40 40 40 00 01 02 04 00     ......@@@@@.....
     37a:	20 54 54 54 78 7f 48 44 44 38 38 44 44 44 20 38      TTTx.HDD88DDD 8
     38a:	44 44 48 7f 38 54 54 54 18 08 7e 09 01 02 0c 52     DDH.8TTT..~....R
     39a:	52 52 3e 7f 08 04 04 78 00 44 7d 40 00 20 40 44     RR>....x.D}@. @D
     3aa:	3d 00 7f 10 28 44 00 00 41 7f 40 00 7c 04 18 04     =...(D..A.@.|...
     3ba:	78 7c 08 04 04 78 38 44 44 44 38 7c 14 14 14 08     x|...x8DDD8|....
     3ca:	08 14 14 18 7c 7c 08 04 04 08 48 54 54 54 20 04     ....||....HTTT .
     3da:	3f 44 40 20 3c 40 40 20 7c 1c 20 40 20 1c 3c 40     ?D@ <@@ |. @ .<@
     3ea:	30 40 3c 44 28 10 28 44 0c 50 50 50 3c 44 64 54     0@<D(.(D.PPP<DdT
     3fa:	4c 44 00 08 36 41 00 00 00 7f 00 00 00 41 36 08     LD..6A.......A6.
     40a:	00 10 08 08 10 08                                   ......

00000410 <__c.2161>:
     410:	6e 61 6e 00                                         nan.

00000414 <__c.2159>:
     414:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     424:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     434:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     444:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     454:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     464:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     474:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     484:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     494:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     4a4:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     4b4:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     4c4:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     4d4:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     4e4:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     4f4:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     504:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000512 <__ctors_start>:
     512:	72 17       	cp	r23, r18

00000514 <__ctors_end>:
     514:	8b 17       	cp	r24, r27

00000516 <__dtors_end>:
     516:	11 24       	eor	r1, r1
     518:	1f be       	out	0x3f, r1	; 63
     51a:	cf ef       	ldi	r28, 0xFF	; 255
     51c:	d8 e0       	ldi	r29, 0x08	; 8
     51e:	de bf       	out	0x3e, r29	; 62
     520:	cd bf       	out	0x3d, r28	; 61

00000522 <__do_copy_data>:
     522:	12 e0       	ldi	r17, 0x02	; 2
     524:	a0 e0       	ldi	r26, 0x00	; 0
     526:	b1 e0       	ldi	r27, 0x01	; 1
     528:	ec ee       	ldi	r30, 0xEC	; 236
     52a:	f6 e4       	ldi	r31, 0x46	; 70
     52c:	02 c0       	rjmp	.+4      	; 0x532 <__do_copy_data+0x10>
     52e:	05 90       	lpm	r0, Z+
     530:	0d 92       	st	X+, r0
     532:	ae 39       	cpi	r26, 0x9E	; 158
     534:	b1 07       	cpc	r27, r17
     536:	d9 f7       	brne	.-10     	; 0x52e <__do_copy_data+0xc>

00000538 <__do_clear_bss>:
     538:	26 e0       	ldi	r18, 0x06	; 6
     53a:	ae e9       	ldi	r26, 0x9E	; 158
     53c:	b2 e0       	ldi	r27, 0x02	; 2
     53e:	01 c0       	rjmp	.+2      	; 0x542 <.do_clear_bss_start>

00000540 <.do_clear_bss_loop>:
     540:	1d 92       	st	X+, r1

00000542 <.do_clear_bss_start>:
     542:	a0 3f       	cpi	r26, 0xF0	; 240
     544:	b2 07       	cpc	r27, r18
     546:	e1 f7       	brne	.-8      	; 0x540 <.do_clear_bss_loop>

00000548 <__do_global_ctors>:
     548:	15 e0       	ldi	r17, 0x05	; 5
     54a:	c4 e1       	ldi	r28, 0x14	; 20
     54c:	d5 e0       	ldi	r29, 0x05	; 5
     54e:	04 c0       	rjmp	.+8      	; 0x558 <__do_global_ctors+0x10>
     550:	22 97       	sbiw	r28, 0x02	; 2
     552:	fe 01       	movw	r30, r28
     554:	0e 94 8e 21 	call	0x431c	; 0x431c <__tablejump__>
     558:	c2 31       	cpi	r28, 0x12	; 18
     55a:	d1 07       	cpc	r29, r17
     55c:	c9 f7       	brne	.-14     	; 0x550 <__do_global_ctors+0x8>
     55e:	0e 94 65 17 	call	0x2eca	; 0x2eca <main>
     562:	0c 94 69 23 	jmp	0x46d2	; 0x46d2 <__do_global_dtors>

00000566 <__bad_interrupt>:
     566:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000056a <_ZN7DisplayD1Ev>:
	//}
	InitializeDisplay();
} //Display

// default destructor
Display::~Display()
     56a:	9c 5f       	subi	r25, 0xFC	; 252
     56c:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <_ZN3I2CD1Ev>
     570:	08 95       	ret

00000572 <_ZN7Display10clearFrameEv>:
{
} //~Display

void Display::clearFrame(){
     572:	fc 01       	movw	r30, r24
	for(uint16_t i=0;i<1024;i++){
     574:	20 e0       	ldi	r18, 0x00	; 0
     576:	30 e0       	ldi	r19, 0x00	; 0
		Displayframe[i]=0;
     578:	11 92       	st	Z+, r1
Display::~Display()
{
} //~Display

void Display::clearFrame(){
	for(uint16_t i=0;i<1024;i++){
     57a:	2f 5f       	subi	r18, 0xFF	; 255
     57c:	3f 4f       	sbci	r19, 0xFF	; 255
     57e:	21 15       	cp	r18, r1
     580:	84 e0       	ldi	r24, 0x04	; 4
     582:	38 07       	cpc	r19, r24
     584:	c9 f7       	brne	.-14     	; 0x578 <_ZN7Display10clearFrameEv+0x6>
		Displayframe[i]=0;
	}
}
     586:	08 95       	ret

00000588 <_ZN7Display15ssd1306_commandEh>:

void Display::ssd1306_command(uint8_t c){
     588:	1f 93       	push	r17
     58a:	cf 93       	push	r28
     58c:	df 93       	push	r29
     58e:	16 2f       	mov	r17, r22
	i2c.twi_start();
     590:	ec 01       	movw	r28, r24
     592:	dc 5f       	subi	r29, 0xFC	; 252
     594:	ce 01       	movw	r24, r28
     596:	0e 94 a9 17 	call	0x2f52	; 0x2f52 <_ZN3I2C9twi_startEv>
	i2c.twi_write(OLEDADRESSE);
     59a:	68 e7       	ldi	r22, 0x78	; 120
     59c:	ce 01       	movw	r24, r28
     59e:	0e 94 b1 17 	call	0x2f62	; 0x2f62 <_ZN3I2C9twi_writeEh>
	i2c.twi_write(OLEDBEFEHL);
     5a2:	60 e0       	ldi	r22, 0x00	; 0
     5a4:	ce 01       	movw	r24, r28
     5a6:	0e 94 b1 17 	call	0x2f62	; 0x2f62 <_ZN3I2C9twi_writeEh>
	i2c.twi_write(c);
     5aa:	61 2f       	mov	r22, r17
     5ac:	ce 01       	movw	r24, r28
     5ae:	0e 94 b1 17 	call	0x2f62	; 0x2f62 <_ZN3I2C9twi_writeEh>
	i2c.twi_stop();
     5b2:	ce 01       	movw	r24, r28
     5b4:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <_ZN3I2C8twi_stopEv>
}
     5b8:	df 91       	pop	r29
     5ba:	cf 91       	pop	r28
     5bc:	1f 91       	pop	r17
     5be:	08 95       	ret

000005c0 <_ZN7Display17InitializeDisplayEv>:

void Display::InitializeDisplay()
{
     5c0:	cf 93       	push	r28
     5c2:	df 93       	push	r29
     5c4:	ec 01       	movw	r28, r24
	// Init sequence for 128x64 OLED module
	ssd1306_command(SSD1306_DISPLAYOFF);                    // 0xAE
     5c6:	6e ea       	ldi	r22, 0xAE	; 174
     5c8:	0e 94 c4 02 	call	0x588	; 0x588 <_ZN7Display15ssd1306_commandEh>

	ssd1306_command(SSD1306_SETDISPLAYCLOCKDIV);            // 0xD5
     5cc:	65 ed       	ldi	r22, 0xD5	; 213
     5ce:	ce 01       	movw	r24, r28
     5d0:	0e 94 c4 02 	call	0x588	; 0x588 <_ZN7Display15ssd1306_commandEh>
	ssd1306_command(0x80);                 // the suggested ratio 0x80
     5d4:	60 e8       	ldi	r22, 0x80	; 128
     5d6:	ce 01       	movw	r24, r28
     5d8:	0e 94 c4 02 	call	0x588	; 0x588 <_ZN7Display15ssd1306_commandEh>

	ssd1306_command(SSD1306_SETMULTIPLEX);                  // 0xA8
     5dc:	68 ea       	ldi	r22, 0xA8	; 168
     5de:	ce 01       	movw	r24, r28
     5e0:	0e 94 c4 02 	call	0x588	; 0x588 <_ZN7Display15ssd1306_commandEh>
	ssd1306_command(0x3F);
     5e4:	6f e3       	ldi	r22, 0x3F	; 63
     5e6:	ce 01       	movw	r24, r28
     5e8:	0e 94 c4 02 	call	0x588	; 0x588 <_ZN7Display15ssd1306_commandEh>

	ssd1306_command(SSD1306_SETDISPLAYOFFSET);              // 0xD3
     5ec:	63 ed       	ldi	r22, 0xD3	; 211
     5ee:	ce 01       	movw	r24, r28
     5f0:	0e 94 c4 02 	call	0x588	; 0x588 <_ZN7Display15ssd1306_commandEh>
	ssd1306_command(0x0);                                   // no offset
     5f4:	60 e0       	ldi	r22, 0x00	; 0
     5f6:	ce 01       	movw	r24, r28
     5f8:	0e 94 c4 02 	call	0x588	; 0x588 <_ZN7Display15ssd1306_commandEh>

	ssd1306_command(SSD1306_SETSTARTLINE);// | 0x0);        // line #0
     5fc:	60 e4       	ldi	r22, 0x40	; 64
     5fe:	ce 01       	movw	r24, r28
     600:	0e 94 c4 02 	call	0x588	; 0x588 <_ZN7Display15ssd1306_commandEh>

	ssd1306_command(SSD1306_CHARGEPUMP);                    // 0x8D
     604:	6d e8       	ldi	r22, 0x8D	; 141
     606:	ce 01       	movw	r24, r28
     608:	0e 94 c4 02 	call	0x588	; 0x588 <_ZN7Display15ssd1306_commandEh>
	ssd1306_command(0x14);  // using internal VCC
     60c:	64 e1       	ldi	r22, 0x14	; 20
     60e:	ce 01       	movw	r24, r28
     610:	0e 94 c4 02 	call	0x588	; 0x588 <_ZN7Display15ssd1306_commandEh>

	ssd1306_command(SSD1306_MEMORYMODE);                    // 0x20
     614:	60 e2       	ldi	r22, 0x20	; 32
     616:	ce 01       	movw	r24, r28
     618:	0e 94 c4 02 	call	0x588	; 0x588 <_ZN7Display15ssd1306_commandEh>
	ssd1306_command(0x00);          // 0x00 horizontal addressing
     61c:	60 e0       	ldi	r22, 0x00	; 0
     61e:	ce 01       	movw	r24, r28
     620:	0e 94 c4 02 	call	0x588	; 0x588 <_ZN7Display15ssd1306_commandEh>

	ssd1306_command(SSD1306_SEGREMAP | 0x1); // rotate screen 180
     624:	61 ea       	ldi	r22, 0xA1	; 161
     626:	ce 01       	movw	r24, r28
     628:	0e 94 c4 02 	call	0x588	; 0x588 <_ZN7Display15ssd1306_commandEh>

	ssd1306_command(SSD1306_COMSCANDEC); // rotate screen 180
     62c:	68 ec       	ldi	r22, 0xC8	; 200
     62e:	ce 01       	movw	r24, r28
     630:	0e 94 c4 02 	call	0x588	; 0x588 <_ZN7Display15ssd1306_commandEh>

	ssd1306_command(SSD1306_SETCOMPINS);                    // 0xDA
     634:	6a ed       	ldi	r22, 0xDA	; 218
     636:	ce 01       	movw	r24, r28
     638:	0e 94 c4 02 	call	0x588	; 0x588 <_ZN7Display15ssd1306_commandEh>
	ssd1306_command(0x12);
     63c:	62 e1       	ldi	r22, 0x12	; 18
     63e:	ce 01       	movw	r24, r28
     640:	0e 94 c4 02 	call	0x588	; 0x588 <_ZN7Display15ssd1306_commandEh>

	ssd1306_command(SSD1306_SETCONTRAST);                   // 0x81
     644:	61 e8       	ldi	r22, 0x81	; 129
     646:	ce 01       	movw	r24, r28
     648:	0e 94 c4 02 	call	0x588	; 0x588 <_ZN7Display15ssd1306_commandEh>
	ssd1306_command(0xCF);
     64c:	6f ec       	ldi	r22, 0xCF	; 207
     64e:	ce 01       	movw	r24, r28
     650:	0e 94 c4 02 	call	0x588	; 0x588 <_ZN7Display15ssd1306_commandEh>

	ssd1306_command(SSD1306_SETPRECHARGE);                  // 0xd9
     654:	69 ed       	ldi	r22, 0xD9	; 217
     656:	ce 01       	movw	r24, r28
     658:	0e 94 c4 02 	call	0x588	; 0x588 <_ZN7Display15ssd1306_commandEh>
	ssd1306_command(0xF1);
     65c:	61 ef       	ldi	r22, 0xF1	; 241
     65e:	ce 01       	movw	r24, r28
     660:	0e 94 c4 02 	call	0x588	; 0x588 <_ZN7Display15ssd1306_commandEh>

	ssd1306_command(SSD1306_SETVCOMDETECT);                 // 0xDB
     664:	6b ed       	ldi	r22, 0xDB	; 219
     666:	ce 01       	movw	r24, r28
     668:	0e 94 c4 02 	call	0x588	; 0x588 <_ZN7Display15ssd1306_commandEh>
	ssd1306_command(0x40);
     66c:	60 e4       	ldi	r22, 0x40	; 64
     66e:	ce 01       	movw	r24, r28
     670:	0e 94 c4 02 	call	0x588	; 0x588 <_ZN7Display15ssd1306_commandEh>

	ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
     674:	64 ea       	ldi	r22, 0xA4	; 164
     676:	ce 01       	movw	r24, r28
     678:	0e 94 c4 02 	call	0x588	; 0x588 <_ZN7Display15ssd1306_commandEh>

	ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
     67c:	66 ea       	ldi	r22, 0xA6	; 166
     67e:	ce 01       	movw	r24, r28
     680:	0e 94 c4 02 	call	0x588	; 0x588 <_ZN7Display15ssd1306_commandEh>

	ssd1306_command(SSD1306_DISPLAYON);                     //switch on OLED
     684:	6f ea       	ldi	r22, 0xAF	; 175
     686:	ce 01       	movw	r24, r28
     688:	0e 94 c4 02 	call	0x588	; 0x588 <_ZN7Display15ssd1306_commandEh>
}
     68c:	df 91       	pop	r29
     68e:	cf 91       	pop	r28
     690:	08 95       	ret

00000692 <_ZN7DisplayC1Ev>:


#include "Display.h"

// default constructor
Display::Display()
     692:	cf 93       	push	r28
     694:	df 93       	push	r29
     696:	ec 01       	movw	r28, r24
     698:	9c 5f       	subi	r25, 0xFC	; 252
     69a:	0e 94 a4 17 	call	0x2f48	; 0x2f48 <_ZN3I2CC1Ev>
{
	//for (uint8_t i=0;i<1024;i++)
	//{
		//Displayframe[i]=0;
	//}
	InitializeDisplay();
     69e:	ce 01       	movw	r24, r28
     6a0:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <_ZN7Display17InitializeDisplayEv>
} //Display
     6a4:	df 91       	pop	r29
     6a6:	cf 91       	pop	r28
     6a8:	08 95       	ret

000006aa <_ZN7Display6invertEh>:

	ssd1306_command(SSD1306_DISPLAYON);                     //switch on OLED
}

void Display::invert(uint8_t inverted) {
	if (inverted) {
     6aa:	66 23       	and	r22, r22
     6ac:	21 f0       	breq	.+8      	; 0x6b6 <_ZN7Display6invertEh+0xc>
		ssd1306_command(SSD1306_INVERTDISPLAY);
     6ae:	67 ea       	ldi	r22, 0xA7	; 167
     6b0:	0e 94 c4 02 	call	0x588	; 0x588 <_ZN7Display15ssd1306_commandEh>
     6b4:	08 95       	ret
	}
	else {
		ssd1306_command(SSD1306_NORMALDISPLAY);
     6b6:	66 ea       	ldi	r22, 0xA6	; 166
     6b8:	0e 94 c4 02 	call	0x588	; 0x588 <_ZN7Display15ssd1306_commandEh>
     6bc:	08 95       	ret

000006be <_ZN7Display9sendFrameEv>:
	}
}

void Display::sendFrame(){
     6be:	ef 92       	push	r14
     6c0:	ff 92       	push	r15
     6c2:	0f 93       	push	r16
     6c4:	1f 93       	push	r17
     6c6:	cf 93       	push	r28
     6c8:	df 93       	push	r29
     6ca:	8c 01       	movw	r16, r24
	//Cursor an den Anfang setzen
	ssd1306_command(SSD1306_COLUMNADDR);
     6cc:	61 e2       	ldi	r22, 0x21	; 33
     6ce:	0e 94 c4 02 	call	0x588	; 0x588 <_ZN7Display15ssd1306_commandEh>
	ssd1306_command(0x00);
     6d2:	60 e0       	ldi	r22, 0x00	; 0
     6d4:	c8 01       	movw	r24, r16
     6d6:	0e 94 c4 02 	call	0x588	; 0x588 <_ZN7Display15ssd1306_commandEh>
	ssd1306_command(0x7F);
     6da:	6f e7       	ldi	r22, 0x7F	; 127
     6dc:	c8 01       	movw	r24, r16
     6de:	0e 94 c4 02 	call	0x588	; 0x588 <_ZN7Display15ssd1306_commandEh>

	ssd1306_command(SSD1306_PAGEADDR);
     6e2:	62 e2       	ldi	r22, 0x22	; 34
     6e4:	c8 01       	movw	r24, r16
     6e6:	0e 94 c4 02 	call	0x588	; 0x588 <_ZN7Display15ssd1306_commandEh>
	ssd1306_command(0x00);
     6ea:	60 e0       	ldi	r22, 0x00	; 0
     6ec:	c8 01       	movw	r24, r16
     6ee:	0e 94 c4 02 	call	0x588	; 0x588 <_ZN7Display15ssd1306_commandEh>
	ssd1306_command(0x07);
     6f2:	67 e0       	ldi	r22, 0x07	; 7
     6f4:	c8 01       	movw	r24, r16
     6f6:	0e 94 c4 02 	call	0x588	; 0x588 <_ZN7Display15ssd1306_commandEh>

	i2c.twi_start();
     6fa:	78 01       	movw	r14, r16
     6fc:	8c ef       	ldi	r24, 0xFC	; 252
     6fe:	f8 1a       	sub	r15, r24
     700:	c7 01       	movw	r24, r14
     702:	0e 94 a9 17 	call	0x2f52	; 0x2f52 <_ZN3I2C9twi_startEv>
	i2c.twi_write(OLEDADRESSE);
     706:	68 e7       	ldi	r22, 0x78	; 120
     708:	c7 01       	movw	r24, r14
     70a:	0e 94 b1 17 	call	0x2f62	; 0x2f62 <_ZN3I2C9twi_writeEh>
	i2c.twi_write(OLEDDATA);
     70e:	60 e4       	ldi	r22, 0x40	; 64
     710:	c7 01       	movw	r24, r14
     712:	0e 94 b1 17 	call	0x2f62	; 0x2f62 <_ZN3I2C9twi_writeEh>
	
	for(uint16_t i=0; i<1024;i++){
     716:	c0 e0       	ldi	r28, 0x00	; 0
     718:	d0 e0       	ldi	r29, 0x00	; 0
		i2c.twi_write(Displayframe[i]);
     71a:	f8 01       	movw	r30, r16
     71c:	61 91       	ld	r22, Z+
     71e:	8f 01       	movw	r16, r30
     720:	c7 01       	movw	r24, r14
     722:	0e 94 b1 17 	call	0x2f62	; 0x2f62 <_ZN3I2C9twi_writeEh>

	i2c.twi_start();
	i2c.twi_write(OLEDADRESSE);
	i2c.twi_write(OLEDDATA);
	
	for(uint16_t i=0; i<1024;i++){
     726:	21 96       	adiw	r28, 0x01	; 1
     728:	c1 15       	cp	r28, r1
     72a:	f4 e0       	ldi	r31, 0x04	; 4
     72c:	df 07       	cpc	r29, r31
     72e:	a9 f7       	brne	.-22     	; 0x71a <_ZN7Display9sendFrameEv+0x5c>
		i2c.twi_write(Displayframe[i]);
	}
	i2c.twi_stop();
     730:	c7 01       	movw	r24, r14
     732:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <_ZN3I2C8twi_stopEv>
}
     736:	df 91       	pop	r29
     738:	cf 91       	pop	r28
     73a:	1f 91       	pop	r17
     73c:	0f 91       	pop	r16
     73e:	ff 90       	pop	r15
     740:	ef 90       	pop	r14
     742:	08 95       	ret

00000744 <_ZN7Display9drawPixelEhhh>:

void Display::drawPixel(uint8_t pos_x, uint8_t pos_y, uint8_t erase){
	if(!(pos_x >= SSD1306_WIDTH || pos_y >= SSD1306_HEIGHT)){
     744:	66 23       	and	r22, r22
     746:	bc f1       	brlt	.+110    	; 0x7b6 <_ZN7Display9drawPixelEhhh+0x72>
     748:	40 34       	cpi	r20, 0x40	; 64
     74a:	a8 f5       	brcc	.+106    	; 0x7b6 <_ZN7Display9drawPixelEhhh+0x72>
		if(!erase){
     74c:	21 11       	cpse	r18, r1
     74e:	19 c0       	rjmp	.+50     	; 0x782 <_ZN7Display9drawPixelEhhh+0x3e>
			Displayframe[pos_x+(pos_y/8)*SSD1306_WIDTH] |= (1 << (pos_y&7));
     750:	e4 2f       	mov	r30, r20
     752:	e6 95       	lsr	r30
     754:	e6 95       	lsr	r30
     756:	e6 95       	lsr	r30
     758:	20 e8       	ldi	r18, 0x80	; 128
     75a:	e2 9f       	mul	r30, r18
     75c:	f0 01       	movw	r30, r0
     75e:	11 24       	eor	r1, r1
     760:	e6 0f       	add	r30, r22
     762:	f1 1d       	adc	r31, r1
     764:	e8 0f       	add	r30, r24
     766:	f9 1f       	adc	r31, r25
     768:	47 70       	andi	r20, 0x07	; 7
     76a:	21 e0       	ldi	r18, 0x01	; 1
     76c:	30 e0       	ldi	r19, 0x00	; 0
     76e:	c9 01       	movw	r24, r18
     770:	02 c0       	rjmp	.+4      	; 0x776 <_ZN7Display9drawPixelEhhh+0x32>
     772:	88 0f       	add	r24, r24
     774:	99 1f       	adc	r25, r25
     776:	4a 95       	dec	r20
     778:	e2 f7       	brpl	.-8      	; 0x772 <_ZN7Display9drawPixelEhhh+0x2e>
     77a:	90 81       	ld	r25, Z
     77c:	89 2b       	or	r24, r25
     77e:	80 83       	st	Z, r24
     780:	08 95       	ret
		}
		else {
			Displayframe[pos_x+(pos_y/8)*SSD1306_WIDTH] &= ~(1 << (pos_y&7));
     782:	e4 2f       	mov	r30, r20
     784:	e6 95       	lsr	r30
     786:	e6 95       	lsr	r30
     788:	e6 95       	lsr	r30
     78a:	30 e8       	ldi	r19, 0x80	; 128
     78c:	e3 9f       	mul	r30, r19
     78e:	f0 01       	movw	r30, r0
     790:	11 24       	eor	r1, r1
     792:	e6 0f       	add	r30, r22
     794:	f1 1d       	adc	r31, r1
     796:	e8 0f       	add	r30, r24
     798:	f9 1f       	adc	r31, r25
     79a:	47 70       	andi	r20, 0x07	; 7
     79c:	81 e0       	ldi	r24, 0x01	; 1
     79e:	90 e0       	ldi	r25, 0x00	; 0
     7a0:	9c 01       	movw	r18, r24
     7a2:	02 c0       	rjmp	.+4      	; 0x7a8 <_ZN7Display9drawPixelEhhh+0x64>
     7a4:	22 0f       	add	r18, r18
     7a6:	33 1f       	adc	r19, r19
     7a8:	4a 95       	dec	r20
     7aa:	e2 f7       	brpl	.-8      	; 0x7a4 <_ZN7Display9drawPixelEhhh+0x60>
     7ac:	a9 01       	movw	r20, r18
     7ae:	40 95       	com	r20
     7b0:	80 81       	ld	r24, Z
     7b2:	48 23       	and	r20, r24
     7b4:	40 83       	st	Z, r20
     7b6:	08 95       	ret

000007b8 <_ZN7Display9draw_lineEhhhf>:
		}
	}
}

//eigene Zeichenfunktionen
void Display::draw_line(uint8_t x, uint8_t y, uint8_t length, float phi){
     7b8:	2f 92       	push	r2
     7ba:	3f 92       	push	r3
     7bc:	4f 92       	push	r4
     7be:	5f 92       	push	r5
     7c0:	6f 92       	push	r6
     7c2:	7f 92       	push	r7
     7c4:	8f 92       	push	r8
     7c6:	9f 92       	push	r9
     7c8:	af 92       	push	r10
     7ca:	bf 92       	push	r11
     7cc:	cf 92       	push	r12
     7ce:	df 92       	push	r13
     7d0:	ef 92       	push	r14
     7d2:	ff 92       	push	r15
     7d4:	0f 93       	push	r16
     7d6:	1f 93       	push	r17
     7d8:	cf 93       	push	r28
     7da:	df 93       	push	r29
     7dc:	cd b7       	in	r28, 0x3d	; 61
     7de:	de b7       	in	r29, 0x3e	; 62
     7e0:	2b 97       	sbiw	r28, 0x0b	; 11
     7e2:	0f b6       	in	r0, 0x3f	; 63
     7e4:	f8 94       	cli
     7e6:	de bf       	out	0x3e, r29	; 62
     7e8:	0f be       	out	0x3f, r0	; 63
     7ea:	cd bf       	out	0x3d, r28	; 61
     7ec:	1c 01       	movw	r2, r24
     7ee:	d6 2e       	mov	r13, r22
     7f0:	c4 2e       	mov	r12, r20
     7f2:	29 83       	std	Y+1, r18	; 0x01
	//phi*=M_PI/180.0;
	uint8_t pos_x=0, pos_y=0;
	for (uint8_t i=0;i<length;i++)
     7f4:	22 23       	and	r18, r18
     7f6:	09 f4       	brne	.+2      	; 0x7fa <_ZN7Display9draw_lineEhhhf+0x42>
     7f8:	69 c0       	rjmp	.+210    	; 0x8cc <_ZN7Display9draw_lineEhhhf+0x114>
	{
		pos_x=(uint8_t) (-i*cos(phi)+x);
     7fa:	c8 01       	movw	r24, r16
     7fc:	b7 01       	movw	r22, r14
     7fe:	0e 94 af 1b 	call	0x375e	; 0x375e <cos>
     802:	2b 01       	movw	r4, r22
     804:	3c 01       	movw	r6, r24
		pos_y=(uint8_t) (i*sin(phi)+y);
     806:	c8 01       	movw	r24, r16
     808:	b7 01       	movw	r22, r14
     80a:	0e 94 c9 1d 	call	0x3b92	; 0x3b92 <sin>
     80e:	4b 01       	movw	r8, r22
     810:	5c 01       	movw	r10, r24
     812:	1b 86       	std	Y+11, r1	; 0x0b
     814:	1a 86       	std	Y+10, r1	; 0x0a
     816:	8c 2d       	mov	r24, r12
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e0       	ldi	r26, 0x00	; 0
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	8a 83       	std	Y+2, r24	; 0x02
     820:	9b 83       	std	Y+3, r25	; 0x03
     822:	ac 83       	std	Y+4, r26	; 0x04
     824:	bd 83       	std	Y+5, r27	; 0x05
void Display::draw_line(uint8_t x, uint8_t y, uint8_t length, float phi){
	//phi*=M_PI/180.0;
	uint8_t pos_x=0, pos_y=0;
	for (uint8_t i=0;i<length;i++)
	{
		pos_x=(uint8_t) (-i*cos(phi)+x);
     826:	8d 2d       	mov	r24, r13
     828:	90 e0       	ldi	r25, 0x00	; 0
     82a:	a0 e0       	ldi	r26, 0x00	; 0
     82c:	b0 e0       	ldi	r27, 0x00	; 0
     82e:	8e 83       	std	Y+6, r24	; 0x06
     830:	9f 83       	std	Y+7, r25	; 0x07
     832:	a8 87       	std	Y+8, r26	; 0x08
     834:	b9 87       	std	Y+9, r27	; 0x09
		pos_y=(uint8_t) (i*sin(phi)+y);
     836:	aa 85       	ldd	r26, Y+10	; 0x0a
     838:	bb 85       	ldd	r27, Y+11	; 0x0b
     83a:	bd 01       	movw	r22, r26
     83c:	88 27       	eor	r24, r24
     83e:	77 fd       	sbrc	r23, 7
     840:	80 95       	com	r24
     842:	98 2f       	mov	r25, r24
     844:	0e 94 4d 1c 	call	0x389a	; 0x389a <__floatsisf>
     848:	a5 01       	movw	r20, r10
     84a:	94 01       	movw	r18, r8
     84c:	0e 94 66 1d 	call	0x3acc	; 0x3acc <__mulsf3>
     850:	6b 01       	movw	r12, r22
     852:	7c 01       	movw	r14, r24
     854:	6a 81       	ldd	r22, Y+2	; 0x02
     856:	7b 81       	ldd	r23, Y+3	; 0x03
     858:	8c 81       	ldd	r24, Y+4	; 0x04
     85a:	9d 81       	ldd	r25, Y+5	; 0x05
     85c:	0e 94 4d 1c 	call	0x389a	; 0x389a <__floatsisf>
     860:	9b 01       	movw	r18, r22
     862:	ac 01       	movw	r20, r24
     864:	c7 01       	movw	r24, r14
     866:	b6 01       	movw	r22, r12
     868:	0e 94 e5 1a 	call	0x35ca	; 0x35ca <__addsf3>
     86c:	0e 94 1f 1c 	call	0x383e	; 0x383e <__fixunssfsi>
     870:	16 2f       	mov	r17, r22
     872:	6a 85       	ldd	r22, Y+10	; 0x0a
     874:	7b 85       	ldd	r23, Y+11	; 0x0b
     876:	71 95       	neg	r23
     878:	61 95       	neg	r22
     87a:	71 09       	sbc	r23, r1
void Display::draw_line(uint8_t x, uint8_t y, uint8_t length, float phi){
	//phi*=M_PI/180.0;
	uint8_t pos_x=0, pos_y=0;
	for (uint8_t i=0;i<length;i++)
	{
		pos_x=(uint8_t) (-i*cos(phi)+x);
     87c:	88 27       	eor	r24, r24
     87e:	77 fd       	sbrc	r23, 7
     880:	80 95       	com	r24
     882:	98 2f       	mov	r25, r24
     884:	0e 94 4d 1c 	call	0x389a	; 0x389a <__floatsisf>
     888:	a3 01       	movw	r20, r6
     88a:	92 01       	movw	r18, r4
     88c:	0e 94 66 1d 	call	0x3acc	; 0x3acc <__mulsf3>
     890:	6b 01       	movw	r12, r22
     892:	7c 01       	movw	r14, r24
     894:	6e 81       	ldd	r22, Y+6	; 0x06
     896:	7f 81       	ldd	r23, Y+7	; 0x07
     898:	88 85       	ldd	r24, Y+8	; 0x08
     89a:	99 85       	ldd	r25, Y+9	; 0x09
     89c:	0e 94 4d 1c 	call	0x389a	; 0x389a <__floatsisf>
     8a0:	9b 01       	movw	r18, r22
     8a2:	ac 01       	movw	r20, r24
     8a4:	c7 01       	movw	r24, r14
     8a6:	b6 01       	movw	r22, r12
     8a8:	0e 94 e5 1a 	call	0x35ca	; 0x35ca <__addsf3>
     8ac:	0e 94 1f 1c 	call	0x383e	; 0x383e <__fixunssfsi>
		pos_y=(uint8_t) (i*sin(phi)+y);
		drawPixel(pos_x,pos_y,0);
     8b0:	20 e0       	ldi	r18, 0x00	; 0
     8b2:	41 2f       	mov	r20, r17
     8b4:	c1 01       	movw	r24, r2
     8b6:	0e 94 a2 03 	call	0x744	; 0x744 <_ZN7Display9drawPixelEhhh>
     8ba:	ea 85       	ldd	r30, Y+10	; 0x0a
     8bc:	fb 85       	ldd	r31, Y+11	; 0x0b
     8be:	31 96       	adiw	r30, 0x01	; 1
     8c0:	fb 87       	std	Y+11, r31	; 0x0b
     8c2:	ea 87       	std	Y+10, r30	; 0x0a

//eigene Zeichenfunktionen
void Display::draw_line(uint8_t x, uint8_t y, uint8_t length, float phi){
	//phi*=M_PI/180.0;
	uint8_t pos_x=0, pos_y=0;
	for (uint8_t i=0;i<length;i++)
     8c4:	f9 81       	ldd	r31, Y+1	; 0x01
     8c6:	ef 17       	cp	r30, r31
     8c8:	08 f4       	brcc	.+2      	; 0x8cc <_ZN7Display9draw_lineEhhhf+0x114>
     8ca:	b5 cf       	rjmp	.-150    	; 0x836 <_ZN7Display9draw_lineEhhhf+0x7e>
	{
		pos_x=(uint8_t) (-i*cos(phi)+x);
		pos_y=(uint8_t) (i*sin(phi)+y);
		drawPixel(pos_x,pos_y,0);
	}
}
     8cc:	2b 96       	adiw	r28, 0x0b	; 11
     8ce:	0f b6       	in	r0, 0x3f	; 63
     8d0:	f8 94       	cli
     8d2:	de bf       	out	0x3e, r29	; 62
     8d4:	0f be       	out	0x3f, r0	; 63
     8d6:	cd bf       	out	0x3d, r28	; 61
     8d8:	df 91       	pop	r29
     8da:	cf 91       	pop	r28
     8dc:	1f 91       	pop	r17
     8de:	0f 91       	pop	r16
     8e0:	ff 90       	pop	r15
     8e2:	ef 90       	pop	r14
     8e4:	df 90       	pop	r13
     8e6:	cf 90       	pop	r12
     8e8:	bf 90       	pop	r11
     8ea:	af 90       	pop	r10
     8ec:	9f 90       	pop	r9
     8ee:	8f 90       	pop	r8
     8f0:	7f 90       	pop	r7
     8f2:	6f 90       	pop	r6
     8f4:	5f 90       	pop	r5
     8f6:	4f 90       	pop	r4
     8f8:	3f 90       	pop	r3
     8fa:	2f 90       	pop	r2
     8fc:	08 95       	ret

000008fe <_ZN7Display13draw_triangleEhhhff>:

//using basecenterpoint as turningpoint for rotation
//upright triangle has rotationangle of 0
//turning clockwise considered in x transformation
//baseangle=70 is for 1/3 type
void Display::draw_triangle(uint8_t basecenter_x, uint8_t basecenter_y, uint8_t baselength, float baseangle, float rotationangle){
     8fe:	2f 92       	push	r2
     900:	3f 92       	push	r3
     902:	4f 92       	push	r4
     904:	5f 92       	push	r5
     906:	6f 92       	push	r6
     908:	7f 92       	push	r7
     90a:	8f 92       	push	r8
     90c:	9f 92       	push	r9
     90e:	af 92       	push	r10
     910:	bf 92       	push	r11
     912:	cf 92       	push	r12
     914:	df 92       	push	r13
     916:	ef 92       	push	r14
     918:	ff 92       	push	r15
     91a:	0f 93       	push	r16
     91c:	1f 93       	push	r17
     91e:	cf 93       	push	r28
     920:	df 93       	push	r29
     922:	cd b7       	in	r28, 0x3d	; 61
     924:	de b7       	in	r29, 0x3e	; 62
     926:	60 97       	sbiw	r28, 0x10	; 16
     928:	0f b6       	in	r0, 0x3f	; 63
     92a:	f8 94       	cli
     92c:	de bf       	out	0x3e, r29	; 62
     92e:	0f be       	out	0x3f, r0	; 63
     930:	cd bf       	out	0x3d, r28	; 61
     932:	1c 01       	movw	r2, r24
     934:	6f 87       	std	Y+15, r22	; 0x0f
     936:	4d 83       	std	Y+5, r20	; 0x05
     938:	29 83       	std	Y+1, r18	; 0x01
     93a:	c6 01       	movw	r24, r12
     93c:	b5 01       	movw	r22, r10
	//correcting rotationangle
	rotationangle*=M_PI/180.0;
     93e:	25 e3       	ldi	r18, 0x35	; 53
     940:	3a ef       	ldi	r19, 0xFA	; 250
     942:	4e e8       	ldi	r20, 0x8E	; 142
     944:	5c e3       	ldi	r21, 0x3C	; 60
     946:	0e 94 66 1d 	call	0x3acc	; 0x3acc <__mulsf3>
     94a:	4b 01       	movw	r8, r22
     94c:	5c 01       	movw	r10, r24
	baseangle*=M_PI/180.0;
     94e:	25 e3       	ldi	r18, 0x35	; 53
     950:	3a ef       	ldi	r19, 0xFA	; 250
     952:	4e e8       	ldi	r20, 0x8E	; 142
     954:	5c e3       	ldi	r21, 0x3C	; 60
     956:	c8 01       	movw	r24, r16
     958:	b7 01       	movw	r22, r14
     95a:	0e 94 66 1d 	call	0x3acc	; 0x3acc <__mulsf3>
     95e:	6e 83       	std	Y+6, r22	; 0x06
     960:	7f 83       	std	Y+7, r23	; 0x07
     962:	88 87       	std	Y+8, r24	; 0x08
     964:	99 87       	std	Y+9, r25	; 0x09
	//draw baseline
	draw_line(basecenter_x,basecenter_y,baselength/2,rotationangle);
     966:	79 80       	ldd	r7, Y+1	; 0x01
     968:	76 94       	lsr	r7
     96a:	85 01       	movw	r16, r10
     96c:	74 01       	movw	r14, r8
     96e:	27 2d       	mov	r18, r7
     970:	4d 81       	ldd	r20, Y+5	; 0x05
     972:	6f 85       	ldd	r22, Y+15	; 0x0f
     974:	c1 01       	movw	r24, r2
     976:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <_ZN7Display9draw_lineEhhhf>
	draw_line(basecenter_x,basecenter_y,baselength/2,rotationangle-M_PI);
     97a:	2b ed       	ldi	r18, 0xDB	; 219
     97c:	3f e0       	ldi	r19, 0x0F	; 15
     97e:	49 e4       	ldi	r20, 0x49	; 73
     980:	50 e4       	ldi	r21, 0x40	; 64
     982:	c5 01       	movw	r24, r10
     984:	b4 01       	movw	r22, r8
     986:	0e 94 e4 1a 	call	0x35c8	; 0x35c8 <__subsf3>
     98a:	7b 01       	movw	r14, r22
     98c:	8c 01       	movw	r16, r24
     98e:	27 2d       	mov	r18, r7
     990:	4d 81       	ldd	r20, Y+5	; 0x05
     992:	6f 85       	ldd	r22, Y+15	; 0x0f
     994:	c1 01       	movw	r24, r2
     996:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <_ZN7Display9draw_lineEhhhf>
	//draw midleline
	uint8_t middlelength=baselength/2*tan(baseangle);
     99a:	6e 81       	ldd	r22, Y+6	; 0x06
     99c:	7f 81       	ldd	r23, Y+7	; 0x07
     99e:	88 85       	ldd	r24, Y+8	; 0x08
     9a0:	99 85       	ldd	r25, Y+9	; 0x09
     9a2:	0e 94 d2 1d 	call	0x3ba4	; 0x3ba4 <tan>
     9a6:	6b 01       	movw	r12, r22
     9a8:	7c 01       	movw	r14, r24
     9aa:	67 2d       	mov	r22, r7
     9ac:	70 e0       	ldi	r23, 0x00	; 0
     9ae:	80 e0       	ldi	r24, 0x00	; 0
     9b0:	90 e0       	ldi	r25, 0x00	; 0
     9b2:	0e 94 4d 1c 	call	0x389a	; 0x389a <__floatsisf>
     9b6:	a7 01       	movw	r20, r14
     9b8:	96 01       	movw	r18, r12
     9ba:	0e 94 66 1d 	call	0x3acc	; 0x3acc <__mulsf3>
     9be:	0e 94 1f 1c 	call	0x383e	; 0x383e <__fixunssfsi>
     9c2:	68 8b       	std	Y+16, r22	; 0x10
	draw_line(basecenter_x,basecenter_y,middlelength,rotationangle-M_PI_2);
     9c4:	2b ed       	ldi	r18, 0xDB	; 219
     9c6:	3f e0       	ldi	r19, 0x0F	; 15
     9c8:	49 ec       	ldi	r20, 0xC9	; 201
     9ca:	5f e3       	ldi	r21, 0x3F	; 63
     9cc:	c5 01       	movw	r24, r10
     9ce:	b4 01       	movw	r22, r8
     9d0:	0e 94 e4 1a 	call	0x35c8	; 0x35c8 <__subsf3>
     9d4:	6a 87       	std	Y+10, r22	; 0x0a
     9d6:	7b 87       	std	Y+11, r23	; 0x0b
     9d8:	8c 87       	std	Y+12, r24	; 0x0c
     9da:	9d 87       	std	Y+13, r25	; 0x0d
     9dc:	7b 01       	movw	r14, r22
     9de:	8c 01       	movw	r16, r24
     9e0:	28 89       	ldd	r18, Y+16	; 0x10
     9e2:	4d 81       	ldd	r20, Y+5	; 0x05
     9e4:	6f 85       	ldd	r22, Y+15	; 0x0f
     9e6:	c1 01       	movw	r24, r2
     9e8:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <_ZN7Display9draw_lineEhhhf>
	//draw left arm
	uint8_t lengtharm=baselength/(2*cos(baseangle));
     9ec:	6e 81       	ldd	r22, Y+6	; 0x06
     9ee:	7f 81       	ldd	r23, Y+7	; 0x07
     9f0:	88 85       	ldd	r24, Y+8	; 0x08
     9f2:	99 85       	ldd	r25, Y+9	; 0x09
     9f4:	0e 94 af 1b 	call	0x375e	; 0x375e <cos>
     9f8:	6b 01       	movw	r12, r22
     9fa:	7c 01       	movw	r14, r24
     9fc:	29 81       	ldd	r18, Y+1	; 0x01
     9fe:	62 2f       	mov	r22, r18
     a00:	70 e0       	ldi	r23, 0x00	; 0
     a02:	80 e0       	ldi	r24, 0x00	; 0
     a04:	90 e0       	ldi	r25, 0x00	; 0
     a06:	0e 94 4d 1c 	call	0x389a	; 0x389a <__floatsisf>
     a0a:	2b 01       	movw	r4, r22
     a0c:	3c 01       	movw	r6, r24
     a0e:	a7 01       	movw	r20, r14
     a10:	96 01       	movw	r18, r12
     a12:	c7 01       	movw	r24, r14
     a14:	b6 01       	movw	r22, r12
     a16:	0e 94 e5 1a 	call	0x35ca	; 0x35ca <__addsf3>
     a1a:	9b 01       	movw	r18, r22
     a1c:	ac 01       	movw	r20, r24
     a1e:	c3 01       	movw	r24, r6
     a20:	b2 01       	movw	r22, r4
     a22:	0e 94 b2 1b 	call	0x3764	; 0x3764 <__divsf3>
     a26:	0e 94 1f 1c 	call	0x383e	; 0x383e <__fixunssfsi>
     a2a:	6e 87       	std	Y+14, r22	; 0x0e
	uint8_t sx = basecenter_x-middlelength*cos(rotationangle-M_PI_2);
     a2c:	e8 89       	ldd	r30, Y+16	; 0x10
     a2e:	6e 2f       	mov	r22, r30
     a30:	70 e0       	ldi	r23, 0x00	; 0
     a32:	80 e0       	ldi	r24, 0x00	; 0
     a34:	90 e0       	ldi	r25, 0x00	; 0
     a36:	0e 94 4d 1c 	call	0x389a	; 0x389a <__floatsisf>
     a3a:	69 83       	std	Y+1, r22	; 0x01
     a3c:	7a 83       	std	Y+2, r23	; 0x02
     a3e:	8b 83       	std	Y+3, r24	; 0x03
     a40:	9c 83       	std	Y+4, r25	; 0x04
     a42:	6a 85       	ldd	r22, Y+10	; 0x0a
     a44:	7b 85       	ldd	r23, Y+11	; 0x0b
     a46:	8c 85       	ldd	r24, Y+12	; 0x0c
     a48:	9d 85       	ldd	r25, Y+13	; 0x0d
     a4a:	0e 94 af 1b 	call	0x375e	; 0x375e <cos>
     a4e:	6b 01       	movw	r12, r22
     a50:	7c 01       	movw	r14, r24
     a52:	ff 85       	ldd	r31, Y+15	; 0x0f
     a54:	6f 2f       	mov	r22, r31
     a56:	70 e0       	ldi	r23, 0x00	; 0
     a58:	80 e0       	ldi	r24, 0x00	; 0
     a5a:	90 e0       	ldi	r25, 0x00	; 0
     a5c:	0e 94 4d 1c 	call	0x389a	; 0x389a <__floatsisf>
     a60:	2b 01       	movw	r4, r22
     a62:	3c 01       	movw	r6, r24
     a64:	a7 01       	movw	r20, r14
     a66:	96 01       	movw	r18, r12
     a68:	69 81       	ldd	r22, Y+1	; 0x01
     a6a:	7a 81       	ldd	r23, Y+2	; 0x02
     a6c:	8b 81       	ldd	r24, Y+3	; 0x03
     a6e:	9c 81       	ldd	r25, Y+4	; 0x04
     a70:	0e 94 66 1d 	call	0x3acc	; 0x3acc <__mulsf3>
     a74:	9b 01       	movw	r18, r22
     a76:	ac 01       	movw	r20, r24
     a78:	c3 01       	movw	r24, r6
     a7a:	b2 01       	movw	r22, r4
     a7c:	0e 94 e4 1a 	call	0x35c8	; 0x35c8 <__subsf3>
     a80:	0e 94 1f 1c 	call	0x383e	; 0x383e <__fixunssfsi>
     a84:	6f 87       	std	Y+15, r22	; 0x0f
	uint8_t sy = basecenter_y+middlelength*sin(rotationangle-M_PI_2);
     a86:	6a 85       	ldd	r22, Y+10	; 0x0a
     a88:	7b 85       	ldd	r23, Y+11	; 0x0b
     a8a:	8c 85       	ldd	r24, Y+12	; 0x0c
     a8c:	9d 85       	ldd	r25, Y+13	; 0x0d
     a8e:	0e 94 c9 1d 	call	0x3b92	; 0x3b92 <sin>
     a92:	6b 01       	movw	r12, r22
     a94:	7c 01       	movw	r14, r24
     a96:	2d 81       	ldd	r18, Y+5	; 0x05
     a98:	62 2f       	mov	r22, r18
     a9a:	70 e0       	ldi	r23, 0x00	; 0
     a9c:	80 e0       	ldi	r24, 0x00	; 0
     a9e:	90 e0       	ldi	r25, 0x00	; 0
     aa0:	0e 94 4d 1c 	call	0x389a	; 0x389a <__floatsisf>
     aa4:	2b 01       	movw	r4, r22
     aa6:	3c 01       	movw	r6, r24
     aa8:	a7 01       	movw	r20, r14
     aaa:	96 01       	movw	r18, r12
     aac:	69 81       	ldd	r22, Y+1	; 0x01
     aae:	7a 81       	ldd	r23, Y+2	; 0x02
     ab0:	8b 81       	ldd	r24, Y+3	; 0x03
     ab2:	9c 81       	ldd	r25, Y+4	; 0x04
     ab4:	0e 94 66 1d 	call	0x3acc	; 0x3acc <__mulsf3>
     ab8:	9b 01       	movw	r18, r22
     aba:	ac 01       	movw	r20, r24
     abc:	c3 01       	movw	r24, r6
     abe:	b2 01       	movw	r22, r4
     ac0:	0e 94 e5 1a 	call	0x35ca	; 0x35ca <__addsf3>
     ac4:	0e 94 1f 1c 	call	0x383e	; 0x383e <__fixunssfsi>
     ac8:	d6 2e       	mov	r13, r22
	draw_line(sx,sy,lengtharm,baseangle+rotationangle);
     aca:	a5 01       	movw	r20, r10
     acc:	94 01       	movw	r18, r8
     ace:	6e 81       	ldd	r22, Y+6	; 0x06
     ad0:	7f 81       	ldd	r23, Y+7	; 0x07
     ad2:	88 85       	ldd	r24, Y+8	; 0x08
     ad4:	99 85       	ldd	r25, Y+9	; 0x09
     ad6:	0e 94 e5 1a 	call	0x35ca	; 0x35ca <__addsf3>
     ada:	7b 01       	movw	r14, r22
     adc:	8c 01       	movw	r16, r24
     ade:	2e 85       	ldd	r18, Y+14	; 0x0e
     ae0:	4d 2d       	mov	r20, r13
     ae2:	6f 85       	ldd	r22, Y+15	; 0x0f
     ae4:	c1 01       	movw	r24, r2
     ae6:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <_ZN7Display9draw_lineEhhhf>
	//draw right arm
	draw_line(sx,sy,lengtharm,-baseangle+rotationangle-M_PI);
     aea:	2e 81       	ldd	r18, Y+6	; 0x06
     aec:	3f 81       	ldd	r19, Y+7	; 0x07
     aee:	48 85       	ldd	r20, Y+8	; 0x08
     af0:	59 85       	ldd	r21, Y+9	; 0x09
     af2:	c5 01       	movw	r24, r10
     af4:	b4 01       	movw	r22, r8
     af6:	0e 94 e4 1a 	call	0x35c8	; 0x35c8 <__subsf3>
     afa:	2b ed       	ldi	r18, 0xDB	; 219
     afc:	3f e0       	ldi	r19, 0x0F	; 15
     afe:	49 e4       	ldi	r20, 0x49	; 73
     b00:	50 e4       	ldi	r21, 0x40	; 64
     b02:	0e 94 e4 1a 	call	0x35c8	; 0x35c8 <__subsf3>
     b06:	7b 01       	movw	r14, r22
     b08:	8c 01       	movw	r16, r24
     b0a:	2e 85       	ldd	r18, Y+14	; 0x0e
     b0c:	4d 2d       	mov	r20, r13
     b0e:	6f 85       	ldd	r22, Y+15	; 0x0f
     b10:	c1 01       	movw	r24, r2
     b12:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <_ZN7Display9draw_lineEhhhf>
}
     b16:	60 96       	adiw	r28, 0x10	; 16
     b18:	0f b6       	in	r0, 0x3f	; 63
     b1a:	f8 94       	cli
     b1c:	de bf       	out	0x3e, r29	; 62
     b1e:	0f be       	out	0x3f, r0	; 63
     b20:	cd bf       	out	0x3d, r28	; 61
     b22:	df 91       	pop	r29
     b24:	cf 91       	pop	r28
     b26:	1f 91       	pop	r17
     b28:	0f 91       	pop	r16
     b2a:	ff 90       	pop	r15
     b2c:	ef 90       	pop	r14
     b2e:	df 90       	pop	r13
     b30:	cf 90       	pop	r12
     b32:	bf 90       	pop	r11
     b34:	af 90       	pop	r10
     b36:	9f 90       	pop	r9
     b38:	8f 90       	pop	r8
     b3a:	7f 90       	pop	r7
     b3c:	6f 90       	pop	r6
     b3e:	5f 90       	pop	r5
     b40:	4f 90       	pop	r4
     b42:	3f 90       	pop	r3
     b44:	2f 90       	pop	r2
     b46:	08 95       	ret

00000b48 <_ZN7Display9draw_ASCIEhhh>:

void Display::draw_ASCI(uint8_t sym,uint8_t x, uint8_t y){
     b48:	0f 93       	push	r16
     b4a:	1f 93       	push	r17
     b4c:	cf 93       	push	r28
     b4e:	df 93       	push	r29
	if(sym!=' ' && sym>=33){
     b50:	61 32       	cpi	r22, 0x21	; 33
     b52:	08 f4       	brcc	.+2      	; 0xb56 <_ZN7Display9draw_ASCIEhhh+0xe>
     b54:	42 c0       	rjmp	.+132    	; 0xbda <_ZN7Display9draw_ASCIEhhh+0x92>
		sym-=33;
		uint16_t symbol;
		for(uint8_t i = 0; i < 5; i++){
			symbol = pgm_read_byte(&font5x8[sym][i]);
			symbol = symbol << y%8;
			Displayframe[x+(y/8)*SSD1306_WIDTH+i] |=(uint8_t) (symbol & 0x00FF);
     b56:	a4 2f       	mov	r26, r20
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	02 2f       	mov	r16, r18
     b5c:	06 95       	lsr	r16
     b5e:	06 95       	lsr	r16
     b60:	06 95       	lsr	r16
     b62:	30 e8       	ldi	r19, 0x80	; 128
     b64:	03 9f       	mul	r16, r19
     b66:	80 01       	movw	r16, r0
     b68:	11 24       	eor	r1, r1
     b6a:	ed 01       	movw	r28, r26
     b6c:	c0 0f       	add	r28, r16
     b6e:	d1 1f       	adc	r29, r17
			if(((symbol&0xFF00)>>8)==0){
				Displayframe[x+(y/8+1)*SSD1306_WIDTH+i] |= 0;
			}
			else {
				Displayframe[x+(y/8+1)*SSD1306_WIDTH+i] |= (uint8_t) ((symbol & 0xFF00)>>8);
     b70:	00 58       	subi	r16, 0x80	; 128
     b72:	1f 4f       	sbci	r17, 0xFF	; 255
     b74:	0a 0f       	add	r16, r26
     b76:	1b 1f       	adc	r17, r27
	draw_line(sx,sy,lengtharm,-baseangle+rotationangle-M_PI);
}

void Display::draw_ASCI(uint8_t sym,uint8_t x, uint8_t y){
	if(sym!=' ' && sym>=33){
		sym-=33;
     b78:	61 52       	subi	r22, 0x21	; 33
     b7a:	46 2f       	mov	r20, r22
     b7c:	50 e0       	ldi	r21, 0x00	; 0
     b7e:	fa 01       	movw	r30, r20
     b80:	ee 0f       	add	r30, r30
     b82:	ff 1f       	adc	r31, r31
     b84:	ee 0f       	add	r30, r30
     b86:	ff 1f       	adc	r31, r31
     b88:	e4 0f       	add	r30, r20
     b8a:	f5 1f       	adc	r31, r21
     b8c:	e6 5c       	subi	r30, 0xC6	; 198
     b8e:	fd 4f       	sbci	r31, 0xFD	; 253
     b90:	dc 01       	movw	r26, r24
     b92:	ac 0f       	add	r26, r28
     b94:	bd 1f       	adc	r27, r29
     b96:	ae 01       	movw	r20, r28
     b98:	05 96       	adiw	r24, 0x05	; 5
     b9a:	8c 0f       	add	r24, r28
     b9c:	9d 1f       	adc	r25, r29
		uint16_t symbol;
		for(uint8_t i = 0; i < 5; i++){
			symbol = pgm_read_byte(&font5x8[sym][i]);
			symbol = symbol << y%8;
     b9e:	27 70       	andi	r18, 0x07	; 7
void Display::draw_ASCI(uint8_t sym,uint8_t x, uint8_t y){
	if(sym!=' ' && sym>=33){
		sym-=33;
		uint16_t symbol;
		for(uint8_t i = 0; i < 5; i++){
			symbol = pgm_read_byte(&font5x8[sym][i]);
     ba0:	64 91       	lpm	r22, Z
     ba2:	70 e0       	ldi	r23, 0x00	; 0
			symbol = symbol << y%8;
     ba4:	02 2e       	mov	r0, r18
     ba6:	02 c0       	rjmp	.+4      	; 0xbac <_ZN7Display9draw_ASCIEhhh+0x64>
     ba8:	66 0f       	add	r22, r22
     baa:	77 1f       	adc	r23, r23
     bac:	0a 94       	dec	r0
     bae:	e2 f7       	brpl	.-8      	; 0xba8 <_ZN7Display9draw_ASCIEhhh+0x60>
			Displayframe[x+(y/8)*SSD1306_WIDTH+i] |=(uint8_t) (symbol & 0x00FF);
     bb0:	3c 91       	ld	r19, X
     bb2:	36 2b       	or	r19, r22
     bb4:	3c 93       	st	X, r19
			if(((symbol&0xFF00)>>8)==0){
     bb6:	67 2f       	mov	r22, r23
     bb8:	77 27       	eor	r23, r23
     bba:	61 15       	cp	r22, r1
     bbc:	71 05       	cpc	r23, r1
     bbe:	41 f0       	breq	.+16     	; 0xbd0 <_ZN7Display9draw_ASCIEhhh+0x88>
     bc0:	ed 01       	movw	r28, r26
     bc2:	c4 1b       	sub	r28, r20
     bc4:	d5 0b       	sbc	r29, r21
     bc6:	c0 0f       	add	r28, r16
     bc8:	d1 1f       	adc	r29, r17
				Displayframe[x+(y/8+1)*SSD1306_WIDTH+i] |= 0;
			}
			else {
				Displayframe[x+(y/8+1)*SSD1306_WIDTH+i] |= (uint8_t) ((symbol & 0xFF00)>>8);
     bca:	38 81       	ld	r19, Y
     bcc:	63 2b       	or	r22, r19
     bce:	68 83       	st	Y, r22
     bd0:	31 96       	adiw	r30, 0x01	; 1
     bd2:	11 96       	adiw	r26, 0x01	; 1

void Display::draw_ASCI(uint8_t sym,uint8_t x, uint8_t y){
	if(sym!=' ' && sym>=33){
		sym-=33;
		uint16_t symbol;
		for(uint8_t i = 0; i < 5; i++){
     bd4:	a8 17       	cp	r26, r24
     bd6:	b9 07       	cpc	r27, r25
     bd8:	19 f7       	brne	.-58     	; 0xba0 <_ZN7Display9draw_ASCIEhhh+0x58>
	else{
		for(uint8_t i = 0; i < 7; i++){
			Displayframe[x+(y/8)*SSD1306_WIDTH+i] |= 0;
		}
	}
}
     bda:	df 91       	pop	r29
     bdc:	cf 91       	pop	r28
     bde:	1f 91       	pop	r17
     be0:	0f 91       	pop	r16
     be2:	08 95       	ret

00000be4 <_ZN7Display16draw_number16x16Ehhh>:

void Display::draw_number16x16(uint8_t number, uint8_t x, uint8_t y){
     be4:	ef 92       	push	r14
     be6:	ff 92       	push	r15
     be8:	0f 93       	push	r16
     bea:	1f 93       	push	r17
     bec:	cf 93       	push	r28
     bee:	df 93       	push	r29
	uint16_t symbol;
	if(number>=0 && number<10){
     bf0:	6a 30       	cpi	r22, 0x0A	; 10
     bf2:	08 f0       	brcs	.+2      	; 0xbf6 <_ZN7Display16draw_number16x16Ehhh+0x12>
     bf4:	66 c0       	rjmp	.+204    	; 0xcc2 <_ZN7Display16draw_number16x16Ehhh+0xde>
		for(uint8_t i = 0; i < 32;i++){
			symbol = pgm_read_byte(&digits16x16[number][i]);
			symbol = symbol << y%8;
			if(i<16){
				Displayframe[x+(y/8)*SSD1306_WIDTH+i] |=(uint8_t) (symbol & 0x00FF);
     bf6:	50 e0       	ldi	r21, 0x00	; 0
     bf8:	02 2f       	mov	r16, r18
     bfa:	06 95       	lsr	r16
     bfc:	06 95       	lsr	r16
     bfe:	06 95       	lsr	r16
     c00:	10 e0       	ldi	r17, 0x00	; 0
     c02:	d8 01       	movw	r26, r16
     c04:	b6 95       	lsr	r27
     c06:	ba 2f       	mov	r27, r26
     c08:	aa 27       	eor	r26, r26
     c0a:	b7 95       	ror	r27
     c0c:	a7 95       	ror	r26
				if(((symbol&0xFF00)>>8)==0){
					Displayframe[x+(y/8+1)*SSD1306_WIDTH+i] |= 0;
				}
				else {
					Displayframe[x+(y/8+1)*SSD1306_WIDTH+i] |= (uint8_t) ((symbol & 0xFF00)>>8);
     c0e:	0f 5f       	subi	r16, 0xFF	; 255
     c10:	1f 4f       	sbci	r17, 0xFF	; 255
				}
			}
			else {
				Displayframe[x+(y/8+1)*SSD1306_WIDTH+(i-16)] |= (uint8_t) (symbol & 0x00FF);
     c12:	16 95       	lsr	r17
     c14:	10 2f       	mov	r17, r16
     c16:	00 27       	eor	r16, r16
     c18:	17 95       	ror	r17
     c1a:	07 95       	ror	r16
				Displayframe[x+(y/8)*SSD1306_WIDTH+i] |=(uint8_t) (symbol & 0x00FF);
				if(((symbol&0xFF00)>>8)==0){
					Displayframe[x+(y/8+1)*SSD1306_WIDTH+i] |= 0;
				}
				else {
					Displayframe[x+(y/8+1)*SSD1306_WIDTH+i] |= (uint8_t) ((symbol & 0xFF00)>>8);
     c1c:	7d 01       	movw	r14, r26
     c1e:	30 e8       	ldi	r19, 0x80	; 128
     c20:	e3 0e       	add	r14, r19
     c22:	f1 1c       	adc	r15, r1
     c24:	e4 0e       	add	r14, r20
     c26:	f5 1e       	adc	r15, r21
     c28:	e8 0e       	add	r14, r24
     c2a:	f9 1e       	adc	r15, r25
				}
			}
			else {
				Displayframe[x+(y/8+1)*SSD1306_WIDTH+(i-16)] |= (uint8_t) (symbol & 0x00FF);
     c2c:	ea 01       	movw	r28, r20
     c2e:	c0 0f       	add	r28, r16
     c30:	d1 1f       	adc	r29, r17
     c32:	60 97       	sbiw	r28, 0x10	; 16
     c34:	c8 0f       	add	r28, r24
     c36:	d9 1f       	adc	r29, r25
				if(((symbol&0xFF00)>>8)==0){
					Displayframe[x+(y/8+2)*SSD1306_WIDTH+(i-16)] |= 0;
				}
				else {
					Displayframe[x+(y/8+2)*SSD1306_WIDTH+(i-16)] |= (uint8_t) ((symbol & 0xFF00)>>8);
     c38:	04 0f       	add	r16, r20
     c3a:	15 1f       	adc	r17, r21
     c3c:	00 59       	subi	r16, 0x90	; 144
     c3e:	1f 4f       	sbci	r17, 0xFF	; 255
     c40:	08 0f       	add	r16, r24
     c42:	19 1f       	adc	r17, r25
	if(number>=0 && number<10){
		for(uint8_t i = 0; i < 32;i++){
			symbol = pgm_read_byte(&digits16x16[number][i]);
			symbol = symbol << y%8;
			if(i<16){
				Displayframe[x+(y/8)*SSD1306_WIDTH+i] |=(uint8_t) (symbol & 0x00FF);
     c44:	a4 0f       	add	r26, r20
     c46:	b5 1f       	adc	r27, r21
     c48:	a8 0f       	add	r26, r24
     c4a:	b9 1f       	adc	r27, r25
     c4c:	e0 e2       	ldi	r30, 0x20	; 32
     c4e:	6e 9f       	mul	r22, r30
     c50:	c0 01       	movw	r24, r0
     c52:	11 24       	eor	r1, r1
				Displayframe[x+(y/8+1)*SSD1306_WIDTH+(i-16)] |= (uint8_t) (symbol & 0x00FF);
				if(((symbol&0xFF00)>>8)==0){
					Displayframe[x+(y/8+2)*SSD1306_WIDTH+(i-16)] |= 0;
				}
				else {
					Displayframe[x+(y/8+2)*SSD1306_WIDTH+(i-16)] |= (uint8_t) ((symbol & 0xFF00)>>8);
     c54:	40 e0       	ldi	r20, 0x00	; 0
     c56:	50 e0       	ldi	r21, 0x00	; 0
     c58:	86 50       	subi	r24, 0x06	; 6
     c5a:	9f 4f       	sbci	r25, 0xFF	; 255
void Display::draw_number16x16(uint8_t number, uint8_t x, uint8_t y){
	uint16_t symbol;
	if(number>=0 && number<10){
		for(uint8_t i = 0; i < 32;i++){
			symbol = pgm_read_byte(&digits16x16[number][i]);
			symbol = symbol << y%8;
     c5c:	27 70       	andi	r18, 0x07	; 7
     c5e:	fc 01       	movw	r30, r24
     c60:	e4 0f       	add	r30, r20
     c62:	f5 1f       	adc	r31, r21

void Display::draw_number16x16(uint8_t number, uint8_t x, uint8_t y){
	uint16_t symbol;
	if(number>=0 && number<10){
		for(uint8_t i = 0; i < 32;i++){
			symbol = pgm_read_byte(&digits16x16[number][i]);
     c64:	e4 91       	lpm	r30, Z
     c66:	f0 e0       	ldi	r31, 0x00	; 0
			symbol = symbol << y%8;
     c68:	02 2e       	mov	r0, r18
     c6a:	02 c0       	rjmp	.+4      	; 0xc70 <_ZN7Display16draw_number16x16Ehhh+0x8c>
     c6c:	ee 0f       	add	r30, r30
     c6e:	ff 1f       	adc	r31, r31
     c70:	0a 94       	dec	r0
     c72:	e2 f7       	brpl	.-8      	; 0xc6c <_ZN7Display16draw_number16x16Ehhh+0x88>
			if(i<16){
     c74:	40 31       	cpi	r20, 0x10	; 16
     c76:	68 f4       	brcc	.+26     	; 0xc92 <_ZN7Display16draw_number16x16Ehhh+0xae>
				Displayframe[x+(y/8)*SSD1306_WIDTH+i] |=(uint8_t) (symbol & 0x00FF);
     c78:	3c 91       	ld	r19, X
     c7a:	3e 2b       	or	r19, r30
     c7c:	3c 93       	st	X, r19
				if(((symbol&0xFF00)>>8)==0){
     c7e:	6f 2f       	mov	r22, r31
     c80:	77 27       	eor	r23, r23
     c82:	61 15       	cp	r22, r1
     c84:	71 05       	cpc	r23, r1
     c86:	89 f0       	breq	.+34     	; 0xcaa <_ZN7Display16draw_number16x16Ehhh+0xc6>
					Displayframe[x+(y/8+1)*SSD1306_WIDTH+i] |= 0;
				}
				else {
					Displayframe[x+(y/8+1)*SSD1306_WIDTH+i] |= (uint8_t) ((symbol & 0xFF00)>>8);
     c88:	f7 01       	movw	r30, r14
     c8a:	30 81       	ld	r19, Z
     c8c:	36 2b       	or	r19, r22
     c8e:	30 83       	st	Z, r19
     c90:	0c c0       	rjmp	.+24     	; 0xcaa <_ZN7Display16draw_number16x16Ehhh+0xc6>
				}
			}
			else {
				Displayframe[x+(y/8+1)*SSD1306_WIDTH+(i-16)] |= (uint8_t) (symbol & 0x00FF);
     c92:	38 81       	ld	r19, Y
     c94:	3e 2b       	or	r19, r30
     c96:	38 83       	st	Y, r19
				if(((symbol&0xFF00)>>8)==0){
     c98:	6f 2f       	mov	r22, r31
     c9a:	77 27       	eor	r23, r23
     c9c:	61 15       	cp	r22, r1
     c9e:	71 05       	cpc	r23, r1
     ca0:	21 f0       	breq	.+8      	; 0xcaa <_ZN7Display16draw_number16x16Ehhh+0xc6>
					Displayframe[x+(y/8+2)*SSD1306_WIDTH+(i-16)] |= 0;
				}
				else {
					Displayframe[x+(y/8+2)*SSD1306_WIDTH+(i-16)] |= (uint8_t) ((symbol & 0xFF00)>>8);
     ca2:	f8 01       	movw	r30, r16
     ca4:	30 81       	ld	r19, Z
     ca6:	36 2b       	or	r19, r22
     ca8:	30 83       	st	Z, r19
     caa:	4f 5f       	subi	r20, 0xFF	; 255
     cac:	5f 4f       	sbci	r21, 0xFF	; 255
     cae:	ff ef       	ldi	r31, 0xFF	; 255
     cb0:	ef 1a       	sub	r14, r31
     cb2:	ff 0a       	sbc	r15, r31
     cb4:	21 96       	adiw	r28, 0x01	; 1
     cb6:	0f 5f       	subi	r16, 0xFF	; 255
     cb8:	1f 4f       	sbci	r17, 0xFF	; 255
     cba:	11 96       	adiw	r26, 0x01	; 1
}

void Display::draw_number16x16(uint8_t number, uint8_t x, uint8_t y){
	uint16_t symbol;
	if(number>=0 && number<10){
		for(uint8_t i = 0; i < 32;i++){
     cbc:	40 32       	cpi	r20, 0x20	; 32
     cbe:	51 05       	cpc	r21, r1
     cc0:	71 f6       	brne	.-100    	; 0xc5e <_ZN7Display16draw_number16x16Ehhh+0x7a>
					Displayframe[x+(y/8+2)*SSD1306_WIDTH+(i-16)] |= (uint8_t) ((symbol & 0xFF00)>>8);
				}
			}
		}
	}
}
     cc2:	df 91       	pop	r29
     cc4:	cf 91       	pop	r28
     cc6:	1f 91       	pop	r17
     cc8:	0f 91       	pop	r16
     cca:	ff 90       	pop	r15
     ccc:	ef 90       	pop	r14
     cce:	08 95       	ret

00000cd0 <_ZN7Display6analogEhhh>:

void Display::analog(uint8_t stunde, uint8_t minute, uint8_t sekunde){
     cd0:	2f 92       	push	r2
     cd2:	3f 92       	push	r3
     cd4:	4f 92       	push	r4
     cd6:	5f 92       	push	r5
     cd8:	6f 92       	push	r6
     cda:	7f 92       	push	r7
     cdc:	8f 92       	push	r8
     cde:	9f 92       	push	r9
     ce0:	af 92       	push	r10
     ce2:	bf 92       	push	r11
     ce4:	cf 92       	push	r12
     ce6:	df 92       	push	r13
     ce8:	ef 92       	push	r14
     cea:	ff 92       	push	r15
     cec:	0f 93       	push	r16
     cee:	1f 93       	push	r17
     cf0:	cf 93       	push	r28
     cf2:	df 93       	push	r29
     cf4:	00 d0       	rcall	.+0      	; 0xcf6 <_ZN7Display6analogEhhh+0x26>
     cf6:	1f 92       	push	r1
     cf8:	cd b7       	in	r28, 0x3d	; 61
     cfa:	de b7       	in	r29, 0x3e	; 62
     cfc:	8c 01       	movw	r16, r24
     cfe:	69 83       	std	Y+1, r22	; 0x01
     d00:	24 2e       	mov	r2, r20
	uint8_t x=0,y=0;
	float winkel=0;

	//Berechnen des Sekundenzeigers
	for(uint8_t i=0;i<r;i++){
		winkel=(sekunde*6.0)*M_PI/180.0-M_PI/2.0;
     d02:	62 2f       	mov	r22, r18
     d04:	70 e0       	ldi	r23, 0x00	; 0
     d06:	80 e0       	ldi	r24, 0x00	; 0
     d08:	90 e0       	ldi	r25, 0x00	; 0
     d0a:	0e 94 4d 1c 	call	0x389a	; 0x389a <__floatsisf>
     d0e:	20 e0       	ldi	r18, 0x00	; 0
     d10:	30 e0       	ldi	r19, 0x00	; 0
     d12:	40 ec       	ldi	r20, 0xC0	; 192
     d14:	50 e4       	ldi	r21, 0x40	; 64
     d16:	0e 94 66 1d 	call	0x3acc	; 0x3acc <__mulsf3>
     d1a:	2b ed       	ldi	r18, 0xDB	; 219
     d1c:	3f e0       	ldi	r19, 0x0F	; 15
     d1e:	49 e4       	ldi	r20, 0x49	; 73
     d20:	50 e4       	ldi	r21, 0x40	; 64
     d22:	0e 94 66 1d 	call	0x3acc	; 0x3acc <__mulsf3>
     d26:	20 e0       	ldi	r18, 0x00	; 0
     d28:	30 e0       	ldi	r19, 0x00	; 0
     d2a:	44 e3       	ldi	r20, 0x34	; 52
     d2c:	53 e4       	ldi	r21, 0x43	; 67
     d2e:	0e 94 b2 1b 	call	0x3764	; 0x3764 <__divsf3>
     d32:	2b ed       	ldi	r18, 0xDB	; 219
     d34:	3f e0       	ldi	r19, 0x0F	; 15
     d36:	49 ec       	ldi	r20, 0xC9	; 201
     d38:	5f e3       	ldi	r21, 0x3F	; 63
     d3a:	0e 94 e4 1a 	call	0x35c8	; 0x35c8 <__subsf3>
     d3e:	6b 01       	movw	r12, r22
     d40:	7c 01       	movw	r14, r24
		x=(uint8_t) i*cos(winkel)+Px;
     d42:	0e 94 af 1b 	call	0x375e	; 0x375e <cos>
     d46:	2b 01       	movw	r4, r22
     d48:	3c 01       	movw	r6, r24
		y=(uint8_t) i*sin(winkel)+Py;
     d4a:	c7 01       	movw	r24, r14
     d4c:	b6 01       	movw	r22, r12
     d4e:	0e 94 c9 1d 	call	0x3b92	; 0x3b92 <sin>
     d52:	4b 01       	movw	r8, r22
     d54:	5c 01       	movw	r10, r24
     d56:	1b 82       	std	Y+3, r1	; 0x03
     d58:	1a 82       	std	Y+2, r1	; 0x02
	float winkel=0;

	//Berechnen des Sekundenzeigers
	for(uint8_t i=0;i<r;i++){
		winkel=(sekunde*6.0)*M_PI/180.0-M_PI/2.0;
		x=(uint8_t) i*cos(winkel)+Px;
     d5a:	2a 81       	ldd	r18, Y+2	; 0x02
     d5c:	3b 81       	ldd	r19, Y+3	; 0x03
     d5e:	b9 01       	movw	r22, r18
     d60:	88 27       	eor	r24, r24
     d62:	77 fd       	sbrc	r23, 7
     d64:	80 95       	com	r24
     d66:	98 2f       	mov	r25, r24
     d68:	0e 94 4d 1c 	call	0x389a	; 0x389a <__floatsisf>
     d6c:	6b 01       	movw	r12, r22
     d6e:	7c 01       	movw	r14, r24
		y=(uint8_t) i*sin(winkel)+Py;
     d70:	a5 01       	movw	r20, r10
     d72:	94 01       	movw	r18, r8
     d74:	0e 94 66 1d 	call	0x3acc	; 0x3acc <__mulsf3>
     d78:	20 e0       	ldi	r18, 0x00	; 0
     d7a:	30 e0       	ldi	r19, 0x00	; 0
     d7c:	48 ef       	ldi	r20, 0xF8	; 248
     d7e:	51 e4       	ldi	r21, 0x41	; 65
     d80:	0e 94 e5 1a 	call	0x35ca	; 0x35ca <__addsf3>
     d84:	0e 94 1f 1c 	call	0x383e	; 0x383e <__fixunssfsi>
     d88:	36 2e       	mov	r3, r22
	float winkel=0;

	//Berechnen des Sekundenzeigers
	for(uint8_t i=0;i<r;i++){
		winkel=(sekunde*6.0)*M_PI/180.0-M_PI/2.0;
		x=(uint8_t) i*cos(winkel)+Px;
     d8a:	a3 01       	movw	r20, r6
     d8c:	92 01       	movw	r18, r4
     d8e:	c7 01       	movw	r24, r14
     d90:	b6 01       	movw	r22, r12
     d92:	0e 94 66 1d 	call	0x3acc	; 0x3acc <__mulsf3>
     d96:	20 e0       	ldi	r18, 0x00	; 0
     d98:	30 e0       	ldi	r19, 0x00	; 0
     d9a:	48 ef       	ldi	r20, 0xF8	; 248
     d9c:	51 e4       	ldi	r21, 0x41	; 65
     d9e:	0e 94 e5 1a 	call	0x35ca	; 0x35ca <__addsf3>
     da2:	0e 94 1f 1c 	call	0x383e	; 0x383e <__fixunssfsi>
		y=(uint8_t) i*sin(winkel)+Py;

		drawPixel(x,y,0);
     da6:	20 e0       	ldi	r18, 0x00	; 0
     da8:	43 2d       	mov	r20, r3
     daa:	c8 01       	movw	r24, r16
     dac:	0e 94 a2 03 	call	0x744	; 0x744 <_ZN7Display9drawPixelEhhh>
     db0:	8a 81       	ldd	r24, Y+2	; 0x02
     db2:	9b 81       	ldd	r25, Y+3	; 0x03
     db4:	01 96       	adiw	r24, 0x01	; 1
     db6:	9b 83       	std	Y+3, r25	; 0x03
     db8:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t Py=32-1;
	uint8_t x=0,y=0;
	float winkel=0;

	//Berechnen des Sekundenzeigers
	for(uint8_t i=0;i<r;i++){
     dba:	49 97       	sbiw	r24, 0x19	; 25
     dbc:	71 f6       	brne	.-100    	; 0xd5a <_ZN7Display6analogEhhh+0x8a>
	}

	r=17;
	//Berechnen des Minutenzeigers
	for(uint8_t i=0;i<r;i++){
		winkel=(minute*6.0)*M_PI/180.0-M_PI/2.0;
     dbe:	62 2d       	mov	r22, r2
     dc0:	70 e0       	ldi	r23, 0x00	; 0
     dc2:	80 e0       	ldi	r24, 0x00	; 0
     dc4:	90 e0       	ldi	r25, 0x00	; 0
     dc6:	0e 94 4d 1c 	call	0x389a	; 0x389a <__floatsisf>
     dca:	20 e0       	ldi	r18, 0x00	; 0
     dcc:	30 e0       	ldi	r19, 0x00	; 0
     dce:	40 ec       	ldi	r20, 0xC0	; 192
     dd0:	50 e4       	ldi	r21, 0x40	; 64
     dd2:	0e 94 66 1d 	call	0x3acc	; 0x3acc <__mulsf3>
     dd6:	2b ed       	ldi	r18, 0xDB	; 219
     dd8:	3f e0       	ldi	r19, 0x0F	; 15
     dda:	49 e4       	ldi	r20, 0x49	; 73
     ddc:	50 e4       	ldi	r21, 0x40	; 64
     dde:	0e 94 66 1d 	call	0x3acc	; 0x3acc <__mulsf3>
     de2:	20 e0       	ldi	r18, 0x00	; 0
     de4:	30 e0       	ldi	r19, 0x00	; 0
     de6:	44 e3       	ldi	r20, 0x34	; 52
     de8:	53 e4       	ldi	r21, 0x43	; 67
     dea:	0e 94 b2 1b 	call	0x3764	; 0x3764 <__divsf3>
     dee:	2b ed       	ldi	r18, 0xDB	; 219
     df0:	3f e0       	ldi	r19, 0x0F	; 15
     df2:	49 ec       	ldi	r20, 0xC9	; 201
     df4:	5f e3       	ldi	r21, 0x3F	; 63
     df6:	0e 94 e4 1a 	call	0x35c8	; 0x35c8 <__subsf3>
     dfa:	6b 01       	movw	r12, r22
     dfc:	7c 01       	movw	r14, r24
		x=(uint8_t) i*cos(winkel)+Px;
     dfe:	0e 94 af 1b 	call	0x375e	; 0x375e <cos>
     e02:	2b 01       	movw	r4, r22
     e04:	3c 01       	movw	r6, r24
		y=(uint8_t) i*sin(winkel)+Py;
     e06:	c7 01       	movw	r24, r14
     e08:	b6 01       	movw	r22, r12
     e0a:	0e 94 c9 1d 	call	0x3b92	; 0x3b92 <sin>
     e0e:	4b 01       	movw	r8, r22
     e10:	5c 01       	movw	r10, r24
     e12:	1b 82       	std	Y+3, r1	; 0x03
     e14:	1a 82       	std	Y+2, r1	; 0x02

	r=17;
	//Berechnen des Minutenzeigers
	for(uint8_t i=0;i<r;i++){
		winkel=(minute*6.0)*M_PI/180.0-M_PI/2.0;
		x=(uint8_t) i*cos(winkel)+Px;
     e16:	ea 81       	ldd	r30, Y+2	; 0x02
     e18:	fb 81       	ldd	r31, Y+3	; 0x03
     e1a:	bf 01       	movw	r22, r30
     e1c:	88 27       	eor	r24, r24
     e1e:	77 fd       	sbrc	r23, 7
     e20:	80 95       	com	r24
     e22:	98 2f       	mov	r25, r24
     e24:	0e 94 4d 1c 	call	0x389a	; 0x389a <__floatsisf>
     e28:	6b 01       	movw	r12, r22
     e2a:	7c 01       	movw	r14, r24
		y=(uint8_t) i*sin(winkel)+Py;
     e2c:	a5 01       	movw	r20, r10
     e2e:	94 01       	movw	r18, r8
     e30:	0e 94 66 1d 	call	0x3acc	; 0x3acc <__mulsf3>
     e34:	20 e0       	ldi	r18, 0x00	; 0
     e36:	30 e0       	ldi	r19, 0x00	; 0
     e38:	48 ef       	ldi	r20, 0xF8	; 248
     e3a:	51 e4       	ldi	r21, 0x41	; 65
     e3c:	0e 94 e5 1a 	call	0x35ca	; 0x35ca <__addsf3>
     e40:	0e 94 1f 1c 	call	0x383e	; 0x383e <__fixunssfsi>
     e44:	36 2e       	mov	r3, r22

	r=17;
	//Berechnen des Minutenzeigers
	for(uint8_t i=0;i<r;i++){
		winkel=(minute*6.0)*M_PI/180.0-M_PI/2.0;
		x=(uint8_t) i*cos(winkel)+Px;
     e46:	a3 01       	movw	r20, r6
     e48:	92 01       	movw	r18, r4
     e4a:	c7 01       	movw	r24, r14
     e4c:	b6 01       	movw	r22, r12
     e4e:	0e 94 66 1d 	call	0x3acc	; 0x3acc <__mulsf3>
     e52:	20 e0       	ldi	r18, 0x00	; 0
     e54:	30 e0       	ldi	r19, 0x00	; 0
     e56:	48 ef       	ldi	r20, 0xF8	; 248
     e58:	51 e4       	ldi	r21, 0x41	; 65
     e5a:	0e 94 e5 1a 	call	0x35ca	; 0x35ca <__addsf3>
     e5e:	0e 94 1f 1c 	call	0x383e	; 0x383e <__fixunssfsi>
		y=(uint8_t) i*sin(winkel)+Py;

		drawPixel(x,y,0);
     e62:	20 e0       	ldi	r18, 0x00	; 0
     e64:	43 2d       	mov	r20, r3
     e66:	c8 01       	movw	r24, r16
     e68:	0e 94 a2 03 	call	0x744	; 0x744 <_ZN7Display9drawPixelEhhh>
     e6c:	2a 81       	ldd	r18, Y+2	; 0x02
     e6e:	3b 81       	ldd	r19, Y+3	; 0x03
     e70:	2f 5f       	subi	r18, 0xFF	; 255
     e72:	3f 4f       	sbci	r19, 0xFF	; 255
     e74:	3b 83       	std	Y+3, r19	; 0x03
     e76:	2a 83       	std	Y+2, r18	; 0x02
		drawPixel(x,y,0);
	}

	r=17;
	//Berechnen des Minutenzeigers
	for(uint8_t i=0;i<r;i++){
     e78:	21 31       	cpi	r18, 0x11	; 17
     e7a:	31 05       	cpc	r19, r1
     e7c:	61 f6       	brne	.-104    	; 0xe16 <_ZN7Display6analogEhhh+0x146>
	}

	r=10;
	//Berechnen des Stundenzeigers
	for(uint8_t i=0;i<r;i++){
		winkel=(stunde*30.0)*M_PI/180.0-M_PI/2.0;
     e7e:	39 81       	ldd	r19, Y+1	; 0x01
     e80:	63 2f       	mov	r22, r19
     e82:	70 e0       	ldi	r23, 0x00	; 0
     e84:	80 e0       	ldi	r24, 0x00	; 0
     e86:	90 e0       	ldi	r25, 0x00	; 0
     e88:	0e 94 4d 1c 	call	0x389a	; 0x389a <__floatsisf>
     e8c:	20 e0       	ldi	r18, 0x00	; 0
     e8e:	30 e0       	ldi	r19, 0x00	; 0
     e90:	40 ef       	ldi	r20, 0xF0	; 240
     e92:	51 e4       	ldi	r21, 0x41	; 65
     e94:	0e 94 66 1d 	call	0x3acc	; 0x3acc <__mulsf3>
     e98:	2b ed       	ldi	r18, 0xDB	; 219
     e9a:	3f e0       	ldi	r19, 0x0F	; 15
     e9c:	49 e4       	ldi	r20, 0x49	; 73
     e9e:	50 e4       	ldi	r21, 0x40	; 64
     ea0:	0e 94 66 1d 	call	0x3acc	; 0x3acc <__mulsf3>
     ea4:	20 e0       	ldi	r18, 0x00	; 0
     ea6:	30 e0       	ldi	r19, 0x00	; 0
     ea8:	44 e3       	ldi	r20, 0x34	; 52
     eaa:	53 e4       	ldi	r21, 0x43	; 67
     eac:	0e 94 b2 1b 	call	0x3764	; 0x3764 <__divsf3>
     eb0:	2b ed       	ldi	r18, 0xDB	; 219
     eb2:	3f e0       	ldi	r19, 0x0F	; 15
     eb4:	49 ec       	ldi	r20, 0xC9	; 201
     eb6:	5f e3       	ldi	r21, 0x3F	; 63
     eb8:	0e 94 e4 1a 	call	0x35c8	; 0x35c8 <__subsf3>
     ebc:	6b 01       	movw	r12, r22
     ebe:	7c 01       	movw	r14, r24
		x= (uint8_t) i*cos(winkel) +Px;
     ec0:	0e 94 af 1b 	call	0x375e	; 0x375e <cos>
     ec4:	2b 01       	movw	r4, r22
     ec6:	3c 01       	movw	r6, r24
		y= (uint8_t) i*sin(winkel) +Py;
     ec8:	c7 01       	movw	r24, r14
     eca:	b6 01       	movw	r22, r12
     ecc:	0e 94 c9 1d 	call	0x3b92	; 0x3b92 <sin>
     ed0:	4b 01       	movw	r8, r22
     ed2:	5c 01       	movw	r10, r24
     ed4:	1b 82       	std	Y+3, r1	; 0x03
     ed6:	1a 82       	std	Y+2, r1	; 0x02

	r=10;
	//Berechnen des Stundenzeigers
	for(uint8_t i=0;i<r;i++){
		winkel=(stunde*30.0)*M_PI/180.0-M_PI/2.0;
		x= (uint8_t) i*cos(winkel) +Px;
     ed8:	ea 81       	ldd	r30, Y+2	; 0x02
     eda:	fb 81       	ldd	r31, Y+3	; 0x03
     edc:	bf 01       	movw	r22, r30
     ede:	88 27       	eor	r24, r24
     ee0:	77 fd       	sbrc	r23, 7
     ee2:	80 95       	com	r24
     ee4:	98 2f       	mov	r25, r24
     ee6:	0e 94 4d 1c 	call	0x389a	; 0x389a <__floatsisf>
     eea:	6b 01       	movw	r12, r22
     eec:	7c 01       	movw	r14, r24
		y= (uint8_t) i*sin(winkel) +Py;
     eee:	a5 01       	movw	r20, r10
     ef0:	94 01       	movw	r18, r8
     ef2:	0e 94 66 1d 	call	0x3acc	; 0x3acc <__mulsf3>
     ef6:	20 e0       	ldi	r18, 0x00	; 0
     ef8:	30 e0       	ldi	r19, 0x00	; 0
     efa:	48 ef       	ldi	r20, 0xF8	; 248
     efc:	51 e4       	ldi	r21, 0x41	; 65
     efe:	0e 94 e5 1a 	call	0x35ca	; 0x35ca <__addsf3>
     f02:	0e 94 1f 1c 	call	0x383e	; 0x383e <__fixunssfsi>
     f06:	36 2e       	mov	r3, r22

	r=10;
	//Berechnen des Stundenzeigers
	for(uint8_t i=0;i<r;i++){
		winkel=(stunde*30.0)*M_PI/180.0-M_PI/2.0;
		x= (uint8_t) i*cos(winkel) +Px;
     f08:	a3 01       	movw	r20, r6
     f0a:	92 01       	movw	r18, r4
     f0c:	c7 01       	movw	r24, r14
     f0e:	b6 01       	movw	r22, r12
     f10:	0e 94 66 1d 	call	0x3acc	; 0x3acc <__mulsf3>
     f14:	20 e0       	ldi	r18, 0x00	; 0
     f16:	30 e0       	ldi	r19, 0x00	; 0
     f18:	48 ef       	ldi	r20, 0xF8	; 248
     f1a:	51 e4       	ldi	r21, 0x41	; 65
     f1c:	0e 94 e5 1a 	call	0x35ca	; 0x35ca <__addsf3>
     f20:	0e 94 1f 1c 	call	0x383e	; 0x383e <__fixunssfsi>
		y= (uint8_t) i*sin(winkel) +Py;

		drawPixel(x,y,0);
     f24:	20 e0       	ldi	r18, 0x00	; 0
     f26:	43 2d       	mov	r20, r3
     f28:	c8 01       	movw	r24, r16
     f2a:	0e 94 a2 03 	call	0x744	; 0x744 <_ZN7Display9drawPixelEhhh>
     f2e:	2a 81       	ldd	r18, Y+2	; 0x02
     f30:	3b 81       	ldd	r19, Y+3	; 0x03
     f32:	2f 5f       	subi	r18, 0xFF	; 255
     f34:	3f 4f       	sbci	r19, 0xFF	; 255
     f36:	3b 83       	std	Y+3, r19	; 0x03
     f38:	2a 83       	std	Y+2, r18	; 0x02
		drawPixel(x,y,0);
	}

	r=10;
	//Berechnen des Stundenzeigers
	for(uint8_t i=0;i<r;i++){
     f3a:	2a 30       	cpi	r18, 0x0A	; 10
     f3c:	31 05       	cpc	r19, r1
     f3e:	61 f6       	brne	.-104    	; 0xed8 <_ZN7Display6analogEhhh+0x208>

		drawPixel(x,y,0);
	}

	//Anzeige der Zahlen
	draw_ASCI('1',32-charsize,0);
     f40:	20 e0       	ldi	r18, 0x00	; 0
     f42:	4a e1       	ldi	r20, 0x1A	; 26
     f44:	61 e3       	ldi	r22, 0x31	; 49
     f46:	c8 01       	movw	r24, r16
     f48:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
	draw_ASCI('2',32,0);
     f4c:	20 e0       	ldi	r18, 0x00	; 0
     f4e:	40 e2       	ldi	r20, 0x20	; 32
     f50:	62 e3       	ldi	r22, 0x32	; 50
     f52:	c8 01       	movw	r24, r16
     f54:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
	draw_ASCI('3',64-charsize,4*charhighte-charhighte/2);
     f58:	2c e1       	ldi	r18, 0x1C	; 28
     f5a:	4a e3       	ldi	r20, 0x3A	; 58
     f5c:	63 e3       	ldi	r22, 0x33	; 51
     f5e:	c8 01       	movw	r24, r16
     f60:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
	draw_ASCI('6',32-charsize/2,7*charhighte);
     f64:	28 e3       	ldi	r18, 0x38	; 56
     f66:	4d e1       	ldi	r20, 0x1D	; 29
     f68:	66 e3       	ldi	r22, 0x36	; 54
     f6a:	c8 01       	movw	r24, r16
     f6c:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
	draw_ASCI('9',0,4*charhighte-charhighte/2);
     f70:	2c e1       	ldi	r18, 0x1C	; 28
     f72:	40 e0       	ldi	r20, 0x00	; 0
     f74:	69 e3       	ldi	r22, 0x39	; 57
     f76:	c8 01       	movw	r24, r16
     f78:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>

	//anzeige des Rings fuer die Restlichen Stunden Zahlen
	//1
	drawPixel(26*cos((30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
     f7c:	20 e0       	ldi	r18, 0x00	; 0
     f7e:	48 e0       	ldi	r20, 0x08	; 8
     f80:	6c e2       	ldi	r22, 0x2C	; 44
     f82:	c8 01       	movw	r24, r16
     f84:	0e 94 a2 03 	call	0x744	; 0x744 <_ZN7Display9drawPixelEhhh>
	//2
	drawPixel(26*cos((2*30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((2*30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
     f88:	20 e0       	ldi	r18, 0x00	; 0
     f8a:	42 e1       	ldi	r20, 0x12	; 18
     f8c:	65 e3       	ldi	r22, 0x35	; 53
     f8e:	c8 01       	movw	r24, r16
     f90:	0e 94 a2 03 	call	0x744	; 0x744 <_ZN7Display9drawPixelEhhh>
	//4
	drawPixel(26*cos((4*30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((4*30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
     f94:	20 e0       	ldi	r18, 0x00	; 0
     f96:	4c e2       	ldi	r20, 0x2C	; 44
     f98:	65 e3       	ldi	r22, 0x35	; 53
     f9a:	c8 01       	movw	r24, r16
     f9c:	0e 94 a2 03 	call	0x744	; 0x744 <_ZN7Display9drawPixelEhhh>
	//5
	drawPixel(26*cos((5*30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((5*30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
     fa0:	20 e0       	ldi	r18, 0x00	; 0
     fa2:	45 e3       	ldi	r20, 0x35	; 53
     fa4:	6b e2       	ldi	r22, 0x2B	; 43
     fa6:	c8 01       	movw	r24, r16
     fa8:	0e 94 a2 03 	call	0x744	; 0x744 <_ZN7Display9drawPixelEhhh>
	//7
	drawPixel(26*cos((7*30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((7*30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
     fac:	20 e0       	ldi	r18, 0x00	; 0
     fae:	45 e3       	ldi	r20, 0x35	; 53
     fb0:	61 e1       	ldi	r22, 0x11	; 17
     fb2:	c8 01       	movw	r24, r16
     fb4:	0e 94 a2 03 	call	0x744	; 0x744 <_ZN7Display9drawPixelEhhh>
	//8
	drawPixel(26*cos((8*30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((8*30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
     fb8:	20 e0       	ldi	r18, 0x00	; 0
     fba:	4c e2       	ldi	r20, 0x2C	; 44
     fbc:	68 e0       	ldi	r22, 0x08	; 8
     fbe:	c8 01       	movw	r24, r16
     fc0:	0e 94 a2 03 	call	0x744	; 0x744 <_ZN7Display9drawPixelEhhh>
	//10
	drawPixel(26*cos((10*30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((10*30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
     fc4:	20 e0       	ldi	r18, 0x00	; 0
     fc6:	41 e1       	ldi	r20, 0x11	; 17
     fc8:	68 e0       	ldi	r22, 0x08	; 8
     fca:	c8 01       	movw	r24, r16
     fcc:	0e 94 a2 03 	call	0x744	; 0x744 <_ZN7Display9drawPixelEhhh>
	//11
	drawPixel(26*cos((11*30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((11*30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
     fd0:	20 e0       	ldi	r18, 0x00	; 0
     fd2:	48 e0       	ldi	r20, 0x08	; 8
     fd4:	62 e1       	ldi	r22, 0x12	; 18
     fd6:	c8 01       	movw	r24, r16
     fd8:	0e 94 a2 03 	call	0x744	; 0x744 <_ZN7Display9drawPixelEhhh>
}
     fdc:	0f 90       	pop	r0
     fde:	0f 90       	pop	r0
     fe0:	0f 90       	pop	r0
     fe2:	df 91       	pop	r29
     fe4:	cf 91       	pop	r28
     fe6:	1f 91       	pop	r17
     fe8:	0f 91       	pop	r16
     fea:	ff 90       	pop	r15
     fec:	ef 90       	pop	r14
     fee:	df 90       	pop	r13
     ff0:	cf 90       	pop	r12
     ff2:	bf 90       	pop	r11
     ff4:	af 90       	pop	r10
     ff6:	9f 90       	pop	r9
     ff8:	8f 90       	pop	r8
     ffa:	7f 90       	pop	r7
     ffc:	6f 90       	pop	r6
     ffe:	5f 90       	pop	r5
    1000:	4f 90       	pop	r4
    1002:	3f 90       	pop	r3
    1004:	2f 90       	pop	r2
    1006:	08 95       	ret

00001008 <_Z8ADC_Readh>:
#ifndef ADC_H_
#define ADC_H_

uint16_t ADC_Read( uint8_t channel )
{
	ADMUX = (ADMUX & ~(0x1F)) | (channel & 0x1F);
    1008:	ec e7       	ldi	r30, 0x7C	; 124
    100a:	f0 e0       	ldi	r31, 0x00	; 0
    100c:	90 81       	ld	r25, Z
    100e:	8f 71       	andi	r24, 0x1F	; 31
    1010:	90 7e       	andi	r25, 0xE0	; 224
    1012:	98 2b       	or	r25, r24
    1014:	90 83       	st	Z, r25
	ADCSRA |= (1<<ADSC);
    1016:	ea e7       	ldi	r30, 0x7A	; 122
    1018:	f0 e0       	ldi	r31, 0x00	; 0
    101a:	80 81       	ld	r24, Z
    101c:	80 64       	ori	r24, 0x40	; 64
    101e:	80 83       	st	Z, r24
	while (ADCSRA & (1<<ADSC) ) {
    1020:	80 81       	ld	r24, Z
    1022:	86 fd       	sbrc	r24, 6
    1024:	fd cf       	rjmp	.-6      	; 0x1020 <_Z8ADC_Readh+0x18>
	}
	return ADCW;
    1026:	80 91 78 00 	lds	r24, 0x0078
    102a:	90 91 79 00 	lds	r25, 0x0079
}
    102e:	08 95       	ret

00001030 <_Z14Batteriestatusv>:
	return (uint16_t)( sum / nsamples );
}

double batterie;
int8_t Batteriestatus(){
	uint16_t ADCwert=ADC_Read(0);
    1030:	80 e0       	ldi	r24, 0x00	; 0
    1032:	0e 94 04 08 	call	0x1008	; 0x1008 <_Z8ADC_Readh>
	batterie = (ADCwert/1023.0)*3.24*SPANNUNGSTEILER;
    1036:	bc 01       	movw	r22, r24
    1038:	80 e0       	ldi	r24, 0x00	; 0
    103a:	90 e0       	ldi	r25, 0x00	; 0
    103c:	0e 94 4b 1c 	call	0x3896	; 0x3896 <__floatunsisf>
    1040:	20 e0       	ldi	r18, 0x00	; 0
    1042:	30 ec       	ldi	r19, 0xC0	; 192
    1044:	4f e7       	ldi	r20, 0x7F	; 127
    1046:	54 e4       	ldi	r21, 0x44	; 68
    1048:	0e 94 b2 1b 	call	0x3764	; 0x3764 <__divsf3>
    104c:	29 e2       	ldi	r18, 0x29	; 41
    104e:	3c e5       	ldi	r19, 0x5C	; 92
    1050:	4f e4       	ldi	r20, 0x4F	; 79
    1052:	50 e4       	ldi	r21, 0x40	; 64
    1054:	0e 94 66 1d 	call	0x3acc	; 0x3acc <__mulsf3>
    1058:	2b e7       	ldi	r18, 0x7B	; 123
    105a:	34 e1       	ldi	r19, 0x14	; 20
    105c:	4e ef       	ldi	r20, 0xFE	; 254
    105e:	5f e3       	ldi	r21, 0x3F	; 63
    1060:	0e 94 66 1d 	call	0x3acc	; 0x3acc <__mulsf3>
    1064:	60 93 a1 02 	sts	0x02A1, r22
    1068:	70 93 a2 02 	sts	0x02A2, r23
    106c:	80 93 a3 02 	sts	0x02A3, r24
    1070:	90 93 a4 02 	sts	0x02A4, r25
	return ((batterie-3.0)/(4.2-3.0)*100);
    1074:	20 e0       	ldi	r18, 0x00	; 0
    1076:	30 e0       	ldi	r19, 0x00	; 0
    1078:	40 e4       	ldi	r20, 0x40	; 64
    107a:	50 e4       	ldi	r21, 0x40	; 64
    107c:	0e 94 e4 1a 	call	0x35c8	; 0x35c8 <__subsf3>
    1080:	28 e9       	ldi	r18, 0x98	; 152
    1082:	39 e9       	ldi	r19, 0x99	; 153
    1084:	49 e9       	ldi	r20, 0x99	; 153
    1086:	5f e3       	ldi	r21, 0x3F	; 63
    1088:	0e 94 b2 1b 	call	0x3764	; 0x3764 <__divsf3>
    108c:	20 e0       	ldi	r18, 0x00	; 0
    108e:	30 e0       	ldi	r19, 0x00	; 0
    1090:	48 ec       	ldi	r20, 0xC8	; 200
    1092:	52 e4       	ldi	r21, 0x42	; 66
    1094:	0e 94 66 1d 	call	0x3acc	; 0x3acc <__mulsf3>
    1098:	0e 94 1a 1c 	call	0x3834	; 0x3834 <__fixsfsi>
    109c:	86 2f       	mov	r24, r22
}
    109e:	08 95       	ret

000010a0 <_Z14willkommenpagev>:
#ifndef SEITEN_H_
#define SEITEN_H_

//Diese Funktionen schreiben nur in den Framebuffer und das Schreiben passiert in der Main ueber einen Interupt

void willkommenpage(){
    10a0:	cf 92       	push	r12
    10a2:	df 92       	push	r13
    10a4:	ef 92       	push	r14
    10a6:	ff 92       	push	r15
    10a8:	0f 93       	push	r16
    10aa:	1f 93       	push	r17
    10ac:	cf 93       	push	r28
    10ae:	df 93       	push	r29
    10b0:	cd b7       	in	r28, 0x3d	; 61
    10b2:	de b7       	in	r29, 0x3e	; 62
    10b4:	64 97       	sbiw	r28, 0x14	; 20
    10b6:	0f b6       	in	r0, 0x3f	; 63
    10b8:	f8 94       	cli
    10ba:	de bf       	out	0x3e, r29	; 62
    10bc:	0f be       	out	0x3f, r0	; 63
    10be:	cd bf       	out	0x3d, r28	; 61
	char buffer[20];
	uint8_t buffersize;
	oled.clearFrame();
    10c0:	86 ea       	ldi	r24, 0xA6	; 166
    10c2:	92 e0       	ldi	r25, 0x02	; 2
    10c4:	0e 94 b9 02 	call	0x572	; 0x572 <_ZN7Display10clearFrameEv>
	buffersize=sprintf(buffer,"Fahradcomputer");
    10c8:	8f e0       	ldi	r24, 0x0F	; 15
    10ca:	e0 e0       	ldi	r30, 0x00	; 0
    10cc:	f1 e0       	ldi	r31, 0x01	; 1
    10ce:	8e 01       	movw	r16, r28
    10d0:	0f 5f       	subi	r16, 0xFF	; 255
    10d2:	1f 4f       	sbci	r17, 0xFF	; 255
    10d4:	d8 01       	movw	r26, r16
    10d6:	01 90       	ld	r0, Z+
    10d8:	0d 92       	st	X+, r0
    10da:	8a 95       	dec	r24
    10dc:	e1 f7       	brne	.-8      	; 0x10d6 <_Z14willkommenpagev+0x36>
    10de:	c0 2e       	mov	r12, r16
    10e0:	d1 2e       	mov	r13, r17
    10e2:	78 01       	movw	r14, r16
    10e4:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0; i < buffersize;i++){
		oled.draw_ASCI(buffer[i],i*charsize,0);
    10e6:	f7 01       	movw	r30, r14
    10e8:	61 91       	ld	r22, Z+
    10ea:	7f 01       	movw	r14, r30
    10ec:	20 e0       	ldi	r18, 0x00	; 0
    10ee:	41 2f       	mov	r20, r17
    10f0:	86 ea       	ldi	r24, 0xA6	; 166
    10f2:	92 e0       	ldi	r25, 0x02	; 2
    10f4:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    10f8:	1a 5f       	subi	r17, 0xFA	; 250
void willkommenpage(){
	char buffer[20];
	uint8_t buffersize;
	oled.clearFrame();
	buffersize=sprintf(buffer,"Fahradcomputer");
	for(uint8_t i=0; i < buffersize;i++){
    10fa:	14 35       	cpi	r17, 0x54	; 84
    10fc:	a1 f7       	brne	.-24     	; 0x10e6 <_Z14willkommenpagev+0x46>
		oled.draw_ASCI(buffer[i],i*charsize,0);
	}
	buffersize=sprintf(buffer,"--------------");
    10fe:	8f e0       	ldi	r24, 0x0F	; 15
    1100:	ef e0       	ldi	r30, 0x0F	; 15
    1102:	f1 e0       	ldi	r31, 0x01	; 1
    1104:	de 01       	movw	r26, r28
    1106:	11 96       	adiw	r26, 0x01	; 1
    1108:	01 90       	ld	r0, Z+
    110a:	0d 92       	st	X+, r0
    110c:	8a 95       	dec	r24
    110e:	e1 f7       	brne	.-8      	; 0x1108 <_Z14willkommenpagev+0x68>
    1110:	ec 2c       	mov	r14, r12
    1112:	fd 2c       	mov	r15, r13
    1114:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0; i < buffersize;i++){
		oled.draw_ASCI(buffer[i],i*charsize,8);
    1116:	f7 01       	movw	r30, r14
    1118:	61 91       	ld	r22, Z+
    111a:	7f 01       	movw	r14, r30
    111c:	28 e0       	ldi	r18, 0x08	; 8
    111e:	41 2f       	mov	r20, r17
    1120:	86 ea       	ldi	r24, 0xA6	; 166
    1122:	92 e0       	ldi	r25, 0x02	; 2
    1124:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    1128:	1a 5f       	subi	r17, 0xFA	; 250
	buffersize=sprintf(buffer,"Fahradcomputer");
	for(uint8_t i=0; i < buffersize;i++){
		oled.draw_ASCI(buffer[i],i*charsize,0);
	}
	buffersize=sprintf(buffer,"--------------");
	for(uint8_t i=0; i < buffersize;i++){
    112a:	14 35       	cpi	r17, 0x54	; 84
    112c:	a1 f7       	brne	.-24     	; 0x1116 <_Z14willkommenpagev+0x76>
		oled.draw_ASCI(buffer[i],i*charsize,8);
	}
	buffersize=sprintf(buffer,"Version: %.2f",VERSIONSNUMMER);
    112e:	8f e3       	ldi	r24, 0x3F	; 63
    1130:	8f 93       	push	r24
    1132:	89 e9       	ldi	r24, 0x99	; 153
    1134:	8f 93       	push	r24
    1136:	8f 93       	push	r24
    1138:	8a e9       	ldi	r24, 0x9A	; 154
    113a:	8f 93       	push	r24
    113c:	8e e1       	ldi	r24, 0x1E	; 30
    113e:	91 e0       	ldi	r25, 0x01	; 1
    1140:	9f 93       	push	r25
    1142:	8f 93       	push	r24
    1144:	ce 01       	movw	r24, r28
    1146:	01 96       	adiw	r24, 0x01	; 1
    1148:	9f 93       	push	r25
    114a:	8f 93       	push	r24
    114c:	0e 94 e9 22 	call	0x45d2	; 0x45d2 <sprintf>
	for(uint8_t i=0; i < buffersize;i++){
    1150:	0f b6       	in	r0, 0x3f	; 63
    1152:	f8 94       	cli
    1154:	de bf       	out	0x3e, r29	; 62
    1156:	0f be       	out	0x3f, r0	; 63
    1158:	cd bf       	out	0x3d, r28	; 61
    115a:	88 23       	and	r24, r24
    115c:	d1 f0       	breq	.+52     	; 0x1192 <_Z14willkommenpagev+0xf2>
    115e:	81 50       	subi	r24, 0x01	; 1
    1160:	68 94       	set
    1162:	ee 24       	eor	r14, r14
    1164:	e1 f8       	bld	r14, 1
    1166:	f1 2c       	mov	r15, r1
    1168:	ec 0e       	add	r14, r28
    116a:	fd 1e       	adc	r15, r29
    116c:	e8 0e       	add	r14, r24
    116e:	f1 1c       	adc	r15, r1
    1170:	0c 2d       	mov	r16, r12
    1172:	1d 2d       	mov	r17, r13
    1174:	d1 2c       	mov	r13, r1
		oled.draw_ASCI(buffer[i],i*charsize,32);
    1176:	f8 01       	movw	r30, r16
    1178:	61 91       	ld	r22, Z+
    117a:	8f 01       	movw	r16, r30
    117c:	20 e2       	ldi	r18, 0x20	; 32
    117e:	4d 2d       	mov	r20, r13
    1180:	86 ea       	ldi	r24, 0xA6	; 166
    1182:	92 e0       	ldi	r25, 0x02	; 2
    1184:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    1188:	f6 e0       	ldi	r31, 0x06	; 6
    118a:	df 0e       	add	r13, r31
	buffersize=sprintf(buffer,"--------------");
	for(uint8_t i=0; i < buffersize;i++){
		oled.draw_ASCI(buffer[i],i*charsize,8);
	}
	buffersize=sprintf(buffer,"Version: %.2f",VERSIONSNUMMER);
	for(uint8_t i=0; i < buffersize;i++){
    118c:	0e 15       	cp	r16, r14
    118e:	1f 05       	cpc	r17, r15
    1190:	91 f7       	brne	.-28     	; 0x1176 <_Z14willkommenpagev+0xd6>
		oled.draw_ASCI(buffer[i],i*charsize,32);

	}
	oled.sendFrame();
    1192:	86 ea       	ldi	r24, 0xA6	; 166
    1194:	92 e0       	ldi	r25, 0x02	; 2
    1196:	0e 94 5f 03 	call	0x6be	; 0x6be <_ZN7Display9sendFrameEv>
	oled.clearFrame();
    119a:	86 ea       	ldi	r24, 0xA6	; 166
    119c:	92 e0       	ldi	r25, 0x02	; 2
    119e:	0e 94 b9 02 	call	0x572	; 0x572 <_ZN7Display10clearFrameEv>
    11a2:	84 e1       	ldi	r24, 0x14	; 20
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    11a4:	ef ef       	ldi	r30, 0xFF	; 255
    11a6:	f3 eb       	ldi	r31, 0xB3	; 179
    11a8:	31 97       	sbiw	r30, 0x01	; 1
    11aa:	f1 f7       	brne	.-4      	; 0x11a8 <_Z14willkommenpagev+0x108>
    11ac:	00 c0       	rjmp	.+0      	; 0x11ae <_Z14willkommenpagev+0x10e>
    11ae:	00 00       	nop
    11b0:	ef ef       	ldi	r30, 0xFF	; 255
    11b2:	f3 eb       	ldi	r31, 0xB3	; 179
    11b4:	31 97       	sbiw	r30, 0x01	; 1
    11b6:	f1 f7       	brne	.-4      	; 0x11b4 <_Z14willkommenpagev+0x114>
    11b8:	00 c0       	rjmp	.+0      	; 0x11ba <_Z14willkommenpagev+0x11a>
    11ba:	00 00       	nop
    11bc:	81 50       	subi	r24, 0x01	; 1
	for (uint8_t i=0;i<20;i++)
    11be:	91 f7       	brne	.-28     	; 0x11a4 <_Z14willkommenpagev+0x104>
	{
		_delay_ms(50);
		_delay_ms(50);
	}
}
    11c0:	64 96       	adiw	r28, 0x14	; 20
    11c2:	0f b6       	in	r0, 0x3f	; 63
    11c4:	f8 94       	cli
    11c6:	de bf       	out	0x3e, r29	; 62
    11c8:	0f be       	out	0x3f, r0	; 63
    11ca:	cd bf       	out	0x3d, r28	; 61
    11cc:	df 91       	pop	r29
    11ce:	cf 91       	pop	r28
    11d0:	1f 91       	pop	r17
    11d2:	0f 91       	pop	r16
    11d4:	ff 90       	pop	r15
    11d6:	ef 90       	pop	r14
    11d8:	df 90       	pop	r13
    11da:	cf 90       	pop	r12
    11dc:	08 95       	ret

000011de <_Z6headerh>:

void header(uint8_t page){
    11de:	ef 92       	push	r14
    11e0:	ff 92       	push	r15
    11e2:	0f 93       	push	r16
    11e4:	1f 93       	push	r17
    11e6:	cf 93       	push	r28
    11e8:	df 93       	push	r29
    11ea:	cd b7       	in	r28, 0x3d	; 61
    11ec:	de b7       	in	r29, 0x3e	; 62
    11ee:	64 97       	sbiw	r28, 0x14	; 20
    11f0:	0f b6       	in	r0, 0x3f	; 63
    11f2:	f8 94       	cli
    11f4:	de bf       	out	0x3e, r29	; 62
    11f6:	0f be       	out	0x3f, r0	; 63
    11f8:	cd bf       	out	0x3d, r28	; 61
	char buffer[20];
	uint8_t buffersize=0;;
	switch (page) {
    11fa:	81 11       	cpse	r24, r1
    11fc:	4d c0       	rjmp	.+154    	; 0x1298 <_Z6headerh+0xba>
    11fe:	0f 2e       	mov	r0, r31
    1200:	f7 ec       	ldi	r31, 0xC7	; 199
    1202:	ef 2e       	mov	r14, r31
    1204:	f6 e0       	ldi	r31, 0x06	; 6
    1206:	ff 2e       	mov	r15, r31
    1208:	f0 2d       	mov	r31, r0
    120a:	10 e0       	ldi	r17, 0x00	; 0
		case 0:	//standard Header fuer fast alle Pages
			for(uint8_t i=0;i<8;i++){
				oled.draw_ASCI(rtc.msg_uhr[i],i*charsize,0);
    120c:	f7 01       	movw	r30, r14
    120e:	61 91       	ld	r22, Z+
    1210:	7f 01       	movw	r14, r30
    1212:	20 e0       	ldi	r18, 0x00	; 0
    1214:	41 2f       	mov	r20, r17
    1216:	86 ea       	ldi	r24, 0xA6	; 166
    1218:	92 e0       	ldi	r25, 0x02	; 2
    121a:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    121e:	1a 5f       	subi	r17, 0xFA	; 250
void header(uint8_t page){
	char buffer[20];
	uint8_t buffersize=0;;
	switch (page) {
		case 0:	//standard Header fuer fast alle Pages
			for(uint8_t i=0;i<8;i++){
    1220:	10 33       	cpi	r17, 0x30	; 48
    1222:	a1 f7       	brne	.-24     	; 0x120c <_Z6headerh+0x2e>
				oled.draw_ASCI(rtc.msg_uhr[i],i*charsize,0);
			}
			buffersize=sprintf(buffer,"Bat: %i%%",Batteriestatus());
    1224:	0e 94 18 08 	call	0x1030	; 0x1030 <_Z14Batteriestatusv>
    1228:	28 2f       	mov	r18, r24
    122a:	33 27       	eor	r19, r19
    122c:	27 fd       	sbrc	r18, 7
    122e:	30 95       	com	r19
    1230:	3f 93       	push	r19
    1232:	8f 93       	push	r24
    1234:	8c e2       	ldi	r24, 0x2C	; 44
    1236:	91 e0       	ldi	r25, 0x01	; 1
    1238:	9f 93       	push	r25
    123a:	8f 93       	push	r24
    123c:	ce 01       	movw	r24, r28
    123e:	01 96       	adiw	r24, 0x01	; 1
    1240:	9f 93       	push	r25
    1242:	8f 93       	push	r24
    1244:	0e 94 e9 22 	call	0x45d2	; 0x45d2 <sprintf>
			for(uint8_t i=((SSD1306_WIDTH/charsize)-buffersize);i<(SSD1306_WIDTH/charsize);i++){
    1248:	25 e1       	ldi	r18, 0x15	; 21
    124a:	f2 2e       	mov	r15, r18
    124c:	f8 1a       	sub	r15, r24
    124e:	0f 90       	pop	r0
    1250:	0f 90       	pop	r0
    1252:	0f 90       	pop	r0
    1254:	0f 90       	pop	r0
    1256:	0f 90       	pop	r0
    1258:	0f 90       	pop	r0
    125a:	f4 e1       	ldi	r31, 0x14	; 20
    125c:	ff 15       	cp	r31, r15
    125e:	e0 f0       	brcs	.+56     	; 0x1298 <_Z6headerh+0xba>
    1260:	ef 2c       	mov	r14, r15
    1262:	ee 0c       	add	r14, r14
    1264:	ef 0c       	add	r14, r15
    1266:	ee 0c       	add	r14, r14
				oled.draw_ASCI(buffer[i-((SSD1306_WIDTH/charsize)-buffersize)],i*charsize,0);
    1268:	8c 01       	movw	r16, r24
    126a:	11 27       	eor	r17, r17
    126c:	e1 e0       	ldi	r30, 0x01	; 1
    126e:	f0 e0       	ldi	r31, 0x00	; 0
    1270:	ec 0f       	add	r30, r28
    1272:	fd 1f       	adc	r31, r29
    1274:	ef 0d       	add	r30, r15
    1276:	f1 1d       	adc	r31, r1
    1278:	e0 0f       	add	r30, r16
    127a:	f1 1f       	adc	r31, r17
    127c:	75 97       	sbiw	r30, 0x15	; 21
    127e:	20 e0       	ldi	r18, 0x00	; 0
    1280:	4e 2d       	mov	r20, r14
    1282:	60 81       	ld	r22, Z
    1284:	86 ea       	ldi	r24, 0xA6	; 166
    1286:	92 e0       	ldi	r25, 0x02	; 2
    1288:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
		case 0:	//standard Header fuer fast alle Pages
			for(uint8_t i=0;i<8;i++){
				oled.draw_ASCI(rtc.msg_uhr[i],i*charsize,0);
			}
			buffersize=sprintf(buffer,"Bat: %i%%",Batteriestatus());
			for(uint8_t i=((SSD1306_WIDTH/charsize)-buffersize);i<(SSD1306_WIDTH/charsize);i++){
    128c:	f3 94       	inc	r15
    128e:	26 e0       	ldi	r18, 0x06	; 6
    1290:	e2 0e       	add	r14, r18
    1292:	85 e1       	ldi	r24, 0x15	; 21
    1294:	f8 12       	cpse	r15, r24
    1296:	ea cf       	rjmp	.-44     	; 0x126c <_Z6headerh+0x8e>
			}
			break;
		default:
			break;
	}
}
    1298:	64 96       	adiw	r28, 0x14	; 20
    129a:	0f b6       	in	r0, 0x3f	; 63
    129c:	f8 94       	cli
    129e:	de bf       	out	0x3e, r29	; 62
    12a0:	0f be       	out	0x3f, r0	; 63
    12a2:	cd bf       	out	0x3d, r28	; 61
    12a4:	df 91       	pop	r29
    12a6:	cf 91       	pop	r28
    12a8:	1f 91       	pop	r17
    12aa:	0f 91       	pop	r16
    12ac:	ff 90       	pop	r15
    12ae:	ef 90       	pop	r14
    12b0:	08 95       	ret

000012b2 <_Z16anzeige_richtungf>:

void anzeige_richtung(float winkel){
    12b2:	cf 92       	push	r12
    12b4:	df 92       	push	r13
    12b6:	ef 92       	push	r14
    12b8:	ff 92       	push	r15
    12ba:	6b 01       	movw	r12, r22
    12bc:	7c 01       	movw	r14, r24
	//finden der Ziffer fuer die Anzeige
	if ((winkel<45/2) || (winkel == 360-45/2))
    12be:	20 e0       	ldi	r18, 0x00	; 0
    12c0:	30 e0       	ldi	r19, 0x00	; 0
    12c2:	40 eb       	ldi	r20, 0xB0	; 176
    12c4:	51 e4       	ldi	r21, 0x41	; 65
    12c6:	0e 94 ab 1b 	call	0x3756	; 0x3756 <__cmpsf2>
    12ca:	88 23       	and	r24, r24
    12cc:	54 f0       	brlt	.+20     	; 0x12e2 <_Z16anzeige_richtungf+0x30>
    12ce:	20 e0       	ldi	r18, 0x00	; 0
    12d0:	30 e0       	ldi	r19, 0x00	; 0
    12d2:	49 ea       	ldi	r20, 0xA9	; 169
    12d4:	53 e4       	ldi	r21, 0x43	; 67
    12d6:	c7 01       	movw	r24, r14
    12d8:	b6 01       	movw	r22, r12
    12da:	0e 94 ab 1b 	call	0x3756	; 0x3756 <__cmpsf2>
    12de:	81 11       	cpse	r24, r1
    12e0:	08 c0       	rjmp	.+16     	; 0x12f2 <_Z16anzeige_richtungf+0x40>
	{
		oled.draw_ASCI('N',80,3.5*charhighte);
    12e2:	2c e1       	ldi	r18, 0x1C	; 28
    12e4:	40 e5       	ldi	r20, 0x50	; 80
    12e6:	6e e4       	ldi	r22, 0x4E	; 78
    12e8:	86 ea       	ldi	r24, 0xA6	; 166
    12ea:	92 e0       	ldi	r25, 0x02	; 2
    12ec:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    12f0:	99 c0       	rjmp	.+306    	; 0x1424 <_Z16anzeige_richtungf+0x172>
	}
	else if (winkel<90-45/2)
    12f2:	20 e0       	ldi	r18, 0x00	; 0
    12f4:	30 e0       	ldi	r19, 0x00	; 0
    12f6:	48 e8       	ldi	r20, 0x88	; 136
    12f8:	52 e4       	ldi	r21, 0x42	; 66
    12fa:	c7 01       	movw	r24, r14
    12fc:	b6 01       	movw	r22, r12
    12fe:	0e 94 ab 1b 	call	0x3756	; 0x3756 <__cmpsf2>
    1302:	88 23       	and	r24, r24
    1304:	7c f4       	brge	.+30     	; 0x1324 <_Z16anzeige_richtungf+0x72>
	{
		oled.draw_ASCI('N',80-charsize/2,3.5*charhighte);
    1306:	2c e1       	ldi	r18, 0x1C	; 28
    1308:	4d e4       	ldi	r20, 0x4D	; 77
    130a:	6e e4       	ldi	r22, 0x4E	; 78
    130c:	86 ea       	ldi	r24, 0xA6	; 166
    130e:	92 e0       	ldi	r25, 0x02	; 2
    1310:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
		oled.draw_ASCI('O',80+charsize/2,3.5*charhighte);
    1314:	2c e1       	ldi	r18, 0x1C	; 28
    1316:	43 e5       	ldi	r20, 0x53	; 83
    1318:	6f e4       	ldi	r22, 0x4F	; 79
    131a:	86 ea       	ldi	r24, 0xA6	; 166
    131c:	92 e0       	ldi	r25, 0x02	; 2
    131e:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    1322:	80 c0       	rjmp	.+256    	; 0x1424 <_Z16anzeige_richtungf+0x172>
	}
	else if (winkel<135-45/2)
    1324:	20 e0       	ldi	r18, 0x00	; 0
    1326:	30 e0       	ldi	r19, 0x00	; 0
    1328:	42 ee       	ldi	r20, 0xE2	; 226
    132a:	52 e4       	ldi	r21, 0x42	; 66
    132c:	c7 01       	movw	r24, r14
    132e:	b6 01       	movw	r22, r12
    1330:	0e 94 ab 1b 	call	0x3756	; 0x3756 <__cmpsf2>
    1334:	88 23       	and	r24, r24
    1336:	44 f4       	brge	.+16     	; 0x1348 <_Z16anzeige_richtungf+0x96>
	{
		oled.draw_ASCI('O',80,3.5*charhighte);
    1338:	2c e1       	ldi	r18, 0x1C	; 28
    133a:	40 e5       	ldi	r20, 0x50	; 80
    133c:	6f e4       	ldi	r22, 0x4F	; 79
    133e:	86 ea       	ldi	r24, 0xA6	; 166
    1340:	92 e0       	ldi	r25, 0x02	; 2
    1342:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    1346:	6e c0       	rjmp	.+220    	; 0x1424 <_Z16anzeige_richtungf+0x172>
	}
	else if (winkel<180-45/2)
    1348:	20 e0       	ldi	r18, 0x00	; 0
    134a:	30 e0       	ldi	r19, 0x00	; 0
    134c:	4e e1       	ldi	r20, 0x1E	; 30
    134e:	53 e4       	ldi	r21, 0x43	; 67
    1350:	c7 01       	movw	r24, r14
    1352:	b6 01       	movw	r22, r12
    1354:	0e 94 ab 1b 	call	0x3756	; 0x3756 <__cmpsf2>
    1358:	88 23       	and	r24, r24
    135a:	7c f4       	brge	.+30     	; 0x137a <_Z16anzeige_richtungf+0xc8>
	{
		oled.draw_ASCI('S',80-charsize/2,3.5*charhighte);
    135c:	2c e1       	ldi	r18, 0x1C	; 28
    135e:	4d e4       	ldi	r20, 0x4D	; 77
    1360:	63 e5       	ldi	r22, 0x53	; 83
    1362:	86 ea       	ldi	r24, 0xA6	; 166
    1364:	92 e0       	ldi	r25, 0x02	; 2
    1366:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
		oled.draw_ASCI('O',80+charsize/2,3.5*charhighte);
    136a:	2c e1       	ldi	r18, 0x1C	; 28
    136c:	43 e5       	ldi	r20, 0x53	; 83
    136e:	6f e4       	ldi	r22, 0x4F	; 79
    1370:	86 ea       	ldi	r24, 0xA6	; 166
    1372:	92 e0       	ldi	r25, 0x02	; 2
    1374:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    1378:	55 c0       	rjmp	.+170    	; 0x1424 <_Z16anzeige_richtungf+0x172>
	}
	else if (winkel<225-45/2)
    137a:	20 e0       	ldi	r18, 0x00	; 0
    137c:	30 e0       	ldi	r19, 0x00	; 0
    137e:	4b e4       	ldi	r20, 0x4B	; 75
    1380:	53 e4       	ldi	r21, 0x43	; 67
    1382:	c7 01       	movw	r24, r14
    1384:	b6 01       	movw	r22, r12
    1386:	0e 94 ab 1b 	call	0x3756	; 0x3756 <__cmpsf2>
    138a:	88 23       	and	r24, r24
    138c:	44 f4       	brge	.+16     	; 0x139e <_Z16anzeige_richtungf+0xec>
	{
		oled.draw_ASCI('S',80,3.5*charhighte);
    138e:	2c e1       	ldi	r18, 0x1C	; 28
    1390:	40 e5       	ldi	r20, 0x50	; 80
    1392:	63 e5       	ldi	r22, 0x53	; 83
    1394:	86 ea       	ldi	r24, 0xA6	; 166
    1396:	92 e0       	ldi	r25, 0x02	; 2
    1398:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    139c:	43 c0       	rjmp	.+134    	; 0x1424 <_Z16anzeige_richtungf+0x172>
	}
	else if (winkel<270-45/2)
    139e:	20 e0       	ldi	r18, 0x00	; 0
    13a0:	30 e0       	ldi	r19, 0x00	; 0
    13a2:	48 e7       	ldi	r20, 0x78	; 120
    13a4:	53 e4       	ldi	r21, 0x43	; 67
    13a6:	c7 01       	movw	r24, r14
    13a8:	b6 01       	movw	r22, r12
    13aa:	0e 94 ab 1b 	call	0x3756	; 0x3756 <__cmpsf2>
    13ae:	88 23       	and	r24, r24
    13b0:	7c f4       	brge	.+30     	; 0x13d0 <_Z16anzeige_richtungf+0x11e>
	{
		oled.draw_ASCI('S',80-charsize/2,3.5*charhighte);
    13b2:	2c e1       	ldi	r18, 0x1C	; 28
    13b4:	4d e4       	ldi	r20, 0x4D	; 77
    13b6:	63 e5       	ldi	r22, 0x53	; 83
    13b8:	86 ea       	ldi	r24, 0xA6	; 166
    13ba:	92 e0       	ldi	r25, 0x02	; 2
    13bc:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
		oled.draw_ASCI('W',80+charsize/2,3.5*charhighte);
    13c0:	2c e1       	ldi	r18, 0x1C	; 28
    13c2:	43 e5       	ldi	r20, 0x53	; 83
    13c4:	67 e5       	ldi	r22, 0x57	; 87
    13c6:	86 ea       	ldi	r24, 0xA6	; 166
    13c8:	92 e0       	ldi	r25, 0x02	; 2
    13ca:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    13ce:	2a c0       	rjmp	.+84     	; 0x1424 <_Z16anzeige_richtungf+0x172>
	}
	else if (winkel<315-45/2)
    13d0:	20 e0       	ldi	r18, 0x00	; 0
    13d2:	30 e8       	ldi	r19, 0x80	; 128
    13d4:	42 e9       	ldi	r20, 0x92	; 146
    13d6:	53 e4       	ldi	r21, 0x43	; 67
    13d8:	c7 01       	movw	r24, r14
    13da:	b6 01       	movw	r22, r12
    13dc:	0e 94 ab 1b 	call	0x3756	; 0x3756 <__cmpsf2>
    13e0:	88 23       	and	r24, r24
    13e2:	44 f4       	brge	.+16     	; 0x13f4 <_Z16anzeige_richtungf+0x142>
	{
		oled.draw_ASCI('W',80,3.5*charhighte);
    13e4:	2c e1       	ldi	r18, 0x1C	; 28
    13e6:	40 e5       	ldi	r20, 0x50	; 80
    13e8:	67 e5       	ldi	r22, 0x57	; 87
    13ea:	86 ea       	ldi	r24, 0xA6	; 166
    13ec:	92 e0       	ldi	r25, 0x02	; 2
    13ee:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    13f2:	18 c0       	rjmp	.+48     	; 0x1424 <_Z16anzeige_richtungf+0x172>
	}
	else if (winkel<360-45/2)
    13f4:	20 e0       	ldi	r18, 0x00	; 0
    13f6:	30 e0       	ldi	r19, 0x00	; 0
    13f8:	49 ea       	ldi	r20, 0xA9	; 169
    13fa:	53 e4       	ldi	r21, 0x43	; 67
    13fc:	c7 01       	movw	r24, r14
    13fe:	b6 01       	movw	r22, r12
    1400:	0e 94 ab 1b 	call	0x3756	; 0x3756 <__cmpsf2>
    1404:	88 23       	and	r24, r24
    1406:	74 f4       	brge	.+28     	; 0x1424 <_Z16anzeige_richtungf+0x172>
	{
		oled.draw_ASCI('N',80-charsize/2,3.5*charhighte);
    1408:	2c e1       	ldi	r18, 0x1C	; 28
    140a:	4d e4       	ldi	r20, 0x4D	; 77
    140c:	6e e4       	ldi	r22, 0x4E	; 78
    140e:	86 ea       	ldi	r24, 0xA6	; 166
    1410:	92 e0       	ldi	r25, 0x02	; 2
    1412:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
		oled.draw_ASCI('W',80+charsize/2,3.5*charhighte);
    1416:	2c e1       	ldi	r18, 0x1C	; 28
    1418:	43 e5       	ldi	r20, 0x53	; 83
    141a:	67 e5       	ldi	r22, 0x57	; 87
    141c:	86 ea       	ldi	r24, 0xA6	; 166
    141e:	92 e0       	ldi	r25, 0x02	; 2
    1420:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
	}
}
    1424:	ff 90       	pop	r15
    1426:	ef 90       	pop	r14
    1428:	df 90       	pop	r13
    142a:	cf 90       	pop	r12
    142c:	08 95       	ret

0000142e <_Z13anzeige_nadelhhf>:

void anzeige_nadel(uint8_t x, uint8_t y, float angle){
    142e:	af 92       	push	r10
    1430:	bf 92       	push	r11
    1432:	cf 92       	push	r12
    1434:	df 92       	push	r13
    1436:	ef 92       	push	r14
    1438:	ff 92       	push	r15
    143a:	0f 93       	push	r16
    143c:	1f 93       	push	r17
	//fixed parameters for drawing the arrow
	oled.draw_triangle(x,y,20,70,angle);
    143e:	59 01       	movw	r10, r18
    1440:	6a 01       	movw	r12, r20
    1442:	e1 2c       	mov	r14, r1
    1444:	f1 2c       	mov	r15, r1
    1446:	0c e8       	ldi	r16, 0x8C	; 140
    1448:	12 e4       	ldi	r17, 0x42	; 66
    144a:	24 e1       	ldi	r18, 0x14	; 20
    144c:	46 2f       	mov	r20, r22
    144e:	68 2f       	mov	r22, r24
    1450:	86 ea       	ldi	r24, 0xA6	; 166
    1452:	92 e0       	ldi	r25, 0x02	; 2
    1454:	0e 94 7f 04 	call	0x8fe	; 0x8fe <_ZN7Display13draw_triangleEhhhff>
}
    1458:	1f 91       	pop	r17
    145a:	0f 91       	pop	r16
    145c:	ff 90       	pop	r15
    145e:	ef 90       	pop	r14
    1460:	df 90       	pop	r13
    1462:	cf 90       	pop	r12
    1464:	bf 90       	pop	r11
    1466:	af 90       	pop	r10
    1468:	08 95       	ret

0000146a <_Z19anzeige_kleinenadelhhf>:
void anzeige_kleinenadel(uint8_t x, uint8_t y, float angle){
    146a:	af 92       	push	r10
    146c:	bf 92       	push	r11
    146e:	cf 92       	push	r12
    1470:	df 92       	push	r13
    1472:	ef 92       	push	r14
    1474:	ff 92       	push	r15
    1476:	0f 93       	push	r16
    1478:	1f 93       	push	r17
	//fixed parameters for drawing the arrow
	oled.draw_triangle(x,y,10,70,angle);
    147a:	59 01       	movw	r10, r18
    147c:	6a 01       	movw	r12, r20
    147e:	e1 2c       	mov	r14, r1
    1480:	f1 2c       	mov	r15, r1
    1482:	0c e8       	ldi	r16, 0x8C	; 140
    1484:	12 e4       	ldi	r17, 0x42	; 66
    1486:	2a e0       	ldi	r18, 0x0A	; 10
    1488:	46 2f       	mov	r20, r22
    148a:	68 2f       	mov	r22, r24
    148c:	86 ea       	ldi	r24, 0xA6	; 166
    148e:	92 e0       	ldi	r25, 0x02	; 2
    1490:	0e 94 7f 04 	call	0x8fe	; 0x8fe <_ZN7Display13draw_triangleEhhhff>
}
    1494:	1f 91       	pop	r17
    1496:	0f 91       	pop	r16
    1498:	ff 90       	pop	r15
    149a:	ef 90       	pop	r14
    149c:	df 90       	pop	r13
    149e:	cf 90       	pop	r12
    14a0:	bf 90       	pop	r11
    14a2:	af 90       	pop	r10
    14a4:	08 95       	ret

000014a6 <_Z11menue_hauptv>:
	for(uint8_t i=((SSD1306_WIDTH/charsize)-8);i<(SSD1306_WIDTH/charsize);i++){
		draw_ASCI(msg_dat[i-((SSD1306_WIDTH/charsize)-8)],i*charsize,7*charhighte);
	}
}
*/
void menue_haupt(){
    14a6:	cf 92       	push	r12
    14a8:	df 92       	push	r13
    14aa:	ef 92       	push	r14
    14ac:	ff 92       	push	r15
    14ae:	0f 93       	push	r16
    14b0:	1f 93       	push	r17
    14b2:	cf 93       	push	r28
    14b4:	df 93       	push	r29
    14b6:	cd b7       	in	r28, 0x3d	; 61
    14b8:	de b7       	in	r29, 0x3e	; 62
    14ba:	64 97       	sbiw	r28, 0x14	; 20
    14bc:	0f b6       	in	r0, 0x3f	; 63
    14be:	f8 94       	cli
    14c0:	de bf       	out	0x3e, r29	; 62
    14c2:	0f be       	out	0x3f, r0	; 63
    14c4:	cd bf       	out	0x3d, r28	; 61
	char buffer[20];
	uint8_t buffersize=0;

	oled.clearFrame();
    14c6:	86 ea       	ldi	r24, 0xA6	; 166
    14c8:	92 e0       	ldi	r25, 0x02	; 2
    14ca:	0e 94 b9 02 	call	0x572	; 0x572 <_ZN7Display10clearFrameEv>
	buffersize=sprintf(buffer,"1:Fahradanzeige");
    14ce:	80 e1       	ldi	r24, 0x10	; 16
    14d0:	e6 e3       	ldi	r30, 0x36	; 54
    14d2:	f1 e0       	ldi	r31, 0x01	; 1
    14d4:	8e 01       	movw	r16, r28
    14d6:	0f 5f       	subi	r16, 0xFF	; 255
    14d8:	1f 4f       	sbci	r17, 0xFF	; 255
    14da:	d8 01       	movw	r26, r16
    14dc:	01 90       	ld	r0, Z+
    14de:	0d 92       	st	X+, r0
    14e0:	8a 95       	dec	r24
    14e2:	e1 f7       	brne	.-8      	; 0x14dc <_Z11menue_hauptv+0x36>
    14e4:	e0 2e       	mov	r14, r16
    14e6:	f1 2e       	mov	r15, r17
    14e8:	68 01       	movw	r12, r16
    14ea:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,0*charhighte);}
    14ec:	f6 01       	movw	r30, r12
    14ee:	61 91       	ld	r22, Z+
    14f0:	6f 01       	movw	r12, r30
    14f2:	20 e0       	ldi	r18, 0x00	; 0
    14f4:	41 2f       	mov	r20, r17
    14f6:	86 ea       	ldi	r24, 0xA6	; 166
    14f8:	92 e0       	ldi	r25, 0x02	; 2
    14fa:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    14fe:	1a 5f       	subi	r17, 0xFA	; 250
    1500:	1a 35       	cpi	r17, 0x5A	; 90
    1502:	a1 f7       	brne	.-24     	; 0x14ec <_Z11menue_hauptv+0x46>
	buffersize=sprintf(buffer,"2:Taschenrechner");
    1504:	81 e1       	ldi	r24, 0x11	; 17
    1506:	e6 e4       	ldi	r30, 0x46	; 70
    1508:	f1 e0       	ldi	r31, 0x01	; 1
    150a:	de 01       	movw	r26, r28
    150c:	11 96       	adiw	r26, 0x01	; 1
    150e:	01 90       	ld	r0, Z+
    1510:	0d 92       	st	X+, r0
    1512:	8a 95       	dec	r24
    1514:	e1 f7       	brne	.-8      	; 0x150e <_Z11menue_hauptv+0x68>
    1516:	ce 2c       	mov	r12, r14
    1518:	df 2c       	mov	r13, r15
    151a:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,1*charhighte);}
    151c:	f6 01       	movw	r30, r12
    151e:	61 91       	ld	r22, Z+
    1520:	6f 01       	movw	r12, r30
    1522:	28 e0       	ldi	r18, 0x08	; 8
    1524:	41 2f       	mov	r20, r17
    1526:	86 ea       	ldi	r24, 0xA6	; 166
    1528:	92 e0       	ldi	r25, 0x02	; 2
    152a:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    152e:	1a 5f       	subi	r17, 0xFA	; 250
    1530:	10 36       	cpi	r17, 0x60	; 96
    1532:	a1 f7       	brne	.-24     	; 0x151c <_Z11menue_hauptv+0x76>
	buffersize=sprintf(buffer,"3:Kompass");
    1534:	8a e0       	ldi	r24, 0x0A	; 10
    1536:	e7 e5       	ldi	r30, 0x57	; 87
    1538:	f1 e0       	ldi	r31, 0x01	; 1
    153a:	de 01       	movw	r26, r28
    153c:	11 96       	adiw	r26, 0x01	; 1
    153e:	01 90       	ld	r0, Z+
    1540:	0d 92       	st	X+, r0
    1542:	8a 95       	dec	r24
    1544:	e1 f7       	brne	.-8      	; 0x153e <_Z11menue_hauptv+0x98>
    1546:	ce 2c       	mov	r12, r14
    1548:	df 2c       	mov	r13, r15
    154a:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,2*charhighte);}
    154c:	f6 01       	movw	r30, r12
    154e:	61 91       	ld	r22, Z+
    1550:	6f 01       	movw	r12, r30
    1552:	20 e1       	ldi	r18, 0x10	; 16
    1554:	41 2f       	mov	r20, r17
    1556:	86 ea       	ldi	r24, 0xA6	; 166
    1558:	92 e0       	ldi	r25, 0x02	; 2
    155a:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    155e:	1a 5f       	subi	r17, 0xFA	; 250
    1560:	16 33       	cpi	r17, 0x36	; 54
    1562:	a1 f7       	brne	.-24     	; 0x154c <_Z11menue_hauptv+0xa6>
	buffersize=sprintf(buffer,"4:Uhrmenue");
    1564:	8b e0       	ldi	r24, 0x0B	; 11
    1566:	e1 e6       	ldi	r30, 0x61	; 97
    1568:	f1 e0       	ldi	r31, 0x01	; 1
    156a:	de 01       	movw	r26, r28
    156c:	11 96       	adiw	r26, 0x01	; 1
    156e:	01 90       	ld	r0, Z+
    1570:	0d 92       	st	X+, r0
    1572:	8a 95       	dec	r24
    1574:	e1 f7       	brne	.-8      	; 0x156e <_Z11menue_hauptv+0xc8>
    1576:	ce 2c       	mov	r12, r14
    1578:	df 2c       	mov	r13, r15
    157a:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,3*charhighte);}
    157c:	f6 01       	movw	r30, r12
    157e:	61 91       	ld	r22, Z+
    1580:	6f 01       	movw	r12, r30
    1582:	28 e1       	ldi	r18, 0x18	; 24
    1584:	41 2f       	mov	r20, r17
    1586:	86 ea       	ldi	r24, 0xA6	; 166
    1588:	92 e0       	ldi	r25, 0x02	; 2
    158a:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    158e:	1a 5f       	subi	r17, 0xFA	; 250
    1590:	1c 33       	cpi	r17, 0x3C	; 60
    1592:	a1 f7       	brne	.-24     	; 0x157c <_Z11menue_hauptv+0xd6>
	buffersize=sprintf(buffer,"5:Einstellungen");
    1594:	80 e1       	ldi	r24, 0x10	; 16
    1596:	ec e6       	ldi	r30, 0x6C	; 108
    1598:	f1 e0       	ldi	r31, 0x01	; 1
    159a:	de 01       	movw	r26, r28
    159c:	11 96       	adiw	r26, 0x01	; 1
    159e:	01 90       	ld	r0, Z+
    15a0:	0d 92       	st	X+, r0
    15a2:	8a 95       	dec	r24
    15a4:	e1 f7       	brne	.-8      	; 0x159e <_Z11menue_hauptv+0xf8>
    15a6:	ce 2c       	mov	r12, r14
    15a8:	df 2c       	mov	r13, r15
    15aa:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,4*charhighte);}
    15ac:	f6 01       	movw	r30, r12
    15ae:	61 91       	ld	r22, Z+
    15b0:	6f 01       	movw	r12, r30
    15b2:	20 e2       	ldi	r18, 0x20	; 32
    15b4:	41 2f       	mov	r20, r17
    15b6:	86 ea       	ldi	r24, 0xA6	; 166
    15b8:	92 e0       	ldi	r25, 0x02	; 2
    15ba:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    15be:	1a 5f       	subi	r17, 0xFA	; 250
    15c0:	1a 35       	cpi	r17, 0x5A	; 90
    15c2:	a1 f7       	brne	.-24     	; 0x15ac <_Z11menue_hauptv+0x106>
	buffersize=sprintf(buffer,"6:Display aus");
    15c4:	8e e0       	ldi	r24, 0x0E	; 14
    15c6:	ec e7       	ldi	r30, 0x7C	; 124
    15c8:	f1 e0       	ldi	r31, 0x01	; 1
    15ca:	de 01       	movw	r26, r28
    15cc:	11 96       	adiw	r26, 0x01	; 1
    15ce:	01 90       	ld	r0, Z+
    15d0:	0d 92       	st	X+, r0
    15d2:	8a 95       	dec	r24
    15d4:	e1 f7       	brne	.-8      	; 0x15ce <_Z11menue_hauptv+0x128>
    15d6:	ce 2c       	mov	r12, r14
    15d8:	df 2c       	mov	r13, r15
    15da:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,5*charhighte);}
    15dc:	f6 01       	movw	r30, r12
    15de:	61 91       	ld	r22, Z+
    15e0:	6f 01       	movw	r12, r30
    15e2:	28 e2       	ldi	r18, 0x28	; 40
    15e4:	41 2f       	mov	r20, r17
    15e6:	86 ea       	ldi	r24, 0xA6	; 166
    15e8:	92 e0       	ldi	r25, 0x02	; 2
    15ea:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    15ee:	1a 5f       	subi	r17, 0xFA	; 250
    15f0:	1e 34       	cpi	r17, 0x4E	; 78
    15f2:	a1 f7       	brne	.-24     	; 0x15dc <_Z11menue_hauptv+0x136>
	//buffersize=sprintf(buffer,"7:Uhr einstellen");
	//for(uint8_t i=0;i<buffersize;i++){draw_ASCI(oled.buffer[i],i*charsize,6*charhighte);}
}
    15f4:	64 96       	adiw	r28, 0x14	; 20
    15f6:	0f b6       	in	r0, 0x3f	; 63
    15f8:	f8 94       	cli
    15fa:	de bf       	out	0x3e, r29	; 62
    15fc:	0f be       	out	0x3f, r0	; 63
    15fe:	cd bf       	out	0x3d, r28	; 61
    1600:	df 91       	pop	r29
    1602:	cf 91       	pop	r28
    1604:	1f 91       	pop	r17
    1606:	0f 91       	pop	r16
    1608:	ff 90       	pop	r15
    160a:	ef 90       	pop	r14
    160c:	df 90       	pop	r13
    160e:	cf 90       	pop	r12
    1610:	08 95       	ret

00001612 <_Z11menue_einstv>:
void menue_einst(){
    1612:	af 92       	push	r10
    1614:	bf 92       	push	r11
    1616:	df 92       	push	r13
    1618:	ef 92       	push	r14
    161a:	0f 93       	push	r16
    161c:	1f 93       	push	r17
    161e:	cf 93       	push	r28
    1620:	df 93       	push	r29
    1622:	cd b7       	in	r28, 0x3d	; 61
    1624:	de b7       	in	r29, 0x3e	; 62
    1626:	64 97       	sbiw	r28, 0x14	; 20
    1628:	0f b6       	in	r0, 0x3f	; 63
    162a:	f8 94       	cli
    162c:	de bf       	out	0x3e, r29	; 62
    162e:	0f be       	out	0x3f, r0	; 63
    1630:	cd bf       	out	0x3d, r28	; 61
	char buffer[20];
	uint8_t buffersize=0;

	oled.clearFrame();
    1632:	86 ea       	ldi	r24, 0xA6	; 166
    1634:	92 e0       	ldi	r25, 0x02	; 2
    1636:	0e 94 b9 02 	call	0x572	; 0x572 <_ZN7Display10clearFrameEv>
	buffersize=sprintf(buffer,"1:Kompass kalib.");
    163a:	81 e1       	ldi	r24, 0x11	; 17
    163c:	ea e8       	ldi	r30, 0x8A	; 138
    163e:	f1 e0       	ldi	r31, 0x01	; 1
    1640:	8e 01       	movw	r16, r28
    1642:	0f 5f       	subi	r16, 0xFF	; 255
    1644:	1f 4f       	sbci	r17, 0xFF	; 255
    1646:	d8 01       	movw	r26, r16
    1648:	01 90       	ld	r0, Z+
    164a:	0d 92       	st	X+, r0
    164c:	8a 95       	dec	r24
    164e:	e1 f7       	brne	.-8      	; 0x1648 <_Z11menue_einstv+0x36>
    1650:	d0 2e       	mov	r13, r16
    1652:	e1 2e       	mov	r14, r17
    1654:	58 01       	movw	r10, r16
    1656:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,0*charhighte);}
    1658:	f5 01       	movw	r30, r10
    165a:	61 91       	ld	r22, Z+
    165c:	5f 01       	movw	r10, r30
    165e:	20 e0       	ldi	r18, 0x00	; 0
    1660:	41 2f       	mov	r20, r17
    1662:	86 ea       	ldi	r24, 0xA6	; 166
    1664:	92 e0       	ldi	r25, 0x02	; 2
    1666:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    166a:	1a 5f       	subi	r17, 0xFA	; 250
    166c:	10 36       	cpi	r17, 0x60	; 96
    166e:	a1 f7       	brne	.-24     	; 0x1658 <_Z11menue_einstv+0x46>
	buffersize=sprintf(buffer,"2:Kompassverstaerkung");
    1670:	86 e1       	ldi	r24, 0x16	; 22
    1672:	eb e9       	ldi	r30, 0x9B	; 155
    1674:	f1 e0       	ldi	r31, 0x01	; 1
    1676:	de 01       	movw	r26, r28
    1678:	11 96       	adiw	r26, 0x01	; 1
    167a:	01 90       	ld	r0, Z+
    167c:	0d 92       	st	X+, r0
    167e:	8a 95       	dec	r24
    1680:	e1 f7       	brne	.-8      	; 0x167a <_Z11menue_einstv+0x68>
    1682:	ad 2c       	mov	r10, r13
    1684:	be 2c       	mov	r11, r14
    1686:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,1*charhighte);}
    1688:	f5 01       	movw	r30, r10
    168a:	61 91       	ld	r22, Z+
    168c:	5f 01       	movw	r10, r30
    168e:	28 e0       	ldi	r18, 0x08	; 8
    1690:	41 2f       	mov	r20, r17
    1692:	86 ea       	ldi	r24, 0xA6	; 166
    1694:	92 e0       	ldi	r25, 0x02	; 2
    1696:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    169a:	1a 5f       	subi	r17, 0xFA	; 250
    169c:	1e 37       	cpi	r17, 0x7E	; 126
    169e:	a1 f7       	brne	.-24     	; 0x1688 <_Z11menue_einstv+0x76>
	buffersize=sprintf(buffer,"3:Uhr einstellen");
    16a0:	81 e1       	ldi	r24, 0x11	; 17
    16a2:	e1 eb       	ldi	r30, 0xB1	; 177
    16a4:	f1 e0       	ldi	r31, 0x01	; 1
    16a6:	de 01       	movw	r26, r28
    16a8:	11 96       	adiw	r26, 0x01	; 1
    16aa:	01 90       	ld	r0, Z+
    16ac:	0d 92       	st	X+, r0
    16ae:	8a 95       	dec	r24
    16b0:	e1 f7       	brne	.-8      	; 0x16aa <_Z11menue_einstv+0x98>
    16b2:	ad 2c       	mov	r10, r13
    16b4:	be 2c       	mov	r11, r14
    16b6:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,2*charhighte);}
    16b8:	f5 01       	movw	r30, r10
    16ba:	61 91       	ld	r22, Z+
    16bc:	5f 01       	movw	r10, r30
    16be:	20 e1       	ldi	r18, 0x10	; 16
    16c0:	41 2f       	mov	r20, r17
    16c2:	86 ea       	ldi	r24, 0xA6	; 166
    16c4:	92 e0       	ldi	r25, 0x02	; 2
    16c6:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    16ca:	1a 5f       	subi	r17, 0xFA	; 250
    16cc:	10 36       	cpi	r17, 0x60	; 96
    16ce:	a1 f7       	brne	.-24     	; 0x16b8 <_Z11menue_einstv+0xa6>
	//for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,4*charhighte);}
	//buffersize=sprintf(buffer,"6:HMC5883L Gain");
	//for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,5*charhighte);}
	//buffersize=sprintf(buffer,"7:Uhr einstellen");
	//for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,6*charhighte);}
}
    16d0:	64 96       	adiw	r28, 0x14	; 20
    16d2:	0f b6       	in	r0, 0x3f	; 63
    16d4:	f8 94       	cli
    16d6:	de bf       	out	0x3e, r29	; 62
    16d8:	0f be       	out	0x3f, r0	; 63
    16da:	cd bf       	out	0x3d, r28	; 61
    16dc:	df 91       	pop	r29
    16de:	cf 91       	pop	r28
    16e0:	1f 91       	pop	r17
    16e2:	0f 91       	pop	r16
    16e4:	ef 90       	pop	r14
    16e6:	df 90       	pop	r13
    16e8:	bf 90       	pop	r11
    16ea:	af 90       	pop	r10
    16ec:	08 95       	ret

000016ee <_Z9menue_uhrv>:
void menue_uhr(){
    16ee:	af 92       	push	r10
    16f0:	bf 92       	push	r11
    16f2:	df 92       	push	r13
    16f4:	ef 92       	push	r14
    16f6:	0f 93       	push	r16
    16f8:	1f 93       	push	r17
    16fa:	cf 93       	push	r28
    16fc:	df 93       	push	r29
    16fe:	cd b7       	in	r28, 0x3d	; 61
    1700:	de b7       	in	r29, 0x3e	; 62
    1702:	64 97       	sbiw	r28, 0x14	; 20
    1704:	0f b6       	in	r0, 0x3f	; 63
    1706:	f8 94       	cli
    1708:	de bf       	out	0x3e, r29	; 62
    170a:	0f be       	out	0x3f, r0	; 63
    170c:	cd bf       	out	0x3d, r28	; 61
	char buffer[20];
	uint8_t buffersize=0;

	oled.clearFrame();
    170e:	86 ea       	ldi	r24, 0xA6	; 166
    1710:	92 e0       	ldi	r25, 0x02	; 2
    1712:	0e 94 b9 02 	call	0x572	; 0x572 <_ZN7Display10clearFrameEv>
	buffersize=sprintf(buffer,"1:Uhr");
    1716:	86 e0       	ldi	r24, 0x06	; 6
    1718:	e2 ec       	ldi	r30, 0xC2	; 194
    171a:	f1 e0       	ldi	r31, 0x01	; 1
    171c:	8e 01       	movw	r16, r28
    171e:	0f 5f       	subi	r16, 0xFF	; 255
    1720:	1f 4f       	sbci	r17, 0xFF	; 255
    1722:	d8 01       	movw	r26, r16
    1724:	01 90       	ld	r0, Z+
    1726:	0d 92       	st	X+, r0
    1728:	8a 95       	dec	r24
    172a:	e1 f7       	brne	.-8      	; 0x1724 <_Z9menue_uhrv+0x36>
    172c:	d0 2e       	mov	r13, r16
    172e:	e1 2e       	mov	r14, r17
    1730:	58 01       	movw	r10, r16
    1732:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,0*charhighte);}
    1734:	f5 01       	movw	r30, r10
    1736:	61 91       	ld	r22, Z+
    1738:	5f 01       	movw	r10, r30
    173a:	20 e0       	ldi	r18, 0x00	; 0
    173c:	41 2f       	mov	r20, r17
    173e:	86 ea       	ldi	r24, 0xA6	; 166
    1740:	92 e0       	ldi	r25, 0x02	; 2
    1742:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    1746:	1a 5f       	subi	r17, 0xFA	; 250
    1748:	1e 31       	cpi	r17, 0x1E	; 30
    174a:	a1 f7       	brne	.-24     	; 0x1734 <_Z9menue_uhrv+0x46>
	buffersize=sprintf(buffer,"2:Stoppuhr");
    174c:	8b e0       	ldi	r24, 0x0B	; 11
    174e:	e8 ec       	ldi	r30, 0xC8	; 200
    1750:	f1 e0       	ldi	r31, 0x01	; 1
    1752:	de 01       	movw	r26, r28
    1754:	11 96       	adiw	r26, 0x01	; 1
    1756:	01 90       	ld	r0, Z+
    1758:	0d 92       	st	X+, r0
    175a:	8a 95       	dec	r24
    175c:	e1 f7       	brne	.-8      	; 0x1756 <_Z9menue_uhrv+0x68>
    175e:	ad 2c       	mov	r10, r13
    1760:	be 2c       	mov	r11, r14
    1762:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,1*charhighte);}
    1764:	f5 01       	movw	r30, r10
    1766:	61 91       	ld	r22, Z+
    1768:	5f 01       	movw	r10, r30
    176a:	28 e0       	ldi	r18, 0x08	; 8
    176c:	41 2f       	mov	r20, r17
    176e:	86 ea       	ldi	r24, 0xA6	; 166
    1770:	92 e0       	ldi	r25, 0x02	; 2
    1772:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    1776:	1a 5f       	subi	r17, 0xFA	; 250
    1778:	1c 33       	cpi	r17, 0x3C	; 60
    177a:	a1 f7       	brne	.-24     	; 0x1764 <_Z9menue_uhrv+0x76>
	buffersize=sprintf(buffer,"3:Timer");
    177c:	88 e0       	ldi	r24, 0x08	; 8
    177e:	e3 ed       	ldi	r30, 0xD3	; 211
    1780:	f1 e0       	ldi	r31, 0x01	; 1
    1782:	de 01       	movw	r26, r28
    1784:	11 96       	adiw	r26, 0x01	; 1
    1786:	01 90       	ld	r0, Z+
    1788:	0d 92       	st	X+, r0
    178a:	8a 95       	dec	r24
    178c:	e1 f7       	brne	.-8      	; 0x1786 <_Z9menue_uhrv+0x98>
    178e:	ad 2c       	mov	r10, r13
    1790:	be 2c       	mov	r11, r14
    1792:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,2*charhighte);}
    1794:	f5 01       	movw	r30, r10
    1796:	61 91       	ld	r22, Z+
    1798:	5f 01       	movw	r10, r30
    179a:	20 e1       	ldi	r18, 0x10	; 16
    179c:	41 2f       	mov	r20, r17
    179e:	86 ea       	ldi	r24, 0xA6	; 166
    17a0:	92 e0       	ldi	r25, 0x02	; 2
    17a2:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    17a6:	1a 5f       	subi	r17, 0xFA	; 250
    17a8:	1a 32       	cpi	r17, 0x2A	; 42
    17aa:	a1 f7       	brne	.-24     	; 0x1794 <_Z9menue_uhrv+0xa6>
	buffersize=sprintf(buffer,"4:Alarm");
    17ac:	88 e0       	ldi	r24, 0x08	; 8
    17ae:	eb ed       	ldi	r30, 0xDB	; 219
    17b0:	f1 e0       	ldi	r31, 0x01	; 1
    17b2:	de 01       	movw	r26, r28
    17b4:	11 96       	adiw	r26, 0x01	; 1
    17b6:	01 90       	ld	r0, Z+
    17b8:	0d 92       	st	X+, r0
    17ba:	8a 95       	dec	r24
    17bc:	e1 f7       	brne	.-8      	; 0x17b6 <_Z9menue_uhrv+0xc8>
    17be:	ad 2c       	mov	r10, r13
    17c0:	be 2c       	mov	r11, r14
    17c2:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,3*charhighte);}
    17c4:	f5 01       	movw	r30, r10
    17c6:	61 91       	ld	r22, Z+
    17c8:	5f 01       	movw	r10, r30
    17ca:	28 e1       	ldi	r18, 0x18	; 24
    17cc:	41 2f       	mov	r20, r17
    17ce:	86 ea       	ldi	r24, 0xA6	; 166
    17d0:	92 e0       	ldi	r25, 0x02	; 2
    17d2:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    17d6:	1a 5f       	subi	r17, 0xFA	; 250
    17d8:	1a 32       	cpi	r17, 0x2A	; 42
    17da:	a1 f7       	brne	.-24     	; 0x17c4 <_Z9menue_uhrv+0xd6>
	//for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,4*charhighte);}
	//buffersize=sprintf(buffer,"6:HMC5883L Gain");
	//for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,5*charhighte);}
	//buffersize=sprintf(buffer,"7:Uhr einstellen");
	//for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,6*charhighte);}
}
    17dc:	64 96       	adiw	r28, 0x14	; 20
    17de:	0f b6       	in	r0, 0x3f	; 63
    17e0:	f8 94       	cli
    17e2:	de bf       	out	0x3e, r29	; 62
    17e4:	0f be       	out	0x3f, r0	; 63
    17e6:	cd bf       	out	0x3d, r28	; 61
    17e8:	df 91       	pop	r29
    17ea:	cf 91       	pop	r28
    17ec:	1f 91       	pop	r17
    17ee:	0f 91       	pop	r16
    17f0:	ef 90       	pop	r14
    17f2:	df 90       	pop	r13
    17f4:	bf 90       	pop	r11
    17f6:	af 90       	pop	r10
    17f8:	08 95       	ret

000017fa <_Z11uhranzeigenv>:

void uhranzeigen(){
    17fa:	df 92       	push	r13
    17fc:	ef 92       	push	r14
    17fe:	ff 92       	push	r15
    1800:	0f 93       	push	r16
    1802:	1f 93       	push	r17
    1804:	cf 93       	push	r28
    1806:	df 93       	push	r29
    1808:	cd b7       	in	r28, 0x3d	; 61
    180a:	de b7       	in	r29, 0x3e	; 62
    180c:	64 97       	sbiw	r28, 0x14	; 20
    180e:	0f b6       	in	r0, 0x3f	; 63
    1810:	f8 94       	cli
    1812:	de bf       	out	0x3e, r29	; 62
    1814:	0f be       	out	0x3f, r0	; 63
    1816:	cd bf       	out	0x3d, r28	; 61
	uint8_t buffersize;
	char Buffer[20];
	oled.clearFrame();
    1818:	86 ea       	ldi	r24, 0xA6	; 166
    181a:	92 e0       	ldi	r25, 0x02	; 2
    181c:	0e 94 b9 02 	call	0x572	; 0x572 <_ZN7Display10clearFrameEv>
	oled.analog(rtc.Stunden,rtc.Minuten,rtc.Sekunden);
    1820:	20 91 d1 06 	lds	r18, 0x06D1
    1824:	40 91 d0 06 	lds	r20, 0x06D0
    1828:	60 91 cf 06 	lds	r22, 0x06CF
    182c:	86 ea       	ldi	r24, 0xA6	; 166
    182e:	92 e0       	ldi	r25, 0x02	; 2
    1830:	0e 94 68 06 	call	0xcd0	; 0xcd0 <_ZN7Display6analogEhhh>
    1834:	0f 2e       	mov	r0, r31
    1836:	f7 ec       	ldi	r31, 0xC7	; 199
    1838:	ef 2e       	mov	r14, r31
    183a:	f6 e0       	ldi	r31, 0x06	; 6
    183c:	ff 2e       	mov	r15, r31
    183e:	f0 2d       	mov	r31, r0
    1840:	11 e4       	ldi	r17, 0x41	; 65
	for(uint8_t i=0;i<bitsderrtc;i++){oled.draw_ASCI(rtc.msg_uhr[i],65+i*charsize,0);}
    1842:	f7 01       	movw	r30, r14
    1844:	61 91       	ld	r22, Z+
    1846:	7f 01       	movw	r14, r30
    1848:	20 e0       	ldi	r18, 0x00	; 0
    184a:	41 2f       	mov	r20, r17
    184c:	86 ea       	ldi	r24, 0xA6	; 166
    184e:	92 e0       	ldi	r25, 0x02	; 2
    1850:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    1854:	1a 5f       	subi	r17, 0xFA	; 250
    1856:	11 37       	cpi	r17, 0x71	; 113
    1858:	a1 f7       	brne	.-24     	; 0x1842 <_Z11uhranzeigenv+0x48>
	buffersize=sprintf(Buffer,"%i%%",Batteriestatus());
    185a:	0e 94 18 08 	call	0x1030	; 0x1030 <_Z14Batteriestatusv>
    185e:	28 2f       	mov	r18, r24
    1860:	33 27       	eor	r19, r19
    1862:	27 fd       	sbrc	r18, 7
    1864:	30 95       	com	r19
    1866:	3f 93       	push	r19
    1868:	8f 93       	push	r24
    186a:	81 e3       	ldi	r24, 0x31	; 49
    186c:	91 e0       	ldi	r25, 0x01	; 1
    186e:	9f 93       	push	r25
    1870:	8f 93       	push	r24
    1872:	ce 01       	movw	r24, r28
    1874:	01 96       	adiw	r24, 0x01	; 1
    1876:	9f 93       	push	r25
    1878:	8f 93       	push	r24
    187a:	0e 94 e9 22 	call	0x45d2	; 0x45d2 <sprintf>
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(Buffer[i],65+i*charsize,2*charhighte);}
    187e:	0f 90       	pop	r0
    1880:	0f 90       	pop	r0
    1882:	0f 90       	pop	r0
    1884:	0f 90       	pop	r0
    1886:	0f 90       	pop	r0
    1888:	0f 90       	pop	r0
    188a:	88 23       	and	r24, r24
    188c:	f1 f0       	breq	.+60     	; 0x18ca <_Z11uhranzeigenv+0xd0>
    188e:	8e 01       	movw	r16, r28
    1890:	0f 5f       	subi	r16, 0xFF	; 255
    1892:	1f 4f       	sbci	r17, 0xFF	; 255
    1894:	81 50       	subi	r24, 0x01	; 1
    1896:	68 94       	set
    1898:	ee 24       	eor	r14, r14
    189a:	e1 f8       	bld	r14, 1
    189c:	f1 2c       	mov	r15, r1
    189e:	ec 0e       	add	r14, r28
    18a0:	fd 1e       	adc	r15, r29
    18a2:	e8 0e       	add	r14, r24
    18a4:	f1 1c       	adc	r15, r1
    18a6:	0f 2e       	mov	r0, r31
    18a8:	f1 e4       	ldi	r31, 0x41	; 65
    18aa:	df 2e       	mov	r13, r31
    18ac:	f0 2d       	mov	r31, r0
    18ae:	f8 01       	movw	r30, r16
    18b0:	61 91       	ld	r22, Z+
    18b2:	8f 01       	movw	r16, r30
    18b4:	20 e1       	ldi	r18, 0x10	; 16
    18b6:	4d 2d       	mov	r20, r13
    18b8:	86 ea       	ldi	r24, 0xA6	; 166
    18ba:	92 e0       	ldi	r25, 0x02	; 2
    18bc:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    18c0:	f6 e0       	ldi	r31, 0x06	; 6
    18c2:	df 0e       	add	r13, r31
    18c4:	0e 15       	cp	r16, r14
    18c6:	1f 05       	cpc	r17, r15
    18c8:	91 f7       	brne	.-28     	; 0x18ae <_Z11uhranzeigenv+0xb4>
	buffersize=sprintf(Buffer,"%.3fV",batterie);
    18ca:	80 91 a4 02 	lds	r24, 0x02A4
    18ce:	8f 93       	push	r24
    18d0:	80 91 a3 02 	lds	r24, 0x02A3
    18d4:	8f 93       	push	r24
    18d6:	80 91 a2 02 	lds	r24, 0x02A2
    18da:	8f 93       	push	r24
    18dc:	80 91 a1 02 	lds	r24, 0x02A1
    18e0:	8f 93       	push	r24
    18e2:	83 ee       	ldi	r24, 0xE3	; 227
    18e4:	91 e0       	ldi	r25, 0x01	; 1
    18e6:	9f 93       	push	r25
    18e8:	8f 93       	push	r24
    18ea:	ce 01       	movw	r24, r28
    18ec:	01 96       	adiw	r24, 0x01	; 1
    18ee:	9f 93       	push	r25
    18f0:	8f 93       	push	r24
    18f2:	0e 94 e9 22 	call	0x45d2	; 0x45d2 <sprintf>
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(Buffer[i],65+i*charsize,3*charhighte);}
    18f6:	0f b6       	in	r0, 0x3f	; 63
    18f8:	f8 94       	cli
    18fa:	de bf       	out	0x3e, r29	; 62
    18fc:	0f be       	out	0x3f, r0	; 63
    18fe:	cd bf       	out	0x3d, r28	; 61
    1900:	88 23       	and	r24, r24
    1902:	f1 f0       	breq	.+60     	; 0x1940 <_Z11uhranzeigenv+0x146>
    1904:	8e 01       	movw	r16, r28
    1906:	0f 5f       	subi	r16, 0xFF	; 255
    1908:	1f 4f       	sbci	r17, 0xFF	; 255
    190a:	81 50       	subi	r24, 0x01	; 1
    190c:	68 94       	set
    190e:	ee 24       	eor	r14, r14
    1910:	e1 f8       	bld	r14, 1
    1912:	f1 2c       	mov	r15, r1
    1914:	ec 0e       	add	r14, r28
    1916:	fd 1e       	adc	r15, r29
    1918:	e8 0e       	add	r14, r24
    191a:	f1 1c       	adc	r15, r1
    191c:	0f 2e       	mov	r0, r31
    191e:	f1 e4       	ldi	r31, 0x41	; 65
    1920:	df 2e       	mov	r13, r31
    1922:	f0 2d       	mov	r31, r0
    1924:	f8 01       	movw	r30, r16
    1926:	61 91       	ld	r22, Z+
    1928:	8f 01       	movw	r16, r30
    192a:	28 e1       	ldi	r18, 0x18	; 24
    192c:	4d 2d       	mov	r20, r13
    192e:	86 ea       	ldi	r24, 0xA6	; 166
    1930:	92 e0       	ldi	r25, 0x02	; 2
    1932:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    1936:	f6 e0       	ldi	r31, 0x06	; 6
    1938:	df 0e       	add	r13, r31
    193a:	0e 15       	cp	r16, r14
    193c:	1f 05       	cpc	r17, r15
    193e:	91 f7       	brne	.-28     	; 0x1924 <_Z11uhranzeigenv+0x12a>
}
    1940:	64 96       	adiw	r28, 0x14	; 20
    1942:	0f b6       	in	r0, 0x3f	; 63
    1944:	f8 94       	cli
    1946:	de bf       	out	0x3e, r29	; 62
    1948:	0f be       	out	0x3f, r0	; 63
    194a:	cd bf       	out	0x3d, r28	; 61
    194c:	df 91       	pop	r29
    194e:	cf 91       	pop	r28
    1950:	1f 91       	pop	r17
    1952:	0f 91       	pop	r16
    1954:	ff 90       	pop	r15
    1956:	ef 90       	pop	r14
    1958:	df 90       	pop	r13
    195a:	08 95       	ret

0000195c <_Z12fahradschirmdd>:
	}
	
	return (24*stun+60*min+sek);
}*/

void fahradschirm(double winkelgeschw, double angle){
    195c:	8f 92       	push	r8
    195e:	9f 92       	push	r9
    1960:	af 92       	push	r10
    1962:	bf 92       	push	r11
    1964:	cf 92       	push	r12
    1966:	df 92       	push	r13
    1968:	ef 92       	push	r14
    196a:	ff 92       	push	r15
    196c:	0f 93       	push	r16
    196e:	1f 93       	push	r17
    1970:	cf 93       	push	r28
    1972:	df 93       	push	r29
    1974:	cd b7       	in	r28, 0x3d	; 61
    1976:	de b7       	in	r29, 0x3e	; 62
    1978:	2a 97       	sbiw	r28, 0x0a	; 10
    197a:	0f b6       	in	r0, 0x3f	; 63
    197c:	f8 94       	cli
    197e:	de bf       	out	0x3e, r29	; 62
    1980:	0f be       	out	0x3f, r0	; 63
    1982:	cd bf       	out	0x3d, r28	; 61
    1984:	16 2f       	mov	r17, r22
    1986:	07 2f       	mov	r16, r23
    1988:	f8 2e       	mov	r15, r24
    198a:	e9 2e       	mov	r14, r25
    198c:	a2 2e       	mov	r10, r18
    198e:	b3 2e       	mov	r11, r19
    1990:	c4 2e       	mov	r12, r20
    1992:	d5 2e       	mov	r13, r21
	char buffer[10];
	uint8_t buffersize=0;
	oled.clearFrame();
    1994:	86 ea       	ldi	r24, 0xA6	; 166
    1996:	92 e0       	ldi	r25, 0x02	; 2
    1998:	0e 94 b9 02 	call	0x572	; 0x572 <_ZN7Display10clearFrameEv>
	header(0);
    199c:	80 e0       	ldi	r24, 0x00	; 0
    199e:	0e 94 ef 08 	call	0x11de	; 0x11de <_Z6headerh>
	//bottom();
	//Ausgabe der Geschwidigkeit
	buffersize=sprintf(buffer,"%3.1f",winkelgeschw);
    19a2:	ef 92       	push	r14
    19a4:	ff 92       	push	r15
    19a6:	0f 93       	push	r16
    19a8:	1f 93       	push	r17
    19aa:	89 ee       	ldi	r24, 0xE9	; 233
    19ac:	91 e0       	ldi	r25, 0x01	; 1
    19ae:	9f 93       	push	r25
    19b0:	8f 93       	push	r24
    19b2:	ce 01       	movw	r24, r28
    19b4:	01 96       	adiw	r24, 0x01	; 1
    19b6:	9f 93       	push	r25
    19b8:	8f 93       	push	r24
    19ba:	0e 94 e9 22 	call	0x45d2	; 0x45d2 <sprintf>
	for(uint8_t i=((SSD1306_WIDTH/numbersmalsize)-buffersize-1);i<((SSD1306_WIDTH/numbersmalsize)-1);i++){
    19be:	27 e0       	ldi	r18, 0x07	; 7
    19c0:	f2 2e       	mov	r15, r18
    19c2:	f8 1a       	sub	r15, r24
    19c4:	0f b6       	in	r0, 0x3f	; 63
    19c6:	f8 94       	cli
    19c8:	de bf       	out	0x3e, r29	; 62
    19ca:	0f be       	out	0x3f, r0	; 63
    19cc:	cd bf       	out	0x3d, r28	; 61
    19ce:	36 e0       	ldi	r19, 0x06	; 6
    19d0:	3f 15       	cp	r19, r15
    19d2:	38 f1       	brcs	.+78     	; 0x1a22 <_Z12fahradschirmdd+0xc6>
    19d4:	ef 2c       	mov	r14, r15
    19d6:	ee 0c       	add	r14, r14
    19d8:	ee 0c       	add	r14, r14
    19da:	ee 0c       	add	r14, r14
    19dc:	ee 0c       	add	r14, r14
		if(buffer[i-((SSD1306_WIDTH/numbersmalsize)-buffersize-1)]=='.'){
    19de:	8c 01       	movw	r16, r24
    19e0:	11 27       	eor	r17, r17
    19e2:	e1 e0       	ldi	r30, 0x01	; 1
    19e4:	f0 e0       	ldi	r31, 0x00	; 0
    19e6:	ec 0f       	add	r30, r28
    19e8:	fd 1f       	adc	r31, r29
    19ea:	ef 0d       	add	r30, r15
    19ec:	f1 1d       	adc	r31, r1
    19ee:	e0 0f       	add	r30, r16
    19f0:	f1 1f       	adc	r31, r17
    19f2:	37 97       	sbiw	r30, 0x07	; 7
    19f4:	60 81       	ld	r22, Z
    19f6:	6e 32       	cpi	r22, 0x2E	; 46
    19f8:	39 f4       	brne	.+14     	; 0x1a08 <_Z12fahradschirmdd+0xac>
			oled.draw_ASCI(buffer[i-((SSD1306_WIDTH/numbersmalsize)-buffersize-1)],i*numbersmalsize,4*charhighte);
    19fa:	20 e2       	ldi	r18, 0x20	; 32
    19fc:	4e 2d       	mov	r20, r14
    19fe:	86 ea       	ldi	r24, 0xA6	; 166
    1a00:	92 e0       	ldi	r25, 0x02	; 2
    1a02:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    1a06:	07 c0       	rjmp	.+14     	; 0x1a16 <_Z12fahradschirmdd+0xba>
		}
		else{
			oled.draw_number16x16(buffer[i-((SSD1306_WIDTH/numbersmalsize)-buffersize-1)]-'0',i*numbersmalsize,3*charhighte);
    1a08:	60 53       	subi	r22, 0x30	; 48
    1a0a:	28 e1       	ldi	r18, 0x18	; 24
    1a0c:	4e 2d       	mov	r20, r14
    1a0e:	86 ea       	ldi	r24, 0xA6	; 166
    1a10:	92 e0       	ldi	r25, 0x02	; 2
    1a12:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <_ZN7Display16draw_number16x16Ehhh>
	oled.clearFrame();
	header(0);
	//bottom();
	//Ausgabe der Geschwidigkeit
	buffersize=sprintf(buffer,"%3.1f",winkelgeschw);
	for(uint8_t i=((SSD1306_WIDTH/numbersmalsize)-buffersize-1);i<((SSD1306_WIDTH/numbersmalsize)-1);i++){
    1a16:	f3 94       	inc	r15
    1a18:	80 e1       	ldi	r24, 0x10	; 16
    1a1a:	e8 0e       	add	r14, r24
    1a1c:	97 e0       	ldi	r25, 0x07	; 7
    1a1e:	f9 12       	cpse	r15, r25
    1a20:	e0 cf       	rjmp	.-64     	; 0x19e2 <_Z12fahradschirmdd+0x86>
		}
		else{
			oled.draw_number16x16(buffer[i-((SSD1306_WIDTH/numbersmalsize)-buffersize-1)]-'0',i*numbersmalsize,3*charhighte);
		}
	}
	oled.draw_ASCI('k',((SSD1306_WIDTH/charsize-2)*charsize),3*charhighte);
    1a22:	28 e1       	ldi	r18, 0x18	; 24
    1a24:	42 e7       	ldi	r20, 0x72	; 114
    1a26:	6b e6       	ldi	r22, 0x6B	; 107
    1a28:	86 ea       	ldi	r24, 0xA6	; 166
    1a2a:	92 e0       	ldi	r25, 0x02	; 2
    1a2c:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
	oled.draw_ASCI('m',((SSD1306_WIDTH/charsize-1)*charsize),3*charhighte);
    1a30:	28 e1       	ldi	r18, 0x18	; 24
    1a32:	48 e7       	ldi	r20, 0x78	; 120
    1a34:	6d e6       	ldi	r22, 0x6D	; 109
    1a36:	86 ea       	ldi	r24, 0xA6	; 166
    1a38:	92 e0       	ldi	r25, 0x02	; 2
    1a3a:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
	oled.draw_ASCI('h',((SSD1306_WIDTH/charsize-2)*charsize),4*charhighte);
    1a3e:	20 e2       	ldi	r18, 0x20	; 32
    1a40:	42 e7       	ldi	r20, 0x72	; 114
    1a42:	68 e6       	ldi	r22, 0x68	; 104
    1a44:	86 ea       	ldi	r24, 0xA6	; 166
    1a46:	92 e0       	ldi	r25, 0x02	; 2
    1a48:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
	//winkelausgabe
	buffersize=sprintf(buffer,"%3.1f",angle);
    1a4c:	df 92       	push	r13
    1a4e:	cf 92       	push	r12
    1a50:	bf 92       	push	r11
    1a52:	af 92       	push	r10
    1a54:	89 ee       	ldi	r24, 0xE9	; 233
    1a56:	91 e0       	ldi	r25, 0x01	; 1
    1a58:	9f 93       	push	r25
    1a5a:	8f 93       	push	r24
    1a5c:	ce 01       	movw	r24, r28
    1a5e:	01 96       	adiw	r24, 0x01	; 1
    1a60:	9f 93       	push	r25
    1a62:	8f 93       	push	r24
    1a64:	0e 94 e9 22 	call	0x45d2	; 0x45d2 <sprintf>
    1a68:	88 2e       	mov	r8, r24
	for (uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,7*charhighte);}
    1a6a:	0f b6       	in	r0, 0x3f	; 63
    1a6c:	f8 94       	cli
    1a6e:	de bf       	out	0x3e, r29	; 62
    1a70:	0f be       	out	0x3f, r0	; 63
    1a72:	cd bf       	out	0x3d, r28	; 61
    1a74:	88 23       	and	r24, r24
    1a76:	a9 f0       	breq	.+42     	; 0x1aa2 <_Z12fahradschirmdd+0x146>
    1a78:	9e 01       	movw	r18, r28
    1a7a:	2f 5f       	subi	r18, 0xFF	; 255
    1a7c:	3f 4f       	sbci	r19, 0xFF	; 255
    1a7e:	79 01       	movw	r14, r18
    1a80:	89 01       	movw	r16, r18
    1a82:	91 2c       	mov	r9, r1
    1a84:	f8 01       	movw	r30, r16
    1a86:	61 91       	ld	r22, Z+
    1a88:	8f 01       	movw	r16, r30
    1a8a:	28 e3       	ldi	r18, 0x38	; 56
    1a8c:	49 2d       	mov	r20, r9
    1a8e:	86 ea       	ldi	r24, 0xA6	; 166
    1a90:	92 e0       	ldi	r25, 0x02	; 2
    1a92:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    1a96:	f6 e0       	ldi	r31, 0x06	; 6
    1a98:	9f 0e       	add	r9, r31
    1a9a:	90 2f       	mov	r25, r16
    1a9c:	9e 19       	sub	r25, r14
    1a9e:	98 15       	cp	r25, r8
    1aa0:	88 f3       	brcs	.-30     	; 0x1a84 <_Z12fahradschirmdd+0x128>
	anzeige_kleinenadel(31,31,angle);
    1aa2:	2a 2d       	mov	r18, r10
    1aa4:	3b 2d       	mov	r19, r11
    1aa6:	4c 2d       	mov	r20, r12
    1aa8:	5d 2d       	mov	r21, r13
    1aaa:	6f e1       	ldi	r22, 0x1F	; 31
    1aac:	8f e1       	ldi	r24, 0x1F	; 31
    1aae:	0e 94 35 0a 	call	0x146a	; 0x146a <_Z19anzeige_kleinenadelhhf>
}
    1ab2:	2a 96       	adiw	r28, 0x0a	; 10
    1ab4:	0f b6       	in	r0, 0x3f	; 63
    1ab6:	f8 94       	cli
    1ab8:	de bf       	out	0x3e, r29	; 62
    1aba:	0f be       	out	0x3f, r0	; 63
    1abc:	cd bf       	out	0x3d, r28	; 61
    1abe:	df 91       	pop	r29
    1ac0:	cf 91       	pop	r28
    1ac2:	1f 91       	pop	r17
    1ac4:	0f 91       	pop	r16
    1ac6:	ff 90       	pop	r15
    1ac8:	ef 90       	pop	r14
    1aca:	df 90       	pop	r13
    1acc:	cf 90       	pop	r12
    1ace:	bf 90       	pop	r11
    1ad0:	af 90       	pop	r10
    1ad2:	9f 90       	pop	r9
    1ad4:	8f 90       	pop	r8
    1ad6:	08 95       	ret

00001ad8 <_Z14Gaineinstellenv>:
	{
		offset[i]= (max[0]+min[0])/2;
	}
}
*/
void Gaineinstellen(){
    1ad8:	cf 92       	push	r12
    1ada:	df 92       	push	r13
    1adc:	ef 92       	push	r14
    1ade:	ff 92       	push	r15
    1ae0:	0f 93       	push	r16
    1ae2:	1f 93       	push	r17
    1ae4:	cf 93       	push	r28
    1ae6:	df 93       	push	r29
    1ae8:	cd b7       	in	r28, 0x3d	; 61
    1aea:	de b7       	in	r29, 0x3e	; 62
    1aec:	64 97       	sbiw	r28, 0x14	; 20
    1aee:	0f b6       	in	r0, 0x3f	; 63
    1af0:	f8 94       	cli
    1af2:	de bf       	out	0x3e, r29	; 62
    1af4:	0f be       	out	0x3f, r0	; 63
    1af6:	cd bf       	out	0x3d, r28	; 61
	char buffer[20];
	uint8_t buffersize=0;

	oled.clearFrame();
    1af8:	86 ea       	ldi	r24, 0xA6	; 166
    1afa:	92 e0       	ldi	r25, 0x02	; 2
    1afc:	0e 94 b9 02 	call	0x572	; 0x572 <_ZN7Display10clearFrameEv>
	buffersize=sprintf(buffer,"1: 1370");
    1b00:	88 e0       	ldi	r24, 0x08	; 8
    1b02:	ef ee       	ldi	r30, 0xEF	; 239
    1b04:	f1 e0       	ldi	r31, 0x01	; 1
    1b06:	8e 01       	movw	r16, r28
    1b08:	0f 5f       	subi	r16, 0xFF	; 255
    1b0a:	1f 4f       	sbci	r17, 0xFF	; 255
    1b0c:	d8 01       	movw	r26, r16
    1b0e:	01 90       	ld	r0, Z+
    1b10:	0d 92       	st	X+, r0
    1b12:	8a 95       	dec	r24
    1b14:	e1 f7       	brne	.-8      	; 0x1b0e <_Z14Gaineinstellenv+0x36>
    1b16:	e0 2e       	mov	r14, r16
    1b18:	f1 2e       	mov	r15, r17
    1b1a:	68 01       	movw	r12, r16
    1b1c:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,0*charhighte);}
    1b1e:	f6 01       	movw	r30, r12
    1b20:	61 91       	ld	r22, Z+
    1b22:	6f 01       	movw	r12, r30
    1b24:	20 e0       	ldi	r18, 0x00	; 0
    1b26:	41 2f       	mov	r20, r17
    1b28:	86 ea       	ldi	r24, 0xA6	; 166
    1b2a:	92 e0       	ldi	r25, 0x02	; 2
    1b2c:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    1b30:	1a 5f       	subi	r17, 0xFA	; 250
    1b32:	1a 32       	cpi	r17, 0x2A	; 42
    1b34:	a1 f7       	brne	.-24     	; 0x1b1e <_Z14Gaineinstellenv+0x46>
	buffersize=sprintf(buffer,"2: 1090");
    1b36:	88 e0       	ldi	r24, 0x08	; 8
    1b38:	e7 ef       	ldi	r30, 0xF7	; 247
    1b3a:	f1 e0       	ldi	r31, 0x01	; 1
    1b3c:	de 01       	movw	r26, r28
    1b3e:	11 96       	adiw	r26, 0x01	; 1
    1b40:	01 90       	ld	r0, Z+
    1b42:	0d 92       	st	X+, r0
    1b44:	8a 95       	dec	r24
    1b46:	e1 f7       	brne	.-8      	; 0x1b40 <_Z14Gaineinstellenv+0x68>
    1b48:	ce 2c       	mov	r12, r14
    1b4a:	df 2c       	mov	r13, r15
    1b4c:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,1*charhighte);}
    1b4e:	f6 01       	movw	r30, r12
    1b50:	61 91       	ld	r22, Z+
    1b52:	6f 01       	movw	r12, r30
    1b54:	28 e0       	ldi	r18, 0x08	; 8
    1b56:	41 2f       	mov	r20, r17
    1b58:	86 ea       	ldi	r24, 0xA6	; 166
    1b5a:	92 e0       	ldi	r25, 0x02	; 2
    1b5c:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    1b60:	1a 5f       	subi	r17, 0xFA	; 250
    1b62:	1a 32       	cpi	r17, 0x2A	; 42
    1b64:	a1 f7       	brne	.-24     	; 0x1b4e <_Z14Gaineinstellenv+0x76>
	buffersize=sprintf(buffer,"3:  820");
    1b66:	88 e0       	ldi	r24, 0x08	; 8
    1b68:	ef ef       	ldi	r30, 0xFF	; 255
    1b6a:	f1 e0       	ldi	r31, 0x01	; 1
    1b6c:	de 01       	movw	r26, r28
    1b6e:	11 96       	adiw	r26, 0x01	; 1
    1b70:	01 90       	ld	r0, Z+
    1b72:	0d 92       	st	X+, r0
    1b74:	8a 95       	dec	r24
    1b76:	e1 f7       	brne	.-8      	; 0x1b70 <_Z14Gaineinstellenv+0x98>
    1b78:	ce 2c       	mov	r12, r14
    1b7a:	df 2c       	mov	r13, r15
    1b7c:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,2*charhighte);}
    1b7e:	f6 01       	movw	r30, r12
    1b80:	61 91       	ld	r22, Z+
    1b82:	6f 01       	movw	r12, r30
    1b84:	20 e1       	ldi	r18, 0x10	; 16
    1b86:	41 2f       	mov	r20, r17
    1b88:	86 ea       	ldi	r24, 0xA6	; 166
    1b8a:	92 e0       	ldi	r25, 0x02	; 2
    1b8c:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    1b90:	1a 5f       	subi	r17, 0xFA	; 250
    1b92:	1a 32       	cpi	r17, 0x2A	; 42
    1b94:	a1 f7       	brne	.-24     	; 0x1b7e <_Z14Gaineinstellenv+0xa6>
	buffersize=sprintf(buffer,"4:  660");
    1b96:	88 e0       	ldi	r24, 0x08	; 8
    1b98:	e7 e0       	ldi	r30, 0x07	; 7
    1b9a:	f2 e0       	ldi	r31, 0x02	; 2
    1b9c:	de 01       	movw	r26, r28
    1b9e:	11 96       	adiw	r26, 0x01	; 1
    1ba0:	01 90       	ld	r0, Z+
    1ba2:	0d 92       	st	X+, r0
    1ba4:	8a 95       	dec	r24
    1ba6:	e1 f7       	brne	.-8      	; 0x1ba0 <_Z14Gaineinstellenv+0xc8>
    1ba8:	ce 2c       	mov	r12, r14
    1baa:	df 2c       	mov	r13, r15
    1bac:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,3*charhighte);}
    1bae:	f6 01       	movw	r30, r12
    1bb0:	61 91       	ld	r22, Z+
    1bb2:	6f 01       	movw	r12, r30
    1bb4:	28 e1       	ldi	r18, 0x18	; 24
    1bb6:	41 2f       	mov	r20, r17
    1bb8:	86 ea       	ldi	r24, 0xA6	; 166
    1bba:	92 e0       	ldi	r25, 0x02	; 2
    1bbc:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    1bc0:	1a 5f       	subi	r17, 0xFA	; 250
    1bc2:	1a 32       	cpi	r17, 0x2A	; 42
    1bc4:	a1 f7       	brne	.-24     	; 0x1bae <_Z14Gaineinstellenv+0xd6>
	buffersize=sprintf(buffer,"5:  440");
    1bc6:	88 e0       	ldi	r24, 0x08	; 8
    1bc8:	ef e0       	ldi	r30, 0x0F	; 15
    1bca:	f2 e0       	ldi	r31, 0x02	; 2
    1bcc:	de 01       	movw	r26, r28
    1bce:	11 96       	adiw	r26, 0x01	; 1
    1bd0:	01 90       	ld	r0, Z+
    1bd2:	0d 92       	st	X+, r0
    1bd4:	8a 95       	dec	r24
    1bd6:	e1 f7       	brne	.-8      	; 0x1bd0 <_Z14Gaineinstellenv+0xf8>
    1bd8:	ce 2c       	mov	r12, r14
    1bda:	df 2c       	mov	r13, r15
    1bdc:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,4*charhighte);}
    1bde:	f6 01       	movw	r30, r12
    1be0:	61 91       	ld	r22, Z+
    1be2:	6f 01       	movw	r12, r30
    1be4:	20 e2       	ldi	r18, 0x20	; 32
    1be6:	41 2f       	mov	r20, r17
    1be8:	86 ea       	ldi	r24, 0xA6	; 166
    1bea:	92 e0       	ldi	r25, 0x02	; 2
    1bec:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    1bf0:	1a 5f       	subi	r17, 0xFA	; 250
    1bf2:	1a 32       	cpi	r17, 0x2A	; 42
    1bf4:	a1 f7       	brne	.-24     	; 0x1bde <_Z14Gaineinstellenv+0x106>
	buffersize=sprintf(buffer,"6:  390");
    1bf6:	88 e0       	ldi	r24, 0x08	; 8
    1bf8:	e7 e1       	ldi	r30, 0x17	; 23
    1bfa:	f2 e0       	ldi	r31, 0x02	; 2
    1bfc:	de 01       	movw	r26, r28
    1bfe:	11 96       	adiw	r26, 0x01	; 1
    1c00:	01 90       	ld	r0, Z+
    1c02:	0d 92       	st	X+, r0
    1c04:	8a 95       	dec	r24
    1c06:	e1 f7       	brne	.-8      	; 0x1c00 <_Z14Gaineinstellenv+0x128>
    1c08:	ce 2c       	mov	r12, r14
    1c0a:	df 2c       	mov	r13, r15
    1c0c:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,5*charhighte);}
    1c0e:	f6 01       	movw	r30, r12
    1c10:	61 91       	ld	r22, Z+
    1c12:	6f 01       	movw	r12, r30
    1c14:	28 e2       	ldi	r18, 0x28	; 40
    1c16:	41 2f       	mov	r20, r17
    1c18:	86 ea       	ldi	r24, 0xA6	; 166
    1c1a:	92 e0       	ldi	r25, 0x02	; 2
    1c1c:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    1c20:	1a 5f       	subi	r17, 0xFA	; 250
    1c22:	1a 32       	cpi	r17, 0x2A	; 42
    1c24:	a1 f7       	brne	.-24     	; 0x1c0e <_Z14Gaineinstellenv+0x136>
	buffersize=sprintf(buffer,"7:  330");
    1c26:	88 e0       	ldi	r24, 0x08	; 8
    1c28:	ef e1       	ldi	r30, 0x1F	; 31
    1c2a:	f2 e0       	ldi	r31, 0x02	; 2
    1c2c:	de 01       	movw	r26, r28
    1c2e:	11 96       	adiw	r26, 0x01	; 1
    1c30:	01 90       	ld	r0, Z+
    1c32:	0d 92       	st	X+, r0
    1c34:	8a 95       	dec	r24
    1c36:	e1 f7       	brne	.-8      	; 0x1c30 <_Z14Gaineinstellenv+0x158>
    1c38:	ce 2c       	mov	r12, r14
    1c3a:	df 2c       	mov	r13, r15
    1c3c:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,6*charhighte);}
    1c3e:	f6 01       	movw	r30, r12
    1c40:	61 91       	ld	r22, Z+
    1c42:	6f 01       	movw	r12, r30
    1c44:	20 e3       	ldi	r18, 0x30	; 48
    1c46:	41 2f       	mov	r20, r17
    1c48:	86 ea       	ldi	r24, 0xA6	; 166
    1c4a:	92 e0       	ldi	r25, 0x02	; 2
    1c4c:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    1c50:	1a 5f       	subi	r17, 0xFA	; 250
    1c52:	1a 32       	cpi	r17, 0x2A	; 42
    1c54:	a1 f7       	brne	.-24     	; 0x1c3e <_Z14Gaineinstellenv+0x166>
	buffersize=sprintf(buffer,"8:  230");
    1c56:	88 e0       	ldi	r24, 0x08	; 8
    1c58:	e7 e2       	ldi	r30, 0x27	; 39
    1c5a:	f2 e0       	ldi	r31, 0x02	; 2
    1c5c:	de 01       	movw	r26, r28
    1c5e:	11 96       	adiw	r26, 0x01	; 1
    1c60:	01 90       	ld	r0, Z+
    1c62:	0d 92       	st	X+, r0
    1c64:	8a 95       	dec	r24
    1c66:	e1 f7       	brne	.-8      	; 0x1c60 <_Z14Gaineinstellenv+0x188>
    1c68:	ce 2c       	mov	r12, r14
    1c6a:	df 2c       	mov	r13, r15
    1c6c:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,7*charhighte);}
    1c6e:	f6 01       	movw	r30, r12
    1c70:	61 91       	ld	r22, Z+
    1c72:	6f 01       	movw	r12, r30
    1c74:	28 e3       	ldi	r18, 0x38	; 56
    1c76:	41 2f       	mov	r20, r17
    1c78:	86 ea       	ldi	r24, 0xA6	; 166
    1c7a:	92 e0       	ldi	r25, 0x02	; 2
    1c7c:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    1c80:	1a 5f       	subi	r17, 0xFA	; 250
    1c82:	1a 32       	cpi	r17, 0x2A	; 42
    1c84:	a1 f7       	brne	.-24     	; 0x1c6e <_Z14Gaineinstellenv+0x196>
}
    1c86:	64 96       	adiw	r28, 0x14	; 20
    1c88:	0f b6       	in	r0, 0x3f	; 63
    1c8a:	f8 94       	cli
    1c8c:	de bf       	out	0x3e, r29	; 62
    1c8e:	0f be       	out	0x3f, r0	; 63
    1c90:	cd bf       	out	0x3d, r28	; 61
    1c92:	df 91       	pop	r29
    1c94:	cf 91       	pop	r28
    1c96:	1f 91       	pop	r17
    1c98:	0f 91       	pop	r16
    1c9a:	ff 90       	pop	r15
    1c9c:	ef 90       	pop	r14
    1c9e:	df 90       	pop	r13
    1ca0:	cf 90       	pop	r12
    1ca2:	08 95       	ret

00001ca4 <_Z15anzeige_kompassd>:

void anzeige_kompass(double winkel){
    1ca4:	9f 92       	push	r9
    1ca6:	af 92       	push	r10
    1ca8:	bf 92       	push	r11
    1caa:	cf 92       	push	r12
    1cac:	df 92       	push	r13
    1cae:	ef 92       	push	r14
    1cb0:	ff 92       	push	r15
    1cb2:	0f 93       	push	r16
    1cb4:	1f 93       	push	r17
    1cb6:	cf 93       	push	r28
    1cb8:	df 93       	push	r29
    1cba:	cd b7       	in	r28, 0x3d	; 61
    1cbc:	de b7       	in	r29, 0x3e	; 62
    1cbe:	64 97       	sbiw	r28, 0x14	; 20
    1cc0:	0f b6       	in	r0, 0x3f	; 63
    1cc2:	f8 94       	cli
    1cc4:	de bf       	out	0x3e, r29	; 62
    1cc6:	0f be       	out	0x3f, r0	; 63
    1cc8:	cd bf       	out	0x3d, r28	; 61
    1cca:	a6 2e       	mov	r10, r22
    1ccc:	b7 2e       	mov	r11, r23
    1cce:	c8 2e       	mov	r12, r24
    1cd0:	d9 2e       	mov	r13, r25
	oled.clearFrame();
    1cd2:	86 ea       	ldi	r24, 0xA6	; 166
    1cd4:	92 e0       	ldi	r25, 0x02	; 2
    1cd6:	0e 94 b9 02 	call	0x572	; 0x572 <_ZN7Display10clearFrameEv>
    1cda:	0f 2e       	mov	r0, r31
    1cdc:	f7 ec       	ldi	r31, 0xC7	; 199
    1cde:	ef 2e       	mov	r14, r31
    1ce0:	f6 e0       	ldi	r31, 0x06	; 6
    1ce2:	ff 2e       	mov	r15, r31
    1ce4:	f0 2d       	mov	r31, r0
    1ce6:	11 e4       	ldi	r17, 0x41	; 65
	char buffer[20];
	uint8_t buffersize=0;
	//Uhrzeit
	for(uint8_t i=0;i<bitsderrtc;i++){oled.draw_ASCI(rtc.msg_uhr[i],65+i*charsize,0);}
    1ce8:	f7 01       	movw	r30, r14
    1cea:	61 91       	ld	r22, Z+
    1cec:	7f 01       	movw	r14, r30
    1cee:	20 e0       	ldi	r18, 0x00	; 0
    1cf0:	41 2f       	mov	r20, r17
    1cf2:	86 ea       	ldi	r24, 0xA6	; 166
    1cf4:	92 e0       	ldi	r25, 0x02	; 2
    1cf6:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    1cfa:	1a 5f       	subi	r17, 0xFA	; 250
    1cfc:	11 37       	cpi	r17, 0x71	; 113
    1cfe:	a1 f7       	brne	.-24     	; 0x1ce8 <_Z15anzeige_kompassd+0x44>
	//winkel als Zahl ausgeben
	buffersize=sprintf(buffer,"angle=%.0f",winkel);
    1d00:	df 92       	push	r13
    1d02:	cf 92       	push	r12
    1d04:	bf 92       	push	r11
    1d06:	af 92       	push	r10
    1d08:	8f e2       	ldi	r24, 0x2F	; 47
    1d0a:	92 e0       	ldi	r25, 0x02	; 2
    1d0c:	9f 93       	push	r25
    1d0e:	8f 93       	push	r24
    1d10:	9e 01       	movw	r18, r28
    1d12:	2f 5f       	subi	r18, 0xFF	; 255
    1d14:	3f 4f       	sbci	r19, 0xFF	; 255
    1d16:	3f 93       	push	r19
    1d18:	2f 93       	push	r18
    1d1a:	0e 94 e9 22 	call	0x45d2	; 0x45d2 <sprintf>
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],65+i*charsize,7*charhighte);}
    1d1e:	0f b6       	in	r0, 0x3f	; 63
    1d20:	f8 94       	cli
    1d22:	de bf       	out	0x3e, r29	; 62
    1d24:	0f be       	out	0x3f, r0	; 63
    1d26:	cd bf       	out	0x3d, r28	; 61
    1d28:	88 23       	and	r24, r24
    1d2a:	f1 f0       	breq	.+60     	; 0x1d68 <_Z15anzeige_kompassd+0xc4>
    1d2c:	8e 01       	movw	r16, r28
    1d2e:	0f 5f       	subi	r16, 0xFF	; 255
    1d30:	1f 4f       	sbci	r17, 0xFF	; 255
    1d32:	81 50       	subi	r24, 0x01	; 1
    1d34:	68 94       	set
    1d36:	ee 24       	eor	r14, r14
    1d38:	e1 f8       	bld	r14, 1
    1d3a:	f1 2c       	mov	r15, r1
    1d3c:	ec 0e       	add	r14, r28
    1d3e:	fd 1e       	adc	r15, r29
    1d40:	e8 0e       	add	r14, r24
    1d42:	f1 1c       	adc	r15, r1
    1d44:	0f 2e       	mov	r0, r31
    1d46:	f1 e4       	ldi	r31, 0x41	; 65
    1d48:	9f 2e       	mov	r9, r31
    1d4a:	f0 2d       	mov	r31, r0
    1d4c:	f8 01       	movw	r30, r16
    1d4e:	61 91       	ld	r22, Z+
    1d50:	8f 01       	movw	r16, r30
    1d52:	28 e3       	ldi	r18, 0x38	; 56
    1d54:	49 2d       	mov	r20, r9
    1d56:	86 ea       	ldi	r24, 0xA6	; 166
    1d58:	92 e0       	ldi	r25, 0x02	; 2
    1d5a:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    1d5e:	f6 e0       	ldi	r31, 0x06	; 6
    1d60:	9f 0e       	add	r9, r31
    1d62:	0e 15       	cp	r16, r14
    1d64:	1f 05       	cpc	r17, r15
    1d66:	91 f7       	brne	.-28     	; 0x1d4c <_Z15anzeige_kompassd+0xa8>
	//dreieck als Zeiger
	anzeige_nadel(31,31,winkel);
    1d68:	2a 2d       	mov	r18, r10
    1d6a:	3b 2d       	mov	r19, r11
    1d6c:	4c 2d       	mov	r20, r12
    1d6e:	5d 2d       	mov	r21, r13
    1d70:	6f e1       	ldi	r22, 0x1F	; 31
    1d72:	8f e1       	ldi	r24, 0x1F	; 31
    1d74:	0e 94 17 0a 	call	0x142e	; 0x142e <_Z13anzeige_nadelhhf>
	//Richtung ausgeben
	anzeige_richtung(winkel);	
    1d78:	6a 2d       	mov	r22, r10
    1d7a:	7b 2d       	mov	r23, r11
    1d7c:	8c 2d       	mov	r24, r12
    1d7e:	9d 2d       	mov	r25, r13
    1d80:	0e 94 59 09 	call	0x12b2	; 0x12b2 <_Z16anzeige_richtungf>
}
    1d84:	64 96       	adiw	r28, 0x14	; 20
    1d86:	0f b6       	in	r0, 0x3f	; 63
    1d88:	f8 94       	cli
    1d8a:	de bf       	out	0x3e, r29	; 62
    1d8c:	0f be       	out	0x3f, r0	; 63
    1d8e:	cd bf       	out	0x3d, r28	; 61
    1d90:	df 91       	pop	r29
    1d92:	cf 91       	pop	r28
    1d94:	1f 91       	pop	r17
    1d96:	0f 91       	pop	r16
    1d98:	ff 90       	pop	r15
    1d9a:	ef 90       	pop	r14
    1d9c:	df 90       	pop	r13
    1d9e:	cf 90       	pop	r12
    1da0:	bf 90       	pop	r11
    1da2:	af 90       	pop	r10
    1da4:	9f 90       	pop	r9
    1da6:	08 95       	ret

00001da8 <_Z10timerseitev>:

void timerseite(){
    1da8:	af 92       	push	r10
    1daa:	bf 92       	push	r11
    1dac:	df 92       	push	r13
    1dae:	ef 92       	push	r14
    1db0:	0f 93       	push	r16
    1db2:	1f 93       	push	r17
    1db4:	cf 93       	push	r28
    1db6:	df 93       	push	r29
    1db8:	cd b7       	in	r28, 0x3d	; 61
    1dba:	de b7       	in	r29, 0x3e	; 62
    1dbc:	64 97       	sbiw	r28, 0x14	; 20
    1dbe:	0f b6       	in	r0, 0x3f	; 63
    1dc0:	f8 94       	cli
    1dc2:	de bf       	out	0x3e, r29	; 62
    1dc4:	0f be       	out	0x3f, r0	; 63
    1dc6:	cd bf       	out	0x3d, r28	; 61
	char buffer[20];
	uint8_t buffersize=0;
	oled.clearFrame();
    1dc8:	86 ea       	ldi	r24, 0xA6	; 166
    1dca:	92 e0       	ldi	r25, 0x02	; 2
    1dcc:	0e 94 b9 02 	call	0x572	; 0x572 <_ZN7Display10clearFrameEv>
	buffersize=sprintf(buffer,"Timer: ");
    1dd0:	88 e0       	ldi	r24, 0x08	; 8
    1dd2:	ea e3       	ldi	r30, 0x3A	; 58
    1dd4:	f2 e0       	ldi	r31, 0x02	; 2
    1dd6:	8e 01       	movw	r16, r28
    1dd8:	0f 5f       	subi	r16, 0xFF	; 255
    1dda:	1f 4f       	sbci	r17, 0xFF	; 255
    1ddc:	d8 01       	movw	r26, r16
    1dde:	01 90       	ld	r0, Z+
    1de0:	0d 92       	st	X+, r0
    1de2:	8a 95       	dec	r24
    1de4:	e1 f7       	brne	.-8      	; 0x1dde <_Z10timerseitev+0x36>
    1de6:	d0 2e       	mov	r13, r16
    1de8:	e1 2e       	mov	r14, r17
    1dea:	58 01       	movw	r10, r16
    1dec:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,0*charhighte);}
    1dee:	f5 01       	movw	r30, r10
    1df0:	61 91       	ld	r22, Z+
    1df2:	5f 01       	movw	r10, r30
    1df4:	20 e0       	ldi	r18, 0x00	; 0
    1df6:	41 2f       	mov	r20, r17
    1df8:	86 ea       	ldi	r24, 0xA6	; 166
    1dfa:	92 e0       	ldi	r25, 0x02	; 2
    1dfc:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    1e00:	1a 5f       	subi	r17, 0xFA	; 250
    1e02:	1a 32       	cpi	r17, 0x2A	; 42
    1e04:	a1 f7       	brne	.-24     	; 0x1dee <_Z10timerseitev+0x46>
	if (pos!=0)
    1e06:	60 91 9e 02 	lds	r22, 0x029E
    1e0a:	66 23       	and	r22, r22
    1e0c:	39 f0       	breq	.+14     	; 0x1e1c <_Z10timerseitev+0x74>
	{
		oled.draw_ASCI(pos+'0',buffersize*charsize,0*charhighte);
    1e0e:	60 5d       	subi	r22, 0xD0	; 208
    1e10:	20 e0       	ldi	r18, 0x00	; 0
    1e12:	4a e2       	ldi	r20, 0x2A	; 42
    1e14:	86 ea       	ldi	r24, 0xA6	; 166
    1e16:	92 e0       	ldi	r25, 0x02	; 2
    1e18:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
	}
		
	buffer[0]=zaehler.Stunden/10;
    1e1c:	90 91 bf 06 	lds	r25, 0x06BF
    1e20:	8d ec       	ldi	r24, 0xCD	; 205
    1e22:	98 9f       	mul	r25, r24
    1e24:	21 2d       	mov	r18, r1
    1e26:	11 24       	eor	r1, r1
    1e28:	26 95       	lsr	r18
    1e2a:	26 95       	lsr	r18
    1e2c:	26 95       	lsr	r18
    1e2e:	29 83       	std	Y+1, r18	; 0x01
	buffer[1]=zaehler.Stunden%10;
    1e30:	22 0f       	add	r18, r18
    1e32:	32 2f       	mov	r19, r18
    1e34:	33 0f       	add	r19, r19
    1e36:	33 0f       	add	r19, r19
    1e38:	23 0f       	add	r18, r19
    1e3a:	92 1b       	sub	r25, r18
    1e3c:	9a 83       	std	Y+2, r25	; 0x02
	buffer[2]=':';
    1e3e:	9a e3       	ldi	r25, 0x3A	; 58
    1e40:	9b 83       	std	Y+3, r25	; 0x03
	buffer[3]=zaehler.Minuten/10;
    1e42:	20 91 c0 06 	lds	r18, 0x06C0
    1e46:	28 9f       	mul	r18, r24
    1e48:	31 2d       	mov	r19, r1
    1e4a:	11 24       	eor	r1, r1
    1e4c:	36 95       	lsr	r19
    1e4e:	36 95       	lsr	r19
    1e50:	36 95       	lsr	r19
    1e52:	3c 83       	std	Y+4, r19	; 0x04
	buffer[4]=zaehler.Minuten%10;
    1e54:	33 0f       	add	r19, r19
    1e56:	43 2f       	mov	r20, r19
    1e58:	44 0f       	add	r20, r20
    1e5a:	44 0f       	add	r20, r20
    1e5c:	34 0f       	add	r19, r20
    1e5e:	23 1b       	sub	r18, r19
    1e60:	2d 83       	std	Y+5, r18	; 0x05
	buffer[5]=':';
    1e62:	9e 83       	std	Y+6, r25	; 0x06
	buffer[6]=zaehler.Sekunden/10;
    1e64:	90 91 c1 06 	lds	r25, 0x06C1
    1e68:	98 9f       	mul	r25, r24
    1e6a:	81 2d       	mov	r24, r1
    1e6c:	11 24       	eor	r1, r1
    1e6e:	86 95       	lsr	r24
    1e70:	86 95       	lsr	r24
    1e72:	86 95       	lsr	r24
    1e74:	8f 83       	std	Y+7, r24	; 0x07
	buffer[7]=zaehler.Sekunden%10;
    1e76:	88 0f       	add	r24, r24
    1e78:	28 2f       	mov	r18, r24
    1e7a:	22 0f       	add	r18, r18
    1e7c:	22 0f       	add	r18, r18
    1e7e:	82 0f       	add	r24, r18
    1e80:	98 1b       	sub	r25, r24
    1e82:	98 87       	std	Y+8, r25	; 0x08
    1e84:	ad 2c       	mov	r10, r13
    1e86:	be 2c       	mov	r11, r14
    1e88:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<bitsderrtc;i++){
		if (buffer[i]==':')
    1e8a:	f5 01       	movw	r30, r10
    1e8c:	61 91       	ld	r22, Z+
    1e8e:	5f 01       	movw	r10, r30
    1e90:	6a 33       	cpi	r22, 0x3A	; 58
    1e92:	39 f4       	brne	.+14     	; 0x1ea2 <_Z10timerseitev+0xfa>
		{
			oled.draw_ASCI(buffer[i],i*numbersmalsize,2.5*charhighte);
    1e94:	24 e1       	ldi	r18, 0x14	; 20
    1e96:	41 2f       	mov	r20, r17
    1e98:	86 ea       	ldi	r24, 0xA6	; 166
    1e9a:	92 e0       	ldi	r25, 0x02	; 2
    1e9c:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    1ea0:	06 c0       	rjmp	.+12     	; 0x1eae <_Z10timerseitev+0x106>
		}
		else{
			oled.draw_number16x16(buffer[i],i*numbersmalsize,2*charhighte);
    1ea2:	20 e1       	ldi	r18, 0x10	; 16
    1ea4:	41 2f       	mov	r20, r17
    1ea6:	86 ea       	ldi	r24, 0xA6	; 166
    1ea8:	92 e0       	ldi	r25, 0x02	; 2
    1eaa:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <_ZN7Display16draw_number16x16Ehhh>
    1eae:	10 5f       	subi	r17, 0xF0	; 240
	buffer[3]=zaehler.Minuten/10;
	buffer[4]=zaehler.Minuten%10;
	buffer[5]=':';
	buffer[6]=zaehler.Sekunden/10;
	buffer[7]=zaehler.Sekunden%10;
	for(uint8_t i=0;i<bitsderrtc;i++){
    1eb0:	10 38       	cpi	r17, 0x80	; 128
    1eb2:	59 f7       	brne	.-42     	; 0x1e8a <_Z10timerseitev+0xe2>
		}
		else{
			oled.draw_number16x16(buffer[i],i*numbersmalsize,2*charhighte);
		}
	}
}
    1eb4:	64 96       	adiw	r28, 0x14	; 20
    1eb6:	0f b6       	in	r0, 0x3f	; 63
    1eb8:	f8 94       	cli
    1eba:	de bf       	out	0x3e, r29	; 62
    1ebc:	0f be       	out	0x3f, r0	; 63
    1ebe:	cd bf       	out	0x3d, r28	; 61
    1ec0:	df 91       	pop	r29
    1ec2:	cf 91       	pop	r28
    1ec4:	1f 91       	pop	r17
    1ec6:	0f 91       	pop	r16
    1ec8:	ef 90       	pop	r14
    1eca:	df 90       	pop	r13
    1ecc:	bf 90       	pop	r11
    1ece:	af 90       	pop	r10
    1ed0:	08 95       	ret

00001ed2 <_Z13Stoppuhrseitev>:

void Stoppuhrseite(){
    1ed2:	af 92       	push	r10
    1ed4:	bf 92       	push	r11
    1ed6:	df 92       	push	r13
    1ed8:	ef 92       	push	r14
    1eda:	0f 93       	push	r16
    1edc:	1f 93       	push	r17
    1ede:	cf 93       	push	r28
    1ee0:	df 93       	push	r29
    1ee2:	cd b7       	in	r28, 0x3d	; 61
    1ee4:	de b7       	in	r29, 0x3e	; 62
    1ee6:	64 97       	sbiw	r28, 0x14	; 20
    1ee8:	0f b6       	in	r0, 0x3f	; 63
    1eea:	f8 94       	cli
    1eec:	de bf       	out	0x3e, r29	; 62
    1eee:	0f be       	out	0x3f, r0	; 63
    1ef0:	cd bf       	out	0x3d, r28	; 61
	char buffer[20];
	uint8_t buffersize=0;
	oled.clearFrame();
    1ef2:	86 ea       	ldi	r24, 0xA6	; 166
    1ef4:	92 e0       	ldi	r25, 0x02	; 2
    1ef6:	0e 94 b9 02 	call	0x572	; 0x572 <_ZN7Display10clearFrameEv>
	buffersize=sprintf(buffer,"Stoppuhr: ");
    1efa:	8b e0       	ldi	r24, 0x0B	; 11
    1efc:	e2 e4       	ldi	r30, 0x42	; 66
    1efe:	f2 e0       	ldi	r31, 0x02	; 2
    1f00:	8e 01       	movw	r16, r28
    1f02:	0f 5f       	subi	r16, 0xFF	; 255
    1f04:	1f 4f       	sbci	r17, 0xFF	; 255
    1f06:	d8 01       	movw	r26, r16
    1f08:	01 90       	ld	r0, Z+
    1f0a:	0d 92       	st	X+, r0
    1f0c:	8a 95       	dec	r24
    1f0e:	e1 f7       	brne	.-8      	; 0x1f08 <_Z13Stoppuhrseitev+0x36>
    1f10:	d0 2e       	mov	r13, r16
    1f12:	e1 2e       	mov	r14, r17
    1f14:	58 01       	movw	r10, r16
    1f16:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,0*charhighte);}
    1f18:	f5 01       	movw	r30, r10
    1f1a:	61 91       	ld	r22, Z+
    1f1c:	5f 01       	movw	r10, r30
    1f1e:	20 e0       	ldi	r18, 0x00	; 0
    1f20:	41 2f       	mov	r20, r17
    1f22:	86 ea       	ldi	r24, 0xA6	; 166
    1f24:	92 e0       	ldi	r25, 0x02	; 2
    1f26:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    1f2a:	1a 5f       	subi	r17, 0xFA	; 250
    1f2c:	1c 33       	cpi	r17, 0x3C	; 60
    1f2e:	a1 f7       	brne	.-24     	; 0x1f18 <_Z13Stoppuhrseitev+0x46>
	
	buffer[0]=stoppuhr.Stunden/10;
    1f30:	90 91 af 06 	lds	r25, 0x06AF
    1f34:	8d ec       	ldi	r24, 0xCD	; 205
    1f36:	98 9f       	mul	r25, r24
    1f38:	21 2d       	mov	r18, r1
    1f3a:	11 24       	eor	r1, r1
    1f3c:	26 95       	lsr	r18
    1f3e:	26 95       	lsr	r18
    1f40:	26 95       	lsr	r18
    1f42:	29 83       	std	Y+1, r18	; 0x01
	buffer[1]=stoppuhr.Stunden%10;
    1f44:	22 0f       	add	r18, r18
    1f46:	32 2f       	mov	r19, r18
    1f48:	33 0f       	add	r19, r19
    1f4a:	33 0f       	add	r19, r19
    1f4c:	23 0f       	add	r18, r19
    1f4e:	92 1b       	sub	r25, r18
    1f50:	9a 83       	std	Y+2, r25	; 0x02
	buffer[2]=':';
    1f52:	9a e3       	ldi	r25, 0x3A	; 58
    1f54:	9b 83       	std	Y+3, r25	; 0x03
	buffer[3]=stoppuhr.Minuten/10;
    1f56:	20 91 b0 06 	lds	r18, 0x06B0
    1f5a:	28 9f       	mul	r18, r24
    1f5c:	31 2d       	mov	r19, r1
    1f5e:	11 24       	eor	r1, r1
    1f60:	36 95       	lsr	r19
    1f62:	36 95       	lsr	r19
    1f64:	36 95       	lsr	r19
    1f66:	3c 83       	std	Y+4, r19	; 0x04
	buffer[4]=stoppuhr.Minuten%10;
    1f68:	33 0f       	add	r19, r19
    1f6a:	43 2f       	mov	r20, r19
    1f6c:	44 0f       	add	r20, r20
    1f6e:	44 0f       	add	r20, r20
    1f70:	34 0f       	add	r19, r20
    1f72:	23 1b       	sub	r18, r19
    1f74:	2d 83       	std	Y+5, r18	; 0x05
	buffer[5]=':';
    1f76:	9e 83       	std	Y+6, r25	; 0x06
	buffer[6]=stoppuhr.Sekunden/10;
    1f78:	90 91 b1 06 	lds	r25, 0x06B1
    1f7c:	98 9f       	mul	r25, r24
    1f7e:	81 2d       	mov	r24, r1
    1f80:	11 24       	eor	r1, r1
    1f82:	86 95       	lsr	r24
    1f84:	86 95       	lsr	r24
    1f86:	86 95       	lsr	r24
    1f88:	8f 83       	std	Y+7, r24	; 0x07
	buffer[7]=stoppuhr.Sekunden%10;
    1f8a:	88 0f       	add	r24, r24
    1f8c:	28 2f       	mov	r18, r24
    1f8e:	22 0f       	add	r18, r18
    1f90:	22 0f       	add	r18, r18
    1f92:	82 0f       	add	r24, r18
    1f94:	98 1b       	sub	r25, r24
    1f96:	98 87       	std	Y+8, r25	; 0x08
    1f98:	ad 2c       	mov	r10, r13
    1f9a:	be 2c       	mov	r11, r14
    1f9c:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<bitsderrtc;i++){
		if (buffer[i]==':')
    1f9e:	f5 01       	movw	r30, r10
    1fa0:	61 91       	ld	r22, Z+
    1fa2:	5f 01       	movw	r10, r30
    1fa4:	6a 33       	cpi	r22, 0x3A	; 58
    1fa6:	39 f4       	brne	.+14     	; 0x1fb6 <_Z13Stoppuhrseitev+0xe4>
		{
			oled.draw_ASCI(buffer[i],i*numbersmalsize,2.5*charhighte);
    1fa8:	24 e1       	ldi	r18, 0x14	; 20
    1faa:	41 2f       	mov	r20, r17
    1fac:	86 ea       	ldi	r24, 0xA6	; 166
    1fae:	92 e0       	ldi	r25, 0x02	; 2
    1fb0:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    1fb4:	06 c0       	rjmp	.+12     	; 0x1fc2 <_Z13Stoppuhrseitev+0xf0>
		}
		else{
			oled.draw_number16x16(buffer[i],i*numbersmalsize,2*charhighte);
    1fb6:	20 e1       	ldi	r18, 0x10	; 16
    1fb8:	41 2f       	mov	r20, r17
    1fba:	86 ea       	ldi	r24, 0xA6	; 166
    1fbc:	92 e0       	ldi	r25, 0x02	; 2
    1fbe:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <_ZN7Display16draw_number16x16Ehhh>
    1fc2:	10 5f       	subi	r17, 0xF0	; 240
	buffer[3]=stoppuhr.Minuten/10;
	buffer[4]=stoppuhr.Minuten%10;
	buffer[5]=':';
	buffer[6]=stoppuhr.Sekunden/10;
	buffer[7]=stoppuhr.Sekunden%10;
	for(uint8_t i=0;i<bitsderrtc;i++){
    1fc4:	10 38       	cpi	r17, 0x80	; 128
    1fc6:	59 f7       	brne	.-42     	; 0x1f9e <_Z13Stoppuhrseitev+0xcc>
		}
		else{
			oled.draw_number16x16(buffer[i],i*numbersmalsize,2*charhighte);
		}
	}
}
    1fc8:	64 96       	adiw	r28, 0x14	; 20
    1fca:	0f b6       	in	r0, 0x3f	; 63
    1fcc:	f8 94       	cli
    1fce:	de bf       	out	0x3e, r29	; 62
    1fd0:	0f be       	out	0x3f, r0	; 63
    1fd2:	cd bf       	out	0x3d, r28	; 61
    1fd4:	df 91       	pop	r29
    1fd6:	cf 91       	pop	r28
    1fd8:	1f 91       	pop	r17
    1fda:	0f 91       	pop	r16
    1fdc:	ef 90       	pop	r14
    1fde:	df 90       	pop	r13
    1fe0:	bf 90       	pop	r11
    1fe2:	af 90       	pop	r10
    1fe4:	08 95       	ret

00001fe6 <_Z13uhreinstellenv>:

void uhreinstellen(){
    1fe6:	2f 92       	push	r2
    1fe8:	3f 92       	push	r3
    1fea:	4f 92       	push	r4
    1fec:	5f 92       	push	r5
    1fee:	6f 92       	push	r6
    1ff0:	7f 92       	push	r7
    1ff2:	8f 92       	push	r8
    1ff4:	9f 92       	push	r9
    1ff6:	af 92       	push	r10
    1ff8:	bf 92       	push	r11
    1ffa:	cf 92       	push	r12
    1ffc:	df 92       	push	r13
    1ffe:	ef 92       	push	r14
    2000:	ff 92       	push	r15
    2002:	0f 93       	push	r16
    2004:	1f 93       	push	r17
    2006:	cf 93       	push	r28
    2008:	df 93       	push	r29
    200a:	cd b7       	in	r28, 0x3d	; 61
    200c:	de b7       	in	r29, 0x3e	; 62
    200e:	66 97       	sbiw	r28, 0x16	; 22
    2010:	0f b6       	in	r0, 0x3f	; 63
    2012:	f8 94       	cli
    2014:	de bf       	out	0x3e, r29	; 62
    2016:	0f be       	out	0x3f, r0	; 63
    2018:	cd bf       	out	0x3d, r28	; 61
	rtc.RTCstop();
    201a:	87 ec       	ldi	r24, 0xC7	; 199
    201c:	96 e0       	ldi	r25, 0x06	; 6
    201e:	0e 94 c1 1a 	call	0x3582	; 0x3582 <_ZN3RTC7RTCstopEv>
	
	oled.clearFrame();
    2022:	86 ea       	ldi	r24, 0xA6	; 166
    2024:	92 e0       	ldi	r25, 0x02	; 2
    2026:	0e 94 b9 02 	call	0x572	; 0x572 <_ZN7Display10clearFrameEv>
	char buffer[20];
	uint8_t buffersize;
	uint8_t pos=0;
    202a:	91 2c       	mov	r9, r1
	while(pos<11){
		buffersize=sprintf(buffer,"Uhreinstellung");
    202c:	0f 2e       	mov	r0, r31
    202e:	ff e0       	ldi	r31, 0x0F	; 15
    2030:	6f 2e       	mov	r6, r31
    2032:	f0 2d       	mov	r31, r0
    2034:	ce 01       	movw	r24, r28
    2036:	01 96       	adiw	r24, 0x01	; 1
    2038:	7c 01       	movw	r14, r24
    203a:	78 2e       	mov	r7, r24
    203c:	8f 2c       	mov	r8, r15
    203e:	b1 2c       	mov	r11, r1
		for(uint8_t i = 0; i<buffersize;i++){
			oled.draw_ASCI(buffer[i],charsize*i,0);
		}
		buffersize=sprintf(buffer,"--------------");
    2040:	8d 8b       	std	Y+21, r24	; 0x15
    2042:	fe 8a       	std	Y+22, r15	; 0x16
		for(uint8_t i = 0; i<buffersize;i++){
			oled.draw_ASCI(buffer[i],charsize*i,8);
		}
		buffer[0]=rtc.Stunden/10;
    2044:	0f 2e       	mov	r0, r31
    2046:	fd ec       	ldi	r31, 0xCD	; 205
    2048:	af 2e       	mov	r10, r31
    204a:	f0 2d       	mov	r31, r0
		buffer[1]=rtc.Stunden%10;
		buffer[2]=':';
		buffer[3]=rtc.Minuten/10;
		buffer[4]=rtc.Minuten%10;
		buffer[5]=' ';
		buffer[6]=rtc.Tag/10;
    204c:	0f 2e       	mov	r0, r31
    204e:	f3 ed       	ldi	r31, 0xD3	; 211
    2050:	4f 2e       	mov	r4, r31
    2052:	f6 e0       	ldi	r31, 0x06	; 6
    2054:	5f 2e       	mov	r5, r31
    2056:	f0 2d       	mov	r31, r0
		buffer[7]=rtc.Tag%10;
		buffer[8]='.';
		buffer[9]=rtc.Monat/10;
    2058:	0f 2e       	mov	r0, r31
    205a:	f4 ed       	ldi	r31, 0xD4	; 212
    205c:	cf 2e       	mov	r12, r31
    205e:	f6 e0       	ldi	r31, 0x06	; 6
    2060:	df 2e       	mov	r13, r31
    2062:	f0 2d       	mov	r31, r0
	oled.clearFrame();
	char buffer[20];
	uint8_t buffersize;
	uint8_t pos=0;
	while(pos<11){
		buffersize=sprintf(buffer,"Uhreinstellung");
    2064:	ed e4       	ldi	r30, 0x4D	; 77
    2066:	f2 e0       	ldi	r31, 0x02	; 2
    2068:	a7 2d       	mov	r26, r7
    206a:	b8 2d       	mov	r27, r8
    206c:	86 2d       	mov	r24, r6
    206e:	01 90       	ld	r0, Z+
    2070:	0d 92       	st	X+, r0
    2072:	8a 95       	dec	r24
    2074:	e1 f7       	brne	.-8      	; 0x206e <_Z13uhreinstellenv+0x88>
    2076:	27 2c       	mov	r2, r7
    2078:	38 2c       	mov	r3, r8
    207a:	1b 2d       	mov	r17, r11
		for(uint8_t i = 0; i<buffersize;i++){
			oled.draw_ASCI(buffer[i],charsize*i,0);
    207c:	f1 01       	movw	r30, r2
    207e:	61 91       	ld	r22, Z+
    2080:	1f 01       	movw	r2, r30
    2082:	2b 2d       	mov	r18, r11
    2084:	41 2f       	mov	r20, r17
    2086:	86 ea       	ldi	r24, 0xA6	; 166
    2088:	92 e0       	ldi	r25, 0x02	; 2
    208a:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    208e:	1a 5f       	subi	r17, 0xFA	; 250
	char buffer[20];
	uint8_t buffersize;
	uint8_t pos=0;
	while(pos<11){
		buffersize=sprintf(buffer,"Uhreinstellung");
		for(uint8_t i = 0; i<buffersize;i++){
    2090:	14 35       	cpi	r17, 0x54	; 84
    2092:	a1 f7       	brne	.-24     	; 0x207c <_Z13uhreinstellenv+0x96>
			oled.draw_ASCI(buffer[i],charsize*i,0);
		}
		buffersize=sprintf(buffer,"--------------");
    2094:	ef e0       	ldi	r30, 0x0F	; 15
    2096:	f1 e0       	ldi	r31, 0x01	; 1
    2098:	a7 2d       	mov	r26, r7
    209a:	b8 2d       	mov	r27, r8
    209c:	86 2d       	mov	r24, r6
    209e:	01 90       	ld	r0, Z+
    20a0:	0d 92       	st	X+, r0
    20a2:	8a 95       	dec	r24
    20a4:	e1 f7       	brne	.-8      	; 0x209e <_Z13uhreinstellenv+0xb8>
    20a6:	2d 88       	ldd	r2, Y+21	; 0x15
    20a8:	3e 88       	ldd	r3, Y+22	; 0x16
    20aa:	1b 2d       	mov	r17, r11
		for(uint8_t i = 0; i<buffersize;i++){
			oled.draw_ASCI(buffer[i],charsize*i,8);
    20ac:	f1 01       	movw	r30, r2
    20ae:	61 91       	ld	r22, Z+
    20b0:	1f 01       	movw	r2, r30
    20b2:	28 e0       	ldi	r18, 0x08	; 8
    20b4:	41 2f       	mov	r20, r17
    20b6:	86 ea       	ldi	r24, 0xA6	; 166
    20b8:	92 e0       	ldi	r25, 0x02	; 2
    20ba:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    20be:	1a 5f       	subi	r17, 0xFA	; 250
		buffersize=sprintf(buffer,"Uhreinstellung");
		for(uint8_t i = 0; i<buffersize;i++){
			oled.draw_ASCI(buffer[i],charsize*i,0);
		}
		buffersize=sprintf(buffer,"--------------");
		for(uint8_t i = 0; i<buffersize;i++){
    20c0:	14 35       	cpi	r17, 0x54	; 84
    20c2:	a1 f7       	brne	.-24     	; 0x20ac <_Z13uhreinstellenv+0xc6>
			oled.draw_ASCI(buffer[i],charsize*i,8);
		}
		buffer[0]=rtc.Stunden/10;
    20c4:	ef ec       	ldi	r30, 0xCF	; 207
    20c6:	f6 e0       	ldi	r31, 0x06	; 6
    20c8:	80 81       	ld	r24, Z
    20ca:	8a 9d       	mul	r24, r10
    20cc:	91 2d       	mov	r25, r1
    20ce:	11 24       	eor	r1, r1
    20d0:	96 95       	lsr	r25
    20d2:	96 95       	lsr	r25
    20d4:	96 95       	lsr	r25
    20d6:	99 83       	std	Y+1, r25	; 0x01
		buffer[1]=rtc.Stunden%10;
    20d8:	99 0f       	add	r25, r25
    20da:	29 2f       	mov	r18, r25
    20dc:	22 0f       	add	r18, r18
    20de:	22 0f       	add	r18, r18
    20e0:	92 0f       	add	r25, r18
    20e2:	89 1b       	sub	r24, r25
    20e4:	8a 83       	std	Y+2, r24	; 0x02
		buffer[2]=':';
    20e6:	fa e3       	ldi	r31, 0x3A	; 58
    20e8:	fb 83       	std	Y+3, r31	; 0x03
		buffer[3]=rtc.Minuten/10;
    20ea:	e0 ed       	ldi	r30, 0xD0	; 208
    20ec:	f6 e0       	ldi	r31, 0x06	; 6
    20ee:	80 81       	ld	r24, Z
    20f0:	8a 9d       	mul	r24, r10
    20f2:	91 2d       	mov	r25, r1
    20f4:	11 24       	eor	r1, r1
    20f6:	96 95       	lsr	r25
    20f8:	96 95       	lsr	r25
    20fa:	96 95       	lsr	r25
    20fc:	9c 83       	std	Y+4, r25	; 0x04
		buffer[4]=rtc.Minuten%10;
    20fe:	99 0f       	add	r25, r25
    2100:	29 2f       	mov	r18, r25
    2102:	22 0f       	add	r18, r18
    2104:	22 0f       	add	r18, r18
    2106:	92 0f       	add	r25, r18
    2108:	89 1b       	sub	r24, r25
    210a:	8d 83       	std	Y+5, r24	; 0x05
		buffer[5]=' ';
    210c:	80 e2       	ldi	r24, 0x20	; 32
    210e:	8e 83       	std	Y+6, r24	; 0x06
		buffer[6]=rtc.Tag/10;
    2110:	f2 01       	movw	r30, r4
    2112:	80 81       	ld	r24, Z
    2114:	8a 9d       	mul	r24, r10
    2116:	91 2d       	mov	r25, r1
    2118:	11 24       	eor	r1, r1
    211a:	96 95       	lsr	r25
    211c:	96 95       	lsr	r25
    211e:	96 95       	lsr	r25
    2120:	9f 83       	std	Y+7, r25	; 0x07
		buffer[7]=rtc.Tag%10;
    2122:	99 0f       	add	r25, r25
    2124:	29 2f       	mov	r18, r25
    2126:	22 0f       	add	r18, r18
    2128:	22 0f       	add	r18, r18
    212a:	92 0f       	add	r25, r18
    212c:	89 1b       	sub	r24, r25
    212e:	88 87       	std	Y+8, r24	; 0x08
		buffer[8]='.';
    2130:	8e e2       	ldi	r24, 0x2E	; 46
    2132:	89 87       	std	Y+9, r24	; 0x09
		buffer[9]=rtc.Monat/10;
    2134:	f6 01       	movw	r30, r12
    2136:	90 81       	ld	r25, Z
    2138:	9a 9d       	mul	r25, r10
    213a:	21 2d       	mov	r18, r1
    213c:	11 24       	eor	r1, r1
    213e:	26 95       	lsr	r18
    2140:	26 95       	lsr	r18
    2142:	26 95       	lsr	r18
    2144:	2a 87       	std	Y+10, r18	; 0x0a
		buffer[10]=rtc.Monat%10;
    2146:	22 0f       	add	r18, r18
    2148:	32 2f       	mov	r19, r18
    214a:	33 0f       	add	r19, r19
    214c:	33 0f       	add	r19, r19
    214e:	23 0f       	add	r18, r19
    2150:	92 1b       	sub	r25, r18
    2152:	9b 87       	std	Y+11, r25	; 0x0b
		buffer[11]='.';
    2154:	8c 87       	std	Y+12, r24	; 0x0c
		buffer[12]=rtc.Jahr/10;
    2156:	e5 ed       	ldi	r30, 0xD5	; 213
    2158:	f6 e0       	ldi	r31, 0x06	; 6
    215a:	80 81       	ld	r24, Z
    215c:	8a 9d       	mul	r24, r10
    215e:	91 2d       	mov	r25, r1
    2160:	11 24       	eor	r1, r1
    2162:	96 95       	lsr	r25
    2164:	96 95       	lsr	r25
    2166:	96 95       	lsr	r25
    2168:	9d 87       	std	Y+13, r25	; 0x0d
		buffer[13]=rtc.Jahr%10;
    216a:	99 0f       	add	r25, r25
    216c:	29 2f       	mov	r18, r25
    216e:	22 0f       	add	r18, r18
    2170:	22 0f       	add	r18, r18
    2172:	92 0f       	add	r25, r18
    2174:	89 1b       	sub	r24, r25
    2176:	8e 87       	std	Y+14, r24	; 0x0e
    2178:	3b 2c       	mov	r3, r11
    217a:	01 e0       	ldi	r16, 0x01	; 1
    217c:	1b 2d       	mov	r17, r11
    217e:	04 c0       	rjmp	.+8      	; 0x2188 <_Z13uhreinstellenv+0x1a2>
    2180:	1f 5f       	subi	r17, 0xFF	; 255
    2182:	0f 5f       	subi	r16, 0xFF	; 255
    2184:	f0 e1       	ldi	r31, 0x10	; 16
    2186:	3f 0e       	add	r3, r31
		buffersize=14;
		for(uint8_t i = 0; i<5;i++){
			if(i!=2){
    2188:	12 30       	cpi	r17, 0x02	; 2
    218a:	69 f0       	breq	.+26     	; 0x21a6 <_Z13uhreinstellenv+0x1c0>
				oled.draw_number16x16(buffer[i],i*numbersmalsize,2*charhighte);
    218c:	20 e1       	ldi	r18, 0x10	; 16
    218e:	43 2d       	mov	r20, r3
    2190:	f7 01       	movw	r30, r14
    2192:	e1 0f       	add	r30, r17
    2194:	f1 1d       	adc	r31, r1
    2196:	60 81       	ld	r22, Z
    2198:	86 ea       	ldi	r24, 0xA6	; 166
    219a:	92 e0       	ldi	r25, 0x02	; 2
    219c:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <_ZN7Display16draw_number16x16Ehhh>
		buffer[10]=rtc.Monat%10;
		buffer[11]='.';
		buffer[12]=rtc.Jahr/10;
		buffer[13]=rtc.Jahr%10;
		buffersize=14;
		for(uint8_t i = 0; i<5;i++){
    21a0:	05 30       	cpi	r16, 0x05	; 5
    21a2:	70 f3       	brcs	.-36     	; 0x2180 <_Z13uhreinstellenv+0x19a>
    21a4:	08 c0       	rjmp	.+16     	; 0x21b6 <_Z13uhreinstellenv+0x1d0>
			if(i!=2){
				oled.draw_number16x16(buffer[i],i*numbersmalsize,2*charhighte);
			}
			else {
				oled.draw_ASCI(buffer[i],i*numbersmalsize+numbersmalsize/2,2*charhighte+charhighte/2);
    21a6:	24 e1       	ldi	r18, 0x14	; 20
    21a8:	48 e2       	ldi	r20, 0x28	; 40
    21aa:	6b 81       	ldd	r22, Y+3	; 0x03
    21ac:	86 ea       	ldi	r24, 0xA6	; 166
    21ae:	92 e0       	ldi	r25, 0x02	; 2
    21b0:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    21b4:	e5 cf       	rjmp	.-54     	; 0x2180 <_Z13uhreinstellenv+0x19a>
    21b6:	8e 01       	movw	r16, r28
    21b8:	09 5f       	subi	r16, 0xF9	; 249
    21ba:	1f 4f       	sbci	r17, 0xFF	; 255
		buffer[10]=rtc.Monat%10;
		buffer[11]='.';
		buffer[12]=rtc.Jahr/10;
		buffer[13]=rtc.Jahr%10;
		buffersize=14;
		for(uint8_t i = 0; i<5;i++){
    21bc:	2b 2c       	mov	r2, r11
    21be:	0f 2e       	mov	r0, r31
    21c0:	f6 e0       	ldi	r31, 0x06	; 6
    21c2:	3f 2e       	mov	r3, r31
    21c4:	f0 2d       	mov	r31, r0
			else {
				oled.draw_ASCI(buffer[i],i*numbersmalsize+numbersmalsize/2,2*charhighte+charhighte/2);
			}
		}
		for(uint8_t i = 6; i<buffersize;i++){
			if(i!=8 && i!=11){
    21c6:	88 e0       	ldi	r24, 0x08	; 8
    21c8:	38 16       	cp	r3, r24
    21ca:	61 f0       	breq	.+24     	; 0x21e4 <_Z13uhreinstellenv+0x1fe>
    21cc:	9b e0       	ldi	r25, 0x0B	; 11
    21ce:	39 16       	cp	r3, r25
    21d0:	49 f0       	breq	.+18     	; 0x21e4 <_Z13uhreinstellenv+0x1fe>
				oled.draw_number16x16(buffer[i],i*numbersmalsize-6*numbersmalsize,4*charhighte);
    21d2:	20 e2       	ldi	r18, 0x20	; 32
    21d4:	42 2d       	mov	r20, r2
    21d6:	f8 01       	movw	r30, r16
    21d8:	60 81       	ld	r22, Z
    21da:	86 ea       	ldi	r24, 0xA6	; 166
    21dc:	92 e0       	ldi	r25, 0x02	; 2
    21de:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <_ZN7Display16draw_number16x16Ehhh>
    21e2:	09 c0       	rjmp	.+18     	; 0x21f6 <_Z13uhreinstellenv+0x210>
			}
			else {
				oled.draw_ASCI(buffer[i],i*numbersmalsize+numbersmalsize/2-6*numbersmalsize,5*charhighte);
    21e4:	28 e2       	ldi	r18, 0x28	; 40
    21e6:	48 e0       	ldi	r20, 0x08	; 8
    21e8:	42 0d       	add	r20, r2
    21ea:	f8 01       	movw	r30, r16
    21ec:	60 81       	ld	r22, Z
    21ee:	86 ea       	ldi	r24, 0xA6	; 166
    21f0:	92 e0       	ldi	r25, 0x02	; 2
    21f2:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
			}
			else {
				oled.draw_ASCI(buffer[i],i*numbersmalsize+numbersmalsize/2,2*charhighte+charhighte/2);
			}
		}
		for(uint8_t i = 6; i<buffersize;i++){
    21f6:	33 94       	inc	r3
    21f8:	0f 5f       	subi	r16, 0xFF	; 255
    21fa:	1f 4f       	sbci	r17, 0xFF	; 255
    21fc:	f0 e1       	ldi	r31, 0x10	; 16
    21fe:	2f 0e       	add	r2, r31
    2200:	8e e0       	ldi	r24, 0x0E	; 14
    2202:	38 12       	cpse	r3, r24
    2204:	e0 cf       	rjmp	.-64     	; 0x21c6 <_Z13uhreinstellenv+0x1e0>
			else {
				oled.draw_ASCI(buffer[i],i*numbersmalsize+numbersmalsize/2-6*numbersmalsize,5*charhighte);
			}
		}

		oled.sendFrame();
    2206:	86 ea       	ldi	r24, 0xA6	; 166
    2208:	92 e0       	ldi	r25, 0x02	; 2
    220a:	0e 94 5f 03 	call	0x6be	; 0x6be <_ZN7Display9sendFrameEv>
		oled.clearFrame();
    220e:	86 ea       	ldi	r24, 0xA6	; 166
    2210:	92 e0       	ldi	r25, 0x02	; 2
    2212:	0e 94 b9 02 	call	0x572	; 0x572 <_ZN7Display10clearFrameEv>
		switch (pos) {
    2216:	89 2d       	mov	r24, r9
    2218:	90 e0       	ldi	r25, 0x00	; 0
    221a:	8a 30       	cpi	r24, 0x0A	; 10
    221c:	91 05       	cpc	r25, r1
    221e:	08 f0       	brcs	.+2      	; 0x2222 <_Z13uhreinstellenv+0x23c>
    2220:	43 c2       	rjmp	.+1158   	; 0x26a8 <_Z13uhreinstellenv+0x6c2>
    2222:	fc 01       	movw	r30, r24
    2224:	ec 5c       	subi	r30, 0xCC	; 204
    2226:	ff 4f       	sbci	r31, 0xFF	; 255
    2228:	0c 94 8c 21 	jmp	0x4318	; 0x4318 <__tablejump2__>
			case 0:
				rtc.Stunden=Tastatur.ZahlenausTastatur()*10;
    222c:	85 ea       	ldi	r24, 0xA5	; 165
    222e:	92 e0       	ldi	r25, 0x02	; 2
    2230:	0e 94 8a 18 	call	0x3114	; 0x3114 <_ZN9Interface17ZahlenausTastaturEv>
    2234:	88 0f       	add	r24, r24
    2236:	98 2f       	mov	r25, r24
    2238:	99 0f       	add	r25, r25
    223a:	99 0f       	add	r25, r25
    223c:	89 0f       	add	r24, r25
				if(rtc.Stunden>=24){
    223e:	88 31       	cpi	r24, 0x18	; 24
    2240:	08 f4       	brcc	.+2      	; 0x2244 <_Z13uhreinstellenv+0x25e>
    2242:	45 c2       	rjmp	.+1162   	; 0x26ce <_Z13uhreinstellenv+0x6e8>
					rtc.Stunden=0;
    2244:	ef ec       	ldi	r30, 0xCF	; 207
    2246:	f6 e0       	ldi	r31, 0x06	; 6
    2248:	10 82       	st	Z, r1
					pos=-1;
					buffersize=sprintf(buffer,"Stunden falsch");
    224a:	ec e5       	ldi	r30, 0x5C	; 92
    224c:	f2 e0       	ldi	r31, 0x02	; 2
    224e:	a7 2d       	mov	r26, r7
    2250:	b8 2d       	mov	r27, r8
    2252:	86 2d       	mov	r24, r6
    2254:	01 90       	ld	r0, Z+
    2256:	0d 92       	st	X+, r0
    2258:	8a 95       	dec	r24
    225a:	e1 f7       	brne	.-8      	; 0x2254 <_Z13uhreinstellenv+0x26e>
    225c:	2d 88       	ldd	r2, Y+21	; 0x15
    225e:	3e 88       	ldd	r3, Y+22	; 0x16
    2260:	1b 2d       	mov	r17, r11
					for(uint8_t i = 0; i<buffersize;i++){
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
    2262:	f1 01       	movw	r30, r2
    2264:	61 91       	ld	r22, Z+
    2266:	1f 01       	movw	r2, r30
    2268:	28 e3       	ldi	r18, 0x38	; 56
    226a:	41 2f       	mov	r20, r17
    226c:	86 ea       	ldi	r24, 0xA6	; 166
    226e:	92 e0       	ldi	r25, 0x02	; 2
    2270:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    2274:	1a 5f       	subi	r17, 0xFA	; 250
				rtc.Stunden=Tastatur.ZahlenausTastatur()*10;
				if(rtc.Stunden>=24){
					rtc.Stunden=0;
					pos=-1;
					buffersize=sprintf(buffer,"Stunden falsch");
					for(uint8_t i = 0; i<buffersize;i++){
    2276:	14 35       	cpi	r17, 0x54	; 84
    2278:	a1 f7       	brne	.-24     	; 0x2262 <_Z13uhreinstellenv+0x27c>
    227a:	2d c2       	rjmp	.+1114   	; 0x26d6 <_Z13uhreinstellenv+0x6f0>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 1:
				rtc.Stunden+=Tastatur.ZahlenausTastatur();
    227c:	85 ea       	ldi	r24, 0xA5	; 165
    227e:	92 e0       	ldi	r25, 0x02	; 2
    2280:	0e 94 8a 18 	call	0x3114	; 0x3114 <_ZN9Interface17ZahlenausTastaturEv>
    2284:	ef ec       	ldi	r30, 0xCF	; 207
    2286:	f6 e0       	ldi	r31, 0x06	; 6
    2288:	20 81       	ld	r18, Z
    228a:	90 e0       	ldi	r25, 0x00	; 0
    228c:	82 0f       	add	r24, r18
    228e:	91 1d       	adc	r25, r1
				if(rtc.Stunden>=24){
    2290:	88 31       	cpi	r24, 0x18	; 24
    2292:	10 f4       	brcc	.+4      	; 0x2298 <_Z13uhreinstellenv+0x2b2>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 1:
				rtc.Stunden+=Tastatur.ZahlenausTastatur();
    2294:	80 83       	st	Z, r24
    2296:	52 c2       	rjmp	.+1188   	; 0x273c <_Z13uhreinstellenv+0x756>
				if(rtc.Stunden>=24){
					rtc.Stunden=0;
    2298:	ef ec       	ldi	r30, 0xCF	; 207
    229a:	f6 e0       	ldi	r31, 0x06	; 6
    229c:	10 82       	st	Z, r1
					pos=-1;
					buffersize=sprintf(buffer,"Stunden falsch");
    229e:	ec e5       	ldi	r30, 0x5C	; 92
    22a0:	f2 e0       	ldi	r31, 0x02	; 2
    22a2:	a7 2d       	mov	r26, r7
    22a4:	b8 2d       	mov	r27, r8
    22a6:	86 2d       	mov	r24, r6
    22a8:	01 90       	ld	r0, Z+
    22aa:	0d 92       	st	X+, r0
    22ac:	8a 95       	dec	r24
    22ae:	e1 f7       	brne	.-8      	; 0x22a8 <_Z13uhreinstellenv+0x2c2>
    22b0:	2d 88       	ldd	r2, Y+21	; 0x15
    22b2:	3e 88       	ldd	r3, Y+22	; 0x16
    22b4:	1b 2d       	mov	r17, r11
					for(uint8_t i = 0; i<buffersize;i++){
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
    22b6:	f1 01       	movw	r30, r2
    22b8:	61 91       	ld	r22, Z+
    22ba:	1f 01       	movw	r2, r30
    22bc:	28 e3       	ldi	r18, 0x38	; 56
    22be:	41 2f       	mov	r20, r17
    22c0:	86 ea       	ldi	r24, 0xA6	; 166
    22c2:	92 e0       	ldi	r25, 0x02	; 2
    22c4:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    22c8:	1a 5f       	subi	r17, 0xFA	; 250
				rtc.Stunden+=Tastatur.ZahlenausTastatur();
				if(rtc.Stunden>=24){
					rtc.Stunden=0;
					pos=-1;
					buffersize=sprintf(buffer,"Stunden falsch");
					for(uint8_t i = 0; i<buffersize;i++){
    22ca:	14 35       	cpi	r17, 0x54	; 84
    22cc:	a1 f7       	brne	.-24     	; 0x22b6 <_Z13uhreinstellenv+0x2d0>
    22ce:	06 c2       	rjmp	.+1036   	; 0x26dc <_Z13uhreinstellenv+0x6f6>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 2:
				rtc.Minuten=Tastatur.ZahlenausTastatur()*10;
    22d0:	85 ea       	ldi	r24, 0xA5	; 165
    22d2:	92 e0       	ldi	r25, 0x02	; 2
    22d4:	0e 94 8a 18 	call	0x3114	; 0x3114 <_ZN9Interface17ZahlenausTastaturEv>
    22d8:	88 0f       	add	r24, r24
    22da:	98 2f       	mov	r25, r24
    22dc:	99 0f       	add	r25, r25
    22de:	99 0f       	add	r25, r25
    22e0:	89 0f       	add	r24, r25
				if(rtc.Minuten>=60){
    22e2:	8c 33       	cpi	r24, 0x3C	; 60
    22e4:	20 f4       	brcc	.+8      	; 0x22ee <_Z13uhreinstellenv+0x308>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 2:
				rtc.Minuten=Tastatur.ZahlenausTastatur()*10;
    22e6:	e0 ed       	ldi	r30, 0xD0	; 208
    22e8:	f6 e0       	ldi	r31, 0x06	; 6
    22ea:	80 83       	st	Z, r24
    22ec:	27 c2       	rjmp	.+1102   	; 0x273c <_Z13uhreinstellenv+0x756>
				if(rtc.Minuten>=60){
					rtc.Minuten=0;
    22ee:	e0 ed       	ldi	r30, 0xD0	; 208
    22f0:	f6 e0       	ldi	r31, 0x06	; 6
    22f2:	10 82       	st	Z, r1
					pos=1;
					buffersize=sprintf(buffer,"Minuten falsch");
    22f4:	eb e6       	ldi	r30, 0x6B	; 107
    22f6:	f2 e0       	ldi	r31, 0x02	; 2
    22f8:	a7 2d       	mov	r26, r7
    22fa:	b8 2d       	mov	r27, r8
    22fc:	86 2d       	mov	r24, r6
    22fe:	01 90       	ld	r0, Z+
    2300:	0d 92       	st	X+, r0
    2302:	8a 95       	dec	r24
    2304:	e1 f7       	brne	.-8      	; 0x22fe <_Z13uhreinstellenv+0x318>
    2306:	2d 88       	ldd	r2, Y+21	; 0x15
    2308:	3e 88       	ldd	r3, Y+22	; 0x16
    230a:	1b 2d       	mov	r17, r11
					for(uint8_t i = 0; i<buffersize;i++){
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
    230c:	f1 01       	movw	r30, r2
    230e:	61 91       	ld	r22, Z+
    2310:	1f 01       	movw	r2, r30
    2312:	28 e3       	ldi	r18, 0x38	; 56
    2314:	41 2f       	mov	r20, r17
    2316:	86 ea       	ldi	r24, 0xA6	; 166
    2318:	92 e0       	ldi	r25, 0x02	; 2
    231a:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    231e:	1a 5f       	subi	r17, 0xFA	; 250
				rtc.Minuten=Tastatur.ZahlenausTastatur()*10;
				if(rtc.Minuten>=60){
					rtc.Minuten=0;
					pos=1;
					buffersize=sprintf(buffer,"Minuten falsch");
					for(uint8_t i = 0; i<buffersize;i++){
    2320:	14 35       	cpi	r17, 0x54	; 84
    2322:	a1 f7       	brne	.-24     	; 0x230c <_Z13uhreinstellenv+0x326>
    2324:	de c1       	rjmp	.+956    	; 0x26e2 <_Z13uhreinstellenv+0x6fc>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 3:
				rtc.Minuten+=Tastatur.ZahlenausTastatur();
    2326:	85 ea       	ldi	r24, 0xA5	; 165
    2328:	92 e0       	ldi	r25, 0x02	; 2
    232a:	0e 94 8a 18 	call	0x3114	; 0x3114 <_ZN9Interface17ZahlenausTastaturEv>
    232e:	e0 ed       	ldi	r30, 0xD0	; 208
    2330:	f6 e0       	ldi	r31, 0x06	; 6
    2332:	20 81       	ld	r18, Z
    2334:	90 e0       	ldi	r25, 0x00	; 0
    2336:	82 0f       	add	r24, r18
    2338:	91 1d       	adc	r25, r1
				if(rtc.Minuten>=60){
    233a:	8c 33       	cpi	r24, 0x3C	; 60
    233c:	10 f4       	brcc	.+4      	; 0x2342 <_Z13uhreinstellenv+0x35c>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 3:
				rtc.Minuten+=Tastatur.ZahlenausTastatur();
    233e:	80 83       	st	Z, r24
    2340:	fd c1       	rjmp	.+1018   	; 0x273c <_Z13uhreinstellenv+0x756>
				if(rtc.Minuten>=60){
					rtc.Minuten=0;
    2342:	e0 ed       	ldi	r30, 0xD0	; 208
    2344:	f6 e0       	ldi	r31, 0x06	; 6
    2346:	10 82       	st	Z, r1
					pos=1;
					buffersize=sprintf(buffer,"Minuten falsch");
    2348:	eb e6       	ldi	r30, 0x6B	; 107
    234a:	f2 e0       	ldi	r31, 0x02	; 2
    234c:	a7 2d       	mov	r26, r7
    234e:	b8 2d       	mov	r27, r8
    2350:	86 2d       	mov	r24, r6
    2352:	01 90       	ld	r0, Z+
    2354:	0d 92       	st	X+, r0
    2356:	8a 95       	dec	r24
    2358:	e1 f7       	brne	.-8      	; 0x2352 <_Z13uhreinstellenv+0x36c>
    235a:	2d 88       	ldd	r2, Y+21	; 0x15
    235c:	3e 88       	ldd	r3, Y+22	; 0x16
    235e:	1b 2d       	mov	r17, r11
					for(uint8_t i = 0; i<buffersize;i++){
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
    2360:	f1 01       	movw	r30, r2
    2362:	61 91       	ld	r22, Z+
    2364:	1f 01       	movw	r2, r30
    2366:	28 e3       	ldi	r18, 0x38	; 56
    2368:	41 2f       	mov	r20, r17
    236a:	86 ea       	ldi	r24, 0xA6	; 166
    236c:	92 e0       	ldi	r25, 0x02	; 2
    236e:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    2372:	1a 5f       	subi	r17, 0xFA	; 250
				rtc.Minuten+=Tastatur.ZahlenausTastatur();
				if(rtc.Minuten>=60){
					rtc.Minuten=0;
					pos=1;
					buffersize=sprintf(buffer,"Minuten falsch");
					for(uint8_t i = 0; i<buffersize;i++){
    2374:	14 35       	cpi	r17, 0x54	; 84
    2376:	a1 f7       	brne	.-24     	; 0x2360 <_Z13uhreinstellenv+0x37a>
    2378:	b7 c1       	rjmp	.+878    	; 0x26e8 <_Z13uhreinstellenv+0x702>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 4:
				rtc.Tag=Tastatur.ZahlenausTastatur()*10;
    237a:	85 ea       	ldi	r24, 0xA5	; 165
    237c:	92 e0       	ldi	r25, 0x02	; 2
    237e:	0e 94 8a 18 	call	0x3114	; 0x3114 <_ZN9Interface17ZahlenausTastaturEv>
    2382:	88 0f       	add	r24, r24
    2384:	98 2f       	mov	r25, r24
    2386:	99 0f       	add	r25, r25
    2388:	99 0f       	add	r25, r25
    238a:	89 0f       	add	r24, r25
				if(rtc.Tag>=32){
    238c:	80 32       	cpi	r24, 0x20	; 32
    238e:	18 f4       	brcc	.+6      	; 0x2396 <_Z13uhreinstellenv+0x3b0>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 4:
				rtc.Tag=Tastatur.ZahlenausTastatur()*10;
    2390:	f2 01       	movw	r30, r4
    2392:	80 83       	st	Z, r24
    2394:	d3 c1       	rjmp	.+934    	; 0x273c <_Z13uhreinstellenv+0x756>
				if(rtc.Tag>=32){
					rtc.Tag=0;
    2396:	f2 01       	movw	r30, r4
    2398:	10 82       	st	Z, r1
					pos=3;
					buffersize=sprintf(buffer,"Tag falsch");
    239a:	8b e0       	ldi	r24, 0x0B	; 11
    239c:	ea e7       	ldi	r30, 0x7A	; 122
    239e:	f2 e0       	ldi	r31, 0x02	; 2
    23a0:	a7 2d       	mov	r26, r7
    23a2:	b8 2d       	mov	r27, r8
    23a4:	01 90       	ld	r0, Z+
    23a6:	0d 92       	st	X+, r0
    23a8:	8a 95       	dec	r24
    23aa:	e1 f7       	brne	.-8      	; 0x23a4 <_Z13uhreinstellenv+0x3be>
    23ac:	2d 88       	ldd	r2, Y+21	; 0x15
    23ae:	3e 88       	ldd	r3, Y+22	; 0x16
    23b0:	1b 2d       	mov	r17, r11
					for(uint8_t i = 0; i<buffersize;i++){
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
    23b2:	f1 01       	movw	r30, r2
    23b4:	61 91       	ld	r22, Z+
    23b6:	1f 01       	movw	r2, r30
    23b8:	28 e3       	ldi	r18, 0x38	; 56
    23ba:	41 2f       	mov	r20, r17
    23bc:	86 ea       	ldi	r24, 0xA6	; 166
    23be:	92 e0       	ldi	r25, 0x02	; 2
    23c0:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    23c4:	1a 5f       	subi	r17, 0xFA	; 250
				rtc.Tag=Tastatur.ZahlenausTastatur()*10;
				if(rtc.Tag>=32){
					rtc.Tag=0;
					pos=3;
					buffersize=sprintf(buffer,"Tag falsch");
					for(uint8_t i = 0; i<buffersize;i++){
    23c6:	1c 33       	cpi	r17, 0x3C	; 60
    23c8:	a1 f7       	brne	.-24     	; 0x23b2 <_Z13uhreinstellenv+0x3cc>
    23ca:	91 c1       	rjmp	.+802    	; 0x26ee <_Z13uhreinstellenv+0x708>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 5:
				rtc.Tag+=Tastatur.ZahlenausTastatur();
    23cc:	85 ea       	ldi	r24, 0xA5	; 165
    23ce:	92 e0       	ldi	r25, 0x02	; 2
    23d0:	0e 94 8a 18 	call	0x3114	; 0x3114 <_ZN9Interface17ZahlenausTastaturEv>
    23d4:	f2 01       	movw	r30, r4
    23d6:	20 81       	ld	r18, Z
    23d8:	90 e0       	ldi	r25, 0x00	; 0
    23da:	82 0f       	add	r24, r18
    23dc:	91 1d       	adc	r25, r1
				if(rtc.Tag>=32){
    23de:	80 32       	cpi	r24, 0x20	; 32
    23e0:	10 f4       	brcc	.+4      	; 0x23e6 <_Z13uhreinstellenv+0x400>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 5:
				rtc.Tag+=Tastatur.ZahlenausTastatur();
    23e2:	80 83       	st	Z, r24
    23e4:	ab c1       	rjmp	.+854    	; 0x273c <_Z13uhreinstellenv+0x756>
				if(rtc.Tag>=32){
					rtc.Tag=0;
    23e6:	f2 01       	movw	r30, r4
    23e8:	10 82       	st	Z, r1
					pos=3;
					buffersize=sprintf(buffer,"Tag falsch");
    23ea:	8b e0       	ldi	r24, 0x0B	; 11
    23ec:	ea e7       	ldi	r30, 0x7A	; 122
    23ee:	f2 e0       	ldi	r31, 0x02	; 2
    23f0:	a7 2d       	mov	r26, r7
    23f2:	b8 2d       	mov	r27, r8
    23f4:	01 90       	ld	r0, Z+
    23f6:	0d 92       	st	X+, r0
    23f8:	8a 95       	dec	r24
    23fa:	e1 f7       	brne	.-8      	; 0x23f4 <_Z13uhreinstellenv+0x40e>
    23fc:	2d 88       	ldd	r2, Y+21	; 0x15
    23fe:	3e 88       	ldd	r3, Y+22	; 0x16
    2400:	1b 2d       	mov	r17, r11
					for(uint8_t i = 0; i<buffersize;i++){
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
    2402:	f1 01       	movw	r30, r2
    2404:	61 91       	ld	r22, Z+
    2406:	1f 01       	movw	r2, r30
    2408:	28 e3       	ldi	r18, 0x38	; 56
    240a:	41 2f       	mov	r20, r17
    240c:	86 ea       	ldi	r24, 0xA6	; 166
    240e:	92 e0       	ldi	r25, 0x02	; 2
    2410:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    2414:	1a 5f       	subi	r17, 0xFA	; 250
				rtc.Tag+=Tastatur.ZahlenausTastatur();
				if(rtc.Tag>=32){
					rtc.Tag=0;
					pos=3;
					buffersize=sprintf(buffer,"Tag falsch");
					for(uint8_t i = 0; i<buffersize;i++){
    2416:	1c 33       	cpi	r17, 0x3C	; 60
    2418:	a1 f7       	brne	.-24     	; 0x2402 <_Z13uhreinstellenv+0x41c>
    241a:	6e c1       	rjmp	.+732    	; 0x26f8 <_Z13uhreinstellenv+0x712>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 6:
				rtc.Monat=Tastatur.ZahlenausTastatur()*10;
    241c:	85 ea       	ldi	r24, 0xA5	; 165
    241e:	92 e0       	ldi	r25, 0x02	; 2
    2420:	0e 94 8a 18 	call	0x3114	; 0x3114 <_ZN9Interface17ZahlenausTastaturEv>
    2424:	88 0f       	add	r24, r24
    2426:	98 2f       	mov	r25, r24
    2428:	99 0f       	add	r25, r25
    242a:	99 0f       	add	r25, r25
    242c:	89 0f       	add	r24, r25
				if(rtc.Monat>=13){
    242e:	8d 30       	cpi	r24, 0x0D	; 13
    2430:	18 f4       	brcc	.+6      	; 0x2438 <_Z13uhreinstellenv+0x452>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 6:
				rtc.Monat=Tastatur.ZahlenausTastatur()*10;
    2432:	f6 01       	movw	r30, r12
    2434:	80 83       	st	Z, r24
    2436:	82 c1       	rjmp	.+772    	; 0x273c <_Z13uhreinstellenv+0x756>
				if(rtc.Monat>=13){
					rtc.Monat=0;
    2438:	f6 01       	movw	r30, r12
    243a:	10 82       	st	Z, r1
					pos=5;
					buffersize=sprintf(buffer,"Monat falsch");
    243c:	8d e0       	ldi	r24, 0x0D	; 13
    243e:	e5 e8       	ldi	r30, 0x85	; 133
    2440:	f2 e0       	ldi	r31, 0x02	; 2
    2442:	a7 2d       	mov	r26, r7
    2444:	b8 2d       	mov	r27, r8
    2446:	01 90       	ld	r0, Z+
    2448:	0d 92       	st	X+, r0
    244a:	8a 95       	dec	r24
    244c:	e1 f7       	brne	.-8      	; 0x2446 <_Z13uhreinstellenv+0x460>
    244e:	2d 88       	ldd	r2, Y+21	; 0x15
    2450:	3e 88       	ldd	r3, Y+22	; 0x16
    2452:	1b 2d       	mov	r17, r11
					for(uint8_t i = 0; i<buffersize;i++){
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
    2454:	f1 01       	movw	r30, r2
    2456:	61 91       	ld	r22, Z+
    2458:	1f 01       	movw	r2, r30
    245a:	28 e3       	ldi	r18, 0x38	; 56
    245c:	41 2f       	mov	r20, r17
    245e:	86 ea       	ldi	r24, 0xA6	; 166
    2460:	92 e0       	ldi	r25, 0x02	; 2
    2462:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    2466:	1a 5f       	subi	r17, 0xFA	; 250
				rtc.Monat=Tastatur.ZahlenausTastatur()*10;
				if(rtc.Monat>=13){
					rtc.Monat=0;
					pos=5;
					buffersize=sprintf(buffer,"Monat falsch");
					for(uint8_t i = 0; i<buffersize;i++){
    2468:	18 34       	cpi	r17, 0x48	; 72
    246a:	a1 f7       	brne	.-24     	; 0x2454 <_Z13uhreinstellenv+0x46e>
    246c:	4a c1       	rjmp	.+660    	; 0x2702 <_Z13uhreinstellenv+0x71c>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 7:
				rtc.Monat+=Tastatur.ZahlenausTastatur();
    246e:	85 ea       	ldi	r24, 0xA5	; 165
    2470:	92 e0       	ldi	r25, 0x02	; 2
    2472:	0e 94 8a 18 	call	0x3114	; 0x3114 <_ZN9Interface17ZahlenausTastaturEv>
    2476:	f6 01       	movw	r30, r12
    2478:	20 81       	ld	r18, Z
    247a:	90 e0       	ldi	r25, 0x00	; 0
    247c:	82 0f       	add	r24, r18
    247e:	91 1d       	adc	r25, r1
				if(rtc.Monat>=13){
    2480:	8d 30       	cpi	r24, 0x0D	; 13
    2482:	10 f4       	brcc	.+4      	; 0x2488 <_Z13uhreinstellenv+0x4a2>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 7:
				rtc.Monat+=Tastatur.ZahlenausTastatur();
    2484:	80 83       	st	Z, r24
    2486:	1e c0       	rjmp	.+60     	; 0x24c4 <_Z13uhreinstellenv+0x4de>
				if(rtc.Monat>=13){
					rtc.Monat=0;
    2488:	f6 01       	movw	r30, r12
    248a:	10 82       	st	Z, r1
					pos=5;
					buffersize=sprintf(buffer,"Monat falsch");
    248c:	8d e0       	ldi	r24, 0x0D	; 13
    248e:	e5 e8       	ldi	r30, 0x85	; 133
    2490:	f2 e0       	ldi	r31, 0x02	; 2
    2492:	a7 2d       	mov	r26, r7
    2494:	b8 2d       	mov	r27, r8
    2496:	01 90       	ld	r0, Z+
    2498:	0d 92       	st	X+, r0
    249a:	8a 95       	dec	r24
    249c:	e1 f7       	brne	.-8      	; 0x2496 <_Z13uhreinstellenv+0x4b0>
    249e:	2d 88       	ldd	r2, Y+21	; 0x15
    24a0:	3e 88       	ldd	r3, Y+22	; 0x16
    24a2:	1b 2d       	mov	r17, r11
					for(uint8_t i = 0; i<buffersize;i++){
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
    24a4:	f1 01       	movw	r30, r2
    24a6:	61 91       	ld	r22, Z+
    24a8:	1f 01       	movw	r2, r30
    24aa:	28 e3       	ldi	r18, 0x38	; 56
    24ac:	41 2f       	mov	r20, r17
    24ae:	86 ea       	ldi	r24, 0xA6	; 166
    24b0:	92 e0       	ldi	r25, 0x02	; 2
    24b2:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    24b6:	1a 5f       	subi	r17, 0xFA	; 250
				rtc.Monat+=Tastatur.ZahlenausTastatur();
				if(rtc.Monat>=13){
					rtc.Monat=0;
					pos=5;
					buffersize=sprintf(buffer,"Monat falsch");
					for(uint8_t i = 0; i<buffersize;i++){
    24b8:	18 34       	cpi	r17, 0x48	; 72
    24ba:	a1 f7       	brne	.-24     	; 0x24a4 <_Z13uhreinstellenv+0x4be>
				break;
			case 7:
				rtc.Monat+=Tastatur.ZahlenausTastatur();
				if(rtc.Monat>=13){
					rtc.Monat=0;
					pos=5;
    24bc:	0f 2e       	mov	r0, r31
    24be:	f5 e0       	ldi	r31, 0x05	; 5
    24c0:	9f 2e       	mov	r9, r31
    24c2:	f0 2d       	mov	r31, r0
					buffersize=sprintf(buffer,"Monat falsch");
					for(uint8_t i = 0; i<buffersize;i++){
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				if(rtc.Monat==4||rtc.Monat==6||rtc.Monat==9||rtc.Monat==11){
    24c4:	f6 01       	movw	r30, r12
    24c6:	90 81       	ld	r25, Z
    24c8:	89 2f       	mov	r24, r25
    24ca:	8d 7f       	andi	r24, 0xFD	; 253
    24cc:	84 30       	cpi	r24, 0x04	; 4
    24ce:	11 f0       	breq	.+4      	; 0x24d4 <_Z13uhreinstellenv+0x4ee>
    24d0:	89 30       	cpi	r24, 0x09	; 9
    24d2:	09 f5       	brne	.+66     	; 0x2516 <_Z13uhreinstellenv+0x530>
					if(rtc.Tag>=31){
    24d4:	f2 01       	movw	r30, r4
    24d6:	80 81       	ld	r24, Z
    24d8:	8f 31       	cpi	r24, 0x1F	; 31
    24da:	08 f4       	brcc	.+2      	; 0x24de <_Z13uhreinstellenv+0x4f8>
    24dc:	e6 c0       	rjmp	.+460    	; 0x26aa <_Z13uhreinstellenv+0x6c4>
						rtc.Tag=0;
    24de:	10 82       	st	Z, r1
						rtc.Monat=0;
    24e0:	f6 01       	movw	r30, r12
    24e2:	10 82       	st	Z, r1
						pos=3;
						buffersize=sprintf(buffer,"Tag falsch");
    24e4:	8b e0       	ldi	r24, 0x0B	; 11
    24e6:	ea e7       	ldi	r30, 0x7A	; 122
    24e8:	f2 e0       	ldi	r31, 0x02	; 2
    24ea:	a7 2d       	mov	r26, r7
    24ec:	b8 2d       	mov	r27, r8
    24ee:	01 90       	ld	r0, Z+
    24f0:	0d 92       	st	X+, r0
    24f2:	8a 95       	dec	r24
    24f4:	e1 f7       	brne	.-8      	; 0x24ee <_Z13uhreinstellenv+0x508>
    24f6:	2d 88       	ldd	r2, Y+21	; 0x15
    24f8:	3e 88       	ldd	r3, Y+22	; 0x16
    24fa:	1b 2d       	mov	r17, r11
						for(uint8_t i = 0; i<buffersize;i++){
							oled.draw_ASCI(buffer[i],charsize*i,7*8);
    24fc:	f1 01       	movw	r30, r2
    24fe:	61 91       	ld	r22, Z+
    2500:	1f 01       	movw	r2, r30
    2502:	28 e3       	ldi	r18, 0x38	; 56
    2504:	41 2f       	mov	r20, r17
    2506:	86 ea       	ldi	r24, 0xA6	; 166
    2508:	92 e0       	ldi	r25, 0x02	; 2
    250a:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    250e:	1a 5f       	subi	r17, 0xFA	; 250
					if(rtc.Tag>=31){
						rtc.Tag=0;
						rtc.Monat=0;
						pos=3;
						buffersize=sprintf(buffer,"Tag falsch");
						for(uint8_t i = 0; i<buffersize;i++){
    2510:	1c 33       	cpi	r17, 0x3C	; 60
    2512:	a1 f7       	brne	.-24     	; 0x24fc <_Z13uhreinstellenv+0x516>
    2514:	fb c0       	rjmp	.+502    	; 0x270c <_Z13uhreinstellenv+0x726>
							oled.draw_ASCI(buffer[i],charsize*i,7*8);
						}
					}
				}
				else if(rtc.Monat==2){
    2516:	92 30       	cpi	r25, 0x02	; 2
    2518:	09 f0       	breq	.+2      	; 0x251c <_Z13uhreinstellenv+0x536>
    251a:	c7 c0       	rjmp	.+398    	; 0x26aa <_Z13uhreinstellenv+0x6c4>
					if(rtc.Tag>=30){
    251c:	f2 01       	movw	r30, r4
    251e:	80 81       	ld	r24, Z
    2520:	8e 31       	cpi	r24, 0x1E	; 30
    2522:	08 f4       	brcc	.+2      	; 0x2526 <_Z13uhreinstellenv+0x540>
    2524:	c2 c0       	rjmp	.+388    	; 0x26aa <_Z13uhreinstellenv+0x6c4>
						rtc.Tag=0;
    2526:	10 82       	st	Z, r1
						rtc.Monat=0;
    2528:	f6 01       	movw	r30, r12
    252a:	10 82       	st	Z, r1
						pos=3;
						buffersize=sprintf(buffer,"Tag falsch");
    252c:	8b e0       	ldi	r24, 0x0B	; 11
    252e:	ea e7       	ldi	r30, 0x7A	; 122
    2530:	f2 e0       	ldi	r31, 0x02	; 2
    2532:	a7 2d       	mov	r26, r7
    2534:	b8 2d       	mov	r27, r8
    2536:	01 90       	ld	r0, Z+
    2538:	0d 92       	st	X+, r0
    253a:	8a 95       	dec	r24
    253c:	e1 f7       	brne	.-8      	; 0x2536 <_Z13uhreinstellenv+0x550>
    253e:	2d 88       	ldd	r2, Y+21	; 0x15
    2540:	3e 88       	ldd	r3, Y+22	; 0x16
    2542:	1b 2d       	mov	r17, r11
						for(uint8_t i = 0; i<buffersize;i++){
							oled.draw_ASCI(buffer[i],charsize*i,7*8);
    2544:	f1 01       	movw	r30, r2
    2546:	61 91       	ld	r22, Z+
    2548:	1f 01       	movw	r2, r30
    254a:	28 e3       	ldi	r18, 0x38	; 56
    254c:	41 2f       	mov	r20, r17
    254e:	86 ea       	ldi	r24, 0xA6	; 166
    2550:	92 e0       	ldi	r25, 0x02	; 2
    2552:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    2556:	1a 5f       	subi	r17, 0xFA	; 250
					if(rtc.Tag>=30){
						rtc.Tag=0;
						rtc.Monat=0;
						pos=3;
						buffersize=sprintf(buffer,"Tag falsch");
						for(uint8_t i = 0; i<buffersize;i++){
    2558:	1c 33       	cpi	r17, 0x3C	; 60
    255a:	a1 f7       	brne	.-24     	; 0x2544 <_Z13uhreinstellenv+0x55e>
    255c:	dc c0       	rjmp	.+440    	; 0x2716 <_Z13uhreinstellenv+0x730>
						}
					}
				}
				break;
			case 8:
				rtc.Jahr=Tastatur.ZahlenausTastatur()*10;
    255e:	85 ea       	ldi	r24, 0xA5	; 165
    2560:	92 e0       	ldi	r25, 0x02	; 2
    2562:	0e 94 8a 18 	call	0x3114	; 0x3114 <_ZN9Interface17ZahlenausTastaturEv>
    2566:	88 0f       	add	r24, r24
    2568:	98 2f       	mov	r25, r24
    256a:	99 0f       	add	r25, r25
    256c:	99 0f       	add	r25, r25
    256e:	89 0f       	add	r24, r25
				if(rtc.Jahr>=50){
    2570:	82 33       	cpi	r24, 0x32	; 50
    2572:	20 f4       	brcc	.+8      	; 0x257c <_Z13uhreinstellenv+0x596>
						}
					}
				}
				break;
			case 8:
				rtc.Jahr=Tastatur.ZahlenausTastatur()*10;
    2574:	e5 ed       	ldi	r30, 0xD5	; 213
    2576:	f6 e0       	ldi	r31, 0x06	; 6
    2578:	80 83       	st	Z, r24
    257a:	e0 c0       	rjmp	.+448    	; 0x273c <_Z13uhreinstellenv+0x756>
				if(rtc.Jahr>=50){
					rtc.Jahr=0;
    257c:	e5 ed       	ldi	r30, 0xD5	; 213
    257e:	f6 e0       	ldi	r31, 0x06	; 6
    2580:	10 82       	st	Z, r1
					pos=7;
					buffersize=sprintf(buffer,"Jahr falsch");
    2582:	8c e0       	ldi	r24, 0x0C	; 12
    2584:	e2 e9       	ldi	r30, 0x92	; 146
    2586:	f2 e0       	ldi	r31, 0x02	; 2
    2588:	a7 2d       	mov	r26, r7
    258a:	b8 2d       	mov	r27, r8
    258c:	01 90       	ld	r0, Z+
    258e:	0d 92       	st	X+, r0
    2590:	8a 95       	dec	r24
    2592:	e1 f7       	brne	.-8      	; 0x258c <_Z13uhreinstellenv+0x5a6>
    2594:	2d 88       	ldd	r2, Y+21	; 0x15
    2596:	3e 88       	ldd	r3, Y+22	; 0x16
    2598:	1b 2d       	mov	r17, r11
					for(uint8_t i = 0; i<buffersize;i++){
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
    259a:	f1 01       	movw	r30, r2
    259c:	61 91       	ld	r22, Z+
    259e:	1f 01       	movw	r2, r30
    25a0:	28 e3       	ldi	r18, 0x38	; 56
    25a2:	41 2f       	mov	r20, r17
    25a4:	86 ea       	ldi	r24, 0xA6	; 166
    25a6:	92 e0       	ldi	r25, 0x02	; 2
    25a8:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    25ac:	1a 5f       	subi	r17, 0xFA	; 250
				rtc.Jahr=Tastatur.ZahlenausTastatur()*10;
				if(rtc.Jahr>=50){
					rtc.Jahr=0;
					pos=7;
					buffersize=sprintf(buffer,"Jahr falsch");
					for(uint8_t i = 0; i<buffersize;i++){
    25ae:	12 34       	cpi	r17, 0x42	; 66
    25b0:	a1 f7       	brne	.-24     	; 0x259a <_Z13uhreinstellenv+0x5b4>
    25b2:	b6 c0       	rjmp	.+364    	; 0x2720 <_Z13uhreinstellenv+0x73a>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 9:
				rtc.Jahr+=Tastatur.ZahlenausTastatur();
    25b4:	85 ea       	ldi	r24, 0xA5	; 165
    25b6:	92 e0       	ldi	r25, 0x02	; 2
    25b8:	0e 94 8a 18 	call	0x3114	; 0x3114 <_ZN9Interface17ZahlenausTastaturEv>
    25bc:	e5 ed       	ldi	r30, 0xD5	; 213
    25be:	f6 e0       	ldi	r31, 0x06	; 6
    25c0:	20 81       	ld	r18, Z
    25c2:	90 e0       	ldi	r25, 0x00	; 0
    25c4:	82 0f       	add	r24, r18
    25c6:	91 1d       	adc	r25, r1
				if(rtc.Jahr>=50){
    25c8:	82 33       	cpi	r24, 0x32	; 50
    25ca:	10 f4       	brcc	.+4      	; 0x25d0 <_Z13uhreinstellenv+0x5ea>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 9:
				rtc.Jahr+=Tastatur.ZahlenausTastatur();
    25cc:	80 83       	st	Z, r24
    25ce:	1f c0       	rjmp	.+62     	; 0x260e <_Z13uhreinstellenv+0x628>
				if(rtc.Jahr>=50){
					rtc.Jahr=0;
    25d0:	e5 ed       	ldi	r30, 0xD5	; 213
    25d2:	f6 e0       	ldi	r31, 0x06	; 6
    25d4:	10 82       	st	Z, r1
					pos=7;
					buffersize=sprintf(buffer,"Jahr falsch");
    25d6:	8c e0       	ldi	r24, 0x0C	; 12
    25d8:	e2 e9       	ldi	r30, 0x92	; 146
    25da:	f2 e0       	ldi	r31, 0x02	; 2
    25dc:	a7 2d       	mov	r26, r7
    25de:	b8 2d       	mov	r27, r8
    25e0:	01 90       	ld	r0, Z+
    25e2:	0d 92       	st	X+, r0
    25e4:	8a 95       	dec	r24
    25e6:	e1 f7       	brne	.-8      	; 0x25e0 <_Z13uhreinstellenv+0x5fa>
    25e8:	2d 88       	ldd	r2, Y+21	; 0x15
    25ea:	3e 88       	ldd	r3, Y+22	; 0x16
    25ec:	1b 2d       	mov	r17, r11
					for(uint8_t i = 0; i<buffersize;i++){
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
    25ee:	f1 01       	movw	r30, r2
    25f0:	61 91       	ld	r22, Z+
    25f2:	1f 01       	movw	r2, r30
    25f4:	28 e3       	ldi	r18, 0x38	; 56
    25f6:	41 2f       	mov	r20, r17
    25f8:	86 ea       	ldi	r24, 0xA6	; 166
    25fa:	92 e0       	ldi	r25, 0x02	; 2
    25fc:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    2600:	1a 5f       	subi	r17, 0xFA	; 250
				rtc.Jahr+=Tastatur.ZahlenausTastatur();
				if(rtc.Jahr>=50){
					rtc.Jahr=0;
					pos=7;
					buffersize=sprintf(buffer,"Jahr falsch");
					for(uint8_t i = 0; i<buffersize;i++){
    2602:	12 34       	cpi	r17, 0x42	; 66
    2604:	a1 f7       	brne	.-24     	; 0x25ee <_Z13uhreinstellenv+0x608>
				break;
			case 9:
				rtc.Jahr+=Tastatur.ZahlenausTastatur();
				if(rtc.Jahr>=50){
					rtc.Jahr=0;
					pos=7;
    2606:	0f 2e       	mov	r0, r31
    2608:	f7 e0       	ldi	r31, 0x07	; 7
    260a:	9f 2e       	mov	r9, r31
    260c:	f0 2d       	mov	r31, r0
					buffersize=sprintf(buffer,"Jahr falsch");
					for(uint8_t i = 0; i<buffersize;i++){
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				if(rtc.Monat==2){
    260e:	f6 01       	movw	r30, r12
    2610:	80 81       	ld	r24, Z
    2612:	82 30       	cpi	r24, 0x02	; 2
    2614:	09 f0       	breq	.+2      	; 0x2618 <_Z13uhreinstellenv+0x632>
    2616:	49 c0       	rjmp	.+146    	; 0x26aa <_Z13uhreinstellenv+0x6c4>
					if(rtc.Jahr%4==0){
    2618:	e5 ed       	ldi	r30, 0xD5	; 213
    261a:	f6 e0       	ldi	r31, 0x06	; 6
    261c:	80 81       	ld	r24, Z
    261e:	83 70       	andi	r24, 0x03	; 3
    2620:	01 f5       	brne	.+64     	; 0x2662 <_Z13uhreinstellenv+0x67c>
						rtc.Tag=0;
    2622:	f2 01       	movw	r30, r4
    2624:	10 82       	st	Z, r1
						rtc.Monat=0;
    2626:	f6 01       	movw	r30, r12
    2628:	10 82       	st	Z, r1
						rtc.Jahr=0;
    262a:	e5 ed       	ldi	r30, 0xD5	; 213
    262c:	f6 e0       	ldi	r31, 0x06	; 6
    262e:	10 82       	st	Z, r1
						pos=3;
						buffersize=sprintf(buffer,"Tag falsch");
    2630:	8b e0       	ldi	r24, 0x0B	; 11
    2632:	ea e7       	ldi	r30, 0x7A	; 122
    2634:	f2 e0       	ldi	r31, 0x02	; 2
    2636:	a7 2d       	mov	r26, r7
    2638:	b8 2d       	mov	r27, r8
    263a:	01 90       	ld	r0, Z+
    263c:	0d 92       	st	X+, r0
    263e:	8a 95       	dec	r24
    2640:	e1 f7       	brne	.-8      	; 0x263a <_Z13uhreinstellenv+0x654>
    2642:	2d 88       	ldd	r2, Y+21	; 0x15
    2644:	3e 88       	ldd	r3, Y+22	; 0x16
    2646:	1b 2d       	mov	r17, r11
						for(uint8_t i = 0; i<buffersize;i++){
							oled.draw_ASCI(buffer[i],charsize*i,7*8);
    2648:	f1 01       	movw	r30, r2
    264a:	61 91       	ld	r22, Z+
    264c:	1f 01       	movw	r2, r30
    264e:	28 e3       	ldi	r18, 0x38	; 56
    2650:	41 2f       	mov	r20, r17
    2652:	86 ea       	ldi	r24, 0xA6	; 166
    2654:	92 e0       	ldi	r25, 0x02	; 2
    2656:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    265a:	1a 5f       	subi	r17, 0xFA	; 250
						rtc.Tag=0;
						rtc.Monat=0;
						rtc.Jahr=0;
						pos=3;
						buffersize=sprintf(buffer,"Tag falsch");
						for(uint8_t i = 0; i<buffersize;i++){
    265c:	1c 33       	cpi	r17, 0x3C	; 60
    265e:	a1 f7       	brne	.-24     	; 0x2648 <_Z13uhreinstellenv+0x662>
    2660:	64 c0       	rjmp	.+200    	; 0x272a <_Z13uhreinstellenv+0x744>
							oled.draw_ASCI(buffer[i],charsize*i,7*8);
						}
					}
					else{
						if(rtc.Tag>=29){
    2662:	f2 01       	movw	r30, r4
    2664:	80 81       	ld	r24, Z
    2666:	8d 31       	cpi	r24, 0x1D	; 29
    2668:	00 f1       	brcs	.+64     	; 0x26aa <_Z13uhreinstellenv+0x6c4>
							rtc.Tag=0;
    266a:	10 82       	st	Z, r1
							rtc.Monat=0;
    266c:	f6 01       	movw	r30, r12
    266e:	10 82       	st	Z, r1
							rtc.Jahr=0;
    2670:	e5 ed       	ldi	r30, 0xD5	; 213
    2672:	f6 e0       	ldi	r31, 0x06	; 6
    2674:	10 82       	st	Z, r1
							pos=3;
							buffersize=sprintf(buffer,"Tag falsch");
    2676:	8b e0       	ldi	r24, 0x0B	; 11
    2678:	ea e7       	ldi	r30, 0x7A	; 122
    267a:	f2 e0       	ldi	r31, 0x02	; 2
    267c:	a7 2d       	mov	r26, r7
    267e:	b8 2d       	mov	r27, r8
    2680:	01 90       	ld	r0, Z+
    2682:	0d 92       	st	X+, r0
    2684:	8a 95       	dec	r24
    2686:	e1 f7       	brne	.-8      	; 0x2680 <_Z13uhreinstellenv+0x69a>
    2688:	2d 88       	ldd	r2, Y+21	; 0x15
    268a:	3e 88       	ldd	r3, Y+22	; 0x16
    268c:	1b 2d       	mov	r17, r11
							for(uint8_t i = 0; i<buffersize;i++){
								oled.draw_ASCI(buffer[i],charsize*i,7*8);
    268e:	f1 01       	movw	r30, r2
    2690:	61 91       	ld	r22, Z+
    2692:	1f 01       	movw	r2, r30
    2694:	28 e3       	ldi	r18, 0x38	; 56
    2696:	41 2f       	mov	r20, r17
    2698:	86 ea       	ldi	r24, 0xA6	; 166
    269a:	92 e0       	ldi	r25, 0x02	; 2
    269c:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    26a0:	1a 5f       	subi	r17, 0xFA	; 250
							rtc.Tag=0;
							rtc.Monat=0;
							rtc.Jahr=0;
							pos=3;
							buffersize=sprintf(buffer,"Tag falsch");
							for(uint8_t i = 0; i<buffersize;i++){
    26a2:	1c 33       	cpi	r17, 0x3C	; 60
    26a4:	a1 f7       	brne	.-24     	; 0x268e <_Z13uhreinstellenv+0x6a8>
    26a6:	46 c0       	rjmp	.+140    	; 0x2734 <_Z13uhreinstellenv+0x74e>
						}
					}
				}
				break;
			default:
				pos++;
    26a8:	93 94       	inc	r9
				break;
		}
		pos++;
    26aa:	93 94       	inc	r9
	
	oled.clearFrame();
	char buffer[20];
	uint8_t buffersize;
	uint8_t pos=0;
	while(pos<11){
    26ac:	fa e0       	ldi	r31, 0x0A	; 10
    26ae:	f9 15       	cp	r31, r9
    26b0:	08 f0       	brcs	.+2      	; 0x26b4 <_Z13uhreinstellenv+0x6ce>
    26b2:	d8 cc       	rjmp	.-1616   	; 0x2064 <_Z13uhreinstellenv+0x7e>
				break;
		}
		pos++;
	}
	
	rtc.Sekunden		= 0;
    26b4:	10 92 d1 06 	sts	0x06D1, r1
	rtc.HundSekunden	= 0;
    26b8:	10 92 d2 06 	sts	0x06D2, r1
	oled.clearFrame();
    26bc:	86 ea       	ldi	r24, 0xA6	; 166
    26be:	92 e0       	ldi	r25, 0x02	; 2
    26c0:	0e 94 b9 02 	call	0x572	; 0x572 <_ZN7Display10clearFrameEv>
	rtc.RTCstart();
    26c4:	87 ec       	ldi	r24, 0xC7	; 199
    26c6:	96 e0       	ldi	r25, 0x06	; 6
    26c8:	0e 94 b3 1a 	call	0x3566	; 0x3566 <_ZN3RTC8RTCstartEv>
    26cc:	39 c0       	rjmp	.+114    	; 0x2740 <_Z13uhreinstellenv+0x75a>

		oled.sendFrame();
		oled.clearFrame();
		switch (pos) {
			case 0:
				rtc.Stunden=Tastatur.ZahlenausTastatur()*10;
    26ce:	ef ec       	ldi	r30, 0xCF	; 207
    26d0:	f6 e0       	ldi	r31, 0x06	; 6
    26d2:	80 83       	st	Z, r24
    26d4:	33 c0       	rjmp	.+102    	; 0x273c <_Z13uhreinstellenv+0x756>
				if(rtc.Stunden>=24){
					rtc.Stunden=0;
					pos=-1;
    26d6:	99 24       	eor	r9, r9
    26d8:	9a 94       	dec	r9
    26da:	30 c0       	rjmp	.+96     	; 0x273c <_Z13uhreinstellenv+0x756>
				break;
			case 1:
				rtc.Stunden+=Tastatur.ZahlenausTastatur();
				if(rtc.Stunden>=24){
					rtc.Stunden=0;
					pos=-1;
    26dc:	99 24       	eor	r9, r9
    26de:	9a 94       	dec	r9
    26e0:	2d c0       	rjmp	.+90     	; 0x273c <_Z13uhreinstellenv+0x756>
				break;
			case 2:
				rtc.Minuten=Tastatur.ZahlenausTastatur()*10;
				if(rtc.Minuten>=60){
					rtc.Minuten=0;
					pos=1;
    26e2:	99 24       	eor	r9, r9
    26e4:	93 94       	inc	r9
    26e6:	2a c0       	rjmp	.+84     	; 0x273c <_Z13uhreinstellenv+0x756>
				break;
			case 3:
				rtc.Minuten+=Tastatur.ZahlenausTastatur();
				if(rtc.Minuten>=60){
					rtc.Minuten=0;
					pos=1;
    26e8:	99 24       	eor	r9, r9
    26ea:	93 94       	inc	r9
    26ec:	27 c0       	rjmp	.+78     	; 0x273c <_Z13uhreinstellenv+0x756>
				break;
			case 4:
				rtc.Tag=Tastatur.ZahlenausTastatur()*10;
				if(rtc.Tag>=32){
					rtc.Tag=0;
					pos=3;
    26ee:	0f 2e       	mov	r0, r31
    26f0:	f3 e0       	ldi	r31, 0x03	; 3
    26f2:	9f 2e       	mov	r9, r31
    26f4:	f0 2d       	mov	r31, r0
    26f6:	22 c0       	rjmp	.+68     	; 0x273c <_Z13uhreinstellenv+0x756>
				break;
			case 5:
				rtc.Tag+=Tastatur.ZahlenausTastatur();
				if(rtc.Tag>=32){
					rtc.Tag=0;
					pos=3;
    26f8:	0f 2e       	mov	r0, r31
    26fa:	f3 e0       	ldi	r31, 0x03	; 3
    26fc:	9f 2e       	mov	r9, r31
    26fe:	f0 2d       	mov	r31, r0
    2700:	1d c0       	rjmp	.+58     	; 0x273c <_Z13uhreinstellenv+0x756>
				break;
			case 6:
				rtc.Monat=Tastatur.ZahlenausTastatur()*10;
				if(rtc.Monat>=13){
					rtc.Monat=0;
					pos=5;
    2702:	0f 2e       	mov	r0, r31
    2704:	f5 e0       	ldi	r31, 0x05	; 5
    2706:	9f 2e       	mov	r9, r31
    2708:	f0 2d       	mov	r31, r0
    270a:	18 c0       	rjmp	.+48     	; 0x273c <_Z13uhreinstellenv+0x756>
				}
				if(rtc.Monat==4||rtc.Monat==6||rtc.Monat==9||rtc.Monat==11){
					if(rtc.Tag>=31){
						rtc.Tag=0;
						rtc.Monat=0;
						pos=3;
    270c:	0f 2e       	mov	r0, r31
    270e:	f3 e0       	ldi	r31, 0x03	; 3
    2710:	9f 2e       	mov	r9, r31
    2712:	f0 2d       	mov	r31, r0
    2714:	13 c0       	rjmp	.+38     	; 0x273c <_Z13uhreinstellenv+0x756>
				}
				else if(rtc.Monat==2){
					if(rtc.Tag>=30){
						rtc.Tag=0;
						rtc.Monat=0;
						pos=3;
    2716:	0f 2e       	mov	r0, r31
    2718:	f3 e0       	ldi	r31, 0x03	; 3
    271a:	9f 2e       	mov	r9, r31
    271c:	f0 2d       	mov	r31, r0
    271e:	0e c0       	rjmp	.+28     	; 0x273c <_Z13uhreinstellenv+0x756>
				break;
			case 8:
				rtc.Jahr=Tastatur.ZahlenausTastatur()*10;
				if(rtc.Jahr>=50){
					rtc.Jahr=0;
					pos=7;
    2720:	0f 2e       	mov	r0, r31
    2722:	f7 e0       	ldi	r31, 0x07	; 7
    2724:	9f 2e       	mov	r9, r31
    2726:	f0 2d       	mov	r31, r0
    2728:	09 c0       	rjmp	.+18     	; 0x273c <_Z13uhreinstellenv+0x756>
				if(rtc.Monat==2){
					if(rtc.Jahr%4==0){
						rtc.Tag=0;
						rtc.Monat=0;
						rtc.Jahr=0;
						pos=3;
    272a:	0f 2e       	mov	r0, r31
    272c:	f3 e0       	ldi	r31, 0x03	; 3
    272e:	9f 2e       	mov	r9, r31
    2730:	f0 2d       	mov	r31, r0
    2732:	04 c0       	rjmp	.+8      	; 0x273c <_Z13uhreinstellenv+0x756>
					else{
						if(rtc.Tag>=29){
							rtc.Tag=0;
							rtc.Monat=0;
							rtc.Jahr=0;
							pos=3;
    2734:	0f 2e       	mov	r0, r31
    2736:	f3 e0       	ldi	r31, 0x03	; 3
    2738:	9f 2e       	mov	r9, r31
    273a:	f0 2d       	mov	r31, r0
				break;
			default:
				pos++;
				break;
		}
		pos++;
    273c:	93 94       	inc	r9
    273e:	92 cc       	rjmp	.-1756   	; 0x2064 <_Z13uhreinstellenv+0x7e>
	
	rtc.Sekunden		= 0;
	rtc.HundSekunden	= 0;
	oled.clearFrame();
	rtc.RTCstart();
}
    2740:	66 96       	adiw	r28, 0x16	; 22
    2742:	0f b6       	in	r0, 0x3f	; 63
    2744:	f8 94       	cli
    2746:	de bf       	out	0x3e, r29	; 62
    2748:	0f be       	out	0x3f, r0	; 63
    274a:	cd bf       	out	0x3d, r28	; 61
    274c:	df 91       	pop	r29
    274e:	cf 91       	pop	r28
    2750:	1f 91       	pop	r17
    2752:	0f 91       	pop	r16
    2754:	ff 90       	pop	r15
    2756:	ef 90       	pop	r14
    2758:	df 90       	pop	r13
    275a:	cf 90       	pop	r12
    275c:	bf 90       	pop	r11
    275e:	af 90       	pop	r10
    2760:	9f 90       	pop	r9
    2762:	8f 90       	pop	r8
    2764:	7f 90       	pop	r7
    2766:	6f 90       	pop	r6
    2768:	5f 90       	pop	r5
    276a:	4f 90       	pop	r4
    276c:	3f 90       	pop	r3
    276e:	2f 90       	pop	r2
    2770:	08 95       	ret

00002772 <__vector_9>:
uint16_t anzeige;	//Flagregister fuer die Anziegenschaltung
uint8_t pos;		//Handler fuer die Einganbe von Zahlen
//Ausgelagerte Sammlung der einzelnen Seitenlayouts
#include "Seiten.h"

ISR(TIMER2_OVF_vect){	//Vektor fuer die RTC
    2772:	1f 92       	push	r1
    2774:	0f 92       	push	r0
    2776:	0f b6       	in	r0, 0x3f	; 63
    2778:	0f 92       	push	r0
    277a:	11 24       	eor	r1, r1
    277c:	8f 93       	push	r24
    277e:	ef 93       	push	r30
    2780:	ff 93       	push	r31
	TCNT2=TIMER2RTCTIME;
    2782:	80 e7       	ldi	r24, 0x70	; 112
    2784:	80 93 b2 00 	sts	0x00B2, r24
	rtc.HundSekunden++;
    2788:	e2 ed       	ldi	r30, 0xD2	; 210
    278a:	f6 e0       	ldi	r31, 0x06	; 6
    278c:	80 81       	ld	r24, Z
    278e:	8f 5f       	subi	r24, 0xFF	; 255
    2790:	80 83       	st	Z, r24
	rtc.interupts|= (1<<hundinterupt);
    2792:	e6 ed       	ldi	r30, 0xD6	; 214
    2794:	f6 e0       	ldi	r31, 0x06	; 6
    2796:	80 81       	ld	r24, Z
    2798:	81 60       	ori	r24, 0x01	; 1
    279a:	80 83       	st	Z, r24
}
    279c:	ff 91       	pop	r31
    279e:	ef 91       	pop	r30
    27a0:	8f 91       	pop	r24
    27a2:	0f 90       	pop	r0
    27a4:	0f be       	out	0x3f, r0	; 63
    27a6:	0f 90       	pop	r0
    27a8:	1f 90       	pop	r1
    27aa:	18 95       	reti

000027ac <_Z15initialisierungv>:
    }
}

void initialisierung(){
	//nullen der Flagregister
	rtc.interupts=0;
    27ac:	10 92 d6 06 	sts	0x06D6, r1
	anzeige=0;
    27b0:	10 92 a0 02 	sts	0x02A0, r1
    27b4:	10 92 9f 02 	sts	0x029F, r1
	pos=0;
    27b8:	10 92 9e 02 	sts	0x029E, r1
	//Ausgaenge und Eingaenge einstellen
	DDRD = (1<<PIND0) | (1<<PIND1) | (1<<PIND2) | (1<<PIND3);	//Pins zur Ausgabe
    27bc:	8f e0       	ldi	r24, 0x0F	; 15
    27be:	8a b9       	out	0x0a, r24	; 10
	DDRD &= ~((1<<PIND4) | (1<<PIND5) | (1<<PIND6));			//Restliche Pins als Eingaenge schalten
    27c0:	8a b1       	in	r24, 0x0a	; 10
    27c2:	8f 78       	andi	r24, 0x8F	; 143
    27c4:	8a b9       	out	0x0a, r24	; 10
	//I2C Interface
	//twi_init();
	//Display
	oled.InitializeDisplay();
    27c6:	86 ea       	ldi	r24, 0xA6	; 166
    27c8:	92 e0       	ldi	r25, 0x02	; 2
    27ca:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <_ZN7Display17InitializeDisplayEv>
	//initialisierung wird im konstruktor vorgenommen
	oled.clearFrame();
    27ce:	86 ea       	ldi	r24, 0xA6	; 166
    27d0:	92 e0       	ldi	r25, 0x02	; 2
    27d2:	0e 94 b9 02 	call	0x572	; 0x572 <_ZN7Display10clearFrameEv>
	//HMC5883L initialisieren
	//kompass.initialize_HMC5883L();
	//initialisierung wird im Konstruktor erledigt
	
	//ADC Initialisieren auf CH0
	ADMUX = (1<<REFS0);
    27d6:	80 e4       	ldi	r24, 0x40	; 64
    27d8:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA = (1<<ADPS1) | (1<<ADPS0);
    27dc:	ea e7       	ldi	r30, 0x7A	; 122
    27de:	f0 e0       	ldi	r31, 0x00	; 0
    27e0:	83 e0       	ldi	r24, 0x03	; 3
    27e2:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADEN);
    27e4:	80 81       	ld	r24, Z
    27e6:	80 68       	ori	r24, 0x80	; 128
    27e8:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);
    27ea:	80 81       	ld	r24, Z
    27ec:	80 64       	ori	r24, 0x40	; 64
    27ee:	80 83       	st	Z, r24
	while (ADCSRA & (1<<ADSC) ) {
    27f0:	80 81       	ld	r24, Z
    27f2:	86 fd       	sbrc	r24, 6
    27f4:	fd cf       	rjmp	.-6      	; 0x27f0 <_Z15initialisierungv+0x44>
	}
	(void) ADCW;
    27f6:	80 91 78 00 	lds	r24, 0x0078
    27fa:	90 91 79 00 	lds	r25, 0x0079
	//Wilkommensanzeige
	willkommenpage();
    27fe:	0e 94 50 08 	call	0x10a0	; 0x10a0 <_Z14willkommenpagev>
	//Uhreinstellungen
	//uhreinstellen();
	//*************************************************
	//Nur Test, damit es schneller geht beim Start
	rtc.dummyeinst();
    2802:	87 ec       	ldi	r24, 0xC7	; 199
    2804:	96 e0       	ldi	r25, 0x06	; 6
    2806:	0e 94 a7 1a 	call	0x354e	; 0x354e <_ZN3RTC10dummyeinstEv>
	//*********************************
	rtc.RTCstart();
    280a:	87 ec       	ldi	r24, 0xC7	; 199
    280c:	96 e0       	ldi	r25, 0x06	; 6
    280e:	0e 94 b3 1a 	call	0x3566	; 0x3566 <_ZN3RTC8RTCstartEv>
	//ausgabe starten
	anzeige|=(1<<Uhrflag);
    2812:	80 91 9f 02 	lds	r24, 0x029F
    2816:	90 91 a0 02 	lds	r25, 0x02A0
    281a:	81 60       	ori	r24, 0x01	; 1
    281c:	90 93 a0 02 	sts	0x02A0, r25
    2820:	80 93 9f 02 	sts	0x029F, r24
	sei();
    2824:	78 94       	sei
    2826:	08 95       	ret

00002828 <_Z19maininterupthandlerv>:
}

void maininterupthandler(){
	//interupt dierekt aus der rtc
	if((rtc.interupts & (1<<hundinterupt))){
    2828:	80 91 d6 06 	lds	r24, 0x06D6
    282c:	80 ff       	sbrs	r24, 0
    282e:	09 c0       	rjmp	.+18     	; 0x2842 <_Z19maininterupthandlerv+0x1a>
		rtc.zeit();
    2830:	87 ec       	ldi	r24, 0xC7	; 199
    2832:	96 e0       	ldi	r25, 0x06	; 6
    2834:	0e 94 4d 1a 	call	0x349a	; 0x349a <_ZN3RTC4zeitEv>
		rtc.interupts&=~(1<<hundinterupt);
    2838:	e6 ed       	ldi	r30, 0xD6	; 214
    283a:	f6 e0       	ldi	r31, 0x06	; 6
    283c:	80 81       	ld	r24, Z
    283e:	8e 7f       	andi	r24, 0xFE	; 254
    2840:	80 83       	st	Z, r24
    2842:	08 95       	ret

00002844 <_Z14anzeigehandlerv>:
	}
}

void anzeigehandler(){
	//Handler fuer 1Hz Flag
	if ((rtc.interupts & (1<<sekundeninterupt)))
    2844:	80 91 d6 06 	lds	r24, 0x06D6
    2848:	81 ff       	sbrs	r24, 1
    284a:	cd c0       	rjmp	.+410    	; 0x29e6 <_Z14anzeigehandlerv+0x1a2>
	{
		//Handler fuer die Anzeige der Seiten
		//Die einzelnen Funktionen beschreiben nur den Framebuffer und nicht dierekt das Display
		if ((anzeige&(1<<menueflag)) && (anzeige&(1<<Uhrflag)))
    284c:	80 91 9f 02 	lds	r24, 0x029F
    2850:	90 91 a0 02 	lds	r25, 0x02A0
    2854:	9c 01       	movw	r18, r24
    2856:	21 70       	andi	r18, 0x01	; 1
    2858:	30 72       	andi	r19, 0x20	; 32
    285a:	21 30       	cpi	r18, 0x01	; 1
    285c:	30 42       	sbci	r19, 0x20	; 32
    285e:	61 f4       	brne	.+24     	; 0x2878 <_Z14anzeigehandlerv+0x34>
		{
			menue_uhr();
    2860:	0e 94 77 0b 	call	0x16ee	; 0x16ee <_Z9menue_uhrv>
			anzeige|=(1<<refreshdisplay);
    2864:	80 91 9f 02 	lds	r24, 0x029F
    2868:	90 91 a0 02 	lds	r25, 0x02A0
    286c:	90 68       	ori	r25, 0x80	; 128
    286e:	90 93 a0 02 	sts	0x02A0, r25
    2872:	80 93 9f 02 	sts	0x029F, r24
    2876:	b2 c0       	rjmp	.+356    	; 0x29dc <_Z14anzeigehandlerv+0x198>
    2878:	9c 01       	movw	r18, r24
    287a:	28 70       	andi	r18, 0x08	; 8
    287c:	30 72       	andi	r19, 0x20	; 32
		}
		else if ((anzeige&(1<<menueflag)) && (anzeige&(1<<Einstellungsflag)))
    287e:	28 30       	cpi	r18, 0x08	; 8
    2880:	30 42       	sbci	r19, 0x20	; 32
    2882:	61 f4       	brne	.+24     	; 0x289c <_Z14anzeigehandlerv+0x58>
		{
			menue_einst();
    2884:	0e 94 09 0b 	call	0x1612	; 0x1612 <_Z11menue_einstv>
			anzeige|=(1<<refreshdisplay);
    2888:	80 91 9f 02 	lds	r24, 0x029F
    288c:	90 91 a0 02 	lds	r25, 0x02A0
    2890:	90 68       	ori	r25, 0x80	; 128
    2892:	90 93 a0 02 	sts	0x02A0, r25
    2896:	80 93 9f 02 	sts	0x029F, r24
    289a:	a0 c0       	rjmp	.+320    	; 0x29dc <_Z14anzeigehandlerv+0x198>
		}
		else if ((anzeige&(1<<menueflag)))
    289c:	95 ff       	sbrs	r25, 5
    289e:	0c c0       	rjmp	.+24     	; 0x28b8 <_Z14anzeigehandlerv+0x74>
		{
			menue_haupt();
    28a0:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <_Z11menue_hauptv>
			anzeige|=(1<<refreshdisplay);
    28a4:	80 91 9f 02 	lds	r24, 0x029F
    28a8:	90 91 a0 02 	lds	r25, 0x02A0
    28ac:	90 68       	ori	r25, 0x80	; 128
    28ae:	90 93 a0 02 	sts	0x02A0, r25
    28b2:	80 93 9f 02 	sts	0x029F, r24
    28b6:	92 c0       	rjmp	.+292    	; 0x29dc <_Z14anzeigehandlerv+0x198>
		}
		else if ((anzeige&(1<<Kompasgaineinstellenflag)))
    28b8:	85 ff       	sbrs	r24, 5
    28ba:	0c c0       	rjmp	.+24     	; 0x28d4 <_Z14anzeigehandlerv+0x90>
		{
			Gaineinstellen();
    28bc:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <_Z14Gaineinstellenv>
			anzeige|=(1<<refreshdisplay);
    28c0:	80 91 9f 02 	lds	r24, 0x029F
    28c4:	90 91 a0 02 	lds	r25, 0x02A0
    28c8:	90 68       	ori	r25, 0x80	; 128
    28ca:	90 93 a0 02 	sts	0x02A0, r25
    28ce:	80 93 9f 02 	sts	0x029F, r24
    28d2:	84 c0       	rjmp	.+264    	; 0x29dc <_Z14anzeigehandlerv+0x198>
		}
		else if ((anzeige&(1<<Uhrflag)))
    28d4:	80 ff       	sbrs	r24, 0
    28d6:	0c c0       	rjmp	.+24     	; 0x28f0 <_Z14anzeigehandlerv+0xac>
		{
			uhranzeigen();
    28d8:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <_Z11uhranzeigenv>
			anzeige|=(1<<refreshdisplay);
    28dc:	80 91 9f 02 	lds	r24, 0x029F
    28e0:	90 91 a0 02 	lds	r25, 0x02A0
    28e4:	90 68       	ori	r25, 0x80	; 128
    28e6:	90 93 a0 02 	sts	0x02A0, r25
    28ea:	80 93 9f 02 	sts	0x029F, r24
    28ee:	76 c0       	rjmp	.+236    	; 0x29dc <_Z14anzeigehandlerv+0x198>
		}
		else if ((anzeige&(1<<Kompasflag)))
    28f0:	82 ff       	sbrs	r24, 2
    28f2:	10 c0       	rjmp	.+32     	; 0x2914 <_Z14anzeigehandlerv+0xd0>
		{
			anzeige_kompass(kompass.angle());
    28f4:	87 ed       	ldi	r24, 0xD7	; 215
    28f6:	96 e0       	ldi	r25, 0x06	; 6
    28f8:	0e 94 9d 19 	call	0x333a	; 0x333a <_ZN7Kompass5angleEv>
    28fc:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <_Z15anzeige_kompassd>
			anzeige|=(1<<refreshdisplay);
    2900:	80 91 9f 02 	lds	r24, 0x029F
    2904:	90 91 a0 02 	lds	r25, 0x02A0
    2908:	90 68       	ori	r25, 0x80	; 128
    290a:	90 93 a0 02 	sts	0x02A0, r25
    290e:	80 93 9f 02 	sts	0x029F, r24
    2912:	64 c0       	rjmp	.+200    	; 0x29dc <_Z14anzeigehandlerv+0x198>
		}
		else if ((anzeige&(1<<Fahradflag)))
    2914:	81 ff       	sbrs	r24, 1
    2916:	16 c0       	rjmp	.+44     	; 0x2944 <_Z14anzeigehandlerv+0x100>
		{
			fahradschirm(12.3,kompass.angle());
    2918:	87 ed       	ldi	r24, 0xD7	; 215
    291a:	96 e0       	ldi	r25, 0x06	; 6
    291c:	0e 94 9d 19 	call	0x333a	; 0x333a <_ZN7Kompass5angleEv>
    2920:	9b 01       	movw	r18, r22
    2922:	ac 01       	movw	r20, r24
    2924:	6d ec       	ldi	r22, 0xCD	; 205
    2926:	7c ec       	ldi	r23, 0xCC	; 204
    2928:	84 e4       	ldi	r24, 0x44	; 68
    292a:	91 e4       	ldi	r25, 0x41	; 65
    292c:	0e 94 ae 0c 	call	0x195c	; 0x195c <_Z12fahradschirmdd>
			anzeige|=(1<<refreshdisplay);
    2930:	80 91 9f 02 	lds	r24, 0x029F
    2934:	90 91 a0 02 	lds	r25, 0x02A0
    2938:	90 68       	ori	r25, 0x80	; 128
    293a:	90 93 a0 02 	sts	0x02A0, r25
    293e:	80 93 9f 02 	sts	0x029F, r24
    2942:	4c c0       	rjmp	.+152    	; 0x29dc <_Z14anzeigehandlerv+0x198>
    2944:	9c 01       	movw	r18, r24
    2946:	28 74       	andi	r18, 0x48	; 72
    2948:	33 27       	eor	r19, r19
		}
		else if ((anzeige&(1<<Einstellungsflag)) && (anzeige&(1<<Timerflag)))
    294a:	28 34       	cpi	r18, 0x48	; 72
    294c:	31 05       	cpc	r19, r1
    294e:	61 f4       	brne	.+24     	; 0x2968 <_Z14anzeigehandlerv+0x124>
		{
			timerseite();
    2950:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <_Z10timerseitev>
			anzeige|=(1<<refreshdisplay);
    2954:	80 91 9f 02 	lds	r24, 0x029F
    2958:	90 91 a0 02 	lds	r25, 0x02A0
    295c:	90 68       	ori	r25, 0x80	; 128
    295e:	90 93 a0 02 	sts	0x02A0, r25
    2962:	80 93 9f 02 	sts	0x029F, r24
    2966:	3a c0       	rjmp	.+116    	; 0x29dc <_Z14anzeigehandlerv+0x198>
		}
		else if ((anzeige&(1<<Stoppuhrflag)))
    2968:	87 ff       	sbrs	r24, 7
    296a:	17 c0       	rjmp	.+46     	; 0x299a <_Z14anzeigehandlerv+0x156>
		{
			if ((anzeige&(1<<Einstellungsflag)))
    296c:	83 ff       	sbrs	r24, 3
    296e:	09 c0       	rjmp	.+18     	; 0x2982 <_Z14anzeigehandlerv+0x13e>
			{
				stoppuhr.Sekunden++;
    2970:	e1 eb       	ldi	r30, 0xB1	; 177
    2972:	f6 e0       	ldi	r31, 0x06	; 6
    2974:	80 81       	ld	r24, Z
    2976:	8f 5f       	subi	r24, 0xFF	; 255
    2978:	80 83       	st	Z, r24
				stoppuhr.zeit();
    297a:	87 ea       	ldi	r24, 0xA7	; 167
    297c:	96 e0       	ldi	r25, 0x06	; 6
    297e:	0e 94 4d 1a 	call	0x349a	; 0x349a <_ZN3RTC4zeitEv>
			}
			Stoppuhrseite();
    2982:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <_Z13Stoppuhrseitev>
			anzeige|=(1<<refreshdisplay);
    2986:	80 91 9f 02 	lds	r24, 0x029F
    298a:	90 91 a0 02 	lds	r25, 0x02A0
    298e:	90 68       	ori	r25, 0x80	; 128
    2990:	90 93 a0 02 	sts	0x02A0, r25
    2994:	80 93 9f 02 	sts	0x029F, r24
    2998:	21 c0       	rjmp	.+66     	; 0x29dc <_Z14anzeigehandlerv+0x198>
		}
		else if ((anzeige&(1<<Timerflag)))
    299a:	86 ff       	sbrs	r24, 6
    299c:	1f c0       	rjmp	.+62     	; 0x29dc <_Z14anzeigehandlerv+0x198>
		{
			zaehler.Sekunden--;
    299e:	e1 ec       	ldi	r30, 0xC1	; 193
    29a0:	f6 e0       	ldi	r31, 0x06	; 6
    29a2:	80 81       	ld	r24, Z
    29a4:	81 50       	subi	r24, 0x01	; 1
    29a6:	80 83       	st	Z, r24
			if(zaehler.timer()){
    29a8:	87 eb       	ldi	r24, 0xB7	; 183
    29aa:	96 e0       	ldi	r25, 0x06	; 6
    29ac:	0e 94 c7 1a 	call	0x358e	; 0x358e <_ZN3RTC5timerEv>
    29b0:	88 23       	and	r24, r24
    29b2:	49 f0       	breq	.+18     	; 0x29c6 <_Z14anzeigehandlerv+0x182>
				anzeige|=(1<<blinkflag);
    29b4:	80 91 9f 02 	lds	r24, 0x029F
    29b8:	90 91 a0 02 	lds	r25, 0x02A0
    29bc:	90 64       	ori	r25, 0x40	; 64
    29be:	90 93 a0 02 	sts	0x02A0, r25
    29c2:	80 93 9f 02 	sts	0x029F, r24
			}
			timerseite();
    29c6:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <_Z10timerseitev>
			anzeige|=(1<<refreshdisplay);
    29ca:	80 91 9f 02 	lds	r24, 0x029F
    29ce:	90 91 a0 02 	lds	r25, 0x02A0
    29d2:	90 68       	ori	r25, 0x80	; 128
    29d4:	90 93 a0 02 	sts	0x02A0, r25
    29d8:	80 93 9f 02 	sts	0x029F, r24
		}
		rtc.interupts&=~(1<<sekundeninterupt);
    29dc:	e6 ed       	ldi	r30, 0xD6	; 214
    29de:	f6 e0       	ldi	r31, 0x06	; 6
    29e0:	80 81       	ld	r24, Z
    29e2:	8d 7f       	andi	r24, 0xFD	; 253
    29e4:	80 83       	st	Z, r24
	}
	//neuen Framebuffer an das Dispay senden
	if ((anzeige&(1<<refreshdisplay)))
    29e6:	80 91 9f 02 	lds	r24, 0x029F
    29ea:	90 91 a0 02 	lds	r25, 0x02A0
    29ee:	99 23       	and	r25, r25
    29f0:	d4 f4       	brge	.+52     	; 0x2a26 <_Z14anzeigehandlerv+0x1e2>
	{
		oled.sendFrame();
    29f2:	86 ea       	ldi	r24, 0xA6	; 166
    29f4:	92 e0       	ldi	r25, 0x02	; 2
    29f6:	0e 94 5f 03 	call	0x6be	; 0x6be <_ZN7Display9sendFrameEv>
		if ((anzeige&(1<<blinkflag)))
    29fa:	80 91 9f 02 	lds	r24, 0x029F
    29fe:	90 91 a0 02 	lds	r25, 0x02A0
    2a02:	96 ff       	sbrs	r25, 6
    2a04:	07 c0       	rjmp	.+14     	; 0x2a14 <_Z14anzeigehandlerv+0x1d0>
		{
			oled.invert(rtc.Sekunden%2);
    2a06:	60 91 d1 06 	lds	r22, 0x06D1
    2a0a:	61 70       	andi	r22, 0x01	; 1
    2a0c:	86 ea       	ldi	r24, 0xA6	; 166
    2a0e:	92 e0       	ldi	r25, 0x02	; 2
    2a10:	0e 94 55 03 	call	0x6aa	; 0x6aa <_ZN7Display6invertEh>
		}
		anzeige&=~(1<<refreshdisplay);
    2a14:	80 91 9f 02 	lds	r24, 0x029F
    2a18:	90 91 a0 02 	lds	r25, 0x02A0
    2a1c:	9f 77       	andi	r25, 0x7F	; 127
    2a1e:	90 93 a0 02 	sts	0x02A0, r25
    2a22:	80 93 9f 02 	sts	0x029F, r24
    2a26:	08 95       	ret

00002a28 <_Z14eingabehandlerh>:
	}
}

void eingabehandler(uint8_t taste){
	if (taste!='A')
    2a28:	81 34       	cpi	r24, 0x41	; 65
    2a2a:	09 f4       	brne	.+2      	; 0x2a2e <_Z14eingabehandlerh+0x6>
    2a2c:	4d c2       	rjmp	.+1178   	; 0x2ec8 <_Z14eingabehandlerh+0x4a0>
	{
		if (anzeige==255)
    2a2e:	20 91 9f 02 	lds	r18, 0x029F
    2a32:	30 91 a0 02 	lds	r19, 0x02A0
    2a36:	2f 3f       	cpi	r18, 0xFF	; 255
    2a38:	31 05       	cpc	r19, r1
    2a3a:	61 f4       	brne	.+24     	; 0x2a54 <_Z14eingabehandlerh+0x2c>
		{
			oled.ssd1306_command(SSD1306_DISPLAYON);
    2a3c:	6f ea       	ldi	r22, 0xAF	; 175
    2a3e:	86 ea       	ldi	r24, 0xA6	; 166
    2a40:	92 e0       	ldi	r25, 0x02	; 2
    2a42:	0e 94 c4 02 	call	0x588	; 0x588 <_ZN7Display15ssd1306_commandEh>
			//entweder display aus oder das Menue starten
			anzeige=(1<<menueflag);
    2a46:	80 e0       	ldi	r24, 0x00	; 0
    2a48:	90 e2       	ldi	r25, 0x20	; 32
    2a4a:	90 93 a0 02 	sts	0x02A0, r25
    2a4e:	80 93 9f 02 	sts	0x029F, r24
    2a52:	08 95       	ret
    2a54:	a9 01       	movw	r20, r18
    2a56:	41 70       	andi	r20, 0x01	; 1
    2a58:	50 72       	andi	r21, 0x20	; 32
		}
		//gleicher Handler wie oben, aber hier speziell fuer die Bearbeitung von Tastereingaben mit switch fuer die Tasten
		//es sind einfach so viele Tasten moeglich 
		else if ((anzeige&(1<<menueflag)) && (anzeige&(1<<Uhrflag)))	//Menue der Uhr
    2a5a:	41 30       	cpi	r20, 0x01	; 1
    2a5c:	50 42       	sbci	r21, 0x20	; 32
    2a5e:	09 f0       	breq	.+2      	; 0x2a62 <_Z14eingabehandlerh+0x3a>
    2a60:	45 c0       	rjmp	.+138    	; 0x2aec <_Z14eingabehandlerh+0xc4>
		{	
			anzeige&=~((1<<menueflag)|(1<<Uhrflag));
    2a62:	2e 7f       	andi	r18, 0xFE	; 254
    2a64:	3f 7d       	andi	r19, 0xDF	; 223
    2a66:	30 93 a0 02 	sts	0x02A0, r19
    2a6a:	20 93 9f 02 	sts	0x029F, r18
			switch (taste)
    2a6e:	82 33       	cpi	r24, 0x32	; 50
    2a70:	79 f0       	breq	.+30     	; 0x2a90 <_Z14eingabehandlerh+0x68>
    2a72:	18 f4       	brcc	.+6      	; 0x2a7a <_Z14eingabehandlerh+0x52>
    2a74:	81 33       	cpi	r24, 0x31	; 49
    2a76:	31 f0       	breq	.+12     	; 0x2a84 <_Z14eingabehandlerh+0x5c>
    2a78:	32 c0       	rjmp	.+100    	; 0x2ade <_Z14eingabehandlerh+0xb6>
    2a7a:	83 33       	cpi	r24, 0x33	; 51
    2a7c:	b1 f0       	breq	.+44     	; 0x2aaa <_Z14eingabehandlerh+0x82>
    2a7e:	84 33       	cpi	r24, 0x34	; 52
    2a80:	01 f1       	breq	.+64     	; 0x2ac2 <_Z14eingabehandlerh+0x9a>
    2a82:	2d c0       	rjmp	.+90     	; 0x2ade <_Z14eingabehandlerh+0xb6>
			{
				case '1':
					//Wechseln auf die Uhr
					anzeige|=(1<<Uhrflag);
    2a84:	21 60       	ori	r18, 0x01	; 1
    2a86:	30 93 a0 02 	sts	0x02A0, r19
    2a8a:	20 93 9f 02 	sts	0x029F, r18
					break;
    2a8e:	08 95       	ret
				
				case '2':
					//starten der Stoppuhr APP
					stoppuhr.Sekunden=0;
    2a90:	10 92 b1 06 	sts	0x06B1, r1
					stoppuhr.Minuten=0;
    2a94:	10 92 b0 06 	sts	0x06B0, r1
					stoppuhr.Stunden=0;
    2a98:	10 92 af 06 	sts	0x06AF, r1
					anzeige|=(1<<refreshdisplay) | (1<<Stoppuhrflag);
    2a9c:	20 68       	ori	r18, 0x80	; 128
    2a9e:	30 68       	ori	r19, 0x80	; 128
    2aa0:	30 93 a0 02 	sts	0x02A0, r19
    2aa4:	20 93 9f 02 	sts	0x029F, r18
					break;
    2aa8:	08 95       	ret
				
				case '3':
					//Starten der Timer APP
					zaehler.Sekunden=0;
    2aaa:	10 92 c1 06 	sts	0x06C1, r1
					zaehler.Minuten=0;
    2aae:	10 92 c0 06 	sts	0x06C0, r1
					zaehler.Stunden=0;
    2ab2:	10 92 bf 06 	sts	0x06BF, r1
					
					anzeige|=(1<<Timerflag) | (1<<Einstellungsflag);
    2ab6:	28 64       	ori	r18, 0x48	; 72
    2ab8:	30 93 a0 02 	sts	0x02A0, r19
    2abc:	20 93 9f 02 	sts	0x029F, r18
					break;
    2ac0:	08 95       	ret
				
				case '4':
					//Starten der Alarmapp, momentan nicht implementiert
					oled.clearFrame();
    2ac2:	86 ea       	ldi	r24, 0xA6	; 166
    2ac4:	92 e0       	ldi	r25, 0x02	; 2
    2ac6:	0e 94 b9 02 	call	0x572	; 0x572 <_ZN7Display10clearFrameEv>
					anzeige|=(1<<refreshdisplay);
    2aca:	80 91 9f 02 	lds	r24, 0x029F
    2ace:	90 91 a0 02 	lds	r25, 0x02A0
    2ad2:	90 68       	ori	r25, 0x80	; 128
    2ad4:	90 93 a0 02 	sts	0x02A0, r25
    2ad8:	80 93 9f 02 	sts	0x029F, r24
					break;
    2adc:	08 95       	ret
				
				default:
					//menueflag erneu setzen
					anzeige|=(1<<menueflag)|(1<<Uhrflag);
    2ade:	21 60       	ori	r18, 0x01	; 1
    2ae0:	30 62       	ori	r19, 0x20	; 32
    2ae2:	30 93 a0 02 	sts	0x02A0, r19
    2ae6:	20 93 9f 02 	sts	0x029F, r18
					break;
    2aea:	d5 c1       	rjmp	.+938    	; 0x2e96 <_Z14eingabehandlerh+0x46e>
    2aec:	a9 01       	movw	r20, r18
    2aee:	48 70       	andi	r20, 0x08	; 8
    2af0:	50 72       	andi	r21, 0x20	; 32
			}
		}
		else if ((anzeige&(1<<menueflag)) && (anzeige&(1<<Einstellungsflag)))	//Menue der Einstellungen
    2af2:	48 30       	cpi	r20, 0x08	; 8
    2af4:	50 42       	sbci	r21, 0x20	; 32
    2af6:	99 f5       	brne	.+102    	; 0x2b5e <_Z14eingabehandlerh+0x136>
		{
			anzeige&=~((1<<menueflag)|(1<<Einstellungsflag));
    2af8:	27 7f       	andi	r18, 0xF7	; 247
    2afa:	3f 7d       	andi	r19, 0xDF	; 223
    2afc:	30 93 a0 02 	sts	0x02A0, r19
    2b00:	20 93 9f 02 	sts	0x029F, r18
			switch (taste)
    2b04:	82 33       	cpi	r24, 0x32	; 50
    2b06:	91 f0       	breq	.+36     	; 0x2b2c <_Z14eingabehandlerh+0x104>
    2b08:	83 33       	cpi	r24, 0x33	; 51
    2b0a:	b1 f0       	breq	.+44     	; 0x2b38 <_Z14eingabehandlerh+0x110>
    2b0c:	81 33       	cpi	r24, 0x31	; 49
    2b0e:	01 f5       	brne	.+64     	; 0x2b50 <_Z14eingabehandlerh+0x128>
			{
				case '1':
					//zuruecksetzen der Kalibrierung, da passive Kallibrierung eingebaut
					kompass.kallibrierung_ruecksetzen();
    2b10:	87 ed       	ldi	r24, 0xD7	; 215
    2b12:	96 e0       	ldi	r25, 0x06	; 6
    2b14:	0e 94 15 1a 	call	0x342a	; 0x342a <_ZN7Kompass25kallibrierung_ruecksetzenEv>
					anzeige|=(1<<Kompasflag);
    2b18:	80 91 9f 02 	lds	r24, 0x029F
    2b1c:	90 91 a0 02 	lds	r25, 0x02A0
    2b20:	84 60       	ori	r24, 0x04	; 4
    2b22:	90 93 a0 02 	sts	0x02A0, r25
    2b26:	80 93 9f 02 	sts	0x029F, r24
					break;
    2b2a:	08 95       	ret
				case '2':
					//Gaineinstellung fuer den Kompass
					anzeige|=(1<<Kompasgaineinstellenflag);
    2b2c:	20 62       	ori	r18, 0x20	; 32
    2b2e:	30 93 a0 02 	sts	0x02A0, r19
    2b32:	20 93 9f 02 	sts	0x029F, r18
					break;
    2b36:	08 95       	ret
				case '3':
					//dies ist eine der wenigen Funktinen, die die Handler Strucktur nicht anwenden, da sie die rtc anhaellt
					uhreinstellen();
    2b38:	0e 94 f3 0f 	call	0x1fe6	; 0x1fe6 <_Z13uhreinstellenv>
					anzeige|=(1<<Uhrflag);
    2b3c:	80 91 9f 02 	lds	r24, 0x029F
    2b40:	90 91 a0 02 	lds	r25, 0x02A0
    2b44:	81 60       	ori	r24, 0x01	; 1
    2b46:	90 93 a0 02 	sts	0x02A0, r25
    2b4a:	80 93 9f 02 	sts	0x029F, r24
					break;
    2b4e:	08 95       	ret
				default:
					//Menueflag neu setzten
					anzeige|=(1<<menueflag)|(1<<Einstellungsflag);
    2b50:	28 60       	ori	r18, 0x08	; 8
    2b52:	30 62       	ori	r19, 0x20	; 32
    2b54:	30 93 a0 02 	sts	0x02A0, r19
    2b58:	20 93 9f 02 	sts	0x029F, r18
					break;
    2b5c:	9c c1       	rjmp	.+824    	; 0x2e96 <_Z14eingabehandlerh+0x46e>
			}
		}
		else if ((anzeige&(1<<menueflag)))	//nur das grosse menue
    2b5e:	35 ff       	sbrs	r19, 5
    2b60:	4f c0       	rjmp	.+158    	; 0x2c00 <_Z14eingabehandlerh+0x1d8>
		{
			anzeige&=~(1<<menueflag);
    2b62:	3f 7d       	andi	r19, 0xDF	; 223
    2b64:	30 93 a0 02 	sts	0x02A0, r19
    2b68:	20 93 9f 02 	sts	0x029F, r18
			switch (taste)
    2b6c:	83 33       	cpi	r24, 0x33	; 51
    2b6e:	01 f1       	breq	.+64     	; 0x2bb0 <_Z14eingabehandlerh+0x188>
    2b70:	28 f4       	brcc	.+10     	; 0x2b7c <_Z14eingabehandlerh+0x154>
    2b72:	81 33       	cpi	r24, 0x31	; 49
    2b74:	49 f0       	breq	.+18     	; 0x2b88 <_Z14eingabehandlerh+0x160>
    2b76:	82 33       	cpi	r24, 0x32	; 50
    2b78:	69 f0       	breq	.+26     	; 0x2b94 <_Z14eingabehandlerh+0x16c>
    2b7a:	3c c0       	rjmp	.+120    	; 0x2bf4 <_Z14eingabehandlerh+0x1cc>
    2b7c:	85 33       	cpi	r24, 0x35	; 53
    2b7e:	29 f1       	breq	.+74     	; 0x2bca <_Z14eingabehandlerh+0x1a2>
    2b80:	e8 f0       	brcs	.+58     	; 0x2bbc <_Z14eingabehandlerh+0x194>
    2b82:	86 33       	cpi	r24, 0x36	; 54
    2b84:	49 f1       	breq	.+82     	; 0x2bd8 <_Z14eingabehandlerh+0x1b0>
    2b86:	36 c0       	rjmp	.+108    	; 0x2bf4 <_Z14eingabehandlerh+0x1cc>
			{
				case '1':
					anzeige|=(1<<Fahradflag);
    2b88:	22 60       	ori	r18, 0x02	; 2
    2b8a:	30 93 a0 02 	sts	0x02A0, r19
    2b8e:	20 93 9f 02 	sts	0x029F, r18
					break;
    2b92:	08 95       	ret
				
				case '2':
					//Taschenrechner starten
					//Monentan deaktiv, da Umstellung der Handler 
					//operation(Flieskommazahleingabe());
					oled.clearFrame();
    2b94:	86 ea       	ldi	r24, 0xA6	; 166
    2b96:	92 e0       	ldi	r25, 0x02	; 2
    2b98:	0e 94 b9 02 	call	0x572	; 0x572 <_ZN7Display10clearFrameEv>
					anzeige|=(1<<refreshdisplay);	
    2b9c:	80 91 9f 02 	lds	r24, 0x029F
    2ba0:	90 91 a0 02 	lds	r25, 0x02A0
    2ba4:	90 68       	ori	r25, 0x80	; 128
    2ba6:	90 93 a0 02 	sts	0x02A0, r25
    2baa:	80 93 9f 02 	sts	0x029F, r24
					break;
    2bae:	08 95       	ret
				
				case '3':
					anzeige|=(1<<Kompasflag);
    2bb0:	24 60       	ori	r18, 0x04	; 4
    2bb2:	30 93 a0 02 	sts	0x02A0, r19
    2bb6:	20 93 9f 02 	sts	0x029F, r18
					break;
    2bba:	08 95       	ret
				
				case '4':
					//Menue der Uhr
					anzeige|=(1<<menueflag) | (1<<Uhrflag);
    2bbc:	21 60       	ori	r18, 0x01	; 1
    2bbe:	30 62       	ori	r19, 0x20	; 32
    2bc0:	30 93 a0 02 	sts	0x02A0, r19
    2bc4:	20 93 9f 02 	sts	0x029F, r18
					break;
    2bc8:	08 95       	ret
				
				case '5':
					//menue der Einstellungen
					anzeige|=(1<<menueflag) | (1<<Einstellungsflag);
    2bca:	28 60       	ori	r18, 0x08	; 8
    2bcc:	30 62       	ori	r19, 0x20	; 32
    2bce:	30 93 a0 02 	sts	0x02A0, r19
    2bd2:	20 93 9f 02 	sts	0x029F, r18
					break;
    2bd6:	08 95       	ret
				
				case '6':
					//Display ausschalten
					//anzeige=255;
					oled.clearFrame();
    2bd8:	86 ea       	ldi	r24, 0xA6	; 166
    2bda:	92 e0       	ldi	r25, 0x02	; 2
    2bdc:	0e 94 b9 02 	call	0x572	; 0x572 <_ZN7Display10clearFrameEv>
					anzeige|=(1<<refreshdisplay);
    2be0:	80 91 9f 02 	lds	r24, 0x029F
    2be4:	90 91 a0 02 	lds	r25, 0x02A0
    2be8:	90 68       	ori	r25, 0x80	; 128
    2bea:	90 93 a0 02 	sts	0x02A0, r25
    2bee:	80 93 9f 02 	sts	0x029F, r24
					break;
    2bf2:	08 95       	ret
				
				default:
					//menueflag erneut setzen um abschalten zu verhindern
					anzeige|=(1<<menueflag);
    2bf4:	30 62       	ori	r19, 0x20	; 32
    2bf6:	30 93 a0 02 	sts	0x02A0, r19
    2bfa:	20 93 9f 02 	sts	0x029F, r18
					break;
    2bfe:	4b c1       	rjmp	.+662    	; 0x2e96 <_Z14eingabehandlerh+0x46e>
			}
		}
		else if ((anzeige&(1<<Kompasgaineinstellenflag)))
    2c00:	25 ff       	sbrs	r18, 5
    2c02:	51 c0       	rjmp	.+162    	; 0x2ca6 <_Z14eingabehandlerh+0x27e>
		{
			anzeige&=~(1<<Kompasgaineinstellenflag);
    2c04:	a9 01       	movw	r20, r18
    2c06:	4f 7d       	andi	r20, 0xDF	; 223
			anzeige|=(1<<Kompasflag);
    2c08:	44 60       	ori	r20, 0x04	; 4
    2c0a:	50 93 a0 02 	sts	0x02A0, r21
    2c0e:	40 93 9f 02 	sts	0x029F, r20
			switch (taste) {
    2c12:	48 2f       	mov	r20, r24
    2c14:	50 e0       	ldi	r21, 0x00	; 0
    2c16:	fa 01       	movw	r30, r20
    2c18:	f1 97       	sbiw	r30, 0x31	; 49
    2c1a:	e8 30       	cpi	r30, 0x08	; 8
    2c1c:	f1 05       	cpc	r31, r1
    2c1e:	e0 f5       	brcc	.+120    	; 0x2c98 <_Z14eingabehandlerh+0x270>
    2c20:	e2 5c       	subi	r30, 0xC2	; 194
    2c22:	ff 4f       	sbci	r31, 0xFF	; 255
    2c24:	0c 94 8c 21 	jmp	0x4318	; 0x4318 <__tablejump2__>
				case '1':
					kompass.HMC5883L_command(0x01,HMCGAIN1370);
    2c28:	40 e0       	ldi	r20, 0x00	; 0
    2c2a:	61 e0       	ldi	r22, 0x01	; 1
    2c2c:	87 ed       	ldi	r24, 0xD7	; 215
    2c2e:	96 e0       	ldi	r25, 0x06	; 6
    2c30:	0e 94 9a 18 	call	0x3134	; 0x3134 <_ZN7Kompass16HMC5883L_commandEhh>
					break;
    2c34:	08 95       	ret
				case '2':
					kompass.HMC5883L_command(0x01,HMCGAIN1090);
    2c36:	40 e2       	ldi	r20, 0x20	; 32
    2c38:	61 e0       	ldi	r22, 0x01	; 1
    2c3a:	87 ed       	ldi	r24, 0xD7	; 215
    2c3c:	96 e0       	ldi	r25, 0x06	; 6
    2c3e:	0e 94 9a 18 	call	0x3134	; 0x3134 <_ZN7Kompass16HMC5883L_commandEhh>
					break;
    2c42:	08 95       	ret
				case '3':
					kompass.HMC5883L_command(0x01,HMCGAIN820);
    2c44:	40 e4       	ldi	r20, 0x40	; 64
    2c46:	61 e0       	ldi	r22, 0x01	; 1
    2c48:	87 ed       	ldi	r24, 0xD7	; 215
    2c4a:	96 e0       	ldi	r25, 0x06	; 6
    2c4c:	0e 94 9a 18 	call	0x3134	; 0x3134 <_ZN7Kompass16HMC5883L_commandEhh>
					break;
    2c50:	08 95       	ret
				case '4':
					kompass.HMC5883L_command(0x01,HMCGAIN660);
    2c52:	40 e6       	ldi	r20, 0x60	; 96
    2c54:	61 e0       	ldi	r22, 0x01	; 1
    2c56:	87 ed       	ldi	r24, 0xD7	; 215
    2c58:	96 e0       	ldi	r25, 0x06	; 6
    2c5a:	0e 94 9a 18 	call	0x3134	; 0x3134 <_ZN7Kompass16HMC5883L_commandEhh>
					break;
    2c5e:	08 95       	ret
				case '5':
					kompass.HMC5883L_command(0x01,HMCGAIN440);
    2c60:	40 e8       	ldi	r20, 0x80	; 128
    2c62:	61 e0       	ldi	r22, 0x01	; 1
    2c64:	87 ed       	ldi	r24, 0xD7	; 215
    2c66:	96 e0       	ldi	r25, 0x06	; 6
    2c68:	0e 94 9a 18 	call	0x3134	; 0x3134 <_ZN7Kompass16HMC5883L_commandEhh>
					break;
    2c6c:	08 95       	ret
				case '6':
					kompass.HMC5883L_command(0x01,HMCGAIN390);
    2c6e:	40 ea       	ldi	r20, 0xA0	; 160
    2c70:	61 e0       	ldi	r22, 0x01	; 1
    2c72:	87 ed       	ldi	r24, 0xD7	; 215
    2c74:	96 e0       	ldi	r25, 0x06	; 6
    2c76:	0e 94 9a 18 	call	0x3134	; 0x3134 <_ZN7Kompass16HMC5883L_commandEhh>
					break;
    2c7a:	08 95       	ret
				case '7':
					kompass.HMC5883L_command(0x01,HMCGAIN330);
    2c7c:	40 ec       	ldi	r20, 0xC0	; 192
    2c7e:	61 e0       	ldi	r22, 0x01	; 1
    2c80:	87 ed       	ldi	r24, 0xD7	; 215
    2c82:	96 e0       	ldi	r25, 0x06	; 6
    2c84:	0e 94 9a 18 	call	0x3134	; 0x3134 <_ZN7Kompass16HMC5883L_commandEhh>
					break;
    2c88:	08 95       	ret
				case '8':
					kompass.HMC5883L_command(0x01,HMCGAIN230);
    2c8a:	40 ee       	ldi	r20, 0xE0	; 224
    2c8c:	61 e0       	ldi	r22, 0x01	; 1
    2c8e:	87 ed       	ldi	r24, 0xD7	; 215
    2c90:	96 e0       	ldi	r25, 0x06	; 6
    2c92:	0e 94 9a 18 	call	0x3134	; 0x3134 <_ZN7Kompass16HMC5883L_commandEhh>
					break;
    2c96:	08 95       	ret
				default:
					anzeige &=~(1<<Kompasflag);
    2c98:	2b 7d       	andi	r18, 0xDB	; 219
					anzeige|=(1<<Kompasgaineinstellenflag);
    2c9a:	20 62       	ori	r18, 0x20	; 32
    2c9c:	30 93 a0 02 	sts	0x02A0, r19
    2ca0:	20 93 9f 02 	sts	0x029F, r18
					break;
    2ca4:	f8 c0       	rjmp	.+496    	; 0x2e96 <_Z14eingabehandlerh+0x46e>
    2ca6:	a9 01       	movw	r20, r18
    2ca8:	48 74       	andi	r20, 0x48	; 72
    2caa:	55 27       	eor	r21, r21
			}
		}
		else if ((anzeige&(1<<Einstellungsflag)) && (anzeige&(1<<Timerflag)))
    2cac:	48 34       	cpi	r20, 0x48	; 72
    2cae:	51 05       	cpc	r21, r1
    2cb0:	09 f0       	breq	.+2      	; 0x2cb4 <_Z14eingabehandlerh+0x28c>
    2cb2:	87 c0       	rjmp	.+270    	; 0x2dc2 <_Z14eingabehandlerh+0x39a>
		{
			switch (pos)
    2cb4:	90 91 9e 02 	lds	r25, 0x029E
    2cb8:	92 30       	cpi	r25, 0x02	; 2
    2cba:	a9 f1       	breq	.+106    	; 0x2d26 <_Z14eingabehandlerh+0x2fe>
    2cbc:	28 f4       	brcc	.+10     	; 0x2cc8 <_Z14eingabehandlerh+0x2a0>
    2cbe:	99 23       	and	r25, r25
    2cc0:	61 f0       	breq	.+24     	; 0x2cda <_Z14eingabehandlerh+0x2b2>
    2cc2:	91 30       	cpi	r25, 0x01	; 1
    2cc4:	01 f1       	breq	.+64     	; 0x2d06 <_Z14eingabehandlerh+0x2de>
    2cc6:	e7 c0       	rjmp	.+462    	; 0x2e96 <_Z14eingabehandlerh+0x46e>
    2cc8:	94 30       	cpi	r25, 0x04	; 4
    2cca:	09 f4       	brne	.+2      	; 0x2cce <_Z14eingabehandlerh+0x2a6>
    2ccc:	52 c0       	rjmp	.+164    	; 0x2d72 <_Z14eingabehandlerh+0x34a>
    2cce:	08 f4       	brcc	.+2      	; 0x2cd2 <_Z14eingabehandlerh+0x2aa>
    2cd0:	40 c0       	rjmp	.+128    	; 0x2d52 <_Z14eingabehandlerh+0x32a>
    2cd2:	95 30       	cpi	r25, 0x05	; 5
    2cd4:	09 f4       	brne	.+2      	; 0x2cd8 <_Z14eingabehandlerh+0x2b0>
    2cd6:	63 c0       	rjmp	.+198    	; 0x2d9e <_Z14eingabehandlerh+0x376>
    2cd8:	de c0       	rjmp	.+444    	; 0x2e96 <_Z14eingabehandlerh+0x46e>
			{
			case 0:
				switch (taste)
    2cda:	83 32       	cpi	r24, 0x23	; 35
    2cdc:	09 f4       	brne	.+2      	; 0x2ce0 <_Z14eingabehandlerh+0x2b8>
    2cde:	db c0       	rjmp	.+438    	; 0x2e96 <_Z14eingabehandlerh+0x46e>
    2ce0:	8a 32       	cpi	r24, 0x2A	; 42
    2ce2:	09 f4       	brne	.+2      	; 0x2ce6 <_Z14eingabehandlerh+0x2be>
    2ce4:	d8 c0       	rjmp	.+432    	; 0x2e96 <_Z14eingabehandlerh+0x46e>
					case '#':
						break;
					case '*':
						break;
					default:
						zaehler.Sekunden+=(taste-'0')*10;
    2ce6:	e1 ec       	ldi	r30, 0xC1	; 193
    2ce8:	f6 e0       	ldi	r31, 0x06	; 6
    2cea:	98 2f       	mov	r25, r24
    2cec:	99 0f       	add	r25, r25
    2cee:	90 56       	subi	r25, 0x60	; 96
    2cf0:	29 2f       	mov	r18, r25
    2cf2:	22 0f       	add	r18, r18
    2cf4:	22 0f       	add	r18, r18
    2cf6:	92 0f       	add	r25, r18
    2cf8:	20 81       	ld	r18, Z
    2cfa:	92 0f       	add	r25, r18
    2cfc:	90 83       	st	Z, r25
						pos++;
    2cfe:	91 e0       	ldi	r25, 0x01	; 1
    2d00:	90 93 9e 02 	sts	0x029E, r25
						break;
    2d04:	c8 c0       	rjmp	.+400    	; 0x2e96 <_Z14eingabehandlerh+0x46e>
				}
				break;
			case 1:
				switch (taste)
    2d06:	83 32       	cpi	r24, 0x23	; 35
    2d08:	09 f4       	brne	.+2      	; 0x2d0c <_Z14eingabehandlerh+0x2e4>
    2d0a:	c5 c0       	rjmp	.+394    	; 0x2e96 <_Z14eingabehandlerh+0x46e>
    2d0c:	8a 32       	cpi	r24, 0x2A	; 42
    2d0e:	09 f4       	brne	.+2      	; 0x2d12 <_Z14eingabehandlerh+0x2ea>
    2d10:	c2 c0       	rjmp	.+388    	; 0x2e96 <_Z14eingabehandlerh+0x46e>
					case '#':
					break;
					case '*':
					break;
					default:
					zaehler.Sekunden+=(taste-'0');
    2d12:	e1 ec       	ldi	r30, 0xC1	; 193
    2d14:	f6 e0       	ldi	r31, 0x06	; 6
    2d16:	90 81       	ld	r25, Z
    2d18:	90 53       	subi	r25, 0x30	; 48
    2d1a:	98 0f       	add	r25, r24
    2d1c:	90 83       	st	Z, r25
					pos++;
    2d1e:	92 e0       	ldi	r25, 0x02	; 2
    2d20:	90 93 9e 02 	sts	0x029E, r25
					break;
    2d24:	b8 c0       	rjmp	.+368    	; 0x2e96 <_Z14eingabehandlerh+0x46e>
				}
				break;
			case 2:
				switch (taste)
    2d26:	83 32       	cpi	r24, 0x23	; 35
    2d28:	09 f4       	brne	.+2      	; 0x2d2c <_Z14eingabehandlerh+0x304>
    2d2a:	b5 c0       	rjmp	.+362    	; 0x2e96 <_Z14eingabehandlerh+0x46e>
    2d2c:	8a 32       	cpi	r24, 0x2A	; 42
    2d2e:	09 f4       	brne	.+2      	; 0x2d32 <_Z14eingabehandlerh+0x30a>
    2d30:	b2 c0       	rjmp	.+356    	; 0x2e96 <_Z14eingabehandlerh+0x46e>
					case '#':
					break;
					case '*':
					break;
					default:
					zaehler.Minuten+=(taste-'0')*10;
    2d32:	e0 ec       	ldi	r30, 0xC0	; 192
    2d34:	f6 e0       	ldi	r31, 0x06	; 6
    2d36:	98 2f       	mov	r25, r24
    2d38:	99 0f       	add	r25, r25
    2d3a:	90 56       	subi	r25, 0x60	; 96
    2d3c:	29 2f       	mov	r18, r25
    2d3e:	22 0f       	add	r18, r18
    2d40:	22 0f       	add	r18, r18
    2d42:	92 0f       	add	r25, r18
    2d44:	20 81       	ld	r18, Z
    2d46:	92 0f       	add	r25, r18
    2d48:	90 83       	st	Z, r25
					pos++;
    2d4a:	93 e0       	ldi	r25, 0x03	; 3
    2d4c:	90 93 9e 02 	sts	0x029E, r25
					break;
    2d50:	a2 c0       	rjmp	.+324    	; 0x2e96 <_Z14eingabehandlerh+0x46e>
				}
				break;
			case 3:
				switch (taste)
    2d52:	83 32       	cpi	r24, 0x23	; 35
    2d54:	09 f4       	brne	.+2      	; 0x2d58 <_Z14eingabehandlerh+0x330>
    2d56:	9f c0       	rjmp	.+318    	; 0x2e96 <_Z14eingabehandlerh+0x46e>
    2d58:	8a 32       	cpi	r24, 0x2A	; 42
    2d5a:	09 f4       	brne	.+2      	; 0x2d5e <_Z14eingabehandlerh+0x336>
    2d5c:	9c c0       	rjmp	.+312    	; 0x2e96 <_Z14eingabehandlerh+0x46e>
					case '#':
					break;
					case '*':
					break;
					default:
					zaehler.Minuten+=(taste-'0');
    2d5e:	e0 ec       	ldi	r30, 0xC0	; 192
    2d60:	f6 e0       	ldi	r31, 0x06	; 6
    2d62:	90 81       	ld	r25, Z
    2d64:	90 53       	subi	r25, 0x30	; 48
    2d66:	98 0f       	add	r25, r24
    2d68:	90 83       	st	Z, r25
					pos++;
    2d6a:	94 e0       	ldi	r25, 0x04	; 4
    2d6c:	90 93 9e 02 	sts	0x029E, r25
					break;
    2d70:	92 c0       	rjmp	.+292    	; 0x2e96 <_Z14eingabehandlerh+0x46e>
				}
				break;
			case 4:
				switch (taste)
    2d72:	83 32       	cpi	r24, 0x23	; 35
    2d74:	09 f4       	brne	.+2      	; 0x2d78 <_Z14eingabehandlerh+0x350>
    2d76:	8f c0       	rjmp	.+286    	; 0x2e96 <_Z14eingabehandlerh+0x46e>
    2d78:	8a 32       	cpi	r24, 0x2A	; 42
    2d7a:	09 f4       	brne	.+2      	; 0x2d7e <_Z14eingabehandlerh+0x356>
    2d7c:	8c c0       	rjmp	.+280    	; 0x2e96 <_Z14eingabehandlerh+0x46e>
					case '#':
					break;
					case '*':
					break;
					default:
					zaehler.Stunden+=(taste-'0')*10;
    2d7e:	ef eb       	ldi	r30, 0xBF	; 191
    2d80:	f6 e0       	ldi	r31, 0x06	; 6
    2d82:	98 2f       	mov	r25, r24
    2d84:	99 0f       	add	r25, r25
    2d86:	90 56       	subi	r25, 0x60	; 96
    2d88:	29 2f       	mov	r18, r25
    2d8a:	22 0f       	add	r18, r18
    2d8c:	22 0f       	add	r18, r18
    2d8e:	92 0f       	add	r25, r18
    2d90:	20 81       	ld	r18, Z
    2d92:	92 0f       	add	r25, r18
    2d94:	90 83       	st	Z, r25
					pos++;
    2d96:	95 e0       	ldi	r25, 0x05	; 5
    2d98:	90 93 9e 02 	sts	0x029E, r25
					break;
    2d9c:	7c c0       	rjmp	.+248    	; 0x2e96 <_Z14eingabehandlerh+0x46e>
				}
				break;
			case 5:
				switch (taste)
    2d9e:	83 32       	cpi	r24, 0x23	; 35
    2da0:	41 f0       	breq	.+16     	; 0x2db2 <_Z14eingabehandlerh+0x38a>
    2da2:	8a 32       	cpi	r24, 0x2A	; 42
    2da4:	31 f0       	breq	.+12     	; 0x2db2 <_Z14eingabehandlerh+0x38a>
					case '#':
					break;
					case '*':
					break;
					default:
					zaehler.Stunden+=(taste-'0');
    2da6:	ef eb       	ldi	r30, 0xBF	; 191
    2da8:	f6 e0       	ldi	r31, 0x06	; 6
    2daa:	90 81       	ld	r25, Z
    2dac:	90 53       	subi	r25, 0x30	; 48
    2dae:	98 0f       	add	r25, r24
    2db0:	90 83       	st	Z, r25
					pos++;
					break;
				}
				pos=0;
    2db2:	10 92 9e 02 	sts	0x029E, r1
				anzeige&=~(1<<Einstellungsflag);
    2db6:	27 7f       	andi	r18, 0xF7	; 247
    2db8:	30 93 a0 02 	sts	0x02A0, r19
    2dbc:	20 93 9f 02 	sts	0x029F, r18
				break;
    2dc0:	6a c0       	rjmp	.+212    	; 0x2e96 <_Z14eingabehandlerh+0x46e>
			}
		}
		else if ((anzeige&(1<<Stoppuhrflag)))
    2dc2:	27 ff       	sbrs	r18, 7
    2dc4:	23 c0       	rjmp	.+70     	; 0x2e0c <_Z14eingabehandlerh+0x3e4>
		{
			if (taste=='*')
    2dc6:	8a 32       	cpi	r24, 0x2A	; 42
    2dc8:	71 f4       	brne	.+28     	; 0x2de6 <_Z14eingabehandlerh+0x3be>
			{
				if ((anzeige&(1<<Einstellungsflag)))
    2dca:	23 ff       	sbrs	r18, 3
    2dcc:	06 c0       	rjmp	.+12     	; 0x2dda <_Z14eingabehandlerh+0x3b2>
				{
					anzeige&=~(1<<Einstellungsflag);
    2dce:	27 7f       	andi	r18, 0xF7	; 247
    2dd0:	30 93 a0 02 	sts	0x02A0, r19
    2dd4:	20 93 9f 02 	sts	0x029F, r18
    2dd8:	71 c0       	rjmp	.+226    	; 0x2ebc <_Z14eingabehandlerh+0x494>
				}
				else{
					anzeige|=(1<<Einstellungsflag);
    2dda:	28 60       	ori	r18, 0x08	; 8
    2ddc:	30 93 a0 02 	sts	0x02A0, r19
    2de0:	20 93 9f 02 	sts	0x029F, r18
    2de4:	6b c0       	rjmp	.+214    	; 0x2ebc <_Z14eingabehandlerh+0x494>
				}
			}
			else if (taste=='0')
    2de6:	80 33       	cpi	r24, 0x30	; 48
    2de8:	39 f4       	brne	.+14     	; 0x2df8 <_Z14eingabehandlerh+0x3d0>
			{
				stoppuhr.Sekunden=0;
    2dea:	10 92 b1 06 	sts	0x06B1, r1
				stoppuhr.Minuten=0;
    2dee:	10 92 b0 06 	sts	0x06B0, r1
				stoppuhr.Stunden=0;
    2df2:	10 92 af 06 	sts	0x06AF, r1
    2df6:	08 95       	ret
			}
			else if (taste=='#')
    2df8:	83 32       	cpi	r24, 0x23	; 35
    2dfa:	09 f0       	breq	.+2      	; 0x2dfe <_Z14eingabehandlerh+0x3d6>
    2dfc:	65 c0       	rjmp	.+202    	; 0x2ec8 <_Z14eingabehandlerh+0x4a0>
			{
				anzeige&=~((1<<Stoppuhrflag)|(1<<Einstellungsflag));
    2dfe:	27 77       	andi	r18, 0x77	; 119
				anzeige|=(1<<menueflag);
    2e00:	30 62       	ori	r19, 0x20	; 32
    2e02:	30 93 a0 02 	sts	0x02A0, r19
    2e06:	20 93 9f 02 	sts	0x029F, r18
    2e0a:	08 95       	ret
			}
		}
		else if ((anzeige&(1<<Uhrflag)))
    2e0c:	20 ff       	sbrs	r18, 0
    2e0e:	0a c0       	rjmp	.+20     	; 0x2e24 <_Z14eingabehandlerh+0x3fc>
		{
			if (taste=='#')
    2e10:	83 32       	cpi	r24, 0x23	; 35
    2e12:	09 f0       	breq	.+2      	; 0x2e16 <_Z14eingabehandlerh+0x3ee>
    2e14:	40 c0       	rjmp	.+128    	; 0x2e96 <_Z14eingabehandlerh+0x46e>
			{
				anzeige&=~(1<<Uhrflag);
    2e16:	2e 7f       	andi	r18, 0xFE	; 254
				anzeige|=(1<<menueflag);
    2e18:	30 62       	ori	r19, 0x20	; 32
    2e1a:	30 93 a0 02 	sts	0x02A0, r19
    2e1e:	20 93 9f 02 	sts	0x029F, r18
    2e22:	08 95       	ret
			}
		}
		else if ((anzeige&(1<<Kompasflag)))
    2e24:	22 ff       	sbrs	r18, 2
    2e26:	09 c0       	rjmp	.+18     	; 0x2e3a <_Z14eingabehandlerh+0x412>
		{
			if (taste=='#')
    2e28:	83 32       	cpi	r24, 0x23	; 35
    2e2a:	a9 f5       	brne	.+106    	; 0x2e96 <_Z14eingabehandlerh+0x46e>
			{
				anzeige&=~(1<<Kompasflag);
    2e2c:	2b 7f       	andi	r18, 0xFB	; 251
				anzeige|=(1<<menueflag);
    2e2e:	30 62       	ori	r19, 0x20	; 32
    2e30:	30 93 a0 02 	sts	0x02A0, r19
    2e34:	20 93 9f 02 	sts	0x029F, r18
    2e38:	08 95       	ret
			}
		}
		else if ((anzeige&(1<<Fahradflag)))
    2e3a:	21 ff       	sbrs	r18, 1
    2e3c:	0a c0       	rjmp	.+20     	; 0x2e52 <_Z14eingabehandlerh+0x42a>
		{
			if (taste=='#')
    2e3e:	83 32       	cpi	r24, 0x23	; 35
    2e40:	51 f5       	brne	.+84     	; 0x2e96 <_Z14eingabehandlerh+0x46e>
			{
				anzeige&=~(1<<Fahradflag);
    2e42:	c9 01       	movw	r24, r18
    2e44:	8d 7f       	andi	r24, 0xFD	; 253
				anzeige|=(1<<menueflag);	
    2e46:	90 62       	ori	r25, 0x20	; 32
    2e48:	90 93 a0 02 	sts	0x02A0, r25
    2e4c:	80 93 9f 02 	sts	0x029F, r24
    2e50:	08 95       	ret
			}
		}
		else if ((anzeige&(1<<Timerflag)))
    2e52:	26 ff       	sbrs	r18, 6
    2e54:	17 c0       	rjmp	.+46     	; 0x2e84 <_Z14eingabehandlerh+0x45c>
		{
			if (taste=='#')
    2e56:	83 32       	cpi	r24, 0x23	; 35
    2e58:	f1 f4       	brne	.+60     	; 0x2e96 <_Z14eingabehandlerh+0x46e>
			{
				anzeige&=~((1<<Timerflag)|(1<<blinkflag));
    2e5a:	2f 7b       	andi	r18, 0xBF	; 191
    2e5c:	3f 7b       	andi	r19, 0xBF	; 191
    2e5e:	30 93 a0 02 	sts	0x02A0, r19
    2e62:	20 93 9f 02 	sts	0x029F, r18
				oled.invert(0);	//fuer den Fall, dass es invertiert blieb (50% der Faelle)
    2e66:	60 e0       	ldi	r22, 0x00	; 0
    2e68:	86 ea       	ldi	r24, 0xA6	; 166
    2e6a:	92 e0       	ldi	r25, 0x02	; 2
    2e6c:	0e 94 55 03 	call	0x6aa	; 0x6aa <_ZN7Display6invertEh>
				anzeige|=(1<<menueflag);
    2e70:	80 91 9f 02 	lds	r24, 0x029F
    2e74:	90 91 a0 02 	lds	r25, 0x02A0
    2e78:	90 62       	ori	r25, 0x20	; 32
    2e7a:	90 93 a0 02 	sts	0x02A0, r25
    2e7e:	80 93 9f 02 	sts	0x029F, r24
    2e82:	08 95       	ret
			}
		}
		else if (anzeige==0)
    2e84:	23 2b       	or	r18, r19
    2e86:	39 f4       	brne	.+14     	; 0x2e96 <_Z14eingabehandlerh+0x46e>
		{
			anzeige|=(1<<menueflag);
    2e88:	80 e0       	ldi	r24, 0x00	; 0
    2e8a:	90 e2       	ldi	r25, 0x20	; 32
    2e8c:	90 93 a0 02 	sts	0x02A0, r25
    2e90:	80 93 9f 02 	sts	0x029F, r24
    2e94:	08 95       	ret
		}
		if ((anzeige&(1<<blinkflag)))
    2e96:	20 91 9f 02 	lds	r18, 0x029F
    2e9a:	30 91 a0 02 	lds	r19, 0x02A0
    2e9e:	36 ff       	sbrs	r19, 6
    2ea0:	13 c0       	rjmp	.+38     	; 0x2ec8 <_Z14eingabehandlerh+0x4a0>
		{
			if (taste=='*')
    2ea2:	8a 32       	cpi	r24, 0x2A	; 42
    2ea4:	89 f4       	brne	.+34     	; 0x2ec8 <_Z14eingabehandlerh+0x4a0>
			{
				anzeige &=~(1<<blinkflag);
    2ea6:	3f 7b       	andi	r19, 0xBF	; 191
    2ea8:	30 93 a0 02 	sts	0x02A0, r19
    2eac:	20 93 9f 02 	sts	0x029F, r18
				oled.invert(0);	//fuer den Fall, dass es invertiert blieb (50% der Faelle)
    2eb0:	60 e0       	ldi	r22, 0x00	; 0
    2eb2:	86 ea       	ldi	r24, 0xA6	; 166
    2eb4:	92 e0       	ldi	r25, 0x02	; 2
    2eb6:	0e 94 55 03 	call	0x6aa	; 0x6aa <_ZN7Display6invertEh>
    2eba:	08 95       	ret
		}
		else if (anzeige==0)
		{
			anzeige|=(1<<menueflag);
		}
		if ((anzeige&(1<<blinkflag)))
    2ebc:	20 91 9f 02 	lds	r18, 0x029F
    2ec0:	30 91 a0 02 	lds	r19, 0x02A0
    2ec4:	36 fd       	sbrc	r19, 6
    2ec6:	ef cf       	rjmp	.-34     	; 0x2ea6 <_Z14eingabehandlerh+0x47e>
    2ec8:	08 95       	ret

00002eca <main>:
void eingabehandler(uint8_t taste);

int main(void)
{
	//initialisierung
	initialisierung();
    2eca:	0e 94 d6 13 	call	0x27ac	; 0x27ac <_Z15initialisierungv>
	
    while(1)
    {
		//Steuerung der interupts durch Handler
		maininterupthandler();
    2ece:	0e 94 14 14 	call	0x2828	; 0x2828 <_Z19maininterupthandlerv>
		//Steuerung der Anzeige alle Sekunde zur aktualisierung maximale Aktulisierungsrate ist 1Hz
		anzeigehandler();
    2ed2:	0e 94 22 14 	call	0x2844	; 0x2844 <_Z14anzeigehandlerv>
		//Tasthandler
		eingabehandler(Tastatur.Taster());
    2ed6:	85 ea       	ldi	r24, 0xA5	; 165
    2ed8:	92 e0       	ldi	r25, 0x02	; 2
    2eda:	0e 94 f9 17 	call	0x2ff2	; 0x2ff2 <_ZN9Interface6TasterEv>
    2ede:	0e 94 14 15 	call	0x2a28	; 0x2a28 <_Z14eingabehandlerh>
    2ee2:	f5 cf       	rjmp	.-22     	; 0x2ece <main+0x4>

00002ee4 <_GLOBAL__sub_I_kompass>:
#include <stdlib.h>
#include <stdio.h>
#include <avr/interrupt.h>

#include "Kompass.h"
Kompass kompass;
    2ee4:	87 ed       	ldi	r24, 0xD7	; 215
    2ee6:	96 e0       	ldi	r25, 0x06	; 6
    2ee8:	0e 94 b9 18 	call	0x3172	; 0x3172 <_ZN7KompassC1Ev>

#include "RTC.h"
RTC rtc;
    2eec:	87 ec       	ldi	r24, 0xC7	; 199
    2eee:	96 e0       	ldi	r25, 0x06	; 6
    2ef0:	0e 94 29 1a 	call	0x3452	; 0x3452 <_ZN3RTCC1Ev>
RTC zaehler;
    2ef4:	87 eb       	ldi	r24, 0xB7	; 183
    2ef6:	96 e0       	ldi	r25, 0x06	; 6
    2ef8:	0e 94 29 1a 	call	0x3452	; 0x3452 <_ZN3RTCC1Ev>
RTC stoppuhr;
    2efc:	87 ea       	ldi	r24, 0xA7	; 167
    2efe:	96 e0       	ldi	r25, 0x06	; 6
    2f00:	0e 94 29 1a 	call	0x3452	; 0x3452 <_ZN3RTCC1Ev>

#include "Display.h"
Display oled;
    2f04:	86 ea       	ldi	r24, 0xA6	; 166
    2f06:	92 e0       	ldi	r25, 0x02	; 2
    2f08:	0e 94 49 03 	call	0x692	; 0x692 <_ZN7DisplayC1Ev>

#include "Interface.h"
Interface Tastatur;
    2f0c:	85 ea       	ldi	r24, 0xA5	; 165
    2f0e:	92 e0       	ldi	r25, 0x02	; 2
    2f10:	0e 94 d2 17 	call	0x2fa4	; 0x2fa4 <_ZN9InterfaceC1Ev>
    2f14:	08 95       	ret

00002f16 <_GLOBAL__sub_D_kompass>:
    2f16:	85 ea       	ldi	r24, 0xA5	; 165
    2f18:	92 e0       	ldi	r25, 0x02	; 2
    2f1a:	0e 94 d3 17 	call	0x2fa6	; 0x2fa6 <_ZN9InterfaceD1Ev>
RTC rtc;
RTC zaehler;
RTC stoppuhr;

#include "Display.h"
Display oled;
    2f1e:	86 ea       	ldi	r24, 0xA6	; 166
    2f20:	92 e0       	ldi	r25, 0x02	; 2
    2f22:	0e 94 b5 02 	call	0x56a	; 0x56a <_ZN7DisplayD1Ev>
Kompass kompass;

#include "RTC.h"
RTC rtc;
RTC zaehler;
RTC stoppuhr;
    2f26:	87 ea       	ldi	r24, 0xA7	; 167
    2f28:	96 e0       	ldi	r25, 0x06	; 6
    2f2a:	0e 94 4c 1a 	call	0x3498	; 0x3498 <_ZN3RTCD1Ev>
#include "Kompass.h"
Kompass kompass;

#include "RTC.h"
RTC rtc;
RTC zaehler;
    2f2e:	87 eb       	ldi	r24, 0xB7	; 183
    2f30:	96 e0       	ldi	r25, 0x06	; 6
    2f32:	0e 94 4c 1a 	call	0x3498	; 0x3498 <_ZN3RTCD1Ev>

#include "Kompass.h"
Kompass kompass;

#include "RTC.h"
RTC rtc;
    2f36:	87 ec       	ldi	r24, 0xC7	; 199
    2f38:	96 e0       	ldi	r25, 0x06	; 6
    2f3a:	0e 94 4c 1a 	call	0x3498	; 0x3498 <_ZN3RTCD1Ev>
#include <stdlib.h>
#include <stdio.h>
#include <avr/interrupt.h>

#include "Kompass.h"
Kompass kompass;
    2f3e:	87 ed       	ldi	r24, 0xD7	; 215
    2f40:	96 e0       	ldi	r25, 0x06	; 6
    2f42:	0e 94 96 18 	call	0x312c	; 0x312c <_ZN7KompassD1Ev>
    2f46:	08 95       	ret

00002f48 <_ZN3I2CC1Ev>:
#include "I2C.h"

// default constructor
I2C::I2C()
{
	TWBR = 10; //Bit fuer 100khz an Tackrate, reicht gerade noch so
    2f48:	8a e0       	ldi	r24, 0x0A	; 10
    2f4a:	80 93 b8 00 	sts	0x00B8, r24
    2f4e:	08 95       	ret

00002f50 <_ZN3I2CD1Ev>:
} //I2C

// default destructor
I2C::~I2C()
    2f50:	08 95       	ret

00002f52 <_ZN3I2C9twi_startEv>:
{
} //~I2C

void I2C::twi_start(){
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    2f52:	84 ea       	ldi	r24, 0xA4	; 164
    2f54:	80 93 bc 00 	sts	0x00BC, r24
    2f58:	08 95       	ret

00002f5a <_ZN3I2C8twi_stopEv>:
}
void I2C::twi_stop(){
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    2f5a:	84 e9       	ldi	r24, 0x94	; 148
    2f5c:	80 93 bc 00 	sts	0x00BC, r24
    2f60:	08 95       	ret

00002f62 <_ZN3I2C9twi_writeEh>:
	TWCR = (1<<TWINT) | (1<<TWEN);
	TWCR &= ~(1<<TWEA);
}

void I2C::twi_write(uint8_t data){
	while(!(TWCR & (1<<TWINT)));
    2f62:	ec eb       	ldi	r30, 0xBC	; 188
    2f64:	f0 e0       	ldi	r31, 0x00	; 0
    2f66:	80 81       	ld	r24, Z
    2f68:	88 23       	and	r24, r24
    2f6a:	ec f7       	brge	.-6      	; 0x2f66 <_ZN3I2C9twi_writeEh+0x4>
	TWDR = data;
    2f6c:	60 93 bb 00 	sts	0x00BB, r22
	TWCR = (1<<TWINT) | (1<<TWEN);
    2f70:	84 e8       	ldi	r24, 0x84	; 132
    2f72:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));
    2f76:	ec eb       	ldi	r30, 0xBC	; 188
    2f78:	f0 e0       	ldi	r31, 0x00	; 0
    2f7a:	80 81       	ld	r24, Z
    2f7c:	88 23       	and	r24, r24
    2f7e:	ec f7       	brge	.-6      	; 0x2f7a <_ZN3I2C9twi_writeEh+0x18>
}
    2f80:	08 95       	ret

00002f82 <_ZN3I2C8twi_readEh>:

uint8_t I2C::twi_read(uint8_t ack){
	if (ack)
    2f82:	66 23       	and	r22, r22
    2f84:	21 f0       	breq	.+8      	; 0x2f8e <_ZN3I2C8twi_readEh+0xc>
	{
		TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    2f86:	84 ec       	ldi	r24, 0xC4	; 196
    2f88:	80 93 bc 00 	sts	0x00BC, r24
    2f8c:	03 c0       	rjmp	.+6      	; 0x2f94 <_ZN3I2C8twi_readEh+0x12>
	}
	else{
		TWCR = (1<<TWINT) | (1<<TWEN);
    2f8e:	84 e8       	ldi	r24, 0x84	; 132
    2f90:	80 93 bc 00 	sts	0x00BC, r24
	}
	
	while(!(TWCR & (1<<TWINT)));
    2f94:	ec eb       	ldi	r30, 0xBC	; 188
    2f96:	f0 e0       	ldi	r31, 0x00	; 0
    2f98:	80 81       	ld	r24, Z
    2f9a:	88 23       	and	r24, r24
    2f9c:	ec f7       	brge	.-6      	; 0x2f98 <_ZN3I2C8twi_readEh+0x16>
	return TWDR;
    2f9e:	80 91 bb 00 	lds	r24, 0x00BB
    2fa2:	08 95       	ret

00002fa4 <_ZN9InterfaceC1Ev>:


#include "Interface.h"

// default constructor
Interface::Interface()
    2fa4:	08 95       	ret

00002fa6 <_ZN9InterfaceD1Ev>:
{
} //Interface

// default destructor
Interface::~Interface()
    2fa6:	08 95       	ret

00002fa8 <_ZN9Interface8debounceEPVhh>:
{
} //~Interface

uint8_t Interface::debounce(volatile uint8_t *port, uint8_t pin)
{
	if ( (*port & (1 << pin)) )
    2fa8:	fb 01       	movw	r30, r22
    2faa:	80 81       	ld	r24, Z
    2fac:	90 e0       	ldi	r25, 0x00	; 0
    2fae:	04 2e       	mov	r0, r20
    2fb0:	02 c0       	rjmp	.+4      	; 0x2fb6 <_ZN9Interface8debounceEPVhh+0xe>
    2fb2:	95 95       	asr	r25
    2fb4:	87 95       	ror	r24
    2fb6:	0a 94       	dec	r0
    2fb8:	e2 f7       	brpl	.-8      	; 0x2fb2 <_ZN9Interface8debounceEPVhh+0xa>
    2fba:	80 ff       	sbrs	r24, 0
    2fbc:	16 c0       	rjmp	.+44     	; 0x2fea <_ZN9Interface8debounceEPVhh+0x42>
    2fbe:	89 e9       	ldi	r24, 0x99	; 153
    2fc0:	93 e0       	ldi	r25, 0x03	; 3
    2fc2:	01 97       	sbiw	r24, 0x01	; 1
    2fc4:	f1 f7       	brne	.-4      	; 0x2fc2 <_ZN9Interface8debounceEPVhh+0x1a>
    2fc6:	00 c0       	rjmp	.+0      	; 0x2fc8 <_ZN9Interface8debounceEPVhh+0x20>
	{
		/* Pin wurde auf Masse gezogen, 100ms warten   */
		_delay_ms(1);
		if ( !(*port & (1 << pin)) )
    2fc8:	fb 01       	movw	r30, r22
    2fca:	80 81       	ld	r24, Z
    2fcc:	90 e0       	ldi	r25, 0x00	; 0
    2fce:	9c 01       	movw	r18, r24
    2fd0:	02 c0       	rjmp	.+4      	; 0x2fd6 <_ZN9Interface8debounceEPVhh+0x2e>
    2fd2:	35 95       	asr	r19
    2fd4:	27 95       	ror	r18
    2fd6:	4a 95       	dec	r20
    2fd8:	e2 f7       	brpl	.-8      	; 0x2fd2 <_ZN9Interface8debounceEPVhh+0x2a>
    2fda:	20 fd       	sbrc	r18, 0
    2fdc:	08 c0       	rjmp	.+16     	; 0x2fee <_ZN9Interface8debounceEPVhh+0x46>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2fde:	3c e0       	ldi	r19, 0x0C	; 12
    2fe0:	3a 95       	dec	r19
    2fe2:	f1 f7       	brne	.-4      	; 0x2fe0 <_ZN9Interface8debounceEPVhh+0x38>
    2fe4:	00 00       	nop
		{
			/* Anwender Zeit zum Loslassen des Tasters geben */
			_delay_us(10);
			return 1;
    2fe6:	81 e0       	ldi	r24, 0x01	; 1
    2fe8:	08 95       	ret
		}
	}
	return 0;
    2fea:	80 e0       	ldi	r24, 0x00	; 0
    2fec:	08 95       	ret
    2fee:	80 e0       	ldi	r24, 0x00	; 0
}
    2ff0:	08 95       	ret

00002ff2 <_ZN9Interface6TasterEv>:
		break;
	}
	return abfrage;
}

uint8_t Interface::Taster(){
    2ff2:	1f 93       	push	r17
    2ff4:	cf 93       	push	r28
    2ff6:	df 93       	push	r29
    2ff8:	ec 01       	movw	r28, r24
	uint8_t taste = 'A';
	
	//erste Zeile
	PORTD |= (1<<PORTD3);
    2ffa:	5b 9a       	sbi	0x0b, 3	; 11
    2ffc:	00 c0       	rjmp	.+0      	; 0x2ffe <_ZN9Interface6TasterEv+0xc>
    2ffe:	00 c0       	rjmp	.+0      	; 0x3000 <_ZN9Interface6TasterEv+0xe>
	_delay_us(1);
	if(debounce(&PIND,PIND4)){
    3000:	44 e0       	ldi	r20, 0x04	; 4
    3002:	69 e2       	ldi	r22, 0x29	; 41
    3004:	70 e0       	ldi	r23, 0x00	; 0
    3006:	0e 94 d4 17 	call	0x2fa8	; 0x2fa8 <_ZN9Interface8debounceEPVhh>
    300a:	81 11       	cpse	r24, r1
    300c:	12 c0       	rjmp	.+36     	; 0x3032 <_ZN9Interface6TasterEv+0x40>
		taste = '3';
	}
	else if (debounce(&PIND,PIND5))
    300e:	45 e0       	ldi	r20, 0x05	; 5
    3010:	69 e2       	ldi	r22, 0x29	; 41
    3012:	70 e0       	ldi	r23, 0x00	; 0
    3014:	ce 01       	movw	r24, r28
    3016:	0e 94 d4 17 	call	0x2fa8	; 0x2fa8 <_ZN9Interface8debounceEPVhh>
    301a:	81 11       	cpse	r24, r1
    301c:	0c c0       	rjmp	.+24     	; 0x3036 <_ZN9Interface6TasterEv+0x44>
	{
		taste = '2';
	}
	else if (debounce(&PIND,PIND6))
    301e:	46 e0       	ldi	r20, 0x06	; 6
    3020:	69 e2       	ldi	r22, 0x29	; 41
    3022:	70 e0       	ldi	r23, 0x00	; 0
    3024:	ce 01       	movw	r24, r28
    3026:	0e 94 d4 17 	call	0x2fa8	; 0x2fa8 <_ZN9Interface8debounceEPVhh>
    302a:	81 11       	cpse	r24, r1
    302c:	06 c0       	rjmp	.+12     	; 0x303a <_ZN9Interface6TasterEv+0x48>
	}
	return abfrage;
}

uint8_t Interface::Taster(){
	uint8_t taste = 'A';
    302e:	11 e4       	ldi	r17, 0x41	; 65
    3030:	05 c0       	rjmp	.+10     	; 0x303c <_ZN9Interface6TasterEv+0x4a>
	
	//erste Zeile
	PORTD |= (1<<PORTD3);
	_delay_us(1);
	if(debounce(&PIND,PIND4)){
		taste = '3';
    3032:	13 e3       	ldi	r17, 0x33	; 51
    3034:	03 c0       	rjmp	.+6      	; 0x303c <_ZN9Interface6TasterEv+0x4a>
	}
	else if (debounce(&PIND,PIND5))
	{
		taste = '2';
    3036:	12 e3       	ldi	r17, 0x32	; 50
    3038:	01 c0       	rjmp	.+2      	; 0x303c <_ZN9Interface6TasterEv+0x4a>
	}
	else if (debounce(&PIND,PIND6))
	{
		taste = '1';
    303a:	11 e3       	ldi	r17, 0x31	; 49
	}
	PORTD &= ~(1<<PORTD3);
    303c:	5b 98       	cbi	0x0b, 3	; 11
	
	//zweite Zeile
	PORTD |= (1<<PORTD2);
    303e:	5a 9a       	sbi	0x0b, 2	; 11
    3040:	00 c0       	rjmp	.+0      	; 0x3042 <_ZN9Interface6TasterEv+0x50>
    3042:	00 c0       	rjmp	.+0      	; 0x3044 <_ZN9Interface6TasterEv+0x52>
	_delay_us(1);
	if(debounce(&PIND,PIND4)){
    3044:	44 e0       	ldi	r20, 0x04	; 4
    3046:	69 e2       	ldi	r22, 0x29	; 41
    3048:	70 e0       	ldi	r23, 0x00	; 0
    304a:	ce 01       	movw	r24, r28
    304c:	0e 94 d4 17 	call	0x2fa8	; 0x2fa8 <_ZN9Interface8debounceEPVhh>
    3050:	81 11       	cpse	r24, r1
    3052:	11 c0       	rjmp	.+34     	; 0x3076 <_ZN9Interface6TasterEv+0x84>
		taste = '6';
	}
	else if (debounce(&PIND,PIND5))
    3054:	45 e0       	ldi	r20, 0x05	; 5
    3056:	69 e2       	ldi	r22, 0x29	; 41
    3058:	70 e0       	ldi	r23, 0x00	; 0
    305a:	ce 01       	movw	r24, r28
    305c:	0e 94 d4 17 	call	0x2fa8	; 0x2fa8 <_ZN9Interface8debounceEPVhh>
    3060:	81 11       	cpse	r24, r1
    3062:	0b c0       	rjmp	.+22     	; 0x307a <_ZN9Interface6TasterEv+0x88>
	{
		taste = '5';
	}
	else if (debounce(&PIND,PIND6))
    3064:	46 e0       	ldi	r20, 0x06	; 6
    3066:	69 e2       	ldi	r22, 0x29	; 41
    3068:	70 e0       	ldi	r23, 0x00	; 0
    306a:	ce 01       	movw	r24, r28
    306c:	0e 94 d4 17 	call	0x2fa8	; 0x2fa8 <_ZN9Interface8debounceEPVhh>
    3070:	81 11       	cpse	r24, r1
    3072:	05 c0       	rjmp	.+10     	; 0x307e <_ZN9Interface6TasterEv+0x8c>
    3074:	05 c0       	rjmp	.+10     	; 0x3080 <_ZN9Interface6TasterEv+0x8e>
	
	//zweite Zeile
	PORTD |= (1<<PORTD2);
	_delay_us(1);
	if(debounce(&PIND,PIND4)){
		taste = '6';
    3076:	16 e3       	ldi	r17, 0x36	; 54
    3078:	03 c0       	rjmp	.+6      	; 0x3080 <_ZN9Interface6TasterEv+0x8e>
	}
	else if (debounce(&PIND,PIND5))
	{
		taste = '5';
    307a:	15 e3       	ldi	r17, 0x35	; 53
    307c:	01 c0       	rjmp	.+2      	; 0x3080 <_ZN9Interface6TasterEv+0x8e>
	}
	else if (debounce(&PIND,PIND6))
	{
		taste = '4';
    307e:	14 e3       	ldi	r17, 0x34	; 52
	}
	PORTD &= ~(1<<PORTD2);
    3080:	5a 98       	cbi	0x0b, 2	; 11
	
	//dritte Zeile
	PORTD |= (1<<PORTD1);
    3082:	59 9a       	sbi	0x0b, 1	; 11
    3084:	00 c0       	rjmp	.+0      	; 0x3086 <_ZN9Interface6TasterEv+0x94>
    3086:	00 c0       	rjmp	.+0      	; 0x3088 <_ZN9Interface6TasterEv+0x96>
	_delay_us(1);
	if(debounce(&PIND,PIND4)){
    3088:	44 e0       	ldi	r20, 0x04	; 4
    308a:	69 e2       	ldi	r22, 0x29	; 41
    308c:	70 e0       	ldi	r23, 0x00	; 0
    308e:	ce 01       	movw	r24, r28
    3090:	0e 94 d4 17 	call	0x2fa8	; 0x2fa8 <_ZN9Interface8debounceEPVhh>
    3094:	81 11       	cpse	r24, r1
    3096:	11 c0       	rjmp	.+34     	; 0x30ba <_ZN9Interface6TasterEv+0xc8>
		taste = '9';
	}
	else if (debounce(&PIND,PIND5))
    3098:	45 e0       	ldi	r20, 0x05	; 5
    309a:	69 e2       	ldi	r22, 0x29	; 41
    309c:	70 e0       	ldi	r23, 0x00	; 0
    309e:	ce 01       	movw	r24, r28
    30a0:	0e 94 d4 17 	call	0x2fa8	; 0x2fa8 <_ZN9Interface8debounceEPVhh>
    30a4:	81 11       	cpse	r24, r1
    30a6:	0b c0       	rjmp	.+22     	; 0x30be <_ZN9Interface6TasterEv+0xcc>
	{
		taste = '8';
	}
	else if (debounce(&PIND,PIND6))
    30a8:	46 e0       	ldi	r20, 0x06	; 6
    30aa:	69 e2       	ldi	r22, 0x29	; 41
    30ac:	70 e0       	ldi	r23, 0x00	; 0
    30ae:	ce 01       	movw	r24, r28
    30b0:	0e 94 d4 17 	call	0x2fa8	; 0x2fa8 <_ZN9Interface8debounceEPVhh>
    30b4:	81 11       	cpse	r24, r1
    30b6:	05 c0       	rjmp	.+10     	; 0x30c2 <_ZN9Interface6TasterEv+0xd0>
    30b8:	05 c0       	rjmp	.+10     	; 0x30c4 <_ZN9Interface6TasterEv+0xd2>
	
	//dritte Zeile
	PORTD |= (1<<PORTD1);
	_delay_us(1);
	if(debounce(&PIND,PIND4)){
		taste = '9';
    30ba:	19 e3       	ldi	r17, 0x39	; 57
    30bc:	03 c0       	rjmp	.+6      	; 0x30c4 <_ZN9Interface6TasterEv+0xd2>
	}
	else if (debounce(&PIND,PIND5))
	{
		taste = '8';
    30be:	18 e3       	ldi	r17, 0x38	; 56
    30c0:	01 c0       	rjmp	.+2      	; 0x30c4 <_ZN9Interface6TasterEv+0xd2>
	}
	else if (debounce(&PIND,PIND6))
	{
		taste = '7';
    30c2:	17 e3       	ldi	r17, 0x37	; 55
	}
	PORTD &= ~(1<<PORT1);
    30c4:	59 98       	cbi	0x0b, 1	; 11
	
	//vierte Zeile
	PORTD |= (1<<PORTD0);
    30c6:	58 9a       	sbi	0x0b, 0	; 11
    30c8:	00 c0       	rjmp	.+0      	; 0x30ca <_ZN9Interface6TasterEv+0xd8>
    30ca:	00 c0       	rjmp	.+0      	; 0x30cc <_ZN9Interface6TasterEv+0xda>
	_delay_us(1);
	if(debounce(&PIND,PIND4)){
    30cc:	44 e0       	ldi	r20, 0x04	; 4
    30ce:	69 e2       	ldi	r22, 0x29	; 41
    30d0:	70 e0       	ldi	r23, 0x00	; 0
    30d2:	ce 01       	movw	r24, r28
    30d4:	0e 94 d4 17 	call	0x2fa8	; 0x2fa8 <_ZN9Interface8debounceEPVhh>
    30d8:	81 11       	cpse	r24, r1
    30da:	11 c0       	rjmp	.+34     	; 0x30fe <_ZN9Interface6TasterEv+0x10c>
		taste = '#';
	}
	else if (debounce(&PIND,PIND5))
    30dc:	45 e0       	ldi	r20, 0x05	; 5
    30de:	69 e2       	ldi	r22, 0x29	; 41
    30e0:	70 e0       	ldi	r23, 0x00	; 0
    30e2:	ce 01       	movw	r24, r28
    30e4:	0e 94 d4 17 	call	0x2fa8	; 0x2fa8 <_ZN9Interface8debounceEPVhh>
    30e8:	81 11       	cpse	r24, r1
    30ea:	0b c0       	rjmp	.+22     	; 0x3102 <_ZN9Interface6TasterEv+0x110>
	{
		taste = '0';
	}
	else if (debounce(&PIND,PIND6))
    30ec:	46 e0       	ldi	r20, 0x06	; 6
    30ee:	69 e2       	ldi	r22, 0x29	; 41
    30f0:	70 e0       	ldi	r23, 0x00	; 0
    30f2:	ce 01       	movw	r24, r28
    30f4:	0e 94 d4 17 	call	0x2fa8	; 0x2fa8 <_ZN9Interface8debounceEPVhh>
    30f8:	81 11       	cpse	r24, r1
    30fa:	05 c0       	rjmp	.+10     	; 0x3106 <_ZN9Interface6TasterEv+0x114>
    30fc:	05 c0       	rjmp	.+10     	; 0x3108 <_ZN9Interface6TasterEv+0x116>
	
	//vierte Zeile
	PORTD |= (1<<PORTD0);
	_delay_us(1);
	if(debounce(&PIND,PIND4)){
		taste = '#';
    30fe:	13 e2       	ldi	r17, 0x23	; 35
    3100:	03 c0       	rjmp	.+6      	; 0x3108 <_ZN9Interface6TasterEv+0x116>
	}
	else if (debounce(&PIND,PIND5))
	{
		taste = '0';
    3102:	10 e3       	ldi	r17, 0x30	; 48
    3104:	01 c0       	rjmp	.+2      	; 0x3108 <_ZN9Interface6TasterEv+0x116>
	}
	else if (debounce(&PIND,PIND6))
	{
		taste = '*';
    3106:	1a e2       	ldi	r17, 0x2A	; 42
	}
	PORTD &= ~(1<<PORTD0);
    3108:	58 98       	cbi	0x0b, 0	; 11
	
	return taste;
}
    310a:	81 2f       	mov	r24, r17
    310c:	df 91       	pop	r29
    310e:	cf 91       	pop	r28
    3110:	1f 91       	pop	r17
    3112:	08 95       	ret

00003114 <_ZN9Interface17ZahlenausTastaturEv>:

uint8_t Interface::ZahlenausTastatur(){
    3114:	cf 93       	push	r28
    3116:	df 93       	push	r29
    3118:	ec 01       	movw	r28, r24
	while(true){
		uint8_t taste = Taster();
    311a:	ce 01       	movw	r24, r28
    311c:	0e 94 f9 17 	call	0x2ff2	; 0x2ff2 <_ZN9Interface6TasterEv>
		if(taste>='0' && taste<='9'){
    3120:	80 53       	subi	r24, 0x30	; 48
    3122:	8a 30       	cpi	r24, 0x0A	; 10
    3124:	d0 f7       	brcc	.-12     	; 0x311a <_ZN9Interface17ZahlenausTastaturEv+0x6>
			return taste - '0';
		}
	}
}
    3126:	df 91       	pop	r29
    3128:	cf 91       	pop	r28
    312a:	08 95       	ret

0000312c <_ZN7KompassD1Ev>:
		offset[i]=0;
	}
} //Kompass

// default destructor
Kompass::~Kompass()
    312c:	06 96       	adiw	r24, 0x06	; 6
    312e:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <_ZN3I2CD1Ev>
    3132:	08 95       	ret

00003134 <_ZN7Kompass16HMC5883L_commandEhh>:
{
} //~Kompass

void Kompass::HMC5883L_command(uint8_t adresse, uint8_t command){
    3134:	0f 93       	push	r16
    3136:	1f 93       	push	r17
    3138:	cf 93       	push	r28
    313a:	df 93       	push	r29
    313c:	06 2f       	mov	r16, r22
    313e:	14 2f       	mov	r17, r20
	i2c.twi_start();
    3140:	ec 01       	movw	r28, r24
    3142:	26 96       	adiw	r28, 0x06	; 6
    3144:	ce 01       	movw	r24, r28
    3146:	0e 94 a9 17 	call	0x2f52	; 0x2f52 <_ZN3I2C9twi_startEv>
	i2c.twi_write(HMCWRITEADRESSE);
    314a:	6c e3       	ldi	r22, 0x3C	; 60
    314c:	ce 01       	movw	r24, r28
    314e:	0e 94 b1 17 	call	0x2f62	; 0x2f62 <_ZN3I2C9twi_writeEh>
	i2c.twi_write(adresse);
    3152:	60 2f       	mov	r22, r16
    3154:	ce 01       	movw	r24, r28
    3156:	0e 94 b1 17 	call	0x2f62	; 0x2f62 <_ZN3I2C9twi_writeEh>
	i2c.twi_write(command);
    315a:	61 2f       	mov	r22, r17
    315c:	ce 01       	movw	r24, r28
    315e:	0e 94 b1 17 	call	0x2f62	; 0x2f62 <_ZN3I2C9twi_writeEh>
	i2c.twi_stop();
    3162:	ce 01       	movw	r24, r28
    3164:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <_ZN3I2C8twi_stopEv>
}
    3168:	df 91       	pop	r29
    316a:	cf 91       	pop	r28
    316c:	1f 91       	pop	r17
    316e:	0f 91       	pop	r16
    3170:	08 95       	ret

00003172 <_ZN7KompassC1Ev>:


#include "Kompass.h"

// default constructor
Kompass::Kompass()
    3172:	cf 93       	push	r28
    3174:	df 93       	push	r29
    3176:	ec 01       	movw	r28, r24
    3178:	06 96       	adiw	r24, 0x06	; 6
    317a:	0e 94 a4 17 	call	0x2f48	; 0x2f48 <_ZN3I2CC1Ev>
{
	//Config Register A
	HMC5883L_command(0x00, HMCSAMPLES8+HMCDATARATE15+HMCMEASUREMODENORMAL);
    317e:	40 e7       	ldi	r20, 0x70	; 112
    3180:	60 e0       	ldi	r22, 0x00	; 0
    3182:	ce 01       	movw	r24, r28
    3184:	0e 94 9a 18 	call	0x3134	; 0x3134 <_ZN7Kompass16HMC5883L_commandEhh>

	//Config Gain
	HMC5883L_command(0x01, HMCGAIN1090);
    3188:	40 e2       	ldi	r20, 0x20	; 32
    318a:	61 e0       	ldi	r22, 0x01	; 1
    318c:	ce 01       	movw	r24, r28
    318e:	0e 94 9a 18 	call	0x3134	; 0x3134 <_ZN7Kompass16HMC5883L_commandEhh>

	//Set Mode auf single
	HMC5883L_command(0x02, HMCSIGLEMODE);
    3192:	41 e0       	ldi	r20, 0x01	; 1
    3194:	62 e0       	ldi	r22, 0x02	; 2
    3196:	ce 01       	movw	r24, r28
    3198:	0e 94 9a 18 	call	0x3134	; 0x3134 <_ZN7Kompass16HMC5883L_commandEhh>
	//Variablen
	for(uint8_t i=0;i<3;i++){
		achsen[i]=0;
    319c:	19 82       	std	Y+1, r1	; 0x01
    319e:	18 82       	st	Y, r1
		offset[i]=0;
    31a0:	18 86       	std	Y+8, r1	; 0x08
    31a2:	1f 82       	std	Y+7, r1	; 0x07

	//Set Mode auf single
	HMC5883L_command(0x02, HMCSIGLEMODE);
	//Variablen
	for(uint8_t i=0;i<3;i++){
		achsen[i]=0;
    31a4:	1b 82       	std	Y+3, r1	; 0x03
    31a6:	1a 82       	std	Y+2, r1	; 0x02
		offset[i]=0;
    31a8:	1a 86       	std	Y+10, r1	; 0x0a
    31aa:	19 86       	std	Y+9, r1	; 0x09

	//Set Mode auf single
	HMC5883L_command(0x02, HMCSIGLEMODE);
	//Variablen
	for(uint8_t i=0;i<3;i++){
		achsen[i]=0;
    31ac:	1d 82       	std	Y+5, r1	; 0x05
    31ae:	1c 82       	std	Y+4, r1	; 0x04
		offset[i]=0;
    31b0:	1c 86       	std	Y+12, r1	; 0x0c
    31b2:	1b 86       	std	Y+11, r1	; 0x0b
	}
} //Kompass
    31b4:	df 91       	pop	r29
    31b6:	cf 91       	pop	r28
    31b8:	08 95       	ret

000031ba <_ZN7Kompass20HMC5883L_readHeadingEv>:
		achsen[i]=0;
		offset[i]=0;
	}
}

uint8_t Kompass::HMC5883L_readHeading(){
    31ba:	bf 92       	push	r11
    31bc:	cf 92       	push	r12
    31be:	df 92       	push	r13
    31c0:	ef 92       	push	r14
    31c2:	ff 92       	push	r15
    31c4:	0f 93       	push	r16
    31c6:	1f 93       	push	r17
    31c8:	cf 93       	push	r28
    31ca:	df 93       	push	r29
    31cc:	00 d0       	rcall	.+0      	; 0x31ce <_ZN7Kompass20HMC5883L_readHeadingEv+0x14>
    31ce:	00 d0       	rcall	.+0      	; 0x31d0 <_ZN7Kompass20HMC5883L_readHeadingEv+0x16>
    31d0:	00 d0       	rcall	.+0      	; 0x31d2 <_ZN7Kompass20HMC5883L_readHeadingEv+0x18>
    31d2:	cd b7       	in	r28, 0x3d	; 61
    31d4:	de b7       	in	r29, 0x3e	; 62
    31d6:	6c 01       	movw	r12, r24
	cli();
    31d8:	f8 94       	cli
	uint8_t heading[6];
	i2c.twi_start();
    31da:	7c 01       	movw	r14, r24
    31dc:	26 e0       	ldi	r18, 0x06	; 6
    31de:	e2 0e       	add	r14, r18
    31e0:	f1 1c       	adc	r15, r1
    31e2:	c7 01       	movw	r24, r14
    31e4:	0e 94 a9 17 	call	0x2f52	; 0x2f52 <_ZN3I2C9twi_startEv>
	i2c.twi_write(HMCWRITEADRESSE);
    31e8:	6c e3       	ldi	r22, 0x3C	; 60
    31ea:	c7 01       	movw	r24, r14
    31ec:	0e 94 b1 17 	call	0x2f62	; 0x2f62 <_ZN3I2C9twi_writeEh>
	i2c.twi_write(0x03);
    31f0:	63 e0       	ldi	r22, 0x03	; 3
    31f2:	c7 01       	movw	r24, r14
    31f4:	0e 94 b1 17 	call	0x2f62	; 0x2f62 <_ZN3I2C9twi_writeEh>
	i2c.twi_start();
    31f8:	c7 01       	movw	r24, r14
    31fa:	0e 94 a9 17 	call	0x2f52	; 0x2f52 <_ZN3I2C9twi_startEv>
	i2c.twi_write(HMCREADADRESSE);
    31fe:	6d e3       	ldi	r22, 0x3D	; 61
    3200:	c7 01       	movw	r24, r14
    3202:	0e 94 b1 17 	call	0x2f62	; 0x2f62 <_ZN3I2C9twi_writeEh>
    3206:	8e 01       	movw	r16, r28
    3208:	0f 5f       	subi	r16, 0xFF	; 255
    320a:	1f 4f       	sbci	r17, 0xFF	; 255
	
	for(uint8_t i=0; i<6;i++){
    320c:	b1 2c       	mov	r11, r1
		if (i<5)
    320e:	84 e0       	ldi	r24, 0x04	; 4
    3210:	8b 15       	cp	r24, r11
    3212:	38 f0       	brcs	.+14     	; 0x3222 <_ZN7Kompass20HMC5883L_readHeadingEv+0x68>
		{
			heading[i]=i2c.twi_read(1);
    3214:	61 e0       	ldi	r22, 0x01	; 1
    3216:	c7 01       	movw	r24, r14
    3218:	0e 94 c1 17 	call	0x2f82	; 0x2f82 <_ZN3I2C8twi_readEh>
    321c:	f8 01       	movw	r30, r16
    321e:	80 83       	st	Z, r24
    3220:	06 c0       	rjmp	.+12     	; 0x322e <_ZN7Kompass20HMC5883L_readHeadingEv+0x74>
		}
		else
		{
			heading[i]=i2c.twi_read(0);
    3222:	60 e0       	ldi	r22, 0x00	; 0
    3224:	c7 01       	movw	r24, r14
    3226:	0e 94 c1 17 	call	0x2f82	; 0x2f82 <_ZN3I2C8twi_readEh>
    322a:	f8 01       	movw	r30, r16
    322c:	80 83       	st	Z, r24
	i2c.twi_write(HMCWRITEADRESSE);
	i2c.twi_write(0x03);
	i2c.twi_start();
	i2c.twi_write(HMCREADADRESSE);
	
	for(uint8_t i=0; i<6;i++){
    322e:	b3 94       	inc	r11
    3230:	0f 5f       	subi	r16, 0xFF	; 255
    3232:	1f 4f       	sbci	r17, 0xFF	; 255
    3234:	f6 e0       	ldi	r31, 0x06	; 6
    3236:	bf 12       	cpse	r11, r31
    3238:	ea cf       	rjmp	.-44     	; 0x320e <_ZN7Kompass20HMC5883L_readHeadingEv+0x54>
		{
			heading[i]=i2c.twi_read(0);
		}
		
	}
	i2c.twi_stop();
    323a:	c7 01       	movw	r24, r14
    323c:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <_ZN3I2C8twi_stopEv>
	achsen[0] =(int16_t) (heading[1] | (heading[0] << 8));
    3240:	89 81       	ldd	r24, Y+1	; 0x01
    3242:	90 e0       	ldi	r25, 0x00	; 0
    3244:	98 2f       	mov	r25, r24
    3246:	88 27       	eor	r24, r24
    3248:	2a 81       	ldd	r18, Y+2	; 0x02
    324a:	82 2b       	or	r24, r18
    324c:	f6 01       	movw	r30, r12
    324e:	91 83       	std	Z+1, r25	; 0x01
    3250:	80 83       	st	Z, r24
	achsen[2] =(int16_t) (heading[3] | (heading[2] << 8));
    3252:	8b 81       	ldd	r24, Y+3	; 0x03
    3254:	90 e0       	ldi	r25, 0x00	; 0
    3256:	98 2f       	mov	r25, r24
    3258:	88 27       	eor	r24, r24
    325a:	2c 81       	ldd	r18, Y+4	; 0x04
    325c:	82 2b       	or	r24, r18
    325e:	95 83       	std	Z+5, r25	; 0x05
    3260:	84 83       	std	Z+4, r24	; 0x04
	achsen[1] =(int16_t) (heading[5] | (heading[4] << 8));
    3262:	8d 81       	ldd	r24, Y+5	; 0x05
    3264:	90 e0       	ldi	r25, 0x00	; 0
    3266:	98 2f       	mov	r25, r24
    3268:	88 27       	eor	r24, r24
    326a:	2e 81       	ldd	r18, Y+6	; 0x06
    326c:	82 2b       	or	r24, r18
    326e:	93 83       	std	Z+3, r25	; 0x03
    3270:	82 83       	std	Z+2, r24	; 0x02
	sei();
    3272:	78 94       	sei
	if (achsen[0]==-4096 || achsen[1]==-4096 || achsen[2]==-4096)
    3274:	f6 01       	movw	r30, r12
    3276:	80 81       	ld	r24, Z
    3278:	91 81       	ldd	r25, Z+1	; 0x01
    327a:	81 15       	cp	r24, r1
    327c:	90 4f       	sbci	r25, 0xF0	; 240
    327e:	09 f4       	brne	.+2      	; 0x3282 <_ZN7Kompass20HMC5883L_readHeadingEv+0xc8>
    3280:	47 c0       	rjmp	.+142    	; 0x3310 <_ZN7Kompass20HMC5883L_readHeadingEv+0x156>
    3282:	f6 01       	movw	r30, r12
    3284:	82 81       	ldd	r24, Z+2	; 0x02
    3286:	93 81       	ldd	r25, Z+3	; 0x03
    3288:	81 15       	cp	r24, r1
    328a:	90 4f       	sbci	r25, 0xF0	; 240
    328c:	09 f4       	brne	.+2      	; 0x3290 <_ZN7Kompass20HMC5883L_readHeadingEv+0xd6>
    328e:	42 c0       	rjmp	.+132    	; 0x3314 <_ZN7Kompass20HMC5883L_readHeadingEv+0x15a>
    3290:	f6 01       	movw	r30, r12
    3292:	84 81       	ldd	r24, Z+4	; 0x04
    3294:	95 81       	ldd	r25, Z+5	; 0x05
    3296:	81 15       	cp	r24, r1
    3298:	90 4f       	sbci	r25, 0xF0	; 240
    329a:	f1 f1       	breq	.+124    	; 0x3318 <_ZN7Kompass20HMC5883L_readHeadingEv+0x15e>
    329c:	f6 01       	movw	r30, r12
    329e:	83 e0       	ldi	r24, 0x03	; 3
    32a0:	df 01       	movw	r26, r30
	}
	//Kallibrierung durchfuehren, jedes mal, wenn eine abfrage stattfindet
	//somit passive kalibrierung
	else{
		for(uint8_t i=0;i<3;i++){
			if(achsen[i]>max[i]){
    32a2:	20 81       	ld	r18, Z
    32a4:	31 81       	ldd	r19, Z+1	; 0x01
    32a6:	45 85       	ldd	r20, Z+13	; 0x0d
    32a8:	56 85       	ldd	r21, Z+14	; 0x0e
    32aa:	42 17       	cp	r20, r18
    32ac:	53 07       	cpc	r21, r19
    32ae:	8c f4       	brge	.+34     	; 0x32d2 <_ZN7Kompass20HMC5883L_readHeadingEv+0x118>
				max[i]=achsen[i];
    32b0:	36 87       	std	Z+14, r19	; 0x0e
    32b2:	25 87       	std	Z+13, r18	; 0x0d
				offset[i]=(max[i]+min[i])/2;
    32b4:	43 89       	ldd	r20, Z+19	; 0x13
    32b6:	54 89       	ldd	r21, Z+20	; 0x14
    32b8:	24 0f       	add	r18, r20
    32ba:	35 1f       	adc	r19, r21
    32bc:	33 23       	and	r19, r19
    32be:	14 f4       	brge	.+4      	; 0x32c4 <_ZN7Kompass20HMC5883L_readHeadingEv+0x10a>
    32c0:	2f 5f       	subi	r18, 0xFF	; 255
    32c2:	3f 4f       	sbci	r19, 0xFF	; 255
    32c4:	35 95       	asr	r19
    32c6:	27 95       	ror	r18
    32c8:	18 96       	adiw	r26, 0x08	; 8
    32ca:	3c 93       	st	X, r19
    32cc:	2e 93       	st	-X, r18
    32ce:	17 97       	sbiw	r26, 0x07	; 7
    32d0:	1a c0       	rjmp	.+52     	; 0x3306 <_ZN7Kompass20HMC5883L_readHeadingEv+0x14c>
			}
			else if(achsen[i]<min[i]){
    32d2:	63 89       	ldd	r22, Z+19	; 0x13
    32d4:	74 89       	ldd	r23, Z+20	; 0x14
    32d6:	26 17       	cp	r18, r22
    32d8:	37 07       	cpc	r19, r23
    32da:	7c f4       	brge	.+30     	; 0x32fa <_ZN7Kompass20HMC5883L_readHeadingEv+0x140>
				min[i]=achsen[i];
    32dc:	34 8b       	std	Z+20, r19	; 0x14
    32de:	23 8b       	std	Z+19, r18	; 0x13
				offset[i]=(max[i]+min[i])/2;
    32e0:	24 0f       	add	r18, r20
    32e2:	35 1f       	adc	r19, r21
    32e4:	33 23       	and	r19, r19
    32e6:	14 f4       	brge	.+4      	; 0x32ec <_ZN7Kompass20HMC5883L_readHeadingEv+0x132>
    32e8:	2f 5f       	subi	r18, 0xFF	; 255
    32ea:	3f 4f       	sbci	r19, 0xFF	; 255
    32ec:	35 95       	asr	r19
    32ee:	27 95       	ror	r18
    32f0:	18 96       	adiw	r26, 0x08	; 8
    32f2:	3c 93       	st	X, r19
    32f4:	2e 93       	st	-X, r18
    32f6:	17 97       	sbiw	r26, 0x07	; 7
    32f8:	06 c0       	rjmp	.+12     	; 0x3306 <_ZN7Kompass20HMC5883L_readHeadingEv+0x14c>
			}
			else {
				achsen[i]-=offset[i];
    32fa:	47 81       	ldd	r20, Z+7	; 0x07
    32fc:	50 85       	ldd	r21, Z+8	; 0x08
    32fe:	24 1b       	sub	r18, r20
    3300:	35 0b       	sbc	r19, r21
    3302:	31 83       	std	Z+1, r19	; 0x01
    3304:	20 83       	st	Z, r18
    3306:	81 50       	subi	r24, 0x01	; 1
    3308:	32 96       	adiw	r30, 0x02	; 2
		return 1;
	}
	//Kallibrierung durchfuehren, jedes mal, wenn eine abfrage stattfindet
	//somit passive kalibrierung
	else{
		for(uint8_t i=0;i<3;i++){
    330a:	81 11       	cpse	r24, r1
    330c:	c9 cf       	rjmp	.-110    	; 0x32a0 <_ZN7Kompass20HMC5883L_readHeadingEv+0xe6>
    330e:	05 c0       	rjmp	.+10     	; 0x331a <_ZN7Kompass20HMC5883L_readHeadingEv+0x160>
	achsen[2] =(int16_t) (heading[3] | (heading[2] << 8));
	achsen[1] =(int16_t) (heading[5] | (heading[4] << 8));
	sei();
	if (achsen[0]==-4096 || achsen[1]==-4096 || achsen[2]==-4096)
	{
		return 1;
    3310:	81 e0       	ldi	r24, 0x01	; 1
    3312:	03 c0       	rjmp	.+6      	; 0x331a <_ZN7Kompass20HMC5883L_readHeadingEv+0x160>
    3314:	81 e0       	ldi	r24, 0x01	; 1
    3316:	01 c0       	rjmp	.+2      	; 0x331a <_ZN7Kompass20HMC5883L_readHeadingEv+0x160>
    3318:	81 e0       	ldi	r24, 0x01	; 1
			}
		}
	}
	
	return 0;
}
    331a:	26 96       	adiw	r28, 0x06	; 6
    331c:	0f b6       	in	r0, 0x3f	; 63
    331e:	f8 94       	cli
    3320:	de bf       	out	0x3e, r29	; 62
    3322:	0f be       	out	0x3f, r0	; 63
    3324:	cd bf       	out	0x3d, r28	; 61
    3326:	df 91       	pop	r29
    3328:	cf 91       	pop	r28
    332a:	1f 91       	pop	r17
    332c:	0f 91       	pop	r16
    332e:	ff 90       	pop	r15
    3330:	ef 90       	pop	r14
    3332:	df 90       	pop	r13
    3334:	cf 90       	pop	r12
    3336:	bf 90       	pop	r11
    3338:	08 95       	ret

0000333a <_ZN7Kompass5angleEv>:

double Kompass::angle(){
    333a:	cf 92       	push	r12
    333c:	df 92       	push	r13
    333e:	ef 92       	push	r14
    3340:	ff 92       	push	r15
    3342:	cf 93       	push	r28
    3344:	df 93       	push	r29
    3346:	ec 01       	movw	r28, r24
	double angle=0;
	if (HMC5883L_readHeading())
    3348:	0e 94 dd 18 	call	0x31ba	; 0x31ba <_ZN7Kompass20HMC5883L_readHeadingEv>
    334c:	81 11       	cpse	r24, r1
    334e:	57 c0       	rjmp	.+174    	; 0x33fe <_ZN7Kompass5angleEv+0xc4>
	{
		angle=-1.0;
	}
	else{
		angle=atan2f(achsen[0],achsen[2])*180.0/M_PI+180.0;
    3350:	6c 81       	ldd	r22, Y+4	; 0x04
    3352:	7d 81       	ldd	r23, Y+5	; 0x05
    3354:	88 27       	eor	r24, r24
    3356:	77 fd       	sbrc	r23, 7
    3358:	80 95       	com	r24
    335a:	98 2f       	mov	r25, r24
    335c:	0e 94 4d 1c 	call	0x389a	; 0x389a <__floatsisf>
    3360:	6b 01       	movw	r12, r22
    3362:	7c 01       	movw	r14, r24
    3364:	68 81       	ld	r22, Y
    3366:	79 81       	ldd	r23, Y+1	; 0x01
    3368:	88 27       	eor	r24, r24
    336a:	77 fd       	sbrc	r23, 7
    336c:	80 95       	com	r24
    336e:	98 2f       	mov	r25, r24
    3370:	0e 94 4d 1c 	call	0x389a	; 0x389a <__floatsisf>
    3374:	a7 01       	movw	r20, r14
    3376:	96 01       	movw	r18, r12
    3378:	0e 94 58 1b 	call	0x36b0	; 0x36b0 <atan2>
    337c:	20 e0       	ldi	r18, 0x00	; 0
    337e:	30 e0       	ldi	r19, 0x00	; 0
    3380:	44 e3       	ldi	r20, 0x34	; 52
    3382:	53 e4       	ldi	r21, 0x43	; 67
    3384:	0e 94 66 1d 	call	0x3acc	; 0x3acc <__mulsf3>
    3388:	2b ed       	ldi	r18, 0xDB	; 219
    338a:	3f e0       	ldi	r19, 0x0F	; 15
    338c:	49 e4       	ldi	r20, 0x49	; 73
    338e:	50 e4       	ldi	r21, 0x40	; 64
    3390:	0e 94 b2 1b 	call	0x3764	; 0x3764 <__divsf3>
    3394:	20 e0       	ldi	r18, 0x00	; 0
    3396:	30 e0       	ldi	r19, 0x00	; 0
    3398:	44 e3       	ldi	r20, 0x34	; 52
    339a:	53 e4       	ldi	r21, 0x43	; 67
    339c:	0e 94 e5 1a 	call	0x35ca	; 0x35ca <__addsf3>
		//deklination
		angle+=2.35;
    33a0:	26 e6       	ldi	r18, 0x66	; 102
    33a2:	36 e6       	ldi	r19, 0x66	; 102
    33a4:	46 e1       	ldi	r20, 0x16	; 22
    33a6:	50 e4       	ldi	r21, 0x40	; 64
    33a8:	0e 94 e5 1a 	call	0x35ca	; 0x35ca <__addsf3>
    33ac:	6b 01       	movw	r12, r22
    33ae:	7c 01       	movw	r14, r24
		//Normierung auf %360
		if (angle>=360)
    33b0:	20 e0       	ldi	r18, 0x00	; 0
    33b2:	30 e0       	ldi	r19, 0x00	; 0
    33b4:	44 eb       	ldi	r20, 0xB4	; 180
    33b6:	53 e4       	ldi	r21, 0x43	; 67
    33b8:	0e 94 5b 1d 	call	0x3ab6	; 0x3ab6 <__gesf2>
    33bc:	88 23       	and	r24, r24
    33be:	5c f0       	brlt	.+22     	; 0x33d6 <_ZN7Kompass5angleEv+0x9c>
		{
			angle-=360;
    33c0:	20 e0       	ldi	r18, 0x00	; 0
    33c2:	30 e0       	ldi	r19, 0x00	; 0
    33c4:	44 eb       	ldi	r20, 0xB4	; 180
    33c6:	53 e4       	ldi	r21, 0x43	; 67
    33c8:	c7 01       	movw	r24, r14
    33ca:	b6 01       	movw	r22, r12
    33cc:	0e 94 e4 1a 	call	0x35c8	; 0x35c8 <__subsf3>
    33d0:	6b 01       	movw	r12, r22
    33d2:	7c 01       	movw	r14, r24
    33d4:	1c c0       	rjmp	.+56     	; 0x340e <_ZN7Kompass5angleEv+0xd4>
		}
		else if (angle < 0)
    33d6:	20 e0       	ldi	r18, 0x00	; 0
    33d8:	30 e0       	ldi	r19, 0x00	; 0
    33da:	a9 01       	movw	r20, r18
    33dc:	c7 01       	movw	r24, r14
    33de:	b6 01       	movw	r22, r12
    33e0:	0e 94 ab 1b 	call	0x3756	; 0x3756 <__cmpsf2>
    33e4:	88 23       	and	r24, r24
    33e6:	9c f4       	brge	.+38     	; 0x340e <_ZN7Kompass5angleEv+0xd4>
		{
			angle+=360;
    33e8:	20 e0       	ldi	r18, 0x00	; 0
    33ea:	30 e0       	ldi	r19, 0x00	; 0
    33ec:	44 eb       	ldi	r20, 0xB4	; 180
    33ee:	53 e4       	ldi	r21, 0x43	; 67
    33f0:	c7 01       	movw	r24, r14
    33f2:	b6 01       	movw	r22, r12
    33f4:	0e 94 e5 1a 	call	0x35ca	; 0x35ca <__addsf3>
    33f8:	6b 01       	movw	r12, r22
    33fa:	7c 01       	movw	r14, r24
    33fc:	08 c0       	rjmp	.+16     	; 0x340e <_ZN7Kompass5angleEv+0xd4>

double Kompass::angle(){
	double angle=0;
	if (HMC5883L_readHeading())
	{
		angle=-1.0;
    33fe:	0f 2e       	mov	r0, r31
    3400:	c1 2c       	mov	r12, r1
    3402:	d1 2c       	mov	r13, r1
    3404:	f0 e8       	ldi	r31, 0x80	; 128
    3406:	ef 2e       	mov	r14, r31
    3408:	ff eb       	ldi	r31, 0xBF	; 191
    340a:	ff 2e       	mov	r15, r31
    340c:	f0 2d       	mov	r31, r0
		{
			angle+=360;
		}
	}
	
	HMC5883L_command(0x02,HMCSIGLEMODE);
    340e:	41 e0       	ldi	r20, 0x01	; 1
    3410:	62 e0       	ldi	r22, 0x02	; 2
    3412:	ce 01       	movw	r24, r28
    3414:	0e 94 9a 18 	call	0x3134	; 0x3134 <_ZN7Kompass16HMC5883L_commandEhh>
	return angle;
}
    3418:	c7 01       	movw	r24, r14
    341a:	b6 01       	movw	r22, r12
    341c:	df 91       	pop	r29
    341e:	cf 91       	pop	r28
    3420:	ff 90       	pop	r15
    3422:	ef 90       	pop	r14
    3424:	df 90       	pop	r13
    3426:	cf 90       	pop	r12
    3428:	08 95       	ret

0000342a <_ZN7Kompass25kallibrierung_ruecksetzenEv>:

void Kompass::kallibrierung_ruecksetzen(){
    342a:	fc 01       	movw	r30, r24
	for (uint8_t i=0;i<3;i++)
	{
		max[i]=0;
    342c:	16 86       	std	Z+14, r1	; 0x0e
    342e:	15 86       	std	Z+13, r1	; 0x0d
		min[i]=0;
    3430:	14 8a       	std	Z+20, r1	; 0x14
    3432:	13 8a       	std	Z+19, r1	; 0x13
		offset[i]=0;
    3434:	10 86       	std	Z+8, r1	; 0x08
    3436:	17 82       	std	Z+7, r1	; 0x07
}

void Kompass::kallibrierung_ruecksetzen(){
	for (uint8_t i=0;i<3;i++)
	{
		max[i]=0;
    3438:	10 8a       	std	Z+16, r1	; 0x10
    343a:	17 86       	std	Z+15, r1	; 0x0f
		min[i]=0;
    343c:	16 8a       	std	Z+22, r1	; 0x16
    343e:	15 8a       	std	Z+21, r1	; 0x15
		offset[i]=0;
    3440:	12 86       	std	Z+10, r1	; 0x0a
    3442:	11 86       	std	Z+9, r1	; 0x09
}

void Kompass::kallibrierung_ruecksetzen(){
	for (uint8_t i=0;i<3;i++)
	{
		max[i]=0;
    3444:	12 8a       	std	Z+18, r1	; 0x12
    3446:	11 8a       	std	Z+17, r1	; 0x11
		min[i]=0;
    3448:	10 8e       	std	Z+24, r1	; 0x18
    344a:	17 8a       	std	Z+23, r1	; 0x17
		offset[i]=0;
    344c:	14 86       	std	Z+12, r1	; 0x0c
    344e:	13 86       	std	Z+11, r1	; 0x0b
    3450:	08 95       	ret

00003452 <_ZN3RTCC1Ev>:


#include "RTC.h"

// default constructor
RTC::RTC()
    3452:	dc 01       	movw	r26, r24
{
	Sekunden=0;
    3454:	1a 96       	adiw	r26, 0x0a	; 10
    3456:	1c 92       	st	X, r1
    3458:	1a 97       	sbiw	r26, 0x0a	; 10
	HundSekunden=0;
    345a:	1b 96       	adiw	r26, 0x0b	; 11
    345c:	1c 92       	st	X, r1
    345e:	1b 97       	sbiw	r26, 0x0b	; 11
	Minuten=0;
    3460:	19 96       	adiw	r26, 0x09	; 9
    3462:	1c 92       	st	X, r1
    3464:	19 97       	sbiw	r26, 0x09	; 9
	Stunden=0;
    3466:	18 96       	adiw	r26, 0x08	; 8
    3468:	1c 92       	st	X, r1
    346a:	18 97       	sbiw	r26, 0x08	; 8
	Tag=0;
    346c:	1c 96       	adiw	r26, 0x0c	; 12
    346e:	1c 92       	st	X, r1
    3470:	1c 97       	sbiw	r26, 0x0c	; 12
	Monat=0;
    3472:	1d 96       	adiw	r26, 0x0d	; 13
    3474:	1c 92       	st	X, r1
    3476:	1d 97       	sbiw	r26, 0x0d	; 13
	Jahr=0;
    3478:	1e 96       	adiw	r26, 0x0e	; 14
    347a:	1c 92       	st	X, r1
    347c:	1e 97       	sbiw	r26, 0x0e	; 14
    347e:	fc 01       	movw	r30, r24
	for(uint8_t i=0;i<bitsderrtc;i++){
    3480:	80 e0       	ldi	r24, 0x00	; 0
		msg_uhr[i]=0;
    3482:	11 92       	st	Z+, r1
	Minuten=0;
	Stunden=0;
	Tag=0;
	Monat=0;
	Jahr=0;
	for(uint8_t i=0;i<bitsderrtc;i++){
    3484:	8f 5f       	subi	r24, 0xFF	; 255
    3486:	88 30       	cpi	r24, 0x08	; 8
    3488:	e1 f7       	brne	.-8      	; 0x3482 <_ZN3RTCC1Ev+0x30>
		msg_uhr[i]=0;
	}
	//Einstellungen des Ausgabebuffers
	msg_uhr[2]=':';
    348a:	8a e3       	ldi	r24, 0x3A	; 58
    348c:	12 96       	adiw	r26, 0x02	; 2
    348e:	8c 93       	st	X, r24
    3490:	12 97       	sbiw	r26, 0x02	; 2
	msg_uhr[5]=':';
    3492:	15 96       	adiw	r26, 0x05	; 5
    3494:	8c 93       	st	X, r24
    3496:	08 95       	ret

00003498 <_ZN3RTCD1Ev>:
	//msg_dat[2]='.';
	//msg_dat[5]='.';
} //RTC

// default destructor
RTC::~RTC()
    3498:	08 95       	ret

0000349a <_ZN3RTC4zeitEv>:
{
} //~RTC

uint8_t RTC::zeit(){
    349a:	fc 01       	movw	r30, r24
	//HundSekunden++; sitzt im Vektor um Taster besser entprellen zu koennen
	if (HundSekunden>=100)
    349c:	83 85       	ldd	r24, Z+11	; 0x0b
    349e:	84 36       	cpi	r24, 0x64	; 100
    34a0:	e8 f0       	brcs	.+58     	; 0x34dc <_ZN3RTC4zeitEv+0x42>
	{
		HundSekunden = 0;
    34a2:	13 86       	std	Z+11, r1	; 0x0b
		Sekunden++;
    34a4:	82 85       	ldd	r24, Z+10	; 0x0a
    34a6:	91 e0       	ldi	r25, 0x01	; 1
    34a8:	98 0f       	add	r25, r24
    34aa:	92 87       	std	Z+10, r25	; 0x0a
		interupts |= 0x02;
    34ac:	97 85       	ldd	r25, Z+15	; 0x0f
    34ae:	92 60       	ori	r25, 0x02	; 2
    34b0:	97 87       	std	Z+15, r25	; 0x0f
		if (Sekunden >= 60 && Sekunden <=200){
    34b2:	8b 53       	subi	r24, 0x3B	; 59
    34b4:	8d 38       	cpi	r24, 0x8D	; 141
    34b6:	90 f4       	brcc	.+36     	; 0x34dc <_ZN3RTC4zeitEv+0x42>
			Sekunden = 0;
    34b8:	12 86       	std	Z+10, r1	; 0x0a
			Minuten++;
    34ba:	81 85       	ldd	r24, Z+9	; 0x09
    34bc:	8f 5f       	subi	r24, 0xFF	; 255
			if(Minuten >= 60){
    34be:	8c 33       	cpi	r24, 0x3C	; 60
    34c0:	10 f4       	brcc	.+4      	; 0x34c6 <_ZN3RTC4zeitEv+0x2c>
		HundSekunden = 0;
		Sekunden++;
		interupts |= 0x02;
		if (Sekunden >= 60 && Sekunden <=200){
			Sekunden = 0;
			Minuten++;
    34c2:	81 87       	std	Z+9, r24	; 0x09
    34c4:	04 c0       	rjmp	.+8      	; 0x34ce <_ZN3RTC4zeitEv+0x34>
			if(Minuten >= 60){
				Minuten = 0;
    34c6:	11 86       	std	Z+9, r1	; 0x09
				Stunden++;
    34c8:	80 85       	ldd	r24, Z+8	; 0x08
    34ca:	8f 5f       	subi	r24, 0xFF	; 255
    34cc:	80 87       	std	Z+8, r24	; 0x08
			}
			if(Stunden >= 24){
    34ce:	80 85       	ldd	r24, Z+8	; 0x08
    34d0:	88 31       	cpi	r24, 0x18	; 24
    34d2:	20 f0       	brcs	.+8      	; 0x34dc <_ZN3RTC4zeitEv+0x42>
				Stunden = 0;
    34d4:	10 86       	std	Z+8, r1	; 0x08
	*/
	return 0;
}

void RTC::kalender(){
	Tag++;
    34d6:	84 85       	ldd	r24, Z+12	; 0x0c
    34d8:	8f 5f       	subi	r24, 0xFF	; 255
    34da:	84 87       	std	Z+12, r24	; 0x0c
				Stunden = 0;
				kalender();
			}
		}
	}
	msg_uhr[0]='0'+Stunden/10;
    34dc:	90 85       	ldd	r25, Z+8	; 0x08
    34de:	8d ec       	ldi	r24, 0xCD	; 205
    34e0:	98 9f       	mul	r25, r24
    34e2:	21 2d       	mov	r18, r1
    34e4:	11 24       	eor	r1, r1
    34e6:	26 95       	lsr	r18
    34e8:	26 95       	lsr	r18
    34ea:	26 95       	lsr	r18
    34ec:	30 e3       	ldi	r19, 0x30	; 48
    34ee:	32 0f       	add	r19, r18
    34f0:	30 83       	st	Z, r19
	msg_uhr[1]='0'+Stunden%10;
    34f2:	22 0f       	add	r18, r18
    34f4:	32 2f       	mov	r19, r18
    34f6:	33 0f       	add	r19, r19
    34f8:	33 0f       	add	r19, r19
    34fa:	23 0f       	add	r18, r19
    34fc:	92 1b       	sub	r25, r18
    34fe:	90 5d       	subi	r25, 0xD0	; 208
    3500:	91 83       	std	Z+1, r25	; 0x01
	msg_uhr[3]='0'+Minuten/10;
    3502:	91 85       	ldd	r25, Z+9	; 0x09
    3504:	98 9f       	mul	r25, r24
    3506:	21 2d       	mov	r18, r1
    3508:	11 24       	eor	r1, r1
    350a:	26 95       	lsr	r18
    350c:	26 95       	lsr	r18
    350e:	26 95       	lsr	r18
    3510:	30 e3       	ldi	r19, 0x30	; 48
    3512:	32 0f       	add	r19, r18
    3514:	33 83       	std	Z+3, r19	; 0x03
	msg_uhr[4]='0'+Minuten%10;
    3516:	22 0f       	add	r18, r18
    3518:	32 2f       	mov	r19, r18
    351a:	33 0f       	add	r19, r19
    351c:	33 0f       	add	r19, r19
    351e:	23 0f       	add	r18, r19
    3520:	92 1b       	sub	r25, r18
    3522:	90 5d       	subi	r25, 0xD0	; 208
    3524:	94 83       	std	Z+4, r25	; 0x04
	msg_uhr[6]='0'+Sekunden/10;
    3526:	92 85       	ldd	r25, Z+10	; 0x0a
    3528:	98 9f       	mul	r25, r24
    352a:	81 2d       	mov	r24, r1
    352c:	11 24       	eor	r1, r1
    352e:	86 95       	lsr	r24
    3530:	86 95       	lsr	r24
    3532:	86 95       	lsr	r24
    3534:	20 e3       	ldi	r18, 0x30	; 48
    3536:	28 0f       	add	r18, r24
    3538:	26 83       	std	Z+6, r18	; 0x06
	msg_uhr[7]='0'+Sekunden%10;
    353a:	88 0f       	add	r24, r24
    353c:	28 2f       	mov	r18, r24
    353e:	22 0f       	add	r18, r18
    3540:	22 0f       	add	r18, r18
    3542:	82 0f       	add	r24, r18
    3544:	98 1b       	sub	r25, r24
    3546:	90 5d       	subi	r25, 0xD0	; 208
    3548:	97 83       	std	Z+7, r25	; 0x07
	msg_dat[4]='0'+GetTime.Month%10;
	msg_dat[6]='0'+(GetTime.Year-2000)/10;
	msg_dat[7]='0'+(GetTime.Year-2000)%10;
	*/
	return 0;
}
    354a:	80 e0       	ldi	r24, 0x00	; 0
    354c:	08 95       	ret

0000354e <_ZN3RTC10dummyeinstEv>:

void RTC::kalender(){
	Tag++;
}

void RTC::dummyeinst(){
    354e:	fc 01       	movw	r30, r24
	Stunden=10;
    3550:	8a e0       	ldi	r24, 0x0A	; 10
    3552:	80 87       	std	Z+8, r24	; 0x08
	Minuten=30;
    3554:	8e e1       	ldi	r24, 0x1E	; 30
    3556:	81 87       	std	Z+9, r24	; 0x09
	Tag=27;
    3558:	8b e1       	ldi	r24, 0x1B	; 27
    355a:	84 87       	std	Z+12, r24	; 0x0c
	Monat=8;
    355c:	88 e0       	ldi	r24, 0x08	; 8
    355e:	85 87       	std	Z+13, r24	; 0x0d
	Jahr=15;
    3560:	8f e0       	ldi	r24, 0x0F	; 15
    3562:	86 87       	std	Z+14, r24	; 0x0e
    3564:	08 95       	ret

00003566 <_ZN3RTC8RTCstartEv>:
}

void RTC::RTCstart(){
	//Einstellungen des Ausgabebuffers
	msg_uhr[2]=':';
    3566:	2a e3       	ldi	r18, 0x3A	; 58
    3568:	fc 01       	movw	r30, r24
    356a:	22 83       	std	Z+2, r18	; 0x02
	msg_uhr[5]=':';
    356c:	25 83       	std	Z+5, r18	; 0x05
	//Timer2 als 1ms Timer fuer die RTC
	//noch synchrom
	TCNT2 = TIMER2RTCTIME;
    356e:	80 e7       	ldi	r24, 0x70	; 112
    3570:	80 93 b2 00 	sts	0x00B2, r24
	TIMSK2 = (1<<TOIE2);
    3574:	81 e0       	ldi	r24, 0x01	; 1
    3576:	80 93 70 00 	sts	0x0070, r24
	TCCR2B = (1<<CS22) | (1<<CS21);
    357a:	86 e0       	ldi	r24, 0x06	; 6
    357c:	80 93 b1 00 	sts	0x00B1, r24
    3580:	08 95       	ret

00003582 <_ZN3RTC7RTCstopEv>:
}

void RTC::RTCstop(){
	TCCR2B &= ~((1<<CS22) | (1<<CS21));
    3582:	e1 eb       	ldi	r30, 0xB1	; 177
    3584:	f0 e0       	ldi	r31, 0x00	; 0
    3586:	80 81       	ld	r24, Z
    3588:	89 7f       	andi	r24, 0xF9	; 249
    358a:	80 83       	st	Z, r24
    358c:	08 95       	ret

0000358e <_ZN3RTC5timerEv>:
}

uint8_t RTC::timer(){
    358e:	fc 01       	movw	r30, r24
	if (Sekunden>60)
    3590:	82 85       	ldd	r24, Z+10	; 0x0a
    3592:	8d 33       	cpi	r24, 0x3D	; 61
    3594:	b8 f0       	brcs	.+46     	; 0x35c4 <_ZN3RTC5timerEv+0x36>
	{
		Sekunden=59;
    3596:	8b e3       	ldi	r24, 0x3B	; 59
    3598:	82 87       	std	Z+10, r24	; 0x0a
		Minuten--;
    359a:	81 85       	ldd	r24, Z+9	; 0x09
    359c:	81 50       	subi	r24, 0x01	; 1
		if (Minuten>60)
    359e:	8d 33       	cpi	r24, 0x3D	; 61
    35a0:	18 f4       	brcc	.+6      	; 0x35a8 <_ZN3RTC5timerEv+0x1a>

uint8_t RTC::timer(){
	if (Sekunden>60)
	{
		Sekunden=59;
		Minuten--;
    35a2:	81 87       	std	Z+9, r24	; 0x09
				Sekunden=0;
				return 1;
			}
		}
	}
	return 0;
    35a4:	80 e0       	ldi	r24, 0x00	; 0
    35a6:	08 95       	ret
	{
		Sekunden=59;
		Minuten--;
		if (Minuten>60)
		{
			Minuten=59;
    35a8:	8b e3       	ldi	r24, 0x3B	; 59
    35aa:	81 87       	std	Z+9, r24	; 0x09
			Stunden--;
    35ac:	80 85       	ldd	r24, Z+8	; 0x08
    35ae:	81 50       	subi	r24, 0x01	; 1
			if (Stunden>24)
    35b0:	89 31       	cpi	r24, 0x19	; 25
    35b2:	18 f4       	brcc	.+6      	; 0x35ba <_ZN3RTC5timerEv+0x2c>
		Sekunden=59;
		Minuten--;
		if (Minuten>60)
		{
			Minuten=59;
			Stunden--;
    35b4:	80 87       	std	Z+8, r24	; 0x08
				Sekunden=0;
				return 1;
			}
		}
	}
	return 0;
    35b6:	80 e0       	ldi	r24, 0x00	; 0
    35b8:	08 95       	ret
		{
			Minuten=59;
			Stunden--;
			if (Stunden>24)
			{
				Stunden=0;
    35ba:	10 86       	std	Z+8, r1	; 0x08
				Minuten=0;
    35bc:	11 86       	std	Z+9, r1	; 0x09
				Sekunden=0;
    35be:	12 86       	std	Z+10, r1	; 0x0a
				return 1;
    35c0:	81 e0       	ldi	r24, 0x01	; 1
    35c2:	08 95       	ret
			}
		}
	}
	return 0;
    35c4:	80 e0       	ldi	r24, 0x00	; 0
}
    35c6:	08 95       	ret

000035c8 <__subsf3>:
    35c8:	50 58       	subi	r21, 0x80	; 128

000035ca <__addsf3>:
    35ca:	bb 27       	eor	r27, r27
    35cc:	aa 27       	eor	r26, r26
    35ce:	0e d0       	rcall	.+28     	; 0x35ec <__addsf3x>
    35d0:	27 c2       	rjmp	.+1102   	; 0x3a20 <__fp_round>
    35d2:	f0 d1       	rcall	.+992    	; 0x39b4 <__fp_pscA>
    35d4:	30 f0       	brcs	.+12     	; 0x35e2 <__addsf3+0x18>
    35d6:	f5 d1       	rcall	.+1002   	; 0x39c2 <__fp_pscB>
    35d8:	20 f0       	brcs	.+8      	; 0x35e2 <__addsf3+0x18>
    35da:	31 f4       	brne	.+12     	; 0x35e8 <__addsf3+0x1e>
    35dc:	9f 3f       	cpi	r25, 0xFF	; 255
    35de:	11 f4       	brne	.+4      	; 0x35e4 <__addsf3+0x1a>
    35e0:	1e f4       	brtc	.+6      	; 0x35e8 <__addsf3+0x1e>
    35e2:	c0 c1       	rjmp	.+896    	; 0x3964 <__fp_nan>
    35e4:	0e f4       	brtc	.+2      	; 0x35e8 <__addsf3+0x1e>
    35e6:	e0 95       	com	r30
    35e8:	e7 fb       	bst	r30, 7
    35ea:	b6 c1       	rjmp	.+876    	; 0x3958 <__fp_inf>

000035ec <__addsf3x>:
    35ec:	e9 2f       	mov	r30, r25
    35ee:	3a d2       	rcall	.+1140   	; 0x3a64 <__fp_split3>
    35f0:	80 f3       	brcs	.-32     	; 0x35d2 <__addsf3+0x8>
    35f2:	ba 17       	cp	r27, r26
    35f4:	62 07       	cpc	r22, r18
    35f6:	73 07       	cpc	r23, r19
    35f8:	84 07       	cpc	r24, r20
    35fa:	95 07       	cpc	r25, r21
    35fc:	18 f0       	brcs	.+6      	; 0x3604 <__addsf3x+0x18>
    35fe:	71 f4       	brne	.+28     	; 0x361c <__addsf3x+0x30>
    3600:	9e f5       	brtc	.+102    	; 0x3668 <__addsf3x+0x7c>
    3602:	52 c2       	rjmp	.+1188   	; 0x3aa8 <__fp_zero>
    3604:	0e f4       	brtc	.+2      	; 0x3608 <__addsf3x+0x1c>
    3606:	e0 95       	com	r30
    3608:	0b 2e       	mov	r0, r27
    360a:	ba 2f       	mov	r27, r26
    360c:	a0 2d       	mov	r26, r0
    360e:	0b 01       	movw	r0, r22
    3610:	b9 01       	movw	r22, r18
    3612:	90 01       	movw	r18, r0
    3614:	0c 01       	movw	r0, r24
    3616:	ca 01       	movw	r24, r20
    3618:	a0 01       	movw	r20, r0
    361a:	11 24       	eor	r1, r1
    361c:	ff 27       	eor	r31, r31
    361e:	59 1b       	sub	r21, r25
    3620:	99 f0       	breq	.+38     	; 0x3648 <__addsf3x+0x5c>
    3622:	59 3f       	cpi	r21, 0xF9	; 249
    3624:	50 f4       	brcc	.+20     	; 0x363a <__addsf3x+0x4e>
    3626:	50 3e       	cpi	r21, 0xE0	; 224
    3628:	68 f1       	brcs	.+90     	; 0x3684 <__addsf3x+0x98>
    362a:	1a 16       	cp	r1, r26
    362c:	f0 40       	sbci	r31, 0x00	; 0
    362e:	a2 2f       	mov	r26, r18
    3630:	23 2f       	mov	r18, r19
    3632:	34 2f       	mov	r19, r20
    3634:	44 27       	eor	r20, r20
    3636:	58 5f       	subi	r21, 0xF8	; 248
    3638:	f3 cf       	rjmp	.-26     	; 0x3620 <__addsf3x+0x34>
    363a:	46 95       	lsr	r20
    363c:	37 95       	ror	r19
    363e:	27 95       	ror	r18
    3640:	a7 95       	ror	r26
    3642:	f0 40       	sbci	r31, 0x00	; 0
    3644:	53 95       	inc	r21
    3646:	c9 f7       	brne	.-14     	; 0x363a <__addsf3x+0x4e>
    3648:	7e f4       	brtc	.+30     	; 0x3668 <__addsf3x+0x7c>
    364a:	1f 16       	cp	r1, r31
    364c:	ba 0b       	sbc	r27, r26
    364e:	62 0b       	sbc	r22, r18
    3650:	73 0b       	sbc	r23, r19
    3652:	84 0b       	sbc	r24, r20
    3654:	ba f0       	brmi	.+46     	; 0x3684 <__addsf3x+0x98>
    3656:	91 50       	subi	r25, 0x01	; 1
    3658:	a1 f0       	breq	.+40     	; 0x3682 <__addsf3x+0x96>
    365a:	ff 0f       	add	r31, r31
    365c:	bb 1f       	adc	r27, r27
    365e:	66 1f       	adc	r22, r22
    3660:	77 1f       	adc	r23, r23
    3662:	88 1f       	adc	r24, r24
    3664:	c2 f7       	brpl	.-16     	; 0x3656 <__addsf3x+0x6a>
    3666:	0e c0       	rjmp	.+28     	; 0x3684 <__addsf3x+0x98>
    3668:	ba 0f       	add	r27, r26
    366a:	62 1f       	adc	r22, r18
    366c:	73 1f       	adc	r23, r19
    366e:	84 1f       	adc	r24, r20
    3670:	48 f4       	brcc	.+18     	; 0x3684 <__addsf3x+0x98>
    3672:	87 95       	ror	r24
    3674:	77 95       	ror	r23
    3676:	67 95       	ror	r22
    3678:	b7 95       	ror	r27
    367a:	f7 95       	ror	r31
    367c:	9e 3f       	cpi	r25, 0xFE	; 254
    367e:	08 f0       	brcs	.+2      	; 0x3682 <__addsf3x+0x96>
    3680:	b3 cf       	rjmp	.-154    	; 0x35e8 <__addsf3+0x1e>
    3682:	93 95       	inc	r25
    3684:	88 0f       	add	r24, r24
    3686:	08 f0       	brcs	.+2      	; 0x368a <__addsf3x+0x9e>
    3688:	99 27       	eor	r25, r25
    368a:	ee 0f       	add	r30, r30
    368c:	97 95       	ror	r25
    368e:	87 95       	ror	r24
    3690:	08 95       	ret
    3692:	90 d1       	rcall	.+800    	; 0x39b4 <__fp_pscA>
    3694:	58 f0       	brcs	.+22     	; 0x36ac <__addsf3x+0xc0>
    3696:	80 e8       	ldi	r24, 0x80	; 128
    3698:	91 e0       	ldi	r25, 0x01	; 1
    369a:	09 f4       	brne	.+2      	; 0x369e <__addsf3x+0xb2>
    369c:	9e ef       	ldi	r25, 0xFE	; 254
    369e:	91 d1       	rcall	.+802    	; 0x39c2 <__fp_pscB>
    36a0:	28 f0       	brcs	.+10     	; 0x36ac <__addsf3x+0xc0>
    36a2:	40 e8       	ldi	r20, 0x80	; 128
    36a4:	51 e0       	ldi	r21, 0x01	; 1
    36a6:	59 f4       	brne	.+22     	; 0x36be <atan2+0xe>
    36a8:	5e ef       	ldi	r21, 0xFE	; 254
    36aa:	09 c0       	rjmp	.+18     	; 0x36be <atan2+0xe>
    36ac:	5b c1       	rjmp	.+694    	; 0x3964 <__fp_nan>
    36ae:	fc c1       	rjmp	.+1016   	; 0x3aa8 <__fp_zero>

000036b0 <atan2>:
    36b0:	e9 2f       	mov	r30, r25
    36b2:	e0 78       	andi	r30, 0x80	; 128
    36b4:	d7 d1       	rcall	.+942    	; 0x3a64 <__fp_split3>
    36b6:	68 f3       	brcs	.-38     	; 0x3692 <__addsf3x+0xa6>
    36b8:	09 2e       	mov	r0, r25
    36ba:	05 2a       	or	r0, r21
    36bc:	c1 f3       	breq	.-16     	; 0x36ae <__addsf3x+0xc2>
    36be:	26 17       	cp	r18, r22
    36c0:	37 07       	cpc	r19, r23
    36c2:	48 07       	cpc	r20, r24
    36c4:	59 07       	cpc	r21, r25
    36c6:	38 f0       	brcs	.+14     	; 0x36d6 <atan2+0x26>
    36c8:	0e 2e       	mov	r0, r30
    36ca:	07 f8       	bld	r0, 7
    36cc:	e0 25       	eor	r30, r0
    36ce:	69 f0       	breq	.+26     	; 0x36ea <atan2+0x3a>
    36d0:	e0 25       	eor	r30, r0
    36d2:	e0 64       	ori	r30, 0x40	; 64
    36d4:	0a c0       	rjmp	.+20     	; 0x36ea <atan2+0x3a>
    36d6:	ef 63       	ori	r30, 0x3F	; 63
    36d8:	07 f8       	bld	r0, 7
    36da:	00 94       	com	r0
    36dc:	07 fa       	bst	r0, 7
    36de:	db 01       	movw	r26, r22
    36e0:	b9 01       	movw	r22, r18
    36e2:	9d 01       	movw	r18, r26
    36e4:	dc 01       	movw	r26, r24
    36e6:	ca 01       	movw	r24, r20
    36e8:	ad 01       	movw	r20, r26
    36ea:	ef 93       	push	r30
    36ec:	4a d0       	rcall	.+148    	; 0x3782 <__divsf3_pse>
    36ee:	98 d1       	rcall	.+816    	; 0x3a20 <__fp_round>
    36f0:	0a d0       	rcall	.+20     	; 0x3706 <atan>
    36f2:	5f 91       	pop	r21
    36f4:	55 23       	and	r21, r21
    36f6:	31 f0       	breq	.+12     	; 0x3704 <atan2+0x54>
    36f8:	2b ed       	ldi	r18, 0xDB	; 219
    36fa:	3f e0       	ldi	r19, 0x0F	; 15
    36fc:	49 e4       	ldi	r20, 0x49	; 73
    36fe:	50 fd       	sbrc	r21, 0
    3700:	49 ec       	ldi	r20, 0xC9	; 201
    3702:	63 cf       	rjmp	.-314    	; 0x35ca <__addsf3>
    3704:	08 95       	ret

00003706 <atan>:
    3706:	df 93       	push	r29
    3708:	dd 27       	eor	r29, r29
    370a:	b9 2f       	mov	r27, r25
    370c:	bf 77       	andi	r27, 0x7F	; 127
    370e:	40 e8       	ldi	r20, 0x80	; 128
    3710:	5f e3       	ldi	r21, 0x3F	; 63
    3712:	16 16       	cp	r1, r22
    3714:	17 06       	cpc	r1, r23
    3716:	48 07       	cpc	r20, r24
    3718:	5b 07       	cpc	r21, r27
    371a:	10 f4       	brcc	.+4      	; 0x3720 <atan+0x1a>
    371c:	d9 2f       	mov	r29, r25
    371e:	cf d1       	rcall	.+926    	; 0x3abe <inverse>
    3720:	9f 93       	push	r25
    3722:	8f 93       	push	r24
    3724:	7f 93       	push	r23
    3726:	6f 93       	push	r22
    3728:	3a d2       	rcall	.+1140   	; 0x3b9e <square>
    372a:	ec e8       	ldi	r30, 0x8C	; 140
    372c:	f0 e0       	ldi	r31, 0x00	; 0
    372e:	1d d1       	rcall	.+570    	; 0x396a <__fp_powser>
    3730:	77 d1       	rcall	.+750    	; 0x3a20 <__fp_round>
    3732:	2f 91       	pop	r18
    3734:	3f 91       	pop	r19
    3736:	4f 91       	pop	r20
    3738:	5f 91       	pop	r21
    373a:	d4 d1       	rcall	.+936    	; 0x3ae4 <__mulsf3x>
    373c:	dd 23       	and	r29, r29
    373e:	49 f0       	breq	.+18     	; 0x3752 <atan+0x4c>
    3740:	90 58       	subi	r25, 0x80	; 128
    3742:	a2 ea       	ldi	r26, 0xA2	; 162
    3744:	2a ed       	ldi	r18, 0xDA	; 218
    3746:	3f e0       	ldi	r19, 0x0F	; 15
    3748:	49 ec       	ldi	r20, 0xC9	; 201
    374a:	5f e3       	ldi	r21, 0x3F	; 63
    374c:	d0 78       	andi	r29, 0x80	; 128
    374e:	5d 27       	eor	r21, r29
    3750:	4d df       	rcall	.-358    	; 0x35ec <__addsf3x>
    3752:	df 91       	pop	r29
    3754:	65 c1       	rjmp	.+714    	; 0x3a20 <__fp_round>

00003756 <__cmpsf2>:
    3756:	dc d0       	rcall	.+440    	; 0x3910 <__fp_cmp>
    3758:	08 f4       	brcc	.+2      	; 0x375c <__cmpsf2+0x6>
    375a:	81 e0       	ldi	r24, 0x01	; 1
    375c:	08 95       	ret

0000375e <cos>:
    375e:	39 d1       	rcall	.+626    	; 0x39d2 <__fp_rempio2>
    3760:	e3 95       	inc	r30
    3762:	6f c1       	rjmp	.+734    	; 0x3a42 <__fp_sinus>

00003764 <__divsf3>:
    3764:	0c d0       	rcall	.+24     	; 0x377e <__divsf3x>
    3766:	5c c1       	rjmp	.+696    	; 0x3a20 <__fp_round>
    3768:	2c d1       	rcall	.+600    	; 0x39c2 <__fp_pscB>
    376a:	40 f0       	brcs	.+16     	; 0x377c <__divsf3+0x18>
    376c:	23 d1       	rcall	.+582    	; 0x39b4 <__fp_pscA>
    376e:	30 f0       	brcs	.+12     	; 0x377c <__divsf3+0x18>
    3770:	21 f4       	brne	.+8      	; 0x377a <__divsf3+0x16>
    3772:	5f 3f       	cpi	r21, 0xFF	; 255
    3774:	19 f0       	breq	.+6      	; 0x377c <__divsf3+0x18>
    3776:	f0 c0       	rjmp	.+480    	; 0x3958 <__fp_inf>
    3778:	51 11       	cpse	r21, r1
    377a:	97 c1       	rjmp	.+814    	; 0x3aaa <__fp_szero>
    377c:	f3 c0       	rjmp	.+486    	; 0x3964 <__fp_nan>

0000377e <__divsf3x>:
    377e:	72 d1       	rcall	.+740    	; 0x3a64 <__fp_split3>
    3780:	98 f3       	brcs	.-26     	; 0x3768 <__divsf3+0x4>

00003782 <__divsf3_pse>:
    3782:	99 23       	and	r25, r25
    3784:	c9 f3       	breq	.-14     	; 0x3778 <__divsf3+0x14>
    3786:	55 23       	and	r21, r21
    3788:	b1 f3       	breq	.-20     	; 0x3776 <__divsf3+0x12>
    378a:	95 1b       	sub	r25, r21
    378c:	55 0b       	sbc	r21, r21
    378e:	bb 27       	eor	r27, r27
    3790:	aa 27       	eor	r26, r26
    3792:	62 17       	cp	r22, r18
    3794:	73 07       	cpc	r23, r19
    3796:	84 07       	cpc	r24, r20
    3798:	38 f0       	brcs	.+14     	; 0x37a8 <__divsf3_pse+0x26>
    379a:	9f 5f       	subi	r25, 0xFF	; 255
    379c:	5f 4f       	sbci	r21, 0xFF	; 255
    379e:	22 0f       	add	r18, r18
    37a0:	33 1f       	adc	r19, r19
    37a2:	44 1f       	adc	r20, r20
    37a4:	aa 1f       	adc	r26, r26
    37a6:	a9 f3       	breq	.-22     	; 0x3792 <__divsf3_pse+0x10>
    37a8:	33 d0       	rcall	.+102    	; 0x3810 <__divsf3_pse+0x8e>
    37aa:	0e 2e       	mov	r0, r30
    37ac:	3a f0       	brmi	.+14     	; 0x37bc <__divsf3_pse+0x3a>
    37ae:	e0 e8       	ldi	r30, 0x80	; 128
    37b0:	30 d0       	rcall	.+96     	; 0x3812 <__divsf3_pse+0x90>
    37b2:	91 50       	subi	r25, 0x01	; 1
    37b4:	50 40       	sbci	r21, 0x00	; 0
    37b6:	e6 95       	lsr	r30
    37b8:	00 1c       	adc	r0, r0
    37ba:	ca f7       	brpl	.-14     	; 0x37ae <__divsf3_pse+0x2c>
    37bc:	29 d0       	rcall	.+82     	; 0x3810 <__divsf3_pse+0x8e>
    37be:	fe 2f       	mov	r31, r30
    37c0:	27 d0       	rcall	.+78     	; 0x3810 <__divsf3_pse+0x8e>
    37c2:	66 0f       	add	r22, r22
    37c4:	77 1f       	adc	r23, r23
    37c6:	88 1f       	adc	r24, r24
    37c8:	bb 1f       	adc	r27, r27
    37ca:	26 17       	cp	r18, r22
    37cc:	37 07       	cpc	r19, r23
    37ce:	48 07       	cpc	r20, r24
    37d0:	ab 07       	cpc	r26, r27
    37d2:	b0 e8       	ldi	r27, 0x80	; 128
    37d4:	09 f0       	breq	.+2      	; 0x37d8 <__divsf3_pse+0x56>
    37d6:	bb 0b       	sbc	r27, r27
    37d8:	80 2d       	mov	r24, r0
    37da:	bf 01       	movw	r22, r30
    37dc:	ff 27       	eor	r31, r31
    37de:	93 58       	subi	r25, 0x83	; 131
    37e0:	5f 4f       	sbci	r21, 0xFF	; 255
    37e2:	2a f0       	brmi	.+10     	; 0x37ee <__divsf3_pse+0x6c>
    37e4:	9e 3f       	cpi	r25, 0xFE	; 254
    37e6:	51 05       	cpc	r21, r1
    37e8:	68 f0       	brcs	.+26     	; 0x3804 <__divsf3_pse+0x82>
    37ea:	b6 c0       	rjmp	.+364    	; 0x3958 <__fp_inf>
    37ec:	5e c1       	rjmp	.+700    	; 0x3aaa <__fp_szero>
    37ee:	5f 3f       	cpi	r21, 0xFF	; 255
    37f0:	ec f3       	brlt	.-6      	; 0x37ec <__divsf3_pse+0x6a>
    37f2:	98 3e       	cpi	r25, 0xE8	; 232
    37f4:	dc f3       	brlt	.-10     	; 0x37ec <__divsf3_pse+0x6a>
    37f6:	86 95       	lsr	r24
    37f8:	77 95       	ror	r23
    37fa:	67 95       	ror	r22
    37fc:	b7 95       	ror	r27
    37fe:	f7 95       	ror	r31
    3800:	9f 5f       	subi	r25, 0xFF	; 255
    3802:	c9 f7       	brne	.-14     	; 0x37f6 <__divsf3_pse+0x74>
    3804:	88 0f       	add	r24, r24
    3806:	91 1d       	adc	r25, r1
    3808:	96 95       	lsr	r25
    380a:	87 95       	ror	r24
    380c:	97 f9       	bld	r25, 7
    380e:	08 95       	ret
    3810:	e1 e0       	ldi	r30, 0x01	; 1
    3812:	66 0f       	add	r22, r22
    3814:	77 1f       	adc	r23, r23
    3816:	88 1f       	adc	r24, r24
    3818:	bb 1f       	adc	r27, r27
    381a:	62 17       	cp	r22, r18
    381c:	73 07       	cpc	r23, r19
    381e:	84 07       	cpc	r24, r20
    3820:	ba 07       	cpc	r27, r26
    3822:	20 f0       	brcs	.+8      	; 0x382c <__divsf3_pse+0xaa>
    3824:	62 1b       	sub	r22, r18
    3826:	73 0b       	sbc	r23, r19
    3828:	84 0b       	sbc	r24, r20
    382a:	ba 0b       	sbc	r27, r26
    382c:	ee 1f       	adc	r30, r30
    382e:	88 f7       	brcc	.-30     	; 0x3812 <__divsf3_pse+0x90>
    3830:	e0 95       	com	r30
    3832:	08 95       	ret

00003834 <__fixsfsi>:
    3834:	04 d0       	rcall	.+8      	; 0x383e <__fixunssfsi>
    3836:	68 94       	set
    3838:	b1 11       	cpse	r27, r1
    383a:	37 c1       	rjmp	.+622    	; 0x3aaa <__fp_szero>
    383c:	08 95       	ret

0000383e <__fixunssfsi>:
    383e:	1a d1       	rcall	.+564    	; 0x3a74 <__fp_splitA>
    3840:	88 f0       	brcs	.+34     	; 0x3864 <__fixunssfsi+0x26>
    3842:	9f 57       	subi	r25, 0x7F	; 127
    3844:	90 f0       	brcs	.+36     	; 0x386a <__fixunssfsi+0x2c>
    3846:	b9 2f       	mov	r27, r25
    3848:	99 27       	eor	r25, r25
    384a:	b7 51       	subi	r27, 0x17	; 23
    384c:	a0 f0       	brcs	.+40     	; 0x3876 <__fixunssfsi+0x38>
    384e:	d1 f0       	breq	.+52     	; 0x3884 <__fixunssfsi+0x46>
    3850:	66 0f       	add	r22, r22
    3852:	77 1f       	adc	r23, r23
    3854:	88 1f       	adc	r24, r24
    3856:	99 1f       	adc	r25, r25
    3858:	1a f0       	brmi	.+6      	; 0x3860 <__fixunssfsi+0x22>
    385a:	ba 95       	dec	r27
    385c:	c9 f7       	brne	.-14     	; 0x3850 <__fixunssfsi+0x12>
    385e:	12 c0       	rjmp	.+36     	; 0x3884 <__fixunssfsi+0x46>
    3860:	b1 30       	cpi	r27, 0x01	; 1
    3862:	81 f0       	breq	.+32     	; 0x3884 <__fixunssfsi+0x46>
    3864:	21 d1       	rcall	.+578    	; 0x3aa8 <__fp_zero>
    3866:	b1 e0       	ldi	r27, 0x01	; 1
    3868:	08 95       	ret
    386a:	1e c1       	rjmp	.+572    	; 0x3aa8 <__fp_zero>
    386c:	67 2f       	mov	r22, r23
    386e:	78 2f       	mov	r23, r24
    3870:	88 27       	eor	r24, r24
    3872:	b8 5f       	subi	r27, 0xF8	; 248
    3874:	39 f0       	breq	.+14     	; 0x3884 <__fixunssfsi+0x46>
    3876:	b9 3f       	cpi	r27, 0xF9	; 249
    3878:	cc f3       	brlt	.-14     	; 0x386c <__fixunssfsi+0x2e>
    387a:	86 95       	lsr	r24
    387c:	77 95       	ror	r23
    387e:	67 95       	ror	r22
    3880:	b3 95       	inc	r27
    3882:	d9 f7       	brne	.-10     	; 0x387a <__fixunssfsi+0x3c>
    3884:	3e f4       	brtc	.+14     	; 0x3894 <__fixunssfsi+0x56>
    3886:	90 95       	com	r25
    3888:	80 95       	com	r24
    388a:	70 95       	com	r23
    388c:	61 95       	neg	r22
    388e:	7f 4f       	sbci	r23, 0xFF	; 255
    3890:	8f 4f       	sbci	r24, 0xFF	; 255
    3892:	9f 4f       	sbci	r25, 0xFF	; 255
    3894:	08 95       	ret

00003896 <__floatunsisf>:
    3896:	e8 94       	clt
    3898:	09 c0       	rjmp	.+18     	; 0x38ac <__floatsisf+0x12>

0000389a <__floatsisf>:
    389a:	97 fb       	bst	r25, 7
    389c:	3e f4       	brtc	.+14     	; 0x38ac <__floatsisf+0x12>
    389e:	90 95       	com	r25
    38a0:	80 95       	com	r24
    38a2:	70 95       	com	r23
    38a4:	61 95       	neg	r22
    38a6:	7f 4f       	sbci	r23, 0xFF	; 255
    38a8:	8f 4f       	sbci	r24, 0xFF	; 255
    38aa:	9f 4f       	sbci	r25, 0xFF	; 255
    38ac:	99 23       	and	r25, r25
    38ae:	a9 f0       	breq	.+42     	; 0x38da <__floatsisf+0x40>
    38b0:	f9 2f       	mov	r31, r25
    38b2:	96 e9       	ldi	r25, 0x96	; 150
    38b4:	bb 27       	eor	r27, r27
    38b6:	93 95       	inc	r25
    38b8:	f6 95       	lsr	r31
    38ba:	87 95       	ror	r24
    38bc:	77 95       	ror	r23
    38be:	67 95       	ror	r22
    38c0:	b7 95       	ror	r27
    38c2:	f1 11       	cpse	r31, r1
    38c4:	f8 cf       	rjmp	.-16     	; 0x38b6 <__floatsisf+0x1c>
    38c6:	fa f4       	brpl	.+62     	; 0x3906 <__floatsisf+0x6c>
    38c8:	bb 0f       	add	r27, r27
    38ca:	11 f4       	brne	.+4      	; 0x38d0 <__floatsisf+0x36>
    38cc:	60 ff       	sbrs	r22, 0
    38ce:	1b c0       	rjmp	.+54     	; 0x3906 <__floatsisf+0x6c>
    38d0:	6f 5f       	subi	r22, 0xFF	; 255
    38d2:	7f 4f       	sbci	r23, 0xFF	; 255
    38d4:	8f 4f       	sbci	r24, 0xFF	; 255
    38d6:	9f 4f       	sbci	r25, 0xFF	; 255
    38d8:	16 c0       	rjmp	.+44     	; 0x3906 <__floatsisf+0x6c>
    38da:	88 23       	and	r24, r24
    38dc:	11 f0       	breq	.+4      	; 0x38e2 <__floatsisf+0x48>
    38de:	96 e9       	ldi	r25, 0x96	; 150
    38e0:	11 c0       	rjmp	.+34     	; 0x3904 <__floatsisf+0x6a>
    38e2:	77 23       	and	r23, r23
    38e4:	21 f0       	breq	.+8      	; 0x38ee <__floatsisf+0x54>
    38e6:	9e e8       	ldi	r25, 0x8E	; 142
    38e8:	87 2f       	mov	r24, r23
    38ea:	76 2f       	mov	r23, r22
    38ec:	05 c0       	rjmp	.+10     	; 0x38f8 <__floatsisf+0x5e>
    38ee:	66 23       	and	r22, r22
    38f0:	71 f0       	breq	.+28     	; 0x390e <__floatsisf+0x74>
    38f2:	96 e8       	ldi	r25, 0x86	; 134
    38f4:	86 2f       	mov	r24, r22
    38f6:	70 e0       	ldi	r23, 0x00	; 0
    38f8:	60 e0       	ldi	r22, 0x00	; 0
    38fa:	2a f0       	brmi	.+10     	; 0x3906 <__floatsisf+0x6c>
    38fc:	9a 95       	dec	r25
    38fe:	66 0f       	add	r22, r22
    3900:	77 1f       	adc	r23, r23
    3902:	88 1f       	adc	r24, r24
    3904:	da f7       	brpl	.-10     	; 0x38fc <__floatsisf+0x62>
    3906:	88 0f       	add	r24, r24
    3908:	96 95       	lsr	r25
    390a:	87 95       	ror	r24
    390c:	97 f9       	bld	r25, 7
    390e:	08 95       	ret

00003910 <__fp_cmp>:
    3910:	99 0f       	add	r25, r25
    3912:	00 08       	sbc	r0, r0
    3914:	55 0f       	add	r21, r21
    3916:	aa 0b       	sbc	r26, r26
    3918:	e0 e8       	ldi	r30, 0x80	; 128
    391a:	fe ef       	ldi	r31, 0xFE	; 254
    391c:	16 16       	cp	r1, r22
    391e:	17 06       	cpc	r1, r23
    3920:	e8 07       	cpc	r30, r24
    3922:	f9 07       	cpc	r31, r25
    3924:	c0 f0       	brcs	.+48     	; 0x3956 <__fp_cmp+0x46>
    3926:	12 16       	cp	r1, r18
    3928:	13 06       	cpc	r1, r19
    392a:	e4 07       	cpc	r30, r20
    392c:	f5 07       	cpc	r31, r21
    392e:	98 f0       	brcs	.+38     	; 0x3956 <__fp_cmp+0x46>
    3930:	62 1b       	sub	r22, r18
    3932:	73 0b       	sbc	r23, r19
    3934:	84 0b       	sbc	r24, r20
    3936:	95 0b       	sbc	r25, r21
    3938:	39 f4       	brne	.+14     	; 0x3948 <__fp_cmp+0x38>
    393a:	0a 26       	eor	r0, r26
    393c:	61 f0       	breq	.+24     	; 0x3956 <__fp_cmp+0x46>
    393e:	23 2b       	or	r18, r19
    3940:	24 2b       	or	r18, r20
    3942:	25 2b       	or	r18, r21
    3944:	21 f4       	brne	.+8      	; 0x394e <__fp_cmp+0x3e>
    3946:	08 95       	ret
    3948:	0a 26       	eor	r0, r26
    394a:	09 f4       	brne	.+2      	; 0x394e <__fp_cmp+0x3e>
    394c:	a1 40       	sbci	r26, 0x01	; 1
    394e:	a6 95       	lsr	r26
    3950:	8f ef       	ldi	r24, 0xFF	; 255
    3952:	81 1d       	adc	r24, r1
    3954:	81 1d       	adc	r24, r1
    3956:	08 95       	ret

00003958 <__fp_inf>:
    3958:	97 f9       	bld	r25, 7
    395a:	9f 67       	ori	r25, 0x7F	; 127
    395c:	80 e8       	ldi	r24, 0x80	; 128
    395e:	70 e0       	ldi	r23, 0x00	; 0
    3960:	60 e0       	ldi	r22, 0x00	; 0
    3962:	08 95       	ret

00003964 <__fp_nan>:
    3964:	9f ef       	ldi	r25, 0xFF	; 255
    3966:	80 ec       	ldi	r24, 0xC0	; 192
    3968:	08 95       	ret

0000396a <__fp_powser>:
    396a:	df 93       	push	r29
    396c:	cf 93       	push	r28
    396e:	1f 93       	push	r17
    3970:	0f 93       	push	r16
    3972:	ff 92       	push	r15
    3974:	ef 92       	push	r14
    3976:	df 92       	push	r13
    3978:	7b 01       	movw	r14, r22
    397a:	8c 01       	movw	r16, r24
    397c:	68 94       	set
    397e:	05 c0       	rjmp	.+10     	; 0x398a <__fp_powser+0x20>
    3980:	da 2e       	mov	r13, r26
    3982:	ef 01       	movw	r28, r30
    3984:	af d0       	rcall	.+350    	; 0x3ae4 <__mulsf3x>
    3986:	fe 01       	movw	r30, r28
    3988:	e8 94       	clt
    398a:	a5 91       	lpm	r26, Z+
    398c:	25 91       	lpm	r18, Z+
    398e:	35 91       	lpm	r19, Z+
    3990:	45 91       	lpm	r20, Z+
    3992:	55 91       	lpm	r21, Z+
    3994:	ae f3       	brts	.-22     	; 0x3980 <__fp_powser+0x16>
    3996:	ef 01       	movw	r28, r30
    3998:	29 de       	rcall	.-942    	; 0x35ec <__addsf3x>
    399a:	fe 01       	movw	r30, r28
    399c:	97 01       	movw	r18, r14
    399e:	a8 01       	movw	r20, r16
    39a0:	da 94       	dec	r13
    39a2:	79 f7       	brne	.-34     	; 0x3982 <__fp_powser+0x18>
    39a4:	df 90       	pop	r13
    39a6:	ef 90       	pop	r14
    39a8:	ff 90       	pop	r15
    39aa:	0f 91       	pop	r16
    39ac:	1f 91       	pop	r17
    39ae:	cf 91       	pop	r28
    39b0:	df 91       	pop	r29
    39b2:	08 95       	ret

000039b4 <__fp_pscA>:
    39b4:	00 24       	eor	r0, r0
    39b6:	0a 94       	dec	r0
    39b8:	16 16       	cp	r1, r22
    39ba:	17 06       	cpc	r1, r23
    39bc:	18 06       	cpc	r1, r24
    39be:	09 06       	cpc	r0, r25
    39c0:	08 95       	ret

000039c2 <__fp_pscB>:
    39c2:	00 24       	eor	r0, r0
    39c4:	0a 94       	dec	r0
    39c6:	12 16       	cp	r1, r18
    39c8:	13 06       	cpc	r1, r19
    39ca:	14 06       	cpc	r1, r20
    39cc:	05 06       	cpc	r0, r21
    39ce:	08 95       	ret
    39d0:	c9 cf       	rjmp	.-110    	; 0x3964 <__fp_nan>

000039d2 <__fp_rempio2>:
    39d2:	50 d0       	rcall	.+160    	; 0x3a74 <__fp_splitA>
    39d4:	e8 f3       	brcs	.-6      	; 0x39d0 <__fp_pscB+0xe>
    39d6:	e8 94       	clt
    39d8:	e0 e0       	ldi	r30, 0x00	; 0
    39da:	bb 27       	eor	r27, r27
    39dc:	9f 57       	subi	r25, 0x7F	; 127
    39de:	f0 f0       	brcs	.+60     	; 0x3a1c <__fp_rempio2+0x4a>
    39e0:	2a ed       	ldi	r18, 0xDA	; 218
    39e2:	3f e0       	ldi	r19, 0x0F	; 15
    39e4:	49 ec       	ldi	r20, 0xC9	; 201
    39e6:	06 c0       	rjmp	.+12     	; 0x39f4 <__fp_rempio2+0x22>
    39e8:	ee 0f       	add	r30, r30
    39ea:	bb 0f       	add	r27, r27
    39ec:	66 1f       	adc	r22, r22
    39ee:	77 1f       	adc	r23, r23
    39f0:	88 1f       	adc	r24, r24
    39f2:	28 f0       	brcs	.+10     	; 0x39fe <__fp_rempio2+0x2c>
    39f4:	b2 3a       	cpi	r27, 0xA2	; 162
    39f6:	62 07       	cpc	r22, r18
    39f8:	73 07       	cpc	r23, r19
    39fa:	84 07       	cpc	r24, r20
    39fc:	28 f0       	brcs	.+10     	; 0x3a08 <__fp_rempio2+0x36>
    39fe:	b2 5a       	subi	r27, 0xA2	; 162
    3a00:	62 0b       	sbc	r22, r18
    3a02:	73 0b       	sbc	r23, r19
    3a04:	84 0b       	sbc	r24, r20
    3a06:	e3 95       	inc	r30
    3a08:	9a 95       	dec	r25
    3a0a:	72 f7       	brpl	.-36     	; 0x39e8 <__fp_rempio2+0x16>
    3a0c:	80 38       	cpi	r24, 0x80	; 128
    3a0e:	30 f4       	brcc	.+12     	; 0x3a1c <__fp_rempio2+0x4a>
    3a10:	9a 95       	dec	r25
    3a12:	bb 0f       	add	r27, r27
    3a14:	66 1f       	adc	r22, r22
    3a16:	77 1f       	adc	r23, r23
    3a18:	88 1f       	adc	r24, r24
    3a1a:	d2 f7       	brpl	.-12     	; 0x3a10 <__fp_rempio2+0x3e>
    3a1c:	90 48       	sbci	r25, 0x80	; 128
    3a1e:	e4 c0       	rjmp	.+456    	; 0x3be8 <__fp_mpack_finite>

00003a20 <__fp_round>:
    3a20:	09 2e       	mov	r0, r25
    3a22:	03 94       	inc	r0
    3a24:	00 0c       	add	r0, r0
    3a26:	11 f4       	brne	.+4      	; 0x3a2c <__fp_round+0xc>
    3a28:	88 23       	and	r24, r24
    3a2a:	52 f0       	brmi	.+20     	; 0x3a40 <__fp_round+0x20>
    3a2c:	bb 0f       	add	r27, r27
    3a2e:	40 f4       	brcc	.+16     	; 0x3a40 <__fp_round+0x20>
    3a30:	bf 2b       	or	r27, r31
    3a32:	11 f4       	brne	.+4      	; 0x3a38 <__fp_round+0x18>
    3a34:	60 ff       	sbrs	r22, 0
    3a36:	04 c0       	rjmp	.+8      	; 0x3a40 <__fp_round+0x20>
    3a38:	6f 5f       	subi	r22, 0xFF	; 255
    3a3a:	7f 4f       	sbci	r23, 0xFF	; 255
    3a3c:	8f 4f       	sbci	r24, 0xFF	; 255
    3a3e:	9f 4f       	sbci	r25, 0xFF	; 255
    3a40:	08 95       	ret

00003a42 <__fp_sinus>:
    3a42:	ef 93       	push	r30
    3a44:	e0 ff       	sbrs	r30, 0
    3a46:	06 c0       	rjmp	.+12     	; 0x3a54 <__fp_sinus+0x12>
    3a48:	a2 ea       	ldi	r26, 0xA2	; 162
    3a4a:	2a ed       	ldi	r18, 0xDA	; 218
    3a4c:	3f e0       	ldi	r19, 0x0F	; 15
    3a4e:	49 ec       	ldi	r20, 0xC9	; 201
    3a50:	5f eb       	ldi	r21, 0xBF	; 191
    3a52:	cc dd       	rcall	.-1128   	; 0x35ec <__addsf3x>
    3a54:	e5 df       	rcall	.-54     	; 0x3a20 <__fp_round>
    3a56:	0f 90       	pop	r0
    3a58:	03 94       	inc	r0
    3a5a:	01 fc       	sbrc	r0, 1
    3a5c:	90 58       	subi	r25, 0x80	; 128
    3a5e:	e9 eb       	ldi	r30, 0xB9	; 185
    3a60:	f0 e0       	ldi	r31, 0x00	; 0
    3a62:	ce c0       	rjmp	.+412    	; 0x3c00 <__fp_powsodd>

00003a64 <__fp_split3>:
    3a64:	57 fd       	sbrc	r21, 7
    3a66:	90 58       	subi	r25, 0x80	; 128
    3a68:	44 0f       	add	r20, r20
    3a6a:	55 1f       	adc	r21, r21
    3a6c:	59 f0       	breq	.+22     	; 0x3a84 <__fp_splitA+0x10>
    3a6e:	5f 3f       	cpi	r21, 0xFF	; 255
    3a70:	71 f0       	breq	.+28     	; 0x3a8e <__fp_splitA+0x1a>
    3a72:	47 95       	ror	r20

00003a74 <__fp_splitA>:
    3a74:	88 0f       	add	r24, r24
    3a76:	97 fb       	bst	r25, 7
    3a78:	99 1f       	adc	r25, r25
    3a7a:	61 f0       	breq	.+24     	; 0x3a94 <__fp_splitA+0x20>
    3a7c:	9f 3f       	cpi	r25, 0xFF	; 255
    3a7e:	79 f0       	breq	.+30     	; 0x3a9e <__fp_splitA+0x2a>
    3a80:	87 95       	ror	r24
    3a82:	08 95       	ret
    3a84:	12 16       	cp	r1, r18
    3a86:	13 06       	cpc	r1, r19
    3a88:	14 06       	cpc	r1, r20
    3a8a:	55 1f       	adc	r21, r21
    3a8c:	f2 cf       	rjmp	.-28     	; 0x3a72 <__fp_split3+0xe>
    3a8e:	46 95       	lsr	r20
    3a90:	f1 df       	rcall	.-30     	; 0x3a74 <__fp_splitA>
    3a92:	08 c0       	rjmp	.+16     	; 0x3aa4 <__fp_splitA+0x30>
    3a94:	16 16       	cp	r1, r22
    3a96:	17 06       	cpc	r1, r23
    3a98:	18 06       	cpc	r1, r24
    3a9a:	99 1f       	adc	r25, r25
    3a9c:	f1 cf       	rjmp	.-30     	; 0x3a80 <__fp_splitA+0xc>
    3a9e:	86 95       	lsr	r24
    3aa0:	71 05       	cpc	r23, r1
    3aa2:	61 05       	cpc	r22, r1
    3aa4:	08 94       	sec
    3aa6:	08 95       	ret

00003aa8 <__fp_zero>:
    3aa8:	e8 94       	clt

00003aaa <__fp_szero>:
    3aaa:	bb 27       	eor	r27, r27
    3aac:	66 27       	eor	r22, r22
    3aae:	77 27       	eor	r23, r23
    3ab0:	cb 01       	movw	r24, r22
    3ab2:	97 f9       	bld	r25, 7
    3ab4:	08 95       	ret

00003ab6 <__gesf2>:
    3ab6:	2c df       	rcall	.-424    	; 0x3910 <__fp_cmp>
    3ab8:	08 f4       	brcc	.+2      	; 0x3abc <__gesf2+0x6>
    3aba:	8f ef       	ldi	r24, 0xFF	; 255
    3abc:	08 95       	ret

00003abe <inverse>:
    3abe:	9b 01       	movw	r18, r22
    3ac0:	ac 01       	movw	r20, r24
    3ac2:	60 e0       	ldi	r22, 0x00	; 0
    3ac4:	70 e0       	ldi	r23, 0x00	; 0
    3ac6:	80 e8       	ldi	r24, 0x80	; 128
    3ac8:	9f e3       	ldi	r25, 0x3F	; 63
    3aca:	4c ce       	rjmp	.-872    	; 0x3764 <__divsf3>

00003acc <__mulsf3>:
    3acc:	0b d0       	rcall	.+22     	; 0x3ae4 <__mulsf3x>
    3ace:	a8 cf       	rjmp	.-176    	; 0x3a20 <__fp_round>
    3ad0:	71 df       	rcall	.-286    	; 0x39b4 <__fp_pscA>
    3ad2:	28 f0       	brcs	.+10     	; 0x3ade <__mulsf3+0x12>
    3ad4:	76 df       	rcall	.-276    	; 0x39c2 <__fp_pscB>
    3ad6:	18 f0       	brcs	.+6      	; 0x3ade <__mulsf3+0x12>
    3ad8:	95 23       	and	r25, r21
    3ada:	09 f0       	breq	.+2      	; 0x3ade <__mulsf3+0x12>
    3adc:	3d cf       	rjmp	.-390    	; 0x3958 <__fp_inf>
    3ade:	42 cf       	rjmp	.-380    	; 0x3964 <__fp_nan>
    3ae0:	11 24       	eor	r1, r1
    3ae2:	e3 cf       	rjmp	.-58     	; 0x3aaa <__fp_szero>

00003ae4 <__mulsf3x>:
    3ae4:	bf df       	rcall	.-130    	; 0x3a64 <__fp_split3>
    3ae6:	a0 f3       	brcs	.-24     	; 0x3ad0 <__mulsf3+0x4>

00003ae8 <__mulsf3_pse>:
    3ae8:	95 9f       	mul	r25, r21
    3aea:	d1 f3       	breq	.-12     	; 0x3ae0 <__mulsf3+0x14>
    3aec:	95 0f       	add	r25, r21
    3aee:	50 e0       	ldi	r21, 0x00	; 0
    3af0:	55 1f       	adc	r21, r21
    3af2:	62 9f       	mul	r22, r18
    3af4:	f0 01       	movw	r30, r0
    3af6:	72 9f       	mul	r23, r18
    3af8:	bb 27       	eor	r27, r27
    3afa:	f0 0d       	add	r31, r0
    3afc:	b1 1d       	adc	r27, r1
    3afe:	63 9f       	mul	r22, r19
    3b00:	aa 27       	eor	r26, r26
    3b02:	f0 0d       	add	r31, r0
    3b04:	b1 1d       	adc	r27, r1
    3b06:	aa 1f       	adc	r26, r26
    3b08:	64 9f       	mul	r22, r20
    3b0a:	66 27       	eor	r22, r22
    3b0c:	b0 0d       	add	r27, r0
    3b0e:	a1 1d       	adc	r26, r1
    3b10:	66 1f       	adc	r22, r22
    3b12:	82 9f       	mul	r24, r18
    3b14:	22 27       	eor	r18, r18
    3b16:	b0 0d       	add	r27, r0
    3b18:	a1 1d       	adc	r26, r1
    3b1a:	62 1f       	adc	r22, r18
    3b1c:	73 9f       	mul	r23, r19
    3b1e:	b0 0d       	add	r27, r0
    3b20:	a1 1d       	adc	r26, r1
    3b22:	62 1f       	adc	r22, r18
    3b24:	83 9f       	mul	r24, r19
    3b26:	a0 0d       	add	r26, r0
    3b28:	61 1d       	adc	r22, r1
    3b2a:	22 1f       	adc	r18, r18
    3b2c:	74 9f       	mul	r23, r20
    3b2e:	33 27       	eor	r19, r19
    3b30:	a0 0d       	add	r26, r0
    3b32:	61 1d       	adc	r22, r1
    3b34:	23 1f       	adc	r18, r19
    3b36:	84 9f       	mul	r24, r20
    3b38:	60 0d       	add	r22, r0
    3b3a:	21 1d       	adc	r18, r1
    3b3c:	82 2f       	mov	r24, r18
    3b3e:	76 2f       	mov	r23, r22
    3b40:	6a 2f       	mov	r22, r26
    3b42:	11 24       	eor	r1, r1
    3b44:	9f 57       	subi	r25, 0x7F	; 127
    3b46:	50 40       	sbci	r21, 0x00	; 0
    3b48:	8a f0       	brmi	.+34     	; 0x3b6c <__mulsf3_pse+0x84>
    3b4a:	e1 f0       	breq	.+56     	; 0x3b84 <__mulsf3_pse+0x9c>
    3b4c:	88 23       	and	r24, r24
    3b4e:	4a f0       	brmi	.+18     	; 0x3b62 <__mulsf3_pse+0x7a>
    3b50:	ee 0f       	add	r30, r30
    3b52:	ff 1f       	adc	r31, r31
    3b54:	bb 1f       	adc	r27, r27
    3b56:	66 1f       	adc	r22, r22
    3b58:	77 1f       	adc	r23, r23
    3b5a:	88 1f       	adc	r24, r24
    3b5c:	91 50       	subi	r25, 0x01	; 1
    3b5e:	50 40       	sbci	r21, 0x00	; 0
    3b60:	a9 f7       	brne	.-22     	; 0x3b4c <__mulsf3_pse+0x64>
    3b62:	9e 3f       	cpi	r25, 0xFE	; 254
    3b64:	51 05       	cpc	r21, r1
    3b66:	70 f0       	brcs	.+28     	; 0x3b84 <__mulsf3_pse+0x9c>
    3b68:	f7 ce       	rjmp	.-530    	; 0x3958 <__fp_inf>
    3b6a:	9f cf       	rjmp	.-194    	; 0x3aaa <__fp_szero>
    3b6c:	5f 3f       	cpi	r21, 0xFF	; 255
    3b6e:	ec f3       	brlt	.-6      	; 0x3b6a <__mulsf3_pse+0x82>
    3b70:	98 3e       	cpi	r25, 0xE8	; 232
    3b72:	dc f3       	brlt	.-10     	; 0x3b6a <__mulsf3_pse+0x82>
    3b74:	86 95       	lsr	r24
    3b76:	77 95       	ror	r23
    3b78:	67 95       	ror	r22
    3b7a:	b7 95       	ror	r27
    3b7c:	f7 95       	ror	r31
    3b7e:	e7 95       	ror	r30
    3b80:	9f 5f       	subi	r25, 0xFF	; 255
    3b82:	c1 f7       	brne	.-16     	; 0x3b74 <__mulsf3_pse+0x8c>
    3b84:	fe 2b       	or	r31, r30
    3b86:	88 0f       	add	r24, r24
    3b88:	91 1d       	adc	r25, r1
    3b8a:	96 95       	lsr	r25
    3b8c:	87 95       	ror	r24
    3b8e:	97 f9       	bld	r25, 7
    3b90:	08 95       	ret

00003b92 <sin>:
    3b92:	9f 93       	push	r25
    3b94:	1e df       	rcall	.-452    	; 0x39d2 <__fp_rempio2>
    3b96:	0f 90       	pop	r0
    3b98:	07 fc       	sbrc	r0, 7
    3b9a:	ee 5f       	subi	r30, 0xFE	; 254
    3b9c:	52 cf       	rjmp	.-348    	; 0x3a42 <__fp_sinus>

00003b9e <square>:
    3b9e:	9b 01       	movw	r18, r22
    3ba0:	ac 01       	movw	r20, r24
    3ba2:	94 cf       	rjmp	.-216    	; 0x3acc <__mulsf3>

00003ba4 <tan>:
    3ba4:	df 93       	push	r29
    3ba6:	d9 2f       	mov	r29, r25
    3ba8:	14 df       	rcall	.-472    	; 0x39d2 <__fp_rempio2>
    3baa:	e6 95       	lsr	r30
    3bac:	d7 95       	ror	r29
    3bae:	2a ed       	ldi	r18, 0xDA	; 218
    3bb0:	3f e0       	ldi	r19, 0x0F	; 15
    3bb2:	49 e4       	ldi	r20, 0x49	; 73
    3bb4:	5f e3       	ldi	r21, 0x3F	; 63
    3bb6:	b3 3a       	cpi	r27, 0xA3	; 163
    3bb8:	62 07       	cpc	r22, r18
    3bba:	73 07       	cpc	r23, r19
    3bbc:	84 07       	cpc	r24, r20
    3bbe:	95 07       	cpc	r25, r21
    3bc0:	d7 95       	ror	r29
    3bc2:	2a f0       	brmi	.+10     	; 0x3bce <tan+0x2a>
    3bc4:	a2 ea       	ldi	r26, 0xA2	; 162
    3bc6:	49 ec       	ldi	r20, 0xC9	; 201
    3bc8:	90 68       	ori	r25, 0x80	; 128
    3bca:	10 dd       	rcall	.-1504   	; 0x35ec <__addsf3x>
    3bcc:	29 df       	rcall	.-430    	; 0x3a20 <__fp_round>
    3bce:	e7 ed       	ldi	r30, 0xD7	; 215
    3bd0:	f0 e0       	ldi	r31, 0x00	; 0
    3bd2:	16 d0       	rcall	.+44     	; 0x3c00 <__fp_powsodd>
    3bd4:	dd 0f       	add	r29, r29
    3bd6:	0b f0       	brvs	.+2      	; 0x3bda <tan+0x36>
    3bd8:	72 df       	rcall	.-284    	; 0x3abe <inverse>
    3bda:	dd 0f       	add	r29, r29
    3bdc:	0b f4       	brvc	.+2      	; 0x3be0 <tan+0x3c>
    3bde:	90 58       	subi	r25, 0x80	; 128
    3be0:	df 91       	pop	r29
    3be2:	08 95       	ret

00003be4 <__fp_mpack>:
    3be4:	9f 3f       	cpi	r25, 0xFF	; 255
    3be6:	31 f0       	breq	.+12     	; 0x3bf4 <__fp_mpack_finite+0xc>

00003be8 <__fp_mpack_finite>:
    3be8:	91 50       	subi	r25, 0x01	; 1
    3bea:	20 f4       	brcc	.+8      	; 0x3bf4 <__fp_mpack_finite+0xc>
    3bec:	87 95       	ror	r24
    3bee:	77 95       	ror	r23
    3bf0:	67 95       	ror	r22
    3bf2:	b7 95       	ror	r27
    3bf4:	88 0f       	add	r24, r24
    3bf6:	91 1d       	adc	r25, r1
    3bf8:	96 95       	lsr	r25
    3bfa:	87 95       	ror	r24
    3bfc:	97 f9       	bld	r25, 7
    3bfe:	08 95       	ret

00003c00 <__fp_powsodd>:
    3c00:	9f 93       	push	r25
    3c02:	8f 93       	push	r24
    3c04:	7f 93       	push	r23
    3c06:	6f 93       	push	r22
    3c08:	ff 93       	push	r31
    3c0a:	ef 93       	push	r30
    3c0c:	9b 01       	movw	r18, r22
    3c0e:	ac 01       	movw	r20, r24
    3c10:	5d df       	rcall	.-326    	; 0x3acc <__mulsf3>
    3c12:	ef 91       	pop	r30
    3c14:	ff 91       	pop	r31
    3c16:	a9 de       	rcall	.-686    	; 0x396a <__fp_powser>
    3c18:	2f 91       	pop	r18
    3c1a:	3f 91       	pop	r19
    3c1c:	4f 91       	pop	r20
    3c1e:	5f 91       	pop	r21
    3c20:	55 cf       	rjmp	.-342    	; 0x3acc <__mulsf3>

00003c22 <vfprintf>:
    3c22:	a3 e1       	ldi	r26, 0x13	; 19
    3c24:	b0 e0       	ldi	r27, 0x00	; 0
    3c26:	e7 e1       	ldi	r30, 0x17	; 23
    3c28:	fe e1       	ldi	r31, 0x1E	; 30
    3c2a:	0c 94 92 21 	jmp	0x4324	; 0x4324 <__prologue_saves__>
    3c2e:	7c 01       	movw	r14, r24
    3c30:	1b 01       	movw	r2, r22
    3c32:	6a 01       	movw	r12, r20
    3c34:	fc 01       	movw	r30, r24
    3c36:	17 82       	std	Z+7, r1	; 0x07
    3c38:	16 82       	std	Z+6, r1	; 0x06
    3c3a:	83 81       	ldd	r24, Z+3	; 0x03
    3c3c:	81 ff       	sbrs	r24, 1
    3c3e:	66 c3       	rjmp	.+1740   	; 0x430c <vfprintf+0x6ea>
    3c40:	be 01       	movw	r22, r28
    3c42:	6f 5f       	subi	r22, 0xFF	; 255
    3c44:	7f 4f       	sbci	r23, 0xFF	; 255
    3c46:	4b 01       	movw	r8, r22
    3c48:	f7 01       	movw	r30, r14
    3c4a:	93 81       	ldd	r25, Z+3	; 0x03
    3c4c:	f1 01       	movw	r30, r2
    3c4e:	93 fd       	sbrc	r25, 3
    3c50:	85 91       	lpm	r24, Z+
    3c52:	93 ff       	sbrs	r25, 3
    3c54:	81 91       	ld	r24, Z+
    3c56:	1f 01       	movw	r2, r30
    3c58:	88 23       	and	r24, r24
    3c5a:	09 f4       	brne	.+2      	; 0x3c5e <vfprintf+0x3c>
    3c5c:	53 c3       	rjmp	.+1702   	; 0x4304 <vfprintf+0x6e2>
    3c5e:	85 32       	cpi	r24, 0x25	; 37
    3c60:	39 f4       	brne	.+14     	; 0x3c70 <vfprintf+0x4e>
    3c62:	93 fd       	sbrc	r25, 3
    3c64:	85 91       	lpm	r24, Z+
    3c66:	93 ff       	sbrs	r25, 3
    3c68:	81 91       	ld	r24, Z+
    3c6a:	1f 01       	movw	r2, r30
    3c6c:	85 32       	cpi	r24, 0x25	; 37
    3c6e:	39 f4       	brne	.+14     	; 0x3c7e <vfprintf+0x5c>
    3c70:	b7 01       	movw	r22, r14
    3c72:	90 e0       	ldi	r25, 0x00	; 0
    3c74:	0e 94 b7 22 	call	0x456e	; 0x456e <fputc>
    3c78:	56 01       	movw	r10, r12
    3c7a:	65 01       	movw	r12, r10
    3c7c:	e5 cf       	rjmp	.-54     	; 0x3c48 <vfprintf+0x26>
    3c7e:	10 e0       	ldi	r17, 0x00	; 0
    3c80:	51 2c       	mov	r5, r1
    3c82:	20 e0       	ldi	r18, 0x00	; 0
    3c84:	20 32       	cpi	r18, 0x20	; 32
    3c86:	a0 f4       	brcc	.+40     	; 0x3cb0 <vfprintf+0x8e>
    3c88:	8b 32       	cpi	r24, 0x2B	; 43
    3c8a:	69 f0       	breq	.+26     	; 0x3ca6 <vfprintf+0x84>
    3c8c:	30 f4       	brcc	.+12     	; 0x3c9a <vfprintf+0x78>
    3c8e:	80 32       	cpi	r24, 0x20	; 32
    3c90:	59 f0       	breq	.+22     	; 0x3ca8 <vfprintf+0x86>
    3c92:	83 32       	cpi	r24, 0x23	; 35
    3c94:	69 f4       	brne	.+26     	; 0x3cb0 <vfprintf+0x8e>
    3c96:	20 61       	ori	r18, 0x10	; 16
    3c98:	2c c0       	rjmp	.+88     	; 0x3cf2 <vfprintf+0xd0>
    3c9a:	8d 32       	cpi	r24, 0x2D	; 45
    3c9c:	39 f0       	breq	.+14     	; 0x3cac <vfprintf+0x8a>
    3c9e:	80 33       	cpi	r24, 0x30	; 48
    3ca0:	39 f4       	brne	.+14     	; 0x3cb0 <vfprintf+0x8e>
    3ca2:	21 60       	ori	r18, 0x01	; 1
    3ca4:	26 c0       	rjmp	.+76     	; 0x3cf2 <vfprintf+0xd0>
    3ca6:	22 60       	ori	r18, 0x02	; 2
    3ca8:	24 60       	ori	r18, 0x04	; 4
    3caa:	23 c0       	rjmp	.+70     	; 0x3cf2 <vfprintf+0xd0>
    3cac:	28 60       	ori	r18, 0x08	; 8
    3cae:	21 c0       	rjmp	.+66     	; 0x3cf2 <vfprintf+0xd0>
    3cb0:	27 fd       	sbrc	r18, 7
    3cb2:	27 c0       	rjmp	.+78     	; 0x3d02 <vfprintf+0xe0>
    3cb4:	30 ed       	ldi	r19, 0xD0	; 208
    3cb6:	38 0f       	add	r19, r24
    3cb8:	3a 30       	cpi	r19, 0x0A	; 10
    3cba:	78 f4       	brcc	.+30     	; 0x3cda <vfprintf+0xb8>
    3cbc:	26 ff       	sbrs	r18, 6
    3cbe:	06 c0       	rjmp	.+12     	; 0x3ccc <vfprintf+0xaa>
    3cc0:	fa e0       	ldi	r31, 0x0A	; 10
    3cc2:	1f 9f       	mul	r17, r31
    3cc4:	30 0d       	add	r19, r0
    3cc6:	11 24       	eor	r1, r1
    3cc8:	13 2f       	mov	r17, r19
    3cca:	13 c0       	rjmp	.+38     	; 0x3cf2 <vfprintf+0xd0>
    3ccc:	6a e0       	ldi	r22, 0x0A	; 10
    3cce:	56 9e       	mul	r5, r22
    3cd0:	30 0d       	add	r19, r0
    3cd2:	11 24       	eor	r1, r1
    3cd4:	53 2e       	mov	r5, r19
    3cd6:	20 62       	ori	r18, 0x20	; 32
    3cd8:	0c c0       	rjmp	.+24     	; 0x3cf2 <vfprintf+0xd0>
    3cda:	8e 32       	cpi	r24, 0x2E	; 46
    3cdc:	21 f4       	brne	.+8      	; 0x3ce6 <vfprintf+0xc4>
    3cde:	26 fd       	sbrc	r18, 6
    3ce0:	11 c3       	rjmp	.+1570   	; 0x4304 <vfprintf+0x6e2>
    3ce2:	20 64       	ori	r18, 0x40	; 64
    3ce4:	06 c0       	rjmp	.+12     	; 0x3cf2 <vfprintf+0xd0>
    3ce6:	8c 36       	cpi	r24, 0x6C	; 108
    3ce8:	11 f4       	brne	.+4      	; 0x3cee <vfprintf+0xcc>
    3cea:	20 68       	ori	r18, 0x80	; 128
    3cec:	02 c0       	rjmp	.+4      	; 0x3cf2 <vfprintf+0xd0>
    3cee:	88 36       	cpi	r24, 0x68	; 104
    3cf0:	41 f4       	brne	.+16     	; 0x3d02 <vfprintf+0xe0>
    3cf2:	f1 01       	movw	r30, r2
    3cf4:	93 fd       	sbrc	r25, 3
    3cf6:	85 91       	lpm	r24, Z+
    3cf8:	93 ff       	sbrs	r25, 3
    3cfa:	81 91       	ld	r24, Z+
    3cfc:	1f 01       	movw	r2, r30
    3cfe:	81 11       	cpse	r24, r1
    3d00:	c1 cf       	rjmp	.-126    	; 0x3c84 <vfprintf+0x62>
    3d02:	9b eb       	ldi	r25, 0xBB	; 187
    3d04:	98 0f       	add	r25, r24
    3d06:	93 30       	cpi	r25, 0x03	; 3
    3d08:	18 f4       	brcc	.+6      	; 0x3d10 <vfprintf+0xee>
    3d0a:	20 61       	ori	r18, 0x10	; 16
    3d0c:	80 5e       	subi	r24, 0xE0	; 224
    3d0e:	06 c0       	rjmp	.+12     	; 0x3d1c <vfprintf+0xfa>
    3d10:	9b e9       	ldi	r25, 0x9B	; 155
    3d12:	98 0f       	add	r25, r24
    3d14:	93 30       	cpi	r25, 0x03	; 3
    3d16:	08 f0       	brcs	.+2      	; 0x3d1a <vfprintf+0xf8>
    3d18:	aa c1       	rjmp	.+852    	; 0x406e <vfprintf+0x44c>
    3d1a:	2f 7e       	andi	r18, 0xEF	; 239
    3d1c:	26 ff       	sbrs	r18, 6
    3d1e:	16 e0       	ldi	r17, 0x06	; 6
    3d20:	2f 73       	andi	r18, 0x3F	; 63
    3d22:	72 2e       	mov	r7, r18
    3d24:	85 36       	cpi	r24, 0x65	; 101
    3d26:	21 f4       	brne	.+8      	; 0x3d30 <vfprintf+0x10e>
    3d28:	f2 2f       	mov	r31, r18
    3d2a:	f0 64       	ori	r31, 0x40	; 64
    3d2c:	7f 2e       	mov	r7, r31
    3d2e:	08 c0       	rjmp	.+16     	; 0x3d40 <vfprintf+0x11e>
    3d30:	86 36       	cpi	r24, 0x66	; 102
    3d32:	21 f4       	brne	.+8      	; 0x3d3c <vfprintf+0x11a>
    3d34:	62 2f       	mov	r22, r18
    3d36:	60 68       	ori	r22, 0x80	; 128
    3d38:	76 2e       	mov	r7, r22
    3d3a:	02 c0       	rjmp	.+4      	; 0x3d40 <vfprintf+0x11e>
    3d3c:	11 11       	cpse	r17, r1
    3d3e:	11 50       	subi	r17, 0x01	; 1
    3d40:	77 fe       	sbrs	r7, 7
    3d42:	07 c0       	rjmp	.+14     	; 0x3d52 <vfprintf+0x130>
    3d44:	1c 33       	cpi	r17, 0x3C	; 60
    3d46:	48 f4       	brcc	.+18     	; 0x3d5a <vfprintf+0x138>
    3d48:	44 24       	eor	r4, r4
    3d4a:	43 94       	inc	r4
    3d4c:	41 0e       	add	r4, r17
    3d4e:	27 e0       	ldi	r18, 0x07	; 7
    3d50:	0b c0       	rjmp	.+22     	; 0x3d68 <vfprintf+0x146>
    3d52:	18 30       	cpi	r17, 0x08	; 8
    3d54:	30 f4       	brcc	.+12     	; 0x3d62 <vfprintf+0x140>
    3d56:	21 2f       	mov	r18, r17
    3d58:	06 c0       	rjmp	.+12     	; 0x3d66 <vfprintf+0x144>
    3d5a:	27 e0       	ldi	r18, 0x07	; 7
    3d5c:	4c e3       	ldi	r20, 0x3C	; 60
    3d5e:	44 2e       	mov	r4, r20
    3d60:	03 c0       	rjmp	.+6      	; 0x3d68 <vfprintf+0x146>
    3d62:	27 e0       	ldi	r18, 0x07	; 7
    3d64:	17 e0       	ldi	r17, 0x07	; 7
    3d66:	41 2c       	mov	r4, r1
    3d68:	56 01       	movw	r10, r12
    3d6a:	74 e0       	ldi	r23, 0x04	; 4
    3d6c:	a7 0e       	add	r10, r23
    3d6e:	b1 1c       	adc	r11, r1
    3d70:	f6 01       	movw	r30, r12
    3d72:	60 81       	ld	r22, Z
    3d74:	71 81       	ldd	r23, Z+1	; 0x01
    3d76:	82 81       	ldd	r24, Z+2	; 0x02
    3d78:	93 81       	ldd	r25, Z+3	; 0x03
    3d7a:	04 2d       	mov	r16, r4
    3d7c:	a4 01       	movw	r20, r8
    3d7e:	0e 94 c9 21 	call	0x4392	; 0x4392 <__ftoa_engine>
    3d82:	6c 01       	movw	r12, r24
    3d84:	09 81       	ldd	r16, Y+1	; 0x01
    3d86:	00 ff       	sbrs	r16, 0
    3d88:	02 c0       	rjmp	.+4      	; 0x3d8e <vfprintf+0x16c>
    3d8a:	03 ff       	sbrs	r16, 3
    3d8c:	06 c0       	rjmp	.+12     	; 0x3d9a <vfprintf+0x178>
    3d8e:	71 fc       	sbrc	r7, 1
    3d90:	07 c0       	rjmp	.+14     	; 0x3da0 <vfprintf+0x17e>
    3d92:	72 fc       	sbrc	r7, 2
    3d94:	08 c0       	rjmp	.+16     	; 0x3da6 <vfprintf+0x184>
    3d96:	61 2c       	mov	r6, r1
    3d98:	08 c0       	rjmp	.+16     	; 0x3daa <vfprintf+0x188>
    3d9a:	3d e2       	ldi	r19, 0x2D	; 45
    3d9c:	63 2e       	mov	r6, r19
    3d9e:	05 c0       	rjmp	.+10     	; 0x3daa <vfprintf+0x188>
    3da0:	2b e2       	ldi	r18, 0x2B	; 43
    3da2:	62 2e       	mov	r6, r18
    3da4:	02 c0       	rjmp	.+4      	; 0x3daa <vfprintf+0x188>
    3da6:	90 e2       	ldi	r25, 0x20	; 32
    3da8:	69 2e       	mov	r6, r25
    3daa:	80 2f       	mov	r24, r16
    3dac:	8c 70       	andi	r24, 0x0C	; 12
    3dae:	99 f1       	breq	.+102    	; 0x3e16 <vfprintf+0x1f4>
    3db0:	66 20       	and	r6, r6
    3db2:	11 f0       	breq	.+4      	; 0x3db8 <vfprintf+0x196>
    3db4:	84 e0       	ldi	r24, 0x04	; 4
    3db6:	01 c0       	rjmp	.+2      	; 0x3dba <vfprintf+0x198>
    3db8:	83 e0       	ldi	r24, 0x03	; 3
    3dba:	85 15       	cp	r24, r5
    3dbc:	10 f0       	brcs	.+4      	; 0x3dc2 <vfprintf+0x1a0>
    3dbe:	51 2c       	mov	r5, r1
    3dc0:	0b c0       	rjmp	.+22     	; 0x3dd8 <vfprintf+0x1b6>
    3dc2:	58 1a       	sub	r5, r24
    3dc4:	73 fc       	sbrc	r7, 3
    3dc6:	08 c0       	rjmp	.+16     	; 0x3dd8 <vfprintf+0x1b6>
    3dc8:	b7 01       	movw	r22, r14
    3dca:	80 e2       	ldi	r24, 0x20	; 32
    3dcc:	90 e0       	ldi	r25, 0x00	; 0
    3dce:	0e 94 b7 22 	call	0x456e	; 0x456e <fputc>
    3dd2:	5a 94       	dec	r5
    3dd4:	c9 f7       	brne	.-14     	; 0x3dc8 <vfprintf+0x1a6>
    3dd6:	f3 cf       	rjmp	.-26     	; 0x3dbe <vfprintf+0x19c>
    3dd8:	66 20       	and	r6, r6
    3dda:	29 f0       	breq	.+10     	; 0x3de6 <vfprintf+0x1c4>
    3ddc:	b7 01       	movw	r22, r14
    3dde:	86 2d       	mov	r24, r6
    3de0:	90 e0       	ldi	r25, 0x00	; 0
    3de2:	0e 94 b7 22 	call	0x456e	; 0x456e <fputc>
    3de6:	03 fd       	sbrc	r16, 3
    3de8:	03 c0       	rjmp	.+6      	; 0x3df0 <vfprintf+0x1ce>
    3dea:	04 e1       	ldi	r16, 0x14	; 20
    3dec:	14 e0       	ldi	r17, 0x04	; 4
    3dee:	02 c0       	rjmp	.+4      	; 0x3df4 <vfprintf+0x1d2>
    3df0:	00 e1       	ldi	r16, 0x10	; 16
    3df2:	14 e0       	ldi	r17, 0x04	; 4
    3df4:	f7 2d       	mov	r31, r7
    3df6:	f0 71       	andi	r31, 0x10	; 16
    3df8:	7f 2e       	mov	r7, r31
    3dfa:	f8 01       	movw	r30, r16
    3dfc:	84 91       	lpm	r24, Z
    3dfe:	88 23       	and	r24, r24
    3e00:	09 f4       	brne	.+2      	; 0x3e04 <vfprintf+0x1e2>
    3e02:	76 c2       	rjmp	.+1260   	; 0x42f0 <vfprintf+0x6ce>
    3e04:	71 10       	cpse	r7, r1
    3e06:	80 52       	subi	r24, 0x20	; 32
    3e08:	b7 01       	movw	r22, r14
    3e0a:	90 e0       	ldi	r25, 0x00	; 0
    3e0c:	0e 94 b7 22 	call	0x456e	; 0x456e <fputc>
    3e10:	0f 5f       	subi	r16, 0xFF	; 255
    3e12:	1f 4f       	sbci	r17, 0xFF	; 255
    3e14:	f2 cf       	rjmp	.-28     	; 0x3dfa <vfprintf+0x1d8>
    3e16:	77 fe       	sbrs	r7, 7
    3e18:	0f c0       	rjmp	.+30     	; 0x3e38 <vfprintf+0x216>
    3e1a:	4c 0c       	add	r4, r12
    3e1c:	04 ff       	sbrs	r16, 4
    3e1e:	04 c0       	rjmp	.+8      	; 0x3e28 <vfprintf+0x206>
    3e20:	8a 81       	ldd	r24, Y+2	; 0x02
    3e22:	81 33       	cpi	r24, 0x31	; 49
    3e24:	09 f4       	brne	.+2      	; 0x3e28 <vfprintf+0x206>
    3e26:	4a 94       	dec	r4
    3e28:	14 14       	cp	r1, r4
    3e2a:	74 f5       	brge	.+92     	; 0x3e88 <vfprintf+0x266>
    3e2c:	f8 e0       	ldi	r31, 0x08	; 8
    3e2e:	f4 15       	cp	r31, r4
    3e30:	78 f5       	brcc	.+94     	; 0x3e90 <vfprintf+0x26e>
    3e32:	88 e0       	ldi	r24, 0x08	; 8
    3e34:	48 2e       	mov	r4, r24
    3e36:	2c c0       	rjmp	.+88     	; 0x3e90 <vfprintf+0x26e>
    3e38:	76 fc       	sbrc	r7, 6
    3e3a:	2a c0       	rjmp	.+84     	; 0x3e90 <vfprintf+0x26e>
    3e3c:	81 2f       	mov	r24, r17
    3e3e:	90 e0       	ldi	r25, 0x00	; 0
    3e40:	8c 15       	cp	r24, r12
    3e42:	9d 05       	cpc	r25, r13
    3e44:	9c f0       	brlt	.+38     	; 0x3e6c <vfprintf+0x24a>
    3e46:	6c ef       	ldi	r22, 0xFC	; 252
    3e48:	c6 16       	cp	r12, r22
    3e4a:	6f ef       	ldi	r22, 0xFF	; 255
    3e4c:	d6 06       	cpc	r13, r22
    3e4e:	74 f0       	brlt	.+28     	; 0x3e6c <vfprintf+0x24a>
    3e50:	77 2d       	mov	r23, r7
    3e52:	70 68       	ori	r23, 0x80	; 128
    3e54:	77 2e       	mov	r7, r23
    3e56:	0a c0       	rjmp	.+20     	; 0x3e6c <vfprintf+0x24a>
    3e58:	e2 e0       	ldi	r30, 0x02	; 2
    3e5a:	f0 e0       	ldi	r31, 0x00	; 0
    3e5c:	ec 0f       	add	r30, r28
    3e5e:	fd 1f       	adc	r31, r29
    3e60:	e1 0f       	add	r30, r17
    3e62:	f1 1d       	adc	r31, r1
    3e64:	80 81       	ld	r24, Z
    3e66:	80 33       	cpi	r24, 0x30	; 48
    3e68:	19 f4       	brne	.+6      	; 0x3e70 <vfprintf+0x24e>
    3e6a:	11 50       	subi	r17, 0x01	; 1
    3e6c:	11 11       	cpse	r17, r1
    3e6e:	f4 cf       	rjmp	.-24     	; 0x3e58 <vfprintf+0x236>
    3e70:	77 fe       	sbrs	r7, 7
    3e72:	0e c0       	rjmp	.+28     	; 0x3e90 <vfprintf+0x26e>
    3e74:	44 24       	eor	r4, r4
    3e76:	43 94       	inc	r4
    3e78:	41 0e       	add	r4, r17
    3e7a:	81 2f       	mov	r24, r17
    3e7c:	90 e0       	ldi	r25, 0x00	; 0
    3e7e:	c8 16       	cp	r12, r24
    3e80:	d9 06       	cpc	r13, r25
    3e82:	2c f4       	brge	.+10     	; 0x3e8e <vfprintf+0x26c>
    3e84:	1c 19       	sub	r17, r12
    3e86:	04 c0       	rjmp	.+8      	; 0x3e90 <vfprintf+0x26e>
    3e88:	44 24       	eor	r4, r4
    3e8a:	43 94       	inc	r4
    3e8c:	01 c0       	rjmp	.+2      	; 0x3e90 <vfprintf+0x26e>
    3e8e:	10 e0       	ldi	r17, 0x00	; 0
    3e90:	77 fe       	sbrs	r7, 7
    3e92:	07 c0       	rjmp	.+14     	; 0x3ea2 <vfprintf+0x280>
    3e94:	1c 14       	cp	r1, r12
    3e96:	1d 04       	cpc	r1, r13
    3e98:	3c f4       	brge	.+14     	; 0x3ea8 <vfprintf+0x286>
    3e9a:	96 01       	movw	r18, r12
    3e9c:	2f 5f       	subi	r18, 0xFF	; 255
    3e9e:	3f 4f       	sbci	r19, 0xFF	; 255
    3ea0:	05 c0       	rjmp	.+10     	; 0x3eac <vfprintf+0x28a>
    3ea2:	25 e0       	ldi	r18, 0x05	; 5
    3ea4:	30 e0       	ldi	r19, 0x00	; 0
    3ea6:	02 c0       	rjmp	.+4      	; 0x3eac <vfprintf+0x28a>
    3ea8:	21 e0       	ldi	r18, 0x01	; 1
    3eaa:	30 e0       	ldi	r19, 0x00	; 0
    3eac:	66 20       	and	r6, r6
    3eae:	11 f0       	breq	.+4      	; 0x3eb4 <vfprintf+0x292>
    3eb0:	2f 5f       	subi	r18, 0xFF	; 255
    3eb2:	3f 4f       	sbci	r19, 0xFF	; 255
    3eb4:	11 23       	and	r17, r17
    3eb6:	31 f0       	breq	.+12     	; 0x3ec4 <vfprintf+0x2a2>
    3eb8:	41 2f       	mov	r20, r17
    3eba:	50 e0       	ldi	r21, 0x00	; 0
    3ebc:	4f 5f       	subi	r20, 0xFF	; 255
    3ebe:	5f 4f       	sbci	r21, 0xFF	; 255
    3ec0:	24 0f       	add	r18, r20
    3ec2:	35 1f       	adc	r19, r21
    3ec4:	45 2d       	mov	r20, r5
    3ec6:	50 e0       	ldi	r21, 0x00	; 0
    3ec8:	24 17       	cp	r18, r20
    3eca:	35 07       	cpc	r19, r21
    3ecc:	14 f4       	brge	.+4      	; 0x3ed2 <vfprintf+0x2b0>
    3ece:	52 1a       	sub	r5, r18
    3ed0:	01 c0       	rjmp	.+2      	; 0x3ed4 <vfprintf+0x2b2>
    3ed2:	51 2c       	mov	r5, r1
    3ed4:	87 2d       	mov	r24, r7
    3ed6:	89 70       	andi	r24, 0x09	; 9
    3ed8:	49 f4       	brne	.+18     	; 0x3eec <vfprintf+0x2ca>
    3eda:	55 20       	and	r5, r5
    3edc:	39 f0       	breq	.+14     	; 0x3eec <vfprintf+0x2ca>
    3ede:	b7 01       	movw	r22, r14
    3ee0:	80 e2       	ldi	r24, 0x20	; 32
    3ee2:	90 e0       	ldi	r25, 0x00	; 0
    3ee4:	0e 94 b7 22 	call	0x456e	; 0x456e <fputc>
    3ee8:	5a 94       	dec	r5
    3eea:	f7 cf       	rjmp	.-18     	; 0x3eda <vfprintf+0x2b8>
    3eec:	66 20       	and	r6, r6
    3eee:	29 f0       	breq	.+10     	; 0x3efa <vfprintf+0x2d8>
    3ef0:	b7 01       	movw	r22, r14
    3ef2:	86 2d       	mov	r24, r6
    3ef4:	90 e0       	ldi	r25, 0x00	; 0
    3ef6:	0e 94 b7 22 	call	0x456e	; 0x456e <fputc>
    3efa:	73 fc       	sbrc	r7, 3
    3efc:	09 c0       	rjmp	.+18     	; 0x3f10 <vfprintf+0x2ee>
    3efe:	55 20       	and	r5, r5
    3f00:	39 f0       	breq	.+14     	; 0x3f10 <vfprintf+0x2ee>
    3f02:	b7 01       	movw	r22, r14
    3f04:	80 e3       	ldi	r24, 0x30	; 48
    3f06:	90 e0       	ldi	r25, 0x00	; 0
    3f08:	0e 94 b7 22 	call	0x456e	; 0x456e <fputc>
    3f0c:	5a 94       	dec	r5
    3f0e:	f7 cf       	rjmp	.-18     	; 0x3efe <vfprintf+0x2dc>
    3f10:	77 fe       	sbrs	r7, 7
    3f12:	5f c0       	rjmp	.+190    	; 0x3fd2 <vfprintf+0x3b0>
    3f14:	9c 2d       	mov	r25, r12
    3f16:	8d 2d       	mov	r24, r13
    3f18:	d7 fe       	sbrs	r13, 7
    3f1a:	02 c0       	rjmp	.+4      	; 0x3f20 <vfprintf+0x2fe>
    3f1c:	90 e0       	ldi	r25, 0x00	; 0
    3f1e:	80 e0       	ldi	r24, 0x00	; 0
    3f20:	69 2e       	mov	r6, r25
    3f22:	78 2e       	mov	r7, r24
    3f24:	40 e0       	ldi	r20, 0x00	; 0
    3f26:	50 e0       	ldi	r21, 0x00	; 0
    3f28:	c6 01       	movw	r24, r12
    3f2a:	84 19       	sub	r24, r4
    3f2c:	91 09       	sbc	r25, r1
    3f2e:	9d 87       	std	Y+13, r25	; 0x0d
    3f30:	8c 87       	std	Y+12, r24	; 0x0c
    3f32:	96 01       	movw	r18, r12
    3f34:	26 19       	sub	r18, r6
    3f36:	37 09       	sbc	r19, r7
    3f38:	28 0d       	add	r18, r8
    3f3a:	39 1d       	adc	r19, r9
    3f3c:	81 2f       	mov	r24, r17
    3f3e:	90 e0       	ldi	r25, 0x00	; 0
    3f40:	ee 27       	eor	r30, r30
    3f42:	ff 27       	eor	r31, r31
    3f44:	e8 1b       	sub	r30, r24
    3f46:	f9 0b       	sbc	r31, r25
    3f48:	ff 87       	std	Y+15, r31	; 0x0f
    3f4a:	ee 87       	std	Y+14, r30	; 0x0e
    3f4c:	ff ef       	ldi	r31, 0xFF	; 255
    3f4e:	6f 16       	cp	r6, r31
    3f50:	7f 06       	cpc	r7, r31
    3f52:	69 f4       	brne	.+26     	; 0x3f6e <vfprintf+0x34c>
    3f54:	b7 01       	movw	r22, r14
    3f56:	8e e2       	ldi	r24, 0x2E	; 46
    3f58:	90 e0       	ldi	r25, 0x00	; 0
    3f5a:	2b 8b       	std	Y+19, r18	; 0x13
    3f5c:	3a 8b       	std	Y+18, r19	; 0x12
    3f5e:	48 8b       	std	Y+16, r20	; 0x10
    3f60:	59 8b       	std	Y+17, r21	; 0x11
    3f62:	0e 94 b7 22 	call	0x456e	; 0x456e <fputc>
    3f66:	59 89       	ldd	r21, Y+17	; 0x11
    3f68:	48 89       	ldd	r20, Y+16	; 0x10
    3f6a:	3a 89       	ldd	r19, Y+18	; 0x12
    3f6c:	2b 89       	ldd	r18, Y+19	; 0x13
    3f6e:	c6 14       	cp	r12, r6
    3f70:	d7 04       	cpc	r13, r7
    3f72:	54 f0       	brlt	.+20     	; 0x3f88 <vfprintf+0x366>
    3f74:	6c 85       	ldd	r22, Y+12	; 0x0c
    3f76:	7d 85       	ldd	r23, Y+13	; 0x0d
    3f78:	66 15       	cp	r22, r6
    3f7a:	77 05       	cpc	r23, r7
    3f7c:	2c f4       	brge	.+10     	; 0x3f88 <vfprintf+0x366>
    3f7e:	f9 01       	movw	r30, r18
    3f80:	e4 0f       	add	r30, r20
    3f82:	f5 1f       	adc	r31, r21
    3f84:	81 81       	ldd	r24, Z+1	; 0x01
    3f86:	01 c0       	rjmp	.+2      	; 0x3f8a <vfprintf+0x368>
    3f88:	80 e3       	ldi	r24, 0x30	; 48
    3f8a:	71 e0       	ldi	r23, 0x01	; 1
    3f8c:	67 1a       	sub	r6, r23
    3f8e:	71 08       	sbc	r7, r1
    3f90:	4f 5f       	subi	r20, 0xFF	; 255
    3f92:	5f 4f       	sbci	r21, 0xFF	; 255
    3f94:	ee 85       	ldd	r30, Y+14	; 0x0e
    3f96:	ff 85       	ldd	r31, Y+15	; 0x0f
    3f98:	6e 16       	cp	r6, r30
    3f9a:	7f 06       	cpc	r7, r31
    3f9c:	6c f0       	brlt	.+26     	; 0x3fb8 <vfprintf+0x396>
    3f9e:	b7 01       	movw	r22, r14
    3fa0:	90 e0       	ldi	r25, 0x00	; 0
    3fa2:	2b 8b       	std	Y+19, r18	; 0x13
    3fa4:	3a 8b       	std	Y+18, r19	; 0x12
    3fa6:	48 8b       	std	Y+16, r20	; 0x10
    3fa8:	59 8b       	std	Y+17, r21	; 0x11
    3faa:	0e 94 b7 22 	call	0x456e	; 0x456e <fputc>
    3fae:	2b 89       	ldd	r18, Y+19	; 0x13
    3fb0:	3a 89       	ldd	r19, Y+18	; 0x12
    3fb2:	48 89       	ldd	r20, Y+16	; 0x10
    3fb4:	59 89       	ldd	r21, Y+17	; 0x11
    3fb6:	ca cf       	rjmp	.-108    	; 0x3f4c <vfprintf+0x32a>
    3fb8:	6c 14       	cp	r6, r12
    3fba:	7d 04       	cpc	r7, r13
    3fbc:	39 f4       	brne	.+14     	; 0x3fcc <vfprintf+0x3aa>
    3fbe:	9a 81       	ldd	r25, Y+2	; 0x02
    3fc0:	96 33       	cpi	r25, 0x36	; 54
    3fc2:	18 f4       	brcc	.+6      	; 0x3fca <vfprintf+0x3a8>
    3fc4:	95 33       	cpi	r25, 0x35	; 53
    3fc6:	11 f4       	brne	.+4      	; 0x3fcc <vfprintf+0x3aa>
    3fc8:	04 ff       	sbrs	r16, 4
    3fca:	81 e3       	ldi	r24, 0x31	; 49
    3fcc:	b7 01       	movw	r22, r14
    3fce:	90 e0       	ldi	r25, 0x00	; 0
    3fd0:	4b c0       	rjmp	.+150    	; 0x4068 <vfprintf+0x446>
    3fd2:	8a 81       	ldd	r24, Y+2	; 0x02
    3fd4:	81 33       	cpi	r24, 0x31	; 49
    3fd6:	09 f0       	breq	.+2      	; 0x3fda <vfprintf+0x3b8>
    3fd8:	0f 7e       	andi	r16, 0xEF	; 239
    3fda:	b7 01       	movw	r22, r14
    3fdc:	90 e0       	ldi	r25, 0x00	; 0
    3fde:	0e 94 b7 22 	call	0x456e	; 0x456e <fputc>
    3fe2:	11 11       	cpse	r17, r1
    3fe4:	05 c0       	rjmp	.+10     	; 0x3ff0 <vfprintf+0x3ce>
    3fe6:	74 fe       	sbrs	r7, 4
    3fe8:	18 c0       	rjmp	.+48     	; 0x401a <vfprintf+0x3f8>
    3fea:	85 e4       	ldi	r24, 0x45	; 69
    3fec:	90 e0       	ldi	r25, 0x00	; 0
    3fee:	17 c0       	rjmp	.+46     	; 0x401e <vfprintf+0x3fc>
    3ff0:	b7 01       	movw	r22, r14
    3ff2:	8e e2       	ldi	r24, 0x2E	; 46
    3ff4:	90 e0       	ldi	r25, 0x00	; 0
    3ff6:	0e 94 b7 22 	call	0x456e	; 0x456e <fputc>
    3ffa:	82 e0       	ldi	r24, 0x02	; 2
    3ffc:	66 24       	eor	r6, r6
    3ffe:	63 94       	inc	r6
    4000:	68 0e       	add	r6, r24
    4002:	f4 01       	movw	r30, r8
    4004:	e8 0f       	add	r30, r24
    4006:	f1 1d       	adc	r31, r1
    4008:	80 81       	ld	r24, Z
    400a:	b7 01       	movw	r22, r14
    400c:	90 e0       	ldi	r25, 0x00	; 0
    400e:	0e 94 b7 22 	call	0x456e	; 0x456e <fputc>
    4012:	11 50       	subi	r17, 0x01	; 1
    4014:	41 f3       	breq	.-48     	; 0x3fe6 <vfprintf+0x3c4>
    4016:	86 2d       	mov	r24, r6
    4018:	f1 cf       	rjmp	.-30     	; 0x3ffc <vfprintf+0x3da>
    401a:	85 e6       	ldi	r24, 0x65	; 101
    401c:	90 e0       	ldi	r25, 0x00	; 0
    401e:	b7 01       	movw	r22, r14
    4020:	0e 94 b7 22 	call	0x456e	; 0x456e <fputc>
    4024:	d7 fc       	sbrc	r13, 7
    4026:	05 c0       	rjmp	.+10     	; 0x4032 <vfprintf+0x410>
    4028:	c1 14       	cp	r12, r1
    402a:	d1 04       	cpc	r13, r1
    402c:	39 f4       	brne	.+14     	; 0x403c <vfprintf+0x41a>
    402e:	04 ff       	sbrs	r16, 4
    4030:	05 c0       	rjmp	.+10     	; 0x403c <vfprintf+0x41a>
    4032:	d1 94       	neg	r13
    4034:	c1 94       	neg	r12
    4036:	d1 08       	sbc	r13, r1
    4038:	8d e2       	ldi	r24, 0x2D	; 45
    403a:	01 c0       	rjmp	.+2      	; 0x403e <vfprintf+0x41c>
    403c:	8b e2       	ldi	r24, 0x2B	; 43
    403e:	b7 01       	movw	r22, r14
    4040:	90 e0       	ldi	r25, 0x00	; 0
    4042:	0e 94 b7 22 	call	0x456e	; 0x456e <fputc>
    4046:	80 e3       	ldi	r24, 0x30	; 48
    4048:	6a e0       	ldi	r22, 0x0A	; 10
    404a:	c6 16       	cp	r12, r22
    404c:	d1 04       	cpc	r13, r1
    404e:	2c f0       	brlt	.+10     	; 0x405a <vfprintf+0x438>
    4050:	8f 5f       	subi	r24, 0xFF	; 255
    4052:	fa e0       	ldi	r31, 0x0A	; 10
    4054:	cf 1a       	sub	r12, r31
    4056:	d1 08       	sbc	r13, r1
    4058:	f7 cf       	rjmp	.-18     	; 0x4048 <vfprintf+0x426>
    405a:	b7 01       	movw	r22, r14
    405c:	90 e0       	ldi	r25, 0x00	; 0
    405e:	0e 94 b7 22 	call	0x456e	; 0x456e <fputc>
    4062:	b7 01       	movw	r22, r14
    4064:	c6 01       	movw	r24, r12
    4066:	c0 96       	adiw	r24, 0x30	; 48
    4068:	0e 94 b7 22 	call	0x456e	; 0x456e <fputc>
    406c:	41 c1       	rjmp	.+642    	; 0x42f0 <vfprintf+0x6ce>
    406e:	83 36       	cpi	r24, 0x63	; 99
    4070:	31 f0       	breq	.+12     	; 0x407e <vfprintf+0x45c>
    4072:	83 37       	cpi	r24, 0x73	; 115
    4074:	79 f0       	breq	.+30     	; 0x4094 <vfprintf+0x472>
    4076:	83 35       	cpi	r24, 0x53	; 83
    4078:	09 f0       	breq	.+2      	; 0x407c <vfprintf+0x45a>
    407a:	58 c0       	rjmp	.+176    	; 0x412c <vfprintf+0x50a>
    407c:	21 c0       	rjmp	.+66     	; 0x40c0 <vfprintf+0x49e>
    407e:	56 01       	movw	r10, r12
    4080:	72 e0       	ldi	r23, 0x02	; 2
    4082:	a7 0e       	add	r10, r23
    4084:	b1 1c       	adc	r11, r1
    4086:	f6 01       	movw	r30, r12
    4088:	80 81       	ld	r24, Z
    408a:	89 83       	std	Y+1, r24	; 0x01
    408c:	01 e0       	ldi	r16, 0x01	; 1
    408e:	10 e0       	ldi	r17, 0x00	; 0
    4090:	64 01       	movw	r12, r8
    4092:	14 c0       	rjmp	.+40     	; 0x40bc <vfprintf+0x49a>
    4094:	56 01       	movw	r10, r12
    4096:	f2 e0       	ldi	r31, 0x02	; 2
    4098:	af 0e       	add	r10, r31
    409a:	b1 1c       	adc	r11, r1
    409c:	f6 01       	movw	r30, r12
    409e:	c0 80       	ld	r12, Z
    40a0:	d1 80       	ldd	r13, Z+1	; 0x01
    40a2:	26 ff       	sbrs	r18, 6
    40a4:	03 c0       	rjmp	.+6      	; 0x40ac <vfprintf+0x48a>
    40a6:	61 2f       	mov	r22, r17
    40a8:	70 e0       	ldi	r23, 0x00	; 0
    40aa:	02 c0       	rjmp	.+4      	; 0x40b0 <vfprintf+0x48e>
    40ac:	6f ef       	ldi	r22, 0xFF	; 255
    40ae:	7f ef       	ldi	r23, 0xFF	; 255
    40b0:	c6 01       	movw	r24, r12
    40b2:	2b 8b       	std	Y+19, r18	; 0x13
    40b4:	0e 94 ac 22 	call	0x4558	; 0x4558 <strnlen>
    40b8:	8c 01       	movw	r16, r24
    40ba:	2b 89       	ldd	r18, Y+19	; 0x13
    40bc:	2f 77       	andi	r18, 0x7F	; 127
    40be:	15 c0       	rjmp	.+42     	; 0x40ea <vfprintf+0x4c8>
    40c0:	56 01       	movw	r10, r12
    40c2:	f2 e0       	ldi	r31, 0x02	; 2
    40c4:	af 0e       	add	r10, r31
    40c6:	b1 1c       	adc	r11, r1
    40c8:	f6 01       	movw	r30, r12
    40ca:	c0 80       	ld	r12, Z
    40cc:	d1 80       	ldd	r13, Z+1	; 0x01
    40ce:	26 ff       	sbrs	r18, 6
    40d0:	03 c0       	rjmp	.+6      	; 0x40d8 <vfprintf+0x4b6>
    40d2:	61 2f       	mov	r22, r17
    40d4:	70 e0       	ldi	r23, 0x00	; 0
    40d6:	02 c0       	rjmp	.+4      	; 0x40dc <vfprintf+0x4ba>
    40d8:	6f ef       	ldi	r22, 0xFF	; 255
    40da:	7f ef       	ldi	r23, 0xFF	; 255
    40dc:	c6 01       	movw	r24, r12
    40de:	2b 8b       	std	Y+19, r18	; 0x13
    40e0:	0e 94 a1 22 	call	0x4542	; 0x4542 <strnlen_P>
    40e4:	8c 01       	movw	r16, r24
    40e6:	2b 89       	ldd	r18, Y+19	; 0x13
    40e8:	20 68       	ori	r18, 0x80	; 128
    40ea:	72 2e       	mov	r7, r18
    40ec:	23 fd       	sbrc	r18, 3
    40ee:	1a c0       	rjmp	.+52     	; 0x4124 <vfprintf+0x502>
    40f0:	85 2d       	mov	r24, r5
    40f2:	90 e0       	ldi	r25, 0x00	; 0
    40f4:	08 17       	cp	r16, r24
    40f6:	19 07       	cpc	r17, r25
    40f8:	a8 f4       	brcc	.+42     	; 0x4124 <vfprintf+0x502>
    40fa:	b7 01       	movw	r22, r14
    40fc:	80 e2       	ldi	r24, 0x20	; 32
    40fe:	90 e0       	ldi	r25, 0x00	; 0
    4100:	0e 94 b7 22 	call	0x456e	; 0x456e <fputc>
    4104:	5a 94       	dec	r5
    4106:	f4 cf       	rjmp	.-24     	; 0x40f0 <vfprintf+0x4ce>
    4108:	f6 01       	movw	r30, r12
    410a:	77 fc       	sbrc	r7, 7
    410c:	85 91       	lpm	r24, Z+
    410e:	77 fe       	sbrs	r7, 7
    4110:	81 91       	ld	r24, Z+
    4112:	6f 01       	movw	r12, r30
    4114:	b7 01       	movw	r22, r14
    4116:	90 e0       	ldi	r25, 0x00	; 0
    4118:	0e 94 b7 22 	call	0x456e	; 0x456e <fputc>
    411c:	51 10       	cpse	r5, r1
    411e:	5a 94       	dec	r5
    4120:	01 50       	subi	r16, 0x01	; 1
    4122:	11 09       	sbc	r17, r1
    4124:	01 15       	cp	r16, r1
    4126:	11 05       	cpc	r17, r1
    4128:	79 f7       	brne	.-34     	; 0x4108 <vfprintf+0x4e6>
    412a:	e2 c0       	rjmp	.+452    	; 0x42f0 <vfprintf+0x6ce>
    412c:	84 36       	cpi	r24, 0x64	; 100
    412e:	11 f0       	breq	.+4      	; 0x4134 <vfprintf+0x512>
    4130:	89 36       	cpi	r24, 0x69	; 105
    4132:	51 f5       	brne	.+84     	; 0x4188 <vfprintf+0x566>
    4134:	56 01       	movw	r10, r12
    4136:	27 ff       	sbrs	r18, 7
    4138:	09 c0       	rjmp	.+18     	; 0x414c <vfprintf+0x52a>
    413a:	f4 e0       	ldi	r31, 0x04	; 4
    413c:	af 0e       	add	r10, r31
    413e:	b1 1c       	adc	r11, r1
    4140:	f6 01       	movw	r30, r12
    4142:	60 81       	ld	r22, Z
    4144:	71 81       	ldd	r23, Z+1	; 0x01
    4146:	82 81       	ldd	r24, Z+2	; 0x02
    4148:	93 81       	ldd	r25, Z+3	; 0x03
    414a:	0a c0       	rjmp	.+20     	; 0x4160 <vfprintf+0x53e>
    414c:	f2 e0       	ldi	r31, 0x02	; 2
    414e:	af 0e       	add	r10, r31
    4150:	b1 1c       	adc	r11, r1
    4152:	f6 01       	movw	r30, r12
    4154:	60 81       	ld	r22, Z
    4156:	71 81       	ldd	r23, Z+1	; 0x01
    4158:	88 27       	eor	r24, r24
    415a:	77 fd       	sbrc	r23, 7
    415c:	80 95       	com	r24
    415e:	98 2f       	mov	r25, r24
    4160:	02 2f       	mov	r16, r18
    4162:	0f 76       	andi	r16, 0x6F	; 111
    4164:	97 ff       	sbrs	r25, 7
    4166:	08 c0       	rjmp	.+16     	; 0x4178 <vfprintf+0x556>
    4168:	90 95       	com	r25
    416a:	80 95       	com	r24
    416c:	70 95       	com	r23
    416e:	61 95       	neg	r22
    4170:	7f 4f       	sbci	r23, 0xFF	; 255
    4172:	8f 4f       	sbci	r24, 0xFF	; 255
    4174:	9f 4f       	sbci	r25, 0xFF	; 255
    4176:	00 68       	ori	r16, 0x80	; 128
    4178:	2a e0       	ldi	r18, 0x0A	; 10
    417a:	30 e0       	ldi	r19, 0x00	; 0
    417c:	a4 01       	movw	r20, r8
    417e:	0e 94 0b 23 	call	0x4616	; 0x4616 <__ultoa_invert>
    4182:	c8 2e       	mov	r12, r24
    4184:	c8 18       	sub	r12, r8
    4186:	3e c0       	rjmp	.+124    	; 0x4204 <vfprintf+0x5e2>
    4188:	02 2f       	mov	r16, r18
    418a:	85 37       	cpi	r24, 0x75	; 117
    418c:	21 f4       	brne	.+8      	; 0x4196 <vfprintf+0x574>
    418e:	0f 7e       	andi	r16, 0xEF	; 239
    4190:	2a e0       	ldi	r18, 0x0A	; 10
    4192:	30 e0       	ldi	r19, 0x00	; 0
    4194:	1d c0       	rjmp	.+58     	; 0x41d0 <vfprintf+0x5ae>
    4196:	09 7f       	andi	r16, 0xF9	; 249
    4198:	8f 36       	cpi	r24, 0x6F	; 111
    419a:	91 f0       	breq	.+36     	; 0x41c0 <vfprintf+0x59e>
    419c:	18 f4       	brcc	.+6      	; 0x41a4 <vfprintf+0x582>
    419e:	88 35       	cpi	r24, 0x58	; 88
    41a0:	59 f0       	breq	.+22     	; 0x41b8 <vfprintf+0x596>
    41a2:	b0 c0       	rjmp	.+352    	; 0x4304 <vfprintf+0x6e2>
    41a4:	80 37       	cpi	r24, 0x70	; 112
    41a6:	19 f0       	breq	.+6      	; 0x41ae <vfprintf+0x58c>
    41a8:	88 37       	cpi	r24, 0x78	; 120
    41aa:	11 f0       	breq	.+4      	; 0x41b0 <vfprintf+0x58e>
    41ac:	ab c0       	rjmp	.+342    	; 0x4304 <vfprintf+0x6e2>
    41ae:	00 61       	ori	r16, 0x10	; 16
    41b0:	04 ff       	sbrs	r16, 4
    41b2:	09 c0       	rjmp	.+18     	; 0x41c6 <vfprintf+0x5a4>
    41b4:	04 60       	ori	r16, 0x04	; 4
    41b6:	07 c0       	rjmp	.+14     	; 0x41c6 <vfprintf+0x5a4>
    41b8:	24 ff       	sbrs	r18, 4
    41ba:	08 c0       	rjmp	.+16     	; 0x41cc <vfprintf+0x5aa>
    41bc:	06 60       	ori	r16, 0x06	; 6
    41be:	06 c0       	rjmp	.+12     	; 0x41cc <vfprintf+0x5aa>
    41c0:	28 e0       	ldi	r18, 0x08	; 8
    41c2:	30 e0       	ldi	r19, 0x00	; 0
    41c4:	05 c0       	rjmp	.+10     	; 0x41d0 <vfprintf+0x5ae>
    41c6:	20 e1       	ldi	r18, 0x10	; 16
    41c8:	30 e0       	ldi	r19, 0x00	; 0
    41ca:	02 c0       	rjmp	.+4      	; 0x41d0 <vfprintf+0x5ae>
    41cc:	20 e1       	ldi	r18, 0x10	; 16
    41ce:	32 e0       	ldi	r19, 0x02	; 2
    41d0:	56 01       	movw	r10, r12
    41d2:	07 ff       	sbrs	r16, 7
    41d4:	09 c0       	rjmp	.+18     	; 0x41e8 <vfprintf+0x5c6>
    41d6:	f4 e0       	ldi	r31, 0x04	; 4
    41d8:	af 0e       	add	r10, r31
    41da:	b1 1c       	adc	r11, r1
    41dc:	f6 01       	movw	r30, r12
    41de:	60 81       	ld	r22, Z
    41e0:	71 81       	ldd	r23, Z+1	; 0x01
    41e2:	82 81       	ldd	r24, Z+2	; 0x02
    41e4:	93 81       	ldd	r25, Z+3	; 0x03
    41e6:	08 c0       	rjmp	.+16     	; 0x41f8 <vfprintf+0x5d6>
    41e8:	f2 e0       	ldi	r31, 0x02	; 2
    41ea:	af 0e       	add	r10, r31
    41ec:	b1 1c       	adc	r11, r1
    41ee:	f6 01       	movw	r30, r12
    41f0:	60 81       	ld	r22, Z
    41f2:	71 81       	ldd	r23, Z+1	; 0x01
    41f4:	80 e0       	ldi	r24, 0x00	; 0
    41f6:	90 e0       	ldi	r25, 0x00	; 0
    41f8:	a4 01       	movw	r20, r8
    41fa:	0e 94 0b 23 	call	0x4616	; 0x4616 <__ultoa_invert>
    41fe:	c8 2e       	mov	r12, r24
    4200:	c8 18       	sub	r12, r8
    4202:	0f 77       	andi	r16, 0x7F	; 127
    4204:	06 ff       	sbrs	r16, 6
    4206:	0b c0       	rjmp	.+22     	; 0x421e <vfprintf+0x5fc>
    4208:	20 2f       	mov	r18, r16
    420a:	2e 7f       	andi	r18, 0xFE	; 254
    420c:	c1 16       	cp	r12, r17
    420e:	50 f4       	brcc	.+20     	; 0x4224 <vfprintf+0x602>
    4210:	04 ff       	sbrs	r16, 4
    4212:	0a c0       	rjmp	.+20     	; 0x4228 <vfprintf+0x606>
    4214:	02 fd       	sbrc	r16, 2
    4216:	08 c0       	rjmp	.+16     	; 0x4228 <vfprintf+0x606>
    4218:	20 2f       	mov	r18, r16
    421a:	2e 7e       	andi	r18, 0xEE	; 238
    421c:	05 c0       	rjmp	.+10     	; 0x4228 <vfprintf+0x606>
    421e:	dc 2c       	mov	r13, r12
    4220:	20 2f       	mov	r18, r16
    4222:	03 c0       	rjmp	.+6      	; 0x422a <vfprintf+0x608>
    4224:	dc 2c       	mov	r13, r12
    4226:	01 c0       	rjmp	.+2      	; 0x422a <vfprintf+0x608>
    4228:	d1 2e       	mov	r13, r17
    422a:	24 ff       	sbrs	r18, 4
    422c:	0d c0       	rjmp	.+26     	; 0x4248 <vfprintf+0x626>
    422e:	fe 01       	movw	r30, r28
    4230:	ec 0d       	add	r30, r12
    4232:	f1 1d       	adc	r31, r1
    4234:	80 81       	ld	r24, Z
    4236:	80 33       	cpi	r24, 0x30	; 48
    4238:	11 f4       	brne	.+4      	; 0x423e <vfprintf+0x61c>
    423a:	29 7e       	andi	r18, 0xE9	; 233
    423c:	09 c0       	rjmp	.+18     	; 0x4250 <vfprintf+0x62e>
    423e:	22 ff       	sbrs	r18, 2
    4240:	06 c0       	rjmp	.+12     	; 0x424e <vfprintf+0x62c>
    4242:	d3 94       	inc	r13
    4244:	d3 94       	inc	r13
    4246:	04 c0       	rjmp	.+8      	; 0x4250 <vfprintf+0x62e>
    4248:	82 2f       	mov	r24, r18
    424a:	86 78       	andi	r24, 0x86	; 134
    424c:	09 f0       	breq	.+2      	; 0x4250 <vfprintf+0x62e>
    424e:	d3 94       	inc	r13
    4250:	23 fd       	sbrc	r18, 3
    4252:	13 c0       	rjmp	.+38     	; 0x427a <vfprintf+0x658>
    4254:	20 ff       	sbrs	r18, 0
    4256:	06 c0       	rjmp	.+12     	; 0x4264 <vfprintf+0x642>
    4258:	1c 2d       	mov	r17, r12
    425a:	d5 14       	cp	r13, r5
    425c:	18 f4       	brcc	.+6      	; 0x4264 <vfprintf+0x642>
    425e:	15 0d       	add	r17, r5
    4260:	1d 19       	sub	r17, r13
    4262:	d5 2c       	mov	r13, r5
    4264:	d5 14       	cp	r13, r5
    4266:	68 f4       	brcc	.+26     	; 0x4282 <vfprintf+0x660>
    4268:	b7 01       	movw	r22, r14
    426a:	80 e2       	ldi	r24, 0x20	; 32
    426c:	90 e0       	ldi	r25, 0x00	; 0
    426e:	2b 8b       	std	Y+19, r18	; 0x13
    4270:	0e 94 b7 22 	call	0x456e	; 0x456e <fputc>
    4274:	d3 94       	inc	r13
    4276:	2b 89       	ldd	r18, Y+19	; 0x13
    4278:	f5 cf       	rjmp	.-22     	; 0x4264 <vfprintf+0x642>
    427a:	d5 14       	cp	r13, r5
    427c:	10 f4       	brcc	.+4      	; 0x4282 <vfprintf+0x660>
    427e:	5d 18       	sub	r5, r13
    4280:	01 c0       	rjmp	.+2      	; 0x4284 <vfprintf+0x662>
    4282:	51 2c       	mov	r5, r1
    4284:	24 ff       	sbrs	r18, 4
    4286:	12 c0       	rjmp	.+36     	; 0x42ac <vfprintf+0x68a>
    4288:	b7 01       	movw	r22, r14
    428a:	80 e3       	ldi	r24, 0x30	; 48
    428c:	90 e0       	ldi	r25, 0x00	; 0
    428e:	2b 8b       	std	Y+19, r18	; 0x13
    4290:	0e 94 b7 22 	call	0x456e	; 0x456e <fputc>
    4294:	2b 89       	ldd	r18, Y+19	; 0x13
    4296:	22 ff       	sbrs	r18, 2
    4298:	17 c0       	rjmp	.+46     	; 0x42c8 <vfprintf+0x6a6>
    429a:	21 ff       	sbrs	r18, 1
    429c:	03 c0       	rjmp	.+6      	; 0x42a4 <vfprintf+0x682>
    429e:	88 e5       	ldi	r24, 0x58	; 88
    42a0:	90 e0       	ldi	r25, 0x00	; 0
    42a2:	02 c0       	rjmp	.+4      	; 0x42a8 <vfprintf+0x686>
    42a4:	88 e7       	ldi	r24, 0x78	; 120
    42a6:	90 e0       	ldi	r25, 0x00	; 0
    42a8:	b7 01       	movw	r22, r14
    42aa:	0c c0       	rjmp	.+24     	; 0x42c4 <vfprintf+0x6a2>
    42ac:	82 2f       	mov	r24, r18
    42ae:	86 78       	andi	r24, 0x86	; 134
    42b0:	59 f0       	breq	.+22     	; 0x42c8 <vfprintf+0x6a6>
    42b2:	21 fd       	sbrc	r18, 1
    42b4:	02 c0       	rjmp	.+4      	; 0x42ba <vfprintf+0x698>
    42b6:	80 e2       	ldi	r24, 0x20	; 32
    42b8:	01 c0       	rjmp	.+2      	; 0x42bc <vfprintf+0x69a>
    42ba:	8b e2       	ldi	r24, 0x2B	; 43
    42bc:	27 fd       	sbrc	r18, 7
    42be:	8d e2       	ldi	r24, 0x2D	; 45
    42c0:	b7 01       	movw	r22, r14
    42c2:	90 e0       	ldi	r25, 0x00	; 0
    42c4:	0e 94 b7 22 	call	0x456e	; 0x456e <fputc>
    42c8:	c1 16       	cp	r12, r17
    42ca:	38 f4       	brcc	.+14     	; 0x42da <vfprintf+0x6b8>
    42cc:	b7 01       	movw	r22, r14
    42ce:	80 e3       	ldi	r24, 0x30	; 48
    42d0:	90 e0       	ldi	r25, 0x00	; 0
    42d2:	0e 94 b7 22 	call	0x456e	; 0x456e <fputc>
    42d6:	11 50       	subi	r17, 0x01	; 1
    42d8:	f7 cf       	rjmp	.-18     	; 0x42c8 <vfprintf+0x6a6>
    42da:	ca 94       	dec	r12
    42dc:	f4 01       	movw	r30, r8
    42de:	ec 0d       	add	r30, r12
    42e0:	f1 1d       	adc	r31, r1
    42e2:	80 81       	ld	r24, Z
    42e4:	b7 01       	movw	r22, r14
    42e6:	90 e0       	ldi	r25, 0x00	; 0
    42e8:	0e 94 b7 22 	call	0x456e	; 0x456e <fputc>
    42ec:	c1 10       	cpse	r12, r1
    42ee:	f5 cf       	rjmp	.-22     	; 0x42da <vfprintf+0x6b8>
    42f0:	55 20       	and	r5, r5
    42f2:	09 f4       	brne	.+2      	; 0x42f6 <vfprintf+0x6d4>
    42f4:	c2 cc       	rjmp	.-1660   	; 0x3c7a <vfprintf+0x58>
    42f6:	b7 01       	movw	r22, r14
    42f8:	80 e2       	ldi	r24, 0x20	; 32
    42fa:	90 e0       	ldi	r25, 0x00	; 0
    42fc:	0e 94 b7 22 	call	0x456e	; 0x456e <fputc>
    4300:	5a 94       	dec	r5
    4302:	f6 cf       	rjmp	.-20     	; 0x42f0 <vfprintf+0x6ce>
    4304:	f7 01       	movw	r30, r14
    4306:	86 81       	ldd	r24, Z+6	; 0x06
    4308:	97 81       	ldd	r25, Z+7	; 0x07
    430a:	02 c0       	rjmp	.+4      	; 0x4310 <vfprintf+0x6ee>
    430c:	8f ef       	ldi	r24, 0xFF	; 255
    430e:	9f ef       	ldi	r25, 0xFF	; 255
    4310:	63 96       	adiw	r28, 0x13	; 19
    4312:	e2 e1       	ldi	r30, 0x12	; 18
    4314:	0c 94 ae 21 	jmp	0x435c	; 0x435c <__epilogue_restores__>

00004318 <__tablejump2__>:
    4318:	ee 0f       	add	r30, r30
    431a:	ff 1f       	adc	r31, r31

0000431c <__tablejump__>:
    431c:	05 90       	lpm	r0, Z+
    431e:	f4 91       	lpm	r31, Z
    4320:	e0 2d       	mov	r30, r0
    4322:	09 94       	ijmp

00004324 <__prologue_saves__>:
    4324:	2f 92       	push	r2
    4326:	3f 92       	push	r3
    4328:	4f 92       	push	r4
    432a:	5f 92       	push	r5
    432c:	6f 92       	push	r6
    432e:	7f 92       	push	r7
    4330:	8f 92       	push	r8
    4332:	9f 92       	push	r9
    4334:	af 92       	push	r10
    4336:	bf 92       	push	r11
    4338:	cf 92       	push	r12
    433a:	df 92       	push	r13
    433c:	ef 92       	push	r14
    433e:	ff 92       	push	r15
    4340:	0f 93       	push	r16
    4342:	1f 93       	push	r17
    4344:	cf 93       	push	r28
    4346:	df 93       	push	r29
    4348:	cd b7       	in	r28, 0x3d	; 61
    434a:	de b7       	in	r29, 0x3e	; 62
    434c:	ca 1b       	sub	r28, r26
    434e:	db 0b       	sbc	r29, r27
    4350:	0f b6       	in	r0, 0x3f	; 63
    4352:	f8 94       	cli
    4354:	de bf       	out	0x3e, r29	; 62
    4356:	0f be       	out	0x3f, r0	; 63
    4358:	cd bf       	out	0x3d, r28	; 61
    435a:	09 94       	ijmp

0000435c <__epilogue_restores__>:
    435c:	2a 88       	ldd	r2, Y+18	; 0x12
    435e:	39 88       	ldd	r3, Y+17	; 0x11
    4360:	48 88       	ldd	r4, Y+16	; 0x10
    4362:	5f 84       	ldd	r5, Y+15	; 0x0f
    4364:	6e 84       	ldd	r6, Y+14	; 0x0e
    4366:	7d 84       	ldd	r7, Y+13	; 0x0d
    4368:	8c 84       	ldd	r8, Y+12	; 0x0c
    436a:	9b 84       	ldd	r9, Y+11	; 0x0b
    436c:	aa 84       	ldd	r10, Y+10	; 0x0a
    436e:	b9 84       	ldd	r11, Y+9	; 0x09
    4370:	c8 84       	ldd	r12, Y+8	; 0x08
    4372:	df 80       	ldd	r13, Y+7	; 0x07
    4374:	ee 80       	ldd	r14, Y+6	; 0x06
    4376:	fd 80       	ldd	r15, Y+5	; 0x05
    4378:	0c 81       	ldd	r16, Y+4	; 0x04
    437a:	1b 81       	ldd	r17, Y+3	; 0x03
    437c:	aa 81       	ldd	r26, Y+2	; 0x02
    437e:	b9 81       	ldd	r27, Y+1	; 0x01
    4380:	ce 0f       	add	r28, r30
    4382:	d1 1d       	adc	r29, r1
    4384:	0f b6       	in	r0, 0x3f	; 63
    4386:	f8 94       	cli
    4388:	de bf       	out	0x3e, r29	; 62
    438a:	0f be       	out	0x3f, r0	; 63
    438c:	cd bf       	out	0x3d, r28	; 61
    438e:	ed 01       	movw	r28, r26
    4390:	08 95       	ret

00004392 <__ftoa_engine>:
    4392:	28 30       	cpi	r18, 0x08	; 8
    4394:	08 f0       	brcs	.+2      	; 0x4398 <__ftoa_engine+0x6>
    4396:	27 e0       	ldi	r18, 0x07	; 7
    4398:	33 27       	eor	r19, r19
    439a:	da 01       	movw	r26, r20
    439c:	99 0f       	add	r25, r25
    439e:	31 1d       	adc	r19, r1
    43a0:	87 fd       	sbrc	r24, 7
    43a2:	91 60       	ori	r25, 0x01	; 1
    43a4:	00 96       	adiw	r24, 0x00	; 0
    43a6:	61 05       	cpc	r22, r1
    43a8:	71 05       	cpc	r23, r1
    43aa:	39 f4       	brne	.+14     	; 0x43ba <__ftoa_engine+0x28>
    43ac:	32 60       	ori	r19, 0x02	; 2
    43ae:	2e 5f       	subi	r18, 0xFE	; 254
    43b0:	3d 93       	st	X+, r19
    43b2:	30 e3       	ldi	r19, 0x30	; 48
    43b4:	2a 95       	dec	r18
    43b6:	e1 f7       	brne	.-8      	; 0x43b0 <__ftoa_engine+0x1e>
    43b8:	08 95       	ret
    43ba:	9f 3f       	cpi	r25, 0xFF	; 255
    43bc:	30 f0       	brcs	.+12     	; 0x43ca <__ftoa_engine+0x38>
    43be:	80 38       	cpi	r24, 0x80	; 128
    43c0:	71 05       	cpc	r23, r1
    43c2:	61 05       	cpc	r22, r1
    43c4:	09 f0       	breq	.+2      	; 0x43c8 <__ftoa_engine+0x36>
    43c6:	3c 5f       	subi	r19, 0xFC	; 252
    43c8:	3c 5f       	subi	r19, 0xFC	; 252
    43ca:	3d 93       	st	X+, r19
    43cc:	91 30       	cpi	r25, 0x01	; 1
    43ce:	08 f0       	brcs	.+2      	; 0x43d2 <__ftoa_engine+0x40>
    43d0:	80 68       	ori	r24, 0x80	; 128
    43d2:	91 1d       	adc	r25, r1
    43d4:	df 93       	push	r29
    43d6:	cf 93       	push	r28
    43d8:	1f 93       	push	r17
    43da:	0f 93       	push	r16
    43dc:	ff 92       	push	r15
    43de:	ef 92       	push	r14
    43e0:	19 2f       	mov	r17, r25
    43e2:	98 7f       	andi	r25, 0xF8	; 248
    43e4:	96 95       	lsr	r25
    43e6:	e9 2f       	mov	r30, r25
    43e8:	96 95       	lsr	r25
    43ea:	96 95       	lsr	r25
    43ec:	e9 0f       	add	r30, r25
    43ee:	ff 27       	eor	r31, r31
    43f0:	ee 58       	subi	r30, 0x8E	; 142
    43f2:	fb 4f       	sbci	r31, 0xFB	; 251
    43f4:	99 27       	eor	r25, r25
    43f6:	33 27       	eor	r19, r19
    43f8:	ee 24       	eor	r14, r14
    43fa:	ff 24       	eor	r15, r15
    43fc:	a7 01       	movw	r20, r14
    43fe:	e7 01       	movw	r28, r14
    4400:	05 90       	lpm	r0, Z+
    4402:	08 94       	sec
    4404:	07 94       	ror	r0
    4406:	28 f4       	brcc	.+10     	; 0x4412 <__ftoa_engine+0x80>
    4408:	36 0f       	add	r19, r22
    440a:	e7 1e       	adc	r14, r23
    440c:	f8 1e       	adc	r15, r24
    440e:	49 1f       	adc	r20, r25
    4410:	51 1d       	adc	r21, r1
    4412:	66 0f       	add	r22, r22
    4414:	77 1f       	adc	r23, r23
    4416:	88 1f       	adc	r24, r24
    4418:	99 1f       	adc	r25, r25
    441a:	06 94       	lsr	r0
    441c:	a1 f7       	brne	.-24     	; 0x4406 <__ftoa_engine+0x74>
    441e:	05 90       	lpm	r0, Z+
    4420:	07 94       	ror	r0
    4422:	28 f4       	brcc	.+10     	; 0x442e <__ftoa_engine+0x9c>
    4424:	e7 0e       	add	r14, r23
    4426:	f8 1e       	adc	r15, r24
    4428:	49 1f       	adc	r20, r25
    442a:	56 1f       	adc	r21, r22
    442c:	c1 1d       	adc	r28, r1
    442e:	77 0f       	add	r23, r23
    4430:	88 1f       	adc	r24, r24
    4432:	99 1f       	adc	r25, r25
    4434:	66 1f       	adc	r22, r22
    4436:	06 94       	lsr	r0
    4438:	a1 f7       	brne	.-24     	; 0x4422 <__ftoa_engine+0x90>
    443a:	05 90       	lpm	r0, Z+
    443c:	07 94       	ror	r0
    443e:	28 f4       	brcc	.+10     	; 0x444a <__ftoa_engine+0xb8>
    4440:	f8 0e       	add	r15, r24
    4442:	49 1f       	adc	r20, r25
    4444:	56 1f       	adc	r21, r22
    4446:	c7 1f       	adc	r28, r23
    4448:	d1 1d       	adc	r29, r1
    444a:	88 0f       	add	r24, r24
    444c:	99 1f       	adc	r25, r25
    444e:	66 1f       	adc	r22, r22
    4450:	77 1f       	adc	r23, r23
    4452:	06 94       	lsr	r0
    4454:	a1 f7       	brne	.-24     	; 0x443e <__ftoa_engine+0xac>
    4456:	05 90       	lpm	r0, Z+
    4458:	07 94       	ror	r0
    445a:	20 f4       	brcc	.+8      	; 0x4464 <__ftoa_engine+0xd2>
    445c:	49 0f       	add	r20, r25
    445e:	56 1f       	adc	r21, r22
    4460:	c7 1f       	adc	r28, r23
    4462:	d8 1f       	adc	r29, r24
    4464:	99 0f       	add	r25, r25
    4466:	66 1f       	adc	r22, r22
    4468:	77 1f       	adc	r23, r23
    446a:	88 1f       	adc	r24, r24
    446c:	06 94       	lsr	r0
    446e:	a9 f7       	brne	.-22     	; 0x445a <__ftoa_engine+0xc8>
    4470:	84 91       	lpm	r24, Z
    4472:	10 95       	com	r17
    4474:	17 70       	andi	r17, 0x07	; 7
    4476:	41 f0       	breq	.+16     	; 0x4488 <__ftoa_engine+0xf6>
    4478:	d6 95       	lsr	r29
    447a:	c7 95       	ror	r28
    447c:	57 95       	ror	r21
    447e:	47 95       	ror	r20
    4480:	f7 94       	ror	r15
    4482:	e7 94       	ror	r14
    4484:	1a 95       	dec	r17
    4486:	c1 f7       	brne	.-16     	; 0x4478 <__ftoa_engine+0xe6>
    4488:	e8 e1       	ldi	r30, 0x18	; 24
    448a:	f4 e0       	ldi	r31, 0x04	; 4
    448c:	68 94       	set
    448e:	15 90       	lpm	r1, Z+
    4490:	15 91       	lpm	r17, Z+
    4492:	35 91       	lpm	r19, Z+
    4494:	65 91       	lpm	r22, Z+
    4496:	95 91       	lpm	r25, Z+
    4498:	05 90       	lpm	r0, Z+
    449a:	7f e2       	ldi	r23, 0x2F	; 47
    449c:	73 95       	inc	r23
    449e:	e1 18       	sub	r14, r1
    44a0:	f1 0a       	sbc	r15, r17
    44a2:	43 0b       	sbc	r20, r19
    44a4:	56 0b       	sbc	r21, r22
    44a6:	c9 0b       	sbc	r28, r25
    44a8:	d0 09       	sbc	r29, r0
    44aa:	c0 f7       	brcc	.-16     	; 0x449c <__ftoa_engine+0x10a>
    44ac:	e1 0c       	add	r14, r1
    44ae:	f1 1e       	adc	r15, r17
    44b0:	43 1f       	adc	r20, r19
    44b2:	56 1f       	adc	r21, r22
    44b4:	c9 1f       	adc	r28, r25
    44b6:	d0 1d       	adc	r29, r0
    44b8:	7e f4       	brtc	.+30     	; 0x44d8 <__ftoa_engine+0x146>
    44ba:	70 33       	cpi	r23, 0x30	; 48
    44bc:	11 f4       	brne	.+4      	; 0x44c2 <__ftoa_engine+0x130>
    44be:	8a 95       	dec	r24
    44c0:	e6 cf       	rjmp	.-52     	; 0x448e <__ftoa_engine+0xfc>
    44c2:	e8 94       	clt
    44c4:	01 50       	subi	r16, 0x01	; 1
    44c6:	30 f0       	brcs	.+12     	; 0x44d4 <__ftoa_engine+0x142>
    44c8:	08 0f       	add	r16, r24
    44ca:	0a f4       	brpl	.+2      	; 0x44ce <__ftoa_engine+0x13c>
    44cc:	00 27       	eor	r16, r16
    44ce:	02 17       	cp	r16, r18
    44d0:	08 f4       	brcc	.+2      	; 0x44d4 <__ftoa_engine+0x142>
    44d2:	20 2f       	mov	r18, r16
    44d4:	23 95       	inc	r18
    44d6:	02 2f       	mov	r16, r18
    44d8:	7a 33       	cpi	r23, 0x3A	; 58
    44da:	28 f0       	brcs	.+10     	; 0x44e6 <__ftoa_engine+0x154>
    44dc:	79 e3       	ldi	r23, 0x39	; 57
    44de:	7d 93       	st	X+, r23
    44e0:	2a 95       	dec	r18
    44e2:	e9 f7       	brne	.-6      	; 0x44de <__ftoa_engine+0x14c>
    44e4:	10 c0       	rjmp	.+32     	; 0x4506 <__ftoa_engine+0x174>
    44e6:	7d 93       	st	X+, r23
    44e8:	2a 95       	dec	r18
    44ea:	89 f6       	brne	.-94     	; 0x448e <__ftoa_engine+0xfc>
    44ec:	06 94       	lsr	r0
    44ee:	97 95       	ror	r25
    44f0:	67 95       	ror	r22
    44f2:	37 95       	ror	r19
    44f4:	17 95       	ror	r17
    44f6:	17 94       	ror	r1
    44f8:	e1 18       	sub	r14, r1
    44fa:	f1 0a       	sbc	r15, r17
    44fc:	43 0b       	sbc	r20, r19
    44fe:	56 0b       	sbc	r21, r22
    4500:	c9 0b       	sbc	r28, r25
    4502:	d0 09       	sbc	r29, r0
    4504:	98 f0       	brcs	.+38     	; 0x452c <__ftoa_engine+0x19a>
    4506:	23 95       	inc	r18
    4508:	7e 91       	ld	r23, -X
    450a:	73 95       	inc	r23
    450c:	7a 33       	cpi	r23, 0x3A	; 58
    450e:	08 f0       	brcs	.+2      	; 0x4512 <__ftoa_engine+0x180>
    4510:	70 e3       	ldi	r23, 0x30	; 48
    4512:	7c 93       	st	X, r23
    4514:	20 13       	cpse	r18, r16
    4516:	b8 f7       	brcc	.-18     	; 0x4506 <__ftoa_engine+0x174>
    4518:	7e 91       	ld	r23, -X
    451a:	70 61       	ori	r23, 0x10	; 16
    451c:	7d 93       	st	X+, r23
    451e:	30 f0       	brcs	.+12     	; 0x452c <__ftoa_engine+0x19a>
    4520:	83 95       	inc	r24
    4522:	71 e3       	ldi	r23, 0x31	; 49
    4524:	7d 93       	st	X+, r23
    4526:	70 e3       	ldi	r23, 0x30	; 48
    4528:	2a 95       	dec	r18
    452a:	e1 f7       	brne	.-8      	; 0x4524 <__ftoa_engine+0x192>
    452c:	11 24       	eor	r1, r1
    452e:	ef 90       	pop	r14
    4530:	ff 90       	pop	r15
    4532:	0f 91       	pop	r16
    4534:	1f 91       	pop	r17
    4536:	cf 91       	pop	r28
    4538:	df 91       	pop	r29
    453a:	99 27       	eor	r25, r25
    453c:	87 fd       	sbrc	r24, 7
    453e:	90 95       	com	r25
    4540:	08 95       	ret

00004542 <strnlen_P>:
    4542:	fc 01       	movw	r30, r24
    4544:	05 90       	lpm	r0, Z+
    4546:	61 50       	subi	r22, 0x01	; 1
    4548:	70 40       	sbci	r23, 0x00	; 0
    454a:	01 10       	cpse	r0, r1
    454c:	d8 f7       	brcc	.-10     	; 0x4544 <strnlen_P+0x2>
    454e:	80 95       	com	r24
    4550:	90 95       	com	r25
    4552:	8e 0f       	add	r24, r30
    4554:	9f 1f       	adc	r25, r31
    4556:	08 95       	ret

00004558 <strnlen>:
    4558:	fc 01       	movw	r30, r24
    455a:	61 50       	subi	r22, 0x01	; 1
    455c:	70 40       	sbci	r23, 0x00	; 0
    455e:	01 90       	ld	r0, Z+
    4560:	01 10       	cpse	r0, r1
    4562:	d8 f7       	brcc	.-10     	; 0x455a <strnlen+0x2>
    4564:	80 95       	com	r24
    4566:	90 95       	com	r25
    4568:	8e 0f       	add	r24, r30
    456a:	9f 1f       	adc	r25, r31
    456c:	08 95       	ret

0000456e <fputc>:
    456e:	0f 93       	push	r16
    4570:	1f 93       	push	r17
    4572:	cf 93       	push	r28
    4574:	df 93       	push	r29
    4576:	18 2f       	mov	r17, r24
    4578:	09 2f       	mov	r16, r25
    457a:	eb 01       	movw	r28, r22
    457c:	8b 81       	ldd	r24, Y+3	; 0x03
    457e:	81 fd       	sbrc	r24, 1
    4580:	03 c0       	rjmp	.+6      	; 0x4588 <fputc+0x1a>
    4582:	8f ef       	ldi	r24, 0xFF	; 255
    4584:	9f ef       	ldi	r25, 0xFF	; 255
    4586:	20 c0       	rjmp	.+64     	; 0x45c8 <fputc+0x5a>
    4588:	82 ff       	sbrs	r24, 2
    458a:	10 c0       	rjmp	.+32     	; 0x45ac <fputc+0x3e>
    458c:	4e 81       	ldd	r20, Y+6	; 0x06
    458e:	5f 81       	ldd	r21, Y+7	; 0x07
    4590:	2c 81       	ldd	r18, Y+4	; 0x04
    4592:	3d 81       	ldd	r19, Y+5	; 0x05
    4594:	42 17       	cp	r20, r18
    4596:	53 07       	cpc	r21, r19
    4598:	7c f4       	brge	.+30     	; 0x45b8 <fputc+0x4a>
    459a:	e8 81       	ld	r30, Y
    459c:	f9 81       	ldd	r31, Y+1	; 0x01
    459e:	9f 01       	movw	r18, r30
    45a0:	2f 5f       	subi	r18, 0xFF	; 255
    45a2:	3f 4f       	sbci	r19, 0xFF	; 255
    45a4:	39 83       	std	Y+1, r19	; 0x01
    45a6:	28 83       	st	Y, r18
    45a8:	10 83       	st	Z, r17
    45aa:	06 c0       	rjmp	.+12     	; 0x45b8 <fputc+0x4a>
    45ac:	e8 85       	ldd	r30, Y+8	; 0x08
    45ae:	f9 85       	ldd	r31, Y+9	; 0x09
    45b0:	81 2f       	mov	r24, r17
    45b2:	09 95       	icall
    45b4:	89 2b       	or	r24, r25
    45b6:	29 f7       	brne	.-54     	; 0x4582 <fputc+0x14>
    45b8:	2e 81       	ldd	r18, Y+6	; 0x06
    45ba:	3f 81       	ldd	r19, Y+7	; 0x07
    45bc:	2f 5f       	subi	r18, 0xFF	; 255
    45be:	3f 4f       	sbci	r19, 0xFF	; 255
    45c0:	3f 83       	std	Y+7, r19	; 0x07
    45c2:	2e 83       	std	Y+6, r18	; 0x06
    45c4:	81 2f       	mov	r24, r17
    45c6:	90 2f       	mov	r25, r16
    45c8:	df 91       	pop	r29
    45ca:	cf 91       	pop	r28
    45cc:	1f 91       	pop	r17
    45ce:	0f 91       	pop	r16
    45d0:	08 95       	ret

000045d2 <sprintf>:
    45d2:	ae e0       	ldi	r26, 0x0E	; 14
    45d4:	b0 e0       	ldi	r27, 0x00	; 0
    45d6:	ef ee       	ldi	r30, 0xEF	; 239
    45d8:	f2 e2       	ldi	r31, 0x22	; 34
    45da:	0c 94 a0 21 	jmp	0x4340	; 0x4340 <__prologue_saves__+0x1c>
    45de:	0d 89       	ldd	r16, Y+21	; 0x15
    45e0:	1e 89       	ldd	r17, Y+22	; 0x16
    45e2:	86 e0       	ldi	r24, 0x06	; 6
    45e4:	8c 83       	std	Y+4, r24	; 0x04
    45e6:	1a 83       	std	Y+2, r17	; 0x02
    45e8:	09 83       	std	Y+1, r16	; 0x01
    45ea:	8f ef       	ldi	r24, 0xFF	; 255
    45ec:	9f e7       	ldi	r25, 0x7F	; 127
    45ee:	9e 83       	std	Y+6, r25	; 0x06
    45f0:	8d 83       	std	Y+5, r24	; 0x05
    45f2:	ae 01       	movw	r20, r28
    45f4:	47 5e       	subi	r20, 0xE7	; 231
    45f6:	5f 4f       	sbci	r21, 0xFF	; 255
    45f8:	6f 89       	ldd	r22, Y+23	; 0x17
    45fa:	78 8d       	ldd	r23, Y+24	; 0x18
    45fc:	ce 01       	movw	r24, r28
    45fe:	01 96       	adiw	r24, 0x01	; 1
    4600:	0e 94 11 1e 	call	0x3c22	; 0x3c22 <vfprintf>
    4604:	ef 81       	ldd	r30, Y+7	; 0x07
    4606:	f8 85       	ldd	r31, Y+8	; 0x08
    4608:	e0 0f       	add	r30, r16
    460a:	f1 1f       	adc	r31, r17
    460c:	10 82       	st	Z, r1
    460e:	2e 96       	adiw	r28, 0x0e	; 14
    4610:	e4 e0       	ldi	r30, 0x04	; 4
    4612:	0c 94 bc 21 	jmp	0x4378	; 0x4378 <__epilogue_restores__+0x1c>

00004616 <__ultoa_invert>:
    4616:	fa 01       	movw	r30, r20
    4618:	aa 27       	eor	r26, r26
    461a:	28 30       	cpi	r18, 0x08	; 8
    461c:	51 f1       	breq	.+84     	; 0x4672 <__ultoa_invert+0x5c>
    461e:	20 31       	cpi	r18, 0x10	; 16
    4620:	81 f1       	breq	.+96     	; 0x4682 <__ultoa_invert+0x6c>
    4622:	e8 94       	clt
    4624:	6f 93       	push	r22
    4626:	6e 7f       	andi	r22, 0xFE	; 254
    4628:	6e 5f       	subi	r22, 0xFE	; 254
    462a:	7f 4f       	sbci	r23, 0xFF	; 255
    462c:	8f 4f       	sbci	r24, 0xFF	; 255
    462e:	9f 4f       	sbci	r25, 0xFF	; 255
    4630:	af 4f       	sbci	r26, 0xFF	; 255
    4632:	b1 e0       	ldi	r27, 0x01	; 1
    4634:	3e d0       	rcall	.+124    	; 0x46b2 <__ultoa_invert+0x9c>
    4636:	b4 e0       	ldi	r27, 0x04	; 4
    4638:	3c d0       	rcall	.+120    	; 0x46b2 <__ultoa_invert+0x9c>
    463a:	67 0f       	add	r22, r23
    463c:	78 1f       	adc	r23, r24
    463e:	89 1f       	adc	r24, r25
    4640:	9a 1f       	adc	r25, r26
    4642:	a1 1d       	adc	r26, r1
    4644:	68 0f       	add	r22, r24
    4646:	79 1f       	adc	r23, r25
    4648:	8a 1f       	adc	r24, r26
    464a:	91 1d       	adc	r25, r1
    464c:	a1 1d       	adc	r26, r1
    464e:	6a 0f       	add	r22, r26
    4650:	71 1d       	adc	r23, r1
    4652:	81 1d       	adc	r24, r1
    4654:	91 1d       	adc	r25, r1
    4656:	a1 1d       	adc	r26, r1
    4658:	20 d0       	rcall	.+64     	; 0x469a <__ultoa_invert+0x84>
    465a:	09 f4       	brne	.+2      	; 0x465e <__ultoa_invert+0x48>
    465c:	68 94       	set
    465e:	3f 91       	pop	r19
    4660:	2a e0       	ldi	r18, 0x0A	; 10
    4662:	26 9f       	mul	r18, r22
    4664:	11 24       	eor	r1, r1
    4666:	30 19       	sub	r19, r0
    4668:	30 5d       	subi	r19, 0xD0	; 208
    466a:	31 93       	st	Z+, r19
    466c:	de f6       	brtc	.-74     	; 0x4624 <__ultoa_invert+0xe>
    466e:	cf 01       	movw	r24, r30
    4670:	08 95       	ret
    4672:	46 2f       	mov	r20, r22
    4674:	47 70       	andi	r20, 0x07	; 7
    4676:	40 5d       	subi	r20, 0xD0	; 208
    4678:	41 93       	st	Z+, r20
    467a:	b3 e0       	ldi	r27, 0x03	; 3
    467c:	0f d0       	rcall	.+30     	; 0x469c <__ultoa_invert+0x86>
    467e:	c9 f7       	brne	.-14     	; 0x4672 <__ultoa_invert+0x5c>
    4680:	f6 cf       	rjmp	.-20     	; 0x466e <__ultoa_invert+0x58>
    4682:	46 2f       	mov	r20, r22
    4684:	4f 70       	andi	r20, 0x0F	; 15
    4686:	40 5d       	subi	r20, 0xD0	; 208
    4688:	4a 33       	cpi	r20, 0x3A	; 58
    468a:	18 f0       	brcs	.+6      	; 0x4692 <__ultoa_invert+0x7c>
    468c:	49 5d       	subi	r20, 0xD9	; 217
    468e:	31 fd       	sbrc	r19, 1
    4690:	40 52       	subi	r20, 0x20	; 32
    4692:	41 93       	st	Z+, r20
    4694:	02 d0       	rcall	.+4      	; 0x469a <__ultoa_invert+0x84>
    4696:	a9 f7       	brne	.-22     	; 0x4682 <__ultoa_invert+0x6c>
    4698:	ea cf       	rjmp	.-44     	; 0x466e <__ultoa_invert+0x58>
    469a:	b4 e0       	ldi	r27, 0x04	; 4
    469c:	a6 95       	lsr	r26
    469e:	97 95       	ror	r25
    46a0:	87 95       	ror	r24
    46a2:	77 95       	ror	r23
    46a4:	67 95       	ror	r22
    46a6:	ba 95       	dec	r27
    46a8:	c9 f7       	brne	.-14     	; 0x469c <__ultoa_invert+0x86>
    46aa:	00 97       	sbiw	r24, 0x00	; 0
    46ac:	61 05       	cpc	r22, r1
    46ae:	71 05       	cpc	r23, r1
    46b0:	08 95       	ret
    46b2:	9b 01       	movw	r18, r22
    46b4:	ac 01       	movw	r20, r24
    46b6:	0a 2e       	mov	r0, r26
    46b8:	06 94       	lsr	r0
    46ba:	57 95       	ror	r21
    46bc:	47 95       	ror	r20
    46be:	37 95       	ror	r19
    46c0:	27 95       	ror	r18
    46c2:	ba 95       	dec	r27
    46c4:	c9 f7       	brne	.-14     	; 0x46b8 <__ultoa_invert+0xa2>
    46c6:	62 0f       	add	r22, r18
    46c8:	73 1f       	adc	r23, r19
    46ca:	84 1f       	adc	r24, r20
    46cc:	95 1f       	adc	r25, r21
    46ce:	a0 1d       	adc	r26, r0
    46d0:	08 95       	ret

000046d2 <__do_global_dtors>:
    46d2:	15 e0       	ldi	r17, 0x05	; 5
    46d4:	c4 e1       	ldi	r28, 0x14	; 20
    46d6:	d5 e0       	ldi	r29, 0x05	; 5
    46d8:	04 c0       	rjmp	.+8      	; 0x46e2 <__do_global_dtors+0x10>
    46da:	fe 01       	movw	r30, r28
    46dc:	0e 94 8e 21 	call	0x431c	; 0x431c <__tablejump__>
    46e0:	22 96       	adiw	r28, 0x02	; 2
    46e2:	c6 31       	cpi	r28, 0x16	; 22
    46e4:	d1 07       	cpc	r29, r17
    46e6:	c9 f7       	brne	.-14     	; 0x46da <__do_global_dtors+0x8>
    46e8:	f8 94       	cli

000046ea <__stop_program>:
    46ea:	ff cf       	rjmp	.-2      	; 0x46ea <__stop_program>
