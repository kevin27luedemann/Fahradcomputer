
Fahradcomputer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000198  00800100  0000499e  00004a32  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000499e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000046e  00800298  00800298  00004bca  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00004bca  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000002f8  00000000  00000000  00004c26  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00006541  00000000  00000000  00004f1e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000010dc  00000000  00000000  0000b45f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000120d  00000000  00000000  0000c53b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000b94  00000000  00000000  0000d748  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000e27  00000000  00000000  0000e2dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00005291  00000000  00000000  0000f103  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000300  00000000  00000000  00014394  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 8b 02 	jmp	0x516	; 0x516 <__dtors_end>
       4:	0c 94 b3 02 	jmp	0x566	; 0x566 <__bad_interrupt>
       8:	0c 94 b3 02 	jmp	0x566	; 0x566 <__bad_interrupt>
       c:	0c 94 b3 02 	jmp	0x566	; 0x566 <__bad_interrupt>
      10:	0c 94 b3 02 	jmp	0x566	; 0x566 <__bad_interrupt>
      14:	0c 94 b3 02 	jmp	0x566	; 0x566 <__bad_interrupt>
      18:	0c 94 b3 02 	jmp	0x566	; 0x566 <__bad_interrupt>
      1c:	0c 94 b3 02 	jmp	0x566	; 0x566 <__bad_interrupt>
      20:	0c 94 b3 02 	jmp	0x566	; 0x566 <__bad_interrupt>
      24:	0c 94 da 13 	jmp	0x27b4	; 0x27b4 <__vector_9>
      28:	0c 94 b3 02 	jmp	0x566	; 0x566 <__bad_interrupt>
      2c:	0c 94 b3 02 	jmp	0x566	; 0x566 <__bad_interrupt>
      30:	0c 94 b3 02 	jmp	0x566	; 0x566 <__bad_interrupt>
      34:	0c 94 b3 02 	jmp	0x566	; 0x566 <__bad_interrupt>
      38:	0c 94 b3 02 	jmp	0x566	; 0x566 <__bad_interrupt>
      3c:	0c 94 b3 02 	jmp	0x566	; 0x566 <__bad_interrupt>
      40:	0c 94 b3 02 	jmp	0x566	; 0x566 <__bad_interrupt>
      44:	0c 94 b3 02 	jmp	0x566	; 0x566 <__bad_interrupt>
      48:	0c 94 b3 02 	jmp	0x566	; 0x566 <__bad_interrupt>
      4c:	0c 94 b3 02 	jmp	0x566	; 0x566 <__bad_interrupt>
      50:	0c 94 b3 02 	jmp	0x566	; 0x566 <__bad_interrupt>
      54:	0c 94 b3 02 	jmp	0x566	; 0x566 <__bad_interrupt>
      58:	0c 94 b3 02 	jmp	0x566	; 0x566 <__bad_interrupt>
      5c:	0c 94 b3 02 	jmp	0x566	; 0x566 <__bad_interrupt>
      60:	0c 94 b3 02 	jmp	0x566	; 0x566 <__bad_interrupt>
      64:	0c 94 b3 02 	jmp	0x566	; 0x566 <__bad_interrupt>
      68:	2b 11       	cpse	r18, r11
      6a:	53 11       	cpse	r21, r3
      6c:	7d 11       	cpse	r23, r13
      6e:	a8 11       	cpse	r26, r8
      70:	d2 11       	cpse	r29, r2
      72:	fb 11       	cpse	r31, r11
      74:	23 12       	cpse	r2, r19
      76:	4c 12       	cpse	r4, r28
      78:	c4 12       	cpse	r12, r20
      7a:	ef 12       	cpse	r14, r31
      7c:	cb 16       	cp	r12, r27
      7e:	d2 16       	cp	r13, r18
      80:	d9 16       	cp	r13, r25
      82:	e0 16       	cp	r14, r16
      84:	e7 16       	cp	r14, r23
      86:	ee 16       	cp	r14, r30
      88:	f5 16       	cp	r15, r21
      8a:	fc 16       	cp	r15, r28
      8c:	08 4a       	sbci	r16, 0xA8	; 168
      8e:	d7 3b       	cpi	r29, 0xB7	; 183
      90:	3b ce       	rjmp	.-906    	; 0xfffffd08 <__eeprom_end+0xff7efd08>
      92:	01 6e       	ori	r16, 0xE1	; 225
      94:	84 bc       	out	0x24, r8	; 36
      96:	bf fd       	.word	0xfdbf	; ????
      98:	c1 2f       	mov	r28, r17
      9a:	3d 6c       	ori	r19, 0xCD	; 205
      9c:	74 31       	cpi	r23, 0x14	; 20
      9e:	9a bd       	out	0x2a, r25	; 42
      a0:	56 83       	std	Z+6, r21	; 0x06
      a2:	3d da       	rcall	.-2950   	; 0xfffff51e <__eeprom_end+0xff7ef51e>
      a4:	3d 00       	.word	0x003d	; ????
      a6:	c7 7f       	andi	r28, 0xF7	; 247
      a8:	11 be       	out	0x31, r1	; 49
      aa:	d9 e4       	ldi	r29, 0x49	; 73
      ac:	bb 4c       	sbci	r27, 0xCB	; 203
      ae:	3e 91       	ld	r19, -X
      b0:	6b aa       	std	Y+51, r6	; 0x33
      b2:	aa be       	out	0x3a, r10	; 58
      b4:	00 00       	nop
      b6:	00 80       	ld	r0, Z
      b8:	3f 05       	cpc	r19, r15
      ba:	a8 4c       	sbci	r26, 0xC8	; 200
      bc:	cd b2       	in	r12, 0x1d	; 29
      be:	d4 4e       	sbci	r29, 0xE4	; 228
      c0:	b9 38       	cpi	r27, 0x89	; 137
      c2:	36 a9       	ldd	r19, Z+54	; 0x36
      c4:	02 0c       	add	r0, r2
      c6:	50 b9       	out	0x00, r21	; 0
      c8:	91 86       	std	Z+9, r9	; 0x09
      ca:	88 08       	sbc	r8, r8
      cc:	3c a6       	std	Y+44, r3	; 0x2c
      ce:	aa aa       	std	Y+50, r10	; 0x32
      d0:	2a be       	out	0x3a, r2	; 58
      d2:	00 00       	nop
      d4:	00 80       	ld	r0, Z
      d6:	3f 06       	cpc	r3, r31
      d8:	64 ec       	ldi	r22, 0xC4	; 196
      da:	1b 3c       	cpi	r17, 0xCB	; 203
      dc:	04 bc       	out	0x24, r0	; 36
      de:	16 3e       	cpi	r17, 0xE6	; 230
      e0:	3b e5       	ldi	r19, 0x5B	; 91
      e2:	b9 3c       	cpi	r27, 0xC9	; 201
      e4:	c9 3c       	cpi	r28, 0xC9	; 201
      e6:	37 c2       	rjmp	.+1134   	; 0x556 <__do_global_ctors+0xe>
      e8:	9e 5a       	subi	r25, 0xAE	; 174
      ea:	3d 66       	ori	r19, 0x6D	; 109
      ec:	04 98       	cbi	0x00, 4	; 0
      ee:	08 3e       	cpi	r16, 0xE8	; 232
      f0:	ea 69       	ori	r30, 0x9A	; 154
      f2:	aa aa       	std	Y+50, r10	; 0x32
      f4:	3e 00       	.word	0x003e	; ????
      f6:	00 00       	nop
      f8:	80 3f       	cpi	r24, 0xF0	; 240

000000fa <__trampolines_end>:
      fa:	00 e0       	ldi	r16, 0x00	; 0
      fc:	f8 fc       	.word	0xfcf8	; ????
      fe:	fe 1e       	adc	r15, r30
     100:	07 07       	cpc	r16, r23
     102:	07 07       	cpc	r16, r23
     104:	1e fe       	.word	0xfe1e	; ????
     106:	fc f8       	.word	0xf8fc	; ????
     108:	f0 00       	.word	0x00f0	; ????
     10a:	00 07       	cpc	r16, r16
     10c:	0f 3f       	cpi	r16, 0xFF	; 255
     10e:	3f 7c       	andi	r19, 0xCF	; 207
     110:	70 70       	andi	r23, 0x00	; 0
     112:	70 70       	andi	r23, 0x00	; 0
     114:	7c 3f       	cpi	r23, 0xFC	; 252
     116:	1f 1f       	adc	r17, r31
     118:	07 00       	.word	0x0007	; ????
     11a:	00 00       	nop
     11c:	00 06       	cpc	r0, r16
     11e:	07 07       	cpc	r16, r23
     120:	ff ff       	.word	0xffff	; ????
     122:	ff ff       	.word	0xffff	; ????
	...
     130:	7f 7f       	andi	r23, 0xFF	; 255
     132:	7f 7f       	andi	r23, 0xFF	; 255
     134:	00 00       	nop
     136:	00 00       	nop
     138:	00 00       	nop
     13a:	00 38       	cpi	r16, 0x80	; 128
     13c:	3c 3e       	cpi	r19, 0xEC	; 236
     13e:	3e 0f       	add	r19, r30
     140:	07 07       	cpc	r16, r23
     142:	07 cf       	rjmp	.-498    	; 0xffffff52 <__eeprom_end+0xff7eff52>
     144:	ff fe       	.word	0xfeff	; ????
     146:	fe 38       	cpi	r31, 0x8E	; 142
     148:	00 00       	nop
     14a:	00 40       	sbci	r16, 0x00	; 0
     14c:	40 60       	ori	r20, 0x00	; 0
     14e:	70 78       	andi	r23, 0x80	; 128
     150:	7c 7e       	andi	r23, 0xEC	; 236
     152:	7f 77       	andi	r23, 0x7F	; 127
     154:	73 71       	andi	r23, 0x13	; 19
     156:	70 70       	andi	r23, 0x00	; 0
     158:	00 00       	nop
     15a:	00 18       	sub	r0, r0
     15c:	1c 1e       	adc	r1, r28
     15e:	1e 0f       	add	r17, r30
     160:	c7 c7       	rjmp	.+3982   	; 0x10f0 <_Z14willkommenpagev+0x4e>
     162:	e7 ff       	sbrs	r30, 7
     164:	fe be       	out	0x3e, r15	; 62
     166:	9c 00       	.word	0x009c	; ????
     168:	00 00       	nop
     16a:	00 0c       	add	r0, r0
     16c:	1c 3c       	cpi	r17, 0xCC	; 204
     16e:	3c 78       	andi	r19, 0x8C	; 140
     170:	70 70       	andi	r23, 0x00	; 0
     172:	70 79       	andi	r23, 0x90	; 144
     174:	7f 3f       	cpi	r23, 0xFF	; 255
     176:	1f 0f       	add	r17, r31
     178:	00 00       	nop
     17a:	00 00       	nop
     17c:	80 c0       	rjmp	.+256    	; 0x27e <_ZL7font5x8+0x44>
     17e:	e0 70       	andi	r30, 0x00	; 0
     180:	38 1c       	adc	r3, r8
     182:	1e ff       	.word	0xff1e	; ????
     184:	ff ff       	.word	0xffff	; ????
     186:	ff 00       	.word	0x00ff	; ????
     188:	00 00       	nop
     18a:	06 07       	cpc	r16, r22
     18c:	07 07       	cpc	r16, r23
     18e:	06 06       	cpc	r0, r22
     190:	06 06       	cpc	r0, r22
     192:	06 7f       	andi	r16, 0xF6	; 246
     194:	7f 7f       	andi	r23, 0xFF	; 255
     196:	7f 06       	cpc	r7, r31
     198:	06 00       	.word	0x0006	; ????
     19a:	00 00       	nop
     19c:	00 00       	nop
     19e:	f0 ff       	sbrs	r31, 0
     1a0:	ff ff       	.word	0xffff	; ????
     1a2:	e7 e7       	ldi	r30, 0x77	; 119
     1a4:	e7 e7       	ldi	r30, 0x77	; 119
     1a6:	c7 87       	std	Z+15, r28	; 0x0f
     1a8:	00 00       	nop
     1aa:	00 00       	nop
     1ac:	38 78       	andi	r19, 0x88	; 136
     1ae:	71 70       	andi	r23, 0x01	; 1
     1b0:	70 70       	andi	r23, 0x00	; 0
     1b2:	70 70       	andi	r23, 0x00	; 0
     1b4:	39 3f       	cpi	r19, 0xF9	; 249
     1b6:	3f 1f       	adc	r19, r31
     1b8:	0f 00       	.word	0x000f	; ????
     1ba:	00 80       	ld	r0, Z
     1bc:	e0 f0       	brcs	.+56     	; 0x1f6 <__trampolines_end+0xfc>
     1be:	f8 fc       	.word	0xfcf8	; ????
     1c0:	7f 7f       	andi	r23, 0xFF	; 255
     1c2:	6f 67       	ori	r22, 0x7F	; 127
     1c4:	e1 e1       	ldi	r30, 0x11	; 17
     1c6:	c0 80       	ld	r12, Z
     1c8:	00 00       	nop
     1ca:	00 0f       	add	r16, r16
     1cc:	1f 3f       	cpi	r17, 0xFF	; 255
     1ce:	3f 78       	andi	r19, 0x8F	; 143
     1d0:	70 70       	andi	r23, 0x00	; 0
     1d2:	70 70       	andi	r23, 0x00	; 0
     1d4:	78 3f       	cpi	r23, 0xF8	; 248
     1d6:	3f 1f       	adc	r19, r31
     1d8:	0f 00       	.word	0x000f	; ????
     1da:	00 07       	cpc	r16, r16
     1dc:	07 07       	cpc	r16, r23
     1de:	07 07       	cpc	r16, r23
     1e0:	c7 e7       	ldi	r28, 0x77	; 119
     1e2:	f7 ff       	sbrs	r31, 7
     1e4:	7f 3f       	cpi	r23, 0xFF	; 255
     1e6:	1f 07       	cpc	r17, r31
     1e8:	03 01       	movw	r0, r6
     1ea:	00 20       	and	r0, r0
     1ec:	38 7c       	andi	r19, 0xC8	; 200
     1ee:	7e 3f       	cpi	r23, 0xFE	; 254
     1f0:	0f 07       	cpc	r16, r31
     1f2:	03 00       	.word	0x0003	; ????
	...
     1fc:	00 1c       	adc	r0, r0
     1fe:	be fe       	.word	0xfebe	; ????
     200:	ff e7       	ldi	r31, 0x7F	; 127
     202:	c3 c3       	rjmp	.+1926   	; 0x98a <__stack+0x8b>
     204:	e7 ff       	sbrs	r30, 7
     206:	fe be       	out	0x3e, r15	; 62
     208:	1c 00       	.word	0x001c	; ????
     20a:	00 00       	nop
     20c:	0e 3f       	cpi	r16, 0xFE	; 254
     20e:	3f 7f       	andi	r19, 0xFF	; 255
     210:	71 60       	ori	r23, 0x01	; 1
     212:	60 60       	ori	r22, 0x00	; 0
     214:	71 7f       	andi	r23, 0xF1	; 241
     216:	3f 3f       	cpi	r19, 0xFF	; 255
     218:	0f 00       	.word	0x000f	; ????
     21a:	00 78       	andi	r16, 0x80	; 128
     21c:	fc fe       	.word	0xfefc	; ????
     21e:	fe 8f       	std	Y+30, r31	; 0x1e
     220:	07 07       	cpc	r16, r23
     222:	07 07       	cpc	r16, r23
     224:	8f fe       	.word	0xfe8f	; ????
     226:	fe fc       	.word	0xfcfe	; ????
     228:	f8 00       	.word	0x00f8	; ????
     22a:	00 00       	nop
     22c:	00 01       	movw	r0, r0
     22e:	43 43       	sbci	r20, 0x33	; 51
     230:	73 7b       	andi	r23, 0xB3	; 179
     232:	7f 7f       	andi	r23, 0xFF	; 255
     234:	1f 0f       	add	r17, r31
     236:	07 03       	mulsu	r16, r23
	...

0000023a <_ZL7font5x8>:
     23a:	00 00 5f 00 00 00 07 00 07 00 14 7f 14 7f 14 24     .._............$
     24a:	2a 7f 2a 12 23 13 08 64 62 36 49 55 22 50 00 05     *.*.#..db6IU"P..
     25a:	03 00 00 00 1c 22 41 00 00 41 22 1c 00 14 08 3e     ....."A..A"....>
     26a:	08 14 08 08 3e 08 08 00 50 30 00 00 08 08 08 08     ....>...P0......
     27a:	08 00 60 60 00 00 20 10 08 04 02 3e 51 49 45 3e     ..``.. ....>QIE>
     28a:	00 42 7f 40 00 42 61 51 49 46 21 41 45 4b 31 18     .B.@.BaQIF!AEK1.
     29a:	14 12 7f 10 27 45 45 45 39 3c 4a 49 49 30 01 71     ....'EEE9<JII0.q
     2aa:	09 05 03 36 49 49 49 36 06 49 49 29 1e 00 36 36     ...6III6.II)..66
     2ba:	00 00 00 56 36 00 00 08 14 22 41 00 14 14 14 14     ...V6...."A.....
     2ca:	14 00 41 22 14 08 02 01 51 09 06 32 49 79 41 3e     ..A"....Q..2IyA>
     2da:	7e 11 11 11 7e 7f 49 49 49 36 3e 41 41 41 22 7f     ~...~.III6>AAA".
     2ea:	41 41 22 1c 7f 49 49 49 41 7f 09 09 09 01 3e 41     AA"..IIIA.....>A
     2fa:	49 49 7a 7f 08 08 08 7f 00 41 7f 41 00 20 40 41     IIz......A.A. @A
     30a:	3f 01 7f 08 14 22 41 7f 40 40 40 40 7f 02 0c 02     ?...."A.@@@@....
     31a:	7f 7f 04 08 10 7f 3e 41 41 41 3e 7f 09 09 09 06     ......>AAA>.....
     32a:	3e 41 51 21 5e 7f 09 19 29 46 46 49 49 49 31 01     >AQ!^...)FFIII1.
     33a:	01 7f 01 01 3f 40 40 40 3f 1f 20 40 20 1f 3f 40     ....?@@@?. @ .?@
     34a:	38 40 3f 63 14 08 14 63 07 08 70 08 07 61 51 49     8@?c...c..p..aQI
     35a:	45 43 00 7f 41 41 00 02 04 08 10 20 00 41 41 7f     EC..AA..... .AA.
     36a:	00 04 02 01 02 04 40 40 40 40 40 00 01 02 04 00     ......@@@@@.....
     37a:	20 54 54 54 78 7f 48 44 44 38 38 44 44 44 20 38      TTTx.HDD88DDD 8
     38a:	44 44 48 7f 38 54 54 54 18 08 7e 09 01 02 0c 52     DDH.8TTT..~....R
     39a:	52 52 3e 7f 08 04 04 78 00 44 7d 40 00 20 40 44     RR>....x.D}@. @D
     3aa:	3d 00 7f 10 28 44 00 00 41 7f 40 00 7c 04 18 04     =...(D..A.@.|...
     3ba:	78 7c 08 04 04 78 38 44 44 44 38 7c 14 14 14 08     x|...x8DDD8|....
     3ca:	08 14 14 18 7c 7c 08 04 04 08 48 54 54 54 20 04     ....||....HTTT .
     3da:	3f 44 40 20 3c 40 40 20 7c 1c 20 40 20 1c 3c 40     ?D@ <@@ |. @ .<@
     3ea:	30 40 3c 44 28 10 28 44 0c 50 50 50 3c 44 64 54     0@<D(.(D.PPP<DdT
     3fa:	4c 44 00 08 36 41 00 00 00 7f 00 00 00 41 36 08     LD..6A.......A6.
     40a:	00 10 08 08 10 08                                   ......

00000410 <__c.2161>:
     410:	6e 61 6e 00                                         nan.

00000414 <__c.2159>:
     414:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     424:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     434:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     444:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     454:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     464:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     474:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     484:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     494:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     4a4:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     4b4:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     4c4:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     4d4:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     4e4:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     4f4:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     504:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000512 <__ctors_start>:
     512:	2e 18       	sub	r2, r14

00000514 <__ctors_end>:
     514:	47 18       	sub	r4, r7

00000516 <__dtors_end>:
     516:	11 24       	eor	r1, r1
     518:	1f be       	out	0x3f, r1	; 63
     51a:	cf ef       	ldi	r28, 0xFF	; 255
     51c:	d8 e0       	ldi	r29, 0x08	; 8
     51e:	de bf       	out	0x3e, r29	; 62
     520:	cd bf       	out	0x3d, r28	; 61

00000522 <__do_copy_data>:
     522:	12 e0       	ldi	r17, 0x02	; 2
     524:	a0 e0       	ldi	r26, 0x00	; 0
     526:	b1 e0       	ldi	r27, 0x01	; 1
     528:	ee e9       	ldi	r30, 0x9E	; 158
     52a:	f9 e4       	ldi	r31, 0x49	; 73
     52c:	02 c0       	rjmp	.+4      	; 0x532 <__do_copy_data+0x10>
     52e:	05 90       	lpm	r0, Z+
     530:	0d 92       	st	X+, r0
     532:	a8 39       	cpi	r26, 0x98	; 152
     534:	b1 07       	cpc	r27, r17
     536:	d9 f7       	brne	.-10     	; 0x52e <__do_copy_data+0xc>

00000538 <__do_clear_bss>:
     538:	27 e0       	ldi	r18, 0x07	; 7
     53a:	a8 e9       	ldi	r26, 0x98	; 152
     53c:	b2 e0       	ldi	r27, 0x02	; 2
     53e:	01 c0       	rjmp	.+2      	; 0x542 <.do_clear_bss_start>

00000540 <.do_clear_bss_loop>:
     540:	1d 92       	st	X+, r1

00000542 <.do_clear_bss_start>:
     542:	a6 30       	cpi	r26, 0x06	; 6
     544:	b2 07       	cpc	r27, r18
     546:	e1 f7       	brne	.-8      	; 0x540 <.do_clear_bss_loop>

00000548 <__do_global_ctors>:
     548:	15 e0       	ldi	r17, 0x05	; 5
     54a:	c4 e1       	ldi	r28, 0x14	; 20
     54c:	d5 e0       	ldi	r29, 0x05	; 5
     54e:	04 c0       	rjmp	.+8      	; 0x558 <__do_global_ctors+0x10>
     550:	22 97       	sbiw	r28, 0x02	; 2
     552:	fe 01       	movw	r30, r28
     554:	0e 94 e7 22 	call	0x45ce	; 0x45ce <__tablejump__>
     558:	c2 31       	cpi	r28, 0x12	; 18
     55a:	d1 07       	cpc	r29, r17
     55c:	c9 f7       	brne	.-14     	; 0x550 <__do_global_ctors+0x8>
     55e:	0e 94 21 18 	call	0x3042	; 0x3042 <main>
     562:	0c 94 c2 24 	jmp	0x4984	; 0x4984 <__do_global_dtors>

00000566 <__bad_interrupt>:
     566:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000056a <_ZN7DisplayD1Ev>:
	//}
	InitializeDisplay();
} //Display

// default destructor
Display::~Display()
     56a:	9c 5f       	subi	r25, 0xFC	; 252
     56c:	0e 94 64 18 	call	0x30c8	; 0x30c8 <_ZN3I2CD1Ev>
     570:	08 95       	ret

00000572 <_ZN7Display10clearFrameEv>:
{
} //~Display

void Display::clearFrame(){
     572:	fc 01       	movw	r30, r24
	for(uint16_t i=0;i<1024;i++){
     574:	20 e0       	ldi	r18, 0x00	; 0
     576:	30 e0       	ldi	r19, 0x00	; 0
		Displayframe[i]=0;
     578:	11 92       	st	Z+, r1
Display::~Display()
{
} //~Display

void Display::clearFrame(){
	for(uint16_t i=0;i<1024;i++){
     57a:	2f 5f       	subi	r18, 0xFF	; 255
     57c:	3f 4f       	sbci	r19, 0xFF	; 255
     57e:	21 15       	cp	r18, r1
     580:	84 e0       	ldi	r24, 0x04	; 4
     582:	38 07       	cpc	r19, r24
     584:	c9 f7       	brne	.-14     	; 0x578 <_ZN7Display10clearFrameEv+0x6>
		Displayframe[i]=0;
	}
}
     586:	08 95       	ret

00000588 <_ZN7Display15ssd1306_commandEh>:

void Display::ssd1306_command(uint8_t c){
     588:	1f 93       	push	r17
     58a:	cf 93       	push	r28
     58c:	df 93       	push	r29
     58e:	16 2f       	mov	r17, r22
	i2c.twi_start();
     590:	ec 01       	movw	r28, r24
     592:	dc 5f       	subi	r29, 0xFC	; 252
     594:	ce 01       	movw	r24, r28
     596:	0e 94 65 18 	call	0x30ca	; 0x30ca <_ZN3I2C9twi_startEv>
	i2c.twi_write(OLEDADRESSE);
     59a:	68 e7       	ldi	r22, 0x78	; 120
     59c:	ce 01       	movw	r24, r28
     59e:	0e 94 6d 18 	call	0x30da	; 0x30da <_ZN3I2C9twi_writeEh>
	i2c.twi_write(OLEDBEFEHL);
     5a2:	60 e0       	ldi	r22, 0x00	; 0
     5a4:	ce 01       	movw	r24, r28
     5a6:	0e 94 6d 18 	call	0x30da	; 0x30da <_ZN3I2C9twi_writeEh>
	i2c.twi_write(c);
     5aa:	61 2f       	mov	r22, r17
     5ac:	ce 01       	movw	r24, r28
     5ae:	0e 94 6d 18 	call	0x30da	; 0x30da <_ZN3I2C9twi_writeEh>
	i2c.twi_stop();
     5b2:	ce 01       	movw	r24, r28
     5b4:	0e 94 69 18 	call	0x30d2	; 0x30d2 <_ZN3I2C8twi_stopEv>
}
     5b8:	df 91       	pop	r29
     5ba:	cf 91       	pop	r28
     5bc:	1f 91       	pop	r17
     5be:	08 95       	ret

000005c0 <_ZN7Display17InitializeDisplayEv>:

void Display::InitializeDisplay()
{
     5c0:	cf 93       	push	r28
     5c2:	df 93       	push	r29
     5c4:	ec 01       	movw	r28, r24
	// Init sequence for 128x64 OLED module
	ssd1306_command(SSD1306_DISPLAYOFF);                    // 0xAE
     5c6:	6e ea       	ldi	r22, 0xAE	; 174
     5c8:	0e 94 c4 02 	call	0x588	; 0x588 <_ZN7Display15ssd1306_commandEh>

	ssd1306_command(SSD1306_SETDISPLAYCLOCKDIV);            // 0xD5
     5cc:	65 ed       	ldi	r22, 0xD5	; 213
     5ce:	ce 01       	movw	r24, r28
     5d0:	0e 94 c4 02 	call	0x588	; 0x588 <_ZN7Display15ssd1306_commandEh>
	ssd1306_command(0x80);                 // the suggested ratio 0x80
     5d4:	60 e8       	ldi	r22, 0x80	; 128
     5d6:	ce 01       	movw	r24, r28
     5d8:	0e 94 c4 02 	call	0x588	; 0x588 <_ZN7Display15ssd1306_commandEh>

	ssd1306_command(SSD1306_SETMULTIPLEX);                  // 0xA8
     5dc:	68 ea       	ldi	r22, 0xA8	; 168
     5de:	ce 01       	movw	r24, r28
     5e0:	0e 94 c4 02 	call	0x588	; 0x588 <_ZN7Display15ssd1306_commandEh>
	ssd1306_command(0x3F);
     5e4:	6f e3       	ldi	r22, 0x3F	; 63
     5e6:	ce 01       	movw	r24, r28
     5e8:	0e 94 c4 02 	call	0x588	; 0x588 <_ZN7Display15ssd1306_commandEh>

	ssd1306_command(SSD1306_SETDISPLAYOFFSET);              // 0xD3
     5ec:	63 ed       	ldi	r22, 0xD3	; 211
     5ee:	ce 01       	movw	r24, r28
     5f0:	0e 94 c4 02 	call	0x588	; 0x588 <_ZN7Display15ssd1306_commandEh>
	ssd1306_command(0x0);                                   // no offset
     5f4:	60 e0       	ldi	r22, 0x00	; 0
     5f6:	ce 01       	movw	r24, r28
     5f8:	0e 94 c4 02 	call	0x588	; 0x588 <_ZN7Display15ssd1306_commandEh>

	ssd1306_command(SSD1306_SETSTARTLINE);// | 0x0);        // line #0
     5fc:	60 e4       	ldi	r22, 0x40	; 64
     5fe:	ce 01       	movw	r24, r28
     600:	0e 94 c4 02 	call	0x588	; 0x588 <_ZN7Display15ssd1306_commandEh>

	ssd1306_command(SSD1306_CHARGEPUMP);                    // 0x8D
     604:	6d e8       	ldi	r22, 0x8D	; 141
     606:	ce 01       	movw	r24, r28
     608:	0e 94 c4 02 	call	0x588	; 0x588 <_ZN7Display15ssd1306_commandEh>
	ssd1306_command(0x14);  // using internal VCC
     60c:	64 e1       	ldi	r22, 0x14	; 20
     60e:	ce 01       	movw	r24, r28
     610:	0e 94 c4 02 	call	0x588	; 0x588 <_ZN7Display15ssd1306_commandEh>

	ssd1306_command(SSD1306_MEMORYMODE);                    // 0x20
     614:	60 e2       	ldi	r22, 0x20	; 32
     616:	ce 01       	movw	r24, r28
     618:	0e 94 c4 02 	call	0x588	; 0x588 <_ZN7Display15ssd1306_commandEh>
	ssd1306_command(0x00);          // 0x00 horizontal addressing
     61c:	60 e0       	ldi	r22, 0x00	; 0
     61e:	ce 01       	movw	r24, r28
     620:	0e 94 c4 02 	call	0x588	; 0x588 <_ZN7Display15ssd1306_commandEh>

	ssd1306_command(SSD1306_SEGREMAP | 0x1); // rotate screen 180
     624:	61 ea       	ldi	r22, 0xA1	; 161
     626:	ce 01       	movw	r24, r28
     628:	0e 94 c4 02 	call	0x588	; 0x588 <_ZN7Display15ssd1306_commandEh>

	ssd1306_command(SSD1306_COMSCANDEC); // rotate screen 180
     62c:	68 ec       	ldi	r22, 0xC8	; 200
     62e:	ce 01       	movw	r24, r28
     630:	0e 94 c4 02 	call	0x588	; 0x588 <_ZN7Display15ssd1306_commandEh>

	ssd1306_command(SSD1306_SETCOMPINS);                    // 0xDA
     634:	6a ed       	ldi	r22, 0xDA	; 218
     636:	ce 01       	movw	r24, r28
     638:	0e 94 c4 02 	call	0x588	; 0x588 <_ZN7Display15ssd1306_commandEh>
	ssd1306_command(0x12);
     63c:	62 e1       	ldi	r22, 0x12	; 18
     63e:	ce 01       	movw	r24, r28
     640:	0e 94 c4 02 	call	0x588	; 0x588 <_ZN7Display15ssd1306_commandEh>

	ssd1306_command(SSD1306_SETCONTRAST);                   // 0x81
     644:	61 e8       	ldi	r22, 0x81	; 129
     646:	ce 01       	movw	r24, r28
     648:	0e 94 c4 02 	call	0x588	; 0x588 <_ZN7Display15ssd1306_commandEh>
	ssd1306_command(0xCF);
     64c:	6f ec       	ldi	r22, 0xCF	; 207
     64e:	ce 01       	movw	r24, r28
     650:	0e 94 c4 02 	call	0x588	; 0x588 <_ZN7Display15ssd1306_commandEh>

	ssd1306_command(SSD1306_SETPRECHARGE);                  // 0xd9
     654:	69 ed       	ldi	r22, 0xD9	; 217
     656:	ce 01       	movw	r24, r28
     658:	0e 94 c4 02 	call	0x588	; 0x588 <_ZN7Display15ssd1306_commandEh>
	ssd1306_command(0xF1);
     65c:	61 ef       	ldi	r22, 0xF1	; 241
     65e:	ce 01       	movw	r24, r28
     660:	0e 94 c4 02 	call	0x588	; 0x588 <_ZN7Display15ssd1306_commandEh>

	ssd1306_command(SSD1306_SETVCOMDETECT);                 // 0xDB
     664:	6b ed       	ldi	r22, 0xDB	; 219
     666:	ce 01       	movw	r24, r28
     668:	0e 94 c4 02 	call	0x588	; 0x588 <_ZN7Display15ssd1306_commandEh>
	ssd1306_command(0x40);
     66c:	60 e4       	ldi	r22, 0x40	; 64
     66e:	ce 01       	movw	r24, r28
     670:	0e 94 c4 02 	call	0x588	; 0x588 <_ZN7Display15ssd1306_commandEh>

	ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
     674:	64 ea       	ldi	r22, 0xA4	; 164
     676:	ce 01       	movw	r24, r28
     678:	0e 94 c4 02 	call	0x588	; 0x588 <_ZN7Display15ssd1306_commandEh>

	ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
     67c:	66 ea       	ldi	r22, 0xA6	; 166
     67e:	ce 01       	movw	r24, r28
     680:	0e 94 c4 02 	call	0x588	; 0x588 <_ZN7Display15ssd1306_commandEh>

	ssd1306_command(SSD1306_DISPLAYON);                     //switch on OLED
     684:	6f ea       	ldi	r22, 0xAF	; 175
     686:	ce 01       	movw	r24, r28
     688:	0e 94 c4 02 	call	0x588	; 0x588 <_ZN7Display15ssd1306_commandEh>
}
     68c:	df 91       	pop	r29
     68e:	cf 91       	pop	r28
     690:	08 95       	ret

00000692 <_ZN7DisplayC1Ev>:


#include "Display.h"

// default constructor
Display::Display()
     692:	cf 93       	push	r28
     694:	df 93       	push	r29
     696:	ec 01       	movw	r28, r24
     698:	9c 5f       	subi	r25, 0xFC	; 252
     69a:	0e 94 60 18 	call	0x30c0	; 0x30c0 <_ZN3I2CC1Ev>
{
	//for (uint8_t i=0;i<1024;i++)
	//{
		//Displayframe[i]=0;
	//}
	InitializeDisplay();
     69e:	ce 01       	movw	r24, r28
     6a0:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <_ZN7Display17InitializeDisplayEv>
} //Display
     6a4:	df 91       	pop	r29
     6a6:	cf 91       	pop	r28
     6a8:	08 95       	ret

000006aa <_ZN7Display6invertEh>:

	ssd1306_command(SSD1306_DISPLAYON);                     //switch on OLED
}

void Display::invert(uint8_t inverted) {
	if (inverted) {
     6aa:	66 23       	and	r22, r22
     6ac:	21 f0       	breq	.+8      	; 0x6b6 <_ZN7Display6invertEh+0xc>
		ssd1306_command(SSD1306_INVERTDISPLAY);
     6ae:	67 ea       	ldi	r22, 0xA7	; 167
     6b0:	0e 94 c4 02 	call	0x588	; 0x588 <_ZN7Display15ssd1306_commandEh>
     6b4:	08 95       	ret
	}
	else {
		ssd1306_command(SSD1306_NORMALDISPLAY);
     6b6:	66 ea       	ldi	r22, 0xA6	; 166
     6b8:	0e 94 c4 02 	call	0x588	; 0x588 <_ZN7Display15ssd1306_commandEh>
     6bc:	08 95       	ret

000006be <_ZN7Display9sendFrameEv>:
	}
}

void Display::sendFrame(){
     6be:	ef 92       	push	r14
     6c0:	ff 92       	push	r15
     6c2:	0f 93       	push	r16
     6c4:	1f 93       	push	r17
     6c6:	cf 93       	push	r28
     6c8:	df 93       	push	r29
     6ca:	8c 01       	movw	r16, r24
	//Cursor an den Anfang setzen
	ssd1306_command(SSD1306_COLUMNADDR);
     6cc:	61 e2       	ldi	r22, 0x21	; 33
     6ce:	0e 94 c4 02 	call	0x588	; 0x588 <_ZN7Display15ssd1306_commandEh>
	ssd1306_command(0x00);
     6d2:	60 e0       	ldi	r22, 0x00	; 0
     6d4:	c8 01       	movw	r24, r16
     6d6:	0e 94 c4 02 	call	0x588	; 0x588 <_ZN7Display15ssd1306_commandEh>
	ssd1306_command(0x7F);
     6da:	6f e7       	ldi	r22, 0x7F	; 127
     6dc:	c8 01       	movw	r24, r16
     6de:	0e 94 c4 02 	call	0x588	; 0x588 <_ZN7Display15ssd1306_commandEh>

	ssd1306_command(SSD1306_PAGEADDR);
     6e2:	62 e2       	ldi	r22, 0x22	; 34
     6e4:	c8 01       	movw	r24, r16
     6e6:	0e 94 c4 02 	call	0x588	; 0x588 <_ZN7Display15ssd1306_commandEh>
	ssd1306_command(0x00);
     6ea:	60 e0       	ldi	r22, 0x00	; 0
     6ec:	c8 01       	movw	r24, r16
     6ee:	0e 94 c4 02 	call	0x588	; 0x588 <_ZN7Display15ssd1306_commandEh>
	ssd1306_command(0x07);
     6f2:	67 e0       	ldi	r22, 0x07	; 7
     6f4:	c8 01       	movw	r24, r16
     6f6:	0e 94 c4 02 	call	0x588	; 0x588 <_ZN7Display15ssd1306_commandEh>

	i2c.twi_start();
     6fa:	78 01       	movw	r14, r16
     6fc:	8c ef       	ldi	r24, 0xFC	; 252
     6fe:	f8 1a       	sub	r15, r24
     700:	c7 01       	movw	r24, r14
     702:	0e 94 65 18 	call	0x30ca	; 0x30ca <_ZN3I2C9twi_startEv>
	i2c.twi_write(OLEDADRESSE);
     706:	68 e7       	ldi	r22, 0x78	; 120
     708:	c7 01       	movw	r24, r14
     70a:	0e 94 6d 18 	call	0x30da	; 0x30da <_ZN3I2C9twi_writeEh>
	i2c.twi_write(OLEDDATA);
     70e:	60 e4       	ldi	r22, 0x40	; 64
     710:	c7 01       	movw	r24, r14
     712:	0e 94 6d 18 	call	0x30da	; 0x30da <_ZN3I2C9twi_writeEh>
	
	for(uint16_t i=0; i<1024;i++){
     716:	c0 e0       	ldi	r28, 0x00	; 0
     718:	d0 e0       	ldi	r29, 0x00	; 0
		i2c.twi_write(Displayframe[i]);
     71a:	f8 01       	movw	r30, r16
     71c:	61 91       	ld	r22, Z+
     71e:	8f 01       	movw	r16, r30
     720:	c7 01       	movw	r24, r14
     722:	0e 94 6d 18 	call	0x30da	; 0x30da <_ZN3I2C9twi_writeEh>

	i2c.twi_start();
	i2c.twi_write(OLEDADRESSE);
	i2c.twi_write(OLEDDATA);
	
	for(uint16_t i=0; i<1024;i++){
     726:	21 96       	adiw	r28, 0x01	; 1
     728:	c1 15       	cp	r28, r1
     72a:	f4 e0       	ldi	r31, 0x04	; 4
     72c:	df 07       	cpc	r29, r31
     72e:	a9 f7       	brne	.-22     	; 0x71a <_ZN7Display9sendFrameEv+0x5c>
		i2c.twi_write(Displayframe[i]);
	}
	i2c.twi_stop();
     730:	c7 01       	movw	r24, r14
     732:	0e 94 69 18 	call	0x30d2	; 0x30d2 <_ZN3I2C8twi_stopEv>
}
     736:	df 91       	pop	r29
     738:	cf 91       	pop	r28
     73a:	1f 91       	pop	r17
     73c:	0f 91       	pop	r16
     73e:	ff 90       	pop	r15
     740:	ef 90       	pop	r14
     742:	08 95       	ret

00000744 <_ZN7Display9drawPixelEhhh>:

void Display::drawPixel(uint8_t pos_x, uint8_t pos_y, uint8_t erase){
	if(!(pos_x >= SSD1306_WIDTH || pos_y >= SSD1306_HEIGHT)){
     744:	66 23       	and	r22, r22
     746:	bc f1       	brlt	.+110    	; 0x7b6 <_ZN7Display9drawPixelEhhh+0x72>
     748:	40 34       	cpi	r20, 0x40	; 64
     74a:	a8 f5       	brcc	.+106    	; 0x7b6 <_ZN7Display9drawPixelEhhh+0x72>
		if(!erase){
     74c:	21 11       	cpse	r18, r1
     74e:	19 c0       	rjmp	.+50     	; 0x782 <_ZN7Display9drawPixelEhhh+0x3e>
			Displayframe[pos_x+(pos_y/8)*SSD1306_WIDTH] |= (1 << (pos_y&7));
     750:	e4 2f       	mov	r30, r20
     752:	e6 95       	lsr	r30
     754:	e6 95       	lsr	r30
     756:	e6 95       	lsr	r30
     758:	20 e8       	ldi	r18, 0x80	; 128
     75a:	e2 9f       	mul	r30, r18
     75c:	f0 01       	movw	r30, r0
     75e:	11 24       	eor	r1, r1
     760:	e6 0f       	add	r30, r22
     762:	f1 1d       	adc	r31, r1
     764:	e8 0f       	add	r30, r24
     766:	f9 1f       	adc	r31, r25
     768:	47 70       	andi	r20, 0x07	; 7
     76a:	21 e0       	ldi	r18, 0x01	; 1
     76c:	30 e0       	ldi	r19, 0x00	; 0
     76e:	c9 01       	movw	r24, r18
     770:	02 c0       	rjmp	.+4      	; 0x776 <_ZN7Display9drawPixelEhhh+0x32>
     772:	88 0f       	add	r24, r24
     774:	99 1f       	adc	r25, r25
     776:	4a 95       	dec	r20
     778:	e2 f7       	brpl	.-8      	; 0x772 <_ZN7Display9drawPixelEhhh+0x2e>
     77a:	90 81       	ld	r25, Z
     77c:	89 2b       	or	r24, r25
     77e:	80 83       	st	Z, r24
     780:	08 95       	ret
		}
		else {
			Displayframe[pos_x+(pos_y/8)*SSD1306_WIDTH] &= ~(1 << (pos_y&7));
     782:	e4 2f       	mov	r30, r20
     784:	e6 95       	lsr	r30
     786:	e6 95       	lsr	r30
     788:	e6 95       	lsr	r30
     78a:	30 e8       	ldi	r19, 0x80	; 128
     78c:	e3 9f       	mul	r30, r19
     78e:	f0 01       	movw	r30, r0
     790:	11 24       	eor	r1, r1
     792:	e6 0f       	add	r30, r22
     794:	f1 1d       	adc	r31, r1
     796:	e8 0f       	add	r30, r24
     798:	f9 1f       	adc	r31, r25
     79a:	47 70       	andi	r20, 0x07	; 7
     79c:	81 e0       	ldi	r24, 0x01	; 1
     79e:	90 e0       	ldi	r25, 0x00	; 0
     7a0:	9c 01       	movw	r18, r24
     7a2:	02 c0       	rjmp	.+4      	; 0x7a8 <_ZN7Display9drawPixelEhhh+0x64>
     7a4:	22 0f       	add	r18, r18
     7a6:	33 1f       	adc	r19, r19
     7a8:	4a 95       	dec	r20
     7aa:	e2 f7       	brpl	.-8      	; 0x7a4 <_ZN7Display9drawPixelEhhh+0x60>
     7ac:	a9 01       	movw	r20, r18
     7ae:	40 95       	com	r20
     7b0:	80 81       	ld	r24, Z
     7b2:	48 23       	and	r20, r24
     7b4:	40 83       	st	Z, r20
     7b6:	08 95       	ret

000007b8 <_ZN7Display9draw_lineEhhhf>:
		}
	}
}

//eigene Zeichenfunktionen
void Display::draw_line(uint8_t x, uint8_t y, uint8_t length, float phi){
     7b8:	2f 92       	push	r2
     7ba:	3f 92       	push	r3
     7bc:	4f 92       	push	r4
     7be:	5f 92       	push	r5
     7c0:	6f 92       	push	r6
     7c2:	7f 92       	push	r7
     7c4:	8f 92       	push	r8
     7c6:	9f 92       	push	r9
     7c8:	af 92       	push	r10
     7ca:	bf 92       	push	r11
     7cc:	cf 92       	push	r12
     7ce:	df 92       	push	r13
     7d0:	ef 92       	push	r14
     7d2:	ff 92       	push	r15
     7d4:	0f 93       	push	r16
     7d6:	1f 93       	push	r17
     7d8:	cf 93       	push	r28
     7da:	df 93       	push	r29
     7dc:	cd b7       	in	r28, 0x3d	; 61
     7de:	de b7       	in	r29, 0x3e	; 62
     7e0:	2b 97       	sbiw	r28, 0x0b	; 11
     7e2:	0f b6       	in	r0, 0x3f	; 63
     7e4:	f8 94       	cli
     7e6:	de bf       	out	0x3e, r29	; 62
     7e8:	0f be       	out	0x3f, r0	; 63
     7ea:	cd bf       	out	0x3d, r28	; 61
     7ec:	1c 01       	movw	r2, r24
     7ee:	d6 2e       	mov	r13, r22
     7f0:	c4 2e       	mov	r12, r20
     7f2:	29 83       	std	Y+1, r18	; 0x01
	//phi*=M_PI/180.0;
	uint8_t pos_x=0, pos_y=0;
	for (uint8_t i=0;i<length;i++)
     7f4:	22 23       	and	r18, r18
     7f6:	09 f4       	brne	.+2      	; 0x7fa <_ZN7Display9draw_lineEhhhf+0x42>
     7f8:	69 c0       	rjmp	.+210    	; 0x8cc <_ZN7Display9draw_lineEhhhf+0x114>
	{
		pos_x=(uint8_t) (-i*cos(phi)+x);
     7fa:	c8 01       	movw	r24, r16
     7fc:	b7 01       	movw	r22, r14
     7fe:	0e 94 08 1d 	call	0x3a10	; 0x3a10 <cos>
     802:	2b 01       	movw	r4, r22
     804:	3c 01       	movw	r6, r24
		pos_y=(uint8_t) (i*sin(phi)+y);
     806:	c8 01       	movw	r24, r16
     808:	b7 01       	movw	r22, r14
     80a:	0e 94 22 1f 	call	0x3e44	; 0x3e44 <sin>
     80e:	4b 01       	movw	r8, r22
     810:	5c 01       	movw	r10, r24
     812:	1b 86       	std	Y+11, r1	; 0x0b
     814:	1a 86       	std	Y+10, r1	; 0x0a
     816:	8c 2d       	mov	r24, r12
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e0       	ldi	r26, 0x00	; 0
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	8a 83       	std	Y+2, r24	; 0x02
     820:	9b 83       	std	Y+3, r25	; 0x03
     822:	ac 83       	std	Y+4, r26	; 0x04
     824:	bd 83       	std	Y+5, r27	; 0x05
void Display::draw_line(uint8_t x, uint8_t y, uint8_t length, float phi){
	//phi*=M_PI/180.0;
	uint8_t pos_x=0, pos_y=0;
	for (uint8_t i=0;i<length;i++)
	{
		pos_x=(uint8_t) (-i*cos(phi)+x);
     826:	8d 2d       	mov	r24, r13
     828:	90 e0       	ldi	r25, 0x00	; 0
     82a:	a0 e0       	ldi	r26, 0x00	; 0
     82c:	b0 e0       	ldi	r27, 0x00	; 0
     82e:	8e 83       	std	Y+6, r24	; 0x06
     830:	9f 83       	std	Y+7, r25	; 0x07
     832:	a8 87       	std	Y+8, r26	; 0x08
     834:	b9 87       	std	Y+9, r27	; 0x09
		pos_y=(uint8_t) (i*sin(phi)+y);
     836:	aa 85       	ldd	r26, Y+10	; 0x0a
     838:	bb 85       	ldd	r27, Y+11	; 0x0b
     83a:	bd 01       	movw	r22, r26
     83c:	88 27       	eor	r24, r24
     83e:	77 fd       	sbrc	r23, 7
     840:	80 95       	com	r24
     842:	98 2f       	mov	r25, r24
     844:	0e 94 a6 1d 	call	0x3b4c	; 0x3b4c <__floatsisf>
     848:	a5 01       	movw	r20, r10
     84a:	94 01       	movw	r18, r8
     84c:	0e 94 bf 1e 	call	0x3d7e	; 0x3d7e <__mulsf3>
     850:	6b 01       	movw	r12, r22
     852:	7c 01       	movw	r14, r24
     854:	6a 81       	ldd	r22, Y+2	; 0x02
     856:	7b 81       	ldd	r23, Y+3	; 0x03
     858:	8c 81       	ldd	r24, Y+4	; 0x04
     85a:	9d 81       	ldd	r25, Y+5	; 0x05
     85c:	0e 94 a6 1d 	call	0x3b4c	; 0x3b4c <__floatsisf>
     860:	9b 01       	movw	r18, r22
     862:	ac 01       	movw	r20, r24
     864:	c7 01       	movw	r24, r14
     866:	b6 01       	movw	r22, r12
     868:	0e 94 3e 1c 	call	0x387c	; 0x387c <__addsf3>
     86c:	0e 94 78 1d 	call	0x3af0	; 0x3af0 <__fixunssfsi>
     870:	16 2f       	mov	r17, r22
     872:	6a 85       	ldd	r22, Y+10	; 0x0a
     874:	7b 85       	ldd	r23, Y+11	; 0x0b
     876:	71 95       	neg	r23
     878:	61 95       	neg	r22
     87a:	71 09       	sbc	r23, r1
void Display::draw_line(uint8_t x, uint8_t y, uint8_t length, float phi){
	//phi*=M_PI/180.0;
	uint8_t pos_x=0, pos_y=0;
	for (uint8_t i=0;i<length;i++)
	{
		pos_x=(uint8_t) (-i*cos(phi)+x);
     87c:	88 27       	eor	r24, r24
     87e:	77 fd       	sbrc	r23, 7
     880:	80 95       	com	r24
     882:	98 2f       	mov	r25, r24
     884:	0e 94 a6 1d 	call	0x3b4c	; 0x3b4c <__floatsisf>
     888:	a3 01       	movw	r20, r6
     88a:	92 01       	movw	r18, r4
     88c:	0e 94 bf 1e 	call	0x3d7e	; 0x3d7e <__mulsf3>
     890:	6b 01       	movw	r12, r22
     892:	7c 01       	movw	r14, r24
     894:	6e 81       	ldd	r22, Y+6	; 0x06
     896:	7f 81       	ldd	r23, Y+7	; 0x07
     898:	88 85       	ldd	r24, Y+8	; 0x08
     89a:	99 85       	ldd	r25, Y+9	; 0x09
     89c:	0e 94 a6 1d 	call	0x3b4c	; 0x3b4c <__floatsisf>
     8a0:	9b 01       	movw	r18, r22
     8a2:	ac 01       	movw	r20, r24
     8a4:	c7 01       	movw	r24, r14
     8a6:	b6 01       	movw	r22, r12
     8a8:	0e 94 3e 1c 	call	0x387c	; 0x387c <__addsf3>
     8ac:	0e 94 78 1d 	call	0x3af0	; 0x3af0 <__fixunssfsi>
		pos_y=(uint8_t) (i*sin(phi)+y);
		drawPixel(pos_x,pos_y,0);
     8b0:	20 e0       	ldi	r18, 0x00	; 0
     8b2:	41 2f       	mov	r20, r17
     8b4:	c1 01       	movw	r24, r2
     8b6:	0e 94 a2 03 	call	0x744	; 0x744 <_ZN7Display9drawPixelEhhh>
     8ba:	ea 85       	ldd	r30, Y+10	; 0x0a
     8bc:	fb 85       	ldd	r31, Y+11	; 0x0b
     8be:	31 96       	adiw	r30, 0x01	; 1
     8c0:	fb 87       	std	Y+11, r31	; 0x0b
     8c2:	ea 87       	std	Y+10, r30	; 0x0a

//eigene Zeichenfunktionen
void Display::draw_line(uint8_t x, uint8_t y, uint8_t length, float phi){
	//phi*=M_PI/180.0;
	uint8_t pos_x=0, pos_y=0;
	for (uint8_t i=0;i<length;i++)
     8c4:	f9 81       	ldd	r31, Y+1	; 0x01
     8c6:	ef 17       	cp	r30, r31
     8c8:	08 f4       	brcc	.+2      	; 0x8cc <_ZN7Display9draw_lineEhhhf+0x114>
     8ca:	b5 cf       	rjmp	.-150    	; 0x836 <_ZN7Display9draw_lineEhhhf+0x7e>
	{
		pos_x=(uint8_t) (-i*cos(phi)+x);
		pos_y=(uint8_t) (i*sin(phi)+y);
		drawPixel(pos_x,pos_y,0);
	}
}
     8cc:	2b 96       	adiw	r28, 0x0b	; 11
     8ce:	0f b6       	in	r0, 0x3f	; 63
     8d0:	f8 94       	cli
     8d2:	de bf       	out	0x3e, r29	; 62
     8d4:	0f be       	out	0x3f, r0	; 63
     8d6:	cd bf       	out	0x3d, r28	; 61
     8d8:	df 91       	pop	r29
     8da:	cf 91       	pop	r28
     8dc:	1f 91       	pop	r17
     8de:	0f 91       	pop	r16
     8e0:	ff 90       	pop	r15
     8e2:	ef 90       	pop	r14
     8e4:	df 90       	pop	r13
     8e6:	cf 90       	pop	r12
     8e8:	bf 90       	pop	r11
     8ea:	af 90       	pop	r10
     8ec:	9f 90       	pop	r9
     8ee:	8f 90       	pop	r8
     8f0:	7f 90       	pop	r7
     8f2:	6f 90       	pop	r6
     8f4:	5f 90       	pop	r5
     8f6:	4f 90       	pop	r4
     8f8:	3f 90       	pop	r3
     8fa:	2f 90       	pop	r2
     8fc:	08 95       	ret

000008fe <_ZN7Display13draw_triangleEhhhff>:

//using basecenterpoint as turningpoint for rotation
//upright triangle has rotationangle of 0
//turning clockwise considered in x transformation
//baseangle=70 is for 1/3 type
void Display::draw_triangle(uint8_t basecenter_x, uint8_t basecenter_y, uint8_t baselength, float baseangle, float rotationangle){
     8fe:	2f 92       	push	r2
     900:	3f 92       	push	r3
     902:	4f 92       	push	r4
     904:	5f 92       	push	r5
     906:	6f 92       	push	r6
     908:	7f 92       	push	r7
     90a:	8f 92       	push	r8
     90c:	9f 92       	push	r9
     90e:	af 92       	push	r10
     910:	bf 92       	push	r11
     912:	cf 92       	push	r12
     914:	df 92       	push	r13
     916:	ef 92       	push	r14
     918:	ff 92       	push	r15
     91a:	0f 93       	push	r16
     91c:	1f 93       	push	r17
     91e:	cf 93       	push	r28
     920:	df 93       	push	r29
     922:	cd b7       	in	r28, 0x3d	; 61
     924:	de b7       	in	r29, 0x3e	; 62
     926:	60 97       	sbiw	r28, 0x10	; 16
     928:	0f b6       	in	r0, 0x3f	; 63
     92a:	f8 94       	cli
     92c:	de bf       	out	0x3e, r29	; 62
     92e:	0f be       	out	0x3f, r0	; 63
     930:	cd bf       	out	0x3d, r28	; 61
     932:	1c 01       	movw	r2, r24
     934:	6f 87       	std	Y+15, r22	; 0x0f
     936:	4d 83       	std	Y+5, r20	; 0x05
     938:	29 83       	std	Y+1, r18	; 0x01
     93a:	c6 01       	movw	r24, r12
     93c:	b5 01       	movw	r22, r10
	//correcting rotationangle
	rotationangle*=M_PI/180.0;
     93e:	25 e3       	ldi	r18, 0x35	; 53
     940:	3a ef       	ldi	r19, 0xFA	; 250
     942:	4e e8       	ldi	r20, 0x8E	; 142
     944:	5c e3       	ldi	r21, 0x3C	; 60
     946:	0e 94 bf 1e 	call	0x3d7e	; 0x3d7e <__mulsf3>
     94a:	4b 01       	movw	r8, r22
     94c:	5c 01       	movw	r10, r24
	baseangle*=M_PI/180.0;
     94e:	25 e3       	ldi	r18, 0x35	; 53
     950:	3a ef       	ldi	r19, 0xFA	; 250
     952:	4e e8       	ldi	r20, 0x8E	; 142
     954:	5c e3       	ldi	r21, 0x3C	; 60
     956:	c8 01       	movw	r24, r16
     958:	b7 01       	movw	r22, r14
     95a:	0e 94 bf 1e 	call	0x3d7e	; 0x3d7e <__mulsf3>
     95e:	6e 83       	std	Y+6, r22	; 0x06
     960:	7f 83       	std	Y+7, r23	; 0x07
     962:	88 87       	std	Y+8, r24	; 0x08
     964:	99 87       	std	Y+9, r25	; 0x09
	//draw baseline
	draw_line(basecenter_x,basecenter_y,baselength/2,rotationangle);
     966:	79 80       	ldd	r7, Y+1	; 0x01
     968:	76 94       	lsr	r7
     96a:	85 01       	movw	r16, r10
     96c:	74 01       	movw	r14, r8
     96e:	27 2d       	mov	r18, r7
     970:	4d 81       	ldd	r20, Y+5	; 0x05
     972:	6f 85       	ldd	r22, Y+15	; 0x0f
     974:	c1 01       	movw	r24, r2
     976:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <_ZN7Display9draw_lineEhhhf>
	draw_line(basecenter_x,basecenter_y,baselength/2,rotationangle-M_PI);
     97a:	2b ed       	ldi	r18, 0xDB	; 219
     97c:	3f e0       	ldi	r19, 0x0F	; 15
     97e:	49 e4       	ldi	r20, 0x49	; 73
     980:	50 e4       	ldi	r21, 0x40	; 64
     982:	c5 01       	movw	r24, r10
     984:	b4 01       	movw	r22, r8
     986:	0e 94 3d 1c 	call	0x387a	; 0x387a <__subsf3>
     98a:	7b 01       	movw	r14, r22
     98c:	8c 01       	movw	r16, r24
     98e:	27 2d       	mov	r18, r7
     990:	4d 81       	ldd	r20, Y+5	; 0x05
     992:	6f 85       	ldd	r22, Y+15	; 0x0f
     994:	c1 01       	movw	r24, r2
     996:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <_ZN7Display9draw_lineEhhhf>
	//draw midleline
	uint8_t middlelength=baselength/2*tan(baseangle);
     99a:	6e 81       	ldd	r22, Y+6	; 0x06
     99c:	7f 81       	ldd	r23, Y+7	; 0x07
     99e:	88 85       	ldd	r24, Y+8	; 0x08
     9a0:	99 85       	ldd	r25, Y+9	; 0x09
     9a2:	0e 94 2b 1f 	call	0x3e56	; 0x3e56 <tan>
     9a6:	6b 01       	movw	r12, r22
     9a8:	7c 01       	movw	r14, r24
     9aa:	67 2d       	mov	r22, r7
     9ac:	70 e0       	ldi	r23, 0x00	; 0
     9ae:	80 e0       	ldi	r24, 0x00	; 0
     9b0:	90 e0       	ldi	r25, 0x00	; 0
     9b2:	0e 94 a6 1d 	call	0x3b4c	; 0x3b4c <__floatsisf>
     9b6:	a7 01       	movw	r20, r14
     9b8:	96 01       	movw	r18, r12
     9ba:	0e 94 bf 1e 	call	0x3d7e	; 0x3d7e <__mulsf3>
     9be:	0e 94 78 1d 	call	0x3af0	; 0x3af0 <__fixunssfsi>
     9c2:	68 8b       	std	Y+16, r22	; 0x10
	draw_line(basecenter_x,basecenter_y,middlelength,rotationangle-M_PI_2);
     9c4:	2b ed       	ldi	r18, 0xDB	; 219
     9c6:	3f e0       	ldi	r19, 0x0F	; 15
     9c8:	49 ec       	ldi	r20, 0xC9	; 201
     9ca:	5f e3       	ldi	r21, 0x3F	; 63
     9cc:	c5 01       	movw	r24, r10
     9ce:	b4 01       	movw	r22, r8
     9d0:	0e 94 3d 1c 	call	0x387a	; 0x387a <__subsf3>
     9d4:	6a 87       	std	Y+10, r22	; 0x0a
     9d6:	7b 87       	std	Y+11, r23	; 0x0b
     9d8:	8c 87       	std	Y+12, r24	; 0x0c
     9da:	9d 87       	std	Y+13, r25	; 0x0d
     9dc:	7b 01       	movw	r14, r22
     9de:	8c 01       	movw	r16, r24
     9e0:	28 89       	ldd	r18, Y+16	; 0x10
     9e2:	4d 81       	ldd	r20, Y+5	; 0x05
     9e4:	6f 85       	ldd	r22, Y+15	; 0x0f
     9e6:	c1 01       	movw	r24, r2
     9e8:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <_ZN7Display9draw_lineEhhhf>
	//draw left arm
	uint8_t lengtharm=baselength/(2*cos(baseangle));
     9ec:	6e 81       	ldd	r22, Y+6	; 0x06
     9ee:	7f 81       	ldd	r23, Y+7	; 0x07
     9f0:	88 85       	ldd	r24, Y+8	; 0x08
     9f2:	99 85       	ldd	r25, Y+9	; 0x09
     9f4:	0e 94 08 1d 	call	0x3a10	; 0x3a10 <cos>
     9f8:	6b 01       	movw	r12, r22
     9fa:	7c 01       	movw	r14, r24
     9fc:	29 81       	ldd	r18, Y+1	; 0x01
     9fe:	62 2f       	mov	r22, r18
     a00:	70 e0       	ldi	r23, 0x00	; 0
     a02:	80 e0       	ldi	r24, 0x00	; 0
     a04:	90 e0       	ldi	r25, 0x00	; 0
     a06:	0e 94 a6 1d 	call	0x3b4c	; 0x3b4c <__floatsisf>
     a0a:	2b 01       	movw	r4, r22
     a0c:	3c 01       	movw	r6, r24
     a0e:	a7 01       	movw	r20, r14
     a10:	96 01       	movw	r18, r12
     a12:	c7 01       	movw	r24, r14
     a14:	b6 01       	movw	r22, r12
     a16:	0e 94 3e 1c 	call	0x387c	; 0x387c <__addsf3>
     a1a:	9b 01       	movw	r18, r22
     a1c:	ac 01       	movw	r20, r24
     a1e:	c3 01       	movw	r24, r6
     a20:	b2 01       	movw	r22, r4
     a22:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <__divsf3>
     a26:	0e 94 78 1d 	call	0x3af0	; 0x3af0 <__fixunssfsi>
     a2a:	6e 87       	std	Y+14, r22	; 0x0e
	uint8_t sx = basecenter_x-middlelength*cos(rotationangle-M_PI_2);
     a2c:	e8 89       	ldd	r30, Y+16	; 0x10
     a2e:	6e 2f       	mov	r22, r30
     a30:	70 e0       	ldi	r23, 0x00	; 0
     a32:	80 e0       	ldi	r24, 0x00	; 0
     a34:	90 e0       	ldi	r25, 0x00	; 0
     a36:	0e 94 a6 1d 	call	0x3b4c	; 0x3b4c <__floatsisf>
     a3a:	69 83       	std	Y+1, r22	; 0x01
     a3c:	7a 83       	std	Y+2, r23	; 0x02
     a3e:	8b 83       	std	Y+3, r24	; 0x03
     a40:	9c 83       	std	Y+4, r25	; 0x04
     a42:	6a 85       	ldd	r22, Y+10	; 0x0a
     a44:	7b 85       	ldd	r23, Y+11	; 0x0b
     a46:	8c 85       	ldd	r24, Y+12	; 0x0c
     a48:	9d 85       	ldd	r25, Y+13	; 0x0d
     a4a:	0e 94 08 1d 	call	0x3a10	; 0x3a10 <cos>
     a4e:	6b 01       	movw	r12, r22
     a50:	7c 01       	movw	r14, r24
     a52:	ff 85       	ldd	r31, Y+15	; 0x0f
     a54:	6f 2f       	mov	r22, r31
     a56:	70 e0       	ldi	r23, 0x00	; 0
     a58:	80 e0       	ldi	r24, 0x00	; 0
     a5a:	90 e0       	ldi	r25, 0x00	; 0
     a5c:	0e 94 a6 1d 	call	0x3b4c	; 0x3b4c <__floatsisf>
     a60:	2b 01       	movw	r4, r22
     a62:	3c 01       	movw	r6, r24
     a64:	a7 01       	movw	r20, r14
     a66:	96 01       	movw	r18, r12
     a68:	69 81       	ldd	r22, Y+1	; 0x01
     a6a:	7a 81       	ldd	r23, Y+2	; 0x02
     a6c:	8b 81       	ldd	r24, Y+3	; 0x03
     a6e:	9c 81       	ldd	r25, Y+4	; 0x04
     a70:	0e 94 bf 1e 	call	0x3d7e	; 0x3d7e <__mulsf3>
     a74:	9b 01       	movw	r18, r22
     a76:	ac 01       	movw	r20, r24
     a78:	c3 01       	movw	r24, r6
     a7a:	b2 01       	movw	r22, r4
     a7c:	0e 94 3d 1c 	call	0x387a	; 0x387a <__subsf3>
     a80:	0e 94 78 1d 	call	0x3af0	; 0x3af0 <__fixunssfsi>
     a84:	6f 87       	std	Y+15, r22	; 0x0f
	uint8_t sy = basecenter_y+middlelength*sin(rotationangle-M_PI_2);
     a86:	6a 85       	ldd	r22, Y+10	; 0x0a
     a88:	7b 85       	ldd	r23, Y+11	; 0x0b
     a8a:	8c 85       	ldd	r24, Y+12	; 0x0c
     a8c:	9d 85       	ldd	r25, Y+13	; 0x0d
     a8e:	0e 94 22 1f 	call	0x3e44	; 0x3e44 <sin>
     a92:	6b 01       	movw	r12, r22
     a94:	7c 01       	movw	r14, r24
     a96:	2d 81       	ldd	r18, Y+5	; 0x05
     a98:	62 2f       	mov	r22, r18
     a9a:	70 e0       	ldi	r23, 0x00	; 0
     a9c:	80 e0       	ldi	r24, 0x00	; 0
     a9e:	90 e0       	ldi	r25, 0x00	; 0
     aa0:	0e 94 a6 1d 	call	0x3b4c	; 0x3b4c <__floatsisf>
     aa4:	2b 01       	movw	r4, r22
     aa6:	3c 01       	movw	r6, r24
     aa8:	a7 01       	movw	r20, r14
     aaa:	96 01       	movw	r18, r12
     aac:	69 81       	ldd	r22, Y+1	; 0x01
     aae:	7a 81       	ldd	r23, Y+2	; 0x02
     ab0:	8b 81       	ldd	r24, Y+3	; 0x03
     ab2:	9c 81       	ldd	r25, Y+4	; 0x04
     ab4:	0e 94 bf 1e 	call	0x3d7e	; 0x3d7e <__mulsf3>
     ab8:	9b 01       	movw	r18, r22
     aba:	ac 01       	movw	r20, r24
     abc:	c3 01       	movw	r24, r6
     abe:	b2 01       	movw	r22, r4
     ac0:	0e 94 3e 1c 	call	0x387c	; 0x387c <__addsf3>
     ac4:	0e 94 78 1d 	call	0x3af0	; 0x3af0 <__fixunssfsi>
     ac8:	d6 2e       	mov	r13, r22
	draw_line(sx,sy,lengtharm,baseangle+rotationangle);
     aca:	a5 01       	movw	r20, r10
     acc:	94 01       	movw	r18, r8
     ace:	6e 81       	ldd	r22, Y+6	; 0x06
     ad0:	7f 81       	ldd	r23, Y+7	; 0x07
     ad2:	88 85       	ldd	r24, Y+8	; 0x08
     ad4:	99 85       	ldd	r25, Y+9	; 0x09
     ad6:	0e 94 3e 1c 	call	0x387c	; 0x387c <__addsf3>
     ada:	7b 01       	movw	r14, r22
     adc:	8c 01       	movw	r16, r24
     ade:	2e 85       	ldd	r18, Y+14	; 0x0e
     ae0:	4d 2d       	mov	r20, r13
     ae2:	6f 85       	ldd	r22, Y+15	; 0x0f
     ae4:	c1 01       	movw	r24, r2
     ae6:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <_ZN7Display9draw_lineEhhhf>
	//draw right arm
	draw_line(sx,sy,lengtharm,-baseangle+rotationangle-M_PI);
     aea:	2e 81       	ldd	r18, Y+6	; 0x06
     aec:	3f 81       	ldd	r19, Y+7	; 0x07
     aee:	48 85       	ldd	r20, Y+8	; 0x08
     af0:	59 85       	ldd	r21, Y+9	; 0x09
     af2:	c5 01       	movw	r24, r10
     af4:	b4 01       	movw	r22, r8
     af6:	0e 94 3d 1c 	call	0x387a	; 0x387a <__subsf3>
     afa:	2b ed       	ldi	r18, 0xDB	; 219
     afc:	3f e0       	ldi	r19, 0x0F	; 15
     afe:	49 e4       	ldi	r20, 0x49	; 73
     b00:	50 e4       	ldi	r21, 0x40	; 64
     b02:	0e 94 3d 1c 	call	0x387a	; 0x387a <__subsf3>
     b06:	7b 01       	movw	r14, r22
     b08:	8c 01       	movw	r16, r24
     b0a:	2e 85       	ldd	r18, Y+14	; 0x0e
     b0c:	4d 2d       	mov	r20, r13
     b0e:	6f 85       	ldd	r22, Y+15	; 0x0f
     b10:	c1 01       	movw	r24, r2
     b12:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <_ZN7Display9draw_lineEhhhf>
}
     b16:	60 96       	adiw	r28, 0x10	; 16
     b18:	0f b6       	in	r0, 0x3f	; 63
     b1a:	f8 94       	cli
     b1c:	de bf       	out	0x3e, r29	; 62
     b1e:	0f be       	out	0x3f, r0	; 63
     b20:	cd bf       	out	0x3d, r28	; 61
     b22:	df 91       	pop	r29
     b24:	cf 91       	pop	r28
     b26:	1f 91       	pop	r17
     b28:	0f 91       	pop	r16
     b2a:	ff 90       	pop	r15
     b2c:	ef 90       	pop	r14
     b2e:	df 90       	pop	r13
     b30:	cf 90       	pop	r12
     b32:	bf 90       	pop	r11
     b34:	af 90       	pop	r10
     b36:	9f 90       	pop	r9
     b38:	8f 90       	pop	r8
     b3a:	7f 90       	pop	r7
     b3c:	6f 90       	pop	r6
     b3e:	5f 90       	pop	r5
     b40:	4f 90       	pop	r4
     b42:	3f 90       	pop	r3
     b44:	2f 90       	pop	r2
     b46:	08 95       	ret

00000b48 <_ZN7Display9draw_ASCIEhhh>:

void Display::draw_ASCI(uint8_t sym,uint8_t x, uint8_t y){
     b48:	0f 93       	push	r16
     b4a:	1f 93       	push	r17
     b4c:	cf 93       	push	r28
     b4e:	df 93       	push	r29
	if(sym!=' ' && sym>=33){
     b50:	61 32       	cpi	r22, 0x21	; 33
     b52:	08 f4       	brcc	.+2      	; 0xb56 <_ZN7Display9draw_ASCIEhhh+0xe>
     b54:	42 c0       	rjmp	.+132    	; 0xbda <_ZN7Display9draw_ASCIEhhh+0x92>
		sym-=33;
		uint16_t symbol;
		for(uint8_t i = 0; i < 5; i++){
			symbol = pgm_read_byte(&font5x8[sym][i]);
			symbol = symbol << y%8;
			Displayframe[x+(y/8)*SSD1306_WIDTH+i] |=(uint8_t) (symbol & 0x00FF);
     b56:	a4 2f       	mov	r26, r20
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	02 2f       	mov	r16, r18
     b5c:	06 95       	lsr	r16
     b5e:	06 95       	lsr	r16
     b60:	06 95       	lsr	r16
     b62:	30 e8       	ldi	r19, 0x80	; 128
     b64:	03 9f       	mul	r16, r19
     b66:	80 01       	movw	r16, r0
     b68:	11 24       	eor	r1, r1
     b6a:	ed 01       	movw	r28, r26
     b6c:	c0 0f       	add	r28, r16
     b6e:	d1 1f       	adc	r29, r17
			if(((symbol&0xFF00)>>8)==0){
				Displayframe[x+(y/8+1)*SSD1306_WIDTH+i] |= 0;
			}
			else {
				Displayframe[x+(y/8+1)*SSD1306_WIDTH+i] |= (uint8_t) ((symbol & 0xFF00)>>8);
     b70:	00 58       	subi	r16, 0x80	; 128
     b72:	1f 4f       	sbci	r17, 0xFF	; 255
     b74:	0a 0f       	add	r16, r26
     b76:	1b 1f       	adc	r17, r27
	draw_line(sx,sy,lengtharm,-baseangle+rotationangle-M_PI);
}

void Display::draw_ASCI(uint8_t sym,uint8_t x, uint8_t y){
	if(sym!=' ' && sym>=33){
		sym-=33;
     b78:	61 52       	subi	r22, 0x21	; 33
     b7a:	46 2f       	mov	r20, r22
     b7c:	50 e0       	ldi	r21, 0x00	; 0
     b7e:	fa 01       	movw	r30, r20
     b80:	ee 0f       	add	r30, r30
     b82:	ff 1f       	adc	r31, r31
     b84:	ee 0f       	add	r30, r30
     b86:	ff 1f       	adc	r31, r31
     b88:	e4 0f       	add	r30, r20
     b8a:	f5 1f       	adc	r31, r21
     b8c:	e6 5c       	subi	r30, 0xC6	; 198
     b8e:	fd 4f       	sbci	r31, 0xFD	; 253
     b90:	dc 01       	movw	r26, r24
     b92:	ac 0f       	add	r26, r28
     b94:	bd 1f       	adc	r27, r29
     b96:	ae 01       	movw	r20, r28
     b98:	05 96       	adiw	r24, 0x05	; 5
     b9a:	8c 0f       	add	r24, r28
     b9c:	9d 1f       	adc	r25, r29
		uint16_t symbol;
		for(uint8_t i = 0; i < 5; i++){
			symbol = pgm_read_byte(&font5x8[sym][i]);
			symbol = symbol << y%8;
     b9e:	27 70       	andi	r18, 0x07	; 7
void Display::draw_ASCI(uint8_t sym,uint8_t x, uint8_t y){
	if(sym!=' ' && sym>=33){
		sym-=33;
		uint16_t symbol;
		for(uint8_t i = 0; i < 5; i++){
			symbol = pgm_read_byte(&font5x8[sym][i]);
     ba0:	64 91       	lpm	r22, Z
     ba2:	70 e0       	ldi	r23, 0x00	; 0
			symbol = symbol << y%8;
     ba4:	02 2e       	mov	r0, r18
     ba6:	02 c0       	rjmp	.+4      	; 0xbac <_ZN7Display9draw_ASCIEhhh+0x64>
     ba8:	66 0f       	add	r22, r22
     baa:	77 1f       	adc	r23, r23
     bac:	0a 94       	dec	r0
     bae:	e2 f7       	brpl	.-8      	; 0xba8 <_ZN7Display9draw_ASCIEhhh+0x60>
			Displayframe[x+(y/8)*SSD1306_WIDTH+i] |=(uint8_t) (symbol & 0x00FF);
     bb0:	3c 91       	ld	r19, X
     bb2:	36 2b       	or	r19, r22
     bb4:	3c 93       	st	X, r19
			if(((symbol&0xFF00)>>8)==0){
     bb6:	67 2f       	mov	r22, r23
     bb8:	77 27       	eor	r23, r23
     bba:	61 15       	cp	r22, r1
     bbc:	71 05       	cpc	r23, r1
     bbe:	41 f0       	breq	.+16     	; 0xbd0 <_ZN7Display9draw_ASCIEhhh+0x88>
     bc0:	ed 01       	movw	r28, r26
     bc2:	c4 1b       	sub	r28, r20
     bc4:	d5 0b       	sbc	r29, r21
     bc6:	c0 0f       	add	r28, r16
     bc8:	d1 1f       	adc	r29, r17
				Displayframe[x+(y/8+1)*SSD1306_WIDTH+i] |= 0;
			}
			else {
				Displayframe[x+(y/8+1)*SSD1306_WIDTH+i] |= (uint8_t) ((symbol & 0xFF00)>>8);
     bca:	38 81       	ld	r19, Y
     bcc:	63 2b       	or	r22, r19
     bce:	68 83       	st	Y, r22
     bd0:	31 96       	adiw	r30, 0x01	; 1
     bd2:	11 96       	adiw	r26, 0x01	; 1

void Display::draw_ASCI(uint8_t sym,uint8_t x, uint8_t y){
	if(sym!=' ' && sym>=33){
		sym-=33;
		uint16_t symbol;
		for(uint8_t i = 0; i < 5; i++){
     bd4:	a8 17       	cp	r26, r24
     bd6:	b9 07       	cpc	r27, r25
     bd8:	19 f7       	brne	.-58     	; 0xba0 <_ZN7Display9draw_ASCIEhhh+0x58>
	else{
		for(uint8_t i = 0; i < 7; i++){
			Displayframe[x+(y/8)*SSD1306_WIDTH+i] |= 0;
		}
	}
}
     bda:	df 91       	pop	r29
     bdc:	cf 91       	pop	r28
     bde:	1f 91       	pop	r17
     be0:	0f 91       	pop	r16
     be2:	08 95       	ret

00000be4 <_ZN7Display16draw_number16x16Ehhh>:

void Display::draw_number16x16(uint8_t number, uint8_t x, uint8_t y){
     be4:	ef 92       	push	r14
     be6:	ff 92       	push	r15
     be8:	0f 93       	push	r16
     bea:	1f 93       	push	r17
     bec:	cf 93       	push	r28
     bee:	df 93       	push	r29
	uint16_t symbol;
	if(number>=0 && number<10){
     bf0:	6a 30       	cpi	r22, 0x0A	; 10
     bf2:	08 f0       	brcs	.+2      	; 0xbf6 <_ZN7Display16draw_number16x16Ehhh+0x12>
     bf4:	66 c0       	rjmp	.+204    	; 0xcc2 <_ZN7Display16draw_number16x16Ehhh+0xde>
		for(uint8_t i = 0; i < 32;i++){
			symbol = pgm_read_byte(&digits16x16[number][i]);
			symbol = symbol << y%8;
			if(i<16){
				Displayframe[x+(y/8)*SSD1306_WIDTH+i] |=(uint8_t) (symbol & 0x00FF);
     bf6:	50 e0       	ldi	r21, 0x00	; 0
     bf8:	02 2f       	mov	r16, r18
     bfa:	06 95       	lsr	r16
     bfc:	06 95       	lsr	r16
     bfe:	06 95       	lsr	r16
     c00:	10 e0       	ldi	r17, 0x00	; 0
     c02:	d8 01       	movw	r26, r16
     c04:	b6 95       	lsr	r27
     c06:	ba 2f       	mov	r27, r26
     c08:	aa 27       	eor	r26, r26
     c0a:	b7 95       	ror	r27
     c0c:	a7 95       	ror	r26
				if(((symbol&0xFF00)>>8)==0){
					Displayframe[x+(y/8+1)*SSD1306_WIDTH+i] |= 0;
				}
				else {
					Displayframe[x+(y/8+1)*SSD1306_WIDTH+i] |= (uint8_t) ((symbol & 0xFF00)>>8);
     c0e:	0f 5f       	subi	r16, 0xFF	; 255
     c10:	1f 4f       	sbci	r17, 0xFF	; 255
				}
			}
			else {
				Displayframe[x+(y/8+1)*SSD1306_WIDTH+(i-16)] |= (uint8_t) (symbol & 0x00FF);
     c12:	16 95       	lsr	r17
     c14:	10 2f       	mov	r17, r16
     c16:	00 27       	eor	r16, r16
     c18:	17 95       	ror	r17
     c1a:	07 95       	ror	r16
				Displayframe[x+(y/8)*SSD1306_WIDTH+i] |=(uint8_t) (symbol & 0x00FF);
				if(((symbol&0xFF00)>>8)==0){
					Displayframe[x+(y/8+1)*SSD1306_WIDTH+i] |= 0;
				}
				else {
					Displayframe[x+(y/8+1)*SSD1306_WIDTH+i] |= (uint8_t) ((symbol & 0xFF00)>>8);
     c1c:	7d 01       	movw	r14, r26
     c1e:	30 e8       	ldi	r19, 0x80	; 128
     c20:	e3 0e       	add	r14, r19
     c22:	f1 1c       	adc	r15, r1
     c24:	e4 0e       	add	r14, r20
     c26:	f5 1e       	adc	r15, r21
     c28:	e8 0e       	add	r14, r24
     c2a:	f9 1e       	adc	r15, r25
				}
			}
			else {
				Displayframe[x+(y/8+1)*SSD1306_WIDTH+(i-16)] |= (uint8_t) (symbol & 0x00FF);
     c2c:	ea 01       	movw	r28, r20
     c2e:	c0 0f       	add	r28, r16
     c30:	d1 1f       	adc	r29, r17
     c32:	60 97       	sbiw	r28, 0x10	; 16
     c34:	c8 0f       	add	r28, r24
     c36:	d9 1f       	adc	r29, r25
				if(((symbol&0xFF00)>>8)==0){
					Displayframe[x+(y/8+2)*SSD1306_WIDTH+(i-16)] |= 0;
				}
				else {
					Displayframe[x+(y/8+2)*SSD1306_WIDTH+(i-16)] |= (uint8_t) ((symbol & 0xFF00)>>8);
     c38:	04 0f       	add	r16, r20
     c3a:	15 1f       	adc	r17, r21
     c3c:	00 59       	subi	r16, 0x90	; 144
     c3e:	1f 4f       	sbci	r17, 0xFF	; 255
     c40:	08 0f       	add	r16, r24
     c42:	19 1f       	adc	r17, r25
	if(number>=0 && number<10){
		for(uint8_t i = 0; i < 32;i++){
			symbol = pgm_read_byte(&digits16x16[number][i]);
			symbol = symbol << y%8;
			if(i<16){
				Displayframe[x+(y/8)*SSD1306_WIDTH+i] |=(uint8_t) (symbol & 0x00FF);
     c44:	a4 0f       	add	r26, r20
     c46:	b5 1f       	adc	r27, r21
     c48:	a8 0f       	add	r26, r24
     c4a:	b9 1f       	adc	r27, r25
     c4c:	e0 e2       	ldi	r30, 0x20	; 32
     c4e:	6e 9f       	mul	r22, r30
     c50:	c0 01       	movw	r24, r0
     c52:	11 24       	eor	r1, r1
				Displayframe[x+(y/8+1)*SSD1306_WIDTH+(i-16)] |= (uint8_t) (symbol & 0x00FF);
				if(((symbol&0xFF00)>>8)==0){
					Displayframe[x+(y/8+2)*SSD1306_WIDTH+(i-16)] |= 0;
				}
				else {
					Displayframe[x+(y/8+2)*SSD1306_WIDTH+(i-16)] |= (uint8_t) ((symbol & 0xFF00)>>8);
     c54:	40 e0       	ldi	r20, 0x00	; 0
     c56:	50 e0       	ldi	r21, 0x00	; 0
     c58:	86 50       	subi	r24, 0x06	; 6
     c5a:	9f 4f       	sbci	r25, 0xFF	; 255
void Display::draw_number16x16(uint8_t number, uint8_t x, uint8_t y){
	uint16_t symbol;
	if(number>=0 && number<10){
		for(uint8_t i = 0; i < 32;i++){
			symbol = pgm_read_byte(&digits16x16[number][i]);
			symbol = symbol << y%8;
     c5c:	27 70       	andi	r18, 0x07	; 7
     c5e:	fc 01       	movw	r30, r24
     c60:	e4 0f       	add	r30, r20
     c62:	f5 1f       	adc	r31, r21

void Display::draw_number16x16(uint8_t number, uint8_t x, uint8_t y){
	uint16_t symbol;
	if(number>=0 && number<10){
		for(uint8_t i = 0; i < 32;i++){
			symbol = pgm_read_byte(&digits16x16[number][i]);
     c64:	e4 91       	lpm	r30, Z
     c66:	f0 e0       	ldi	r31, 0x00	; 0
			symbol = symbol << y%8;
     c68:	02 2e       	mov	r0, r18
     c6a:	02 c0       	rjmp	.+4      	; 0xc70 <_ZN7Display16draw_number16x16Ehhh+0x8c>
     c6c:	ee 0f       	add	r30, r30
     c6e:	ff 1f       	adc	r31, r31
     c70:	0a 94       	dec	r0
     c72:	e2 f7       	brpl	.-8      	; 0xc6c <_ZN7Display16draw_number16x16Ehhh+0x88>
			if(i<16){
     c74:	40 31       	cpi	r20, 0x10	; 16
     c76:	68 f4       	brcc	.+26     	; 0xc92 <_ZN7Display16draw_number16x16Ehhh+0xae>
				Displayframe[x+(y/8)*SSD1306_WIDTH+i] |=(uint8_t) (symbol & 0x00FF);
     c78:	3c 91       	ld	r19, X
     c7a:	3e 2b       	or	r19, r30
     c7c:	3c 93       	st	X, r19
				if(((symbol&0xFF00)>>8)==0){
     c7e:	6f 2f       	mov	r22, r31
     c80:	77 27       	eor	r23, r23
     c82:	61 15       	cp	r22, r1
     c84:	71 05       	cpc	r23, r1
     c86:	89 f0       	breq	.+34     	; 0xcaa <_ZN7Display16draw_number16x16Ehhh+0xc6>
					Displayframe[x+(y/8+1)*SSD1306_WIDTH+i] |= 0;
				}
				else {
					Displayframe[x+(y/8+1)*SSD1306_WIDTH+i] |= (uint8_t) ((symbol & 0xFF00)>>8);
     c88:	f7 01       	movw	r30, r14
     c8a:	30 81       	ld	r19, Z
     c8c:	36 2b       	or	r19, r22
     c8e:	30 83       	st	Z, r19
     c90:	0c c0       	rjmp	.+24     	; 0xcaa <_ZN7Display16draw_number16x16Ehhh+0xc6>
				}
			}
			else {
				Displayframe[x+(y/8+1)*SSD1306_WIDTH+(i-16)] |= (uint8_t) (symbol & 0x00FF);
     c92:	38 81       	ld	r19, Y
     c94:	3e 2b       	or	r19, r30
     c96:	38 83       	st	Y, r19
				if(((symbol&0xFF00)>>8)==0){
     c98:	6f 2f       	mov	r22, r31
     c9a:	77 27       	eor	r23, r23
     c9c:	61 15       	cp	r22, r1
     c9e:	71 05       	cpc	r23, r1
     ca0:	21 f0       	breq	.+8      	; 0xcaa <_ZN7Display16draw_number16x16Ehhh+0xc6>
					Displayframe[x+(y/8+2)*SSD1306_WIDTH+(i-16)] |= 0;
				}
				else {
					Displayframe[x+(y/8+2)*SSD1306_WIDTH+(i-16)] |= (uint8_t) ((symbol & 0xFF00)>>8);
     ca2:	f8 01       	movw	r30, r16
     ca4:	30 81       	ld	r19, Z
     ca6:	36 2b       	or	r19, r22
     ca8:	30 83       	st	Z, r19
     caa:	4f 5f       	subi	r20, 0xFF	; 255
     cac:	5f 4f       	sbci	r21, 0xFF	; 255
     cae:	ff ef       	ldi	r31, 0xFF	; 255
     cb0:	ef 1a       	sub	r14, r31
     cb2:	ff 0a       	sbc	r15, r31
     cb4:	21 96       	adiw	r28, 0x01	; 1
     cb6:	0f 5f       	subi	r16, 0xFF	; 255
     cb8:	1f 4f       	sbci	r17, 0xFF	; 255
     cba:	11 96       	adiw	r26, 0x01	; 1
}

void Display::draw_number16x16(uint8_t number, uint8_t x, uint8_t y){
	uint16_t symbol;
	if(number>=0 && number<10){
		for(uint8_t i = 0; i < 32;i++){
     cbc:	40 32       	cpi	r20, 0x20	; 32
     cbe:	51 05       	cpc	r21, r1
     cc0:	71 f6       	brne	.-100    	; 0xc5e <_ZN7Display16draw_number16x16Ehhh+0x7a>
					Displayframe[x+(y/8+2)*SSD1306_WIDTH+(i-16)] |= (uint8_t) ((symbol & 0xFF00)>>8);
				}
			}
		}
	}
}
     cc2:	df 91       	pop	r29
     cc4:	cf 91       	pop	r28
     cc6:	1f 91       	pop	r17
     cc8:	0f 91       	pop	r16
     cca:	ff 90       	pop	r15
     ccc:	ef 90       	pop	r14
     cce:	08 95       	ret

00000cd0 <_ZN7Display6analogEhhh>:

void Display::analog(uint8_t stunde, uint8_t minute, uint8_t sekunde){
     cd0:	2f 92       	push	r2
     cd2:	3f 92       	push	r3
     cd4:	4f 92       	push	r4
     cd6:	5f 92       	push	r5
     cd8:	6f 92       	push	r6
     cda:	7f 92       	push	r7
     cdc:	8f 92       	push	r8
     cde:	9f 92       	push	r9
     ce0:	af 92       	push	r10
     ce2:	bf 92       	push	r11
     ce4:	cf 92       	push	r12
     ce6:	df 92       	push	r13
     ce8:	ef 92       	push	r14
     cea:	ff 92       	push	r15
     cec:	0f 93       	push	r16
     cee:	1f 93       	push	r17
     cf0:	cf 93       	push	r28
     cf2:	df 93       	push	r29
     cf4:	00 d0       	rcall	.+0      	; 0xcf6 <_ZN7Display6analogEhhh+0x26>
     cf6:	1f 92       	push	r1
     cf8:	cd b7       	in	r28, 0x3d	; 61
     cfa:	de b7       	in	r29, 0x3e	; 62
     cfc:	9b 83       	std	Y+3, r25	; 0x03
     cfe:	8a 83       	std	Y+2, r24	; 0x02
     d00:	69 83       	std	Y+1, r22	; 0x01
     d02:	24 2e       	mov	r2, r20
	uint8_t x=0,y=0;
	float winkel=0;

	//Berechnen des Sekundenzeigers
	for(uint8_t i=0;i<r;i++){
		winkel=(sekunde*6.0)*M_PI/180.0-M_PI/2.0;
     d04:	62 2f       	mov	r22, r18
     d06:	70 e0       	ldi	r23, 0x00	; 0
     d08:	80 e0       	ldi	r24, 0x00	; 0
     d0a:	90 e0       	ldi	r25, 0x00	; 0
     d0c:	0e 94 a6 1d 	call	0x3b4c	; 0x3b4c <__floatsisf>
     d10:	20 e0       	ldi	r18, 0x00	; 0
     d12:	30 e0       	ldi	r19, 0x00	; 0
     d14:	40 ec       	ldi	r20, 0xC0	; 192
     d16:	50 e4       	ldi	r21, 0x40	; 64
     d18:	0e 94 bf 1e 	call	0x3d7e	; 0x3d7e <__mulsf3>
     d1c:	2b ed       	ldi	r18, 0xDB	; 219
     d1e:	3f e0       	ldi	r19, 0x0F	; 15
     d20:	49 e4       	ldi	r20, 0x49	; 73
     d22:	50 e4       	ldi	r21, 0x40	; 64
     d24:	0e 94 bf 1e 	call	0x3d7e	; 0x3d7e <__mulsf3>
     d28:	20 e0       	ldi	r18, 0x00	; 0
     d2a:	30 e0       	ldi	r19, 0x00	; 0
     d2c:	44 e3       	ldi	r20, 0x34	; 52
     d2e:	53 e4       	ldi	r21, 0x43	; 67
     d30:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <__divsf3>
     d34:	2b ed       	ldi	r18, 0xDB	; 219
     d36:	3f e0       	ldi	r19, 0x0F	; 15
     d38:	49 ec       	ldi	r20, 0xC9	; 201
     d3a:	5f e3       	ldi	r21, 0x3F	; 63
     d3c:	0e 94 3d 1c 	call	0x387a	; 0x387a <__subsf3>
     d40:	6b 01       	movw	r12, r22
     d42:	7c 01       	movw	r14, r24
		x=(uint8_t) i*cos(winkel)+Px;
     d44:	0e 94 08 1d 	call	0x3a10	; 0x3a10 <cos>
     d48:	2b 01       	movw	r4, r22
     d4a:	3c 01       	movw	r6, r24
		y=(uint8_t) i*sin(winkel)+Py;
     d4c:	c7 01       	movw	r24, r14
     d4e:	b6 01       	movw	r22, r12
     d50:	0e 94 22 1f 	call	0x3e44	; 0x3e44 <sin>
     d54:	4b 01       	movw	r8, r22
     d56:	5c 01       	movw	r10, r24
     d58:	00 e0       	ldi	r16, 0x00	; 0
     d5a:	10 e0       	ldi	r17, 0x00	; 0
	float winkel=0;

	//Berechnen des Sekundenzeigers
	for(uint8_t i=0;i<r;i++){
		winkel=(sekunde*6.0)*M_PI/180.0-M_PI/2.0;
		x=(uint8_t) i*cos(winkel)+Px;
     d5c:	b8 01       	movw	r22, r16
     d5e:	88 27       	eor	r24, r24
     d60:	77 fd       	sbrc	r23, 7
     d62:	80 95       	com	r24
     d64:	98 2f       	mov	r25, r24
     d66:	0e 94 a6 1d 	call	0x3b4c	; 0x3b4c <__floatsisf>
     d6a:	6b 01       	movw	r12, r22
     d6c:	7c 01       	movw	r14, r24
		y=(uint8_t) i*sin(winkel)+Py;
     d6e:	a5 01       	movw	r20, r10
     d70:	94 01       	movw	r18, r8
     d72:	0e 94 bf 1e 	call	0x3d7e	; 0x3d7e <__mulsf3>
     d76:	20 e0       	ldi	r18, 0x00	; 0
     d78:	30 e0       	ldi	r19, 0x00	; 0
     d7a:	48 ef       	ldi	r20, 0xF8	; 248
     d7c:	51 e4       	ldi	r21, 0x41	; 65
     d7e:	0e 94 3e 1c 	call	0x387c	; 0x387c <__addsf3>
     d82:	0e 94 78 1d 	call	0x3af0	; 0x3af0 <__fixunssfsi>
     d86:	36 2e       	mov	r3, r22
	float winkel=0;

	//Berechnen des Sekundenzeigers
	for(uint8_t i=0;i<r;i++){
		winkel=(sekunde*6.0)*M_PI/180.0-M_PI/2.0;
		x=(uint8_t) i*cos(winkel)+Px;
     d88:	a3 01       	movw	r20, r6
     d8a:	92 01       	movw	r18, r4
     d8c:	c7 01       	movw	r24, r14
     d8e:	b6 01       	movw	r22, r12
     d90:	0e 94 bf 1e 	call	0x3d7e	; 0x3d7e <__mulsf3>
     d94:	20 e0       	ldi	r18, 0x00	; 0
     d96:	30 e0       	ldi	r19, 0x00	; 0
     d98:	48 ef       	ldi	r20, 0xF8	; 248
     d9a:	51 e4       	ldi	r21, 0x41	; 65
     d9c:	0e 94 3e 1c 	call	0x387c	; 0x387c <__addsf3>
     da0:	0e 94 78 1d 	call	0x3af0	; 0x3af0 <__fixunssfsi>
		y=(uint8_t) i*sin(winkel)+Py;

		drawPixel(x,y,0);
     da4:	20 e0       	ldi	r18, 0x00	; 0
     da6:	43 2d       	mov	r20, r3
     da8:	8a 81       	ldd	r24, Y+2	; 0x02
     daa:	9b 81       	ldd	r25, Y+3	; 0x03
     dac:	0e 94 a2 03 	call	0x744	; 0x744 <_ZN7Display9drawPixelEhhh>
     db0:	0f 5f       	subi	r16, 0xFF	; 255
     db2:	1f 4f       	sbci	r17, 0xFF	; 255
	uint8_t Py=32-1;
	uint8_t x=0,y=0;
	float winkel=0;

	//Berechnen des Sekundenzeigers
	for(uint8_t i=0;i<r;i++){
     db4:	09 31       	cpi	r16, 0x19	; 25
     db6:	11 05       	cpc	r17, r1
     db8:	89 f6       	brne	.-94     	; 0xd5c <_ZN7Display6analogEhhh+0x8c>
	}

	r=21;
	//Berechnen des Minutenzeigers
	for(uint8_t i=0;i<r;i++){
		winkel=(minute*6.0)*M_PI/180.0-M_PI/2.0;
     dba:	62 2d       	mov	r22, r2
     dbc:	70 e0       	ldi	r23, 0x00	; 0
     dbe:	80 e0       	ldi	r24, 0x00	; 0
     dc0:	90 e0       	ldi	r25, 0x00	; 0
     dc2:	0e 94 a6 1d 	call	0x3b4c	; 0x3b4c <__floatsisf>
     dc6:	20 e0       	ldi	r18, 0x00	; 0
     dc8:	30 e0       	ldi	r19, 0x00	; 0
     dca:	40 ec       	ldi	r20, 0xC0	; 192
     dcc:	50 e4       	ldi	r21, 0x40	; 64
     dce:	0e 94 bf 1e 	call	0x3d7e	; 0x3d7e <__mulsf3>
     dd2:	2b ed       	ldi	r18, 0xDB	; 219
     dd4:	3f e0       	ldi	r19, 0x0F	; 15
     dd6:	49 e4       	ldi	r20, 0x49	; 73
     dd8:	50 e4       	ldi	r21, 0x40	; 64
     dda:	0e 94 bf 1e 	call	0x3d7e	; 0x3d7e <__mulsf3>
     dde:	20 e0       	ldi	r18, 0x00	; 0
     de0:	30 e0       	ldi	r19, 0x00	; 0
     de2:	44 e3       	ldi	r20, 0x34	; 52
     de4:	53 e4       	ldi	r21, 0x43	; 67
     de6:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <__divsf3>
     dea:	2b ed       	ldi	r18, 0xDB	; 219
     dec:	3f e0       	ldi	r19, 0x0F	; 15
     dee:	49 ec       	ldi	r20, 0xC9	; 201
     df0:	5f e3       	ldi	r21, 0x3F	; 63
     df2:	0e 94 3d 1c 	call	0x387a	; 0x387a <__subsf3>
     df6:	6b 01       	movw	r12, r22
     df8:	7c 01       	movw	r14, r24
		x=(uint8_t) i*cos(winkel)+Px;
     dfa:	0e 94 08 1d 	call	0x3a10	; 0x3a10 <cos>
     dfe:	2b 01       	movw	r4, r22
     e00:	3c 01       	movw	r6, r24
		y=(uint8_t) i*sin(winkel)+Py;
     e02:	c7 01       	movw	r24, r14
     e04:	b6 01       	movw	r22, r12
     e06:	0e 94 22 1f 	call	0x3e44	; 0x3e44 <sin>
     e0a:	4b 01       	movw	r8, r22
     e0c:	5c 01       	movw	r10, r24
     e0e:	00 e0       	ldi	r16, 0x00	; 0
     e10:	10 e0       	ldi	r17, 0x00	; 0

	r=21;
	//Berechnen des Minutenzeigers
	for(uint8_t i=0;i<r;i++){
		winkel=(minute*6.0)*M_PI/180.0-M_PI/2.0;
		x=(uint8_t) i*cos(winkel)+Px;
     e12:	b8 01       	movw	r22, r16
     e14:	88 27       	eor	r24, r24
     e16:	77 fd       	sbrc	r23, 7
     e18:	80 95       	com	r24
     e1a:	98 2f       	mov	r25, r24
     e1c:	0e 94 a6 1d 	call	0x3b4c	; 0x3b4c <__floatsisf>
     e20:	6b 01       	movw	r12, r22
     e22:	7c 01       	movw	r14, r24
		y=(uint8_t) i*sin(winkel)+Py;
     e24:	a5 01       	movw	r20, r10
     e26:	94 01       	movw	r18, r8
     e28:	0e 94 bf 1e 	call	0x3d7e	; 0x3d7e <__mulsf3>
     e2c:	20 e0       	ldi	r18, 0x00	; 0
     e2e:	30 e0       	ldi	r19, 0x00	; 0
     e30:	48 ef       	ldi	r20, 0xF8	; 248
     e32:	51 e4       	ldi	r21, 0x41	; 65
     e34:	0e 94 3e 1c 	call	0x387c	; 0x387c <__addsf3>
     e38:	0e 94 78 1d 	call	0x3af0	; 0x3af0 <__fixunssfsi>
     e3c:	36 2e       	mov	r3, r22

	r=21;
	//Berechnen des Minutenzeigers
	for(uint8_t i=0;i<r;i++){
		winkel=(minute*6.0)*M_PI/180.0-M_PI/2.0;
		x=(uint8_t) i*cos(winkel)+Px;
     e3e:	a3 01       	movw	r20, r6
     e40:	92 01       	movw	r18, r4
     e42:	c7 01       	movw	r24, r14
     e44:	b6 01       	movw	r22, r12
     e46:	0e 94 bf 1e 	call	0x3d7e	; 0x3d7e <__mulsf3>
     e4a:	20 e0       	ldi	r18, 0x00	; 0
     e4c:	30 e0       	ldi	r19, 0x00	; 0
     e4e:	48 ef       	ldi	r20, 0xF8	; 248
     e50:	51 e4       	ldi	r21, 0x41	; 65
     e52:	0e 94 3e 1c 	call	0x387c	; 0x387c <__addsf3>
     e56:	0e 94 78 1d 	call	0x3af0	; 0x3af0 <__fixunssfsi>
		y=(uint8_t) i*sin(winkel)+Py;

		drawPixel(x,y,0);
     e5a:	20 e0       	ldi	r18, 0x00	; 0
     e5c:	43 2d       	mov	r20, r3
     e5e:	8a 81       	ldd	r24, Y+2	; 0x02
     e60:	9b 81       	ldd	r25, Y+3	; 0x03
     e62:	0e 94 a2 03 	call	0x744	; 0x744 <_ZN7Display9drawPixelEhhh>
     e66:	0f 5f       	subi	r16, 0xFF	; 255
     e68:	1f 4f       	sbci	r17, 0xFF	; 255
		drawPixel(x,y,0);
	}

	r=21;
	//Berechnen des Minutenzeigers
	for(uint8_t i=0;i<r;i++){
     e6a:	05 31       	cpi	r16, 0x15	; 21
     e6c:	11 05       	cpc	r17, r1
     e6e:	89 f6       	brne	.-94     	; 0xe12 <_ZN7Display6analogEhhh+0x142>
	}

	r=13;
	//Berechnen des Stundenzeigers
	for(uint8_t i=0;i<r;i++){
		winkel=(stunde*30.0)*M_PI/180.0-M_PI/2.0;
     e70:	29 81       	ldd	r18, Y+1	; 0x01
     e72:	62 2f       	mov	r22, r18
     e74:	70 e0       	ldi	r23, 0x00	; 0
     e76:	80 e0       	ldi	r24, 0x00	; 0
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	0e 94 a6 1d 	call	0x3b4c	; 0x3b4c <__floatsisf>
     e7e:	20 e0       	ldi	r18, 0x00	; 0
     e80:	30 e0       	ldi	r19, 0x00	; 0
     e82:	40 ef       	ldi	r20, 0xF0	; 240
     e84:	51 e4       	ldi	r21, 0x41	; 65
     e86:	0e 94 bf 1e 	call	0x3d7e	; 0x3d7e <__mulsf3>
     e8a:	2b ed       	ldi	r18, 0xDB	; 219
     e8c:	3f e0       	ldi	r19, 0x0F	; 15
     e8e:	49 e4       	ldi	r20, 0x49	; 73
     e90:	50 e4       	ldi	r21, 0x40	; 64
     e92:	0e 94 bf 1e 	call	0x3d7e	; 0x3d7e <__mulsf3>
     e96:	20 e0       	ldi	r18, 0x00	; 0
     e98:	30 e0       	ldi	r19, 0x00	; 0
     e9a:	44 e3       	ldi	r20, 0x34	; 52
     e9c:	53 e4       	ldi	r21, 0x43	; 67
     e9e:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <__divsf3>
     ea2:	2b ed       	ldi	r18, 0xDB	; 219
     ea4:	3f e0       	ldi	r19, 0x0F	; 15
     ea6:	49 ec       	ldi	r20, 0xC9	; 201
     ea8:	5f e3       	ldi	r21, 0x3F	; 63
     eaa:	0e 94 3d 1c 	call	0x387a	; 0x387a <__subsf3>
     eae:	6b 01       	movw	r12, r22
     eb0:	7c 01       	movw	r14, r24
		x= (uint8_t) i*cos(winkel) +Px;
     eb2:	0e 94 08 1d 	call	0x3a10	; 0x3a10 <cos>
     eb6:	2b 01       	movw	r4, r22
     eb8:	3c 01       	movw	r6, r24
		y= (uint8_t) i*sin(winkel) +Py;
     eba:	c7 01       	movw	r24, r14
     ebc:	b6 01       	movw	r22, r12
     ebe:	0e 94 22 1f 	call	0x3e44	; 0x3e44 <sin>
     ec2:	4b 01       	movw	r8, r22
     ec4:	5c 01       	movw	r10, r24
     ec6:	00 e0       	ldi	r16, 0x00	; 0
     ec8:	10 e0       	ldi	r17, 0x00	; 0

	r=13;
	//Berechnen des Stundenzeigers
	for(uint8_t i=0;i<r;i++){
		winkel=(stunde*30.0)*M_PI/180.0-M_PI/2.0;
		x= (uint8_t) i*cos(winkel) +Px;
     eca:	b8 01       	movw	r22, r16
     ecc:	88 27       	eor	r24, r24
     ece:	77 fd       	sbrc	r23, 7
     ed0:	80 95       	com	r24
     ed2:	98 2f       	mov	r25, r24
     ed4:	0e 94 a6 1d 	call	0x3b4c	; 0x3b4c <__floatsisf>
     ed8:	6b 01       	movw	r12, r22
     eda:	7c 01       	movw	r14, r24
		y= (uint8_t) i*sin(winkel) +Py;
     edc:	a5 01       	movw	r20, r10
     ede:	94 01       	movw	r18, r8
     ee0:	0e 94 bf 1e 	call	0x3d7e	; 0x3d7e <__mulsf3>
     ee4:	20 e0       	ldi	r18, 0x00	; 0
     ee6:	30 e0       	ldi	r19, 0x00	; 0
     ee8:	48 ef       	ldi	r20, 0xF8	; 248
     eea:	51 e4       	ldi	r21, 0x41	; 65
     eec:	0e 94 3e 1c 	call	0x387c	; 0x387c <__addsf3>
     ef0:	0e 94 78 1d 	call	0x3af0	; 0x3af0 <__fixunssfsi>
     ef4:	36 2e       	mov	r3, r22

	r=13;
	//Berechnen des Stundenzeigers
	for(uint8_t i=0;i<r;i++){
		winkel=(stunde*30.0)*M_PI/180.0-M_PI/2.0;
		x= (uint8_t) i*cos(winkel) +Px;
     ef6:	a3 01       	movw	r20, r6
     ef8:	92 01       	movw	r18, r4
     efa:	c7 01       	movw	r24, r14
     efc:	b6 01       	movw	r22, r12
     efe:	0e 94 bf 1e 	call	0x3d7e	; 0x3d7e <__mulsf3>
     f02:	20 e0       	ldi	r18, 0x00	; 0
     f04:	30 e0       	ldi	r19, 0x00	; 0
     f06:	48 ef       	ldi	r20, 0xF8	; 248
     f08:	51 e4       	ldi	r21, 0x41	; 65
     f0a:	0e 94 3e 1c 	call	0x387c	; 0x387c <__addsf3>
     f0e:	0e 94 78 1d 	call	0x3af0	; 0x3af0 <__fixunssfsi>
		y= (uint8_t) i*sin(winkel) +Py;

		drawPixel(x,y,0);
     f12:	20 e0       	ldi	r18, 0x00	; 0
     f14:	43 2d       	mov	r20, r3
     f16:	8a 81       	ldd	r24, Y+2	; 0x02
     f18:	9b 81       	ldd	r25, Y+3	; 0x03
     f1a:	0e 94 a2 03 	call	0x744	; 0x744 <_ZN7Display9drawPixelEhhh>
     f1e:	0f 5f       	subi	r16, 0xFF	; 255
     f20:	1f 4f       	sbci	r17, 0xFF	; 255
		drawPixel(x,y,0);
	}

	r=13;
	//Berechnen des Stundenzeigers
	for(uint8_t i=0;i<r;i++){
     f22:	0d 30       	cpi	r16, 0x0D	; 13
     f24:	11 05       	cpc	r17, r1
     f26:	89 f6       	brne	.-94     	; 0xeca <_ZN7Display6analogEhhh+0x1fa>

		drawPixel(x,y,0);
	}

	//Anzeige der Zahlen
	draw_ASCI('1',32-charsize,0);
     f28:	20 e0       	ldi	r18, 0x00	; 0
     f2a:	4a e1       	ldi	r20, 0x1A	; 26
     f2c:	61 e3       	ldi	r22, 0x31	; 49
     f2e:	8a 81       	ldd	r24, Y+2	; 0x02
     f30:	9b 81       	ldd	r25, Y+3	; 0x03
     f32:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
	draw_ASCI('2',32,0);
     f36:	20 e0       	ldi	r18, 0x00	; 0
     f38:	40 e2       	ldi	r20, 0x20	; 32
     f3a:	62 e3       	ldi	r22, 0x32	; 50
     f3c:	8a 81       	ldd	r24, Y+2	; 0x02
     f3e:	9b 81       	ldd	r25, Y+3	; 0x03
     f40:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
	draw_ASCI('3',64-charsize,4*charhighte-charhighte/2);
     f44:	2c e1       	ldi	r18, 0x1C	; 28
     f46:	4a e3       	ldi	r20, 0x3A	; 58
     f48:	63 e3       	ldi	r22, 0x33	; 51
     f4a:	8a 81       	ldd	r24, Y+2	; 0x02
     f4c:	9b 81       	ldd	r25, Y+3	; 0x03
     f4e:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
	draw_ASCI('6',32-charsize/2,7*charhighte);
     f52:	28 e3       	ldi	r18, 0x38	; 56
     f54:	4d e1       	ldi	r20, 0x1D	; 29
     f56:	66 e3       	ldi	r22, 0x36	; 54
     f58:	8a 81       	ldd	r24, Y+2	; 0x02
     f5a:	9b 81       	ldd	r25, Y+3	; 0x03
     f5c:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
	draw_ASCI('9',0,4*charhighte-charhighte/2);
     f60:	2c e1       	ldi	r18, 0x1C	; 28
     f62:	40 e0       	ldi	r20, 0x00	; 0
     f64:	69 e3       	ldi	r22, 0x39	; 57
     f66:	8a 81       	ldd	r24, Y+2	; 0x02
     f68:	9b 81       	ldd	r25, Y+3	; 0x03
     f6a:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>

	//anzeige des Rings fuer die Restlichen Stunden Zahlen
	//1
	drawPixel(26*cos((30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
     f6e:	20 e0       	ldi	r18, 0x00	; 0
     f70:	48 e0       	ldi	r20, 0x08	; 8
     f72:	6c e2       	ldi	r22, 0x2C	; 44
     f74:	8a 81       	ldd	r24, Y+2	; 0x02
     f76:	9b 81       	ldd	r25, Y+3	; 0x03
     f78:	0e 94 a2 03 	call	0x744	; 0x744 <_ZN7Display9drawPixelEhhh>
	//2
	drawPixel(26*cos((2*30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((2*30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
     f7c:	20 e0       	ldi	r18, 0x00	; 0
     f7e:	42 e1       	ldi	r20, 0x12	; 18
     f80:	65 e3       	ldi	r22, 0x35	; 53
     f82:	8a 81       	ldd	r24, Y+2	; 0x02
     f84:	9b 81       	ldd	r25, Y+3	; 0x03
     f86:	0e 94 a2 03 	call	0x744	; 0x744 <_ZN7Display9drawPixelEhhh>
	//4
	drawPixel(26*cos((4*30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((4*30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
     f8a:	20 e0       	ldi	r18, 0x00	; 0
     f8c:	4c e2       	ldi	r20, 0x2C	; 44
     f8e:	65 e3       	ldi	r22, 0x35	; 53
     f90:	8a 81       	ldd	r24, Y+2	; 0x02
     f92:	9b 81       	ldd	r25, Y+3	; 0x03
     f94:	0e 94 a2 03 	call	0x744	; 0x744 <_ZN7Display9drawPixelEhhh>
	//5
	drawPixel(26*cos((5*30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((5*30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
     f98:	20 e0       	ldi	r18, 0x00	; 0
     f9a:	45 e3       	ldi	r20, 0x35	; 53
     f9c:	6b e2       	ldi	r22, 0x2B	; 43
     f9e:	8a 81       	ldd	r24, Y+2	; 0x02
     fa0:	9b 81       	ldd	r25, Y+3	; 0x03
     fa2:	0e 94 a2 03 	call	0x744	; 0x744 <_ZN7Display9drawPixelEhhh>
	//7
	drawPixel(26*cos((7*30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((7*30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
     fa6:	20 e0       	ldi	r18, 0x00	; 0
     fa8:	45 e3       	ldi	r20, 0x35	; 53
     faa:	61 e1       	ldi	r22, 0x11	; 17
     fac:	8a 81       	ldd	r24, Y+2	; 0x02
     fae:	9b 81       	ldd	r25, Y+3	; 0x03
     fb0:	0e 94 a2 03 	call	0x744	; 0x744 <_ZN7Display9drawPixelEhhh>
	//8
	drawPixel(26*cos((8*30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((8*30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
     fb4:	20 e0       	ldi	r18, 0x00	; 0
     fb6:	4c e2       	ldi	r20, 0x2C	; 44
     fb8:	68 e0       	ldi	r22, 0x08	; 8
     fba:	8a 81       	ldd	r24, Y+2	; 0x02
     fbc:	9b 81       	ldd	r25, Y+3	; 0x03
     fbe:	0e 94 a2 03 	call	0x744	; 0x744 <_ZN7Display9drawPixelEhhh>
	//10
	drawPixel(26*cos((10*30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((10*30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
     fc2:	20 e0       	ldi	r18, 0x00	; 0
     fc4:	41 e1       	ldi	r20, 0x11	; 17
     fc6:	68 e0       	ldi	r22, 0x08	; 8
     fc8:	8a 81       	ldd	r24, Y+2	; 0x02
     fca:	9b 81       	ldd	r25, Y+3	; 0x03
     fcc:	0e 94 a2 03 	call	0x744	; 0x744 <_ZN7Display9drawPixelEhhh>
	//11
	drawPixel(26*cos((11*30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((11*30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
     fd0:	20 e0       	ldi	r18, 0x00	; 0
     fd2:	48 e0       	ldi	r20, 0x08	; 8
     fd4:	62 e1       	ldi	r22, 0x12	; 18
     fd6:	8a 81       	ldd	r24, Y+2	; 0x02
     fd8:	9b 81       	ldd	r25, Y+3	; 0x03
     fda:	0e 94 a2 03 	call	0x744	; 0x744 <_ZN7Display9drawPixelEhhh>
}
     fde:	0f 90       	pop	r0
     fe0:	0f 90       	pop	r0
     fe2:	0f 90       	pop	r0
     fe4:	df 91       	pop	r29
     fe6:	cf 91       	pop	r28
     fe8:	1f 91       	pop	r17
     fea:	0f 91       	pop	r16
     fec:	ff 90       	pop	r15
     fee:	ef 90       	pop	r14
     ff0:	df 90       	pop	r13
     ff2:	cf 90       	pop	r12
     ff4:	bf 90       	pop	r11
     ff6:	af 90       	pop	r10
     ff8:	9f 90       	pop	r9
     ffa:	8f 90       	pop	r8
     ffc:	7f 90       	pop	r7
     ffe:	6f 90       	pop	r6
    1000:	5f 90       	pop	r5
    1002:	4f 90       	pop	r4
    1004:	3f 90       	pop	r3
    1006:	2f 90       	pop	r2
    1008:	08 95       	ret

0000100a <_Z8ADC_Readh>:
#ifndef ADC_H_
#define ADC_H_

uint16_t ADC_Read( uint8_t channel )
{
	ADMUX = (ADMUX & ~(0x1F)) | (channel & 0x1F);
    100a:	ec e7       	ldi	r30, 0x7C	; 124
    100c:	f0 e0       	ldi	r31, 0x00	; 0
    100e:	90 81       	ld	r25, Z
    1010:	8f 71       	andi	r24, 0x1F	; 31
    1012:	90 7e       	andi	r25, 0xE0	; 224
    1014:	98 2b       	or	r25, r24
    1016:	90 83       	st	Z, r25
	ADCSRA |= (1<<ADSC);
    1018:	ea e7       	ldi	r30, 0x7A	; 122
    101a:	f0 e0       	ldi	r31, 0x00	; 0
    101c:	80 81       	ld	r24, Z
    101e:	80 64       	ori	r24, 0x40	; 64
    1020:	80 83       	st	Z, r24
	while (ADCSRA & (1<<ADSC) ) {
    1022:	80 81       	ld	r24, Z
    1024:	86 fd       	sbrc	r24, 6
    1026:	fd cf       	rjmp	.-6      	; 0x1022 <_Z8ADC_Readh+0x18>
	}
	return ADCW;
    1028:	80 91 78 00 	lds	r24, 0x0078
    102c:	90 91 79 00 	lds	r25, 0x0079
}
    1030:	08 95       	ret

00001032 <_Z14Batteriestatusv>:
	return (uint16_t)( sum / nsamples );
}

double batterie;
int8_t Batteriestatus(){
	uint16_t ADCwert=ADC_Read(0);
    1032:	80 e0       	ldi	r24, 0x00	; 0
    1034:	0e 94 05 08 	call	0x100a	; 0x100a <_Z8ADC_Readh>
	batterie = (ADCwert/1023.0)*3.2*SPANNUNGSTEILER;
    1038:	bc 01       	movw	r22, r24
    103a:	80 e0       	ldi	r24, 0x00	; 0
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	0e 94 a4 1d 	call	0x3b48	; 0x3b48 <__floatunsisf>
    1042:	20 e0       	ldi	r18, 0x00	; 0
    1044:	30 ec       	ldi	r19, 0xC0	; 192
    1046:	4f e7       	ldi	r20, 0x7F	; 127
    1048:	54 e4       	ldi	r21, 0x44	; 68
    104a:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <__divsf3>
    104e:	2d ec       	ldi	r18, 0xCD	; 205
    1050:	3c ec       	ldi	r19, 0xCC	; 204
    1052:	4c e4       	ldi	r20, 0x4C	; 76
    1054:	50 e4       	ldi	r21, 0x40	; 64
    1056:	0e 94 bf 1e 	call	0x3d7e	; 0x3d7e <__mulsf3>
    105a:	2b e7       	ldi	r18, 0x7B	; 123
    105c:	34 e1       	ldi	r19, 0x14	; 20
    105e:	4e ef       	ldi	r20, 0xFE	; 254
    1060:	5f e3       	ldi	r21, 0x3F	; 63
    1062:	0e 94 bf 1e 	call	0x3d7e	; 0x3d7e <__mulsf3>
    1066:	60 93 9f 02 	sts	0x029F, r22
    106a:	70 93 a0 02 	sts	0x02A0, r23
    106e:	80 93 a1 02 	sts	0x02A1, r24
    1072:	90 93 a2 02 	sts	0x02A2, r25
	return ((batterie-3.0)/(4.2-3.0)*100);
    1076:	20 e0       	ldi	r18, 0x00	; 0
    1078:	30 e0       	ldi	r19, 0x00	; 0
    107a:	40 e4       	ldi	r20, 0x40	; 64
    107c:	50 e4       	ldi	r21, 0x40	; 64
    107e:	0e 94 3d 1c 	call	0x387a	; 0x387a <__subsf3>
    1082:	28 e9       	ldi	r18, 0x98	; 152
    1084:	39 e9       	ldi	r19, 0x99	; 153
    1086:	49 e9       	ldi	r20, 0x99	; 153
    1088:	5f e3       	ldi	r21, 0x3F	; 63
    108a:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <__divsf3>
    108e:	20 e0       	ldi	r18, 0x00	; 0
    1090:	30 e0       	ldi	r19, 0x00	; 0
    1092:	48 ec       	ldi	r20, 0xC8	; 200
    1094:	52 e4       	ldi	r21, 0x42	; 66
    1096:	0e 94 bf 1e 	call	0x3d7e	; 0x3d7e <__mulsf3>
    109a:	0e 94 73 1d 	call	0x3ae6	; 0x3ae6 <__fixsfsi>
    109e:	86 2f       	mov	r24, r22
}
    10a0:	08 95       	ret

000010a2 <_Z14willkommenpagev>:
#ifndef SEITEN_H_
#define SEITEN_H_

//Diese Funktionen schreiben nur in den Framebuffer und das Schreiben passiert in der Main ueber einen Interupt

void willkommenpage(){
    10a2:	cf 92       	push	r12
    10a4:	df 92       	push	r13
    10a6:	ef 92       	push	r14
    10a8:	ff 92       	push	r15
    10aa:	0f 93       	push	r16
    10ac:	1f 93       	push	r17
    10ae:	cf 93       	push	r28
    10b0:	df 93       	push	r29
    10b2:	cd b7       	in	r28, 0x3d	; 61
    10b4:	de b7       	in	r29, 0x3e	; 62
    10b6:	64 97       	sbiw	r28, 0x14	; 20
    10b8:	0f b6       	in	r0, 0x3f	; 63
    10ba:	f8 94       	cli
    10bc:	de bf       	out	0x3e, r29	; 62
    10be:	0f be       	out	0x3f, r0	; 63
    10c0:	cd bf       	out	0x3d, r28	; 61
	char buffer[20];
	uint8_t buffersize;
	oled.clearFrame();
    10c2:	84 ea       	ldi	r24, 0xA4	; 164
    10c4:	92 e0       	ldi	r25, 0x02	; 2
    10c6:	0e 94 b9 02 	call	0x572	; 0x572 <_ZN7Display10clearFrameEv>
	buffersize=sprintf(buffer,"Fahradcomputer");
    10ca:	8f e0       	ldi	r24, 0x0F	; 15
    10cc:	e0 e0       	ldi	r30, 0x00	; 0
    10ce:	f1 e0       	ldi	r31, 0x01	; 1
    10d0:	8e 01       	movw	r16, r28
    10d2:	0f 5f       	subi	r16, 0xFF	; 255
    10d4:	1f 4f       	sbci	r17, 0xFF	; 255
    10d6:	d8 01       	movw	r26, r16
    10d8:	01 90       	ld	r0, Z+
    10da:	0d 92       	st	X+, r0
    10dc:	8a 95       	dec	r24
    10de:	e1 f7       	brne	.-8      	; 0x10d8 <_Z14willkommenpagev+0x36>
    10e0:	c0 2e       	mov	r12, r16
    10e2:	d1 2e       	mov	r13, r17
    10e4:	78 01       	movw	r14, r16
    10e6:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0; i < buffersize;i++){
		oled.draw_ASCI(buffer[i],i*charsize,0);
    10e8:	f7 01       	movw	r30, r14
    10ea:	61 91       	ld	r22, Z+
    10ec:	7f 01       	movw	r14, r30
    10ee:	20 e0       	ldi	r18, 0x00	; 0
    10f0:	41 2f       	mov	r20, r17
    10f2:	84 ea       	ldi	r24, 0xA4	; 164
    10f4:	92 e0       	ldi	r25, 0x02	; 2
    10f6:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    10fa:	1a 5f       	subi	r17, 0xFA	; 250
void willkommenpage(){
	char buffer[20];
	uint8_t buffersize;
	oled.clearFrame();
	buffersize=sprintf(buffer,"Fahradcomputer");
	for(uint8_t i=0; i < buffersize;i++){
    10fc:	14 35       	cpi	r17, 0x54	; 84
    10fe:	a1 f7       	brne	.-24     	; 0x10e8 <_Z14willkommenpagev+0x46>
		oled.draw_ASCI(buffer[i],i*charsize,0);
	}
	buffersize=sprintf(buffer,"--------------");
    1100:	8f e0       	ldi	r24, 0x0F	; 15
    1102:	ef e0       	ldi	r30, 0x0F	; 15
    1104:	f1 e0       	ldi	r31, 0x01	; 1
    1106:	de 01       	movw	r26, r28
    1108:	11 96       	adiw	r26, 0x01	; 1
    110a:	01 90       	ld	r0, Z+
    110c:	0d 92       	st	X+, r0
    110e:	8a 95       	dec	r24
    1110:	e1 f7       	brne	.-8      	; 0x110a <_Z14willkommenpagev+0x68>
    1112:	ec 2c       	mov	r14, r12
    1114:	fd 2c       	mov	r15, r13
    1116:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0; i < buffersize;i++){
		oled.draw_ASCI(buffer[i],i*charsize,8);
    1118:	f7 01       	movw	r30, r14
    111a:	61 91       	ld	r22, Z+
    111c:	7f 01       	movw	r14, r30
    111e:	28 e0       	ldi	r18, 0x08	; 8
    1120:	41 2f       	mov	r20, r17
    1122:	84 ea       	ldi	r24, 0xA4	; 164
    1124:	92 e0       	ldi	r25, 0x02	; 2
    1126:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    112a:	1a 5f       	subi	r17, 0xFA	; 250
	buffersize=sprintf(buffer,"Fahradcomputer");
	for(uint8_t i=0; i < buffersize;i++){
		oled.draw_ASCI(buffer[i],i*charsize,0);
	}
	buffersize=sprintf(buffer,"--------------");
	for(uint8_t i=0; i < buffersize;i++){
    112c:	14 35       	cpi	r17, 0x54	; 84
    112e:	a1 f7       	brne	.-24     	; 0x1118 <_Z14willkommenpagev+0x76>
		oled.draw_ASCI(buffer[i],i*charsize,8);
	}
	buffersize=sprintf(buffer,"Version: %.2f",VERSIONSNUMMER);
    1130:	8f e3       	ldi	r24, 0x3F	; 63
    1132:	8f 93       	push	r24
    1134:	89 e9       	ldi	r24, 0x99	; 153
    1136:	8f 93       	push	r24
    1138:	8f 93       	push	r24
    113a:	8a e9       	ldi	r24, 0x9A	; 154
    113c:	8f 93       	push	r24
    113e:	8e e1       	ldi	r24, 0x1E	; 30
    1140:	91 e0       	ldi	r25, 0x01	; 1
    1142:	9f 93       	push	r25
    1144:	8f 93       	push	r24
    1146:	ce 01       	movw	r24, r28
    1148:	01 96       	adiw	r24, 0x01	; 1
    114a:	9f 93       	push	r25
    114c:	8f 93       	push	r24
    114e:	0e 94 42 24 	call	0x4884	; 0x4884 <sprintf>
	for(uint8_t i=0; i < buffersize;i++){
    1152:	0f b6       	in	r0, 0x3f	; 63
    1154:	f8 94       	cli
    1156:	de bf       	out	0x3e, r29	; 62
    1158:	0f be       	out	0x3f, r0	; 63
    115a:	cd bf       	out	0x3d, r28	; 61
    115c:	88 23       	and	r24, r24
    115e:	d1 f0       	breq	.+52     	; 0x1194 <_Z14willkommenpagev+0xf2>
    1160:	81 50       	subi	r24, 0x01	; 1
    1162:	68 94       	set
    1164:	ee 24       	eor	r14, r14
    1166:	e1 f8       	bld	r14, 1
    1168:	f1 2c       	mov	r15, r1
    116a:	ec 0e       	add	r14, r28
    116c:	fd 1e       	adc	r15, r29
    116e:	e8 0e       	add	r14, r24
    1170:	f1 1c       	adc	r15, r1
    1172:	0c 2d       	mov	r16, r12
    1174:	1d 2d       	mov	r17, r13
    1176:	d1 2c       	mov	r13, r1
		oled.draw_ASCI(buffer[i],i*charsize,32);
    1178:	f8 01       	movw	r30, r16
    117a:	61 91       	ld	r22, Z+
    117c:	8f 01       	movw	r16, r30
    117e:	20 e2       	ldi	r18, 0x20	; 32
    1180:	4d 2d       	mov	r20, r13
    1182:	84 ea       	ldi	r24, 0xA4	; 164
    1184:	92 e0       	ldi	r25, 0x02	; 2
    1186:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    118a:	f6 e0       	ldi	r31, 0x06	; 6
    118c:	df 0e       	add	r13, r31
	buffersize=sprintf(buffer,"--------------");
	for(uint8_t i=0; i < buffersize;i++){
		oled.draw_ASCI(buffer[i],i*charsize,8);
	}
	buffersize=sprintf(buffer,"Version: %.2f",VERSIONSNUMMER);
	for(uint8_t i=0; i < buffersize;i++){
    118e:	0e 15       	cp	r16, r14
    1190:	1f 05       	cpc	r17, r15
    1192:	91 f7       	brne	.-28     	; 0x1178 <_Z14willkommenpagev+0xd6>
		oled.draw_ASCI(buffer[i],i*charsize,32);

	}
	oled.sendFrame();
    1194:	84 ea       	ldi	r24, 0xA4	; 164
    1196:	92 e0       	ldi	r25, 0x02	; 2
    1198:	0e 94 5f 03 	call	0x6be	; 0x6be <_ZN7Display9sendFrameEv>
	oled.clearFrame();
    119c:	84 ea       	ldi	r24, 0xA4	; 164
    119e:	92 e0       	ldi	r25, 0x02	; 2
    11a0:	0e 94 b9 02 	call	0x572	; 0x572 <_ZN7Display10clearFrameEv>
    11a4:	85 e0       	ldi	r24, 0x05	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    11a6:	2f e7       	ldi	r18, 0x7F	; 127
    11a8:	38 e3       	ldi	r19, 0x38	; 56
    11aa:	91 e0       	ldi	r25, 0x01	; 1
    11ac:	21 50       	subi	r18, 0x01	; 1
    11ae:	30 40       	sbci	r19, 0x00	; 0
    11b0:	90 40       	sbci	r25, 0x00	; 0
    11b2:	e1 f7       	brne	.-8      	; 0x11ac <_Z14willkommenpagev+0x10a>
    11b4:	00 c0       	rjmp	.+0      	; 0x11b6 <_Z14willkommenpagev+0x114>
    11b6:	00 00       	nop
    11b8:	ef e7       	ldi	r30, 0x7F	; 127
    11ba:	f8 e3       	ldi	r31, 0x38	; 56
    11bc:	21 e0       	ldi	r18, 0x01	; 1
    11be:	e1 50       	subi	r30, 0x01	; 1
    11c0:	f0 40       	sbci	r31, 0x00	; 0
    11c2:	20 40       	sbci	r18, 0x00	; 0
    11c4:	e1 f7       	brne	.-8      	; 0x11be <_Z14willkommenpagev+0x11c>
    11c6:	00 c0       	rjmp	.+0      	; 0x11c8 <_Z14willkommenpagev+0x126>
    11c8:	00 00       	nop
    11ca:	81 50       	subi	r24, 0x01	; 1
	for (uint8_t i=0;i<5;i++)
    11cc:	61 f7       	brne	.-40     	; 0x11a6 <_Z14willkommenpagev+0x104>
	{
		_delay_ms(50);
		_delay_ms(50);
	}
}
    11ce:	64 96       	adiw	r28, 0x14	; 20
    11d0:	0f b6       	in	r0, 0x3f	; 63
    11d2:	f8 94       	cli
    11d4:	de bf       	out	0x3e, r29	; 62
    11d6:	0f be       	out	0x3f, r0	; 63
    11d8:	cd bf       	out	0x3d, r28	; 61
    11da:	df 91       	pop	r29
    11dc:	cf 91       	pop	r28
    11de:	1f 91       	pop	r17
    11e0:	0f 91       	pop	r16
    11e2:	ff 90       	pop	r15
    11e4:	ef 90       	pop	r14
    11e6:	df 90       	pop	r13
    11e8:	cf 90       	pop	r12
    11ea:	08 95       	ret

000011ec <_Z6headerh>:

void header(uint8_t page){
    11ec:	ef 92       	push	r14
    11ee:	ff 92       	push	r15
    11f0:	0f 93       	push	r16
    11f2:	1f 93       	push	r17
    11f4:	cf 93       	push	r28
    11f6:	df 93       	push	r29
    11f8:	cd b7       	in	r28, 0x3d	; 61
    11fa:	de b7       	in	r29, 0x3e	; 62
    11fc:	64 97       	sbiw	r28, 0x14	; 20
    11fe:	0f b6       	in	r0, 0x3f	; 63
    1200:	f8 94       	cli
    1202:	de bf       	out	0x3e, r29	; 62
    1204:	0f be       	out	0x3f, r0	; 63
    1206:	cd bf       	out	0x3d, r28	; 61
	char buffer[20];
	uint8_t buffersize=0;;
	switch (page) {
    1208:	81 11       	cpse	r24, r1
    120a:	4d c0       	rjmp	.+154    	; 0x12a6 <_Z6headerh+0xba>
    120c:	0f 2e       	mov	r0, r31
    120e:	f5 ed       	ldi	r31, 0xD5	; 213
    1210:	ef 2e       	mov	r14, r31
    1212:	f6 e0       	ldi	r31, 0x06	; 6
    1214:	ff 2e       	mov	r15, r31
    1216:	f0 2d       	mov	r31, r0
    1218:	10 e0       	ldi	r17, 0x00	; 0
		case 0:	//standard Header fuer fast alle Pages
			for(uint8_t i=0;i<8;i++){
				oled.draw_ASCI(rtc.msg_uhr[i],i*charsize,0);
    121a:	f7 01       	movw	r30, r14
    121c:	61 91       	ld	r22, Z+
    121e:	7f 01       	movw	r14, r30
    1220:	20 e0       	ldi	r18, 0x00	; 0
    1222:	41 2f       	mov	r20, r17
    1224:	84 ea       	ldi	r24, 0xA4	; 164
    1226:	92 e0       	ldi	r25, 0x02	; 2
    1228:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    122c:	1a 5f       	subi	r17, 0xFA	; 250
void header(uint8_t page){
	char buffer[20];
	uint8_t buffersize=0;;
	switch (page) {
		case 0:	//standard Header fuer fast alle Pages
			for(uint8_t i=0;i<8;i++){
    122e:	10 33       	cpi	r17, 0x30	; 48
    1230:	a1 f7       	brne	.-24     	; 0x121a <_Z6headerh+0x2e>
				oled.draw_ASCI(rtc.msg_uhr[i],i*charsize,0);
			}
			buffersize=sprintf(buffer,"Bat: %i%%",Batteriestatus());
    1232:	0e 94 19 08 	call	0x1032	; 0x1032 <_Z14Batteriestatusv>
    1236:	28 2f       	mov	r18, r24
    1238:	33 27       	eor	r19, r19
    123a:	27 fd       	sbrc	r18, 7
    123c:	30 95       	com	r19
    123e:	3f 93       	push	r19
    1240:	8f 93       	push	r24
    1242:	8c e2       	ldi	r24, 0x2C	; 44
    1244:	91 e0       	ldi	r25, 0x01	; 1
    1246:	9f 93       	push	r25
    1248:	8f 93       	push	r24
    124a:	ce 01       	movw	r24, r28
    124c:	01 96       	adiw	r24, 0x01	; 1
    124e:	9f 93       	push	r25
    1250:	8f 93       	push	r24
    1252:	0e 94 42 24 	call	0x4884	; 0x4884 <sprintf>
			for(uint8_t i=((SSD1306_WIDTH/charsize)-buffersize);i<(SSD1306_WIDTH/charsize);i++){
    1256:	25 e1       	ldi	r18, 0x15	; 21
    1258:	f2 2e       	mov	r15, r18
    125a:	f8 1a       	sub	r15, r24
    125c:	0f 90       	pop	r0
    125e:	0f 90       	pop	r0
    1260:	0f 90       	pop	r0
    1262:	0f 90       	pop	r0
    1264:	0f 90       	pop	r0
    1266:	0f 90       	pop	r0
    1268:	f4 e1       	ldi	r31, 0x14	; 20
    126a:	ff 15       	cp	r31, r15
    126c:	e0 f0       	brcs	.+56     	; 0x12a6 <_Z6headerh+0xba>
    126e:	ef 2c       	mov	r14, r15
    1270:	ee 0c       	add	r14, r14
    1272:	ef 0c       	add	r14, r15
    1274:	ee 0c       	add	r14, r14
				oled.draw_ASCI(buffer[i-((SSD1306_WIDTH/charsize)-buffersize)],i*charsize,0);
    1276:	8c 01       	movw	r16, r24
    1278:	11 27       	eor	r17, r17
    127a:	e1 e0       	ldi	r30, 0x01	; 1
    127c:	f0 e0       	ldi	r31, 0x00	; 0
    127e:	ec 0f       	add	r30, r28
    1280:	fd 1f       	adc	r31, r29
    1282:	ef 0d       	add	r30, r15
    1284:	f1 1d       	adc	r31, r1
    1286:	e0 0f       	add	r30, r16
    1288:	f1 1f       	adc	r31, r17
    128a:	75 97       	sbiw	r30, 0x15	; 21
    128c:	20 e0       	ldi	r18, 0x00	; 0
    128e:	4e 2d       	mov	r20, r14
    1290:	60 81       	ld	r22, Z
    1292:	84 ea       	ldi	r24, 0xA4	; 164
    1294:	92 e0       	ldi	r25, 0x02	; 2
    1296:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
		case 0:	//standard Header fuer fast alle Pages
			for(uint8_t i=0;i<8;i++){
				oled.draw_ASCI(rtc.msg_uhr[i],i*charsize,0);
			}
			buffersize=sprintf(buffer,"Bat: %i%%",Batteriestatus());
			for(uint8_t i=((SSD1306_WIDTH/charsize)-buffersize);i<(SSD1306_WIDTH/charsize);i++){
    129a:	f3 94       	inc	r15
    129c:	26 e0       	ldi	r18, 0x06	; 6
    129e:	e2 0e       	add	r14, r18
    12a0:	85 e1       	ldi	r24, 0x15	; 21
    12a2:	f8 12       	cpse	r15, r24
    12a4:	ea cf       	rjmp	.-44     	; 0x127a <_Z6headerh+0x8e>
			}
			break;
		default:
			break;
	}
}
    12a6:	64 96       	adiw	r28, 0x14	; 20
    12a8:	0f b6       	in	r0, 0x3f	; 63
    12aa:	f8 94       	cli
    12ac:	de bf       	out	0x3e, r29	; 62
    12ae:	0f be       	out	0x3f, r0	; 63
    12b0:	cd bf       	out	0x3d, r28	; 61
    12b2:	df 91       	pop	r29
    12b4:	cf 91       	pop	r28
    12b6:	1f 91       	pop	r17
    12b8:	0f 91       	pop	r16
    12ba:	ff 90       	pop	r15
    12bc:	ef 90       	pop	r14
    12be:	08 95       	ret

000012c0 <_Z6bottomh>:

void bottom(uint8_t page){
    12c0:	1f 93       	push	r17
    12c2:	cf 93       	push	r28
    12c4:	df 93       	push	r29
	switch (page) {
    12c6:	81 11       	cpse	r24, r1
    12c8:	0d c0       	rjmp	.+26     	; 0x12e4 <_Z6bottomh+0x24>
    12ca:	cd ed       	ldi	r28, 0xDD	; 221
    12cc:	d6 e0       	ldi	r29, 0x06	; 6
    12ce:	10 e5       	ldi	r17, 0x50	; 80
		case 0:	//standard Header fuer fast alle Pages
			for(uint8_t i=0;i<8;i++){
				oled.draw_ASCI(rtc.msg_dat[i],i*charsize+(SSD1306_WIDTH-bitsderrtc*charsize),7*charhighte);
    12d0:	69 91       	ld	r22, Y+
    12d2:	28 e3       	ldi	r18, 0x38	; 56
    12d4:	41 2f       	mov	r20, r17
    12d6:	84 ea       	ldi	r24, 0xA4	; 164
    12d8:	92 e0       	ldi	r25, 0x02	; 2
    12da:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    12de:	1a 5f       	subi	r17, 0xFA	; 250
}

void bottom(uint8_t page){
	switch (page) {
		case 0:	//standard Header fuer fast alle Pages
			for(uint8_t i=0;i<8;i++){
    12e0:	10 38       	cpi	r17, 0x80	; 128
    12e2:	b1 f7       	brne	.-20     	; 0x12d0 <_Z6bottomh+0x10>
			}
			break;
		default:
			break;
		}
}
    12e4:	df 91       	pop	r29
    12e6:	cf 91       	pop	r28
    12e8:	1f 91       	pop	r17
    12ea:	08 95       	ret

000012ec <_Z16anzeige_richtungf>:

void anzeige_richtung(float winkel){
    12ec:	cf 92       	push	r12
    12ee:	df 92       	push	r13
    12f0:	ef 92       	push	r14
    12f2:	ff 92       	push	r15
    12f4:	6b 01       	movw	r12, r22
    12f6:	7c 01       	movw	r14, r24
	//finden der Ziffer fuer die Anzeige
	if ((winkel<45/2) || (winkel == 360-45/2))
    12f8:	20 e0       	ldi	r18, 0x00	; 0
    12fa:	30 e0       	ldi	r19, 0x00	; 0
    12fc:	40 eb       	ldi	r20, 0xB0	; 176
    12fe:	51 e4       	ldi	r21, 0x41	; 65
    1300:	0e 94 04 1d 	call	0x3a08	; 0x3a08 <__cmpsf2>
    1304:	88 23       	and	r24, r24
    1306:	54 f0       	brlt	.+20     	; 0x131c <_Z16anzeige_richtungf+0x30>
    1308:	20 e0       	ldi	r18, 0x00	; 0
    130a:	30 e0       	ldi	r19, 0x00	; 0
    130c:	49 ea       	ldi	r20, 0xA9	; 169
    130e:	53 e4       	ldi	r21, 0x43	; 67
    1310:	c7 01       	movw	r24, r14
    1312:	b6 01       	movw	r22, r12
    1314:	0e 94 04 1d 	call	0x3a08	; 0x3a08 <__cmpsf2>
    1318:	81 11       	cpse	r24, r1
    131a:	08 c0       	rjmp	.+16     	; 0x132c <_Z16anzeige_richtungf+0x40>
	{
		oled.draw_ASCI('N',80,3.5*charhighte);
    131c:	2c e1       	ldi	r18, 0x1C	; 28
    131e:	40 e5       	ldi	r20, 0x50	; 80
    1320:	6e e4       	ldi	r22, 0x4E	; 78
    1322:	84 ea       	ldi	r24, 0xA4	; 164
    1324:	92 e0       	ldi	r25, 0x02	; 2
    1326:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    132a:	99 c0       	rjmp	.+306    	; 0x145e <_Z16anzeige_richtungf+0x172>
	}
	else if (winkel<90-45/2)
    132c:	20 e0       	ldi	r18, 0x00	; 0
    132e:	30 e0       	ldi	r19, 0x00	; 0
    1330:	48 e8       	ldi	r20, 0x88	; 136
    1332:	52 e4       	ldi	r21, 0x42	; 66
    1334:	c7 01       	movw	r24, r14
    1336:	b6 01       	movw	r22, r12
    1338:	0e 94 04 1d 	call	0x3a08	; 0x3a08 <__cmpsf2>
    133c:	88 23       	and	r24, r24
    133e:	7c f4       	brge	.+30     	; 0x135e <_Z16anzeige_richtungf+0x72>
	{
		oled.draw_ASCI('N',80-charsize/2,3.5*charhighte);
    1340:	2c e1       	ldi	r18, 0x1C	; 28
    1342:	4d e4       	ldi	r20, 0x4D	; 77
    1344:	6e e4       	ldi	r22, 0x4E	; 78
    1346:	84 ea       	ldi	r24, 0xA4	; 164
    1348:	92 e0       	ldi	r25, 0x02	; 2
    134a:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
		oled.draw_ASCI('O',80+charsize/2,3.5*charhighte);
    134e:	2c e1       	ldi	r18, 0x1C	; 28
    1350:	43 e5       	ldi	r20, 0x53	; 83
    1352:	6f e4       	ldi	r22, 0x4F	; 79
    1354:	84 ea       	ldi	r24, 0xA4	; 164
    1356:	92 e0       	ldi	r25, 0x02	; 2
    1358:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    135c:	80 c0       	rjmp	.+256    	; 0x145e <_Z16anzeige_richtungf+0x172>
	}
	else if (winkel<135-45/2)
    135e:	20 e0       	ldi	r18, 0x00	; 0
    1360:	30 e0       	ldi	r19, 0x00	; 0
    1362:	42 ee       	ldi	r20, 0xE2	; 226
    1364:	52 e4       	ldi	r21, 0x42	; 66
    1366:	c7 01       	movw	r24, r14
    1368:	b6 01       	movw	r22, r12
    136a:	0e 94 04 1d 	call	0x3a08	; 0x3a08 <__cmpsf2>
    136e:	88 23       	and	r24, r24
    1370:	44 f4       	brge	.+16     	; 0x1382 <_Z16anzeige_richtungf+0x96>
	{
		oled.draw_ASCI('O',80,3.5*charhighte);
    1372:	2c e1       	ldi	r18, 0x1C	; 28
    1374:	40 e5       	ldi	r20, 0x50	; 80
    1376:	6f e4       	ldi	r22, 0x4F	; 79
    1378:	84 ea       	ldi	r24, 0xA4	; 164
    137a:	92 e0       	ldi	r25, 0x02	; 2
    137c:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    1380:	6e c0       	rjmp	.+220    	; 0x145e <_Z16anzeige_richtungf+0x172>
	}
	else if (winkel<180-45/2)
    1382:	20 e0       	ldi	r18, 0x00	; 0
    1384:	30 e0       	ldi	r19, 0x00	; 0
    1386:	4e e1       	ldi	r20, 0x1E	; 30
    1388:	53 e4       	ldi	r21, 0x43	; 67
    138a:	c7 01       	movw	r24, r14
    138c:	b6 01       	movw	r22, r12
    138e:	0e 94 04 1d 	call	0x3a08	; 0x3a08 <__cmpsf2>
    1392:	88 23       	and	r24, r24
    1394:	7c f4       	brge	.+30     	; 0x13b4 <_Z16anzeige_richtungf+0xc8>
	{
		oled.draw_ASCI('S',80-charsize/2,3.5*charhighte);
    1396:	2c e1       	ldi	r18, 0x1C	; 28
    1398:	4d e4       	ldi	r20, 0x4D	; 77
    139a:	63 e5       	ldi	r22, 0x53	; 83
    139c:	84 ea       	ldi	r24, 0xA4	; 164
    139e:	92 e0       	ldi	r25, 0x02	; 2
    13a0:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
		oled.draw_ASCI('O',80+charsize/2,3.5*charhighte);
    13a4:	2c e1       	ldi	r18, 0x1C	; 28
    13a6:	43 e5       	ldi	r20, 0x53	; 83
    13a8:	6f e4       	ldi	r22, 0x4F	; 79
    13aa:	84 ea       	ldi	r24, 0xA4	; 164
    13ac:	92 e0       	ldi	r25, 0x02	; 2
    13ae:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    13b2:	55 c0       	rjmp	.+170    	; 0x145e <_Z16anzeige_richtungf+0x172>
	}
	else if (winkel<225-45/2)
    13b4:	20 e0       	ldi	r18, 0x00	; 0
    13b6:	30 e0       	ldi	r19, 0x00	; 0
    13b8:	4b e4       	ldi	r20, 0x4B	; 75
    13ba:	53 e4       	ldi	r21, 0x43	; 67
    13bc:	c7 01       	movw	r24, r14
    13be:	b6 01       	movw	r22, r12
    13c0:	0e 94 04 1d 	call	0x3a08	; 0x3a08 <__cmpsf2>
    13c4:	88 23       	and	r24, r24
    13c6:	44 f4       	brge	.+16     	; 0x13d8 <_Z16anzeige_richtungf+0xec>
	{
		oled.draw_ASCI('S',80,3.5*charhighte);
    13c8:	2c e1       	ldi	r18, 0x1C	; 28
    13ca:	40 e5       	ldi	r20, 0x50	; 80
    13cc:	63 e5       	ldi	r22, 0x53	; 83
    13ce:	84 ea       	ldi	r24, 0xA4	; 164
    13d0:	92 e0       	ldi	r25, 0x02	; 2
    13d2:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    13d6:	43 c0       	rjmp	.+134    	; 0x145e <_Z16anzeige_richtungf+0x172>
	}
	else if (winkel<270-45/2)
    13d8:	20 e0       	ldi	r18, 0x00	; 0
    13da:	30 e0       	ldi	r19, 0x00	; 0
    13dc:	48 e7       	ldi	r20, 0x78	; 120
    13de:	53 e4       	ldi	r21, 0x43	; 67
    13e0:	c7 01       	movw	r24, r14
    13e2:	b6 01       	movw	r22, r12
    13e4:	0e 94 04 1d 	call	0x3a08	; 0x3a08 <__cmpsf2>
    13e8:	88 23       	and	r24, r24
    13ea:	7c f4       	brge	.+30     	; 0x140a <_Z16anzeige_richtungf+0x11e>
	{
		oled.draw_ASCI('S',80-charsize/2,3.5*charhighte);
    13ec:	2c e1       	ldi	r18, 0x1C	; 28
    13ee:	4d e4       	ldi	r20, 0x4D	; 77
    13f0:	63 e5       	ldi	r22, 0x53	; 83
    13f2:	84 ea       	ldi	r24, 0xA4	; 164
    13f4:	92 e0       	ldi	r25, 0x02	; 2
    13f6:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
		oled.draw_ASCI('W',80+charsize/2,3.5*charhighte);
    13fa:	2c e1       	ldi	r18, 0x1C	; 28
    13fc:	43 e5       	ldi	r20, 0x53	; 83
    13fe:	67 e5       	ldi	r22, 0x57	; 87
    1400:	84 ea       	ldi	r24, 0xA4	; 164
    1402:	92 e0       	ldi	r25, 0x02	; 2
    1404:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    1408:	2a c0       	rjmp	.+84     	; 0x145e <_Z16anzeige_richtungf+0x172>
	}
	else if (winkel<315-45/2)
    140a:	20 e0       	ldi	r18, 0x00	; 0
    140c:	30 e8       	ldi	r19, 0x80	; 128
    140e:	42 e9       	ldi	r20, 0x92	; 146
    1410:	53 e4       	ldi	r21, 0x43	; 67
    1412:	c7 01       	movw	r24, r14
    1414:	b6 01       	movw	r22, r12
    1416:	0e 94 04 1d 	call	0x3a08	; 0x3a08 <__cmpsf2>
    141a:	88 23       	and	r24, r24
    141c:	44 f4       	brge	.+16     	; 0x142e <_Z16anzeige_richtungf+0x142>
	{
		oled.draw_ASCI('W',80,3.5*charhighte);
    141e:	2c e1       	ldi	r18, 0x1C	; 28
    1420:	40 e5       	ldi	r20, 0x50	; 80
    1422:	67 e5       	ldi	r22, 0x57	; 87
    1424:	84 ea       	ldi	r24, 0xA4	; 164
    1426:	92 e0       	ldi	r25, 0x02	; 2
    1428:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    142c:	18 c0       	rjmp	.+48     	; 0x145e <_Z16anzeige_richtungf+0x172>
	}
	else if (winkel<360-45/2)
    142e:	20 e0       	ldi	r18, 0x00	; 0
    1430:	30 e0       	ldi	r19, 0x00	; 0
    1432:	49 ea       	ldi	r20, 0xA9	; 169
    1434:	53 e4       	ldi	r21, 0x43	; 67
    1436:	c7 01       	movw	r24, r14
    1438:	b6 01       	movw	r22, r12
    143a:	0e 94 04 1d 	call	0x3a08	; 0x3a08 <__cmpsf2>
    143e:	88 23       	and	r24, r24
    1440:	74 f4       	brge	.+28     	; 0x145e <_Z16anzeige_richtungf+0x172>
	{
		oled.draw_ASCI('N',80-charsize/2,3.5*charhighte);
    1442:	2c e1       	ldi	r18, 0x1C	; 28
    1444:	4d e4       	ldi	r20, 0x4D	; 77
    1446:	6e e4       	ldi	r22, 0x4E	; 78
    1448:	84 ea       	ldi	r24, 0xA4	; 164
    144a:	92 e0       	ldi	r25, 0x02	; 2
    144c:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
		oled.draw_ASCI('W',80+charsize/2,3.5*charhighte);
    1450:	2c e1       	ldi	r18, 0x1C	; 28
    1452:	43 e5       	ldi	r20, 0x53	; 83
    1454:	67 e5       	ldi	r22, 0x57	; 87
    1456:	84 ea       	ldi	r24, 0xA4	; 164
    1458:	92 e0       	ldi	r25, 0x02	; 2
    145a:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
	}
}
    145e:	ff 90       	pop	r15
    1460:	ef 90       	pop	r14
    1462:	df 90       	pop	r13
    1464:	cf 90       	pop	r12
    1466:	08 95       	ret

00001468 <_Z13anzeige_nadelhhf>:

void anzeige_nadel(uint8_t x, uint8_t y, float angle){
    1468:	af 92       	push	r10
    146a:	bf 92       	push	r11
    146c:	cf 92       	push	r12
    146e:	df 92       	push	r13
    1470:	ef 92       	push	r14
    1472:	ff 92       	push	r15
    1474:	0f 93       	push	r16
    1476:	1f 93       	push	r17
	//fixed parameters for drawing the arrow
	oled.draw_triangle(x,y,20,70,angle);
    1478:	59 01       	movw	r10, r18
    147a:	6a 01       	movw	r12, r20
    147c:	e1 2c       	mov	r14, r1
    147e:	f1 2c       	mov	r15, r1
    1480:	0c e8       	ldi	r16, 0x8C	; 140
    1482:	12 e4       	ldi	r17, 0x42	; 66
    1484:	24 e1       	ldi	r18, 0x14	; 20
    1486:	46 2f       	mov	r20, r22
    1488:	68 2f       	mov	r22, r24
    148a:	84 ea       	ldi	r24, 0xA4	; 164
    148c:	92 e0       	ldi	r25, 0x02	; 2
    148e:	0e 94 7f 04 	call	0x8fe	; 0x8fe <_ZN7Display13draw_triangleEhhhff>
}
    1492:	1f 91       	pop	r17
    1494:	0f 91       	pop	r16
    1496:	ff 90       	pop	r15
    1498:	ef 90       	pop	r14
    149a:	df 90       	pop	r13
    149c:	cf 90       	pop	r12
    149e:	bf 90       	pop	r11
    14a0:	af 90       	pop	r10
    14a2:	08 95       	ret

000014a4 <_Z19anzeige_kleinenadelhhf>:
void anzeige_kleinenadel(uint8_t x, uint8_t y, float angle){
    14a4:	af 92       	push	r10
    14a6:	bf 92       	push	r11
    14a8:	cf 92       	push	r12
    14aa:	df 92       	push	r13
    14ac:	ef 92       	push	r14
    14ae:	ff 92       	push	r15
    14b0:	0f 93       	push	r16
    14b2:	1f 93       	push	r17
	//fixed parameters for drawing the arrow
	oled.draw_triangle(x,y,10,70,angle);
    14b4:	59 01       	movw	r10, r18
    14b6:	6a 01       	movw	r12, r20
    14b8:	e1 2c       	mov	r14, r1
    14ba:	f1 2c       	mov	r15, r1
    14bc:	0c e8       	ldi	r16, 0x8C	; 140
    14be:	12 e4       	ldi	r17, 0x42	; 66
    14c0:	2a e0       	ldi	r18, 0x0A	; 10
    14c2:	46 2f       	mov	r20, r22
    14c4:	68 2f       	mov	r22, r24
    14c6:	84 ea       	ldi	r24, 0xA4	; 164
    14c8:	92 e0       	ldi	r25, 0x02	; 2
    14ca:	0e 94 7f 04 	call	0x8fe	; 0x8fe <_ZN7Display13draw_triangleEhhhff>
}
    14ce:	1f 91       	pop	r17
    14d0:	0f 91       	pop	r16
    14d2:	ff 90       	pop	r15
    14d4:	ef 90       	pop	r14
    14d6:	df 90       	pop	r13
    14d8:	cf 90       	pop	r12
    14da:	bf 90       	pop	r11
    14dc:	af 90       	pop	r10
    14de:	08 95       	ret

000014e0 <_Z11menue_hauptv>:

void menue_haupt(){
    14e0:	cf 92       	push	r12
    14e2:	df 92       	push	r13
    14e4:	ef 92       	push	r14
    14e6:	ff 92       	push	r15
    14e8:	0f 93       	push	r16
    14ea:	1f 93       	push	r17
    14ec:	cf 93       	push	r28
    14ee:	df 93       	push	r29
    14f0:	cd b7       	in	r28, 0x3d	; 61
    14f2:	de b7       	in	r29, 0x3e	; 62
    14f4:	64 97       	sbiw	r28, 0x14	; 20
    14f6:	0f b6       	in	r0, 0x3f	; 63
    14f8:	f8 94       	cli
    14fa:	de bf       	out	0x3e, r29	; 62
    14fc:	0f be       	out	0x3f, r0	; 63
    14fe:	cd bf       	out	0x3d, r28	; 61
	char buffer[20];
	uint8_t buffersize=0;

	oled.clearFrame();
    1500:	84 ea       	ldi	r24, 0xA4	; 164
    1502:	92 e0       	ldi	r25, 0x02	; 2
    1504:	0e 94 b9 02 	call	0x572	; 0x572 <_ZN7Display10clearFrameEv>
	buffersize=sprintf(buffer,"1:Fahradanzeige");
    1508:	80 e1       	ldi	r24, 0x10	; 16
    150a:	e6 e3       	ldi	r30, 0x36	; 54
    150c:	f1 e0       	ldi	r31, 0x01	; 1
    150e:	8e 01       	movw	r16, r28
    1510:	0f 5f       	subi	r16, 0xFF	; 255
    1512:	1f 4f       	sbci	r17, 0xFF	; 255
    1514:	d8 01       	movw	r26, r16
    1516:	01 90       	ld	r0, Z+
    1518:	0d 92       	st	X+, r0
    151a:	8a 95       	dec	r24
    151c:	e1 f7       	brne	.-8      	; 0x1516 <_Z11menue_hauptv+0x36>
    151e:	e0 2e       	mov	r14, r16
    1520:	f1 2e       	mov	r15, r17
    1522:	68 01       	movw	r12, r16
    1524:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,0*charhighte);}
    1526:	f6 01       	movw	r30, r12
    1528:	61 91       	ld	r22, Z+
    152a:	6f 01       	movw	r12, r30
    152c:	20 e0       	ldi	r18, 0x00	; 0
    152e:	41 2f       	mov	r20, r17
    1530:	84 ea       	ldi	r24, 0xA4	; 164
    1532:	92 e0       	ldi	r25, 0x02	; 2
    1534:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    1538:	1a 5f       	subi	r17, 0xFA	; 250
    153a:	1a 35       	cpi	r17, 0x5A	; 90
    153c:	a1 f7       	brne	.-24     	; 0x1526 <_Z11menue_hauptv+0x46>
	buffersize=sprintf(buffer,"2:Taschenrechner");
    153e:	81 e1       	ldi	r24, 0x11	; 17
    1540:	e6 e4       	ldi	r30, 0x46	; 70
    1542:	f1 e0       	ldi	r31, 0x01	; 1
    1544:	de 01       	movw	r26, r28
    1546:	11 96       	adiw	r26, 0x01	; 1
    1548:	01 90       	ld	r0, Z+
    154a:	0d 92       	st	X+, r0
    154c:	8a 95       	dec	r24
    154e:	e1 f7       	brne	.-8      	; 0x1548 <_Z11menue_hauptv+0x68>
    1550:	ce 2c       	mov	r12, r14
    1552:	df 2c       	mov	r13, r15
    1554:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,1*charhighte);}
    1556:	f6 01       	movw	r30, r12
    1558:	61 91       	ld	r22, Z+
    155a:	6f 01       	movw	r12, r30
    155c:	28 e0       	ldi	r18, 0x08	; 8
    155e:	41 2f       	mov	r20, r17
    1560:	84 ea       	ldi	r24, 0xA4	; 164
    1562:	92 e0       	ldi	r25, 0x02	; 2
    1564:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    1568:	1a 5f       	subi	r17, 0xFA	; 250
    156a:	10 36       	cpi	r17, 0x60	; 96
    156c:	a1 f7       	brne	.-24     	; 0x1556 <_Z11menue_hauptv+0x76>
	buffersize=sprintf(buffer,"3:Kompass");
    156e:	8a e0       	ldi	r24, 0x0A	; 10
    1570:	e7 e5       	ldi	r30, 0x57	; 87
    1572:	f1 e0       	ldi	r31, 0x01	; 1
    1574:	de 01       	movw	r26, r28
    1576:	11 96       	adiw	r26, 0x01	; 1
    1578:	01 90       	ld	r0, Z+
    157a:	0d 92       	st	X+, r0
    157c:	8a 95       	dec	r24
    157e:	e1 f7       	brne	.-8      	; 0x1578 <_Z11menue_hauptv+0x98>
    1580:	ce 2c       	mov	r12, r14
    1582:	df 2c       	mov	r13, r15
    1584:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,2*charhighte);}
    1586:	f6 01       	movw	r30, r12
    1588:	61 91       	ld	r22, Z+
    158a:	6f 01       	movw	r12, r30
    158c:	20 e1       	ldi	r18, 0x10	; 16
    158e:	41 2f       	mov	r20, r17
    1590:	84 ea       	ldi	r24, 0xA4	; 164
    1592:	92 e0       	ldi	r25, 0x02	; 2
    1594:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    1598:	1a 5f       	subi	r17, 0xFA	; 250
    159a:	16 33       	cpi	r17, 0x36	; 54
    159c:	a1 f7       	brne	.-24     	; 0x1586 <_Z11menue_hauptv+0xa6>
	buffersize=sprintf(buffer,"4:Uhrmenue");
    159e:	8b e0       	ldi	r24, 0x0B	; 11
    15a0:	e1 e6       	ldi	r30, 0x61	; 97
    15a2:	f1 e0       	ldi	r31, 0x01	; 1
    15a4:	de 01       	movw	r26, r28
    15a6:	11 96       	adiw	r26, 0x01	; 1
    15a8:	01 90       	ld	r0, Z+
    15aa:	0d 92       	st	X+, r0
    15ac:	8a 95       	dec	r24
    15ae:	e1 f7       	brne	.-8      	; 0x15a8 <_Z11menue_hauptv+0xc8>
    15b0:	ce 2c       	mov	r12, r14
    15b2:	df 2c       	mov	r13, r15
    15b4:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,3*charhighte);}
    15b6:	f6 01       	movw	r30, r12
    15b8:	61 91       	ld	r22, Z+
    15ba:	6f 01       	movw	r12, r30
    15bc:	28 e1       	ldi	r18, 0x18	; 24
    15be:	41 2f       	mov	r20, r17
    15c0:	84 ea       	ldi	r24, 0xA4	; 164
    15c2:	92 e0       	ldi	r25, 0x02	; 2
    15c4:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    15c8:	1a 5f       	subi	r17, 0xFA	; 250
    15ca:	1c 33       	cpi	r17, 0x3C	; 60
    15cc:	a1 f7       	brne	.-24     	; 0x15b6 <_Z11menue_hauptv+0xd6>
	buffersize=sprintf(buffer,"5:Einstellungen");
    15ce:	80 e1       	ldi	r24, 0x10	; 16
    15d0:	ec e6       	ldi	r30, 0x6C	; 108
    15d2:	f1 e0       	ldi	r31, 0x01	; 1
    15d4:	de 01       	movw	r26, r28
    15d6:	11 96       	adiw	r26, 0x01	; 1
    15d8:	01 90       	ld	r0, Z+
    15da:	0d 92       	st	X+, r0
    15dc:	8a 95       	dec	r24
    15de:	e1 f7       	brne	.-8      	; 0x15d8 <_Z11menue_hauptv+0xf8>
    15e0:	ce 2c       	mov	r12, r14
    15e2:	df 2c       	mov	r13, r15
    15e4:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,4*charhighte);}
    15e6:	f6 01       	movw	r30, r12
    15e8:	61 91       	ld	r22, Z+
    15ea:	6f 01       	movw	r12, r30
    15ec:	20 e2       	ldi	r18, 0x20	; 32
    15ee:	41 2f       	mov	r20, r17
    15f0:	84 ea       	ldi	r24, 0xA4	; 164
    15f2:	92 e0       	ldi	r25, 0x02	; 2
    15f4:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    15f8:	1a 5f       	subi	r17, 0xFA	; 250
    15fa:	1a 35       	cpi	r17, 0x5A	; 90
    15fc:	a1 f7       	brne	.-24     	; 0x15e6 <_Z11menue_hauptv+0x106>
	buffersize=sprintf(buffer,"6:Display aus");
    15fe:	8e e0       	ldi	r24, 0x0E	; 14
    1600:	ec e7       	ldi	r30, 0x7C	; 124
    1602:	f1 e0       	ldi	r31, 0x01	; 1
    1604:	de 01       	movw	r26, r28
    1606:	11 96       	adiw	r26, 0x01	; 1
    1608:	01 90       	ld	r0, Z+
    160a:	0d 92       	st	X+, r0
    160c:	8a 95       	dec	r24
    160e:	e1 f7       	brne	.-8      	; 0x1608 <_Z11menue_hauptv+0x128>
    1610:	ce 2c       	mov	r12, r14
    1612:	df 2c       	mov	r13, r15
    1614:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,5*charhighte);}
    1616:	f6 01       	movw	r30, r12
    1618:	61 91       	ld	r22, Z+
    161a:	6f 01       	movw	r12, r30
    161c:	28 e2       	ldi	r18, 0x28	; 40
    161e:	41 2f       	mov	r20, r17
    1620:	84 ea       	ldi	r24, 0xA4	; 164
    1622:	92 e0       	ldi	r25, 0x02	; 2
    1624:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    1628:	1a 5f       	subi	r17, 0xFA	; 250
    162a:	1e 34       	cpi	r17, 0x4E	; 78
    162c:	a1 f7       	brne	.-24     	; 0x1616 <_Z11menue_hauptv+0x136>
	//buffersize=sprintf(buffer,"7:Uhr einstellen");
	//for(uint8_t i=0;i<buffersize;i++){draw_ASCI(oled.buffer[i],i*charsize,6*charhighte);}
}
    162e:	64 96       	adiw	r28, 0x14	; 20
    1630:	0f b6       	in	r0, 0x3f	; 63
    1632:	f8 94       	cli
    1634:	de bf       	out	0x3e, r29	; 62
    1636:	0f be       	out	0x3f, r0	; 63
    1638:	cd bf       	out	0x3d, r28	; 61
    163a:	df 91       	pop	r29
    163c:	cf 91       	pop	r28
    163e:	1f 91       	pop	r17
    1640:	0f 91       	pop	r16
    1642:	ff 90       	pop	r15
    1644:	ef 90       	pop	r14
    1646:	df 90       	pop	r13
    1648:	cf 90       	pop	r12
    164a:	08 95       	ret

0000164c <_Z11menue_einstv>:
void menue_einst(){
    164c:	af 92       	push	r10
    164e:	bf 92       	push	r11
    1650:	df 92       	push	r13
    1652:	ef 92       	push	r14
    1654:	0f 93       	push	r16
    1656:	1f 93       	push	r17
    1658:	cf 93       	push	r28
    165a:	df 93       	push	r29
    165c:	cd b7       	in	r28, 0x3d	; 61
    165e:	de b7       	in	r29, 0x3e	; 62
    1660:	64 97       	sbiw	r28, 0x14	; 20
    1662:	0f b6       	in	r0, 0x3f	; 63
    1664:	f8 94       	cli
    1666:	de bf       	out	0x3e, r29	; 62
    1668:	0f be       	out	0x3f, r0	; 63
    166a:	cd bf       	out	0x3d, r28	; 61
	char buffer[20];
	uint8_t buffersize=0;

	oled.clearFrame();
    166c:	84 ea       	ldi	r24, 0xA4	; 164
    166e:	92 e0       	ldi	r25, 0x02	; 2
    1670:	0e 94 b9 02 	call	0x572	; 0x572 <_ZN7Display10clearFrameEv>
	buffersize=sprintf(buffer,"1:Kompass kalib.");
    1674:	81 e1       	ldi	r24, 0x11	; 17
    1676:	ea e8       	ldi	r30, 0x8A	; 138
    1678:	f1 e0       	ldi	r31, 0x01	; 1
    167a:	8e 01       	movw	r16, r28
    167c:	0f 5f       	subi	r16, 0xFF	; 255
    167e:	1f 4f       	sbci	r17, 0xFF	; 255
    1680:	d8 01       	movw	r26, r16
    1682:	01 90       	ld	r0, Z+
    1684:	0d 92       	st	X+, r0
    1686:	8a 95       	dec	r24
    1688:	e1 f7       	brne	.-8      	; 0x1682 <_Z11menue_einstv+0x36>
    168a:	d0 2e       	mov	r13, r16
    168c:	e1 2e       	mov	r14, r17
    168e:	58 01       	movw	r10, r16
    1690:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,0*charhighte);}
    1692:	f5 01       	movw	r30, r10
    1694:	61 91       	ld	r22, Z+
    1696:	5f 01       	movw	r10, r30
    1698:	20 e0       	ldi	r18, 0x00	; 0
    169a:	41 2f       	mov	r20, r17
    169c:	84 ea       	ldi	r24, 0xA4	; 164
    169e:	92 e0       	ldi	r25, 0x02	; 2
    16a0:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    16a4:	1a 5f       	subi	r17, 0xFA	; 250
    16a6:	10 36       	cpi	r17, 0x60	; 96
    16a8:	a1 f7       	brne	.-24     	; 0x1692 <_Z11menue_einstv+0x46>
	buffersize=sprintf(buffer,"2:Kompassverstaerkung");
    16aa:	86 e1       	ldi	r24, 0x16	; 22
    16ac:	eb e9       	ldi	r30, 0x9B	; 155
    16ae:	f1 e0       	ldi	r31, 0x01	; 1
    16b0:	de 01       	movw	r26, r28
    16b2:	11 96       	adiw	r26, 0x01	; 1
    16b4:	01 90       	ld	r0, Z+
    16b6:	0d 92       	st	X+, r0
    16b8:	8a 95       	dec	r24
    16ba:	e1 f7       	brne	.-8      	; 0x16b4 <_Z11menue_einstv+0x68>
    16bc:	ad 2c       	mov	r10, r13
    16be:	be 2c       	mov	r11, r14
    16c0:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,1*charhighte);}
    16c2:	f5 01       	movw	r30, r10
    16c4:	61 91       	ld	r22, Z+
    16c6:	5f 01       	movw	r10, r30
    16c8:	28 e0       	ldi	r18, 0x08	; 8
    16ca:	41 2f       	mov	r20, r17
    16cc:	84 ea       	ldi	r24, 0xA4	; 164
    16ce:	92 e0       	ldi	r25, 0x02	; 2
    16d0:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    16d4:	1a 5f       	subi	r17, 0xFA	; 250
    16d6:	1e 37       	cpi	r17, 0x7E	; 126
    16d8:	a1 f7       	brne	.-24     	; 0x16c2 <_Z11menue_einstv+0x76>
	buffersize=sprintf(buffer,"3:Uhr einstellen");
    16da:	81 e1       	ldi	r24, 0x11	; 17
    16dc:	e1 eb       	ldi	r30, 0xB1	; 177
    16de:	f1 e0       	ldi	r31, 0x01	; 1
    16e0:	de 01       	movw	r26, r28
    16e2:	11 96       	adiw	r26, 0x01	; 1
    16e4:	01 90       	ld	r0, Z+
    16e6:	0d 92       	st	X+, r0
    16e8:	8a 95       	dec	r24
    16ea:	e1 f7       	brne	.-8      	; 0x16e4 <_Z11menue_einstv+0x98>
    16ec:	ad 2c       	mov	r10, r13
    16ee:	be 2c       	mov	r11, r14
    16f0:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,2*charhighte);}
    16f2:	f5 01       	movw	r30, r10
    16f4:	61 91       	ld	r22, Z+
    16f6:	5f 01       	movw	r10, r30
    16f8:	20 e1       	ldi	r18, 0x10	; 16
    16fa:	41 2f       	mov	r20, r17
    16fc:	84 ea       	ldi	r24, 0xA4	; 164
    16fe:	92 e0       	ldi	r25, 0x02	; 2
    1700:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    1704:	1a 5f       	subi	r17, 0xFA	; 250
    1706:	10 36       	cpi	r17, 0x60	; 96
    1708:	a1 f7       	brne	.-24     	; 0x16f2 <_Z11menue_einstv+0xa6>
	//for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,4*charhighte);}
	//buffersize=sprintf(buffer,"6:HMC5883L Gain");
	//for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,5*charhighte);}
	//buffersize=sprintf(buffer,"7:Uhr einstellen");
	//for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,6*charhighte);}
}
    170a:	64 96       	adiw	r28, 0x14	; 20
    170c:	0f b6       	in	r0, 0x3f	; 63
    170e:	f8 94       	cli
    1710:	de bf       	out	0x3e, r29	; 62
    1712:	0f be       	out	0x3f, r0	; 63
    1714:	cd bf       	out	0x3d, r28	; 61
    1716:	df 91       	pop	r29
    1718:	cf 91       	pop	r28
    171a:	1f 91       	pop	r17
    171c:	0f 91       	pop	r16
    171e:	ef 90       	pop	r14
    1720:	df 90       	pop	r13
    1722:	bf 90       	pop	r11
    1724:	af 90       	pop	r10
    1726:	08 95       	ret

00001728 <_Z9menue_uhrv>:
void menue_uhr(){
    1728:	af 92       	push	r10
    172a:	bf 92       	push	r11
    172c:	df 92       	push	r13
    172e:	ef 92       	push	r14
    1730:	0f 93       	push	r16
    1732:	1f 93       	push	r17
    1734:	cf 93       	push	r28
    1736:	df 93       	push	r29
    1738:	cd b7       	in	r28, 0x3d	; 61
    173a:	de b7       	in	r29, 0x3e	; 62
    173c:	64 97       	sbiw	r28, 0x14	; 20
    173e:	0f b6       	in	r0, 0x3f	; 63
    1740:	f8 94       	cli
    1742:	de bf       	out	0x3e, r29	; 62
    1744:	0f be       	out	0x3f, r0	; 63
    1746:	cd bf       	out	0x3d, r28	; 61
	char buffer[20];
	uint8_t buffersize=0;

	oled.clearFrame();
    1748:	84 ea       	ldi	r24, 0xA4	; 164
    174a:	92 e0       	ldi	r25, 0x02	; 2
    174c:	0e 94 b9 02 	call	0x572	; 0x572 <_ZN7Display10clearFrameEv>
	buffersize=sprintf(buffer,"1:Uhr");
    1750:	86 e0       	ldi	r24, 0x06	; 6
    1752:	e2 ec       	ldi	r30, 0xC2	; 194
    1754:	f1 e0       	ldi	r31, 0x01	; 1
    1756:	8e 01       	movw	r16, r28
    1758:	0f 5f       	subi	r16, 0xFF	; 255
    175a:	1f 4f       	sbci	r17, 0xFF	; 255
    175c:	d8 01       	movw	r26, r16
    175e:	01 90       	ld	r0, Z+
    1760:	0d 92       	st	X+, r0
    1762:	8a 95       	dec	r24
    1764:	e1 f7       	brne	.-8      	; 0x175e <_Z9menue_uhrv+0x36>
    1766:	d0 2e       	mov	r13, r16
    1768:	e1 2e       	mov	r14, r17
    176a:	58 01       	movw	r10, r16
    176c:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,0*charhighte);}
    176e:	f5 01       	movw	r30, r10
    1770:	61 91       	ld	r22, Z+
    1772:	5f 01       	movw	r10, r30
    1774:	20 e0       	ldi	r18, 0x00	; 0
    1776:	41 2f       	mov	r20, r17
    1778:	84 ea       	ldi	r24, 0xA4	; 164
    177a:	92 e0       	ldi	r25, 0x02	; 2
    177c:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    1780:	1a 5f       	subi	r17, 0xFA	; 250
    1782:	1e 31       	cpi	r17, 0x1E	; 30
    1784:	a1 f7       	brne	.-24     	; 0x176e <_Z9menue_uhrv+0x46>
	buffersize=sprintf(buffer,"2:Stoppuhr");
    1786:	8b e0       	ldi	r24, 0x0B	; 11
    1788:	e8 ec       	ldi	r30, 0xC8	; 200
    178a:	f1 e0       	ldi	r31, 0x01	; 1
    178c:	de 01       	movw	r26, r28
    178e:	11 96       	adiw	r26, 0x01	; 1
    1790:	01 90       	ld	r0, Z+
    1792:	0d 92       	st	X+, r0
    1794:	8a 95       	dec	r24
    1796:	e1 f7       	brne	.-8      	; 0x1790 <_Z9menue_uhrv+0x68>
    1798:	ad 2c       	mov	r10, r13
    179a:	be 2c       	mov	r11, r14
    179c:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,1*charhighte);}
    179e:	f5 01       	movw	r30, r10
    17a0:	61 91       	ld	r22, Z+
    17a2:	5f 01       	movw	r10, r30
    17a4:	28 e0       	ldi	r18, 0x08	; 8
    17a6:	41 2f       	mov	r20, r17
    17a8:	84 ea       	ldi	r24, 0xA4	; 164
    17aa:	92 e0       	ldi	r25, 0x02	; 2
    17ac:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    17b0:	1a 5f       	subi	r17, 0xFA	; 250
    17b2:	1c 33       	cpi	r17, 0x3C	; 60
    17b4:	a1 f7       	brne	.-24     	; 0x179e <_Z9menue_uhrv+0x76>
	buffersize=sprintf(buffer,"3:Timer");
    17b6:	88 e0       	ldi	r24, 0x08	; 8
    17b8:	e3 ed       	ldi	r30, 0xD3	; 211
    17ba:	f1 e0       	ldi	r31, 0x01	; 1
    17bc:	de 01       	movw	r26, r28
    17be:	11 96       	adiw	r26, 0x01	; 1
    17c0:	01 90       	ld	r0, Z+
    17c2:	0d 92       	st	X+, r0
    17c4:	8a 95       	dec	r24
    17c6:	e1 f7       	brne	.-8      	; 0x17c0 <_Z9menue_uhrv+0x98>
    17c8:	ad 2c       	mov	r10, r13
    17ca:	be 2c       	mov	r11, r14
    17cc:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,2*charhighte);}
    17ce:	f5 01       	movw	r30, r10
    17d0:	61 91       	ld	r22, Z+
    17d2:	5f 01       	movw	r10, r30
    17d4:	20 e1       	ldi	r18, 0x10	; 16
    17d6:	41 2f       	mov	r20, r17
    17d8:	84 ea       	ldi	r24, 0xA4	; 164
    17da:	92 e0       	ldi	r25, 0x02	; 2
    17dc:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    17e0:	1a 5f       	subi	r17, 0xFA	; 250
    17e2:	1a 32       	cpi	r17, 0x2A	; 42
    17e4:	a1 f7       	brne	.-24     	; 0x17ce <_Z9menue_uhrv+0xa6>
	buffersize=sprintf(buffer,"4:Alarm");
    17e6:	88 e0       	ldi	r24, 0x08	; 8
    17e8:	eb ed       	ldi	r30, 0xDB	; 219
    17ea:	f1 e0       	ldi	r31, 0x01	; 1
    17ec:	de 01       	movw	r26, r28
    17ee:	11 96       	adiw	r26, 0x01	; 1
    17f0:	01 90       	ld	r0, Z+
    17f2:	0d 92       	st	X+, r0
    17f4:	8a 95       	dec	r24
    17f6:	e1 f7       	brne	.-8      	; 0x17f0 <_Z9menue_uhrv+0xc8>
    17f8:	ad 2c       	mov	r10, r13
    17fa:	be 2c       	mov	r11, r14
    17fc:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,3*charhighte);}
    17fe:	f5 01       	movw	r30, r10
    1800:	61 91       	ld	r22, Z+
    1802:	5f 01       	movw	r10, r30
    1804:	28 e1       	ldi	r18, 0x18	; 24
    1806:	41 2f       	mov	r20, r17
    1808:	84 ea       	ldi	r24, 0xA4	; 164
    180a:	92 e0       	ldi	r25, 0x02	; 2
    180c:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    1810:	1a 5f       	subi	r17, 0xFA	; 250
    1812:	1a 32       	cpi	r17, 0x2A	; 42
    1814:	a1 f7       	brne	.-24     	; 0x17fe <_Z9menue_uhrv+0xd6>
	//for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,4*charhighte);}
	//buffersize=sprintf(buffer,"6:HMC5883L Gain");
	//for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,5*charhighte);}
	//buffersize=sprintf(buffer,"7:Uhr einstellen");
	//for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,6*charhighte);}
}
    1816:	64 96       	adiw	r28, 0x14	; 20
    1818:	0f b6       	in	r0, 0x3f	; 63
    181a:	f8 94       	cli
    181c:	de bf       	out	0x3e, r29	; 62
    181e:	0f be       	out	0x3f, r0	; 63
    1820:	cd bf       	out	0x3d, r28	; 61
    1822:	df 91       	pop	r29
    1824:	cf 91       	pop	r28
    1826:	1f 91       	pop	r17
    1828:	0f 91       	pop	r16
    182a:	ef 90       	pop	r14
    182c:	df 90       	pop	r13
    182e:	bf 90       	pop	r11
    1830:	af 90       	pop	r10
    1832:	08 95       	ret

00001834 <_Z11uhranzeigenv>:

void uhranzeigen(){
    1834:	df 92       	push	r13
    1836:	ef 92       	push	r14
    1838:	ff 92       	push	r15
    183a:	0f 93       	push	r16
    183c:	1f 93       	push	r17
    183e:	cf 93       	push	r28
    1840:	df 93       	push	r29
    1842:	cd b7       	in	r28, 0x3d	; 61
    1844:	de b7       	in	r29, 0x3e	; 62
    1846:	64 97       	sbiw	r28, 0x14	; 20
    1848:	0f b6       	in	r0, 0x3f	; 63
    184a:	f8 94       	cli
    184c:	de bf       	out	0x3e, r29	; 62
    184e:	0f be       	out	0x3f, r0	; 63
    1850:	cd bf       	out	0x3d, r28	; 61
	uint8_t buffersize;
	char Buffer[20];
	oled.clearFrame();
    1852:	84 ea       	ldi	r24, 0xA4	; 164
    1854:	92 e0       	ldi	r25, 0x02	; 2
    1856:	0e 94 b9 02 	call	0x572	; 0x572 <_ZN7Display10clearFrameEv>
	oled.analog(rtc.Stunden,rtc.Minuten,rtc.Sekunden);
    185a:	20 91 e7 06 	lds	r18, 0x06E7
    185e:	40 91 e6 06 	lds	r20, 0x06E6
    1862:	60 91 e5 06 	lds	r22, 0x06E5
    1866:	84 ea       	ldi	r24, 0xA4	; 164
    1868:	92 e0       	ldi	r25, 0x02	; 2
    186a:	0e 94 68 06 	call	0xcd0	; 0xcd0 <_ZN7Display6analogEhhh>
    186e:	0f 2e       	mov	r0, r31
    1870:	f5 ed       	ldi	r31, 0xD5	; 213
    1872:	ef 2e       	mov	r14, r31
    1874:	f6 e0       	ldi	r31, 0x06	; 6
    1876:	ff 2e       	mov	r15, r31
    1878:	f0 2d       	mov	r31, r0
    187a:	11 e4       	ldi	r17, 0x41	; 65
	for(uint8_t i=0;i<bitsderrtc;i++){oled.draw_ASCI(rtc.msg_uhr[i],65+i*charsize,0*charhighte);}
    187c:	f7 01       	movw	r30, r14
    187e:	61 91       	ld	r22, Z+
    1880:	7f 01       	movw	r14, r30
    1882:	20 e0       	ldi	r18, 0x00	; 0
    1884:	41 2f       	mov	r20, r17
    1886:	84 ea       	ldi	r24, 0xA4	; 164
    1888:	92 e0       	ldi	r25, 0x02	; 2
    188a:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    188e:	1a 5f       	subi	r17, 0xFA	; 250
    1890:	11 37       	cpi	r17, 0x71	; 113
    1892:	a1 f7       	brne	.-24     	; 0x187c <_Z11uhranzeigenv+0x48>
    1894:	0f 2e       	mov	r0, r31
    1896:	fd ed       	ldi	r31, 0xDD	; 221
    1898:	ef 2e       	mov	r14, r31
    189a:	f6 e0       	ldi	r31, 0x06	; 6
    189c:	ff 2e       	mov	r15, r31
    189e:	f0 2d       	mov	r31, r0
    18a0:	11 e4       	ldi	r17, 0x41	; 65
	for(uint8_t i=0;i<bitsderrtc;i++){oled.draw_ASCI(rtc.msg_dat[i],65+i*charsize,7*charhighte);}
    18a2:	f7 01       	movw	r30, r14
    18a4:	61 91       	ld	r22, Z+
    18a6:	7f 01       	movw	r14, r30
    18a8:	28 e3       	ldi	r18, 0x38	; 56
    18aa:	41 2f       	mov	r20, r17
    18ac:	84 ea       	ldi	r24, 0xA4	; 164
    18ae:	92 e0       	ldi	r25, 0x02	; 2
    18b0:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    18b4:	1a 5f       	subi	r17, 0xFA	; 250
    18b6:	11 37       	cpi	r17, 0x71	; 113
    18b8:	a1 f7       	brne	.-24     	; 0x18a2 <_Z11uhranzeigenv+0x6e>
	buffersize=sprintf(Buffer,"%i%%",Batteriestatus());
    18ba:	0e 94 19 08 	call	0x1032	; 0x1032 <_Z14Batteriestatusv>
    18be:	28 2f       	mov	r18, r24
    18c0:	33 27       	eor	r19, r19
    18c2:	27 fd       	sbrc	r18, 7
    18c4:	30 95       	com	r19
    18c6:	3f 93       	push	r19
    18c8:	8f 93       	push	r24
    18ca:	81 e3       	ldi	r24, 0x31	; 49
    18cc:	91 e0       	ldi	r25, 0x01	; 1
    18ce:	9f 93       	push	r25
    18d0:	8f 93       	push	r24
    18d2:	ce 01       	movw	r24, r28
    18d4:	01 96       	adiw	r24, 0x01	; 1
    18d6:	9f 93       	push	r25
    18d8:	8f 93       	push	r24
    18da:	0e 94 42 24 	call	0x4884	; 0x4884 <sprintf>
	for(uint8_t i=0;i<buffersize;i++){
    18de:	0f 90       	pop	r0
    18e0:	0f 90       	pop	r0
    18e2:	0f 90       	pop	r0
    18e4:	0f 90       	pop	r0
    18e6:	0f 90       	pop	r0
    18e8:	0f 90       	pop	r0
    18ea:	88 23       	and	r24, r24
    18ec:	49 f1       	breq	.+82     	; 0x1940 <_Z11uhranzeigenv+0x10c>
    18ee:	8e 01       	movw	r16, r28
    18f0:	0f 5f       	subi	r16, 0xFF	; 255
    18f2:	1f 4f       	sbci	r17, 0xFF	; 255
    18f4:	81 50       	subi	r24, 0x01	; 1
    18f6:	68 94       	set
    18f8:	ee 24       	eor	r14, r14
    18fa:	e1 f8       	bld	r14, 1
    18fc:	f1 2c       	mov	r15, r1
    18fe:	ec 0e       	add	r14, r28
    1900:	fd 1e       	adc	r15, r29
    1902:	e8 0e       	add	r14, r24
    1904:	f1 1c       	adc	r15, r1
    1906:	0f 2e       	mov	r0, r31
    1908:	f9 e4       	ldi	r31, 0x49	; 73
    190a:	df 2e       	mov	r13, r31
    190c:	f0 2d       	mov	r31, r0
		if (Buffer[i]=='%')
    190e:	f8 01       	movw	r30, r16
    1910:	61 91       	ld	r22, Z+
    1912:	8f 01       	movw	r16, r30
    1914:	65 32       	cpi	r22, 0x25	; 37
    1916:	39 f4       	brne	.+14     	; 0x1926 <_Z11uhranzeigenv+0xf2>
		{
			oled.draw_ASCI(Buffer[i],73+i*numbersmalsize,3.5*charhighte);
    1918:	2c e1       	ldi	r18, 0x1C	; 28
    191a:	4d 2d       	mov	r20, r13
    191c:	84 ea       	ldi	r24, 0xA4	; 164
    191e:	92 e0       	ldi	r25, 0x02	; 2
    1920:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    1924:	08 c0       	rjmp	.+16     	; 0x1936 <_Z11uhranzeigenv+0x102>
		}
		else{
			oled.draw_number16x16(Buffer[i]-'0',70+i*numbersmalsize,3*charhighte);
    1926:	60 53       	subi	r22, 0x30	; 48
    1928:	28 e1       	ldi	r18, 0x18	; 24
    192a:	4d ef       	ldi	r20, 0xFD	; 253
    192c:	4d 0d       	add	r20, r13
    192e:	84 ea       	ldi	r24, 0xA4	; 164
    1930:	92 e0       	ldi	r25, 0x02	; 2
    1932:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <_ZN7Display16draw_number16x16Ehhh>
    1936:	f0 e1       	ldi	r31, 0x10	; 16
    1938:	df 0e       	add	r13, r31
	oled.clearFrame();
	oled.analog(rtc.Stunden,rtc.Minuten,rtc.Sekunden);
	for(uint8_t i=0;i<bitsderrtc;i++){oled.draw_ASCI(rtc.msg_uhr[i],65+i*charsize,0*charhighte);}
	for(uint8_t i=0;i<bitsderrtc;i++){oled.draw_ASCI(rtc.msg_dat[i],65+i*charsize,7*charhighte);}
	buffersize=sprintf(Buffer,"%i%%",Batteriestatus());
	for(uint8_t i=0;i<buffersize;i++){
    193a:	0e 15       	cp	r16, r14
    193c:	1f 05       	cpc	r17, r15
    193e:	39 f7       	brne	.-50     	; 0x190e <_Z11uhranzeigenv+0xda>
			oled.draw_number16x16(Buffer[i]-'0',70+i*numbersmalsize,3*charhighte);
		}
	}
	//buffersize=sprintf(Buffer,"%.3fV",batterie);
	//for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(Buffer[i],65+i*charsize,3*charhighte);}
}
    1940:	64 96       	adiw	r28, 0x14	; 20
    1942:	0f b6       	in	r0, 0x3f	; 63
    1944:	f8 94       	cli
    1946:	de bf       	out	0x3e, r29	; 62
    1948:	0f be       	out	0x3f, r0	; 63
    194a:	cd bf       	out	0x3d, r28	; 61
    194c:	df 91       	pop	r29
    194e:	cf 91       	pop	r28
    1950:	1f 91       	pop	r17
    1952:	0f 91       	pop	r16
    1954:	ff 90       	pop	r15
    1956:	ef 90       	pop	r14
    1958:	df 90       	pop	r13
    195a:	08 95       	ret

0000195c <_Z12fahradschirmdd>:

void fahradschirm(double winkelgeschw, double angle){
    195c:	8f 92       	push	r8
    195e:	9f 92       	push	r9
    1960:	af 92       	push	r10
    1962:	bf 92       	push	r11
    1964:	cf 92       	push	r12
    1966:	df 92       	push	r13
    1968:	ef 92       	push	r14
    196a:	ff 92       	push	r15
    196c:	0f 93       	push	r16
    196e:	1f 93       	push	r17
    1970:	cf 93       	push	r28
    1972:	df 93       	push	r29
    1974:	cd b7       	in	r28, 0x3d	; 61
    1976:	de b7       	in	r29, 0x3e	; 62
    1978:	2a 97       	sbiw	r28, 0x0a	; 10
    197a:	0f b6       	in	r0, 0x3f	; 63
    197c:	f8 94       	cli
    197e:	de bf       	out	0x3e, r29	; 62
    1980:	0f be       	out	0x3f, r0	; 63
    1982:	cd bf       	out	0x3d, r28	; 61
    1984:	16 2f       	mov	r17, r22
    1986:	07 2f       	mov	r16, r23
    1988:	f8 2e       	mov	r15, r24
    198a:	e9 2e       	mov	r14, r25
    198c:	a2 2e       	mov	r10, r18
    198e:	b3 2e       	mov	r11, r19
    1990:	c4 2e       	mov	r12, r20
    1992:	d5 2e       	mov	r13, r21
	char buffer[10];
	uint8_t buffersize=0;
	oled.clearFrame();
    1994:	84 ea       	ldi	r24, 0xA4	; 164
    1996:	92 e0       	ldi	r25, 0x02	; 2
    1998:	0e 94 b9 02 	call	0x572	; 0x572 <_ZN7Display10clearFrameEv>
	header(0);
    199c:	80 e0       	ldi	r24, 0x00	; 0
    199e:	0e 94 f6 08 	call	0x11ec	; 0x11ec <_Z6headerh>
	bottom(0);
    19a2:	80 e0       	ldi	r24, 0x00	; 0
    19a4:	0e 94 60 09 	call	0x12c0	; 0x12c0 <_Z6bottomh>
	//Ausgabe der Geschwidigkeit
	buffersize=sprintf(buffer,"%3.1f",winkelgeschw);
    19a8:	ef 92       	push	r14
    19aa:	ff 92       	push	r15
    19ac:	0f 93       	push	r16
    19ae:	1f 93       	push	r17
    19b0:	83 ee       	ldi	r24, 0xE3	; 227
    19b2:	91 e0       	ldi	r25, 0x01	; 1
    19b4:	9f 93       	push	r25
    19b6:	8f 93       	push	r24
    19b8:	ce 01       	movw	r24, r28
    19ba:	01 96       	adiw	r24, 0x01	; 1
    19bc:	9f 93       	push	r25
    19be:	8f 93       	push	r24
    19c0:	0e 94 42 24 	call	0x4884	; 0x4884 <sprintf>
	for(uint8_t i=((SSD1306_WIDTH/numbersmalsize)-buffersize-1);i<((SSD1306_WIDTH/numbersmalsize)-1);i++){
    19c4:	27 e0       	ldi	r18, 0x07	; 7
    19c6:	f2 2e       	mov	r15, r18
    19c8:	f8 1a       	sub	r15, r24
    19ca:	0f b6       	in	r0, 0x3f	; 63
    19cc:	f8 94       	cli
    19ce:	de bf       	out	0x3e, r29	; 62
    19d0:	0f be       	out	0x3f, r0	; 63
    19d2:	cd bf       	out	0x3d, r28	; 61
    19d4:	36 e0       	ldi	r19, 0x06	; 6
    19d6:	3f 15       	cp	r19, r15
    19d8:	38 f1       	brcs	.+78     	; 0x1a28 <_Z12fahradschirmdd+0xcc>
    19da:	ef 2c       	mov	r14, r15
    19dc:	ee 0c       	add	r14, r14
    19de:	ee 0c       	add	r14, r14
    19e0:	ee 0c       	add	r14, r14
    19e2:	ee 0c       	add	r14, r14
		if(buffer[i-((SSD1306_WIDTH/numbersmalsize)-buffersize-1)]=='.'){
    19e4:	8c 01       	movw	r16, r24
    19e6:	11 27       	eor	r17, r17
    19e8:	e1 e0       	ldi	r30, 0x01	; 1
    19ea:	f0 e0       	ldi	r31, 0x00	; 0
    19ec:	ec 0f       	add	r30, r28
    19ee:	fd 1f       	adc	r31, r29
    19f0:	ef 0d       	add	r30, r15
    19f2:	f1 1d       	adc	r31, r1
    19f4:	e0 0f       	add	r30, r16
    19f6:	f1 1f       	adc	r31, r17
    19f8:	37 97       	sbiw	r30, 0x07	; 7
    19fa:	60 81       	ld	r22, Z
    19fc:	6e 32       	cpi	r22, 0x2E	; 46
    19fe:	39 f4       	brne	.+14     	; 0x1a0e <_Z12fahradschirmdd+0xb2>
			oled.draw_ASCI(buffer[i-((SSD1306_WIDTH/numbersmalsize)-buffersize-1)],i*numbersmalsize,4*charhighte);
    1a00:	20 e2       	ldi	r18, 0x20	; 32
    1a02:	4e 2d       	mov	r20, r14
    1a04:	84 ea       	ldi	r24, 0xA4	; 164
    1a06:	92 e0       	ldi	r25, 0x02	; 2
    1a08:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    1a0c:	07 c0       	rjmp	.+14     	; 0x1a1c <_Z12fahradschirmdd+0xc0>
		}
		else{
			oled.draw_number16x16(buffer[i-((SSD1306_WIDTH/numbersmalsize)-buffersize-1)]-'0',i*numbersmalsize,3*charhighte);
    1a0e:	60 53       	subi	r22, 0x30	; 48
    1a10:	28 e1       	ldi	r18, 0x18	; 24
    1a12:	4e 2d       	mov	r20, r14
    1a14:	84 ea       	ldi	r24, 0xA4	; 164
    1a16:	92 e0       	ldi	r25, 0x02	; 2
    1a18:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <_ZN7Display16draw_number16x16Ehhh>
	oled.clearFrame();
	header(0);
	bottom(0);
	//Ausgabe der Geschwidigkeit
	buffersize=sprintf(buffer,"%3.1f",winkelgeschw);
	for(uint8_t i=((SSD1306_WIDTH/numbersmalsize)-buffersize-1);i<((SSD1306_WIDTH/numbersmalsize)-1);i++){
    1a1c:	f3 94       	inc	r15
    1a1e:	80 e1       	ldi	r24, 0x10	; 16
    1a20:	e8 0e       	add	r14, r24
    1a22:	97 e0       	ldi	r25, 0x07	; 7
    1a24:	f9 12       	cpse	r15, r25
    1a26:	e0 cf       	rjmp	.-64     	; 0x19e8 <_Z12fahradschirmdd+0x8c>
		}
		else{
			oled.draw_number16x16(buffer[i-((SSD1306_WIDTH/numbersmalsize)-buffersize-1)]-'0',i*numbersmalsize,3*charhighte);
		}
	}
	oled.draw_ASCI('k',((SSD1306_WIDTH/charsize-2)*charsize),3*charhighte);
    1a28:	28 e1       	ldi	r18, 0x18	; 24
    1a2a:	42 e7       	ldi	r20, 0x72	; 114
    1a2c:	6b e6       	ldi	r22, 0x6B	; 107
    1a2e:	84 ea       	ldi	r24, 0xA4	; 164
    1a30:	92 e0       	ldi	r25, 0x02	; 2
    1a32:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
	oled.draw_ASCI('m',((SSD1306_WIDTH/charsize-1)*charsize),3*charhighte);
    1a36:	28 e1       	ldi	r18, 0x18	; 24
    1a38:	48 e7       	ldi	r20, 0x78	; 120
    1a3a:	6d e6       	ldi	r22, 0x6D	; 109
    1a3c:	84 ea       	ldi	r24, 0xA4	; 164
    1a3e:	92 e0       	ldi	r25, 0x02	; 2
    1a40:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
	oled.draw_ASCI('h',((SSD1306_WIDTH/charsize-2)*charsize),4*charhighte);
    1a44:	20 e2       	ldi	r18, 0x20	; 32
    1a46:	42 e7       	ldi	r20, 0x72	; 114
    1a48:	68 e6       	ldi	r22, 0x68	; 104
    1a4a:	84 ea       	ldi	r24, 0xA4	; 164
    1a4c:	92 e0       	ldi	r25, 0x02	; 2
    1a4e:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
	//winkelausgabe
	buffersize=sprintf(buffer,"%3.1f",angle);
    1a52:	df 92       	push	r13
    1a54:	cf 92       	push	r12
    1a56:	bf 92       	push	r11
    1a58:	af 92       	push	r10
    1a5a:	83 ee       	ldi	r24, 0xE3	; 227
    1a5c:	91 e0       	ldi	r25, 0x01	; 1
    1a5e:	9f 93       	push	r25
    1a60:	8f 93       	push	r24
    1a62:	ce 01       	movw	r24, r28
    1a64:	01 96       	adiw	r24, 0x01	; 1
    1a66:	9f 93       	push	r25
    1a68:	8f 93       	push	r24
    1a6a:	0e 94 42 24 	call	0x4884	; 0x4884 <sprintf>
    1a6e:	88 2e       	mov	r8, r24
	for (uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,7*charhighte);}
    1a70:	0f b6       	in	r0, 0x3f	; 63
    1a72:	f8 94       	cli
    1a74:	de bf       	out	0x3e, r29	; 62
    1a76:	0f be       	out	0x3f, r0	; 63
    1a78:	cd bf       	out	0x3d, r28	; 61
    1a7a:	88 23       	and	r24, r24
    1a7c:	a9 f0       	breq	.+42     	; 0x1aa8 <_Z12fahradschirmdd+0x14c>
    1a7e:	9e 01       	movw	r18, r28
    1a80:	2f 5f       	subi	r18, 0xFF	; 255
    1a82:	3f 4f       	sbci	r19, 0xFF	; 255
    1a84:	79 01       	movw	r14, r18
    1a86:	89 01       	movw	r16, r18
    1a88:	91 2c       	mov	r9, r1
    1a8a:	f8 01       	movw	r30, r16
    1a8c:	61 91       	ld	r22, Z+
    1a8e:	8f 01       	movw	r16, r30
    1a90:	28 e3       	ldi	r18, 0x38	; 56
    1a92:	49 2d       	mov	r20, r9
    1a94:	84 ea       	ldi	r24, 0xA4	; 164
    1a96:	92 e0       	ldi	r25, 0x02	; 2
    1a98:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    1a9c:	f6 e0       	ldi	r31, 0x06	; 6
    1a9e:	9f 0e       	add	r9, r31
    1aa0:	90 2f       	mov	r25, r16
    1aa2:	9e 19       	sub	r25, r14
    1aa4:	98 15       	cp	r25, r8
    1aa6:	88 f3       	brcs	.-30     	; 0x1a8a <_Z12fahradschirmdd+0x12e>
	anzeige_kleinenadel(31,31,angle);
    1aa8:	2a 2d       	mov	r18, r10
    1aaa:	3b 2d       	mov	r19, r11
    1aac:	4c 2d       	mov	r20, r12
    1aae:	5d 2d       	mov	r21, r13
    1ab0:	6f e1       	ldi	r22, 0x1F	; 31
    1ab2:	8f e1       	ldi	r24, 0x1F	; 31
    1ab4:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <_Z19anzeige_kleinenadelhhf>
}
    1ab8:	2a 96       	adiw	r28, 0x0a	; 10
    1aba:	0f b6       	in	r0, 0x3f	; 63
    1abc:	f8 94       	cli
    1abe:	de bf       	out	0x3e, r29	; 62
    1ac0:	0f be       	out	0x3f, r0	; 63
    1ac2:	cd bf       	out	0x3d, r28	; 61
    1ac4:	df 91       	pop	r29
    1ac6:	cf 91       	pop	r28
    1ac8:	1f 91       	pop	r17
    1aca:	0f 91       	pop	r16
    1acc:	ff 90       	pop	r15
    1ace:	ef 90       	pop	r14
    1ad0:	df 90       	pop	r13
    1ad2:	cf 90       	pop	r12
    1ad4:	bf 90       	pop	r11
    1ad6:	af 90       	pop	r10
    1ad8:	9f 90       	pop	r9
    1ada:	8f 90       	pop	r8
    1adc:	08 95       	ret

00001ade <_Z14Gaineinstellenv>:

void Gaineinstellen(){
    1ade:	cf 92       	push	r12
    1ae0:	df 92       	push	r13
    1ae2:	ef 92       	push	r14
    1ae4:	ff 92       	push	r15
    1ae6:	0f 93       	push	r16
    1ae8:	1f 93       	push	r17
    1aea:	cf 93       	push	r28
    1aec:	df 93       	push	r29
    1aee:	cd b7       	in	r28, 0x3d	; 61
    1af0:	de b7       	in	r29, 0x3e	; 62
    1af2:	64 97       	sbiw	r28, 0x14	; 20
    1af4:	0f b6       	in	r0, 0x3f	; 63
    1af6:	f8 94       	cli
    1af8:	de bf       	out	0x3e, r29	; 62
    1afa:	0f be       	out	0x3f, r0	; 63
    1afc:	cd bf       	out	0x3d, r28	; 61
	char buffer[20];
	uint8_t buffersize=0;

	oled.clearFrame();
    1afe:	84 ea       	ldi	r24, 0xA4	; 164
    1b00:	92 e0       	ldi	r25, 0x02	; 2
    1b02:	0e 94 b9 02 	call	0x572	; 0x572 <_ZN7Display10clearFrameEv>
	buffersize=sprintf(buffer,"1: 1370");
    1b06:	88 e0       	ldi	r24, 0x08	; 8
    1b08:	e9 ee       	ldi	r30, 0xE9	; 233
    1b0a:	f1 e0       	ldi	r31, 0x01	; 1
    1b0c:	8e 01       	movw	r16, r28
    1b0e:	0f 5f       	subi	r16, 0xFF	; 255
    1b10:	1f 4f       	sbci	r17, 0xFF	; 255
    1b12:	d8 01       	movw	r26, r16
    1b14:	01 90       	ld	r0, Z+
    1b16:	0d 92       	st	X+, r0
    1b18:	8a 95       	dec	r24
    1b1a:	e1 f7       	brne	.-8      	; 0x1b14 <_Z14Gaineinstellenv+0x36>
    1b1c:	e0 2e       	mov	r14, r16
    1b1e:	f1 2e       	mov	r15, r17
    1b20:	68 01       	movw	r12, r16
    1b22:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,0*charhighte);}
    1b24:	f6 01       	movw	r30, r12
    1b26:	61 91       	ld	r22, Z+
    1b28:	6f 01       	movw	r12, r30
    1b2a:	20 e0       	ldi	r18, 0x00	; 0
    1b2c:	41 2f       	mov	r20, r17
    1b2e:	84 ea       	ldi	r24, 0xA4	; 164
    1b30:	92 e0       	ldi	r25, 0x02	; 2
    1b32:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    1b36:	1a 5f       	subi	r17, 0xFA	; 250
    1b38:	1a 32       	cpi	r17, 0x2A	; 42
    1b3a:	a1 f7       	brne	.-24     	; 0x1b24 <_Z14Gaineinstellenv+0x46>
	buffersize=sprintf(buffer,"2: 1090");
    1b3c:	88 e0       	ldi	r24, 0x08	; 8
    1b3e:	e1 ef       	ldi	r30, 0xF1	; 241
    1b40:	f1 e0       	ldi	r31, 0x01	; 1
    1b42:	de 01       	movw	r26, r28
    1b44:	11 96       	adiw	r26, 0x01	; 1
    1b46:	01 90       	ld	r0, Z+
    1b48:	0d 92       	st	X+, r0
    1b4a:	8a 95       	dec	r24
    1b4c:	e1 f7       	brne	.-8      	; 0x1b46 <_Z14Gaineinstellenv+0x68>
    1b4e:	ce 2c       	mov	r12, r14
    1b50:	df 2c       	mov	r13, r15
    1b52:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,1*charhighte);}
    1b54:	f6 01       	movw	r30, r12
    1b56:	61 91       	ld	r22, Z+
    1b58:	6f 01       	movw	r12, r30
    1b5a:	28 e0       	ldi	r18, 0x08	; 8
    1b5c:	41 2f       	mov	r20, r17
    1b5e:	84 ea       	ldi	r24, 0xA4	; 164
    1b60:	92 e0       	ldi	r25, 0x02	; 2
    1b62:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    1b66:	1a 5f       	subi	r17, 0xFA	; 250
    1b68:	1a 32       	cpi	r17, 0x2A	; 42
    1b6a:	a1 f7       	brne	.-24     	; 0x1b54 <_Z14Gaineinstellenv+0x76>
	buffersize=sprintf(buffer,"3:  820");
    1b6c:	88 e0       	ldi	r24, 0x08	; 8
    1b6e:	e9 ef       	ldi	r30, 0xF9	; 249
    1b70:	f1 e0       	ldi	r31, 0x01	; 1
    1b72:	de 01       	movw	r26, r28
    1b74:	11 96       	adiw	r26, 0x01	; 1
    1b76:	01 90       	ld	r0, Z+
    1b78:	0d 92       	st	X+, r0
    1b7a:	8a 95       	dec	r24
    1b7c:	e1 f7       	brne	.-8      	; 0x1b76 <_Z14Gaineinstellenv+0x98>
    1b7e:	ce 2c       	mov	r12, r14
    1b80:	df 2c       	mov	r13, r15
    1b82:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,2*charhighte);}
    1b84:	f6 01       	movw	r30, r12
    1b86:	61 91       	ld	r22, Z+
    1b88:	6f 01       	movw	r12, r30
    1b8a:	20 e1       	ldi	r18, 0x10	; 16
    1b8c:	41 2f       	mov	r20, r17
    1b8e:	84 ea       	ldi	r24, 0xA4	; 164
    1b90:	92 e0       	ldi	r25, 0x02	; 2
    1b92:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    1b96:	1a 5f       	subi	r17, 0xFA	; 250
    1b98:	1a 32       	cpi	r17, 0x2A	; 42
    1b9a:	a1 f7       	brne	.-24     	; 0x1b84 <_Z14Gaineinstellenv+0xa6>
	buffersize=sprintf(buffer,"4:  660");
    1b9c:	88 e0       	ldi	r24, 0x08	; 8
    1b9e:	e1 e0       	ldi	r30, 0x01	; 1
    1ba0:	f2 e0       	ldi	r31, 0x02	; 2
    1ba2:	de 01       	movw	r26, r28
    1ba4:	11 96       	adiw	r26, 0x01	; 1
    1ba6:	01 90       	ld	r0, Z+
    1ba8:	0d 92       	st	X+, r0
    1baa:	8a 95       	dec	r24
    1bac:	e1 f7       	brne	.-8      	; 0x1ba6 <_Z14Gaineinstellenv+0xc8>
    1bae:	ce 2c       	mov	r12, r14
    1bb0:	df 2c       	mov	r13, r15
    1bb2:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,3*charhighte);}
    1bb4:	f6 01       	movw	r30, r12
    1bb6:	61 91       	ld	r22, Z+
    1bb8:	6f 01       	movw	r12, r30
    1bba:	28 e1       	ldi	r18, 0x18	; 24
    1bbc:	41 2f       	mov	r20, r17
    1bbe:	84 ea       	ldi	r24, 0xA4	; 164
    1bc0:	92 e0       	ldi	r25, 0x02	; 2
    1bc2:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    1bc6:	1a 5f       	subi	r17, 0xFA	; 250
    1bc8:	1a 32       	cpi	r17, 0x2A	; 42
    1bca:	a1 f7       	brne	.-24     	; 0x1bb4 <_Z14Gaineinstellenv+0xd6>
	buffersize=sprintf(buffer,"5:  440");
    1bcc:	88 e0       	ldi	r24, 0x08	; 8
    1bce:	e9 e0       	ldi	r30, 0x09	; 9
    1bd0:	f2 e0       	ldi	r31, 0x02	; 2
    1bd2:	de 01       	movw	r26, r28
    1bd4:	11 96       	adiw	r26, 0x01	; 1
    1bd6:	01 90       	ld	r0, Z+
    1bd8:	0d 92       	st	X+, r0
    1bda:	8a 95       	dec	r24
    1bdc:	e1 f7       	brne	.-8      	; 0x1bd6 <_Z14Gaineinstellenv+0xf8>
    1bde:	ce 2c       	mov	r12, r14
    1be0:	df 2c       	mov	r13, r15
    1be2:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,4*charhighte);}
    1be4:	f6 01       	movw	r30, r12
    1be6:	61 91       	ld	r22, Z+
    1be8:	6f 01       	movw	r12, r30
    1bea:	20 e2       	ldi	r18, 0x20	; 32
    1bec:	41 2f       	mov	r20, r17
    1bee:	84 ea       	ldi	r24, 0xA4	; 164
    1bf0:	92 e0       	ldi	r25, 0x02	; 2
    1bf2:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    1bf6:	1a 5f       	subi	r17, 0xFA	; 250
    1bf8:	1a 32       	cpi	r17, 0x2A	; 42
    1bfa:	a1 f7       	brne	.-24     	; 0x1be4 <_Z14Gaineinstellenv+0x106>
	buffersize=sprintf(buffer,"6:  390");
    1bfc:	88 e0       	ldi	r24, 0x08	; 8
    1bfe:	e1 e1       	ldi	r30, 0x11	; 17
    1c00:	f2 e0       	ldi	r31, 0x02	; 2
    1c02:	de 01       	movw	r26, r28
    1c04:	11 96       	adiw	r26, 0x01	; 1
    1c06:	01 90       	ld	r0, Z+
    1c08:	0d 92       	st	X+, r0
    1c0a:	8a 95       	dec	r24
    1c0c:	e1 f7       	brne	.-8      	; 0x1c06 <_Z14Gaineinstellenv+0x128>
    1c0e:	ce 2c       	mov	r12, r14
    1c10:	df 2c       	mov	r13, r15
    1c12:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,5*charhighte);}
    1c14:	f6 01       	movw	r30, r12
    1c16:	61 91       	ld	r22, Z+
    1c18:	6f 01       	movw	r12, r30
    1c1a:	28 e2       	ldi	r18, 0x28	; 40
    1c1c:	41 2f       	mov	r20, r17
    1c1e:	84 ea       	ldi	r24, 0xA4	; 164
    1c20:	92 e0       	ldi	r25, 0x02	; 2
    1c22:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    1c26:	1a 5f       	subi	r17, 0xFA	; 250
    1c28:	1a 32       	cpi	r17, 0x2A	; 42
    1c2a:	a1 f7       	brne	.-24     	; 0x1c14 <_Z14Gaineinstellenv+0x136>
	buffersize=sprintf(buffer,"7:  330");
    1c2c:	88 e0       	ldi	r24, 0x08	; 8
    1c2e:	e9 e1       	ldi	r30, 0x19	; 25
    1c30:	f2 e0       	ldi	r31, 0x02	; 2
    1c32:	de 01       	movw	r26, r28
    1c34:	11 96       	adiw	r26, 0x01	; 1
    1c36:	01 90       	ld	r0, Z+
    1c38:	0d 92       	st	X+, r0
    1c3a:	8a 95       	dec	r24
    1c3c:	e1 f7       	brne	.-8      	; 0x1c36 <_Z14Gaineinstellenv+0x158>
    1c3e:	ce 2c       	mov	r12, r14
    1c40:	df 2c       	mov	r13, r15
    1c42:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,6*charhighte);}
    1c44:	f6 01       	movw	r30, r12
    1c46:	61 91       	ld	r22, Z+
    1c48:	6f 01       	movw	r12, r30
    1c4a:	20 e3       	ldi	r18, 0x30	; 48
    1c4c:	41 2f       	mov	r20, r17
    1c4e:	84 ea       	ldi	r24, 0xA4	; 164
    1c50:	92 e0       	ldi	r25, 0x02	; 2
    1c52:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    1c56:	1a 5f       	subi	r17, 0xFA	; 250
    1c58:	1a 32       	cpi	r17, 0x2A	; 42
    1c5a:	a1 f7       	brne	.-24     	; 0x1c44 <_Z14Gaineinstellenv+0x166>
	buffersize=sprintf(buffer,"8:  230");
    1c5c:	88 e0       	ldi	r24, 0x08	; 8
    1c5e:	e1 e2       	ldi	r30, 0x21	; 33
    1c60:	f2 e0       	ldi	r31, 0x02	; 2
    1c62:	de 01       	movw	r26, r28
    1c64:	11 96       	adiw	r26, 0x01	; 1
    1c66:	01 90       	ld	r0, Z+
    1c68:	0d 92       	st	X+, r0
    1c6a:	8a 95       	dec	r24
    1c6c:	e1 f7       	brne	.-8      	; 0x1c66 <_Z14Gaineinstellenv+0x188>
    1c6e:	ce 2c       	mov	r12, r14
    1c70:	df 2c       	mov	r13, r15
    1c72:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,7*charhighte);}
    1c74:	f6 01       	movw	r30, r12
    1c76:	61 91       	ld	r22, Z+
    1c78:	6f 01       	movw	r12, r30
    1c7a:	28 e3       	ldi	r18, 0x38	; 56
    1c7c:	41 2f       	mov	r20, r17
    1c7e:	84 ea       	ldi	r24, 0xA4	; 164
    1c80:	92 e0       	ldi	r25, 0x02	; 2
    1c82:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    1c86:	1a 5f       	subi	r17, 0xFA	; 250
    1c88:	1a 32       	cpi	r17, 0x2A	; 42
    1c8a:	a1 f7       	brne	.-24     	; 0x1c74 <_Z14Gaineinstellenv+0x196>
}
    1c8c:	64 96       	adiw	r28, 0x14	; 20
    1c8e:	0f b6       	in	r0, 0x3f	; 63
    1c90:	f8 94       	cli
    1c92:	de bf       	out	0x3e, r29	; 62
    1c94:	0f be       	out	0x3f, r0	; 63
    1c96:	cd bf       	out	0x3d, r28	; 61
    1c98:	df 91       	pop	r29
    1c9a:	cf 91       	pop	r28
    1c9c:	1f 91       	pop	r17
    1c9e:	0f 91       	pop	r16
    1ca0:	ff 90       	pop	r15
    1ca2:	ef 90       	pop	r14
    1ca4:	df 90       	pop	r13
    1ca6:	cf 90       	pop	r12
    1ca8:	08 95       	ret

00001caa <_Z15anzeige_kompassd>:

void anzeige_kompass(double winkel){
    1caa:	9f 92       	push	r9
    1cac:	af 92       	push	r10
    1cae:	bf 92       	push	r11
    1cb0:	cf 92       	push	r12
    1cb2:	df 92       	push	r13
    1cb4:	ef 92       	push	r14
    1cb6:	ff 92       	push	r15
    1cb8:	0f 93       	push	r16
    1cba:	1f 93       	push	r17
    1cbc:	cf 93       	push	r28
    1cbe:	df 93       	push	r29
    1cc0:	cd b7       	in	r28, 0x3d	; 61
    1cc2:	de b7       	in	r29, 0x3e	; 62
    1cc4:	64 97       	sbiw	r28, 0x14	; 20
    1cc6:	0f b6       	in	r0, 0x3f	; 63
    1cc8:	f8 94       	cli
    1cca:	de bf       	out	0x3e, r29	; 62
    1ccc:	0f be       	out	0x3f, r0	; 63
    1cce:	cd bf       	out	0x3d, r28	; 61
    1cd0:	a6 2e       	mov	r10, r22
    1cd2:	b7 2e       	mov	r11, r23
    1cd4:	c8 2e       	mov	r12, r24
    1cd6:	d9 2e       	mov	r13, r25
	oled.clearFrame();
    1cd8:	84 ea       	ldi	r24, 0xA4	; 164
    1cda:	92 e0       	ldi	r25, 0x02	; 2
    1cdc:	0e 94 b9 02 	call	0x572	; 0x572 <_ZN7Display10clearFrameEv>
    1ce0:	0f 2e       	mov	r0, r31
    1ce2:	f5 ed       	ldi	r31, 0xD5	; 213
    1ce4:	ef 2e       	mov	r14, r31
    1ce6:	f6 e0       	ldi	r31, 0x06	; 6
    1ce8:	ff 2e       	mov	r15, r31
    1cea:	f0 2d       	mov	r31, r0
    1cec:	11 e4       	ldi	r17, 0x41	; 65
	char buffer[20];
	uint8_t buffersize=0;
	//Uhrzeit
	for(uint8_t i=0;i<bitsderrtc;i++){oled.draw_ASCI(rtc.msg_uhr[i],65+i*charsize,0*charhighte);}
    1cee:	f7 01       	movw	r30, r14
    1cf0:	61 91       	ld	r22, Z+
    1cf2:	7f 01       	movw	r14, r30
    1cf4:	20 e0       	ldi	r18, 0x00	; 0
    1cf6:	41 2f       	mov	r20, r17
    1cf8:	84 ea       	ldi	r24, 0xA4	; 164
    1cfa:	92 e0       	ldi	r25, 0x02	; 2
    1cfc:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    1d00:	1a 5f       	subi	r17, 0xFA	; 250
    1d02:	11 37       	cpi	r17, 0x71	; 113
    1d04:	a1 f7       	brne	.-24     	; 0x1cee <_Z15anzeige_kompassd+0x44>
    1d06:	0f 2e       	mov	r0, r31
    1d08:	fd ed       	ldi	r31, 0xDD	; 221
    1d0a:	ef 2e       	mov	r14, r31
    1d0c:	f6 e0       	ldi	r31, 0x06	; 6
    1d0e:	ff 2e       	mov	r15, r31
    1d10:	f0 2d       	mov	r31, r0
    1d12:	11 e4       	ldi	r17, 0x41	; 65
	for(uint8_t i=0;i<bitsderrtc;i++){oled.draw_ASCI(rtc.msg_dat[i],65+i*charsize,7*charhighte);}
    1d14:	f7 01       	movw	r30, r14
    1d16:	61 91       	ld	r22, Z+
    1d18:	7f 01       	movw	r14, r30
    1d1a:	28 e3       	ldi	r18, 0x38	; 56
    1d1c:	41 2f       	mov	r20, r17
    1d1e:	84 ea       	ldi	r24, 0xA4	; 164
    1d20:	92 e0       	ldi	r25, 0x02	; 2
    1d22:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    1d26:	1a 5f       	subi	r17, 0xFA	; 250
    1d28:	11 37       	cpi	r17, 0x71	; 113
    1d2a:	a1 f7       	brne	.-24     	; 0x1d14 <_Z15anzeige_kompassd+0x6a>
	//winkel als Zahl ausgeben
	buffersize=sprintf(buffer,"angle=%.0f",winkel);
    1d2c:	df 92       	push	r13
    1d2e:	cf 92       	push	r12
    1d30:	bf 92       	push	r11
    1d32:	af 92       	push	r10
    1d34:	89 e2       	ldi	r24, 0x29	; 41
    1d36:	92 e0       	ldi	r25, 0x02	; 2
    1d38:	9f 93       	push	r25
    1d3a:	8f 93       	push	r24
    1d3c:	ce 01       	movw	r24, r28
    1d3e:	01 96       	adiw	r24, 0x01	; 1
    1d40:	9f 93       	push	r25
    1d42:	8f 93       	push	r24
    1d44:	0e 94 42 24 	call	0x4884	; 0x4884 <sprintf>
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],65+i*charsize,6*charhighte);}
    1d48:	0f b6       	in	r0, 0x3f	; 63
    1d4a:	f8 94       	cli
    1d4c:	de bf       	out	0x3e, r29	; 62
    1d4e:	0f be       	out	0x3f, r0	; 63
    1d50:	cd bf       	out	0x3d, r28	; 61
    1d52:	88 23       	and	r24, r24
    1d54:	f1 f0       	breq	.+60     	; 0x1d92 <_Z15anzeige_kompassd+0xe8>
    1d56:	8e 01       	movw	r16, r28
    1d58:	0f 5f       	subi	r16, 0xFF	; 255
    1d5a:	1f 4f       	sbci	r17, 0xFF	; 255
    1d5c:	81 50       	subi	r24, 0x01	; 1
    1d5e:	68 94       	set
    1d60:	ee 24       	eor	r14, r14
    1d62:	e1 f8       	bld	r14, 1
    1d64:	f1 2c       	mov	r15, r1
    1d66:	ec 0e       	add	r14, r28
    1d68:	fd 1e       	adc	r15, r29
    1d6a:	e8 0e       	add	r14, r24
    1d6c:	f1 1c       	adc	r15, r1
    1d6e:	0f 2e       	mov	r0, r31
    1d70:	f1 e4       	ldi	r31, 0x41	; 65
    1d72:	9f 2e       	mov	r9, r31
    1d74:	f0 2d       	mov	r31, r0
    1d76:	f8 01       	movw	r30, r16
    1d78:	61 91       	ld	r22, Z+
    1d7a:	8f 01       	movw	r16, r30
    1d7c:	20 e3       	ldi	r18, 0x30	; 48
    1d7e:	49 2d       	mov	r20, r9
    1d80:	84 ea       	ldi	r24, 0xA4	; 164
    1d82:	92 e0       	ldi	r25, 0x02	; 2
    1d84:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    1d88:	f6 e0       	ldi	r31, 0x06	; 6
    1d8a:	9f 0e       	add	r9, r31
    1d8c:	0e 15       	cp	r16, r14
    1d8e:	1f 05       	cpc	r17, r15
    1d90:	91 f7       	brne	.-28     	; 0x1d76 <_Z15anzeige_kompassd+0xcc>
	//dreieck als Zeiger
	anzeige_nadel(31,31,winkel);
    1d92:	2a 2d       	mov	r18, r10
    1d94:	3b 2d       	mov	r19, r11
    1d96:	4c 2d       	mov	r20, r12
    1d98:	5d 2d       	mov	r21, r13
    1d9a:	6f e1       	ldi	r22, 0x1F	; 31
    1d9c:	8f e1       	ldi	r24, 0x1F	; 31
    1d9e:	0e 94 34 0a 	call	0x1468	; 0x1468 <_Z13anzeige_nadelhhf>
	//Richtung ausgeben
	anzeige_richtung(winkel);	
    1da2:	6a 2d       	mov	r22, r10
    1da4:	7b 2d       	mov	r23, r11
    1da6:	8c 2d       	mov	r24, r12
    1da8:	9d 2d       	mov	r25, r13
    1daa:	0e 94 76 09 	call	0x12ec	; 0x12ec <_Z16anzeige_richtungf>
}
    1dae:	64 96       	adiw	r28, 0x14	; 20
    1db0:	0f b6       	in	r0, 0x3f	; 63
    1db2:	f8 94       	cli
    1db4:	de bf       	out	0x3e, r29	; 62
    1db6:	0f be       	out	0x3f, r0	; 63
    1db8:	cd bf       	out	0x3d, r28	; 61
    1dba:	df 91       	pop	r29
    1dbc:	cf 91       	pop	r28
    1dbe:	1f 91       	pop	r17
    1dc0:	0f 91       	pop	r16
    1dc2:	ff 90       	pop	r15
    1dc4:	ef 90       	pop	r14
    1dc6:	df 90       	pop	r13
    1dc8:	cf 90       	pop	r12
    1dca:	bf 90       	pop	r11
    1dcc:	af 90       	pop	r10
    1dce:	9f 90       	pop	r9
    1dd0:	08 95       	ret

00001dd2 <_Z10timerseitev>:

void timerseite(){
    1dd2:	af 92       	push	r10
    1dd4:	bf 92       	push	r11
    1dd6:	df 92       	push	r13
    1dd8:	ef 92       	push	r14
    1dda:	0f 93       	push	r16
    1ddc:	1f 93       	push	r17
    1dde:	cf 93       	push	r28
    1de0:	df 93       	push	r29
    1de2:	cd b7       	in	r28, 0x3d	; 61
    1de4:	de b7       	in	r29, 0x3e	; 62
    1de6:	64 97       	sbiw	r28, 0x14	; 20
    1de8:	0f b6       	in	r0, 0x3f	; 63
    1dea:	f8 94       	cli
    1dec:	de bf       	out	0x3e, r29	; 62
    1dee:	0f be       	out	0x3f, r0	; 63
    1df0:	cd bf       	out	0x3d, r28	; 61
	char buffer[20];
	uint8_t buffersize=0;
	oled.clearFrame();
    1df2:	84 ea       	ldi	r24, 0xA4	; 164
    1df4:	92 e0       	ldi	r25, 0x02	; 2
    1df6:	0e 94 b9 02 	call	0x572	; 0x572 <_ZN7Display10clearFrameEv>
	buffersize=sprintf(buffer,"Timer: ");
    1dfa:	88 e0       	ldi	r24, 0x08	; 8
    1dfc:	e4 e3       	ldi	r30, 0x34	; 52
    1dfe:	f2 e0       	ldi	r31, 0x02	; 2
    1e00:	8e 01       	movw	r16, r28
    1e02:	0f 5f       	subi	r16, 0xFF	; 255
    1e04:	1f 4f       	sbci	r17, 0xFF	; 255
    1e06:	d8 01       	movw	r26, r16
    1e08:	01 90       	ld	r0, Z+
    1e0a:	0d 92       	st	X+, r0
    1e0c:	8a 95       	dec	r24
    1e0e:	e1 f7       	brne	.-8      	; 0x1e08 <_Z10timerseitev+0x36>
    1e10:	d0 2e       	mov	r13, r16
    1e12:	e1 2e       	mov	r14, r17
    1e14:	58 01       	movw	r10, r16
    1e16:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,0*charhighte);}
    1e18:	f5 01       	movw	r30, r10
    1e1a:	61 91       	ld	r22, Z+
    1e1c:	5f 01       	movw	r10, r30
    1e1e:	20 e0       	ldi	r18, 0x00	; 0
    1e20:	41 2f       	mov	r20, r17
    1e22:	84 ea       	ldi	r24, 0xA4	; 164
    1e24:	92 e0       	ldi	r25, 0x02	; 2
    1e26:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    1e2a:	1a 5f       	subi	r17, 0xFA	; 250
    1e2c:	1a 32       	cpi	r17, 0x2A	; 42
    1e2e:	a1 f7       	brne	.-24     	; 0x1e18 <_Z10timerseitev+0x46>
	if (pos!=0)
    1e30:	60 91 9c 02 	lds	r22, 0x029C
    1e34:	66 23       	and	r22, r22
    1e36:	39 f0       	breq	.+14     	; 0x1e46 <_Z10timerseitev+0x74>
	{
		oled.draw_ASCI(pos+'0',buffersize*charsize,0*charhighte);
    1e38:	60 5d       	subi	r22, 0xD0	; 208
    1e3a:	20 e0       	ldi	r18, 0x00	; 0
    1e3c:	4a e2       	ldi	r20, 0x2A	; 42
    1e3e:	84 ea       	ldi	r24, 0xA4	; 164
    1e40:	92 e0       	ldi	r25, 0x02	; 2
    1e42:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
	}
		
	buffer[0]=zaehler.Stunden/10;
    1e46:	90 91 cd 06 	lds	r25, 0x06CD
    1e4a:	8d ec       	ldi	r24, 0xCD	; 205
    1e4c:	98 9f       	mul	r25, r24
    1e4e:	21 2d       	mov	r18, r1
    1e50:	11 24       	eor	r1, r1
    1e52:	26 95       	lsr	r18
    1e54:	26 95       	lsr	r18
    1e56:	26 95       	lsr	r18
    1e58:	29 83       	std	Y+1, r18	; 0x01
	buffer[1]=zaehler.Stunden%10;
    1e5a:	22 0f       	add	r18, r18
    1e5c:	32 2f       	mov	r19, r18
    1e5e:	33 0f       	add	r19, r19
    1e60:	33 0f       	add	r19, r19
    1e62:	23 0f       	add	r18, r19
    1e64:	92 1b       	sub	r25, r18
    1e66:	9a 83       	std	Y+2, r25	; 0x02
	buffer[2]=':';
    1e68:	9a e3       	ldi	r25, 0x3A	; 58
    1e6a:	9b 83       	std	Y+3, r25	; 0x03
	buffer[3]=zaehler.Minuten/10;
    1e6c:	20 91 ce 06 	lds	r18, 0x06CE
    1e70:	28 9f       	mul	r18, r24
    1e72:	31 2d       	mov	r19, r1
    1e74:	11 24       	eor	r1, r1
    1e76:	36 95       	lsr	r19
    1e78:	36 95       	lsr	r19
    1e7a:	36 95       	lsr	r19
    1e7c:	3c 83       	std	Y+4, r19	; 0x04
	buffer[4]=zaehler.Minuten%10;
    1e7e:	33 0f       	add	r19, r19
    1e80:	43 2f       	mov	r20, r19
    1e82:	44 0f       	add	r20, r20
    1e84:	44 0f       	add	r20, r20
    1e86:	34 0f       	add	r19, r20
    1e88:	23 1b       	sub	r18, r19
    1e8a:	2d 83       	std	Y+5, r18	; 0x05
	buffer[5]=':';
    1e8c:	9e 83       	std	Y+6, r25	; 0x06
	buffer[6]=zaehler.Sekunden/10;
    1e8e:	90 91 cf 06 	lds	r25, 0x06CF
    1e92:	98 9f       	mul	r25, r24
    1e94:	81 2d       	mov	r24, r1
    1e96:	11 24       	eor	r1, r1
    1e98:	86 95       	lsr	r24
    1e9a:	86 95       	lsr	r24
    1e9c:	86 95       	lsr	r24
    1e9e:	8f 83       	std	Y+7, r24	; 0x07
	buffer[7]=zaehler.Sekunden%10;
    1ea0:	88 0f       	add	r24, r24
    1ea2:	28 2f       	mov	r18, r24
    1ea4:	22 0f       	add	r18, r18
    1ea6:	22 0f       	add	r18, r18
    1ea8:	82 0f       	add	r24, r18
    1eaa:	98 1b       	sub	r25, r24
    1eac:	98 87       	std	Y+8, r25	; 0x08
    1eae:	ad 2c       	mov	r10, r13
    1eb0:	be 2c       	mov	r11, r14
    1eb2:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<bitsderrtc;i++){
		if (buffer[i]==':')
    1eb4:	f5 01       	movw	r30, r10
    1eb6:	61 91       	ld	r22, Z+
    1eb8:	5f 01       	movw	r10, r30
    1eba:	6a 33       	cpi	r22, 0x3A	; 58
    1ebc:	39 f4       	brne	.+14     	; 0x1ecc <_Z10timerseitev+0xfa>
		{
			oled.draw_ASCI(buffer[i],i*numbersmalsize,2.5*charhighte);
    1ebe:	24 e1       	ldi	r18, 0x14	; 20
    1ec0:	41 2f       	mov	r20, r17
    1ec2:	84 ea       	ldi	r24, 0xA4	; 164
    1ec4:	92 e0       	ldi	r25, 0x02	; 2
    1ec6:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    1eca:	06 c0       	rjmp	.+12     	; 0x1ed8 <_Z10timerseitev+0x106>
		}
		else{
			oled.draw_number16x16(buffer[i],i*numbersmalsize,2*charhighte);
    1ecc:	20 e1       	ldi	r18, 0x10	; 16
    1ece:	41 2f       	mov	r20, r17
    1ed0:	84 ea       	ldi	r24, 0xA4	; 164
    1ed2:	92 e0       	ldi	r25, 0x02	; 2
    1ed4:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <_ZN7Display16draw_number16x16Ehhh>
    1ed8:	10 5f       	subi	r17, 0xF0	; 240
	buffer[3]=zaehler.Minuten/10;
	buffer[4]=zaehler.Minuten%10;
	buffer[5]=':';
	buffer[6]=zaehler.Sekunden/10;
	buffer[7]=zaehler.Sekunden%10;
	for(uint8_t i=0;i<bitsderrtc;i++){
    1eda:	10 38       	cpi	r17, 0x80	; 128
    1edc:	59 f7       	brne	.-42     	; 0x1eb4 <_Z10timerseitev+0xe2>
		}
		else{
			oled.draw_number16x16(buffer[i],i*numbersmalsize,2*charhighte);
		}
	}
}
    1ede:	64 96       	adiw	r28, 0x14	; 20
    1ee0:	0f b6       	in	r0, 0x3f	; 63
    1ee2:	f8 94       	cli
    1ee4:	de bf       	out	0x3e, r29	; 62
    1ee6:	0f be       	out	0x3f, r0	; 63
    1ee8:	cd bf       	out	0x3d, r28	; 61
    1eea:	df 91       	pop	r29
    1eec:	cf 91       	pop	r28
    1eee:	1f 91       	pop	r17
    1ef0:	0f 91       	pop	r16
    1ef2:	ef 90       	pop	r14
    1ef4:	df 90       	pop	r13
    1ef6:	bf 90       	pop	r11
    1ef8:	af 90       	pop	r10
    1efa:	08 95       	ret

00001efc <_Z13Stoppuhrseitev>:

void Stoppuhrseite(){
    1efc:	af 92       	push	r10
    1efe:	bf 92       	push	r11
    1f00:	df 92       	push	r13
    1f02:	ef 92       	push	r14
    1f04:	0f 93       	push	r16
    1f06:	1f 93       	push	r17
    1f08:	cf 93       	push	r28
    1f0a:	df 93       	push	r29
    1f0c:	cd b7       	in	r28, 0x3d	; 61
    1f0e:	de b7       	in	r29, 0x3e	; 62
    1f10:	64 97       	sbiw	r28, 0x14	; 20
    1f12:	0f b6       	in	r0, 0x3f	; 63
    1f14:	f8 94       	cli
    1f16:	de bf       	out	0x3e, r29	; 62
    1f18:	0f be       	out	0x3f, r0	; 63
    1f1a:	cd bf       	out	0x3d, r28	; 61
	char buffer[20];
	uint8_t buffersize=0;
	oled.clearFrame();
    1f1c:	84 ea       	ldi	r24, 0xA4	; 164
    1f1e:	92 e0       	ldi	r25, 0x02	; 2
    1f20:	0e 94 b9 02 	call	0x572	; 0x572 <_ZN7Display10clearFrameEv>
	buffersize=sprintf(buffer,"Stoppuhr: ");
    1f24:	8b e0       	ldi	r24, 0x0B	; 11
    1f26:	ec e3       	ldi	r30, 0x3C	; 60
    1f28:	f2 e0       	ldi	r31, 0x02	; 2
    1f2a:	8e 01       	movw	r16, r28
    1f2c:	0f 5f       	subi	r16, 0xFF	; 255
    1f2e:	1f 4f       	sbci	r17, 0xFF	; 255
    1f30:	d8 01       	movw	r26, r16
    1f32:	01 90       	ld	r0, Z+
    1f34:	0d 92       	st	X+, r0
    1f36:	8a 95       	dec	r24
    1f38:	e1 f7       	brne	.-8      	; 0x1f32 <_Z13Stoppuhrseitev+0x36>
    1f3a:	d0 2e       	mov	r13, r16
    1f3c:	e1 2e       	mov	r14, r17
    1f3e:	58 01       	movw	r10, r16
    1f40:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,0*charhighte);}
    1f42:	f5 01       	movw	r30, r10
    1f44:	61 91       	ld	r22, Z+
    1f46:	5f 01       	movw	r10, r30
    1f48:	20 e0       	ldi	r18, 0x00	; 0
    1f4a:	41 2f       	mov	r20, r17
    1f4c:	84 ea       	ldi	r24, 0xA4	; 164
    1f4e:	92 e0       	ldi	r25, 0x02	; 2
    1f50:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    1f54:	1a 5f       	subi	r17, 0xFA	; 250
    1f56:	1c 33       	cpi	r17, 0x3C	; 60
    1f58:	a1 f7       	brne	.-24     	; 0x1f42 <_Z13Stoppuhrseitev+0x46>
	
	buffer[0]=stoppuhr.Stunden/10;
    1f5a:	90 91 b5 06 	lds	r25, 0x06B5
    1f5e:	8d ec       	ldi	r24, 0xCD	; 205
    1f60:	98 9f       	mul	r25, r24
    1f62:	21 2d       	mov	r18, r1
    1f64:	11 24       	eor	r1, r1
    1f66:	26 95       	lsr	r18
    1f68:	26 95       	lsr	r18
    1f6a:	26 95       	lsr	r18
    1f6c:	29 83       	std	Y+1, r18	; 0x01
	buffer[1]=stoppuhr.Stunden%10;
    1f6e:	22 0f       	add	r18, r18
    1f70:	32 2f       	mov	r19, r18
    1f72:	33 0f       	add	r19, r19
    1f74:	33 0f       	add	r19, r19
    1f76:	23 0f       	add	r18, r19
    1f78:	92 1b       	sub	r25, r18
    1f7a:	9a 83       	std	Y+2, r25	; 0x02
	buffer[2]=':';
    1f7c:	9a e3       	ldi	r25, 0x3A	; 58
    1f7e:	9b 83       	std	Y+3, r25	; 0x03
	buffer[3]=stoppuhr.Minuten/10;
    1f80:	20 91 b6 06 	lds	r18, 0x06B6
    1f84:	28 9f       	mul	r18, r24
    1f86:	31 2d       	mov	r19, r1
    1f88:	11 24       	eor	r1, r1
    1f8a:	36 95       	lsr	r19
    1f8c:	36 95       	lsr	r19
    1f8e:	36 95       	lsr	r19
    1f90:	3c 83       	std	Y+4, r19	; 0x04
	buffer[4]=stoppuhr.Minuten%10;
    1f92:	33 0f       	add	r19, r19
    1f94:	43 2f       	mov	r20, r19
    1f96:	44 0f       	add	r20, r20
    1f98:	44 0f       	add	r20, r20
    1f9a:	34 0f       	add	r19, r20
    1f9c:	23 1b       	sub	r18, r19
    1f9e:	2d 83       	std	Y+5, r18	; 0x05
	buffer[5]=':';
    1fa0:	9e 83       	std	Y+6, r25	; 0x06
	buffer[6]=stoppuhr.Sekunden/10;
    1fa2:	90 91 b7 06 	lds	r25, 0x06B7
    1fa6:	98 9f       	mul	r25, r24
    1fa8:	81 2d       	mov	r24, r1
    1faa:	11 24       	eor	r1, r1
    1fac:	86 95       	lsr	r24
    1fae:	86 95       	lsr	r24
    1fb0:	86 95       	lsr	r24
    1fb2:	8f 83       	std	Y+7, r24	; 0x07
	buffer[7]=stoppuhr.Sekunden%10;
    1fb4:	88 0f       	add	r24, r24
    1fb6:	28 2f       	mov	r18, r24
    1fb8:	22 0f       	add	r18, r18
    1fba:	22 0f       	add	r18, r18
    1fbc:	82 0f       	add	r24, r18
    1fbe:	98 1b       	sub	r25, r24
    1fc0:	98 87       	std	Y+8, r25	; 0x08
    1fc2:	ad 2c       	mov	r10, r13
    1fc4:	be 2c       	mov	r11, r14
    1fc6:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<bitsderrtc;i++){
		if (buffer[i]==':')
    1fc8:	f5 01       	movw	r30, r10
    1fca:	61 91       	ld	r22, Z+
    1fcc:	5f 01       	movw	r10, r30
    1fce:	6a 33       	cpi	r22, 0x3A	; 58
    1fd0:	39 f4       	brne	.+14     	; 0x1fe0 <_Z13Stoppuhrseitev+0xe4>
		{
			oled.draw_ASCI(buffer[i],i*numbersmalsize,2.5*charhighte);
    1fd2:	24 e1       	ldi	r18, 0x14	; 20
    1fd4:	41 2f       	mov	r20, r17
    1fd6:	84 ea       	ldi	r24, 0xA4	; 164
    1fd8:	92 e0       	ldi	r25, 0x02	; 2
    1fda:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    1fde:	06 c0       	rjmp	.+12     	; 0x1fec <_Z13Stoppuhrseitev+0xf0>
		}
		else{
			oled.draw_number16x16(buffer[i],i*numbersmalsize,2*charhighte);
    1fe0:	20 e1       	ldi	r18, 0x10	; 16
    1fe2:	41 2f       	mov	r20, r17
    1fe4:	84 ea       	ldi	r24, 0xA4	; 164
    1fe6:	92 e0       	ldi	r25, 0x02	; 2
    1fe8:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <_ZN7Display16draw_number16x16Ehhh>
    1fec:	10 5f       	subi	r17, 0xF0	; 240
	buffer[3]=stoppuhr.Minuten/10;
	buffer[4]=stoppuhr.Minuten%10;
	buffer[5]=':';
	buffer[6]=stoppuhr.Sekunden/10;
	buffer[7]=stoppuhr.Sekunden%10;
	for(uint8_t i=0;i<bitsderrtc;i++){
    1fee:	10 38       	cpi	r17, 0x80	; 128
    1ff0:	59 f7       	brne	.-42     	; 0x1fc8 <_Z13Stoppuhrseitev+0xcc>
		}
		else{
			oled.draw_number16x16(buffer[i],i*numbersmalsize,2*charhighte);
		}
	}
}
    1ff2:	64 96       	adiw	r28, 0x14	; 20
    1ff4:	0f b6       	in	r0, 0x3f	; 63
    1ff6:	f8 94       	cli
    1ff8:	de bf       	out	0x3e, r29	; 62
    1ffa:	0f be       	out	0x3f, r0	; 63
    1ffc:	cd bf       	out	0x3d, r28	; 61
    1ffe:	df 91       	pop	r29
    2000:	cf 91       	pop	r28
    2002:	1f 91       	pop	r17
    2004:	0f 91       	pop	r16
    2006:	ef 90       	pop	r14
    2008:	df 90       	pop	r13
    200a:	bf 90       	pop	r11
    200c:	af 90       	pop	r10
    200e:	08 95       	ret

00002010 <_Z13uhreinstellenv>:

void uhreinstellen(){
    2010:	2f 92       	push	r2
    2012:	3f 92       	push	r3
    2014:	4f 92       	push	r4
    2016:	5f 92       	push	r5
    2018:	6f 92       	push	r6
    201a:	7f 92       	push	r7
    201c:	8f 92       	push	r8
    201e:	9f 92       	push	r9
    2020:	af 92       	push	r10
    2022:	bf 92       	push	r11
    2024:	cf 92       	push	r12
    2026:	df 92       	push	r13
    2028:	ef 92       	push	r14
    202a:	ff 92       	push	r15
    202c:	0f 93       	push	r16
    202e:	1f 93       	push	r17
    2030:	cf 93       	push	r28
    2032:	df 93       	push	r29
    2034:	cd b7       	in	r28, 0x3d	; 61
    2036:	de b7       	in	r29, 0x3e	; 62
    2038:	66 97       	sbiw	r28, 0x16	; 22
    203a:	0f b6       	in	r0, 0x3f	; 63
    203c:	f8 94       	cli
    203e:	de bf       	out	0x3e, r29	; 62
    2040:	0f be       	out	0x3f, r0	; 63
    2042:	cd bf       	out	0x3d, r28	; 61
	rtc.RTCstop();
    2044:	85 ed       	ldi	r24, 0xD5	; 213
    2046:	96 e0       	ldi	r25, 0x06	; 6
    2048:	0e 94 1a 1c 	call	0x3834	; 0x3834 <_ZN3RTC7RTCstopEv>
	
	oled.clearFrame();
    204c:	84 ea       	ldi	r24, 0xA4	; 164
    204e:	92 e0       	ldi	r25, 0x02	; 2
    2050:	0e 94 b9 02 	call	0x572	; 0x572 <_ZN7Display10clearFrameEv>
	char buffer[20];
	uint8_t buffersize;
	uint8_t pos=0;
    2054:	91 2c       	mov	r9, r1
	while(pos<11){
		buffersize=sprintf(buffer,"Uhreinstellung");
    2056:	0f 2e       	mov	r0, r31
    2058:	ff e0       	ldi	r31, 0x0F	; 15
    205a:	6f 2e       	mov	r6, r31
    205c:	f0 2d       	mov	r31, r0
    205e:	ce 01       	movw	r24, r28
    2060:	01 96       	adiw	r24, 0x01	; 1
    2062:	7c 01       	movw	r14, r24
    2064:	78 2e       	mov	r7, r24
    2066:	8f 2c       	mov	r8, r15
    2068:	b1 2c       	mov	r11, r1
		for(uint8_t i = 0; i<buffersize;i++){
			oled.draw_ASCI(buffer[i],charsize*i,0);
		}
		buffersize=sprintf(buffer,"--------------");
    206a:	8d 8b       	std	Y+21, r24	; 0x15
    206c:	fe 8a       	std	Y+22, r15	; 0x16
		for(uint8_t i = 0; i<buffersize;i++){
			oled.draw_ASCI(buffer[i],charsize*i,8);
		}
		buffer[0]=rtc.Stunden/10;
    206e:	0f 2e       	mov	r0, r31
    2070:	fd ec       	ldi	r31, 0xCD	; 205
    2072:	af 2e       	mov	r10, r31
    2074:	f0 2d       	mov	r31, r0
		buffer[1]=rtc.Stunden%10;
		buffer[2]=':';
		buffer[3]=rtc.Minuten/10;
		buffer[4]=rtc.Minuten%10;
		buffer[5]=' ';
		buffer[6]=rtc.Tag/10;
    2076:	0f 2e       	mov	r0, r31
    2078:	f9 ee       	ldi	r31, 0xE9	; 233
    207a:	4f 2e       	mov	r4, r31
    207c:	f6 e0       	ldi	r31, 0x06	; 6
    207e:	5f 2e       	mov	r5, r31
    2080:	f0 2d       	mov	r31, r0
		buffer[7]=rtc.Tag%10;
		buffer[8]='.';
		buffer[9]=rtc.Monat/10;
    2082:	0f 2e       	mov	r0, r31
    2084:	fa ee       	ldi	r31, 0xEA	; 234
    2086:	cf 2e       	mov	r12, r31
    2088:	f6 e0       	ldi	r31, 0x06	; 6
    208a:	df 2e       	mov	r13, r31
    208c:	f0 2d       	mov	r31, r0
	oled.clearFrame();
	char buffer[20];
	uint8_t buffersize;
	uint8_t pos=0;
	while(pos<11){
		buffersize=sprintf(buffer,"Uhreinstellung");
    208e:	e7 e4       	ldi	r30, 0x47	; 71
    2090:	f2 e0       	ldi	r31, 0x02	; 2
    2092:	a7 2d       	mov	r26, r7
    2094:	b8 2d       	mov	r27, r8
    2096:	86 2d       	mov	r24, r6
    2098:	01 90       	ld	r0, Z+
    209a:	0d 92       	st	X+, r0
    209c:	8a 95       	dec	r24
    209e:	e1 f7       	brne	.-8      	; 0x2098 <_Z13uhreinstellenv+0x88>
    20a0:	27 2c       	mov	r2, r7
    20a2:	38 2c       	mov	r3, r8
    20a4:	1b 2d       	mov	r17, r11
		for(uint8_t i = 0; i<buffersize;i++){
			oled.draw_ASCI(buffer[i],charsize*i,0);
    20a6:	f1 01       	movw	r30, r2
    20a8:	61 91       	ld	r22, Z+
    20aa:	1f 01       	movw	r2, r30
    20ac:	2b 2d       	mov	r18, r11
    20ae:	41 2f       	mov	r20, r17
    20b0:	84 ea       	ldi	r24, 0xA4	; 164
    20b2:	92 e0       	ldi	r25, 0x02	; 2
    20b4:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    20b8:	1a 5f       	subi	r17, 0xFA	; 250
	char buffer[20];
	uint8_t buffersize;
	uint8_t pos=0;
	while(pos<11){
		buffersize=sprintf(buffer,"Uhreinstellung");
		for(uint8_t i = 0; i<buffersize;i++){
    20ba:	14 35       	cpi	r17, 0x54	; 84
    20bc:	a1 f7       	brne	.-24     	; 0x20a6 <_Z13uhreinstellenv+0x96>
			oled.draw_ASCI(buffer[i],charsize*i,0);
		}
		buffersize=sprintf(buffer,"--------------");
    20be:	ef e0       	ldi	r30, 0x0F	; 15
    20c0:	f1 e0       	ldi	r31, 0x01	; 1
    20c2:	a7 2d       	mov	r26, r7
    20c4:	b8 2d       	mov	r27, r8
    20c6:	86 2d       	mov	r24, r6
    20c8:	01 90       	ld	r0, Z+
    20ca:	0d 92       	st	X+, r0
    20cc:	8a 95       	dec	r24
    20ce:	e1 f7       	brne	.-8      	; 0x20c8 <_Z13uhreinstellenv+0xb8>
    20d0:	2d 88       	ldd	r2, Y+21	; 0x15
    20d2:	3e 88       	ldd	r3, Y+22	; 0x16
    20d4:	1b 2d       	mov	r17, r11
		for(uint8_t i = 0; i<buffersize;i++){
			oled.draw_ASCI(buffer[i],charsize*i,8);
    20d6:	f1 01       	movw	r30, r2
    20d8:	61 91       	ld	r22, Z+
    20da:	1f 01       	movw	r2, r30
    20dc:	28 e0       	ldi	r18, 0x08	; 8
    20de:	41 2f       	mov	r20, r17
    20e0:	84 ea       	ldi	r24, 0xA4	; 164
    20e2:	92 e0       	ldi	r25, 0x02	; 2
    20e4:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    20e8:	1a 5f       	subi	r17, 0xFA	; 250
		buffersize=sprintf(buffer,"Uhreinstellung");
		for(uint8_t i = 0; i<buffersize;i++){
			oled.draw_ASCI(buffer[i],charsize*i,0);
		}
		buffersize=sprintf(buffer,"--------------");
		for(uint8_t i = 0; i<buffersize;i++){
    20ea:	14 35       	cpi	r17, 0x54	; 84
    20ec:	a1 f7       	brne	.-24     	; 0x20d6 <_Z13uhreinstellenv+0xc6>
			oled.draw_ASCI(buffer[i],charsize*i,8);
		}
		buffer[0]=rtc.Stunden/10;
    20ee:	e5 ee       	ldi	r30, 0xE5	; 229
    20f0:	f6 e0       	ldi	r31, 0x06	; 6
    20f2:	80 81       	ld	r24, Z
    20f4:	8a 9d       	mul	r24, r10
    20f6:	91 2d       	mov	r25, r1
    20f8:	11 24       	eor	r1, r1
    20fa:	96 95       	lsr	r25
    20fc:	96 95       	lsr	r25
    20fe:	96 95       	lsr	r25
    2100:	99 83       	std	Y+1, r25	; 0x01
		buffer[1]=rtc.Stunden%10;
    2102:	99 0f       	add	r25, r25
    2104:	29 2f       	mov	r18, r25
    2106:	22 0f       	add	r18, r18
    2108:	22 0f       	add	r18, r18
    210a:	92 0f       	add	r25, r18
    210c:	89 1b       	sub	r24, r25
    210e:	8a 83       	std	Y+2, r24	; 0x02
		buffer[2]=':';
    2110:	fa e3       	ldi	r31, 0x3A	; 58
    2112:	fb 83       	std	Y+3, r31	; 0x03
		buffer[3]=rtc.Minuten/10;
    2114:	e6 ee       	ldi	r30, 0xE6	; 230
    2116:	f6 e0       	ldi	r31, 0x06	; 6
    2118:	80 81       	ld	r24, Z
    211a:	8a 9d       	mul	r24, r10
    211c:	91 2d       	mov	r25, r1
    211e:	11 24       	eor	r1, r1
    2120:	96 95       	lsr	r25
    2122:	96 95       	lsr	r25
    2124:	96 95       	lsr	r25
    2126:	9c 83       	std	Y+4, r25	; 0x04
		buffer[4]=rtc.Minuten%10;
    2128:	99 0f       	add	r25, r25
    212a:	29 2f       	mov	r18, r25
    212c:	22 0f       	add	r18, r18
    212e:	22 0f       	add	r18, r18
    2130:	92 0f       	add	r25, r18
    2132:	89 1b       	sub	r24, r25
    2134:	8d 83       	std	Y+5, r24	; 0x05
		buffer[5]=' ';
    2136:	80 e2       	ldi	r24, 0x20	; 32
    2138:	8e 83       	std	Y+6, r24	; 0x06
		buffer[6]=rtc.Tag/10;
    213a:	f2 01       	movw	r30, r4
    213c:	80 81       	ld	r24, Z
    213e:	8a 9d       	mul	r24, r10
    2140:	91 2d       	mov	r25, r1
    2142:	11 24       	eor	r1, r1
    2144:	96 95       	lsr	r25
    2146:	96 95       	lsr	r25
    2148:	96 95       	lsr	r25
    214a:	9f 83       	std	Y+7, r25	; 0x07
		buffer[7]=rtc.Tag%10;
    214c:	99 0f       	add	r25, r25
    214e:	29 2f       	mov	r18, r25
    2150:	22 0f       	add	r18, r18
    2152:	22 0f       	add	r18, r18
    2154:	92 0f       	add	r25, r18
    2156:	89 1b       	sub	r24, r25
    2158:	88 87       	std	Y+8, r24	; 0x08
		buffer[8]='.';
    215a:	8e e2       	ldi	r24, 0x2E	; 46
    215c:	89 87       	std	Y+9, r24	; 0x09
		buffer[9]=rtc.Monat/10;
    215e:	f6 01       	movw	r30, r12
    2160:	90 81       	ld	r25, Z
    2162:	9a 9d       	mul	r25, r10
    2164:	21 2d       	mov	r18, r1
    2166:	11 24       	eor	r1, r1
    2168:	26 95       	lsr	r18
    216a:	26 95       	lsr	r18
    216c:	26 95       	lsr	r18
    216e:	2a 87       	std	Y+10, r18	; 0x0a
		buffer[10]=rtc.Monat%10;
    2170:	22 0f       	add	r18, r18
    2172:	32 2f       	mov	r19, r18
    2174:	33 0f       	add	r19, r19
    2176:	33 0f       	add	r19, r19
    2178:	23 0f       	add	r18, r19
    217a:	92 1b       	sub	r25, r18
    217c:	9b 87       	std	Y+11, r25	; 0x0b
		buffer[11]='.';
    217e:	8c 87       	std	Y+12, r24	; 0x0c
		buffer[12]=rtc.Jahr/10;
    2180:	eb ee       	ldi	r30, 0xEB	; 235
    2182:	f6 e0       	ldi	r31, 0x06	; 6
    2184:	80 81       	ld	r24, Z
    2186:	8a 9d       	mul	r24, r10
    2188:	91 2d       	mov	r25, r1
    218a:	11 24       	eor	r1, r1
    218c:	96 95       	lsr	r25
    218e:	96 95       	lsr	r25
    2190:	96 95       	lsr	r25
    2192:	9d 87       	std	Y+13, r25	; 0x0d
		buffer[13]=rtc.Jahr%10;
    2194:	99 0f       	add	r25, r25
    2196:	29 2f       	mov	r18, r25
    2198:	22 0f       	add	r18, r18
    219a:	22 0f       	add	r18, r18
    219c:	92 0f       	add	r25, r18
    219e:	89 1b       	sub	r24, r25
    21a0:	8e 87       	std	Y+14, r24	; 0x0e
    21a2:	3b 2c       	mov	r3, r11
    21a4:	01 e0       	ldi	r16, 0x01	; 1
    21a6:	1b 2d       	mov	r17, r11
    21a8:	04 c0       	rjmp	.+8      	; 0x21b2 <_Z13uhreinstellenv+0x1a2>
    21aa:	1f 5f       	subi	r17, 0xFF	; 255
    21ac:	0f 5f       	subi	r16, 0xFF	; 255
    21ae:	f0 e1       	ldi	r31, 0x10	; 16
    21b0:	3f 0e       	add	r3, r31
		buffersize=14;
		for(uint8_t i = 0; i<5;i++){
			if(i!=2){
    21b2:	12 30       	cpi	r17, 0x02	; 2
    21b4:	69 f0       	breq	.+26     	; 0x21d0 <_Z13uhreinstellenv+0x1c0>
				oled.draw_number16x16(buffer[i],i*numbersmalsize,2*charhighte);
    21b6:	20 e1       	ldi	r18, 0x10	; 16
    21b8:	43 2d       	mov	r20, r3
    21ba:	f7 01       	movw	r30, r14
    21bc:	e1 0f       	add	r30, r17
    21be:	f1 1d       	adc	r31, r1
    21c0:	60 81       	ld	r22, Z
    21c2:	84 ea       	ldi	r24, 0xA4	; 164
    21c4:	92 e0       	ldi	r25, 0x02	; 2
    21c6:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <_ZN7Display16draw_number16x16Ehhh>
		buffer[10]=rtc.Monat%10;
		buffer[11]='.';
		buffer[12]=rtc.Jahr/10;
		buffer[13]=rtc.Jahr%10;
		buffersize=14;
		for(uint8_t i = 0; i<5;i++){
    21ca:	05 30       	cpi	r16, 0x05	; 5
    21cc:	70 f3       	brcs	.-36     	; 0x21aa <_Z13uhreinstellenv+0x19a>
    21ce:	08 c0       	rjmp	.+16     	; 0x21e0 <_Z13uhreinstellenv+0x1d0>
			if(i!=2){
				oled.draw_number16x16(buffer[i],i*numbersmalsize,2*charhighte);
			}
			else {
				oled.draw_ASCI(buffer[i],i*numbersmalsize+numbersmalsize/2,2*charhighte+charhighte/2);
    21d0:	24 e1       	ldi	r18, 0x14	; 20
    21d2:	48 e2       	ldi	r20, 0x28	; 40
    21d4:	6b 81       	ldd	r22, Y+3	; 0x03
    21d6:	84 ea       	ldi	r24, 0xA4	; 164
    21d8:	92 e0       	ldi	r25, 0x02	; 2
    21da:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    21de:	e5 cf       	rjmp	.-54     	; 0x21aa <_Z13uhreinstellenv+0x19a>
    21e0:	8e 01       	movw	r16, r28
    21e2:	09 5f       	subi	r16, 0xF9	; 249
    21e4:	1f 4f       	sbci	r17, 0xFF	; 255
		buffer[10]=rtc.Monat%10;
		buffer[11]='.';
		buffer[12]=rtc.Jahr/10;
		buffer[13]=rtc.Jahr%10;
		buffersize=14;
		for(uint8_t i = 0; i<5;i++){
    21e6:	2b 2c       	mov	r2, r11
    21e8:	0f 2e       	mov	r0, r31
    21ea:	f6 e0       	ldi	r31, 0x06	; 6
    21ec:	3f 2e       	mov	r3, r31
    21ee:	f0 2d       	mov	r31, r0
			else {
				oled.draw_ASCI(buffer[i],i*numbersmalsize+numbersmalsize/2,2*charhighte+charhighte/2);
			}
		}
		for(uint8_t i = 6; i<buffersize;i++){
			if(i!=8 && i!=11){
    21f0:	88 e0       	ldi	r24, 0x08	; 8
    21f2:	38 16       	cp	r3, r24
    21f4:	61 f0       	breq	.+24     	; 0x220e <_Z13uhreinstellenv+0x1fe>
    21f6:	9b e0       	ldi	r25, 0x0B	; 11
    21f8:	39 16       	cp	r3, r25
    21fa:	49 f0       	breq	.+18     	; 0x220e <_Z13uhreinstellenv+0x1fe>
				oled.draw_number16x16(buffer[i],i*numbersmalsize-6*numbersmalsize,4*charhighte);
    21fc:	20 e2       	ldi	r18, 0x20	; 32
    21fe:	42 2d       	mov	r20, r2
    2200:	f8 01       	movw	r30, r16
    2202:	60 81       	ld	r22, Z
    2204:	84 ea       	ldi	r24, 0xA4	; 164
    2206:	92 e0       	ldi	r25, 0x02	; 2
    2208:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <_ZN7Display16draw_number16x16Ehhh>
    220c:	09 c0       	rjmp	.+18     	; 0x2220 <_Z13uhreinstellenv+0x210>
			}
			else {
				oled.draw_ASCI(buffer[i],i*numbersmalsize+numbersmalsize/2-6*numbersmalsize,5*charhighte);
    220e:	28 e2       	ldi	r18, 0x28	; 40
    2210:	48 e0       	ldi	r20, 0x08	; 8
    2212:	42 0d       	add	r20, r2
    2214:	f8 01       	movw	r30, r16
    2216:	60 81       	ld	r22, Z
    2218:	84 ea       	ldi	r24, 0xA4	; 164
    221a:	92 e0       	ldi	r25, 0x02	; 2
    221c:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
			}
			else {
				oled.draw_ASCI(buffer[i],i*numbersmalsize+numbersmalsize/2,2*charhighte+charhighte/2);
			}
		}
		for(uint8_t i = 6; i<buffersize;i++){
    2220:	33 94       	inc	r3
    2222:	0f 5f       	subi	r16, 0xFF	; 255
    2224:	1f 4f       	sbci	r17, 0xFF	; 255
    2226:	f0 e1       	ldi	r31, 0x10	; 16
    2228:	2f 0e       	add	r2, r31
    222a:	8e e0       	ldi	r24, 0x0E	; 14
    222c:	38 12       	cpse	r3, r24
    222e:	e0 cf       	rjmp	.-64     	; 0x21f0 <_Z13uhreinstellenv+0x1e0>
			else {
				oled.draw_ASCI(buffer[i],i*numbersmalsize+numbersmalsize/2-6*numbersmalsize,5*charhighte);
			}
		}

		oled.sendFrame();
    2230:	84 ea       	ldi	r24, 0xA4	; 164
    2232:	92 e0       	ldi	r25, 0x02	; 2
    2234:	0e 94 5f 03 	call	0x6be	; 0x6be <_ZN7Display9sendFrameEv>
		oled.clearFrame();
    2238:	84 ea       	ldi	r24, 0xA4	; 164
    223a:	92 e0       	ldi	r25, 0x02	; 2
    223c:	0e 94 b9 02 	call	0x572	; 0x572 <_ZN7Display10clearFrameEv>
		switch (pos) {
    2240:	89 2d       	mov	r24, r9
    2242:	90 e0       	ldi	r25, 0x00	; 0
    2244:	8a 30       	cpi	r24, 0x0A	; 10
    2246:	91 05       	cpc	r25, r1
    2248:	08 f0       	brcs	.+2      	; 0x224c <_Z13uhreinstellenv+0x23c>
    224a:	47 c2       	rjmp	.+1166   	; 0x26da <_Z13uhreinstellenv+0x6ca>
    224c:	fc 01       	movw	r30, r24
    224e:	ec 5c       	subi	r30, 0xCC	; 204
    2250:	ff 4f       	sbci	r31, 0xFF	; 255
    2252:	0c 94 e5 22 	jmp	0x45ca	; 0x45ca <__tablejump2__>
			case 0:
				rtc.Stunden=Tastatur.ZahlenausTastatur()*10;
    2256:	83 ea       	ldi	r24, 0xA3	; 163
    2258:	92 e0       	ldi	r25, 0x02	; 2
    225a:	0e 94 50 19 	call	0x32a0	; 0x32a0 <_ZN9Interface17ZahlenausTastaturEv>
    225e:	88 0f       	add	r24, r24
    2260:	98 2f       	mov	r25, r24
    2262:	99 0f       	add	r25, r25
    2264:	99 0f       	add	r25, r25
    2266:	89 0f       	add	r24, r25
				if(rtc.Stunden>=24){
    2268:	88 31       	cpi	r24, 0x18	; 24
    226a:	08 f4       	brcc	.+2      	; 0x226e <_Z13uhreinstellenv+0x25e>
    226c:	51 c2       	rjmp	.+1186   	; 0x2710 <_Z13uhreinstellenv+0x700>
					rtc.Stunden=0;
    226e:	e5 ee       	ldi	r30, 0xE5	; 229
    2270:	f6 e0       	ldi	r31, 0x06	; 6
    2272:	10 82       	st	Z, r1
					pos=-1;
					buffersize=sprintf(buffer,"Stunden falsch");
    2274:	e6 e5       	ldi	r30, 0x56	; 86
    2276:	f2 e0       	ldi	r31, 0x02	; 2
    2278:	a7 2d       	mov	r26, r7
    227a:	b8 2d       	mov	r27, r8
    227c:	86 2d       	mov	r24, r6
    227e:	01 90       	ld	r0, Z+
    2280:	0d 92       	st	X+, r0
    2282:	8a 95       	dec	r24
    2284:	e1 f7       	brne	.-8      	; 0x227e <_Z13uhreinstellenv+0x26e>
    2286:	2d 88       	ldd	r2, Y+21	; 0x15
    2288:	3e 88       	ldd	r3, Y+22	; 0x16
    228a:	1b 2d       	mov	r17, r11
					for(uint8_t i = 0; i<buffersize;i++){
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
    228c:	f1 01       	movw	r30, r2
    228e:	61 91       	ld	r22, Z+
    2290:	1f 01       	movw	r2, r30
    2292:	28 e3       	ldi	r18, 0x38	; 56
    2294:	41 2f       	mov	r20, r17
    2296:	84 ea       	ldi	r24, 0xA4	; 164
    2298:	92 e0       	ldi	r25, 0x02	; 2
    229a:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    229e:	1a 5f       	subi	r17, 0xFA	; 250
				rtc.Stunden=Tastatur.ZahlenausTastatur()*10;
				if(rtc.Stunden>=24){
					rtc.Stunden=0;
					pos=-1;
					buffersize=sprintf(buffer,"Stunden falsch");
					for(uint8_t i = 0; i<buffersize;i++){
    22a0:	14 35       	cpi	r17, 0x54	; 84
    22a2:	a1 f7       	brne	.-24     	; 0x228c <_Z13uhreinstellenv+0x27c>
    22a4:	39 c2       	rjmp	.+1138   	; 0x2718 <_Z13uhreinstellenv+0x708>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 1:
				rtc.Stunden+=Tastatur.ZahlenausTastatur();
    22a6:	83 ea       	ldi	r24, 0xA3	; 163
    22a8:	92 e0       	ldi	r25, 0x02	; 2
    22aa:	0e 94 50 19 	call	0x32a0	; 0x32a0 <_ZN9Interface17ZahlenausTastaturEv>
    22ae:	e5 ee       	ldi	r30, 0xE5	; 229
    22b0:	f6 e0       	ldi	r31, 0x06	; 6
    22b2:	20 81       	ld	r18, Z
    22b4:	90 e0       	ldi	r25, 0x00	; 0
    22b6:	82 0f       	add	r24, r18
    22b8:	91 1d       	adc	r25, r1
				if(rtc.Stunden>=24){
    22ba:	88 31       	cpi	r24, 0x18	; 24
    22bc:	10 f4       	brcc	.+4      	; 0x22c2 <_Z13uhreinstellenv+0x2b2>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 1:
				rtc.Stunden+=Tastatur.ZahlenausTastatur();
    22be:	80 83       	st	Z, r24
    22c0:	5e c2       	rjmp	.+1212   	; 0x277e <_Z13uhreinstellenv+0x76e>
				if(rtc.Stunden>=24){
					rtc.Stunden=0;
    22c2:	e5 ee       	ldi	r30, 0xE5	; 229
    22c4:	f6 e0       	ldi	r31, 0x06	; 6
    22c6:	10 82       	st	Z, r1
					pos=-1;
					buffersize=sprintf(buffer,"Stunden falsch");
    22c8:	e6 e5       	ldi	r30, 0x56	; 86
    22ca:	f2 e0       	ldi	r31, 0x02	; 2
    22cc:	a7 2d       	mov	r26, r7
    22ce:	b8 2d       	mov	r27, r8
    22d0:	86 2d       	mov	r24, r6
    22d2:	01 90       	ld	r0, Z+
    22d4:	0d 92       	st	X+, r0
    22d6:	8a 95       	dec	r24
    22d8:	e1 f7       	brne	.-8      	; 0x22d2 <_Z13uhreinstellenv+0x2c2>
    22da:	2d 88       	ldd	r2, Y+21	; 0x15
    22dc:	3e 88       	ldd	r3, Y+22	; 0x16
    22de:	1b 2d       	mov	r17, r11
					for(uint8_t i = 0; i<buffersize;i++){
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
    22e0:	f1 01       	movw	r30, r2
    22e2:	61 91       	ld	r22, Z+
    22e4:	1f 01       	movw	r2, r30
    22e6:	28 e3       	ldi	r18, 0x38	; 56
    22e8:	41 2f       	mov	r20, r17
    22ea:	84 ea       	ldi	r24, 0xA4	; 164
    22ec:	92 e0       	ldi	r25, 0x02	; 2
    22ee:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    22f2:	1a 5f       	subi	r17, 0xFA	; 250
				rtc.Stunden+=Tastatur.ZahlenausTastatur();
				if(rtc.Stunden>=24){
					rtc.Stunden=0;
					pos=-1;
					buffersize=sprintf(buffer,"Stunden falsch");
					for(uint8_t i = 0; i<buffersize;i++){
    22f4:	14 35       	cpi	r17, 0x54	; 84
    22f6:	a1 f7       	brne	.-24     	; 0x22e0 <_Z13uhreinstellenv+0x2d0>
    22f8:	12 c2       	rjmp	.+1060   	; 0x271e <_Z13uhreinstellenv+0x70e>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 2:
				rtc.Minuten=Tastatur.ZahlenausTastatur()*10;
    22fa:	83 ea       	ldi	r24, 0xA3	; 163
    22fc:	92 e0       	ldi	r25, 0x02	; 2
    22fe:	0e 94 50 19 	call	0x32a0	; 0x32a0 <_ZN9Interface17ZahlenausTastaturEv>
    2302:	88 0f       	add	r24, r24
    2304:	98 2f       	mov	r25, r24
    2306:	99 0f       	add	r25, r25
    2308:	99 0f       	add	r25, r25
    230a:	89 0f       	add	r24, r25
				if(rtc.Minuten>=60){
    230c:	8c 33       	cpi	r24, 0x3C	; 60
    230e:	20 f4       	brcc	.+8      	; 0x2318 <_Z13uhreinstellenv+0x308>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 2:
				rtc.Minuten=Tastatur.ZahlenausTastatur()*10;
    2310:	e6 ee       	ldi	r30, 0xE6	; 230
    2312:	f6 e0       	ldi	r31, 0x06	; 6
    2314:	80 83       	st	Z, r24
    2316:	33 c2       	rjmp	.+1126   	; 0x277e <_Z13uhreinstellenv+0x76e>
				if(rtc.Minuten>=60){
					rtc.Minuten=0;
    2318:	e6 ee       	ldi	r30, 0xE6	; 230
    231a:	f6 e0       	ldi	r31, 0x06	; 6
    231c:	10 82       	st	Z, r1
					pos=1;
					buffersize=sprintf(buffer,"Minuten falsch");
    231e:	e5 e6       	ldi	r30, 0x65	; 101
    2320:	f2 e0       	ldi	r31, 0x02	; 2
    2322:	a7 2d       	mov	r26, r7
    2324:	b8 2d       	mov	r27, r8
    2326:	86 2d       	mov	r24, r6
    2328:	01 90       	ld	r0, Z+
    232a:	0d 92       	st	X+, r0
    232c:	8a 95       	dec	r24
    232e:	e1 f7       	brne	.-8      	; 0x2328 <_Z13uhreinstellenv+0x318>
    2330:	2d 88       	ldd	r2, Y+21	; 0x15
    2332:	3e 88       	ldd	r3, Y+22	; 0x16
    2334:	1b 2d       	mov	r17, r11
					for(uint8_t i = 0; i<buffersize;i++){
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
    2336:	f1 01       	movw	r30, r2
    2338:	61 91       	ld	r22, Z+
    233a:	1f 01       	movw	r2, r30
    233c:	28 e3       	ldi	r18, 0x38	; 56
    233e:	41 2f       	mov	r20, r17
    2340:	84 ea       	ldi	r24, 0xA4	; 164
    2342:	92 e0       	ldi	r25, 0x02	; 2
    2344:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    2348:	1a 5f       	subi	r17, 0xFA	; 250
				rtc.Minuten=Tastatur.ZahlenausTastatur()*10;
				if(rtc.Minuten>=60){
					rtc.Minuten=0;
					pos=1;
					buffersize=sprintf(buffer,"Minuten falsch");
					for(uint8_t i = 0; i<buffersize;i++){
    234a:	14 35       	cpi	r17, 0x54	; 84
    234c:	a1 f7       	brne	.-24     	; 0x2336 <_Z13uhreinstellenv+0x326>
    234e:	ea c1       	rjmp	.+980    	; 0x2724 <_Z13uhreinstellenv+0x714>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 3:
				rtc.Minuten+=Tastatur.ZahlenausTastatur();
    2350:	83 ea       	ldi	r24, 0xA3	; 163
    2352:	92 e0       	ldi	r25, 0x02	; 2
    2354:	0e 94 50 19 	call	0x32a0	; 0x32a0 <_ZN9Interface17ZahlenausTastaturEv>
    2358:	e6 ee       	ldi	r30, 0xE6	; 230
    235a:	f6 e0       	ldi	r31, 0x06	; 6
    235c:	20 81       	ld	r18, Z
    235e:	90 e0       	ldi	r25, 0x00	; 0
    2360:	82 0f       	add	r24, r18
    2362:	91 1d       	adc	r25, r1
				if(rtc.Minuten>=60){
    2364:	8c 33       	cpi	r24, 0x3C	; 60
    2366:	10 f4       	brcc	.+4      	; 0x236c <_Z13uhreinstellenv+0x35c>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 3:
				rtc.Minuten+=Tastatur.ZahlenausTastatur();
    2368:	80 83       	st	Z, r24
    236a:	09 c2       	rjmp	.+1042   	; 0x277e <_Z13uhreinstellenv+0x76e>
				if(rtc.Minuten>=60){
					rtc.Minuten=0;
    236c:	e6 ee       	ldi	r30, 0xE6	; 230
    236e:	f6 e0       	ldi	r31, 0x06	; 6
    2370:	10 82       	st	Z, r1
					pos=1;
					buffersize=sprintf(buffer,"Minuten falsch");
    2372:	e5 e6       	ldi	r30, 0x65	; 101
    2374:	f2 e0       	ldi	r31, 0x02	; 2
    2376:	a7 2d       	mov	r26, r7
    2378:	b8 2d       	mov	r27, r8
    237a:	86 2d       	mov	r24, r6
    237c:	01 90       	ld	r0, Z+
    237e:	0d 92       	st	X+, r0
    2380:	8a 95       	dec	r24
    2382:	e1 f7       	brne	.-8      	; 0x237c <_Z13uhreinstellenv+0x36c>
    2384:	2d 88       	ldd	r2, Y+21	; 0x15
    2386:	3e 88       	ldd	r3, Y+22	; 0x16
    2388:	1b 2d       	mov	r17, r11
					for(uint8_t i = 0; i<buffersize;i++){
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
    238a:	f1 01       	movw	r30, r2
    238c:	61 91       	ld	r22, Z+
    238e:	1f 01       	movw	r2, r30
    2390:	28 e3       	ldi	r18, 0x38	; 56
    2392:	41 2f       	mov	r20, r17
    2394:	84 ea       	ldi	r24, 0xA4	; 164
    2396:	92 e0       	ldi	r25, 0x02	; 2
    2398:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    239c:	1a 5f       	subi	r17, 0xFA	; 250
				rtc.Minuten+=Tastatur.ZahlenausTastatur();
				if(rtc.Minuten>=60){
					rtc.Minuten=0;
					pos=1;
					buffersize=sprintf(buffer,"Minuten falsch");
					for(uint8_t i = 0; i<buffersize;i++){
    239e:	14 35       	cpi	r17, 0x54	; 84
    23a0:	a1 f7       	brne	.-24     	; 0x238a <_Z13uhreinstellenv+0x37a>
    23a2:	c3 c1       	rjmp	.+902    	; 0x272a <_Z13uhreinstellenv+0x71a>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 4:
				rtc.Tag=Tastatur.ZahlenausTastatur()*10;
    23a4:	83 ea       	ldi	r24, 0xA3	; 163
    23a6:	92 e0       	ldi	r25, 0x02	; 2
    23a8:	0e 94 50 19 	call	0x32a0	; 0x32a0 <_ZN9Interface17ZahlenausTastaturEv>
    23ac:	88 0f       	add	r24, r24
    23ae:	98 2f       	mov	r25, r24
    23b0:	99 0f       	add	r25, r25
    23b2:	99 0f       	add	r25, r25
    23b4:	89 0f       	add	r24, r25
				if(rtc.Tag>=32){
    23b6:	80 32       	cpi	r24, 0x20	; 32
    23b8:	18 f4       	brcc	.+6      	; 0x23c0 <_Z13uhreinstellenv+0x3b0>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 4:
				rtc.Tag=Tastatur.ZahlenausTastatur()*10;
    23ba:	f2 01       	movw	r30, r4
    23bc:	80 83       	st	Z, r24
    23be:	df c1       	rjmp	.+958    	; 0x277e <_Z13uhreinstellenv+0x76e>
				if(rtc.Tag>=32){
					rtc.Tag=0;
    23c0:	f2 01       	movw	r30, r4
    23c2:	10 82       	st	Z, r1
					pos=3;
					buffersize=sprintf(buffer,"Tag falsch");
    23c4:	8b e0       	ldi	r24, 0x0B	; 11
    23c6:	e4 e7       	ldi	r30, 0x74	; 116
    23c8:	f2 e0       	ldi	r31, 0x02	; 2
    23ca:	a7 2d       	mov	r26, r7
    23cc:	b8 2d       	mov	r27, r8
    23ce:	01 90       	ld	r0, Z+
    23d0:	0d 92       	st	X+, r0
    23d2:	8a 95       	dec	r24
    23d4:	e1 f7       	brne	.-8      	; 0x23ce <_Z13uhreinstellenv+0x3be>
    23d6:	2d 88       	ldd	r2, Y+21	; 0x15
    23d8:	3e 88       	ldd	r3, Y+22	; 0x16
    23da:	1b 2d       	mov	r17, r11
					for(uint8_t i = 0; i<buffersize;i++){
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
    23dc:	f1 01       	movw	r30, r2
    23de:	61 91       	ld	r22, Z+
    23e0:	1f 01       	movw	r2, r30
    23e2:	28 e3       	ldi	r18, 0x38	; 56
    23e4:	41 2f       	mov	r20, r17
    23e6:	84 ea       	ldi	r24, 0xA4	; 164
    23e8:	92 e0       	ldi	r25, 0x02	; 2
    23ea:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    23ee:	1a 5f       	subi	r17, 0xFA	; 250
				rtc.Tag=Tastatur.ZahlenausTastatur()*10;
				if(rtc.Tag>=32){
					rtc.Tag=0;
					pos=3;
					buffersize=sprintf(buffer,"Tag falsch");
					for(uint8_t i = 0; i<buffersize;i++){
    23f0:	1c 33       	cpi	r17, 0x3C	; 60
    23f2:	a1 f7       	brne	.-24     	; 0x23dc <_Z13uhreinstellenv+0x3cc>
    23f4:	9d c1       	rjmp	.+826    	; 0x2730 <_Z13uhreinstellenv+0x720>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 5:
				rtc.Tag+=Tastatur.ZahlenausTastatur();
    23f6:	83 ea       	ldi	r24, 0xA3	; 163
    23f8:	92 e0       	ldi	r25, 0x02	; 2
    23fa:	0e 94 50 19 	call	0x32a0	; 0x32a0 <_ZN9Interface17ZahlenausTastaturEv>
    23fe:	f2 01       	movw	r30, r4
    2400:	20 81       	ld	r18, Z
    2402:	90 e0       	ldi	r25, 0x00	; 0
    2404:	82 0f       	add	r24, r18
    2406:	91 1d       	adc	r25, r1
				if(rtc.Tag>=32){
    2408:	80 32       	cpi	r24, 0x20	; 32
    240a:	10 f4       	brcc	.+4      	; 0x2410 <_Z13uhreinstellenv+0x400>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 5:
				rtc.Tag+=Tastatur.ZahlenausTastatur();
    240c:	80 83       	st	Z, r24
    240e:	b7 c1       	rjmp	.+878    	; 0x277e <_Z13uhreinstellenv+0x76e>
				if(rtc.Tag>=32){
					rtc.Tag=0;
    2410:	f2 01       	movw	r30, r4
    2412:	10 82       	st	Z, r1
					pos=3;
					buffersize=sprintf(buffer,"Tag falsch");
    2414:	8b e0       	ldi	r24, 0x0B	; 11
    2416:	e4 e7       	ldi	r30, 0x74	; 116
    2418:	f2 e0       	ldi	r31, 0x02	; 2
    241a:	a7 2d       	mov	r26, r7
    241c:	b8 2d       	mov	r27, r8
    241e:	01 90       	ld	r0, Z+
    2420:	0d 92       	st	X+, r0
    2422:	8a 95       	dec	r24
    2424:	e1 f7       	brne	.-8      	; 0x241e <_Z13uhreinstellenv+0x40e>
    2426:	2d 88       	ldd	r2, Y+21	; 0x15
    2428:	3e 88       	ldd	r3, Y+22	; 0x16
    242a:	1b 2d       	mov	r17, r11
					for(uint8_t i = 0; i<buffersize;i++){
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
    242c:	f1 01       	movw	r30, r2
    242e:	61 91       	ld	r22, Z+
    2430:	1f 01       	movw	r2, r30
    2432:	28 e3       	ldi	r18, 0x38	; 56
    2434:	41 2f       	mov	r20, r17
    2436:	84 ea       	ldi	r24, 0xA4	; 164
    2438:	92 e0       	ldi	r25, 0x02	; 2
    243a:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    243e:	1a 5f       	subi	r17, 0xFA	; 250
				rtc.Tag+=Tastatur.ZahlenausTastatur();
				if(rtc.Tag>=32){
					rtc.Tag=0;
					pos=3;
					buffersize=sprintf(buffer,"Tag falsch");
					for(uint8_t i = 0; i<buffersize;i++){
    2440:	1c 33       	cpi	r17, 0x3C	; 60
    2442:	a1 f7       	brne	.-24     	; 0x242c <_Z13uhreinstellenv+0x41c>
    2444:	7a c1       	rjmp	.+756    	; 0x273a <_Z13uhreinstellenv+0x72a>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 6:
				rtc.Monat=Tastatur.ZahlenausTastatur()*10;
    2446:	83 ea       	ldi	r24, 0xA3	; 163
    2448:	92 e0       	ldi	r25, 0x02	; 2
    244a:	0e 94 50 19 	call	0x32a0	; 0x32a0 <_ZN9Interface17ZahlenausTastaturEv>
    244e:	88 0f       	add	r24, r24
    2450:	98 2f       	mov	r25, r24
    2452:	99 0f       	add	r25, r25
    2454:	99 0f       	add	r25, r25
    2456:	89 0f       	add	r24, r25
				if(rtc.Monat>=13){
    2458:	8d 30       	cpi	r24, 0x0D	; 13
    245a:	18 f4       	brcc	.+6      	; 0x2462 <_Z13uhreinstellenv+0x452>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 6:
				rtc.Monat=Tastatur.ZahlenausTastatur()*10;
    245c:	f6 01       	movw	r30, r12
    245e:	80 83       	st	Z, r24
    2460:	8e c1       	rjmp	.+796    	; 0x277e <_Z13uhreinstellenv+0x76e>
				if(rtc.Monat>=13){
					rtc.Monat=0;
    2462:	f6 01       	movw	r30, r12
    2464:	10 82       	st	Z, r1
					pos=5;
					buffersize=sprintf(buffer,"Monat falsch");
    2466:	8d e0       	ldi	r24, 0x0D	; 13
    2468:	ef e7       	ldi	r30, 0x7F	; 127
    246a:	f2 e0       	ldi	r31, 0x02	; 2
    246c:	a7 2d       	mov	r26, r7
    246e:	b8 2d       	mov	r27, r8
    2470:	01 90       	ld	r0, Z+
    2472:	0d 92       	st	X+, r0
    2474:	8a 95       	dec	r24
    2476:	e1 f7       	brne	.-8      	; 0x2470 <_Z13uhreinstellenv+0x460>
    2478:	2d 88       	ldd	r2, Y+21	; 0x15
    247a:	3e 88       	ldd	r3, Y+22	; 0x16
    247c:	1b 2d       	mov	r17, r11
					for(uint8_t i = 0; i<buffersize;i++){
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
    247e:	f1 01       	movw	r30, r2
    2480:	61 91       	ld	r22, Z+
    2482:	1f 01       	movw	r2, r30
    2484:	28 e3       	ldi	r18, 0x38	; 56
    2486:	41 2f       	mov	r20, r17
    2488:	84 ea       	ldi	r24, 0xA4	; 164
    248a:	92 e0       	ldi	r25, 0x02	; 2
    248c:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    2490:	1a 5f       	subi	r17, 0xFA	; 250
				rtc.Monat=Tastatur.ZahlenausTastatur()*10;
				if(rtc.Monat>=13){
					rtc.Monat=0;
					pos=5;
					buffersize=sprintf(buffer,"Monat falsch");
					for(uint8_t i = 0; i<buffersize;i++){
    2492:	18 34       	cpi	r17, 0x48	; 72
    2494:	a1 f7       	brne	.-24     	; 0x247e <_Z13uhreinstellenv+0x46e>
    2496:	56 c1       	rjmp	.+684    	; 0x2744 <_Z13uhreinstellenv+0x734>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 7:
				rtc.Monat+=Tastatur.ZahlenausTastatur();
    2498:	83 ea       	ldi	r24, 0xA3	; 163
    249a:	92 e0       	ldi	r25, 0x02	; 2
    249c:	0e 94 50 19 	call	0x32a0	; 0x32a0 <_ZN9Interface17ZahlenausTastaturEv>
    24a0:	f6 01       	movw	r30, r12
    24a2:	20 81       	ld	r18, Z
    24a4:	90 e0       	ldi	r25, 0x00	; 0
    24a6:	82 0f       	add	r24, r18
    24a8:	91 1d       	adc	r25, r1
				if(rtc.Monat>=13){
    24aa:	8d 30       	cpi	r24, 0x0D	; 13
    24ac:	10 f4       	brcc	.+4      	; 0x24b2 <_Z13uhreinstellenv+0x4a2>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 7:
				rtc.Monat+=Tastatur.ZahlenausTastatur();
    24ae:	80 83       	st	Z, r24
    24b0:	1e c0       	rjmp	.+60     	; 0x24ee <_Z13uhreinstellenv+0x4de>
				if(rtc.Monat>=13){
					rtc.Monat=0;
    24b2:	f6 01       	movw	r30, r12
    24b4:	10 82       	st	Z, r1
					pos=5;
					buffersize=sprintf(buffer,"Monat falsch");
    24b6:	8d e0       	ldi	r24, 0x0D	; 13
    24b8:	ef e7       	ldi	r30, 0x7F	; 127
    24ba:	f2 e0       	ldi	r31, 0x02	; 2
    24bc:	a7 2d       	mov	r26, r7
    24be:	b8 2d       	mov	r27, r8
    24c0:	01 90       	ld	r0, Z+
    24c2:	0d 92       	st	X+, r0
    24c4:	8a 95       	dec	r24
    24c6:	e1 f7       	brne	.-8      	; 0x24c0 <_Z13uhreinstellenv+0x4b0>
    24c8:	2d 88       	ldd	r2, Y+21	; 0x15
    24ca:	3e 88       	ldd	r3, Y+22	; 0x16
    24cc:	1b 2d       	mov	r17, r11
					for(uint8_t i = 0; i<buffersize;i++){
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
    24ce:	f1 01       	movw	r30, r2
    24d0:	61 91       	ld	r22, Z+
    24d2:	1f 01       	movw	r2, r30
    24d4:	28 e3       	ldi	r18, 0x38	; 56
    24d6:	41 2f       	mov	r20, r17
    24d8:	84 ea       	ldi	r24, 0xA4	; 164
    24da:	92 e0       	ldi	r25, 0x02	; 2
    24dc:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    24e0:	1a 5f       	subi	r17, 0xFA	; 250
				rtc.Monat+=Tastatur.ZahlenausTastatur();
				if(rtc.Monat>=13){
					rtc.Monat=0;
					pos=5;
					buffersize=sprintf(buffer,"Monat falsch");
					for(uint8_t i = 0; i<buffersize;i++){
    24e2:	18 34       	cpi	r17, 0x48	; 72
    24e4:	a1 f7       	brne	.-24     	; 0x24ce <_Z13uhreinstellenv+0x4be>
				break;
			case 7:
				rtc.Monat+=Tastatur.ZahlenausTastatur();
				if(rtc.Monat>=13){
					rtc.Monat=0;
					pos=5;
    24e6:	0f 2e       	mov	r0, r31
    24e8:	f5 e0       	ldi	r31, 0x05	; 5
    24ea:	9f 2e       	mov	r9, r31
    24ec:	f0 2d       	mov	r31, r0
					buffersize=sprintf(buffer,"Monat falsch");
					for(uint8_t i = 0; i<buffersize;i++){
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				if(rtc.Monat==4||rtc.Monat==6||rtc.Monat==9||rtc.Monat==11){
    24ee:	f6 01       	movw	r30, r12
    24f0:	90 81       	ld	r25, Z
    24f2:	89 2f       	mov	r24, r25
    24f4:	8d 7f       	andi	r24, 0xFD	; 253
    24f6:	84 30       	cpi	r24, 0x04	; 4
    24f8:	11 f0       	breq	.+4      	; 0x24fe <_Z13uhreinstellenv+0x4ee>
    24fa:	89 30       	cpi	r24, 0x09	; 9
    24fc:	09 f5       	brne	.+66     	; 0x2540 <_Z13uhreinstellenv+0x530>
					if(rtc.Tag>=31){
    24fe:	f2 01       	movw	r30, r4
    2500:	80 81       	ld	r24, Z
    2502:	8f 31       	cpi	r24, 0x1F	; 31
    2504:	08 f4       	brcc	.+2      	; 0x2508 <_Z13uhreinstellenv+0x4f8>
    2506:	ea c0       	rjmp	.+468    	; 0x26dc <_Z13uhreinstellenv+0x6cc>
						rtc.Tag=0;
    2508:	10 82       	st	Z, r1
						rtc.Monat=0;
    250a:	f6 01       	movw	r30, r12
    250c:	10 82       	st	Z, r1
						pos=3;
						buffersize=sprintf(buffer,"Tag falsch");
    250e:	8b e0       	ldi	r24, 0x0B	; 11
    2510:	e4 e7       	ldi	r30, 0x74	; 116
    2512:	f2 e0       	ldi	r31, 0x02	; 2
    2514:	a7 2d       	mov	r26, r7
    2516:	b8 2d       	mov	r27, r8
    2518:	01 90       	ld	r0, Z+
    251a:	0d 92       	st	X+, r0
    251c:	8a 95       	dec	r24
    251e:	e1 f7       	brne	.-8      	; 0x2518 <_Z13uhreinstellenv+0x508>
    2520:	2d 88       	ldd	r2, Y+21	; 0x15
    2522:	3e 88       	ldd	r3, Y+22	; 0x16
    2524:	1b 2d       	mov	r17, r11
						for(uint8_t i = 0; i<buffersize;i++){
							oled.draw_ASCI(buffer[i],charsize*i,7*8);
    2526:	f1 01       	movw	r30, r2
    2528:	61 91       	ld	r22, Z+
    252a:	1f 01       	movw	r2, r30
    252c:	28 e3       	ldi	r18, 0x38	; 56
    252e:	41 2f       	mov	r20, r17
    2530:	84 ea       	ldi	r24, 0xA4	; 164
    2532:	92 e0       	ldi	r25, 0x02	; 2
    2534:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    2538:	1a 5f       	subi	r17, 0xFA	; 250
					if(rtc.Tag>=31){
						rtc.Tag=0;
						rtc.Monat=0;
						pos=3;
						buffersize=sprintf(buffer,"Tag falsch");
						for(uint8_t i = 0; i<buffersize;i++){
    253a:	1c 33       	cpi	r17, 0x3C	; 60
    253c:	a1 f7       	brne	.-24     	; 0x2526 <_Z13uhreinstellenv+0x516>
    253e:	07 c1       	rjmp	.+526    	; 0x274e <_Z13uhreinstellenv+0x73e>
							oled.draw_ASCI(buffer[i],charsize*i,7*8);
						}
					}
				}
				else if(rtc.Monat==2){
    2540:	92 30       	cpi	r25, 0x02	; 2
    2542:	09 f0       	breq	.+2      	; 0x2546 <_Z13uhreinstellenv+0x536>
    2544:	cb c0       	rjmp	.+406    	; 0x26dc <_Z13uhreinstellenv+0x6cc>
					if(rtc.Tag>=30){
    2546:	f2 01       	movw	r30, r4
    2548:	80 81       	ld	r24, Z
    254a:	8e 31       	cpi	r24, 0x1E	; 30
    254c:	08 f4       	brcc	.+2      	; 0x2550 <_Z13uhreinstellenv+0x540>
    254e:	c6 c0       	rjmp	.+396    	; 0x26dc <_Z13uhreinstellenv+0x6cc>
						rtc.Tag=0;
    2550:	10 82       	st	Z, r1
						rtc.Monat=0;
    2552:	f6 01       	movw	r30, r12
    2554:	10 82       	st	Z, r1
						pos=3;
						buffersize=sprintf(buffer,"Tag falsch");
    2556:	8b e0       	ldi	r24, 0x0B	; 11
    2558:	e4 e7       	ldi	r30, 0x74	; 116
    255a:	f2 e0       	ldi	r31, 0x02	; 2
    255c:	a7 2d       	mov	r26, r7
    255e:	b8 2d       	mov	r27, r8
    2560:	01 90       	ld	r0, Z+
    2562:	0d 92       	st	X+, r0
    2564:	8a 95       	dec	r24
    2566:	e1 f7       	brne	.-8      	; 0x2560 <_Z13uhreinstellenv+0x550>
    2568:	2d 88       	ldd	r2, Y+21	; 0x15
    256a:	3e 88       	ldd	r3, Y+22	; 0x16
    256c:	1b 2d       	mov	r17, r11
						for(uint8_t i = 0; i<buffersize;i++){
							oled.draw_ASCI(buffer[i],charsize*i,7*8);
    256e:	f1 01       	movw	r30, r2
    2570:	61 91       	ld	r22, Z+
    2572:	1f 01       	movw	r2, r30
    2574:	28 e3       	ldi	r18, 0x38	; 56
    2576:	41 2f       	mov	r20, r17
    2578:	84 ea       	ldi	r24, 0xA4	; 164
    257a:	92 e0       	ldi	r25, 0x02	; 2
    257c:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    2580:	1a 5f       	subi	r17, 0xFA	; 250
					if(rtc.Tag>=30){
						rtc.Tag=0;
						rtc.Monat=0;
						pos=3;
						buffersize=sprintf(buffer,"Tag falsch");
						for(uint8_t i = 0; i<buffersize;i++){
    2582:	1c 33       	cpi	r17, 0x3C	; 60
    2584:	a1 f7       	brne	.-24     	; 0x256e <_Z13uhreinstellenv+0x55e>
    2586:	e8 c0       	rjmp	.+464    	; 0x2758 <_Z13uhreinstellenv+0x748>
						}
					}
				}
				break;
			case 8:
				rtc.Jahr=Tastatur.ZahlenausTastatur()*10;
    2588:	83 ea       	ldi	r24, 0xA3	; 163
    258a:	92 e0       	ldi	r25, 0x02	; 2
    258c:	0e 94 50 19 	call	0x32a0	; 0x32a0 <_ZN9Interface17ZahlenausTastaturEv>
    2590:	88 0f       	add	r24, r24
    2592:	98 2f       	mov	r25, r24
    2594:	99 0f       	add	r25, r25
    2596:	99 0f       	add	r25, r25
    2598:	89 0f       	add	r24, r25
				if(rtc.Jahr>=50){
    259a:	82 33       	cpi	r24, 0x32	; 50
    259c:	20 f4       	brcc	.+8      	; 0x25a6 <_Z13uhreinstellenv+0x596>
						}
					}
				}
				break;
			case 8:
				rtc.Jahr=Tastatur.ZahlenausTastatur()*10;
    259e:	eb ee       	ldi	r30, 0xEB	; 235
    25a0:	f6 e0       	ldi	r31, 0x06	; 6
    25a2:	80 83       	st	Z, r24
    25a4:	ec c0       	rjmp	.+472    	; 0x277e <_Z13uhreinstellenv+0x76e>
				if(rtc.Jahr>=50){
					rtc.Jahr=0;
    25a6:	eb ee       	ldi	r30, 0xEB	; 235
    25a8:	f6 e0       	ldi	r31, 0x06	; 6
    25aa:	10 82       	st	Z, r1
					pos=7;
					buffersize=sprintf(buffer,"Jahr falsch");
    25ac:	8c e0       	ldi	r24, 0x0C	; 12
    25ae:	ec e8       	ldi	r30, 0x8C	; 140
    25b0:	f2 e0       	ldi	r31, 0x02	; 2
    25b2:	a7 2d       	mov	r26, r7
    25b4:	b8 2d       	mov	r27, r8
    25b6:	01 90       	ld	r0, Z+
    25b8:	0d 92       	st	X+, r0
    25ba:	8a 95       	dec	r24
    25bc:	e1 f7       	brne	.-8      	; 0x25b6 <_Z13uhreinstellenv+0x5a6>
    25be:	2d 88       	ldd	r2, Y+21	; 0x15
    25c0:	3e 88       	ldd	r3, Y+22	; 0x16
    25c2:	1b 2d       	mov	r17, r11
					for(uint8_t i = 0; i<buffersize;i++){
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
    25c4:	f1 01       	movw	r30, r2
    25c6:	61 91       	ld	r22, Z+
    25c8:	1f 01       	movw	r2, r30
    25ca:	28 e3       	ldi	r18, 0x38	; 56
    25cc:	41 2f       	mov	r20, r17
    25ce:	84 ea       	ldi	r24, 0xA4	; 164
    25d0:	92 e0       	ldi	r25, 0x02	; 2
    25d2:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    25d6:	1a 5f       	subi	r17, 0xFA	; 250
				rtc.Jahr=Tastatur.ZahlenausTastatur()*10;
				if(rtc.Jahr>=50){
					rtc.Jahr=0;
					pos=7;
					buffersize=sprintf(buffer,"Jahr falsch");
					for(uint8_t i = 0; i<buffersize;i++){
    25d8:	12 34       	cpi	r17, 0x42	; 66
    25da:	a1 f7       	brne	.-24     	; 0x25c4 <_Z13uhreinstellenv+0x5b4>
    25dc:	c2 c0       	rjmp	.+388    	; 0x2762 <_Z13uhreinstellenv+0x752>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 9:
				rtc.Jahr+=Tastatur.ZahlenausTastatur();
    25de:	83 ea       	ldi	r24, 0xA3	; 163
    25e0:	92 e0       	ldi	r25, 0x02	; 2
    25e2:	0e 94 50 19 	call	0x32a0	; 0x32a0 <_ZN9Interface17ZahlenausTastaturEv>
    25e6:	eb ee       	ldi	r30, 0xEB	; 235
    25e8:	f6 e0       	ldi	r31, 0x06	; 6
    25ea:	20 81       	ld	r18, Z
    25ec:	90 e0       	ldi	r25, 0x00	; 0
    25ee:	82 0f       	add	r24, r18
    25f0:	91 1d       	adc	r25, r1
				if(rtc.Jahr>=50){
    25f2:	82 33       	cpi	r24, 0x32	; 50
    25f4:	10 f4       	brcc	.+4      	; 0x25fa <_Z13uhreinstellenv+0x5ea>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 9:
				rtc.Jahr+=Tastatur.ZahlenausTastatur();
    25f6:	80 83       	st	Z, r24
    25f8:	1f c0       	rjmp	.+62     	; 0x2638 <_Z13uhreinstellenv+0x628>
				if(rtc.Jahr>=50){
					rtc.Jahr=0;
    25fa:	eb ee       	ldi	r30, 0xEB	; 235
    25fc:	f6 e0       	ldi	r31, 0x06	; 6
    25fe:	10 82       	st	Z, r1
					pos=7;
					buffersize=sprintf(buffer,"Jahr falsch");
    2600:	8c e0       	ldi	r24, 0x0C	; 12
    2602:	ec e8       	ldi	r30, 0x8C	; 140
    2604:	f2 e0       	ldi	r31, 0x02	; 2
    2606:	a7 2d       	mov	r26, r7
    2608:	b8 2d       	mov	r27, r8
    260a:	01 90       	ld	r0, Z+
    260c:	0d 92       	st	X+, r0
    260e:	8a 95       	dec	r24
    2610:	e1 f7       	brne	.-8      	; 0x260a <_Z13uhreinstellenv+0x5fa>
    2612:	2d 88       	ldd	r2, Y+21	; 0x15
    2614:	3e 88       	ldd	r3, Y+22	; 0x16
    2616:	1b 2d       	mov	r17, r11
					for(uint8_t i = 0; i<buffersize;i++){
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
    2618:	f1 01       	movw	r30, r2
    261a:	61 91       	ld	r22, Z+
    261c:	1f 01       	movw	r2, r30
    261e:	28 e3       	ldi	r18, 0x38	; 56
    2620:	41 2f       	mov	r20, r17
    2622:	84 ea       	ldi	r24, 0xA4	; 164
    2624:	92 e0       	ldi	r25, 0x02	; 2
    2626:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    262a:	1a 5f       	subi	r17, 0xFA	; 250
				rtc.Jahr+=Tastatur.ZahlenausTastatur();
				if(rtc.Jahr>=50){
					rtc.Jahr=0;
					pos=7;
					buffersize=sprintf(buffer,"Jahr falsch");
					for(uint8_t i = 0; i<buffersize;i++){
    262c:	12 34       	cpi	r17, 0x42	; 66
    262e:	a1 f7       	brne	.-24     	; 0x2618 <_Z13uhreinstellenv+0x608>
				break;
			case 9:
				rtc.Jahr+=Tastatur.ZahlenausTastatur();
				if(rtc.Jahr>=50){
					rtc.Jahr=0;
					pos=7;
    2630:	0f 2e       	mov	r0, r31
    2632:	f7 e0       	ldi	r31, 0x07	; 7
    2634:	9f 2e       	mov	r9, r31
    2636:	f0 2d       	mov	r31, r0
					buffersize=sprintf(buffer,"Jahr falsch");
					for(uint8_t i = 0; i<buffersize;i++){
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				if(rtc.Monat==2){
    2638:	f6 01       	movw	r30, r12
    263a:	80 81       	ld	r24, Z
    263c:	82 30       	cpi	r24, 0x02	; 2
    263e:	09 f0       	breq	.+2      	; 0x2642 <_Z13uhreinstellenv+0x632>
    2640:	4d c0       	rjmp	.+154    	; 0x26dc <_Z13uhreinstellenv+0x6cc>
					if(rtc.Jahr%4==0){
    2642:	eb ee       	ldi	r30, 0xEB	; 235
    2644:	f6 e0       	ldi	r31, 0x06	; 6
    2646:	80 81       	ld	r24, Z
    2648:	83 70       	andi	r24, 0x03	; 3
    264a:	21 f5       	brne	.+72     	; 0x2694 <_Z13uhreinstellenv+0x684>
						if (rtc.Tag>=30)
    264c:	f2 01       	movw	r30, r4
    264e:	80 81       	ld	r24, Z
    2650:	8e 31       	cpi	r24, 0x1E	; 30
    2652:	08 f4       	brcc	.+2      	; 0x2656 <_Z13uhreinstellenv+0x646>
    2654:	43 c0       	rjmp	.+134    	; 0x26dc <_Z13uhreinstellenv+0x6cc>
						{
							rtc.Tag=0;
    2656:	10 82       	st	Z, r1
							rtc.Monat=0;
    2658:	f6 01       	movw	r30, r12
    265a:	10 82       	st	Z, r1
							rtc.Jahr=0;
    265c:	eb ee       	ldi	r30, 0xEB	; 235
    265e:	f6 e0       	ldi	r31, 0x06	; 6
    2660:	10 82       	st	Z, r1
							pos=3;
							buffersize=sprintf(buffer,"Tag falsch");
    2662:	8b e0       	ldi	r24, 0x0B	; 11
    2664:	e4 e7       	ldi	r30, 0x74	; 116
    2666:	f2 e0       	ldi	r31, 0x02	; 2
    2668:	a7 2d       	mov	r26, r7
    266a:	b8 2d       	mov	r27, r8
    266c:	01 90       	ld	r0, Z+
    266e:	0d 92       	st	X+, r0
    2670:	8a 95       	dec	r24
    2672:	e1 f7       	brne	.-8      	; 0x266c <_Z13uhreinstellenv+0x65c>
    2674:	2d 88       	ldd	r2, Y+21	; 0x15
    2676:	3e 88       	ldd	r3, Y+22	; 0x16
    2678:	1b 2d       	mov	r17, r11
							for(uint8_t i = 0; i<buffersize;i++){
								oled.draw_ASCI(buffer[i],charsize*i,7*8);
    267a:	f1 01       	movw	r30, r2
    267c:	61 91       	ld	r22, Z+
    267e:	1f 01       	movw	r2, r30
    2680:	28 e3       	ldi	r18, 0x38	; 56
    2682:	41 2f       	mov	r20, r17
    2684:	84 ea       	ldi	r24, 0xA4	; 164
    2686:	92 e0       	ldi	r25, 0x02	; 2
    2688:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    268c:	1a 5f       	subi	r17, 0xFA	; 250
							rtc.Tag=0;
							rtc.Monat=0;
							rtc.Jahr=0;
							pos=3;
							buffersize=sprintf(buffer,"Tag falsch");
							for(uint8_t i = 0; i<buffersize;i++){
    268e:	1c 33       	cpi	r17, 0x3C	; 60
    2690:	a1 f7       	brne	.-24     	; 0x267a <_Z13uhreinstellenv+0x66a>
    2692:	6c c0       	rjmp	.+216    	; 0x276c <_Z13uhreinstellenv+0x75c>
								oled.draw_ASCI(buffer[i],charsize*i,7*8);
							}
						}
					}
					else{
						if(rtc.Tag>=29){
    2694:	f2 01       	movw	r30, r4
    2696:	80 81       	ld	r24, Z
    2698:	8d 31       	cpi	r24, 0x1D	; 29
    269a:	00 f1       	brcs	.+64     	; 0x26dc <_Z13uhreinstellenv+0x6cc>
							rtc.Tag=0;
    269c:	10 82       	st	Z, r1
							rtc.Monat=0;
    269e:	f6 01       	movw	r30, r12
    26a0:	10 82       	st	Z, r1
							rtc.Jahr=0;
    26a2:	eb ee       	ldi	r30, 0xEB	; 235
    26a4:	f6 e0       	ldi	r31, 0x06	; 6
    26a6:	10 82       	st	Z, r1
							pos=3;
							buffersize=sprintf(buffer,"Tag falsch");
    26a8:	8b e0       	ldi	r24, 0x0B	; 11
    26aa:	e4 e7       	ldi	r30, 0x74	; 116
    26ac:	f2 e0       	ldi	r31, 0x02	; 2
    26ae:	a7 2d       	mov	r26, r7
    26b0:	b8 2d       	mov	r27, r8
    26b2:	01 90       	ld	r0, Z+
    26b4:	0d 92       	st	X+, r0
    26b6:	8a 95       	dec	r24
    26b8:	e1 f7       	brne	.-8      	; 0x26b2 <_Z13uhreinstellenv+0x6a2>
    26ba:	2d 88       	ldd	r2, Y+21	; 0x15
    26bc:	3e 88       	ldd	r3, Y+22	; 0x16
    26be:	1b 2d       	mov	r17, r11
							for(uint8_t i = 0; i<buffersize;i++){
								oled.draw_ASCI(buffer[i],charsize*i,7*8);
    26c0:	f1 01       	movw	r30, r2
    26c2:	61 91       	ld	r22, Z+
    26c4:	1f 01       	movw	r2, r30
    26c6:	28 e3       	ldi	r18, 0x38	; 56
    26c8:	41 2f       	mov	r20, r17
    26ca:	84 ea       	ldi	r24, 0xA4	; 164
    26cc:	92 e0       	ldi	r25, 0x02	; 2
    26ce:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7Display9draw_ASCIEhhh>
    26d2:	1a 5f       	subi	r17, 0xFA	; 250
							rtc.Tag=0;
							rtc.Monat=0;
							rtc.Jahr=0;
							pos=3;
							buffersize=sprintf(buffer,"Tag falsch");
							for(uint8_t i = 0; i<buffersize;i++){
    26d4:	1c 33       	cpi	r17, 0x3C	; 60
    26d6:	a1 f7       	brne	.-24     	; 0x26c0 <_Z13uhreinstellenv+0x6b0>
    26d8:	4e c0       	rjmp	.+156    	; 0x2776 <_Z13uhreinstellenv+0x766>
						}
					}
				}
				break;
			default:
				pos++;
    26da:	93 94       	inc	r9
				break;
		}
		pos++;
    26dc:	93 94       	inc	r9
	
	oled.clearFrame();
	char buffer[20];
	uint8_t buffersize;
	uint8_t pos=0;
	while(pos<11){
    26de:	fa e0       	ldi	r31, 0x0A	; 10
    26e0:	f9 15       	cp	r31, r9
    26e2:	08 f0       	brcs	.+2      	; 0x26e6 <_Z13uhreinstellenv+0x6d6>
    26e4:	d4 cc       	rjmp	.-1624   	; 0x208e <_Z13uhreinstellenv+0x7e>
				break;
		}
		pos++;
	}
	
	rtc.Sekunden		= 0;
    26e6:	10 92 e7 06 	sts	0x06E7, r1
	rtc.HundSekunden	= 0;
    26ea:	10 92 e8 06 	sts	0x06E8, r1
	oled.clearFrame();
    26ee:	84 ea       	ldi	r24, 0xA4	; 164
    26f0:	92 e0       	ldi	r25, 0x02	; 2
    26f2:	0e 94 b9 02 	call	0x572	; 0x572 <_ZN7Display10clearFrameEv>
	rtc.ausgabedatumneu();
    26f6:	85 ed       	ldi	r24, 0xD5	; 213
    26f8:	96 e0       	ldi	r25, 0x06	; 6
    26fa:	0e 94 29 1b 	call	0x3652	; 0x3652 <_ZN3RTC15ausgabedatumneuEv>
	rtc.ausgabezeitneu();
    26fe:	85 ed       	ldi	r24, 0xD5	; 213
    2700:	96 e0       	ldi	r25, 0x06	; 6
    2702:	0e 94 f0 1a 	call	0x35e0	; 0x35e0 <_ZN3RTC14ausgabezeitneuEv>
	rtc.RTCstart();
    2706:	85 ed       	ldi	r24, 0xD5	; 213
    2708:	96 e0       	ldi	r25, 0x06	; 6
    270a:	0e 94 01 1c 	call	0x3802	; 0x3802 <_ZN3RTC8RTCstartEv>
    270e:	39 c0       	rjmp	.+114    	; 0x2782 <_Z13uhreinstellenv+0x772>

		oled.sendFrame();
		oled.clearFrame();
		switch (pos) {
			case 0:
				rtc.Stunden=Tastatur.ZahlenausTastatur()*10;
    2710:	e5 ee       	ldi	r30, 0xE5	; 229
    2712:	f6 e0       	ldi	r31, 0x06	; 6
    2714:	80 83       	st	Z, r24
    2716:	33 c0       	rjmp	.+102    	; 0x277e <_Z13uhreinstellenv+0x76e>
				if(rtc.Stunden>=24){
					rtc.Stunden=0;
					pos=-1;
    2718:	99 24       	eor	r9, r9
    271a:	9a 94       	dec	r9
    271c:	30 c0       	rjmp	.+96     	; 0x277e <_Z13uhreinstellenv+0x76e>
				break;
			case 1:
				rtc.Stunden+=Tastatur.ZahlenausTastatur();
				if(rtc.Stunden>=24){
					rtc.Stunden=0;
					pos=-1;
    271e:	99 24       	eor	r9, r9
    2720:	9a 94       	dec	r9
    2722:	2d c0       	rjmp	.+90     	; 0x277e <_Z13uhreinstellenv+0x76e>
				break;
			case 2:
				rtc.Minuten=Tastatur.ZahlenausTastatur()*10;
				if(rtc.Minuten>=60){
					rtc.Minuten=0;
					pos=1;
    2724:	99 24       	eor	r9, r9
    2726:	93 94       	inc	r9
    2728:	2a c0       	rjmp	.+84     	; 0x277e <_Z13uhreinstellenv+0x76e>
				break;
			case 3:
				rtc.Minuten+=Tastatur.ZahlenausTastatur();
				if(rtc.Minuten>=60){
					rtc.Minuten=0;
					pos=1;
    272a:	99 24       	eor	r9, r9
    272c:	93 94       	inc	r9
    272e:	27 c0       	rjmp	.+78     	; 0x277e <_Z13uhreinstellenv+0x76e>
				break;
			case 4:
				rtc.Tag=Tastatur.ZahlenausTastatur()*10;
				if(rtc.Tag>=32){
					rtc.Tag=0;
					pos=3;
    2730:	0f 2e       	mov	r0, r31
    2732:	f3 e0       	ldi	r31, 0x03	; 3
    2734:	9f 2e       	mov	r9, r31
    2736:	f0 2d       	mov	r31, r0
    2738:	22 c0       	rjmp	.+68     	; 0x277e <_Z13uhreinstellenv+0x76e>
				break;
			case 5:
				rtc.Tag+=Tastatur.ZahlenausTastatur();
				if(rtc.Tag>=32){
					rtc.Tag=0;
					pos=3;
    273a:	0f 2e       	mov	r0, r31
    273c:	f3 e0       	ldi	r31, 0x03	; 3
    273e:	9f 2e       	mov	r9, r31
    2740:	f0 2d       	mov	r31, r0
    2742:	1d c0       	rjmp	.+58     	; 0x277e <_Z13uhreinstellenv+0x76e>
				break;
			case 6:
				rtc.Monat=Tastatur.ZahlenausTastatur()*10;
				if(rtc.Monat>=13){
					rtc.Monat=0;
					pos=5;
    2744:	0f 2e       	mov	r0, r31
    2746:	f5 e0       	ldi	r31, 0x05	; 5
    2748:	9f 2e       	mov	r9, r31
    274a:	f0 2d       	mov	r31, r0
    274c:	18 c0       	rjmp	.+48     	; 0x277e <_Z13uhreinstellenv+0x76e>
				}
				if(rtc.Monat==4||rtc.Monat==6||rtc.Monat==9||rtc.Monat==11){
					if(rtc.Tag>=31){
						rtc.Tag=0;
						rtc.Monat=0;
						pos=3;
    274e:	0f 2e       	mov	r0, r31
    2750:	f3 e0       	ldi	r31, 0x03	; 3
    2752:	9f 2e       	mov	r9, r31
    2754:	f0 2d       	mov	r31, r0
    2756:	13 c0       	rjmp	.+38     	; 0x277e <_Z13uhreinstellenv+0x76e>
				}
				else if(rtc.Monat==2){
					if(rtc.Tag>=30){
						rtc.Tag=0;
						rtc.Monat=0;
						pos=3;
    2758:	0f 2e       	mov	r0, r31
    275a:	f3 e0       	ldi	r31, 0x03	; 3
    275c:	9f 2e       	mov	r9, r31
    275e:	f0 2d       	mov	r31, r0
    2760:	0e c0       	rjmp	.+28     	; 0x277e <_Z13uhreinstellenv+0x76e>
				break;
			case 8:
				rtc.Jahr=Tastatur.ZahlenausTastatur()*10;
				if(rtc.Jahr>=50){
					rtc.Jahr=0;
					pos=7;
    2762:	0f 2e       	mov	r0, r31
    2764:	f7 e0       	ldi	r31, 0x07	; 7
    2766:	9f 2e       	mov	r9, r31
    2768:	f0 2d       	mov	r31, r0
    276a:	09 c0       	rjmp	.+18     	; 0x277e <_Z13uhreinstellenv+0x76e>
						if (rtc.Tag>=30)
						{
							rtc.Tag=0;
							rtc.Monat=0;
							rtc.Jahr=0;
							pos=3;
    276c:	0f 2e       	mov	r0, r31
    276e:	f3 e0       	ldi	r31, 0x03	; 3
    2770:	9f 2e       	mov	r9, r31
    2772:	f0 2d       	mov	r31, r0
    2774:	04 c0       	rjmp	.+8      	; 0x277e <_Z13uhreinstellenv+0x76e>
					else{
						if(rtc.Tag>=29){
							rtc.Tag=0;
							rtc.Monat=0;
							rtc.Jahr=0;
							pos=3;
    2776:	0f 2e       	mov	r0, r31
    2778:	f3 e0       	ldi	r31, 0x03	; 3
    277a:	9f 2e       	mov	r9, r31
    277c:	f0 2d       	mov	r31, r0
				break;
			default:
				pos++;
				break;
		}
		pos++;
    277e:	93 94       	inc	r9
    2780:	86 cc       	rjmp	.-1780   	; 0x208e <_Z13uhreinstellenv+0x7e>
	rtc.HundSekunden	= 0;
	oled.clearFrame();
	rtc.ausgabedatumneu();
	rtc.ausgabezeitneu();
	rtc.RTCstart();
}
    2782:	66 96       	adiw	r28, 0x16	; 22
    2784:	0f b6       	in	r0, 0x3f	; 63
    2786:	f8 94       	cli
    2788:	de bf       	out	0x3e, r29	; 62
    278a:	0f be       	out	0x3f, r0	; 63
    278c:	cd bf       	out	0x3d, r28	; 61
    278e:	df 91       	pop	r29
    2790:	cf 91       	pop	r28
    2792:	1f 91       	pop	r17
    2794:	0f 91       	pop	r16
    2796:	ff 90       	pop	r15
    2798:	ef 90       	pop	r14
    279a:	df 90       	pop	r13
    279c:	cf 90       	pop	r12
    279e:	bf 90       	pop	r11
    27a0:	af 90       	pop	r10
    27a2:	9f 90       	pop	r9
    27a4:	8f 90       	pop	r8
    27a6:	7f 90       	pop	r7
    27a8:	6f 90       	pop	r6
    27aa:	5f 90       	pop	r5
    27ac:	4f 90       	pop	r4
    27ae:	3f 90       	pop	r3
    27b0:	2f 90       	pop	r2
    27b2:	08 95       	ret

000027b4 <__vector_9>:
uint8_t pos;		//Handler fuer die Einganbe von Zahlen

//Ausgelagerte Sammlung der einzelnen Seitenlayouts
#include "Seiten.h"

ISR(TIMER2_OVF_vect){	//Vektor fuer die RTC
    27b4:	1f 92       	push	r1
    27b6:	0f 92       	push	r0
    27b8:	0f b6       	in	r0, 0x3f	; 63
    27ba:	0f 92       	push	r0
    27bc:	11 24       	eor	r1, r1
    27be:	8f 93       	push	r24
    27c0:	ef 93       	push	r30
    27c2:	ff 93       	push	r31
	TCNT2=TIMER2RTCTIME;
    27c4:	10 92 b2 00 	sts	0x00B2, r1
	rtc.Sekunden++;
    27c8:	e7 ee       	ldi	r30, 0xE7	; 231
    27ca:	f6 e0       	ldi	r31, 0x06	; 6
    27cc:	80 81       	ld	r24, Z
    27ce:	8f 5f       	subi	r24, 0xFF	; 255
    27d0:	80 83       	st	Z, r24
	rtc.interupts|= (1<<sekundeninterupt);
    27d2:	ec ee       	ldi	r30, 0xEC	; 236
    27d4:	f6 e0       	ldi	r31, 0x06	; 6
    27d6:	80 81       	ld	r24, Z
    27d8:	82 60       	ori	r24, 0x02	; 2
    27da:	80 83       	st	Z, r24
}
    27dc:	ff 91       	pop	r31
    27de:	ef 91       	pop	r30
    27e0:	8f 91       	pop	r24
    27e2:	0f 90       	pop	r0
    27e4:	0f be       	out	0x3f, r0	; 63
    27e6:	0f 90       	pop	r0
    27e8:	1f 90       	pop	r1
    27ea:	18 95       	reti

000027ec <_Z15geschwindigkeitf>:

#define zeitproachtzaehlungen 0.001024
#define zaehlungenprozeiteinheit 8.0

double geschw;
void geschwindigkeit(float radius){
    27ec:	cf 92       	push	r12
    27ee:	df 92       	push	r13
    27f0:	ef 92       	push	r14
    27f2:	ff 92       	push	r15
    27f4:	0f 93       	push	r16
    27f6:	1f 93       	push	r17
    27f8:	cf 93       	push	r28
    27fa:	df 93       	push	r29
	//uint16_t zaehlungen = (TCNT1H<<8) | (TCNT1L);
	uint16_t zaehlungen = TCNT1;
    27fc:	c4 e8       	ldi	r28, 0x84	; 132
    27fe:	d0 e0       	ldi	r29, 0x00	; 0
    2800:	08 81       	ld	r16, Y
    2802:	19 81       	ldd	r17, Y+1	; 0x01
	geschw = (radius/100.0)*2*M_PI/((zaehlungen/zaehlungenprozeiteinheit)*zeitproachtzaehlungen);
    2804:	20 e0       	ldi	r18, 0x00	; 0
    2806:	30 e0       	ldi	r19, 0x00	; 0
    2808:	48 ec       	ldi	r20, 0xC8	; 200
    280a:	52 e4       	ldi	r21, 0x42	; 66
    280c:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <__divsf3>
    2810:	9b 01       	movw	r18, r22
    2812:	ac 01       	movw	r20, r24
    2814:	0e 94 3e 1c 	call	0x387c	; 0x387c <__addsf3>
    2818:	2b ed       	ldi	r18, 0xDB	; 219
    281a:	3f e0       	ldi	r19, 0x0F	; 15
    281c:	49 e4       	ldi	r20, 0x49	; 73
    281e:	50 e4       	ldi	r21, 0x40	; 64
    2820:	0e 94 bf 1e 	call	0x3d7e	; 0x3d7e <__mulsf3>
    2824:	6b 01       	movw	r12, r22
    2826:	7c 01       	movw	r14, r24
    2828:	b8 01       	movw	r22, r16
    282a:	80 e0       	ldi	r24, 0x00	; 0
    282c:	90 e0       	ldi	r25, 0x00	; 0
    282e:	0e 94 a4 1d 	call	0x3b48	; 0x3b48 <__floatunsisf>
    2832:	20 e0       	ldi	r18, 0x00	; 0
    2834:	30 e0       	ldi	r19, 0x00	; 0
    2836:	40 e0       	ldi	r20, 0x00	; 0
    2838:	5e e3       	ldi	r21, 0x3E	; 62
    283a:	0e 94 bf 1e 	call	0x3d7e	; 0x3d7e <__mulsf3>
    283e:	2d eb       	ldi	r18, 0xBD	; 189
    2840:	37 e3       	ldi	r19, 0x37	; 55
    2842:	46 e8       	ldi	r20, 0x86	; 134
    2844:	5a e3       	ldi	r21, 0x3A	; 58
    2846:	0e 94 bf 1e 	call	0x3d7e	; 0x3d7e <__mulsf3>
    284a:	9b 01       	movw	r18, r22
    284c:	ac 01       	movw	r20, r24
    284e:	c7 01       	movw	r24, r14
    2850:	b6 01       	movw	r22, r12
    2852:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <__divsf3>
    2856:	60 93 98 02 	sts	0x0298, r22
    285a:	70 93 99 02 	sts	0x0299, r23
    285e:	80 93 9a 02 	sts	0x029A, r24
    2862:	90 93 9b 02 	sts	0x029B, r25
	//TCNT1H = 0;
	//TCNT1L = 0;
	TCNT1 = 0;
    2866:	19 82       	std	Y+1, r1	; 0x01
    2868:	18 82       	st	Y, r1
}
    286a:	df 91       	pop	r29
    286c:	cf 91       	pop	r28
    286e:	1f 91       	pop	r17
    2870:	0f 91       	pop	r16
    2872:	ff 90       	pop	r15
    2874:	ef 90       	pop	r14
    2876:	df 90       	pop	r13
    2878:	cf 90       	pop	r12
    287a:	08 95       	ret

0000287c <_Z13reed_debouncePVhh>:

uint8_t reed_debounce(volatile uint8_t *port, uint8_t pin)
{
	if ( !(*port & (1 << pin)) )
    287c:	fc 01       	movw	r30, r24
    287e:	20 81       	ld	r18, Z
    2880:	30 e0       	ldi	r19, 0x00	; 0
    2882:	06 2e       	mov	r0, r22
    2884:	02 c0       	rjmp	.+4      	; 0x288a <_Z13reed_debouncePVhh+0xe>
    2886:	35 95       	asr	r19
    2888:	27 95       	ror	r18
    288a:	0a 94       	dec	r0
    288c:	e2 f7       	brpl	.-8      	; 0x2886 <_Z13reed_debouncePVhh+0xa>
    288e:	20 fd       	sbrc	r18, 0
    2890:	15 c0       	rjmp	.+42     	; 0x28bc <_Z13reed_debouncePVhh+0x40>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2892:	f5 e8       	ldi	r31, 0x85	; 133
    2894:	fa 95       	dec	r31
    2896:	f1 f7       	brne	.-4      	; 0x2894 <_Z13reed_debouncePVhh+0x18>
    2898:	00 00       	nop
	{
		/* Pin wurde auf Masse gezogen, ms warten   */
		_delay_us(50);
		//_delay_us(50);
		if ( (*port & (1 << pin)) )
    289a:	fc 01       	movw	r30, r24
    289c:	80 81       	ld	r24, Z
    289e:	90 e0       	ldi	r25, 0x00	; 0
    28a0:	9c 01       	movw	r18, r24
    28a2:	02 c0       	rjmp	.+4      	; 0x28a8 <_Z13reed_debouncePVhh+0x2c>
    28a4:	35 95       	asr	r19
    28a6:	27 95       	ror	r18
    28a8:	6a 95       	dec	r22
    28aa:	e2 f7       	brpl	.-8      	; 0x28a4 <_Z13reed_debouncePVhh+0x28>
    28ac:	20 ff       	sbrs	r18, 0
    28ae:	08 c0       	rjmp	.+16     	; 0x28c0 <_Z13reed_debouncePVhh+0x44>
    28b0:	32 e0       	ldi	r19, 0x02	; 2
    28b2:	3a 95       	dec	r19
    28b4:	f1 f7       	brne	.-4      	; 0x28b2 <_Z13reed_debouncePVhh+0x36>
    28b6:	00 c0       	rjmp	.+0      	; 0x28b8 <_Z13reed_debouncePVhh+0x3c>
		{
			/* Anwender Zeit zum Loslassen des Tasters geben */
			_delay_us(1);
			return 1;
    28b8:	81 e0       	ldi	r24, 0x01	; 1
    28ba:	08 95       	ret
		}
	}
	return 0;
    28bc:	80 e0       	ldi	r24, 0x00	; 0
    28be:	08 95       	ret
    28c0:	80 e0       	ldi	r24, 0x00	; 0
}
    28c2:	08 95       	ret

000028c4 <_Z15initialisierungv>:
    }
}

void initialisierung(){
	//nullen der Flagregister
	rtc.interupts=0;
    28c4:	10 92 ec 06 	sts	0x06EC, r1
	anzeige=0;
    28c8:	10 92 9e 02 	sts	0x029E, r1
    28cc:	10 92 9d 02 	sts	0x029D, r1
	pos=0;
    28d0:	10 92 9c 02 	sts	0x029C, r1
	//initialisieren des Zaehler fuer die Winkelgeschw sowie den Timer
	geschw=0;
    28d4:	10 92 98 02 	sts	0x0298, r1
    28d8:	10 92 99 02 	sts	0x0299, r1
    28dc:	10 92 9a 02 	sts	0x029A, r1
    28e0:	10 92 9b 02 	sts	0x029B, r1
	TCNT1=0;
    28e4:	10 92 85 00 	sts	0x0085, r1
    28e8:	10 92 84 00 	sts	0x0084, r1
	//Ausgaenge und Eingaenge einstellen
	DDRD = (1<<PIND0) | (1<<PIND1) | (1<<PIND2) | (1<<PIND3);	//Pins zur Ausgabe
    28ec:	8f e0       	ldi	r24, 0x0F	; 15
    28ee:	8a b9       	out	0x0a, r24	; 10
	DDRD &= ~((1<<PIND4) | (1<<PIND5) | (1<<PIND6));			//Restliche Pins als Eingaenge schalten
    28f0:	8a b1       	in	r24, 0x0a	; 10
    28f2:	8f 78       	andi	r24, 0x8F	; 143
    28f4:	8a b9       	out	0x0a, r24	; 10
	//Eingang fuer den Reedkontak schalten mit internem Pullup
	DDRC &= ~((1<<PORTC3)|(1<<PORTC2));
    28f6:	87 b1       	in	r24, 0x07	; 7
    28f8:	83 7f       	andi	r24, 0xF3	; 243
    28fa:	87 b9       	out	0x07, r24	; 7
	PORTC |= (1<<PORTC3) | (1<<PORTC2);
    28fc:	88 b1       	in	r24, 0x08	; 8
    28fe:	8c 60       	ori	r24, 0x0C	; 12
    2900:	88 b9       	out	0x08, r24	; 8
	//I2C Interface
	//twi_init();
	//Display
	oled.InitializeDisplay();
    2902:	84 ea       	ldi	r24, 0xA4	; 164
    2904:	92 e0       	ldi	r25, 0x02	; 2
    2906:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <_ZN7Display17InitializeDisplayEv>
	//initialisierung wird im konstruktor vorgenommen
	oled.clearFrame();
    290a:	84 ea       	ldi	r24, 0xA4	; 164
    290c:	92 e0       	ldi	r25, 0x02	; 2
    290e:	0e 94 b9 02 	call	0x572	; 0x572 <_ZN7Display10clearFrameEv>
	//HMC5883L initialisieren
	//kompass.initialize_HMC5883L();
	//initialisierung wird im Konstruktor erledigt
	
	//ADC Initialisieren auf CH0
	ADMUX = (1<<REFS0);
    2912:	80 e4       	ldi	r24, 0x40	; 64
    2914:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA = (1<<ADPS1) | (1<<ADPS0);
    2918:	ea e7       	ldi	r30, 0x7A	; 122
    291a:	f0 e0       	ldi	r31, 0x00	; 0
    291c:	83 e0       	ldi	r24, 0x03	; 3
    291e:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADEN);
    2920:	80 81       	ld	r24, Z
    2922:	80 68       	ori	r24, 0x80	; 128
    2924:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);
    2926:	80 81       	ld	r24, Z
    2928:	80 64       	ori	r24, 0x40	; 64
    292a:	80 83       	st	Z, r24
	while (ADCSRA & (1<<ADSC) ) {
    292c:	80 81       	ld	r24, Z
    292e:	86 fd       	sbrc	r24, 6
    2930:	fd cf       	rjmp	.-6      	; 0x292c <_Z15initialisierungv+0x68>
	}
	(void) ADCW;
    2932:	80 91 78 00 	lds	r24, 0x0078
    2936:	90 91 79 00 	lds	r25, 0x0079
	//Wilkommensanzeige
	willkommenpage();
    293a:	0e 94 51 08 	call	0x10a2	; 0x10a2 <_Z14willkommenpagev>
	//Uhreinstellungen
	//uhreinstellen();
	//*************************************************
	//Nur Test, damit es schneller geht beim Start
	rtc.dummyeinst();
    293e:	85 ed       	ldi	r24, 0xD5	; 213
    2940:	96 e0       	ldi	r25, 0x06	; 6
    2942:	0e 94 eb 1b 	call	0x37d6	; 0x37d6 <_ZN3RTC10dummyeinstEv>
	//*********************************
	rtc.RTCstart();
    2946:	85 ed       	ldi	r24, 0xD5	; 213
    2948:	96 e0       	ldi	r25, 0x06	; 6
    294a:	0e 94 01 1c 	call	0x3802	; 0x3802 <_ZN3RTC8RTCstartEv>
	//ausgabe starten
	anzeige|=(1<<Uhrflag);
    294e:	80 91 9d 02 	lds	r24, 0x029D
    2952:	90 91 9e 02 	lds	r25, 0x029E
    2956:	81 60       	ori	r24, 0x01	; 1
    2958:	90 93 9e 02 	sts	0x029E, r25
    295c:	80 93 9d 02 	sts	0x029D, r24
	sei();
    2960:	78 94       	sei
    2962:	08 95       	ret

00002964 <_Z19maininterupthandlerv>:
	//interupt dierekt aus der rtc
	//if((rtc.interupts & (1<<hundinterupt))){
		//rtc.zeit();
		//rtc.interupts&=~(1<<hundinterupt);
	//}
	if ((anzeige&(1<<Fahradflag)))
    2964:	80 91 9d 02 	lds	r24, 0x029D
    2968:	81 ff       	sbrs	r24, 1
    296a:	0d c0       	rjmp	.+26     	; 0x2986 <_Z19maininterupthandlerv+0x22>
	{
		//debounce Funktion fuer den Reedswitch
		if (reed_debounce(&PINC,PINC3))
    296c:	63 e0       	ldi	r22, 0x03	; 3
    296e:	86 e2       	ldi	r24, 0x26	; 38
    2970:	90 e0       	ldi	r25, 0x00	; 0
    2972:	0e 94 3e 14 	call	0x287c	; 0x287c <_Z13reed_debouncePVhh>
    2976:	88 23       	and	r24, r24
    2978:	31 f0       	breq	.+12     	; 0x2986 <_Z19maininterupthandlerv+0x22>
		{
			geschwindigkeit(14.0*2.54);
    297a:	60 e7       	ldi	r22, 0x70	; 112
    297c:	7d e3       	ldi	r23, 0x3D	; 61
    297e:	8e e0       	ldi	r24, 0x0E	; 14
    2980:	92 e4       	ldi	r25, 0x42	; 66
    2982:	0e 94 f6 13 	call	0x27ec	; 0x27ec <_Z15geschwindigkeitf>
    2986:	08 95       	ret

00002988 <_Z14anzeigehandlerv>:
	}
}

void anzeigehandler(){
	//Handler fuer 1Hz Flag
	if ((rtc.interupts & (1<<sekundeninterupt)))
    2988:	80 91 ec 06 	lds	r24, 0x06EC
    298c:	81 ff       	sbrs	r24, 1
    298e:	dd c0       	rjmp	.+442    	; 0x2b4a <_Z14anzeigehandlerv+0x1c2>
	{
		rtc.zeit();
    2990:	85 ed       	ldi	r24, 0xD5	; 213
    2992:	96 e0       	ldi	r25, 0x06	; 6
    2994:	0e 94 c6 1b 	call	0x378c	; 0x378c <_ZN3RTC4zeitEv>
		//Handler fuer die Anzeige der Seiten
		//Die einzelnen Funktionen beschreiben nur den Framebuffer und nicht dierekt das Display
		if ((anzeige&(1<<menueflag)) && (anzeige&(1<<Uhrflag)))
    2998:	80 91 9d 02 	lds	r24, 0x029D
    299c:	90 91 9e 02 	lds	r25, 0x029E
    29a0:	9c 01       	movw	r18, r24
    29a2:	21 70       	andi	r18, 0x01	; 1
    29a4:	30 72       	andi	r19, 0x20	; 32
    29a6:	21 30       	cpi	r18, 0x01	; 1
    29a8:	30 42       	sbci	r19, 0x20	; 32
    29aa:	61 f4       	brne	.+24     	; 0x29c4 <_Z14anzeigehandlerv+0x3c>
		{
			menue_uhr();
    29ac:	0e 94 94 0b 	call	0x1728	; 0x1728 <_Z9menue_uhrv>
			anzeige|=(1<<refreshdisplay);
    29b0:	80 91 9d 02 	lds	r24, 0x029D
    29b4:	90 91 9e 02 	lds	r25, 0x029E
    29b8:	90 68       	ori	r25, 0x80	; 128
    29ba:	90 93 9e 02 	sts	0x029E, r25
    29be:	80 93 9d 02 	sts	0x029D, r24
    29c2:	be c0       	rjmp	.+380    	; 0x2b40 <_Z14anzeigehandlerv+0x1b8>
    29c4:	9c 01       	movw	r18, r24
    29c6:	28 70       	andi	r18, 0x08	; 8
    29c8:	30 72       	andi	r19, 0x20	; 32
		}
		else if ((anzeige&(1<<menueflag)) && (anzeige&(1<<Einstellungsflag)))
    29ca:	28 30       	cpi	r18, 0x08	; 8
    29cc:	30 42       	sbci	r19, 0x20	; 32
    29ce:	61 f4       	brne	.+24     	; 0x29e8 <_Z14anzeigehandlerv+0x60>
		{
			menue_einst();
    29d0:	0e 94 26 0b 	call	0x164c	; 0x164c <_Z11menue_einstv>
			anzeige|=(1<<refreshdisplay);
    29d4:	80 91 9d 02 	lds	r24, 0x029D
    29d8:	90 91 9e 02 	lds	r25, 0x029E
    29dc:	90 68       	ori	r25, 0x80	; 128
    29de:	90 93 9e 02 	sts	0x029E, r25
    29e2:	80 93 9d 02 	sts	0x029D, r24
    29e6:	ac c0       	rjmp	.+344    	; 0x2b40 <_Z14anzeigehandlerv+0x1b8>
		}
		else if ((anzeige&(1<<menueflag)))
    29e8:	95 ff       	sbrs	r25, 5
    29ea:	0c c0       	rjmp	.+24     	; 0x2a04 <_Z14anzeigehandlerv+0x7c>
		{
			menue_haupt();
    29ec:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <_Z11menue_hauptv>
			anzeige|=(1<<refreshdisplay);
    29f0:	80 91 9d 02 	lds	r24, 0x029D
    29f4:	90 91 9e 02 	lds	r25, 0x029E
    29f8:	90 68       	ori	r25, 0x80	; 128
    29fa:	90 93 9e 02 	sts	0x029E, r25
    29fe:	80 93 9d 02 	sts	0x029D, r24
    2a02:	9e c0       	rjmp	.+316    	; 0x2b40 <_Z14anzeigehandlerv+0x1b8>
		}
		else if ((anzeige&(1<<Kompasgaineinstellenflag)))
    2a04:	85 ff       	sbrs	r24, 5
    2a06:	0c c0       	rjmp	.+24     	; 0x2a20 <_Z14anzeigehandlerv+0x98>
		{
			Gaineinstellen();
    2a08:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <_Z14Gaineinstellenv>
			anzeige|=(1<<refreshdisplay);
    2a0c:	80 91 9d 02 	lds	r24, 0x029D
    2a10:	90 91 9e 02 	lds	r25, 0x029E
    2a14:	90 68       	ori	r25, 0x80	; 128
    2a16:	90 93 9e 02 	sts	0x029E, r25
    2a1a:	80 93 9d 02 	sts	0x029D, r24
    2a1e:	90 c0       	rjmp	.+288    	; 0x2b40 <_Z14anzeigehandlerv+0x1b8>
		}
		else if ((anzeige&(1<<Uhrflag)))
    2a20:	80 ff       	sbrs	r24, 0
    2a22:	0c c0       	rjmp	.+24     	; 0x2a3c <_Z14anzeigehandlerv+0xb4>
		{
			uhranzeigen();
    2a24:	0e 94 1a 0c 	call	0x1834	; 0x1834 <_Z11uhranzeigenv>
			anzeige|=(1<<refreshdisplay);
    2a28:	80 91 9d 02 	lds	r24, 0x029D
    2a2c:	90 91 9e 02 	lds	r25, 0x029E
    2a30:	90 68       	ori	r25, 0x80	; 128
    2a32:	90 93 9e 02 	sts	0x029E, r25
    2a36:	80 93 9d 02 	sts	0x029D, r24
    2a3a:	82 c0       	rjmp	.+260    	; 0x2b40 <_Z14anzeigehandlerv+0x1b8>
		}
		else if ((anzeige&(1<<Kompasflag)))
    2a3c:	82 ff       	sbrs	r24, 2
    2a3e:	10 c0       	rjmp	.+32     	; 0x2a60 <_Z14anzeigehandlerv+0xd8>
		{
			anzeige_kompass(kompass.angle());
    2a40:	8d ee       	ldi	r24, 0xED	; 237
    2a42:	96 e0       	ldi	r25, 0x06	; 6
    2a44:	0e 94 63 1a 	call	0x34c6	; 0x34c6 <_ZN7Kompass5angleEv>
    2a48:	0e 94 55 0e 	call	0x1caa	; 0x1caa <_Z15anzeige_kompassd>
			anzeige|=(1<<refreshdisplay);
    2a4c:	80 91 9d 02 	lds	r24, 0x029D
    2a50:	90 91 9e 02 	lds	r25, 0x029E
    2a54:	90 68       	ori	r25, 0x80	; 128
    2a56:	90 93 9e 02 	sts	0x029E, r25
    2a5a:	80 93 9d 02 	sts	0x029D, r24
    2a5e:	70 c0       	rjmp	.+224    	; 0x2b40 <_Z14anzeigehandlerv+0x1b8>
		}
		else if ((anzeige&(1<<Fahradflag)))
    2a60:	81 ff       	sbrs	r24, 1
    2a62:	22 c0       	rjmp	.+68     	; 0x2aa8 <_Z14anzeigehandlerv+0x120>
		{
			//fahradschirm(12.3,kompass.angle());
			fahradschirm(geschw,kompass.angle());
    2a64:	8d ee       	ldi	r24, 0xED	; 237
    2a66:	96 e0       	ldi	r25, 0x06	; 6
    2a68:	0e 94 63 1a 	call	0x34c6	; 0x34c6 <_ZN7Kompass5angleEv>
    2a6c:	9b 01       	movw	r18, r22
    2a6e:	ac 01       	movw	r20, r24
    2a70:	60 91 98 02 	lds	r22, 0x0298
    2a74:	70 91 99 02 	lds	r23, 0x0299
    2a78:	80 91 9a 02 	lds	r24, 0x029A
    2a7c:	90 91 9b 02 	lds	r25, 0x029B
    2a80:	0e 94 ae 0c 	call	0x195c	; 0x195c <_Z12fahradschirmdd>
			geschw=0;
    2a84:	10 92 98 02 	sts	0x0298, r1
    2a88:	10 92 99 02 	sts	0x0299, r1
    2a8c:	10 92 9a 02 	sts	0x029A, r1
    2a90:	10 92 9b 02 	sts	0x029B, r1
			anzeige|=(1<<refreshdisplay);
    2a94:	80 91 9d 02 	lds	r24, 0x029D
    2a98:	90 91 9e 02 	lds	r25, 0x029E
    2a9c:	90 68       	ori	r25, 0x80	; 128
    2a9e:	90 93 9e 02 	sts	0x029E, r25
    2aa2:	80 93 9d 02 	sts	0x029D, r24
    2aa6:	4c c0       	rjmp	.+152    	; 0x2b40 <_Z14anzeigehandlerv+0x1b8>
    2aa8:	9c 01       	movw	r18, r24
    2aaa:	28 74       	andi	r18, 0x48	; 72
    2aac:	33 27       	eor	r19, r19
		}
		else if ((anzeige&(1<<Einstellungsflag)) && (anzeige&(1<<Timerflag)))
    2aae:	28 34       	cpi	r18, 0x48	; 72
    2ab0:	31 05       	cpc	r19, r1
    2ab2:	61 f4       	brne	.+24     	; 0x2acc <_Z14anzeigehandlerv+0x144>
		{
			timerseite();
    2ab4:	0e 94 e9 0e 	call	0x1dd2	; 0x1dd2 <_Z10timerseitev>
			anzeige|=(1<<refreshdisplay);
    2ab8:	80 91 9d 02 	lds	r24, 0x029D
    2abc:	90 91 9e 02 	lds	r25, 0x029E
    2ac0:	90 68       	ori	r25, 0x80	; 128
    2ac2:	90 93 9e 02 	sts	0x029E, r25
    2ac6:	80 93 9d 02 	sts	0x029D, r24
    2aca:	3a c0       	rjmp	.+116    	; 0x2b40 <_Z14anzeigehandlerv+0x1b8>
		}
		else if ((anzeige&(1<<Stoppuhrflag)))
    2acc:	87 ff       	sbrs	r24, 7
    2ace:	17 c0       	rjmp	.+46     	; 0x2afe <_Z14anzeigehandlerv+0x176>
		{
			if ((anzeige&(1<<Einstellungsflag)))
    2ad0:	83 ff       	sbrs	r24, 3
    2ad2:	09 c0       	rjmp	.+18     	; 0x2ae6 <_Z14anzeigehandlerv+0x15e>
			{
				stoppuhr.Sekunden++;
    2ad4:	e7 eb       	ldi	r30, 0xB7	; 183
    2ad6:	f6 e0       	ldi	r31, 0x06	; 6
    2ad8:	80 81       	ld	r24, Z
    2ada:	8f 5f       	subi	r24, 0xFF	; 255
    2adc:	80 83       	st	Z, r24
				stoppuhr.zeit();
    2ade:	85 ea       	ldi	r24, 0xA5	; 165
    2ae0:	96 e0       	ldi	r25, 0x06	; 6
    2ae2:	0e 94 c6 1b 	call	0x378c	; 0x378c <_ZN3RTC4zeitEv>
			}
			Stoppuhrseite();
    2ae6:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <_Z13Stoppuhrseitev>
			anzeige|=(1<<refreshdisplay);
    2aea:	80 91 9d 02 	lds	r24, 0x029D
    2aee:	90 91 9e 02 	lds	r25, 0x029E
    2af2:	90 68       	ori	r25, 0x80	; 128
    2af4:	90 93 9e 02 	sts	0x029E, r25
    2af8:	80 93 9d 02 	sts	0x029D, r24
    2afc:	21 c0       	rjmp	.+66     	; 0x2b40 <_Z14anzeigehandlerv+0x1b8>
		}
		else if ((anzeige&(1<<Timerflag)))
    2afe:	86 ff       	sbrs	r24, 6
    2b00:	1f c0       	rjmp	.+62     	; 0x2b40 <_Z14anzeigehandlerv+0x1b8>
		{
			zaehler.Sekunden--;
    2b02:	ef ec       	ldi	r30, 0xCF	; 207
    2b04:	f6 e0       	ldi	r31, 0x06	; 6
    2b06:	80 81       	ld	r24, Z
    2b08:	81 50       	subi	r24, 0x01	; 1
    2b0a:	80 83       	st	Z, r24
			if(zaehler.timer()){
    2b0c:	8d eb       	ldi	r24, 0xBD	; 189
    2b0e:	96 e0       	ldi	r25, 0x06	; 6
    2b10:	0e 94 20 1c 	call	0x3840	; 0x3840 <_ZN3RTC5timerEv>
    2b14:	88 23       	and	r24, r24
    2b16:	49 f0       	breq	.+18     	; 0x2b2a <_Z14anzeigehandlerv+0x1a2>
				anzeige|=(1<<blinkflag);
    2b18:	80 91 9d 02 	lds	r24, 0x029D
    2b1c:	90 91 9e 02 	lds	r25, 0x029E
    2b20:	90 64       	ori	r25, 0x40	; 64
    2b22:	90 93 9e 02 	sts	0x029E, r25
    2b26:	80 93 9d 02 	sts	0x029D, r24
			}
			timerseite();
    2b2a:	0e 94 e9 0e 	call	0x1dd2	; 0x1dd2 <_Z10timerseitev>
			anzeige|=(1<<refreshdisplay);
    2b2e:	80 91 9d 02 	lds	r24, 0x029D
    2b32:	90 91 9e 02 	lds	r25, 0x029E
    2b36:	90 68       	ori	r25, 0x80	; 128
    2b38:	90 93 9e 02 	sts	0x029E, r25
    2b3c:	80 93 9d 02 	sts	0x029D, r24
		}
		rtc.interupts&=~(1<<sekundeninterupt);
    2b40:	ec ee       	ldi	r30, 0xEC	; 236
    2b42:	f6 e0       	ldi	r31, 0x06	; 6
    2b44:	80 81       	ld	r24, Z
    2b46:	8d 7f       	andi	r24, 0xFD	; 253
    2b48:	80 83       	st	Z, r24
	}
	//neuen Framebuffer an das Dispay senden
	if ((anzeige&(1<<refreshdisplay)))
    2b4a:	80 91 9d 02 	lds	r24, 0x029D
    2b4e:	90 91 9e 02 	lds	r25, 0x029E
    2b52:	99 23       	and	r25, r25
    2b54:	d4 f4       	brge	.+52     	; 0x2b8a <_Z14anzeigehandlerv+0x202>
	{
		oled.sendFrame();
    2b56:	84 ea       	ldi	r24, 0xA4	; 164
    2b58:	92 e0       	ldi	r25, 0x02	; 2
    2b5a:	0e 94 5f 03 	call	0x6be	; 0x6be <_ZN7Display9sendFrameEv>
		if ((anzeige&(1<<blinkflag)))
    2b5e:	80 91 9d 02 	lds	r24, 0x029D
    2b62:	90 91 9e 02 	lds	r25, 0x029E
    2b66:	96 ff       	sbrs	r25, 6
    2b68:	07 c0       	rjmp	.+14     	; 0x2b78 <_Z14anzeigehandlerv+0x1f0>
		{
			oled.invert(rtc.Sekunden%2);
    2b6a:	60 91 e7 06 	lds	r22, 0x06E7
    2b6e:	61 70       	andi	r22, 0x01	; 1
    2b70:	84 ea       	ldi	r24, 0xA4	; 164
    2b72:	92 e0       	ldi	r25, 0x02	; 2
    2b74:	0e 94 55 03 	call	0x6aa	; 0x6aa <_ZN7Display6invertEh>
		}
		anzeige&=~(1<<refreshdisplay);
    2b78:	80 91 9d 02 	lds	r24, 0x029D
    2b7c:	90 91 9e 02 	lds	r25, 0x029E
    2b80:	9f 77       	andi	r25, 0x7F	; 127
    2b82:	90 93 9e 02 	sts	0x029E, r25
    2b86:	80 93 9d 02 	sts	0x029D, r24
    2b8a:	08 95       	ret

00002b8c <_Z14eingabehandlerh>:
	}
}

void eingabehandler(uint8_t taste){
	if (taste!='A')
    2b8c:	81 34       	cpi	r24, 0x41	; 65
    2b8e:	09 f4       	brne	.+2      	; 0x2b92 <_Z14eingabehandlerh+0x6>
    2b90:	57 c2       	rjmp	.+1198   	; 0x3040 <_Z14eingabehandlerh+0x4b4>
	{
		if (anzeige==255)
    2b92:	20 91 9d 02 	lds	r18, 0x029D
    2b96:	30 91 9e 02 	lds	r19, 0x029E
    2b9a:	2f 3f       	cpi	r18, 0xFF	; 255
    2b9c:	31 05       	cpc	r19, r1
    2b9e:	61 f4       	brne	.+24     	; 0x2bb8 <_Z14eingabehandlerh+0x2c>
		{
			oled.ssd1306_command(SSD1306_DISPLAYON);
    2ba0:	6f ea       	ldi	r22, 0xAF	; 175
    2ba2:	84 ea       	ldi	r24, 0xA4	; 164
    2ba4:	92 e0       	ldi	r25, 0x02	; 2
    2ba6:	0e 94 c4 02 	call	0x588	; 0x588 <_ZN7Display15ssd1306_commandEh>
			//entweder display aus oder das Menue starten
			anzeige=(1<<menueflag);
    2baa:	80 e0       	ldi	r24, 0x00	; 0
    2bac:	90 e2       	ldi	r25, 0x20	; 32
    2bae:	90 93 9e 02 	sts	0x029E, r25
    2bb2:	80 93 9d 02 	sts	0x029D, r24
    2bb6:	08 95       	ret
    2bb8:	a9 01       	movw	r20, r18
    2bba:	41 70       	andi	r20, 0x01	; 1
    2bbc:	50 72       	andi	r21, 0x20	; 32
		}
		//gleicher Handler wie oben, aber hier speziell fuer die Bearbeitung von Tastereingaben mit switch fuer die Tasten
		//es sind einfach so viele Tasten moeglich 
		else if ((anzeige&(1<<menueflag)) && (anzeige&(1<<Uhrflag)))	//Menue der Uhr
    2bbe:	41 30       	cpi	r20, 0x01	; 1
    2bc0:	50 42       	sbci	r21, 0x20	; 32
    2bc2:	09 f0       	breq	.+2      	; 0x2bc6 <_Z14eingabehandlerh+0x3a>
    2bc4:	45 c0       	rjmp	.+138    	; 0x2c50 <_Z14eingabehandlerh+0xc4>
		{	
			anzeige&=~((1<<menueflag)|(1<<Uhrflag));
    2bc6:	2e 7f       	andi	r18, 0xFE	; 254
    2bc8:	3f 7d       	andi	r19, 0xDF	; 223
    2bca:	30 93 9e 02 	sts	0x029E, r19
    2bce:	20 93 9d 02 	sts	0x029D, r18
			switch (taste)
    2bd2:	82 33       	cpi	r24, 0x32	; 50
    2bd4:	79 f0       	breq	.+30     	; 0x2bf4 <_Z14eingabehandlerh+0x68>
    2bd6:	18 f4       	brcc	.+6      	; 0x2bde <_Z14eingabehandlerh+0x52>
    2bd8:	81 33       	cpi	r24, 0x31	; 49
    2bda:	31 f0       	breq	.+12     	; 0x2be8 <_Z14eingabehandlerh+0x5c>
    2bdc:	32 c0       	rjmp	.+100    	; 0x2c42 <_Z14eingabehandlerh+0xb6>
    2bde:	83 33       	cpi	r24, 0x33	; 51
    2be0:	b1 f0       	breq	.+44     	; 0x2c0e <_Z14eingabehandlerh+0x82>
    2be2:	84 33       	cpi	r24, 0x34	; 52
    2be4:	01 f1       	breq	.+64     	; 0x2c26 <_Z14eingabehandlerh+0x9a>
    2be6:	2d c0       	rjmp	.+90     	; 0x2c42 <_Z14eingabehandlerh+0xb6>
			{
				case '1':
					//Wechseln auf die Uhr
					anzeige|=(1<<Uhrflag);
    2be8:	21 60       	ori	r18, 0x01	; 1
    2bea:	30 93 9e 02 	sts	0x029E, r19
    2bee:	20 93 9d 02 	sts	0x029D, r18
					break;
    2bf2:	08 95       	ret
				
				case '2':
					//starten der Stoppuhr APP
					stoppuhr.Sekunden=0;
    2bf4:	10 92 b7 06 	sts	0x06B7, r1
					stoppuhr.Minuten=0;
    2bf8:	10 92 b6 06 	sts	0x06B6, r1
					stoppuhr.Stunden=0;
    2bfc:	10 92 b5 06 	sts	0x06B5, r1
					anzeige|=(1<<refreshdisplay) | (1<<Stoppuhrflag);
    2c00:	20 68       	ori	r18, 0x80	; 128
    2c02:	30 68       	ori	r19, 0x80	; 128
    2c04:	30 93 9e 02 	sts	0x029E, r19
    2c08:	20 93 9d 02 	sts	0x029D, r18
					break;
    2c0c:	08 95       	ret
				
				case '3':
					//Starten der Timer APP
					zaehler.Sekunden=0;
    2c0e:	10 92 cf 06 	sts	0x06CF, r1
					zaehler.Minuten=0;
    2c12:	10 92 ce 06 	sts	0x06CE, r1
					zaehler.Stunden=0;
    2c16:	10 92 cd 06 	sts	0x06CD, r1
					
					anzeige|=(1<<Timerflag) | (1<<Einstellungsflag);
    2c1a:	28 64       	ori	r18, 0x48	; 72
    2c1c:	30 93 9e 02 	sts	0x029E, r19
    2c20:	20 93 9d 02 	sts	0x029D, r18
					break;
    2c24:	08 95       	ret
				
				case '4':
					//Starten der Alarmapp, momentan nicht implementiert
					oled.clearFrame();
    2c26:	84 ea       	ldi	r24, 0xA4	; 164
    2c28:	92 e0       	ldi	r25, 0x02	; 2
    2c2a:	0e 94 b9 02 	call	0x572	; 0x572 <_ZN7Display10clearFrameEv>
					anzeige|=(1<<refreshdisplay);
    2c2e:	80 91 9d 02 	lds	r24, 0x029D
    2c32:	90 91 9e 02 	lds	r25, 0x029E
    2c36:	90 68       	ori	r25, 0x80	; 128
    2c38:	90 93 9e 02 	sts	0x029E, r25
    2c3c:	80 93 9d 02 	sts	0x029D, r24
					break;
    2c40:	08 95       	ret
				
				default:
					//menueflag erneu setzen
					anzeige|=(1<<menueflag)|(1<<Uhrflag);
    2c42:	21 60       	ori	r18, 0x01	; 1
    2c44:	30 62       	ori	r19, 0x20	; 32
    2c46:	30 93 9e 02 	sts	0x029E, r19
    2c4a:	20 93 9d 02 	sts	0x029D, r18
					break;
    2c4e:	df c1       	rjmp	.+958    	; 0x300e <_Z14eingabehandlerh+0x482>
    2c50:	a9 01       	movw	r20, r18
    2c52:	48 70       	andi	r20, 0x08	; 8
    2c54:	50 72       	andi	r21, 0x20	; 32
			}
		}
		else if ((anzeige&(1<<menueflag)) && (anzeige&(1<<Einstellungsflag)))	//Menue der Einstellungen
    2c56:	48 30       	cpi	r20, 0x08	; 8
    2c58:	50 42       	sbci	r21, 0x20	; 32
    2c5a:	99 f5       	brne	.+102    	; 0x2cc2 <_Z14eingabehandlerh+0x136>
		{
			anzeige&=~((1<<menueflag)|(1<<Einstellungsflag));
    2c5c:	27 7f       	andi	r18, 0xF7	; 247
    2c5e:	3f 7d       	andi	r19, 0xDF	; 223
    2c60:	30 93 9e 02 	sts	0x029E, r19
    2c64:	20 93 9d 02 	sts	0x029D, r18
			switch (taste)
    2c68:	82 33       	cpi	r24, 0x32	; 50
    2c6a:	91 f0       	breq	.+36     	; 0x2c90 <_Z14eingabehandlerh+0x104>
    2c6c:	83 33       	cpi	r24, 0x33	; 51
    2c6e:	b1 f0       	breq	.+44     	; 0x2c9c <_Z14eingabehandlerh+0x110>
    2c70:	81 33       	cpi	r24, 0x31	; 49
    2c72:	01 f5       	brne	.+64     	; 0x2cb4 <_Z14eingabehandlerh+0x128>
			{
				case '1':
					//zuruecksetzen der Kalibrierung, da passive Kallibrierung eingebaut
					kompass.kallibrierung_ruecksetzen();
    2c74:	8d ee       	ldi	r24, 0xED	; 237
    2c76:	96 e0       	ldi	r25, 0x06	; 6
    2c78:	0e 94 db 1a 	call	0x35b6	; 0x35b6 <_ZN7Kompass25kallibrierung_ruecksetzenEv>
					anzeige|=(1<<Kompasflag);
    2c7c:	80 91 9d 02 	lds	r24, 0x029D
    2c80:	90 91 9e 02 	lds	r25, 0x029E
    2c84:	84 60       	ori	r24, 0x04	; 4
    2c86:	90 93 9e 02 	sts	0x029E, r25
    2c8a:	80 93 9d 02 	sts	0x029D, r24
					break;
    2c8e:	08 95       	ret
				case '2':
					//Gaineinstellung fuer den Kompass
					anzeige|=(1<<Kompasgaineinstellenflag);
    2c90:	20 62       	ori	r18, 0x20	; 32
    2c92:	30 93 9e 02 	sts	0x029E, r19
    2c96:	20 93 9d 02 	sts	0x029D, r18
					break;
    2c9a:	08 95       	ret
				case '3':
					//dies ist eine der wenigen Funktinen, die die Handler Strucktur nicht anwenden, da sie die rtc anhaellt
					uhreinstellen();
    2c9c:	0e 94 08 10 	call	0x2010	; 0x2010 <_Z13uhreinstellenv>
					anzeige|=(1<<Uhrflag);
    2ca0:	80 91 9d 02 	lds	r24, 0x029D
    2ca4:	90 91 9e 02 	lds	r25, 0x029E
    2ca8:	81 60       	ori	r24, 0x01	; 1
    2caa:	90 93 9e 02 	sts	0x029E, r25
    2cae:	80 93 9d 02 	sts	0x029D, r24
					break;
    2cb2:	08 95       	ret
				default:
					//Menueflag neu setzten
					anzeige|=(1<<menueflag)|(1<<Einstellungsflag);
    2cb4:	28 60       	ori	r18, 0x08	; 8
    2cb6:	30 62       	ori	r19, 0x20	; 32
    2cb8:	30 93 9e 02 	sts	0x029E, r19
    2cbc:	20 93 9d 02 	sts	0x029D, r18
					break;
    2cc0:	a6 c1       	rjmp	.+844    	; 0x300e <_Z14eingabehandlerh+0x482>
			}
		}
		else if ((anzeige&(1<<menueflag)))	//nur das grosse menue
    2cc2:	35 ff       	sbrs	r19, 5
    2cc4:	54 c0       	rjmp	.+168    	; 0x2d6e <_Z14eingabehandlerh+0x1e2>
		{
			anzeige&=~(1<<menueflag);
    2cc6:	3f 7d       	andi	r19, 0xDF	; 223
    2cc8:	30 93 9e 02 	sts	0x029E, r19
    2ccc:	20 93 9d 02 	sts	0x029D, r18
			switch (taste)
    2cd0:	83 33       	cpi	r24, 0x33	; 51
    2cd2:	29 f1       	breq	.+74     	; 0x2d1e <_Z14eingabehandlerh+0x192>
    2cd4:	28 f4       	brcc	.+10     	; 0x2ce0 <_Z14eingabehandlerh+0x154>
    2cd6:	81 33       	cpi	r24, 0x31	; 49
    2cd8:	49 f0       	breq	.+18     	; 0x2cec <_Z14eingabehandlerh+0x160>
    2cda:	82 33       	cpi	r24, 0x32	; 50
    2cdc:	91 f0       	breq	.+36     	; 0x2d02 <_Z14eingabehandlerh+0x176>
    2cde:	41 c0       	rjmp	.+130    	; 0x2d62 <_Z14eingabehandlerh+0x1d6>
    2ce0:	85 33       	cpi	r24, 0x35	; 53
    2ce2:	51 f1       	breq	.+84     	; 0x2d38 <_Z14eingabehandlerh+0x1ac>
    2ce4:	10 f1       	brcs	.+68     	; 0x2d2a <_Z14eingabehandlerh+0x19e>
    2ce6:	86 33       	cpi	r24, 0x36	; 54
    2ce8:	71 f1       	breq	.+92     	; 0x2d46 <_Z14eingabehandlerh+0x1ba>
    2cea:	3b c0       	rjmp	.+118    	; 0x2d62 <_Z14eingabehandlerh+0x1d6>
			{
				case '1':
					anzeige|=(1<<Fahradflag);
    2cec:	22 60       	ori	r18, 0x02	; 2
    2cee:	30 93 9e 02 	sts	0x029E, r19
    2cf2:	20 93 9d 02 	sts	0x029D, r18
					//starten des Timers fuer die geschwindigkeit
					TCCR1B |= ((1<<CS12) | (1<<CS10));
    2cf6:	e1 e8       	ldi	r30, 0x81	; 129
    2cf8:	f0 e0       	ldi	r31, 0x00	; 0
    2cfa:	80 81       	ld	r24, Z
    2cfc:	85 60       	ori	r24, 0x05	; 5
    2cfe:	80 83       	st	Z, r24
					break;
    2d00:	08 95       	ret
				
				case '2':
					//Taschenrechner starten
					//Monentan deaktiv, da Umstellung der Handler 
					//operation(Flieskommazahleingabe());
					oled.clearFrame();
    2d02:	84 ea       	ldi	r24, 0xA4	; 164
    2d04:	92 e0       	ldi	r25, 0x02	; 2
    2d06:	0e 94 b9 02 	call	0x572	; 0x572 <_ZN7Display10clearFrameEv>
					anzeige|=(1<<refreshdisplay);	
    2d0a:	80 91 9d 02 	lds	r24, 0x029D
    2d0e:	90 91 9e 02 	lds	r25, 0x029E
    2d12:	90 68       	ori	r25, 0x80	; 128
    2d14:	90 93 9e 02 	sts	0x029E, r25
    2d18:	80 93 9d 02 	sts	0x029D, r24
					break;
    2d1c:	08 95       	ret
				
				case '3':
					anzeige|=(1<<Kompasflag);
    2d1e:	24 60       	ori	r18, 0x04	; 4
    2d20:	30 93 9e 02 	sts	0x029E, r19
    2d24:	20 93 9d 02 	sts	0x029D, r18
					break;
    2d28:	08 95       	ret
				
				case '4':
					//Menue der Uhr
					anzeige|=(1<<menueflag) | (1<<Uhrflag);
    2d2a:	21 60       	ori	r18, 0x01	; 1
    2d2c:	30 62       	ori	r19, 0x20	; 32
    2d2e:	30 93 9e 02 	sts	0x029E, r19
    2d32:	20 93 9d 02 	sts	0x029D, r18
					break;
    2d36:	08 95       	ret
				
				case '5':
					//menue der Einstellungen
					anzeige|=(1<<menueflag) | (1<<Einstellungsflag);
    2d38:	28 60       	ori	r18, 0x08	; 8
    2d3a:	30 62       	ori	r19, 0x20	; 32
    2d3c:	30 93 9e 02 	sts	0x029E, r19
    2d40:	20 93 9d 02 	sts	0x029D, r18
					break;
    2d44:	08 95       	ret
				
				case '6':
					//Display ausschalten
					//anzeige=255;
					oled.clearFrame();
    2d46:	84 ea       	ldi	r24, 0xA4	; 164
    2d48:	92 e0       	ldi	r25, 0x02	; 2
    2d4a:	0e 94 b9 02 	call	0x572	; 0x572 <_ZN7Display10clearFrameEv>
					anzeige|=(1<<refreshdisplay);
    2d4e:	80 91 9d 02 	lds	r24, 0x029D
    2d52:	90 91 9e 02 	lds	r25, 0x029E
    2d56:	90 68       	ori	r25, 0x80	; 128
    2d58:	90 93 9e 02 	sts	0x029E, r25
    2d5c:	80 93 9d 02 	sts	0x029D, r24
					break;
    2d60:	08 95       	ret
				
				default:
					//menueflag erneut setzen um abschalten zu verhindern
					anzeige|=(1<<menueflag);
    2d62:	30 62       	ori	r19, 0x20	; 32
    2d64:	30 93 9e 02 	sts	0x029E, r19
    2d68:	20 93 9d 02 	sts	0x029D, r18
					break;
    2d6c:	50 c1       	rjmp	.+672    	; 0x300e <_Z14eingabehandlerh+0x482>
			}
		}
		else if ((anzeige&(1<<Kompasgaineinstellenflag)))
    2d6e:	25 ff       	sbrs	r18, 5
    2d70:	51 c0       	rjmp	.+162    	; 0x2e14 <_Z14eingabehandlerh+0x288>
		{
			anzeige&=~(1<<Kompasgaineinstellenflag);
    2d72:	a9 01       	movw	r20, r18
    2d74:	4f 7d       	andi	r20, 0xDF	; 223
			anzeige|=(1<<Kompasflag);
    2d76:	44 60       	ori	r20, 0x04	; 4
    2d78:	50 93 9e 02 	sts	0x029E, r21
    2d7c:	40 93 9d 02 	sts	0x029D, r20
			switch (taste) {
    2d80:	48 2f       	mov	r20, r24
    2d82:	50 e0       	ldi	r21, 0x00	; 0
    2d84:	fa 01       	movw	r30, r20
    2d86:	f1 97       	sbiw	r30, 0x31	; 49
    2d88:	e8 30       	cpi	r30, 0x08	; 8
    2d8a:	f1 05       	cpc	r31, r1
    2d8c:	e0 f5       	brcc	.+120    	; 0x2e06 <_Z14eingabehandlerh+0x27a>
    2d8e:	e2 5c       	subi	r30, 0xC2	; 194
    2d90:	ff 4f       	sbci	r31, 0xFF	; 255
    2d92:	0c 94 e5 22 	jmp	0x45ca	; 0x45ca <__tablejump2__>
				case '1':
					kompass.HMC5883L_command(0x01,HMCGAIN1370);
    2d96:	40 e0       	ldi	r20, 0x00	; 0
    2d98:	61 e0       	ldi	r22, 0x01	; 1
    2d9a:	8d ee       	ldi	r24, 0xED	; 237
    2d9c:	96 e0       	ldi	r25, 0x06	; 6
    2d9e:	0e 94 60 19 	call	0x32c0	; 0x32c0 <_ZN7Kompass16HMC5883L_commandEhh>
					break;
    2da2:	08 95       	ret
				case '2':
					kompass.HMC5883L_command(0x01,HMCGAIN1090);
    2da4:	40 e2       	ldi	r20, 0x20	; 32
    2da6:	61 e0       	ldi	r22, 0x01	; 1
    2da8:	8d ee       	ldi	r24, 0xED	; 237
    2daa:	96 e0       	ldi	r25, 0x06	; 6
    2dac:	0e 94 60 19 	call	0x32c0	; 0x32c0 <_ZN7Kompass16HMC5883L_commandEhh>
					break;
    2db0:	08 95       	ret
				case '3':
					kompass.HMC5883L_command(0x01,HMCGAIN820);
    2db2:	40 e4       	ldi	r20, 0x40	; 64
    2db4:	61 e0       	ldi	r22, 0x01	; 1
    2db6:	8d ee       	ldi	r24, 0xED	; 237
    2db8:	96 e0       	ldi	r25, 0x06	; 6
    2dba:	0e 94 60 19 	call	0x32c0	; 0x32c0 <_ZN7Kompass16HMC5883L_commandEhh>
					break;
    2dbe:	08 95       	ret
				case '4':
					kompass.HMC5883L_command(0x01,HMCGAIN660);
    2dc0:	40 e6       	ldi	r20, 0x60	; 96
    2dc2:	61 e0       	ldi	r22, 0x01	; 1
    2dc4:	8d ee       	ldi	r24, 0xED	; 237
    2dc6:	96 e0       	ldi	r25, 0x06	; 6
    2dc8:	0e 94 60 19 	call	0x32c0	; 0x32c0 <_ZN7Kompass16HMC5883L_commandEhh>
					break;
    2dcc:	08 95       	ret
				case '5':
					kompass.HMC5883L_command(0x01,HMCGAIN440);
    2dce:	40 e8       	ldi	r20, 0x80	; 128
    2dd0:	61 e0       	ldi	r22, 0x01	; 1
    2dd2:	8d ee       	ldi	r24, 0xED	; 237
    2dd4:	96 e0       	ldi	r25, 0x06	; 6
    2dd6:	0e 94 60 19 	call	0x32c0	; 0x32c0 <_ZN7Kompass16HMC5883L_commandEhh>
					break;
    2dda:	08 95       	ret
				case '6':
					kompass.HMC5883L_command(0x01,HMCGAIN390);
    2ddc:	40 ea       	ldi	r20, 0xA0	; 160
    2dde:	61 e0       	ldi	r22, 0x01	; 1
    2de0:	8d ee       	ldi	r24, 0xED	; 237
    2de2:	96 e0       	ldi	r25, 0x06	; 6
    2de4:	0e 94 60 19 	call	0x32c0	; 0x32c0 <_ZN7Kompass16HMC5883L_commandEhh>
					break;
    2de8:	08 95       	ret
				case '7':
					kompass.HMC5883L_command(0x01,HMCGAIN330);
    2dea:	40 ec       	ldi	r20, 0xC0	; 192
    2dec:	61 e0       	ldi	r22, 0x01	; 1
    2dee:	8d ee       	ldi	r24, 0xED	; 237
    2df0:	96 e0       	ldi	r25, 0x06	; 6
    2df2:	0e 94 60 19 	call	0x32c0	; 0x32c0 <_ZN7Kompass16HMC5883L_commandEhh>
					break;
    2df6:	08 95       	ret
				case '8':
					kompass.HMC5883L_command(0x01,HMCGAIN230);
    2df8:	40 ee       	ldi	r20, 0xE0	; 224
    2dfa:	61 e0       	ldi	r22, 0x01	; 1
    2dfc:	8d ee       	ldi	r24, 0xED	; 237
    2dfe:	96 e0       	ldi	r25, 0x06	; 6
    2e00:	0e 94 60 19 	call	0x32c0	; 0x32c0 <_ZN7Kompass16HMC5883L_commandEhh>
					break;
    2e04:	08 95       	ret
				default:
					anzeige &=~(1<<Kompasflag);
    2e06:	2b 7d       	andi	r18, 0xDB	; 219
					anzeige|=(1<<Kompasgaineinstellenflag);
    2e08:	20 62       	ori	r18, 0x20	; 32
    2e0a:	30 93 9e 02 	sts	0x029E, r19
    2e0e:	20 93 9d 02 	sts	0x029D, r18
					break;
    2e12:	fd c0       	rjmp	.+506    	; 0x300e <_Z14eingabehandlerh+0x482>
    2e14:	a9 01       	movw	r20, r18
    2e16:	48 74       	andi	r20, 0x48	; 72
    2e18:	55 27       	eor	r21, r21
			}
		}
		else if ((anzeige&(1<<Einstellungsflag)) && (anzeige&(1<<Timerflag)))
    2e1a:	48 34       	cpi	r20, 0x48	; 72
    2e1c:	51 05       	cpc	r21, r1
    2e1e:	09 f0       	breq	.+2      	; 0x2e22 <_Z14eingabehandlerh+0x296>
    2e20:	87 c0       	rjmp	.+270    	; 0x2f30 <_Z14eingabehandlerh+0x3a4>
		{
			switch (pos)
    2e22:	90 91 9c 02 	lds	r25, 0x029C
    2e26:	92 30       	cpi	r25, 0x02	; 2
    2e28:	a9 f1       	breq	.+106    	; 0x2e94 <_Z14eingabehandlerh+0x308>
    2e2a:	28 f4       	brcc	.+10     	; 0x2e36 <_Z14eingabehandlerh+0x2aa>
    2e2c:	99 23       	and	r25, r25
    2e2e:	61 f0       	breq	.+24     	; 0x2e48 <_Z14eingabehandlerh+0x2bc>
    2e30:	91 30       	cpi	r25, 0x01	; 1
    2e32:	01 f1       	breq	.+64     	; 0x2e74 <_Z14eingabehandlerh+0x2e8>
    2e34:	ec c0       	rjmp	.+472    	; 0x300e <_Z14eingabehandlerh+0x482>
    2e36:	94 30       	cpi	r25, 0x04	; 4
    2e38:	09 f4       	brne	.+2      	; 0x2e3c <_Z14eingabehandlerh+0x2b0>
    2e3a:	52 c0       	rjmp	.+164    	; 0x2ee0 <_Z14eingabehandlerh+0x354>
    2e3c:	08 f4       	brcc	.+2      	; 0x2e40 <_Z14eingabehandlerh+0x2b4>
    2e3e:	40 c0       	rjmp	.+128    	; 0x2ec0 <_Z14eingabehandlerh+0x334>
    2e40:	95 30       	cpi	r25, 0x05	; 5
    2e42:	09 f4       	brne	.+2      	; 0x2e46 <_Z14eingabehandlerh+0x2ba>
    2e44:	63 c0       	rjmp	.+198    	; 0x2f0c <_Z14eingabehandlerh+0x380>
    2e46:	e3 c0       	rjmp	.+454    	; 0x300e <_Z14eingabehandlerh+0x482>
			{
			case 0:
				switch (taste)
    2e48:	83 32       	cpi	r24, 0x23	; 35
    2e4a:	09 f4       	brne	.+2      	; 0x2e4e <_Z14eingabehandlerh+0x2c2>
    2e4c:	e0 c0       	rjmp	.+448    	; 0x300e <_Z14eingabehandlerh+0x482>
    2e4e:	8a 32       	cpi	r24, 0x2A	; 42
    2e50:	09 f4       	brne	.+2      	; 0x2e54 <_Z14eingabehandlerh+0x2c8>
    2e52:	dd c0       	rjmp	.+442    	; 0x300e <_Z14eingabehandlerh+0x482>
					case '#':
						break;
					case '*':
						break;
					default:
						zaehler.Sekunden+=(taste-'0')*10;
    2e54:	ef ec       	ldi	r30, 0xCF	; 207
    2e56:	f6 e0       	ldi	r31, 0x06	; 6
    2e58:	98 2f       	mov	r25, r24
    2e5a:	99 0f       	add	r25, r25
    2e5c:	90 56       	subi	r25, 0x60	; 96
    2e5e:	29 2f       	mov	r18, r25
    2e60:	22 0f       	add	r18, r18
    2e62:	22 0f       	add	r18, r18
    2e64:	92 0f       	add	r25, r18
    2e66:	20 81       	ld	r18, Z
    2e68:	92 0f       	add	r25, r18
    2e6a:	90 83       	st	Z, r25
						pos++;
    2e6c:	91 e0       	ldi	r25, 0x01	; 1
    2e6e:	90 93 9c 02 	sts	0x029C, r25
						break;
    2e72:	cd c0       	rjmp	.+410    	; 0x300e <_Z14eingabehandlerh+0x482>
				}
				break;
			case 1:
				switch (taste)
    2e74:	83 32       	cpi	r24, 0x23	; 35
    2e76:	09 f4       	brne	.+2      	; 0x2e7a <_Z14eingabehandlerh+0x2ee>
    2e78:	ca c0       	rjmp	.+404    	; 0x300e <_Z14eingabehandlerh+0x482>
    2e7a:	8a 32       	cpi	r24, 0x2A	; 42
    2e7c:	09 f4       	brne	.+2      	; 0x2e80 <_Z14eingabehandlerh+0x2f4>
    2e7e:	c7 c0       	rjmp	.+398    	; 0x300e <_Z14eingabehandlerh+0x482>
					case '#':
					break;
					case '*':
					break;
					default:
					zaehler.Sekunden+=(taste-'0');
    2e80:	ef ec       	ldi	r30, 0xCF	; 207
    2e82:	f6 e0       	ldi	r31, 0x06	; 6
    2e84:	90 81       	ld	r25, Z
    2e86:	90 53       	subi	r25, 0x30	; 48
    2e88:	98 0f       	add	r25, r24
    2e8a:	90 83       	st	Z, r25
					pos++;
    2e8c:	92 e0       	ldi	r25, 0x02	; 2
    2e8e:	90 93 9c 02 	sts	0x029C, r25
					break;
    2e92:	bd c0       	rjmp	.+378    	; 0x300e <_Z14eingabehandlerh+0x482>
				}
				break;
			case 2:
				switch (taste)
    2e94:	83 32       	cpi	r24, 0x23	; 35
    2e96:	09 f4       	brne	.+2      	; 0x2e9a <_Z14eingabehandlerh+0x30e>
    2e98:	ba c0       	rjmp	.+372    	; 0x300e <_Z14eingabehandlerh+0x482>
    2e9a:	8a 32       	cpi	r24, 0x2A	; 42
    2e9c:	09 f4       	brne	.+2      	; 0x2ea0 <_Z14eingabehandlerh+0x314>
    2e9e:	b7 c0       	rjmp	.+366    	; 0x300e <_Z14eingabehandlerh+0x482>
					case '#':
					break;
					case '*':
					break;
					default:
					zaehler.Minuten+=(taste-'0')*10;
    2ea0:	ee ec       	ldi	r30, 0xCE	; 206
    2ea2:	f6 e0       	ldi	r31, 0x06	; 6
    2ea4:	98 2f       	mov	r25, r24
    2ea6:	99 0f       	add	r25, r25
    2ea8:	90 56       	subi	r25, 0x60	; 96
    2eaa:	29 2f       	mov	r18, r25
    2eac:	22 0f       	add	r18, r18
    2eae:	22 0f       	add	r18, r18
    2eb0:	92 0f       	add	r25, r18
    2eb2:	20 81       	ld	r18, Z
    2eb4:	92 0f       	add	r25, r18
    2eb6:	90 83       	st	Z, r25
					pos++;
    2eb8:	93 e0       	ldi	r25, 0x03	; 3
    2eba:	90 93 9c 02 	sts	0x029C, r25
					break;
    2ebe:	a7 c0       	rjmp	.+334    	; 0x300e <_Z14eingabehandlerh+0x482>
				}
				break;
			case 3:
				switch (taste)
    2ec0:	83 32       	cpi	r24, 0x23	; 35
    2ec2:	09 f4       	brne	.+2      	; 0x2ec6 <_Z14eingabehandlerh+0x33a>
    2ec4:	a4 c0       	rjmp	.+328    	; 0x300e <_Z14eingabehandlerh+0x482>
    2ec6:	8a 32       	cpi	r24, 0x2A	; 42
    2ec8:	09 f4       	brne	.+2      	; 0x2ecc <_Z14eingabehandlerh+0x340>
    2eca:	a1 c0       	rjmp	.+322    	; 0x300e <_Z14eingabehandlerh+0x482>
					case '#':
					break;
					case '*':
					break;
					default:
					zaehler.Minuten+=(taste-'0');
    2ecc:	ee ec       	ldi	r30, 0xCE	; 206
    2ece:	f6 e0       	ldi	r31, 0x06	; 6
    2ed0:	90 81       	ld	r25, Z
    2ed2:	90 53       	subi	r25, 0x30	; 48
    2ed4:	98 0f       	add	r25, r24
    2ed6:	90 83       	st	Z, r25
					pos++;
    2ed8:	94 e0       	ldi	r25, 0x04	; 4
    2eda:	90 93 9c 02 	sts	0x029C, r25
					break;
    2ede:	97 c0       	rjmp	.+302    	; 0x300e <_Z14eingabehandlerh+0x482>
				}
				break;
			case 4:
				switch (taste)
    2ee0:	83 32       	cpi	r24, 0x23	; 35
    2ee2:	09 f4       	brne	.+2      	; 0x2ee6 <_Z14eingabehandlerh+0x35a>
    2ee4:	94 c0       	rjmp	.+296    	; 0x300e <_Z14eingabehandlerh+0x482>
    2ee6:	8a 32       	cpi	r24, 0x2A	; 42
    2ee8:	09 f4       	brne	.+2      	; 0x2eec <_Z14eingabehandlerh+0x360>
    2eea:	91 c0       	rjmp	.+290    	; 0x300e <_Z14eingabehandlerh+0x482>
					case '#':
					break;
					case '*':
					break;
					default:
					zaehler.Stunden+=(taste-'0')*10;
    2eec:	ed ec       	ldi	r30, 0xCD	; 205
    2eee:	f6 e0       	ldi	r31, 0x06	; 6
    2ef0:	98 2f       	mov	r25, r24
    2ef2:	99 0f       	add	r25, r25
    2ef4:	90 56       	subi	r25, 0x60	; 96
    2ef6:	29 2f       	mov	r18, r25
    2ef8:	22 0f       	add	r18, r18
    2efa:	22 0f       	add	r18, r18
    2efc:	92 0f       	add	r25, r18
    2efe:	20 81       	ld	r18, Z
    2f00:	92 0f       	add	r25, r18
    2f02:	90 83       	st	Z, r25
					pos++;
    2f04:	95 e0       	ldi	r25, 0x05	; 5
    2f06:	90 93 9c 02 	sts	0x029C, r25
					break;
    2f0a:	81 c0       	rjmp	.+258    	; 0x300e <_Z14eingabehandlerh+0x482>
				}
				break;
			case 5:
				switch (taste)
    2f0c:	83 32       	cpi	r24, 0x23	; 35
    2f0e:	41 f0       	breq	.+16     	; 0x2f20 <_Z14eingabehandlerh+0x394>
    2f10:	8a 32       	cpi	r24, 0x2A	; 42
    2f12:	31 f0       	breq	.+12     	; 0x2f20 <_Z14eingabehandlerh+0x394>
					case '#':
					break;
					case '*':
					break;
					default:
					zaehler.Stunden+=(taste-'0');
    2f14:	ed ec       	ldi	r30, 0xCD	; 205
    2f16:	f6 e0       	ldi	r31, 0x06	; 6
    2f18:	90 81       	ld	r25, Z
    2f1a:	90 53       	subi	r25, 0x30	; 48
    2f1c:	98 0f       	add	r25, r24
    2f1e:	90 83       	st	Z, r25
					pos++;
					break;
				}
				pos=0;
    2f20:	10 92 9c 02 	sts	0x029C, r1
				anzeige&=~(1<<Einstellungsflag);
    2f24:	27 7f       	andi	r18, 0xF7	; 247
    2f26:	30 93 9e 02 	sts	0x029E, r19
    2f2a:	20 93 9d 02 	sts	0x029D, r18
				break;
    2f2e:	6f c0       	rjmp	.+222    	; 0x300e <_Z14eingabehandlerh+0x482>
			}
		}
		else if ((anzeige&(1<<Stoppuhrflag)))
    2f30:	27 ff       	sbrs	r18, 7
    2f32:	23 c0       	rjmp	.+70     	; 0x2f7a <_Z14eingabehandlerh+0x3ee>
		{
			if (taste=='*')
    2f34:	8a 32       	cpi	r24, 0x2A	; 42
    2f36:	71 f4       	brne	.+28     	; 0x2f54 <_Z14eingabehandlerh+0x3c8>
			{
				if ((anzeige&(1<<Einstellungsflag)))
    2f38:	23 ff       	sbrs	r18, 3
    2f3a:	06 c0       	rjmp	.+12     	; 0x2f48 <_Z14eingabehandlerh+0x3bc>
				{
					anzeige&=~(1<<Einstellungsflag);
    2f3c:	27 7f       	andi	r18, 0xF7	; 247
    2f3e:	30 93 9e 02 	sts	0x029E, r19
    2f42:	20 93 9d 02 	sts	0x029D, r18
    2f46:	76 c0       	rjmp	.+236    	; 0x3034 <_Z14eingabehandlerh+0x4a8>
				}
				else{
					anzeige|=(1<<Einstellungsflag);
    2f48:	28 60       	ori	r18, 0x08	; 8
    2f4a:	30 93 9e 02 	sts	0x029E, r19
    2f4e:	20 93 9d 02 	sts	0x029D, r18
    2f52:	70 c0       	rjmp	.+224    	; 0x3034 <_Z14eingabehandlerh+0x4a8>
				}
			}
			else if (taste=='0')
    2f54:	80 33       	cpi	r24, 0x30	; 48
    2f56:	39 f4       	brne	.+14     	; 0x2f66 <_Z14eingabehandlerh+0x3da>
			{
				stoppuhr.Sekunden=0;
    2f58:	10 92 b7 06 	sts	0x06B7, r1
				stoppuhr.Minuten=0;
    2f5c:	10 92 b6 06 	sts	0x06B6, r1
				stoppuhr.Stunden=0;
    2f60:	10 92 b5 06 	sts	0x06B5, r1
    2f64:	08 95       	ret
			}
			else if (taste=='#')
    2f66:	83 32       	cpi	r24, 0x23	; 35
    2f68:	09 f0       	breq	.+2      	; 0x2f6c <_Z14eingabehandlerh+0x3e0>
    2f6a:	6a c0       	rjmp	.+212    	; 0x3040 <_Z14eingabehandlerh+0x4b4>
			{
				anzeige&=~((1<<Stoppuhrflag)|(1<<Einstellungsflag));
    2f6c:	27 77       	andi	r18, 0x77	; 119
				anzeige|=(1<<menueflag);
    2f6e:	30 62       	ori	r19, 0x20	; 32
    2f70:	30 93 9e 02 	sts	0x029E, r19
    2f74:	20 93 9d 02 	sts	0x029D, r18
    2f78:	08 95       	ret
			}
		}
		else if ((anzeige&(1<<Uhrflag)))
    2f7a:	20 ff       	sbrs	r18, 0
    2f7c:	0a c0       	rjmp	.+20     	; 0x2f92 <_Z14eingabehandlerh+0x406>
		{
			if (taste=='#')
    2f7e:	83 32       	cpi	r24, 0x23	; 35
    2f80:	09 f0       	breq	.+2      	; 0x2f84 <_Z14eingabehandlerh+0x3f8>
    2f82:	45 c0       	rjmp	.+138    	; 0x300e <_Z14eingabehandlerh+0x482>
			{
				anzeige&=~(1<<Uhrflag);
    2f84:	2e 7f       	andi	r18, 0xFE	; 254
				anzeige|=(1<<menueflag);
    2f86:	30 62       	ori	r19, 0x20	; 32
    2f88:	30 93 9e 02 	sts	0x029E, r19
    2f8c:	20 93 9d 02 	sts	0x029D, r18
    2f90:	08 95       	ret
			}
		}
		else if ((anzeige&(1<<Kompasflag)))
    2f92:	22 ff       	sbrs	r18, 2
    2f94:	09 c0       	rjmp	.+18     	; 0x2fa8 <_Z14eingabehandlerh+0x41c>
		{
			if (taste=='#')
    2f96:	83 32       	cpi	r24, 0x23	; 35
    2f98:	d1 f5       	brne	.+116    	; 0x300e <_Z14eingabehandlerh+0x482>
			{
				anzeige&=~(1<<Kompasflag);
    2f9a:	2b 7f       	andi	r18, 0xFB	; 251
				anzeige|=(1<<menueflag);
    2f9c:	30 62       	ori	r19, 0x20	; 32
    2f9e:	30 93 9e 02 	sts	0x029E, r19
    2fa2:	20 93 9d 02 	sts	0x029D, r18
    2fa6:	08 95       	ret
			}
		}
		else if ((anzeige&(1<<Fahradflag)))
    2fa8:	21 ff       	sbrs	r18, 1
    2faa:	0f c0       	rjmp	.+30     	; 0x2fca <_Z14eingabehandlerh+0x43e>
		{
			if (taste=='#')
    2fac:	83 32       	cpi	r24, 0x23	; 35
    2fae:	79 f5       	brne	.+94     	; 0x300e <_Z14eingabehandlerh+0x482>
			{
				anzeige&=~(1<<Fahradflag);
    2fb0:	c9 01       	movw	r24, r18
    2fb2:	8d 7f       	andi	r24, 0xFD	; 253
				anzeige|=(1<<menueflag);
    2fb4:	90 62       	ori	r25, 0x20	; 32
    2fb6:	90 93 9e 02 	sts	0x029E, r25
    2fba:	80 93 9d 02 	sts	0x029D, r24
				TCCR1B &= ~((1<<CS12) | (1<<CS10));
    2fbe:	e1 e8       	ldi	r30, 0x81	; 129
    2fc0:	f0 e0       	ldi	r31, 0x00	; 0
    2fc2:	80 81       	ld	r24, Z
    2fc4:	8a 7f       	andi	r24, 0xFA	; 250
    2fc6:	80 83       	st	Z, r24
    2fc8:	08 95       	ret
			}
		}
		else if ((anzeige&(1<<Timerflag)))
    2fca:	26 ff       	sbrs	r18, 6
    2fcc:	17 c0       	rjmp	.+46     	; 0x2ffc <_Z14eingabehandlerh+0x470>
		{
			if (taste=='#')
    2fce:	83 32       	cpi	r24, 0x23	; 35
    2fd0:	f1 f4       	brne	.+60     	; 0x300e <_Z14eingabehandlerh+0x482>
			{
				anzeige&=~((1<<Timerflag)|(1<<blinkflag));
    2fd2:	2f 7b       	andi	r18, 0xBF	; 191
    2fd4:	3f 7b       	andi	r19, 0xBF	; 191
    2fd6:	30 93 9e 02 	sts	0x029E, r19
    2fda:	20 93 9d 02 	sts	0x029D, r18
				oled.invert(0);	//fuer den Fall, dass es invertiert blieb (50% der Faelle)
    2fde:	60 e0       	ldi	r22, 0x00	; 0
    2fe0:	84 ea       	ldi	r24, 0xA4	; 164
    2fe2:	92 e0       	ldi	r25, 0x02	; 2
    2fe4:	0e 94 55 03 	call	0x6aa	; 0x6aa <_ZN7Display6invertEh>
				anzeige|=(1<<menueflag);
    2fe8:	80 91 9d 02 	lds	r24, 0x029D
    2fec:	90 91 9e 02 	lds	r25, 0x029E
    2ff0:	90 62       	ori	r25, 0x20	; 32
    2ff2:	90 93 9e 02 	sts	0x029E, r25
    2ff6:	80 93 9d 02 	sts	0x029D, r24
    2ffa:	08 95       	ret
			}
		}
		else if (anzeige==0)
    2ffc:	23 2b       	or	r18, r19
    2ffe:	39 f4       	brne	.+14     	; 0x300e <_Z14eingabehandlerh+0x482>
		{
			anzeige|=(1<<menueflag);
    3000:	80 e0       	ldi	r24, 0x00	; 0
    3002:	90 e2       	ldi	r25, 0x20	; 32
    3004:	90 93 9e 02 	sts	0x029E, r25
    3008:	80 93 9d 02 	sts	0x029D, r24
    300c:	08 95       	ret
		}
		if ((anzeige&(1<<blinkflag)))
    300e:	20 91 9d 02 	lds	r18, 0x029D
    3012:	30 91 9e 02 	lds	r19, 0x029E
    3016:	36 ff       	sbrs	r19, 6
    3018:	13 c0       	rjmp	.+38     	; 0x3040 <_Z14eingabehandlerh+0x4b4>
		{
			if (taste=='*')
    301a:	8a 32       	cpi	r24, 0x2A	; 42
    301c:	89 f4       	brne	.+34     	; 0x3040 <_Z14eingabehandlerh+0x4b4>
			{
				anzeige &=~(1<<blinkflag);
    301e:	3f 7b       	andi	r19, 0xBF	; 191
    3020:	30 93 9e 02 	sts	0x029E, r19
    3024:	20 93 9d 02 	sts	0x029D, r18
				oled.invert(0);	//fuer den Fall, dass es invertiert blieb (50% der Faelle)
    3028:	60 e0       	ldi	r22, 0x00	; 0
    302a:	84 ea       	ldi	r24, 0xA4	; 164
    302c:	92 e0       	ldi	r25, 0x02	; 2
    302e:	0e 94 55 03 	call	0x6aa	; 0x6aa <_ZN7Display6invertEh>
    3032:	08 95       	ret
		}
		else if (anzeige==0)
		{
			anzeige|=(1<<menueflag);
		}
		if ((anzeige&(1<<blinkflag)))
    3034:	20 91 9d 02 	lds	r18, 0x029D
    3038:	30 91 9e 02 	lds	r19, 0x029E
    303c:	36 fd       	sbrc	r19, 6
    303e:	ef cf       	rjmp	.-34     	; 0x301e <_Z14eingabehandlerh+0x492>
    3040:	08 95       	ret

00003042 <main>:
void eingabehandler(uint8_t taste);

int main(void)
{
	//initialisierung
	initialisierung();
    3042:	0e 94 62 14 	call	0x28c4	; 0x28c4 <_Z15initialisierungv>
	
    while(1)
    {
		//Steuerung der interupts durch Handler
		maininterupthandler();
    3046:	0e 94 b2 14 	call	0x2964	; 0x2964 <_Z19maininterupthandlerv>
		//Steuerung der Anzeige alle Sekunde zur aktualisierung maximale Aktulisierungsrate ist 1Hz
		anzeigehandler();
    304a:	0e 94 c4 14 	call	0x2988	; 0x2988 <_Z14anzeigehandlerv>
		//Tasthandler
		eingabehandler(Tastatur.Taster());
    304e:	83 ea       	ldi	r24, 0xA3	; 163
    3050:	92 e0       	ldi	r25, 0x02	; 2
    3052:	0e 94 b6 18 	call	0x316c	; 0x316c <_ZN9Interface6TasterEv>
    3056:	0e 94 c6 15 	call	0x2b8c	; 0x2b8c <_Z14eingabehandlerh>
    305a:	f5 cf       	rjmp	.-22     	; 0x3046 <main+0x4>

0000305c <_GLOBAL__sub_I_kompass>:
#include <stdlib.h>
#include <stdio.h>
#include <avr/interrupt.h>

#include "Kompass.h"
Kompass kompass;
    305c:	8d ee       	ldi	r24, 0xED	; 237
    305e:	96 e0       	ldi	r25, 0x06	; 6
    3060:	0e 94 7f 19 	call	0x32fe	; 0x32fe <_ZN7KompassC1Ev>

#include "RTC.h"
RTC rtc;
    3064:	85 ed       	ldi	r24, 0xD5	; 213
    3066:	96 e0       	ldi	r25, 0x06	; 6
    3068:	0e 94 62 1b 	call	0x36c4	; 0x36c4 <_ZN3RTCC1Ev>
RTC zaehler;
    306c:	8d eb       	ldi	r24, 0xBD	; 189
    306e:	96 e0       	ldi	r25, 0x06	; 6
    3070:	0e 94 62 1b 	call	0x36c4	; 0x36c4 <_ZN3RTCC1Ev>
RTC stoppuhr;
    3074:	85 ea       	ldi	r24, 0xA5	; 165
    3076:	96 e0       	ldi	r25, 0x06	; 6
    3078:	0e 94 62 1b 	call	0x36c4	; 0x36c4 <_ZN3RTCC1Ev>

#include "Display.h"
Display oled;
    307c:	84 ea       	ldi	r24, 0xA4	; 164
    307e:	92 e0       	ldi	r25, 0x02	; 2
    3080:	0e 94 49 03 	call	0x692	; 0x692 <_ZN7DisplayC1Ev>

#include "Interface.h"
Interface Tastatur;
    3084:	83 ea       	ldi	r24, 0xA3	; 163
    3086:	92 e0       	ldi	r25, 0x02	; 2
    3088:	0e 94 8e 18 	call	0x311c	; 0x311c <_ZN9InterfaceC1Ev>
    308c:	08 95       	ret

0000308e <_GLOBAL__sub_D_kompass>:
    308e:	83 ea       	ldi	r24, 0xA3	; 163
    3090:	92 e0       	ldi	r25, 0x02	; 2
    3092:	0e 94 8f 18 	call	0x311e	; 0x311e <_ZN9InterfaceD1Ev>
RTC rtc;
RTC zaehler;
RTC stoppuhr;

#include "Display.h"
Display oled;
    3096:	84 ea       	ldi	r24, 0xA4	; 164
    3098:	92 e0       	ldi	r25, 0x02	; 2
    309a:	0e 94 b5 02 	call	0x56a	; 0x56a <_ZN7DisplayD1Ev>
Kompass kompass;

#include "RTC.h"
RTC rtc;
RTC zaehler;
RTC stoppuhr;
    309e:	85 ea       	ldi	r24, 0xA5	; 165
    30a0:	96 e0       	ldi	r25, 0x06	; 6
    30a2:	0e 94 ef 1a 	call	0x35de	; 0x35de <_ZN3RTCD1Ev>
#include "Kompass.h"
Kompass kompass;

#include "RTC.h"
RTC rtc;
RTC zaehler;
    30a6:	8d eb       	ldi	r24, 0xBD	; 189
    30a8:	96 e0       	ldi	r25, 0x06	; 6
    30aa:	0e 94 ef 1a 	call	0x35de	; 0x35de <_ZN3RTCD1Ev>

#include "Kompass.h"
Kompass kompass;

#include "RTC.h"
RTC rtc;
    30ae:	85 ed       	ldi	r24, 0xD5	; 213
    30b0:	96 e0       	ldi	r25, 0x06	; 6
    30b2:	0e 94 ef 1a 	call	0x35de	; 0x35de <_ZN3RTCD1Ev>
#include <stdlib.h>
#include <stdio.h>
#include <avr/interrupt.h>

#include "Kompass.h"
Kompass kompass;
    30b6:	8d ee       	ldi	r24, 0xED	; 237
    30b8:	96 e0       	ldi	r25, 0x06	; 6
    30ba:	0e 94 5c 19 	call	0x32b8	; 0x32b8 <_ZN7KompassD1Ev>
    30be:	08 95       	ret

000030c0 <_ZN3I2CC1Ev>:

// default constructor
I2C::I2C()
{
	//TWBR = 10; //Bit fuer 100khz an Tackrate, reicht gerade noch so
	TWBR=2; //fuer 8MHz und 400kHz in SCL
    30c0:	82 e0       	ldi	r24, 0x02	; 2
    30c2:	80 93 b8 00 	sts	0x00B8, r24
    30c6:	08 95       	ret

000030c8 <_ZN3I2CD1Ev>:
} //I2C

// default destructor
I2C::~I2C()
    30c8:	08 95       	ret

000030ca <_ZN3I2C9twi_startEv>:
{
} //~I2C

void I2C::twi_start(){
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    30ca:	84 ea       	ldi	r24, 0xA4	; 164
    30cc:	80 93 bc 00 	sts	0x00BC, r24
    30d0:	08 95       	ret

000030d2 <_ZN3I2C8twi_stopEv>:
}
void I2C::twi_stop(){
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    30d2:	84 e9       	ldi	r24, 0x94	; 148
    30d4:	80 93 bc 00 	sts	0x00BC, r24
    30d8:	08 95       	ret

000030da <_ZN3I2C9twi_writeEh>:
	TWCR = (1<<TWINT) | (1<<TWEN);
	TWCR &= ~(1<<TWEA);
}

void I2C::twi_write(uint8_t data){
	while(!(TWCR & (1<<TWINT)));
    30da:	ec eb       	ldi	r30, 0xBC	; 188
    30dc:	f0 e0       	ldi	r31, 0x00	; 0
    30de:	80 81       	ld	r24, Z
    30e0:	88 23       	and	r24, r24
    30e2:	ec f7       	brge	.-6      	; 0x30de <_ZN3I2C9twi_writeEh+0x4>
	TWDR = data;
    30e4:	60 93 bb 00 	sts	0x00BB, r22
	TWCR = (1<<TWINT) | (1<<TWEN);
    30e8:	84 e8       	ldi	r24, 0x84	; 132
    30ea:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));
    30ee:	ec eb       	ldi	r30, 0xBC	; 188
    30f0:	f0 e0       	ldi	r31, 0x00	; 0
    30f2:	80 81       	ld	r24, Z
    30f4:	88 23       	and	r24, r24
    30f6:	ec f7       	brge	.-6      	; 0x30f2 <_ZN3I2C9twi_writeEh+0x18>
}
    30f8:	08 95       	ret

000030fa <_ZN3I2C8twi_readEh>:

uint8_t I2C::twi_read(uint8_t ack){
	if (ack)
    30fa:	66 23       	and	r22, r22
    30fc:	21 f0       	breq	.+8      	; 0x3106 <_ZN3I2C8twi_readEh+0xc>
	{
		TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    30fe:	84 ec       	ldi	r24, 0xC4	; 196
    3100:	80 93 bc 00 	sts	0x00BC, r24
    3104:	03 c0       	rjmp	.+6      	; 0x310c <_ZN3I2C8twi_readEh+0x12>
	}
	else{
		TWCR = (1<<TWINT) | (1<<TWEN);
    3106:	84 e8       	ldi	r24, 0x84	; 132
    3108:	80 93 bc 00 	sts	0x00BC, r24
	}
	
	while(!(TWCR & (1<<TWINT)));
    310c:	ec eb       	ldi	r30, 0xBC	; 188
    310e:	f0 e0       	ldi	r31, 0x00	; 0
    3110:	80 81       	ld	r24, Z
    3112:	88 23       	and	r24, r24
    3114:	ec f7       	brge	.-6      	; 0x3110 <_ZN3I2C8twi_readEh+0x16>
	return TWDR;
    3116:	80 91 bb 00 	lds	r24, 0x00BB
    311a:	08 95       	ret

0000311c <_ZN9InterfaceC1Ev>:


#include "Interface.h"

// default constructor
Interface::Interface()
    311c:	08 95       	ret

0000311e <_ZN9InterfaceD1Ev>:
{
} //Interface

// default destructor
Interface::~Interface()
    311e:	08 95       	ret

00003120 <_ZN9Interface8debounceEPVhh>:
{
} //~Interface

uint8_t Interface::debounce(volatile uint8_t *port, uint8_t pin)
{
	if ( (*port & (1 << pin)) )
    3120:	fb 01       	movw	r30, r22
    3122:	80 81       	ld	r24, Z
    3124:	90 e0       	ldi	r25, 0x00	; 0
    3126:	04 2e       	mov	r0, r20
    3128:	02 c0       	rjmp	.+4      	; 0x312e <_ZN9Interface8debounceEPVhh+0xe>
    312a:	95 95       	asr	r25
    312c:	87 95       	ror	r24
    312e:	0a 94       	dec	r0
    3130:	e2 f7       	brpl	.-8      	; 0x312a <_ZN9Interface8debounceEPVhh+0xa>
    3132:	80 ff       	sbrs	r24, 0
    3134:	17 c0       	rjmp	.+46     	; 0x3164 <_ZN9Interface8debounceEPVhh+0x44>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3136:	8f ec       	ldi	r24, 0xCF	; 207
    3138:	97 e0       	ldi	r25, 0x07	; 7
    313a:	01 97       	sbiw	r24, 0x01	; 1
    313c:	f1 f7       	brne	.-4      	; 0x313a <_ZN9Interface8debounceEPVhh+0x1a>
    313e:	00 c0       	rjmp	.+0      	; 0x3140 <_ZN9Interface8debounceEPVhh+0x20>
    3140:	00 00       	nop
	{
		/* Pin wurde auf Masse gezogen, 100ms warten   */
		_delay_ms(1);
		if ( !(*port & (1 << pin)) )
    3142:	fb 01       	movw	r30, r22
    3144:	80 81       	ld	r24, Z
    3146:	90 e0       	ldi	r25, 0x00	; 0
    3148:	9c 01       	movw	r18, r24
    314a:	02 c0       	rjmp	.+4      	; 0x3150 <_ZN9Interface8debounceEPVhh+0x30>
    314c:	35 95       	asr	r19
    314e:	27 95       	ror	r18
    3150:	4a 95       	dec	r20
    3152:	e2 f7       	brpl	.-8      	; 0x314c <_ZN9Interface8debounceEPVhh+0x2c>
    3154:	20 fd       	sbrc	r18, 0
    3156:	08 c0       	rjmp	.+16     	; 0x3168 <_ZN9Interface8debounceEPVhh+0x48>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3158:	3a e1       	ldi	r19, 0x1A	; 26
    315a:	3a 95       	dec	r19
    315c:	f1 f7       	brne	.-4      	; 0x315a <_ZN9Interface8debounceEPVhh+0x3a>
    315e:	00 c0       	rjmp	.+0      	; 0x3160 <_ZN9Interface8debounceEPVhh+0x40>
		{
			/* Anwender Zeit zum Loslassen des Tasters geben */
			_delay_us(10);
			return 1;
    3160:	81 e0       	ldi	r24, 0x01	; 1
    3162:	08 95       	ret
		}
	}
	return 0;
    3164:	80 e0       	ldi	r24, 0x00	; 0
    3166:	08 95       	ret
    3168:	80 e0       	ldi	r24, 0x00	; 0
}
    316a:	08 95       	ret

0000316c <_ZN9Interface6TasterEv>:
		break;
	}
	return abfrage;
}

uint8_t Interface::Taster(){
    316c:	1f 93       	push	r17
    316e:	cf 93       	push	r28
    3170:	df 93       	push	r29
    3172:	ec 01       	movw	r28, r24
	uint8_t taste = 'A';
	
	//erste Zeile
	PORTD |= (1<<PORTD3);
    3174:	5b 9a       	sbi	0x0b, 3	; 11
    3176:	82 e0       	ldi	r24, 0x02	; 2
    3178:	8a 95       	dec	r24
    317a:	f1 f7       	brne	.-4      	; 0x3178 <_ZN9Interface6TasterEv+0xc>
    317c:	00 c0       	rjmp	.+0      	; 0x317e <_ZN9Interface6TasterEv+0x12>
	_delay_us(1);
	if(debounce(&PIND,PIND4)){
    317e:	44 e0       	ldi	r20, 0x04	; 4
    3180:	69 e2       	ldi	r22, 0x29	; 41
    3182:	70 e0       	ldi	r23, 0x00	; 0
    3184:	ce 01       	movw	r24, r28
    3186:	0e 94 90 18 	call	0x3120	; 0x3120 <_ZN9Interface8debounceEPVhh>
    318a:	81 11       	cpse	r24, r1
    318c:	12 c0       	rjmp	.+36     	; 0x31b2 <_ZN9Interface6TasterEv+0x46>
		taste = '3';
	}
	else if (debounce(&PIND,PIND5))
    318e:	45 e0       	ldi	r20, 0x05	; 5
    3190:	69 e2       	ldi	r22, 0x29	; 41
    3192:	70 e0       	ldi	r23, 0x00	; 0
    3194:	ce 01       	movw	r24, r28
    3196:	0e 94 90 18 	call	0x3120	; 0x3120 <_ZN9Interface8debounceEPVhh>
    319a:	81 11       	cpse	r24, r1
    319c:	0c c0       	rjmp	.+24     	; 0x31b6 <_ZN9Interface6TasterEv+0x4a>
	{
		taste = '2';
	}
	else if (debounce(&PIND,PIND6))
    319e:	46 e0       	ldi	r20, 0x06	; 6
    31a0:	69 e2       	ldi	r22, 0x29	; 41
    31a2:	70 e0       	ldi	r23, 0x00	; 0
    31a4:	ce 01       	movw	r24, r28
    31a6:	0e 94 90 18 	call	0x3120	; 0x3120 <_ZN9Interface8debounceEPVhh>
    31aa:	81 11       	cpse	r24, r1
    31ac:	06 c0       	rjmp	.+12     	; 0x31ba <_ZN9Interface6TasterEv+0x4e>
	}
	return abfrage;
}

uint8_t Interface::Taster(){
	uint8_t taste = 'A';
    31ae:	11 e4       	ldi	r17, 0x41	; 65
    31b0:	05 c0       	rjmp	.+10     	; 0x31bc <_ZN9Interface6TasterEv+0x50>
	
	//erste Zeile
	PORTD |= (1<<PORTD3);
	_delay_us(1);
	if(debounce(&PIND,PIND4)){
		taste = '3';
    31b2:	13 e3       	ldi	r17, 0x33	; 51
    31b4:	03 c0       	rjmp	.+6      	; 0x31bc <_ZN9Interface6TasterEv+0x50>
	}
	else if (debounce(&PIND,PIND5))
	{
		taste = '2';
    31b6:	12 e3       	ldi	r17, 0x32	; 50
    31b8:	01 c0       	rjmp	.+2      	; 0x31bc <_ZN9Interface6TasterEv+0x50>
	}
	else if (debounce(&PIND,PIND6))
	{
		taste = '1';
    31ba:	11 e3       	ldi	r17, 0x31	; 49
	}
	PORTD &= ~(1<<PORTD3);
    31bc:	5b 98       	cbi	0x0b, 3	; 11
	
	//zweite Zeile
	PORTD |= (1<<PORTD2);
    31be:	5a 9a       	sbi	0x0b, 2	; 11
    31c0:	82 e0       	ldi	r24, 0x02	; 2
    31c2:	8a 95       	dec	r24
    31c4:	f1 f7       	brne	.-4      	; 0x31c2 <_ZN9Interface6TasterEv+0x56>
    31c6:	00 c0       	rjmp	.+0      	; 0x31c8 <_ZN9Interface6TasterEv+0x5c>
	_delay_us(1);
	if(debounce(&PIND,PIND4)){
    31c8:	44 e0       	ldi	r20, 0x04	; 4
    31ca:	69 e2       	ldi	r22, 0x29	; 41
    31cc:	70 e0       	ldi	r23, 0x00	; 0
    31ce:	ce 01       	movw	r24, r28
    31d0:	0e 94 90 18 	call	0x3120	; 0x3120 <_ZN9Interface8debounceEPVhh>
    31d4:	81 11       	cpse	r24, r1
    31d6:	11 c0       	rjmp	.+34     	; 0x31fa <_ZN9Interface6TasterEv+0x8e>
		taste = '6';
	}
	else if (debounce(&PIND,PIND5))
    31d8:	45 e0       	ldi	r20, 0x05	; 5
    31da:	69 e2       	ldi	r22, 0x29	; 41
    31dc:	70 e0       	ldi	r23, 0x00	; 0
    31de:	ce 01       	movw	r24, r28
    31e0:	0e 94 90 18 	call	0x3120	; 0x3120 <_ZN9Interface8debounceEPVhh>
    31e4:	81 11       	cpse	r24, r1
    31e6:	0b c0       	rjmp	.+22     	; 0x31fe <_ZN9Interface6TasterEv+0x92>
	{
		taste = '5';
	}
	else if (debounce(&PIND,PIND6))
    31e8:	46 e0       	ldi	r20, 0x06	; 6
    31ea:	69 e2       	ldi	r22, 0x29	; 41
    31ec:	70 e0       	ldi	r23, 0x00	; 0
    31ee:	ce 01       	movw	r24, r28
    31f0:	0e 94 90 18 	call	0x3120	; 0x3120 <_ZN9Interface8debounceEPVhh>
    31f4:	81 11       	cpse	r24, r1
    31f6:	05 c0       	rjmp	.+10     	; 0x3202 <_ZN9Interface6TasterEv+0x96>
    31f8:	05 c0       	rjmp	.+10     	; 0x3204 <_ZN9Interface6TasterEv+0x98>
	
	//zweite Zeile
	PORTD |= (1<<PORTD2);
	_delay_us(1);
	if(debounce(&PIND,PIND4)){
		taste = '6';
    31fa:	16 e3       	ldi	r17, 0x36	; 54
    31fc:	03 c0       	rjmp	.+6      	; 0x3204 <_ZN9Interface6TasterEv+0x98>
	}
	else if (debounce(&PIND,PIND5))
	{
		taste = '5';
    31fe:	15 e3       	ldi	r17, 0x35	; 53
    3200:	01 c0       	rjmp	.+2      	; 0x3204 <_ZN9Interface6TasterEv+0x98>
	}
	else if (debounce(&PIND,PIND6))
	{
		taste = '4';
    3202:	14 e3       	ldi	r17, 0x34	; 52
	}
	PORTD &= ~(1<<PORTD2);
    3204:	5a 98       	cbi	0x0b, 2	; 11
	
	//dritte Zeile
	PORTD |= (1<<PORTD1);
    3206:	59 9a       	sbi	0x0b, 1	; 11
    3208:	82 e0       	ldi	r24, 0x02	; 2
    320a:	8a 95       	dec	r24
    320c:	f1 f7       	brne	.-4      	; 0x320a <_ZN9Interface6TasterEv+0x9e>
    320e:	00 c0       	rjmp	.+0      	; 0x3210 <_ZN9Interface6TasterEv+0xa4>
	_delay_us(1);
	if(debounce(&PIND,PIND4)){
    3210:	44 e0       	ldi	r20, 0x04	; 4
    3212:	69 e2       	ldi	r22, 0x29	; 41
    3214:	70 e0       	ldi	r23, 0x00	; 0
    3216:	ce 01       	movw	r24, r28
    3218:	0e 94 90 18 	call	0x3120	; 0x3120 <_ZN9Interface8debounceEPVhh>
    321c:	81 11       	cpse	r24, r1
    321e:	11 c0       	rjmp	.+34     	; 0x3242 <_ZN9Interface6TasterEv+0xd6>
		taste = '9';
	}
	else if (debounce(&PIND,PIND5))
    3220:	45 e0       	ldi	r20, 0x05	; 5
    3222:	69 e2       	ldi	r22, 0x29	; 41
    3224:	70 e0       	ldi	r23, 0x00	; 0
    3226:	ce 01       	movw	r24, r28
    3228:	0e 94 90 18 	call	0x3120	; 0x3120 <_ZN9Interface8debounceEPVhh>
    322c:	81 11       	cpse	r24, r1
    322e:	0b c0       	rjmp	.+22     	; 0x3246 <_ZN9Interface6TasterEv+0xda>
	{
		taste = '8';
	}
	else if (debounce(&PIND,PIND6))
    3230:	46 e0       	ldi	r20, 0x06	; 6
    3232:	69 e2       	ldi	r22, 0x29	; 41
    3234:	70 e0       	ldi	r23, 0x00	; 0
    3236:	ce 01       	movw	r24, r28
    3238:	0e 94 90 18 	call	0x3120	; 0x3120 <_ZN9Interface8debounceEPVhh>
    323c:	81 11       	cpse	r24, r1
    323e:	05 c0       	rjmp	.+10     	; 0x324a <_ZN9Interface6TasterEv+0xde>
    3240:	05 c0       	rjmp	.+10     	; 0x324c <_ZN9Interface6TasterEv+0xe0>
	
	//dritte Zeile
	PORTD |= (1<<PORTD1);
	_delay_us(1);
	if(debounce(&PIND,PIND4)){
		taste = '9';
    3242:	19 e3       	ldi	r17, 0x39	; 57
    3244:	03 c0       	rjmp	.+6      	; 0x324c <_ZN9Interface6TasterEv+0xe0>
	}
	else if (debounce(&PIND,PIND5))
	{
		taste = '8';
    3246:	18 e3       	ldi	r17, 0x38	; 56
    3248:	01 c0       	rjmp	.+2      	; 0x324c <_ZN9Interface6TasterEv+0xe0>
	}
	else if (debounce(&PIND,PIND6))
	{
		taste = '7';
    324a:	17 e3       	ldi	r17, 0x37	; 55
	}
	PORTD &= ~(1<<PORT1);
    324c:	59 98       	cbi	0x0b, 1	; 11
	
	//vierte Zeile
	PORTD |= (1<<PORTD0);
    324e:	58 9a       	sbi	0x0b, 0	; 11
    3250:	82 e0       	ldi	r24, 0x02	; 2
    3252:	8a 95       	dec	r24
    3254:	f1 f7       	brne	.-4      	; 0x3252 <_ZN9Interface6TasterEv+0xe6>
    3256:	00 c0       	rjmp	.+0      	; 0x3258 <_ZN9Interface6TasterEv+0xec>
	_delay_us(1);
	if(debounce(&PIND,PIND4)){
    3258:	44 e0       	ldi	r20, 0x04	; 4
    325a:	69 e2       	ldi	r22, 0x29	; 41
    325c:	70 e0       	ldi	r23, 0x00	; 0
    325e:	ce 01       	movw	r24, r28
    3260:	0e 94 90 18 	call	0x3120	; 0x3120 <_ZN9Interface8debounceEPVhh>
    3264:	81 11       	cpse	r24, r1
    3266:	11 c0       	rjmp	.+34     	; 0x328a <_ZN9Interface6TasterEv+0x11e>
		taste = '#';
	}
	else if (debounce(&PIND,PIND5))
    3268:	45 e0       	ldi	r20, 0x05	; 5
    326a:	69 e2       	ldi	r22, 0x29	; 41
    326c:	70 e0       	ldi	r23, 0x00	; 0
    326e:	ce 01       	movw	r24, r28
    3270:	0e 94 90 18 	call	0x3120	; 0x3120 <_ZN9Interface8debounceEPVhh>
    3274:	81 11       	cpse	r24, r1
    3276:	0b c0       	rjmp	.+22     	; 0x328e <_ZN9Interface6TasterEv+0x122>
	{
		taste = '0';
	}
	else if (debounce(&PIND,PIND6))
    3278:	46 e0       	ldi	r20, 0x06	; 6
    327a:	69 e2       	ldi	r22, 0x29	; 41
    327c:	70 e0       	ldi	r23, 0x00	; 0
    327e:	ce 01       	movw	r24, r28
    3280:	0e 94 90 18 	call	0x3120	; 0x3120 <_ZN9Interface8debounceEPVhh>
    3284:	81 11       	cpse	r24, r1
    3286:	05 c0       	rjmp	.+10     	; 0x3292 <_ZN9Interface6TasterEv+0x126>
    3288:	05 c0       	rjmp	.+10     	; 0x3294 <_ZN9Interface6TasterEv+0x128>
	
	//vierte Zeile
	PORTD |= (1<<PORTD0);
	_delay_us(1);
	if(debounce(&PIND,PIND4)){
		taste = '#';
    328a:	13 e2       	ldi	r17, 0x23	; 35
    328c:	03 c0       	rjmp	.+6      	; 0x3294 <_ZN9Interface6TasterEv+0x128>
	}
	else if (debounce(&PIND,PIND5))
	{
		taste = '0';
    328e:	10 e3       	ldi	r17, 0x30	; 48
    3290:	01 c0       	rjmp	.+2      	; 0x3294 <_ZN9Interface6TasterEv+0x128>
	}
	else if (debounce(&PIND,PIND6))
	{
		taste = '*';
    3292:	1a e2       	ldi	r17, 0x2A	; 42
	}
	PORTD &= ~(1<<PORTD0);
    3294:	58 98       	cbi	0x0b, 0	; 11
	
	return taste;
}
    3296:	81 2f       	mov	r24, r17
    3298:	df 91       	pop	r29
    329a:	cf 91       	pop	r28
    329c:	1f 91       	pop	r17
    329e:	08 95       	ret

000032a0 <_ZN9Interface17ZahlenausTastaturEv>:

uint8_t Interface::ZahlenausTastatur(){
    32a0:	cf 93       	push	r28
    32a2:	df 93       	push	r29
    32a4:	ec 01       	movw	r28, r24
	while(true){
		uint8_t taste = Taster();
    32a6:	ce 01       	movw	r24, r28
    32a8:	0e 94 b6 18 	call	0x316c	; 0x316c <_ZN9Interface6TasterEv>
		if(taste>='0' && taste<='9'){
    32ac:	80 53       	subi	r24, 0x30	; 48
    32ae:	8a 30       	cpi	r24, 0x0A	; 10
    32b0:	d0 f7       	brcc	.-12     	; 0x32a6 <_ZN9Interface17ZahlenausTastaturEv+0x6>
			return taste - '0';
		}
	}
}
    32b2:	df 91       	pop	r29
    32b4:	cf 91       	pop	r28
    32b6:	08 95       	ret

000032b8 <_ZN7KompassD1Ev>:
		offset[i]=0;
	}
} //Kompass

// default destructor
Kompass::~Kompass()
    32b8:	06 96       	adiw	r24, 0x06	; 6
    32ba:	0e 94 64 18 	call	0x30c8	; 0x30c8 <_ZN3I2CD1Ev>
    32be:	08 95       	ret

000032c0 <_ZN7Kompass16HMC5883L_commandEhh>:
{
} //~Kompass

void Kompass::HMC5883L_command(uint8_t adresse, uint8_t command){
    32c0:	0f 93       	push	r16
    32c2:	1f 93       	push	r17
    32c4:	cf 93       	push	r28
    32c6:	df 93       	push	r29
    32c8:	06 2f       	mov	r16, r22
    32ca:	14 2f       	mov	r17, r20
	i2c.twi_start();
    32cc:	ec 01       	movw	r28, r24
    32ce:	26 96       	adiw	r28, 0x06	; 6
    32d0:	ce 01       	movw	r24, r28
    32d2:	0e 94 65 18 	call	0x30ca	; 0x30ca <_ZN3I2C9twi_startEv>
	i2c.twi_write(HMCWRITEADRESSE);
    32d6:	6c e3       	ldi	r22, 0x3C	; 60
    32d8:	ce 01       	movw	r24, r28
    32da:	0e 94 6d 18 	call	0x30da	; 0x30da <_ZN3I2C9twi_writeEh>
	i2c.twi_write(adresse);
    32de:	60 2f       	mov	r22, r16
    32e0:	ce 01       	movw	r24, r28
    32e2:	0e 94 6d 18 	call	0x30da	; 0x30da <_ZN3I2C9twi_writeEh>
	i2c.twi_write(command);
    32e6:	61 2f       	mov	r22, r17
    32e8:	ce 01       	movw	r24, r28
    32ea:	0e 94 6d 18 	call	0x30da	; 0x30da <_ZN3I2C9twi_writeEh>
	i2c.twi_stop();
    32ee:	ce 01       	movw	r24, r28
    32f0:	0e 94 69 18 	call	0x30d2	; 0x30d2 <_ZN3I2C8twi_stopEv>
}
    32f4:	df 91       	pop	r29
    32f6:	cf 91       	pop	r28
    32f8:	1f 91       	pop	r17
    32fa:	0f 91       	pop	r16
    32fc:	08 95       	ret

000032fe <_ZN7KompassC1Ev>:


#include "Kompass.h"

// default constructor
Kompass::Kompass()
    32fe:	cf 93       	push	r28
    3300:	df 93       	push	r29
    3302:	ec 01       	movw	r28, r24
    3304:	06 96       	adiw	r24, 0x06	; 6
    3306:	0e 94 60 18 	call	0x30c0	; 0x30c0 <_ZN3I2CC1Ev>
{
	//Config Register A
	HMC5883L_command(0x00, HMCSAMPLES8+HMCDATARATE15+HMCMEASUREMODENORMAL);
    330a:	40 e7       	ldi	r20, 0x70	; 112
    330c:	60 e0       	ldi	r22, 0x00	; 0
    330e:	ce 01       	movw	r24, r28
    3310:	0e 94 60 19 	call	0x32c0	; 0x32c0 <_ZN7Kompass16HMC5883L_commandEhh>

	//Config Gain
	HMC5883L_command(0x01, HMCGAIN1090);
    3314:	40 e2       	ldi	r20, 0x20	; 32
    3316:	61 e0       	ldi	r22, 0x01	; 1
    3318:	ce 01       	movw	r24, r28
    331a:	0e 94 60 19 	call	0x32c0	; 0x32c0 <_ZN7Kompass16HMC5883L_commandEhh>

	//Set Mode auf single
	HMC5883L_command(0x02, HMCSIGLEMODE);
    331e:	41 e0       	ldi	r20, 0x01	; 1
    3320:	62 e0       	ldi	r22, 0x02	; 2
    3322:	ce 01       	movw	r24, r28
    3324:	0e 94 60 19 	call	0x32c0	; 0x32c0 <_ZN7Kompass16HMC5883L_commandEhh>
	//Variablen
	for(uint8_t i=0;i<3;i++){
		achsen[i]=0;
    3328:	19 82       	std	Y+1, r1	; 0x01
    332a:	18 82       	st	Y, r1
		offset[i]=0;
    332c:	18 86       	std	Y+8, r1	; 0x08
    332e:	1f 82       	std	Y+7, r1	; 0x07

	//Set Mode auf single
	HMC5883L_command(0x02, HMCSIGLEMODE);
	//Variablen
	for(uint8_t i=0;i<3;i++){
		achsen[i]=0;
    3330:	1b 82       	std	Y+3, r1	; 0x03
    3332:	1a 82       	std	Y+2, r1	; 0x02
		offset[i]=0;
    3334:	1a 86       	std	Y+10, r1	; 0x0a
    3336:	19 86       	std	Y+9, r1	; 0x09

	//Set Mode auf single
	HMC5883L_command(0x02, HMCSIGLEMODE);
	//Variablen
	for(uint8_t i=0;i<3;i++){
		achsen[i]=0;
    3338:	1d 82       	std	Y+5, r1	; 0x05
    333a:	1c 82       	std	Y+4, r1	; 0x04
		offset[i]=0;
    333c:	1c 86       	std	Y+12, r1	; 0x0c
    333e:	1b 86       	std	Y+11, r1	; 0x0b
	}
} //Kompass
    3340:	df 91       	pop	r29
    3342:	cf 91       	pop	r28
    3344:	08 95       	ret

00003346 <_ZN7Kompass20HMC5883L_readHeadingEv>:
		achsen[i]=0;
		offset[i]=0;
	}
}

uint8_t Kompass::HMC5883L_readHeading(){
    3346:	bf 92       	push	r11
    3348:	cf 92       	push	r12
    334a:	df 92       	push	r13
    334c:	ef 92       	push	r14
    334e:	ff 92       	push	r15
    3350:	0f 93       	push	r16
    3352:	1f 93       	push	r17
    3354:	cf 93       	push	r28
    3356:	df 93       	push	r29
    3358:	00 d0       	rcall	.+0      	; 0x335a <_ZN7Kompass20HMC5883L_readHeadingEv+0x14>
    335a:	00 d0       	rcall	.+0      	; 0x335c <_ZN7Kompass20HMC5883L_readHeadingEv+0x16>
    335c:	00 d0       	rcall	.+0      	; 0x335e <_ZN7Kompass20HMC5883L_readHeadingEv+0x18>
    335e:	cd b7       	in	r28, 0x3d	; 61
    3360:	de b7       	in	r29, 0x3e	; 62
    3362:	6c 01       	movw	r12, r24
	cli();
    3364:	f8 94       	cli
	uint8_t heading[6];
	i2c.twi_start();
    3366:	7c 01       	movw	r14, r24
    3368:	26 e0       	ldi	r18, 0x06	; 6
    336a:	e2 0e       	add	r14, r18
    336c:	f1 1c       	adc	r15, r1
    336e:	c7 01       	movw	r24, r14
    3370:	0e 94 65 18 	call	0x30ca	; 0x30ca <_ZN3I2C9twi_startEv>
	i2c.twi_write(HMCWRITEADRESSE);
    3374:	6c e3       	ldi	r22, 0x3C	; 60
    3376:	c7 01       	movw	r24, r14
    3378:	0e 94 6d 18 	call	0x30da	; 0x30da <_ZN3I2C9twi_writeEh>
	i2c.twi_write(0x03);
    337c:	63 e0       	ldi	r22, 0x03	; 3
    337e:	c7 01       	movw	r24, r14
    3380:	0e 94 6d 18 	call	0x30da	; 0x30da <_ZN3I2C9twi_writeEh>
	i2c.twi_start();
    3384:	c7 01       	movw	r24, r14
    3386:	0e 94 65 18 	call	0x30ca	; 0x30ca <_ZN3I2C9twi_startEv>
	i2c.twi_write(HMCREADADRESSE);
    338a:	6d e3       	ldi	r22, 0x3D	; 61
    338c:	c7 01       	movw	r24, r14
    338e:	0e 94 6d 18 	call	0x30da	; 0x30da <_ZN3I2C9twi_writeEh>
    3392:	8e 01       	movw	r16, r28
    3394:	0f 5f       	subi	r16, 0xFF	; 255
    3396:	1f 4f       	sbci	r17, 0xFF	; 255
	
	for(uint8_t i=0; i<6;i++){
    3398:	b1 2c       	mov	r11, r1
		if (i<5)
    339a:	84 e0       	ldi	r24, 0x04	; 4
    339c:	8b 15       	cp	r24, r11
    339e:	38 f0       	brcs	.+14     	; 0x33ae <_ZN7Kompass20HMC5883L_readHeadingEv+0x68>
		{
			heading[i]=i2c.twi_read(1);
    33a0:	61 e0       	ldi	r22, 0x01	; 1
    33a2:	c7 01       	movw	r24, r14
    33a4:	0e 94 7d 18 	call	0x30fa	; 0x30fa <_ZN3I2C8twi_readEh>
    33a8:	f8 01       	movw	r30, r16
    33aa:	80 83       	st	Z, r24
    33ac:	06 c0       	rjmp	.+12     	; 0x33ba <_ZN7Kompass20HMC5883L_readHeadingEv+0x74>
		}
		else
		{
			heading[i]=i2c.twi_read(0);
    33ae:	60 e0       	ldi	r22, 0x00	; 0
    33b0:	c7 01       	movw	r24, r14
    33b2:	0e 94 7d 18 	call	0x30fa	; 0x30fa <_ZN3I2C8twi_readEh>
    33b6:	f8 01       	movw	r30, r16
    33b8:	80 83       	st	Z, r24
	i2c.twi_write(HMCWRITEADRESSE);
	i2c.twi_write(0x03);
	i2c.twi_start();
	i2c.twi_write(HMCREADADRESSE);
	
	for(uint8_t i=0; i<6;i++){
    33ba:	b3 94       	inc	r11
    33bc:	0f 5f       	subi	r16, 0xFF	; 255
    33be:	1f 4f       	sbci	r17, 0xFF	; 255
    33c0:	f6 e0       	ldi	r31, 0x06	; 6
    33c2:	bf 12       	cpse	r11, r31
    33c4:	ea cf       	rjmp	.-44     	; 0x339a <_ZN7Kompass20HMC5883L_readHeadingEv+0x54>
		{
			heading[i]=i2c.twi_read(0);
		}
		
	}
	i2c.twi_stop();
    33c6:	c7 01       	movw	r24, r14
    33c8:	0e 94 69 18 	call	0x30d2	; 0x30d2 <_ZN3I2C8twi_stopEv>
	achsen[0] =(int16_t) (heading[1] | (heading[0] << 8));
    33cc:	89 81       	ldd	r24, Y+1	; 0x01
    33ce:	90 e0       	ldi	r25, 0x00	; 0
    33d0:	98 2f       	mov	r25, r24
    33d2:	88 27       	eor	r24, r24
    33d4:	2a 81       	ldd	r18, Y+2	; 0x02
    33d6:	82 2b       	or	r24, r18
    33d8:	f6 01       	movw	r30, r12
    33da:	91 83       	std	Z+1, r25	; 0x01
    33dc:	80 83       	st	Z, r24
	achsen[2] =(int16_t) (heading[3] | (heading[2] << 8));
    33de:	8b 81       	ldd	r24, Y+3	; 0x03
    33e0:	90 e0       	ldi	r25, 0x00	; 0
    33e2:	98 2f       	mov	r25, r24
    33e4:	88 27       	eor	r24, r24
    33e6:	2c 81       	ldd	r18, Y+4	; 0x04
    33e8:	82 2b       	or	r24, r18
    33ea:	95 83       	std	Z+5, r25	; 0x05
    33ec:	84 83       	std	Z+4, r24	; 0x04
	achsen[1] =(int16_t) (heading[5] | (heading[4] << 8));
    33ee:	8d 81       	ldd	r24, Y+5	; 0x05
    33f0:	90 e0       	ldi	r25, 0x00	; 0
    33f2:	98 2f       	mov	r25, r24
    33f4:	88 27       	eor	r24, r24
    33f6:	2e 81       	ldd	r18, Y+6	; 0x06
    33f8:	82 2b       	or	r24, r18
    33fa:	93 83       	std	Z+3, r25	; 0x03
    33fc:	82 83       	std	Z+2, r24	; 0x02
	sei();
    33fe:	78 94       	sei
	if (achsen[0]==-4096 || achsen[1]==-4096 || achsen[2]==-4096)
    3400:	f6 01       	movw	r30, r12
    3402:	80 81       	ld	r24, Z
    3404:	91 81       	ldd	r25, Z+1	; 0x01
    3406:	81 15       	cp	r24, r1
    3408:	90 4f       	sbci	r25, 0xF0	; 240
    340a:	09 f4       	brne	.+2      	; 0x340e <_ZN7Kompass20HMC5883L_readHeadingEv+0xc8>
    340c:	47 c0       	rjmp	.+142    	; 0x349c <_ZN7Kompass20HMC5883L_readHeadingEv+0x156>
    340e:	f6 01       	movw	r30, r12
    3410:	82 81       	ldd	r24, Z+2	; 0x02
    3412:	93 81       	ldd	r25, Z+3	; 0x03
    3414:	81 15       	cp	r24, r1
    3416:	90 4f       	sbci	r25, 0xF0	; 240
    3418:	09 f4       	brne	.+2      	; 0x341c <_ZN7Kompass20HMC5883L_readHeadingEv+0xd6>
    341a:	42 c0       	rjmp	.+132    	; 0x34a0 <_ZN7Kompass20HMC5883L_readHeadingEv+0x15a>
    341c:	f6 01       	movw	r30, r12
    341e:	84 81       	ldd	r24, Z+4	; 0x04
    3420:	95 81       	ldd	r25, Z+5	; 0x05
    3422:	81 15       	cp	r24, r1
    3424:	90 4f       	sbci	r25, 0xF0	; 240
    3426:	f1 f1       	breq	.+124    	; 0x34a4 <_ZN7Kompass20HMC5883L_readHeadingEv+0x15e>
    3428:	f6 01       	movw	r30, r12
    342a:	83 e0       	ldi	r24, 0x03	; 3
    342c:	df 01       	movw	r26, r30
	}
	//Kallibrierung durchfuehren, jedes mal, wenn eine abfrage stattfindet
	//somit passive kalibrierung
	else{
		for(uint8_t i=0;i<3;i++){
			if(achsen[i]>max[i]){
    342e:	20 81       	ld	r18, Z
    3430:	31 81       	ldd	r19, Z+1	; 0x01
    3432:	45 85       	ldd	r20, Z+13	; 0x0d
    3434:	56 85       	ldd	r21, Z+14	; 0x0e
    3436:	42 17       	cp	r20, r18
    3438:	53 07       	cpc	r21, r19
    343a:	8c f4       	brge	.+34     	; 0x345e <_ZN7Kompass20HMC5883L_readHeadingEv+0x118>
				max[i]=achsen[i];
    343c:	36 87       	std	Z+14, r19	; 0x0e
    343e:	25 87       	std	Z+13, r18	; 0x0d
				offset[i]=(max[i]+min[i])/2;
    3440:	43 89       	ldd	r20, Z+19	; 0x13
    3442:	54 89       	ldd	r21, Z+20	; 0x14
    3444:	24 0f       	add	r18, r20
    3446:	35 1f       	adc	r19, r21
    3448:	33 23       	and	r19, r19
    344a:	14 f4       	brge	.+4      	; 0x3450 <_ZN7Kompass20HMC5883L_readHeadingEv+0x10a>
    344c:	2f 5f       	subi	r18, 0xFF	; 255
    344e:	3f 4f       	sbci	r19, 0xFF	; 255
    3450:	35 95       	asr	r19
    3452:	27 95       	ror	r18
    3454:	18 96       	adiw	r26, 0x08	; 8
    3456:	3c 93       	st	X, r19
    3458:	2e 93       	st	-X, r18
    345a:	17 97       	sbiw	r26, 0x07	; 7
    345c:	1a c0       	rjmp	.+52     	; 0x3492 <_ZN7Kompass20HMC5883L_readHeadingEv+0x14c>
			}
			else if(achsen[i]<min[i]){
    345e:	63 89       	ldd	r22, Z+19	; 0x13
    3460:	74 89       	ldd	r23, Z+20	; 0x14
    3462:	26 17       	cp	r18, r22
    3464:	37 07       	cpc	r19, r23
    3466:	7c f4       	brge	.+30     	; 0x3486 <_ZN7Kompass20HMC5883L_readHeadingEv+0x140>
				min[i]=achsen[i];
    3468:	34 8b       	std	Z+20, r19	; 0x14
    346a:	23 8b       	std	Z+19, r18	; 0x13
				offset[i]=(max[i]+min[i])/2;
    346c:	24 0f       	add	r18, r20
    346e:	35 1f       	adc	r19, r21
    3470:	33 23       	and	r19, r19
    3472:	14 f4       	brge	.+4      	; 0x3478 <_ZN7Kompass20HMC5883L_readHeadingEv+0x132>
    3474:	2f 5f       	subi	r18, 0xFF	; 255
    3476:	3f 4f       	sbci	r19, 0xFF	; 255
    3478:	35 95       	asr	r19
    347a:	27 95       	ror	r18
    347c:	18 96       	adiw	r26, 0x08	; 8
    347e:	3c 93       	st	X, r19
    3480:	2e 93       	st	-X, r18
    3482:	17 97       	sbiw	r26, 0x07	; 7
    3484:	06 c0       	rjmp	.+12     	; 0x3492 <_ZN7Kompass20HMC5883L_readHeadingEv+0x14c>
			}
			else {
				achsen[i]-=offset[i];
    3486:	47 81       	ldd	r20, Z+7	; 0x07
    3488:	50 85       	ldd	r21, Z+8	; 0x08
    348a:	24 1b       	sub	r18, r20
    348c:	35 0b       	sbc	r19, r21
    348e:	31 83       	std	Z+1, r19	; 0x01
    3490:	20 83       	st	Z, r18
    3492:	81 50       	subi	r24, 0x01	; 1
    3494:	32 96       	adiw	r30, 0x02	; 2
		return 1;
	}
	//Kallibrierung durchfuehren, jedes mal, wenn eine abfrage stattfindet
	//somit passive kalibrierung
	else{
		for(uint8_t i=0;i<3;i++){
    3496:	81 11       	cpse	r24, r1
    3498:	c9 cf       	rjmp	.-110    	; 0x342c <_ZN7Kompass20HMC5883L_readHeadingEv+0xe6>
    349a:	05 c0       	rjmp	.+10     	; 0x34a6 <_ZN7Kompass20HMC5883L_readHeadingEv+0x160>
	achsen[2] =(int16_t) (heading[3] | (heading[2] << 8));
	achsen[1] =(int16_t) (heading[5] | (heading[4] << 8));
	sei();
	if (achsen[0]==-4096 || achsen[1]==-4096 || achsen[2]==-4096)
	{
		return 1;
    349c:	81 e0       	ldi	r24, 0x01	; 1
    349e:	03 c0       	rjmp	.+6      	; 0x34a6 <_ZN7Kompass20HMC5883L_readHeadingEv+0x160>
    34a0:	81 e0       	ldi	r24, 0x01	; 1
    34a2:	01 c0       	rjmp	.+2      	; 0x34a6 <_ZN7Kompass20HMC5883L_readHeadingEv+0x160>
    34a4:	81 e0       	ldi	r24, 0x01	; 1
			}
		}
	}
	
	return 0;
}
    34a6:	26 96       	adiw	r28, 0x06	; 6
    34a8:	0f b6       	in	r0, 0x3f	; 63
    34aa:	f8 94       	cli
    34ac:	de bf       	out	0x3e, r29	; 62
    34ae:	0f be       	out	0x3f, r0	; 63
    34b0:	cd bf       	out	0x3d, r28	; 61
    34b2:	df 91       	pop	r29
    34b4:	cf 91       	pop	r28
    34b6:	1f 91       	pop	r17
    34b8:	0f 91       	pop	r16
    34ba:	ff 90       	pop	r15
    34bc:	ef 90       	pop	r14
    34be:	df 90       	pop	r13
    34c0:	cf 90       	pop	r12
    34c2:	bf 90       	pop	r11
    34c4:	08 95       	ret

000034c6 <_ZN7Kompass5angleEv>:

double Kompass::angle(){
    34c6:	cf 92       	push	r12
    34c8:	df 92       	push	r13
    34ca:	ef 92       	push	r14
    34cc:	ff 92       	push	r15
    34ce:	cf 93       	push	r28
    34d0:	df 93       	push	r29
    34d2:	ec 01       	movw	r28, r24
	double angle=0;
	if (HMC5883L_readHeading())
    34d4:	0e 94 a3 19 	call	0x3346	; 0x3346 <_ZN7Kompass20HMC5883L_readHeadingEv>
    34d8:	81 11       	cpse	r24, r1
    34da:	57 c0       	rjmp	.+174    	; 0x358a <_ZN7Kompass5angleEv+0xc4>
	{
		angle=-1.0;
	}
	else{
		angle=atan2f(achsen[0],achsen[2])*180.0/M_PI+180.0;
    34dc:	6c 81       	ldd	r22, Y+4	; 0x04
    34de:	7d 81       	ldd	r23, Y+5	; 0x05
    34e0:	88 27       	eor	r24, r24
    34e2:	77 fd       	sbrc	r23, 7
    34e4:	80 95       	com	r24
    34e6:	98 2f       	mov	r25, r24
    34e8:	0e 94 a6 1d 	call	0x3b4c	; 0x3b4c <__floatsisf>
    34ec:	6b 01       	movw	r12, r22
    34ee:	7c 01       	movw	r14, r24
    34f0:	68 81       	ld	r22, Y
    34f2:	79 81       	ldd	r23, Y+1	; 0x01
    34f4:	88 27       	eor	r24, r24
    34f6:	77 fd       	sbrc	r23, 7
    34f8:	80 95       	com	r24
    34fa:	98 2f       	mov	r25, r24
    34fc:	0e 94 a6 1d 	call	0x3b4c	; 0x3b4c <__floatsisf>
    3500:	a7 01       	movw	r20, r14
    3502:	96 01       	movw	r18, r12
    3504:	0e 94 b1 1c 	call	0x3962	; 0x3962 <atan2>
    3508:	20 e0       	ldi	r18, 0x00	; 0
    350a:	30 e0       	ldi	r19, 0x00	; 0
    350c:	44 e3       	ldi	r20, 0x34	; 52
    350e:	53 e4       	ldi	r21, 0x43	; 67
    3510:	0e 94 bf 1e 	call	0x3d7e	; 0x3d7e <__mulsf3>
    3514:	2b ed       	ldi	r18, 0xDB	; 219
    3516:	3f e0       	ldi	r19, 0x0F	; 15
    3518:	49 e4       	ldi	r20, 0x49	; 73
    351a:	50 e4       	ldi	r21, 0x40	; 64
    351c:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <__divsf3>
    3520:	20 e0       	ldi	r18, 0x00	; 0
    3522:	30 e0       	ldi	r19, 0x00	; 0
    3524:	44 e3       	ldi	r20, 0x34	; 52
    3526:	53 e4       	ldi	r21, 0x43	; 67
    3528:	0e 94 3e 1c 	call	0x387c	; 0x387c <__addsf3>
		//deklination
		angle+=2.35;
    352c:	26 e6       	ldi	r18, 0x66	; 102
    352e:	36 e6       	ldi	r19, 0x66	; 102
    3530:	46 e1       	ldi	r20, 0x16	; 22
    3532:	50 e4       	ldi	r21, 0x40	; 64
    3534:	0e 94 3e 1c 	call	0x387c	; 0x387c <__addsf3>
    3538:	6b 01       	movw	r12, r22
    353a:	7c 01       	movw	r14, r24
		//Normierung auf %360
		if (angle>=360)
    353c:	20 e0       	ldi	r18, 0x00	; 0
    353e:	30 e0       	ldi	r19, 0x00	; 0
    3540:	44 eb       	ldi	r20, 0xB4	; 180
    3542:	53 e4       	ldi	r21, 0x43	; 67
    3544:	0e 94 b4 1e 	call	0x3d68	; 0x3d68 <__gesf2>
    3548:	88 23       	and	r24, r24
    354a:	5c f0       	brlt	.+22     	; 0x3562 <_ZN7Kompass5angleEv+0x9c>
		{
			angle-=360;
    354c:	20 e0       	ldi	r18, 0x00	; 0
    354e:	30 e0       	ldi	r19, 0x00	; 0
    3550:	44 eb       	ldi	r20, 0xB4	; 180
    3552:	53 e4       	ldi	r21, 0x43	; 67
    3554:	c7 01       	movw	r24, r14
    3556:	b6 01       	movw	r22, r12
    3558:	0e 94 3d 1c 	call	0x387a	; 0x387a <__subsf3>
    355c:	6b 01       	movw	r12, r22
    355e:	7c 01       	movw	r14, r24
    3560:	1c c0       	rjmp	.+56     	; 0x359a <_ZN7Kompass5angleEv+0xd4>
		}
		else if (angle < 0)
    3562:	20 e0       	ldi	r18, 0x00	; 0
    3564:	30 e0       	ldi	r19, 0x00	; 0
    3566:	a9 01       	movw	r20, r18
    3568:	c7 01       	movw	r24, r14
    356a:	b6 01       	movw	r22, r12
    356c:	0e 94 04 1d 	call	0x3a08	; 0x3a08 <__cmpsf2>
    3570:	88 23       	and	r24, r24
    3572:	9c f4       	brge	.+38     	; 0x359a <_ZN7Kompass5angleEv+0xd4>
		{
			angle+=360;
    3574:	20 e0       	ldi	r18, 0x00	; 0
    3576:	30 e0       	ldi	r19, 0x00	; 0
    3578:	44 eb       	ldi	r20, 0xB4	; 180
    357a:	53 e4       	ldi	r21, 0x43	; 67
    357c:	c7 01       	movw	r24, r14
    357e:	b6 01       	movw	r22, r12
    3580:	0e 94 3e 1c 	call	0x387c	; 0x387c <__addsf3>
    3584:	6b 01       	movw	r12, r22
    3586:	7c 01       	movw	r14, r24
    3588:	08 c0       	rjmp	.+16     	; 0x359a <_ZN7Kompass5angleEv+0xd4>

double Kompass::angle(){
	double angle=0;
	if (HMC5883L_readHeading())
	{
		angle=-1.0;
    358a:	0f 2e       	mov	r0, r31
    358c:	c1 2c       	mov	r12, r1
    358e:	d1 2c       	mov	r13, r1
    3590:	f0 e8       	ldi	r31, 0x80	; 128
    3592:	ef 2e       	mov	r14, r31
    3594:	ff eb       	ldi	r31, 0xBF	; 191
    3596:	ff 2e       	mov	r15, r31
    3598:	f0 2d       	mov	r31, r0
		{
			angle+=360;
		}
	}
	
	HMC5883L_command(0x02,HMCSIGLEMODE);
    359a:	41 e0       	ldi	r20, 0x01	; 1
    359c:	62 e0       	ldi	r22, 0x02	; 2
    359e:	ce 01       	movw	r24, r28
    35a0:	0e 94 60 19 	call	0x32c0	; 0x32c0 <_ZN7Kompass16HMC5883L_commandEhh>
	return angle;
}
    35a4:	c7 01       	movw	r24, r14
    35a6:	b6 01       	movw	r22, r12
    35a8:	df 91       	pop	r29
    35aa:	cf 91       	pop	r28
    35ac:	ff 90       	pop	r15
    35ae:	ef 90       	pop	r14
    35b0:	df 90       	pop	r13
    35b2:	cf 90       	pop	r12
    35b4:	08 95       	ret

000035b6 <_ZN7Kompass25kallibrierung_ruecksetzenEv>:

void Kompass::kallibrierung_ruecksetzen(){
    35b6:	fc 01       	movw	r30, r24
	for (uint8_t i=0;i<3;i++)
	{
		max[i]=0;
    35b8:	16 86       	std	Z+14, r1	; 0x0e
    35ba:	15 86       	std	Z+13, r1	; 0x0d
		min[i]=0;
    35bc:	14 8a       	std	Z+20, r1	; 0x14
    35be:	13 8a       	std	Z+19, r1	; 0x13
		offset[i]=0;
    35c0:	10 86       	std	Z+8, r1	; 0x08
    35c2:	17 82       	std	Z+7, r1	; 0x07
}

void Kompass::kallibrierung_ruecksetzen(){
	for (uint8_t i=0;i<3;i++)
	{
		max[i]=0;
    35c4:	10 8a       	std	Z+16, r1	; 0x10
    35c6:	17 86       	std	Z+15, r1	; 0x0f
		min[i]=0;
    35c8:	16 8a       	std	Z+22, r1	; 0x16
    35ca:	15 8a       	std	Z+21, r1	; 0x15
		offset[i]=0;
    35cc:	12 86       	std	Z+10, r1	; 0x0a
    35ce:	11 86       	std	Z+9, r1	; 0x09
}

void Kompass::kallibrierung_ruecksetzen(){
	for (uint8_t i=0;i<3;i++)
	{
		max[i]=0;
    35d0:	12 8a       	std	Z+18, r1	; 0x12
    35d2:	11 8a       	std	Z+17, r1	; 0x11
		min[i]=0;
    35d4:	10 8e       	std	Z+24, r1	; 0x18
    35d6:	17 8a       	std	Z+23, r1	; 0x17
		offset[i]=0;
    35d8:	14 86       	std	Z+12, r1	; 0x0c
    35da:	13 86       	std	Z+11, r1	; 0x0b
    35dc:	08 95       	ret

000035de <_ZN3RTCD1Ev>:
	ausgabezeitneu();
	ausgabedatumneu();
} //RTC

// default destructor
RTC::~RTC()
    35de:	08 95       	ret

000035e0 <_ZN3RTC14ausgabezeitneuEv>:
		}
	}
	ausgabedatumneu();
}

void RTC::ausgabezeitneu(){
    35e0:	fc 01       	movw	r30, r24
	msg_uhr[0]='0'+Stunden/10;
    35e2:	90 89       	ldd	r25, Z+16	; 0x10
    35e4:	8d ec       	ldi	r24, 0xCD	; 205
    35e6:	98 9f       	mul	r25, r24
    35e8:	21 2d       	mov	r18, r1
    35ea:	11 24       	eor	r1, r1
    35ec:	26 95       	lsr	r18
    35ee:	26 95       	lsr	r18
    35f0:	26 95       	lsr	r18
    35f2:	30 e3       	ldi	r19, 0x30	; 48
    35f4:	32 0f       	add	r19, r18
    35f6:	30 83       	st	Z, r19
	msg_uhr[1]='0'+Stunden%10;
    35f8:	22 0f       	add	r18, r18
    35fa:	32 2f       	mov	r19, r18
    35fc:	33 0f       	add	r19, r19
    35fe:	33 0f       	add	r19, r19
    3600:	23 0f       	add	r18, r19
    3602:	92 1b       	sub	r25, r18
    3604:	90 5d       	subi	r25, 0xD0	; 208
    3606:	91 83       	std	Z+1, r25	; 0x01
	msg_uhr[3]='0'+Minuten/10;
    3608:	91 89       	ldd	r25, Z+17	; 0x11
    360a:	98 9f       	mul	r25, r24
    360c:	21 2d       	mov	r18, r1
    360e:	11 24       	eor	r1, r1
    3610:	26 95       	lsr	r18
    3612:	26 95       	lsr	r18
    3614:	26 95       	lsr	r18
    3616:	30 e3       	ldi	r19, 0x30	; 48
    3618:	32 0f       	add	r19, r18
    361a:	33 83       	std	Z+3, r19	; 0x03
	msg_uhr[4]='0'+Minuten%10;
    361c:	22 0f       	add	r18, r18
    361e:	32 2f       	mov	r19, r18
    3620:	33 0f       	add	r19, r19
    3622:	33 0f       	add	r19, r19
    3624:	23 0f       	add	r18, r19
    3626:	92 1b       	sub	r25, r18
    3628:	90 5d       	subi	r25, 0xD0	; 208
    362a:	94 83       	std	Z+4, r25	; 0x04
	msg_uhr[6]='0'+Sekunden/10;
    362c:	92 89       	ldd	r25, Z+18	; 0x12
    362e:	98 9f       	mul	r25, r24
    3630:	81 2d       	mov	r24, r1
    3632:	11 24       	eor	r1, r1
    3634:	86 95       	lsr	r24
    3636:	86 95       	lsr	r24
    3638:	86 95       	lsr	r24
    363a:	20 e3       	ldi	r18, 0x30	; 48
    363c:	28 0f       	add	r18, r24
    363e:	26 83       	std	Z+6, r18	; 0x06
	msg_uhr[7]='0'+Sekunden%10;
    3640:	88 0f       	add	r24, r24
    3642:	28 2f       	mov	r18, r24
    3644:	22 0f       	add	r18, r18
    3646:	22 0f       	add	r18, r18
    3648:	82 0f       	add	r24, r18
    364a:	98 1b       	sub	r25, r24
    364c:	90 5d       	subi	r25, 0xD0	; 208
    364e:	97 83       	std	Z+7, r25	; 0x07
    3650:	08 95       	ret

00003652 <_ZN3RTC15ausgabedatumneuEv>:
}
void RTC::ausgabedatumneu(){
    3652:	fc 01       	movw	r30, r24
	msg_dat[0]='0'+Tag/10;
    3654:	94 89       	ldd	r25, Z+20	; 0x14
    3656:	8d ec       	ldi	r24, 0xCD	; 205
    3658:	98 9f       	mul	r25, r24
    365a:	21 2d       	mov	r18, r1
    365c:	11 24       	eor	r1, r1
    365e:	26 95       	lsr	r18
    3660:	26 95       	lsr	r18
    3662:	26 95       	lsr	r18
    3664:	30 e3       	ldi	r19, 0x30	; 48
    3666:	32 0f       	add	r19, r18
    3668:	30 87       	std	Z+8, r19	; 0x08
	msg_dat[1]='0'+Tag%10;
    366a:	22 0f       	add	r18, r18
    366c:	32 2f       	mov	r19, r18
    366e:	33 0f       	add	r19, r19
    3670:	33 0f       	add	r19, r19
    3672:	23 0f       	add	r18, r19
    3674:	92 1b       	sub	r25, r18
    3676:	90 5d       	subi	r25, 0xD0	; 208
    3678:	91 87       	std	Z+9, r25	; 0x09
	msg_dat[3]='0'+Monat/10;
    367a:	95 89       	ldd	r25, Z+21	; 0x15
    367c:	98 9f       	mul	r25, r24
    367e:	21 2d       	mov	r18, r1
    3680:	11 24       	eor	r1, r1
    3682:	26 95       	lsr	r18
    3684:	26 95       	lsr	r18
    3686:	26 95       	lsr	r18
    3688:	30 e3       	ldi	r19, 0x30	; 48
    368a:	32 0f       	add	r19, r18
    368c:	33 87       	std	Z+11, r19	; 0x0b
	msg_dat[4]='0'+Monat%10;
    368e:	22 0f       	add	r18, r18
    3690:	32 2f       	mov	r19, r18
    3692:	33 0f       	add	r19, r19
    3694:	33 0f       	add	r19, r19
    3696:	23 0f       	add	r18, r19
    3698:	92 1b       	sub	r25, r18
    369a:	90 5d       	subi	r25, 0xD0	; 208
    369c:	94 87       	std	Z+12, r25	; 0x0c
	msg_dat[6]='0'+Jahr/10;
    369e:	96 89       	ldd	r25, Z+22	; 0x16
    36a0:	98 9f       	mul	r25, r24
    36a2:	81 2d       	mov	r24, r1
    36a4:	11 24       	eor	r1, r1
    36a6:	86 95       	lsr	r24
    36a8:	86 95       	lsr	r24
    36aa:	86 95       	lsr	r24
    36ac:	20 e3       	ldi	r18, 0x30	; 48
    36ae:	28 0f       	add	r18, r24
    36b0:	26 87       	std	Z+14, r18	; 0x0e
	msg_dat[7]='0'+Jahr%10;
    36b2:	88 0f       	add	r24, r24
    36b4:	28 2f       	mov	r18, r24
    36b6:	22 0f       	add	r18, r18
    36b8:	22 0f       	add	r18, r18
    36ba:	82 0f       	add	r24, r18
    36bc:	98 1b       	sub	r25, r24
    36be:	90 5d       	subi	r25, 0xD0	; 208
    36c0:	97 87       	std	Z+15, r25	; 0x0f
    36c2:	08 95       	ret

000036c4 <_ZN3RTCC1Ev>:


#include "RTC.h"

// default constructor
RTC::RTC()
    36c4:	cf 93       	push	r28
    36c6:	df 93       	push	r29
    36c8:	ec 01       	movw	r28, r24
{
	Sekunden=0;
    36ca:	1a 8a       	std	Y+18, r1	; 0x12
	HundSekunden=0;
    36cc:	1b 8a       	std	Y+19, r1	; 0x13
	Minuten=0;
    36ce:	19 8a       	std	Y+17, r1	; 0x11
	Stunden=0;
    36d0:	18 8a       	std	Y+16, r1	; 0x10
	Tag=0;
    36d2:	1c 8a       	std	Y+20, r1	; 0x14
	Monat=0;
    36d4:	1d 8a       	std	Y+21, r1	; 0x15
	Jahr=0;
    36d6:	1e 8a       	std	Y+22, r1	; 0x16
    36d8:	fc 01       	movw	r30, r24
	for(uint8_t i=0;i<bitsderrtc;i++){
    36da:	80 e0       	ldi	r24, 0x00	; 0
		msg_uhr[i]=0;
    36dc:	11 92       	st	Z+, r1
	Minuten=0;
	Stunden=0;
	Tag=0;
	Monat=0;
	Jahr=0;
	for(uint8_t i=0;i<bitsderrtc;i++){
    36de:	8f 5f       	subi	r24, 0xFF	; 255
    36e0:	88 30       	cpi	r24, 0x08	; 8
    36e2:	e1 f7       	brne	.-8      	; 0x36dc <_ZN3RTCC1Ev+0x18>
		msg_uhr[i]=0;
	}
	//Einstellungen des Ausgabebuffers
	msg_uhr[2]=':';
    36e4:	8a e3       	ldi	r24, 0x3A	; 58
    36e6:	8a 83       	std	Y+2, r24	; 0x02
	msg_uhr[5]=':';
    36e8:	8d 83       	std	Y+5, r24	; 0x05
	msg_dat[2]='.';
    36ea:	8e e2       	ldi	r24, 0x2E	; 46
    36ec:	8a 87       	std	Y+10, r24	; 0x0a
	msg_dat[5]='.';
    36ee:	8d 87       	std	Y+13, r24	; 0x0d
	ausgabezeitneu();
    36f0:	ce 01       	movw	r24, r28
    36f2:	0e 94 f0 1a 	call	0x35e0	; 0x35e0 <_ZN3RTC14ausgabezeitneuEv>
	ausgabedatumneu();
    36f6:	ce 01       	movw	r24, r28
    36f8:	0e 94 29 1b 	call	0x3652	; 0x3652 <_ZN3RTC15ausgabedatumneuEv>
} //RTC
    36fc:	df 91       	pop	r29
    36fe:	cf 91       	pop	r28
    3700:	08 95       	ret

00003702 <_ZN3RTC8kalenderEv>:
	ausgabezeitneu();
	return 0;
}

void RTC::kalender(){
	if (Monat==4||Monat==6||Monat==9||Monat==11)
    3702:	fc 01       	movw	r30, r24
    3704:	25 89       	ldd	r18, Z+21	; 0x15
    3706:	32 2f       	mov	r19, r18
    3708:	3d 7f       	andi	r19, 0xFD	; 253
    370a:	34 30       	cpi	r19, 0x04	; 4
    370c:	11 f0       	breq	.+4      	; 0x3712 <_ZN3RTC8kalenderEv+0x10>
    370e:	39 30       	cpi	r19, 0x09	; 9
    3710:	91 f4       	brne	.+36     	; 0x3736 <_ZN3RTC8kalenderEv+0x34>
	{
		if (Tag>=31)
    3712:	fc 01       	movw	r30, r24
    3714:	34 89       	ldd	r19, Z+20	; 0x14
    3716:	3f 31       	cpi	r19, 0x1F	; 31
    3718:	b0 f1       	brcs	.+108    	; 0x3786 <_ZN3RTC8kalenderEv+0x84>
		{
			Tag=1;
    371a:	31 e0       	ldi	r19, 0x01	; 1
    371c:	34 8b       	std	Z+20, r19	; 0x14
			Monat++;
    371e:	2f 5f       	subi	r18, 0xFF	; 255
			if (Monat>=13)
    3720:	2d 30       	cpi	r18, 0x0D	; 13
    3722:	10 f4       	brcc	.+4      	; 0x3728 <_ZN3RTC8kalenderEv+0x26>
	if (Monat==4||Monat==6||Monat==9||Monat==11)
	{
		if (Tag>=31)
		{
			Tag=1;
			Monat++;
    3724:	25 8b       	std	Z+21, r18	; 0x15
    3726:	2f c0       	rjmp	.+94     	; 0x3786 <_ZN3RTC8kalenderEv+0x84>
			if (Monat>=13)
			{
				Monat=1;
    3728:	21 e0       	ldi	r18, 0x01	; 1
    372a:	fc 01       	movw	r30, r24
    372c:	25 8b       	std	Z+21, r18	; 0x15
				Jahr++;
    372e:	26 89       	ldd	r18, Z+22	; 0x16
    3730:	2f 5f       	subi	r18, 0xFF	; 255
    3732:	26 8b       	std	Z+22, r18	; 0x16
    3734:	28 c0       	rjmp	.+80     	; 0x3786 <_ZN3RTC8kalenderEv+0x84>
			}
		}
	}
	else if (Monat==2)
    3736:	22 30       	cpi	r18, 0x02	; 2
    3738:	a9 f4       	brne	.+42     	; 0x3764 <_ZN3RTC8kalenderEv+0x62>
	{
		if (Jahr%4==0)
    373a:	fc 01       	movw	r30, r24
    373c:	26 89       	ldd	r18, Z+22	; 0x16
    373e:	23 70       	andi	r18, 0x03	; 3
    3740:	41 f4       	brne	.+16     	; 0x3752 <_ZN3RTC8kalenderEv+0x50>
		{
			if (Tag>=30)
    3742:	24 89       	ldd	r18, Z+20	; 0x14
    3744:	2e 31       	cpi	r18, 0x1E	; 30
    3746:	f8 f0       	brcs	.+62     	; 0x3786 <_ZN3RTC8kalenderEv+0x84>
			{
				Tag=1;
    3748:	21 e0       	ldi	r18, 0x01	; 1
    374a:	24 8b       	std	Z+20, r18	; 0x14
				Monat++;
    374c:	23 e0       	ldi	r18, 0x03	; 3
    374e:	25 8b       	std	Z+21, r18	; 0x15
    3750:	1a c0       	rjmp	.+52     	; 0x3786 <_ZN3RTC8kalenderEv+0x84>
					Jahr++;
				}
			}
		}
		else{
			if (Tag>=29)
    3752:	fc 01       	movw	r30, r24
    3754:	24 89       	ldd	r18, Z+20	; 0x14
    3756:	2d 31       	cpi	r18, 0x1D	; 29
    3758:	b0 f0       	brcs	.+44     	; 0x3786 <_ZN3RTC8kalenderEv+0x84>
			{
				Tag=1;
    375a:	21 e0       	ldi	r18, 0x01	; 1
    375c:	24 8b       	std	Z+20, r18	; 0x14
				Monat++;
    375e:	23 e0       	ldi	r18, 0x03	; 3
    3760:	25 8b       	std	Z+21, r18	; 0x15
    3762:	11 c0       	rjmp	.+34     	; 0x3786 <_ZN3RTC8kalenderEv+0x84>
				}
			}
		}
	}
	else{
		if (Tag>=32)
    3764:	fc 01       	movw	r30, r24
    3766:	34 89       	ldd	r19, Z+20	; 0x14
    3768:	30 32       	cpi	r19, 0x20	; 32
    376a:	68 f0       	brcs	.+26     	; 0x3786 <_ZN3RTC8kalenderEv+0x84>
		{
			Tag=1;
    376c:	31 e0       	ldi	r19, 0x01	; 1
    376e:	34 8b       	std	Z+20, r19	; 0x14
			Monat++;
    3770:	2f 5f       	subi	r18, 0xFF	; 255
			if (Monat>=13)
    3772:	2d 30       	cpi	r18, 0x0D	; 13
    3774:	10 f4       	brcc	.+4      	; 0x377a <_ZN3RTC8kalenderEv+0x78>
	}
	else{
		if (Tag>=32)
		{
			Tag=1;
			Monat++;
    3776:	25 8b       	std	Z+21, r18	; 0x15
    3778:	06 c0       	rjmp	.+12     	; 0x3786 <_ZN3RTC8kalenderEv+0x84>
			if (Monat>=13)
			{
				Monat=1;
    377a:	21 e0       	ldi	r18, 0x01	; 1
    377c:	fc 01       	movw	r30, r24
    377e:	25 8b       	std	Z+21, r18	; 0x15
				Jahr++;
    3780:	26 89       	ldd	r18, Z+22	; 0x16
    3782:	2f 5f       	subi	r18, 0xFF	; 255
    3784:	26 8b       	std	Z+22, r18	; 0x16
			}
		}
	}
	ausgabedatumneu();
    3786:	0e 94 29 1b 	call	0x3652	; 0x3652 <_ZN3RTC15ausgabedatumneuEv>
    378a:	08 95       	ret

0000378c <_ZN3RTC4zeitEv>:
	}
	ausgabezeitneu();
	return 0;
}

uint8_t RTC::zeit(){
    378c:	cf 93       	push	r28
    378e:	df 93       	push	r29
    3790:	ec 01       	movw	r28, r24
	//Sekunden++; sitzt im Vektor um Taster besser entprellen zu koennen
	if (Sekunden >= 60 && Sekunden <=200){
    3792:	8a 89       	ldd	r24, Y+18	; 0x12
    3794:	8c 53       	subi	r24, 0x3C	; 60
    3796:	8d 38       	cpi	r24, 0x8D	; 141
    3798:	b8 f4       	brcc	.+46     	; 0x37c8 <_ZN3RTC4zeitEv+0x3c>
		Sekunden = 0;
    379a:	1a 8a       	std	Y+18, r1	; 0x12
		Minuten++;
    379c:	89 89       	ldd	r24, Y+17	; 0x11
    379e:	8f 5f       	subi	r24, 0xFF	; 255
    37a0:	89 8b       	std	Y+17, r24	; 0x11
		interupts |= (1<<minuteninterupt);
    37a2:	9f 89       	ldd	r25, Y+23	; 0x17
    37a4:	94 60       	ori	r25, 0x04	; 4
    37a6:	9f 8b       	std	Y+23, r25	; 0x17
		if(Minuten >= 60){
    37a8:	8c 33       	cpi	r24, 0x3C	; 60
    37aa:	20 f0       	brcs	.+8      	; 0x37b4 <_ZN3RTC4zeitEv+0x28>
			Minuten = 0;
    37ac:	19 8a       	std	Y+17, r1	; 0x11
			Stunden++;
    37ae:	88 89       	ldd	r24, Y+16	; 0x10
    37b0:	8f 5f       	subi	r24, 0xFF	; 255
    37b2:	88 8b       	std	Y+16, r24	; 0x10
		}
		if(Stunden >= 24){
    37b4:	88 89       	ldd	r24, Y+16	; 0x10
    37b6:	88 31       	cpi	r24, 0x18	; 24
    37b8:	38 f0       	brcs	.+14     	; 0x37c8 <_ZN3RTC4zeitEv+0x3c>
			Stunden = 0;
    37ba:	18 8a       	std	Y+16, r1	; 0x10
			Tag++;
    37bc:	8c 89       	ldd	r24, Y+20	; 0x14
    37be:	8f 5f       	subi	r24, 0xFF	; 255
    37c0:	8c 8b       	std	Y+20, r24	; 0x14
			kalender();
    37c2:	ce 01       	movw	r24, r28
    37c4:	0e 94 81 1b 	call	0x3702	; 0x3702 <_ZN3RTC8kalenderEv>
		}
	}
	ausgabezeitneu();
    37c8:	ce 01       	movw	r24, r28
    37ca:	0e 94 f0 1a 	call	0x35e0	; 0x35e0 <_ZN3RTC14ausgabezeitneuEv>
	return 0;
}
    37ce:	80 e0       	ldi	r24, 0x00	; 0
    37d0:	df 91       	pop	r29
    37d2:	cf 91       	pop	r28
    37d4:	08 95       	ret

000037d6 <_ZN3RTC10dummyeinstEv>:
	msg_dat[4]='0'+Monat%10;
	msg_dat[6]='0'+Jahr/10;
	msg_dat[7]='0'+Jahr%10;
}

void RTC::dummyeinst(){
    37d6:	cf 93       	push	r28
    37d8:	df 93       	push	r29
    37da:	ec 01       	movw	r28, r24
	Stunden=10;
    37dc:	8a e0       	ldi	r24, 0x0A	; 10
    37de:	88 8b       	std	Y+16, r24	; 0x10
	Minuten=30;
    37e0:	8e e1       	ldi	r24, 0x1E	; 30
    37e2:	89 8b       	std	Y+17, r24	; 0x11
	Tag=7;
    37e4:	87 e0       	ldi	r24, 0x07	; 7
    37e6:	8c 8b       	std	Y+20, r24	; 0x14
	Monat=9;
    37e8:	89 e0       	ldi	r24, 0x09	; 9
    37ea:	8d 8b       	std	Y+21, r24	; 0x15
	Jahr=15;
    37ec:	8f e0       	ldi	r24, 0x0F	; 15
    37ee:	8e 8b       	std	Y+22, r24	; 0x16
	ausgabedatumneu();
    37f0:	ce 01       	movw	r24, r28
    37f2:	0e 94 29 1b 	call	0x3652	; 0x3652 <_ZN3RTC15ausgabedatumneuEv>
	ausgabezeitneu();
    37f6:	ce 01       	movw	r24, r28
    37f8:	0e 94 f0 1a 	call	0x35e0	; 0x35e0 <_ZN3RTC14ausgabezeitneuEv>
}
    37fc:	df 91       	pop	r29
    37fe:	cf 91       	pop	r28
    3800:	08 95       	ret

00003802 <_ZN3RTC8RTCstartEv>:

void RTC::RTCstart(){
    3802:	fc 01       	movw	r30, r24
	//Einstellungen des Ausgabebuffers
	msg_uhr[0]='0';
    3804:	80 e3       	ldi	r24, 0x30	; 48
    3806:	80 83       	st	Z, r24
	msg_uhr[1]='0';
    3808:	81 83       	std	Z+1, r24	; 0x01
	msg_uhr[2]=':';
    380a:	9a e3       	ldi	r25, 0x3A	; 58
    380c:	92 83       	std	Z+2, r25	; 0x02
	msg_uhr[3]='0';
    380e:	83 83       	std	Z+3, r24	; 0x03
	msg_uhr[4]='0';
    3810:	84 83       	std	Z+4, r24	; 0x04
	msg_uhr[5]=':';
    3812:	95 83       	std	Z+5, r25	; 0x05
	msg_uhr[6]='0';
    3814:	86 83       	std	Z+6, r24	; 0x06
	msg_uhr[7]='0';
    3816:	87 83       	std	Z+7, r24	; 0x07
	//Timer2 als 1ms Timer fuer die RTC
	//asynchron mit 32.768 kHz (noch synchrom)
	TCNT2 = TIMER2RTCTIME;
    3818:	10 92 b2 00 	sts	0x00B2, r1
	ASSR |= (1<<AS2);
    381c:	e6 eb       	ldi	r30, 0xB6	; 182
    381e:	f0 e0       	ldi	r31, 0x00	; 0
    3820:	80 81       	ld	r24, Z
    3822:	80 62       	ori	r24, 0x20	; 32
    3824:	80 83       	st	Z, r24
	TIMSK2 = (1<<TOIE2);
    3826:	81 e0       	ldi	r24, 0x01	; 1
    3828:	80 93 70 00 	sts	0x0070, r24
	TCCR2B = (1<<CS22) | (1<<CS20);		//Vorteiler 256
    382c:	85 e0       	ldi	r24, 0x05	; 5
    382e:	80 93 b1 00 	sts	0x00B1, r24
    3832:	08 95       	ret

00003834 <_ZN3RTC7RTCstopEv>:
}

void RTC::RTCstop(){
	TCCR2B &= ~((1<<CS22) | (1<<CS21));
    3834:	e1 eb       	ldi	r30, 0xB1	; 177
    3836:	f0 e0       	ldi	r31, 0x00	; 0
    3838:	80 81       	ld	r24, Z
    383a:	89 7f       	andi	r24, 0xF9	; 249
    383c:	80 83       	st	Z, r24
    383e:	08 95       	ret

00003840 <_ZN3RTC5timerEv>:
}

uint8_t RTC::timer(){
    3840:	fc 01       	movw	r30, r24
	if (Sekunden>60)
    3842:	82 89       	ldd	r24, Z+18	; 0x12
    3844:	8d 33       	cpi	r24, 0x3D	; 61
    3846:	b8 f0       	brcs	.+46     	; 0x3876 <_ZN3RTC5timerEv+0x36>
	{
		Sekunden=59;
    3848:	8b e3       	ldi	r24, 0x3B	; 59
    384a:	82 8b       	std	Z+18, r24	; 0x12
		Minuten--;
    384c:	81 89       	ldd	r24, Z+17	; 0x11
    384e:	81 50       	subi	r24, 0x01	; 1
		if (Minuten>60)
    3850:	8d 33       	cpi	r24, 0x3D	; 61
    3852:	18 f4       	brcc	.+6      	; 0x385a <_ZN3RTC5timerEv+0x1a>

uint8_t RTC::timer(){
	if (Sekunden>60)
	{
		Sekunden=59;
		Minuten--;
    3854:	81 8b       	std	Z+17, r24	; 0x11
				Sekunden=0;
				return 1;
			}
		}
	}
	return 0;
    3856:	80 e0       	ldi	r24, 0x00	; 0
    3858:	08 95       	ret
	{
		Sekunden=59;
		Minuten--;
		if (Minuten>60)
		{
			Minuten=59;
    385a:	8b e3       	ldi	r24, 0x3B	; 59
    385c:	81 8b       	std	Z+17, r24	; 0x11
			Stunden--;
    385e:	80 89       	ldd	r24, Z+16	; 0x10
    3860:	81 50       	subi	r24, 0x01	; 1
			if (Stunden>24)
    3862:	89 31       	cpi	r24, 0x19	; 25
    3864:	18 f4       	brcc	.+6      	; 0x386c <_ZN3RTC5timerEv+0x2c>
		Sekunden=59;
		Minuten--;
		if (Minuten>60)
		{
			Minuten=59;
			Stunden--;
    3866:	80 8b       	std	Z+16, r24	; 0x10
				Sekunden=0;
				return 1;
			}
		}
	}
	return 0;
    3868:	80 e0       	ldi	r24, 0x00	; 0
    386a:	08 95       	ret
		{
			Minuten=59;
			Stunden--;
			if (Stunden>24)
			{
				Stunden=0;
    386c:	10 8a       	std	Z+16, r1	; 0x10
				Minuten=0;
    386e:	11 8a       	std	Z+17, r1	; 0x11
				Sekunden=0;
    3870:	12 8a       	std	Z+18, r1	; 0x12
				return 1;
    3872:	81 e0       	ldi	r24, 0x01	; 1
    3874:	08 95       	ret
			}
		}
	}
	return 0;
    3876:	80 e0       	ldi	r24, 0x00	; 0
}
    3878:	08 95       	ret

0000387a <__subsf3>:
    387a:	50 58       	subi	r21, 0x80	; 128

0000387c <__addsf3>:
    387c:	bb 27       	eor	r27, r27
    387e:	aa 27       	eor	r26, r26
    3880:	0e d0       	rcall	.+28     	; 0x389e <__addsf3x>
    3882:	27 c2       	rjmp	.+1102   	; 0x3cd2 <__fp_round>
    3884:	f0 d1       	rcall	.+992    	; 0x3c66 <__fp_pscA>
    3886:	30 f0       	brcs	.+12     	; 0x3894 <__addsf3+0x18>
    3888:	f5 d1       	rcall	.+1002   	; 0x3c74 <__fp_pscB>
    388a:	20 f0       	brcs	.+8      	; 0x3894 <__addsf3+0x18>
    388c:	31 f4       	brne	.+12     	; 0x389a <__addsf3+0x1e>
    388e:	9f 3f       	cpi	r25, 0xFF	; 255
    3890:	11 f4       	brne	.+4      	; 0x3896 <__addsf3+0x1a>
    3892:	1e f4       	brtc	.+6      	; 0x389a <__addsf3+0x1e>
    3894:	c0 c1       	rjmp	.+896    	; 0x3c16 <__fp_nan>
    3896:	0e f4       	brtc	.+2      	; 0x389a <__addsf3+0x1e>
    3898:	e0 95       	com	r30
    389a:	e7 fb       	bst	r30, 7
    389c:	b6 c1       	rjmp	.+876    	; 0x3c0a <__fp_inf>

0000389e <__addsf3x>:
    389e:	e9 2f       	mov	r30, r25
    38a0:	3a d2       	rcall	.+1140   	; 0x3d16 <__fp_split3>
    38a2:	80 f3       	brcs	.-32     	; 0x3884 <__addsf3+0x8>
    38a4:	ba 17       	cp	r27, r26
    38a6:	62 07       	cpc	r22, r18
    38a8:	73 07       	cpc	r23, r19
    38aa:	84 07       	cpc	r24, r20
    38ac:	95 07       	cpc	r25, r21
    38ae:	18 f0       	brcs	.+6      	; 0x38b6 <__addsf3x+0x18>
    38b0:	71 f4       	brne	.+28     	; 0x38ce <__addsf3x+0x30>
    38b2:	9e f5       	brtc	.+102    	; 0x391a <__addsf3x+0x7c>
    38b4:	52 c2       	rjmp	.+1188   	; 0x3d5a <__fp_zero>
    38b6:	0e f4       	brtc	.+2      	; 0x38ba <__addsf3x+0x1c>
    38b8:	e0 95       	com	r30
    38ba:	0b 2e       	mov	r0, r27
    38bc:	ba 2f       	mov	r27, r26
    38be:	a0 2d       	mov	r26, r0
    38c0:	0b 01       	movw	r0, r22
    38c2:	b9 01       	movw	r22, r18
    38c4:	90 01       	movw	r18, r0
    38c6:	0c 01       	movw	r0, r24
    38c8:	ca 01       	movw	r24, r20
    38ca:	a0 01       	movw	r20, r0
    38cc:	11 24       	eor	r1, r1
    38ce:	ff 27       	eor	r31, r31
    38d0:	59 1b       	sub	r21, r25
    38d2:	99 f0       	breq	.+38     	; 0x38fa <__addsf3x+0x5c>
    38d4:	59 3f       	cpi	r21, 0xF9	; 249
    38d6:	50 f4       	brcc	.+20     	; 0x38ec <__addsf3x+0x4e>
    38d8:	50 3e       	cpi	r21, 0xE0	; 224
    38da:	68 f1       	brcs	.+90     	; 0x3936 <__addsf3x+0x98>
    38dc:	1a 16       	cp	r1, r26
    38de:	f0 40       	sbci	r31, 0x00	; 0
    38e0:	a2 2f       	mov	r26, r18
    38e2:	23 2f       	mov	r18, r19
    38e4:	34 2f       	mov	r19, r20
    38e6:	44 27       	eor	r20, r20
    38e8:	58 5f       	subi	r21, 0xF8	; 248
    38ea:	f3 cf       	rjmp	.-26     	; 0x38d2 <__addsf3x+0x34>
    38ec:	46 95       	lsr	r20
    38ee:	37 95       	ror	r19
    38f0:	27 95       	ror	r18
    38f2:	a7 95       	ror	r26
    38f4:	f0 40       	sbci	r31, 0x00	; 0
    38f6:	53 95       	inc	r21
    38f8:	c9 f7       	brne	.-14     	; 0x38ec <__addsf3x+0x4e>
    38fa:	7e f4       	brtc	.+30     	; 0x391a <__addsf3x+0x7c>
    38fc:	1f 16       	cp	r1, r31
    38fe:	ba 0b       	sbc	r27, r26
    3900:	62 0b       	sbc	r22, r18
    3902:	73 0b       	sbc	r23, r19
    3904:	84 0b       	sbc	r24, r20
    3906:	ba f0       	brmi	.+46     	; 0x3936 <__addsf3x+0x98>
    3908:	91 50       	subi	r25, 0x01	; 1
    390a:	a1 f0       	breq	.+40     	; 0x3934 <__addsf3x+0x96>
    390c:	ff 0f       	add	r31, r31
    390e:	bb 1f       	adc	r27, r27
    3910:	66 1f       	adc	r22, r22
    3912:	77 1f       	adc	r23, r23
    3914:	88 1f       	adc	r24, r24
    3916:	c2 f7       	brpl	.-16     	; 0x3908 <__addsf3x+0x6a>
    3918:	0e c0       	rjmp	.+28     	; 0x3936 <__addsf3x+0x98>
    391a:	ba 0f       	add	r27, r26
    391c:	62 1f       	adc	r22, r18
    391e:	73 1f       	adc	r23, r19
    3920:	84 1f       	adc	r24, r20
    3922:	48 f4       	brcc	.+18     	; 0x3936 <__addsf3x+0x98>
    3924:	87 95       	ror	r24
    3926:	77 95       	ror	r23
    3928:	67 95       	ror	r22
    392a:	b7 95       	ror	r27
    392c:	f7 95       	ror	r31
    392e:	9e 3f       	cpi	r25, 0xFE	; 254
    3930:	08 f0       	brcs	.+2      	; 0x3934 <__addsf3x+0x96>
    3932:	b3 cf       	rjmp	.-154    	; 0x389a <__addsf3+0x1e>
    3934:	93 95       	inc	r25
    3936:	88 0f       	add	r24, r24
    3938:	08 f0       	brcs	.+2      	; 0x393c <__addsf3x+0x9e>
    393a:	99 27       	eor	r25, r25
    393c:	ee 0f       	add	r30, r30
    393e:	97 95       	ror	r25
    3940:	87 95       	ror	r24
    3942:	08 95       	ret
    3944:	90 d1       	rcall	.+800    	; 0x3c66 <__fp_pscA>
    3946:	58 f0       	brcs	.+22     	; 0x395e <__addsf3x+0xc0>
    3948:	80 e8       	ldi	r24, 0x80	; 128
    394a:	91 e0       	ldi	r25, 0x01	; 1
    394c:	09 f4       	brne	.+2      	; 0x3950 <__addsf3x+0xb2>
    394e:	9e ef       	ldi	r25, 0xFE	; 254
    3950:	91 d1       	rcall	.+802    	; 0x3c74 <__fp_pscB>
    3952:	28 f0       	brcs	.+10     	; 0x395e <__addsf3x+0xc0>
    3954:	40 e8       	ldi	r20, 0x80	; 128
    3956:	51 e0       	ldi	r21, 0x01	; 1
    3958:	59 f4       	brne	.+22     	; 0x3970 <atan2+0xe>
    395a:	5e ef       	ldi	r21, 0xFE	; 254
    395c:	09 c0       	rjmp	.+18     	; 0x3970 <atan2+0xe>
    395e:	5b c1       	rjmp	.+694    	; 0x3c16 <__fp_nan>
    3960:	fc c1       	rjmp	.+1016   	; 0x3d5a <__fp_zero>

00003962 <atan2>:
    3962:	e9 2f       	mov	r30, r25
    3964:	e0 78       	andi	r30, 0x80	; 128
    3966:	d7 d1       	rcall	.+942    	; 0x3d16 <__fp_split3>
    3968:	68 f3       	brcs	.-38     	; 0x3944 <__addsf3x+0xa6>
    396a:	09 2e       	mov	r0, r25
    396c:	05 2a       	or	r0, r21
    396e:	c1 f3       	breq	.-16     	; 0x3960 <__addsf3x+0xc2>
    3970:	26 17       	cp	r18, r22
    3972:	37 07       	cpc	r19, r23
    3974:	48 07       	cpc	r20, r24
    3976:	59 07       	cpc	r21, r25
    3978:	38 f0       	brcs	.+14     	; 0x3988 <atan2+0x26>
    397a:	0e 2e       	mov	r0, r30
    397c:	07 f8       	bld	r0, 7
    397e:	e0 25       	eor	r30, r0
    3980:	69 f0       	breq	.+26     	; 0x399c <atan2+0x3a>
    3982:	e0 25       	eor	r30, r0
    3984:	e0 64       	ori	r30, 0x40	; 64
    3986:	0a c0       	rjmp	.+20     	; 0x399c <atan2+0x3a>
    3988:	ef 63       	ori	r30, 0x3F	; 63
    398a:	07 f8       	bld	r0, 7
    398c:	00 94       	com	r0
    398e:	07 fa       	bst	r0, 7
    3990:	db 01       	movw	r26, r22
    3992:	b9 01       	movw	r22, r18
    3994:	9d 01       	movw	r18, r26
    3996:	dc 01       	movw	r26, r24
    3998:	ca 01       	movw	r24, r20
    399a:	ad 01       	movw	r20, r26
    399c:	ef 93       	push	r30
    399e:	4a d0       	rcall	.+148    	; 0x3a34 <__divsf3_pse>
    39a0:	98 d1       	rcall	.+816    	; 0x3cd2 <__fp_round>
    39a2:	0a d0       	rcall	.+20     	; 0x39b8 <atan>
    39a4:	5f 91       	pop	r21
    39a6:	55 23       	and	r21, r21
    39a8:	31 f0       	breq	.+12     	; 0x39b6 <atan2+0x54>
    39aa:	2b ed       	ldi	r18, 0xDB	; 219
    39ac:	3f e0       	ldi	r19, 0x0F	; 15
    39ae:	49 e4       	ldi	r20, 0x49	; 73
    39b0:	50 fd       	sbrc	r21, 0
    39b2:	49 ec       	ldi	r20, 0xC9	; 201
    39b4:	63 cf       	rjmp	.-314    	; 0x387c <__addsf3>
    39b6:	08 95       	ret

000039b8 <atan>:
    39b8:	df 93       	push	r29
    39ba:	dd 27       	eor	r29, r29
    39bc:	b9 2f       	mov	r27, r25
    39be:	bf 77       	andi	r27, 0x7F	; 127
    39c0:	40 e8       	ldi	r20, 0x80	; 128
    39c2:	5f e3       	ldi	r21, 0x3F	; 63
    39c4:	16 16       	cp	r1, r22
    39c6:	17 06       	cpc	r1, r23
    39c8:	48 07       	cpc	r20, r24
    39ca:	5b 07       	cpc	r21, r27
    39cc:	10 f4       	brcc	.+4      	; 0x39d2 <atan+0x1a>
    39ce:	d9 2f       	mov	r29, r25
    39d0:	cf d1       	rcall	.+926    	; 0x3d70 <inverse>
    39d2:	9f 93       	push	r25
    39d4:	8f 93       	push	r24
    39d6:	7f 93       	push	r23
    39d8:	6f 93       	push	r22
    39da:	3a d2       	rcall	.+1140   	; 0x3e50 <square>
    39dc:	ec e8       	ldi	r30, 0x8C	; 140
    39de:	f0 e0       	ldi	r31, 0x00	; 0
    39e0:	1d d1       	rcall	.+570    	; 0x3c1c <__fp_powser>
    39e2:	77 d1       	rcall	.+750    	; 0x3cd2 <__fp_round>
    39e4:	2f 91       	pop	r18
    39e6:	3f 91       	pop	r19
    39e8:	4f 91       	pop	r20
    39ea:	5f 91       	pop	r21
    39ec:	d4 d1       	rcall	.+936    	; 0x3d96 <__mulsf3x>
    39ee:	dd 23       	and	r29, r29
    39f0:	49 f0       	breq	.+18     	; 0x3a04 <atan+0x4c>
    39f2:	90 58       	subi	r25, 0x80	; 128
    39f4:	a2 ea       	ldi	r26, 0xA2	; 162
    39f6:	2a ed       	ldi	r18, 0xDA	; 218
    39f8:	3f e0       	ldi	r19, 0x0F	; 15
    39fa:	49 ec       	ldi	r20, 0xC9	; 201
    39fc:	5f e3       	ldi	r21, 0x3F	; 63
    39fe:	d0 78       	andi	r29, 0x80	; 128
    3a00:	5d 27       	eor	r21, r29
    3a02:	4d df       	rcall	.-358    	; 0x389e <__addsf3x>
    3a04:	df 91       	pop	r29
    3a06:	65 c1       	rjmp	.+714    	; 0x3cd2 <__fp_round>

00003a08 <__cmpsf2>:
    3a08:	dc d0       	rcall	.+440    	; 0x3bc2 <__fp_cmp>
    3a0a:	08 f4       	brcc	.+2      	; 0x3a0e <__cmpsf2+0x6>
    3a0c:	81 e0       	ldi	r24, 0x01	; 1
    3a0e:	08 95       	ret

00003a10 <cos>:
    3a10:	39 d1       	rcall	.+626    	; 0x3c84 <__fp_rempio2>
    3a12:	e3 95       	inc	r30
    3a14:	6f c1       	rjmp	.+734    	; 0x3cf4 <__fp_sinus>

00003a16 <__divsf3>:
    3a16:	0c d0       	rcall	.+24     	; 0x3a30 <__divsf3x>
    3a18:	5c c1       	rjmp	.+696    	; 0x3cd2 <__fp_round>
    3a1a:	2c d1       	rcall	.+600    	; 0x3c74 <__fp_pscB>
    3a1c:	40 f0       	brcs	.+16     	; 0x3a2e <__divsf3+0x18>
    3a1e:	23 d1       	rcall	.+582    	; 0x3c66 <__fp_pscA>
    3a20:	30 f0       	brcs	.+12     	; 0x3a2e <__divsf3+0x18>
    3a22:	21 f4       	brne	.+8      	; 0x3a2c <__divsf3+0x16>
    3a24:	5f 3f       	cpi	r21, 0xFF	; 255
    3a26:	19 f0       	breq	.+6      	; 0x3a2e <__divsf3+0x18>
    3a28:	f0 c0       	rjmp	.+480    	; 0x3c0a <__fp_inf>
    3a2a:	51 11       	cpse	r21, r1
    3a2c:	97 c1       	rjmp	.+814    	; 0x3d5c <__fp_szero>
    3a2e:	f3 c0       	rjmp	.+486    	; 0x3c16 <__fp_nan>

00003a30 <__divsf3x>:
    3a30:	72 d1       	rcall	.+740    	; 0x3d16 <__fp_split3>
    3a32:	98 f3       	brcs	.-26     	; 0x3a1a <__divsf3+0x4>

00003a34 <__divsf3_pse>:
    3a34:	99 23       	and	r25, r25
    3a36:	c9 f3       	breq	.-14     	; 0x3a2a <__divsf3+0x14>
    3a38:	55 23       	and	r21, r21
    3a3a:	b1 f3       	breq	.-20     	; 0x3a28 <__divsf3+0x12>
    3a3c:	95 1b       	sub	r25, r21
    3a3e:	55 0b       	sbc	r21, r21
    3a40:	bb 27       	eor	r27, r27
    3a42:	aa 27       	eor	r26, r26
    3a44:	62 17       	cp	r22, r18
    3a46:	73 07       	cpc	r23, r19
    3a48:	84 07       	cpc	r24, r20
    3a4a:	38 f0       	brcs	.+14     	; 0x3a5a <__divsf3_pse+0x26>
    3a4c:	9f 5f       	subi	r25, 0xFF	; 255
    3a4e:	5f 4f       	sbci	r21, 0xFF	; 255
    3a50:	22 0f       	add	r18, r18
    3a52:	33 1f       	adc	r19, r19
    3a54:	44 1f       	adc	r20, r20
    3a56:	aa 1f       	adc	r26, r26
    3a58:	a9 f3       	breq	.-22     	; 0x3a44 <__divsf3_pse+0x10>
    3a5a:	33 d0       	rcall	.+102    	; 0x3ac2 <__divsf3_pse+0x8e>
    3a5c:	0e 2e       	mov	r0, r30
    3a5e:	3a f0       	brmi	.+14     	; 0x3a6e <__divsf3_pse+0x3a>
    3a60:	e0 e8       	ldi	r30, 0x80	; 128
    3a62:	30 d0       	rcall	.+96     	; 0x3ac4 <__divsf3_pse+0x90>
    3a64:	91 50       	subi	r25, 0x01	; 1
    3a66:	50 40       	sbci	r21, 0x00	; 0
    3a68:	e6 95       	lsr	r30
    3a6a:	00 1c       	adc	r0, r0
    3a6c:	ca f7       	brpl	.-14     	; 0x3a60 <__divsf3_pse+0x2c>
    3a6e:	29 d0       	rcall	.+82     	; 0x3ac2 <__divsf3_pse+0x8e>
    3a70:	fe 2f       	mov	r31, r30
    3a72:	27 d0       	rcall	.+78     	; 0x3ac2 <__divsf3_pse+0x8e>
    3a74:	66 0f       	add	r22, r22
    3a76:	77 1f       	adc	r23, r23
    3a78:	88 1f       	adc	r24, r24
    3a7a:	bb 1f       	adc	r27, r27
    3a7c:	26 17       	cp	r18, r22
    3a7e:	37 07       	cpc	r19, r23
    3a80:	48 07       	cpc	r20, r24
    3a82:	ab 07       	cpc	r26, r27
    3a84:	b0 e8       	ldi	r27, 0x80	; 128
    3a86:	09 f0       	breq	.+2      	; 0x3a8a <__divsf3_pse+0x56>
    3a88:	bb 0b       	sbc	r27, r27
    3a8a:	80 2d       	mov	r24, r0
    3a8c:	bf 01       	movw	r22, r30
    3a8e:	ff 27       	eor	r31, r31
    3a90:	93 58       	subi	r25, 0x83	; 131
    3a92:	5f 4f       	sbci	r21, 0xFF	; 255
    3a94:	2a f0       	brmi	.+10     	; 0x3aa0 <__divsf3_pse+0x6c>
    3a96:	9e 3f       	cpi	r25, 0xFE	; 254
    3a98:	51 05       	cpc	r21, r1
    3a9a:	68 f0       	brcs	.+26     	; 0x3ab6 <__divsf3_pse+0x82>
    3a9c:	b6 c0       	rjmp	.+364    	; 0x3c0a <__fp_inf>
    3a9e:	5e c1       	rjmp	.+700    	; 0x3d5c <__fp_szero>
    3aa0:	5f 3f       	cpi	r21, 0xFF	; 255
    3aa2:	ec f3       	brlt	.-6      	; 0x3a9e <__divsf3_pse+0x6a>
    3aa4:	98 3e       	cpi	r25, 0xE8	; 232
    3aa6:	dc f3       	brlt	.-10     	; 0x3a9e <__divsf3_pse+0x6a>
    3aa8:	86 95       	lsr	r24
    3aaa:	77 95       	ror	r23
    3aac:	67 95       	ror	r22
    3aae:	b7 95       	ror	r27
    3ab0:	f7 95       	ror	r31
    3ab2:	9f 5f       	subi	r25, 0xFF	; 255
    3ab4:	c9 f7       	brne	.-14     	; 0x3aa8 <__divsf3_pse+0x74>
    3ab6:	88 0f       	add	r24, r24
    3ab8:	91 1d       	adc	r25, r1
    3aba:	96 95       	lsr	r25
    3abc:	87 95       	ror	r24
    3abe:	97 f9       	bld	r25, 7
    3ac0:	08 95       	ret
    3ac2:	e1 e0       	ldi	r30, 0x01	; 1
    3ac4:	66 0f       	add	r22, r22
    3ac6:	77 1f       	adc	r23, r23
    3ac8:	88 1f       	adc	r24, r24
    3aca:	bb 1f       	adc	r27, r27
    3acc:	62 17       	cp	r22, r18
    3ace:	73 07       	cpc	r23, r19
    3ad0:	84 07       	cpc	r24, r20
    3ad2:	ba 07       	cpc	r27, r26
    3ad4:	20 f0       	brcs	.+8      	; 0x3ade <__divsf3_pse+0xaa>
    3ad6:	62 1b       	sub	r22, r18
    3ad8:	73 0b       	sbc	r23, r19
    3ada:	84 0b       	sbc	r24, r20
    3adc:	ba 0b       	sbc	r27, r26
    3ade:	ee 1f       	adc	r30, r30
    3ae0:	88 f7       	brcc	.-30     	; 0x3ac4 <__divsf3_pse+0x90>
    3ae2:	e0 95       	com	r30
    3ae4:	08 95       	ret

00003ae6 <__fixsfsi>:
    3ae6:	04 d0       	rcall	.+8      	; 0x3af0 <__fixunssfsi>
    3ae8:	68 94       	set
    3aea:	b1 11       	cpse	r27, r1
    3aec:	37 c1       	rjmp	.+622    	; 0x3d5c <__fp_szero>
    3aee:	08 95       	ret

00003af0 <__fixunssfsi>:
    3af0:	1a d1       	rcall	.+564    	; 0x3d26 <__fp_splitA>
    3af2:	88 f0       	brcs	.+34     	; 0x3b16 <__fixunssfsi+0x26>
    3af4:	9f 57       	subi	r25, 0x7F	; 127
    3af6:	90 f0       	brcs	.+36     	; 0x3b1c <__fixunssfsi+0x2c>
    3af8:	b9 2f       	mov	r27, r25
    3afa:	99 27       	eor	r25, r25
    3afc:	b7 51       	subi	r27, 0x17	; 23
    3afe:	a0 f0       	brcs	.+40     	; 0x3b28 <__fixunssfsi+0x38>
    3b00:	d1 f0       	breq	.+52     	; 0x3b36 <__fixunssfsi+0x46>
    3b02:	66 0f       	add	r22, r22
    3b04:	77 1f       	adc	r23, r23
    3b06:	88 1f       	adc	r24, r24
    3b08:	99 1f       	adc	r25, r25
    3b0a:	1a f0       	brmi	.+6      	; 0x3b12 <__fixunssfsi+0x22>
    3b0c:	ba 95       	dec	r27
    3b0e:	c9 f7       	brne	.-14     	; 0x3b02 <__fixunssfsi+0x12>
    3b10:	12 c0       	rjmp	.+36     	; 0x3b36 <__fixunssfsi+0x46>
    3b12:	b1 30       	cpi	r27, 0x01	; 1
    3b14:	81 f0       	breq	.+32     	; 0x3b36 <__fixunssfsi+0x46>
    3b16:	21 d1       	rcall	.+578    	; 0x3d5a <__fp_zero>
    3b18:	b1 e0       	ldi	r27, 0x01	; 1
    3b1a:	08 95       	ret
    3b1c:	1e c1       	rjmp	.+572    	; 0x3d5a <__fp_zero>
    3b1e:	67 2f       	mov	r22, r23
    3b20:	78 2f       	mov	r23, r24
    3b22:	88 27       	eor	r24, r24
    3b24:	b8 5f       	subi	r27, 0xF8	; 248
    3b26:	39 f0       	breq	.+14     	; 0x3b36 <__fixunssfsi+0x46>
    3b28:	b9 3f       	cpi	r27, 0xF9	; 249
    3b2a:	cc f3       	brlt	.-14     	; 0x3b1e <__fixunssfsi+0x2e>
    3b2c:	86 95       	lsr	r24
    3b2e:	77 95       	ror	r23
    3b30:	67 95       	ror	r22
    3b32:	b3 95       	inc	r27
    3b34:	d9 f7       	brne	.-10     	; 0x3b2c <__fixunssfsi+0x3c>
    3b36:	3e f4       	brtc	.+14     	; 0x3b46 <__fixunssfsi+0x56>
    3b38:	90 95       	com	r25
    3b3a:	80 95       	com	r24
    3b3c:	70 95       	com	r23
    3b3e:	61 95       	neg	r22
    3b40:	7f 4f       	sbci	r23, 0xFF	; 255
    3b42:	8f 4f       	sbci	r24, 0xFF	; 255
    3b44:	9f 4f       	sbci	r25, 0xFF	; 255
    3b46:	08 95       	ret

00003b48 <__floatunsisf>:
    3b48:	e8 94       	clt
    3b4a:	09 c0       	rjmp	.+18     	; 0x3b5e <__floatsisf+0x12>

00003b4c <__floatsisf>:
    3b4c:	97 fb       	bst	r25, 7
    3b4e:	3e f4       	brtc	.+14     	; 0x3b5e <__floatsisf+0x12>
    3b50:	90 95       	com	r25
    3b52:	80 95       	com	r24
    3b54:	70 95       	com	r23
    3b56:	61 95       	neg	r22
    3b58:	7f 4f       	sbci	r23, 0xFF	; 255
    3b5a:	8f 4f       	sbci	r24, 0xFF	; 255
    3b5c:	9f 4f       	sbci	r25, 0xFF	; 255
    3b5e:	99 23       	and	r25, r25
    3b60:	a9 f0       	breq	.+42     	; 0x3b8c <__floatsisf+0x40>
    3b62:	f9 2f       	mov	r31, r25
    3b64:	96 e9       	ldi	r25, 0x96	; 150
    3b66:	bb 27       	eor	r27, r27
    3b68:	93 95       	inc	r25
    3b6a:	f6 95       	lsr	r31
    3b6c:	87 95       	ror	r24
    3b6e:	77 95       	ror	r23
    3b70:	67 95       	ror	r22
    3b72:	b7 95       	ror	r27
    3b74:	f1 11       	cpse	r31, r1
    3b76:	f8 cf       	rjmp	.-16     	; 0x3b68 <__floatsisf+0x1c>
    3b78:	fa f4       	brpl	.+62     	; 0x3bb8 <__floatsisf+0x6c>
    3b7a:	bb 0f       	add	r27, r27
    3b7c:	11 f4       	brne	.+4      	; 0x3b82 <__floatsisf+0x36>
    3b7e:	60 ff       	sbrs	r22, 0
    3b80:	1b c0       	rjmp	.+54     	; 0x3bb8 <__floatsisf+0x6c>
    3b82:	6f 5f       	subi	r22, 0xFF	; 255
    3b84:	7f 4f       	sbci	r23, 0xFF	; 255
    3b86:	8f 4f       	sbci	r24, 0xFF	; 255
    3b88:	9f 4f       	sbci	r25, 0xFF	; 255
    3b8a:	16 c0       	rjmp	.+44     	; 0x3bb8 <__floatsisf+0x6c>
    3b8c:	88 23       	and	r24, r24
    3b8e:	11 f0       	breq	.+4      	; 0x3b94 <__floatsisf+0x48>
    3b90:	96 e9       	ldi	r25, 0x96	; 150
    3b92:	11 c0       	rjmp	.+34     	; 0x3bb6 <__floatsisf+0x6a>
    3b94:	77 23       	and	r23, r23
    3b96:	21 f0       	breq	.+8      	; 0x3ba0 <__floatsisf+0x54>
    3b98:	9e e8       	ldi	r25, 0x8E	; 142
    3b9a:	87 2f       	mov	r24, r23
    3b9c:	76 2f       	mov	r23, r22
    3b9e:	05 c0       	rjmp	.+10     	; 0x3baa <__floatsisf+0x5e>
    3ba0:	66 23       	and	r22, r22
    3ba2:	71 f0       	breq	.+28     	; 0x3bc0 <__floatsisf+0x74>
    3ba4:	96 e8       	ldi	r25, 0x86	; 134
    3ba6:	86 2f       	mov	r24, r22
    3ba8:	70 e0       	ldi	r23, 0x00	; 0
    3baa:	60 e0       	ldi	r22, 0x00	; 0
    3bac:	2a f0       	brmi	.+10     	; 0x3bb8 <__floatsisf+0x6c>
    3bae:	9a 95       	dec	r25
    3bb0:	66 0f       	add	r22, r22
    3bb2:	77 1f       	adc	r23, r23
    3bb4:	88 1f       	adc	r24, r24
    3bb6:	da f7       	brpl	.-10     	; 0x3bae <__floatsisf+0x62>
    3bb8:	88 0f       	add	r24, r24
    3bba:	96 95       	lsr	r25
    3bbc:	87 95       	ror	r24
    3bbe:	97 f9       	bld	r25, 7
    3bc0:	08 95       	ret

00003bc2 <__fp_cmp>:
    3bc2:	99 0f       	add	r25, r25
    3bc4:	00 08       	sbc	r0, r0
    3bc6:	55 0f       	add	r21, r21
    3bc8:	aa 0b       	sbc	r26, r26
    3bca:	e0 e8       	ldi	r30, 0x80	; 128
    3bcc:	fe ef       	ldi	r31, 0xFE	; 254
    3bce:	16 16       	cp	r1, r22
    3bd0:	17 06       	cpc	r1, r23
    3bd2:	e8 07       	cpc	r30, r24
    3bd4:	f9 07       	cpc	r31, r25
    3bd6:	c0 f0       	brcs	.+48     	; 0x3c08 <__fp_cmp+0x46>
    3bd8:	12 16       	cp	r1, r18
    3bda:	13 06       	cpc	r1, r19
    3bdc:	e4 07       	cpc	r30, r20
    3bde:	f5 07       	cpc	r31, r21
    3be0:	98 f0       	brcs	.+38     	; 0x3c08 <__fp_cmp+0x46>
    3be2:	62 1b       	sub	r22, r18
    3be4:	73 0b       	sbc	r23, r19
    3be6:	84 0b       	sbc	r24, r20
    3be8:	95 0b       	sbc	r25, r21
    3bea:	39 f4       	brne	.+14     	; 0x3bfa <__fp_cmp+0x38>
    3bec:	0a 26       	eor	r0, r26
    3bee:	61 f0       	breq	.+24     	; 0x3c08 <__fp_cmp+0x46>
    3bf0:	23 2b       	or	r18, r19
    3bf2:	24 2b       	or	r18, r20
    3bf4:	25 2b       	or	r18, r21
    3bf6:	21 f4       	brne	.+8      	; 0x3c00 <__fp_cmp+0x3e>
    3bf8:	08 95       	ret
    3bfa:	0a 26       	eor	r0, r26
    3bfc:	09 f4       	brne	.+2      	; 0x3c00 <__fp_cmp+0x3e>
    3bfe:	a1 40       	sbci	r26, 0x01	; 1
    3c00:	a6 95       	lsr	r26
    3c02:	8f ef       	ldi	r24, 0xFF	; 255
    3c04:	81 1d       	adc	r24, r1
    3c06:	81 1d       	adc	r24, r1
    3c08:	08 95       	ret

00003c0a <__fp_inf>:
    3c0a:	97 f9       	bld	r25, 7
    3c0c:	9f 67       	ori	r25, 0x7F	; 127
    3c0e:	80 e8       	ldi	r24, 0x80	; 128
    3c10:	70 e0       	ldi	r23, 0x00	; 0
    3c12:	60 e0       	ldi	r22, 0x00	; 0
    3c14:	08 95       	ret

00003c16 <__fp_nan>:
    3c16:	9f ef       	ldi	r25, 0xFF	; 255
    3c18:	80 ec       	ldi	r24, 0xC0	; 192
    3c1a:	08 95       	ret

00003c1c <__fp_powser>:
    3c1c:	df 93       	push	r29
    3c1e:	cf 93       	push	r28
    3c20:	1f 93       	push	r17
    3c22:	0f 93       	push	r16
    3c24:	ff 92       	push	r15
    3c26:	ef 92       	push	r14
    3c28:	df 92       	push	r13
    3c2a:	7b 01       	movw	r14, r22
    3c2c:	8c 01       	movw	r16, r24
    3c2e:	68 94       	set
    3c30:	05 c0       	rjmp	.+10     	; 0x3c3c <__fp_powser+0x20>
    3c32:	da 2e       	mov	r13, r26
    3c34:	ef 01       	movw	r28, r30
    3c36:	af d0       	rcall	.+350    	; 0x3d96 <__mulsf3x>
    3c38:	fe 01       	movw	r30, r28
    3c3a:	e8 94       	clt
    3c3c:	a5 91       	lpm	r26, Z+
    3c3e:	25 91       	lpm	r18, Z+
    3c40:	35 91       	lpm	r19, Z+
    3c42:	45 91       	lpm	r20, Z+
    3c44:	55 91       	lpm	r21, Z+
    3c46:	ae f3       	brts	.-22     	; 0x3c32 <__fp_powser+0x16>
    3c48:	ef 01       	movw	r28, r30
    3c4a:	29 de       	rcall	.-942    	; 0x389e <__addsf3x>
    3c4c:	fe 01       	movw	r30, r28
    3c4e:	97 01       	movw	r18, r14
    3c50:	a8 01       	movw	r20, r16
    3c52:	da 94       	dec	r13
    3c54:	79 f7       	brne	.-34     	; 0x3c34 <__fp_powser+0x18>
    3c56:	df 90       	pop	r13
    3c58:	ef 90       	pop	r14
    3c5a:	ff 90       	pop	r15
    3c5c:	0f 91       	pop	r16
    3c5e:	1f 91       	pop	r17
    3c60:	cf 91       	pop	r28
    3c62:	df 91       	pop	r29
    3c64:	08 95       	ret

00003c66 <__fp_pscA>:
    3c66:	00 24       	eor	r0, r0
    3c68:	0a 94       	dec	r0
    3c6a:	16 16       	cp	r1, r22
    3c6c:	17 06       	cpc	r1, r23
    3c6e:	18 06       	cpc	r1, r24
    3c70:	09 06       	cpc	r0, r25
    3c72:	08 95       	ret

00003c74 <__fp_pscB>:
    3c74:	00 24       	eor	r0, r0
    3c76:	0a 94       	dec	r0
    3c78:	12 16       	cp	r1, r18
    3c7a:	13 06       	cpc	r1, r19
    3c7c:	14 06       	cpc	r1, r20
    3c7e:	05 06       	cpc	r0, r21
    3c80:	08 95       	ret
    3c82:	c9 cf       	rjmp	.-110    	; 0x3c16 <__fp_nan>

00003c84 <__fp_rempio2>:
    3c84:	50 d0       	rcall	.+160    	; 0x3d26 <__fp_splitA>
    3c86:	e8 f3       	brcs	.-6      	; 0x3c82 <__fp_pscB+0xe>
    3c88:	e8 94       	clt
    3c8a:	e0 e0       	ldi	r30, 0x00	; 0
    3c8c:	bb 27       	eor	r27, r27
    3c8e:	9f 57       	subi	r25, 0x7F	; 127
    3c90:	f0 f0       	brcs	.+60     	; 0x3cce <__fp_rempio2+0x4a>
    3c92:	2a ed       	ldi	r18, 0xDA	; 218
    3c94:	3f e0       	ldi	r19, 0x0F	; 15
    3c96:	49 ec       	ldi	r20, 0xC9	; 201
    3c98:	06 c0       	rjmp	.+12     	; 0x3ca6 <__fp_rempio2+0x22>
    3c9a:	ee 0f       	add	r30, r30
    3c9c:	bb 0f       	add	r27, r27
    3c9e:	66 1f       	adc	r22, r22
    3ca0:	77 1f       	adc	r23, r23
    3ca2:	88 1f       	adc	r24, r24
    3ca4:	28 f0       	brcs	.+10     	; 0x3cb0 <__fp_rempio2+0x2c>
    3ca6:	b2 3a       	cpi	r27, 0xA2	; 162
    3ca8:	62 07       	cpc	r22, r18
    3caa:	73 07       	cpc	r23, r19
    3cac:	84 07       	cpc	r24, r20
    3cae:	28 f0       	brcs	.+10     	; 0x3cba <__fp_rempio2+0x36>
    3cb0:	b2 5a       	subi	r27, 0xA2	; 162
    3cb2:	62 0b       	sbc	r22, r18
    3cb4:	73 0b       	sbc	r23, r19
    3cb6:	84 0b       	sbc	r24, r20
    3cb8:	e3 95       	inc	r30
    3cba:	9a 95       	dec	r25
    3cbc:	72 f7       	brpl	.-36     	; 0x3c9a <__fp_rempio2+0x16>
    3cbe:	80 38       	cpi	r24, 0x80	; 128
    3cc0:	30 f4       	brcc	.+12     	; 0x3cce <__fp_rempio2+0x4a>
    3cc2:	9a 95       	dec	r25
    3cc4:	bb 0f       	add	r27, r27
    3cc6:	66 1f       	adc	r22, r22
    3cc8:	77 1f       	adc	r23, r23
    3cca:	88 1f       	adc	r24, r24
    3ccc:	d2 f7       	brpl	.-12     	; 0x3cc2 <__fp_rempio2+0x3e>
    3cce:	90 48       	sbci	r25, 0x80	; 128
    3cd0:	e4 c0       	rjmp	.+456    	; 0x3e9a <__fp_mpack_finite>

00003cd2 <__fp_round>:
    3cd2:	09 2e       	mov	r0, r25
    3cd4:	03 94       	inc	r0
    3cd6:	00 0c       	add	r0, r0
    3cd8:	11 f4       	brne	.+4      	; 0x3cde <__fp_round+0xc>
    3cda:	88 23       	and	r24, r24
    3cdc:	52 f0       	brmi	.+20     	; 0x3cf2 <__fp_round+0x20>
    3cde:	bb 0f       	add	r27, r27
    3ce0:	40 f4       	brcc	.+16     	; 0x3cf2 <__fp_round+0x20>
    3ce2:	bf 2b       	or	r27, r31
    3ce4:	11 f4       	brne	.+4      	; 0x3cea <__fp_round+0x18>
    3ce6:	60 ff       	sbrs	r22, 0
    3ce8:	04 c0       	rjmp	.+8      	; 0x3cf2 <__fp_round+0x20>
    3cea:	6f 5f       	subi	r22, 0xFF	; 255
    3cec:	7f 4f       	sbci	r23, 0xFF	; 255
    3cee:	8f 4f       	sbci	r24, 0xFF	; 255
    3cf0:	9f 4f       	sbci	r25, 0xFF	; 255
    3cf2:	08 95       	ret

00003cf4 <__fp_sinus>:
    3cf4:	ef 93       	push	r30
    3cf6:	e0 ff       	sbrs	r30, 0
    3cf8:	06 c0       	rjmp	.+12     	; 0x3d06 <__fp_sinus+0x12>
    3cfa:	a2 ea       	ldi	r26, 0xA2	; 162
    3cfc:	2a ed       	ldi	r18, 0xDA	; 218
    3cfe:	3f e0       	ldi	r19, 0x0F	; 15
    3d00:	49 ec       	ldi	r20, 0xC9	; 201
    3d02:	5f eb       	ldi	r21, 0xBF	; 191
    3d04:	cc dd       	rcall	.-1128   	; 0x389e <__addsf3x>
    3d06:	e5 df       	rcall	.-54     	; 0x3cd2 <__fp_round>
    3d08:	0f 90       	pop	r0
    3d0a:	03 94       	inc	r0
    3d0c:	01 fc       	sbrc	r0, 1
    3d0e:	90 58       	subi	r25, 0x80	; 128
    3d10:	e9 eb       	ldi	r30, 0xB9	; 185
    3d12:	f0 e0       	ldi	r31, 0x00	; 0
    3d14:	ce c0       	rjmp	.+412    	; 0x3eb2 <__fp_powsodd>

00003d16 <__fp_split3>:
    3d16:	57 fd       	sbrc	r21, 7
    3d18:	90 58       	subi	r25, 0x80	; 128
    3d1a:	44 0f       	add	r20, r20
    3d1c:	55 1f       	adc	r21, r21
    3d1e:	59 f0       	breq	.+22     	; 0x3d36 <__fp_splitA+0x10>
    3d20:	5f 3f       	cpi	r21, 0xFF	; 255
    3d22:	71 f0       	breq	.+28     	; 0x3d40 <__fp_splitA+0x1a>
    3d24:	47 95       	ror	r20

00003d26 <__fp_splitA>:
    3d26:	88 0f       	add	r24, r24
    3d28:	97 fb       	bst	r25, 7
    3d2a:	99 1f       	adc	r25, r25
    3d2c:	61 f0       	breq	.+24     	; 0x3d46 <__fp_splitA+0x20>
    3d2e:	9f 3f       	cpi	r25, 0xFF	; 255
    3d30:	79 f0       	breq	.+30     	; 0x3d50 <__fp_splitA+0x2a>
    3d32:	87 95       	ror	r24
    3d34:	08 95       	ret
    3d36:	12 16       	cp	r1, r18
    3d38:	13 06       	cpc	r1, r19
    3d3a:	14 06       	cpc	r1, r20
    3d3c:	55 1f       	adc	r21, r21
    3d3e:	f2 cf       	rjmp	.-28     	; 0x3d24 <__fp_split3+0xe>
    3d40:	46 95       	lsr	r20
    3d42:	f1 df       	rcall	.-30     	; 0x3d26 <__fp_splitA>
    3d44:	08 c0       	rjmp	.+16     	; 0x3d56 <__fp_splitA+0x30>
    3d46:	16 16       	cp	r1, r22
    3d48:	17 06       	cpc	r1, r23
    3d4a:	18 06       	cpc	r1, r24
    3d4c:	99 1f       	adc	r25, r25
    3d4e:	f1 cf       	rjmp	.-30     	; 0x3d32 <__fp_splitA+0xc>
    3d50:	86 95       	lsr	r24
    3d52:	71 05       	cpc	r23, r1
    3d54:	61 05       	cpc	r22, r1
    3d56:	08 94       	sec
    3d58:	08 95       	ret

00003d5a <__fp_zero>:
    3d5a:	e8 94       	clt

00003d5c <__fp_szero>:
    3d5c:	bb 27       	eor	r27, r27
    3d5e:	66 27       	eor	r22, r22
    3d60:	77 27       	eor	r23, r23
    3d62:	cb 01       	movw	r24, r22
    3d64:	97 f9       	bld	r25, 7
    3d66:	08 95       	ret

00003d68 <__gesf2>:
    3d68:	2c df       	rcall	.-424    	; 0x3bc2 <__fp_cmp>
    3d6a:	08 f4       	brcc	.+2      	; 0x3d6e <__gesf2+0x6>
    3d6c:	8f ef       	ldi	r24, 0xFF	; 255
    3d6e:	08 95       	ret

00003d70 <inverse>:
    3d70:	9b 01       	movw	r18, r22
    3d72:	ac 01       	movw	r20, r24
    3d74:	60 e0       	ldi	r22, 0x00	; 0
    3d76:	70 e0       	ldi	r23, 0x00	; 0
    3d78:	80 e8       	ldi	r24, 0x80	; 128
    3d7a:	9f e3       	ldi	r25, 0x3F	; 63
    3d7c:	4c ce       	rjmp	.-872    	; 0x3a16 <__divsf3>

00003d7e <__mulsf3>:
    3d7e:	0b d0       	rcall	.+22     	; 0x3d96 <__mulsf3x>
    3d80:	a8 cf       	rjmp	.-176    	; 0x3cd2 <__fp_round>
    3d82:	71 df       	rcall	.-286    	; 0x3c66 <__fp_pscA>
    3d84:	28 f0       	brcs	.+10     	; 0x3d90 <__mulsf3+0x12>
    3d86:	76 df       	rcall	.-276    	; 0x3c74 <__fp_pscB>
    3d88:	18 f0       	brcs	.+6      	; 0x3d90 <__mulsf3+0x12>
    3d8a:	95 23       	and	r25, r21
    3d8c:	09 f0       	breq	.+2      	; 0x3d90 <__mulsf3+0x12>
    3d8e:	3d cf       	rjmp	.-390    	; 0x3c0a <__fp_inf>
    3d90:	42 cf       	rjmp	.-380    	; 0x3c16 <__fp_nan>
    3d92:	11 24       	eor	r1, r1
    3d94:	e3 cf       	rjmp	.-58     	; 0x3d5c <__fp_szero>

00003d96 <__mulsf3x>:
    3d96:	bf df       	rcall	.-130    	; 0x3d16 <__fp_split3>
    3d98:	a0 f3       	brcs	.-24     	; 0x3d82 <__mulsf3+0x4>

00003d9a <__mulsf3_pse>:
    3d9a:	95 9f       	mul	r25, r21
    3d9c:	d1 f3       	breq	.-12     	; 0x3d92 <__mulsf3+0x14>
    3d9e:	95 0f       	add	r25, r21
    3da0:	50 e0       	ldi	r21, 0x00	; 0
    3da2:	55 1f       	adc	r21, r21
    3da4:	62 9f       	mul	r22, r18
    3da6:	f0 01       	movw	r30, r0
    3da8:	72 9f       	mul	r23, r18
    3daa:	bb 27       	eor	r27, r27
    3dac:	f0 0d       	add	r31, r0
    3dae:	b1 1d       	adc	r27, r1
    3db0:	63 9f       	mul	r22, r19
    3db2:	aa 27       	eor	r26, r26
    3db4:	f0 0d       	add	r31, r0
    3db6:	b1 1d       	adc	r27, r1
    3db8:	aa 1f       	adc	r26, r26
    3dba:	64 9f       	mul	r22, r20
    3dbc:	66 27       	eor	r22, r22
    3dbe:	b0 0d       	add	r27, r0
    3dc0:	a1 1d       	adc	r26, r1
    3dc2:	66 1f       	adc	r22, r22
    3dc4:	82 9f       	mul	r24, r18
    3dc6:	22 27       	eor	r18, r18
    3dc8:	b0 0d       	add	r27, r0
    3dca:	a1 1d       	adc	r26, r1
    3dcc:	62 1f       	adc	r22, r18
    3dce:	73 9f       	mul	r23, r19
    3dd0:	b0 0d       	add	r27, r0
    3dd2:	a1 1d       	adc	r26, r1
    3dd4:	62 1f       	adc	r22, r18
    3dd6:	83 9f       	mul	r24, r19
    3dd8:	a0 0d       	add	r26, r0
    3dda:	61 1d       	adc	r22, r1
    3ddc:	22 1f       	adc	r18, r18
    3dde:	74 9f       	mul	r23, r20
    3de0:	33 27       	eor	r19, r19
    3de2:	a0 0d       	add	r26, r0
    3de4:	61 1d       	adc	r22, r1
    3de6:	23 1f       	adc	r18, r19
    3de8:	84 9f       	mul	r24, r20
    3dea:	60 0d       	add	r22, r0
    3dec:	21 1d       	adc	r18, r1
    3dee:	82 2f       	mov	r24, r18
    3df0:	76 2f       	mov	r23, r22
    3df2:	6a 2f       	mov	r22, r26
    3df4:	11 24       	eor	r1, r1
    3df6:	9f 57       	subi	r25, 0x7F	; 127
    3df8:	50 40       	sbci	r21, 0x00	; 0
    3dfa:	8a f0       	brmi	.+34     	; 0x3e1e <__mulsf3_pse+0x84>
    3dfc:	e1 f0       	breq	.+56     	; 0x3e36 <__mulsf3_pse+0x9c>
    3dfe:	88 23       	and	r24, r24
    3e00:	4a f0       	brmi	.+18     	; 0x3e14 <__mulsf3_pse+0x7a>
    3e02:	ee 0f       	add	r30, r30
    3e04:	ff 1f       	adc	r31, r31
    3e06:	bb 1f       	adc	r27, r27
    3e08:	66 1f       	adc	r22, r22
    3e0a:	77 1f       	adc	r23, r23
    3e0c:	88 1f       	adc	r24, r24
    3e0e:	91 50       	subi	r25, 0x01	; 1
    3e10:	50 40       	sbci	r21, 0x00	; 0
    3e12:	a9 f7       	brne	.-22     	; 0x3dfe <__mulsf3_pse+0x64>
    3e14:	9e 3f       	cpi	r25, 0xFE	; 254
    3e16:	51 05       	cpc	r21, r1
    3e18:	70 f0       	brcs	.+28     	; 0x3e36 <__mulsf3_pse+0x9c>
    3e1a:	f7 ce       	rjmp	.-530    	; 0x3c0a <__fp_inf>
    3e1c:	9f cf       	rjmp	.-194    	; 0x3d5c <__fp_szero>
    3e1e:	5f 3f       	cpi	r21, 0xFF	; 255
    3e20:	ec f3       	brlt	.-6      	; 0x3e1c <__mulsf3_pse+0x82>
    3e22:	98 3e       	cpi	r25, 0xE8	; 232
    3e24:	dc f3       	brlt	.-10     	; 0x3e1c <__mulsf3_pse+0x82>
    3e26:	86 95       	lsr	r24
    3e28:	77 95       	ror	r23
    3e2a:	67 95       	ror	r22
    3e2c:	b7 95       	ror	r27
    3e2e:	f7 95       	ror	r31
    3e30:	e7 95       	ror	r30
    3e32:	9f 5f       	subi	r25, 0xFF	; 255
    3e34:	c1 f7       	brne	.-16     	; 0x3e26 <__mulsf3_pse+0x8c>
    3e36:	fe 2b       	or	r31, r30
    3e38:	88 0f       	add	r24, r24
    3e3a:	91 1d       	adc	r25, r1
    3e3c:	96 95       	lsr	r25
    3e3e:	87 95       	ror	r24
    3e40:	97 f9       	bld	r25, 7
    3e42:	08 95       	ret

00003e44 <sin>:
    3e44:	9f 93       	push	r25
    3e46:	1e df       	rcall	.-452    	; 0x3c84 <__fp_rempio2>
    3e48:	0f 90       	pop	r0
    3e4a:	07 fc       	sbrc	r0, 7
    3e4c:	ee 5f       	subi	r30, 0xFE	; 254
    3e4e:	52 cf       	rjmp	.-348    	; 0x3cf4 <__fp_sinus>

00003e50 <square>:
    3e50:	9b 01       	movw	r18, r22
    3e52:	ac 01       	movw	r20, r24
    3e54:	94 cf       	rjmp	.-216    	; 0x3d7e <__mulsf3>

00003e56 <tan>:
    3e56:	df 93       	push	r29
    3e58:	d9 2f       	mov	r29, r25
    3e5a:	14 df       	rcall	.-472    	; 0x3c84 <__fp_rempio2>
    3e5c:	e6 95       	lsr	r30
    3e5e:	d7 95       	ror	r29
    3e60:	2a ed       	ldi	r18, 0xDA	; 218
    3e62:	3f e0       	ldi	r19, 0x0F	; 15
    3e64:	49 e4       	ldi	r20, 0x49	; 73
    3e66:	5f e3       	ldi	r21, 0x3F	; 63
    3e68:	b3 3a       	cpi	r27, 0xA3	; 163
    3e6a:	62 07       	cpc	r22, r18
    3e6c:	73 07       	cpc	r23, r19
    3e6e:	84 07       	cpc	r24, r20
    3e70:	95 07       	cpc	r25, r21
    3e72:	d7 95       	ror	r29
    3e74:	2a f0       	brmi	.+10     	; 0x3e80 <tan+0x2a>
    3e76:	a2 ea       	ldi	r26, 0xA2	; 162
    3e78:	49 ec       	ldi	r20, 0xC9	; 201
    3e7a:	90 68       	ori	r25, 0x80	; 128
    3e7c:	10 dd       	rcall	.-1504   	; 0x389e <__addsf3x>
    3e7e:	29 df       	rcall	.-430    	; 0x3cd2 <__fp_round>
    3e80:	e7 ed       	ldi	r30, 0xD7	; 215
    3e82:	f0 e0       	ldi	r31, 0x00	; 0
    3e84:	16 d0       	rcall	.+44     	; 0x3eb2 <__fp_powsodd>
    3e86:	dd 0f       	add	r29, r29
    3e88:	0b f0       	brvs	.+2      	; 0x3e8c <tan+0x36>
    3e8a:	72 df       	rcall	.-284    	; 0x3d70 <inverse>
    3e8c:	dd 0f       	add	r29, r29
    3e8e:	0b f4       	brvc	.+2      	; 0x3e92 <tan+0x3c>
    3e90:	90 58       	subi	r25, 0x80	; 128
    3e92:	df 91       	pop	r29
    3e94:	08 95       	ret

00003e96 <__fp_mpack>:
    3e96:	9f 3f       	cpi	r25, 0xFF	; 255
    3e98:	31 f0       	breq	.+12     	; 0x3ea6 <__fp_mpack_finite+0xc>

00003e9a <__fp_mpack_finite>:
    3e9a:	91 50       	subi	r25, 0x01	; 1
    3e9c:	20 f4       	brcc	.+8      	; 0x3ea6 <__fp_mpack_finite+0xc>
    3e9e:	87 95       	ror	r24
    3ea0:	77 95       	ror	r23
    3ea2:	67 95       	ror	r22
    3ea4:	b7 95       	ror	r27
    3ea6:	88 0f       	add	r24, r24
    3ea8:	91 1d       	adc	r25, r1
    3eaa:	96 95       	lsr	r25
    3eac:	87 95       	ror	r24
    3eae:	97 f9       	bld	r25, 7
    3eb0:	08 95       	ret

00003eb2 <__fp_powsodd>:
    3eb2:	9f 93       	push	r25
    3eb4:	8f 93       	push	r24
    3eb6:	7f 93       	push	r23
    3eb8:	6f 93       	push	r22
    3eba:	ff 93       	push	r31
    3ebc:	ef 93       	push	r30
    3ebe:	9b 01       	movw	r18, r22
    3ec0:	ac 01       	movw	r20, r24
    3ec2:	5d df       	rcall	.-326    	; 0x3d7e <__mulsf3>
    3ec4:	ef 91       	pop	r30
    3ec6:	ff 91       	pop	r31
    3ec8:	a9 de       	rcall	.-686    	; 0x3c1c <__fp_powser>
    3eca:	2f 91       	pop	r18
    3ecc:	3f 91       	pop	r19
    3ece:	4f 91       	pop	r20
    3ed0:	5f 91       	pop	r21
    3ed2:	55 cf       	rjmp	.-342    	; 0x3d7e <__mulsf3>

00003ed4 <vfprintf>:
    3ed4:	a3 e1       	ldi	r26, 0x13	; 19
    3ed6:	b0 e0       	ldi	r27, 0x00	; 0
    3ed8:	e0 e7       	ldi	r30, 0x70	; 112
    3eda:	ff e1       	ldi	r31, 0x1F	; 31
    3edc:	0c 94 eb 22 	jmp	0x45d6	; 0x45d6 <__prologue_saves__>
    3ee0:	7c 01       	movw	r14, r24
    3ee2:	1b 01       	movw	r2, r22
    3ee4:	6a 01       	movw	r12, r20
    3ee6:	fc 01       	movw	r30, r24
    3ee8:	17 82       	std	Z+7, r1	; 0x07
    3eea:	16 82       	std	Z+6, r1	; 0x06
    3eec:	83 81       	ldd	r24, Z+3	; 0x03
    3eee:	81 ff       	sbrs	r24, 1
    3ef0:	66 c3       	rjmp	.+1740   	; 0x45be <vfprintf+0x6ea>
    3ef2:	be 01       	movw	r22, r28
    3ef4:	6f 5f       	subi	r22, 0xFF	; 255
    3ef6:	7f 4f       	sbci	r23, 0xFF	; 255
    3ef8:	4b 01       	movw	r8, r22
    3efa:	f7 01       	movw	r30, r14
    3efc:	93 81       	ldd	r25, Z+3	; 0x03
    3efe:	f1 01       	movw	r30, r2
    3f00:	93 fd       	sbrc	r25, 3
    3f02:	85 91       	lpm	r24, Z+
    3f04:	93 ff       	sbrs	r25, 3
    3f06:	81 91       	ld	r24, Z+
    3f08:	1f 01       	movw	r2, r30
    3f0a:	88 23       	and	r24, r24
    3f0c:	09 f4       	brne	.+2      	; 0x3f10 <vfprintf+0x3c>
    3f0e:	53 c3       	rjmp	.+1702   	; 0x45b6 <vfprintf+0x6e2>
    3f10:	85 32       	cpi	r24, 0x25	; 37
    3f12:	39 f4       	brne	.+14     	; 0x3f22 <vfprintf+0x4e>
    3f14:	93 fd       	sbrc	r25, 3
    3f16:	85 91       	lpm	r24, Z+
    3f18:	93 ff       	sbrs	r25, 3
    3f1a:	81 91       	ld	r24, Z+
    3f1c:	1f 01       	movw	r2, r30
    3f1e:	85 32       	cpi	r24, 0x25	; 37
    3f20:	39 f4       	brne	.+14     	; 0x3f30 <vfprintf+0x5c>
    3f22:	b7 01       	movw	r22, r14
    3f24:	90 e0       	ldi	r25, 0x00	; 0
    3f26:	0e 94 10 24 	call	0x4820	; 0x4820 <fputc>
    3f2a:	56 01       	movw	r10, r12
    3f2c:	65 01       	movw	r12, r10
    3f2e:	e5 cf       	rjmp	.-54     	; 0x3efa <vfprintf+0x26>
    3f30:	10 e0       	ldi	r17, 0x00	; 0
    3f32:	51 2c       	mov	r5, r1
    3f34:	20 e0       	ldi	r18, 0x00	; 0
    3f36:	20 32       	cpi	r18, 0x20	; 32
    3f38:	a0 f4       	brcc	.+40     	; 0x3f62 <vfprintf+0x8e>
    3f3a:	8b 32       	cpi	r24, 0x2B	; 43
    3f3c:	69 f0       	breq	.+26     	; 0x3f58 <vfprintf+0x84>
    3f3e:	30 f4       	brcc	.+12     	; 0x3f4c <vfprintf+0x78>
    3f40:	80 32       	cpi	r24, 0x20	; 32
    3f42:	59 f0       	breq	.+22     	; 0x3f5a <vfprintf+0x86>
    3f44:	83 32       	cpi	r24, 0x23	; 35
    3f46:	69 f4       	brne	.+26     	; 0x3f62 <vfprintf+0x8e>
    3f48:	20 61       	ori	r18, 0x10	; 16
    3f4a:	2c c0       	rjmp	.+88     	; 0x3fa4 <vfprintf+0xd0>
    3f4c:	8d 32       	cpi	r24, 0x2D	; 45
    3f4e:	39 f0       	breq	.+14     	; 0x3f5e <vfprintf+0x8a>
    3f50:	80 33       	cpi	r24, 0x30	; 48
    3f52:	39 f4       	brne	.+14     	; 0x3f62 <vfprintf+0x8e>
    3f54:	21 60       	ori	r18, 0x01	; 1
    3f56:	26 c0       	rjmp	.+76     	; 0x3fa4 <vfprintf+0xd0>
    3f58:	22 60       	ori	r18, 0x02	; 2
    3f5a:	24 60       	ori	r18, 0x04	; 4
    3f5c:	23 c0       	rjmp	.+70     	; 0x3fa4 <vfprintf+0xd0>
    3f5e:	28 60       	ori	r18, 0x08	; 8
    3f60:	21 c0       	rjmp	.+66     	; 0x3fa4 <vfprintf+0xd0>
    3f62:	27 fd       	sbrc	r18, 7
    3f64:	27 c0       	rjmp	.+78     	; 0x3fb4 <vfprintf+0xe0>
    3f66:	30 ed       	ldi	r19, 0xD0	; 208
    3f68:	38 0f       	add	r19, r24
    3f6a:	3a 30       	cpi	r19, 0x0A	; 10
    3f6c:	78 f4       	brcc	.+30     	; 0x3f8c <vfprintf+0xb8>
    3f6e:	26 ff       	sbrs	r18, 6
    3f70:	06 c0       	rjmp	.+12     	; 0x3f7e <vfprintf+0xaa>
    3f72:	fa e0       	ldi	r31, 0x0A	; 10
    3f74:	1f 9f       	mul	r17, r31
    3f76:	30 0d       	add	r19, r0
    3f78:	11 24       	eor	r1, r1
    3f7a:	13 2f       	mov	r17, r19
    3f7c:	13 c0       	rjmp	.+38     	; 0x3fa4 <vfprintf+0xd0>
    3f7e:	6a e0       	ldi	r22, 0x0A	; 10
    3f80:	56 9e       	mul	r5, r22
    3f82:	30 0d       	add	r19, r0
    3f84:	11 24       	eor	r1, r1
    3f86:	53 2e       	mov	r5, r19
    3f88:	20 62       	ori	r18, 0x20	; 32
    3f8a:	0c c0       	rjmp	.+24     	; 0x3fa4 <vfprintf+0xd0>
    3f8c:	8e 32       	cpi	r24, 0x2E	; 46
    3f8e:	21 f4       	brne	.+8      	; 0x3f98 <vfprintf+0xc4>
    3f90:	26 fd       	sbrc	r18, 6
    3f92:	11 c3       	rjmp	.+1570   	; 0x45b6 <vfprintf+0x6e2>
    3f94:	20 64       	ori	r18, 0x40	; 64
    3f96:	06 c0       	rjmp	.+12     	; 0x3fa4 <vfprintf+0xd0>
    3f98:	8c 36       	cpi	r24, 0x6C	; 108
    3f9a:	11 f4       	brne	.+4      	; 0x3fa0 <vfprintf+0xcc>
    3f9c:	20 68       	ori	r18, 0x80	; 128
    3f9e:	02 c0       	rjmp	.+4      	; 0x3fa4 <vfprintf+0xd0>
    3fa0:	88 36       	cpi	r24, 0x68	; 104
    3fa2:	41 f4       	brne	.+16     	; 0x3fb4 <vfprintf+0xe0>
    3fa4:	f1 01       	movw	r30, r2
    3fa6:	93 fd       	sbrc	r25, 3
    3fa8:	85 91       	lpm	r24, Z+
    3faa:	93 ff       	sbrs	r25, 3
    3fac:	81 91       	ld	r24, Z+
    3fae:	1f 01       	movw	r2, r30
    3fb0:	81 11       	cpse	r24, r1
    3fb2:	c1 cf       	rjmp	.-126    	; 0x3f36 <vfprintf+0x62>
    3fb4:	9b eb       	ldi	r25, 0xBB	; 187
    3fb6:	98 0f       	add	r25, r24
    3fb8:	93 30       	cpi	r25, 0x03	; 3
    3fba:	18 f4       	brcc	.+6      	; 0x3fc2 <vfprintf+0xee>
    3fbc:	20 61       	ori	r18, 0x10	; 16
    3fbe:	80 5e       	subi	r24, 0xE0	; 224
    3fc0:	06 c0       	rjmp	.+12     	; 0x3fce <vfprintf+0xfa>
    3fc2:	9b e9       	ldi	r25, 0x9B	; 155
    3fc4:	98 0f       	add	r25, r24
    3fc6:	93 30       	cpi	r25, 0x03	; 3
    3fc8:	08 f0       	brcs	.+2      	; 0x3fcc <vfprintf+0xf8>
    3fca:	aa c1       	rjmp	.+852    	; 0x4320 <vfprintf+0x44c>
    3fcc:	2f 7e       	andi	r18, 0xEF	; 239
    3fce:	26 ff       	sbrs	r18, 6
    3fd0:	16 e0       	ldi	r17, 0x06	; 6
    3fd2:	2f 73       	andi	r18, 0x3F	; 63
    3fd4:	72 2e       	mov	r7, r18
    3fd6:	85 36       	cpi	r24, 0x65	; 101
    3fd8:	21 f4       	brne	.+8      	; 0x3fe2 <vfprintf+0x10e>
    3fda:	f2 2f       	mov	r31, r18
    3fdc:	f0 64       	ori	r31, 0x40	; 64
    3fde:	7f 2e       	mov	r7, r31
    3fe0:	08 c0       	rjmp	.+16     	; 0x3ff2 <vfprintf+0x11e>
    3fe2:	86 36       	cpi	r24, 0x66	; 102
    3fe4:	21 f4       	brne	.+8      	; 0x3fee <vfprintf+0x11a>
    3fe6:	62 2f       	mov	r22, r18
    3fe8:	60 68       	ori	r22, 0x80	; 128
    3fea:	76 2e       	mov	r7, r22
    3fec:	02 c0       	rjmp	.+4      	; 0x3ff2 <vfprintf+0x11e>
    3fee:	11 11       	cpse	r17, r1
    3ff0:	11 50       	subi	r17, 0x01	; 1
    3ff2:	77 fe       	sbrs	r7, 7
    3ff4:	07 c0       	rjmp	.+14     	; 0x4004 <vfprintf+0x130>
    3ff6:	1c 33       	cpi	r17, 0x3C	; 60
    3ff8:	48 f4       	brcc	.+18     	; 0x400c <vfprintf+0x138>
    3ffa:	44 24       	eor	r4, r4
    3ffc:	43 94       	inc	r4
    3ffe:	41 0e       	add	r4, r17
    4000:	27 e0       	ldi	r18, 0x07	; 7
    4002:	0b c0       	rjmp	.+22     	; 0x401a <vfprintf+0x146>
    4004:	18 30       	cpi	r17, 0x08	; 8
    4006:	30 f4       	brcc	.+12     	; 0x4014 <vfprintf+0x140>
    4008:	21 2f       	mov	r18, r17
    400a:	06 c0       	rjmp	.+12     	; 0x4018 <vfprintf+0x144>
    400c:	27 e0       	ldi	r18, 0x07	; 7
    400e:	4c e3       	ldi	r20, 0x3C	; 60
    4010:	44 2e       	mov	r4, r20
    4012:	03 c0       	rjmp	.+6      	; 0x401a <vfprintf+0x146>
    4014:	27 e0       	ldi	r18, 0x07	; 7
    4016:	17 e0       	ldi	r17, 0x07	; 7
    4018:	41 2c       	mov	r4, r1
    401a:	56 01       	movw	r10, r12
    401c:	74 e0       	ldi	r23, 0x04	; 4
    401e:	a7 0e       	add	r10, r23
    4020:	b1 1c       	adc	r11, r1
    4022:	f6 01       	movw	r30, r12
    4024:	60 81       	ld	r22, Z
    4026:	71 81       	ldd	r23, Z+1	; 0x01
    4028:	82 81       	ldd	r24, Z+2	; 0x02
    402a:	93 81       	ldd	r25, Z+3	; 0x03
    402c:	04 2d       	mov	r16, r4
    402e:	a4 01       	movw	r20, r8
    4030:	0e 94 22 23 	call	0x4644	; 0x4644 <__ftoa_engine>
    4034:	6c 01       	movw	r12, r24
    4036:	09 81       	ldd	r16, Y+1	; 0x01
    4038:	00 ff       	sbrs	r16, 0
    403a:	02 c0       	rjmp	.+4      	; 0x4040 <vfprintf+0x16c>
    403c:	03 ff       	sbrs	r16, 3
    403e:	06 c0       	rjmp	.+12     	; 0x404c <vfprintf+0x178>
    4040:	71 fc       	sbrc	r7, 1
    4042:	07 c0       	rjmp	.+14     	; 0x4052 <vfprintf+0x17e>
    4044:	72 fc       	sbrc	r7, 2
    4046:	08 c0       	rjmp	.+16     	; 0x4058 <vfprintf+0x184>
    4048:	61 2c       	mov	r6, r1
    404a:	08 c0       	rjmp	.+16     	; 0x405c <vfprintf+0x188>
    404c:	3d e2       	ldi	r19, 0x2D	; 45
    404e:	63 2e       	mov	r6, r19
    4050:	05 c0       	rjmp	.+10     	; 0x405c <vfprintf+0x188>
    4052:	2b e2       	ldi	r18, 0x2B	; 43
    4054:	62 2e       	mov	r6, r18
    4056:	02 c0       	rjmp	.+4      	; 0x405c <vfprintf+0x188>
    4058:	90 e2       	ldi	r25, 0x20	; 32
    405a:	69 2e       	mov	r6, r25
    405c:	80 2f       	mov	r24, r16
    405e:	8c 70       	andi	r24, 0x0C	; 12
    4060:	99 f1       	breq	.+102    	; 0x40c8 <vfprintf+0x1f4>
    4062:	66 20       	and	r6, r6
    4064:	11 f0       	breq	.+4      	; 0x406a <vfprintf+0x196>
    4066:	84 e0       	ldi	r24, 0x04	; 4
    4068:	01 c0       	rjmp	.+2      	; 0x406c <vfprintf+0x198>
    406a:	83 e0       	ldi	r24, 0x03	; 3
    406c:	85 15       	cp	r24, r5
    406e:	10 f0       	brcs	.+4      	; 0x4074 <vfprintf+0x1a0>
    4070:	51 2c       	mov	r5, r1
    4072:	0b c0       	rjmp	.+22     	; 0x408a <vfprintf+0x1b6>
    4074:	58 1a       	sub	r5, r24
    4076:	73 fc       	sbrc	r7, 3
    4078:	08 c0       	rjmp	.+16     	; 0x408a <vfprintf+0x1b6>
    407a:	b7 01       	movw	r22, r14
    407c:	80 e2       	ldi	r24, 0x20	; 32
    407e:	90 e0       	ldi	r25, 0x00	; 0
    4080:	0e 94 10 24 	call	0x4820	; 0x4820 <fputc>
    4084:	5a 94       	dec	r5
    4086:	c9 f7       	brne	.-14     	; 0x407a <vfprintf+0x1a6>
    4088:	f3 cf       	rjmp	.-26     	; 0x4070 <vfprintf+0x19c>
    408a:	66 20       	and	r6, r6
    408c:	29 f0       	breq	.+10     	; 0x4098 <vfprintf+0x1c4>
    408e:	b7 01       	movw	r22, r14
    4090:	86 2d       	mov	r24, r6
    4092:	90 e0       	ldi	r25, 0x00	; 0
    4094:	0e 94 10 24 	call	0x4820	; 0x4820 <fputc>
    4098:	03 fd       	sbrc	r16, 3
    409a:	03 c0       	rjmp	.+6      	; 0x40a2 <vfprintf+0x1ce>
    409c:	04 e1       	ldi	r16, 0x14	; 20
    409e:	14 e0       	ldi	r17, 0x04	; 4
    40a0:	02 c0       	rjmp	.+4      	; 0x40a6 <vfprintf+0x1d2>
    40a2:	00 e1       	ldi	r16, 0x10	; 16
    40a4:	14 e0       	ldi	r17, 0x04	; 4
    40a6:	f7 2d       	mov	r31, r7
    40a8:	f0 71       	andi	r31, 0x10	; 16
    40aa:	7f 2e       	mov	r7, r31
    40ac:	f8 01       	movw	r30, r16
    40ae:	84 91       	lpm	r24, Z
    40b0:	88 23       	and	r24, r24
    40b2:	09 f4       	brne	.+2      	; 0x40b6 <vfprintf+0x1e2>
    40b4:	76 c2       	rjmp	.+1260   	; 0x45a2 <vfprintf+0x6ce>
    40b6:	71 10       	cpse	r7, r1
    40b8:	80 52       	subi	r24, 0x20	; 32
    40ba:	b7 01       	movw	r22, r14
    40bc:	90 e0       	ldi	r25, 0x00	; 0
    40be:	0e 94 10 24 	call	0x4820	; 0x4820 <fputc>
    40c2:	0f 5f       	subi	r16, 0xFF	; 255
    40c4:	1f 4f       	sbci	r17, 0xFF	; 255
    40c6:	f2 cf       	rjmp	.-28     	; 0x40ac <vfprintf+0x1d8>
    40c8:	77 fe       	sbrs	r7, 7
    40ca:	0f c0       	rjmp	.+30     	; 0x40ea <vfprintf+0x216>
    40cc:	4c 0c       	add	r4, r12
    40ce:	04 ff       	sbrs	r16, 4
    40d0:	04 c0       	rjmp	.+8      	; 0x40da <vfprintf+0x206>
    40d2:	8a 81       	ldd	r24, Y+2	; 0x02
    40d4:	81 33       	cpi	r24, 0x31	; 49
    40d6:	09 f4       	brne	.+2      	; 0x40da <vfprintf+0x206>
    40d8:	4a 94       	dec	r4
    40da:	14 14       	cp	r1, r4
    40dc:	74 f5       	brge	.+92     	; 0x413a <vfprintf+0x266>
    40de:	f8 e0       	ldi	r31, 0x08	; 8
    40e0:	f4 15       	cp	r31, r4
    40e2:	78 f5       	brcc	.+94     	; 0x4142 <vfprintf+0x26e>
    40e4:	88 e0       	ldi	r24, 0x08	; 8
    40e6:	48 2e       	mov	r4, r24
    40e8:	2c c0       	rjmp	.+88     	; 0x4142 <vfprintf+0x26e>
    40ea:	76 fc       	sbrc	r7, 6
    40ec:	2a c0       	rjmp	.+84     	; 0x4142 <vfprintf+0x26e>
    40ee:	81 2f       	mov	r24, r17
    40f0:	90 e0       	ldi	r25, 0x00	; 0
    40f2:	8c 15       	cp	r24, r12
    40f4:	9d 05       	cpc	r25, r13
    40f6:	9c f0       	brlt	.+38     	; 0x411e <vfprintf+0x24a>
    40f8:	6c ef       	ldi	r22, 0xFC	; 252
    40fa:	c6 16       	cp	r12, r22
    40fc:	6f ef       	ldi	r22, 0xFF	; 255
    40fe:	d6 06       	cpc	r13, r22
    4100:	74 f0       	brlt	.+28     	; 0x411e <vfprintf+0x24a>
    4102:	77 2d       	mov	r23, r7
    4104:	70 68       	ori	r23, 0x80	; 128
    4106:	77 2e       	mov	r7, r23
    4108:	0a c0       	rjmp	.+20     	; 0x411e <vfprintf+0x24a>
    410a:	e2 e0       	ldi	r30, 0x02	; 2
    410c:	f0 e0       	ldi	r31, 0x00	; 0
    410e:	ec 0f       	add	r30, r28
    4110:	fd 1f       	adc	r31, r29
    4112:	e1 0f       	add	r30, r17
    4114:	f1 1d       	adc	r31, r1
    4116:	80 81       	ld	r24, Z
    4118:	80 33       	cpi	r24, 0x30	; 48
    411a:	19 f4       	brne	.+6      	; 0x4122 <vfprintf+0x24e>
    411c:	11 50       	subi	r17, 0x01	; 1
    411e:	11 11       	cpse	r17, r1
    4120:	f4 cf       	rjmp	.-24     	; 0x410a <vfprintf+0x236>
    4122:	77 fe       	sbrs	r7, 7
    4124:	0e c0       	rjmp	.+28     	; 0x4142 <vfprintf+0x26e>
    4126:	44 24       	eor	r4, r4
    4128:	43 94       	inc	r4
    412a:	41 0e       	add	r4, r17
    412c:	81 2f       	mov	r24, r17
    412e:	90 e0       	ldi	r25, 0x00	; 0
    4130:	c8 16       	cp	r12, r24
    4132:	d9 06       	cpc	r13, r25
    4134:	2c f4       	brge	.+10     	; 0x4140 <vfprintf+0x26c>
    4136:	1c 19       	sub	r17, r12
    4138:	04 c0       	rjmp	.+8      	; 0x4142 <vfprintf+0x26e>
    413a:	44 24       	eor	r4, r4
    413c:	43 94       	inc	r4
    413e:	01 c0       	rjmp	.+2      	; 0x4142 <vfprintf+0x26e>
    4140:	10 e0       	ldi	r17, 0x00	; 0
    4142:	77 fe       	sbrs	r7, 7
    4144:	07 c0       	rjmp	.+14     	; 0x4154 <vfprintf+0x280>
    4146:	1c 14       	cp	r1, r12
    4148:	1d 04       	cpc	r1, r13
    414a:	3c f4       	brge	.+14     	; 0x415a <vfprintf+0x286>
    414c:	96 01       	movw	r18, r12
    414e:	2f 5f       	subi	r18, 0xFF	; 255
    4150:	3f 4f       	sbci	r19, 0xFF	; 255
    4152:	05 c0       	rjmp	.+10     	; 0x415e <vfprintf+0x28a>
    4154:	25 e0       	ldi	r18, 0x05	; 5
    4156:	30 e0       	ldi	r19, 0x00	; 0
    4158:	02 c0       	rjmp	.+4      	; 0x415e <vfprintf+0x28a>
    415a:	21 e0       	ldi	r18, 0x01	; 1
    415c:	30 e0       	ldi	r19, 0x00	; 0
    415e:	66 20       	and	r6, r6
    4160:	11 f0       	breq	.+4      	; 0x4166 <vfprintf+0x292>
    4162:	2f 5f       	subi	r18, 0xFF	; 255
    4164:	3f 4f       	sbci	r19, 0xFF	; 255
    4166:	11 23       	and	r17, r17
    4168:	31 f0       	breq	.+12     	; 0x4176 <vfprintf+0x2a2>
    416a:	41 2f       	mov	r20, r17
    416c:	50 e0       	ldi	r21, 0x00	; 0
    416e:	4f 5f       	subi	r20, 0xFF	; 255
    4170:	5f 4f       	sbci	r21, 0xFF	; 255
    4172:	24 0f       	add	r18, r20
    4174:	35 1f       	adc	r19, r21
    4176:	45 2d       	mov	r20, r5
    4178:	50 e0       	ldi	r21, 0x00	; 0
    417a:	24 17       	cp	r18, r20
    417c:	35 07       	cpc	r19, r21
    417e:	14 f4       	brge	.+4      	; 0x4184 <vfprintf+0x2b0>
    4180:	52 1a       	sub	r5, r18
    4182:	01 c0       	rjmp	.+2      	; 0x4186 <vfprintf+0x2b2>
    4184:	51 2c       	mov	r5, r1
    4186:	87 2d       	mov	r24, r7
    4188:	89 70       	andi	r24, 0x09	; 9
    418a:	49 f4       	brne	.+18     	; 0x419e <vfprintf+0x2ca>
    418c:	55 20       	and	r5, r5
    418e:	39 f0       	breq	.+14     	; 0x419e <vfprintf+0x2ca>
    4190:	b7 01       	movw	r22, r14
    4192:	80 e2       	ldi	r24, 0x20	; 32
    4194:	90 e0       	ldi	r25, 0x00	; 0
    4196:	0e 94 10 24 	call	0x4820	; 0x4820 <fputc>
    419a:	5a 94       	dec	r5
    419c:	f7 cf       	rjmp	.-18     	; 0x418c <vfprintf+0x2b8>
    419e:	66 20       	and	r6, r6
    41a0:	29 f0       	breq	.+10     	; 0x41ac <vfprintf+0x2d8>
    41a2:	b7 01       	movw	r22, r14
    41a4:	86 2d       	mov	r24, r6
    41a6:	90 e0       	ldi	r25, 0x00	; 0
    41a8:	0e 94 10 24 	call	0x4820	; 0x4820 <fputc>
    41ac:	73 fc       	sbrc	r7, 3
    41ae:	09 c0       	rjmp	.+18     	; 0x41c2 <vfprintf+0x2ee>
    41b0:	55 20       	and	r5, r5
    41b2:	39 f0       	breq	.+14     	; 0x41c2 <vfprintf+0x2ee>
    41b4:	b7 01       	movw	r22, r14
    41b6:	80 e3       	ldi	r24, 0x30	; 48
    41b8:	90 e0       	ldi	r25, 0x00	; 0
    41ba:	0e 94 10 24 	call	0x4820	; 0x4820 <fputc>
    41be:	5a 94       	dec	r5
    41c0:	f7 cf       	rjmp	.-18     	; 0x41b0 <vfprintf+0x2dc>
    41c2:	77 fe       	sbrs	r7, 7
    41c4:	5f c0       	rjmp	.+190    	; 0x4284 <vfprintf+0x3b0>
    41c6:	9c 2d       	mov	r25, r12
    41c8:	8d 2d       	mov	r24, r13
    41ca:	d7 fe       	sbrs	r13, 7
    41cc:	02 c0       	rjmp	.+4      	; 0x41d2 <vfprintf+0x2fe>
    41ce:	90 e0       	ldi	r25, 0x00	; 0
    41d0:	80 e0       	ldi	r24, 0x00	; 0
    41d2:	69 2e       	mov	r6, r25
    41d4:	78 2e       	mov	r7, r24
    41d6:	40 e0       	ldi	r20, 0x00	; 0
    41d8:	50 e0       	ldi	r21, 0x00	; 0
    41da:	c6 01       	movw	r24, r12
    41dc:	84 19       	sub	r24, r4
    41de:	91 09       	sbc	r25, r1
    41e0:	9d 87       	std	Y+13, r25	; 0x0d
    41e2:	8c 87       	std	Y+12, r24	; 0x0c
    41e4:	96 01       	movw	r18, r12
    41e6:	26 19       	sub	r18, r6
    41e8:	37 09       	sbc	r19, r7
    41ea:	28 0d       	add	r18, r8
    41ec:	39 1d       	adc	r19, r9
    41ee:	81 2f       	mov	r24, r17
    41f0:	90 e0       	ldi	r25, 0x00	; 0
    41f2:	ee 27       	eor	r30, r30
    41f4:	ff 27       	eor	r31, r31
    41f6:	e8 1b       	sub	r30, r24
    41f8:	f9 0b       	sbc	r31, r25
    41fa:	ff 87       	std	Y+15, r31	; 0x0f
    41fc:	ee 87       	std	Y+14, r30	; 0x0e
    41fe:	ff ef       	ldi	r31, 0xFF	; 255
    4200:	6f 16       	cp	r6, r31
    4202:	7f 06       	cpc	r7, r31
    4204:	69 f4       	brne	.+26     	; 0x4220 <vfprintf+0x34c>
    4206:	b7 01       	movw	r22, r14
    4208:	8e e2       	ldi	r24, 0x2E	; 46
    420a:	90 e0       	ldi	r25, 0x00	; 0
    420c:	2b 8b       	std	Y+19, r18	; 0x13
    420e:	3a 8b       	std	Y+18, r19	; 0x12
    4210:	48 8b       	std	Y+16, r20	; 0x10
    4212:	59 8b       	std	Y+17, r21	; 0x11
    4214:	0e 94 10 24 	call	0x4820	; 0x4820 <fputc>
    4218:	59 89       	ldd	r21, Y+17	; 0x11
    421a:	48 89       	ldd	r20, Y+16	; 0x10
    421c:	3a 89       	ldd	r19, Y+18	; 0x12
    421e:	2b 89       	ldd	r18, Y+19	; 0x13
    4220:	c6 14       	cp	r12, r6
    4222:	d7 04       	cpc	r13, r7
    4224:	54 f0       	brlt	.+20     	; 0x423a <vfprintf+0x366>
    4226:	6c 85       	ldd	r22, Y+12	; 0x0c
    4228:	7d 85       	ldd	r23, Y+13	; 0x0d
    422a:	66 15       	cp	r22, r6
    422c:	77 05       	cpc	r23, r7
    422e:	2c f4       	brge	.+10     	; 0x423a <vfprintf+0x366>
    4230:	f9 01       	movw	r30, r18
    4232:	e4 0f       	add	r30, r20
    4234:	f5 1f       	adc	r31, r21
    4236:	81 81       	ldd	r24, Z+1	; 0x01
    4238:	01 c0       	rjmp	.+2      	; 0x423c <vfprintf+0x368>
    423a:	80 e3       	ldi	r24, 0x30	; 48
    423c:	71 e0       	ldi	r23, 0x01	; 1
    423e:	67 1a       	sub	r6, r23
    4240:	71 08       	sbc	r7, r1
    4242:	4f 5f       	subi	r20, 0xFF	; 255
    4244:	5f 4f       	sbci	r21, 0xFF	; 255
    4246:	ee 85       	ldd	r30, Y+14	; 0x0e
    4248:	ff 85       	ldd	r31, Y+15	; 0x0f
    424a:	6e 16       	cp	r6, r30
    424c:	7f 06       	cpc	r7, r31
    424e:	6c f0       	brlt	.+26     	; 0x426a <vfprintf+0x396>
    4250:	b7 01       	movw	r22, r14
    4252:	90 e0       	ldi	r25, 0x00	; 0
    4254:	2b 8b       	std	Y+19, r18	; 0x13
    4256:	3a 8b       	std	Y+18, r19	; 0x12
    4258:	48 8b       	std	Y+16, r20	; 0x10
    425a:	59 8b       	std	Y+17, r21	; 0x11
    425c:	0e 94 10 24 	call	0x4820	; 0x4820 <fputc>
    4260:	2b 89       	ldd	r18, Y+19	; 0x13
    4262:	3a 89       	ldd	r19, Y+18	; 0x12
    4264:	48 89       	ldd	r20, Y+16	; 0x10
    4266:	59 89       	ldd	r21, Y+17	; 0x11
    4268:	ca cf       	rjmp	.-108    	; 0x41fe <vfprintf+0x32a>
    426a:	6c 14       	cp	r6, r12
    426c:	7d 04       	cpc	r7, r13
    426e:	39 f4       	brne	.+14     	; 0x427e <vfprintf+0x3aa>
    4270:	9a 81       	ldd	r25, Y+2	; 0x02
    4272:	96 33       	cpi	r25, 0x36	; 54
    4274:	18 f4       	brcc	.+6      	; 0x427c <vfprintf+0x3a8>
    4276:	95 33       	cpi	r25, 0x35	; 53
    4278:	11 f4       	brne	.+4      	; 0x427e <vfprintf+0x3aa>
    427a:	04 ff       	sbrs	r16, 4
    427c:	81 e3       	ldi	r24, 0x31	; 49
    427e:	b7 01       	movw	r22, r14
    4280:	90 e0       	ldi	r25, 0x00	; 0
    4282:	4b c0       	rjmp	.+150    	; 0x431a <vfprintf+0x446>
    4284:	8a 81       	ldd	r24, Y+2	; 0x02
    4286:	81 33       	cpi	r24, 0x31	; 49
    4288:	09 f0       	breq	.+2      	; 0x428c <vfprintf+0x3b8>
    428a:	0f 7e       	andi	r16, 0xEF	; 239
    428c:	b7 01       	movw	r22, r14
    428e:	90 e0       	ldi	r25, 0x00	; 0
    4290:	0e 94 10 24 	call	0x4820	; 0x4820 <fputc>
    4294:	11 11       	cpse	r17, r1
    4296:	05 c0       	rjmp	.+10     	; 0x42a2 <vfprintf+0x3ce>
    4298:	74 fe       	sbrs	r7, 4
    429a:	18 c0       	rjmp	.+48     	; 0x42cc <vfprintf+0x3f8>
    429c:	85 e4       	ldi	r24, 0x45	; 69
    429e:	90 e0       	ldi	r25, 0x00	; 0
    42a0:	17 c0       	rjmp	.+46     	; 0x42d0 <vfprintf+0x3fc>
    42a2:	b7 01       	movw	r22, r14
    42a4:	8e e2       	ldi	r24, 0x2E	; 46
    42a6:	90 e0       	ldi	r25, 0x00	; 0
    42a8:	0e 94 10 24 	call	0x4820	; 0x4820 <fputc>
    42ac:	82 e0       	ldi	r24, 0x02	; 2
    42ae:	66 24       	eor	r6, r6
    42b0:	63 94       	inc	r6
    42b2:	68 0e       	add	r6, r24
    42b4:	f4 01       	movw	r30, r8
    42b6:	e8 0f       	add	r30, r24
    42b8:	f1 1d       	adc	r31, r1
    42ba:	80 81       	ld	r24, Z
    42bc:	b7 01       	movw	r22, r14
    42be:	90 e0       	ldi	r25, 0x00	; 0
    42c0:	0e 94 10 24 	call	0x4820	; 0x4820 <fputc>
    42c4:	11 50       	subi	r17, 0x01	; 1
    42c6:	41 f3       	breq	.-48     	; 0x4298 <vfprintf+0x3c4>
    42c8:	86 2d       	mov	r24, r6
    42ca:	f1 cf       	rjmp	.-30     	; 0x42ae <vfprintf+0x3da>
    42cc:	85 e6       	ldi	r24, 0x65	; 101
    42ce:	90 e0       	ldi	r25, 0x00	; 0
    42d0:	b7 01       	movw	r22, r14
    42d2:	0e 94 10 24 	call	0x4820	; 0x4820 <fputc>
    42d6:	d7 fc       	sbrc	r13, 7
    42d8:	05 c0       	rjmp	.+10     	; 0x42e4 <vfprintf+0x410>
    42da:	c1 14       	cp	r12, r1
    42dc:	d1 04       	cpc	r13, r1
    42de:	39 f4       	brne	.+14     	; 0x42ee <vfprintf+0x41a>
    42e0:	04 ff       	sbrs	r16, 4
    42e2:	05 c0       	rjmp	.+10     	; 0x42ee <vfprintf+0x41a>
    42e4:	d1 94       	neg	r13
    42e6:	c1 94       	neg	r12
    42e8:	d1 08       	sbc	r13, r1
    42ea:	8d e2       	ldi	r24, 0x2D	; 45
    42ec:	01 c0       	rjmp	.+2      	; 0x42f0 <vfprintf+0x41c>
    42ee:	8b e2       	ldi	r24, 0x2B	; 43
    42f0:	b7 01       	movw	r22, r14
    42f2:	90 e0       	ldi	r25, 0x00	; 0
    42f4:	0e 94 10 24 	call	0x4820	; 0x4820 <fputc>
    42f8:	80 e3       	ldi	r24, 0x30	; 48
    42fa:	6a e0       	ldi	r22, 0x0A	; 10
    42fc:	c6 16       	cp	r12, r22
    42fe:	d1 04       	cpc	r13, r1
    4300:	2c f0       	brlt	.+10     	; 0x430c <vfprintf+0x438>
    4302:	8f 5f       	subi	r24, 0xFF	; 255
    4304:	fa e0       	ldi	r31, 0x0A	; 10
    4306:	cf 1a       	sub	r12, r31
    4308:	d1 08       	sbc	r13, r1
    430a:	f7 cf       	rjmp	.-18     	; 0x42fa <vfprintf+0x426>
    430c:	b7 01       	movw	r22, r14
    430e:	90 e0       	ldi	r25, 0x00	; 0
    4310:	0e 94 10 24 	call	0x4820	; 0x4820 <fputc>
    4314:	b7 01       	movw	r22, r14
    4316:	c6 01       	movw	r24, r12
    4318:	c0 96       	adiw	r24, 0x30	; 48
    431a:	0e 94 10 24 	call	0x4820	; 0x4820 <fputc>
    431e:	41 c1       	rjmp	.+642    	; 0x45a2 <vfprintf+0x6ce>
    4320:	83 36       	cpi	r24, 0x63	; 99
    4322:	31 f0       	breq	.+12     	; 0x4330 <vfprintf+0x45c>
    4324:	83 37       	cpi	r24, 0x73	; 115
    4326:	79 f0       	breq	.+30     	; 0x4346 <vfprintf+0x472>
    4328:	83 35       	cpi	r24, 0x53	; 83
    432a:	09 f0       	breq	.+2      	; 0x432e <vfprintf+0x45a>
    432c:	58 c0       	rjmp	.+176    	; 0x43de <vfprintf+0x50a>
    432e:	21 c0       	rjmp	.+66     	; 0x4372 <vfprintf+0x49e>
    4330:	56 01       	movw	r10, r12
    4332:	72 e0       	ldi	r23, 0x02	; 2
    4334:	a7 0e       	add	r10, r23
    4336:	b1 1c       	adc	r11, r1
    4338:	f6 01       	movw	r30, r12
    433a:	80 81       	ld	r24, Z
    433c:	89 83       	std	Y+1, r24	; 0x01
    433e:	01 e0       	ldi	r16, 0x01	; 1
    4340:	10 e0       	ldi	r17, 0x00	; 0
    4342:	64 01       	movw	r12, r8
    4344:	14 c0       	rjmp	.+40     	; 0x436e <vfprintf+0x49a>
    4346:	56 01       	movw	r10, r12
    4348:	f2 e0       	ldi	r31, 0x02	; 2
    434a:	af 0e       	add	r10, r31
    434c:	b1 1c       	adc	r11, r1
    434e:	f6 01       	movw	r30, r12
    4350:	c0 80       	ld	r12, Z
    4352:	d1 80       	ldd	r13, Z+1	; 0x01
    4354:	26 ff       	sbrs	r18, 6
    4356:	03 c0       	rjmp	.+6      	; 0x435e <vfprintf+0x48a>
    4358:	61 2f       	mov	r22, r17
    435a:	70 e0       	ldi	r23, 0x00	; 0
    435c:	02 c0       	rjmp	.+4      	; 0x4362 <vfprintf+0x48e>
    435e:	6f ef       	ldi	r22, 0xFF	; 255
    4360:	7f ef       	ldi	r23, 0xFF	; 255
    4362:	c6 01       	movw	r24, r12
    4364:	2b 8b       	std	Y+19, r18	; 0x13
    4366:	0e 94 05 24 	call	0x480a	; 0x480a <strnlen>
    436a:	8c 01       	movw	r16, r24
    436c:	2b 89       	ldd	r18, Y+19	; 0x13
    436e:	2f 77       	andi	r18, 0x7F	; 127
    4370:	15 c0       	rjmp	.+42     	; 0x439c <vfprintf+0x4c8>
    4372:	56 01       	movw	r10, r12
    4374:	f2 e0       	ldi	r31, 0x02	; 2
    4376:	af 0e       	add	r10, r31
    4378:	b1 1c       	adc	r11, r1
    437a:	f6 01       	movw	r30, r12
    437c:	c0 80       	ld	r12, Z
    437e:	d1 80       	ldd	r13, Z+1	; 0x01
    4380:	26 ff       	sbrs	r18, 6
    4382:	03 c0       	rjmp	.+6      	; 0x438a <vfprintf+0x4b6>
    4384:	61 2f       	mov	r22, r17
    4386:	70 e0       	ldi	r23, 0x00	; 0
    4388:	02 c0       	rjmp	.+4      	; 0x438e <vfprintf+0x4ba>
    438a:	6f ef       	ldi	r22, 0xFF	; 255
    438c:	7f ef       	ldi	r23, 0xFF	; 255
    438e:	c6 01       	movw	r24, r12
    4390:	2b 8b       	std	Y+19, r18	; 0x13
    4392:	0e 94 fa 23 	call	0x47f4	; 0x47f4 <strnlen_P>
    4396:	8c 01       	movw	r16, r24
    4398:	2b 89       	ldd	r18, Y+19	; 0x13
    439a:	20 68       	ori	r18, 0x80	; 128
    439c:	72 2e       	mov	r7, r18
    439e:	23 fd       	sbrc	r18, 3
    43a0:	1a c0       	rjmp	.+52     	; 0x43d6 <vfprintf+0x502>
    43a2:	85 2d       	mov	r24, r5
    43a4:	90 e0       	ldi	r25, 0x00	; 0
    43a6:	08 17       	cp	r16, r24
    43a8:	19 07       	cpc	r17, r25
    43aa:	a8 f4       	brcc	.+42     	; 0x43d6 <vfprintf+0x502>
    43ac:	b7 01       	movw	r22, r14
    43ae:	80 e2       	ldi	r24, 0x20	; 32
    43b0:	90 e0       	ldi	r25, 0x00	; 0
    43b2:	0e 94 10 24 	call	0x4820	; 0x4820 <fputc>
    43b6:	5a 94       	dec	r5
    43b8:	f4 cf       	rjmp	.-24     	; 0x43a2 <vfprintf+0x4ce>
    43ba:	f6 01       	movw	r30, r12
    43bc:	77 fc       	sbrc	r7, 7
    43be:	85 91       	lpm	r24, Z+
    43c0:	77 fe       	sbrs	r7, 7
    43c2:	81 91       	ld	r24, Z+
    43c4:	6f 01       	movw	r12, r30
    43c6:	b7 01       	movw	r22, r14
    43c8:	90 e0       	ldi	r25, 0x00	; 0
    43ca:	0e 94 10 24 	call	0x4820	; 0x4820 <fputc>
    43ce:	51 10       	cpse	r5, r1
    43d0:	5a 94       	dec	r5
    43d2:	01 50       	subi	r16, 0x01	; 1
    43d4:	11 09       	sbc	r17, r1
    43d6:	01 15       	cp	r16, r1
    43d8:	11 05       	cpc	r17, r1
    43da:	79 f7       	brne	.-34     	; 0x43ba <vfprintf+0x4e6>
    43dc:	e2 c0       	rjmp	.+452    	; 0x45a2 <vfprintf+0x6ce>
    43de:	84 36       	cpi	r24, 0x64	; 100
    43e0:	11 f0       	breq	.+4      	; 0x43e6 <vfprintf+0x512>
    43e2:	89 36       	cpi	r24, 0x69	; 105
    43e4:	51 f5       	brne	.+84     	; 0x443a <vfprintf+0x566>
    43e6:	56 01       	movw	r10, r12
    43e8:	27 ff       	sbrs	r18, 7
    43ea:	09 c0       	rjmp	.+18     	; 0x43fe <vfprintf+0x52a>
    43ec:	f4 e0       	ldi	r31, 0x04	; 4
    43ee:	af 0e       	add	r10, r31
    43f0:	b1 1c       	adc	r11, r1
    43f2:	f6 01       	movw	r30, r12
    43f4:	60 81       	ld	r22, Z
    43f6:	71 81       	ldd	r23, Z+1	; 0x01
    43f8:	82 81       	ldd	r24, Z+2	; 0x02
    43fa:	93 81       	ldd	r25, Z+3	; 0x03
    43fc:	0a c0       	rjmp	.+20     	; 0x4412 <vfprintf+0x53e>
    43fe:	f2 e0       	ldi	r31, 0x02	; 2
    4400:	af 0e       	add	r10, r31
    4402:	b1 1c       	adc	r11, r1
    4404:	f6 01       	movw	r30, r12
    4406:	60 81       	ld	r22, Z
    4408:	71 81       	ldd	r23, Z+1	; 0x01
    440a:	88 27       	eor	r24, r24
    440c:	77 fd       	sbrc	r23, 7
    440e:	80 95       	com	r24
    4410:	98 2f       	mov	r25, r24
    4412:	02 2f       	mov	r16, r18
    4414:	0f 76       	andi	r16, 0x6F	; 111
    4416:	97 ff       	sbrs	r25, 7
    4418:	08 c0       	rjmp	.+16     	; 0x442a <vfprintf+0x556>
    441a:	90 95       	com	r25
    441c:	80 95       	com	r24
    441e:	70 95       	com	r23
    4420:	61 95       	neg	r22
    4422:	7f 4f       	sbci	r23, 0xFF	; 255
    4424:	8f 4f       	sbci	r24, 0xFF	; 255
    4426:	9f 4f       	sbci	r25, 0xFF	; 255
    4428:	00 68       	ori	r16, 0x80	; 128
    442a:	2a e0       	ldi	r18, 0x0A	; 10
    442c:	30 e0       	ldi	r19, 0x00	; 0
    442e:	a4 01       	movw	r20, r8
    4430:	0e 94 64 24 	call	0x48c8	; 0x48c8 <__ultoa_invert>
    4434:	c8 2e       	mov	r12, r24
    4436:	c8 18       	sub	r12, r8
    4438:	3e c0       	rjmp	.+124    	; 0x44b6 <vfprintf+0x5e2>
    443a:	02 2f       	mov	r16, r18
    443c:	85 37       	cpi	r24, 0x75	; 117
    443e:	21 f4       	brne	.+8      	; 0x4448 <vfprintf+0x574>
    4440:	0f 7e       	andi	r16, 0xEF	; 239
    4442:	2a e0       	ldi	r18, 0x0A	; 10
    4444:	30 e0       	ldi	r19, 0x00	; 0
    4446:	1d c0       	rjmp	.+58     	; 0x4482 <vfprintf+0x5ae>
    4448:	09 7f       	andi	r16, 0xF9	; 249
    444a:	8f 36       	cpi	r24, 0x6F	; 111
    444c:	91 f0       	breq	.+36     	; 0x4472 <vfprintf+0x59e>
    444e:	18 f4       	brcc	.+6      	; 0x4456 <vfprintf+0x582>
    4450:	88 35       	cpi	r24, 0x58	; 88
    4452:	59 f0       	breq	.+22     	; 0x446a <vfprintf+0x596>
    4454:	b0 c0       	rjmp	.+352    	; 0x45b6 <vfprintf+0x6e2>
    4456:	80 37       	cpi	r24, 0x70	; 112
    4458:	19 f0       	breq	.+6      	; 0x4460 <vfprintf+0x58c>
    445a:	88 37       	cpi	r24, 0x78	; 120
    445c:	11 f0       	breq	.+4      	; 0x4462 <vfprintf+0x58e>
    445e:	ab c0       	rjmp	.+342    	; 0x45b6 <vfprintf+0x6e2>
    4460:	00 61       	ori	r16, 0x10	; 16
    4462:	04 ff       	sbrs	r16, 4
    4464:	09 c0       	rjmp	.+18     	; 0x4478 <vfprintf+0x5a4>
    4466:	04 60       	ori	r16, 0x04	; 4
    4468:	07 c0       	rjmp	.+14     	; 0x4478 <vfprintf+0x5a4>
    446a:	24 ff       	sbrs	r18, 4
    446c:	08 c0       	rjmp	.+16     	; 0x447e <vfprintf+0x5aa>
    446e:	06 60       	ori	r16, 0x06	; 6
    4470:	06 c0       	rjmp	.+12     	; 0x447e <vfprintf+0x5aa>
    4472:	28 e0       	ldi	r18, 0x08	; 8
    4474:	30 e0       	ldi	r19, 0x00	; 0
    4476:	05 c0       	rjmp	.+10     	; 0x4482 <vfprintf+0x5ae>
    4478:	20 e1       	ldi	r18, 0x10	; 16
    447a:	30 e0       	ldi	r19, 0x00	; 0
    447c:	02 c0       	rjmp	.+4      	; 0x4482 <vfprintf+0x5ae>
    447e:	20 e1       	ldi	r18, 0x10	; 16
    4480:	32 e0       	ldi	r19, 0x02	; 2
    4482:	56 01       	movw	r10, r12
    4484:	07 ff       	sbrs	r16, 7
    4486:	09 c0       	rjmp	.+18     	; 0x449a <vfprintf+0x5c6>
    4488:	f4 e0       	ldi	r31, 0x04	; 4
    448a:	af 0e       	add	r10, r31
    448c:	b1 1c       	adc	r11, r1
    448e:	f6 01       	movw	r30, r12
    4490:	60 81       	ld	r22, Z
    4492:	71 81       	ldd	r23, Z+1	; 0x01
    4494:	82 81       	ldd	r24, Z+2	; 0x02
    4496:	93 81       	ldd	r25, Z+3	; 0x03
    4498:	08 c0       	rjmp	.+16     	; 0x44aa <vfprintf+0x5d6>
    449a:	f2 e0       	ldi	r31, 0x02	; 2
    449c:	af 0e       	add	r10, r31
    449e:	b1 1c       	adc	r11, r1
    44a0:	f6 01       	movw	r30, r12
    44a2:	60 81       	ld	r22, Z
    44a4:	71 81       	ldd	r23, Z+1	; 0x01
    44a6:	80 e0       	ldi	r24, 0x00	; 0
    44a8:	90 e0       	ldi	r25, 0x00	; 0
    44aa:	a4 01       	movw	r20, r8
    44ac:	0e 94 64 24 	call	0x48c8	; 0x48c8 <__ultoa_invert>
    44b0:	c8 2e       	mov	r12, r24
    44b2:	c8 18       	sub	r12, r8
    44b4:	0f 77       	andi	r16, 0x7F	; 127
    44b6:	06 ff       	sbrs	r16, 6
    44b8:	0b c0       	rjmp	.+22     	; 0x44d0 <vfprintf+0x5fc>
    44ba:	20 2f       	mov	r18, r16
    44bc:	2e 7f       	andi	r18, 0xFE	; 254
    44be:	c1 16       	cp	r12, r17
    44c0:	50 f4       	brcc	.+20     	; 0x44d6 <vfprintf+0x602>
    44c2:	04 ff       	sbrs	r16, 4
    44c4:	0a c0       	rjmp	.+20     	; 0x44da <vfprintf+0x606>
    44c6:	02 fd       	sbrc	r16, 2
    44c8:	08 c0       	rjmp	.+16     	; 0x44da <vfprintf+0x606>
    44ca:	20 2f       	mov	r18, r16
    44cc:	2e 7e       	andi	r18, 0xEE	; 238
    44ce:	05 c0       	rjmp	.+10     	; 0x44da <vfprintf+0x606>
    44d0:	dc 2c       	mov	r13, r12
    44d2:	20 2f       	mov	r18, r16
    44d4:	03 c0       	rjmp	.+6      	; 0x44dc <vfprintf+0x608>
    44d6:	dc 2c       	mov	r13, r12
    44d8:	01 c0       	rjmp	.+2      	; 0x44dc <vfprintf+0x608>
    44da:	d1 2e       	mov	r13, r17
    44dc:	24 ff       	sbrs	r18, 4
    44de:	0d c0       	rjmp	.+26     	; 0x44fa <vfprintf+0x626>
    44e0:	fe 01       	movw	r30, r28
    44e2:	ec 0d       	add	r30, r12
    44e4:	f1 1d       	adc	r31, r1
    44e6:	80 81       	ld	r24, Z
    44e8:	80 33       	cpi	r24, 0x30	; 48
    44ea:	11 f4       	brne	.+4      	; 0x44f0 <vfprintf+0x61c>
    44ec:	29 7e       	andi	r18, 0xE9	; 233
    44ee:	09 c0       	rjmp	.+18     	; 0x4502 <vfprintf+0x62e>
    44f0:	22 ff       	sbrs	r18, 2
    44f2:	06 c0       	rjmp	.+12     	; 0x4500 <vfprintf+0x62c>
    44f4:	d3 94       	inc	r13
    44f6:	d3 94       	inc	r13
    44f8:	04 c0       	rjmp	.+8      	; 0x4502 <vfprintf+0x62e>
    44fa:	82 2f       	mov	r24, r18
    44fc:	86 78       	andi	r24, 0x86	; 134
    44fe:	09 f0       	breq	.+2      	; 0x4502 <vfprintf+0x62e>
    4500:	d3 94       	inc	r13
    4502:	23 fd       	sbrc	r18, 3
    4504:	13 c0       	rjmp	.+38     	; 0x452c <vfprintf+0x658>
    4506:	20 ff       	sbrs	r18, 0
    4508:	06 c0       	rjmp	.+12     	; 0x4516 <vfprintf+0x642>
    450a:	1c 2d       	mov	r17, r12
    450c:	d5 14       	cp	r13, r5
    450e:	18 f4       	brcc	.+6      	; 0x4516 <vfprintf+0x642>
    4510:	15 0d       	add	r17, r5
    4512:	1d 19       	sub	r17, r13
    4514:	d5 2c       	mov	r13, r5
    4516:	d5 14       	cp	r13, r5
    4518:	68 f4       	brcc	.+26     	; 0x4534 <vfprintf+0x660>
    451a:	b7 01       	movw	r22, r14
    451c:	80 e2       	ldi	r24, 0x20	; 32
    451e:	90 e0       	ldi	r25, 0x00	; 0
    4520:	2b 8b       	std	Y+19, r18	; 0x13
    4522:	0e 94 10 24 	call	0x4820	; 0x4820 <fputc>
    4526:	d3 94       	inc	r13
    4528:	2b 89       	ldd	r18, Y+19	; 0x13
    452a:	f5 cf       	rjmp	.-22     	; 0x4516 <vfprintf+0x642>
    452c:	d5 14       	cp	r13, r5
    452e:	10 f4       	brcc	.+4      	; 0x4534 <vfprintf+0x660>
    4530:	5d 18       	sub	r5, r13
    4532:	01 c0       	rjmp	.+2      	; 0x4536 <vfprintf+0x662>
    4534:	51 2c       	mov	r5, r1
    4536:	24 ff       	sbrs	r18, 4
    4538:	12 c0       	rjmp	.+36     	; 0x455e <vfprintf+0x68a>
    453a:	b7 01       	movw	r22, r14
    453c:	80 e3       	ldi	r24, 0x30	; 48
    453e:	90 e0       	ldi	r25, 0x00	; 0
    4540:	2b 8b       	std	Y+19, r18	; 0x13
    4542:	0e 94 10 24 	call	0x4820	; 0x4820 <fputc>
    4546:	2b 89       	ldd	r18, Y+19	; 0x13
    4548:	22 ff       	sbrs	r18, 2
    454a:	17 c0       	rjmp	.+46     	; 0x457a <vfprintf+0x6a6>
    454c:	21 ff       	sbrs	r18, 1
    454e:	03 c0       	rjmp	.+6      	; 0x4556 <vfprintf+0x682>
    4550:	88 e5       	ldi	r24, 0x58	; 88
    4552:	90 e0       	ldi	r25, 0x00	; 0
    4554:	02 c0       	rjmp	.+4      	; 0x455a <vfprintf+0x686>
    4556:	88 e7       	ldi	r24, 0x78	; 120
    4558:	90 e0       	ldi	r25, 0x00	; 0
    455a:	b7 01       	movw	r22, r14
    455c:	0c c0       	rjmp	.+24     	; 0x4576 <vfprintf+0x6a2>
    455e:	82 2f       	mov	r24, r18
    4560:	86 78       	andi	r24, 0x86	; 134
    4562:	59 f0       	breq	.+22     	; 0x457a <vfprintf+0x6a6>
    4564:	21 fd       	sbrc	r18, 1
    4566:	02 c0       	rjmp	.+4      	; 0x456c <vfprintf+0x698>
    4568:	80 e2       	ldi	r24, 0x20	; 32
    456a:	01 c0       	rjmp	.+2      	; 0x456e <vfprintf+0x69a>
    456c:	8b e2       	ldi	r24, 0x2B	; 43
    456e:	27 fd       	sbrc	r18, 7
    4570:	8d e2       	ldi	r24, 0x2D	; 45
    4572:	b7 01       	movw	r22, r14
    4574:	90 e0       	ldi	r25, 0x00	; 0
    4576:	0e 94 10 24 	call	0x4820	; 0x4820 <fputc>
    457a:	c1 16       	cp	r12, r17
    457c:	38 f4       	brcc	.+14     	; 0x458c <vfprintf+0x6b8>
    457e:	b7 01       	movw	r22, r14
    4580:	80 e3       	ldi	r24, 0x30	; 48
    4582:	90 e0       	ldi	r25, 0x00	; 0
    4584:	0e 94 10 24 	call	0x4820	; 0x4820 <fputc>
    4588:	11 50       	subi	r17, 0x01	; 1
    458a:	f7 cf       	rjmp	.-18     	; 0x457a <vfprintf+0x6a6>
    458c:	ca 94       	dec	r12
    458e:	f4 01       	movw	r30, r8
    4590:	ec 0d       	add	r30, r12
    4592:	f1 1d       	adc	r31, r1
    4594:	80 81       	ld	r24, Z
    4596:	b7 01       	movw	r22, r14
    4598:	90 e0       	ldi	r25, 0x00	; 0
    459a:	0e 94 10 24 	call	0x4820	; 0x4820 <fputc>
    459e:	c1 10       	cpse	r12, r1
    45a0:	f5 cf       	rjmp	.-22     	; 0x458c <vfprintf+0x6b8>
    45a2:	55 20       	and	r5, r5
    45a4:	09 f4       	brne	.+2      	; 0x45a8 <vfprintf+0x6d4>
    45a6:	c2 cc       	rjmp	.-1660   	; 0x3f2c <vfprintf+0x58>
    45a8:	b7 01       	movw	r22, r14
    45aa:	80 e2       	ldi	r24, 0x20	; 32
    45ac:	90 e0       	ldi	r25, 0x00	; 0
    45ae:	0e 94 10 24 	call	0x4820	; 0x4820 <fputc>
    45b2:	5a 94       	dec	r5
    45b4:	f6 cf       	rjmp	.-20     	; 0x45a2 <vfprintf+0x6ce>
    45b6:	f7 01       	movw	r30, r14
    45b8:	86 81       	ldd	r24, Z+6	; 0x06
    45ba:	97 81       	ldd	r25, Z+7	; 0x07
    45bc:	02 c0       	rjmp	.+4      	; 0x45c2 <vfprintf+0x6ee>
    45be:	8f ef       	ldi	r24, 0xFF	; 255
    45c0:	9f ef       	ldi	r25, 0xFF	; 255
    45c2:	63 96       	adiw	r28, 0x13	; 19
    45c4:	e2 e1       	ldi	r30, 0x12	; 18
    45c6:	0c 94 07 23 	jmp	0x460e	; 0x460e <__epilogue_restores__>

000045ca <__tablejump2__>:
    45ca:	ee 0f       	add	r30, r30
    45cc:	ff 1f       	adc	r31, r31

000045ce <__tablejump__>:
    45ce:	05 90       	lpm	r0, Z+
    45d0:	f4 91       	lpm	r31, Z
    45d2:	e0 2d       	mov	r30, r0
    45d4:	09 94       	ijmp

000045d6 <__prologue_saves__>:
    45d6:	2f 92       	push	r2
    45d8:	3f 92       	push	r3
    45da:	4f 92       	push	r4
    45dc:	5f 92       	push	r5
    45de:	6f 92       	push	r6
    45e0:	7f 92       	push	r7
    45e2:	8f 92       	push	r8
    45e4:	9f 92       	push	r9
    45e6:	af 92       	push	r10
    45e8:	bf 92       	push	r11
    45ea:	cf 92       	push	r12
    45ec:	df 92       	push	r13
    45ee:	ef 92       	push	r14
    45f0:	ff 92       	push	r15
    45f2:	0f 93       	push	r16
    45f4:	1f 93       	push	r17
    45f6:	cf 93       	push	r28
    45f8:	df 93       	push	r29
    45fa:	cd b7       	in	r28, 0x3d	; 61
    45fc:	de b7       	in	r29, 0x3e	; 62
    45fe:	ca 1b       	sub	r28, r26
    4600:	db 0b       	sbc	r29, r27
    4602:	0f b6       	in	r0, 0x3f	; 63
    4604:	f8 94       	cli
    4606:	de bf       	out	0x3e, r29	; 62
    4608:	0f be       	out	0x3f, r0	; 63
    460a:	cd bf       	out	0x3d, r28	; 61
    460c:	09 94       	ijmp

0000460e <__epilogue_restores__>:
    460e:	2a 88       	ldd	r2, Y+18	; 0x12
    4610:	39 88       	ldd	r3, Y+17	; 0x11
    4612:	48 88       	ldd	r4, Y+16	; 0x10
    4614:	5f 84       	ldd	r5, Y+15	; 0x0f
    4616:	6e 84       	ldd	r6, Y+14	; 0x0e
    4618:	7d 84       	ldd	r7, Y+13	; 0x0d
    461a:	8c 84       	ldd	r8, Y+12	; 0x0c
    461c:	9b 84       	ldd	r9, Y+11	; 0x0b
    461e:	aa 84       	ldd	r10, Y+10	; 0x0a
    4620:	b9 84       	ldd	r11, Y+9	; 0x09
    4622:	c8 84       	ldd	r12, Y+8	; 0x08
    4624:	df 80       	ldd	r13, Y+7	; 0x07
    4626:	ee 80       	ldd	r14, Y+6	; 0x06
    4628:	fd 80       	ldd	r15, Y+5	; 0x05
    462a:	0c 81       	ldd	r16, Y+4	; 0x04
    462c:	1b 81       	ldd	r17, Y+3	; 0x03
    462e:	aa 81       	ldd	r26, Y+2	; 0x02
    4630:	b9 81       	ldd	r27, Y+1	; 0x01
    4632:	ce 0f       	add	r28, r30
    4634:	d1 1d       	adc	r29, r1
    4636:	0f b6       	in	r0, 0x3f	; 63
    4638:	f8 94       	cli
    463a:	de bf       	out	0x3e, r29	; 62
    463c:	0f be       	out	0x3f, r0	; 63
    463e:	cd bf       	out	0x3d, r28	; 61
    4640:	ed 01       	movw	r28, r26
    4642:	08 95       	ret

00004644 <__ftoa_engine>:
    4644:	28 30       	cpi	r18, 0x08	; 8
    4646:	08 f0       	brcs	.+2      	; 0x464a <__ftoa_engine+0x6>
    4648:	27 e0       	ldi	r18, 0x07	; 7
    464a:	33 27       	eor	r19, r19
    464c:	da 01       	movw	r26, r20
    464e:	99 0f       	add	r25, r25
    4650:	31 1d       	adc	r19, r1
    4652:	87 fd       	sbrc	r24, 7
    4654:	91 60       	ori	r25, 0x01	; 1
    4656:	00 96       	adiw	r24, 0x00	; 0
    4658:	61 05       	cpc	r22, r1
    465a:	71 05       	cpc	r23, r1
    465c:	39 f4       	brne	.+14     	; 0x466c <__ftoa_engine+0x28>
    465e:	32 60       	ori	r19, 0x02	; 2
    4660:	2e 5f       	subi	r18, 0xFE	; 254
    4662:	3d 93       	st	X+, r19
    4664:	30 e3       	ldi	r19, 0x30	; 48
    4666:	2a 95       	dec	r18
    4668:	e1 f7       	brne	.-8      	; 0x4662 <__ftoa_engine+0x1e>
    466a:	08 95       	ret
    466c:	9f 3f       	cpi	r25, 0xFF	; 255
    466e:	30 f0       	brcs	.+12     	; 0x467c <__ftoa_engine+0x38>
    4670:	80 38       	cpi	r24, 0x80	; 128
    4672:	71 05       	cpc	r23, r1
    4674:	61 05       	cpc	r22, r1
    4676:	09 f0       	breq	.+2      	; 0x467a <__ftoa_engine+0x36>
    4678:	3c 5f       	subi	r19, 0xFC	; 252
    467a:	3c 5f       	subi	r19, 0xFC	; 252
    467c:	3d 93       	st	X+, r19
    467e:	91 30       	cpi	r25, 0x01	; 1
    4680:	08 f0       	brcs	.+2      	; 0x4684 <__ftoa_engine+0x40>
    4682:	80 68       	ori	r24, 0x80	; 128
    4684:	91 1d       	adc	r25, r1
    4686:	df 93       	push	r29
    4688:	cf 93       	push	r28
    468a:	1f 93       	push	r17
    468c:	0f 93       	push	r16
    468e:	ff 92       	push	r15
    4690:	ef 92       	push	r14
    4692:	19 2f       	mov	r17, r25
    4694:	98 7f       	andi	r25, 0xF8	; 248
    4696:	96 95       	lsr	r25
    4698:	e9 2f       	mov	r30, r25
    469a:	96 95       	lsr	r25
    469c:	96 95       	lsr	r25
    469e:	e9 0f       	add	r30, r25
    46a0:	ff 27       	eor	r31, r31
    46a2:	ee 58       	subi	r30, 0x8E	; 142
    46a4:	fb 4f       	sbci	r31, 0xFB	; 251
    46a6:	99 27       	eor	r25, r25
    46a8:	33 27       	eor	r19, r19
    46aa:	ee 24       	eor	r14, r14
    46ac:	ff 24       	eor	r15, r15
    46ae:	a7 01       	movw	r20, r14
    46b0:	e7 01       	movw	r28, r14
    46b2:	05 90       	lpm	r0, Z+
    46b4:	08 94       	sec
    46b6:	07 94       	ror	r0
    46b8:	28 f4       	brcc	.+10     	; 0x46c4 <__ftoa_engine+0x80>
    46ba:	36 0f       	add	r19, r22
    46bc:	e7 1e       	adc	r14, r23
    46be:	f8 1e       	adc	r15, r24
    46c0:	49 1f       	adc	r20, r25
    46c2:	51 1d       	adc	r21, r1
    46c4:	66 0f       	add	r22, r22
    46c6:	77 1f       	adc	r23, r23
    46c8:	88 1f       	adc	r24, r24
    46ca:	99 1f       	adc	r25, r25
    46cc:	06 94       	lsr	r0
    46ce:	a1 f7       	brne	.-24     	; 0x46b8 <__ftoa_engine+0x74>
    46d0:	05 90       	lpm	r0, Z+
    46d2:	07 94       	ror	r0
    46d4:	28 f4       	brcc	.+10     	; 0x46e0 <__ftoa_engine+0x9c>
    46d6:	e7 0e       	add	r14, r23
    46d8:	f8 1e       	adc	r15, r24
    46da:	49 1f       	adc	r20, r25
    46dc:	56 1f       	adc	r21, r22
    46de:	c1 1d       	adc	r28, r1
    46e0:	77 0f       	add	r23, r23
    46e2:	88 1f       	adc	r24, r24
    46e4:	99 1f       	adc	r25, r25
    46e6:	66 1f       	adc	r22, r22
    46e8:	06 94       	lsr	r0
    46ea:	a1 f7       	brne	.-24     	; 0x46d4 <__ftoa_engine+0x90>
    46ec:	05 90       	lpm	r0, Z+
    46ee:	07 94       	ror	r0
    46f0:	28 f4       	brcc	.+10     	; 0x46fc <__ftoa_engine+0xb8>
    46f2:	f8 0e       	add	r15, r24
    46f4:	49 1f       	adc	r20, r25
    46f6:	56 1f       	adc	r21, r22
    46f8:	c7 1f       	adc	r28, r23
    46fa:	d1 1d       	adc	r29, r1
    46fc:	88 0f       	add	r24, r24
    46fe:	99 1f       	adc	r25, r25
    4700:	66 1f       	adc	r22, r22
    4702:	77 1f       	adc	r23, r23
    4704:	06 94       	lsr	r0
    4706:	a1 f7       	brne	.-24     	; 0x46f0 <__ftoa_engine+0xac>
    4708:	05 90       	lpm	r0, Z+
    470a:	07 94       	ror	r0
    470c:	20 f4       	brcc	.+8      	; 0x4716 <__ftoa_engine+0xd2>
    470e:	49 0f       	add	r20, r25
    4710:	56 1f       	adc	r21, r22
    4712:	c7 1f       	adc	r28, r23
    4714:	d8 1f       	adc	r29, r24
    4716:	99 0f       	add	r25, r25
    4718:	66 1f       	adc	r22, r22
    471a:	77 1f       	adc	r23, r23
    471c:	88 1f       	adc	r24, r24
    471e:	06 94       	lsr	r0
    4720:	a9 f7       	brne	.-22     	; 0x470c <__ftoa_engine+0xc8>
    4722:	84 91       	lpm	r24, Z
    4724:	10 95       	com	r17
    4726:	17 70       	andi	r17, 0x07	; 7
    4728:	41 f0       	breq	.+16     	; 0x473a <__ftoa_engine+0xf6>
    472a:	d6 95       	lsr	r29
    472c:	c7 95       	ror	r28
    472e:	57 95       	ror	r21
    4730:	47 95       	ror	r20
    4732:	f7 94       	ror	r15
    4734:	e7 94       	ror	r14
    4736:	1a 95       	dec	r17
    4738:	c1 f7       	brne	.-16     	; 0x472a <__ftoa_engine+0xe6>
    473a:	e8 e1       	ldi	r30, 0x18	; 24
    473c:	f4 e0       	ldi	r31, 0x04	; 4
    473e:	68 94       	set
    4740:	15 90       	lpm	r1, Z+
    4742:	15 91       	lpm	r17, Z+
    4744:	35 91       	lpm	r19, Z+
    4746:	65 91       	lpm	r22, Z+
    4748:	95 91       	lpm	r25, Z+
    474a:	05 90       	lpm	r0, Z+
    474c:	7f e2       	ldi	r23, 0x2F	; 47
    474e:	73 95       	inc	r23
    4750:	e1 18       	sub	r14, r1
    4752:	f1 0a       	sbc	r15, r17
    4754:	43 0b       	sbc	r20, r19
    4756:	56 0b       	sbc	r21, r22
    4758:	c9 0b       	sbc	r28, r25
    475a:	d0 09       	sbc	r29, r0
    475c:	c0 f7       	brcc	.-16     	; 0x474e <__ftoa_engine+0x10a>
    475e:	e1 0c       	add	r14, r1
    4760:	f1 1e       	adc	r15, r17
    4762:	43 1f       	adc	r20, r19
    4764:	56 1f       	adc	r21, r22
    4766:	c9 1f       	adc	r28, r25
    4768:	d0 1d       	adc	r29, r0
    476a:	7e f4       	brtc	.+30     	; 0x478a <__ftoa_engine+0x146>
    476c:	70 33       	cpi	r23, 0x30	; 48
    476e:	11 f4       	brne	.+4      	; 0x4774 <__ftoa_engine+0x130>
    4770:	8a 95       	dec	r24
    4772:	e6 cf       	rjmp	.-52     	; 0x4740 <__ftoa_engine+0xfc>
    4774:	e8 94       	clt
    4776:	01 50       	subi	r16, 0x01	; 1
    4778:	30 f0       	brcs	.+12     	; 0x4786 <__ftoa_engine+0x142>
    477a:	08 0f       	add	r16, r24
    477c:	0a f4       	brpl	.+2      	; 0x4780 <__ftoa_engine+0x13c>
    477e:	00 27       	eor	r16, r16
    4780:	02 17       	cp	r16, r18
    4782:	08 f4       	brcc	.+2      	; 0x4786 <__ftoa_engine+0x142>
    4784:	20 2f       	mov	r18, r16
    4786:	23 95       	inc	r18
    4788:	02 2f       	mov	r16, r18
    478a:	7a 33       	cpi	r23, 0x3A	; 58
    478c:	28 f0       	brcs	.+10     	; 0x4798 <__ftoa_engine+0x154>
    478e:	79 e3       	ldi	r23, 0x39	; 57
    4790:	7d 93       	st	X+, r23
    4792:	2a 95       	dec	r18
    4794:	e9 f7       	brne	.-6      	; 0x4790 <__ftoa_engine+0x14c>
    4796:	10 c0       	rjmp	.+32     	; 0x47b8 <__ftoa_engine+0x174>
    4798:	7d 93       	st	X+, r23
    479a:	2a 95       	dec	r18
    479c:	89 f6       	brne	.-94     	; 0x4740 <__ftoa_engine+0xfc>
    479e:	06 94       	lsr	r0
    47a0:	97 95       	ror	r25
    47a2:	67 95       	ror	r22
    47a4:	37 95       	ror	r19
    47a6:	17 95       	ror	r17
    47a8:	17 94       	ror	r1
    47aa:	e1 18       	sub	r14, r1
    47ac:	f1 0a       	sbc	r15, r17
    47ae:	43 0b       	sbc	r20, r19
    47b0:	56 0b       	sbc	r21, r22
    47b2:	c9 0b       	sbc	r28, r25
    47b4:	d0 09       	sbc	r29, r0
    47b6:	98 f0       	brcs	.+38     	; 0x47de <__ftoa_engine+0x19a>
    47b8:	23 95       	inc	r18
    47ba:	7e 91       	ld	r23, -X
    47bc:	73 95       	inc	r23
    47be:	7a 33       	cpi	r23, 0x3A	; 58
    47c0:	08 f0       	brcs	.+2      	; 0x47c4 <__ftoa_engine+0x180>
    47c2:	70 e3       	ldi	r23, 0x30	; 48
    47c4:	7c 93       	st	X, r23
    47c6:	20 13       	cpse	r18, r16
    47c8:	b8 f7       	brcc	.-18     	; 0x47b8 <__ftoa_engine+0x174>
    47ca:	7e 91       	ld	r23, -X
    47cc:	70 61       	ori	r23, 0x10	; 16
    47ce:	7d 93       	st	X+, r23
    47d0:	30 f0       	brcs	.+12     	; 0x47de <__ftoa_engine+0x19a>
    47d2:	83 95       	inc	r24
    47d4:	71 e3       	ldi	r23, 0x31	; 49
    47d6:	7d 93       	st	X+, r23
    47d8:	70 e3       	ldi	r23, 0x30	; 48
    47da:	2a 95       	dec	r18
    47dc:	e1 f7       	brne	.-8      	; 0x47d6 <__ftoa_engine+0x192>
    47de:	11 24       	eor	r1, r1
    47e0:	ef 90       	pop	r14
    47e2:	ff 90       	pop	r15
    47e4:	0f 91       	pop	r16
    47e6:	1f 91       	pop	r17
    47e8:	cf 91       	pop	r28
    47ea:	df 91       	pop	r29
    47ec:	99 27       	eor	r25, r25
    47ee:	87 fd       	sbrc	r24, 7
    47f0:	90 95       	com	r25
    47f2:	08 95       	ret

000047f4 <strnlen_P>:
    47f4:	fc 01       	movw	r30, r24
    47f6:	05 90       	lpm	r0, Z+
    47f8:	61 50       	subi	r22, 0x01	; 1
    47fa:	70 40       	sbci	r23, 0x00	; 0
    47fc:	01 10       	cpse	r0, r1
    47fe:	d8 f7       	brcc	.-10     	; 0x47f6 <strnlen_P+0x2>
    4800:	80 95       	com	r24
    4802:	90 95       	com	r25
    4804:	8e 0f       	add	r24, r30
    4806:	9f 1f       	adc	r25, r31
    4808:	08 95       	ret

0000480a <strnlen>:
    480a:	fc 01       	movw	r30, r24
    480c:	61 50       	subi	r22, 0x01	; 1
    480e:	70 40       	sbci	r23, 0x00	; 0
    4810:	01 90       	ld	r0, Z+
    4812:	01 10       	cpse	r0, r1
    4814:	d8 f7       	brcc	.-10     	; 0x480c <strnlen+0x2>
    4816:	80 95       	com	r24
    4818:	90 95       	com	r25
    481a:	8e 0f       	add	r24, r30
    481c:	9f 1f       	adc	r25, r31
    481e:	08 95       	ret

00004820 <fputc>:
    4820:	0f 93       	push	r16
    4822:	1f 93       	push	r17
    4824:	cf 93       	push	r28
    4826:	df 93       	push	r29
    4828:	18 2f       	mov	r17, r24
    482a:	09 2f       	mov	r16, r25
    482c:	eb 01       	movw	r28, r22
    482e:	8b 81       	ldd	r24, Y+3	; 0x03
    4830:	81 fd       	sbrc	r24, 1
    4832:	03 c0       	rjmp	.+6      	; 0x483a <fputc+0x1a>
    4834:	8f ef       	ldi	r24, 0xFF	; 255
    4836:	9f ef       	ldi	r25, 0xFF	; 255
    4838:	20 c0       	rjmp	.+64     	; 0x487a <fputc+0x5a>
    483a:	82 ff       	sbrs	r24, 2
    483c:	10 c0       	rjmp	.+32     	; 0x485e <fputc+0x3e>
    483e:	4e 81       	ldd	r20, Y+6	; 0x06
    4840:	5f 81       	ldd	r21, Y+7	; 0x07
    4842:	2c 81       	ldd	r18, Y+4	; 0x04
    4844:	3d 81       	ldd	r19, Y+5	; 0x05
    4846:	42 17       	cp	r20, r18
    4848:	53 07       	cpc	r21, r19
    484a:	7c f4       	brge	.+30     	; 0x486a <fputc+0x4a>
    484c:	e8 81       	ld	r30, Y
    484e:	f9 81       	ldd	r31, Y+1	; 0x01
    4850:	9f 01       	movw	r18, r30
    4852:	2f 5f       	subi	r18, 0xFF	; 255
    4854:	3f 4f       	sbci	r19, 0xFF	; 255
    4856:	39 83       	std	Y+1, r19	; 0x01
    4858:	28 83       	st	Y, r18
    485a:	10 83       	st	Z, r17
    485c:	06 c0       	rjmp	.+12     	; 0x486a <fputc+0x4a>
    485e:	e8 85       	ldd	r30, Y+8	; 0x08
    4860:	f9 85       	ldd	r31, Y+9	; 0x09
    4862:	81 2f       	mov	r24, r17
    4864:	09 95       	icall
    4866:	89 2b       	or	r24, r25
    4868:	29 f7       	brne	.-54     	; 0x4834 <fputc+0x14>
    486a:	2e 81       	ldd	r18, Y+6	; 0x06
    486c:	3f 81       	ldd	r19, Y+7	; 0x07
    486e:	2f 5f       	subi	r18, 0xFF	; 255
    4870:	3f 4f       	sbci	r19, 0xFF	; 255
    4872:	3f 83       	std	Y+7, r19	; 0x07
    4874:	2e 83       	std	Y+6, r18	; 0x06
    4876:	81 2f       	mov	r24, r17
    4878:	90 2f       	mov	r25, r16
    487a:	df 91       	pop	r29
    487c:	cf 91       	pop	r28
    487e:	1f 91       	pop	r17
    4880:	0f 91       	pop	r16
    4882:	08 95       	ret

00004884 <sprintf>:
    4884:	ae e0       	ldi	r26, 0x0E	; 14
    4886:	b0 e0       	ldi	r27, 0x00	; 0
    4888:	e8 e4       	ldi	r30, 0x48	; 72
    488a:	f4 e2       	ldi	r31, 0x24	; 36
    488c:	0c 94 f9 22 	jmp	0x45f2	; 0x45f2 <__prologue_saves__+0x1c>
    4890:	0d 89       	ldd	r16, Y+21	; 0x15
    4892:	1e 89       	ldd	r17, Y+22	; 0x16
    4894:	86 e0       	ldi	r24, 0x06	; 6
    4896:	8c 83       	std	Y+4, r24	; 0x04
    4898:	1a 83       	std	Y+2, r17	; 0x02
    489a:	09 83       	std	Y+1, r16	; 0x01
    489c:	8f ef       	ldi	r24, 0xFF	; 255
    489e:	9f e7       	ldi	r25, 0x7F	; 127
    48a0:	9e 83       	std	Y+6, r25	; 0x06
    48a2:	8d 83       	std	Y+5, r24	; 0x05
    48a4:	ae 01       	movw	r20, r28
    48a6:	47 5e       	subi	r20, 0xE7	; 231
    48a8:	5f 4f       	sbci	r21, 0xFF	; 255
    48aa:	6f 89       	ldd	r22, Y+23	; 0x17
    48ac:	78 8d       	ldd	r23, Y+24	; 0x18
    48ae:	ce 01       	movw	r24, r28
    48b0:	01 96       	adiw	r24, 0x01	; 1
    48b2:	0e 94 6a 1f 	call	0x3ed4	; 0x3ed4 <vfprintf>
    48b6:	ef 81       	ldd	r30, Y+7	; 0x07
    48b8:	f8 85       	ldd	r31, Y+8	; 0x08
    48ba:	e0 0f       	add	r30, r16
    48bc:	f1 1f       	adc	r31, r17
    48be:	10 82       	st	Z, r1
    48c0:	2e 96       	adiw	r28, 0x0e	; 14
    48c2:	e4 e0       	ldi	r30, 0x04	; 4
    48c4:	0c 94 15 23 	jmp	0x462a	; 0x462a <__epilogue_restores__+0x1c>

000048c8 <__ultoa_invert>:
    48c8:	fa 01       	movw	r30, r20
    48ca:	aa 27       	eor	r26, r26
    48cc:	28 30       	cpi	r18, 0x08	; 8
    48ce:	51 f1       	breq	.+84     	; 0x4924 <__ultoa_invert+0x5c>
    48d0:	20 31       	cpi	r18, 0x10	; 16
    48d2:	81 f1       	breq	.+96     	; 0x4934 <__ultoa_invert+0x6c>
    48d4:	e8 94       	clt
    48d6:	6f 93       	push	r22
    48d8:	6e 7f       	andi	r22, 0xFE	; 254
    48da:	6e 5f       	subi	r22, 0xFE	; 254
    48dc:	7f 4f       	sbci	r23, 0xFF	; 255
    48de:	8f 4f       	sbci	r24, 0xFF	; 255
    48e0:	9f 4f       	sbci	r25, 0xFF	; 255
    48e2:	af 4f       	sbci	r26, 0xFF	; 255
    48e4:	b1 e0       	ldi	r27, 0x01	; 1
    48e6:	3e d0       	rcall	.+124    	; 0x4964 <__ultoa_invert+0x9c>
    48e8:	b4 e0       	ldi	r27, 0x04	; 4
    48ea:	3c d0       	rcall	.+120    	; 0x4964 <__ultoa_invert+0x9c>
    48ec:	67 0f       	add	r22, r23
    48ee:	78 1f       	adc	r23, r24
    48f0:	89 1f       	adc	r24, r25
    48f2:	9a 1f       	adc	r25, r26
    48f4:	a1 1d       	adc	r26, r1
    48f6:	68 0f       	add	r22, r24
    48f8:	79 1f       	adc	r23, r25
    48fa:	8a 1f       	adc	r24, r26
    48fc:	91 1d       	adc	r25, r1
    48fe:	a1 1d       	adc	r26, r1
    4900:	6a 0f       	add	r22, r26
    4902:	71 1d       	adc	r23, r1
    4904:	81 1d       	adc	r24, r1
    4906:	91 1d       	adc	r25, r1
    4908:	a1 1d       	adc	r26, r1
    490a:	20 d0       	rcall	.+64     	; 0x494c <__ultoa_invert+0x84>
    490c:	09 f4       	brne	.+2      	; 0x4910 <__ultoa_invert+0x48>
    490e:	68 94       	set
    4910:	3f 91       	pop	r19
    4912:	2a e0       	ldi	r18, 0x0A	; 10
    4914:	26 9f       	mul	r18, r22
    4916:	11 24       	eor	r1, r1
    4918:	30 19       	sub	r19, r0
    491a:	30 5d       	subi	r19, 0xD0	; 208
    491c:	31 93       	st	Z+, r19
    491e:	de f6       	brtc	.-74     	; 0x48d6 <__ultoa_invert+0xe>
    4920:	cf 01       	movw	r24, r30
    4922:	08 95       	ret
    4924:	46 2f       	mov	r20, r22
    4926:	47 70       	andi	r20, 0x07	; 7
    4928:	40 5d       	subi	r20, 0xD0	; 208
    492a:	41 93       	st	Z+, r20
    492c:	b3 e0       	ldi	r27, 0x03	; 3
    492e:	0f d0       	rcall	.+30     	; 0x494e <__ultoa_invert+0x86>
    4930:	c9 f7       	brne	.-14     	; 0x4924 <__ultoa_invert+0x5c>
    4932:	f6 cf       	rjmp	.-20     	; 0x4920 <__ultoa_invert+0x58>
    4934:	46 2f       	mov	r20, r22
    4936:	4f 70       	andi	r20, 0x0F	; 15
    4938:	40 5d       	subi	r20, 0xD0	; 208
    493a:	4a 33       	cpi	r20, 0x3A	; 58
    493c:	18 f0       	brcs	.+6      	; 0x4944 <__ultoa_invert+0x7c>
    493e:	49 5d       	subi	r20, 0xD9	; 217
    4940:	31 fd       	sbrc	r19, 1
    4942:	40 52       	subi	r20, 0x20	; 32
    4944:	41 93       	st	Z+, r20
    4946:	02 d0       	rcall	.+4      	; 0x494c <__ultoa_invert+0x84>
    4948:	a9 f7       	brne	.-22     	; 0x4934 <__ultoa_invert+0x6c>
    494a:	ea cf       	rjmp	.-44     	; 0x4920 <__ultoa_invert+0x58>
    494c:	b4 e0       	ldi	r27, 0x04	; 4
    494e:	a6 95       	lsr	r26
    4950:	97 95       	ror	r25
    4952:	87 95       	ror	r24
    4954:	77 95       	ror	r23
    4956:	67 95       	ror	r22
    4958:	ba 95       	dec	r27
    495a:	c9 f7       	brne	.-14     	; 0x494e <__ultoa_invert+0x86>
    495c:	00 97       	sbiw	r24, 0x00	; 0
    495e:	61 05       	cpc	r22, r1
    4960:	71 05       	cpc	r23, r1
    4962:	08 95       	ret
    4964:	9b 01       	movw	r18, r22
    4966:	ac 01       	movw	r20, r24
    4968:	0a 2e       	mov	r0, r26
    496a:	06 94       	lsr	r0
    496c:	57 95       	ror	r21
    496e:	47 95       	ror	r20
    4970:	37 95       	ror	r19
    4972:	27 95       	ror	r18
    4974:	ba 95       	dec	r27
    4976:	c9 f7       	brne	.-14     	; 0x496a <__ultoa_invert+0xa2>
    4978:	62 0f       	add	r22, r18
    497a:	73 1f       	adc	r23, r19
    497c:	84 1f       	adc	r24, r20
    497e:	95 1f       	adc	r25, r21
    4980:	a0 1d       	adc	r26, r0
    4982:	08 95       	ret

00004984 <__do_global_dtors>:
    4984:	15 e0       	ldi	r17, 0x05	; 5
    4986:	c4 e1       	ldi	r28, 0x14	; 20
    4988:	d5 e0       	ldi	r29, 0x05	; 5
    498a:	04 c0       	rjmp	.+8      	; 0x4994 <__do_global_dtors+0x10>
    498c:	fe 01       	movw	r30, r28
    498e:	0e 94 e7 22 	call	0x45ce	; 0x45ce <__tablejump__>
    4992:	22 96       	adiw	r28, 0x02	; 2
    4994:	c6 31       	cpi	r28, 0x16	; 22
    4996:	d1 07       	cpc	r29, r17
    4998:	c9 f7       	brne	.-14     	; 0x498c <__do_global_dtors+0x8>
    499a:	f8 94       	cli

0000499c <__stop_program>:
    499c:	ff cf       	rjmp	.-2      	; 0x499c <__stop_program>
