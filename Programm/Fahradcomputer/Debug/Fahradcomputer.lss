
Fahradcomputer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001f2  00800100  00005938  000059cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005938  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000048c  008002f2  008002f2  00005bbe  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00005bbe  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000003a8  00000000  00000000  00005c1a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00007ec4  00000000  00000000  00005fc2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000015e1  00000000  00000000  0000de86  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001634  00000000  00000000  0000f467  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000e30  00000000  00000000  00010a9c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00001119  00000000  00000000  000118cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00005e9a  00000000  00000000  000129e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000390  00000000  00000000  0001887f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 bf 02 	jmp	0x57e	; 0x57e <__dtors_end>
       4:	0c 94 e7 02 	jmp	0x5ce	; 0x5ce <__bad_interrupt>
       8:	0c 94 e7 02 	jmp	0x5ce	; 0x5ce <__bad_interrupt>
       c:	0c 94 e7 02 	jmp	0x5ce	; 0x5ce <__bad_interrupt>
      10:	0c 94 e7 02 	jmp	0x5ce	; 0x5ce <__bad_interrupt>
      14:	0c 94 e7 02 	jmp	0x5ce	; 0x5ce <__bad_interrupt>
      18:	0c 94 e7 02 	jmp	0x5ce	; 0x5ce <__bad_interrupt>
      1c:	0c 94 e7 02 	jmp	0x5ce	; 0x5ce <__bad_interrupt>
      20:	0c 94 e7 02 	jmp	0x5ce	; 0x5ce <__bad_interrupt>
      24:	0c 94 1a 17 	jmp	0x2e34	; 0x2e34 <__vector_9>
      28:	0c 94 e7 02 	jmp	0x5ce	; 0x5ce <__bad_interrupt>
      2c:	0c 94 e7 02 	jmp	0x5ce	; 0x5ce <__bad_interrupt>
      30:	0c 94 e7 02 	jmp	0x5ce	; 0x5ce <__bad_interrupt>
      34:	0c 94 e7 02 	jmp	0x5ce	; 0x5ce <__bad_interrupt>
      38:	0c 94 e7 02 	jmp	0x5ce	; 0x5ce <__bad_interrupt>
      3c:	0c 94 e7 02 	jmp	0x5ce	; 0x5ce <__bad_interrupt>
      40:	0c 94 e7 02 	jmp	0x5ce	; 0x5ce <__bad_interrupt>
      44:	0c 94 e7 02 	jmp	0x5ce	; 0x5ce <__bad_interrupt>
      48:	0c 94 e7 02 	jmp	0x5ce	; 0x5ce <__bad_interrupt>
      4c:	0c 94 e7 02 	jmp	0x5ce	; 0x5ce <__bad_interrupt>
      50:	0c 94 e7 02 	jmp	0x5ce	; 0x5ce <__bad_interrupt>
      54:	0c 94 e7 02 	jmp	0x5ce	; 0x5ce <__bad_interrupt>
      58:	0c 94 e7 02 	jmp	0x5ce	; 0x5ce <__bad_interrupt>
      5c:	0c 94 e7 02 	jmp	0x5ce	; 0x5ce <__bad_interrupt>
      60:	0c 94 e7 02 	jmp	0x5ce	; 0x5ce <__bad_interrupt>
      64:	0c 94 e7 02 	jmp	0x5ce	; 0x5ce <__bad_interrupt>
      68:	6b 14       	cp	r6, r11
      6a:	93 14       	cp	r9, r3
      6c:	bd 14       	cp	r11, r13
      6e:	e8 14       	cp	r14, r8
      70:	12 15       	cp	r17, r2
      72:	3b 15       	cp	r19, r11
      74:	63 15       	cp	r22, r3
      76:	8c 15       	cp	r24, r12
      78:	04 16       	cp	r0, r20
      7a:	2f 16       	cp	r2, r31
      7c:	8f 1a       	sub	r8, r31
      7e:	9a 1a       	sub	r9, r26
      80:	a8 1a       	sub	r10, r24
      82:	ae 1a       	sub	r10, r30
      84:	b5 1a       	sub	r11, r21
      86:	bc 1a       	sub	r11, r28
      88:	ca 1a       	sub	r12, r26
      8a:	ea 1a       	sub	r14, r26
      8c:	f1 1a       	sub	r15, r17
      8e:	f8 1a       	sub	r15, r24
      90:	ff 1a       	sub	r15, r31
      92:	06 1b       	sub	r16, r22
      94:	0d 1b       	sub	r16, r29
      96:	14 1b       	sub	r17, r20
      98:	1b 1b       	sub	r17, r27
      9a:	08 4a       	sbci	r16, 0xA8	; 168
      9c:	d7 3b       	cpi	r29, 0xB7	; 183
      9e:	3b ce       	rjmp	.-906    	; 0xfffffd16 <__eeprom_end+0xff7efd16>
      a0:	01 6e       	ori	r16, 0xE1	; 225
      a2:	84 bc       	out	0x24, r8	; 36
      a4:	bf fd       	.word	0xfdbf	; ????
      a6:	c1 2f       	mov	r28, r17
      a8:	3d 6c       	ori	r19, 0xCD	; 205
      aa:	74 31       	cpi	r23, 0x14	; 20
      ac:	9a bd       	out	0x2a, r25	; 42
      ae:	56 83       	std	Z+6, r21	; 0x06
      b0:	3d da       	rcall	.-2950   	; 0xfffff52c <__eeprom_end+0xff7ef52c>
      b2:	3d 00       	.word	0x003d	; ????
      b4:	c7 7f       	andi	r28, 0xF7	; 247
      b6:	11 be       	out	0x31, r1	; 49
      b8:	d9 e4       	ldi	r29, 0x49	; 73
      ba:	bb 4c       	sbci	r27, 0xCB	; 203
      bc:	3e 91       	ld	r19, -X
      be:	6b aa       	std	Y+51, r6	; 0x33
      c0:	aa be       	out	0x3a, r10	; 58
      c2:	00 00       	nop
      c4:	00 80       	ld	r0, Z
      c6:	3f 05       	cpc	r19, r15
      c8:	a8 4c       	sbci	r26, 0xC8	; 200
      ca:	cd b2       	in	r12, 0x1d	; 29
      cc:	d4 4e       	sbci	r29, 0xE4	; 228
      ce:	b9 38       	cpi	r27, 0x89	; 137
      d0:	36 a9       	ldd	r19, Z+54	; 0x36
      d2:	02 0c       	add	r0, r2
      d4:	50 b9       	out	0x00, r21	; 0
      d6:	91 86       	std	Z+9, r9	; 0x09
      d8:	88 08       	sbc	r8, r8
      da:	3c a6       	std	Y+44, r3	; 0x2c
      dc:	aa aa       	std	Y+50, r10	; 0x32
      de:	2a be       	out	0x3a, r2	; 58
      e0:	00 00       	nop
      e2:	00 80       	ld	r0, Z
      e4:	3f 08       	sbc	r3, r15
      e6:	00 00       	nop
      e8:	00 be       	out	0x30, r0	; 48
      ea:	92 24       	eor	r9, r2
      ec:	49 12       	cpse	r4, r25
      ee:	3e ab       	std	Y+54, r19	; 0x36
      f0:	aa aa       	std	Y+50, r10	; 0x32
      f2:	2a be       	out	0x3a, r2	; 58
      f4:	cd cc       	rjmp	.-1638   	; 0xfffffa90 <__eeprom_end+0xff7efa90>
      f6:	cc 4c       	sbci	r28, 0xCC	; 204
      f8:	3e 00       	.word	0x003e	; ????
      fa:	00 00       	nop
      fc:	80 be       	out	0x30, r8	; 48
      fe:	ab aa       	std	Y+51, r10	; 0x33
     100:	aa aa       	std	Y+50, r10	; 0x32
     102:	3e 00       	.word	0x003e	; ????
     104:	00 00       	nop
     106:	00 bf       	out	0x30, r16	; 48
     108:	00 00       	nop
     10a:	00 80       	ld	r0, Z
     10c:	3f 00       	.word	0x003f	; ????
     10e:	00 00       	nop
     110:	00 00       	nop
     112:	08 41       	sbci	r16, 0x18	; 24
     114:	78 d3       	rcall	.+1776   	; 0x806 <_ZN7Display9drawPixelEhhh+0x5a>
     116:	bb 43       	sbci	r27, 0x3B	; 59
     118:	87 d1       	rcall	.+782    	; 0x428 <_ZL7font5x8+0x186>
     11a:	13 3d       	cpi	r17, 0xD3	; 211
     11c:	19 0e       	add	r1, r25
     11e:	3c c3       	rjmp	.+1656   	; 0x798 <_ZN7Display9sendFrameEv+0x72>
     120:	bd 42       	sbci	r27, 0x2D	; 45
     122:	82 ad       	ldd	r24, Z+58	; 0x3a
     124:	2b 3e       	cpi	r18, 0xEB	; 235
     126:	68 ec       	ldi	r22, 0xC8	; 200
     128:	82 76       	andi	r24, 0x62	; 98
     12a:	be d9       	rcall	.-3204   	; 0xfffff4a8 <__eeprom_end+0xff7ef4a8>
     12c:	8f e1       	ldi	r24, 0x1F	; 31
     12e:	a9 3e       	cpi	r26, 0xE9	; 233
     130:	4c 80       	ldd	r4, Y+4	; 0x04
     132:	ef ff       	.word	0xffef	; ????
     134:	be 01       	movw	r22, r28
     136:	c4 ff       	sbrs	r28, 4
     138:	7f 3f       	cpi	r23, 0xFF	; 255
     13a:	00 00       	nop
     13c:	00 00       	nop
     13e:	00 06       	cpc	r0, r16
     140:	64 ec       	ldi	r22, 0xC4	; 196
     142:	1b 3c       	cpi	r17, 0xCB	; 203
     144:	04 bc       	out	0x24, r0	; 36
     146:	16 3e       	cpi	r17, 0xE6	; 230
     148:	3b e5       	ldi	r19, 0x5B	; 91
     14a:	b9 3c       	cpi	r27, 0xC9	; 201
     14c:	c9 3c       	cpi	r28, 0xC9	; 201
     14e:	37 c2       	rjmp	.+1134   	; 0x5be <__do_global_ctors+0xe>
     150:	9e 5a       	subi	r25, 0xAE	; 174
     152:	3d 66       	ori	r19, 0x6D	; 109
     154:	04 98       	cbi	0x00, 4	; 0
     156:	08 3e       	cpi	r16, 0xE8	; 232
     158:	ea 69       	ori	r30, 0x9A	; 154
     15a:	aa aa       	std	Y+50, r10	; 0x32
     15c:	3e 00       	.word	0x003e	; ????
     15e:	00 00       	nop
     160:	80 3f       	cpi	r24, 0xF0	; 240

00000162 <__trampolines_end>:
     162:	00 e0       	ldi	r16, 0x00	; 0
     164:	f8 fc       	.word	0xfcf8	; ????
     166:	fe 1e       	adc	r15, r30
     168:	07 07       	cpc	r16, r23
     16a:	07 07       	cpc	r16, r23
     16c:	1e fe       	.word	0xfe1e	; ????
     16e:	fc f8       	.word	0xf8fc	; ????
     170:	f0 00       	.word	0x00f0	; ????
     172:	00 07       	cpc	r16, r16
     174:	0f 3f       	cpi	r16, 0xFF	; 255
     176:	3f 7c       	andi	r19, 0xCF	; 207
     178:	70 70       	andi	r23, 0x00	; 0
     17a:	70 70       	andi	r23, 0x00	; 0
     17c:	7c 3f       	cpi	r23, 0xFC	; 252
     17e:	1f 1f       	adc	r17, r31
     180:	07 00       	.word	0x0007	; ????
     182:	00 00       	nop
     184:	00 06       	cpc	r0, r16
     186:	07 07       	cpc	r16, r23
     188:	ff ff       	.word	0xffff	; ????
     18a:	ff ff       	.word	0xffff	; ????
	...
     198:	7f 7f       	andi	r23, 0xFF	; 255
     19a:	7f 7f       	andi	r23, 0xFF	; 255
     19c:	00 00       	nop
     19e:	00 00       	nop
     1a0:	00 00       	nop
     1a2:	00 38       	cpi	r16, 0x80	; 128
     1a4:	3c 3e       	cpi	r19, 0xEC	; 236
     1a6:	3e 0f       	add	r19, r30
     1a8:	07 07       	cpc	r16, r23
     1aa:	07 cf       	rjmp	.-498    	; 0xffffffba <__eeprom_end+0xff7effba>
     1ac:	ff fe       	.word	0xfeff	; ????
     1ae:	fe 38       	cpi	r31, 0x8E	; 142
     1b0:	00 00       	nop
     1b2:	00 40       	sbci	r16, 0x00	; 0
     1b4:	40 60       	ori	r20, 0x00	; 0
     1b6:	70 78       	andi	r23, 0x80	; 128
     1b8:	7c 7e       	andi	r23, 0xEC	; 236
     1ba:	7f 77       	andi	r23, 0x7F	; 127
     1bc:	73 71       	andi	r23, 0x13	; 19
     1be:	70 70       	andi	r23, 0x00	; 0
     1c0:	00 00       	nop
     1c2:	00 18       	sub	r0, r0
     1c4:	1c 1e       	adc	r1, r28
     1c6:	1e 0f       	add	r17, r30
     1c8:	c7 c7       	rjmp	.+3982   	; 0x1158 <_ZN7Display6analogEhhhh+0x420>
     1ca:	e7 ff       	sbrs	r30, 7
     1cc:	fe be       	out	0x3e, r15	; 62
     1ce:	9c 00       	.word	0x009c	; ????
     1d0:	00 00       	nop
     1d2:	00 0c       	add	r0, r0
     1d4:	1c 3c       	cpi	r17, 0xCC	; 204
     1d6:	3c 78       	andi	r19, 0x8C	; 140
     1d8:	70 70       	andi	r23, 0x00	; 0
     1da:	70 79       	andi	r23, 0x90	; 144
     1dc:	7f 3f       	cpi	r23, 0xFF	; 255
     1de:	1f 0f       	add	r17, r31
     1e0:	00 00       	nop
     1e2:	00 00       	nop
     1e4:	80 c0       	rjmp	.+256    	; 0x2e6 <_ZL7font5x8+0x44>
     1e6:	e0 70       	andi	r30, 0x00	; 0
     1e8:	38 1c       	adc	r3, r8
     1ea:	1e ff       	.word	0xff1e	; ????
     1ec:	ff ff       	.word	0xffff	; ????
     1ee:	ff 00       	.word	0x00ff	; ????
     1f0:	00 00       	nop
     1f2:	06 07       	cpc	r16, r22
     1f4:	07 07       	cpc	r16, r23
     1f6:	06 06       	cpc	r0, r22
     1f8:	06 06       	cpc	r0, r22
     1fa:	06 7f       	andi	r16, 0xF6	; 246
     1fc:	7f 7f       	andi	r23, 0xFF	; 255
     1fe:	7f 06       	cpc	r7, r31
     200:	06 00       	.word	0x0006	; ????
     202:	00 00       	nop
     204:	00 00       	nop
     206:	f0 ff       	sbrs	r31, 0
     208:	ff ff       	.word	0xffff	; ????
     20a:	e7 e7       	ldi	r30, 0x77	; 119
     20c:	e7 e7       	ldi	r30, 0x77	; 119
     20e:	c7 87       	std	Z+15, r28	; 0x0f
     210:	00 00       	nop
     212:	00 00       	nop
     214:	38 78       	andi	r19, 0x88	; 136
     216:	71 70       	andi	r23, 0x01	; 1
     218:	70 70       	andi	r23, 0x00	; 0
     21a:	70 70       	andi	r23, 0x00	; 0
     21c:	39 3f       	cpi	r19, 0xF9	; 249
     21e:	3f 1f       	adc	r19, r31
     220:	0f 00       	.word	0x000f	; ????
     222:	00 80       	ld	r0, Z
     224:	e0 f0       	brcs	.+56     	; 0x25e <__trampolines_end+0xfc>
     226:	f8 fc       	.word	0xfcf8	; ????
     228:	7f 7f       	andi	r23, 0xFF	; 255
     22a:	6f 67       	ori	r22, 0x7F	; 127
     22c:	e1 e1       	ldi	r30, 0x11	; 17
     22e:	c0 80       	ld	r12, Z
     230:	00 00       	nop
     232:	00 0f       	add	r16, r16
     234:	1f 3f       	cpi	r17, 0xFF	; 255
     236:	3f 78       	andi	r19, 0x8F	; 143
     238:	70 70       	andi	r23, 0x00	; 0
     23a:	70 70       	andi	r23, 0x00	; 0
     23c:	78 3f       	cpi	r23, 0xF8	; 248
     23e:	3f 1f       	adc	r19, r31
     240:	0f 00       	.word	0x000f	; ????
     242:	00 07       	cpc	r16, r16
     244:	07 07       	cpc	r16, r23
     246:	07 07       	cpc	r16, r23
     248:	c7 e7       	ldi	r28, 0x77	; 119
     24a:	f7 ff       	sbrs	r31, 7
     24c:	7f 3f       	cpi	r23, 0xFF	; 255
     24e:	1f 07       	cpc	r17, r31
     250:	03 01       	movw	r0, r6
     252:	00 20       	and	r0, r0
     254:	38 7c       	andi	r19, 0xC8	; 200
     256:	7e 3f       	cpi	r23, 0xFE	; 254
     258:	0f 07       	cpc	r16, r31
     25a:	03 00       	.word	0x0003	; ????
	...
     264:	00 1c       	adc	r0, r0
     266:	be fe       	.word	0xfebe	; ????
     268:	ff e7       	ldi	r31, 0x7F	; 127
     26a:	c3 c3       	rjmp	.+1926   	; 0x9f2 <_ZN7Display13draw_triangleEhhhff+0x8c>
     26c:	e7 ff       	sbrs	r30, 7
     26e:	fe be       	out	0x3e, r15	; 62
     270:	1c 00       	.word	0x001c	; ????
     272:	00 00       	nop
     274:	0e 3f       	cpi	r16, 0xFE	; 254
     276:	3f 7f       	andi	r19, 0xFF	; 255
     278:	71 60       	ori	r23, 0x01	; 1
     27a:	60 60       	ori	r22, 0x00	; 0
     27c:	71 7f       	andi	r23, 0xF1	; 241
     27e:	3f 3f       	cpi	r19, 0xFF	; 255
     280:	0f 00       	.word	0x000f	; ????
     282:	00 78       	andi	r16, 0x80	; 128
     284:	fc fe       	.word	0xfefc	; ????
     286:	fe 8f       	std	Y+30, r31	; 0x1e
     288:	07 07       	cpc	r16, r23
     28a:	07 07       	cpc	r16, r23
     28c:	8f fe       	.word	0xfe8f	; ????
     28e:	fe fc       	.word	0xfcfe	; ????
     290:	f8 00       	.word	0x00f8	; ????
     292:	00 00       	nop
     294:	00 01       	movw	r0, r0
     296:	43 43       	sbci	r20, 0x33	; 51
     298:	73 7b       	andi	r23, 0xB3	; 179
     29a:	7f 7f       	andi	r23, 0xFF	; 255
     29c:	1f 0f       	add	r17, r31
     29e:	07 03       	mulsu	r16, r23
	...

000002a2 <_ZL7font5x8>:
     2a2:	00 00 5f 00 00 00 07 00 07 00 14 7f 14 7f 14 24     .._............$
     2b2:	2a 7f 2a 12 23 13 08 64 62 36 49 55 22 50 00 05     *.*.#..db6IU"P..
     2c2:	03 00 00 00 1c 22 41 00 00 41 22 1c 00 14 08 3e     ....."A..A"....>
     2d2:	08 14 08 08 3e 08 08 00 50 30 00 00 08 08 08 08     ....>...P0......
     2e2:	08 00 60 60 00 00 20 10 08 04 02 3e 51 49 45 3e     ..``.. ....>QIE>
     2f2:	00 42 7f 40 00 42 61 51 49 46 21 41 45 4b 31 18     .B.@.BaQIF!AEK1.
     302:	14 12 7f 10 27 45 45 45 39 3c 4a 49 49 30 01 71     ....'EEE9<JII0.q
     312:	09 05 03 36 49 49 49 36 06 49 49 29 1e 00 36 36     ...6III6.II)..66
     322:	00 00 00 56 36 00 00 08 14 22 41 00 14 14 14 14     ...V6...."A.....
     332:	14 00 41 22 14 08 02 01 51 09 06 32 49 79 41 3e     ..A"....Q..2IyA>
     342:	7e 11 11 11 7e 7f 49 49 49 36 3e 41 41 41 22 7f     ~...~.III6>AAA".
     352:	41 41 22 1c 7f 49 49 49 41 7f 09 09 09 01 3e 41     AA"..IIIA.....>A
     362:	49 49 7a 7f 08 08 08 7f 00 41 7f 41 00 20 40 41     IIz......A.A. @A
     372:	3f 01 7f 08 14 22 41 7f 40 40 40 40 7f 02 0c 02     ?...."A.@@@@....
     382:	7f 7f 04 08 10 7f 3e 41 41 41 3e 7f 09 09 09 06     ......>AAA>.....
     392:	3e 41 51 21 5e 7f 09 19 29 46 46 49 49 49 31 01     >AQ!^...)FFIII1.
     3a2:	01 7f 01 01 3f 40 40 40 3f 1f 20 40 20 1f 3f 40     ....?@@@?. @ .?@
     3b2:	38 40 3f 63 14 08 14 63 07 08 70 08 07 61 51 49     8@?c...c..p..aQI
     3c2:	45 43 00 7f 41 41 00 02 04 08 10 20 00 41 41 7f     EC..AA..... .AA.
     3d2:	00 04 02 01 02 04 40 40 40 40 40 00 01 02 04 00     ......@@@@@.....
     3e2:	20 54 54 54 78 7f 48 44 44 38 38 44 44 44 20 38      TTTx.HDD88DDD 8
     3f2:	44 44 48 7f 38 54 54 54 18 08 7e 09 01 02 0c 52     DDH.8TTT..~....R
     402:	52 52 3e 7f 08 04 04 78 00 44 7d 40 00 20 40 44     RR>....x.D}@. @D
     412:	3d 00 7f 10 28 44 00 00 41 7f 40 00 7c 04 18 04     =...(D..A.@.|...
     422:	78 7c 08 04 04 78 38 44 44 44 38 7c 14 14 14 08     x|...x8DDD8|....
     432:	08 14 14 18 7c 7c 08 04 04 08 48 54 54 54 20 04     ....||....HTTT .
     442:	3f 44 40 20 3c 40 40 20 7c 1c 20 40 20 1c 3c 40     ?D@ <@@ |. @ .<@
     452:	30 40 3c 44 28 10 28 44 0c 50 50 50 3c 44 64 54     0@<D(.(D.PPP<DdT
     462:	4c 44 00 08 36 41 00 00 00 7f 00 00 00 41 36 08     LD..6A.......A6.
     472:	00 10 08 08 10 08                                   ......

00000478 <__c.2161>:
     478:	6e 61 6e 00                                         nan.

0000047c <__c.2159>:
     47c:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     48c:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     49c:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     4ac:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     4bc:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     4cc:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     4dc:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     4ec:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     4fc:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     50c:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     51c:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     52c:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     53c:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     54c:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     55c:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     56c:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

0000057a <__ctors_start>:
     57a:	fd 1c       	adc	r15, r13

0000057c <__ctors_end>:
     57c:	26 1d       	adc	r18, r6

0000057e <__dtors_end>:
     57e:	11 24       	eor	r1, r1
     580:	1f be       	out	0x3f, r1	; 63
     582:	cf ef       	ldi	r28, 0xFF	; 255
     584:	d8 e0       	ldi	r29, 0x08	; 8
     586:	de bf       	out	0x3e, r29	; 62
     588:	cd bf       	out	0x3d, r28	; 61

0000058a <__do_copy_data>:
     58a:	12 e0       	ldi	r17, 0x02	; 2
     58c:	a0 e0       	ldi	r26, 0x00	; 0
     58e:	b1 e0       	ldi	r27, 0x01	; 1
     590:	e8 e3       	ldi	r30, 0x38	; 56
     592:	f9 e5       	ldi	r31, 0x59	; 89
     594:	02 c0       	rjmp	.+4      	; 0x59a <__do_copy_data+0x10>
     596:	05 90       	lpm	r0, Z+
     598:	0d 92       	st	X+, r0
     59a:	a2 3f       	cpi	r26, 0xF2	; 242
     59c:	b1 07       	cpc	r27, r17
     59e:	d9 f7       	brne	.-10     	; 0x596 <__do_copy_data+0xc>

000005a0 <__do_clear_bss>:
     5a0:	27 e0       	ldi	r18, 0x07	; 7
     5a2:	a2 ef       	ldi	r26, 0xF2	; 242
     5a4:	b2 e0       	ldi	r27, 0x02	; 2
     5a6:	01 c0       	rjmp	.+2      	; 0x5aa <.do_clear_bss_start>

000005a8 <.do_clear_bss_loop>:
     5a8:	1d 92       	st	X+, r1

000005aa <.do_clear_bss_start>:
     5aa:	ae 37       	cpi	r26, 0x7E	; 126
     5ac:	b2 07       	cpc	r27, r18
     5ae:	e1 f7       	brne	.-8      	; 0x5a8 <.do_clear_bss_loop>

000005b0 <__do_global_ctors>:
     5b0:	15 e0       	ldi	r17, 0x05	; 5
     5b2:	cc e7       	ldi	r28, 0x7C	; 124
     5b4:	d5 e0       	ldi	r29, 0x05	; 5
     5b6:	04 c0       	rjmp	.+8      	; 0x5c0 <__do_global_ctors+0x10>
     5b8:	22 97       	sbiw	r28, 0x02	; 2
     5ba:	fe 01       	movw	r30, r28
     5bc:	0e 94 b4 2a 	call	0x5568	; 0x5568 <__tablejump__>
     5c0:	ca 37       	cpi	r28, 0x7A	; 122
     5c2:	d1 07       	cpc	r29, r17
     5c4:	c9 f7       	brne	.-14     	; 0x5b8 <__do_global_ctors+0x8>
     5c6:	0e 94 f0 1c 	call	0x39e0	; 0x39e0 <main>
     5ca:	0c 94 8f 2c 	jmp	0x591e	; 0x591e <__do_global_dtors>

000005ce <__bad_interrupt>:
     5ce:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000005d2 <_ZN7DisplayD1Ev>:
	//}
	InitializeDisplay();
} //Display

// default destructor
Display::~Display()
     5d2:	9c 5f       	subi	r25, 0xFC	; 252
     5d4:	0e 94 4f 1d 	call	0x3a9e	; 0x3a9e <_ZN3I2CD1Ev>
     5d8:	08 95       	ret

000005da <_ZN7Display10clearFrameEv>:
{
} //~Display

void Display::clearFrame(){
     5da:	fc 01       	movw	r30, r24
	for(uint16_t i=0;i<1024;i++){
     5dc:	20 e0       	ldi	r18, 0x00	; 0
     5de:	30 e0       	ldi	r19, 0x00	; 0
		Displayframe[i]=0;
     5e0:	11 92       	st	Z+, r1
Display::~Display()
{
} //~Display

void Display::clearFrame(){
	for(uint16_t i=0;i<1024;i++){
     5e2:	2f 5f       	subi	r18, 0xFF	; 255
     5e4:	3f 4f       	sbci	r19, 0xFF	; 255
     5e6:	21 15       	cp	r18, r1
     5e8:	84 e0       	ldi	r24, 0x04	; 4
     5ea:	38 07       	cpc	r19, r24
     5ec:	c9 f7       	brne	.-14     	; 0x5e0 <_ZN7Display10clearFrameEv+0x6>
		Displayframe[i]=0;
	}
}
     5ee:	08 95       	ret

000005f0 <_ZN7Display15ssd1306_commandEh>:

void Display::ssd1306_command(uint8_t c){
     5f0:	1f 93       	push	r17
     5f2:	cf 93       	push	r28
     5f4:	df 93       	push	r29
     5f6:	16 2f       	mov	r17, r22
	i2c.twi_start();
     5f8:	ec 01       	movw	r28, r24
     5fa:	dc 5f       	subi	r29, 0xFC	; 252
     5fc:	ce 01       	movw	r24, r28
     5fe:	0e 94 50 1d 	call	0x3aa0	; 0x3aa0 <_ZN3I2C9twi_startEv>
	i2c.twi_write(OLEDADRESSE);
     602:	68 e7       	ldi	r22, 0x78	; 120
     604:	ce 01       	movw	r24, r28
     606:	0e 94 58 1d 	call	0x3ab0	; 0x3ab0 <_ZN3I2C9twi_writeEh>
	i2c.twi_write(OLEDBEFEHL);
     60a:	60 e0       	ldi	r22, 0x00	; 0
     60c:	ce 01       	movw	r24, r28
     60e:	0e 94 58 1d 	call	0x3ab0	; 0x3ab0 <_ZN3I2C9twi_writeEh>
	i2c.twi_write(c);
     612:	61 2f       	mov	r22, r17
     614:	ce 01       	movw	r24, r28
     616:	0e 94 58 1d 	call	0x3ab0	; 0x3ab0 <_ZN3I2C9twi_writeEh>
	i2c.twi_stop();
     61a:	ce 01       	movw	r24, r28
     61c:	0e 94 54 1d 	call	0x3aa8	; 0x3aa8 <_ZN3I2C8twi_stopEv>
}
     620:	df 91       	pop	r29
     622:	cf 91       	pop	r28
     624:	1f 91       	pop	r17
     626:	08 95       	ret

00000628 <_ZN7Display17InitializeDisplayEv>:

void Display::InitializeDisplay()
{
     628:	cf 93       	push	r28
     62a:	df 93       	push	r29
     62c:	ec 01       	movw	r28, r24
	// Init sequence for 128x64 OLED module
	ssd1306_command(SSD1306_DISPLAYOFF);                    // 0xAE
     62e:	6e ea       	ldi	r22, 0xAE	; 174
     630:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <_ZN7Display15ssd1306_commandEh>

	ssd1306_command(SSD1306_SETDISPLAYCLOCKDIV);            // 0xD5
     634:	65 ed       	ldi	r22, 0xD5	; 213
     636:	ce 01       	movw	r24, r28
     638:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <_ZN7Display15ssd1306_commandEh>
	ssd1306_command(0x80);                 // the suggested ratio 0x80
     63c:	60 e8       	ldi	r22, 0x80	; 128
     63e:	ce 01       	movw	r24, r28
     640:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <_ZN7Display15ssd1306_commandEh>

	ssd1306_command(SSD1306_SETMULTIPLEX);                  // 0xA8
     644:	68 ea       	ldi	r22, 0xA8	; 168
     646:	ce 01       	movw	r24, r28
     648:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <_ZN7Display15ssd1306_commandEh>
	ssd1306_command(0x3F);
     64c:	6f e3       	ldi	r22, 0x3F	; 63
     64e:	ce 01       	movw	r24, r28
     650:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <_ZN7Display15ssd1306_commandEh>

	ssd1306_command(SSD1306_SETDISPLAYOFFSET);              // 0xD3
     654:	63 ed       	ldi	r22, 0xD3	; 211
     656:	ce 01       	movw	r24, r28
     658:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <_ZN7Display15ssd1306_commandEh>
	ssd1306_command(0x0);                                   // no offset
     65c:	60 e0       	ldi	r22, 0x00	; 0
     65e:	ce 01       	movw	r24, r28
     660:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <_ZN7Display15ssd1306_commandEh>

	ssd1306_command(SSD1306_SETSTARTLINE);// | 0x0);        // line #0
     664:	60 e4       	ldi	r22, 0x40	; 64
     666:	ce 01       	movw	r24, r28
     668:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <_ZN7Display15ssd1306_commandEh>

	ssd1306_command(SSD1306_CHARGEPUMP);                    // 0x8D
     66c:	6d e8       	ldi	r22, 0x8D	; 141
     66e:	ce 01       	movw	r24, r28
     670:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <_ZN7Display15ssd1306_commandEh>
	ssd1306_command(0x14);  // using internal VCC
     674:	64 e1       	ldi	r22, 0x14	; 20
     676:	ce 01       	movw	r24, r28
     678:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <_ZN7Display15ssd1306_commandEh>

	ssd1306_command(SSD1306_MEMORYMODE);                    // 0x20
     67c:	60 e2       	ldi	r22, 0x20	; 32
     67e:	ce 01       	movw	r24, r28
     680:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <_ZN7Display15ssd1306_commandEh>
	ssd1306_command(0x00);          // 0x00 horizontal addressing
     684:	60 e0       	ldi	r22, 0x00	; 0
     686:	ce 01       	movw	r24, r28
     688:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <_ZN7Display15ssd1306_commandEh>

	ssd1306_command(SSD1306_SEGREMAP | 0x1); // rotate screen 180
     68c:	61 ea       	ldi	r22, 0xA1	; 161
     68e:	ce 01       	movw	r24, r28
     690:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <_ZN7Display15ssd1306_commandEh>

	ssd1306_command(SSD1306_COMSCANDEC); // rotate screen 180
     694:	68 ec       	ldi	r22, 0xC8	; 200
     696:	ce 01       	movw	r24, r28
     698:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <_ZN7Display15ssd1306_commandEh>

	ssd1306_command(SSD1306_SETCOMPINS);                    // 0xDA
     69c:	6a ed       	ldi	r22, 0xDA	; 218
     69e:	ce 01       	movw	r24, r28
     6a0:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <_ZN7Display15ssd1306_commandEh>
	ssd1306_command(0x12);
     6a4:	62 e1       	ldi	r22, 0x12	; 18
     6a6:	ce 01       	movw	r24, r28
     6a8:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <_ZN7Display15ssd1306_commandEh>

	ssd1306_command(SSD1306_SETCONTRAST);                   // 0x81
     6ac:	61 e8       	ldi	r22, 0x81	; 129
     6ae:	ce 01       	movw	r24, r28
     6b0:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <_ZN7Display15ssd1306_commandEh>
	ssd1306_command(0xCF);
     6b4:	6f ec       	ldi	r22, 0xCF	; 207
     6b6:	ce 01       	movw	r24, r28
     6b8:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <_ZN7Display15ssd1306_commandEh>

	ssd1306_command(SSD1306_SETPRECHARGE);                  // 0xd9
     6bc:	69 ed       	ldi	r22, 0xD9	; 217
     6be:	ce 01       	movw	r24, r28
     6c0:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <_ZN7Display15ssd1306_commandEh>
	ssd1306_command(0xF1);
     6c4:	61 ef       	ldi	r22, 0xF1	; 241
     6c6:	ce 01       	movw	r24, r28
     6c8:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <_ZN7Display15ssd1306_commandEh>

	ssd1306_command(SSD1306_SETVCOMDETECT);                 // 0xDB
     6cc:	6b ed       	ldi	r22, 0xDB	; 219
     6ce:	ce 01       	movw	r24, r28
     6d0:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <_ZN7Display15ssd1306_commandEh>
	ssd1306_command(0x40);
     6d4:	60 e4       	ldi	r22, 0x40	; 64
     6d6:	ce 01       	movw	r24, r28
     6d8:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <_ZN7Display15ssd1306_commandEh>

	ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
     6dc:	64 ea       	ldi	r22, 0xA4	; 164
     6de:	ce 01       	movw	r24, r28
     6e0:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <_ZN7Display15ssd1306_commandEh>

	ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
     6e4:	66 ea       	ldi	r22, 0xA6	; 166
     6e6:	ce 01       	movw	r24, r28
     6e8:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <_ZN7Display15ssd1306_commandEh>

	ssd1306_command(SSD1306_DISPLAYON);                     //switch on OLED
     6ec:	6f ea       	ldi	r22, 0xAF	; 175
     6ee:	ce 01       	movw	r24, r28
     6f0:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <_ZN7Display15ssd1306_commandEh>
}
     6f4:	df 91       	pop	r29
     6f6:	cf 91       	pop	r28
     6f8:	08 95       	ret

000006fa <_ZN7DisplayC1Ev>:


#include "Display.h"

// default constructor
Display::Display()
     6fa:	cf 93       	push	r28
     6fc:	df 93       	push	r29
     6fe:	ec 01       	movw	r28, r24
     700:	9c 5f       	subi	r25, 0xFC	; 252
     702:	0e 94 4b 1d 	call	0x3a96	; 0x3a96 <_ZN3I2CC1Ev>
{
	//for (uint8_t i=0;i<1024;i++)
	//{
		//Displayframe[i]=0;
	//}
	InitializeDisplay();
     706:	ce 01       	movw	r24, r28
     708:	0e 94 14 03 	call	0x628	; 0x628 <_ZN7Display17InitializeDisplayEv>
} //Display
     70c:	df 91       	pop	r29
     70e:	cf 91       	pop	r28
     710:	08 95       	ret

00000712 <_ZN7Display6invertEh>:

	ssd1306_command(SSD1306_DISPLAYON);                     //switch on OLED
}

void Display::invert(uint8_t inverted) {
	if (inverted) {
     712:	66 23       	and	r22, r22
     714:	21 f0       	breq	.+8      	; 0x71e <_ZN7Display6invertEh+0xc>
		ssd1306_command(SSD1306_INVERTDISPLAY);
     716:	67 ea       	ldi	r22, 0xA7	; 167
     718:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <_ZN7Display15ssd1306_commandEh>
     71c:	08 95       	ret
	}
	else {
		ssd1306_command(SSD1306_NORMALDISPLAY);
     71e:	66 ea       	ldi	r22, 0xA6	; 166
     720:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <_ZN7Display15ssd1306_commandEh>
     724:	08 95       	ret

00000726 <_ZN7Display9sendFrameEv>:
	}
}

void Display::sendFrame(){
     726:	ef 92       	push	r14
     728:	ff 92       	push	r15
     72a:	0f 93       	push	r16
     72c:	1f 93       	push	r17
     72e:	cf 93       	push	r28
     730:	df 93       	push	r29
     732:	8c 01       	movw	r16, r24
	//Cursor an den Anfang setzen
	ssd1306_command(SSD1306_COLUMNADDR);
     734:	61 e2       	ldi	r22, 0x21	; 33
     736:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <_ZN7Display15ssd1306_commandEh>
	ssd1306_command(0x00);
     73a:	60 e0       	ldi	r22, 0x00	; 0
     73c:	c8 01       	movw	r24, r16
     73e:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <_ZN7Display15ssd1306_commandEh>
	ssd1306_command(0x7F);
     742:	6f e7       	ldi	r22, 0x7F	; 127
     744:	c8 01       	movw	r24, r16
     746:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <_ZN7Display15ssd1306_commandEh>

	ssd1306_command(SSD1306_PAGEADDR);
     74a:	62 e2       	ldi	r22, 0x22	; 34
     74c:	c8 01       	movw	r24, r16
     74e:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <_ZN7Display15ssd1306_commandEh>
	ssd1306_command(0x00);
     752:	60 e0       	ldi	r22, 0x00	; 0
     754:	c8 01       	movw	r24, r16
     756:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <_ZN7Display15ssd1306_commandEh>
	ssd1306_command(0x07);
     75a:	67 e0       	ldi	r22, 0x07	; 7
     75c:	c8 01       	movw	r24, r16
     75e:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <_ZN7Display15ssd1306_commandEh>

	i2c.twi_start();
     762:	78 01       	movw	r14, r16
     764:	8c ef       	ldi	r24, 0xFC	; 252
     766:	f8 1a       	sub	r15, r24
     768:	c7 01       	movw	r24, r14
     76a:	0e 94 50 1d 	call	0x3aa0	; 0x3aa0 <_ZN3I2C9twi_startEv>
	i2c.twi_write(OLEDADRESSE);
     76e:	68 e7       	ldi	r22, 0x78	; 120
     770:	c7 01       	movw	r24, r14
     772:	0e 94 58 1d 	call	0x3ab0	; 0x3ab0 <_ZN3I2C9twi_writeEh>
	i2c.twi_write(OLEDDATA);
     776:	60 e4       	ldi	r22, 0x40	; 64
     778:	c7 01       	movw	r24, r14
     77a:	0e 94 58 1d 	call	0x3ab0	; 0x3ab0 <_ZN3I2C9twi_writeEh>
	
	for(uint16_t i=0; i<1024;i++){
     77e:	c0 e0       	ldi	r28, 0x00	; 0
     780:	d0 e0       	ldi	r29, 0x00	; 0
		i2c.twi_write(Displayframe[i]);
     782:	f8 01       	movw	r30, r16
     784:	61 91       	ld	r22, Z+
     786:	8f 01       	movw	r16, r30
     788:	c7 01       	movw	r24, r14
     78a:	0e 94 58 1d 	call	0x3ab0	; 0x3ab0 <_ZN3I2C9twi_writeEh>

	i2c.twi_start();
	i2c.twi_write(OLEDADRESSE);
	i2c.twi_write(OLEDDATA);
	
	for(uint16_t i=0; i<1024;i++){
     78e:	21 96       	adiw	r28, 0x01	; 1
     790:	c1 15       	cp	r28, r1
     792:	f4 e0       	ldi	r31, 0x04	; 4
     794:	df 07       	cpc	r29, r31
     796:	a9 f7       	brne	.-22     	; 0x782 <_ZN7Display9sendFrameEv+0x5c>
		i2c.twi_write(Displayframe[i]);
	}
	i2c.twi_stop();
     798:	c7 01       	movw	r24, r14
     79a:	0e 94 54 1d 	call	0x3aa8	; 0x3aa8 <_ZN3I2C8twi_stopEv>
}
     79e:	df 91       	pop	r29
     7a0:	cf 91       	pop	r28
     7a2:	1f 91       	pop	r17
     7a4:	0f 91       	pop	r16
     7a6:	ff 90       	pop	r15
     7a8:	ef 90       	pop	r14
     7aa:	08 95       	ret

000007ac <_ZN7Display9drawPixelEhhh>:

void Display::drawPixel(uint8_t pos_x, uint8_t pos_y, uint8_t erase){
	if(!(pos_x >= SSD1306_WIDTH || pos_y >= SSD1306_HEIGHT)){
     7ac:	66 23       	and	r22, r22
     7ae:	bc f1       	brlt	.+110    	; 0x81e <_ZN7Display9drawPixelEhhh+0x72>
     7b0:	40 34       	cpi	r20, 0x40	; 64
     7b2:	a8 f5       	brcc	.+106    	; 0x81e <_ZN7Display9drawPixelEhhh+0x72>
		if(!erase){
     7b4:	21 11       	cpse	r18, r1
     7b6:	19 c0       	rjmp	.+50     	; 0x7ea <_ZN7Display9drawPixelEhhh+0x3e>
			Displayframe[pos_x+(pos_y/8)*SSD1306_WIDTH] |= (1 << (pos_y&7));
     7b8:	e4 2f       	mov	r30, r20
     7ba:	e6 95       	lsr	r30
     7bc:	e6 95       	lsr	r30
     7be:	e6 95       	lsr	r30
     7c0:	20 e8       	ldi	r18, 0x80	; 128
     7c2:	e2 9f       	mul	r30, r18
     7c4:	f0 01       	movw	r30, r0
     7c6:	11 24       	eor	r1, r1
     7c8:	e6 0f       	add	r30, r22
     7ca:	f1 1d       	adc	r31, r1
     7cc:	e8 0f       	add	r30, r24
     7ce:	f9 1f       	adc	r31, r25
     7d0:	47 70       	andi	r20, 0x07	; 7
     7d2:	21 e0       	ldi	r18, 0x01	; 1
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	c9 01       	movw	r24, r18
     7d8:	02 c0       	rjmp	.+4      	; 0x7de <_ZN7Display9drawPixelEhhh+0x32>
     7da:	88 0f       	add	r24, r24
     7dc:	99 1f       	adc	r25, r25
     7de:	4a 95       	dec	r20
     7e0:	e2 f7       	brpl	.-8      	; 0x7da <_ZN7Display9drawPixelEhhh+0x2e>
     7e2:	90 81       	ld	r25, Z
     7e4:	89 2b       	or	r24, r25
     7e6:	80 83       	st	Z, r24
     7e8:	08 95       	ret
		}
		else {
			Displayframe[pos_x+(pos_y/8)*SSD1306_WIDTH] &= ~(1 << (pos_y&7));
     7ea:	e4 2f       	mov	r30, r20
     7ec:	e6 95       	lsr	r30
     7ee:	e6 95       	lsr	r30
     7f0:	e6 95       	lsr	r30
     7f2:	30 e8       	ldi	r19, 0x80	; 128
     7f4:	e3 9f       	mul	r30, r19
     7f6:	f0 01       	movw	r30, r0
     7f8:	11 24       	eor	r1, r1
     7fa:	e6 0f       	add	r30, r22
     7fc:	f1 1d       	adc	r31, r1
     7fe:	e8 0f       	add	r30, r24
     800:	f9 1f       	adc	r31, r25
     802:	47 70       	andi	r20, 0x07	; 7
     804:	81 e0       	ldi	r24, 0x01	; 1
     806:	90 e0       	ldi	r25, 0x00	; 0
     808:	9c 01       	movw	r18, r24
     80a:	02 c0       	rjmp	.+4      	; 0x810 <_ZN7Display9drawPixelEhhh+0x64>
     80c:	22 0f       	add	r18, r18
     80e:	33 1f       	adc	r19, r19
     810:	4a 95       	dec	r20
     812:	e2 f7       	brpl	.-8      	; 0x80c <_ZN7Display9drawPixelEhhh+0x60>
     814:	a9 01       	movw	r20, r18
     816:	40 95       	com	r20
     818:	80 81       	ld	r24, Z
     81a:	48 23       	and	r20, r24
     81c:	40 83       	st	Z, r20
     81e:	08 95       	ret

00000820 <_ZN7Display9draw_lineEhhhf>:
		}
	}
}

//eigene Zeichenfunktionen
void Display::draw_line(uint8_t x, uint8_t y, uint8_t length, float phi){
     820:	2f 92       	push	r2
     822:	3f 92       	push	r3
     824:	4f 92       	push	r4
     826:	5f 92       	push	r5
     828:	6f 92       	push	r6
     82a:	7f 92       	push	r7
     82c:	8f 92       	push	r8
     82e:	9f 92       	push	r9
     830:	af 92       	push	r10
     832:	bf 92       	push	r11
     834:	cf 92       	push	r12
     836:	df 92       	push	r13
     838:	ef 92       	push	r14
     83a:	ff 92       	push	r15
     83c:	0f 93       	push	r16
     83e:	1f 93       	push	r17
     840:	cf 93       	push	r28
     842:	df 93       	push	r29
     844:	cd b7       	in	r28, 0x3d	; 61
     846:	de b7       	in	r29, 0x3e	; 62
     848:	2b 97       	sbiw	r28, 0x0b	; 11
     84a:	0f b6       	in	r0, 0x3f	; 63
     84c:	f8 94       	cli
     84e:	de bf       	out	0x3e, r29	; 62
     850:	0f be       	out	0x3f, r0	; 63
     852:	cd bf       	out	0x3d, r28	; 61
     854:	1c 01       	movw	r2, r24
     856:	d6 2e       	mov	r13, r22
     858:	c4 2e       	mov	r12, r20
     85a:	29 83       	std	Y+1, r18	; 0x01
	//phi*=M_PI/180.0;
	uint8_t pos_x=0, pos_y=0;
	for (uint8_t i=0;i<length;i++)
     85c:	22 23       	and	r18, r18
     85e:	09 f4       	brne	.+2      	; 0x862 <_ZN7Display9draw_lineEhhhf+0x42>
     860:	69 c0       	rjmp	.+210    	; 0x934 <__stack+0x35>
	{
		pos_x=(uint8_t) (-i*cos(phi)+x);
     862:	c8 01       	movw	r24, r16
     864:	b7 01       	movw	r22, r14
     866:	0e 94 90 24 	call	0x4920	; 0x4920 <cos>
     86a:	2b 01       	movw	r4, r22
     86c:	3c 01       	movw	r6, r24
		pos_y=(uint8_t) (i*sin(phi)+y);
     86e:	c8 01       	movw	r24, r16
     870:	b7 01       	movw	r22, r14
     872:	0e 94 ef 26 	call	0x4dde	; 0x4dde <sin>
     876:	4b 01       	movw	r8, r22
     878:	5c 01       	movw	r10, r24
     87a:	1b 86       	std	Y+11, r1	; 0x0b
     87c:	1a 86       	std	Y+10, r1	; 0x0a
     87e:	8c 2d       	mov	r24, r12
     880:	90 e0       	ldi	r25, 0x00	; 0
     882:	a0 e0       	ldi	r26, 0x00	; 0
     884:	b0 e0       	ldi	r27, 0x00	; 0
     886:	8a 83       	std	Y+2, r24	; 0x02
     888:	9b 83       	std	Y+3, r25	; 0x03
     88a:	ac 83       	std	Y+4, r26	; 0x04
     88c:	bd 83       	std	Y+5, r27	; 0x05
void Display::draw_line(uint8_t x, uint8_t y, uint8_t length, float phi){
	//phi*=M_PI/180.0;
	uint8_t pos_x=0, pos_y=0;
	for (uint8_t i=0;i<length;i++)
	{
		pos_x=(uint8_t) (-i*cos(phi)+x);
     88e:	8d 2d       	mov	r24, r13
     890:	90 e0       	ldi	r25, 0x00	; 0
     892:	a0 e0       	ldi	r26, 0x00	; 0
     894:	b0 e0       	ldi	r27, 0x00	; 0
     896:	8e 83       	std	Y+6, r24	; 0x06
     898:	9f 83       	std	Y+7, r25	; 0x07
     89a:	a8 87       	std	Y+8, r26	; 0x08
     89c:	b9 87       	std	Y+9, r27	; 0x09
		pos_y=(uint8_t) (i*sin(phi)+y);
     89e:	aa 85       	ldd	r26, Y+10	; 0x0a
     8a0:	bb 85       	ldd	r27, Y+11	; 0x0b
     8a2:	bd 01       	movw	r22, r26
     8a4:	88 27       	eor	r24, r24
     8a6:	77 fd       	sbrc	r23, 7
     8a8:	80 95       	com	r24
     8aa:	98 2f       	mov	r25, r24
     8ac:	0e 94 2e 25 	call	0x4a5c	; 0x4a5c <__floatsisf>
     8b0:	a5 01       	movw	r20, r10
     8b2:	94 01       	movw	r18, r8
     8b4:	0e 94 8c 26 	call	0x4d18	; 0x4d18 <__mulsf3>
     8b8:	6b 01       	movw	r12, r22
     8ba:	7c 01       	movw	r14, r24
     8bc:	6a 81       	ldd	r22, Y+2	; 0x02
     8be:	7b 81       	ldd	r23, Y+3	; 0x03
     8c0:	8c 81       	ldd	r24, Y+4	; 0x04
     8c2:	9d 81       	ldd	r25, Y+5	; 0x05
     8c4:	0e 94 2e 25 	call	0x4a5c	; 0x4a5c <__floatsisf>
     8c8:	9b 01       	movw	r18, r22
     8ca:	ac 01       	movw	r20, r24
     8cc:	c7 01       	movw	r24, r14
     8ce:	b6 01       	movw	r22, r12
     8d0:	0e 94 c6 23 	call	0x478c	; 0x478c <__addsf3>
     8d4:	0e 94 00 25 	call	0x4a00	; 0x4a00 <__fixunssfsi>
     8d8:	16 2f       	mov	r17, r22
     8da:	6a 85       	ldd	r22, Y+10	; 0x0a
     8dc:	7b 85       	ldd	r23, Y+11	; 0x0b
     8de:	71 95       	neg	r23
     8e0:	61 95       	neg	r22
     8e2:	71 09       	sbc	r23, r1
void Display::draw_line(uint8_t x, uint8_t y, uint8_t length, float phi){
	//phi*=M_PI/180.0;
	uint8_t pos_x=0, pos_y=0;
	for (uint8_t i=0;i<length;i++)
	{
		pos_x=(uint8_t) (-i*cos(phi)+x);
     8e4:	88 27       	eor	r24, r24
     8e6:	77 fd       	sbrc	r23, 7
     8e8:	80 95       	com	r24
     8ea:	98 2f       	mov	r25, r24
     8ec:	0e 94 2e 25 	call	0x4a5c	; 0x4a5c <__floatsisf>
     8f0:	a3 01       	movw	r20, r6
     8f2:	92 01       	movw	r18, r4
     8f4:	0e 94 8c 26 	call	0x4d18	; 0x4d18 <__mulsf3>
     8f8:	6b 01       	movw	r12, r22
     8fa:	7c 01       	movw	r14, r24
     8fc:	6e 81       	ldd	r22, Y+6	; 0x06
     8fe:	7f 81       	ldd	r23, Y+7	; 0x07
     900:	88 85       	ldd	r24, Y+8	; 0x08
     902:	99 85       	ldd	r25, Y+9	; 0x09
     904:	0e 94 2e 25 	call	0x4a5c	; 0x4a5c <__floatsisf>
     908:	9b 01       	movw	r18, r22
     90a:	ac 01       	movw	r20, r24
     90c:	c7 01       	movw	r24, r14
     90e:	b6 01       	movw	r22, r12
     910:	0e 94 c6 23 	call	0x478c	; 0x478c <__addsf3>
     914:	0e 94 00 25 	call	0x4a00	; 0x4a00 <__fixunssfsi>
		pos_y=(uint8_t) (i*sin(phi)+y);
		drawPixel(pos_x,pos_y,0);
     918:	20 e0       	ldi	r18, 0x00	; 0
     91a:	41 2f       	mov	r20, r17
     91c:	c1 01       	movw	r24, r2
     91e:	0e 94 d6 03 	call	0x7ac	; 0x7ac <_ZN7Display9drawPixelEhhh>
     922:	ea 85       	ldd	r30, Y+10	; 0x0a
     924:	fb 85       	ldd	r31, Y+11	; 0x0b
     926:	31 96       	adiw	r30, 0x01	; 1
     928:	fb 87       	std	Y+11, r31	; 0x0b
     92a:	ea 87       	std	Y+10, r30	; 0x0a

//eigene Zeichenfunktionen
void Display::draw_line(uint8_t x, uint8_t y, uint8_t length, float phi){
	//phi*=M_PI/180.0;
	uint8_t pos_x=0, pos_y=0;
	for (uint8_t i=0;i<length;i++)
     92c:	f9 81       	ldd	r31, Y+1	; 0x01
     92e:	ef 17       	cp	r30, r31
     930:	08 f4       	brcc	.+2      	; 0x934 <__stack+0x35>
     932:	b5 cf       	rjmp	.-150    	; 0x89e <_ZN7Display9draw_lineEhhhf+0x7e>
	{
		pos_x=(uint8_t) (-i*cos(phi)+x);
		pos_y=(uint8_t) (i*sin(phi)+y);
		drawPixel(pos_x,pos_y,0);
	}
}
     934:	2b 96       	adiw	r28, 0x0b	; 11
     936:	0f b6       	in	r0, 0x3f	; 63
     938:	f8 94       	cli
     93a:	de bf       	out	0x3e, r29	; 62
     93c:	0f be       	out	0x3f, r0	; 63
     93e:	cd bf       	out	0x3d, r28	; 61
     940:	df 91       	pop	r29
     942:	cf 91       	pop	r28
     944:	1f 91       	pop	r17
     946:	0f 91       	pop	r16
     948:	ff 90       	pop	r15
     94a:	ef 90       	pop	r14
     94c:	df 90       	pop	r13
     94e:	cf 90       	pop	r12
     950:	bf 90       	pop	r11
     952:	af 90       	pop	r10
     954:	9f 90       	pop	r9
     956:	8f 90       	pop	r8
     958:	7f 90       	pop	r7
     95a:	6f 90       	pop	r6
     95c:	5f 90       	pop	r5
     95e:	4f 90       	pop	r4
     960:	3f 90       	pop	r3
     962:	2f 90       	pop	r2
     964:	08 95       	ret

00000966 <_ZN7Display13draw_triangleEhhhff>:

//using basecenterpoint as turningpoint for rotation
//upright triangle has rotationangle of 0
//turning clockwise considered in x transformation
//baseangle=70 is for 1/3 type
void Display::draw_triangle(uint8_t basecenter_x, uint8_t basecenter_y, uint8_t baselength, float baseangle, float rotationangle){
     966:	2f 92       	push	r2
     968:	3f 92       	push	r3
     96a:	4f 92       	push	r4
     96c:	5f 92       	push	r5
     96e:	6f 92       	push	r6
     970:	7f 92       	push	r7
     972:	8f 92       	push	r8
     974:	9f 92       	push	r9
     976:	af 92       	push	r10
     978:	bf 92       	push	r11
     97a:	cf 92       	push	r12
     97c:	df 92       	push	r13
     97e:	ef 92       	push	r14
     980:	ff 92       	push	r15
     982:	0f 93       	push	r16
     984:	1f 93       	push	r17
     986:	cf 93       	push	r28
     988:	df 93       	push	r29
     98a:	cd b7       	in	r28, 0x3d	; 61
     98c:	de b7       	in	r29, 0x3e	; 62
     98e:	60 97       	sbiw	r28, 0x10	; 16
     990:	0f b6       	in	r0, 0x3f	; 63
     992:	f8 94       	cli
     994:	de bf       	out	0x3e, r29	; 62
     996:	0f be       	out	0x3f, r0	; 63
     998:	cd bf       	out	0x3d, r28	; 61
     99a:	1c 01       	movw	r2, r24
     99c:	6f 87       	std	Y+15, r22	; 0x0f
     99e:	4d 83       	std	Y+5, r20	; 0x05
     9a0:	29 83       	std	Y+1, r18	; 0x01
     9a2:	c6 01       	movw	r24, r12
     9a4:	b5 01       	movw	r22, r10
	//correcting rotationangle
	rotationangle*=M_PI/180.0;
     9a6:	25 e3       	ldi	r18, 0x35	; 53
     9a8:	3a ef       	ldi	r19, 0xFA	; 250
     9aa:	4e e8       	ldi	r20, 0x8E	; 142
     9ac:	5c e3       	ldi	r21, 0x3C	; 60
     9ae:	0e 94 8c 26 	call	0x4d18	; 0x4d18 <__mulsf3>
     9b2:	4b 01       	movw	r8, r22
     9b4:	5c 01       	movw	r10, r24
	baseangle*=M_PI/180.0;
     9b6:	25 e3       	ldi	r18, 0x35	; 53
     9b8:	3a ef       	ldi	r19, 0xFA	; 250
     9ba:	4e e8       	ldi	r20, 0x8E	; 142
     9bc:	5c e3       	ldi	r21, 0x3C	; 60
     9be:	c8 01       	movw	r24, r16
     9c0:	b7 01       	movw	r22, r14
     9c2:	0e 94 8c 26 	call	0x4d18	; 0x4d18 <__mulsf3>
     9c6:	6e 83       	std	Y+6, r22	; 0x06
     9c8:	7f 83       	std	Y+7, r23	; 0x07
     9ca:	88 87       	std	Y+8, r24	; 0x08
     9cc:	99 87       	std	Y+9, r25	; 0x09
	//draw baseline
	draw_line(basecenter_x,basecenter_y,baselength/2,rotationangle);
     9ce:	79 80       	ldd	r7, Y+1	; 0x01
     9d0:	76 94       	lsr	r7
     9d2:	85 01       	movw	r16, r10
     9d4:	74 01       	movw	r14, r8
     9d6:	27 2d       	mov	r18, r7
     9d8:	4d 81       	ldd	r20, Y+5	; 0x05
     9da:	6f 85       	ldd	r22, Y+15	; 0x0f
     9dc:	c1 01       	movw	r24, r2
     9de:	0e 94 10 04 	call	0x820	; 0x820 <_ZN7Display9draw_lineEhhhf>
	draw_line(basecenter_x,basecenter_y,baselength/2,rotationangle-M_PI);
     9e2:	2b ed       	ldi	r18, 0xDB	; 219
     9e4:	3f e0       	ldi	r19, 0x0F	; 15
     9e6:	49 e4       	ldi	r20, 0x49	; 73
     9e8:	50 e4       	ldi	r21, 0x40	; 64
     9ea:	c5 01       	movw	r24, r10
     9ec:	b4 01       	movw	r22, r8
     9ee:	0e 94 c5 23 	call	0x478a	; 0x478a <__subsf3>
     9f2:	7b 01       	movw	r14, r22
     9f4:	8c 01       	movw	r16, r24
     9f6:	27 2d       	mov	r18, r7
     9f8:	4d 81       	ldd	r20, Y+5	; 0x05
     9fa:	6f 85       	ldd	r22, Y+15	; 0x0f
     9fc:	c1 01       	movw	r24, r2
     9fe:	0e 94 10 04 	call	0x820	; 0x820 <_ZN7Display9draw_lineEhhhf>
	//draw midleline
	uint8_t middlelength=baselength/2*tan(baseangle);
     a02:	6e 81       	ldd	r22, Y+6	; 0x06
     a04:	7f 81       	ldd	r23, Y+7	; 0x07
     a06:	88 85       	ldd	r24, Y+8	; 0x08
     a08:	99 85       	ldd	r25, Y+9	; 0x09
     a0a:	0e 94 f8 26 	call	0x4df0	; 0x4df0 <tan>
     a0e:	6b 01       	movw	r12, r22
     a10:	7c 01       	movw	r14, r24
     a12:	67 2d       	mov	r22, r7
     a14:	70 e0       	ldi	r23, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	90 e0       	ldi	r25, 0x00	; 0
     a1a:	0e 94 2e 25 	call	0x4a5c	; 0x4a5c <__floatsisf>
     a1e:	a7 01       	movw	r20, r14
     a20:	96 01       	movw	r18, r12
     a22:	0e 94 8c 26 	call	0x4d18	; 0x4d18 <__mulsf3>
     a26:	0e 94 00 25 	call	0x4a00	; 0x4a00 <__fixunssfsi>
     a2a:	68 8b       	std	Y+16, r22	; 0x10
	draw_line(basecenter_x,basecenter_y,middlelength,rotationangle-M_PI_2);
     a2c:	2b ed       	ldi	r18, 0xDB	; 219
     a2e:	3f e0       	ldi	r19, 0x0F	; 15
     a30:	49 ec       	ldi	r20, 0xC9	; 201
     a32:	5f e3       	ldi	r21, 0x3F	; 63
     a34:	c5 01       	movw	r24, r10
     a36:	b4 01       	movw	r22, r8
     a38:	0e 94 c5 23 	call	0x478a	; 0x478a <__subsf3>
     a3c:	6a 87       	std	Y+10, r22	; 0x0a
     a3e:	7b 87       	std	Y+11, r23	; 0x0b
     a40:	8c 87       	std	Y+12, r24	; 0x0c
     a42:	9d 87       	std	Y+13, r25	; 0x0d
     a44:	7b 01       	movw	r14, r22
     a46:	8c 01       	movw	r16, r24
     a48:	28 89       	ldd	r18, Y+16	; 0x10
     a4a:	4d 81       	ldd	r20, Y+5	; 0x05
     a4c:	6f 85       	ldd	r22, Y+15	; 0x0f
     a4e:	c1 01       	movw	r24, r2
     a50:	0e 94 10 04 	call	0x820	; 0x820 <_ZN7Display9draw_lineEhhhf>
	//draw left arm
	uint8_t lengtharm=baselength/(2*cos(baseangle));
     a54:	6e 81       	ldd	r22, Y+6	; 0x06
     a56:	7f 81       	ldd	r23, Y+7	; 0x07
     a58:	88 85       	ldd	r24, Y+8	; 0x08
     a5a:	99 85       	ldd	r25, Y+9	; 0x09
     a5c:	0e 94 90 24 	call	0x4920	; 0x4920 <cos>
     a60:	6b 01       	movw	r12, r22
     a62:	7c 01       	movw	r14, r24
     a64:	29 81       	ldd	r18, Y+1	; 0x01
     a66:	62 2f       	mov	r22, r18
     a68:	70 e0       	ldi	r23, 0x00	; 0
     a6a:	80 e0       	ldi	r24, 0x00	; 0
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	0e 94 2e 25 	call	0x4a5c	; 0x4a5c <__floatsisf>
     a72:	2b 01       	movw	r4, r22
     a74:	3c 01       	movw	r6, r24
     a76:	a7 01       	movw	r20, r14
     a78:	96 01       	movw	r18, r12
     a7a:	c7 01       	movw	r24, r14
     a7c:	b6 01       	movw	r22, r12
     a7e:	0e 94 c6 23 	call	0x478c	; 0x478c <__addsf3>
     a82:	9b 01       	movw	r18, r22
     a84:	ac 01       	movw	r20, r24
     a86:	c3 01       	movw	r24, r6
     a88:	b2 01       	movw	r22, r4
     a8a:	0e 94 93 24 	call	0x4926	; 0x4926 <__divsf3>
     a8e:	0e 94 00 25 	call	0x4a00	; 0x4a00 <__fixunssfsi>
     a92:	6e 87       	std	Y+14, r22	; 0x0e
	uint8_t sx = basecenter_x-middlelength*cos(rotationangle-M_PI_2);
     a94:	e8 89       	ldd	r30, Y+16	; 0x10
     a96:	6e 2f       	mov	r22, r30
     a98:	70 e0       	ldi	r23, 0x00	; 0
     a9a:	80 e0       	ldi	r24, 0x00	; 0
     a9c:	90 e0       	ldi	r25, 0x00	; 0
     a9e:	0e 94 2e 25 	call	0x4a5c	; 0x4a5c <__floatsisf>
     aa2:	69 83       	std	Y+1, r22	; 0x01
     aa4:	7a 83       	std	Y+2, r23	; 0x02
     aa6:	8b 83       	std	Y+3, r24	; 0x03
     aa8:	9c 83       	std	Y+4, r25	; 0x04
     aaa:	6a 85       	ldd	r22, Y+10	; 0x0a
     aac:	7b 85       	ldd	r23, Y+11	; 0x0b
     aae:	8c 85       	ldd	r24, Y+12	; 0x0c
     ab0:	9d 85       	ldd	r25, Y+13	; 0x0d
     ab2:	0e 94 90 24 	call	0x4920	; 0x4920 <cos>
     ab6:	6b 01       	movw	r12, r22
     ab8:	7c 01       	movw	r14, r24
     aba:	ff 85       	ldd	r31, Y+15	; 0x0f
     abc:	6f 2f       	mov	r22, r31
     abe:	70 e0       	ldi	r23, 0x00	; 0
     ac0:	80 e0       	ldi	r24, 0x00	; 0
     ac2:	90 e0       	ldi	r25, 0x00	; 0
     ac4:	0e 94 2e 25 	call	0x4a5c	; 0x4a5c <__floatsisf>
     ac8:	2b 01       	movw	r4, r22
     aca:	3c 01       	movw	r6, r24
     acc:	a7 01       	movw	r20, r14
     ace:	96 01       	movw	r18, r12
     ad0:	69 81       	ldd	r22, Y+1	; 0x01
     ad2:	7a 81       	ldd	r23, Y+2	; 0x02
     ad4:	8b 81       	ldd	r24, Y+3	; 0x03
     ad6:	9c 81       	ldd	r25, Y+4	; 0x04
     ad8:	0e 94 8c 26 	call	0x4d18	; 0x4d18 <__mulsf3>
     adc:	9b 01       	movw	r18, r22
     ade:	ac 01       	movw	r20, r24
     ae0:	c3 01       	movw	r24, r6
     ae2:	b2 01       	movw	r22, r4
     ae4:	0e 94 c5 23 	call	0x478a	; 0x478a <__subsf3>
     ae8:	0e 94 00 25 	call	0x4a00	; 0x4a00 <__fixunssfsi>
     aec:	6f 87       	std	Y+15, r22	; 0x0f
	uint8_t sy = basecenter_y+middlelength*sin(rotationangle-M_PI_2);
     aee:	6a 85       	ldd	r22, Y+10	; 0x0a
     af0:	7b 85       	ldd	r23, Y+11	; 0x0b
     af2:	8c 85       	ldd	r24, Y+12	; 0x0c
     af4:	9d 85       	ldd	r25, Y+13	; 0x0d
     af6:	0e 94 ef 26 	call	0x4dde	; 0x4dde <sin>
     afa:	6b 01       	movw	r12, r22
     afc:	7c 01       	movw	r14, r24
     afe:	2d 81       	ldd	r18, Y+5	; 0x05
     b00:	62 2f       	mov	r22, r18
     b02:	70 e0       	ldi	r23, 0x00	; 0
     b04:	80 e0       	ldi	r24, 0x00	; 0
     b06:	90 e0       	ldi	r25, 0x00	; 0
     b08:	0e 94 2e 25 	call	0x4a5c	; 0x4a5c <__floatsisf>
     b0c:	2b 01       	movw	r4, r22
     b0e:	3c 01       	movw	r6, r24
     b10:	a7 01       	movw	r20, r14
     b12:	96 01       	movw	r18, r12
     b14:	69 81       	ldd	r22, Y+1	; 0x01
     b16:	7a 81       	ldd	r23, Y+2	; 0x02
     b18:	8b 81       	ldd	r24, Y+3	; 0x03
     b1a:	9c 81       	ldd	r25, Y+4	; 0x04
     b1c:	0e 94 8c 26 	call	0x4d18	; 0x4d18 <__mulsf3>
     b20:	9b 01       	movw	r18, r22
     b22:	ac 01       	movw	r20, r24
     b24:	c3 01       	movw	r24, r6
     b26:	b2 01       	movw	r22, r4
     b28:	0e 94 c6 23 	call	0x478c	; 0x478c <__addsf3>
     b2c:	0e 94 00 25 	call	0x4a00	; 0x4a00 <__fixunssfsi>
     b30:	d6 2e       	mov	r13, r22
	draw_line(sx,sy,lengtharm,baseangle+rotationangle);
     b32:	a5 01       	movw	r20, r10
     b34:	94 01       	movw	r18, r8
     b36:	6e 81       	ldd	r22, Y+6	; 0x06
     b38:	7f 81       	ldd	r23, Y+7	; 0x07
     b3a:	88 85       	ldd	r24, Y+8	; 0x08
     b3c:	99 85       	ldd	r25, Y+9	; 0x09
     b3e:	0e 94 c6 23 	call	0x478c	; 0x478c <__addsf3>
     b42:	7b 01       	movw	r14, r22
     b44:	8c 01       	movw	r16, r24
     b46:	2e 85       	ldd	r18, Y+14	; 0x0e
     b48:	4d 2d       	mov	r20, r13
     b4a:	6f 85       	ldd	r22, Y+15	; 0x0f
     b4c:	c1 01       	movw	r24, r2
     b4e:	0e 94 10 04 	call	0x820	; 0x820 <_ZN7Display9draw_lineEhhhf>
	//draw right arm
	draw_line(sx,sy,lengtharm,-baseangle+rotationangle-M_PI);
     b52:	2e 81       	ldd	r18, Y+6	; 0x06
     b54:	3f 81       	ldd	r19, Y+7	; 0x07
     b56:	48 85       	ldd	r20, Y+8	; 0x08
     b58:	59 85       	ldd	r21, Y+9	; 0x09
     b5a:	c5 01       	movw	r24, r10
     b5c:	b4 01       	movw	r22, r8
     b5e:	0e 94 c5 23 	call	0x478a	; 0x478a <__subsf3>
     b62:	2b ed       	ldi	r18, 0xDB	; 219
     b64:	3f e0       	ldi	r19, 0x0F	; 15
     b66:	49 e4       	ldi	r20, 0x49	; 73
     b68:	50 e4       	ldi	r21, 0x40	; 64
     b6a:	0e 94 c5 23 	call	0x478a	; 0x478a <__subsf3>
     b6e:	7b 01       	movw	r14, r22
     b70:	8c 01       	movw	r16, r24
     b72:	2e 85       	ldd	r18, Y+14	; 0x0e
     b74:	4d 2d       	mov	r20, r13
     b76:	6f 85       	ldd	r22, Y+15	; 0x0f
     b78:	c1 01       	movw	r24, r2
     b7a:	0e 94 10 04 	call	0x820	; 0x820 <_ZN7Display9draw_lineEhhhf>
}
     b7e:	60 96       	adiw	r28, 0x10	; 16
     b80:	0f b6       	in	r0, 0x3f	; 63
     b82:	f8 94       	cli
     b84:	de bf       	out	0x3e, r29	; 62
     b86:	0f be       	out	0x3f, r0	; 63
     b88:	cd bf       	out	0x3d, r28	; 61
     b8a:	df 91       	pop	r29
     b8c:	cf 91       	pop	r28
     b8e:	1f 91       	pop	r17
     b90:	0f 91       	pop	r16
     b92:	ff 90       	pop	r15
     b94:	ef 90       	pop	r14
     b96:	df 90       	pop	r13
     b98:	cf 90       	pop	r12
     b9a:	bf 90       	pop	r11
     b9c:	af 90       	pop	r10
     b9e:	9f 90       	pop	r9
     ba0:	8f 90       	pop	r8
     ba2:	7f 90       	pop	r7
     ba4:	6f 90       	pop	r6
     ba6:	5f 90       	pop	r5
     ba8:	4f 90       	pop	r4
     baa:	3f 90       	pop	r3
     bac:	2f 90       	pop	r2
     bae:	08 95       	ret

00000bb0 <_ZN7Display9draw_ASCIEhhh>:

void Display::draw_ASCI(uint8_t sym,uint8_t x, uint8_t y){
     bb0:	0f 93       	push	r16
     bb2:	1f 93       	push	r17
     bb4:	cf 93       	push	r28
     bb6:	df 93       	push	r29
	if(sym!=' ' && sym>=33){
     bb8:	61 32       	cpi	r22, 0x21	; 33
     bba:	08 f4       	brcc	.+2      	; 0xbbe <_ZN7Display9draw_ASCIEhhh+0xe>
     bbc:	42 c0       	rjmp	.+132    	; 0xc42 <_ZN7Display9draw_ASCIEhhh+0x92>
		sym-=33;
		uint16_t symbol;
		for(uint8_t i = 0; i < 5; i++){
			symbol = pgm_read_byte(&font5x8[sym][i]);
			symbol = symbol << y%8;
			Displayframe[x+(y/8)*SSD1306_WIDTH+i] |=(uint8_t) (symbol & 0x00FF);
     bbe:	a4 2f       	mov	r26, r20
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	02 2f       	mov	r16, r18
     bc4:	06 95       	lsr	r16
     bc6:	06 95       	lsr	r16
     bc8:	06 95       	lsr	r16
     bca:	30 e8       	ldi	r19, 0x80	; 128
     bcc:	03 9f       	mul	r16, r19
     bce:	80 01       	movw	r16, r0
     bd0:	11 24       	eor	r1, r1
     bd2:	ed 01       	movw	r28, r26
     bd4:	c0 0f       	add	r28, r16
     bd6:	d1 1f       	adc	r29, r17
			if(((symbol&0xFF00)>>8)==0){
				Displayframe[x+(y/8+1)*SSD1306_WIDTH+i] |= 0;
			}
			else {
				Displayframe[x+(y/8+1)*SSD1306_WIDTH+i] |= (uint8_t) ((symbol & 0xFF00)>>8);
     bd8:	00 58       	subi	r16, 0x80	; 128
     bda:	1f 4f       	sbci	r17, 0xFF	; 255
     bdc:	0a 0f       	add	r16, r26
     bde:	1b 1f       	adc	r17, r27
	draw_line(sx,sy,lengtharm,-baseangle+rotationangle-M_PI);
}

void Display::draw_ASCI(uint8_t sym,uint8_t x, uint8_t y){
	if(sym!=' ' && sym>=33){
		sym-=33;
     be0:	61 52       	subi	r22, 0x21	; 33
     be2:	46 2f       	mov	r20, r22
     be4:	50 e0       	ldi	r21, 0x00	; 0
     be6:	fa 01       	movw	r30, r20
     be8:	ee 0f       	add	r30, r30
     bea:	ff 1f       	adc	r31, r31
     bec:	ee 0f       	add	r30, r30
     bee:	ff 1f       	adc	r31, r31
     bf0:	e4 0f       	add	r30, r20
     bf2:	f5 1f       	adc	r31, r21
     bf4:	ee 55       	subi	r30, 0x5E	; 94
     bf6:	fd 4f       	sbci	r31, 0xFD	; 253
     bf8:	dc 01       	movw	r26, r24
     bfa:	ac 0f       	add	r26, r28
     bfc:	bd 1f       	adc	r27, r29
     bfe:	ae 01       	movw	r20, r28
     c00:	05 96       	adiw	r24, 0x05	; 5
     c02:	8c 0f       	add	r24, r28
     c04:	9d 1f       	adc	r25, r29
		uint16_t symbol;
		for(uint8_t i = 0; i < 5; i++){
			symbol = pgm_read_byte(&font5x8[sym][i]);
			symbol = symbol << y%8;
     c06:	27 70       	andi	r18, 0x07	; 7
void Display::draw_ASCI(uint8_t sym,uint8_t x, uint8_t y){
	if(sym!=' ' && sym>=33){
		sym-=33;
		uint16_t symbol;
		for(uint8_t i = 0; i < 5; i++){
			symbol = pgm_read_byte(&font5x8[sym][i]);
     c08:	64 91       	lpm	r22, Z
     c0a:	70 e0       	ldi	r23, 0x00	; 0
			symbol = symbol << y%8;
     c0c:	02 2e       	mov	r0, r18
     c0e:	02 c0       	rjmp	.+4      	; 0xc14 <_ZN7Display9draw_ASCIEhhh+0x64>
     c10:	66 0f       	add	r22, r22
     c12:	77 1f       	adc	r23, r23
     c14:	0a 94       	dec	r0
     c16:	e2 f7       	brpl	.-8      	; 0xc10 <_ZN7Display9draw_ASCIEhhh+0x60>
			Displayframe[x+(y/8)*SSD1306_WIDTH+i] |=(uint8_t) (symbol & 0x00FF);
     c18:	3c 91       	ld	r19, X
     c1a:	36 2b       	or	r19, r22
     c1c:	3c 93       	st	X, r19
			if(((symbol&0xFF00)>>8)==0){
     c1e:	67 2f       	mov	r22, r23
     c20:	77 27       	eor	r23, r23
     c22:	61 15       	cp	r22, r1
     c24:	71 05       	cpc	r23, r1
     c26:	41 f0       	breq	.+16     	; 0xc38 <_ZN7Display9draw_ASCIEhhh+0x88>
     c28:	ed 01       	movw	r28, r26
     c2a:	c4 1b       	sub	r28, r20
     c2c:	d5 0b       	sbc	r29, r21
     c2e:	c0 0f       	add	r28, r16
     c30:	d1 1f       	adc	r29, r17
				Displayframe[x+(y/8+1)*SSD1306_WIDTH+i] |= 0;
			}
			else {
				Displayframe[x+(y/8+1)*SSD1306_WIDTH+i] |= (uint8_t) ((symbol & 0xFF00)>>8);
     c32:	38 81       	ld	r19, Y
     c34:	63 2b       	or	r22, r19
     c36:	68 83       	st	Y, r22
     c38:	31 96       	adiw	r30, 0x01	; 1
     c3a:	11 96       	adiw	r26, 0x01	; 1

void Display::draw_ASCI(uint8_t sym,uint8_t x, uint8_t y){
	if(sym!=' ' && sym>=33){
		sym-=33;
		uint16_t symbol;
		for(uint8_t i = 0; i < 5; i++){
     c3c:	a8 17       	cp	r26, r24
     c3e:	b9 07       	cpc	r27, r25
     c40:	19 f7       	brne	.-58     	; 0xc08 <_ZN7Display9draw_ASCIEhhh+0x58>
	else{
		for(uint8_t i = 0; i < 7; i++){
			Displayframe[x+(y/8)*SSD1306_WIDTH+i] |= 0;
		}
	}
}
     c42:	df 91       	pop	r29
     c44:	cf 91       	pop	r28
     c46:	1f 91       	pop	r17
     c48:	0f 91       	pop	r16
     c4a:	08 95       	ret

00000c4c <_ZN7Display16draw_number16x16Ehhh>:

void Display::draw_number16x16(uint8_t number, uint8_t x, uint8_t y){
     c4c:	ef 92       	push	r14
     c4e:	ff 92       	push	r15
     c50:	0f 93       	push	r16
     c52:	1f 93       	push	r17
     c54:	cf 93       	push	r28
     c56:	df 93       	push	r29
	uint16_t symbol;
	if(number>=0 && number<10){
     c58:	6a 30       	cpi	r22, 0x0A	; 10
     c5a:	08 f0       	brcs	.+2      	; 0xc5e <_ZN7Display16draw_number16x16Ehhh+0x12>
     c5c:	66 c0       	rjmp	.+204    	; 0xd2a <_ZN7Display16draw_number16x16Ehhh+0xde>
		for(uint8_t i = 0; i < 32;i++){
			symbol = pgm_read_byte(&digits16x16[number][i]);
			symbol = symbol << y%8;
			if(i<16){
				Displayframe[x+(y/8)*SSD1306_WIDTH+i] |=(uint8_t) (symbol & 0x00FF);
     c5e:	50 e0       	ldi	r21, 0x00	; 0
     c60:	02 2f       	mov	r16, r18
     c62:	06 95       	lsr	r16
     c64:	06 95       	lsr	r16
     c66:	06 95       	lsr	r16
     c68:	10 e0       	ldi	r17, 0x00	; 0
     c6a:	d8 01       	movw	r26, r16
     c6c:	b6 95       	lsr	r27
     c6e:	ba 2f       	mov	r27, r26
     c70:	aa 27       	eor	r26, r26
     c72:	b7 95       	ror	r27
     c74:	a7 95       	ror	r26
				if(((symbol&0xFF00)>>8)==0){
					Displayframe[x+(y/8+1)*SSD1306_WIDTH+i] |= 0;
				}
				else {
					Displayframe[x+(y/8+1)*SSD1306_WIDTH+i] |= (uint8_t) ((symbol & 0xFF00)>>8);
     c76:	0f 5f       	subi	r16, 0xFF	; 255
     c78:	1f 4f       	sbci	r17, 0xFF	; 255
				}
			}
			else {
				Displayframe[x+(y/8+1)*SSD1306_WIDTH+(i-16)] |= (uint8_t) (symbol & 0x00FF);
     c7a:	16 95       	lsr	r17
     c7c:	10 2f       	mov	r17, r16
     c7e:	00 27       	eor	r16, r16
     c80:	17 95       	ror	r17
     c82:	07 95       	ror	r16
				Displayframe[x+(y/8)*SSD1306_WIDTH+i] |=(uint8_t) (symbol & 0x00FF);
				if(((symbol&0xFF00)>>8)==0){
					Displayframe[x+(y/8+1)*SSD1306_WIDTH+i] |= 0;
				}
				else {
					Displayframe[x+(y/8+1)*SSD1306_WIDTH+i] |= (uint8_t) ((symbol & 0xFF00)>>8);
     c84:	7d 01       	movw	r14, r26
     c86:	30 e8       	ldi	r19, 0x80	; 128
     c88:	e3 0e       	add	r14, r19
     c8a:	f1 1c       	adc	r15, r1
     c8c:	e4 0e       	add	r14, r20
     c8e:	f5 1e       	adc	r15, r21
     c90:	e8 0e       	add	r14, r24
     c92:	f9 1e       	adc	r15, r25
				}
			}
			else {
				Displayframe[x+(y/8+1)*SSD1306_WIDTH+(i-16)] |= (uint8_t) (symbol & 0x00FF);
     c94:	ea 01       	movw	r28, r20
     c96:	c0 0f       	add	r28, r16
     c98:	d1 1f       	adc	r29, r17
     c9a:	60 97       	sbiw	r28, 0x10	; 16
     c9c:	c8 0f       	add	r28, r24
     c9e:	d9 1f       	adc	r29, r25
				if(((symbol&0xFF00)>>8)==0){
					Displayframe[x+(y/8+2)*SSD1306_WIDTH+(i-16)] |= 0;
				}
				else {
					Displayframe[x+(y/8+2)*SSD1306_WIDTH+(i-16)] |= (uint8_t) ((symbol & 0xFF00)>>8);
     ca0:	04 0f       	add	r16, r20
     ca2:	15 1f       	adc	r17, r21
     ca4:	00 59       	subi	r16, 0x90	; 144
     ca6:	1f 4f       	sbci	r17, 0xFF	; 255
     ca8:	08 0f       	add	r16, r24
     caa:	19 1f       	adc	r17, r25
	if(number>=0 && number<10){
		for(uint8_t i = 0; i < 32;i++){
			symbol = pgm_read_byte(&digits16x16[number][i]);
			symbol = symbol << y%8;
			if(i<16){
				Displayframe[x+(y/8)*SSD1306_WIDTH+i] |=(uint8_t) (symbol & 0x00FF);
     cac:	a4 0f       	add	r26, r20
     cae:	b5 1f       	adc	r27, r21
     cb0:	a8 0f       	add	r26, r24
     cb2:	b9 1f       	adc	r27, r25
     cb4:	e0 e2       	ldi	r30, 0x20	; 32
     cb6:	6e 9f       	mul	r22, r30
     cb8:	c0 01       	movw	r24, r0
     cba:	11 24       	eor	r1, r1
				Displayframe[x+(y/8+1)*SSD1306_WIDTH+(i-16)] |= (uint8_t) (symbol & 0x00FF);
				if(((symbol&0xFF00)>>8)==0){
					Displayframe[x+(y/8+2)*SSD1306_WIDTH+(i-16)] |= 0;
				}
				else {
					Displayframe[x+(y/8+2)*SSD1306_WIDTH+(i-16)] |= (uint8_t) ((symbol & 0xFF00)>>8);
     cbc:	40 e0       	ldi	r20, 0x00	; 0
     cbe:	50 e0       	ldi	r21, 0x00	; 0
     cc0:	8e 59       	subi	r24, 0x9E	; 158
     cc2:	9e 4f       	sbci	r25, 0xFE	; 254
void Display::draw_number16x16(uint8_t number, uint8_t x, uint8_t y){
	uint16_t symbol;
	if(number>=0 && number<10){
		for(uint8_t i = 0; i < 32;i++){
			symbol = pgm_read_byte(&digits16x16[number][i]);
			symbol = symbol << y%8;
     cc4:	27 70       	andi	r18, 0x07	; 7
     cc6:	fc 01       	movw	r30, r24
     cc8:	e4 0f       	add	r30, r20
     cca:	f5 1f       	adc	r31, r21

void Display::draw_number16x16(uint8_t number, uint8_t x, uint8_t y){
	uint16_t symbol;
	if(number>=0 && number<10){
		for(uint8_t i = 0; i < 32;i++){
			symbol = pgm_read_byte(&digits16x16[number][i]);
     ccc:	e4 91       	lpm	r30, Z
     cce:	f0 e0       	ldi	r31, 0x00	; 0
			symbol = symbol << y%8;
     cd0:	02 2e       	mov	r0, r18
     cd2:	02 c0       	rjmp	.+4      	; 0xcd8 <_ZN7Display16draw_number16x16Ehhh+0x8c>
     cd4:	ee 0f       	add	r30, r30
     cd6:	ff 1f       	adc	r31, r31
     cd8:	0a 94       	dec	r0
     cda:	e2 f7       	brpl	.-8      	; 0xcd4 <_ZN7Display16draw_number16x16Ehhh+0x88>
			if(i<16){
     cdc:	40 31       	cpi	r20, 0x10	; 16
     cde:	68 f4       	brcc	.+26     	; 0xcfa <_ZN7Display16draw_number16x16Ehhh+0xae>
				Displayframe[x+(y/8)*SSD1306_WIDTH+i] |=(uint8_t) (symbol & 0x00FF);
     ce0:	3c 91       	ld	r19, X
     ce2:	3e 2b       	or	r19, r30
     ce4:	3c 93       	st	X, r19
				if(((symbol&0xFF00)>>8)==0){
     ce6:	6f 2f       	mov	r22, r31
     ce8:	77 27       	eor	r23, r23
     cea:	61 15       	cp	r22, r1
     cec:	71 05       	cpc	r23, r1
     cee:	89 f0       	breq	.+34     	; 0xd12 <_ZN7Display16draw_number16x16Ehhh+0xc6>
					Displayframe[x+(y/8+1)*SSD1306_WIDTH+i] |= 0;
				}
				else {
					Displayframe[x+(y/8+1)*SSD1306_WIDTH+i] |= (uint8_t) ((symbol & 0xFF00)>>8);
     cf0:	f7 01       	movw	r30, r14
     cf2:	30 81       	ld	r19, Z
     cf4:	36 2b       	or	r19, r22
     cf6:	30 83       	st	Z, r19
     cf8:	0c c0       	rjmp	.+24     	; 0xd12 <_ZN7Display16draw_number16x16Ehhh+0xc6>
				}
			}
			else {
				Displayframe[x+(y/8+1)*SSD1306_WIDTH+(i-16)] |= (uint8_t) (symbol & 0x00FF);
     cfa:	38 81       	ld	r19, Y
     cfc:	3e 2b       	or	r19, r30
     cfe:	38 83       	st	Y, r19
				if(((symbol&0xFF00)>>8)==0){
     d00:	6f 2f       	mov	r22, r31
     d02:	77 27       	eor	r23, r23
     d04:	61 15       	cp	r22, r1
     d06:	71 05       	cpc	r23, r1
     d08:	21 f0       	breq	.+8      	; 0xd12 <_ZN7Display16draw_number16x16Ehhh+0xc6>
					Displayframe[x+(y/8+2)*SSD1306_WIDTH+(i-16)] |= 0;
				}
				else {
					Displayframe[x+(y/8+2)*SSD1306_WIDTH+(i-16)] |= (uint8_t) ((symbol & 0xFF00)>>8);
     d0a:	f8 01       	movw	r30, r16
     d0c:	30 81       	ld	r19, Z
     d0e:	36 2b       	or	r19, r22
     d10:	30 83       	st	Z, r19
     d12:	4f 5f       	subi	r20, 0xFF	; 255
     d14:	5f 4f       	sbci	r21, 0xFF	; 255
     d16:	ff ef       	ldi	r31, 0xFF	; 255
     d18:	ef 1a       	sub	r14, r31
     d1a:	ff 0a       	sbc	r15, r31
     d1c:	21 96       	adiw	r28, 0x01	; 1
     d1e:	0f 5f       	subi	r16, 0xFF	; 255
     d20:	1f 4f       	sbci	r17, 0xFF	; 255
     d22:	11 96       	adiw	r26, 0x01	; 1
}

void Display::draw_number16x16(uint8_t number, uint8_t x, uint8_t y){
	uint16_t symbol;
	if(number>=0 && number<10){
		for(uint8_t i = 0; i < 32;i++){
     d24:	40 32       	cpi	r20, 0x20	; 32
     d26:	51 05       	cpc	r21, r1
     d28:	71 f6       	brne	.-100    	; 0xcc6 <_ZN7Display16draw_number16x16Ehhh+0x7a>
					Displayframe[x+(y/8+2)*SSD1306_WIDTH+(i-16)] |= (uint8_t) ((symbol & 0xFF00)>>8);
				}
			}
		}
	}
}
     d2a:	df 91       	pop	r29
     d2c:	cf 91       	pop	r28
     d2e:	1f 91       	pop	r17
     d30:	0f 91       	pop	r16
     d32:	ff 90       	pop	r15
     d34:	ef 90       	pop	r14
     d36:	08 95       	ret

00000d38 <_ZN7Display6analogEhhhh>:

void Display::analog(uint8_t stunde, uint8_t minute, uint8_t sekunde, uint8_t sekanzeige){
     d38:	2f 92       	push	r2
     d3a:	3f 92       	push	r3
     d3c:	4f 92       	push	r4
     d3e:	5f 92       	push	r5
     d40:	6f 92       	push	r6
     d42:	7f 92       	push	r7
     d44:	8f 92       	push	r8
     d46:	9f 92       	push	r9
     d48:	af 92       	push	r10
     d4a:	bf 92       	push	r11
     d4c:	cf 92       	push	r12
     d4e:	df 92       	push	r13
     d50:	ef 92       	push	r14
     d52:	ff 92       	push	r15
     d54:	0f 93       	push	r16
     d56:	1f 93       	push	r17
     d58:	cf 93       	push	r28
     d5a:	df 93       	push	r29
     d5c:	cd b7       	in	r28, 0x3d	; 61
     d5e:	de b7       	in	r29, 0x3e	; 62
     d60:	27 97       	sbiw	r28, 0x07	; 7
     d62:	0f b6       	in	r0, 0x3f	; 63
     d64:	f8 94       	cli
     d66:	de bf       	out	0x3e, r29	; 62
     d68:	0f be       	out	0x3f, r0	; 63
     d6a:	cd bf       	out	0x3d, r28	; 61
     d6c:	9f 83       	std	Y+7, r25	; 0x07
     d6e:	8e 83       	std	Y+6, r24	; 0x06
     d70:	6d 83       	std	Y+5, r22	; 0x05
     d72:	34 2e       	mov	r3, r20
	uint8_t Px=32-1;
	uint8_t Py=32-1;
	uint8_t x=0,y=0;
	float winkel=0;
	
	if (sekanzeige)
     d74:	00 23       	and	r16, r16
     d76:	09 f4       	brne	.+2      	; 0xd7a <_ZN7Display6analogEhhhh+0x42>
     d78:	29 c1       	rjmp	.+594    	; 0xfcc <_ZN7Display6analogEhhhh+0x294>
	{
		//Berechnen des Sekundenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(sekunde*6.0)*M_PI/180.0-M_PI/2.0;
     d7a:	62 2f       	mov	r22, r18
     d7c:	70 e0       	ldi	r23, 0x00	; 0
     d7e:	80 e0       	ldi	r24, 0x00	; 0
     d80:	90 e0       	ldi	r25, 0x00	; 0
     d82:	0e 94 2e 25 	call	0x4a5c	; 0x4a5c <__floatsisf>
     d86:	20 e0       	ldi	r18, 0x00	; 0
     d88:	30 e0       	ldi	r19, 0x00	; 0
     d8a:	40 ec       	ldi	r20, 0xC0	; 192
     d8c:	50 e4       	ldi	r21, 0x40	; 64
     d8e:	0e 94 8c 26 	call	0x4d18	; 0x4d18 <__mulsf3>
     d92:	2b ed       	ldi	r18, 0xDB	; 219
     d94:	3f e0       	ldi	r19, 0x0F	; 15
     d96:	49 e4       	ldi	r20, 0x49	; 73
     d98:	50 e4       	ldi	r21, 0x40	; 64
     d9a:	0e 94 8c 26 	call	0x4d18	; 0x4d18 <__mulsf3>
     d9e:	20 e0       	ldi	r18, 0x00	; 0
     da0:	30 e0       	ldi	r19, 0x00	; 0
     da2:	44 e3       	ldi	r20, 0x34	; 52
     da4:	53 e4       	ldi	r21, 0x43	; 67
     da6:	0e 94 93 24 	call	0x4926	; 0x4926 <__divsf3>
     daa:	2b ed       	ldi	r18, 0xDB	; 219
     dac:	3f e0       	ldi	r19, 0x0F	; 15
     dae:	49 ec       	ldi	r20, 0xC9	; 201
     db0:	5f e3       	ldi	r21, 0x3F	; 63
     db2:	0e 94 c5 23 	call	0x478a	; 0x478a <__subsf3>
     db6:	6b 01       	movw	r12, r22
     db8:	7c 01       	movw	r14, r24
			x=(uint8_t) i*cos(winkel)+Px;
     dba:	0e 94 90 24 	call	0x4920	; 0x4920 <cos>
     dbe:	2b 01       	movw	r4, r22
     dc0:	3c 01       	movw	r6, r24
			y=(uint8_t) i*sin(winkel)+Py;
     dc2:	c7 01       	movw	r24, r14
     dc4:	b6 01       	movw	r22, r12
     dc6:	0e 94 ef 26 	call	0x4dde	; 0x4dde <sin>
     dca:	4b 01       	movw	r8, r22
     dcc:	5c 01       	movw	r10, r24
     dce:	00 e0       	ldi	r16, 0x00	; 0
     dd0:	10 e0       	ldi	r17, 0x00	; 0
	if (sekanzeige)
	{
		//Berechnen des Sekundenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(sekunde*6.0)*M_PI/180.0-M_PI/2.0;
			x=(uint8_t) i*cos(winkel)+Px;
     dd2:	b8 01       	movw	r22, r16
     dd4:	88 27       	eor	r24, r24
     dd6:	77 fd       	sbrc	r23, 7
     dd8:	80 95       	com	r24
     dda:	98 2f       	mov	r25, r24
     ddc:	0e 94 2e 25 	call	0x4a5c	; 0x4a5c <__floatsisf>
     de0:	6b 01       	movw	r12, r22
     de2:	7c 01       	movw	r14, r24
			y=(uint8_t) i*sin(winkel)+Py;
     de4:	a5 01       	movw	r20, r10
     de6:	94 01       	movw	r18, r8
     de8:	0e 94 8c 26 	call	0x4d18	; 0x4d18 <__mulsf3>
     dec:	20 e0       	ldi	r18, 0x00	; 0
     dee:	30 e0       	ldi	r19, 0x00	; 0
     df0:	48 ef       	ldi	r20, 0xF8	; 248
     df2:	51 e4       	ldi	r21, 0x41	; 65
     df4:	0e 94 c6 23 	call	0x478c	; 0x478c <__addsf3>
     df8:	0e 94 00 25 	call	0x4a00	; 0x4a00 <__fixunssfsi>
     dfc:	26 2e       	mov	r2, r22
	if (sekanzeige)
	{
		//Berechnen des Sekundenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(sekunde*6.0)*M_PI/180.0-M_PI/2.0;
			x=(uint8_t) i*cos(winkel)+Px;
     dfe:	a3 01       	movw	r20, r6
     e00:	92 01       	movw	r18, r4
     e02:	c7 01       	movw	r24, r14
     e04:	b6 01       	movw	r22, r12
     e06:	0e 94 8c 26 	call	0x4d18	; 0x4d18 <__mulsf3>
     e0a:	20 e0       	ldi	r18, 0x00	; 0
     e0c:	30 e0       	ldi	r19, 0x00	; 0
     e0e:	48 ef       	ldi	r20, 0xF8	; 248
     e10:	51 e4       	ldi	r21, 0x41	; 65
     e12:	0e 94 c6 23 	call	0x478c	; 0x478c <__addsf3>
     e16:	0e 94 00 25 	call	0x4a00	; 0x4a00 <__fixunssfsi>
			y=(uint8_t) i*sin(winkel)+Py;

			drawPixel(x,y,0);
     e1a:	20 e0       	ldi	r18, 0x00	; 0
     e1c:	42 2d       	mov	r20, r2
     e1e:	8e 81       	ldd	r24, Y+6	; 0x06
     e20:	9f 81       	ldd	r25, Y+7	; 0x07
     e22:	0e 94 d6 03 	call	0x7ac	; 0x7ac <_ZN7Display9drawPixelEhhh>
     e26:	0f 5f       	subi	r16, 0xFF	; 255
     e28:	1f 4f       	sbci	r17, 0xFF	; 255
	float winkel=0;
	
	if (sekanzeige)
	{
		//Berechnen des Sekundenzeigers
		for(uint8_t i=0;i<r;i++){
     e2a:	09 31       	cpi	r16, 0x19	; 25
     e2c:	11 05       	cpc	r17, r1
     e2e:	89 f6       	brne	.-94     	; 0xdd2 <_ZN7Display6analogEhhhh+0x9a>
		}

		r=21;
		//Berechnen des Minutenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(minute*6.0)*M_PI/180.0-M_PI/2.0;
     e30:	63 2d       	mov	r22, r3
     e32:	70 e0       	ldi	r23, 0x00	; 0
     e34:	80 e0       	ldi	r24, 0x00	; 0
     e36:	90 e0       	ldi	r25, 0x00	; 0
     e38:	0e 94 2e 25 	call	0x4a5c	; 0x4a5c <__floatsisf>
     e3c:	69 83       	std	Y+1, r22	; 0x01
     e3e:	7a 83       	std	Y+2, r23	; 0x02
     e40:	8b 83       	std	Y+3, r24	; 0x03
     e42:	9c 83       	std	Y+4, r25	; 0x04
     e44:	20 e0       	ldi	r18, 0x00	; 0
     e46:	30 e0       	ldi	r19, 0x00	; 0
     e48:	40 ec       	ldi	r20, 0xC0	; 192
     e4a:	50 e4       	ldi	r21, 0x40	; 64
     e4c:	0e 94 8c 26 	call	0x4d18	; 0x4d18 <__mulsf3>
     e50:	2b ed       	ldi	r18, 0xDB	; 219
     e52:	3f e0       	ldi	r19, 0x0F	; 15
     e54:	49 e4       	ldi	r20, 0x49	; 73
     e56:	50 e4       	ldi	r21, 0x40	; 64
     e58:	0e 94 8c 26 	call	0x4d18	; 0x4d18 <__mulsf3>
     e5c:	20 e0       	ldi	r18, 0x00	; 0
     e5e:	30 e0       	ldi	r19, 0x00	; 0
     e60:	44 e3       	ldi	r20, 0x34	; 52
     e62:	53 e4       	ldi	r21, 0x43	; 67
     e64:	0e 94 93 24 	call	0x4926	; 0x4926 <__divsf3>
     e68:	2b ed       	ldi	r18, 0xDB	; 219
     e6a:	3f e0       	ldi	r19, 0x0F	; 15
     e6c:	49 ec       	ldi	r20, 0xC9	; 201
     e6e:	5f e3       	ldi	r21, 0x3F	; 63
     e70:	0e 94 c5 23 	call	0x478a	; 0x478a <__subsf3>
     e74:	6b 01       	movw	r12, r22
     e76:	7c 01       	movw	r14, r24
			x=(uint8_t) i*cos(winkel)+Px;
     e78:	0e 94 90 24 	call	0x4920	; 0x4920 <cos>
     e7c:	4b 01       	movw	r8, r22
     e7e:	5c 01       	movw	r10, r24
			y=(uint8_t) i*sin(winkel)+Py;
     e80:	c7 01       	movw	r24, r14
     e82:	b6 01       	movw	r22, r12
     e84:	0e 94 ef 26 	call	0x4dde	; 0x4dde <sin>
     e88:	2b 01       	movw	r4, r22
     e8a:	3c 01       	movw	r6, r24
     e8c:	00 e0       	ldi	r16, 0x00	; 0
     e8e:	10 e0       	ldi	r17, 0x00	; 0

		r=21;
		//Berechnen des Minutenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(minute*6.0)*M_PI/180.0-M_PI/2.0;
			x=(uint8_t) i*cos(winkel)+Px;
     e90:	b8 01       	movw	r22, r16
     e92:	88 27       	eor	r24, r24
     e94:	77 fd       	sbrc	r23, 7
     e96:	80 95       	com	r24
     e98:	98 2f       	mov	r25, r24
     e9a:	0e 94 2e 25 	call	0x4a5c	; 0x4a5c <__floatsisf>
     e9e:	6b 01       	movw	r12, r22
     ea0:	7c 01       	movw	r14, r24
			y=(uint8_t) i*sin(winkel)+Py;
     ea2:	a3 01       	movw	r20, r6
     ea4:	92 01       	movw	r18, r4
     ea6:	0e 94 8c 26 	call	0x4d18	; 0x4d18 <__mulsf3>
     eaa:	20 e0       	ldi	r18, 0x00	; 0
     eac:	30 e0       	ldi	r19, 0x00	; 0
     eae:	48 ef       	ldi	r20, 0xF8	; 248
     eb0:	51 e4       	ldi	r21, 0x41	; 65
     eb2:	0e 94 c6 23 	call	0x478c	; 0x478c <__addsf3>
     eb6:	0e 94 00 25 	call	0x4a00	; 0x4a00 <__fixunssfsi>
     eba:	36 2e       	mov	r3, r22

		r=21;
		//Berechnen des Minutenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(minute*6.0)*M_PI/180.0-M_PI/2.0;
			x=(uint8_t) i*cos(winkel)+Px;
     ebc:	a5 01       	movw	r20, r10
     ebe:	94 01       	movw	r18, r8
     ec0:	c7 01       	movw	r24, r14
     ec2:	b6 01       	movw	r22, r12
     ec4:	0e 94 8c 26 	call	0x4d18	; 0x4d18 <__mulsf3>
     ec8:	20 e0       	ldi	r18, 0x00	; 0
     eca:	30 e0       	ldi	r19, 0x00	; 0
     ecc:	48 ef       	ldi	r20, 0xF8	; 248
     ece:	51 e4       	ldi	r21, 0x41	; 65
     ed0:	0e 94 c6 23 	call	0x478c	; 0x478c <__addsf3>
     ed4:	0e 94 00 25 	call	0x4a00	; 0x4a00 <__fixunssfsi>
			y=(uint8_t) i*sin(winkel)+Py;

			drawPixel(x,y,0);
     ed8:	20 e0       	ldi	r18, 0x00	; 0
     eda:	43 2d       	mov	r20, r3
     edc:	8e 81       	ldd	r24, Y+6	; 0x06
     ede:	9f 81       	ldd	r25, Y+7	; 0x07
     ee0:	0e 94 d6 03 	call	0x7ac	; 0x7ac <_ZN7Display9drawPixelEhhh>
     ee4:	0f 5f       	subi	r16, 0xFF	; 255
     ee6:	1f 4f       	sbci	r17, 0xFF	; 255
			drawPixel(x,y,0);
		}

		r=21;
		//Berechnen des Minutenzeigers
		for(uint8_t i=0;i<r;i++){
     ee8:	05 31       	cpi	r16, 0x15	; 21
     eea:	11 05       	cpc	r17, r1
     eec:	89 f6       	brne	.-94     	; 0xe90 <_ZN7Display6analogEhhhh+0x158>
		}

		r=13;
		//Berechnen des Stundenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(stunde*30.0+minute/2.0)*M_PI/180.0-M_PI/2.0;
     eee:	2d 81       	ldd	r18, Y+5	; 0x05
     ef0:	62 2f       	mov	r22, r18
     ef2:	70 e0       	ldi	r23, 0x00	; 0
     ef4:	80 e0       	ldi	r24, 0x00	; 0
     ef6:	90 e0       	ldi	r25, 0x00	; 0
     ef8:	0e 94 2e 25 	call	0x4a5c	; 0x4a5c <__floatsisf>
     efc:	20 e0       	ldi	r18, 0x00	; 0
     efe:	30 e0       	ldi	r19, 0x00	; 0
     f00:	40 ef       	ldi	r20, 0xF0	; 240
     f02:	51 e4       	ldi	r21, 0x41	; 65
     f04:	0e 94 8c 26 	call	0x4d18	; 0x4d18 <__mulsf3>
     f08:	6b 01       	movw	r12, r22
     f0a:	7c 01       	movw	r14, r24
     f0c:	20 e0       	ldi	r18, 0x00	; 0
     f0e:	30 e0       	ldi	r19, 0x00	; 0
     f10:	40 e0       	ldi	r20, 0x00	; 0
     f12:	5f e3       	ldi	r21, 0x3F	; 63
     f14:	69 81       	ldd	r22, Y+1	; 0x01
     f16:	7a 81       	ldd	r23, Y+2	; 0x02
     f18:	8b 81       	ldd	r24, Y+3	; 0x03
     f1a:	9c 81       	ldd	r25, Y+4	; 0x04
     f1c:	0e 94 8c 26 	call	0x4d18	; 0x4d18 <__mulsf3>
     f20:	9b 01       	movw	r18, r22
     f22:	ac 01       	movw	r20, r24
     f24:	c7 01       	movw	r24, r14
     f26:	b6 01       	movw	r22, r12
     f28:	0e 94 c6 23 	call	0x478c	; 0x478c <__addsf3>
     f2c:	2b ed       	ldi	r18, 0xDB	; 219
     f2e:	3f e0       	ldi	r19, 0x0F	; 15
     f30:	49 e4       	ldi	r20, 0x49	; 73
     f32:	50 e4       	ldi	r21, 0x40	; 64
     f34:	0e 94 8c 26 	call	0x4d18	; 0x4d18 <__mulsf3>
     f38:	20 e0       	ldi	r18, 0x00	; 0
     f3a:	30 e0       	ldi	r19, 0x00	; 0
     f3c:	44 e3       	ldi	r20, 0x34	; 52
     f3e:	53 e4       	ldi	r21, 0x43	; 67
     f40:	0e 94 93 24 	call	0x4926	; 0x4926 <__divsf3>
     f44:	2b ed       	ldi	r18, 0xDB	; 219
     f46:	3f e0       	ldi	r19, 0x0F	; 15
     f48:	49 ec       	ldi	r20, 0xC9	; 201
     f4a:	5f e3       	ldi	r21, 0x3F	; 63
     f4c:	0e 94 c5 23 	call	0x478a	; 0x478a <__subsf3>
     f50:	6b 01       	movw	r12, r22
     f52:	7c 01       	movw	r14, r24
			x= (uint8_t) i*cos(winkel) +Px;
     f54:	0e 94 90 24 	call	0x4920	; 0x4920 <cos>
     f58:	2b 01       	movw	r4, r22
     f5a:	3c 01       	movw	r6, r24
			y= (uint8_t) i*sin(winkel) +Py;
     f5c:	c7 01       	movw	r24, r14
     f5e:	b6 01       	movw	r22, r12
     f60:	0e 94 ef 26 	call	0x4dde	; 0x4dde <sin>
     f64:	4b 01       	movw	r8, r22
     f66:	5c 01       	movw	r10, r24
     f68:	00 e0       	ldi	r16, 0x00	; 0
     f6a:	10 e0       	ldi	r17, 0x00	; 0

		r=13;
		//Berechnen des Stundenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(stunde*30.0+minute/2.0)*M_PI/180.0-M_PI/2.0;
			x= (uint8_t) i*cos(winkel) +Px;
     f6c:	b8 01       	movw	r22, r16
     f6e:	88 27       	eor	r24, r24
     f70:	77 fd       	sbrc	r23, 7
     f72:	80 95       	com	r24
     f74:	98 2f       	mov	r25, r24
     f76:	0e 94 2e 25 	call	0x4a5c	; 0x4a5c <__floatsisf>
     f7a:	6b 01       	movw	r12, r22
     f7c:	7c 01       	movw	r14, r24
			y= (uint8_t) i*sin(winkel) +Py;
     f7e:	a5 01       	movw	r20, r10
     f80:	94 01       	movw	r18, r8
     f82:	0e 94 8c 26 	call	0x4d18	; 0x4d18 <__mulsf3>
     f86:	20 e0       	ldi	r18, 0x00	; 0
     f88:	30 e0       	ldi	r19, 0x00	; 0
     f8a:	48 ef       	ldi	r20, 0xF8	; 248
     f8c:	51 e4       	ldi	r21, 0x41	; 65
     f8e:	0e 94 c6 23 	call	0x478c	; 0x478c <__addsf3>
     f92:	0e 94 00 25 	call	0x4a00	; 0x4a00 <__fixunssfsi>
     f96:	36 2e       	mov	r3, r22

		r=13;
		//Berechnen des Stundenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(stunde*30.0+minute/2.0)*M_PI/180.0-M_PI/2.0;
			x= (uint8_t) i*cos(winkel) +Px;
     f98:	a3 01       	movw	r20, r6
     f9a:	92 01       	movw	r18, r4
     f9c:	c7 01       	movw	r24, r14
     f9e:	b6 01       	movw	r22, r12
     fa0:	0e 94 8c 26 	call	0x4d18	; 0x4d18 <__mulsf3>
     fa4:	20 e0       	ldi	r18, 0x00	; 0
     fa6:	30 e0       	ldi	r19, 0x00	; 0
     fa8:	48 ef       	ldi	r20, 0xF8	; 248
     faa:	51 e4       	ldi	r21, 0x41	; 65
     fac:	0e 94 c6 23 	call	0x478c	; 0x478c <__addsf3>
     fb0:	0e 94 00 25 	call	0x4a00	; 0x4a00 <__fixunssfsi>
			y= (uint8_t) i*sin(winkel) +Py;

			drawPixel(x,y,0);
     fb4:	20 e0       	ldi	r18, 0x00	; 0
     fb6:	43 2d       	mov	r20, r3
     fb8:	8e 81       	ldd	r24, Y+6	; 0x06
     fba:	9f 81       	ldd	r25, Y+7	; 0x07
     fbc:	0e 94 d6 03 	call	0x7ac	; 0x7ac <_ZN7Display9drawPixelEhhh>
     fc0:	0f 5f       	subi	r16, 0xFF	; 255
     fc2:	1f 4f       	sbci	r17, 0xFF	; 255
			drawPixel(x,y,0);
		}

		r=13;
		//Berechnen des Stundenzeigers
		for(uint8_t i=0;i<r;i++){
     fc4:	0d 30       	cpi	r16, 0x0D	; 13
     fc6:	11 05       	cpc	r17, r1
     fc8:	89 f6       	brne	.-94     	; 0xf6c <_ZN7Display6analogEhhhh+0x234>
     fca:	cd c0       	rjmp	.+410    	; 0x1166 <_ZN7Display6analogEhhhh+0x42e>
	}
	else{
		r=25;
		//Berechnen des Minutenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(minute*6.0)*M_PI/180.0-M_PI/2.0;
     fcc:	64 2f       	mov	r22, r20
     fce:	70 e0       	ldi	r23, 0x00	; 0
     fd0:	80 e0       	ldi	r24, 0x00	; 0
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	0e 94 2e 25 	call	0x4a5c	; 0x4a5c <__floatsisf>
     fd8:	69 83       	std	Y+1, r22	; 0x01
     fda:	7a 83       	std	Y+2, r23	; 0x02
     fdc:	8b 83       	std	Y+3, r24	; 0x03
     fde:	9c 83       	std	Y+4, r25	; 0x04
     fe0:	20 e0       	ldi	r18, 0x00	; 0
     fe2:	30 e0       	ldi	r19, 0x00	; 0
     fe4:	40 ec       	ldi	r20, 0xC0	; 192
     fe6:	50 e4       	ldi	r21, 0x40	; 64
     fe8:	0e 94 8c 26 	call	0x4d18	; 0x4d18 <__mulsf3>
     fec:	2b ed       	ldi	r18, 0xDB	; 219
     fee:	3f e0       	ldi	r19, 0x0F	; 15
     ff0:	49 e4       	ldi	r20, 0x49	; 73
     ff2:	50 e4       	ldi	r21, 0x40	; 64
     ff4:	0e 94 8c 26 	call	0x4d18	; 0x4d18 <__mulsf3>
     ff8:	20 e0       	ldi	r18, 0x00	; 0
     ffa:	30 e0       	ldi	r19, 0x00	; 0
     ffc:	44 e3       	ldi	r20, 0x34	; 52
     ffe:	53 e4       	ldi	r21, 0x43	; 67
    1000:	0e 94 93 24 	call	0x4926	; 0x4926 <__divsf3>
    1004:	2b ed       	ldi	r18, 0xDB	; 219
    1006:	3f e0       	ldi	r19, 0x0F	; 15
    1008:	49 ec       	ldi	r20, 0xC9	; 201
    100a:	5f e3       	ldi	r21, 0x3F	; 63
    100c:	0e 94 c5 23 	call	0x478a	; 0x478a <__subsf3>
    1010:	6b 01       	movw	r12, r22
    1012:	7c 01       	movw	r14, r24
			x=(uint8_t) i*cos(winkel)+Px;
    1014:	0e 94 90 24 	call	0x4920	; 0x4920 <cos>
    1018:	4b 01       	movw	r8, r22
    101a:	5c 01       	movw	r10, r24
			y=(uint8_t) i*sin(winkel)+Py;
    101c:	c7 01       	movw	r24, r14
    101e:	b6 01       	movw	r22, r12
    1020:	0e 94 ef 26 	call	0x4dde	; 0x4dde <sin>
    1024:	2b 01       	movw	r4, r22
    1026:	3c 01       	movw	r6, r24
    1028:	00 e0       	ldi	r16, 0x00	; 0
    102a:	10 e0       	ldi	r17, 0x00	; 0
	else{
		r=25;
		//Berechnen des Minutenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(minute*6.0)*M_PI/180.0-M_PI/2.0;
			x=(uint8_t) i*cos(winkel)+Px;
    102c:	b8 01       	movw	r22, r16
    102e:	88 27       	eor	r24, r24
    1030:	77 fd       	sbrc	r23, 7
    1032:	80 95       	com	r24
    1034:	98 2f       	mov	r25, r24
    1036:	0e 94 2e 25 	call	0x4a5c	; 0x4a5c <__floatsisf>
    103a:	6b 01       	movw	r12, r22
    103c:	7c 01       	movw	r14, r24
			y=(uint8_t) i*sin(winkel)+Py;
    103e:	a3 01       	movw	r20, r6
    1040:	92 01       	movw	r18, r4
    1042:	0e 94 8c 26 	call	0x4d18	; 0x4d18 <__mulsf3>
    1046:	20 e0       	ldi	r18, 0x00	; 0
    1048:	30 e0       	ldi	r19, 0x00	; 0
    104a:	48 ef       	ldi	r20, 0xF8	; 248
    104c:	51 e4       	ldi	r21, 0x41	; 65
    104e:	0e 94 c6 23 	call	0x478c	; 0x478c <__addsf3>
    1052:	0e 94 00 25 	call	0x4a00	; 0x4a00 <__fixunssfsi>
    1056:	36 2e       	mov	r3, r22
	else{
		r=25;
		//Berechnen des Minutenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(minute*6.0)*M_PI/180.0-M_PI/2.0;
			x=(uint8_t) i*cos(winkel)+Px;
    1058:	a5 01       	movw	r20, r10
    105a:	94 01       	movw	r18, r8
    105c:	c7 01       	movw	r24, r14
    105e:	b6 01       	movw	r22, r12
    1060:	0e 94 8c 26 	call	0x4d18	; 0x4d18 <__mulsf3>
    1064:	20 e0       	ldi	r18, 0x00	; 0
    1066:	30 e0       	ldi	r19, 0x00	; 0
    1068:	48 ef       	ldi	r20, 0xF8	; 248
    106a:	51 e4       	ldi	r21, 0x41	; 65
    106c:	0e 94 c6 23 	call	0x478c	; 0x478c <__addsf3>
    1070:	0e 94 00 25 	call	0x4a00	; 0x4a00 <__fixunssfsi>
			y=(uint8_t) i*sin(winkel)+Py;

			drawPixel(x,y,0);
    1074:	20 e0       	ldi	r18, 0x00	; 0
    1076:	43 2d       	mov	r20, r3
    1078:	8e 81       	ldd	r24, Y+6	; 0x06
    107a:	9f 81       	ldd	r25, Y+7	; 0x07
    107c:	0e 94 d6 03 	call	0x7ac	; 0x7ac <_ZN7Display9drawPixelEhhh>
    1080:	0f 5f       	subi	r16, 0xFF	; 255
    1082:	1f 4f       	sbci	r17, 0xFF	; 255
		}
	}
	else{
		r=25;
		//Berechnen des Minutenzeigers
		for(uint8_t i=0;i<r;i++){
    1084:	09 31       	cpi	r16, 0x19	; 25
    1086:	11 05       	cpc	r17, r1
    1088:	89 f6       	brne	.-94     	; 0x102c <_ZN7Display6analogEhhhh+0x2f4>
		}

		r=17;
		//Berechnen des Stundenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(stunde*30.0+minute/2.0)*M_PI/180.0-M_PI/2.0;
    108a:	ed 81       	ldd	r30, Y+5	; 0x05
    108c:	6e 2f       	mov	r22, r30
    108e:	70 e0       	ldi	r23, 0x00	; 0
    1090:	80 e0       	ldi	r24, 0x00	; 0
    1092:	90 e0       	ldi	r25, 0x00	; 0
    1094:	0e 94 2e 25 	call	0x4a5c	; 0x4a5c <__floatsisf>
    1098:	20 e0       	ldi	r18, 0x00	; 0
    109a:	30 e0       	ldi	r19, 0x00	; 0
    109c:	40 ef       	ldi	r20, 0xF0	; 240
    109e:	51 e4       	ldi	r21, 0x41	; 65
    10a0:	0e 94 8c 26 	call	0x4d18	; 0x4d18 <__mulsf3>
    10a4:	6b 01       	movw	r12, r22
    10a6:	7c 01       	movw	r14, r24
    10a8:	20 e0       	ldi	r18, 0x00	; 0
    10aa:	30 e0       	ldi	r19, 0x00	; 0
    10ac:	40 e0       	ldi	r20, 0x00	; 0
    10ae:	5f e3       	ldi	r21, 0x3F	; 63
    10b0:	69 81       	ldd	r22, Y+1	; 0x01
    10b2:	7a 81       	ldd	r23, Y+2	; 0x02
    10b4:	8b 81       	ldd	r24, Y+3	; 0x03
    10b6:	9c 81       	ldd	r25, Y+4	; 0x04
    10b8:	0e 94 8c 26 	call	0x4d18	; 0x4d18 <__mulsf3>
    10bc:	9b 01       	movw	r18, r22
    10be:	ac 01       	movw	r20, r24
    10c0:	c7 01       	movw	r24, r14
    10c2:	b6 01       	movw	r22, r12
    10c4:	0e 94 c6 23 	call	0x478c	; 0x478c <__addsf3>
    10c8:	2b ed       	ldi	r18, 0xDB	; 219
    10ca:	3f e0       	ldi	r19, 0x0F	; 15
    10cc:	49 e4       	ldi	r20, 0x49	; 73
    10ce:	50 e4       	ldi	r21, 0x40	; 64
    10d0:	0e 94 8c 26 	call	0x4d18	; 0x4d18 <__mulsf3>
    10d4:	20 e0       	ldi	r18, 0x00	; 0
    10d6:	30 e0       	ldi	r19, 0x00	; 0
    10d8:	44 e3       	ldi	r20, 0x34	; 52
    10da:	53 e4       	ldi	r21, 0x43	; 67
    10dc:	0e 94 93 24 	call	0x4926	; 0x4926 <__divsf3>
    10e0:	2b ed       	ldi	r18, 0xDB	; 219
    10e2:	3f e0       	ldi	r19, 0x0F	; 15
    10e4:	49 ec       	ldi	r20, 0xC9	; 201
    10e6:	5f e3       	ldi	r21, 0x3F	; 63
    10e8:	0e 94 c5 23 	call	0x478a	; 0x478a <__subsf3>
    10ec:	6b 01       	movw	r12, r22
    10ee:	7c 01       	movw	r14, r24
			x= (uint8_t) i*cos(winkel) +Px;
    10f0:	0e 94 90 24 	call	0x4920	; 0x4920 <cos>
    10f4:	2b 01       	movw	r4, r22
    10f6:	3c 01       	movw	r6, r24
			y= (uint8_t) i*sin(winkel) +Py;
    10f8:	c7 01       	movw	r24, r14
    10fa:	b6 01       	movw	r22, r12
    10fc:	0e 94 ef 26 	call	0x4dde	; 0x4dde <sin>
    1100:	4b 01       	movw	r8, r22
    1102:	5c 01       	movw	r10, r24
    1104:	00 e0       	ldi	r16, 0x00	; 0
    1106:	10 e0       	ldi	r17, 0x00	; 0

		r=17;
		//Berechnen des Stundenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(stunde*30.0+minute/2.0)*M_PI/180.0-M_PI/2.0;
			x= (uint8_t) i*cos(winkel) +Px;
    1108:	b8 01       	movw	r22, r16
    110a:	88 27       	eor	r24, r24
    110c:	77 fd       	sbrc	r23, 7
    110e:	80 95       	com	r24
    1110:	98 2f       	mov	r25, r24
    1112:	0e 94 2e 25 	call	0x4a5c	; 0x4a5c <__floatsisf>
    1116:	6b 01       	movw	r12, r22
    1118:	7c 01       	movw	r14, r24
			y= (uint8_t) i*sin(winkel) +Py;
    111a:	a5 01       	movw	r20, r10
    111c:	94 01       	movw	r18, r8
    111e:	0e 94 8c 26 	call	0x4d18	; 0x4d18 <__mulsf3>
    1122:	20 e0       	ldi	r18, 0x00	; 0
    1124:	30 e0       	ldi	r19, 0x00	; 0
    1126:	48 ef       	ldi	r20, 0xF8	; 248
    1128:	51 e4       	ldi	r21, 0x41	; 65
    112a:	0e 94 c6 23 	call	0x478c	; 0x478c <__addsf3>
    112e:	0e 94 00 25 	call	0x4a00	; 0x4a00 <__fixunssfsi>
    1132:	36 2e       	mov	r3, r22

		r=17;
		//Berechnen des Stundenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(stunde*30.0+minute/2.0)*M_PI/180.0-M_PI/2.0;
			x= (uint8_t) i*cos(winkel) +Px;
    1134:	a3 01       	movw	r20, r6
    1136:	92 01       	movw	r18, r4
    1138:	c7 01       	movw	r24, r14
    113a:	b6 01       	movw	r22, r12
    113c:	0e 94 8c 26 	call	0x4d18	; 0x4d18 <__mulsf3>
    1140:	20 e0       	ldi	r18, 0x00	; 0
    1142:	30 e0       	ldi	r19, 0x00	; 0
    1144:	48 ef       	ldi	r20, 0xF8	; 248
    1146:	51 e4       	ldi	r21, 0x41	; 65
    1148:	0e 94 c6 23 	call	0x478c	; 0x478c <__addsf3>
    114c:	0e 94 00 25 	call	0x4a00	; 0x4a00 <__fixunssfsi>
			y= (uint8_t) i*sin(winkel) +Py;

			drawPixel(x,y,0);
    1150:	20 e0       	ldi	r18, 0x00	; 0
    1152:	43 2d       	mov	r20, r3
    1154:	8e 81       	ldd	r24, Y+6	; 0x06
    1156:	9f 81       	ldd	r25, Y+7	; 0x07
    1158:	0e 94 d6 03 	call	0x7ac	; 0x7ac <_ZN7Display9drawPixelEhhh>
    115c:	0f 5f       	subi	r16, 0xFF	; 255
    115e:	1f 4f       	sbci	r17, 0xFF	; 255
			drawPixel(x,y,0);
		}

		r=17;
		//Berechnen des Stundenzeigers
		for(uint8_t i=0;i<r;i++){
    1160:	01 31       	cpi	r16, 0x11	; 17
    1162:	11 05       	cpc	r17, r1
    1164:	89 f6       	brne	.-94     	; 0x1108 <_ZN7Display6analogEhhhh+0x3d0>
		}
	}
	

	//Anzeige der Zahlen
	draw_ASCI('1',32-charsize,0);
    1166:	20 e0       	ldi	r18, 0x00	; 0
    1168:	4a e1       	ldi	r20, 0x1A	; 26
    116a:	61 e3       	ldi	r22, 0x31	; 49
    116c:	8e 81       	ldd	r24, Y+6	; 0x06
    116e:	9f 81       	ldd	r25, Y+7	; 0x07
    1170:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
	draw_ASCI('2',32,0);
    1174:	20 e0       	ldi	r18, 0x00	; 0
    1176:	40 e2       	ldi	r20, 0x20	; 32
    1178:	62 e3       	ldi	r22, 0x32	; 50
    117a:	8e 81       	ldd	r24, Y+6	; 0x06
    117c:	9f 81       	ldd	r25, Y+7	; 0x07
    117e:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
	draw_ASCI('3',64-charsize,4*charhighte-charhighte/2);
    1182:	2c e1       	ldi	r18, 0x1C	; 28
    1184:	4a e3       	ldi	r20, 0x3A	; 58
    1186:	63 e3       	ldi	r22, 0x33	; 51
    1188:	8e 81       	ldd	r24, Y+6	; 0x06
    118a:	9f 81       	ldd	r25, Y+7	; 0x07
    118c:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
	draw_ASCI('6',32-charsize/2,7*charhighte);
    1190:	28 e3       	ldi	r18, 0x38	; 56
    1192:	4d e1       	ldi	r20, 0x1D	; 29
    1194:	66 e3       	ldi	r22, 0x36	; 54
    1196:	8e 81       	ldd	r24, Y+6	; 0x06
    1198:	9f 81       	ldd	r25, Y+7	; 0x07
    119a:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
	draw_ASCI('9',0,4*charhighte-charhighte/2);
    119e:	2c e1       	ldi	r18, 0x1C	; 28
    11a0:	40 e0       	ldi	r20, 0x00	; 0
    11a2:	69 e3       	ldi	r22, 0x39	; 57
    11a4:	8e 81       	ldd	r24, Y+6	; 0x06
    11a6:	9f 81       	ldd	r25, Y+7	; 0x07
    11a8:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>

	//anzeige des Rings fuer die Restlichen Stunden Zahlen
	//1
	drawPixel(26*cos((30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
    11ac:	20 e0       	ldi	r18, 0x00	; 0
    11ae:	48 e0       	ldi	r20, 0x08	; 8
    11b0:	6c e2       	ldi	r22, 0x2C	; 44
    11b2:	8e 81       	ldd	r24, Y+6	; 0x06
    11b4:	9f 81       	ldd	r25, Y+7	; 0x07
    11b6:	0e 94 d6 03 	call	0x7ac	; 0x7ac <_ZN7Display9drawPixelEhhh>
	//2
	drawPixel(26*cos((2*30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((2*30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
    11ba:	20 e0       	ldi	r18, 0x00	; 0
    11bc:	42 e1       	ldi	r20, 0x12	; 18
    11be:	65 e3       	ldi	r22, 0x35	; 53
    11c0:	8e 81       	ldd	r24, Y+6	; 0x06
    11c2:	9f 81       	ldd	r25, Y+7	; 0x07
    11c4:	0e 94 d6 03 	call	0x7ac	; 0x7ac <_ZN7Display9drawPixelEhhh>
	//4
	drawPixel(26*cos((4*30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((4*30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
    11c8:	20 e0       	ldi	r18, 0x00	; 0
    11ca:	4c e2       	ldi	r20, 0x2C	; 44
    11cc:	65 e3       	ldi	r22, 0x35	; 53
    11ce:	8e 81       	ldd	r24, Y+6	; 0x06
    11d0:	9f 81       	ldd	r25, Y+7	; 0x07
    11d2:	0e 94 d6 03 	call	0x7ac	; 0x7ac <_ZN7Display9drawPixelEhhh>
	//5
	drawPixel(26*cos((5*30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((5*30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
    11d6:	20 e0       	ldi	r18, 0x00	; 0
    11d8:	45 e3       	ldi	r20, 0x35	; 53
    11da:	6b e2       	ldi	r22, 0x2B	; 43
    11dc:	8e 81       	ldd	r24, Y+6	; 0x06
    11de:	9f 81       	ldd	r25, Y+7	; 0x07
    11e0:	0e 94 d6 03 	call	0x7ac	; 0x7ac <_ZN7Display9drawPixelEhhh>
	//7
	drawPixel(26*cos((7*30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((7*30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
    11e4:	20 e0       	ldi	r18, 0x00	; 0
    11e6:	45 e3       	ldi	r20, 0x35	; 53
    11e8:	61 e1       	ldi	r22, 0x11	; 17
    11ea:	8e 81       	ldd	r24, Y+6	; 0x06
    11ec:	9f 81       	ldd	r25, Y+7	; 0x07
    11ee:	0e 94 d6 03 	call	0x7ac	; 0x7ac <_ZN7Display9drawPixelEhhh>
	//8
	drawPixel(26*cos((8*30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((8*30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
    11f2:	20 e0       	ldi	r18, 0x00	; 0
    11f4:	4c e2       	ldi	r20, 0x2C	; 44
    11f6:	68 e0       	ldi	r22, 0x08	; 8
    11f8:	8e 81       	ldd	r24, Y+6	; 0x06
    11fa:	9f 81       	ldd	r25, Y+7	; 0x07
    11fc:	0e 94 d6 03 	call	0x7ac	; 0x7ac <_ZN7Display9drawPixelEhhh>
	//10
	drawPixel(26*cos((10*30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((10*30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
    1200:	20 e0       	ldi	r18, 0x00	; 0
    1202:	41 e1       	ldi	r20, 0x11	; 17
    1204:	68 e0       	ldi	r22, 0x08	; 8
    1206:	8e 81       	ldd	r24, Y+6	; 0x06
    1208:	9f 81       	ldd	r25, Y+7	; 0x07
    120a:	0e 94 d6 03 	call	0x7ac	; 0x7ac <_ZN7Display9drawPixelEhhh>
	//11
	drawPixel(26*cos((11*30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((11*30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
    120e:	20 e0       	ldi	r18, 0x00	; 0
    1210:	48 e0       	ldi	r20, 0x08	; 8
    1212:	62 e1       	ldi	r22, 0x12	; 18
    1214:	8e 81       	ldd	r24, Y+6	; 0x06
    1216:	9f 81       	ldd	r25, Y+7	; 0x07
    1218:	0e 94 d6 03 	call	0x7ac	; 0x7ac <_ZN7Display9drawPixelEhhh>
}
    121c:	27 96       	adiw	r28, 0x07	; 7
    121e:	0f b6       	in	r0, 0x3f	; 63
    1220:	f8 94       	cli
    1222:	de bf       	out	0x3e, r29	; 62
    1224:	0f be       	out	0x3f, r0	; 63
    1226:	cd bf       	out	0x3d, r28	; 61
    1228:	df 91       	pop	r29
    122a:	cf 91       	pop	r28
    122c:	1f 91       	pop	r17
    122e:	0f 91       	pop	r16
    1230:	ff 90       	pop	r15
    1232:	ef 90       	pop	r14
    1234:	df 90       	pop	r13
    1236:	cf 90       	pop	r12
    1238:	bf 90       	pop	r11
    123a:	af 90       	pop	r10
    123c:	9f 90       	pop	r9
    123e:	8f 90       	pop	r8
    1240:	7f 90       	pop	r7
    1242:	6f 90       	pop	r6
    1244:	5f 90       	pop	r5
    1246:	4f 90       	pop	r4
    1248:	3f 90       	pop	r3
    124a:	2f 90       	pop	r2
    124c:	08 95       	ret

0000124e <_Z8ADC_Readh>:
#ifndef ADC_H_
#define ADC_H_

uint16_t ADC_Read( uint8_t channel )
{
	ADMUX = (ADMUX & ~(0x1F)) | (channel & 0x1F);
    124e:	ec e7       	ldi	r30, 0x7C	; 124
    1250:	f0 e0       	ldi	r31, 0x00	; 0
    1252:	90 81       	ld	r25, Z
    1254:	8f 71       	andi	r24, 0x1F	; 31
    1256:	90 7e       	andi	r25, 0xE0	; 224
    1258:	98 2b       	or	r25, r24
    125a:	90 83       	st	Z, r25
	ADCSRA |= (1<<ADSC);
    125c:	ea e7       	ldi	r30, 0x7A	; 122
    125e:	f0 e0       	ldi	r31, 0x00	; 0
    1260:	80 81       	ld	r24, Z
    1262:	80 64       	ori	r24, 0x40	; 64
    1264:	80 83       	st	Z, r24
	while (ADCSRA & (1<<ADSC) ) {
    1266:	80 81       	ld	r24, Z
    1268:	86 fd       	sbrc	r24, 6
    126a:	fd cf       	rjmp	.-6      	; 0x1266 <_Z8ADC_Readh+0x18>
	}
	return ADCW;
    126c:	80 91 78 00 	lds	r24, 0x0078
    1270:	90 91 79 00 	lds	r25, 0x0079
}
    1274:	08 95       	ret

00001276 <_Z14Batteriestatusv>:
	return (uint16_t)( sum / nsamples );
}

double batterie;
int8_t Batteriestatus(){
	uint16_t ADCwert=ADC_Read(0);
    1276:	80 e0       	ldi	r24, 0x00	; 0
    1278:	0e 94 27 09 	call	0x124e	; 0x124e <_Z8ADC_Readh>
	batterie = (ADCwert/1023.0)*3.2*SPANNUNGSTEILER;
    127c:	bc 01       	movw	r22, r24
    127e:	80 e0       	ldi	r24, 0x00	; 0
    1280:	90 e0       	ldi	r25, 0x00	; 0
    1282:	0e 94 2c 25 	call	0x4a58	; 0x4a58 <__floatunsisf>
    1286:	20 e0       	ldi	r18, 0x00	; 0
    1288:	30 ec       	ldi	r19, 0xC0	; 192
    128a:	4f e7       	ldi	r20, 0x7F	; 127
    128c:	54 e4       	ldi	r21, 0x44	; 68
    128e:	0e 94 93 24 	call	0x4926	; 0x4926 <__divsf3>
    1292:	2d ec       	ldi	r18, 0xCD	; 205
    1294:	3c ec       	ldi	r19, 0xCC	; 204
    1296:	4c e4       	ldi	r20, 0x4C	; 76
    1298:	50 e4       	ldi	r21, 0x40	; 64
    129a:	0e 94 8c 26 	call	0x4d18	; 0x4d18 <__mulsf3>
    129e:	2b e7       	ldi	r18, 0x7B	; 123
    12a0:	34 e1       	ldi	r19, 0x14	; 20
    12a2:	4e ef       	ldi	r20, 0xFE	; 254
    12a4:	5f e3       	ldi	r21, 0x3F	; 63
    12a6:	0e 94 8c 26 	call	0x4d18	; 0x4d18 <__mulsf3>
    12aa:	60 93 05 03 	sts	0x0305, r22
    12ae:	70 93 06 03 	sts	0x0306, r23
    12b2:	80 93 07 03 	sts	0x0307, r24
    12b6:	90 93 08 03 	sts	0x0308, r25
	return ((batterie-3.0)/(4.2-3.0)*100);
    12ba:	20 e0       	ldi	r18, 0x00	; 0
    12bc:	30 e0       	ldi	r19, 0x00	; 0
    12be:	40 e4       	ldi	r20, 0x40	; 64
    12c0:	50 e4       	ldi	r21, 0x40	; 64
    12c2:	0e 94 c5 23 	call	0x478a	; 0x478a <__subsf3>
    12c6:	28 e9       	ldi	r18, 0x98	; 152
    12c8:	39 e9       	ldi	r19, 0x99	; 153
    12ca:	49 e9       	ldi	r20, 0x99	; 153
    12cc:	5f e3       	ldi	r21, 0x3F	; 63
    12ce:	0e 94 93 24 	call	0x4926	; 0x4926 <__divsf3>
    12d2:	20 e0       	ldi	r18, 0x00	; 0
    12d4:	30 e0       	ldi	r19, 0x00	; 0
    12d6:	48 ec       	ldi	r20, 0xC8	; 200
    12d8:	52 e4       	ldi	r21, 0x42	; 66
    12da:	0e 94 8c 26 	call	0x4d18	; 0x4d18 <__mulsf3>
    12de:	0e 94 fb 24 	call	0x49f6	; 0x49f6 <__fixsfsi>
    12e2:	86 2f       	mov	r24, r22
}
    12e4:	08 95       	ret

000012e6 <_Z14willkommenpagev>:
#ifndef SEITEN_H_
#define SEITEN_H_

//Diese Funktionen schreiben nur in den Framebuffer und das Schreiben passiert in der Main ueber einen Interupt

void willkommenpage(){
    12e6:	cf 92       	push	r12
    12e8:	df 92       	push	r13
    12ea:	ef 92       	push	r14
    12ec:	ff 92       	push	r15
    12ee:	0f 93       	push	r16
    12f0:	1f 93       	push	r17
    12f2:	cf 93       	push	r28
    12f4:	df 93       	push	r29
    12f6:	cd b7       	in	r28, 0x3d	; 61
    12f8:	de b7       	in	r29, 0x3e	; 62
    12fa:	64 97       	sbiw	r28, 0x14	; 20
    12fc:	0f b6       	in	r0, 0x3f	; 63
    12fe:	f8 94       	cli
    1300:	de bf       	out	0x3e, r29	; 62
    1302:	0f be       	out	0x3f, r0	; 63
    1304:	cd bf       	out	0x3d, r28	; 61
	char buffer[20];
	uint8_t buffersize;
	oled.clearFrame();
    1306:	8c e1       	ldi	r24, 0x1C	; 28
    1308:	93 e0       	ldi	r25, 0x03	; 3
    130a:	0e 94 ed 02 	call	0x5da	; 0x5da <_ZN7Display10clearFrameEv>
	buffersize=sprintf(buffer,"Fahradcomputer");
    130e:	8f e0       	ldi	r24, 0x0F	; 15
    1310:	e0 e0       	ldi	r30, 0x00	; 0
    1312:	f1 e0       	ldi	r31, 0x01	; 1
    1314:	8e 01       	movw	r16, r28
    1316:	0f 5f       	subi	r16, 0xFF	; 255
    1318:	1f 4f       	sbci	r17, 0xFF	; 255
    131a:	d8 01       	movw	r26, r16
    131c:	01 90       	ld	r0, Z+
    131e:	0d 92       	st	X+, r0
    1320:	8a 95       	dec	r24
    1322:	e1 f7       	brne	.-8      	; 0x131c <_Z14willkommenpagev+0x36>
    1324:	c0 2e       	mov	r12, r16
    1326:	d1 2e       	mov	r13, r17
    1328:	78 01       	movw	r14, r16
    132a:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0; i < buffersize;i++){
		oled.draw_ASCI(buffer[i],i*charsize,0);
    132c:	f7 01       	movw	r30, r14
    132e:	61 91       	ld	r22, Z+
    1330:	7f 01       	movw	r14, r30
    1332:	20 e0       	ldi	r18, 0x00	; 0
    1334:	41 2f       	mov	r20, r17
    1336:	8c e1       	ldi	r24, 0x1C	; 28
    1338:	93 e0       	ldi	r25, 0x03	; 3
    133a:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    133e:	1a 5f       	subi	r17, 0xFA	; 250
void willkommenpage(){
	char buffer[20];
	uint8_t buffersize;
	oled.clearFrame();
	buffersize=sprintf(buffer,"Fahradcomputer");
	for(uint8_t i=0; i < buffersize;i++){
    1340:	14 35       	cpi	r17, 0x54	; 84
    1342:	a1 f7       	brne	.-24     	; 0x132c <_Z14willkommenpagev+0x46>
		oled.draw_ASCI(buffer[i],i*charsize,0);
	}
	buffersize=sprintf(buffer,"--------------");
    1344:	8f e0       	ldi	r24, 0x0F	; 15
    1346:	ef e0       	ldi	r30, 0x0F	; 15
    1348:	f1 e0       	ldi	r31, 0x01	; 1
    134a:	de 01       	movw	r26, r28
    134c:	11 96       	adiw	r26, 0x01	; 1
    134e:	01 90       	ld	r0, Z+
    1350:	0d 92       	st	X+, r0
    1352:	8a 95       	dec	r24
    1354:	e1 f7       	brne	.-8      	; 0x134e <_Z14willkommenpagev+0x68>
    1356:	ec 2c       	mov	r14, r12
    1358:	fd 2c       	mov	r15, r13
    135a:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0; i < buffersize;i++){
		oled.draw_ASCI(buffer[i],i*charsize,8);
    135c:	f7 01       	movw	r30, r14
    135e:	61 91       	ld	r22, Z+
    1360:	7f 01       	movw	r14, r30
    1362:	28 e0       	ldi	r18, 0x08	; 8
    1364:	41 2f       	mov	r20, r17
    1366:	8c e1       	ldi	r24, 0x1C	; 28
    1368:	93 e0       	ldi	r25, 0x03	; 3
    136a:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    136e:	1a 5f       	subi	r17, 0xFA	; 250
	buffersize=sprintf(buffer,"Fahradcomputer");
	for(uint8_t i=0; i < buffersize;i++){
		oled.draw_ASCI(buffer[i],i*charsize,0);
	}
	buffersize=sprintf(buffer,"--------------");
	for(uint8_t i=0; i < buffersize;i++){
    1370:	14 35       	cpi	r17, 0x54	; 84
    1372:	a1 f7       	brne	.-24     	; 0x135c <_Z14willkommenpagev+0x76>
		oled.draw_ASCI(buffer[i],i*charsize,8);
	}
	buffersize=sprintf(buffer,"Version: %.2f",VERSIONSNUMMER);
    1374:	8f e3       	ldi	r24, 0x3F	; 63
    1376:	8f 93       	push	r24
    1378:	86 ea       	ldi	r24, 0xA6	; 166
    137a:	8f 93       	push	r24
    137c:	86 e6       	ldi	r24, 0x66	; 102
    137e:	8f 93       	push	r24
    1380:	8f 93       	push	r24
    1382:	8e e1       	ldi	r24, 0x1E	; 30
    1384:	91 e0       	ldi	r25, 0x01	; 1
    1386:	9f 93       	push	r25
    1388:	8f 93       	push	r24
    138a:	ce 01       	movw	r24, r28
    138c:	01 96       	adiw	r24, 0x01	; 1
    138e:	9f 93       	push	r25
    1390:	8f 93       	push	r24
    1392:	0e 94 0f 2c 	call	0x581e	; 0x581e <sprintf>
	for(uint8_t i=0; i < buffersize;i++){
    1396:	0f b6       	in	r0, 0x3f	; 63
    1398:	f8 94       	cli
    139a:	de bf       	out	0x3e, r29	; 62
    139c:	0f be       	out	0x3f, r0	; 63
    139e:	cd bf       	out	0x3d, r28	; 61
    13a0:	88 23       	and	r24, r24
    13a2:	d1 f0       	breq	.+52     	; 0x13d8 <_Z14willkommenpagev+0xf2>
    13a4:	81 50       	subi	r24, 0x01	; 1
    13a6:	68 94       	set
    13a8:	ee 24       	eor	r14, r14
    13aa:	e1 f8       	bld	r14, 1
    13ac:	f1 2c       	mov	r15, r1
    13ae:	ec 0e       	add	r14, r28
    13b0:	fd 1e       	adc	r15, r29
    13b2:	e8 0e       	add	r14, r24
    13b4:	f1 1c       	adc	r15, r1
    13b6:	0c 2d       	mov	r16, r12
    13b8:	1d 2d       	mov	r17, r13
    13ba:	d1 2c       	mov	r13, r1
		oled.draw_ASCI(buffer[i],i*charsize,32);
    13bc:	f8 01       	movw	r30, r16
    13be:	61 91       	ld	r22, Z+
    13c0:	8f 01       	movw	r16, r30
    13c2:	20 e2       	ldi	r18, 0x20	; 32
    13c4:	4d 2d       	mov	r20, r13
    13c6:	8c e1       	ldi	r24, 0x1C	; 28
    13c8:	93 e0       	ldi	r25, 0x03	; 3
    13ca:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    13ce:	f6 e0       	ldi	r31, 0x06	; 6
    13d0:	df 0e       	add	r13, r31
	buffersize=sprintf(buffer,"--------------");
	for(uint8_t i=0; i < buffersize;i++){
		oled.draw_ASCI(buffer[i],i*charsize,8);
	}
	buffersize=sprintf(buffer,"Version: %.2f",VERSIONSNUMMER);
	for(uint8_t i=0; i < buffersize;i++){
    13d2:	0e 15       	cp	r16, r14
    13d4:	1f 05       	cpc	r17, r15
    13d6:	91 f7       	brne	.-28     	; 0x13bc <_Z14willkommenpagev+0xd6>
		oled.draw_ASCI(buffer[i],i*charsize,32);

	}
	oled.sendFrame();
    13d8:	8c e1       	ldi	r24, 0x1C	; 28
    13da:	93 e0       	ldi	r25, 0x03	; 3
    13dc:	0e 94 93 03 	call	0x726	; 0x726 <_ZN7Display9sendFrameEv>
	oled.clearFrame();
    13e0:	8c e1       	ldi	r24, 0x1C	; 28
    13e2:	93 e0       	ldi	r25, 0x03	; 3
    13e4:	0e 94 ed 02 	call	0x5da	; 0x5da <_ZN7Display10clearFrameEv>
    13e8:	85 e0       	ldi	r24, 0x05	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    13ea:	2f e7       	ldi	r18, 0x7F	; 127
    13ec:	38 e3       	ldi	r19, 0x38	; 56
    13ee:	91 e0       	ldi	r25, 0x01	; 1
    13f0:	21 50       	subi	r18, 0x01	; 1
    13f2:	30 40       	sbci	r19, 0x00	; 0
    13f4:	90 40       	sbci	r25, 0x00	; 0
    13f6:	e1 f7       	brne	.-8      	; 0x13f0 <_Z14willkommenpagev+0x10a>
    13f8:	00 c0       	rjmp	.+0      	; 0x13fa <_Z14willkommenpagev+0x114>
    13fa:	00 00       	nop
    13fc:	ef e7       	ldi	r30, 0x7F	; 127
    13fe:	f8 e3       	ldi	r31, 0x38	; 56
    1400:	21 e0       	ldi	r18, 0x01	; 1
    1402:	e1 50       	subi	r30, 0x01	; 1
    1404:	f0 40       	sbci	r31, 0x00	; 0
    1406:	20 40       	sbci	r18, 0x00	; 0
    1408:	e1 f7       	brne	.-8      	; 0x1402 <_Z14willkommenpagev+0x11c>
    140a:	00 c0       	rjmp	.+0      	; 0x140c <_Z14willkommenpagev+0x126>
    140c:	00 00       	nop
    140e:	81 50       	subi	r24, 0x01	; 1
	for (uint8_t i=0;i<5;i++)
    1410:	61 f7       	brne	.-40     	; 0x13ea <_Z14willkommenpagev+0x104>
	{
		_delay_ms(50);
		_delay_ms(50);
	}
}
    1412:	64 96       	adiw	r28, 0x14	; 20
    1414:	0f b6       	in	r0, 0x3f	; 63
    1416:	f8 94       	cli
    1418:	de bf       	out	0x3e, r29	; 62
    141a:	0f be       	out	0x3f, r0	; 63
    141c:	cd bf       	out	0x3d, r28	; 61
    141e:	df 91       	pop	r29
    1420:	cf 91       	pop	r28
    1422:	1f 91       	pop	r17
    1424:	0f 91       	pop	r16
    1426:	ff 90       	pop	r15
    1428:	ef 90       	pop	r14
    142a:	df 90       	pop	r13
    142c:	cf 90       	pop	r12
    142e:	08 95       	ret

00001430 <_Z6headerh>:

void header(uint8_t page){
    1430:	ef 92       	push	r14
    1432:	ff 92       	push	r15
    1434:	0f 93       	push	r16
    1436:	1f 93       	push	r17
    1438:	cf 93       	push	r28
    143a:	df 93       	push	r29
    143c:	cd b7       	in	r28, 0x3d	; 61
    143e:	de b7       	in	r29, 0x3e	; 62
    1440:	64 97       	sbiw	r28, 0x14	; 20
    1442:	0f b6       	in	r0, 0x3f	; 63
    1444:	f8 94       	cli
    1446:	de bf       	out	0x3e, r29	; 62
    1448:	0f be       	out	0x3f, r0	; 63
    144a:	cd bf       	out	0x3d, r28	; 61
	char buffer[20];
	uint8_t buffersize=0;;
	switch (page) {
    144c:	81 11       	cpse	r24, r1
    144e:	4d c0       	rjmp	.+154    	; 0x14ea <_Z6headerh+0xba>
    1450:	0f 2e       	mov	r0, r31
    1452:	fd e4       	ldi	r31, 0x4D	; 77
    1454:	ef 2e       	mov	r14, r31
    1456:	f7 e0       	ldi	r31, 0x07	; 7
    1458:	ff 2e       	mov	r15, r31
    145a:	f0 2d       	mov	r31, r0
    145c:	10 e0       	ldi	r17, 0x00	; 0
		case 0:	//standard Header fuer fast alle Pages
			for(uint8_t i=0;i<8;i++){
				oled.draw_ASCI(rtc.msg_uhr[i],i*charsize,0);
    145e:	f7 01       	movw	r30, r14
    1460:	61 91       	ld	r22, Z+
    1462:	7f 01       	movw	r14, r30
    1464:	20 e0       	ldi	r18, 0x00	; 0
    1466:	41 2f       	mov	r20, r17
    1468:	8c e1       	ldi	r24, 0x1C	; 28
    146a:	93 e0       	ldi	r25, 0x03	; 3
    146c:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    1470:	1a 5f       	subi	r17, 0xFA	; 250
void header(uint8_t page){
	char buffer[20];
	uint8_t buffersize=0;;
	switch (page) {
		case 0:	//standard Header fuer fast alle Pages
			for(uint8_t i=0;i<8;i++){
    1472:	10 33       	cpi	r17, 0x30	; 48
    1474:	a1 f7       	brne	.-24     	; 0x145e <_Z6headerh+0x2e>
				oled.draw_ASCI(rtc.msg_uhr[i],i*charsize,0);
			}
			buffersize=sprintf(buffer,"Bat: %i%%",Batteriestatus());
    1476:	0e 94 3b 09 	call	0x1276	; 0x1276 <_Z14Batteriestatusv>
    147a:	28 2f       	mov	r18, r24
    147c:	33 27       	eor	r19, r19
    147e:	27 fd       	sbrc	r18, 7
    1480:	30 95       	com	r19
    1482:	3f 93       	push	r19
    1484:	8f 93       	push	r24
    1486:	8c e2       	ldi	r24, 0x2C	; 44
    1488:	91 e0       	ldi	r25, 0x01	; 1
    148a:	9f 93       	push	r25
    148c:	8f 93       	push	r24
    148e:	ce 01       	movw	r24, r28
    1490:	01 96       	adiw	r24, 0x01	; 1
    1492:	9f 93       	push	r25
    1494:	8f 93       	push	r24
    1496:	0e 94 0f 2c 	call	0x581e	; 0x581e <sprintf>
			for(uint8_t i=((SSD1306_WIDTH/charsize)-buffersize);i<(SSD1306_WIDTH/charsize);i++){
    149a:	25 e1       	ldi	r18, 0x15	; 21
    149c:	f2 2e       	mov	r15, r18
    149e:	f8 1a       	sub	r15, r24
    14a0:	0f 90       	pop	r0
    14a2:	0f 90       	pop	r0
    14a4:	0f 90       	pop	r0
    14a6:	0f 90       	pop	r0
    14a8:	0f 90       	pop	r0
    14aa:	0f 90       	pop	r0
    14ac:	f4 e1       	ldi	r31, 0x14	; 20
    14ae:	ff 15       	cp	r31, r15
    14b0:	e0 f0       	brcs	.+56     	; 0x14ea <_Z6headerh+0xba>
    14b2:	ef 2c       	mov	r14, r15
    14b4:	ee 0c       	add	r14, r14
    14b6:	ef 0c       	add	r14, r15
    14b8:	ee 0c       	add	r14, r14
				oled.draw_ASCI(buffer[i-((SSD1306_WIDTH/charsize)-buffersize)],i*charsize,0);
    14ba:	8c 01       	movw	r16, r24
    14bc:	11 27       	eor	r17, r17
    14be:	e1 e0       	ldi	r30, 0x01	; 1
    14c0:	f0 e0       	ldi	r31, 0x00	; 0
    14c2:	ec 0f       	add	r30, r28
    14c4:	fd 1f       	adc	r31, r29
    14c6:	ef 0d       	add	r30, r15
    14c8:	f1 1d       	adc	r31, r1
    14ca:	e0 0f       	add	r30, r16
    14cc:	f1 1f       	adc	r31, r17
    14ce:	75 97       	sbiw	r30, 0x15	; 21
    14d0:	20 e0       	ldi	r18, 0x00	; 0
    14d2:	4e 2d       	mov	r20, r14
    14d4:	60 81       	ld	r22, Z
    14d6:	8c e1       	ldi	r24, 0x1C	; 28
    14d8:	93 e0       	ldi	r25, 0x03	; 3
    14da:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
		case 0:	//standard Header fuer fast alle Pages
			for(uint8_t i=0;i<8;i++){
				oled.draw_ASCI(rtc.msg_uhr[i],i*charsize,0);
			}
			buffersize=sprintf(buffer,"Bat: %i%%",Batteriestatus());
			for(uint8_t i=((SSD1306_WIDTH/charsize)-buffersize);i<(SSD1306_WIDTH/charsize);i++){
    14de:	f3 94       	inc	r15
    14e0:	26 e0       	ldi	r18, 0x06	; 6
    14e2:	e2 0e       	add	r14, r18
    14e4:	85 e1       	ldi	r24, 0x15	; 21
    14e6:	f8 12       	cpse	r15, r24
    14e8:	ea cf       	rjmp	.-44     	; 0x14be <_Z6headerh+0x8e>
			}
			break;
		default:
			break;
	}
}
    14ea:	64 96       	adiw	r28, 0x14	; 20
    14ec:	0f b6       	in	r0, 0x3f	; 63
    14ee:	f8 94       	cli
    14f0:	de bf       	out	0x3e, r29	; 62
    14f2:	0f be       	out	0x3f, r0	; 63
    14f4:	cd bf       	out	0x3d, r28	; 61
    14f6:	df 91       	pop	r29
    14f8:	cf 91       	pop	r28
    14fa:	1f 91       	pop	r17
    14fc:	0f 91       	pop	r16
    14fe:	ff 90       	pop	r15
    1500:	ef 90       	pop	r14
    1502:	08 95       	ret

00001504 <_Z6bottomh>:

void bottom(uint8_t page){
    1504:	1f 93       	push	r17
    1506:	cf 93       	push	r28
    1508:	df 93       	push	r29
	switch (page) {
    150a:	81 11       	cpse	r24, r1
    150c:	0d c0       	rjmp	.+26     	; 0x1528 <_Z6bottomh+0x24>
    150e:	c5 e5       	ldi	r28, 0x55	; 85
    1510:	d7 e0       	ldi	r29, 0x07	; 7
    1512:	10 e5       	ldi	r17, 0x50	; 80
		case 0:	//standard Header fuer fast alle Pages
			for(uint8_t i=0;i<8;i++){
				oled.draw_ASCI(rtc.msg_dat[i],i*charsize+(SSD1306_WIDTH-bitsderrtc*charsize),7*charhighte);
    1514:	69 91       	ld	r22, Y+
    1516:	28 e3       	ldi	r18, 0x38	; 56
    1518:	41 2f       	mov	r20, r17
    151a:	8c e1       	ldi	r24, 0x1C	; 28
    151c:	93 e0       	ldi	r25, 0x03	; 3
    151e:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    1522:	1a 5f       	subi	r17, 0xFA	; 250
}

void bottom(uint8_t page){
	switch (page) {
		case 0:	//standard Header fuer fast alle Pages
			for(uint8_t i=0;i<8;i++){
    1524:	10 38       	cpi	r17, 0x80	; 128
    1526:	b1 f7       	brne	.-20     	; 0x1514 <_Z6bottomh+0x10>
			}
			break;
		default:
			break;
		}
}
    1528:	df 91       	pop	r29
    152a:	cf 91       	pop	r28
    152c:	1f 91       	pop	r17
    152e:	08 95       	ret

00001530 <_Z16anzeige_richtungf>:

void anzeige_richtung(float winkel){
    1530:	cf 92       	push	r12
    1532:	df 92       	push	r13
    1534:	ef 92       	push	r14
    1536:	ff 92       	push	r15
    1538:	6b 01       	movw	r12, r22
    153a:	7c 01       	movw	r14, r24
	//finden der Ziffer fuer die Anzeige
	if ((winkel<45/2) || (winkel == 360-45/2))
    153c:	20 e0       	ldi	r18, 0x00	; 0
    153e:	30 e0       	ldi	r19, 0x00	; 0
    1540:	40 eb       	ldi	r20, 0xB0	; 176
    1542:	51 e4       	ldi	r21, 0x41	; 65
    1544:	0e 94 8c 24 	call	0x4918	; 0x4918 <__cmpsf2>
    1548:	88 23       	and	r24, r24
    154a:	54 f0       	brlt	.+20     	; 0x1560 <_Z16anzeige_richtungf+0x30>
    154c:	20 e0       	ldi	r18, 0x00	; 0
    154e:	30 e0       	ldi	r19, 0x00	; 0
    1550:	49 ea       	ldi	r20, 0xA9	; 169
    1552:	53 e4       	ldi	r21, 0x43	; 67
    1554:	c7 01       	movw	r24, r14
    1556:	b6 01       	movw	r22, r12
    1558:	0e 94 8c 24 	call	0x4918	; 0x4918 <__cmpsf2>
    155c:	81 11       	cpse	r24, r1
    155e:	08 c0       	rjmp	.+16     	; 0x1570 <_Z16anzeige_richtungf+0x40>
	{
		oled.draw_ASCI('N',80,3.5*charhighte);
    1560:	2c e1       	ldi	r18, 0x1C	; 28
    1562:	40 e5       	ldi	r20, 0x50	; 80
    1564:	6e e4       	ldi	r22, 0x4E	; 78
    1566:	8c e1       	ldi	r24, 0x1C	; 28
    1568:	93 e0       	ldi	r25, 0x03	; 3
    156a:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    156e:	99 c0       	rjmp	.+306    	; 0x16a2 <_Z16anzeige_richtungf+0x172>
	}
	else if (winkel<90-45/2)
    1570:	20 e0       	ldi	r18, 0x00	; 0
    1572:	30 e0       	ldi	r19, 0x00	; 0
    1574:	48 e8       	ldi	r20, 0x88	; 136
    1576:	52 e4       	ldi	r21, 0x42	; 66
    1578:	c7 01       	movw	r24, r14
    157a:	b6 01       	movw	r22, r12
    157c:	0e 94 8c 24 	call	0x4918	; 0x4918 <__cmpsf2>
    1580:	88 23       	and	r24, r24
    1582:	7c f4       	brge	.+30     	; 0x15a2 <_Z16anzeige_richtungf+0x72>
	{
		oled.draw_ASCI('N',80-charsize/2,3.5*charhighte);
    1584:	2c e1       	ldi	r18, 0x1C	; 28
    1586:	4d e4       	ldi	r20, 0x4D	; 77
    1588:	6e e4       	ldi	r22, 0x4E	; 78
    158a:	8c e1       	ldi	r24, 0x1C	; 28
    158c:	93 e0       	ldi	r25, 0x03	; 3
    158e:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
		oled.draw_ASCI('O',80+charsize/2,3.5*charhighte);
    1592:	2c e1       	ldi	r18, 0x1C	; 28
    1594:	43 e5       	ldi	r20, 0x53	; 83
    1596:	6f e4       	ldi	r22, 0x4F	; 79
    1598:	8c e1       	ldi	r24, 0x1C	; 28
    159a:	93 e0       	ldi	r25, 0x03	; 3
    159c:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    15a0:	80 c0       	rjmp	.+256    	; 0x16a2 <_Z16anzeige_richtungf+0x172>
	}
	else if (winkel<135-45/2)
    15a2:	20 e0       	ldi	r18, 0x00	; 0
    15a4:	30 e0       	ldi	r19, 0x00	; 0
    15a6:	42 ee       	ldi	r20, 0xE2	; 226
    15a8:	52 e4       	ldi	r21, 0x42	; 66
    15aa:	c7 01       	movw	r24, r14
    15ac:	b6 01       	movw	r22, r12
    15ae:	0e 94 8c 24 	call	0x4918	; 0x4918 <__cmpsf2>
    15b2:	88 23       	and	r24, r24
    15b4:	44 f4       	brge	.+16     	; 0x15c6 <_Z16anzeige_richtungf+0x96>
	{
		oled.draw_ASCI('O',80,3.5*charhighte);
    15b6:	2c e1       	ldi	r18, 0x1C	; 28
    15b8:	40 e5       	ldi	r20, 0x50	; 80
    15ba:	6f e4       	ldi	r22, 0x4F	; 79
    15bc:	8c e1       	ldi	r24, 0x1C	; 28
    15be:	93 e0       	ldi	r25, 0x03	; 3
    15c0:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    15c4:	6e c0       	rjmp	.+220    	; 0x16a2 <_Z16anzeige_richtungf+0x172>
	}
	else if (winkel<180-45/2)
    15c6:	20 e0       	ldi	r18, 0x00	; 0
    15c8:	30 e0       	ldi	r19, 0x00	; 0
    15ca:	4e e1       	ldi	r20, 0x1E	; 30
    15cc:	53 e4       	ldi	r21, 0x43	; 67
    15ce:	c7 01       	movw	r24, r14
    15d0:	b6 01       	movw	r22, r12
    15d2:	0e 94 8c 24 	call	0x4918	; 0x4918 <__cmpsf2>
    15d6:	88 23       	and	r24, r24
    15d8:	7c f4       	brge	.+30     	; 0x15f8 <_Z16anzeige_richtungf+0xc8>
	{
		oled.draw_ASCI('S',80-charsize/2,3.5*charhighte);
    15da:	2c e1       	ldi	r18, 0x1C	; 28
    15dc:	4d e4       	ldi	r20, 0x4D	; 77
    15de:	63 e5       	ldi	r22, 0x53	; 83
    15e0:	8c e1       	ldi	r24, 0x1C	; 28
    15e2:	93 e0       	ldi	r25, 0x03	; 3
    15e4:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
		oled.draw_ASCI('O',80+charsize/2,3.5*charhighte);
    15e8:	2c e1       	ldi	r18, 0x1C	; 28
    15ea:	43 e5       	ldi	r20, 0x53	; 83
    15ec:	6f e4       	ldi	r22, 0x4F	; 79
    15ee:	8c e1       	ldi	r24, 0x1C	; 28
    15f0:	93 e0       	ldi	r25, 0x03	; 3
    15f2:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    15f6:	55 c0       	rjmp	.+170    	; 0x16a2 <_Z16anzeige_richtungf+0x172>
	}
	else if (winkel<225-45/2)
    15f8:	20 e0       	ldi	r18, 0x00	; 0
    15fa:	30 e0       	ldi	r19, 0x00	; 0
    15fc:	4b e4       	ldi	r20, 0x4B	; 75
    15fe:	53 e4       	ldi	r21, 0x43	; 67
    1600:	c7 01       	movw	r24, r14
    1602:	b6 01       	movw	r22, r12
    1604:	0e 94 8c 24 	call	0x4918	; 0x4918 <__cmpsf2>
    1608:	88 23       	and	r24, r24
    160a:	44 f4       	brge	.+16     	; 0x161c <_Z16anzeige_richtungf+0xec>
	{
		oled.draw_ASCI('S',80,3.5*charhighte);
    160c:	2c e1       	ldi	r18, 0x1C	; 28
    160e:	40 e5       	ldi	r20, 0x50	; 80
    1610:	63 e5       	ldi	r22, 0x53	; 83
    1612:	8c e1       	ldi	r24, 0x1C	; 28
    1614:	93 e0       	ldi	r25, 0x03	; 3
    1616:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    161a:	43 c0       	rjmp	.+134    	; 0x16a2 <_Z16anzeige_richtungf+0x172>
	}
	else if (winkel<270-45/2)
    161c:	20 e0       	ldi	r18, 0x00	; 0
    161e:	30 e0       	ldi	r19, 0x00	; 0
    1620:	48 e7       	ldi	r20, 0x78	; 120
    1622:	53 e4       	ldi	r21, 0x43	; 67
    1624:	c7 01       	movw	r24, r14
    1626:	b6 01       	movw	r22, r12
    1628:	0e 94 8c 24 	call	0x4918	; 0x4918 <__cmpsf2>
    162c:	88 23       	and	r24, r24
    162e:	7c f4       	brge	.+30     	; 0x164e <_Z16anzeige_richtungf+0x11e>
	{
		oled.draw_ASCI('S',80-charsize/2,3.5*charhighte);
    1630:	2c e1       	ldi	r18, 0x1C	; 28
    1632:	4d e4       	ldi	r20, 0x4D	; 77
    1634:	63 e5       	ldi	r22, 0x53	; 83
    1636:	8c e1       	ldi	r24, 0x1C	; 28
    1638:	93 e0       	ldi	r25, 0x03	; 3
    163a:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
		oled.draw_ASCI('W',80+charsize/2,3.5*charhighte);
    163e:	2c e1       	ldi	r18, 0x1C	; 28
    1640:	43 e5       	ldi	r20, 0x53	; 83
    1642:	67 e5       	ldi	r22, 0x57	; 87
    1644:	8c e1       	ldi	r24, 0x1C	; 28
    1646:	93 e0       	ldi	r25, 0x03	; 3
    1648:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    164c:	2a c0       	rjmp	.+84     	; 0x16a2 <_Z16anzeige_richtungf+0x172>
	}
	else if (winkel<315-45/2)
    164e:	20 e0       	ldi	r18, 0x00	; 0
    1650:	30 e8       	ldi	r19, 0x80	; 128
    1652:	42 e9       	ldi	r20, 0x92	; 146
    1654:	53 e4       	ldi	r21, 0x43	; 67
    1656:	c7 01       	movw	r24, r14
    1658:	b6 01       	movw	r22, r12
    165a:	0e 94 8c 24 	call	0x4918	; 0x4918 <__cmpsf2>
    165e:	88 23       	and	r24, r24
    1660:	44 f4       	brge	.+16     	; 0x1672 <_Z16anzeige_richtungf+0x142>
	{
		oled.draw_ASCI('W',80,3.5*charhighte);
    1662:	2c e1       	ldi	r18, 0x1C	; 28
    1664:	40 e5       	ldi	r20, 0x50	; 80
    1666:	67 e5       	ldi	r22, 0x57	; 87
    1668:	8c e1       	ldi	r24, 0x1C	; 28
    166a:	93 e0       	ldi	r25, 0x03	; 3
    166c:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    1670:	18 c0       	rjmp	.+48     	; 0x16a2 <_Z16anzeige_richtungf+0x172>
	}
	else if (winkel<360-45/2)
    1672:	20 e0       	ldi	r18, 0x00	; 0
    1674:	30 e0       	ldi	r19, 0x00	; 0
    1676:	49 ea       	ldi	r20, 0xA9	; 169
    1678:	53 e4       	ldi	r21, 0x43	; 67
    167a:	c7 01       	movw	r24, r14
    167c:	b6 01       	movw	r22, r12
    167e:	0e 94 8c 24 	call	0x4918	; 0x4918 <__cmpsf2>
    1682:	88 23       	and	r24, r24
    1684:	74 f4       	brge	.+28     	; 0x16a2 <_Z16anzeige_richtungf+0x172>
	{
		oled.draw_ASCI('N',80-charsize/2,3.5*charhighte);
    1686:	2c e1       	ldi	r18, 0x1C	; 28
    1688:	4d e4       	ldi	r20, 0x4D	; 77
    168a:	6e e4       	ldi	r22, 0x4E	; 78
    168c:	8c e1       	ldi	r24, 0x1C	; 28
    168e:	93 e0       	ldi	r25, 0x03	; 3
    1690:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
		oled.draw_ASCI('W',80+charsize/2,3.5*charhighte);
    1694:	2c e1       	ldi	r18, 0x1C	; 28
    1696:	43 e5       	ldi	r20, 0x53	; 83
    1698:	67 e5       	ldi	r22, 0x57	; 87
    169a:	8c e1       	ldi	r24, 0x1C	; 28
    169c:	93 e0       	ldi	r25, 0x03	; 3
    169e:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
	}
}
    16a2:	ff 90       	pop	r15
    16a4:	ef 90       	pop	r14
    16a6:	df 90       	pop	r13
    16a8:	cf 90       	pop	r12
    16aa:	08 95       	ret

000016ac <_Z13anzeige_nadelhhf>:

void anzeige_nadel(uint8_t x, uint8_t y, float angle){
    16ac:	af 92       	push	r10
    16ae:	bf 92       	push	r11
    16b0:	cf 92       	push	r12
    16b2:	df 92       	push	r13
    16b4:	ef 92       	push	r14
    16b6:	ff 92       	push	r15
    16b8:	0f 93       	push	r16
    16ba:	1f 93       	push	r17
	//fixed parameters for drawing the arrow
	oled.draw_triangle(x,y,20,70,angle);
    16bc:	59 01       	movw	r10, r18
    16be:	6a 01       	movw	r12, r20
    16c0:	e1 2c       	mov	r14, r1
    16c2:	f1 2c       	mov	r15, r1
    16c4:	0c e8       	ldi	r16, 0x8C	; 140
    16c6:	12 e4       	ldi	r17, 0x42	; 66
    16c8:	24 e1       	ldi	r18, 0x14	; 20
    16ca:	46 2f       	mov	r20, r22
    16cc:	68 2f       	mov	r22, r24
    16ce:	8c e1       	ldi	r24, 0x1C	; 28
    16d0:	93 e0       	ldi	r25, 0x03	; 3
    16d2:	0e 94 b3 04 	call	0x966	; 0x966 <_ZN7Display13draw_triangleEhhhff>
}
    16d6:	1f 91       	pop	r17
    16d8:	0f 91       	pop	r16
    16da:	ff 90       	pop	r15
    16dc:	ef 90       	pop	r14
    16de:	df 90       	pop	r13
    16e0:	cf 90       	pop	r12
    16e2:	bf 90       	pop	r11
    16e4:	af 90       	pop	r10
    16e6:	08 95       	ret

000016e8 <_Z19anzeige_kleinenadelhhf>:
void anzeige_kleinenadel(uint8_t x, uint8_t y, float angle){
    16e8:	af 92       	push	r10
    16ea:	bf 92       	push	r11
    16ec:	cf 92       	push	r12
    16ee:	df 92       	push	r13
    16f0:	ef 92       	push	r14
    16f2:	ff 92       	push	r15
    16f4:	0f 93       	push	r16
    16f6:	1f 93       	push	r17
	//fixed parameters for drawing the arrow
	oled.draw_triangle(x,y,10,70,angle);
    16f8:	59 01       	movw	r10, r18
    16fa:	6a 01       	movw	r12, r20
    16fc:	e1 2c       	mov	r14, r1
    16fe:	f1 2c       	mov	r15, r1
    1700:	0c e8       	ldi	r16, 0x8C	; 140
    1702:	12 e4       	ldi	r17, 0x42	; 66
    1704:	2a e0       	ldi	r18, 0x0A	; 10
    1706:	46 2f       	mov	r20, r22
    1708:	68 2f       	mov	r22, r24
    170a:	8c e1       	ldi	r24, 0x1C	; 28
    170c:	93 e0       	ldi	r25, 0x03	; 3
    170e:	0e 94 b3 04 	call	0x966	; 0x966 <_ZN7Display13draw_triangleEhhhff>
}
    1712:	1f 91       	pop	r17
    1714:	0f 91       	pop	r16
    1716:	ff 90       	pop	r15
    1718:	ef 90       	pop	r14
    171a:	df 90       	pop	r13
    171c:	cf 90       	pop	r12
    171e:	bf 90       	pop	r11
    1720:	af 90       	pop	r10
    1722:	08 95       	ret

00001724 <_Z11menue_hauptv>:

void menue_haupt(){
    1724:	cf 92       	push	r12
    1726:	df 92       	push	r13
    1728:	ef 92       	push	r14
    172a:	ff 92       	push	r15
    172c:	0f 93       	push	r16
    172e:	1f 93       	push	r17
    1730:	cf 93       	push	r28
    1732:	df 93       	push	r29
    1734:	cd b7       	in	r28, 0x3d	; 61
    1736:	de b7       	in	r29, 0x3e	; 62
    1738:	64 97       	sbiw	r28, 0x14	; 20
    173a:	0f b6       	in	r0, 0x3f	; 63
    173c:	f8 94       	cli
    173e:	de bf       	out	0x3e, r29	; 62
    1740:	0f be       	out	0x3f, r0	; 63
    1742:	cd bf       	out	0x3d, r28	; 61
	char buffer[20];
	uint8_t buffersize=0;

	oled.clearFrame();
    1744:	8c e1       	ldi	r24, 0x1C	; 28
    1746:	93 e0       	ldi	r25, 0x03	; 3
    1748:	0e 94 ed 02 	call	0x5da	; 0x5da <_ZN7Display10clearFrameEv>
	buffersize=sprintf(buffer,"1:Fahradanzeige");
    174c:	80 e1       	ldi	r24, 0x10	; 16
    174e:	e6 e3       	ldi	r30, 0x36	; 54
    1750:	f1 e0       	ldi	r31, 0x01	; 1
    1752:	8e 01       	movw	r16, r28
    1754:	0f 5f       	subi	r16, 0xFF	; 255
    1756:	1f 4f       	sbci	r17, 0xFF	; 255
    1758:	d8 01       	movw	r26, r16
    175a:	01 90       	ld	r0, Z+
    175c:	0d 92       	st	X+, r0
    175e:	8a 95       	dec	r24
    1760:	e1 f7       	brne	.-8      	; 0x175a <_Z11menue_hauptv+0x36>
    1762:	e0 2e       	mov	r14, r16
    1764:	f1 2e       	mov	r15, r17
    1766:	68 01       	movw	r12, r16
    1768:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,0*charhighte);}
    176a:	f6 01       	movw	r30, r12
    176c:	61 91       	ld	r22, Z+
    176e:	6f 01       	movw	r12, r30
    1770:	20 e0       	ldi	r18, 0x00	; 0
    1772:	41 2f       	mov	r20, r17
    1774:	8c e1       	ldi	r24, 0x1C	; 28
    1776:	93 e0       	ldi	r25, 0x03	; 3
    1778:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    177c:	1a 5f       	subi	r17, 0xFA	; 250
    177e:	1a 35       	cpi	r17, 0x5A	; 90
    1780:	a1 f7       	brne	.-24     	; 0x176a <_Z11menue_hauptv+0x46>
	buffersize=sprintf(buffer,"2:Taschenrechner");
    1782:	81 e1       	ldi	r24, 0x11	; 17
    1784:	e6 e4       	ldi	r30, 0x46	; 70
    1786:	f1 e0       	ldi	r31, 0x01	; 1
    1788:	de 01       	movw	r26, r28
    178a:	11 96       	adiw	r26, 0x01	; 1
    178c:	01 90       	ld	r0, Z+
    178e:	0d 92       	st	X+, r0
    1790:	8a 95       	dec	r24
    1792:	e1 f7       	brne	.-8      	; 0x178c <_Z11menue_hauptv+0x68>
    1794:	ce 2c       	mov	r12, r14
    1796:	df 2c       	mov	r13, r15
    1798:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,1*charhighte);}
    179a:	f6 01       	movw	r30, r12
    179c:	61 91       	ld	r22, Z+
    179e:	6f 01       	movw	r12, r30
    17a0:	28 e0       	ldi	r18, 0x08	; 8
    17a2:	41 2f       	mov	r20, r17
    17a4:	8c e1       	ldi	r24, 0x1C	; 28
    17a6:	93 e0       	ldi	r25, 0x03	; 3
    17a8:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    17ac:	1a 5f       	subi	r17, 0xFA	; 250
    17ae:	10 36       	cpi	r17, 0x60	; 96
    17b0:	a1 f7       	brne	.-24     	; 0x179a <_Z11menue_hauptv+0x76>
	buffersize=sprintf(buffer,"3:Kompass");
    17b2:	8a e0       	ldi	r24, 0x0A	; 10
    17b4:	e7 e5       	ldi	r30, 0x57	; 87
    17b6:	f1 e0       	ldi	r31, 0x01	; 1
    17b8:	de 01       	movw	r26, r28
    17ba:	11 96       	adiw	r26, 0x01	; 1
    17bc:	01 90       	ld	r0, Z+
    17be:	0d 92       	st	X+, r0
    17c0:	8a 95       	dec	r24
    17c2:	e1 f7       	brne	.-8      	; 0x17bc <_Z11menue_hauptv+0x98>
    17c4:	ce 2c       	mov	r12, r14
    17c6:	df 2c       	mov	r13, r15
    17c8:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,2*charhighte);}
    17ca:	f6 01       	movw	r30, r12
    17cc:	61 91       	ld	r22, Z+
    17ce:	6f 01       	movw	r12, r30
    17d0:	20 e1       	ldi	r18, 0x10	; 16
    17d2:	41 2f       	mov	r20, r17
    17d4:	8c e1       	ldi	r24, 0x1C	; 28
    17d6:	93 e0       	ldi	r25, 0x03	; 3
    17d8:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    17dc:	1a 5f       	subi	r17, 0xFA	; 250
    17de:	16 33       	cpi	r17, 0x36	; 54
    17e0:	a1 f7       	brne	.-24     	; 0x17ca <_Z11menue_hauptv+0xa6>
	buffersize=sprintf(buffer,"4:Uhrmenue");
    17e2:	8b e0       	ldi	r24, 0x0B	; 11
    17e4:	e1 e6       	ldi	r30, 0x61	; 97
    17e6:	f1 e0       	ldi	r31, 0x01	; 1
    17e8:	de 01       	movw	r26, r28
    17ea:	11 96       	adiw	r26, 0x01	; 1
    17ec:	01 90       	ld	r0, Z+
    17ee:	0d 92       	st	X+, r0
    17f0:	8a 95       	dec	r24
    17f2:	e1 f7       	brne	.-8      	; 0x17ec <_Z11menue_hauptv+0xc8>
    17f4:	ce 2c       	mov	r12, r14
    17f6:	df 2c       	mov	r13, r15
    17f8:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,3*charhighte);}
    17fa:	f6 01       	movw	r30, r12
    17fc:	61 91       	ld	r22, Z+
    17fe:	6f 01       	movw	r12, r30
    1800:	28 e1       	ldi	r18, 0x18	; 24
    1802:	41 2f       	mov	r20, r17
    1804:	8c e1       	ldi	r24, 0x1C	; 28
    1806:	93 e0       	ldi	r25, 0x03	; 3
    1808:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    180c:	1a 5f       	subi	r17, 0xFA	; 250
    180e:	1c 33       	cpi	r17, 0x3C	; 60
    1810:	a1 f7       	brne	.-24     	; 0x17fa <_Z11menue_hauptv+0xd6>
	buffersize=sprintf(buffer,"5:Einstellungen");
    1812:	80 e1       	ldi	r24, 0x10	; 16
    1814:	ec e6       	ldi	r30, 0x6C	; 108
    1816:	f1 e0       	ldi	r31, 0x01	; 1
    1818:	de 01       	movw	r26, r28
    181a:	11 96       	adiw	r26, 0x01	; 1
    181c:	01 90       	ld	r0, Z+
    181e:	0d 92       	st	X+, r0
    1820:	8a 95       	dec	r24
    1822:	e1 f7       	brne	.-8      	; 0x181c <_Z11menue_hauptv+0xf8>
    1824:	ce 2c       	mov	r12, r14
    1826:	df 2c       	mov	r13, r15
    1828:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,4*charhighte);}
    182a:	f6 01       	movw	r30, r12
    182c:	61 91       	ld	r22, Z+
    182e:	6f 01       	movw	r12, r30
    1830:	20 e2       	ldi	r18, 0x20	; 32
    1832:	41 2f       	mov	r20, r17
    1834:	8c e1       	ldi	r24, 0x1C	; 28
    1836:	93 e0       	ldi	r25, 0x03	; 3
    1838:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    183c:	1a 5f       	subi	r17, 0xFA	; 250
    183e:	1a 35       	cpi	r17, 0x5A	; 90
    1840:	a1 f7       	brne	.-24     	; 0x182a <_Z11menue_hauptv+0x106>
	buffersize=sprintf(buffer,"6:Display aus");
    1842:	8e e0       	ldi	r24, 0x0E	; 14
    1844:	ec e7       	ldi	r30, 0x7C	; 124
    1846:	f1 e0       	ldi	r31, 0x01	; 1
    1848:	de 01       	movw	r26, r28
    184a:	11 96       	adiw	r26, 0x01	; 1
    184c:	01 90       	ld	r0, Z+
    184e:	0d 92       	st	X+, r0
    1850:	8a 95       	dec	r24
    1852:	e1 f7       	brne	.-8      	; 0x184c <_Z11menue_hauptv+0x128>
    1854:	ce 2c       	mov	r12, r14
    1856:	df 2c       	mov	r13, r15
    1858:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,5*charhighte);}
    185a:	f6 01       	movw	r30, r12
    185c:	61 91       	ld	r22, Z+
    185e:	6f 01       	movw	r12, r30
    1860:	28 e2       	ldi	r18, 0x28	; 40
    1862:	41 2f       	mov	r20, r17
    1864:	8c e1       	ldi	r24, 0x1C	; 28
    1866:	93 e0       	ldi	r25, 0x03	; 3
    1868:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    186c:	1a 5f       	subi	r17, 0xFA	; 250
    186e:	1e 34       	cpi	r17, 0x4E	; 78
    1870:	a1 f7       	brne	.-24     	; 0x185a <_Z11menue_hauptv+0x136>
	buffersize=sprintf(buffer,"7:Drucksensor");
    1872:	8e e0       	ldi	r24, 0x0E	; 14
    1874:	ea e8       	ldi	r30, 0x8A	; 138
    1876:	f1 e0       	ldi	r31, 0x01	; 1
    1878:	de 01       	movw	r26, r28
    187a:	11 96       	adiw	r26, 0x01	; 1
    187c:	01 90       	ld	r0, Z+
    187e:	0d 92       	st	X+, r0
    1880:	8a 95       	dec	r24
    1882:	e1 f7       	brne	.-8      	; 0x187c <_Z11menue_hauptv+0x158>
    1884:	ce 2c       	mov	r12, r14
    1886:	df 2c       	mov	r13, r15
    1888:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,6*charhighte);}
    188a:	f6 01       	movw	r30, r12
    188c:	61 91       	ld	r22, Z+
    188e:	6f 01       	movw	r12, r30
    1890:	20 e3       	ldi	r18, 0x30	; 48
    1892:	41 2f       	mov	r20, r17
    1894:	8c e1       	ldi	r24, 0x1C	; 28
    1896:	93 e0       	ldi	r25, 0x03	; 3
    1898:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    189c:	1a 5f       	subi	r17, 0xFA	; 250
    189e:	1e 34       	cpi	r17, 0x4E	; 78
    18a0:	a1 f7       	brne	.-24     	; 0x188a <_Z11menue_hauptv+0x166>
}
    18a2:	64 96       	adiw	r28, 0x14	; 20
    18a4:	0f b6       	in	r0, 0x3f	; 63
    18a6:	f8 94       	cli
    18a8:	de bf       	out	0x3e, r29	; 62
    18aa:	0f be       	out	0x3f, r0	; 63
    18ac:	cd bf       	out	0x3d, r28	; 61
    18ae:	df 91       	pop	r29
    18b0:	cf 91       	pop	r28
    18b2:	1f 91       	pop	r17
    18b4:	0f 91       	pop	r16
    18b6:	ff 90       	pop	r15
    18b8:	ef 90       	pop	r14
    18ba:	df 90       	pop	r13
    18bc:	cf 90       	pop	r12
    18be:	08 95       	ret

000018c0 <_Z11menue_einstv>:
void menue_einst(){
    18c0:	af 92       	push	r10
    18c2:	bf 92       	push	r11
    18c4:	df 92       	push	r13
    18c6:	ef 92       	push	r14
    18c8:	0f 93       	push	r16
    18ca:	1f 93       	push	r17
    18cc:	cf 93       	push	r28
    18ce:	df 93       	push	r29
    18d0:	cd b7       	in	r28, 0x3d	; 61
    18d2:	de b7       	in	r29, 0x3e	; 62
    18d4:	64 97       	sbiw	r28, 0x14	; 20
    18d6:	0f b6       	in	r0, 0x3f	; 63
    18d8:	f8 94       	cli
    18da:	de bf       	out	0x3e, r29	; 62
    18dc:	0f be       	out	0x3f, r0	; 63
    18de:	cd bf       	out	0x3d, r28	; 61
	char buffer[20];
	uint8_t buffersize=0;

	oled.clearFrame();
    18e0:	8c e1       	ldi	r24, 0x1C	; 28
    18e2:	93 e0       	ldi	r25, 0x03	; 3
    18e4:	0e 94 ed 02 	call	0x5da	; 0x5da <_ZN7Display10clearFrameEv>
	buffersize=sprintf(buffer,"1:Kompass kalib.");
    18e8:	81 e1       	ldi	r24, 0x11	; 17
    18ea:	e8 e9       	ldi	r30, 0x98	; 152
    18ec:	f1 e0       	ldi	r31, 0x01	; 1
    18ee:	8e 01       	movw	r16, r28
    18f0:	0f 5f       	subi	r16, 0xFF	; 255
    18f2:	1f 4f       	sbci	r17, 0xFF	; 255
    18f4:	d8 01       	movw	r26, r16
    18f6:	01 90       	ld	r0, Z+
    18f8:	0d 92       	st	X+, r0
    18fa:	8a 95       	dec	r24
    18fc:	e1 f7       	brne	.-8      	; 0x18f6 <_Z11menue_einstv+0x36>
    18fe:	d0 2e       	mov	r13, r16
    1900:	e1 2e       	mov	r14, r17
    1902:	58 01       	movw	r10, r16
    1904:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,0*charhighte);}
    1906:	f5 01       	movw	r30, r10
    1908:	61 91       	ld	r22, Z+
    190a:	5f 01       	movw	r10, r30
    190c:	20 e0       	ldi	r18, 0x00	; 0
    190e:	41 2f       	mov	r20, r17
    1910:	8c e1       	ldi	r24, 0x1C	; 28
    1912:	93 e0       	ldi	r25, 0x03	; 3
    1914:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    1918:	1a 5f       	subi	r17, 0xFA	; 250
    191a:	10 36       	cpi	r17, 0x60	; 96
    191c:	a1 f7       	brne	.-24     	; 0x1906 <_Z11menue_einstv+0x46>
	buffersize=sprintf(buffer,"2:Kompassverstaerkung");
    191e:	86 e1       	ldi	r24, 0x16	; 22
    1920:	e9 ea       	ldi	r30, 0xA9	; 169
    1922:	f1 e0       	ldi	r31, 0x01	; 1
    1924:	de 01       	movw	r26, r28
    1926:	11 96       	adiw	r26, 0x01	; 1
    1928:	01 90       	ld	r0, Z+
    192a:	0d 92       	st	X+, r0
    192c:	8a 95       	dec	r24
    192e:	e1 f7       	brne	.-8      	; 0x1928 <_Z11menue_einstv+0x68>
    1930:	ad 2c       	mov	r10, r13
    1932:	be 2c       	mov	r11, r14
    1934:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,1*charhighte);}
    1936:	f5 01       	movw	r30, r10
    1938:	61 91       	ld	r22, Z+
    193a:	5f 01       	movw	r10, r30
    193c:	28 e0       	ldi	r18, 0x08	; 8
    193e:	41 2f       	mov	r20, r17
    1940:	8c e1       	ldi	r24, 0x1C	; 28
    1942:	93 e0       	ldi	r25, 0x03	; 3
    1944:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    1948:	1a 5f       	subi	r17, 0xFA	; 250
    194a:	1e 37       	cpi	r17, 0x7E	; 126
    194c:	a1 f7       	brne	.-24     	; 0x1936 <_Z11menue_einstv+0x76>
	buffersize=sprintf(buffer,"3:Uhr einstellen");
    194e:	81 e1       	ldi	r24, 0x11	; 17
    1950:	ef eb       	ldi	r30, 0xBF	; 191
    1952:	f1 e0       	ldi	r31, 0x01	; 1
    1954:	de 01       	movw	r26, r28
    1956:	11 96       	adiw	r26, 0x01	; 1
    1958:	01 90       	ld	r0, Z+
    195a:	0d 92       	st	X+, r0
    195c:	8a 95       	dec	r24
    195e:	e1 f7       	brne	.-8      	; 0x1958 <_Z11menue_einstv+0x98>
    1960:	ad 2c       	mov	r10, r13
    1962:	be 2c       	mov	r11, r14
    1964:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,2*charhighte);}
    1966:	f5 01       	movw	r30, r10
    1968:	61 91       	ld	r22, Z+
    196a:	5f 01       	movw	r10, r30
    196c:	20 e1       	ldi	r18, 0x10	; 16
    196e:	41 2f       	mov	r20, r17
    1970:	8c e1       	ldi	r24, 0x1C	; 28
    1972:	93 e0       	ldi	r25, 0x03	; 3
    1974:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    1978:	1a 5f       	subi	r17, 0xFA	; 250
    197a:	10 36       	cpi	r17, 0x60	; 96
    197c:	a1 f7       	brne	.-24     	; 0x1966 <_Z11menue_einstv+0xa6>
	//for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,4*charhighte);}
	//buffersize=sprintf(buffer,"6:HMC5883L Gain");
	//for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,5*charhighte);}
	//buffersize=sprintf(buffer,"7:Uhr einstellen");
	//for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,6*charhighte);}
}
    197e:	64 96       	adiw	r28, 0x14	; 20
    1980:	0f b6       	in	r0, 0x3f	; 63
    1982:	f8 94       	cli
    1984:	de bf       	out	0x3e, r29	; 62
    1986:	0f be       	out	0x3f, r0	; 63
    1988:	cd bf       	out	0x3d, r28	; 61
    198a:	df 91       	pop	r29
    198c:	cf 91       	pop	r28
    198e:	1f 91       	pop	r17
    1990:	0f 91       	pop	r16
    1992:	ef 90       	pop	r14
    1994:	df 90       	pop	r13
    1996:	bf 90       	pop	r11
    1998:	af 90       	pop	r10
    199a:	08 95       	ret

0000199c <_Z9menue_uhrv>:
void menue_uhr(){
    199c:	af 92       	push	r10
    199e:	bf 92       	push	r11
    19a0:	df 92       	push	r13
    19a2:	ef 92       	push	r14
    19a4:	0f 93       	push	r16
    19a6:	1f 93       	push	r17
    19a8:	cf 93       	push	r28
    19aa:	df 93       	push	r29
    19ac:	cd b7       	in	r28, 0x3d	; 61
    19ae:	de b7       	in	r29, 0x3e	; 62
    19b0:	64 97       	sbiw	r28, 0x14	; 20
    19b2:	0f b6       	in	r0, 0x3f	; 63
    19b4:	f8 94       	cli
    19b6:	de bf       	out	0x3e, r29	; 62
    19b8:	0f be       	out	0x3f, r0	; 63
    19ba:	cd bf       	out	0x3d, r28	; 61
	char buffer[20];
	uint8_t buffersize=0;

	oled.clearFrame();
    19bc:	8c e1       	ldi	r24, 0x1C	; 28
    19be:	93 e0       	ldi	r25, 0x03	; 3
    19c0:	0e 94 ed 02 	call	0x5da	; 0x5da <_ZN7Display10clearFrameEv>
	buffersize=sprintf(buffer,"1:Uhr");
    19c4:	86 e0       	ldi	r24, 0x06	; 6
    19c6:	e0 ed       	ldi	r30, 0xD0	; 208
    19c8:	f1 e0       	ldi	r31, 0x01	; 1
    19ca:	8e 01       	movw	r16, r28
    19cc:	0f 5f       	subi	r16, 0xFF	; 255
    19ce:	1f 4f       	sbci	r17, 0xFF	; 255
    19d0:	d8 01       	movw	r26, r16
    19d2:	01 90       	ld	r0, Z+
    19d4:	0d 92       	st	X+, r0
    19d6:	8a 95       	dec	r24
    19d8:	e1 f7       	brne	.-8      	; 0x19d2 <_Z9menue_uhrv+0x36>
    19da:	d0 2e       	mov	r13, r16
    19dc:	e1 2e       	mov	r14, r17
    19de:	58 01       	movw	r10, r16
    19e0:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,0*charhighte);}
    19e2:	f5 01       	movw	r30, r10
    19e4:	61 91       	ld	r22, Z+
    19e6:	5f 01       	movw	r10, r30
    19e8:	20 e0       	ldi	r18, 0x00	; 0
    19ea:	41 2f       	mov	r20, r17
    19ec:	8c e1       	ldi	r24, 0x1C	; 28
    19ee:	93 e0       	ldi	r25, 0x03	; 3
    19f0:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    19f4:	1a 5f       	subi	r17, 0xFA	; 250
    19f6:	1e 31       	cpi	r17, 0x1E	; 30
    19f8:	a1 f7       	brne	.-24     	; 0x19e2 <_Z9menue_uhrv+0x46>
	buffersize=sprintf(buffer,"2:Stoppuhr");
    19fa:	8b e0       	ldi	r24, 0x0B	; 11
    19fc:	e6 ed       	ldi	r30, 0xD6	; 214
    19fe:	f1 e0       	ldi	r31, 0x01	; 1
    1a00:	de 01       	movw	r26, r28
    1a02:	11 96       	adiw	r26, 0x01	; 1
    1a04:	01 90       	ld	r0, Z+
    1a06:	0d 92       	st	X+, r0
    1a08:	8a 95       	dec	r24
    1a0a:	e1 f7       	brne	.-8      	; 0x1a04 <_Z9menue_uhrv+0x68>
    1a0c:	ad 2c       	mov	r10, r13
    1a0e:	be 2c       	mov	r11, r14
    1a10:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,1*charhighte);}
    1a12:	f5 01       	movw	r30, r10
    1a14:	61 91       	ld	r22, Z+
    1a16:	5f 01       	movw	r10, r30
    1a18:	28 e0       	ldi	r18, 0x08	; 8
    1a1a:	41 2f       	mov	r20, r17
    1a1c:	8c e1       	ldi	r24, 0x1C	; 28
    1a1e:	93 e0       	ldi	r25, 0x03	; 3
    1a20:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    1a24:	1a 5f       	subi	r17, 0xFA	; 250
    1a26:	1c 33       	cpi	r17, 0x3C	; 60
    1a28:	a1 f7       	brne	.-24     	; 0x1a12 <_Z9menue_uhrv+0x76>
	buffersize=sprintf(buffer,"3:Timer");
    1a2a:	88 e0       	ldi	r24, 0x08	; 8
    1a2c:	e1 ee       	ldi	r30, 0xE1	; 225
    1a2e:	f1 e0       	ldi	r31, 0x01	; 1
    1a30:	de 01       	movw	r26, r28
    1a32:	11 96       	adiw	r26, 0x01	; 1
    1a34:	01 90       	ld	r0, Z+
    1a36:	0d 92       	st	X+, r0
    1a38:	8a 95       	dec	r24
    1a3a:	e1 f7       	brne	.-8      	; 0x1a34 <_Z9menue_uhrv+0x98>
    1a3c:	ad 2c       	mov	r10, r13
    1a3e:	be 2c       	mov	r11, r14
    1a40:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,2*charhighte);}
    1a42:	f5 01       	movw	r30, r10
    1a44:	61 91       	ld	r22, Z+
    1a46:	5f 01       	movw	r10, r30
    1a48:	20 e1       	ldi	r18, 0x10	; 16
    1a4a:	41 2f       	mov	r20, r17
    1a4c:	8c e1       	ldi	r24, 0x1C	; 28
    1a4e:	93 e0       	ldi	r25, 0x03	; 3
    1a50:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    1a54:	1a 5f       	subi	r17, 0xFA	; 250
    1a56:	1a 32       	cpi	r17, 0x2A	; 42
    1a58:	a1 f7       	brne	.-24     	; 0x1a42 <_Z9menue_uhrv+0xa6>
	buffersize=sprintf(buffer,"4:Alarm");
    1a5a:	88 e0       	ldi	r24, 0x08	; 8
    1a5c:	e9 ee       	ldi	r30, 0xE9	; 233
    1a5e:	f1 e0       	ldi	r31, 0x01	; 1
    1a60:	de 01       	movw	r26, r28
    1a62:	11 96       	adiw	r26, 0x01	; 1
    1a64:	01 90       	ld	r0, Z+
    1a66:	0d 92       	st	X+, r0
    1a68:	8a 95       	dec	r24
    1a6a:	e1 f7       	brne	.-8      	; 0x1a64 <_Z9menue_uhrv+0xc8>
    1a6c:	ad 2c       	mov	r10, r13
    1a6e:	be 2c       	mov	r11, r14
    1a70:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,3*charhighte);}
    1a72:	f5 01       	movw	r30, r10
    1a74:	61 91       	ld	r22, Z+
    1a76:	5f 01       	movw	r10, r30
    1a78:	28 e1       	ldi	r18, 0x18	; 24
    1a7a:	41 2f       	mov	r20, r17
    1a7c:	8c e1       	ldi	r24, 0x1C	; 28
    1a7e:	93 e0       	ldi	r25, 0x03	; 3
    1a80:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    1a84:	1a 5f       	subi	r17, 0xFA	; 250
    1a86:	1a 32       	cpi	r17, 0x2A	; 42
    1a88:	a1 f7       	brne	.-24     	; 0x1a72 <_Z9menue_uhrv+0xd6>
	buffersize=sprintf(buffer,"5:Uhr gross");
    1a8a:	8c e0       	ldi	r24, 0x0C	; 12
    1a8c:	e1 ef       	ldi	r30, 0xF1	; 241
    1a8e:	f1 e0       	ldi	r31, 0x01	; 1
    1a90:	de 01       	movw	r26, r28
    1a92:	11 96       	adiw	r26, 0x01	; 1
    1a94:	01 90       	ld	r0, Z+
    1a96:	0d 92       	st	X+, r0
    1a98:	8a 95       	dec	r24
    1a9a:	e1 f7       	brne	.-8      	; 0x1a94 <_Z9menue_uhrv+0xf8>
    1a9c:	ad 2c       	mov	r10, r13
    1a9e:	be 2c       	mov	r11, r14
    1aa0:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,4*charhighte);}
    1aa2:	f5 01       	movw	r30, r10
    1aa4:	61 91       	ld	r22, Z+
    1aa6:	5f 01       	movw	r10, r30
    1aa8:	20 e2       	ldi	r18, 0x20	; 32
    1aaa:	41 2f       	mov	r20, r17
    1aac:	8c e1       	ldi	r24, 0x1C	; 28
    1aae:	93 e0       	ldi	r25, 0x03	; 3
    1ab0:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    1ab4:	1a 5f       	subi	r17, 0xFA	; 250
    1ab6:	12 34       	cpi	r17, 0x42	; 66
    1ab8:	a1 f7       	brne	.-24     	; 0x1aa2 <_Z9menue_uhrv+0x106>
	//buffersize=sprintf(buffer,"6:HMC5883L Gain");
	//for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,5*charhighte);}
	//buffersize=sprintf(buffer,"7:Uhr einstellen");
	//for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,6*charhighte);}
}
    1aba:	64 96       	adiw	r28, 0x14	; 20
    1abc:	0f b6       	in	r0, 0x3f	; 63
    1abe:	f8 94       	cli
    1ac0:	de bf       	out	0x3e, r29	; 62
    1ac2:	0f be       	out	0x3f, r0	; 63
    1ac4:	cd bf       	out	0x3d, r28	; 61
    1ac6:	df 91       	pop	r29
    1ac8:	cf 91       	pop	r28
    1aca:	1f 91       	pop	r17
    1acc:	0f 91       	pop	r16
    1ace:	ef 90       	pop	r14
    1ad0:	df 90       	pop	r13
    1ad2:	bf 90       	pop	r11
    1ad4:	af 90       	pop	r10
    1ad6:	08 95       	ret

00001ad8 <_Z11uhranzeigenv>:

void uhranzeigen(){
    1ad8:	df 92       	push	r13
    1ada:	ef 92       	push	r14
    1adc:	ff 92       	push	r15
    1ade:	0f 93       	push	r16
    1ae0:	1f 93       	push	r17
    1ae2:	cf 93       	push	r28
    1ae4:	df 93       	push	r29
    1ae6:	cd b7       	in	r28, 0x3d	; 61
    1ae8:	de b7       	in	r29, 0x3e	; 62
    1aea:	64 97       	sbiw	r28, 0x14	; 20
    1aec:	0f b6       	in	r0, 0x3f	; 63
    1aee:	f8 94       	cli
    1af0:	de bf       	out	0x3e, r29	; 62
    1af2:	0f be       	out	0x3f, r0	; 63
    1af4:	cd bf       	out	0x3d, r28	; 61
	uint8_t buffersize;
	char Buffer[20];
	oled.clearFrame();
    1af6:	8c e1       	ldi	r24, 0x1C	; 28
    1af8:	93 e0       	ldi	r25, 0x03	; 3
    1afa:	0e 94 ed 02 	call	0x5da	; 0x5da <_ZN7Display10clearFrameEv>
	oled.analog(rtc.Stunden,rtc.Minuten,rtc.Sekunden,1);
    1afe:	01 e0       	ldi	r16, 0x01	; 1
    1b00:	20 91 5f 07 	lds	r18, 0x075F
    1b04:	40 91 5e 07 	lds	r20, 0x075E
    1b08:	60 91 5d 07 	lds	r22, 0x075D
    1b0c:	8c e1       	ldi	r24, 0x1C	; 28
    1b0e:	93 e0       	ldi	r25, 0x03	; 3
    1b10:	0e 94 9c 06 	call	0xd38	; 0xd38 <_ZN7Display6analogEhhhh>
    1b14:	0f 2e       	mov	r0, r31
    1b16:	fd e4       	ldi	r31, 0x4D	; 77
    1b18:	ef 2e       	mov	r14, r31
    1b1a:	f7 e0       	ldi	r31, 0x07	; 7
    1b1c:	ff 2e       	mov	r15, r31
    1b1e:	f0 2d       	mov	r31, r0
    1b20:	11 e4       	ldi	r17, 0x41	; 65
	for(uint8_t i=0;i<bitsderrtc;i++){oled.draw_ASCI(rtc.msg_uhr[i],65+i*charsize,0*charhighte);}
    1b22:	f7 01       	movw	r30, r14
    1b24:	61 91       	ld	r22, Z+
    1b26:	7f 01       	movw	r14, r30
    1b28:	20 e0       	ldi	r18, 0x00	; 0
    1b2a:	41 2f       	mov	r20, r17
    1b2c:	8c e1       	ldi	r24, 0x1C	; 28
    1b2e:	93 e0       	ldi	r25, 0x03	; 3
    1b30:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    1b34:	1a 5f       	subi	r17, 0xFA	; 250
    1b36:	11 37       	cpi	r17, 0x71	; 113
    1b38:	a1 f7       	brne	.-24     	; 0x1b22 <_Z11uhranzeigenv+0x4a>
    1b3a:	0f 2e       	mov	r0, r31
    1b3c:	f5 e5       	ldi	r31, 0x55	; 85
    1b3e:	ef 2e       	mov	r14, r31
    1b40:	f7 e0       	ldi	r31, 0x07	; 7
    1b42:	ff 2e       	mov	r15, r31
    1b44:	f0 2d       	mov	r31, r0
    1b46:	11 e4       	ldi	r17, 0x41	; 65
	for(uint8_t i=0;i<bitsderrtc;i++){oled.draw_ASCI(rtc.msg_dat[i],65+i*charsize,7*charhighte);}
    1b48:	f7 01       	movw	r30, r14
    1b4a:	61 91       	ld	r22, Z+
    1b4c:	7f 01       	movw	r14, r30
    1b4e:	28 e3       	ldi	r18, 0x38	; 56
    1b50:	41 2f       	mov	r20, r17
    1b52:	8c e1       	ldi	r24, 0x1C	; 28
    1b54:	93 e0       	ldi	r25, 0x03	; 3
    1b56:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    1b5a:	1a 5f       	subi	r17, 0xFA	; 250
    1b5c:	11 37       	cpi	r17, 0x71	; 113
    1b5e:	a1 f7       	brne	.-24     	; 0x1b48 <_Z11uhranzeigenv+0x70>
	buffersize=sprintf(Buffer,"%i%%",Batteriestatus());
    1b60:	0e 94 3b 09 	call	0x1276	; 0x1276 <_Z14Batteriestatusv>
    1b64:	28 2f       	mov	r18, r24
    1b66:	33 27       	eor	r19, r19
    1b68:	27 fd       	sbrc	r18, 7
    1b6a:	30 95       	com	r19
    1b6c:	3f 93       	push	r19
    1b6e:	8f 93       	push	r24
    1b70:	81 e3       	ldi	r24, 0x31	; 49
    1b72:	91 e0       	ldi	r25, 0x01	; 1
    1b74:	9f 93       	push	r25
    1b76:	8f 93       	push	r24
    1b78:	ce 01       	movw	r24, r28
    1b7a:	01 96       	adiw	r24, 0x01	; 1
    1b7c:	9f 93       	push	r25
    1b7e:	8f 93       	push	r24
    1b80:	0e 94 0f 2c 	call	0x581e	; 0x581e <sprintf>
	for(uint8_t i=0;i<buffersize;i++){
    1b84:	0f 90       	pop	r0
    1b86:	0f 90       	pop	r0
    1b88:	0f 90       	pop	r0
    1b8a:	0f 90       	pop	r0
    1b8c:	0f 90       	pop	r0
    1b8e:	0f 90       	pop	r0
    1b90:	88 23       	and	r24, r24
    1b92:	59 f1       	breq	.+86     	; 0x1bea <_Z11uhranzeigenv+0x112>
    1b94:	8e 01       	movw	r16, r28
    1b96:	0f 5f       	subi	r16, 0xFF	; 255
    1b98:	1f 4f       	sbci	r17, 0xFF	; 255
    1b9a:	81 50       	subi	r24, 0x01	; 1
    1b9c:	68 94       	set
    1b9e:	ee 24       	eor	r14, r14
    1ba0:	e1 f8       	bld	r14, 1
    1ba2:	f1 2c       	mov	r15, r1
    1ba4:	ec 0e       	add	r14, r28
    1ba6:	fd 1e       	adc	r15, r29
    1ba8:	e8 0e       	add	r14, r24
    1baa:	f1 1c       	adc	r15, r1
    1bac:	0f 2e       	mov	r0, r31
    1bae:	f9 e4       	ldi	r31, 0x49	; 73
    1bb0:	df 2e       	mov	r13, r31
    1bb2:	f0 2d       	mov	r31, r0
		if (Buffer[i]=='%' || Buffer[i]=='-')
    1bb4:	f8 01       	movw	r30, r16
    1bb6:	61 91       	ld	r22, Z+
    1bb8:	8f 01       	movw	r16, r30
    1bba:	86 2f       	mov	r24, r22
    1bbc:	87 7f       	andi	r24, 0xF7	; 247
    1bbe:	85 32       	cpi	r24, 0x25	; 37
    1bc0:	39 f4       	brne	.+14     	; 0x1bd0 <_Z11uhranzeigenv+0xf8>
		{
			oled.draw_ASCI(Buffer[i],73+i*numbersmalsize,3.5*charhighte);
    1bc2:	2c e1       	ldi	r18, 0x1C	; 28
    1bc4:	4d 2d       	mov	r20, r13
    1bc6:	8c e1       	ldi	r24, 0x1C	; 28
    1bc8:	93 e0       	ldi	r25, 0x03	; 3
    1bca:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    1bce:	08 c0       	rjmp	.+16     	; 0x1be0 <_Z11uhranzeigenv+0x108>
		}
		else{
			oled.draw_number16x16(Buffer[i]-'0',70+i*numbersmalsize,3*charhighte);
    1bd0:	60 53       	subi	r22, 0x30	; 48
    1bd2:	28 e1       	ldi	r18, 0x18	; 24
    1bd4:	4d ef       	ldi	r20, 0xFD	; 253
    1bd6:	4d 0d       	add	r20, r13
    1bd8:	8c e1       	ldi	r24, 0x1C	; 28
    1bda:	93 e0       	ldi	r25, 0x03	; 3
    1bdc:	0e 94 26 06 	call	0xc4c	; 0xc4c <_ZN7Display16draw_number16x16Ehhh>
    1be0:	f0 e1       	ldi	r31, 0x10	; 16
    1be2:	df 0e       	add	r13, r31
	oled.clearFrame();
	oled.analog(rtc.Stunden,rtc.Minuten,rtc.Sekunden,1);
	for(uint8_t i=0;i<bitsderrtc;i++){oled.draw_ASCI(rtc.msg_uhr[i],65+i*charsize,0*charhighte);}
	for(uint8_t i=0;i<bitsderrtc;i++){oled.draw_ASCI(rtc.msg_dat[i],65+i*charsize,7*charhighte);}
	buffersize=sprintf(Buffer,"%i%%",Batteriestatus());
	for(uint8_t i=0;i<buffersize;i++){
    1be4:	0e 15       	cp	r16, r14
    1be6:	1f 05       	cpc	r17, r15
    1be8:	29 f7       	brne	.-54     	; 0x1bb4 <_Z11uhranzeigenv+0xdc>
		}
		else{
			oled.draw_number16x16(Buffer[i]-'0',70+i*numbersmalsize,3*charhighte);
		}
	}
}
    1bea:	64 96       	adiw	r28, 0x14	; 20
    1bec:	0f b6       	in	r0, 0x3f	; 63
    1bee:	f8 94       	cli
    1bf0:	de bf       	out	0x3e, r29	; 62
    1bf2:	0f be       	out	0x3f, r0	; 63
    1bf4:	cd bf       	out	0x3d, r28	; 61
    1bf6:	df 91       	pop	r29
    1bf8:	cf 91       	pop	r28
    1bfa:	1f 91       	pop	r17
    1bfc:	0f 91       	pop	r16
    1bfe:	ff 90       	pop	r15
    1c00:	ef 90       	pop	r14
    1c02:	df 90       	pop	r13
    1c04:	08 95       	ret

00001c06 <_Z14uhranzeigenminv>:

void uhranzeigenmin(){
    1c06:	0f 93       	push	r16
    1c08:	1f 93       	push	r17
    1c0a:	cf 93       	push	r28
    1c0c:	df 93       	push	r29
	oled.clearFrame();
    1c0e:	8c e1       	ldi	r24, 0x1C	; 28
    1c10:	93 e0       	ldi	r25, 0x03	; 3
    1c12:	0e 94 ed 02 	call	0x5da	; 0x5da <_ZN7Display10clearFrameEv>
	oled.analog(rtc.Stunden,rtc.Minuten,rtc.Sekunden,0);
    1c16:	00 e0       	ldi	r16, 0x00	; 0
    1c18:	20 91 5f 07 	lds	r18, 0x075F
    1c1c:	40 91 5e 07 	lds	r20, 0x075E
    1c20:	60 91 5d 07 	lds	r22, 0x075D
    1c24:	8c e1       	ldi	r24, 0x1C	; 28
    1c26:	93 e0       	ldi	r25, 0x03	; 3
    1c28:	0e 94 9c 06 	call	0xd38	; 0xd38 <_ZN7Display6analogEhhhh>
    1c2c:	cd e4       	ldi	r28, 0x4D	; 77
    1c2e:	d7 e0       	ldi	r29, 0x07	; 7
    1c30:	11 e4       	ldi	r17, 0x41	; 65
	for(uint8_t i=0;i<(bitsderrtc-3);i++){oled.draw_ASCI(rtc.msg_uhr[i],65+i*charsize,0*charhighte);}
    1c32:	69 91       	ld	r22, Y+
    1c34:	20 e0       	ldi	r18, 0x00	; 0
    1c36:	41 2f       	mov	r20, r17
    1c38:	8c e1       	ldi	r24, 0x1C	; 28
    1c3a:	93 e0       	ldi	r25, 0x03	; 3
    1c3c:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    1c40:	1a 5f       	subi	r17, 0xFA	; 250
    1c42:	1f 35       	cpi	r17, 0x5F	; 95
    1c44:	b1 f7       	brne	.-20     	; 0x1c32 <_Z14uhranzeigenminv+0x2c>
    1c46:	c5 e5       	ldi	r28, 0x55	; 85
    1c48:	d7 e0       	ldi	r29, 0x07	; 7
    1c4a:	11 e4       	ldi	r17, 0x41	; 65
	for(uint8_t i=0;i<bitsderrtc;i++){oled.draw_ASCI(rtc.msg_dat[i],65+i*charsize,7*charhighte);}
    1c4c:	69 91       	ld	r22, Y+
    1c4e:	28 e3       	ldi	r18, 0x38	; 56
    1c50:	41 2f       	mov	r20, r17
    1c52:	8c e1       	ldi	r24, 0x1C	; 28
    1c54:	93 e0       	ldi	r25, 0x03	; 3
    1c56:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    1c5a:	1a 5f       	subi	r17, 0xFA	; 250
    1c5c:	11 37       	cpi	r17, 0x71	; 113
    1c5e:	b1 f7       	brne	.-20     	; 0x1c4c <_Z14uhranzeigenminv+0x46>
	//show hours and minutes in big numbers
	oled.draw_number16x16(rtc.msg_uhr[0]-'0',70,2*charhighte);
    1c60:	60 91 4d 07 	lds	r22, 0x074D
    1c64:	60 53       	subi	r22, 0x30	; 48
    1c66:	20 e1       	ldi	r18, 0x10	; 16
    1c68:	46 e4       	ldi	r20, 0x46	; 70
    1c6a:	8c e1       	ldi	r24, 0x1C	; 28
    1c6c:	93 e0       	ldi	r25, 0x03	; 3
    1c6e:	0e 94 26 06 	call	0xc4c	; 0xc4c <_ZN7Display16draw_number16x16Ehhh>
	oled.draw_number16x16(rtc.msg_uhr[1]-'0',70+numbersmalsize,2*charhighte);
    1c72:	60 91 4e 07 	lds	r22, 0x074E
    1c76:	60 53       	subi	r22, 0x30	; 48
    1c78:	20 e1       	ldi	r18, 0x10	; 16
    1c7a:	46 e5       	ldi	r20, 0x56	; 86
    1c7c:	8c e1       	ldi	r24, 0x1C	; 28
    1c7e:	93 e0       	ldi	r25, 0x03	; 3
    1c80:	0e 94 26 06 	call	0xc4c	; 0xc4c <_ZN7Display16draw_number16x16Ehhh>
	oled.draw_number16x16(rtc.msg_uhr[3]-'0',70,2*charhighte+numbersmalhight);
    1c84:	60 91 50 07 	lds	r22, 0x0750
    1c88:	60 53       	subi	r22, 0x30	; 48
    1c8a:	20 e2       	ldi	r18, 0x20	; 32
    1c8c:	46 e4       	ldi	r20, 0x46	; 70
    1c8e:	8c e1       	ldi	r24, 0x1C	; 28
    1c90:	93 e0       	ldi	r25, 0x03	; 3
    1c92:	0e 94 26 06 	call	0xc4c	; 0xc4c <_ZN7Display16draw_number16x16Ehhh>
	oled.draw_number16x16(rtc.msg_uhr[4]-'0',70+numbersmalsize,2*charhighte+numbersmalhight);
    1c96:	60 91 51 07 	lds	r22, 0x0751
    1c9a:	60 53       	subi	r22, 0x30	; 48
    1c9c:	20 e2       	ldi	r18, 0x20	; 32
    1c9e:	46 e5       	ldi	r20, 0x56	; 86
    1ca0:	8c e1       	ldi	r24, 0x1C	; 28
    1ca2:	93 e0       	ldi	r25, 0x03	; 3
    1ca4:	0e 94 26 06 	call	0xc4c	; 0xc4c <_ZN7Display16draw_number16x16Ehhh>
		//}
		//else{
			//oled.draw_number16x16(Buffer[i]-'0',70+i*numbersmalsize,3*charhighte);
		//}
	//}
}
    1ca8:	df 91       	pop	r29
    1caa:	cf 91       	pop	r28
    1cac:	1f 91       	pop	r17
    1cae:	0f 91       	pop	r16
    1cb0:	08 95       	ret

00001cb2 <_Z12fahradschirmddddm>:

void fahradschirm(double winkelgeschw, double angle, double weite, double maxgeschwinsigkeit, uint32_t Zeit){
    1cb2:	2f 92       	push	r2
    1cb4:	3f 92       	push	r3
    1cb6:	4f 92       	push	r4
    1cb8:	5f 92       	push	r5
    1cba:	6f 92       	push	r6
    1cbc:	7f 92       	push	r7
    1cbe:	8f 92       	push	r8
    1cc0:	9f 92       	push	r9
    1cc2:	af 92       	push	r10
    1cc4:	bf 92       	push	r11
    1cc6:	cf 92       	push	r12
    1cc8:	df 92       	push	r13
    1cca:	ef 92       	push	r14
    1ccc:	ff 92       	push	r15
    1cce:	0f 93       	push	r16
    1cd0:	1f 93       	push	r17
    1cd2:	cf 93       	push	r28
    1cd4:	df 93       	push	r29
    1cd6:	cd b7       	in	r28, 0x3d	; 61
    1cd8:	de b7       	in	r29, 0x3e	; 62
    1cda:	62 97       	sbiw	r28, 0x12	; 18
    1cdc:	0f b6       	in	r0, 0x3f	; 63
    1cde:	f8 94       	cli
    1ce0:	de bf       	out	0x3e, r29	; 62
    1ce2:	0f be       	out	0x3f, r0	; 63
    1ce4:	cd bf       	out	0x3d, r28	; 61
    1ce6:	76 2e       	mov	r7, r22
    1ce8:	67 2e       	mov	r6, r23
    1cea:	58 2e       	mov	r5, r24
    1cec:	49 2e       	mov	r4, r25
    1cee:	82 2e       	mov	r8, r18
    1cf0:	23 2e       	mov	r2, r19
    1cf2:	94 2e       	mov	r9, r20
    1cf4:	35 2e       	mov	r3, r21
    1cf6:	eb 86       	std	Y+11, r14	; 0x0b
    1cf8:	fc 86       	std	Y+12, r15	; 0x0c
    1cfa:	0d 87       	std	Y+13, r16	; 0x0d
    1cfc:	1e 87       	std	Y+14, r17	; 0x0e
    1cfe:	2f a1       	ldd	r18, Y+39	; 0x27
    1d00:	2f 87       	std	Y+15, r18	; 0x0f
    1d02:	38 a5       	ldd	r19, Y+40	; 0x28
    1d04:	38 8b       	std	Y+16, r19	; 0x10
    1d06:	89 a5       	ldd	r24, Y+41	; 0x29
    1d08:	89 8b       	std	Y+17, r24	; 0x11
    1d0a:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d0c:	9a 8b       	std	Y+18, r25	; 0x12
	char buffer[10];
	uint8_t buffersize=0;
	oled.clearFrame();
    1d0e:	8c e1       	ldi	r24, 0x1C	; 28
    1d10:	93 e0       	ldi	r25, 0x03	; 3
    1d12:	0e 94 ed 02 	call	0x5da	; 0x5da <_ZN7Display10clearFrameEv>
	header(0);
    1d16:	80 e0       	ldi	r24, 0x00	; 0
    1d18:	0e 94 18 0a 	call	0x1430	; 0x1430 <_Z6headerh>
	bottom(0);
    1d1c:	80 e0       	ldi	r24, 0x00	; 0
    1d1e:	0e 94 82 0a 	call	0x1504	; 0x1504 <_Z6bottomh>
	//Ausgabe der Geschwidigkeit
	buffersize=sprintf(buffer,"%3.1f",winkelgeschw);
    1d22:	4f 92       	push	r4
    1d24:	5f 92       	push	r5
    1d26:	6f 92       	push	r6
    1d28:	7f 92       	push	r7
    1d2a:	8d ef       	ldi	r24, 0xFD	; 253
    1d2c:	91 e0       	ldi	r25, 0x01	; 1
    1d2e:	9f 93       	push	r25
    1d30:	8f 93       	push	r24
    1d32:	ce 01       	movw	r24, r28
    1d34:	01 96       	adiw	r24, 0x01	; 1
    1d36:	9f 93       	push	r25
    1d38:	8f 93       	push	r24
    1d3a:	0e 94 0f 2c 	call	0x581e	; 0x581e <sprintf>
	for(uint8_t i=((SSD1306_WIDTH/numbersmalsize)-buffersize-1);i<((SSD1306_WIDTH/numbersmalsize)-1);i++){
    1d3e:	27 e0       	ldi	r18, 0x07	; 7
    1d40:	02 2f       	mov	r16, r18
    1d42:	08 1b       	sub	r16, r24
    1d44:	0f b6       	in	r0, 0x3f	; 63
    1d46:	f8 94       	cli
    1d48:	de bf       	out	0x3e, r29	; 62
    1d4a:	0f be       	out	0x3f, r0	; 63
    1d4c:	cd bf       	out	0x3d, r28	; 61
    1d4e:	07 30       	cpi	r16, 0x07	; 7
    1d50:	18 f5       	brcc	.+70     	; 0x1d98 <_Z12fahradschirmddddm+0xe6>
    1d52:	10 2f       	mov	r17, r16
    1d54:	12 95       	swap	r17
    1d56:	10 7f       	andi	r17, 0xF0	; 240
		if(buffer[i-((SSD1306_WIDTH/numbersmalsize)-buffersize-1)]=='.'){
    1d58:	7c 01       	movw	r14, r24
    1d5a:	ff 24       	eor	r15, r15
    1d5c:	e1 e0       	ldi	r30, 0x01	; 1
    1d5e:	f0 e0       	ldi	r31, 0x00	; 0
    1d60:	ec 0f       	add	r30, r28
    1d62:	fd 1f       	adc	r31, r29
    1d64:	e0 0f       	add	r30, r16
    1d66:	f1 1d       	adc	r31, r1
    1d68:	ee 0d       	add	r30, r14
    1d6a:	ff 1d       	adc	r31, r15
    1d6c:	37 97       	sbiw	r30, 0x07	; 7
    1d6e:	60 81       	ld	r22, Z
    1d70:	6e 32       	cpi	r22, 0x2E	; 46
    1d72:	39 f4       	brne	.+14     	; 0x1d82 <_Z12fahradschirmddddm+0xd0>
			oled.draw_ASCI(buffer[i-((SSD1306_WIDTH/numbersmalsize)-buffersize-1)],i*numbersmalsize,4*charhighte);
    1d74:	20 e2       	ldi	r18, 0x20	; 32
    1d76:	41 2f       	mov	r20, r17
    1d78:	8c e1       	ldi	r24, 0x1C	; 28
    1d7a:	93 e0       	ldi	r25, 0x03	; 3
    1d7c:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    1d80:	07 c0       	rjmp	.+14     	; 0x1d90 <_Z12fahradschirmddddm+0xde>
		}
		else{
			oled.draw_number16x16(buffer[i-((SSD1306_WIDTH/numbersmalsize)-buffersize-1)]-'0',i*numbersmalsize,3*charhighte);
    1d82:	60 53       	subi	r22, 0x30	; 48
    1d84:	28 e1       	ldi	r18, 0x18	; 24
    1d86:	41 2f       	mov	r20, r17
    1d88:	8c e1       	ldi	r24, 0x1C	; 28
    1d8a:	93 e0       	ldi	r25, 0x03	; 3
    1d8c:	0e 94 26 06 	call	0xc4c	; 0xc4c <_ZN7Display16draw_number16x16Ehhh>
	oled.clearFrame();
	header(0);
	bottom(0);
	//Ausgabe der Geschwidigkeit
	buffersize=sprintf(buffer,"%3.1f",winkelgeschw);
	for(uint8_t i=((SSD1306_WIDTH/numbersmalsize)-buffersize-1);i<((SSD1306_WIDTH/numbersmalsize)-1);i++){
    1d90:	0f 5f       	subi	r16, 0xFF	; 255
    1d92:	10 5f       	subi	r17, 0xF0	; 240
    1d94:	07 30       	cpi	r16, 0x07	; 7
    1d96:	11 f7       	brne	.-60     	; 0x1d5c <_Z12fahradschirmddddm+0xaa>
		}
		else{
			oled.draw_number16x16(buffer[i-((SSD1306_WIDTH/numbersmalsize)-buffersize-1)]-'0',i*numbersmalsize,3*charhighte);
		}
	}
	oled.draw_ASCI('k',((SSD1306_WIDTH/charsize-2)*charsize),3*charhighte);
    1d98:	28 e1       	ldi	r18, 0x18	; 24
    1d9a:	42 e7       	ldi	r20, 0x72	; 114
    1d9c:	6b e6       	ldi	r22, 0x6B	; 107
    1d9e:	8c e1       	ldi	r24, 0x1C	; 28
    1da0:	93 e0       	ldi	r25, 0x03	; 3
    1da2:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
	oled.draw_ASCI('m',((SSD1306_WIDTH/charsize-1)*charsize),3*charhighte);
    1da6:	28 e1       	ldi	r18, 0x18	; 24
    1da8:	48 e7       	ldi	r20, 0x78	; 120
    1daa:	6d e6       	ldi	r22, 0x6D	; 109
    1dac:	8c e1       	ldi	r24, 0x1C	; 28
    1dae:	93 e0       	ldi	r25, 0x03	; 3
    1db0:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
	oled.draw_ASCI('h',((SSD1306_WIDTH/charsize-2)*charsize),4*charhighte);
    1db4:	20 e2       	ldi	r18, 0x20	; 32
    1db6:	42 e7       	ldi	r20, 0x72	; 114
    1db8:	68 e6       	ldi	r22, 0x68	; 104
    1dba:	8c e1       	ldi	r24, 0x1C	; 28
    1dbc:	93 e0       	ldi	r25, 0x03	; 3
    1dbe:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
	//winkelausgabe
	buffersize=sprintf(buffer,"%3.1f",angle);
    1dc2:	3f 92       	push	r3
    1dc4:	9f 92       	push	r9
    1dc6:	2f 92       	push	r2
    1dc8:	8f 92       	push	r8
    1dca:	8d ef       	ldi	r24, 0xFD	; 253
    1dcc:	91 e0       	ldi	r25, 0x01	; 1
    1dce:	9f 93       	push	r25
    1dd0:	8f 93       	push	r24
    1dd2:	ce 01       	movw	r24, r28
    1dd4:	01 96       	adiw	r24, 0x01	; 1
    1dd6:	9f 93       	push	r25
    1dd8:	8f 93       	push	r24
    1dda:	0e 94 0f 2c 	call	0x581e	; 0x581e <sprintf>
    1dde:	48 2e       	mov	r4, r24
	for (uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,7*charhighte);}
    1de0:	0f b6       	in	r0, 0x3f	; 63
    1de2:	f8 94       	cli
    1de4:	de bf       	out	0x3e, r29	; 62
    1de6:	0f be       	out	0x3f, r0	; 63
    1de8:	cd bf       	out	0x3d, r28	; 61
    1dea:	88 23       	and	r24, r24
    1dec:	99 f0       	breq	.+38     	; 0x1e14 <_Z12fahradschirmddddm+0x162>
    1dee:	ce 01       	movw	r24, r28
    1df0:	01 96       	adiw	r24, 0x01	; 1
    1df2:	3c 01       	movw	r6, r24
    1df4:	7c 01       	movw	r14, r24
    1df6:	10 e0       	ldi	r17, 0x00	; 0
    1df8:	f7 01       	movw	r30, r14
    1dfa:	61 91       	ld	r22, Z+
    1dfc:	7f 01       	movw	r14, r30
    1dfe:	28 e3       	ldi	r18, 0x38	; 56
    1e00:	41 2f       	mov	r20, r17
    1e02:	8c e1       	ldi	r24, 0x1C	; 28
    1e04:	93 e0       	ldi	r25, 0x03	; 3
    1e06:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    1e0a:	1a 5f       	subi	r17, 0xFA	; 250
    1e0c:	8e 2d       	mov	r24, r14
    1e0e:	86 19       	sub	r24, r6
    1e10:	84 15       	cp	r24, r4
    1e12:	90 f3       	brcs	.-28     	; 0x1df8 <_Z12fahradschirmddddm+0x146>
	anzeige_kleinenadel(31,31,angle);
    1e14:	28 2d       	mov	r18, r8
    1e16:	32 2d       	mov	r19, r2
    1e18:	49 2d       	mov	r20, r9
    1e1a:	53 2d       	mov	r21, r3
    1e1c:	6f e1       	ldi	r22, 0x1F	; 31
    1e1e:	8f e1       	ldi	r24, 0x1F	; 31
    1e20:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <_Z19anzeige_kleinenadelhhf>
	//anzeige der gesammtstrecke
	buffersize=sprintf(buffer,"%.1fm",weite);
    1e24:	fe 85       	ldd	r31, Y+14	; 0x0e
    1e26:	ff 93       	push	r31
    1e28:	2d 85       	ldd	r18, Y+13	; 0x0d
    1e2a:	2f 93       	push	r18
    1e2c:	3c 85       	ldd	r19, Y+12	; 0x0c
    1e2e:	3f 93       	push	r19
    1e30:	8b 85       	ldd	r24, Y+11	; 0x0b
    1e32:	8f 93       	push	r24
    1e34:	83 e0       	ldi	r24, 0x03	; 3
    1e36:	92 e0       	ldi	r25, 0x02	; 2
    1e38:	9f 93       	push	r25
    1e3a:	8f 93       	push	r24
    1e3c:	ce 01       	movw	r24, r28
    1e3e:	01 96       	adiw	r24, 0x01	; 1
    1e40:	9f 93       	push	r25
    1e42:	8f 93       	push	r24
    1e44:	0e 94 0f 2c 	call	0x581e	; 0x581e <sprintf>
    1e48:	88 2e       	mov	r8, r24
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize+70,2*charhighte);}
    1e4a:	0f b6       	in	r0, 0x3f	; 63
    1e4c:	f8 94       	cli
    1e4e:	de bf       	out	0x3e, r29	; 62
    1e50:	0f be       	out	0x3f, r0	; 63
    1e52:	cd bf       	out	0x3d, r28	; 61
    1e54:	88 23       	and	r24, r24
    1e56:	c1 f0       	breq	.+48     	; 0x1e88 <_Z12fahradschirmddddm+0x1d6>
    1e58:	9e 01       	movw	r18, r28
    1e5a:	2f 5f       	subi	r18, 0xFF	; 255
    1e5c:	3f 4f       	sbci	r19, 0xFF	; 255
    1e5e:	79 01       	movw	r14, r18
    1e60:	89 01       	movw	r16, r18
    1e62:	0f 2e       	mov	r0, r31
    1e64:	f6 e4       	ldi	r31, 0x46	; 70
    1e66:	9f 2e       	mov	r9, r31
    1e68:	f0 2d       	mov	r31, r0
    1e6a:	f8 01       	movw	r30, r16
    1e6c:	61 91       	ld	r22, Z+
    1e6e:	8f 01       	movw	r16, r30
    1e70:	20 e1       	ldi	r18, 0x10	; 16
    1e72:	49 2d       	mov	r20, r9
    1e74:	8c e1       	ldi	r24, 0x1C	; 28
    1e76:	93 e0       	ldi	r25, 0x03	; 3
    1e78:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    1e7c:	f6 e0       	ldi	r31, 0x06	; 6
    1e7e:	9f 0e       	add	r9, r31
    1e80:	90 2f       	mov	r25, r16
    1e82:	9e 19       	sub	r25, r14
    1e84:	98 15       	cp	r25, r8
    1e86:	88 f3       	brcs	.-30     	; 0x1e6a <_Z12fahradschirmddddm+0x1b8>
	//anzeige der max geschwindigkeit
	buffersize=sprintf(buffer,"%.1fm/s",maxgeschwinsigkeit);
    1e88:	df 92       	push	r13
    1e8a:	cf 92       	push	r12
    1e8c:	bf 92       	push	r11
    1e8e:	af 92       	push	r10
    1e90:	89 e0       	ldi	r24, 0x09	; 9
    1e92:	92 e0       	ldi	r25, 0x02	; 2
    1e94:	9f 93       	push	r25
    1e96:	8f 93       	push	r24
    1e98:	ce 01       	movw	r24, r28
    1e9a:	01 96       	adiw	r24, 0x01	; 1
    1e9c:	9f 93       	push	r25
    1e9e:	8f 93       	push	r24
    1ea0:	0e 94 0f 2c 	call	0x581e	; 0x581e <sprintf>
    1ea4:	c8 2e       	mov	r12, r24
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize+70,5*charhighte);}
    1ea6:	0f b6       	in	r0, 0x3f	; 63
    1ea8:	f8 94       	cli
    1eaa:	de bf       	out	0x3e, r29	; 62
    1eac:	0f be       	out	0x3f, r0	; 63
    1eae:	cd bf       	out	0x3d, r28	; 61
    1eb0:	88 23       	and	r24, r24
    1eb2:	b9 f0       	breq	.+46     	; 0x1ee2 <_Z12fahradschirmddddm+0x230>
    1eb4:	ce 01       	movw	r24, r28
    1eb6:	01 96       	adiw	r24, 0x01	; 1
    1eb8:	7c 01       	movw	r14, r24
    1eba:	8c 01       	movw	r16, r24
    1ebc:	0f 2e       	mov	r0, r31
    1ebe:	f6 e4       	ldi	r31, 0x46	; 70
    1ec0:	df 2e       	mov	r13, r31
    1ec2:	f0 2d       	mov	r31, r0
    1ec4:	f8 01       	movw	r30, r16
    1ec6:	61 91       	ld	r22, Z+
    1ec8:	8f 01       	movw	r16, r30
    1eca:	28 e2       	ldi	r18, 0x28	; 40
    1ecc:	4d 2d       	mov	r20, r13
    1ece:	8c e1       	ldi	r24, 0x1C	; 28
    1ed0:	93 e0       	ldi	r25, 0x03	; 3
    1ed2:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    1ed6:	f6 e0       	ldi	r31, 0x06	; 6
    1ed8:	df 0e       	add	r13, r31
    1eda:	90 2f       	mov	r25, r16
    1edc:	9e 19       	sub	r25, r14
    1ede:	9c 15       	cp	r25, r12
    1ee0:	88 f3       	brcs	.-30     	; 0x1ec4 <_Z12fahradschirmddddm+0x212>
	//anzeige der Fahrtzeit
	buffersize=sprintf(buffer,"%lus",Zeit);
    1ee2:	2a 89       	ldd	r18, Y+18	; 0x12
    1ee4:	2f 93       	push	r18
    1ee6:	39 89       	ldd	r19, Y+17	; 0x11
    1ee8:	3f 93       	push	r19
    1eea:	88 89       	ldd	r24, Y+16	; 0x10
    1eec:	8f 93       	push	r24
    1eee:	9f 85       	ldd	r25, Y+15	; 0x0f
    1ef0:	9f 93       	push	r25
    1ef2:	81 e1       	ldi	r24, 0x11	; 17
    1ef4:	92 e0       	ldi	r25, 0x02	; 2
    1ef6:	9f 93       	push	r25
    1ef8:	8f 93       	push	r24
    1efa:	ce 01       	movw	r24, r28
    1efc:	01 96       	adiw	r24, 0x01	; 1
    1efe:	9f 93       	push	r25
    1f00:	8f 93       	push	r24
    1f02:	0e 94 0f 2c 	call	0x581e	; 0x581e <sprintf>
    1f06:	c8 2e       	mov	r12, r24
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize+70,6*charhighte);}
    1f08:	0f b6       	in	r0, 0x3f	; 63
    1f0a:	f8 94       	cli
    1f0c:	de bf       	out	0x3e, r29	; 62
    1f0e:	0f be       	out	0x3f, r0	; 63
    1f10:	cd bf       	out	0x3d, r28	; 61
    1f12:	88 23       	and	r24, r24
    1f14:	c1 f0       	breq	.+48     	; 0x1f46 <_Z12fahradschirmddddm+0x294>
    1f16:	9e 01       	movw	r18, r28
    1f18:	2f 5f       	subi	r18, 0xFF	; 255
    1f1a:	3f 4f       	sbci	r19, 0xFF	; 255
    1f1c:	79 01       	movw	r14, r18
    1f1e:	89 01       	movw	r16, r18
    1f20:	0f 2e       	mov	r0, r31
    1f22:	f6 e4       	ldi	r31, 0x46	; 70
    1f24:	df 2e       	mov	r13, r31
    1f26:	f0 2d       	mov	r31, r0
    1f28:	f8 01       	movw	r30, r16
    1f2a:	61 91       	ld	r22, Z+
    1f2c:	8f 01       	movw	r16, r30
    1f2e:	20 e3       	ldi	r18, 0x30	; 48
    1f30:	4d 2d       	mov	r20, r13
    1f32:	8c e1       	ldi	r24, 0x1C	; 28
    1f34:	93 e0       	ldi	r25, 0x03	; 3
    1f36:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    1f3a:	f6 e0       	ldi	r31, 0x06	; 6
    1f3c:	df 0e       	add	r13, r31
    1f3e:	90 2f       	mov	r25, r16
    1f40:	9e 19       	sub	r25, r14
    1f42:	9c 15       	cp	r25, r12
    1f44:	88 f3       	brcs	.-30     	; 0x1f28 <_Z12fahradschirmddddm+0x276>
}
    1f46:	62 96       	adiw	r28, 0x12	; 18
    1f48:	0f b6       	in	r0, 0x3f	; 63
    1f4a:	f8 94       	cli
    1f4c:	de bf       	out	0x3e, r29	; 62
    1f4e:	0f be       	out	0x3f, r0	; 63
    1f50:	cd bf       	out	0x3d, r28	; 61
    1f52:	df 91       	pop	r29
    1f54:	cf 91       	pop	r28
    1f56:	1f 91       	pop	r17
    1f58:	0f 91       	pop	r16
    1f5a:	ff 90       	pop	r15
    1f5c:	ef 90       	pop	r14
    1f5e:	df 90       	pop	r13
    1f60:	cf 90       	pop	r12
    1f62:	bf 90       	pop	r11
    1f64:	af 90       	pop	r10
    1f66:	9f 90       	pop	r9
    1f68:	8f 90       	pop	r8
    1f6a:	7f 90       	pop	r7
    1f6c:	6f 90       	pop	r6
    1f6e:	5f 90       	pop	r5
    1f70:	4f 90       	pop	r4
    1f72:	3f 90       	pop	r3
    1f74:	2f 90       	pop	r2
    1f76:	08 95       	ret

00001f78 <_Z14Gaineinstellenv>:

void Gaineinstellen(){
    1f78:	cf 92       	push	r12
    1f7a:	df 92       	push	r13
    1f7c:	ef 92       	push	r14
    1f7e:	ff 92       	push	r15
    1f80:	0f 93       	push	r16
    1f82:	1f 93       	push	r17
    1f84:	cf 93       	push	r28
    1f86:	df 93       	push	r29
    1f88:	cd b7       	in	r28, 0x3d	; 61
    1f8a:	de b7       	in	r29, 0x3e	; 62
    1f8c:	64 97       	sbiw	r28, 0x14	; 20
    1f8e:	0f b6       	in	r0, 0x3f	; 63
    1f90:	f8 94       	cli
    1f92:	de bf       	out	0x3e, r29	; 62
    1f94:	0f be       	out	0x3f, r0	; 63
    1f96:	cd bf       	out	0x3d, r28	; 61
	char buffer[20];
	uint8_t buffersize=0;

	oled.clearFrame();
    1f98:	8c e1       	ldi	r24, 0x1C	; 28
    1f9a:	93 e0       	ldi	r25, 0x03	; 3
    1f9c:	0e 94 ed 02 	call	0x5da	; 0x5da <_ZN7Display10clearFrameEv>
	buffersize=sprintf(buffer,"1: 1370");
    1fa0:	88 e0       	ldi	r24, 0x08	; 8
    1fa2:	e6 e1       	ldi	r30, 0x16	; 22
    1fa4:	f2 e0       	ldi	r31, 0x02	; 2
    1fa6:	8e 01       	movw	r16, r28
    1fa8:	0f 5f       	subi	r16, 0xFF	; 255
    1faa:	1f 4f       	sbci	r17, 0xFF	; 255
    1fac:	d8 01       	movw	r26, r16
    1fae:	01 90       	ld	r0, Z+
    1fb0:	0d 92       	st	X+, r0
    1fb2:	8a 95       	dec	r24
    1fb4:	e1 f7       	brne	.-8      	; 0x1fae <_Z14Gaineinstellenv+0x36>
    1fb6:	e0 2e       	mov	r14, r16
    1fb8:	f1 2e       	mov	r15, r17
    1fba:	68 01       	movw	r12, r16
    1fbc:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,0*charhighte);}
    1fbe:	f6 01       	movw	r30, r12
    1fc0:	61 91       	ld	r22, Z+
    1fc2:	6f 01       	movw	r12, r30
    1fc4:	20 e0       	ldi	r18, 0x00	; 0
    1fc6:	41 2f       	mov	r20, r17
    1fc8:	8c e1       	ldi	r24, 0x1C	; 28
    1fca:	93 e0       	ldi	r25, 0x03	; 3
    1fcc:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    1fd0:	1a 5f       	subi	r17, 0xFA	; 250
    1fd2:	1a 32       	cpi	r17, 0x2A	; 42
    1fd4:	a1 f7       	brne	.-24     	; 0x1fbe <_Z14Gaineinstellenv+0x46>
	buffersize=sprintf(buffer,"2: 1090");
    1fd6:	88 e0       	ldi	r24, 0x08	; 8
    1fd8:	ee e1       	ldi	r30, 0x1E	; 30
    1fda:	f2 e0       	ldi	r31, 0x02	; 2
    1fdc:	de 01       	movw	r26, r28
    1fde:	11 96       	adiw	r26, 0x01	; 1
    1fe0:	01 90       	ld	r0, Z+
    1fe2:	0d 92       	st	X+, r0
    1fe4:	8a 95       	dec	r24
    1fe6:	e1 f7       	brne	.-8      	; 0x1fe0 <_Z14Gaineinstellenv+0x68>
    1fe8:	ce 2c       	mov	r12, r14
    1fea:	df 2c       	mov	r13, r15
    1fec:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,1*charhighte);}
    1fee:	f6 01       	movw	r30, r12
    1ff0:	61 91       	ld	r22, Z+
    1ff2:	6f 01       	movw	r12, r30
    1ff4:	28 e0       	ldi	r18, 0x08	; 8
    1ff6:	41 2f       	mov	r20, r17
    1ff8:	8c e1       	ldi	r24, 0x1C	; 28
    1ffa:	93 e0       	ldi	r25, 0x03	; 3
    1ffc:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    2000:	1a 5f       	subi	r17, 0xFA	; 250
    2002:	1a 32       	cpi	r17, 0x2A	; 42
    2004:	a1 f7       	brne	.-24     	; 0x1fee <_Z14Gaineinstellenv+0x76>
	buffersize=sprintf(buffer,"3:  820");
    2006:	88 e0       	ldi	r24, 0x08	; 8
    2008:	e6 e2       	ldi	r30, 0x26	; 38
    200a:	f2 e0       	ldi	r31, 0x02	; 2
    200c:	de 01       	movw	r26, r28
    200e:	11 96       	adiw	r26, 0x01	; 1
    2010:	01 90       	ld	r0, Z+
    2012:	0d 92       	st	X+, r0
    2014:	8a 95       	dec	r24
    2016:	e1 f7       	brne	.-8      	; 0x2010 <_Z14Gaineinstellenv+0x98>
    2018:	ce 2c       	mov	r12, r14
    201a:	df 2c       	mov	r13, r15
    201c:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,2*charhighte);}
    201e:	f6 01       	movw	r30, r12
    2020:	61 91       	ld	r22, Z+
    2022:	6f 01       	movw	r12, r30
    2024:	20 e1       	ldi	r18, 0x10	; 16
    2026:	41 2f       	mov	r20, r17
    2028:	8c e1       	ldi	r24, 0x1C	; 28
    202a:	93 e0       	ldi	r25, 0x03	; 3
    202c:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    2030:	1a 5f       	subi	r17, 0xFA	; 250
    2032:	1a 32       	cpi	r17, 0x2A	; 42
    2034:	a1 f7       	brne	.-24     	; 0x201e <_Z14Gaineinstellenv+0xa6>
	buffersize=sprintf(buffer,"4:  660");
    2036:	88 e0       	ldi	r24, 0x08	; 8
    2038:	ee e2       	ldi	r30, 0x2E	; 46
    203a:	f2 e0       	ldi	r31, 0x02	; 2
    203c:	de 01       	movw	r26, r28
    203e:	11 96       	adiw	r26, 0x01	; 1
    2040:	01 90       	ld	r0, Z+
    2042:	0d 92       	st	X+, r0
    2044:	8a 95       	dec	r24
    2046:	e1 f7       	brne	.-8      	; 0x2040 <_Z14Gaineinstellenv+0xc8>
    2048:	ce 2c       	mov	r12, r14
    204a:	df 2c       	mov	r13, r15
    204c:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,3*charhighte);}
    204e:	f6 01       	movw	r30, r12
    2050:	61 91       	ld	r22, Z+
    2052:	6f 01       	movw	r12, r30
    2054:	28 e1       	ldi	r18, 0x18	; 24
    2056:	41 2f       	mov	r20, r17
    2058:	8c e1       	ldi	r24, 0x1C	; 28
    205a:	93 e0       	ldi	r25, 0x03	; 3
    205c:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    2060:	1a 5f       	subi	r17, 0xFA	; 250
    2062:	1a 32       	cpi	r17, 0x2A	; 42
    2064:	a1 f7       	brne	.-24     	; 0x204e <_Z14Gaineinstellenv+0xd6>
	buffersize=sprintf(buffer,"5:  440");
    2066:	88 e0       	ldi	r24, 0x08	; 8
    2068:	e6 e3       	ldi	r30, 0x36	; 54
    206a:	f2 e0       	ldi	r31, 0x02	; 2
    206c:	de 01       	movw	r26, r28
    206e:	11 96       	adiw	r26, 0x01	; 1
    2070:	01 90       	ld	r0, Z+
    2072:	0d 92       	st	X+, r0
    2074:	8a 95       	dec	r24
    2076:	e1 f7       	brne	.-8      	; 0x2070 <_Z14Gaineinstellenv+0xf8>
    2078:	ce 2c       	mov	r12, r14
    207a:	df 2c       	mov	r13, r15
    207c:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,4*charhighte);}
    207e:	f6 01       	movw	r30, r12
    2080:	61 91       	ld	r22, Z+
    2082:	6f 01       	movw	r12, r30
    2084:	20 e2       	ldi	r18, 0x20	; 32
    2086:	41 2f       	mov	r20, r17
    2088:	8c e1       	ldi	r24, 0x1C	; 28
    208a:	93 e0       	ldi	r25, 0x03	; 3
    208c:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    2090:	1a 5f       	subi	r17, 0xFA	; 250
    2092:	1a 32       	cpi	r17, 0x2A	; 42
    2094:	a1 f7       	brne	.-24     	; 0x207e <_Z14Gaineinstellenv+0x106>
	buffersize=sprintf(buffer,"6:  390");
    2096:	88 e0       	ldi	r24, 0x08	; 8
    2098:	ee e3       	ldi	r30, 0x3E	; 62
    209a:	f2 e0       	ldi	r31, 0x02	; 2
    209c:	de 01       	movw	r26, r28
    209e:	11 96       	adiw	r26, 0x01	; 1
    20a0:	01 90       	ld	r0, Z+
    20a2:	0d 92       	st	X+, r0
    20a4:	8a 95       	dec	r24
    20a6:	e1 f7       	brne	.-8      	; 0x20a0 <_Z14Gaineinstellenv+0x128>
    20a8:	ce 2c       	mov	r12, r14
    20aa:	df 2c       	mov	r13, r15
    20ac:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,5*charhighte);}
    20ae:	f6 01       	movw	r30, r12
    20b0:	61 91       	ld	r22, Z+
    20b2:	6f 01       	movw	r12, r30
    20b4:	28 e2       	ldi	r18, 0x28	; 40
    20b6:	41 2f       	mov	r20, r17
    20b8:	8c e1       	ldi	r24, 0x1C	; 28
    20ba:	93 e0       	ldi	r25, 0x03	; 3
    20bc:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    20c0:	1a 5f       	subi	r17, 0xFA	; 250
    20c2:	1a 32       	cpi	r17, 0x2A	; 42
    20c4:	a1 f7       	brne	.-24     	; 0x20ae <_Z14Gaineinstellenv+0x136>
	buffersize=sprintf(buffer,"7:  330");
    20c6:	88 e0       	ldi	r24, 0x08	; 8
    20c8:	e6 e4       	ldi	r30, 0x46	; 70
    20ca:	f2 e0       	ldi	r31, 0x02	; 2
    20cc:	de 01       	movw	r26, r28
    20ce:	11 96       	adiw	r26, 0x01	; 1
    20d0:	01 90       	ld	r0, Z+
    20d2:	0d 92       	st	X+, r0
    20d4:	8a 95       	dec	r24
    20d6:	e1 f7       	brne	.-8      	; 0x20d0 <_Z14Gaineinstellenv+0x158>
    20d8:	ce 2c       	mov	r12, r14
    20da:	df 2c       	mov	r13, r15
    20dc:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,6*charhighte);}
    20de:	f6 01       	movw	r30, r12
    20e0:	61 91       	ld	r22, Z+
    20e2:	6f 01       	movw	r12, r30
    20e4:	20 e3       	ldi	r18, 0x30	; 48
    20e6:	41 2f       	mov	r20, r17
    20e8:	8c e1       	ldi	r24, 0x1C	; 28
    20ea:	93 e0       	ldi	r25, 0x03	; 3
    20ec:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    20f0:	1a 5f       	subi	r17, 0xFA	; 250
    20f2:	1a 32       	cpi	r17, 0x2A	; 42
    20f4:	a1 f7       	brne	.-24     	; 0x20de <_Z14Gaineinstellenv+0x166>
	buffersize=sprintf(buffer,"8:  230");
    20f6:	88 e0       	ldi	r24, 0x08	; 8
    20f8:	ee e4       	ldi	r30, 0x4E	; 78
    20fa:	f2 e0       	ldi	r31, 0x02	; 2
    20fc:	de 01       	movw	r26, r28
    20fe:	11 96       	adiw	r26, 0x01	; 1
    2100:	01 90       	ld	r0, Z+
    2102:	0d 92       	st	X+, r0
    2104:	8a 95       	dec	r24
    2106:	e1 f7       	brne	.-8      	; 0x2100 <_Z14Gaineinstellenv+0x188>
    2108:	ce 2c       	mov	r12, r14
    210a:	df 2c       	mov	r13, r15
    210c:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,7*charhighte);}
    210e:	f6 01       	movw	r30, r12
    2110:	61 91       	ld	r22, Z+
    2112:	6f 01       	movw	r12, r30
    2114:	28 e3       	ldi	r18, 0x38	; 56
    2116:	41 2f       	mov	r20, r17
    2118:	8c e1       	ldi	r24, 0x1C	; 28
    211a:	93 e0       	ldi	r25, 0x03	; 3
    211c:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    2120:	1a 5f       	subi	r17, 0xFA	; 250
    2122:	1a 32       	cpi	r17, 0x2A	; 42
    2124:	a1 f7       	brne	.-24     	; 0x210e <_Z14Gaineinstellenv+0x196>
}
    2126:	64 96       	adiw	r28, 0x14	; 20
    2128:	0f b6       	in	r0, 0x3f	; 63
    212a:	f8 94       	cli
    212c:	de bf       	out	0x3e, r29	; 62
    212e:	0f be       	out	0x3f, r0	; 63
    2130:	cd bf       	out	0x3d, r28	; 61
    2132:	df 91       	pop	r29
    2134:	cf 91       	pop	r28
    2136:	1f 91       	pop	r17
    2138:	0f 91       	pop	r16
    213a:	ff 90       	pop	r15
    213c:	ef 90       	pop	r14
    213e:	df 90       	pop	r13
    2140:	cf 90       	pop	r12
    2142:	08 95       	ret

00002144 <_Z15anzeige_kompassd>:

void anzeige_kompass(double winkel){
    2144:	9f 92       	push	r9
    2146:	af 92       	push	r10
    2148:	bf 92       	push	r11
    214a:	cf 92       	push	r12
    214c:	df 92       	push	r13
    214e:	ef 92       	push	r14
    2150:	ff 92       	push	r15
    2152:	0f 93       	push	r16
    2154:	1f 93       	push	r17
    2156:	cf 93       	push	r28
    2158:	df 93       	push	r29
    215a:	cd b7       	in	r28, 0x3d	; 61
    215c:	de b7       	in	r29, 0x3e	; 62
    215e:	64 97       	sbiw	r28, 0x14	; 20
    2160:	0f b6       	in	r0, 0x3f	; 63
    2162:	f8 94       	cli
    2164:	de bf       	out	0x3e, r29	; 62
    2166:	0f be       	out	0x3f, r0	; 63
    2168:	cd bf       	out	0x3d, r28	; 61
    216a:	a6 2e       	mov	r10, r22
    216c:	b7 2e       	mov	r11, r23
    216e:	c8 2e       	mov	r12, r24
    2170:	d9 2e       	mov	r13, r25
	oled.clearFrame();
    2172:	8c e1       	ldi	r24, 0x1C	; 28
    2174:	93 e0       	ldi	r25, 0x03	; 3
    2176:	0e 94 ed 02 	call	0x5da	; 0x5da <_ZN7Display10clearFrameEv>
    217a:	0f 2e       	mov	r0, r31
    217c:	fd e4       	ldi	r31, 0x4D	; 77
    217e:	ef 2e       	mov	r14, r31
    2180:	f7 e0       	ldi	r31, 0x07	; 7
    2182:	ff 2e       	mov	r15, r31
    2184:	f0 2d       	mov	r31, r0
    2186:	11 e4       	ldi	r17, 0x41	; 65
	char buffer[20];
	uint8_t buffersize=0;
	//Uhrzeit
	for(uint8_t i=0;i<bitsderrtc;i++){oled.draw_ASCI(rtc.msg_uhr[i],65+i*charsize,0*charhighte);}
    2188:	f7 01       	movw	r30, r14
    218a:	61 91       	ld	r22, Z+
    218c:	7f 01       	movw	r14, r30
    218e:	20 e0       	ldi	r18, 0x00	; 0
    2190:	41 2f       	mov	r20, r17
    2192:	8c e1       	ldi	r24, 0x1C	; 28
    2194:	93 e0       	ldi	r25, 0x03	; 3
    2196:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    219a:	1a 5f       	subi	r17, 0xFA	; 250
    219c:	11 37       	cpi	r17, 0x71	; 113
    219e:	a1 f7       	brne	.-24     	; 0x2188 <_Z15anzeige_kompassd+0x44>
    21a0:	0f 2e       	mov	r0, r31
    21a2:	f5 e5       	ldi	r31, 0x55	; 85
    21a4:	ef 2e       	mov	r14, r31
    21a6:	f7 e0       	ldi	r31, 0x07	; 7
    21a8:	ff 2e       	mov	r15, r31
    21aa:	f0 2d       	mov	r31, r0
    21ac:	11 e4       	ldi	r17, 0x41	; 65
	for(uint8_t i=0;i<bitsderrtc;i++){oled.draw_ASCI(rtc.msg_dat[i],65+i*charsize,7*charhighte);}
    21ae:	f7 01       	movw	r30, r14
    21b0:	61 91       	ld	r22, Z+
    21b2:	7f 01       	movw	r14, r30
    21b4:	28 e3       	ldi	r18, 0x38	; 56
    21b6:	41 2f       	mov	r20, r17
    21b8:	8c e1       	ldi	r24, 0x1C	; 28
    21ba:	93 e0       	ldi	r25, 0x03	; 3
    21bc:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    21c0:	1a 5f       	subi	r17, 0xFA	; 250
    21c2:	11 37       	cpi	r17, 0x71	; 113
    21c4:	a1 f7       	brne	.-24     	; 0x21ae <_Z15anzeige_kompassd+0x6a>
	//winkel als Zahl ausgeben
	buffersize=sprintf(buffer,"angle=%.0f",winkel);
    21c6:	df 92       	push	r13
    21c8:	cf 92       	push	r12
    21ca:	bf 92       	push	r11
    21cc:	af 92       	push	r10
    21ce:	86 e5       	ldi	r24, 0x56	; 86
    21d0:	92 e0       	ldi	r25, 0x02	; 2
    21d2:	9f 93       	push	r25
    21d4:	8f 93       	push	r24
    21d6:	ce 01       	movw	r24, r28
    21d8:	01 96       	adiw	r24, 0x01	; 1
    21da:	9f 93       	push	r25
    21dc:	8f 93       	push	r24
    21de:	0e 94 0f 2c 	call	0x581e	; 0x581e <sprintf>
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],65+i*charsize,6*charhighte);}
    21e2:	0f b6       	in	r0, 0x3f	; 63
    21e4:	f8 94       	cli
    21e6:	de bf       	out	0x3e, r29	; 62
    21e8:	0f be       	out	0x3f, r0	; 63
    21ea:	cd bf       	out	0x3d, r28	; 61
    21ec:	88 23       	and	r24, r24
    21ee:	f1 f0       	breq	.+60     	; 0x222c <_Z15anzeige_kompassd+0xe8>
    21f0:	8e 01       	movw	r16, r28
    21f2:	0f 5f       	subi	r16, 0xFF	; 255
    21f4:	1f 4f       	sbci	r17, 0xFF	; 255
    21f6:	81 50       	subi	r24, 0x01	; 1
    21f8:	68 94       	set
    21fa:	ee 24       	eor	r14, r14
    21fc:	e1 f8       	bld	r14, 1
    21fe:	f1 2c       	mov	r15, r1
    2200:	ec 0e       	add	r14, r28
    2202:	fd 1e       	adc	r15, r29
    2204:	e8 0e       	add	r14, r24
    2206:	f1 1c       	adc	r15, r1
    2208:	0f 2e       	mov	r0, r31
    220a:	f1 e4       	ldi	r31, 0x41	; 65
    220c:	9f 2e       	mov	r9, r31
    220e:	f0 2d       	mov	r31, r0
    2210:	f8 01       	movw	r30, r16
    2212:	61 91       	ld	r22, Z+
    2214:	8f 01       	movw	r16, r30
    2216:	20 e3       	ldi	r18, 0x30	; 48
    2218:	49 2d       	mov	r20, r9
    221a:	8c e1       	ldi	r24, 0x1C	; 28
    221c:	93 e0       	ldi	r25, 0x03	; 3
    221e:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    2222:	f6 e0       	ldi	r31, 0x06	; 6
    2224:	9f 0e       	add	r9, r31
    2226:	0e 15       	cp	r16, r14
    2228:	1f 05       	cpc	r17, r15
    222a:	91 f7       	brne	.-28     	; 0x2210 <_Z15anzeige_kompassd+0xcc>
	//dreieck als Zeiger
	anzeige_nadel(31,31,winkel);
    222c:	2a 2d       	mov	r18, r10
    222e:	3b 2d       	mov	r19, r11
    2230:	4c 2d       	mov	r20, r12
    2232:	5d 2d       	mov	r21, r13
    2234:	6f e1       	ldi	r22, 0x1F	; 31
    2236:	8f e1       	ldi	r24, 0x1F	; 31
    2238:	0e 94 56 0b 	call	0x16ac	; 0x16ac <_Z13anzeige_nadelhhf>
	//Richtung ausgeben
	anzeige_richtung(winkel);	
    223c:	6a 2d       	mov	r22, r10
    223e:	7b 2d       	mov	r23, r11
    2240:	8c 2d       	mov	r24, r12
    2242:	9d 2d       	mov	r25, r13
    2244:	0e 94 98 0a 	call	0x1530	; 0x1530 <_Z16anzeige_richtungf>
}
    2248:	64 96       	adiw	r28, 0x14	; 20
    224a:	0f b6       	in	r0, 0x3f	; 63
    224c:	f8 94       	cli
    224e:	de bf       	out	0x3e, r29	; 62
    2250:	0f be       	out	0x3f, r0	; 63
    2252:	cd bf       	out	0x3d, r28	; 61
    2254:	df 91       	pop	r29
    2256:	cf 91       	pop	r28
    2258:	1f 91       	pop	r17
    225a:	0f 91       	pop	r16
    225c:	ff 90       	pop	r15
    225e:	ef 90       	pop	r14
    2260:	df 90       	pop	r13
    2262:	cf 90       	pop	r12
    2264:	bf 90       	pop	r11
    2266:	af 90       	pop	r10
    2268:	9f 90       	pop	r9
    226a:	08 95       	ret

0000226c <_Z10timerseitev>:

void timerseite(){
    226c:	af 92       	push	r10
    226e:	bf 92       	push	r11
    2270:	df 92       	push	r13
    2272:	ef 92       	push	r14
    2274:	0f 93       	push	r16
    2276:	1f 93       	push	r17
    2278:	cf 93       	push	r28
    227a:	df 93       	push	r29
    227c:	cd b7       	in	r28, 0x3d	; 61
    227e:	de b7       	in	r29, 0x3e	; 62
    2280:	64 97       	sbiw	r28, 0x14	; 20
    2282:	0f b6       	in	r0, 0x3f	; 63
    2284:	f8 94       	cli
    2286:	de bf       	out	0x3e, r29	; 62
    2288:	0f be       	out	0x3f, r0	; 63
    228a:	cd bf       	out	0x3d, r28	; 61
	char buffer[20];
	uint8_t buffersize=0;
	oled.clearFrame();
    228c:	8c e1       	ldi	r24, 0x1C	; 28
    228e:	93 e0       	ldi	r25, 0x03	; 3
    2290:	0e 94 ed 02 	call	0x5da	; 0x5da <_ZN7Display10clearFrameEv>
	buffersize=sprintf(buffer,"Timer: ");
    2294:	88 e0       	ldi	r24, 0x08	; 8
    2296:	e1 e6       	ldi	r30, 0x61	; 97
    2298:	f2 e0       	ldi	r31, 0x02	; 2
    229a:	8e 01       	movw	r16, r28
    229c:	0f 5f       	subi	r16, 0xFF	; 255
    229e:	1f 4f       	sbci	r17, 0xFF	; 255
    22a0:	d8 01       	movw	r26, r16
    22a2:	01 90       	ld	r0, Z+
    22a4:	0d 92       	st	X+, r0
    22a6:	8a 95       	dec	r24
    22a8:	e1 f7       	brne	.-8      	; 0x22a2 <_Z10timerseitev+0x36>
    22aa:	d0 2e       	mov	r13, r16
    22ac:	e1 2e       	mov	r14, r17
    22ae:	58 01       	movw	r10, r16
    22b0:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,0*charhighte);}
    22b2:	f5 01       	movw	r30, r10
    22b4:	61 91       	ld	r22, Z+
    22b6:	5f 01       	movw	r10, r30
    22b8:	20 e0       	ldi	r18, 0x00	; 0
    22ba:	41 2f       	mov	r20, r17
    22bc:	8c e1       	ldi	r24, 0x1C	; 28
    22be:	93 e0       	ldi	r25, 0x03	; 3
    22c0:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    22c4:	1a 5f       	subi	r17, 0xFA	; 250
    22c6:	1a 32       	cpi	r17, 0x2A	; 42
    22c8:	a1 f7       	brne	.-24     	; 0x22b2 <_Z10timerseitev+0x46>
	if (pos!=0)
    22ca:	60 91 02 03 	lds	r22, 0x0302
    22ce:	66 23       	and	r22, r22
    22d0:	39 f0       	breq	.+14     	; 0x22e0 <_Z10timerseitev+0x74>
	{
		oled.draw_ASCI(pos+'0',buffersize*charsize,0*charhighte);
    22d2:	60 5d       	subi	r22, 0xD0	; 208
    22d4:	20 e0       	ldi	r18, 0x00	; 0
    22d6:	4a e2       	ldi	r20, 0x2A	; 42
    22d8:	8c e1       	ldi	r24, 0x1C	; 28
    22da:	93 e0       	ldi	r25, 0x03	; 3
    22dc:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
	}
		
	buffer[0]=zaehler.Stunden/10;
    22e0:	90 91 45 07 	lds	r25, 0x0745
    22e4:	8d ec       	ldi	r24, 0xCD	; 205
    22e6:	98 9f       	mul	r25, r24
    22e8:	21 2d       	mov	r18, r1
    22ea:	11 24       	eor	r1, r1
    22ec:	26 95       	lsr	r18
    22ee:	26 95       	lsr	r18
    22f0:	26 95       	lsr	r18
    22f2:	29 83       	std	Y+1, r18	; 0x01
	buffer[1]=zaehler.Stunden%10;
    22f4:	22 0f       	add	r18, r18
    22f6:	32 2f       	mov	r19, r18
    22f8:	33 0f       	add	r19, r19
    22fa:	33 0f       	add	r19, r19
    22fc:	23 0f       	add	r18, r19
    22fe:	92 1b       	sub	r25, r18
    2300:	9a 83       	std	Y+2, r25	; 0x02
	buffer[2]=':';
    2302:	9a e3       	ldi	r25, 0x3A	; 58
    2304:	9b 83       	std	Y+3, r25	; 0x03
	buffer[3]=zaehler.Minuten/10;
    2306:	20 91 46 07 	lds	r18, 0x0746
    230a:	28 9f       	mul	r18, r24
    230c:	31 2d       	mov	r19, r1
    230e:	11 24       	eor	r1, r1
    2310:	36 95       	lsr	r19
    2312:	36 95       	lsr	r19
    2314:	36 95       	lsr	r19
    2316:	3c 83       	std	Y+4, r19	; 0x04
	buffer[4]=zaehler.Minuten%10;
    2318:	33 0f       	add	r19, r19
    231a:	43 2f       	mov	r20, r19
    231c:	44 0f       	add	r20, r20
    231e:	44 0f       	add	r20, r20
    2320:	34 0f       	add	r19, r20
    2322:	23 1b       	sub	r18, r19
    2324:	2d 83       	std	Y+5, r18	; 0x05
	buffer[5]=':';
    2326:	9e 83       	std	Y+6, r25	; 0x06
	buffer[6]=zaehler.Sekunden/10;
    2328:	90 91 47 07 	lds	r25, 0x0747
    232c:	98 9f       	mul	r25, r24
    232e:	81 2d       	mov	r24, r1
    2330:	11 24       	eor	r1, r1
    2332:	86 95       	lsr	r24
    2334:	86 95       	lsr	r24
    2336:	86 95       	lsr	r24
    2338:	8f 83       	std	Y+7, r24	; 0x07
	buffer[7]=zaehler.Sekunden%10;
    233a:	88 0f       	add	r24, r24
    233c:	28 2f       	mov	r18, r24
    233e:	22 0f       	add	r18, r18
    2340:	22 0f       	add	r18, r18
    2342:	82 0f       	add	r24, r18
    2344:	98 1b       	sub	r25, r24
    2346:	98 87       	std	Y+8, r25	; 0x08
    2348:	ad 2c       	mov	r10, r13
    234a:	be 2c       	mov	r11, r14
    234c:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<bitsderrtc;i++){
		if (buffer[i]==':')
    234e:	f5 01       	movw	r30, r10
    2350:	61 91       	ld	r22, Z+
    2352:	5f 01       	movw	r10, r30
    2354:	6a 33       	cpi	r22, 0x3A	; 58
    2356:	39 f4       	brne	.+14     	; 0x2366 <_Z10timerseitev+0xfa>
		{
			oled.draw_ASCI(buffer[i],i*numbersmalsize,2.5*charhighte);
    2358:	24 e1       	ldi	r18, 0x14	; 20
    235a:	41 2f       	mov	r20, r17
    235c:	8c e1       	ldi	r24, 0x1C	; 28
    235e:	93 e0       	ldi	r25, 0x03	; 3
    2360:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    2364:	06 c0       	rjmp	.+12     	; 0x2372 <_Z10timerseitev+0x106>
		}
		else{
			oled.draw_number16x16(buffer[i],i*numbersmalsize,2*charhighte);
    2366:	20 e1       	ldi	r18, 0x10	; 16
    2368:	41 2f       	mov	r20, r17
    236a:	8c e1       	ldi	r24, 0x1C	; 28
    236c:	93 e0       	ldi	r25, 0x03	; 3
    236e:	0e 94 26 06 	call	0xc4c	; 0xc4c <_ZN7Display16draw_number16x16Ehhh>
    2372:	10 5f       	subi	r17, 0xF0	; 240
	buffer[3]=zaehler.Minuten/10;
	buffer[4]=zaehler.Minuten%10;
	buffer[5]=':';
	buffer[6]=zaehler.Sekunden/10;
	buffer[7]=zaehler.Sekunden%10;
	for(uint8_t i=0;i<bitsderrtc;i++){
    2374:	10 38       	cpi	r17, 0x80	; 128
    2376:	59 f7       	brne	.-42     	; 0x234e <_Z10timerseitev+0xe2>
		}
		else{
			oled.draw_number16x16(buffer[i],i*numbersmalsize,2*charhighte);
		}
	}
}
    2378:	64 96       	adiw	r28, 0x14	; 20
    237a:	0f b6       	in	r0, 0x3f	; 63
    237c:	f8 94       	cli
    237e:	de bf       	out	0x3e, r29	; 62
    2380:	0f be       	out	0x3f, r0	; 63
    2382:	cd bf       	out	0x3d, r28	; 61
    2384:	df 91       	pop	r29
    2386:	cf 91       	pop	r28
    2388:	1f 91       	pop	r17
    238a:	0f 91       	pop	r16
    238c:	ef 90       	pop	r14
    238e:	df 90       	pop	r13
    2390:	bf 90       	pop	r11
    2392:	af 90       	pop	r10
    2394:	08 95       	ret

00002396 <_Z13Stoppuhrseitev>:

void Stoppuhrseite(){
    2396:	af 92       	push	r10
    2398:	bf 92       	push	r11
    239a:	df 92       	push	r13
    239c:	ef 92       	push	r14
    239e:	0f 93       	push	r16
    23a0:	1f 93       	push	r17
    23a2:	cf 93       	push	r28
    23a4:	df 93       	push	r29
    23a6:	cd b7       	in	r28, 0x3d	; 61
    23a8:	de b7       	in	r29, 0x3e	; 62
    23aa:	64 97       	sbiw	r28, 0x14	; 20
    23ac:	0f b6       	in	r0, 0x3f	; 63
    23ae:	f8 94       	cli
    23b0:	de bf       	out	0x3e, r29	; 62
    23b2:	0f be       	out	0x3f, r0	; 63
    23b4:	cd bf       	out	0x3d, r28	; 61
	char buffer[20];
	uint8_t buffersize=0;
	oled.clearFrame();
    23b6:	8c e1       	ldi	r24, 0x1C	; 28
    23b8:	93 e0       	ldi	r25, 0x03	; 3
    23ba:	0e 94 ed 02 	call	0x5da	; 0x5da <_ZN7Display10clearFrameEv>
	buffersize=sprintf(buffer,"Stoppuhr: ");
    23be:	8b e0       	ldi	r24, 0x0B	; 11
    23c0:	e9 e6       	ldi	r30, 0x69	; 105
    23c2:	f2 e0       	ldi	r31, 0x02	; 2
    23c4:	8e 01       	movw	r16, r28
    23c6:	0f 5f       	subi	r16, 0xFF	; 255
    23c8:	1f 4f       	sbci	r17, 0xFF	; 255
    23ca:	d8 01       	movw	r26, r16
    23cc:	01 90       	ld	r0, Z+
    23ce:	0d 92       	st	X+, r0
    23d0:	8a 95       	dec	r24
    23d2:	e1 f7       	brne	.-8      	; 0x23cc <_Z13Stoppuhrseitev+0x36>
    23d4:	d0 2e       	mov	r13, r16
    23d6:	e1 2e       	mov	r14, r17
    23d8:	58 01       	movw	r10, r16
    23da:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,0*charhighte);}
    23dc:	f5 01       	movw	r30, r10
    23de:	61 91       	ld	r22, Z+
    23e0:	5f 01       	movw	r10, r30
    23e2:	20 e0       	ldi	r18, 0x00	; 0
    23e4:	41 2f       	mov	r20, r17
    23e6:	8c e1       	ldi	r24, 0x1C	; 28
    23e8:	93 e0       	ldi	r25, 0x03	; 3
    23ea:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    23ee:	1a 5f       	subi	r17, 0xFA	; 250
    23f0:	1c 33       	cpi	r17, 0x3C	; 60
    23f2:	a1 f7       	brne	.-24     	; 0x23dc <_Z13Stoppuhrseitev+0x46>
	
	buffer[0]=stoppuhr.Stunden/10;
    23f4:	90 91 2d 07 	lds	r25, 0x072D
    23f8:	8d ec       	ldi	r24, 0xCD	; 205
    23fa:	98 9f       	mul	r25, r24
    23fc:	21 2d       	mov	r18, r1
    23fe:	11 24       	eor	r1, r1
    2400:	26 95       	lsr	r18
    2402:	26 95       	lsr	r18
    2404:	26 95       	lsr	r18
    2406:	29 83       	std	Y+1, r18	; 0x01
	buffer[1]=stoppuhr.Stunden%10;
    2408:	22 0f       	add	r18, r18
    240a:	32 2f       	mov	r19, r18
    240c:	33 0f       	add	r19, r19
    240e:	33 0f       	add	r19, r19
    2410:	23 0f       	add	r18, r19
    2412:	92 1b       	sub	r25, r18
    2414:	9a 83       	std	Y+2, r25	; 0x02
	buffer[2]=':';
    2416:	9a e3       	ldi	r25, 0x3A	; 58
    2418:	9b 83       	std	Y+3, r25	; 0x03
	buffer[3]=stoppuhr.Minuten/10;
    241a:	20 91 2e 07 	lds	r18, 0x072E
    241e:	28 9f       	mul	r18, r24
    2420:	31 2d       	mov	r19, r1
    2422:	11 24       	eor	r1, r1
    2424:	36 95       	lsr	r19
    2426:	36 95       	lsr	r19
    2428:	36 95       	lsr	r19
    242a:	3c 83       	std	Y+4, r19	; 0x04
	buffer[4]=stoppuhr.Minuten%10;
    242c:	33 0f       	add	r19, r19
    242e:	43 2f       	mov	r20, r19
    2430:	44 0f       	add	r20, r20
    2432:	44 0f       	add	r20, r20
    2434:	34 0f       	add	r19, r20
    2436:	23 1b       	sub	r18, r19
    2438:	2d 83       	std	Y+5, r18	; 0x05
	buffer[5]=':';
    243a:	9e 83       	std	Y+6, r25	; 0x06
	buffer[6]=stoppuhr.Sekunden/10;
    243c:	90 91 2f 07 	lds	r25, 0x072F
    2440:	98 9f       	mul	r25, r24
    2442:	81 2d       	mov	r24, r1
    2444:	11 24       	eor	r1, r1
    2446:	86 95       	lsr	r24
    2448:	86 95       	lsr	r24
    244a:	86 95       	lsr	r24
    244c:	8f 83       	std	Y+7, r24	; 0x07
	buffer[7]=stoppuhr.Sekunden%10;
    244e:	88 0f       	add	r24, r24
    2450:	28 2f       	mov	r18, r24
    2452:	22 0f       	add	r18, r18
    2454:	22 0f       	add	r18, r18
    2456:	82 0f       	add	r24, r18
    2458:	98 1b       	sub	r25, r24
    245a:	98 87       	std	Y+8, r25	; 0x08
    245c:	ad 2c       	mov	r10, r13
    245e:	be 2c       	mov	r11, r14
    2460:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<bitsderrtc;i++){
		if (buffer[i]==':')
    2462:	f5 01       	movw	r30, r10
    2464:	61 91       	ld	r22, Z+
    2466:	5f 01       	movw	r10, r30
    2468:	6a 33       	cpi	r22, 0x3A	; 58
    246a:	39 f4       	brne	.+14     	; 0x247a <_Z13Stoppuhrseitev+0xe4>
		{
			oled.draw_ASCI(buffer[i],i*numbersmalsize,2.5*charhighte);
    246c:	24 e1       	ldi	r18, 0x14	; 20
    246e:	41 2f       	mov	r20, r17
    2470:	8c e1       	ldi	r24, 0x1C	; 28
    2472:	93 e0       	ldi	r25, 0x03	; 3
    2474:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    2478:	06 c0       	rjmp	.+12     	; 0x2486 <_Z13Stoppuhrseitev+0xf0>
		}
		else{
			oled.draw_number16x16(buffer[i],i*numbersmalsize,2*charhighte);
    247a:	20 e1       	ldi	r18, 0x10	; 16
    247c:	41 2f       	mov	r20, r17
    247e:	8c e1       	ldi	r24, 0x1C	; 28
    2480:	93 e0       	ldi	r25, 0x03	; 3
    2482:	0e 94 26 06 	call	0xc4c	; 0xc4c <_ZN7Display16draw_number16x16Ehhh>
    2486:	10 5f       	subi	r17, 0xF0	; 240
	buffer[3]=stoppuhr.Minuten/10;
	buffer[4]=stoppuhr.Minuten%10;
	buffer[5]=':';
	buffer[6]=stoppuhr.Sekunden/10;
	buffer[7]=stoppuhr.Sekunden%10;
	for(uint8_t i=0;i<bitsderrtc;i++){
    2488:	10 38       	cpi	r17, 0x80	; 128
    248a:	59 f7       	brne	.-42     	; 0x2462 <_Z13Stoppuhrseitev+0xcc>
		}
		else{
			oled.draw_number16x16(buffer[i],i*numbersmalsize,2*charhighte);
		}
	}
}
    248c:	64 96       	adiw	r28, 0x14	; 20
    248e:	0f b6       	in	r0, 0x3f	; 63
    2490:	f8 94       	cli
    2492:	de bf       	out	0x3e, r29	; 62
    2494:	0f be       	out	0x3f, r0	; 63
    2496:	cd bf       	out	0x3d, r28	; 61
    2498:	df 91       	pop	r29
    249a:	cf 91       	pop	r28
    249c:	1f 91       	pop	r17
    249e:	0f 91       	pop	r16
    24a0:	ef 90       	pop	r14
    24a2:	df 90       	pop	r13
    24a4:	bf 90       	pop	r11
    24a6:	af 90       	pop	r10
    24a8:	08 95       	ret

000024aa <_Z14Pressuresensorv>:

void Pressuresensor(){
    24aa:	bf 92       	push	r11
    24ac:	cf 92       	push	r12
    24ae:	df 92       	push	r13
    24b0:	ef 92       	push	r14
    24b2:	ff 92       	push	r15
    24b4:	0f 93       	push	r16
    24b6:	1f 93       	push	r17
    24b8:	cf 93       	push	r28
    24ba:	df 93       	push	r29
    24bc:	cd b7       	in	r28, 0x3d	; 61
    24be:	de b7       	in	r29, 0x3e	; 62
    24c0:	64 97       	sbiw	r28, 0x14	; 20
    24c2:	0f b6       	in	r0, 0x3f	; 63
    24c4:	f8 94       	cli
    24c6:	de bf       	out	0x3e, r29	; 62
    24c8:	0f be       	out	0x3f, r0	; 63
    24ca:	cd bf       	out	0x3d, r28	; 61
	Baro.READ_Pressure_once();
    24cc:	89 e0       	ldi	r24, 0x09	; 9
    24ce:	93 e0       	ldi	r25, 0x03	; 3
    24d0:	0e 94 3a 21 	call	0x4274	; 0x4274 <_ZN8Pressure18READ_Pressure_onceEv>
	Baro.READ_Temperature();
    24d4:	89 e0       	ldi	r24, 0x09	; 9
    24d6:	93 e0       	ldi	r25, 0x03	; 3
    24d8:	0e 94 c2 21 	call	0x4384	; 0x4384 <_ZN8Pressure16READ_TemperatureEv>
	char buffer[20];
	uint8_t buffersize=0;
	oled.clearFrame();
    24dc:	8c e1       	ldi	r24, 0x1C	; 28
    24de:	93 e0       	ldi	r25, 0x03	; 3
    24e0:	0e 94 ed 02 	call	0x5da	; 0x5da <_ZN7Display10clearFrameEv>
	header(0);
    24e4:	80 e0       	ldi	r24, 0x00	; 0
    24e6:	0e 94 18 0a 	call	0x1430	; 0x1430 <_Z6headerh>
	bottom(0);
    24ea:	80 e0       	ldi	r24, 0x00	; 0
    24ec:	0e 94 82 0a 	call	0x1504	; 0x1504 <_Z6bottomh>
	buffersize=sprintf(buffer,"LPS25H Daten:");
    24f0:	8e e0       	ldi	r24, 0x0E	; 14
    24f2:	e4 e7       	ldi	r30, 0x74	; 116
    24f4:	f2 e0       	ldi	r31, 0x02	; 2
    24f6:	8e 01       	movw	r16, r28
    24f8:	0f 5f       	subi	r16, 0xFF	; 255
    24fa:	1f 4f       	sbci	r17, 0xFF	; 255
    24fc:	d8 01       	movw	r26, r16
    24fe:	01 90       	ld	r0, Z+
    2500:	0d 92       	st	X+, r0
    2502:	8a 95       	dec	r24
    2504:	e1 f7       	brne	.-8      	; 0x24fe <_Z14Pressuresensorv+0x54>
    2506:	c0 2e       	mov	r12, r16
    2508:	d1 2e       	mov	r13, r17
    250a:	78 01       	movw	r14, r16
    250c:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,2*charhighte);}
    250e:	f7 01       	movw	r30, r14
    2510:	61 91       	ld	r22, Z+
    2512:	7f 01       	movw	r14, r30
    2514:	20 e1       	ldi	r18, 0x10	; 16
    2516:	41 2f       	mov	r20, r17
    2518:	8c e1       	ldi	r24, 0x1C	; 28
    251a:	93 e0       	ldi	r25, 0x03	; 3
    251c:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    2520:	1a 5f       	subi	r17, 0xFA	; 250
    2522:	1e 34       	cpi	r17, 0x4E	; 78
    2524:	a1 f7       	brne	.-24     	; 0x250e <_Z14Pressuresensorv+0x64>
	buffersize=sprintf(buffer,"%.1f HPa",Baro.Press);
    2526:	e9 e0       	ldi	r30, 0x09	; 9
    2528:	f3 e0       	ldi	r31, 0x03	; 3
    252a:	83 81       	ldd	r24, Z+3	; 0x03
    252c:	8f 93       	push	r24
    252e:	82 81       	ldd	r24, Z+2	; 0x02
    2530:	8f 93       	push	r24
    2532:	81 81       	ldd	r24, Z+1	; 0x01
    2534:	8f 93       	push	r24
    2536:	80 81       	ld	r24, Z
    2538:	8f 93       	push	r24
    253a:	82 e8       	ldi	r24, 0x82	; 130
    253c:	92 e0       	ldi	r25, 0x02	; 2
    253e:	9f 93       	push	r25
    2540:	8f 93       	push	r24
    2542:	ce 01       	movw	r24, r28
    2544:	01 96       	adiw	r24, 0x01	; 1
    2546:	9f 93       	push	r25
    2548:	8f 93       	push	r24
    254a:	0e 94 0f 2c 	call	0x581e	; 0x581e <sprintf>
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,3*charhighte);}
    254e:	0f b6       	in	r0, 0x3f	; 63
    2550:	f8 94       	cli
    2552:	de bf       	out	0x3e, r29	; 62
    2554:	0f be       	out	0x3f, r0	; 63
    2556:	cd bf       	out	0x3d, r28	; 61
    2558:	88 23       	and	r24, r24
    255a:	d1 f0       	breq	.+52     	; 0x2590 <_Z14Pressuresensorv+0xe6>
    255c:	81 50       	subi	r24, 0x01	; 1
    255e:	68 94       	set
    2560:	ee 24       	eor	r14, r14
    2562:	e1 f8       	bld	r14, 1
    2564:	f1 2c       	mov	r15, r1
    2566:	ec 0e       	add	r14, r28
    2568:	fd 1e       	adc	r15, r29
    256a:	e8 0e       	add	r14, r24
    256c:	f1 1c       	adc	r15, r1
    256e:	0c 2d       	mov	r16, r12
    2570:	1d 2d       	mov	r17, r13
    2572:	b1 2c       	mov	r11, r1
    2574:	f8 01       	movw	r30, r16
    2576:	61 91       	ld	r22, Z+
    2578:	8f 01       	movw	r16, r30
    257a:	28 e1       	ldi	r18, 0x18	; 24
    257c:	4b 2d       	mov	r20, r11
    257e:	8c e1       	ldi	r24, 0x1C	; 28
    2580:	93 e0       	ldi	r25, 0x03	; 3
    2582:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    2586:	f6 e0       	ldi	r31, 0x06	; 6
    2588:	bf 0e       	add	r11, r31
    258a:	0e 15       	cp	r16, r14
    258c:	1f 05       	cpc	r17, r15
    258e:	91 f7       	brne	.-28     	; 0x2574 <_Z14Pressuresensorv+0xca>
	buffersize=sprintf(buffer,"Hoehe: %.1f m",(double)Baro.altitude(Baro.Press));
    2590:	40 91 09 03 	lds	r20, 0x0309
    2594:	50 91 0a 03 	lds	r21, 0x030A
    2598:	60 91 0b 03 	lds	r22, 0x030B
    259c:	70 91 0c 03 	lds	r23, 0x030C
    25a0:	89 e0       	ldi	r24, 0x09	; 9
    25a2:	93 e0       	ldi	r25, 0x03	; 3
    25a4:	0e 94 3f 22 	call	0x447e	; 0x447e <_ZN8Pressure8altitudeEd>
    25a8:	9f 93       	push	r25
    25aa:	8f 93       	push	r24
    25ac:	7f 93       	push	r23
    25ae:	6f 93       	push	r22
    25b0:	8b e8       	ldi	r24, 0x8B	; 139
    25b2:	92 e0       	ldi	r25, 0x02	; 2
    25b4:	9f 93       	push	r25
    25b6:	8f 93       	push	r24
    25b8:	ce 01       	movw	r24, r28
    25ba:	01 96       	adiw	r24, 0x01	; 1
    25bc:	9f 93       	push	r25
    25be:	8f 93       	push	r24
    25c0:	0e 94 0f 2c 	call	0x581e	; 0x581e <sprintf>
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,4*charhighte);}
    25c4:	0f b6       	in	r0, 0x3f	; 63
    25c6:	f8 94       	cli
    25c8:	de bf       	out	0x3e, r29	; 62
    25ca:	0f be       	out	0x3f, r0	; 63
    25cc:	cd bf       	out	0x3d, r28	; 61
    25ce:	88 23       	and	r24, r24
    25d0:	d1 f0       	breq	.+52     	; 0x2606 <_Z14Pressuresensorv+0x15c>
    25d2:	81 50       	subi	r24, 0x01	; 1
    25d4:	68 94       	set
    25d6:	ee 24       	eor	r14, r14
    25d8:	e1 f8       	bld	r14, 1
    25da:	f1 2c       	mov	r15, r1
    25dc:	ec 0e       	add	r14, r28
    25de:	fd 1e       	adc	r15, r29
    25e0:	e8 0e       	add	r14, r24
    25e2:	f1 1c       	adc	r15, r1
    25e4:	0c 2d       	mov	r16, r12
    25e6:	1d 2d       	mov	r17, r13
    25e8:	b1 2c       	mov	r11, r1
    25ea:	f8 01       	movw	r30, r16
    25ec:	61 91       	ld	r22, Z+
    25ee:	8f 01       	movw	r16, r30
    25f0:	20 e2       	ldi	r18, 0x20	; 32
    25f2:	4b 2d       	mov	r20, r11
    25f4:	8c e1       	ldi	r24, 0x1C	; 28
    25f6:	93 e0       	ldi	r25, 0x03	; 3
    25f8:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    25fc:	f6 e0       	ldi	r31, 0x06	; 6
    25fe:	bf 0e       	add	r11, r31
    2600:	0e 15       	cp	r16, r14
    2602:	1f 05       	cpc	r17, r15
    2604:	91 f7       	brne	.-28     	; 0x25ea <_Z14Pressuresensorv+0x140>
	buffersize=sprintf(buffer,"%.1f C",(double)Baro.Tempera);
    2606:	ed e0       	ldi	r30, 0x0D	; 13
    2608:	f3 e0       	ldi	r31, 0x03	; 3
    260a:	83 81       	ldd	r24, Z+3	; 0x03
    260c:	8f 93       	push	r24
    260e:	82 81       	ldd	r24, Z+2	; 0x02
    2610:	8f 93       	push	r24
    2612:	81 81       	ldd	r24, Z+1	; 0x01
    2614:	8f 93       	push	r24
    2616:	80 81       	ld	r24, Z
    2618:	8f 93       	push	r24
    261a:	89 e9       	ldi	r24, 0x99	; 153
    261c:	92 e0       	ldi	r25, 0x02	; 2
    261e:	9f 93       	push	r25
    2620:	8f 93       	push	r24
    2622:	ce 01       	movw	r24, r28
    2624:	01 96       	adiw	r24, 0x01	; 1
    2626:	9f 93       	push	r25
    2628:	8f 93       	push	r24
    262a:	0e 94 0f 2c 	call	0x581e	; 0x581e <sprintf>
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,6*charhighte);}
    262e:	0f b6       	in	r0, 0x3f	; 63
    2630:	f8 94       	cli
    2632:	de bf       	out	0x3e, r29	; 62
    2634:	0f be       	out	0x3f, r0	; 63
    2636:	cd bf       	out	0x3d, r28	; 61
    2638:	88 23       	and	r24, r24
    263a:	d1 f0       	breq	.+52     	; 0x2670 <_Z14Pressuresensorv+0x1c6>
    263c:	81 50       	subi	r24, 0x01	; 1
    263e:	68 94       	set
    2640:	ee 24       	eor	r14, r14
    2642:	e1 f8       	bld	r14, 1
    2644:	f1 2c       	mov	r15, r1
    2646:	ec 0e       	add	r14, r28
    2648:	fd 1e       	adc	r15, r29
    264a:	e8 0e       	add	r14, r24
    264c:	f1 1c       	adc	r15, r1
    264e:	0c 2d       	mov	r16, r12
    2650:	1d 2d       	mov	r17, r13
    2652:	d1 2c       	mov	r13, r1
    2654:	f8 01       	movw	r30, r16
    2656:	61 91       	ld	r22, Z+
    2658:	8f 01       	movw	r16, r30
    265a:	20 e3       	ldi	r18, 0x30	; 48
    265c:	4d 2d       	mov	r20, r13
    265e:	8c e1       	ldi	r24, 0x1C	; 28
    2660:	93 e0       	ldi	r25, 0x03	; 3
    2662:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    2666:	f6 e0       	ldi	r31, 0x06	; 6
    2668:	df 0e       	add	r13, r31
    266a:	0e 15       	cp	r16, r14
    266c:	1f 05       	cpc	r17, r15
    266e:	91 f7       	brne	.-28     	; 0x2654 <_Z14Pressuresensorv+0x1aa>
	//buffersize=sprintf(buffer,"%i",Baro.Wertedruck[1]);
	//for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,4*charhighte);}
	//buffersize=sprintf(buffer,"%i",Baro.Wertedruck[2]);
	//for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,5*charhighte);}
}
    2670:	64 96       	adiw	r28, 0x14	; 20
    2672:	0f b6       	in	r0, 0x3f	; 63
    2674:	f8 94       	cli
    2676:	de bf       	out	0x3e, r29	; 62
    2678:	0f be       	out	0x3f, r0	; 63
    267a:	cd bf       	out	0x3d, r28	; 61
    267c:	df 91       	pop	r29
    267e:	cf 91       	pop	r28
    2680:	1f 91       	pop	r17
    2682:	0f 91       	pop	r16
    2684:	ff 90       	pop	r15
    2686:	ef 90       	pop	r14
    2688:	df 90       	pop	r13
    268a:	cf 90       	pop	r12
    268c:	bf 90       	pop	r11
    268e:	08 95       	ret

00002690 <_Z13uhreinstellenv>:

void uhreinstellen(){
    2690:	2f 92       	push	r2
    2692:	3f 92       	push	r3
    2694:	4f 92       	push	r4
    2696:	5f 92       	push	r5
    2698:	6f 92       	push	r6
    269a:	7f 92       	push	r7
    269c:	8f 92       	push	r8
    269e:	9f 92       	push	r9
    26a0:	af 92       	push	r10
    26a2:	bf 92       	push	r11
    26a4:	cf 92       	push	r12
    26a6:	df 92       	push	r13
    26a8:	ef 92       	push	r14
    26aa:	ff 92       	push	r15
    26ac:	0f 93       	push	r16
    26ae:	1f 93       	push	r17
    26b0:	cf 93       	push	r28
    26b2:	df 93       	push	r29
    26b4:	cd b7       	in	r28, 0x3d	; 61
    26b6:	de b7       	in	r29, 0x3e	; 62
    26b8:	66 97       	sbiw	r28, 0x16	; 22
    26ba:	0f b6       	in	r0, 0x3f	; 63
    26bc:	f8 94       	cli
    26be:	de bf       	out	0x3e, r29	; 62
    26c0:	0f be       	out	0x3f, r0	; 63
    26c2:	cd bf       	out	0x3d, r28	; 61
	rtc.RTCstop();
    26c4:	8d e4       	ldi	r24, 0x4D	; 77
    26c6:	97 e0       	ldi	r25, 0x07	; 7
    26c8:	0e 94 a2 23 	call	0x4744	; 0x4744 <_ZN3RTC7RTCstopEv>
	
	oled.clearFrame();
    26cc:	8c e1       	ldi	r24, 0x1C	; 28
    26ce:	93 e0       	ldi	r25, 0x03	; 3
    26d0:	0e 94 ed 02 	call	0x5da	; 0x5da <_ZN7Display10clearFrameEv>
	char buffer[20];
	uint8_t buffersize;
	uint8_t pos=0;
    26d4:	91 2c       	mov	r9, r1
	while(pos<11){
		buffersize=sprintf(buffer,"Uhreinstellung");
    26d6:	0f 2e       	mov	r0, r31
    26d8:	ff e0       	ldi	r31, 0x0F	; 15
    26da:	6f 2e       	mov	r6, r31
    26dc:	f0 2d       	mov	r31, r0
    26de:	ce 01       	movw	r24, r28
    26e0:	01 96       	adiw	r24, 0x01	; 1
    26e2:	7c 01       	movw	r14, r24
    26e4:	78 2e       	mov	r7, r24
    26e6:	8f 2c       	mov	r8, r15
    26e8:	b1 2c       	mov	r11, r1
		for(uint8_t i = 0; i<buffersize;i++){
			oled.draw_ASCI(buffer[i],charsize*i,0);
		}
		buffersize=sprintf(buffer,"--------------");
    26ea:	8d 8b       	std	Y+21, r24	; 0x15
    26ec:	fe 8a       	std	Y+22, r15	; 0x16
		for(uint8_t i = 0; i<buffersize;i++){
			oled.draw_ASCI(buffer[i],charsize*i,8);
		}
		buffer[0]=rtc.Stunden/10;
    26ee:	0f 2e       	mov	r0, r31
    26f0:	fd ec       	ldi	r31, 0xCD	; 205
    26f2:	af 2e       	mov	r10, r31
    26f4:	f0 2d       	mov	r31, r0
		buffer[1]=rtc.Stunden%10;
		buffer[2]=':';
		buffer[3]=rtc.Minuten/10;
		buffer[4]=rtc.Minuten%10;
		buffer[5]=' ';
		buffer[6]=rtc.Tag/10;
    26f6:	0f 2e       	mov	r0, r31
    26f8:	f1 e6       	ldi	r31, 0x61	; 97
    26fa:	4f 2e       	mov	r4, r31
    26fc:	f7 e0       	ldi	r31, 0x07	; 7
    26fe:	5f 2e       	mov	r5, r31
    2700:	f0 2d       	mov	r31, r0
		buffer[7]=rtc.Tag%10;
		buffer[8]='.';
		buffer[9]=rtc.Monat/10;
    2702:	0f 2e       	mov	r0, r31
    2704:	f2 e6       	ldi	r31, 0x62	; 98
    2706:	cf 2e       	mov	r12, r31
    2708:	f7 e0       	ldi	r31, 0x07	; 7
    270a:	df 2e       	mov	r13, r31
    270c:	f0 2d       	mov	r31, r0
	oled.clearFrame();
	char buffer[20];
	uint8_t buffersize;
	uint8_t pos=0;
	while(pos<11){
		buffersize=sprintf(buffer,"Uhreinstellung");
    270e:	e0 ea       	ldi	r30, 0xA0	; 160
    2710:	f2 e0       	ldi	r31, 0x02	; 2
    2712:	a7 2d       	mov	r26, r7
    2714:	b8 2d       	mov	r27, r8
    2716:	86 2d       	mov	r24, r6
    2718:	01 90       	ld	r0, Z+
    271a:	0d 92       	st	X+, r0
    271c:	8a 95       	dec	r24
    271e:	e1 f7       	brne	.-8      	; 0x2718 <_Z13uhreinstellenv+0x88>
    2720:	27 2c       	mov	r2, r7
    2722:	38 2c       	mov	r3, r8
    2724:	1b 2d       	mov	r17, r11
		for(uint8_t i = 0; i<buffersize;i++){
			oled.draw_ASCI(buffer[i],charsize*i,0);
    2726:	f1 01       	movw	r30, r2
    2728:	61 91       	ld	r22, Z+
    272a:	1f 01       	movw	r2, r30
    272c:	2b 2d       	mov	r18, r11
    272e:	41 2f       	mov	r20, r17
    2730:	8c e1       	ldi	r24, 0x1C	; 28
    2732:	93 e0       	ldi	r25, 0x03	; 3
    2734:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    2738:	1a 5f       	subi	r17, 0xFA	; 250
	char buffer[20];
	uint8_t buffersize;
	uint8_t pos=0;
	while(pos<11){
		buffersize=sprintf(buffer,"Uhreinstellung");
		for(uint8_t i = 0; i<buffersize;i++){
    273a:	14 35       	cpi	r17, 0x54	; 84
    273c:	a1 f7       	brne	.-24     	; 0x2726 <_Z13uhreinstellenv+0x96>
			oled.draw_ASCI(buffer[i],charsize*i,0);
		}
		buffersize=sprintf(buffer,"--------------");
    273e:	ef e0       	ldi	r30, 0x0F	; 15
    2740:	f1 e0       	ldi	r31, 0x01	; 1
    2742:	a7 2d       	mov	r26, r7
    2744:	b8 2d       	mov	r27, r8
    2746:	86 2d       	mov	r24, r6
    2748:	01 90       	ld	r0, Z+
    274a:	0d 92       	st	X+, r0
    274c:	8a 95       	dec	r24
    274e:	e1 f7       	brne	.-8      	; 0x2748 <_Z13uhreinstellenv+0xb8>
    2750:	2d 88       	ldd	r2, Y+21	; 0x15
    2752:	3e 88       	ldd	r3, Y+22	; 0x16
    2754:	1b 2d       	mov	r17, r11
		for(uint8_t i = 0; i<buffersize;i++){
			oled.draw_ASCI(buffer[i],charsize*i,8);
    2756:	f1 01       	movw	r30, r2
    2758:	61 91       	ld	r22, Z+
    275a:	1f 01       	movw	r2, r30
    275c:	28 e0       	ldi	r18, 0x08	; 8
    275e:	41 2f       	mov	r20, r17
    2760:	8c e1       	ldi	r24, 0x1C	; 28
    2762:	93 e0       	ldi	r25, 0x03	; 3
    2764:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    2768:	1a 5f       	subi	r17, 0xFA	; 250
		buffersize=sprintf(buffer,"Uhreinstellung");
		for(uint8_t i = 0; i<buffersize;i++){
			oled.draw_ASCI(buffer[i],charsize*i,0);
		}
		buffersize=sprintf(buffer,"--------------");
		for(uint8_t i = 0; i<buffersize;i++){
    276a:	14 35       	cpi	r17, 0x54	; 84
    276c:	a1 f7       	brne	.-24     	; 0x2756 <_Z13uhreinstellenv+0xc6>
			oled.draw_ASCI(buffer[i],charsize*i,8);
		}
		buffer[0]=rtc.Stunden/10;
    276e:	ed e5       	ldi	r30, 0x5D	; 93
    2770:	f7 e0       	ldi	r31, 0x07	; 7
    2772:	80 81       	ld	r24, Z
    2774:	8a 9d       	mul	r24, r10
    2776:	91 2d       	mov	r25, r1
    2778:	11 24       	eor	r1, r1
    277a:	96 95       	lsr	r25
    277c:	96 95       	lsr	r25
    277e:	96 95       	lsr	r25
    2780:	99 83       	std	Y+1, r25	; 0x01
		buffer[1]=rtc.Stunden%10;
    2782:	99 0f       	add	r25, r25
    2784:	29 2f       	mov	r18, r25
    2786:	22 0f       	add	r18, r18
    2788:	22 0f       	add	r18, r18
    278a:	92 0f       	add	r25, r18
    278c:	89 1b       	sub	r24, r25
    278e:	8a 83       	std	Y+2, r24	; 0x02
		buffer[2]=':';
    2790:	fa e3       	ldi	r31, 0x3A	; 58
    2792:	fb 83       	std	Y+3, r31	; 0x03
		buffer[3]=rtc.Minuten/10;
    2794:	ee e5       	ldi	r30, 0x5E	; 94
    2796:	f7 e0       	ldi	r31, 0x07	; 7
    2798:	80 81       	ld	r24, Z
    279a:	8a 9d       	mul	r24, r10
    279c:	91 2d       	mov	r25, r1
    279e:	11 24       	eor	r1, r1
    27a0:	96 95       	lsr	r25
    27a2:	96 95       	lsr	r25
    27a4:	96 95       	lsr	r25
    27a6:	9c 83       	std	Y+4, r25	; 0x04
		buffer[4]=rtc.Minuten%10;
    27a8:	99 0f       	add	r25, r25
    27aa:	29 2f       	mov	r18, r25
    27ac:	22 0f       	add	r18, r18
    27ae:	22 0f       	add	r18, r18
    27b0:	92 0f       	add	r25, r18
    27b2:	89 1b       	sub	r24, r25
    27b4:	8d 83       	std	Y+5, r24	; 0x05
		buffer[5]=' ';
    27b6:	80 e2       	ldi	r24, 0x20	; 32
    27b8:	8e 83       	std	Y+6, r24	; 0x06
		buffer[6]=rtc.Tag/10;
    27ba:	f2 01       	movw	r30, r4
    27bc:	80 81       	ld	r24, Z
    27be:	8a 9d       	mul	r24, r10
    27c0:	91 2d       	mov	r25, r1
    27c2:	11 24       	eor	r1, r1
    27c4:	96 95       	lsr	r25
    27c6:	96 95       	lsr	r25
    27c8:	96 95       	lsr	r25
    27ca:	9f 83       	std	Y+7, r25	; 0x07
		buffer[7]=rtc.Tag%10;
    27cc:	99 0f       	add	r25, r25
    27ce:	29 2f       	mov	r18, r25
    27d0:	22 0f       	add	r18, r18
    27d2:	22 0f       	add	r18, r18
    27d4:	92 0f       	add	r25, r18
    27d6:	89 1b       	sub	r24, r25
    27d8:	88 87       	std	Y+8, r24	; 0x08
		buffer[8]='.';
    27da:	8e e2       	ldi	r24, 0x2E	; 46
    27dc:	89 87       	std	Y+9, r24	; 0x09
		buffer[9]=rtc.Monat/10;
    27de:	f6 01       	movw	r30, r12
    27e0:	90 81       	ld	r25, Z
    27e2:	9a 9d       	mul	r25, r10
    27e4:	21 2d       	mov	r18, r1
    27e6:	11 24       	eor	r1, r1
    27e8:	26 95       	lsr	r18
    27ea:	26 95       	lsr	r18
    27ec:	26 95       	lsr	r18
    27ee:	2a 87       	std	Y+10, r18	; 0x0a
		buffer[10]=rtc.Monat%10;
    27f0:	22 0f       	add	r18, r18
    27f2:	32 2f       	mov	r19, r18
    27f4:	33 0f       	add	r19, r19
    27f6:	33 0f       	add	r19, r19
    27f8:	23 0f       	add	r18, r19
    27fa:	92 1b       	sub	r25, r18
    27fc:	9b 87       	std	Y+11, r25	; 0x0b
		buffer[11]='.';
    27fe:	8c 87       	std	Y+12, r24	; 0x0c
		buffer[12]=rtc.Jahr/10;
    2800:	e3 e6       	ldi	r30, 0x63	; 99
    2802:	f7 e0       	ldi	r31, 0x07	; 7
    2804:	80 81       	ld	r24, Z
    2806:	8a 9d       	mul	r24, r10
    2808:	91 2d       	mov	r25, r1
    280a:	11 24       	eor	r1, r1
    280c:	96 95       	lsr	r25
    280e:	96 95       	lsr	r25
    2810:	96 95       	lsr	r25
    2812:	9d 87       	std	Y+13, r25	; 0x0d
		buffer[13]=rtc.Jahr%10;
    2814:	99 0f       	add	r25, r25
    2816:	29 2f       	mov	r18, r25
    2818:	22 0f       	add	r18, r18
    281a:	22 0f       	add	r18, r18
    281c:	92 0f       	add	r25, r18
    281e:	89 1b       	sub	r24, r25
    2820:	8e 87       	std	Y+14, r24	; 0x0e
    2822:	3b 2c       	mov	r3, r11
    2824:	01 e0       	ldi	r16, 0x01	; 1
    2826:	1b 2d       	mov	r17, r11
    2828:	04 c0       	rjmp	.+8      	; 0x2832 <_Z13uhreinstellenv+0x1a2>
    282a:	1f 5f       	subi	r17, 0xFF	; 255
    282c:	0f 5f       	subi	r16, 0xFF	; 255
    282e:	f0 e1       	ldi	r31, 0x10	; 16
    2830:	3f 0e       	add	r3, r31
		buffersize=14;
		for(uint8_t i = 0; i<5;i++){
			if(i!=2){
    2832:	12 30       	cpi	r17, 0x02	; 2
    2834:	69 f0       	breq	.+26     	; 0x2850 <_Z13uhreinstellenv+0x1c0>
				oled.draw_number16x16(buffer[i],i*numbersmalsize,2*charhighte);
    2836:	20 e1       	ldi	r18, 0x10	; 16
    2838:	43 2d       	mov	r20, r3
    283a:	f7 01       	movw	r30, r14
    283c:	e1 0f       	add	r30, r17
    283e:	f1 1d       	adc	r31, r1
    2840:	60 81       	ld	r22, Z
    2842:	8c e1       	ldi	r24, 0x1C	; 28
    2844:	93 e0       	ldi	r25, 0x03	; 3
    2846:	0e 94 26 06 	call	0xc4c	; 0xc4c <_ZN7Display16draw_number16x16Ehhh>
		buffer[10]=rtc.Monat%10;
		buffer[11]='.';
		buffer[12]=rtc.Jahr/10;
		buffer[13]=rtc.Jahr%10;
		buffersize=14;
		for(uint8_t i = 0; i<5;i++){
    284a:	05 30       	cpi	r16, 0x05	; 5
    284c:	70 f3       	brcs	.-36     	; 0x282a <_Z13uhreinstellenv+0x19a>
    284e:	08 c0       	rjmp	.+16     	; 0x2860 <_Z13uhreinstellenv+0x1d0>
			if(i!=2){
				oled.draw_number16x16(buffer[i],i*numbersmalsize,2*charhighte);
			}
			else {
				oled.draw_ASCI(buffer[i],i*numbersmalsize+numbersmalsize/2,2*charhighte+charhighte/2);
    2850:	24 e1       	ldi	r18, 0x14	; 20
    2852:	48 e2       	ldi	r20, 0x28	; 40
    2854:	6b 81       	ldd	r22, Y+3	; 0x03
    2856:	8c e1       	ldi	r24, 0x1C	; 28
    2858:	93 e0       	ldi	r25, 0x03	; 3
    285a:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    285e:	e5 cf       	rjmp	.-54     	; 0x282a <_Z13uhreinstellenv+0x19a>
    2860:	8e 01       	movw	r16, r28
    2862:	09 5f       	subi	r16, 0xF9	; 249
    2864:	1f 4f       	sbci	r17, 0xFF	; 255
		buffer[10]=rtc.Monat%10;
		buffer[11]='.';
		buffer[12]=rtc.Jahr/10;
		buffer[13]=rtc.Jahr%10;
		buffersize=14;
		for(uint8_t i = 0; i<5;i++){
    2866:	2b 2c       	mov	r2, r11
    2868:	0f 2e       	mov	r0, r31
    286a:	f6 e0       	ldi	r31, 0x06	; 6
    286c:	3f 2e       	mov	r3, r31
    286e:	f0 2d       	mov	r31, r0
			else {
				oled.draw_ASCI(buffer[i],i*numbersmalsize+numbersmalsize/2,2*charhighte+charhighte/2);
			}
		}
		for(uint8_t i = 6; i<buffersize;i++){
			if(i!=8 && i!=11){
    2870:	88 e0       	ldi	r24, 0x08	; 8
    2872:	38 16       	cp	r3, r24
    2874:	61 f0       	breq	.+24     	; 0x288e <_Z13uhreinstellenv+0x1fe>
    2876:	9b e0       	ldi	r25, 0x0B	; 11
    2878:	39 16       	cp	r3, r25
    287a:	49 f0       	breq	.+18     	; 0x288e <_Z13uhreinstellenv+0x1fe>
				oled.draw_number16x16(buffer[i],i*numbersmalsize-6*numbersmalsize,4*charhighte);
    287c:	20 e2       	ldi	r18, 0x20	; 32
    287e:	42 2d       	mov	r20, r2
    2880:	f8 01       	movw	r30, r16
    2882:	60 81       	ld	r22, Z
    2884:	8c e1       	ldi	r24, 0x1C	; 28
    2886:	93 e0       	ldi	r25, 0x03	; 3
    2888:	0e 94 26 06 	call	0xc4c	; 0xc4c <_ZN7Display16draw_number16x16Ehhh>
    288c:	09 c0       	rjmp	.+18     	; 0x28a0 <_Z13uhreinstellenv+0x210>
			}
			else {
				oled.draw_ASCI(buffer[i],i*numbersmalsize+numbersmalsize/2-6*numbersmalsize,5*charhighte);
    288e:	28 e2       	ldi	r18, 0x28	; 40
    2890:	48 e0       	ldi	r20, 0x08	; 8
    2892:	42 0d       	add	r20, r2
    2894:	f8 01       	movw	r30, r16
    2896:	60 81       	ld	r22, Z
    2898:	8c e1       	ldi	r24, 0x1C	; 28
    289a:	93 e0       	ldi	r25, 0x03	; 3
    289c:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
			}
			else {
				oled.draw_ASCI(buffer[i],i*numbersmalsize+numbersmalsize/2,2*charhighte+charhighte/2);
			}
		}
		for(uint8_t i = 6; i<buffersize;i++){
    28a0:	33 94       	inc	r3
    28a2:	0f 5f       	subi	r16, 0xFF	; 255
    28a4:	1f 4f       	sbci	r17, 0xFF	; 255
    28a6:	f0 e1       	ldi	r31, 0x10	; 16
    28a8:	2f 0e       	add	r2, r31
    28aa:	8e e0       	ldi	r24, 0x0E	; 14
    28ac:	38 12       	cpse	r3, r24
    28ae:	e0 cf       	rjmp	.-64     	; 0x2870 <_Z13uhreinstellenv+0x1e0>
			else {
				oled.draw_ASCI(buffer[i],i*numbersmalsize+numbersmalsize/2-6*numbersmalsize,5*charhighte);
			}
		}

		oled.sendFrame();
    28b0:	8c e1       	ldi	r24, 0x1C	; 28
    28b2:	93 e0       	ldi	r25, 0x03	; 3
    28b4:	0e 94 93 03 	call	0x726	; 0x726 <_ZN7Display9sendFrameEv>
		oled.clearFrame();
    28b8:	8c e1       	ldi	r24, 0x1C	; 28
    28ba:	93 e0       	ldi	r25, 0x03	; 3
    28bc:	0e 94 ed 02 	call	0x5da	; 0x5da <_ZN7Display10clearFrameEv>
		switch (pos) {
    28c0:	89 2d       	mov	r24, r9
    28c2:	90 e0       	ldi	r25, 0x00	; 0
    28c4:	8a 30       	cpi	r24, 0x0A	; 10
    28c6:	91 05       	cpc	r25, r1
    28c8:	08 f0       	brcs	.+2      	; 0x28cc <_Z13uhreinstellenv+0x23c>
    28ca:	47 c2       	rjmp	.+1166   	; 0x2d5a <_Z13uhreinstellenv+0x6ca>
    28cc:	fc 01       	movw	r30, r24
    28ce:	ec 5c       	subi	r30, 0xCC	; 204
    28d0:	ff 4f       	sbci	r31, 0xFF	; 255
    28d2:	0c 94 b2 2a 	jmp	0x5564	; 0x5564 <__tablejump2__>
			case 0:
				rtc.Stunden=Tastatur.ZahlenausTastatur()*10;
    28d6:	8b e1       	ldi	r24, 0x1B	; 27
    28d8:	93 e0       	ldi	r25, 0x03	; 3
    28da:	0e 94 3b 1e 	call	0x3c76	; 0x3c76 <_ZN9Interface17ZahlenausTastaturEv>
    28de:	88 0f       	add	r24, r24
    28e0:	98 2f       	mov	r25, r24
    28e2:	99 0f       	add	r25, r25
    28e4:	99 0f       	add	r25, r25
    28e6:	89 0f       	add	r24, r25
				if(rtc.Stunden>=24){
    28e8:	88 31       	cpi	r24, 0x18	; 24
    28ea:	08 f4       	brcc	.+2      	; 0x28ee <_Z13uhreinstellenv+0x25e>
    28ec:	51 c2       	rjmp	.+1186   	; 0x2d90 <_Z13uhreinstellenv+0x700>
					rtc.Stunden=0;
    28ee:	ed e5       	ldi	r30, 0x5D	; 93
    28f0:	f7 e0       	ldi	r31, 0x07	; 7
    28f2:	10 82       	st	Z, r1
					pos=-1;
					buffersize=sprintf(buffer,"Stunden falsch");
    28f4:	ef ea       	ldi	r30, 0xAF	; 175
    28f6:	f2 e0       	ldi	r31, 0x02	; 2
    28f8:	a7 2d       	mov	r26, r7
    28fa:	b8 2d       	mov	r27, r8
    28fc:	86 2d       	mov	r24, r6
    28fe:	01 90       	ld	r0, Z+
    2900:	0d 92       	st	X+, r0
    2902:	8a 95       	dec	r24
    2904:	e1 f7       	brne	.-8      	; 0x28fe <_Z13uhreinstellenv+0x26e>
    2906:	2d 88       	ldd	r2, Y+21	; 0x15
    2908:	3e 88       	ldd	r3, Y+22	; 0x16
    290a:	1b 2d       	mov	r17, r11
					for(uint8_t i = 0; i<buffersize;i++){
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
    290c:	f1 01       	movw	r30, r2
    290e:	61 91       	ld	r22, Z+
    2910:	1f 01       	movw	r2, r30
    2912:	28 e3       	ldi	r18, 0x38	; 56
    2914:	41 2f       	mov	r20, r17
    2916:	8c e1       	ldi	r24, 0x1C	; 28
    2918:	93 e0       	ldi	r25, 0x03	; 3
    291a:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    291e:	1a 5f       	subi	r17, 0xFA	; 250
				rtc.Stunden=Tastatur.ZahlenausTastatur()*10;
				if(rtc.Stunden>=24){
					rtc.Stunden=0;
					pos=-1;
					buffersize=sprintf(buffer,"Stunden falsch");
					for(uint8_t i = 0; i<buffersize;i++){
    2920:	14 35       	cpi	r17, 0x54	; 84
    2922:	a1 f7       	brne	.-24     	; 0x290c <_Z13uhreinstellenv+0x27c>
    2924:	39 c2       	rjmp	.+1138   	; 0x2d98 <_Z13uhreinstellenv+0x708>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 1:
				rtc.Stunden+=Tastatur.ZahlenausTastatur();
    2926:	8b e1       	ldi	r24, 0x1B	; 27
    2928:	93 e0       	ldi	r25, 0x03	; 3
    292a:	0e 94 3b 1e 	call	0x3c76	; 0x3c76 <_ZN9Interface17ZahlenausTastaturEv>
    292e:	ed e5       	ldi	r30, 0x5D	; 93
    2930:	f7 e0       	ldi	r31, 0x07	; 7
    2932:	20 81       	ld	r18, Z
    2934:	90 e0       	ldi	r25, 0x00	; 0
    2936:	82 0f       	add	r24, r18
    2938:	91 1d       	adc	r25, r1
				if(rtc.Stunden>=24){
    293a:	88 31       	cpi	r24, 0x18	; 24
    293c:	10 f4       	brcc	.+4      	; 0x2942 <_Z13uhreinstellenv+0x2b2>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 1:
				rtc.Stunden+=Tastatur.ZahlenausTastatur();
    293e:	80 83       	st	Z, r24
    2940:	5e c2       	rjmp	.+1212   	; 0x2dfe <_Z13uhreinstellenv+0x76e>
				if(rtc.Stunden>=24){
					rtc.Stunden=0;
    2942:	ed e5       	ldi	r30, 0x5D	; 93
    2944:	f7 e0       	ldi	r31, 0x07	; 7
    2946:	10 82       	st	Z, r1
					pos=-1;
					buffersize=sprintf(buffer,"Stunden falsch");
    2948:	ef ea       	ldi	r30, 0xAF	; 175
    294a:	f2 e0       	ldi	r31, 0x02	; 2
    294c:	a7 2d       	mov	r26, r7
    294e:	b8 2d       	mov	r27, r8
    2950:	86 2d       	mov	r24, r6
    2952:	01 90       	ld	r0, Z+
    2954:	0d 92       	st	X+, r0
    2956:	8a 95       	dec	r24
    2958:	e1 f7       	brne	.-8      	; 0x2952 <_Z13uhreinstellenv+0x2c2>
    295a:	2d 88       	ldd	r2, Y+21	; 0x15
    295c:	3e 88       	ldd	r3, Y+22	; 0x16
    295e:	1b 2d       	mov	r17, r11
					for(uint8_t i = 0; i<buffersize;i++){
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
    2960:	f1 01       	movw	r30, r2
    2962:	61 91       	ld	r22, Z+
    2964:	1f 01       	movw	r2, r30
    2966:	28 e3       	ldi	r18, 0x38	; 56
    2968:	41 2f       	mov	r20, r17
    296a:	8c e1       	ldi	r24, 0x1C	; 28
    296c:	93 e0       	ldi	r25, 0x03	; 3
    296e:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    2972:	1a 5f       	subi	r17, 0xFA	; 250
				rtc.Stunden+=Tastatur.ZahlenausTastatur();
				if(rtc.Stunden>=24){
					rtc.Stunden=0;
					pos=-1;
					buffersize=sprintf(buffer,"Stunden falsch");
					for(uint8_t i = 0; i<buffersize;i++){
    2974:	14 35       	cpi	r17, 0x54	; 84
    2976:	a1 f7       	brne	.-24     	; 0x2960 <_Z13uhreinstellenv+0x2d0>
    2978:	12 c2       	rjmp	.+1060   	; 0x2d9e <_Z13uhreinstellenv+0x70e>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 2:
				rtc.Minuten=Tastatur.ZahlenausTastatur()*10;
    297a:	8b e1       	ldi	r24, 0x1B	; 27
    297c:	93 e0       	ldi	r25, 0x03	; 3
    297e:	0e 94 3b 1e 	call	0x3c76	; 0x3c76 <_ZN9Interface17ZahlenausTastaturEv>
    2982:	88 0f       	add	r24, r24
    2984:	98 2f       	mov	r25, r24
    2986:	99 0f       	add	r25, r25
    2988:	99 0f       	add	r25, r25
    298a:	89 0f       	add	r24, r25
				if(rtc.Minuten>=60){
    298c:	8c 33       	cpi	r24, 0x3C	; 60
    298e:	20 f4       	brcc	.+8      	; 0x2998 <_Z13uhreinstellenv+0x308>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 2:
				rtc.Minuten=Tastatur.ZahlenausTastatur()*10;
    2990:	ee e5       	ldi	r30, 0x5E	; 94
    2992:	f7 e0       	ldi	r31, 0x07	; 7
    2994:	80 83       	st	Z, r24
    2996:	33 c2       	rjmp	.+1126   	; 0x2dfe <_Z13uhreinstellenv+0x76e>
				if(rtc.Minuten>=60){
					rtc.Minuten=0;
    2998:	ee e5       	ldi	r30, 0x5E	; 94
    299a:	f7 e0       	ldi	r31, 0x07	; 7
    299c:	10 82       	st	Z, r1
					pos=1;
					buffersize=sprintf(buffer,"Minuten falsch");
    299e:	ee eb       	ldi	r30, 0xBE	; 190
    29a0:	f2 e0       	ldi	r31, 0x02	; 2
    29a2:	a7 2d       	mov	r26, r7
    29a4:	b8 2d       	mov	r27, r8
    29a6:	86 2d       	mov	r24, r6
    29a8:	01 90       	ld	r0, Z+
    29aa:	0d 92       	st	X+, r0
    29ac:	8a 95       	dec	r24
    29ae:	e1 f7       	brne	.-8      	; 0x29a8 <_Z13uhreinstellenv+0x318>
    29b0:	2d 88       	ldd	r2, Y+21	; 0x15
    29b2:	3e 88       	ldd	r3, Y+22	; 0x16
    29b4:	1b 2d       	mov	r17, r11
					for(uint8_t i = 0; i<buffersize;i++){
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
    29b6:	f1 01       	movw	r30, r2
    29b8:	61 91       	ld	r22, Z+
    29ba:	1f 01       	movw	r2, r30
    29bc:	28 e3       	ldi	r18, 0x38	; 56
    29be:	41 2f       	mov	r20, r17
    29c0:	8c e1       	ldi	r24, 0x1C	; 28
    29c2:	93 e0       	ldi	r25, 0x03	; 3
    29c4:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    29c8:	1a 5f       	subi	r17, 0xFA	; 250
				rtc.Minuten=Tastatur.ZahlenausTastatur()*10;
				if(rtc.Minuten>=60){
					rtc.Minuten=0;
					pos=1;
					buffersize=sprintf(buffer,"Minuten falsch");
					for(uint8_t i = 0; i<buffersize;i++){
    29ca:	14 35       	cpi	r17, 0x54	; 84
    29cc:	a1 f7       	brne	.-24     	; 0x29b6 <_Z13uhreinstellenv+0x326>
    29ce:	ea c1       	rjmp	.+980    	; 0x2da4 <_Z13uhreinstellenv+0x714>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 3:
				rtc.Minuten+=Tastatur.ZahlenausTastatur();
    29d0:	8b e1       	ldi	r24, 0x1B	; 27
    29d2:	93 e0       	ldi	r25, 0x03	; 3
    29d4:	0e 94 3b 1e 	call	0x3c76	; 0x3c76 <_ZN9Interface17ZahlenausTastaturEv>
    29d8:	ee e5       	ldi	r30, 0x5E	; 94
    29da:	f7 e0       	ldi	r31, 0x07	; 7
    29dc:	20 81       	ld	r18, Z
    29de:	90 e0       	ldi	r25, 0x00	; 0
    29e0:	82 0f       	add	r24, r18
    29e2:	91 1d       	adc	r25, r1
				if(rtc.Minuten>=60){
    29e4:	8c 33       	cpi	r24, 0x3C	; 60
    29e6:	10 f4       	brcc	.+4      	; 0x29ec <_Z13uhreinstellenv+0x35c>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 3:
				rtc.Minuten+=Tastatur.ZahlenausTastatur();
    29e8:	80 83       	st	Z, r24
    29ea:	09 c2       	rjmp	.+1042   	; 0x2dfe <_Z13uhreinstellenv+0x76e>
				if(rtc.Minuten>=60){
					rtc.Minuten=0;
    29ec:	ee e5       	ldi	r30, 0x5E	; 94
    29ee:	f7 e0       	ldi	r31, 0x07	; 7
    29f0:	10 82       	st	Z, r1
					pos=1;
					buffersize=sprintf(buffer,"Minuten falsch");
    29f2:	ee eb       	ldi	r30, 0xBE	; 190
    29f4:	f2 e0       	ldi	r31, 0x02	; 2
    29f6:	a7 2d       	mov	r26, r7
    29f8:	b8 2d       	mov	r27, r8
    29fa:	86 2d       	mov	r24, r6
    29fc:	01 90       	ld	r0, Z+
    29fe:	0d 92       	st	X+, r0
    2a00:	8a 95       	dec	r24
    2a02:	e1 f7       	brne	.-8      	; 0x29fc <_Z13uhreinstellenv+0x36c>
    2a04:	2d 88       	ldd	r2, Y+21	; 0x15
    2a06:	3e 88       	ldd	r3, Y+22	; 0x16
    2a08:	1b 2d       	mov	r17, r11
					for(uint8_t i = 0; i<buffersize;i++){
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
    2a0a:	f1 01       	movw	r30, r2
    2a0c:	61 91       	ld	r22, Z+
    2a0e:	1f 01       	movw	r2, r30
    2a10:	28 e3       	ldi	r18, 0x38	; 56
    2a12:	41 2f       	mov	r20, r17
    2a14:	8c e1       	ldi	r24, 0x1C	; 28
    2a16:	93 e0       	ldi	r25, 0x03	; 3
    2a18:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    2a1c:	1a 5f       	subi	r17, 0xFA	; 250
				rtc.Minuten+=Tastatur.ZahlenausTastatur();
				if(rtc.Minuten>=60){
					rtc.Minuten=0;
					pos=1;
					buffersize=sprintf(buffer,"Minuten falsch");
					for(uint8_t i = 0; i<buffersize;i++){
    2a1e:	14 35       	cpi	r17, 0x54	; 84
    2a20:	a1 f7       	brne	.-24     	; 0x2a0a <_Z13uhreinstellenv+0x37a>
    2a22:	c3 c1       	rjmp	.+902    	; 0x2daa <_Z13uhreinstellenv+0x71a>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 4:
				rtc.Tag=Tastatur.ZahlenausTastatur()*10;
    2a24:	8b e1       	ldi	r24, 0x1B	; 27
    2a26:	93 e0       	ldi	r25, 0x03	; 3
    2a28:	0e 94 3b 1e 	call	0x3c76	; 0x3c76 <_ZN9Interface17ZahlenausTastaturEv>
    2a2c:	88 0f       	add	r24, r24
    2a2e:	98 2f       	mov	r25, r24
    2a30:	99 0f       	add	r25, r25
    2a32:	99 0f       	add	r25, r25
    2a34:	89 0f       	add	r24, r25
				if(rtc.Tag>=32){
    2a36:	80 32       	cpi	r24, 0x20	; 32
    2a38:	18 f4       	brcc	.+6      	; 0x2a40 <_Z13uhreinstellenv+0x3b0>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 4:
				rtc.Tag=Tastatur.ZahlenausTastatur()*10;
    2a3a:	f2 01       	movw	r30, r4
    2a3c:	80 83       	st	Z, r24
    2a3e:	df c1       	rjmp	.+958    	; 0x2dfe <_Z13uhreinstellenv+0x76e>
				if(rtc.Tag>=32){
					rtc.Tag=0;
    2a40:	f2 01       	movw	r30, r4
    2a42:	10 82       	st	Z, r1
					pos=3;
					buffersize=sprintf(buffer,"Tag falsch");
    2a44:	8b e0       	ldi	r24, 0x0B	; 11
    2a46:	ed ec       	ldi	r30, 0xCD	; 205
    2a48:	f2 e0       	ldi	r31, 0x02	; 2
    2a4a:	a7 2d       	mov	r26, r7
    2a4c:	b8 2d       	mov	r27, r8
    2a4e:	01 90       	ld	r0, Z+
    2a50:	0d 92       	st	X+, r0
    2a52:	8a 95       	dec	r24
    2a54:	e1 f7       	brne	.-8      	; 0x2a4e <_Z13uhreinstellenv+0x3be>
    2a56:	2d 88       	ldd	r2, Y+21	; 0x15
    2a58:	3e 88       	ldd	r3, Y+22	; 0x16
    2a5a:	1b 2d       	mov	r17, r11
					for(uint8_t i = 0; i<buffersize;i++){
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
    2a5c:	f1 01       	movw	r30, r2
    2a5e:	61 91       	ld	r22, Z+
    2a60:	1f 01       	movw	r2, r30
    2a62:	28 e3       	ldi	r18, 0x38	; 56
    2a64:	41 2f       	mov	r20, r17
    2a66:	8c e1       	ldi	r24, 0x1C	; 28
    2a68:	93 e0       	ldi	r25, 0x03	; 3
    2a6a:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    2a6e:	1a 5f       	subi	r17, 0xFA	; 250
				rtc.Tag=Tastatur.ZahlenausTastatur()*10;
				if(rtc.Tag>=32){
					rtc.Tag=0;
					pos=3;
					buffersize=sprintf(buffer,"Tag falsch");
					for(uint8_t i = 0; i<buffersize;i++){
    2a70:	1c 33       	cpi	r17, 0x3C	; 60
    2a72:	a1 f7       	brne	.-24     	; 0x2a5c <_Z13uhreinstellenv+0x3cc>
    2a74:	9d c1       	rjmp	.+826    	; 0x2db0 <_Z13uhreinstellenv+0x720>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 5:
				rtc.Tag+=Tastatur.ZahlenausTastatur();
    2a76:	8b e1       	ldi	r24, 0x1B	; 27
    2a78:	93 e0       	ldi	r25, 0x03	; 3
    2a7a:	0e 94 3b 1e 	call	0x3c76	; 0x3c76 <_ZN9Interface17ZahlenausTastaturEv>
    2a7e:	f2 01       	movw	r30, r4
    2a80:	20 81       	ld	r18, Z
    2a82:	90 e0       	ldi	r25, 0x00	; 0
    2a84:	82 0f       	add	r24, r18
    2a86:	91 1d       	adc	r25, r1
				if(rtc.Tag>=32){
    2a88:	80 32       	cpi	r24, 0x20	; 32
    2a8a:	10 f4       	brcc	.+4      	; 0x2a90 <_Z13uhreinstellenv+0x400>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 5:
				rtc.Tag+=Tastatur.ZahlenausTastatur();
    2a8c:	80 83       	st	Z, r24
    2a8e:	b7 c1       	rjmp	.+878    	; 0x2dfe <_Z13uhreinstellenv+0x76e>
				if(rtc.Tag>=32){
					rtc.Tag=0;
    2a90:	f2 01       	movw	r30, r4
    2a92:	10 82       	st	Z, r1
					pos=3;
					buffersize=sprintf(buffer,"Tag falsch");
    2a94:	8b e0       	ldi	r24, 0x0B	; 11
    2a96:	ed ec       	ldi	r30, 0xCD	; 205
    2a98:	f2 e0       	ldi	r31, 0x02	; 2
    2a9a:	a7 2d       	mov	r26, r7
    2a9c:	b8 2d       	mov	r27, r8
    2a9e:	01 90       	ld	r0, Z+
    2aa0:	0d 92       	st	X+, r0
    2aa2:	8a 95       	dec	r24
    2aa4:	e1 f7       	brne	.-8      	; 0x2a9e <_Z13uhreinstellenv+0x40e>
    2aa6:	2d 88       	ldd	r2, Y+21	; 0x15
    2aa8:	3e 88       	ldd	r3, Y+22	; 0x16
    2aaa:	1b 2d       	mov	r17, r11
					for(uint8_t i = 0; i<buffersize;i++){
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
    2aac:	f1 01       	movw	r30, r2
    2aae:	61 91       	ld	r22, Z+
    2ab0:	1f 01       	movw	r2, r30
    2ab2:	28 e3       	ldi	r18, 0x38	; 56
    2ab4:	41 2f       	mov	r20, r17
    2ab6:	8c e1       	ldi	r24, 0x1C	; 28
    2ab8:	93 e0       	ldi	r25, 0x03	; 3
    2aba:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    2abe:	1a 5f       	subi	r17, 0xFA	; 250
				rtc.Tag+=Tastatur.ZahlenausTastatur();
				if(rtc.Tag>=32){
					rtc.Tag=0;
					pos=3;
					buffersize=sprintf(buffer,"Tag falsch");
					for(uint8_t i = 0; i<buffersize;i++){
    2ac0:	1c 33       	cpi	r17, 0x3C	; 60
    2ac2:	a1 f7       	brne	.-24     	; 0x2aac <_Z13uhreinstellenv+0x41c>
    2ac4:	7a c1       	rjmp	.+756    	; 0x2dba <_Z13uhreinstellenv+0x72a>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 6:
				rtc.Monat=Tastatur.ZahlenausTastatur()*10;
    2ac6:	8b e1       	ldi	r24, 0x1B	; 27
    2ac8:	93 e0       	ldi	r25, 0x03	; 3
    2aca:	0e 94 3b 1e 	call	0x3c76	; 0x3c76 <_ZN9Interface17ZahlenausTastaturEv>
    2ace:	88 0f       	add	r24, r24
    2ad0:	98 2f       	mov	r25, r24
    2ad2:	99 0f       	add	r25, r25
    2ad4:	99 0f       	add	r25, r25
    2ad6:	89 0f       	add	r24, r25
				if(rtc.Monat>=13){
    2ad8:	8d 30       	cpi	r24, 0x0D	; 13
    2ada:	18 f4       	brcc	.+6      	; 0x2ae2 <_Z13uhreinstellenv+0x452>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 6:
				rtc.Monat=Tastatur.ZahlenausTastatur()*10;
    2adc:	f6 01       	movw	r30, r12
    2ade:	80 83       	st	Z, r24
    2ae0:	8e c1       	rjmp	.+796    	; 0x2dfe <_Z13uhreinstellenv+0x76e>
				if(rtc.Monat>=13){
					rtc.Monat=0;
    2ae2:	f6 01       	movw	r30, r12
    2ae4:	10 82       	st	Z, r1
					pos=5;
					buffersize=sprintf(buffer,"Monat falsch");
    2ae6:	8d e0       	ldi	r24, 0x0D	; 13
    2ae8:	e8 ed       	ldi	r30, 0xD8	; 216
    2aea:	f2 e0       	ldi	r31, 0x02	; 2
    2aec:	a7 2d       	mov	r26, r7
    2aee:	b8 2d       	mov	r27, r8
    2af0:	01 90       	ld	r0, Z+
    2af2:	0d 92       	st	X+, r0
    2af4:	8a 95       	dec	r24
    2af6:	e1 f7       	brne	.-8      	; 0x2af0 <_Z13uhreinstellenv+0x460>
    2af8:	2d 88       	ldd	r2, Y+21	; 0x15
    2afa:	3e 88       	ldd	r3, Y+22	; 0x16
    2afc:	1b 2d       	mov	r17, r11
					for(uint8_t i = 0; i<buffersize;i++){
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
    2afe:	f1 01       	movw	r30, r2
    2b00:	61 91       	ld	r22, Z+
    2b02:	1f 01       	movw	r2, r30
    2b04:	28 e3       	ldi	r18, 0x38	; 56
    2b06:	41 2f       	mov	r20, r17
    2b08:	8c e1       	ldi	r24, 0x1C	; 28
    2b0a:	93 e0       	ldi	r25, 0x03	; 3
    2b0c:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    2b10:	1a 5f       	subi	r17, 0xFA	; 250
				rtc.Monat=Tastatur.ZahlenausTastatur()*10;
				if(rtc.Monat>=13){
					rtc.Monat=0;
					pos=5;
					buffersize=sprintf(buffer,"Monat falsch");
					for(uint8_t i = 0; i<buffersize;i++){
    2b12:	18 34       	cpi	r17, 0x48	; 72
    2b14:	a1 f7       	brne	.-24     	; 0x2afe <_Z13uhreinstellenv+0x46e>
    2b16:	56 c1       	rjmp	.+684    	; 0x2dc4 <_Z13uhreinstellenv+0x734>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 7:
				rtc.Monat+=Tastatur.ZahlenausTastatur();
    2b18:	8b e1       	ldi	r24, 0x1B	; 27
    2b1a:	93 e0       	ldi	r25, 0x03	; 3
    2b1c:	0e 94 3b 1e 	call	0x3c76	; 0x3c76 <_ZN9Interface17ZahlenausTastaturEv>
    2b20:	f6 01       	movw	r30, r12
    2b22:	20 81       	ld	r18, Z
    2b24:	90 e0       	ldi	r25, 0x00	; 0
    2b26:	82 0f       	add	r24, r18
    2b28:	91 1d       	adc	r25, r1
				if(rtc.Monat>=13){
    2b2a:	8d 30       	cpi	r24, 0x0D	; 13
    2b2c:	10 f4       	brcc	.+4      	; 0x2b32 <_Z13uhreinstellenv+0x4a2>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 7:
				rtc.Monat+=Tastatur.ZahlenausTastatur();
    2b2e:	80 83       	st	Z, r24
    2b30:	1e c0       	rjmp	.+60     	; 0x2b6e <_Z13uhreinstellenv+0x4de>
				if(rtc.Monat>=13){
					rtc.Monat=0;
    2b32:	f6 01       	movw	r30, r12
    2b34:	10 82       	st	Z, r1
					pos=5;
					buffersize=sprintf(buffer,"Monat falsch");
    2b36:	8d e0       	ldi	r24, 0x0D	; 13
    2b38:	e8 ed       	ldi	r30, 0xD8	; 216
    2b3a:	f2 e0       	ldi	r31, 0x02	; 2
    2b3c:	a7 2d       	mov	r26, r7
    2b3e:	b8 2d       	mov	r27, r8
    2b40:	01 90       	ld	r0, Z+
    2b42:	0d 92       	st	X+, r0
    2b44:	8a 95       	dec	r24
    2b46:	e1 f7       	brne	.-8      	; 0x2b40 <_Z13uhreinstellenv+0x4b0>
    2b48:	2d 88       	ldd	r2, Y+21	; 0x15
    2b4a:	3e 88       	ldd	r3, Y+22	; 0x16
    2b4c:	1b 2d       	mov	r17, r11
					for(uint8_t i = 0; i<buffersize;i++){
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
    2b4e:	f1 01       	movw	r30, r2
    2b50:	61 91       	ld	r22, Z+
    2b52:	1f 01       	movw	r2, r30
    2b54:	28 e3       	ldi	r18, 0x38	; 56
    2b56:	41 2f       	mov	r20, r17
    2b58:	8c e1       	ldi	r24, 0x1C	; 28
    2b5a:	93 e0       	ldi	r25, 0x03	; 3
    2b5c:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    2b60:	1a 5f       	subi	r17, 0xFA	; 250
				rtc.Monat+=Tastatur.ZahlenausTastatur();
				if(rtc.Monat>=13){
					rtc.Monat=0;
					pos=5;
					buffersize=sprintf(buffer,"Monat falsch");
					for(uint8_t i = 0; i<buffersize;i++){
    2b62:	18 34       	cpi	r17, 0x48	; 72
    2b64:	a1 f7       	brne	.-24     	; 0x2b4e <_Z13uhreinstellenv+0x4be>
				break;
			case 7:
				rtc.Monat+=Tastatur.ZahlenausTastatur();
				if(rtc.Monat>=13){
					rtc.Monat=0;
					pos=5;
    2b66:	0f 2e       	mov	r0, r31
    2b68:	f5 e0       	ldi	r31, 0x05	; 5
    2b6a:	9f 2e       	mov	r9, r31
    2b6c:	f0 2d       	mov	r31, r0
					buffersize=sprintf(buffer,"Monat falsch");
					for(uint8_t i = 0; i<buffersize;i++){
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				if(rtc.Monat==4||rtc.Monat==6||rtc.Monat==9||rtc.Monat==11){
    2b6e:	f6 01       	movw	r30, r12
    2b70:	90 81       	ld	r25, Z
    2b72:	89 2f       	mov	r24, r25
    2b74:	8d 7f       	andi	r24, 0xFD	; 253
    2b76:	84 30       	cpi	r24, 0x04	; 4
    2b78:	11 f0       	breq	.+4      	; 0x2b7e <_Z13uhreinstellenv+0x4ee>
    2b7a:	89 30       	cpi	r24, 0x09	; 9
    2b7c:	09 f5       	brne	.+66     	; 0x2bc0 <_Z13uhreinstellenv+0x530>
					if(rtc.Tag>=31){
    2b7e:	f2 01       	movw	r30, r4
    2b80:	80 81       	ld	r24, Z
    2b82:	8f 31       	cpi	r24, 0x1F	; 31
    2b84:	08 f4       	brcc	.+2      	; 0x2b88 <_Z13uhreinstellenv+0x4f8>
    2b86:	ea c0       	rjmp	.+468    	; 0x2d5c <_Z13uhreinstellenv+0x6cc>
						rtc.Tag=0;
    2b88:	10 82       	st	Z, r1
						rtc.Monat=0;
    2b8a:	f6 01       	movw	r30, r12
    2b8c:	10 82       	st	Z, r1
						pos=3;
						buffersize=sprintf(buffer,"Tag falsch");
    2b8e:	8b e0       	ldi	r24, 0x0B	; 11
    2b90:	ed ec       	ldi	r30, 0xCD	; 205
    2b92:	f2 e0       	ldi	r31, 0x02	; 2
    2b94:	a7 2d       	mov	r26, r7
    2b96:	b8 2d       	mov	r27, r8
    2b98:	01 90       	ld	r0, Z+
    2b9a:	0d 92       	st	X+, r0
    2b9c:	8a 95       	dec	r24
    2b9e:	e1 f7       	brne	.-8      	; 0x2b98 <_Z13uhreinstellenv+0x508>
    2ba0:	2d 88       	ldd	r2, Y+21	; 0x15
    2ba2:	3e 88       	ldd	r3, Y+22	; 0x16
    2ba4:	1b 2d       	mov	r17, r11
						for(uint8_t i = 0; i<buffersize;i++){
							oled.draw_ASCI(buffer[i],charsize*i,7*8);
    2ba6:	f1 01       	movw	r30, r2
    2ba8:	61 91       	ld	r22, Z+
    2baa:	1f 01       	movw	r2, r30
    2bac:	28 e3       	ldi	r18, 0x38	; 56
    2bae:	41 2f       	mov	r20, r17
    2bb0:	8c e1       	ldi	r24, 0x1C	; 28
    2bb2:	93 e0       	ldi	r25, 0x03	; 3
    2bb4:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    2bb8:	1a 5f       	subi	r17, 0xFA	; 250
					if(rtc.Tag>=31){
						rtc.Tag=0;
						rtc.Monat=0;
						pos=3;
						buffersize=sprintf(buffer,"Tag falsch");
						for(uint8_t i = 0; i<buffersize;i++){
    2bba:	1c 33       	cpi	r17, 0x3C	; 60
    2bbc:	a1 f7       	brne	.-24     	; 0x2ba6 <_Z13uhreinstellenv+0x516>
    2bbe:	07 c1       	rjmp	.+526    	; 0x2dce <_Z13uhreinstellenv+0x73e>
							oled.draw_ASCI(buffer[i],charsize*i,7*8);
						}
					}
				}
				else if(rtc.Monat==2){
    2bc0:	92 30       	cpi	r25, 0x02	; 2
    2bc2:	09 f0       	breq	.+2      	; 0x2bc6 <_Z13uhreinstellenv+0x536>
    2bc4:	cb c0       	rjmp	.+406    	; 0x2d5c <_Z13uhreinstellenv+0x6cc>
					if(rtc.Tag>=30){
    2bc6:	f2 01       	movw	r30, r4
    2bc8:	80 81       	ld	r24, Z
    2bca:	8e 31       	cpi	r24, 0x1E	; 30
    2bcc:	08 f4       	brcc	.+2      	; 0x2bd0 <_Z13uhreinstellenv+0x540>
    2bce:	c6 c0       	rjmp	.+396    	; 0x2d5c <_Z13uhreinstellenv+0x6cc>
						rtc.Tag=0;
    2bd0:	10 82       	st	Z, r1
						rtc.Monat=0;
    2bd2:	f6 01       	movw	r30, r12
    2bd4:	10 82       	st	Z, r1
						pos=3;
						buffersize=sprintf(buffer,"Tag falsch");
    2bd6:	8b e0       	ldi	r24, 0x0B	; 11
    2bd8:	ed ec       	ldi	r30, 0xCD	; 205
    2bda:	f2 e0       	ldi	r31, 0x02	; 2
    2bdc:	a7 2d       	mov	r26, r7
    2bde:	b8 2d       	mov	r27, r8
    2be0:	01 90       	ld	r0, Z+
    2be2:	0d 92       	st	X+, r0
    2be4:	8a 95       	dec	r24
    2be6:	e1 f7       	brne	.-8      	; 0x2be0 <_Z13uhreinstellenv+0x550>
    2be8:	2d 88       	ldd	r2, Y+21	; 0x15
    2bea:	3e 88       	ldd	r3, Y+22	; 0x16
    2bec:	1b 2d       	mov	r17, r11
						for(uint8_t i = 0; i<buffersize;i++){
							oled.draw_ASCI(buffer[i],charsize*i,7*8);
    2bee:	f1 01       	movw	r30, r2
    2bf0:	61 91       	ld	r22, Z+
    2bf2:	1f 01       	movw	r2, r30
    2bf4:	28 e3       	ldi	r18, 0x38	; 56
    2bf6:	41 2f       	mov	r20, r17
    2bf8:	8c e1       	ldi	r24, 0x1C	; 28
    2bfa:	93 e0       	ldi	r25, 0x03	; 3
    2bfc:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    2c00:	1a 5f       	subi	r17, 0xFA	; 250
					if(rtc.Tag>=30){
						rtc.Tag=0;
						rtc.Monat=0;
						pos=3;
						buffersize=sprintf(buffer,"Tag falsch");
						for(uint8_t i = 0; i<buffersize;i++){
    2c02:	1c 33       	cpi	r17, 0x3C	; 60
    2c04:	a1 f7       	brne	.-24     	; 0x2bee <_Z13uhreinstellenv+0x55e>
    2c06:	e8 c0       	rjmp	.+464    	; 0x2dd8 <_Z13uhreinstellenv+0x748>
						}
					}
				}
				break;
			case 8:
				rtc.Jahr=Tastatur.ZahlenausTastatur()*10;
    2c08:	8b e1       	ldi	r24, 0x1B	; 27
    2c0a:	93 e0       	ldi	r25, 0x03	; 3
    2c0c:	0e 94 3b 1e 	call	0x3c76	; 0x3c76 <_ZN9Interface17ZahlenausTastaturEv>
    2c10:	88 0f       	add	r24, r24
    2c12:	98 2f       	mov	r25, r24
    2c14:	99 0f       	add	r25, r25
    2c16:	99 0f       	add	r25, r25
    2c18:	89 0f       	add	r24, r25
				if(rtc.Jahr>=50){
    2c1a:	82 33       	cpi	r24, 0x32	; 50
    2c1c:	20 f4       	brcc	.+8      	; 0x2c26 <_Z13uhreinstellenv+0x596>
						}
					}
				}
				break;
			case 8:
				rtc.Jahr=Tastatur.ZahlenausTastatur()*10;
    2c1e:	e3 e6       	ldi	r30, 0x63	; 99
    2c20:	f7 e0       	ldi	r31, 0x07	; 7
    2c22:	80 83       	st	Z, r24
    2c24:	ec c0       	rjmp	.+472    	; 0x2dfe <_Z13uhreinstellenv+0x76e>
				if(rtc.Jahr>=50){
					rtc.Jahr=0;
    2c26:	e3 e6       	ldi	r30, 0x63	; 99
    2c28:	f7 e0       	ldi	r31, 0x07	; 7
    2c2a:	10 82       	st	Z, r1
					pos=7;
					buffersize=sprintf(buffer,"Jahr falsch");
    2c2c:	8c e0       	ldi	r24, 0x0C	; 12
    2c2e:	e5 ee       	ldi	r30, 0xE5	; 229
    2c30:	f2 e0       	ldi	r31, 0x02	; 2
    2c32:	a7 2d       	mov	r26, r7
    2c34:	b8 2d       	mov	r27, r8
    2c36:	01 90       	ld	r0, Z+
    2c38:	0d 92       	st	X+, r0
    2c3a:	8a 95       	dec	r24
    2c3c:	e1 f7       	brne	.-8      	; 0x2c36 <_Z13uhreinstellenv+0x5a6>
    2c3e:	2d 88       	ldd	r2, Y+21	; 0x15
    2c40:	3e 88       	ldd	r3, Y+22	; 0x16
    2c42:	1b 2d       	mov	r17, r11
					for(uint8_t i = 0; i<buffersize;i++){
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
    2c44:	f1 01       	movw	r30, r2
    2c46:	61 91       	ld	r22, Z+
    2c48:	1f 01       	movw	r2, r30
    2c4a:	28 e3       	ldi	r18, 0x38	; 56
    2c4c:	41 2f       	mov	r20, r17
    2c4e:	8c e1       	ldi	r24, 0x1C	; 28
    2c50:	93 e0       	ldi	r25, 0x03	; 3
    2c52:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    2c56:	1a 5f       	subi	r17, 0xFA	; 250
				rtc.Jahr=Tastatur.ZahlenausTastatur()*10;
				if(rtc.Jahr>=50){
					rtc.Jahr=0;
					pos=7;
					buffersize=sprintf(buffer,"Jahr falsch");
					for(uint8_t i = 0; i<buffersize;i++){
    2c58:	12 34       	cpi	r17, 0x42	; 66
    2c5a:	a1 f7       	brne	.-24     	; 0x2c44 <_Z13uhreinstellenv+0x5b4>
    2c5c:	c2 c0       	rjmp	.+388    	; 0x2de2 <_Z13uhreinstellenv+0x752>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 9:
				rtc.Jahr+=Tastatur.ZahlenausTastatur();
    2c5e:	8b e1       	ldi	r24, 0x1B	; 27
    2c60:	93 e0       	ldi	r25, 0x03	; 3
    2c62:	0e 94 3b 1e 	call	0x3c76	; 0x3c76 <_ZN9Interface17ZahlenausTastaturEv>
    2c66:	e3 e6       	ldi	r30, 0x63	; 99
    2c68:	f7 e0       	ldi	r31, 0x07	; 7
    2c6a:	20 81       	ld	r18, Z
    2c6c:	90 e0       	ldi	r25, 0x00	; 0
    2c6e:	82 0f       	add	r24, r18
    2c70:	91 1d       	adc	r25, r1
				if(rtc.Jahr>=50){
    2c72:	82 33       	cpi	r24, 0x32	; 50
    2c74:	10 f4       	brcc	.+4      	; 0x2c7a <_Z13uhreinstellenv+0x5ea>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 9:
				rtc.Jahr+=Tastatur.ZahlenausTastatur();
    2c76:	80 83       	st	Z, r24
    2c78:	1f c0       	rjmp	.+62     	; 0x2cb8 <_Z13uhreinstellenv+0x628>
				if(rtc.Jahr>=50){
					rtc.Jahr=0;
    2c7a:	e3 e6       	ldi	r30, 0x63	; 99
    2c7c:	f7 e0       	ldi	r31, 0x07	; 7
    2c7e:	10 82       	st	Z, r1
					pos=7;
					buffersize=sprintf(buffer,"Jahr falsch");
    2c80:	8c e0       	ldi	r24, 0x0C	; 12
    2c82:	e5 ee       	ldi	r30, 0xE5	; 229
    2c84:	f2 e0       	ldi	r31, 0x02	; 2
    2c86:	a7 2d       	mov	r26, r7
    2c88:	b8 2d       	mov	r27, r8
    2c8a:	01 90       	ld	r0, Z+
    2c8c:	0d 92       	st	X+, r0
    2c8e:	8a 95       	dec	r24
    2c90:	e1 f7       	brne	.-8      	; 0x2c8a <_Z13uhreinstellenv+0x5fa>
    2c92:	2d 88       	ldd	r2, Y+21	; 0x15
    2c94:	3e 88       	ldd	r3, Y+22	; 0x16
    2c96:	1b 2d       	mov	r17, r11
					for(uint8_t i = 0; i<buffersize;i++){
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
    2c98:	f1 01       	movw	r30, r2
    2c9a:	61 91       	ld	r22, Z+
    2c9c:	1f 01       	movw	r2, r30
    2c9e:	28 e3       	ldi	r18, 0x38	; 56
    2ca0:	41 2f       	mov	r20, r17
    2ca2:	8c e1       	ldi	r24, 0x1C	; 28
    2ca4:	93 e0       	ldi	r25, 0x03	; 3
    2ca6:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    2caa:	1a 5f       	subi	r17, 0xFA	; 250
				rtc.Jahr+=Tastatur.ZahlenausTastatur();
				if(rtc.Jahr>=50){
					rtc.Jahr=0;
					pos=7;
					buffersize=sprintf(buffer,"Jahr falsch");
					for(uint8_t i = 0; i<buffersize;i++){
    2cac:	12 34       	cpi	r17, 0x42	; 66
    2cae:	a1 f7       	brne	.-24     	; 0x2c98 <_Z13uhreinstellenv+0x608>
				break;
			case 9:
				rtc.Jahr+=Tastatur.ZahlenausTastatur();
				if(rtc.Jahr>=50){
					rtc.Jahr=0;
					pos=7;
    2cb0:	0f 2e       	mov	r0, r31
    2cb2:	f7 e0       	ldi	r31, 0x07	; 7
    2cb4:	9f 2e       	mov	r9, r31
    2cb6:	f0 2d       	mov	r31, r0
					buffersize=sprintf(buffer,"Jahr falsch");
					for(uint8_t i = 0; i<buffersize;i++){
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				if(rtc.Monat==2){
    2cb8:	f6 01       	movw	r30, r12
    2cba:	80 81       	ld	r24, Z
    2cbc:	82 30       	cpi	r24, 0x02	; 2
    2cbe:	09 f0       	breq	.+2      	; 0x2cc2 <_Z13uhreinstellenv+0x632>
    2cc0:	4d c0       	rjmp	.+154    	; 0x2d5c <_Z13uhreinstellenv+0x6cc>
					if(rtc.Jahr%4==0){
    2cc2:	e3 e6       	ldi	r30, 0x63	; 99
    2cc4:	f7 e0       	ldi	r31, 0x07	; 7
    2cc6:	80 81       	ld	r24, Z
    2cc8:	83 70       	andi	r24, 0x03	; 3
    2cca:	21 f5       	brne	.+72     	; 0x2d14 <_Z13uhreinstellenv+0x684>
						if (rtc.Tag>=30)
    2ccc:	f2 01       	movw	r30, r4
    2cce:	80 81       	ld	r24, Z
    2cd0:	8e 31       	cpi	r24, 0x1E	; 30
    2cd2:	08 f4       	brcc	.+2      	; 0x2cd6 <_Z13uhreinstellenv+0x646>
    2cd4:	43 c0       	rjmp	.+134    	; 0x2d5c <_Z13uhreinstellenv+0x6cc>
						{
							rtc.Tag=0;
    2cd6:	10 82       	st	Z, r1
							rtc.Monat=0;
    2cd8:	f6 01       	movw	r30, r12
    2cda:	10 82       	st	Z, r1
							rtc.Jahr=0;
    2cdc:	e3 e6       	ldi	r30, 0x63	; 99
    2cde:	f7 e0       	ldi	r31, 0x07	; 7
    2ce0:	10 82       	st	Z, r1
							pos=3;
							buffersize=sprintf(buffer,"Tag falsch");
    2ce2:	8b e0       	ldi	r24, 0x0B	; 11
    2ce4:	ed ec       	ldi	r30, 0xCD	; 205
    2ce6:	f2 e0       	ldi	r31, 0x02	; 2
    2ce8:	a7 2d       	mov	r26, r7
    2cea:	b8 2d       	mov	r27, r8
    2cec:	01 90       	ld	r0, Z+
    2cee:	0d 92       	st	X+, r0
    2cf0:	8a 95       	dec	r24
    2cf2:	e1 f7       	brne	.-8      	; 0x2cec <_Z13uhreinstellenv+0x65c>
    2cf4:	2d 88       	ldd	r2, Y+21	; 0x15
    2cf6:	3e 88       	ldd	r3, Y+22	; 0x16
    2cf8:	1b 2d       	mov	r17, r11
							for(uint8_t i = 0; i<buffersize;i++){
								oled.draw_ASCI(buffer[i],charsize*i,7*8);
    2cfa:	f1 01       	movw	r30, r2
    2cfc:	61 91       	ld	r22, Z+
    2cfe:	1f 01       	movw	r2, r30
    2d00:	28 e3       	ldi	r18, 0x38	; 56
    2d02:	41 2f       	mov	r20, r17
    2d04:	8c e1       	ldi	r24, 0x1C	; 28
    2d06:	93 e0       	ldi	r25, 0x03	; 3
    2d08:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    2d0c:	1a 5f       	subi	r17, 0xFA	; 250
							rtc.Tag=0;
							rtc.Monat=0;
							rtc.Jahr=0;
							pos=3;
							buffersize=sprintf(buffer,"Tag falsch");
							for(uint8_t i = 0; i<buffersize;i++){
    2d0e:	1c 33       	cpi	r17, 0x3C	; 60
    2d10:	a1 f7       	brne	.-24     	; 0x2cfa <_Z13uhreinstellenv+0x66a>
    2d12:	6c c0       	rjmp	.+216    	; 0x2dec <_Z13uhreinstellenv+0x75c>
								oled.draw_ASCI(buffer[i],charsize*i,7*8);
							}
						}
					}
					else{
						if(rtc.Tag>=29){
    2d14:	f2 01       	movw	r30, r4
    2d16:	80 81       	ld	r24, Z
    2d18:	8d 31       	cpi	r24, 0x1D	; 29
    2d1a:	00 f1       	brcs	.+64     	; 0x2d5c <_Z13uhreinstellenv+0x6cc>
							rtc.Tag=0;
    2d1c:	10 82       	st	Z, r1
							rtc.Monat=0;
    2d1e:	f6 01       	movw	r30, r12
    2d20:	10 82       	st	Z, r1
							rtc.Jahr=0;
    2d22:	e3 e6       	ldi	r30, 0x63	; 99
    2d24:	f7 e0       	ldi	r31, 0x07	; 7
    2d26:	10 82       	st	Z, r1
							pos=3;
							buffersize=sprintf(buffer,"Tag falsch");
    2d28:	8b e0       	ldi	r24, 0x0B	; 11
    2d2a:	ed ec       	ldi	r30, 0xCD	; 205
    2d2c:	f2 e0       	ldi	r31, 0x02	; 2
    2d2e:	a7 2d       	mov	r26, r7
    2d30:	b8 2d       	mov	r27, r8
    2d32:	01 90       	ld	r0, Z+
    2d34:	0d 92       	st	X+, r0
    2d36:	8a 95       	dec	r24
    2d38:	e1 f7       	brne	.-8      	; 0x2d32 <_Z13uhreinstellenv+0x6a2>
    2d3a:	2d 88       	ldd	r2, Y+21	; 0x15
    2d3c:	3e 88       	ldd	r3, Y+22	; 0x16
    2d3e:	1b 2d       	mov	r17, r11
							for(uint8_t i = 0; i<buffersize;i++){
								oled.draw_ASCI(buffer[i],charsize*i,7*8);
    2d40:	f1 01       	movw	r30, r2
    2d42:	61 91       	ld	r22, Z+
    2d44:	1f 01       	movw	r2, r30
    2d46:	28 e3       	ldi	r18, 0x38	; 56
    2d48:	41 2f       	mov	r20, r17
    2d4a:	8c e1       	ldi	r24, 0x1C	; 28
    2d4c:	93 e0       	ldi	r25, 0x03	; 3
    2d4e:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    2d52:	1a 5f       	subi	r17, 0xFA	; 250
							rtc.Tag=0;
							rtc.Monat=0;
							rtc.Jahr=0;
							pos=3;
							buffersize=sprintf(buffer,"Tag falsch");
							for(uint8_t i = 0; i<buffersize;i++){
    2d54:	1c 33       	cpi	r17, 0x3C	; 60
    2d56:	a1 f7       	brne	.-24     	; 0x2d40 <_Z13uhreinstellenv+0x6b0>
    2d58:	4e c0       	rjmp	.+156    	; 0x2df6 <_Z13uhreinstellenv+0x766>
						}
					}
				}
				break;
			default:
				pos++;
    2d5a:	93 94       	inc	r9
				break;
		}
		pos++;
    2d5c:	93 94       	inc	r9
	
	oled.clearFrame();
	char buffer[20];
	uint8_t buffersize;
	uint8_t pos=0;
	while(pos<11){
    2d5e:	fa e0       	ldi	r31, 0x0A	; 10
    2d60:	f9 15       	cp	r31, r9
    2d62:	08 f0       	brcs	.+2      	; 0x2d66 <_Z13uhreinstellenv+0x6d6>
    2d64:	d4 cc       	rjmp	.-1624   	; 0x270e <_Z13uhreinstellenv+0x7e>
				break;
		}
		pos++;
	}
	
	rtc.Sekunden		= 0;
    2d66:	10 92 5f 07 	sts	0x075F, r1
	rtc.HundSekunden	= 0;
    2d6a:	10 92 60 07 	sts	0x0760, r1
	oled.clearFrame();
    2d6e:	8c e1       	ldi	r24, 0x1C	; 28
    2d70:	93 e0       	ldi	r25, 0x03	; 3
    2d72:	0e 94 ed 02 	call	0x5da	; 0x5da <_ZN7Display10clearFrameEv>
	rtc.ausgabedatumneu();
    2d76:	8d e4       	ldi	r24, 0x4D	; 77
    2d78:	97 e0       	ldi	r25, 0x07	; 7
    2d7a:	0e 94 b1 22 	call	0x4562	; 0x4562 <_ZN3RTC15ausgabedatumneuEv>
	rtc.ausgabezeitneu();
    2d7e:	8d e4       	ldi	r24, 0x4D	; 77
    2d80:	97 e0       	ldi	r25, 0x07	; 7
    2d82:	0e 94 78 22 	call	0x44f0	; 0x44f0 <_ZN3RTC14ausgabezeitneuEv>
	rtc.RTCstart();
    2d86:	8d e4       	ldi	r24, 0x4D	; 77
    2d88:	97 e0       	ldi	r25, 0x07	; 7
    2d8a:	0e 94 89 23 	call	0x4712	; 0x4712 <_ZN3RTC8RTCstartEv>
    2d8e:	39 c0       	rjmp	.+114    	; 0x2e02 <_Z13uhreinstellenv+0x772>

		oled.sendFrame();
		oled.clearFrame();
		switch (pos) {
			case 0:
				rtc.Stunden=Tastatur.ZahlenausTastatur()*10;
    2d90:	ed e5       	ldi	r30, 0x5D	; 93
    2d92:	f7 e0       	ldi	r31, 0x07	; 7
    2d94:	80 83       	st	Z, r24
    2d96:	33 c0       	rjmp	.+102    	; 0x2dfe <_Z13uhreinstellenv+0x76e>
				if(rtc.Stunden>=24){
					rtc.Stunden=0;
					pos=-1;
    2d98:	99 24       	eor	r9, r9
    2d9a:	9a 94       	dec	r9
    2d9c:	30 c0       	rjmp	.+96     	; 0x2dfe <_Z13uhreinstellenv+0x76e>
				break;
			case 1:
				rtc.Stunden+=Tastatur.ZahlenausTastatur();
				if(rtc.Stunden>=24){
					rtc.Stunden=0;
					pos=-1;
    2d9e:	99 24       	eor	r9, r9
    2da0:	9a 94       	dec	r9
    2da2:	2d c0       	rjmp	.+90     	; 0x2dfe <_Z13uhreinstellenv+0x76e>
				break;
			case 2:
				rtc.Minuten=Tastatur.ZahlenausTastatur()*10;
				if(rtc.Minuten>=60){
					rtc.Minuten=0;
					pos=1;
    2da4:	99 24       	eor	r9, r9
    2da6:	93 94       	inc	r9
    2da8:	2a c0       	rjmp	.+84     	; 0x2dfe <_Z13uhreinstellenv+0x76e>
				break;
			case 3:
				rtc.Minuten+=Tastatur.ZahlenausTastatur();
				if(rtc.Minuten>=60){
					rtc.Minuten=0;
					pos=1;
    2daa:	99 24       	eor	r9, r9
    2dac:	93 94       	inc	r9
    2dae:	27 c0       	rjmp	.+78     	; 0x2dfe <_Z13uhreinstellenv+0x76e>
				break;
			case 4:
				rtc.Tag=Tastatur.ZahlenausTastatur()*10;
				if(rtc.Tag>=32){
					rtc.Tag=0;
					pos=3;
    2db0:	0f 2e       	mov	r0, r31
    2db2:	f3 e0       	ldi	r31, 0x03	; 3
    2db4:	9f 2e       	mov	r9, r31
    2db6:	f0 2d       	mov	r31, r0
    2db8:	22 c0       	rjmp	.+68     	; 0x2dfe <_Z13uhreinstellenv+0x76e>
				break;
			case 5:
				rtc.Tag+=Tastatur.ZahlenausTastatur();
				if(rtc.Tag>=32){
					rtc.Tag=0;
					pos=3;
    2dba:	0f 2e       	mov	r0, r31
    2dbc:	f3 e0       	ldi	r31, 0x03	; 3
    2dbe:	9f 2e       	mov	r9, r31
    2dc0:	f0 2d       	mov	r31, r0
    2dc2:	1d c0       	rjmp	.+58     	; 0x2dfe <_Z13uhreinstellenv+0x76e>
				break;
			case 6:
				rtc.Monat=Tastatur.ZahlenausTastatur()*10;
				if(rtc.Monat>=13){
					rtc.Monat=0;
					pos=5;
    2dc4:	0f 2e       	mov	r0, r31
    2dc6:	f5 e0       	ldi	r31, 0x05	; 5
    2dc8:	9f 2e       	mov	r9, r31
    2dca:	f0 2d       	mov	r31, r0
    2dcc:	18 c0       	rjmp	.+48     	; 0x2dfe <_Z13uhreinstellenv+0x76e>
				}
				if(rtc.Monat==4||rtc.Monat==6||rtc.Monat==9||rtc.Monat==11){
					if(rtc.Tag>=31){
						rtc.Tag=0;
						rtc.Monat=0;
						pos=3;
    2dce:	0f 2e       	mov	r0, r31
    2dd0:	f3 e0       	ldi	r31, 0x03	; 3
    2dd2:	9f 2e       	mov	r9, r31
    2dd4:	f0 2d       	mov	r31, r0
    2dd6:	13 c0       	rjmp	.+38     	; 0x2dfe <_Z13uhreinstellenv+0x76e>
				}
				else if(rtc.Monat==2){
					if(rtc.Tag>=30){
						rtc.Tag=0;
						rtc.Monat=0;
						pos=3;
    2dd8:	0f 2e       	mov	r0, r31
    2dda:	f3 e0       	ldi	r31, 0x03	; 3
    2ddc:	9f 2e       	mov	r9, r31
    2dde:	f0 2d       	mov	r31, r0
    2de0:	0e c0       	rjmp	.+28     	; 0x2dfe <_Z13uhreinstellenv+0x76e>
				break;
			case 8:
				rtc.Jahr=Tastatur.ZahlenausTastatur()*10;
				if(rtc.Jahr>=50){
					rtc.Jahr=0;
					pos=7;
    2de2:	0f 2e       	mov	r0, r31
    2de4:	f7 e0       	ldi	r31, 0x07	; 7
    2de6:	9f 2e       	mov	r9, r31
    2de8:	f0 2d       	mov	r31, r0
    2dea:	09 c0       	rjmp	.+18     	; 0x2dfe <_Z13uhreinstellenv+0x76e>
						if (rtc.Tag>=30)
						{
							rtc.Tag=0;
							rtc.Monat=0;
							rtc.Jahr=0;
							pos=3;
    2dec:	0f 2e       	mov	r0, r31
    2dee:	f3 e0       	ldi	r31, 0x03	; 3
    2df0:	9f 2e       	mov	r9, r31
    2df2:	f0 2d       	mov	r31, r0
    2df4:	04 c0       	rjmp	.+8      	; 0x2dfe <_Z13uhreinstellenv+0x76e>
					else{
						if(rtc.Tag>=29){
							rtc.Tag=0;
							rtc.Monat=0;
							rtc.Jahr=0;
							pos=3;
    2df6:	0f 2e       	mov	r0, r31
    2df8:	f3 e0       	ldi	r31, 0x03	; 3
    2dfa:	9f 2e       	mov	r9, r31
    2dfc:	f0 2d       	mov	r31, r0
				break;
			default:
				pos++;
				break;
		}
		pos++;
    2dfe:	93 94       	inc	r9
    2e00:	86 cc       	rjmp	.-1780   	; 0x270e <_Z13uhreinstellenv+0x7e>
	rtc.HundSekunden	= 0;
	oled.clearFrame();
	rtc.ausgabedatumneu();
	rtc.ausgabezeitneu();
	rtc.RTCstart();
}
    2e02:	66 96       	adiw	r28, 0x16	; 22
    2e04:	0f b6       	in	r0, 0x3f	; 63
    2e06:	f8 94       	cli
    2e08:	de bf       	out	0x3e, r29	; 62
    2e0a:	0f be       	out	0x3f, r0	; 63
    2e0c:	cd bf       	out	0x3d, r28	; 61
    2e0e:	df 91       	pop	r29
    2e10:	cf 91       	pop	r28
    2e12:	1f 91       	pop	r17
    2e14:	0f 91       	pop	r16
    2e16:	ff 90       	pop	r15
    2e18:	ef 90       	pop	r14
    2e1a:	df 90       	pop	r13
    2e1c:	cf 90       	pop	r12
    2e1e:	bf 90       	pop	r11
    2e20:	af 90       	pop	r10
    2e22:	9f 90       	pop	r9
    2e24:	8f 90       	pop	r8
    2e26:	7f 90       	pop	r7
    2e28:	6f 90       	pop	r6
    2e2a:	5f 90       	pop	r5
    2e2c:	4f 90       	pop	r4
    2e2e:	3f 90       	pop	r3
    2e30:	2f 90       	pop	r2
    2e32:	08 95       	ret

00002e34 <__vector_9>:
uint8_t pos;		//Handler fuer die Einganbe von Zahlen

//Ausgelagerte Sammlung der einzelnen Seitenlayouts
#include "Seiten.h"

ISR(TIMER2_OVF_vect){	//Vektor fuer die RTC
    2e34:	1f 92       	push	r1
    2e36:	0f 92       	push	r0
    2e38:	0f b6       	in	r0, 0x3f	; 63
    2e3a:	0f 92       	push	r0
    2e3c:	11 24       	eor	r1, r1
    2e3e:	8f 93       	push	r24
    2e40:	ef 93       	push	r30
    2e42:	ff 93       	push	r31
	TCNT2=TIMER2RTCTIME;
    2e44:	10 92 b2 00 	sts	0x00B2, r1
	rtc.Sekunden++;
    2e48:	ef e5       	ldi	r30, 0x5F	; 95
    2e4a:	f7 e0       	ldi	r31, 0x07	; 7
    2e4c:	80 81       	ld	r24, Z
    2e4e:	8f 5f       	subi	r24, 0xFF	; 255
    2e50:	80 83       	st	Z, r24
	rtc.interupts|= (1<<sekundeninterupt);
    2e52:	e4 e6       	ldi	r30, 0x64	; 100
    2e54:	f7 e0       	ldi	r31, 0x07	; 7
    2e56:	80 81       	ld	r24, Z
    2e58:	82 60       	ori	r24, 0x02	; 2
    2e5a:	80 83       	st	Z, r24
}
    2e5c:	ff 91       	pop	r31
    2e5e:	ef 91       	pop	r30
    2e60:	8f 91       	pop	r24
    2e62:	0f 90       	pop	r0
    2e64:	0f be       	out	0x3f, r0	; 63
    2e66:	0f 90       	pop	r0
    2e68:	1f 90       	pop	r1
    2e6a:	18 95       	reti

00002e6c <_Z15geschwindigkeitf>:

double geschw;
double strecke;
double maxgeschw;
uint32_t Fahrtzeit;
void geschwindigkeit(float radius){
    2e6c:	cf 92       	push	r12
    2e6e:	df 92       	push	r13
    2e70:	ef 92       	push	r14
    2e72:	ff 92       	push	r15
    2e74:	0f 93       	push	r16
    2e76:	1f 93       	push	r17
    2e78:	cf 93       	push	r28
    2e7a:	df 93       	push	r29
	//uint16_t zaehlungen = (TCNT1H<<8) | (TCNT1L);
	uint16_t zaehlungen = TCNT1;
    2e7c:	c4 e8       	ldi	r28, 0x84	; 132
    2e7e:	d0 e0       	ldi	r29, 0x00	; 0
    2e80:	08 81       	ld	r16, Y
    2e82:	19 81       	ldd	r17, Y+1	; 0x01
	geschw = (radius/100.0)*2*M_PI/(((double)zaehlungen/zaehlungenprozeiteinheit)*zeitproachtzaehlungen);
    2e84:	20 e0       	ldi	r18, 0x00	; 0
    2e86:	30 e0       	ldi	r19, 0x00	; 0
    2e88:	48 ec       	ldi	r20, 0xC8	; 200
    2e8a:	52 e4       	ldi	r21, 0x42	; 66
    2e8c:	0e 94 93 24 	call	0x4926	; 0x4926 <__divsf3>
    2e90:	9b 01       	movw	r18, r22
    2e92:	ac 01       	movw	r20, r24
    2e94:	0e 94 c6 23 	call	0x478c	; 0x478c <__addsf3>
    2e98:	2b ed       	ldi	r18, 0xDB	; 219
    2e9a:	3f e0       	ldi	r19, 0x0F	; 15
    2e9c:	49 e4       	ldi	r20, 0x49	; 73
    2e9e:	50 e4       	ldi	r21, 0x40	; 64
    2ea0:	0e 94 8c 26 	call	0x4d18	; 0x4d18 <__mulsf3>
    2ea4:	6b 01       	movw	r12, r22
    2ea6:	7c 01       	movw	r14, r24
    2ea8:	b8 01       	movw	r22, r16
    2eaa:	80 e0       	ldi	r24, 0x00	; 0
    2eac:	90 e0       	ldi	r25, 0x00	; 0
    2eae:	0e 94 2c 25 	call	0x4a58	; 0x4a58 <__floatunsisf>
    2eb2:	20 e0       	ldi	r18, 0x00	; 0
    2eb4:	30 e0       	ldi	r19, 0x00	; 0
    2eb6:	40 e0       	ldi	r20, 0x00	; 0
    2eb8:	5e e3       	ldi	r21, 0x3E	; 62
    2eba:	0e 94 8c 26 	call	0x4d18	; 0x4d18 <__mulsf3>
    2ebe:	2d eb       	ldi	r18, 0xBD	; 189
    2ec0:	37 e3       	ldi	r19, 0x37	; 55
    2ec2:	46 e8       	ldi	r20, 0x86	; 134
    2ec4:	5a e3       	ldi	r21, 0x3A	; 58
    2ec6:	0e 94 8c 26 	call	0x4d18	; 0x4d18 <__mulsf3>
    2eca:	9b 01       	movw	r18, r22
    2ecc:	ac 01       	movw	r20, r24
    2ece:	c7 01       	movw	r24, r14
    2ed0:	b6 01       	movw	r22, r12
    2ed2:	0e 94 93 24 	call	0x4926	; 0x4926 <__divsf3>
    2ed6:	60 93 fe 02 	sts	0x02FE, r22
    2eda:	70 93 ff 02 	sts	0x02FF, r23
    2ede:	80 93 00 03 	sts	0x0300, r24
    2ee2:	90 93 01 03 	sts	0x0301, r25
	//TCNT1H = 0;
	//TCNT1L = 0;
	TCNT1 = 0;
    2ee6:	19 82       	std	Y+1, r1	; 0x01
    2ee8:	18 82       	st	Y, r1
}
    2eea:	df 91       	pop	r29
    2eec:	cf 91       	pop	r28
    2eee:	1f 91       	pop	r17
    2ef0:	0f 91       	pop	r16
    2ef2:	ff 90       	pop	r15
    2ef4:	ef 90       	pop	r14
    2ef6:	df 90       	pop	r13
    2ef8:	cf 90       	pop	r12
    2efa:	08 95       	ret

00002efc <_Z13reed_debouncePVhh>:

uint8_t reed_debounce(volatile uint8_t *port, uint8_t pin)
{
	if ( !(*port & (1 << pin)) )
    2efc:	fc 01       	movw	r30, r24
    2efe:	20 81       	ld	r18, Z
    2f00:	30 e0       	ldi	r19, 0x00	; 0
    2f02:	06 2e       	mov	r0, r22
    2f04:	02 c0       	rjmp	.+4      	; 0x2f0a <_Z13reed_debouncePVhh+0xe>
    2f06:	35 95       	asr	r19
    2f08:	27 95       	ror	r18
    2f0a:	0a 94       	dec	r0
    2f0c:	e2 f7       	brpl	.-8      	; 0x2f06 <_Z13reed_debouncePVhh+0xa>
    2f0e:	20 fd       	sbrc	r18, 0
    2f10:	15 c0       	rjmp	.+42     	; 0x2f3c <_Z13reed_debouncePVhh+0x40>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2f12:	fd e5       	ldi	r31, 0x5D	; 93
    2f14:	fa 95       	dec	r31
    2f16:	f1 f7       	brne	.-4      	; 0x2f14 <_Z13reed_debouncePVhh+0x18>
    2f18:	00 00       	nop
	{
		/* Pin wurde auf Masse gezogen, ms warten   */
		_delay_us(35);
		//_delay_us(50);
		if ( (*port & (1 << pin)) )
    2f1a:	fc 01       	movw	r30, r24
    2f1c:	80 81       	ld	r24, Z
    2f1e:	90 e0       	ldi	r25, 0x00	; 0
    2f20:	9c 01       	movw	r18, r24
    2f22:	02 c0       	rjmp	.+4      	; 0x2f28 <_Z13reed_debouncePVhh+0x2c>
    2f24:	35 95       	asr	r19
    2f26:	27 95       	ror	r18
    2f28:	6a 95       	dec	r22
    2f2a:	e2 f7       	brpl	.-8      	; 0x2f24 <_Z13reed_debouncePVhh+0x28>
    2f2c:	20 ff       	sbrs	r18, 0
    2f2e:	08 c0       	rjmp	.+16     	; 0x2f40 <_Z13reed_debouncePVhh+0x44>
    2f30:	32 e0       	ldi	r19, 0x02	; 2
    2f32:	3a 95       	dec	r19
    2f34:	f1 f7       	brne	.-4      	; 0x2f32 <_Z13reed_debouncePVhh+0x36>
    2f36:	00 c0       	rjmp	.+0      	; 0x2f38 <_Z13reed_debouncePVhh+0x3c>
		{
			/* Anwender Zeit zum Loslassen des Tasters geben */
			_delay_us(1);
			return 1;
    2f38:	81 e0       	ldi	r24, 0x01	; 1
    2f3a:	08 95       	ret
		}
	}
	return 0;
    2f3c:	80 e0       	ldi	r24, 0x00	; 0
    2f3e:	08 95       	ret
    2f40:	80 e0       	ldi	r24, 0x00	; 0
}
    2f42:	08 95       	ret

00002f44 <_Z15initialisierungv>:
    }
}

void initialisierung(){
	//nullen der Flagregister
	rtc.interupts=0;
    2f44:	10 92 64 07 	sts	0x0764, r1
	anzeige=0;
    2f48:	10 92 04 03 	sts	0x0304, r1
    2f4c:	10 92 03 03 	sts	0x0303, r1
	pos=0;
    2f50:	10 92 02 03 	sts	0x0302, r1
	//initialisieren des Zaehler fuer die Winkelgeschw sowie den Timer
	geschw=0;
    2f54:	10 92 fe 02 	sts	0x02FE, r1
    2f58:	10 92 ff 02 	sts	0x02FF, r1
    2f5c:	10 92 00 03 	sts	0x0300, r1
    2f60:	10 92 01 03 	sts	0x0301, r1
	strecke = 0;
    2f64:	10 92 fa 02 	sts	0x02FA, r1
    2f68:	10 92 fb 02 	sts	0x02FB, r1
    2f6c:	10 92 fc 02 	sts	0x02FC, r1
    2f70:	10 92 fd 02 	sts	0x02FD, r1
	maxgeschw = 0;
    2f74:	10 92 f6 02 	sts	0x02F6, r1
    2f78:	10 92 f7 02 	sts	0x02F7, r1
    2f7c:	10 92 f8 02 	sts	0x02F8, r1
    2f80:	10 92 f9 02 	sts	0x02F9, r1
	Fahrtzeit = 0;
    2f84:	10 92 f2 02 	sts	0x02F2, r1
    2f88:	10 92 f3 02 	sts	0x02F3, r1
    2f8c:	10 92 f4 02 	sts	0x02F4, r1
    2f90:	10 92 f5 02 	sts	0x02F5, r1
	TCNT1=0;
    2f94:	10 92 85 00 	sts	0x0085, r1
    2f98:	10 92 84 00 	sts	0x0084, r1
	//Ausgaenge und Eingaenge einstellen
	DDRD = (1<<PIND0) | (1<<PIND1) | (1<<PIND2) | (1<<PIND3);	//Pins zur Ausgabe
    2f9c:	8f e0       	ldi	r24, 0x0F	; 15
    2f9e:	8a b9       	out	0x0a, r24	; 10
	DDRD &= ~((1<<PIND4) | (1<<PIND5) | (1<<PIND6));			//Restliche Pins als Eingaenge schalten
    2fa0:	8a b1       	in	r24, 0x0a	; 10
    2fa2:	8f 78       	andi	r24, 0x8F	; 143
    2fa4:	8a b9       	out	0x0a, r24	; 10
	//Eingang fuer den Reedkontak schalten mit internem Pullup
	DDRC &= ~((1<<PORTC3)|(1<<PORTC2));
    2fa6:	87 b1       	in	r24, 0x07	; 7
    2fa8:	83 7f       	andi	r24, 0xF3	; 243
    2faa:	87 b9       	out	0x07, r24	; 7
	PORTC |= (1<<PORTC3) | (1<<PORTC2);
    2fac:	88 b1       	in	r24, 0x08	; 8
    2fae:	8c 60       	ori	r24, 0x0C	; 12
    2fb0:	88 b9       	out	0x08, r24	; 8
	//I2C Interface
	//twi_init();
	//Display
	oled.InitializeDisplay();
    2fb2:	8c e1       	ldi	r24, 0x1C	; 28
    2fb4:	93 e0       	ldi	r25, 0x03	; 3
    2fb6:	0e 94 14 03 	call	0x628	; 0x628 <_ZN7Display17InitializeDisplayEv>
	//initialisierung wird im konstruktor vorgenommen
	oled.clearFrame();
    2fba:	8c e1       	ldi	r24, 0x1C	; 28
    2fbc:	93 e0       	ldi	r25, 0x03	; 3
    2fbe:	0e 94 ed 02 	call	0x5da	; 0x5da <_ZN7Display10clearFrameEv>
	//HMC5883L initialisieren
	//kompass.initialize_HMC5883L();
	//initialisierung wird im Konstruktor erledigt
	
	//ADC Initialisieren auf CH0
	ADMUX = (1<<REFS0);
    2fc2:	80 e4       	ldi	r24, 0x40	; 64
    2fc4:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA = (1<<ADPS1) | (1<<ADPS0);
    2fc8:	ea e7       	ldi	r30, 0x7A	; 122
    2fca:	f0 e0       	ldi	r31, 0x00	; 0
    2fcc:	83 e0       	ldi	r24, 0x03	; 3
    2fce:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADEN);
    2fd0:	80 81       	ld	r24, Z
    2fd2:	80 68       	ori	r24, 0x80	; 128
    2fd4:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);
    2fd6:	80 81       	ld	r24, Z
    2fd8:	80 64       	ori	r24, 0x40	; 64
    2fda:	80 83       	st	Z, r24
	while (ADCSRA & (1<<ADSC) ) {
    2fdc:	80 81       	ld	r24, Z
    2fde:	86 fd       	sbrc	r24, 6
    2fe0:	fd cf       	rjmp	.-6      	; 0x2fdc <_Z15initialisierungv+0x98>
	}
	(void) ADCW;
    2fe2:	80 91 78 00 	lds	r24, 0x0078
    2fe6:	90 91 79 00 	lds	r25, 0x0079
	//Wilkommensanzeige
	willkommenpage();
    2fea:	0e 94 73 09 	call	0x12e6	; 0x12e6 <_Z14willkommenpagev>
	//Uhreinstellungen
	//uhreinstellen();
	//*************************************************
	//Nur Test, damit es schneller geht beim Start
	rtc.dummyeinst();
    2fee:	8d e4       	ldi	r24, 0x4D	; 77
    2ff0:	97 e0       	ldi	r25, 0x07	; 7
    2ff2:	0e 94 73 23 	call	0x46e6	; 0x46e6 <_ZN3RTC10dummyeinstEv>
	//*********************************
	rtc.RTCstart();
    2ff6:	8d e4       	ldi	r24, 0x4D	; 77
    2ff8:	97 e0       	ldi	r25, 0x07	; 7
    2ffa:	0e 94 89 23 	call	0x4712	; 0x4712 <_ZN3RTC8RTCstartEv>
	//ausgabe starten
	anzeige|=(1<<Uhrflag);
    2ffe:	80 91 03 03 	lds	r24, 0x0303
    3002:	90 91 04 03 	lds	r25, 0x0304
    3006:	81 60       	ori	r24, 0x01	; 1
    3008:	90 93 04 03 	sts	0x0304, r25
    300c:	80 93 03 03 	sts	0x0303, r24
	sei();
    3010:	78 94       	sei
    3012:	08 95       	ret

00003014 <_Z19maininterupthandlerv>:
	//interupt dierekt aus der rtc
	//if((rtc.interupts & (1<<hundinterupt))){
		//rtc.zeit();
		//rtc.interupts&=~(1<<hundinterupt);
	//}
	if ((anzeige&(1<<Fahradflag)))
    3014:	80 91 03 03 	lds	r24, 0x0303
    3018:	81 ff       	sbrs	r24, 1
    301a:	0d c0       	rjmp	.+26     	; 0x3036 <_Z19maininterupthandlerv+0x22>
	{
		//debounce Funktion fuer den Reedswitch
		if (reed_debounce(&PINC,PINC3))
    301c:	63 e0       	ldi	r22, 0x03	; 3
    301e:	86 e2       	ldi	r24, 0x26	; 38
    3020:	90 e0       	ldi	r25, 0x00	; 0
    3022:	0e 94 7e 17 	call	0x2efc	; 0x2efc <_Z13reed_debouncePVhh>
    3026:	88 23       	and	r24, r24
    3028:	31 f0       	breq	.+12     	; 0x3036 <_Z19maininterupthandlerv+0x22>
		{
			//Durchmesser ist 28 Zoll
			geschwindigkeit(14.0*2.54);
    302a:	60 e7       	ldi	r22, 0x70	; 112
    302c:	7d e3       	ldi	r23, 0x3D	; 61
    302e:	8e e0       	ldi	r24, 0x0E	; 14
    3030:	92 e4       	ldi	r25, 0x42	; 66
    3032:	0e 94 36 17 	call	0x2e6c	; 0x2e6c <_Z15geschwindigkeitf>
    3036:	08 95       	ret

00003038 <_Z14anzeigehandlerv>:
		}
	}
}

void anzeigehandler(){
    3038:	4f 92       	push	r4
    303a:	5f 92       	push	r5
    303c:	6f 92       	push	r6
    303e:	7f 92       	push	r7
    3040:	af 92       	push	r10
    3042:	bf 92       	push	r11
    3044:	cf 92       	push	r12
    3046:	df 92       	push	r13
    3048:	ef 92       	push	r14
    304a:	ff 92       	push	r15
    304c:	0f 93       	push	r16
    304e:	1f 93       	push	r17
    3050:	cf 93       	push	r28
    3052:	df 93       	push	r29
	//Handler fuer 1Hz Flag
	if ((rtc.interupts & (1<<sekundeninterupt)))
    3054:	80 91 64 07 	lds	r24, 0x0764
    3058:	81 ff       	sbrs	r24, 1
    305a:	55 c1       	rjmp	.+682    	; 0x3306 <_Z14anzeigehandlerv+0x2ce>
	{
		rtc.zeit();
    305c:	8d e4       	ldi	r24, 0x4D	; 77
    305e:	97 e0       	ldi	r25, 0x07	; 7
    3060:	0e 94 4e 23 	call	0x469c	; 0x469c <_ZN3RTC4zeitEv>
		//Handler fuer die Anzeige der Seiten
		//Die einzelnen Funktionen beschreiben nur den Framebuffer und nicht dierekt das Display
		if ((anzeige&(1<<menueflag)) && (anzeige&(1<<Uhrflag)))
    3064:	80 91 03 03 	lds	r24, 0x0303
    3068:	90 91 04 03 	lds	r25, 0x0304
    306c:	9c 01       	movw	r18, r24
    306e:	21 70       	andi	r18, 0x01	; 1
    3070:	30 72       	andi	r19, 0x20	; 32
    3072:	21 30       	cpi	r18, 0x01	; 1
    3074:	30 42       	sbci	r19, 0x20	; 32
    3076:	61 f4       	brne	.+24     	; 0x3090 <_Z14anzeigehandlerv+0x58>
		{
			menue_uhr();
    3078:	0e 94 ce 0c 	call	0x199c	; 0x199c <_Z9menue_uhrv>
			anzeige|=(1<<refreshdisplay);
    307c:	80 91 03 03 	lds	r24, 0x0303
    3080:	90 91 04 03 	lds	r25, 0x0304
    3084:	90 68       	ori	r25, 0x80	; 128
    3086:	90 93 04 03 	sts	0x0304, r25
    308a:	80 93 03 03 	sts	0x0303, r24
    308e:	36 c1       	rjmp	.+620    	; 0x32fc <_Z14anzeigehandlerv+0x2c4>
    3090:	9c 01       	movw	r18, r24
    3092:	28 70       	andi	r18, 0x08	; 8
    3094:	30 72       	andi	r19, 0x20	; 32
		}
		else if ((anzeige&(1<<menueflag)) && (anzeige&(1<<Einstellungsflag)))
    3096:	28 30       	cpi	r18, 0x08	; 8
    3098:	30 42       	sbci	r19, 0x20	; 32
    309a:	61 f4       	brne	.+24     	; 0x30b4 <_Z14anzeigehandlerv+0x7c>
		{
			menue_einst();
    309c:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <_Z11menue_einstv>
			anzeige|=(1<<refreshdisplay);
    30a0:	80 91 03 03 	lds	r24, 0x0303
    30a4:	90 91 04 03 	lds	r25, 0x0304
    30a8:	90 68       	ori	r25, 0x80	; 128
    30aa:	90 93 04 03 	sts	0x0304, r25
    30ae:	80 93 03 03 	sts	0x0303, r24
    30b2:	24 c1       	rjmp	.+584    	; 0x32fc <_Z14anzeigehandlerv+0x2c4>
		}
		else if ((anzeige&(1<<menueflag)))
    30b4:	95 ff       	sbrs	r25, 5
    30b6:	0c c0       	rjmp	.+24     	; 0x30d0 <_Z14anzeigehandlerv+0x98>
		{
			menue_haupt();
    30b8:	0e 94 92 0b 	call	0x1724	; 0x1724 <_Z11menue_hauptv>
			anzeige|=(1<<refreshdisplay);
    30bc:	80 91 03 03 	lds	r24, 0x0303
    30c0:	90 91 04 03 	lds	r25, 0x0304
    30c4:	90 68       	ori	r25, 0x80	; 128
    30c6:	90 93 04 03 	sts	0x0304, r25
    30ca:	80 93 03 03 	sts	0x0303, r24
    30ce:	16 c1       	rjmp	.+556    	; 0x32fc <_Z14anzeigehandlerv+0x2c4>
		}
		else if ((anzeige&(1<<Kompasgaineinstellenflag)))
    30d0:	85 ff       	sbrs	r24, 5
    30d2:	0c c0       	rjmp	.+24     	; 0x30ec <_Z14anzeigehandlerv+0xb4>
		{
			Gaineinstellen();
    30d4:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <_Z14Gaineinstellenv>
			anzeige|=(1<<refreshdisplay);
    30d8:	80 91 03 03 	lds	r24, 0x0303
    30dc:	90 91 04 03 	lds	r25, 0x0304
    30e0:	90 68       	ori	r25, 0x80	; 128
    30e2:	90 93 04 03 	sts	0x0304, r25
    30e6:	80 93 03 03 	sts	0x0303, r24
    30ea:	08 c1       	rjmp	.+528    	; 0x32fc <_Z14anzeigehandlerv+0x2c4>
		}
		else if ((anzeige&(1<<Uhrflag)))
    30ec:	80 ff       	sbrs	r24, 0
    30ee:	0c c0       	rjmp	.+24     	; 0x3108 <_Z14anzeigehandlerv+0xd0>
		{
			uhranzeigen();
    30f0:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <_Z11uhranzeigenv>
			anzeige|=(1<<refreshdisplay);
    30f4:	80 91 03 03 	lds	r24, 0x0303
    30f8:	90 91 04 03 	lds	r25, 0x0304
    30fc:	90 68       	ori	r25, 0x80	; 128
    30fe:	90 93 04 03 	sts	0x0304, r25
    3102:	80 93 03 03 	sts	0x0303, r24
    3106:	fa c0       	rjmp	.+500    	; 0x32fc <_Z14anzeigehandlerv+0x2c4>
		}
		else if ((anzeige&(1<<Kompasflag)))
    3108:	82 ff       	sbrs	r24, 2
    310a:	10 c0       	rjmp	.+32     	; 0x312c <_Z14anzeigehandlerv+0xf4>
		{
			anzeige_kompass(kompass.angle());
    310c:	85 e6       	ldi	r24, 0x65	; 101
    310e:	97 e0       	ldi	r25, 0x07	; 7
    3110:	0e 94 4e 1f 	call	0x3e9c	; 0x3e9c <_ZN7Kompass5angleEv>
    3114:	0e 94 a2 10 	call	0x2144	; 0x2144 <_Z15anzeige_kompassd>
			anzeige|=(1<<refreshdisplay);
    3118:	80 91 03 03 	lds	r24, 0x0303
    311c:	90 91 04 03 	lds	r25, 0x0304
    3120:	90 68       	ori	r25, 0x80	; 128
    3122:	90 93 04 03 	sts	0x0304, r25
    3126:	80 93 03 03 	sts	0x0303, r24
    312a:	e8 c0       	rjmp	.+464    	; 0x32fc <_Z14anzeigehandlerv+0x2c4>
		}
		else if ((anzeige&(1<<Fahradflag)))
    312c:	81 ff       	sbrs	r24, 1
    312e:	8c c0       	rjmp	.+280    	; 0x3248 <_Z14anzeigehandlerv+0x210>
		{
			//fahradschirm(12.3,kompass.angle());
			if (geschw>maxgeschw)
    3130:	40 90 fe 02 	lds	r4, 0x02FE
    3134:	50 90 ff 02 	lds	r5, 0x02FF
    3138:	60 90 00 03 	lds	r6, 0x0300
    313c:	70 90 01 03 	lds	r7, 0x0301
    3140:	20 91 f6 02 	lds	r18, 0x02F6
    3144:	30 91 f7 02 	lds	r19, 0x02F7
    3148:	40 91 f8 02 	lds	r20, 0x02F8
    314c:	50 91 f9 02 	lds	r21, 0x02F9
    3150:	c3 01       	movw	r24, r6
    3152:	b2 01       	movw	r22, r4
    3154:	0e 94 3c 26 	call	0x4c78	; 0x4c78 <__gesf2>
    3158:	18 16       	cp	r1, r24
    315a:	44 f4       	brge	.+16     	; 0x316c <_Z14anzeigehandlerv+0x134>
			{
				maxgeschw=geschw;
    315c:	40 92 f6 02 	sts	0x02F6, r4
    3160:	50 92 f7 02 	sts	0x02F7, r5
    3164:	60 92 f8 02 	sts	0x02F8, r6
    3168:	70 92 f9 02 	sts	0x02F9, r7
			}
			if (geschw != 0)
    316c:	20 e0       	ldi	r18, 0x00	; 0
    316e:	30 e0       	ldi	r19, 0x00	; 0
    3170:	a9 01       	movw	r20, r18
    3172:	c3 01       	movw	r24, r6
    3174:	b2 01       	movw	r22, r4
    3176:	0e 94 8c 24 	call	0x4918	; 0x4918 <__cmpsf2>
    317a:	88 23       	and	r24, r24
    317c:	99 f0       	breq	.+38     	; 0x31a4 <_Z14anzeigehandlerv+0x16c>
			{
				Fahrtzeit++;
    317e:	80 91 f2 02 	lds	r24, 0x02F2
    3182:	90 91 f3 02 	lds	r25, 0x02F3
    3186:	a0 91 f4 02 	lds	r26, 0x02F4
    318a:	b0 91 f5 02 	lds	r27, 0x02F5
    318e:	01 96       	adiw	r24, 0x01	; 1
    3190:	a1 1d       	adc	r26, r1
    3192:	b1 1d       	adc	r27, r1
    3194:	80 93 f2 02 	sts	0x02F2, r24
    3198:	90 93 f3 02 	sts	0x02F3, r25
    319c:	a0 93 f4 02 	sts	0x02F4, r26
    31a0:	b0 93 f5 02 	sts	0x02F5, r27
			}
			strecke+=geschw;
    31a4:	20 91 fa 02 	lds	r18, 0x02FA
    31a8:	30 91 fb 02 	lds	r19, 0x02FB
    31ac:	40 91 fc 02 	lds	r20, 0x02FC
    31b0:	50 91 fd 02 	lds	r21, 0x02FD
    31b4:	c3 01       	movw	r24, r6
    31b6:	b2 01       	movw	r22, r4
    31b8:	0e 94 c6 23 	call	0x478c	; 0x478c <__addsf3>
    31bc:	2b 01       	movw	r4, r22
    31be:	3c 01       	movw	r6, r24
    31c0:	60 93 fa 02 	sts	0x02FA, r22
    31c4:	70 93 fb 02 	sts	0x02FB, r23
    31c8:	80 93 fc 02 	sts	0x02FC, r24
    31cc:	90 93 fd 02 	sts	0x02FD, r25
			fahradschirm(geschw,kompass.angle(),strecke,maxgeschw, Fahrtzeit);
    31d0:	c0 91 f2 02 	lds	r28, 0x02F2
    31d4:	d0 91 f3 02 	lds	r29, 0x02F3
    31d8:	10 91 f4 02 	lds	r17, 0x02F4
    31dc:	00 91 f5 02 	lds	r16, 0x02F5
    31e0:	a0 90 f6 02 	lds	r10, 0x02F6
    31e4:	b0 90 f7 02 	lds	r11, 0x02F7
    31e8:	c0 90 f8 02 	lds	r12, 0x02F8
    31ec:	d0 90 f9 02 	lds	r13, 0x02F9
    31f0:	85 e6       	ldi	r24, 0x65	; 101
    31f2:	97 e0       	ldi	r25, 0x07	; 7
    31f4:	0e 94 4e 1f 	call	0x3e9c	; 0x3e9c <_ZN7Kompass5angleEv>
    31f8:	9b 01       	movw	r18, r22
    31fa:	ac 01       	movw	r20, r24
    31fc:	60 91 fe 02 	lds	r22, 0x02FE
    3200:	70 91 ff 02 	lds	r23, 0x02FF
    3204:	80 91 00 03 	lds	r24, 0x0300
    3208:	90 91 01 03 	lds	r25, 0x0301
    320c:	0f 93       	push	r16
    320e:	1f 93       	push	r17
    3210:	df 93       	push	r29
    3212:	cf 93       	push	r28
    3214:	83 01       	movw	r16, r6
    3216:	72 01       	movw	r14, r4
    3218:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <_Z12fahradschirmddddm>
			geschw=0;
    321c:	10 92 fe 02 	sts	0x02FE, r1
    3220:	10 92 ff 02 	sts	0x02FF, r1
    3224:	10 92 00 03 	sts	0x0300, r1
    3228:	10 92 01 03 	sts	0x0301, r1
			anzeige|=(1<<refreshdisplay);
    322c:	80 91 03 03 	lds	r24, 0x0303
    3230:	90 91 04 03 	lds	r25, 0x0304
    3234:	90 68       	ori	r25, 0x80	; 128
    3236:	90 93 04 03 	sts	0x0304, r25
    323a:	80 93 03 03 	sts	0x0303, r24
    323e:	0f 90       	pop	r0
    3240:	0f 90       	pop	r0
    3242:	0f 90       	pop	r0
    3244:	0f 90       	pop	r0
    3246:	5a c0       	rjmp	.+180    	; 0x32fc <_Z14anzeigehandlerv+0x2c4>
    3248:	9c 01       	movw	r18, r24
    324a:	28 74       	andi	r18, 0x48	; 72
    324c:	33 27       	eor	r19, r19
		}
		else if ((anzeige&(1<<Einstellungsflag)) && (anzeige&(1<<Timerflag)))
    324e:	28 34       	cpi	r18, 0x48	; 72
    3250:	31 05       	cpc	r19, r1
    3252:	61 f4       	brne	.+24     	; 0x326c <_Z14anzeigehandlerv+0x234>
		{
			timerseite();
    3254:	0e 94 36 11 	call	0x226c	; 0x226c <_Z10timerseitev>
			anzeige|=(1<<refreshdisplay);
    3258:	80 91 03 03 	lds	r24, 0x0303
    325c:	90 91 04 03 	lds	r25, 0x0304
    3260:	90 68       	ori	r25, 0x80	; 128
    3262:	90 93 04 03 	sts	0x0304, r25
    3266:	80 93 03 03 	sts	0x0303, r24
    326a:	48 c0       	rjmp	.+144    	; 0x32fc <_Z14anzeigehandlerv+0x2c4>
		}
		else if ((anzeige&(1<<Stoppuhrflag)))
    326c:	87 ff       	sbrs	r24, 7
    326e:	17 c0       	rjmp	.+46     	; 0x329e <_Z14anzeigehandlerv+0x266>
		{
			if ((anzeige&(1<<Einstellungsflag)))
    3270:	83 ff       	sbrs	r24, 3
    3272:	09 c0       	rjmp	.+18     	; 0x3286 <_Z14anzeigehandlerv+0x24e>
			{
				stoppuhr.Sekunden++;
    3274:	ef e2       	ldi	r30, 0x2F	; 47
    3276:	f7 e0       	ldi	r31, 0x07	; 7
    3278:	80 81       	ld	r24, Z
    327a:	8f 5f       	subi	r24, 0xFF	; 255
    327c:	80 83       	st	Z, r24
				stoppuhr.zeit();
    327e:	8d e1       	ldi	r24, 0x1D	; 29
    3280:	97 e0       	ldi	r25, 0x07	; 7
    3282:	0e 94 4e 23 	call	0x469c	; 0x469c <_ZN3RTC4zeitEv>
			}
			Stoppuhrseite();
    3286:	0e 94 cb 11 	call	0x2396	; 0x2396 <_Z13Stoppuhrseitev>
			anzeige|=(1<<refreshdisplay);
    328a:	80 91 03 03 	lds	r24, 0x0303
    328e:	90 91 04 03 	lds	r25, 0x0304
    3292:	90 68       	ori	r25, 0x80	; 128
    3294:	90 93 04 03 	sts	0x0304, r25
    3298:	80 93 03 03 	sts	0x0303, r24
    329c:	2f c0       	rjmp	.+94     	; 0x32fc <_Z14anzeigehandlerv+0x2c4>
		}
		else if ((anzeige&(1<<Timerflag)))
    329e:	86 ff       	sbrs	r24, 6
    32a0:	20 c0       	rjmp	.+64     	; 0x32e2 <_Z14anzeigehandlerv+0x2aa>
		{
			zaehler.Sekunden--;
    32a2:	e7 e4       	ldi	r30, 0x47	; 71
    32a4:	f7 e0       	ldi	r31, 0x07	; 7
    32a6:	80 81       	ld	r24, Z
    32a8:	81 50       	subi	r24, 0x01	; 1
    32aa:	80 83       	st	Z, r24
			if(zaehler.timer()){
    32ac:	85 e3       	ldi	r24, 0x35	; 53
    32ae:	97 e0       	ldi	r25, 0x07	; 7
    32b0:	0e 94 a8 23 	call	0x4750	; 0x4750 <_ZN3RTC5timerEv>
    32b4:	88 23       	and	r24, r24
    32b6:	49 f0       	breq	.+18     	; 0x32ca <_Z14anzeigehandlerv+0x292>
				anzeige|=(1<<blinkflag);
    32b8:	80 91 03 03 	lds	r24, 0x0303
    32bc:	90 91 04 03 	lds	r25, 0x0304
    32c0:	90 64       	ori	r25, 0x40	; 64
    32c2:	90 93 04 03 	sts	0x0304, r25
    32c6:	80 93 03 03 	sts	0x0303, r24
			}
			timerseite();
    32ca:	0e 94 36 11 	call	0x226c	; 0x226c <_Z10timerseitev>
			anzeige|=(1<<refreshdisplay);
    32ce:	80 91 03 03 	lds	r24, 0x0303
    32d2:	90 91 04 03 	lds	r25, 0x0304
    32d6:	90 68       	ori	r25, 0x80	; 128
    32d8:	90 93 04 03 	sts	0x0304, r25
    32dc:	80 93 03 03 	sts	0x0303, r24
    32e0:	0d c0       	rjmp	.+26     	; 0x32fc <_Z14anzeigehandlerv+0x2c4>
		}
		else if ((anzeige&(1<<Druckflag)))
    32e2:	91 ff       	sbrs	r25, 1
    32e4:	0b c0       	rjmp	.+22     	; 0x32fc <_Z14anzeigehandlerv+0x2c4>
		{
			Pressuresensor();
    32e6:	0e 94 55 12 	call	0x24aa	; 0x24aa <_Z14Pressuresensorv>
			anzeige |= (1<<refreshdisplay);
    32ea:	80 91 03 03 	lds	r24, 0x0303
    32ee:	90 91 04 03 	lds	r25, 0x0304
    32f2:	90 68       	ori	r25, 0x80	; 128
    32f4:	90 93 04 03 	sts	0x0304, r25
    32f8:	80 93 03 03 	sts	0x0303, r24
		}
		rtc.interupts&=~(1<<sekundeninterupt);
    32fc:	e4 e6       	ldi	r30, 0x64	; 100
    32fe:	f7 e0       	ldi	r31, 0x07	; 7
    3300:	80 81       	ld	r24, Z
    3302:	8d 7f       	andi	r24, 0xFD	; 253
    3304:	80 83       	st	Z, r24
	}
	//Minuteninterrupt
	if ((rtc.interupts&(1<<minuteninterupt)))
    3306:	80 91 64 07 	lds	r24, 0x0764
    330a:	82 ff       	sbrs	r24, 2
    330c:	16 c0       	rjmp	.+44     	; 0x333a <_Z14anzeigehandlerv+0x302>
	{
		if ((anzeige&(1<<Uhrflaggross)))
    330e:	80 91 03 03 	lds	r24, 0x0303
    3312:	90 91 04 03 	lds	r25, 0x0304
    3316:	92 ff       	sbrs	r25, 2
    3318:	0b c0       	rjmp	.+22     	; 0x3330 <_Z14anzeigehandlerv+0x2f8>
		{
			uhranzeigenmin();
    331a:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <_Z14uhranzeigenminv>
			anzeige|=(1<<refreshdisplay);
    331e:	80 91 03 03 	lds	r24, 0x0303
    3322:	90 91 04 03 	lds	r25, 0x0304
    3326:	90 68       	ori	r25, 0x80	; 128
    3328:	90 93 04 03 	sts	0x0304, r25
    332c:	80 93 03 03 	sts	0x0303, r24
		}
		rtc.interupts&=~(1<<minuteninterupt);
    3330:	e4 e6       	ldi	r30, 0x64	; 100
    3332:	f7 e0       	ldi	r31, 0x07	; 7
    3334:	80 81       	ld	r24, Z
    3336:	8b 7f       	andi	r24, 0xFB	; 251
    3338:	80 83       	st	Z, r24
	}
	//neuen Framebuffer an das Dispay senden
	if ((anzeige&(1<<refreshdisplay)))
    333a:	80 91 03 03 	lds	r24, 0x0303
    333e:	90 91 04 03 	lds	r25, 0x0304
    3342:	99 23       	and	r25, r25
    3344:	14 f5       	brge	.+68     	; 0x338a <_Z14anzeigehandlerv+0x352>
	{
		oled.sendFrame();
    3346:	8c e1       	ldi	r24, 0x1C	; 28
    3348:	93 e0       	ldi	r25, 0x03	; 3
    334a:	0e 94 93 03 	call	0x726	; 0x726 <_ZN7Display9sendFrameEv>
		if ((anzeige&(1<<blinkflag)))
    334e:	80 91 03 03 	lds	r24, 0x0303
    3352:	90 91 04 03 	lds	r25, 0x0304
    3356:	96 ff       	sbrs	r25, 6
    3358:	0f c0       	rjmp	.+30     	; 0x3378 <_Z14anzeigehandlerv+0x340>
		{
			oled.invert(rtc.Sekunden%2);
    335a:	60 91 5f 07 	lds	r22, 0x075F
    335e:	61 70       	andi	r22, 0x01	; 1
    3360:	8c e1       	ldi	r24, 0x1C	; 28
    3362:	93 e0       	ldi	r25, 0x03	; 3
    3364:	0e 94 89 03 	call	0x712	; 0x712 <_ZN7Display6invertEh>
			LED.toggle();
    3368:	89 e1       	ldi	r24, 0x19	; 25
    336a:	93 e0       	ldi	r25, 0x03	; 3
    336c:	0e 94 a6 20 	call	0x414c	; 0x414c <_ZN6Output6toggleEv>
			Vibrationsmotor.on();
    3370:	87 e1       	ldi	r24, 0x17	; 23
    3372:	93 e0       	ldi	r25, 0x03	; 3
    3374:	0e 94 0b 20 	call	0x4016	; 0x4016 <_ZN6Output2onEv>
		}
		anzeige&=~(1<<refreshdisplay);
    3378:	80 91 03 03 	lds	r24, 0x0303
    337c:	90 91 04 03 	lds	r25, 0x0304
    3380:	9f 77       	andi	r25, 0x7F	; 127
    3382:	90 93 04 03 	sts	0x0304, r25
    3386:	80 93 03 03 	sts	0x0303, r24
	}
}
    338a:	df 91       	pop	r29
    338c:	cf 91       	pop	r28
    338e:	1f 91       	pop	r17
    3390:	0f 91       	pop	r16
    3392:	ff 90       	pop	r15
    3394:	ef 90       	pop	r14
    3396:	df 90       	pop	r13
    3398:	cf 90       	pop	r12
    339a:	bf 90       	pop	r11
    339c:	af 90       	pop	r10
    339e:	7f 90       	pop	r7
    33a0:	6f 90       	pop	r6
    33a2:	5f 90       	pop	r5
    33a4:	4f 90       	pop	r4
    33a6:	08 95       	ret

000033a8 <_Z14eingabehandlerh>:

void eingabehandler(uint8_t taste){
	if (taste!='A')
    33a8:	81 34       	cpi	r24, 0x41	; 65
    33aa:	09 f4       	brne	.+2      	; 0x33ae <_Z14eingabehandlerh+0x6>
    33ac:	18 c3       	rjmp	.+1584   	; 0x39de <_Z14eingabehandlerh+0x636>
	{
		if (anzeige==255)
    33ae:	20 91 03 03 	lds	r18, 0x0303
    33b2:	30 91 04 03 	lds	r19, 0x0304
    33b6:	2f 3f       	cpi	r18, 0xFF	; 255
    33b8:	31 05       	cpc	r19, r1
    33ba:	61 f4       	brne	.+24     	; 0x33d4 <_Z14eingabehandlerh+0x2c>
		{
			oled.ssd1306_command(SSD1306_DISPLAYON);
    33bc:	6f ea       	ldi	r22, 0xAF	; 175
    33be:	8c e1       	ldi	r24, 0x1C	; 28
    33c0:	93 e0       	ldi	r25, 0x03	; 3
    33c2:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <_ZN7Display15ssd1306_commandEh>
			//entweder display aus oder das Menue starten
			anzeige=(1<<menueflag);
    33c6:	80 e0       	ldi	r24, 0x00	; 0
    33c8:	90 e2       	ldi	r25, 0x20	; 32
    33ca:	90 93 04 03 	sts	0x0304, r25
    33ce:	80 93 03 03 	sts	0x0303, r24
    33d2:	08 95       	ret
    33d4:	a9 01       	movw	r20, r18
    33d6:	41 70       	andi	r20, 0x01	; 1
    33d8:	50 72       	andi	r21, 0x20	; 32
		}
		//gleicher Handler wie oben, aber hier speziell fuer die Bearbeitung von Tastereingaben mit switch fuer die Tasten
		//es sind einfach so viele Tasten moeglich 
		else if ((anzeige&(1<<menueflag)) && (anzeige&(1<<Uhrflag)))	//Menue der Uhr
    33da:	41 30       	cpi	r20, 0x01	; 1
    33dc:	50 42       	sbci	r21, 0x20	; 32
    33de:	09 f0       	breq	.+2      	; 0x33e2 <_Z14eingabehandlerh+0x3a>
    33e0:	52 c0       	rjmp	.+164    	; 0x3486 <_Z14eingabehandlerh+0xde>
		{	
			anzeige&=~((1<<menueflag)|(1<<Uhrflag));
    33e2:	2e 7f       	andi	r18, 0xFE	; 254
    33e4:	3f 7d       	andi	r19, 0xDF	; 223
    33e6:	30 93 04 03 	sts	0x0304, r19
    33ea:	20 93 03 03 	sts	0x0303, r18
			switch (taste)
    33ee:	83 33       	cpi	r24, 0x33	; 51
    33f0:	f1 f0       	breq	.+60     	; 0x342e <_Z14eingabehandlerh+0x86>
    33f2:	28 f4       	brcc	.+10     	; 0x33fe <_Z14eingabehandlerh+0x56>
    33f4:	81 33       	cpi	r24, 0x31	; 49
    33f6:	41 f0       	breq	.+16     	; 0x3408 <_Z14eingabehandlerh+0x60>
    33f8:	82 33       	cpi	r24, 0x32	; 50
    33fa:	61 f0       	breq	.+24     	; 0x3414 <_Z14eingabehandlerh+0x6c>
    33fc:	3d c0       	rjmp	.+122    	; 0x3478 <_Z14eingabehandlerh+0xd0>
    33fe:	84 33       	cpi	r24, 0x34	; 52
    3400:	11 f1       	breq	.+68     	; 0x3446 <_Z14eingabehandlerh+0x9e>
    3402:	85 33       	cpi	r24, 0x35	; 53
    3404:	71 f1       	breq	.+92     	; 0x3462 <_Z14eingabehandlerh+0xba>
    3406:	38 c0       	rjmp	.+112    	; 0x3478 <_Z14eingabehandlerh+0xd0>
			{
				case '1':
					//Wechseln auf die Uhr
					anzeige|=(1<<Uhrflag);
    3408:	21 60       	ori	r18, 0x01	; 1
    340a:	30 93 04 03 	sts	0x0304, r19
    340e:	20 93 03 03 	sts	0x0303, r18
					break;
    3412:	08 95       	ret
				
				case '2':
					//starten der Stoppuhr APP
					stoppuhr.Sekunden=0;
    3414:	10 92 2f 07 	sts	0x072F, r1
					stoppuhr.Minuten=0;
    3418:	10 92 2e 07 	sts	0x072E, r1
					stoppuhr.Stunden=0;
    341c:	10 92 2d 07 	sts	0x072D, r1
					anzeige|=(1<<refreshdisplay) | (1<<Stoppuhrflag);
    3420:	20 68       	ori	r18, 0x80	; 128
    3422:	30 68       	ori	r19, 0x80	; 128
    3424:	30 93 04 03 	sts	0x0304, r19
    3428:	20 93 03 03 	sts	0x0303, r18
					break;
    342c:	08 95       	ret
				
				case '3':
					//Starten der Timer APP
					zaehler.Sekunden=0;
    342e:	10 92 47 07 	sts	0x0747, r1
					zaehler.Minuten=0;
    3432:	10 92 46 07 	sts	0x0746, r1
					zaehler.Stunden=0;
    3436:	10 92 45 07 	sts	0x0745, r1
					
					anzeige|=(1<<Timerflag) | (1<<Einstellungsflag);
    343a:	28 64       	ori	r18, 0x48	; 72
    343c:	30 93 04 03 	sts	0x0304, r19
    3440:	20 93 03 03 	sts	0x0303, r18
					break;
    3444:	08 95       	ret
				
				case '4':
					//Starten der Alarmapp, momentan nicht implementiert
					oled.clearFrame();
    3446:	8c e1       	ldi	r24, 0x1C	; 28
    3448:	93 e0       	ldi	r25, 0x03	; 3
    344a:	0e 94 ed 02 	call	0x5da	; 0x5da <_ZN7Display10clearFrameEv>
					anzeige|=(1<<refreshdisplay);
    344e:	80 91 03 03 	lds	r24, 0x0303
    3452:	90 91 04 03 	lds	r25, 0x0304
    3456:	90 68       	ori	r25, 0x80	; 128
    3458:	90 93 04 03 	sts	0x0304, r25
    345c:	80 93 03 03 	sts	0x0303, r24
					break;
    3460:	08 95       	ret
				
				case '5':
					//Wechseln auf grosse Uhr
					rtc.interupts |=(1<<minuteninterupt);
    3462:	e4 e6       	ldi	r30, 0x64	; 100
    3464:	f7 e0       	ldi	r31, 0x07	; 7
    3466:	80 81       	ld	r24, Z
    3468:	84 60       	ori	r24, 0x04	; 4
    346a:	80 83       	st	Z, r24
					anzeige |=(1<<Uhrflaggross) | (1<<refreshdisplay);	
    346c:	34 68       	ori	r19, 0x84	; 132
    346e:	30 93 04 03 	sts	0x0304, r19
    3472:	20 93 03 03 	sts	0x0303, r18
					break;
    3476:	08 95       	ret
				
				default:
					//menueflag erneu setzen
					anzeige|=(1<<menueflag)|(1<<Uhrflag);
    3478:	21 60       	ori	r18, 0x01	; 1
    347a:	30 62       	ori	r19, 0x20	; 32
    347c:	30 93 04 03 	sts	0x0304, r19
    3480:	20 93 03 03 	sts	0x0303, r18
					break;
    3484:	8b c2       	rjmp	.+1302   	; 0x399c <_Z14eingabehandlerh+0x5f4>
    3486:	a9 01       	movw	r20, r18
    3488:	48 70       	andi	r20, 0x08	; 8
    348a:	50 72       	andi	r21, 0x20	; 32
			}
		}
		else if ((anzeige&(1<<menueflag)) && (anzeige&(1<<Einstellungsflag)))	//Menue der Einstellungen
    348c:	48 30       	cpi	r20, 0x08	; 8
    348e:	50 42       	sbci	r21, 0x20	; 32
    3490:	99 f5       	brne	.+102    	; 0x34f8 <_Z14eingabehandlerh+0x150>
		{
			anzeige&=~((1<<menueflag)|(1<<Einstellungsflag));
    3492:	27 7f       	andi	r18, 0xF7	; 247
    3494:	3f 7d       	andi	r19, 0xDF	; 223
    3496:	30 93 04 03 	sts	0x0304, r19
    349a:	20 93 03 03 	sts	0x0303, r18
			switch (taste)
    349e:	82 33       	cpi	r24, 0x32	; 50
    34a0:	91 f0       	breq	.+36     	; 0x34c6 <_Z14eingabehandlerh+0x11e>
    34a2:	83 33       	cpi	r24, 0x33	; 51
    34a4:	b1 f0       	breq	.+44     	; 0x34d2 <_Z14eingabehandlerh+0x12a>
    34a6:	81 33       	cpi	r24, 0x31	; 49
    34a8:	01 f5       	brne	.+64     	; 0x34ea <_Z14eingabehandlerh+0x142>
			{
				case '1':
					//zuruecksetzen der Kalibrierung, da passive Kallibrierung eingebaut
					kompass.kallibrierung_ruecksetzen();
    34aa:	85 e6       	ldi	r24, 0x65	; 101
    34ac:	97 e0       	ldi	r25, 0x07	; 7
    34ae:	0e 94 c6 1f 	call	0x3f8c	; 0x3f8c <_ZN7Kompass25kallibrierung_ruecksetzenEv>
					anzeige|=(1<<Kompasflag);
    34b2:	80 91 03 03 	lds	r24, 0x0303
    34b6:	90 91 04 03 	lds	r25, 0x0304
    34ba:	84 60       	ori	r24, 0x04	; 4
    34bc:	90 93 04 03 	sts	0x0304, r25
    34c0:	80 93 03 03 	sts	0x0303, r24
					break;
    34c4:	08 95       	ret
				case '2':
					//Gaineinstellung fuer den Kompass
					anzeige|=(1<<Kompasgaineinstellenflag);
    34c6:	20 62       	ori	r18, 0x20	; 32
    34c8:	30 93 04 03 	sts	0x0304, r19
    34cc:	20 93 03 03 	sts	0x0303, r18
					break;
    34d0:	08 95       	ret
				case '3':
					//dies ist eine der wenigen Funktinen, die die Handler Strucktur nicht anwenden, da sie die rtc anhaellt
					uhreinstellen();
    34d2:	0e 94 48 13 	call	0x2690	; 0x2690 <_Z13uhreinstellenv>
					anzeige|=(1<<Uhrflag);
    34d6:	80 91 03 03 	lds	r24, 0x0303
    34da:	90 91 04 03 	lds	r25, 0x0304
    34de:	81 60       	ori	r24, 0x01	; 1
    34e0:	90 93 04 03 	sts	0x0304, r25
    34e4:	80 93 03 03 	sts	0x0303, r24
					break;
    34e8:	08 95       	ret
				default:
					//Menueflag neu setzten
					anzeige|=(1<<menueflag)|(1<<Einstellungsflag);
    34ea:	28 60       	ori	r18, 0x08	; 8
    34ec:	30 62       	ori	r19, 0x20	; 32
    34ee:	30 93 04 03 	sts	0x0304, r19
    34f2:	20 93 03 03 	sts	0x0303, r18
					break;
    34f6:	52 c2       	rjmp	.+1188   	; 0x399c <_Z14eingabehandlerh+0x5f4>
			}
		}
		else if ((anzeige&(1<<menueflag)))	//nur das grosse menue
    34f8:	35 ff       	sbrs	r19, 5
    34fa:	58 c0       	rjmp	.+176    	; 0x35ac <_Z14eingabehandlerh+0x204>
		{
			anzeige&=~(1<<menueflag);
    34fc:	3f 7d       	andi	r19, 0xDF	; 223
    34fe:	30 93 04 03 	sts	0x0304, r19
    3502:	20 93 03 03 	sts	0x0303, r18
			switch (taste)
    3506:	48 2f       	mov	r20, r24
    3508:	50 e0       	ldi	r21, 0x00	; 0
    350a:	fa 01       	movw	r30, r20
    350c:	f1 97       	sbiw	r30, 0x31	; 49
    350e:	e7 30       	cpi	r30, 0x07	; 7
    3510:	f1 05       	cpc	r31, r1
    3512:	08 f0       	brcs	.+2      	; 0x3516 <_Z14eingabehandlerh+0x16e>
    3514:	45 c0       	rjmp	.+138    	; 0x35a0 <_Z14eingabehandlerh+0x1f8>
    3516:	e2 5c       	subi	r30, 0xC2	; 194
    3518:	ff 4f       	sbci	r31, 0xFF	; 255
    351a:	0c 94 b2 2a 	jmp	0x5564	; 0x5564 <__tablejump2__>
			{
				case '1':
					anzeige|=(1<<Fahradflag);
    351e:	22 60       	ori	r18, 0x02	; 2
    3520:	30 93 04 03 	sts	0x0304, r19
    3524:	20 93 03 03 	sts	0x0303, r18
					//starten des Timers fuer die geschwindigkeit
					TCCR1B |= ((1<<CS12) | (1<<CS10));
    3528:	e1 e8       	ldi	r30, 0x81	; 129
    352a:	f0 e0       	ldi	r31, 0x00	; 0
    352c:	80 81       	ld	r24, Z
    352e:	85 60       	ori	r24, 0x05	; 5
    3530:	80 83       	st	Z, r24
					break;
    3532:	08 95       	ret
				
				case '2':
					//Taschenrechner starten
					//Monentan deaktiv, da Umstellung der Handler 
					//operation(Flieskommazahleingabe());
					oled.clearFrame();
    3534:	8c e1       	ldi	r24, 0x1C	; 28
    3536:	93 e0       	ldi	r25, 0x03	; 3
    3538:	0e 94 ed 02 	call	0x5da	; 0x5da <_ZN7Display10clearFrameEv>
					anzeige|=(1<<refreshdisplay);	
    353c:	80 91 03 03 	lds	r24, 0x0303
    3540:	90 91 04 03 	lds	r25, 0x0304
    3544:	90 68       	ori	r25, 0x80	; 128
    3546:	90 93 04 03 	sts	0x0304, r25
    354a:	80 93 03 03 	sts	0x0303, r24
					break;
    354e:	08 95       	ret
				
				case '3':
					anzeige|=(1<<Kompasflag);
    3550:	24 60       	ori	r18, 0x04	; 4
    3552:	30 93 04 03 	sts	0x0304, r19
    3556:	20 93 03 03 	sts	0x0303, r18
					break;
    355a:	08 95       	ret
				
				case '4':
					//Menue der Uhr
					anzeige|=(1<<menueflag) | (1<<Uhrflag);
    355c:	21 60       	ori	r18, 0x01	; 1
    355e:	30 62       	ori	r19, 0x20	; 32
    3560:	30 93 04 03 	sts	0x0304, r19
    3564:	20 93 03 03 	sts	0x0303, r18
					break;
    3568:	08 95       	ret
				
				case '5':
					//menue der Einstellungen
					anzeige|=(1<<menueflag) | (1<<Einstellungsflag);
    356a:	28 60       	ori	r18, 0x08	; 8
    356c:	30 62       	ori	r19, 0x20	; 32
    356e:	30 93 04 03 	sts	0x0304, r19
    3572:	20 93 03 03 	sts	0x0303, r18
					break;
    3576:	08 95       	ret
				
				case '6':
					//Display ausschalten
					//anzeige=255;
					oled.clearFrame();
    3578:	8c e1       	ldi	r24, 0x1C	; 28
    357a:	93 e0       	ldi	r25, 0x03	; 3
    357c:	0e 94 ed 02 	call	0x5da	; 0x5da <_ZN7Display10clearFrameEv>
					anzeige|=(1<<refreshdisplay);
    3580:	80 91 03 03 	lds	r24, 0x0303
    3584:	90 91 04 03 	lds	r25, 0x0304
    3588:	90 68       	ori	r25, 0x80	; 128
    358a:	90 93 04 03 	sts	0x0304, r25
    358e:	80 93 03 03 	sts	0x0303, r24
					break;
    3592:	08 95       	ret
				case '7':
					anzeige |= (1<<Druckflag);
    3594:	32 60       	ori	r19, 0x02	; 2
    3596:	30 93 04 03 	sts	0x0304, r19
    359a:	20 93 03 03 	sts	0x0303, r18
					break;
    359e:	08 95       	ret
				default:
					//menueflag erneut setzen um abschalten zu verhindern
					anzeige|=(1<<menueflag);
    35a0:	30 62       	ori	r19, 0x20	; 32
    35a2:	30 93 04 03 	sts	0x0304, r19
    35a6:	20 93 03 03 	sts	0x0303, r18
					break;
    35aa:	f8 c1       	rjmp	.+1008   	; 0x399c <_Z14eingabehandlerh+0x5f4>
			}
		}
		else if ((anzeige&(1<<Kompasgaineinstellenflag)))
    35ac:	25 ff       	sbrs	r18, 5
    35ae:	51 c0       	rjmp	.+162    	; 0x3652 <_Z14eingabehandlerh+0x2aa>
		{
			anzeige&=~(1<<Kompasgaineinstellenflag);
    35b0:	a9 01       	movw	r20, r18
    35b2:	4f 7d       	andi	r20, 0xDF	; 223
			anzeige|=(1<<Kompasflag);
    35b4:	44 60       	ori	r20, 0x04	; 4
    35b6:	50 93 04 03 	sts	0x0304, r21
    35ba:	40 93 03 03 	sts	0x0303, r20
			switch (taste) {
    35be:	48 2f       	mov	r20, r24
    35c0:	50 e0       	ldi	r21, 0x00	; 0
    35c2:	fa 01       	movw	r30, r20
    35c4:	f1 97       	sbiw	r30, 0x31	; 49
    35c6:	e8 30       	cpi	r30, 0x08	; 8
    35c8:	f1 05       	cpc	r31, r1
    35ca:	e0 f5       	brcc	.+120    	; 0x3644 <_Z14eingabehandlerh+0x29c>
    35cc:	eb 5b       	subi	r30, 0xBB	; 187
    35ce:	ff 4f       	sbci	r31, 0xFF	; 255
    35d0:	0c 94 b2 2a 	jmp	0x5564	; 0x5564 <__tablejump2__>
				case '1':
					kompass.HMC5883L_command(0x01,HMCGAIN1370);
    35d4:	40 e0       	ldi	r20, 0x00	; 0
    35d6:	61 e0       	ldi	r22, 0x01	; 1
    35d8:	85 e6       	ldi	r24, 0x65	; 101
    35da:	97 e0       	ldi	r25, 0x07	; 7
    35dc:	0e 94 4b 1e 	call	0x3c96	; 0x3c96 <_ZN7Kompass16HMC5883L_commandEhh>
					break;
    35e0:	08 95       	ret
				case '2':
					kompass.HMC5883L_command(0x01,HMCGAIN1090);
    35e2:	40 e2       	ldi	r20, 0x20	; 32
    35e4:	61 e0       	ldi	r22, 0x01	; 1
    35e6:	85 e6       	ldi	r24, 0x65	; 101
    35e8:	97 e0       	ldi	r25, 0x07	; 7
    35ea:	0e 94 4b 1e 	call	0x3c96	; 0x3c96 <_ZN7Kompass16HMC5883L_commandEhh>
					break;
    35ee:	08 95       	ret
				case '3':
					kompass.HMC5883L_command(0x01,HMCGAIN820);
    35f0:	40 e4       	ldi	r20, 0x40	; 64
    35f2:	61 e0       	ldi	r22, 0x01	; 1
    35f4:	85 e6       	ldi	r24, 0x65	; 101
    35f6:	97 e0       	ldi	r25, 0x07	; 7
    35f8:	0e 94 4b 1e 	call	0x3c96	; 0x3c96 <_ZN7Kompass16HMC5883L_commandEhh>
					break;
    35fc:	08 95       	ret
				case '4':
					kompass.HMC5883L_command(0x01,HMCGAIN660);
    35fe:	40 e6       	ldi	r20, 0x60	; 96
    3600:	61 e0       	ldi	r22, 0x01	; 1
    3602:	85 e6       	ldi	r24, 0x65	; 101
    3604:	97 e0       	ldi	r25, 0x07	; 7
    3606:	0e 94 4b 1e 	call	0x3c96	; 0x3c96 <_ZN7Kompass16HMC5883L_commandEhh>
					break;
    360a:	08 95       	ret
				case '5':
					kompass.HMC5883L_command(0x01,HMCGAIN440);
    360c:	40 e8       	ldi	r20, 0x80	; 128
    360e:	61 e0       	ldi	r22, 0x01	; 1
    3610:	85 e6       	ldi	r24, 0x65	; 101
    3612:	97 e0       	ldi	r25, 0x07	; 7
    3614:	0e 94 4b 1e 	call	0x3c96	; 0x3c96 <_ZN7Kompass16HMC5883L_commandEhh>
					break;
    3618:	08 95       	ret
				case '6':
					kompass.HMC5883L_command(0x01,HMCGAIN390);
    361a:	40 ea       	ldi	r20, 0xA0	; 160
    361c:	61 e0       	ldi	r22, 0x01	; 1
    361e:	85 e6       	ldi	r24, 0x65	; 101
    3620:	97 e0       	ldi	r25, 0x07	; 7
    3622:	0e 94 4b 1e 	call	0x3c96	; 0x3c96 <_ZN7Kompass16HMC5883L_commandEhh>
					break;
    3626:	08 95       	ret
				case '7':
					kompass.HMC5883L_command(0x01,HMCGAIN330);
    3628:	40 ec       	ldi	r20, 0xC0	; 192
    362a:	61 e0       	ldi	r22, 0x01	; 1
    362c:	85 e6       	ldi	r24, 0x65	; 101
    362e:	97 e0       	ldi	r25, 0x07	; 7
    3630:	0e 94 4b 1e 	call	0x3c96	; 0x3c96 <_ZN7Kompass16HMC5883L_commandEhh>
					break;
    3634:	08 95       	ret
				case '8':
					kompass.HMC5883L_command(0x01,HMCGAIN230);
    3636:	40 ee       	ldi	r20, 0xE0	; 224
    3638:	61 e0       	ldi	r22, 0x01	; 1
    363a:	85 e6       	ldi	r24, 0x65	; 101
    363c:	97 e0       	ldi	r25, 0x07	; 7
    363e:	0e 94 4b 1e 	call	0x3c96	; 0x3c96 <_ZN7Kompass16HMC5883L_commandEhh>
					break;
    3642:	08 95       	ret
				default:
					anzeige &=~(1<<Kompasflag);
    3644:	2b 7d       	andi	r18, 0xDB	; 219
					anzeige|=(1<<Kompasgaineinstellenflag);
    3646:	20 62       	ori	r18, 0x20	; 32
    3648:	30 93 04 03 	sts	0x0304, r19
    364c:	20 93 03 03 	sts	0x0303, r18
					break;
    3650:	a5 c1       	rjmp	.+842    	; 0x399c <_Z14eingabehandlerh+0x5f4>
    3652:	a9 01       	movw	r20, r18
    3654:	48 74       	andi	r20, 0x48	; 72
    3656:	55 27       	eor	r21, r21
			}
		}
		else if ((anzeige&(1<<Einstellungsflag)) && (anzeige&(1<<Timerflag)))
    3658:	48 34       	cpi	r20, 0x48	; 72
    365a:	51 05       	cpc	r21, r1
    365c:	09 f0       	breq	.+2      	; 0x3660 <_Z14eingabehandlerh+0x2b8>
    365e:	87 c0       	rjmp	.+270    	; 0x376e <_Z14eingabehandlerh+0x3c6>
		{
			switch (pos)
    3660:	90 91 02 03 	lds	r25, 0x0302
    3664:	92 30       	cpi	r25, 0x02	; 2
    3666:	a9 f1       	breq	.+106    	; 0x36d2 <_Z14eingabehandlerh+0x32a>
    3668:	28 f4       	brcc	.+10     	; 0x3674 <_Z14eingabehandlerh+0x2cc>
    366a:	99 23       	and	r25, r25
    366c:	61 f0       	breq	.+24     	; 0x3686 <_Z14eingabehandlerh+0x2de>
    366e:	91 30       	cpi	r25, 0x01	; 1
    3670:	01 f1       	breq	.+64     	; 0x36b2 <_Z14eingabehandlerh+0x30a>
    3672:	94 c1       	rjmp	.+808    	; 0x399c <_Z14eingabehandlerh+0x5f4>
    3674:	94 30       	cpi	r25, 0x04	; 4
    3676:	09 f4       	brne	.+2      	; 0x367a <_Z14eingabehandlerh+0x2d2>
    3678:	52 c0       	rjmp	.+164    	; 0x371e <_Z14eingabehandlerh+0x376>
    367a:	08 f4       	brcc	.+2      	; 0x367e <_Z14eingabehandlerh+0x2d6>
    367c:	40 c0       	rjmp	.+128    	; 0x36fe <_Z14eingabehandlerh+0x356>
    367e:	95 30       	cpi	r25, 0x05	; 5
    3680:	09 f4       	brne	.+2      	; 0x3684 <_Z14eingabehandlerh+0x2dc>
    3682:	63 c0       	rjmp	.+198    	; 0x374a <_Z14eingabehandlerh+0x3a2>
    3684:	8b c1       	rjmp	.+790    	; 0x399c <_Z14eingabehandlerh+0x5f4>
			{
			case 0:
				switch (taste)
    3686:	83 32       	cpi	r24, 0x23	; 35
    3688:	09 f4       	brne	.+2      	; 0x368c <_Z14eingabehandlerh+0x2e4>
    368a:	88 c1       	rjmp	.+784    	; 0x399c <_Z14eingabehandlerh+0x5f4>
    368c:	8a 32       	cpi	r24, 0x2A	; 42
    368e:	09 f4       	brne	.+2      	; 0x3692 <_Z14eingabehandlerh+0x2ea>
    3690:	85 c1       	rjmp	.+778    	; 0x399c <_Z14eingabehandlerh+0x5f4>
					case '#':
						break;
					case '*':
						break;
					default:
						zaehler.Sekunden+=(taste-'0')*10;
    3692:	e7 e4       	ldi	r30, 0x47	; 71
    3694:	f7 e0       	ldi	r31, 0x07	; 7
    3696:	98 2f       	mov	r25, r24
    3698:	99 0f       	add	r25, r25
    369a:	90 56       	subi	r25, 0x60	; 96
    369c:	29 2f       	mov	r18, r25
    369e:	22 0f       	add	r18, r18
    36a0:	22 0f       	add	r18, r18
    36a2:	92 0f       	add	r25, r18
    36a4:	20 81       	ld	r18, Z
    36a6:	92 0f       	add	r25, r18
    36a8:	90 83       	st	Z, r25
						pos++;
    36aa:	91 e0       	ldi	r25, 0x01	; 1
    36ac:	90 93 02 03 	sts	0x0302, r25
						break;
    36b0:	75 c1       	rjmp	.+746    	; 0x399c <_Z14eingabehandlerh+0x5f4>
				}
				break;
			case 1:
				switch (taste)
    36b2:	83 32       	cpi	r24, 0x23	; 35
    36b4:	09 f4       	brne	.+2      	; 0x36b8 <_Z14eingabehandlerh+0x310>
    36b6:	72 c1       	rjmp	.+740    	; 0x399c <_Z14eingabehandlerh+0x5f4>
    36b8:	8a 32       	cpi	r24, 0x2A	; 42
    36ba:	09 f4       	brne	.+2      	; 0x36be <_Z14eingabehandlerh+0x316>
    36bc:	6f c1       	rjmp	.+734    	; 0x399c <_Z14eingabehandlerh+0x5f4>
					case '#':
					break;
					case '*':
					break;
					default:
					zaehler.Sekunden+=(taste-'0');
    36be:	e7 e4       	ldi	r30, 0x47	; 71
    36c0:	f7 e0       	ldi	r31, 0x07	; 7
    36c2:	90 81       	ld	r25, Z
    36c4:	90 53       	subi	r25, 0x30	; 48
    36c6:	98 0f       	add	r25, r24
    36c8:	90 83       	st	Z, r25
					pos++;
    36ca:	92 e0       	ldi	r25, 0x02	; 2
    36cc:	90 93 02 03 	sts	0x0302, r25
					break;
    36d0:	65 c1       	rjmp	.+714    	; 0x399c <_Z14eingabehandlerh+0x5f4>
				}
				break;
			case 2:
				switch (taste)
    36d2:	83 32       	cpi	r24, 0x23	; 35
    36d4:	09 f4       	brne	.+2      	; 0x36d8 <_Z14eingabehandlerh+0x330>
    36d6:	62 c1       	rjmp	.+708    	; 0x399c <_Z14eingabehandlerh+0x5f4>
    36d8:	8a 32       	cpi	r24, 0x2A	; 42
    36da:	09 f4       	brne	.+2      	; 0x36de <_Z14eingabehandlerh+0x336>
    36dc:	5f c1       	rjmp	.+702    	; 0x399c <_Z14eingabehandlerh+0x5f4>
					case '#':
					break;
					case '*':
					break;
					default:
					zaehler.Minuten+=(taste-'0')*10;
    36de:	e6 e4       	ldi	r30, 0x46	; 70
    36e0:	f7 e0       	ldi	r31, 0x07	; 7
    36e2:	98 2f       	mov	r25, r24
    36e4:	99 0f       	add	r25, r25
    36e6:	90 56       	subi	r25, 0x60	; 96
    36e8:	29 2f       	mov	r18, r25
    36ea:	22 0f       	add	r18, r18
    36ec:	22 0f       	add	r18, r18
    36ee:	92 0f       	add	r25, r18
    36f0:	20 81       	ld	r18, Z
    36f2:	92 0f       	add	r25, r18
    36f4:	90 83       	st	Z, r25
					pos++;
    36f6:	93 e0       	ldi	r25, 0x03	; 3
    36f8:	90 93 02 03 	sts	0x0302, r25
					break;
    36fc:	4f c1       	rjmp	.+670    	; 0x399c <_Z14eingabehandlerh+0x5f4>
				}
				break;
			case 3:
				switch (taste)
    36fe:	83 32       	cpi	r24, 0x23	; 35
    3700:	09 f4       	brne	.+2      	; 0x3704 <_Z14eingabehandlerh+0x35c>
    3702:	4c c1       	rjmp	.+664    	; 0x399c <_Z14eingabehandlerh+0x5f4>
    3704:	8a 32       	cpi	r24, 0x2A	; 42
    3706:	09 f4       	brne	.+2      	; 0x370a <_Z14eingabehandlerh+0x362>
    3708:	49 c1       	rjmp	.+658    	; 0x399c <_Z14eingabehandlerh+0x5f4>
					case '#':
					break;
					case '*':
					break;
					default:
					zaehler.Minuten+=(taste-'0');
    370a:	e6 e4       	ldi	r30, 0x46	; 70
    370c:	f7 e0       	ldi	r31, 0x07	; 7
    370e:	90 81       	ld	r25, Z
    3710:	90 53       	subi	r25, 0x30	; 48
    3712:	98 0f       	add	r25, r24
    3714:	90 83       	st	Z, r25
					pos++;
    3716:	94 e0       	ldi	r25, 0x04	; 4
    3718:	90 93 02 03 	sts	0x0302, r25
					break;
    371c:	3f c1       	rjmp	.+638    	; 0x399c <_Z14eingabehandlerh+0x5f4>
				}
				break;
			case 4:
				switch (taste)
    371e:	83 32       	cpi	r24, 0x23	; 35
    3720:	09 f4       	brne	.+2      	; 0x3724 <_Z14eingabehandlerh+0x37c>
    3722:	3c c1       	rjmp	.+632    	; 0x399c <_Z14eingabehandlerh+0x5f4>
    3724:	8a 32       	cpi	r24, 0x2A	; 42
    3726:	09 f4       	brne	.+2      	; 0x372a <_Z14eingabehandlerh+0x382>
    3728:	39 c1       	rjmp	.+626    	; 0x399c <_Z14eingabehandlerh+0x5f4>
					case '#':
					break;
					case '*':
					break;
					default:
					zaehler.Stunden+=(taste-'0')*10;
    372a:	e5 e4       	ldi	r30, 0x45	; 69
    372c:	f7 e0       	ldi	r31, 0x07	; 7
    372e:	98 2f       	mov	r25, r24
    3730:	99 0f       	add	r25, r25
    3732:	90 56       	subi	r25, 0x60	; 96
    3734:	29 2f       	mov	r18, r25
    3736:	22 0f       	add	r18, r18
    3738:	22 0f       	add	r18, r18
    373a:	92 0f       	add	r25, r18
    373c:	20 81       	ld	r18, Z
    373e:	92 0f       	add	r25, r18
    3740:	90 83       	st	Z, r25
					pos++;
    3742:	95 e0       	ldi	r25, 0x05	; 5
    3744:	90 93 02 03 	sts	0x0302, r25
					break;
    3748:	29 c1       	rjmp	.+594    	; 0x399c <_Z14eingabehandlerh+0x5f4>
				}
				break;
			case 5:
				switch (taste)
    374a:	83 32       	cpi	r24, 0x23	; 35
    374c:	41 f0       	breq	.+16     	; 0x375e <_Z14eingabehandlerh+0x3b6>
    374e:	8a 32       	cpi	r24, 0x2A	; 42
    3750:	31 f0       	breq	.+12     	; 0x375e <_Z14eingabehandlerh+0x3b6>
					case '#':
					break;
					case '*':
					break;
					default:
					zaehler.Stunden+=(taste-'0');
    3752:	e5 e4       	ldi	r30, 0x45	; 69
    3754:	f7 e0       	ldi	r31, 0x07	; 7
    3756:	90 81       	ld	r25, Z
    3758:	90 53       	subi	r25, 0x30	; 48
    375a:	98 0f       	add	r25, r24
    375c:	90 83       	st	Z, r25
					pos++;
					break;
				}
				pos=0;
    375e:	10 92 02 03 	sts	0x0302, r1
				anzeige&=~(1<<Einstellungsflag);
    3762:	27 7f       	andi	r18, 0xF7	; 247
    3764:	30 93 04 03 	sts	0x0304, r19
    3768:	20 93 03 03 	sts	0x0303, r18
				break;
    376c:	17 c1       	rjmp	.+558    	; 0x399c <_Z14eingabehandlerh+0x5f4>
			}
		}
		else if ((anzeige&(1<<Stoppuhrflag)))
    376e:	27 ff       	sbrs	r18, 7
    3770:	23 c0       	rjmp	.+70     	; 0x37b8 <_Z14eingabehandlerh+0x410>
		{
			if (taste=='*')
    3772:	8a 32       	cpi	r24, 0x2A	; 42
    3774:	71 f4       	brne	.+28     	; 0x3792 <_Z14eingabehandlerh+0x3ea>
			{
				if ((anzeige&(1<<Einstellungsflag)))
    3776:	23 ff       	sbrs	r18, 3
    3778:	06 c0       	rjmp	.+12     	; 0x3786 <_Z14eingabehandlerh+0x3de>
				{
					anzeige&=~(1<<Einstellungsflag);
    377a:	27 7f       	andi	r18, 0xF7	; 247
    377c:	30 93 04 03 	sts	0x0304, r19
    3780:	20 93 03 03 	sts	0x0303, r18
    3784:	26 c1       	rjmp	.+588    	; 0x39d2 <_Z14eingabehandlerh+0x62a>
				}
				else{
					anzeige|=(1<<Einstellungsflag);
    3786:	28 60       	ori	r18, 0x08	; 8
    3788:	30 93 04 03 	sts	0x0304, r19
    378c:	20 93 03 03 	sts	0x0303, r18
    3790:	20 c1       	rjmp	.+576    	; 0x39d2 <_Z14eingabehandlerh+0x62a>
				}
			}
			else if (taste=='0')
    3792:	80 33       	cpi	r24, 0x30	; 48
    3794:	39 f4       	brne	.+14     	; 0x37a4 <_Z14eingabehandlerh+0x3fc>
			{
				stoppuhr.Sekunden=0;
    3796:	10 92 2f 07 	sts	0x072F, r1
				stoppuhr.Minuten=0;
    379a:	10 92 2e 07 	sts	0x072E, r1
				stoppuhr.Stunden=0;
    379e:	10 92 2d 07 	sts	0x072D, r1
    37a2:	08 95       	ret
			}
			else if (taste=='#')
    37a4:	83 32       	cpi	r24, 0x23	; 35
    37a6:	09 f0       	breq	.+2      	; 0x37aa <_Z14eingabehandlerh+0x402>
    37a8:	1a c1       	rjmp	.+564    	; 0x39de <_Z14eingabehandlerh+0x636>
			{
				anzeige&=~((1<<Stoppuhrflag)|(1<<Einstellungsflag));
    37aa:	27 77       	andi	r18, 0x77	; 119
				anzeige|=(1<<menueflag);
    37ac:	30 62       	ori	r19, 0x20	; 32
    37ae:	30 93 04 03 	sts	0x0304, r19
    37b2:	20 93 03 03 	sts	0x0303, r18
    37b6:	08 95       	ret
			}
		}
		else if ((anzeige&(1<<Uhrflag)))
    37b8:	20 ff       	sbrs	r18, 0
    37ba:	1c c0       	rjmp	.+56     	; 0x37f4 <_Z14eingabehandlerh+0x44c>
		{
			if (taste=='#')
    37bc:	83 32       	cpi	r24, 0x23	; 35
    37be:	39 f4       	brne	.+14     	; 0x37ce <_Z14eingabehandlerh+0x426>
			{
				anzeige&=~(1<<Uhrflag);
    37c0:	2e 7f       	andi	r18, 0xFE	; 254
				anzeige|=(1<<menueflag);
    37c2:	30 62       	ori	r19, 0x20	; 32
    37c4:	30 93 04 03 	sts	0x0304, r19
    37c8:	20 93 03 03 	sts	0x0303, r18
    37cc:	08 95       	ret
			}
			else if (taste=='0')
    37ce:	80 33       	cpi	r24, 0x30	; 48
    37d0:	09 f0       	breq	.+2      	; 0x37d4 <_Z14eingabehandlerh+0x42c>
    37d2:	e4 c0       	rjmp	.+456    	; 0x399c <_Z14eingabehandlerh+0x5f4>
			{
				if (LED.ison())
    37d4:	89 e1       	ldi	r24, 0x19	; 25
    37d6:	93 e0       	ldi	r25, 0x03	; 3
    37d8:	0e 94 3f 20 	call	0x407e	; 0x407e <_ZN6Output4isonEv>
    37dc:	88 23       	and	r24, r24
    37de:	29 f0       	breq	.+10     	; 0x37ea <_Z14eingabehandlerh+0x442>
				{
					LED.off();
    37e0:	89 e1       	ldi	r24, 0x19	; 25
    37e2:	93 e0       	ldi	r25, 0x03	; 3
    37e4:	0e 94 6f 20 	call	0x40de	; 0x40de <_ZN6Output3offEv>
    37e8:	08 95       	ret
				}
				else{
					LED.on();
    37ea:	89 e1       	ldi	r24, 0x19	; 25
    37ec:	93 e0       	ldi	r25, 0x03	; 3
    37ee:	0e 94 0b 20 	call	0x4016	; 0x4016 <_ZN6Output2onEv>
    37f2:	08 95       	ret
				}
			}
		}
		else if ((anzeige&(1<<Kompasflag)))
    37f4:	22 ff       	sbrs	r18, 2
    37f6:	1c c0       	rjmp	.+56     	; 0x3830 <_Z14eingabehandlerh+0x488>
		{
			if (taste=='#')
    37f8:	83 32       	cpi	r24, 0x23	; 35
    37fa:	39 f4       	brne	.+14     	; 0x380a <_Z14eingabehandlerh+0x462>
			{
				anzeige&=~(1<<Kompasflag);
    37fc:	2b 7f       	andi	r18, 0xFB	; 251
				anzeige|=(1<<menueflag);
    37fe:	30 62       	ori	r19, 0x20	; 32
    3800:	30 93 04 03 	sts	0x0304, r19
    3804:	20 93 03 03 	sts	0x0303, r18
    3808:	08 95       	ret
			}
			else if (taste=='0')
    380a:	80 33       	cpi	r24, 0x30	; 48
    380c:	09 f0       	breq	.+2      	; 0x3810 <_Z14eingabehandlerh+0x468>
    380e:	c6 c0       	rjmp	.+396    	; 0x399c <_Z14eingabehandlerh+0x5f4>
			{
				if (LED.ison())
    3810:	89 e1       	ldi	r24, 0x19	; 25
    3812:	93 e0       	ldi	r25, 0x03	; 3
    3814:	0e 94 3f 20 	call	0x407e	; 0x407e <_ZN6Output4isonEv>
    3818:	88 23       	and	r24, r24
    381a:	29 f0       	breq	.+10     	; 0x3826 <_Z14eingabehandlerh+0x47e>
				{
					LED.off();
    381c:	89 e1       	ldi	r24, 0x19	; 25
    381e:	93 e0       	ldi	r25, 0x03	; 3
    3820:	0e 94 6f 20 	call	0x40de	; 0x40de <_ZN6Output3offEv>
    3824:	08 95       	ret
				}
				else{
					LED.on();
    3826:	89 e1       	ldi	r24, 0x19	; 25
    3828:	93 e0       	ldi	r25, 0x03	; 3
    382a:	0e 94 0b 20 	call	0x4016	; 0x4016 <_ZN6Output2onEv>
    382e:	08 95       	ret
				}
			}
		}
		else if ((anzeige&(1<<Fahradflag)))
    3830:	21 ff       	sbrs	r18, 1
    3832:	3d c0       	rjmp	.+122    	; 0x38ae <_Z14eingabehandlerh+0x506>
		{
			if (taste=='#')
    3834:	83 32       	cpi	r24, 0x23	; 35
    3836:	69 f4       	brne	.+26     	; 0x3852 <_Z14eingabehandlerh+0x4aa>
			{
				anzeige&=~(1<<Fahradflag);
    3838:	c9 01       	movw	r24, r18
    383a:	8d 7f       	andi	r24, 0xFD	; 253
				anzeige|=(1<<menueflag);
    383c:	90 62       	ori	r25, 0x20	; 32
    383e:	90 93 04 03 	sts	0x0304, r25
    3842:	80 93 03 03 	sts	0x0303, r24
				TCCR1B &= ~((1<<CS12) | (1<<CS10));
    3846:	e1 e8       	ldi	r30, 0x81	; 129
    3848:	f0 e0       	ldi	r31, 0x00	; 0
    384a:	80 81       	ld	r24, Z
    384c:	8a 7f       	andi	r24, 0xFA	; 250
    384e:	80 83       	st	Z, r24
    3850:	08 95       	ret
			}
			else if (taste=='*')
    3852:	8a 32       	cpi	r24, 0x2A	; 42
    3854:	c9 f4       	brne	.+50     	; 0x3888 <_Z14eingabehandlerh+0x4e0>
			{
				maxgeschw = 0;
    3856:	10 92 f6 02 	sts	0x02F6, r1
    385a:	10 92 f7 02 	sts	0x02F7, r1
    385e:	10 92 f8 02 	sts	0x02F8, r1
    3862:	10 92 f9 02 	sts	0x02F9, r1
				strecke = 0;
    3866:	10 92 fa 02 	sts	0x02FA, r1
    386a:	10 92 fb 02 	sts	0x02FB, r1
    386e:	10 92 fc 02 	sts	0x02FC, r1
    3872:	10 92 fd 02 	sts	0x02FD, r1
				Fahrtzeit = 0;
    3876:	10 92 f2 02 	sts	0x02F2, r1
    387a:	10 92 f3 02 	sts	0x02F3, r1
    387e:	10 92 f4 02 	sts	0x02F4, r1
    3882:	10 92 f5 02 	sts	0x02F5, r1
    3886:	a5 c0       	rjmp	.+330    	; 0x39d2 <_Z14eingabehandlerh+0x62a>
			}
			else if (taste=='0')
    3888:	80 33       	cpi	r24, 0x30	; 48
    388a:	09 f0       	breq	.+2      	; 0x388e <_Z14eingabehandlerh+0x4e6>
    388c:	a8 c0       	rjmp	.+336    	; 0x39de <_Z14eingabehandlerh+0x636>
			{
				if (LED.ison())
    388e:	89 e1       	ldi	r24, 0x19	; 25
    3890:	93 e0       	ldi	r25, 0x03	; 3
    3892:	0e 94 3f 20 	call	0x407e	; 0x407e <_ZN6Output4isonEv>
    3896:	88 23       	and	r24, r24
    3898:	29 f0       	breq	.+10     	; 0x38a4 <_Z14eingabehandlerh+0x4fc>
				{
					LED.off();
    389a:	89 e1       	ldi	r24, 0x19	; 25
    389c:	93 e0       	ldi	r25, 0x03	; 3
    389e:	0e 94 6f 20 	call	0x40de	; 0x40de <_ZN6Output3offEv>
    38a2:	08 95       	ret
				}
				else{
					LED.on();
    38a4:	89 e1       	ldi	r24, 0x19	; 25
    38a6:	93 e0       	ldi	r25, 0x03	; 3
    38a8:	0e 94 0b 20 	call	0x4016	; 0x4016 <_ZN6Output2onEv>
    38ac:	08 95       	ret
				}
			}
		}
		else if ((anzeige&(1<<Druckflag)))
    38ae:	31 ff       	sbrs	r19, 1
    38b0:	2c c0       	rjmp	.+88     	; 0x390a <_Z14eingabehandlerh+0x562>
		{
			if (taste=='#')
    38b2:	83 32       	cpi	r24, 0x23	; 35
    38b4:	41 f4       	brne	.+16     	; 0x38c6 <_Z14eingabehandlerh+0x51e>
			{
				anzeige&=~(1<<Druckflag);
    38b6:	c9 01       	movw	r24, r18
    38b8:	9d 7f       	andi	r25, 0xFD	; 253
				anzeige|=(1<<menueflag);
    38ba:	90 62       	ori	r25, 0x20	; 32
    38bc:	90 93 04 03 	sts	0x0304, r25
    38c0:	80 93 03 03 	sts	0x0303, r24
    38c4:	08 95       	ret
			}
			else if (taste=='*')
    38c6:	8a 32       	cpi	r24, 0x2A	; 42
    38c8:	69 f4       	brne	.+26     	; 0x38e4 <_Z14eingabehandlerh+0x53c>
			{
				Baro.set_Pressure0(Baro.Press);
    38ca:	40 91 09 03 	lds	r20, 0x0309
    38ce:	50 91 0a 03 	lds	r21, 0x030A
    38d2:	60 91 0b 03 	lds	r22, 0x030B
    38d6:	70 91 0c 03 	lds	r23, 0x030C
    38da:	89 e0       	ldi	r24, 0x09	; 9
    38dc:	93 e0       	ldi	r25, 0x03	; 3
    38de:	0e 94 71 22 	call	0x44e2	; 0x44e2 <_ZN8Pressure13set_Pressure0Ed>
    38e2:	77 c0       	rjmp	.+238    	; 0x39d2 <_Z14eingabehandlerh+0x62a>
			}
			else if (taste=='0')
    38e4:	80 33       	cpi	r24, 0x30	; 48
    38e6:	09 f0       	breq	.+2      	; 0x38ea <_Z14eingabehandlerh+0x542>
    38e8:	7a c0       	rjmp	.+244    	; 0x39de <_Z14eingabehandlerh+0x636>
			{
				if (LED.ison())
    38ea:	89 e1       	ldi	r24, 0x19	; 25
    38ec:	93 e0       	ldi	r25, 0x03	; 3
    38ee:	0e 94 3f 20 	call	0x407e	; 0x407e <_ZN6Output4isonEv>
    38f2:	88 23       	and	r24, r24
    38f4:	29 f0       	breq	.+10     	; 0x3900 <_Z14eingabehandlerh+0x558>
				{
					LED.off();
    38f6:	89 e1       	ldi	r24, 0x19	; 25
    38f8:	93 e0       	ldi	r25, 0x03	; 3
    38fa:	0e 94 6f 20 	call	0x40de	; 0x40de <_ZN6Output3offEv>
    38fe:	08 95       	ret
				}
				else{
					LED.on();
    3900:	89 e1       	ldi	r24, 0x19	; 25
    3902:	93 e0       	ldi	r25, 0x03	; 3
    3904:	0e 94 0b 20 	call	0x4016	; 0x4016 <_ZN6Output2onEv>
    3908:	08 95       	ret
				}
			}
		}
		else if ((anzeige&(1<<Timerflag)))
    390a:	26 ff       	sbrs	r18, 6
    390c:	20 c0       	rjmp	.+64     	; 0x394e <_Z14eingabehandlerh+0x5a6>
		{
			if (taste=='#')
    390e:	83 32       	cpi	r24, 0x23	; 35
    3910:	09 f0       	breq	.+2      	; 0x3914 <_Z14eingabehandlerh+0x56c>
    3912:	44 c0       	rjmp	.+136    	; 0x399c <_Z14eingabehandlerh+0x5f4>
			{
				anzeige&=~((1<<Timerflag)|(1<<blinkflag));
    3914:	2f 7b       	andi	r18, 0xBF	; 191
    3916:	3f 7b       	andi	r19, 0xBF	; 191
    3918:	30 93 04 03 	sts	0x0304, r19
    391c:	20 93 03 03 	sts	0x0303, r18
				oled.invert(0);	//fuer den Fall, dass es invertiert blieb (50% der Faelle)
    3920:	60 e0       	ldi	r22, 0x00	; 0
    3922:	8c e1       	ldi	r24, 0x1C	; 28
    3924:	93 e0       	ldi	r25, 0x03	; 3
    3926:	0e 94 89 03 	call	0x712	; 0x712 <_ZN7Display6invertEh>
				LED.off();
    392a:	89 e1       	ldi	r24, 0x19	; 25
    392c:	93 e0       	ldi	r25, 0x03	; 3
    392e:	0e 94 6f 20 	call	0x40de	; 0x40de <_ZN6Output3offEv>
				Vibrationsmotor.off();
    3932:	87 e1       	ldi	r24, 0x17	; 23
    3934:	93 e0       	ldi	r25, 0x03	; 3
    3936:	0e 94 6f 20 	call	0x40de	; 0x40de <_ZN6Output3offEv>
				
				anzeige|=(1<<menueflag);
    393a:	80 91 03 03 	lds	r24, 0x0303
    393e:	90 91 04 03 	lds	r25, 0x0304
    3942:	90 62       	ori	r25, 0x20	; 32
    3944:	90 93 04 03 	sts	0x0304, r25
    3948:	80 93 03 03 	sts	0x0303, r24
    394c:	08 95       	ret
			}
		}
		else if ((anzeige&(1<<Uhrflaggross)))
    394e:	32 ff       	sbrs	r19, 2
    3950:	1c c0       	rjmp	.+56     	; 0x398a <_Z14eingabehandlerh+0x5e2>
		{
			if (taste=='#')
    3952:	83 32       	cpi	r24, 0x23	; 35
    3954:	41 f4       	brne	.+16     	; 0x3966 <_Z14eingabehandlerh+0x5be>
			{
				anzeige&=~(1<<Uhrflaggross);
    3956:	c9 01       	movw	r24, r18
    3958:	9b 7f       	andi	r25, 0xFB	; 251
				anzeige|=(1<<menueflag);
    395a:	90 62       	ori	r25, 0x20	; 32
    395c:	90 93 04 03 	sts	0x0304, r25
    3960:	80 93 03 03 	sts	0x0303, r24
    3964:	08 95       	ret
			}
			else if (taste=='0')
    3966:	80 33       	cpi	r24, 0x30	; 48
    3968:	c9 f4       	brne	.+50     	; 0x399c <_Z14eingabehandlerh+0x5f4>
			{
				if (LED.ison())
    396a:	89 e1       	ldi	r24, 0x19	; 25
    396c:	93 e0       	ldi	r25, 0x03	; 3
    396e:	0e 94 3f 20 	call	0x407e	; 0x407e <_ZN6Output4isonEv>
    3972:	88 23       	and	r24, r24
    3974:	29 f0       	breq	.+10     	; 0x3980 <_Z14eingabehandlerh+0x5d8>
				{
					LED.off();
    3976:	89 e1       	ldi	r24, 0x19	; 25
    3978:	93 e0       	ldi	r25, 0x03	; 3
    397a:	0e 94 6f 20 	call	0x40de	; 0x40de <_ZN6Output3offEv>
    397e:	08 95       	ret
				}
				else{
					LED.on();
    3980:	89 e1       	ldi	r24, 0x19	; 25
    3982:	93 e0       	ldi	r25, 0x03	; 3
    3984:	0e 94 0b 20 	call	0x4016	; 0x4016 <_ZN6Output2onEv>
    3988:	08 95       	ret
				}
			}
		}
		else if (anzeige==0)
    398a:	23 2b       	or	r18, r19
    398c:	39 f4       	brne	.+14     	; 0x399c <_Z14eingabehandlerh+0x5f4>
		{
			anzeige|=(1<<menueflag);
    398e:	80 e0       	ldi	r24, 0x00	; 0
    3990:	90 e2       	ldi	r25, 0x20	; 32
    3992:	90 93 04 03 	sts	0x0304, r25
    3996:	80 93 03 03 	sts	0x0303, r24
    399a:	08 95       	ret
		}
		if ((anzeige&(1<<blinkflag)))
    399c:	20 91 03 03 	lds	r18, 0x0303
    39a0:	30 91 04 03 	lds	r19, 0x0304
    39a4:	36 ff       	sbrs	r19, 6
    39a6:	1b c0       	rjmp	.+54     	; 0x39de <_Z14eingabehandlerh+0x636>
		{
			if (taste=='*')
    39a8:	8a 32       	cpi	r24, 0x2A	; 42
    39aa:	c9 f4       	brne	.+50     	; 0x39de <_Z14eingabehandlerh+0x636>
			{
				anzeige &=~(1<<blinkflag);
    39ac:	3f 7b       	andi	r19, 0xBF	; 191
    39ae:	30 93 04 03 	sts	0x0304, r19
    39b2:	20 93 03 03 	sts	0x0303, r18
				oled.invert(0);	//fuer den Fall, dass es invertiert blieb (50% der Faelle)
    39b6:	60 e0       	ldi	r22, 0x00	; 0
    39b8:	8c e1       	ldi	r24, 0x1C	; 28
    39ba:	93 e0       	ldi	r25, 0x03	; 3
    39bc:	0e 94 89 03 	call	0x712	; 0x712 <_ZN7Display6invertEh>
				LED.off();
    39c0:	89 e1       	ldi	r24, 0x19	; 25
    39c2:	93 e0       	ldi	r25, 0x03	; 3
    39c4:	0e 94 6f 20 	call	0x40de	; 0x40de <_ZN6Output3offEv>
				Vibrationsmotor.off();
    39c8:	87 e1       	ldi	r24, 0x17	; 23
    39ca:	93 e0       	ldi	r25, 0x03	; 3
    39cc:	0e 94 6f 20 	call	0x40de	; 0x40de <_ZN6Output3offEv>
    39d0:	08 95       	ret
		}
		else if (anzeige==0)
		{
			anzeige|=(1<<menueflag);
		}
		if ((anzeige&(1<<blinkflag)))
    39d2:	20 91 03 03 	lds	r18, 0x0303
    39d6:	30 91 04 03 	lds	r19, 0x0304
    39da:	36 fd       	sbrc	r19, 6
    39dc:	e7 cf       	rjmp	.-50     	; 0x39ac <_Z14eingabehandlerh+0x604>
    39de:	08 95       	ret

000039e0 <main>:
void eingabehandler(uint8_t taste);

int main(void)
{
	//initialisierung
	initialisierung();
    39e0:	0e 94 a2 17 	call	0x2f44	; 0x2f44 <_Z15initialisierungv>
	
    while(1)
    {
		//Steuerung der interupts durch Handler
		maininterupthandler();
    39e4:	0e 94 0a 18 	call	0x3014	; 0x3014 <_Z19maininterupthandlerv>
		//Steuerung der Anzeige alle Sekunde zur aktualisierung maximale Aktulisierungsrate ist 1Hz
		anzeigehandler();
    39e8:	0e 94 1c 18 	call	0x3038	; 0x3038 <_Z14anzeigehandlerv>
		//Tasthandler
		eingabehandler(Tastatur.Taster());
    39ec:	8b e1       	ldi	r24, 0x1B	; 27
    39ee:	93 e0       	ldi	r25, 0x03	; 3
    39f0:	0e 94 a1 1d 	call	0x3b42	; 0x3b42 <_ZN9Interface6TasterEv>
    39f4:	0e 94 d4 19 	call	0x33a8	; 0x33a8 <_Z14eingabehandlerh>
    39f8:	f5 cf       	rjmp	.-22     	; 0x39e4 <main+0x4>

000039fa <_GLOBAL__sub_I_kompass>:
#include <stdlib.h>
#include <stdio.h>
#include <avr/interrupt.h>

#include "Kompass.h"
Kompass kompass;
    39fa:	85 e6       	ldi	r24, 0x65	; 101
    39fc:	97 e0       	ldi	r25, 0x07	; 7
    39fe:	0e 94 6a 1e 	call	0x3cd4	; 0x3cd4 <_ZN7KompassC1Ev>

#include "RTC.h"
RTC rtc;
    3a02:	8d e4       	ldi	r24, 0x4D	; 77
    3a04:	97 e0       	ldi	r25, 0x07	; 7
    3a06:	0e 94 ea 22 	call	0x45d4	; 0x45d4 <_ZN3RTCC1Ev>
RTC zaehler;
    3a0a:	85 e3       	ldi	r24, 0x35	; 53
    3a0c:	97 e0       	ldi	r25, 0x07	; 7
    3a0e:	0e 94 ea 22 	call	0x45d4	; 0x45d4 <_ZN3RTCC1Ev>
RTC stoppuhr;
    3a12:	8d e1       	ldi	r24, 0x1D	; 29
    3a14:	97 e0       	ldi	r25, 0x07	; 7
    3a16:	0e 94 ea 22 	call	0x45d4	; 0x45d4 <_ZN3RTCC1Ev>

#include "Display.h"
Display oled;
    3a1a:	8c e1       	ldi	r24, 0x1C	; 28
    3a1c:	93 e0       	ldi	r25, 0x03	; 3
    3a1e:	0e 94 7d 03 	call	0x6fa	; 0x6fa <_ZN7DisplayC1Ev>

#include "Interface.h"
Interface Tastatur;
    3a22:	8b e1       	ldi	r24, 0x1B	; 27
    3a24:	93 e0       	ldi	r25, 0x03	; 3
    3a26:	0e 94 79 1d 	call	0x3af2	; 0x3af2 <_ZN9InterfaceC1Ev>

#include "Output.h"
Output LED('D',PORTD7);
    3a2a:	47 e0       	ldi	r20, 0x07	; 7
    3a2c:	64 e4       	ldi	r22, 0x44	; 68
    3a2e:	89 e1       	ldi	r24, 0x19	; 25
    3a30:	93 e0       	ldi	r25, 0x03	; 3
    3a32:	0e 94 da 1f 	call	0x3fb4	; 0x3fb4 <_ZN6OutputC1Ehh>
Output Vibrationsmotor('B',PORTB0);
    3a36:	40 e0       	ldi	r20, 0x00	; 0
    3a38:	62 e4       	ldi	r22, 0x42	; 66
    3a3a:	87 e1       	ldi	r24, 0x17	; 23
    3a3c:	93 e0       	ldi	r25, 0x03	; 3
    3a3e:	0e 94 da 1f 	call	0x3fb4	; 0x3fb4 <_ZN6OutputC1Ehh>

#include "Pressure.h"
Pressure Baro;
    3a42:	89 e0       	ldi	r24, 0x09	; 9
    3a44:	93 e0       	ldi	r25, 0x03	; 3
    3a46:	0e 94 1c 21 	call	0x4238	; 0x4238 <_ZN8PressureC1Ev>
    3a4a:	08 95       	ret

00003a4c <_GLOBAL__sub_D_kompass>:
    3a4c:	89 e0       	ldi	r24, 0x09	; 9
    3a4e:	93 e0       	ldi	r25, 0x03	; 3
    3a50:	0e 94 e0 20 	call	0x41c0	; 0x41c0 <_ZN8PressureD1Ev>
#include "Interface.h"
Interface Tastatur;

#include "Output.h"
Output LED('D',PORTD7);
Output Vibrationsmotor('B',PORTB0);
    3a54:	87 e1       	ldi	r24, 0x17	; 23
    3a56:	93 e0       	ldi	r25, 0x03	; 3
    3a58:	0e 94 0a 20 	call	0x4014	; 0x4014 <_ZN6OutputD1Ev>

#include "Interface.h"
Interface Tastatur;

#include "Output.h"
Output LED('D',PORTD7);
    3a5c:	89 e1       	ldi	r24, 0x19	; 25
    3a5e:	93 e0       	ldi	r25, 0x03	; 3
    3a60:	0e 94 0a 20 	call	0x4014	; 0x4014 <_ZN6OutputD1Ev>

#include "Display.h"
Display oled;

#include "Interface.h"
Interface Tastatur;
    3a64:	8b e1       	ldi	r24, 0x1B	; 27
    3a66:	93 e0       	ldi	r25, 0x03	; 3
    3a68:	0e 94 7a 1d 	call	0x3af4	; 0x3af4 <_ZN9InterfaceD1Ev>
RTC rtc;
RTC zaehler;
RTC stoppuhr;

#include "Display.h"
Display oled;
    3a6c:	8c e1       	ldi	r24, 0x1C	; 28
    3a6e:	93 e0       	ldi	r25, 0x03	; 3
    3a70:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <_ZN7DisplayD1Ev>
Kompass kompass;

#include "RTC.h"
RTC rtc;
RTC zaehler;
RTC stoppuhr;
    3a74:	8d e1       	ldi	r24, 0x1D	; 29
    3a76:	97 e0       	ldi	r25, 0x07	; 7
    3a78:	0e 94 77 22 	call	0x44ee	; 0x44ee <_ZN3RTCD1Ev>
#include "Kompass.h"
Kompass kompass;

#include "RTC.h"
RTC rtc;
RTC zaehler;
    3a7c:	85 e3       	ldi	r24, 0x35	; 53
    3a7e:	97 e0       	ldi	r25, 0x07	; 7
    3a80:	0e 94 77 22 	call	0x44ee	; 0x44ee <_ZN3RTCD1Ev>

#include "Kompass.h"
Kompass kompass;

#include "RTC.h"
RTC rtc;
    3a84:	8d e4       	ldi	r24, 0x4D	; 77
    3a86:	97 e0       	ldi	r25, 0x07	; 7
    3a88:	0e 94 77 22 	call	0x44ee	; 0x44ee <_ZN3RTCD1Ev>
#include <stdlib.h>
#include <stdio.h>
#include <avr/interrupt.h>

#include "Kompass.h"
Kompass kompass;
    3a8c:	85 e6       	ldi	r24, 0x65	; 101
    3a8e:	97 e0       	ldi	r25, 0x07	; 7
    3a90:	0e 94 47 1e 	call	0x3c8e	; 0x3c8e <_ZN7KompassD1Ev>
    3a94:	08 95       	ret

00003a96 <_ZN3I2CC1Ev>:

// default constructor
I2C::I2C()
{
	//TWBR = 10; //Bit fuer 100khz an Tackrate, reicht gerade noch so
	TWBR=2; //fuer 8MHz und 400kHz in SCL
    3a96:	82 e0       	ldi	r24, 0x02	; 2
    3a98:	80 93 b8 00 	sts	0x00B8, r24
    3a9c:	08 95       	ret

00003a9e <_ZN3I2CD1Ev>:
} //I2C

// default destructor
I2C::~I2C()
    3a9e:	08 95       	ret

00003aa0 <_ZN3I2C9twi_startEv>:
{
} //~I2C

void I2C::twi_start(){
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    3aa0:	84 ea       	ldi	r24, 0xA4	; 164
    3aa2:	80 93 bc 00 	sts	0x00BC, r24
    3aa6:	08 95       	ret

00003aa8 <_ZN3I2C8twi_stopEv>:
}
void I2C::twi_stop(){
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    3aa8:	84 e9       	ldi	r24, 0x94	; 148
    3aaa:	80 93 bc 00 	sts	0x00BC, r24
    3aae:	08 95       	ret

00003ab0 <_ZN3I2C9twi_writeEh>:
	TWCR = (1<<TWINT) | (1<<TWEN);
	TWCR &= ~(1<<TWEA);
}

void I2C::twi_write(uint8_t data){
	while(!(TWCR & (1<<TWINT)));
    3ab0:	ec eb       	ldi	r30, 0xBC	; 188
    3ab2:	f0 e0       	ldi	r31, 0x00	; 0
    3ab4:	80 81       	ld	r24, Z
    3ab6:	88 23       	and	r24, r24
    3ab8:	ec f7       	brge	.-6      	; 0x3ab4 <_ZN3I2C9twi_writeEh+0x4>
	TWDR = data;
    3aba:	60 93 bb 00 	sts	0x00BB, r22
	TWCR = (1<<TWINT) | (1<<TWEN);
    3abe:	84 e8       	ldi	r24, 0x84	; 132
    3ac0:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));
    3ac4:	ec eb       	ldi	r30, 0xBC	; 188
    3ac6:	f0 e0       	ldi	r31, 0x00	; 0
    3ac8:	80 81       	ld	r24, Z
    3aca:	88 23       	and	r24, r24
    3acc:	ec f7       	brge	.-6      	; 0x3ac8 <_ZN3I2C9twi_writeEh+0x18>
}
    3ace:	08 95       	ret

00003ad0 <_ZN3I2C8twi_readEh>:

uint8_t I2C::twi_read(uint8_t ack){
	if (ack)
    3ad0:	66 23       	and	r22, r22
    3ad2:	21 f0       	breq	.+8      	; 0x3adc <_ZN3I2C8twi_readEh+0xc>
	{
		TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    3ad4:	84 ec       	ldi	r24, 0xC4	; 196
    3ad6:	80 93 bc 00 	sts	0x00BC, r24
    3ada:	03 c0       	rjmp	.+6      	; 0x3ae2 <_ZN3I2C8twi_readEh+0x12>
	}
	else{
		TWCR = (1<<TWINT) | (1<<TWEN);
    3adc:	84 e8       	ldi	r24, 0x84	; 132
    3ade:	80 93 bc 00 	sts	0x00BC, r24
	}
	
	while(!(TWCR & (1<<TWINT)));
    3ae2:	ec eb       	ldi	r30, 0xBC	; 188
    3ae4:	f0 e0       	ldi	r31, 0x00	; 0
    3ae6:	80 81       	ld	r24, Z
    3ae8:	88 23       	and	r24, r24
    3aea:	ec f7       	brge	.-6      	; 0x3ae6 <_ZN3I2C8twi_readEh+0x16>
	return TWDR;
    3aec:	80 91 bb 00 	lds	r24, 0x00BB
    3af0:	08 95       	ret

00003af2 <_ZN9InterfaceC1Ev>:


#include "Interface.h"

// default constructor
Interface::Interface()
    3af2:	08 95       	ret

00003af4 <_ZN9InterfaceD1Ev>:
{
} //Interface

// default destructor
Interface::~Interface()
    3af4:	08 95       	ret

00003af6 <_ZN9Interface8debounceEPVhh>:
{
} //~Interface

uint8_t Interface::debounce(volatile uint8_t *port, uint8_t pin)
{
	if ( (*port & (1 << pin)) )
    3af6:	fb 01       	movw	r30, r22
    3af8:	80 81       	ld	r24, Z
    3afa:	90 e0       	ldi	r25, 0x00	; 0
    3afc:	04 2e       	mov	r0, r20
    3afe:	02 c0       	rjmp	.+4      	; 0x3b04 <_ZN9Interface8debounceEPVhh+0xe>
    3b00:	95 95       	asr	r25
    3b02:	87 95       	ror	r24
    3b04:	0a 94       	dec	r0
    3b06:	e2 f7       	brpl	.-8      	; 0x3b00 <_ZN9Interface8debounceEPVhh+0xa>
    3b08:	80 ff       	sbrs	r24, 0
    3b0a:	17 c0       	rjmp	.+46     	; 0x3b3a <_ZN9Interface8debounceEPVhh+0x44>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3b0c:	8f ec       	ldi	r24, 0xCF	; 207
    3b0e:	97 e0       	ldi	r25, 0x07	; 7
    3b10:	01 97       	sbiw	r24, 0x01	; 1
    3b12:	f1 f7       	brne	.-4      	; 0x3b10 <_ZN9Interface8debounceEPVhh+0x1a>
    3b14:	00 c0       	rjmp	.+0      	; 0x3b16 <_ZN9Interface8debounceEPVhh+0x20>
    3b16:	00 00       	nop
	{
		/* Pin wurde auf Masse gezogen, 100ms warten   */
		_delay_ms(1);
		if ( !(*port & (1 << pin)) )
    3b18:	fb 01       	movw	r30, r22
    3b1a:	80 81       	ld	r24, Z
    3b1c:	90 e0       	ldi	r25, 0x00	; 0
    3b1e:	9c 01       	movw	r18, r24
    3b20:	02 c0       	rjmp	.+4      	; 0x3b26 <_ZN9Interface8debounceEPVhh+0x30>
    3b22:	35 95       	asr	r19
    3b24:	27 95       	ror	r18
    3b26:	4a 95       	dec	r20
    3b28:	e2 f7       	brpl	.-8      	; 0x3b22 <_ZN9Interface8debounceEPVhh+0x2c>
    3b2a:	20 fd       	sbrc	r18, 0
    3b2c:	08 c0       	rjmp	.+16     	; 0x3b3e <_ZN9Interface8debounceEPVhh+0x48>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3b2e:	3a e1       	ldi	r19, 0x1A	; 26
    3b30:	3a 95       	dec	r19
    3b32:	f1 f7       	brne	.-4      	; 0x3b30 <_ZN9Interface8debounceEPVhh+0x3a>
    3b34:	00 c0       	rjmp	.+0      	; 0x3b36 <_ZN9Interface8debounceEPVhh+0x40>
		{
			/* Anwender Zeit zum Loslassen des Tasters geben */
			_delay_us(10);
			return 1;
    3b36:	81 e0       	ldi	r24, 0x01	; 1
    3b38:	08 95       	ret
		}
	}
	return 0;
    3b3a:	80 e0       	ldi	r24, 0x00	; 0
    3b3c:	08 95       	ret
    3b3e:	80 e0       	ldi	r24, 0x00	; 0
}
    3b40:	08 95       	ret

00003b42 <_ZN9Interface6TasterEv>:
		break;
	}
	return abfrage;
}

uint8_t Interface::Taster(){
    3b42:	1f 93       	push	r17
    3b44:	cf 93       	push	r28
    3b46:	df 93       	push	r29
    3b48:	ec 01       	movw	r28, r24
	uint8_t taste = 'A';
	
	//erste Zeile
	PORTD |= (1<<PORTD3);
    3b4a:	5b 9a       	sbi	0x0b, 3	; 11
    3b4c:	82 e0       	ldi	r24, 0x02	; 2
    3b4e:	8a 95       	dec	r24
    3b50:	f1 f7       	brne	.-4      	; 0x3b4e <_ZN9Interface6TasterEv+0xc>
    3b52:	00 c0       	rjmp	.+0      	; 0x3b54 <_ZN9Interface6TasterEv+0x12>
	_delay_us(1);
	if(debounce(&PIND,PIND4)){
    3b54:	44 e0       	ldi	r20, 0x04	; 4
    3b56:	69 e2       	ldi	r22, 0x29	; 41
    3b58:	70 e0       	ldi	r23, 0x00	; 0
    3b5a:	ce 01       	movw	r24, r28
    3b5c:	0e 94 7b 1d 	call	0x3af6	; 0x3af6 <_ZN9Interface8debounceEPVhh>
    3b60:	81 11       	cpse	r24, r1
    3b62:	12 c0       	rjmp	.+36     	; 0x3b88 <_ZN9Interface6TasterEv+0x46>
		taste = '3';
	}
	else if (debounce(&PIND,PIND5))
    3b64:	45 e0       	ldi	r20, 0x05	; 5
    3b66:	69 e2       	ldi	r22, 0x29	; 41
    3b68:	70 e0       	ldi	r23, 0x00	; 0
    3b6a:	ce 01       	movw	r24, r28
    3b6c:	0e 94 7b 1d 	call	0x3af6	; 0x3af6 <_ZN9Interface8debounceEPVhh>
    3b70:	81 11       	cpse	r24, r1
    3b72:	0c c0       	rjmp	.+24     	; 0x3b8c <_ZN9Interface6TasterEv+0x4a>
	{
		taste = '2';
	}
	else if (debounce(&PIND,PIND6))
    3b74:	46 e0       	ldi	r20, 0x06	; 6
    3b76:	69 e2       	ldi	r22, 0x29	; 41
    3b78:	70 e0       	ldi	r23, 0x00	; 0
    3b7a:	ce 01       	movw	r24, r28
    3b7c:	0e 94 7b 1d 	call	0x3af6	; 0x3af6 <_ZN9Interface8debounceEPVhh>
    3b80:	81 11       	cpse	r24, r1
    3b82:	06 c0       	rjmp	.+12     	; 0x3b90 <_ZN9Interface6TasterEv+0x4e>
	}
	return abfrage;
}

uint8_t Interface::Taster(){
	uint8_t taste = 'A';
    3b84:	11 e4       	ldi	r17, 0x41	; 65
    3b86:	05 c0       	rjmp	.+10     	; 0x3b92 <_ZN9Interface6TasterEv+0x50>
	
	//erste Zeile
	PORTD |= (1<<PORTD3);
	_delay_us(1);
	if(debounce(&PIND,PIND4)){
		taste = '3';
    3b88:	13 e3       	ldi	r17, 0x33	; 51
    3b8a:	03 c0       	rjmp	.+6      	; 0x3b92 <_ZN9Interface6TasterEv+0x50>
	}
	else if (debounce(&PIND,PIND5))
	{
		taste = '2';
    3b8c:	12 e3       	ldi	r17, 0x32	; 50
    3b8e:	01 c0       	rjmp	.+2      	; 0x3b92 <_ZN9Interface6TasterEv+0x50>
	}
	else if (debounce(&PIND,PIND6))
	{
		taste = '1';
    3b90:	11 e3       	ldi	r17, 0x31	; 49
	}
	PORTD &= ~(1<<PORTD3);
    3b92:	5b 98       	cbi	0x0b, 3	; 11
	
	//zweite Zeile
	PORTD |= (1<<PORTD2);
    3b94:	5a 9a       	sbi	0x0b, 2	; 11
    3b96:	82 e0       	ldi	r24, 0x02	; 2
    3b98:	8a 95       	dec	r24
    3b9a:	f1 f7       	brne	.-4      	; 0x3b98 <_ZN9Interface6TasterEv+0x56>
    3b9c:	00 c0       	rjmp	.+0      	; 0x3b9e <_ZN9Interface6TasterEv+0x5c>
	_delay_us(1);
	if(debounce(&PIND,PIND4)){
    3b9e:	44 e0       	ldi	r20, 0x04	; 4
    3ba0:	69 e2       	ldi	r22, 0x29	; 41
    3ba2:	70 e0       	ldi	r23, 0x00	; 0
    3ba4:	ce 01       	movw	r24, r28
    3ba6:	0e 94 7b 1d 	call	0x3af6	; 0x3af6 <_ZN9Interface8debounceEPVhh>
    3baa:	81 11       	cpse	r24, r1
    3bac:	11 c0       	rjmp	.+34     	; 0x3bd0 <_ZN9Interface6TasterEv+0x8e>
		taste = '6';
	}
	else if (debounce(&PIND,PIND5))
    3bae:	45 e0       	ldi	r20, 0x05	; 5
    3bb0:	69 e2       	ldi	r22, 0x29	; 41
    3bb2:	70 e0       	ldi	r23, 0x00	; 0
    3bb4:	ce 01       	movw	r24, r28
    3bb6:	0e 94 7b 1d 	call	0x3af6	; 0x3af6 <_ZN9Interface8debounceEPVhh>
    3bba:	81 11       	cpse	r24, r1
    3bbc:	0b c0       	rjmp	.+22     	; 0x3bd4 <_ZN9Interface6TasterEv+0x92>
	{
		taste = '5';
	}
	else if (debounce(&PIND,PIND6))
    3bbe:	46 e0       	ldi	r20, 0x06	; 6
    3bc0:	69 e2       	ldi	r22, 0x29	; 41
    3bc2:	70 e0       	ldi	r23, 0x00	; 0
    3bc4:	ce 01       	movw	r24, r28
    3bc6:	0e 94 7b 1d 	call	0x3af6	; 0x3af6 <_ZN9Interface8debounceEPVhh>
    3bca:	81 11       	cpse	r24, r1
    3bcc:	05 c0       	rjmp	.+10     	; 0x3bd8 <_ZN9Interface6TasterEv+0x96>
    3bce:	05 c0       	rjmp	.+10     	; 0x3bda <_ZN9Interface6TasterEv+0x98>
	
	//zweite Zeile
	PORTD |= (1<<PORTD2);
	_delay_us(1);
	if(debounce(&PIND,PIND4)){
		taste = '6';
    3bd0:	16 e3       	ldi	r17, 0x36	; 54
    3bd2:	03 c0       	rjmp	.+6      	; 0x3bda <_ZN9Interface6TasterEv+0x98>
	}
	else if (debounce(&PIND,PIND5))
	{
		taste = '5';
    3bd4:	15 e3       	ldi	r17, 0x35	; 53
    3bd6:	01 c0       	rjmp	.+2      	; 0x3bda <_ZN9Interface6TasterEv+0x98>
	}
	else if (debounce(&PIND,PIND6))
	{
		taste = '4';
    3bd8:	14 e3       	ldi	r17, 0x34	; 52
	}
	PORTD &= ~(1<<PORTD2);
    3bda:	5a 98       	cbi	0x0b, 2	; 11
	
	//dritte Zeile
	PORTD |= (1<<PORTD1);
    3bdc:	59 9a       	sbi	0x0b, 1	; 11
    3bde:	82 e0       	ldi	r24, 0x02	; 2
    3be0:	8a 95       	dec	r24
    3be2:	f1 f7       	brne	.-4      	; 0x3be0 <_ZN9Interface6TasterEv+0x9e>
    3be4:	00 c0       	rjmp	.+0      	; 0x3be6 <_ZN9Interface6TasterEv+0xa4>
	_delay_us(1);
	if(debounce(&PIND,PIND4)){
    3be6:	44 e0       	ldi	r20, 0x04	; 4
    3be8:	69 e2       	ldi	r22, 0x29	; 41
    3bea:	70 e0       	ldi	r23, 0x00	; 0
    3bec:	ce 01       	movw	r24, r28
    3bee:	0e 94 7b 1d 	call	0x3af6	; 0x3af6 <_ZN9Interface8debounceEPVhh>
    3bf2:	81 11       	cpse	r24, r1
    3bf4:	11 c0       	rjmp	.+34     	; 0x3c18 <_ZN9Interface6TasterEv+0xd6>
		taste = '9';
	}
	else if (debounce(&PIND,PIND5))
    3bf6:	45 e0       	ldi	r20, 0x05	; 5
    3bf8:	69 e2       	ldi	r22, 0x29	; 41
    3bfa:	70 e0       	ldi	r23, 0x00	; 0
    3bfc:	ce 01       	movw	r24, r28
    3bfe:	0e 94 7b 1d 	call	0x3af6	; 0x3af6 <_ZN9Interface8debounceEPVhh>
    3c02:	81 11       	cpse	r24, r1
    3c04:	0b c0       	rjmp	.+22     	; 0x3c1c <_ZN9Interface6TasterEv+0xda>
	{
		taste = '8';
	}
	else if (debounce(&PIND,PIND6))
    3c06:	46 e0       	ldi	r20, 0x06	; 6
    3c08:	69 e2       	ldi	r22, 0x29	; 41
    3c0a:	70 e0       	ldi	r23, 0x00	; 0
    3c0c:	ce 01       	movw	r24, r28
    3c0e:	0e 94 7b 1d 	call	0x3af6	; 0x3af6 <_ZN9Interface8debounceEPVhh>
    3c12:	81 11       	cpse	r24, r1
    3c14:	05 c0       	rjmp	.+10     	; 0x3c20 <_ZN9Interface6TasterEv+0xde>
    3c16:	05 c0       	rjmp	.+10     	; 0x3c22 <_ZN9Interface6TasterEv+0xe0>
	
	//dritte Zeile
	PORTD |= (1<<PORTD1);
	_delay_us(1);
	if(debounce(&PIND,PIND4)){
		taste = '9';
    3c18:	19 e3       	ldi	r17, 0x39	; 57
    3c1a:	03 c0       	rjmp	.+6      	; 0x3c22 <_ZN9Interface6TasterEv+0xe0>
	}
	else if (debounce(&PIND,PIND5))
	{
		taste = '8';
    3c1c:	18 e3       	ldi	r17, 0x38	; 56
    3c1e:	01 c0       	rjmp	.+2      	; 0x3c22 <_ZN9Interface6TasterEv+0xe0>
	}
	else if (debounce(&PIND,PIND6))
	{
		taste = '7';
    3c20:	17 e3       	ldi	r17, 0x37	; 55
	}
	PORTD &= ~(1<<PORT1);
    3c22:	59 98       	cbi	0x0b, 1	; 11
	
	//vierte Zeile
	PORTD |= (1<<PORTD0);
    3c24:	58 9a       	sbi	0x0b, 0	; 11
    3c26:	82 e0       	ldi	r24, 0x02	; 2
    3c28:	8a 95       	dec	r24
    3c2a:	f1 f7       	brne	.-4      	; 0x3c28 <_ZN9Interface6TasterEv+0xe6>
    3c2c:	00 c0       	rjmp	.+0      	; 0x3c2e <_ZN9Interface6TasterEv+0xec>
	_delay_us(1);
	if(debounce(&PIND,PIND4)){
    3c2e:	44 e0       	ldi	r20, 0x04	; 4
    3c30:	69 e2       	ldi	r22, 0x29	; 41
    3c32:	70 e0       	ldi	r23, 0x00	; 0
    3c34:	ce 01       	movw	r24, r28
    3c36:	0e 94 7b 1d 	call	0x3af6	; 0x3af6 <_ZN9Interface8debounceEPVhh>
    3c3a:	81 11       	cpse	r24, r1
    3c3c:	11 c0       	rjmp	.+34     	; 0x3c60 <_ZN9Interface6TasterEv+0x11e>
		taste = '#';
	}
	else if (debounce(&PIND,PIND5))
    3c3e:	45 e0       	ldi	r20, 0x05	; 5
    3c40:	69 e2       	ldi	r22, 0x29	; 41
    3c42:	70 e0       	ldi	r23, 0x00	; 0
    3c44:	ce 01       	movw	r24, r28
    3c46:	0e 94 7b 1d 	call	0x3af6	; 0x3af6 <_ZN9Interface8debounceEPVhh>
    3c4a:	81 11       	cpse	r24, r1
    3c4c:	0b c0       	rjmp	.+22     	; 0x3c64 <_ZN9Interface6TasterEv+0x122>
	{
		taste = '0';
	}
	else if (debounce(&PIND,PIND6))
    3c4e:	46 e0       	ldi	r20, 0x06	; 6
    3c50:	69 e2       	ldi	r22, 0x29	; 41
    3c52:	70 e0       	ldi	r23, 0x00	; 0
    3c54:	ce 01       	movw	r24, r28
    3c56:	0e 94 7b 1d 	call	0x3af6	; 0x3af6 <_ZN9Interface8debounceEPVhh>
    3c5a:	81 11       	cpse	r24, r1
    3c5c:	05 c0       	rjmp	.+10     	; 0x3c68 <_ZN9Interface6TasterEv+0x126>
    3c5e:	05 c0       	rjmp	.+10     	; 0x3c6a <_ZN9Interface6TasterEv+0x128>
	
	//vierte Zeile
	PORTD |= (1<<PORTD0);
	_delay_us(1);
	if(debounce(&PIND,PIND4)){
		taste = '#';
    3c60:	13 e2       	ldi	r17, 0x23	; 35
    3c62:	03 c0       	rjmp	.+6      	; 0x3c6a <_ZN9Interface6TasterEv+0x128>
	}
	else if (debounce(&PIND,PIND5))
	{
		taste = '0';
    3c64:	10 e3       	ldi	r17, 0x30	; 48
    3c66:	01 c0       	rjmp	.+2      	; 0x3c6a <_ZN9Interface6TasterEv+0x128>
	}
	else if (debounce(&PIND,PIND6))
	{
		taste = '*';
    3c68:	1a e2       	ldi	r17, 0x2A	; 42
	}
	PORTD &= ~(1<<PORTD0);
    3c6a:	58 98       	cbi	0x0b, 0	; 11
	
	return taste;
}
    3c6c:	81 2f       	mov	r24, r17
    3c6e:	df 91       	pop	r29
    3c70:	cf 91       	pop	r28
    3c72:	1f 91       	pop	r17
    3c74:	08 95       	ret

00003c76 <_ZN9Interface17ZahlenausTastaturEv>:

uint8_t Interface::ZahlenausTastatur(){
    3c76:	cf 93       	push	r28
    3c78:	df 93       	push	r29
    3c7a:	ec 01       	movw	r28, r24
	while(true){
		uint8_t taste = Taster();
    3c7c:	ce 01       	movw	r24, r28
    3c7e:	0e 94 a1 1d 	call	0x3b42	; 0x3b42 <_ZN9Interface6TasterEv>
		if(taste>='0' && taste<='9'){
    3c82:	80 53       	subi	r24, 0x30	; 48
    3c84:	8a 30       	cpi	r24, 0x0A	; 10
    3c86:	d0 f7       	brcc	.-12     	; 0x3c7c <_ZN9Interface17ZahlenausTastaturEv+0x6>
			return taste - '0';
		}
	}
}
    3c88:	df 91       	pop	r29
    3c8a:	cf 91       	pop	r28
    3c8c:	08 95       	ret

00003c8e <_ZN7KompassD1Ev>:
		offset[i]=0;
	}
} //Kompass

// default destructor
Kompass::~Kompass()
    3c8e:	06 96       	adiw	r24, 0x06	; 6
    3c90:	0e 94 4f 1d 	call	0x3a9e	; 0x3a9e <_ZN3I2CD1Ev>
    3c94:	08 95       	ret

00003c96 <_ZN7Kompass16HMC5883L_commandEhh>:
{
} //~Kompass

void Kompass::HMC5883L_command(uint8_t adresse, uint8_t command){
    3c96:	0f 93       	push	r16
    3c98:	1f 93       	push	r17
    3c9a:	cf 93       	push	r28
    3c9c:	df 93       	push	r29
    3c9e:	06 2f       	mov	r16, r22
    3ca0:	14 2f       	mov	r17, r20
	i2c.twi_start();
    3ca2:	ec 01       	movw	r28, r24
    3ca4:	26 96       	adiw	r28, 0x06	; 6
    3ca6:	ce 01       	movw	r24, r28
    3ca8:	0e 94 50 1d 	call	0x3aa0	; 0x3aa0 <_ZN3I2C9twi_startEv>
	i2c.twi_write(HMCWRITEADRESSE);
    3cac:	6c e3       	ldi	r22, 0x3C	; 60
    3cae:	ce 01       	movw	r24, r28
    3cb0:	0e 94 58 1d 	call	0x3ab0	; 0x3ab0 <_ZN3I2C9twi_writeEh>
	i2c.twi_write(adresse);
    3cb4:	60 2f       	mov	r22, r16
    3cb6:	ce 01       	movw	r24, r28
    3cb8:	0e 94 58 1d 	call	0x3ab0	; 0x3ab0 <_ZN3I2C9twi_writeEh>
	i2c.twi_write(command);
    3cbc:	61 2f       	mov	r22, r17
    3cbe:	ce 01       	movw	r24, r28
    3cc0:	0e 94 58 1d 	call	0x3ab0	; 0x3ab0 <_ZN3I2C9twi_writeEh>
	i2c.twi_stop();
    3cc4:	ce 01       	movw	r24, r28
    3cc6:	0e 94 54 1d 	call	0x3aa8	; 0x3aa8 <_ZN3I2C8twi_stopEv>
}
    3cca:	df 91       	pop	r29
    3ccc:	cf 91       	pop	r28
    3cce:	1f 91       	pop	r17
    3cd0:	0f 91       	pop	r16
    3cd2:	08 95       	ret

00003cd4 <_ZN7KompassC1Ev>:


#include "Kompass.h"

// default constructor
Kompass::Kompass()
    3cd4:	cf 93       	push	r28
    3cd6:	df 93       	push	r29
    3cd8:	ec 01       	movw	r28, r24
    3cda:	06 96       	adiw	r24, 0x06	; 6
    3cdc:	0e 94 4b 1d 	call	0x3a96	; 0x3a96 <_ZN3I2CC1Ev>
{
	//Config Register A
	HMC5883L_command(0x00, HMCSAMPLES8+HMCDATARATE15+HMCMEASUREMODENORMAL);
    3ce0:	40 e7       	ldi	r20, 0x70	; 112
    3ce2:	60 e0       	ldi	r22, 0x00	; 0
    3ce4:	ce 01       	movw	r24, r28
    3ce6:	0e 94 4b 1e 	call	0x3c96	; 0x3c96 <_ZN7Kompass16HMC5883L_commandEhh>

	//Config Gain
	HMC5883L_command(0x01, HMCGAIN1090);
    3cea:	40 e2       	ldi	r20, 0x20	; 32
    3cec:	61 e0       	ldi	r22, 0x01	; 1
    3cee:	ce 01       	movw	r24, r28
    3cf0:	0e 94 4b 1e 	call	0x3c96	; 0x3c96 <_ZN7Kompass16HMC5883L_commandEhh>

	//Set Mode auf single
	HMC5883L_command(0x02, HMCSIGLEMODE);
    3cf4:	41 e0       	ldi	r20, 0x01	; 1
    3cf6:	62 e0       	ldi	r22, 0x02	; 2
    3cf8:	ce 01       	movw	r24, r28
    3cfa:	0e 94 4b 1e 	call	0x3c96	; 0x3c96 <_ZN7Kompass16HMC5883L_commandEhh>
	//Variablen
	for(uint8_t i=0;i<3;i++){
		achsen[i]=0;
    3cfe:	19 82       	std	Y+1, r1	; 0x01
    3d00:	18 82       	st	Y, r1
		offset[i]=0;
    3d02:	18 86       	std	Y+8, r1	; 0x08
    3d04:	1f 82       	std	Y+7, r1	; 0x07

	//Set Mode auf single
	HMC5883L_command(0x02, HMCSIGLEMODE);
	//Variablen
	for(uint8_t i=0;i<3;i++){
		achsen[i]=0;
    3d06:	1b 82       	std	Y+3, r1	; 0x03
    3d08:	1a 82       	std	Y+2, r1	; 0x02
		offset[i]=0;
    3d0a:	1a 86       	std	Y+10, r1	; 0x0a
    3d0c:	19 86       	std	Y+9, r1	; 0x09

	//Set Mode auf single
	HMC5883L_command(0x02, HMCSIGLEMODE);
	//Variablen
	for(uint8_t i=0;i<3;i++){
		achsen[i]=0;
    3d0e:	1d 82       	std	Y+5, r1	; 0x05
    3d10:	1c 82       	std	Y+4, r1	; 0x04
		offset[i]=0;
    3d12:	1c 86       	std	Y+12, r1	; 0x0c
    3d14:	1b 86       	std	Y+11, r1	; 0x0b
	}
} //Kompass
    3d16:	df 91       	pop	r29
    3d18:	cf 91       	pop	r28
    3d1a:	08 95       	ret

00003d1c <_ZN7Kompass20HMC5883L_readHeadingEv>:
		achsen[i]=0;
		offset[i]=0;
	}
}

uint8_t Kompass::HMC5883L_readHeading(){
    3d1c:	bf 92       	push	r11
    3d1e:	cf 92       	push	r12
    3d20:	df 92       	push	r13
    3d22:	ef 92       	push	r14
    3d24:	ff 92       	push	r15
    3d26:	0f 93       	push	r16
    3d28:	1f 93       	push	r17
    3d2a:	cf 93       	push	r28
    3d2c:	df 93       	push	r29
    3d2e:	00 d0       	rcall	.+0      	; 0x3d30 <_ZN7Kompass20HMC5883L_readHeadingEv+0x14>
    3d30:	00 d0       	rcall	.+0      	; 0x3d32 <_ZN7Kompass20HMC5883L_readHeadingEv+0x16>
    3d32:	00 d0       	rcall	.+0      	; 0x3d34 <_ZN7Kompass20HMC5883L_readHeadingEv+0x18>
    3d34:	cd b7       	in	r28, 0x3d	; 61
    3d36:	de b7       	in	r29, 0x3e	; 62
    3d38:	6c 01       	movw	r12, r24
	cli();
    3d3a:	f8 94       	cli
	uint8_t heading[6];
	i2c.twi_start();
    3d3c:	7c 01       	movw	r14, r24
    3d3e:	26 e0       	ldi	r18, 0x06	; 6
    3d40:	e2 0e       	add	r14, r18
    3d42:	f1 1c       	adc	r15, r1
    3d44:	c7 01       	movw	r24, r14
    3d46:	0e 94 50 1d 	call	0x3aa0	; 0x3aa0 <_ZN3I2C9twi_startEv>
	i2c.twi_write(HMCWRITEADRESSE);
    3d4a:	6c e3       	ldi	r22, 0x3C	; 60
    3d4c:	c7 01       	movw	r24, r14
    3d4e:	0e 94 58 1d 	call	0x3ab0	; 0x3ab0 <_ZN3I2C9twi_writeEh>
	i2c.twi_write(0x03);
    3d52:	63 e0       	ldi	r22, 0x03	; 3
    3d54:	c7 01       	movw	r24, r14
    3d56:	0e 94 58 1d 	call	0x3ab0	; 0x3ab0 <_ZN3I2C9twi_writeEh>
	i2c.twi_start();
    3d5a:	c7 01       	movw	r24, r14
    3d5c:	0e 94 50 1d 	call	0x3aa0	; 0x3aa0 <_ZN3I2C9twi_startEv>
	i2c.twi_write(HMCREADADRESSE);
    3d60:	6d e3       	ldi	r22, 0x3D	; 61
    3d62:	c7 01       	movw	r24, r14
    3d64:	0e 94 58 1d 	call	0x3ab0	; 0x3ab0 <_ZN3I2C9twi_writeEh>
    3d68:	8e 01       	movw	r16, r28
    3d6a:	0f 5f       	subi	r16, 0xFF	; 255
    3d6c:	1f 4f       	sbci	r17, 0xFF	; 255
	
	for(uint8_t i=0; i<6;i++){
    3d6e:	b1 2c       	mov	r11, r1
		if (i<5)
    3d70:	84 e0       	ldi	r24, 0x04	; 4
    3d72:	8b 15       	cp	r24, r11
    3d74:	38 f0       	brcs	.+14     	; 0x3d84 <_ZN7Kompass20HMC5883L_readHeadingEv+0x68>
		{
			heading[i]=i2c.twi_read(1);
    3d76:	61 e0       	ldi	r22, 0x01	; 1
    3d78:	c7 01       	movw	r24, r14
    3d7a:	0e 94 68 1d 	call	0x3ad0	; 0x3ad0 <_ZN3I2C8twi_readEh>
    3d7e:	f8 01       	movw	r30, r16
    3d80:	80 83       	st	Z, r24
    3d82:	06 c0       	rjmp	.+12     	; 0x3d90 <_ZN7Kompass20HMC5883L_readHeadingEv+0x74>
		}
		else
		{
			heading[i]=i2c.twi_read(0);
    3d84:	60 e0       	ldi	r22, 0x00	; 0
    3d86:	c7 01       	movw	r24, r14
    3d88:	0e 94 68 1d 	call	0x3ad0	; 0x3ad0 <_ZN3I2C8twi_readEh>
    3d8c:	f8 01       	movw	r30, r16
    3d8e:	80 83       	st	Z, r24
	i2c.twi_write(HMCWRITEADRESSE);
	i2c.twi_write(0x03);
	i2c.twi_start();
	i2c.twi_write(HMCREADADRESSE);
	
	for(uint8_t i=0; i<6;i++){
    3d90:	b3 94       	inc	r11
    3d92:	0f 5f       	subi	r16, 0xFF	; 255
    3d94:	1f 4f       	sbci	r17, 0xFF	; 255
    3d96:	f6 e0       	ldi	r31, 0x06	; 6
    3d98:	bf 12       	cpse	r11, r31
    3d9a:	ea cf       	rjmp	.-44     	; 0x3d70 <_ZN7Kompass20HMC5883L_readHeadingEv+0x54>
		{
			heading[i]=i2c.twi_read(0);
		}
		
	}
	i2c.twi_stop();
    3d9c:	c7 01       	movw	r24, r14
    3d9e:	0e 94 54 1d 	call	0x3aa8	; 0x3aa8 <_ZN3I2C8twi_stopEv>
	achsen[0] =(int16_t) (heading[1] | (heading[0] << 8));
    3da2:	89 81       	ldd	r24, Y+1	; 0x01
    3da4:	90 e0       	ldi	r25, 0x00	; 0
    3da6:	98 2f       	mov	r25, r24
    3da8:	88 27       	eor	r24, r24
    3daa:	2a 81       	ldd	r18, Y+2	; 0x02
    3dac:	82 2b       	or	r24, r18
    3dae:	f6 01       	movw	r30, r12
    3db0:	91 83       	std	Z+1, r25	; 0x01
    3db2:	80 83       	st	Z, r24
	achsen[2] =(int16_t) (heading[3] | (heading[2] << 8));
    3db4:	8b 81       	ldd	r24, Y+3	; 0x03
    3db6:	90 e0       	ldi	r25, 0x00	; 0
    3db8:	98 2f       	mov	r25, r24
    3dba:	88 27       	eor	r24, r24
    3dbc:	2c 81       	ldd	r18, Y+4	; 0x04
    3dbe:	82 2b       	or	r24, r18
    3dc0:	95 83       	std	Z+5, r25	; 0x05
    3dc2:	84 83       	std	Z+4, r24	; 0x04
	achsen[1] =(int16_t) (heading[5] | (heading[4] << 8));
    3dc4:	8d 81       	ldd	r24, Y+5	; 0x05
    3dc6:	90 e0       	ldi	r25, 0x00	; 0
    3dc8:	98 2f       	mov	r25, r24
    3dca:	88 27       	eor	r24, r24
    3dcc:	2e 81       	ldd	r18, Y+6	; 0x06
    3dce:	82 2b       	or	r24, r18
    3dd0:	93 83       	std	Z+3, r25	; 0x03
    3dd2:	82 83       	std	Z+2, r24	; 0x02
	sei();
    3dd4:	78 94       	sei
	if (achsen[0]==-4096 || achsen[1]==-4096 || achsen[2]==-4096)
    3dd6:	f6 01       	movw	r30, r12
    3dd8:	80 81       	ld	r24, Z
    3dda:	91 81       	ldd	r25, Z+1	; 0x01
    3ddc:	81 15       	cp	r24, r1
    3dde:	90 4f       	sbci	r25, 0xF0	; 240
    3de0:	09 f4       	brne	.+2      	; 0x3de4 <_ZN7Kompass20HMC5883L_readHeadingEv+0xc8>
    3de2:	47 c0       	rjmp	.+142    	; 0x3e72 <_ZN7Kompass20HMC5883L_readHeadingEv+0x156>
    3de4:	f6 01       	movw	r30, r12
    3de6:	82 81       	ldd	r24, Z+2	; 0x02
    3de8:	93 81       	ldd	r25, Z+3	; 0x03
    3dea:	81 15       	cp	r24, r1
    3dec:	90 4f       	sbci	r25, 0xF0	; 240
    3dee:	09 f4       	brne	.+2      	; 0x3df2 <_ZN7Kompass20HMC5883L_readHeadingEv+0xd6>
    3df0:	42 c0       	rjmp	.+132    	; 0x3e76 <_ZN7Kompass20HMC5883L_readHeadingEv+0x15a>
    3df2:	f6 01       	movw	r30, r12
    3df4:	84 81       	ldd	r24, Z+4	; 0x04
    3df6:	95 81       	ldd	r25, Z+5	; 0x05
    3df8:	81 15       	cp	r24, r1
    3dfa:	90 4f       	sbci	r25, 0xF0	; 240
    3dfc:	f1 f1       	breq	.+124    	; 0x3e7a <_ZN7Kompass20HMC5883L_readHeadingEv+0x15e>
    3dfe:	f6 01       	movw	r30, r12
    3e00:	83 e0       	ldi	r24, 0x03	; 3
    3e02:	df 01       	movw	r26, r30
	}
	//Kallibrierung durchfuehren, jedes mal, wenn eine abfrage stattfindet
	//somit passive kalibrierung
	else{
		for(uint8_t i=0;i<3;i++){
			if(achsen[i]>max[i]){
    3e04:	20 81       	ld	r18, Z
    3e06:	31 81       	ldd	r19, Z+1	; 0x01
    3e08:	45 85       	ldd	r20, Z+13	; 0x0d
    3e0a:	56 85       	ldd	r21, Z+14	; 0x0e
    3e0c:	42 17       	cp	r20, r18
    3e0e:	53 07       	cpc	r21, r19
    3e10:	8c f4       	brge	.+34     	; 0x3e34 <_ZN7Kompass20HMC5883L_readHeadingEv+0x118>
				max[i]=achsen[i];
    3e12:	36 87       	std	Z+14, r19	; 0x0e
    3e14:	25 87       	std	Z+13, r18	; 0x0d
				offset[i]=(max[i]+min[i])/2;
    3e16:	43 89       	ldd	r20, Z+19	; 0x13
    3e18:	54 89       	ldd	r21, Z+20	; 0x14
    3e1a:	24 0f       	add	r18, r20
    3e1c:	35 1f       	adc	r19, r21
    3e1e:	33 23       	and	r19, r19
    3e20:	14 f4       	brge	.+4      	; 0x3e26 <_ZN7Kompass20HMC5883L_readHeadingEv+0x10a>
    3e22:	2f 5f       	subi	r18, 0xFF	; 255
    3e24:	3f 4f       	sbci	r19, 0xFF	; 255
    3e26:	35 95       	asr	r19
    3e28:	27 95       	ror	r18
    3e2a:	18 96       	adiw	r26, 0x08	; 8
    3e2c:	3c 93       	st	X, r19
    3e2e:	2e 93       	st	-X, r18
    3e30:	17 97       	sbiw	r26, 0x07	; 7
    3e32:	1a c0       	rjmp	.+52     	; 0x3e68 <_ZN7Kompass20HMC5883L_readHeadingEv+0x14c>
			}
			else if(achsen[i]<min[i]){
    3e34:	63 89       	ldd	r22, Z+19	; 0x13
    3e36:	74 89       	ldd	r23, Z+20	; 0x14
    3e38:	26 17       	cp	r18, r22
    3e3a:	37 07       	cpc	r19, r23
    3e3c:	7c f4       	brge	.+30     	; 0x3e5c <_ZN7Kompass20HMC5883L_readHeadingEv+0x140>
				min[i]=achsen[i];
    3e3e:	34 8b       	std	Z+20, r19	; 0x14
    3e40:	23 8b       	std	Z+19, r18	; 0x13
				offset[i]=(max[i]+min[i])/2;
    3e42:	24 0f       	add	r18, r20
    3e44:	35 1f       	adc	r19, r21
    3e46:	33 23       	and	r19, r19
    3e48:	14 f4       	brge	.+4      	; 0x3e4e <_ZN7Kompass20HMC5883L_readHeadingEv+0x132>
    3e4a:	2f 5f       	subi	r18, 0xFF	; 255
    3e4c:	3f 4f       	sbci	r19, 0xFF	; 255
    3e4e:	35 95       	asr	r19
    3e50:	27 95       	ror	r18
    3e52:	18 96       	adiw	r26, 0x08	; 8
    3e54:	3c 93       	st	X, r19
    3e56:	2e 93       	st	-X, r18
    3e58:	17 97       	sbiw	r26, 0x07	; 7
    3e5a:	06 c0       	rjmp	.+12     	; 0x3e68 <_ZN7Kompass20HMC5883L_readHeadingEv+0x14c>
			}
			else {
				achsen[i]-=offset[i];
    3e5c:	47 81       	ldd	r20, Z+7	; 0x07
    3e5e:	50 85       	ldd	r21, Z+8	; 0x08
    3e60:	24 1b       	sub	r18, r20
    3e62:	35 0b       	sbc	r19, r21
    3e64:	31 83       	std	Z+1, r19	; 0x01
    3e66:	20 83       	st	Z, r18
    3e68:	81 50       	subi	r24, 0x01	; 1
    3e6a:	32 96       	adiw	r30, 0x02	; 2
		return 1;
	}
	//Kallibrierung durchfuehren, jedes mal, wenn eine abfrage stattfindet
	//somit passive kalibrierung
	else{
		for(uint8_t i=0;i<3;i++){
    3e6c:	81 11       	cpse	r24, r1
    3e6e:	c9 cf       	rjmp	.-110    	; 0x3e02 <_ZN7Kompass20HMC5883L_readHeadingEv+0xe6>
    3e70:	05 c0       	rjmp	.+10     	; 0x3e7c <_ZN7Kompass20HMC5883L_readHeadingEv+0x160>
	achsen[2] =(int16_t) (heading[3] | (heading[2] << 8));
	achsen[1] =(int16_t) (heading[5] | (heading[4] << 8));
	sei();
	if (achsen[0]==-4096 || achsen[1]==-4096 || achsen[2]==-4096)
	{
		return 1;
    3e72:	81 e0       	ldi	r24, 0x01	; 1
    3e74:	03 c0       	rjmp	.+6      	; 0x3e7c <_ZN7Kompass20HMC5883L_readHeadingEv+0x160>
    3e76:	81 e0       	ldi	r24, 0x01	; 1
    3e78:	01 c0       	rjmp	.+2      	; 0x3e7c <_ZN7Kompass20HMC5883L_readHeadingEv+0x160>
    3e7a:	81 e0       	ldi	r24, 0x01	; 1
			}
		}
	}
	
	return 0;
}
    3e7c:	26 96       	adiw	r28, 0x06	; 6
    3e7e:	0f b6       	in	r0, 0x3f	; 63
    3e80:	f8 94       	cli
    3e82:	de bf       	out	0x3e, r29	; 62
    3e84:	0f be       	out	0x3f, r0	; 63
    3e86:	cd bf       	out	0x3d, r28	; 61
    3e88:	df 91       	pop	r29
    3e8a:	cf 91       	pop	r28
    3e8c:	1f 91       	pop	r17
    3e8e:	0f 91       	pop	r16
    3e90:	ff 90       	pop	r15
    3e92:	ef 90       	pop	r14
    3e94:	df 90       	pop	r13
    3e96:	cf 90       	pop	r12
    3e98:	bf 90       	pop	r11
    3e9a:	08 95       	ret

00003e9c <_ZN7Kompass5angleEv>:

double Kompass::angle(){
    3e9c:	cf 92       	push	r12
    3e9e:	df 92       	push	r13
    3ea0:	ef 92       	push	r14
    3ea2:	ff 92       	push	r15
    3ea4:	cf 93       	push	r28
    3ea6:	df 93       	push	r29
    3ea8:	ec 01       	movw	r28, r24
	double angle=0;
	if (HMC5883L_readHeading())
    3eaa:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <_ZN7Kompass20HMC5883L_readHeadingEv>
    3eae:	81 11       	cpse	r24, r1
    3eb0:	57 c0       	rjmp	.+174    	; 0x3f60 <_ZN7Kompass5angleEv+0xc4>
	{
		angle=-1.0;
	}
	else{
		angle=atan2f(achsen[0],achsen[2])*180.0/M_PI+180.0;
    3eb2:	6c 81       	ldd	r22, Y+4	; 0x04
    3eb4:	7d 81       	ldd	r23, Y+5	; 0x05
    3eb6:	88 27       	eor	r24, r24
    3eb8:	77 fd       	sbrc	r23, 7
    3eba:	80 95       	com	r24
    3ebc:	98 2f       	mov	r25, r24
    3ebe:	0e 94 2e 25 	call	0x4a5c	; 0x4a5c <__floatsisf>
    3ec2:	6b 01       	movw	r12, r22
    3ec4:	7c 01       	movw	r14, r24
    3ec6:	68 81       	ld	r22, Y
    3ec8:	79 81       	ldd	r23, Y+1	; 0x01
    3eca:	88 27       	eor	r24, r24
    3ecc:	77 fd       	sbrc	r23, 7
    3ece:	80 95       	com	r24
    3ed0:	98 2f       	mov	r25, r24
    3ed2:	0e 94 2e 25 	call	0x4a5c	; 0x4a5c <__floatsisf>
    3ed6:	a7 01       	movw	r20, r14
    3ed8:	96 01       	movw	r18, r12
    3eda:	0e 94 39 24 	call	0x4872	; 0x4872 <atan2>
    3ede:	20 e0       	ldi	r18, 0x00	; 0
    3ee0:	30 e0       	ldi	r19, 0x00	; 0
    3ee2:	44 e3       	ldi	r20, 0x34	; 52
    3ee4:	53 e4       	ldi	r21, 0x43	; 67
    3ee6:	0e 94 8c 26 	call	0x4d18	; 0x4d18 <__mulsf3>
    3eea:	2b ed       	ldi	r18, 0xDB	; 219
    3eec:	3f e0       	ldi	r19, 0x0F	; 15
    3eee:	49 e4       	ldi	r20, 0x49	; 73
    3ef0:	50 e4       	ldi	r21, 0x40	; 64
    3ef2:	0e 94 93 24 	call	0x4926	; 0x4926 <__divsf3>
    3ef6:	20 e0       	ldi	r18, 0x00	; 0
    3ef8:	30 e0       	ldi	r19, 0x00	; 0
    3efa:	44 e3       	ldi	r20, 0x34	; 52
    3efc:	53 e4       	ldi	r21, 0x43	; 67
    3efe:	0e 94 c6 23 	call	0x478c	; 0x478c <__addsf3>
		//deklination
		angle+=2.35;
    3f02:	26 e6       	ldi	r18, 0x66	; 102
    3f04:	36 e6       	ldi	r19, 0x66	; 102
    3f06:	46 e1       	ldi	r20, 0x16	; 22
    3f08:	50 e4       	ldi	r21, 0x40	; 64
    3f0a:	0e 94 c6 23 	call	0x478c	; 0x478c <__addsf3>
    3f0e:	6b 01       	movw	r12, r22
    3f10:	7c 01       	movw	r14, r24
		//Normierung auf %360
		if (angle>=360)
    3f12:	20 e0       	ldi	r18, 0x00	; 0
    3f14:	30 e0       	ldi	r19, 0x00	; 0
    3f16:	44 eb       	ldi	r20, 0xB4	; 180
    3f18:	53 e4       	ldi	r21, 0x43	; 67
    3f1a:	0e 94 3c 26 	call	0x4c78	; 0x4c78 <__gesf2>
    3f1e:	88 23       	and	r24, r24
    3f20:	5c f0       	brlt	.+22     	; 0x3f38 <_ZN7Kompass5angleEv+0x9c>
		{
			angle-=360;
    3f22:	20 e0       	ldi	r18, 0x00	; 0
    3f24:	30 e0       	ldi	r19, 0x00	; 0
    3f26:	44 eb       	ldi	r20, 0xB4	; 180
    3f28:	53 e4       	ldi	r21, 0x43	; 67
    3f2a:	c7 01       	movw	r24, r14
    3f2c:	b6 01       	movw	r22, r12
    3f2e:	0e 94 c5 23 	call	0x478a	; 0x478a <__subsf3>
    3f32:	6b 01       	movw	r12, r22
    3f34:	7c 01       	movw	r14, r24
    3f36:	1c c0       	rjmp	.+56     	; 0x3f70 <_ZN7Kompass5angleEv+0xd4>
		}
		else if (angle < 0)
    3f38:	20 e0       	ldi	r18, 0x00	; 0
    3f3a:	30 e0       	ldi	r19, 0x00	; 0
    3f3c:	a9 01       	movw	r20, r18
    3f3e:	c7 01       	movw	r24, r14
    3f40:	b6 01       	movw	r22, r12
    3f42:	0e 94 8c 24 	call	0x4918	; 0x4918 <__cmpsf2>
    3f46:	88 23       	and	r24, r24
    3f48:	9c f4       	brge	.+38     	; 0x3f70 <_ZN7Kompass5angleEv+0xd4>
		{
			angle+=360;
    3f4a:	20 e0       	ldi	r18, 0x00	; 0
    3f4c:	30 e0       	ldi	r19, 0x00	; 0
    3f4e:	44 eb       	ldi	r20, 0xB4	; 180
    3f50:	53 e4       	ldi	r21, 0x43	; 67
    3f52:	c7 01       	movw	r24, r14
    3f54:	b6 01       	movw	r22, r12
    3f56:	0e 94 c6 23 	call	0x478c	; 0x478c <__addsf3>
    3f5a:	6b 01       	movw	r12, r22
    3f5c:	7c 01       	movw	r14, r24
    3f5e:	08 c0       	rjmp	.+16     	; 0x3f70 <_ZN7Kompass5angleEv+0xd4>

double Kompass::angle(){
	double angle=0;
	if (HMC5883L_readHeading())
	{
		angle=-1.0;
    3f60:	0f 2e       	mov	r0, r31
    3f62:	c1 2c       	mov	r12, r1
    3f64:	d1 2c       	mov	r13, r1
    3f66:	f0 e8       	ldi	r31, 0x80	; 128
    3f68:	ef 2e       	mov	r14, r31
    3f6a:	ff eb       	ldi	r31, 0xBF	; 191
    3f6c:	ff 2e       	mov	r15, r31
    3f6e:	f0 2d       	mov	r31, r0
		{
			angle+=360;
		}
	}
	
	HMC5883L_command(0x02,HMCSIGLEMODE);
    3f70:	41 e0       	ldi	r20, 0x01	; 1
    3f72:	62 e0       	ldi	r22, 0x02	; 2
    3f74:	ce 01       	movw	r24, r28
    3f76:	0e 94 4b 1e 	call	0x3c96	; 0x3c96 <_ZN7Kompass16HMC5883L_commandEhh>
	return angle;
}
    3f7a:	c7 01       	movw	r24, r14
    3f7c:	b6 01       	movw	r22, r12
    3f7e:	df 91       	pop	r29
    3f80:	cf 91       	pop	r28
    3f82:	ff 90       	pop	r15
    3f84:	ef 90       	pop	r14
    3f86:	df 90       	pop	r13
    3f88:	cf 90       	pop	r12
    3f8a:	08 95       	ret

00003f8c <_ZN7Kompass25kallibrierung_ruecksetzenEv>:

void Kompass::kallibrierung_ruecksetzen(){
    3f8c:	fc 01       	movw	r30, r24
	for (uint8_t i=0;i<3;i++)
	{
		max[i]=0;
    3f8e:	16 86       	std	Z+14, r1	; 0x0e
    3f90:	15 86       	std	Z+13, r1	; 0x0d
		min[i]=0;
    3f92:	14 8a       	std	Z+20, r1	; 0x14
    3f94:	13 8a       	std	Z+19, r1	; 0x13
		offset[i]=0;
    3f96:	10 86       	std	Z+8, r1	; 0x08
    3f98:	17 82       	std	Z+7, r1	; 0x07
}

void Kompass::kallibrierung_ruecksetzen(){
	for (uint8_t i=0;i<3;i++)
	{
		max[i]=0;
    3f9a:	10 8a       	std	Z+16, r1	; 0x10
    3f9c:	17 86       	std	Z+15, r1	; 0x0f
		min[i]=0;
    3f9e:	16 8a       	std	Z+22, r1	; 0x16
    3fa0:	15 8a       	std	Z+21, r1	; 0x15
		offset[i]=0;
    3fa2:	12 86       	std	Z+10, r1	; 0x0a
    3fa4:	11 86       	std	Z+9, r1	; 0x09
}

void Kompass::kallibrierung_ruecksetzen(){
	for (uint8_t i=0;i<3;i++)
	{
		max[i]=0;
    3fa6:	12 8a       	std	Z+18, r1	; 0x12
    3fa8:	11 8a       	std	Z+17, r1	; 0x11
		min[i]=0;
    3faa:	10 8e       	std	Z+24, r1	; 0x18
    3fac:	17 8a       	std	Z+23, r1	; 0x17
		offset[i]=0;
    3fae:	14 86       	std	Z+12, r1	; 0x0c
    3fb0:	13 86       	std	Z+11, r1	; 0x0b
    3fb2:	08 95       	ret

00003fb4 <_ZN6OutputC1Ehh>:
#include "Output.h"

// default constructor
Output::Output(uint8_t Portpraefix, uint8_t Pinnumber)
{
	Pin=Pinnumber;
    3fb4:	fc 01       	movw	r30, r24
    3fb6:	41 83       	std	Z+1, r20	; 0x01
	Port=Portpraefix;
    3fb8:	60 83       	st	Z, r22
	switch (Portpraefix)
    3fba:	63 34       	cpi	r22, 0x43	; 67
    3fbc:	89 f0       	breq	.+34     	; 0x3fe0 <_ZN6OutputC1Ehh+0x2c>
    3fbe:	64 34       	cpi	r22, 0x44	; 68
    3fc0:	e1 f0       	breq	.+56     	; 0x3ffa <_ZN6OutputC1Ehh+0x46>
    3fc2:	62 34       	cpi	r22, 0x42	; 66
    3fc4:	31 f5       	brne	.+76     	; 0x4012 <_ZN6OutputC1Ehh+0x5e>
	{
	case 'B':
		DDRB |= (1<<Pin);
    3fc6:	24 b1       	in	r18, 0x04	; 4
    3fc8:	81 e0       	ldi	r24, 0x01	; 1
    3fca:	90 e0       	ldi	r25, 0x00	; 0
    3fcc:	bc 01       	movw	r22, r24
    3fce:	02 c0       	rjmp	.+4      	; 0x3fd4 <_ZN6OutputC1Ehh+0x20>
    3fd0:	66 0f       	add	r22, r22
    3fd2:	77 1f       	adc	r23, r23
    3fd4:	4a 95       	dec	r20
    3fd6:	e2 f7       	brpl	.-8      	; 0x3fd0 <_ZN6OutputC1Ehh+0x1c>
    3fd8:	ab 01       	movw	r20, r22
    3fda:	42 2b       	or	r20, r18
    3fdc:	44 b9       	out	0x04, r20	; 4
		break;
    3fde:	08 95       	ret
	case 'C':
		DDRC |= (1<<Pin);
    3fe0:	27 b1       	in	r18, 0x07	; 7
    3fe2:	81 e0       	ldi	r24, 0x01	; 1
    3fe4:	90 e0       	ldi	r25, 0x00	; 0
    3fe6:	fc 01       	movw	r30, r24
    3fe8:	02 c0       	rjmp	.+4      	; 0x3fee <_ZN6OutputC1Ehh+0x3a>
    3fea:	ee 0f       	add	r30, r30
    3fec:	ff 1f       	adc	r31, r31
    3fee:	4a 95       	dec	r20
    3ff0:	e2 f7       	brpl	.-8      	; 0x3fea <_ZN6OutputC1Ehh+0x36>
    3ff2:	af 01       	movw	r20, r30
    3ff4:	42 2b       	or	r20, r18
    3ff6:	47 b9       	out	0x07, r20	; 7
		break;
    3ff8:	08 95       	ret
	case 'D':
		DDRD |= (1<<Pin);
    3ffa:	2a b1       	in	r18, 0x0a	; 10
    3ffc:	81 e0       	ldi	r24, 0x01	; 1
    3ffe:	90 e0       	ldi	r25, 0x00	; 0
    4000:	bc 01       	movw	r22, r24
    4002:	02 c0       	rjmp	.+4      	; 0x4008 <_ZN6OutputC1Ehh+0x54>
    4004:	66 0f       	add	r22, r22
    4006:	77 1f       	adc	r23, r23
    4008:	4a 95       	dec	r20
    400a:	e2 f7       	brpl	.-8      	; 0x4004 <_ZN6OutputC1Ehh+0x50>
    400c:	ab 01       	movw	r20, r22
    400e:	42 2b       	or	r20, r18
    4010:	4a b9       	out	0x0a, r20	; 10
    4012:	08 95       	ret

00004014 <_ZN6OutputD1Ev>:
		break;
	}
} //Output

// default destructor
Output::~Output()
    4014:	08 95       	ret

00004016 <_ZN6Output2onEv>:
{
} //~Output

void Output::on(){
	switch (Port)
    4016:	fc 01       	movw	r30, r24
    4018:	20 81       	ld	r18, Z
    401a:	23 34       	cpi	r18, 0x43	; 67
    401c:	91 f0       	breq	.+36     	; 0x4042 <_ZN6Output2onEv+0x2c>
    401e:	24 34       	cpi	r18, 0x44	; 68
    4020:	f9 f0       	breq	.+62     	; 0x4060 <_ZN6Output2onEv+0x4a>
    4022:	22 34       	cpi	r18, 0x42	; 66
    4024:	59 f5       	brne	.+86     	; 0x407c <_ZN6Output2onEv+0x66>
	{
		case 'B':
			PORTB |= (1<<Pin);
    4026:	45 b1       	in	r20, 0x05	; 5
    4028:	21 e0       	ldi	r18, 0x01	; 1
    402a:	30 e0       	ldi	r19, 0x00	; 0
    402c:	b9 01       	movw	r22, r18
    402e:	01 80       	ldd	r0, Z+1	; 0x01
    4030:	02 c0       	rjmp	.+4      	; 0x4036 <_ZN6Output2onEv+0x20>
    4032:	66 0f       	add	r22, r22
    4034:	77 1f       	adc	r23, r23
    4036:	0a 94       	dec	r0
    4038:	e2 f7       	brpl	.-8      	; 0x4032 <_ZN6Output2onEv+0x1c>
    403a:	cb 01       	movw	r24, r22
    403c:	84 2b       	or	r24, r20
    403e:	85 b9       	out	0x05, r24	; 5
			break;
    4040:	08 95       	ret
		case 'C':
			PORTC |= (1<<Pin);
    4042:	48 b1       	in	r20, 0x08	; 8
    4044:	21 e0       	ldi	r18, 0x01	; 1
    4046:	30 e0       	ldi	r19, 0x00	; 0
    4048:	b9 01       	movw	r22, r18
    404a:	fc 01       	movw	r30, r24
    404c:	01 80       	ldd	r0, Z+1	; 0x01
    404e:	02 c0       	rjmp	.+4      	; 0x4054 <_ZN6Output2onEv+0x3e>
    4050:	66 0f       	add	r22, r22
    4052:	77 1f       	adc	r23, r23
    4054:	0a 94       	dec	r0
    4056:	e2 f7       	brpl	.-8      	; 0x4050 <_ZN6Output2onEv+0x3a>
    4058:	cb 01       	movw	r24, r22
    405a:	84 2b       	or	r24, r20
    405c:	88 b9       	out	0x08, r24	; 8
			break;
    405e:	08 95       	ret
		case 'D':
			PORTD |= (1<<Pin);
    4060:	4b b1       	in	r20, 0x0b	; 11
    4062:	21 e0       	ldi	r18, 0x01	; 1
    4064:	30 e0       	ldi	r19, 0x00	; 0
    4066:	b9 01       	movw	r22, r18
    4068:	fc 01       	movw	r30, r24
    406a:	01 80       	ldd	r0, Z+1	; 0x01
    406c:	02 c0       	rjmp	.+4      	; 0x4072 <_ZN6Output2onEv+0x5c>
    406e:	66 0f       	add	r22, r22
    4070:	77 1f       	adc	r23, r23
    4072:	0a 94       	dec	r0
    4074:	e2 f7       	brpl	.-8      	; 0x406e <_ZN6Output2onEv+0x58>
    4076:	cb 01       	movw	r24, r22
    4078:	84 2b       	or	r24, r20
    407a:	8b b9       	out	0x0b, r24	; 11
    407c:	08 95       	ret

0000407e <_ZN6Output4isonEv>:
	}
}

uint8_t Output::ison(){
	uint8_t returnparam=0;
	switch (Port)
    407e:	fc 01       	movw	r30, r24
    4080:	20 81       	ld	r18, Z
    4082:	23 34       	cpi	r18, 0x43	; 67
    4084:	81 f0       	breq	.+32     	; 0x40a6 <_ZN6Output4isonEv+0x28>
    4086:	24 34       	cpi	r18, 0x44	; 68
    4088:	d9 f0       	breq	.+54     	; 0x40c0 <_ZN6Output4isonEv+0x42>
    408a:	22 34       	cpi	r18, 0x42	; 66
    408c:	31 f5       	brne	.+76     	; 0x40da <_ZN6Output4isonEv+0x5c>
	{
		case 'B':
			if ((PORTB&(1<<Pin)))
    408e:	25 b1       	in	r18, 0x05	; 5
    4090:	30 e0       	ldi	r19, 0x00	; 0
    4092:	a9 01       	movw	r20, r18
    4094:	01 80       	ldd	r0, Z+1	; 0x01
    4096:	02 c0       	rjmp	.+4      	; 0x409c <_ZN6Output4isonEv+0x1e>
    4098:	55 95       	asr	r21
    409a:	47 95       	ror	r20
    409c:	0a 94       	dec	r0
    409e:	e2 f7       	brpl	.-8      	; 0x4098 <_ZN6Output4isonEv+0x1a>
    40a0:	ca 01       	movw	r24, r20
    40a2:	81 70       	andi	r24, 0x01	; 1
    40a4:	08 95       	ret
			{
				returnparam = 1;
			}
			break;
		case 'C':
			if ((PORTC&(1<<Pin)))
    40a6:	28 b1       	in	r18, 0x08	; 8
    40a8:	30 e0       	ldi	r19, 0x00	; 0
    40aa:	a9 01       	movw	r20, r18
    40ac:	fc 01       	movw	r30, r24
    40ae:	01 80       	ldd	r0, Z+1	; 0x01
    40b0:	02 c0       	rjmp	.+4      	; 0x40b6 <_ZN6Output4isonEv+0x38>
    40b2:	55 95       	asr	r21
    40b4:	47 95       	ror	r20
    40b6:	0a 94       	dec	r0
    40b8:	e2 f7       	brpl	.-8      	; 0x40b2 <_ZN6Output4isonEv+0x34>
    40ba:	ca 01       	movw	r24, r20
    40bc:	81 70       	andi	r24, 0x01	; 1
    40be:	08 95       	ret
			{
				returnparam = 1;
			}
			break;
		case 'D':
			if ((PORTD&(1<<Pin)))
    40c0:	2b b1       	in	r18, 0x0b	; 11
    40c2:	30 e0       	ldi	r19, 0x00	; 0
    40c4:	a9 01       	movw	r20, r18
    40c6:	fc 01       	movw	r30, r24
    40c8:	01 80       	ldd	r0, Z+1	; 0x01
    40ca:	02 c0       	rjmp	.+4      	; 0x40d0 <_ZN6Output4isonEv+0x52>
    40cc:	55 95       	asr	r21
    40ce:	47 95       	ror	r20
    40d0:	0a 94       	dec	r0
    40d2:	e2 f7       	brpl	.-8      	; 0x40cc <_ZN6Output4isonEv+0x4e>
    40d4:	ca 01       	movw	r24, r20
    40d6:	81 70       	andi	r24, 0x01	; 1
    40d8:	08 95       	ret
			{
				returnparam = 1;
			}
			break;
		default:
		returnparam = 2;
    40da:	82 e0       	ldi	r24, 0x02	; 2
			break;
	}
	return returnparam;
}
    40dc:	08 95       	ret

000040de <_ZN6Output3offEv>:

void Output::off(){
	switch (Port)
    40de:	fc 01       	movw	r30, r24
    40e0:	20 81       	ld	r18, Z
    40e2:	23 34       	cpi	r18, 0x43	; 67
    40e4:	99 f0       	breq	.+38     	; 0x410c <_ZN6Output3offEv+0x2e>
    40e6:	24 34       	cpi	r18, 0x44	; 68
    40e8:	09 f1       	breq	.+66     	; 0x412c <_ZN6Output3offEv+0x4e>
    40ea:	22 34       	cpi	r18, 0x42	; 66
    40ec:	71 f5       	brne	.+92     	; 0x414a <_ZN6Output3offEv+0x6c>
	{
		case 'B':
			PORTB &= ~(1<<Pin);
    40ee:	45 b1       	in	r20, 0x05	; 5
    40f0:	21 e0       	ldi	r18, 0x01	; 1
    40f2:	30 e0       	ldi	r19, 0x00	; 0
    40f4:	b9 01       	movw	r22, r18
    40f6:	01 80       	ldd	r0, Z+1	; 0x01
    40f8:	02 c0       	rjmp	.+4      	; 0x40fe <_ZN6Output3offEv+0x20>
    40fa:	66 0f       	add	r22, r22
    40fc:	77 1f       	adc	r23, r23
    40fe:	0a 94       	dec	r0
    4100:	e2 f7       	brpl	.-8      	; 0x40fa <_ZN6Output3offEv+0x1c>
    4102:	cb 01       	movw	r24, r22
    4104:	80 95       	com	r24
    4106:	84 23       	and	r24, r20
    4108:	85 b9       	out	0x05, r24	; 5
			break;
    410a:	08 95       	ret
		case 'C':
			PORTC &= ~(1<<Pin);
    410c:	48 b1       	in	r20, 0x08	; 8
    410e:	21 e0       	ldi	r18, 0x01	; 1
    4110:	30 e0       	ldi	r19, 0x00	; 0
    4112:	b9 01       	movw	r22, r18
    4114:	fc 01       	movw	r30, r24
    4116:	01 80       	ldd	r0, Z+1	; 0x01
    4118:	02 c0       	rjmp	.+4      	; 0x411e <_ZN6Output3offEv+0x40>
    411a:	66 0f       	add	r22, r22
    411c:	77 1f       	adc	r23, r23
    411e:	0a 94       	dec	r0
    4120:	e2 f7       	brpl	.-8      	; 0x411a <_ZN6Output3offEv+0x3c>
    4122:	cb 01       	movw	r24, r22
    4124:	80 95       	com	r24
    4126:	84 23       	and	r24, r20
    4128:	88 b9       	out	0x08, r24	; 8
			break;
    412a:	08 95       	ret
		case 'D':
			PORTD &= ~(1<<Pin);
    412c:	4b b1       	in	r20, 0x0b	; 11
    412e:	21 e0       	ldi	r18, 0x01	; 1
    4130:	30 e0       	ldi	r19, 0x00	; 0
    4132:	b9 01       	movw	r22, r18
    4134:	fc 01       	movw	r30, r24
    4136:	01 80       	ldd	r0, Z+1	; 0x01
    4138:	02 c0       	rjmp	.+4      	; 0x413e <_ZN6Output3offEv+0x60>
    413a:	66 0f       	add	r22, r22
    413c:	77 1f       	adc	r23, r23
    413e:	0a 94       	dec	r0
    4140:	e2 f7       	brpl	.-8      	; 0x413a <_ZN6Output3offEv+0x5c>
    4142:	cb 01       	movw	r24, r22
    4144:	80 95       	com	r24
    4146:	84 23       	and	r24, r20
    4148:	8b b9       	out	0x0b, r24	; 11
    414a:	08 95       	ret

0000414c <_ZN6Output6toggleEv>:
			break;
	}
}

void Output::toggle(){
	switch (Port)
    414c:	fc 01       	movw	r30, r24
    414e:	20 81       	ld	r18, Z
    4150:	23 34       	cpi	r18, 0x43	; 67
    4152:	a1 f0       	breq	.+40     	; 0x417c <_ZN6Output6toggleEv+0x30>
    4154:	24 34       	cpi	r18, 0x44	; 68
    4156:	19 f1       	breq	.+70     	; 0x419e <_ZN6Output6toggleEv+0x52>
    4158:	22 34       	cpi	r18, 0x42	; 66
    415a:	89 f5       	brne	.+98     	; 0x41be <_ZN6Output6toggleEv+0x72>
	{
		case 'B':
			if ((PORTB&(1<<Pin)))
    415c:	25 b1       	in	r18, 0x05	; 5
    415e:	30 e0       	ldi	r19, 0x00	; 0
    4160:	01 80       	ldd	r0, Z+1	; 0x01
    4162:	02 c0       	rjmp	.+4      	; 0x4168 <_ZN6Output6toggleEv+0x1c>
    4164:	35 95       	asr	r19
    4166:	27 95       	ror	r18
    4168:	0a 94       	dec	r0
    416a:	e2 f7       	brpl	.-8      	; 0x4164 <_ZN6Output6toggleEv+0x18>
    416c:	20 ff       	sbrs	r18, 0
    416e:	03 c0       	rjmp	.+6      	; 0x4176 <_ZN6Output6toggleEv+0x2a>
			{
				off();
    4170:	0e 94 6f 20 	call	0x40de	; 0x40de <_ZN6Output3offEv>
    4174:	08 95       	ret
			}
			else{
				on();
    4176:	0e 94 0b 20 	call	0x4016	; 0x4016 <_ZN6Output2onEv>
    417a:	08 95       	ret
			}
			break;
		case 'C':
			if ((PORTC&(1<<Pin)))
    417c:	28 b1       	in	r18, 0x08	; 8
    417e:	30 e0       	ldi	r19, 0x00	; 0
    4180:	fc 01       	movw	r30, r24
    4182:	01 80       	ldd	r0, Z+1	; 0x01
    4184:	02 c0       	rjmp	.+4      	; 0x418a <_ZN6Output6toggleEv+0x3e>
    4186:	35 95       	asr	r19
    4188:	27 95       	ror	r18
    418a:	0a 94       	dec	r0
    418c:	e2 f7       	brpl	.-8      	; 0x4186 <_ZN6Output6toggleEv+0x3a>
    418e:	20 ff       	sbrs	r18, 0
    4190:	03 c0       	rjmp	.+6      	; 0x4198 <_ZN6Output6toggleEv+0x4c>
			{
				off();
    4192:	0e 94 6f 20 	call	0x40de	; 0x40de <_ZN6Output3offEv>
    4196:	08 95       	ret
			}
			else{
				on();
    4198:	0e 94 0b 20 	call	0x4016	; 0x4016 <_ZN6Output2onEv>
    419c:	08 95       	ret
			}
			break;
		case 'D':
			if ((PORTD&(1<<Pin)))
    419e:	2b b1       	in	r18, 0x0b	; 11
    41a0:	30 e0       	ldi	r19, 0x00	; 0
    41a2:	fc 01       	movw	r30, r24
    41a4:	01 80       	ldd	r0, Z+1	; 0x01
    41a6:	02 c0       	rjmp	.+4      	; 0x41ac <_ZN6Output6toggleEv+0x60>
    41a8:	35 95       	asr	r19
    41aa:	27 95       	ror	r18
    41ac:	0a 94       	dec	r0
    41ae:	e2 f7       	brpl	.-8      	; 0x41a8 <_ZN6Output6toggleEv+0x5c>
    41b0:	20 ff       	sbrs	r18, 0
    41b2:	03 c0       	rjmp	.+6      	; 0x41ba <_ZN6Output6toggleEv+0x6e>
			{
				off();
    41b4:	0e 94 6f 20 	call	0x40de	; 0x40de <_ZN6Output3offEv>
    41b8:	08 95       	ret
			}
			else{
				on();
    41ba:	0e 94 0b 20 	call	0x4016	; 0x4016 <_ZN6Output2onEv>
    41be:	08 95       	ret

000041c0 <_ZN8PressureD1Ev>:
	Pressure0=1;
	LPS25H_initialize();
} //Pressure

// default destructor
Pressure::~Pressure()
    41c0:	0d 96       	adiw	r24, 0x0d	; 13
    41c2:	0e 94 4f 1d 	call	0x3a9e	; 0x3a9e <_ZN3I2CD1Ev>
    41c6:	08 95       	ret

000041c8 <_ZN8Pressure14LPS25H_commandEhh>:
{
} //~Pressure

void Pressure::LPS25H_command(uint8_t add, uint8_t command){
    41c8:	0f 93       	push	r16
    41ca:	1f 93       	push	r17
    41cc:	cf 93       	push	r28
    41ce:	df 93       	push	r29
    41d0:	06 2f       	mov	r16, r22
    41d2:	14 2f       	mov	r17, r20
	i2c.twi_start();
    41d4:	ec 01       	movw	r28, r24
    41d6:	2d 96       	adiw	r28, 0x0d	; 13
    41d8:	ce 01       	movw	r24, r28
    41da:	0e 94 50 1d 	call	0x3aa0	; 0x3aa0 <_ZN3I2C9twi_startEv>
	i2c.twi_write(LPS25H_SA1_Write);
    41de:	6a eb       	ldi	r22, 0xBA	; 186
    41e0:	ce 01       	movw	r24, r28
    41e2:	0e 94 58 1d 	call	0x3ab0	; 0x3ab0 <_ZN3I2C9twi_writeEh>
	i2c.twi_write(add);
    41e6:	60 2f       	mov	r22, r16
    41e8:	ce 01       	movw	r24, r28
    41ea:	0e 94 58 1d 	call	0x3ab0	; 0x3ab0 <_ZN3I2C9twi_writeEh>
	i2c.twi_write(command);
    41ee:	61 2f       	mov	r22, r17
    41f0:	ce 01       	movw	r24, r28
    41f2:	0e 94 58 1d 	call	0x3ab0	; 0x3ab0 <_ZN3I2C9twi_writeEh>
	i2c.twi_stop();
    41f6:	ce 01       	movw	r24, r28
    41f8:	0e 94 54 1d 	call	0x3aa8	; 0x3aa8 <_ZN3I2C8twi_stopEv>
}
    41fc:	df 91       	pop	r29
    41fe:	cf 91       	pop	r28
    4200:	1f 91       	pop	r17
    4202:	0f 91       	pop	r16
    4204:	08 95       	ret

00004206 <_ZN8Pressure17LPS25H_initializeEv>:

void Pressure::LPS25H_initialize(){
    4206:	cf 93       	push	r28
    4208:	df 93       	push	r29
    420a:	ec 01       	movw	r28, r24
	uint8_t temp=0;
	//internal averages Pressure and Temperature (both 8)
	temp &= ~((1<<AVGT1) | (1<<AVGT0) | (1<<AVGP1) | (1<<AVGP0)); 
	LPS25H_command(RES_CONF,temp);
    420c:	40 e0       	ldi	r20, 0x00	; 0
    420e:	60 e1       	ldi	r22, 0x10	; 16
    4210:	0e 94 e4 20 	call	0x41c8	; 0x41c8 <_ZN8Pressure14LPS25H_commandEhh>
	temp=0;
	//Enable device and set a single shot as well as Lock while reading
	temp |= (1<<PD) | (1<<BDU) | (1<<ODR1);
	LPS25H_command(CTRL_REG1,temp);
    4214:	44 ea       	ldi	r20, 0xA4	; 164
    4216:	60 e2       	ldi	r22, 0x20	; 32
    4218:	ce 01       	movw	r24, r28
    421a:	0e 94 e4 20 	call	0x41c8	; 0x41c8 <_ZN8Pressure14LPS25H_commandEhh>
	temp=0;
	//FIFO on, no watermark no reset, reboot memory content, FIFO MEAN Mode
	temp |= (1<<BOOT) | (1<<FIFO_EN) | (1<<FIFO_MEAN_DEC);
	LPS25H_command(CTRL_REG2,temp);
    421e:	40 ed       	ldi	r20, 0xD0	; 208
    4220:	61 e2       	ldi	r22, 0x21	; 33
    4222:	ce 01       	movw	r24, r28
    4224:	0e 94 e4 20 	call	0x41c8	; 0x41c8 <_ZN8Pressure14LPS25H_commandEhh>
	temp=0;
	//FIFO Controll register for MEAN Mode und 8 moving averages
	temp|=(1<<F_MODE2) | (1<<F_MODE1) | (1<<WTM_POINT0) | (1<<WTM_POINT1) | (1<<WTM_POINT2);
	LPS25H_command(FIFO_CTRL,temp);
    4228:	47 ec       	ldi	r20, 0xC7	; 199
    422a:	6e e2       	ldi	r22, 0x2E	; 46
    422c:	ce 01       	movw	r24, r28
    422e:	0e 94 e4 20 	call	0x41c8	; 0x41c8 <_ZN8Pressure14LPS25H_commandEhh>
	//CTRL_REG4 not set
	//INTERRUPT_CFG not set
	//no threshold used
	//no Pressure offset used
	
}
    4232:	df 91       	pop	r29
    4234:	cf 91       	pop	r28
    4236:	08 95       	ret

00004238 <_ZN8PressureC1Ev>:


#include "Pressure.h"

// default constructor
Pressure::Pressure()
    4238:	cf 93       	push	r28
    423a:	df 93       	push	r29
    423c:	ec 01       	movw	r28, r24
    423e:	0d 96       	adiw	r24, 0x0d	; 13
    4240:	0e 94 4b 1d 	call	0x3a96	; 0x3a96 <_ZN3I2CC1Ev>
{
	Press = 0;
    4244:	18 82       	st	Y, r1
    4246:	19 82       	std	Y+1, r1	; 0x01
    4248:	1a 82       	std	Y+2, r1	; 0x02
    424a:	1b 82       	std	Y+3, r1	; 0x03
	Tempera = 0;
    424c:	1c 82       	std	Y+4, r1	; 0x04
    424e:	1d 82       	std	Y+5, r1	; 0x05
    4250:	1e 82       	std	Y+6, r1	; 0x06
    4252:	1f 82       	std	Y+7, r1	; 0x07
	Tempoffset = -4;	//Aus Erfahrung
    4254:	8c ef       	ldi	r24, 0xFC	; 252
    4256:	88 87       	std	Y+8, r24	; 0x08
	Pressure0=1;
    4258:	40 e0       	ldi	r20, 0x00	; 0
    425a:	50 e0       	ldi	r21, 0x00	; 0
    425c:	60 e8       	ldi	r22, 0x80	; 128
    425e:	7f e3       	ldi	r23, 0x3F	; 63
    4260:	49 87       	std	Y+9, r20	; 0x09
    4262:	5a 87       	std	Y+10, r21	; 0x0a
    4264:	6b 87       	std	Y+11, r22	; 0x0b
    4266:	7c 87       	std	Y+12, r23	; 0x0c
	LPS25H_initialize();
    4268:	ce 01       	movw	r24, r28
    426a:	0e 94 03 21 	call	0x4206	; 0x4206 <_ZN8Pressure17LPS25H_initializeEv>
} //Pressure
    426e:	df 91       	pop	r29
    4270:	cf 91       	pop	r28
    4272:	08 95       	ret

00004274 <_ZN8Pressure18READ_Pressure_onceEv>:
	//no threshold used
	//no Pressure offset used
	
}

void Pressure::READ_Pressure_once(){
    4274:	af 92       	push	r10
    4276:	bf 92       	push	r11
    4278:	cf 92       	push	r12
    427a:	df 92       	push	r13
    427c:	ef 92       	push	r14
    427e:	ff 92       	push	r15
    4280:	1f 93       	push	r17
    4282:	cf 93       	push	r28
    4284:	df 93       	push	r29
    4286:	00 d0       	rcall	.+0      	; 0x4288 <_ZN8Pressure18READ_Pressure_onceEv+0x14>
    4288:	1f 92       	push	r1
    428a:	cd b7       	in	r28, 0x3d	; 61
    428c:	de b7       	in	r29, 0x3e	; 62
    428e:	5c 01       	movw	r10, r24
	uint8_t Wertedruck[3];
	cli();
    4290:	f8 94       	cli
	i2c.twi_start();
    4292:	7c 01       	movw	r14, r24
    4294:	8d e0       	ldi	r24, 0x0D	; 13
    4296:	e8 0e       	add	r14, r24
    4298:	f1 1c       	adc	r15, r1
    429a:	c7 01       	movw	r24, r14
    429c:	0e 94 50 1d 	call	0x3aa0	; 0x3aa0 <_ZN3I2C9twi_startEv>
	i2c.twi_write(LPS25H_SA1_Write);
    42a0:	6a eb       	ldi	r22, 0xBA	; 186
    42a2:	c7 01       	movw	r24, r14
    42a4:	0e 94 58 1d 	call	0x3ab0	; 0x3ab0 <_ZN3I2C9twi_writeEh>
	i2c.twi_write(PRESS_OUT_XL|(1<<autoincrement));
    42a8:	68 ea       	ldi	r22, 0xA8	; 168
    42aa:	c7 01       	movw	r24, r14
    42ac:	0e 94 58 1d 	call	0x3ab0	; 0x3ab0 <_ZN3I2C9twi_writeEh>
	i2c.twi_start();
    42b0:	c7 01       	movw	r24, r14
    42b2:	0e 94 50 1d 	call	0x3aa0	; 0x3aa0 <_ZN3I2C9twi_startEv>
	i2c.twi_write(LPS25H_SA1_READ);
    42b6:	6b eb       	ldi	r22, 0xBB	; 187
    42b8:	c7 01       	movw	r24, r14
    42ba:	0e 94 58 1d 	call	0x3ab0	; 0x3ab0 <_ZN3I2C9twi_writeEh>
    42be:	fe 01       	movw	r30, r28
    42c0:	31 96       	adiw	r30, 0x01	; 1
    42c2:	6f 01       	movw	r12, r30
	for (uint8_t i=0;i<3;i++)
    42c4:	10 e0       	ldi	r17, 0x00	; 0
	{
		if (i<2)
    42c6:	12 30       	cpi	r17, 0x02	; 2
    42c8:	38 f4       	brcc	.+14     	; 0x42d8 <_ZN8Pressure18READ_Pressure_onceEv+0x64>
		{
			Wertedruck[i] = i2c.twi_read(1);
    42ca:	61 e0       	ldi	r22, 0x01	; 1
    42cc:	c7 01       	movw	r24, r14
    42ce:	0e 94 68 1d 	call	0x3ad0	; 0x3ad0 <_ZN3I2C8twi_readEh>
    42d2:	f6 01       	movw	r30, r12
    42d4:	80 83       	st	Z, r24
    42d6:	06 c0       	rjmp	.+12     	; 0x42e4 <_ZN8Pressure18READ_Pressure_onceEv+0x70>
		}
		else{
			Wertedruck[i] = i2c.twi_read(0);
    42d8:	60 e0       	ldi	r22, 0x00	; 0
    42da:	c7 01       	movw	r24, r14
    42dc:	0e 94 68 1d 	call	0x3ad0	; 0x3ad0 <_ZN3I2C8twi_readEh>
    42e0:	f6 01       	movw	r30, r12
    42e2:	80 83       	st	Z, r24
	i2c.twi_start();
	i2c.twi_write(LPS25H_SA1_Write);
	i2c.twi_write(PRESS_OUT_XL|(1<<autoincrement));
	i2c.twi_start();
	i2c.twi_write(LPS25H_SA1_READ);
	for (uint8_t i=0;i<3;i++)
    42e4:	1f 5f       	subi	r17, 0xFF	; 255
    42e6:	ff ef       	ldi	r31, 0xFF	; 255
    42e8:	cf 1a       	sub	r12, r31
    42ea:	df 0a       	sbc	r13, r31
    42ec:	13 30       	cpi	r17, 0x03	; 3
    42ee:	59 f7       	brne	.-42     	; 0x42c6 <_ZN8Pressure18READ_Pressure_onceEv+0x52>
		}
		else{
			Wertedruck[i] = i2c.twi_read(0);
		}
	}
	i2c.twi_stop();
    42f0:	c7 01       	movw	r24, r14
    42f2:	0e 94 54 1d 	call	0x3aa8	; 0x3aa8 <_ZN3I2C8twi_stopEv>
	Press = ((double)Wertedruck[2]*65536);
    42f6:	6b 81       	ldd	r22, Y+3	; 0x03
    42f8:	70 e0       	ldi	r23, 0x00	; 0
    42fa:	80 e0       	ldi	r24, 0x00	; 0
    42fc:	90 e0       	ldi	r25, 0x00	; 0
    42fe:	0e 94 2c 25 	call	0x4a58	; 0x4a58 <__floatunsisf>
    4302:	20 e0       	ldi	r18, 0x00	; 0
    4304:	30 e0       	ldi	r19, 0x00	; 0
    4306:	40 e8       	ldi	r20, 0x80	; 128
    4308:	57 e4       	ldi	r21, 0x47	; 71
    430a:	0e 94 8c 26 	call	0x4d18	; 0x4d18 <__mulsf3>
    430e:	6b 01       	movw	r12, r22
    4310:	7c 01       	movw	r14, r24
	Press += ((double)Wertedruck[1]*256);
    4312:	6a 81       	ldd	r22, Y+2	; 0x02
    4314:	70 e0       	ldi	r23, 0x00	; 0
    4316:	80 e0       	ldi	r24, 0x00	; 0
    4318:	90 e0       	ldi	r25, 0x00	; 0
    431a:	0e 94 2c 25 	call	0x4a58	; 0x4a58 <__floatunsisf>
    431e:	20 e0       	ldi	r18, 0x00	; 0
    4320:	30 e0       	ldi	r19, 0x00	; 0
    4322:	40 e8       	ldi	r20, 0x80	; 128
    4324:	53 e4       	ldi	r21, 0x43	; 67
    4326:	0e 94 8c 26 	call	0x4d18	; 0x4d18 <__mulsf3>
    432a:	9b 01       	movw	r18, r22
    432c:	ac 01       	movw	r20, r24
    432e:	c7 01       	movw	r24, r14
    4330:	b6 01       	movw	r22, r12
    4332:	0e 94 c6 23 	call	0x478c	; 0x478c <__addsf3>
    4336:	6b 01       	movw	r12, r22
    4338:	7c 01       	movw	r14, r24
	Press += (double)Wertedruck[0];
    433a:	69 81       	ldd	r22, Y+1	; 0x01
    433c:	70 e0       	ldi	r23, 0x00	; 0
    433e:	80 e0       	ldi	r24, 0x00	; 0
    4340:	90 e0       	ldi	r25, 0x00	; 0
    4342:	0e 94 2c 25 	call	0x4a58	; 0x4a58 <__floatunsisf>
    4346:	9b 01       	movw	r18, r22
    4348:	ac 01       	movw	r20, r24
    434a:	c7 01       	movw	r24, r14
    434c:	b6 01       	movw	r22, r12
    434e:	0e 94 c6 23 	call	0x478c	; 0x478c <__addsf3>
	//Press = (Wertedruck[0] + (Wertedruck[1]*256) + (Wertedruck[2]*65536));
	Press/=4096.0;
    4352:	20 e0       	ldi	r18, 0x00	; 0
    4354:	30 e0       	ldi	r19, 0x00	; 0
    4356:	40 e8       	ldi	r20, 0x80	; 128
    4358:	59 e3       	ldi	r21, 0x39	; 57
    435a:	0e 94 8c 26 	call	0x4d18	; 0x4d18 <__mulsf3>
    435e:	f5 01       	movw	r30, r10
    4360:	60 83       	st	Z, r22
    4362:	71 83       	std	Z+1, r23	; 0x01
    4364:	82 83       	std	Z+2, r24	; 0x02
    4366:	93 83       	std	Z+3, r25	; 0x03
	sei();
    4368:	78 94       	sei
}
    436a:	0f 90       	pop	r0
    436c:	0f 90       	pop	r0
    436e:	0f 90       	pop	r0
    4370:	df 91       	pop	r29
    4372:	cf 91       	pop	r28
    4374:	1f 91       	pop	r17
    4376:	ff 90       	pop	r15
    4378:	ef 90       	pop	r14
    437a:	df 90       	pop	r13
    437c:	cf 90       	pop	r12
    437e:	bf 90       	pop	r11
    4380:	af 90       	pop	r10
    4382:	08 95       	ret

00004384 <_ZN8Pressure16READ_TemperatureEv>:

void Pressure::READ_Temperature(){
    4384:	cf 92       	push	r12
    4386:	df 92       	push	r13
    4388:	ef 92       	push	r14
    438a:	ff 92       	push	r15
    438c:	0f 93       	push	r16
    438e:	1f 93       	push	r17
    4390:	cf 93       	push	r28
    4392:	df 93       	push	r29
    4394:	00 d0       	rcall	.+0      	; 0x4396 <_ZN8Pressure16READ_TemperatureEv+0x12>
    4396:	cd b7       	in	r28, 0x3d	; 61
    4398:	de b7       	in	r29, 0x3e	; 62
    439a:	8c 01       	movw	r16, r24
	cli();
    439c:	f8 94       	cli
	uint8_t Wert[2];
	i2c.twi_start();
    439e:	7c 01       	movw	r14, r24
    43a0:	8d e0       	ldi	r24, 0x0D	; 13
    43a2:	e8 0e       	add	r14, r24
    43a4:	f1 1c       	adc	r15, r1
    43a6:	c7 01       	movw	r24, r14
    43a8:	0e 94 50 1d 	call	0x3aa0	; 0x3aa0 <_ZN3I2C9twi_startEv>
	i2c.twi_write(LPS25H_SA1_Write);
    43ac:	6a eb       	ldi	r22, 0xBA	; 186
    43ae:	c7 01       	movw	r24, r14
    43b0:	0e 94 58 1d 	call	0x3ab0	; 0x3ab0 <_ZN3I2C9twi_writeEh>
	i2c.twi_write(TEMP_OUT_L|(1<<autoincrement));
    43b4:	6b ea       	ldi	r22, 0xAB	; 171
    43b6:	c7 01       	movw	r24, r14
    43b8:	0e 94 58 1d 	call	0x3ab0	; 0x3ab0 <_ZN3I2C9twi_writeEh>
	i2c.twi_start();
    43bc:	c7 01       	movw	r24, r14
    43be:	0e 94 50 1d 	call	0x3aa0	; 0x3aa0 <_ZN3I2C9twi_startEv>
	i2c.twi_write(LPS25H_SA1_READ);
    43c2:	6b eb       	ldi	r22, 0xBB	; 187
    43c4:	c7 01       	movw	r24, r14
    43c6:	0e 94 58 1d 	call	0x3ab0	; 0x3ab0 <_ZN3I2C9twi_writeEh>
    43ca:	cc 24       	eor	r12, r12
    43cc:	c3 94       	inc	r12
    43ce:	d1 2c       	mov	r13, r1
    43d0:	02 c0       	rjmp	.+4      	; 0x43d6 <_ZN8Pressure16READ_TemperatureEv+0x52>
    43d2:	d3 94       	inc	r13
    43d4:	c3 94       	inc	r12
	for (uint8_t i=0;i<2;i++)
	{
		if (i<1)
    43d6:	d1 10       	cpse	r13, r1
    43d8:	06 c0       	rjmp	.+12     	; 0x43e6 <_ZN8Pressure16READ_TemperatureEv+0x62>
		{
			Wert[i] = i2c.twi_read(1);
    43da:	61 e0       	ldi	r22, 0x01	; 1
    43dc:	c7 01       	movw	r24, r14
    43de:	0e 94 68 1d 	call	0x3ad0	; 0x3ad0 <_ZN3I2C8twi_readEh>
    43e2:	89 83       	std	Y+1, r24	; 0x01
    43e4:	f6 cf       	rjmp	.-20     	; 0x43d2 <_ZN8Pressure16READ_TemperatureEv+0x4e>
		}
		else{
			Wert[i] = i2c.twi_read(0);
    43e6:	60 e0       	ldi	r22, 0x00	; 0
    43e8:	c7 01       	movw	r24, r14
    43ea:	0e 94 68 1d 	call	0x3ad0	; 0x3ad0 <_ZN3I2C8twi_readEh>
    43ee:	e1 e0       	ldi	r30, 0x01	; 1
    43f0:	f0 e0       	ldi	r31, 0x00	; 0
    43f2:	ec 0f       	add	r30, r28
    43f4:	fd 1f       	adc	r31, r29
    43f6:	ed 0d       	add	r30, r13
    43f8:	f1 1d       	adc	r31, r1
    43fa:	80 83       	st	Z, r24
	i2c.twi_start();
	i2c.twi_write(LPS25H_SA1_Write);
	i2c.twi_write(TEMP_OUT_L|(1<<autoincrement));
	i2c.twi_start();
	i2c.twi_write(LPS25H_SA1_READ);
	for (uint8_t i=0;i<2;i++)
    43fc:	e1 e0       	ldi	r30, 0x01	; 1
    43fe:	ec 15       	cp	r30, r12
    4400:	40 f7       	brcc	.-48     	; 0x43d2 <_ZN8Pressure16READ_TemperatureEv+0x4e>
		}
		else{
			Wert[i] = i2c.twi_read(0);
		}
	}
	i2c.twi_stop();
    4402:	c7 01       	movw	r24, r14
    4404:	0e 94 54 1d 	call	0x3aa8	; 0x3aa8 <_ZN3I2C8twi_stopEv>
	Tempera = ((int16_t)(Wert[0]+(Wert[1]<<8)))/480.0;
    4408:	89 81       	ldd	r24, Y+1	; 0x01
    440a:	6a 81       	ldd	r22, Y+2	; 0x02
    440c:	70 e0       	ldi	r23, 0x00	; 0
    440e:	76 2f       	mov	r23, r22
    4410:	66 27       	eor	r22, r22
    4412:	68 0f       	add	r22, r24
    4414:	71 1d       	adc	r23, r1
    4416:	88 27       	eor	r24, r24
    4418:	77 fd       	sbrc	r23, 7
    441a:	80 95       	com	r24
    441c:	98 2f       	mov	r25, r24
    441e:	0e 94 2e 25 	call	0x4a5c	; 0x4a5c <__floatsisf>
    4422:	20 e0       	ldi	r18, 0x00	; 0
    4424:	30 e0       	ldi	r19, 0x00	; 0
    4426:	40 ef       	ldi	r20, 0xF0	; 240
    4428:	53 e4       	ldi	r21, 0x43	; 67
    442a:	0e 94 93 24 	call	0x4926	; 0x4926 <__divsf3>
    442e:	6b 01       	movw	r12, r22
    4430:	7c 01       	movw	r14, r24
	Tempera+=42.5+Tempoffset;
    4432:	f8 01       	movw	r30, r16
    4434:	60 85       	ldd	r22, Z+8	; 0x08
    4436:	77 27       	eor	r23, r23
    4438:	67 fd       	sbrc	r22, 7
    443a:	70 95       	com	r23
    443c:	87 2f       	mov	r24, r23
    443e:	97 2f       	mov	r25, r23
    4440:	0e 94 2e 25 	call	0x4a5c	; 0x4a5c <__floatsisf>
    4444:	20 e0       	ldi	r18, 0x00	; 0
    4446:	30 e0       	ldi	r19, 0x00	; 0
    4448:	4a e2       	ldi	r20, 0x2A	; 42
    444a:	52 e4       	ldi	r21, 0x42	; 66
    444c:	0e 94 c6 23 	call	0x478c	; 0x478c <__addsf3>
    4450:	9b 01       	movw	r18, r22
    4452:	ac 01       	movw	r20, r24
    4454:	c7 01       	movw	r24, r14
    4456:	b6 01       	movw	r22, r12
    4458:	0e 94 c6 23 	call	0x478c	; 0x478c <__addsf3>
    445c:	f8 01       	movw	r30, r16
    445e:	64 83       	std	Z+4, r22	; 0x04
    4460:	75 83       	std	Z+5, r23	; 0x05
    4462:	86 83       	std	Z+6, r24	; 0x06
    4464:	97 83       	std	Z+7, r25	; 0x07
	sei();
    4466:	78 94       	sei
}
    4468:	0f 90       	pop	r0
    446a:	0f 90       	pop	r0
    446c:	df 91       	pop	r29
    446e:	cf 91       	pop	r28
    4470:	1f 91       	pop	r17
    4472:	0f 91       	pop	r16
    4474:	ff 90       	pop	r15
    4476:	ef 90       	pop	r14
    4478:	df 90       	pop	r13
    447a:	cf 90       	pop	r12
    447c:	08 95       	ret

0000447e <_ZN8Pressure8altitudeEd>:

double Pressure::altitude(double Pressurevalue){
    447e:	8f 92       	push	r8
    4480:	9f 92       	push	r9
    4482:	af 92       	push	r10
    4484:	bf 92       	push	r11
    4486:	cf 92       	push	r12
    4488:	df 92       	push	r13
    448a:	ef 92       	push	r14
    448c:	ff 92       	push	r15
	return (Pressure0*100*log(Pressure0/Pressurevalue)/(1.2041*9.81));
    448e:	fc 01       	movw	r30, r24
    4490:	c1 84       	ldd	r12, Z+9	; 0x09
    4492:	d2 84       	ldd	r13, Z+10	; 0x0a
    4494:	e3 84       	ldd	r14, Z+11	; 0x0b
    4496:	f4 84       	ldd	r15, Z+12	; 0x0c
    4498:	9a 01       	movw	r18, r20
    449a:	ab 01       	movw	r20, r22
    449c:	c7 01       	movw	r24, r14
    449e:	b6 01       	movw	r22, r12
    44a0:	0e 94 93 24 	call	0x4926	; 0x4926 <__divsf3>
    44a4:	0e 94 4c 26 	call	0x4c98	; 0x4c98 <log>
    44a8:	4b 01       	movw	r8, r22
    44aa:	5c 01       	movw	r10, r24
    44ac:	20 e0       	ldi	r18, 0x00	; 0
    44ae:	30 e0       	ldi	r19, 0x00	; 0
    44b0:	48 ec       	ldi	r20, 0xC8	; 200
    44b2:	52 e4       	ldi	r21, 0x42	; 66
    44b4:	c7 01       	movw	r24, r14
    44b6:	b6 01       	movw	r22, r12
    44b8:	0e 94 8c 26 	call	0x4d18	; 0x4d18 <__mulsf3>
    44bc:	a5 01       	movw	r20, r10
    44be:	94 01       	movw	r18, r8
    44c0:	0e 94 8c 26 	call	0x4d18	; 0x4d18 <__mulsf3>
    44c4:	2c ed       	ldi	r18, 0xDC	; 220
    44c6:	3e ef       	ldi	r19, 0xFE	; 254
    44c8:	4c e3       	ldi	r20, 0x3C	; 60
    44ca:	51 e4       	ldi	r21, 0x41	; 65
    44cc:	0e 94 93 24 	call	0x4926	; 0x4926 <__divsf3>
}
    44d0:	ff 90       	pop	r15
    44d2:	ef 90       	pop	r14
    44d4:	df 90       	pop	r13
    44d6:	cf 90       	pop	r12
    44d8:	bf 90       	pop	r11
    44da:	af 90       	pop	r10
    44dc:	9f 90       	pop	r9
    44de:	8f 90       	pop	r8
    44e0:	08 95       	ret

000044e2 <_ZN8Pressure13set_Pressure0Ed>:
void Pressure::set_Pressure0(double Pressurevalue){
	Pressure0=Pressurevalue;
    44e2:	fc 01       	movw	r30, r24
    44e4:	41 87       	std	Z+9, r20	; 0x09
    44e6:	52 87       	std	Z+10, r21	; 0x0a
    44e8:	63 87       	std	Z+11, r22	; 0x0b
    44ea:	74 87       	std	Z+12, r23	; 0x0c
    44ec:	08 95       	ret

000044ee <_ZN3RTCD1Ev>:
	ausgabezeitneu();
	ausgabedatumneu();
} //RTC

// default destructor
RTC::~RTC()
    44ee:	08 95       	ret

000044f0 <_ZN3RTC14ausgabezeitneuEv>:
		}
	}
	ausgabedatumneu();
}

void RTC::ausgabezeitneu(){
    44f0:	fc 01       	movw	r30, r24
	msg_uhr[0]='0'+Stunden/10;
    44f2:	90 89       	ldd	r25, Z+16	; 0x10
    44f4:	8d ec       	ldi	r24, 0xCD	; 205
    44f6:	98 9f       	mul	r25, r24
    44f8:	21 2d       	mov	r18, r1
    44fa:	11 24       	eor	r1, r1
    44fc:	26 95       	lsr	r18
    44fe:	26 95       	lsr	r18
    4500:	26 95       	lsr	r18
    4502:	30 e3       	ldi	r19, 0x30	; 48
    4504:	32 0f       	add	r19, r18
    4506:	30 83       	st	Z, r19
	msg_uhr[1]='0'+Stunden%10;
    4508:	22 0f       	add	r18, r18
    450a:	32 2f       	mov	r19, r18
    450c:	33 0f       	add	r19, r19
    450e:	33 0f       	add	r19, r19
    4510:	23 0f       	add	r18, r19
    4512:	92 1b       	sub	r25, r18
    4514:	90 5d       	subi	r25, 0xD0	; 208
    4516:	91 83       	std	Z+1, r25	; 0x01
	msg_uhr[3]='0'+Minuten/10;
    4518:	91 89       	ldd	r25, Z+17	; 0x11
    451a:	98 9f       	mul	r25, r24
    451c:	21 2d       	mov	r18, r1
    451e:	11 24       	eor	r1, r1
    4520:	26 95       	lsr	r18
    4522:	26 95       	lsr	r18
    4524:	26 95       	lsr	r18
    4526:	30 e3       	ldi	r19, 0x30	; 48
    4528:	32 0f       	add	r19, r18
    452a:	33 83       	std	Z+3, r19	; 0x03
	msg_uhr[4]='0'+Minuten%10;
    452c:	22 0f       	add	r18, r18
    452e:	32 2f       	mov	r19, r18
    4530:	33 0f       	add	r19, r19
    4532:	33 0f       	add	r19, r19
    4534:	23 0f       	add	r18, r19
    4536:	92 1b       	sub	r25, r18
    4538:	90 5d       	subi	r25, 0xD0	; 208
    453a:	94 83       	std	Z+4, r25	; 0x04
	msg_uhr[6]='0'+Sekunden/10;
    453c:	92 89       	ldd	r25, Z+18	; 0x12
    453e:	98 9f       	mul	r25, r24
    4540:	81 2d       	mov	r24, r1
    4542:	11 24       	eor	r1, r1
    4544:	86 95       	lsr	r24
    4546:	86 95       	lsr	r24
    4548:	86 95       	lsr	r24
    454a:	20 e3       	ldi	r18, 0x30	; 48
    454c:	28 0f       	add	r18, r24
    454e:	26 83       	std	Z+6, r18	; 0x06
	msg_uhr[7]='0'+Sekunden%10;
    4550:	88 0f       	add	r24, r24
    4552:	28 2f       	mov	r18, r24
    4554:	22 0f       	add	r18, r18
    4556:	22 0f       	add	r18, r18
    4558:	82 0f       	add	r24, r18
    455a:	98 1b       	sub	r25, r24
    455c:	90 5d       	subi	r25, 0xD0	; 208
    455e:	97 83       	std	Z+7, r25	; 0x07
    4560:	08 95       	ret

00004562 <_ZN3RTC15ausgabedatumneuEv>:
}
void RTC::ausgabedatumneu(){
    4562:	fc 01       	movw	r30, r24
	msg_dat[0]='0'+Tag/10;
    4564:	94 89       	ldd	r25, Z+20	; 0x14
    4566:	8d ec       	ldi	r24, 0xCD	; 205
    4568:	98 9f       	mul	r25, r24
    456a:	21 2d       	mov	r18, r1
    456c:	11 24       	eor	r1, r1
    456e:	26 95       	lsr	r18
    4570:	26 95       	lsr	r18
    4572:	26 95       	lsr	r18
    4574:	30 e3       	ldi	r19, 0x30	; 48
    4576:	32 0f       	add	r19, r18
    4578:	30 87       	std	Z+8, r19	; 0x08
	msg_dat[1]='0'+Tag%10;
    457a:	22 0f       	add	r18, r18
    457c:	32 2f       	mov	r19, r18
    457e:	33 0f       	add	r19, r19
    4580:	33 0f       	add	r19, r19
    4582:	23 0f       	add	r18, r19
    4584:	92 1b       	sub	r25, r18
    4586:	90 5d       	subi	r25, 0xD0	; 208
    4588:	91 87       	std	Z+9, r25	; 0x09
	msg_dat[3]='0'+Monat/10;
    458a:	95 89       	ldd	r25, Z+21	; 0x15
    458c:	98 9f       	mul	r25, r24
    458e:	21 2d       	mov	r18, r1
    4590:	11 24       	eor	r1, r1
    4592:	26 95       	lsr	r18
    4594:	26 95       	lsr	r18
    4596:	26 95       	lsr	r18
    4598:	30 e3       	ldi	r19, 0x30	; 48
    459a:	32 0f       	add	r19, r18
    459c:	33 87       	std	Z+11, r19	; 0x0b
	msg_dat[4]='0'+Monat%10;
    459e:	22 0f       	add	r18, r18
    45a0:	32 2f       	mov	r19, r18
    45a2:	33 0f       	add	r19, r19
    45a4:	33 0f       	add	r19, r19
    45a6:	23 0f       	add	r18, r19
    45a8:	92 1b       	sub	r25, r18
    45aa:	90 5d       	subi	r25, 0xD0	; 208
    45ac:	94 87       	std	Z+12, r25	; 0x0c
	msg_dat[6]='0'+Jahr/10;
    45ae:	96 89       	ldd	r25, Z+22	; 0x16
    45b0:	98 9f       	mul	r25, r24
    45b2:	81 2d       	mov	r24, r1
    45b4:	11 24       	eor	r1, r1
    45b6:	86 95       	lsr	r24
    45b8:	86 95       	lsr	r24
    45ba:	86 95       	lsr	r24
    45bc:	20 e3       	ldi	r18, 0x30	; 48
    45be:	28 0f       	add	r18, r24
    45c0:	26 87       	std	Z+14, r18	; 0x0e
	msg_dat[7]='0'+Jahr%10;
    45c2:	88 0f       	add	r24, r24
    45c4:	28 2f       	mov	r18, r24
    45c6:	22 0f       	add	r18, r18
    45c8:	22 0f       	add	r18, r18
    45ca:	82 0f       	add	r24, r18
    45cc:	98 1b       	sub	r25, r24
    45ce:	90 5d       	subi	r25, 0xD0	; 208
    45d0:	97 87       	std	Z+15, r25	; 0x0f
    45d2:	08 95       	ret

000045d4 <_ZN3RTCC1Ev>:


#include "RTC.h"

// default constructor
RTC::RTC()
    45d4:	cf 93       	push	r28
    45d6:	df 93       	push	r29
    45d8:	ec 01       	movw	r28, r24
{
	Sekunden=0;
    45da:	1a 8a       	std	Y+18, r1	; 0x12
	HundSekunden=0;
    45dc:	1b 8a       	std	Y+19, r1	; 0x13
	Minuten=0;
    45de:	19 8a       	std	Y+17, r1	; 0x11
	Stunden=0;
    45e0:	18 8a       	std	Y+16, r1	; 0x10
	Tag=0;
    45e2:	1c 8a       	std	Y+20, r1	; 0x14
	Monat=0;
    45e4:	1d 8a       	std	Y+21, r1	; 0x15
	Jahr=0;
    45e6:	1e 8a       	std	Y+22, r1	; 0x16
    45e8:	fc 01       	movw	r30, r24
	for(uint8_t i=0;i<bitsderrtc;i++){
    45ea:	80 e0       	ldi	r24, 0x00	; 0
		msg_uhr[i]=0;
    45ec:	11 92       	st	Z+, r1
	Minuten=0;
	Stunden=0;
	Tag=0;
	Monat=0;
	Jahr=0;
	for(uint8_t i=0;i<bitsderrtc;i++){
    45ee:	8f 5f       	subi	r24, 0xFF	; 255
    45f0:	88 30       	cpi	r24, 0x08	; 8
    45f2:	e1 f7       	brne	.-8      	; 0x45ec <_ZN3RTCC1Ev+0x18>
		msg_uhr[i]=0;
	}
	//Einstellungen des Ausgabebuffers
	msg_uhr[2]=':';
    45f4:	8a e3       	ldi	r24, 0x3A	; 58
    45f6:	8a 83       	std	Y+2, r24	; 0x02
	msg_uhr[5]=':';
    45f8:	8d 83       	std	Y+5, r24	; 0x05
	msg_dat[2]='.';
    45fa:	8e e2       	ldi	r24, 0x2E	; 46
    45fc:	8a 87       	std	Y+10, r24	; 0x0a
	msg_dat[5]='.';
    45fe:	8d 87       	std	Y+13, r24	; 0x0d
	ausgabezeitneu();
    4600:	ce 01       	movw	r24, r28
    4602:	0e 94 78 22 	call	0x44f0	; 0x44f0 <_ZN3RTC14ausgabezeitneuEv>
	ausgabedatumneu();
    4606:	ce 01       	movw	r24, r28
    4608:	0e 94 b1 22 	call	0x4562	; 0x4562 <_ZN3RTC15ausgabedatumneuEv>
} //RTC
    460c:	df 91       	pop	r29
    460e:	cf 91       	pop	r28
    4610:	08 95       	ret

00004612 <_ZN3RTC8kalenderEv>:
	ausgabezeitneu();
	return 0;
}

void RTC::kalender(){
	if (Monat==4||Monat==6||Monat==9||Monat==11)
    4612:	fc 01       	movw	r30, r24
    4614:	25 89       	ldd	r18, Z+21	; 0x15
    4616:	32 2f       	mov	r19, r18
    4618:	3d 7f       	andi	r19, 0xFD	; 253
    461a:	34 30       	cpi	r19, 0x04	; 4
    461c:	11 f0       	breq	.+4      	; 0x4622 <_ZN3RTC8kalenderEv+0x10>
    461e:	39 30       	cpi	r19, 0x09	; 9
    4620:	91 f4       	brne	.+36     	; 0x4646 <_ZN3RTC8kalenderEv+0x34>
	{
		if (Tag>=31)
    4622:	fc 01       	movw	r30, r24
    4624:	34 89       	ldd	r19, Z+20	; 0x14
    4626:	3f 31       	cpi	r19, 0x1F	; 31
    4628:	b0 f1       	brcs	.+108    	; 0x4696 <_ZN3RTC8kalenderEv+0x84>
		{
			Tag=1;
    462a:	31 e0       	ldi	r19, 0x01	; 1
    462c:	34 8b       	std	Z+20, r19	; 0x14
			Monat++;
    462e:	2f 5f       	subi	r18, 0xFF	; 255
			if (Monat>=13)
    4630:	2d 30       	cpi	r18, 0x0D	; 13
    4632:	10 f4       	brcc	.+4      	; 0x4638 <_ZN3RTC8kalenderEv+0x26>
	if (Monat==4||Monat==6||Monat==9||Monat==11)
	{
		if (Tag>=31)
		{
			Tag=1;
			Monat++;
    4634:	25 8b       	std	Z+21, r18	; 0x15
    4636:	2f c0       	rjmp	.+94     	; 0x4696 <_ZN3RTC8kalenderEv+0x84>
			if (Monat>=13)
			{
				Monat=1;
    4638:	21 e0       	ldi	r18, 0x01	; 1
    463a:	fc 01       	movw	r30, r24
    463c:	25 8b       	std	Z+21, r18	; 0x15
				Jahr++;
    463e:	26 89       	ldd	r18, Z+22	; 0x16
    4640:	2f 5f       	subi	r18, 0xFF	; 255
    4642:	26 8b       	std	Z+22, r18	; 0x16
    4644:	28 c0       	rjmp	.+80     	; 0x4696 <_ZN3RTC8kalenderEv+0x84>
			}
		}
	}
	else if (Monat==2)
    4646:	22 30       	cpi	r18, 0x02	; 2
    4648:	a9 f4       	brne	.+42     	; 0x4674 <_ZN3RTC8kalenderEv+0x62>
	{
		if (Jahr%4==0)
    464a:	fc 01       	movw	r30, r24
    464c:	26 89       	ldd	r18, Z+22	; 0x16
    464e:	23 70       	andi	r18, 0x03	; 3
    4650:	41 f4       	brne	.+16     	; 0x4662 <_ZN3RTC8kalenderEv+0x50>
		{
			if (Tag>=30)
    4652:	24 89       	ldd	r18, Z+20	; 0x14
    4654:	2e 31       	cpi	r18, 0x1E	; 30
    4656:	f8 f0       	brcs	.+62     	; 0x4696 <_ZN3RTC8kalenderEv+0x84>
			{
				Tag=1;
    4658:	21 e0       	ldi	r18, 0x01	; 1
    465a:	24 8b       	std	Z+20, r18	; 0x14
				Monat++;
    465c:	23 e0       	ldi	r18, 0x03	; 3
    465e:	25 8b       	std	Z+21, r18	; 0x15
    4660:	1a c0       	rjmp	.+52     	; 0x4696 <_ZN3RTC8kalenderEv+0x84>
					Jahr++;
				}
			}
		}
		else{
			if (Tag>=29)
    4662:	fc 01       	movw	r30, r24
    4664:	24 89       	ldd	r18, Z+20	; 0x14
    4666:	2d 31       	cpi	r18, 0x1D	; 29
    4668:	b0 f0       	brcs	.+44     	; 0x4696 <_ZN3RTC8kalenderEv+0x84>
			{
				Tag=1;
    466a:	21 e0       	ldi	r18, 0x01	; 1
    466c:	24 8b       	std	Z+20, r18	; 0x14
				Monat++;
    466e:	23 e0       	ldi	r18, 0x03	; 3
    4670:	25 8b       	std	Z+21, r18	; 0x15
    4672:	11 c0       	rjmp	.+34     	; 0x4696 <_ZN3RTC8kalenderEv+0x84>
				}
			}
		}
	}
	else{
		if (Tag>=32)
    4674:	fc 01       	movw	r30, r24
    4676:	34 89       	ldd	r19, Z+20	; 0x14
    4678:	30 32       	cpi	r19, 0x20	; 32
    467a:	68 f0       	brcs	.+26     	; 0x4696 <_ZN3RTC8kalenderEv+0x84>
		{
			Tag=1;
    467c:	31 e0       	ldi	r19, 0x01	; 1
    467e:	34 8b       	std	Z+20, r19	; 0x14
			Monat++;
    4680:	2f 5f       	subi	r18, 0xFF	; 255
			if (Monat>=13)
    4682:	2d 30       	cpi	r18, 0x0D	; 13
    4684:	10 f4       	brcc	.+4      	; 0x468a <_ZN3RTC8kalenderEv+0x78>
	}
	else{
		if (Tag>=32)
		{
			Tag=1;
			Monat++;
    4686:	25 8b       	std	Z+21, r18	; 0x15
    4688:	06 c0       	rjmp	.+12     	; 0x4696 <_ZN3RTC8kalenderEv+0x84>
			if (Monat>=13)
			{
				Monat=1;
    468a:	21 e0       	ldi	r18, 0x01	; 1
    468c:	fc 01       	movw	r30, r24
    468e:	25 8b       	std	Z+21, r18	; 0x15
				Jahr++;
    4690:	26 89       	ldd	r18, Z+22	; 0x16
    4692:	2f 5f       	subi	r18, 0xFF	; 255
    4694:	26 8b       	std	Z+22, r18	; 0x16
			}
		}
	}
	ausgabedatumneu();
    4696:	0e 94 b1 22 	call	0x4562	; 0x4562 <_ZN3RTC15ausgabedatumneuEv>
    469a:	08 95       	ret

0000469c <_ZN3RTC4zeitEv>:
	}
	ausgabezeitneu();
	return 0;
}

uint8_t RTC::zeit(){
    469c:	cf 93       	push	r28
    469e:	df 93       	push	r29
    46a0:	ec 01       	movw	r28, r24
	//Sekunden++; sitzt im Vektor um Taster besser entprellen zu koennen
	if (Sekunden >= 60 && Sekunden <=200){
    46a2:	8a 89       	ldd	r24, Y+18	; 0x12
    46a4:	8c 53       	subi	r24, 0x3C	; 60
    46a6:	8d 38       	cpi	r24, 0x8D	; 141
    46a8:	b8 f4       	brcc	.+46     	; 0x46d8 <_ZN3RTC4zeitEv+0x3c>
		Sekunden = 0;
    46aa:	1a 8a       	std	Y+18, r1	; 0x12
		Minuten++;
    46ac:	89 89       	ldd	r24, Y+17	; 0x11
    46ae:	8f 5f       	subi	r24, 0xFF	; 255
    46b0:	89 8b       	std	Y+17, r24	; 0x11
		interupts |= (1<<minuteninterupt);
    46b2:	9f 89       	ldd	r25, Y+23	; 0x17
    46b4:	94 60       	ori	r25, 0x04	; 4
    46b6:	9f 8b       	std	Y+23, r25	; 0x17
		if(Minuten >= 60){
    46b8:	8c 33       	cpi	r24, 0x3C	; 60
    46ba:	20 f0       	brcs	.+8      	; 0x46c4 <_ZN3RTC4zeitEv+0x28>
			Minuten = 0;
    46bc:	19 8a       	std	Y+17, r1	; 0x11
			Stunden++;
    46be:	88 89       	ldd	r24, Y+16	; 0x10
    46c0:	8f 5f       	subi	r24, 0xFF	; 255
    46c2:	88 8b       	std	Y+16, r24	; 0x10
		}
		if(Stunden >= 24){
    46c4:	88 89       	ldd	r24, Y+16	; 0x10
    46c6:	88 31       	cpi	r24, 0x18	; 24
    46c8:	38 f0       	brcs	.+14     	; 0x46d8 <_ZN3RTC4zeitEv+0x3c>
			Stunden = 0;
    46ca:	18 8a       	std	Y+16, r1	; 0x10
			Tag++;
    46cc:	8c 89       	ldd	r24, Y+20	; 0x14
    46ce:	8f 5f       	subi	r24, 0xFF	; 255
    46d0:	8c 8b       	std	Y+20, r24	; 0x14
			kalender();
    46d2:	ce 01       	movw	r24, r28
    46d4:	0e 94 09 23 	call	0x4612	; 0x4612 <_ZN3RTC8kalenderEv>
		}
	}
	ausgabezeitneu();
    46d8:	ce 01       	movw	r24, r28
    46da:	0e 94 78 22 	call	0x44f0	; 0x44f0 <_ZN3RTC14ausgabezeitneuEv>
	return 0;
}
    46de:	80 e0       	ldi	r24, 0x00	; 0
    46e0:	df 91       	pop	r29
    46e2:	cf 91       	pop	r28
    46e4:	08 95       	ret

000046e6 <_ZN3RTC10dummyeinstEv>:
	msg_dat[4]='0'+Monat%10;
	msg_dat[6]='0'+Jahr/10;
	msg_dat[7]='0'+Jahr%10;
}

void RTC::dummyeinst(){
    46e6:	cf 93       	push	r28
    46e8:	df 93       	push	r29
    46ea:	ec 01       	movw	r28, r24
	Stunden=10;
    46ec:	8a e0       	ldi	r24, 0x0A	; 10
    46ee:	88 8b       	std	Y+16, r24	; 0x10
	Minuten=30;
    46f0:	8e e1       	ldi	r24, 0x1E	; 30
    46f2:	89 8b       	std	Y+17, r24	; 0x11
	Tag=7;
    46f4:	87 e0       	ldi	r24, 0x07	; 7
    46f6:	8c 8b       	std	Y+20, r24	; 0x14
	Monat=9;
    46f8:	89 e0       	ldi	r24, 0x09	; 9
    46fa:	8d 8b       	std	Y+21, r24	; 0x15
	Jahr=15;
    46fc:	8f e0       	ldi	r24, 0x0F	; 15
    46fe:	8e 8b       	std	Y+22, r24	; 0x16
	ausgabedatumneu();
    4700:	ce 01       	movw	r24, r28
    4702:	0e 94 b1 22 	call	0x4562	; 0x4562 <_ZN3RTC15ausgabedatumneuEv>
	ausgabezeitneu();
    4706:	ce 01       	movw	r24, r28
    4708:	0e 94 78 22 	call	0x44f0	; 0x44f0 <_ZN3RTC14ausgabezeitneuEv>
}
    470c:	df 91       	pop	r29
    470e:	cf 91       	pop	r28
    4710:	08 95       	ret

00004712 <_ZN3RTC8RTCstartEv>:

void RTC::RTCstart(){
    4712:	fc 01       	movw	r30, r24
	//Einstellungen des Ausgabebuffers
	msg_uhr[0]='0';
    4714:	80 e3       	ldi	r24, 0x30	; 48
    4716:	80 83       	st	Z, r24
	msg_uhr[1]='0';
    4718:	81 83       	std	Z+1, r24	; 0x01
	msg_uhr[2]=':';
    471a:	9a e3       	ldi	r25, 0x3A	; 58
    471c:	92 83       	std	Z+2, r25	; 0x02
	msg_uhr[3]='0';
    471e:	83 83       	std	Z+3, r24	; 0x03
	msg_uhr[4]='0';
    4720:	84 83       	std	Z+4, r24	; 0x04
	msg_uhr[5]=':';
    4722:	95 83       	std	Z+5, r25	; 0x05
	msg_uhr[6]='0';
    4724:	86 83       	std	Z+6, r24	; 0x06
	msg_uhr[7]='0';
    4726:	87 83       	std	Z+7, r24	; 0x07
	//Timer2 als 1ms Timer fuer die RTC
	//asynchron mit 32.768 kHz (noch synchrom)
	TCNT2 = TIMER2RTCTIME;
    4728:	10 92 b2 00 	sts	0x00B2, r1
	ASSR |= (1<<AS2);
    472c:	e6 eb       	ldi	r30, 0xB6	; 182
    472e:	f0 e0       	ldi	r31, 0x00	; 0
    4730:	80 81       	ld	r24, Z
    4732:	80 62       	ori	r24, 0x20	; 32
    4734:	80 83       	st	Z, r24
	TIMSK2 = (1<<TOIE2);
    4736:	81 e0       	ldi	r24, 0x01	; 1
    4738:	80 93 70 00 	sts	0x0070, r24
	TCCR2B = (1<<CS22) | (1<<CS20);		//Vorteiler 256
    473c:	85 e0       	ldi	r24, 0x05	; 5
    473e:	80 93 b1 00 	sts	0x00B1, r24
    4742:	08 95       	ret

00004744 <_ZN3RTC7RTCstopEv>:
}

void RTC::RTCstop(){
	TCCR2B &= ~((1<<CS22) | (1<<CS21));
    4744:	e1 eb       	ldi	r30, 0xB1	; 177
    4746:	f0 e0       	ldi	r31, 0x00	; 0
    4748:	80 81       	ld	r24, Z
    474a:	89 7f       	andi	r24, 0xF9	; 249
    474c:	80 83       	st	Z, r24
    474e:	08 95       	ret

00004750 <_ZN3RTC5timerEv>:
}

uint8_t RTC::timer(){
    4750:	fc 01       	movw	r30, r24
	if (Sekunden>60)
    4752:	82 89       	ldd	r24, Z+18	; 0x12
    4754:	8d 33       	cpi	r24, 0x3D	; 61
    4756:	b8 f0       	brcs	.+46     	; 0x4786 <_ZN3RTC5timerEv+0x36>
	{
		Sekunden=59;
    4758:	8b e3       	ldi	r24, 0x3B	; 59
    475a:	82 8b       	std	Z+18, r24	; 0x12
		Minuten--;
    475c:	81 89       	ldd	r24, Z+17	; 0x11
    475e:	81 50       	subi	r24, 0x01	; 1
		if (Minuten>60)
    4760:	8d 33       	cpi	r24, 0x3D	; 61
    4762:	18 f4       	brcc	.+6      	; 0x476a <_ZN3RTC5timerEv+0x1a>

uint8_t RTC::timer(){
	if (Sekunden>60)
	{
		Sekunden=59;
		Minuten--;
    4764:	81 8b       	std	Z+17, r24	; 0x11
				Sekunden=0;
				return 1;
			}
		}
	}
	return 0;
    4766:	80 e0       	ldi	r24, 0x00	; 0
    4768:	08 95       	ret
	{
		Sekunden=59;
		Minuten--;
		if (Minuten>60)
		{
			Minuten=59;
    476a:	8b e3       	ldi	r24, 0x3B	; 59
    476c:	81 8b       	std	Z+17, r24	; 0x11
			Stunden--;
    476e:	80 89       	ldd	r24, Z+16	; 0x10
    4770:	81 50       	subi	r24, 0x01	; 1
			if (Stunden>24)
    4772:	89 31       	cpi	r24, 0x19	; 25
    4774:	18 f4       	brcc	.+6      	; 0x477c <_ZN3RTC5timerEv+0x2c>
		Sekunden=59;
		Minuten--;
		if (Minuten>60)
		{
			Minuten=59;
			Stunden--;
    4776:	80 8b       	std	Z+16, r24	; 0x10
				Sekunden=0;
				return 1;
			}
		}
	}
	return 0;
    4778:	80 e0       	ldi	r24, 0x00	; 0
    477a:	08 95       	ret
		{
			Minuten=59;
			Stunden--;
			if (Stunden>24)
			{
				Stunden=0;
    477c:	10 8a       	std	Z+16, r1	; 0x10
				Minuten=0;
    477e:	11 8a       	std	Z+17, r1	; 0x11
				Sekunden=0;
    4780:	12 8a       	std	Z+18, r1	; 0x12
				return 1;
    4782:	81 e0       	ldi	r24, 0x01	; 1
    4784:	08 95       	ret
			}
		}
	}
	return 0;
    4786:	80 e0       	ldi	r24, 0x00	; 0
}
    4788:	08 95       	ret

0000478a <__subsf3>:
    478a:	50 58       	subi	r21, 0x80	; 128

0000478c <__addsf3>:
    478c:	bb 27       	eor	r27, r27
    478e:	aa 27       	eor	r26, r26
    4790:	0e d0       	rcall	.+28     	; 0x47ae <__addsf3x>
    4792:	27 c2       	rjmp	.+1102   	; 0x4be2 <__fp_round>
    4794:	f0 d1       	rcall	.+992    	; 0x4b76 <__fp_pscA>
    4796:	30 f0       	brcs	.+12     	; 0x47a4 <__addsf3+0x18>
    4798:	f5 d1       	rcall	.+1002   	; 0x4b84 <__fp_pscB>
    479a:	20 f0       	brcs	.+8      	; 0x47a4 <__addsf3+0x18>
    479c:	31 f4       	brne	.+12     	; 0x47aa <__addsf3+0x1e>
    479e:	9f 3f       	cpi	r25, 0xFF	; 255
    47a0:	11 f4       	brne	.+4      	; 0x47a6 <__addsf3+0x1a>
    47a2:	1e f4       	brtc	.+6      	; 0x47aa <__addsf3+0x1e>
    47a4:	c0 c1       	rjmp	.+896    	; 0x4b26 <__fp_nan>
    47a6:	0e f4       	brtc	.+2      	; 0x47aa <__addsf3+0x1e>
    47a8:	e0 95       	com	r30
    47aa:	e7 fb       	bst	r30, 7
    47ac:	b6 c1       	rjmp	.+876    	; 0x4b1a <__fp_inf>

000047ae <__addsf3x>:
    47ae:	e9 2f       	mov	r30, r25
    47b0:	3a d2       	rcall	.+1140   	; 0x4c26 <__fp_split3>
    47b2:	80 f3       	brcs	.-32     	; 0x4794 <__addsf3+0x8>
    47b4:	ba 17       	cp	r27, r26
    47b6:	62 07       	cpc	r22, r18
    47b8:	73 07       	cpc	r23, r19
    47ba:	84 07       	cpc	r24, r20
    47bc:	95 07       	cpc	r25, r21
    47be:	18 f0       	brcs	.+6      	; 0x47c6 <__addsf3x+0x18>
    47c0:	71 f4       	brne	.+28     	; 0x47de <__addsf3x+0x30>
    47c2:	9e f5       	brtc	.+102    	; 0x482a <__addsf3x+0x7c>
    47c4:	52 c2       	rjmp	.+1188   	; 0x4c6a <__fp_zero>
    47c6:	0e f4       	brtc	.+2      	; 0x47ca <__addsf3x+0x1c>
    47c8:	e0 95       	com	r30
    47ca:	0b 2e       	mov	r0, r27
    47cc:	ba 2f       	mov	r27, r26
    47ce:	a0 2d       	mov	r26, r0
    47d0:	0b 01       	movw	r0, r22
    47d2:	b9 01       	movw	r22, r18
    47d4:	90 01       	movw	r18, r0
    47d6:	0c 01       	movw	r0, r24
    47d8:	ca 01       	movw	r24, r20
    47da:	a0 01       	movw	r20, r0
    47dc:	11 24       	eor	r1, r1
    47de:	ff 27       	eor	r31, r31
    47e0:	59 1b       	sub	r21, r25
    47e2:	99 f0       	breq	.+38     	; 0x480a <__addsf3x+0x5c>
    47e4:	59 3f       	cpi	r21, 0xF9	; 249
    47e6:	50 f4       	brcc	.+20     	; 0x47fc <__addsf3x+0x4e>
    47e8:	50 3e       	cpi	r21, 0xE0	; 224
    47ea:	68 f1       	brcs	.+90     	; 0x4846 <__addsf3x+0x98>
    47ec:	1a 16       	cp	r1, r26
    47ee:	f0 40       	sbci	r31, 0x00	; 0
    47f0:	a2 2f       	mov	r26, r18
    47f2:	23 2f       	mov	r18, r19
    47f4:	34 2f       	mov	r19, r20
    47f6:	44 27       	eor	r20, r20
    47f8:	58 5f       	subi	r21, 0xF8	; 248
    47fa:	f3 cf       	rjmp	.-26     	; 0x47e2 <__addsf3x+0x34>
    47fc:	46 95       	lsr	r20
    47fe:	37 95       	ror	r19
    4800:	27 95       	ror	r18
    4802:	a7 95       	ror	r26
    4804:	f0 40       	sbci	r31, 0x00	; 0
    4806:	53 95       	inc	r21
    4808:	c9 f7       	brne	.-14     	; 0x47fc <__addsf3x+0x4e>
    480a:	7e f4       	brtc	.+30     	; 0x482a <__addsf3x+0x7c>
    480c:	1f 16       	cp	r1, r31
    480e:	ba 0b       	sbc	r27, r26
    4810:	62 0b       	sbc	r22, r18
    4812:	73 0b       	sbc	r23, r19
    4814:	84 0b       	sbc	r24, r20
    4816:	ba f0       	brmi	.+46     	; 0x4846 <__addsf3x+0x98>
    4818:	91 50       	subi	r25, 0x01	; 1
    481a:	a1 f0       	breq	.+40     	; 0x4844 <__addsf3x+0x96>
    481c:	ff 0f       	add	r31, r31
    481e:	bb 1f       	adc	r27, r27
    4820:	66 1f       	adc	r22, r22
    4822:	77 1f       	adc	r23, r23
    4824:	88 1f       	adc	r24, r24
    4826:	c2 f7       	brpl	.-16     	; 0x4818 <__addsf3x+0x6a>
    4828:	0e c0       	rjmp	.+28     	; 0x4846 <__addsf3x+0x98>
    482a:	ba 0f       	add	r27, r26
    482c:	62 1f       	adc	r22, r18
    482e:	73 1f       	adc	r23, r19
    4830:	84 1f       	adc	r24, r20
    4832:	48 f4       	brcc	.+18     	; 0x4846 <__addsf3x+0x98>
    4834:	87 95       	ror	r24
    4836:	77 95       	ror	r23
    4838:	67 95       	ror	r22
    483a:	b7 95       	ror	r27
    483c:	f7 95       	ror	r31
    483e:	9e 3f       	cpi	r25, 0xFE	; 254
    4840:	08 f0       	brcs	.+2      	; 0x4844 <__addsf3x+0x96>
    4842:	b3 cf       	rjmp	.-154    	; 0x47aa <__addsf3+0x1e>
    4844:	93 95       	inc	r25
    4846:	88 0f       	add	r24, r24
    4848:	08 f0       	brcs	.+2      	; 0x484c <__addsf3x+0x9e>
    484a:	99 27       	eor	r25, r25
    484c:	ee 0f       	add	r30, r30
    484e:	97 95       	ror	r25
    4850:	87 95       	ror	r24
    4852:	08 95       	ret
    4854:	90 d1       	rcall	.+800    	; 0x4b76 <__fp_pscA>
    4856:	58 f0       	brcs	.+22     	; 0x486e <__addsf3x+0xc0>
    4858:	80 e8       	ldi	r24, 0x80	; 128
    485a:	91 e0       	ldi	r25, 0x01	; 1
    485c:	09 f4       	brne	.+2      	; 0x4860 <__addsf3x+0xb2>
    485e:	9e ef       	ldi	r25, 0xFE	; 254
    4860:	91 d1       	rcall	.+802    	; 0x4b84 <__fp_pscB>
    4862:	28 f0       	brcs	.+10     	; 0x486e <__addsf3x+0xc0>
    4864:	40 e8       	ldi	r20, 0x80	; 128
    4866:	51 e0       	ldi	r21, 0x01	; 1
    4868:	59 f4       	brne	.+22     	; 0x4880 <atan2+0xe>
    486a:	5e ef       	ldi	r21, 0xFE	; 254
    486c:	09 c0       	rjmp	.+18     	; 0x4880 <atan2+0xe>
    486e:	5b c1       	rjmp	.+694    	; 0x4b26 <__fp_nan>
    4870:	fc c1       	rjmp	.+1016   	; 0x4c6a <__fp_zero>

00004872 <atan2>:
    4872:	e9 2f       	mov	r30, r25
    4874:	e0 78       	andi	r30, 0x80	; 128
    4876:	d7 d1       	rcall	.+942    	; 0x4c26 <__fp_split3>
    4878:	68 f3       	brcs	.-38     	; 0x4854 <__addsf3x+0xa6>
    487a:	09 2e       	mov	r0, r25
    487c:	05 2a       	or	r0, r21
    487e:	c1 f3       	breq	.-16     	; 0x4870 <__addsf3x+0xc2>
    4880:	26 17       	cp	r18, r22
    4882:	37 07       	cpc	r19, r23
    4884:	48 07       	cpc	r20, r24
    4886:	59 07       	cpc	r21, r25
    4888:	38 f0       	brcs	.+14     	; 0x4898 <atan2+0x26>
    488a:	0e 2e       	mov	r0, r30
    488c:	07 f8       	bld	r0, 7
    488e:	e0 25       	eor	r30, r0
    4890:	69 f0       	breq	.+26     	; 0x48ac <atan2+0x3a>
    4892:	e0 25       	eor	r30, r0
    4894:	e0 64       	ori	r30, 0x40	; 64
    4896:	0a c0       	rjmp	.+20     	; 0x48ac <atan2+0x3a>
    4898:	ef 63       	ori	r30, 0x3F	; 63
    489a:	07 f8       	bld	r0, 7
    489c:	00 94       	com	r0
    489e:	07 fa       	bst	r0, 7
    48a0:	db 01       	movw	r26, r22
    48a2:	b9 01       	movw	r22, r18
    48a4:	9d 01       	movw	r18, r26
    48a6:	dc 01       	movw	r26, r24
    48a8:	ca 01       	movw	r24, r20
    48aa:	ad 01       	movw	r20, r26
    48ac:	ef 93       	push	r30
    48ae:	4a d0       	rcall	.+148    	; 0x4944 <__divsf3_pse>
    48b0:	98 d1       	rcall	.+816    	; 0x4be2 <__fp_round>
    48b2:	0a d0       	rcall	.+20     	; 0x48c8 <atan>
    48b4:	5f 91       	pop	r21
    48b6:	55 23       	and	r21, r21
    48b8:	31 f0       	breq	.+12     	; 0x48c6 <atan2+0x54>
    48ba:	2b ed       	ldi	r18, 0xDB	; 219
    48bc:	3f e0       	ldi	r19, 0x0F	; 15
    48be:	49 e4       	ldi	r20, 0x49	; 73
    48c0:	50 fd       	sbrc	r21, 0
    48c2:	49 ec       	ldi	r20, 0xC9	; 201
    48c4:	63 cf       	rjmp	.-314    	; 0x478c <__addsf3>
    48c6:	08 95       	ret

000048c8 <atan>:
    48c8:	df 93       	push	r29
    48ca:	dd 27       	eor	r29, r29
    48cc:	b9 2f       	mov	r27, r25
    48ce:	bf 77       	andi	r27, 0x7F	; 127
    48d0:	40 e8       	ldi	r20, 0x80	; 128
    48d2:	5f e3       	ldi	r21, 0x3F	; 63
    48d4:	16 16       	cp	r1, r22
    48d6:	17 06       	cpc	r1, r23
    48d8:	48 07       	cpc	r20, r24
    48da:	5b 07       	cpc	r21, r27
    48dc:	10 f4       	brcc	.+4      	; 0x48e2 <atan+0x1a>
    48de:	d9 2f       	mov	r29, r25
    48e0:	cf d1       	rcall	.+926    	; 0x4c80 <inverse>
    48e2:	9f 93       	push	r25
    48e4:	8f 93       	push	r24
    48e6:	7f 93       	push	r23
    48e8:	6f 93       	push	r22
    48ea:	7f d2       	rcall	.+1278   	; 0x4dea <square>
    48ec:	ea e9       	ldi	r30, 0x9A	; 154
    48ee:	f0 e0       	ldi	r31, 0x00	; 0
    48f0:	1d d1       	rcall	.+570    	; 0x4b2c <__fp_powser>
    48f2:	77 d1       	rcall	.+750    	; 0x4be2 <__fp_round>
    48f4:	2f 91       	pop	r18
    48f6:	3f 91       	pop	r19
    48f8:	4f 91       	pop	r20
    48fa:	5f 91       	pop	r21
    48fc:	19 d2       	rcall	.+1074   	; 0x4d30 <__mulsf3x>
    48fe:	dd 23       	and	r29, r29
    4900:	49 f0       	breq	.+18     	; 0x4914 <atan+0x4c>
    4902:	90 58       	subi	r25, 0x80	; 128
    4904:	a2 ea       	ldi	r26, 0xA2	; 162
    4906:	2a ed       	ldi	r18, 0xDA	; 218
    4908:	3f e0       	ldi	r19, 0x0F	; 15
    490a:	49 ec       	ldi	r20, 0xC9	; 201
    490c:	5f e3       	ldi	r21, 0x3F	; 63
    490e:	d0 78       	andi	r29, 0x80	; 128
    4910:	5d 27       	eor	r21, r29
    4912:	4d df       	rcall	.-358    	; 0x47ae <__addsf3x>
    4914:	df 91       	pop	r29
    4916:	65 c1       	rjmp	.+714    	; 0x4be2 <__fp_round>

00004918 <__cmpsf2>:
    4918:	dc d0       	rcall	.+440    	; 0x4ad2 <__fp_cmp>
    491a:	08 f4       	brcc	.+2      	; 0x491e <__cmpsf2+0x6>
    491c:	81 e0       	ldi	r24, 0x01	; 1
    491e:	08 95       	ret

00004920 <cos>:
    4920:	39 d1       	rcall	.+626    	; 0x4b94 <__fp_rempio2>
    4922:	e3 95       	inc	r30
    4924:	6f c1       	rjmp	.+734    	; 0x4c04 <__fp_sinus>

00004926 <__divsf3>:
    4926:	0c d0       	rcall	.+24     	; 0x4940 <__divsf3x>
    4928:	5c c1       	rjmp	.+696    	; 0x4be2 <__fp_round>
    492a:	2c d1       	rcall	.+600    	; 0x4b84 <__fp_pscB>
    492c:	40 f0       	brcs	.+16     	; 0x493e <__divsf3+0x18>
    492e:	23 d1       	rcall	.+582    	; 0x4b76 <__fp_pscA>
    4930:	30 f0       	brcs	.+12     	; 0x493e <__divsf3+0x18>
    4932:	21 f4       	brne	.+8      	; 0x493c <__divsf3+0x16>
    4934:	5f 3f       	cpi	r21, 0xFF	; 255
    4936:	19 f0       	breq	.+6      	; 0x493e <__divsf3+0x18>
    4938:	f0 c0       	rjmp	.+480    	; 0x4b1a <__fp_inf>
    493a:	51 11       	cpse	r21, r1
    493c:	97 c1       	rjmp	.+814    	; 0x4c6c <__fp_szero>
    493e:	f3 c0       	rjmp	.+486    	; 0x4b26 <__fp_nan>

00004940 <__divsf3x>:
    4940:	72 d1       	rcall	.+740    	; 0x4c26 <__fp_split3>
    4942:	98 f3       	brcs	.-26     	; 0x492a <__divsf3+0x4>

00004944 <__divsf3_pse>:
    4944:	99 23       	and	r25, r25
    4946:	c9 f3       	breq	.-14     	; 0x493a <__divsf3+0x14>
    4948:	55 23       	and	r21, r21
    494a:	b1 f3       	breq	.-20     	; 0x4938 <__divsf3+0x12>
    494c:	95 1b       	sub	r25, r21
    494e:	55 0b       	sbc	r21, r21
    4950:	bb 27       	eor	r27, r27
    4952:	aa 27       	eor	r26, r26
    4954:	62 17       	cp	r22, r18
    4956:	73 07       	cpc	r23, r19
    4958:	84 07       	cpc	r24, r20
    495a:	38 f0       	brcs	.+14     	; 0x496a <__divsf3_pse+0x26>
    495c:	9f 5f       	subi	r25, 0xFF	; 255
    495e:	5f 4f       	sbci	r21, 0xFF	; 255
    4960:	22 0f       	add	r18, r18
    4962:	33 1f       	adc	r19, r19
    4964:	44 1f       	adc	r20, r20
    4966:	aa 1f       	adc	r26, r26
    4968:	a9 f3       	breq	.-22     	; 0x4954 <__divsf3_pse+0x10>
    496a:	33 d0       	rcall	.+102    	; 0x49d2 <__divsf3_pse+0x8e>
    496c:	0e 2e       	mov	r0, r30
    496e:	3a f0       	brmi	.+14     	; 0x497e <__divsf3_pse+0x3a>
    4970:	e0 e8       	ldi	r30, 0x80	; 128
    4972:	30 d0       	rcall	.+96     	; 0x49d4 <__divsf3_pse+0x90>
    4974:	91 50       	subi	r25, 0x01	; 1
    4976:	50 40       	sbci	r21, 0x00	; 0
    4978:	e6 95       	lsr	r30
    497a:	00 1c       	adc	r0, r0
    497c:	ca f7       	brpl	.-14     	; 0x4970 <__divsf3_pse+0x2c>
    497e:	29 d0       	rcall	.+82     	; 0x49d2 <__divsf3_pse+0x8e>
    4980:	fe 2f       	mov	r31, r30
    4982:	27 d0       	rcall	.+78     	; 0x49d2 <__divsf3_pse+0x8e>
    4984:	66 0f       	add	r22, r22
    4986:	77 1f       	adc	r23, r23
    4988:	88 1f       	adc	r24, r24
    498a:	bb 1f       	adc	r27, r27
    498c:	26 17       	cp	r18, r22
    498e:	37 07       	cpc	r19, r23
    4990:	48 07       	cpc	r20, r24
    4992:	ab 07       	cpc	r26, r27
    4994:	b0 e8       	ldi	r27, 0x80	; 128
    4996:	09 f0       	breq	.+2      	; 0x499a <__divsf3_pse+0x56>
    4998:	bb 0b       	sbc	r27, r27
    499a:	80 2d       	mov	r24, r0
    499c:	bf 01       	movw	r22, r30
    499e:	ff 27       	eor	r31, r31
    49a0:	93 58       	subi	r25, 0x83	; 131
    49a2:	5f 4f       	sbci	r21, 0xFF	; 255
    49a4:	2a f0       	brmi	.+10     	; 0x49b0 <__divsf3_pse+0x6c>
    49a6:	9e 3f       	cpi	r25, 0xFE	; 254
    49a8:	51 05       	cpc	r21, r1
    49aa:	68 f0       	brcs	.+26     	; 0x49c6 <__divsf3_pse+0x82>
    49ac:	b6 c0       	rjmp	.+364    	; 0x4b1a <__fp_inf>
    49ae:	5e c1       	rjmp	.+700    	; 0x4c6c <__fp_szero>
    49b0:	5f 3f       	cpi	r21, 0xFF	; 255
    49b2:	ec f3       	brlt	.-6      	; 0x49ae <__divsf3_pse+0x6a>
    49b4:	98 3e       	cpi	r25, 0xE8	; 232
    49b6:	dc f3       	brlt	.-10     	; 0x49ae <__divsf3_pse+0x6a>
    49b8:	86 95       	lsr	r24
    49ba:	77 95       	ror	r23
    49bc:	67 95       	ror	r22
    49be:	b7 95       	ror	r27
    49c0:	f7 95       	ror	r31
    49c2:	9f 5f       	subi	r25, 0xFF	; 255
    49c4:	c9 f7       	brne	.-14     	; 0x49b8 <__divsf3_pse+0x74>
    49c6:	88 0f       	add	r24, r24
    49c8:	91 1d       	adc	r25, r1
    49ca:	96 95       	lsr	r25
    49cc:	87 95       	ror	r24
    49ce:	97 f9       	bld	r25, 7
    49d0:	08 95       	ret
    49d2:	e1 e0       	ldi	r30, 0x01	; 1
    49d4:	66 0f       	add	r22, r22
    49d6:	77 1f       	adc	r23, r23
    49d8:	88 1f       	adc	r24, r24
    49da:	bb 1f       	adc	r27, r27
    49dc:	62 17       	cp	r22, r18
    49de:	73 07       	cpc	r23, r19
    49e0:	84 07       	cpc	r24, r20
    49e2:	ba 07       	cpc	r27, r26
    49e4:	20 f0       	brcs	.+8      	; 0x49ee <__divsf3_pse+0xaa>
    49e6:	62 1b       	sub	r22, r18
    49e8:	73 0b       	sbc	r23, r19
    49ea:	84 0b       	sbc	r24, r20
    49ec:	ba 0b       	sbc	r27, r26
    49ee:	ee 1f       	adc	r30, r30
    49f0:	88 f7       	brcc	.-30     	; 0x49d4 <__divsf3_pse+0x90>
    49f2:	e0 95       	com	r30
    49f4:	08 95       	ret

000049f6 <__fixsfsi>:
    49f6:	04 d0       	rcall	.+8      	; 0x4a00 <__fixunssfsi>
    49f8:	68 94       	set
    49fa:	b1 11       	cpse	r27, r1
    49fc:	37 c1       	rjmp	.+622    	; 0x4c6c <__fp_szero>
    49fe:	08 95       	ret

00004a00 <__fixunssfsi>:
    4a00:	1a d1       	rcall	.+564    	; 0x4c36 <__fp_splitA>
    4a02:	88 f0       	brcs	.+34     	; 0x4a26 <__fixunssfsi+0x26>
    4a04:	9f 57       	subi	r25, 0x7F	; 127
    4a06:	90 f0       	brcs	.+36     	; 0x4a2c <__fixunssfsi+0x2c>
    4a08:	b9 2f       	mov	r27, r25
    4a0a:	99 27       	eor	r25, r25
    4a0c:	b7 51       	subi	r27, 0x17	; 23
    4a0e:	a0 f0       	brcs	.+40     	; 0x4a38 <__fixunssfsi+0x38>
    4a10:	d1 f0       	breq	.+52     	; 0x4a46 <__fixunssfsi+0x46>
    4a12:	66 0f       	add	r22, r22
    4a14:	77 1f       	adc	r23, r23
    4a16:	88 1f       	adc	r24, r24
    4a18:	99 1f       	adc	r25, r25
    4a1a:	1a f0       	brmi	.+6      	; 0x4a22 <__fixunssfsi+0x22>
    4a1c:	ba 95       	dec	r27
    4a1e:	c9 f7       	brne	.-14     	; 0x4a12 <__fixunssfsi+0x12>
    4a20:	12 c0       	rjmp	.+36     	; 0x4a46 <__fixunssfsi+0x46>
    4a22:	b1 30       	cpi	r27, 0x01	; 1
    4a24:	81 f0       	breq	.+32     	; 0x4a46 <__fixunssfsi+0x46>
    4a26:	21 d1       	rcall	.+578    	; 0x4c6a <__fp_zero>
    4a28:	b1 e0       	ldi	r27, 0x01	; 1
    4a2a:	08 95       	ret
    4a2c:	1e c1       	rjmp	.+572    	; 0x4c6a <__fp_zero>
    4a2e:	67 2f       	mov	r22, r23
    4a30:	78 2f       	mov	r23, r24
    4a32:	88 27       	eor	r24, r24
    4a34:	b8 5f       	subi	r27, 0xF8	; 248
    4a36:	39 f0       	breq	.+14     	; 0x4a46 <__fixunssfsi+0x46>
    4a38:	b9 3f       	cpi	r27, 0xF9	; 249
    4a3a:	cc f3       	brlt	.-14     	; 0x4a2e <__fixunssfsi+0x2e>
    4a3c:	86 95       	lsr	r24
    4a3e:	77 95       	ror	r23
    4a40:	67 95       	ror	r22
    4a42:	b3 95       	inc	r27
    4a44:	d9 f7       	brne	.-10     	; 0x4a3c <__fixunssfsi+0x3c>
    4a46:	3e f4       	brtc	.+14     	; 0x4a56 <__fixunssfsi+0x56>
    4a48:	90 95       	com	r25
    4a4a:	80 95       	com	r24
    4a4c:	70 95       	com	r23
    4a4e:	61 95       	neg	r22
    4a50:	7f 4f       	sbci	r23, 0xFF	; 255
    4a52:	8f 4f       	sbci	r24, 0xFF	; 255
    4a54:	9f 4f       	sbci	r25, 0xFF	; 255
    4a56:	08 95       	ret

00004a58 <__floatunsisf>:
    4a58:	e8 94       	clt
    4a5a:	09 c0       	rjmp	.+18     	; 0x4a6e <__floatsisf+0x12>

00004a5c <__floatsisf>:
    4a5c:	97 fb       	bst	r25, 7
    4a5e:	3e f4       	brtc	.+14     	; 0x4a6e <__floatsisf+0x12>
    4a60:	90 95       	com	r25
    4a62:	80 95       	com	r24
    4a64:	70 95       	com	r23
    4a66:	61 95       	neg	r22
    4a68:	7f 4f       	sbci	r23, 0xFF	; 255
    4a6a:	8f 4f       	sbci	r24, 0xFF	; 255
    4a6c:	9f 4f       	sbci	r25, 0xFF	; 255
    4a6e:	99 23       	and	r25, r25
    4a70:	a9 f0       	breq	.+42     	; 0x4a9c <__floatsisf+0x40>
    4a72:	f9 2f       	mov	r31, r25
    4a74:	96 e9       	ldi	r25, 0x96	; 150
    4a76:	bb 27       	eor	r27, r27
    4a78:	93 95       	inc	r25
    4a7a:	f6 95       	lsr	r31
    4a7c:	87 95       	ror	r24
    4a7e:	77 95       	ror	r23
    4a80:	67 95       	ror	r22
    4a82:	b7 95       	ror	r27
    4a84:	f1 11       	cpse	r31, r1
    4a86:	f8 cf       	rjmp	.-16     	; 0x4a78 <__floatsisf+0x1c>
    4a88:	fa f4       	brpl	.+62     	; 0x4ac8 <__floatsisf+0x6c>
    4a8a:	bb 0f       	add	r27, r27
    4a8c:	11 f4       	brne	.+4      	; 0x4a92 <__floatsisf+0x36>
    4a8e:	60 ff       	sbrs	r22, 0
    4a90:	1b c0       	rjmp	.+54     	; 0x4ac8 <__floatsisf+0x6c>
    4a92:	6f 5f       	subi	r22, 0xFF	; 255
    4a94:	7f 4f       	sbci	r23, 0xFF	; 255
    4a96:	8f 4f       	sbci	r24, 0xFF	; 255
    4a98:	9f 4f       	sbci	r25, 0xFF	; 255
    4a9a:	16 c0       	rjmp	.+44     	; 0x4ac8 <__floatsisf+0x6c>
    4a9c:	88 23       	and	r24, r24
    4a9e:	11 f0       	breq	.+4      	; 0x4aa4 <__floatsisf+0x48>
    4aa0:	96 e9       	ldi	r25, 0x96	; 150
    4aa2:	11 c0       	rjmp	.+34     	; 0x4ac6 <__floatsisf+0x6a>
    4aa4:	77 23       	and	r23, r23
    4aa6:	21 f0       	breq	.+8      	; 0x4ab0 <__floatsisf+0x54>
    4aa8:	9e e8       	ldi	r25, 0x8E	; 142
    4aaa:	87 2f       	mov	r24, r23
    4aac:	76 2f       	mov	r23, r22
    4aae:	05 c0       	rjmp	.+10     	; 0x4aba <__floatsisf+0x5e>
    4ab0:	66 23       	and	r22, r22
    4ab2:	71 f0       	breq	.+28     	; 0x4ad0 <__floatsisf+0x74>
    4ab4:	96 e8       	ldi	r25, 0x86	; 134
    4ab6:	86 2f       	mov	r24, r22
    4ab8:	70 e0       	ldi	r23, 0x00	; 0
    4aba:	60 e0       	ldi	r22, 0x00	; 0
    4abc:	2a f0       	brmi	.+10     	; 0x4ac8 <__floatsisf+0x6c>
    4abe:	9a 95       	dec	r25
    4ac0:	66 0f       	add	r22, r22
    4ac2:	77 1f       	adc	r23, r23
    4ac4:	88 1f       	adc	r24, r24
    4ac6:	da f7       	brpl	.-10     	; 0x4abe <__floatsisf+0x62>
    4ac8:	88 0f       	add	r24, r24
    4aca:	96 95       	lsr	r25
    4acc:	87 95       	ror	r24
    4ace:	97 f9       	bld	r25, 7
    4ad0:	08 95       	ret

00004ad2 <__fp_cmp>:
    4ad2:	99 0f       	add	r25, r25
    4ad4:	00 08       	sbc	r0, r0
    4ad6:	55 0f       	add	r21, r21
    4ad8:	aa 0b       	sbc	r26, r26
    4ada:	e0 e8       	ldi	r30, 0x80	; 128
    4adc:	fe ef       	ldi	r31, 0xFE	; 254
    4ade:	16 16       	cp	r1, r22
    4ae0:	17 06       	cpc	r1, r23
    4ae2:	e8 07       	cpc	r30, r24
    4ae4:	f9 07       	cpc	r31, r25
    4ae6:	c0 f0       	brcs	.+48     	; 0x4b18 <__fp_cmp+0x46>
    4ae8:	12 16       	cp	r1, r18
    4aea:	13 06       	cpc	r1, r19
    4aec:	e4 07       	cpc	r30, r20
    4aee:	f5 07       	cpc	r31, r21
    4af0:	98 f0       	brcs	.+38     	; 0x4b18 <__fp_cmp+0x46>
    4af2:	62 1b       	sub	r22, r18
    4af4:	73 0b       	sbc	r23, r19
    4af6:	84 0b       	sbc	r24, r20
    4af8:	95 0b       	sbc	r25, r21
    4afa:	39 f4       	brne	.+14     	; 0x4b0a <__fp_cmp+0x38>
    4afc:	0a 26       	eor	r0, r26
    4afe:	61 f0       	breq	.+24     	; 0x4b18 <__fp_cmp+0x46>
    4b00:	23 2b       	or	r18, r19
    4b02:	24 2b       	or	r18, r20
    4b04:	25 2b       	or	r18, r21
    4b06:	21 f4       	brne	.+8      	; 0x4b10 <__fp_cmp+0x3e>
    4b08:	08 95       	ret
    4b0a:	0a 26       	eor	r0, r26
    4b0c:	09 f4       	brne	.+2      	; 0x4b10 <__fp_cmp+0x3e>
    4b0e:	a1 40       	sbci	r26, 0x01	; 1
    4b10:	a6 95       	lsr	r26
    4b12:	8f ef       	ldi	r24, 0xFF	; 255
    4b14:	81 1d       	adc	r24, r1
    4b16:	81 1d       	adc	r24, r1
    4b18:	08 95       	ret

00004b1a <__fp_inf>:
    4b1a:	97 f9       	bld	r25, 7
    4b1c:	9f 67       	ori	r25, 0x7F	; 127
    4b1e:	80 e8       	ldi	r24, 0x80	; 128
    4b20:	70 e0       	ldi	r23, 0x00	; 0
    4b22:	60 e0       	ldi	r22, 0x00	; 0
    4b24:	08 95       	ret

00004b26 <__fp_nan>:
    4b26:	9f ef       	ldi	r25, 0xFF	; 255
    4b28:	80 ec       	ldi	r24, 0xC0	; 192
    4b2a:	08 95       	ret

00004b2c <__fp_powser>:
    4b2c:	df 93       	push	r29
    4b2e:	cf 93       	push	r28
    4b30:	1f 93       	push	r17
    4b32:	0f 93       	push	r16
    4b34:	ff 92       	push	r15
    4b36:	ef 92       	push	r14
    4b38:	df 92       	push	r13
    4b3a:	7b 01       	movw	r14, r22
    4b3c:	8c 01       	movw	r16, r24
    4b3e:	68 94       	set
    4b40:	05 c0       	rjmp	.+10     	; 0x4b4c <__fp_powser+0x20>
    4b42:	da 2e       	mov	r13, r26
    4b44:	ef 01       	movw	r28, r30
    4b46:	f4 d0       	rcall	.+488    	; 0x4d30 <__mulsf3x>
    4b48:	fe 01       	movw	r30, r28
    4b4a:	e8 94       	clt
    4b4c:	a5 91       	lpm	r26, Z+
    4b4e:	25 91       	lpm	r18, Z+
    4b50:	35 91       	lpm	r19, Z+
    4b52:	45 91       	lpm	r20, Z+
    4b54:	55 91       	lpm	r21, Z+
    4b56:	ae f3       	brts	.-22     	; 0x4b42 <__fp_powser+0x16>
    4b58:	ef 01       	movw	r28, r30
    4b5a:	29 de       	rcall	.-942    	; 0x47ae <__addsf3x>
    4b5c:	fe 01       	movw	r30, r28
    4b5e:	97 01       	movw	r18, r14
    4b60:	a8 01       	movw	r20, r16
    4b62:	da 94       	dec	r13
    4b64:	79 f7       	brne	.-34     	; 0x4b44 <__fp_powser+0x18>
    4b66:	df 90       	pop	r13
    4b68:	ef 90       	pop	r14
    4b6a:	ff 90       	pop	r15
    4b6c:	0f 91       	pop	r16
    4b6e:	1f 91       	pop	r17
    4b70:	cf 91       	pop	r28
    4b72:	df 91       	pop	r29
    4b74:	08 95       	ret

00004b76 <__fp_pscA>:
    4b76:	00 24       	eor	r0, r0
    4b78:	0a 94       	dec	r0
    4b7a:	16 16       	cp	r1, r22
    4b7c:	17 06       	cpc	r1, r23
    4b7e:	18 06       	cpc	r1, r24
    4b80:	09 06       	cpc	r0, r25
    4b82:	08 95       	ret

00004b84 <__fp_pscB>:
    4b84:	00 24       	eor	r0, r0
    4b86:	0a 94       	dec	r0
    4b88:	12 16       	cp	r1, r18
    4b8a:	13 06       	cpc	r1, r19
    4b8c:	14 06       	cpc	r1, r20
    4b8e:	05 06       	cpc	r0, r21
    4b90:	08 95       	ret
    4b92:	c9 cf       	rjmp	.-110    	; 0x4b26 <__fp_nan>

00004b94 <__fp_rempio2>:
    4b94:	50 d0       	rcall	.+160    	; 0x4c36 <__fp_splitA>
    4b96:	e8 f3       	brcs	.-6      	; 0x4b92 <__fp_pscB+0xe>
    4b98:	e8 94       	clt
    4b9a:	e0 e0       	ldi	r30, 0x00	; 0
    4b9c:	bb 27       	eor	r27, r27
    4b9e:	9f 57       	subi	r25, 0x7F	; 127
    4ba0:	f0 f0       	brcs	.+60     	; 0x4bde <__fp_rempio2+0x4a>
    4ba2:	2a ed       	ldi	r18, 0xDA	; 218
    4ba4:	3f e0       	ldi	r19, 0x0F	; 15
    4ba6:	49 ec       	ldi	r20, 0xC9	; 201
    4ba8:	06 c0       	rjmp	.+12     	; 0x4bb6 <__fp_rempio2+0x22>
    4baa:	ee 0f       	add	r30, r30
    4bac:	bb 0f       	add	r27, r27
    4bae:	66 1f       	adc	r22, r22
    4bb0:	77 1f       	adc	r23, r23
    4bb2:	88 1f       	adc	r24, r24
    4bb4:	28 f0       	brcs	.+10     	; 0x4bc0 <__fp_rempio2+0x2c>
    4bb6:	b2 3a       	cpi	r27, 0xA2	; 162
    4bb8:	62 07       	cpc	r22, r18
    4bba:	73 07       	cpc	r23, r19
    4bbc:	84 07       	cpc	r24, r20
    4bbe:	28 f0       	brcs	.+10     	; 0x4bca <__fp_rempio2+0x36>
    4bc0:	b2 5a       	subi	r27, 0xA2	; 162
    4bc2:	62 0b       	sbc	r22, r18
    4bc4:	73 0b       	sbc	r23, r19
    4bc6:	84 0b       	sbc	r24, r20
    4bc8:	e3 95       	inc	r30
    4bca:	9a 95       	dec	r25
    4bcc:	72 f7       	brpl	.-36     	; 0x4baa <__fp_rempio2+0x16>
    4bce:	80 38       	cpi	r24, 0x80	; 128
    4bd0:	30 f4       	brcc	.+12     	; 0x4bde <__fp_rempio2+0x4a>
    4bd2:	9a 95       	dec	r25
    4bd4:	bb 0f       	add	r27, r27
    4bd6:	66 1f       	adc	r22, r22
    4bd8:	77 1f       	adc	r23, r23
    4bda:	88 1f       	adc	r24, r24
    4bdc:	d2 f7       	brpl	.-12     	; 0x4bd2 <__fp_rempio2+0x3e>
    4bde:	90 48       	sbci	r25, 0x80	; 128
    4be0:	29 c1       	rjmp	.+594    	; 0x4e34 <__fp_mpack_finite>

00004be2 <__fp_round>:
    4be2:	09 2e       	mov	r0, r25
    4be4:	03 94       	inc	r0
    4be6:	00 0c       	add	r0, r0
    4be8:	11 f4       	brne	.+4      	; 0x4bee <__fp_round+0xc>
    4bea:	88 23       	and	r24, r24
    4bec:	52 f0       	brmi	.+20     	; 0x4c02 <__fp_round+0x20>
    4bee:	bb 0f       	add	r27, r27
    4bf0:	40 f4       	brcc	.+16     	; 0x4c02 <__fp_round+0x20>
    4bf2:	bf 2b       	or	r27, r31
    4bf4:	11 f4       	brne	.+4      	; 0x4bfa <__fp_round+0x18>
    4bf6:	60 ff       	sbrs	r22, 0
    4bf8:	04 c0       	rjmp	.+8      	; 0x4c02 <__fp_round+0x20>
    4bfa:	6f 5f       	subi	r22, 0xFF	; 255
    4bfc:	7f 4f       	sbci	r23, 0xFF	; 255
    4bfe:	8f 4f       	sbci	r24, 0xFF	; 255
    4c00:	9f 4f       	sbci	r25, 0xFF	; 255
    4c02:	08 95       	ret

00004c04 <__fp_sinus>:
    4c04:	ef 93       	push	r30
    4c06:	e0 ff       	sbrs	r30, 0
    4c08:	06 c0       	rjmp	.+12     	; 0x4c16 <__fp_sinus+0x12>
    4c0a:	a2 ea       	ldi	r26, 0xA2	; 162
    4c0c:	2a ed       	ldi	r18, 0xDA	; 218
    4c0e:	3f e0       	ldi	r19, 0x0F	; 15
    4c10:	49 ec       	ldi	r20, 0xC9	; 201
    4c12:	5f eb       	ldi	r21, 0xBF	; 191
    4c14:	cc dd       	rcall	.-1128   	; 0x47ae <__addsf3x>
    4c16:	e5 df       	rcall	.-54     	; 0x4be2 <__fp_round>
    4c18:	0f 90       	pop	r0
    4c1a:	03 94       	inc	r0
    4c1c:	01 fc       	sbrc	r0, 1
    4c1e:	90 58       	subi	r25, 0x80	; 128
    4c20:	e7 ec       	ldi	r30, 0xC7	; 199
    4c22:	f0 e0       	ldi	r31, 0x00	; 0
    4c24:	13 c1       	rjmp	.+550    	; 0x4e4c <__fp_powsodd>

00004c26 <__fp_split3>:
    4c26:	57 fd       	sbrc	r21, 7
    4c28:	90 58       	subi	r25, 0x80	; 128
    4c2a:	44 0f       	add	r20, r20
    4c2c:	55 1f       	adc	r21, r21
    4c2e:	59 f0       	breq	.+22     	; 0x4c46 <__fp_splitA+0x10>
    4c30:	5f 3f       	cpi	r21, 0xFF	; 255
    4c32:	71 f0       	breq	.+28     	; 0x4c50 <__fp_splitA+0x1a>
    4c34:	47 95       	ror	r20

00004c36 <__fp_splitA>:
    4c36:	88 0f       	add	r24, r24
    4c38:	97 fb       	bst	r25, 7
    4c3a:	99 1f       	adc	r25, r25
    4c3c:	61 f0       	breq	.+24     	; 0x4c56 <__fp_splitA+0x20>
    4c3e:	9f 3f       	cpi	r25, 0xFF	; 255
    4c40:	79 f0       	breq	.+30     	; 0x4c60 <__fp_splitA+0x2a>
    4c42:	87 95       	ror	r24
    4c44:	08 95       	ret
    4c46:	12 16       	cp	r1, r18
    4c48:	13 06       	cpc	r1, r19
    4c4a:	14 06       	cpc	r1, r20
    4c4c:	55 1f       	adc	r21, r21
    4c4e:	f2 cf       	rjmp	.-28     	; 0x4c34 <__fp_split3+0xe>
    4c50:	46 95       	lsr	r20
    4c52:	f1 df       	rcall	.-30     	; 0x4c36 <__fp_splitA>
    4c54:	08 c0       	rjmp	.+16     	; 0x4c66 <__fp_splitA+0x30>
    4c56:	16 16       	cp	r1, r22
    4c58:	17 06       	cpc	r1, r23
    4c5a:	18 06       	cpc	r1, r24
    4c5c:	99 1f       	adc	r25, r25
    4c5e:	f1 cf       	rjmp	.-30     	; 0x4c42 <__fp_splitA+0xc>
    4c60:	86 95       	lsr	r24
    4c62:	71 05       	cpc	r23, r1
    4c64:	61 05       	cpc	r22, r1
    4c66:	08 94       	sec
    4c68:	08 95       	ret

00004c6a <__fp_zero>:
    4c6a:	e8 94       	clt

00004c6c <__fp_szero>:
    4c6c:	bb 27       	eor	r27, r27
    4c6e:	66 27       	eor	r22, r22
    4c70:	77 27       	eor	r23, r23
    4c72:	cb 01       	movw	r24, r22
    4c74:	97 f9       	bld	r25, 7
    4c76:	08 95       	ret

00004c78 <__gesf2>:
    4c78:	2c df       	rcall	.-424    	; 0x4ad2 <__fp_cmp>
    4c7a:	08 f4       	brcc	.+2      	; 0x4c7e <__gesf2+0x6>
    4c7c:	8f ef       	ldi	r24, 0xFF	; 255
    4c7e:	08 95       	ret

00004c80 <inverse>:
    4c80:	9b 01       	movw	r18, r22
    4c82:	ac 01       	movw	r20, r24
    4c84:	60 e0       	ldi	r22, 0x00	; 0
    4c86:	70 e0       	ldi	r23, 0x00	; 0
    4c88:	80 e8       	ldi	r24, 0x80	; 128
    4c8a:	9f e3       	ldi	r25, 0x3F	; 63
    4c8c:	4c ce       	rjmp	.-872    	; 0x4926 <__divsf3>
    4c8e:	0e f0       	brts	.+2      	; 0x4c92 <inverse+0x12>
    4c90:	cf c0       	rjmp	.+414    	; 0x4e30 <__fp_mpack>
    4c92:	49 cf       	rjmp	.-366    	; 0x4b26 <__fp_nan>
    4c94:	68 94       	set
    4c96:	41 cf       	rjmp	.-382    	; 0x4b1a <__fp_inf>

00004c98 <log>:
    4c98:	ce df       	rcall	.-100    	; 0x4c36 <__fp_splitA>
    4c9a:	c8 f3       	brcs	.-14     	; 0x4c8e <inverse+0xe>
    4c9c:	99 23       	and	r25, r25
    4c9e:	d1 f3       	breq	.-12     	; 0x4c94 <inverse+0x14>
    4ca0:	c6 f3       	brts	.-16     	; 0x4c92 <inverse+0x12>
    4ca2:	df 93       	push	r29
    4ca4:	cf 93       	push	r28
    4ca6:	1f 93       	push	r17
    4ca8:	0f 93       	push	r16
    4caa:	ff 92       	push	r15
    4cac:	c9 2f       	mov	r28, r25
    4cae:	dd 27       	eor	r29, r29
    4cb0:	88 23       	and	r24, r24
    4cb2:	2a f0       	brmi	.+10     	; 0x4cbe <log+0x26>
    4cb4:	21 97       	sbiw	r28, 0x01	; 1
    4cb6:	66 0f       	add	r22, r22
    4cb8:	77 1f       	adc	r23, r23
    4cba:	88 1f       	adc	r24, r24
    4cbc:	da f7       	brpl	.-10     	; 0x4cb4 <log+0x1c>
    4cbe:	20 e0       	ldi	r18, 0x00	; 0
    4cc0:	30 e0       	ldi	r19, 0x00	; 0
    4cc2:	40 e8       	ldi	r20, 0x80	; 128
    4cc4:	5f eb       	ldi	r21, 0xBF	; 191
    4cc6:	9f e3       	ldi	r25, 0x3F	; 63
    4cc8:	88 39       	cpi	r24, 0x98	; 152
    4cca:	20 f0       	brcs	.+8      	; 0x4cd4 <log+0x3c>
    4ccc:	80 3e       	cpi	r24, 0xE0	; 224
    4cce:	30 f0       	brcs	.+12     	; 0x4cdc <log+0x44>
    4cd0:	21 96       	adiw	r28, 0x01	; 1
    4cd2:	8f 77       	andi	r24, 0x7F	; 127
    4cd4:	5b dd       	rcall	.-1354   	; 0x478c <__addsf3>
    4cd6:	e5 ee       	ldi	r30, 0xE5	; 229
    4cd8:	f0 e0       	ldi	r31, 0x00	; 0
    4cda:	03 c0       	rjmp	.+6      	; 0x4ce2 <log+0x4a>
    4cdc:	57 dd       	rcall	.-1362   	; 0x478c <__addsf3>
    4cde:	e2 e1       	ldi	r30, 0x12	; 18
    4ce0:	f1 e0       	ldi	r31, 0x01	; 1
    4ce2:	24 df       	rcall	.-440    	; 0x4b2c <__fp_powser>
    4ce4:	8b 01       	movw	r16, r22
    4ce6:	be 01       	movw	r22, r28
    4ce8:	ec 01       	movw	r28, r24
    4cea:	fb 2e       	mov	r15, r27
    4cec:	6f 57       	subi	r22, 0x7F	; 127
    4cee:	71 09       	sbc	r23, r1
    4cf0:	75 95       	asr	r23
    4cf2:	77 1f       	adc	r23, r23
    4cf4:	88 0b       	sbc	r24, r24
    4cf6:	99 0b       	sbc	r25, r25
    4cf8:	b1 de       	rcall	.-670    	; 0x4a5c <__floatsisf>
    4cfa:	28 e1       	ldi	r18, 0x18	; 24
    4cfc:	32 e7       	ldi	r19, 0x72	; 114
    4cfe:	41 e3       	ldi	r20, 0x31	; 49
    4d00:	5f e3       	ldi	r21, 0x3F	; 63
    4d02:	16 d0       	rcall	.+44     	; 0x4d30 <__mulsf3x>
    4d04:	af 2d       	mov	r26, r15
    4d06:	98 01       	movw	r18, r16
    4d08:	ae 01       	movw	r20, r28
    4d0a:	ff 90       	pop	r15
    4d0c:	0f 91       	pop	r16
    4d0e:	1f 91       	pop	r17
    4d10:	cf 91       	pop	r28
    4d12:	df 91       	pop	r29
    4d14:	4c dd       	rcall	.-1384   	; 0x47ae <__addsf3x>
    4d16:	65 cf       	rjmp	.-310    	; 0x4be2 <__fp_round>

00004d18 <__mulsf3>:
    4d18:	0b d0       	rcall	.+22     	; 0x4d30 <__mulsf3x>
    4d1a:	63 cf       	rjmp	.-314    	; 0x4be2 <__fp_round>
    4d1c:	2c df       	rcall	.-424    	; 0x4b76 <__fp_pscA>
    4d1e:	28 f0       	brcs	.+10     	; 0x4d2a <__mulsf3+0x12>
    4d20:	31 df       	rcall	.-414    	; 0x4b84 <__fp_pscB>
    4d22:	18 f0       	brcs	.+6      	; 0x4d2a <__mulsf3+0x12>
    4d24:	95 23       	and	r25, r21
    4d26:	09 f0       	breq	.+2      	; 0x4d2a <__mulsf3+0x12>
    4d28:	f8 ce       	rjmp	.-528    	; 0x4b1a <__fp_inf>
    4d2a:	fd ce       	rjmp	.-518    	; 0x4b26 <__fp_nan>
    4d2c:	11 24       	eor	r1, r1
    4d2e:	9e cf       	rjmp	.-196    	; 0x4c6c <__fp_szero>

00004d30 <__mulsf3x>:
    4d30:	7a df       	rcall	.-268    	; 0x4c26 <__fp_split3>
    4d32:	a0 f3       	brcs	.-24     	; 0x4d1c <__mulsf3+0x4>

00004d34 <__mulsf3_pse>:
    4d34:	95 9f       	mul	r25, r21
    4d36:	d1 f3       	breq	.-12     	; 0x4d2c <__mulsf3+0x14>
    4d38:	95 0f       	add	r25, r21
    4d3a:	50 e0       	ldi	r21, 0x00	; 0
    4d3c:	55 1f       	adc	r21, r21
    4d3e:	62 9f       	mul	r22, r18
    4d40:	f0 01       	movw	r30, r0
    4d42:	72 9f       	mul	r23, r18
    4d44:	bb 27       	eor	r27, r27
    4d46:	f0 0d       	add	r31, r0
    4d48:	b1 1d       	adc	r27, r1
    4d4a:	63 9f       	mul	r22, r19
    4d4c:	aa 27       	eor	r26, r26
    4d4e:	f0 0d       	add	r31, r0
    4d50:	b1 1d       	adc	r27, r1
    4d52:	aa 1f       	adc	r26, r26
    4d54:	64 9f       	mul	r22, r20
    4d56:	66 27       	eor	r22, r22
    4d58:	b0 0d       	add	r27, r0
    4d5a:	a1 1d       	adc	r26, r1
    4d5c:	66 1f       	adc	r22, r22
    4d5e:	82 9f       	mul	r24, r18
    4d60:	22 27       	eor	r18, r18
    4d62:	b0 0d       	add	r27, r0
    4d64:	a1 1d       	adc	r26, r1
    4d66:	62 1f       	adc	r22, r18
    4d68:	73 9f       	mul	r23, r19
    4d6a:	b0 0d       	add	r27, r0
    4d6c:	a1 1d       	adc	r26, r1
    4d6e:	62 1f       	adc	r22, r18
    4d70:	83 9f       	mul	r24, r19
    4d72:	a0 0d       	add	r26, r0
    4d74:	61 1d       	adc	r22, r1
    4d76:	22 1f       	adc	r18, r18
    4d78:	74 9f       	mul	r23, r20
    4d7a:	33 27       	eor	r19, r19
    4d7c:	a0 0d       	add	r26, r0
    4d7e:	61 1d       	adc	r22, r1
    4d80:	23 1f       	adc	r18, r19
    4d82:	84 9f       	mul	r24, r20
    4d84:	60 0d       	add	r22, r0
    4d86:	21 1d       	adc	r18, r1
    4d88:	82 2f       	mov	r24, r18
    4d8a:	76 2f       	mov	r23, r22
    4d8c:	6a 2f       	mov	r22, r26
    4d8e:	11 24       	eor	r1, r1
    4d90:	9f 57       	subi	r25, 0x7F	; 127
    4d92:	50 40       	sbci	r21, 0x00	; 0
    4d94:	8a f0       	brmi	.+34     	; 0x4db8 <__mulsf3_pse+0x84>
    4d96:	e1 f0       	breq	.+56     	; 0x4dd0 <__mulsf3_pse+0x9c>
    4d98:	88 23       	and	r24, r24
    4d9a:	4a f0       	brmi	.+18     	; 0x4dae <__mulsf3_pse+0x7a>
    4d9c:	ee 0f       	add	r30, r30
    4d9e:	ff 1f       	adc	r31, r31
    4da0:	bb 1f       	adc	r27, r27
    4da2:	66 1f       	adc	r22, r22
    4da4:	77 1f       	adc	r23, r23
    4da6:	88 1f       	adc	r24, r24
    4da8:	91 50       	subi	r25, 0x01	; 1
    4daa:	50 40       	sbci	r21, 0x00	; 0
    4dac:	a9 f7       	brne	.-22     	; 0x4d98 <__mulsf3_pse+0x64>
    4dae:	9e 3f       	cpi	r25, 0xFE	; 254
    4db0:	51 05       	cpc	r21, r1
    4db2:	70 f0       	brcs	.+28     	; 0x4dd0 <__mulsf3_pse+0x9c>
    4db4:	b2 ce       	rjmp	.-668    	; 0x4b1a <__fp_inf>
    4db6:	5a cf       	rjmp	.-332    	; 0x4c6c <__fp_szero>
    4db8:	5f 3f       	cpi	r21, 0xFF	; 255
    4dba:	ec f3       	brlt	.-6      	; 0x4db6 <__mulsf3_pse+0x82>
    4dbc:	98 3e       	cpi	r25, 0xE8	; 232
    4dbe:	dc f3       	brlt	.-10     	; 0x4db6 <__mulsf3_pse+0x82>
    4dc0:	86 95       	lsr	r24
    4dc2:	77 95       	ror	r23
    4dc4:	67 95       	ror	r22
    4dc6:	b7 95       	ror	r27
    4dc8:	f7 95       	ror	r31
    4dca:	e7 95       	ror	r30
    4dcc:	9f 5f       	subi	r25, 0xFF	; 255
    4dce:	c1 f7       	brne	.-16     	; 0x4dc0 <__mulsf3_pse+0x8c>
    4dd0:	fe 2b       	or	r31, r30
    4dd2:	88 0f       	add	r24, r24
    4dd4:	91 1d       	adc	r25, r1
    4dd6:	96 95       	lsr	r25
    4dd8:	87 95       	ror	r24
    4dda:	97 f9       	bld	r25, 7
    4ddc:	08 95       	ret

00004dde <sin>:
    4dde:	9f 93       	push	r25
    4de0:	d9 de       	rcall	.-590    	; 0x4b94 <__fp_rempio2>
    4de2:	0f 90       	pop	r0
    4de4:	07 fc       	sbrc	r0, 7
    4de6:	ee 5f       	subi	r30, 0xFE	; 254
    4de8:	0d cf       	rjmp	.-486    	; 0x4c04 <__fp_sinus>

00004dea <square>:
    4dea:	9b 01       	movw	r18, r22
    4dec:	ac 01       	movw	r20, r24
    4dee:	94 cf       	rjmp	.-216    	; 0x4d18 <__mulsf3>

00004df0 <tan>:
    4df0:	df 93       	push	r29
    4df2:	d9 2f       	mov	r29, r25
    4df4:	cf de       	rcall	.-610    	; 0x4b94 <__fp_rempio2>
    4df6:	e6 95       	lsr	r30
    4df8:	d7 95       	ror	r29
    4dfa:	2a ed       	ldi	r18, 0xDA	; 218
    4dfc:	3f e0       	ldi	r19, 0x0F	; 15
    4dfe:	49 e4       	ldi	r20, 0x49	; 73
    4e00:	5f e3       	ldi	r21, 0x3F	; 63
    4e02:	b3 3a       	cpi	r27, 0xA3	; 163
    4e04:	62 07       	cpc	r22, r18
    4e06:	73 07       	cpc	r23, r19
    4e08:	84 07       	cpc	r24, r20
    4e0a:	95 07       	cpc	r25, r21
    4e0c:	d7 95       	ror	r29
    4e0e:	2a f0       	brmi	.+10     	; 0x4e1a <tan+0x2a>
    4e10:	a2 ea       	ldi	r26, 0xA2	; 162
    4e12:	49 ec       	ldi	r20, 0xC9	; 201
    4e14:	90 68       	ori	r25, 0x80	; 128
    4e16:	cb dc       	rcall	.-1642   	; 0x47ae <__addsf3x>
    4e18:	e4 de       	rcall	.-568    	; 0x4be2 <__fp_round>
    4e1a:	ef e3       	ldi	r30, 0x3F	; 63
    4e1c:	f1 e0       	ldi	r31, 0x01	; 1
    4e1e:	16 d0       	rcall	.+44     	; 0x4e4c <__fp_powsodd>
    4e20:	dd 0f       	add	r29, r29
    4e22:	0b f0       	brvs	.+2      	; 0x4e26 <tan+0x36>
    4e24:	2d df       	rcall	.-422    	; 0x4c80 <inverse>
    4e26:	dd 0f       	add	r29, r29
    4e28:	0b f4       	brvc	.+2      	; 0x4e2c <tan+0x3c>
    4e2a:	90 58       	subi	r25, 0x80	; 128
    4e2c:	df 91       	pop	r29
    4e2e:	08 95       	ret

00004e30 <__fp_mpack>:
    4e30:	9f 3f       	cpi	r25, 0xFF	; 255
    4e32:	31 f0       	breq	.+12     	; 0x4e40 <__fp_mpack_finite+0xc>

00004e34 <__fp_mpack_finite>:
    4e34:	91 50       	subi	r25, 0x01	; 1
    4e36:	20 f4       	brcc	.+8      	; 0x4e40 <__fp_mpack_finite+0xc>
    4e38:	87 95       	ror	r24
    4e3a:	77 95       	ror	r23
    4e3c:	67 95       	ror	r22
    4e3e:	b7 95       	ror	r27
    4e40:	88 0f       	add	r24, r24
    4e42:	91 1d       	adc	r25, r1
    4e44:	96 95       	lsr	r25
    4e46:	87 95       	ror	r24
    4e48:	97 f9       	bld	r25, 7
    4e4a:	08 95       	ret

00004e4c <__fp_powsodd>:
    4e4c:	9f 93       	push	r25
    4e4e:	8f 93       	push	r24
    4e50:	7f 93       	push	r23
    4e52:	6f 93       	push	r22
    4e54:	ff 93       	push	r31
    4e56:	ef 93       	push	r30
    4e58:	9b 01       	movw	r18, r22
    4e5a:	ac 01       	movw	r20, r24
    4e5c:	5d df       	rcall	.-326    	; 0x4d18 <__mulsf3>
    4e5e:	ef 91       	pop	r30
    4e60:	ff 91       	pop	r31
    4e62:	64 de       	rcall	.-824    	; 0x4b2c <__fp_powser>
    4e64:	2f 91       	pop	r18
    4e66:	3f 91       	pop	r19
    4e68:	4f 91       	pop	r20
    4e6a:	5f 91       	pop	r21
    4e6c:	55 cf       	rjmp	.-342    	; 0x4d18 <__mulsf3>

00004e6e <vfprintf>:
    4e6e:	a3 e1       	ldi	r26, 0x13	; 19
    4e70:	b0 e0       	ldi	r27, 0x00	; 0
    4e72:	ed e3       	ldi	r30, 0x3D	; 61
    4e74:	f7 e2       	ldi	r31, 0x27	; 39
    4e76:	0c 94 b8 2a 	jmp	0x5570	; 0x5570 <__prologue_saves__>
    4e7a:	7c 01       	movw	r14, r24
    4e7c:	1b 01       	movw	r2, r22
    4e7e:	6a 01       	movw	r12, r20
    4e80:	fc 01       	movw	r30, r24
    4e82:	17 82       	std	Z+7, r1	; 0x07
    4e84:	16 82       	std	Z+6, r1	; 0x06
    4e86:	83 81       	ldd	r24, Z+3	; 0x03
    4e88:	81 ff       	sbrs	r24, 1
    4e8a:	66 c3       	rjmp	.+1740   	; 0x5558 <vfprintf+0x6ea>
    4e8c:	be 01       	movw	r22, r28
    4e8e:	6f 5f       	subi	r22, 0xFF	; 255
    4e90:	7f 4f       	sbci	r23, 0xFF	; 255
    4e92:	4b 01       	movw	r8, r22
    4e94:	f7 01       	movw	r30, r14
    4e96:	93 81       	ldd	r25, Z+3	; 0x03
    4e98:	f1 01       	movw	r30, r2
    4e9a:	93 fd       	sbrc	r25, 3
    4e9c:	85 91       	lpm	r24, Z+
    4e9e:	93 ff       	sbrs	r25, 3
    4ea0:	81 91       	ld	r24, Z+
    4ea2:	1f 01       	movw	r2, r30
    4ea4:	88 23       	and	r24, r24
    4ea6:	09 f4       	brne	.+2      	; 0x4eaa <vfprintf+0x3c>
    4ea8:	53 c3       	rjmp	.+1702   	; 0x5550 <vfprintf+0x6e2>
    4eaa:	85 32       	cpi	r24, 0x25	; 37
    4eac:	39 f4       	brne	.+14     	; 0x4ebc <vfprintf+0x4e>
    4eae:	93 fd       	sbrc	r25, 3
    4eb0:	85 91       	lpm	r24, Z+
    4eb2:	93 ff       	sbrs	r25, 3
    4eb4:	81 91       	ld	r24, Z+
    4eb6:	1f 01       	movw	r2, r30
    4eb8:	85 32       	cpi	r24, 0x25	; 37
    4eba:	39 f4       	brne	.+14     	; 0x4eca <vfprintf+0x5c>
    4ebc:	b7 01       	movw	r22, r14
    4ebe:	90 e0       	ldi	r25, 0x00	; 0
    4ec0:	0e 94 dd 2b 	call	0x57ba	; 0x57ba <fputc>
    4ec4:	56 01       	movw	r10, r12
    4ec6:	65 01       	movw	r12, r10
    4ec8:	e5 cf       	rjmp	.-54     	; 0x4e94 <vfprintf+0x26>
    4eca:	10 e0       	ldi	r17, 0x00	; 0
    4ecc:	51 2c       	mov	r5, r1
    4ece:	20 e0       	ldi	r18, 0x00	; 0
    4ed0:	20 32       	cpi	r18, 0x20	; 32
    4ed2:	a0 f4       	brcc	.+40     	; 0x4efc <vfprintf+0x8e>
    4ed4:	8b 32       	cpi	r24, 0x2B	; 43
    4ed6:	69 f0       	breq	.+26     	; 0x4ef2 <vfprintf+0x84>
    4ed8:	30 f4       	brcc	.+12     	; 0x4ee6 <vfprintf+0x78>
    4eda:	80 32       	cpi	r24, 0x20	; 32
    4edc:	59 f0       	breq	.+22     	; 0x4ef4 <vfprintf+0x86>
    4ede:	83 32       	cpi	r24, 0x23	; 35
    4ee0:	69 f4       	brne	.+26     	; 0x4efc <vfprintf+0x8e>
    4ee2:	20 61       	ori	r18, 0x10	; 16
    4ee4:	2c c0       	rjmp	.+88     	; 0x4f3e <vfprintf+0xd0>
    4ee6:	8d 32       	cpi	r24, 0x2D	; 45
    4ee8:	39 f0       	breq	.+14     	; 0x4ef8 <vfprintf+0x8a>
    4eea:	80 33       	cpi	r24, 0x30	; 48
    4eec:	39 f4       	brne	.+14     	; 0x4efc <vfprintf+0x8e>
    4eee:	21 60       	ori	r18, 0x01	; 1
    4ef0:	26 c0       	rjmp	.+76     	; 0x4f3e <vfprintf+0xd0>
    4ef2:	22 60       	ori	r18, 0x02	; 2
    4ef4:	24 60       	ori	r18, 0x04	; 4
    4ef6:	23 c0       	rjmp	.+70     	; 0x4f3e <vfprintf+0xd0>
    4ef8:	28 60       	ori	r18, 0x08	; 8
    4efa:	21 c0       	rjmp	.+66     	; 0x4f3e <vfprintf+0xd0>
    4efc:	27 fd       	sbrc	r18, 7
    4efe:	27 c0       	rjmp	.+78     	; 0x4f4e <vfprintf+0xe0>
    4f00:	30 ed       	ldi	r19, 0xD0	; 208
    4f02:	38 0f       	add	r19, r24
    4f04:	3a 30       	cpi	r19, 0x0A	; 10
    4f06:	78 f4       	brcc	.+30     	; 0x4f26 <vfprintf+0xb8>
    4f08:	26 ff       	sbrs	r18, 6
    4f0a:	06 c0       	rjmp	.+12     	; 0x4f18 <vfprintf+0xaa>
    4f0c:	fa e0       	ldi	r31, 0x0A	; 10
    4f0e:	1f 9f       	mul	r17, r31
    4f10:	30 0d       	add	r19, r0
    4f12:	11 24       	eor	r1, r1
    4f14:	13 2f       	mov	r17, r19
    4f16:	13 c0       	rjmp	.+38     	; 0x4f3e <vfprintf+0xd0>
    4f18:	6a e0       	ldi	r22, 0x0A	; 10
    4f1a:	56 9e       	mul	r5, r22
    4f1c:	30 0d       	add	r19, r0
    4f1e:	11 24       	eor	r1, r1
    4f20:	53 2e       	mov	r5, r19
    4f22:	20 62       	ori	r18, 0x20	; 32
    4f24:	0c c0       	rjmp	.+24     	; 0x4f3e <vfprintf+0xd0>
    4f26:	8e 32       	cpi	r24, 0x2E	; 46
    4f28:	21 f4       	brne	.+8      	; 0x4f32 <vfprintf+0xc4>
    4f2a:	26 fd       	sbrc	r18, 6
    4f2c:	11 c3       	rjmp	.+1570   	; 0x5550 <vfprintf+0x6e2>
    4f2e:	20 64       	ori	r18, 0x40	; 64
    4f30:	06 c0       	rjmp	.+12     	; 0x4f3e <vfprintf+0xd0>
    4f32:	8c 36       	cpi	r24, 0x6C	; 108
    4f34:	11 f4       	brne	.+4      	; 0x4f3a <vfprintf+0xcc>
    4f36:	20 68       	ori	r18, 0x80	; 128
    4f38:	02 c0       	rjmp	.+4      	; 0x4f3e <vfprintf+0xd0>
    4f3a:	88 36       	cpi	r24, 0x68	; 104
    4f3c:	41 f4       	brne	.+16     	; 0x4f4e <vfprintf+0xe0>
    4f3e:	f1 01       	movw	r30, r2
    4f40:	93 fd       	sbrc	r25, 3
    4f42:	85 91       	lpm	r24, Z+
    4f44:	93 ff       	sbrs	r25, 3
    4f46:	81 91       	ld	r24, Z+
    4f48:	1f 01       	movw	r2, r30
    4f4a:	81 11       	cpse	r24, r1
    4f4c:	c1 cf       	rjmp	.-126    	; 0x4ed0 <vfprintf+0x62>
    4f4e:	9b eb       	ldi	r25, 0xBB	; 187
    4f50:	98 0f       	add	r25, r24
    4f52:	93 30       	cpi	r25, 0x03	; 3
    4f54:	18 f4       	brcc	.+6      	; 0x4f5c <vfprintf+0xee>
    4f56:	20 61       	ori	r18, 0x10	; 16
    4f58:	80 5e       	subi	r24, 0xE0	; 224
    4f5a:	06 c0       	rjmp	.+12     	; 0x4f68 <vfprintf+0xfa>
    4f5c:	9b e9       	ldi	r25, 0x9B	; 155
    4f5e:	98 0f       	add	r25, r24
    4f60:	93 30       	cpi	r25, 0x03	; 3
    4f62:	08 f0       	brcs	.+2      	; 0x4f66 <vfprintf+0xf8>
    4f64:	aa c1       	rjmp	.+852    	; 0x52ba <vfprintf+0x44c>
    4f66:	2f 7e       	andi	r18, 0xEF	; 239
    4f68:	26 ff       	sbrs	r18, 6
    4f6a:	16 e0       	ldi	r17, 0x06	; 6
    4f6c:	2f 73       	andi	r18, 0x3F	; 63
    4f6e:	72 2e       	mov	r7, r18
    4f70:	85 36       	cpi	r24, 0x65	; 101
    4f72:	21 f4       	brne	.+8      	; 0x4f7c <vfprintf+0x10e>
    4f74:	f2 2f       	mov	r31, r18
    4f76:	f0 64       	ori	r31, 0x40	; 64
    4f78:	7f 2e       	mov	r7, r31
    4f7a:	08 c0       	rjmp	.+16     	; 0x4f8c <vfprintf+0x11e>
    4f7c:	86 36       	cpi	r24, 0x66	; 102
    4f7e:	21 f4       	brne	.+8      	; 0x4f88 <vfprintf+0x11a>
    4f80:	62 2f       	mov	r22, r18
    4f82:	60 68       	ori	r22, 0x80	; 128
    4f84:	76 2e       	mov	r7, r22
    4f86:	02 c0       	rjmp	.+4      	; 0x4f8c <vfprintf+0x11e>
    4f88:	11 11       	cpse	r17, r1
    4f8a:	11 50       	subi	r17, 0x01	; 1
    4f8c:	77 fe       	sbrs	r7, 7
    4f8e:	07 c0       	rjmp	.+14     	; 0x4f9e <vfprintf+0x130>
    4f90:	1c 33       	cpi	r17, 0x3C	; 60
    4f92:	48 f4       	brcc	.+18     	; 0x4fa6 <vfprintf+0x138>
    4f94:	44 24       	eor	r4, r4
    4f96:	43 94       	inc	r4
    4f98:	41 0e       	add	r4, r17
    4f9a:	27 e0       	ldi	r18, 0x07	; 7
    4f9c:	0b c0       	rjmp	.+22     	; 0x4fb4 <vfprintf+0x146>
    4f9e:	18 30       	cpi	r17, 0x08	; 8
    4fa0:	30 f4       	brcc	.+12     	; 0x4fae <vfprintf+0x140>
    4fa2:	21 2f       	mov	r18, r17
    4fa4:	06 c0       	rjmp	.+12     	; 0x4fb2 <vfprintf+0x144>
    4fa6:	27 e0       	ldi	r18, 0x07	; 7
    4fa8:	4c e3       	ldi	r20, 0x3C	; 60
    4faa:	44 2e       	mov	r4, r20
    4fac:	03 c0       	rjmp	.+6      	; 0x4fb4 <vfprintf+0x146>
    4fae:	27 e0       	ldi	r18, 0x07	; 7
    4fb0:	17 e0       	ldi	r17, 0x07	; 7
    4fb2:	41 2c       	mov	r4, r1
    4fb4:	56 01       	movw	r10, r12
    4fb6:	74 e0       	ldi	r23, 0x04	; 4
    4fb8:	a7 0e       	add	r10, r23
    4fba:	b1 1c       	adc	r11, r1
    4fbc:	f6 01       	movw	r30, r12
    4fbe:	60 81       	ld	r22, Z
    4fc0:	71 81       	ldd	r23, Z+1	; 0x01
    4fc2:	82 81       	ldd	r24, Z+2	; 0x02
    4fc4:	93 81       	ldd	r25, Z+3	; 0x03
    4fc6:	04 2d       	mov	r16, r4
    4fc8:	a4 01       	movw	r20, r8
    4fca:	0e 94 ef 2a 	call	0x55de	; 0x55de <__ftoa_engine>
    4fce:	6c 01       	movw	r12, r24
    4fd0:	09 81       	ldd	r16, Y+1	; 0x01
    4fd2:	00 ff       	sbrs	r16, 0
    4fd4:	02 c0       	rjmp	.+4      	; 0x4fda <vfprintf+0x16c>
    4fd6:	03 ff       	sbrs	r16, 3
    4fd8:	06 c0       	rjmp	.+12     	; 0x4fe6 <vfprintf+0x178>
    4fda:	71 fc       	sbrc	r7, 1
    4fdc:	07 c0       	rjmp	.+14     	; 0x4fec <vfprintf+0x17e>
    4fde:	72 fc       	sbrc	r7, 2
    4fe0:	08 c0       	rjmp	.+16     	; 0x4ff2 <vfprintf+0x184>
    4fe2:	61 2c       	mov	r6, r1
    4fe4:	08 c0       	rjmp	.+16     	; 0x4ff6 <vfprintf+0x188>
    4fe6:	3d e2       	ldi	r19, 0x2D	; 45
    4fe8:	63 2e       	mov	r6, r19
    4fea:	05 c0       	rjmp	.+10     	; 0x4ff6 <vfprintf+0x188>
    4fec:	2b e2       	ldi	r18, 0x2B	; 43
    4fee:	62 2e       	mov	r6, r18
    4ff0:	02 c0       	rjmp	.+4      	; 0x4ff6 <vfprintf+0x188>
    4ff2:	90 e2       	ldi	r25, 0x20	; 32
    4ff4:	69 2e       	mov	r6, r25
    4ff6:	80 2f       	mov	r24, r16
    4ff8:	8c 70       	andi	r24, 0x0C	; 12
    4ffa:	99 f1       	breq	.+102    	; 0x5062 <vfprintf+0x1f4>
    4ffc:	66 20       	and	r6, r6
    4ffe:	11 f0       	breq	.+4      	; 0x5004 <vfprintf+0x196>
    5000:	84 e0       	ldi	r24, 0x04	; 4
    5002:	01 c0       	rjmp	.+2      	; 0x5006 <vfprintf+0x198>
    5004:	83 e0       	ldi	r24, 0x03	; 3
    5006:	85 15       	cp	r24, r5
    5008:	10 f0       	brcs	.+4      	; 0x500e <vfprintf+0x1a0>
    500a:	51 2c       	mov	r5, r1
    500c:	0b c0       	rjmp	.+22     	; 0x5024 <vfprintf+0x1b6>
    500e:	58 1a       	sub	r5, r24
    5010:	73 fc       	sbrc	r7, 3
    5012:	08 c0       	rjmp	.+16     	; 0x5024 <vfprintf+0x1b6>
    5014:	b7 01       	movw	r22, r14
    5016:	80 e2       	ldi	r24, 0x20	; 32
    5018:	90 e0       	ldi	r25, 0x00	; 0
    501a:	0e 94 dd 2b 	call	0x57ba	; 0x57ba <fputc>
    501e:	5a 94       	dec	r5
    5020:	c9 f7       	brne	.-14     	; 0x5014 <vfprintf+0x1a6>
    5022:	f3 cf       	rjmp	.-26     	; 0x500a <vfprintf+0x19c>
    5024:	66 20       	and	r6, r6
    5026:	29 f0       	breq	.+10     	; 0x5032 <vfprintf+0x1c4>
    5028:	b7 01       	movw	r22, r14
    502a:	86 2d       	mov	r24, r6
    502c:	90 e0       	ldi	r25, 0x00	; 0
    502e:	0e 94 dd 2b 	call	0x57ba	; 0x57ba <fputc>
    5032:	03 fd       	sbrc	r16, 3
    5034:	03 c0       	rjmp	.+6      	; 0x503c <vfprintf+0x1ce>
    5036:	0c e7       	ldi	r16, 0x7C	; 124
    5038:	14 e0       	ldi	r17, 0x04	; 4
    503a:	02 c0       	rjmp	.+4      	; 0x5040 <vfprintf+0x1d2>
    503c:	08 e7       	ldi	r16, 0x78	; 120
    503e:	14 e0       	ldi	r17, 0x04	; 4
    5040:	f7 2d       	mov	r31, r7
    5042:	f0 71       	andi	r31, 0x10	; 16
    5044:	7f 2e       	mov	r7, r31
    5046:	f8 01       	movw	r30, r16
    5048:	84 91       	lpm	r24, Z
    504a:	88 23       	and	r24, r24
    504c:	09 f4       	brne	.+2      	; 0x5050 <vfprintf+0x1e2>
    504e:	76 c2       	rjmp	.+1260   	; 0x553c <vfprintf+0x6ce>
    5050:	71 10       	cpse	r7, r1
    5052:	80 52       	subi	r24, 0x20	; 32
    5054:	b7 01       	movw	r22, r14
    5056:	90 e0       	ldi	r25, 0x00	; 0
    5058:	0e 94 dd 2b 	call	0x57ba	; 0x57ba <fputc>
    505c:	0f 5f       	subi	r16, 0xFF	; 255
    505e:	1f 4f       	sbci	r17, 0xFF	; 255
    5060:	f2 cf       	rjmp	.-28     	; 0x5046 <vfprintf+0x1d8>
    5062:	77 fe       	sbrs	r7, 7
    5064:	0f c0       	rjmp	.+30     	; 0x5084 <vfprintf+0x216>
    5066:	4c 0c       	add	r4, r12
    5068:	04 ff       	sbrs	r16, 4
    506a:	04 c0       	rjmp	.+8      	; 0x5074 <vfprintf+0x206>
    506c:	8a 81       	ldd	r24, Y+2	; 0x02
    506e:	81 33       	cpi	r24, 0x31	; 49
    5070:	09 f4       	brne	.+2      	; 0x5074 <vfprintf+0x206>
    5072:	4a 94       	dec	r4
    5074:	14 14       	cp	r1, r4
    5076:	74 f5       	brge	.+92     	; 0x50d4 <vfprintf+0x266>
    5078:	f8 e0       	ldi	r31, 0x08	; 8
    507a:	f4 15       	cp	r31, r4
    507c:	78 f5       	brcc	.+94     	; 0x50dc <vfprintf+0x26e>
    507e:	88 e0       	ldi	r24, 0x08	; 8
    5080:	48 2e       	mov	r4, r24
    5082:	2c c0       	rjmp	.+88     	; 0x50dc <vfprintf+0x26e>
    5084:	76 fc       	sbrc	r7, 6
    5086:	2a c0       	rjmp	.+84     	; 0x50dc <vfprintf+0x26e>
    5088:	81 2f       	mov	r24, r17
    508a:	90 e0       	ldi	r25, 0x00	; 0
    508c:	8c 15       	cp	r24, r12
    508e:	9d 05       	cpc	r25, r13
    5090:	9c f0       	brlt	.+38     	; 0x50b8 <vfprintf+0x24a>
    5092:	6c ef       	ldi	r22, 0xFC	; 252
    5094:	c6 16       	cp	r12, r22
    5096:	6f ef       	ldi	r22, 0xFF	; 255
    5098:	d6 06       	cpc	r13, r22
    509a:	74 f0       	brlt	.+28     	; 0x50b8 <vfprintf+0x24a>
    509c:	77 2d       	mov	r23, r7
    509e:	70 68       	ori	r23, 0x80	; 128
    50a0:	77 2e       	mov	r7, r23
    50a2:	0a c0       	rjmp	.+20     	; 0x50b8 <vfprintf+0x24a>
    50a4:	e2 e0       	ldi	r30, 0x02	; 2
    50a6:	f0 e0       	ldi	r31, 0x00	; 0
    50a8:	ec 0f       	add	r30, r28
    50aa:	fd 1f       	adc	r31, r29
    50ac:	e1 0f       	add	r30, r17
    50ae:	f1 1d       	adc	r31, r1
    50b0:	80 81       	ld	r24, Z
    50b2:	80 33       	cpi	r24, 0x30	; 48
    50b4:	19 f4       	brne	.+6      	; 0x50bc <vfprintf+0x24e>
    50b6:	11 50       	subi	r17, 0x01	; 1
    50b8:	11 11       	cpse	r17, r1
    50ba:	f4 cf       	rjmp	.-24     	; 0x50a4 <vfprintf+0x236>
    50bc:	77 fe       	sbrs	r7, 7
    50be:	0e c0       	rjmp	.+28     	; 0x50dc <vfprintf+0x26e>
    50c0:	44 24       	eor	r4, r4
    50c2:	43 94       	inc	r4
    50c4:	41 0e       	add	r4, r17
    50c6:	81 2f       	mov	r24, r17
    50c8:	90 e0       	ldi	r25, 0x00	; 0
    50ca:	c8 16       	cp	r12, r24
    50cc:	d9 06       	cpc	r13, r25
    50ce:	2c f4       	brge	.+10     	; 0x50da <vfprintf+0x26c>
    50d0:	1c 19       	sub	r17, r12
    50d2:	04 c0       	rjmp	.+8      	; 0x50dc <vfprintf+0x26e>
    50d4:	44 24       	eor	r4, r4
    50d6:	43 94       	inc	r4
    50d8:	01 c0       	rjmp	.+2      	; 0x50dc <vfprintf+0x26e>
    50da:	10 e0       	ldi	r17, 0x00	; 0
    50dc:	77 fe       	sbrs	r7, 7
    50de:	07 c0       	rjmp	.+14     	; 0x50ee <vfprintf+0x280>
    50e0:	1c 14       	cp	r1, r12
    50e2:	1d 04       	cpc	r1, r13
    50e4:	3c f4       	brge	.+14     	; 0x50f4 <vfprintf+0x286>
    50e6:	96 01       	movw	r18, r12
    50e8:	2f 5f       	subi	r18, 0xFF	; 255
    50ea:	3f 4f       	sbci	r19, 0xFF	; 255
    50ec:	05 c0       	rjmp	.+10     	; 0x50f8 <vfprintf+0x28a>
    50ee:	25 e0       	ldi	r18, 0x05	; 5
    50f0:	30 e0       	ldi	r19, 0x00	; 0
    50f2:	02 c0       	rjmp	.+4      	; 0x50f8 <vfprintf+0x28a>
    50f4:	21 e0       	ldi	r18, 0x01	; 1
    50f6:	30 e0       	ldi	r19, 0x00	; 0
    50f8:	66 20       	and	r6, r6
    50fa:	11 f0       	breq	.+4      	; 0x5100 <vfprintf+0x292>
    50fc:	2f 5f       	subi	r18, 0xFF	; 255
    50fe:	3f 4f       	sbci	r19, 0xFF	; 255
    5100:	11 23       	and	r17, r17
    5102:	31 f0       	breq	.+12     	; 0x5110 <vfprintf+0x2a2>
    5104:	41 2f       	mov	r20, r17
    5106:	50 e0       	ldi	r21, 0x00	; 0
    5108:	4f 5f       	subi	r20, 0xFF	; 255
    510a:	5f 4f       	sbci	r21, 0xFF	; 255
    510c:	24 0f       	add	r18, r20
    510e:	35 1f       	adc	r19, r21
    5110:	45 2d       	mov	r20, r5
    5112:	50 e0       	ldi	r21, 0x00	; 0
    5114:	24 17       	cp	r18, r20
    5116:	35 07       	cpc	r19, r21
    5118:	14 f4       	brge	.+4      	; 0x511e <vfprintf+0x2b0>
    511a:	52 1a       	sub	r5, r18
    511c:	01 c0       	rjmp	.+2      	; 0x5120 <vfprintf+0x2b2>
    511e:	51 2c       	mov	r5, r1
    5120:	87 2d       	mov	r24, r7
    5122:	89 70       	andi	r24, 0x09	; 9
    5124:	49 f4       	brne	.+18     	; 0x5138 <vfprintf+0x2ca>
    5126:	55 20       	and	r5, r5
    5128:	39 f0       	breq	.+14     	; 0x5138 <vfprintf+0x2ca>
    512a:	b7 01       	movw	r22, r14
    512c:	80 e2       	ldi	r24, 0x20	; 32
    512e:	90 e0       	ldi	r25, 0x00	; 0
    5130:	0e 94 dd 2b 	call	0x57ba	; 0x57ba <fputc>
    5134:	5a 94       	dec	r5
    5136:	f7 cf       	rjmp	.-18     	; 0x5126 <vfprintf+0x2b8>
    5138:	66 20       	and	r6, r6
    513a:	29 f0       	breq	.+10     	; 0x5146 <vfprintf+0x2d8>
    513c:	b7 01       	movw	r22, r14
    513e:	86 2d       	mov	r24, r6
    5140:	90 e0       	ldi	r25, 0x00	; 0
    5142:	0e 94 dd 2b 	call	0x57ba	; 0x57ba <fputc>
    5146:	73 fc       	sbrc	r7, 3
    5148:	09 c0       	rjmp	.+18     	; 0x515c <vfprintf+0x2ee>
    514a:	55 20       	and	r5, r5
    514c:	39 f0       	breq	.+14     	; 0x515c <vfprintf+0x2ee>
    514e:	b7 01       	movw	r22, r14
    5150:	80 e3       	ldi	r24, 0x30	; 48
    5152:	90 e0       	ldi	r25, 0x00	; 0
    5154:	0e 94 dd 2b 	call	0x57ba	; 0x57ba <fputc>
    5158:	5a 94       	dec	r5
    515a:	f7 cf       	rjmp	.-18     	; 0x514a <vfprintf+0x2dc>
    515c:	77 fe       	sbrs	r7, 7
    515e:	5f c0       	rjmp	.+190    	; 0x521e <vfprintf+0x3b0>
    5160:	9c 2d       	mov	r25, r12
    5162:	8d 2d       	mov	r24, r13
    5164:	d7 fe       	sbrs	r13, 7
    5166:	02 c0       	rjmp	.+4      	; 0x516c <vfprintf+0x2fe>
    5168:	90 e0       	ldi	r25, 0x00	; 0
    516a:	80 e0       	ldi	r24, 0x00	; 0
    516c:	69 2e       	mov	r6, r25
    516e:	78 2e       	mov	r7, r24
    5170:	40 e0       	ldi	r20, 0x00	; 0
    5172:	50 e0       	ldi	r21, 0x00	; 0
    5174:	c6 01       	movw	r24, r12
    5176:	84 19       	sub	r24, r4
    5178:	91 09       	sbc	r25, r1
    517a:	9d 87       	std	Y+13, r25	; 0x0d
    517c:	8c 87       	std	Y+12, r24	; 0x0c
    517e:	96 01       	movw	r18, r12
    5180:	26 19       	sub	r18, r6
    5182:	37 09       	sbc	r19, r7
    5184:	28 0d       	add	r18, r8
    5186:	39 1d       	adc	r19, r9
    5188:	81 2f       	mov	r24, r17
    518a:	90 e0       	ldi	r25, 0x00	; 0
    518c:	ee 27       	eor	r30, r30
    518e:	ff 27       	eor	r31, r31
    5190:	e8 1b       	sub	r30, r24
    5192:	f9 0b       	sbc	r31, r25
    5194:	ff 87       	std	Y+15, r31	; 0x0f
    5196:	ee 87       	std	Y+14, r30	; 0x0e
    5198:	ff ef       	ldi	r31, 0xFF	; 255
    519a:	6f 16       	cp	r6, r31
    519c:	7f 06       	cpc	r7, r31
    519e:	69 f4       	brne	.+26     	; 0x51ba <vfprintf+0x34c>
    51a0:	b7 01       	movw	r22, r14
    51a2:	8e e2       	ldi	r24, 0x2E	; 46
    51a4:	90 e0       	ldi	r25, 0x00	; 0
    51a6:	2b 8b       	std	Y+19, r18	; 0x13
    51a8:	3a 8b       	std	Y+18, r19	; 0x12
    51aa:	48 8b       	std	Y+16, r20	; 0x10
    51ac:	59 8b       	std	Y+17, r21	; 0x11
    51ae:	0e 94 dd 2b 	call	0x57ba	; 0x57ba <fputc>
    51b2:	59 89       	ldd	r21, Y+17	; 0x11
    51b4:	48 89       	ldd	r20, Y+16	; 0x10
    51b6:	3a 89       	ldd	r19, Y+18	; 0x12
    51b8:	2b 89       	ldd	r18, Y+19	; 0x13
    51ba:	c6 14       	cp	r12, r6
    51bc:	d7 04       	cpc	r13, r7
    51be:	54 f0       	brlt	.+20     	; 0x51d4 <vfprintf+0x366>
    51c0:	6c 85       	ldd	r22, Y+12	; 0x0c
    51c2:	7d 85       	ldd	r23, Y+13	; 0x0d
    51c4:	66 15       	cp	r22, r6
    51c6:	77 05       	cpc	r23, r7
    51c8:	2c f4       	brge	.+10     	; 0x51d4 <vfprintf+0x366>
    51ca:	f9 01       	movw	r30, r18
    51cc:	e4 0f       	add	r30, r20
    51ce:	f5 1f       	adc	r31, r21
    51d0:	81 81       	ldd	r24, Z+1	; 0x01
    51d2:	01 c0       	rjmp	.+2      	; 0x51d6 <vfprintf+0x368>
    51d4:	80 e3       	ldi	r24, 0x30	; 48
    51d6:	71 e0       	ldi	r23, 0x01	; 1
    51d8:	67 1a       	sub	r6, r23
    51da:	71 08       	sbc	r7, r1
    51dc:	4f 5f       	subi	r20, 0xFF	; 255
    51de:	5f 4f       	sbci	r21, 0xFF	; 255
    51e0:	ee 85       	ldd	r30, Y+14	; 0x0e
    51e2:	ff 85       	ldd	r31, Y+15	; 0x0f
    51e4:	6e 16       	cp	r6, r30
    51e6:	7f 06       	cpc	r7, r31
    51e8:	6c f0       	brlt	.+26     	; 0x5204 <vfprintf+0x396>
    51ea:	b7 01       	movw	r22, r14
    51ec:	90 e0       	ldi	r25, 0x00	; 0
    51ee:	2b 8b       	std	Y+19, r18	; 0x13
    51f0:	3a 8b       	std	Y+18, r19	; 0x12
    51f2:	48 8b       	std	Y+16, r20	; 0x10
    51f4:	59 8b       	std	Y+17, r21	; 0x11
    51f6:	0e 94 dd 2b 	call	0x57ba	; 0x57ba <fputc>
    51fa:	2b 89       	ldd	r18, Y+19	; 0x13
    51fc:	3a 89       	ldd	r19, Y+18	; 0x12
    51fe:	48 89       	ldd	r20, Y+16	; 0x10
    5200:	59 89       	ldd	r21, Y+17	; 0x11
    5202:	ca cf       	rjmp	.-108    	; 0x5198 <vfprintf+0x32a>
    5204:	6c 14       	cp	r6, r12
    5206:	7d 04       	cpc	r7, r13
    5208:	39 f4       	brne	.+14     	; 0x5218 <vfprintf+0x3aa>
    520a:	9a 81       	ldd	r25, Y+2	; 0x02
    520c:	96 33       	cpi	r25, 0x36	; 54
    520e:	18 f4       	brcc	.+6      	; 0x5216 <vfprintf+0x3a8>
    5210:	95 33       	cpi	r25, 0x35	; 53
    5212:	11 f4       	brne	.+4      	; 0x5218 <vfprintf+0x3aa>
    5214:	04 ff       	sbrs	r16, 4
    5216:	81 e3       	ldi	r24, 0x31	; 49
    5218:	b7 01       	movw	r22, r14
    521a:	90 e0       	ldi	r25, 0x00	; 0
    521c:	4b c0       	rjmp	.+150    	; 0x52b4 <vfprintf+0x446>
    521e:	8a 81       	ldd	r24, Y+2	; 0x02
    5220:	81 33       	cpi	r24, 0x31	; 49
    5222:	09 f0       	breq	.+2      	; 0x5226 <vfprintf+0x3b8>
    5224:	0f 7e       	andi	r16, 0xEF	; 239
    5226:	b7 01       	movw	r22, r14
    5228:	90 e0       	ldi	r25, 0x00	; 0
    522a:	0e 94 dd 2b 	call	0x57ba	; 0x57ba <fputc>
    522e:	11 11       	cpse	r17, r1
    5230:	05 c0       	rjmp	.+10     	; 0x523c <vfprintf+0x3ce>
    5232:	74 fe       	sbrs	r7, 4
    5234:	18 c0       	rjmp	.+48     	; 0x5266 <vfprintf+0x3f8>
    5236:	85 e4       	ldi	r24, 0x45	; 69
    5238:	90 e0       	ldi	r25, 0x00	; 0
    523a:	17 c0       	rjmp	.+46     	; 0x526a <vfprintf+0x3fc>
    523c:	b7 01       	movw	r22, r14
    523e:	8e e2       	ldi	r24, 0x2E	; 46
    5240:	90 e0       	ldi	r25, 0x00	; 0
    5242:	0e 94 dd 2b 	call	0x57ba	; 0x57ba <fputc>
    5246:	82 e0       	ldi	r24, 0x02	; 2
    5248:	66 24       	eor	r6, r6
    524a:	63 94       	inc	r6
    524c:	68 0e       	add	r6, r24
    524e:	f4 01       	movw	r30, r8
    5250:	e8 0f       	add	r30, r24
    5252:	f1 1d       	adc	r31, r1
    5254:	80 81       	ld	r24, Z
    5256:	b7 01       	movw	r22, r14
    5258:	90 e0       	ldi	r25, 0x00	; 0
    525a:	0e 94 dd 2b 	call	0x57ba	; 0x57ba <fputc>
    525e:	11 50       	subi	r17, 0x01	; 1
    5260:	41 f3       	breq	.-48     	; 0x5232 <vfprintf+0x3c4>
    5262:	86 2d       	mov	r24, r6
    5264:	f1 cf       	rjmp	.-30     	; 0x5248 <vfprintf+0x3da>
    5266:	85 e6       	ldi	r24, 0x65	; 101
    5268:	90 e0       	ldi	r25, 0x00	; 0
    526a:	b7 01       	movw	r22, r14
    526c:	0e 94 dd 2b 	call	0x57ba	; 0x57ba <fputc>
    5270:	d7 fc       	sbrc	r13, 7
    5272:	05 c0       	rjmp	.+10     	; 0x527e <vfprintf+0x410>
    5274:	c1 14       	cp	r12, r1
    5276:	d1 04       	cpc	r13, r1
    5278:	39 f4       	brne	.+14     	; 0x5288 <vfprintf+0x41a>
    527a:	04 ff       	sbrs	r16, 4
    527c:	05 c0       	rjmp	.+10     	; 0x5288 <vfprintf+0x41a>
    527e:	d1 94       	neg	r13
    5280:	c1 94       	neg	r12
    5282:	d1 08       	sbc	r13, r1
    5284:	8d e2       	ldi	r24, 0x2D	; 45
    5286:	01 c0       	rjmp	.+2      	; 0x528a <vfprintf+0x41c>
    5288:	8b e2       	ldi	r24, 0x2B	; 43
    528a:	b7 01       	movw	r22, r14
    528c:	90 e0       	ldi	r25, 0x00	; 0
    528e:	0e 94 dd 2b 	call	0x57ba	; 0x57ba <fputc>
    5292:	80 e3       	ldi	r24, 0x30	; 48
    5294:	6a e0       	ldi	r22, 0x0A	; 10
    5296:	c6 16       	cp	r12, r22
    5298:	d1 04       	cpc	r13, r1
    529a:	2c f0       	brlt	.+10     	; 0x52a6 <vfprintf+0x438>
    529c:	8f 5f       	subi	r24, 0xFF	; 255
    529e:	fa e0       	ldi	r31, 0x0A	; 10
    52a0:	cf 1a       	sub	r12, r31
    52a2:	d1 08       	sbc	r13, r1
    52a4:	f7 cf       	rjmp	.-18     	; 0x5294 <vfprintf+0x426>
    52a6:	b7 01       	movw	r22, r14
    52a8:	90 e0       	ldi	r25, 0x00	; 0
    52aa:	0e 94 dd 2b 	call	0x57ba	; 0x57ba <fputc>
    52ae:	b7 01       	movw	r22, r14
    52b0:	c6 01       	movw	r24, r12
    52b2:	c0 96       	adiw	r24, 0x30	; 48
    52b4:	0e 94 dd 2b 	call	0x57ba	; 0x57ba <fputc>
    52b8:	41 c1       	rjmp	.+642    	; 0x553c <vfprintf+0x6ce>
    52ba:	83 36       	cpi	r24, 0x63	; 99
    52bc:	31 f0       	breq	.+12     	; 0x52ca <vfprintf+0x45c>
    52be:	83 37       	cpi	r24, 0x73	; 115
    52c0:	79 f0       	breq	.+30     	; 0x52e0 <vfprintf+0x472>
    52c2:	83 35       	cpi	r24, 0x53	; 83
    52c4:	09 f0       	breq	.+2      	; 0x52c8 <vfprintf+0x45a>
    52c6:	58 c0       	rjmp	.+176    	; 0x5378 <vfprintf+0x50a>
    52c8:	21 c0       	rjmp	.+66     	; 0x530c <vfprintf+0x49e>
    52ca:	56 01       	movw	r10, r12
    52cc:	72 e0       	ldi	r23, 0x02	; 2
    52ce:	a7 0e       	add	r10, r23
    52d0:	b1 1c       	adc	r11, r1
    52d2:	f6 01       	movw	r30, r12
    52d4:	80 81       	ld	r24, Z
    52d6:	89 83       	std	Y+1, r24	; 0x01
    52d8:	01 e0       	ldi	r16, 0x01	; 1
    52da:	10 e0       	ldi	r17, 0x00	; 0
    52dc:	64 01       	movw	r12, r8
    52de:	14 c0       	rjmp	.+40     	; 0x5308 <vfprintf+0x49a>
    52e0:	56 01       	movw	r10, r12
    52e2:	f2 e0       	ldi	r31, 0x02	; 2
    52e4:	af 0e       	add	r10, r31
    52e6:	b1 1c       	adc	r11, r1
    52e8:	f6 01       	movw	r30, r12
    52ea:	c0 80       	ld	r12, Z
    52ec:	d1 80       	ldd	r13, Z+1	; 0x01
    52ee:	26 ff       	sbrs	r18, 6
    52f0:	03 c0       	rjmp	.+6      	; 0x52f8 <vfprintf+0x48a>
    52f2:	61 2f       	mov	r22, r17
    52f4:	70 e0       	ldi	r23, 0x00	; 0
    52f6:	02 c0       	rjmp	.+4      	; 0x52fc <vfprintf+0x48e>
    52f8:	6f ef       	ldi	r22, 0xFF	; 255
    52fa:	7f ef       	ldi	r23, 0xFF	; 255
    52fc:	c6 01       	movw	r24, r12
    52fe:	2b 8b       	std	Y+19, r18	; 0x13
    5300:	0e 94 d2 2b 	call	0x57a4	; 0x57a4 <strnlen>
    5304:	8c 01       	movw	r16, r24
    5306:	2b 89       	ldd	r18, Y+19	; 0x13
    5308:	2f 77       	andi	r18, 0x7F	; 127
    530a:	15 c0       	rjmp	.+42     	; 0x5336 <vfprintf+0x4c8>
    530c:	56 01       	movw	r10, r12
    530e:	f2 e0       	ldi	r31, 0x02	; 2
    5310:	af 0e       	add	r10, r31
    5312:	b1 1c       	adc	r11, r1
    5314:	f6 01       	movw	r30, r12
    5316:	c0 80       	ld	r12, Z
    5318:	d1 80       	ldd	r13, Z+1	; 0x01
    531a:	26 ff       	sbrs	r18, 6
    531c:	03 c0       	rjmp	.+6      	; 0x5324 <vfprintf+0x4b6>
    531e:	61 2f       	mov	r22, r17
    5320:	70 e0       	ldi	r23, 0x00	; 0
    5322:	02 c0       	rjmp	.+4      	; 0x5328 <vfprintf+0x4ba>
    5324:	6f ef       	ldi	r22, 0xFF	; 255
    5326:	7f ef       	ldi	r23, 0xFF	; 255
    5328:	c6 01       	movw	r24, r12
    532a:	2b 8b       	std	Y+19, r18	; 0x13
    532c:	0e 94 c7 2b 	call	0x578e	; 0x578e <strnlen_P>
    5330:	8c 01       	movw	r16, r24
    5332:	2b 89       	ldd	r18, Y+19	; 0x13
    5334:	20 68       	ori	r18, 0x80	; 128
    5336:	72 2e       	mov	r7, r18
    5338:	23 fd       	sbrc	r18, 3
    533a:	1a c0       	rjmp	.+52     	; 0x5370 <vfprintf+0x502>
    533c:	85 2d       	mov	r24, r5
    533e:	90 e0       	ldi	r25, 0x00	; 0
    5340:	08 17       	cp	r16, r24
    5342:	19 07       	cpc	r17, r25
    5344:	a8 f4       	brcc	.+42     	; 0x5370 <vfprintf+0x502>
    5346:	b7 01       	movw	r22, r14
    5348:	80 e2       	ldi	r24, 0x20	; 32
    534a:	90 e0       	ldi	r25, 0x00	; 0
    534c:	0e 94 dd 2b 	call	0x57ba	; 0x57ba <fputc>
    5350:	5a 94       	dec	r5
    5352:	f4 cf       	rjmp	.-24     	; 0x533c <vfprintf+0x4ce>
    5354:	f6 01       	movw	r30, r12
    5356:	77 fc       	sbrc	r7, 7
    5358:	85 91       	lpm	r24, Z+
    535a:	77 fe       	sbrs	r7, 7
    535c:	81 91       	ld	r24, Z+
    535e:	6f 01       	movw	r12, r30
    5360:	b7 01       	movw	r22, r14
    5362:	90 e0       	ldi	r25, 0x00	; 0
    5364:	0e 94 dd 2b 	call	0x57ba	; 0x57ba <fputc>
    5368:	51 10       	cpse	r5, r1
    536a:	5a 94       	dec	r5
    536c:	01 50       	subi	r16, 0x01	; 1
    536e:	11 09       	sbc	r17, r1
    5370:	01 15       	cp	r16, r1
    5372:	11 05       	cpc	r17, r1
    5374:	79 f7       	brne	.-34     	; 0x5354 <vfprintf+0x4e6>
    5376:	e2 c0       	rjmp	.+452    	; 0x553c <vfprintf+0x6ce>
    5378:	84 36       	cpi	r24, 0x64	; 100
    537a:	11 f0       	breq	.+4      	; 0x5380 <vfprintf+0x512>
    537c:	89 36       	cpi	r24, 0x69	; 105
    537e:	51 f5       	brne	.+84     	; 0x53d4 <vfprintf+0x566>
    5380:	56 01       	movw	r10, r12
    5382:	27 ff       	sbrs	r18, 7
    5384:	09 c0       	rjmp	.+18     	; 0x5398 <vfprintf+0x52a>
    5386:	f4 e0       	ldi	r31, 0x04	; 4
    5388:	af 0e       	add	r10, r31
    538a:	b1 1c       	adc	r11, r1
    538c:	f6 01       	movw	r30, r12
    538e:	60 81       	ld	r22, Z
    5390:	71 81       	ldd	r23, Z+1	; 0x01
    5392:	82 81       	ldd	r24, Z+2	; 0x02
    5394:	93 81       	ldd	r25, Z+3	; 0x03
    5396:	0a c0       	rjmp	.+20     	; 0x53ac <vfprintf+0x53e>
    5398:	f2 e0       	ldi	r31, 0x02	; 2
    539a:	af 0e       	add	r10, r31
    539c:	b1 1c       	adc	r11, r1
    539e:	f6 01       	movw	r30, r12
    53a0:	60 81       	ld	r22, Z
    53a2:	71 81       	ldd	r23, Z+1	; 0x01
    53a4:	88 27       	eor	r24, r24
    53a6:	77 fd       	sbrc	r23, 7
    53a8:	80 95       	com	r24
    53aa:	98 2f       	mov	r25, r24
    53ac:	02 2f       	mov	r16, r18
    53ae:	0f 76       	andi	r16, 0x6F	; 111
    53b0:	97 ff       	sbrs	r25, 7
    53b2:	08 c0       	rjmp	.+16     	; 0x53c4 <vfprintf+0x556>
    53b4:	90 95       	com	r25
    53b6:	80 95       	com	r24
    53b8:	70 95       	com	r23
    53ba:	61 95       	neg	r22
    53bc:	7f 4f       	sbci	r23, 0xFF	; 255
    53be:	8f 4f       	sbci	r24, 0xFF	; 255
    53c0:	9f 4f       	sbci	r25, 0xFF	; 255
    53c2:	00 68       	ori	r16, 0x80	; 128
    53c4:	2a e0       	ldi	r18, 0x0A	; 10
    53c6:	30 e0       	ldi	r19, 0x00	; 0
    53c8:	a4 01       	movw	r20, r8
    53ca:	0e 94 31 2c 	call	0x5862	; 0x5862 <__ultoa_invert>
    53ce:	c8 2e       	mov	r12, r24
    53d0:	c8 18       	sub	r12, r8
    53d2:	3e c0       	rjmp	.+124    	; 0x5450 <vfprintf+0x5e2>
    53d4:	02 2f       	mov	r16, r18
    53d6:	85 37       	cpi	r24, 0x75	; 117
    53d8:	21 f4       	brne	.+8      	; 0x53e2 <vfprintf+0x574>
    53da:	0f 7e       	andi	r16, 0xEF	; 239
    53dc:	2a e0       	ldi	r18, 0x0A	; 10
    53de:	30 e0       	ldi	r19, 0x00	; 0
    53e0:	1d c0       	rjmp	.+58     	; 0x541c <vfprintf+0x5ae>
    53e2:	09 7f       	andi	r16, 0xF9	; 249
    53e4:	8f 36       	cpi	r24, 0x6F	; 111
    53e6:	91 f0       	breq	.+36     	; 0x540c <vfprintf+0x59e>
    53e8:	18 f4       	brcc	.+6      	; 0x53f0 <vfprintf+0x582>
    53ea:	88 35       	cpi	r24, 0x58	; 88
    53ec:	59 f0       	breq	.+22     	; 0x5404 <vfprintf+0x596>
    53ee:	b0 c0       	rjmp	.+352    	; 0x5550 <vfprintf+0x6e2>
    53f0:	80 37       	cpi	r24, 0x70	; 112
    53f2:	19 f0       	breq	.+6      	; 0x53fa <vfprintf+0x58c>
    53f4:	88 37       	cpi	r24, 0x78	; 120
    53f6:	11 f0       	breq	.+4      	; 0x53fc <vfprintf+0x58e>
    53f8:	ab c0       	rjmp	.+342    	; 0x5550 <vfprintf+0x6e2>
    53fa:	00 61       	ori	r16, 0x10	; 16
    53fc:	04 ff       	sbrs	r16, 4
    53fe:	09 c0       	rjmp	.+18     	; 0x5412 <vfprintf+0x5a4>
    5400:	04 60       	ori	r16, 0x04	; 4
    5402:	07 c0       	rjmp	.+14     	; 0x5412 <vfprintf+0x5a4>
    5404:	24 ff       	sbrs	r18, 4
    5406:	08 c0       	rjmp	.+16     	; 0x5418 <vfprintf+0x5aa>
    5408:	06 60       	ori	r16, 0x06	; 6
    540a:	06 c0       	rjmp	.+12     	; 0x5418 <vfprintf+0x5aa>
    540c:	28 e0       	ldi	r18, 0x08	; 8
    540e:	30 e0       	ldi	r19, 0x00	; 0
    5410:	05 c0       	rjmp	.+10     	; 0x541c <vfprintf+0x5ae>
    5412:	20 e1       	ldi	r18, 0x10	; 16
    5414:	30 e0       	ldi	r19, 0x00	; 0
    5416:	02 c0       	rjmp	.+4      	; 0x541c <vfprintf+0x5ae>
    5418:	20 e1       	ldi	r18, 0x10	; 16
    541a:	32 e0       	ldi	r19, 0x02	; 2
    541c:	56 01       	movw	r10, r12
    541e:	07 ff       	sbrs	r16, 7
    5420:	09 c0       	rjmp	.+18     	; 0x5434 <vfprintf+0x5c6>
    5422:	f4 e0       	ldi	r31, 0x04	; 4
    5424:	af 0e       	add	r10, r31
    5426:	b1 1c       	adc	r11, r1
    5428:	f6 01       	movw	r30, r12
    542a:	60 81       	ld	r22, Z
    542c:	71 81       	ldd	r23, Z+1	; 0x01
    542e:	82 81       	ldd	r24, Z+2	; 0x02
    5430:	93 81       	ldd	r25, Z+3	; 0x03
    5432:	08 c0       	rjmp	.+16     	; 0x5444 <vfprintf+0x5d6>
    5434:	f2 e0       	ldi	r31, 0x02	; 2
    5436:	af 0e       	add	r10, r31
    5438:	b1 1c       	adc	r11, r1
    543a:	f6 01       	movw	r30, r12
    543c:	60 81       	ld	r22, Z
    543e:	71 81       	ldd	r23, Z+1	; 0x01
    5440:	80 e0       	ldi	r24, 0x00	; 0
    5442:	90 e0       	ldi	r25, 0x00	; 0
    5444:	a4 01       	movw	r20, r8
    5446:	0e 94 31 2c 	call	0x5862	; 0x5862 <__ultoa_invert>
    544a:	c8 2e       	mov	r12, r24
    544c:	c8 18       	sub	r12, r8
    544e:	0f 77       	andi	r16, 0x7F	; 127
    5450:	06 ff       	sbrs	r16, 6
    5452:	0b c0       	rjmp	.+22     	; 0x546a <vfprintf+0x5fc>
    5454:	20 2f       	mov	r18, r16
    5456:	2e 7f       	andi	r18, 0xFE	; 254
    5458:	c1 16       	cp	r12, r17
    545a:	50 f4       	brcc	.+20     	; 0x5470 <vfprintf+0x602>
    545c:	04 ff       	sbrs	r16, 4
    545e:	0a c0       	rjmp	.+20     	; 0x5474 <vfprintf+0x606>
    5460:	02 fd       	sbrc	r16, 2
    5462:	08 c0       	rjmp	.+16     	; 0x5474 <vfprintf+0x606>
    5464:	20 2f       	mov	r18, r16
    5466:	2e 7e       	andi	r18, 0xEE	; 238
    5468:	05 c0       	rjmp	.+10     	; 0x5474 <vfprintf+0x606>
    546a:	dc 2c       	mov	r13, r12
    546c:	20 2f       	mov	r18, r16
    546e:	03 c0       	rjmp	.+6      	; 0x5476 <vfprintf+0x608>
    5470:	dc 2c       	mov	r13, r12
    5472:	01 c0       	rjmp	.+2      	; 0x5476 <vfprintf+0x608>
    5474:	d1 2e       	mov	r13, r17
    5476:	24 ff       	sbrs	r18, 4
    5478:	0d c0       	rjmp	.+26     	; 0x5494 <vfprintf+0x626>
    547a:	fe 01       	movw	r30, r28
    547c:	ec 0d       	add	r30, r12
    547e:	f1 1d       	adc	r31, r1
    5480:	80 81       	ld	r24, Z
    5482:	80 33       	cpi	r24, 0x30	; 48
    5484:	11 f4       	brne	.+4      	; 0x548a <vfprintf+0x61c>
    5486:	29 7e       	andi	r18, 0xE9	; 233
    5488:	09 c0       	rjmp	.+18     	; 0x549c <vfprintf+0x62e>
    548a:	22 ff       	sbrs	r18, 2
    548c:	06 c0       	rjmp	.+12     	; 0x549a <vfprintf+0x62c>
    548e:	d3 94       	inc	r13
    5490:	d3 94       	inc	r13
    5492:	04 c0       	rjmp	.+8      	; 0x549c <vfprintf+0x62e>
    5494:	82 2f       	mov	r24, r18
    5496:	86 78       	andi	r24, 0x86	; 134
    5498:	09 f0       	breq	.+2      	; 0x549c <vfprintf+0x62e>
    549a:	d3 94       	inc	r13
    549c:	23 fd       	sbrc	r18, 3
    549e:	13 c0       	rjmp	.+38     	; 0x54c6 <vfprintf+0x658>
    54a0:	20 ff       	sbrs	r18, 0
    54a2:	06 c0       	rjmp	.+12     	; 0x54b0 <vfprintf+0x642>
    54a4:	1c 2d       	mov	r17, r12
    54a6:	d5 14       	cp	r13, r5
    54a8:	18 f4       	brcc	.+6      	; 0x54b0 <vfprintf+0x642>
    54aa:	15 0d       	add	r17, r5
    54ac:	1d 19       	sub	r17, r13
    54ae:	d5 2c       	mov	r13, r5
    54b0:	d5 14       	cp	r13, r5
    54b2:	68 f4       	brcc	.+26     	; 0x54ce <vfprintf+0x660>
    54b4:	b7 01       	movw	r22, r14
    54b6:	80 e2       	ldi	r24, 0x20	; 32
    54b8:	90 e0       	ldi	r25, 0x00	; 0
    54ba:	2b 8b       	std	Y+19, r18	; 0x13
    54bc:	0e 94 dd 2b 	call	0x57ba	; 0x57ba <fputc>
    54c0:	d3 94       	inc	r13
    54c2:	2b 89       	ldd	r18, Y+19	; 0x13
    54c4:	f5 cf       	rjmp	.-22     	; 0x54b0 <vfprintf+0x642>
    54c6:	d5 14       	cp	r13, r5
    54c8:	10 f4       	brcc	.+4      	; 0x54ce <vfprintf+0x660>
    54ca:	5d 18       	sub	r5, r13
    54cc:	01 c0       	rjmp	.+2      	; 0x54d0 <vfprintf+0x662>
    54ce:	51 2c       	mov	r5, r1
    54d0:	24 ff       	sbrs	r18, 4
    54d2:	12 c0       	rjmp	.+36     	; 0x54f8 <vfprintf+0x68a>
    54d4:	b7 01       	movw	r22, r14
    54d6:	80 e3       	ldi	r24, 0x30	; 48
    54d8:	90 e0       	ldi	r25, 0x00	; 0
    54da:	2b 8b       	std	Y+19, r18	; 0x13
    54dc:	0e 94 dd 2b 	call	0x57ba	; 0x57ba <fputc>
    54e0:	2b 89       	ldd	r18, Y+19	; 0x13
    54e2:	22 ff       	sbrs	r18, 2
    54e4:	17 c0       	rjmp	.+46     	; 0x5514 <vfprintf+0x6a6>
    54e6:	21 ff       	sbrs	r18, 1
    54e8:	03 c0       	rjmp	.+6      	; 0x54f0 <vfprintf+0x682>
    54ea:	88 e5       	ldi	r24, 0x58	; 88
    54ec:	90 e0       	ldi	r25, 0x00	; 0
    54ee:	02 c0       	rjmp	.+4      	; 0x54f4 <vfprintf+0x686>
    54f0:	88 e7       	ldi	r24, 0x78	; 120
    54f2:	90 e0       	ldi	r25, 0x00	; 0
    54f4:	b7 01       	movw	r22, r14
    54f6:	0c c0       	rjmp	.+24     	; 0x5510 <vfprintf+0x6a2>
    54f8:	82 2f       	mov	r24, r18
    54fa:	86 78       	andi	r24, 0x86	; 134
    54fc:	59 f0       	breq	.+22     	; 0x5514 <vfprintf+0x6a6>
    54fe:	21 fd       	sbrc	r18, 1
    5500:	02 c0       	rjmp	.+4      	; 0x5506 <vfprintf+0x698>
    5502:	80 e2       	ldi	r24, 0x20	; 32
    5504:	01 c0       	rjmp	.+2      	; 0x5508 <vfprintf+0x69a>
    5506:	8b e2       	ldi	r24, 0x2B	; 43
    5508:	27 fd       	sbrc	r18, 7
    550a:	8d e2       	ldi	r24, 0x2D	; 45
    550c:	b7 01       	movw	r22, r14
    550e:	90 e0       	ldi	r25, 0x00	; 0
    5510:	0e 94 dd 2b 	call	0x57ba	; 0x57ba <fputc>
    5514:	c1 16       	cp	r12, r17
    5516:	38 f4       	brcc	.+14     	; 0x5526 <vfprintf+0x6b8>
    5518:	b7 01       	movw	r22, r14
    551a:	80 e3       	ldi	r24, 0x30	; 48
    551c:	90 e0       	ldi	r25, 0x00	; 0
    551e:	0e 94 dd 2b 	call	0x57ba	; 0x57ba <fputc>
    5522:	11 50       	subi	r17, 0x01	; 1
    5524:	f7 cf       	rjmp	.-18     	; 0x5514 <vfprintf+0x6a6>
    5526:	ca 94       	dec	r12
    5528:	f4 01       	movw	r30, r8
    552a:	ec 0d       	add	r30, r12
    552c:	f1 1d       	adc	r31, r1
    552e:	80 81       	ld	r24, Z
    5530:	b7 01       	movw	r22, r14
    5532:	90 e0       	ldi	r25, 0x00	; 0
    5534:	0e 94 dd 2b 	call	0x57ba	; 0x57ba <fputc>
    5538:	c1 10       	cpse	r12, r1
    553a:	f5 cf       	rjmp	.-22     	; 0x5526 <vfprintf+0x6b8>
    553c:	55 20       	and	r5, r5
    553e:	09 f4       	brne	.+2      	; 0x5542 <vfprintf+0x6d4>
    5540:	c2 cc       	rjmp	.-1660   	; 0x4ec6 <vfprintf+0x58>
    5542:	b7 01       	movw	r22, r14
    5544:	80 e2       	ldi	r24, 0x20	; 32
    5546:	90 e0       	ldi	r25, 0x00	; 0
    5548:	0e 94 dd 2b 	call	0x57ba	; 0x57ba <fputc>
    554c:	5a 94       	dec	r5
    554e:	f6 cf       	rjmp	.-20     	; 0x553c <vfprintf+0x6ce>
    5550:	f7 01       	movw	r30, r14
    5552:	86 81       	ldd	r24, Z+6	; 0x06
    5554:	97 81       	ldd	r25, Z+7	; 0x07
    5556:	02 c0       	rjmp	.+4      	; 0x555c <vfprintf+0x6ee>
    5558:	8f ef       	ldi	r24, 0xFF	; 255
    555a:	9f ef       	ldi	r25, 0xFF	; 255
    555c:	63 96       	adiw	r28, 0x13	; 19
    555e:	e2 e1       	ldi	r30, 0x12	; 18
    5560:	0c 94 d4 2a 	jmp	0x55a8	; 0x55a8 <__epilogue_restores__>

00005564 <__tablejump2__>:
    5564:	ee 0f       	add	r30, r30
    5566:	ff 1f       	adc	r31, r31

00005568 <__tablejump__>:
    5568:	05 90       	lpm	r0, Z+
    556a:	f4 91       	lpm	r31, Z
    556c:	e0 2d       	mov	r30, r0
    556e:	09 94       	ijmp

00005570 <__prologue_saves__>:
    5570:	2f 92       	push	r2
    5572:	3f 92       	push	r3
    5574:	4f 92       	push	r4
    5576:	5f 92       	push	r5
    5578:	6f 92       	push	r6
    557a:	7f 92       	push	r7
    557c:	8f 92       	push	r8
    557e:	9f 92       	push	r9
    5580:	af 92       	push	r10
    5582:	bf 92       	push	r11
    5584:	cf 92       	push	r12
    5586:	df 92       	push	r13
    5588:	ef 92       	push	r14
    558a:	ff 92       	push	r15
    558c:	0f 93       	push	r16
    558e:	1f 93       	push	r17
    5590:	cf 93       	push	r28
    5592:	df 93       	push	r29
    5594:	cd b7       	in	r28, 0x3d	; 61
    5596:	de b7       	in	r29, 0x3e	; 62
    5598:	ca 1b       	sub	r28, r26
    559a:	db 0b       	sbc	r29, r27
    559c:	0f b6       	in	r0, 0x3f	; 63
    559e:	f8 94       	cli
    55a0:	de bf       	out	0x3e, r29	; 62
    55a2:	0f be       	out	0x3f, r0	; 63
    55a4:	cd bf       	out	0x3d, r28	; 61
    55a6:	09 94       	ijmp

000055a8 <__epilogue_restores__>:
    55a8:	2a 88       	ldd	r2, Y+18	; 0x12
    55aa:	39 88       	ldd	r3, Y+17	; 0x11
    55ac:	48 88       	ldd	r4, Y+16	; 0x10
    55ae:	5f 84       	ldd	r5, Y+15	; 0x0f
    55b0:	6e 84       	ldd	r6, Y+14	; 0x0e
    55b2:	7d 84       	ldd	r7, Y+13	; 0x0d
    55b4:	8c 84       	ldd	r8, Y+12	; 0x0c
    55b6:	9b 84       	ldd	r9, Y+11	; 0x0b
    55b8:	aa 84       	ldd	r10, Y+10	; 0x0a
    55ba:	b9 84       	ldd	r11, Y+9	; 0x09
    55bc:	c8 84       	ldd	r12, Y+8	; 0x08
    55be:	df 80       	ldd	r13, Y+7	; 0x07
    55c0:	ee 80       	ldd	r14, Y+6	; 0x06
    55c2:	fd 80       	ldd	r15, Y+5	; 0x05
    55c4:	0c 81       	ldd	r16, Y+4	; 0x04
    55c6:	1b 81       	ldd	r17, Y+3	; 0x03
    55c8:	aa 81       	ldd	r26, Y+2	; 0x02
    55ca:	b9 81       	ldd	r27, Y+1	; 0x01
    55cc:	ce 0f       	add	r28, r30
    55ce:	d1 1d       	adc	r29, r1
    55d0:	0f b6       	in	r0, 0x3f	; 63
    55d2:	f8 94       	cli
    55d4:	de bf       	out	0x3e, r29	; 62
    55d6:	0f be       	out	0x3f, r0	; 63
    55d8:	cd bf       	out	0x3d, r28	; 61
    55da:	ed 01       	movw	r28, r26
    55dc:	08 95       	ret

000055de <__ftoa_engine>:
    55de:	28 30       	cpi	r18, 0x08	; 8
    55e0:	08 f0       	brcs	.+2      	; 0x55e4 <__ftoa_engine+0x6>
    55e2:	27 e0       	ldi	r18, 0x07	; 7
    55e4:	33 27       	eor	r19, r19
    55e6:	da 01       	movw	r26, r20
    55e8:	99 0f       	add	r25, r25
    55ea:	31 1d       	adc	r19, r1
    55ec:	87 fd       	sbrc	r24, 7
    55ee:	91 60       	ori	r25, 0x01	; 1
    55f0:	00 96       	adiw	r24, 0x00	; 0
    55f2:	61 05       	cpc	r22, r1
    55f4:	71 05       	cpc	r23, r1
    55f6:	39 f4       	brne	.+14     	; 0x5606 <__ftoa_engine+0x28>
    55f8:	32 60       	ori	r19, 0x02	; 2
    55fa:	2e 5f       	subi	r18, 0xFE	; 254
    55fc:	3d 93       	st	X+, r19
    55fe:	30 e3       	ldi	r19, 0x30	; 48
    5600:	2a 95       	dec	r18
    5602:	e1 f7       	brne	.-8      	; 0x55fc <__ftoa_engine+0x1e>
    5604:	08 95       	ret
    5606:	9f 3f       	cpi	r25, 0xFF	; 255
    5608:	30 f0       	brcs	.+12     	; 0x5616 <__ftoa_engine+0x38>
    560a:	80 38       	cpi	r24, 0x80	; 128
    560c:	71 05       	cpc	r23, r1
    560e:	61 05       	cpc	r22, r1
    5610:	09 f0       	breq	.+2      	; 0x5614 <__ftoa_engine+0x36>
    5612:	3c 5f       	subi	r19, 0xFC	; 252
    5614:	3c 5f       	subi	r19, 0xFC	; 252
    5616:	3d 93       	st	X+, r19
    5618:	91 30       	cpi	r25, 0x01	; 1
    561a:	08 f0       	brcs	.+2      	; 0x561e <__ftoa_engine+0x40>
    561c:	80 68       	ori	r24, 0x80	; 128
    561e:	91 1d       	adc	r25, r1
    5620:	df 93       	push	r29
    5622:	cf 93       	push	r28
    5624:	1f 93       	push	r17
    5626:	0f 93       	push	r16
    5628:	ff 92       	push	r15
    562a:	ef 92       	push	r14
    562c:	19 2f       	mov	r17, r25
    562e:	98 7f       	andi	r25, 0xF8	; 248
    5630:	96 95       	lsr	r25
    5632:	e9 2f       	mov	r30, r25
    5634:	96 95       	lsr	r25
    5636:	96 95       	lsr	r25
    5638:	e9 0f       	add	r30, r25
    563a:	ff 27       	eor	r31, r31
    563c:	e6 52       	subi	r30, 0x26	; 38
    563e:	fb 4f       	sbci	r31, 0xFB	; 251
    5640:	99 27       	eor	r25, r25
    5642:	33 27       	eor	r19, r19
    5644:	ee 24       	eor	r14, r14
    5646:	ff 24       	eor	r15, r15
    5648:	a7 01       	movw	r20, r14
    564a:	e7 01       	movw	r28, r14
    564c:	05 90       	lpm	r0, Z+
    564e:	08 94       	sec
    5650:	07 94       	ror	r0
    5652:	28 f4       	brcc	.+10     	; 0x565e <__ftoa_engine+0x80>
    5654:	36 0f       	add	r19, r22
    5656:	e7 1e       	adc	r14, r23
    5658:	f8 1e       	adc	r15, r24
    565a:	49 1f       	adc	r20, r25
    565c:	51 1d       	adc	r21, r1
    565e:	66 0f       	add	r22, r22
    5660:	77 1f       	adc	r23, r23
    5662:	88 1f       	adc	r24, r24
    5664:	99 1f       	adc	r25, r25
    5666:	06 94       	lsr	r0
    5668:	a1 f7       	brne	.-24     	; 0x5652 <__ftoa_engine+0x74>
    566a:	05 90       	lpm	r0, Z+
    566c:	07 94       	ror	r0
    566e:	28 f4       	brcc	.+10     	; 0x567a <__ftoa_engine+0x9c>
    5670:	e7 0e       	add	r14, r23
    5672:	f8 1e       	adc	r15, r24
    5674:	49 1f       	adc	r20, r25
    5676:	56 1f       	adc	r21, r22
    5678:	c1 1d       	adc	r28, r1
    567a:	77 0f       	add	r23, r23
    567c:	88 1f       	adc	r24, r24
    567e:	99 1f       	adc	r25, r25
    5680:	66 1f       	adc	r22, r22
    5682:	06 94       	lsr	r0
    5684:	a1 f7       	brne	.-24     	; 0x566e <__ftoa_engine+0x90>
    5686:	05 90       	lpm	r0, Z+
    5688:	07 94       	ror	r0
    568a:	28 f4       	brcc	.+10     	; 0x5696 <__ftoa_engine+0xb8>
    568c:	f8 0e       	add	r15, r24
    568e:	49 1f       	adc	r20, r25
    5690:	56 1f       	adc	r21, r22
    5692:	c7 1f       	adc	r28, r23
    5694:	d1 1d       	adc	r29, r1
    5696:	88 0f       	add	r24, r24
    5698:	99 1f       	adc	r25, r25
    569a:	66 1f       	adc	r22, r22
    569c:	77 1f       	adc	r23, r23
    569e:	06 94       	lsr	r0
    56a0:	a1 f7       	brne	.-24     	; 0x568a <__ftoa_engine+0xac>
    56a2:	05 90       	lpm	r0, Z+
    56a4:	07 94       	ror	r0
    56a6:	20 f4       	brcc	.+8      	; 0x56b0 <__ftoa_engine+0xd2>
    56a8:	49 0f       	add	r20, r25
    56aa:	56 1f       	adc	r21, r22
    56ac:	c7 1f       	adc	r28, r23
    56ae:	d8 1f       	adc	r29, r24
    56b0:	99 0f       	add	r25, r25
    56b2:	66 1f       	adc	r22, r22
    56b4:	77 1f       	adc	r23, r23
    56b6:	88 1f       	adc	r24, r24
    56b8:	06 94       	lsr	r0
    56ba:	a9 f7       	brne	.-22     	; 0x56a6 <__ftoa_engine+0xc8>
    56bc:	84 91       	lpm	r24, Z
    56be:	10 95       	com	r17
    56c0:	17 70       	andi	r17, 0x07	; 7
    56c2:	41 f0       	breq	.+16     	; 0x56d4 <__ftoa_engine+0xf6>
    56c4:	d6 95       	lsr	r29
    56c6:	c7 95       	ror	r28
    56c8:	57 95       	ror	r21
    56ca:	47 95       	ror	r20
    56cc:	f7 94       	ror	r15
    56ce:	e7 94       	ror	r14
    56d0:	1a 95       	dec	r17
    56d2:	c1 f7       	brne	.-16     	; 0x56c4 <__ftoa_engine+0xe6>
    56d4:	e0 e8       	ldi	r30, 0x80	; 128
    56d6:	f4 e0       	ldi	r31, 0x04	; 4
    56d8:	68 94       	set
    56da:	15 90       	lpm	r1, Z+
    56dc:	15 91       	lpm	r17, Z+
    56de:	35 91       	lpm	r19, Z+
    56e0:	65 91       	lpm	r22, Z+
    56e2:	95 91       	lpm	r25, Z+
    56e4:	05 90       	lpm	r0, Z+
    56e6:	7f e2       	ldi	r23, 0x2F	; 47
    56e8:	73 95       	inc	r23
    56ea:	e1 18       	sub	r14, r1
    56ec:	f1 0a       	sbc	r15, r17
    56ee:	43 0b       	sbc	r20, r19
    56f0:	56 0b       	sbc	r21, r22
    56f2:	c9 0b       	sbc	r28, r25
    56f4:	d0 09       	sbc	r29, r0
    56f6:	c0 f7       	brcc	.-16     	; 0x56e8 <__ftoa_engine+0x10a>
    56f8:	e1 0c       	add	r14, r1
    56fa:	f1 1e       	adc	r15, r17
    56fc:	43 1f       	adc	r20, r19
    56fe:	56 1f       	adc	r21, r22
    5700:	c9 1f       	adc	r28, r25
    5702:	d0 1d       	adc	r29, r0
    5704:	7e f4       	brtc	.+30     	; 0x5724 <__ftoa_engine+0x146>
    5706:	70 33       	cpi	r23, 0x30	; 48
    5708:	11 f4       	brne	.+4      	; 0x570e <__ftoa_engine+0x130>
    570a:	8a 95       	dec	r24
    570c:	e6 cf       	rjmp	.-52     	; 0x56da <__ftoa_engine+0xfc>
    570e:	e8 94       	clt
    5710:	01 50       	subi	r16, 0x01	; 1
    5712:	30 f0       	brcs	.+12     	; 0x5720 <__ftoa_engine+0x142>
    5714:	08 0f       	add	r16, r24
    5716:	0a f4       	brpl	.+2      	; 0x571a <__ftoa_engine+0x13c>
    5718:	00 27       	eor	r16, r16
    571a:	02 17       	cp	r16, r18
    571c:	08 f4       	brcc	.+2      	; 0x5720 <__ftoa_engine+0x142>
    571e:	20 2f       	mov	r18, r16
    5720:	23 95       	inc	r18
    5722:	02 2f       	mov	r16, r18
    5724:	7a 33       	cpi	r23, 0x3A	; 58
    5726:	28 f0       	brcs	.+10     	; 0x5732 <__ftoa_engine+0x154>
    5728:	79 e3       	ldi	r23, 0x39	; 57
    572a:	7d 93       	st	X+, r23
    572c:	2a 95       	dec	r18
    572e:	e9 f7       	brne	.-6      	; 0x572a <__ftoa_engine+0x14c>
    5730:	10 c0       	rjmp	.+32     	; 0x5752 <__ftoa_engine+0x174>
    5732:	7d 93       	st	X+, r23
    5734:	2a 95       	dec	r18
    5736:	89 f6       	brne	.-94     	; 0x56da <__ftoa_engine+0xfc>
    5738:	06 94       	lsr	r0
    573a:	97 95       	ror	r25
    573c:	67 95       	ror	r22
    573e:	37 95       	ror	r19
    5740:	17 95       	ror	r17
    5742:	17 94       	ror	r1
    5744:	e1 18       	sub	r14, r1
    5746:	f1 0a       	sbc	r15, r17
    5748:	43 0b       	sbc	r20, r19
    574a:	56 0b       	sbc	r21, r22
    574c:	c9 0b       	sbc	r28, r25
    574e:	d0 09       	sbc	r29, r0
    5750:	98 f0       	brcs	.+38     	; 0x5778 <__ftoa_engine+0x19a>
    5752:	23 95       	inc	r18
    5754:	7e 91       	ld	r23, -X
    5756:	73 95       	inc	r23
    5758:	7a 33       	cpi	r23, 0x3A	; 58
    575a:	08 f0       	brcs	.+2      	; 0x575e <__ftoa_engine+0x180>
    575c:	70 e3       	ldi	r23, 0x30	; 48
    575e:	7c 93       	st	X, r23
    5760:	20 13       	cpse	r18, r16
    5762:	b8 f7       	brcc	.-18     	; 0x5752 <__ftoa_engine+0x174>
    5764:	7e 91       	ld	r23, -X
    5766:	70 61       	ori	r23, 0x10	; 16
    5768:	7d 93       	st	X+, r23
    576a:	30 f0       	brcs	.+12     	; 0x5778 <__ftoa_engine+0x19a>
    576c:	83 95       	inc	r24
    576e:	71 e3       	ldi	r23, 0x31	; 49
    5770:	7d 93       	st	X+, r23
    5772:	70 e3       	ldi	r23, 0x30	; 48
    5774:	2a 95       	dec	r18
    5776:	e1 f7       	brne	.-8      	; 0x5770 <__ftoa_engine+0x192>
    5778:	11 24       	eor	r1, r1
    577a:	ef 90       	pop	r14
    577c:	ff 90       	pop	r15
    577e:	0f 91       	pop	r16
    5780:	1f 91       	pop	r17
    5782:	cf 91       	pop	r28
    5784:	df 91       	pop	r29
    5786:	99 27       	eor	r25, r25
    5788:	87 fd       	sbrc	r24, 7
    578a:	90 95       	com	r25
    578c:	08 95       	ret

0000578e <strnlen_P>:
    578e:	fc 01       	movw	r30, r24
    5790:	05 90       	lpm	r0, Z+
    5792:	61 50       	subi	r22, 0x01	; 1
    5794:	70 40       	sbci	r23, 0x00	; 0
    5796:	01 10       	cpse	r0, r1
    5798:	d8 f7       	brcc	.-10     	; 0x5790 <strnlen_P+0x2>
    579a:	80 95       	com	r24
    579c:	90 95       	com	r25
    579e:	8e 0f       	add	r24, r30
    57a0:	9f 1f       	adc	r25, r31
    57a2:	08 95       	ret

000057a4 <strnlen>:
    57a4:	fc 01       	movw	r30, r24
    57a6:	61 50       	subi	r22, 0x01	; 1
    57a8:	70 40       	sbci	r23, 0x00	; 0
    57aa:	01 90       	ld	r0, Z+
    57ac:	01 10       	cpse	r0, r1
    57ae:	d8 f7       	brcc	.-10     	; 0x57a6 <strnlen+0x2>
    57b0:	80 95       	com	r24
    57b2:	90 95       	com	r25
    57b4:	8e 0f       	add	r24, r30
    57b6:	9f 1f       	adc	r25, r31
    57b8:	08 95       	ret

000057ba <fputc>:
    57ba:	0f 93       	push	r16
    57bc:	1f 93       	push	r17
    57be:	cf 93       	push	r28
    57c0:	df 93       	push	r29
    57c2:	18 2f       	mov	r17, r24
    57c4:	09 2f       	mov	r16, r25
    57c6:	eb 01       	movw	r28, r22
    57c8:	8b 81       	ldd	r24, Y+3	; 0x03
    57ca:	81 fd       	sbrc	r24, 1
    57cc:	03 c0       	rjmp	.+6      	; 0x57d4 <fputc+0x1a>
    57ce:	8f ef       	ldi	r24, 0xFF	; 255
    57d0:	9f ef       	ldi	r25, 0xFF	; 255
    57d2:	20 c0       	rjmp	.+64     	; 0x5814 <fputc+0x5a>
    57d4:	82 ff       	sbrs	r24, 2
    57d6:	10 c0       	rjmp	.+32     	; 0x57f8 <fputc+0x3e>
    57d8:	4e 81       	ldd	r20, Y+6	; 0x06
    57da:	5f 81       	ldd	r21, Y+7	; 0x07
    57dc:	2c 81       	ldd	r18, Y+4	; 0x04
    57de:	3d 81       	ldd	r19, Y+5	; 0x05
    57e0:	42 17       	cp	r20, r18
    57e2:	53 07       	cpc	r21, r19
    57e4:	7c f4       	brge	.+30     	; 0x5804 <fputc+0x4a>
    57e6:	e8 81       	ld	r30, Y
    57e8:	f9 81       	ldd	r31, Y+1	; 0x01
    57ea:	9f 01       	movw	r18, r30
    57ec:	2f 5f       	subi	r18, 0xFF	; 255
    57ee:	3f 4f       	sbci	r19, 0xFF	; 255
    57f0:	39 83       	std	Y+1, r19	; 0x01
    57f2:	28 83       	st	Y, r18
    57f4:	10 83       	st	Z, r17
    57f6:	06 c0       	rjmp	.+12     	; 0x5804 <fputc+0x4a>
    57f8:	e8 85       	ldd	r30, Y+8	; 0x08
    57fa:	f9 85       	ldd	r31, Y+9	; 0x09
    57fc:	81 2f       	mov	r24, r17
    57fe:	09 95       	icall
    5800:	89 2b       	or	r24, r25
    5802:	29 f7       	brne	.-54     	; 0x57ce <fputc+0x14>
    5804:	2e 81       	ldd	r18, Y+6	; 0x06
    5806:	3f 81       	ldd	r19, Y+7	; 0x07
    5808:	2f 5f       	subi	r18, 0xFF	; 255
    580a:	3f 4f       	sbci	r19, 0xFF	; 255
    580c:	3f 83       	std	Y+7, r19	; 0x07
    580e:	2e 83       	std	Y+6, r18	; 0x06
    5810:	81 2f       	mov	r24, r17
    5812:	90 2f       	mov	r25, r16
    5814:	df 91       	pop	r29
    5816:	cf 91       	pop	r28
    5818:	1f 91       	pop	r17
    581a:	0f 91       	pop	r16
    581c:	08 95       	ret

0000581e <sprintf>:
    581e:	ae e0       	ldi	r26, 0x0E	; 14
    5820:	b0 e0       	ldi	r27, 0x00	; 0
    5822:	e5 e1       	ldi	r30, 0x15	; 21
    5824:	fc e2       	ldi	r31, 0x2C	; 44
    5826:	0c 94 c6 2a 	jmp	0x558c	; 0x558c <__prologue_saves__+0x1c>
    582a:	0d 89       	ldd	r16, Y+21	; 0x15
    582c:	1e 89       	ldd	r17, Y+22	; 0x16
    582e:	86 e0       	ldi	r24, 0x06	; 6
    5830:	8c 83       	std	Y+4, r24	; 0x04
    5832:	1a 83       	std	Y+2, r17	; 0x02
    5834:	09 83       	std	Y+1, r16	; 0x01
    5836:	8f ef       	ldi	r24, 0xFF	; 255
    5838:	9f e7       	ldi	r25, 0x7F	; 127
    583a:	9e 83       	std	Y+6, r25	; 0x06
    583c:	8d 83       	std	Y+5, r24	; 0x05
    583e:	ae 01       	movw	r20, r28
    5840:	47 5e       	subi	r20, 0xE7	; 231
    5842:	5f 4f       	sbci	r21, 0xFF	; 255
    5844:	6f 89       	ldd	r22, Y+23	; 0x17
    5846:	78 8d       	ldd	r23, Y+24	; 0x18
    5848:	ce 01       	movw	r24, r28
    584a:	01 96       	adiw	r24, 0x01	; 1
    584c:	0e 94 37 27 	call	0x4e6e	; 0x4e6e <vfprintf>
    5850:	ef 81       	ldd	r30, Y+7	; 0x07
    5852:	f8 85       	ldd	r31, Y+8	; 0x08
    5854:	e0 0f       	add	r30, r16
    5856:	f1 1f       	adc	r31, r17
    5858:	10 82       	st	Z, r1
    585a:	2e 96       	adiw	r28, 0x0e	; 14
    585c:	e4 e0       	ldi	r30, 0x04	; 4
    585e:	0c 94 e2 2a 	jmp	0x55c4	; 0x55c4 <__epilogue_restores__+0x1c>

00005862 <__ultoa_invert>:
    5862:	fa 01       	movw	r30, r20
    5864:	aa 27       	eor	r26, r26
    5866:	28 30       	cpi	r18, 0x08	; 8
    5868:	51 f1       	breq	.+84     	; 0x58be <__ultoa_invert+0x5c>
    586a:	20 31       	cpi	r18, 0x10	; 16
    586c:	81 f1       	breq	.+96     	; 0x58ce <__ultoa_invert+0x6c>
    586e:	e8 94       	clt
    5870:	6f 93       	push	r22
    5872:	6e 7f       	andi	r22, 0xFE	; 254
    5874:	6e 5f       	subi	r22, 0xFE	; 254
    5876:	7f 4f       	sbci	r23, 0xFF	; 255
    5878:	8f 4f       	sbci	r24, 0xFF	; 255
    587a:	9f 4f       	sbci	r25, 0xFF	; 255
    587c:	af 4f       	sbci	r26, 0xFF	; 255
    587e:	b1 e0       	ldi	r27, 0x01	; 1
    5880:	3e d0       	rcall	.+124    	; 0x58fe <__ultoa_invert+0x9c>
    5882:	b4 e0       	ldi	r27, 0x04	; 4
    5884:	3c d0       	rcall	.+120    	; 0x58fe <__ultoa_invert+0x9c>
    5886:	67 0f       	add	r22, r23
    5888:	78 1f       	adc	r23, r24
    588a:	89 1f       	adc	r24, r25
    588c:	9a 1f       	adc	r25, r26
    588e:	a1 1d       	adc	r26, r1
    5890:	68 0f       	add	r22, r24
    5892:	79 1f       	adc	r23, r25
    5894:	8a 1f       	adc	r24, r26
    5896:	91 1d       	adc	r25, r1
    5898:	a1 1d       	adc	r26, r1
    589a:	6a 0f       	add	r22, r26
    589c:	71 1d       	adc	r23, r1
    589e:	81 1d       	adc	r24, r1
    58a0:	91 1d       	adc	r25, r1
    58a2:	a1 1d       	adc	r26, r1
    58a4:	20 d0       	rcall	.+64     	; 0x58e6 <__ultoa_invert+0x84>
    58a6:	09 f4       	brne	.+2      	; 0x58aa <__ultoa_invert+0x48>
    58a8:	68 94       	set
    58aa:	3f 91       	pop	r19
    58ac:	2a e0       	ldi	r18, 0x0A	; 10
    58ae:	26 9f       	mul	r18, r22
    58b0:	11 24       	eor	r1, r1
    58b2:	30 19       	sub	r19, r0
    58b4:	30 5d       	subi	r19, 0xD0	; 208
    58b6:	31 93       	st	Z+, r19
    58b8:	de f6       	brtc	.-74     	; 0x5870 <__ultoa_invert+0xe>
    58ba:	cf 01       	movw	r24, r30
    58bc:	08 95       	ret
    58be:	46 2f       	mov	r20, r22
    58c0:	47 70       	andi	r20, 0x07	; 7
    58c2:	40 5d       	subi	r20, 0xD0	; 208
    58c4:	41 93       	st	Z+, r20
    58c6:	b3 e0       	ldi	r27, 0x03	; 3
    58c8:	0f d0       	rcall	.+30     	; 0x58e8 <__ultoa_invert+0x86>
    58ca:	c9 f7       	brne	.-14     	; 0x58be <__ultoa_invert+0x5c>
    58cc:	f6 cf       	rjmp	.-20     	; 0x58ba <__ultoa_invert+0x58>
    58ce:	46 2f       	mov	r20, r22
    58d0:	4f 70       	andi	r20, 0x0F	; 15
    58d2:	40 5d       	subi	r20, 0xD0	; 208
    58d4:	4a 33       	cpi	r20, 0x3A	; 58
    58d6:	18 f0       	brcs	.+6      	; 0x58de <__ultoa_invert+0x7c>
    58d8:	49 5d       	subi	r20, 0xD9	; 217
    58da:	31 fd       	sbrc	r19, 1
    58dc:	40 52       	subi	r20, 0x20	; 32
    58de:	41 93       	st	Z+, r20
    58e0:	02 d0       	rcall	.+4      	; 0x58e6 <__ultoa_invert+0x84>
    58e2:	a9 f7       	brne	.-22     	; 0x58ce <__ultoa_invert+0x6c>
    58e4:	ea cf       	rjmp	.-44     	; 0x58ba <__ultoa_invert+0x58>
    58e6:	b4 e0       	ldi	r27, 0x04	; 4
    58e8:	a6 95       	lsr	r26
    58ea:	97 95       	ror	r25
    58ec:	87 95       	ror	r24
    58ee:	77 95       	ror	r23
    58f0:	67 95       	ror	r22
    58f2:	ba 95       	dec	r27
    58f4:	c9 f7       	brne	.-14     	; 0x58e8 <__ultoa_invert+0x86>
    58f6:	00 97       	sbiw	r24, 0x00	; 0
    58f8:	61 05       	cpc	r22, r1
    58fa:	71 05       	cpc	r23, r1
    58fc:	08 95       	ret
    58fe:	9b 01       	movw	r18, r22
    5900:	ac 01       	movw	r20, r24
    5902:	0a 2e       	mov	r0, r26
    5904:	06 94       	lsr	r0
    5906:	57 95       	ror	r21
    5908:	47 95       	ror	r20
    590a:	37 95       	ror	r19
    590c:	27 95       	ror	r18
    590e:	ba 95       	dec	r27
    5910:	c9 f7       	brne	.-14     	; 0x5904 <__ultoa_invert+0xa2>
    5912:	62 0f       	add	r22, r18
    5914:	73 1f       	adc	r23, r19
    5916:	84 1f       	adc	r24, r20
    5918:	95 1f       	adc	r25, r21
    591a:	a0 1d       	adc	r26, r0
    591c:	08 95       	ret

0000591e <__do_global_dtors>:
    591e:	15 e0       	ldi	r17, 0x05	; 5
    5920:	cc e7       	ldi	r28, 0x7C	; 124
    5922:	d5 e0       	ldi	r29, 0x05	; 5
    5924:	04 c0       	rjmp	.+8      	; 0x592e <__do_global_dtors+0x10>
    5926:	fe 01       	movw	r30, r28
    5928:	0e 94 b4 2a 	call	0x5568	; 0x5568 <__tablejump__>
    592c:	22 96       	adiw	r28, 0x02	; 2
    592e:	ce 37       	cpi	r28, 0x7E	; 126
    5930:	d1 07       	cpc	r29, r17
    5932:	c9 f7       	brne	.-14     	; 0x5926 <__do_global_dtors+0x8>
    5934:	f8 94       	cli

00005936 <__stop_program>:
    5936:	ff cf       	rjmp	.-2      	; 0x5936 <__stop_program>
