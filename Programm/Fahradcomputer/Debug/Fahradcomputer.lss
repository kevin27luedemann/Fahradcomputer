
Fahradcomputer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000134  00800100  00003968  000039fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003968  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000431  00800234  00800234  00003b30  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00003b30  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000002b8  00000000  00000000  00003b8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000589b  00000000  00000000  00003e44  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001059  00000000  00000000  000096df  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000f95  00000000  00000000  0000a738  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000a4c  00000000  00000000  0000b6d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000ce6  00000000  00000000  0000c11c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000434e  00000000  00000000  0000ce02  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000002c0  00000000  00000000  00011150  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 81 02 	jmp	0x502	; 0x502 <__dtors_end>
       4:	0c 94 a9 02 	jmp	0x552	; 0x552 <__bad_interrupt>
       8:	0c 94 a9 02 	jmp	0x552	; 0x552 <__bad_interrupt>
       c:	0c 94 a9 02 	jmp	0x552	; 0x552 <__bad_interrupt>
      10:	0c 94 a9 02 	jmp	0x552	; 0x552 <__bad_interrupt>
      14:	0c 94 a9 02 	jmp	0x552	; 0x552 <__bad_interrupt>
      18:	0c 94 a9 02 	jmp	0x552	; 0x552 <__bad_interrupt>
      1c:	0c 94 a9 02 	jmp	0x552	; 0x552 <__bad_interrupt>
      20:	0c 94 a9 02 	jmp	0x552	; 0x552 <__bad_interrupt>
      24:	0c 94 3c 08 	jmp	0x1078	; 0x1078 <__vector_9>
      28:	0c 94 a9 02 	jmp	0x552	; 0x552 <__bad_interrupt>
      2c:	0c 94 a9 02 	jmp	0x552	; 0x552 <__bad_interrupt>
      30:	0c 94 a9 02 	jmp	0x552	; 0x552 <__bad_interrupt>
      34:	0c 94 a9 02 	jmp	0x552	; 0x552 <__bad_interrupt>
      38:	0c 94 a9 02 	jmp	0x552	; 0x552 <__bad_interrupt>
      3c:	0c 94 a9 02 	jmp	0x552	; 0x552 <__bad_interrupt>
      40:	0c 94 a9 02 	jmp	0x552	; 0x552 <__bad_interrupt>
      44:	0c 94 a9 02 	jmp	0x552	; 0x552 <__bad_interrupt>
      48:	0c 94 a9 02 	jmp	0x552	; 0x552 <__bad_interrupt>
      4c:	0c 94 a9 02 	jmp	0x552	; 0x552 <__bad_interrupt>
      50:	0c 94 a9 02 	jmp	0x552	; 0x552 <__bad_interrupt>
      54:	0c 94 a9 02 	jmp	0x552	; 0x552 <__bad_interrupt>
      58:	0c 94 a9 02 	jmp	0x552	; 0x552 <__bad_interrupt>
      5c:	0c 94 a9 02 	jmp	0x552	; 0x552 <__bad_interrupt>
      60:	0c 94 a9 02 	jmp	0x552	; 0x552 <__bad_interrupt>
      64:	0c 94 a9 02 	jmp	0x552	; 0x552 <__bad_interrupt>
      68:	bc 10       	cpse	r11, r12
      6a:	c3 10       	cpse	r12, r3
      6c:	ca 10       	cpse	r12, r10
      6e:	d1 10       	cpse	r13, r1
      70:	d8 10       	cpse	r13, r8
      72:	df 10       	cpse	r13, r15
      74:	e6 10       	cpse	r14, r6
      76:	ed 10       	cpse	r14, r13
      78:	08 4a       	sbci	r16, 0xA8	; 168
      7a:	d7 3b       	cpi	r29, 0xB7	; 183
      7c:	3b ce       	rjmp	.-906    	; 0xfffffcf4 <__eeprom_end+0xff7efcf4>
      7e:	01 6e       	ori	r16, 0xE1	; 225
      80:	84 bc       	out	0x24, r8	; 36
      82:	bf fd       	.word	0xfdbf	; ????
      84:	c1 2f       	mov	r28, r17
      86:	3d 6c       	ori	r19, 0xCD	; 205
      88:	74 31       	cpi	r23, 0x14	; 20
      8a:	9a bd       	out	0x2a, r25	; 42
      8c:	56 83       	std	Z+6, r21	; 0x06
      8e:	3d da       	rcall	.-2950   	; 0xfffff50a <__eeprom_end+0xff7ef50a>
      90:	3d 00       	.word	0x003d	; ????
      92:	c7 7f       	andi	r28, 0xF7	; 247
      94:	11 be       	out	0x31, r1	; 49
      96:	d9 e4       	ldi	r29, 0x49	; 73
      98:	bb 4c       	sbci	r27, 0xCB	; 203
      9a:	3e 91       	ld	r19, -X
      9c:	6b aa       	std	Y+51, r6	; 0x33
      9e:	aa be       	out	0x3a, r10	; 58
      a0:	00 00       	nop
      a2:	00 80       	ld	r0, Z
      a4:	3f 05       	cpc	r19, r15
      a6:	a8 4c       	sbci	r26, 0xC8	; 200
      a8:	cd b2       	in	r12, 0x1d	; 29
      aa:	d4 4e       	sbci	r29, 0xE4	; 228
      ac:	b9 38       	cpi	r27, 0x89	; 137
      ae:	36 a9       	ldd	r19, Z+54	; 0x36
      b0:	02 0c       	add	r0, r2
      b2:	50 b9       	out	0x00, r21	; 0
      b4:	91 86       	std	Z+9, r9	; 0x09
      b6:	88 08       	sbc	r8, r8
      b8:	3c a6       	std	Y+44, r3	; 0x2c
      ba:	aa aa       	std	Y+50, r10	; 0x32
      bc:	2a be       	out	0x3a, r2	; 58
      be:	00 00       	nop
      c0:	00 80       	ld	r0, Z
      c2:	3f 06       	cpc	r3, r31
      c4:	64 ec       	ldi	r22, 0xC4	; 196
      c6:	1b 3c       	cpi	r17, 0xCB	; 203
      c8:	04 bc       	out	0x24, r0	; 36
      ca:	16 3e       	cpi	r17, 0xE6	; 230
      cc:	3b e5       	ldi	r19, 0x5B	; 91
      ce:	b9 3c       	cpi	r27, 0xC9	; 201
      d0:	c9 3c       	cpi	r28, 0xC9	; 201
      d2:	37 c2       	rjmp	.+1134   	; 0x542 <__do_global_ctors+0xe>
      d4:	9e 5a       	subi	r25, 0xAE	; 174
      d6:	3d 66       	ori	r19, 0x6D	; 109
      d8:	04 98       	cbi	0x00, 4	; 0
      da:	08 3e       	cpi	r16, 0xE8	; 232
      dc:	ea 69       	ori	r30, 0x9A	; 154
      de:	aa aa       	std	Y+50, r10	; 0x32
      e0:	3e 00       	.word	0x003e	; ????
      e2:	00 00       	nop
      e4:	80 3f       	cpi	r24, 0xF0	; 240

000000e6 <__trampolines_end>:
      e6:	00 e0       	ldi	r16, 0x00	; 0
      e8:	f8 fc       	.word	0xfcf8	; ????
      ea:	fe 1e       	adc	r15, r30
      ec:	07 07       	cpc	r16, r23
      ee:	07 07       	cpc	r16, r23
      f0:	1e fe       	.word	0xfe1e	; ????
      f2:	fc f8       	.word	0xf8fc	; ????
      f4:	f0 00       	.word	0x00f0	; ????
      f6:	00 07       	cpc	r16, r16
      f8:	0f 3f       	cpi	r16, 0xFF	; 255
      fa:	3f 7c       	andi	r19, 0xCF	; 207
      fc:	70 70       	andi	r23, 0x00	; 0
      fe:	70 70       	andi	r23, 0x00	; 0
     100:	7c 3f       	cpi	r23, 0xFC	; 252
     102:	1f 1f       	adc	r17, r31
     104:	07 00       	.word	0x0007	; ????
     106:	00 00       	nop
     108:	00 06       	cpc	r0, r16
     10a:	07 07       	cpc	r16, r23
     10c:	ff ff       	.word	0xffff	; ????
     10e:	ff ff       	.word	0xffff	; ????
	...
     11c:	7f 7f       	andi	r23, 0xFF	; 255
     11e:	7f 7f       	andi	r23, 0xFF	; 255
     120:	00 00       	nop
     122:	00 00       	nop
     124:	00 00       	nop
     126:	00 38       	cpi	r16, 0x80	; 128
     128:	3c 3e       	cpi	r19, 0xEC	; 236
     12a:	3e 0f       	add	r19, r30
     12c:	07 07       	cpc	r16, r23
     12e:	07 cf       	rjmp	.-498    	; 0xffffff3e <__eeprom_end+0xff7eff3e>
     130:	ff fe       	.word	0xfeff	; ????
     132:	fe 38       	cpi	r31, 0x8E	; 142
     134:	00 00       	nop
     136:	00 40       	sbci	r16, 0x00	; 0
     138:	40 60       	ori	r20, 0x00	; 0
     13a:	70 78       	andi	r23, 0x80	; 128
     13c:	7c 7e       	andi	r23, 0xEC	; 236
     13e:	7f 77       	andi	r23, 0x7F	; 127
     140:	73 71       	andi	r23, 0x13	; 19
     142:	70 70       	andi	r23, 0x00	; 0
     144:	00 00       	nop
     146:	00 18       	sub	r0, r0
     148:	1c 1e       	adc	r1, r28
     14a:	1e 0f       	add	r17, r30
     14c:	c7 c7       	rjmp	.+3982   	; 0x10dc <_Z14willkommenpagev+0x2a>
     14e:	e7 ff       	sbrs	r30, 7
     150:	fe be       	out	0x3e, r15	; 62
     152:	9c 00       	.word	0x009c	; ????
     154:	00 00       	nop
     156:	00 0c       	add	r0, r0
     158:	1c 3c       	cpi	r17, 0xCC	; 204
     15a:	3c 78       	andi	r19, 0x8C	; 140
     15c:	70 70       	andi	r23, 0x00	; 0
     15e:	70 79       	andi	r23, 0x90	; 144
     160:	7f 3f       	cpi	r23, 0xFF	; 255
     162:	1f 0f       	add	r17, r31
     164:	00 00       	nop
     166:	00 00       	nop
     168:	80 c0       	rjmp	.+256    	; 0x26a <_ZL7font5x8+0x44>
     16a:	e0 70       	andi	r30, 0x00	; 0
     16c:	38 1c       	adc	r3, r8
     16e:	1e ff       	.word	0xff1e	; ????
     170:	ff ff       	.word	0xffff	; ????
     172:	ff 00       	.word	0x00ff	; ????
     174:	00 00       	nop
     176:	06 07       	cpc	r16, r22
     178:	07 07       	cpc	r16, r23
     17a:	06 06       	cpc	r0, r22
     17c:	06 06       	cpc	r0, r22
     17e:	06 7f       	andi	r16, 0xF6	; 246
     180:	7f 7f       	andi	r23, 0xFF	; 255
     182:	7f 06       	cpc	r7, r31
     184:	06 00       	.word	0x0006	; ????
     186:	00 00       	nop
     188:	00 00       	nop
     18a:	f0 ff       	sbrs	r31, 0
     18c:	ff ff       	.word	0xffff	; ????
     18e:	e7 e7       	ldi	r30, 0x77	; 119
     190:	e7 e7       	ldi	r30, 0x77	; 119
     192:	c7 87       	std	Z+15, r28	; 0x0f
     194:	00 00       	nop
     196:	00 00       	nop
     198:	38 78       	andi	r19, 0x88	; 136
     19a:	71 70       	andi	r23, 0x01	; 1
     19c:	70 70       	andi	r23, 0x00	; 0
     19e:	70 70       	andi	r23, 0x00	; 0
     1a0:	39 3f       	cpi	r19, 0xF9	; 249
     1a2:	3f 1f       	adc	r19, r31
     1a4:	0f 00       	.word	0x000f	; ????
     1a6:	00 80       	ld	r0, Z
     1a8:	e0 f0       	brcs	.+56     	; 0x1e2 <__trampolines_end+0xfc>
     1aa:	f8 fc       	.word	0xfcf8	; ????
     1ac:	7f 7f       	andi	r23, 0xFF	; 255
     1ae:	6f 67       	ori	r22, 0x7F	; 127
     1b0:	e1 e1       	ldi	r30, 0x11	; 17
     1b2:	c0 80       	ld	r12, Z
     1b4:	00 00       	nop
     1b6:	00 0f       	add	r16, r16
     1b8:	1f 3f       	cpi	r17, 0xFF	; 255
     1ba:	3f 78       	andi	r19, 0x8F	; 143
     1bc:	70 70       	andi	r23, 0x00	; 0
     1be:	70 70       	andi	r23, 0x00	; 0
     1c0:	78 3f       	cpi	r23, 0xF8	; 248
     1c2:	3f 1f       	adc	r19, r31
     1c4:	0f 00       	.word	0x000f	; ????
     1c6:	00 07       	cpc	r16, r16
     1c8:	07 07       	cpc	r16, r23
     1ca:	07 07       	cpc	r16, r23
     1cc:	c7 e7       	ldi	r28, 0x77	; 119
     1ce:	f7 ff       	sbrs	r31, 7
     1d0:	7f 3f       	cpi	r23, 0xFF	; 255
     1d2:	1f 07       	cpc	r17, r31
     1d4:	03 01       	movw	r0, r6
     1d6:	00 20       	and	r0, r0
     1d8:	38 7c       	andi	r19, 0xC8	; 200
     1da:	7e 3f       	cpi	r23, 0xFE	; 254
     1dc:	0f 07       	cpc	r16, r31
     1de:	03 00       	.word	0x0003	; ????
	...
     1e8:	00 1c       	adc	r0, r0
     1ea:	be fe       	.word	0xfebe	; ????
     1ec:	ff e7       	ldi	r31, 0x7F	; 127
     1ee:	c3 c3       	rjmp	.+1926   	; 0x976 <__stack+0x77>
     1f0:	e7 ff       	sbrs	r30, 7
     1f2:	fe be       	out	0x3e, r15	; 62
     1f4:	1c 00       	.word	0x001c	; ????
     1f6:	00 00       	nop
     1f8:	0e 3f       	cpi	r16, 0xFE	; 254
     1fa:	3f 7f       	andi	r19, 0xFF	; 255
     1fc:	71 60       	ori	r23, 0x01	; 1
     1fe:	60 60       	ori	r22, 0x00	; 0
     200:	71 7f       	andi	r23, 0xF1	; 241
     202:	3f 3f       	cpi	r19, 0xFF	; 255
     204:	0f 00       	.word	0x000f	; ????
     206:	00 78       	andi	r16, 0x80	; 128
     208:	fc fe       	.word	0xfefc	; ????
     20a:	fe 8f       	std	Y+30, r31	; 0x1e
     20c:	07 07       	cpc	r16, r23
     20e:	07 07       	cpc	r16, r23
     210:	8f fe       	.word	0xfe8f	; ????
     212:	fe fc       	.word	0xfcfe	; ????
     214:	f8 00       	.word	0x00f8	; ????
     216:	00 00       	nop
     218:	00 01       	movw	r0, r0
     21a:	43 43       	sbci	r20, 0x33	; 51
     21c:	73 7b       	andi	r23, 0xB3	; 179
     21e:	7f 7f       	andi	r23, 0xFF	; 255
     220:	1f 0f       	add	r17, r31
     222:	07 03       	mulsu	r16, r23
	...

00000226 <_ZL7font5x8>:
     226:	00 00 5f 00 00 00 07 00 07 00 14 7f 14 7f 14 24     .._............$
     236:	2a 7f 2a 12 23 13 08 64 62 36 49 55 22 50 00 05     *.*.#..db6IU"P..
     246:	03 00 00 00 1c 22 41 00 00 41 22 1c 00 14 08 3e     ....."A..A"....>
     256:	08 14 08 08 3e 08 08 00 50 30 00 00 08 08 08 08     ....>...P0......
     266:	08 00 60 60 00 00 20 10 08 04 02 3e 51 49 45 3e     ..``.. ....>QIE>
     276:	00 42 7f 40 00 42 61 51 49 46 21 41 45 4b 31 18     .B.@.BaQIF!AEK1.
     286:	14 12 7f 10 27 45 45 45 39 3c 4a 49 49 30 01 71     ....'EEE9<JII0.q
     296:	09 05 03 36 49 49 49 36 06 49 49 29 1e 00 36 36     ...6III6.II)..66
     2a6:	00 00 00 56 36 00 00 08 14 22 41 00 14 14 14 14     ...V6...."A.....
     2b6:	14 00 41 22 14 08 02 01 51 09 06 32 49 79 41 3e     ..A"....Q..2IyA>
     2c6:	7e 11 11 11 7e 7f 49 49 49 36 3e 41 41 41 22 7f     ~...~.III6>AAA".
     2d6:	41 41 22 1c 7f 49 49 49 41 7f 09 09 09 01 3e 41     AA"..IIIA.....>A
     2e6:	49 49 7a 7f 08 08 08 7f 00 41 7f 41 00 20 40 41     IIz......A.A. @A
     2f6:	3f 01 7f 08 14 22 41 7f 40 40 40 40 7f 02 0c 02     ?...."A.@@@@....
     306:	7f 7f 04 08 10 7f 3e 41 41 41 3e 7f 09 09 09 06     ......>AAA>.....
     316:	3e 41 51 21 5e 7f 09 19 29 46 46 49 49 49 31 01     >AQ!^...)FFIII1.
     326:	01 7f 01 01 3f 40 40 40 3f 1f 20 40 20 1f 3f 40     ....?@@@?. @ .?@
     336:	38 40 3f 63 14 08 14 63 07 08 70 08 07 61 51 49     8@?c...c..p..aQI
     346:	45 43 00 7f 41 41 00 02 04 08 10 20 00 41 41 7f     EC..AA..... .AA.
     356:	00 04 02 01 02 04 40 40 40 40 40 00 01 02 04 00     ......@@@@@.....
     366:	20 54 54 54 78 7f 48 44 44 38 38 44 44 44 20 38      TTTx.HDD88DDD 8
     376:	44 44 48 7f 38 54 54 54 18 08 7e 09 01 02 0c 52     DDH.8TTT..~....R
     386:	52 52 3e 7f 08 04 04 78 00 44 7d 40 00 20 40 44     RR>....x.D}@. @D
     396:	3d 00 7f 10 28 44 00 00 41 7f 40 00 7c 04 18 04     =...(D..A.@.|...
     3a6:	78 7c 08 04 04 78 38 44 44 44 38 7c 14 14 14 08     x|...x8DDD8|....
     3b6:	08 14 14 18 7c 7c 08 04 04 08 48 54 54 54 20 04     ....||....HTTT .
     3c6:	3f 44 40 20 3c 40 40 20 7c 1c 20 40 20 1c 3c 40     ?D@ <@@ |. @ .<@
     3d6:	30 40 3c 44 28 10 28 44 0c 50 50 50 3c 44 64 54     0@<D(.(D.PPP<DdT
     3e6:	4c 44 00 08 36 41 00 00 00 7f 00 00 00 41 36 08     LD..6A.......A6.
     3f6:	00 10 08 08 10 08                                   ......

000003fc <__c.2161>:
     3fc:	6e 61 6e 00                                         nan.

00000400 <__c.2159>:
     400:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     410:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     420:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     430:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     440:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     450:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     460:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     470:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     480:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     490:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     4a0:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     4b0:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     4c0:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     4d0:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     4e0:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     4f0:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

000004fe <__ctors_start>:
     4fe:	32 11       	cpse	r19, r2

00000500 <__ctors_end>:
     500:	43 11       	cpse	r20, r3

00000502 <__dtors_end>:
     502:	11 24       	eor	r1, r1
     504:	1f be       	out	0x3f, r1	; 63
     506:	cf ef       	ldi	r28, 0xFF	; 255
     508:	d8 e0       	ldi	r29, 0x08	; 8
     50a:	de bf       	out	0x3e, r29	; 62
     50c:	cd bf       	out	0x3d, r28	; 61

0000050e <__do_copy_data>:
     50e:	12 e0       	ldi	r17, 0x02	; 2
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b1 e0       	ldi	r27, 0x01	; 1
     514:	e8 e6       	ldi	r30, 0x68	; 104
     516:	f9 e3       	ldi	r31, 0x39	; 57
     518:	02 c0       	rjmp	.+4      	; 0x51e <__do_copy_data+0x10>
     51a:	05 90       	lpm	r0, Z+
     51c:	0d 92       	st	X+, r0
     51e:	a4 33       	cpi	r26, 0x34	; 52
     520:	b1 07       	cpc	r27, r17
     522:	d9 f7       	brne	.-10     	; 0x51a <__do_copy_data+0xc>

00000524 <__do_clear_bss>:
     524:	26 e0       	ldi	r18, 0x06	; 6
     526:	a4 e3       	ldi	r26, 0x34	; 52
     528:	b2 e0       	ldi	r27, 0x02	; 2
     52a:	01 c0       	rjmp	.+2      	; 0x52e <.do_clear_bss_start>

0000052c <.do_clear_bss_loop>:
     52c:	1d 92       	st	X+, r1

0000052e <.do_clear_bss_start>:
     52e:	a5 36       	cpi	r26, 0x65	; 101
     530:	b2 07       	cpc	r27, r18
     532:	e1 f7       	brne	.-8      	; 0x52c <.do_clear_bss_loop>

00000534 <__do_global_ctors>:
     534:	14 e0       	ldi	r17, 0x04	; 4
     536:	c0 e0       	ldi	r28, 0x00	; 0
     538:	d5 e0       	ldi	r29, 0x05	; 5
     53a:	04 c0       	rjmp	.+8      	; 0x544 <__do_global_ctors+0x10>
     53c:	22 97       	sbiw	r28, 0x02	; 2
     53e:	fe 01       	movw	r30, r28
     540:	0e 94 cc 1a 	call	0x3598	; 0x3598 <__tablejump__>
     544:	ce 3f       	cpi	r28, 0xFE	; 254
     546:	d1 07       	cpc	r29, r17
     548:	c9 f7       	brne	.-14     	; 0x53c <__do_global_ctors+0x8>
     54a:	0e 94 25 11 	call	0x224a	; 0x224a <main>
     54e:	0c 94 a7 1c 	jmp	0x394e	; 0x394e <__do_global_dtors>

00000552 <__bad_interrupt>:
     552:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000556 <_ZN7DisplayD1Ev>:
	//}
	InitializeDisplay();
} //Display

// default destructor
Display::~Display()
     556:	9c 5f       	subi	r25, 0xFC	; 252
     558:	0e 94 58 11 	call	0x22b0	; 0x22b0 <_ZN3I2CD1Ev>
     55c:	08 95       	ret

0000055e <_ZN7Display10clearFrameEv>:
{
} //~Display

void Display::clearFrame(){
     55e:	fc 01       	movw	r30, r24
	for(uint16_t i=0;i<1024;i++){
     560:	20 e0       	ldi	r18, 0x00	; 0
     562:	30 e0       	ldi	r19, 0x00	; 0
		Displayframe[i]=0;
     564:	11 92       	st	Z+, r1
Display::~Display()
{
} //~Display

void Display::clearFrame(){
	for(uint16_t i=0;i<1024;i++){
     566:	2f 5f       	subi	r18, 0xFF	; 255
     568:	3f 4f       	sbci	r19, 0xFF	; 255
     56a:	21 15       	cp	r18, r1
     56c:	84 e0       	ldi	r24, 0x04	; 4
     56e:	38 07       	cpc	r19, r24
     570:	c9 f7       	brne	.-14     	; 0x564 <_ZN7Display10clearFrameEv+0x6>
		Displayframe[i]=0;
	}
}
     572:	08 95       	ret

00000574 <_ZN7Display15ssd1306_commandEh>:

void Display::ssd1306_command(uint8_t c){
     574:	1f 93       	push	r17
     576:	cf 93       	push	r28
     578:	df 93       	push	r29
     57a:	16 2f       	mov	r17, r22
	i2c.twi_start();
     57c:	ec 01       	movw	r28, r24
     57e:	dc 5f       	subi	r29, 0xFC	; 252
     580:	ce 01       	movw	r24, r28
     582:	0e 94 59 11 	call	0x22b2	; 0x22b2 <_ZN3I2C9twi_startEv>
	i2c.twi_write(OLEDADRESSE);
     586:	68 e7       	ldi	r22, 0x78	; 120
     588:	ce 01       	movw	r24, r28
     58a:	0e 94 61 11 	call	0x22c2	; 0x22c2 <_ZN3I2C9twi_writeEh>
	i2c.twi_write(OLEDBEFEHL);
     58e:	60 e0       	ldi	r22, 0x00	; 0
     590:	ce 01       	movw	r24, r28
     592:	0e 94 61 11 	call	0x22c2	; 0x22c2 <_ZN3I2C9twi_writeEh>
	i2c.twi_write(c);
     596:	61 2f       	mov	r22, r17
     598:	ce 01       	movw	r24, r28
     59a:	0e 94 61 11 	call	0x22c2	; 0x22c2 <_ZN3I2C9twi_writeEh>
	i2c.twi_stop();
     59e:	ce 01       	movw	r24, r28
     5a0:	0e 94 5d 11 	call	0x22ba	; 0x22ba <_ZN3I2C8twi_stopEv>
}
     5a4:	df 91       	pop	r29
     5a6:	cf 91       	pop	r28
     5a8:	1f 91       	pop	r17
     5aa:	08 95       	ret

000005ac <_ZN7Display17InitializeDisplayEv>:

void Display::InitializeDisplay()
{
     5ac:	cf 93       	push	r28
     5ae:	df 93       	push	r29
     5b0:	ec 01       	movw	r28, r24
	// Init sequence for 128x64 OLED module
	ssd1306_command(SSD1306_DISPLAYOFF);                    // 0xAE
     5b2:	6e ea       	ldi	r22, 0xAE	; 174
     5b4:	0e 94 ba 02 	call	0x574	; 0x574 <_ZN7Display15ssd1306_commandEh>

	ssd1306_command(SSD1306_SETDISPLAYCLOCKDIV);            // 0xD5
     5b8:	65 ed       	ldi	r22, 0xD5	; 213
     5ba:	ce 01       	movw	r24, r28
     5bc:	0e 94 ba 02 	call	0x574	; 0x574 <_ZN7Display15ssd1306_commandEh>
	ssd1306_command(0x80);                 // the suggested ratio 0x80
     5c0:	60 e8       	ldi	r22, 0x80	; 128
     5c2:	ce 01       	movw	r24, r28
     5c4:	0e 94 ba 02 	call	0x574	; 0x574 <_ZN7Display15ssd1306_commandEh>

	ssd1306_command(SSD1306_SETMULTIPLEX);                  // 0xA8
     5c8:	68 ea       	ldi	r22, 0xA8	; 168
     5ca:	ce 01       	movw	r24, r28
     5cc:	0e 94 ba 02 	call	0x574	; 0x574 <_ZN7Display15ssd1306_commandEh>
	ssd1306_command(0x3F);
     5d0:	6f e3       	ldi	r22, 0x3F	; 63
     5d2:	ce 01       	movw	r24, r28
     5d4:	0e 94 ba 02 	call	0x574	; 0x574 <_ZN7Display15ssd1306_commandEh>

	ssd1306_command(SSD1306_SETDISPLAYOFFSET);              // 0xD3
     5d8:	63 ed       	ldi	r22, 0xD3	; 211
     5da:	ce 01       	movw	r24, r28
     5dc:	0e 94 ba 02 	call	0x574	; 0x574 <_ZN7Display15ssd1306_commandEh>
	ssd1306_command(0x0);                                   // no offset
     5e0:	60 e0       	ldi	r22, 0x00	; 0
     5e2:	ce 01       	movw	r24, r28
     5e4:	0e 94 ba 02 	call	0x574	; 0x574 <_ZN7Display15ssd1306_commandEh>

	ssd1306_command(SSD1306_SETSTARTLINE);// | 0x0);        // line #0
     5e8:	60 e4       	ldi	r22, 0x40	; 64
     5ea:	ce 01       	movw	r24, r28
     5ec:	0e 94 ba 02 	call	0x574	; 0x574 <_ZN7Display15ssd1306_commandEh>

	ssd1306_command(SSD1306_CHARGEPUMP);                    // 0x8D
     5f0:	6d e8       	ldi	r22, 0x8D	; 141
     5f2:	ce 01       	movw	r24, r28
     5f4:	0e 94 ba 02 	call	0x574	; 0x574 <_ZN7Display15ssd1306_commandEh>
	ssd1306_command(0x14);  // using internal VCC
     5f8:	64 e1       	ldi	r22, 0x14	; 20
     5fa:	ce 01       	movw	r24, r28
     5fc:	0e 94 ba 02 	call	0x574	; 0x574 <_ZN7Display15ssd1306_commandEh>

	ssd1306_command(SSD1306_MEMORYMODE);                    // 0x20
     600:	60 e2       	ldi	r22, 0x20	; 32
     602:	ce 01       	movw	r24, r28
     604:	0e 94 ba 02 	call	0x574	; 0x574 <_ZN7Display15ssd1306_commandEh>
	ssd1306_command(0x00);          // 0x00 horizontal addressing
     608:	60 e0       	ldi	r22, 0x00	; 0
     60a:	ce 01       	movw	r24, r28
     60c:	0e 94 ba 02 	call	0x574	; 0x574 <_ZN7Display15ssd1306_commandEh>

	ssd1306_command(SSD1306_SEGREMAP | 0x1); // rotate screen 180
     610:	61 ea       	ldi	r22, 0xA1	; 161
     612:	ce 01       	movw	r24, r28
     614:	0e 94 ba 02 	call	0x574	; 0x574 <_ZN7Display15ssd1306_commandEh>

	ssd1306_command(SSD1306_COMSCANDEC); // rotate screen 180
     618:	68 ec       	ldi	r22, 0xC8	; 200
     61a:	ce 01       	movw	r24, r28
     61c:	0e 94 ba 02 	call	0x574	; 0x574 <_ZN7Display15ssd1306_commandEh>

	ssd1306_command(SSD1306_SETCOMPINS);                    // 0xDA
     620:	6a ed       	ldi	r22, 0xDA	; 218
     622:	ce 01       	movw	r24, r28
     624:	0e 94 ba 02 	call	0x574	; 0x574 <_ZN7Display15ssd1306_commandEh>
	ssd1306_command(0x12);
     628:	62 e1       	ldi	r22, 0x12	; 18
     62a:	ce 01       	movw	r24, r28
     62c:	0e 94 ba 02 	call	0x574	; 0x574 <_ZN7Display15ssd1306_commandEh>

	ssd1306_command(SSD1306_SETCONTRAST);                   // 0x81
     630:	61 e8       	ldi	r22, 0x81	; 129
     632:	ce 01       	movw	r24, r28
     634:	0e 94 ba 02 	call	0x574	; 0x574 <_ZN7Display15ssd1306_commandEh>
	ssd1306_command(0xCF);
     638:	6f ec       	ldi	r22, 0xCF	; 207
     63a:	ce 01       	movw	r24, r28
     63c:	0e 94 ba 02 	call	0x574	; 0x574 <_ZN7Display15ssd1306_commandEh>

	ssd1306_command(SSD1306_SETPRECHARGE);                  // 0xd9
     640:	69 ed       	ldi	r22, 0xD9	; 217
     642:	ce 01       	movw	r24, r28
     644:	0e 94 ba 02 	call	0x574	; 0x574 <_ZN7Display15ssd1306_commandEh>
	ssd1306_command(0xF1);
     648:	61 ef       	ldi	r22, 0xF1	; 241
     64a:	ce 01       	movw	r24, r28
     64c:	0e 94 ba 02 	call	0x574	; 0x574 <_ZN7Display15ssd1306_commandEh>

	ssd1306_command(SSD1306_SETVCOMDETECT);                 // 0xDB
     650:	6b ed       	ldi	r22, 0xDB	; 219
     652:	ce 01       	movw	r24, r28
     654:	0e 94 ba 02 	call	0x574	; 0x574 <_ZN7Display15ssd1306_commandEh>
	ssd1306_command(0x40);
     658:	60 e4       	ldi	r22, 0x40	; 64
     65a:	ce 01       	movw	r24, r28
     65c:	0e 94 ba 02 	call	0x574	; 0x574 <_ZN7Display15ssd1306_commandEh>

	ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
     660:	64 ea       	ldi	r22, 0xA4	; 164
     662:	ce 01       	movw	r24, r28
     664:	0e 94 ba 02 	call	0x574	; 0x574 <_ZN7Display15ssd1306_commandEh>

	ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
     668:	66 ea       	ldi	r22, 0xA6	; 166
     66a:	ce 01       	movw	r24, r28
     66c:	0e 94 ba 02 	call	0x574	; 0x574 <_ZN7Display15ssd1306_commandEh>

	ssd1306_command(SSD1306_DISPLAYON);                     //switch on OLED
     670:	6f ea       	ldi	r22, 0xAF	; 175
     672:	ce 01       	movw	r24, r28
     674:	0e 94 ba 02 	call	0x574	; 0x574 <_ZN7Display15ssd1306_commandEh>
}
     678:	df 91       	pop	r29
     67a:	cf 91       	pop	r28
     67c:	08 95       	ret

0000067e <_ZN7DisplayC1Ev>:


#include "Display.h"

// default constructor
Display::Display()
     67e:	cf 93       	push	r28
     680:	df 93       	push	r29
     682:	ec 01       	movw	r28, r24
     684:	9c 5f       	subi	r25, 0xFC	; 252
     686:	0e 94 54 11 	call	0x22a8	; 0x22a8 <_ZN3I2CC1Ev>
{
	//for (uint8_t i=0;i<1024;i++)
	//{
		//Displayframe[i]=0;
	//}
	InitializeDisplay();
     68a:	ce 01       	movw	r24, r28
     68c:	0e 94 d6 02 	call	0x5ac	; 0x5ac <_ZN7Display17InitializeDisplayEv>
} //Display
     690:	df 91       	pop	r29
     692:	cf 91       	pop	r28
     694:	08 95       	ret

00000696 <_ZN7Display9sendFrameEv>:
	else {
		ssd1306_command(SSD1306_NORMALDISPLAY);
	}
}

void Display::sendFrame(){
     696:	ef 92       	push	r14
     698:	ff 92       	push	r15
     69a:	0f 93       	push	r16
     69c:	1f 93       	push	r17
     69e:	cf 93       	push	r28
     6a0:	df 93       	push	r29
     6a2:	8c 01       	movw	r16, r24
	//Cursor an den Anfang setzen
	ssd1306_command(SSD1306_COLUMNADDR);
     6a4:	61 e2       	ldi	r22, 0x21	; 33
     6a6:	0e 94 ba 02 	call	0x574	; 0x574 <_ZN7Display15ssd1306_commandEh>
	ssd1306_command(0x00);
     6aa:	60 e0       	ldi	r22, 0x00	; 0
     6ac:	c8 01       	movw	r24, r16
     6ae:	0e 94 ba 02 	call	0x574	; 0x574 <_ZN7Display15ssd1306_commandEh>
	ssd1306_command(0x7F);
     6b2:	6f e7       	ldi	r22, 0x7F	; 127
     6b4:	c8 01       	movw	r24, r16
     6b6:	0e 94 ba 02 	call	0x574	; 0x574 <_ZN7Display15ssd1306_commandEh>

	ssd1306_command(SSD1306_PAGEADDR);
     6ba:	62 e2       	ldi	r22, 0x22	; 34
     6bc:	c8 01       	movw	r24, r16
     6be:	0e 94 ba 02 	call	0x574	; 0x574 <_ZN7Display15ssd1306_commandEh>
	ssd1306_command(0x00);
     6c2:	60 e0       	ldi	r22, 0x00	; 0
     6c4:	c8 01       	movw	r24, r16
     6c6:	0e 94 ba 02 	call	0x574	; 0x574 <_ZN7Display15ssd1306_commandEh>
	ssd1306_command(0x07);
     6ca:	67 e0       	ldi	r22, 0x07	; 7
     6cc:	c8 01       	movw	r24, r16
     6ce:	0e 94 ba 02 	call	0x574	; 0x574 <_ZN7Display15ssd1306_commandEh>

	i2c.twi_start();
     6d2:	78 01       	movw	r14, r16
     6d4:	8c ef       	ldi	r24, 0xFC	; 252
     6d6:	f8 1a       	sub	r15, r24
     6d8:	c7 01       	movw	r24, r14
     6da:	0e 94 59 11 	call	0x22b2	; 0x22b2 <_ZN3I2C9twi_startEv>
	i2c.twi_write(OLEDADRESSE);
     6de:	68 e7       	ldi	r22, 0x78	; 120
     6e0:	c7 01       	movw	r24, r14
     6e2:	0e 94 61 11 	call	0x22c2	; 0x22c2 <_ZN3I2C9twi_writeEh>
	i2c.twi_write(OLEDDATA);
     6e6:	60 e4       	ldi	r22, 0x40	; 64
     6e8:	c7 01       	movw	r24, r14
     6ea:	0e 94 61 11 	call	0x22c2	; 0x22c2 <_ZN3I2C9twi_writeEh>
	
	for(uint16_t i=0; i<1024;i++){
     6ee:	c0 e0       	ldi	r28, 0x00	; 0
     6f0:	d0 e0       	ldi	r29, 0x00	; 0
		i2c.twi_write(Displayframe[i]);
     6f2:	f8 01       	movw	r30, r16
     6f4:	61 91       	ld	r22, Z+
     6f6:	8f 01       	movw	r16, r30
     6f8:	c7 01       	movw	r24, r14
     6fa:	0e 94 61 11 	call	0x22c2	; 0x22c2 <_ZN3I2C9twi_writeEh>

	i2c.twi_start();
	i2c.twi_write(OLEDADRESSE);
	i2c.twi_write(OLEDDATA);
	
	for(uint16_t i=0; i<1024;i++){
     6fe:	21 96       	adiw	r28, 0x01	; 1
     700:	c1 15       	cp	r28, r1
     702:	f4 e0       	ldi	r31, 0x04	; 4
     704:	df 07       	cpc	r29, r31
     706:	a9 f7       	brne	.-22     	; 0x6f2 <_ZN7Display9sendFrameEv+0x5c>
		i2c.twi_write(Displayframe[i]);
	}
	i2c.twi_stop();
     708:	c7 01       	movw	r24, r14
     70a:	0e 94 5d 11 	call	0x22ba	; 0x22ba <_ZN3I2C8twi_stopEv>
}
     70e:	df 91       	pop	r29
     710:	cf 91       	pop	r28
     712:	1f 91       	pop	r17
     714:	0f 91       	pop	r16
     716:	ff 90       	pop	r15
     718:	ef 90       	pop	r14
     71a:	08 95       	ret

0000071c <_ZN7Display9drawPixelEhhh>:

void Display::drawPixel(uint8_t pos_x, uint8_t pos_y, uint8_t erase){
	if(!(pos_x >= SSD1306_WIDTH || pos_y >= SSD1306_HEIGHT)){
     71c:	66 23       	and	r22, r22
     71e:	bc f1       	brlt	.+110    	; 0x78e <_ZN7Display9drawPixelEhhh+0x72>
     720:	40 34       	cpi	r20, 0x40	; 64
     722:	a8 f5       	brcc	.+106    	; 0x78e <_ZN7Display9drawPixelEhhh+0x72>
		if(!erase){
     724:	21 11       	cpse	r18, r1
     726:	19 c0       	rjmp	.+50     	; 0x75a <_ZN7Display9drawPixelEhhh+0x3e>
			Displayframe[pos_x+(pos_y/8)*SSD1306_WIDTH] |= (1 << (pos_y&7));
     728:	e4 2f       	mov	r30, r20
     72a:	e6 95       	lsr	r30
     72c:	e6 95       	lsr	r30
     72e:	e6 95       	lsr	r30
     730:	20 e8       	ldi	r18, 0x80	; 128
     732:	e2 9f       	mul	r30, r18
     734:	f0 01       	movw	r30, r0
     736:	11 24       	eor	r1, r1
     738:	e6 0f       	add	r30, r22
     73a:	f1 1d       	adc	r31, r1
     73c:	e8 0f       	add	r30, r24
     73e:	f9 1f       	adc	r31, r25
     740:	47 70       	andi	r20, 0x07	; 7
     742:	21 e0       	ldi	r18, 0x01	; 1
     744:	30 e0       	ldi	r19, 0x00	; 0
     746:	c9 01       	movw	r24, r18
     748:	02 c0       	rjmp	.+4      	; 0x74e <_ZN7Display9drawPixelEhhh+0x32>
     74a:	88 0f       	add	r24, r24
     74c:	99 1f       	adc	r25, r25
     74e:	4a 95       	dec	r20
     750:	e2 f7       	brpl	.-8      	; 0x74a <_ZN7Display9drawPixelEhhh+0x2e>
     752:	90 81       	ld	r25, Z
     754:	89 2b       	or	r24, r25
     756:	80 83       	st	Z, r24
     758:	08 95       	ret
		}
		else {
			Displayframe[pos_x+(pos_y/8)*SSD1306_WIDTH] &= ~(1 << (pos_y&7));
     75a:	e4 2f       	mov	r30, r20
     75c:	e6 95       	lsr	r30
     75e:	e6 95       	lsr	r30
     760:	e6 95       	lsr	r30
     762:	30 e8       	ldi	r19, 0x80	; 128
     764:	e3 9f       	mul	r30, r19
     766:	f0 01       	movw	r30, r0
     768:	11 24       	eor	r1, r1
     76a:	e6 0f       	add	r30, r22
     76c:	f1 1d       	adc	r31, r1
     76e:	e8 0f       	add	r30, r24
     770:	f9 1f       	adc	r31, r25
     772:	47 70       	andi	r20, 0x07	; 7
     774:	81 e0       	ldi	r24, 0x01	; 1
     776:	90 e0       	ldi	r25, 0x00	; 0
     778:	9c 01       	movw	r18, r24
     77a:	02 c0       	rjmp	.+4      	; 0x780 <_ZN7Display9drawPixelEhhh+0x64>
     77c:	22 0f       	add	r18, r18
     77e:	33 1f       	adc	r19, r19
     780:	4a 95       	dec	r20
     782:	e2 f7       	brpl	.-8      	; 0x77c <_ZN7Display9drawPixelEhhh+0x60>
     784:	a9 01       	movw	r20, r18
     786:	40 95       	com	r20
     788:	80 81       	ld	r24, Z
     78a:	48 23       	and	r20, r24
     78c:	40 83       	st	Z, r20
     78e:	08 95       	ret

00000790 <_ZN7Display9draw_lineEhhhf>:
		}
	}
}

//eigene Zeichenfunktionen
void Display::draw_line(uint8_t x, uint8_t y, uint8_t length, float phi){
     790:	2f 92       	push	r2
     792:	3f 92       	push	r3
     794:	4f 92       	push	r4
     796:	5f 92       	push	r5
     798:	6f 92       	push	r6
     79a:	7f 92       	push	r7
     79c:	8f 92       	push	r8
     79e:	9f 92       	push	r9
     7a0:	af 92       	push	r10
     7a2:	bf 92       	push	r11
     7a4:	cf 92       	push	r12
     7a6:	df 92       	push	r13
     7a8:	ef 92       	push	r14
     7aa:	ff 92       	push	r15
     7ac:	0f 93       	push	r16
     7ae:	1f 93       	push	r17
     7b0:	cf 93       	push	r28
     7b2:	df 93       	push	r29
     7b4:	cd b7       	in	r28, 0x3d	; 61
     7b6:	de b7       	in	r29, 0x3e	; 62
     7b8:	2b 97       	sbiw	r28, 0x0b	; 11
     7ba:	0f b6       	in	r0, 0x3f	; 63
     7bc:	f8 94       	cli
     7be:	de bf       	out	0x3e, r29	; 62
     7c0:	0f be       	out	0x3f, r0	; 63
     7c2:	cd bf       	out	0x3d, r28	; 61
     7c4:	1c 01       	movw	r2, r24
     7c6:	d6 2e       	mov	r13, r22
     7c8:	c4 2e       	mov	r12, r20
     7ca:	29 83       	std	Y+1, r18	; 0x01
	//phi*=M_PI/180.0;
	uint8_t pos_x=0, pos_y=0;
	for (uint8_t i=0;i<length;i++)
     7cc:	22 23       	and	r18, r18
     7ce:	09 f4       	brne	.+2      	; 0x7d2 <_ZN7Display9draw_lineEhhhf+0x42>
     7d0:	69 c0       	rjmp	.+210    	; 0x8a4 <_ZN7Display9draw_lineEhhhf+0x114>
	{
		pos_x=(uint8_t) (-i*cos(phi)+x);
     7d2:	c8 01       	movw	r24, r16
     7d4:	b7 01       	movw	r22, r14
     7d6:	0e 94 ed 14 	call	0x29da	; 0x29da <cos>
     7da:	2b 01       	movw	r4, r22
     7dc:	3c 01       	movw	r6, r24
		pos_y=(uint8_t) (i*sin(phi)+y);
     7de:	c8 01       	movw	r24, r16
     7e0:	b7 01       	movw	r22, r14
     7e2:	0e 94 07 17 	call	0x2e0e	; 0x2e0e <sin>
     7e6:	4b 01       	movw	r8, r22
     7e8:	5c 01       	movw	r10, r24
     7ea:	1b 86       	std	Y+11, r1	; 0x0b
     7ec:	1a 86       	std	Y+10, r1	; 0x0a
     7ee:	8c 2d       	mov	r24, r12
     7f0:	90 e0       	ldi	r25, 0x00	; 0
     7f2:	a0 e0       	ldi	r26, 0x00	; 0
     7f4:	b0 e0       	ldi	r27, 0x00	; 0
     7f6:	8a 83       	std	Y+2, r24	; 0x02
     7f8:	9b 83       	std	Y+3, r25	; 0x03
     7fa:	ac 83       	std	Y+4, r26	; 0x04
     7fc:	bd 83       	std	Y+5, r27	; 0x05
void Display::draw_line(uint8_t x, uint8_t y, uint8_t length, float phi){
	//phi*=M_PI/180.0;
	uint8_t pos_x=0, pos_y=0;
	for (uint8_t i=0;i<length;i++)
	{
		pos_x=(uint8_t) (-i*cos(phi)+x);
     7fe:	8d 2d       	mov	r24, r13
     800:	90 e0       	ldi	r25, 0x00	; 0
     802:	a0 e0       	ldi	r26, 0x00	; 0
     804:	b0 e0       	ldi	r27, 0x00	; 0
     806:	8e 83       	std	Y+6, r24	; 0x06
     808:	9f 83       	std	Y+7, r25	; 0x07
     80a:	a8 87       	std	Y+8, r26	; 0x08
     80c:	b9 87       	std	Y+9, r27	; 0x09
		pos_y=(uint8_t) (i*sin(phi)+y);
     80e:	aa 85       	ldd	r26, Y+10	; 0x0a
     810:	bb 85       	ldd	r27, Y+11	; 0x0b
     812:	bd 01       	movw	r22, r26
     814:	88 27       	eor	r24, r24
     816:	77 fd       	sbrc	r23, 7
     818:	80 95       	com	r24
     81a:	98 2f       	mov	r25, r24
     81c:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <__floatsisf>
     820:	a5 01       	movw	r20, r10
     822:	94 01       	movw	r18, r8
     824:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <__mulsf3>
     828:	6b 01       	movw	r12, r22
     82a:	7c 01       	movw	r14, r24
     82c:	6a 81       	ldd	r22, Y+2	; 0x02
     82e:	7b 81       	ldd	r23, Y+3	; 0x03
     830:	8c 81       	ldd	r24, Y+4	; 0x04
     832:	9d 81       	ldd	r25, Y+5	; 0x05
     834:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <__floatsisf>
     838:	9b 01       	movw	r18, r22
     83a:	ac 01       	movw	r20, r24
     83c:	c7 01       	movw	r24, r14
     83e:	b6 01       	movw	r22, r12
     840:	0e 94 23 14 	call	0x2846	; 0x2846 <__addsf3>
     844:	0e 94 5d 15 	call	0x2aba	; 0x2aba <__fixunssfsi>
     848:	16 2f       	mov	r17, r22
     84a:	6a 85       	ldd	r22, Y+10	; 0x0a
     84c:	7b 85       	ldd	r23, Y+11	; 0x0b
     84e:	71 95       	neg	r23
     850:	61 95       	neg	r22
     852:	71 09       	sbc	r23, r1
void Display::draw_line(uint8_t x, uint8_t y, uint8_t length, float phi){
	//phi*=M_PI/180.0;
	uint8_t pos_x=0, pos_y=0;
	for (uint8_t i=0;i<length;i++)
	{
		pos_x=(uint8_t) (-i*cos(phi)+x);
     854:	88 27       	eor	r24, r24
     856:	77 fd       	sbrc	r23, 7
     858:	80 95       	com	r24
     85a:	98 2f       	mov	r25, r24
     85c:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <__floatsisf>
     860:	a3 01       	movw	r20, r6
     862:	92 01       	movw	r18, r4
     864:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <__mulsf3>
     868:	6b 01       	movw	r12, r22
     86a:	7c 01       	movw	r14, r24
     86c:	6e 81       	ldd	r22, Y+6	; 0x06
     86e:	7f 81       	ldd	r23, Y+7	; 0x07
     870:	88 85       	ldd	r24, Y+8	; 0x08
     872:	99 85       	ldd	r25, Y+9	; 0x09
     874:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <__floatsisf>
     878:	9b 01       	movw	r18, r22
     87a:	ac 01       	movw	r20, r24
     87c:	c7 01       	movw	r24, r14
     87e:	b6 01       	movw	r22, r12
     880:	0e 94 23 14 	call	0x2846	; 0x2846 <__addsf3>
     884:	0e 94 5d 15 	call	0x2aba	; 0x2aba <__fixunssfsi>
		pos_y=(uint8_t) (i*sin(phi)+y);
		drawPixel(pos_x,pos_y,0);
     888:	20 e0       	ldi	r18, 0x00	; 0
     88a:	41 2f       	mov	r20, r17
     88c:	c1 01       	movw	r24, r2
     88e:	0e 94 8e 03 	call	0x71c	; 0x71c <_ZN7Display9drawPixelEhhh>
     892:	ea 85       	ldd	r30, Y+10	; 0x0a
     894:	fb 85       	ldd	r31, Y+11	; 0x0b
     896:	31 96       	adiw	r30, 0x01	; 1
     898:	fb 87       	std	Y+11, r31	; 0x0b
     89a:	ea 87       	std	Y+10, r30	; 0x0a

//eigene Zeichenfunktionen
void Display::draw_line(uint8_t x, uint8_t y, uint8_t length, float phi){
	//phi*=M_PI/180.0;
	uint8_t pos_x=0, pos_y=0;
	for (uint8_t i=0;i<length;i++)
     89c:	f9 81       	ldd	r31, Y+1	; 0x01
     89e:	ef 17       	cp	r30, r31
     8a0:	08 f4       	brcc	.+2      	; 0x8a4 <_ZN7Display9draw_lineEhhhf+0x114>
     8a2:	b5 cf       	rjmp	.-150    	; 0x80e <_ZN7Display9draw_lineEhhhf+0x7e>
	{
		pos_x=(uint8_t) (-i*cos(phi)+x);
		pos_y=(uint8_t) (i*sin(phi)+y);
		drawPixel(pos_x,pos_y,0);
	}
}
     8a4:	2b 96       	adiw	r28, 0x0b	; 11
     8a6:	0f b6       	in	r0, 0x3f	; 63
     8a8:	f8 94       	cli
     8aa:	de bf       	out	0x3e, r29	; 62
     8ac:	0f be       	out	0x3f, r0	; 63
     8ae:	cd bf       	out	0x3d, r28	; 61
     8b0:	df 91       	pop	r29
     8b2:	cf 91       	pop	r28
     8b4:	1f 91       	pop	r17
     8b6:	0f 91       	pop	r16
     8b8:	ff 90       	pop	r15
     8ba:	ef 90       	pop	r14
     8bc:	df 90       	pop	r13
     8be:	cf 90       	pop	r12
     8c0:	bf 90       	pop	r11
     8c2:	af 90       	pop	r10
     8c4:	9f 90       	pop	r9
     8c6:	8f 90       	pop	r8
     8c8:	7f 90       	pop	r7
     8ca:	6f 90       	pop	r6
     8cc:	5f 90       	pop	r5
     8ce:	4f 90       	pop	r4
     8d0:	3f 90       	pop	r3
     8d2:	2f 90       	pop	r2
     8d4:	08 95       	ret

000008d6 <_ZN7Display13draw_triangleEhhhff>:

//using basecenterpoint as turningpoint for rotation
//upright triangle has rotationangle of 0
//turning clockwise considered in x transformation
//baseangle=70 is for 1/3 type
void Display::draw_triangle(uint8_t basecenter_x, uint8_t basecenter_y, uint8_t baselength, float baseangle, float rotationangle){
     8d6:	2f 92       	push	r2
     8d8:	3f 92       	push	r3
     8da:	4f 92       	push	r4
     8dc:	5f 92       	push	r5
     8de:	6f 92       	push	r6
     8e0:	7f 92       	push	r7
     8e2:	8f 92       	push	r8
     8e4:	9f 92       	push	r9
     8e6:	af 92       	push	r10
     8e8:	bf 92       	push	r11
     8ea:	cf 92       	push	r12
     8ec:	df 92       	push	r13
     8ee:	ef 92       	push	r14
     8f0:	ff 92       	push	r15
     8f2:	0f 93       	push	r16
     8f4:	1f 93       	push	r17
     8f6:	cf 93       	push	r28
     8f8:	df 93       	push	r29
     8fa:	cd b7       	in	r28, 0x3d	; 61
     8fc:	de b7       	in	r29, 0x3e	; 62
     8fe:	60 97       	sbiw	r28, 0x10	; 16
     900:	0f b6       	in	r0, 0x3f	; 63
     902:	f8 94       	cli
     904:	de bf       	out	0x3e, r29	; 62
     906:	0f be       	out	0x3f, r0	; 63
     908:	cd bf       	out	0x3d, r28	; 61
     90a:	1c 01       	movw	r2, r24
     90c:	6f 87       	std	Y+15, r22	; 0x0f
     90e:	4d 83       	std	Y+5, r20	; 0x05
     910:	29 83       	std	Y+1, r18	; 0x01
     912:	c6 01       	movw	r24, r12
     914:	b5 01       	movw	r22, r10
	//correcting rotationangle
	rotationangle*=M_PI/180.0;
     916:	25 e3       	ldi	r18, 0x35	; 53
     918:	3a ef       	ldi	r19, 0xFA	; 250
     91a:	4e e8       	ldi	r20, 0x8E	; 142
     91c:	5c e3       	ldi	r21, 0x3C	; 60
     91e:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <__mulsf3>
     922:	4b 01       	movw	r8, r22
     924:	5c 01       	movw	r10, r24
	baseangle*=M_PI/180.0;
     926:	25 e3       	ldi	r18, 0x35	; 53
     928:	3a ef       	ldi	r19, 0xFA	; 250
     92a:	4e e8       	ldi	r20, 0x8E	; 142
     92c:	5c e3       	ldi	r21, 0x3C	; 60
     92e:	c8 01       	movw	r24, r16
     930:	b7 01       	movw	r22, r14
     932:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <__mulsf3>
     936:	6e 83       	std	Y+6, r22	; 0x06
     938:	7f 83       	std	Y+7, r23	; 0x07
     93a:	88 87       	std	Y+8, r24	; 0x08
     93c:	99 87       	std	Y+9, r25	; 0x09
	//draw baseline
	draw_line(basecenter_x,basecenter_y,baselength/2,rotationangle);
     93e:	79 80       	ldd	r7, Y+1	; 0x01
     940:	76 94       	lsr	r7
     942:	85 01       	movw	r16, r10
     944:	74 01       	movw	r14, r8
     946:	27 2d       	mov	r18, r7
     948:	4d 81       	ldd	r20, Y+5	; 0x05
     94a:	6f 85       	ldd	r22, Y+15	; 0x0f
     94c:	c1 01       	movw	r24, r2
     94e:	0e 94 c8 03 	call	0x790	; 0x790 <_ZN7Display9draw_lineEhhhf>
	draw_line(basecenter_x,basecenter_y,baselength/2,rotationangle-M_PI);
     952:	2b ed       	ldi	r18, 0xDB	; 219
     954:	3f e0       	ldi	r19, 0x0F	; 15
     956:	49 e4       	ldi	r20, 0x49	; 73
     958:	50 e4       	ldi	r21, 0x40	; 64
     95a:	c5 01       	movw	r24, r10
     95c:	b4 01       	movw	r22, r8
     95e:	0e 94 22 14 	call	0x2844	; 0x2844 <__subsf3>
     962:	7b 01       	movw	r14, r22
     964:	8c 01       	movw	r16, r24
     966:	27 2d       	mov	r18, r7
     968:	4d 81       	ldd	r20, Y+5	; 0x05
     96a:	6f 85       	ldd	r22, Y+15	; 0x0f
     96c:	c1 01       	movw	r24, r2
     96e:	0e 94 c8 03 	call	0x790	; 0x790 <_ZN7Display9draw_lineEhhhf>
	//draw midleline
	uint8_t middlelength=baselength/2*tan(baseangle);
     972:	6e 81       	ldd	r22, Y+6	; 0x06
     974:	7f 81       	ldd	r23, Y+7	; 0x07
     976:	88 85       	ldd	r24, Y+8	; 0x08
     978:	99 85       	ldd	r25, Y+9	; 0x09
     97a:	0e 94 10 17 	call	0x2e20	; 0x2e20 <tan>
     97e:	6b 01       	movw	r12, r22
     980:	7c 01       	movw	r14, r24
     982:	67 2d       	mov	r22, r7
     984:	70 e0       	ldi	r23, 0x00	; 0
     986:	80 e0       	ldi	r24, 0x00	; 0
     988:	90 e0       	ldi	r25, 0x00	; 0
     98a:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <__floatsisf>
     98e:	a7 01       	movw	r20, r14
     990:	96 01       	movw	r18, r12
     992:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <__mulsf3>
     996:	0e 94 5d 15 	call	0x2aba	; 0x2aba <__fixunssfsi>
     99a:	68 8b       	std	Y+16, r22	; 0x10
	draw_line(basecenter_x,basecenter_y,middlelength,rotationangle-M_PI_2);
     99c:	2b ed       	ldi	r18, 0xDB	; 219
     99e:	3f e0       	ldi	r19, 0x0F	; 15
     9a0:	49 ec       	ldi	r20, 0xC9	; 201
     9a2:	5f e3       	ldi	r21, 0x3F	; 63
     9a4:	c5 01       	movw	r24, r10
     9a6:	b4 01       	movw	r22, r8
     9a8:	0e 94 22 14 	call	0x2844	; 0x2844 <__subsf3>
     9ac:	6a 87       	std	Y+10, r22	; 0x0a
     9ae:	7b 87       	std	Y+11, r23	; 0x0b
     9b0:	8c 87       	std	Y+12, r24	; 0x0c
     9b2:	9d 87       	std	Y+13, r25	; 0x0d
     9b4:	7b 01       	movw	r14, r22
     9b6:	8c 01       	movw	r16, r24
     9b8:	28 89       	ldd	r18, Y+16	; 0x10
     9ba:	4d 81       	ldd	r20, Y+5	; 0x05
     9bc:	6f 85       	ldd	r22, Y+15	; 0x0f
     9be:	c1 01       	movw	r24, r2
     9c0:	0e 94 c8 03 	call	0x790	; 0x790 <_ZN7Display9draw_lineEhhhf>
	//draw left arm
	uint8_t lengtharm=baselength/(2*cos(baseangle));
     9c4:	6e 81       	ldd	r22, Y+6	; 0x06
     9c6:	7f 81       	ldd	r23, Y+7	; 0x07
     9c8:	88 85       	ldd	r24, Y+8	; 0x08
     9ca:	99 85       	ldd	r25, Y+9	; 0x09
     9cc:	0e 94 ed 14 	call	0x29da	; 0x29da <cos>
     9d0:	6b 01       	movw	r12, r22
     9d2:	7c 01       	movw	r14, r24
     9d4:	29 81       	ldd	r18, Y+1	; 0x01
     9d6:	62 2f       	mov	r22, r18
     9d8:	70 e0       	ldi	r23, 0x00	; 0
     9da:	80 e0       	ldi	r24, 0x00	; 0
     9dc:	90 e0       	ldi	r25, 0x00	; 0
     9de:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <__floatsisf>
     9e2:	2b 01       	movw	r4, r22
     9e4:	3c 01       	movw	r6, r24
     9e6:	a7 01       	movw	r20, r14
     9e8:	96 01       	movw	r18, r12
     9ea:	c7 01       	movw	r24, r14
     9ec:	b6 01       	movw	r22, r12
     9ee:	0e 94 23 14 	call	0x2846	; 0x2846 <__addsf3>
     9f2:	9b 01       	movw	r18, r22
     9f4:	ac 01       	movw	r20, r24
     9f6:	c3 01       	movw	r24, r6
     9f8:	b2 01       	movw	r22, r4
     9fa:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <__divsf3>
     9fe:	0e 94 5d 15 	call	0x2aba	; 0x2aba <__fixunssfsi>
     a02:	6e 87       	std	Y+14, r22	; 0x0e
	uint8_t sx = basecenter_x-middlelength*cos(rotationangle-M_PI_2);
     a04:	e8 89       	ldd	r30, Y+16	; 0x10
     a06:	6e 2f       	mov	r22, r30
     a08:	70 e0       	ldi	r23, 0x00	; 0
     a0a:	80 e0       	ldi	r24, 0x00	; 0
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <__floatsisf>
     a12:	69 83       	std	Y+1, r22	; 0x01
     a14:	7a 83       	std	Y+2, r23	; 0x02
     a16:	8b 83       	std	Y+3, r24	; 0x03
     a18:	9c 83       	std	Y+4, r25	; 0x04
     a1a:	6a 85       	ldd	r22, Y+10	; 0x0a
     a1c:	7b 85       	ldd	r23, Y+11	; 0x0b
     a1e:	8c 85       	ldd	r24, Y+12	; 0x0c
     a20:	9d 85       	ldd	r25, Y+13	; 0x0d
     a22:	0e 94 ed 14 	call	0x29da	; 0x29da <cos>
     a26:	6b 01       	movw	r12, r22
     a28:	7c 01       	movw	r14, r24
     a2a:	ff 85       	ldd	r31, Y+15	; 0x0f
     a2c:	6f 2f       	mov	r22, r31
     a2e:	70 e0       	ldi	r23, 0x00	; 0
     a30:	80 e0       	ldi	r24, 0x00	; 0
     a32:	90 e0       	ldi	r25, 0x00	; 0
     a34:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <__floatsisf>
     a38:	2b 01       	movw	r4, r22
     a3a:	3c 01       	movw	r6, r24
     a3c:	a7 01       	movw	r20, r14
     a3e:	96 01       	movw	r18, r12
     a40:	69 81       	ldd	r22, Y+1	; 0x01
     a42:	7a 81       	ldd	r23, Y+2	; 0x02
     a44:	8b 81       	ldd	r24, Y+3	; 0x03
     a46:	9c 81       	ldd	r25, Y+4	; 0x04
     a48:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <__mulsf3>
     a4c:	9b 01       	movw	r18, r22
     a4e:	ac 01       	movw	r20, r24
     a50:	c3 01       	movw	r24, r6
     a52:	b2 01       	movw	r22, r4
     a54:	0e 94 22 14 	call	0x2844	; 0x2844 <__subsf3>
     a58:	0e 94 5d 15 	call	0x2aba	; 0x2aba <__fixunssfsi>
     a5c:	6f 87       	std	Y+15, r22	; 0x0f
	uint8_t sy = basecenter_y+middlelength*sin(rotationangle-M_PI_2);
     a5e:	6a 85       	ldd	r22, Y+10	; 0x0a
     a60:	7b 85       	ldd	r23, Y+11	; 0x0b
     a62:	8c 85       	ldd	r24, Y+12	; 0x0c
     a64:	9d 85       	ldd	r25, Y+13	; 0x0d
     a66:	0e 94 07 17 	call	0x2e0e	; 0x2e0e <sin>
     a6a:	6b 01       	movw	r12, r22
     a6c:	7c 01       	movw	r14, r24
     a6e:	2d 81       	ldd	r18, Y+5	; 0x05
     a70:	62 2f       	mov	r22, r18
     a72:	70 e0       	ldi	r23, 0x00	; 0
     a74:	80 e0       	ldi	r24, 0x00	; 0
     a76:	90 e0       	ldi	r25, 0x00	; 0
     a78:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <__floatsisf>
     a7c:	2b 01       	movw	r4, r22
     a7e:	3c 01       	movw	r6, r24
     a80:	a7 01       	movw	r20, r14
     a82:	96 01       	movw	r18, r12
     a84:	69 81       	ldd	r22, Y+1	; 0x01
     a86:	7a 81       	ldd	r23, Y+2	; 0x02
     a88:	8b 81       	ldd	r24, Y+3	; 0x03
     a8a:	9c 81       	ldd	r25, Y+4	; 0x04
     a8c:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <__mulsf3>
     a90:	9b 01       	movw	r18, r22
     a92:	ac 01       	movw	r20, r24
     a94:	c3 01       	movw	r24, r6
     a96:	b2 01       	movw	r22, r4
     a98:	0e 94 23 14 	call	0x2846	; 0x2846 <__addsf3>
     a9c:	0e 94 5d 15 	call	0x2aba	; 0x2aba <__fixunssfsi>
     aa0:	d6 2e       	mov	r13, r22
	draw_line(sx,sy,lengtharm,baseangle+rotationangle);
     aa2:	a5 01       	movw	r20, r10
     aa4:	94 01       	movw	r18, r8
     aa6:	6e 81       	ldd	r22, Y+6	; 0x06
     aa8:	7f 81       	ldd	r23, Y+7	; 0x07
     aaa:	88 85       	ldd	r24, Y+8	; 0x08
     aac:	99 85       	ldd	r25, Y+9	; 0x09
     aae:	0e 94 23 14 	call	0x2846	; 0x2846 <__addsf3>
     ab2:	7b 01       	movw	r14, r22
     ab4:	8c 01       	movw	r16, r24
     ab6:	2e 85       	ldd	r18, Y+14	; 0x0e
     ab8:	4d 2d       	mov	r20, r13
     aba:	6f 85       	ldd	r22, Y+15	; 0x0f
     abc:	c1 01       	movw	r24, r2
     abe:	0e 94 c8 03 	call	0x790	; 0x790 <_ZN7Display9draw_lineEhhhf>
	//draw right arm
	draw_line(sx,sy,lengtharm,-baseangle+rotationangle-M_PI);
     ac2:	2e 81       	ldd	r18, Y+6	; 0x06
     ac4:	3f 81       	ldd	r19, Y+7	; 0x07
     ac6:	48 85       	ldd	r20, Y+8	; 0x08
     ac8:	59 85       	ldd	r21, Y+9	; 0x09
     aca:	c5 01       	movw	r24, r10
     acc:	b4 01       	movw	r22, r8
     ace:	0e 94 22 14 	call	0x2844	; 0x2844 <__subsf3>
     ad2:	2b ed       	ldi	r18, 0xDB	; 219
     ad4:	3f e0       	ldi	r19, 0x0F	; 15
     ad6:	49 e4       	ldi	r20, 0x49	; 73
     ad8:	50 e4       	ldi	r21, 0x40	; 64
     ada:	0e 94 22 14 	call	0x2844	; 0x2844 <__subsf3>
     ade:	7b 01       	movw	r14, r22
     ae0:	8c 01       	movw	r16, r24
     ae2:	2e 85       	ldd	r18, Y+14	; 0x0e
     ae4:	4d 2d       	mov	r20, r13
     ae6:	6f 85       	ldd	r22, Y+15	; 0x0f
     ae8:	c1 01       	movw	r24, r2
     aea:	0e 94 c8 03 	call	0x790	; 0x790 <_ZN7Display9draw_lineEhhhf>
}
     aee:	60 96       	adiw	r28, 0x10	; 16
     af0:	0f b6       	in	r0, 0x3f	; 63
     af2:	f8 94       	cli
     af4:	de bf       	out	0x3e, r29	; 62
     af6:	0f be       	out	0x3f, r0	; 63
     af8:	cd bf       	out	0x3d, r28	; 61
     afa:	df 91       	pop	r29
     afc:	cf 91       	pop	r28
     afe:	1f 91       	pop	r17
     b00:	0f 91       	pop	r16
     b02:	ff 90       	pop	r15
     b04:	ef 90       	pop	r14
     b06:	df 90       	pop	r13
     b08:	cf 90       	pop	r12
     b0a:	bf 90       	pop	r11
     b0c:	af 90       	pop	r10
     b0e:	9f 90       	pop	r9
     b10:	8f 90       	pop	r8
     b12:	7f 90       	pop	r7
     b14:	6f 90       	pop	r6
     b16:	5f 90       	pop	r5
     b18:	4f 90       	pop	r4
     b1a:	3f 90       	pop	r3
     b1c:	2f 90       	pop	r2
     b1e:	08 95       	ret

00000b20 <_ZN7Display9draw_ASCIEhhh>:

void Display::draw_ASCI(uint8_t sym,uint8_t x, uint8_t y){
     b20:	0f 93       	push	r16
     b22:	1f 93       	push	r17
     b24:	cf 93       	push	r28
     b26:	df 93       	push	r29
	if(sym!=' ' && sym>=33){
     b28:	61 32       	cpi	r22, 0x21	; 33
     b2a:	08 f4       	brcc	.+2      	; 0xb2e <_ZN7Display9draw_ASCIEhhh+0xe>
     b2c:	42 c0       	rjmp	.+132    	; 0xbb2 <_ZN7Display9draw_ASCIEhhh+0x92>
		sym-=33;
		uint16_t symbol;
		for(uint8_t i = 0; i < 5; i++){
			symbol = pgm_read_byte(&font5x8[sym][i]);
			symbol = symbol << y%8;
			Displayframe[x+(y/8)*SSD1306_WIDTH+i] |=(uint8_t) (symbol & 0x00FF);
     b2e:	a4 2f       	mov	r26, r20
     b30:	b0 e0       	ldi	r27, 0x00	; 0
     b32:	02 2f       	mov	r16, r18
     b34:	06 95       	lsr	r16
     b36:	06 95       	lsr	r16
     b38:	06 95       	lsr	r16
     b3a:	30 e8       	ldi	r19, 0x80	; 128
     b3c:	03 9f       	mul	r16, r19
     b3e:	80 01       	movw	r16, r0
     b40:	11 24       	eor	r1, r1
     b42:	ed 01       	movw	r28, r26
     b44:	c0 0f       	add	r28, r16
     b46:	d1 1f       	adc	r29, r17
			if(((symbol&0xFF00)>>8)==0){
				Displayframe[x+(y/8+1)*SSD1306_WIDTH+i] |= 0;
			}
			else {
				Displayframe[x+(y/8+1)*SSD1306_WIDTH+i] |= (uint8_t) ((symbol & 0xFF00)>>8);
     b48:	00 58       	subi	r16, 0x80	; 128
     b4a:	1f 4f       	sbci	r17, 0xFF	; 255
     b4c:	0a 0f       	add	r16, r26
     b4e:	1b 1f       	adc	r17, r27
	draw_line(sx,sy,lengtharm,-baseangle+rotationangle-M_PI);
}

void Display::draw_ASCI(uint8_t sym,uint8_t x, uint8_t y){
	if(sym!=' ' && sym>=33){
		sym-=33;
     b50:	61 52       	subi	r22, 0x21	; 33
     b52:	46 2f       	mov	r20, r22
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	fa 01       	movw	r30, r20
     b58:	ee 0f       	add	r30, r30
     b5a:	ff 1f       	adc	r31, r31
     b5c:	ee 0f       	add	r30, r30
     b5e:	ff 1f       	adc	r31, r31
     b60:	e4 0f       	add	r30, r20
     b62:	f5 1f       	adc	r31, r21
     b64:	ea 5d       	subi	r30, 0xDA	; 218
     b66:	fd 4f       	sbci	r31, 0xFD	; 253
     b68:	dc 01       	movw	r26, r24
     b6a:	ac 0f       	add	r26, r28
     b6c:	bd 1f       	adc	r27, r29
     b6e:	ae 01       	movw	r20, r28
     b70:	05 96       	adiw	r24, 0x05	; 5
     b72:	8c 0f       	add	r24, r28
     b74:	9d 1f       	adc	r25, r29
		uint16_t symbol;
		for(uint8_t i = 0; i < 5; i++){
			symbol = pgm_read_byte(&font5x8[sym][i]);
			symbol = symbol << y%8;
     b76:	27 70       	andi	r18, 0x07	; 7
void Display::draw_ASCI(uint8_t sym,uint8_t x, uint8_t y){
	if(sym!=' ' && sym>=33){
		sym-=33;
		uint16_t symbol;
		for(uint8_t i = 0; i < 5; i++){
			symbol = pgm_read_byte(&font5x8[sym][i]);
     b78:	64 91       	lpm	r22, Z
     b7a:	70 e0       	ldi	r23, 0x00	; 0
			symbol = symbol << y%8;
     b7c:	02 2e       	mov	r0, r18
     b7e:	02 c0       	rjmp	.+4      	; 0xb84 <_ZN7Display9draw_ASCIEhhh+0x64>
     b80:	66 0f       	add	r22, r22
     b82:	77 1f       	adc	r23, r23
     b84:	0a 94       	dec	r0
     b86:	e2 f7       	brpl	.-8      	; 0xb80 <_ZN7Display9draw_ASCIEhhh+0x60>
			Displayframe[x+(y/8)*SSD1306_WIDTH+i] |=(uint8_t) (symbol & 0x00FF);
     b88:	3c 91       	ld	r19, X
     b8a:	36 2b       	or	r19, r22
     b8c:	3c 93       	st	X, r19
			if(((symbol&0xFF00)>>8)==0){
     b8e:	67 2f       	mov	r22, r23
     b90:	77 27       	eor	r23, r23
     b92:	61 15       	cp	r22, r1
     b94:	71 05       	cpc	r23, r1
     b96:	41 f0       	breq	.+16     	; 0xba8 <_ZN7Display9draw_ASCIEhhh+0x88>
     b98:	ed 01       	movw	r28, r26
     b9a:	c4 1b       	sub	r28, r20
     b9c:	d5 0b       	sbc	r29, r21
     b9e:	c0 0f       	add	r28, r16
     ba0:	d1 1f       	adc	r29, r17
				Displayframe[x+(y/8+1)*SSD1306_WIDTH+i] |= 0;
			}
			else {
				Displayframe[x+(y/8+1)*SSD1306_WIDTH+i] |= (uint8_t) ((symbol & 0xFF00)>>8);
     ba2:	38 81       	ld	r19, Y
     ba4:	63 2b       	or	r22, r19
     ba6:	68 83       	st	Y, r22
     ba8:	31 96       	adiw	r30, 0x01	; 1
     baa:	11 96       	adiw	r26, 0x01	; 1

void Display::draw_ASCI(uint8_t sym,uint8_t x, uint8_t y){
	if(sym!=' ' && sym>=33){
		sym-=33;
		uint16_t symbol;
		for(uint8_t i = 0; i < 5; i++){
     bac:	a8 17       	cp	r26, r24
     bae:	b9 07       	cpc	r27, r25
     bb0:	19 f7       	brne	.-58     	; 0xb78 <_ZN7Display9draw_ASCIEhhh+0x58>
	else{
		for(uint8_t i = 0; i < 7; i++){
			Displayframe[x+(y/8)*SSD1306_WIDTH+i] |= 0;
		}
	}
}
     bb2:	df 91       	pop	r29
     bb4:	cf 91       	pop	r28
     bb6:	1f 91       	pop	r17
     bb8:	0f 91       	pop	r16
     bba:	08 95       	ret

00000bbc <_ZN7Display16draw_number16x16Ehhh>:

void Display::draw_number16x16(uint8_t number, uint8_t x, uint8_t y){
     bbc:	ef 92       	push	r14
     bbe:	ff 92       	push	r15
     bc0:	0f 93       	push	r16
     bc2:	1f 93       	push	r17
     bc4:	cf 93       	push	r28
     bc6:	df 93       	push	r29
	uint16_t symbol;
	if(number>=0 && number<10){
     bc8:	6a 30       	cpi	r22, 0x0A	; 10
     bca:	08 f0       	brcs	.+2      	; 0xbce <_ZN7Display16draw_number16x16Ehhh+0x12>
     bcc:	66 c0       	rjmp	.+204    	; 0xc9a <_ZN7Display16draw_number16x16Ehhh+0xde>
		for(uint8_t i = 0; i < 32;i++){
			symbol = pgm_read_byte(&digits16x16[number][i]);
			symbol = symbol << y%8;
			if(i<16){
				Displayframe[x+(y/8)*SSD1306_WIDTH+i] |=(uint8_t) (symbol & 0x00FF);
     bce:	50 e0       	ldi	r21, 0x00	; 0
     bd0:	02 2f       	mov	r16, r18
     bd2:	06 95       	lsr	r16
     bd4:	06 95       	lsr	r16
     bd6:	06 95       	lsr	r16
     bd8:	10 e0       	ldi	r17, 0x00	; 0
     bda:	d8 01       	movw	r26, r16
     bdc:	b6 95       	lsr	r27
     bde:	ba 2f       	mov	r27, r26
     be0:	aa 27       	eor	r26, r26
     be2:	b7 95       	ror	r27
     be4:	a7 95       	ror	r26
				if(((symbol&0xFF00)>>8)==0){
					Displayframe[x+(y/8+1)*SSD1306_WIDTH+i] |= 0;
				}
				else {
					Displayframe[x+(y/8+1)*SSD1306_WIDTH+i] |= (uint8_t) ((symbol & 0xFF00)>>8);
     be6:	0f 5f       	subi	r16, 0xFF	; 255
     be8:	1f 4f       	sbci	r17, 0xFF	; 255
				}
			}
			else {
				Displayframe[x+(y/8+1)*SSD1306_WIDTH+(i-16)] |= (uint8_t) (symbol & 0x00FF);
     bea:	16 95       	lsr	r17
     bec:	10 2f       	mov	r17, r16
     bee:	00 27       	eor	r16, r16
     bf0:	17 95       	ror	r17
     bf2:	07 95       	ror	r16
				Displayframe[x+(y/8)*SSD1306_WIDTH+i] |=(uint8_t) (symbol & 0x00FF);
				if(((symbol&0xFF00)>>8)==0){
					Displayframe[x+(y/8+1)*SSD1306_WIDTH+i] |= 0;
				}
				else {
					Displayframe[x+(y/8+1)*SSD1306_WIDTH+i] |= (uint8_t) ((symbol & 0xFF00)>>8);
     bf4:	7d 01       	movw	r14, r26
     bf6:	30 e8       	ldi	r19, 0x80	; 128
     bf8:	e3 0e       	add	r14, r19
     bfa:	f1 1c       	adc	r15, r1
     bfc:	e4 0e       	add	r14, r20
     bfe:	f5 1e       	adc	r15, r21
     c00:	e8 0e       	add	r14, r24
     c02:	f9 1e       	adc	r15, r25
				}
			}
			else {
				Displayframe[x+(y/8+1)*SSD1306_WIDTH+(i-16)] |= (uint8_t) (symbol & 0x00FF);
     c04:	ea 01       	movw	r28, r20
     c06:	c0 0f       	add	r28, r16
     c08:	d1 1f       	adc	r29, r17
     c0a:	60 97       	sbiw	r28, 0x10	; 16
     c0c:	c8 0f       	add	r28, r24
     c0e:	d9 1f       	adc	r29, r25
				if(((symbol&0xFF00)>>8)==0){
					Displayframe[x+(y/8+2)*SSD1306_WIDTH+(i-16)] |= 0;
				}
				else {
					Displayframe[x+(y/8+2)*SSD1306_WIDTH+(i-16)] |= (uint8_t) ((symbol & 0xFF00)>>8);
     c10:	04 0f       	add	r16, r20
     c12:	15 1f       	adc	r17, r21
     c14:	00 59       	subi	r16, 0x90	; 144
     c16:	1f 4f       	sbci	r17, 0xFF	; 255
     c18:	08 0f       	add	r16, r24
     c1a:	19 1f       	adc	r17, r25
	if(number>=0 && number<10){
		for(uint8_t i = 0; i < 32;i++){
			symbol = pgm_read_byte(&digits16x16[number][i]);
			symbol = symbol << y%8;
			if(i<16){
				Displayframe[x+(y/8)*SSD1306_WIDTH+i] |=(uint8_t) (symbol & 0x00FF);
     c1c:	a4 0f       	add	r26, r20
     c1e:	b5 1f       	adc	r27, r21
     c20:	a8 0f       	add	r26, r24
     c22:	b9 1f       	adc	r27, r25
     c24:	e0 e2       	ldi	r30, 0x20	; 32
     c26:	6e 9f       	mul	r22, r30
     c28:	c0 01       	movw	r24, r0
     c2a:	11 24       	eor	r1, r1
				Displayframe[x+(y/8+1)*SSD1306_WIDTH+(i-16)] |= (uint8_t) (symbol & 0x00FF);
				if(((symbol&0xFF00)>>8)==0){
					Displayframe[x+(y/8+2)*SSD1306_WIDTH+(i-16)] |= 0;
				}
				else {
					Displayframe[x+(y/8+2)*SSD1306_WIDTH+(i-16)] |= (uint8_t) ((symbol & 0xFF00)>>8);
     c2c:	40 e0       	ldi	r20, 0x00	; 0
     c2e:	50 e0       	ldi	r21, 0x00	; 0
     c30:	8a 51       	subi	r24, 0x1A	; 26
     c32:	9f 4f       	sbci	r25, 0xFF	; 255
void Display::draw_number16x16(uint8_t number, uint8_t x, uint8_t y){
	uint16_t symbol;
	if(number>=0 && number<10){
		for(uint8_t i = 0; i < 32;i++){
			symbol = pgm_read_byte(&digits16x16[number][i]);
			symbol = symbol << y%8;
     c34:	27 70       	andi	r18, 0x07	; 7
     c36:	fc 01       	movw	r30, r24
     c38:	e4 0f       	add	r30, r20
     c3a:	f5 1f       	adc	r31, r21

void Display::draw_number16x16(uint8_t number, uint8_t x, uint8_t y){
	uint16_t symbol;
	if(number>=0 && number<10){
		for(uint8_t i = 0; i < 32;i++){
			symbol = pgm_read_byte(&digits16x16[number][i]);
     c3c:	e4 91       	lpm	r30, Z
     c3e:	f0 e0       	ldi	r31, 0x00	; 0
			symbol = symbol << y%8;
     c40:	02 2e       	mov	r0, r18
     c42:	02 c0       	rjmp	.+4      	; 0xc48 <_ZN7Display16draw_number16x16Ehhh+0x8c>
     c44:	ee 0f       	add	r30, r30
     c46:	ff 1f       	adc	r31, r31
     c48:	0a 94       	dec	r0
     c4a:	e2 f7       	brpl	.-8      	; 0xc44 <_ZN7Display16draw_number16x16Ehhh+0x88>
			if(i<16){
     c4c:	40 31       	cpi	r20, 0x10	; 16
     c4e:	68 f4       	brcc	.+26     	; 0xc6a <_ZN7Display16draw_number16x16Ehhh+0xae>
				Displayframe[x+(y/8)*SSD1306_WIDTH+i] |=(uint8_t) (symbol & 0x00FF);
     c50:	3c 91       	ld	r19, X
     c52:	3e 2b       	or	r19, r30
     c54:	3c 93       	st	X, r19
				if(((symbol&0xFF00)>>8)==0){
     c56:	6f 2f       	mov	r22, r31
     c58:	77 27       	eor	r23, r23
     c5a:	61 15       	cp	r22, r1
     c5c:	71 05       	cpc	r23, r1
     c5e:	89 f0       	breq	.+34     	; 0xc82 <_ZN7Display16draw_number16x16Ehhh+0xc6>
					Displayframe[x+(y/8+1)*SSD1306_WIDTH+i] |= 0;
				}
				else {
					Displayframe[x+(y/8+1)*SSD1306_WIDTH+i] |= (uint8_t) ((symbol & 0xFF00)>>8);
     c60:	f7 01       	movw	r30, r14
     c62:	30 81       	ld	r19, Z
     c64:	36 2b       	or	r19, r22
     c66:	30 83       	st	Z, r19
     c68:	0c c0       	rjmp	.+24     	; 0xc82 <_ZN7Display16draw_number16x16Ehhh+0xc6>
				}
			}
			else {
				Displayframe[x+(y/8+1)*SSD1306_WIDTH+(i-16)] |= (uint8_t) (symbol & 0x00FF);
     c6a:	38 81       	ld	r19, Y
     c6c:	3e 2b       	or	r19, r30
     c6e:	38 83       	st	Y, r19
				if(((symbol&0xFF00)>>8)==0){
     c70:	6f 2f       	mov	r22, r31
     c72:	77 27       	eor	r23, r23
     c74:	61 15       	cp	r22, r1
     c76:	71 05       	cpc	r23, r1
     c78:	21 f0       	breq	.+8      	; 0xc82 <_ZN7Display16draw_number16x16Ehhh+0xc6>
					Displayframe[x+(y/8+2)*SSD1306_WIDTH+(i-16)] |= 0;
				}
				else {
					Displayframe[x+(y/8+2)*SSD1306_WIDTH+(i-16)] |= (uint8_t) ((symbol & 0xFF00)>>8);
     c7a:	f8 01       	movw	r30, r16
     c7c:	30 81       	ld	r19, Z
     c7e:	36 2b       	or	r19, r22
     c80:	30 83       	st	Z, r19
     c82:	4f 5f       	subi	r20, 0xFF	; 255
     c84:	5f 4f       	sbci	r21, 0xFF	; 255
     c86:	ff ef       	ldi	r31, 0xFF	; 255
     c88:	ef 1a       	sub	r14, r31
     c8a:	ff 0a       	sbc	r15, r31
     c8c:	21 96       	adiw	r28, 0x01	; 1
     c8e:	0f 5f       	subi	r16, 0xFF	; 255
     c90:	1f 4f       	sbci	r17, 0xFF	; 255
     c92:	11 96       	adiw	r26, 0x01	; 1
}

void Display::draw_number16x16(uint8_t number, uint8_t x, uint8_t y){
	uint16_t symbol;
	if(number>=0 && number<10){
		for(uint8_t i = 0; i < 32;i++){
     c94:	40 32       	cpi	r20, 0x20	; 32
     c96:	51 05       	cpc	r21, r1
     c98:	71 f6       	brne	.-100    	; 0xc36 <_ZN7Display16draw_number16x16Ehhh+0x7a>
					Displayframe[x+(y/8+2)*SSD1306_WIDTH+(i-16)] |= (uint8_t) ((symbol & 0xFF00)>>8);
				}
			}
		}
	}
}
     c9a:	df 91       	pop	r29
     c9c:	cf 91       	pop	r28
     c9e:	1f 91       	pop	r17
     ca0:	0f 91       	pop	r16
     ca2:	ff 90       	pop	r15
     ca4:	ef 90       	pop	r14
     ca6:	08 95       	ret

00000ca8 <_ZN7Display6analogEhhh>:

void Display::analog(uint8_t stunde, uint8_t minute, uint8_t sekunde){
     ca8:	2f 92       	push	r2
     caa:	3f 92       	push	r3
     cac:	4f 92       	push	r4
     cae:	5f 92       	push	r5
     cb0:	6f 92       	push	r6
     cb2:	7f 92       	push	r7
     cb4:	8f 92       	push	r8
     cb6:	9f 92       	push	r9
     cb8:	af 92       	push	r10
     cba:	bf 92       	push	r11
     cbc:	cf 92       	push	r12
     cbe:	df 92       	push	r13
     cc0:	ef 92       	push	r14
     cc2:	ff 92       	push	r15
     cc4:	0f 93       	push	r16
     cc6:	1f 93       	push	r17
     cc8:	cf 93       	push	r28
     cca:	df 93       	push	r29
     ccc:	00 d0       	rcall	.+0      	; 0xcce <_ZN7Display6analogEhhh+0x26>
     cce:	1f 92       	push	r1
     cd0:	cd b7       	in	r28, 0x3d	; 61
     cd2:	de b7       	in	r29, 0x3e	; 62
     cd4:	8c 01       	movw	r16, r24
     cd6:	69 83       	std	Y+1, r22	; 0x01
     cd8:	24 2e       	mov	r2, r20
	uint8_t x=0,y=0;
	float winkel=0;

	//Berechnen des Sekundenzeigers
	for(uint8_t i=0;i<r;i++){
		winkel=(sekunde*6.0)*M_PI/180.0-M_PI/2.0;
     cda:	62 2f       	mov	r22, r18
     cdc:	70 e0       	ldi	r23, 0x00	; 0
     cde:	80 e0       	ldi	r24, 0x00	; 0
     ce0:	90 e0       	ldi	r25, 0x00	; 0
     ce2:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <__floatsisf>
     ce6:	20 e0       	ldi	r18, 0x00	; 0
     ce8:	30 e0       	ldi	r19, 0x00	; 0
     cea:	40 ec       	ldi	r20, 0xC0	; 192
     cec:	50 e4       	ldi	r21, 0x40	; 64
     cee:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <__mulsf3>
     cf2:	2b ed       	ldi	r18, 0xDB	; 219
     cf4:	3f e0       	ldi	r19, 0x0F	; 15
     cf6:	49 e4       	ldi	r20, 0x49	; 73
     cf8:	50 e4       	ldi	r21, 0x40	; 64
     cfa:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <__mulsf3>
     cfe:	20 e0       	ldi	r18, 0x00	; 0
     d00:	30 e0       	ldi	r19, 0x00	; 0
     d02:	44 e3       	ldi	r20, 0x34	; 52
     d04:	53 e4       	ldi	r21, 0x43	; 67
     d06:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <__divsf3>
     d0a:	2b ed       	ldi	r18, 0xDB	; 219
     d0c:	3f e0       	ldi	r19, 0x0F	; 15
     d0e:	49 ec       	ldi	r20, 0xC9	; 201
     d10:	5f e3       	ldi	r21, 0x3F	; 63
     d12:	0e 94 22 14 	call	0x2844	; 0x2844 <__subsf3>
     d16:	6b 01       	movw	r12, r22
     d18:	7c 01       	movw	r14, r24
		x=(uint8_t) i*cos(winkel)+Px;
     d1a:	0e 94 ed 14 	call	0x29da	; 0x29da <cos>
     d1e:	2b 01       	movw	r4, r22
     d20:	3c 01       	movw	r6, r24
		y=(uint8_t) i*sin(winkel)+Py;
     d22:	c7 01       	movw	r24, r14
     d24:	b6 01       	movw	r22, r12
     d26:	0e 94 07 17 	call	0x2e0e	; 0x2e0e <sin>
     d2a:	4b 01       	movw	r8, r22
     d2c:	5c 01       	movw	r10, r24
     d2e:	1b 82       	std	Y+3, r1	; 0x03
     d30:	1a 82       	std	Y+2, r1	; 0x02
	float winkel=0;

	//Berechnen des Sekundenzeigers
	for(uint8_t i=0;i<r;i++){
		winkel=(sekunde*6.0)*M_PI/180.0-M_PI/2.0;
		x=(uint8_t) i*cos(winkel)+Px;
     d32:	2a 81       	ldd	r18, Y+2	; 0x02
     d34:	3b 81       	ldd	r19, Y+3	; 0x03
     d36:	b9 01       	movw	r22, r18
     d38:	88 27       	eor	r24, r24
     d3a:	77 fd       	sbrc	r23, 7
     d3c:	80 95       	com	r24
     d3e:	98 2f       	mov	r25, r24
     d40:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <__floatsisf>
     d44:	6b 01       	movw	r12, r22
     d46:	7c 01       	movw	r14, r24
		y=(uint8_t) i*sin(winkel)+Py;
     d48:	a5 01       	movw	r20, r10
     d4a:	94 01       	movw	r18, r8
     d4c:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <__mulsf3>
     d50:	20 e0       	ldi	r18, 0x00	; 0
     d52:	30 e0       	ldi	r19, 0x00	; 0
     d54:	48 ef       	ldi	r20, 0xF8	; 248
     d56:	51 e4       	ldi	r21, 0x41	; 65
     d58:	0e 94 23 14 	call	0x2846	; 0x2846 <__addsf3>
     d5c:	0e 94 5d 15 	call	0x2aba	; 0x2aba <__fixunssfsi>
     d60:	36 2e       	mov	r3, r22
	float winkel=0;

	//Berechnen des Sekundenzeigers
	for(uint8_t i=0;i<r;i++){
		winkel=(sekunde*6.0)*M_PI/180.0-M_PI/2.0;
		x=(uint8_t) i*cos(winkel)+Px;
     d62:	a3 01       	movw	r20, r6
     d64:	92 01       	movw	r18, r4
     d66:	c7 01       	movw	r24, r14
     d68:	b6 01       	movw	r22, r12
     d6a:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <__mulsf3>
     d6e:	20 e0       	ldi	r18, 0x00	; 0
     d70:	30 e0       	ldi	r19, 0x00	; 0
     d72:	48 ef       	ldi	r20, 0xF8	; 248
     d74:	51 e4       	ldi	r21, 0x41	; 65
     d76:	0e 94 23 14 	call	0x2846	; 0x2846 <__addsf3>
     d7a:	0e 94 5d 15 	call	0x2aba	; 0x2aba <__fixunssfsi>
		y=(uint8_t) i*sin(winkel)+Py;

		drawPixel(x,y,0);
     d7e:	20 e0       	ldi	r18, 0x00	; 0
     d80:	43 2d       	mov	r20, r3
     d82:	c8 01       	movw	r24, r16
     d84:	0e 94 8e 03 	call	0x71c	; 0x71c <_ZN7Display9drawPixelEhhh>
     d88:	8a 81       	ldd	r24, Y+2	; 0x02
     d8a:	9b 81       	ldd	r25, Y+3	; 0x03
     d8c:	01 96       	adiw	r24, 0x01	; 1
     d8e:	9b 83       	std	Y+3, r25	; 0x03
     d90:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t Py=32-1;
	uint8_t x=0,y=0;
	float winkel=0;

	//Berechnen des Sekundenzeigers
	for(uint8_t i=0;i<r;i++){
     d92:	49 97       	sbiw	r24, 0x19	; 25
     d94:	71 f6       	brne	.-100    	; 0xd32 <_ZN7Display6analogEhhh+0x8a>
	}

	r=17;
	//Berechnen des Minutenzeigers
	for(uint8_t i=0;i<r;i++){
		winkel=(minute*6.0)*M_PI/180.0-M_PI/2.0;
     d96:	62 2d       	mov	r22, r2
     d98:	70 e0       	ldi	r23, 0x00	; 0
     d9a:	80 e0       	ldi	r24, 0x00	; 0
     d9c:	90 e0       	ldi	r25, 0x00	; 0
     d9e:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <__floatsisf>
     da2:	20 e0       	ldi	r18, 0x00	; 0
     da4:	30 e0       	ldi	r19, 0x00	; 0
     da6:	40 ec       	ldi	r20, 0xC0	; 192
     da8:	50 e4       	ldi	r21, 0x40	; 64
     daa:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <__mulsf3>
     dae:	2b ed       	ldi	r18, 0xDB	; 219
     db0:	3f e0       	ldi	r19, 0x0F	; 15
     db2:	49 e4       	ldi	r20, 0x49	; 73
     db4:	50 e4       	ldi	r21, 0x40	; 64
     db6:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <__mulsf3>
     dba:	20 e0       	ldi	r18, 0x00	; 0
     dbc:	30 e0       	ldi	r19, 0x00	; 0
     dbe:	44 e3       	ldi	r20, 0x34	; 52
     dc0:	53 e4       	ldi	r21, 0x43	; 67
     dc2:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <__divsf3>
     dc6:	2b ed       	ldi	r18, 0xDB	; 219
     dc8:	3f e0       	ldi	r19, 0x0F	; 15
     dca:	49 ec       	ldi	r20, 0xC9	; 201
     dcc:	5f e3       	ldi	r21, 0x3F	; 63
     dce:	0e 94 22 14 	call	0x2844	; 0x2844 <__subsf3>
     dd2:	6b 01       	movw	r12, r22
     dd4:	7c 01       	movw	r14, r24
		x=(uint8_t) i*cos(winkel)+Px;
     dd6:	0e 94 ed 14 	call	0x29da	; 0x29da <cos>
     dda:	2b 01       	movw	r4, r22
     ddc:	3c 01       	movw	r6, r24
		y=(uint8_t) i*sin(winkel)+Py;
     dde:	c7 01       	movw	r24, r14
     de0:	b6 01       	movw	r22, r12
     de2:	0e 94 07 17 	call	0x2e0e	; 0x2e0e <sin>
     de6:	4b 01       	movw	r8, r22
     de8:	5c 01       	movw	r10, r24
     dea:	1b 82       	std	Y+3, r1	; 0x03
     dec:	1a 82       	std	Y+2, r1	; 0x02

	r=17;
	//Berechnen des Minutenzeigers
	for(uint8_t i=0;i<r;i++){
		winkel=(minute*6.0)*M_PI/180.0-M_PI/2.0;
		x=(uint8_t) i*cos(winkel)+Px;
     dee:	ea 81       	ldd	r30, Y+2	; 0x02
     df0:	fb 81       	ldd	r31, Y+3	; 0x03
     df2:	bf 01       	movw	r22, r30
     df4:	88 27       	eor	r24, r24
     df6:	77 fd       	sbrc	r23, 7
     df8:	80 95       	com	r24
     dfa:	98 2f       	mov	r25, r24
     dfc:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <__floatsisf>
     e00:	6b 01       	movw	r12, r22
     e02:	7c 01       	movw	r14, r24
		y=(uint8_t) i*sin(winkel)+Py;
     e04:	a5 01       	movw	r20, r10
     e06:	94 01       	movw	r18, r8
     e08:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <__mulsf3>
     e0c:	20 e0       	ldi	r18, 0x00	; 0
     e0e:	30 e0       	ldi	r19, 0x00	; 0
     e10:	48 ef       	ldi	r20, 0xF8	; 248
     e12:	51 e4       	ldi	r21, 0x41	; 65
     e14:	0e 94 23 14 	call	0x2846	; 0x2846 <__addsf3>
     e18:	0e 94 5d 15 	call	0x2aba	; 0x2aba <__fixunssfsi>
     e1c:	36 2e       	mov	r3, r22

	r=17;
	//Berechnen des Minutenzeigers
	for(uint8_t i=0;i<r;i++){
		winkel=(minute*6.0)*M_PI/180.0-M_PI/2.0;
		x=(uint8_t) i*cos(winkel)+Px;
     e1e:	a3 01       	movw	r20, r6
     e20:	92 01       	movw	r18, r4
     e22:	c7 01       	movw	r24, r14
     e24:	b6 01       	movw	r22, r12
     e26:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <__mulsf3>
     e2a:	20 e0       	ldi	r18, 0x00	; 0
     e2c:	30 e0       	ldi	r19, 0x00	; 0
     e2e:	48 ef       	ldi	r20, 0xF8	; 248
     e30:	51 e4       	ldi	r21, 0x41	; 65
     e32:	0e 94 23 14 	call	0x2846	; 0x2846 <__addsf3>
     e36:	0e 94 5d 15 	call	0x2aba	; 0x2aba <__fixunssfsi>
		y=(uint8_t) i*sin(winkel)+Py;

		drawPixel(x,y,0);
     e3a:	20 e0       	ldi	r18, 0x00	; 0
     e3c:	43 2d       	mov	r20, r3
     e3e:	c8 01       	movw	r24, r16
     e40:	0e 94 8e 03 	call	0x71c	; 0x71c <_ZN7Display9drawPixelEhhh>
     e44:	2a 81       	ldd	r18, Y+2	; 0x02
     e46:	3b 81       	ldd	r19, Y+3	; 0x03
     e48:	2f 5f       	subi	r18, 0xFF	; 255
     e4a:	3f 4f       	sbci	r19, 0xFF	; 255
     e4c:	3b 83       	std	Y+3, r19	; 0x03
     e4e:	2a 83       	std	Y+2, r18	; 0x02
		drawPixel(x,y,0);
	}

	r=17;
	//Berechnen des Minutenzeigers
	for(uint8_t i=0;i<r;i++){
     e50:	21 31       	cpi	r18, 0x11	; 17
     e52:	31 05       	cpc	r19, r1
     e54:	61 f6       	brne	.-104    	; 0xdee <_ZN7Display6analogEhhh+0x146>
	}

	r=10;
	//Berechnen des Stundenzeigers
	for(uint8_t i=0;i<r;i++){
		winkel=(stunde*30.0)*M_PI/180.0-M_PI/2.0;
     e56:	39 81       	ldd	r19, Y+1	; 0x01
     e58:	63 2f       	mov	r22, r19
     e5a:	70 e0       	ldi	r23, 0x00	; 0
     e5c:	80 e0       	ldi	r24, 0x00	; 0
     e5e:	90 e0       	ldi	r25, 0x00	; 0
     e60:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <__floatsisf>
     e64:	20 e0       	ldi	r18, 0x00	; 0
     e66:	30 e0       	ldi	r19, 0x00	; 0
     e68:	40 ef       	ldi	r20, 0xF0	; 240
     e6a:	51 e4       	ldi	r21, 0x41	; 65
     e6c:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <__mulsf3>
     e70:	2b ed       	ldi	r18, 0xDB	; 219
     e72:	3f e0       	ldi	r19, 0x0F	; 15
     e74:	49 e4       	ldi	r20, 0x49	; 73
     e76:	50 e4       	ldi	r21, 0x40	; 64
     e78:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <__mulsf3>
     e7c:	20 e0       	ldi	r18, 0x00	; 0
     e7e:	30 e0       	ldi	r19, 0x00	; 0
     e80:	44 e3       	ldi	r20, 0x34	; 52
     e82:	53 e4       	ldi	r21, 0x43	; 67
     e84:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <__divsf3>
     e88:	2b ed       	ldi	r18, 0xDB	; 219
     e8a:	3f e0       	ldi	r19, 0x0F	; 15
     e8c:	49 ec       	ldi	r20, 0xC9	; 201
     e8e:	5f e3       	ldi	r21, 0x3F	; 63
     e90:	0e 94 22 14 	call	0x2844	; 0x2844 <__subsf3>
     e94:	6b 01       	movw	r12, r22
     e96:	7c 01       	movw	r14, r24
		x= (uint8_t) i*cos(winkel) +Px;
     e98:	0e 94 ed 14 	call	0x29da	; 0x29da <cos>
     e9c:	2b 01       	movw	r4, r22
     e9e:	3c 01       	movw	r6, r24
		y= (uint8_t) i*sin(winkel) +Py;
     ea0:	c7 01       	movw	r24, r14
     ea2:	b6 01       	movw	r22, r12
     ea4:	0e 94 07 17 	call	0x2e0e	; 0x2e0e <sin>
     ea8:	4b 01       	movw	r8, r22
     eaa:	5c 01       	movw	r10, r24
     eac:	1b 82       	std	Y+3, r1	; 0x03
     eae:	1a 82       	std	Y+2, r1	; 0x02

	r=10;
	//Berechnen des Stundenzeigers
	for(uint8_t i=0;i<r;i++){
		winkel=(stunde*30.0)*M_PI/180.0-M_PI/2.0;
		x= (uint8_t) i*cos(winkel) +Px;
     eb0:	ea 81       	ldd	r30, Y+2	; 0x02
     eb2:	fb 81       	ldd	r31, Y+3	; 0x03
     eb4:	bf 01       	movw	r22, r30
     eb6:	88 27       	eor	r24, r24
     eb8:	77 fd       	sbrc	r23, 7
     eba:	80 95       	com	r24
     ebc:	98 2f       	mov	r25, r24
     ebe:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <__floatsisf>
     ec2:	6b 01       	movw	r12, r22
     ec4:	7c 01       	movw	r14, r24
		y= (uint8_t) i*sin(winkel) +Py;
     ec6:	a5 01       	movw	r20, r10
     ec8:	94 01       	movw	r18, r8
     eca:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <__mulsf3>
     ece:	20 e0       	ldi	r18, 0x00	; 0
     ed0:	30 e0       	ldi	r19, 0x00	; 0
     ed2:	48 ef       	ldi	r20, 0xF8	; 248
     ed4:	51 e4       	ldi	r21, 0x41	; 65
     ed6:	0e 94 23 14 	call	0x2846	; 0x2846 <__addsf3>
     eda:	0e 94 5d 15 	call	0x2aba	; 0x2aba <__fixunssfsi>
     ede:	36 2e       	mov	r3, r22

	r=10;
	//Berechnen des Stundenzeigers
	for(uint8_t i=0;i<r;i++){
		winkel=(stunde*30.0)*M_PI/180.0-M_PI/2.0;
		x= (uint8_t) i*cos(winkel) +Px;
     ee0:	a3 01       	movw	r20, r6
     ee2:	92 01       	movw	r18, r4
     ee4:	c7 01       	movw	r24, r14
     ee6:	b6 01       	movw	r22, r12
     ee8:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <__mulsf3>
     eec:	20 e0       	ldi	r18, 0x00	; 0
     eee:	30 e0       	ldi	r19, 0x00	; 0
     ef0:	48 ef       	ldi	r20, 0xF8	; 248
     ef2:	51 e4       	ldi	r21, 0x41	; 65
     ef4:	0e 94 23 14 	call	0x2846	; 0x2846 <__addsf3>
     ef8:	0e 94 5d 15 	call	0x2aba	; 0x2aba <__fixunssfsi>
		y= (uint8_t) i*sin(winkel) +Py;

		drawPixel(x,y,0);
     efc:	20 e0       	ldi	r18, 0x00	; 0
     efe:	43 2d       	mov	r20, r3
     f00:	c8 01       	movw	r24, r16
     f02:	0e 94 8e 03 	call	0x71c	; 0x71c <_ZN7Display9drawPixelEhhh>
     f06:	2a 81       	ldd	r18, Y+2	; 0x02
     f08:	3b 81       	ldd	r19, Y+3	; 0x03
     f0a:	2f 5f       	subi	r18, 0xFF	; 255
     f0c:	3f 4f       	sbci	r19, 0xFF	; 255
     f0e:	3b 83       	std	Y+3, r19	; 0x03
     f10:	2a 83       	std	Y+2, r18	; 0x02
		drawPixel(x,y,0);
	}

	r=10;
	//Berechnen des Stundenzeigers
	for(uint8_t i=0;i<r;i++){
     f12:	2a 30       	cpi	r18, 0x0A	; 10
     f14:	31 05       	cpc	r19, r1
     f16:	61 f6       	brne	.-104    	; 0xeb0 <_ZN7Display6analogEhhh+0x208>

		drawPixel(x,y,0);
	}

	//Anzeige der Zahlen
	draw_ASCI('1',32-charsize,0);
     f18:	20 e0       	ldi	r18, 0x00	; 0
     f1a:	4a e1       	ldi	r20, 0x1A	; 26
     f1c:	61 e3       	ldi	r22, 0x31	; 49
     f1e:	c8 01       	movw	r24, r16
     f20:	0e 94 90 05 	call	0xb20	; 0xb20 <_ZN7Display9draw_ASCIEhhh>
	draw_ASCI('2',32,0);
     f24:	20 e0       	ldi	r18, 0x00	; 0
     f26:	40 e2       	ldi	r20, 0x20	; 32
     f28:	62 e3       	ldi	r22, 0x32	; 50
     f2a:	c8 01       	movw	r24, r16
     f2c:	0e 94 90 05 	call	0xb20	; 0xb20 <_ZN7Display9draw_ASCIEhhh>
	draw_ASCI('3',64-charsize,4*charhighte-charhighte/2);
     f30:	2c e1       	ldi	r18, 0x1C	; 28
     f32:	4a e3       	ldi	r20, 0x3A	; 58
     f34:	63 e3       	ldi	r22, 0x33	; 51
     f36:	c8 01       	movw	r24, r16
     f38:	0e 94 90 05 	call	0xb20	; 0xb20 <_ZN7Display9draw_ASCIEhhh>
	draw_ASCI('6',32-charsize/2,7*charhighte);
     f3c:	28 e3       	ldi	r18, 0x38	; 56
     f3e:	4d e1       	ldi	r20, 0x1D	; 29
     f40:	66 e3       	ldi	r22, 0x36	; 54
     f42:	c8 01       	movw	r24, r16
     f44:	0e 94 90 05 	call	0xb20	; 0xb20 <_ZN7Display9draw_ASCIEhhh>
	draw_ASCI('9',0,4*charhighte-charhighte/2);
     f48:	2c e1       	ldi	r18, 0x1C	; 28
     f4a:	40 e0       	ldi	r20, 0x00	; 0
     f4c:	69 e3       	ldi	r22, 0x39	; 57
     f4e:	c8 01       	movw	r24, r16
     f50:	0e 94 90 05 	call	0xb20	; 0xb20 <_ZN7Display9draw_ASCIEhhh>

	//anzeige des Rings fuer die Restlichen Stunden Zahlen
	//1
	drawPixel(26*cos((30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
     f54:	20 e0       	ldi	r18, 0x00	; 0
     f56:	48 e0       	ldi	r20, 0x08	; 8
     f58:	6c e2       	ldi	r22, 0x2C	; 44
     f5a:	c8 01       	movw	r24, r16
     f5c:	0e 94 8e 03 	call	0x71c	; 0x71c <_ZN7Display9drawPixelEhhh>
	//2
	drawPixel(26*cos((2*30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((2*30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
     f60:	20 e0       	ldi	r18, 0x00	; 0
     f62:	42 e1       	ldi	r20, 0x12	; 18
     f64:	65 e3       	ldi	r22, 0x35	; 53
     f66:	c8 01       	movw	r24, r16
     f68:	0e 94 8e 03 	call	0x71c	; 0x71c <_ZN7Display9drawPixelEhhh>
	//4
	drawPixel(26*cos((4*30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((4*30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
     f6c:	20 e0       	ldi	r18, 0x00	; 0
     f6e:	4c e2       	ldi	r20, 0x2C	; 44
     f70:	65 e3       	ldi	r22, 0x35	; 53
     f72:	c8 01       	movw	r24, r16
     f74:	0e 94 8e 03 	call	0x71c	; 0x71c <_ZN7Display9drawPixelEhhh>
	//5
	drawPixel(26*cos((5*30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((5*30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
     f78:	20 e0       	ldi	r18, 0x00	; 0
     f7a:	45 e3       	ldi	r20, 0x35	; 53
     f7c:	6b e2       	ldi	r22, 0x2B	; 43
     f7e:	c8 01       	movw	r24, r16
     f80:	0e 94 8e 03 	call	0x71c	; 0x71c <_ZN7Display9drawPixelEhhh>
	//7
	drawPixel(26*cos((7*30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((7*30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
     f84:	20 e0       	ldi	r18, 0x00	; 0
     f86:	45 e3       	ldi	r20, 0x35	; 53
     f88:	61 e1       	ldi	r22, 0x11	; 17
     f8a:	c8 01       	movw	r24, r16
     f8c:	0e 94 8e 03 	call	0x71c	; 0x71c <_ZN7Display9drawPixelEhhh>
	//8
	drawPixel(26*cos((8*30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((8*30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
     f90:	20 e0       	ldi	r18, 0x00	; 0
     f92:	4c e2       	ldi	r20, 0x2C	; 44
     f94:	68 e0       	ldi	r22, 0x08	; 8
     f96:	c8 01       	movw	r24, r16
     f98:	0e 94 8e 03 	call	0x71c	; 0x71c <_ZN7Display9drawPixelEhhh>
	//10
	drawPixel(26*cos((10*30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((10*30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
     f9c:	20 e0       	ldi	r18, 0x00	; 0
     f9e:	41 e1       	ldi	r20, 0x11	; 17
     fa0:	68 e0       	ldi	r22, 0x08	; 8
     fa2:	c8 01       	movw	r24, r16
     fa4:	0e 94 8e 03 	call	0x71c	; 0x71c <_ZN7Display9drawPixelEhhh>
	//11
	drawPixel(26*cos((11*30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((11*30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
     fa8:	20 e0       	ldi	r18, 0x00	; 0
     faa:	48 e0       	ldi	r20, 0x08	; 8
     fac:	62 e1       	ldi	r22, 0x12	; 18
     fae:	c8 01       	movw	r24, r16
     fb0:	0e 94 8e 03 	call	0x71c	; 0x71c <_ZN7Display9drawPixelEhhh>
}
     fb4:	0f 90       	pop	r0
     fb6:	0f 90       	pop	r0
     fb8:	0f 90       	pop	r0
     fba:	df 91       	pop	r29
     fbc:	cf 91       	pop	r28
     fbe:	1f 91       	pop	r17
     fc0:	0f 91       	pop	r16
     fc2:	ff 90       	pop	r15
     fc4:	ef 90       	pop	r14
     fc6:	df 90       	pop	r13
     fc8:	cf 90       	pop	r12
     fca:	bf 90       	pop	r11
     fcc:	af 90       	pop	r10
     fce:	9f 90       	pop	r9
     fd0:	8f 90       	pop	r8
     fd2:	7f 90       	pop	r7
     fd4:	6f 90       	pop	r6
     fd6:	5f 90       	pop	r5
     fd8:	4f 90       	pop	r4
     fda:	3f 90       	pop	r3
     fdc:	2f 90       	pop	r2
     fde:	08 95       	ret

00000fe0 <_Z8ADC_Readh>:
#ifndef ADC_H_
#define ADC_H_

uint16_t ADC_Read( uint8_t channel )
{
	ADMUX = (ADMUX & ~(0x1F)) | (channel & 0x1F);
     fe0:	ec e7       	ldi	r30, 0x7C	; 124
     fe2:	f0 e0       	ldi	r31, 0x00	; 0
     fe4:	90 81       	ld	r25, Z
     fe6:	8f 71       	andi	r24, 0x1F	; 31
     fe8:	90 7e       	andi	r25, 0xE0	; 224
     fea:	98 2b       	or	r25, r24
     fec:	90 83       	st	Z, r25
	ADCSRA |= (1<<ADSC);
     fee:	ea e7       	ldi	r30, 0x7A	; 122
     ff0:	f0 e0       	ldi	r31, 0x00	; 0
     ff2:	80 81       	ld	r24, Z
     ff4:	80 64       	ori	r24, 0x40	; 64
     ff6:	80 83       	st	Z, r24
	while (ADCSRA & (1<<ADSC) ) {
     ff8:	80 81       	ld	r24, Z
     ffa:	86 fd       	sbrc	r24, 6
     ffc:	fd cf       	rjmp	.-6      	; 0xff8 <_Z8ADC_Readh+0x18>
	}
	return ADCW;
     ffe:	80 91 78 00 	lds	r24, 0x0078
    1002:	90 91 79 00 	lds	r25, 0x0079
}
    1006:	08 95       	ret

00001008 <_Z14Batteriestatusv>:
	return (uint16_t)( sum / nsamples );
}

double batterie;
int8_t Batteriestatus(){
	uint16_t ADCwert=ADC_Read(0);
    1008:	80 e0       	ldi	r24, 0x00	; 0
    100a:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <_Z8ADC_Readh>
	batterie = (ADCwert/1023.0)*3.24*SPANNUNGSTEILER;
    100e:	bc 01       	movw	r22, r24
    1010:	80 e0       	ldi	r24, 0x00	; 0
    1012:	90 e0       	ldi	r25, 0x00	; 0
    1014:	0e 94 89 15 	call	0x2b12	; 0x2b12 <__floatunsisf>
    1018:	20 e0       	ldi	r18, 0x00	; 0
    101a:	30 ec       	ldi	r19, 0xC0	; 192
    101c:	4f e7       	ldi	r20, 0x7F	; 127
    101e:	54 e4       	ldi	r21, 0x44	; 68
    1020:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <__divsf3>
    1024:	29 e2       	ldi	r18, 0x29	; 41
    1026:	3c e5       	ldi	r19, 0x5C	; 92
    1028:	4f e4       	ldi	r20, 0x4F	; 79
    102a:	50 e4       	ldi	r21, 0x40	; 64
    102c:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <__mulsf3>
    1030:	2b e7       	ldi	r18, 0x7B	; 123
    1032:	34 e1       	ldi	r19, 0x14	; 20
    1034:	4e ef       	ldi	r20, 0xFE	; 254
    1036:	5f e3       	ldi	r21, 0x3F	; 63
    1038:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <__mulsf3>
    103c:	60 93 36 02 	sts	0x0236, r22
    1040:	70 93 37 02 	sts	0x0237, r23
    1044:	80 93 38 02 	sts	0x0238, r24
    1048:	90 93 39 02 	sts	0x0239, r25
	return ((batterie-3.0)/(4.2-3.0)*100);
    104c:	20 e0       	ldi	r18, 0x00	; 0
    104e:	30 e0       	ldi	r19, 0x00	; 0
    1050:	40 e4       	ldi	r20, 0x40	; 64
    1052:	50 e4       	ldi	r21, 0x40	; 64
    1054:	0e 94 22 14 	call	0x2844	; 0x2844 <__subsf3>
    1058:	28 e9       	ldi	r18, 0x98	; 152
    105a:	39 e9       	ldi	r19, 0x99	; 153
    105c:	49 e9       	ldi	r20, 0x99	; 153
    105e:	5f e3       	ldi	r21, 0x3F	; 63
    1060:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <__divsf3>
    1064:	20 e0       	ldi	r18, 0x00	; 0
    1066:	30 e0       	ldi	r19, 0x00	; 0
    1068:	48 ec       	ldi	r20, 0xC8	; 200
    106a:	52 e4       	ldi	r21, 0x42	; 66
    106c:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <__mulsf3>
    1070:	0e 94 58 15 	call	0x2ab0	; 0x2ab0 <__fixsfsi>
    1074:	86 2f       	mov	r24, r22
}
    1076:	08 95       	ret

00001078 <__vector_9>:

uint16_t anzeige;	//Flagregister fuer die Anziegenschaltung
//#include "Taschenrechner.h"


ISR(TIMER2_OVF_vect){	//Vektor fuer die RTC
    1078:	1f 92       	push	r1
    107a:	0f 92       	push	r0
    107c:	0f b6       	in	r0, 0x3f	; 63
    107e:	0f 92       	push	r0
    1080:	11 24       	eor	r1, r1
    1082:	8f 93       	push	r24
    1084:	ef 93       	push	r30
    1086:	ff 93       	push	r31
	TCNT2=TIMER2RTCTIME;
    1088:	80 e7       	ldi	r24, 0x70	; 112
    108a:	80 93 b2 00 	sts	0x00B2, r24
	rtc.HundSekunden++;
    108e:	e7 e4       	ldi	r30, 0x47	; 71
    1090:	f6 e0       	ldi	r31, 0x06	; 6
    1092:	80 81       	ld	r24, Z
    1094:	8f 5f       	subi	r24, 0xFF	; 255
    1096:	80 83       	st	Z, r24
	rtc.interupts|= (1<<hundinterupt);
    1098:	eb e4       	ldi	r30, 0x4B	; 75
    109a:	f6 e0       	ldi	r31, 0x06	; 6
    109c:	80 81       	ld	r24, Z
    109e:	81 60       	ori	r24, 0x01	; 1
    10a0:	80 83       	st	Z, r24
}
    10a2:	ff 91       	pop	r31
    10a4:	ef 91       	pop	r30
    10a6:	8f 91       	pop	r24
    10a8:	0f 90       	pop	r0
    10aa:	0f be       	out	0x3f, r0	; 63
    10ac:	0f 90       	pop	r0
    10ae:	1f 90       	pop	r1
    10b0:	18 95       	reti

000010b2 <_Z14willkommenpagev>:
#ifndef SEITEN_H_
#define SEITEN_H_

//Diese Funktionen schreiben nur in den Framebuffer und das Schreiben passiert in der Main ueber einen Interupt

void willkommenpage(){
    10b2:	cf 92       	push	r12
    10b4:	df 92       	push	r13
    10b6:	ef 92       	push	r14
    10b8:	ff 92       	push	r15
    10ba:	0f 93       	push	r16
    10bc:	1f 93       	push	r17
    10be:	cf 93       	push	r28
    10c0:	df 93       	push	r29
    10c2:	cd b7       	in	r28, 0x3d	; 61
    10c4:	de b7       	in	r29, 0x3e	; 62
    10c6:	64 97       	sbiw	r28, 0x14	; 20
    10c8:	0f b6       	in	r0, 0x3f	; 63
    10ca:	f8 94       	cli
    10cc:	de bf       	out	0x3e, r29	; 62
    10ce:	0f be       	out	0x3f, r0	; 63
    10d0:	cd bf       	out	0x3d, r28	; 61
	char buffer[20];
	uint8_t buffersize;
	oled.clearFrame();
    10d2:	8b e3       	ldi	r24, 0x3B	; 59
    10d4:	92 e0       	ldi	r25, 0x02	; 2
    10d6:	0e 94 af 02 	call	0x55e	; 0x55e <_ZN7Display10clearFrameEv>
	buffersize=sprintf(buffer,"Fahradcomputer");
    10da:	8f e0       	ldi	r24, 0x0F	; 15
    10dc:	e0 e0       	ldi	r30, 0x00	; 0
    10de:	f1 e0       	ldi	r31, 0x01	; 1
    10e0:	8e 01       	movw	r16, r28
    10e2:	0f 5f       	subi	r16, 0xFF	; 255
    10e4:	1f 4f       	sbci	r17, 0xFF	; 255
    10e6:	d8 01       	movw	r26, r16
    10e8:	01 90       	ld	r0, Z+
    10ea:	0d 92       	st	X+, r0
    10ec:	8a 95       	dec	r24
    10ee:	e1 f7       	brne	.-8      	; 0x10e8 <_Z14willkommenpagev+0x36>
    10f0:	c0 2e       	mov	r12, r16
    10f2:	d1 2e       	mov	r13, r17
    10f4:	78 01       	movw	r14, r16
    10f6:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0; i < buffersize;i++){
		oled.draw_ASCI(buffer[i],i*charsize,0);
    10f8:	f7 01       	movw	r30, r14
    10fa:	61 91       	ld	r22, Z+
    10fc:	7f 01       	movw	r14, r30
    10fe:	20 e0       	ldi	r18, 0x00	; 0
    1100:	41 2f       	mov	r20, r17
    1102:	8b e3       	ldi	r24, 0x3B	; 59
    1104:	92 e0       	ldi	r25, 0x02	; 2
    1106:	0e 94 90 05 	call	0xb20	; 0xb20 <_ZN7Display9draw_ASCIEhhh>
    110a:	1a 5f       	subi	r17, 0xFA	; 250
void willkommenpage(){
	char buffer[20];
	uint8_t buffersize;
	oled.clearFrame();
	buffersize=sprintf(buffer,"Fahradcomputer");
	for(uint8_t i=0; i < buffersize;i++){
    110c:	14 35       	cpi	r17, 0x54	; 84
    110e:	a1 f7       	brne	.-24     	; 0x10f8 <_Z14willkommenpagev+0x46>
		oled.draw_ASCI(buffer[i],i*charsize,0);
	}
	buffersize=sprintf(buffer,"--------------");
    1110:	8f e0       	ldi	r24, 0x0F	; 15
    1112:	ef e0       	ldi	r30, 0x0F	; 15
    1114:	f1 e0       	ldi	r31, 0x01	; 1
    1116:	de 01       	movw	r26, r28
    1118:	11 96       	adiw	r26, 0x01	; 1
    111a:	01 90       	ld	r0, Z+
    111c:	0d 92       	st	X+, r0
    111e:	8a 95       	dec	r24
    1120:	e1 f7       	brne	.-8      	; 0x111a <_Z14willkommenpagev+0x68>
    1122:	ec 2c       	mov	r14, r12
    1124:	fd 2c       	mov	r15, r13
    1126:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0; i < buffersize;i++){
		oled.draw_ASCI(buffer[i],i*charsize,8);
    1128:	f7 01       	movw	r30, r14
    112a:	61 91       	ld	r22, Z+
    112c:	7f 01       	movw	r14, r30
    112e:	28 e0       	ldi	r18, 0x08	; 8
    1130:	41 2f       	mov	r20, r17
    1132:	8b e3       	ldi	r24, 0x3B	; 59
    1134:	92 e0       	ldi	r25, 0x02	; 2
    1136:	0e 94 90 05 	call	0xb20	; 0xb20 <_ZN7Display9draw_ASCIEhhh>
    113a:	1a 5f       	subi	r17, 0xFA	; 250
	buffersize=sprintf(buffer,"Fahradcomputer");
	for(uint8_t i=0; i < buffersize;i++){
		oled.draw_ASCI(buffer[i],i*charsize,0);
	}
	buffersize=sprintf(buffer,"--------------");
	for(uint8_t i=0; i < buffersize;i++){
    113c:	14 35       	cpi	r17, 0x54	; 84
    113e:	a1 f7       	brne	.-24     	; 0x1128 <_Z14willkommenpagev+0x76>
		oled.draw_ASCI(buffer[i],i*charsize,8);
	}
	buffersize=sprintf(buffer,"Version: %.2f",VERSIONSNUMMER);
    1140:	8f e3       	ldi	r24, 0x3F	; 63
    1142:	8f 93       	push	r24
    1144:	8c e8       	ldi	r24, 0x8C	; 140
    1146:	8f 93       	push	r24
    1148:	8c ec       	ldi	r24, 0xCC	; 204
    114a:	8f 93       	push	r24
    114c:	8d ec       	ldi	r24, 0xCD	; 205
    114e:	8f 93       	push	r24
    1150:	8e e1       	ldi	r24, 0x1E	; 30
    1152:	91 e0       	ldi	r25, 0x01	; 1
    1154:	9f 93       	push	r25
    1156:	8f 93       	push	r24
    1158:	ce 01       	movw	r24, r28
    115a:	01 96       	adiw	r24, 0x01	; 1
    115c:	9f 93       	push	r25
    115e:	8f 93       	push	r24
    1160:	0e 94 27 1c 	call	0x384e	; 0x384e <sprintf>
	for(uint8_t i=0; i < buffersize;i++){
    1164:	0f b6       	in	r0, 0x3f	; 63
    1166:	f8 94       	cli
    1168:	de bf       	out	0x3e, r29	; 62
    116a:	0f be       	out	0x3f, r0	; 63
    116c:	cd bf       	out	0x3d, r28	; 61
    116e:	88 23       	and	r24, r24
    1170:	d1 f0       	breq	.+52     	; 0x11a6 <_Z14willkommenpagev+0xf4>
    1172:	81 50       	subi	r24, 0x01	; 1
    1174:	68 94       	set
    1176:	ee 24       	eor	r14, r14
    1178:	e1 f8       	bld	r14, 1
    117a:	f1 2c       	mov	r15, r1
    117c:	ec 0e       	add	r14, r28
    117e:	fd 1e       	adc	r15, r29
    1180:	e8 0e       	add	r14, r24
    1182:	f1 1c       	adc	r15, r1
    1184:	0c 2d       	mov	r16, r12
    1186:	1d 2d       	mov	r17, r13
    1188:	d1 2c       	mov	r13, r1
		oled.draw_ASCI(buffer[i],i*charsize,32);
    118a:	f8 01       	movw	r30, r16
    118c:	61 91       	ld	r22, Z+
    118e:	8f 01       	movw	r16, r30
    1190:	20 e2       	ldi	r18, 0x20	; 32
    1192:	4d 2d       	mov	r20, r13
    1194:	8b e3       	ldi	r24, 0x3B	; 59
    1196:	92 e0       	ldi	r25, 0x02	; 2
    1198:	0e 94 90 05 	call	0xb20	; 0xb20 <_ZN7Display9draw_ASCIEhhh>
    119c:	f6 e0       	ldi	r31, 0x06	; 6
    119e:	df 0e       	add	r13, r31
	buffersize=sprintf(buffer,"--------------");
	for(uint8_t i=0; i < buffersize;i++){
		oled.draw_ASCI(buffer[i],i*charsize,8);
	}
	buffersize=sprintf(buffer,"Version: %.2f",VERSIONSNUMMER);
	for(uint8_t i=0; i < buffersize;i++){
    11a0:	0e 15       	cp	r16, r14
    11a2:	1f 05       	cpc	r17, r15
    11a4:	91 f7       	brne	.-28     	; 0x118a <_Z14willkommenpagev+0xd8>
		oled.draw_ASCI(buffer[i],i*charsize,32);

	}
	oled.sendFrame();
    11a6:	8b e3       	ldi	r24, 0x3B	; 59
    11a8:	92 e0       	ldi	r25, 0x02	; 2
    11aa:	0e 94 4b 03 	call	0x696	; 0x696 <_ZN7Display9sendFrameEv>
	oled.clearFrame();
    11ae:	8b e3       	ldi	r24, 0x3B	; 59
    11b0:	92 e0       	ldi	r25, 0x02	; 2
    11b2:	0e 94 af 02 	call	0x55e	; 0x55e <_ZN7Display10clearFrameEv>
    11b6:	84 e1       	ldi	r24, 0x14	; 20
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    11b8:	ef ef       	ldi	r30, 0xFF	; 255
    11ba:	f3 eb       	ldi	r31, 0xB3	; 179
    11bc:	31 97       	sbiw	r30, 0x01	; 1
    11be:	f1 f7       	brne	.-4      	; 0x11bc <_Z14willkommenpagev+0x10a>
    11c0:	00 c0       	rjmp	.+0      	; 0x11c2 <_Z14willkommenpagev+0x110>
    11c2:	00 00       	nop
    11c4:	ef ef       	ldi	r30, 0xFF	; 255
    11c6:	f3 eb       	ldi	r31, 0xB3	; 179
    11c8:	31 97       	sbiw	r30, 0x01	; 1
    11ca:	f1 f7       	brne	.-4      	; 0x11c8 <_Z14willkommenpagev+0x116>
    11cc:	00 c0       	rjmp	.+0      	; 0x11ce <_Z14willkommenpagev+0x11c>
    11ce:	00 00       	nop
    11d0:	81 50       	subi	r24, 0x01	; 1
	for (uint8_t i=0;i<20;i++)
    11d2:	91 f7       	brne	.-28     	; 0x11b8 <_Z14willkommenpagev+0x106>
	{
		_delay_ms(50);
		_delay_ms(50);
	}
}
    11d4:	64 96       	adiw	r28, 0x14	; 20
    11d6:	0f b6       	in	r0, 0x3f	; 63
    11d8:	f8 94       	cli
    11da:	de bf       	out	0x3e, r29	; 62
    11dc:	0f be       	out	0x3f, r0	; 63
    11de:	cd bf       	out	0x3d, r28	; 61
    11e0:	df 91       	pop	r29
    11e2:	cf 91       	pop	r28
    11e4:	1f 91       	pop	r17
    11e6:	0f 91       	pop	r16
    11e8:	ff 90       	pop	r15
    11ea:	ef 90       	pop	r14
    11ec:	df 90       	pop	r13
    11ee:	cf 90       	pop	r12
    11f0:	08 95       	ret

000011f2 <_Z6headerh>:

void header(uint8_t page){
    11f2:	ef 92       	push	r14
    11f4:	ff 92       	push	r15
    11f6:	0f 93       	push	r16
    11f8:	1f 93       	push	r17
    11fa:	cf 93       	push	r28
    11fc:	df 93       	push	r29
    11fe:	cd b7       	in	r28, 0x3d	; 61
    1200:	de b7       	in	r29, 0x3e	; 62
    1202:	64 97       	sbiw	r28, 0x14	; 20
    1204:	0f b6       	in	r0, 0x3f	; 63
    1206:	f8 94       	cli
    1208:	de bf       	out	0x3e, r29	; 62
    120a:	0f be       	out	0x3f, r0	; 63
    120c:	cd bf       	out	0x3d, r28	; 61
	char buffer[20];
	uint8_t buffersize=0;;
	switch (page) {
    120e:	81 11       	cpse	r24, r1
    1210:	4d c0       	rjmp	.+154    	; 0x12ac <_Z6headerh+0xba>
    1212:	0f 2e       	mov	r0, r31
    1214:	fc e3       	ldi	r31, 0x3C	; 60
    1216:	ef 2e       	mov	r14, r31
    1218:	f6 e0       	ldi	r31, 0x06	; 6
    121a:	ff 2e       	mov	r15, r31
    121c:	f0 2d       	mov	r31, r0
    121e:	10 e0       	ldi	r17, 0x00	; 0
		case 0:	//standard Header fuer fast alle Pages
			for(uint8_t i=0;i<8;i++){
				oled.draw_ASCI(rtc.msg_uhr[i],i*charsize,0);
    1220:	f7 01       	movw	r30, r14
    1222:	61 91       	ld	r22, Z+
    1224:	7f 01       	movw	r14, r30
    1226:	20 e0       	ldi	r18, 0x00	; 0
    1228:	41 2f       	mov	r20, r17
    122a:	8b e3       	ldi	r24, 0x3B	; 59
    122c:	92 e0       	ldi	r25, 0x02	; 2
    122e:	0e 94 90 05 	call	0xb20	; 0xb20 <_ZN7Display9draw_ASCIEhhh>
    1232:	1a 5f       	subi	r17, 0xFA	; 250
void header(uint8_t page){
	char buffer[20];
	uint8_t buffersize=0;;
	switch (page) {
		case 0:	//standard Header fuer fast alle Pages
			for(uint8_t i=0;i<8;i++){
    1234:	10 33       	cpi	r17, 0x30	; 48
    1236:	a1 f7       	brne	.-24     	; 0x1220 <_Z6headerh+0x2e>
				oled.draw_ASCI(rtc.msg_uhr[i],i*charsize,0);
			}
			buffersize=sprintf(buffer,"Bat: %i%%",Batteriestatus());
    1238:	0e 94 04 08 	call	0x1008	; 0x1008 <_Z14Batteriestatusv>
    123c:	28 2f       	mov	r18, r24
    123e:	33 27       	eor	r19, r19
    1240:	27 fd       	sbrc	r18, 7
    1242:	30 95       	com	r19
    1244:	3f 93       	push	r19
    1246:	8f 93       	push	r24
    1248:	8c e2       	ldi	r24, 0x2C	; 44
    124a:	91 e0       	ldi	r25, 0x01	; 1
    124c:	9f 93       	push	r25
    124e:	8f 93       	push	r24
    1250:	ce 01       	movw	r24, r28
    1252:	01 96       	adiw	r24, 0x01	; 1
    1254:	9f 93       	push	r25
    1256:	8f 93       	push	r24
    1258:	0e 94 27 1c 	call	0x384e	; 0x384e <sprintf>
			for(uint8_t i=((SSD1306_WIDTH/charsize)-buffersize);i<(SSD1306_WIDTH/charsize);i++){
    125c:	25 e1       	ldi	r18, 0x15	; 21
    125e:	f2 2e       	mov	r15, r18
    1260:	f8 1a       	sub	r15, r24
    1262:	0f 90       	pop	r0
    1264:	0f 90       	pop	r0
    1266:	0f 90       	pop	r0
    1268:	0f 90       	pop	r0
    126a:	0f 90       	pop	r0
    126c:	0f 90       	pop	r0
    126e:	f4 e1       	ldi	r31, 0x14	; 20
    1270:	ff 15       	cp	r31, r15
    1272:	e0 f0       	brcs	.+56     	; 0x12ac <_Z6headerh+0xba>
    1274:	ef 2c       	mov	r14, r15
    1276:	ee 0c       	add	r14, r14
    1278:	ef 0c       	add	r14, r15
    127a:	ee 0c       	add	r14, r14
				oled.draw_ASCI(buffer[i-((SSD1306_WIDTH/charsize)-buffersize)],i*charsize,0);
    127c:	8c 01       	movw	r16, r24
    127e:	11 27       	eor	r17, r17
    1280:	e1 e0       	ldi	r30, 0x01	; 1
    1282:	f0 e0       	ldi	r31, 0x00	; 0
    1284:	ec 0f       	add	r30, r28
    1286:	fd 1f       	adc	r31, r29
    1288:	ef 0d       	add	r30, r15
    128a:	f1 1d       	adc	r31, r1
    128c:	e0 0f       	add	r30, r16
    128e:	f1 1f       	adc	r31, r17
    1290:	75 97       	sbiw	r30, 0x15	; 21
    1292:	20 e0       	ldi	r18, 0x00	; 0
    1294:	4e 2d       	mov	r20, r14
    1296:	60 81       	ld	r22, Z
    1298:	8b e3       	ldi	r24, 0x3B	; 59
    129a:	92 e0       	ldi	r25, 0x02	; 2
    129c:	0e 94 90 05 	call	0xb20	; 0xb20 <_ZN7Display9draw_ASCIEhhh>
		case 0:	//standard Header fuer fast alle Pages
			for(uint8_t i=0;i<8;i++){
				oled.draw_ASCI(rtc.msg_uhr[i],i*charsize,0);
			}
			buffersize=sprintf(buffer,"Bat: %i%%",Batteriestatus());
			for(uint8_t i=((SSD1306_WIDTH/charsize)-buffersize);i<(SSD1306_WIDTH/charsize);i++){
    12a0:	f3 94       	inc	r15
    12a2:	26 e0       	ldi	r18, 0x06	; 6
    12a4:	e2 0e       	add	r14, r18
    12a6:	85 e1       	ldi	r24, 0x15	; 21
    12a8:	f8 12       	cpse	r15, r24
    12aa:	ea cf       	rjmp	.-44     	; 0x1280 <_Z6headerh+0x8e>
			}
			break;
		default:
			break;
	}
}
    12ac:	64 96       	adiw	r28, 0x14	; 20
    12ae:	0f b6       	in	r0, 0x3f	; 63
    12b0:	f8 94       	cli
    12b2:	de bf       	out	0x3e, r29	; 62
    12b4:	0f be       	out	0x3f, r0	; 63
    12b6:	cd bf       	out	0x3d, r28	; 61
    12b8:	df 91       	pop	r29
    12ba:	cf 91       	pop	r28
    12bc:	1f 91       	pop	r17
    12be:	0f 91       	pop	r16
    12c0:	ff 90       	pop	r15
    12c2:	ef 90       	pop	r14
    12c4:	08 95       	ret

000012c6 <_Z16anzeige_richtungf>:

void anzeige_richtung(float winkel){
    12c6:	cf 92       	push	r12
    12c8:	df 92       	push	r13
    12ca:	ef 92       	push	r14
    12cc:	ff 92       	push	r15
    12ce:	6b 01       	movw	r12, r22
    12d0:	7c 01       	movw	r14, r24
	//finden der Ziffer fuer die Anzeige
	if ((winkel<45/2) || (winkel == 360-45/2))
    12d2:	20 e0       	ldi	r18, 0x00	; 0
    12d4:	30 e0       	ldi	r19, 0x00	; 0
    12d6:	40 eb       	ldi	r20, 0xB0	; 176
    12d8:	51 e4       	ldi	r21, 0x41	; 65
    12da:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <__cmpsf2>
    12de:	88 23       	and	r24, r24
    12e0:	54 f0       	brlt	.+20     	; 0x12f6 <_Z16anzeige_richtungf+0x30>
    12e2:	20 e0       	ldi	r18, 0x00	; 0
    12e4:	30 e0       	ldi	r19, 0x00	; 0
    12e6:	49 ea       	ldi	r20, 0xA9	; 169
    12e8:	53 e4       	ldi	r21, 0x43	; 67
    12ea:	c7 01       	movw	r24, r14
    12ec:	b6 01       	movw	r22, r12
    12ee:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <__cmpsf2>
    12f2:	81 11       	cpse	r24, r1
    12f4:	08 c0       	rjmp	.+16     	; 0x1306 <_Z16anzeige_richtungf+0x40>
	{
		oled.draw_ASCI('N',80,3.5*charhighte);
    12f6:	2c e1       	ldi	r18, 0x1C	; 28
    12f8:	40 e5       	ldi	r20, 0x50	; 80
    12fa:	6e e4       	ldi	r22, 0x4E	; 78
    12fc:	8b e3       	ldi	r24, 0x3B	; 59
    12fe:	92 e0       	ldi	r25, 0x02	; 2
    1300:	0e 94 90 05 	call	0xb20	; 0xb20 <_ZN7Display9draw_ASCIEhhh>
    1304:	99 c0       	rjmp	.+306    	; 0x1438 <_Z16anzeige_richtungf+0x172>
	}
	else if (winkel<90-45/2)
    1306:	20 e0       	ldi	r18, 0x00	; 0
    1308:	30 e0       	ldi	r19, 0x00	; 0
    130a:	48 e8       	ldi	r20, 0x88	; 136
    130c:	52 e4       	ldi	r21, 0x42	; 66
    130e:	c7 01       	movw	r24, r14
    1310:	b6 01       	movw	r22, r12
    1312:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <__cmpsf2>
    1316:	88 23       	and	r24, r24
    1318:	7c f4       	brge	.+30     	; 0x1338 <_Z16anzeige_richtungf+0x72>
	{
		oled.draw_ASCI('N',80-charsize/2,3.5*charhighte);
    131a:	2c e1       	ldi	r18, 0x1C	; 28
    131c:	4d e4       	ldi	r20, 0x4D	; 77
    131e:	6e e4       	ldi	r22, 0x4E	; 78
    1320:	8b e3       	ldi	r24, 0x3B	; 59
    1322:	92 e0       	ldi	r25, 0x02	; 2
    1324:	0e 94 90 05 	call	0xb20	; 0xb20 <_ZN7Display9draw_ASCIEhhh>
		oled.draw_ASCI('O',80+charsize/2,3.5*charhighte);
    1328:	2c e1       	ldi	r18, 0x1C	; 28
    132a:	43 e5       	ldi	r20, 0x53	; 83
    132c:	6f e4       	ldi	r22, 0x4F	; 79
    132e:	8b e3       	ldi	r24, 0x3B	; 59
    1330:	92 e0       	ldi	r25, 0x02	; 2
    1332:	0e 94 90 05 	call	0xb20	; 0xb20 <_ZN7Display9draw_ASCIEhhh>
    1336:	80 c0       	rjmp	.+256    	; 0x1438 <_Z16anzeige_richtungf+0x172>
	}
	else if (winkel<135-45/2)
    1338:	20 e0       	ldi	r18, 0x00	; 0
    133a:	30 e0       	ldi	r19, 0x00	; 0
    133c:	42 ee       	ldi	r20, 0xE2	; 226
    133e:	52 e4       	ldi	r21, 0x42	; 66
    1340:	c7 01       	movw	r24, r14
    1342:	b6 01       	movw	r22, r12
    1344:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <__cmpsf2>
    1348:	88 23       	and	r24, r24
    134a:	44 f4       	brge	.+16     	; 0x135c <_Z16anzeige_richtungf+0x96>
	{
		oled.draw_ASCI('O',80,3.5*charhighte);
    134c:	2c e1       	ldi	r18, 0x1C	; 28
    134e:	40 e5       	ldi	r20, 0x50	; 80
    1350:	6f e4       	ldi	r22, 0x4F	; 79
    1352:	8b e3       	ldi	r24, 0x3B	; 59
    1354:	92 e0       	ldi	r25, 0x02	; 2
    1356:	0e 94 90 05 	call	0xb20	; 0xb20 <_ZN7Display9draw_ASCIEhhh>
    135a:	6e c0       	rjmp	.+220    	; 0x1438 <_Z16anzeige_richtungf+0x172>
	}
	else if (winkel<180-45/2)
    135c:	20 e0       	ldi	r18, 0x00	; 0
    135e:	30 e0       	ldi	r19, 0x00	; 0
    1360:	4e e1       	ldi	r20, 0x1E	; 30
    1362:	53 e4       	ldi	r21, 0x43	; 67
    1364:	c7 01       	movw	r24, r14
    1366:	b6 01       	movw	r22, r12
    1368:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <__cmpsf2>
    136c:	88 23       	and	r24, r24
    136e:	7c f4       	brge	.+30     	; 0x138e <_Z16anzeige_richtungf+0xc8>
	{
		oled.draw_ASCI('S',80-charsize/2,3.5*charhighte);
    1370:	2c e1       	ldi	r18, 0x1C	; 28
    1372:	4d e4       	ldi	r20, 0x4D	; 77
    1374:	63 e5       	ldi	r22, 0x53	; 83
    1376:	8b e3       	ldi	r24, 0x3B	; 59
    1378:	92 e0       	ldi	r25, 0x02	; 2
    137a:	0e 94 90 05 	call	0xb20	; 0xb20 <_ZN7Display9draw_ASCIEhhh>
		oled.draw_ASCI('O',80+charsize/2,3.5*charhighte);
    137e:	2c e1       	ldi	r18, 0x1C	; 28
    1380:	43 e5       	ldi	r20, 0x53	; 83
    1382:	6f e4       	ldi	r22, 0x4F	; 79
    1384:	8b e3       	ldi	r24, 0x3B	; 59
    1386:	92 e0       	ldi	r25, 0x02	; 2
    1388:	0e 94 90 05 	call	0xb20	; 0xb20 <_ZN7Display9draw_ASCIEhhh>
    138c:	55 c0       	rjmp	.+170    	; 0x1438 <_Z16anzeige_richtungf+0x172>
	}
	else if (winkel<225-45/2)
    138e:	20 e0       	ldi	r18, 0x00	; 0
    1390:	30 e0       	ldi	r19, 0x00	; 0
    1392:	4b e4       	ldi	r20, 0x4B	; 75
    1394:	53 e4       	ldi	r21, 0x43	; 67
    1396:	c7 01       	movw	r24, r14
    1398:	b6 01       	movw	r22, r12
    139a:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <__cmpsf2>
    139e:	88 23       	and	r24, r24
    13a0:	44 f4       	brge	.+16     	; 0x13b2 <_Z16anzeige_richtungf+0xec>
	{
		oled.draw_ASCI('S',80,3.5*charhighte);
    13a2:	2c e1       	ldi	r18, 0x1C	; 28
    13a4:	40 e5       	ldi	r20, 0x50	; 80
    13a6:	63 e5       	ldi	r22, 0x53	; 83
    13a8:	8b e3       	ldi	r24, 0x3B	; 59
    13aa:	92 e0       	ldi	r25, 0x02	; 2
    13ac:	0e 94 90 05 	call	0xb20	; 0xb20 <_ZN7Display9draw_ASCIEhhh>
    13b0:	43 c0       	rjmp	.+134    	; 0x1438 <_Z16anzeige_richtungf+0x172>
	}
	else if (winkel<270-45/2)
    13b2:	20 e0       	ldi	r18, 0x00	; 0
    13b4:	30 e0       	ldi	r19, 0x00	; 0
    13b6:	48 e7       	ldi	r20, 0x78	; 120
    13b8:	53 e4       	ldi	r21, 0x43	; 67
    13ba:	c7 01       	movw	r24, r14
    13bc:	b6 01       	movw	r22, r12
    13be:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <__cmpsf2>
    13c2:	88 23       	and	r24, r24
    13c4:	7c f4       	brge	.+30     	; 0x13e4 <_Z16anzeige_richtungf+0x11e>
	{
		oled.draw_ASCI('S',80-charsize/2,3.5*charhighte);
    13c6:	2c e1       	ldi	r18, 0x1C	; 28
    13c8:	4d e4       	ldi	r20, 0x4D	; 77
    13ca:	63 e5       	ldi	r22, 0x53	; 83
    13cc:	8b e3       	ldi	r24, 0x3B	; 59
    13ce:	92 e0       	ldi	r25, 0x02	; 2
    13d0:	0e 94 90 05 	call	0xb20	; 0xb20 <_ZN7Display9draw_ASCIEhhh>
		oled.draw_ASCI('W',80+charsize/2,3.5*charhighte);
    13d4:	2c e1       	ldi	r18, 0x1C	; 28
    13d6:	43 e5       	ldi	r20, 0x53	; 83
    13d8:	67 e5       	ldi	r22, 0x57	; 87
    13da:	8b e3       	ldi	r24, 0x3B	; 59
    13dc:	92 e0       	ldi	r25, 0x02	; 2
    13de:	0e 94 90 05 	call	0xb20	; 0xb20 <_ZN7Display9draw_ASCIEhhh>
    13e2:	2a c0       	rjmp	.+84     	; 0x1438 <_Z16anzeige_richtungf+0x172>
	}
	else if (winkel<315-45/2)
    13e4:	20 e0       	ldi	r18, 0x00	; 0
    13e6:	30 e8       	ldi	r19, 0x80	; 128
    13e8:	42 e9       	ldi	r20, 0x92	; 146
    13ea:	53 e4       	ldi	r21, 0x43	; 67
    13ec:	c7 01       	movw	r24, r14
    13ee:	b6 01       	movw	r22, r12
    13f0:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <__cmpsf2>
    13f4:	88 23       	and	r24, r24
    13f6:	44 f4       	brge	.+16     	; 0x1408 <_Z16anzeige_richtungf+0x142>
	{
		oled.draw_ASCI('W',80,3.5*charhighte);
    13f8:	2c e1       	ldi	r18, 0x1C	; 28
    13fa:	40 e5       	ldi	r20, 0x50	; 80
    13fc:	67 e5       	ldi	r22, 0x57	; 87
    13fe:	8b e3       	ldi	r24, 0x3B	; 59
    1400:	92 e0       	ldi	r25, 0x02	; 2
    1402:	0e 94 90 05 	call	0xb20	; 0xb20 <_ZN7Display9draw_ASCIEhhh>
    1406:	18 c0       	rjmp	.+48     	; 0x1438 <_Z16anzeige_richtungf+0x172>
	}
	else if (winkel<360-45/2)
    1408:	20 e0       	ldi	r18, 0x00	; 0
    140a:	30 e0       	ldi	r19, 0x00	; 0
    140c:	49 ea       	ldi	r20, 0xA9	; 169
    140e:	53 e4       	ldi	r21, 0x43	; 67
    1410:	c7 01       	movw	r24, r14
    1412:	b6 01       	movw	r22, r12
    1414:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <__cmpsf2>
    1418:	88 23       	and	r24, r24
    141a:	74 f4       	brge	.+28     	; 0x1438 <_Z16anzeige_richtungf+0x172>
	{
		oled.draw_ASCI('N',80-charsize/2,3.5*charhighte);
    141c:	2c e1       	ldi	r18, 0x1C	; 28
    141e:	4d e4       	ldi	r20, 0x4D	; 77
    1420:	6e e4       	ldi	r22, 0x4E	; 78
    1422:	8b e3       	ldi	r24, 0x3B	; 59
    1424:	92 e0       	ldi	r25, 0x02	; 2
    1426:	0e 94 90 05 	call	0xb20	; 0xb20 <_ZN7Display9draw_ASCIEhhh>
		oled.draw_ASCI('W',80+charsize/2,3.5*charhighte);
    142a:	2c e1       	ldi	r18, 0x1C	; 28
    142c:	43 e5       	ldi	r20, 0x53	; 83
    142e:	67 e5       	ldi	r22, 0x57	; 87
    1430:	8b e3       	ldi	r24, 0x3B	; 59
    1432:	92 e0       	ldi	r25, 0x02	; 2
    1434:	0e 94 90 05 	call	0xb20	; 0xb20 <_ZN7Display9draw_ASCIEhhh>
	}
}
    1438:	ff 90       	pop	r15
    143a:	ef 90       	pop	r14
    143c:	df 90       	pop	r13
    143e:	cf 90       	pop	r12
    1440:	08 95       	ret

00001442 <_Z13anzeige_nadelhhf>:

void anzeige_nadel(uint8_t x, uint8_t y, float angle){
    1442:	af 92       	push	r10
    1444:	bf 92       	push	r11
    1446:	cf 92       	push	r12
    1448:	df 92       	push	r13
    144a:	ef 92       	push	r14
    144c:	ff 92       	push	r15
    144e:	0f 93       	push	r16
    1450:	1f 93       	push	r17
	//fixed parameters for drawing the arrow
	oled.draw_triangle(x,y,20,70,angle);
    1452:	59 01       	movw	r10, r18
    1454:	6a 01       	movw	r12, r20
    1456:	e1 2c       	mov	r14, r1
    1458:	f1 2c       	mov	r15, r1
    145a:	0c e8       	ldi	r16, 0x8C	; 140
    145c:	12 e4       	ldi	r17, 0x42	; 66
    145e:	24 e1       	ldi	r18, 0x14	; 20
    1460:	46 2f       	mov	r20, r22
    1462:	68 2f       	mov	r22, r24
    1464:	8b e3       	ldi	r24, 0x3B	; 59
    1466:	92 e0       	ldi	r25, 0x02	; 2
    1468:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <_ZN7Display13draw_triangleEhhhff>
}
    146c:	1f 91       	pop	r17
    146e:	0f 91       	pop	r16
    1470:	ff 90       	pop	r15
    1472:	ef 90       	pop	r14
    1474:	df 90       	pop	r13
    1476:	cf 90       	pop	r12
    1478:	bf 90       	pop	r11
    147a:	af 90       	pop	r10
    147c:	08 95       	ret

0000147e <_Z19anzeige_kleinenadelhhf>:
void anzeige_kleinenadel(uint8_t x, uint8_t y, float angle){
    147e:	af 92       	push	r10
    1480:	bf 92       	push	r11
    1482:	cf 92       	push	r12
    1484:	df 92       	push	r13
    1486:	ef 92       	push	r14
    1488:	ff 92       	push	r15
    148a:	0f 93       	push	r16
    148c:	1f 93       	push	r17
	//fixed parameters for drawing the arrow
	oled.draw_triangle(x,y,10,70,angle);
    148e:	59 01       	movw	r10, r18
    1490:	6a 01       	movw	r12, r20
    1492:	e1 2c       	mov	r14, r1
    1494:	f1 2c       	mov	r15, r1
    1496:	0c e8       	ldi	r16, 0x8C	; 140
    1498:	12 e4       	ldi	r17, 0x42	; 66
    149a:	2a e0       	ldi	r18, 0x0A	; 10
    149c:	46 2f       	mov	r20, r22
    149e:	68 2f       	mov	r22, r24
    14a0:	8b e3       	ldi	r24, 0x3B	; 59
    14a2:	92 e0       	ldi	r25, 0x02	; 2
    14a4:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <_ZN7Display13draw_triangleEhhhff>
}
    14a8:	1f 91       	pop	r17
    14aa:	0f 91       	pop	r16
    14ac:	ff 90       	pop	r15
    14ae:	ef 90       	pop	r14
    14b0:	df 90       	pop	r13
    14b2:	cf 90       	pop	r12
    14b4:	bf 90       	pop	r11
    14b6:	af 90       	pop	r10
    14b8:	08 95       	ret

000014ba <_Z11menue_hauptv>:
	//for(uint8_t i=((SSD1306_WIDTH/charsize)-8);i<(SSD1306_WIDTH/charsize);i++){
		//draw_ASCI(msg_dat[i-((SSD1306_WIDTH/charsize)-8)],i*charsize,7*charhighte);
	//}
//}

void menue_haupt(){
    14ba:	cf 92       	push	r12
    14bc:	df 92       	push	r13
    14be:	ef 92       	push	r14
    14c0:	ff 92       	push	r15
    14c2:	0f 93       	push	r16
    14c4:	1f 93       	push	r17
    14c6:	cf 93       	push	r28
    14c8:	df 93       	push	r29
    14ca:	cd b7       	in	r28, 0x3d	; 61
    14cc:	de b7       	in	r29, 0x3e	; 62
    14ce:	64 97       	sbiw	r28, 0x14	; 20
    14d0:	0f b6       	in	r0, 0x3f	; 63
    14d2:	f8 94       	cli
    14d4:	de bf       	out	0x3e, r29	; 62
    14d6:	0f be       	out	0x3f, r0	; 63
    14d8:	cd bf       	out	0x3d, r28	; 61
	char buffer[20];
	uint8_t buffersize=0;

	oled.clearFrame();
    14da:	8b e3       	ldi	r24, 0x3B	; 59
    14dc:	92 e0       	ldi	r25, 0x02	; 2
    14de:	0e 94 af 02 	call	0x55e	; 0x55e <_ZN7Display10clearFrameEv>
	buffersize=sprintf(buffer,"1:Fahradanzeige");
    14e2:	80 e1       	ldi	r24, 0x10	; 16
    14e4:	e6 e3       	ldi	r30, 0x36	; 54
    14e6:	f1 e0       	ldi	r31, 0x01	; 1
    14e8:	8e 01       	movw	r16, r28
    14ea:	0f 5f       	subi	r16, 0xFF	; 255
    14ec:	1f 4f       	sbci	r17, 0xFF	; 255
    14ee:	d8 01       	movw	r26, r16
    14f0:	01 90       	ld	r0, Z+
    14f2:	0d 92       	st	X+, r0
    14f4:	8a 95       	dec	r24
    14f6:	e1 f7       	brne	.-8      	; 0x14f0 <_Z11menue_hauptv+0x36>
    14f8:	e0 2e       	mov	r14, r16
    14fa:	f1 2e       	mov	r15, r17
    14fc:	68 01       	movw	r12, r16
    14fe:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,0*charhighte);}
    1500:	f6 01       	movw	r30, r12
    1502:	61 91       	ld	r22, Z+
    1504:	6f 01       	movw	r12, r30
    1506:	20 e0       	ldi	r18, 0x00	; 0
    1508:	41 2f       	mov	r20, r17
    150a:	8b e3       	ldi	r24, 0x3B	; 59
    150c:	92 e0       	ldi	r25, 0x02	; 2
    150e:	0e 94 90 05 	call	0xb20	; 0xb20 <_ZN7Display9draw_ASCIEhhh>
    1512:	1a 5f       	subi	r17, 0xFA	; 250
    1514:	1a 35       	cpi	r17, 0x5A	; 90
    1516:	a1 f7       	brne	.-24     	; 0x1500 <_Z11menue_hauptv+0x46>
	buffersize=sprintf(buffer,"2:Taschenrechner");
    1518:	81 e1       	ldi	r24, 0x11	; 17
    151a:	e6 e4       	ldi	r30, 0x46	; 70
    151c:	f1 e0       	ldi	r31, 0x01	; 1
    151e:	de 01       	movw	r26, r28
    1520:	11 96       	adiw	r26, 0x01	; 1
    1522:	01 90       	ld	r0, Z+
    1524:	0d 92       	st	X+, r0
    1526:	8a 95       	dec	r24
    1528:	e1 f7       	brne	.-8      	; 0x1522 <_Z11menue_hauptv+0x68>
    152a:	ce 2c       	mov	r12, r14
    152c:	df 2c       	mov	r13, r15
    152e:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,1*charhighte);}
    1530:	f6 01       	movw	r30, r12
    1532:	61 91       	ld	r22, Z+
    1534:	6f 01       	movw	r12, r30
    1536:	28 e0       	ldi	r18, 0x08	; 8
    1538:	41 2f       	mov	r20, r17
    153a:	8b e3       	ldi	r24, 0x3B	; 59
    153c:	92 e0       	ldi	r25, 0x02	; 2
    153e:	0e 94 90 05 	call	0xb20	; 0xb20 <_ZN7Display9draw_ASCIEhhh>
    1542:	1a 5f       	subi	r17, 0xFA	; 250
    1544:	10 36       	cpi	r17, 0x60	; 96
    1546:	a1 f7       	brne	.-24     	; 0x1530 <_Z11menue_hauptv+0x76>
	buffersize=sprintf(buffer,"3:Kompass");
    1548:	8a e0       	ldi	r24, 0x0A	; 10
    154a:	e7 e5       	ldi	r30, 0x57	; 87
    154c:	f1 e0       	ldi	r31, 0x01	; 1
    154e:	de 01       	movw	r26, r28
    1550:	11 96       	adiw	r26, 0x01	; 1
    1552:	01 90       	ld	r0, Z+
    1554:	0d 92       	st	X+, r0
    1556:	8a 95       	dec	r24
    1558:	e1 f7       	brne	.-8      	; 0x1552 <_Z11menue_hauptv+0x98>
    155a:	ce 2c       	mov	r12, r14
    155c:	df 2c       	mov	r13, r15
    155e:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,2*charhighte);}
    1560:	f6 01       	movw	r30, r12
    1562:	61 91       	ld	r22, Z+
    1564:	6f 01       	movw	r12, r30
    1566:	20 e1       	ldi	r18, 0x10	; 16
    1568:	41 2f       	mov	r20, r17
    156a:	8b e3       	ldi	r24, 0x3B	; 59
    156c:	92 e0       	ldi	r25, 0x02	; 2
    156e:	0e 94 90 05 	call	0xb20	; 0xb20 <_ZN7Display9draw_ASCIEhhh>
    1572:	1a 5f       	subi	r17, 0xFA	; 250
    1574:	16 33       	cpi	r17, 0x36	; 54
    1576:	a1 f7       	brne	.-24     	; 0x1560 <_Z11menue_hauptv+0xa6>
	buffersize=sprintf(buffer,"4:Uhrmenue");
    1578:	8b e0       	ldi	r24, 0x0B	; 11
    157a:	e1 e6       	ldi	r30, 0x61	; 97
    157c:	f1 e0       	ldi	r31, 0x01	; 1
    157e:	de 01       	movw	r26, r28
    1580:	11 96       	adiw	r26, 0x01	; 1
    1582:	01 90       	ld	r0, Z+
    1584:	0d 92       	st	X+, r0
    1586:	8a 95       	dec	r24
    1588:	e1 f7       	brne	.-8      	; 0x1582 <_Z11menue_hauptv+0xc8>
    158a:	ce 2c       	mov	r12, r14
    158c:	df 2c       	mov	r13, r15
    158e:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,3*charhighte);}
    1590:	f6 01       	movw	r30, r12
    1592:	61 91       	ld	r22, Z+
    1594:	6f 01       	movw	r12, r30
    1596:	28 e1       	ldi	r18, 0x18	; 24
    1598:	41 2f       	mov	r20, r17
    159a:	8b e3       	ldi	r24, 0x3B	; 59
    159c:	92 e0       	ldi	r25, 0x02	; 2
    159e:	0e 94 90 05 	call	0xb20	; 0xb20 <_ZN7Display9draw_ASCIEhhh>
    15a2:	1a 5f       	subi	r17, 0xFA	; 250
    15a4:	1c 33       	cpi	r17, 0x3C	; 60
    15a6:	a1 f7       	brne	.-24     	; 0x1590 <_Z11menue_hauptv+0xd6>
	buffersize=sprintf(buffer,"5:Einstellungen");
    15a8:	80 e1       	ldi	r24, 0x10	; 16
    15aa:	ec e6       	ldi	r30, 0x6C	; 108
    15ac:	f1 e0       	ldi	r31, 0x01	; 1
    15ae:	de 01       	movw	r26, r28
    15b0:	11 96       	adiw	r26, 0x01	; 1
    15b2:	01 90       	ld	r0, Z+
    15b4:	0d 92       	st	X+, r0
    15b6:	8a 95       	dec	r24
    15b8:	e1 f7       	brne	.-8      	; 0x15b2 <_Z11menue_hauptv+0xf8>
    15ba:	ce 2c       	mov	r12, r14
    15bc:	df 2c       	mov	r13, r15
    15be:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,4*charhighte);}
    15c0:	f6 01       	movw	r30, r12
    15c2:	61 91       	ld	r22, Z+
    15c4:	6f 01       	movw	r12, r30
    15c6:	20 e2       	ldi	r18, 0x20	; 32
    15c8:	41 2f       	mov	r20, r17
    15ca:	8b e3       	ldi	r24, 0x3B	; 59
    15cc:	92 e0       	ldi	r25, 0x02	; 2
    15ce:	0e 94 90 05 	call	0xb20	; 0xb20 <_ZN7Display9draw_ASCIEhhh>
    15d2:	1a 5f       	subi	r17, 0xFA	; 250
    15d4:	1a 35       	cpi	r17, 0x5A	; 90
    15d6:	a1 f7       	brne	.-24     	; 0x15c0 <_Z11menue_hauptv+0x106>
	buffersize=sprintf(buffer,"6:Display aus");
    15d8:	8e e0       	ldi	r24, 0x0E	; 14
    15da:	ec e7       	ldi	r30, 0x7C	; 124
    15dc:	f1 e0       	ldi	r31, 0x01	; 1
    15de:	de 01       	movw	r26, r28
    15e0:	11 96       	adiw	r26, 0x01	; 1
    15e2:	01 90       	ld	r0, Z+
    15e4:	0d 92       	st	X+, r0
    15e6:	8a 95       	dec	r24
    15e8:	e1 f7       	brne	.-8      	; 0x15e2 <_Z11menue_hauptv+0x128>
    15ea:	ce 2c       	mov	r12, r14
    15ec:	df 2c       	mov	r13, r15
    15ee:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,5*charhighte);}
    15f0:	f6 01       	movw	r30, r12
    15f2:	61 91       	ld	r22, Z+
    15f4:	6f 01       	movw	r12, r30
    15f6:	28 e2       	ldi	r18, 0x28	; 40
    15f8:	41 2f       	mov	r20, r17
    15fa:	8b e3       	ldi	r24, 0x3B	; 59
    15fc:	92 e0       	ldi	r25, 0x02	; 2
    15fe:	0e 94 90 05 	call	0xb20	; 0xb20 <_ZN7Display9draw_ASCIEhhh>
    1602:	1a 5f       	subi	r17, 0xFA	; 250
    1604:	1e 34       	cpi	r17, 0x4E	; 78
    1606:	a1 f7       	brne	.-24     	; 0x15f0 <_Z11menue_hauptv+0x136>
	//buffersize=sprintf(buffer,"7:Uhr einstellen");
	//for(uint8_t i=0;i<buffersize;i++){draw_ASCI(oled.buffer[i],i*charsize,6*charhighte);}
}
    1608:	64 96       	adiw	r28, 0x14	; 20
    160a:	0f b6       	in	r0, 0x3f	; 63
    160c:	f8 94       	cli
    160e:	de bf       	out	0x3e, r29	; 62
    1610:	0f be       	out	0x3f, r0	; 63
    1612:	cd bf       	out	0x3d, r28	; 61
    1614:	df 91       	pop	r29
    1616:	cf 91       	pop	r28
    1618:	1f 91       	pop	r17
    161a:	0f 91       	pop	r16
    161c:	ff 90       	pop	r15
    161e:	ef 90       	pop	r14
    1620:	df 90       	pop	r13
    1622:	cf 90       	pop	r12
    1624:	08 95       	ret

00001626 <_Z11menue_einstv>:
void menue_einst(){
    1626:	af 92       	push	r10
    1628:	bf 92       	push	r11
    162a:	df 92       	push	r13
    162c:	ef 92       	push	r14
    162e:	0f 93       	push	r16
    1630:	1f 93       	push	r17
    1632:	cf 93       	push	r28
    1634:	df 93       	push	r29
    1636:	cd b7       	in	r28, 0x3d	; 61
    1638:	de b7       	in	r29, 0x3e	; 62
    163a:	64 97       	sbiw	r28, 0x14	; 20
    163c:	0f b6       	in	r0, 0x3f	; 63
    163e:	f8 94       	cli
    1640:	de bf       	out	0x3e, r29	; 62
    1642:	0f be       	out	0x3f, r0	; 63
    1644:	cd bf       	out	0x3d, r28	; 61
	char buffer[20];
	uint8_t buffersize=0;

	oled.clearFrame();
    1646:	8b e3       	ldi	r24, 0x3B	; 59
    1648:	92 e0       	ldi	r25, 0x02	; 2
    164a:	0e 94 af 02 	call	0x55e	; 0x55e <_ZN7Display10clearFrameEv>
	buffersize=sprintf(buffer,"1:Kompass kalib.");
    164e:	81 e1       	ldi	r24, 0x11	; 17
    1650:	ea e8       	ldi	r30, 0x8A	; 138
    1652:	f1 e0       	ldi	r31, 0x01	; 1
    1654:	8e 01       	movw	r16, r28
    1656:	0f 5f       	subi	r16, 0xFF	; 255
    1658:	1f 4f       	sbci	r17, 0xFF	; 255
    165a:	d8 01       	movw	r26, r16
    165c:	01 90       	ld	r0, Z+
    165e:	0d 92       	st	X+, r0
    1660:	8a 95       	dec	r24
    1662:	e1 f7       	brne	.-8      	; 0x165c <_Z11menue_einstv+0x36>
    1664:	d0 2e       	mov	r13, r16
    1666:	e1 2e       	mov	r14, r17
    1668:	58 01       	movw	r10, r16
    166a:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,0*charhighte);}
    166c:	f5 01       	movw	r30, r10
    166e:	61 91       	ld	r22, Z+
    1670:	5f 01       	movw	r10, r30
    1672:	20 e0       	ldi	r18, 0x00	; 0
    1674:	41 2f       	mov	r20, r17
    1676:	8b e3       	ldi	r24, 0x3B	; 59
    1678:	92 e0       	ldi	r25, 0x02	; 2
    167a:	0e 94 90 05 	call	0xb20	; 0xb20 <_ZN7Display9draw_ASCIEhhh>
    167e:	1a 5f       	subi	r17, 0xFA	; 250
    1680:	10 36       	cpi	r17, 0x60	; 96
    1682:	a1 f7       	brne	.-24     	; 0x166c <_Z11menue_einstv+0x46>
	buffersize=sprintf(buffer,"2:HMC5883L Gain");
    1684:	80 e1       	ldi	r24, 0x10	; 16
    1686:	eb e9       	ldi	r30, 0x9B	; 155
    1688:	f1 e0       	ldi	r31, 0x01	; 1
    168a:	de 01       	movw	r26, r28
    168c:	11 96       	adiw	r26, 0x01	; 1
    168e:	01 90       	ld	r0, Z+
    1690:	0d 92       	st	X+, r0
    1692:	8a 95       	dec	r24
    1694:	e1 f7       	brne	.-8      	; 0x168e <_Z11menue_einstv+0x68>
    1696:	ad 2c       	mov	r10, r13
    1698:	be 2c       	mov	r11, r14
    169a:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,1*charhighte);}
    169c:	f5 01       	movw	r30, r10
    169e:	61 91       	ld	r22, Z+
    16a0:	5f 01       	movw	r10, r30
    16a2:	28 e0       	ldi	r18, 0x08	; 8
    16a4:	41 2f       	mov	r20, r17
    16a6:	8b e3       	ldi	r24, 0x3B	; 59
    16a8:	92 e0       	ldi	r25, 0x02	; 2
    16aa:	0e 94 90 05 	call	0xb20	; 0xb20 <_ZN7Display9draw_ASCIEhhh>
    16ae:	1a 5f       	subi	r17, 0xFA	; 250
    16b0:	1a 35       	cpi	r17, 0x5A	; 90
    16b2:	a1 f7       	brne	.-24     	; 0x169c <_Z11menue_einstv+0x76>
	buffersize=sprintf(buffer,"3:Uhr einstellen");
    16b4:	81 e1       	ldi	r24, 0x11	; 17
    16b6:	eb ea       	ldi	r30, 0xAB	; 171
    16b8:	f1 e0       	ldi	r31, 0x01	; 1
    16ba:	de 01       	movw	r26, r28
    16bc:	11 96       	adiw	r26, 0x01	; 1
    16be:	01 90       	ld	r0, Z+
    16c0:	0d 92       	st	X+, r0
    16c2:	8a 95       	dec	r24
    16c4:	e1 f7       	brne	.-8      	; 0x16be <_Z11menue_einstv+0x98>
    16c6:	ad 2c       	mov	r10, r13
    16c8:	be 2c       	mov	r11, r14
    16ca:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,2*charhighte);}
    16cc:	f5 01       	movw	r30, r10
    16ce:	61 91       	ld	r22, Z+
    16d0:	5f 01       	movw	r10, r30
    16d2:	20 e1       	ldi	r18, 0x10	; 16
    16d4:	41 2f       	mov	r20, r17
    16d6:	8b e3       	ldi	r24, 0x3B	; 59
    16d8:	92 e0       	ldi	r25, 0x02	; 2
    16da:	0e 94 90 05 	call	0xb20	; 0xb20 <_ZN7Display9draw_ASCIEhhh>
    16de:	1a 5f       	subi	r17, 0xFA	; 250
    16e0:	10 36       	cpi	r17, 0x60	; 96
    16e2:	a1 f7       	brne	.-24     	; 0x16cc <_Z11menue_einstv+0xa6>
	//for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,4*charhighte);}
	//buffersize=sprintf(buffer,"6:HMC5883L Gain");
	//for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,5*charhighte);}
	//buffersize=sprintf(buffer,"7:Uhr einstellen");
	//for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,6*charhighte);}
}
    16e4:	64 96       	adiw	r28, 0x14	; 20
    16e6:	0f b6       	in	r0, 0x3f	; 63
    16e8:	f8 94       	cli
    16ea:	de bf       	out	0x3e, r29	; 62
    16ec:	0f be       	out	0x3f, r0	; 63
    16ee:	cd bf       	out	0x3d, r28	; 61
    16f0:	df 91       	pop	r29
    16f2:	cf 91       	pop	r28
    16f4:	1f 91       	pop	r17
    16f6:	0f 91       	pop	r16
    16f8:	ef 90       	pop	r14
    16fa:	df 90       	pop	r13
    16fc:	bf 90       	pop	r11
    16fe:	af 90       	pop	r10
    1700:	08 95       	ret

00001702 <_Z9menue_uhrv>:
void menue_uhr(){
    1702:	af 92       	push	r10
    1704:	bf 92       	push	r11
    1706:	df 92       	push	r13
    1708:	ef 92       	push	r14
    170a:	0f 93       	push	r16
    170c:	1f 93       	push	r17
    170e:	cf 93       	push	r28
    1710:	df 93       	push	r29
    1712:	cd b7       	in	r28, 0x3d	; 61
    1714:	de b7       	in	r29, 0x3e	; 62
    1716:	64 97       	sbiw	r28, 0x14	; 20
    1718:	0f b6       	in	r0, 0x3f	; 63
    171a:	f8 94       	cli
    171c:	de bf       	out	0x3e, r29	; 62
    171e:	0f be       	out	0x3f, r0	; 63
    1720:	cd bf       	out	0x3d, r28	; 61
	char buffer[20];
	uint8_t buffersize=0;

	oled.clearFrame();
    1722:	8b e3       	ldi	r24, 0x3B	; 59
    1724:	92 e0       	ldi	r25, 0x02	; 2
    1726:	0e 94 af 02 	call	0x55e	; 0x55e <_ZN7Display10clearFrameEv>
	buffersize=sprintf(buffer,"1:Uhr");
    172a:	86 e0       	ldi	r24, 0x06	; 6
    172c:	ec eb       	ldi	r30, 0xBC	; 188
    172e:	f1 e0       	ldi	r31, 0x01	; 1
    1730:	8e 01       	movw	r16, r28
    1732:	0f 5f       	subi	r16, 0xFF	; 255
    1734:	1f 4f       	sbci	r17, 0xFF	; 255
    1736:	d8 01       	movw	r26, r16
    1738:	01 90       	ld	r0, Z+
    173a:	0d 92       	st	X+, r0
    173c:	8a 95       	dec	r24
    173e:	e1 f7       	brne	.-8      	; 0x1738 <_Z9menue_uhrv+0x36>
    1740:	d0 2e       	mov	r13, r16
    1742:	e1 2e       	mov	r14, r17
    1744:	58 01       	movw	r10, r16
    1746:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,0*charhighte);}
    1748:	f5 01       	movw	r30, r10
    174a:	61 91       	ld	r22, Z+
    174c:	5f 01       	movw	r10, r30
    174e:	20 e0       	ldi	r18, 0x00	; 0
    1750:	41 2f       	mov	r20, r17
    1752:	8b e3       	ldi	r24, 0x3B	; 59
    1754:	92 e0       	ldi	r25, 0x02	; 2
    1756:	0e 94 90 05 	call	0xb20	; 0xb20 <_ZN7Display9draw_ASCIEhhh>
    175a:	1a 5f       	subi	r17, 0xFA	; 250
    175c:	1e 31       	cpi	r17, 0x1E	; 30
    175e:	a1 f7       	brne	.-24     	; 0x1748 <_Z9menue_uhrv+0x46>
	buffersize=sprintf(buffer,"2:Stoppuhr");
    1760:	8b e0       	ldi	r24, 0x0B	; 11
    1762:	e2 ec       	ldi	r30, 0xC2	; 194
    1764:	f1 e0       	ldi	r31, 0x01	; 1
    1766:	de 01       	movw	r26, r28
    1768:	11 96       	adiw	r26, 0x01	; 1
    176a:	01 90       	ld	r0, Z+
    176c:	0d 92       	st	X+, r0
    176e:	8a 95       	dec	r24
    1770:	e1 f7       	brne	.-8      	; 0x176a <_Z9menue_uhrv+0x68>
    1772:	ad 2c       	mov	r10, r13
    1774:	be 2c       	mov	r11, r14
    1776:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,1*charhighte);}
    1778:	f5 01       	movw	r30, r10
    177a:	61 91       	ld	r22, Z+
    177c:	5f 01       	movw	r10, r30
    177e:	28 e0       	ldi	r18, 0x08	; 8
    1780:	41 2f       	mov	r20, r17
    1782:	8b e3       	ldi	r24, 0x3B	; 59
    1784:	92 e0       	ldi	r25, 0x02	; 2
    1786:	0e 94 90 05 	call	0xb20	; 0xb20 <_ZN7Display9draw_ASCIEhhh>
    178a:	1a 5f       	subi	r17, 0xFA	; 250
    178c:	1c 33       	cpi	r17, 0x3C	; 60
    178e:	a1 f7       	brne	.-24     	; 0x1778 <_Z9menue_uhrv+0x76>
	buffersize=sprintf(buffer,"3:Timer");
    1790:	88 e0       	ldi	r24, 0x08	; 8
    1792:	ed ec       	ldi	r30, 0xCD	; 205
    1794:	f1 e0       	ldi	r31, 0x01	; 1
    1796:	de 01       	movw	r26, r28
    1798:	11 96       	adiw	r26, 0x01	; 1
    179a:	01 90       	ld	r0, Z+
    179c:	0d 92       	st	X+, r0
    179e:	8a 95       	dec	r24
    17a0:	e1 f7       	brne	.-8      	; 0x179a <_Z9menue_uhrv+0x98>
    17a2:	ad 2c       	mov	r10, r13
    17a4:	be 2c       	mov	r11, r14
    17a6:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,2*charhighte);}
    17a8:	f5 01       	movw	r30, r10
    17aa:	61 91       	ld	r22, Z+
    17ac:	5f 01       	movw	r10, r30
    17ae:	20 e1       	ldi	r18, 0x10	; 16
    17b0:	41 2f       	mov	r20, r17
    17b2:	8b e3       	ldi	r24, 0x3B	; 59
    17b4:	92 e0       	ldi	r25, 0x02	; 2
    17b6:	0e 94 90 05 	call	0xb20	; 0xb20 <_ZN7Display9draw_ASCIEhhh>
    17ba:	1a 5f       	subi	r17, 0xFA	; 250
    17bc:	1a 32       	cpi	r17, 0x2A	; 42
    17be:	a1 f7       	brne	.-24     	; 0x17a8 <_Z9menue_uhrv+0xa6>
	buffersize=sprintf(buffer,"4:Alarm");
    17c0:	88 e0       	ldi	r24, 0x08	; 8
    17c2:	e5 ed       	ldi	r30, 0xD5	; 213
    17c4:	f1 e0       	ldi	r31, 0x01	; 1
    17c6:	de 01       	movw	r26, r28
    17c8:	11 96       	adiw	r26, 0x01	; 1
    17ca:	01 90       	ld	r0, Z+
    17cc:	0d 92       	st	X+, r0
    17ce:	8a 95       	dec	r24
    17d0:	e1 f7       	brne	.-8      	; 0x17ca <_Z9menue_uhrv+0xc8>
    17d2:	ad 2c       	mov	r10, r13
    17d4:	be 2c       	mov	r11, r14
    17d6:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,3*charhighte);}
    17d8:	f5 01       	movw	r30, r10
    17da:	61 91       	ld	r22, Z+
    17dc:	5f 01       	movw	r10, r30
    17de:	28 e1       	ldi	r18, 0x18	; 24
    17e0:	41 2f       	mov	r20, r17
    17e2:	8b e3       	ldi	r24, 0x3B	; 59
    17e4:	92 e0       	ldi	r25, 0x02	; 2
    17e6:	0e 94 90 05 	call	0xb20	; 0xb20 <_ZN7Display9draw_ASCIEhhh>
    17ea:	1a 5f       	subi	r17, 0xFA	; 250
    17ec:	1a 32       	cpi	r17, 0x2A	; 42
    17ee:	a1 f7       	brne	.-24     	; 0x17d8 <_Z9menue_uhrv+0xd6>
	//for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,4*charhighte);}
	//buffersize=sprintf(buffer,"6:HMC5883L Gain");
	//for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,5*charhighte);}
	//buffersize=sprintf(buffer,"7:Uhr einstellen");
	//for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,6*charhighte);}
}
    17f0:	64 96       	adiw	r28, 0x14	; 20
    17f2:	0f b6       	in	r0, 0x3f	; 63
    17f4:	f8 94       	cli
    17f6:	de bf       	out	0x3e, r29	; 62
    17f8:	0f be       	out	0x3f, r0	; 63
    17fa:	cd bf       	out	0x3d, r28	; 61
    17fc:	df 91       	pop	r29
    17fe:	cf 91       	pop	r28
    1800:	1f 91       	pop	r17
    1802:	0f 91       	pop	r16
    1804:	ef 90       	pop	r14
    1806:	df 90       	pop	r13
    1808:	bf 90       	pop	r11
    180a:	af 90       	pop	r10
    180c:	08 95       	ret

0000180e <_Z11uhranzeigenv>:

void uhranzeigen(){
    180e:	df 92       	push	r13
    1810:	ef 92       	push	r14
    1812:	ff 92       	push	r15
    1814:	0f 93       	push	r16
    1816:	1f 93       	push	r17
    1818:	cf 93       	push	r28
    181a:	df 93       	push	r29
    181c:	cd b7       	in	r28, 0x3d	; 61
    181e:	de b7       	in	r29, 0x3e	; 62
    1820:	64 97       	sbiw	r28, 0x14	; 20
    1822:	0f b6       	in	r0, 0x3f	; 63
    1824:	f8 94       	cli
    1826:	de bf       	out	0x3e, r29	; 62
    1828:	0f be       	out	0x3f, r0	; 63
    182a:	cd bf       	out	0x3d, r28	; 61
	uint8_t buffersize;
	char Buffer[20];
	oled.clearFrame();
    182c:	8b e3       	ldi	r24, 0x3B	; 59
    182e:	92 e0       	ldi	r25, 0x02	; 2
    1830:	0e 94 af 02 	call	0x55e	; 0x55e <_ZN7Display10clearFrameEv>
	oled.analog(rtc.Stunden,rtc.Minuten,rtc.Sekunden);
    1834:	20 91 46 06 	lds	r18, 0x0646
    1838:	40 91 45 06 	lds	r20, 0x0645
    183c:	60 91 44 06 	lds	r22, 0x0644
    1840:	8b e3       	ldi	r24, 0x3B	; 59
    1842:	92 e0       	ldi	r25, 0x02	; 2
    1844:	0e 94 54 06 	call	0xca8	; 0xca8 <_ZN7Display6analogEhhh>
    1848:	0f 2e       	mov	r0, r31
    184a:	fc e3       	ldi	r31, 0x3C	; 60
    184c:	ef 2e       	mov	r14, r31
    184e:	f6 e0       	ldi	r31, 0x06	; 6
    1850:	ff 2e       	mov	r15, r31
    1852:	f0 2d       	mov	r31, r0
    1854:	11 e4       	ldi	r17, 0x41	; 65
	for(uint8_t i=0;i<bitsderrtc;i++){oled.draw_ASCI(rtc.msg_uhr[i],65+i*charsize,0);}
    1856:	f7 01       	movw	r30, r14
    1858:	61 91       	ld	r22, Z+
    185a:	7f 01       	movw	r14, r30
    185c:	20 e0       	ldi	r18, 0x00	; 0
    185e:	41 2f       	mov	r20, r17
    1860:	8b e3       	ldi	r24, 0x3B	; 59
    1862:	92 e0       	ldi	r25, 0x02	; 2
    1864:	0e 94 90 05 	call	0xb20	; 0xb20 <_ZN7Display9draw_ASCIEhhh>
    1868:	1a 5f       	subi	r17, 0xFA	; 250
    186a:	11 37       	cpi	r17, 0x71	; 113
    186c:	a1 f7       	brne	.-24     	; 0x1856 <_Z11uhranzeigenv+0x48>
	buffersize=sprintf(Buffer,"%i%%",Batteriestatus());
    186e:	0e 94 04 08 	call	0x1008	; 0x1008 <_Z14Batteriestatusv>
    1872:	28 2f       	mov	r18, r24
    1874:	33 27       	eor	r19, r19
    1876:	27 fd       	sbrc	r18, 7
    1878:	30 95       	com	r19
    187a:	3f 93       	push	r19
    187c:	8f 93       	push	r24
    187e:	81 e3       	ldi	r24, 0x31	; 49
    1880:	91 e0       	ldi	r25, 0x01	; 1
    1882:	9f 93       	push	r25
    1884:	8f 93       	push	r24
    1886:	ce 01       	movw	r24, r28
    1888:	01 96       	adiw	r24, 0x01	; 1
    188a:	9f 93       	push	r25
    188c:	8f 93       	push	r24
    188e:	0e 94 27 1c 	call	0x384e	; 0x384e <sprintf>
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(Buffer[i],65+i*charsize,2*charhighte);}
    1892:	0f 90       	pop	r0
    1894:	0f 90       	pop	r0
    1896:	0f 90       	pop	r0
    1898:	0f 90       	pop	r0
    189a:	0f 90       	pop	r0
    189c:	0f 90       	pop	r0
    189e:	88 23       	and	r24, r24
    18a0:	f1 f0       	breq	.+60     	; 0x18de <_Z11uhranzeigenv+0xd0>
    18a2:	8e 01       	movw	r16, r28
    18a4:	0f 5f       	subi	r16, 0xFF	; 255
    18a6:	1f 4f       	sbci	r17, 0xFF	; 255
    18a8:	81 50       	subi	r24, 0x01	; 1
    18aa:	68 94       	set
    18ac:	ee 24       	eor	r14, r14
    18ae:	e1 f8       	bld	r14, 1
    18b0:	f1 2c       	mov	r15, r1
    18b2:	ec 0e       	add	r14, r28
    18b4:	fd 1e       	adc	r15, r29
    18b6:	e8 0e       	add	r14, r24
    18b8:	f1 1c       	adc	r15, r1
    18ba:	0f 2e       	mov	r0, r31
    18bc:	f1 e4       	ldi	r31, 0x41	; 65
    18be:	df 2e       	mov	r13, r31
    18c0:	f0 2d       	mov	r31, r0
    18c2:	f8 01       	movw	r30, r16
    18c4:	61 91       	ld	r22, Z+
    18c6:	8f 01       	movw	r16, r30
    18c8:	20 e1       	ldi	r18, 0x10	; 16
    18ca:	4d 2d       	mov	r20, r13
    18cc:	8b e3       	ldi	r24, 0x3B	; 59
    18ce:	92 e0       	ldi	r25, 0x02	; 2
    18d0:	0e 94 90 05 	call	0xb20	; 0xb20 <_ZN7Display9draw_ASCIEhhh>
    18d4:	f6 e0       	ldi	r31, 0x06	; 6
    18d6:	df 0e       	add	r13, r31
    18d8:	0e 15       	cp	r16, r14
    18da:	1f 05       	cpc	r17, r15
    18dc:	91 f7       	brne	.-28     	; 0x18c2 <_Z11uhranzeigenv+0xb4>
	buffersize=sprintf(Buffer,"%.3fV",batterie);
    18de:	80 91 39 02 	lds	r24, 0x0239
    18e2:	8f 93       	push	r24
    18e4:	80 91 38 02 	lds	r24, 0x0238
    18e8:	8f 93       	push	r24
    18ea:	80 91 37 02 	lds	r24, 0x0237
    18ee:	8f 93       	push	r24
    18f0:	80 91 36 02 	lds	r24, 0x0236
    18f4:	8f 93       	push	r24
    18f6:	8d ed       	ldi	r24, 0xDD	; 221
    18f8:	91 e0       	ldi	r25, 0x01	; 1
    18fa:	9f 93       	push	r25
    18fc:	8f 93       	push	r24
    18fe:	ce 01       	movw	r24, r28
    1900:	01 96       	adiw	r24, 0x01	; 1
    1902:	9f 93       	push	r25
    1904:	8f 93       	push	r24
    1906:	0e 94 27 1c 	call	0x384e	; 0x384e <sprintf>
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(Buffer[i],65+i*charsize,3*charhighte);}
    190a:	0f b6       	in	r0, 0x3f	; 63
    190c:	f8 94       	cli
    190e:	de bf       	out	0x3e, r29	; 62
    1910:	0f be       	out	0x3f, r0	; 63
    1912:	cd bf       	out	0x3d, r28	; 61
    1914:	88 23       	and	r24, r24
    1916:	f1 f0       	breq	.+60     	; 0x1954 <_Z11uhranzeigenv+0x146>
    1918:	8e 01       	movw	r16, r28
    191a:	0f 5f       	subi	r16, 0xFF	; 255
    191c:	1f 4f       	sbci	r17, 0xFF	; 255
    191e:	81 50       	subi	r24, 0x01	; 1
    1920:	68 94       	set
    1922:	ee 24       	eor	r14, r14
    1924:	e1 f8       	bld	r14, 1
    1926:	f1 2c       	mov	r15, r1
    1928:	ec 0e       	add	r14, r28
    192a:	fd 1e       	adc	r15, r29
    192c:	e8 0e       	add	r14, r24
    192e:	f1 1c       	adc	r15, r1
    1930:	0f 2e       	mov	r0, r31
    1932:	f1 e4       	ldi	r31, 0x41	; 65
    1934:	df 2e       	mov	r13, r31
    1936:	f0 2d       	mov	r31, r0
    1938:	f8 01       	movw	r30, r16
    193a:	61 91       	ld	r22, Z+
    193c:	8f 01       	movw	r16, r30
    193e:	28 e1       	ldi	r18, 0x18	; 24
    1940:	4d 2d       	mov	r20, r13
    1942:	8b e3       	ldi	r24, 0x3B	; 59
    1944:	92 e0       	ldi	r25, 0x02	; 2
    1946:	0e 94 90 05 	call	0xb20	; 0xb20 <_ZN7Display9draw_ASCIEhhh>
    194a:	f6 e0       	ldi	r31, 0x06	; 6
    194c:	df 0e       	add	r13, r31
    194e:	0e 15       	cp	r16, r14
    1950:	1f 05       	cpc	r17, r15
    1952:	91 f7       	brne	.-28     	; 0x1938 <_Z11uhranzeigenv+0x12a>
}
    1954:	64 96       	adiw	r28, 0x14	; 20
    1956:	0f b6       	in	r0, 0x3f	; 63
    1958:	f8 94       	cli
    195a:	de bf       	out	0x3e, r29	; 62
    195c:	0f be       	out	0x3f, r0	; 63
    195e:	cd bf       	out	0x3d, r28	; 61
    1960:	df 91       	pop	r29
    1962:	cf 91       	pop	r28
    1964:	1f 91       	pop	r17
    1966:	0f 91       	pop	r16
    1968:	ff 90       	pop	r15
    196a:	ef 90       	pop	r14
    196c:	df 90       	pop	r13
    196e:	08 95       	ret

00001970 <_Z12fahradschirmdd>:

void timer(){
	
}

void fahradschirm(double winkelgeschw, double angle){
    1970:	8f 92       	push	r8
    1972:	9f 92       	push	r9
    1974:	af 92       	push	r10
    1976:	bf 92       	push	r11
    1978:	cf 92       	push	r12
    197a:	df 92       	push	r13
    197c:	ef 92       	push	r14
    197e:	ff 92       	push	r15
    1980:	0f 93       	push	r16
    1982:	1f 93       	push	r17
    1984:	cf 93       	push	r28
    1986:	df 93       	push	r29
    1988:	cd b7       	in	r28, 0x3d	; 61
    198a:	de b7       	in	r29, 0x3e	; 62
    198c:	2a 97       	sbiw	r28, 0x0a	; 10
    198e:	0f b6       	in	r0, 0x3f	; 63
    1990:	f8 94       	cli
    1992:	de bf       	out	0x3e, r29	; 62
    1994:	0f be       	out	0x3f, r0	; 63
    1996:	cd bf       	out	0x3d, r28	; 61
    1998:	16 2f       	mov	r17, r22
    199a:	07 2f       	mov	r16, r23
    199c:	f8 2e       	mov	r15, r24
    199e:	e9 2e       	mov	r14, r25
    19a0:	a2 2e       	mov	r10, r18
    19a2:	b3 2e       	mov	r11, r19
    19a4:	c4 2e       	mov	r12, r20
    19a6:	d5 2e       	mov	r13, r21
	char buffer[10];
	uint8_t buffersize=0;
	oled.clearFrame();
    19a8:	8b e3       	ldi	r24, 0x3B	; 59
    19aa:	92 e0       	ldi	r25, 0x02	; 2
    19ac:	0e 94 af 02 	call	0x55e	; 0x55e <_ZN7Display10clearFrameEv>
	header(0);
    19b0:	80 e0       	ldi	r24, 0x00	; 0
    19b2:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <_Z6headerh>
	//bottom();
	//Ausgabe der Geschwidigkeit
	buffersize=sprintf(buffer,"%3.1f",winkelgeschw);
    19b6:	ef 92       	push	r14
    19b8:	ff 92       	push	r15
    19ba:	0f 93       	push	r16
    19bc:	1f 93       	push	r17
    19be:	83 ee       	ldi	r24, 0xE3	; 227
    19c0:	91 e0       	ldi	r25, 0x01	; 1
    19c2:	9f 93       	push	r25
    19c4:	8f 93       	push	r24
    19c6:	ce 01       	movw	r24, r28
    19c8:	01 96       	adiw	r24, 0x01	; 1
    19ca:	9f 93       	push	r25
    19cc:	8f 93       	push	r24
    19ce:	0e 94 27 1c 	call	0x384e	; 0x384e <sprintf>
	for(uint8_t i=((SSD1306_WIDTH/numbersmalsize)-buffersize-1);i<((SSD1306_WIDTH/numbersmalsize)-1);i++){
    19d2:	27 e0       	ldi	r18, 0x07	; 7
    19d4:	f2 2e       	mov	r15, r18
    19d6:	f8 1a       	sub	r15, r24
    19d8:	0f b6       	in	r0, 0x3f	; 63
    19da:	f8 94       	cli
    19dc:	de bf       	out	0x3e, r29	; 62
    19de:	0f be       	out	0x3f, r0	; 63
    19e0:	cd bf       	out	0x3d, r28	; 61
    19e2:	36 e0       	ldi	r19, 0x06	; 6
    19e4:	3f 15       	cp	r19, r15
    19e6:	38 f1       	brcs	.+78     	; 0x1a36 <_Z12fahradschirmdd+0xc6>
    19e8:	ef 2c       	mov	r14, r15
    19ea:	ee 0c       	add	r14, r14
    19ec:	ee 0c       	add	r14, r14
    19ee:	ee 0c       	add	r14, r14
    19f0:	ee 0c       	add	r14, r14
		if(buffer[i-((SSD1306_WIDTH/numbersmalsize)-buffersize-1)]=='.'){
    19f2:	8c 01       	movw	r16, r24
    19f4:	11 27       	eor	r17, r17
    19f6:	e1 e0       	ldi	r30, 0x01	; 1
    19f8:	f0 e0       	ldi	r31, 0x00	; 0
    19fa:	ec 0f       	add	r30, r28
    19fc:	fd 1f       	adc	r31, r29
    19fe:	ef 0d       	add	r30, r15
    1a00:	f1 1d       	adc	r31, r1
    1a02:	e0 0f       	add	r30, r16
    1a04:	f1 1f       	adc	r31, r17
    1a06:	37 97       	sbiw	r30, 0x07	; 7
    1a08:	60 81       	ld	r22, Z
    1a0a:	6e 32       	cpi	r22, 0x2E	; 46
    1a0c:	39 f4       	brne	.+14     	; 0x1a1c <_Z12fahradschirmdd+0xac>
			oled.draw_ASCI(buffer[i-((SSD1306_WIDTH/numbersmalsize)-buffersize-1)],i*numbersmalsize,4*charhighte);
    1a0e:	20 e2       	ldi	r18, 0x20	; 32
    1a10:	4e 2d       	mov	r20, r14
    1a12:	8b e3       	ldi	r24, 0x3B	; 59
    1a14:	92 e0       	ldi	r25, 0x02	; 2
    1a16:	0e 94 90 05 	call	0xb20	; 0xb20 <_ZN7Display9draw_ASCIEhhh>
    1a1a:	07 c0       	rjmp	.+14     	; 0x1a2a <_Z12fahradschirmdd+0xba>
		}
		else{
			oled.draw_number16x16(buffer[i-((SSD1306_WIDTH/numbersmalsize)-buffersize-1)]-'0',i*numbersmalsize,3*charhighte);
    1a1c:	60 53       	subi	r22, 0x30	; 48
    1a1e:	28 e1       	ldi	r18, 0x18	; 24
    1a20:	4e 2d       	mov	r20, r14
    1a22:	8b e3       	ldi	r24, 0x3B	; 59
    1a24:	92 e0       	ldi	r25, 0x02	; 2
    1a26:	0e 94 de 05 	call	0xbbc	; 0xbbc <_ZN7Display16draw_number16x16Ehhh>
	oled.clearFrame();
	header(0);
	//bottom();
	//Ausgabe der Geschwidigkeit
	buffersize=sprintf(buffer,"%3.1f",winkelgeschw);
	for(uint8_t i=((SSD1306_WIDTH/numbersmalsize)-buffersize-1);i<((SSD1306_WIDTH/numbersmalsize)-1);i++){
    1a2a:	f3 94       	inc	r15
    1a2c:	80 e1       	ldi	r24, 0x10	; 16
    1a2e:	e8 0e       	add	r14, r24
    1a30:	97 e0       	ldi	r25, 0x07	; 7
    1a32:	f9 12       	cpse	r15, r25
    1a34:	e0 cf       	rjmp	.-64     	; 0x19f6 <_Z12fahradschirmdd+0x86>
		}
		else{
			oled.draw_number16x16(buffer[i-((SSD1306_WIDTH/numbersmalsize)-buffersize-1)]-'0',i*numbersmalsize,3*charhighte);
		}
	}
	oled.draw_ASCI('k',((SSD1306_WIDTH/charsize-2)*charsize),3*charhighte);
    1a36:	28 e1       	ldi	r18, 0x18	; 24
    1a38:	42 e7       	ldi	r20, 0x72	; 114
    1a3a:	6b e6       	ldi	r22, 0x6B	; 107
    1a3c:	8b e3       	ldi	r24, 0x3B	; 59
    1a3e:	92 e0       	ldi	r25, 0x02	; 2
    1a40:	0e 94 90 05 	call	0xb20	; 0xb20 <_ZN7Display9draw_ASCIEhhh>
	oled.draw_ASCI('m',((SSD1306_WIDTH/charsize-1)*charsize),3*charhighte);
    1a44:	28 e1       	ldi	r18, 0x18	; 24
    1a46:	48 e7       	ldi	r20, 0x78	; 120
    1a48:	6d e6       	ldi	r22, 0x6D	; 109
    1a4a:	8b e3       	ldi	r24, 0x3B	; 59
    1a4c:	92 e0       	ldi	r25, 0x02	; 2
    1a4e:	0e 94 90 05 	call	0xb20	; 0xb20 <_ZN7Display9draw_ASCIEhhh>
	oled.draw_ASCI('h',((SSD1306_WIDTH/charsize-2)*charsize),4*charhighte);
    1a52:	20 e2       	ldi	r18, 0x20	; 32
    1a54:	42 e7       	ldi	r20, 0x72	; 114
    1a56:	68 e6       	ldi	r22, 0x68	; 104
    1a58:	8b e3       	ldi	r24, 0x3B	; 59
    1a5a:	92 e0       	ldi	r25, 0x02	; 2
    1a5c:	0e 94 90 05 	call	0xb20	; 0xb20 <_ZN7Display9draw_ASCIEhhh>
	//winkelausgabe
	buffersize=sprintf(buffer,"%3.1f",angle);
    1a60:	df 92       	push	r13
    1a62:	cf 92       	push	r12
    1a64:	bf 92       	push	r11
    1a66:	af 92       	push	r10
    1a68:	83 ee       	ldi	r24, 0xE3	; 227
    1a6a:	91 e0       	ldi	r25, 0x01	; 1
    1a6c:	9f 93       	push	r25
    1a6e:	8f 93       	push	r24
    1a70:	ce 01       	movw	r24, r28
    1a72:	01 96       	adiw	r24, 0x01	; 1
    1a74:	9f 93       	push	r25
    1a76:	8f 93       	push	r24
    1a78:	0e 94 27 1c 	call	0x384e	; 0x384e <sprintf>
    1a7c:	88 2e       	mov	r8, r24
	for (uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,7*charhighte);}
    1a7e:	0f b6       	in	r0, 0x3f	; 63
    1a80:	f8 94       	cli
    1a82:	de bf       	out	0x3e, r29	; 62
    1a84:	0f be       	out	0x3f, r0	; 63
    1a86:	cd bf       	out	0x3d, r28	; 61
    1a88:	88 23       	and	r24, r24
    1a8a:	a9 f0       	breq	.+42     	; 0x1ab6 <_Z12fahradschirmdd+0x146>
    1a8c:	9e 01       	movw	r18, r28
    1a8e:	2f 5f       	subi	r18, 0xFF	; 255
    1a90:	3f 4f       	sbci	r19, 0xFF	; 255
    1a92:	79 01       	movw	r14, r18
    1a94:	89 01       	movw	r16, r18
    1a96:	91 2c       	mov	r9, r1
    1a98:	f8 01       	movw	r30, r16
    1a9a:	61 91       	ld	r22, Z+
    1a9c:	8f 01       	movw	r16, r30
    1a9e:	28 e3       	ldi	r18, 0x38	; 56
    1aa0:	49 2d       	mov	r20, r9
    1aa2:	8b e3       	ldi	r24, 0x3B	; 59
    1aa4:	92 e0       	ldi	r25, 0x02	; 2
    1aa6:	0e 94 90 05 	call	0xb20	; 0xb20 <_ZN7Display9draw_ASCIEhhh>
    1aaa:	f6 e0       	ldi	r31, 0x06	; 6
    1aac:	9f 0e       	add	r9, r31
    1aae:	90 2f       	mov	r25, r16
    1ab0:	9e 19       	sub	r25, r14
    1ab2:	98 15       	cp	r25, r8
    1ab4:	88 f3       	brcs	.-30     	; 0x1a98 <_Z12fahradschirmdd+0x128>
	anzeige_kleinenadel(31,31,angle);
    1ab6:	2a 2d       	mov	r18, r10
    1ab8:	3b 2d       	mov	r19, r11
    1aba:	4c 2d       	mov	r20, r12
    1abc:	5d 2d       	mov	r21, r13
    1abe:	6f e1       	ldi	r22, 0x1F	; 31
    1ac0:	8f e1       	ldi	r24, 0x1F	; 31
    1ac2:	0e 94 3f 0a 	call	0x147e	; 0x147e <_Z19anzeige_kleinenadelhhf>
}
    1ac6:	2a 96       	adiw	r28, 0x0a	; 10
    1ac8:	0f b6       	in	r0, 0x3f	; 63
    1aca:	f8 94       	cli
    1acc:	de bf       	out	0x3e, r29	; 62
    1ace:	0f be       	out	0x3f, r0	; 63
    1ad0:	cd bf       	out	0x3d, r28	; 61
    1ad2:	df 91       	pop	r29
    1ad4:	cf 91       	pop	r28
    1ad6:	1f 91       	pop	r17
    1ad8:	0f 91       	pop	r16
    1ada:	ff 90       	pop	r15
    1adc:	ef 90       	pop	r14
    1ade:	df 90       	pop	r13
    1ae0:	cf 90       	pop	r12
    1ae2:	bf 90       	pop	r11
    1ae4:	af 90       	pop	r10
    1ae6:	9f 90       	pop	r9
    1ae8:	8f 90       	pop	r8
    1aea:	08 95       	ret

00001aec <_Z14Gaineinstellenv>:
	{
		offset[i]= (max[0]+min[0])/2;
	}
}
*/
void Gaineinstellen(){
    1aec:	cf 92       	push	r12
    1aee:	df 92       	push	r13
    1af0:	ef 92       	push	r14
    1af2:	ff 92       	push	r15
    1af4:	0f 93       	push	r16
    1af6:	1f 93       	push	r17
    1af8:	cf 93       	push	r28
    1afa:	df 93       	push	r29
    1afc:	cd b7       	in	r28, 0x3d	; 61
    1afe:	de b7       	in	r29, 0x3e	; 62
    1b00:	64 97       	sbiw	r28, 0x14	; 20
    1b02:	0f b6       	in	r0, 0x3f	; 63
    1b04:	f8 94       	cli
    1b06:	de bf       	out	0x3e, r29	; 62
    1b08:	0f be       	out	0x3f, r0	; 63
    1b0a:	cd bf       	out	0x3d, r28	; 61
	char buffer[20];
	uint8_t buffersize=0;

	oled.clearFrame();
    1b0c:	8b e3       	ldi	r24, 0x3B	; 59
    1b0e:	92 e0       	ldi	r25, 0x02	; 2
    1b10:	0e 94 af 02 	call	0x55e	; 0x55e <_ZN7Display10clearFrameEv>
	buffersize=sprintf(buffer,"1: 1370");
    1b14:	88 e0       	ldi	r24, 0x08	; 8
    1b16:	e9 ee       	ldi	r30, 0xE9	; 233
    1b18:	f1 e0       	ldi	r31, 0x01	; 1
    1b1a:	8e 01       	movw	r16, r28
    1b1c:	0f 5f       	subi	r16, 0xFF	; 255
    1b1e:	1f 4f       	sbci	r17, 0xFF	; 255
    1b20:	d8 01       	movw	r26, r16
    1b22:	01 90       	ld	r0, Z+
    1b24:	0d 92       	st	X+, r0
    1b26:	8a 95       	dec	r24
    1b28:	e1 f7       	brne	.-8      	; 0x1b22 <_Z14Gaineinstellenv+0x36>
    1b2a:	e0 2e       	mov	r14, r16
    1b2c:	f1 2e       	mov	r15, r17
    1b2e:	68 01       	movw	r12, r16
    1b30:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,0*charhighte);}
    1b32:	f6 01       	movw	r30, r12
    1b34:	61 91       	ld	r22, Z+
    1b36:	6f 01       	movw	r12, r30
    1b38:	20 e0       	ldi	r18, 0x00	; 0
    1b3a:	41 2f       	mov	r20, r17
    1b3c:	8b e3       	ldi	r24, 0x3B	; 59
    1b3e:	92 e0       	ldi	r25, 0x02	; 2
    1b40:	0e 94 90 05 	call	0xb20	; 0xb20 <_ZN7Display9draw_ASCIEhhh>
    1b44:	1a 5f       	subi	r17, 0xFA	; 250
    1b46:	1a 32       	cpi	r17, 0x2A	; 42
    1b48:	a1 f7       	brne	.-24     	; 0x1b32 <_Z14Gaineinstellenv+0x46>
	buffersize=sprintf(buffer,"2: 1090");
    1b4a:	88 e0       	ldi	r24, 0x08	; 8
    1b4c:	e1 ef       	ldi	r30, 0xF1	; 241
    1b4e:	f1 e0       	ldi	r31, 0x01	; 1
    1b50:	de 01       	movw	r26, r28
    1b52:	11 96       	adiw	r26, 0x01	; 1
    1b54:	01 90       	ld	r0, Z+
    1b56:	0d 92       	st	X+, r0
    1b58:	8a 95       	dec	r24
    1b5a:	e1 f7       	brne	.-8      	; 0x1b54 <_Z14Gaineinstellenv+0x68>
    1b5c:	ce 2c       	mov	r12, r14
    1b5e:	df 2c       	mov	r13, r15
    1b60:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,1*charhighte);}
    1b62:	f6 01       	movw	r30, r12
    1b64:	61 91       	ld	r22, Z+
    1b66:	6f 01       	movw	r12, r30
    1b68:	28 e0       	ldi	r18, 0x08	; 8
    1b6a:	41 2f       	mov	r20, r17
    1b6c:	8b e3       	ldi	r24, 0x3B	; 59
    1b6e:	92 e0       	ldi	r25, 0x02	; 2
    1b70:	0e 94 90 05 	call	0xb20	; 0xb20 <_ZN7Display9draw_ASCIEhhh>
    1b74:	1a 5f       	subi	r17, 0xFA	; 250
    1b76:	1a 32       	cpi	r17, 0x2A	; 42
    1b78:	a1 f7       	brne	.-24     	; 0x1b62 <_Z14Gaineinstellenv+0x76>
	buffersize=sprintf(buffer,"3:  820");
    1b7a:	88 e0       	ldi	r24, 0x08	; 8
    1b7c:	e9 ef       	ldi	r30, 0xF9	; 249
    1b7e:	f1 e0       	ldi	r31, 0x01	; 1
    1b80:	de 01       	movw	r26, r28
    1b82:	11 96       	adiw	r26, 0x01	; 1
    1b84:	01 90       	ld	r0, Z+
    1b86:	0d 92       	st	X+, r0
    1b88:	8a 95       	dec	r24
    1b8a:	e1 f7       	brne	.-8      	; 0x1b84 <_Z14Gaineinstellenv+0x98>
    1b8c:	ce 2c       	mov	r12, r14
    1b8e:	df 2c       	mov	r13, r15
    1b90:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,2*charhighte);}
    1b92:	f6 01       	movw	r30, r12
    1b94:	61 91       	ld	r22, Z+
    1b96:	6f 01       	movw	r12, r30
    1b98:	20 e1       	ldi	r18, 0x10	; 16
    1b9a:	41 2f       	mov	r20, r17
    1b9c:	8b e3       	ldi	r24, 0x3B	; 59
    1b9e:	92 e0       	ldi	r25, 0x02	; 2
    1ba0:	0e 94 90 05 	call	0xb20	; 0xb20 <_ZN7Display9draw_ASCIEhhh>
    1ba4:	1a 5f       	subi	r17, 0xFA	; 250
    1ba6:	1a 32       	cpi	r17, 0x2A	; 42
    1ba8:	a1 f7       	brne	.-24     	; 0x1b92 <_Z14Gaineinstellenv+0xa6>
	buffersize=sprintf(buffer,"4:  660");
    1baa:	88 e0       	ldi	r24, 0x08	; 8
    1bac:	e1 e0       	ldi	r30, 0x01	; 1
    1bae:	f2 e0       	ldi	r31, 0x02	; 2
    1bb0:	de 01       	movw	r26, r28
    1bb2:	11 96       	adiw	r26, 0x01	; 1
    1bb4:	01 90       	ld	r0, Z+
    1bb6:	0d 92       	st	X+, r0
    1bb8:	8a 95       	dec	r24
    1bba:	e1 f7       	brne	.-8      	; 0x1bb4 <_Z14Gaineinstellenv+0xc8>
    1bbc:	ce 2c       	mov	r12, r14
    1bbe:	df 2c       	mov	r13, r15
    1bc0:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,3*charhighte);}
    1bc2:	f6 01       	movw	r30, r12
    1bc4:	61 91       	ld	r22, Z+
    1bc6:	6f 01       	movw	r12, r30
    1bc8:	28 e1       	ldi	r18, 0x18	; 24
    1bca:	41 2f       	mov	r20, r17
    1bcc:	8b e3       	ldi	r24, 0x3B	; 59
    1bce:	92 e0       	ldi	r25, 0x02	; 2
    1bd0:	0e 94 90 05 	call	0xb20	; 0xb20 <_ZN7Display9draw_ASCIEhhh>
    1bd4:	1a 5f       	subi	r17, 0xFA	; 250
    1bd6:	1a 32       	cpi	r17, 0x2A	; 42
    1bd8:	a1 f7       	brne	.-24     	; 0x1bc2 <_Z14Gaineinstellenv+0xd6>
	buffersize=sprintf(buffer,"5:  440");
    1bda:	88 e0       	ldi	r24, 0x08	; 8
    1bdc:	e9 e0       	ldi	r30, 0x09	; 9
    1bde:	f2 e0       	ldi	r31, 0x02	; 2
    1be0:	de 01       	movw	r26, r28
    1be2:	11 96       	adiw	r26, 0x01	; 1
    1be4:	01 90       	ld	r0, Z+
    1be6:	0d 92       	st	X+, r0
    1be8:	8a 95       	dec	r24
    1bea:	e1 f7       	brne	.-8      	; 0x1be4 <_Z14Gaineinstellenv+0xf8>
    1bec:	ce 2c       	mov	r12, r14
    1bee:	df 2c       	mov	r13, r15
    1bf0:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,4*charhighte);}
    1bf2:	f6 01       	movw	r30, r12
    1bf4:	61 91       	ld	r22, Z+
    1bf6:	6f 01       	movw	r12, r30
    1bf8:	20 e2       	ldi	r18, 0x20	; 32
    1bfa:	41 2f       	mov	r20, r17
    1bfc:	8b e3       	ldi	r24, 0x3B	; 59
    1bfe:	92 e0       	ldi	r25, 0x02	; 2
    1c00:	0e 94 90 05 	call	0xb20	; 0xb20 <_ZN7Display9draw_ASCIEhhh>
    1c04:	1a 5f       	subi	r17, 0xFA	; 250
    1c06:	1a 32       	cpi	r17, 0x2A	; 42
    1c08:	a1 f7       	brne	.-24     	; 0x1bf2 <_Z14Gaineinstellenv+0x106>
	buffersize=sprintf(buffer,"6:  390");
    1c0a:	88 e0       	ldi	r24, 0x08	; 8
    1c0c:	e1 e1       	ldi	r30, 0x11	; 17
    1c0e:	f2 e0       	ldi	r31, 0x02	; 2
    1c10:	de 01       	movw	r26, r28
    1c12:	11 96       	adiw	r26, 0x01	; 1
    1c14:	01 90       	ld	r0, Z+
    1c16:	0d 92       	st	X+, r0
    1c18:	8a 95       	dec	r24
    1c1a:	e1 f7       	brne	.-8      	; 0x1c14 <_Z14Gaineinstellenv+0x128>
    1c1c:	ce 2c       	mov	r12, r14
    1c1e:	df 2c       	mov	r13, r15
    1c20:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,5*charhighte);}
    1c22:	f6 01       	movw	r30, r12
    1c24:	61 91       	ld	r22, Z+
    1c26:	6f 01       	movw	r12, r30
    1c28:	28 e2       	ldi	r18, 0x28	; 40
    1c2a:	41 2f       	mov	r20, r17
    1c2c:	8b e3       	ldi	r24, 0x3B	; 59
    1c2e:	92 e0       	ldi	r25, 0x02	; 2
    1c30:	0e 94 90 05 	call	0xb20	; 0xb20 <_ZN7Display9draw_ASCIEhhh>
    1c34:	1a 5f       	subi	r17, 0xFA	; 250
    1c36:	1a 32       	cpi	r17, 0x2A	; 42
    1c38:	a1 f7       	brne	.-24     	; 0x1c22 <_Z14Gaineinstellenv+0x136>
	buffersize=sprintf(buffer,"7:  330");
    1c3a:	88 e0       	ldi	r24, 0x08	; 8
    1c3c:	e9 e1       	ldi	r30, 0x19	; 25
    1c3e:	f2 e0       	ldi	r31, 0x02	; 2
    1c40:	de 01       	movw	r26, r28
    1c42:	11 96       	adiw	r26, 0x01	; 1
    1c44:	01 90       	ld	r0, Z+
    1c46:	0d 92       	st	X+, r0
    1c48:	8a 95       	dec	r24
    1c4a:	e1 f7       	brne	.-8      	; 0x1c44 <_Z14Gaineinstellenv+0x158>
    1c4c:	ce 2c       	mov	r12, r14
    1c4e:	df 2c       	mov	r13, r15
    1c50:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,6*charhighte);}
    1c52:	f6 01       	movw	r30, r12
    1c54:	61 91       	ld	r22, Z+
    1c56:	6f 01       	movw	r12, r30
    1c58:	20 e3       	ldi	r18, 0x30	; 48
    1c5a:	41 2f       	mov	r20, r17
    1c5c:	8b e3       	ldi	r24, 0x3B	; 59
    1c5e:	92 e0       	ldi	r25, 0x02	; 2
    1c60:	0e 94 90 05 	call	0xb20	; 0xb20 <_ZN7Display9draw_ASCIEhhh>
    1c64:	1a 5f       	subi	r17, 0xFA	; 250
    1c66:	1a 32       	cpi	r17, 0x2A	; 42
    1c68:	a1 f7       	brne	.-24     	; 0x1c52 <_Z14Gaineinstellenv+0x166>
	buffersize=sprintf(buffer,"8:  230");
    1c6a:	88 e0       	ldi	r24, 0x08	; 8
    1c6c:	e1 e2       	ldi	r30, 0x21	; 33
    1c6e:	f2 e0       	ldi	r31, 0x02	; 2
    1c70:	de 01       	movw	r26, r28
    1c72:	11 96       	adiw	r26, 0x01	; 1
    1c74:	01 90       	ld	r0, Z+
    1c76:	0d 92       	st	X+, r0
    1c78:	8a 95       	dec	r24
    1c7a:	e1 f7       	brne	.-8      	; 0x1c74 <_Z14Gaineinstellenv+0x188>
    1c7c:	ce 2c       	mov	r12, r14
    1c7e:	df 2c       	mov	r13, r15
    1c80:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,7*charhighte);}
    1c82:	f6 01       	movw	r30, r12
    1c84:	61 91       	ld	r22, Z+
    1c86:	6f 01       	movw	r12, r30
    1c88:	28 e3       	ldi	r18, 0x38	; 56
    1c8a:	41 2f       	mov	r20, r17
    1c8c:	8b e3       	ldi	r24, 0x3B	; 59
    1c8e:	92 e0       	ldi	r25, 0x02	; 2
    1c90:	0e 94 90 05 	call	0xb20	; 0xb20 <_ZN7Display9draw_ASCIEhhh>
    1c94:	1a 5f       	subi	r17, 0xFA	; 250
    1c96:	1a 32       	cpi	r17, 0x2A	; 42
    1c98:	a1 f7       	brne	.-24     	; 0x1c82 <_Z14Gaineinstellenv+0x196>
}
    1c9a:	64 96       	adiw	r28, 0x14	; 20
    1c9c:	0f b6       	in	r0, 0x3f	; 63
    1c9e:	f8 94       	cli
    1ca0:	de bf       	out	0x3e, r29	; 62
    1ca2:	0f be       	out	0x3f, r0	; 63
    1ca4:	cd bf       	out	0x3d, r28	; 61
    1ca6:	df 91       	pop	r29
    1ca8:	cf 91       	pop	r28
    1caa:	1f 91       	pop	r17
    1cac:	0f 91       	pop	r16
    1cae:	ff 90       	pop	r15
    1cb0:	ef 90       	pop	r14
    1cb2:	df 90       	pop	r13
    1cb4:	cf 90       	pop	r12
    1cb6:	08 95       	ret

00001cb8 <_Z15anzeige_kompassd>:

void anzeige_kompass(double winkel){
    1cb8:	9f 92       	push	r9
    1cba:	af 92       	push	r10
    1cbc:	bf 92       	push	r11
    1cbe:	cf 92       	push	r12
    1cc0:	df 92       	push	r13
    1cc2:	ef 92       	push	r14
    1cc4:	ff 92       	push	r15
    1cc6:	0f 93       	push	r16
    1cc8:	1f 93       	push	r17
    1cca:	cf 93       	push	r28
    1ccc:	df 93       	push	r29
    1cce:	cd b7       	in	r28, 0x3d	; 61
    1cd0:	de b7       	in	r29, 0x3e	; 62
    1cd2:	64 97       	sbiw	r28, 0x14	; 20
    1cd4:	0f b6       	in	r0, 0x3f	; 63
    1cd6:	f8 94       	cli
    1cd8:	de bf       	out	0x3e, r29	; 62
    1cda:	0f be       	out	0x3f, r0	; 63
    1cdc:	cd bf       	out	0x3d, r28	; 61
    1cde:	a6 2e       	mov	r10, r22
    1ce0:	b7 2e       	mov	r11, r23
    1ce2:	c8 2e       	mov	r12, r24
    1ce4:	d9 2e       	mov	r13, r25
	oled.clearFrame();
    1ce6:	8b e3       	ldi	r24, 0x3B	; 59
    1ce8:	92 e0       	ldi	r25, 0x02	; 2
    1cea:	0e 94 af 02 	call	0x55e	; 0x55e <_ZN7Display10clearFrameEv>
    1cee:	0f 2e       	mov	r0, r31
    1cf0:	fc e3       	ldi	r31, 0x3C	; 60
    1cf2:	ef 2e       	mov	r14, r31
    1cf4:	f6 e0       	ldi	r31, 0x06	; 6
    1cf6:	ff 2e       	mov	r15, r31
    1cf8:	f0 2d       	mov	r31, r0
    1cfa:	11 e4       	ldi	r17, 0x41	; 65
	char buffer[20];
	uint8_t buffersize=0;
	//Uhrzeit
	for(uint8_t i=0;i<bitsderrtc;i++){oled.draw_ASCI(rtc.msg_uhr[i],65+i*charsize,0);}
    1cfc:	f7 01       	movw	r30, r14
    1cfe:	61 91       	ld	r22, Z+
    1d00:	7f 01       	movw	r14, r30
    1d02:	20 e0       	ldi	r18, 0x00	; 0
    1d04:	41 2f       	mov	r20, r17
    1d06:	8b e3       	ldi	r24, 0x3B	; 59
    1d08:	92 e0       	ldi	r25, 0x02	; 2
    1d0a:	0e 94 90 05 	call	0xb20	; 0xb20 <_ZN7Display9draw_ASCIEhhh>
    1d0e:	1a 5f       	subi	r17, 0xFA	; 250
    1d10:	11 37       	cpi	r17, 0x71	; 113
    1d12:	a1 f7       	brne	.-24     	; 0x1cfc <_Z15anzeige_kompassd+0x44>
	//winkel als Zahl ausgeben
	buffersize=sprintf(buffer,"angle=%.0f",winkel);
    1d14:	df 92       	push	r13
    1d16:	cf 92       	push	r12
    1d18:	bf 92       	push	r11
    1d1a:	af 92       	push	r10
    1d1c:	89 e2       	ldi	r24, 0x29	; 41
    1d1e:	92 e0       	ldi	r25, 0x02	; 2
    1d20:	9f 93       	push	r25
    1d22:	8f 93       	push	r24
    1d24:	9e 01       	movw	r18, r28
    1d26:	2f 5f       	subi	r18, 0xFF	; 255
    1d28:	3f 4f       	sbci	r19, 0xFF	; 255
    1d2a:	3f 93       	push	r19
    1d2c:	2f 93       	push	r18
    1d2e:	0e 94 27 1c 	call	0x384e	; 0x384e <sprintf>
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],65+i*charsize,7*charhighte);}
    1d32:	0f b6       	in	r0, 0x3f	; 63
    1d34:	f8 94       	cli
    1d36:	de bf       	out	0x3e, r29	; 62
    1d38:	0f be       	out	0x3f, r0	; 63
    1d3a:	cd bf       	out	0x3d, r28	; 61
    1d3c:	88 23       	and	r24, r24
    1d3e:	f1 f0       	breq	.+60     	; 0x1d7c <_Z15anzeige_kompassd+0xc4>
    1d40:	8e 01       	movw	r16, r28
    1d42:	0f 5f       	subi	r16, 0xFF	; 255
    1d44:	1f 4f       	sbci	r17, 0xFF	; 255
    1d46:	81 50       	subi	r24, 0x01	; 1
    1d48:	68 94       	set
    1d4a:	ee 24       	eor	r14, r14
    1d4c:	e1 f8       	bld	r14, 1
    1d4e:	f1 2c       	mov	r15, r1
    1d50:	ec 0e       	add	r14, r28
    1d52:	fd 1e       	adc	r15, r29
    1d54:	e8 0e       	add	r14, r24
    1d56:	f1 1c       	adc	r15, r1
    1d58:	0f 2e       	mov	r0, r31
    1d5a:	f1 e4       	ldi	r31, 0x41	; 65
    1d5c:	9f 2e       	mov	r9, r31
    1d5e:	f0 2d       	mov	r31, r0
    1d60:	f8 01       	movw	r30, r16
    1d62:	61 91       	ld	r22, Z+
    1d64:	8f 01       	movw	r16, r30
    1d66:	28 e3       	ldi	r18, 0x38	; 56
    1d68:	49 2d       	mov	r20, r9
    1d6a:	8b e3       	ldi	r24, 0x3B	; 59
    1d6c:	92 e0       	ldi	r25, 0x02	; 2
    1d6e:	0e 94 90 05 	call	0xb20	; 0xb20 <_ZN7Display9draw_ASCIEhhh>
    1d72:	f6 e0       	ldi	r31, 0x06	; 6
    1d74:	9f 0e       	add	r9, r31
    1d76:	0e 15       	cp	r16, r14
    1d78:	1f 05       	cpc	r17, r15
    1d7a:	91 f7       	brne	.-28     	; 0x1d60 <_Z15anzeige_kompassd+0xa8>
	//dreieck als Zeiger
	anzeige_nadel(31,31,winkel);
    1d7c:	2a 2d       	mov	r18, r10
    1d7e:	3b 2d       	mov	r19, r11
    1d80:	4c 2d       	mov	r20, r12
    1d82:	5d 2d       	mov	r21, r13
    1d84:	6f e1       	ldi	r22, 0x1F	; 31
    1d86:	8f e1       	ldi	r24, 0x1F	; 31
    1d88:	0e 94 21 0a 	call	0x1442	; 0x1442 <_Z13anzeige_nadelhhf>
	//Richtung ausgeben
	anzeige_richtung(winkel);	
    1d8c:	6a 2d       	mov	r22, r10
    1d8e:	7b 2d       	mov	r23, r11
    1d90:	8c 2d       	mov	r24, r12
    1d92:	9d 2d       	mov	r25, r13
    1d94:	0e 94 63 09 	call	0x12c6	; 0x12c6 <_Z16anzeige_richtungf>
}
    1d98:	64 96       	adiw	r28, 0x14	; 20
    1d9a:	0f b6       	in	r0, 0x3f	; 63
    1d9c:	f8 94       	cli
    1d9e:	de bf       	out	0x3e, r29	; 62
    1da0:	0f be       	out	0x3f, r0	; 63
    1da2:	cd bf       	out	0x3d, r28	; 61
    1da4:	df 91       	pop	r29
    1da6:	cf 91       	pop	r28
    1da8:	1f 91       	pop	r17
    1daa:	0f 91       	pop	r16
    1dac:	ff 90       	pop	r15
    1dae:	ef 90       	pop	r14
    1db0:	df 90       	pop	r13
    1db2:	cf 90       	pop	r12
    1db4:	bf 90       	pop	r11
    1db6:	af 90       	pop	r10
    1db8:	9f 90       	pop	r9
    1dba:	08 95       	ret

00001dbc <_Z15initialisierungv>:
    }
}

void initialisierung(){
	//nullen der Flagregister
	rtc.interupts=0;
    1dbc:	10 92 4b 06 	sts	0x064B, r1
	anzeige=0;
    1dc0:	10 92 35 02 	sts	0x0235, r1
    1dc4:	10 92 34 02 	sts	0x0234, r1
	//Ausgaenge und Eingaenge einstellen
	DDRD = (1<<PIND0) | (1<<PIND1) | (1<<PIND2) | (1<<PIND3);	//Pins zur Ausgabe
    1dc8:	8f e0       	ldi	r24, 0x0F	; 15
    1dca:	8a b9       	out	0x0a, r24	; 10
	DDRD &= ~((1<<PIND4) | (1<<PIND5) | (1<<PIND6));			//Restliche Pins als Eingaenge schalten
    1dcc:	8a b1       	in	r24, 0x0a	; 10
    1dce:	8f 78       	andi	r24, 0x8F	; 143
    1dd0:	8a b9       	out	0x0a, r24	; 10
	//I2C Interface
	//twi_init();
	//Display
	oled.InitializeDisplay();
    1dd2:	8b e3       	ldi	r24, 0x3B	; 59
    1dd4:	92 e0       	ldi	r25, 0x02	; 2
    1dd6:	0e 94 d6 02 	call	0x5ac	; 0x5ac <_ZN7Display17InitializeDisplayEv>
	//initialisierung wird im konstruktor vorgenommen
	oled.clearFrame();
    1dda:	8b e3       	ldi	r24, 0x3B	; 59
    1ddc:	92 e0       	ldi	r25, 0x02	; 2
    1dde:	0e 94 af 02 	call	0x55e	; 0x55e <_ZN7Display10clearFrameEv>
	//HMC5883L initialisieren
	//kompass.initialize_HMC5883L();
	//initialisierung wird im Konstruktor erledigt
	
	//ADC Initialisieren auf CH0
	ADMUX = (1<<REFS0);
    1de2:	80 e4       	ldi	r24, 0x40	; 64
    1de4:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA = (1<<ADPS1) | (1<<ADPS0);
    1de8:	ea e7       	ldi	r30, 0x7A	; 122
    1dea:	f0 e0       	ldi	r31, 0x00	; 0
    1dec:	83 e0       	ldi	r24, 0x03	; 3
    1dee:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADEN);
    1df0:	80 81       	ld	r24, Z
    1df2:	80 68       	ori	r24, 0x80	; 128
    1df4:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);
    1df6:	80 81       	ld	r24, Z
    1df8:	80 64       	ori	r24, 0x40	; 64
    1dfa:	80 83       	st	Z, r24
	while (ADCSRA & (1<<ADSC) ) {
    1dfc:	80 81       	ld	r24, Z
    1dfe:	86 fd       	sbrc	r24, 6
    1e00:	fd cf       	rjmp	.-6      	; 0x1dfc <_Z15initialisierungv+0x40>
	}
	(void) ADCW;
    1e02:	80 91 78 00 	lds	r24, 0x0078
    1e06:	90 91 79 00 	lds	r25, 0x0079
	//Wilkommensanzeige
	willkommenpage();
    1e0a:	0e 94 59 08 	call	0x10b2	; 0x10b2 <_Z14willkommenpagev>
	//Uhreinstellungen
	//uhreinstellen();
	//*************************************************
	//Nur Test, damit es schneller geht beim Start
	rtc.dummyeinst();
    1e0e:	8c e3       	ldi	r24, 0x3C	; 60
    1e10:	96 e0       	ldi	r25, 0x06	; 6
    1e12:	0e 94 08 14 	call	0x2810	; 0x2810 <_ZN3RTC10dummyeinstEv>
	//*********************************
	rtc.RTCstart();
    1e16:	8c e3       	ldi	r24, 0x3C	; 60
    1e18:	96 e0       	ldi	r25, 0x06	; 6
    1e1a:	0e 94 14 14 	call	0x2828	; 0x2828 <_ZN3RTC8RTCstartEv>
	//ausgabe starten
	anzeige|=(1<<Uhrflag);
    1e1e:	80 91 34 02 	lds	r24, 0x0234
    1e22:	90 91 35 02 	lds	r25, 0x0235
    1e26:	81 60       	ori	r24, 0x01	; 1
    1e28:	90 93 35 02 	sts	0x0235, r25
    1e2c:	80 93 34 02 	sts	0x0234, r24
	sei();
    1e30:	78 94       	sei
    1e32:	08 95       	ret

00001e34 <_Z19maininterupthandlerv>:
}

void maininterupthandler(){
	//interupt dierekt aus der rtc
	if((rtc.interupts & (1<<hundinterupt))){
    1e34:	80 91 4b 06 	lds	r24, 0x064B
    1e38:	80 ff       	sbrs	r24, 0
    1e3a:	09 c0       	rjmp	.+18     	; 0x1e4e <_Z19maininterupthandlerv+0x1a>
		rtc.zeit();
    1e3c:	8c e3       	ldi	r24, 0x3C	; 60
    1e3e:	96 e0       	ldi	r25, 0x06	; 6
    1e40:	0e 94 ae 13 	call	0x275c	; 0x275c <_ZN3RTC4zeitEv>
		rtc.interupts&=~(1<<hundinterupt);
    1e44:	eb e4       	ldi	r30, 0x4B	; 75
    1e46:	f6 e0       	ldi	r31, 0x06	; 6
    1e48:	80 81       	ld	r24, Z
    1e4a:	8e 7f       	andi	r24, 0xFE	; 254
    1e4c:	80 83       	st	Z, r24
    1e4e:	08 95       	ret

00001e50 <_Z14anzeigehandlerv>:
	}
}

void anzeigehandler(){
	//Handler fuer 1Hz Flag
	if ((rtc.interupts & (1<<sekundeninterupt)))
    1e50:	80 91 4b 06 	lds	r24, 0x064B
    1e54:	81 ff       	sbrs	r24, 1
    1e56:	80 c0       	rjmp	.+256    	; 0x1f58 <_Z14anzeigehandlerv+0x108>
	{
		//Handler fuer die Anzeige der Seiten
		//Die einzelnen Funktionen beschreiben nur den Framebuffer und nicht dierekt das Display
		if ((anzeige&(1<<menueflag)) && (anzeige&(1<<Uhrflag)))
    1e58:	80 91 34 02 	lds	r24, 0x0234
    1e5c:	90 91 35 02 	lds	r25, 0x0235
    1e60:	9c 01       	movw	r18, r24
    1e62:	21 70       	andi	r18, 0x01	; 1
    1e64:	30 72       	andi	r19, 0x20	; 32
    1e66:	21 30       	cpi	r18, 0x01	; 1
    1e68:	30 42       	sbci	r19, 0x20	; 32
    1e6a:	61 f4       	brne	.+24     	; 0x1e84 <_Z14anzeigehandlerv+0x34>
		{
			menue_uhr();
    1e6c:	0e 94 81 0b 	call	0x1702	; 0x1702 <_Z9menue_uhrv>
			anzeige|=(1<<refreshdisplay);
    1e70:	80 91 34 02 	lds	r24, 0x0234
    1e74:	90 91 35 02 	lds	r25, 0x0235
    1e78:	90 68       	ori	r25, 0x80	; 128
    1e7a:	90 93 35 02 	sts	0x0235, r25
    1e7e:	80 93 34 02 	sts	0x0234, r24
    1e82:	65 c0       	rjmp	.+202    	; 0x1f4e <_Z14anzeigehandlerv+0xfe>
    1e84:	9c 01       	movw	r18, r24
    1e86:	28 70       	andi	r18, 0x08	; 8
    1e88:	30 72       	andi	r19, 0x20	; 32
		}
		else if ((anzeige&(1<<menueflag)) && (anzeige&(1<<Einstellungsflag)))
    1e8a:	28 30       	cpi	r18, 0x08	; 8
    1e8c:	30 42       	sbci	r19, 0x20	; 32
    1e8e:	61 f4       	brne	.+24     	; 0x1ea8 <_Z14anzeigehandlerv+0x58>
		{
			menue_einst();
    1e90:	0e 94 13 0b 	call	0x1626	; 0x1626 <_Z11menue_einstv>
			anzeige|=(1<<refreshdisplay);
    1e94:	80 91 34 02 	lds	r24, 0x0234
    1e98:	90 91 35 02 	lds	r25, 0x0235
    1e9c:	90 68       	ori	r25, 0x80	; 128
    1e9e:	90 93 35 02 	sts	0x0235, r25
    1ea2:	80 93 34 02 	sts	0x0234, r24
    1ea6:	53 c0       	rjmp	.+166    	; 0x1f4e <_Z14anzeigehandlerv+0xfe>
		}
		else if ((anzeige&(1<<menueflag)))
    1ea8:	95 ff       	sbrs	r25, 5
    1eaa:	0c c0       	rjmp	.+24     	; 0x1ec4 <_Z14anzeigehandlerv+0x74>
		{
			menue_haupt();
    1eac:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <_Z11menue_hauptv>
			anzeige|=(1<<refreshdisplay);
    1eb0:	80 91 34 02 	lds	r24, 0x0234
    1eb4:	90 91 35 02 	lds	r25, 0x0235
    1eb8:	90 68       	ori	r25, 0x80	; 128
    1eba:	90 93 35 02 	sts	0x0235, r25
    1ebe:	80 93 34 02 	sts	0x0234, r24
    1ec2:	45 c0       	rjmp	.+138    	; 0x1f4e <_Z14anzeigehandlerv+0xfe>
		}
		else if ((anzeige&(1<<Kompasgaineinstellenflag)))
    1ec4:	85 ff       	sbrs	r24, 5
    1ec6:	0c c0       	rjmp	.+24     	; 0x1ee0 <_Z14anzeigehandlerv+0x90>
		{
			Gaineinstellen();
    1ec8:	0e 94 76 0d 	call	0x1aec	; 0x1aec <_Z14Gaineinstellenv>
			anzeige|=(1<<refreshdisplay);
    1ecc:	80 91 34 02 	lds	r24, 0x0234
    1ed0:	90 91 35 02 	lds	r25, 0x0235
    1ed4:	90 68       	ori	r25, 0x80	; 128
    1ed6:	90 93 35 02 	sts	0x0235, r25
    1eda:	80 93 34 02 	sts	0x0234, r24
    1ede:	37 c0       	rjmp	.+110    	; 0x1f4e <_Z14anzeigehandlerv+0xfe>
		}
		else if ((anzeige&(1<<Uhrflag)))
    1ee0:	80 ff       	sbrs	r24, 0
    1ee2:	0c c0       	rjmp	.+24     	; 0x1efc <_Z14anzeigehandlerv+0xac>
		{
			uhranzeigen();
    1ee4:	0e 94 07 0c 	call	0x180e	; 0x180e <_Z11uhranzeigenv>
			anzeige|=(1<<refreshdisplay);
    1ee8:	80 91 34 02 	lds	r24, 0x0234
    1eec:	90 91 35 02 	lds	r25, 0x0235
    1ef0:	90 68       	ori	r25, 0x80	; 128
    1ef2:	90 93 35 02 	sts	0x0235, r25
    1ef6:	80 93 34 02 	sts	0x0234, r24
    1efa:	29 c0       	rjmp	.+82     	; 0x1f4e <_Z14anzeigehandlerv+0xfe>
		}
		else if ((anzeige&(1<<Kompasflag)))
    1efc:	82 ff       	sbrs	r24, 2
    1efe:	10 c0       	rjmp	.+32     	; 0x1f20 <_Z14anzeigehandlerv+0xd0>
		{
			anzeige_kompass(kompass.angle());
    1f00:	8c e4       	ldi	r24, 0x4C	; 76
    1f02:	96 e0       	ldi	r25, 0x06	; 6
    1f04:	0e 94 12 13 	call	0x2624	; 0x2624 <_ZN7Kompass5angleEv>
    1f08:	0e 94 5c 0e 	call	0x1cb8	; 0x1cb8 <_Z15anzeige_kompassd>
			anzeige|=(1<<refreshdisplay);
    1f0c:	80 91 34 02 	lds	r24, 0x0234
    1f10:	90 91 35 02 	lds	r25, 0x0235
    1f14:	90 68       	ori	r25, 0x80	; 128
    1f16:	90 93 35 02 	sts	0x0235, r25
    1f1a:	80 93 34 02 	sts	0x0234, r24
    1f1e:	17 c0       	rjmp	.+46     	; 0x1f4e <_Z14anzeigehandlerv+0xfe>
		}
		else if ((anzeige&(1<<Fahradflag)))
    1f20:	81 ff       	sbrs	r24, 1
    1f22:	15 c0       	rjmp	.+42     	; 0x1f4e <_Z14anzeigehandlerv+0xfe>
		{
			fahradschirm(12.3,kompass.angle());
    1f24:	8c e4       	ldi	r24, 0x4C	; 76
    1f26:	96 e0       	ldi	r25, 0x06	; 6
    1f28:	0e 94 12 13 	call	0x2624	; 0x2624 <_ZN7Kompass5angleEv>
    1f2c:	9b 01       	movw	r18, r22
    1f2e:	ac 01       	movw	r20, r24
    1f30:	6d ec       	ldi	r22, 0xCD	; 205
    1f32:	7c ec       	ldi	r23, 0xCC	; 204
    1f34:	84 e4       	ldi	r24, 0x44	; 68
    1f36:	91 e4       	ldi	r25, 0x41	; 65
    1f38:	0e 94 b8 0c 	call	0x1970	; 0x1970 <_Z12fahradschirmdd>
			anzeige|=(1<<refreshdisplay);
    1f3c:	80 91 34 02 	lds	r24, 0x0234
    1f40:	90 91 35 02 	lds	r25, 0x0235
    1f44:	90 68       	ori	r25, 0x80	; 128
    1f46:	90 93 35 02 	sts	0x0235, r25
    1f4a:	80 93 34 02 	sts	0x0234, r24
		}
		rtc.interupts&=~(1<<sekundeninterupt);
    1f4e:	eb e4       	ldi	r30, 0x4B	; 75
    1f50:	f6 e0       	ldi	r31, 0x06	; 6
    1f52:	80 81       	ld	r24, Z
    1f54:	8d 7f       	andi	r24, 0xFD	; 253
    1f56:	80 83       	st	Z, r24
	}
	//neuen Framebuffer an das Dispay senden
	if ((anzeige&(1<<refreshdisplay)))
    1f58:	80 91 34 02 	lds	r24, 0x0234
    1f5c:	90 91 35 02 	lds	r25, 0x0235
    1f60:	99 23       	and	r25, r25
    1f62:	6c f4       	brge	.+26     	; 0x1f7e <_Z14anzeigehandlerv+0x12e>
	{
		oled.sendFrame();
    1f64:	8b e3       	ldi	r24, 0x3B	; 59
    1f66:	92 e0       	ldi	r25, 0x02	; 2
    1f68:	0e 94 4b 03 	call	0x696	; 0x696 <_ZN7Display9sendFrameEv>
		anzeige&=~(1<<refreshdisplay);
    1f6c:	80 91 34 02 	lds	r24, 0x0234
    1f70:	90 91 35 02 	lds	r25, 0x0235
    1f74:	9f 77       	andi	r25, 0x7F	; 127
    1f76:	90 93 35 02 	sts	0x0235, r25
    1f7a:	80 93 34 02 	sts	0x0234, r24
    1f7e:	08 95       	ret

00001f80 <_Z14eingabehandlerh>:
	}
}

void eingabehandler(uint8_t taste){
	if (taste!='A')
    1f80:	81 34       	cpi	r24, 0x41	; 65
    1f82:	09 f4       	brne	.+2      	; 0x1f86 <_Z14eingabehandlerh+0x6>
    1f84:	61 c1       	rjmp	.+706    	; 0x2248 <_Z14eingabehandlerh+0x2c8>
	{
		if (anzeige==255)
    1f86:	20 91 34 02 	lds	r18, 0x0234
    1f8a:	30 91 35 02 	lds	r19, 0x0235
    1f8e:	2f 3f       	cpi	r18, 0xFF	; 255
    1f90:	31 05       	cpc	r19, r1
    1f92:	61 f4       	brne	.+24     	; 0x1fac <_Z14eingabehandlerh+0x2c>
		{
			oled.ssd1306_command(SSD1306_DISPLAYON);
    1f94:	6f ea       	ldi	r22, 0xAF	; 175
    1f96:	8b e3       	ldi	r24, 0x3B	; 59
    1f98:	92 e0       	ldi	r25, 0x02	; 2
    1f9a:	0e 94 ba 02 	call	0x574	; 0x574 <_ZN7Display15ssd1306_commandEh>
			//entweder display aus oder das Menue starten
			anzeige=(1<<menueflag);
    1f9e:	80 e0       	ldi	r24, 0x00	; 0
    1fa0:	90 e2       	ldi	r25, 0x20	; 32
    1fa2:	90 93 35 02 	sts	0x0235, r25
    1fa6:	80 93 34 02 	sts	0x0234, r24
    1faa:	08 95       	ret
    1fac:	a9 01       	movw	r20, r18
    1fae:	41 70       	andi	r20, 0x01	; 1
    1fb0:	50 72       	andi	r21, 0x20	; 32
		}
		//gleicher Handler wie oben, aber hier speziell fuer die Bearbeitung von Tastereingaben mit switch fuer die Tasten
		//es sind einfach so viele Tasten moeglich 
		else if ((anzeige&(1<<menueflag)) && (anzeige&(1<<Uhrflag)))	//Menue der Uhr
    1fb2:	41 30       	cpi	r20, 0x01	; 1
    1fb4:	50 42       	sbci	r21, 0x20	; 32
    1fb6:	09 f0       	breq	.+2      	; 0x1fba <_Z14eingabehandlerh+0x3a>
    1fb8:	48 c0       	rjmp	.+144    	; 0x204a <_Z14eingabehandlerh+0xca>
		{	
			anzeige&=~((1<<menueflag)|(1<<Uhrflag));
    1fba:	2e 7f       	andi	r18, 0xFE	; 254
    1fbc:	3f 7d       	andi	r19, 0xDF	; 223
    1fbe:	30 93 35 02 	sts	0x0235, r19
    1fc2:	20 93 34 02 	sts	0x0234, r18
			switch (taste)
    1fc6:	82 33       	cpi	r24, 0x32	; 50
    1fc8:	79 f0       	breq	.+30     	; 0x1fe8 <_Z14eingabehandlerh+0x68>
    1fca:	18 f4       	brcc	.+6      	; 0x1fd2 <_Z14eingabehandlerh+0x52>
    1fcc:	81 33       	cpi	r24, 0x31	; 49
    1fce:	31 f0       	breq	.+12     	; 0x1fdc <_Z14eingabehandlerh+0x5c>
    1fd0:	35 c0       	rjmp	.+106    	; 0x203c <_Z14eingabehandlerh+0xbc>
    1fd2:	83 33       	cpi	r24, 0x33	; 51
    1fd4:	b9 f0       	breq	.+46     	; 0x2004 <_Z14eingabehandlerh+0x84>
    1fd6:	84 33       	cpi	r24, 0x34	; 52
    1fd8:	19 f1       	breq	.+70     	; 0x2020 <_Z14eingabehandlerh+0xa0>
    1fda:	30 c0       	rjmp	.+96     	; 0x203c <_Z14eingabehandlerh+0xbc>
			{
				case '1':
					//Wechseln auf die Uhr
					anzeige|=(1<<Uhrflag);
    1fdc:	21 60       	ori	r18, 0x01	; 1
    1fde:	30 93 35 02 	sts	0x0235, r19
    1fe2:	20 93 34 02 	sts	0x0234, r18
					break;
    1fe6:	08 95       	ret
				
				case '2':
					//starten der Stoppuhr momentan nicht aktiv, da nicht auf Handler niveau
					//stoppuhr();
					oled.clearFrame();
    1fe8:	8b e3       	ldi	r24, 0x3B	; 59
    1fea:	92 e0       	ldi	r25, 0x02	; 2
    1fec:	0e 94 af 02 	call	0x55e	; 0x55e <_ZN7Display10clearFrameEv>
					anzeige|=(1<<refreshdisplay);
    1ff0:	80 91 34 02 	lds	r24, 0x0234
    1ff4:	90 91 35 02 	lds	r25, 0x0235
    1ff8:	90 68       	ori	r25, 0x80	; 128
    1ffa:	90 93 35 02 	sts	0x0235, r25
    1ffe:	80 93 34 02 	sts	0x0234, r24
					break;
    2002:	08 95       	ret
				
				case '3':
					//Starten der Timer APP (nicht implementiert)
					oled.clearFrame();
    2004:	8b e3       	ldi	r24, 0x3B	; 59
    2006:	92 e0       	ldi	r25, 0x02	; 2
    2008:	0e 94 af 02 	call	0x55e	; 0x55e <_ZN7Display10clearFrameEv>
					anzeige|=(1<<refreshdisplay);
    200c:	80 91 34 02 	lds	r24, 0x0234
    2010:	90 91 35 02 	lds	r25, 0x0235
    2014:	90 68       	ori	r25, 0x80	; 128
    2016:	90 93 35 02 	sts	0x0235, r25
    201a:	80 93 34 02 	sts	0x0234, r24
					break;
    201e:	08 95       	ret
				
				case '4':
					//Starten der Alarmapp, momentan nicht implementiert
					oled.clearFrame();
    2020:	8b e3       	ldi	r24, 0x3B	; 59
    2022:	92 e0       	ldi	r25, 0x02	; 2
    2024:	0e 94 af 02 	call	0x55e	; 0x55e <_ZN7Display10clearFrameEv>
					anzeige|=(1<<refreshdisplay);
    2028:	80 91 34 02 	lds	r24, 0x0234
    202c:	90 91 35 02 	lds	r25, 0x0235
    2030:	90 68       	ori	r25, 0x80	; 128
    2032:	90 93 35 02 	sts	0x0235, r25
    2036:	80 93 34 02 	sts	0x0234, r24
					break;
    203a:	08 95       	ret
				
				default:
					//menueflag erneu setzen
					anzeige|=(1<<menueflag)|(1<<Uhrflag);
    203c:	21 60       	ori	r18, 0x01	; 1
    203e:	30 62       	ori	r19, 0x20	; 32
    2040:	30 93 35 02 	sts	0x0235, r19
    2044:	20 93 34 02 	sts	0x0234, r18
					break;
    2048:	08 95       	ret
    204a:	a9 01       	movw	r20, r18
    204c:	48 70       	andi	r20, 0x08	; 8
    204e:	50 72       	andi	r21, 0x20	; 32
			}
		}
		else if ((anzeige&(1<<menueflag)) && (anzeige&(1<<Einstellungsflag)))	//Menue der Einstellungen
    2050:	48 30       	cpi	r20, 0x08	; 8
    2052:	50 42       	sbci	r21, 0x20	; 32
    2054:	69 f5       	brne	.+90     	; 0x20b0 <_Z14eingabehandlerh+0x130>
		{
			anzeige&=~((1<<menueflag)|(1<<Einstellungsflag));
    2056:	27 7f       	andi	r18, 0xF7	; 247
    2058:	3f 7d       	andi	r19, 0xDF	; 223
    205a:	30 93 35 02 	sts	0x0235, r19
    205e:	20 93 34 02 	sts	0x0234, r18
			switch (taste)
    2062:	82 33       	cpi	r24, 0x32	; 50
    2064:	91 f0       	breq	.+36     	; 0x208a <_Z14eingabehandlerh+0x10a>
    2066:	83 33       	cpi	r24, 0x33	; 51
    2068:	b1 f0       	breq	.+44     	; 0x2096 <_Z14eingabehandlerh+0x116>
    206a:	81 33       	cpi	r24, 0x31	; 49
    206c:	d1 f4       	brne	.+52     	; 0x20a2 <_Z14eingabehandlerh+0x122>
			{
				case '1':
					//einstellung zur Kalibrierung des Kompass
					//calibrate_kompass();
					//anzeige|=(1<<Kompasflag);
					oled.clearFrame();
    206e:	8b e3       	ldi	r24, 0x3B	; 59
    2070:	92 e0       	ldi	r25, 0x02	; 2
    2072:	0e 94 af 02 	call	0x55e	; 0x55e <_ZN7Display10clearFrameEv>
					anzeige|=(1<<refreshdisplay);
    2076:	80 91 34 02 	lds	r24, 0x0234
    207a:	90 91 35 02 	lds	r25, 0x0235
    207e:	90 68       	ori	r25, 0x80	; 128
    2080:	90 93 35 02 	sts	0x0235, r25
    2084:	80 93 34 02 	sts	0x0234, r24
					break;
    2088:	08 95       	ret
				case '2':
					//Gaineinstellung fuer den Kompass
					anzeige|=(1<<Kompasgaineinstellenflag);
    208a:	20 62       	ori	r18, 0x20	; 32
    208c:	30 93 35 02 	sts	0x0235, r19
    2090:	20 93 34 02 	sts	0x0234, r18
					break;
    2094:	08 95       	ret
				case '3':
					//uhreinstellen();
					anzeige|=(1<<Uhrflag);
    2096:	21 60       	ori	r18, 0x01	; 1
    2098:	30 93 35 02 	sts	0x0235, r19
    209c:	20 93 34 02 	sts	0x0234, r18
					break;
    20a0:	08 95       	ret
				default:
					//Menueflag neu setzten
					anzeige|=(1<<menueflag)|(1<<Einstellungsflag);
    20a2:	28 60       	ori	r18, 0x08	; 8
    20a4:	30 62       	ori	r19, 0x20	; 32
    20a6:	30 93 35 02 	sts	0x0235, r19
    20aa:	20 93 34 02 	sts	0x0234, r18
					break;
    20ae:	08 95       	ret
			}
		}
		else if ((anzeige&(1<<menueflag)))	//nur das grosse menue
    20b0:	35 ff       	sbrs	r19, 5
    20b2:	4f c0       	rjmp	.+158    	; 0x2152 <_Z14eingabehandlerh+0x1d2>
		{
			anzeige&=~(1<<menueflag);
    20b4:	3f 7d       	andi	r19, 0xDF	; 223
    20b6:	30 93 35 02 	sts	0x0235, r19
    20ba:	20 93 34 02 	sts	0x0234, r18
			switch (taste)
    20be:	83 33       	cpi	r24, 0x33	; 51
    20c0:	01 f1       	breq	.+64     	; 0x2102 <_Z14eingabehandlerh+0x182>
    20c2:	28 f4       	brcc	.+10     	; 0x20ce <_Z14eingabehandlerh+0x14e>
    20c4:	81 33       	cpi	r24, 0x31	; 49
    20c6:	49 f0       	breq	.+18     	; 0x20da <_Z14eingabehandlerh+0x15a>
    20c8:	82 33       	cpi	r24, 0x32	; 50
    20ca:	69 f0       	breq	.+26     	; 0x20e6 <_Z14eingabehandlerh+0x166>
    20cc:	3c c0       	rjmp	.+120    	; 0x2146 <_Z14eingabehandlerh+0x1c6>
    20ce:	85 33       	cpi	r24, 0x35	; 53
    20d0:	29 f1       	breq	.+74     	; 0x211c <_Z14eingabehandlerh+0x19c>
    20d2:	e8 f0       	brcs	.+58     	; 0x210e <_Z14eingabehandlerh+0x18e>
    20d4:	86 33       	cpi	r24, 0x36	; 54
    20d6:	49 f1       	breq	.+82     	; 0x212a <_Z14eingabehandlerh+0x1aa>
    20d8:	36 c0       	rjmp	.+108    	; 0x2146 <_Z14eingabehandlerh+0x1c6>
			{
				case '1':
					anzeige|=(1<<Fahradflag);
    20da:	22 60       	ori	r18, 0x02	; 2
    20dc:	30 93 35 02 	sts	0x0235, r19
    20e0:	20 93 34 02 	sts	0x0234, r18
					break;
    20e4:	08 95       	ret
				
				case '2':
					//Taschenrechner starten
					//Monentan deaktiv, da Umstellung der Handler 
					//operation(Flieskommazahleingabe());
					oled.clearFrame();
    20e6:	8b e3       	ldi	r24, 0x3B	; 59
    20e8:	92 e0       	ldi	r25, 0x02	; 2
    20ea:	0e 94 af 02 	call	0x55e	; 0x55e <_ZN7Display10clearFrameEv>
					anzeige|=(1<<refreshdisplay);	
    20ee:	80 91 34 02 	lds	r24, 0x0234
    20f2:	90 91 35 02 	lds	r25, 0x0235
    20f6:	90 68       	ori	r25, 0x80	; 128
    20f8:	90 93 35 02 	sts	0x0235, r25
    20fc:	80 93 34 02 	sts	0x0234, r24
					break;
    2100:	08 95       	ret
				
				case '3':
					anzeige|=(1<<Kompasflag);
    2102:	24 60       	ori	r18, 0x04	; 4
    2104:	30 93 35 02 	sts	0x0235, r19
    2108:	20 93 34 02 	sts	0x0234, r18
					break;
    210c:	08 95       	ret
				
				case '4':
					//Menue der Uhr
					anzeige|=(1<<menueflag) | (1<<Uhrflag);
    210e:	21 60       	ori	r18, 0x01	; 1
    2110:	30 62       	ori	r19, 0x20	; 32
    2112:	30 93 35 02 	sts	0x0235, r19
    2116:	20 93 34 02 	sts	0x0234, r18
					break;
    211a:	08 95       	ret
				
				case '5':
					//menue der Einstellungen
					anzeige|=(1<<menueflag) | (1<<Einstellungsflag);
    211c:	28 60       	ori	r18, 0x08	; 8
    211e:	30 62       	ori	r19, 0x20	; 32
    2120:	30 93 35 02 	sts	0x0235, r19
    2124:	20 93 34 02 	sts	0x0234, r18
					break;
    2128:	08 95       	ret
				
				case '6':
					//Display ausschalten
					//anzeige=255;
					oled.clearFrame();
    212a:	8b e3       	ldi	r24, 0x3B	; 59
    212c:	92 e0       	ldi	r25, 0x02	; 2
    212e:	0e 94 af 02 	call	0x55e	; 0x55e <_ZN7Display10clearFrameEv>
					anzeige|=(1<<refreshdisplay);
    2132:	80 91 34 02 	lds	r24, 0x0234
    2136:	90 91 35 02 	lds	r25, 0x0235
    213a:	90 68       	ori	r25, 0x80	; 128
    213c:	90 93 35 02 	sts	0x0235, r25
    2140:	80 93 34 02 	sts	0x0234, r24
					break;
    2144:	08 95       	ret
				
				default:
					//menueflag erneut setzen um abschalten zu verhindern
					anzeige|=(1<<menueflag);
    2146:	30 62       	ori	r19, 0x20	; 32
    2148:	30 93 35 02 	sts	0x0235, r19
    214c:	20 93 34 02 	sts	0x0234, r18
					break;
    2150:	08 95       	ret
			}
		}
		else if ((anzeige&(1<<Kompasgaineinstellenflag)))
    2152:	25 ff       	sbrs	r18, 5
    2154:	50 c0       	rjmp	.+160    	; 0x21f6 <_Z14eingabehandlerh+0x276>
		{
			anzeige&=~(1<<Kompasgaineinstellenflag);
    2156:	a9 01       	movw	r20, r18
    2158:	4f 7d       	andi	r20, 0xDF	; 223
			anzeige|=(1<<Kompasflag);
    215a:	44 60       	ori	r20, 0x04	; 4
    215c:	50 93 35 02 	sts	0x0235, r21
    2160:	40 93 34 02 	sts	0x0234, r20
			switch (taste) {
    2164:	90 e0       	ldi	r25, 0x00	; 0
    2166:	fc 01       	movw	r30, r24
    2168:	f1 97       	sbiw	r30, 0x31	; 49
    216a:	e8 30       	cpi	r30, 0x08	; 8
    216c:	f1 05       	cpc	r31, r1
    216e:	e0 f5       	brcc	.+120    	; 0x21e8 <_Z14eingabehandlerh+0x268>
    2170:	ec 5c       	subi	r30, 0xCC	; 204
    2172:	ff 4f       	sbci	r31, 0xFF	; 255
    2174:	0c 94 ca 1a 	jmp	0x3594	; 0x3594 <__tablejump2__>
				case '1':
					kompass.HMC5883L_command(0x01,HMCGAIN1370);
    2178:	40 e0       	ldi	r20, 0x00	; 0
    217a:	61 e0       	ldi	r22, 0x01	; 1
    217c:	8c e4       	ldi	r24, 0x4C	; 76
    217e:	96 e0       	ldi	r25, 0x06	; 6
    2180:	0e 94 3e 12 	call	0x247c	; 0x247c <_ZN7Kompass16HMC5883L_commandEhh>
					break;
    2184:	08 95       	ret
				case '2':
					kompass.HMC5883L_command(0x01,HMCGAIN1090);
    2186:	40 e2       	ldi	r20, 0x20	; 32
    2188:	61 e0       	ldi	r22, 0x01	; 1
    218a:	8c e4       	ldi	r24, 0x4C	; 76
    218c:	96 e0       	ldi	r25, 0x06	; 6
    218e:	0e 94 3e 12 	call	0x247c	; 0x247c <_ZN7Kompass16HMC5883L_commandEhh>
					break;
    2192:	08 95       	ret
				case '3':
					kompass.HMC5883L_command(0x01,HMCGAIN820);
    2194:	40 e4       	ldi	r20, 0x40	; 64
    2196:	61 e0       	ldi	r22, 0x01	; 1
    2198:	8c e4       	ldi	r24, 0x4C	; 76
    219a:	96 e0       	ldi	r25, 0x06	; 6
    219c:	0e 94 3e 12 	call	0x247c	; 0x247c <_ZN7Kompass16HMC5883L_commandEhh>
					break;
    21a0:	08 95       	ret
				case '4':
					kompass.HMC5883L_command(0x01,HMCGAIN660);
    21a2:	40 e6       	ldi	r20, 0x60	; 96
    21a4:	61 e0       	ldi	r22, 0x01	; 1
    21a6:	8c e4       	ldi	r24, 0x4C	; 76
    21a8:	96 e0       	ldi	r25, 0x06	; 6
    21aa:	0e 94 3e 12 	call	0x247c	; 0x247c <_ZN7Kompass16HMC5883L_commandEhh>
					break;
    21ae:	08 95       	ret
				case '5':
					kompass.HMC5883L_command(0x01,HMCGAIN440);
    21b0:	40 e8       	ldi	r20, 0x80	; 128
    21b2:	61 e0       	ldi	r22, 0x01	; 1
    21b4:	8c e4       	ldi	r24, 0x4C	; 76
    21b6:	96 e0       	ldi	r25, 0x06	; 6
    21b8:	0e 94 3e 12 	call	0x247c	; 0x247c <_ZN7Kompass16HMC5883L_commandEhh>
					break;
    21bc:	08 95       	ret
				case '6':
					kompass.HMC5883L_command(0x01,HMCGAIN390);
    21be:	40 ea       	ldi	r20, 0xA0	; 160
    21c0:	61 e0       	ldi	r22, 0x01	; 1
    21c2:	8c e4       	ldi	r24, 0x4C	; 76
    21c4:	96 e0       	ldi	r25, 0x06	; 6
    21c6:	0e 94 3e 12 	call	0x247c	; 0x247c <_ZN7Kompass16HMC5883L_commandEhh>
					break;
    21ca:	08 95       	ret
				case '7':
					kompass.HMC5883L_command(0x01,HMCGAIN330);
    21cc:	40 ec       	ldi	r20, 0xC0	; 192
    21ce:	61 e0       	ldi	r22, 0x01	; 1
    21d0:	8c e4       	ldi	r24, 0x4C	; 76
    21d2:	96 e0       	ldi	r25, 0x06	; 6
    21d4:	0e 94 3e 12 	call	0x247c	; 0x247c <_ZN7Kompass16HMC5883L_commandEhh>
					break;
    21d8:	08 95       	ret
				case '8':
					kompass.HMC5883L_command(0x01,HMCGAIN230);
    21da:	40 ee       	ldi	r20, 0xE0	; 224
    21dc:	61 e0       	ldi	r22, 0x01	; 1
    21de:	8c e4       	ldi	r24, 0x4C	; 76
    21e0:	96 e0       	ldi	r25, 0x06	; 6
    21e2:	0e 94 3e 12 	call	0x247c	; 0x247c <_ZN7Kompass16HMC5883L_commandEhh>
					break;
    21e6:	08 95       	ret
				default:
					anzeige &=~(1<<Kompasflag);
    21e8:	2b 7d       	andi	r18, 0xDB	; 219
					anzeige|=(1<<Kompasgaineinstellenflag);
    21ea:	20 62       	ori	r18, 0x20	; 32
    21ec:	30 93 35 02 	sts	0x0235, r19
    21f0:	20 93 34 02 	sts	0x0234, r18
					break;
    21f4:	08 95       	ret
			}
		}
		else if ((anzeige&(1<<Uhrflag)))
    21f6:	20 ff       	sbrs	r18, 0
    21f8:	09 c0       	rjmp	.+18     	; 0x220c <_Z14eingabehandlerh+0x28c>
		{
			if (taste=='#')
    21fa:	83 32       	cpi	r24, 0x23	; 35
    21fc:	29 f5       	brne	.+74     	; 0x2248 <_Z14eingabehandlerh+0x2c8>
			{
				anzeige&=~(1<<Uhrflag);
    21fe:	2e 7f       	andi	r18, 0xFE	; 254
				anzeige|=(1<<menueflag);
    2200:	30 62       	ori	r19, 0x20	; 32
    2202:	30 93 35 02 	sts	0x0235, r19
    2206:	20 93 34 02 	sts	0x0234, r18
    220a:	08 95       	ret
			}
		}
		else if ((anzeige&(1<<Kompasflag)))
    220c:	22 ff       	sbrs	r18, 2
    220e:	09 c0       	rjmp	.+18     	; 0x2222 <_Z14eingabehandlerh+0x2a2>
		{
			if (taste=='#')
    2210:	83 32       	cpi	r24, 0x23	; 35
    2212:	d1 f4       	brne	.+52     	; 0x2248 <_Z14eingabehandlerh+0x2c8>
			{
				anzeige&=~(1<<Kompasflag);
    2214:	2b 7f       	andi	r18, 0xFB	; 251
				anzeige|=(1<<menueflag);
    2216:	30 62       	ori	r19, 0x20	; 32
    2218:	30 93 35 02 	sts	0x0235, r19
    221c:	20 93 34 02 	sts	0x0234, r18
    2220:	08 95       	ret
			}
		}
		else if ((anzeige&(1<<Fahradflag)))
    2222:	21 ff       	sbrs	r18, 1
    2224:	09 c0       	rjmp	.+18     	; 0x2238 <_Z14eingabehandlerh+0x2b8>
		{
			if (taste=='#')
    2226:	83 32       	cpi	r24, 0x23	; 35
    2228:	79 f4       	brne	.+30     	; 0x2248 <_Z14eingabehandlerh+0x2c8>
			{
				anzeige&=~(1<<Fahradflag);
    222a:	2d 7f       	andi	r18, 0xFD	; 253
				anzeige|=(1<<menueflag);	
    222c:	30 62       	ori	r19, 0x20	; 32
    222e:	30 93 35 02 	sts	0x0235, r19
    2232:	20 93 34 02 	sts	0x0234, r18
    2236:	08 95       	ret
			}
		}
		else if (anzeige==0)
    2238:	23 2b       	or	r18, r19
    223a:	31 f4       	brne	.+12     	; 0x2248 <_Z14eingabehandlerh+0x2c8>
		{
			anzeige|=(1<<menueflag);
    223c:	80 e0       	ldi	r24, 0x00	; 0
    223e:	90 e2       	ldi	r25, 0x20	; 32
    2240:	90 93 35 02 	sts	0x0235, r25
    2244:	80 93 34 02 	sts	0x0234, r24
    2248:	08 95       	ret

0000224a <main>:
void eingabehandler(uint8_t taste);
	
int main(void)
{
	//initialisierung
	initialisierung();
    224a:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <_Z15initialisierungv>
	
    while(1)
    {
		//Steuerung der interupts durch Handler
		maininterupthandler();
    224e:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <_Z19maininterupthandlerv>
		//Steuerung der Anzeige alle Sekunde zur aktualisierung maximale Aktulisierungsrate ist 1Hz
		anzeigehandler();
    2252:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <_Z14anzeigehandlerv>
		//Tasthandler
		eingabehandler(Tastatur.Taster());
    2256:	8a e3       	ldi	r24, 0x3A	; 58
    2258:	92 e0       	ldi	r25, 0x02	; 2
    225a:	0e 94 a9 11 	call	0x2352	; 0x2352 <_ZN9Interface6TasterEv>
    225e:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <_Z14eingabehandlerh>
    2262:	f5 cf       	rjmp	.-22     	; 0x224e <main+0x4>

00002264 <_GLOBAL__sub_I_kompass>:
#include <stdlib.h>
#include <stdio.h>
#include <avr/interrupt.h>

#include "Kompass.h"
Kompass kompass;
    2264:	8c e4       	ldi	r24, 0x4C	; 76
    2266:	96 e0       	ldi	r25, 0x06	; 6
    2268:	0e 94 5d 12 	call	0x24ba	; 0x24ba <_ZN7KompassC1Ev>

#include "RTC.h"
RTC rtc;
    226c:	8c e3       	ldi	r24, 0x3C	; 60
    226e:	96 e0       	ldi	r25, 0x06	; 6
    2270:	0e 94 8a 13 	call	0x2714	; 0x2714 <_ZN3RTCC1Ev>

#include "Display.h"
Display oled;
    2274:	8b e3       	ldi	r24, 0x3B	; 59
    2276:	92 e0       	ldi	r25, 0x02	; 2
    2278:	0e 94 3f 03 	call	0x67e	; 0x67e <_ZN7DisplayC1Ev>

#include "Interface.h"
Interface Tastatur;
    227c:	8a e3       	ldi	r24, 0x3A	; 58
    227e:	92 e0       	ldi	r25, 0x02	; 2
    2280:	0e 94 82 11 	call	0x2304	; 0x2304 <_ZN9InterfaceC1Ev>
    2284:	08 95       	ret

00002286 <_GLOBAL__sub_D_kompass>:
    2286:	8a e3       	ldi	r24, 0x3A	; 58
    2288:	92 e0       	ldi	r25, 0x02	; 2
    228a:	0e 94 83 11 	call	0x2306	; 0x2306 <_ZN9InterfaceD1Ev>

#include "RTC.h"
RTC rtc;

#include "Display.h"
Display oled;
    228e:	8b e3       	ldi	r24, 0x3B	; 59
    2290:	92 e0       	ldi	r25, 0x02	; 2
    2292:	0e 94 ab 02 	call	0x556	; 0x556 <_ZN7DisplayD1Ev>

#include "Kompass.h"
Kompass kompass;

#include "RTC.h"
RTC rtc;
    2296:	8c e3       	ldi	r24, 0x3C	; 60
    2298:	96 e0       	ldi	r25, 0x06	; 6
    229a:	0e 94 8b 13 	call	0x2716	; 0x2716 <_ZN3RTCD1Ev>
#include <stdlib.h>
#include <stdio.h>
#include <avr/interrupt.h>

#include "Kompass.h"
Kompass kompass;
    229e:	8c e4       	ldi	r24, 0x4C	; 76
    22a0:	96 e0       	ldi	r25, 0x06	; 6
    22a2:	0e 94 3a 12 	call	0x2474	; 0x2474 <_ZN7KompassD1Ev>
    22a6:	08 95       	ret

000022a8 <_ZN3I2CC1Ev>:
#include "I2C.h"

// default constructor
I2C::I2C()
{
	TWBR = 10; //Bit fuer 100khz an Tackrate, reicht gerade noch so
    22a8:	8a e0       	ldi	r24, 0x0A	; 10
    22aa:	80 93 b8 00 	sts	0x00B8, r24
    22ae:	08 95       	ret

000022b0 <_ZN3I2CD1Ev>:
} //I2C

// default destructor
I2C::~I2C()
    22b0:	08 95       	ret

000022b2 <_ZN3I2C9twi_startEv>:
{
} //~I2C

void I2C::twi_start(){
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    22b2:	84 ea       	ldi	r24, 0xA4	; 164
    22b4:	80 93 bc 00 	sts	0x00BC, r24
    22b8:	08 95       	ret

000022ba <_ZN3I2C8twi_stopEv>:
}
void I2C::twi_stop(){
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    22ba:	84 e9       	ldi	r24, 0x94	; 148
    22bc:	80 93 bc 00 	sts	0x00BC, r24
    22c0:	08 95       	ret

000022c2 <_ZN3I2C9twi_writeEh>:
	TWCR = (1<<TWINT) | (1<<TWEN);
	TWCR &= ~(1<<TWEA);
}

void I2C::twi_write(uint8_t data){
	while(!(TWCR & (1<<TWINT)));
    22c2:	ec eb       	ldi	r30, 0xBC	; 188
    22c4:	f0 e0       	ldi	r31, 0x00	; 0
    22c6:	80 81       	ld	r24, Z
    22c8:	88 23       	and	r24, r24
    22ca:	ec f7       	brge	.-6      	; 0x22c6 <_ZN3I2C9twi_writeEh+0x4>
	TWDR = data;
    22cc:	60 93 bb 00 	sts	0x00BB, r22
	TWCR = (1<<TWINT) | (1<<TWEN);
    22d0:	84 e8       	ldi	r24, 0x84	; 132
    22d2:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));
    22d6:	ec eb       	ldi	r30, 0xBC	; 188
    22d8:	f0 e0       	ldi	r31, 0x00	; 0
    22da:	80 81       	ld	r24, Z
    22dc:	88 23       	and	r24, r24
    22de:	ec f7       	brge	.-6      	; 0x22da <_ZN3I2C9twi_writeEh+0x18>
}
    22e0:	08 95       	ret

000022e2 <_ZN3I2C8twi_readEh>:

uint8_t I2C::twi_read(uint8_t ack){
	if (ack)
    22e2:	66 23       	and	r22, r22
    22e4:	21 f0       	breq	.+8      	; 0x22ee <_ZN3I2C8twi_readEh+0xc>
	{
		TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    22e6:	84 ec       	ldi	r24, 0xC4	; 196
    22e8:	80 93 bc 00 	sts	0x00BC, r24
    22ec:	03 c0       	rjmp	.+6      	; 0x22f4 <_ZN3I2C8twi_readEh+0x12>
	}
	else{
		TWCR = (1<<TWINT) | (1<<TWEN);
    22ee:	84 e8       	ldi	r24, 0x84	; 132
    22f0:	80 93 bc 00 	sts	0x00BC, r24
	}
	
	while(!(TWCR & (1<<TWINT)));
    22f4:	ec eb       	ldi	r30, 0xBC	; 188
    22f6:	f0 e0       	ldi	r31, 0x00	; 0
    22f8:	80 81       	ld	r24, Z
    22fa:	88 23       	and	r24, r24
    22fc:	ec f7       	brge	.-6      	; 0x22f8 <_ZN3I2C8twi_readEh+0x16>
	return TWDR;
    22fe:	80 91 bb 00 	lds	r24, 0x00BB
    2302:	08 95       	ret

00002304 <_ZN9InterfaceC1Ev>:


#include "Interface.h"

// default constructor
Interface::Interface()
    2304:	08 95       	ret

00002306 <_ZN9InterfaceD1Ev>:
{
} //Interface

// default destructor
Interface::~Interface()
    2306:	08 95       	ret

00002308 <_ZN9Interface8debounceEPVhh>:
{
} //~Interface

uint8_t Interface::debounce(volatile uint8_t *port, uint8_t pin)
{
	if ( (*port & (1 << pin)) )
    2308:	fb 01       	movw	r30, r22
    230a:	80 81       	ld	r24, Z
    230c:	90 e0       	ldi	r25, 0x00	; 0
    230e:	04 2e       	mov	r0, r20
    2310:	02 c0       	rjmp	.+4      	; 0x2316 <_ZN9Interface8debounceEPVhh+0xe>
    2312:	95 95       	asr	r25
    2314:	87 95       	ror	r24
    2316:	0a 94       	dec	r0
    2318:	e2 f7       	brpl	.-8      	; 0x2312 <_ZN9Interface8debounceEPVhh+0xa>
    231a:	80 ff       	sbrs	r24, 0
    231c:	16 c0       	rjmp	.+44     	; 0x234a <_ZN9Interface8debounceEPVhh+0x42>
    231e:	89 e9       	ldi	r24, 0x99	; 153
    2320:	93 e0       	ldi	r25, 0x03	; 3
    2322:	01 97       	sbiw	r24, 0x01	; 1
    2324:	f1 f7       	brne	.-4      	; 0x2322 <_ZN9Interface8debounceEPVhh+0x1a>
    2326:	00 c0       	rjmp	.+0      	; 0x2328 <_ZN9Interface8debounceEPVhh+0x20>
	{
		/* Pin wurde auf Masse gezogen, 100ms warten   */
		_delay_ms(1);
		if ( !(*port & (1 << pin)) )
    2328:	fb 01       	movw	r30, r22
    232a:	80 81       	ld	r24, Z
    232c:	90 e0       	ldi	r25, 0x00	; 0
    232e:	9c 01       	movw	r18, r24
    2330:	02 c0       	rjmp	.+4      	; 0x2336 <_ZN9Interface8debounceEPVhh+0x2e>
    2332:	35 95       	asr	r19
    2334:	27 95       	ror	r18
    2336:	4a 95       	dec	r20
    2338:	e2 f7       	brpl	.-8      	; 0x2332 <_ZN9Interface8debounceEPVhh+0x2a>
    233a:	20 fd       	sbrc	r18, 0
    233c:	08 c0       	rjmp	.+16     	; 0x234e <_ZN9Interface8debounceEPVhh+0x46>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    233e:	3c e0       	ldi	r19, 0x0C	; 12
    2340:	3a 95       	dec	r19
    2342:	f1 f7       	brne	.-4      	; 0x2340 <_ZN9Interface8debounceEPVhh+0x38>
    2344:	00 00       	nop
		{
			/* Anwender Zeit zum Loslassen des Tasters geben */
			_delay_us(10);
			return 1;
    2346:	81 e0       	ldi	r24, 0x01	; 1
    2348:	08 95       	ret
		}
	}
	return 0;
    234a:	80 e0       	ldi	r24, 0x00	; 0
    234c:	08 95       	ret
    234e:	80 e0       	ldi	r24, 0x00	; 0
}
    2350:	08 95       	ret

00002352 <_ZN9Interface6TasterEv>:
		break;
	}
	return abfrage;
}

uint8_t Interface::Taster(){
    2352:	1f 93       	push	r17
    2354:	cf 93       	push	r28
    2356:	df 93       	push	r29
    2358:	ec 01       	movw	r28, r24
	uint8_t taste = 'A';
	
	//erste Zeile
	PORTD |= (1<<PORTD3);
    235a:	5b 9a       	sbi	0x0b, 3	; 11
    235c:	00 c0       	rjmp	.+0      	; 0x235e <_ZN9Interface6TasterEv+0xc>
    235e:	00 c0       	rjmp	.+0      	; 0x2360 <_ZN9Interface6TasterEv+0xe>
	_delay_us(1);
	if(debounce(&PIND,PIND4)){
    2360:	44 e0       	ldi	r20, 0x04	; 4
    2362:	69 e2       	ldi	r22, 0x29	; 41
    2364:	70 e0       	ldi	r23, 0x00	; 0
    2366:	0e 94 84 11 	call	0x2308	; 0x2308 <_ZN9Interface8debounceEPVhh>
    236a:	81 11       	cpse	r24, r1
    236c:	12 c0       	rjmp	.+36     	; 0x2392 <_ZN9Interface6TasterEv+0x40>
		taste = '3';
	}
	else if (debounce(&PIND,PIND5))
    236e:	45 e0       	ldi	r20, 0x05	; 5
    2370:	69 e2       	ldi	r22, 0x29	; 41
    2372:	70 e0       	ldi	r23, 0x00	; 0
    2374:	ce 01       	movw	r24, r28
    2376:	0e 94 84 11 	call	0x2308	; 0x2308 <_ZN9Interface8debounceEPVhh>
    237a:	81 11       	cpse	r24, r1
    237c:	0c c0       	rjmp	.+24     	; 0x2396 <_ZN9Interface6TasterEv+0x44>
	{
		taste = '2';
	}
	else if (debounce(&PIND,PIND6))
    237e:	46 e0       	ldi	r20, 0x06	; 6
    2380:	69 e2       	ldi	r22, 0x29	; 41
    2382:	70 e0       	ldi	r23, 0x00	; 0
    2384:	ce 01       	movw	r24, r28
    2386:	0e 94 84 11 	call	0x2308	; 0x2308 <_ZN9Interface8debounceEPVhh>
    238a:	81 11       	cpse	r24, r1
    238c:	06 c0       	rjmp	.+12     	; 0x239a <_ZN9Interface6TasterEv+0x48>
	}
	return abfrage;
}

uint8_t Interface::Taster(){
	uint8_t taste = 'A';
    238e:	11 e4       	ldi	r17, 0x41	; 65
    2390:	05 c0       	rjmp	.+10     	; 0x239c <_ZN9Interface6TasterEv+0x4a>
	
	//erste Zeile
	PORTD |= (1<<PORTD3);
	_delay_us(1);
	if(debounce(&PIND,PIND4)){
		taste = '3';
    2392:	13 e3       	ldi	r17, 0x33	; 51
    2394:	03 c0       	rjmp	.+6      	; 0x239c <_ZN9Interface6TasterEv+0x4a>
	}
	else if (debounce(&PIND,PIND5))
	{
		taste = '2';
    2396:	12 e3       	ldi	r17, 0x32	; 50
    2398:	01 c0       	rjmp	.+2      	; 0x239c <_ZN9Interface6TasterEv+0x4a>
	}
	else if (debounce(&PIND,PIND6))
	{
		taste = '1';
    239a:	11 e3       	ldi	r17, 0x31	; 49
	}
	PORTD &= ~(1<<PORTD3);
    239c:	5b 98       	cbi	0x0b, 3	; 11
	
	//zweite Zeile
	PORTD |= (1<<PORTD2);
    239e:	5a 9a       	sbi	0x0b, 2	; 11
    23a0:	00 c0       	rjmp	.+0      	; 0x23a2 <_ZN9Interface6TasterEv+0x50>
    23a2:	00 c0       	rjmp	.+0      	; 0x23a4 <_ZN9Interface6TasterEv+0x52>
	_delay_us(1);
	if(debounce(&PIND,PIND4)){
    23a4:	44 e0       	ldi	r20, 0x04	; 4
    23a6:	69 e2       	ldi	r22, 0x29	; 41
    23a8:	70 e0       	ldi	r23, 0x00	; 0
    23aa:	ce 01       	movw	r24, r28
    23ac:	0e 94 84 11 	call	0x2308	; 0x2308 <_ZN9Interface8debounceEPVhh>
    23b0:	81 11       	cpse	r24, r1
    23b2:	11 c0       	rjmp	.+34     	; 0x23d6 <_ZN9Interface6TasterEv+0x84>
		taste = '6';
	}
	else if (debounce(&PIND,PIND5))
    23b4:	45 e0       	ldi	r20, 0x05	; 5
    23b6:	69 e2       	ldi	r22, 0x29	; 41
    23b8:	70 e0       	ldi	r23, 0x00	; 0
    23ba:	ce 01       	movw	r24, r28
    23bc:	0e 94 84 11 	call	0x2308	; 0x2308 <_ZN9Interface8debounceEPVhh>
    23c0:	81 11       	cpse	r24, r1
    23c2:	0b c0       	rjmp	.+22     	; 0x23da <_ZN9Interface6TasterEv+0x88>
	{
		taste = '5';
	}
	else if (debounce(&PIND,PIND6))
    23c4:	46 e0       	ldi	r20, 0x06	; 6
    23c6:	69 e2       	ldi	r22, 0x29	; 41
    23c8:	70 e0       	ldi	r23, 0x00	; 0
    23ca:	ce 01       	movw	r24, r28
    23cc:	0e 94 84 11 	call	0x2308	; 0x2308 <_ZN9Interface8debounceEPVhh>
    23d0:	81 11       	cpse	r24, r1
    23d2:	05 c0       	rjmp	.+10     	; 0x23de <_ZN9Interface6TasterEv+0x8c>
    23d4:	05 c0       	rjmp	.+10     	; 0x23e0 <_ZN9Interface6TasterEv+0x8e>
	
	//zweite Zeile
	PORTD |= (1<<PORTD2);
	_delay_us(1);
	if(debounce(&PIND,PIND4)){
		taste = '6';
    23d6:	16 e3       	ldi	r17, 0x36	; 54
    23d8:	03 c0       	rjmp	.+6      	; 0x23e0 <_ZN9Interface6TasterEv+0x8e>
	}
	else if (debounce(&PIND,PIND5))
	{
		taste = '5';
    23da:	15 e3       	ldi	r17, 0x35	; 53
    23dc:	01 c0       	rjmp	.+2      	; 0x23e0 <_ZN9Interface6TasterEv+0x8e>
	}
	else if (debounce(&PIND,PIND6))
	{
		taste = '4';
    23de:	14 e3       	ldi	r17, 0x34	; 52
	}
	PORTD &= ~(1<<PORTD2);
    23e0:	5a 98       	cbi	0x0b, 2	; 11
	
	//dritte Zeile
	PORTD |= (1<<PORTD1);
    23e2:	59 9a       	sbi	0x0b, 1	; 11
    23e4:	00 c0       	rjmp	.+0      	; 0x23e6 <_ZN9Interface6TasterEv+0x94>
    23e6:	00 c0       	rjmp	.+0      	; 0x23e8 <_ZN9Interface6TasterEv+0x96>
	_delay_us(1);
	if(debounce(&PIND,PIND4)){
    23e8:	44 e0       	ldi	r20, 0x04	; 4
    23ea:	69 e2       	ldi	r22, 0x29	; 41
    23ec:	70 e0       	ldi	r23, 0x00	; 0
    23ee:	ce 01       	movw	r24, r28
    23f0:	0e 94 84 11 	call	0x2308	; 0x2308 <_ZN9Interface8debounceEPVhh>
    23f4:	81 11       	cpse	r24, r1
    23f6:	11 c0       	rjmp	.+34     	; 0x241a <_ZN9Interface6TasterEv+0xc8>
		taste = '9';
	}
	else if (debounce(&PIND,PIND5))
    23f8:	45 e0       	ldi	r20, 0x05	; 5
    23fa:	69 e2       	ldi	r22, 0x29	; 41
    23fc:	70 e0       	ldi	r23, 0x00	; 0
    23fe:	ce 01       	movw	r24, r28
    2400:	0e 94 84 11 	call	0x2308	; 0x2308 <_ZN9Interface8debounceEPVhh>
    2404:	81 11       	cpse	r24, r1
    2406:	0b c0       	rjmp	.+22     	; 0x241e <_ZN9Interface6TasterEv+0xcc>
	{
		taste = '8';
	}
	else if (debounce(&PIND,PIND6))
    2408:	46 e0       	ldi	r20, 0x06	; 6
    240a:	69 e2       	ldi	r22, 0x29	; 41
    240c:	70 e0       	ldi	r23, 0x00	; 0
    240e:	ce 01       	movw	r24, r28
    2410:	0e 94 84 11 	call	0x2308	; 0x2308 <_ZN9Interface8debounceEPVhh>
    2414:	81 11       	cpse	r24, r1
    2416:	05 c0       	rjmp	.+10     	; 0x2422 <_ZN9Interface6TasterEv+0xd0>
    2418:	05 c0       	rjmp	.+10     	; 0x2424 <_ZN9Interface6TasterEv+0xd2>
	
	//dritte Zeile
	PORTD |= (1<<PORTD1);
	_delay_us(1);
	if(debounce(&PIND,PIND4)){
		taste = '9';
    241a:	19 e3       	ldi	r17, 0x39	; 57
    241c:	03 c0       	rjmp	.+6      	; 0x2424 <_ZN9Interface6TasterEv+0xd2>
	}
	else if (debounce(&PIND,PIND5))
	{
		taste = '8';
    241e:	18 e3       	ldi	r17, 0x38	; 56
    2420:	01 c0       	rjmp	.+2      	; 0x2424 <_ZN9Interface6TasterEv+0xd2>
	}
	else if (debounce(&PIND,PIND6))
	{
		taste = '7';
    2422:	17 e3       	ldi	r17, 0x37	; 55
	}
	PORTD &= ~(1<<PORT1);
    2424:	59 98       	cbi	0x0b, 1	; 11
	
	//vierte Zeile
	PORTD |= (1<<PORTD0);
    2426:	58 9a       	sbi	0x0b, 0	; 11
    2428:	00 c0       	rjmp	.+0      	; 0x242a <_ZN9Interface6TasterEv+0xd8>
    242a:	00 c0       	rjmp	.+0      	; 0x242c <_ZN9Interface6TasterEv+0xda>
	_delay_us(1);
	if(debounce(&PIND,PIND4)){
    242c:	44 e0       	ldi	r20, 0x04	; 4
    242e:	69 e2       	ldi	r22, 0x29	; 41
    2430:	70 e0       	ldi	r23, 0x00	; 0
    2432:	ce 01       	movw	r24, r28
    2434:	0e 94 84 11 	call	0x2308	; 0x2308 <_ZN9Interface8debounceEPVhh>
    2438:	81 11       	cpse	r24, r1
    243a:	11 c0       	rjmp	.+34     	; 0x245e <_ZN9Interface6TasterEv+0x10c>
		taste = '#';
	}
	else if (debounce(&PIND,PIND5))
    243c:	45 e0       	ldi	r20, 0x05	; 5
    243e:	69 e2       	ldi	r22, 0x29	; 41
    2440:	70 e0       	ldi	r23, 0x00	; 0
    2442:	ce 01       	movw	r24, r28
    2444:	0e 94 84 11 	call	0x2308	; 0x2308 <_ZN9Interface8debounceEPVhh>
    2448:	81 11       	cpse	r24, r1
    244a:	0b c0       	rjmp	.+22     	; 0x2462 <_ZN9Interface6TasterEv+0x110>
	{
		taste = '0';
	}
	else if (debounce(&PIND,PIND6))
    244c:	46 e0       	ldi	r20, 0x06	; 6
    244e:	69 e2       	ldi	r22, 0x29	; 41
    2450:	70 e0       	ldi	r23, 0x00	; 0
    2452:	ce 01       	movw	r24, r28
    2454:	0e 94 84 11 	call	0x2308	; 0x2308 <_ZN9Interface8debounceEPVhh>
    2458:	81 11       	cpse	r24, r1
    245a:	05 c0       	rjmp	.+10     	; 0x2466 <_ZN9Interface6TasterEv+0x114>
    245c:	05 c0       	rjmp	.+10     	; 0x2468 <_ZN9Interface6TasterEv+0x116>
	
	//vierte Zeile
	PORTD |= (1<<PORTD0);
	_delay_us(1);
	if(debounce(&PIND,PIND4)){
		taste = '#';
    245e:	13 e2       	ldi	r17, 0x23	; 35
    2460:	03 c0       	rjmp	.+6      	; 0x2468 <_ZN9Interface6TasterEv+0x116>
	}
	else if (debounce(&PIND,PIND5))
	{
		taste = '0';
    2462:	10 e3       	ldi	r17, 0x30	; 48
    2464:	01 c0       	rjmp	.+2      	; 0x2468 <_ZN9Interface6TasterEv+0x116>
	}
	else if (debounce(&PIND,PIND6))
	{
		taste = '*';
    2466:	1a e2       	ldi	r17, 0x2A	; 42
	}
	PORTD &= ~(1<<PORTD0);
    2468:	58 98       	cbi	0x0b, 0	; 11
	
	return taste;
}
    246a:	81 2f       	mov	r24, r17
    246c:	df 91       	pop	r29
    246e:	cf 91       	pop	r28
    2470:	1f 91       	pop	r17
    2472:	08 95       	ret

00002474 <_ZN7KompassD1Ev>:
		offset[i]=0;
	}
} //Kompass

// default destructor
Kompass::~Kompass()
    2474:	06 96       	adiw	r24, 0x06	; 6
    2476:	0e 94 58 11 	call	0x22b0	; 0x22b0 <_ZN3I2CD1Ev>
    247a:	08 95       	ret

0000247c <_ZN7Kompass16HMC5883L_commandEhh>:
{
} //~Kompass

void Kompass::HMC5883L_command(uint8_t adresse, uint8_t command){
    247c:	0f 93       	push	r16
    247e:	1f 93       	push	r17
    2480:	cf 93       	push	r28
    2482:	df 93       	push	r29
    2484:	06 2f       	mov	r16, r22
    2486:	14 2f       	mov	r17, r20
	i2c.twi_start();
    2488:	ec 01       	movw	r28, r24
    248a:	26 96       	adiw	r28, 0x06	; 6
    248c:	ce 01       	movw	r24, r28
    248e:	0e 94 59 11 	call	0x22b2	; 0x22b2 <_ZN3I2C9twi_startEv>
	i2c.twi_write(HMCWRITEADRESSE);
    2492:	6c e3       	ldi	r22, 0x3C	; 60
    2494:	ce 01       	movw	r24, r28
    2496:	0e 94 61 11 	call	0x22c2	; 0x22c2 <_ZN3I2C9twi_writeEh>
	i2c.twi_write(adresse);
    249a:	60 2f       	mov	r22, r16
    249c:	ce 01       	movw	r24, r28
    249e:	0e 94 61 11 	call	0x22c2	; 0x22c2 <_ZN3I2C9twi_writeEh>
	i2c.twi_write(command);
    24a2:	61 2f       	mov	r22, r17
    24a4:	ce 01       	movw	r24, r28
    24a6:	0e 94 61 11 	call	0x22c2	; 0x22c2 <_ZN3I2C9twi_writeEh>
	i2c.twi_stop();
    24aa:	ce 01       	movw	r24, r28
    24ac:	0e 94 5d 11 	call	0x22ba	; 0x22ba <_ZN3I2C8twi_stopEv>
}
    24b0:	df 91       	pop	r29
    24b2:	cf 91       	pop	r28
    24b4:	1f 91       	pop	r17
    24b6:	0f 91       	pop	r16
    24b8:	08 95       	ret

000024ba <_ZN7KompassC1Ev>:


#include "Kompass.h"

// default constructor
Kompass::Kompass()
    24ba:	cf 93       	push	r28
    24bc:	df 93       	push	r29
    24be:	ec 01       	movw	r28, r24
    24c0:	06 96       	adiw	r24, 0x06	; 6
    24c2:	0e 94 54 11 	call	0x22a8	; 0x22a8 <_ZN3I2CC1Ev>
{
	//Config Register A
	HMC5883L_command(0x00, HMCSAMPLES8+HMCDATARATE15+HMCMEASUREMODENORMAL);
    24c6:	40 e7       	ldi	r20, 0x70	; 112
    24c8:	60 e0       	ldi	r22, 0x00	; 0
    24ca:	ce 01       	movw	r24, r28
    24cc:	0e 94 3e 12 	call	0x247c	; 0x247c <_ZN7Kompass16HMC5883L_commandEhh>

	//Config Gain
	HMC5883L_command(0x01, HMCGAIN1090);
    24d0:	40 e2       	ldi	r20, 0x20	; 32
    24d2:	61 e0       	ldi	r22, 0x01	; 1
    24d4:	ce 01       	movw	r24, r28
    24d6:	0e 94 3e 12 	call	0x247c	; 0x247c <_ZN7Kompass16HMC5883L_commandEhh>

	//Set Mode auf single
	HMC5883L_command(0x02, HMCSIGLEMODE);
    24da:	41 e0       	ldi	r20, 0x01	; 1
    24dc:	62 e0       	ldi	r22, 0x02	; 2
    24de:	ce 01       	movw	r24, r28
    24e0:	0e 94 3e 12 	call	0x247c	; 0x247c <_ZN7Kompass16HMC5883L_commandEhh>
	//Variablen
	for(uint8_t i=0;i<3;i++){
		achsen[i]=0;
    24e4:	19 82       	std	Y+1, r1	; 0x01
    24e6:	18 82       	st	Y, r1
		offset[i]=0;
    24e8:	18 86       	std	Y+8, r1	; 0x08
    24ea:	1f 82       	std	Y+7, r1	; 0x07

	//Set Mode auf single
	HMC5883L_command(0x02, HMCSIGLEMODE);
	//Variablen
	for(uint8_t i=0;i<3;i++){
		achsen[i]=0;
    24ec:	1b 82       	std	Y+3, r1	; 0x03
    24ee:	1a 82       	std	Y+2, r1	; 0x02
		offset[i]=0;
    24f0:	1a 86       	std	Y+10, r1	; 0x0a
    24f2:	19 86       	std	Y+9, r1	; 0x09

	//Set Mode auf single
	HMC5883L_command(0x02, HMCSIGLEMODE);
	//Variablen
	for(uint8_t i=0;i<3;i++){
		achsen[i]=0;
    24f4:	1d 82       	std	Y+5, r1	; 0x05
    24f6:	1c 82       	std	Y+4, r1	; 0x04
		offset[i]=0;
    24f8:	1c 86       	std	Y+12, r1	; 0x0c
    24fa:	1b 86       	std	Y+11, r1	; 0x0b
	}
} //Kompass
    24fc:	df 91       	pop	r29
    24fe:	cf 91       	pop	r28
    2500:	08 95       	ret

00002502 <_ZN7Kompass20HMC5883L_readHeadingEv>:
		achsen[i]=0;
		offset[i]=0;
	}
}

uint8_t Kompass::HMC5883L_readHeading(){
    2502:	bf 92       	push	r11
    2504:	cf 92       	push	r12
    2506:	df 92       	push	r13
    2508:	ef 92       	push	r14
    250a:	ff 92       	push	r15
    250c:	0f 93       	push	r16
    250e:	1f 93       	push	r17
    2510:	cf 93       	push	r28
    2512:	df 93       	push	r29
    2514:	00 d0       	rcall	.+0      	; 0x2516 <_ZN7Kompass20HMC5883L_readHeadingEv+0x14>
    2516:	00 d0       	rcall	.+0      	; 0x2518 <_ZN7Kompass20HMC5883L_readHeadingEv+0x16>
    2518:	00 d0       	rcall	.+0      	; 0x251a <_ZN7Kompass20HMC5883L_readHeadingEv+0x18>
    251a:	cd b7       	in	r28, 0x3d	; 61
    251c:	de b7       	in	r29, 0x3e	; 62
    251e:	6c 01       	movw	r12, r24
	cli();
    2520:	f8 94       	cli
	uint8_t heading[6];
	i2c.twi_start();
    2522:	7c 01       	movw	r14, r24
    2524:	26 e0       	ldi	r18, 0x06	; 6
    2526:	e2 0e       	add	r14, r18
    2528:	f1 1c       	adc	r15, r1
    252a:	c7 01       	movw	r24, r14
    252c:	0e 94 59 11 	call	0x22b2	; 0x22b2 <_ZN3I2C9twi_startEv>
	i2c.twi_write(HMCWRITEADRESSE);
    2530:	6c e3       	ldi	r22, 0x3C	; 60
    2532:	c7 01       	movw	r24, r14
    2534:	0e 94 61 11 	call	0x22c2	; 0x22c2 <_ZN3I2C9twi_writeEh>
	i2c.twi_write(0x03);
    2538:	63 e0       	ldi	r22, 0x03	; 3
    253a:	c7 01       	movw	r24, r14
    253c:	0e 94 61 11 	call	0x22c2	; 0x22c2 <_ZN3I2C9twi_writeEh>
	i2c.twi_start();
    2540:	c7 01       	movw	r24, r14
    2542:	0e 94 59 11 	call	0x22b2	; 0x22b2 <_ZN3I2C9twi_startEv>
	i2c.twi_write(HMCREADADRESSE);
    2546:	6d e3       	ldi	r22, 0x3D	; 61
    2548:	c7 01       	movw	r24, r14
    254a:	0e 94 61 11 	call	0x22c2	; 0x22c2 <_ZN3I2C9twi_writeEh>
    254e:	8e 01       	movw	r16, r28
    2550:	0f 5f       	subi	r16, 0xFF	; 255
    2552:	1f 4f       	sbci	r17, 0xFF	; 255
	
	for(uint8_t i=0; i<6;i++){
    2554:	b1 2c       	mov	r11, r1
		if (i<5)
    2556:	84 e0       	ldi	r24, 0x04	; 4
    2558:	8b 15       	cp	r24, r11
    255a:	38 f0       	brcs	.+14     	; 0x256a <_ZN7Kompass20HMC5883L_readHeadingEv+0x68>
		{
			heading[i]=i2c.twi_read(1);
    255c:	61 e0       	ldi	r22, 0x01	; 1
    255e:	c7 01       	movw	r24, r14
    2560:	0e 94 71 11 	call	0x22e2	; 0x22e2 <_ZN3I2C8twi_readEh>
    2564:	f8 01       	movw	r30, r16
    2566:	80 83       	st	Z, r24
    2568:	06 c0       	rjmp	.+12     	; 0x2576 <_ZN7Kompass20HMC5883L_readHeadingEv+0x74>
		}
		else
		{
			heading[i]=i2c.twi_read(0);
    256a:	60 e0       	ldi	r22, 0x00	; 0
    256c:	c7 01       	movw	r24, r14
    256e:	0e 94 71 11 	call	0x22e2	; 0x22e2 <_ZN3I2C8twi_readEh>
    2572:	f8 01       	movw	r30, r16
    2574:	80 83       	st	Z, r24
	i2c.twi_write(HMCWRITEADRESSE);
	i2c.twi_write(0x03);
	i2c.twi_start();
	i2c.twi_write(HMCREADADRESSE);
	
	for(uint8_t i=0; i<6;i++){
    2576:	b3 94       	inc	r11
    2578:	0f 5f       	subi	r16, 0xFF	; 255
    257a:	1f 4f       	sbci	r17, 0xFF	; 255
    257c:	f6 e0       	ldi	r31, 0x06	; 6
    257e:	bf 12       	cpse	r11, r31
    2580:	ea cf       	rjmp	.-44     	; 0x2556 <_ZN7Kompass20HMC5883L_readHeadingEv+0x54>
		{
			heading[i]=i2c.twi_read(0);
		}
		
	}
	i2c.twi_stop();
    2582:	c7 01       	movw	r24, r14
    2584:	0e 94 5d 11 	call	0x22ba	; 0x22ba <_ZN3I2C8twi_stopEv>
	achsen[0] =(int16_t) (heading[1] | (heading[0] << 8))-offset[0];
    2588:	89 81       	ldd	r24, Y+1	; 0x01
    258a:	90 e0       	ldi	r25, 0x00	; 0
    258c:	98 2f       	mov	r25, r24
    258e:	88 27       	eor	r24, r24
    2590:	2a 81       	ldd	r18, Y+2	; 0x02
    2592:	82 2b       	or	r24, r18
    2594:	f6 01       	movw	r30, r12
    2596:	27 81       	ldd	r18, Z+7	; 0x07
    2598:	30 85       	ldd	r19, Z+8	; 0x08
    259a:	82 1b       	sub	r24, r18
    259c:	93 0b       	sbc	r25, r19
    259e:	91 83       	std	Z+1, r25	; 0x01
    25a0:	80 83       	st	Z, r24
	achsen[2] =(int16_t) (heading[3] | (heading[2] << 8))-offset[2];
    25a2:	8b 81       	ldd	r24, Y+3	; 0x03
    25a4:	90 e0       	ldi	r25, 0x00	; 0
    25a6:	98 2f       	mov	r25, r24
    25a8:	88 27       	eor	r24, r24
    25aa:	2c 81       	ldd	r18, Y+4	; 0x04
    25ac:	82 2b       	or	r24, r18
    25ae:	23 85       	ldd	r18, Z+11	; 0x0b
    25b0:	34 85       	ldd	r19, Z+12	; 0x0c
    25b2:	82 1b       	sub	r24, r18
    25b4:	93 0b       	sbc	r25, r19
    25b6:	95 83       	std	Z+5, r25	; 0x05
    25b8:	84 83       	std	Z+4, r24	; 0x04
	achsen[1] =(int16_t) (heading[5] | (heading[4] << 8))-offset[1];
    25ba:	8d 81       	ldd	r24, Y+5	; 0x05
    25bc:	90 e0       	ldi	r25, 0x00	; 0
    25be:	98 2f       	mov	r25, r24
    25c0:	88 27       	eor	r24, r24
    25c2:	2e 81       	ldd	r18, Y+6	; 0x06
    25c4:	82 2b       	or	r24, r18
    25c6:	21 85       	ldd	r18, Z+9	; 0x09
    25c8:	32 85       	ldd	r19, Z+10	; 0x0a
    25ca:	82 1b       	sub	r24, r18
    25cc:	93 0b       	sbc	r25, r19
    25ce:	93 83       	std	Z+3, r25	; 0x03
    25d0:	82 83       	std	Z+2, r24	; 0x02
	sei();
    25d2:	78 94       	sei
	if (achsen[0]==-4096 || achsen[1]==-4096 || achsen[2]==-4096)
    25d4:	f6 01       	movw	r30, r12
    25d6:	80 81       	ld	r24, Z
    25d8:	91 81       	ldd	r25, Z+1	; 0x01
    25da:	81 15       	cp	r24, r1
    25dc:	90 4f       	sbci	r25, 0xF0	; 240
    25de:	79 f0       	breq	.+30     	; 0x25fe <_ZN7Kompass20HMC5883L_readHeadingEv+0xfc>
    25e0:	f6 01       	movw	r30, r12
    25e2:	82 81       	ldd	r24, Z+2	; 0x02
    25e4:	93 81       	ldd	r25, Z+3	; 0x03
    25e6:	81 15       	cp	r24, r1
    25e8:	90 4f       	sbci	r25, 0xF0	; 240
    25ea:	59 f0       	breq	.+22     	; 0x2602 <_ZN7Kompass20HMC5883L_readHeadingEv+0x100>
    25ec:	81 e0       	ldi	r24, 0x01	; 1
    25ee:	f6 01       	movw	r30, r12
    25f0:	24 81       	ldd	r18, Z+4	; 0x04
    25f2:	35 81       	ldd	r19, Z+5	; 0x05
    25f4:	21 15       	cp	r18, r1
    25f6:	30 4f       	sbci	r19, 0xF0	; 240
    25f8:	29 f0       	breq	.+10     	; 0x2604 <_ZN7Kompass20HMC5883L_readHeadingEv+0x102>
    25fa:	80 e0       	ldi	r24, 0x00	; 0
    25fc:	03 c0       	rjmp	.+6      	; 0x2604 <_ZN7Kompass20HMC5883L_readHeadingEv+0x102>
	{
		return 1;
    25fe:	81 e0       	ldi	r24, 0x01	; 1
    2600:	01 c0       	rjmp	.+2      	; 0x2604 <_ZN7Kompass20HMC5883L_readHeadingEv+0x102>
    2602:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	return 0;
}
    2604:	26 96       	adiw	r28, 0x06	; 6
    2606:	0f b6       	in	r0, 0x3f	; 63
    2608:	f8 94       	cli
    260a:	de bf       	out	0x3e, r29	; 62
    260c:	0f be       	out	0x3f, r0	; 63
    260e:	cd bf       	out	0x3d, r28	; 61
    2610:	df 91       	pop	r29
    2612:	cf 91       	pop	r28
    2614:	1f 91       	pop	r17
    2616:	0f 91       	pop	r16
    2618:	ff 90       	pop	r15
    261a:	ef 90       	pop	r14
    261c:	df 90       	pop	r13
    261e:	cf 90       	pop	r12
    2620:	bf 90       	pop	r11
    2622:	08 95       	ret

00002624 <_ZN7Kompass5angleEv>:

double Kompass::angle(){
    2624:	cf 92       	push	r12
    2626:	df 92       	push	r13
    2628:	ef 92       	push	r14
    262a:	ff 92       	push	r15
    262c:	cf 93       	push	r28
    262e:	df 93       	push	r29
    2630:	ec 01       	movw	r28, r24
	double angle=0;
	if (HMC5883L_readHeading())
    2632:	0e 94 81 12 	call	0x2502	; 0x2502 <_ZN7Kompass20HMC5883L_readHeadingEv>
    2636:	81 11       	cpse	r24, r1
    2638:	57 c0       	rjmp	.+174    	; 0x26e8 <_ZN7Kompass5angleEv+0xc4>
	{
		angle=-1.0;
	}
	else{
		angle=atan2f(achsen[0],achsen[2])*180.0/M_PI+180.0;
    263a:	6c 81       	ldd	r22, Y+4	; 0x04
    263c:	7d 81       	ldd	r23, Y+5	; 0x05
    263e:	88 27       	eor	r24, r24
    2640:	77 fd       	sbrc	r23, 7
    2642:	80 95       	com	r24
    2644:	98 2f       	mov	r25, r24
    2646:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <__floatsisf>
    264a:	6b 01       	movw	r12, r22
    264c:	7c 01       	movw	r14, r24
    264e:	68 81       	ld	r22, Y
    2650:	79 81       	ldd	r23, Y+1	; 0x01
    2652:	88 27       	eor	r24, r24
    2654:	77 fd       	sbrc	r23, 7
    2656:	80 95       	com	r24
    2658:	98 2f       	mov	r25, r24
    265a:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <__floatsisf>
    265e:	a7 01       	movw	r20, r14
    2660:	96 01       	movw	r18, r12
    2662:	0e 94 96 14 	call	0x292c	; 0x292c <atan2>
    2666:	20 e0       	ldi	r18, 0x00	; 0
    2668:	30 e0       	ldi	r19, 0x00	; 0
    266a:	44 e3       	ldi	r20, 0x34	; 52
    266c:	53 e4       	ldi	r21, 0x43	; 67
    266e:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <__mulsf3>
    2672:	2b ed       	ldi	r18, 0xDB	; 219
    2674:	3f e0       	ldi	r19, 0x0F	; 15
    2676:	49 e4       	ldi	r20, 0x49	; 73
    2678:	50 e4       	ldi	r21, 0x40	; 64
    267a:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <__divsf3>
    267e:	20 e0       	ldi	r18, 0x00	; 0
    2680:	30 e0       	ldi	r19, 0x00	; 0
    2682:	44 e3       	ldi	r20, 0x34	; 52
    2684:	53 e4       	ldi	r21, 0x43	; 67
    2686:	0e 94 23 14 	call	0x2846	; 0x2846 <__addsf3>
		//deklination
		angle+=2.35;
    268a:	26 e6       	ldi	r18, 0x66	; 102
    268c:	36 e6       	ldi	r19, 0x66	; 102
    268e:	46 e1       	ldi	r20, 0x16	; 22
    2690:	50 e4       	ldi	r21, 0x40	; 64
    2692:	0e 94 23 14 	call	0x2846	; 0x2846 <__addsf3>
    2696:	6b 01       	movw	r12, r22
    2698:	7c 01       	movw	r14, r24
		//Normierung auf %360
		if (angle>=360)
    269a:	20 e0       	ldi	r18, 0x00	; 0
    269c:	30 e0       	ldi	r19, 0x00	; 0
    269e:	44 eb       	ldi	r20, 0xB4	; 180
    26a0:	53 e4       	ldi	r21, 0x43	; 67
    26a2:	0e 94 99 16 	call	0x2d32	; 0x2d32 <__gesf2>
    26a6:	88 23       	and	r24, r24
    26a8:	5c f0       	brlt	.+22     	; 0x26c0 <_ZN7Kompass5angleEv+0x9c>
		{
			angle-=360;
    26aa:	20 e0       	ldi	r18, 0x00	; 0
    26ac:	30 e0       	ldi	r19, 0x00	; 0
    26ae:	44 eb       	ldi	r20, 0xB4	; 180
    26b0:	53 e4       	ldi	r21, 0x43	; 67
    26b2:	c7 01       	movw	r24, r14
    26b4:	b6 01       	movw	r22, r12
    26b6:	0e 94 22 14 	call	0x2844	; 0x2844 <__subsf3>
    26ba:	6b 01       	movw	r12, r22
    26bc:	7c 01       	movw	r14, r24
    26be:	1c c0       	rjmp	.+56     	; 0x26f8 <_ZN7Kompass5angleEv+0xd4>
		}
		else if (angle < 0)
    26c0:	20 e0       	ldi	r18, 0x00	; 0
    26c2:	30 e0       	ldi	r19, 0x00	; 0
    26c4:	a9 01       	movw	r20, r18
    26c6:	c7 01       	movw	r24, r14
    26c8:	b6 01       	movw	r22, r12
    26ca:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <__cmpsf2>
    26ce:	88 23       	and	r24, r24
    26d0:	9c f4       	brge	.+38     	; 0x26f8 <_ZN7Kompass5angleEv+0xd4>
		{
			angle+=360;
    26d2:	20 e0       	ldi	r18, 0x00	; 0
    26d4:	30 e0       	ldi	r19, 0x00	; 0
    26d6:	44 eb       	ldi	r20, 0xB4	; 180
    26d8:	53 e4       	ldi	r21, 0x43	; 67
    26da:	c7 01       	movw	r24, r14
    26dc:	b6 01       	movw	r22, r12
    26de:	0e 94 23 14 	call	0x2846	; 0x2846 <__addsf3>
    26e2:	6b 01       	movw	r12, r22
    26e4:	7c 01       	movw	r14, r24
    26e6:	08 c0       	rjmp	.+16     	; 0x26f8 <_ZN7Kompass5angleEv+0xd4>

double Kompass::angle(){
	double angle=0;
	if (HMC5883L_readHeading())
	{
		angle=-1.0;
    26e8:	0f 2e       	mov	r0, r31
    26ea:	c1 2c       	mov	r12, r1
    26ec:	d1 2c       	mov	r13, r1
    26ee:	f0 e8       	ldi	r31, 0x80	; 128
    26f0:	ef 2e       	mov	r14, r31
    26f2:	ff eb       	ldi	r31, 0xBF	; 191
    26f4:	ff 2e       	mov	r15, r31
    26f6:	f0 2d       	mov	r31, r0
		{
			angle+=360;
		}
	}
	
	HMC5883L_command(0x02,HMCSIGLEMODE);
    26f8:	41 e0       	ldi	r20, 0x01	; 1
    26fa:	62 e0       	ldi	r22, 0x02	; 2
    26fc:	ce 01       	movw	r24, r28
    26fe:	0e 94 3e 12 	call	0x247c	; 0x247c <_ZN7Kompass16HMC5883L_commandEhh>
	return angle;
    2702:	c7 01       	movw	r24, r14
    2704:	b6 01       	movw	r22, r12
    2706:	df 91       	pop	r29
    2708:	cf 91       	pop	r28
    270a:	ff 90       	pop	r15
    270c:	ef 90       	pop	r14
    270e:	df 90       	pop	r13
    2710:	cf 90       	pop	r12
    2712:	08 95       	ret

00002714 <_ZN3RTCC1Ev>:


#include "RTC.h"

// default constructor
RTC::RTC()
    2714:	08 95       	ret

00002716 <_ZN3RTCD1Ev>:
{
} //RTC

// default destructor
RTC::~RTC()
    2716:	dc 01       	movw	r26, r24
{
	Sekunden=0;
    2718:	1a 96       	adiw	r26, 0x0a	; 10
    271a:	1c 92       	st	X, r1
    271c:	1a 97       	sbiw	r26, 0x0a	; 10
	HundSekunden=0;
    271e:	1b 96       	adiw	r26, 0x0b	; 11
    2720:	1c 92       	st	X, r1
    2722:	1b 97       	sbiw	r26, 0x0b	; 11
	Minuten=0;
    2724:	19 96       	adiw	r26, 0x09	; 9
    2726:	1c 92       	st	X, r1
    2728:	19 97       	sbiw	r26, 0x09	; 9
	Stunden=0;
    272a:	18 96       	adiw	r26, 0x08	; 8
    272c:	1c 92       	st	X, r1
    272e:	18 97       	sbiw	r26, 0x08	; 8
	Tag=0;
    2730:	1c 96       	adiw	r26, 0x0c	; 12
    2732:	1c 92       	st	X, r1
    2734:	1c 97       	sbiw	r26, 0x0c	; 12
	Monat=0;
    2736:	1d 96       	adiw	r26, 0x0d	; 13
    2738:	1c 92       	st	X, r1
    273a:	1d 97       	sbiw	r26, 0x0d	; 13
	Jahr=0;
    273c:	1e 96       	adiw	r26, 0x0e	; 14
    273e:	1c 92       	st	X, r1
    2740:	1e 97       	sbiw	r26, 0x0e	; 14
    2742:	fc 01       	movw	r30, r24
	for(uint8_t i=0;i<bitsderrtc;i++){
    2744:	80 e0       	ldi	r24, 0x00	; 0
		msg_uhr[i]=0;
    2746:	11 92       	st	Z+, r1
	Minuten=0;
	Stunden=0;
	Tag=0;
	Monat=0;
	Jahr=0;
	for(uint8_t i=0;i<bitsderrtc;i++){
    2748:	8f 5f       	subi	r24, 0xFF	; 255
    274a:	88 30       	cpi	r24, 0x08	; 8
    274c:	e1 f7       	brne	.-8      	; 0x2746 <_ZN3RTCD1Ev+0x30>
		msg_uhr[i]=0;
	}
	//Einstellungen des Ausgabebuffers
	msg_uhr[2]=':';
    274e:	8a e3       	ldi	r24, 0x3A	; 58
    2750:	12 96       	adiw	r26, 0x02	; 2
    2752:	8c 93       	st	X, r24
    2754:	12 97       	sbiw	r26, 0x02	; 2
	msg_uhr[5]=':';
    2756:	15 96       	adiw	r26, 0x05	; 5
    2758:	8c 93       	st	X, r24
    275a:	08 95       	ret

0000275c <_ZN3RTC4zeitEv>:
	//msg_dat[2]='.';
	//msg_dat[5]='.';
} //~RTC

uint8_t RTC::zeit(){
    275c:	fc 01       	movw	r30, r24
	//HundSekunden++; sitzt im Vektor um Taster besser entprellen zu koennen
	if (HundSekunden>=100)
    275e:	83 85       	ldd	r24, Z+11	; 0x0b
    2760:	84 36       	cpi	r24, 0x64	; 100
    2762:	e8 f0       	brcs	.+58     	; 0x279e <_ZN3RTC4zeitEv+0x42>
	{
		HundSekunden = 0;
    2764:	13 86       	std	Z+11, r1	; 0x0b
		Sekunden++;
    2766:	82 85       	ldd	r24, Z+10	; 0x0a
    2768:	91 e0       	ldi	r25, 0x01	; 1
    276a:	98 0f       	add	r25, r24
    276c:	92 87       	std	Z+10, r25	; 0x0a
		interupts |= 0x02;
    276e:	97 85       	ldd	r25, Z+15	; 0x0f
    2770:	92 60       	ori	r25, 0x02	; 2
    2772:	97 87       	std	Z+15, r25	; 0x0f
		if (Sekunden >= 60 && Sekunden <=200){
    2774:	8b 53       	subi	r24, 0x3B	; 59
    2776:	8d 38       	cpi	r24, 0x8D	; 141
    2778:	90 f4       	brcc	.+36     	; 0x279e <_ZN3RTC4zeitEv+0x42>
			Sekunden = 0;
    277a:	12 86       	std	Z+10, r1	; 0x0a
			Minuten++;
    277c:	81 85       	ldd	r24, Z+9	; 0x09
    277e:	8f 5f       	subi	r24, 0xFF	; 255
			if(Minuten >= 60){
    2780:	8c 33       	cpi	r24, 0x3C	; 60
    2782:	10 f4       	brcc	.+4      	; 0x2788 <_ZN3RTC4zeitEv+0x2c>
		HundSekunden = 0;
		Sekunden++;
		interupts |= 0x02;
		if (Sekunden >= 60 && Sekunden <=200){
			Sekunden = 0;
			Minuten++;
    2784:	81 87       	std	Z+9, r24	; 0x09
    2786:	04 c0       	rjmp	.+8      	; 0x2790 <_ZN3RTC4zeitEv+0x34>
			if(Minuten >= 60){
				Minuten = 0;
    2788:	11 86       	std	Z+9, r1	; 0x09
				Stunden++;
    278a:	80 85       	ldd	r24, Z+8	; 0x08
    278c:	8f 5f       	subi	r24, 0xFF	; 255
    278e:	80 87       	std	Z+8, r24	; 0x08
			}
			if(Stunden >= 24){
    2790:	80 85       	ldd	r24, Z+8	; 0x08
    2792:	88 31       	cpi	r24, 0x18	; 24
    2794:	20 f0       	brcs	.+8      	; 0x279e <_ZN3RTC4zeitEv+0x42>
				Stunden = 0;
    2796:	10 86       	std	Z+8, r1	; 0x08
	*/
	return 0;
}

void RTC::kalender(){
	Tag++;
    2798:	84 85       	ldd	r24, Z+12	; 0x0c
    279a:	8f 5f       	subi	r24, 0xFF	; 255
    279c:	84 87       	std	Z+12, r24	; 0x0c
				Stunden = 0;
				kalender();
			}
		}
	}
	msg_uhr[0]='0'+Stunden/10;
    279e:	90 85       	ldd	r25, Z+8	; 0x08
    27a0:	8d ec       	ldi	r24, 0xCD	; 205
    27a2:	98 9f       	mul	r25, r24
    27a4:	21 2d       	mov	r18, r1
    27a6:	11 24       	eor	r1, r1
    27a8:	26 95       	lsr	r18
    27aa:	26 95       	lsr	r18
    27ac:	26 95       	lsr	r18
    27ae:	30 e3       	ldi	r19, 0x30	; 48
    27b0:	32 0f       	add	r19, r18
    27b2:	30 83       	st	Z, r19
	msg_uhr[1]='0'+Stunden%10;
    27b4:	22 0f       	add	r18, r18
    27b6:	32 2f       	mov	r19, r18
    27b8:	33 0f       	add	r19, r19
    27ba:	33 0f       	add	r19, r19
    27bc:	23 0f       	add	r18, r19
    27be:	92 1b       	sub	r25, r18
    27c0:	90 5d       	subi	r25, 0xD0	; 208
    27c2:	91 83       	std	Z+1, r25	; 0x01
	msg_uhr[3]='0'+Minuten/10;
    27c4:	91 85       	ldd	r25, Z+9	; 0x09
    27c6:	98 9f       	mul	r25, r24
    27c8:	21 2d       	mov	r18, r1
    27ca:	11 24       	eor	r1, r1
    27cc:	26 95       	lsr	r18
    27ce:	26 95       	lsr	r18
    27d0:	26 95       	lsr	r18
    27d2:	30 e3       	ldi	r19, 0x30	; 48
    27d4:	32 0f       	add	r19, r18
    27d6:	33 83       	std	Z+3, r19	; 0x03
	msg_uhr[4]='0'+Minuten%10;
    27d8:	22 0f       	add	r18, r18
    27da:	32 2f       	mov	r19, r18
    27dc:	33 0f       	add	r19, r19
    27de:	33 0f       	add	r19, r19
    27e0:	23 0f       	add	r18, r19
    27e2:	92 1b       	sub	r25, r18
    27e4:	90 5d       	subi	r25, 0xD0	; 208
    27e6:	94 83       	std	Z+4, r25	; 0x04
	msg_uhr[6]='0'+Sekunden/10;
    27e8:	92 85       	ldd	r25, Z+10	; 0x0a
    27ea:	98 9f       	mul	r25, r24
    27ec:	81 2d       	mov	r24, r1
    27ee:	11 24       	eor	r1, r1
    27f0:	86 95       	lsr	r24
    27f2:	86 95       	lsr	r24
    27f4:	86 95       	lsr	r24
    27f6:	20 e3       	ldi	r18, 0x30	; 48
    27f8:	28 0f       	add	r18, r24
    27fa:	26 83       	std	Z+6, r18	; 0x06
	msg_uhr[7]='0'+Sekunden%10;
    27fc:	88 0f       	add	r24, r24
    27fe:	28 2f       	mov	r18, r24
    2800:	22 0f       	add	r18, r18
    2802:	22 0f       	add	r18, r18
    2804:	82 0f       	add	r24, r18
    2806:	98 1b       	sub	r25, r24
    2808:	90 5d       	subi	r25, 0xD0	; 208
    280a:	97 83       	std	Z+7, r25	; 0x07
	msg_dat[4]='0'+GetTime.Month%10;
	msg_dat[6]='0'+(GetTime.Year-2000)/10;
	msg_dat[7]='0'+(GetTime.Year-2000)%10;
	*/
	return 0;
}
    280c:	80 e0       	ldi	r24, 0x00	; 0
    280e:	08 95       	ret

00002810 <_ZN3RTC10dummyeinstEv>:

void RTC::kalender(){
	Tag++;
}

void RTC::dummyeinst(){
    2810:	fc 01       	movw	r30, r24
	Stunden=10;
    2812:	8a e0       	ldi	r24, 0x0A	; 10
    2814:	80 87       	std	Z+8, r24	; 0x08
	Minuten=30;
    2816:	8e e1       	ldi	r24, 0x1E	; 30
    2818:	81 87       	std	Z+9, r24	; 0x09
	Tag=27;
    281a:	8b e1       	ldi	r24, 0x1B	; 27
    281c:	84 87       	std	Z+12, r24	; 0x0c
	Monat=8;
    281e:	88 e0       	ldi	r24, 0x08	; 8
    2820:	85 87       	std	Z+13, r24	; 0x0d
	Jahr=15;
    2822:	8f e0       	ldi	r24, 0x0F	; 15
    2824:	86 87       	std	Z+14, r24	; 0x0e
    2826:	08 95       	ret

00002828 <_ZN3RTC8RTCstartEv>:
}

void RTC::RTCstart(){
	//Einstellungen des Ausgabebuffers
	msg_uhr[2]=':';
    2828:	2a e3       	ldi	r18, 0x3A	; 58
    282a:	fc 01       	movw	r30, r24
    282c:	22 83       	std	Z+2, r18	; 0x02
	msg_uhr[5]=':';
    282e:	25 83       	std	Z+5, r18	; 0x05
	//Timer2 als 1ms Timer fuer die RTC
	//noch synchrom
	TCNT2 = TIMER2RTCTIME;
    2830:	80 e7       	ldi	r24, 0x70	; 112
    2832:	80 93 b2 00 	sts	0x00B2, r24
	TIMSK2 = (1<<TOIE2);
    2836:	81 e0       	ldi	r24, 0x01	; 1
    2838:	80 93 70 00 	sts	0x0070, r24
	TCCR2B = (1<<CS22) | (1<<CS21);
    283c:	86 e0       	ldi	r24, 0x06	; 6
    283e:	80 93 b1 00 	sts	0x00B1, r24
    2842:	08 95       	ret

00002844 <__subsf3>:
    2844:	50 58       	subi	r21, 0x80	; 128

00002846 <__addsf3>:
    2846:	bb 27       	eor	r27, r27
    2848:	aa 27       	eor	r26, r26
    284a:	0e d0       	rcall	.+28     	; 0x2868 <__addsf3x>
    284c:	27 c2       	rjmp	.+1102   	; 0x2c9c <__fp_round>
    284e:	f0 d1       	rcall	.+992    	; 0x2c30 <__fp_pscA>
    2850:	30 f0       	brcs	.+12     	; 0x285e <__addsf3+0x18>
    2852:	f5 d1       	rcall	.+1002   	; 0x2c3e <__fp_pscB>
    2854:	20 f0       	brcs	.+8      	; 0x285e <__addsf3+0x18>
    2856:	31 f4       	brne	.+12     	; 0x2864 <__addsf3+0x1e>
    2858:	9f 3f       	cpi	r25, 0xFF	; 255
    285a:	11 f4       	brne	.+4      	; 0x2860 <__addsf3+0x1a>
    285c:	1e f4       	brtc	.+6      	; 0x2864 <__addsf3+0x1e>
    285e:	c0 c1       	rjmp	.+896    	; 0x2be0 <__fp_nan>
    2860:	0e f4       	brtc	.+2      	; 0x2864 <__addsf3+0x1e>
    2862:	e0 95       	com	r30
    2864:	e7 fb       	bst	r30, 7
    2866:	b6 c1       	rjmp	.+876    	; 0x2bd4 <__fp_inf>

00002868 <__addsf3x>:
    2868:	e9 2f       	mov	r30, r25
    286a:	3a d2       	rcall	.+1140   	; 0x2ce0 <__fp_split3>
    286c:	80 f3       	brcs	.-32     	; 0x284e <__addsf3+0x8>
    286e:	ba 17       	cp	r27, r26
    2870:	62 07       	cpc	r22, r18
    2872:	73 07       	cpc	r23, r19
    2874:	84 07       	cpc	r24, r20
    2876:	95 07       	cpc	r25, r21
    2878:	18 f0       	brcs	.+6      	; 0x2880 <__addsf3x+0x18>
    287a:	71 f4       	brne	.+28     	; 0x2898 <__addsf3x+0x30>
    287c:	9e f5       	brtc	.+102    	; 0x28e4 <__addsf3x+0x7c>
    287e:	52 c2       	rjmp	.+1188   	; 0x2d24 <__fp_zero>
    2880:	0e f4       	brtc	.+2      	; 0x2884 <__addsf3x+0x1c>
    2882:	e0 95       	com	r30
    2884:	0b 2e       	mov	r0, r27
    2886:	ba 2f       	mov	r27, r26
    2888:	a0 2d       	mov	r26, r0
    288a:	0b 01       	movw	r0, r22
    288c:	b9 01       	movw	r22, r18
    288e:	90 01       	movw	r18, r0
    2890:	0c 01       	movw	r0, r24
    2892:	ca 01       	movw	r24, r20
    2894:	a0 01       	movw	r20, r0
    2896:	11 24       	eor	r1, r1
    2898:	ff 27       	eor	r31, r31
    289a:	59 1b       	sub	r21, r25
    289c:	99 f0       	breq	.+38     	; 0x28c4 <__addsf3x+0x5c>
    289e:	59 3f       	cpi	r21, 0xF9	; 249
    28a0:	50 f4       	brcc	.+20     	; 0x28b6 <__addsf3x+0x4e>
    28a2:	50 3e       	cpi	r21, 0xE0	; 224
    28a4:	68 f1       	brcs	.+90     	; 0x2900 <__addsf3x+0x98>
    28a6:	1a 16       	cp	r1, r26
    28a8:	f0 40       	sbci	r31, 0x00	; 0
    28aa:	a2 2f       	mov	r26, r18
    28ac:	23 2f       	mov	r18, r19
    28ae:	34 2f       	mov	r19, r20
    28b0:	44 27       	eor	r20, r20
    28b2:	58 5f       	subi	r21, 0xF8	; 248
    28b4:	f3 cf       	rjmp	.-26     	; 0x289c <__addsf3x+0x34>
    28b6:	46 95       	lsr	r20
    28b8:	37 95       	ror	r19
    28ba:	27 95       	ror	r18
    28bc:	a7 95       	ror	r26
    28be:	f0 40       	sbci	r31, 0x00	; 0
    28c0:	53 95       	inc	r21
    28c2:	c9 f7       	brne	.-14     	; 0x28b6 <__addsf3x+0x4e>
    28c4:	7e f4       	brtc	.+30     	; 0x28e4 <__addsf3x+0x7c>
    28c6:	1f 16       	cp	r1, r31
    28c8:	ba 0b       	sbc	r27, r26
    28ca:	62 0b       	sbc	r22, r18
    28cc:	73 0b       	sbc	r23, r19
    28ce:	84 0b       	sbc	r24, r20
    28d0:	ba f0       	brmi	.+46     	; 0x2900 <__addsf3x+0x98>
    28d2:	91 50       	subi	r25, 0x01	; 1
    28d4:	a1 f0       	breq	.+40     	; 0x28fe <__addsf3x+0x96>
    28d6:	ff 0f       	add	r31, r31
    28d8:	bb 1f       	adc	r27, r27
    28da:	66 1f       	adc	r22, r22
    28dc:	77 1f       	adc	r23, r23
    28de:	88 1f       	adc	r24, r24
    28e0:	c2 f7       	brpl	.-16     	; 0x28d2 <__addsf3x+0x6a>
    28e2:	0e c0       	rjmp	.+28     	; 0x2900 <__addsf3x+0x98>
    28e4:	ba 0f       	add	r27, r26
    28e6:	62 1f       	adc	r22, r18
    28e8:	73 1f       	adc	r23, r19
    28ea:	84 1f       	adc	r24, r20
    28ec:	48 f4       	brcc	.+18     	; 0x2900 <__addsf3x+0x98>
    28ee:	87 95       	ror	r24
    28f0:	77 95       	ror	r23
    28f2:	67 95       	ror	r22
    28f4:	b7 95       	ror	r27
    28f6:	f7 95       	ror	r31
    28f8:	9e 3f       	cpi	r25, 0xFE	; 254
    28fa:	08 f0       	brcs	.+2      	; 0x28fe <__addsf3x+0x96>
    28fc:	b3 cf       	rjmp	.-154    	; 0x2864 <__addsf3+0x1e>
    28fe:	93 95       	inc	r25
    2900:	88 0f       	add	r24, r24
    2902:	08 f0       	brcs	.+2      	; 0x2906 <__addsf3x+0x9e>
    2904:	99 27       	eor	r25, r25
    2906:	ee 0f       	add	r30, r30
    2908:	97 95       	ror	r25
    290a:	87 95       	ror	r24
    290c:	08 95       	ret
    290e:	90 d1       	rcall	.+800    	; 0x2c30 <__fp_pscA>
    2910:	58 f0       	brcs	.+22     	; 0x2928 <__addsf3x+0xc0>
    2912:	80 e8       	ldi	r24, 0x80	; 128
    2914:	91 e0       	ldi	r25, 0x01	; 1
    2916:	09 f4       	brne	.+2      	; 0x291a <__addsf3x+0xb2>
    2918:	9e ef       	ldi	r25, 0xFE	; 254
    291a:	91 d1       	rcall	.+802    	; 0x2c3e <__fp_pscB>
    291c:	28 f0       	brcs	.+10     	; 0x2928 <__addsf3x+0xc0>
    291e:	40 e8       	ldi	r20, 0x80	; 128
    2920:	51 e0       	ldi	r21, 0x01	; 1
    2922:	59 f4       	brne	.+22     	; 0x293a <atan2+0xe>
    2924:	5e ef       	ldi	r21, 0xFE	; 254
    2926:	09 c0       	rjmp	.+18     	; 0x293a <atan2+0xe>
    2928:	5b c1       	rjmp	.+694    	; 0x2be0 <__fp_nan>
    292a:	fc c1       	rjmp	.+1016   	; 0x2d24 <__fp_zero>

0000292c <atan2>:
    292c:	e9 2f       	mov	r30, r25
    292e:	e0 78       	andi	r30, 0x80	; 128
    2930:	d7 d1       	rcall	.+942    	; 0x2ce0 <__fp_split3>
    2932:	68 f3       	brcs	.-38     	; 0x290e <__addsf3x+0xa6>
    2934:	09 2e       	mov	r0, r25
    2936:	05 2a       	or	r0, r21
    2938:	c1 f3       	breq	.-16     	; 0x292a <__addsf3x+0xc2>
    293a:	26 17       	cp	r18, r22
    293c:	37 07       	cpc	r19, r23
    293e:	48 07       	cpc	r20, r24
    2940:	59 07       	cpc	r21, r25
    2942:	38 f0       	brcs	.+14     	; 0x2952 <atan2+0x26>
    2944:	0e 2e       	mov	r0, r30
    2946:	07 f8       	bld	r0, 7
    2948:	e0 25       	eor	r30, r0
    294a:	69 f0       	breq	.+26     	; 0x2966 <atan2+0x3a>
    294c:	e0 25       	eor	r30, r0
    294e:	e0 64       	ori	r30, 0x40	; 64
    2950:	0a c0       	rjmp	.+20     	; 0x2966 <atan2+0x3a>
    2952:	ef 63       	ori	r30, 0x3F	; 63
    2954:	07 f8       	bld	r0, 7
    2956:	00 94       	com	r0
    2958:	07 fa       	bst	r0, 7
    295a:	db 01       	movw	r26, r22
    295c:	b9 01       	movw	r22, r18
    295e:	9d 01       	movw	r18, r26
    2960:	dc 01       	movw	r26, r24
    2962:	ca 01       	movw	r24, r20
    2964:	ad 01       	movw	r20, r26
    2966:	ef 93       	push	r30
    2968:	4a d0       	rcall	.+148    	; 0x29fe <__divsf3_pse>
    296a:	98 d1       	rcall	.+816    	; 0x2c9c <__fp_round>
    296c:	0a d0       	rcall	.+20     	; 0x2982 <atan>
    296e:	5f 91       	pop	r21
    2970:	55 23       	and	r21, r21
    2972:	31 f0       	breq	.+12     	; 0x2980 <atan2+0x54>
    2974:	2b ed       	ldi	r18, 0xDB	; 219
    2976:	3f e0       	ldi	r19, 0x0F	; 15
    2978:	49 e4       	ldi	r20, 0x49	; 73
    297a:	50 fd       	sbrc	r21, 0
    297c:	49 ec       	ldi	r20, 0xC9	; 201
    297e:	63 cf       	rjmp	.-314    	; 0x2846 <__addsf3>
    2980:	08 95       	ret

00002982 <atan>:
    2982:	df 93       	push	r29
    2984:	dd 27       	eor	r29, r29
    2986:	b9 2f       	mov	r27, r25
    2988:	bf 77       	andi	r27, 0x7F	; 127
    298a:	40 e8       	ldi	r20, 0x80	; 128
    298c:	5f e3       	ldi	r21, 0x3F	; 63
    298e:	16 16       	cp	r1, r22
    2990:	17 06       	cpc	r1, r23
    2992:	48 07       	cpc	r20, r24
    2994:	5b 07       	cpc	r21, r27
    2996:	10 f4       	brcc	.+4      	; 0x299c <atan+0x1a>
    2998:	d9 2f       	mov	r29, r25
    299a:	cf d1       	rcall	.+926    	; 0x2d3a <inverse>
    299c:	9f 93       	push	r25
    299e:	8f 93       	push	r24
    29a0:	7f 93       	push	r23
    29a2:	6f 93       	push	r22
    29a4:	3a d2       	rcall	.+1140   	; 0x2e1a <square>
    29a6:	e8 e7       	ldi	r30, 0x78	; 120
    29a8:	f0 e0       	ldi	r31, 0x00	; 0
    29aa:	1d d1       	rcall	.+570    	; 0x2be6 <__fp_powser>
    29ac:	77 d1       	rcall	.+750    	; 0x2c9c <__fp_round>
    29ae:	2f 91       	pop	r18
    29b0:	3f 91       	pop	r19
    29b2:	4f 91       	pop	r20
    29b4:	5f 91       	pop	r21
    29b6:	d4 d1       	rcall	.+936    	; 0x2d60 <__mulsf3x>
    29b8:	dd 23       	and	r29, r29
    29ba:	49 f0       	breq	.+18     	; 0x29ce <atan+0x4c>
    29bc:	90 58       	subi	r25, 0x80	; 128
    29be:	a2 ea       	ldi	r26, 0xA2	; 162
    29c0:	2a ed       	ldi	r18, 0xDA	; 218
    29c2:	3f e0       	ldi	r19, 0x0F	; 15
    29c4:	49 ec       	ldi	r20, 0xC9	; 201
    29c6:	5f e3       	ldi	r21, 0x3F	; 63
    29c8:	d0 78       	andi	r29, 0x80	; 128
    29ca:	5d 27       	eor	r21, r29
    29cc:	4d df       	rcall	.-358    	; 0x2868 <__addsf3x>
    29ce:	df 91       	pop	r29
    29d0:	65 c1       	rjmp	.+714    	; 0x2c9c <__fp_round>

000029d2 <__cmpsf2>:
    29d2:	dc d0       	rcall	.+440    	; 0x2b8c <__fp_cmp>
    29d4:	08 f4       	brcc	.+2      	; 0x29d8 <__cmpsf2+0x6>
    29d6:	81 e0       	ldi	r24, 0x01	; 1
    29d8:	08 95       	ret

000029da <cos>:
    29da:	39 d1       	rcall	.+626    	; 0x2c4e <__fp_rempio2>
    29dc:	e3 95       	inc	r30
    29de:	6f c1       	rjmp	.+734    	; 0x2cbe <__fp_sinus>

000029e0 <__divsf3>:
    29e0:	0c d0       	rcall	.+24     	; 0x29fa <__divsf3x>
    29e2:	5c c1       	rjmp	.+696    	; 0x2c9c <__fp_round>
    29e4:	2c d1       	rcall	.+600    	; 0x2c3e <__fp_pscB>
    29e6:	40 f0       	brcs	.+16     	; 0x29f8 <__divsf3+0x18>
    29e8:	23 d1       	rcall	.+582    	; 0x2c30 <__fp_pscA>
    29ea:	30 f0       	brcs	.+12     	; 0x29f8 <__divsf3+0x18>
    29ec:	21 f4       	brne	.+8      	; 0x29f6 <__divsf3+0x16>
    29ee:	5f 3f       	cpi	r21, 0xFF	; 255
    29f0:	19 f0       	breq	.+6      	; 0x29f8 <__divsf3+0x18>
    29f2:	f0 c0       	rjmp	.+480    	; 0x2bd4 <__fp_inf>
    29f4:	51 11       	cpse	r21, r1
    29f6:	97 c1       	rjmp	.+814    	; 0x2d26 <__fp_szero>
    29f8:	f3 c0       	rjmp	.+486    	; 0x2be0 <__fp_nan>

000029fa <__divsf3x>:
    29fa:	72 d1       	rcall	.+740    	; 0x2ce0 <__fp_split3>
    29fc:	98 f3       	brcs	.-26     	; 0x29e4 <__divsf3+0x4>

000029fe <__divsf3_pse>:
    29fe:	99 23       	and	r25, r25
    2a00:	c9 f3       	breq	.-14     	; 0x29f4 <__divsf3+0x14>
    2a02:	55 23       	and	r21, r21
    2a04:	b1 f3       	breq	.-20     	; 0x29f2 <__divsf3+0x12>
    2a06:	95 1b       	sub	r25, r21
    2a08:	55 0b       	sbc	r21, r21
    2a0a:	bb 27       	eor	r27, r27
    2a0c:	aa 27       	eor	r26, r26
    2a0e:	62 17       	cp	r22, r18
    2a10:	73 07       	cpc	r23, r19
    2a12:	84 07       	cpc	r24, r20
    2a14:	38 f0       	brcs	.+14     	; 0x2a24 <__divsf3_pse+0x26>
    2a16:	9f 5f       	subi	r25, 0xFF	; 255
    2a18:	5f 4f       	sbci	r21, 0xFF	; 255
    2a1a:	22 0f       	add	r18, r18
    2a1c:	33 1f       	adc	r19, r19
    2a1e:	44 1f       	adc	r20, r20
    2a20:	aa 1f       	adc	r26, r26
    2a22:	a9 f3       	breq	.-22     	; 0x2a0e <__divsf3_pse+0x10>
    2a24:	33 d0       	rcall	.+102    	; 0x2a8c <__divsf3_pse+0x8e>
    2a26:	0e 2e       	mov	r0, r30
    2a28:	3a f0       	brmi	.+14     	; 0x2a38 <__divsf3_pse+0x3a>
    2a2a:	e0 e8       	ldi	r30, 0x80	; 128
    2a2c:	30 d0       	rcall	.+96     	; 0x2a8e <__divsf3_pse+0x90>
    2a2e:	91 50       	subi	r25, 0x01	; 1
    2a30:	50 40       	sbci	r21, 0x00	; 0
    2a32:	e6 95       	lsr	r30
    2a34:	00 1c       	adc	r0, r0
    2a36:	ca f7       	brpl	.-14     	; 0x2a2a <__divsf3_pse+0x2c>
    2a38:	29 d0       	rcall	.+82     	; 0x2a8c <__divsf3_pse+0x8e>
    2a3a:	fe 2f       	mov	r31, r30
    2a3c:	27 d0       	rcall	.+78     	; 0x2a8c <__divsf3_pse+0x8e>
    2a3e:	66 0f       	add	r22, r22
    2a40:	77 1f       	adc	r23, r23
    2a42:	88 1f       	adc	r24, r24
    2a44:	bb 1f       	adc	r27, r27
    2a46:	26 17       	cp	r18, r22
    2a48:	37 07       	cpc	r19, r23
    2a4a:	48 07       	cpc	r20, r24
    2a4c:	ab 07       	cpc	r26, r27
    2a4e:	b0 e8       	ldi	r27, 0x80	; 128
    2a50:	09 f0       	breq	.+2      	; 0x2a54 <__divsf3_pse+0x56>
    2a52:	bb 0b       	sbc	r27, r27
    2a54:	80 2d       	mov	r24, r0
    2a56:	bf 01       	movw	r22, r30
    2a58:	ff 27       	eor	r31, r31
    2a5a:	93 58       	subi	r25, 0x83	; 131
    2a5c:	5f 4f       	sbci	r21, 0xFF	; 255
    2a5e:	2a f0       	brmi	.+10     	; 0x2a6a <__divsf3_pse+0x6c>
    2a60:	9e 3f       	cpi	r25, 0xFE	; 254
    2a62:	51 05       	cpc	r21, r1
    2a64:	68 f0       	brcs	.+26     	; 0x2a80 <__divsf3_pse+0x82>
    2a66:	b6 c0       	rjmp	.+364    	; 0x2bd4 <__fp_inf>
    2a68:	5e c1       	rjmp	.+700    	; 0x2d26 <__fp_szero>
    2a6a:	5f 3f       	cpi	r21, 0xFF	; 255
    2a6c:	ec f3       	brlt	.-6      	; 0x2a68 <__divsf3_pse+0x6a>
    2a6e:	98 3e       	cpi	r25, 0xE8	; 232
    2a70:	dc f3       	brlt	.-10     	; 0x2a68 <__divsf3_pse+0x6a>
    2a72:	86 95       	lsr	r24
    2a74:	77 95       	ror	r23
    2a76:	67 95       	ror	r22
    2a78:	b7 95       	ror	r27
    2a7a:	f7 95       	ror	r31
    2a7c:	9f 5f       	subi	r25, 0xFF	; 255
    2a7e:	c9 f7       	brne	.-14     	; 0x2a72 <__divsf3_pse+0x74>
    2a80:	88 0f       	add	r24, r24
    2a82:	91 1d       	adc	r25, r1
    2a84:	96 95       	lsr	r25
    2a86:	87 95       	ror	r24
    2a88:	97 f9       	bld	r25, 7
    2a8a:	08 95       	ret
    2a8c:	e1 e0       	ldi	r30, 0x01	; 1
    2a8e:	66 0f       	add	r22, r22
    2a90:	77 1f       	adc	r23, r23
    2a92:	88 1f       	adc	r24, r24
    2a94:	bb 1f       	adc	r27, r27
    2a96:	62 17       	cp	r22, r18
    2a98:	73 07       	cpc	r23, r19
    2a9a:	84 07       	cpc	r24, r20
    2a9c:	ba 07       	cpc	r27, r26
    2a9e:	20 f0       	brcs	.+8      	; 0x2aa8 <__divsf3_pse+0xaa>
    2aa0:	62 1b       	sub	r22, r18
    2aa2:	73 0b       	sbc	r23, r19
    2aa4:	84 0b       	sbc	r24, r20
    2aa6:	ba 0b       	sbc	r27, r26
    2aa8:	ee 1f       	adc	r30, r30
    2aaa:	88 f7       	brcc	.-30     	; 0x2a8e <__divsf3_pse+0x90>
    2aac:	e0 95       	com	r30
    2aae:	08 95       	ret

00002ab0 <__fixsfsi>:
    2ab0:	04 d0       	rcall	.+8      	; 0x2aba <__fixunssfsi>
    2ab2:	68 94       	set
    2ab4:	b1 11       	cpse	r27, r1
    2ab6:	37 c1       	rjmp	.+622    	; 0x2d26 <__fp_szero>
    2ab8:	08 95       	ret

00002aba <__fixunssfsi>:
    2aba:	1a d1       	rcall	.+564    	; 0x2cf0 <__fp_splitA>
    2abc:	88 f0       	brcs	.+34     	; 0x2ae0 <__fixunssfsi+0x26>
    2abe:	9f 57       	subi	r25, 0x7F	; 127
    2ac0:	90 f0       	brcs	.+36     	; 0x2ae6 <__fixunssfsi+0x2c>
    2ac2:	b9 2f       	mov	r27, r25
    2ac4:	99 27       	eor	r25, r25
    2ac6:	b7 51       	subi	r27, 0x17	; 23
    2ac8:	a0 f0       	brcs	.+40     	; 0x2af2 <__fixunssfsi+0x38>
    2aca:	d1 f0       	breq	.+52     	; 0x2b00 <__fixunssfsi+0x46>
    2acc:	66 0f       	add	r22, r22
    2ace:	77 1f       	adc	r23, r23
    2ad0:	88 1f       	adc	r24, r24
    2ad2:	99 1f       	adc	r25, r25
    2ad4:	1a f0       	brmi	.+6      	; 0x2adc <__fixunssfsi+0x22>
    2ad6:	ba 95       	dec	r27
    2ad8:	c9 f7       	brne	.-14     	; 0x2acc <__fixunssfsi+0x12>
    2ada:	12 c0       	rjmp	.+36     	; 0x2b00 <__fixunssfsi+0x46>
    2adc:	b1 30       	cpi	r27, 0x01	; 1
    2ade:	81 f0       	breq	.+32     	; 0x2b00 <__fixunssfsi+0x46>
    2ae0:	21 d1       	rcall	.+578    	; 0x2d24 <__fp_zero>
    2ae2:	b1 e0       	ldi	r27, 0x01	; 1
    2ae4:	08 95       	ret
    2ae6:	1e c1       	rjmp	.+572    	; 0x2d24 <__fp_zero>
    2ae8:	67 2f       	mov	r22, r23
    2aea:	78 2f       	mov	r23, r24
    2aec:	88 27       	eor	r24, r24
    2aee:	b8 5f       	subi	r27, 0xF8	; 248
    2af0:	39 f0       	breq	.+14     	; 0x2b00 <__fixunssfsi+0x46>
    2af2:	b9 3f       	cpi	r27, 0xF9	; 249
    2af4:	cc f3       	brlt	.-14     	; 0x2ae8 <__fixunssfsi+0x2e>
    2af6:	86 95       	lsr	r24
    2af8:	77 95       	ror	r23
    2afa:	67 95       	ror	r22
    2afc:	b3 95       	inc	r27
    2afe:	d9 f7       	brne	.-10     	; 0x2af6 <__fixunssfsi+0x3c>
    2b00:	3e f4       	brtc	.+14     	; 0x2b10 <__fixunssfsi+0x56>
    2b02:	90 95       	com	r25
    2b04:	80 95       	com	r24
    2b06:	70 95       	com	r23
    2b08:	61 95       	neg	r22
    2b0a:	7f 4f       	sbci	r23, 0xFF	; 255
    2b0c:	8f 4f       	sbci	r24, 0xFF	; 255
    2b0e:	9f 4f       	sbci	r25, 0xFF	; 255
    2b10:	08 95       	ret

00002b12 <__floatunsisf>:
    2b12:	e8 94       	clt
    2b14:	09 c0       	rjmp	.+18     	; 0x2b28 <__floatsisf+0x12>

00002b16 <__floatsisf>:
    2b16:	97 fb       	bst	r25, 7
    2b18:	3e f4       	brtc	.+14     	; 0x2b28 <__floatsisf+0x12>
    2b1a:	90 95       	com	r25
    2b1c:	80 95       	com	r24
    2b1e:	70 95       	com	r23
    2b20:	61 95       	neg	r22
    2b22:	7f 4f       	sbci	r23, 0xFF	; 255
    2b24:	8f 4f       	sbci	r24, 0xFF	; 255
    2b26:	9f 4f       	sbci	r25, 0xFF	; 255
    2b28:	99 23       	and	r25, r25
    2b2a:	a9 f0       	breq	.+42     	; 0x2b56 <__floatsisf+0x40>
    2b2c:	f9 2f       	mov	r31, r25
    2b2e:	96 e9       	ldi	r25, 0x96	; 150
    2b30:	bb 27       	eor	r27, r27
    2b32:	93 95       	inc	r25
    2b34:	f6 95       	lsr	r31
    2b36:	87 95       	ror	r24
    2b38:	77 95       	ror	r23
    2b3a:	67 95       	ror	r22
    2b3c:	b7 95       	ror	r27
    2b3e:	f1 11       	cpse	r31, r1
    2b40:	f8 cf       	rjmp	.-16     	; 0x2b32 <__floatsisf+0x1c>
    2b42:	fa f4       	brpl	.+62     	; 0x2b82 <__floatsisf+0x6c>
    2b44:	bb 0f       	add	r27, r27
    2b46:	11 f4       	brne	.+4      	; 0x2b4c <__floatsisf+0x36>
    2b48:	60 ff       	sbrs	r22, 0
    2b4a:	1b c0       	rjmp	.+54     	; 0x2b82 <__floatsisf+0x6c>
    2b4c:	6f 5f       	subi	r22, 0xFF	; 255
    2b4e:	7f 4f       	sbci	r23, 0xFF	; 255
    2b50:	8f 4f       	sbci	r24, 0xFF	; 255
    2b52:	9f 4f       	sbci	r25, 0xFF	; 255
    2b54:	16 c0       	rjmp	.+44     	; 0x2b82 <__floatsisf+0x6c>
    2b56:	88 23       	and	r24, r24
    2b58:	11 f0       	breq	.+4      	; 0x2b5e <__floatsisf+0x48>
    2b5a:	96 e9       	ldi	r25, 0x96	; 150
    2b5c:	11 c0       	rjmp	.+34     	; 0x2b80 <__floatsisf+0x6a>
    2b5e:	77 23       	and	r23, r23
    2b60:	21 f0       	breq	.+8      	; 0x2b6a <__floatsisf+0x54>
    2b62:	9e e8       	ldi	r25, 0x8E	; 142
    2b64:	87 2f       	mov	r24, r23
    2b66:	76 2f       	mov	r23, r22
    2b68:	05 c0       	rjmp	.+10     	; 0x2b74 <__floatsisf+0x5e>
    2b6a:	66 23       	and	r22, r22
    2b6c:	71 f0       	breq	.+28     	; 0x2b8a <__floatsisf+0x74>
    2b6e:	96 e8       	ldi	r25, 0x86	; 134
    2b70:	86 2f       	mov	r24, r22
    2b72:	70 e0       	ldi	r23, 0x00	; 0
    2b74:	60 e0       	ldi	r22, 0x00	; 0
    2b76:	2a f0       	brmi	.+10     	; 0x2b82 <__floatsisf+0x6c>
    2b78:	9a 95       	dec	r25
    2b7a:	66 0f       	add	r22, r22
    2b7c:	77 1f       	adc	r23, r23
    2b7e:	88 1f       	adc	r24, r24
    2b80:	da f7       	brpl	.-10     	; 0x2b78 <__floatsisf+0x62>
    2b82:	88 0f       	add	r24, r24
    2b84:	96 95       	lsr	r25
    2b86:	87 95       	ror	r24
    2b88:	97 f9       	bld	r25, 7
    2b8a:	08 95       	ret

00002b8c <__fp_cmp>:
    2b8c:	99 0f       	add	r25, r25
    2b8e:	00 08       	sbc	r0, r0
    2b90:	55 0f       	add	r21, r21
    2b92:	aa 0b       	sbc	r26, r26
    2b94:	e0 e8       	ldi	r30, 0x80	; 128
    2b96:	fe ef       	ldi	r31, 0xFE	; 254
    2b98:	16 16       	cp	r1, r22
    2b9a:	17 06       	cpc	r1, r23
    2b9c:	e8 07       	cpc	r30, r24
    2b9e:	f9 07       	cpc	r31, r25
    2ba0:	c0 f0       	brcs	.+48     	; 0x2bd2 <__fp_cmp+0x46>
    2ba2:	12 16       	cp	r1, r18
    2ba4:	13 06       	cpc	r1, r19
    2ba6:	e4 07       	cpc	r30, r20
    2ba8:	f5 07       	cpc	r31, r21
    2baa:	98 f0       	brcs	.+38     	; 0x2bd2 <__fp_cmp+0x46>
    2bac:	62 1b       	sub	r22, r18
    2bae:	73 0b       	sbc	r23, r19
    2bb0:	84 0b       	sbc	r24, r20
    2bb2:	95 0b       	sbc	r25, r21
    2bb4:	39 f4       	brne	.+14     	; 0x2bc4 <__fp_cmp+0x38>
    2bb6:	0a 26       	eor	r0, r26
    2bb8:	61 f0       	breq	.+24     	; 0x2bd2 <__fp_cmp+0x46>
    2bba:	23 2b       	or	r18, r19
    2bbc:	24 2b       	or	r18, r20
    2bbe:	25 2b       	or	r18, r21
    2bc0:	21 f4       	brne	.+8      	; 0x2bca <__fp_cmp+0x3e>
    2bc2:	08 95       	ret
    2bc4:	0a 26       	eor	r0, r26
    2bc6:	09 f4       	brne	.+2      	; 0x2bca <__fp_cmp+0x3e>
    2bc8:	a1 40       	sbci	r26, 0x01	; 1
    2bca:	a6 95       	lsr	r26
    2bcc:	8f ef       	ldi	r24, 0xFF	; 255
    2bce:	81 1d       	adc	r24, r1
    2bd0:	81 1d       	adc	r24, r1
    2bd2:	08 95       	ret

00002bd4 <__fp_inf>:
    2bd4:	97 f9       	bld	r25, 7
    2bd6:	9f 67       	ori	r25, 0x7F	; 127
    2bd8:	80 e8       	ldi	r24, 0x80	; 128
    2bda:	70 e0       	ldi	r23, 0x00	; 0
    2bdc:	60 e0       	ldi	r22, 0x00	; 0
    2bde:	08 95       	ret

00002be0 <__fp_nan>:
    2be0:	9f ef       	ldi	r25, 0xFF	; 255
    2be2:	80 ec       	ldi	r24, 0xC0	; 192
    2be4:	08 95       	ret

00002be6 <__fp_powser>:
    2be6:	df 93       	push	r29
    2be8:	cf 93       	push	r28
    2bea:	1f 93       	push	r17
    2bec:	0f 93       	push	r16
    2bee:	ff 92       	push	r15
    2bf0:	ef 92       	push	r14
    2bf2:	df 92       	push	r13
    2bf4:	7b 01       	movw	r14, r22
    2bf6:	8c 01       	movw	r16, r24
    2bf8:	68 94       	set
    2bfa:	05 c0       	rjmp	.+10     	; 0x2c06 <__fp_powser+0x20>
    2bfc:	da 2e       	mov	r13, r26
    2bfe:	ef 01       	movw	r28, r30
    2c00:	af d0       	rcall	.+350    	; 0x2d60 <__mulsf3x>
    2c02:	fe 01       	movw	r30, r28
    2c04:	e8 94       	clt
    2c06:	a5 91       	lpm	r26, Z+
    2c08:	25 91       	lpm	r18, Z+
    2c0a:	35 91       	lpm	r19, Z+
    2c0c:	45 91       	lpm	r20, Z+
    2c0e:	55 91       	lpm	r21, Z+
    2c10:	ae f3       	brts	.-22     	; 0x2bfc <__fp_powser+0x16>
    2c12:	ef 01       	movw	r28, r30
    2c14:	29 de       	rcall	.-942    	; 0x2868 <__addsf3x>
    2c16:	fe 01       	movw	r30, r28
    2c18:	97 01       	movw	r18, r14
    2c1a:	a8 01       	movw	r20, r16
    2c1c:	da 94       	dec	r13
    2c1e:	79 f7       	brne	.-34     	; 0x2bfe <__fp_powser+0x18>
    2c20:	df 90       	pop	r13
    2c22:	ef 90       	pop	r14
    2c24:	ff 90       	pop	r15
    2c26:	0f 91       	pop	r16
    2c28:	1f 91       	pop	r17
    2c2a:	cf 91       	pop	r28
    2c2c:	df 91       	pop	r29
    2c2e:	08 95       	ret

00002c30 <__fp_pscA>:
    2c30:	00 24       	eor	r0, r0
    2c32:	0a 94       	dec	r0
    2c34:	16 16       	cp	r1, r22
    2c36:	17 06       	cpc	r1, r23
    2c38:	18 06       	cpc	r1, r24
    2c3a:	09 06       	cpc	r0, r25
    2c3c:	08 95       	ret

00002c3e <__fp_pscB>:
    2c3e:	00 24       	eor	r0, r0
    2c40:	0a 94       	dec	r0
    2c42:	12 16       	cp	r1, r18
    2c44:	13 06       	cpc	r1, r19
    2c46:	14 06       	cpc	r1, r20
    2c48:	05 06       	cpc	r0, r21
    2c4a:	08 95       	ret
    2c4c:	c9 cf       	rjmp	.-110    	; 0x2be0 <__fp_nan>

00002c4e <__fp_rempio2>:
    2c4e:	50 d0       	rcall	.+160    	; 0x2cf0 <__fp_splitA>
    2c50:	e8 f3       	brcs	.-6      	; 0x2c4c <__fp_pscB+0xe>
    2c52:	e8 94       	clt
    2c54:	e0 e0       	ldi	r30, 0x00	; 0
    2c56:	bb 27       	eor	r27, r27
    2c58:	9f 57       	subi	r25, 0x7F	; 127
    2c5a:	f0 f0       	brcs	.+60     	; 0x2c98 <__fp_rempio2+0x4a>
    2c5c:	2a ed       	ldi	r18, 0xDA	; 218
    2c5e:	3f e0       	ldi	r19, 0x0F	; 15
    2c60:	49 ec       	ldi	r20, 0xC9	; 201
    2c62:	06 c0       	rjmp	.+12     	; 0x2c70 <__fp_rempio2+0x22>
    2c64:	ee 0f       	add	r30, r30
    2c66:	bb 0f       	add	r27, r27
    2c68:	66 1f       	adc	r22, r22
    2c6a:	77 1f       	adc	r23, r23
    2c6c:	88 1f       	adc	r24, r24
    2c6e:	28 f0       	brcs	.+10     	; 0x2c7a <__fp_rempio2+0x2c>
    2c70:	b2 3a       	cpi	r27, 0xA2	; 162
    2c72:	62 07       	cpc	r22, r18
    2c74:	73 07       	cpc	r23, r19
    2c76:	84 07       	cpc	r24, r20
    2c78:	28 f0       	brcs	.+10     	; 0x2c84 <__fp_rempio2+0x36>
    2c7a:	b2 5a       	subi	r27, 0xA2	; 162
    2c7c:	62 0b       	sbc	r22, r18
    2c7e:	73 0b       	sbc	r23, r19
    2c80:	84 0b       	sbc	r24, r20
    2c82:	e3 95       	inc	r30
    2c84:	9a 95       	dec	r25
    2c86:	72 f7       	brpl	.-36     	; 0x2c64 <__fp_rempio2+0x16>
    2c88:	80 38       	cpi	r24, 0x80	; 128
    2c8a:	30 f4       	brcc	.+12     	; 0x2c98 <__fp_rempio2+0x4a>
    2c8c:	9a 95       	dec	r25
    2c8e:	bb 0f       	add	r27, r27
    2c90:	66 1f       	adc	r22, r22
    2c92:	77 1f       	adc	r23, r23
    2c94:	88 1f       	adc	r24, r24
    2c96:	d2 f7       	brpl	.-12     	; 0x2c8c <__fp_rempio2+0x3e>
    2c98:	90 48       	sbci	r25, 0x80	; 128
    2c9a:	e4 c0       	rjmp	.+456    	; 0x2e64 <__fp_mpack_finite>

00002c9c <__fp_round>:
    2c9c:	09 2e       	mov	r0, r25
    2c9e:	03 94       	inc	r0
    2ca0:	00 0c       	add	r0, r0
    2ca2:	11 f4       	brne	.+4      	; 0x2ca8 <__fp_round+0xc>
    2ca4:	88 23       	and	r24, r24
    2ca6:	52 f0       	brmi	.+20     	; 0x2cbc <__fp_round+0x20>
    2ca8:	bb 0f       	add	r27, r27
    2caa:	40 f4       	brcc	.+16     	; 0x2cbc <__fp_round+0x20>
    2cac:	bf 2b       	or	r27, r31
    2cae:	11 f4       	brne	.+4      	; 0x2cb4 <__fp_round+0x18>
    2cb0:	60 ff       	sbrs	r22, 0
    2cb2:	04 c0       	rjmp	.+8      	; 0x2cbc <__fp_round+0x20>
    2cb4:	6f 5f       	subi	r22, 0xFF	; 255
    2cb6:	7f 4f       	sbci	r23, 0xFF	; 255
    2cb8:	8f 4f       	sbci	r24, 0xFF	; 255
    2cba:	9f 4f       	sbci	r25, 0xFF	; 255
    2cbc:	08 95       	ret

00002cbe <__fp_sinus>:
    2cbe:	ef 93       	push	r30
    2cc0:	e0 ff       	sbrs	r30, 0
    2cc2:	06 c0       	rjmp	.+12     	; 0x2cd0 <__fp_sinus+0x12>
    2cc4:	a2 ea       	ldi	r26, 0xA2	; 162
    2cc6:	2a ed       	ldi	r18, 0xDA	; 218
    2cc8:	3f e0       	ldi	r19, 0x0F	; 15
    2cca:	49 ec       	ldi	r20, 0xC9	; 201
    2ccc:	5f eb       	ldi	r21, 0xBF	; 191
    2cce:	cc dd       	rcall	.-1128   	; 0x2868 <__addsf3x>
    2cd0:	e5 df       	rcall	.-54     	; 0x2c9c <__fp_round>
    2cd2:	0f 90       	pop	r0
    2cd4:	03 94       	inc	r0
    2cd6:	01 fc       	sbrc	r0, 1
    2cd8:	90 58       	subi	r25, 0x80	; 128
    2cda:	e5 ea       	ldi	r30, 0xA5	; 165
    2cdc:	f0 e0       	ldi	r31, 0x00	; 0
    2cde:	ce c0       	rjmp	.+412    	; 0x2e7c <__fp_powsodd>

00002ce0 <__fp_split3>:
    2ce0:	57 fd       	sbrc	r21, 7
    2ce2:	90 58       	subi	r25, 0x80	; 128
    2ce4:	44 0f       	add	r20, r20
    2ce6:	55 1f       	adc	r21, r21
    2ce8:	59 f0       	breq	.+22     	; 0x2d00 <__fp_splitA+0x10>
    2cea:	5f 3f       	cpi	r21, 0xFF	; 255
    2cec:	71 f0       	breq	.+28     	; 0x2d0a <__fp_splitA+0x1a>
    2cee:	47 95       	ror	r20

00002cf0 <__fp_splitA>:
    2cf0:	88 0f       	add	r24, r24
    2cf2:	97 fb       	bst	r25, 7
    2cf4:	99 1f       	adc	r25, r25
    2cf6:	61 f0       	breq	.+24     	; 0x2d10 <__fp_splitA+0x20>
    2cf8:	9f 3f       	cpi	r25, 0xFF	; 255
    2cfa:	79 f0       	breq	.+30     	; 0x2d1a <__fp_splitA+0x2a>
    2cfc:	87 95       	ror	r24
    2cfe:	08 95       	ret
    2d00:	12 16       	cp	r1, r18
    2d02:	13 06       	cpc	r1, r19
    2d04:	14 06       	cpc	r1, r20
    2d06:	55 1f       	adc	r21, r21
    2d08:	f2 cf       	rjmp	.-28     	; 0x2cee <__fp_split3+0xe>
    2d0a:	46 95       	lsr	r20
    2d0c:	f1 df       	rcall	.-30     	; 0x2cf0 <__fp_splitA>
    2d0e:	08 c0       	rjmp	.+16     	; 0x2d20 <__fp_splitA+0x30>
    2d10:	16 16       	cp	r1, r22
    2d12:	17 06       	cpc	r1, r23
    2d14:	18 06       	cpc	r1, r24
    2d16:	99 1f       	adc	r25, r25
    2d18:	f1 cf       	rjmp	.-30     	; 0x2cfc <__fp_splitA+0xc>
    2d1a:	86 95       	lsr	r24
    2d1c:	71 05       	cpc	r23, r1
    2d1e:	61 05       	cpc	r22, r1
    2d20:	08 94       	sec
    2d22:	08 95       	ret

00002d24 <__fp_zero>:
    2d24:	e8 94       	clt

00002d26 <__fp_szero>:
    2d26:	bb 27       	eor	r27, r27
    2d28:	66 27       	eor	r22, r22
    2d2a:	77 27       	eor	r23, r23
    2d2c:	cb 01       	movw	r24, r22
    2d2e:	97 f9       	bld	r25, 7
    2d30:	08 95       	ret

00002d32 <__gesf2>:
    2d32:	2c df       	rcall	.-424    	; 0x2b8c <__fp_cmp>
    2d34:	08 f4       	brcc	.+2      	; 0x2d38 <__gesf2+0x6>
    2d36:	8f ef       	ldi	r24, 0xFF	; 255
    2d38:	08 95       	ret

00002d3a <inverse>:
    2d3a:	9b 01       	movw	r18, r22
    2d3c:	ac 01       	movw	r20, r24
    2d3e:	60 e0       	ldi	r22, 0x00	; 0
    2d40:	70 e0       	ldi	r23, 0x00	; 0
    2d42:	80 e8       	ldi	r24, 0x80	; 128
    2d44:	9f e3       	ldi	r25, 0x3F	; 63
    2d46:	4c ce       	rjmp	.-872    	; 0x29e0 <__divsf3>

00002d48 <__mulsf3>:
    2d48:	0b d0       	rcall	.+22     	; 0x2d60 <__mulsf3x>
    2d4a:	a8 cf       	rjmp	.-176    	; 0x2c9c <__fp_round>
    2d4c:	71 df       	rcall	.-286    	; 0x2c30 <__fp_pscA>
    2d4e:	28 f0       	brcs	.+10     	; 0x2d5a <__mulsf3+0x12>
    2d50:	76 df       	rcall	.-276    	; 0x2c3e <__fp_pscB>
    2d52:	18 f0       	brcs	.+6      	; 0x2d5a <__mulsf3+0x12>
    2d54:	95 23       	and	r25, r21
    2d56:	09 f0       	breq	.+2      	; 0x2d5a <__mulsf3+0x12>
    2d58:	3d cf       	rjmp	.-390    	; 0x2bd4 <__fp_inf>
    2d5a:	42 cf       	rjmp	.-380    	; 0x2be0 <__fp_nan>
    2d5c:	11 24       	eor	r1, r1
    2d5e:	e3 cf       	rjmp	.-58     	; 0x2d26 <__fp_szero>

00002d60 <__mulsf3x>:
    2d60:	bf df       	rcall	.-130    	; 0x2ce0 <__fp_split3>
    2d62:	a0 f3       	brcs	.-24     	; 0x2d4c <__mulsf3+0x4>

00002d64 <__mulsf3_pse>:
    2d64:	95 9f       	mul	r25, r21
    2d66:	d1 f3       	breq	.-12     	; 0x2d5c <__mulsf3+0x14>
    2d68:	95 0f       	add	r25, r21
    2d6a:	50 e0       	ldi	r21, 0x00	; 0
    2d6c:	55 1f       	adc	r21, r21
    2d6e:	62 9f       	mul	r22, r18
    2d70:	f0 01       	movw	r30, r0
    2d72:	72 9f       	mul	r23, r18
    2d74:	bb 27       	eor	r27, r27
    2d76:	f0 0d       	add	r31, r0
    2d78:	b1 1d       	adc	r27, r1
    2d7a:	63 9f       	mul	r22, r19
    2d7c:	aa 27       	eor	r26, r26
    2d7e:	f0 0d       	add	r31, r0
    2d80:	b1 1d       	adc	r27, r1
    2d82:	aa 1f       	adc	r26, r26
    2d84:	64 9f       	mul	r22, r20
    2d86:	66 27       	eor	r22, r22
    2d88:	b0 0d       	add	r27, r0
    2d8a:	a1 1d       	adc	r26, r1
    2d8c:	66 1f       	adc	r22, r22
    2d8e:	82 9f       	mul	r24, r18
    2d90:	22 27       	eor	r18, r18
    2d92:	b0 0d       	add	r27, r0
    2d94:	a1 1d       	adc	r26, r1
    2d96:	62 1f       	adc	r22, r18
    2d98:	73 9f       	mul	r23, r19
    2d9a:	b0 0d       	add	r27, r0
    2d9c:	a1 1d       	adc	r26, r1
    2d9e:	62 1f       	adc	r22, r18
    2da0:	83 9f       	mul	r24, r19
    2da2:	a0 0d       	add	r26, r0
    2da4:	61 1d       	adc	r22, r1
    2da6:	22 1f       	adc	r18, r18
    2da8:	74 9f       	mul	r23, r20
    2daa:	33 27       	eor	r19, r19
    2dac:	a0 0d       	add	r26, r0
    2dae:	61 1d       	adc	r22, r1
    2db0:	23 1f       	adc	r18, r19
    2db2:	84 9f       	mul	r24, r20
    2db4:	60 0d       	add	r22, r0
    2db6:	21 1d       	adc	r18, r1
    2db8:	82 2f       	mov	r24, r18
    2dba:	76 2f       	mov	r23, r22
    2dbc:	6a 2f       	mov	r22, r26
    2dbe:	11 24       	eor	r1, r1
    2dc0:	9f 57       	subi	r25, 0x7F	; 127
    2dc2:	50 40       	sbci	r21, 0x00	; 0
    2dc4:	8a f0       	brmi	.+34     	; 0x2de8 <__mulsf3_pse+0x84>
    2dc6:	e1 f0       	breq	.+56     	; 0x2e00 <__mulsf3_pse+0x9c>
    2dc8:	88 23       	and	r24, r24
    2dca:	4a f0       	brmi	.+18     	; 0x2dde <__mulsf3_pse+0x7a>
    2dcc:	ee 0f       	add	r30, r30
    2dce:	ff 1f       	adc	r31, r31
    2dd0:	bb 1f       	adc	r27, r27
    2dd2:	66 1f       	adc	r22, r22
    2dd4:	77 1f       	adc	r23, r23
    2dd6:	88 1f       	adc	r24, r24
    2dd8:	91 50       	subi	r25, 0x01	; 1
    2dda:	50 40       	sbci	r21, 0x00	; 0
    2ddc:	a9 f7       	brne	.-22     	; 0x2dc8 <__mulsf3_pse+0x64>
    2dde:	9e 3f       	cpi	r25, 0xFE	; 254
    2de0:	51 05       	cpc	r21, r1
    2de2:	70 f0       	brcs	.+28     	; 0x2e00 <__mulsf3_pse+0x9c>
    2de4:	f7 ce       	rjmp	.-530    	; 0x2bd4 <__fp_inf>
    2de6:	9f cf       	rjmp	.-194    	; 0x2d26 <__fp_szero>
    2de8:	5f 3f       	cpi	r21, 0xFF	; 255
    2dea:	ec f3       	brlt	.-6      	; 0x2de6 <__mulsf3_pse+0x82>
    2dec:	98 3e       	cpi	r25, 0xE8	; 232
    2dee:	dc f3       	brlt	.-10     	; 0x2de6 <__mulsf3_pse+0x82>
    2df0:	86 95       	lsr	r24
    2df2:	77 95       	ror	r23
    2df4:	67 95       	ror	r22
    2df6:	b7 95       	ror	r27
    2df8:	f7 95       	ror	r31
    2dfa:	e7 95       	ror	r30
    2dfc:	9f 5f       	subi	r25, 0xFF	; 255
    2dfe:	c1 f7       	brne	.-16     	; 0x2df0 <__mulsf3_pse+0x8c>
    2e00:	fe 2b       	or	r31, r30
    2e02:	88 0f       	add	r24, r24
    2e04:	91 1d       	adc	r25, r1
    2e06:	96 95       	lsr	r25
    2e08:	87 95       	ror	r24
    2e0a:	97 f9       	bld	r25, 7
    2e0c:	08 95       	ret

00002e0e <sin>:
    2e0e:	9f 93       	push	r25
    2e10:	1e df       	rcall	.-452    	; 0x2c4e <__fp_rempio2>
    2e12:	0f 90       	pop	r0
    2e14:	07 fc       	sbrc	r0, 7
    2e16:	ee 5f       	subi	r30, 0xFE	; 254
    2e18:	52 cf       	rjmp	.-348    	; 0x2cbe <__fp_sinus>

00002e1a <square>:
    2e1a:	9b 01       	movw	r18, r22
    2e1c:	ac 01       	movw	r20, r24
    2e1e:	94 cf       	rjmp	.-216    	; 0x2d48 <__mulsf3>

00002e20 <tan>:
    2e20:	df 93       	push	r29
    2e22:	d9 2f       	mov	r29, r25
    2e24:	14 df       	rcall	.-472    	; 0x2c4e <__fp_rempio2>
    2e26:	e6 95       	lsr	r30
    2e28:	d7 95       	ror	r29
    2e2a:	2a ed       	ldi	r18, 0xDA	; 218
    2e2c:	3f e0       	ldi	r19, 0x0F	; 15
    2e2e:	49 e4       	ldi	r20, 0x49	; 73
    2e30:	5f e3       	ldi	r21, 0x3F	; 63
    2e32:	b3 3a       	cpi	r27, 0xA3	; 163
    2e34:	62 07       	cpc	r22, r18
    2e36:	73 07       	cpc	r23, r19
    2e38:	84 07       	cpc	r24, r20
    2e3a:	95 07       	cpc	r25, r21
    2e3c:	d7 95       	ror	r29
    2e3e:	2a f0       	brmi	.+10     	; 0x2e4a <tan+0x2a>
    2e40:	a2 ea       	ldi	r26, 0xA2	; 162
    2e42:	49 ec       	ldi	r20, 0xC9	; 201
    2e44:	90 68       	ori	r25, 0x80	; 128
    2e46:	10 dd       	rcall	.-1504   	; 0x2868 <__addsf3x>
    2e48:	29 df       	rcall	.-430    	; 0x2c9c <__fp_round>
    2e4a:	e3 ec       	ldi	r30, 0xC3	; 195
    2e4c:	f0 e0       	ldi	r31, 0x00	; 0
    2e4e:	16 d0       	rcall	.+44     	; 0x2e7c <__fp_powsodd>
    2e50:	dd 0f       	add	r29, r29
    2e52:	0b f0       	brvs	.+2      	; 0x2e56 <tan+0x36>
    2e54:	72 df       	rcall	.-284    	; 0x2d3a <inverse>
    2e56:	dd 0f       	add	r29, r29
    2e58:	0b f4       	brvc	.+2      	; 0x2e5c <tan+0x3c>
    2e5a:	90 58       	subi	r25, 0x80	; 128
    2e5c:	df 91       	pop	r29
    2e5e:	08 95       	ret

00002e60 <__fp_mpack>:
    2e60:	9f 3f       	cpi	r25, 0xFF	; 255
    2e62:	31 f0       	breq	.+12     	; 0x2e70 <__fp_mpack_finite+0xc>

00002e64 <__fp_mpack_finite>:
    2e64:	91 50       	subi	r25, 0x01	; 1
    2e66:	20 f4       	brcc	.+8      	; 0x2e70 <__fp_mpack_finite+0xc>
    2e68:	87 95       	ror	r24
    2e6a:	77 95       	ror	r23
    2e6c:	67 95       	ror	r22
    2e6e:	b7 95       	ror	r27
    2e70:	88 0f       	add	r24, r24
    2e72:	91 1d       	adc	r25, r1
    2e74:	96 95       	lsr	r25
    2e76:	87 95       	ror	r24
    2e78:	97 f9       	bld	r25, 7
    2e7a:	08 95       	ret

00002e7c <__fp_powsodd>:
    2e7c:	9f 93       	push	r25
    2e7e:	8f 93       	push	r24
    2e80:	7f 93       	push	r23
    2e82:	6f 93       	push	r22
    2e84:	ff 93       	push	r31
    2e86:	ef 93       	push	r30
    2e88:	9b 01       	movw	r18, r22
    2e8a:	ac 01       	movw	r20, r24
    2e8c:	5d df       	rcall	.-326    	; 0x2d48 <__mulsf3>
    2e8e:	ef 91       	pop	r30
    2e90:	ff 91       	pop	r31
    2e92:	a9 de       	rcall	.-686    	; 0x2be6 <__fp_powser>
    2e94:	2f 91       	pop	r18
    2e96:	3f 91       	pop	r19
    2e98:	4f 91       	pop	r20
    2e9a:	5f 91       	pop	r21
    2e9c:	55 cf       	rjmp	.-342    	; 0x2d48 <__mulsf3>

00002e9e <vfprintf>:
    2e9e:	a3 e1       	ldi	r26, 0x13	; 19
    2ea0:	b0 e0       	ldi	r27, 0x00	; 0
    2ea2:	e5 e5       	ldi	r30, 0x55	; 85
    2ea4:	f7 e1       	ldi	r31, 0x17	; 23
    2ea6:	0c 94 d0 1a 	jmp	0x35a0	; 0x35a0 <__prologue_saves__>
    2eaa:	7c 01       	movw	r14, r24
    2eac:	1b 01       	movw	r2, r22
    2eae:	6a 01       	movw	r12, r20
    2eb0:	fc 01       	movw	r30, r24
    2eb2:	17 82       	std	Z+7, r1	; 0x07
    2eb4:	16 82       	std	Z+6, r1	; 0x06
    2eb6:	83 81       	ldd	r24, Z+3	; 0x03
    2eb8:	81 ff       	sbrs	r24, 1
    2eba:	66 c3       	rjmp	.+1740   	; 0x3588 <vfprintf+0x6ea>
    2ebc:	be 01       	movw	r22, r28
    2ebe:	6f 5f       	subi	r22, 0xFF	; 255
    2ec0:	7f 4f       	sbci	r23, 0xFF	; 255
    2ec2:	4b 01       	movw	r8, r22
    2ec4:	f7 01       	movw	r30, r14
    2ec6:	93 81       	ldd	r25, Z+3	; 0x03
    2ec8:	f1 01       	movw	r30, r2
    2eca:	93 fd       	sbrc	r25, 3
    2ecc:	85 91       	lpm	r24, Z+
    2ece:	93 ff       	sbrs	r25, 3
    2ed0:	81 91       	ld	r24, Z+
    2ed2:	1f 01       	movw	r2, r30
    2ed4:	88 23       	and	r24, r24
    2ed6:	09 f4       	brne	.+2      	; 0x2eda <vfprintf+0x3c>
    2ed8:	53 c3       	rjmp	.+1702   	; 0x3580 <vfprintf+0x6e2>
    2eda:	85 32       	cpi	r24, 0x25	; 37
    2edc:	39 f4       	brne	.+14     	; 0x2eec <vfprintf+0x4e>
    2ede:	93 fd       	sbrc	r25, 3
    2ee0:	85 91       	lpm	r24, Z+
    2ee2:	93 ff       	sbrs	r25, 3
    2ee4:	81 91       	ld	r24, Z+
    2ee6:	1f 01       	movw	r2, r30
    2ee8:	85 32       	cpi	r24, 0x25	; 37
    2eea:	39 f4       	brne	.+14     	; 0x2efa <vfprintf+0x5c>
    2eec:	b7 01       	movw	r22, r14
    2eee:	90 e0       	ldi	r25, 0x00	; 0
    2ef0:	0e 94 f5 1b 	call	0x37ea	; 0x37ea <fputc>
    2ef4:	56 01       	movw	r10, r12
    2ef6:	65 01       	movw	r12, r10
    2ef8:	e5 cf       	rjmp	.-54     	; 0x2ec4 <vfprintf+0x26>
    2efa:	10 e0       	ldi	r17, 0x00	; 0
    2efc:	51 2c       	mov	r5, r1
    2efe:	20 e0       	ldi	r18, 0x00	; 0
    2f00:	20 32       	cpi	r18, 0x20	; 32
    2f02:	a0 f4       	brcc	.+40     	; 0x2f2c <vfprintf+0x8e>
    2f04:	8b 32       	cpi	r24, 0x2B	; 43
    2f06:	69 f0       	breq	.+26     	; 0x2f22 <vfprintf+0x84>
    2f08:	30 f4       	brcc	.+12     	; 0x2f16 <vfprintf+0x78>
    2f0a:	80 32       	cpi	r24, 0x20	; 32
    2f0c:	59 f0       	breq	.+22     	; 0x2f24 <vfprintf+0x86>
    2f0e:	83 32       	cpi	r24, 0x23	; 35
    2f10:	69 f4       	brne	.+26     	; 0x2f2c <vfprintf+0x8e>
    2f12:	20 61       	ori	r18, 0x10	; 16
    2f14:	2c c0       	rjmp	.+88     	; 0x2f6e <vfprintf+0xd0>
    2f16:	8d 32       	cpi	r24, 0x2D	; 45
    2f18:	39 f0       	breq	.+14     	; 0x2f28 <vfprintf+0x8a>
    2f1a:	80 33       	cpi	r24, 0x30	; 48
    2f1c:	39 f4       	brne	.+14     	; 0x2f2c <vfprintf+0x8e>
    2f1e:	21 60       	ori	r18, 0x01	; 1
    2f20:	26 c0       	rjmp	.+76     	; 0x2f6e <vfprintf+0xd0>
    2f22:	22 60       	ori	r18, 0x02	; 2
    2f24:	24 60       	ori	r18, 0x04	; 4
    2f26:	23 c0       	rjmp	.+70     	; 0x2f6e <vfprintf+0xd0>
    2f28:	28 60       	ori	r18, 0x08	; 8
    2f2a:	21 c0       	rjmp	.+66     	; 0x2f6e <vfprintf+0xd0>
    2f2c:	27 fd       	sbrc	r18, 7
    2f2e:	27 c0       	rjmp	.+78     	; 0x2f7e <vfprintf+0xe0>
    2f30:	30 ed       	ldi	r19, 0xD0	; 208
    2f32:	38 0f       	add	r19, r24
    2f34:	3a 30       	cpi	r19, 0x0A	; 10
    2f36:	78 f4       	brcc	.+30     	; 0x2f56 <vfprintf+0xb8>
    2f38:	26 ff       	sbrs	r18, 6
    2f3a:	06 c0       	rjmp	.+12     	; 0x2f48 <vfprintf+0xaa>
    2f3c:	fa e0       	ldi	r31, 0x0A	; 10
    2f3e:	1f 9f       	mul	r17, r31
    2f40:	30 0d       	add	r19, r0
    2f42:	11 24       	eor	r1, r1
    2f44:	13 2f       	mov	r17, r19
    2f46:	13 c0       	rjmp	.+38     	; 0x2f6e <vfprintf+0xd0>
    2f48:	6a e0       	ldi	r22, 0x0A	; 10
    2f4a:	56 9e       	mul	r5, r22
    2f4c:	30 0d       	add	r19, r0
    2f4e:	11 24       	eor	r1, r1
    2f50:	53 2e       	mov	r5, r19
    2f52:	20 62       	ori	r18, 0x20	; 32
    2f54:	0c c0       	rjmp	.+24     	; 0x2f6e <vfprintf+0xd0>
    2f56:	8e 32       	cpi	r24, 0x2E	; 46
    2f58:	21 f4       	brne	.+8      	; 0x2f62 <vfprintf+0xc4>
    2f5a:	26 fd       	sbrc	r18, 6
    2f5c:	11 c3       	rjmp	.+1570   	; 0x3580 <vfprintf+0x6e2>
    2f5e:	20 64       	ori	r18, 0x40	; 64
    2f60:	06 c0       	rjmp	.+12     	; 0x2f6e <vfprintf+0xd0>
    2f62:	8c 36       	cpi	r24, 0x6C	; 108
    2f64:	11 f4       	brne	.+4      	; 0x2f6a <vfprintf+0xcc>
    2f66:	20 68       	ori	r18, 0x80	; 128
    2f68:	02 c0       	rjmp	.+4      	; 0x2f6e <vfprintf+0xd0>
    2f6a:	88 36       	cpi	r24, 0x68	; 104
    2f6c:	41 f4       	brne	.+16     	; 0x2f7e <vfprintf+0xe0>
    2f6e:	f1 01       	movw	r30, r2
    2f70:	93 fd       	sbrc	r25, 3
    2f72:	85 91       	lpm	r24, Z+
    2f74:	93 ff       	sbrs	r25, 3
    2f76:	81 91       	ld	r24, Z+
    2f78:	1f 01       	movw	r2, r30
    2f7a:	81 11       	cpse	r24, r1
    2f7c:	c1 cf       	rjmp	.-126    	; 0x2f00 <vfprintf+0x62>
    2f7e:	9b eb       	ldi	r25, 0xBB	; 187
    2f80:	98 0f       	add	r25, r24
    2f82:	93 30       	cpi	r25, 0x03	; 3
    2f84:	18 f4       	brcc	.+6      	; 0x2f8c <vfprintf+0xee>
    2f86:	20 61       	ori	r18, 0x10	; 16
    2f88:	80 5e       	subi	r24, 0xE0	; 224
    2f8a:	06 c0       	rjmp	.+12     	; 0x2f98 <vfprintf+0xfa>
    2f8c:	9b e9       	ldi	r25, 0x9B	; 155
    2f8e:	98 0f       	add	r25, r24
    2f90:	93 30       	cpi	r25, 0x03	; 3
    2f92:	08 f0       	brcs	.+2      	; 0x2f96 <vfprintf+0xf8>
    2f94:	aa c1       	rjmp	.+852    	; 0x32ea <vfprintf+0x44c>
    2f96:	2f 7e       	andi	r18, 0xEF	; 239
    2f98:	26 ff       	sbrs	r18, 6
    2f9a:	16 e0       	ldi	r17, 0x06	; 6
    2f9c:	2f 73       	andi	r18, 0x3F	; 63
    2f9e:	72 2e       	mov	r7, r18
    2fa0:	85 36       	cpi	r24, 0x65	; 101
    2fa2:	21 f4       	brne	.+8      	; 0x2fac <vfprintf+0x10e>
    2fa4:	f2 2f       	mov	r31, r18
    2fa6:	f0 64       	ori	r31, 0x40	; 64
    2fa8:	7f 2e       	mov	r7, r31
    2faa:	08 c0       	rjmp	.+16     	; 0x2fbc <vfprintf+0x11e>
    2fac:	86 36       	cpi	r24, 0x66	; 102
    2fae:	21 f4       	brne	.+8      	; 0x2fb8 <vfprintf+0x11a>
    2fb0:	62 2f       	mov	r22, r18
    2fb2:	60 68       	ori	r22, 0x80	; 128
    2fb4:	76 2e       	mov	r7, r22
    2fb6:	02 c0       	rjmp	.+4      	; 0x2fbc <vfprintf+0x11e>
    2fb8:	11 11       	cpse	r17, r1
    2fba:	11 50       	subi	r17, 0x01	; 1
    2fbc:	77 fe       	sbrs	r7, 7
    2fbe:	07 c0       	rjmp	.+14     	; 0x2fce <vfprintf+0x130>
    2fc0:	1c 33       	cpi	r17, 0x3C	; 60
    2fc2:	48 f4       	brcc	.+18     	; 0x2fd6 <vfprintf+0x138>
    2fc4:	44 24       	eor	r4, r4
    2fc6:	43 94       	inc	r4
    2fc8:	41 0e       	add	r4, r17
    2fca:	27 e0       	ldi	r18, 0x07	; 7
    2fcc:	0b c0       	rjmp	.+22     	; 0x2fe4 <vfprintf+0x146>
    2fce:	18 30       	cpi	r17, 0x08	; 8
    2fd0:	30 f4       	brcc	.+12     	; 0x2fde <vfprintf+0x140>
    2fd2:	21 2f       	mov	r18, r17
    2fd4:	06 c0       	rjmp	.+12     	; 0x2fe2 <vfprintf+0x144>
    2fd6:	27 e0       	ldi	r18, 0x07	; 7
    2fd8:	4c e3       	ldi	r20, 0x3C	; 60
    2fda:	44 2e       	mov	r4, r20
    2fdc:	03 c0       	rjmp	.+6      	; 0x2fe4 <vfprintf+0x146>
    2fde:	27 e0       	ldi	r18, 0x07	; 7
    2fe0:	17 e0       	ldi	r17, 0x07	; 7
    2fe2:	41 2c       	mov	r4, r1
    2fe4:	56 01       	movw	r10, r12
    2fe6:	74 e0       	ldi	r23, 0x04	; 4
    2fe8:	a7 0e       	add	r10, r23
    2fea:	b1 1c       	adc	r11, r1
    2fec:	f6 01       	movw	r30, r12
    2fee:	60 81       	ld	r22, Z
    2ff0:	71 81       	ldd	r23, Z+1	; 0x01
    2ff2:	82 81       	ldd	r24, Z+2	; 0x02
    2ff4:	93 81       	ldd	r25, Z+3	; 0x03
    2ff6:	04 2d       	mov	r16, r4
    2ff8:	a4 01       	movw	r20, r8
    2ffa:	0e 94 07 1b 	call	0x360e	; 0x360e <__ftoa_engine>
    2ffe:	6c 01       	movw	r12, r24
    3000:	09 81       	ldd	r16, Y+1	; 0x01
    3002:	00 ff       	sbrs	r16, 0
    3004:	02 c0       	rjmp	.+4      	; 0x300a <vfprintf+0x16c>
    3006:	03 ff       	sbrs	r16, 3
    3008:	06 c0       	rjmp	.+12     	; 0x3016 <vfprintf+0x178>
    300a:	71 fc       	sbrc	r7, 1
    300c:	07 c0       	rjmp	.+14     	; 0x301c <vfprintf+0x17e>
    300e:	72 fc       	sbrc	r7, 2
    3010:	08 c0       	rjmp	.+16     	; 0x3022 <vfprintf+0x184>
    3012:	61 2c       	mov	r6, r1
    3014:	08 c0       	rjmp	.+16     	; 0x3026 <vfprintf+0x188>
    3016:	3d e2       	ldi	r19, 0x2D	; 45
    3018:	63 2e       	mov	r6, r19
    301a:	05 c0       	rjmp	.+10     	; 0x3026 <vfprintf+0x188>
    301c:	2b e2       	ldi	r18, 0x2B	; 43
    301e:	62 2e       	mov	r6, r18
    3020:	02 c0       	rjmp	.+4      	; 0x3026 <vfprintf+0x188>
    3022:	90 e2       	ldi	r25, 0x20	; 32
    3024:	69 2e       	mov	r6, r25
    3026:	80 2f       	mov	r24, r16
    3028:	8c 70       	andi	r24, 0x0C	; 12
    302a:	99 f1       	breq	.+102    	; 0x3092 <vfprintf+0x1f4>
    302c:	66 20       	and	r6, r6
    302e:	11 f0       	breq	.+4      	; 0x3034 <vfprintf+0x196>
    3030:	84 e0       	ldi	r24, 0x04	; 4
    3032:	01 c0       	rjmp	.+2      	; 0x3036 <vfprintf+0x198>
    3034:	83 e0       	ldi	r24, 0x03	; 3
    3036:	85 15       	cp	r24, r5
    3038:	10 f0       	brcs	.+4      	; 0x303e <vfprintf+0x1a0>
    303a:	51 2c       	mov	r5, r1
    303c:	0b c0       	rjmp	.+22     	; 0x3054 <vfprintf+0x1b6>
    303e:	58 1a       	sub	r5, r24
    3040:	73 fc       	sbrc	r7, 3
    3042:	08 c0       	rjmp	.+16     	; 0x3054 <vfprintf+0x1b6>
    3044:	b7 01       	movw	r22, r14
    3046:	80 e2       	ldi	r24, 0x20	; 32
    3048:	90 e0       	ldi	r25, 0x00	; 0
    304a:	0e 94 f5 1b 	call	0x37ea	; 0x37ea <fputc>
    304e:	5a 94       	dec	r5
    3050:	c9 f7       	brne	.-14     	; 0x3044 <vfprintf+0x1a6>
    3052:	f3 cf       	rjmp	.-26     	; 0x303a <vfprintf+0x19c>
    3054:	66 20       	and	r6, r6
    3056:	29 f0       	breq	.+10     	; 0x3062 <vfprintf+0x1c4>
    3058:	b7 01       	movw	r22, r14
    305a:	86 2d       	mov	r24, r6
    305c:	90 e0       	ldi	r25, 0x00	; 0
    305e:	0e 94 f5 1b 	call	0x37ea	; 0x37ea <fputc>
    3062:	03 fd       	sbrc	r16, 3
    3064:	03 c0       	rjmp	.+6      	; 0x306c <vfprintf+0x1ce>
    3066:	00 e0       	ldi	r16, 0x00	; 0
    3068:	14 e0       	ldi	r17, 0x04	; 4
    306a:	02 c0       	rjmp	.+4      	; 0x3070 <vfprintf+0x1d2>
    306c:	0c ef       	ldi	r16, 0xFC	; 252
    306e:	13 e0       	ldi	r17, 0x03	; 3
    3070:	f7 2d       	mov	r31, r7
    3072:	f0 71       	andi	r31, 0x10	; 16
    3074:	7f 2e       	mov	r7, r31
    3076:	f8 01       	movw	r30, r16
    3078:	84 91       	lpm	r24, Z
    307a:	88 23       	and	r24, r24
    307c:	09 f4       	brne	.+2      	; 0x3080 <vfprintf+0x1e2>
    307e:	76 c2       	rjmp	.+1260   	; 0x356c <vfprintf+0x6ce>
    3080:	71 10       	cpse	r7, r1
    3082:	80 52       	subi	r24, 0x20	; 32
    3084:	b7 01       	movw	r22, r14
    3086:	90 e0       	ldi	r25, 0x00	; 0
    3088:	0e 94 f5 1b 	call	0x37ea	; 0x37ea <fputc>
    308c:	0f 5f       	subi	r16, 0xFF	; 255
    308e:	1f 4f       	sbci	r17, 0xFF	; 255
    3090:	f2 cf       	rjmp	.-28     	; 0x3076 <vfprintf+0x1d8>
    3092:	77 fe       	sbrs	r7, 7
    3094:	0f c0       	rjmp	.+30     	; 0x30b4 <vfprintf+0x216>
    3096:	4c 0c       	add	r4, r12
    3098:	04 ff       	sbrs	r16, 4
    309a:	04 c0       	rjmp	.+8      	; 0x30a4 <vfprintf+0x206>
    309c:	8a 81       	ldd	r24, Y+2	; 0x02
    309e:	81 33       	cpi	r24, 0x31	; 49
    30a0:	09 f4       	brne	.+2      	; 0x30a4 <vfprintf+0x206>
    30a2:	4a 94       	dec	r4
    30a4:	14 14       	cp	r1, r4
    30a6:	74 f5       	brge	.+92     	; 0x3104 <vfprintf+0x266>
    30a8:	f8 e0       	ldi	r31, 0x08	; 8
    30aa:	f4 15       	cp	r31, r4
    30ac:	78 f5       	brcc	.+94     	; 0x310c <vfprintf+0x26e>
    30ae:	88 e0       	ldi	r24, 0x08	; 8
    30b0:	48 2e       	mov	r4, r24
    30b2:	2c c0       	rjmp	.+88     	; 0x310c <vfprintf+0x26e>
    30b4:	76 fc       	sbrc	r7, 6
    30b6:	2a c0       	rjmp	.+84     	; 0x310c <vfprintf+0x26e>
    30b8:	81 2f       	mov	r24, r17
    30ba:	90 e0       	ldi	r25, 0x00	; 0
    30bc:	8c 15       	cp	r24, r12
    30be:	9d 05       	cpc	r25, r13
    30c0:	9c f0       	brlt	.+38     	; 0x30e8 <vfprintf+0x24a>
    30c2:	6c ef       	ldi	r22, 0xFC	; 252
    30c4:	c6 16       	cp	r12, r22
    30c6:	6f ef       	ldi	r22, 0xFF	; 255
    30c8:	d6 06       	cpc	r13, r22
    30ca:	74 f0       	brlt	.+28     	; 0x30e8 <vfprintf+0x24a>
    30cc:	77 2d       	mov	r23, r7
    30ce:	70 68       	ori	r23, 0x80	; 128
    30d0:	77 2e       	mov	r7, r23
    30d2:	0a c0       	rjmp	.+20     	; 0x30e8 <vfprintf+0x24a>
    30d4:	e2 e0       	ldi	r30, 0x02	; 2
    30d6:	f0 e0       	ldi	r31, 0x00	; 0
    30d8:	ec 0f       	add	r30, r28
    30da:	fd 1f       	adc	r31, r29
    30dc:	e1 0f       	add	r30, r17
    30de:	f1 1d       	adc	r31, r1
    30e0:	80 81       	ld	r24, Z
    30e2:	80 33       	cpi	r24, 0x30	; 48
    30e4:	19 f4       	brne	.+6      	; 0x30ec <vfprintf+0x24e>
    30e6:	11 50       	subi	r17, 0x01	; 1
    30e8:	11 11       	cpse	r17, r1
    30ea:	f4 cf       	rjmp	.-24     	; 0x30d4 <vfprintf+0x236>
    30ec:	77 fe       	sbrs	r7, 7
    30ee:	0e c0       	rjmp	.+28     	; 0x310c <vfprintf+0x26e>
    30f0:	44 24       	eor	r4, r4
    30f2:	43 94       	inc	r4
    30f4:	41 0e       	add	r4, r17
    30f6:	81 2f       	mov	r24, r17
    30f8:	90 e0       	ldi	r25, 0x00	; 0
    30fa:	c8 16       	cp	r12, r24
    30fc:	d9 06       	cpc	r13, r25
    30fe:	2c f4       	brge	.+10     	; 0x310a <vfprintf+0x26c>
    3100:	1c 19       	sub	r17, r12
    3102:	04 c0       	rjmp	.+8      	; 0x310c <vfprintf+0x26e>
    3104:	44 24       	eor	r4, r4
    3106:	43 94       	inc	r4
    3108:	01 c0       	rjmp	.+2      	; 0x310c <vfprintf+0x26e>
    310a:	10 e0       	ldi	r17, 0x00	; 0
    310c:	77 fe       	sbrs	r7, 7
    310e:	07 c0       	rjmp	.+14     	; 0x311e <vfprintf+0x280>
    3110:	1c 14       	cp	r1, r12
    3112:	1d 04       	cpc	r1, r13
    3114:	3c f4       	brge	.+14     	; 0x3124 <vfprintf+0x286>
    3116:	96 01       	movw	r18, r12
    3118:	2f 5f       	subi	r18, 0xFF	; 255
    311a:	3f 4f       	sbci	r19, 0xFF	; 255
    311c:	05 c0       	rjmp	.+10     	; 0x3128 <vfprintf+0x28a>
    311e:	25 e0       	ldi	r18, 0x05	; 5
    3120:	30 e0       	ldi	r19, 0x00	; 0
    3122:	02 c0       	rjmp	.+4      	; 0x3128 <vfprintf+0x28a>
    3124:	21 e0       	ldi	r18, 0x01	; 1
    3126:	30 e0       	ldi	r19, 0x00	; 0
    3128:	66 20       	and	r6, r6
    312a:	11 f0       	breq	.+4      	; 0x3130 <vfprintf+0x292>
    312c:	2f 5f       	subi	r18, 0xFF	; 255
    312e:	3f 4f       	sbci	r19, 0xFF	; 255
    3130:	11 23       	and	r17, r17
    3132:	31 f0       	breq	.+12     	; 0x3140 <vfprintf+0x2a2>
    3134:	41 2f       	mov	r20, r17
    3136:	50 e0       	ldi	r21, 0x00	; 0
    3138:	4f 5f       	subi	r20, 0xFF	; 255
    313a:	5f 4f       	sbci	r21, 0xFF	; 255
    313c:	24 0f       	add	r18, r20
    313e:	35 1f       	adc	r19, r21
    3140:	45 2d       	mov	r20, r5
    3142:	50 e0       	ldi	r21, 0x00	; 0
    3144:	24 17       	cp	r18, r20
    3146:	35 07       	cpc	r19, r21
    3148:	14 f4       	brge	.+4      	; 0x314e <vfprintf+0x2b0>
    314a:	52 1a       	sub	r5, r18
    314c:	01 c0       	rjmp	.+2      	; 0x3150 <vfprintf+0x2b2>
    314e:	51 2c       	mov	r5, r1
    3150:	87 2d       	mov	r24, r7
    3152:	89 70       	andi	r24, 0x09	; 9
    3154:	49 f4       	brne	.+18     	; 0x3168 <vfprintf+0x2ca>
    3156:	55 20       	and	r5, r5
    3158:	39 f0       	breq	.+14     	; 0x3168 <vfprintf+0x2ca>
    315a:	b7 01       	movw	r22, r14
    315c:	80 e2       	ldi	r24, 0x20	; 32
    315e:	90 e0       	ldi	r25, 0x00	; 0
    3160:	0e 94 f5 1b 	call	0x37ea	; 0x37ea <fputc>
    3164:	5a 94       	dec	r5
    3166:	f7 cf       	rjmp	.-18     	; 0x3156 <vfprintf+0x2b8>
    3168:	66 20       	and	r6, r6
    316a:	29 f0       	breq	.+10     	; 0x3176 <vfprintf+0x2d8>
    316c:	b7 01       	movw	r22, r14
    316e:	86 2d       	mov	r24, r6
    3170:	90 e0       	ldi	r25, 0x00	; 0
    3172:	0e 94 f5 1b 	call	0x37ea	; 0x37ea <fputc>
    3176:	73 fc       	sbrc	r7, 3
    3178:	09 c0       	rjmp	.+18     	; 0x318c <vfprintf+0x2ee>
    317a:	55 20       	and	r5, r5
    317c:	39 f0       	breq	.+14     	; 0x318c <vfprintf+0x2ee>
    317e:	b7 01       	movw	r22, r14
    3180:	80 e3       	ldi	r24, 0x30	; 48
    3182:	90 e0       	ldi	r25, 0x00	; 0
    3184:	0e 94 f5 1b 	call	0x37ea	; 0x37ea <fputc>
    3188:	5a 94       	dec	r5
    318a:	f7 cf       	rjmp	.-18     	; 0x317a <vfprintf+0x2dc>
    318c:	77 fe       	sbrs	r7, 7
    318e:	5f c0       	rjmp	.+190    	; 0x324e <vfprintf+0x3b0>
    3190:	9c 2d       	mov	r25, r12
    3192:	8d 2d       	mov	r24, r13
    3194:	d7 fe       	sbrs	r13, 7
    3196:	02 c0       	rjmp	.+4      	; 0x319c <vfprintf+0x2fe>
    3198:	90 e0       	ldi	r25, 0x00	; 0
    319a:	80 e0       	ldi	r24, 0x00	; 0
    319c:	69 2e       	mov	r6, r25
    319e:	78 2e       	mov	r7, r24
    31a0:	40 e0       	ldi	r20, 0x00	; 0
    31a2:	50 e0       	ldi	r21, 0x00	; 0
    31a4:	c6 01       	movw	r24, r12
    31a6:	84 19       	sub	r24, r4
    31a8:	91 09       	sbc	r25, r1
    31aa:	9d 87       	std	Y+13, r25	; 0x0d
    31ac:	8c 87       	std	Y+12, r24	; 0x0c
    31ae:	96 01       	movw	r18, r12
    31b0:	26 19       	sub	r18, r6
    31b2:	37 09       	sbc	r19, r7
    31b4:	28 0d       	add	r18, r8
    31b6:	39 1d       	adc	r19, r9
    31b8:	81 2f       	mov	r24, r17
    31ba:	90 e0       	ldi	r25, 0x00	; 0
    31bc:	ee 27       	eor	r30, r30
    31be:	ff 27       	eor	r31, r31
    31c0:	e8 1b       	sub	r30, r24
    31c2:	f9 0b       	sbc	r31, r25
    31c4:	ff 87       	std	Y+15, r31	; 0x0f
    31c6:	ee 87       	std	Y+14, r30	; 0x0e
    31c8:	ff ef       	ldi	r31, 0xFF	; 255
    31ca:	6f 16       	cp	r6, r31
    31cc:	7f 06       	cpc	r7, r31
    31ce:	69 f4       	brne	.+26     	; 0x31ea <vfprintf+0x34c>
    31d0:	b7 01       	movw	r22, r14
    31d2:	8e e2       	ldi	r24, 0x2E	; 46
    31d4:	90 e0       	ldi	r25, 0x00	; 0
    31d6:	2b 8b       	std	Y+19, r18	; 0x13
    31d8:	3a 8b       	std	Y+18, r19	; 0x12
    31da:	48 8b       	std	Y+16, r20	; 0x10
    31dc:	59 8b       	std	Y+17, r21	; 0x11
    31de:	0e 94 f5 1b 	call	0x37ea	; 0x37ea <fputc>
    31e2:	59 89       	ldd	r21, Y+17	; 0x11
    31e4:	48 89       	ldd	r20, Y+16	; 0x10
    31e6:	3a 89       	ldd	r19, Y+18	; 0x12
    31e8:	2b 89       	ldd	r18, Y+19	; 0x13
    31ea:	c6 14       	cp	r12, r6
    31ec:	d7 04       	cpc	r13, r7
    31ee:	54 f0       	brlt	.+20     	; 0x3204 <vfprintf+0x366>
    31f0:	6c 85       	ldd	r22, Y+12	; 0x0c
    31f2:	7d 85       	ldd	r23, Y+13	; 0x0d
    31f4:	66 15       	cp	r22, r6
    31f6:	77 05       	cpc	r23, r7
    31f8:	2c f4       	brge	.+10     	; 0x3204 <vfprintf+0x366>
    31fa:	f9 01       	movw	r30, r18
    31fc:	e4 0f       	add	r30, r20
    31fe:	f5 1f       	adc	r31, r21
    3200:	81 81       	ldd	r24, Z+1	; 0x01
    3202:	01 c0       	rjmp	.+2      	; 0x3206 <vfprintf+0x368>
    3204:	80 e3       	ldi	r24, 0x30	; 48
    3206:	71 e0       	ldi	r23, 0x01	; 1
    3208:	67 1a       	sub	r6, r23
    320a:	71 08       	sbc	r7, r1
    320c:	4f 5f       	subi	r20, 0xFF	; 255
    320e:	5f 4f       	sbci	r21, 0xFF	; 255
    3210:	ee 85       	ldd	r30, Y+14	; 0x0e
    3212:	ff 85       	ldd	r31, Y+15	; 0x0f
    3214:	6e 16       	cp	r6, r30
    3216:	7f 06       	cpc	r7, r31
    3218:	6c f0       	brlt	.+26     	; 0x3234 <vfprintf+0x396>
    321a:	b7 01       	movw	r22, r14
    321c:	90 e0       	ldi	r25, 0x00	; 0
    321e:	2b 8b       	std	Y+19, r18	; 0x13
    3220:	3a 8b       	std	Y+18, r19	; 0x12
    3222:	48 8b       	std	Y+16, r20	; 0x10
    3224:	59 8b       	std	Y+17, r21	; 0x11
    3226:	0e 94 f5 1b 	call	0x37ea	; 0x37ea <fputc>
    322a:	2b 89       	ldd	r18, Y+19	; 0x13
    322c:	3a 89       	ldd	r19, Y+18	; 0x12
    322e:	48 89       	ldd	r20, Y+16	; 0x10
    3230:	59 89       	ldd	r21, Y+17	; 0x11
    3232:	ca cf       	rjmp	.-108    	; 0x31c8 <vfprintf+0x32a>
    3234:	6c 14       	cp	r6, r12
    3236:	7d 04       	cpc	r7, r13
    3238:	39 f4       	brne	.+14     	; 0x3248 <vfprintf+0x3aa>
    323a:	9a 81       	ldd	r25, Y+2	; 0x02
    323c:	96 33       	cpi	r25, 0x36	; 54
    323e:	18 f4       	brcc	.+6      	; 0x3246 <vfprintf+0x3a8>
    3240:	95 33       	cpi	r25, 0x35	; 53
    3242:	11 f4       	brne	.+4      	; 0x3248 <vfprintf+0x3aa>
    3244:	04 ff       	sbrs	r16, 4
    3246:	81 e3       	ldi	r24, 0x31	; 49
    3248:	b7 01       	movw	r22, r14
    324a:	90 e0       	ldi	r25, 0x00	; 0
    324c:	4b c0       	rjmp	.+150    	; 0x32e4 <vfprintf+0x446>
    324e:	8a 81       	ldd	r24, Y+2	; 0x02
    3250:	81 33       	cpi	r24, 0x31	; 49
    3252:	09 f0       	breq	.+2      	; 0x3256 <vfprintf+0x3b8>
    3254:	0f 7e       	andi	r16, 0xEF	; 239
    3256:	b7 01       	movw	r22, r14
    3258:	90 e0       	ldi	r25, 0x00	; 0
    325a:	0e 94 f5 1b 	call	0x37ea	; 0x37ea <fputc>
    325e:	11 11       	cpse	r17, r1
    3260:	05 c0       	rjmp	.+10     	; 0x326c <vfprintf+0x3ce>
    3262:	74 fe       	sbrs	r7, 4
    3264:	18 c0       	rjmp	.+48     	; 0x3296 <vfprintf+0x3f8>
    3266:	85 e4       	ldi	r24, 0x45	; 69
    3268:	90 e0       	ldi	r25, 0x00	; 0
    326a:	17 c0       	rjmp	.+46     	; 0x329a <vfprintf+0x3fc>
    326c:	b7 01       	movw	r22, r14
    326e:	8e e2       	ldi	r24, 0x2E	; 46
    3270:	90 e0       	ldi	r25, 0x00	; 0
    3272:	0e 94 f5 1b 	call	0x37ea	; 0x37ea <fputc>
    3276:	82 e0       	ldi	r24, 0x02	; 2
    3278:	66 24       	eor	r6, r6
    327a:	63 94       	inc	r6
    327c:	68 0e       	add	r6, r24
    327e:	f4 01       	movw	r30, r8
    3280:	e8 0f       	add	r30, r24
    3282:	f1 1d       	adc	r31, r1
    3284:	80 81       	ld	r24, Z
    3286:	b7 01       	movw	r22, r14
    3288:	90 e0       	ldi	r25, 0x00	; 0
    328a:	0e 94 f5 1b 	call	0x37ea	; 0x37ea <fputc>
    328e:	11 50       	subi	r17, 0x01	; 1
    3290:	41 f3       	breq	.-48     	; 0x3262 <vfprintf+0x3c4>
    3292:	86 2d       	mov	r24, r6
    3294:	f1 cf       	rjmp	.-30     	; 0x3278 <vfprintf+0x3da>
    3296:	85 e6       	ldi	r24, 0x65	; 101
    3298:	90 e0       	ldi	r25, 0x00	; 0
    329a:	b7 01       	movw	r22, r14
    329c:	0e 94 f5 1b 	call	0x37ea	; 0x37ea <fputc>
    32a0:	d7 fc       	sbrc	r13, 7
    32a2:	05 c0       	rjmp	.+10     	; 0x32ae <vfprintf+0x410>
    32a4:	c1 14       	cp	r12, r1
    32a6:	d1 04       	cpc	r13, r1
    32a8:	39 f4       	brne	.+14     	; 0x32b8 <vfprintf+0x41a>
    32aa:	04 ff       	sbrs	r16, 4
    32ac:	05 c0       	rjmp	.+10     	; 0x32b8 <vfprintf+0x41a>
    32ae:	d1 94       	neg	r13
    32b0:	c1 94       	neg	r12
    32b2:	d1 08       	sbc	r13, r1
    32b4:	8d e2       	ldi	r24, 0x2D	; 45
    32b6:	01 c0       	rjmp	.+2      	; 0x32ba <vfprintf+0x41c>
    32b8:	8b e2       	ldi	r24, 0x2B	; 43
    32ba:	b7 01       	movw	r22, r14
    32bc:	90 e0       	ldi	r25, 0x00	; 0
    32be:	0e 94 f5 1b 	call	0x37ea	; 0x37ea <fputc>
    32c2:	80 e3       	ldi	r24, 0x30	; 48
    32c4:	6a e0       	ldi	r22, 0x0A	; 10
    32c6:	c6 16       	cp	r12, r22
    32c8:	d1 04       	cpc	r13, r1
    32ca:	2c f0       	brlt	.+10     	; 0x32d6 <vfprintf+0x438>
    32cc:	8f 5f       	subi	r24, 0xFF	; 255
    32ce:	fa e0       	ldi	r31, 0x0A	; 10
    32d0:	cf 1a       	sub	r12, r31
    32d2:	d1 08       	sbc	r13, r1
    32d4:	f7 cf       	rjmp	.-18     	; 0x32c4 <vfprintf+0x426>
    32d6:	b7 01       	movw	r22, r14
    32d8:	90 e0       	ldi	r25, 0x00	; 0
    32da:	0e 94 f5 1b 	call	0x37ea	; 0x37ea <fputc>
    32de:	b7 01       	movw	r22, r14
    32e0:	c6 01       	movw	r24, r12
    32e2:	c0 96       	adiw	r24, 0x30	; 48
    32e4:	0e 94 f5 1b 	call	0x37ea	; 0x37ea <fputc>
    32e8:	41 c1       	rjmp	.+642    	; 0x356c <vfprintf+0x6ce>
    32ea:	83 36       	cpi	r24, 0x63	; 99
    32ec:	31 f0       	breq	.+12     	; 0x32fa <vfprintf+0x45c>
    32ee:	83 37       	cpi	r24, 0x73	; 115
    32f0:	79 f0       	breq	.+30     	; 0x3310 <vfprintf+0x472>
    32f2:	83 35       	cpi	r24, 0x53	; 83
    32f4:	09 f0       	breq	.+2      	; 0x32f8 <vfprintf+0x45a>
    32f6:	58 c0       	rjmp	.+176    	; 0x33a8 <vfprintf+0x50a>
    32f8:	21 c0       	rjmp	.+66     	; 0x333c <vfprintf+0x49e>
    32fa:	56 01       	movw	r10, r12
    32fc:	72 e0       	ldi	r23, 0x02	; 2
    32fe:	a7 0e       	add	r10, r23
    3300:	b1 1c       	adc	r11, r1
    3302:	f6 01       	movw	r30, r12
    3304:	80 81       	ld	r24, Z
    3306:	89 83       	std	Y+1, r24	; 0x01
    3308:	01 e0       	ldi	r16, 0x01	; 1
    330a:	10 e0       	ldi	r17, 0x00	; 0
    330c:	64 01       	movw	r12, r8
    330e:	14 c0       	rjmp	.+40     	; 0x3338 <vfprintf+0x49a>
    3310:	56 01       	movw	r10, r12
    3312:	f2 e0       	ldi	r31, 0x02	; 2
    3314:	af 0e       	add	r10, r31
    3316:	b1 1c       	adc	r11, r1
    3318:	f6 01       	movw	r30, r12
    331a:	c0 80       	ld	r12, Z
    331c:	d1 80       	ldd	r13, Z+1	; 0x01
    331e:	26 ff       	sbrs	r18, 6
    3320:	03 c0       	rjmp	.+6      	; 0x3328 <vfprintf+0x48a>
    3322:	61 2f       	mov	r22, r17
    3324:	70 e0       	ldi	r23, 0x00	; 0
    3326:	02 c0       	rjmp	.+4      	; 0x332c <vfprintf+0x48e>
    3328:	6f ef       	ldi	r22, 0xFF	; 255
    332a:	7f ef       	ldi	r23, 0xFF	; 255
    332c:	c6 01       	movw	r24, r12
    332e:	2b 8b       	std	Y+19, r18	; 0x13
    3330:	0e 94 ea 1b 	call	0x37d4	; 0x37d4 <strnlen>
    3334:	8c 01       	movw	r16, r24
    3336:	2b 89       	ldd	r18, Y+19	; 0x13
    3338:	2f 77       	andi	r18, 0x7F	; 127
    333a:	15 c0       	rjmp	.+42     	; 0x3366 <vfprintf+0x4c8>
    333c:	56 01       	movw	r10, r12
    333e:	f2 e0       	ldi	r31, 0x02	; 2
    3340:	af 0e       	add	r10, r31
    3342:	b1 1c       	adc	r11, r1
    3344:	f6 01       	movw	r30, r12
    3346:	c0 80       	ld	r12, Z
    3348:	d1 80       	ldd	r13, Z+1	; 0x01
    334a:	26 ff       	sbrs	r18, 6
    334c:	03 c0       	rjmp	.+6      	; 0x3354 <vfprintf+0x4b6>
    334e:	61 2f       	mov	r22, r17
    3350:	70 e0       	ldi	r23, 0x00	; 0
    3352:	02 c0       	rjmp	.+4      	; 0x3358 <vfprintf+0x4ba>
    3354:	6f ef       	ldi	r22, 0xFF	; 255
    3356:	7f ef       	ldi	r23, 0xFF	; 255
    3358:	c6 01       	movw	r24, r12
    335a:	2b 8b       	std	Y+19, r18	; 0x13
    335c:	0e 94 df 1b 	call	0x37be	; 0x37be <strnlen_P>
    3360:	8c 01       	movw	r16, r24
    3362:	2b 89       	ldd	r18, Y+19	; 0x13
    3364:	20 68       	ori	r18, 0x80	; 128
    3366:	72 2e       	mov	r7, r18
    3368:	23 fd       	sbrc	r18, 3
    336a:	1a c0       	rjmp	.+52     	; 0x33a0 <vfprintf+0x502>
    336c:	85 2d       	mov	r24, r5
    336e:	90 e0       	ldi	r25, 0x00	; 0
    3370:	08 17       	cp	r16, r24
    3372:	19 07       	cpc	r17, r25
    3374:	a8 f4       	brcc	.+42     	; 0x33a0 <vfprintf+0x502>
    3376:	b7 01       	movw	r22, r14
    3378:	80 e2       	ldi	r24, 0x20	; 32
    337a:	90 e0       	ldi	r25, 0x00	; 0
    337c:	0e 94 f5 1b 	call	0x37ea	; 0x37ea <fputc>
    3380:	5a 94       	dec	r5
    3382:	f4 cf       	rjmp	.-24     	; 0x336c <vfprintf+0x4ce>
    3384:	f6 01       	movw	r30, r12
    3386:	77 fc       	sbrc	r7, 7
    3388:	85 91       	lpm	r24, Z+
    338a:	77 fe       	sbrs	r7, 7
    338c:	81 91       	ld	r24, Z+
    338e:	6f 01       	movw	r12, r30
    3390:	b7 01       	movw	r22, r14
    3392:	90 e0       	ldi	r25, 0x00	; 0
    3394:	0e 94 f5 1b 	call	0x37ea	; 0x37ea <fputc>
    3398:	51 10       	cpse	r5, r1
    339a:	5a 94       	dec	r5
    339c:	01 50       	subi	r16, 0x01	; 1
    339e:	11 09       	sbc	r17, r1
    33a0:	01 15       	cp	r16, r1
    33a2:	11 05       	cpc	r17, r1
    33a4:	79 f7       	brne	.-34     	; 0x3384 <vfprintf+0x4e6>
    33a6:	e2 c0       	rjmp	.+452    	; 0x356c <vfprintf+0x6ce>
    33a8:	84 36       	cpi	r24, 0x64	; 100
    33aa:	11 f0       	breq	.+4      	; 0x33b0 <vfprintf+0x512>
    33ac:	89 36       	cpi	r24, 0x69	; 105
    33ae:	51 f5       	brne	.+84     	; 0x3404 <vfprintf+0x566>
    33b0:	56 01       	movw	r10, r12
    33b2:	27 ff       	sbrs	r18, 7
    33b4:	09 c0       	rjmp	.+18     	; 0x33c8 <vfprintf+0x52a>
    33b6:	f4 e0       	ldi	r31, 0x04	; 4
    33b8:	af 0e       	add	r10, r31
    33ba:	b1 1c       	adc	r11, r1
    33bc:	f6 01       	movw	r30, r12
    33be:	60 81       	ld	r22, Z
    33c0:	71 81       	ldd	r23, Z+1	; 0x01
    33c2:	82 81       	ldd	r24, Z+2	; 0x02
    33c4:	93 81       	ldd	r25, Z+3	; 0x03
    33c6:	0a c0       	rjmp	.+20     	; 0x33dc <vfprintf+0x53e>
    33c8:	f2 e0       	ldi	r31, 0x02	; 2
    33ca:	af 0e       	add	r10, r31
    33cc:	b1 1c       	adc	r11, r1
    33ce:	f6 01       	movw	r30, r12
    33d0:	60 81       	ld	r22, Z
    33d2:	71 81       	ldd	r23, Z+1	; 0x01
    33d4:	88 27       	eor	r24, r24
    33d6:	77 fd       	sbrc	r23, 7
    33d8:	80 95       	com	r24
    33da:	98 2f       	mov	r25, r24
    33dc:	02 2f       	mov	r16, r18
    33de:	0f 76       	andi	r16, 0x6F	; 111
    33e0:	97 ff       	sbrs	r25, 7
    33e2:	08 c0       	rjmp	.+16     	; 0x33f4 <vfprintf+0x556>
    33e4:	90 95       	com	r25
    33e6:	80 95       	com	r24
    33e8:	70 95       	com	r23
    33ea:	61 95       	neg	r22
    33ec:	7f 4f       	sbci	r23, 0xFF	; 255
    33ee:	8f 4f       	sbci	r24, 0xFF	; 255
    33f0:	9f 4f       	sbci	r25, 0xFF	; 255
    33f2:	00 68       	ori	r16, 0x80	; 128
    33f4:	2a e0       	ldi	r18, 0x0A	; 10
    33f6:	30 e0       	ldi	r19, 0x00	; 0
    33f8:	a4 01       	movw	r20, r8
    33fa:	0e 94 49 1c 	call	0x3892	; 0x3892 <__ultoa_invert>
    33fe:	c8 2e       	mov	r12, r24
    3400:	c8 18       	sub	r12, r8
    3402:	3e c0       	rjmp	.+124    	; 0x3480 <vfprintf+0x5e2>
    3404:	02 2f       	mov	r16, r18
    3406:	85 37       	cpi	r24, 0x75	; 117
    3408:	21 f4       	brne	.+8      	; 0x3412 <vfprintf+0x574>
    340a:	0f 7e       	andi	r16, 0xEF	; 239
    340c:	2a e0       	ldi	r18, 0x0A	; 10
    340e:	30 e0       	ldi	r19, 0x00	; 0
    3410:	1d c0       	rjmp	.+58     	; 0x344c <vfprintf+0x5ae>
    3412:	09 7f       	andi	r16, 0xF9	; 249
    3414:	8f 36       	cpi	r24, 0x6F	; 111
    3416:	91 f0       	breq	.+36     	; 0x343c <vfprintf+0x59e>
    3418:	18 f4       	brcc	.+6      	; 0x3420 <vfprintf+0x582>
    341a:	88 35       	cpi	r24, 0x58	; 88
    341c:	59 f0       	breq	.+22     	; 0x3434 <vfprintf+0x596>
    341e:	b0 c0       	rjmp	.+352    	; 0x3580 <vfprintf+0x6e2>
    3420:	80 37       	cpi	r24, 0x70	; 112
    3422:	19 f0       	breq	.+6      	; 0x342a <vfprintf+0x58c>
    3424:	88 37       	cpi	r24, 0x78	; 120
    3426:	11 f0       	breq	.+4      	; 0x342c <vfprintf+0x58e>
    3428:	ab c0       	rjmp	.+342    	; 0x3580 <vfprintf+0x6e2>
    342a:	00 61       	ori	r16, 0x10	; 16
    342c:	04 ff       	sbrs	r16, 4
    342e:	09 c0       	rjmp	.+18     	; 0x3442 <vfprintf+0x5a4>
    3430:	04 60       	ori	r16, 0x04	; 4
    3432:	07 c0       	rjmp	.+14     	; 0x3442 <vfprintf+0x5a4>
    3434:	24 ff       	sbrs	r18, 4
    3436:	08 c0       	rjmp	.+16     	; 0x3448 <vfprintf+0x5aa>
    3438:	06 60       	ori	r16, 0x06	; 6
    343a:	06 c0       	rjmp	.+12     	; 0x3448 <vfprintf+0x5aa>
    343c:	28 e0       	ldi	r18, 0x08	; 8
    343e:	30 e0       	ldi	r19, 0x00	; 0
    3440:	05 c0       	rjmp	.+10     	; 0x344c <vfprintf+0x5ae>
    3442:	20 e1       	ldi	r18, 0x10	; 16
    3444:	30 e0       	ldi	r19, 0x00	; 0
    3446:	02 c0       	rjmp	.+4      	; 0x344c <vfprintf+0x5ae>
    3448:	20 e1       	ldi	r18, 0x10	; 16
    344a:	32 e0       	ldi	r19, 0x02	; 2
    344c:	56 01       	movw	r10, r12
    344e:	07 ff       	sbrs	r16, 7
    3450:	09 c0       	rjmp	.+18     	; 0x3464 <vfprintf+0x5c6>
    3452:	f4 e0       	ldi	r31, 0x04	; 4
    3454:	af 0e       	add	r10, r31
    3456:	b1 1c       	adc	r11, r1
    3458:	f6 01       	movw	r30, r12
    345a:	60 81       	ld	r22, Z
    345c:	71 81       	ldd	r23, Z+1	; 0x01
    345e:	82 81       	ldd	r24, Z+2	; 0x02
    3460:	93 81       	ldd	r25, Z+3	; 0x03
    3462:	08 c0       	rjmp	.+16     	; 0x3474 <vfprintf+0x5d6>
    3464:	f2 e0       	ldi	r31, 0x02	; 2
    3466:	af 0e       	add	r10, r31
    3468:	b1 1c       	adc	r11, r1
    346a:	f6 01       	movw	r30, r12
    346c:	60 81       	ld	r22, Z
    346e:	71 81       	ldd	r23, Z+1	; 0x01
    3470:	80 e0       	ldi	r24, 0x00	; 0
    3472:	90 e0       	ldi	r25, 0x00	; 0
    3474:	a4 01       	movw	r20, r8
    3476:	0e 94 49 1c 	call	0x3892	; 0x3892 <__ultoa_invert>
    347a:	c8 2e       	mov	r12, r24
    347c:	c8 18       	sub	r12, r8
    347e:	0f 77       	andi	r16, 0x7F	; 127
    3480:	06 ff       	sbrs	r16, 6
    3482:	0b c0       	rjmp	.+22     	; 0x349a <vfprintf+0x5fc>
    3484:	20 2f       	mov	r18, r16
    3486:	2e 7f       	andi	r18, 0xFE	; 254
    3488:	c1 16       	cp	r12, r17
    348a:	50 f4       	brcc	.+20     	; 0x34a0 <vfprintf+0x602>
    348c:	04 ff       	sbrs	r16, 4
    348e:	0a c0       	rjmp	.+20     	; 0x34a4 <vfprintf+0x606>
    3490:	02 fd       	sbrc	r16, 2
    3492:	08 c0       	rjmp	.+16     	; 0x34a4 <vfprintf+0x606>
    3494:	20 2f       	mov	r18, r16
    3496:	2e 7e       	andi	r18, 0xEE	; 238
    3498:	05 c0       	rjmp	.+10     	; 0x34a4 <vfprintf+0x606>
    349a:	dc 2c       	mov	r13, r12
    349c:	20 2f       	mov	r18, r16
    349e:	03 c0       	rjmp	.+6      	; 0x34a6 <vfprintf+0x608>
    34a0:	dc 2c       	mov	r13, r12
    34a2:	01 c0       	rjmp	.+2      	; 0x34a6 <vfprintf+0x608>
    34a4:	d1 2e       	mov	r13, r17
    34a6:	24 ff       	sbrs	r18, 4
    34a8:	0d c0       	rjmp	.+26     	; 0x34c4 <vfprintf+0x626>
    34aa:	fe 01       	movw	r30, r28
    34ac:	ec 0d       	add	r30, r12
    34ae:	f1 1d       	adc	r31, r1
    34b0:	80 81       	ld	r24, Z
    34b2:	80 33       	cpi	r24, 0x30	; 48
    34b4:	11 f4       	brne	.+4      	; 0x34ba <vfprintf+0x61c>
    34b6:	29 7e       	andi	r18, 0xE9	; 233
    34b8:	09 c0       	rjmp	.+18     	; 0x34cc <vfprintf+0x62e>
    34ba:	22 ff       	sbrs	r18, 2
    34bc:	06 c0       	rjmp	.+12     	; 0x34ca <vfprintf+0x62c>
    34be:	d3 94       	inc	r13
    34c0:	d3 94       	inc	r13
    34c2:	04 c0       	rjmp	.+8      	; 0x34cc <vfprintf+0x62e>
    34c4:	82 2f       	mov	r24, r18
    34c6:	86 78       	andi	r24, 0x86	; 134
    34c8:	09 f0       	breq	.+2      	; 0x34cc <vfprintf+0x62e>
    34ca:	d3 94       	inc	r13
    34cc:	23 fd       	sbrc	r18, 3
    34ce:	13 c0       	rjmp	.+38     	; 0x34f6 <vfprintf+0x658>
    34d0:	20 ff       	sbrs	r18, 0
    34d2:	06 c0       	rjmp	.+12     	; 0x34e0 <vfprintf+0x642>
    34d4:	1c 2d       	mov	r17, r12
    34d6:	d5 14       	cp	r13, r5
    34d8:	18 f4       	brcc	.+6      	; 0x34e0 <vfprintf+0x642>
    34da:	15 0d       	add	r17, r5
    34dc:	1d 19       	sub	r17, r13
    34de:	d5 2c       	mov	r13, r5
    34e0:	d5 14       	cp	r13, r5
    34e2:	68 f4       	brcc	.+26     	; 0x34fe <vfprintf+0x660>
    34e4:	b7 01       	movw	r22, r14
    34e6:	80 e2       	ldi	r24, 0x20	; 32
    34e8:	90 e0       	ldi	r25, 0x00	; 0
    34ea:	2b 8b       	std	Y+19, r18	; 0x13
    34ec:	0e 94 f5 1b 	call	0x37ea	; 0x37ea <fputc>
    34f0:	d3 94       	inc	r13
    34f2:	2b 89       	ldd	r18, Y+19	; 0x13
    34f4:	f5 cf       	rjmp	.-22     	; 0x34e0 <vfprintf+0x642>
    34f6:	d5 14       	cp	r13, r5
    34f8:	10 f4       	brcc	.+4      	; 0x34fe <vfprintf+0x660>
    34fa:	5d 18       	sub	r5, r13
    34fc:	01 c0       	rjmp	.+2      	; 0x3500 <vfprintf+0x662>
    34fe:	51 2c       	mov	r5, r1
    3500:	24 ff       	sbrs	r18, 4
    3502:	12 c0       	rjmp	.+36     	; 0x3528 <vfprintf+0x68a>
    3504:	b7 01       	movw	r22, r14
    3506:	80 e3       	ldi	r24, 0x30	; 48
    3508:	90 e0       	ldi	r25, 0x00	; 0
    350a:	2b 8b       	std	Y+19, r18	; 0x13
    350c:	0e 94 f5 1b 	call	0x37ea	; 0x37ea <fputc>
    3510:	2b 89       	ldd	r18, Y+19	; 0x13
    3512:	22 ff       	sbrs	r18, 2
    3514:	17 c0       	rjmp	.+46     	; 0x3544 <vfprintf+0x6a6>
    3516:	21 ff       	sbrs	r18, 1
    3518:	03 c0       	rjmp	.+6      	; 0x3520 <vfprintf+0x682>
    351a:	88 e5       	ldi	r24, 0x58	; 88
    351c:	90 e0       	ldi	r25, 0x00	; 0
    351e:	02 c0       	rjmp	.+4      	; 0x3524 <vfprintf+0x686>
    3520:	88 e7       	ldi	r24, 0x78	; 120
    3522:	90 e0       	ldi	r25, 0x00	; 0
    3524:	b7 01       	movw	r22, r14
    3526:	0c c0       	rjmp	.+24     	; 0x3540 <vfprintf+0x6a2>
    3528:	82 2f       	mov	r24, r18
    352a:	86 78       	andi	r24, 0x86	; 134
    352c:	59 f0       	breq	.+22     	; 0x3544 <vfprintf+0x6a6>
    352e:	21 fd       	sbrc	r18, 1
    3530:	02 c0       	rjmp	.+4      	; 0x3536 <vfprintf+0x698>
    3532:	80 e2       	ldi	r24, 0x20	; 32
    3534:	01 c0       	rjmp	.+2      	; 0x3538 <vfprintf+0x69a>
    3536:	8b e2       	ldi	r24, 0x2B	; 43
    3538:	27 fd       	sbrc	r18, 7
    353a:	8d e2       	ldi	r24, 0x2D	; 45
    353c:	b7 01       	movw	r22, r14
    353e:	90 e0       	ldi	r25, 0x00	; 0
    3540:	0e 94 f5 1b 	call	0x37ea	; 0x37ea <fputc>
    3544:	c1 16       	cp	r12, r17
    3546:	38 f4       	brcc	.+14     	; 0x3556 <vfprintf+0x6b8>
    3548:	b7 01       	movw	r22, r14
    354a:	80 e3       	ldi	r24, 0x30	; 48
    354c:	90 e0       	ldi	r25, 0x00	; 0
    354e:	0e 94 f5 1b 	call	0x37ea	; 0x37ea <fputc>
    3552:	11 50       	subi	r17, 0x01	; 1
    3554:	f7 cf       	rjmp	.-18     	; 0x3544 <vfprintf+0x6a6>
    3556:	ca 94       	dec	r12
    3558:	f4 01       	movw	r30, r8
    355a:	ec 0d       	add	r30, r12
    355c:	f1 1d       	adc	r31, r1
    355e:	80 81       	ld	r24, Z
    3560:	b7 01       	movw	r22, r14
    3562:	90 e0       	ldi	r25, 0x00	; 0
    3564:	0e 94 f5 1b 	call	0x37ea	; 0x37ea <fputc>
    3568:	c1 10       	cpse	r12, r1
    356a:	f5 cf       	rjmp	.-22     	; 0x3556 <vfprintf+0x6b8>
    356c:	55 20       	and	r5, r5
    356e:	09 f4       	brne	.+2      	; 0x3572 <vfprintf+0x6d4>
    3570:	c2 cc       	rjmp	.-1660   	; 0x2ef6 <vfprintf+0x58>
    3572:	b7 01       	movw	r22, r14
    3574:	80 e2       	ldi	r24, 0x20	; 32
    3576:	90 e0       	ldi	r25, 0x00	; 0
    3578:	0e 94 f5 1b 	call	0x37ea	; 0x37ea <fputc>
    357c:	5a 94       	dec	r5
    357e:	f6 cf       	rjmp	.-20     	; 0x356c <vfprintf+0x6ce>
    3580:	f7 01       	movw	r30, r14
    3582:	86 81       	ldd	r24, Z+6	; 0x06
    3584:	97 81       	ldd	r25, Z+7	; 0x07
    3586:	02 c0       	rjmp	.+4      	; 0x358c <vfprintf+0x6ee>
    3588:	8f ef       	ldi	r24, 0xFF	; 255
    358a:	9f ef       	ldi	r25, 0xFF	; 255
    358c:	63 96       	adiw	r28, 0x13	; 19
    358e:	e2 e1       	ldi	r30, 0x12	; 18
    3590:	0c 94 ec 1a 	jmp	0x35d8	; 0x35d8 <__epilogue_restores__>

00003594 <__tablejump2__>:
    3594:	ee 0f       	add	r30, r30
    3596:	ff 1f       	adc	r31, r31

00003598 <__tablejump__>:
    3598:	05 90       	lpm	r0, Z+
    359a:	f4 91       	lpm	r31, Z
    359c:	e0 2d       	mov	r30, r0
    359e:	09 94       	ijmp

000035a0 <__prologue_saves__>:
    35a0:	2f 92       	push	r2
    35a2:	3f 92       	push	r3
    35a4:	4f 92       	push	r4
    35a6:	5f 92       	push	r5
    35a8:	6f 92       	push	r6
    35aa:	7f 92       	push	r7
    35ac:	8f 92       	push	r8
    35ae:	9f 92       	push	r9
    35b0:	af 92       	push	r10
    35b2:	bf 92       	push	r11
    35b4:	cf 92       	push	r12
    35b6:	df 92       	push	r13
    35b8:	ef 92       	push	r14
    35ba:	ff 92       	push	r15
    35bc:	0f 93       	push	r16
    35be:	1f 93       	push	r17
    35c0:	cf 93       	push	r28
    35c2:	df 93       	push	r29
    35c4:	cd b7       	in	r28, 0x3d	; 61
    35c6:	de b7       	in	r29, 0x3e	; 62
    35c8:	ca 1b       	sub	r28, r26
    35ca:	db 0b       	sbc	r29, r27
    35cc:	0f b6       	in	r0, 0x3f	; 63
    35ce:	f8 94       	cli
    35d0:	de bf       	out	0x3e, r29	; 62
    35d2:	0f be       	out	0x3f, r0	; 63
    35d4:	cd bf       	out	0x3d, r28	; 61
    35d6:	09 94       	ijmp

000035d8 <__epilogue_restores__>:
    35d8:	2a 88       	ldd	r2, Y+18	; 0x12
    35da:	39 88       	ldd	r3, Y+17	; 0x11
    35dc:	48 88       	ldd	r4, Y+16	; 0x10
    35de:	5f 84       	ldd	r5, Y+15	; 0x0f
    35e0:	6e 84       	ldd	r6, Y+14	; 0x0e
    35e2:	7d 84       	ldd	r7, Y+13	; 0x0d
    35e4:	8c 84       	ldd	r8, Y+12	; 0x0c
    35e6:	9b 84       	ldd	r9, Y+11	; 0x0b
    35e8:	aa 84       	ldd	r10, Y+10	; 0x0a
    35ea:	b9 84       	ldd	r11, Y+9	; 0x09
    35ec:	c8 84       	ldd	r12, Y+8	; 0x08
    35ee:	df 80       	ldd	r13, Y+7	; 0x07
    35f0:	ee 80       	ldd	r14, Y+6	; 0x06
    35f2:	fd 80       	ldd	r15, Y+5	; 0x05
    35f4:	0c 81       	ldd	r16, Y+4	; 0x04
    35f6:	1b 81       	ldd	r17, Y+3	; 0x03
    35f8:	aa 81       	ldd	r26, Y+2	; 0x02
    35fa:	b9 81       	ldd	r27, Y+1	; 0x01
    35fc:	ce 0f       	add	r28, r30
    35fe:	d1 1d       	adc	r29, r1
    3600:	0f b6       	in	r0, 0x3f	; 63
    3602:	f8 94       	cli
    3604:	de bf       	out	0x3e, r29	; 62
    3606:	0f be       	out	0x3f, r0	; 63
    3608:	cd bf       	out	0x3d, r28	; 61
    360a:	ed 01       	movw	r28, r26
    360c:	08 95       	ret

0000360e <__ftoa_engine>:
    360e:	28 30       	cpi	r18, 0x08	; 8
    3610:	08 f0       	brcs	.+2      	; 0x3614 <__ftoa_engine+0x6>
    3612:	27 e0       	ldi	r18, 0x07	; 7
    3614:	33 27       	eor	r19, r19
    3616:	da 01       	movw	r26, r20
    3618:	99 0f       	add	r25, r25
    361a:	31 1d       	adc	r19, r1
    361c:	87 fd       	sbrc	r24, 7
    361e:	91 60       	ori	r25, 0x01	; 1
    3620:	00 96       	adiw	r24, 0x00	; 0
    3622:	61 05       	cpc	r22, r1
    3624:	71 05       	cpc	r23, r1
    3626:	39 f4       	brne	.+14     	; 0x3636 <__ftoa_engine+0x28>
    3628:	32 60       	ori	r19, 0x02	; 2
    362a:	2e 5f       	subi	r18, 0xFE	; 254
    362c:	3d 93       	st	X+, r19
    362e:	30 e3       	ldi	r19, 0x30	; 48
    3630:	2a 95       	dec	r18
    3632:	e1 f7       	brne	.-8      	; 0x362c <__ftoa_engine+0x1e>
    3634:	08 95       	ret
    3636:	9f 3f       	cpi	r25, 0xFF	; 255
    3638:	30 f0       	brcs	.+12     	; 0x3646 <__ftoa_engine+0x38>
    363a:	80 38       	cpi	r24, 0x80	; 128
    363c:	71 05       	cpc	r23, r1
    363e:	61 05       	cpc	r22, r1
    3640:	09 f0       	breq	.+2      	; 0x3644 <__ftoa_engine+0x36>
    3642:	3c 5f       	subi	r19, 0xFC	; 252
    3644:	3c 5f       	subi	r19, 0xFC	; 252
    3646:	3d 93       	st	X+, r19
    3648:	91 30       	cpi	r25, 0x01	; 1
    364a:	08 f0       	brcs	.+2      	; 0x364e <__ftoa_engine+0x40>
    364c:	80 68       	ori	r24, 0x80	; 128
    364e:	91 1d       	adc	r25, r1
    3650:	df 93       	push	r29
    3652:	cf 93       	push	r28
    3654:	1f 93       	push	r17
    3656:	0f 93       	push	r16
    3658:	ff 92       	push	r15
    365a:	ef 92       	push	r14
    365c:	19 2f       	mov	r17, r25
    365e:	98 7f       	andi	r25, 0xF8	; 248
    3660:	96 95       	lsr	r25
    3662:	e9 2f       	mov	r30, r25
    3664:	96 95       	lsr	r25
    3666:	96 95       	lsr	r25
    3668:	e9 0f       	add	r30, r25
    366a:	ff 27       	eor	r31, r31
    366c:	e2 5a       	subi	r30, 0xA2	; 162
    366e:	fb 4f       	sbci	r31, 0xFB	; 251
    3670:	99 27       	eor	r25, r25
    3672:	33 27       	eor	r19, r19
    3674:	ee 24       	eor	r14, r14
    3676:	ff 24       	eor	r15, r15
    3678:	a7 01       	movw	r20, r14
    367a:	e7 01       	movw	r28, r14
    367c:	05 90       	lpm	r0, Z+
    367e:	08 94       	sec
    3680:	07 94       	ror	r0
    3682:	28 f4       	brcc	.+10     	; 0x368e <__ftoa_engine+0x80>
    3684:	36 0f       	add	r19, r22
    3686:	e7 1e       	adc	r14, r23
    3688:	f8 1e       	adc	r15, r24
    368a:	49 1f       	adc	r20, r25
    368c:	51 1d       	adc	r21, r1
    368e:	66 0f       	add	r22, r22
    3690:	77 1f       	adc	r23, r23
    3692:	88 1f       	adc	r24, r24
    3694:	99 1f       	adc	r25, r25
    3696:	06 94       	lsr	r0
    3698:	a1 f7       	brne	.-24     	; 0x3682 <__ftoa_engine+0x74>
    369a:	05 90       	lpm	r0, Z+
    369c:	07 94       	ror	r0
    369e:	28 f4       	brcc	.+10     	; 0x36aa <__ftoa_engine+0x9c>
    36a0:	e7 0e       	add	r14, r23
    36a2:	f8 1e       	adc	r15, r24
    36a4:	49 1f       	adc	r20, r25
    36a6:	56 1f       	adc	r21, r22
    36a8:	c1 1d       	adc	r28, r1
    36aa:	77 0f       	add	r23, r23
    36ac:	88 1f       	adc	r24, r24
    36ae:	99 1f       	adc	r25, r25
    36b0:	66 1f       	adc	r22, r22
    36b2:	06 94       	lsr	r0
    36b4:	a1 f7       	brne	.-24     	; 0x369e <__ftoa_engine+0x90>
    36b6:	05 90       	lpm	r0, Z+
    36b8:	07 94       	ror	r0
    36ba:	28 f4       	brcc	.+10     	; 0x36c6 <__ftoa_engine+0xb8>
    36bc:	f8 0e       	add	r15, r24
    36be:	49 1f       	adc	r20, r25
    36c0:	56 1f       	adc	r21, r22
    36c2:	c7 1f       	adc	r28, r23
    36c4:	d1 1d       	adc	r29, r1
    36c6:	88 0f       	add	r24, r24
    36c8:	99 1f       	adc	r25, r25
    36ca:	66 1f       	adc	r22, r22
    36cc:	77 1f       	adc	r23, r23
    36ce:	06 94       	lsr	r0
    36d0:	a1 f7       	brne	.-24     	; 0x36ba <__ftoa_engine+0xac>
    36d2:	05 90       	lpm	r0, Z+
    36d4:	07 94       	ror	r0
    36d6:	20 f4       	brcc	.+8      	; 0x36e0 <__ftoa_engine+0xd2>
    36d8:	49 0f       	add	r20, r25
    36da:	56 1f       	adc	r21, r22
    36dc:	c7 1f       	adc	r28, r23
    36de:	d8 1f       	adc	r29, r24
    36e0:	99 0f       	add	r25, r25
    36e2:	66 1f       	adc	r22, r22
    36e4:	77 1f       	adc	r23, r23
    36e6:	88 1f       	adc	r24, r24
    36e8:	06 94       	lsr	r0
    36ea:	a9 f7       	brne	.-22     	; 0x36d6 <__ftoa_engine+0xc8>
    36ec:	84 91       	lpm	r24, Z
    36ee:	10 95       	com	r17
    36f0:	17 70       	andi	r17, 0x07	; 7
    36f2:	41 f0       	breq	.+16     	; 0x3704 <__ftoa_engine+0xf6>
    36f4:	d6 95       	lsr	r29
    36f6:	c7 95       	ror	r28
    36f8:	57 95       	ror	r21
    36fa:	47 95       	ror	r20
    36fc:	f7 94       	ror	r15
    36fe:	e7 94       	ror	r14
    3700:	1a 95       	dec	r17
    3702:	c1 f7       	brne	.-16     	; 0x36f4 <__ftoa_engine+0xe6>
    3704:	e4 e0       	ldi	r30, 0x04	; 4
    3706:	f4 e0       	ldi	r31, 0x04	; 4
    3708:	68 94       	set
    370a:	15 90       	lpm	r1, Z+
    370c:	15 91       	lpm	r17, Z+
    370e:	35 91       	lpm	r19, Z+
    3710:	65 91       	lpm	r22, Z+
    3712:	95 91       	lpm	r25, Z+
    3714:	05 90       	lpm	r0, Z+
    3716:	7f e2       	ldi	r23, 0x2F	; 47
    3718:	73 95       	inc	r23
    371a:	e1 18       	sub	r14, r1
    371c:	f1 0a       	sbc	r15, r17
    371e:	43 0b       	sbc	r20, r19
    3720:	56 0b       	sbc	r21, r22
    3722:	c9 0b       	sbc	r28, r25
    3724:	d0 09       	sbc	r29, r0
    3726:	c0 f7       	brcc	.-16     	; 0x3718 <__ftoa_engine+0x10a>
    3728:	e1 0c       	add	r14, r1
    372a:	f1 1e       	adc	r15, r17
    372c:	43 1f       	adc	r20, r19
    372e:	56 1f       	adc	r21, r22
    3730:	c9 1f       	adc	r28, r25
    3732:	d0 1d       	adc	r29, r0
    3734:	7e f4       	brtc	.+30     	; 0x3754 <__ftoa_engine+0x146>
    3736:	70 33       	cpi	r23, 0x30	; 48
    3738:	11 f4       	brne	.+4      	; 0x373e <__ftoa_engine+0x130>
    373a:	8a 95       	dec	r24
    373c:	e6 cf       	rjmp	.-52     	; 0x370a <__ftoa_engine+0xfc>
    373e:	e8 94       	clt
    3740:	01 50       	subi	r16, 0x01	; 1
    3742:	30 f0       	brcs	.+12     	; 0x3750 <__ftoa_engine+0x142>
    3744:	08 0f       	add	r16, r24
    3746:	0a f4       	brpl	.+2      	; 0x374a <__ftoa_engine+0x13c>
    3748:	00 27       	eor	r16, r16
    374a:	02 17       	cp	r16, r18
    374c:	08 f4       	brcc	.+2      	; 0x3750 <__ftoa_engine+0x142>
    374e:	20 2f       	mov	r18, r16
    3750:	23 95       	inc	r18
    3752:	02 2f       	mov	r16, r18
    3754:	7a 33       	cpi	r23, 0x3A	; 58
    3756:	28 f0       	brcs	.+10     	; 0x3762 <__ftoa_engine+0x154>
    3758:	79 e3       	ldi	r23, 0x39	; 57
    375a:	7d 93       	st	X+, r23
    375c:	2a 95       	dec	r18
    375e:	e9 f7       	brne	.-6      	; 0x375a <__ftoa_engine+0x14c>
    3760:	10 c0       	rjmp	.+32     	; 0x3782 <__ftoa_engine+0x174>
    3762:	7d 93       	st	X+, r23
    3764:	2a 95       	dec	r18
    3766:	89 f6       	brne	.-94     	; 0x370a <__ftoa_engine+0xfc>
    3768:	06 94       	lsr	r0
    376a:	97 95       	ror	r25
    376c:	67 95       	ror	r22
    376e:	37 95       	ror	r19
    3770:	17 95       	ror	r17
    3772:	17 94       	ror	r1
    3774:	e1 18       	sub	r14, r1
    3776:	f1 0a       	sbc	r15, r17
    3778:	43 0b       	sbc	r20, r19
    377a:	56 0b       	sbc	r21, r22
    377c:	c9 0b       	sbc	r28, r25
    377e:	d0 09       	sbc	r29, r0
    3780:	98 f0       	brcs	.+38     	; 0x37a8 <__ftoa_engine+0x19a>
    3782:	23 95       	inc	r18
    3784:	7e 91       	ld	r23, -X
    3786:	73 95       	inc	r23
    3788:	7a 33       	cpi	r23, 0x3A	; 58
    378a:	08 f0       	brcs	.+2      	; 0x378e <__ftoa_engine+0x180>
    378c:	70 e3       	ldi	r23, 0x30	; 48
    378e:	7c 93       	st	X, r23
    3790:	20 13       	cpse	r18, r16
    3792:	b8 f7       	brcc	.-18     	; 0x3782 <__ftoa_engine+0x174>
    3794:	7e 91       	ld	r23, -X
    3796:	70 61       	ori	r23, 0x10	; 16
    3798:	7d 93       	st	X+, r23
    379a:	30 f0       	brcs	.+12     	; 0x37a8 <__ftoa_engine+0x19a>
    379c:	83 95       	inc	r24
    379e:	71 e3       	ldi	r23, 0x31	; 49
    37a0:	7d 93       	st	X+, r23
    37a2:	70 e3       	ldi	r23, 0x30	; 48
    37a4:	2a 95       	dec	r18
    37a6:	e1 f7       	brne	.-8      	; 0x37a0 <__ftoa_engine+0x192>
    37a8:	11 24       	eor	r1, r1
    37aa:	ef 90       	pop	r14
    37ac:	ff 90       	pop	r15
    37ae:	0f 91       	pop	r16
    37b0:	1f 91       	pop	r17
    37b2:	cf 91       	pop	r28
    37b4:	df 91       	pop	r29
    37b6:	99 27       	eor	r25, r25
    37b8:	87 fd       	sbrc	r24, 7
    37ba:	90 95       	com	r25
    37bc:	08 95       	ret

000037be <strnlen_P>:
    37be:	fc 01       	movw	r30, r24
    37c0:	05 90       	lpm	r0, Z+
    37c2:	61 50       	subi	r22, 0x01	; 1
    37c4:	70 40       	sbci	r23, 0x00	; 0
    37c6:	01 10       	cpse	r0, r1
    37c8:	d8 f7       	brcc	.-10     	; 0x37c0 <strnlen_P+0x2>
    37ca:	80 95       	com	r24
    37cc:	90 95       	com	r25
    37ce:	8e 0f       	add	r24, r30
    37d0:	9f 1f       	adc	r25, r31
    37d2:	08 95       	ret

000037d4 <strnlen>:
    37d4:	fc 01       	movw	r30, r24
    37d6:	61 50       	subi	r22, 0x01	; 1
    37d8:	70 40       	sbci	r23, 0x00	; 0
    37da:	01 90       	ld	r0, Z+
    37dc:	01 10       	cpse	r0, r1
    37de:	d8 f7       	brcc	.-10     	; 0x37d6 <strnlen+0x2>
    37e0:	80 95       	com	r24
    37e2:	90 95       	com	r25
    37e4:	8e 0f       	add	r24, r30
    37e6:	9f 1f       	adc	r25, r31
    37e8:	08 95       	ret

000037ea <fputc>:
    37ea:	0f 93       	push	r16
    37ec:	1f 93       	push	r17
    37ee:	cf 93       	push	r28
    37f0:	df 93       	push	r29
    37f2:	18 2f       	mov	r17, r24
    37f4:	09 2f       	mov	r16, r25
    37f6:	eb 01       	movw	r28, r22
    37f8:	8b 81       	ldd	r24, Y+3	; 0x03
    37fa:	81 fd       	sbrc	r24, 1
    37fc:	03 c0       	rjmp	.+6      	; 0x3804 <fputc+0x1a>
    37fe:	8f ef       	ldi	r24, 0xFF	; 255
    3800:	9f ef       	ldi	r25, 0xFF	; 255
    3802:	20 c0       	rjmp	.+64     	; 0x3844 <fputc+0x5a>
    3804:	82 ff       	sbrs	r24, 2
    3806:	10 c0       	rjmp	.+32     	; 0x3828 <fputc+0x3e>
    3808:	4e 81       	ldd	r20, Y+6	; 0x06
    380a:	5f 81       	ldd	r21, Y+7	; 0x07
    380c:	2c 81       	ldd	r18, Y+4	; 0x04
    380e:	3d 81       	ldd	r19, Y+5	; 0x05
    3810:	42 17       	cp	r20, r18
    3812:	53 07       	cpc	r21, r19
    3814:	7c f4       	brge	.+30     	; 0x3834 <fputc+0x4a>
    3816:	e8 81       	ld	r30, Y
    3818:	f9 81       	ldd	r31, Y+1	; 0x01
    381a:	9f 01       	movw	r18, r30
    381c:	2f 5f       	subi	r18, 0xFF	; 255
    381e:	3f 4f       	sbci	r19, 0xFF	; 255
    3820:	39 83       	std	Y+1, r19	; 0x01
    3822:	28 83       	st	Y, r18
    3824:	10 83       	st	Z, r17
    3826:	06 c0       	rjmp	.+12     	; 0x3834 <fputc+0x4a>
    3828:	e8 85       	ldd	r30, Y+8	; 0x08
    382a:	f9 85       	ldd	r31, Y+9	; 0x09
    382c:	81 2f       	mov	r24, r17
    382e:	09 95       	icall
    3830:	89 2b       	or	r24, r25
    3832:	29 f7       	brne	.-54     	; 0x37fe <fputc+0x14>
    3834:	2e 81       	ldd	r18, Y+6	; 0x06
    3836:	3f 81       	ldd	r19, Y+7	; 0x07
    3838:	2f 5f       	subi	r18, 0xFF	; 255
    383a:	3f 4f       	sbci	r19, 0xFF	; 255
    383c:	3f 83       	std	Y+7, r19	; 0x07
    383e:	2e 83       	std	Y+6, r18	; 0x06
    3840:	81 2f       	mov	r24, r17
    3842:	90 2f       	mov	r25, r16
    3844:	df 91       	pop	r29
    3846:	cf 91       	pop	r28
    3848:	1f 91       	pop	r17
    384a:	0f 91       	pop	r16
    384c:	08 95       	ret

0000384e <sprintf>:
    384e:	ae e0       	ldi	r26, 0x0E	; 14
    3850:	b0 e0       	ldi	r27, 0x00	; 0
    3852:	ed e2       	ldi	r30, 0x2D	; 45
    3854:	fc e1       	ldi	r31, 0x1C	; 28
    3856:	0c 94 de 1a 	jmp	0x35bc	; 0x35bc <__prologue_saves__+0x1c>
    385a:	0d 89       	ldd	r16, Y+21	; 0x15
    385c:	1e 89       	ldd	r17, Y+22	; 0x16
    385e:	86 e0       	ldi	r24, 0x06	; 6
    3860:	8c 83       	std	Y+4, r24	; 0x04
    3862:	1a 83       	std	Y+2, r17	; 0x02
    3864:	09 83       	std	Y+1, r16	; 0x01
    3866:	8f ef       	ldi	r24, 0xFF	; 255
    3868:	9f e7       	ldi	r25, 0x7F	; 127
    386a:	9e 83       	std	Y+6, r25	; 0x06
    386c:	8d 83       	std	Y+5, r24	; 0x05
    386e:	ae 01       	movw	r20, r28
    3870:	47 5e       	subi	r20, 0xE7	; 231
    3872:	5f 4f       	sbci	r21, 0xFF	; 255
    3874:	6f 89       	ldd	r22, Y+23	; 0x17
    3876:	78 8d       	ldd	r23, Y+24	; 0x18
    3878:	ce 01       	movw	r24, r28
    387a:	01 96       	adiw	r24, 0x01	; 1
    387c:	0e 94 4f 17 	call	0x2e9e	; 0x2e9e <vfprintf>
    3880:	ef 81       	ldd	r30, Y+7	; 0x07
    3882:	f8 85       	ldd	r31, Y+8	; 0x08
    3884:	e0 0f       	add	r30, r16
    3886:	f1 1f       	adc	r31, r17
    3888:	10 82       	st	Z, r1
    388a:	2e 96       	adiw	r28, 0x0e	; 14
    388c:	e4 e0       	ldi	r30, 0x04	; 4
    388e:	0c 94 fa 1a 	jmp	0x35f4	; 0x35f4 <__epilogue_restores__+0x1c>

00003892 <__ultoa_invert>:
    3892:	fa 01       	movw	r30, r20
    3894:	aa 27       	eor	r26, r26
    3896:	28 30       	cpi	r18, 0x08	; 8
    3898:	51 f1       	breq	.+84     	; 0x38ee <__ultoa_invert+0x5c>
    389a:	20 31       	cpi	r18, 0x10	; 16
    389c:	81 f1       	breq	.+96     	; 0x38fe <__ultoa_invert+0x6c>
    389e:	e8 94       	clt
    38a0:	6f 93       	push	r22
    38a2:	6e 7f       	andi	r22, 0xFE	; 254
    38a4:	6e 5f       	subi	r22, 0xFE	; 254
    38a6:	7f 4f       	sbci	r23, 0xFF	; 255
    38a8:	8f 4f       	sbci	r24, 0xFF	; 255
    38aa:	9f 4f       	sbci	r25, 0xFF	; 255
    38ac:	af 4f       	sbci	r26, 0xFF	; 255
    38ae:	b1 e0       	ldi	r27, 0x01	; 1
    38b0:	3e d0       	rcall	.+124    	; 0x392e <__ultoa_invert+0x9c>
    38b2:	b4 e0       	ldi	r27, 0x04	; 4
    38b4:	3c d0       	rcall	.+120    	; 0x392e <__ultoa_invert+0x9c>
    38b6:	67 0f       	add	r22, r23
    38b8:	78 1f       	adc	r23, r24
    38ba:	89 1f       	adc	r24, r25
    38bc:	9a 1f       	adc	r25, r26
    38be:	a1 1d       	adc	r26, r1
    38c0:	68 0f       	add	r22, r24
    38c2:	79 1f       	adc	r23, r25
    38c4:	8a 1f       	adc	r24, r26
    38c6:	91 1d       	adc	r25, r1
    38c8:	a1 1d       	adc	r26, r1
    38ca:	6a 0f       	add	r22, r26
    38cc:	71 1d       	adc	r23, r1
    38ce:	81 1d       	adc	r24, r1
    38d0:	91 1d       	adc	r25, r1
    38d2:	a1 1d       	adc	r26, r1
    38d4:	20 d0       	rcall	.+64     	; 0x3916 <__ultoa_invert+0x84>
    38d6:	09 f4       	brne	.+2      	; 0x38da <__ultoa_invert+0x48>
    38d8:	68 94       	set
    38da:	3f 91       	pop	r19
    38dc:	2a e0       	ldi	r18, 0x0A	; 10
    38de:	26 9f       	mul	r18, r22
    38e0:	11 24       	eor	r1, r1
    38e2:	30 19       	sub	r19, r0
    38e4:	30 5d       	subi	r19, 0xD0	; 208
    38e6:	31 93       	st	Z+, r19
    38e8:	de f6       	brtc	.-74     	; 0x38a0 <__ultoa_invert+0xe>
    38ea:	cf 01       	movw	r24, r30
    38ec:	08 95       	ret
    38ee:	46 2f       	mov	r20, r22
    38f0:	47 70       	andi	r20, 0x07	; 7
    38f2:	40 5d       	subi	r20, 0xD0	; 208
    38f4:	41 93       	st	Z+, r20
    38f6:	b3 e0       	ldi	r27, 0x03	; 3
    38f8:	0f d0       	rcall	.+30     	; 0x3918 <__ultoa_invert+0x86>
    38fa:	c9 f7       	brne	.-14     	; 0x38ee <__ultoa_invert+0x5c>
    38fc:	f6 cf       	rjmp	.-20     	; 0x38ea <__ultoa_invert+0x58>
    38fe:	46 2f       	mov	r20, r22
    3900:	4f 70       	andi	r20, 0x0F	; 15
    3902:	40 5d       	subi	r20, 0xD0	; 208
    3904:	4a 33       	cpi	r20, 0x3A	; 58
    3906:	18 f0       	brcs	.+6      	; 0x390e <__ultoa_invert+0x7c>
    3908:	49 5d       	subi	r20, 0xD9	; 217
    390a:	31 fd       	sbrc	r19, 1
    390c:	40 52       	subi	r20, 0x20	; 32
    390e:	41 93       	st	Z+, r20
    3910:	02 d0       	rcall	.+4      	; 0x3916 <__ultoa_invert+0x84>
    3912:	a9 f7       	brne	.-22     	; 0x38fe <__ultoa_invert+0x6c>
    3914:	ea cf       	rjmp	.-44     	; 0x38ea <__ultoa_invert+0x58>
    3916:	b4 e0       	ldi	r27, 0x04	; 4
    3918:	a6 95       	lsr	r26
    391a:	97 95       	ror	r25
    391c:	87 95       	ror	r24
    391e:	77 95       	ror	r23
    3920:	67 95       	ror	r22
    3922:	ba 95       	dec	r27
    3924:	c9 f7       	brne	.-14     	; 0x3918 <__ultoa_invert+0x86>
    3926:	00 97       	sbiw	r24, 0x00	; 0
    3928:	61 05       	cpc	r22, r1
    392a:	71 05       	cpc	r23, r1
    392c:	08 95       	ret
    392e:	9b 01       	movw	r18, r22
    3930:	ac 01       	movw	r20, r24
    3932:	0a 2e       	mov	r0, r26
    3934:	06 94       	lsr	r0
    3936:	57 95       	ror	r21
    3938:	47 95       	ror	r20
    393a:	37 95       	ror	r19
    393c:	27 95       	ror	r18
    393e:	ba 95       	dec	r27
    3940:	c9 f7       	brne	.-14     	; 0x3934 <__ultoa_invert+0xa2>
    3942:	62 0f       	add	r22, r18
    3944:	73 1f       	adc	r23, r19
    3946:	84 1f       	adc	r24, r20
    3948:	95 1f       	adc	r25, r21
    394a:	a0 1d       	adc	r26, r0
    394c:	08 95       	ret

0000394e <__do_global_dtors>:
    394e:	15 e0       	ldi	r17, 0x05	; 5
    3950:	c0 e0       	ldi	r28, 0x00	; 0
    3952:	d5 e0       	ldi	r29, 0x05	; 5
    3954:	04 c0       	rjmp	.+8      	; 0x395e <__do_global_dtors+0x10>
    3956:	fe 01       	movw	r30, r28
    3958:	0e 94 cc 1a 	call	0x3598	; 0x3598 <__tablejump__>
    395c:	22 96       	adiw	r28, 0x02	; 2
    395e:	c2 30       	cpi	r28, 0x02	; 2
    3960:	d1 07       	cpc	r29, r17
    3962:	c9 f7       	brne	.-14     	; 0x3956 <__do_global_dtors+0x8>
    3964:	f8 94       	cli

00003966 <__stop_program>:
    3966:	ff cf       	rjmp	.-2      	; 0x3966 <__stop_program>
