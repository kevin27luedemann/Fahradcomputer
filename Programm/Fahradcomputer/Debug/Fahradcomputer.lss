
Fahradcomputer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000218  00800100  000061ce  00006262  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000061ce  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000495  00800318  00800318  0000647a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000647a  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000003c0  00000000  00000000  000064d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00008582  00000000  00000000  00006896  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001611  00000000  00000000  0000ee18  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001714  00000000  00000000  00010429  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000e70  00000000  00000000  00011b40  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00001194  00000000  00000000  000129b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000062f8  00000000  00000000  00013b44  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000003a8  00000000  00000000  00019e3c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 bf 03 	jmp	0x77e	; 0x77e <__dtors_end>
       4:	0c 94 e7 03 	jmp	0x7ce	; 0x7ce <__bad_interrupt>
       8:	0c 94 e7 03 	jmp	0x7ce	; 0x7ce <__bad_interrupt>
       c:	0c 94 e7 03 	jmp	0x7ce	; 0x7ce <__bad_interrupt>
      10:	0c 94 e7 03 	jmp	0x7ce	; 0x7ce <__bad_interrupt>
      14:	0c 94 e7 03 	jmp	0x7ce	; 0x7ce <__bad_interrupt>
      18:	0c 94 e7 03 	jmp	0x7ce	; 0x7ce <__bad_interrupt>
      1c:	0c 94 e7 03 	jmp	0x7ce	; 0x7ce <__bad_interrupt>
      20:	0c 94 e7 03 	jmp	0x7ce	; 0x7ce <__bad_interrupt>
      24:	0c 94 40 1a 	jmp	0x3480	; 0x3480 <__vector_9>
      28:	0c 94 e7 03 	jmp	0x7ce	; 0x7ce <__bad_interrupt>
      2c:	0c 94 e7 03 	jmp	0x7ce	; 0x7ce <__bad_interrupt>
      30:	0c 94 e7 03 	jmp	0x7ce	; 0x7ce <__bad_interrupt>
      34:	0c 94 e7 03 	jmp	0x7ce	; 0x7ce <__bad_interrupt>
      38:	0c 94 e7 03 	jmp	0x7ce	; 0x7ce <__bad_interrupt>
      3c:	0c 94 e7 03 	jmp	0x7ce	; 0x7ce <__bad_interrupt>
      40:	0c 94 e7 03 	jmp	0x7ce	; 0x7ce <__bad_interrupt>
      44:	0c 94 e7 03 	jmp	0x7ce	; 0x7ce <__bad_interrupt>
      48:	0c 94 e7 03 	jmp	0x7ce	; 0x7ce <__bad_interrupt>
      4c:	0c 94 e7 03 	jmp	0x7ce	; 0x7ce <__bad_interrupt>
      50:	0c 94 e7 03 	jmp	0x7ce	; 0x7ce <__bad_interrupt>
      54:	0c 94 e7 03 	jmp	0x7ce	; 0x7ce <__bad_interrupt>
      58:	0c 94 e7 03 	jmp	0x7ce	; 0x7ce <__bad_interrupt>
      5c:	0c 94 e7 03 	jmp	0x7ce	; 0x7ce <__bad_interrupt>
      60:	0c 94 e7 03 	jmp	0x7ce	; 0x7ce <__bad_interrupt>
      64:	0c 94 e7 03 	jmp	0x7ce	; 0x7ce <__bad_interrupt>
      68:	91 17       	cp	r25, r17
      6a:	b9 17       	cp	r27, r25
      6c:	e3 17       	cp	r30, r19
      6e:	0e 18       	sub	r0, r14
      70:	38 18       	sub	r3, r8
      72:	61 18       	sub	r6, r1
      74:	89 18       	sub	r8, r9
      76:	b2 18       	sub	r11, r2
      78:	2a 19       	sub	r18, r10
      7a:	55 19       	sub	r21, r5
      7c:	1c 1e       	adc	r1, r28
      7e:	27 1e       	adc	r2, r23
      80:	35 1e       	adc	r3, r21
      82:	3b 1e       	adc	r3, r27
      84:	42 1e       	adc	r4, r18
      86:	49 1e       	adc	r4, r25
      88:	57 1e       	adc	r5, r23
      8a:	e6 1e       	adc	r14, r22
      8c:	ed 1e       	adc	r14, r29
      8e:	f4 1e       	adc	r15, r20
      90:	fb 1e       	adc	r15, r27
      92:	02 1f       	adc	r16, r18
      94:	09 1f       	adc	r16, r25
      96:	10 1f       	adc	r17, r16
      98:	17 1f       	adc	r17, r23
      9a:	08 4a       	sbci	r16, 0xA8	; 168
      9c:	d7 3b       	cpi	r29, 0xB7	; 183
      9e:	3b ce       	rjmp	.-906    	; 0xfffffd16 <__eeprom_end+0xff7efd16>
      a0:	01 6e       	ori	r16, 0xE1	; 225
      a2:	84 bc       	out	0x24, r8	; 36
      a4:	bf fd       	.word	0xfdbf	; ????
      a6:	c1 2f       	mov	r28, r17
      a8:	3d 6c       	ori	r19, 0xCD	; 205
      aa:	74 31       	cpi	r23, 0x14	; 20
      ac:	9a bd       	out	0x2a, r25	; 42
      ae:	56 83       	std	Z+6, r21	; 0x06
      b0:	3d da       	rcall	.-2950   	; 0xfffff52c <__eeprom_end+0xff7ef52c>
      b2:	3d 00       	.word	0x003d	; ????
      b4:	c7 7f       	andi	r28, 0xF7	; 247
      b6:	11 be       	out	0x31, r1	; 49
      b8:	d9 e4       	ldi	r29, 0x49	; 73
      ba:	bb 4c       	sbci	r27, 0xCB	; 203
      bc:	3e 91       	ld	r19, -X
      be:	6b aa       	std	Y+51, r6	; 0x33
      c0:	aa be       	out	0x3a, r10	; 58
      c2:	00 00       	nop
      c4:	00 80       	ld	r0, Z
      c6:	3f 05       	cpc	r19, r15
      c8:	a8 4c       	sbci	r26, 0xC8	; 200
      ca:	cd b2       	in	r12, 0x1d	; 29
      cc:	d4 4e       	sbci	r29, 0xE4	; 228
      ce:	b9 38       	cpi	r27, 0x89	; 137
      d0:	36 a9       	ldd	r19, Z+54	; 0x36
      d2:	02 0c       	add	r0, r2
      d4:	50 b9       	out	0x00, r21	; 0
      d6:	91 86       	std	Z+9, r9	; 0x09
      d8:	88 08       	sbc	r8, r8
      da:	3c a6       	std	Y+44, r3	; 0x2c
      dc:	aa aa       	std	Y+50, r10	; 0x32
      de:	2a be       	out	0x3a, r2	; 58
      e0:	00 00       	nop
      e2:	00 80       	ld	r0, Z
      e4:	3f 08       	sbc	r3, r15
      e6:	00 00       	nop
      e8:	00 be       	out	0x30, r0	; 48
      ea:	92 24       	eor	r9, r2
      ec:	49 12       	cpse	r4, r25
      ee:	3e ab       	std	Y+54, r19	; 0x36
      f0:	aa aa       	std	Y+50, r10	; 0x32
      f2:	2a be       	out	0x3a, r2	; 58
      f4:	cd cc       	rjmp	.-1638   	; 0xfffffa90 <__eeprom_end+0xff7efa90>
      f6:	cc 4c       	sbci	r28, 0xCC	; 204
      f8:	3e 00       	.word	0x003e	; ????
      fa:	00 00       	nop
      fc:	80 be       	out	0x30, r8	; 48
      fe:	ab aa       	std	Y+51, r10	; 0x33
     100:	aa aa       	std	Y+50, r10	; 0x32
     102:	3e 00       	.word	0x003e	; ????
     104:	00 00       	nop
     106:	00 bf       	out	0x30, r16	; 48
     108:	00 00       	nop
     10a:	00 80       	ld	r0, Z
     10c:	3f 00       	.word	0x003f	; ????
     10e:	00 00       	nop
     110:	00 00       	nop
     112:	08 41       	sbci	r16, 0x18	; 24
     114:	78 d3       	rcall	.+1776   	; 0x806 <_ZN7Display15ssd1306_commandEh+0x16>
     116:	bb 43       	sbci	r27, 0x3B	; 59
     118:	87 d1       	rcall	.+782    	; 0x428 <_ZL11digits16x16+0xc6>
     11a:	13 3d       	cpi	r17, 0xD3	; 211
     11c:	19 0e       	add	r1, r25
     11e:	3c c3       	rjmp	.+1656   	; 0x798 <__do_copy_data+0xe>
     120:	bd 42       	sbci	r27, 0x2D	; 45
     122:	82 ad       	ldd	r24, Z+58	; 0x3a
     124:	2b 3e       	cpi	r18, 0xEB	; 235
     126:	68 ec       	ldi	r22, 0xC8	; 200
     128:	82 76       	andi	r24, 0x62	; 98
     12a:	be d9       	rcall	.-3204   	; 0xfffff4a8 <__eeprom_end+0xff7ef4a8>
     12c:	8f e1       	ldi	r24, 0x1F	; 31
     12e:	a9 3e       	cpi	r26, 0xE9	; 233
     130:	4c 80       	ldd	r4, Y+4	; 0x04
     132:	ef ff       	.word	0xffef	; ????
     134:	be 01       	movw	r22, r28
     136:	c4 ff       	sbrs	r28, 4
     138:	7f 3f       	cpi	r23, 0xFF	; 255
     13a:	00 00       	nop
     13c:	00 00       	nop
     13e:	00 06       	cpc	r0, r16
     140:	64 ec       	ldi	r22, 0xC4	; 196
     142:	1b 3c       	cpi	r17, 0xCB	; 203
     144:	04 bc       	out	0x24, r0	; 36
     146:	16 3e       	cpi	r17, 0xE6	; 230
     148:	3b e5       	ldi	r19, 0x5B	; 91
     14a:	b9 3c       	cpi	r27, 0xC9	; 201
     14c:	c9 3c       	cpi	r28, 0xC9	; 201
     14e:	37 c2       	rjmp	.+1134   	; 0x5be <_ZL7font5x8+0x11c>
     150:	9e 5a       	subi	r25, 0xAE	; 174
     152:	3d 66       	ori	r19, 0x6D	; 109
     154:	04 98       	cbi	0x00, 4	; 0
     156:	08 3e       	cpi	r16, 0xE8	; 232
     158:	ea 69       	ori	r30, 0x9A	; 154
     15a:	aa aa       	std	Y+50, r10	; 0x32
     15c:	3e 00       	.word	0x003e	; ????
     15e:	00 00       	nop
     160:	80 3f       	cpi	r24, 0xF0	; 240

00000162 <__trampolines_end>:
	...
     1aa:	00 00       	nop
     1ac:	20 60       	ori	r18, 0x00	; 0
     1ae:	60 e0       	ldi	r22, 0x00	; 0
     1b0:	c0 c0       	rjmp	.+384    	; 0x332 <__trampolines_end+0x1d0>
     1b2:	80 80       	ld	r8, Z
     1b4:	00 00       	nop
     1b6:	00 00       	nop
     1b8:	00 80       	ld	r0, Z
     1ba:	80 c0       	rjmp	.+256    	; 0x2bc <__trampolines_end+0x15a>
     1bc:	c0 e0       	ldi	r28, 0x00	; 0
     1be:	e0 e0       	ldi	r30, 0x00	; 0
     1c0:	e0 60       	ori	r30, 0x00	; 0
     1c2:	40 80       	ld	r4, Z
     1c4:	80 40       	sbci	r24, 0x00	; 0
     1c6:	40 40       	sbci	r20, 0x00	; 0
     1c8:	20 e0       	ldi	r18, 0x00	; 0
     1ca:	e0 c0       	rjmp	.+448    	; 0x38c <_ZL11digits16x16+0x2a>
	...
     1f0:	01 03       	mulsu	r16, r17
     1f2:	07 ff       	sbrs	r16, 7
     1f4:	1f 07       	cpc	r17, r31
     1f6:	07 03       	mulsu	r16, r23
     1f8:	03 04       	cpc	r0, r3
     1fa:	04 07       	cpc	r16, r20
     1fc:	03 60       	ori	r16, 0x03	; 3
     1fe:	60 00       	.word	0x0060	; ????
     200:	02 62       	ori	r16, 0x22	; 34
     202:	9c 00       	.word	0x009c	; ????
     204:	f8 fc       	.word	0xfcf8	; ????
     206:	fc fc       	.word	0xfcfc	; ????
     208:	fe fe       	.word	0xfefe	; ????
     20a:	fe ff       	.word	0xfffe	; ????
     20c:	ff ff       	.word	0xffff	; ????
     20e:	ff fe       	.word	0xfeff	; ????
     210:	fe fe       	.word	0xfefe	; ????
     212:	fc fc       	.word	0xfcfc	; ????
     214:	f8 f8       	.word	0xf8f8	; ????
     216:	f8 f8       	.word	0xf8f8	; ????
	...
     230:	00 00       	nop
     232:	c0 ff       	sbrs	r28, 0
     234:	80 00       	.word	0x0080	; ????
     236:	00 00       	nop
     238:	38 64       	ori	r19, 0x48	; 72
     23a:	64 7c       	andi	r22, 0xC4	; 196
     23c:	38 80       	ld	r3, Y
     23e:	80 80       	ld	r8, Z
     240:	84 04       	cpc	r8, r4
     242:	03 00       	.word	0x0003	; ????
     244:	87 bf       	out	0x37, r24	; 55
     246:	bf ff       	.word	0xffbf	; ????
     248:	ff ff       	.word	0xffff	; ????
     24a:	ff ff       	.word	0xffff	; ????
     24c:	ff ff       	.word	0xffff	; ????
     24e:	ff ff       	.word	0xffff	; ????
     250:	ff 7f       	andi	r31, 0xFF	; 255
     252:	7f ff       	.word	0xff7f	; ????
     254:	9f c1       	rjmp	.+830    	; 0x594 <_ZL7font5x8+0xf2>
     256:	c1 c0       	rjmp	.+386    	; 0x3da <_ZL11digits16x16+0x78>
	...
     26c:	00 80       	ld	r0, Z
     26e:	80 e0       	ldi	r24, 0x00	; 0
     270:	fc 7f       	andi	r31, 0xFC	; 252
     272:	3f 1f       	adc	r19, r31
     274:	9f 06       	cpc	r9, r31
     276:	06 1c       	adc	r0, r6
     278:	18 38       	cpi	r17, 0x88	; 136
     27a:	20 60       	ori	r18, 0x00	; 0
     27c:	47 df       	rcall	.-370    	; 0x10c <__SREG__+0xcd>
     27e:	df 9f       	mul	r29, r31
     280:	9f c7       	rjmp	.+3902   	; 0x11c0 <_ZN7Display6analogEhhhh+0x252>
     282:	c0 e0       	ldi	r28, 0x00	; 0
     284:	e0 f8       	bld	r14, 0
     286:	f8 fc       	.word	0xfcf8	; ????
     288:	f8 83       	st	Y, r31
     28a:	c3 81       	ldd	r28, Z+3	; 0x03
     28c:	00 03       	mulsu	r16, r16
     28e:	03 01       	movw	r0, r6
     290:	00 00       	nop
     292:	80 c1       	rjmp	.+768    	; 0x594 <_ZL7font5x8+0xf2>
     294:	7f 1f       	adc	r23, r31
     296:	1f 07       	cpc	r17, r31
	...
     2ac:	86 c3       	rjmp	.+1804   	; 0x9ba <_ZN7Display9drawPixelEhhh+0xe>
     2ae:	c3 e1       	ldi	r28, 0x13	; 19
     2b0:	f8 fc       	.word	0xfcf8	; ????
     2b2:	fe 7f       	andi	r31, 0xFE	; 254
     2b4:	ff ff       	.word	0xffff	; ????
     2b6:	ff fe       	.word	0xfeff	; ????
     2b8:	ff ff       	.word	0xffff	; ????
     2ba:	fc f8       	.word	0xf8fc	; ????
     2bc:	e0 c0       	rjmp	.+448    	; 0x47e <_ZL11digits16x16+0x11c>
     2be:	c0 80       	ld	r12, Z
     2c0:	81 c1       	rjmp	.+770    	; 0x5c4 <_ZL7font5x8+0x122>
     2c2:	e3 e3       	ldi	r30, 0x33	; 51
     2c4:	e3 e7       	ldi	r30, 0x73	; 115
     2c6:	e7 67       	ori	r30, 0x77	; 119
     2c8:	3f 3f       	cpi	r19, 0xFF	; 255
     2ca:	1f 07       	cpc	r17, r31
     2cc:	04 04       	cpc	r0, r4
     2ce:	04 06       	cpc	r0, r20
     2d0:	02 03       	mulsu	r16, r18
     2d2:	01 00       	.word	0x0001	; ????
	...
     2e8:	00 00       	nop
     2ea:	02 03       	mulsu	r16, r18
     2ec:	03 03       	mulsu	r16, r19
     2ee:	03 03       	mulsu	r16, r19
     2f0:	03 01       	movw	r0, r6
     2f2:	00 00       	nop
     2f4:	00 01       	movw	r0, r0
     2f6:	01 03       	mulsu	r16, r17
     2f8:	07 03       	mulsu	r16, r23
     2fa:	01 00       	.word	0x0001	; ????
     2fc:	01 03       	mulsu	r16, r17
     2fe:	03 03       	mulsu	r16, r19
     300:	03 01       	movw	r0, r6
	...

00000362 <_ZL11digits16x16>:
     362:	00 e0 f8 fc fe 1e 07 07 07 07 1e fe fc f8 f0 00     ................
     372:	00 07 0f 3f 3f 7c 70 70 70 70 7c 3f 1f 1f 07 00     ...??|pppp|?....
     382:	00 00 00 06 07 07 ff ff ff ff 00 00 00 00 00 00     ................
     392:	00 00 00 00 00 00 7f 7f 7f 7f 00 00 00 00 00 00     ................
     3a2:	00 38 3c 3e 3e 0f 07 07 07 cf ff fe fe 38 00 00     .8<>>........8..
     3b2:	00 40 40 60 70 78 7c 7e 7f 77 73 71 70 70 00 00     .@@`px|~.wsqpp..
     3c2:	00 18 1c 1e 1e 0f c7 c7 e7 ff fe be 9c 00 00 00     ................
     3d2:	00 0c 1c 3c 3c 78 70 70 70 79 7f 3f 1f 0f 00 00     ...<<xpppy.?....
     3e2:	00 00 80 c0 e0 70 38 1c 1e ff ff ff ff 00 00 00     .....p8.........
     3f2:	06 07 07 07 06 06 06 06 06 7f 7f 7f 7f 06 06 00     ................
     402:	00 00 00 00 f0 ff ff ff e7 e7 e7 e7 c7 87 00 00     ................
     412:	00 00 38 78 71 70 70 70 70 70 39 3f 3f 1f 0f 00     ..8xqppppp9??...
     422:	00 80 e0 f0 f8 fc 7f 7f 6f 67 e1 e1 c0 80 00 00     ........og......
     432:	00 0f 1f 3f 3f 78 70 70 70 70 78 3f 3f 1f 0f 00     ...??xppppx??...
     442:	00 07 07 07 07 07 c7 e7 f7 ff 7f 3f 1f 07 03 01     ...........?....
     452:	00 20 38 7c 7e 3f 0f 07 03 00 00 00 00 00 00 00     . 8|~?..........
     462:	00 00 00 1c be fe ff e7 c3 c3 e7 ff fe be 1c 00     ................
     472:	00 00 0e 3f 3f 7f 71 60 60 60 71 7f 3f 3f 0f 00     ...??.q```q.??..
     482:	00 78 fc fe fe 8f 07 07 07 07 8f fe fe fc f8 00     .x..............
     492:	00 00 00 01 43 43 73 7b 7f 7f 1f 0f 07 03 00 00     ....CCs{........

000004a2 <_ZL7font5x8>:
     4a2:	00 00 5f 00 00 00 07 00 07 00 14 7f 14 7f 14 24     .._............$
     4b2:	2a 7f 2a 12 23 13 08 64 62 36 49 55 22 50 00 05     *.*.#..db6IU"P..
     4c2:	03 00 00 00 1c 22 41 00 00 41 22 1c 00 14 08 3e     ....."A..A"....>
     4d2:	08 14 08 08 3e 08 08 00 50 30 00 00 08 08 08 08     ....>...P0......
     4e2:	08 00 60 60 00 00 20 10 08 04 02 3e 51 49 45 3e     ..``.. ....>QIE>
     4f2:	00 42 7f 40 00 42 61 51 49 46 21 41 45 4b 31 18     .B.@.BaQIF!AEK1.
     502:	14 12 7f 10 27 45 45 45 39 3c 4a 49 49 30 01 71     ....'EEE9<JII0.q
     512:	09 05 03 36 49 49 49 36 06 49 49 29 1e 00 36 36     ...6III6.II)..66
     522:	00 00 00 56 36 00 00 08 14 22 41 00 14 14 14 14     ...V6...."A.....
     532:	14 00 41 22 14 08 02 01 51 09 06 32 49 79 41 3e     ..A"....Q..2IyA>
     542:	7e 11 11 11 7e 7f 49 49 49 36 3e 41 41 41 22 7f     ~...~.III6>AAA".
     552:	41 41 22 1c 7f 49 49 49 41 7f 09 09 09 01 3e 41     AA"..IIIA.....>A
     562:	49 49 7a 7f 08 08 08 7f 00 41 7f 41 00 20 40 41     IIz......A.A. @A
     572:	3f 01 7f 08 14 22 41 7f 40 40 40 40 7f 02 0c 02     ?...."A.@@@@....
     582:	7f 7f 04 08 10 7f 3e 41 41 41 3e 7f 09 09 09 06     ......>AAA>.....
     592:	3e 41 51 21 5e 7f 09 19 29 46 46 49 49 49 31 01     >AQ!^...)FFIII1.
     5a2:	01 7f 01 01 3f 40 40 40 3f 1f 20 40 20 1f 3f 40     ....?@@@?. @ .?@
     5b2:	38 40 3f 63 14 08 14 63 07 08 70 08 07 61 51 49     8@?c...c..p..aQI
     5c2:	45 43 00 7f 41 41 00 02 04 08 10 20 00 41 41 7f     EC..AA..... .AA.
     5d2:	00 04 02 01 02 04 40 40 40 40 40 00 01 02 04 00     ......@@@@@.....
     5e2:	20 54 54 54 78 7f 48 44 44 38 38 44 44 44 20 38      TTTx.HDD88DDD 8
     5f2:	44 44 48 7f 38 54 54 54 18 08 7e 09 01 02 0c 52     DDH.8TTT..~....R
     602:	52 52 3e 7f 08 04 04 78 00 44 7d 40 00 20 40 44     RR>....x.D}@. @D
     612:	3d 00 7f 10 28 44 00 00 41 7f 40 00 7c 04 18 04     =...(D..A.@.|...
     622:	78 7c 08 04 04 78 38 44 44 44 38 7c 14 14 14 08     x|...x8DDD8|....
     632:	08 14 14 18 7c 7c 08 04 04 08 48 54 54 54 20 04     ....||....HTTT .
     642:	3f 44 40 20 3c 40 40 20 7c 1c 20 40 20 1c 3c 40     ?D@ <@@ |. @ .<@
     652:	30 40 3c 44 28 10 28 44 0c 50 50 50 3c 44 64 54     0@<D(.(D.PPP<DdT
     662:	4c 44 00 08 36 41 00 00 00 7f 00 00 00 41 36 08     LD..6A.......A6.
     672:	00 10 08 08 10 08                                   ......

00000678 <__c.2161>:
     678:	6e 61 6e 00                                         nan.

0000067c <__c.2159>:
     67c:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     68c:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     69c:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     6ac:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     6bc:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     6cc:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     6dc:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     6ec:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     6fc:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     70c:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     71c:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     72c:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     73c:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     74c:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     75c:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     76c:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

0000077a <__ctors_start>:
     77a:	2c 21       	and	r18, r12

0000077c <__ctors_end>:
     77c:	55 21       	and	r21, r5

0000077e <__dtors_end>:
     77e:	11 24       	eor	r1, r1
     780:	1f be       	out	0x3f, r1	; 63
     782:	cf ef       	ldi	r28, 0xFF	; 255
     784:	d8 e0       	ldi	r29, 0x08	; 8
     786:	de bf       	out	0x3e, r29	; 62
     788:	cd bf       	out	0x3d, r28	; 61

0000078a <__do_copy_data>:
     78a:	13 e0       	ldi	r17, 0x03	; 3
     78c:	a0 e0       	ldi	r26, 0x00	; 0
     78e:	b1 e0       	ldi	r27, 0x01	; 1
     790:	ee ec       	ldi	r30, 0xCE	; 206
     792:	f1 e6       	ldi	r31, 0x61	; 97
     794:	02 c0       	rjmp	.+4      	; 0x79a <__do_copy_data+0x10>
     796:	05 90       	lpm	r0, Z+
     798:	0d 92       	st	X+, r0
     79a:	a8 31       	cpi	r26, 0x18	; 24
     79c:	b1 07       	cpc	r27, r17
     79e:	d9 f7       	brne	.-10     	; 0x796 <__do_copy_data+0xc>

000007a0 <__do_clear_bss>:
     7a0:	27 e0       	ldi	r18, 0x07	; 7
     7a2:	a8 e1       	ldi	r26, 0x18	; 24
     7a4:	b3 e0       	ldi	r27, 0x03	; 3
     7a6:	01 c0       	rjmp	.+2      	; 0x7aa <.do_clear_bss_start>

000007a8 <.do_clear_bss_loop>:
     7a8:	1d 92       	st	X+, r1

000007aa <.do_clear_bss_start>:
     7aa:	ad 3a       	cpi	r26, 0xAD	; 173
     7ac:	b2 07       	cpc	r27, r18
     7ae:	e1 f7       	brne	.-8      	; 0x7a8 <.do_clear_bss_loop>

000007b0 <__do_global_ctors>:
     7b0:	17 e0       	ldi	r17, 0x07	; 7
     7b2:	cc e7       	ldi	r28, 0x7C	; 124
     7b4:	d7 e0       	ldi	r29, 0x07	; 7
     7b6:	04 c0       	rjmp	.+8      	; 0x7c0 <__do_global_ctors+0x10>
     7b8:	22 97       	sbiw	r28, 0x02	; 2
     7ba:	fe 01       	movw	r30, r28
     7bc:	0e 94 ff 2e 	call	0x5dfe	; 0x5dfe <__tablejump__>
     7c0:	ca 37       	cpi	r28, 0x7A	; 122
     7c2:	d1 07       	cpc	r29, r17
     7c4:	c9 f7       	brne	.-14     	; 0x7b8 <__do_global_ctors+0x8>
     7c6:	0e 94 1f 21 	call	0x423e	; 0x423e <main>
     7ca:	0c 94 da 30 	jmp	0x61b4	; 0x61b4 <__do_global_dtors>

000007ce <__bad_interrupt>:
     7ce:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000007d2 <_ZN7DisplayD1Ev>:
	//}
	InitializeDisplay();
} //Display

// default destructor
Display::~Display()
     7d2:	9c 5f       	subi	r25, 0xFC	; 252
     7d4:	0e 94 7e 21 	call	0x42fc	; 0x42fc <_ZN3I2CD1Ev>
     7d8:	08 95       	ret

000007da <_ZN7Display10clearFrameEv>:
{
} //~Display

void Display::clearFrame(){
     7da:	fc 01       	movw	r30, r24
	for(uint16_t i=0;i<1024;i++){
     7dc:	20 e0       	ldi	r18, 0x00	; 0
     7de:	30 e0       	ldi	r19, 0x00	; 0
		Displayframe[i]=0;
     7e0:	11 92       	st	Z+, r1
Display::~Display()
{
} //~Display

void Display::clearFrame(){
	for(uint16_t i=0;i<1024;i++){
     7e2:	2f 5f       	subi	r18, 0xFF	; 255
     7e4:	3f 4f       	sbci	r19, 0xFF	; 255
     7e6:	21 15       	cp	r18, r1
     7e8:	84 e0       	ldi	r24, 0x04	; 4
     7ea:	38 07       	cpc	r19, r24
     7ec:	c9 f7       	brne	.-14     	; 0x7e0 <_ZN7Display10clearFrameEv+0x6>
		Displayframe[i]=0;
	}
}
     7ee:	08 95       	ret

000007f0 <_ZN7Display15ssd1306_commandEh>:

void Display::ssd1306_command(uint8_t c){
     7f0:	1f 93       	push	r17
     7f2:	cf 93       	push	r28
     7f4:	df 93       	push	r29
     7f6:	16 2f       	mov	r17, r22
	i2c.twi_start();
     7f8:	ec 01       	movw	r28, r24
     7fa:	dc 5f       	subi	r29, 0xFC	; 252
     7fc:	ce 01       	movw	r24, r28
     7fe:	0e 94 7f 21 	call	0x42fe	; 0x42fe <_ZN3I2C9twi_startEv>
	i2c.twi_write(OLEDADRESSE);
     802:	68 e7       	ldi	r22, 0x78	; 120
     804:	ce 01       	movw	r24, r28
     806:	0e 94 87 21 	call	0x430e	; 0x430e <_ZN3I2C9twi_writeEh>
	i2c.twi_write(OLEDBEFEHL);
     80a:	60 e0       	ldi	r22, 0x00	; 0
     80c:	ce 01       	movw	r24, r28
     80e:	0e 94 87 21 	call	0x430e	; 0x430e <_ZN3I2C9twi_writeEh>
	i2c.twi_write(c);
     812:	61 2f       	mov	r22, r17
     814:	ce 01       	movw	r24, r28
     816:	0e 94 87 21 	call	0x430e	; 0x430e <_ZN3I2C9twi_writeEh>
	i2c.twi_stop();
     81a:	ce 01       	movw	r24, r28
     81c:	0e 94 83 21 	call	0x4306	; 0x4306 <_ZN3I2C8twi_stopEv>
}
     820:	df 91       	pop	r29
     822:	cf 91       	pop	r28
     824:	1f 91       	pop	r17
     826:	08 95       	ret

00000828 <_ZN7Display17InitializeDisplayEv>:

void Display::InitializeDisplay()
{
     828:	cf 93       	push	r28
     82a:	df 93       	push	r29
     82c:	ec 01       	movw	r28, r24
	// Init sequence for 128x64 OLED module
	ssd1306_command(SSD1306_DISPLAYOFF);                    // 0xAE
     82e:	6e ea       	ldi	r22, 0xAE	; 174
     830:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <_ZN7Display15ssd1306_commandEh>

	ssd1306_command(SSD1306_SETDISPLAYCLOCKDIV);            // 0xD5
     834:	65 ed       	ldi	r22, 0xD5	; 213
     836:	ce 01       	movw	r24, r28
     838:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <_ZN7Display15ssd1306_commandEh>
	ssd1306_command(0x80);                 // the suggested ratio 0x80
     83c:	60 e8       	ldi	r22, 0x80	; 128
     83e:	ce 01       	movw	r24, r28
     840:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <_ZN7Display15ssd1306_commandEh>

	ssd1306_command(SSD1306_SETMULTIPLEX);                  // 0xA8
     844:	68 ea       	ldi	r22, 0xA8	; 168
     846:	ce 01       	movw	r24, r28
     848:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <_ZN7Display15ssd1306_commandEh>
	ssd1306_command(0x3F);
     84c:	6f e3       	ldi	r22, 0x3F	; 63
     84e:	ce 01       	movw	r24, r28
     850:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <_ZN7Display15ssd1306_commandEh>

	ssd1306_command(SSD1306_SETDISPLAYOFFSET);              // 0xD3
     854:	63 ed       	ldi	r22, 0xD3	; 211
     856:	ce 01       	movw	r24, r28
     858:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <_ZN7Display15ssd1306_commandEh>
	ssd1306_command(0x0);                                   // no offset
     85c:	60 e0       	ldi	r22, 0x00	; 0
     85e:	ce 01       	movw	r24, r28
     860:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <_ZN7Display15ssd1306_commandEh>

	ssd1306_command(SSD1306_SETSTARTLINE);// | 0x0);        // line #0
     864:	60 e4       	ldi	r22, 0x40	; 64
     866:	ce 01       	movw	r24, r28
     868:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <_ZN7Display15ssd1306_commandEh>

	ssd1306_command(SSD1306_CHARGEPUMP);                    // 0x8D
     86c:	6d e8       	ldi	r22, 0x8D	; 141
     86e:	ce 01       	movw	r24, r28
     870:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <_ZN7Display15ssd1306_commandEh>
	ssd1306_command(0x14);  // using internal VCC
     874:	64 e1       	ldi	r22, 0x14	; 20
     876:	ce 01       	movw	r24, r28
     878:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <_ZN7Display15ssd1306_commandEh>

	ssd1306_command(SSD1306_MEMORYMODE);                    // 0x20
     87c:	60 e2       	ldi	r22, 0x20	; 32
     87e:	ce 01       	movw	r24, r28
     880:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <_ZN7Display15ssd1306_commandEh>
	ssd1306_command(0x00);          // 0x00 horizontal addressing
     884:	60 e0       	ldi	r22, 0x00	; 0
     886:	ce 01       	movw	r24, r28
     888:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <_ZN7Display15ssd1306_commandEh>

	ssd1306_command(SSD1306_SEGREMAP | 0x1); // rotate screen 180
     88c:	61 ea       	ldi	r22, 0xA1	; 161
     88e:	ce 01       	movw	r24, r28
     890:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <_ZN7Display15ssd1306_commandEh>

	ssd1306_command(SSD1306_COMSCANDEC); // rotate screen 180
     894:	68 ec       	ldi	r22, 0xC8	; 200
     896:	ce 01       	movw	r24, r28
     898:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <_ZN7Display15ssd1306_commandEh>

	ssd1306_command(SSD1306_SETCOMPINS);                    // 0xDA
     89c:	6a ed       	ldi	r22, 0xDA	; 218
     89e:	ce 01       	movw	r24, r28
     8a0:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <_ZN7Display15ssd1306_commandEh>
	ssd1306_command(0x12);
     8a4:	62 e1       	ldi	r22, 0x12	; 18
     8a6:	ce 01       	movw	r24, r28
     8a8:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <_ZN7Display15ssd1306_commandEh>

	ssd1306_command(SSD1306_SETCONTRAST);                   // 0x81
     8ac:	61 e8       	ldi	r22, 0x81	; 129
     8ae:	ce 01       	movw	r24, r28
     8b0:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <_ZN7Display15ssd1306_commandEh>
	ssd1306_command(0xCF);
     8b4:	6f ec       	ldi	r22, 0xCF	; 207
     8b6:	ce 01       	movw	r24, r28
     8b8:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <_ZN7Display15ssd1306_commandEh>

	ssd1306_command(SSD1306_SETPRECHARGE);                  // 0xd9
     8bc:	69 ed       	ldi	r22, 0xD9	; 217
     8be:	ce 01       	movw	r24, r28
     8c0:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <_ZN7Display15ssd1306_commandEh>
	ssd1306_command(0xF1);
     8c4:	61 ef       	ldi	r22, 0xF1	; 241
     8c6:	ce 01       	movw	r24, r28
     8c8:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <_ZN7Display15ssd1306_commandEh>

	ssd1306_command(SSD1306_SETVCOMDETECT);                 // 0xDB
     8cc:	6b ed       	ldi	r22, 0xDB	; 219
     8ce:	ce 01       	movw	r24, r28
     8d0:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <_ZN7Display15ssd1306_commandEh>
	ssd1306_command(0x40);
     8d4:	60 e4       	ldi	r22, 0x40	; 64
     8d6:	ce 01       	movw	r24, r28
     8d8:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <_ZN7Display15ssd1306_commandEh>

	ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
     8dc:	64 ea       	ldi	r22, 0xA4	; 164
     8de:	ce 01       	movw	r24, r28
     8e0:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <_ZN7Display15ssd1306_commandEh>

	ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
     8e4:	66 ea       	ldi	r22, 0xA6	; 166
     8e6:	ce 01       	movw	r24, r28
     8e8:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <_ZN7Display15ssd1306_commandEh>

	ssd1306_command(SSD1306_DISPLAYON);                     //switch on OLED
     8ec:	6f ea       	ldi	r22, 0xAF	; 175
     8ee:	ce 01       	movw	r24, r28
     8f0:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <_ZN7Display15ssd1306_commandEh>
}
     8f4:	df 91       	pop	r29
     8f6:	cf 91       	pop	r28
     8f8:	08 95       	ret

000008fa <_ZN7DisplayC1Ev>:


#include "Display.h"

// default constructor
Display::Display()
     8fa:	cf 93       	push	r28
     8fc:	df 93       	push	r29
     8fe:	ec 01       	movw	r28, r24
     900:	9c 5f       	subi	r25, 0xFC	; 252
     902:	0e 94 7a 21 	call	0x42f4	; 0x42f4 <_ZN3I2CC1Ev>
{
	//for (uint8_t i=0;i<1024;i++)
	//{
		//Displayframe[i]=0;
	//}
	InitializeDisplay();
     906:	ce 01       	movw	r24, r28
     908:	0e 94 14 04 	call	0x828	; 0x828 <_ZN7Display17InitializeDisplayEv>
} //Display
     90c:	df 91       	pop	r29
     90e:	cf 91       	pop	r28
     910:	08 95       	ret

00000912 <_ZN7Display6invertEh>:

	ssd1306_command(SSD1306_DISPLAYON);                     //switch on OLED
}

void Display::invert(uint8_t inverted) {
	if (inverted) {
     912:	66 23       	and	r22, r22
     914:	21 f0       	breq	.+8      	; 0x91e <_ZN7Display6invertEh+0xc>
		ssd1306_command(SSD1306_INVERTDISPLAY);
     916:	67 ea       	ldi	r22, 0xA7	; 167
     918:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <_ZN7Display15ssd1306_commandEh>
     91c:	08 95       	ret
	}
	else {
		ssd1306_command(SSD1306_NORMALDISPLAY);
     91e:	66 ea       	ldi	r22, 0xA6	; 166
     920:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <_ZN7Display15ssd1306_commandEh>
     924:	08 95       	ret

00000926 <_ZN7Display9sendFrameEv>:
	}
}

void Display::sendFrame(){
     926:	ef 92       	push	r14
     928:	ff 92       	push	r15
     92a:	0f 93       	push	r16
     92c:	1f 93       	push	r17
     92e:	cf 93       	push	r28
     930:	df 93       	push	r29
     932:	8c 01       	movw	r16, r24
	//Cursor an den Anfang setzen
	ssd1306_command(SSD1306_COLUMNADDR);
     934:	61 e2       	ldi	r22, 0x21	; 33
     936:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <_ZN7Display15ssd1306_commandEh>
	ssd1306_command(0x00);
     93a:	60 e0       	ldi	r22, 0x00	; 0
     93c:	c8 01       	movw	r24, r16
     93e:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <_ZN7Display15ssd1306_commandEh>
	ssd1306_command(0x7F);
     942:	6f e7       	ldi	r22, 0x7F	; 127
     944:	c8 01       	movw	r24, r16
     946:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <_ZN7Display15ssd1306_commandEh>

	ssd1306_command(SSD1306_PAGEADDR);
     94a:	62 e2       	ldi	r22, 0x22	; 34
     94c:	c8 01       	movw	r24, r16
     94e:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <_ZN7Display15ssd1306_commandEh>
	ssd1306_command(0x00);
     952:	60 e0       	ldi	r22, 0x00	; 0
     954:	c8 01       	movw	r24, r16
     956:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <_ZN7Display15ssd1306_commandEh>
	ssd1306_command(0x07);
     95a:	67 e0       	ldi	r22, 0x07	; 7
     95c:	c8 01       	movw	r24, r16
     95e:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <_ZN7Display15ssd1306_commandEh>

	i2c.twi_start();
     962:	78 01       	movw	r14, r16
     964:	8c ef       	ldi	r24, 0xFC	; 252
     966:	f8 1a       	sub	r15, r24
     968:	c7 01       	movw	r24, r14
     96a:	0e 94 7f 21 	call	0x42fe	; 0x42fe <_ZN3I2C9twi_startEv>
	i2c.twi_write(OLEDADRESSE);
     96e:	68 e7       	ldi	r22, 0x78	; 120
     970:	c7 01       	movw	r24, r14
     972:	0e 94 87 21 	call	0x430e	; 0x430e <_ZN3I2C9twi_writeEh>
	i2c.twi_write(OLEDDATA);
     976:	60 e4       	ldi	r22, 0x40	; 64
     978:	c7 01       	movw	r24, r14
     97a:	0e 94 87 21 	call	0x430e	; 0x430e <_ZN3I2C9twi_writeEh>
	
	for(uint16_t i=0; i<1024;i++){
     97e:	c0 e0       	ldi	r28, 0x00	; 0
     980:	d0 e0       	ldi	r29, 0x00	; 0
		i2c.twi_write(Displayframe[i]);
     982:	f8 01       	movw	r30, r16
     984:	61 91       	ld	r22, Z+
     986:	8f 01       	movw	r16, r30
     988:	c7 01       	movw	r24, r14
     98a:	0e 94 87 21 	call	0x430e	; 0x430e <_ZN3I2C9twi_writeEh>

	i2c.twi_start();
	i2c.twi_write(OLEDADRESSE);
	i2c.twi_write(OLEDDATA);
	
	for(uint16_t i=0; i<1024;i++){
     98e:	21 96       	adiw	r28, 0x01	; 1
     990:	c1 15       	cp	r28, r1
     992:	f4 e0       	ldi	r31, 0x04	; 4
     994:	df 07       	cpc	r29, r31
     996:	a9 f7       	brne	.-22     	; 0x982 <_ZN7Display9sendFrameEv+0x5c>
		i2c.twi_write(Displayframe[i]);
	}
	i2c.twi_stop();
     998:	c7 01       	movw	r24, r14
     99a:	0e 94 83 21 	call	0x4306	; 0x4306 <_ZN3I2C8twi_stopEv>
}
     99e:	df 91       	pop	r29
     9a0:	cf 91       	pop	r28
     9a2:	1f 91       	pop	r17
     9a4:	0f 91       	pop	r16
     9a6:	ff 90       	pop	r15
     9a8:	ef 90       	pop	r14
     9aa:	08 95       	ret

000009ac <_ZN7Display9drawPixelEhhh>:

void Display::drawPixel(uint8_t pos_x, uint8_t pos_y, uint8_t erase){
	if(!(pos_x >= SSD1306_WIDTH || pos_y >= SSD1306_HEIGHT)){
     9ac:	66 23       	and	r22, r22
     9ae:	bc f1       	brlt	.+110    	; 0xa1e <_ZN7Display9drawPixelEhhh+0x72>
     9b0:	40 34       	cpi	r20, 0x40	; 64
     9b2:	a8 f5       	brcc	.+106    	; 0xa1e <_ZN7Display9drawPixelEhhh+0x72>
		if(!erase){
     9b4:	21 11       	cpse	r18, r1
     9b6:	19 c0       	rjmp	.+50     	; 0x9ea <_ZN7Display9drawPixelEhhh+0x3e>
			Displayframe[pos_x+(pos_y/8)*SSD1306_WIDTH] |= (1 << (pos_y&7));
     9b8:	e4 2f       	mov	r30, r20
     9ba:	e6 95       	lsr	r30
     9bc:	e6 95       	lsr	r30
     9be:	e6 95       	lsr	r30
     9c0:	20 e8       	ldi	r18, 0x80	; 128
     9c2:	e2 9f       	mul	r30, r18
     9c4:	f0 01       	movw	r30, r0
     9c6:	11 24       	eor	r1, r1
     9c8:	e6 0f       	add	r30, r22
     9ca:	f1 1d       	adc	r31, r1
     9cc:	e8 0f       	add	r30, r24
     9ce:	f9 1f       	adc	r31, r25
     9d0:	47 70       	andi	r20, 0x07	; 7
     9d2:	21 e0       	ldi	r18, 0x01	; 1
     9d4:	30 e0       	ldi	r19, 0x00	; 0
     9d6:	c9 01       	movw	r24, r18
     9d8:	02 c0       	rjmp	.+4      	; 0x9de <_ZN7Display9drawPixelEhhh+0x32>
     9da:	88 0f       	add	r24, r24
     9dc:	99 1f       	adc	r25, r25
     9de:	4a 95       	dec	r20
     9e0:	e2 f7       	brpl	.-8      	; 0x9da <_ZN7Display9drawPixelEhhh+0x2e>
     9e2:	90 81       	ld	r25, Z
     9e4:	89 2b       	or	r24, r25
     9e6:	80 83       	st	Z, r24
     9e8:	08 95       	ret
		}
		else {
			Displayframe[pos_x+(pos_y/8)*SSD1306_WIDTH] &= ~(1 << (pos_y&7));
     9ea:	e4 2f       	mov	r30, r20
     9ec:	e6 95       	lsr	r30
     9ee:	e6 95       	lsr	r30
     9f0:	e6 95       	lsr	r30
     9f2:	30 e8       	ldi	r19, 0x80	; 128
     9f4:	e3 9f       	mul	r30, r19
     9f6:	f0 01       	movw	r30, r0
     9f8:	11 24       	eor	r1, r1
     9fa:	e6 0f       	add	r30, r22
     9fc:	f1 1d       	adc	r31, r1
     9fe:	e8 0f       	add	r30, r24
     a00:	f9 1f       	adc	r31, r25
     a02:	47 70       	andi	r20, 0x07	; 7
     a04:	81 e0       	ldi	r24, 0x01	; 1
     a06:	90 e0       	ldi	r25, 0x00	; 0
     a08:	9c 01       	movw	r18, r24
     a0a:	02 c0       	rjmp	.+4      	; 0xa10 <_ZN7Display9drawPixelEhhh+0x64>
     a0c:	22 0f       	add	r18, r18
     a0e:	33 1f       	adc	r19, r19
     a10:	4a 95       	dec	r20
     a12:	e2 f7       	brpl	.-8      	; 0xa0c <_ZN7Display9drawPixelEhhh+0x60>
     a14:	a9 01       	movw	r20, r18
     a16:	40 95       	com	r20
     a18:	80 81       	ld	r24, Z
     a1a:	48 23       	and	r20, r24
     a1c:	40 83       	st	Z, r20
     a1e:	08 95       	ret

00000a20 <_ZN7Display9draw_lineEhhhf>:
		}
	}
}

//eigene Zeichenfunktionen
void Display::draw_line(uint8_t x, uint8_t y, uint8_t length, float phi){
     a20:	2f 92       	push	r2
     a22:	3f 92       	push	r3
     a24:	4f 92       	push	r4
     a26:	5f 92       	push	r5
     a28:	6f 92       	push	r6
     a2a:	7f 92       	push	r7
     a2c:	8f 92       	push	r8
     a2e:	9f 92       	push	r9
     a30:	af 92       	push	r10
     a32:	bf 92       	push	r11
     a34:	cf 92       	push	r12
     a36:	df 92       	push	r13
     a38:	ef 92       	push	r14
     a3a:	ff 92       	push	r15
     a3c:	0f 93       	push	r16
     a3e:	1f 93       	push	r17
     a40:	cf 93       	push	r28
     a42:	df 93       	push	r29
     a44:	cd b7       	in	r28, 0x3d	; 61
     a46:	de b7       	in	r29, 0x3e	; 62
     a48:	2b 97       	sbiw	r28, 0x0b	; 11
     a4a:	0f b6       	in	r0, 0x3f	; 63
     a4c:	f8 94       	cli
     a4e:	de bf       	out	0x3e, r29	; 62
     a50:	0f be       	out	0x3f, r0	; 63
     a52:	cd bf       	out	0x3d, r28	; 61
     a54:	1c 01       	movw	r2, r24
     a56:	d6 2e       	mov	r13, r22
     a58:	c4 2e       	mov	r12, r20
     a5a:	29 83       	std	Y+1, r18	; 0x01
	//phi*=M_PI/180.0;
	uint8_t pos_x=0, pos_y=0;
	for (uint8_t i=0;i<length;i++)
     a5c:	22 23       	and	r18, r18
     a5e:	09 f4       	brne	.+2      	; 0xa62 <_ZN7Display9draw_lineEhhhf+0x42>
     a60:	69 c0       	rjmp	.+210    	; 0xb34 <_ZN7Display9draw_lineEhhhf+0x114>
	{
		pos_x=(uint8_t) (-i*cos(phi)+x);
     a62:	c8 01       	movw	r24, r16
     a64:	b7 01       	movw	r22, r14
     a66:	0e 94 db 28 	call	0x51b6	; 0x51b6 <cos>
     a6a:	2b 01       	movw	r4, r22
     a6c:	3c 01       	movw	r6, r24
		pos_y=(uint8_t) (i*sin(phi)+y);
     a6e:	c8 01       	movw	r24, r16
     a70:	b7 01       	movw	r22, r14
     a72:	0e 94 3a 2b 	call	0x5674	; 0x5674 <sin>
     a76:	4b 01       	movw	r8, r22
     a78:	5c 01       	movw	r10, r24
     a7a:	1b 86       	std	Y+11, r1	; 0x0b
     a7c:	1a 86       	std	Y+10, r1	; 0x0a
     a7e:	8c 2d       	mov	r24, r12
     a80:	90 e0       	ldi	r25, 0x00	; 0
     a82:	a0 e0       	ldi	r26, 0x00	; 0
     a84:	b0 e0       	ldi	r27, 0x00	; 0
     a86:	8a 83       	std	Y+2, r24	; 0x02
     a88:	9b 83       	std	Y+3, r25	; 0x03
     a8a:	ac 83       	std	Y+4, r26	; 0x04
     a8c:	bd 83       	std	Y+5, r27	; 0x05
void Display::draw_line(uint8_t x, uint8_t y, uint8_t length, float phi){
	//phi*=M_PI/180.0;
	uint8_t pos_x=0, pos_y=0;
	for (uint8_t i=0;i<length;i++)
	{
		pos_x=(uint8_t) (-i*cos(phi)+x);
     a8e:	8d 2d       	mov	r24, r13
     a90:	90 e0       	ldi	r25, 0x00	; 0
     a92:	a0 e0       	ldi	r26, 0x00	; 0
     a94:	b0 e0       	ldi	r27, 0x00	; 0
     a96:	8e 83       	std	Y+6, r24	; 0x06
     a98:	9f 83       	std	Y+7, r25	; 0x07
     a9a:	a8 87       	std	Y+8, r26	; 0x08
     a9c:	b9 87       	std	Y+9, r27	; 0x09
		pos_y=(uint8_t) (i*sin(phi)+y);
     a9e:	aa 85       	ldd	r26, Y+10	; 0x0a
     aa0:	bb 85       	ldd	r27, Y+11	; 0x0b
     aa2:	bd 01       	movw	r22, r26
     aa4:	88 27       	eor	r24, r24
     aa6:	77 fd       	sbrc	r23, 7
     aa8:	80 95       	com	r24
     aaa:	98 2f       	mov	r25, r24
     aac:	0e 94 79 29 	call	0x52f2	; 0x52f2 <__floatsisf>
     ab0:	a5 01       	movw	r20, r10
     ab2:	94 01       	movw	r18, r8
     ab4:	0e 94 d7 2a 	call	0x55ae	; 0x55ae <__mulsf3>
     ab8:	6b 01       	movw	r12, r22
     aba:	7c 01       	movw	r14, r24
     abc:	6a 81       	ldd	r22, Y+2	; 0x02
     abe:	7b 81       	ldd	r23, Y+3	; 0x03
     ac0:	8c 81       	ldd	r24, Y+4	; 0x04
     ac2:	9d 81       	ldd	r25, Y+5	; 0x05
     ac4:	0e 94 79 29 	call	0x52f2	; 0x52f2 <__floatsisf>
     ac8:	9b 01       	movw	r18, r22
     aca:	ac 01       	movw	r20, r24
     acc:	c7 01       	movw	r24, r14
     ace:	b6 01       	movw	r22, r12
     ad0:	0e 94 11 28 	call	0x5022	; 0x5022 <__addsf3>
     ad4:	0e 94 4b 29 	call	0x5296	; 0x5296 <__fixunssfsi>
     ad8:	16 2f       	mov	r17, r22
     ada:	6a 85       	ldd	r22, Y+10	; 0x0a
     adc:	7b 85       	ldd	r23, Y+11	; 0x0b
     ade:	71 95       	neg	r23
     ae0:	61 95       	neg	r22
     ae2:	71 09       	sbc	r23, r1
void Display::draw_line(uint8_t x, uint8_t y, uint8_t length, float phi){
	//phi*=M_PI/180.0;
	uint8_t pos_x=0, pos_y=0;
	for (uint8_t i=0;i<length;i++)
	{
		pos_x=(uint8_t) (-i*cos(phi)+x);
     ae4:	88 27       	eor	r24, r24
     ae6:	77 fd       	sbrc	r23, 7
     ae8:	80 95       	com	r24
     aea:	98 2f       	mov	r25, r24
     aec:	0e 94 79 29 	call	0x52f2	; 0x52f2 <__floatsisf>
     af0:	a3 01       	movw	r20, r6
     af2:	92 01       	movw	r18, r4
     af4:	0e 94 d7 2a 	call	0x55ae	; 0x55ae <__mulsf3>
     af8:	6b 01       	movw	r12, r22
     afa:	7c 01       	movw	r14, r24
     afc:	6e 81       	ldd	r22, Y+6	; 0x06
     afe:	7f 81       	ldd	r23, Y+7	; 0x07
     b00:	88 85       	ldd	r24, Y+8	; 0x08
     b02:	99 85       	ldd	r25, Y+9	; 0x09
     b04:	0e 94 79 29 	call	0x52f2	; 0x52f2 <__floatsisf>
     b08:	9b 01       	movw	r18, r22
     b0a:	ac 01       	movw	r20, r24
     b0c:	c7 01       	movw	r24, r14
     b0e:	b6 01       	movw	r22, r12
     b10:	0e 94 11 28 	call	0x5022	; 0x5022 <__addsf3>
     b14:	0e 94 4b 29 	call	0x5296	; 0x5296 <__fixunssfsi>
		pos_y=(uint8_t) (i*sin(phi)+y);
		drawPixel(pos_x,pos_y,0);
     b18:	20 e0       	ldi	r18, 0x00	; 0
     b1a:	41 2f       	mov	r20, r17
     b1c:	c1 01       	movw	r24, r2
     b1e:	0e 94 d6 04 	call	0x9ac	; 0x9ac <_ZN7Display9drawPixelEhhh>
     b22:	ea 85       	ldd	r30, Y+10	; 0x0a
     b24:	fb 85       	ldd	r31, Y+11	; 0x0b
     b26:	31 96       	adiw	r30, 0x01	; 1
     b28:	fb 87       	std	Y+11, r31	; 0x0b
     b2a:	ea 87       	std	Y+10, r30	; 0x0a

//eigene Zeichenfunktionen
void Display::draw_line(uint8_t x, uint8_t y, uint8_t length, float phi){
	//phi*=M_PI/180.0;
	uint8_t pos_x=0, pos_y=0;
	for (uint8_t i=0;i<length;i++)
     b2c:	f9 81       	ldd	r31, Y+1	; 0x01
     b2e:	ef 17       	cp	r30, r31
     b30:	08 f4       	brcc	.+2      	; 0xb34 <_ZN7Display9draw_lineEhhhf+0x114>
     b32:	b5 cf       	rjmp	.-150    	; 0xa9e <_ZN7Display9draw_lineEhhhf+0x7e>
	{
		pos_x=(uint8_t) (-i*cos(phi)+x);
		pos_y=(uint8_t) (i*sin(phi)+y);
		drawPixel(pos_x,pos_y,0);
	}
}
     b34:	2b 96       	adiw	r28, 0x0b	; 11
     b36:	0f b6       	in	r0, 0x3f	; 63
     b38:	f8 94       	cli
     b3a:	de bf       	out	0x3e, r29	; 62
     b3c:	0f be       	out	0x3f, r0	; 63
     b3e:	cd bf       	out	0x3d, r28	; 61
     b40:	df 91       	pop	r29
     b42:	cf 91       	pop	r28
     b44:	1f 91       	pop	r17
     b46:	0f 91       	pop	r16
     b48:	ff 90       	pop	r15
     b4a:	ef 90       	pop	r14
     b4c:	df 90       	pop	r13
     b4e:	cf 90       	pop	r12
     b50:	bf 90       	pop	r11
     b52:	af 90       	pop	r10
     b54:	9f 90       	pop	r9
     b56:	8f 90       	pop	r8
     b58:	7f 90       	pop	r7
     b5a:	6f 90       	pop	r6
     b5c:	5f 90       	pop	r5
     b5e:	4f 90       	pop	r4
     b60:	3f 90       	pop	r3
     b62:	2f 90       	pop	r2
     b64:	08 95       	ret

00000b66 <_ZN7Display13draw_triangleEhhhff>:

//using basecenterpoint as turningpoint for rotation
//upright triangle has rotationangle of 0
//turning clockwise considered in x transformation
//baseangle=70 is for 1/3 type
void Display::draw_triangle(uint8_t basecenter_x, uint8_t basecenter_y, uint8_t baselength, float baseangle, float rotationangle){
     b66:	2f 92       	push	r2
     b68:	3f 92       	push	r3
     b6a:	4f 92       	push	r4
     b6c:	5f 92       	push	r5
     b6e:	6f 92       	push	r6
     b70:	7f 92       	push	r7
     b72:	8f 92       	push	r8
     b74:	9f 92       	push	r9
     b76:	af 92       	push	r10
     b78:	bf 92       	push	r11
     b7a:	cf 92       	push	r12
     b7c:	df 92       	push	r13
     b7e:	ef 92       	push	r14
     b80:	ff 92       	push	r15
     b82:	0f 93       	push	r16
     b84:	1f 93       	push	r17
     b86:	cf 93       	push	r28
     b88:	df 93       	push	r29
     b8a:	cd b7       	in	r28, 0x3d	; 61
     b8c:	de b7       	in	r29, 0x3e	; 62
     b8e:	60 97       	sbiw	r28, 0x10	; 16
     b90:	0f b6       	in	r0, 0x3f	; 63
     b92:	f8 94       	cli
     b94:	de bf       	out	0x3e, r29	; 62
     b96:	0f be       	out	0x3f, r0	; 63
     b98:	cd bf       	out	0x3d, r28	; 61
     b9a:	1c 01       	movw	r2, r24
     b9c:	6f 87       	std	Y+15, r22	; 0x0f
     b9e:	4d 83       	std	Y+5, r20	; 0x05
     ba0:	29 83       	std	Y+1, r18	; 0x01
     ba2:	c6 01       	movw	r24, r12
     ba4:	b5 01       	movw	r22, r10
	//correcting rotationangle
	rotationangle*=M_PI/180.0;
     ba6:	25 e3       	ldi	r18, 0x35	; 53
     ba8:	3a ef       	ldi	r19, 0xFA	; 250
     baa:	4e e8       	ldi	r20, 0x8E	; 142
     bac:	5c e3       	ldi	r21, 0x3C	; 60
     bae:	0e 94 d7 2a 	call	0x55ae	; 0x55ae <__mulsf3>
     bb2:	4b 01       	movw	r8, r22
     bb4:	5c 01       	movw	r10, r24
	baseangle*=M_PI/180.0;
     bb6:	25 e3       	ldi	r18, 0x35	; 53
     bb8:	3a ef       	ldi	r19, 0xFA	; 250
     bba:	4e e8       	ldi	r20, 0x8E	; 142
     bbc:	5c e3       	ldi	r21, 0x3C	; 60
     bbe:	c8 01       	movw	r24, r16
     bc0:	b7 01       	movw	r22, r14
     bc2:	0e 94 d7 2a 	call	0x55ae	; 0x55ae <__mulsf3>
     bc6:	6e 83       	std	Y+6, r22	; 0x06
     bc8:	7f 83       	std	Y+7, r23	; 0x07
     bca:	88 87       	std	Y+8, r24	; 0x08
     bcc:	99 87       	std	Y+9, r25	; 0x09
	//draw baseline
	draw_line(basecenter_x,basecenter_y,baselength/2,rotationangle);
     bce:	79 80       	ldd	r7, Y+1	; 0x01
     bd0:	76 94       	lsr	r7
     bd2:	85 01       	movw	r16, r10
     bd4:	74 01       	movw	r14, r8
     bd6:	27 2d       	mov	r18, r7
     bd8:	4d 81       	ldd	r20, Y+5	; 0x05
     bda:	6f 85       	ldd	r22, Y+15	; 0x0f
     bdc:	c1 01       	movw	r24, r2
     bde:	0e 94 10 05 	call	0xa20	; 0xa20 <_ZN7Display9draw_lineEhhhf>
	draw_line(basecenter_x,basecenter_y,baselength/2,rotationangle-M_PI);
     be2:	2b ed       	ldi	r18, 0xDB	; 219
     be4:	3f e0       	ldi	r19, 0x0F	; 15
     be6:	49 e4       	ldi	r20, 0x49	; 73
     be8:	50 e4       	ldi	r21, 0x40	; 64
     bea:	c5 01       	movw	r24, r10
     bec:	b4 01       	movw	r22, r8
     bee:	0e 94 10 28 	call	0x5020	; 0x5020 <__subsf3>
     bf2:	7b 01       	movw	r14, r22
     bf4:	8c 01       	movw	r16, r24
     bf6:	27 2d       	mov	r18, r7
     bf8:	4d 81       	ldd	r20, Y+5	; 0x05
     bfa:	6f 85       	ldd	r22, Y+15	; 0x0f
     bfc:	c1 01       	movw	r24, r2
     bfe:	0e 94 10 05 	call	0xa20	; 0xa20 <_ZN7Display9draw_lineEhhhf>
	//draw midleline
	uint8_t middlelength=baselength/2*tan(baseangle);
     c02:	6e 81       	ldd	r22, Y+6	; 0x06
     c04:	7f 81       	ldd	r23, Y+7	; 0x07
     c06:	88 85       	ldd	r24, Y+8	; 0x08
     c08:	99 85       	ldd	r25, Y+9	; 0x09
     c0a:	0e 94 43 2b 	call	0x5686	; 0x5686 <tan>
     c0e:	6b 01       	movw	r12, r22
     c10:	7c 01       	movw	r14, r24
     c12:	67 2d       	mov	r22, r7
     c14:	70 e0       	ldi	r23, 0x00	; 0
     c16:	80 e0       	ldi	r24, 0x00	; 0
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	0e 94 79 29 	call	0x52f2	; 0x52f2 <__floatsisf>
     c1e:	a7 01       	movw	r20, r14
     c20:	96 01       	movw	r18, r12
     c22:	0e 94 d7 2a 	call	0x55ae	; 0x55ae <__mulsf3>
     c26:	0e 94 4b 29 	call	0x5296	; 0x5296 <__fixunssfsi>
     c2a:	68 8b       	std	Y+16, r22	; 0x10
	draw_line(basecenter_x,basecenter_y,middlelength,rotationangle-M_PI_2);
     c2c:	2b ed       	ldi	r18, 0xDB	; 219
     c2e:	3f e0       	ldi	r19, 0x0F	; 15
     c30:	49 ec       	ldi	r20, 0xC9	; 201
     c32:	5f e3       	ldi	r21, 0x3F	; 63
     c34:	c5 01       	movw	r24, r10
     c36:	b4 01       	movw	r22, r8
     c38:	0e 94 10 28 	call	0x5020	; 0x5020 <__subsf3>
     c3c:	6a 87       	std	Y+10, r22	; 0x0a
     c3e:	7b 87       	std	Y+11, r23	; 0x0b
     c40:	8c 87       	std	Y+12, r24	; 0x0c
     c42:	9d 87       	std	Y+13, r25	; 0x0d
     c44:	7b 01       	movw	r14, r22
     c46:	8c 01       	movw	r16, r24
     c48:	28 89       	ldd	r18, Y+16	; 0x10
     c4a:	4d 81       	ldd	r20, Y+5	; 0x05
     c4c:	6f 85       	ldd	r22, Y+15	; 0x0f
     c4e:	c1 01       	movw	r24, r2
     c50:	0e 94 10 05 	call	0xa20	; 0xa20 <_ZN7Display9draw_lineEhhhf>
	//draw left arm
	uint8_t lengtharm=baselength/(2*cos(baseangle));
     c54:	6e 81       	ldd	r22, Y+6	; 0x06
     c56:	7f 81       	ldd	r23, Y+7	; 0x07
     c58:	88 85       	ldd	r24, Y+8	; 0x08
     c5a:	99 85       	ldd	r25, Y+9	; 0x09
     c5c:	0e 94 db 28 	call	0x51b6	; 0x51b6 <cos>
     c60:	6b 01       	movw	r12, r22
     c62:	7c 01       	movw	r14, r24
     c64:	29 81       	ldd	r18, Y+1	; 0x01
     c66:	62 2f       	mov	r22, r18
     c68:	70 e0       	ldi	r23, 0x00	; 0
     c6a:	80 e0       	ldi	r24, 0x00	; 0
     c6c:	90 e0       	ldi	r25, 0x00	; 0
     c6e:	0e 94 79 29 	call	0x52f2	; 0x52f2 <__floatsisf>
     c72:	2b 01       	movw	r4, r22
     c74:	3c 01       	movw	r6, r24
     c76:	a7 01       	movw	r20, r14
     c78:	96 01       	movw	r18, r12
     c7a:	c7 01       	movw	r24, r14
     c7c:	b6 01       	movw	r22, r12
     c7e:	0e 94 11 28 	call	0x5022	; 0x5022 <__addsf3>
     c82:	9b 01       	movw	r18, r22
     c84:	ac 01       	movw	r20, r24
     c86:	c3 01       	movw	r24, r6
     c88:	b2 01       	movw	r22, r4
     c8a:	0e 94 de 28 	call	0x51bc	; 0x51bc <__divsf3>
     c8e:	0e 94 4b 29 	call	0x5296	; 0x5296 <__fixunssfsi>
     c92:	6e 87       	std	Y+14, r22	; 0x0e
	uint8_t sx = basecenter_x-middlelength*cos(rotationangle-M_PI_2);
     c94:	e8 89       	ldd	r30, Y+16	; 0x10
     c96:	6e 2f       	mov	r22, r30
     c98:	70 e0       	ldi	r23, 0x00	; 0
     c9a:	80 e0       	ldi	r24, 0x00	; 0
     c9c:	90 e0       	ldi	r25, 0x00	; 0
     c9e:	0e 94 79 29 	call	0x52f2	; 0x52f2 <__floatsisf>
     ca2:	69 83       	std	Y+1, r22	; 0x01
     ca4:	7a 83       	std	Y+2, r23	; 0x02
     ca6:	8b 83       	std	Y+3, r24	; 0x03
     ca8:	9c 83       	std	Y+4, r25	; 0x04
     caa:	6a 85       	ldd	r22, Y+10	; 0x0a
     cac:	7b 85       	ldd	r23, Y+11	; 0x0b
     cae:	8c 85       	ldd	r24, Y+12	; 0x0c
     cb0:	9d 85       	ldd	r25, Y+13	; 0x0d
     cb2:	0e 94 db 28 	call	0x51b6	; 0x51b6 <cos>
     cb6:	6b 01       	movw	r12, r22
     cb8:	7c 01       	movw	r14, r24
     cba:	ff 85       	ldd	r31, Y+15	; 0x0f
     cbc:	6f 2f       	mov	r22, r31
     cbe:	70 e0       	ldi	r23, 0x00	; 0
     cc0:	80 e0       	ldi	r24, 0x00	; 0
     cc2:	90 e0       	ldi	r25, 0x00	; 0
     cc4:	0e 94 79 29 	call	0x52f2	; 0x52f2 <__floatsisf>
     cc8:	2b 01       	movw	r4, r22
     cca:	3c 01       	movw	r6, r24
     ccc:	a7 01       	movw	r20, r14
     cce:	96 01       	movw	r18, r12
     cd0:	69 81       	ldd	r22, Y+1	; 0x01
     cd2:	7a 81       	ldd	r23, Y+2	; 0x02
     cd4:	8b 81       	ldd	r24, Y+3	; 0x03
     cd6:	9c 81       	ldd	r25, Y+4	; 0x04
     cd8:	0e 94 d7 2a 	call	0x55ae	; 0x55ae <__mulsf3>
     cdc:	9b 01       	movw	r18, r22
     cde:	ac 01       	movw	r20, r24
     ce0:	c3 01       	movw	r24, r6
     ce2:	b2 01       	movw	r22, r4
     ce4:	0e 94 10 28 	call	0x5020	; 0x5020 <__subsf3>
     ce8:	0e 94 4b 29 	call	0x5296	; 0x5296 <__fixunssfsi>
     cec:	6f 87       	std	Y+15, r22	; 0x0f
	uint8_t sy = basecenter_y+middlelength*sin(rotationangle-M_PI_2);
     cee:	6a 85       	ldd	r22, Y+10	; 0x0a
     cf0:	7b 85       	ldd	r23, Y+11	; 0x0b
     cf2:	8c 85       	ldd	r24, Y+12	; 0x0c
     cf4:	9d 85       	ldd	r25, Y+13	; 0x0d
     cf6:	0e 94 3a 2b 	call	0x5674	; 0x5674 <sin>
     cfa:	6b 01       	movw	r12, r22
     cfc:	7c 01       	movw	r14, r24
     cfe:	2d 81       	ldd	r18, Y+5	; 0x05
     d00:	62 2f       	mov	r22, r18
     d02:	70 e0       	ldi	r23, 0x00	; 0
     d04:	80 e0       	ldi	r24, 0x00	; 0
     d06:	90 e0       	ldi	r25, 0x00	; 0
     d08:	0e 94 79 29 	call	0x52f2	; 0x52f2 <__floatsisf>
     d0c:	2b 01       	movw	r4, r22
     d0e:	3c 01       	movw	r6, r24
     d10:	a7 01       	movw	r20, r14
     d12:	96 01       	movw	r18, r12
     d14:	69 81       	ldd	r22, Y+1	; 0x01
     d16:	7a 81       	ldd	r23, Y+2	; 0x02
     d18:	8b 81       	ldd	r24, Y+3	; 0x03
     d1a:	9c 81       	ldd	r25, Y+4	; 0x04
     d1c:	0e 94 d7 2a 	call	0x55ae	; 0x55ae <__mulsf3>
     d20:	9b 01       	movw	r18, r22
     d22:	ac 01       	movw	r20, r24
     d24:	c3 01       	movw	r24, r6
     d26:	b2 01       	movw	r22, r4
     d28:	0e 94 11 28 	call	0x5022	; 0x5022 <__addsf3>
     d2c:	0e 94 4b 29 	call	0x5296	; 0x5296 <__fixunssfsi>
     d30:	d6 2e       	mov	r13, r22
	draw_line(sx,sy,lengtharm,baseangle+rotationangle);
     d32:	a5 01       	movw	r20, r10
     d34:	94 01       	movw	r18, r8
     d36:	6e 81       	ldd	r22, Y+6	; 0x06
     d38:	7f 81       	ldd	r23, Y+7	; 0x07
     d3a:	88 85       	ldd	r24, Y+8	; 0x08
     d3c:	99 85       	ldd	r25, Y+9	; 0x09
     d3e:	0e 94 11 28 	call	0x5022	; 0x5022 <__addsf3>
     d42:	7b 01       	movw	r14, r22
     d44:	8c 01       	movw	r16, r24
     d46:	2e 85       	ldd	r18, Y+14	; 0x0e
     d48:	4d 2d       	mov	r20, r13
     d4a:	6f 85       	ldd	r22, Y+15	; 0x0f
     d4c:	c1 01       	movw	r24, r2
     d4e:	0e 94 10 05 	call	0xa20	; 0xa20 <_ZN7Display9draw_lineEhhhf>
	//draw right arm
	draw_line(sx,sy,lengtharm,-baseangle+rotationangle-M_PI);
     d52:	2e 81       	ldd	r18, Y+6	; 0x06
     d54:	3f 81       	ldd	r19, Y+7	; 0x07
     d56:	48 85       	ldd	r20, Y+8	; 0x08
     d58:	59 85       	ldd	r21, Y+9	; 0x09
     d5a:	c5 01       	movw	r24, r10
     d5c:	b4 01       	movw	r22, r8
     d5e:	0e 94 10 28 	call	0x5020	; 0x5020 <__subsf3>
     d62:	2b ed       	ldi	r18, 0xDB	; 219
     d64:	3f e0       	ldi	r19, 0x0F	; 15
     d66:	49 e4       	ldi	r20, 0x49	; 73
     d68:	50 e4       	ldi	r21, 0x40	; 64
     d6a:	0e 94 10 28 	call	0x5020	; 0x5020 <__subsf3>
     d6e:	7b 01       	movw	r14, r22
     d70:	8c 01       	movw	r16, r24
     d72:	2e 85       	ldd	r18, Y+14	; 0x0e
     d74:	4d 2d       	mov	r20, r13
     d76:	6f 85       	ldd	r22, Y+15	; 0x0f
     d78:	c1 01       	movw	r24, r2
     d7a:	0e 94 10 05 	call	0xa20	; 0xa20 <_ZN7Display9draw_lineEhhhf>
}
     d7e:	60 96       	adiw	r28, 0x10	; 16
     d80:	0f b6       	in	r0, 0x3f	; 63
     d82:	f8 94       	cli
     d84:	de bf       	out	0x3e, r29	; 62
     d86:	0f be       	out	0x3f, r0	; 63
     d88:	cd bf       	out	0x3d, r28	; 61
     d8a:	df 91       	pop	r29
     d8c:	cf 91       	pop	r28
     d8e:	1f 91       	pop	r17
     d90:	0f 91       	pop	r16
     d92:	ff 90       	pop	r15
     d94:	ef 90       	pop	r14
     d96:	df 90       	pop	r13
     d98:	cf 90       	pop	r12
     d9a:	bf 90       	pop	r11
     d9c:	af 90       	pop	r10
     d9e:	9f 90       	pop	r9
     da0:	8f 90       	pop	r8
     da2:	7f 90       	pop	r7
     da4:	6f 90       	pop	r6
     da6:	5f 90       	pop	r5
     da8:	4f 90       	pop	r4
     daa:	3f 90       	pop	r3
     dac:	2f 90       	pop	r2
     dae:	08 95       	ret

00000db0 <_ZN7Display9draw_ASCIEhhh>:

void Display::draw_ASCI(uint8_t sym,uint8_t x, uint8_t y){
     db0:	0f 93       	push	r16
     db2:	1f 93       	push	r17
     db4:	cf 93       	push	r28
     db6:	df 93       	push	r29
	if(sym!=' ' && sym>=33){
     db8:	61 32       	cpi	r22, 0x21	; 33
     dba:	08 f4       	brcc	.+2      	; 0xdbe <_ZN7Display9draw_ASCIEhhh+0xe>
     dbc:	42 c0       	rjmp	.+132    	; 0xe42 <_ZN7Display9draw_ASCIEhhh+0x92>
		sym-=33;
		uint16_t symbol;
		for(uint8_t i = 0; i < 5; i++){
			symbol = pgm_read_byte(&font5x8[sym][i]);
			symbol = symbol << y%8;
			Displayframe[x+(y/8)*SSD1306_WIDTH+i] |=(uint8_t) (symbol & 0x00FF);
     dbe:	a4 2f       	mov	r26, r20
     dc0:	b0 e0       	ldi	r27, 0x00	; 0
     dc2:	02 2f       	mov	r16, r18
     dc4:	06 95       	lsr	r16
     dc6:	06 95       	lsr	r16
     dc8:	06 95       	lsr	r16
     dca:	30 e8       	ldi	r19, 0x80	; 128
     dcc:	03 9f       	mul	r16, r19
     dce:	80 01       	movw	r16, r0
     dd0:	11 24       	eor	r1, r1
     dd2:	ed 01       	movw	r28, r26
     dd4:	c0 0f       	add	r28, r16
     dd6:	d1 1f       	adc	r29, r17
			if(((symbol&0xFF00)>>8)==0){
				Displayframe[x+(y/8+1)*SSD1306_WIDTH+i] |= 0;
			}
			else {
				Displayframe[x+(y/8+1)*SSD1306_WIDTH+i] |= (uint8_t) ((symbol & 0xFF00)>>8);
     dd8:	00 58       	subi	r16, 0x80	; 128
     dda:	1f 4f       	sbci	r17, 0xFF	; 255
     ddc:	0a 0f       	add	r16, r26
     dde:	1b 1f       	adc	r17, r27
	draw_line(sx,sy,lengtharm,-baseangle+rotationangle-M_PI);
}

void Display::draw_ASCI(uint8_t sym,uint8_t x, uint8_t y){
	if(sym!=' ' && sym>=33){
		sym-=33;
     de0:	61 52       	subi	r22, 0x21	; 33
     de2:	46 2f       	mov	r20, r22
     de4:	50 e0       	ldi	r21, 0x00	; 0
     de6:	fa 01       	movw	r30, r20
     de8:	ee 0f       	add	r30, r30
     dea:	ff 1f       	adc	r31, r31
     dec:	ee 0f       	add	r30, r30
     dee:	ff 1f       	adc	r31, r31
     df0:	e4 0f       	add	r30, r20
     df2:	f5 1f       	adc	r31, r21
     df4:	ee 55       	subi	r30, 0x5E	; 94
     df6:	fb 4f       	sbci	r31, 0xFB	; 251
     df8:	dc 01       	movw	r26, r24
     dfa:	ac 0f       	add	r26, r28
     dfc:	bd 1f       	adc	r27, r29
     dfe:	ae 01       	movw	r20, r28
     e00:	05 96       	adiw	r24, 0x05	; 5
     e02:	8c 0f       	add	r24, r28
     e04:	9d 1f       	adc	r25, r29
		uint16_t symbol;
		for(uint8_t i = 0; i < 5; i++){
			symbol = pgm_read_byte(&font5x8[sym][i]);
			symbol = symbol << y%8;
     e06:	27 70       	andi	r18, 0x07	; 7
void Display::draw_ASCI(uint8_t sym,uint8_t x, uint8_t y){
	if(sym!=' ' && sym>=33){
		sym-=33;
		uint16_t symbol;
		for(uint8_t i = 0; i < 5; i++){
			symbol = pgm_read_byte(&font5x8[sym][i]);
     e08:	64 91       	lpm	r22, Z
     e0a:	70 e0       	ldi	r23, 0x00	; 0
			symbol = symbol << y%8;
     e0c:	02 2e       	mov	r0, r18
     e0e:	02 c0       	rjmp	.+4      	; 0xe14 <_ZN7Display9draw_ASCIEhhh+0x64>
     e10:	66 0f       	add	r22, r22
     e12:	77 1f       	adc	r23, r23
     e14:	0a 94       	dec	r0
     e16:	e2 f7       	brpl	.-8      	; 0xe10 <_ZN7Display9draw_ASCIEhhh+0x60>
			Displayframe[x+(y/8)*SSD1306_WIDTH+i] |=(uint8_t) (symbol & 0x00FF);
     e18:	3c 91       	ld	r19, X
     e1a:	36 2b       	or	r19, r22
     e1c:	3c 93       	st	X, r19
			if(((symbol&0xFF00)>>8)==0){
     e1e:	67 2f       	mov	r22, r23
     e20:	77 27       	eor	r23, r23
     e22:	61 15       	cp	r22, r1
     e24:	71 05       	cpc	r23, r1
     e26:	41 f0       	breq	.+16     	; 0xe38 <_ZN7Display9draw_ASCIEhhh+0x88>
     e28:	ed 01       	movw	r28, r26
     e2a:	c4 1b       	sub	r28, r20
     e2c:	d5 0b       	sbc	r29, r21
     e2e:	c0 0f       	add	r28, r16
     e30:	d1 1f       	adc	r29, r17
				Displayframe[x+(y/8+1)*SSD1306_WIDTH+i] |= 0;
			}
			else {
				Displayframe[x+(y/8+1)*SSD1306_WIDTH+i] |= (uint8_t) ((symbol & 0xFF00)>>8);
     e32:	38 81       	ld	r19, Y
     e34:	63 2b       	or	r22, r19
     e36:	68 83       	st	Y, r22
     e38:	31 96       	adiw	r30, 0x01	; 1
     e3a:	11 96       	adiw	r26, 0x01	; 1

void Display::draw_ASCI(uint8_t sym,uint8_t x, uint8_t y){
	if(sym!=' ' && sym>=33){
		sym-=33;
		uint16_t symbol;
		for(uint8_t i = 0; i < 5; i++){
     e3c:	a8 17       	cp	r26, r24
     e3e:	b9 07       	cpc	r27, r25
     e40:	19 f7       	brne	.-58     	; 0xe08 <_ZN7Display9draw_ASCIEhhh+0x58>
	else{
		for(uint8_t i = 0; i < 7; i++){
			Displayframe[x+(y/8)*SSD1306_WIDTH+i] |= 0;
		}
	}
}
     e42:	df 91       	pop	r29
     e44:	cf 91       	pop	r28
     e46:	1f 91       	pop	r17
     e48:	0f 91       	pop	r16
     e4a:	08 95       	ret

00000e4c <_ZN7Display12draw_pikachuEv>:

void Display::draw_pikachu(){
     e4c:	cf 93       	push	r28
     e4e:	42 e6       	ldi	r20, 0x62	; 98
     e50:	51 e0       	ldi	r21, 0x01	; 1
     e52:	62 e6       	ldi	r22, 0x62	; 98
     e54:	73 e0       	ldi	r23, 0x03	; 3
     e56:	0d c0       	rjmp	.+26     	; 0xe72 <_ZN7Display12draw_pikachuEv+0x26>
	for (uint8_t i = 0; i<8;i++)
	{
		for (uint8_t j = 0;j<64;j++)
		{
			Displayframe[i*SSD1306_WIDTH+j]=pgm_read_byte(&Pikachu[i][j]);
     e58:	c4 91       	lpm	r28, Z
     e5a:	cd 93       	st	X+, r28
     e5c:	31 96       	adiw	r30, 0x01	; 1
}

void Display::draw_pikachu(){
	for (uint8_t i = 0; i<8;i++)
	{
		for (uint8_t j = 0;j<64;j++)
     e5e:	a2 17       	cp	r26, r18
     e60:	b3 07       	cpc	r27, r19
     e62:	d1 f7       	brne	.-12     	; 0xe58 <_ZN7Display12draw_pikachuEv+0xc>
     e64:	40 5c       	subi	r20, 0xC0	; 192
     e66:	5f 4f       	sbci	r21, 0xFF	; 255
     e68:	80 58       	subi	r24, 0x80	; 128
     e6a:	9f 4f       	sbci	r25, 0xFF	; 255
		}
	}
}

void Display::draw_pikachu(){
	for (uint8_t i = 0; i<8;i++)
     e6c:	46 17       	cp	r20, r22
     e6e:	57 07       	cpc	r21, r23
     e70:	31 f0       	breq	.+12     	; 0xe7e <_ZN7Display12draw_pikachuEv+0x32>
     e72:	9c 01       	movw	r18, r24
     e74:	20 5c       	subi	r18, 0xC0	; 192
     e76:	3f 4f       	sbci	r19, 0xFF	; 255
			Displayframe[x+(y/8)*SSD1306_WIDTH+i] |= 0;
		}
	}
}

void Display::draw_pikachu(){
     e78:	dc 01       	movw	r26, r24
     e7a:	fa 01       	movw	r30, r20
     e7c:	ed cf       	rjmp	.-38     	; 0xe58 <_ZN7Display12draw_pikachuEv+0xc>
		for (uint8_t j = 0;j<64;j++)
		{
			Displayframe[i*SSD1306_WIDTH+j]=pgm_read_byte(&Pikachu[i][j]);
		}
	}
}
     e7e:	cf 91       	pop	r28
     e80:	08 95       	ret

00000e82 <_ZN7Display16draw_number16x16Ehhh>:

void Display::draw_number16x16(uint8_t number, uint8_t x, uint8_t y){
     e82:	ef 92       	push	r14
     e84:	ff 92       	push	r15
     e86:	0f 93       	push	r16
     e88:	1f 93       	push	r17
     e8a:	cf 93       	push	r28
     e8c:	df 93       	push	r29
	uint16_t symbol;
	if(number>=0 && number<10){
     e8e:	6a 30       	cpi	r22, 0x0A	; 10
     e90:	08 f0       	brcs	.+2      	; 0xe94 <_ZN7Display16draw_number16x16Ehhh+0x12>
     e92:	66 c0       	rjmp	.+204    	; 0xf60 <_ZN7Display16draw_number16x16Ehhh+0xde>
		for(uint8_t i = 0; i < 32;i++){
			symbol = pgm_read_byte(&digits16x16[number][i]);
			symbol = symbol << y%8;
			if(i<16){
				Displayframe[x+(y/8)*SSD1306_WIDTH+i] |=(uint8_t) (symbol & 0x00FF);
     e94:	50 e0       	ldi	r21, 0x00	; 0
     e96:	02 2f       	mov	r16, r18
     e98:	06 95       	lsr	r16
     e9a:	06 95       	lsr	r16
     e9c:	06 95       	lsr	r16
     e9e:	10 e0       	ldi	r17, 0x00	; 0
     ea0:	d8 01       	movw	r26, r16
     ea2:	b6 95       	lsr	r27
     ea4:	ba 2f       	mov	r27, r26
     ea6:	aa 27       	eor	r26, r26
     ea8:	b7 95       	ror	r27
     eaa:	a7 95       	ror	r26
				if(((symbol&0xFF00)>>8)==0){
					Displayframe[x+(y/8+1)*SSD1306_WIDTH+i] |= 0;
				}
				else {
					Displayframe[x+(y/8+1)*SSD1306_WIDTH+i] |= (uint8_t) ((symbol & 0xFF00)>>8);
     eac:	0f 5f       	subi	r16, 0xFF	; 255
     eae:	1f 4f       	sbci	r17, 0xFF	; 255
				}
			}
			else {
				Displayframe[x+(y/8+1)*SSD1306_WIDTH+(i-16)] |= (uint8_t) (symbol & 0x00FF);
     eb0:	16 95       	lsr	r17
     eb2:	10 2f       	mov	r17, r16
     eb4:	00 27       	eor	r16, r16
     eb6:	17 95       	ror	r17
     eb8:	07 95       	ror	r16
				Displayframe[x+(y/8)*SSD1306_WIDTH+i] |=(uint8_t) (symbol & 0x00FF);
				if(((symbol&0xFF00)>>8)==0){
					Displayframe[x+(y/8+1)*SSD1306_WIDTH+i] |= 0;
				}
				else {
					Displayframe[x+(y/8+1)*SSD1306_WIDTH+i] |= (uint8_t) ((symbol & 0xFF00)>>8);
     eba:	7d 01       	movw	r14, r26
     ebc:	30 e8       	ldi	r19, 0x80	; 128
     ebe:	e3 0e       	add	r14, r19
     ec0:	f1 1c       	adc	r15, r1
     ec2:	e4 0e       	add	r14, r20
     ec4:	f5 1e       	adc	r15, r21
     ec6:	e8 0e       	add	r14, r24
     ec8:	f9 1e       	adc	r15, r25
				}
			}
			else {
				Displayframe[x+(y/8+1)*SSD1306_WIDTH+(i-16)] |= (uint8_t) (symbol & 0x00FF);
     eca:	ea 01       	movw	r28, r20
     ecc:	c0 0f       	add	r28, r16
     ece:	d1 1f       	adc	r29, r17
     ed0:	60 97       	sbiw	r28, 0x10	; 16
     ed2:	c8 0f       	add	r28, r24
     ed4:	d9 1f       	adc	r29, r25
				if(((symbol&0xFF00)>>8)==0){
					Displayframe[x+(y/8+2)*SSD1306_WIDTH+(i-16)] |= 0;
				}
				else {
					Displayframe[x+(y/8+2)*SSD1306_WIDTH+(i-16)] |= (uint8_t) ((symbol & 0xFF00)>>8);
     ed6:	04 0f       	add	r16, r20
     ed8:	15 1f       	adc	r17, r21
     eda:	00 59       	subi	r16, 0x90	; 144
     edc:	1f 4f       	sbci	r17, 0xFF	; 255
     ede:	08 0f       	add	r16, r24
     ee0:	19 1f       	adc	r17, r25
	if(number>=0 && number<10){
		for(uint8_t i = 0; i < 32;i++){
			symbol = pgm_read_byte(&digits16x16[number][i]);
			symbol = symbol << y%8;
			if(i<16){
				Displayframe[x+(y/8)*SSD1306_WIDTH+i] |=(uint8_t) (symbol & 0x00FF);
     ee2:	a4 0f       	add	r26, r20
     ee4:	b5 1f       	adc	r27, r21
     ee6:	a8 0f       	add	r26, r24
     ee8:	b9 1f       	adc	r27, r25
     eea:	e0 e2       	ldi	r30, 0x20	; 32
     eec:	6e 9f       	mul	r22, r30
     eee:	c0 01       	movw	r24, r0
     ef0:	11 24       	eor	r1, r1
				Displayframe[x+(y/8+1)*SSD1306_WIDTH+(i-16)] |= (uint8_t) (symbol & 0x00FF);
				if(((symbol&0xFF00)>>8)==0){
					Displayframe[x+(y/8+2)*SSD1306_WIDTH+(i-16)] |= 0;
				}
				else {
					Displayframe[x+(y/8+2)*SSD1306_WIDTH+(i-16)] |= (uint8_t) ((symbol & 0xFF00)>>8);
     ef2:	40 e0       	ldi	r20, 0x00	; 0
     ef4:	50 e0       	ldi	r21, 0x00	; 0
     ef6:	8e 59       	subi	r24, 0x9E	; 158
     ef8:	9c 4f       	sbci	r25, 0xFC	; 252
void Display::draw_number16x16(uint8_t number, uint8_t x, uint8_t y){
	uint16_t symbol;
	if(number>=0 && number<10){
		for(uint8_t i = 0; i < 32;i++){
			symbol = pgm_read_byte(&digits16x16[number][i]);
			symbol = symbol << y%8;
     efa:	27 70       	andi	r18, 0x07	; 7
     efc:	fc 01       	movw	r30, r24
     efe:	e4 0f       	add	r30, r20
     f00:	f5 1f       	adc	r31, r21

void Display::draw_number16x16(uint8_t number, uint8_t x, uint8_t y){
	uint16_t symbol;
	if(number>=0 && number<10){
		for(uint8_t i = 0; i < 32;i++){
			symbol = pgm_read_byte(&digits16x16[number][i]);
     f02:	e4 91       	lpm	r30, Z
     f04:	f0 e0       	ldi	r31, 0x00	; 0
			symbol = symbol << y%8;
     f06:	02 2e       	mov	r0, r18
     f08:	02 c0       	rjmp	.+4      	; 0xf0e <_ZN7Display16draw_number16x16Ehhh+0x8c>
     f0a:	ee 0f       	add	r30, r30
     f0c:	ff 1f       	adc	r31, r31
     f0e:	0a 94       	dec	r0
     f10:	e2 f7       	brpl	.-8      	; 0xf0a <_ZN7Display16draw_number16x16Ehhh+0x88>
			if(i<16){
     f12:	40 31       	cpi	r20, 0x10	; 16
     f14:	68 f4       	brcc	.+26     	; 0xf30 <_ZN7Display16draw_number16x16Ehhh+0xae>
				Displayframe[x+(y/8)*SSD1306_WIDTH+i] |=(uint8_t) (symbol & 0x00FF);
     f16:	3c 91       	ld	r19, X
     f18:	3e 2b       	or	r19, r30
     f1a:	3c 93       	st	X, r19
				if(((symbol&0xFF00)>>8)==0){
     f1c:	6f 2f       	mov	r22, r31
     f1e:	77 27       	eor	r23, r23
     f20:	61 15       	cp	r22, r1
     f22:	71 05       	cpc	r23, r1
     f24:	89 f0       	breq	.+34     	; 0xf48 <_ZN7Display16draw_number16x16Ehhh+0xc6>
					Displayframe[x+(y/8+1)*SSD1306_WIDTH+i] |= 0;
				}
				else {
					Displayframe[x+(y/8+1)*SSD1306_WIDTH+i] |= (uint8_t) ((symbol & 0xFF00)>>8);
     f26:	f7 01       	movw	r30, r14
     f28:	30 81       	ld	r19, Z
     f2a:	36 2b       	or	r19, r22
     f2c:	30 83       	st	Z, r19
     f2e:	0c c0       	rjmp	.+24     	; 0xf48 <_ZN7Display16draw_number16x16Ehhh+0xc6>
				}
			}
			else {
				Displayframe[x+(y/8+1)*SSD1306_WIDTH+(i-16)] |= (uint8_t) (symbol & 0x00FF);
     f30:	38 81       	ld	r19, Y
     f32:	3e 2b       	or	r19, r30
     f34:	38 83       	st	Y, r19
				if(((symbol&0xFF00)>>8)==0){
     f36:	6f 2f       	mov	r22, r31
     f38:	77 27       	eor	r23, r23
     f3a:	61 15       	cp	r22, r1
     f3c:	71 05       	cpc	r23, r1
     f3e:	21 f0       	breq	.+8      	; 0xf48 <_ZN7Display16draw_number16x16Ehhh+0xc6>
					Displayframe[x+(y/8+2)*SSD1306_WIDTH+(i-16)] |= 0;
				}
				else {
					Displayframe[x+(y/8+2)*SSD1306_WIDTH+(i-16)] |= (uint8_t) ((symbol & 0xFF00)>>8);
     f40:	f8 01       	movw	r30, r16
     f42:	30 81       	ld	r19, Z
     f44:	36 2b       	or	r19, r22
     f46:	30 83       	st	Z, r19
     f48:	4f 5f       	subi	r20, 0xFF	; 255
     f4a:	5f 4f       	sbci	r21, 0xFF	; 255
     f4c:	ff ef       	ldi	r31, 0xFF	; 255
     f4e:	ef 1a       	sub	r14, r31
     f50:	ff 0a       	sbc	r15, r31
     f52:	21 96       	adiw	r28, 0x01	; 1
     f54:	0f 5f       	subi	r16, 0xFF	; 255
     f56:	1f 4f       	sbci	r17, 0xFF	; 255
     f58:	11 96       	adiw	r26, 0x01	; 1
}

void Display::draw_number16x16(uint8_t number, uint8_t x, uint8_t y){
	uint16_t symbol;
	if(number>=0 && number<10){
		for(uint8_t i = 0; i < 32;i++){
     f5a:	40 32       	cpi	r20, 0x20	; 32
     f5c:	51 05       	cpc	r21, r1
     f5e:	71 f6       	brne	.-100    	; 0xefc <_ZN7Display16draw_number16x16Ehhh+0x7a>
					Displayframe[x+(y/8+2)*SSD1306_WIDTH+(i-16)] |= (uint8_t) ((symbol & 0xFF00)>>8);
				}
			}
		}
	}
}
     f60:	df 91       	pop	r29
     f62:	cf 91       	pop	r28
     f64:	1f 91       	pop	r17
     f66:	0f 91       	pop	r16
     f68:	ff 90       	pop	r15
     f6a:	ef 90       	pop	r14
     f6c:	08 95       	ret

00000f6e <_ZN7Display6analogEhhhh>:

void Display::analog(uint8_t stunde, uint8_t minute, uint8_t sekunde, uint8_t sekanzeige){
     f6e:	2f 92       	push	r2
     f70:	3f 92       	push	r3
     f72:	4f 92       	push	r4
     f74:	5f 92       	push	r5
     f76:	6f 92       	push	r6
     f78:	7f 92       	push	r7
     f7a:	8f 92       	push	r8
     f7c:	9f 92       	push	r9
     f7e:	af 92       	push	r10
     f80:	bf 92       	push	r11
     f82:	cf 92       	push	r12
     f84:	df 92       	push	r13
     f86:	ef 92       	push	r14
     f88:	ff 92       	push	r15
     f8a:	0f 93       	push	r16
     f8c:	1f 93       	push	r17
     f8e:	cf 93       	push	r28
     f90:	df 93       	push	r29
     f92:	cd b7       	in	r28, 0x3d	; 61
     f94:	de b7       	in	r29, 0x3e	; 62
     f96:	27 97       	sbiw	r28, 0x07	; 7
     f98:	0f b6       	in	r0, 0x3f	; 63
     f9a:	f8 94       	cli
     f9c:	de bf       	out	0x3e, r29	; 62
     f9e:	0f be       	out	0x3f, r0	; 63
     fa0:	cd bf       	out	0x3d, r28	; 61
     fa2:	9f 83       	std	Y+7, r25	; 0x07
     fa4:	8e 83       	std	Y+6, r24	; 0x06
     fa6:	6d 83       	std	Y+5, r22	; 0x05
     fa8:	34 2e       	mov	r3, r20
	uint8_t Px=32-1;
	uint8_t Py=32-1;
	uint8_t x=0,y=0;
	float winkel=0;
	
	if (sekanzeige)
     faa:	00 23       	and	r16, r16
     fac:	09 f4       	brne	.+2      	; 0xfb0 <_ZN7Display6analogEhhhh+0x42>
     fae:	29 c1       	rjmp	.+594    	; 0x1202 <_ZN7Display6analogEhhhh+0x294>
	{
		//Berechnen des Sekundenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(sekunde*6.0)*M_PI/180.0-M_PI/2.0;
     fb0:	62 2f       	mov	r22, r18
     fb2:	70 e0       	ldi	r23, 0x00	; 0
     fb4:	80 e0       	ldi	r24, 0x00	; 0
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	0e 94 79 29 	call	0x52f2	; 0x52f2 <__floatsisf>
     fbc:	20 e0       	ldi	r18, 0x00	; 0
     fbe:	30 e0       	ldi	r19, 0x00	; 0
     fc0:	40 ec       	ldi	r20, 0xC0	; 192
     fc2:	50 e4       	ldi	r21, 0x40	; 64
     fc4:	0e 94 d7 2a 	call	0x55ae	; 0x55ae <__mulsf3>
     fc8:	2b ed       	ldi	r18, 0xDB	; 219
     fca:	3f e0       	ldi	r19, 0x0F	; 15
     fcc:	49 e4       	ldi	r20, 0x49	; 73
     fce:	50 e4       	ldi	r21, 0x40	; 64
     fd0:	0e 94 d7 2a 	call	0x55ae	; 0x55ae <__mulsf3>
     fd4:	20 e0       	ldi	r18, 0x00	; 0
     fd6:	30 e0       	ldi	r19, 0x00	; 0
     fd8:	44 e3       	ldi	r20, 0x34	; 52
     fda:	53 e4       	ldi	r21, 0x43	; 67
     fdc:	0e 94 de 28 	call	0x51bc	; 0x51bc <__divsf3>
     fe0:	2b ed       	ldi	r18, 0xDB	; 219
     fe2:	3f e0       	ldi	r19, 0x0F	; 15
     fe4:	49 ec       	ldi	r20, 0xC9	; 201
     fe6:	5f e3       	ldi	r21, 0x3F	; 63
     fe8:	0e 94 10 28 	call	0x5020	; 0x5020 <__subsf3>
     fec:	6b 01       	movw	r12, r22
     fee:	7c 01       	movw	r14, r24
			x=(uint8_t) i*cos(winkel)+Px;
     ff0:	0e 94 db 28 	call	0x51b6	; 0x51b6 <cos>
     ff4:	2b 01       	movw	r4, r22
     ff6:	3c 01       	movw	r6, r24
			y=(uint8_t) i*sin(winkel)+Py;
     ff8:	c7 01       	movw	r24, r14
     ffa:	b6 01       	movw	r22, r12
     ffc:	0e 94 3a 2b 	call	0x5674	; 0x5674 <sin>
    1000:	4b 01       	movw	r8, r22
    1002:	5c 01       	movw	r10, r24
    1004:	00 e0       	ldi	r16, 0x00	; 0
    1006:	10 e0       	ldi	r17, 0x00	; 0
	if (sekanzeige)
	{
		//Berechnen des Sekundenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(sekunde*6.0)*M_PI/180.0-M_PI/2.0;
			x=(uint8_t) i*cos(winkel)+Px;
    1008:	b8 01       	movw	r22, r16
    100a:	88 27       	eor	r24, r24
    100c:	77 fd       	sbrc	r23, 7
    100e:	80 95       	com	r24
    1010:	98 2f       	mov	r25, r24
    1012:	0e 94 79 29 	call	0x52f2	; 0x52f2 <__floatsisf>
    1016:	6b 01       	movw	r12, r22
    1018:	7c 01       	movw	r14, r24
			y=(uint8_t) i*sin(winkel)+Py;
    101a:	a5 01       	movw	r20, r10
    101c:	94 01       	movw	r18, r8
    101e:	0e 94 d7 2a 	call	0x55ae	; 0x55ae <__mulsf3>
    1022:	20 e0       	ldi	r18, 0x00	; 0
    1024:	30 e0       	ldi	r19, 0x00	; 0
    1026:	48 ef       	ldi	r20, 0xF8	; 248
    1028:	51 e4       	ldi	r21, 0x41	; 65
    102a:	0e 94 11 28 	call	0x5022	; 0x5022 <__addsf3>
    102e:	0e 94 4b 29 	call	0x5296	; 0x5296 <__fixunssfsi>
    1032:	26 2e       	mov	r2, r22
	if (sekanzeige)
	{
		//Berechnen des Sekundenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(sekunde*6.0)*M_PI/180.0-M_PI/2.0;
			x=(uint8_t) i*cos(winkel)+Px;
    1034:	a3 01       	movw	r20, r6
    1036:	92 01       	movw	r18, r4
    1038:	c7 01       	movw	r24, r14
    103a:	b6 01       	movw	r22, r12
    103c:	0e 94 d7 2a 	call	0x55ae	; 0x55ae <__mulsf3>
    1040:	20 e0       	ldi	r18, 0x00	; 0
    1042:	30 e0       	ldi	r19, 0x00	; 0
    1044:	48 ef       	ldi	r20, 0xF8	; 248
    1046:	51 e4       	ldi	r21, 0x41	; 65
    1048:	0e 94 11 28 	call	0x5022	; 0x5022 <__addsf3>
    104c:	0e 94 4b 29 	call	0x5296	; 0x5296 <__fixunssfsi>
			y=(uint8_t) i*sin(winkel)+Py;

			drawPixel(x,y,0);
    1050:	20 e0       	ldi	r18, 0x00	; 0
    1052:	42 2d       	mov	r20, r2
    1054:	8e 81       	ldd	r24, Y+6	; 0x06
    1056:	9f 81       	ldd	r25, Y+7	; 0x07
    1058:	0e 94 d6 04 	call	0x9ac	; 0x9ac <_ZN7Display9drawPixelEhhh>
    105c:	0f 5f       	subi	r16, 0xFF	; 255
    105e:	1f 4f       	sbci	r17, 0xFF	; 255
	float winkel=0;
	
	if (sekanzeige)
	{
		//Berechnen des Sekundenzeigers
		for(uint8_t i=0;i<r;i++){
    1060:	09 31       	cpi	r16, 0x19	; 25
    1062:	11 05       	cpc	r17, r1
    1064:	89 f6       	brne	.-94     	; 0x1008 <_ZN7Display6analogEhhhh+0x9a>
		}

		r=21;
		//Berechnen des Minutenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(minute*6.0)*M_PI/180.0-M_PI/2.0;
    1066:	63 2d       	mov	r22, r3
    1068:	70 e0       	ldi	r23, 0x00	; 0
    106a:	80 e0       	ldi	r24, 0x00	; 0
    106c:	90 e0       	ldi	r25, 0x00	; 0
    106e:	0e 94 79 29 	call	0x52f2	; 0x52f2 <__floatsisf>
    1072:	69 83       	std	Y+1, r22	; 0x01
    1074:	7a 83       	std	Y+2, r23	; 0x02
    1076:	8b 83       	std	Y+3, r24	; 0x03
    1078:	9c 83       	std	Y+4, r25	; 0x04
    107a:	20 e0       	ldi	r18, 0x00	; 0
    107c:	30 e0       	ldi	r19, 0x00	; 0
    107e:	40 ec       	ldi	r20, 0xC0	; 192
    1080:	50 e4       	ldi	r21, 0x40	; 64
    1082:	0e 94 d7 2a 	call	0x55ae	; 0x55ae <__mulsf3>
    1086:	2b ed       	ldi	r18, 0xDB	; 219
    1088:	3f e0       	ldi	r19, 0x0F	; 15
    108a:	49 e4       	ldi	r20, 0x49	; 73
    108c:	50 e4       	ldi	r21, 0x40	; 64
    108e:	0e 94 d7 2a 	call	0x55ae	; 0x55ae <__mulsf3>
    1092:	20 e0       	ldi	r18, 0x00	; 0
    1094:	30 e0       	ldi	r19, 0x00	; 0
    1096:	44 e3       	ldi	r20, 0x34	; 52
    1098:	53 e4       	ldi	r21, 0x43	; 67
    109a:	0e 94 de 28 	call	0x51bc	; 0x51bc <__divsf3>
    109e:	2b ed       	ldi	r18, 0xDB	; 219
    10a0:	3f e0       	ldi	r19, 0x0F	; 15
    10a2:	49 ec       	ldi	r20, 0xC9	; 201
    10a4:	5f e3       	ldi	r21, 0x3F	; 63
    10a6:	0e 94 10 28 	call	0x5020	; 0x5020 <__subsf3>
    10aa:	6b 01       	movw	r12, r22
    10ac:	7c 01       	movw	r14, r24
			x=(uint8_t) i*cos(winkel)+Px;
    10ae:	0e 94 db 28 	call	0x51b6	; 0x51b6 <cos>
    10b2:	4b 01       	movw	r8, r22
    10b4:	5c 01       	movw	r10, r24
			y=(uint8_t) i*sin(winkel)+Py;
    10b6:	c7 01       	movw	r24, r14
    10b8:	b6 01       	movw	r22, r12
    10ba:	0e 94 3a 2b 	call	0x5674	; 0x5674 <sin>
    10be:	2b 01       	movw	r4, r22
    10c0:	3c 01       	movw	r6, r24
    10c2:	00 e0       	ldi	r16, 0x00	; 0
    10c4:	10 e0       	ldi	r17, 0x00	; 0

		r=21;
		//Berechnen des Minutenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(minute*6.0)*M_PI/180.0-M_PI/2.0;
			x=(uint8_t) i*cos(winkel)+Px;
    10c6:	b8 01       	movw	r22, r16
    10c8:	88 27       	eor	r24, r24
    10ca:	77 fd       	sbrc	r23, 7
    10cc:	80 95       	com	r24
    10ce:	98 2f       	mov	r25, r24
    10d0:	0e 94 79 29 	call	0x52f2	; 0x52f2 <__floatsisf>
    10d4:	6b 01       	movw	r12, r22
    10d6:	7c 01       	movw	r14, r24
			y=(uint8_t) i*sin(winkel)+Py;
    10d8:	a3 01       	movw	r20, r6
    10da:	92 01       	movw	r18, r4
    10dc:	0e 94 d7 2a 	call	0x55ae	; 0x55ae <__mulsf3>
    10e0:	20 e0       	ldi	r18, 0x00	; 0
    10e2:	30 e0       	ldi	r19, 0x00	; 0
    10e4:	48 ef       	ldi	r20, 0xF8	; 248
    10e6:	51 e4       	ldi	r21, 0x41	; 65
    10e8:	0e 94 11 28 	call	0x5022	; 0x5022 <__addsf3>
    10ec:	0e 94 4b 29 	call	0x5296	; 0x5296 <__fixunssfsi>
    10f0:	36 2e       	mov	r3, r22

		r=21;
		//Berechnen des Minutenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(minute*6.0)*M_PI/180.0-M_PI/2.0;
			x=(uint8_t) i*cos(winkel)+Px;
    10f2:	a5 01       	movw	r20, r10
    10f4:	94 01       	movw	r18, r8
    10f6:	c7 01       	movw	r24, r14
    10f8:	b6 01       	movw	r22, r12
    10fa:	0e 94 d7 2a 	call	0x55ae	; 0x55ae <__mulsf3>
    10fe:	20 e0       	ldi	r18, 0x00	; 0
    1100:	30 e0       	ldi	r19, 0x00	; 0
    1102:	48 ef       	ldi	r20, 0xF8	; 248
    1104:	51 e4       	ldi	r21, 0x41	; 65
    1106:	0e 94 11 28 	call	0x5022	; 0x5022 <__addsf3>
    110a:	0e 94 4b 29 	call	0x5296	; 0x5296 <__fixunssfsi>
			y=(uint8_t) i*sin(winkel)+Py;

			drawPixel(x,y,0);
    110e:	20 e0       	ldi	r18, 0x00	; 0
    1110:	43 2d       	mov	r20, r3
    1112:	8e 81       	ldd	r24, Y+6	; 0x06
    1114:	9f 81       	ldd	r25, Y+7	; 0x07
    1116:	0e 94 d6 04 	call	0x9ac	; 0x9ac <_ZN7Display9drawPixelEhhh>
    111a:	0f 5f       	subi	r16, 0xFF	; 255
    111c:	1f 4f       	sbci	r17, 0xFF	; 255
			drawPixel(x,y,0);
		}

		r=21;
		//Berechnen des Minutenzeigers
		for(uint8_t i=0;i<r;i++){
    111e:	05 31       	cpi	r16, 0x15	; 21
    1120:	11 05       	cpc	r17, r1
    1122:	89 f6       	brne	.-94     	; 0x10c6 <_ZN7Display6analogEhhhh+0x158>
		}

		r=13;
		//Berechnen des Stundenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(stunde*30.0+minute/2.0)*M_PI/180.0-M_PI/2.0;
    1124:	2d 81       	ldd	r18, Y+5	; 0x05
    1126:	62 2f       	mov	r22, r18
    1128:	70 e0       	ldi	r23, 0x00	; 0
    112a:	80 e0       	ldi	r24, 0x00	; 0
    112c:	90 e0       	ldi	r25, 0x00	; 0
    112e:	0e 94 79 29 	call	0x52f2	; 0x52f2 <__floatsisf>
    1132:	20 e0       	ldi	r18, 0x00	; 0
    1134:	30 e0       	ldi	r19, 0x00	; 0
    1136:	40 ef       	ldi	r20, 0xF0	; 240
    1138:	51 e4       	ldi	r21, 0x41	; 65
    113a:	0e 94 d7 2a 	call	0x55ae	; 0x55ae <__mulsf3>
    113e:	6b 01       	movw	r12, r22
    1140:	7c 01       	movw	r14, r24
    1142:	20 e0       	ldi	r18, 0x00	; 0
    1144:	30 e0       	ldi	r19, 0x00	; 0
    1146:	40 e0       	ldi	r20, 0x00	; 0
    1148:	5f e3       	ldi	r21, 0x3F	; 63
    114a:	69 81       	ldd	r22, Y+1	; 0x01
    114c:	7a 81       	ldd	r23, Y+2	; 0x02
    114e:	8b 81       	ldd	r24, Y+3	; 0x03
    1150:	9c 81       	ldd	r25, Y+4	; 0x04
    1152:	0e 94 d7 2a 	call	0x55ae	; 0x55ae <__mulsf3>
    1156:	9b 01       	movw	r18, r22
    1158:	ac 01       	movw	r20, r24
    115a:	c7 01       	movw	r24, r14
    115c:	b6 01       	movw	r22, r12
    115e:	0e 94 11 28 	call	0x5022	; 0x5022 <__addsf3>
    1162:	2b ed       	ldi	r18, 0xDB	; 219
    1164:	3f e0       	ldi	r19, 0x0F	; 15
    1166:	49 e4       	ldi	r20, 0x49	; 73
    1168:	50 e4       	ldi	r21, 0x40	; 64
    116a:	0e 94 d7 2a 	call	0x55ae	; 0x55ae <__mulsf3>
    116e:	20 e0       	ldi	r18, 0x00	; 0
    1170:	30 e0       	ldi	r19, 0x00	; 0
    1172:	44 e3       	ldi	r20, 0x34	; 52
    1174:	53 e4       	ldi	r21, 0x43	; 67
    1176:	0e 94 de 28 	call	0x51bc	; 0x51bc <__divsf3>
    117a:	2b ed       	ldi	r18, 0xDB	; 219
    117c:	3f e0       	ldi	r19, 0x0F	; 15
    117e:	49 ec       	ldi	r20, 0xC9	; 201
    1180:	5f e3       	ldi	r21, 0x3F	; 63
    1182:	0e 94 10 28 	call	0x5020	; 0x5020 <__subsf3>
    1186:	6b 01       	movw	r12, r22
    1188:	7c 01       	movw	r14, r24
			x= (uint8_t) i*cos(winkel) +Px;
    118a:	0e 94 db 28 	call	0x51b6	; 0x51b6 <cos>
    118e:	2b 01       	movw	r4, r22
    1190:	3c 01       	movw	r6, r24
			y= (uint8_t) i*sin(winkel) +Py;
    1192:	c7 01       	movw	r24, r14
    1194:	b6 01       	movw	r22, r12
    1196:	0e 94 3a 2b 	call	0x5674	; 0x5674 <sin>
    119a:	4b 01       	movw	r8, r22
    119c:	5c 01       	movw	r10, r24
    119e:	00 e0       	ldi	r16, 0x00	; 0
    11a0:	10 e0       	ldi	r17, 0x00	; 0

		r=13;
		//Berechnen des Stundenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(stunde*30.0+minute/2.0)*M_PI/180.0-M_PI/2.0;
			x= (uint8_t) i*cos(winkel) +Px;
    11a2:	b8 01       	movw	r22, r16
    11a4:	88 27       	eor	r24, r24
    11a6:	77 fd       	sbrc	r23, 7
    11a8:	80 95       	com	r24
    11aa:	98 2f       	mov	r25, r24
    11ac:	0e 94 79 29 	call	0x52f2	; 0x52f2 <__floatsisf>
    11b0:	6b 01       	movw	r12, r22
    11b2:	7c 01       	movw	r14, r24
			y= (uint8_t) i*sin(winkel) +Py;
    11b4:	a5 01       	movw	r20, r10
    11b6:	94 01       	movw	r18, r8
    11b8:	0e 94 d7 2a 	call	0x55ae	; 0x55ae <__mulsf3>
    11bc:	20 e0       	ldi	r18, 0x00	; 0
    11be:	30 e0       	ldi	r19, 0x00	; 0
    11c0:	48 ef       	ldi	r20, 0xF8	; 248
    11c2:	51 e4       	ldi	r21, 0x41	; 65
    11c4:	0e 94 11 28 	call	0x5022	; 0x5022 <__addsf3>
    11c8:	0e 94 4b 29 	call	0x5296	; 0x5296 <__fixunssfsi>
    11cc:	36 2e       	mov	r3, r22

		r=13;
		//Berechnen des Stundenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(stunde*30.0+minute/2.0)*M_PI/180.0-M_PI/2.0;
			x= (uint8_t) i*cos(winkel) +Px;
    11ce:	a3 01       	movw	r20, r6
    11d0:	92 01       	movw	r18, r4
    11d2:	c7 01       	movw	r24, r14
    11d4:	b6 01       	movw	r22, r12
    11d6:	0e 94 d7 2a 	call	0x55ae	; 0x55ae <__mulsf3>
    11da:	20 e0       	ldi	r18, 0x00	; 0
    11dc:	30 e0       	ldi	r19, 0x00	; 0
    11de:	48 ef       	ldi	r20, 0xF8	; 248
    11e0:	51 e4       	ldi	r21, 0x41	; 65
    11e2:	0e 94 11 28 	call	0x5022	; 0x5022 <__addsf3>
    11e6:	0e 94 4b 29 	call	0x5296	; 0x5296 <__fixunssfsi>
			y= (uint8_t) i*sin(winkel) +Py;

			drawPixel(x,y,0);
    11ea:	20 e0       	ldi	r18, 0x00	; 0
    11ec:	43 2d       	mov	r20, r3
    11ee:	8e 81       	ldd	r24, Y+6	; 0x06
    11f0:	9f 81       	ldd	r25, Y+7	; 0x07
    11f2:	0e 94 d6 04 	call	0x9ac	; 0x9ac <_ZN7Display9drawPixelEhhh>
    11f6:	0f 5f       	subi	r16, 0xFF	; 255
    11f8:	1f 4f       	sbci	r17, 0xFF	; 255
			drawPixel(x,y,0);
		}

		r=13;
		//Berechnen des Stundenzeigers
		for(uint8_t i=0;i<r;i++){
    11fa:	0d 30       	cpi	r16, 0x0D	; 13
    11fc:	11 05       	cpc	r17, r1
    11fe:	89 f6       	brne	.-94     	; 0x11a2 <_ZN7Display6analogEhhhh+0x234>
    1200:	cd c0       	rjmp	.+410    	; 0x139c <_ZN7Display6analogEhhhh+0x42e>
	}
	else{
		r=25;
		//Berechnen des Minutenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(minute*6.0)*M_PI/180.0-M_PI/2.0;
    1202:	64 2f       	mov	r22, r20
    1204:	70 e0       	ldi	r23, 0x00	; 0
    1206:	80 e0       	ldi	r24, 0x00	; 0
    1208:	90 e0       	ldi	r25, 0x00	; 0
    120a:	0e 94 79 29 	call	0x52f2	; 0x52f2 <__floatsisf>
    120e:	69 83       	std	Y+1, r22	; 0x01
    1210:	7a 83       	std	Y+2, r23	; 0x02
    1212:	8b 83       	std	Y+3, r24	; 0x03
    1214:	9c 83       	std	Y+4, r25	; 0x04
    1216:	20 e0       	ldi	r18, 0x00	; 0
    1218:	30 e0       	ldi	r19, 0x00	; 0
    121a:	40 ec       	ldi	r20, 0xC0	; 192
    121c:	50 e4       	ldi	r21, 0x40	; 64
    121e:	0e 94 d7 2a 	call	0x55ae	; 0x55ae <__mulsf3>
    1222:	2b ed       	ldi	r18, 0xDB	; 219
    1224:	3f e0       	ldi	r19, 0x0F	; 15
    1226:	49 e4       	ldi	r20, 0x49	; 73
    1228:	50 e4       	ldi	r21, 0x40	; 64
    122a:	0e 94 d7 2a 	call	0x55ae	; 0x55ae <__mulsf3>
    122e:	20 e0       	ldi	r18, 0x00	; 0
    1230:	30 e0       	ldi	r19, 0x00	; 0
    1232:	44 e3       	ldi	r20, 0x34	; 52
    1234:	53 e4       	ldi	r21, 0x43	; 67
    1236:	0e 94 de 28 	call	0x51bc	; 0x51bc <__divsf3>
    123a:	2b ed       	ldi	r18, 0xDB	; 219
    123c:	3f e0       	ldi	r19, 0x0F	; 15
    123e:	49 ec       	ldi	r20, 0xC9	; 201
    1240:	5f e3       	ldi	r21, 0x3F	; 63
    1242:	0e 94 10 28 	call	0x5020	; 0x5020 <__subsf3>
    1246:	6b 01       	movw	r12, r22
    1248:	7c 01       	movw	r14, r24
			x=(uint8_t) i*cos(winkel)+Px;
    124a:	0e 94 db 28 	call	0x51b6	; 0x51b6 <cos>
    124e:	4b 01       	movw	r8, r22
    1250:	5c 01       	movw	r10, r24
			y=(uint8_t) i*sin(winkel)+Py;
    1252:	c7 01       	movw	r24, r14
    1254:	b6 01       	movw	r22, r12
    1256:	0e 94 3a 2b 	call	0x5674	; 0x5674 <sin>
    125a:	2b 01       	movw	r4, r22
    125c:	3c 01       	movw	r6, r24
    125e:	00 e0       	ldi	r16, 0x00	; 0
    1260:	10 e0       	ldi	r17, 0x00	; 0
	else{
		r=25;
		//Berechnen des Minutenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(minute*6.0)*M_PI/180.0-M_PI/2.0;
			x=(uint8_t) i*cos(winkel)+Px;
    1262:	b8 01       	movw	r22, r16
    1264:	88 27       	eor	r24, r24
    1266:	77 fd       	sbrc	r23, 7
    1268:	80 95       	com	r24
    126a:	98 2f       	mov	r25, r24
    126c:	0e 94 79 29 	call	0x52f2	; 0x52f2 <__floatsisf>
    1270:	6b 01       	movw	r12, r22
    1272:	7c 01       	movw	r14, r24
			y=(uint8_t) i*sin(winkel)+Py;
    1274:	a3 01       	movw	r20, r6
    1276:	92 01       	movw	r18, r4
    1278:	0e 94 d7 2a 	call	0x55ae	; 0x55ae <__mulsf3>
    127c:	20 e0       	ldi	r18, 0x00	; 0
    127e:	30 e0       	ldi	r19, 0x00	; 0
    1280:	48 ef       	ldi	r20, 0xF8	; 248
    1282:	51 e4       	ldi	r21, 0x41	; 65
    1284:	0e 94 11 28 	call	0x5022	; 0x5022 <__addsf3>
    1288:	0e 94 4b 29 	call	0x5296	; 0x5296 <__fixunssfsi>
    128c:	36 2e       	mov	r3, r22
	else{
		r=25;
		//Berechnen des Minutenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(minute*6.0)*M_PI/180.0-M_PI/2.0;
			x=(uint8_t) i*cos(winkel)+Px;
    128e:	a5 01       	movw	r20, r10
    1290:	94 01       	movw	r18, r8
    1292:	c7 01       	movw	r24, r14
    1294:	b6 01       	movw	r22, r12
    1296:	0e 94 d7 2a 	call	0x55ae	; 0x55ae <__mulsf3>
    129a:	20 e0       	ldi	r18, 0x00	; 0
    129c:	30 e0       	ldi	r19, 0x00	; 0
    129e:	48 ef       	ldi	r20, 0xF8	; 248
    12a0:	51 e4       	ldi	r21, 0x41	; 65
    12a2:	0e 94 11 28 	call	0x5022	; 0x5022 <__addsf3>
    12a6:	0e 94 4b 29 	call	0x5296	; 0x5296 <__fixunssfsi>
			y=(uint8_t) i*sin(winkel)+Py;

			drawPixel(x,y,0);
    12aa:	20 e0       	ldi	r18, 0x00	; 0
    12ac:	43 2d       	mov	r20, r3
    12ae:	8e 81       	ldd	r24, Y+6	; 0x06
    12b0:	9f 81       	ldd	r25, Y+7	; 0x07
    12b2:	0e 94 d6 04 	call	0x9ac	; 0x9ac <_ZN7Display9drawPixelEhhh>
    12b6:	0f 5f       	subi	r16, 0xFF	; 255
    12b8:	1f 4f       	sbci	r17, 0xFF	; 255
		}
	}
	else{
		r=25;
		//Berechnen des Minutenzeigers
		for(uint8_t i=0;i<r;i++){
    12ba:	09 31       	cpi	r16, 0x19	; 25
    12bc:	11 05       	cpc	r17, r1
    12be:	89 f6       	brne	.-94     	; 0x1262 <_ZN7Display6analogEhhhh+0x2f4>
		}

		r=17;
		//Berechnen des Stundenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(stunde*30.0+minute/2.0)*M_PI/180.0-M_PI/2.0;
    12c0:	ed 81       	ldd	r30, Y+5	; 0x05
    12c2:	6e 2f       	mov	r22, r30
    12c4:	70 e0       	ldi	r23, 0x00	; 0
    12c6:	80 e0       	ldi	r24, 0x00	; 0
    12c8:	90 e0       	ldi	r25, 0x00	; 0
    12ca:	0e 94 79 29 	call	0x52f2	; 0x52f2 <__floatsisf>
    12ce:	20 e0       	ldi	r18, 0x00	; 0
    12d0:	30 e0       	ldi	r19, 0x00	; 0
    12d2:	40 ef       	ldi	r20, 0xF0	; 240
    12d4:	51 e4       	ldi	r21, 0x41	; 65
    12d6:	0e 94 d7 2a 	call	0x55ae	; 0x55ae <__mulsf3>
    12da:	6b 01       	movw	r12, r22
    12dc:	7c 01       	movw	r14, r24
    12de:	20 e0       	ldi	r18, 0x00	; 0
    12e0:	30 e0       	ldi	r19, 0x00	; 0
    12e2:	40 e0       	ldi	r20, 0x00	; 0
    12e4:	5f e3       	ldi	r21, 0x3F	; 63
    12e6:	69 81       	ldd	r22, Y+1	; 0x01
    12e8:	7a 81       	ldd	r23, Y+2	; 0x02
    12ea:	8b 81       	ldd	r24, Y+3	; 0x03
    12ec:	9c 81       	ldd	r25, Y+4	; 0x04
    12ee:	0e 94 d7 2a 	call	0x55ae	; 0x55ae <__mulsf3>
    12f2:	9b 01       	movw	r18, r22
    12f4:	ac 01       	movw	r20, r24
    12f6:	c7 01       	movw	r24, r14
    12f8:	b6 01       	movw	r22, r12
    12fa:	0e 94 11 28 	call	0x5022	; 0x5022 <__addsf3>
    12fe:	2b ed       	ldi	r18, 0xDB	; 219
    1300:	3f e0       	ldi	r19, 0x0F	; 15
    1302:	49 e4       	ldi	r20, 0x49	; 73
    1304:	50 e4       	ldi	r21, 0x40	; 64
    1306:	0e 94 d7 2a 	call	0x55ae	; 0x55ae <__mulsf3>
    130a:	20 e0       	ldi	r18, 0x00	; 0
    130c:	30 e0       	ldi	r19, 0x00	; 0
    130e:	44 e3       	ldi	r20, 0x34	; 52
    1310:	53 e4       	ldi	r21, 0x43	; 67
    1312:	0e 94 de 28 	call	0x51bc	; 0x51bc <__divsf3>
    1316:	2b ed       	ldi	r18, 0xDB	; 219
    1318:	3f e0       	ldi	r19, 0x0F	; 15
    131a:	49 ec       	ldi	r20, 0xC9	; 201
    131c:	5f e3       	ldi	r21, 0x3F	; 63
    131e:	0e 94 10 28 	call	0x5020	; 0x5020 <__subsf3>
    1322:	6b 01       	movw	r12, r22
    1324:	7c 01       	movw	r14, r24
			x= (uint8_t) i*cos(winkel) +Px;
    1326:	0e 94 db 28 	call	0x51b6	; 0x51b6 <cos>
    132a:	2b 01       	movw	r4, r22
    132c:	3c 01       	movw	r6, r24
			y= (uint8_t) i*sin(winkel) +Py;
    132e:	c7 01       	movw	r24, r14
    1330:	b6 01       	movw	r22, r12
    1332:	0e 94 3a 2b 	call	0x5674	; 0x5674 <sin>
    1336:	4b 01       	movw	r8, r22
    1338:	5c 01       	movw	r10, r24
    133a:	00 e0       	ldi	r16, 0x00	; 0
    133c:	10 e0       	ldi	r17, 0x00	; 0

		r=17;
		//Berechnen des Stundenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(stunde*30.0+minute/2.0)*M_PI/180.0-M_PI/2.0;
			x= (uint8_t) i*cos(winkel) +Px;
    133e:	b8 01       	movw	r22, r16
    1340:	88 27       	eor	r24, r24
    1342:	77 fd       	sbrc	r23, 7
    1344:	80 95       	com	r24
    1346:	98 2f       	mov	r25, r24
    1348:	0e 94 79 29 	call	0x52f2	; 0x52f2 <__floatsisf>
    134c:	6b 01       	movw	r12, r22
    134e:	7c 01       	movw	r14, r24
			y= (uint8_t) i*sin(winkel) +Py;
    1350:	a5 01       	movw	r20, r10
    1352:	94 01       	movw	r18, r8
    1354:	0e 94 d7 2a 	call	0x55ae	; 0x55ae <__mulsf3>
    1358:	20 e0       	ldi	r18, 0x00	; 0
    135a:	30 e0       	ldi	r19, 0x00	; 0
    135c:	48 ef       	ldi	r20, 0xF8	; 248
    135e:	51 e4       	ldi	r21, 0x41	; 65
    1360:	0e 94 11 28 	call	0x5022	; 0x5022 <__addsf3>
    1364:	0e 94 4b 29 	call	0x5296	; 0x5296 <__fixunssfsi>
    1368:	36 2e       	mov	r3, r22

		r=17;
		//Berechnen des Stundenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(stunde*30.0+minute/2.0)*M_PI/180.0-M_PI/2.0;
			x= (uint8_t) i*cos(winkel) +Px;
    136a:	a3 01       	movw	r20, r6
    136c:	92 01       	movw	r18, r4
    136e:	c7 01       	movw	r24, r14
    1370:	b6 01       	movw	r22, r12
    1372:	0e 94 d7 2a 	call	0x55ae	; 0x55ae <__mulsf3>
    1376:	20 e0       	ldi	r18, 0x00	; 0
    1378:	30 e0       	ldi	r19, 0x00	; 0
    137a:	48 ef       	ldi	r20, 0xF8	; 248
    137c:	51 e4       	ldi	r21, 0x41	; 65
    137e:	0e 94 11 28 	call	0x5022	; 0x5022 <__addsf3>
    1382:	0e 94 4b 29 	call	0x5296	; 0x5296 <__fixunssfsi>
			y= (uint8_t) i*sin(winkel) +Py;

			drawPixel(x,y,0);
    1386:	20 e0       	ldi	r18, 0x00	; 0
    1388:	43 2d       	mov	r20, r3
    138a:	8e 81       	ldd	r24, Y+6	; 0x06
    138c:	9f 81       	ldd	r25, Y+7	; 0x07
    138e:	0e 94 d6 04 	call	0x9ac	; 0x9ac <_ZN7Display9drawPixelEhhh>
    1392:	0f 5f       	subi	r16, 0xFF	; 255
    1394:	1f 4f       	sbci	r17, 0xFF	; 255
			drawPixel(x,y,0);
		}

		r=17;
		//Berechnen des Stundenzeigers
		for(uint8_t i=0;i<r;i++){
    1396:	01 31       	cpi	r16, 0x11	; 17
    1398:	11 05       	cpc	r17, r1
    139a:	89 f6       	brne	.-94     	; 0x133e <_ZN7Display6analogEhhhh+0x3d0>
		}
	}
	

	//Anzeige der Zahlen
	draw_ASCI('1',32-charsize,0);
    139c:	20 e0       	ldi	r18, 0x00	; 0
    139e:	4a e1       	ldi	r20, 0x1A	; 26
    13a0:	61 e3       	ldi	r22, 0x31	; 49
    13a2:	8e 81       	ldd	r24, Y+6	; 0x06
    13a4:	9f 81       	ldd	r25, Y+7	; 0x07
    13a6:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <_ZN7Display9draw_ASCIEhhh>
	draw_ASCI('2',32,0);
    13aa:	20 e0       	ldi	r18, 0x00	; 0
    13ac:	40 e2       	ldi	r20, 0x20	; 32
    13ae:	62 e3       	ldi	r22, 0x32	; 50
    13b0:	8e 81       	ldd	r24, Y+6	; 0x06
    13b2:	9f 81       	ldd	r25, Y+7	; 0x07
    13b4:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <_ZN7Display9draw_ASCIEhhh>
	draw_ASCI('3',64-charsize,4*charhighte-charhighte/2);
    13b8:	2c e1       	ldi	r18, 0x1C	; 28
    13ba:	4a e3       	ldi	r20, 0x3A	; 58
    13bc:	63 e3       	ldi	r22, 0x33	; 51
    13be:	8e 81       	ldd	r24, Y+6	; 0x06
    13c0:	9f 81       	ldd	r25, Y+7	; 0x07
    13c2:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <_ZN7Display9draw_ASCIEhhh>
	draw_ASCI('6',32-charsize/2,7*charhighte);
    13c6:	28 e3       	ldi	r18, 0x38	; 56
    13c8:	4d e1       	ldi	r20, 0x1D	; 29
    13ca:	66 e3       	ldi	r22, 0x36	; 54
    13cc:	8e 81       	ldd	r24, Y+6	; 0x06
    13ce:	9f 81       	ldd	r25, Y+7	; 0x07
    13d0:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <_ZN7Display9draw_ASCIEhhh>
	draw_ASCI('9',0,4*charhighte-charhighte/2);
    13d4:	2c e1       	ldi	r18, 0x1C	; 28
    13d6:	40 e0       	ldi	r20, 0x00	; 0
    13d8:	69 e3       	ldi	r22, 0x39	; 57
    13da:	8e 81       	ldd	r24, Y+6	; 0x06
    13dc:	9f 81       	ldd	r25, Y+7	; 0x07
    13de:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <_ZN7Display9draw_ASCIEhhh>

	//anzeige des Rings fuer die Restlichen Stunden Zahlen
	//1
	drawPixel(26*cos((30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
    13e2:	20 e0       	ldi	r18, 0x00	; 0
    13e4:	48 e0       	ldi	r20, 0x08	; 8
    13e6:	6c e2       	ldi	r22, 0x2C	; 44
    13e8:	8e 81       	ldd	r24, Y+6	; 0x06
    13ea:	9f 81       	ldd	r25, Y+7	; 0x07
    13ec:	0e 94 d6 04 	call	0x9ac	; 0x9ac <_ZN7Display9drawPixelEhhh>
	//2
	drawPixel(26*cos((2*30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((2*30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
    13f0:	20 e0       	ldi	r18, 0x00	; 0
    13f2:	42 e1       	ldi	r20, 0x12	; 18
    13f4:	65 e3       	ldi	r22, 0x35	; 53
    13f6:	8e 81       	ldd	r24, Y+6	; 0x06
    13f8:	9f 81       	ldd	r25, Y+7	; 0x07
    13fa:	0e 94 d6 04 	call	0x9ac	; 0x9ac <_ZN7Display9drawPixelEhhh>
	//4
	drawPixel(26*cos((4*30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((4*30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
    13fe:	20 e0       	ldi	r18, 0x00	; 0
    1400:	4c e2       	ldi	r20, 0x2C	; 44
    1402:	65 e3       	ldi	r22, 0x35	; 53
    1404:	8e 81       	ldd	r24, Y+6	; 0x06
    1406:	9f 81       	ldd	r25, Y+7	; 0x07
    1408:	0e 94 d6 04 	call	0x9ac	; 0x9ac <_ZN7Display9drawPixelEhhh>
	//5
	drawPixel(26*cos((5*30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((5*30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
    140c:	20 e0       	ldi	r18, 0x00	; 0
    140e:	45 e3       	ldi	r20, 0x35	; 53
    1410:	6b e2       	ldi	r22, 0x2B	; 43
    1412:	8e 81       	ldd	r24, Y+6	; 0x06
    1414:	9f 81       	ldd	r25, Y+7	; 0x07
    1416:	0e 94 d6 04 	call	0x9ac	; 0x9ac <_ZN7Display9drawPixelEhhh>
	//7
	drawPixel(26*cos((7*30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((7*30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
    141a:	20 e0       	ldi	r18, 0x00	; 0
    141c:	45 e3       	ldi	r20, 0x35	; 53
    141e:	61 e1       	ldi	r22, 0x11	; 17
    1420:	8e 81       	ldd	r24, Y+6	; 0x06
    1422:	9f 81       	ldd	r25, Y+7	; 0x07
    1424:	0e 94 d6 04 	call	0x9ac	; 0x9ac <_ZN7Display9drawPixelEhhh>
	//8
	drawPixel(26*cos((8*30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((8*30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
    1428:	20 e0       	ldi	r18, 0x00	; 0
    142a:	4c e2       	ldi	r20, 0x2C	; 44
    142c:	68 e0       	ldi	r22, 0x08	; 8
    142e:	8e 81       	ldd	r24, Y+6	; 0x06
    1430:	9f 81       	ldd	r25, Y+7	; 0x07
    1432:	0e 94 d6 04 	call	0x9ac	; 0x9ac <_ZN7Display9drawPixelEhhh>
	//10
	drawPixel(26*cos((10*30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((10*30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
    1436:	20 e0       	ldi	r18, 0x00	; 0
    1438:	41 e1       	ldi	r20, 0x11	; 17
    143a:	68 e0       	ldi	r22, 0x08	; 8
    143c:	8e 81       	ldd	r24, Y+6	; 0x06
    143e:	9f 81       	ldd	r25, Y+7	; 0x07
    1440:	0e 94 d6 04 	call	0x9ac	; 0x9ac <_ZN7Display9drawPixelEhhh>
	//11
	drawPixel(26*cos((11*30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((11*30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
    1444:	20 e0       	ldi	r18, 0x00	; 0
    1446:	48 e0       	ldi	r20, 0x08	; 8
    1448:	62 e1       	ldi	r22, 0x12	; 18
    144a:	8e 81       	ldd	r24, Y+6	; 0x06
    144c:	9f 81       	ldd	r25, Y+7	; 0x07
    144e:	0e 94 d6 04 	call	0x9ac	; 0x9ac <_ZN7Display9drawPixelEhhh>
}
    1452:	27 96       	adiw	r28, 0x07	; 7
    1454:	0f b6       	in	r0, 0x3f	; 63
    1456:	f8 94       	cli
    1458:	de bf       	out	0x3e, r29	; 62
    145a:	0f be       	out	0x3f, r0	; 63
    145c:	cd bf       	out	0x3d, r28	; 61
    145e:	df 91       	pop	r29
    1460:	cf 91       	pop	r28
    1462:	1f 91       	pop	r17
    1464:	0f 91       	pop	r16
    1466:	ff 90       	pop	r15
    1468:	ef 90       	pop	r14
    146a:	df 90       	pop	r13
    146c:	cf 90       	pop	r12
    146e:	bf 90       	pop	r11
    1470:	af 90       	pop	r10
    1472:	9f 90       	pop	r9
    1474:	8f 90       	pop	r8
    1476:	7f 90       	pop	r7
    1478:	6f 90       	pop	r6
    147a:	5f 90       	pop	r5
    147c:	4f 90       	pop	r4
    147e:	3f 90       	pop	r3
    1480:	2f 90       	pop	r2
    1482:	08 95       	ret

00001484 <_Z8ADC_Readh>:
#ifndef ADC_H_
#define ADC_H_

uint16_t ADC_Read( uint8_t channel )
{
	ADMUX = (ADMUX & ~(0x1F)) | (channel & 0x1F);
    1484:	ec e7       	ldi	r30, 0x7C	; 124
    1486:	f0 e0       	ldi	r31, 0x00	; 0
    1488:	90 81       	ld	r25, Z
    148a:	8f 71       	andi	r24, 0x1F	; 31
    148c:	90 7e       	andi	r25, 0xE0	; 224
    148e:	98 2b       	or	r25, r24
    1490:	90 83       	st	Z, r25
	ADCSRA |= (1<<ADSC);
    1492:	ea e7       	ldi	r30, 0x7A	; 122
    1494:	f0 e0       	ldi	r31, 0x00	; 0
    1496:	80 81       	ld	r24, Z
    1498:	80 64       	ori	r24, 0x40	; 64
    149a:	80 83       	st	Z, r24
	while (ADCSRA & (1<<ADSC) ) {
    149c:	80 81       	ld	r24, Z
    149e:	86 fd       	sbrc	r24, 6
    14a0:	fd cf       	rjmp	.-6      	; 0x149c <_Z8ADC_Readh+0x18>
	}
	return ADCW;
    14a2:	80 91 78 00 	lds	r24, 0x0078
    14a6:	90 91 79 00 	lds	r25, 0x0079
}
    14aa:	08 95       	ret

000014ac <_Z14Batteriestatusv>:
	return (uint16_t)( sum / nsamples );
}

double batterie;
int8_t Batteriestatus(){
	uint16_t ADCwert=ADC_Read(0);
    14ac:	80 e0       	ldi	r24, 0x00	; 0
    14ae:	0e 94 42 0a 	call	0x1484	; 0x1484 <_Z8ADC_Readh>
	batterie = (ADCwert/1023.0)*3.2*SPANNUNGSTEILER;
    14b2:	bc 01       	movw	r22, r24
    14b4:	80 e0       	ldi	r24, 0x00	; 0
    14b6:	90 e0       	ldi	r25, 0x00	; 0
    14b8:	0e 94 77 29 	call	0x52ee	; 0x52ee <__floatunsisf>
    14bc:	20 e0       	ldi	r18, 0x00	; 0
    14be:	30 ec       	ldi	r19, 0xC0	; 192
    14c0:	4f e7       	ldi	r20, 0x7F	; 127
    14c2:	54 e4       	ldi	r21, 0x44	; 68
    14c4:	0e 94 de 28 	call	0x51bc	; 0x51bc <__divsf3>
    14c8:	2d ec       	ldi	r18, 0xCD	; 205
    14ca:	3c ec       	ldi	r19, 0xCC	; 204
    14cc:	4c e4       	ldi	r20, 0x4C	; 76
    14ce:	50 e4       	ldi	r21, 0x40	; 64
    14d0:	0e 94 d7 2a 	call	0x55ae	; 0x55ae <__mulsf3>
    14d4:	2b e7       	ldi	r18, 0x7B	; 123
    14d6:	34 e1       	ldi	r19, 0x14	; 20
    14d8:	4e ef       	ldi	r20, 0xFE	; 254
    14da:	5f e3       	ldi	r21, 0x3F	; 63
    14dc:	0e 94 d7 2a 	call	0x55ae	; 0x55ae <__mulsf3>
    14e0:	60 93 2b 03 	sts	0x032B, r22
    14e4:	70 93 2c 03 	sts	0x032C, r23
    14e8:	80 93 2d 03 	sts	0x032D, r24
    14ec:	90 93 2e 03 	sts	0x032E, r25
	return ((batterie-3.0)/(4.2-3.0)*100);
    14f0:	20 e0       	ldi	r18, 0x00	; 0
    14f2:	30 e0       	ldi	r19, 0x00	; 0
    14f4:	40 e4       	ldi	r20, 0x40	; 64
    14f6:	50 e4       	ldi	r21, 0x40	; 64
    14f8:	0e 94 10 28 	call	0x5020	; 0x5020 <__subsf3>
    14fc:	28 e9       	ldi	r18, 0x98	; 152
    14fe:	39 e9       	ldi	r19, 0x99	; 153
    1500:	49 e9       	ldi	r20, 0x99	; 153
    1502:	5f e3       	ldi	r21, 0x3F	; 63
    1504:	0e 94 de 28 	call	0x51bc	; 0x51bc <__divsf3>
    1508:	20 e0       	ldi	r18, 0x00	; 0
    150a:	30 e0       	ldi	r19, 0x00	; 0
    150c:	48 ec       	ldi	r20, 0xC8	; 200
    150e:	52 e4       	ldi	r21, 0x42	; 66
    1510:	0e 94 d7 2a 	call	0x55ae	; 0x55ae <__mulsf3>
    1514:	0e 94 46 29 	call	0x528c	; 0x528c <__fixsfsi>
    1518:	86 2f       	mov	r24, r22
}
    151a:	08 95       	ret

0000151c <_Z14willkommenpagev>:
#ifndef SEITEN_H_
#define SEITEN_H_

//Diese Funktionen schreiben nur in den Framebuffer und das Schreiben passiert in der Main ueber einen Interupt

void willkommenpage(){
    151c:	cf 92       	push	r12
    151e:	df 92       	push	r13
    1520:	ef 92       	push	r14
    1522:	ff 92       	push	r15
    1524:	0f 93       	push	r16
    1526:	1f 93       	push	r17
    1528:	cf 93       	push	r28
    152a:	df 93       	push	r29
    152c:	cd b7       	in	r28, 0x3d	; 61
    152e:	de b7       	in	r29, 0x3e	; 62
    1530:	64 97       	sbiw	r28, 0x14	; 20
    1532:	0f b6       	in	r0, 0x3f	; 63
    1534:	f8 94       	cli
    1536:	de bf       	out	0x3e, r29	; 62
    1538:	0f be       	out	0x3f, r0	; 63
    153a:	cd bf       	out	0x3d, r28	; 61
	char buffer[20];
	uint8_t buffersize;
	oled.clearFrame();
    153c:	82 e4       	ldi	r24, 0x42	; 66
    153e:	93 e0       	ldi	r25, 0x03	; 3
    1540:	0e 94 ed 03 	call	0x7da	; 0x7da <_ZN7Display10clearFrameEv>
	buffersize=sprintf(buffer,"Fahradcomputer");
    1544:	8f e0       	ldi	r24, 0x0F	; 15
    1546:	e0 e0       	ldi	r30, 0x00	; 0
    1548:	f1 e0       	ldi	r31, 0x01	; 1
    154a:	8e 01       	movw	r16, r28
    154c:	0f 5f       	subi	r16, 0xFF	; 255
    154e:	1f 4f       	sbci	r17, 0xFF	; 255
    1550:	d8 01       	movw	r26, r16
    1552:	01 90       	ld	r0, Z+
    1554:	0d 92       	st	X+, r0
    1556:	8a 95       	dec	r24
    1558:	e1 f7       	brne	.-8      	; 0x1552 <_Z14willkommenpagev+0x36>
    155a:	c0 2e       	mov	r12, r16
    155c:	d1 2e       	mov	r13, r17
    155e:	78 01       	movw	r14, r16
    1560:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0; i < buffersize;i++){
		oled.draw_ASCI(buffer[i],i*charsize,0);
    1562:	f7 01       	movw	r30, r14
    1564:	61 91       	ld	r22, Z+
    1566:	7f 01       	movw	r14, r30
    1568:	20 e0       	ldi	r18, 0x00	; 0
    156a:	41 2f       	mov	r20, r17
    156c:	82 e4       	ldi	r24, 0x42	; 66
    156e:	93 e0       	ldi	r25, 0x03	; 3
    1570:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <_ZN7Display9draw_ASCIEhhh>
    1574:	1a 5f       	subi	r17, 0xFA	; 250
void willkommenpage(){
	char buffer[20];
	uint8_t buffersize;
	oled.clearFrame();
	buffersize=sprintf(buffer,"Fahradcomputer");
	for(uint8_t i=0; i < buffersize;i++){
    1576:	14 35       	cpi	r17, 0x54	; 84
    1578:	a1 f7       	brne	.-24     	; 0x1562 <_Z14willkommenpagev+0x46>
		oled.draw_ASCI(buffer[i],i*charsize,0);
	}
	buffersize=sprintf(buffer,"--------------");
    157a:	8f e0       	ldi	r24, 0x0F	; 15
    157c:	ef e0       	ldi	r30, 0x0F	; 15
    157e:	f1 e0       	ldi	r31, 0x01	; 1
    1580:	de 01       	movw	r26, r28
    1582:	11 96       	adiw	r26, 0x01	; 1
    1584:	01 90       	ld	r0, Z+
    1586:	0d 92       	st	X+, r0
    1588:	8a 95       	dec	r24
    158a:	e1 f7       	brne	.-8      	; 0x1584 <_Z14willkommenpagev+0x68>
    158c:	ec 2c       	mov	r14, r12
    158e:	fd 2c       	mov	r15, r13
    1590:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0; i < buffersize;i++){
		oled.draw_ASCI(buffer[i],i*charsize,8);
    1592:	f7 01       	movw	r30, r14
    1594:	61 91       	ld	r22, Z+
    1596:	7f 01       	movw	r14, r30
    1598:	28 e0       	ldi	r18, 0x08	; 8
    159a:	41 2f       	mov	r20, r17
    159c:	82 e4       	ldi	r24, 0x42	; 66
    159e:	93 e0       	ldi	r25, 0x03	; 3
    15a0:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <_ZN7Display9draw_ASCIEhhh>
    15a4:	1a 5f       	subi	r17, 0xFA	; 250
	buffersize=sprintf(buffer,"Fahradcomputer");
	for(uint8_t i=0; i < buffersize;i++){
		oled.draw_ASCI(buffer[i],i*charsize,0);
	}
	buffersize=sprintf(buffer,"--------------");
	for(uint8_t i=0; i < buffersize;i++){
    15a6:	14 35       	cpi	r17, 0x54	; 84
    15a8:	a1 f7       	brne	.-24     	; 0x1592 <_Z14willkommenpagev+0x76>
		oled.draw_ASCI(buffer[i],i*charsize,8);
	}
	buffersize=sprintf(buffer,"Version: %.2f",VERSIONSNUMMER);
    15aa:	8f e3       	ldi	r24, 0x3F	; 63
    15ac:	8f 93       	push	r24
    15ae:	85 eb       	ldi	r24, 0xB5	; 181
    15b0:	8f 93       	push	r24
    15b2:	82 ec       	ldi	r24, 0xC2	; 194
    15b4:	8f 93       	push	r24
    15b6:	8f e8       	ldi	r24, 0x8F	; 143
    15b8:	8f 93       	push	r24
    15ba:	8e e1       	ldi	r24, 0x1E	; 30
    15bc:	91 e0       	ldi	r25, 0x01	; 1
    15be:	9f 93       	push	r25
    15c0:	8f 93       	push	r24
    15c2:	ce 01       	movw	r24, r28
    15c4:	01 96       	adiw	r24, 0x01	; 1
    15c6:	9f 93       	push	r25
    15c8:	8f 93       	push	r24
    15ca:	0e 94 5a 30 	call	0x60b4	; 0x60b4 <sprintf>
	for(uint8_t i=0; i < buffersize;i++){
    15ce:	0f b6       	in	r0, 0x3f	; 63
    15d0:	f8 94       	cli
    15d2:	de bf       	out	0x3e, r29	; 62
    15d4:	0f be       	out	0x3f, r0	; 63
    15d6:	cd bf       	out	0x3d, r28	; 61
    15d8:	88 23       	and	r24, r24
    15da:	d1 f0       	breq	.+52     	; 0x1610 <_Z14willkommenpagev+0xf4>
    15dc:	81 50       	subi	r24, 0x01	; 1
    15de:	68 94       	set
    15e0:	ee 24       	eor	r14, r14
    15e2:	e1 f8       	bld	r14, 1
    15e4:	f1 2c       	mov	r15, r1
    15e6:	ec 0e       	add	r14, r28
    15e8:	fd 1e       	adc	r15, r29
    15ea:	e8 0e       	add	r14, r24
    15ec:	f1 1c       	adc	r15, r1
    15ee:	0c 2d       	mov	r16, r12
    15f0:	1d 2d       	mov	r17, r13
    15f2:	d1 2c       	mov	r13, r1
		oled.draw_ASCI(buffer[i],i*charsize,32);
    15f4:	f8 01       	movw	r30, r16
    15f6:	61 91       	ld	r22, Z+
    15f8:	8f 01       	movw	r16, r30
    15fa:	20 e2       	ldi	r18, 0x20	; 32
    15fc:	4d 2d       	mov	r20, r13
    15fe:	82 e4       	ldi	r24, 0x42	; 66
    1600:	93 e0       	ldi	r25, 0x03	; 3
    1602:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <_ZN7Display9draw_ASCIEhhh>
    1606:	f6 e0       	ldi	r31, 0x06	; 6
    1608:	df 0e       	add	r13, r31
	buffersize=sprintf(buffer,"--------------");
	for(uint8_t i=0; i < buffersize;i++){
		oled.draw_ASCI(buffer[i],i*charsize,8);
	}
	buffersize=sprintf(buffer,"Version: %.2f",VERSIONSNUMMER);
	for(uint8_t i=0; i < buffersize;i++){
    160a:	0e 15       	cp	r16, r14
    160c:	1f 05       	cpc	r17, r15
    160e:	91 f7       	brne	.-28     	; 0x15f4 <_Z14willkommenpagev+0xd8>
		oled.draw_ASCI(buffer[i],i*charsize,32);

	}
	oled.sendFrame();
    1610:	82 e4       	ldi	r24, 0x42	; 66
    1612:	93 e0       	ldi	r25, 0x03	; 3
    1614:	0e 94 93 04 	call	0x926	; 0x926 <_ZN7Display9sendFrameEv>
	oled.clearFrame();
    1618:	82 e4       	ldi	r24, 0x42	; 66
    161a:	93 e0       	ldi	r25, 0x03	; 3
    161c:	0e 94 ed 03 	call	0x7da	; 0x7da <_ZN7Display10clearFrameEv>
    1620:	85 e0       	ldi	r24, 0x05	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1622:	2f e7       	ldi	r18, 0x7F	; 127
    1624:	38 e3       	ldi	r19, 0x38	; 56
    1626:	91 e0       	ldi	r25, 0x01	; 1
    1628:	21 50       	subi	r18, 0x01	; 1
    162a:	30 40       	sbci	r19, 0x00	; 0
    162c:	90 40       	sbci	r25, 0x00	; 0
    162e:	e1 f7       	brne	.-8      	; 0x1628 <_Z14willkommenpagev+0x10c>
    1630:	00 c0       	rjmp	.+0      	; 0x1632 <_Z14willkommenpagev+0x116>
    1632:	00 00       	nop
    1634:	ef e7       	ldi	r30, 0x7F	; 127
    1636:	f8 e3       	ldi	r31, 0x38	; 56
    1638:	21 e0       	ldi	r18, 0x01	; 1
    163a:	e1 50       	subi	r30, 0x01	; 1
    163c:	f0 40       	sbci	r31, 0x00	; 0
    163e:	20 40       	sbci	r18, 0x00	; 0
    1640:	e1 f7       	brne	.-8      	; 0x163a <_Z14willkommenpagev+0x11e>
    1642:	00 c0       	rjmp	.+0      	; 0x1644 <_Z14willkommenpagev+0x128>
    1644:	00 00       	nop
    1646:	81 50       	subi	r24, 0x01	; 1
	for (uint8_t i=0;i<5;i++)
    1648:	61 f7       	brne	.-40     	; 0x1622 <_Z14willkommenpagev+0x106>
	{
		_delay_ms(50);
		_delay_ms(50);
	}
}
    164a:	64 96       	adiw	r28, 0x14	; 20
    164c:	0f b6       	in	r0, 0x3f	; 63
    164e:	f8 94       	cli
    1650:	de bf       	out	0x3e, r29	; 62
    1652:	0f be       	out	0x3f, r0	; 63
    1654:	cd bf       	out	0x3d, r28	; 61
    1656:	df 91       	pop	r29
    1658:	cf 91       	pop	r28
    165a:	1f 91       	pop	r17
    165c:	0f 91       	pop	r16
    165e:	ff 90       	pop	r15
    1660:	ef 90       	pop	r14
    1662:	df 90       	pop	r13
    1664:	cf 90       	pop	r12
    1666:	08 95       	ret

00001668 <_Z6headerh>:

void header(uint8_t page){
    1668:	ef 92       	push	r14
    166a:	ff 92       	push	r15
    166c:	0f 93       	push	r16
    166e:	1f 93       	push	r17
    1670:	cf 93       	push	r28
    1672:	df 93       	push	r29
    1674:	cd b7       	in	r28, 0x3d	; 61
    1676:	de b7       	in	r29, 0x3e	; 62
    1678:	64 97       	sbiw	r28, 0x14	; 20
    167a:	0f b6       	in	r0, 0x3f	; 63
    167c:	f8 94       	cli
    167e:	de bf       	out	0x3e, r29	; 62
    1680:	0f be       	out	0x3f, r0	; 63
    1682:	cd bf       	out	0x3d, r28	; 61
	char buffer[20];
	uint8_t buffersize=0;;
	switch (page) {
    1684:	81 30       	cpi	r24, 0x01	; 1
    1686:	09 f4       	brne	.+2      	; 0x168a <_Z6headerh+0x22>
    1688:	54 c0       	rjmp	.+168    	; 0x1732 <_Z6headerh+0xca>
    168a:	20 f0       	brcs	.+8      	; 0x1694 <_Z6headerh+0x2c>
    168c:	82 30       	cpi	r24, 0x02	; 2
    168e:	09 f4       	brne	.+2      	; 0x1692 <_Z6headerh+0x2a>
    1690:	8c c0       	rjmp	.+280    	; 0x17aa <_Z6headerh+0x142>
    1692:	c5 c0       	rjmp	.+394    	; 0x181e <_Z6headerh+0x1b6>
    1694:	0f 2e       	mov	r0, r31
    1696:	f9 e7       	ldi	r31, 0x79	; 121
    1698:	ef 2e       	mov	r14, r31
    169a:	f7 e0       	ldi	r31, 0x07	; 7
    169c:	ff 2e       	mov	r15, r31
    169e:	f0 2d       	mov	r31, r0
    16a0:	10 e0       	ldi	r17, 0x00	; 0
		case 0:	//standard Header fuer fast alle Pages
			for(uint8_t i=0;i<8;i++){
				oled.draw_ASCI(rtc.msg_uhr[i],i*charsize,0);
    16a2:	f7 01       	movw	r30, r14
    16a4:	61 91       	ld	r22, Z+
    16a6:	7f 01       	movw	r14, r30
    16a8:	20 e0       	ldi	r18, 0x00	; 0
    16aa:	41 2f       	mov	r20, r17
    16ac:	82 e4       	ldi	r24, 0x42	; 66
    16ae:	93 e0       	ldi	r25, 0x03	; 3
    16b0:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <_ZN7Display9draw_ASCIEhhh>
    16b4:	1a 5f       	subi	r17, 0xFA	; 250
void header(uint8_t page){
	char buffer[20];
	uint8_t buffersize=0;;
	switch (page) {
		case 0:	//standard Header fuer fast alle Pages
			for(uint8_t i=0;i<8;i++){
    16b6:	10 33       	cpi	r17, 0x30	; 48
    16b8:	a1 f7       	brne	.-24     	; 0x16a2 <_Z6headerh+0x3a>
				oled.draw_ASCI(rtc.msg_uhr[i],i*charsize,0);
			}
			buffersize=sprintf(buffer,"Bat: %i%%",Batteriestatus());
    16ba:	0e 94 56 0a 	call	0x14ac	; 0x14ac <_Z14Batteriestatusv>
    16be:	28 2f       	mov	r18, r24
    16c0:	33 27       	eor	r19, r19
    16c2:	27 fd       	sbrc	r18, 7
    16c4:	30 95       	com	r19
    16c6:	3f 93       	push	r19
    16c8:	8f 93       	push	r24
    16ca:	8c e2       	ldi	r24, 0x2C	; 44
    16cc:	91 e0       	ldi	r25, 0x01	; 1
    16ce:	9f 93       	push	r25
    16d0:	8f 93       	push	r24
    16d2:	ce 01       	movw	r24, r28
    16d4:	01 96       	adiw	r24, 0x01	; 1
    16d6:	9f 93       	push	r25
    16d8:	8f 93       	push	r24
    16da:	0e 94 5a 30 	call	0x60b4	; 0x60b4 <sprintf>
			for(uint8_t i=((SSD1306_WIDTH/charsize)-buffersize);i<(SSD1306_WIDTH/charsize);i++){
    16de:	25 e1       	ldi	r18, 0x15	; 21
    16e0:	f2 2e       	mov	r15, r18
    16e2:	f8 1a       	sub	r15, r24
    16e4:	0f 90       	pop	r0
    16e6:	0f 90       	pop	r0
    16e8:	0f 90       	pop	r0
    16ea:	0f 90       	pop	r0
    16ec:	0f 90       	pop	r0
    16ee:	0f 90       	pop	r0
    16f0:	f4 e1       	ldi	r31, 0x14	; 20
    16f2:	ff 15       	cp	r31, r15
    16f4:	08 f4       	brcc	.+2      	; 0x16f8 <_Z6headerh+0x90>
    16f6:	93 c0       	rjmp	.+294    	; 0x181e <_Z6headerh+0x1b6>
    16f8:	ef 2c       	mov	r14, r15
    16fa:	ee 0c       	add	r14, r14
    16fc:	ef 0c       	add	r14, r15
    16fe:	ee 0c       	add	r14, r14
				oled.draw_ASCI(buffer[i-((SSD1306_WIDTH/charsize)-buffersize)],i*charsize,0);
    1700:	8c 01       	movw	r16, r24
    1702:	11 27       	eor	r17, r17
    1704:	e1 e0       	ldi	r30, 0x01	; 1
    1706:	f0 e0       	ldi	r31, 0x00	; 0
    1708:	ec 0f       	add	r30, r28
    170a:	fd 1f       	adc	r31, r29
    170c:	ef 0d       	add	r30, r15
    170e:	f1 1d       	adc	r31, r1
    1710:	e0 0f       	add	r30, r16
    1712:	f1 1f       	adc	r31, r17
    1714:	75 97       	sbiw	r30, 0x15	; 21
    1716:	20 e0       	ldi	r18, 0x00	; 0
    1718:	4e 2d       	mov	r20, r14
    171a:	60 81       	ld	r22, Z
    171c:	82 e4       	ldi	r24, 0x42	; 66
    171e:	93 e0       	ldi	r25, 0x03	; 3
    1720:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <_ZN7Display9draw_ASCIEhhh>
		case 0:	//standard Header fuer fast alle Pages
			for(uint8_t i=0;i<8;i++){
				oled.draw_ASCI(rtc.msg_uhr[i],i*charsize,0);
			}
			buffersize=sprintf(buffer,"Bat: %i%%",Batteriestatus());
			for(uint8_t i=((SSD1306_WIDTH/charsize)-buffersize);i<(SSD1306_WIDTH/charsize);i++){
    1724:	f3 94       	inc	r15
    1726:	26 e0       	ldi	r18, 0x06	; 6
    1728:	e2 0e       	add	r14, r18
    172a:	85 e1       	ldi	r24, 0x15	; 21
    172c:	f8 12       	cpse	r15, r24
    172e:	ea cf       	rjmp	.-44     	; 0x1704 <_Z6headerh+0x9c>
    1730:	76 c0       	rjmp	.+236    	; 0x181e <_Z6headerh+0x1b6>
				oled.draw_ASCI(buffer[i-((SSD1306_WIDTH/charsize)-buffersize)],i*charsize,0);
			}
			break;
		case 1:
			buffersize=sprintf(buffer,"Bat: %i%%",Batteriestatus());
    1732:	0e 94 56 0a 	call	0x14ac	; 0x14ac <_Z14Batteriestatusv>
    1736:	28 2f       	mov	r18, r24
    1738:	33 27       	eor	r19, r19
    173a:	27 fd       	sbrc	r18, 7
    173c:	30 95       	com	r19
    173e:	3f 93       	push	r19
    1740:	8f 93       	push	r24
    1742:	8c e2       	ldi	r24, 0x2C	; 44
    1744:	91 e0       	ldi	r25, 0x01	; 1
    1746:	9f 93       	push	r25
    1748:	8f 93       	push	r24
    174a:	ce 01       	movw	r24, r28
    174c:	01 96       	adiw	r24, 0x01	; 1
    174e:	9f 93       	push	r25
    1750:	8f 93       	push	r24
    1752:	0e 94 5a 30 	call	0x60b4	; 0x60b4 <sprintf>
			for(uint8_t i=((SSD1306_WIDTH/charsize)-buffersize);i<(SSD1306_WIDTH/charsize);i++){
    1756:	25 e1       	ldi	r18, 0x15	; 21
    1758:	f2 2e       	mov	r15, r18
    175a:	f8 1a       	sub	r15, r24
    175c:	0f 90       	pop	r0
    175e:	0f 90       	pop	r0
    1760:	0f 90       	pop	r0
    1762:	0f 90       	pop	r0
    1764:	0f 90       	pop	r0
    1766:	0f 90       	pop	r0
    1768:	e4 e1       	ldi	r30, 0x14	; 20
    176a:	ef 15       	cp	r30, r15
    176c:	08 f4       	brcc	.+2      	; 0x1770 <_Z6headerh+0x108>
    176e:	57 c0       	rjmp	.+174    	; 0x181e <_Z6headerh+0x1b6>
    1770:	ef 2c       	mov	r14, r15
    1772:	ee 0c       	add	r14, r14
    1774:	ef 0c       	add	r14, r15
    1776:	ee 0c       	add	r14, r14
				oled.draw_ASCI(buffer[i-((SSD1306_WIDTH/charsize)-buffersize)],i*charsize,0);
    1778:	8c 01       	movw	r16, r24
    177a:	11 27       	eor	r17, r17
    177c:	e1 e0       	ldi	r30, 0x01	; 1
    177e:	f0 e0       	ldi	r31, 0x00	; 0
    1780:	ec 0f       	add	r30, r28
    1782:	fd 1f       	adc	r31, r29
    1784:	ef 0d       	add	r30, r15
    1786:	f1 1d       	adc	r31, r1
    1788:	e0 0f       	add	r30, r16
    178a:	f1 1f       	adc	r31, r17
    178c:	75 97       	sbiw	r30, 0x15	; 21
    178e:	20 e0       	ldi	r18, 0x00	; 0
    1790:	4e 2d       	mov	r20, r14
    1792:	60 81       	ld	r22, Z
    1794:	82 e4       	ldi	r24, 0x42	; 66
    1796:	93 e0       	ldi	r25, 0x03	; 3
    1798:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <_ZN7Display9draw_ASCIEhhh>
				oled.draw_ASCI(buffer[i-((SSD1306_WIDTH/charsize)-buffersize)],i*charsize,0);
			}
			break;
		case 1:
			buffersize=sprintf(buffer,"Bat: %i%%",Batteriestatus());
			for(uint8_t i=((SSD1306_WIDTH/charsize)-buffersize);i<(SSD1306_WIDTH/charsize);i++){
    179c:	f3 94       	inc	r15
    179e:	f6 e0       	ldi	r31, 0x06	; 6
    17a0:	ef 0e       	add	r14, r31
    17a2:	25 e1       	ldi	r18, 0x15	; 21
    17a4:	f2 12       	cpse	r15, r18
    17a6:	ea cf       	rjmp	.-44     	; 0x177c <_Z6headerh+0x114>
    17a8:	3a c0       	rjmp	.+116    	; 0x181e <_Z6headerh+0x1b6>
				oled.draw_ASCI(buffer[i-((SSD1306_WIDTH/charsize)-buffersize)],i*charsize,0);
			}
			break;
		case 2:
			buffersize=sprintf(buffer,"%i%%",Batteriestatus());
    17aa:	0e 94 56 0a 	call	0x14ac	; 0x14ac <_Z14Batteriestatusv>
    17ae:	28 2f       	mov	r18, r24
    17b0:	33 27       	eor	r19, r19
    17b2:	27 fd       	sbrc	r18, 7
    17b4:	30 95       	com	r19
    17b6:	3f 93       	push	r19
    17b8:	8f 93       	push	r24
    17ba:	81 e3       	ldi	r24, 0x31	; 49
    17bc:	91 e0       	ldi	r25, 0x01	; 1
    17be:	9f 93       	push	r25
    17c0:	8f 93       	push	r24
    17c2:	ce 01       	movw	r24, r28
    17c4:	01 96       	adiw	r24, 0x01	; 1
    17c6:	9f 93       	push	r25
    17c8:	8f 93       	push	r24
    17ca:	0e 94 5a 30 	call	0x60b4	; 0x60b4 <sprintf>
			for(uint8_t i=((SSD1306_WIDTH/charsize)-buffersize);i<(SSD1306_WIDTH/charsize);i++){
    17ce:	25 e1       	ldi	r18, 0x15	; 21
    17d0:	f2 2e       	mov	r15, r18
    17d2:	f8 1a       	sub	r15, r24
    17d4:	0f 90       	pop	r0
    17d6:	0f 90       	pop	r0
    17d8:	0f 90       	pop	r0
    17da:	0f 90       	pop	r0
    17dc:	0f 90       	pop	r0
    17de:	0f 90       	pop	r0
    17e0:	e4 e1       	ldi	r30, 0x14	; 20
    17e2:	ef 15       	cp	r30, r15
    17e4:	e0 f0       	brcs	.+56     	; 0x181e <_Z6headerh+0x1b6>
    17e6:	ef 2c       	mov	r14, r15
    17e8:	ee 0c       	add	r14, r14
    17ea:	ef 0c       	add	r14, r15
    17ec:	ee 0c       	add	r14, r14
				oled.draw_ASCI(buffer[i-((SSD1306_WIDTH/charsize)-buffersize)],i*charsize,0);
    17ee:	8c 01       	movw	r16, r24
    17f0:	11 27       	eor	r17, r17
    17f2:	e1 e0       	ldi	r30, 0x01	; 1
    17f4:	f0 e0       	ldi	r31, 0x00	; 0
    17f6:	ec 0f       	add	r30, r28
    17f8:	fd 1f       	adc	r31, r29
    17fa:	ef 0d       	add	r30, r15
    17fc:	f1 1d       	adc	r31, r1
    17fe:	e0 0f       	add	r30, r16
    1800:	f1 1f       	adc	r31, r17
    1802:	75 97       	sbiw	r30, 0x15	; 21
    1804:	20 e0       	ldi	r18, 0x00	; 0
    1806:	4e 2d       	mov	r20, r14
    1808:	60 81       	ld	r22, Z
    180a:	82 e4       	ldi	r24, 0x42	; 66
    180c:	93 e0       	ldi	r25, 0x03	; 3
    180e:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <_ZN7Display9draw_ASCIEhhh>
				oled.draw_ASCI(buffer[i-((SSD1306_WIDTH/charsize)-buffersize)],i*charsize,0);
			}
			break;
		case 2:
			buffersize=sprintf(buffer,"%i%%",Batteriestatus());
			for(uint8_t i=((SSD1306_WIDTH/charsize)-buffersize);i<(SSD1306_WIDTH/charsize);i++){
    1812:	f3 94       	inc	r15
    1814:	f6 e0       	ldi	r31, 0x06	; 6
    1816:	ef 0e       	add	r14, r31
    1818:	25 e1       	ldi	r18, 0x15	; 21
    181a:	f2 12       	cpse	r15, r18
    181c:	ea cf       	rjmp	.-44     	; 0x17f2 <_Z6headerh+0x18a>
			}
			break;
		default:
			break;
	}
}
    181e:	64 96       	adiw	r28, 0x14	; 20
    1820:	0f b6       	in	r0, 0x3f	; 63
    1822:	f8 94       	cli
    1824:	de bf       	out	0x3e, r29	; 62
    1826:	0f be       	out	0x3f, r0	; 63
    1828:	cd bf       	out	0x3d, r28	; 61
    182a:	df 91       	pop	r29
    182c:	cf 91       	pop	r28
    182e:	1f 91       	pop	r17
    1830:	0f 91       	pop	r16
    1832:	ff 90       	pop	r15
    1834:	ef 90       	pop	r14
    1836:	08 95       	ret

00001838 <_Z6bottomh>:

void bottom(uint8_t page){
    1838:	1f 93       	push	r17
    183a:	cf 93       	push	r28
    183c:	df 93       	push	r29
	switch (page) {
    183e:	88 23       	and	r24, r24
    1840:	19 f0       	breq	.+6      	; 0x1848 <_Z6bottomh+0x10>
    1842:	81 30       	cpi	r24, 0x01	; 1
    1844:	79 f0       	breq	.+30     	; 0x1864 <_Z6bottomh+0x2c>
    1846:	1b c0       	rjmp	.+54     	; 0x187e <_Z6bottomh+0x46>
    1848:	c1 e8       	ldi	r28, 0x81	; 129
    184a:	d7 e0       	ldi	r29, 0x07	; 7
    184c:	10 e5       	ldi	r17, 0x50	; 80
		case 0:	//standard Header fuer fast alle Pages
			for(uint8_t i=0;i<8;i++){
				oled.draw_ASCI(rtc.msg_dat[i],i*charsize+(SSD1306_WIDTH-bitsderrtc*charsize),7*charhighte);
    184e:	69 91       	ld	r22, Y+
    1850:	28 e3       	ldi	r18, 0x38	; 56
    1852:	41 2f       	mov	r20, r17
    1854:	82 e4       	ldi	r24, 0x42	; 66
    1856:	93 e0       	ldi	r25, 0x03	; 3
    1858:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <_ZN7Display9draw_ASCIEhhh>
    185c:	1a 5f       	subi	r17, 0xFA	; 250
}

void bottom(uint8_t page){
	switch (page) {
		case 0:	//standard Header fuer fast alle Pages
			for(uint8_t i=0;i<8;i++){
    185e:	10 38       	cpi	r17, 0x80	; 128
    1860:	b1 f7       	brne	.-20     	; 0x184e <_Z6bottomh+0x16>
    1862:	0d c0       	rjmp	.+26     	; 0x187e <_Z6bottomh+0x46>
    1864:	c1 e8       	ldi	r28, 0x81	; 129
    1866:	d7 e0       	ldi	r29, 0x07	; 7
			break;
	}
}

void bottom(uint8_t page){
	switch (page) {
    1868:	15 e0       	ldi	r17, 0x05	; 5
				oled.draw_ASCI(rtc.msg_dat[i],i*charsize+(SSD1306_WIDTH-bitsderrtc*charsize),7*charhighte);
			}
			break;
		case 1:
			for(uint8_t i=0;i<8;i++){
				oled.draw_ASCI(rtc.msg_dat[i],5+i*charsize,7*charhighte);
    186a:	69 91       	ld	r22, Y+
    186c:	28 e3       	ldi	r18, 0x38	; 56
    186e:	41 2f       	mov	r20, r17
    1870:	82 e4       	ldi	r24, 0x42	; 66
    1872:	93 e0       	ldi	r25, 0x03	; 3
    1874:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <_ZN7Display9draw_ASCIEhhh>
    1878:	1a 5f       	subi	r17, 0xFA	; 250
			for(uint8_t i=0;i<8;i++){
				oled.draw_ASCI(rtc.msg_dat[i],i*charsize+(SSD1306_WIDTH-bitsderrtc*charsize),7*charhighte);
			}
			break;
		case 1:
			for(uint8_t i=0;i<8;i++){
    187a:	15 33       	cpi	r17, 0x35	; 53
    187c:	b1 f7       	brne	.-20     	; 0x186a <_Z6bottomh+0x32>
			}
			break;
		default:
			break;
		}
}
    187e:	df 91       	pop	r29
    1880:	cf 91       	pop	r28
    1882:	1f 91       	pop	r17
    1884:	08 95       	ret

00001886 <_Z16anzeige_richtungf>:

void anzeige_richtung(float winkel){
    1886:	cf 92       	push	r12
    1888:	df 92       	push	r13
    188a:	ef 92       	push	r14
    188c:	ff 92       	push	r15
    188e:	6b 01       	movw	r12, r22
    1890:	7c 01       	movw	r14, r24
	//finden der Ziffer fuer die Anzeige
	if ((winkel<45/2) || (winkel >= 360-45/2))
    1892:	20 e0       	ldi	r18, 0x00	; 0
    1894:	30 e0       	ldi	r19, 0x00	; 0
    1896:	40 eb       	ldi	r20, 0xB0	; 176
    1898:	51 e4       	ldi	r21, 0x41	; 65
    189a:	0e 94 d7 28 	call	0x51ae	; 0x51ae <__cmpsf2>
    189e:	88 23       	and	r24, r24
    18a0:	54 f0       	brlt	.+20     	; 0x18b6 <_Z16anzeige_richtungf+0x30>
    18a2:	20 e0       	ldi	r18, 0x00	; 0
    18a4:	30 e0       	ldi	r19, 0x00	; 0
    18a6:	49 ea       	ldi	r20, 0xA9	; 169
    18a8:	53 e4       	ldi	r21, 0x43	; 67
    18aa:	c7 01       	movw	r24, r14
    18ac:	b6 01       	movw	r22, r12
    18ae:	0e 94 87 2a 	call	0x550e	; 0x550e <__gesf2>
    18b2:	88 23       	and	r24, r24
    18b4:	44 f0       	brlt	.+16     	; 0x18c6 <_Z16anzeige_richtungf+0x40>
	{
		oled.draw_ASCI('N',80,3.5*charhighte);
    18b6:	2c e1       	ldi	r18, 0x1C	; 28
    18b8:	40 e5       	ldi	r20, 0x50	; 80
    18ba:	6e e4       	ldi	r22, 0x4E	; 78
    18bc:	82 e4       	ldi	r24, 0x42	; 66
    18be:	93 e0       	ldi	r25, 0x03	; 3
    18c0:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <_ZN7Display9draw_ASCIEhhh>
    18c4:	99 c0       	rjmp	.+306    	; 0x19f8 <_Z16anzeige_richtungf+0x172>
	}
	else if (winkel<90-45/2)
    18c6:	20 e0       	ldi	r18, 0x00	; 0
    18c8:	30 e0       	ldi	r19, 0x00	; 0
    18ca:	48 e8       	ldi	r20, 0x88	; 136
    18cc:	52 e4       	ldi	r21, 0x42	; 66
    18ce:	c7 01       	movw	r24, r14
    18d0:	b6 01       	movw	r22, r12
    18d2:	0e 94 d7 28 	call	0x51ae	; 0x51ae <__cmpsf2>
    18d6:	88 23       	and	r24, r24
    18d8:	7c f4       	brge	.+30     	; 0x18f8 <_Z16anzeige_richtungf+0x72>
	{
		oled.draw_ASCI('N',80-charsize/2,3.5*charhighte);
    18da:	2c e1       	ldi	r18, 0x1C	; 28
    18dc:	4d e4       	ldi	r20, 0x4D	; 77
    18de:	6e e4       	ldi	r22, 0x4E	; 78
    18e0:	82 e4       	ldi	r24, 0x42	; 66
    18e2:	93 e0       	ldi	r25, 0x03	; 3
    18e4:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <_ZN7Display9draw_ASCIEhhh>
		oled.draw_ASCI('O',80+charsize/2,3.5*charhighte);
    18e8:	2c e1       	ldi	r18, 0x1C	; 28
    18ea:	43 e5       	ldi	r20, 0x53	; 83
    18ec:	6f e4       	ldi	r22, 0x4F	; 79
    18ee:	82 e4       	ldi	r24, 0x42	; 66
    18f0:	93 e0       	ldi	r25, 0x03	; 3
    18f2:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <_ZN7Display9draw_ASCIEhhh>
    18f6:	80 c0       	rjmp	.+256    	; 0x19f8 <_Z16anzeige_richtungf+0x172>
	}
	else if (winkel<135-45/2)
    18f8:	20 e0       	ldi	r18, 0x00	; 0
    18fa:	30 e0       	ldi	r19, 0x00	; 0
    18fc:	42 ee       	ldi	r20, 0xE2	; 226
    18fe:	52 e4       	ldi	r21, 0x42	; 66
    1900:	c7 01       	movw	r24, r14
    1902:	b6 01       	movw	r22, r12
    1904:	0e 94 d7 28 	call	0x51ae	; 0x51ae <__cmpsf2>
    1908:	88 23       	and	r24, r24
    190a:	44 f4       	brge	.+16     	; 0x191c <_Z16anzeige_richtungf+0x96>
	{
		oled.draw_ASCI('O',80,3.5*charhighte);
    190c:	2c e1       	ldi	r18, 0x1C	; 28
    190e:	40 e5       	ldi	r20, 0x50	; 80
    1910:	6f e4       	ldi	r22, 0x4F	; 79
    1912:	82 e4       	ldi	r24, 0x42	; 66
    1914:	93 e0       	ldi	r25, 0x03	; 3
    1916:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <_ZN7Display9draw_ASCIEhhh>
    191a:	6e c0       	rjmp	.+220    	; 0x19f8 <_Z16anzeige_richtungf+0x172>
	}
	else if (winkel<180-45/2)
    191c:	20 e0       	ldi	r18, 0x00	; 0
    191e:	30 e0       	ldi	r19, 0x00	; 0
    1920:	4e e1       	ldi	r20, 0x1E	; 30
    1922:	53 e4       	ldi	r21, 0x43	; 67
    1924:	c7 01       	movw	r24, r14
    1926:	b6 01       	movw	r22, r12
    1928:	0e 94 d7 28 	call	0x51ae	; 0x51ae <__cmpsf2>
    192c:	88 23       	and	r24, r24
    192e:	7c f4       	brge	.+30     	; 0x194e <_Z16anzeige_richtungf+0xc8>
	{
		oled.draw_ASCI('S',80-charsize/2,3.5*charhighte);
    1930:	2c e1       	ldi	r18, 0x1C	; 28
    1932:	4d e4       	ldi	r20, 0x4D	; 77
    1934:	63 e5       	ldi	r22, 0x53	; 83
    1936:	82 e4       	ldi	r24, 0x42	; 66
    1938:	93 e0       	ldi	r25, 0x03	; 3
    193a:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <_ZN7Display9draw_ASCIEhhh>
		oled.draw_ASCI('O',80+charsize/2,3.5*charhighte);
    193e:	2c e1       	ldi	r18, 0x1C	; 28
    1940:	43 e5       	ldi	r20, 0x53	; 83
    1942:	6f e4       	ldi	r22, 0x4F	; 79
    1944:	82 e4       	ldi	r24, 0x42	; 66
    1946:	93 e0       	ldi	r25, 0x03	; 3
    1948:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <_ZN7Display9draw_ASCIEhhh>
    194c:	55 c0       	rjmp	.+170    	; 0x19f8 <_Z16anzeige_richtungf+0x172>
	}
	else if (winkel<225-45/2)
    194e:	20 e0       	ldi	r18, 0x00	; 0
    1950:	30 e0       	ldi	r19, 0x00	; 0
    1952:	4b e4       	ldi	r20, 0x4B	; 75
    1954:	53 e4       	ldi	r21, 0x43	; 67
    1956:	c7 01       	movw	r24, r14
    1958:	b6 01       	movw	r22, r12
    195a:	0e 94 d7 28 	call	0x51ae	; 0x51ae <__cmpsf2>
    195e:	88 23       	and	r24, r24
    1960:	44 f4       	brge	.+16     	; 0x1972 <_Z16anzeige_richtungf+0xec>
	{
		oled.draw_ASCI('S',80,3.5*charhighte);
    1962:	2c e1       	ldi	r18, 0x1C	; 28
    1964:	40 e5       	ldi	r20, 0x50	; 80
    1966:	63 e5       	ldi	r22, 0x53	; 83
    1968:	82 e4       	ldi	r24, 0x42	; 66
    196a:	93 e0       	ldi	r25, 0x03	; 3
    196c:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <_ZN7Display9draw_ASCIEhhh>
    1970:	43 c0       	rjmp	.+134    	; 0x19f8 <_Z16anzeige_richtungf+0x172>
	}
	else if (winkel<270-45/2)
    1972:	20 e0       	ldi	r18, 0x00	; 0
    1974:	30 e0       	ldi	r19, 0x00	; 0
    1976:	48 e7       	ldi	r20, 0x78	; 120
    1978:	53 e4       	ldi	r21, 0x43	; 67
    197a:	c7 01       	movw	r24, r14
    197c:	b6 01       	movw	r22, r12
    197e:	0e 94 d7 28 	call	0x51ae	; 0x51ae <__cmpsf2>
    1982:	88 23       	and	r24, r24
    1984:	7c f4       	brge	.+30     	; 0x19a4 <_Z16anzeige_richtungf+0x11e>
	{
		oled.draw_ASCI('S',80-charsize/2,3.5*charhighte);
    1986:	2c e1       	ldi	r18, 0x1C	; 28
    1988:	4d e4       	ldi	r20, 0x4D	; 77
    198a:	63 e5       	ldi	r22, 0x53	; 83
    198c:	82 e4       	ldi	r24, 0x42	; 66
    198e:	93 e0       	ldi	r25, 0x03	; 3
    1990:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <_ZN7Display9draw_ASCIEhhh>
		oled.draw_ASCI('W',80+charsize/2,3.5*charhighte);
    1994:	2c e1       	ldi	r18, 0x1C	; 28
    1996:	43 e5       	ldi	r20, 0x53	; 83
    1998:	67 e5       	ldi	r22, 0x57	; 87
    199a:	82 e4       	ldi	r24, 0x42	; 66
    199c:	93 e0       	ldi	r25, 0x03	; 3
    199e:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <_ZN7Display9draw_ASCIEhhh>
    19a2:	2a c0       	rjmp	.+84     	; 0x19f8 <_Z16anzeige_richtungf+0x172>
	}
	else if (winkel<315-45/2)
    19a4:	20 e0       	ldi	r18, 0x00	; 0
    19a6:	30 e8       	ldi	r19, 0x80	; 128
    19a8:	42 e9       	ldi	r20, 0x92	; 146
    19aa:	53 e4       	ldi	r21, 0x43	; 67
    19ac:	c7 01       	movw	r24, r14
    19ae:	b6 01       	movw	r22, r12
    19b0:	0e 94 d7 28 	call	0x51ae	; 0x51ae <__cmpsf2>
    19b4:	88 23       	and	r24, r24
    19b6:	44 f4       	brge	.+16     	; 0x19c8 <_Z16anzeige_richtungf+0x142>
	{
		oled.draw_ASCI('W',80,3.5*charhighte);
    19b8:	2c e1       	ldi	r18, 0x1C	; 28
    19ba:	40 e5       	ldi	r20, 0x50	; 80
    19bc:	67 e5       	ldi	r22, 0x57	; 87
    19be:	82 e4       	ldi	r24, 0x42	; 66
    19c0:	93 e0       	ldi	r25, 0x03	; 3
    19c2:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <_ZN7Display9draw_ASCIEhhh>
    19c6:	18 c0       	rjmp	.+48     	; 0x19f8 <_Z16anzeige_richtungf+0x172>
	}
	else if (winkel<360-45/2)
    19c8:	20 e0       	ldi	r18, 0x00	; 0
    19ca:	30 e0       	ldi	r19, 0x00	; 0
    19cc:	49 ea       	ldi	r20, 0xA9	; 169
    19ce:	53 e4       	ldi	r21, 0x43	; 67
    19d0:	c7 01       	movw	r24, r14
    19d2:	b6 01       	movw	r22, r12
    19d4:	0e 94 d7 28 	call	0x51ae	; 0x51ae <__cmpsf2>
    19d8:	88 23       	and	r24, r24
    19da:	74 f4       	brge	.+28     	; 0x19f8 <_Z16anzeige_richtungf+0x172>
	{
		oled.draw_ASCI('N',80-charsize/2,3.5*charhighte);
    19dc:	2c e1       	ldi	r18, 0x1C	; 28
    19de:	4d e4       	ldi	r20, 0x4D	; 77
    19e0:	6e e4       	ldi	r22, 0x4E	; 78
    19e2:	82 e4       	ldi	r24, 0x42	; 66
    19e4:	93 e0       	ldi	r25, 0x03	; 3
    19e6:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <_ZN7Display9draw_ASCIEhhh>
		oled.draw_ASCI('W',80+charsize/2,3.5*charhighte);
    19ea:	2c e1       	ldi	r18, 0x1C	; 28
    19ec:	43 e5       	ldi	r20, 0x53	; 83
    19ee:	67 e5       	ldi	r22, 0x57	; 87
    19f0:	82 e4       	ldi	r24, 0x42	; 66
    19f2:	93 e0       	ldi	r25, 0x03	; 3
    19f4:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <_ZN7Display9draw_ASCIEhhh>
	}
}
    19f8:	ff 90       	pop	r15
    19fa:	ef 90       	pop	r14
    19fc:	df 90       	pop	r13
    19fe:	cf 90       	pop	r12
    1a00:	08 95       	ret

00001a02 <_Z13anzeige_nadelhhf>:

void anzeige_nadel(uint8_t x, uint8_t y, float angle){
    1a02:	af 92       	push	r10
    1a04:	bf 92       	push	r11
    1a06:	cf 92       	push	r12
    1a08:	df 92       	push	r13
    1a0a:	ef 92       	push	r14
    1a0c:	ff 92       	push	r15
    1a0e:	0f 93       	push	r16
    1a10:	1f 93       	push	r17
	//fixed parameters for drawing the arrow
	oled.draw_triangle(x,y,20,70,angle);
    1a12:	59 01       	movw	r10, r18
    1a14:	6a 01       	movw	r12, r20
    1a16:	e1 2c       	mov	r14, r1
    1a18:	f1 2c       	mov	r15, r1
    1a1a:	0c e8       	ldi	r16, 0x8C	; 140
    1a1c:	12 e4       	ldi	r17, 0x42	; 66
    1a1e:	24 e1       	ldi	r18, 0x14	; 20
    1a20:	46 2f       	mov	r20, r22
    1a22:	68 2f       	mov	r22, r24
    1a24:	82 e4       	ldi	r24, 0x42	; 66
    1a26:	93 e0       	ldi	r25, 0x03	; 3
    1a28:	0e 94 b3 05 	call	0xb66	; 0xb66 <_ZN7Display13draw_triangleEhhhff>
}
    1a2c:	1f 91       	pop	r17
    1a2e:	0f 91       	pop	r16
    1a30:	ff 90       	pop	r15
    1a32:	ef 90       	pop	r14
    1a34:	df 90       	pop	r13
    1a36:	cf 90       	pop	r12
    1a38:	bf 90       	pop	r11
    1a3a:	af 90       	pop	r10
    1a3c:	08 95       	ret

00001a3e <_Z19anzeige_kleinenadelhhf>:
void anzeige_kleinenadel(uint8_t x, uint8_t y, float angle){
    1a3e:	af 92       	push	r10
    1a40:	bf 92       	push	r11
    1a42:	cf 92       	push	r12
    1a44:	df 92       	push	r13
    1a46:	ef 92       	push	r14
    1a48:	ff 92       	push	r15
    1a4a:	0f 93       	push	r16
    1a4c:	1f 93       	push	r17
	//fixed parameters for drawing the arrow
	oled.draw_triangle(x,y,10,70,angle);
    1a4e:	59 01       	movw	r10, r18
    1a50:	6a 01       	movw	r12, r20
    1a52:	e1 2c       	mov	r14, r1
    1a54:	f1 2c       	mov	r15, r1
    1a56:	0c e8       	ldi	r16, 0x8C	; 140
    1a58:	12 e4       	ldi	r17, 0x42	; 66
    1a5a:	2a e0       	ldi	r18, 0x0A	; 10
    1a5c:	46 2f       	mov	r20, r22
    1a5e:	68 2f       	mov	r22, r24
    1a60:	82 e4       	ldi	r24, 0x42	; 66
    1a62:	93 e0       	ldi	r25, 0x03	; 3
    1a64:	0e 94 b3 05 	call	0xb66	; 0xb66 <_ZN7Display13draw_triangleEhhhff>
}
    1a68:	1f 91       	pop	r17
    1a6a:	0f 91       	pop	r16
    1a6c:	ff 90       	pop	r15
    1a6e:	ef 90       	pop	r14
    1a70:	df 90       	pop	r13
    1a72:	cf 90       	pop	r12
    1a74:	bf 90       	pop	r11
    1a76:	af 90       	pop	r10
    1a78:	08 95       	ret

00001a7a <_Z11menue_hauptv>:

void menue_haupt(){
    1a7a:	cf 92       	push	r12
    1a7c:	df 92       	push	r13
    1a7e:	ef 92       	push	r14
    1a80:	ff 92       	push	r15
    1a82:	0f 93       	push	r16
    1a84:	1f 93       	push	r17
    1a86:	cf 93       	push	r28
    1a88:	df 93       	push	r29
    1a8a:	cd b7       	in	r28, 0x3d	; 61
    1a8c:	de b7       	in	r29, 0x3e	; 62
    1a8e:	64 97       	sbiw	r28, 0x14	; 20
    1a90:	0f b6       	in	r0, 0x3f	; 63
    1a92:	f8 94       	cli
    1a94:	de bf       	out	0x3e, r29	; 62
    1a96:	0f be       	out	0x3f, r0	; 63
    1a98:	cd bf       	out	0x3d, r28	; 61
	char buffer[20];
	uint8_t buffersize=0;

	oled.clearFrame();
    1a9a:	82 e4       	ldi	r24, 0x42	; 66
    1a9c:	93 e0       	ldi	r25, 0x03	; 3
    1a9e:	0e 94 ed 03 	call	0x7da	; 0x7da <_ZN7Display10clearFrameEv>
	buffersize=sprintf(buffer,"1:Fahradanzeige");
    1aa2:	80 e1       	ldi	r24, 0x10	; 16
    1aa4:	e6 e3       	ldi	r30, 0x36	; 54
    1aa6:	f1 e0       	ldi	r31, 0x01	; 1
    1aa8:	8e 01       	movw	r16, r28
    1aaa:	0f 5f       	subi	r16, 0xFF	; 255
    1aac:	1f 4f       	sbci	r17, 0xFF	; 255
    1aae:	d8 01       	movw	r26, r16
    1ab0:	01 90       	ld	r0, Z+
    1ab2:	0d 92       	st	X+, r0
    1ab4:	8a 95       	dec	r24
    1ab6:	e1 f7       	brne	.-8      	; 0x1ab0 <_Z11menue_hauptv+0x36>
    1ab8:	e0 2e       	mov	r14, r16
    1aba:	f1 2e       	mov	r15, r17
    1abc:	68 01       	movw	r12, r16
    1abe:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,0*charhighte);}
    1ac0:	f6 01       	movw	r30, r12
    1ac2:	61 91       	ld	r22, Z+
    1ac4:	6f 01       	movw	r12, r30
    1ac6:	20 e0       	ldi	r18, 0x00	; 0
    1ac8:	41 2f       	mov	r20, r17
    1aca:	82 e4       	ldi	r24, 0x42	; 66
    1acc:	93 e0       	ldi	r25, 0x03	; 3
    1ace:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <_ZN7Display9draw_ASCIEhhh>
    1ad2:	1a 5f       	subi	r17, 0xFA	; 250
    1ad4:	1a 35       	cpi	r17, 0x5A	; 90
    1ad6:	a1 f7       	brne	.-24     	; 0x1ac0 <_Z11menue_hauptv+0x46>
	buffersize=sprintf(buffer,"2:Taschenrechner");
    1ad8:	81 e1       	ldi	r24, 0x11	; 17
    1ada:	e6 e4       	ldi	r30, 0x46	; 70
    1adc:	f1 e0       	ldi	r31, 0x01	; 1
    1ade:	de 01       	movw	r26, r28
    1ae0:	11 96       	adiw	r26, 0x01	; 1
    1ae2:	01 90       	ld	r0, Z+
    1ae4:	0d 92       	st	X+, r0
    1ae6:	8a 95       	dec	r24
    1ae8:	e1 f7       	brne	.-8      	; 0x1ae2 <_Z11menue_hauptv+0x68>
    1aea:	ce 2c       	mov	r12, r14
    1aec:	df 2c       	mov	r13, r15
    1aee:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,1*charhighte);}
    1af0:	f6 01       	movw	r30, r12
    1af2:	61 91       	ld	r22, Z+
    1af4:	6f 01       	movw	r12, r30
    1af6:	28 e0       	ldi	r18, 0x08	; 8
    1af8:	41 2f       	mov	r20, r17
    1afa:	82 e4       	ldi	r24, 0x42	; 66
    1afc:	93 e0       	ldi	r25, 0x03	; 3
    1afe:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <_ZN7Display9draw_ASCIEhhh>
    1b02:	1a 5f       	subi	r17, 0xFA	; 250
    1b04:	10 36       	cpi	r17, 0x60	; 96
    1b06:	a1 f7       	brne	.-24     	; 0x1af0 <_Z11menue_hauptv+0x76>
	buffersize=sprintf(buffer,"3:Kompass");
    1b08:	8a e0       	ldi	r24, 0x0A	; 10
    1b0a:	e7 e5       	ldi	r30, 0x57	; 87
    1b0c:	f1 e0       	ldi	r31, 0x01	; 1
    1b0e:	de 01       	movw	r26, r28
    1b10:	11 96       	adiw	r26, 0x01	; 1
    1b12:	01 90       	ld	r0, Z+
    1b14:	0d 92       	st	X+, r0
    1b16:	8a 95       	dec	r24
    1b18:	e1 f7       	brne	.-8      	; 0x1b12 <_Z11menue_hauptv+0x98>
    1b1a:	ce 2c       	mov	r12, r14
    1b1c:	df 2c       	mov	r13, r15
    1b1e:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,2*charhighte);}
    1b20:	f6 01       	movw	r30, r12
    1b22:	61 91       	ld	r22, Z+
    1b24:	6f 01       	movw	r12, r30
    1b26:	20 e1       	ldi	r18, 0x10	; 16
    1b28:	41 2f       	mov	r20, r17
    1b2a:	82 e4       	ldi	r24, 0x42	; 66
    1b2c:	93 e0       	ldi	r25, 0x03	; 3
    1b2e:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <_ZN7Display9draw_ASCIEhhh>
    1b32:	1a 5f       	subi	r17, 0xFA	; 250
    1b34:	16 33       	cpi	r17, 0x36	; 54
    1b36:	a1 f7       	brne	.-24     	; 0x1b20 <_Z11menue_hauptv+0xa6>
	buffersize=sprintf(buffer,"4:Uhrmenue");
    1b38:	8b e0       	ldi	r24, 0x0B	; 11
    1b3a:	e1 e6       	ldi	r30, 0x61	; 97
    1b3c:	f1 e0       	ldi	r31, 0x01	; 1
    1b3e:	de 01       	movw	r26, r28
    1b40:	11 96       	adiw	r26, 0x01	; 1
    1b42:	01 90       	ld	r0, Z+
    1b44:	0d 92       	st	X+, r0
    1b46:	8a 95       	dec	r24
    1b48:	e1 f7       	brne	.-8      	; 0x1b42 <_Z11menue_hauptv+0xc8>
    1b4a:	ce 2c       	mov	r12, r14
    1b4c:	df 2c       	mov	r13, r15
    1b4e:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,3*charhighte);}
    1b50:	f6 01       	movw	r30, r12
    1b52:	61 91       	ld	r22, Z+
    1b54:	6f 01       	movw	r12, r30
    1b56:	28 e1       	ldi	r18, 0x18	; 24
    1b58:	41 2f       	mov	r20, r17
    1b5a:	82 e4       	ldi	r24, 0x42	; 66
    1b5c:	93 e0       	ldi	r25, 0x03	; 3
    1b5e:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <_ZN7Display9draw_ASCIEhhh>
    1b62:	1a 5f       	subi	r17, 0xFA	; 250
    1b64:	1c 33       	cpi	r17, 0x3C	; 60
    1b66:	a1 f7       	brne	.-24     	; 0x1b50 <_Z11menue_hauptv+0xd6>
	buffersize=sprintf(buffer,"5:Einstellungen");
    1b68:	80 e1       	ldi	r24, 0x10	; 16
    1b6a:	ec e6       	ldi	r30, 0x6C	; 108
    1b6c:	f1 e0       	ldi	r31, 0x01	; 1
    1b6e:	de 01       	movw	r26, r28
    1b70:	11 96       	adiw	r26, 0x01	; 1
    1b72:	01 90       	ld	r0, Z+
    1b74:	0d 92       	st	X+, r0
    1b76:	8a 95       	dec	r24
    1b78:	e1 f7       	brne	.-8      	; 0x1b72 <_Z11menue_hauptv+0xf8>
    1b7a:	ce 2c       	mov	r12, r14
    1b7c:	df 2c       	mov	r13, r15
    1b7e:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,4*charhighte);}
    1b80:	f6 01       	movw	r30, r12
    1b82:	61 91       	ld	r22, Z+
    1b84:	6f 01       	movw	r12, r30
    1b86:	20 e2       	ldi	r18, 0x20	; 32
    1b88:	41 2f       	mov	r20, r17
    1b8a:	82 e4       	ldi	r24, 0x42	; 66
    1b8c:	93 e0       	ldi	r25, 0x03	; 3
    1b8e:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <_ZN7Display9draw_ASCIEhhh>
    1b92:	1a 5f       	subi	r17, 0xFA	; 250
    1b94:	1a 35       	cpi	r17, 0x5A	; 90
    1b96:	a1 f7       	brne	.-24     	; 0x1b80 <_Z11menue_hauptv+0x106>
	buffersize=sprintf(buffer,"6:Display aus");
    1b98:	8e e0       	ldi	r24, 0x0E	; 14
    1b9a:	ec e7       	ldi	r30, 0x7C	; 124
    1b9c:	f1 e0       	ldi	r31, 0x01	; 1
    1b9e:	de 01       	movw	r26, r28
    1ba0:	11 96       	adiw	r26, 0x01	; 1
    1ba2:	01 90       	ld	r0, Z+
    1ba4:	0d 92       	st	X+, r0
    1ba6:	8a 95       	dec	r24
    1ba8:	e1 f7       	brne	.-8      	; 0x1ba2 <_Z11menue_hauptv+0x128>
    1baa:	ce 2c       	mov	r12, r14
    1bac:	df 2c       	mov	r13, r15
    1bae:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,5*charhighte);}
    1bb0:	f6 01       	movw	r30, r12
    1bb2:	61 91       	ld	r22, Z+
    1bb4:	6f 01       	movw	r12, r30
    1bb6:	28 e2       	ldi	r18, 0x28	; 40
    1bb8:	41 2f       	mov	r20, r17
    1bba:	82 e4       	ldi	r24, 0x42	; 66
    1bbc:	93 e0       	ldi	r25, 0x03	; 3
    1bbe:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <_ZN7Display9draw_ASCIEhhh>
    1bc2:	1a 5f       	subi	r17, 0xFA	; 250
    1bc4:	1e 34       	cpi	r17, 0x4E	; 78
    1bc6:	a1 f7       	brne	.-24     	; 0x1bb0 <_Z11menue_hauptv+0x136>
	buffersize=sprintf(buffer,"7:Drucksensor");
    1bc8:	8e e0       	ldi	r24, 0x0E	; 14
    1bca:	ea e8       	ldi	r30, 0x8A	; 138
    1bcc:	f1 e0       	ldi	r31, 0x01	; 1
    1bce:	de 01       	movw	r26, r28
    1bd0:	11 96       	adiw	r26, 0x01	; 1
    1bd2:	01 90       	ld	r0, Z+
    1bd4:	0d 92       	st	X+, r0
    1bd6:	8a 95       	dec	r24
    1bd8:	e1 f7       	brne	.-8      	; 0x1bd2 <_Z11menue_hauptv+0x158>
    1bda:	ce 2c       	mov	r12, r14
    1bdc:	df 2c       	mov	r13, r15
    1bde:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,6*charhighte);}
    1be0:	f6 01       	movw	r30, r12
    1be2:	61 91       	ld	r22, Z+
    1be4:	6f 01       	movw	r12, r30
    1be6:	20 e3       	ldi	r18, 0x30	; 48
    1be8:	41 2f       	mov	r20, r17
    1bea:	82 e4       	ldi	r24, 0x42	; 66
    1bec:	93 e0       	ldi	r25, 0x03	; 3
    1bee:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <_ZN7Display9draw_ASCIEhhh>
    1bf2:	1a 5f       	subi	r17, 0xFA	; 250
    1bf4:	1e 34       	cpi	r17, 0x4E	; 78
    1bf6:	a1 f7       	brne	.-24     	; 0x1be0 <_Z11menue_hauptv+0x166>
}
    1bf8:	64 96       	adiw	r28, 0x14	; 20
    1bfa:	0f b6       	in	r0, 0x3f	; 63
    1bfc:	f8 94       	cli
    1bfe:	de bf       	out	0x3e, r29	; 62
    1c00:	0f be       	out	0x3f, r0	; 63
    1c02:	cd bf       	out	0x3d, r28	; 61
    1c04:	df 91       	pop	r29
    1c06:	cf 91       	pop	r28
    1c08:	1f 91       	pop	r17
    1c0a:	0f 91       	pop	r16
    1c0c:	ff 90       	pop	r15
    1c0e:	ef 90       	pop	r14
    1c10:	df 90       	pop	r13
    1c12:	cf 90       	pop	r12
    1c14:	08 95       	ret

00001c16 <_Z11menue_einstv>:
void menue_einst(){
    1c16:	af 92       	push	r10
    1c18:	bf 92       	push	r11
    1c1a:	df 92       	push	r13
    1c1c:	ef 92       	push	r14
    1c1e:	0f 93       	push	r16
    1c20:	1f 93       	push	r17
    1c22:	cf 93       	push	r28
    1c24:	df 93       	push	r29
    1c26:	cd b7       	in	r28, 0x3d	; 61
    1c28:	de b7       	in	r29, 0x3e	; 62
    1c2a:	64 97       	sbiw	r28, 0x14	; 20
    1c2c:	0f b6       	in	r0, 0x3f	; 63
    1c2e:	f8 94       	cli
    1c30:	de bf       	out	0x3e, r29	; 62
    1c32:	0f be       	out	0x3f, r0	; 63
    1c34:	cd bf       	out	0x3d, r28	; 61
	char buffer[20];
	uint8_t buffersize=0;

	oled.clearFrame();
    1c36:	82 e4       	ldi	r24, 0x42	; 66
    1c38:	93 e0       	ldi	r25, 0x03	; 3
    1c3a:	0e 94 ed 03 	call	0x7da	; 0x7da <_ZN7Display10clearFrameEv>
	buffersize=sprintf(buffer,"1:Kompass kalib.");
    1c3e:	81 e1       	ldi	r24, 0x11	; 17
    1c40:	e8 e9       	ldi	r30, 0x98	; 152
    1c42:	f1 e0       	ldi	r31, 0x01	; 1
    1c44:	8e 01       	movw	r16, r28
    1c46:	0f 5f       	subi	r16, 0xFF	; 255
    1c48:	1f 4f       	sbci	r17, 0xFF	; 255
    1c4a:	d8 01       	movw	r26, r16
    1c4c:	01 90       	ld	r0, Z+
    1c4e:	0d 92       	st	X+, r0
    1c50:	8a 95       	dec	r24
    1c52:	e1 f7       	brne	.-8      	; 0x1c4c <_Z11menue_einstv+0x36>
    1c54:	d0 2e       	mov	r13, r16
    1c56:	e1 2e       	mov	r14, r17
    1c58:	58 01       	movw	r10, r16
    1c5a:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,0*charhighte);}
    1c5c:	f5 01       	movw	r30, r10
    1c5e:	61 91       	ld	r22, Z+
    1c60:	5f 01       	movw	r10, r30
    1c62:	20 e0       	ldi	r18, 0x00	; 0
    1c64:	41 2f       	mov	r20, r17
    1c66:	82 e4       	ldi	r24, 0x42	; 66
    1c68:	93 e0       	ldi	r25, 0x03	; 3
    1c6a:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <_ZN7Display9draw_ASCIEhhh>
    1c6e:	1a 5f       	subi	r17, 0xFA	; 250
    1c70:	10 36       	cpi	r17, 0x60	; 96
    1c72:	a1 f7       	brne	.-24     	; 0x1c5c <_Z11menue_einstv+0x46>
	buffersize=sprintf(buffer,"2:Kompassverstaerkung");
    1c74:	86 e1       	ldi	r24, 0x16	; 22
    1c76:	e9 ea       	ldi	r30, 0xA9	; 169
    1c78:	f1 e0       	ldi	r31, 0x01	; 1
    1c7a:	de 01       	movw	r26, r28
    1c7c:	11 96       	adiw	r26, 0x01	; 1
    1c7e:	01 90       	ld	r0, Z+
    1c80:	0d 92       	st	X+, r0
    1c82:	8a 95       	dec	r24
    1c84:	e1 f7       	brne	.-8      	; 0x1c7e <_Z11menue_einstv+0x68>
    1c86:	ad 2c       	mov	r10, r13
    1c88:	be 2c       	mov	r11, r14
    1c8a:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,1*charhighte);}
    1c8c:	f5 01       	movw	r30, r10
    1c8e:	61 91       	ld	r22, Z+
    1c90:	5f 01       	movw	r10, r30
    1c92:	28 e0       	ldi	r18, 0x08	; 8
    1c94:	41 2f       	mov	r20, r17
    1c96:	82 e4       	ldi	r24, 0x42	; 66
    1c98:	93 e0       	ldi	r25, 0x03	; 3
    1c9a:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <_ZN7Display9draw_ASCIEhhh>
    1c9e:	1a 5f       	subi	r17, 0xFA	; 250
    1ca0:	1e 37       	cpi	r17, 0x7E	; 126
    1ca2:	a1 f7       	brne	.-24     	; 0x1c8c <_Z11menue_einstv+0x76>
	buffersize=sprintf(buffer,"3:Uhr einstellen");
    1ca4:	81 e1       	ldi	r24, 0x11	; 17
    1ca6:	ef eb       	ldi	r30, 0xBF	; 191
    1ca8:	f1 e0       	ldi	r31, 0x01	; 1
    1caa:	de 01       	movw	r26, r28
    1cac:	11 96       	adiw	r26, 0x01	; 1
    1cae:	01 90       	ld	r0, Z+
    1cb0:	0d 92       	st	X+, r0
    1cb2:	8a 95       	dec	r24
    1cb4:	e1 f7       	brne	.-8      	; 0x1cae <_Z11menue_einstv+0x98>
    1cb6:	ad 2c       	mov	r10, r13
    1cb8:	be 2c       	mov	r11, r14
    1cba:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,2*charhighte);}
    1cbc:	f5 01       	movw	r30, r10
    1cbe:	61 91       	ld	r22, Z+
    1cc0:	5f 01       	movw	r10, r30
    1cc2:	20 e1       	ldi	r18, 0x10	; 16
    1cc4:	41 2f       	mov	r20, r17
    1cc6:	82 e4       	ldi	r24, 0x42	; 66
    1cc8:	93 e0       	ldi	r25, 0x03	; 3
    1cca:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <_ZN7Display9draw_ASCIEhhh>
    1cce:	1a 5f       	subi	r17, 0xFA	; 250
    1cd0:	10 36       	cpi	r17, 0x60	; 96
    1cd2:	a1 f7       	brne	.-24     	; 0x1cbc <_Z11menue_einstv+0xa6>
	buffersize=sprintf(buffer,"4:Weckereinstellen");
    1cd4:	83 e1       	ldi	r24, 0x13	; 19
    1cd6:	e0 ed       	ldi	r30, 0xD0	; 208
    1cd8:	f1 e0       	ldi	r31, 0x01	; 1
    1cda:	de 01       	movw	r26, r28
    1cdc:	11 96       	adiw	r26, 0x01	; 1
    1cde:	01 90       	ld	r0, Z+
    1ce0:	0d 92       	st	X+, r0
    1ce2:	8a 95       	dec	r24
    1ce4:	e1 f7       	brne	.-8      	; 0x1cde <_Z11menue_einstv+0xc8>
    1ce6:	ad 2c       	mov	r10, r13
    1ce8:	be 2c       	mov	r11, r14
    1cea:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,3*charhighte);}
    1cec:	f5 01       	movw	r30, r10
    1cee:	61 91       	ld	r22, Z+
    1cf0:	5f 01       	movw	r10, r30
    1cf2:	28 e1       	ldi	r18, 0x18	; 24
    1cf4:	41 2f       	mov	r20, r17
    1cf6:	82 e4       	ldi	r24, 0x42	; 66
    1cf8:	93 e0       	ldi	r25, 0x03	; 3
    1cfa:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <_ZN7Display9draw_ASCIEhhh>
    1cfe:	1a 5f       	subi	r17, 0xFA	; 250
    1d00:	1c 36       	cpi	r17, 0x6C	; 108
    1d02:	a1 f7       	brne	.-24     	; 0x1cec <_Z11menue_einstv+0xd6>
	//for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,4*charhighte);}
	//buffersize=sprintf(buffer,"6:HMC5883L Gain");
	//for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,5*charhighte);}
	//buffersize=sprintf(buffer,"7:Uhr einstellen");
	//for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,6*charhighte);}
}
    1d04:	64 96       	adiw	r28, 0x14	; 20
    1d06:	0f b6       	in	r0, 0x3f	; 63
    1d08:	f8 94       	cli
    1d0a:	de bf       	out	0x3e, r29	; 62
    1d0c:	0f be       	out	0x3f, r0	; 63
    1d0e:	cd bf       	out	0x3d, r28	; 61
    1d10:	df 91       	pop	r29
    1d12:	cf 91       	pop	r28
    1d14:	1f 91       	pop	r17
    1d16:	0f 91       	pop	r16
    1d18:	ef 90       	pop	r14
    1d1a:	df 90       	pop	r13
    1d1c:	bf 90       	pop	r11
    1d1e:	af 90       	pop	r10
    1d20:	08 95       	ret

00001d22 <_Z9menue_uhrv>:
void menue_uhr(){
    1d22:	cf 92       	push	r12
    1d24:	df 92       	push	r13
    1d26:	ef 92       	push	r14
    1d28:	ff 92       	push	r15
    1d2a:	0f 93       	push	r16
    1d2c:	1f 93       	push	r17
    1d2e:	cf 93       	push	r28
    1d30:	df 93       	push	r29
    1d32:	cd b7       	in	r28, 0x3d	; 61
    1d34:	de b7       	in	r29, 0x3e	; 62
    1d36:	64 97       	sbiw	r28, 0x14	; 20
    1d38:	0f b6       	in	r0, 0x3f	; 63
    1d3a:	f8 94       	cli
    1d3c:	de bf       	out	0x3e, r29	; 62
    1d3e:	0f be       	out	0x3f, r0	; 63
    1d40:	cd bf       	out	0x3d, r28	; 61
	char buffer[20];
	uint8_t buffersize=0;

	oled.clearFrame();
    1d42:	82 e4       	ldi	r24, 0x42	; 66
    1d44:	93 e0       	ldi	r25, 0x03	; 3
    1d46:	0e 94 ed 03 	call	0x7da	; 0x7da <_ZN7Display10clearFrameEv>
	buffersize=sprintf(buffer,"1:Uhr");
    1d4a:	86 e0       	ldi	r24, 0x06	; 6
    1d4c:	e3 ee       	ldi	r30, 0xE3	; 227
    1d4e:	f1 e0       	ldi	r31, 0x01	; 1
    1d50:	8e 01       	movw	r16, r28
    1d52:	0f 5f       	subi	r16, 0xFF	; 255
    1d54:	1f 4f       	sbci	r17, 0xFF	; 255
    1d56:	d8 01       	movw	r26, r16
    1d58:	01 90       	ld	r0, Z+
    1d5a:	0d 92       	st	X+, r0
    1d5c:	8a 95       	dec	r24
    1d5e:	e1 f7       	brne	.-8      	; 0x1d58 <_Z9menue_uhrv+0x36>
    1d60:	e0 2e       	mov	r14, r16
    1d62:	f1 2e       	mov	r15, r17
    1d64:	68 01       	movw	r12, r16
    1d66:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,0*charhighte);}
    1d68:	f6 01       	movw	r30, r12
    1d6a:	61 91       	ld	r22, Z+
    1d6c:	6f 01       	movw	r12, r30
    1d6e:	20 e0       	ldi	r18, 0x00	; 0
    1d70:	41 2f       	mov	r20, r17
    1d72:	82 e4       	ldi	r24, 0x42	; 66
    1d74:	93 e0       	ldi	r25, 0x03	; 3
    1d76:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <_ZN7Display9draw_ASCIEhhh>
    1d7a:	1a 5f       	subi	r17, 0xFA	; 250
    1d7c:	1e 31       	cpi	r17, 0x1E	; 30
    1d7e:	a1 f7       	brne	.-24     	; 0x1d68 <_Z9menue_uhrv+0x46>
	buffersize=sprintf(buffer,"2:Stoppuhr");
    1d80:	8b e0       	ldi	r24, 0x0B	; 11
    1d82:	e9 ee       	ldi	r30, 0xE9	; 233
    1d84:	f1 e0       	ldi	r31, 0x01	; 1
    1d86:	de 01       	movw	r26, r28
    1d88:	11 96       	adiw	r26, 0x01	; 1
    1d8a:	01 90       	ld	r0, Z+
    1d8c:	0d 92       	st	X+, r0
    1d8e:	8a 95       	dec	r24
    1d90:	e1 f7       	brne	.-8      	; 0x1d8a <_Z9menue_uhrv+0x68>
    1d92:	ce 2c       	mov	r12, r14
    1d94:	df 2c       	mov	r13, r15
    1d96:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,1*charhighte);}
    1d98:	f6 01       	movw	r30, r12
    1d9a:	61 91       	ld	r22, Z+
    1d9c:	6f 01       	movw	r12, r30
    1d9e:	28 e0       	ldi	r18, 0x08	; 8
    1da0:	41 2f       	mov	r20, r17
    1da2:	82 e4       	ldi	r24, 0x42	; 66
    1da4:	93 e0       	ldi	r25, 0x03	; 3
    1da6:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <_ZN7Display9draw_ASCIEhhh>
    1daa:	1a 5f       	subi	r17, 0xFA	; 250
    1dac:	1c 33       	cpi	r17, 0x3C	; 60
    1dae:	a1 f7       	brne	.-24     	; 0x1d98 <_Z9menue_uhrv+0x76>
	buffersize=sprintf(buffer,"3:Timer");
    1db0:	88 e0       	ldi	r24, 0x08	; 8
    1db2:	e4 ef       	ldi	r30, 0xF4	; 244
    1db4:	f1 e0       	ldi	r31, 0x01	; 1
    1db6:	de 01       	movw	r26, r28
    1db8:	11 96       	adiw	r26, 0x01	; 1
    1dba:	01 90       	ld	r0, Z+
    1dbc:	0d 92       	st	X+, r0
    1dbe:	8a 95       	dec	r24
    1dc0:	e1 f7       	brne	.-8      	; 0x1dba <_Z9menue_uhrv+0x98>
    1dc2:	ce 2c       	mov	r12, r14
    1dc4:	df 2c       	mov	r13, r15
    1dc6:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,2*charhighte);}
    1dc8:	f6 01       	movw	r30, r12
    1dca:	61 91       	ld	r22, Z+
    1dcc:	6f 01       	movw	r12, r30
    1dce:	20 e1       	ldi	r18, 0x10	; 16
    1dd0:	41 2f       	mov	r20, r17
    1dd2:	82 e4       	ldi	r24, 0x42	; 66
    1dd4:	93 e0       	ldi	r25, 0x03	; 3
    1dd6:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <_ZN7Display9draw_ASCIEhhh>
    1dda:	1a 5f       	subi	r17, 0xFA	; 250
    1ddc:	1a 32       	cpi	r17, 0x2A	; 42
    1dde:	a1 f7       	brne	.-24     	; 0x1dc8 <_Z9menue_uhrv+0xa6>
	buffersize=sprintf(buffer,"4:Alarm");
    1de0:	88 e0       	ldi	r24, 0x08	; 8
    1de2:	ec ef       	ldi	r30, 0xFC	; 252
    1de4:	f1 e0       	ldi	r31, 0x01	; 1
    1de6:	de 01       	movw	r26, r28
    1de8:	11 96       	adiw	r26, 0x01	; 1
    1dea:	01 90       	ld	r0, Z+
    1dec:	0d 92       	st	X+, r0
    1dee:	8a 95       	dec	r24
    1df0:	e1 f7       	brne	.-8      	; 0x1dea <_Z9menue_uhrv+0xc8>
    1df2:	ce 2c       	mov	r12, r14
    1df4:	df 2c       	mov	r13, r15
    1df6:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,3*charhighte);}
    1df8:	f6 01       	movw	r30, r12
    1dfa:	61 91       	ld	r22, Z+
    1dfc:	6f 01       	movw	r12, r30
    1dfe:	28 e1       	ldi	r18, 0x18	; 24
    1e00:	41 2f       	mov	r20, r17
    1e02:	82 e4       	ldi	r24, 0x42	; 66
    1e04:	93 e0       	ldi	r25, 0x03	; 3
    1e06:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <_ZN7Display9draw_ASCIEhhh>
    1e0a:	1a 5f       	subi	r17, 0xFA	; 250
    1e0c:	1a 32       	cpi	r17, 0x2A	; 42
    1e0e:	a1 f7       	brne	.-24     	; 0x1df8 <_Z9menue_uhrv+0xd6>
	buffersize=sprintf(buffer,"5:Uhr gross");
    1e10:	8c e0       	ldi	r24, 0x0C	; 12
    1e12:	e4 e0       	ldi	r30, 0x04	; 4
    1e14:	f2 e0       	ldi	r31, 0x02	; 2
    1e16:	de 01       	movw	r26, r28
    1e18:	11 96       	adiw	r26, 0x01	; 1
    1e1a:	01 90       	ld	r0, Z+
    1e1c:	0d 92       	st	X+, r0
    1e1e:	8a 95       	dec	r24
    1e20:	e1 f7       	brne	.-8      	; 0x1e1a <_Z9menue_uhrv+0xf8>
    1e22:	ce 2c       	mov	r12, r14
    1e24:	df 2c       	mov	r13, r15
    1e26:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,4*charhighte);}
    1e28:	f6 01       	movw	r30, r12
    1e2a:	61 91       	ld	r22, Z+
    1e2c:	6f 01       	movw	r12, r30
    1e2e:	20 e2       	ldi	r18, 0x20	; 32
    1e30:	41 2f       	mov	r20, r17
    1e32:	82 e4       	ldi	r24, 0x42	; 66
    1e34:	93 e0       	ldi	r25, 0x03	; 3
    1e36:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <_ZN7Display9draw_ASCIEhhh>
    1e3a:	1a 5f       	subi	r17, 0xFA	; 250
    1e3c:	12 34       	cpi	r17, 0x42	; 66
    1e3e:	a1 f7       	brne	.-24     	; 0x1e28 <_Z9menue_uhrv+0x106>
	buffersize=sprintf(buffer,"6:Wecker");
    1e40:	89 e0       	ldi	r24, 0x09	; 9
    1e42:	e0 e1       	ldi	r30, 0x10	; 16
    1e44:	f2 e0       	ldi	r31, 0x02	; 2
    1e46:	de 01       	movw	r26, r28
    1e48:	11 96       	adiw	r26, 0x01	; 1
    1e4a:	01 90       	ld	r0, Z+
    1e4c:	0d 92       	st	X+, r0
    1e4e:	8a 95       	dec	r24
    1e50:	e1 f7       	brne	.-8      	; 0x1e4a <_Z9menue_uhrv+0x128>
    1e52:	ce 2c       	mov	r12, r14
    1e54:	df 2c       	mov	r13, r15
    1e56:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,5*charhighte);}
    1e58:	f6 01       	movw	r30, r12
    1e5a:	61 91       	ld	r22, Z+
    1e5c:	6f 01       	movw	r12, r30
    1e5e:	28 e2       	ldi	r18, 0x28	; 40
    1e60:	41 2f       	mov	r20, r17
    1e62:	82 e4       	ldi	r24, 0x42	; 66
    1e64:	93 e0       	ldi	r25, 0x03	; 3
    1e66:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <_ZN7Display9draw_ASCIEhhh>
    1e6a:	1a 5f       	subi	r17, 0xFA	; 250
    1e6c:	10 33       	cpi	r17, 0x30	; 48
    1e6e:	a1 f7       	brne	.-24     	; 0x1e58 <_Z9menue_uhrv+0x136>
	//buffersize=sprintf(buffer,"7:Uhr einstellen");
	//for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,6*charhighte);}
}
    1e70:	64 96       	adiw	r28, 0x14	; 20
    1e72:	0f b6       	in	r0, 0x3f	; 63
    1e74:	f8 94       	cli
    1e76:	de bf       	out	0x3e, r29	; 62
    1e78:	0f be       	out	0x3f, r0	; 63
    1e7a:	cd bf       	out	0x3d, r28	; 61
    1e7c:	df 91       	pop	r29
    1e7e:	cf 91       	pop	r28
    1e80:	1f 91       	pop	r17
    1e82:	0f 91       	pop	r16
    1e84:	ff 90       	pop	r15
    1e86:	ef 90       	pop	r14
    1e88:	df 90       	pop	r13
    1e8a:	cf 90       	pop	r12
    1e8c:	08 95       	ret

00001e8e <_Z11uhranzeigenv>:

void uhranzeigen(){
    1e8e:	df 92       	push	r13
    1e90:	ef 92       	push	r14
    1e92:	ff 92       	push	r15
    1e94:	0f 93       	push	r16
    1e96:	1f 93       	push	r17
    1e98:	cf 93       	push	r28
    1e9a:	df 93       	push	r29
    1e9c:	cd b7       	in	r28, 0x3d	; 61
    1e9e:	de b7       	in	r29, 0x3e	; 62
    1ea0:	64 97       	sbiw	r28, 0x14	; 20
    1ea2:	0f b6       	in	r0, 0x3f	; 63
    1ea4:	f8 94       	cli
    1ea6:	de bf       	out	0x3e, r29	; 62
    1ea8:	0f be       	out	0x3f, r0	; 63
    1eaa:	cd bf       	out	0x3d, r28	; 61
	Baro.READ_Temperature();
    1eac:	8f e2       	ldi	r24, 0x2F	; 47
    1eae:	93 e0       	ldi	r25, 0x03	; 3
    1eb0:	0e 94 f1 25 	call	0x4be2	; 0x4be2 <_ZN8Pressure16READ_TemperatureEv>
	uint8_t buffersize;
	char Buffer[20];
	oled.clearFrame();
    1eb4:	82 e4       	ldi	r24, 0x42	; 66
    1eb6:	93 e0       	ldi	r25, 0x03	; 3
    1eb8:	0e 94 ed 03 	call	0x7da	; 0x7da <_ZN7Display10clearFrameEv>
	//oled.analog(rtc.Stunden,rtc.Minuten,rtc.Sekunden,1);
	oled.draw_pikachu();
    1ebc:	82 e4       	ldi	r24, 0x42	; 66
    1ebe:	93 e0       	ldi	r25, 0x03	; 3
    1ec0:	0e 94 26 07 	call	0xe4c	; 0xe4c <_ZN7Display12draw_pikachuEv>
    1ec4:	0f 2e       	mov	r0, r31
    1ec6:	f9 e7       	ldi	r31, 0x79	; 121
    1ec8:	ef 2e       	mov	r14, r31
    1eca:	f7 e0       	ldi	r31, 0x07	; 7
    1ecc:	ff 2e       	mov	r15, r31
    1ece:	f0 2d       	mov	r31, r0
    1ed0:	11 e4       	ldi	r17, 0x41	; 65
	for(uint8_t i=0;i<bitsderrtc;i++){oled.draw_ASCI(rtc.msg_uhr[i],65+i*charsize,0*charhighte);}
    1ed2:	f7 01       	movw	r30, r14
    1ed4:	61 91       	ld	r22, Z+
    1ed6:	7f 01       	movw	r14, r30
    1ed8:	20 e0       	ldi	r18, 0x00	; 0
    1eda:	41 2f       	mov	r20, r17
    1edc:	82 e4       	ldi	r24, 0x42	; 66
    1ede:	93 e0       	ldi	r25, 0x03	; 3
    1ee0:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <_ZN7Display9draw_ASCIEhhh>
    1ee4:	1a 5f       	subi	r17, 0xFA	; 250
    1ee6:	11 37       	cpi	r17, 0x71	; 113
    1ee8:	a1 f7       	brne	.-24     	; 0x1ed2 <_Z11uhranzeigenv+0x44>
    1eea:	0f 2e       	mov	r0, r31
    1eec:	f1 e8       	ldi	r31, 0x81	; 129
    1eee:	ef 2e       	mov	r14, r31
    1ef0:	f7 e0       	ldi	r31, 0x07	; 7
    1ef2:	ff 2e       	mov	r15, r31
    1ef4:	f0 2d       	mov	r31, r0
    1ef6:	11 e4       	ldi	r17, 0x41	; 65
	for(uint8_t i=0;i<bitsderrtc;i++){oled.draw_ASCI(rtc.msg_dat[i],65+i*charsize,7*charhighte);}
    1ef8:	f7 01       	movw	r30, r14
    1efa:	61 91       	ld	r22, Z+
    1efc:	7f 01       	movw	r14, r30
    1efe:	28 e3       	ldi	r18, 0x38	; 56
    1f00:	41 2f       	mov	r20, r17
    1f02:	82 e4       	ldi	r24, 0x42	; 66
    1f04:	93 e0       	ldi	r25, 0x03	; 3
    1f06:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <_ZN7Display9draw_ASCIEhhh>
    1f0a:	1a 5f       	subi	r17, 0xFA	; 250
    1f0c:	11 37       	cpi	r17, 0x71	; 113
    1f0e:	a1 f7       	brne	.-24     	; 0x1ef8 <_Z11uhranzeigenv+0x6a>
	buffersize=sprintf(Buffer,"%i%%",Batteriestatus());
    1f10:	0e 94 56 0a 	call	0x14ac	; 0x14ac <_Z14Batteriestatusv>
    1f14:	28 2f       	mov	r18, r24
    1f16:	33 27       	eor	r19, r19
    1f18:	27 fd       	sbrc	r18, 7
    1f1a:	30 95       	com	r19
    1f1c:	3f 93       	push	r19
    1f1e:	8f 93       	push	r24
    1f20:	81 e3       	ldi	r24, 0x31	; 49
    1f22:	91 e0       	ldi	r25, 0x01	; 1
    1f24:	9f 93       	push	r25
    1f26:	8f 93       	push	r24
    1f28:	ce 01       	movw	r24, r28
    1f2a:	01 96       	adiw	r24, 0x01	; 1
    1f2c:	9f 93       	push	r25
    1f2e:	8f 93       	push	r24
    1f30:	0e 94 5a 30 	call	0x60b4	; 0x60b4 <sprintf>
	for(uint8_t i=0;i<buffersize;i++){
    1f34:	0f 90       	pop	r0
    1f36:	0f 90       	pop	r0
    1f38:	0f 90       	pop	r0
    1f3a:	0f 90       	pop	r0
    1f3c:	0f 90       	pop	r0
    1f3e:	0f 90       	pop	r0
    1f40:	88 23       	and	r24, r24
    1f42:	59 f1       	breq	.+86     	; 0x1f9a <_Z11uhranzeigenv+0x10c>
    1f44:	8e 01       	movw	r16, r28
    1f46:	0f 5f       	subi	r16, 0xFF	; 255
    1f48:	1f 4f       	sbci	r17, 0xFF	; 255
    1f4a:	81 50       	subi	r24, 0x01	; 1
    1f4c:	68 94       	set
    1f4e:	ee 24       	eor	r14, r14
    1f50:	e1 f8       	bld	r14, 1
    1f52:	f1 2c       	mov	r15, r1
    1f54:	ec 0e       	add	r14, r28
    1f56:	fd 1e       	adc	r15, r29
    1f58:	e8 0e       	add	r14, r24
    1f5a:	f1 1c       	adc	r15, r1
    1f5c:	0f 2e       	mov	r0, r31
    1f5e:	f9 e4       	ldi	r31, 0x49	; 73
    1f60:	df 2e       	mov	r13, r31
    1f62:	f0 2d       	mov	r31, r0
		if (Buffer[i]=='%' || Buffer[i]=='-')
    1f64:	f8 01       	movw	r30, r16
    1f66:	61 91       	ld	r22, Z+
    1f68:	8f 01       	movw	r16, r30
    1f6a:	86 2f       	mov	r24, r22
    1f6c:	87 7f       	andi	r24, 0xF7	; 247
    1f6e:	85 32       	cpi	r24, 0x25	; 37
    1f70:	39 f4       	brne	.+14     	; 0x1f80 <_Z11uhranzeigenv+0xf2>
		{
			oled.draw_ASCI(Buffer[i],73+i*numbersmalsize,3*charhighte);
    1f72:	28 e1       	ldi	r18, 0x18	; 24
    1f74:	4d 2d       	mov	r20, r13
    1f76:	82 e4       	ldi	r24, 0x42	; 66
    1f78:	93 e0       	ldi	r25, 0x03	; 3
    1f7a:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <_ZN7Display9draw_ASCIEhhh>
    1f7e:	08 c0       	rjmp	.+16     	; 0x1f90 <_Z11uhranzeigenv+0x102>
		}
		else{
			oled.draw_number16x16(Buffer[i]-'0',70+i*numbersmalsize,2.5*charhighte);
    1f80:	60 53       	subi	r22, 0x30	; 48
    1f82:	24 e1       	ldi	r18, 0x14	; 20
    1f84:	4d ef       	ldi	r20, 0xFD	; 253
    1f86:	4d 0d       	add	r20, r13
    1f88:	82 e4       	ldi	r24, 0x42	; 66
    1f8a:	93 e0       	ldi	r25, 0x03	; 3
    1f8c:	0e 94 41 07 	call	0xe82	; 0xe82 <_ZN7Display16draw_number16x16Ehhh>
    1f90:	f0 e1       	ldi	r31, 0x10	; 16
    1f92:	df 0e       	add	r13, r31
	//oled.analog(rtc.Stunden,rtc.Minuten,rtc.Sekunden,1);
	oled.draw_pikachu();
	for(uint8_t i=0;i<bitsderrtc;i++){oled.draw_ASCI(rtc.msg_uhr[i],65+i*charsize,0*charhighte);}
	for(uint8_t i=0;i<bitsderrtc;i++){oled.draw_ASCI(rtc.msg_dat[i],65+i*charsize,7*charhighte);}
	buffersize=sprintf(Buffer,"%i%%",Batteriestatus());
	for(uint8_t i=0;i<buffersize;i++){
    1f94:	0e 15       	cp	r16, r14
    1f96:	1f 05       	cpc	r17, r15
    1f98:	29 f7       	brne	.-54     	; 0x1f64 <_Z11uhranzeigenv+0xd6>
		}
		else{
			oled.draw_number16x16(Buffer[i]-'0',70+i*numbersmalsize,2.5*charhighte);
		}
	}
	buffersize=sprintf(Buffer,"%.1f C",(double)Baro.Tempera);
    1f9a:	e3 e3       	ldi	r30, 0x33	; 51
    1f9c:	f3 e0       	ldi	r31, 0x03	; 3
    1f9e:	83 81       	ldd	r24, Z+3	; 0x03
    1fa0:	8f 93       	push	r24
    1fa2:	82 81       	ldd	r24, Z+2	; 0x02
    1fa4:	8f 93       	push	r24
    1fa6:	81 81       	ldd	r24, Z+1	; 0x01
    1fa8:	8f 93       	push	r24
    1faa:	80 81       	ld	r24, Z
    1fac:	8f 93       	push	r24
    1fae:	89 e1       	ldi	r24, 0x19	; 25
    1fb0:	92 e0       	ldi	r25, 0x02	; 2
    1fb2:	9f 93       	push	r25
    1fb4:	8f 93       	push	r24
    1fb6:	ce 01       	movw	r24, r28
    1fb8:	01 96       	adiw	r24, 0x01	; 1
    1fba:	9f 93       	push	r25
    1fbc:	8f 93       	push	r24
    1fbe:	0e 94 5a 30 	call	0x60b4	; 0x60b4 <sprintf>
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(Buffer[i],70+i*charsize,5*charhighte);}
    1fc2:	0f b6       	in	r0, 0x3f	; 63
    1fc4:	f8 94       	cli
    1fc6:	de bf       	out	0x3e, r29	; 62
    1fc8:	0f be       	out	0x3f, r0	; 63
    1fca:	cd bf       	out	0x3d, r28	; 61
    1fcc:	88 23       	and	r24, r24
    1fce:	f1 f0       	breq	.+60     	; 0x200c <_Z11uhranzeigenv+0x17e>
    1fd0:	8e 01       	movw	r16, r28
    1fd2:	0f 5f       	subi	r16, 0xFF	; 255
    1fd4:	1f 4f       	sbci	r17, 0xFF	; 255
    1fd6:	81 50       	subi	r24, 0x01	; 1
    1fd8:	68 94       	set
    1fda:	ee 24       	eor	r14, r14
    1fdc:	e1 f8       	bld	r14, 1
    1fde:	f1 2c       	mov	r15, r1
    1fe0:	ec 0e       	add	r14, r28
    1fe2:	fd 1e       	adc	r15, r29
    1fe4:	e8 0e       	add	r14, r24
    1fe6:	f1 1c       	adc	r15, r1
    1fe8:	0f 2e       	mov	r0, r31
    1fea:	f6 e4       	ldi	r31, 0x46	; 70
    1fec:	df 2e       	mov	r13, r31
    1fee:	f0 2d       	mov	r31, r0
    1ff0:	f8 01       	movw	r30, r16
    1ff2:	61 91       	ld	r22, Z+
    1ff4:	8f 01       	movw	r16, r30
    1ff6:	28 e2       	ldi	r18, 0x28	; 40
    1ff8:	4d 2d       	mov	r20, r13
    1ffa:	82 e4       	ldi	r24, 0x42	; 66
    1ffc:	93 e0       	ldi	r25, 0x03	; 3
    1ffe:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <_ZN7Display9draw_ASCIEhhh>
    2002:	f6 e0       	ldi	r31, 0x06	; 6
    2004:	df 0e       	add	r13, r31
    2006:	0e 15       	cp	r16, r14
    2008:	1f 05       	cpc	r17, r15
    200a:	91 f7       	brne	.-28     	; 0x1ff0 <_Z11uhranzeigenv+0x162>
}
    200c:	64 96       	adiw	r28, 0x14	; 20
    200e:	0f b6       	in	r0, 0x3f	; 63
    2010:	f8 94       	cli
    2012:	de bf       	out	0x3e, r29	; 62
    2014:	0f be       	out	0x3f, r0	; 63
    2016:	cd bf       	out	0x3d, r28	; 61
    2018:	df 91       	pop	r29
    201a:	cf 91       	pop	r28
    201c:	1f 91       	pop	r17
    201e:	0f 91       	pop	r16
    2020:	ff 90       	pop	r15
    2022:	ef 90       	pop	r14
    2024:	df 90       	pop	r13
    2026:	08 95       	ret

00002028 <_Z14uhranzeigenminv>:

void uhranzeigenmin(){
    2028:	0f 93       	push	r16
    202a:	1f 93       	push	r17
    202c:	cf 93       	push	r28
    202e:	df 93       	push	r29
	oled.clearFrame();
    2030:	82 e4       	ldi	r24, 0x42	; 66
    2032:	93 e0       	ldi	r25, 0x03	; 3
    2034:	0e 94 ed 03 	call	0x7da	; 0x7da <_ZN7Display10clearFrameEv>
	header(2);
    2038:	82 e0       	ldi	r24, 0x02	; 2
    203a:	0e 94 34 0b 	call	0x1668	; 0x1668 <_Z6headerh>
	oled.analog(rtc.Stunden,rtc.Minuten,rtc.Sekunden,0);
    203e:	00 e0       	ldi	r16, 0x00	; 0
    2040:	20 91 8b 07 	lds	r18, 0x078B
    2044:	40 91 8a 07 	lds	r20, 0x078A
    2048:	60 91 89 07 	lds	r22, 0x0789
    204c:	82 e4       	ldi	r24, 0x42	; 66
    204e:	93 e0       	ldi	r25, 0x03	; 3
    2050:	0e 94 b7 07 	call	0xf6e	; 0xf6e <_ZN7Display6analogEhhhh>
    2054:	c9 e7       	ldi	r28, 0x79	; 121
    2056:	d7 e0       	ldi	r29, 0x07	; 7
    2058:	11 e4       	ldi	r17, 0x41	; 65
	for(uint8_t i=0;i<(bitsderrtc-3);i++){oled.draw_ASCI(rtc.msg_uhr[i],65+i*charsize,0*charhighte);}
    205a:	69 91       	ld	r22, Y+
    205c:	20 e0       	ldi	r18, 0x00	; 0
    205e:	41 2f       	mov	r20, r17
    2060:	82 e4       	ldi	r24, 0x42	; 66
    2062:	93 e0       	ldi	r25, 0x03	; 3
    2064:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <_ZN7Display9draw_ASCIEhhh>
    2068:	1a 5f       	subi	r17, 0xFA	; 250
    206a:	1f 35       	cpi	r17, 0x5F	; 95
    206c:	b1 f7       	brne	.-20     	; 0x205a <_Z14uhranzeigenminv+0x32>
    206e:	c1 e8       	ldi	r28, 0x81	; 129
    2070:	d7 e0       	ldi	r29, 0x07	; 7
    2072:	11 e4       	ldi	r17, 0x41	; 65
	for(uint8_t i=0;i<bitsderrtc;i++){oled.draw_ASCI(rtc.msg_dat[i],65+i*charsize,7*charhighte);}
    2074:	69 91       	ld	r22, Y+
    2076:	28 e3       	ldi	r18, 0x38	; 56
    2078:	41 2f       	mov	r20, r17
    207a:	82 e4       	ldi	r24, 0x42	; 66
    207c:	93 e0       	ldi	r25, 0x03	; 3
    207e:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <_ZN7Display9draw_ASCIEhhh>
    2082:	1a 5f       	subi	r17, 0xFA	; 250
    2084:	11 37       	cpi	r17, 0x71	; 113
    2086:	b1 f7       	brne	.-20     	; 0x2074 <_Z14uhranzeigenminv+0x4c>
	//show hours and minutes in big numbers
	oled.draw_number16x16(rtc.msg_uhr[0]-'0',70,1.66*charhighte);
    2088:	60 91 79 07 	lds	r22, 0x0779
    208c:	60 53       	subi	r22, 0x30	; 48
    208e:	2d e0       	ldi	r18, 0x0D	; 13
    2090:	46 e4       	ldi	r20, 0x46	; 70
    2092:	82 e4       	ldi	r24, 0x42	; 66
    2094:	93 e0       	ldi	r25, 0x03	; 3
    2096:	0e 94 41 07 	call	0xe82	; 0xe82 <_ZN7Display16draw_number16x16Ehhh>
	oled.draw_number16x16(rtc.msg_uhr[1]-'0',70+numbersmalsize,1.66*charhighte);
    209a:	60 91 7a 07 	lds	r22, 0x077A
    209e:	60 53       	subi	r22, 0x30	; 48
    20a0:	2d e0       	ldi	r18, 0x0D	; 13
    20a2:	46 e5       	ldi	r20, 0x56	; 86
    20a4:	82 e4       	ldi	r24, 0x42	; 66
    20a6:	93 e0       	ldi	r25, 0x03	; 3
    20a8:	0e 94 41 07 	call	0xe82	; 0xe82 <_ZN7Display16draw_number16x16Ehhh>
	oled.draw_number16x16(rtc.msg_uhr[3]-'0',70,2.33*charhighte+numbersmalhight);
    20ac:	60 91 7c 07 	lds	r22, 0x077C
    20b0:	60 53       	subi	r22, 0x30	; 48
    20b2:	22 e2       	ldi	r18, 0x22	; 34
    20b4:	46 e4       	ldi	r20, 0x46	; 70
    20b6:	82 e4       	ldi	r24, 0x42	; 66
    20b8:	93 e0       	ldi	r25, 0x03	; 3
    20ba:	0e 94 41 07 	call	0xe82	; 0xe82 <_ZN7Display16draw_number16x16Ehhh>
	oled.draw_number16x16(rtc.msg_uhr[4]-'0',70+numbersmalsize,2.33*charhighte+numbersmalhight);
    20be:	60 91 7d 07 	lds	r22, 0x077D
    20c2:	60 53       	subi	r22, 0x30	; 48
    20c4:	22 e2       	ldi	r18, 0x22	; 34
    20c6:	46 e5       	ldi	r20, 0x56	; 86
    20c8:	82 e4       	ldi	r24, 0x42	; 66
    20ca:	93 e0       	ldi	r25, 0x03	; 3
    20cc:	0e 94 41 07 	call	0xe82	; 0xe82 <_ZN7Display16draw_number16x16Ehhh>
		//}
		//else{
			//oled.draw_number16x16(Buffer[i]-'0',70+i*numbersmalsize,3*charhighte);
		//}
	//}
}
    20d0:	df 91       	pop	r29
    20d2:	cf 91       	pop	r28
    20d4:	1f 91       	pop	r17
    20d6:	0f 91       	pop	r16
    20d8:	08 95       	ret

000020da <_Z13Weckeranzeigev>:

void Weckeranzeige(){
    20da:	1f 93       	push	r17
    20dc:	cf 93       	push	r28
    20de:	df 93       	push	r29
	oled.clearFrame();
    20e0:	82 e4       	ldi	r24, 0x42	; 66
    20e2:	93 e0       	ldi	r25, 0x03	; 3
    20e4:	0e 94 ed 03 	call	0x7da	; 0x7da <_ZN7Display10clearFrameEv>
	bottom(1);
    20e8:	81 e0       	ldi	r24, 0x01	; 1
    20ea:	0e 94 1c 0c 	call	0x1838	; 0x1838 <_Z6bottomh>
	header(1);
    20ee:	81 e0       	ldi	r24, 0x01	; 1
    20f0:	0e 94 34 0b 	call	0x1668	; 0x1668 <_Z6headerh>
	//Uhr
	oled.draw_number16x16(rtc.msg_uhr[0]-'0',5,1.66*charhighte);
    20f4:	60 91 79 07 	lds	r22, 0x0779
    20f8:	60 53       	subi	r22, 0x30	; 48
    20fa:	2d e0       	ldi	r18, 0x0D	; 13
    20fc:	45 e0       	ldi	r20, 0x05	; 5
    20fe:	82 e4       	ldi	r24, 0x42	; 66
    2100:	93 e0       	ldi	r25, 0x03	; 3
    2102:	0e 94 41 07 	call	0xe82	; 0xe82 <_ZN7Display16draw_number16x16Ehhh>
	oled.draw_number16x16(rtc.msg_uhr[1]-'0',5+numbersmalsize,1.66*charhighte);
    2106:	60 91 7a 07 	lds	r22, 0x077A
    210a:	60 53       	subi	r22, 0x30	; 48
    210c:	2d e0       	ldi	r18, 0x0D	; 13
    210e:	45 e1       	ldi	r20, 0x15	; 21
    2110:	82 e4       	ldi	r24, 0x42	; 66
    2112:	93 e0       	ldi	r25, 0x03	; 3
    2114:	0e 94 41 07 	call	0xe82	; 0xe82 <_ZN7Display16draw_number16x16Ehhh>
	oled.draw_number16x16(rtc.msg_uhr[3]-'0',5,2.33*charhighte+numbersmalhight);
    2118:	60 91 7c 07 	lds	r22, 0x077C
    211c:	60 53       	subi	r22, 0x30	; 48
    211e:	22 e2       	ldi	r18, 0x22	; 34
    2120:	45 e0       	ldi	r20, 0x05	; 5
    2122:	82 e4       	ldi	r24, 0x42	; 66
    2124:	93 e0       	ldi	r25, 0x03	; 3
    2126:	0e 94 41 07 	call	0xe82	; 0xe82 <_ZN7Display16draw_number16x16Ehhh>
	oled.draw_number16x16(rtc.msg_uhr[4]-'0',5+numbersmalsize,2.33*charhighte+numbersmalhight);
    212a:	60 91 7d 07 	lds	r22, 0x077D
    212e:	60 53       	subi	r22, 0x30	; 48
    2130:	22 e2       	ldi	r18, 0x22	; 34
    2132:	45 e1       	ldi	r20, 0x15	; 21
    2134:	82 e4       	ldi	r24, 0x42	; 66
    2136:	93 e0       	ldi	r25, 0x03	; 3
    2138:	0e 94 41 07 	call	0xe82	; 0xe82 <_ZN7Display16draw_number16x16Ehhh>
	
	//Weckerzeit
	oled.draw_number16x16(rtc.WStunden/10,70,1.66*charhighte);
    213c:	c3 e9       	ldi	r28, 0x93	; 147
    213e:	d7 e0       	ldi	r29, 0x07	; 7
    2140:	68 81       	ld	r22, Y
    2142:	1d ec       	ldi	r17, 0xCD	; 205
    2144:	61 9f       	mul	r22, r17
    2146:	61 2d       	mov	r22, r1
    2148:	11 24       	eor	r1, r1
    214a:	66 95       	lsr	r22
    214c:	66 95       	lsr	r22
    214e:	66 95       	lsr	r22
    2150:	2d e0       	ldi	r18, 0x0D	; 13
    2152:	46 e4       	ldi	r20, 0x46	; 70
    2154:	82 e4       	ldi	r24, 0x42	; 66
    2156:	93 e0       	ldi	r25, 0x03	; 3
    2158:	0e 94 41 07 	call	0xe82	; 0xe82 <_ZN7Display16draw_number16x16Ehhh>
	oled.draw_number16x16(rtc.WStunden%10,70+numbersmalsize,1.66*charhighte);
    215c:	68 81       	ld	r22, Y
    215e:	61 9f       	mul	r22, r17
    2160:	81 2d       	mov	r24, r1
    2162:	11 24       	eor	r1, r1
    2164:	86 95       	lsr	r24
    2166:	86 95       	lsr	r24
    2168:	86 95       	lsr	r24
    216a:	88 0f       	add	r24, r24
    216c:	98 2f       	mov	r25, r24
    216e:	99 0f       	add	r25, r25
    2170:	99 0f       	add	r25, r25
    2172:	89 0f       	add	r24, r25
    2174:	68 1b       	sub	r22, r24
    2176:	2d e0       	ldi	r18, 0x0D	; 13
    2178:	46 e5       	ldi	r20, 0x56	; 86
    217a:	82 e4       	ldi	r24, 0x42	; 66
    217c:	93 e0       	ldi	r25, 0x03	; 3
    217e:	0e 94 41 07 	call	0xe82	; 0xe82 <_ZN7Display16draw_number16x16Ehhh>
	oled.draw_number16x16(rtc.WMinuten/10,70,2.33*charhighte+numbersmalhight);
    2182:	c2 e9       	ldi	r28, 0x92	; 146
    2184:	d7 e0       	ldi	r29, 0x07	; 7
    2186:	68 81       	ld	r22, Y
    2188:	61 9f       	mul	r22, r17
    218a:	61 2d       	mov	r22, r1
    218c:	11 24       	eor	r1, r1
    218e:	66 95       	lsr	r22
    2190:	66 95       	lsr	r22
    2192:	66 95       	lsr	r22
    2194:	22 e2       	ldi	r18, 0x22	; 34
    2196:	46 e4       	ldi	r20, 0x46	; 70
    2198:	82 e4       	ldi	r24, 0x42	; 66
    219a:	93 e0       	ldi	r25, 0x03	; 3
    219c:	0e 94 41 07 	call	0xe82	; 0xe82 <_ZN7Display16draw_number16x16Ehhh>
	oled.draw_number16x16(rtc.WMinuten%10,70+numbersmalsize,2.33*charhighte+numbersmalhight);
    21a0:	68 81       	ld	r22, Y
    21a2:	61 9f       	mul	r22, r17
    21a4:	11 2d       	mov	r17, r1
    21a6:	11 24       	eor	r1, r1
    21a8:	16 95       	lsr	r17
    21aa:	16 95       	lsr	r17
    21ac:	16 95       	lsr	r17
    21ae:	11 0f       	add	r17, r17
    21b0:	81 2f       	mov	r24, r17
    21b2:	88 0f       	add	r24, r24
    21b4:	88 0f       	add	r24, r24
    21b6:	18 0f       	add	r17, r24
    21b8:	61 1b       	sub	r22, r17
    21ba:	22 e2       	ldi	r18, 0x22	; 34
    21bc:	46 e5       	ldi	r20, 0x56	; 86
    21be:	82 e4       	ldi	r24, 0x42	; 66
    21c0:	93 e0       	ldi	r25, 0x03	; 3
    21c2:	0e 94 41 07 	call	0xe82	; 0xe82 <_ZN7Display16draw_number16x16Ehhh>
	
	//Weckeraktiv Zeichen
	if ((rtc.interupts&(1<<Weckerein)))
    21c6:	80 91 91 07 	lds	r24, 0x0791
    21ca:	83 ff       	sbrs	r24, 3
    21cc:	07 c0       	rjmp	.+14     	; 0x21dc <_Z13Weckeranzeigev+0x102>
	{
		oled.draw_ASCI('o',0,0);
    21ce:	20 e0       	ldi	r18, 0x00	; 0
    21d0:	40 e0       	ldi	r20, 0x00	; 0
    21d2:	6f e6       	ldi	r22, 0x6F	; 111
    21d4:	82 e4       	ldi	r24, 0x42	; 66
    21d6:	93 e0       	ldi	r25, 0x03	; 3
    21d8:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <_ZN7Display9draw_ASCIEhhh>
	}
	
	//Einstellungsmoeglichekeit
	if ((anzeige&(1<<Einstellungsflag)))
    21dc:	80 91 29 03 	lds	r24, 0x0329
    21e0:	83 ff       	sbrs	r24, 3
    21e2:	09 c0       	rjmp	.+18     	; 0x21f6 <_Z13Weckeranzeigev+0x11c>
	{
		oled.draw_ASCI(pos+'0',1*charsize,0*charhighte);
    21e4:	60 91 28 03 	lds	r22, 0x0328
    21e8:	60 5d       	subi	r22, 0xD0	; 208
    21ea:	20 e0       	ldi	r18, 0x00	; 0
    21ec:	46 e0       	ldi	r20, 0x06	; 6
    21ee:	82 e4       	ldi	r24, 0x42	; 66
    21f0:	93 e0       	ldi	r25, 0x03	; 3
    21f2:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <_ZN7Display9draw_ASCIEhhh>
	}
}
    21f6:	df 91       	pop	r29
    21f8:	cf 91       	pop	r28
    21fa:	1f 91       	pop	r17
    21fc:	08 95       	ret

000021fe <_Z12fahradschirmddddm>:

void fahradschirm(double winkelgeschw, double angle, double weite, double maxgeschwinsigkeit, uint32_t Zeit){
    21fe:	2f 92       	push	r2
    2200:	3f 92       	push	r3
    2202:	4f 92       	push	r4
    2204:	5f 92       	push	r5
    2206:	6f 92       	push	r6
    2208:	7f 92       	push	r7
    220a:	8f 92       	push	r8
    220c:	9f 92       	push	r9
    220e:	af 92       	push	r10
    2210:	bf 92       	push	r11
    2212:	cf 92       	push	r12
    2214:	df 92       	push	r13
    2216:	ef 92       	push	r14
    2218:	ff 92       	push	r15
    221a:	0f 93       	push	r16
    221c:	1f 93       	push	r17
    221e:	cf 93       	push	r28
    2220:	df 93       	push	r29
    2222:	cd b7       	in	r28, 0x3d	; 61
    2224:	de b7       	in	r29, 0x3e	; 62
    2226:	62 97       	sbiw	r28, 0x12	; 18
    2228:	0f b6       	in	r0, 0x3f	; 63
    222a:	f8 94       	cli
    222c:	de bf       	out	0x3e, r29	; 62
    222e:	0f be       	out	0x3f, r0	; 63
    2230:	cd bf       	out	0x3d, r28	; 61
    2232:	76 2e       	mov	r7, r22
    2234:	67 2e       	mov	r6, r23
    2236:	58 2e       	mov	r5, r24
    2238:	49 2e       	mov	r4, r25
    223a:	82 2e       	mov	r8, r18
    223c:	23 2e       	mov	r2, r19
    223e:	94 2e       	mov	r9, r20
    2240:	35 2e       	mov	r3, r21
    2242:	eb 86       	std	Y+11, r14	; 0x0b
    2244:	fc 86       	std	Y+12, r15	; 0x0c
    2246:	0d 87       	std	Y+13, r16	; 0x0d
    2248:	1e 87       	std	Y+14, r17	; 0x0e
    224a:	2f a1       	ldd	r18, Y+39	; 0x27
    224c:	2f 87       	std	Y+15, r18	; 0x0f
    224e:	38 a5       	ldd	r19, Y+40	; 0x28
    2250:	38 8b       	std	Y+16, r19	; 0x10
    2252:	89 a5       	ldd	r24, Y+41	; 0x29
    2254:	89 8b       	std	Y+17, r24	; 0x11
    2256:	9a a5       	ldd	r25, Y+42	; 0x2a
    2258:	9a 8b       	std	Y+18, r25	; 0x12
	char buffer[10];
	uint8_t buffersize=0;
	oled.clearFrame();
    225a:	82 e4       	ldi	r24, 0x42	; 66
    225c:	93 e0       	ldi	r25, 0x03	; 3
    225e:	0e 94 ed 03 	call	0x7da	; 0x7da <_ZN7Display10clearFrameEv>
	header(0);
    2262:	80 e0       	ldi	r24, 0x00	; 0
    2264:	0e 94 34 0b 	call	0x1668	; 0x1668 <_Z6headerh>
	bottom(0);
    2268:	80 e0       	ldi	r24, 0x00	; 0
    226a:	0e 94 1c 0c 	call	0x1838	; 0x1838 <_Z6bottomh>
	//Ausgabe der Geschwidigkeit
	buffersize=sprintf(buffer,"%3.1f",winkelgeschw);
    226e:	4f 92       	push	r4
    2270:	5f 92       	push	r5
    2272:	6f 92       	push	r6
    2274:	7f 92       	push	r7
    2276:	80 e2       	ldi	r24, 0x20	; 32
    2278:	92 e0       	ldi	r25, 0x02	; 2
    227a:	9f 93       	push	r25
    227c:	8f 93       	push	r24
    227e:	ce 01       	movw	r24, r28
    2280:	01 96       	adiw	r24, 0x01	; 1
    2282:	9f 93       	push	r25
    2284:	8f 93       	push	r24
    2286:	0e 94 5a 30 	call	0x60b4	; 0x60b4 <sprintf>
	for(uint8_t i=((SSD1306_WIDTH/numbersmalsize)-buffersize-1);i<((SSD1306_WIDTH/numbersmalsize)-1);i++){
    228a:	27 e0       	ldi	r18, 0x07	; 7
    228c:	02 2f       	mov	r16, r18
    228e:	08 1b       	sub	r16, r24
    2290:	0f b6       	in	r0, 0x3f	; 63
    2292:	f8 94       	cli
    2294:	de bf       	out	0x3e, r29	; 62
    2296:	0f be       	out	0x3f, r0	; 63
    2298:	cd bf       	out	0x3d, r28	; 61
    229a:	07 30       	cpi	r16, 0x07	; 7
    229c:	18 f5       	brcc	.+70     	; 0x22e4 <_Z12fahradschirmddddm+0xe6>
    229e:	10 2f       	mov	r17, r16
    22a0:	12 95       	swap	r17
    22a2:	10 7f       	andi	r17, 0xF0	; 240
		if(buffer[i-((SSD1306_WIDTH/numbersmalsize)-buffersize-1)]=='.'){
    22a4:	7c 01       	movw	r14, r24
    22a6:	ff 24       	eor	r15, r15
    22a8:	e1 e0       	ldi	r30, 0x01	; 1
    22aa:	f0 e0       	ldi	r31, 0x00	; 0
    22ac:	ec 0f       	add	r30, r28
    22ae:	fd 1f       	adc	r31, r29
    22b0:	e0 0f       	add	r30, r16
    22b2:	f1 1d       	adc	r31, r1
    22b4:	ee 0d       	add	r30, r14
    22b6:	ff 1d       	adc	r31, r15
    22b8:	37 97       	sbiw	r30, 0x07	; 7
    22ba:	60 81       	ld	r22, Z
    22bc:	6e 32       	cpi	r22, 0x2E	; 46
    22be:	39 f4       	brne	.+14     	; 0x22ce <_Z12fahradschirmddddm+0xd0>
			oled.draw_ASCI(buffer[i-((SSD1306_WIDTH/numbersmalsize)-buffersize-1)],i*numbersmalsize,4*charhighte);
    22c0:	20 e2       	ldi	r18, 0x20	; 32
    22c2:	41 2f       	mov	r20, r17
    22c4:	82 e4       	ldi	r24, 0x42	; 66
    22c6:	93 e0       	ldi	r25, 0x03	; 3
    22c8:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <_ZN7Display9draw_ASCIEhhh>
    22cc:	07 c0       	rjmp	.+14     	; 0x22dc <_Z12fahradschirmddddm+0xde>
		}
		else{
			oled.draw_number16x16(buffer[i-((SSD1306_WIDTH/numbersmalsize)-buffersize-1)]-'0',i*numbersmalsize,3*charhighte);
    22ce:	60 53       	subi	r22, 0x30	; 48
    22d0:	28 e1       	ldi	r18, 0x18	; 24
    22d2:	41 2f       	mov	r20, r17
    22d4:	82 e4       	ldi	r24, 0x42	; 66
    22d6:	93 e0       	ldi	r25, 0x03	; 3
    22d8:	0e 94 41 07 	call	0xe82	; 0xe82 <_ZN7Display16draw_number16x16Ehhh>
	oled.clearFrame();
	header(0);
	bottom(0);
	//Ausgabe der Geschwidigkeit
	buffersize=sprintf(buffer,"%3.1f",winkelgeschw);
	for(uint8_t i=((SSD1306_WIDTH/numbersmalsize)-buffersize-1);i<((SSD1306_WIDTH/numbersmalsize)-1);i++){
    22dc:	0f 5f       	subi	r16, 0xFF	; 255
    22de:	10 5f       	subi	r17, 0xF0	; 240
    22e0:	07 30       	cpi	r16, 0x07	; 7
    22e2:	11 f7       	brne	.-60     	; 0x22a8 <_Z12fahradschirmddddm+0xaa>
		}
		else{
			oled.draw_number16x16(buffer[i-((SSD1306_WIDTH/numbersmalsize)-buffersize-1)]-'0',i*numbersmalsize,3*charhighte);
		}
	}
	oled.draw_ASCI('k',((SSD1306_WIDTH/charsize-2)*charsize),3*charhighte);
    22e4:	28 e1       	ldi	r18, 0x18	; 24
    22e6:	42 e7       	ldi	r20, 0x72	; 114
    22e8:	6b e6       	ldi	r22, 0x6B	; 107
    22ea:	82 e4       	ldi	r24, 0x42	; 66
    22ec:	93 e0       	ldi	r25, 0x03	; 3
    22ee:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <_ZN7Display9draw_ASCIEhhh>
	oled.draw_ASCI('m',((SSD1306_WIDTH/charsize-1)*charsize),3*charhighte);
    22f2:	28 e1       	ldi	r18, 0x18	; 24
    22f4:	48 e7       	ldi	r20, 0x78	; 120
    22f6:	6d e6       	ldi	r22, 0x6D	; 109
    22f8:	82 e4       	ldi	r24, 0x42	; 66
    22fa:	93 e0       	ldi	r25, 0x03	; 3
    22fc:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <_ZN7Display9draw_ASCIEhhh>
	oled.draw_ASCI('h',((SSD1306_WIDTH/charsize-2)*charsize),4*charhighte);
    2300:	20 e2       	ldi	r18, 0x20	; 32
    2302:	42 e7       	ldi	r20, 0x72	; 114
    2304:	68 e6       	ldi	r22, 0x68	; 104
    2306:	82 e4       	ldi	r24, 0x42	; 66
    2308:	93 e0       	ldi	r25, 0x03	; 3
    230a:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <_ZN7Display9draw_ASCIEhhh>
	//winkelausgabe
	buffersize=sprintf(buffer,"%3.1f",angle);
    230e:	3f 92       	push	r3
    2310:	9f 92       	push	r9
    2312:	2f 92       	push	r2
    2314:	8f 92       	push	r8
    2316:	80 e2       	ldi	r24, 0x20	; 32
    2318:	92 e0       	ldi	r25, 0x02	; 2
    231a:	9f 93       	push	r25
    231c:	8f 93       	push	r24
    231e:	ce 01       	movw	r24, r28
    2320:	01 96       	adiw	r24, 0x01	; 1
    2322:	9f 93       	push	r25
    2324:	8f 93       	push	r24
    2326:	0e 94 5a 30 	call	0x60b4	; 0x60b4 <sprintf>
    232a:	48 2e       	mov	r4, r24
	for (uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,7*charhighte);}
    232c:	0f b6       	in	r0, 0x3f	; 63
    232e:	f8 94       	cli
    2330:	de bf       	out	0x3e, r29	; 62
    2332:	0f be       	out	0x3f, r0	; 63
    2334:	cd bf       	out	0x3d, r28	; 61
    2336:	88 23       	and	r24, r24
    2338:	99 f0       	breq	.+38     	; 0x2360 <_Z12fahradschirmddddm+0x162>
    233a:	ce 01       	movw	r24, r28
    233c:	01 96       	adiw	r24, 0x01	; 1
    233e:	3c 01       	movw	r6, r24
    2340:	7c 01       	movw	r14, r24
    2342:	10 e0       	ldi	r17, 0x00	; 0
    2344:	f7 01       	movw	r30, r14
    2346:	61 91       	ld	r22, Z+
    2348:	7f 01       	movw	r14, r30
    234a:	28 e3       	ldi	r18, 0x38	; 56
    234c:	41 2f       	mov	r20, r17
    234e:	82 e4       	ldi	r24, 0x42	; 66
    2350:	93 e0       	ldi	r25, 0x03	; 3
    2352:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <_ZN7Display9draw_ASCIEhhh>
    2356:	1a 5f       	subi	r17, 0xFA	; 250
    2358:	8e 2d       	mov	r24, r14
    235a:	86 19       	sub	r24, r6
    235c:	84 15       	cp	r24, r4
    235e:	90 f3       	brcs	.-28     	; 0x2344 <_Z12fahradschirmddddm+0x146>
	anzeige_kleinenadel(31,31,angle);
    2360:	28 2d       	mov	r18, r8
    2362:	32 2d       	mov	r19, r2
    2364:	49 2d       	mov	r20, r9
    2366:	53 2d       	mov	r21, r3
    2368:	6f e1       	ldi	r22, 0x1F	; 31
    236a:	8f e1       	ldi	r24, 0x1F	; 31
    236c:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <_Z19anzeige_kleinenadelhhf>
	//anzeige der gesammtstrecke
	buffersize=sprintf(buffer,"%.1fm",weite);
    2370:	fe 85       	ldd	r31, Y+14	; 0x0e
    2372:	ff 93       	push	r31
    2374:	2d 85       	ldd	r18, Y+13	; 0x0d
    2376:	2f 93       	push	r18
    2378:	3c 85       	ldd	r19, Y+12	; 0x0c
    237a:	3f 93       	push	r19
    237c:	8b 85       	ldd	r24, Y+11	; 0x0b
    237e:	8f 93       	push	r24
    2380:	86 e2       	ldi	r24, 0x26	; 38
    2382:	92 e0       	ldi	r25, 0x02	; 2
    2384:	9f 93       	push	r25
    2386:	8f 93       	push	r24
    2388:	ce 01       	movw	r24, r28
    238a:	01 96       	adiw	r24, 0x01	; 1
    238c:	9f 93       	push	r25
    238e:	8f 93       	push	r24
    2390:	0e 94 5a 30 	call	0x60b4	; 0x60b4 <sprintf>
    2394:	88 2e       	mov	r8, r24
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize+70,2*charhighte);}
    2396:	0f b6       	in	r0, 0x3f	; 63
    2398:	f8 94       	cli
    239a:	de bf       	out	0x3e, r29	; 62
    239c:	0f be       	out	0x3f, r0	; 63
    239e:	cd bf       	out	0x3d, r28	; 61
    23a0:	88 23       	and	r24, r24
    23a2:	c1 f0       	breq	.+48     	; 0x23d4 <_Z12fahradschirmddddm+0x1d6>
    23a4:	9e 01       	movw	r18, r28
    23a6:	2f 5f       	subi	r18, 0xFF	; 255
    23a8:	3f 4f       	sbci	r19, 0xFF	; 255
    23aa:	79 01       	movw	r14, r18
    23ac:	89 01       	movw	r16, r18
    23ae:	0f 2e       	mov	r0, r31
    23b0:	f6 e4       	ldi	r31, 0x46	; 70
    23b2:	9f 2e       	mov	r9, r31
    23b4:	f0 2d       	mov	r31, r0
    23b6:	f8 01       	movw	r30, r16
    23b8:	61 91       	ld	r22, Z+
    23ba:	8f 01       	movw	r16, r30
    23bc:	20 e1       	ldi	r18, 0x10	; 16
    23be:	49 2d       	mov	r20, r9
    23c0:	82 e4       	ldi	r24, 0x42	; 66
    23c2:	93 e0       	ldi	r25, 0x03	; 3
    23c4:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <_ZN7Display9draw_ASCIEhhh>
    23c8:	f6 e0       	ldi	r31, 0x06	; 6
    23ca:	9f 0e       	add	r9, r31
    23cc:	90 2f       	mov	r25, r16
    23ce:	9e 19       	sub	r25, r14
    23d0:	98 15       	cp	r25, r8
    23d2:	88 f3       	brcs	.-30     	; 0x23b6 <_Z12fahradschirmddddm+0x1b8>
	//anzeige der max geschwindigkeit
	buffersize=sprintf(buffer,"%.1fkm/h",maxgeschwinsigkeit);
    23d4:	df 92       	push	r13
    23d6:	cf 92       	push	r12
    23d8:	bf 92       	push	r11
    23da:	af 92       	push	r10
    23dc:	8c e2       	ldi	r24, 0x2C	; 44
    23de:	92 e0       	ldi	r25, 0x02	; 2
    23e0:	9f 93       	push	r25
    23e2:	8f 93       	push	r24
    23e4:	ce 01       	movw	r24, r28
    23e6:	01 96       	adiw	r24, 0x01	; 1
    23e8:	9f 93       	push	r25
    23ea:	8f 93       	push	r24
    23ec:	0e 94 5a 30 	call	0x60b4	; 0x60b4 <sprintf>
    23f0:	c8 2e       	mov	r12, r24
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize+70,5*charhighte);}
    23f2:	0f b6       	in	r0, 0x3f	; 63
    23f4:	f8 94       	cli
    23f6:	de bf       	out	0x3e, r29	; 62
    23f8:	0f be       	out	0x3f, r0	; 63
    23fa:	cd bf       	out	0x3d, r28	; 61
    23fc:	88 23       	and	r24, r24
    23fe:	b9 f0       	breq	.+46     	; 0x242e <_Z12fahradschirmddddm+0x230>
    2400:	ce 01       	movw	r24, r28
    2402:	01 96       	adiw	r24, 0x01	; 1
    2404:	7c 01       	movw	r14, r24
    2406:	8c 01       	movw	r16, r24
    2408:	0f 2e       	mov	r0, r31
    240a:	f6 e4       	ldi	r31, 0x46	; 70
    240c:	df 2e       	mov	r13, r31
    240e:	f0 2d       	mov	r31, r0
    2410:	f8 01       	movw	r30, r16
    2412:	61 91       	ld	r22, Z+
    2414:	8f 01       	movw	r16, r30
    2416:	28 e2       	ldi	r18, 0x28	; 40
    2418:	4d 2d       	mov	r20, r13
    241a:	82 e4       	ldi	r24, 0x42	; 66
    241c:	93 e0       	ldi	r25, 0x03	; 3
    241e:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <_ZN7Display9draw_ASCIEhhh>
    2422:	f6 e0       	ldi	r31, 0x06	; 6
    2424:	df 0e       	add	r13, r31
    2426:	90 2f       	mov	r25, r16
    2428:	9e 19       	sub	r25, r14
    242a:	9c 15       	cp	r25, r12
    242c:	88 f3       	brcs	.-30     	; 0x2410 <_Z12fahradschirmddddm+0x212>
	//anzeige der Fahrtzeit
	buffersize=sprintf(buffer,"%lus",Zeit);
    242e:	2a 89       	ldd	r18, Y+18	; 0x12
    2430:	2f 93       	push	r18
    2432:	39 89       	ldd	r19, Y+17	; 0x11
    2434:	3f 93       	push	r19
    2436:	88 89       	ldd	r24, Y+16	; 0x10
    2438:	8f 93       	push	r24
    243a:	9f 85       	ldd	r25, Y+15	; 0x0f
    243c:	9f 93       	push	r25
    243e:	85 e3       	ldi	r24, 0x35	; 53
    2440:	92 e0       	ldi	r25, 0x02	; 2
    2442:	9f 93       	push	r25
    2444:	8f 93       	push	r24
    2446:	ce 01       	movw	r24, r28
    2448:	01 96       	adiw	r24, 0x01	; 1
    244a:	9f 93       	push	r25
    244c:	8f 93       	push	r24
    244e:	0e 94 5a 30 	call	0x60b4	; 0x60b4 <sprintf>
    2452:	c8 2e       	mov	r12, r24
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize+70,6*charhighte);}
    2454:	0f b6       	in	r0, 0x3f	; 63
    2456:	f8 94       	cli
    2458:	de bf       	out	0x3e, r29	; 62
    245a:	0f be       	out	0x3f, r0	; 63
    245c:	cd bf       	out	0x3d, r28	; 61
    245e:	88 23       	and	r24, r24
    2460:	c1 f0       	breq	.+48     	; 0x2492 <_Z12fahradschirmddddm+0x294>
    2462:	9e 01       	movw	r18, r28
    2464:	2f 5f       	subi	r18, 0xFF	; 255
    2466:	3f 4f       	sbci	r19, 0xFF	; 255
    2468:	79 01       	movw	r14, r18
    246a:	89 01       	movw	r16, r18
    246c:	0f 2e       	mov	r0, r31
    246e:	f6 e4       	ldi	r31, 0x46	; 70
    2470:	df 2e       	mov	r13, r31
    2472:	f0 2d       	mov	r31, r0
    2474:	f8 01       	movw	r30, r16
    2476:	61 91       	ld	r22, Z+
    2478:	8f 01       	movw	r16, r30
    247a:	20 e3       	ldi	r18, 0x30	; 48
    247c:	4d 2d       	mov	r20, r13
    247e:	82 e4       	ldi	r24, 0x42	; 66
    2480:	93 e0       	ldi	r25, 0x03	; 3
    2482:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <_ZN7Display9draw_ASCIEhhh>
    2486:	f6 e0       	ldi	r31, 0x06	; 6
    2488:	df 0e       	add	r13, r31
    248a:	90 2f       	mov	r25, r16
    248c:	9e 19       	sub	r25, r14
    248e:	9c 15       	cp	r25, r12
    2490:	88 f3       	brcs	.-30     	; 0x2474 <_Z12fahradschirmddddm+0x276>
}
    2492:	62 96       	adiw	r28, 0x12	; 18
    2494:	0f b6       	in	r0, 0x3f	; 63
    2496:	f8 94       	cli
    2498:	de bf       	out	0x3e, r29	; 62
    249a:	0f be       	out	0x3f, r0	; 63
    249c:	cd bf       	out	0x3d, r28	; 61
    249e:	df 91       	pop	r29
    24a0:	cf 91       	pop	r28
    24a2:	1f 91       	pop	r17
    24a4:	0f 91       	pop	r16
    24a6:	ff 90       	pop	r15
    24a8:	ef 90       	pop	r14
    24aa:	df 90       	pop	r13
    24ac:	cf 90       	pop	r12
    24ae:	bf 90       	pop	r11
    24b0:	af 90       	pop	r10
    24b2:	9f 90       	pop	r9
    24b4:	8f 90       	pop	r8
    24b6:	7f 90       	pop	r7
    24b8:	6f 90       	pop	r6
    24ba:	5f 90       	pop	r5
    24bc:	4f 90       	pop	r4
    24be:	3f 90       	pop	r3
    24c0:	2f 90       	pop	r2
    24c2:	08 95       	ret

000024c4 <_Z14Gaineinstellenv>:

void Gaineinstellen(){
    24c4:	cf 92       	push	r12
    24c6:	df 92       	push	r13
    24c8:	ef 92       	push	r14
    24ca:	ff 92       	push	r15
    24cc:	0f 93       	push	r16
    24ce:	1f 93       	push	r17
    24d0:	cf 93       	push	r28
    24d2:	df 93       	push	r29
    24d4:	cd b7       	in	r28, 0x3d	; 61
    24d6:	de b7       	in	r29, 0x3e	; 62
    24d8:	64 97       	sbiw	r28, 0x14	; 20
    24da:	0f b6       	in	r0, 0x3f	; 63
    24dc:	f8 94       	cli
    24de:	de bf       	out	0x3e, r29	; 62
    24e0:	0f be       	out	0x3f, r0	; 63
    24e2:	cd bf       	out	0x3d, r28	; 61
	char buffer[20];
	uint8_t buffersize=0;

	oled.clearFrame();
    24e4:	82 e4       	ldi	r24, 0x42	; 66
    24e6:	93 e0       	ldi	r25, 0x03	; 3
    24e8:	0e 94 ed 03 	call	0x7da	; 0x7da <_ZN7Display10clearFrameEv>
	buffersize=sprintf(buffer,"1: 1370");
    24ec:	88 e0       	ldi	r24, 0x08	; 8
    24ee:	ea e3       	ldi	r30, 0x3A	; 58
    24f0:	f2 e0       	ldi	r31, 0x02	; 2
    24f2:	8e 01       	movw	r16, r28
    24f4:	0f 5f       	subi	r16, 0xFF	; 255
    24f6:	1f 4f       	sbci	r17, 0xFF	; 255
    24f8:	d8 01       	movw	r26, r16
    24fa:	01 90       	ld	r0, Z+
    24fc:	0d 92       	st	X+, r0
    24fe:	8a 95       	dec	r24
    2500:	e1 f7       	brne	.-8      	; 0x24fa <_Z14Gaineinstellenv+0x36>
    2502:	e0 2e       	mov	r14, r16
    2504:	f1 2e       	mov	r15, r17
    2506:	68 01       	movw	r12, r16
    2508:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,0*charhighte);}
    250a:	f6 01       	movw	r30, r12
    250c:	61 91       	ld	r22, Z+
    250e:	6f 01       	movw	r12, r30
    2510:	20 e0       	ldi	r18, 0x00	; 0
    2512:	41 2f       	mov	r20, r17
    2514:	82 e4       	ldi	r24, 0x42	; 66
    2516:	93 e0       	ldi	r25, 0x03	; 3
    2518:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <_ZN7Display9draw_ASCIEhhh>
    251c:	1a 5f       	subi	r17, 0xFA	; 250
    251e:	1a 32       	cpi	r17, 0x2A	; 42
    2520:	a1 f7       	brne	.-24     	; 0x250a <_Z14Gaineinstellenv+0x46>
	buffersize=sprintf(buffer,"2: 1090");
    2522:	88 e0       	ldi	r24, 0x08	; 8
    2524:	e2 e4       	ldi	r30, 0x42	; 66
    2526:	f2 e0       	ldi	r31, 0x02	; 2
    2528:	de 01       	movw	r26, r28
    252a:	11 96       	adiw	r26, 0x01	; 1
    252c:	01 90       	ld	r0, Z+
    252e:	0d 92       	st	X+, r0
    2530:	8a 95       	dec	r24
    2532:	e1 f7       	brne	.-8      	; 0x252c <_Z14Gaineinstellenv+0x68>
    2534:	ce 2c       	mov	r12, r14
    2536:	df 2c       	mov	r13, r15
    2538:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,1*charhighte);}
    253a:	f6 01       	movw	r30, r12
    253c:	61 91       	ld	r22, Z+
    253e:	6f 01       	movw	r12, r30
    2540:	28 e0       	ldi	r18, 0x08	; 8
    2542:	41 2f       	mov	r20, r17
    2544:	82 e4       	ldi	r24, 0x42	; 66
    2546:	93 e0       	ldi	r25, 0x03	; 3
    2548:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <_ZN7Display9draw_ASCIEhhh>
    254c:	1a 5f       	subi	r17, 0xFA	; 250
    254e:	1a 32       	cpi	r17, 0x2A	; 42
    2550:	a1 f7       	brne	.-24     	; 0x253a <_Z14Gaineinstellenv+0x76>
	buffersize=sprintf(buffer,"3:  820");
    2552:	88 e0       	ldi	r24, 0x08	; 8
    2554:	ea e4       	ldi	r30, 0x4A	; 74
    2556:	f2 e0       	ldi	r31, 0x02	; 2
    2558:	de 01       	movw	r26, r28
    255a:	11 96       	adiw	r26, 0x01	; 1
    255c:	01 90       	ld	r0, Z+
    255e:	0d 92       	st	X+, r0
    2560:	8a 95       	dec	r24
    2562:	e1 f7       	brne	.-8      	; 0x255c <_Z14Gaineinstellenv+0x98>
    2564:	ce 2c       	mov	r12, r14
    2566:	df 2c       	mov	r13, r15
    2568:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,2*charhighte);}
    256a:	f6 01       	movw	r30, r12
    256c:	61 91       	ld	r22, Z+
    256e:	6f 01       	movw	r12, r30
    2570:	20 e1       	ldi	r18, 0x10	; 16
    2572:	41 2f       	mov	r20, r17
    2574:	82 e4       	ldi	r24, 0x42	; 66
    2576:	93 e0       	ldi	r25, 0x03	; 3
    2578:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <_ZN7Display9draw_ASCIEhhh>
    257c:	1a 5f       	subi	r17, 0xFA	; 250
    257e:	1a 32       	cpi	r17, 0x2A	; 42
    2580:	a1 f7       	brne	.-24     	; 0x256a <_Z14Gaineinstellenv+0xa6>
	buffersize=sprintf(buffer,"4:  660");
    2582:	88 e0       	ldi	r24, 0x08	; 8
    2584:	e2 e5       	ldi	r30, 0x52	; 82
    2586:	f2 e0       	ldi	r31, 0x02	; 2
    2588:	de 01       	movw	r26, r28
    258a:	11 96       	adiw	r26, 0x01	; 1
    258c:	01 90       	ld	r0, Z+
    258e:	0d 92       	st	X+, r0
    2590:	8a 95       	dec	r24
    2592:	e1 f7       	brne	.-8      	; 0x258c <_Z14Gaineinstellenv+0xc8>
    2594:	ce 2c       	mov	r12, r14
    2596:	df 2c       	mov	r13, r15
    2598:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,3*charhighte);}
    259a:	f6 01       	movw	r30, r12
    259c:	61 91       	ld	r22, Z+
    259e:	6f 01       	movw	r12, r30
    25a0:	28 e1       	ldi	r18, 0x18	; 24
    25a2:	41 2f       	mov	r20, r17
    25a4:	82 e4       	ldi	r24, 0x42	; 66
    25a6:	93 e0       	ldi	r25, 0x03	; 3
    25a8:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <_ZN7Display9draw_ASCIEhhh>
    25ac:	1a 5f       	subi	r17, 0xFA	; 250
    25ae:	1a 32       	cpi	r17, 0x2A	; 42
    25b0:	a1 f7       	brne	.-24     	; 0x259a <_Z14Gaineinstellenv+0xd6>
	buffersize=sprintf(buffer,"5:  440");
    25b2:	88 e0       	ldi	r24, 0x08	; 8
    25b4:	ea e5       	ldi	r30, 0x5A	; 90
    25b6:	f2 e0       	ldi	r31, 0x02	; 2
    25b8:	de 01       	movw	r26, r28
    25ba:	11 96       	adiw	r26, 0x01	; 1
    25bc:	01 90       	ld	r0, Z+
    25be:	0d 92       	st	X+, r0
    25c0:	8a 95       	dec	r24
    25c2:	e1 f7       	brne	.-8      	; 0x25bc <_Z14Gaineinstellenv+0xf8>
    25c4:	ce 2c       	mov	r12, r14
    25c6:	df 2c       	mov	r13, r15
    25c8:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,4*charhighte);}
    25ca:	f6 01       	movw	r30, r12
    25cc:	61 91       	ld	r22, Z+
    25ce:	6f 01       	movw	r12, r30
    25d0:	20 e2       	ldi	r18, 0x20	; 32
    25d2:	41 2f       	mov	r20, r17
    25d4:	82 e4       	ldi	r24, 0x42	; 66
    25d6:	93 e0       	ldi	r25, 0x03	; 3
    25d8:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <_ZN7Display9draw_ASCIEhhh>
    25dc:	1a 5f       	subi	r17, 0xFA	; 250
    25de:	1a 32       	cpi	r17, 0x2A	; 42
    25e0:	a1 f7       	brne	.-24     	; 0x25ca <_Z14Gaineinstellenv+0x106>
	buffersize=sprintf(buffer,"6:  390");
    25e2:	88 e0       	ldi	r24, 0x08	; 8
    25e4:	e2 e6       	ldi	r30, 0x62	; 98
    25e6:	f2 e0       	ldi	r31, 0x02	; 2
    25e8:	de 01       	movw	r26, r28
    25ea:	11 96       	adiw	r26, 0x01	; 1
    25ec:	01 90       	ld	r0, Z+
    25ee:	0d 92       	st	X+, r0
    25f0:	8a 95       	dec	r24
    25f2:	e1 f7       	brne	.-8      	; 0x25ec <_Z14Gaineinstellenv+0x128>
    25f4:	ce 2c       	mov	r12, r14
    25f6:	df 2c       	mov	r13, r15
    25f8:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,5*charhighte);}
    25fa:	f6 01       	movw	r30, r12
    25fc:	61 91       	ld	r22, Z+
    25fe:	6f 01       	movw	r12, r30
    2600:	28 e2       	ldi	r18, 0x28	; 40
    2602:	41 2f       	mov	r20, r17
    2604:	82 e4       	ldi	r24, 0x42	; 66
    2606:	93 e0       	ldi	r25, 0x03	; 3
    2608:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <_ZN7Display9draw_ASCIEhhh>
    260c:	1a 5f       	subi	r17, 0xFA	; 250
    260e:	1a 32       	cpi	r17, 0x2A	; 42
    2610:	a1 f7       	brne	.-24     	; 0x25fa <_Z14Gaineinstellenv+0x136>
	buffersize=sprintf(buffer,"7:  330");
    2612:	88 e0       	ldi	r24, 0x08	; 8
    2614:	ea e6       	ldi	r30, 0x6A	; 106
    2616:	f2 e0       	ldi	r31, 0x02	; 2
    2618:	de 01       	movw	r26, r28
    261a:	11 96       	adiw	r26, 0x01	; 1
    261c:	01 90       	ld	r0, Z+
    261e:	0d 92       	st	X+, r0
    2620:	8a 95       	dec	r24
    2622:	e1 f7       	brne	.-8      	; 0x261c <_Z14Gaineinstellenv+0x158>
    2624:	ce 2c       	mov	r12, r14
    2626:	df 2c       	mov	r13, r15
    2628:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,6*charhighte);}
    262a:	f6 01       	movw	r30, r12
    262c:	61 91       	ld	r22, Z+
    262e:	6f 01       	movw	r12, r30
    2630:	20 e3       	ldi	r18, 0x30	; 48
    2632:	41 2f       	mov	r20, r17
    2634:	82 e4       	ldi	r24, 0x42	; 66
    2636:	93 e0       	ldi	r25, 0x03	; 3
    2638:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <_ZN7Display9draw_ASCIEhhh>
    263c:	1a 5f       	subi	r17, 0xFA	; 250
    263e:	1a 32       	cpi	r17, 0x2A	; 42
    2640:	a1 f7       	brne	.-24     	; 0x262a <_Z14Gaineinstellenv+0x166>
	buffersize=sprintf(buffer,"8:  230");
    2642:	88 e0       	ldi	r24, 0x08	; 8
    2644:	e2 e7       	ldi	r30, 0x72	; 114
    2646:	f2 e0       	ldi	r31, 0x02	; 2
    2648:	de 01       	movw	r26, r28
    264a:	11 96       	adiw	r26, 0x01	; 1
    264c:	01 90       	ld	r0, Z+
    264e:	0d 92       	st	X+, r0
    2650:	8a 95       	dec	r24
    2652:	e1 f7       	brne	.-8      	; 0x264c <_Z14Gaineinstellenv+0x188>
    2654:	ce 2c       	mov	r12, r14
    2656:	df 2c       	mov	r13, r15
    2658:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,7*charhighte);}
    265a:	f6 01       	movw	r30, r12
    265c:	61 91       	ld	r22, Z+
    265e:	6f 01       	movw	r12, r30
    2660:	28 e3       	ldi	r18, 0x38	; 56
    2662:	41 2f       	mov	r20, r17
    2664:	82 e4       	ldi	r24, 0x42	; 66
    2666:	93 e0       	ldi	r25, 0x03	; 3
    2668:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <_ZN7Display9draw_ASCIEhhh>
    266c:	1a 5f       	subi	r17, 0xFA	; 250
    266e:	1a 32       	cpi	r17, 0x2A	; 42
    2670:	a1 f7       	brne	.-24     	; 0x265a <_Z14Gaineinstellenv+0x196>
}
    2672:	64 96       	adiw	r28, 0x14	; 20
    2674:	0f b6       	in	r0, 0x3f	; 63
    2676:	f8 94       	cli
    2678:	de bf       	out	0x3e, r29	; 62
    267a:	0f be       	out	0x3f, r0	; 63
    267c:	cd bf       	out	0x3d, r28	; 61
    267e:	df 91       	pop	r29
    2680:	cf 91       	pop	r28
    2682:	1f 91       	pop	r17
    2684:	0f 91       	pop	r16
    2686:	ff 90       	pop	r15
    2688:	ef 90       	pop	r14
    268a:	df 90       	pop	r13
    268c:	cf 90       	pop	r12
    268e:	08 95       	ret

00002690 <_Z15anzeige_kompassd>:

void anzeige_kompass(double winkel){
    2690:	9f 92       	push	r9
    2692:	af 92       	push	r10
    2694:	bf 92       	push	r11
    2696:	cf 92       	push	r12
    2698:	df 92       	push	r13
    269a:	ef 92       	push	r14
    269c:	ff 92       	push	r15
    269e:	0f 93       	push	r16
    26a0:	1f 93       	push	r17
    26a2:	cf 93       	push	r28
    26a4:	df 93       	push	r29
    26a6:	cd b7       	in	r28, 0x3d	; 61
    26a8:	de b7       	in	r29, 0x3e	; 62
    26aa:	64 97       	sbiw	r28, 0x14	; 20
    26ac:	0f b6       	in	r0, 0x3f	; 63
    26ae:	f8 94       	cli
    26b0:	de bf       	out	0x3e, r29	; 62
    26b2:	0f be       	out	0x3f, r0	; 63
    26b4:	cd bf       	out	0x3d, r28	; 61
    26b6:	c6 2e       	mov	r12, r22
    26b8:	d7 2e       	mov	r13, r23
    26ba:	e8 2e       	mov	r14, r24
    26bc:	f9 2e       	mov	r15, r25
	Baro.READ_Pressure_once();
    26be:	8f e2       	ldi	r24, 0x2F	; 47
    26c0:	93 e0       	ldi	r25, 0x03	; 3
    26c2:	0e 94 69 25 	call	0x4ad2	; 0x4ad2 <_ZN8Pressure18READ_Pressure_onceEv>
	Baro.READ_Temperature();
    26c6:	8f e2       	ldi	r24, 0x2F	; 47
    26c8:	93 e0       	ldi	r25, 0x03	; 3
    26ca:	0e 94 f1 25 	call	0x4be2	; 0x4be2 <_ZN8Pressure16READ_TemperatureEv>
	oled.clearFrame();
    26ce:	82 e4       	ldi	r24, 0x42	; 66
    26d0:	93 e0       	ldi	r25, 0x03	; 3
    26d2:	0e 94 ed 03 	call	0x7da	; 0x7da <_ZN7Display10clearFrameEv>
    26d6:	0f 2e       	mov	r0, r31
    26d8:	f9 e7       	ldi	r31, 0x79	; 121
    26da:	af 2e       	mov	r10, r31
    26dc:	f7 e0       	ldi	r31, 0x07	; 7
    26de:	bf 2e       	mov	r11, r31
    26e0:	f0 2d       	mov	r31, r0
    26e2:	11 e4       	ldi	r17, 0x41	; 65
	char buffer[20];
	uint8_t buffersize=0;
	//Uhrzeit
	for(uint8_t i=0;i<bitsderrtc;i++){oled.draw_ASCI(rtc.msg_uhr[i],65+i*charsize,0*charhighte);}
    26e4:	f5 01       	movw	r30, r10
    26e6:	61 91       	ld	r22, Z+
    26e8:	5f 01       	movw	r10, r30
    26ea:	20 e0       	ldi	r18, 0x00	; 0
    26ec:	41 2f       	mov	r20, r17
    26ee:	82 e4       	ldi	r24, 0x42	; 66
    26f0:	93 e0       	ldi	r25, 0x03	; 3
    26f2:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <_ZN7Display9draw_ASCIEhhh>
    26f6:	1a 5f       	subi	r17, 0xFA	; 250
    26f8:	11 37       	cpi	r17, 0x71	; 113
    26fa:	a1 f7       	brne	.-24     	; 0x26e4 <_Z15anzeige_kompassd+0x54>
    26fc:	0f 2e       	mov	r0, r31
    26fe:	f1 e8       	ldi	r31, 0x81	; 129
    2700:	af 2e       	mov	r10, r31
    2702:	f7 e0       	ldi	r31, 0x07	; 7
    2704:	bf 2e       	mov	r11, r31
    2706:	f0 2d       	mov	r31, r0
    2708:	11 e4       	ldi	r17, 0x41	; 65
	for(uint8_t i=0;i<bitsderrtc;i++){oled.draw_ASCI(rtc.msg_dat[i],65+i*charsize,7*charhighte);}
    270a:	f5 01       	movw	r30, r10
    270c:	61 91       	ld	r22, Z+
    270e:	5f 01       	movw	r10, r30
    2710:	28 e3       	ldi	r18, 0x38	; 56
    2712:	41 2f       	mov	r20, r17
    2714:	82 e4       	ldi	r24, 0x42	; 66
    2716:	93 e0       	ldi	r25, 0x03	; 3
    2718:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <_ZN7Display9draw_ASCIEhhh>
    271c:	1a 5f       	subi	r17, 0xFA	; 250
    271e:	11 37       	cpi	r17, 0x71	; 113
    2720:	a1 f7       	brne	.-24     	; 0x270a <_Z15anzeige_kompassd+0x7a>
	//Azeige der Hoehe ueber Altitude
	buffersize=sprintf(buffer,"H: %.1f m",(double)Baro.altitude(Baro.Press));
    2722:	40 91 2f 03 	lds	r20, 0x032F
    2726:	50 91 30 03 	lds	r21, 0x0330
    272a:	60 91 31 03 	lds	r22, 0x0331
    272e:	70 91 32 03 	lds	r23, 0x0332
    2732:	8f e2       	ldi	r24, 0x2F	; 47
    2734:	93 e0       	ldi	r25, 0x03	; 3
    2736:	0e 94 6e 26 	call	0x4cdc	; 0x4cdc <_ZN8Pressure8altitudeEd>
    273a:	9f 93       	push	r25
    273c:	8f 93       	push	r24
    273e:	7f 93       	push	r23
    2740:	6f 93       	push	r22
    2742:	8a e7       	ldi	r24, 0x7A	; 122
    2744:	92 e0       	ldi	r25, 0x02	; 2
    2746:	9f 93       	push	r25
    2748:	8f 93       	push	r24
    274a:	ce 01       	movw	r24, r28
    274c:	01 96       	adiw	r24, 0x01	; 1
    274e:	9f 93       	push	r25
    2750:	8f 93       	push	r24
    2752:	0e 94 5a 30 	call	0x60b4	; 0x60b4 <sprintf>
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],65+i*charsize,1.33*charhighte);}
    2756:	0f b6       	in	r0, 0x3f	; 63
    2758:	f8 94       	cli
    275a:	de bf       	out	0x3e, r29	; 62
    275c:	0f be       	out	0x3f, r0	; 63
    275e:	cd bf       	out	0x3d, r28	; 61
    2760:	88 23       	and	r24, r24
    2762:	f1 f0       	breq	.+60     	; 0x27a0 <_Z15anzeige_kompassd+0x110>
    2764:	8e 01       	movw	r16, r28
    2766:	0f 5f       	subi	r16, 0xFF	; 255
    2768:	1f 4f       	sbci	r17, 0xFF	; 255
    276a:	81 50       	subi	r24, 0x01	; 1
    276c:	68 94       	set
    276e:	aa 24       	eor	r10, r10
    2770:	a1 f8       	bld	r10, 1
    2772:	b1 2c       	mov	r11, r1
    2774:	ac 0e       	add	r10, r28
    2776:	bd 1e       	adc	r11, r29
    2778:	a8 0e       	add	r10, r24
    277a:	b1 1c       	adc	r11, r1
    277c:	0f 2e       	mov	r0, r31
    277e:	f1 e4       	ldi	r31, 0x41	; 65
    2780:	9f 2e       	mov	r9, r31
    2782:	f0 2d       	mov	r31, r0
    2784:	f8 01       	movw	r30, r16
    2786:	61 91       	ld	r22, Z+
    2788:	8f 01       	movw	r16, r30
    278a:	2a e0       	ldi	r18, 0x0A	; 10
    278c:	49 2d       	mov	r20, r9
    278e:	82 e4       	ldi	r24, 0x42	; 66
    2790:	93 e0       	ldi	r25, 0x03	; 3
    2792:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <_ZN7Display9draw_ASCIEhhh>
    2796:	f6 e0       	ldi	r31, 0x06	; 6
    2798:	9f 0e       	add	r9, r31
    279a:	0a 15       	cp	r16, r10
    279c:	1b 05       	cpc	r17, r11
    279e:	91 f7       	brne	.-28     	; 0x2784 <_Z15anzeige_kompassd+0xf4>
	//Anzeige der Temperatur
	buffersize=sprintf(buffer,"%.1f C",(double)Baro.Tempera);
    27a0:	e3 e3       	ldi	r30, 0x33	; 51
    27a2:	f3 e0       	ldi	r31, 0x03	; 3
    27a4:	83 81       	ldd	r24, Z+3	; 0x03
    27a6:	8f 93       	push	r24
    27a8:	82 81       	ldd	r24, Z+2	; 0x02
    27aa:	8f 93       	push	r24
    27ac:	81 81       	ldd	r24, Z+1	; 0x01
    27ae:	8f 93       	push	r24
    27b0:	80 81       	ld	r24, Z
    27b2:	8f 93       	push	r24
    27b4:	89 e1       	ldi	r24, 0x19	; 25
    27b6:	92 e0       	ldi	r25, 0x02	; 2
    27b8:	9f 93       	push	r25
    27ba:	8f 93       	push	r24
    27bc:	ce 01       	movw	r24, r28
    27be:	01 96       	adiw	r24, 0x01	; 1
    27c0:	9f 93       	push	r25
    27c2:	8f 93       	push	r24
    27c4:	0e 94 5a 30 	call	0x60b4	; 0x60b4 <sprintf>
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],65+i*charsize,5*charhighte);}
    27c8:	0f b6       	in	r0, 0x3f	; 63
    27ca:	f8 94       	cli
    27cc:	de bf       	out	0x3e, r29	; 62
    27ce:	0f be       	out	0x3f, r0	; 63
    27d0:	cd bf       	out	0x3d, r28	; 61
    27d2:	88 23       	and	r24, r24
    27d4:	f1 f0       	breq	.+60     	; 0x2812 <_Z15anzeige_kompassd+0x182>
    27d6:	8e 01       	movw	r16, r28
    27d8:	0f 5f       	subi	r16, 0xFF	; 255
    27da:	1f 4f       	sbci	r17, 0xFF	; 255
    27dc:	81 50       	subi	r24, 0x01	; 1
    27de:	68 94       	set
    27e0:	aa 24       	eor	r10, r10
    27e2:	a1 f8       	bld	r10, 1
    27e4:	b1 2c       	mov	r11, r1
    27e6:	ac 0e       	add	r10, r28
    27e8:	bd 1e       	adc	r11, r29
    27ea:	a8 0e       	add	r10, r24
    27ec:	b1 1c       	adc	r11, r1
    27ee:	0f 2e       	mov	r0, r31
    27f0:	f1 e4       	ldi	r31, 0x41	; 65
    27f2:	9f 2e       	mov	r9, r31
    27f4:	f0 2d       	mov	r31, r0
    27f6:	f8 01       	movw	r30, r16
    27f8:	61 91       	ld	r22, Z+
    27fa:	8f 01       	movw	r16, r30
    27fc:	28 e2       	ldi	r18, 0x28	; 40
    27fe:	49 2d       	mov	r20, r9
    2800:	82 e4       	ldi	r24, 0x42	; 66
    2802:	93 e0       	ldi	r25, 0x03	; 3
    2804:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <_ZN7Display9draw_ASCIEhhh>
    2808:	f6 e0       	ldi	r31, 0x06	; 6
    280a:	9f 0e       	add	r9, r31
    280c:	0a 15       	cp	r16, r10
    280e:	1b 05       	cpc	r17, r11
    2810:	91 f7       	brne	.-28     	; 0x27f6 <_Z15anzeige_kompassd+0x166>
	//winkel als Zahl ausgeben
	buffersize=sprintf(buffer,"angle=%.0f",winkel);
    2812:	ff 92       	push	r15
    2814:	ef 92       	push	r14
    2816:	df 92       	push	r13
    2818:	cf 92       	push	r12
    281a:	84 e8       	ldi	r24, 0x84	; 132
    281c:	92 e0       	ldi	r25, 0x02	; 2
    281e:	9f 93       	push	r25
    2820:	8f 93       	push	r24
    2822:	ce 01       	movw	r24, r28
    2824:	01 96       	adiw	r24, 0x01	; 1
    2826:	9f 93       	push	r25
    2828:	8f 93       	push	r24
    282a:	0e 94 5a 30 	call	0x60b4	; 0x60b4 <sprintf>
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],65+i*charsize,6*charhighte);}
    282e:	0f b6       	in	r0, 0x3f	; 63
    2830:	f8 94       	cli
    2832:	de bf       	out	0x3e, r29	; 62
    2834:	0f be       	out	0x3f, r0	; 63
    2836:	cd bf       	out	0x3d, r28	; 61
    2838:	88 23       	and	r24, r24
    283a:	f1 f0       	breq	.+60     	; 0x2878 <_Z15anzeige_kompassd+0x1e8>
    283c:	8e 01       	movw	r16, r28
    283e:	0f 5f       	subi	r16, 0xFF	; 255
    2840:	1f 4f       	sbci	r17, 0xFF	; 255
    2842:	81 50       	subi	r24, 0x01	; 1
    2844:	68 94       	set
    2846:	aa 24       	eor	r10, r10
    2848:	a1 f8       	bld	r10, 1
    284a:	b1 2c       	mov	r11, r1
    284c:	ac 0e       	add	r10, r28
    284e:	bd 1e       	adc	r11, r29
    2850:	a8 0e       	add	r10, r24
    2852:	b1 1c       	adc	r11, r1
    2854:	0f 2e       	mov	r0, r31
    2856:	f1 e4       	ldi	r31, 0x41	; 65
    2858:	9f 2e       	mov	r9, r31
    285a:	f0 2d       	mov	r31, r0
    285c:	f8 01       	movw	r30, r16
    285e:	61 91       	ld	r22, Z+
    2860:	8f 01       	movw	r16, r30
    2862:	20 e3       	ldi	r18, 0x30	; 48
    2864:	49 2d       	mov	r20, r9
    2866:	82 e4       	ldi	r24, 0x42	; 66
    2868:	93 e0       	ldi	r25, 0x03	; 3
    286a:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <_ZN7Display9draw_ASCIEhhh>
    286e:	f6 e0       	ldi	r31, 0x06	; 6
    2870:	9f 0e       	add	r9, r31
    2872:	0a 15       	cp	r16, r10
    2874:	1b 05       	cpc	r17, r11
    2876:	91 f7       	brne	.-28     	; 0x285c <_Z15anzeige_kompassd+0x1cc>
	//dreieck als Zeiger
	anzeige_nadel(31,31,winkel);
    2878:	2c 2d       	mov	r18, r12
    287a:	3d 2d       	mov	r19, r13
    287c:	4e 2d       	mov	r20, r14
    287e:	5f 2d       	mov	r21, r15
    2880:	6f e1       	ldi	r22, 0x1F	; 31
    2882:	8f e1       	ldi	r24, 0x1F	; 31
    2884:	0e 94 01 0d 	call	0x1a02	; 0x1a02 <_Z13anzeige_nadelhhf>
	//Richtung ausgeben
	anzeige_richtung(winkel);	
    2888:	6c 2d       	mov	r22, r12
    288a:	7d 2d       	mov	r23, r13
    288c:	8e 2d       	mov	r24, r14
    288e:	9f 2d       	mov	r25, r15
    2890:	0e 94 43 0c 	call	0x1886	; 0x1886 <_Z16anzeige_richtungf>
}
    2894:	64 96       	adiw	r28, 0x14	; 20
    2896:	0f b6       	in	r0, 0x3f	; 63
    2898:	f8 94       	cli
    289a:	de bf       	out	0x3e, r29	; 62
    289c:	0f be       	out	0x3f, r0	; 63
    289e:	cd bf       	out	0x3d, r28	; 61
    28a0:	df 91       	pop	r29
    28a2:	cf 91       	pop	r28
    28a4:	1f 91       	pop	r17
    28a6:	0f 91       	pop	r16
    28a8:	ff 90       	pop	r15
    28aa:	ef 90       	pop	r14
    28ac:	df 90       	pop	r13
    28ae:	cf 90       	pop	r12
    28b0:	bf 90       	pop	r11
    28b2:	af 90       	pop	r10
    28b4:	9f 90       	pop	r9
    28b6:	08 95       	ret

000028b8 <_Z10timerseitev>:

void timerseite(){
    28b8:	af 92       	push	r10
    28ba:	bf 92       	push	r11
    28bc:	df 92       	push	r13
    28be:	ef 92       	push	r14
    28c0:	0f 93       	push	r16
    28c2:	1f 93       	push	r17
    28c4:	cf 93       	push	r28
    28c6:	df 93       	push	r29
    28c8:	cd b7       	in	r28, 0x3d	; 61
    28ca:	de b7       	in	r29, 0x3e	; 62
    28cc:	64 97       	sbiw	r28, 0x14	; 20
    28ce:	0f b6       	in	r0, 0x3f	; 63
    28d0:	f8 94       	cli
    28d2:	de bf       	out	0x3e, r29	; 62
    28d4:	0f be       	out	0x3f, r0	; 63
    28d6:	cd bf       	out	0x3d, r28	; 61
	char buffer[20];
	uint8_t buffersize=0;
	oled.clearFrame();
    28d8:	82 e4       	ldi	r24, 0x42	; 66
    28da:	93 e0       	ldi	r25, 0x03	; 3
    28dc:	0e 94 ed 03 	call	0x7da	; 0x7da <_ZN7Display10clearFrameEv>
	buffersize=sprintf(buffer,"Timer: ");
    28e0:	88 e0       	ldi	r24, 0x08	; 8
    28e2:	ef e8       	ldi	r30, 0x8F	; 143
    28e4:	f2 e0       	ldi	r31, 0x02	; 2
    28e6:	8e 01       	movw	r16, r28
    28e8:	0f 5f       	subi	r16, 0xFF	; 255
    28ea:	1f 4f       	sbci	r17, 0xFF	; 255
    28ec:	d8 01       	movw	r26, r16
    28ee:	01 90       	ld	r0, Z+
    28f0:	0d 92       	st	X+, r0
    28f2:	8a 95       	dec	r24
    28f4:	e1 f7       	brne	.-8      	; 0x28ee <_Z10timerseitev+0x36>
    28f6:	d0 2e       	mov	r13, r16
    28f8:	e1 2e       	mov	r14, r17
    28fa:	58 01       	movw	r10, r16
    28fc:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,0*charhighte);}
    28fe:	f5 01       	movw	r30, r10
    2900:	61 91       	ld	r22, Z+
    2902:	5f 01       	movw	r10, r30
    2904:	20 e0       	ldi	r18, 0x00	; 0
    2906:	41 2f       	mov	r20, r17
    2908:	82 e4       	ldi	r24, 0x42	; 66
    290a:	93 e0       	ldi	r25, 0x03	; 3
    290c:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <_ZN7Display9draw_ASCIEhhh>
    2910:	1a 5f       	subi	r17, 0xFA	; 250
    2912:	1a 32       	cpi	r17, 0x2A	; 42
    2914:	a1 f7       	brne	.-24     	; 0x28fe <_Z10timerseitev+0x46>
	if (pos!=0)
    2916:	60 91 28 03 	lds	r22, 0x0328
    291a:	66 23       	and	r22, r22
    291c:	39 f0       	breq	.+14     	; 0x292c <_Z10timerseitev+0x74>
	{
		oled.draw_ASCI(pos+'0',buffersize*charsize,0*charhighte);
    291e:	60 5d       	subi	r22, 0xD0	; 208
    2920:	20 e0       	ldi	r18, 0x00	; 0
    2922:	4a e2       	ldi	r20, 0x2A	; 42
    2924:	82 e4       	ldi	r24, 0x42	; 66
    2926:	93 e0       	ldi	r25, 0x03	; 3
    2928:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <_ZN7Display9draw_ASCIEhhh>
	}
		
	buffer[0]=zaehler.Stunden/10;
    292c:	90 91 6e 07 	lds	r25, 0x076E
    2930:	8d ec       	ldi	r24, 0xCD	; 205
    2932:	98 9f       	mul	r25, r24
    2934:	21 2d       	mov	r18, r1
    2936:	11 24       	eor	r1, r1
    2938:	26 95       	lsr	r18
    293a:	26 95       	lsr	r18
    293c:	26 95       	lsr	r18
    293e:	29 83       	std	Y+1, r18	; 0x01
	buffer[1]=zaehler.Stunden%10;
    2940:	22 0f       	add	r18, r18
    2942:	32 2f       	mov	r19, r18
    2944:	33 0f       	add	r19, r19
    2946:	33 0f       	add	r19, r19
    2948:	23 0f       	add	r18, r19
    294a:	92 1b       	sub	r25, r18
    294c:	9a 83       	std	Y+2, r25	; 0x02
	buffer[2]=':';
    294e:	9a e3       	ldi	r25, 0x3A	; 58
    2950:	9b 83       	std	Y+3, r25	; 0x03
	buffer[3]=zaehler.Minuten/10;
    2952:	20 91 6f 07 	lds	r18, 0x076F
    2956:	28 9f       	mul	r18, r24
    2958:	31 2d       	mov	r19, r1
    295a:	11 24       	eor	r1, r1
    295c:	36 95       	lsr	r19
    295e:	36 95       	lsr	r19
    2960:	36 95       	lsr	r19
    2962:	3c 83       	std	Y+4, r19	; 0x04
	buffer[4]=zaehler.Minuten%10;
    2964:	33 0f       	add	r19, r19
    2966:	43 2f       	mov	r20, r19
    2968:	44 0f       	add	r20, r20
    296a:	44 0f       	add	r20, r20
    296c:	34 0f       	add	r19, r20
    296e:	23 1b       	sub	r18, r19
    2970:	2d 83       	std	Y+5, r18	; 0x05
	buffer[5]=':';
    2972:	9e 83       	std	Y+6, r25	; 0x06
	buffer[6]=zaehler.Sekunden/10;
    2974:	90 91 70 07 	lds	r25, 0x0770
    2978:	98 9f       	mul	r25, r24
    297a:	81 2d       	mov	r24, r1
    297c:	11 24       	eor	r1, r1
    297e:	86 95       	lsr	r24
    2980:	86 95       	lsr	r24
    2982:	86 95       	lsr	r24
    2984:	8f 83       	std	Y+7, r24	; 0x07
	buffer[7]=zaehler.Sekunden%10;
    2986:	88 0f       	add	r24, r24
    2988:	28 2f       	mov	r18, r24
    298a:	22 0f       	add	r18, r18
    298c:	22 0f       	add	r18, r18
    298e:	82 0f       	add	r24, r18
    2990:	98 1b       	sub	r25, r24
    2992:	98 87       	std	Y+8, r25	; 0x08
    2994:	ad 2c       	mov	r10, r13
    2996:	be 2c       	mov	r11, r14
    2998:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<bitsderrtc;i++){
		if (buffer[i]==':')
    299a:	f5 01       	movw	r30, r10
    299c:	61 91       	ld	r22, Z+
    299e:	5f 01       	movw	r10, r30
    29a0:	6a 33       	cpi	r22, 0x3A	; 58
    29a2:	39 f4       	brne	.+14     	; 0x29b2 <_Z10timerseitev+0xfa>
		{
			oled.draw_ASCI(buffer[i],i*numbersmalsize,2.5*charhighte);
    29a4:	24 e1       	ldi	r18, 0x14	; 20
    29a6:	41 2f       	mov	r20, r17
    29a8:	82 e4       	ldi	r24, 0x42	; 66
    29aa:	93 e0       	ldi	r25, 0x03	; 3
    29ac:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <_ZN7Display9draw_ASCIEhhh>
    29b0:	06 c0       	rjmp	.+12     	; 0x29be <_Z10timerseitev+0x106>
		}
		else{
			oled.draw_number16x16(buffer[i],i*numbersmalsize,2*charhighte);
    29b2:	20 e1       	ldi	r18, 0x10	; 16
    29b4:	41 2f       	mov	r20, r17
    29b6:	82 e4       	ldi	r24, 0x42	; 66
    29b8:	93 e0       	ldi	r25, 0x03	; 3
    29ba:	0e 94 41 07 	call	0xe82	; 0xe82 <_ZN7Display16draw_number16x16Ehhh>
    29be:	10 5f       	subi	r17, 0xF0	; 240
	buffer[3]=zaehler.Minuten/10;
	buffer[4]=zaehler.Minuten%10;
	buffer[5]=':';
	buffer[6]=zaehler.Sekunden/10;
	buffer[7]=zaehler.Sekunden%10;
	for(uint8_t i=0;i<bitsderrtc;i++){
    29c0:	10 38       	cpi	r17, 0x80	; 128
    29c2:	59 f7       	brne	.-42     	; 0x299a <_Z10timerseitev+0xe2>
		}
		else{
			oled.draw_number16x16(buffer[i],i*numbersmalsize,2*charhighte);
		}
	}
}
    29c4:	64 96       	adiw	r28, 0x14	; 20
    29c6:	0f b6       	in	r0, 0x3f	; 63
    29c8:	f8 94       	cli
    29ca:	de bf       	out	0x3e, r29	; 62
    29cc:	0f be       	out	0x3f, r0	; 63
    29ce:	cd bf       	out	0x3d, r28	; 61
    29d0:	df 91       	pop	r29
    29d2:	cf 91       	pop	r28
    29d4:	1f 91       	pop	r17
    29d6:	0f 91       	pop	r16
    29d8:	ef 90       	pop	r14
    29da:	df 90       	pop	r13
    29dc:	bf 90       	pop	r11
    29de:	af 90       	pop	r10
    29e0:	08 95       	ret

000029e2 <_Z13Stoppuhrseitev>:

void Stoppuhrseite(){
    29e2:	af 92       	push	r10
    29e4:	bf 92       	push	r11
    29e6:	df 92       	push	r13
    29e8:	ef 92       	push	r14
    29ea:	0f 93       	push	r16
    29ec:	1f 93       	push	r17
    29ee:	cf 93       	push	r28
    29f0:	df 93       	push	r29
    29f2:	cd b7       	in	r28, 0x3d	; 61
    29f4:	de b7       	in	r29, 0x3e	; 62
    29f6:	64 97       	sbiw	r28, 0x14	; 20
    29f8:	0f b6       	in	r0, 0x3f	; 63
    29fa:	f8 94       	cli
    29fc:	de bf       	out	0x3e, r29	; 62
    29fe:	0f be       	out	0x3f, r0	; 63
    2a00:	cd bf       	out	0x3d, r28	; 61
	char buffer[20];
	uint8_t buffersize=0;
	oled.clearFrame();
    2a02:	82 e4       	ldi	r24, 0x42	; 66
    2a04:	93 e0       	ldi	r25, 0x03	; 3
    2a06:	0e 94 ed 03 	call	0x7da	; 0x7da <_ZN7Display10clearFrameEv>
	buffersize=sprintf(buffer,"Stoppuhr: ");
    2a0a:	8b e0       	ldi	r24, 0x0B	; 11
    2a0c:	e7 e9       	ldi	r30, 0x97	; 151
    2a0e:	f2 e0       	ldi	r31, 0x02	; 2
    2a10:	8e 01       	movw	r16, r28
    2a12:	0f 5f       	subi	r16, 0xFF	; 255
    2a14:	1f 4f       	sbci	r17, 0xFF	; 255
    2a16:	d8 01       	movw	r26, r16
    2a18:	01 90       	ld	r0, Z+
    2a1a:	0d 92       	st	X+, r0
    2a1c:	8a 95       	dec	r24
    2a1e:	e1 f7       	brne	.-8      	; 0x2a18 <_Z13Stoppuhrseitev+0x36>
    2a20:	d0 2e       	mov	r13, r16
    2a22:	e1 2e       	mov	r14, r17
    2a24:	58 01       	movw	r10, r16
    2a26:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,0*charhighte);}
    2a28:	f5 01       	movw	r30, r10
    2a2a:	61 91       	ld	r22, Z+
    2a2c:	5f 01       	movw	r10, r30
    2a2e:	20 e0       	ldi	r18, 0x00	; 0
    2a30:	41 2f       	mov	r20, r17
    2a32:	82 e4       	ldi	r24, 0x42	; 66
    2a34:	93 e0       	ldi	r25, 0x03	; 3
    2a36:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <_ZN7Display9draw_ASCIEhhh>
    2a3a:	1a 5f       	subi	r17, 0xFA	; 250
    2a3c:	1c 33       	cpi	r17, 0x3C	; 60
    2a3e:	a1 f7       	brne	.-24     	; 0x2a28 <_Z13Stoppuhrseitev+0x46>
	
	buffer[0]=stoppuhr.Stunden/10;
    2a40:	90 91 53 07 	lds	r25, 0x0753
    2a44:	8d ec       	ldi	r24, 0xCD	; 205
    2a46:	98 9f       	mul	r25, r24
    2a48:	21 2d       	mov	r18, r1
    2a4a:	11 24       	eor	r1, r1
    2a4c:	26 95       	lsr	r18
    2a4e:	26 95       	lsr	r18
    2a50:	26 95       	lsr	r18
    2a52:	29 83       	std	Y+1, r18	; 0x01
	buffer[1]=stoppuhr.Stunden%10;
    2a54:	22 0f       	add	r18, r18
    2a56:	32 2f       	mov	r19, r18
    2a58:	33 0f       	add	r19, r19
    2a5a:	33 0f       	add	r19, r19
    2a5c:	23 0f       	add	r18, r19
    2a5e:	92 1b       	sub	r25, r18
    2a60:	9a 83       	std	Y+2, r25	; 0x02
	buffer[2]=':';
    2a62:	9a e3       	ldi	r25, 0x3A	; 58
    2a64:	9b 83       	std	Y+3, r25	; 0x03
	buffer[3]=stoppuhr.Minuten/10;
    2a66:	20 91 54 07 	lds	r18, 0x0754
    2a6a:	28 9f       	mul	r18, r24
    2a6c:	31 2d       	mov	r19, r1
    2a6e:	11 24       	eor	r1, r1
    2a70:	36 95       	lsr	r19
    2a72:	36 95       	lsr	r19
    2a74:	36 95       	lsr	r19
    2a76:	3c 83       	std	Y+4, r19	; 0x04
	buffer[4]=stoppuhr.Minuten%10;
    2a78:	33 0f       	add	r19, r19
    2a7a:	43 2f       	mov	r20, r19
    2a7c:	44 0f       	add	r20, r20
    2a7e:	44 0f       	add	r20, r20
    2a80:	34 0f       	add	r19, r20
    2a82:	23 1b       	sub	r18, r19
    2a84:	2d 83       	std	Y+5, r18	; 0x05
	buffer[5]=':';
    2a86:	9e 83       	std	Y+6, r25	; 0x06
	buffer[6]=stoppuhr.Sekunden/10;
    2a88:	90 91 55 07 	lds	r25, 0x0755
    2a8c:	98 9f       	mul	r25, r24
    2a8e:	81 2d       	mov	r24, r1
    2a90:	11 24       	eor	r1, r1
    2a92:	86 95       	lsr	r24
    2a94:	86 95       	lsr	r24
    2a96:	86 95       	lsr	r24
    2a98:	8f 83       	std	Y+7, r24	; 0x07
	buffer[7]=stoppuhr.Sekunden%10;
    2a9a:	88 0f       	add	r24, r24
    2a9c:	28 2f       	mov	r18, r24
    2a9e:	22 0f       	add	r18, r18
    2aa0:	22 0f       	add	r18, r18
    2aa2:	82 0f       	add	r24, r18
    2aa4:	98 1b       	sub	r25, r24
    2aa6:	98 87       	std	Y+8, r25	; 0x08
    2aa8:	ad 2c       	mov	r10, r13
    2aaa:	be 2c       	mov	r11, r14
    2aac:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<bitsderrtc;i++){
		if (buffer[i]==':')
    2aae:	f5 01       	movw	r30, r10
    2ab0:	61 91       	ld	r22, Z+
    2ab2:	5f 01       	movw	r10, r30
    2ab4:	6a 33       	cpi	r22, 0x3A	; 58
    2ab6:	39 f4       	brne	.+14     	; 0x2ac6 <_Z13Stoppuhrseitev+0xe4>
		{
			oled.draw_ASCI(buffer[i],i*numbersmalsize,2.5*charhighte);
    2ab8:	24 e1       	ldi	r18, 0x14	; 20
    2aba:	41 2f       	mov	r20, r17
    2abc:	82 e4       	ldi	r24, 0x42	; 66
    2abe:	93 e0       	ldi	r25, 0x03	; 3
    2ac0:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <_ZN7Display9draw_ASCIEhhh>
    2ac4:	06 c0       	rjmp	.+12     	; 0x2ad2 <_Z13Stoppuhrseitev+0xf0>
		}
		else{
			oled.draw_number16x16(buffer[i],i*numbersmalsize,2*charhighte);
    2ac6:	20 e1       	ldi	r18, 0x10	; 16
    2ac8:	41 2f       	mov	r20, r17
    2aca:	82 e4       	ldi	r24, 0x42	; 66
    2acc:	93 e0       	ldi	r25, 0x03	; 3
    2ace:	0e 94 41 07 	call	0xe82	; 0xe82 <_ZN7Display16draw_number16x16Ehhh>
    2ad2:	10 5f       	subi	r17, 0xF0	; 240
	buffer[3]=stoppuhr.Minuten/10;
	buffer[4]=stoppuhr.Minuten%10;
	buffer[5]=':';
	buffer[6]=stoppuhr.Sekunden/10;
	buffer[7]=stoppuhr.Sekunden%10;
	for(uint8_t i=0;i<bitsderrtc;i++){
    2ad4:	10 38       	cpi	r17, 0x80	; 128
    2ad6:	59 f7       	brne	.-42     	; 0x2aae <_Z13Stoppuhrseitev+0xcc>
		}
		else{
			oled.draw_number16x16(buffer[i],i*numbersmalsize,2*charhighte);
		}
	}
}
    2ad8:	64 96       	adiw	r28, 0x14	; 20
    2ada:	0f b6       	in	r0, 0x3f	; 63
    2adc:	f8 94       	cli
    2ade:	de bf       	out	0x3e, r29	; 62
    2ae0:	0f be       	out	0x3f, r0	; 63
    2ae2:	cd bf       	out	0x3d, r28	; 61
    2ae4:	df 91       	pop	r29
    2ae6:	cf 91       	pop	r28
    2ae8:	1f 91       	pop	r17
    2aea:	0f 91       	pop	r16
    2aec:	ef 90       	pop	r14
    2aee:	df 90       	pop	r13
    2af0:	bf 90       	pop	r11
    2af2:	af 90       	pop	r10
    2af4:	08 95       	ret

00002af6 <_Z14Pressuresensorv>:

void Pressuresensor(){
    2af6:	bf 92       	push	r11
    2af8:	cf 92       	push	r12
    2afa:	df 92       	push	r13
    2afc:	ef 92       	push	r14
    2afe:	ff 92       	push	r15
    2b00:	0f 93       	push	r16
    2b02:	1f 93       	push	r17
    2b04:	cf 93       	push	r28
    2b06:	df 93       	push	r29
    2b08:	cd b7       	in	r28, 0x3d	; 61
    2b0a:	de b7       	in	r29, 0x3e	; 62
    2b0c:	64 97       	sbiw	r28, 0x14	; 20
    2b0e:	0f b6       	in	r0, 0x3f	; 63
    2b10:	f8 94       	cli
    2b12:	de bf       	out	0x3e, r29	; 62
    2b14:	0f be       	out	0x3f, r0	; 63
    2b16:	cd bf       	out	0x3d, r28	; 61
	Baro.READ_Pressure_once();
    2b18:	8f e2       	ldi	r24, 0x2F	; 47
    2b1a:	93 e0       	ldi	r25, 0x03	; 3
    2b1c:	0e 94 69 25 	call	0x4ad2	; 0x4ad2 <_ZN8Pressure18READ_Pressure_onceEv>
	Baro.READ_Temperature();
    2b20:	8f e2       	ldi	r24, 0x2F	; 47
    2b22:	93 e0       	ldi	r25, 0x03	; 3
    2b24:	0e 94 f1 25 	call	0x4be2	; 0x4be2 <_ZN8Pressure16READ_TemperatureEv>
	char buffer[20];
	uint8_t buffersize=0;
	oled.clearFrame();
    2b28:	82 e4       	ldi	r24, 0x42	; 66
    2b2a:	93 e0       	ldi	r25, 0x03	; 3
    2b2c:	0e 94 ed 03 	call	0x7da	; 0x7da <_ZN7Display10clearFrameEv>
	header(0);
    2b30:	80 e0       	ldi	r24, 0x00	; 0
    2b32:	0e 94 34 0b 	call	0x1668	; 0x1668 <_Z6headerh>
	bottom(0);
    2b36:	80 e0       	ldi	r24, 0x00	; 0
    2b38:	0e 94 1c 0c 	call	0x1838	; 0x1838 <_Z6bottomh>
	buffersize=sprintf(buffer,"LPS25H Daten:");
    2b3c:	8e e0       	ldi	r24, 0x0E	; 14
    2b3e:	e2 ea       	ldi	r30, 0xA2	; 162
    2b40:	f2 e0       	ldi	r31, 0x02	; 2
    2b42:	8e 01       	movw	r16, r28
    2b44:	0f 5f       	subi	r16, 0xFF	; 255
    2b46:	1f 4f       	sbci	r17, 0xFF	; 255
    2b48:	d8 01       	movw	r26, r16
    2b4a:	01 90       	ld	r0, Z+
    2b4c:	0d 92       	st	X+, r0
    2b4e:	8a 95       	dec	r24
    2b50:	e1 f7       	brne	.-8      	; 0x2b4a <_Z14Pressuresensorv+0x54>
    2b52:	c0 2e       	mov	r12, r16
    2b54:	d1 2e       	mov	r13, r17
    2b56:	78 01       	movw	r14, r16
    2b58:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,2*charhighte);}
    2b5a:	f7 01       	movw	r30, r14
    2b5c:	61 91       	ld	r22, Z+
    2b5e:	7f 01       	movw	r14, r30
    2b60:	20 e1       	ldi	r18, 0x10	; 16
    2b62:	41 2f       	mov	r20, r17
    2b64:	82 e4       	ldi	r24, 0x42	; 66
    2b66:	93 e0       	ldi	r25, 0x03	; 3
    2b68:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <_ZN7Display9draw_ASCIEhhh>
    2b6c:	1a 5f       	subi	r17, 0xFA	; 250
    2b6e:	1e 34       	cpi	r17, 0x4E	; 78
    2b70:	a1 f7       	brne	.-24     	; 0x2b5a <_Z14Pressuresensorv+0x64>
	buffersize=sprintf(buffer,"%.1f HPa",Baro.Press);
    2b72:	ef e2       	ldi	r30, 0x2F	; 47
    2b74:	f3 e0       	ldi	r31, 0x03	; 3
    2b76:	83 81       	ldd	r24, Z+3	; 0x03
    2b78:	8f 93       	push	r24
    2b7a:	82 81       	ldd	r24, Z+2	; 0x02
    2b7c:	8f 93       	push	r24
    2b7e:	81 81       	ldd	r24, Z+1	; 0x01
    2b80:	8f 93       	push	r24
    2b82:	80 81       	ld	r24, Z
    2b84:	8f 93       	push	r24
    2b86:	80 eb       	ldi	r24, 0xB0	; 176
    2b88:	92 e0       	ldi	r25, 0x02	; 2
    2b8a:	9f 93       	push	r25
    2b8c:	8f 93       	push	r24
    2b8e:	ce 01       	movw	r24, r28
    2b90:	01 96       	adiw	r24, 0x01	; 1
    2b92:	9f 93       	push	r25
    2b94:	8f 93       	push	r24
    2b96:	0e 94 5a 30 	call	0x60b4	; 0x60b4 <sprintf>
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,3*charhighte);}
    2b9a:	0f b6       	in	r0, 0x3f	; 63
    2b9c:	f8 94       	cli
    2b9e:	de bf       	out	0x3e, r29	; 62
    2ba0:	0f be       	out	0x3f, r0	; 63
    2ba2:	cd bf       	out	0x3d, r28	; 61
    2ba4:	88 23       	and	r24, r24
    2ba6:	d1 f0       	breq	.+52     	; 0x2bdc <_Z14Pressuresensorv+0xe6>
    2ba8:	81 50       	subi	r24, 0x01	; 1
    2baa:	68 94       	set
    2bac:	ee 24       	eor	r14, r14
    2bae:	e1 f8       	bld	r14, 1
    2bb0:	f1 2c       	mov	r15, r1
    2bb2:	ec 0e       	add	r14, r28
    2bb4:	fd 1e       	adc	r15, r29
    2bb6:	e8 0e       	add	r14, r24
    2bb8:	f1 1c       	adc	r15, r1
    2bba:	0c 2d       	mov	r16, r12
    2bbc:	1d 2d       	mov	r17, r13
    2bbe:	b1 2c       	mov	r11, r1
    2bc0:	f8 01       	movw	r30, r16
    2bc2:	61 91       	ld	r22, Z+
    2bc4:	8f 01       	movw	r16, r30
    2bc6:	28 e1       	ldi	r18, 0x18	; 24
    2bc8:	4b 2d       	mov	r20, r11
    2bca:	82 e4       	ldi	r24, 0x42	; 66
    2bcc:	93 e0       	ldi	r25, 0x03	; 3
    2bce:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <_ZN7Display9draw_ASCIEhhh>
    2bd2:	f6 e0       	ldi	r31, 0x06	; 6
    2bd4:	bf 0e       	add	r11, r31
    2bd6:	0e 15       	cp	r16, r14
    2bd8:	1f 05       	cpc	r17, r15
    2bda:	91 f7       	brne	.-28     	; 0x2bc0 <_Z14Pressuresensorv+0xca>
	buffersize=sprintf(buffer,"Hoehe: %.1f m",(double)Baro.altitude(Baro.Press));
    2bdc:	40 91 2f 03 	lds	r20, 0x032F
    2be0:	50 91 30 03 	lds	r21, 0x0330
    2be4:	60 91 31 03 	lds	r22, 0x0331
    2be8:	70 91 32 03 	lds	r23, 0x0332
    2bec:	8f e2       	ldi	r24, 0x2F	; 47
    2bee:	93 e0       	ldi	r25, 0x03	; 3
    2bf0:	0e 94 6e 26 	call	0x4cdc	; 0x4cdc <_ZN8Pressure8altitudeEd>
    2bf4:	9f 93       	push	r25
    2bf6:	8f 93       	push	r24
    2bf8:	7f 93       	push	r23
    2bfa:	6f 93       	push	r22
    2bfc:	89 eb       	ldi	r24, 0xB9	; 185
    2bfe:	92 e0       	ldi	r25, 0x02	; 2
    2c00:	9f 93       	push	r25
    2c02:	8f 93       	push	r24
    2c04:	ce 01       	movw	r24, r28
    2c06:	01 96       	adiw	r24, 0x01	; 1
    2c08:	9f 93       	push	r25
    2c0a:	8f 93       	push	r24
    2c0c:	0e 94 5a 30 	call	0x60b4	; 0x60b4 <sprintf>
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,4*charhighte);}
    2c10:	0f b6       	in	r0, 0x3f	; 63
    2c12:	f8 94       	cli
    2c14:	de bf       	out	0x3e, r29	; 62
    2c16:	0f be       	out	0x3f, r0	; 63
    2c18:	cd bf       	out	0x3d, r28	; 61
    2c1a:	88 23       	and	r24, r24
    2c1c:	d1 f0       	breq	.+52     	; 0x2c52 <_Z14Pressuresensorv+0x15c>
    2c1e:	81 50       	subi	r24, 0x01	; 1
    2c20:	68 94       	set
    2c22:	ee 24       	eor	r14, r14
    2c24:	e1 f8       	bld	r14, 1
    2c26:	f1 2c       	mov	r15, r1
    2c28:	ec 0e       	add	r14, r28
    2c2a:	fd 1e       	adc	r15, r29
    2c2c:	e8 0e       	add	r14, r24
    2c2e:	f1 1c       	adc	r15, r1
    2c30:	0c 2d       	mov	r16, r12
    2c32:	1d 2d       	mov	r17, r13
    2c34:	b1 2c       	mov	r11, r1
    2c36:	f8 01       	movw	r30, r16
    2c38:	61 91       	ld	r22, Z+
    2c3a:	8f 01       	movw	r16, r30
    2c3c:	20 e2       	ldi	r18, 0x20	; 32
    2c3e:	4b 2d       	mov	r20, r11
    2c40:	82 e4       	ldi	r24, 0x42	; 66
    2c42:	93 e0       	ldi	r25, 0x03	; 3
    2c44:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <_ZN7Display9draw_ASCIEhhh>
    2c48:	f6 e0       	ldi	r31, 0x06	; 6
    2c4a:	bf 0e       	add	r11, r31
    2c4c:	0e 15       	cp	r16, r14
    2c4e:	1f 05       	cpc	r17, r15
    2c50:	91 f7       	brne	.-28     	; 0x2c36 <_Z14Pressuresensorv+0x140>
	buffersize=sprintf(buffer,"%.1f C",(double)Baro.Tempera);
    2c52:	e3 e3       	ldi	r30, 0x33	; 51
    2c54:	f3 e0       	ldi	r31, 0x03	; 3
    2c56:	83 81       	ldd	r24, Z+3	; 0x03
    2c58:	8f 93       	push	r24
    2c5a:	82 81       	ldd	r24, Z+2	; 0x02
    2c5c:	8f 93       	push	r24
    2c5e:	81 81       	ldd	r24, Z+1	; 0x01
    2c60:	8f 93       	push	r24
    2c62:	80 81       	ld	r24, Z
    2c64:	8f 93       	push	r24
    2c66:	89 e1       	ldi	r24, 0x19	; 25
    2c68:	92 e0       	ldi	r25, 0x02	; 2
    2c6a:	9f 93       	push	r25
    2c6c:	8f 93       	push	r24
    2c6e:	ce 01       	movw	r24, r28
    2c70:	01 96       	adiw	r24, 0x01	; 1
    2c72:	9f 93       	push	r25
    2c74:	8f 93       	push	r24
    2c76:	0e 94 5a 30 	call	0x60b4	; 0x60b4 <sprintf>
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,6*charhighte);}
    2c7a:	0f b6       	in	r0, 0x3f	; 63
    2c7c:	f8 94       	cli
    2c7e:	de bf       	out	0x3e, r29	; 62
    2c80:	0f be       	out	0x3f, r0	; 63
    2c82:	cd bf       	out	0x3d, r28	; 61
    2c84:	88 23       	and	r24, r24
    2c86:	d1 f0       	breq	.+52     	; 0x2cbc <_Z14Pressuresensorv+0x1c6>
    2c88:	81 50       	subi	r24, 0x01	; 1
    2c8a:	68 94       	set
    2c8c:	ee 24       	eor	r14, r14
    2c8e:	e1 f8       	bld	r14, 1
    2c90:	f1 2c       	mov	r15, r1
    2c92:	ec 0e       	add	r14, r28
    2c94:	fd 1e       	adc	r15, r29
    2c96:	e8 0e       	add	r14, r24
    2c98:	f1 1c       	adc	r15, r1
    2c9a:	0c 2d       	mov	r16, r12
    2c9c:	1d 2d       	mov	r17, r13
    2c9e:	d1 2c       	mov	r13, r1
    2ca0:	f8 01       	movw	r30, r16
    2ca2:	61 91       	ld	r22, Z+
    2ca4:	8f 01       	movw	r16, r30
    2ca6:	20 e3       	ldi	r18, 0x30	; 48
    2ca8:	4d 2d       	mov	r20, r13
    2caa:	82 e4       	ldi	r24, 0x42	; 66
    2cac:	93 e0       	ldi	r25, 0x03	; 3
    2cae:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <_ZN7Display9draw_ASCIEhhh>
    2cb2:	f6 e0       	ldi	r31, 0x06	; 6
    2cb4:	df 0e       	add	r13, r31
    2cb6:	0e 15       	cp	r16, r14
    2cb8:	1f 05       	cpc	r17, r15
    2cba:	91 f7       	brne	.-28     	; 0x2ca0 <_Z14Pressuresensorv+0x1aa>
	//buffersize=sprintf(buffer,"%i",Baro.Wertedruck[1]);
	//for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,4*charhighte);}
	//buffersize=sprintf(buffer,"%i",Baro.Wertedruck[2]);
	//for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,5*charhighte);}
}
    2cbc:	64 96       	adiw	r28, 0x14	; 20
    2cbe:	0f b6       	in	r0, 0x3f	; 63
    2cc0:	f8 94       	cli
    2cc2:	de bf       	out	0x3e, r29	; 62
    2cc4:	0f be       	out	0x3f, r0	; 63
    2cc6:	cd bf       	out	0x3d, r28	; 61
    2cc8:	df 91       	pop	r29
    2cca:	cf 91       	pop	r28
    2ccc:	1f 91       	pop	r17
    2cce:	0f 91       	pop	r16
    2cd0:	ff 90       	pop	r15
    2cd2:	ef 90       	pop	r14
    2cd4:	df 90       	pop	r13
    2cd6:	cf 90       	pop	r12
    2cd8:	bf 90       	pop	r11
    2cda:	08 95       	ret

00002cdc <_Z13uhreinstellenv>:

void uhreinstellen(){
    2cdc:	2f 92       	push	r2
    2cde:	3f 92       	push	r3
    2ce0:	4f 92       	push	r4
    2ce2:	5f 92       	push	r5
    2ce4:	6f 92       	push	r6
    2ce6:	7f 92       	push	r7
    2ce8:	8f 92       	push	r8
    2cea:	9f 92       	push	r9
    2cec:	af 92       	push	r10
    2cee:	bf 92       	push	r11
    2cf0:	cf 92       	push	r12
    2cf2:	df 92       	push	r13
    2cf4:	ef 92       	push	r14
    2cf6:	ff 92       	push	r15
    2cf8:	0f 93       	push	r16
    2cfa:	1f 93       	push	r17
    2cfc:	cf 93       	push	r28
    2cfe:	df 93       	push	r29
    2d00:	cd b7       	in	r28, 0x3d	; 61
    2d02:	de b7       	in	r29, 0x3e	; 62
    2d04:	66 97       	sbiw	r28, 0x16	; 22
    2d06:	0f b6       	in	r0, 0x3f	; 63
    2d08:	f8 94       	cli
    2d0a:	de bf       	out	0x3e, r29	; 62
    2d0c:	0f be       	out	0x3f, r0	; 63
    2d0e:	cd bf       	out	0x3d, r28	; 61
	rtc.RTCstop();
    2d10:	89 e7       	ldi	r24, 0x79	; 121
    2d12:	97 e0       	ldi	r25, 0x07	; 7
    2d14:	0e 94 ed 27 	call	0x4fda	; 0x4fda <_ZN3RTC7RTCstopEv>
	
	oled.clearFrame();
    2d18:	82 e4       	ldi	r24, 0x42	; 66
    2d1a:	93 e0       	ldi	r25, 0x03	; 3
    2d1c:	0e 94 ed 03 	call	0x7da	; 0x7da <_ZN7Display10clearFrameEv>
	char buffer[20];
	uint8_t buffersize;
	uint8_t pos=0;
    2d20:	91 2c       	mov	r9, r1
	while(pos<11){
		buffersize=sprintf(buffer,"Uhreinstellung");
    2d22:	0f 2e       	mov	r0, r31
    2d24:	ff e0       	ldi	r31, 0x0F	; 15
    2d26:	6f 2e       	mov	r6, r31
    2d28:	f0 2d       	mov	r31, r0
    2d2a:	ce 01       	movw	r24, r28
    2d2c:	01 96       	adiw	r24, 0x01	; 1
    2d2e:	7c 01       	movw	r14, r24
    2d30:	78 2e       	mov	r7, r24
    2d32:	8f 2c       	mov	r8, r15
    2d34:	b1 2c       	mov	r11, r1
		for(uint8_t i = 0; i<buffersize;i++){
			oled.draw_ASCI(buffer[i],charsize*i,0);
		}
		buffersize=sprintf(buffer,"--------------");
    2d36:	8d 8b       	std	Y+21, r24	; 0x15
    2d38:	fe 8a       	std	Y+22, r15	; 0x16
		for(uint8_t i = 0; i<buffersize;i++){
			oled.draw_ASCI(buffer[i],charsize*i,8);
		}
		buffer[0]=rtc.Stunden/10;
    2d3a:	0f 2e       	mov	r0, r31
    2d3c:	fd ec       	ldi	r31, 0xCD	; 205
    2d3e:	af 2e       	mov	r10, r31
    2d40:	f0 2d       	mov	r31, r0
		buffer[1]=rtc.Stunden%10;
		buffer[2]=':';
		buffer[3]=rtc.Minuten/10;
		buffer[4]=rtc.Minuten%10;
		buffer[5]=' ';
		buffer[6]=rtc.Tag/10;
    2d42:	0f 2e       	mov	r0, r31
    2d44:	fd e8       	ldi	r31, 0x8D	; 141
    2d46:	4f 2e       	mov	r4, r31
    2d48:	f7 e0       	ldi	r31, 0x07	; 7
    2d4a:	5f 2e       	mov	r5, r31
    2d4c:	f0 2d       	mov	r31, r0
		buffer[7]=rtc.Tag%10;
		buffer[8]='.';
		buffer[9]=rtc.Monat/10;
    2d4e:	0f 2e       	mov	r0, r31
    2d50:	ff e8       	ldi	r31, 0x8F	; 143
    2d52:	cf 2e       	mov	r12, r31
    2d54:	f7 e0       	ldi	r31, 0x07	; 7
    2d56:	df 2e       	mov	r13, r31
    2d58:	f0 2d       	mov	r31, r0
	oled.clearFrame();
	char buffer[20];
	uint8_t buffersize;
	uint8_t pos=0;
	while(pos<11){
		buffersize=sprintf(buffer,"Uhreinstellung");
    2d5a:	e7 ec       	ldi	r30, 0xC7	; 199
    2d5c:	f2 e0       	ldi	r31, 0x02	; 2
    2d5e:	a7 2d       	mov	r26, r7
    2d60:	b8 2d       	mov	r27, r8
    2d62:	86 2d       	mov	r24, r6
    2d64:	01 90       	ld	r0, Z+
    2d66:	0d 92       	st	X+, r0
    2d68:	8a 95       	dec	r24
    2d6a:	e1 f7       	brne	.-8      	; 0x2d64 <_Z13uhreinstellenv+0x88>
    2d6c:	27 2c       	mov	r2, r7
    2d6e:	38 2c       	mov	r3, r8
    2d70:	1b 2d       	mov	r17, r11
		for(uint8_t i = 0; i<buffersize;i++){
			oled.draw_ASCI(buffer[i],charsize*i,0);
    2d72:	f1 01       	movw	r30, r2
    2d74:	61 91       	ld	r22, Z+
    2d76:	1f 01       	movw	r2, r30
    2d78:	2b 2d       	mov	r18, r11
    2d7a:	41 2f       	mov	r20, r17
    2d7c:	82 e4       	ldi	r24, 0x42	; 66
    2d7e:	93 e0       	ldi	r25, 0x03	; 3
    2d80:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <_ZN7Display9draw_ASCIEhhh>
    2d84:	1a 5f       	subi	r17, 0xFA	; 250
	char buffer[20];
	uint8_t buffersize;
	uint8_t pos=0;
	while(pos<11){
		buffersize=sprintf(buffer,"Uhreinstellung");
		for(uint8_t i = 0; i<buffersize;i++){
    2d86:	14 35       	cpi	r17, 0x54	; 84
    2d88:	a1 f7       	brne	.-24     	; 0x2d72 <_Z13uhreinstellenv+0x96>
			oled.draw_ASCI(buffer[i],charsize*i,0);
		}
		buffersize=sprintf(buffer,"--------------");
    2d8a:	ef e0       	ldi	r30, 0x0F	; 15
    2d8c:	f1 e0       	ldi	r31, 0x01	; 1
    2d8e:	a7 2d       	mov	r26, r7
    2d90:	b8 2d       	mov	r27, r8
    2d92:	86 2d       	mov	r24, r6
    2d94:	01 90       	ld	r0, Z+
    2d96:	0d 92       	st	X+, r0
    2d98:	8a 95       	dec	r24
    2d9a:	e1 f7       	brne	.-8      	; 0x2d94 <_Z13uhreinstellenv+0xb8>
    2d9c:	2d 88       	ldd	r2, Y+21	; 0x15
    2d9e:	3e 88       	ldd	r3, Y+22	; 0x16
    2da0:	1b 2d       	mov	r17, r11
		for(uint8_t i = 0; i<buffersize;i++){
			oled.draw_ASCI(buffer[i],charsize*i,8);
    2da2:	f1 01       	movw	r30, r2
    2da4:	61 91       	ld	r22, Z+
    2da6:	1f 01       	movw	r2, r30
    2da8:	28 e0       	ldi	r18, 0x08	; 8
    2daa:	41 2f       	mov	r20, r17
    2dac:	82 e4       	ldi	r24, 0x42	; 66
    2dae:	93 e0       	ldi	r25, 0x03	; 3
    2db0:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <_ZN7Display9draw_ASCIEhhh>
    2db4:	1a 5f       	subi	r17, 0xFA	; 250
		buffersize=sprintf(buffer,"Uhreinstellung");
		for(uint8_t i = 0; i<buffersize;i++){
			oled.draw_ASCI(buffer[i],charsize*i,0);
		}
		buffersize=sprintf(buffer,"--------------");
		for(uint8_t i = 0; i<buffersize;i++){
    2db6:	14 35       	cpi	r17, 0x54	; 84
    2db8:	a1 f7       	brne	.-24     	; 0x2da2 <_Z13uhreinstellenv+0xc6>
			oled.draw_ASCI(buffer[i],charsize*i,8);
		}
		buffer[0]=rtc.Stunden/10;
    2dba:	e9 e8       	ldi	r30, 0x89	; 137
    2dbc:	f7 e0       	ldi	r31, 0x07	; 7
    2dbe:	80 81       	ld	r24, Z
    2dc0:	8a 9d       	mul	r24, r10
    2dc2:	91 2d       	mov	r25, r1
    2dc4:	11 24       	eor	r1, r1
    2dc6:	96 95       	lsr	r25
    2dc8:	96 95       	lsr	r25
    2dca:	96 95       	lsr	r25
    2dcc:	99 83       	std	Y+1, r25	; 0x01
		buffer[1]=rtc.Stunden%10;
    2dce:	99 0f       	add	r25, r25
    2dd0:	29 2f       	mov	r18, r25
    2dd2:	22 0f       	add	r18, r18
    2dd4:	22 0f       	add	r18, r18
    2dd6:	92 0f       	add	r25, r18
    2dd8:	89 1b       	sub	r24, r25
    2dda:	8a 83       	std	Y+2, r24	; 0x02
		buffer[2]=':';
    2ddc:	fa e3       	ldi	r31, 0x3A	; 58
    2dde:	fb 83       	std	Y+3, r31	; 0x03
		buffer[3]=rtc.Minuten/10;
    2de0:	ea e8       	ldi	r30, 0x8A	; 138
    2de2:	f7 e0       	ldi	r31, 0x07	; 7
    2de4:	80 81       	ld	r24, Z
    2de6:	8a 9d       	mul	r24, r10
    2de8:	91 2d       	mov	r25, r1
    2dea:	11 24       	eor	r1, r1
    2dec:	96 95       	lsr	r25
    2dee:	96 95       	lsr	r25
    2df0:	96 95       	lsr	r25
    2df2:	9c 83       	std	Y+4, r25	; 0x04
		buffer[4]=rtc.Minuten%10;
    2df4:	99 0f       	add	r25, r25
    2df6:	29 2f       	mov	r18, r25
    2df8:	22 0f       	add	r18, r18
    2dfa:	22 0f       	add	r18, r18
    2dfc:	92 0f       	add	r25, r18
    2dfe:	89 1b       	sub	r24, r25
    2e00:	8d 83       	std	Y+5, r24	; 0x05
		buffer[5]=' ';
    2e02:	80 e2       	ldi	r24, 0x20	; 32
    2e04:	8e 83       	std	Y+6, r24	; 0x06
		buffer[6]=rtc.Tag/10;
    2e06:	f2 01       	movw	r30, r4
    2e08:	80 81       	ld	r24, Z
    2e0a:	8a 9d       	mul	r24, r10
    2e0c:	91 2d       	mov	r25, r1
    2e0e:	11 24       	eor	r1, r1
    2e10:	96 95       	lsr	r25
    2e12:	96 95       	lsr	r25
    2e14:	96 95       	lsr	r25
    2e16:	9f 83       	std	Y+7, r25	; 0x07
		buffer[7]=rtc.Tag%10;
    2e18:	99 0f       	add	r25, r25
    2e1a:	29 2f       	mov	r18, r25
    2e1c:	22 0f       	add	r18, r18
    2e1e:	22 0f       	add	r18, r18
    2e20:	92 0f       	add	r25, r18
    2e22:	89 1b       	sub	r24, r25
    2e24:	88 87       	std	Y+8, r24	; 0x08
		buffer[8]='.';
    2e26:	8e e2       	ldi	r24, 0x2E	; 46
    2e28:	89 87       	std	Y+9, r24	; 0x09
		buffer[9]=rtc.Monat/10;
    2e2a:	f6 01       	movw	r30, r12
    2e2c:	90 81       	ld	r25, Z
    2e2e:	9a 9d       	mul	r25, r10
    2e30:	21 2d       	mov	r18, r1
    2e32:	11 24       	eor	r1, r1
    2e34:	26 95       	lsr	r18
    2e36:	26 95       	lsr	r18
    2e38:	26 95       	lsr	r18
    2e3a:	2a 87       	std	Y+10, r18	; 0x0a
		buffer[10]=rtc.Monat%10;
    2e3c:	22 0f       	add	r18, r18
    2e3e:	32 2f       	mov	r19, r18
    2e40:	33 0f       	add	r19, r19
    2e42:	33 0f       	add	r19, r19
    2e44:	23 0f       	add	r18, r19
    2e46:	92 1b       	sub	r25, r18
    2e48:	9b 87       	std	Y+11, r25	; 0x0b
		buffer[11]='.';
    2e4a:	8c 87       	std	Y+12, r24	; 0x0c
		buffer[12]=rtc.Jahr/10;
    2e4c:	e0 e9       	ldi	r30, 0x90	; 144
    2e4e:	f7 e0       	ldi	r31, 0x07	; 7
    2e50:	80 81       	ld	r24, Z
    2e52:	8a 9d       	mul	r24, r10
    2e54:	91 2d       	mov	r25, r1
    2e56:	11 24       	eor	r1, r1
    2e58:	96 95       	lsr	r25
    2e5a:	96 95       	lsr	r25
    2e5c:	96 95       	lsr	r25
    2e5e:	9d 87       	std	Y+13, r25	; 0x0d
		buffer[13]=rtc.Jahr%10;
    2e60:	99 0f       	add	r25, r25
    2e62:	29 2f       	mov	r18, r25
    2e64:	22 0f       	add	r18, r18
    2e66:	22 0f       	add	r18, r18
    2e68:	92 0f       	add	r25, r18
    2e6a:	89 1b       	sub	r24, r25
    2e6c:	8e 87       	std	Y+14, r24	; 0x0e
    2e6e:	3b 2c       	mov	r3, r11
    2e70:	01 e0       	ldi	r16, 0x01	; 1
    2e72:	1b 2d       	mov	r17, r11
    2e74:	04 c0       	rjmp	.+8      	; 0x2e7e <_Z13uhreinstellenv+0x1a2>
    2e76:	1f 5f       	subi	r17, 0xFF	; 255
    2e78:	0f 5f       	subi	r16, 0xFF	; 255
    2e7a:	f0 e1       	ldi	r31, 0x10	; 16
    2e7c:	3f 0e       	add	r3, r31
		buffersize=14;
		for(uint8_t i = 0; i<5;i++){
			if(i!=2){
    2e7e:	12 30       	cpi	r17, 0x02	; 2
    2e80:	69 f0       	breq	.+26     	; 0x2e9c <_Z13uhreinstellenv+0x1c0>
				oled.draw_number16x16(buffer[i],i*numbersmalsize,2*charhighte);
    2e82:	20 e1       	ldi	r18, 0x10	; 16
    2e84:	43 2d       	mov	r20, r3
    2e86:	f7 01       	movw	r30, r14
    2e88:	e1 0f       	add	r30, r17
    2e8a:	f1 1d       	adc	r31, r1
    2e8c:	60 81       	ld	r22, Z
    2e8e:	82 e4       	ldi	r24, 0x42	; 66
    2e90:	93 e0       	ldi	r25, 0x03	; 3
    2e92:	0e 94 41 07 	call	0xe82	; 0xe82 <_ZN7Display16draw_number16x16Ehhh>
		buffer[10]=rtc.Monat%10;
		buffer[11]='.';
		buffer[12]=rtc.Jahr/10;
		buffer[13]=rtc.Jahr%10;
		buffersize=14;
		for(uint8_t i = 0; i<5;i++){
    2e96:	05 30       	cpi	r16, 0x05	; 5
    2e98:	70 f3       	brcs	.-36     	; 0x2e76 <_Z13uhreinstellenv+0x19a>
    2e9a:	08 c0       	rjmp	.+16     	; 0x2eac <_Z13uhreinstellenv+0x1d0>
			if(i!=2){
				oled.draw_number16x16(buffer[i],i*numbersmalsize,2*charhighte);
			}
			else {
				oled.draw_ASCI(buffer[i],i*numbersmalsize+numbersmalsize/2,2*charhighte+charhighte/2);
    2e9c:	24 e1       	ldi	r18, 0x14	; 20
    2e9e:	48 e2       	ldi	r20, 0x28	; 40
    2ea0:	6b 81       	ldd	r22, Y+3	; 0x03
    2ea2:	82 e4       	ldi	r24, 0x42	; 66
    2ea4:	93 e0       	ldi	r25, 0x03	; 3
    2ea6:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <_ZN7Display9draw_ASCIEhhh>
    2eaa:	e5 cf       	rjmp	.-54     	; 0x2e76 <_Z13uhreinstellenv+0x19a>
    2eac:	8e 01       	movw	r16, r28
    2eae:	09 5f       	subi	r16, 0xF9	; 249
    2eb0:	1f 4f       	sbci	r17, 0xFF	; 255
		buffer[10]=rtc.Monat%10;
		buffer[11]='.';
		buffer[12]=rtc.Jahr/10;
		buffer[13]=rtc.Jahr%10;
		buffersize=14;
		for(uint8_t i = 0; i<5;i++){
    2eb2:	2b 2c       	mov	r2, r11
    2eb4:	0f 2e       	mov	r0, r31
    2eb6:	f6 e0       	ldi	r31, 0x06	; 6
    2eb8:	3f 2e       	mov	r3, r31
    2eba:	f0 2d       	mov	r31, r0
			else {
				oled.draw_ASCI(buffer[i],i*numbersmalsize+numbersmalsize/2,2*charhighte+charhighte/2);
			}
		}
		for(uint8_t i = 6; i<buffersize;i++){
			if(i!=8 && i!=11){
    2ebc:	88 e0       	ldi	r24, 0x08	; 8
    2ebe:	38 16       	cp	r3, r24
    2ec0:	61 f0       	breq	.+24     	; 0x2eda <_Z13uhreinstellenv+0x1fe>
    2ec2:	9b e0       	ldi	r25, 0x0B	; 11
    2ec4:	39 16       	cp	r3, r25
    2ec6:	49 f0       	breq	.+18     	; 0x2eda <_Z13uhreinstellenv+0x1fe>
				oled.draw_number16x16(buffer[i],i*numbersmalsize-6*numbersmalsize,4*charhighte);
    2ec8:	20 e2       	ldi	r18, 0x20	; 32
    2eca:	42 2d       	mov	r20, r2
    2ecc:	f8 01       	movw	r30, r16
    2ece:	60 81       	ld	r22, Z
    2ed0:	82 e4       	ldi	r24, 0x42	; 66
    2ed2:	93 e0       	ldi	r25, 0x03	; 3
    2ed4:	0e 94 41 07 	call	0xe82	; 0xe82 <_ZN7Display16draw_number16x16Ehhh>
    2ed8:	09 c0       	rjmp	.+18     	; 0x2eec <_Z13uhreinstellenv+0x210>
			}
			else {
				oled.draw_ASCI(buffer[i],i*numbersmalsize+numbersmalsize/2-6*numbersmalsize,5*charhighte);
    2eda:	28 e2       	ldi	r18, 0x28	; 40
    2edc:	48 e0       	ldi	r20, 0x08	; 8
    2ede:	42 0d       	add	r20, r2
    2ee0:	f8 01       	movw	r30, r16
    2ee2:	60 81       	ld	r22, Z
    2ee4:	82 e4       	ldi	r24, 0x42	; 66
    2ee6:	93 e0       	ldi	r25, 0x03	; 3
    2ee8:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <_ZN7Display9draw_ASCIEhhh>
			}
			else {
				oled.draw_ASCI(buffer[i],i*numbersmalsize+numbersmalsize/2,2*charhighte+charhighte/2);
			}
		}
		for(uint8_t i = 6; i<buffersize;i++){
    2eec:	33 94       	inc	r3
    2eee:	0f 5f       	subi	r16, 0xFF	; 255
    2ef0:	1f 4f       	sbci	r17, 0xFF	; 255
    2ef2:	f0 e1       	ldi	r31, 0x10	; 16
    2ef4:	2f 0e       	add	r2, r31
    2ef6:	8e e0       	ldi	r24, 0x0E	; 14
    2ef8:	38 12       	cpse	r3, r24
    2efa:	e0 cf       	rjmp	.-64     	; 0x2ebc <_Z13uhreinstellenv+0x1e0>
			else {
				oled.draw_ASCI(buffer[i],i*numbersmalsize+numbersmalsize/2-6*numbersmalsize,5*charhighte);
			}
		}

		oled.sendFrame();
    2efc:	82 e4       	ldi	r24, 0x42	; 66
    2efe:	93 e0       	ldi	r25, 0x03	; 3
    2f00:	0e 94 93 04 	call	0x926	; 0x926 <_ZN7Display9sendFrameEv>
		oled.clearFrame();
    2f04:	82 e4       	ldi	r24, 0x42	; 66
    2f06:	93 e0       	ldi	r25, 0x03	; 3
    2f08:	0e 94 ed 03 	call	0x7da	; 0x7da <_ZN7Display10clearFrameEv>
		switch (pos) {
    2f0c:	89 2d       	mov	r24, r9
    2f0e:	90 e0       	ldi	r25, 0x00	; 0
    2f10:	8a 30       	cpi	r24, 0x0A	; 10
    2f12:	91 05       	cpc	r25, r1
    2f14:	08 f0       	brcs	.+2      	; 0x2f18 <_Z13uhreinstellenv+0x23c>
    2f16:	47 c2       	rjmp	.+1166   	; 0x33a6 <_Z13uhreinstellenv+0x6ca>
    2f18:	fc 01       	movw	r30, r24
    2f1a:	ec 5c       	subi	r30, 0xCC	; 204
    2f1c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f1e:	0c 94 fd 2e 	jmp	0x5dfa	; 0x5dfa <__tablejump2__>
			case 0:
				rtc.Stunden=Tastatur.ZahlenausTastatur()*10;
    2f22:	81 e4       	ldi	r24, 0x41	; 65
    2f24:	93 e0       	ldi	r25, 0x03	; 3
    2f26:	0e 94 6a 22 	call	0x44d4	; 0x44d4 <_ZN9Interface17ZahlenausTastaturEv>
    2f2a:	88 0f       	add	r24, r24
    2f2c:	98 2f       	mov	r25, r24
    2f2e:	99 0f       	add	r25, r25
    2f30:	99 0f       	add	r25, r25
    2f32:	89 0f       	add	r24, r25
				if(rtc.Stunden>=24){
    2f34:	88 31       	cpi	r24, 0x18	; 24
    2f36:	08 f4       	brcc	.+2      	; 0x2f3a <_Z13uhreinstellenv+0x25e>
    2f38:	51 c2       	rjmp	.+1186   	; 0x33dc <_Z13uhreinstellenv+0x700>
					rtc.Stunden=0;
    2f3a:	e9 e8       	ldi	r30, 0x89	; 137
    2f3c:	f7 e0       	ldi	r31, 0x07	; 7
    2f3e:	10 82       	st	Z, r1
					pos=-1;
					buffersize=sprintf(buffer,"Stunden falsch");
    2f40:	e6 ed       	ldi	r30, 0xD6	; 214
    2f42:	f2 e0       	ldi	r31, 0x02	; 2
    2f44:	a7 2d       	mov	r26, r7
    2f46:	b8 2d       	mov	r27, r8
    2f48:	86 2d       	mov	r24, r6
    2f4a:	01 90       	ld	r0, Z+
    2f4c:	0d 92       	st	X+, r0
    2f4e:	8a 95       	dec	r24
    2f50:	e1 f7       	brne	.-8      	; 0x2f4a <_Z13uhreinstellenv+0x26e>
    2f52:	2d 88       	ldd	r2, Y+21	; 0x15
    2f54:	3e 88       	ldd	r3, Y+22	; 0x16
    2f56:	1b 2d       	mov	r17, r11
					for(uint8_t i = 0; i<buffersize;i++){
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
    2f58:	f1 01       	movw	r30, r2
    2f5a:	61 91       	ld	r22, Z+
    2f5c:	1f 01       	movw	r2, r30
    2f5e:	28 e3       	ldi	r18, 0x38	; 56
    2f60:	41 2f       	mov	r20, r17
    2f62:	82 e4       	ldi	r24, 0x42	; 66
    2f64:	93 e0       	ldi	r25, 0x03	; 3
    2f66:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <_ZN7Display9draw_ASCIEhhh>
    2f6a:	1a 5f       	subi	r17, 0xFA	; 250
				rtc.Stunden=Tastatur.ZahlenausTastatur()*10;
				if(rtc.Stunden>=24){
					rtc.Stunden=0;
					pos=-1;
					buffersize=sprintf(buffer,"Stunden falsch");
					for(uint8_t i = 0; i<buffersize;i++){
    2f6c:	14 35       	cpi	r17, 0x54	; 84
    2f6e:	a1 f7       	brne	.-24     	; 0x2f58 <_Z13uhreinstellenv+0x27c>
    2f70:	39 c2       	rjmp	.+1138   	; 0x33e4 <_Z13uhreinstellenv+0x708>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 1:
				rtc.Stunden+=Tastatur.ZahlenausTastatur();
    2f72:	81 e4       	ldi	r24, 0x41	; 65
    2f74:	93 e0       	ldi	r25, 0x03	; 3
    2f76:	0e 94 6a 22 	call	0x44d4	; 0x44d4 <_ZN9Interface17ZahlenausTastaturEv>
    2f7a:	e9 e8       	ldi	r30, 0x89	; 137
    2f7c:	f7 e0       	ldi	r31, 0x07	; 7
    2f7e:	20 81       	ld	r18, Z
    2f80:	90 e0       	ldi	r25, 0x00	; 0
    2f82:	82 0f       	add	r24, r18
    2f84:	91 1d       	adc	r25, r1
				if(rtc.Stunden>=24){
    2f86:	88 31       	cpi	r24, 0x18	; 24
    2f88:	10 f4       	brcc	.+4      	; 0x2f8e <_Z13uhreinstellenv+0x2b2>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 1:
				rtc.Stunden+=Tastatur.ZahlenausTastatur();
    2f8a:	80 83       	st	Z, r24
    2f8c:	5e c2       	rjmp	.+1212   	; 0x344a <_Z13uhreinstellenv+0x76e>
				if(rtc.Stunden>=24){
					rtc.Stunden=0;
    2f8e:	e9 e8       	ldi	r30, 0x89	; 137
    2f90:	f7 e0       	ldi	r31, 0x07	; 7
    2f92:	10 82       	st	Z, r1
					pos=-1;
					buffersize=sprintf(buffer,"Stunden falsch");
    2f94:	e6 ed       	ldi	r30, 0xD6	; 214
    2f96:	f2 e0       	ldi	r31, 0x02	; 2
    2f98:	a7 2d       	mov	r26, r7
    2f9a:	b8 2d       	mov	r27, r8
    2f9c:	86 2d       	mov	r24, r6
    2f9e:	01 90       	ld	r0, Z+
    2fa0:	0d 92       	st	X+, r0
    2fa2:	8a 95       	dec	r24
    2fa4:	e1 f7       	brne	.-8      	; 0x2f9e <_Z13uhreinstellenv+0x2c2>
    2fa6:	2d 88       	ldd	r2, Y+21	; 0x15
    2fa8:	3e 88       	ldd	r3, Y+22	; 0x16
    2faa:	1b 2d       	mov	r17, r11
					for(uint8_t i = 0; i<buffersize;i++){
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
    2fac:	f1 01       	movw	r30, r2
    2fae:	61 91       	ld	r22, Z+
    2fb0:	1f 01       	movw	r2, r30
    2fb2:	28 e3       	ldi	r18, 0x38	; 56
    2fb4:	41 2f       	mov	r20, r17
    2fb6:	82 e4       	ldi	r24, 0x42	; 66
    2fb8:	93 e0       	ldi	r25, 0x03	; 3
    2fba:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <_ZN7Display9draw_ASCIEhhh>
    2fbe:	1a 5f       	subi	r17, 0xFA	; 250
				rtc.Stunden+=Tastatur.ZahlenausTastatur();
				if(rtc.Stunden>=24){
					rtc.Stunden=0;
					pos=-1;
					buffersize=sprintf(buffer,"Stunden falsch");
					for(uint8_t i = 0; i<buffersize;i++){
    2fc0:	14 35       	cpi	r17, 0x54	; 84
    2fc2:	a1 f7       	brne	.-24     	; 0x2fac <_Z13uhreinstellenv+0x2d0>
    2fc4:	12 c2       	rjmp	.+1060   	; 0x33ea <_Z13uhreinstellenv+0x70e>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 2:
				rtc.Minuten=Tastatur.ZahlenausTastatur()*10;
    2fc6:	81 e4       	ldi	r24, 0x41	; 65
    2fc8:	93 e0       	ldi	r25, 0x03	; 3
    2fca:	0e 94 6a 22 	call	0x44d4	; 0x44d4 <_ZN9Interface17ZahlenausTastaturEv>
    2fce:	88 0f       	add	r24, r24
    2fd0:	98 2f       	mov	r25, r24
    2fd2:	99 0f       	add	r25, r25
    2fd4:	99 0f       	add	r25, r25
    2fd6:	89 0f       	add	r24, r25
				if(rtc.Minuten>=60){
    2fd8:	8c 33       	cpi	r24, 0x3C	; 60
    2fda:	20 f4       	brcc	.+8      	; 0x2fe4 <_Z13uhreinstellenv+0x308>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 2:
				rtc.Minuten=Tastatur.ZahlenausTastatur()*10;
    2fdc:	ea e8       	ldi	r30, 0x8A	; 138
    2fde:	f7 e0       	ldi	r31, 0x07	; 7
    2fe0:	80 83       	st	Z, r24
    2fe2:	33 c2       	rjmp	.+1126   	; 0x344a <_Z13uhreinstellenv+0x76e>
				if(rtc.Minuten>=60){
					rtc.Minuten=0;
    2fe4:	ea e8       	ldi	r30, 0x8A	; 138
    2fe6:	f7 e0       	ldi	r31, 0x07	; 7
    2fe8:	10 82       	st	Z, r1
					pos=1;
					buffersize=sprintf(buffer,"Minuten falsch");
    2fea:	e5 ee       	ldi	r30, 0xE5	; 229
    2fec:	f2 e0       	ldi	r31, 0x02	; 2
    2fee:	a7 2d       	mov	r26, r7
    2ff0:	b8 2d       	mov	r27, r8
    2ff2:	86 2d       	mov	r24, r6
    2ff4:	01 90       	ld	r0, Z+
    2ff6:	0d 92       	st	X+, r0
    2ff8:	8a 95       	dec	r24
    2ffa:	e1 f7       	brne	.-8      	; 0x2ff4 <_Z13uhreinstellenv+0x318>
    2ffc:	2d 88       	ldd	r2, Y+21	; 0x15
    2ffe:	3e 88       	ldd	r3, Y+22	; 0x16
    3000:	1b 2d       	mov	r17, r11
					for(uint8_t i = 0; i<buffersize;i++){
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
    3002:	f1 01       	movw	r30, r2
    3004:	61 91       	ld	r22, Z+
    3006:	1f 01       	movw	r2, r30
    3008:	28 e3       	ldi	r18, 0x38	; 56
    300a:	41 2f       	mov	r20, r17
    300c:	82 e4       	ldi	r24, 0x42	; 66
    300e:	93 e0       	ldi	r25, 0x03	; 3
    3010:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <_ZN7Display9draw_ASCIEhhh>
    3014:	1a 5f       	subi	r17, 0xFA	; 250
				rtc.Minuten=Tastatur.ZahlenausTastatur()*10;
				if(rtc.Minuten>=60){
					rtc.Minuten=0;
					pos=1;
					buffersize=sprintf(buffer,"Minuten falsch");
					for(uint8_t i = 0; i<buffersize;i++){
    3016:	14 35       	cpi	r17, 0x54	; 84
    3018:	a1 f7       	brne	.-24     	; 0x3002 <_Z13uhreinstellenv+0x326>
    301a:	ea c1       	rjmp	.+980    	; 0x33f0 <_Z13uhreinstellenv+0x714>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 3:
				rtc.Minuten+=Tastatur.ZahlenausTastatur();
    301c:	81 e4       	ldi	r24, 0x41	; 65
    301e:	93 e0       	ldi	r25, 0x03	; 3
    3020:	0e 94 6a 22 	call	0x44d4	; 0x44d4 <_ZN9Interface17ZahlenausTastaturEv>
    3024:	ea e8       	ldi	r30, 0x8A	; 138
    3026:	f7 e0       	ldi	r31, 0x07	; 7
    3028:	20 81       	ld	r18, Z
    302a:	90 e0       	ldi	r25, 0x00	; 0
    302c:	82 0f       	add	r24, r18
    302e:	91 1d       	adc	r25, r1
				if(rtc.Minuten>=60){
    3030:	8c 33       	cpi	r24, 0x3C	; 60
    3032:	10 f4       	brcc	.+4      	; 0x3038 <_Z13uhreinstellenv+0x35c>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 3:
				rtc.Minuten+=Tastatur.ZahlenausTastatur();
    3034:	80 83       	st	Z, r24
    3036:	09 c2       	rjmp	.+1042   	; 0x344a <_Z13uhreinstellenv+0x76e>
				if(rtc.Minuten>=60){
					rtc.Minuten=0;
    3038:	ea e8       	ldi	r30, 0x8A	; 138
    303a:	f7 e0       	ldi	r31, 0x07	; 7
    303c:	10 82       	st	Z, r1
					pos=1;
					buffersize=sprintf(buffer,"Minuten falsch");
    303e:	e5 ee       	ldi	r30, 0xE5	; 229
    3040:	f2 e0       	ldi	r31, 0x02	; 2
    3042:	a7 2d       	mov	r26, r7
    3044:	b8 2d       	mov	r27, r8
    3046:	86 2d       	mov	r24, r6
    3048:	01 90       	ld	r0, Z+
    304a:	0d 92       	st	X+, r0
    304c:	8a 95       	dec	r24
    304e:	e1 f7       	brne	.-8      	; 0x3048 <_Z13uhreinstellenv+0x36c>
    3050:	2d 88       	ldd	r2, Y+21	; 0x15
    3052:	3e 88       	ldd	r3, Y+22	; 0x16
    3054:	1b 2d       	mov	r17, r11
					for(uint8_t i = 0; i<buffersize;i++){
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
    3056:	f1 01       	movw	r30, r2
    3058:	61 91       	ld	r22, Z+
    305a:	1f 01       	movw	r2, r30
    305c:	28 e3       	ldi	r18, 0x38	; 56
    305e:	41 2f       	mov	r20, r17
    3060:	82 e4       	ldi	r24, 0x42	; 66
    3062:	93 e0       	ldi	r25, 0x03	; 3
    3064:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <_ZN7Display9draw_ASCIEhhh>
    3068:	1a 5f       	subi	r17, 0xFA	; 250
				rtc.Minuten+=Tastatur.ZahlenausTastatur();
				if(rtc.Minuten>=60){
					rtc.Minuten=0;
					pos=1;
					buffersize=sprintf(buffer,"Minuten falsch");
					for(uint8_t i = 0; i<buffersize;i++){
    306a:	14 35       	cpi	r17, 0x54	; 84
    306c:	a1 f7       	brne	.-24     	; 0x3056 <_Z13uhreinstellenv+0x37a>
    306e:	c3 c1       	rjmp	.+902    	; 0x33f6 <_Z13uhreinstellenv+0x71a>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 4:
				rtc.Tag=Tastatur.ZahlenausTastatur()*10;
    3070:	81 e4       	ldi	r24, 0x41	; 65
    3072:	93 e0       	ldi	r25, 0x03	; 3
    3074:	0e 94 6a 22 	call	0x44d4	; 0x44d4 <_ZN9Interface17ZahlenausTastaturEv>
    3078:	88 0f       	add	r24, r24
    307a:	98 2f       	mov	r25, r24
    307c:	99 0f       	add	r25, r25
    307e:	99 0f       	add	r25, r25
    3080:	89 0f       	add	r24, r25
				if(rtc.Tag>=32){
    3082:	80 32       	cpi	r24, 0x20	; 32
    3084:	18 f4       	brcc	.+6      	; 0x308c <_Z13uhreinstellenv+0x3b0>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 4:
				rtc.Tag=Tastatur.ZahlenausTastatur()*10;
    3086:	f2 01       	movw	r30, r4
    3088:	80 83       	st	Z, r24
    308a:	df c1       	rjmp	.+958    	; 0x344a <_Z13uhreinstellenv+0x76e>
				if(rtc.Tag>=32){
					rtc.Tag=0;
    308c:	f2 01       	movw	r30, r4
    308e:	10 82       	st	Z, r1
					pos=3;
					buffersize=sprintf(buffer,"Tag falsch");
    3090:	8b e0       	ldi	r24, 0x0B	; 11
    3092:	e4 ef       	ldi	r30, 0xF4	; 244
    3094:	f2 e0       	ldi	r31, 0x02	; 2
    3096:	a7 2d       	mov	r26, r7
    3098:	b8 2d       	mov	r27, r8
    309a:	01 90       	ld	r0, Z+
    309c:	0d 92       	st	X+, r0
    309e:	8a 95       	dec	r24
    30a0:	e1 f7       	brne	.-8      	; 0x309a <_Z13uhreinstellenv+0x3be>
    30a2:	2d 88       	ldd	r2, Y+21	; 0x15
    30a4:	3e 88       	ldd	r3, Y+22	; 0x16
    30a6:	1b 2d       	mov	r17, r11
					for(uint8_t i = 0; i<buffersize;i++){
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
    30a8:	f1 01       	movw	r30, r2
    30aa:	61 91       	ld	r22, Z+
    30ac:	1f 01       	movw	r2, r30
    30ae:	28 e3       	ldi	r18, 0x38	; 56
    30b0:	41 2f       	mov	r20, r17
    30b2:	82 e4       	ldi	r24, 0x42	; 66
    30b4:	93 e0       	ldi	r25, 0x03	; 3
    30b6:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <_ZN7Display9draw_ASCIEhhh>
    30ba:	1a 5f       	subi	r17, 0xFA	; 250
				rtc.Tag=Tastatur.ZahlenausTastatur()*10;
				if(rtc.Tag>=32){
					rtc.Tag=0;
					pos=3;
					buffersize=sprintf(buffer,"Tag falsch");
					for(uint8_t i = 0; i<buffersize;i++){
    30bc:	1c 33       	cpi	r17, 0x3C	; 60
    30be:	a1 f7       	brne	.-24     	; 0x30a8 <_Z13uhreinstellenv+0x3cc>
    30c0:	9d c1       	rjmp	.+826    	; 0x33fc <_Z13uhreinstellenv+0x720>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 5:
				rtc.Tag+=Tastatur.ZahlenausTastatur();
    30c2:	81 e4       	ldi	r24, 0x41	; 65
    30c4:	93 e0       	ldi	r25, 0x03	; 3
    30c6:	0e 94 6a 22 	call	0x44d4	; 0x44d4 <_ZN9Interface17ZahlenausTastaturEv>
    30ca:	f2 01       	movw	r30, r4
    30cc:	20 81       	ld	r18, Z
    30ce:	90 e0       	ldi	r25, 0x00	; 0
    30d0:	82 0f       	add	r24, r18
    30d2:	91 1d       	adc	r25, r1
				if(rtc.Tag>=32){
    30d4:	80 32       	cpi	r24, 0x20	; 32
    30d6:	10 f4       	brcc	.+4      	; 0x30dc <_Z13uhreinstellenv+0x400>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 5:
				rtc.Tag+=Tastatur.ZahlenausTastatur();
    30d8:	80 83       	st	Z, r24
    30da:	b7 c1       	rjmp	.+878    	; 0x344a <_Z13uhreinstellenv+0x76e>
				if(rtc.Tag>=32){
					rtc.Tag=0;
    30dc:	f2 01       	movw	r30, r4
    30de:	10 82       	st	Z, r1
					pos=3;
					buffersize=sprintf(buffer,"Tag falsch");
    30e0:	8b e0       	ldi	r24, 0x0B	; 11
    30e2:	e4 ef       	ldi	r30, 0xF4	; 244
    30e4:	f2 e0       	ldi	r31, 0x02	; 2
    30e6:	a7 2d       	mov	r26, r7
    30e8:	b8 2d       	mov	r27, r8
    30ea:	01 90       	ld	r0, Z+
    30ec:	0d 92       	st	X+, r0
    30ee:	8a 95       	dec	r24
    30f0:	e1 f7       	brne	.-8      	; 0x30ea <_Z13uhreinstellenv+0x40e>
    30f2:	2d 88       	ldd	r2, Y+21	; 0x15
    30f4:	3e 88       	ldd	r3, Y+22	; 0x16
    30f6:	1b 2d       	mov	r17, r11
					for(uint8_t i = 0; i<buffersize;i++){
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
    30f8:	f1 01       	movw	r30, r2
    30fa:	61 91       	ld	r22, Z+
    30fc:	1f 01       	movw	r2, r30
    30fe:	28 e3       	ldi	r18, 0x38	; 56
    3100:	41 2f       	mov	r20, r17
    3102:	82 e4       	ldi	r24, 0x42	; 66
    3104:	93 e0       	ldi	r25, 0x03	; 3
    3106:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <_ZN7Display9draw_ASCIEhhh>
    310a:	1a 5f       	subi	r17, 0xFA	; 250
				rtc.Tag+=Tastatur.ZahlenausTastatur();
				if(rtc.Tag>=32){
					rtc.Tag=0;
					pos=3;
					buffersize=sprintf(buffer,"Tag falsch");
					for(uint8_t i = 0; i<buffersize;i++){
    310c:	1c 33       	cpi	r17, 0x3C	; 60
    310e:	a1 f7       	brne	.-24     	; 0x30f8 <_Z13uhreinstellenv+0x41c>
    3110:	7a c1       	rjmp	.+756    	; 0x3406 <_Z13uhreinstellenv+0x72a>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 6:
				rtc.Monat=Tastatur.ZahlenausTastatur()*10;
    3112:	81 e4       	ldi	r24, 0x41	; 65
    3114:	93 e0       	ldi	r25, 0x03	; 3
    3116:	0e 94 6a 22 	call	0x44d4	; 0x44d4 <_ZN9Interface17ZahlenausTastaturEv>
    311a:	88 0f       	add	r24, r24
    311c:	98 2f       	mov	r25, r24
    311e:	99 0f       	add	r25, r25
    3120:	99 0f       	add	r25, r25
    3122:	89 0f       	add	r24, r25
				if(rtc.Monat>=13){
    3124:	8d 30       	cpi	r24, 0x0D	; 13
    3126:	18 f4       	brcc	.+6      	; 0x312e <_Z13uhreinstellenv+0x452>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 6:
				rtc.Monat=Tastatur.ZahlenausTastatur()*10;
    3128:	f6 01       	movw	r30, r12
    312a:	80 83       	st	Z, r24
    312c:	8e c1       	rjmp	.+796    	; 0x344a <_Z13uhreinstellenv+0x76e>
				if(rtc.Monat>=13){
					rtc.Monat=0;
    312e:	f6 01       	movw	r30, r12
    3130:	10 82       	st	Z, r1
					pos=5;
					buffersize=sprintf(buffer,"Monat falsch");
    3132:	8d e0       	ldi	r24, 0x0D	; 13
    3134:	ef ef       	ldi	r30, 0xFF	; 255
    3136:	f2 e0       	ldi	r31, 0x02	; 2
    3138:	a7 2d       	mov	r26, r7
    313a:	b8 2d       	mov	r27, r8
    313c:	01 90       	ld	r0, Z+
    313e:	0d 92       	st	X+, r0
    3140:	8a 95       	dec	r24
    3142:	e1 f7       	brne	.-8      	; 0x313c <_Z13uhreinstellenv+0x460>
    3144:	2d 88       	ldd	r2, Y+21	; 0x15
    3146:	3e 88       	ldd	r3, Y+22	; 0x16
    3148:	1b 2d       	mov	r17, r11
					for(uint8_t i = 0; i<buffersize;i++){
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
    314a:	f1 01       	movw	r30, r2
    314c:	61 91       	ld	r22, Z+
    314e:	1f 01       	movw	r2, r30
    3150:	28 e3       	ldi	r18, 0x38	; 56
    3152:	41 2f       	mov	r20, r17
    3154:	82 e4       	ldi	r24, 0x42	; 66
    3156:	93 e0       	ldi	r25, 0x03	; 3
    3158:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <_ZN7Display9draw_ASCIEhhh>
    315c:	1a 5f       	subi	r17, 0xFA	; 250
				rtc.Monat=Tastatur.ZahlenausTastatur()*10;
				if(rtc.Monat>=13){
					rtc.Monat=0;
					pos=5;
					buffersize=sprintf(buffer,"Monat falsch");
					for(uint8_t i = 0; i<buffersize;i++){
    315e:	18 34       	cpi	r17, 0x48	; 72
    3160:	a1 f7       	brne	.-24     	; 0x314a <_Z13uhreinstellenv+0x46e>
    3162:	56 c1       	rjmp	.+684    	; 0x3410 <_Z13uhreinstellenv+0x734>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 7:
				rtc.Monat+=Tastatur.ZahlenausTastatur();
    3164:	81 e4       	ldi	r24, 0x41	; 65
    3166:	93 e0       	ldi	r25, 0x03	; 3
    3168:	0e 94 6a 22 	call	0x44d4	; 0x44d4 <_ZN9Interface17ZahlenausTastaturEv>
    316c:	f6 01       	movw	r30, r12
    316e:	20 81       	ld	r18, Z
    3170:	90 e0       	ldi	r25, 0x00	; 0
    3172:	82 0f       	add	r24, r18
    3174:	91 1d       	adc	r25, r1
				if(rtc.Monat>=13){
    3176:	8d 30       	cpi	r24, 0x0D	; 13
    3178:	10 f4       	brcc	.+4      	; 0x317e <_Z13uhreinstellenv+0x4a2>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 7:
				rtc.Monat+=Tastatur.ZahlenausTastatur();
    317a:	80 83       	st	Z, r24
    317c:	1e c0       	rjmp	.+60     	; 0x31ba <_Z13uhreinstellenv+0x4de>
				if(rtc.Monat>=13){
					rtc.Monat=0;
    317e:	f6 01       	movw	r30, r12
    3180:	10 82       	st	Z, r1
					pos=5;
					buffersize=sprintf(buffer,"Monat falsch");
    3182:	8d e0       	ldi	r24, 0x0D	; 13
    3184:	ef ef       	ldi	r30, 0xFF	; 255
    3186:	f2 e0       	ldi	r31, 0x02	; 2
    3188:	a7 2d       	mov	r26, r7
    318a:	b8 2d       	mov	r27, r8
    318c:	01 90       	ld	r0, Z+
    318e:	0d 92       	st	X+, r0
    3190:	8a 95       	dec	r24
    3192:	e1 f7       	brne	.-8      	; 0x318c <_Z13uhreinstellenv+0x4b0>
    3194:	2d 88       	ldd	r2, Y+21	; 0x15
    3196:	3e 88       	ldd	r3, Y+22	; 0x16
    3198:	1b 2d       	mov	r17, r11
					for(uint8_t i = 0; i<buffersize;i++){
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
    319a:	f1 01       	movw	r30, r2
    319c:	61 91       	ld	r22, Z+
    319e:	1f 01       	movw	r2, r30
    31a0:	28 e3       	ldi	r18, 0x38	; 56
    31a2:	41 2f       	mov	r20, r17
    31a4:	82 e4       	ldi	r24, 0x42	; 66
    31a6:	93 e0       	ldi	r25, 0x03	; 3
    31a8:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <_ZN7Display9draw_ASCIEhhh>
    31ac:	1a 5f       	subi	r17, 0xFA	; 250
				rtc.Monat+=Tastatur.ZahlenausTastatur();
				if(rtc.Monat>=13){
					rtc.Monat=0;
					pos=5;
					buffersize=sprintf(buffer,"Monat falsch");
					for(uint8_t i = 0; i<buffersize;i++){
    31ae:	18 34       	cpi	r17, 0x48	; 72
    31b0:	a1 f7       	brne	.-24     	; 0x319a <_Z13uhreinstellenv+0x4be>
				break;
			case 7:
				rtc.Monat+=Tastatur.ZahlenausTastatur();
				if(rtc.Monat>=13){
					rtc.Monat=0;
					pos=5;
    31b2:	0f 2e       	mov	r0, r31
    31b4:	f5 e0       	ldi	r31, 0x05	; 5
    31b6:	9f 2e       	mov	r9, r31
    31b8:	f0 2d       	mov	r31, r0
					buffersize=sprintf(buffer,"Monat falsch");
					for(uint8_t i = 0; i<buffersize;i++){
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				if(rtc.Monat==4||rtc.Monat==6||rtc.Monat==9||rtc.Monat==11){
    31ba:	f6 01       	movw	r30, r12
    31bc:	90 81       	ld	r25, Z
    31be:	89 2f       	mov	r24, r25
    31c0:	8d 7f       	andi	r24, 0xFD	; 253
    31c2:	84 30       	cpi	r24, 0x04	; 4
    31c4:	11 f0       	breq	.+4      	; 0x31ca <_Z13uhreinstellenv+0x4ee>
    31c6:	89 30       	cpi	r24, 0x09	; 9
    31c8:	09 f5       	brne	.+66     	; 0x320c <_Z13uhreinstellenv+0x530>
					if(rtc.Tag>=31){
    31ca:	f2 01       	movw	r30, r4
    31cc:	80 81       	ld	r24, Z
    31ce:	8f 31       	cpi	r24, 0x1F	; 31
    31d0:	08 f4       	brcc	.+2      	; 0x31d4 <_Z13uhreinstellenv+0x4f8>
    31d2:	ea c0       	rjmp	.+468    	; 0x33a8 <_Z13uhreinstellenv+0x6cc>
						rtc.Tag=0;
    31d4:	10 82       	st	Z, r1
						rtc.Monat=0;
    31d6:	f6 01       	movw	r30, r12
    31d8:	10 82       	st	Z, r1
						pos=3;
						buffersize=sprintf(buffer,"Tag falsch");
    31da:	8b e0       	ldi	r24, 0x0B	; 11
    31dc:	e4 ef       	ldi	r30, 0xF4	; 244
    31de:	f2 e0       	ldi	r31, 0x02	; 2
    31e0:	a7 2d       	mov	r26, r7
    31e2:	b8 2d       	mov	r27, r8
    31e4:	01 90       	ld	r0, Z+
    31e6:	0d 92       	st	X+, r0
    31e8:	8a 95       	dec	r24
    31ea:	e1 f7       	brne	.-8      	; 0x31e4 <_Z13uhreinstellenv+0x508>
    31ec:	2d 88       	ldd	r2, Y+21	; 0x15
    31ee:	3e 88       	ldd	r3, Y+22	; 0x16
    31f0:	1b 2d       	mov	r17, r11
						for(uint8_t i = 0; i<buffersize;i++){
							oled.draw_ASCI(buffer[i],charsize*i,7*8);
    31f2:	f1 01       	movw	r30, r2
    31f4:	61 91       	ld	r22, Z+
    31f6:	1f 01       	movw	r2, r30
    31f8:	28 e3       	ldi	r18, 0x38	; 56
    31fa:	41 2f       	mov	r20, r17
    31fc:	82 e4       	ldi	r24, 0x42	; 66
    31fe:	93 e0       	ldi	r25, 0x03	; 3
    3200:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <_ZN7Display9draw_ASCIEhhh>
    3204:	1a 5f       	subi	r17, 0xFA	; 250
					if(rtc.Tag>=31){
						rtc.Tag=0;
						rtc.Monat=0;
						pos=3;
						buffersize=sprintf(buffer,"Tag falsch");
						for(uint8_t i = 0; i<buffersize;i++){
    3206:	1c 33       	cpi	r17, 0x3C	; 60
    3208:	a1 f7       	brne	.-24     	; 0x31f2 <_Z13uhreinstellenv+0x516>
    320a:	07 c1       	rjmp	.+526    	; 0x341a <_Z13uhreinstellenv+0x73e>
							oled.draw_ASCI(buffer[i],charsize*i,7*8);
						}
					}
				}
				else if(rtc.Monat==2){
    320c:	92 30       	cpi	r25, 0x02	; 2
    320e:	09 f0       	breq	.+2      	; 0x3212 <_Z13uhreinstellenv+0x536>
    3210:	cb c0       	rjmp	.+406    	; 0x33a8 <_Z13uhreinstellenv+0x6cc>
					if(rtc.Tag>=30){
    3212:	f2 01       	movw	r30, r4
    3214:	80 81       	ld	r24, Z
    3216:	8e 31       	cpi	r24, 0x1E	; 30
    3218:	08 f4       	brcc	.+2      	; 0x321c <_Z13uhreinstellenv+0x540>
    321a:	c6 c0       	rjmp	.+396    	; 0x33a8 <_Z13uhreinstellenv+0x6cc>
						rtc.Tag=0;
    321c:	10 82       	st	Z, r1
						rtc.Monat=0;
    321e:	f6 01       	movw	r30, r12
    3220:	10 82       	st	Z, r1
						pos=3;
						buffersize=sprintf(buffer,"Tag falsch");
    3222:	8b e0       	ldi	r24, 0x0B	; 11
    3224:	e4 ef       	ldi	r30, 0xF4	; 244
    3226:	f2 e0       	ldi	r31, 0x02	; 2
    3228:	a7 2d       	mov	r26, r7
    322a:	b8 2d       	mov	r27, r8
    322c:	01 90       	ld	r0, Z+
    322e:	0d 92       	st	X+, r0
    3230:	8a 95       	dec	r24
    3232:	e1 f7       	brne	.-8      	; 0x322c <_Z13uhreinstellenv+0x550>
    3234:	2d 88       	ldd	r2, Y+21	; 0x15
    3236:	3e 88       	ldd	r3, Y+22	; 0x16
    3238:	1b 2d       	mov	r17, r11
						for(uint8_t i = 0; i<buffersize;i++){
							oled.draw_ASCI(buffer[i],charsize*i,7*8);
    323a:	f1 01       	movw	r30, r2
    323c:	61 91       	ld	r22, Z+
    323e:	1f 01       	movw	r2, r30
    3240:	28 e3       	ldi	r18, 0x38	; 56
    3242:	41 2f       	mov	r20, r17
    3244:	82 e4       	ldi	r24, 0x42	; 66
    3246:	93 e0       	ldi	r25, 0x03	; 3
    3248:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <_ZN7Display9draw_ASCIEhhh>
    324c:	1a 5f       	subi	r17, 0xFA	; 250
					if(rtc.Tag>=30){
						rtc.Tag=0;
						rtc.Monat=0;
						pos=3;
						buffersize=sprintf(buffer,"Tag falsch");
						for(uint8_t i = 0; i<buffersize;i++){
    324e:	1c 33       	cpi	r17, 0x3C	; 60
    3250:	a1 f7       	brne	.-24     	; 0x323a <_Z13uhreinstellenv+0x55e>
    3252:	e8 c0       	rjmp	.+464    	; 0x3424 <_Z13uhreinstellenv+0x748>
						}
					}
				}
				break;
			case 8:
				rtc.Jahr=Tastatur.ZahlenausTastatur()*10;
    3254:	81 e4       	ldi	r24, 0x41	; 65
    3256:	93 e0       	ldi	r25, 0x03	; 3
    3258:	0e 94 6a 22 	call	0x44d4	; 0x44d4 <_ZN9Interface17ZahlenausTastaturEv>
    325c:	88 0f       	add	r24, r24
    325e:	98 2f       	mov	r25, r24
    3260:	99 0f       	add	r25, r25
    3262:	99 0f       	add	r25, r25
    3264:	89 0f       	add	r24, r25
				if(rtc.Jahr>=50){
    3266:	82 33       	cpi	r24, 0x32	; 50
    3268:	20 f4       	brcc	.+8      	; 0x3272 <_Z13uhreinstellenv+0x596>
						}
					}
				}
				break;
			case 8:
				rtc.Jahr=Tastatur.ZahlenausTastatur()*10;
    326a:	e0 e9       	ldi	r30, 0x90	; 144
    326c:	f7 e0       	ldi	r31, 0x07	; 7
    326e:	80 83       	st	Z, r24
    3270:	ec c0       	rjmp	.+472    	; 0x344a <_Z13uhreinstellenv+0x76e>
				if(rtc.Jahr>=50){
					rtc.Jahr=0;
    3272:	e0 e9       	ldi	r30, 0x90	; 144
    3274:	f7 e0       	ldi	r31, 0x07	; 7
    3276:	10 82       	st	Z, r1
					pos=7;
					buffersize=sprintf(buffer,"Jahr falsch");
    3278:	8c e0       	ldi	r24, 0x0C	; 12
    327a:	ec e0       	ldi	r30, 0x0C	; 12
    327c:	f3 e0       	ldi	r31, 0x03	; 3
    327e:	a7 2d       	mov	r26, r7
    3280:	b8 2d       	mov	r27, r8
    3282:	01 90       	ld	r0, Z+
    3284:	0d 92       	st	X+, r0
    3286:	8a 95       	dec	r24
    3288:	e1 f7       	brne	.-8      	; 0x3282 <_Z13uhreinstellenv+0x5a6>
    328a:	2d 88       	ldd	r2, Y+21	; 0x15
    328c:	3e 88       	ldd	r3, Y+22	; 0x16
    328e:	1b 2d       	mov	r17, r11
					for(uint8_t i = 0; i<buffersize;i++){
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
    3290:	f1 01       	movw	r30, r2
    3292:	61 91       	ld	r22, Z+
    3294:	1f 01       	movw	r2, r30
    3296:	28 e3       	ldi	r18, 0x38	; 56
    3298:	41 2f       	mov	r20, r17
    329a:	82 e4       	ldi	r24, 0x42	; 66
    329c:	93 e0       	ldi	r25, 0x03	; 3
    329e:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <_ZN7Display9draw_ASCIEhhh>
    32a2:	1a 5f       	subi	r17, 0xFA	; 250
				rtc.Jahr=Tastatur.ZahlenausTastatur()*10;
				if(rtc.Jahr>=50){
					rtc.Jahr=0;
					pos=7;
					buffersize=sprintf(buffer,"Jahr falsch");
					for(uint8_t i = 0; i<buffersize;i++){
    32a4:	12 34       	cpi	r17, 0x42	; 66
    32a6:	a1 f7       	brne	.-24     	; 0x3290 <_Z13uhreinstellenv+0x5b4>
    32a8:	c2 c0       	rjmp	.+388    	; 0x342e <_Z13uhreinstellenv+0x752>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 9:
				rtc.Jahr+=Tastatur.ZahlenausTastatur();
    32aa:	81 e4       	ldi	r24, 0x41	; 65
    32ac:	93 e0       	ldi	r25, 0x03	; 3
    32ae:	0e 94 6a 22 	call	0x44d4	; 0x44d4 <_ZN9Interface17ZahlenausTastaturEv>
    32b2:	e0 e9       	ldi	r30, 0x90	; 144
    32b4:	f7 e0       	ldi	r31, 0x07	; 7
    32b6:	20 81       	ld	r18, Z
    32b8:	90 e0       	ldi	r25, 0x00	; 0
    32ba:	82 0f       	add	r24, r18
    32bc:	91 1d       	adc	r25, r1
				if(rtc.Jahr>=50){
    32be:	82 33       	cpi	r24, 0x32	; 50
    32c0:	10 f4       	brcc	.+4      	; 0x32c6 <_Z13uhreinstellenv+0x5ea>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 9:
				rtc.Jahr+=Tastatur.ZahlenausTastatur();
    32c2:	80 83       	st	Z, r24
    32c4:	1f c0       	rjmp	.+62     	; 0x3304 <_Z13uhreinstellenv+0x628>
				if(rtc.Jahr>=50){
					rtc.Jahr=0;
    32c6:	e0 e9       	ldi	r30, 0x90	; 144
    32c8:	f7 e0       	ldi	r31, 0x07	; 7
    32ca:	10 82       	st	Z, r1
					pos=7;
					buffersize=sprintf(buffer,"Jahr falsch");
    32cc:	8c e0       	ldi	r24, 0x0C	; 12
    32ce:	ec e0       	ldi	r30, 0x0C	; 12
    32d0:	f3 e0       	ldi	r31, 0x03	; 3
    32d2:	a7 2d       	mov	r26, r7
    32d4:	b8 2d       	mov	r27, r8
    32d6:	01 90       	ld	r0, Z+
    32d8:	0d 92       	st	X+, r0
    32da:	8a 95       	dec	r24
    32dc:	e1 f7       	brne	.-8      	; 0x32d6 <_Z13uhreinstellenv+0x5fa>
    32de:	2d 88       	ldd	r2, Y+21	; 0x15
    32e0:	3e 88       	ldd	r3, Y+22	; 0x16
    32e2:	1b 2d       	mov	r17, r11
					for(uint8_t i = 0; i<buffersize;i++){
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
    32e4:	f1 01       	movw	r30, r2
    32e6:	61 91       	ld	r22, Z+
    32e8:	1f 01       	movw	r2, r30
    32ea:	28 e3       	ldi	r18, 0x38	; 56
    32ec:	41 2f       	mov	r20, r17
    32ee:	82 e4       	ldi	r24, 0x42	; 66
    32f0:	93 e0       	ldi	r25, 0x03	; 3
    32f2:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <_ZN7Display9draw_ASCIEhhh>
    32f6:	1a 5f       	subi	r17, 0xFA	; 250
				rtc.Jahr+=Tastatur.ZahlenausTastatur();
				if(rtc.Jahr>=50){
					rtc.Jahr=0;
					pos=7;
					buffersize=sprintf(buffer,"Jahr falsch");
					for(uint8_t i = 0; i<buffersize;i++){
    32f8:	12 34       	cpi	r17, 0x42	; 66
    32fa:	a1 f7       	brne	.-24     	; 0x32e4 <_Z13uhreinstellenv+0x608>
				break;
			case 9:
				rtc.Jahr+=Tastatur.ZahlenausTastatur();
				if(rtc.Jahr>=50){
					rtc.Jahr=0;
					pos=7;
    32fc:	0f 2e       	mov	r0, r31
    32fe:	f7 e0       	ldi	r31, 0x07	; 7
    3300:	9f 2e       	mov	r9, r31
    3302:	f0 2d       	mov	r31, r0
					buffersize=sprintf(buffer,"Jahr falsch");
					for(uint8_t i = 0; i<buffersize;i++){
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				if(rtc.Monat==2){
    3304:	f6 01       	movw	r30, r12
    3306:	80 81       	ld	r24, Z
    3308:	82 30       	cpi	r24, 0x02	; 2
    330a:	09 f0       	breq	.+2      	; 0x330e <_Z13uhreinstellenv+0x632>
    330c:	4d c0       	rjmp	.+154    	; 0x33a8 <_Z13uhreinstellenv+0x6cc>
					if(rtc.Jahr%4==0){
    330e:	e0 e9       	ldi	r30, 0x90	; 144
    3310:	f7 e0       	ldi	r31, 0x07	; 7
    3312:	80 81       	ld	r24, Z
    3314:	83 70       	andi	r24, 0x03	; 3
    3316:	21 f5       	brne	.+72     	; 0x3360 <_Z13uhreinstellenv+0x684>
						if (rtc.Tag>=30)
    3318:	f2 01       	movw	r30, r4
    331a:	80 81       	ld	r24, Z
    331c:	8e 31       	cpi	r24, 0x1E	; 30
    331e:	08 f4       	brcc	.+2      	; 0x3322 <_Z13uhreinstellenv+0x646>
    3320:	43 c0       	rjmp	.+134    	; 0x33a8 <_Z13uhreinstellenv+0x6cc>
						{
							rtc.Tag=0;
    3322:	10 82       	st	Z, r1
							rtc.Monat=0;
    3324:	f6 01       	movw	r30, r12
    3326:	10 82       	st	Z, r1
							rtc.Jahr=0;
    3328:	e0 e9       	ldi	r30, 0x90	; 144
    332a:	f7 e0       	ldi	r31, 0x07	; 7
    332c:	10 82       	st	Z, r1
							pos=3;
							buffersize=sprintf(buffer,"Tag falsch");
    332e:	8b e0       	ldi	r24, 0x0B	; 11
    3330:	e4 ef       	ldi	r30, 0xF4	; 244
    3332:	f2 e0       	ldi	r31, 0x02	; 2
    3334:	a7 2d       	mov	r26, r7
    3336:	b8 2d       	mov	r27, r8
    3338:	01 90       	ld	r0, Z+
    333a:	0d 92       	st	X+, r0
    333c:	8a 95       	dec	r24
    333e:	e1 f7       	brne	.-8      	; 0x3338 <_Z13uhreinstellenv+0x65c>
    3340:	2d 88       	ldd	r2, Y+21	; 0x15
    3342:	3e 88       	ldd	r3, Y+22	; 0x16
    3344:	1b 2d       	mov	r17, r11
							for(uint8_t i = 0; i<buffersize;i++){
								oled.draw_ASCI(buffer[i],charsize*i,7*8);
    3346:	f1 01       	movw	r30, r2
    3348:	61 91       	ld	r22, Z+
    334a:	1f 01       	movw	r2, r30
    334c:	28 e3       	ldi	r18, 0x38	; 56
    334e:	41 2f       	mov	r20, r17
    3350:	82 e4       	ldi	r24, 0x42	; 66
    3352:	93 e0       	ldi	r25, 0x03	; 3
    3354:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <_ZN7Display9draw_ASCIEhhh>
    3358:	1a 5f       	subi	r17, 0xFA	; 250
							rtc.Tag=0;
							rtc.Monat=0;
							rtc.Jahr=0;
							pos=3;
							buffersize=sprintf(buffer,"Tag falsch");
							for(uint8_t i = 0; i<buffersize;i++){
    335a:	1c 33       	cpi	r17, 0x3C	; 60
    335c:	a1 f7       	brne	.-24     	; 0x3346 <_Z13uhreinstellenv+0x66a>
    335e:	6c c0       	rjmp	.+216    	; 0x3438 <_Z13uhreinstellenv+0x75c>
								oled.draw_ASCI(buffer[i],charsize*i,7*8);
							}
						}
					}
					else{
						if(rtc.Tag>=29){
    3360:	f2 01       	movw	r30, r4
    3362:	80 81       	ld	r24, Z
    3364:	8d 31       	cpi	r24, 0x1D	; 29
    3366:	00 f1       	brcs	.+64     	; 0x33a8 <_Z13uhreinstellenv+0x6cc>
							rtc.Tag=0;
    3368:	10 82       	st	Z, r1
							rtc.Monat=0;
    336a:	f6 01       	movw	r30, r12
    336c:	10 82       	st	Z, r1
							rtc.Jahr=0;
    336e:	e0 e9       	ldi	r30, 0x90	; 144
    3370:	f7 e0       	ldi	r31, 0x07	; 7
    3372:	10 82       	st	Z, r1
							pos=3;
							buffersize=sprintf(buffer,"Tag falsch");
    3374:	8b e0       	ldi	r24, 0x0B	; 11
    3376:	e4 ef       	ldi	r30, 0xF4	; 244
    3378:	f2 e0       	ldi	r31, 0x02	; 2
    337a:	a7 2d       	mov	r26, r7
    337c:	b8 2d       	mov	r27, r8
    337e:	01 90       	ld	r0, Z+
    3380:	0d 92       	st	X+, r0
    3382:	8a 95       	dec	r24
    3384:	e1 f7       	brne	.-8      	; 0x337e <_Z13uhreinstellenv+0x6a2>
    3386:	2d 88       	ldd	r2, Y+21	; 0x15
    3388:	3e 88       	ldd	r3, Y+22	; 0x16
    338a:	1b 2d       	mov	r17, r11
							for(uint8_t i = 0; i<buffersize;i++){
								oled.draw_ASCI(buffer[i],charsize*i,7*8);
    338c:	f1 01       	movw	r30, r2
    338e:	61 91       	ld	r22, Z+
    3390:	1f 01       	movw	r2, r30
    3392:	28 e3       	ldi	r18, 0x38	; 56
    3394:	41 2f       	mov	r20, r17
    3396:	82 e4       	ldi	r24, 0x42	; 66
    3398:	93 e0       	ldi	r25, 0x03	; 3
    339a:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <_ZN7Display9draw_ASCIEhhh>
    339e:	1a 5f       	subi	r17, 0xFA	; 250
							rtc.Tag=0;
							rtc.Monat=0;
							rtc.Jahr=0;
							pos=3;
							buffersize=sprintf(buffer,"Tag falsch");
							for(uint8_t i = 0; i<buffersize;i++){
    33a0:	1c 33       	cpi	r17, 0x3C	; 60
    33a2:	a1 f7       	brne	.-24     	; 0x338c <_Z13uhreinstellenv+0x6b0>
    33a4:	4e c0       	rjmp	.+156    	; 0x3442 <_Z13uhreinstellenv+0x766>
						}
					}
				}
				break;
			default:
				pos++;
    33a6:	93 94       	inc	r9
				break;
		}
		pos++;
    33a8:	93 94       	inc	r9
	
	oled.clearFrame();
	char buffer[20];
	uint8_t buffersize;
	uint8_t pos=0;
	while(pos<11){
    33aa:	fa e0       	ldi	r31, 0x0A	; 10
    33ac:	f9 15       	cp	r31, r9
    33ae:	08 f0       	brcs	.+2      	; 0x33b2 <_Z13uhreinstellenv+0x6d6>
    33b0:	d4 cc       	rjmp	.-1624   	; 0x2d5a <_Z13uhreinstellenv+0x7e>
				break;
		}
		pos++;
	}
	
	rtc.Sekunden		= 0;
    33b2:	10 92 8b 07 	sts	0x078B, r1
	rtc.HundSekunden	= 0;
    33b6:	10 92 8c 07 	sts	0x078C, r1
	oled.clearFrame();
    33ba:	82 e4       	ldi	r24, 0x42	; 66
    33bc:	93 e0       	ldi	r25, 0x03	; 3
    33be:	0e 94 ed 03 	call	0x7da	; 0x7da <_ZN7Display10clearFrameEv>
	rtc.ausgabedatumneu();
    33c2:	89 e7       	ldi	r24, 0x79	; 121
    33c4:	97 e0       	ldi	r25, 0x07	; 7
    33c6:	0e 94 f1 26 	call	0x4de2	; 0x4de2 <_ZN3RTC15ausgabedatumneuEv>
	rtc.ausgabezeitneu();
    33ca:	89 e7       	ldi	r24, 0x79	; 121
    33cc:	97 e0       	ldi	r25, 0x07	; 7
    33ce:	0e 94 b8 26 	call	0x4d70	; 0x4d70 <_ZN3RTC14ausgabezeitneuEv>
	rtc.RTCstart();
    33d2:	89 e7       	ldi	r24, 0x79	; 121
    33d4:	97 e0       	ldi	r25, 0x07	; 7
    33d6:	0e 94 d4 27 	call	0x4fa8	; 0x4fa8 <_ZN3RTC8RTCstartEv>
    33da:	39 c0       	rjmp	.+114    	; 0x344e <_Z13uhreinstellenv+0x772>

		oled.sendFrame();
		oled.clearFrame();
		switch (pos) {
			case 0:
				rtc.Stunden=Tastatur.ZahlenausTastatur()*10;
    33dc:	e9 e8       	ldi	r30, 0x89	; 137
    33de:	f7 e0       	ldi	r31, 0x07	; 7
    33e0:	80 83       	st	Z, r24
    33e2:	33 c0       	rjmp	.+102    	; 0x344a <_Z13uhreinstellenv+0x76e>
				if(rtc.Stunden>=24){
					rtc.Stunden=0;
					pos=-1;
    33e4:	99 24       	eor	r9, r9
    33e6:	9a 94       	dec	r9
    33e8:	30 c0       	rjmp	.+96     	; 0x344a <_Z13uhreinstellenv+0x76e>
				break;
			case 1:
				rtc.Stunden+=Tastatur.ZahlenausTastatur();
				if(rtc.Stunden>=24){
					rtc.Stunden=0;
					pos=-1;
    33ea:	99 24       	eor	r9, r9
    33ec:	9a 94       	dec	r9
    33ee:	2d c0       	rjmp	.+90     	; 0x344a <_Z13uhreinstellenv+0x76e>
				break;
			case 2:
				rtc.Minuten=Tastatur.ZahlenausTastatur()*10;
				if(rtc.Minuten>=60){
					rtc.Minuten=0;
					pos=1;
    33f0:	99 24       	eor	r9, r9
    33f2:	93 94       	inc	r9
    33f4:	2a c0       	rjmp	.+84     	; 0x344a <_Z13uhreinstellenv+0x76e>
				break;
			case 3:
				rtc.Minuten+=Tastatur.ZahlenausTastatur();
				if(rtc.Minuten>=60){
					rtc.Minuten=0;
					pos=1;
    33f6:	99 24       	eor	r9, r9
    33f8:	93 94       	inc	r9
    33fa:	27 c0       	rjmp	.+78     	; 0x344a <_Z13uhreinstellenv+0x76e>
				break;
			case 4:
				rtc.Tag=Tastatur.ZahlenausTastatur()*10;
				if(rtc.Tag>=32){
					rtc.Tag=0;
					pos=3;
    33fc:	0f 2e       	mov	r0, r31
    33fe:	f3 e0       	ldi	r31, 0x03	; 3
    3400:	9f 2e       	mov	r9, r31
    3402:	f0 2d       	mov	r31, r0
    3404:	22 c0       	rjmp	.+68     	; 0x344a <_Z13uhreinstellenv+0x76e>
				break;
			case 5:
				rtc.Tag+=Tastatur.ZahlenausTastatur();
				if(rtc.Tag>=32){
					rtc.Tag=0;
					pos=3;
    3406:	0f 2e       	mov	r0, r31
    3408:	f3 e0       	ldi	r31, 0x03	; 3
    340a:	9f 2e       	mov	r9, r31
    340c:	f0 2d       	mov	r31, r0
    340e:	1d c0       	rjmp	.+58     	; 0x344a <_Z13uhreinstellenv+0x76e>
				break;
			case 6:
				rtc.Monat=Tastatur.ZahlenausTastatur()*10;
				if(rtc.Monat>=13){
					rtc.Monat=0;
					pos=5;
    3410:	0f 2e       	mov	r0, r31
    3412:	f5 e0       	ldi	r31, 0x05	; 5
    3414:	9f 2e       	mov	r9, r31
    3416:	f0 2d       	mov	r31, r0
    3418:	18 c0       	rjmp	.+48     	; 0x344a <_Z13uhreinstellenv+0x76e>
				}
				if(rtc.Monat==4||rtc.Monat==6||rtc.Monat==9||rtc.Monat==11){
					if(rtc.Tag>=31){
						rtc.Tag=0;
						rtc.Monat=0;
						pos=3;
    341a:	0f 2e       	mov	r0, r31
    341c:	f3 e0       	ldi	r31, 0x03	; 3
    341e:	9f 2e       	mov	r9, r31
    3420:	f0 2d       	mov	r31, r0
    3422:	13 c0       	rjmp	.+38     	; 0x344a <_Z13uhreinstellenv+0x76e>
				}
				else if(rtc.Monat==2){
					if(rtc.Tag>=30){
						rtc.Tag=0;
						rtc.Monat=0;
						pos=3;
    3424:	0f 2e       	mov	r0, r31
    3426:	f3 e0       	ldi	r31, 0x03	; 3
    3428:	9f 2e       	mov	r9, r31
    342a:	f0 2d       	mov	r31, r0
    342c:	0e c0       	rjmp	.+28     	; 0x344a <_Z13uhreinstellenv+0x76e>
				break;
			case 8:
				rtc.Jahr=Tastatur.ZahlenausTastatur()*10;
				if(rtc.Jahr>=50){
					rtc.Jahr=0;
					pos=7;
    342e:	0f 2e       	mov	r0, r31
    3430:	f7 e0       	ldi	r31, 0x07	; 7
    3432:	9f 2e       	mov	r9, r31
    3434:	f0 2d       	mov	r31, r0
    3436:	09 c0       	rjmp	.+18     	; 0x344a <_Z13uhreinstellenv+0x76e>
						if (rtc.Tag>=30)
						{
							rtc.Tag=0;
							rtc.Monat=0;
							rtc.Jahr=0;
							pos=3;
    3438:	0f 2e       	mov	r0, r31
    343a:	f3 e0       	ldi	r31, 0x03	; 3
    343c:	9f 2e       	mov	r9, r31
    343e:	f0 2d       	mov	r31, r0
    3440:	04 c0       	rjmp	.+8      	; 0x344a <_Z13uhreinstellenv+0x76e>
					else{
						if(rtc.Tag>=29){
							rtc.Tag=0;
							rtc.Monat=0;
							rtc.Jahr=0;
							pos=3;
    3442:	0f 2e       	mov	r0, r31
    3444:	f3 e0       	ldi	r31, 0x03	; 3
    3446:	9f 2e       	mov	r9, r31
    3448:	f0 2d       	mov	r31, r0
				break;
			default:
				pos++;
				break;
		}
		pos++;
    344a:	93 94       	inc	r9
    344c:	86 cc       	rjmp	.-1780   	; 0x2d5a <_Z13uhreinstellenv+0x7e>
	rtc.HundSekunden	= 0;
	oled.clearFrame();
	rtc.ausgabedatumneu();
	rtc.ausgabezeitneu();
	rtc.RTCstart();
}
    344e:	66 96       	adiw	r28, 0x16	; 22
    3450:	0f b6       	in	r0, 0x3f	; 63
    3452:	f8 94       	cli
    3454:	de bf       	out	0x3e, r29	; 62
    3456:	0f be       	out	0x3f, r0	; 63
    3458:	cd bf       	out	0x3d, r28	; 61
    345a:	df 91       	pop	r29
    345c:	cf 91       	pop	r28
    345e:	1f 91       	pop	r17
    3460:	0f 91       	pop	r16
    3462:	ff 90       	pop	r15
    3464:	ef 90       	pop	r14
    3466:	df 90       	pop	r13
    3468:	cf 90       	pop	r12
    346a:	bf 90       	pop	r11
    346c:	af 90       	pop	r10
    346e:	9f 90       	pop	r9
    3470:	8f 90       	pop	r8
    3472:	7f 90       	pop	r7
    3474:	6f 90       	pop	r6
    3476:	5f 90       	pop	r5
    3478:	4f 90       	pop	r4
    347a:	3f 90       	pop	r3
    347c:	2f 90       	pop	r2
    347e:	08 95       	ret

00003480 <__vector_9>:
uint8_t pos;		//Handler fuer die Einganbe von Zahlen

//Ausgelagerte Sammlung der einzelnen Seitenlayouts
#include "Seiten.h"

ISR(TIMER2_OVF_vect){	//Vektor fuer die RTC
    3480:	1f 92       	push	r1
    3482:	0f 92       	push	r0
    3484:	0f b6       	in	r0, 0x3f	; 63
    3486:	0f 92       	push	r0
    3488:	11 24       	eor	r1, r1
    348a:	8f 93       	push	r24
    348c:	ef 93       	push	r30
    348e:	ff 93       	push	r31
	TCNT2=TIMER2RTCTIME;
    3490:	10 92 b2 00 	sts	0x00B2, r1
	rtc.Sekunden++;
    3494:	eb e8       	ldi	r30, 0x8B	; 139
    3496:	f7 e0       	ldi	r31, 0x07	; 7
    3498:	80 81       	ld	r24, Z
    349a:	8f 5f       	subi	r24, 0xFF	; 255
    349c:	80 83       	st	Z, r24
	rtc.interupts|= (1<<sekundeninterupt);
    349e:	e1 e9       	ldi	r30, 0x91	; 145
    34a0:	f7 e0       	ldi	r31, 0x07	; 7
    34a2:	80 81       	ld	r24, Z
    34a4:	82 60       	ori	r24, 0x02	; 2
    34a6:	80 83       	st	Z, r24
}
    34a8:	ff 91       	pop	r31
    34aa:	ef 91       	pop	r30
    34ac:	8f 91       	pop	r24
    34ae:	0f 90       	pop	r0
    34b0:	0f be       	out	0x3f, r0	; 63
    34b2:	0f 90       	pop	r0
    34b4:	1f 90       	pop	r1
    34b6:	18 95       	reti

000034b8 <_Z15geschwindigkeitf>:

double geschw;
double strecke;
double maxgeschw;
uint32_t Fahrtzeit;
void geschwindigkeit(float durch){
    34b8:	cf 92       	push	r12
    34ba:	df 92       	push	r13
    34bc:	ef 92       	push	r14
    34be:	ff 92       	push	r15
    34c0:	cf 93       	push	r28
    34c2:	df 93       	push	r29
	//uint16_t zaehlungen = (TCNT1H<<8) | (TCNT1L);
	uint16_t zaehlungen = TCNT1;
    34c4:	c0 91 84 00 	lds	r28, 0x0084
    34c8:	d0 91 85 00 	lds	r29, 0x0085
	//geschw = durch*M_PI/(REEDMS+((double)zaehlungen/zaehlungenprozeiteinheit)*zeitproachtzaehlungen);
	double umlaufzeit = (REEDMS/1000.0+(zaehlungen/zaehlungenprozeiteinheit)*zeitproachtzaehlungen);
	//geschw = umlaufzeit;
	geschw = (durch)*M_PI*3.6;
    34cc:	2b ed       	ldi	r18, 0xDB	; 219
    34ce:	3f e0       	ldi	r19, 0x0F	; 15
    34d0:	49 e4       	ldi	r20, 0x49	; 73
    34d2:	50 e4       	ldi	r21, 0x40	; 64
    34d4:	0e 94 d7 2a 	call	0x55ae	; 0x55ae <__mulsf3>
    34d8:	26 e6       	ldi	r18, 0x66	; 102
    34da:	36 e6       	ldi	r19, 0x66	; 102
    34dc:	46 e6       	ldi	r20, 0x66	; 102
    34de:	50 e4       	ldi	r21, 0x40	; 64
    34e0:	0e 94 d7 2a 	call	0x55ae	; 0x55ae <__mulsf3>
    34e4:	6b 01       	movw	r12, r22
    34e6:	7c 01       	movw	r14, r24
uint32_t Fahrtzeit;
void geschwindigkeit(float durch){
	//uint16_t zaehlungen = (TCNT1H<<8) | (TCNT1L);
	uint16_t zaehlungen = TCNT1;
	//geschw = durch*M_PI/(REEDMS+((double)zaehlungen/zaehlungenprozeiteinheit)*zeitproachtzaehlungen);
	double umlaufzeit = (REEDMS/1000.0+(zaehlungen/zaehlungenprozeiteinheit)*zeitproachtzaehlungen);
    34e8:	be 01       	movw	r22, r28
    34ea:	80 e0       	ldi	r24, 0x00	; 0
    34ec:	90 e0       	ldi	r25, 0x00	; 0
    34ee:	0e 94 77 29 	call	0x52ee	; 0x52ee <__floatunsisf>
    34f2:	20 e0       	ldi	r18, 0x00	; 0
    34f4:	30 e0       	ldi	r19, 0x00	; 0
    34f6:	40 e0       	ldi	r20, 0x00	; 0
    34f8:	5e e3       	ldi	r21, 0x3E	; 62
    34fa:	0e 94 d7 2a 	call	0x55ae	; 0x55ae <__mulsf3>
    34fe:	2d eb       	ldi	r18, 0xBD	; 189
    3500:	37 e3       	ldi	r19, 0x37	; 55
    3502:	46 e8       	ldi	r20, 0x86	; 134
    3504:	5a e3       	ldi	r21, 0x3A	; 58
    3506:	0e 94 d7 2a 	call	0x55ae	; 0x55ae <__mulsf3>
    350a:	2a e0       	ldi	r18, 0x0A	; 10
    350c:	37 ed       	ldi	r19, 0xD7	; 215
    350e:	43 ea       	ldi	r20, 0xA3	; 163
    3510:	5b e3       	ldi	r21, 0x3B	; 59
    3512:	0e 94 11 28 	call	0x5022	; 0x5022 <__addsf3>
    3516:	9b 01       	movw	r18, r22
    3518:	ac 01       	movw	r20, r24
	//geschw = umlaufzeit;
	geschw = (durch)*M_PI*3.6;
	geschw /= umlaufzeit;
    351a:	c7 01       	movw	r24, r14
    351c:	b6 01       	movw	r22, r12
    351e:	0e 94 de 28 	call	0x51bc	; 0x51bc <__divsf3>
    3522:	6b 01       	movw	r12, r22
    3524:	7c 01       	movw	r14, r24
	if (geschw >=160)
    3526:	20 e0       	ldi	r18, 0x00	; 0
    3528:	30 e0       	ldi	r19, 0x00	; 0
    352a:	40 e2       	ldi	r20, 0x20	; 32
    352c:	53 e4       	ldi	r21, 0x43	; 67
    352e:	0e 94 87 2a 	call	0x550e	; 0x550e <__gesf2>
    3532:	88 23       	and	r24, r24
    3534:	4c f4       	brge	.+18     	; 0x3548 <_Z15geschwindigkeitf+0x90>
	uint16_t zaehlungen = TCNT1;
	//geschw = durch*M_PI/(REEDMS+((double)zaehlungen/zaehlungenprozeiteinheit)*zeitproachtzaehlungen);
	double umlaufzeit = (REEDMS/1000.0+(zaehlungen/zaehlungenprozeiteinheit)*zeitproachtzaehlungen);
	//geschw = umlaufzeit;
	geschw = (durch)*M_PI*3.6;
	geschw /= umlaufzeit;
    3536:	c0 92 24 03 	sts	0x0324, r12
    353a:	d0 92 25 03 	sts	0x0325, r13
    353e:	e0 92 26 03 	sts	0x0326, r14
    3542:	f0 92 27 03 	sts	0x0327, r15
    3546:	08 c0       	rjmp	.+16     	; 0x3558 <_Z15geschwindigkeitf+0xa0>
	if (geschw >=160)
	{
		geschw=0;
    3548:	10 92 24 03 	sts	0x0324, r1
    354c:	10 92 25 03 	sts	0x0325, r1
    3550:	10 92 26 03 	sts	0x0326, r1
    3554:	10 92 27 03 	sts	0x0327, r1
	}
	//im kn/h *3.6
	//geschw*=3.6;
	//TCNT1H = 0;
	//TCNT1L = 0;
	TCNT1 = 0;
    3558:	10 92 85 00 	sts	0x0085, r1
    355c:	10 92 84 00 	sts	0x0084, r1
}
    3560:	df 91       	pop	r29
    3562:	cf 91       	pop	r28
    3564:	ff 90       	pop	r15
    3566:	ef 90       	pop	r14
    3568:	df 90       	pop	r13
    356a:	cf 90       	pop	r12
    356c:	08 95       	ret

0000356e <_Z13reed_debouncePVhh>:

uint8_t reed_debounce(volatile uint8_t *port, uint8_t pin)
{
	if ( !(*port & (1 << pin)) )
    356e:	fc 01       	movw	r30, r24
    3570:	20 81       	ld	r18, Z
    3572:	30 e0       	ldi	r19, 0x00	; 0
    3574:	06 2e       	mov	r0, r22
    3576:	02 c0       	rjmp	.+4      	; 0x357c <_Z13reed_debouncePVhh+0xe>
    3578:	35 95       	asr	r19
    357a:	27 95       	ror	r18
    357c:	0a 94       	dec	r0
    357e:	e2 f7       	brpl	.-8      	; 0x3578 <_Z13reed_debouncePVhh+0xa>
    3580:	20 fd       	sbrc	r18, 0
    3582:	17 c0       	rjmp	.+46     	; 0x35b2 <_Z13reed_debouncePVhh+0x44>
    3584:	ef e0       	ldi	r30, 0x0F	; 15
    3586:	f7 e2       	ldi	r31, 0x27	; 39
    3588:	31 97       	sbiw	r30, 0x01	; 1
    358a:	f1 f7       	brne	.-4      	; 0x3588 <_Z13reed_debouncePVhh+0x1a>
    358c:	00 c0       	rjmp	.+0      	; 0x358e <_Z13reed_debouncePVhh+0x20>
    358e:	00 00       	nop
	{
		/* Pin wurde auf Masse gezogen, ms warten   */
		//_delay_us(50);
		//_delay_us(50);
		_delay_ms(REEDMS);
		if ( (*port & (1 << pin)) )
    3590:	fc 01       	movw	r30, r24
    3592:	80 81       	ld	r24, Z
    3594:	90 e0       	ldi	r25, 0x00	; 0
    3596:	9c 01       	movw	r18, r24
    3598:	02 c0       	rjmp	.+4      	; 0x359e <_Z13reed_debouncePVhh+0x30>
    359a:	35 95       	asr	r19
    359c:	27 95       	ror	r18
    359e:	6a 95       	dec	r22
    35a0:	e2 f7       	brpl	.-8      	; 0x359a <_Z13reed_debouncePVhh+0x2c>
    35a2:	20 ff       	sbrs	r18, 0
    35a4:	08 c0       	rjmp	.+16     	; 0x35b6 <_Z13reed_debouncePVhh+0x48>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    35a6:	32 e0       	ldi	r19, 0x02	; 2
    35a8:	3a 95       	dec	r19
    35aa:	f1 f7       	brne	.-4      	; 0x35a8 <_Z13reed_debouncePVhh+0x3a>
    35ac:	00 c0       	rjmp	.+0      	; 0x35ae <_Z13reed_debouncePVhh+0x40>
		{
			/* Anwender Zeit zum Loslassen des Tasters geben */
			_delay_us(1);
			return 1;
    35ae:	81 e0       	ldi	r24, 0x01	; 1
    35b0:	08 95       	ret
		}
	}
	return 0;
    35b2:	80 e0       	ldi	r24, 0x00	; 0
    35b4:	08 95       	ret
    35b6:	80 e0       	ldi	r24, 0x00	; 0
}
    35b8:	08 95       	ret

000035ba <_Z15initialisierungv>:
    }
}

void initialisierung(){
	//nullen der Flagregister
	rtc.interupts=0;
    35ba:	10 92 91 07 	sts	0x0791, r1
	anzeige=0;
    35be:	10 92 2a 03 	sts	0x032A, r1
    35c2:	10 92 29 03 	sts	0x0329, r1
	pos=0;
    35c6:	10 92 28 03 	sts	0x0328, r1
	//initialisieren des Zaehler fuer die Winkelgeschw sowie den Timer
	geschw=0;
    35ca:	10 92 24 03 	sts	0x0324, r1
    35ce:	10 92 25 03 	sts	0x0325, r1
    35d2:	10 92 26 03 	sts	0x0326, r1
    35d6:	10 92 27 03 	sts	0x0327, r1
	strecke = 0;
    35da:	10 92 20 03 	sts	0x0320, r1
    35de:	10 92 21 03 	sts	0x0321, r1
    35e2:	10 92 22 03 	sts	0x0322, r1
    35e6:	10 92 23 03 	sts	0x0323, r1
	maxgeschw = 0;
    35ea:	10 92 1c 03 	sts	0x031C, r1
    35ee:	10 92 1d 03 	sts	0x031D, r1
    35f2:	10 92 1e 03 	sts	0x031E, r1
    35f6:	10 92 1f 03 	sts	0x031F, r1
	Fahrtzeit = 0;
    35fa:	10 92 18 03 	sts	0x0318, r1
    35fe:	10 92 19 03 	sts	0x0319, r1
    3602:	10 92 1a 03 	sts	0x031A, r1
    3606:	10 92 1b 03 	sts	0x031B, r1
	TCNT1=0;
    360a:	10 92 85 00 	sts	0x0085, r1
    360e:	10 92 84 00 	sts	0x0084, r1
	//Ausgaenge und Eingaenge einstellen
	DDRD = (1<<PIND0) | (1<<PIND1) | (1<<PIND2) | (1<<PIND3);	//Pins zur Ausgabe
    3612:	8f e0       	ldi	r24, 0x0F	; 15
    3614:	8a b9       	out	0x0a, r24	; 10
	DDRD &= ~((1<<PIND4) | (1<<PIND5) | (1<<PIND6));			//Restliche Pins als Eingaenge schalten
    3616:	8a b1       	in	r24, 0x0a	; 10
    3618:	8f 78       	andi	r24, 0x8F	; 143
    361a:	8a b9       	out	0x0a, r24	; 10
	//Eingang fuer den Reedkontak schalten mit internem Pullup
	DDRC &= ~((1<<PORTC3));
    361c:	3b 98       	cbi	0x07, 3	; 7
	PORTC |= (1<<PORTC3);
    361e:	43 9a       	sbi	0x08, 3	; 8
	//I2C Interface
	//twi_init();
	//Display
	oled.InitializeDisplay();
    3620:	82 e4       	ldi	r24, 0x42	; 66
    3622:	93 e0       	ldi	r25, 0x03	; 3
    3624:	0e 94 14 04 	call	0x828	; 0x828 <_ZN7Display17InitializeDisplayEv>
	//initialisierung wird im konstruktor vorgenommen
	oled.clearFrame();
    3628:	82 e4       	ldi	r24, 0x42	; 66
    362a:	93 e0       	ldi	r25, 0x03	; 3
    362c:	0e 94 ed 03 	call	0x7da	; 0x7da <_ZN7Display10clearFrameEv>
	//HMC5883L initialisieren
	//kompass.initialize_HMC5883L();
	//initialisierung wird im Konstruktor erledigt
	
	//ADC Initialisieren auf CH0
	ADMUX = (1<<REFS0);
    3630:	80 e4       	ldi	r24, 0x40	; 64
    3632:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA = (1<<ADPS1) | (1<<ADPS0);
    3636:	ea e7       	ldi	r30, 0x7A	; 122
    3638:	f0 e0       	ldi	r31, 0x00	; 0
    363a:	83 e0       	ldi	r24, 0x03	; 3
    363c:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADEN);
    363e:	80 81       	ld	r24, Z
    3640:	80 68       	ori	r24, 0x80	; 128
    3642:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);
    3644:	80 81       	ld	r24, Z
    3646:	80 64       	ori	r24, 0x40	; 64
    3648:	80 83       	st	Z, r24
	while (ADCSRA & (1<<ADSC) ) {
    364a:	80 81       	ld	r24, Z
    364c:	86 fd       	sbrc	r24, 6
    364e:	fd cf       	rjmp	.-6      	; 0x364a <_Z15initialisierungv+0x90>
	}
	(void) ADCW;
    3650:	80 91 78 00 	lds	r24, 0x0078
    3654:	90 91 79 00 	lds	r25, 0x0079
	//Wilkommensanzeige
	willkommenpage();
    3658:	0e 94 8e 0a 	call	0x151c	; 0x151c <_Z14willkommenpagev>
	//Uhreinstellungen
	//uhreinstellen();
	//*************************************************
	//Nur Test, damit es schneller geht beim Start
	rtc.dummyeinst();
    365c:	89 e7       	ldi	r24, 0x79	; 121
    365e:	97 e0       	ldi	r25, 0x07	; 7
    3660:	0e 94 be 27 	call	0x4f7c	; 0x4f7c <_ZN3RTC10dummyeinstEv>
	//*********************************
	rtc.RTCstart();
    3664:	89 e7       	ldi	r24, 0x79	; 121
    3666:	97 e0       	ldi	r25, 0x07	; 7
    3668:	0e 94 d4 27 	call	0x4fa8	; 0x4fa8 <_ZN3RTC8RTCstartEv>
	//ausgabe starten
	anzeige|=(1<<Uhrflag);
    366c:	80 91 29 03 	lds	r24, 0x0329
    3670:	90 91 2a 03 	lds	r25, 0x032A
    3674:	81 60       	ori	r24, 0x01	; 1
    3676:	90 93 2a 03 	sts	0x032A, r25
    367a:	80 93 29 03 	sts	0x0329, r24
	sei();
    367e:	78 94       	sei
    3680:	08 95       	ret

00003682 <_Z19maininterupthandlerv>:
	//interupt dierekt aus der rtc
	//if((rtc.interupts & (1<<hundinterupt))){
		//rtc.zeit();
		//rtc.interupts&=~(1<<hundinterupt);
	//}
	if ((anzeige&(1<<Fahradflag)))
    3682:	80 91 29 03 	lds	r24, 0x0329
    3686:	81 ff       	sbrs	r24, 1
    3688:	0d c0       	rjmp	.+26     	; 0x36a4 <_Z19maininterupthandlerv+0x22>
	{
		//debounce Funktion fuer den Reedswitch
		if (reed_debounce(&PINC,PINC3))
    368a:	63 e0       	ldi	r22, 0x03	; 3
    368c:	86 e2       	ldi	r24, 0x26	; 38
    368e:	90 e0       	ldi	r25, 0x00	; 0
    3690:	0e 94 b7 1a 	call	0x356e	; 0x356e <_Z13reed_debouncePVhh>
    3694:	88 23       	and	r24, r24
    3696:	31 f0       	breq	.+12     	; 0x36a4 <_Z19maininterupthandlerv+0x22>
		{
			//Durchmesser ist 28 Zoll
			geschwindigkeit(28.0*2.54/100.0);
    3698:	63 e3       	ldi	r22, 0x33	; 51
    369a:	71 e1       	ldi	r23, 0x11	; 17
    369c:	86 e3       	ldi	r24, 0x36	; 54
    369e:	9f e3       	ldi	r25, 0x3F	; 63
    36a0:	0e 94 5c 1a 	call	0x34b8	; 0x34b8 <_Z15geschwindigkeitf>
		}
	}
	if ((rtc.interupts&(1<<Weckeractiv)))
    36a4:	20 91 91 07 	lds	r18, 0x0791
    36a8:	82 2f       	mov	r24, r18
    36aa:	88 71       	andi	r24, 0x18	; 24
	{
		if ((rtc.interupts&(1<<Weckerein)))
    36ac:	88 31       	cpi	r24, 0x18	; 24
    36ae:	61 f4       	brne	.+24     	; 0x36c8 <_Z19maininterupthandlerv+0x46>
		{
			anzeige |= (1<<blinkflag) | (1<<refreshdisplay);
    36b0:	80 91 29 03 	lds	r24, 0x0329
    36b4:	90 91 2a 03 	lds	r25, 0x032A
    36b8:	90 6c       	ori	r25, 0xC0	; 192
    36ba:	90 93 2a 03 	sts	0x032A, r25
    36be:	80 93 29 03 	sts	0x0329, r24
			rtc.interupts &= ~(1<<Weckerein);
    36c2:	27 7f       	andi	r18, 0xF7	; 247
    36c4:	20 93 91 07 	sts	0x0791, r18
    36c8:	08 95       	ret

000036ca <_Z14anzeigehandlerv>:
		}
	}
}

void anzeigehandler(){
    36ca:	4f 92       	push	r4
    36cc:	5f 92       	push	r5
    36ce:	6f 92       	push	r6
    36d0:	7f 92       	push	r7
    36d2:	af 92       	push	r10
    36d4:	bf 92       	push	r11
    36d6:	cf 92       	push	r12
    36d8:	df 92       	push	r13
    36da:	ef 92       	push	r14
    36dc:	ff 92       	push	r15
    36de:	0f 93       	push	r16
    36e0:	1f 93       	push	r17
    36e2:	cf 93       	push	r28
    36e4:	df 93       	push	r29
	//Handler fuer 1Hz Flag
	if ((rtc.interupts & (1<<sekundeninterupt)))
    36e6:	80 91 91 07 	lds	r24, 0x0791
    36ea:	81 ff       	sbrs	r24, 1
    36ec:	85 c1       	rjmp	.+778    	; 0x39f8 <_Z14anzeigehandlerv+0x32e>
	{
		rtc.zeit();
    36ee:	89 e7       	ldi	r24, 0x79	; 121
    36f0:	97 e0       	ldi	r25, 0x07	; 7
    36f2:	0e 94 96 27 	call	0x4f2c	; 0x4f2c <_ZN3RTC4zeitEv>
		//Handler fuer die Anzeige der Seiten
		//Die einzelnen Funktionen beschreiben nur den Framebuffer und nicht dierekt das Display
		if ((anzeige&(1<<menueflag)) && (anzeige&(1<<Uhrflag)))
    36f6:	80 91 29 03 	lds	r24, 0x0329
    36fa:	90 91 2a 03 	lds	r25, 0x032A
    36fe:	9c 01       	movw	r18, r24
    3700:	21 70       	andi	r18, 0x01	; 1
    3702:	30 72       	andi	r19, 0x20	; 32
    3704:	21 30       	cpi	r18, 0x01	; 1
    3706:	30 42       	sbci	r19, 0x20	; 32
    3708:	61 f4       	brne	.+24     	; 0x3722 <_Z14anzeigehandlerv+0x58>
		{
			menue_uhr();
    370a:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <_Z9menue_uhrv>
			anzeige|=(1<<refreshdisplay);
    370e:	80 91 29 03 	lds	r24, 0x0329
    3712:	90 91 2a 03 	lds	r25, 0x032A
    3716:	90 68       	ori	r25, 0x80	; 128
    3718:	90 93 2a 03 	sts	0x032A, r25
    371c:	80 93 29 03 	sts	0x0329, r24
    3720:	51 c1       	rjmp	.+674    	; 0x39c4 <_Z14anzeigehandlerv+0x2fa>
    3722:	9c 01       	movw	r18, r24
    3724:	28 70       	andi	r18, 0x08	; 8
    3726:	30 72       	andi	r19, 0x20	; 32
		}
		else if ((anzeige&(1<<menueflag)) && (anzeige&(1<<Einstellungsflag)))
    3728:	28 30       	cpi	r18, 0x08	; 8
    372a:	30 42       	sbci	r19, 0x20	; 32
    372c:	61 f4       	brne	.+24     	; 0x3746 <_Z14anzeigehandlerv+0x7c>
		{
			menue_einst();
    372e:	0e 94 0b 0e 	call	0x1c16	; 0x1c16 <_Z11menue_einstv>
			anzeige|=(1<<refreshdisplay);
    3732:	80 91 29 03 	lds	r24, 0x0329
    3736:	90 91 2a 03 	lds	r25, 0x032A
    373a:	90 68       	ori	r25, 0x80	; 128
    373c:	90 93 2a 03 	sts	0x032A, r25
    3740:	80 93 29 03 	sts	0x0329, r24
    3744:	3f c1       	rjmp	.+638    	; 0x39c4 <_Z14anzeigehandlerv+0x2fa>
		}
		else if ((anzeige&(1<<menueflag)))
    3746:	95 ff       	sbrs	r25, 5
    3748:	0c c0       	rjmp	.+24     	; 0x3762 <_Z14anzeigehandlerv+0x98>
		{
			menue_haupt();
    374a:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <_Z11menue_hauptv>
			anzeige|=(1<<refreshdisplay);
    374e:	80 91 29 03 	lds	r24, 0x0329
    3752:	90 91 2a 03 	lds	r25, 0x032A
    3756:	90 68       	ori	r25, 0x80	; 128
    3758:	90 93 2a 03 	sts	0x032A, r25
    375c:	80 93 29 03 	sts	0x0329, r24
    3760:	31 c1       	rjmp	.+610    	; 0x39c4 <_Z14anzeigehandlerv+0x2fa>
		}
		else if ((anzeige&(1<<Kompasgaineinstellenflag)))
    3762:	85 ff       	sbrs	r24, 5
    3764:	0c c0       	rjmp	.+24     	; 0x377e <_Z14anzeigehandlerv+0xb4>
		{
			Gaineinstellen();
    3766:	0e 94 62 12 	call	0x24c4	; 0x24c4 <_Z14Gaineinstellenv>
			anzeige|=(1<<refreshdisplay);
    376a:	80 91 29 03 	lds	r24, 0x0329
    376e:	90 91 2a 03 	lds	r25, 0x032A
    3772:	90 68       	ori	r25, 0x80	; 128
    3774:	90 93 2a 03 	sts	0x032A, r25
    3778:	80 93 29 03 	sts	0x0329, r24
    377c:	23 c1       	rjmp	.+582    	; 0x39c4 <_Z14anzeigehandlerv+0x2fa>
		}
		else if ((anzeige&(1<<Uhrflag)))
    377e:	80 ff       	sbrs	r24, 0
    3780:	0c c0       	rjmp	.+24     	; 0x379a <_Z14anzeigehandlerv+0xd0>
		{
			uhranzeigen();
    3782:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <_Z11uhranzeigenv>
			anzeige|=(1<<refreshdisplay);
    3786:	80 91 29 03 	lds	r24, 0x0329
    378a:	90 91 2a 03 	lds	r25, 0x032A
    378e:	90 68       	ori	r25, 0x80	; 128
    3790:	90 93 2a 03 	sts	0x032A, r25
    3794:	80 93 29 03 	sts	0x0329, r24
    3798:	15 c1       	rjmp	.+554    	; 0x39c4 <_Z14anzeigehandlerv+0x2fa>
		}
		else if ((anzeige&(1<<Kompasflag)))
    379a:	82 ff       	sbrs	r24, 2
    379c:	10 c0       	rjmp	.+32     	; 0x37be <_Z14anzeigehandlerv+0xf4>
		{
			anzeige_kompass(kompass.angle());
    379e:	84 e9       	ldi	r24, 0x94	; 148
    37a0:	97 e0       	ldi	r25, 0x07	; 7
    37a2:	0e 94 7d 23 	call	0x46fa	; 0x46fa <_ZN7Kompass5angleEv>
    37a6:	0e 94 48 13 	call	0x2690	; 0x2690 <_Z15anzeige_kompassd>
			anzeige|=(1<<refreshdisplay);
    37aa:	80 91 29 03 	lds	r24, 0x0329
    37ae:	90 91 2a 03 	lds	r25, 0x032A
    37b2:	90 68       	ori	r25, 0x80	; 128
    37b4:	90 93 2a 03 	sts	0x032A, r25
    37b8:	80 93 29 03 	sts	0x0329, r24
    37bc:	03 c1       	rjmp	.+518    	; 0x39c4 <_Z14anzeigehandlerv+0x2fa>
		}
		else if ((anzeige&(1<<Fahradflag)))
    37be:	81 ff       	sbrs	r24, 1
    37c0:	96 c0       	rjmp	.+300    	; 0x38ee <_Z14anzeigehandlerv+0x224>
		{
			//fahradschirm(12.3,kompass.angle());
			if (geschw>maxgeschw)
    37c2:	40 90 24 03 	lds	r4, 0x0324
    37c6:	50 90 25 03 	lds	r5, 0x0325
    37ca:	60 90 26 03 	lds	r6, 0x0326
    37ce:	70 90 27 03 	lds	r7, 0x0327
    37d2:	20 91 1c 03 	lds	r18, 0x031C
    37d6:	30 91 1d 03 	lds	r19, 0x031D
    37da:	40 91 1e 03 	lds	r20, 0x031E
    37de:	50 91 1f 03 	lds	r21, 0x031F
    37e2:	c3 01       	movw	r24, r6
    37e4:	b2 01       	movw	r22, r4
    37e6:	0e 94 87 2a 	call	0x550e	; 0x550e <__gesf2>
    37ea:	18 16       	cp	r1, r24
    37ec:	44 f4       	brge	.+16     	; 0x37fe <_Z14anzeigehandlerv+0x134>
			{
				maxgeschw=geschw;
    37ee:	40 92 1c 03 	sts	0x031C, r4
    37f2:	50 92 1d 03 	sts	0x031D, r5
    37f6:	60 92 1e 03 	sts	0x031E, r6
    37fa:	70 92 1f 03 	sts	0x031F, r7
			}
			if (geschw != 0)
    37fe:	20 e0       	ldi	r18, 0x00	; 0
    3800:	30 e0       	ldi	r19, 0x00	; 0
    3802:	a9 01       	movw	r20, r18
    3804:	c3 01       	movw	r24, r6
    3806:	b2 01       	movw	r22, r4
    3808:	0e 94 d7 28 	call	0x51ae	; 0x51ae <__cmpsf2>
    380c:	88 23       	and	r24, r24
    380e:	99 f0       	breq	.+38     	; 0x3836 <_Z14anzeigehandlerv+0x16c>
			{
				Fahrtzeit++;
    3810:	80 91 18 03 	lds	r24, 0x0318
    3814:	90 91 19 03 	lds	r25, 0x0319
    3818:	a0 91 1a 03 	lds	r26, 0x031A
    381c:	b0 91 1b 03 	lds	r27, 0x031B
    3820:	01 96       	adiw	r24, 0x01	; 1
    3822:	a1 1d       	adc	r26, r1
    3824:	b1 1d       	adc	r27, r1
    3826:	80 93 18 03 	sts	0x0318, r24
    382a:	90 93 19 03 	sts	0x0319, r25
    382e:	a0 93 1a 03 	sts	0x031A, r26
    3832:	b0 93 1b 03 	sts	0x031B, r27
			}
			strecke+=geschw/3.6;
    3836:	26 e6       	ldi	r18, 0x66	; 102
    3838:	36 e6       	ldi	r19, 0x66	; 102
    383a:	46 e6       	ldi	r20, 0x66	; 102
    383c:	50 e4       	ldi	r21, 0x40	; 64
    383e:	c3 01       	movw	r24, r6
    3840:	b2 01       	movw	r22, r4
    3842:	0e 94 de 28 	call	0x51bc	; 0x51bc <__divsf3>
    3846:	20 91 20 03 	lds	r18, 0x0320
    384a:	30 91 21 03 	lds	r19, 0x0321
    384e:	40 91 22 03 	lds	r20, 0x0322
    3852:	50 91 23 03 	lds	r21, 0x0323
    3856:	0e 94 11 28 	call	0x5022	; 0x5022 <__addsf3>
    385a:	2b 01       	movw	r4, r22
    385c:	3c 01       	movw	r6, r24
    385e:	60 93 20 03 	sts	0x0320, r22
    3862:	70 93 21 03 	sts	0x0321, r23
    3866:	80 93 22 03 	sts	0x0322, r24
    386a:	90 93 23 03 	sts	0x0323, r25
			fahradschirm(geschw,kompass.angle(),strecke,maxgeschw, Fahrtzeit);
    386e:	c0 91 18 03 	lds	r28, 0x0318
    3872:	d0 91 19 03 	lds	r29, 0x0319
    3876:	10 91 1a 03 	lds	r17, 0x031A
    387a:	00 91 1b 03 	lds	r16, 0x031B
    387e:	a0 90 1c 03 	lds	r10, 0x031C
    3882:	b0 90 1d 03 	lds	r11, 0x031D
    3886:	c0 90 1e 03 	lds	r12, 0x031E
    388a:	d0 90 1f 03 	lds	r13, 0x031F
    388e:	84 e9       	ldi	r24, 0x94	; 148
    3890:	97 e0       	ldi	r25, 0x07	; 7
    3892:	0e 94 7d 23 	call	0x46fa	; 0x46fa <_ZN7Kompass5angleEv>
    3896:	9b 01       	movw	r18, r22
    3898:	ac 01       	movw	r20, r24
    389a:	60 91 24 03 	lds	r22, 0x0324
    389e:	70 91 25 03 	lds	r23, 0x0325
    38a2:	80 91 26 03 	lds	r24, 0x0326
    38a6:	90 91 27 03 	lds	r25, 0x0327
    38aa:	0f 93       	push	r16
    38ac:	1f 93       	push	r17
    38ae:	df 93       	push	r29
    38b0:	cf 93       	push	r28
    38b2:	83 01       	movw	r16, r6
    38b4:	72 01       	movw	r14, r4
    38b6:	0e 94 ff 10 	call	0x21fe	; 0x21fe <_Z12fahradschirmddddm>
			if (rtc.Sekunden%2)
    38ba:	80 91 8b 07 	lds	r24, 0x078B
    38be:	0f 90       	pop	r0
    38c0:	0f 90       	pop	r0
    38c2:	0f 90       	pop	r0
    38c4:	0f 90       	pop	r0
    38c6:	80 ff       	sbrs	r24, 0
    38c8:	08 c0       	rjmp	.+16     	; 0x38da <_Z14anzeigehandlerv+0x210>
			{
				geschw=0;
    38ca:	10 92 24 03 	sts	0x0324, r1
    38ce:	10 92 25 03 	sts	0x0325, r1
    38d2:	10 92 26 03 	sts	0x0326, r1
    38d6:	10 92 27 03 	sts	0x0327, r1
			}
			anzeige|=(1<<refreshdisplay);
    38da:	80 91 29 03 	lds	r24, 0x0329
    38de:	90 91 2a 03 	lds	r25, 0x032A
    38e2:	90 68       	ori	r25, 0x80	; 128
    38e4:	90 93 2a 03 	sts	0x032A, r25
    38e8:	80 93 29 03 	sts	0x0329, r24
    38ec:	6b c0       	rjmp	.+214    	; 0x39c4 <_Z14anzeigehandlerv+0x2fa>
    38ee:	9c 01       	movw	r18, r24
    38f0:	28 74       	andi	r18, 0x48	; 72
    38f2:	33 27       	eor	r19, r19
		}
		else if ((anzeige&(1<<Einstellungsflag)) && (anzeige&(1<<Timerflag)))
    38f4:	28 34       	cpi	r18, 0x48	; 72
    38f6:	31 05       	cpc	r19, r1
    38f8:	61 f4       	brne	.+24     	; 0x3912 <_Z14anzeigehandlerv+0x248>
		{
			timerseite();
    38fa:	0e 94 5c 14 	call	0x28b8	; 0x28b8 <_Z10timerseitev>
			anzeige|=(1<<refreshdisplay);
    38fe:	80 91 29 03 	lds	r24, 0x0329
    3902:	90 91 2a 03 	lds	r25, 0x032A
    3906:	90 68       	ori	r25, 0x80	; 128
    3908:	90 93 2a 03 	sts	0x032A, r25
    390c:	80 93 29 03 	sts	0x0329, r24
    3910:	59 c0       	rjmp	.+178    	; 0x39c4 <_Z14anzeigehandlerv+0x2fa>
		}
		else if ((anzeige&(1<<Stoppuhrflag)))
    3912:	87 ff       	sbrs	r24, 7
    3914:	17 c0       	rjmp	.+46     	; 0x3944 <_Z14anzeigehandlerv+0x27a>
		{
			if ((anzeige&(1<<Einstellungsflag)))
    3916:	83 ff       	sbrs	r24, 3
    3918:	09 c0       	rjmp	.+18     	; 0x392c <_Z14anzeigehandlerv+0x262>
			{
				stoppuhr.Sekunden++;
    391a:	e5 e5       	ldi	r30, 0x55	; 85
    391c:	f7 e0       	ldi	r31, 0x07	; 7
    391e:	80 81       	ld	r24, Z
    3920:	8f 5f       	subi	r24, 0xFF	; 255
    3922:	80 83       	st	Z, r24
				stoppuhr.zeit();
    3924:	83 e4       	ldi	r24, 0x43	; 67
    3926:	97 e0       	ldi	r25, 0x07	; 7
    3928:	0e 94 96 27 	call	0x4f2c	; 0x4f2c <_ZN3RTC4zeitEv>
			}
			Stoppuhrseite();
    392c:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <_Z13Stoppuhrseitev>
			anzeige|=(1<<refreshdisplay);
    3930:	80 91 29 03 	lds	r24, 0x0329
    3934:	90 91 2a 03 	lds	r25, 0x032A
    3938:	90 68       	ori	r25, 0x80	; 128
    393a:	90 93 2a 03 	sts	0x032A, r25
    393e:	80 93 29 03 	sts	0x0329, r24
    3942:	40 c0       	rjmp	.+128    	; 0x39c4 <_Z14anzeigehandlerv+0x2fa>
		}
		else if ((anzeige&(1<<Timerflag)))
    3944:	86 ff       	sbrs	r24, 6
    3946:	20 c0       	rjmp	.+64     	; 0x3988 <_Z14anzeigehandlerv+0x2be>
		{
			zaehler.Sekunden--;
    3948:	e0 e7       	ldi	r30, 0x70	; 112
    394a:	f7 e0       	ldi	r31, 0x07	; 7
    394c:	80 81       	ld	r24, Z
    394e:	81 50       	subi	r24, 0x01	; 1
    3950:	80 83       	st	Z, r24
			if(zaehler.timer()){
    3952:	8e e5       	ldi	r24, 0x5E	; 94
    3954:	97 e0       	ldi	r25, 0x07	; 7
    3956:	0e 94 f3 27 	call	0x4fe6	; 0x4fe6 <_ZN3RTC5timerEv>
    395a:	88 23       	and	r24, r24
    395c:	49 f0       	breq	.+18     	; 0x3970 <_Z14anzeigehandlerv+0x2a6>
				anzeige|=(1<<blinkflag);
    395e:	80 91 29 03 	lds	r24, 0x0329
    3962:	90 91 2a 03 	lds	r25, 0x032A
    3966:	90 64       	ori	r25, 0x40	; 64
    3968:	90 93 2a 03 	sts	0x032A, r25
    396c:	80 93 29 03 	sts	0x0329, r24
			}
			timerseite();
    3970:	0e 94 5c 14 	call	0x28b8	; 0x28b8 <_Z10timerseitev>
			anzeige|=(1<<refreshdisplay);
    3974:	80 91 29 03 	lds	r24, 0x0329
    3978:	90 91 2a 03 	lds	r25, 0x032A
    397c:	90 68       	ori	r25, 0x80	; 128
    397e:	90 93 2a 03 	sts	0x032A, r25
    3982:	80 93 29 03 	sts	0x0329, r24
    3986:	1e c0       	rjmp	.+60     	; 0x39c4 <_Z14anzeigehandlerv+0x2fa>
		}
		else if ((anzeige&(1<<Druckflag)))
    3988:	91 ff       	sbrs	r25, 1
    398a:	0c c0       	rjmp	.+24     	; 0x39a4 <_Z14anzeigehandlerv+0x2da>
		{
			Pressuresensor();
    398c:	0e 94 7b 15 	call	0x2af6	; 0x2af6 <_Z14Pressuresensorv>
			anzeige |= (1<<refreshdisplay);
    3990:	80 91 29 03 	lds	r24, 0x0329
    3994:	90 91 2a 03 	lds	r25, 0x032A
    3998:	90 68       	ori	r25, 0x80	; 128
    399a:	90 93 2a 03 	sts	0x032A, r25
    399e:	80 93 29 03 	sts	0x0329, r24
    39a2:	10 c0       	rjmp	.+32     	; 0x39c4 <_Z14anzeigehandlerv+0x2fa>
    39a4:	88 70       	andi	r24, 0x08	; 8
    39a6:	98 70       	andi	r25, 0x08	; 8
		}
		else if ((anzeige&(1<<Weckeranzeigeflag))&&(anzeige&(1<<Einstellungsflag)))
    39a8:	88 30       	cpi	r24, 0x08	; 8
    39aa:	98 40       	sbci	r25, 0x08	; 8
    39ac:	59 f4       	brne	.+22     	; 0x39c4 <_Z14anzeigehandlerv+0x2fa>
		{
			Weckeranzeige();
    39ae:	0e 94 6d 10 	call	0x20da	; 0x20da <_Z13Weckeranzeigev>
			anzeige|=(1<<refreshdisplay);
    39b2:	80 91 29 03 	lds	r24, 0x0329
    39b6:	90 91 2a 03 	lds	r25, 0x032A
    39ba:	90 68       	ori	r25, 0x80	; 128
    39bc:	90 93 2a 03 	sts	0x032A, r25
    39c0:	80 93 29 03 	sts	0x0329, r24
		}
		if ((anzeige&(1<<blinkflag)))
    39c4:	80 91 29 03 	lds	r24, 0x0329
    39c8:	90 91 2a 03 	lds	r25, 0x032A
    39cc:	96 ff       	sbrs	r25, 6
    39ce:	0f c0       	rjmp	.+30     	; 0x39ee <_Z14anzeigehandlerv+0x324>
		{
			oled.invert(rtc.Sekunden%2);
    39d0:	60 91 8b 07 	lds	r22, 0x078B
    39d4:	61 70       	andi	r22, 0x01	; 1
    39d6:	82 e4       	ldi	r24, 0x42	; 66
    39d8:	93 e0       	ldi	r25, 0x03	; 3
    39da:	0e 94 89 04 	call	0x912	; 0x912 <_ZN7Display6invertEh>
			LED.toggle();
    39de:	8f e3       	ldi	r24, 0x3F	; 63
    39e0:	93 e0       	ldi	r25, 0x03	; 3
    39e2:	0e 94 d5 24 	call	0x49aa	; 0x49aa <_ZN6Output6toggleEv>
			Vibrationsmotor.on();
    39e6:	8d e3       	ldi	r24, 0x3D	; 61
    39e8:	93 e0       	ldi	r25, 0x03	; 3
    39ea:	0e 94 3a 24 	call	0x4874	; 0x4874 <_ZN6Output2onEv>
		}
		rtc.interupts&=~(1<<sekundeninterupt);
    39ee:	e1 e9       	ldi	r30, 0x91	; 145
    39f0:	f7 e0       	ldi	r31, 0x07	; 7
    39f2:	80 81       	ld	r24, Z
    39f4:	8d 7f       	andi	r24, 0xFD	; 253
    39f6:	80 83       	st	Z, r24
	}
	//Minuteninterrupt
	if ((rtc.interupts&(1<<minuteninterupt)))
    39f8:	80 91 91 07 	lds	r24, 0x0791
    39fc:	82 ff       	sbrs	r24, 2
    39fe:	24 c0       	rjmp	.+72     	; 0x3a48 <_Z14anzeigehandlerv+0x37e>
	{
		if ((anzeige&(1<<Uhrflaggross)))
    3a00:	80 91 29 03 	lds	r24, 0x0329
    3a04:	90 91 2a 03 	lds	r25, 0x032A
    3a08:	92 ff       	sbrs	r25, 2
    3a0a:	0c c0       	rjmp	.+24     	; 0x3a24 <_Z14anzeigehandlerv+0x35a>
		{
			uhranzeigenmin();
    3a0c:	0e 94 14 10 	call	0x2028	; 0x2028 <_Z14uhranzeigenminv>
			anzeige|=(1<<refreshdisplay);
    3a10:	80 91 29 03 	lds	r24, 0x0329
    3a14:	90 91 2a 03 	lds	r25, 0x032A
    3a18:	90 68       	ori	r25, 0x80	; 128
    3a1a:	90 93 2a 03 	sts	0x032A, r25
    3a1e:	80 93 29 03 	sts	0x0329, r24
    3a22:	0d c0       	rjmp	.+26     	; 0x3a3e <_Z14anzeigehandlerv+0x374>
		}
		else if ((anzeige&(1<<Weckeranzeigeflag)))
    3a24:	93 ff       	sbrs	r25, 3
    3a26:	0b c0       	rjmp	.+22     	; 0x3a3e <_Z14anzeigehandlerv+0x374>
		{
			Weckeranzeige();
    3a28:	0e 94 6d 10 	call	0x20da	; 0x20da <_Z13Weckeranzeigev>
			anzeige|=(1<<refreshdisplay);
    3a2c:	80 91 29 03 	lds	r24, 0x0329
    3a30:	90 91 2a 03 	lds	r25, 0x032A
    3a34:	90 68       	ori	r25, 0x80	; 128
    3a36:	90 93 2a 03 	sts	0x032A, r25
    3a3a:	80 93 29 03 	sts	0x0329, r24
		}
		rtc.interupts&=~(1<<minuteninterupt);
    3a3e:	e1 e9       	ldi	r30, 0x91	; 145
    3a40:	f7 e0       	ldi	r31, 0x07	; 7
    3a42:	80 81       	ld	r24, Z
    3a44:	8b 7f       	andi	r24, 0xFB	; 251
    3a46:	80 83       	st	Z, r24
	}
	//neuen Framebuffer an das Dispay senden
	if ((anzeige&(1<<refreshdisplay)))
    3a48:	80 91 29 03 	lds	r24, 0x0329
    3a4c:	90 91 2a 03 	lds	r25, 0x032A
    3a50:	99 23       	and	r25, r25
    3a52:	6c f4       	brge	.+26     	; 0x3a6e <_Z14anzeigehandlerv+0x3a4>
	{
		oled.sendFrame();
    3a54:	82 e4       	ldi	r24, 0x42	; 66
    3a56:	93 e0       	ldi	r25, 0x03	; 3
    3a58:	0e 94 93 04 	call	0x926	; 0x926 <_ZN7Display9sendFrameEv>
		anzeige&=~(1<<refreshdisplay);
    3a5c:	80 91 29 03 	lds	r24, 0x0329
    3a60:	90 91 2a 03 	lds	r25, 0x032A
    3a64:	9f 77       	andi	r25, 0x7F	; 127
    3a66:	90 93 2a 03 	sts	0x032A, r25
    3a6a:	80 93 29 03 	sts	0x0329, r24
	}
}
    3a6e:	df 91       	pop	r29
    3a70:	cf 91       	pop	r28
    3a72:	1f 91       	pop	r17
    3a74:	0f 91       	pop	r16
    3a76:	ff 90       	pop	r15
    3a78:	ef 90       	pop	r14
    3a7a:	df 90       	pop	r13
    3a7c:	cf 90       	pop	r12
    3a7e:	bf 90       	pop	r11
    3a80:	af 90       	pop	r10
    3a82:	7f 90       	pop	r7
    3a84:	6f 90       	pop	r6
    3a86:	5f 90       	pop	r5
    3a88:	4f 90       	pop	r4
    3a8a:	08 95       	ret

00003a8c <_Z14eingabehandlerh>:

void eingabehandler(uint8_t taste){
	if (taste!='A')
    3a8c:	81 34       	cpi	r24, 0x41	; 65
    3a8e:	09 f4       	brne	.+2      	; 0x3a92 <_Z14eingabehandlerh+0x6>
    3a90:	d5 c3       	rjmp	.+1962   	; 0x423c <_Z14eingabehandlerh+0x7b0>
	{
		rtc.interupts |= (1<<sekundeninterupt);
    3a92:	e1 e9       	ldi	r30, 0x91	; 145
    3a94:	f7 e0       	ldi	r31, 0x07	; 7
    3a96:	90 81       	ld	r25, Z
    3a98:	29 2f       	mov	r18, r25
    3a9a:	22 60       	ori	r18, 0x02	; 2
    3a9c:	20 83       	st	Z, r18
		if (anzeige==255)
    3a9e:	20 91 29 03 	lds	r18, 0x0329
    3aa2:	30 91 2a 03 	lds	r19, 0x032A
    3aa6:	2f 3f       	cpi	r18, 0xFF	; 255
    3aa8:	31 05       	cpc	r19, r1
    3aaa:	61 f4       	brne	.+24     	; 0x3ac4 <_Z14eingabehandlerh+0x38>
		{
			oled.ssd1306_command(SSD1306_DISPLAYON);
    3aac:	6f ea       	ldi	r22, 0xAF	; 175
    3aae:	82 e4       	ldi	r24, 0x42	; 66
    3ab0:	93 e0       	ldi	r25, 0x03	; 3
    3ab2:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <_ZN7Display15ssd1306_commandEh>
			//entweder display aus oder das Menue starten
			anzeige=(1<<menueflag);
    3ab6:	80 e0       	ldi	r24, 0x00	; 0
    3ab8:	90 e2       	ldi	r25, 0x20	; 32
    3aba:	90 93 2a 03 	sts	0x032A, r25
    3abe:	80 93 29 03 	sts	0x0329, r24
    3ac2:	08 95       	ret
    3ac4:	a9 01       	movw	r20, r18
    3ac6:	41 70       	andi	r20, 0x01	; 1
    3ac8:	50 72       	andi	r21, 0x20	; 32
		}
		//gleicher Handler wie oben, aber hier speziell fuer die Bearbeitung von Tastereingaben mit switch fuer die Tasten
		//es sind einfach so viele Tasten moeglich 
		else if ((anzeige&(1<<menueflag)) && (anzeige&(1<<Uhrflag)))	//Menue der Uhr
    3aca:	41 30       	cpi	r20, 0x01	; 1
    3acc:	50 42       	sbci	r21, 0x20	; 32
    3ace:	09 f0       	breq	.+2      	; 0x3ad2 <_Z14eingabehandlerh+0x46>
    3ad0:	5a c0       	rjmp	.+180    	; 0x3b86 <_Z14eingabehandlerh+0xfa>
		{	
			anzeige&=~((1<<menueflag)|(1<<Uhrflag));
    3ad2:	2e 7f       	andi	r18, 0xFE	; 254
    3ad4:	3f 7d       	andi	r19, 0xDF	; 223
    3ad6:	30 93 2a 03 	sts	0x032A, r19
    3ada:	20 93 29 03 	sts	0x0329, r18
			switch (taste)
    3ade:	83 33       	cpi	r24, 0x33	; 51
    3ae0:	f9 f0       	breq	.+62     	; 0x3b20 <_Z14eingabehandlerh+0x94>
    3ae2:	28 f4       	brcc	.+10     	; 0x3aee <_Z14eingabehandlerh+0x62>
    3ae4:	81 33       	cpi	r24, 0x31	; 49
    3ae6:	49 f0       	breq	.+18     	; 0x3afa <_Z14eingabehandlerh+0x6e>
    3ae8:	82 33       	cpi	r24, 0x32	; 50
    3aea:	69 f0       	breq	.+26     	; 0x3b06 <_Z14eingabehandlerh+0x7a>
    3aec:	45 c0       	rjmp	.+138    	; 0x3b78 <_Z14eingabehandlerh+0xec>
    3aee:	85 33       	cpi	r24, 0x35	; 53
    3af0:	89 f1       	breq	.+98     	; 0x3b54 <_Z14eingabehandlerh+0xc8>
    3af2:	10 f1       	brcs	.+68     	; 0x3b38 <_Z14eingabehandlerh+0xac>
    3af4:	86 33       	cpi	r24, 0x36	; 54
    3af6:	b9 f1       	breq	.+110    	; 0x3b66 <_Z14eingabehandlerh+0xda>
    3af8:	3f c0       	rjmp	.+126    	; 0x3b78 <_Z14eingabehandlerh+0xec>
			{
				case '1':
					//Wechseln auf die Uhr
					anzeige|=(1<<Uhrflag);
    3afa:	21 60       	ori	r18, 0x01	; 1
    3afc:	30 93 2a 03 	sts	0x032A, r19
    3b00:	20 93 29 03 	sts	0x0329, r18
					break;
    3b04:	08 95       	ret
				
				case '2':
					//starten der Stoppuhr APP
					stoppuhr.Sekunden=0;
    3b06:	10 92 55 07 	sts	0x0755, r1
					stoppuhr.Minuten=0;
    3b0a:	10 92 54 07 	sts	0x0754, r1
					stoppuhr.Stunden=0;
    3b0e:	10 92 53 07 	sts	0x0753, r1
					anzeige|=(1<<refreshdisplay) | (1<<Stoppuhrflag);
    3b12:	20 68       	ori	r18, 0x80	; 128
    3b14:	30 68       	ori	r19, 0x80	; 128
    3b16:	30 93 2a 03 	sts	0x032A, r19
    3b1a:	20 93 29 03 	sts	0x0329, r18
					break;
    3b1e:	08 95       	ret
				
				case '3':
					//Starten der Timer APP
					zaehler.Sekunden=0;
    3b20:	10 92 70 07 	sts	0x0770, r1
					zaehler.Minuten=0;
    3b24:	10 92 6f 07 	sts	0x076F, r1
					zaehler.Stunden=0;
    3b28:	10 92 6e 07 	sts	0x076E, r1
					
					anzeige|=(1<<Timerflag) | (1<<Einstellungsflag);
    3b2c:	28 64       	ori	r18, 0x48	; 72
    3b2e:	30 93 2a 03 	sts	0x032A, r19
    3b32:	20 93 29 03 	sts	0x0329, r18
					break;
    3b36:	08 95       	ret
				
				case '4':
					//Starten der Alarmapp, momentan nicht implementiert
					oled.clearFrame();
    3b38:	82 e4       	ldi	r24, 0x42	; 66
    3b3a:	93 e0       	ldi	r25, 0x03	; 3
    3b3c:	0e 94 ed 03 	call	0x7da	; 0x7da <_ZN7Display10clearFrameEv>
					anzeige|=(1<<refreshdisplay);
    3b40:	80 91 29 03 	lds	r24, 0x0329
    3b44:	90 91 2a 03 	lds	r25, 0x032A
    3b48:	90 68       	ori	r25, 0x80	; 128
    3b4a:	90 93 2a 03 	sts	0x032A, r25
    3b4e:	80 93 29 03 	sts	0x0329, r24
					break;
    3b52:	08 95       	ret
				
				case '5':
					//Wechseln auf grosse Uhr
					rtc.interupts |=(1<<minuteninterupt);
    3b54:	96 60       	ori	r25, 0x06	; 6
    3b56:	90 93 91 07 	sts	0x0791, r25
					anzeige |=(1<<Uhrflaggross) | (1<<refreshdisplay);	
    3b5a:	34 68       	ori	r19, 0x84	; 132
    3b5c:	30 93 2a 03 	sts	0x032A, r19
    3b60:	20 93 29 03 	sts	0x0329, r18
					break;
    3b64:	08 95       	ret
				case '6':
					rtc.interupts |=(1<<minuteninterupt);
    3b66:	96 60       	ori	r25, 0x06	; 6
    3b68:	90 93 91 07 	sts	0x0791, r25
					anzeige |= (1<<Weckeranzeigeflag);
    3b6c:	38 60       	ori	r19, 0x08	; 8
    3b6e:	30 93 2a 03 	sts	0x032A, r19
    3b72:	20 93 29 03 	sts	0x0329, r18
					break;
    3b76:	08 95       	ret
				default:
					//menueflag erneu setzen
					anzeige|=(1<<menueflag)|(1<<Uhrflag);
    3b78:	21 60       	ori	r18, 0x01	; 1
    3b7a:	30 62       	ori	r19, 0x20	; 32
    3b7c:	30 93 2a 03 	sts	0x032A, r19
    3b80:	20 93 29 03 	sts	0x0329, r18
					break;
    3b84:	31 c3       	rjmp	.+1634   	; 0x41e8 <_Z14eingabehandlerh+0x75c>
    3b86:	a9 01       	movw	r20, r18
    3b88:	48 70       	andi	r20, 0x08	; 8
    3b8a:	50 72       	andi	r21, 0x20	; 32
			}
		}
		else if ((anzeige&(1<<menueflag)) && (anzeige&(1<<Einstellungsflag)))	//Menue der Einstellungen
    3b8c:	48 30       	cpi	r20, 0x08	; 8
    3b8e:	50 42       	sbci	r21, 0x20	; 32
    3b90:	09 f0       	breq	.+2      	; 0x3b94 <_Z14eingabehandlerh+0x108>
    3b92:	3f c0       	rjmp	.+126    	; 0x3c12 <_Z14eingabehandlerh+0x186>
		{
			anzeige&=~((1<<menueflag)|(1<<Einstellungsflag));
    3b94:	27 7f       	andi	r18, 0xF7	; 247
    3b96:	3f 7d       	andi	r19, 0xDF	; 223
    3b98:	30 93 2a 03 	sts	0x032A, r19
    3b9c:	20 93 29 03 	sts	0x0329, r18
			switch (taste)
    3ba0:	82 33       	cpi	r24, 0x32	; 50
    3ba2:	b9 f0       	breq	.+46     	; 0x3bd2 <_Z14eingabehandlerh+0x146>
    3ba4:	18 f4       	brcc	.+6      	; 0x3bac <_Z14eingabehandlerh+0x120>
    3ba6:	81 33       	cpi	r24, 0x31	; 49
    3ba8:	31 f0       	breq	.+12     	; 0x3bb6 <_Z14eingabehandlerh+0x12a>
    3baa:	2c c0       	rjmp	.+88     	; 0x3c04 <_Z14eingabehandlerh+0x178>
    3bac:	83 33       	cpi	r24, 0x33	; 51
    3bae:	b9 f0       	breq	.+46     	; 0x3bde <_Z14eingabehandlerh+0x152>
    3bb0:	84 33       	cpi	r24, 0x34	; 52
    3bb2:	09 f1       	breq	.+66     	; 0x3bf6 <_Z14eingabehandlerh+0x16a>
    3bb4:	27 c0       	rjmp	.+78     	; 0x3c04 <_Z14eingabehandlerh+0x178>
			{
				case '1':
					//zuruecksetzen der Kalibrierung, da passive Kallibrierung eingebaut
					kompass.kallibrierung_ruecksetzen();
    3bb6:	84 e9       	ldi	r24, 0x94	; 148
    3bb8:	97 e0       	ldi	r25, 0x07	; 7
    3bba:	0e 94 f5 23 	call	0x47ea	; 0x47ea <_ZN7Kompass25kallibrierung_ruecksetzenEv>
					anzeige|=(1<<Kompasflag);
    3bbe:	80 91 29 03 	lds	r24, 0x0329
    3bc2:	90 91 2a 03 	lds	r25, 0x032A
    3bc6:	84 60       	ori	r24, 0x04	; 4
    3bc8:	90 93 2a 03 	sts	0x032A, r25
    3bcc:	80 93 29 03 	sts	0x0329, r24
					break;
    3bd0:	08 95       	ret
				case '2':
					//Gaineinstellung fuer den Kompass
					anzeige|=(1<<Kompasgaineinstellenflag);
    3bd2:	20 62       	ori	r18, 0x20	; 32
    3bd4:	30 93 2a 03 	sts	0x032A, r19
    3bd8:	20 93 29 03 	sts	0x0329, r18
					break;
    3bdc:	08 95       	ret
				case '3':
					//dies ist eine der wenigen Funktinen, die die Handler Strucktur nicht anwenden, da sie die rtc anhaellt
					uhreinstellen();
    3bde:	0e 94 6e 16 	call	0x2cdc	; 0x2cdc <_Z13uhreinstellenv>
					anzeige|=(1<<Uhrflag);
    3be2:	80 91 29 03 	lds	r24, 0x0329
    3be6:	90 91 2a 03 	lds	r25, 0x032A
    3bea:	81 60       	ori	r24, 0x01	; 1
    3bec:	90 93 2a 03 	sts	0x032A, r25
    3bf0:	80 93 29 03 	sts	0x0329, r24
					break;
    3bf4:	08 95       	ret
				case '4':
					anzeige |= (1<<Einstellungsflag) | (1<<Weckeranzeigeflag);
    3bf6:	28 60       	ori	r18, 0x08	; 8
    3bf8:	38 60       	ori	r19, 0x08	; 8
    3bfa:	30 93 2a 03 	sts	0x032A, r19
    3bfe:	20 93 29 03 	sts	0x0329, r18
					break;
    3c02:	08 95       	ret
				default:
					//Menueflag neu setzten
					anzeige|=(1<<menueflag)|(1<<Einstellungsflag);
    3c04:	28 60       	ori	r18, 0x08	; 8
    3c06:	30 62       	ori	r19, 0x20	; 32
    3c08:	30 93 2a 03 	sts	0x032A, r19
    3c0c:	20 93 29 03 	sts	0x0329, r18
					break;
    3c10:	eb c2       	rjmp	.+1494   	; 0x41e8 <_Z14eingabehandlerh+0x75c>
			}
		}
		else if ((anzeige&(1<<menueflag)))	//nur das grosse menue
    3c12:	35 ff       	sbrs	r19, 5
    3c14:	58 c0       	rjmp	.+176    	; 0x3cc6 <_Z14eingabehandlerh+0x23a>
		{
			anzeige&=~(1<<menueflag);
    3c16:	3f 7d       	andi	r19, 0xDF	; 223
    3c18:	30 93 2a 03 	sts	0x032A, r19
    3c1c:	20 93 29 03 	sts	0x0329, r18
			switch (taste)
    3c20:	48 2f       	mov	r20, r24
    3c22:	50 e0       	ldi	r21, 0x00	; 0
    3c24:	fa 01       	movw	r30, r20
    3c26:	f1 97       	sbiw	r30, 0x31	; 49
    3c28:	e7 30       	cpi	r30, 0x07	; 7
    3c2a:	f1 05       	cpc	r31, r1
    3c2c:	08 f0       	brcs	.+2      	; 0x3c30 <_Z14eingabehandlerh+0x1a4>
    3c2e:	45 c0       	rjmp	.+138    	; 0x3cba <_Z14eingabehandlerh+0x22e>
    3c30:	e2 5c       	subi	r30, 0xC2	; 194
    3c32:	ff 4f       	sbci	r31, 0xFF	; 255
    3c34:	0c 94 fd 2e 	jmp	0x5dfa	; 0x5dfa <__tablejump2__>
			{
				case '1':
					anzeige|=(1<<Fahradflag);
    3c38:	22 60       	ori	r18, 0x02	; 2
    3c3a:	30 93 2a 03 	sts	0x032A, r19
    3c3e:	20 93 29 03 	sts	0x0329, r18
					//starten des Timers fuer die geschwindigkeit
					TCCR1B |= ((1<<CS12) | (1<<CS10));
    3c42:	e1 e8       	ldi	r30, 0x81	; 129
    3c44:	f0 e0       	ldi	r31, 0x00	; 0
    3c46:	80 81       	ld	r24, Z
    3c48:	85 60       	ori	r24, 0x05	; 5
    3c4a:	80 83       	st	Z, r24
					break;
    3c4c:	08 95       	ret
				
				case '2':
					//Taschenrechner starten
					//Monentan deaktiv, da Umstellung der Handler 
					//operation(Flieskommazahleingabe());
					oled.clearFrame();
    3c4e:	82 e4       	ldi	r24, 0x42	; 66
    3c50:	93 e0       	ldi	r25, 0x03	; 3
    3c52:	0e 94 ed 03 	call	0x7da	; 0x7da <_ZN7Display10clearFrameEv>
					anzeige|=(1<<refreshdisplay);	
    3c56:	80 91 29 03 	lds	r24, 0x0329
    3c5a:	90 91 2a 03 	lds	r25, 0x032A
    3c5e:	90 68       	ori	r25, 0x80	; 128
    3c60:	90 93 2a 03 	sts	0x032A, r25
    3c64:	80 93 29 03 	sts	0x0329, r24
					break;
    3c68:	08 95       	ret
				
				case '3':
					anzeige|=(1<<Kompasflag);
    3c6a:	24 60       	ori	r18, 0x04	; 4
    3c6c:	30 93 2a 03 	sts	0x032A, r19
    3c70:	20 93 29 03 	sts	0x0329, r18
					break;
    3c74:	08 95       	ret
				
				case '4':
					//Menue der Uhr
					anzeige|=(1<<menueflag) | (1<<Uhrflag);
    3c76:	21 60       	ori	r18, 0x01	; 1
    3c78:	30 62       	ori	r19, 0x20	; 32
    3c7a:	30 93 2a 03 	sts	0x032A, r19
    3c7e:	20 93 29 03 	sts	0x0329, r18
					break;
    3c82:	08 95       	ret
				
				case '5':
					//menue der Einstellungen
					anzeige|=(1<<menueflag) | (1<<Einstellungsflag);
    3c84:	28 60       	ori	r18, 0x08	; 8
    3c86:	30 62       	ori	r19, 0x20	; 32
    3c88:	30 93 2a 03 	sts	0x032A, r19
    3c8c:	20 93 29 03 	sts	0x0329, r18
					break;
    3c90:	08 95       	ret
				
				case '6':
					//Display ausschalten
					//anzeige=255;
					oled.clearFrame();
    3c92:	82 e4       	ldi	r24, 0x42	; 66
    3c94:	93 e0       	ldi	r25, 0x03	; 3
    3c96:	0e 94 ed 03 	call	0x7da	; 0x7da <_ZN7Display10clearFrameEv>
					anzeige|=(1<<refreshdisplay);
    3c9a:	80 91 29 03 	lds	r24, 0x0329
    3c9e:	90 91 2a 03 	lds	r25, 0x032A
    3ca2:	90 68       	ori	r25, 0x80	; 128
    3ca4:	90 93 2a 03 	sts	0x032A, r25
    3ca8:	80 93 29 03 	sts	0x0329, r24
					break;
    3cac:	08 95       	ret
				case '7':
					anzeige |= (1<<Druckflag);
    3cae:	32 60       	ori	r19, 0x02	; 2
    3cb0:	30 93 2a 03 	sts	0x032A, r19
    3cb4:	20 93 29 03 	sts	0x0329, r18
					break;
    3cb8:	08 95       	ret
				default:
					//menueflag erneut setzen um abschalten zu verhindern
					anzeige|=(1<<menueflag);
    3cba:	30 62       	ori	r19, 0x20	; 32
    3cbc:	30 93 2a 03 	sts	0x032A, r19
    3cc0:	20 93 29 03 	sts	0x0329, r18
					break;
    3cc4:	91 c2       	rjmp	.+1314   	; 0x41e8 <_Z14eingabehandlerh+0x75c>
    3cc6:	a9 01       	movw	r20, r18
    3cc8:	48 70       	andi	r20, 0x08	; 8
    3cca:	58 70       	andi	r21, 0x08	; 8
			}
		}
		else if ((anzeige&(1<<Einstellungsflag))&&(anzeige&(1<<Weckeranzeigeflag)))
    3ccc:	48 30       	cpi	r20, 0x08	; 8
    3cce:	58 40       	sbci	r21, 0x08	; 8
    3cd0:	09 f0       	breq	.+2      	; 0x3cd4 <_Z14eingabehandlerh+0x248>
    3cd2:	68 c0       	rjmp	.+208    	; 0x3da4 <_Z14eingabehandlerh+0x318>
		{
			switch (pos)
    3cd4:	40 91 28 03 	lds	r20, 0x0328
    3cd8:	41 30       	cpi	r20, 0x01	; 1
    3cda:	11 f1       	breq	.+68     	; 0x3d20 <_Z14eingabehandlerh+0x294>
    3cdc:	30 f0       	brcs	.+12     	; 0x3cea <_Z14eingabehandlerh+0x25e>
    3cde:	42 30       	cpi	r20, 0x02	; 2
    3ce0:	79 f1       	breq	.+94     	; 0x3d40 <_Z14eingabehandlerh+0x2b4>
    3ce2:	43 30       	cpi	r20, 0x03	; 3
    3ce4:	09 f4       	brne	.+2      	; 0x3ce8 <_Z14eingabehandlerh+0x25c>
    3ce6:	3f c0       	rjmp	.+126    	; 0x3d66 <_Z14eingabehandlerh+0x2da>
    3ce8:	7f c2       	rjmp	.+1278   	; 0x41e8 <_Z14eingabehandlerh+0x75c>
			{
				case 0:
					rtc.WStunden=0;
    3cea:	10 92 93 07 	sts	0x0793, r1
					rtc.WMinuten=0;
    3cee:	10 92 92 07 	sts	0x0792, r1
					rtc.interupts &= ~((1<<Weckerein)|(1<<Weckeractiv));
    3cf2:	97 7e       	andi	r25, 0xE7	; 231
    3cf4:	92 60       	ori	r25, 0x02	; 2
    3cf6:	90 93 91 07 	sts	0x0791, r25
					switch (taste)
    3cfa:	83 32       	cpi	r24, 0x23	; 35
    3cfc:	09 f4       	brne	.+2      	; 0x3d00 <_Z14eingabehandlerh+0x274>
    3cfe:	74 c2       	rjmp	.+1256   	; 0x41e8 <_Z14eingabehandlerh+0x75c>
    3d00:	8a 32       	cpi	r24, 0x2A	; 42
    3d02:	09 f4       	brne	.+2      	; 0x3d06 <_Z14eingabehandlerh+0x27a>
    3d04:	71 c2       	rjmp	.+1250   	; 0x41e8 <_Z14eingabehandlerh+0x75c>
						case '#':
							break;
						case '*':
							break;
						default:
							rtc.WStunden=(taste-'0')*10;
    3d06:	98 2f       	mov	r25, r24
    3d08:	99 0f       	add	r25, r25
    3d0a:	90 56       	subi	r25, 0x60	; 96
    3d0c:	29 2f       	mov	r18, r25
    3d0e:	22 0f       	add	r18, r18
    3d10:	22 0f       	add	r18, r18
    3d12:	92 0f       	add	r25, r18
    3d14:	90 93 93 07 	sts	0x0793, r25
							pos++;
    3d18:	91 e0       	ldi	r25, 0x01	; 1
    3d1a:	90 93 28 03 	sts	0x0328, r25
						break;
    3d1e:	64 c2       	rjmp	.+1224   	; 0x41e8 <_Z14eingabehandlerh+0x75c>
					}
					break;
				case 1:
					switch (taste)
    3d20:	83 32       	cpi	r24, 0x23	; 35
    3d22:	09 f4       	brne	.+2      	; 0x3d26 <_Z14eingabehandlerh+0x29a>
    3d24:	61 c2       	rjmp	.+1218   	; 0x41e8 <_Z14eingabehandlerh+0x75c>
    3d26:	8a 32       	cpi	r24, 0x2A	; 42
    3d28:	09 f4       	brne	.+2      	; 0x3d2c <_Z14eingabehandlerh+0x2a0>
    3d2a:	5e c2       	rjmp	.+1212   	; 0x41e8 <_Z14eingabehandlerh+0x75c>
						case '#':
							break;
						case '*':
							break;
						default:
							rtc.WStunden+=(taste-'0');
    3d2c:	e3 e9       	ldi	r30, 0x93	; 147
    3d2e:	f7 e0       	ldi	r31, 0x07	; 7
    3d30:	90 81       	ld	r25, Z
    3d32:	90 53       	subi	r25, 0x30	; 48
    3d34:	98 0f       	add	r25, r24
    3d36:	90 83       	st	Z, r25
							pos++;
    3d38:	92 e0       	ldi	r25, 0x02	; 2
    3d3a:	90 93 28 03 	sts	0x0328, r25
						break;
    3d3e:	54 c2       	rjmp	.+1192   	; 0x41e8 <_Z14eingabehandlerh+0x75c>
					}
					break;
				case 2:
					switch (taste)
    3d40:	83 32       	cpi	r24, 0x23	; 35
    3d42:	09 f4       	brne	.+2      	; 0x3d46 <_Z14eingabehandlerh+0x2ba>
    3d44:	51 c2       	rjmp	.+1186   	; 0x41e8 <_Z14eingabehandlerh+0x75c>
    3d46:	8a 32       	cpi	r24, 0x2A	; 42
    3d48:	09 f4       	brne	.+2      	; 0x3d4c <_Z14eingabehandlerh+0x2c0>
    3d4a:	4e c2       	rjmp	.+1180   	; 0x41e8 <_Z14eingabehandlerh+0x75c>
						case '#':
							break;
						case '*':
							break;
						default:
							rtc.WMinuten=(taste-'0')*10;
    3d4c:	98 2f       	mov	r25, r24
    3d4e:	99 0f       	add	r25, r25
    3d50:	90 56       	subi	r25, 0x60	; 96
    3d52:	29 2f       	mov	r18, r25
    3d54:	22 0f       	add	r18, r18
    3d56:	22 0f       	add	r18, r18
    3d58:	92 0f       	add	r25, r18
    3d5a:	90 93 92 07 	sts	0x0792, r25
							pos++;
    3d5e:	93 e0       	ldi	r25, 0x03	; 3
    3d60:	90 93 28 03 	sts	0x0328, r25
						break;
    3d64:	41 c2       	rjmp	.+1154   	; 0x41e8 <_Z14eingabehandlerh+0x75c>
					}
					break;
				case 3:
					switch (taste)
    3d66:	83 32       	cpi	r24, 0x23	; 35
    3d68:	41 f0       	breq	.+16     	; 0x3d7a <_Z14eingabehandlerh+0x2ee>
    3d6a:	8a 32       	cpi	r24, 0x2A	; 42
    3d6c:	31 f0       	breq	.+12     	; 0x3d7a <_Z14eingabehandlerh+0x2ee>
						case '#':
							break;
						case '*':
							break;
						default:
							rtc.WMinuten+=(taste-'0');
    3d6e:	e2 e9       	ldi	r30, 0x92	; 146
    3d70:	f7 e0       	ldi	r31, 0x07	; 7
    3d72:	40 81       	ld	r20, Z
    3d74:	40 53       	subi	r20, 0x30	; 48
    3d76:	48 0f       	add	r20, r24
    3d78:	40 83       	st	Z, r20
							pos++;
						break;
					}
					pos=0;
    3d7a:	10 92 28 03 	sts	0x0328, r1
					if (!(rtc.WStunden>=24) && !(rtc.WMinuten>=60))
    3d7e:	40 91 93 07 	lds	r20, 0x0793
    3d82:	48 31       	cpi	r20, 0x18	; 24
    3d84:	08 f0       	brcs	.+2      	; 0x3d88 <_Z14eingabehandlerh+0x2fc>
    3d86:	30 c2       	rjmp	.+1120   	; 0x41e8 <_Z14eingabehandlerh+0x75c>
    3d88:	40 91 92 07 	lds	r20, 0x0792
    3d8c:	4c 33       	cpi	r20, 0x3C	; 60
    3d8e:	08 f0       	brcs	.+2      	; 0x3d92 <_Z14eingabehandlerh+0x306>
    3d90:	2b c2       	rjmp	.+1110   	; 0x41e8 <_Z14eingabehandlerh+0x75c>
					{
						anzeige&=~(1<<Einstellungsflag);
    3d92:	27 7f       	andi	r18, 0xF7	; 247
    3d94:	30 93 2a 03 	sts	0x032A, r19
    3d98:	20 93 29 03 	sts	0x0329, r18
						rtc.interupts|=(1<<Weckerein);
						rtc.interupts|=(1<<minuteninterupt);
    3d9c:	9e 60       	ori	r25, 0x0E	; 14
    3d9e:	90 93 91 07 	sts	0x0791, r25
    3da2:	22 c2       	rjmp	.+1092   	; 0x41e8 <_Z14eingabehandlerh+0x75c>
					}
					break;
			}
		}
		else if ((anzeige&(1<<Kompasgaineinstellenflag)))
    3da4:	25 ff       	sbrs	r18, 5
    3da6:	51 c0       	rjmp	.+162    	; 0x3e4a <_Z14eingabehandlerh+0x3be>
		{
			anzeige&=~(1<<Kompasgaineinstellenflag);
    3da8:	a9 01       	movw	r20, r18
    3daa:	4f 7d       	andi	r20, 0xDF	; 223
			anzeige|=(1<<Kompasflag);
    3dac:	44 60       	ori	r20, 0x04	; 4
    3dae:	50 93 2a 03 	sts	0x032A, r21
    3db2:	40 93 29 03 	sts	0x0329, r20
			switch (taste) {
    3db6:	48 2f       	mov	r20, r24
    3db8:	50 e0       	ldi	r21, 0x00	; 0
    3dba:	fa 01       	movw	r30, r20
    3dbc:	f1 97       	sbiw	r30, 0x31	; 49
    3dbe:	e8 30       	cpi	r30, 0x08	; 8
    3dc0:	f1 05       	cpc	r31, r1
    3dc2:	e0 f5       	brcc	.+120    	; 0x3e3c <_Z14eingabehandlerh+0x3b0>
    3dc4:	eb 5b       	subi	r30, 0xBB	; 187
    3dc6:	ff 4f       	sbci	r31, 0xFF	; 255
    3dc8:	0c 94 fd 2e 	jmp	0x5dfa	; 0x5dfa <__tablejump2__>
				case '1':
					kompass.HMC5883L_command(0x01,HMCGAIN1370);
    3dcc:	40 e0       	ldi	r20, 0x00	; 0
    3dce:	61 e0       	ldi	r22, 0x01	; 1
    3dd0:	84 e9       	ldi	r24, 0x94	; 148
    3dd2:	97 e0       	ldi	r25, 0x07	; 7
    3dd4:	0e 94 7a 22 	call	0x44f4	; 0x44f4 <_ZN7Kompass16HMC5883L_commandEhh>
					break;
    3dd8:	08 95       	ret
				case '2':
					kompass.HMC5883L_command(0x01,HMCGAIN1090);
    3dda:	40 e2       	ldi	r20, 0x20	; 32
    3ddc:	61 e0       	ldi	r22, 0x01	; 1
    3dde:	84 e9       	ldi	r24, 0x94	; 148
    3de0:	97 e0       	ldi	r25, 0x07	; 7
    3de2:	0e 94 7a 22 	call	0x44f4	; 0x44f4 <_ZN7Kompass16HMC5883L_commandEhh>
					break;
    3de6:	08 95       	ret
				case '3':
					kompass.HMC5883L_command(0x01,HMCGAIN820);
    3de8:	40 e4       	ldi	r20, 0x40	; 64
    3dea:	61 e0       	ldi	r22, 0x01	; 1
    3dec:	84 e9       	ldi	r24, 0x94	; 148
    3dee:	97 e0       	ldi	r25, 0x07	; 7
    3df0:	0e 94 7a 22 	call	0x44f4	; 0x44f4 <_ZN7Kompass16HMC5883L_commandEhh>
					break;
    3df4:	08 95       	ret
				case '4':
					kompass.HMC5883L_command(0x01,HMCGAIN660);
    3df6:	40 e6       	ldi	r20, 0x60	; 96
    3df8:	61 e0       	ldi	r22, 0x01	; 1
    3dfa:	84 e9       	ldi	r24, 0x94	; 148
    3dfc:	97 e0       	ldi	r25, 0x07	; 7
    3dfe:	0e 94 7a 22 	call	0x44f4	; 0x44f4 <_ZN7Kompass16HMC5883L_commandEhh>
					break;
    3e02:	08 95       	ret
				case '5':
					kompass.HMC5883L_command(0x01,HMCGAIN440);
    3e04:	40 e8       	ldi	r20, 0x80	; 128
    3e06:	61 e0       	ldi	r22, 0x01	; 1
    3e08:	84 e9       	ldi	r24, 0x94	; 148
    3e0a:	97 e0       	ldi	r25, 0x07	; 7
    3e0c:	0e 94 7a 22 	call	0x44f4	; 0x44f4 <_ZN7Kompass16HMC5883L_commandEhh>
					break;
    3e10:	08 95       	ret
				case '6':
					kompass.HMC5883L_command(0x01,HMCGAIN390);
    3e12:	40 ea       	ldi	r20, 0xA0	; 160
    3e14:	61 e0       	ldi	r22, 0x01	; 1
    3e16:	84 e9       	ldi	r24, 0x94	; 148
    3e18:	97 e0       	ldi	r25, 0x07	; 7
    3e1a:	0e 94 7a 22 	call	0x44f4	; 0x44f4 <_ZN7Kompass16HMC5883L_commandEhh>
					break;
    3e1e:	08 95       	ret
				case '7':
					kompass.HMC5883L_command(0x01,HMCGAIN330);
    3e20:	40 ec       	ldi	r20, 0xC0	; 192
    3e22:	61 e0       	ldi	r22, 0x01	; 1
    3e24:	84 e9       	ldi	r24, 0x94	; 148
    3e26:	97 e0       	ldi	r25, 0x07	; 7
    3e28:	0e 94 7a 22 	call	0x44f4	; 0x44f4 <_ZN7Kompass16HMC5883L_commandEhh>
					break;
    3e2c:	08 95       	ret
				case '8':
					kompass.HMC5883L_command(0x01,HMCGAIN230);
    3e2e:	40 ee       	ldi	r20, 0xE0	; 224
    3e30:	61 e0       	ldi	r22, 0x01	; 1
    3e32:	84 e9       	ldi	r24, 0x94	; 148
    3e34:	97 e0       	ldi	r25, 0x07	; 7
    3e36:	0e 94 7a 22 	call	0x44f4	; 0x44f4 <_ZN7Kompass16HMC5883L_commandEhh>
					break;
    3e3a:	08 95       	ret
				default:
					anzeige &=~(1<<Kompasflag);
    3e3c:	2b 7d       	andi	r18, 0xDB	; 219
					anzeige|=(1<<Kompasgaineinstellenflag);
    3e3e:	20 62       	ori	r18, 0x20	; 32
    3e40:	30 93 2a 03 	sts	0x032A, r19
    3e44:	20 93 29 03 	sts	0x0329, r18
					break;
    3e48:	cf c1       	rjmp	.+926    	; 0x41e8 <_Z14eingabehandlerh+0x75c>
    3e4a:	a9 01       	movw	r20, r18
    3e4c:	48 74       	andi	r20, 0x48	; 72
    3e4e:	55 27       	eor	r21, r21
			}
		}
		else if ((anzeige&(1<<Einstellungsflag)) && (anzeige&(1<<Timerflag)))
    3e50:	48 34       	cpi	r20, 0x48	; 72
    3e52:	51 05       	cpc	r21, r1
    3e54:	09 f0       	breq	.+2      	; 0x3e58 <_Z14eingabehandlerh+0x3cc>
    3e56:	87 c0       	rjmp	.+270    	; 0x3f66 <_Z14eingabehandlerh+0x4da>
		{
			switch (pos)
    3e58:	90 91 28 03 	lds	r25, 0x0328
    3e5c:	92 30       	cpi	r25, 0x02	; 2
    3e5e:	a9 f1       	breq	.+106    	; 0x3eca <_Z14eingabehandlerh+0x43e>
    3e60:	28 f4       	brcc	.+10     	; 0x3e6c <_Z14eingabehandlerh+0x3e0>
    3e62:	99 23       	and	r25, r25
    3e64:	61 f0       	breq	.+24     	; 0x3e7e <_Z14eingabehandlerh+0x3f2>
    3e66:	91 30       	cpi	r25, 0x01	; 1
    3e68:	01 f1       	breq	.+64     	; 0x3eaa <_Z14eingabehandlerh+0x41e>
    3e6a:	be c1       	rjmp	.+892    	; 0x41e8 <_Z14eingabehandlerh+0x75c>
    3e6c:	94 30       	cpi	r25, 0x04	; 4
    3e6e:	09 f4       	brne	.+2      	; 0x3e72 <_Z14eingabehandlerh+0x3e6>
    3e70:	52 c0       	rjmp	.+164    	; 0x3f16 <_Z14eingabehandlerh+0x48a>
    3e72:	08 f4       	brcc	.+2      	; 0x3e76 <_Z14eingabehandlerh+0x3ea>
    3e74:	40 c0       	rjmp	.+128    	; 0x3ef6 <_Z14eingabehandlerh+0x46a>
    3e76:	95 30       	cpi	r25, 0x05	; 5
    3e78:	09 f4       	brne	.+2      	; 0x3e7c <_Z14eingabehandlerh+0x3f0>
    3e7a:	63 c0       	rjmp	.+198    	; 0x3f42 <_Z14eingabehandlerh+0x4b6>
    3e7c:	b5 c1       	rjmp	.+874    	; 0x41e8 <_Z14eingabehandlerh+0x75c>
			{
			case 0:
				switch (taste)
    3e7e:	83 32       	cpi	r24, 0x23	; 35
    3e80:	09 f4       	brne	.+2      	; 0x3e84 <_Z14eingabehandlerh+0x3f8>
    3e82:	b2 c1       	rjmp	.+868    	; 0x41e8 <_Z14eingabehandlerh+0x75c>
    3e84:	8a 32       	cpi	r24, 0x2A	; 42
    3e86:	09 f4       	brne	.+2      	; 0x3e8a <_Z14eingabehandlerh+0x3fe>
    3e88:	af c1       	rjmp	.+862    	; 0x41e8 <_Z14eingabehandlerh+0x75c>
					case '#':
						break;
					case '*':
						break;
					default:
						zaehler.Sekunden+=(taste-'0')*10;
    3e8a:	e0 e7       	ldi	r30, 0x70	; 112
    3e8c:	f7 e0       	ldi	r31, 0x07	; 7
    3e8e:	98 2f       	mov	r25, r24
    3e90:	99 0f       	add	r25, r25
    3e92:	90 56       	subi	r25, 0x60	; 96
    3e94:	29 2f       	mov	r18, r25
    3e96:	22 0f       	add	r18, r18
    3e98:	22 0f       	add	r18, r18
    3e9a:	92 0f       	add	r25, r18
    3e9c:	20 81       	ld	r18, Z
    3e9e:	92 0f       	add	r25, r18
    3ea0:	90 83       	st	Z, r25
						pos++;
    3ea2:	91 e0       	ldi	r25, 0x01	; 1
    3ea4:	90 93 28 03 	sts	0x0328, r25
						break;
    3ea8:	9f c1       	rjmp	.+830    	; 0x41e8 <_Z14eingabehandlerh+0x75c>
				}
				break;
			case 1:
				switch (taste)
    3eaa:	83 32       	cpi	r24, 0x23	; 35
    3eac:	09 f4       	brne	.+2      	; 0x3eb0 <_Z14eingabehandlerh+0x424>
    3eae:	9c c1       	rjmp	.+824    	; 0x41e8 <_Z14eingabehandlerh+0x75c>
    3eb0:	8a 32       	cpi	r24, 0x2A	; 42
    3eb2:	09 f4       	brne	.+2      	; 0x3eb6 <_Z14eingabehandlerh+0x42a>
    3eb4:	99 c1       	rjmp	.+818    	; 0x41e8 <_Z14eingabehandlerh+0x75c>
					case '#':
					break;
					case '*':
					break;
					default:
					zaehler.Sekunden+=(taste-'0');
    3eb6:	e0 e7       	ldi	r30, 0x70	; 112
    3eb8:	f7 e0       	ldi	r31, 0x07	; 7
    3eba:	90 81       	ld	r25, Z
    3ebc:	90 53       	subi	r25, 0x30	; 48
    3ebe:	98 0f       	add	r25, r24
    3ec0:	90 83       	st	Z, r25
					pos++;
    3ec2:	92 e0       	ldi	r25, 0x02	; 2
    3ec4:	90 93 28 03 	sts	0x0328, r25
					break;
    3ec8:	8f c1       	rjmp	.+798    	; 0x41e8 <_Z14eingabehandlerh+0x75c>
				}
				break;
			case 2:
				switch (taste)
    3eca:	83 32       	cpi	r24, 0x23	; 35
    3ecc:	09 f4       	brne	.+2      	; 0x3ed0 <_Z14eingabehandlerh+0x444>
    3ece:	8c c1       	rjmp	.+792    	; 0x41e8 <_Z14eingabehandlerh+0x75c>
    3ed0:	8a 32       	cpi	r24, 0x2A	; 42
    3ed2:	09 f4       	brne	.+2      	; 0x3ed6 <_Z14eingabehandlerh+0x44a>
    3ed4:	89 c1       	rjmp	.+786    	; 0x41e8 <_Z14eingabehandlerh+0x75c>
					case '#':
					break;
					case '*':
					break;
					default:
					zaehler.Minuten+=(taste-'0')*10;
    3ed6:	ef e6       	ldi	r30, 0x6F	; 111
    3ed8:	f7 e0       	ldi	r31, 0x07	; 7
    3eda:	98 2f       	mov	r25, r24
    3edc:	99 0f       	add	r25, r25
    3ede:	90 56       	subi	r25, 0x60	; 96
    3ee0:	29 2f       	mov	r18, r25
    3ee2:	22 0f       	add	r18, r18
    3ee4:	22 0f       	add	r18, r18
    3ee6:	92 0f       	add	r25, r18
    3ee8:	20 81       	ld	r18, Z
    3eea:	92 0f       	add	r25, r18
    3eec:	90 83       	st	Z, r25
					pos++;
    3eee:	93 e0       	ldi	r25, 0x03	; 3
    3ef0:	90 93 28 03 	sts	0x0328, r25
					break;
    3ef4:	79 c1       	rjmp	.+754    	; 0x41e8 <_Z14eingabehandlerh+0x75c>
				}
				break;
			case 3:
				switch (taste)
    3ef6:	83 32       	cpi	r24, 0x23	; 35
    3ef8:	09 f4       	brne	.+2      	; 0x3efc <_Z14eingabehandlerh+0x470>
    3efa:	76 c1       	rjmp	.+748    	; 0x41e8 <_Z14eingabehandlerh+0x75c>
    3efc:	8a 32       	cpi	r24, 0x2A	; 42
    3efe:	09 f4       	brne	.+2      	; 0x3f02 <_Z14eingabehandlerh+0x476>
    3f00:	73 c1       	rjmp	.+742    	; 0x41e8 <_Z14eingabehandlerh+0x75c>
					case '#':
					break;
					case '*':
					break;
					default:
					zaehler.Minuten+=(taste-'0');
    3f02:	ef e6       	ldi	r30, 0x6F	; 111
    3f04:	f7 e0       	ldi	r31, 0x07	; 7
    3f06:	90 81       	ld	r25, Z
    3f08:	90 53       	subi	r25, 0x30	; 48
    3f0a:	98 0f       	add	r25, r24
    3f0c:	90 83       	st	Z, r25
					pos++;
    3f0e:	94 e0       	ldi	r25, 0x04	; 4
    3f10:	90 93 28 03 	sts	0x0328, r25
					break;
    3f14:	69 c1       	rjmp	.+722    	; 0x41e8 <_Z14eingabehandlerh+0x75c>
				}
				break;
			case 4:
				switch (taste)
    3f16:	83 32       	cpi	r24, 0x23	; 35
    3f18:	09 f4       	brne	.+2      	; 0x3f1c <_Z14eingabehandlerh+0x490>
    3f1a:	66 c1       	rjmp	.+716    	; 0x41e8 <_Z14eingabehandlerh+0x75c>
    3f1c:	8a 32       	cpi	r24, 0x2A	; 42
    3f1e:	09 f4       	brne	.+2      	; 0x3f22 <_Z14eingabehandlerh+0x496>
    3f20:	63 c1       	rjmp	.+710    	; 0x41e8 <_Z14eingabehandlerh+0x75c>
					case '#':
					break;
					case '*':
					break;
					default:
					zaehler.Stunden+=(taste-'0')*10;
    3f22:	ee e6       	ldi	r30, 0x6E	; 110
    3f24:	f7 e0       	ldi	r31, 0x07	; 7
    3f26:	98 2f       	mov	r25, r24
    3f28:	99 0f       	add	r25, r25
    3f2a:	90 56       	subi	r25, 0x60	; 96
    3f2c:	29 2f       	mov	r18, r25
    3f2e:	22 0f       	add	r18, r18
    3f30:	22 0f       	add	r18, r18
    3f32:	92 0f       	add	r25, r18
    3f34:	20 81       	ld	r18, Z
    3f36:	92 0f       	add	r25, r18
    3f38:	90 83       	st	Z, r25
					pos++;
    3f3a:	95 e0       	ldi	r25, 0x05	; 5
    3f3c:	90 93 28 03 	sts	0x0328, r25
					break;
    3f40:	53 c1       	rjmp	.+678    	; 0x41e8 <_Z14eingabehandlerh+0x75c>
				}
				break;
			case 5:
				switch (taste)
    3f42:	83 32       	cpi	r24, 0x23	; 35
    3f44:	41 f0       	breq	.+16     	; 0x3f56 <_Z14eingabehandlerh+0x4ca>
    3f46:	8a 32       	cpi	r24, 0x2A	; 42
    3f48:	31 f0       	breq	.+12     	; 0x3f56 <_Z14eingabehandlerh+0x4ca>
					case '#':
					break;
					case '*':
					break;
					default:
					zaehler.Stunden+=(taste-'0');
    3f4a:	ee e6       	ldi	r30, 0x6E	; 110
    3f4c:	f7 e0       	ldi	r31, 0x07	; 7
    3f4e:	90 81       	ld	r25, Z
    3f50:	90 53       	subi	r25, 0x30	; 48
    3f52:	98 0f       	add	r25, r24
    3f54:	90 83       	st	Z, r25
					pos++;
					break;
				}
				pos=0;
    3f56:	10 92 28 03 	sts	0x0328, r1
				anzeige&=~(1<<Einstellungsflag);
    3f5a:	27 7f       	andi	r18, 0xF7	; 247
    3f5c:	30 93 2a 03 	sts	0x032A, r19
    3f60:	20 93 29 03 	sts	0x0329, r18
				break;
    3f64:	41 c1       	rjmp	.+642    	; 0x41e8 <_Z14eingabehandlerh+0x75c>
			}
		}
		else if ((anzeige&(1<<Stoppuhrflag)))
    3f66:	27 ff       	sbrs	r18, 7
    3f68:	23 c0       	rjmp	.+70     	; 0x3fb0 <_Z14eingabehandlerh+0x524>
		{
			if (taste=='*')
    3f6a:	8a 32       	cpi	r24, 0x2A	; 42
    3f6c:	71 f4       	brne	.+28     	; 0x3f8a <_Z14eingabehandlerh+0x4fe>
			{
				if ((anzeige&(1<<Einstellungsflag)))
    3f6e:	23 ff       	sbrs	r18, 3
    3f70:	06 c0       	rjmp	.+12     	; 0x3f7e <_Z14eingabehandlerh+0x4f2>
				{
					anzeige&=~(1<<Einstellungsflag);
    3f72:	27 7f       	andi	r18, 0xF7	; 247
    3f74:	30 93 2a 03 	sts	0x032A, r19
    3f78:	20 93 29 03 	sts	0x0329, r18
    3f7c:	59 c1       	rjmp	.+690    	; 0x4230 <_Z14eingabehandlerh+0x7a4>
				}
				else{
					anzeige|=(1<<Einstellungsflag);
    3f7e:	28 60       	ori	r18, 0x08	; 8
    3f80:	30 93 2a 03 	sts	0x032A, r19
    3f84:	20 93 29 03 	sts	0x0329, r18
    3f88:	53 c1       	rjmp	.+678    	; 0x4230 <_Z14eingabehandlerh+0x7a4>
				}
			}
			else if (taste=='0')
    3f8a:	80 33       	cpi	r24, 0x30	; 48
    3f8c:	39 f4       	brne	.+14     	; 0x3f9c <_Z14eingabehandlerh+0x510>
			{
				stoppuhr.Sekunden=0;
    3f8e:	10 92 55 07 	sts	0x0755, r1
				stoppuhr.Minuten=0;
    3f92:	10 92 54 07 	sts	0x0754, r1
				stoppuhr.Stunden=0;
    3f96:	10 92 53 07 	sts	0x0753, r1
    3f9a:	08 95       	ret
			}
			else if (taste=='#')
    3f9c:	83 32       	cpi	r24, 0x23	; 35
    3f9e:	09 f0       	breq	.+2      	; 0x3fa2 <_Z14eingabehandlerh+0x516>
    3fa0:	4d c1       	rjmp	.+666    	; 0x423c <_Z14eingabehandlerh+0x7b0>
			{
				anzeige&=~((1<<Stoppuhrflag)|(1<<Einstellungsflag));
    3fa2:	27 77       	andi	r18, 0x77	; 119
				anzeige|=(1<<menueflag);
    3fa4:	30 62       	ori	r19, 0x20	; 32
    3fa6:	30 93 2a 03 	sts	0x032A, r19
    3faa:	20 93 29 03 	sts	0x0329, r18
    3fae:	08 95       	ret
			}
		}
		else if ((anzeige&(1<<Uhrflag)))
    3fb0:	20 ff       	sbrs	r18, 0
    3fb2:	1c c0       	rjmp	.+56     	; 0x3fec <_Z14eingabehandlerh+0x560>
		{
			if (taste=='#')
    3fb4:	83 32       	cpi	r24, 0x23	; 35
    3fb6:	39 f4       	brne	.+14     	; 0x3fc6 <_Z14eingabehandlerh+0x53a>
			{
				anzeige&=~(1<<Uhrflag);
    3fb8:	2e 7f       	andi	r18, 0xFE	; 254
				anzeige|=(1<<menueflag);
    3fba:	30 62       	ori	r19, 0x20	; 32
    3fbc:	30 93 2a 03 	sts	0x032A, r19
    3fc0:	20 93 29 03 	sts	0x0329, r18
    3fc4:	08 95       	ret
			}
			else if (taste=='0')
    3fc6:	80 33       	cpi	r24, 0x30	; 48
    3fc8:	09 f0       	breq	.+2      	; 0x3fcc <_Z14eingabehandlerh+0x540>
    3fca:	0e c1       	rjmp	.+540    	; 0x41e8 <_Z14eingabehandlerh+0x75c>
			{
				if (LED.ison())
    3fcc:	8f e3       	ldi	r24, 0x3F	; 63
    3fce:	93 e0       	ldi	r25, 0x03	; 3
    3fd0:	0e 94 6e 24 	call	0x48dc	; 0x48dc <_ZN6Output4isonEv>
    3fd4:	88 23       	and	r24, r24
    3fd6:	29 f0       	breq	.+10     	; 0x3fe2 <_Z14eingabehandlerh+0x556>
				{
					LED.off();
    3fd8:	8f e3       	ldi	r24, 0x3F	; 63
    3fda:	93 e0       	ldi	r25, 0x03	; 3
    3fdc:	0e 94 9e 24 	call	0x493c	; 0x493c <_ZN6Output3offEv>
    3fe0:	08 95       	ret
				}
				else{
					LED.on();
    3fe2:	8f e3       	ldi	r24, 0x3F	; 63
    3fe4:	93 e0       	ldi	r25, 0x03	; 3
    3fe6:	0e 94 3a 24 	call	0x4874	; 0x4874 <_ZN6Output2onEv>
    3fea:	08 95       	ret
				}
			}
		}
		else if ((anzeige&(1<<Kompasflag)))
    3fec:	22 ff       	sbrs	r18, 2
    3fee:	1d c0       	rjmp	.+58     	; 0x402a <_Z14eingabehandlerh+0x59e>
		{
			if (taste=='#')
    3ff0:	83 32       	cpi	r24, 0x23	; 35
    3ff2:	41 f4       	brne	.+16     	; 0x4004 <_Z14eingabehandlerh+0x578>
			{
				anzeige&=~(1<<Kompasflag);
    3ff4:	c9 01       	movw	r24, r18
    3ff6:	8b 7f       	andi	r24, 0xFB	; 251
				anzeige|=(1<<menueflag);
    3ff8:	90 62       	ori	r25, 0x20	; 32
    3ffa:	90 93 2a 03 	sts	0x032A, r25
    3ffe:	80 93 29 03 	sts	0x0329, r24
    4002:	08 95       	ret
			}
			else if (taste=='0')
    4004:	80 33       	cpi	r24, 0x30	; 48
    4006:	09 f0       	breq	.+2      	; 0x400a <_Z14eingabehandlerh+0x57e>
    4008:	ef c0       	rjmp	.+478    	; 0x41e8 <_Z14eingabehandlerh+0x75c>
			{
				if (LED.ison())
    400a:	8f e3       	ldi	r24, 0x3F	; 63
    400c:	93 e0       	ldi	r25, 0x03	; 3
    400e:	0e 94 6e 24 	call	0x48dc	; 0x48dc <_ZN6Output4isonEv>
    4012:	88 23       	and	r24, r24
    4014:	29 f0       	breq	.+10     	; 0x4020 <_Z14eingabehandlerh+0x594>
				{
					LED.off();
    4016:	8f e3       	ldi	r24, 0x3F	; 63
    4018:	93 e0       	ldi	r25, 0x03	; 3
    401a:	0e 94 9e 24 	call	0x493c	; 0x493c <_ZN6Output3offEv>
    401e:	08 95       	ret
				}
				else{
					LED.on();
    4020:	8f e3       	ldi	r24, 0x3F	; 63
    4022:	93 e0       	ldi	r25, 0x03	; 3
    4024:	0e 94 3a 24 	call	0x4874	; 0x4874 <_ZN6Output2onEv>
    4028:	08 95       	ret
				}
			}
		}
		else if ((anzeige&(1<<Fahradflag)))
    402a:	21 ff       	sbrs	r18, 1
    402c:	3d c0       	rjmp	.+122    	; 0x40a8 <_Z14eingabehandlerh+0x61c>
		{
			if (taste=='#')
    402e:	83 32       	cpi	r24, 0x23	; 35
    4030:	69 f4       	brne	.+26     	; 0x404c <_Z14eingabehandlerh+0x5c0>
			{
				anzeige&=~(1<<Fahradflag);
    4032:	c9 01       	movw	r24, r18
    4034:	8d 7f       	andi	r24, 0xFD	; 253
				anzeige|=(1<<menueflag);
    4036:	90 62       	ori	r25, 0x20	; 32
    4038:	90 93 2a 03 	sts	0x032A, r25
    403c:	80 93 29 03 	sts	0x0329, r24
				TCCR1B &= ~((1<<CS12) | (1<<CS10));
    4040:	e1 e8       	ldi	r30, 0x81	; 129
    4042:	f0 e0       	ldi	r31, 0x00	; 0
    4044:	80 81       	ld	r24, Z
    4046:	8a 7f       	andi	r24, 0xFA	; 250
    4048:	80 83       	st	Z, r24
    404a:	08 95       	ret
			}
			else if (taste=='*')
    404c:	8a 32       	cpi	r24, 0x2A	; 42
    404e:	c9 f4       	brne	.+50     	; 0x4082 <_Z14eingabehandlerh+0x5f6>
			{
				maxgeschw = 0;
    4050:	10 92 1c 03 	sts	0x031C, r1
    4054:	10 92 1d 03 	sts	0x031D, r1
    4058:	10 92 1e 03 	sts	0x031E, r1
    405c:	10 92 1f 03 	sts	0x031F, r1
				strecke = 0;
    4060:	10 92 20 03 	sts	0x0320, r1
    4064:	10 92 21 03 	sts	0x0321, r1
    4068:	10 92 22 03 	sts	0x0322, r1
    406c:	10 92 23 03 	sts	0x0323, r1
				Fahrtzeit = 0;
    4070:	10 92 18 03 	sts	0x0318, r1
    4074:	10 92 19 03 	sts	0x0319, r1
    4078:	10 92 1a 03 	sts	0x031A, r1
    407c:	10 92 1b 03 	sts	0x031B, r1
    4080:	d7 c0       	rjmp	.+430    	; 0x4230 <_Z14eingabehandlerh+0x7a4>
			}
			else if (taste=='0')
    4082:	80 33       	cpi	r24, 0x30	; 48
    4084:	09 f0       	breq	.+2      	; 0x4088 <_Z14eingabehandlerh+0x5fc>
    4086:	da c0       	rjmp	.+436    	; 0x423c <_Z14eingabehandlerh+0x7b0>
			{
				if (LED.ison())
    4088:	8f e3       	ldi	r24, 0x3F	; 63
    408a:	93 e0       	ldi	r25, 0x03	; 3
    408c:	0e 94 6e 24 	call	0x48dc	; 0x48dc <_ZN6Output4isonEv>
    4090:	88 23       	and	r24, r24
    4092:	29 f0       	breq	.+10     	; 0x409e <_Z14eingabehandlerh+0x612>
				{
					LED.off();
    4094:	8f e3       	ldi	r24, 0x3F	; 63
    4096:	93 e0       	ldi	r25, 0x03	; 3
    4098:	0e 94 9e 24 	call	0x493c	; 0x493c <_ZN6Output3offEv>
    409c:	08 95       	ret
				}
				else{
					LED.on();
    409e:	8f e3       	ldi	r24, 0x3F	; 63
    40a0:	93 e0       	ldi	r25, 0x03	; 3
    40a2:	0e 94 3a 24 	call	0x4874	; 0x4874 <_ZN6Output2onEv>
    40a6:	08 95       	ret
				}
			}
		}
		else if ((anzeige&(1<<Druckflag)))
    40a8:	31 ff       	sbrs	r19, 1
    40aa:	2c c0       	rjmp	.+88     	; 0x4104 <_Z14eingabehandlerh+0x678>
		{
			if (taste=='#')
    40ac:	83 32       	cpi	r24, 0x23	; 35
    40ae:	41 f4       	brne	.+16     	; 0x40c0 <_Z14eingabehandlerh+0x634>
			{
				anzeige&=~(1<<Druckflag);
    40b0:	c9 01       	movw	r24, r18
    40b2:	9d 7f       	andi	r25, 0xFD	; 253
				anzeige|=(1<<menueflag);
    40b4:	90 62       	ori	r25, 0x20	; 32
    40b6:	90 93 2a 03 	sts	0x032A, r25
    40ba:	80 93 29 03 	sts	0x0329, r24
    40be:	08 95       	ret
			}
			else if (taste=='*')
    40c0:	8a 32       	cpi	r24, 0x2A	; 42
    40c2:	69 f4       	brne	.+26     	; 0x40de <_Z14eingabehandlerh+0x652>
			{
				Baro.set_Pressure0(Baro.Press);
    40c4:	40 91 2f 03 	lds	r20, 0x032F
    40c8:	50 91 30 03 	lds	r21, 0x0330
    40cc:	60 91 31 03 	lds	r22, 0x0331
    40d0:	70 91 32 03 	lds	r23, 0x0332
    40d4:	8f e2       	ldi	r24, 0x2F	; 47
    40d6:	93 e0       	ldi	r25, 0x03	; 3
    40d8:	0e 94 a0 26 	call	0x4d40	; 0x4d40 <_ZN8Pressure13set_Pressure0Ed>
    40dc:	a9 c0       	rjmp	.+338    	; 0x4230 <_Z14eingabehandlerh+0x7a4>
			}
			else if (taste=='0')
    40de:	80 33       	cpi	r24, 0x30	; 48
    40e0:	09 f0       	breq	.+2      	; 0x40e4 <_Z14eingabehandlerh+0x658>
    40e2:	ac c0       	rjmp	.+344    	; 0x423c <_Z14eingabehandlerh+0x7b0>
			{
				if (LED.ison())
    40e4:	8f e3       	ldi	r24, 0x3F	; 63
    40e6:	93 e0       	ldi	r25, 0x03	; 3
    40e8:	0e 94 6e 24 	call	0x48dc	; 0x48dc <_ZN6Output4isonEv>
    40ec:	88 23       	and	r24, r24
    40ee:	29 f0       	breq	.+10     	; 0x40fa <_Z14eingabehandlerh+0x66e>
				{
					LED.off();
    40f0:	8f e3       	ldi	r24, 0x3F	; 63
    40f2:	93 e0       	ldi	r25, 0x03	; 3
    40f4:	0e 94 9e 24 	call	0x493c	; 0x493c <_ZN6Output3offEv>
    40f8:	08 95       	ret
				}
				else{
					LED.on();
    40fa:	8f e3       	ldi	r24, 0x3F	; 63
    40fc:	93 e0       	ldi	r25, 0x03	; 3
    40fe:	0e 94 3a 24 	call	0x4874	; 0x4874 <_ZN6Output2onEv>
    4102:	08 95       	ret
				}
			}
		}
		else if ((anzeige&(1<<Timerflag)))
    4104:	26 ff       	sbrs	r18, 6
    4106:	20 c0       	rjmp	.+64     	; 0x4148 <_Z14eingabehandlerh+0x6bc>
		{
			if (taste=='#')
    4108:	83 32       	cpi	r24, 0x23	; 35
    410a:	09 f0       	breq	.+2      	; 0x410e <_Z14eingabehandlerh+0x682>
    410c:	6d c0       	rjmp	.+218    	; 0x41e8 <_Z14eingabehandlerh+0x75c>
			{
				anzeige&=~((1<<Timerflag)|(1<<blinkflag));
    410e:	2f 7b       	andi	r18, 0xBF	; 191
    4110:	3f 7b       	andi	r19, 0xBF	; 191
    4112:	30 93 2a 03 	sts	0x032A, r19
    4116:	20 93 29 03 	sts	0x0329, r18
				oled.invert(0);	//fuer den Fall, dass es invertiert blieb (50% der Faelle)
    411a:	60 e0       	ldi	r22, 0x00	; 0
    411c:	82 e4       	ldi	r24, 0x42	; 66
    411e:	93 e0       	ldi	r25, 0x03	; 3
    4120:	0e 94 89 04 	call	0x912	; 0x912 <_ZN7Display6invertEh>
				LED.off();
    4124:	8f e3       	ldi	r24, 0x3F	; 63
    4126:	93 e0       	ldi	r25, 0x03	; 3
    4128:	0e 94 9e 24 	call	0x493c	; 0x493c <_ZN6Output3offEv>
				Vibrationsmotor.off();
    412c:	8d e3       	ldi	r24, 0x3D	; 61
    412e:	93 e0       	ldi	r25, 0x03	; 3
    4130:	0e 94 9e 24 	call	0x493c	; 0x493c <_ZN6Output3offEv>
				
				anzeige|=(1<<menueflag);
    4134:	80 91 29 03 	lds	r24, 0x0329
    4138:	90 91 2a 03 	lds	r25, 0x032A
    413c:	90 62       	ori	r25, 0x20	; 32
    413e:	90 93 2a 03 	sts	0x032A, r25
    4142:	80 93 29 03 	sts	0x0329, r24
    4146:	08 95       	ret
			}
		}
		else if ((anzeige&(1<<Uhrflaggross)))
    4148:	32 ff       	sbrs	r19, 2
    414a:	1d c0       	rjmp	.+58     	; 0x4186 <_Z14eingabehandlerh+0x6fa>
		{
			if (taste=='#')
    414c:	83 32       	cpi	r24, 0x23	; 35
    414e:	41 f4       	brne	.+16     	; 0x4160 <_Z14eingabehandlerh+0x6d4>
			{
				anzeige&=~(1<<Uhrflaggross);
    4150:	c9 01       	movw	r24, r18
    4152:	9b 7f       	andi	r25, 0xFB	; 251
				anzeige|=(1<<menueflag);
    4154:	90 62       	ori	r25, 0x20	; 32
    4156:	90 93 2a 03 	sts	0x032A, r25
    415a:	80 93 29 03 	sts	0x0329, r24
    415e:	08 95       	ret
			}
			else if (taste=='0')
    4160:	80 33       	cpi	r24, 0x30	; 48
    4162:	09 f0       	breq	.+2      	; 0x4166 <_Z14eingabehandlerh+0x6da>
    4164:	41 c0       	rjmp	.+130    	; 0x41e8 <_Z14eingabehandlerh+0x75c>
			{
				if (LED.ison())
    4166:	8f e3       	ldi	r24, 0x3F	; 63
    4168:	93 e0       	ldi	r25, 0x03	; 3
    416a:	0e 94 6e 24 	call	0x48dc	; 0x48dc <_ZN6Output4isonEv>
    416e:	88 23       	and	r24, r24
    4170:	29 f0       	breq	.+10     	; 0x417c <_Z14eingabehandlerh+0x6f0>
				{
					LED.off();
    4172:	8f e3       	ldi	r24, 0x3F	; 63
    4174:	93 e0       	ldi	r25, 0x03	; 3
    4176:	0e 94 9e 24 	call	0x493c	; 0x493c <_ZN6Output3offEv>
    417a:	08 95       	ret
				}
				else{
					LED.on();
    417c:	8f e3       	ldi	r24, 0x3F	; 63
    417e:	93 e0       	ldi	r25, 0x03	; 3
    4180:	0e 94 3a 24 	call	0x4874	; 0x4874 <_ZN6Output2onEv>
    4184:	08 95       	ret
				}
			}
		}
		else if ((anzeige&(1<<Weckeranzeigeflag)))
    4186:	33 ff       	sbrs	r19, 3
    4188:	26 c0       	rjmp	.+76     	; 0x41d6 <_Z14eingabehandlerh+0x74a>
		{
			if (taste=='#')
    418a:	83 32       	cpi	r24, 0x23	; 35
    418c:	41 f4       	brne	.+16     	; 0x419e <_Z14eingabehandlerh+0x712>
			{
				anzeige&=~(1<<Weckeranzeigeflag);
    418e:	c9 01       	movw	r24, r18
    4190:	97 7f       	andi	r25, 0xF7	; 247
				anzeige|=(1<<menueflag);
    4192:	90 62       	ori	r25, 0x20	; 32
    4194:	90 93 2a 03 	sts	0x032A, r25
    4198:	80 93 29 03 	sts	0x0329, r24
    419c:	08 95       	ret
			}
			if (taste=='*')
    419e:	8a 32       	cpi	r24, 0x2A	; 42
    41a0:	09 f0       	breq	.+2      	; 0x41a4 <_Z14eingabehandlerh+0x718>
    41a2:	4c c0       	rjmp	.+152    	; 0x423c <_Z14eingabehandlerh+0x7b0>
			{
				if (rtc.interupts&(1<<Weckeractiv))
    41a4:	94 ff       	sbrs	r25, 4
    41a6:	06 c0       	rjmp	.+12     	; 0x41b4 <_Z14eingabehandlerh+0x728>
				{
					rtc.interupts &= ~((1<<Weckerein) | (1<<Weckeractiv));
    41a8:	89 2f       	mov	r24, r25
    41aa:	87 7e       	andi	r24, 0xE7	; 231
    41ac:	82 60       	ori	r24, 0x02	; 2
    41ae:	80 93 91 07 	sts	0x0791, r24
    41b2:	0b c0       	rjmp	.+22     	; 0x41ca <_Z14eingabehandlerh+0x73e>
				}
				else if ((rtc.interupts&(1<<Weckerein)))
    41b4:	93 ff       	sbrs	r25, 3
    41b6:	06 c0       	rjmp	.+12     	; 0x41c4 <_Z14eingabehandlerh+0x738>
				{
					rtc.interupts &= ~(1<<Weckerein);
    41b8:	89 2f       	mov	r24, r25
    41ba:	87 7f       	andi	r24, 0xF7	; 247
    41bc:	82 60       	ori	r24, 0x02	; 2
    41be:	80 93 91 07 	sts	0x0791, r24
    41c2:	03 c0       	rjmp	.+6      	; 0x41ca <_Z14eingabehandlerh+0x73e>
				}
				else{
					rtc.interupts |= (1<<Weckerein);
    41c4:	9a 60       	ori	r25, 0x0A	; 10
    41c6:	90 93 91 07 	sts	0x0791, r25
				}
				rtc.interupts|=(1<<minuteninterupt);
    41ca:	e1 e9       	ldi	r30, 0x91	; 145
    41cc:	f7 e0       	ldi	r31, 0x07	; 7
    41ce:	80 81       	ld	r24, Z
    41d0:	84 60       	ori	r24, 0x04	; 4
    41d2:	80 83       	st	Z, r24
    41d4:	2d c0       	rjmp	.+90     	; 0x4230 <_Z14eingabehandlerh+0x7a4>
			}
		}
		else if (anzeige==0)
    41d6:	23 2b       	or	r18, r19
    41d8:	39 f4       	brne	.+14     	; 0x41e8 <_Z14eingabehandlerh+0x75c>
		{
			anzeige|=(1<<menueflag);
    41da:	80 e0       	ldi	r24, 0x00	; 0
    41dc:	90 e2       	ldi	r25, 0x20	; 32
    41de:	90 93 2a 03 	sts	0x032A, r25
    41e2:	80 93 29 03 	sts	0x0329, r24
    41e6:	08 95       	ret
		}
		if ((anzeige&(1<<blinkflag)))
    41e8:	20 91 29 03 	lds	r18, 0x0329
    41ec:	30 91 2a 03 	lds	r19, 0x032A
    41f0:	36 ff       	sbrs	r19, 6
    41f2:	24 c0       	rjmp	.+72     	; 0x423c <_Z14eingabehandlerh+0x7b0>
		{
			if (taste=='*')
    41f4:	8a 32       	cpi	r24, 0x2A	; 42
    41f6:	11 f5       	brne	.+68     	; 0x423c <_Z14eingabehandlerh+0x7b0>
			{
				anzeige &=~(1<<blinkflag);
    41f8:	3f 7b       	andi	r19, 0xBF	; 191
    41fa:	30 93 2a 03 	sts	0x032A, r19
    41fe:	20 93 29 03 	sts	0x0329, r18
				oled.invert(0);	//fuer den Fall, dass es invertiert blieb (50% der Faelle)
    4202:	60 e0       	ldi	r22, 0x00	; 0
    4204:	82 e4       	ldi	r24, 0x42	; 66
    4206:	93 e0       	ldi	r25, 0x03	; 3
    4208:	0e 94 89 04 	call	0x912	; 0x912 <_ZN7Display6invertEh>
				LED.off();
    420c:	8f e3       	ldi	r24, 0x3F	; 63
    420e:	93 e0       	ldi	r25, 0x03	; 3
    4210:	0e 94 9e 24 	call	0x493c	; 0x493c <_ZN6Output3offEv>
				Vibrationsmotor.off();
    4214:	8d e3       	ldi	r24, 0x3D	; 61
    4216:	93 e0       	ldi	r25, 0x03	; 3
    4218:	0e 94 9e 24 	call	0x493c	; 0x493c <_ZN6Output3offEv>
				if ((rtc.interupts&(1<<Weckeractiv)))
    421c:	80 91 91 07 	lds	r24, 0x0791
    4220:	98 2f       	mov	r25, r24
    4222:	98 71       	andi	r25, 0x18	; 24
				{
					if ((rtc.interupts&(1<<Weckerein)))
    4224:	98 31       	cpi	r25, 0x18	; 24
    4226:	51 f4       	brne	.+20     	; 0x423c <_Z14eingabehandlerh+0x7b0>
					{
						rtc.interupts &= ~((1<<Weckerein)|(1<<Weckeractiv));
    4228:	87 7e       	andi	r24, 0xE7	; 231
    422a:	80 93 91 07 	sts	0x0791, r24
    422e:	08 95       	ret
		}
		else if (anzeige==0)
		{
			anzeige|=(1<<menueflag);
		}
		if ((anzeige&(1<<blinkflag)))
    4230:	20 91 29 03 	lds	r18, 0x0329
    4234:	30 91 2a 03 	lds	r19, 0x032A
    4238:	36 fd       	sbrc	r19, 6
    423a:	de cf       	rjmp	.-68     	; 0x41f8 <_Z14eingabehandlerh+0x76c>
    423c:	08 95       	ret

0000423e <main>:
void eingabehandler(uint8_t taste);

int main(void)
{
	//initialisierung
	initialisierung();
    423e:	0e 94 dd 1a 	call	0x35ba	; 0x35ba <_Z15initialisierungv>
	
    while(1)
    {
		//Steuerung der interupts durch Handler
		maininterupthandler();
    4242:	0e 94 41 1b 	call	0x3682	; 0x3682 <_Z19maininterupthandlerv>
		//Steuerung der Anzeige alle Sekunde zur aktualisierung maximale Aktulisierungsrate ist 1Hz
		anzeigehandler();
    4246:	0e 94 65 1b 	call	0x36ca	; 0x36ca <_Z14anzeigehandlerv>
		//Tasthandler
		eingabehandler(Tastatur.Taster());
    424a:	81 e4       	ldi	r24, 0x41	; 65
    424c:	93 e0       	ldi	r25, 0x03	; 3
    424e:	0e 94 d0 21 	call	0x43a0	; 0x43a0 <_ZN9Interface6TasterEv>
    4252:	0e 94 46 1d 	call	0x3a8c	; 0x3a8c <_Z14eingabehandlerh>
    4256:	f5 cf       	rjmp	.-22     	; 0x4242 <main+0x4>

00004258 <_GLOBAL__sub_I_kompass>:
#include <stdlib.h>
#include <stdio.h>
#include <avr/interrupt.h>

#include "Kompass.h"
Kompass kompass;
    4258:	84 e9       	ldi	r24, 0x94	; 148
    425a:	97 e0       	ldi	r25, 0x07	; 7
    425c:	0e 94 99 22 	call	0x4532	; 0x4532 <_ZN7KompassC1Ev>

#include "RTC.h"
RTC rtc;
    4260:	89 e7       	ldi	r24, 0x79	; 121
    4262:	97 e0       	ldi	r25, 0x07	; 7
    4264:	0e 94 2a 27 	call	0x4e54	; 0x4e54 <_ZN3RTCC1Ev>
RTC zaehler;
    4268:	8e e5       	ldi	r24, 0x5E	; 94
    426a:	97 e0       	ldi	r25, 0x07	; 7
    426c:	0e 94 2a 27 	call	0x4e54	; 0x4e54 <_ZN3RTCC1Ev>
RTC stoppuhr;
    4270:	83 e4       	ldi	r24, 0x43	; 67
    4272:	97 e0       	ldi	r25, 0x07	; 7
    4274:	0e 94 2a 27 	call	0x4e54	; 0x4e54 <_ZN3RTCC1Ev>

#include "Display.h"
Display oled;
    4278:	82 e4       	ldi	r24, 0x42	; 66
    427a:	93 e0       	ldi	r25, 0x03	; 3
    427c:	0e 94 7d 04 	call	0x8fa	; 0x8fa <_ZN7DisplayC1Ev>

#include "Interface.h"
Interface Tastatur;
    4280:	81 e4       	ldi	r24, 0x41	; 65
    4282:	93 e0       	ldi	r25, 0x03	; 3
    4284:	0e 94 a8 21 	call	0x4350	; 0x4350 <_ZN9InterfaceC1Ev>

#include "Output.h"
Output LED('D',PORTD7);
    4288:	47 e0       	ldi	r20, 0x07	; 7
    428a:	64 e4       	ldi	r22, 0x44	; 68
    428c:	8f e3       	ldi	r24, 0x3F	; 63
    428e:	93 e0       	ldi	r25, 0x03	; 3
    4290:	0e 94 09 24 	call	0x4812	; 0x4812 <_ZN6OutputC1Ehh>
Output Vibrationsmotor('B',PORTB0);
    4294:	40 e0       	ldi	r20, 0x00	; 0
    4296:	62 e4       	ldi	r22, 0x42	; 66
    4298:	8d e3       	ldi	r24, 0x3D	; 61
    429a:	93 e0       	ldi	r25, 0x03	; 3
    429c:	0e 94 09 24 	call	0x4812	; 0x4812 <_ZN6OutputC1Ehh>

#include "Pressure.h"
Pressure Baro;
    42a0:	8f e2       	ldi	r24, 0x2F	; 47
    42a2:	93 e0       	ldi	r25, 0x03	; 3
    42a4:	0e 94 4b 25 	call	0x4a96	; 0x4a96 <_ZN8PressureC1Ev>
    42a8:	08 95       	ret

000042aa <_GLOBAL__sub_D_kompass>:
    42aa:	8f e2       	ldi	r24, 0x2F	; 47
    42ac:	93 e0       	ldi	r25, 0x03	; 3
    42ae:	0e 94 0f 25 	call	0x4a1e	; 0x4a1e <_ZN8PressureD1Ev>
#include "Interface.h"
Interface Tastatur;

#include "Output.h"
Output LED('D',PORTD7);
Output Vibrationsmotor('B',PORTB0);
    42b2:	8d e3       	ldi	r24, 0x3D	; 61
    42b4:	93 e0       	ldi	r25, 0x03	; 3
    42b6:	0e 94 39 24 	call	0x4872	; 0x4872 <_ZN6OutputD1Ev>

#include "Interface.h"
Interface Tastatur;

#include "Output.h"
Output LED('D',PORTD7);
    42ba:	8f e3       	ldi	r24, 0x3F	; 63
    42bc:	93 e0       	ldi	r25, 0x03	; 3
    42be:	0e 94 39 24 	call	0x4872	; 0x4872 <_ZN6OutputD1Ev>

#include "Display.h"
Display oled;

#include "Interface.h"
Interface Tastatur;
    42c2:	81 e4       	ldi	r24, 0x41	; 65
    42c4:	93 e0       	ldi	r25, 0x03	; 3
    42c6:	0e 94 a9 21 	call	0x4352	; 0x4352 <_ZN9InterfaceD1Ev>
RTC rtc;
RTC zaehler;
RTC stoppuhr;

#include "Display.h"
Display oled;
    42ca:	82 e4       	ldi	r24, 0x42	; 66
    42cc:	93 e0       	ldi	r25, 0x03	; 3
    42ce:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <_ZN7DisplayD1Ev>
Kompass kompass;

#include "RTC.h"
RTC rtc;
RTC zaehler;
RTC stoppuhr;
    42d2:	83 e4       	ldi	r24, 0x43	; 67
    42d4:	97 e0       	ldi	r25, 0x07	; 7
    42d6:	0e 94 a6 26 	call	0x4d4c	; 0x4d4c <_ZN3RTCD1Ev>
#include "Kompass.h"
Kompass kompass;

#include "RTC.h"
RTC rtc;
RTC zaehler;
    42da:	8e e5       	ldi	r24, 0x5E	; 94
    42dc:	97 e0       	ldi	r25, 0x07	; 7
    42de:	0e 94 a6 26 	call	0x4d4c	; 0x4d4c <_ZN3RTCD1Ev>

#include "Kompass.h"
Kompass kompass;

#include "RTC.h"
RTC rtc;
    42e2:	89 e7       	ldi	r24, 0x79	; 121
    42e4:	97 e0       	ldi	r25, 0x07	; 7
    42e6:	0e 94 a6 26 	call	0x4d4c	; 0x4d4c <_ZN3RTCD1Ev>
#include <stdlib.h>
#include <stdio.h>
#include <avr/interrupt.h>

#include "Kompass.h"
Kompass kompass;
    42ea:	84 e9       	ldi	r24, 0x94	; 148
    42ec:	97 e0       	ldi	r25, 0x07	; 7
    42ee:	0e 94 76 22 	call	0x44ec	; 0x44ec <_ZN7KompassD1Ev>
    42f2:	08 95       	ret

000042f4 <_ZN3I2CC1Ev>:

// default constructor
I2C::I2C()
{
	//TWBR = 10; //Bit fuer 100khz an Tackrate, reicht gerade noch so
	TWBR=2; //fuer 8MHz und 400kHz in SCL
    42f4:	82 e0       	ldi	r24, 0x02	; 2
    42f6:	80 93 b8 00 	sts	0x00B8, r24
    42fa:	08 95       	ret

000042fc <_ZN3I2CD1Ev>:
} //I2C

// default destructor
I2C::~I2C()
    42fc:	08 95       	ret

000042fe <_ZN3I2C9twi_startEv>:
{
} //~I2C

void I2C::twi_start(){
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    42fe:	84 ea       	ldi	r24, 0xA4	; 164
    4300:	80 93 bc 00 	sts	0x00BC, r24
    4304:	08 95       	ret

00004306 <_ZN3I2C8twi_stopEv>:
}
void I2C::twi_stop(){
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    4306:	84 e9       	ldi	r24, 0x94	; 148
    4308:	80 93 bc 00 	sts	0x00BC, r24
    430c:	08 95       	ret

0000430e <_ZN3I2C9twi_writeEh>:
	TWCR = (1<<TWINT) | (1<<TWEN);
	TWCR &= ~(1<<TWEA);
}

void I2C::twi_write(uint8_t data){
	while(!(TWCR & (1<<TWINT)));
    430e:	ec eb       	ldi	r30, 0xBC	; 188
    4310:	f0 e0       	ldi	r31, 0x00	; 0
    4312:	80 81       	ld	r24, Z
    4314:	88 23       	and	r24, r24
    4316:	ec f7       	brge	.-6      	; 0x4312 <_ZN3I2C9twi_writeEh+0x4>
	TWDR = data;
    4318:	60 93 bb 00 	sts	0x00BB, r22
	TWCR = (1<<TWINT) | (1<<TWEN);
    431c:	84 e8       	ldi	r24, 0x84	; 132
    431e:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));
    4322:	ec eb       	ldi	r30, 0xBC	; 188
    4324:	f0 e0       	ldi	r31, 0x00	; 0
    4326:	80 81       	ld	r24, Z
    4328:	88 23       	and	r24, r24
    432a:	ec f7       	brge	.-6      	; 0x4326 <_ZN3I2C9twi_writeEh+0x18>
}
    432c:	08 95       	ret

0000432e <_ZN3I2C8twi_readEh>:

uint8_t I2C::twi_read(uint8_t ack){
	if (ack)
    432e:	66 23       	and	r22, r22
    4330:	21 f0       	breq	.+8      	; 0x433a <_ZN3I2C8twi_readEh+0xc>
	{
		TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    4332:	84 ec       	ldi	r24, 0xC4	; 196
    4334:	80 93 bc 00 	sts	0x00BC, r24
    4338:	03 c0       	rjmp	.+6      	; 0x4340 <_ZN3I2C8twi_readEh+0x12>
	}
	else{
		TWCR = (1<<TWINT) | (1<<TWEN);
    433a:	84 e8       	ldi	r24, 0x84	; 132
    433c:	80 93 bc 00 	sts	0x00BC, r24
	}
	
	while(!(TWCR & (1<<TWINT)));
    4340:	ec eb       	ldi	r30, 0xBC	; 188
    4342:	f0 e0       	ldi	r31, 0x00	; 0
    4344:	80 81       	ld	r24, Z
    4346:	88 23       	and	r24, r24
    4348:	ec f7       	brge	.-6      	; 0x4344 <_ZN3I2C8twi_readEh+0x16>
	return TWDR;
    434a:	80 91 bb 00 	lds	r24, 0x00BB
    434e:	08 95       	ret

00004350 <_ZN9InterfaceC1Ev>:


#include "Interface.h"

// default constructor
Interface::Interface()
    4350:	08 95       	ret

00004352 <_ZN9InterfaceD1Ev>:
{
} //Interface

// default destructor
Interface::~Interface()
    4352:	08 95       	ret

00004354 <_ZN9Interface8debounceEPVhh>:
{
} //~Interface

uint8_t Interface::debounce(volatile uint8_t *port, uint8_t pin)
{
	if ( (*port & (1 << pin)) )
    4354:	fb 01       	movw	r30, r22
    4356:	80 81       	ld	r24, Z
    4358:	90 e0       	ldi	r25, 0x00	; 0
    435a:	04 2e       	mov	r0, r20
    435c:	02 c0       	rjmp	.+4      	; 0x4362 <_ZN9Interface8debounceEPVhh+0xe>
    435e:	95 95       	asr	r25
    4360:	87 95       	ror	r24
    4362:	0a 94       	dec	r0
    4364:	e2 f7       	brpl	.-8      	; 0x435e <_ZN9Interface8debounceEPVhh+0xa>
    4366:	80 ff       	sbrs	r24, 0
    4368:	17 c0       	rjmp	.+46     	; 0x4398 <_ZN9Interface8debounceEPVhh+0x44>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    436a:	8f ec       	ldi	r24, 0xCF	; 207
    436c:	97 e0       	ldi	r25, 0x07	; 7
    436e:	01 97       	sbiw	r24, 0x01	; 1
    4370:	f1 f7       	brne	.-4      	; 0x436e <_ZN9Interface8debounceEPVhh+0x1a>
    4372:	00 c0       	rjmp	.+0      	; 0x4374 <_ZN9Interface8debounceEPVhh+0x20>
    4374:	00 00       	nop
	{
		/* Pin wurde auf Masse gezogen, 100ms warten   */
		_delay_ms(1);
		if ( !(*port & (1 << pin)) )
    4376:	fb 01       	movw	r30, r22
    4378:	80 81       	ld	r24, Z
    437a:	90 e0       	ldi	r25, 0x00	; 0
    437c:	9c 01       	movw	r18, r24
    437e:	02 c0       	rjmp	.+4      	; 0x4384 <_ZN9Interface8debounceEPVhh+0x30>
    4380:	35 95       	asr	r19
    4382:	27 95       	ror	r18
    4384:	4a 95       	dec	r20
    4386:	e2 f7       	brpl	.-8      	; 0x4380 <_ZN9Interface8debounceEPVhh+0x2c>
    4388:	20 fd       	sbrc	r18, 0
    438a:	08 c0       	rjmp	.+16     	; 0x439c <_ZN9Interface8debounceEPVhh+0x48>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    438c:	3a e1       	ldi	r19, 0x1A	; 26
    438e:	3a 95       	dec	r19
    4390:	f1 f7       	brne	.-4      	; 0x438e <_ZN9Interface8debounceEPVhh+0x3a>
    4392:	00 c0       	rjmp	.+0      	; 0x4394 <_ZN9Interface8debounceEPVhh+0x40>
		{
			/* Anwender Zeit zum Loslassen des Tasters geben */
			_delay_us(10);
			return 1;
    4394:	81 e0       	ldi	r24, 0x01	; 1
    4396:	08 95       	ret
		}
	}
	return 0;
    4398:	80 e0       	ldi	r24, 0x00	; 0
    439a:	08 95       	ret
    439c:	80 e0       	ldi	r24, 0x00	; 0
}
    439e:	08 95       	ret

000043a0 <_ZN9Interface6TasterEv>:
		break;
	}
	return abfrage;
}

uint8_t Interface::Taster(){
    43a0:	1f 93       	push	r17
    43a2:	cf 93       	push	r28
    43a4:	df 93       	push	r29
    43a6:	ec 01       	movw	r28, r24
	uint8_t taste = 'A';
	
	//erste Zeile
	PORTD |= (1<<PORTD3);
    43a8:	5b 9a       	sbi	0x0b, 3	; 11
    43aa:	82 e0       	ldi	r24, 0x02	; 2
    43ac:	8a 95       	dec	r24
    43ae:	f1 f7       	brne	.-4      	; 0x43ac <_ZN9Interface6TasterEv+0xc>
    43b0:	00 c0       	rjmp	.+0      	; 0x43b2 <_ZN9Interface6TasterEv+0x12>
	_delay_us(1);
	if(debounce(&PIND,PIND4)){
    43b2:	44 e0       	ldi	r20, 0x04	; 4
    43b4:	69 e2       	ldi	r22, 0x29	; 41
    43b6:	70 e0       	ldi	r23, 0x00	; 0
    43b8:	ce 01       	movw	r24, r28
    43ba:	0e 94 aa 21 	call	0x4354	; 0x4354 <_ZN9Interface8debounceEPVhh>
    43be:	81 11       	cpse	r24, r1
    43c0:	12 c0       	rjmp	.+36     	; 0x43e6 <_ZN9Interface6TasterEv+0x46>
		taste = '3';
	}
	else if (debounce(&PIND,PIND5))
    43c2:	45 e0       	ldi	r20, 0x05	; 5
    43c4:	69 e2       	ldi	r22, 0x29	; 41
    43c6:	70 e0       	ldi	r23, 0x00	; 0
    43c8:	ce 01       	movw	r24, r28
    43ca:	0e 94 aa 21 	call	0x4354	; 0x4354 <_ZN9Interface8debounceEPVhh>
    43ce:	81 11       	cpse	r24, r1
    43d0:	0c c0       	rjmp	.+24     	; 0x43ea <_ZN9Interface6TasterEv+0x4a>
	{
		taste = '2';
	}
	else if (debounce(&PIND,PIND6))
    43d2:	46 e0       	ldi	r20, 0x06	; 6
    43d4:	69 e2       	ldi	r22, 0x29	; 41
    43d6:	70 e0       	ldi	r23, 0x00	; 0
    43d8:	ce 01       	movw	r24, r28
    43da:	0e 94 aa 21 	call	0x4354	; 0x4354 <_ZN9Interface8debounceEPVhh>
    43de:	81 11       	cpse	r24, r1
    43e0:	06 c0       	rjmp	.+12     	; 0x43ee <_ZN9Interface6TasterEv+0x4e>
	}
	return abfrage;
}

uint8_t Interface::Taster(){
	uint8_t taste = 'A';
    43e2:	11 e4       	ldi	r17, 0x41	; 65
    43e4:	05 c0       	rjmp	.+10     	; 0x43f0 <_ZN9Interface6TasterEv+0x50>
	
	//erste Zeile
	PORTD |= (1<<PORTD3);
	_delay_us(1);
	if(debounce(&PIND,PIND4)){
		taste = '3';
    43e6:	13 e3       	ldi	r17, 0x33	; 51
    43e8:	03 c0       	rjmp	.+6      	; 0x43f0 <_ZN9Interface6TasterEv+0x50>
	}
	else if (debounce(&PIND,PIND5))
	{
		taste = '2';
    43ea:	12 e3       	ldi	r17, 0x32	; 50
    43ec:	01 c0       	rjmp	.+2      	; 0x43f0 <_ZN9Interface6TasterEv+0x50>
	}
	else if (debounce(&PIND,PIND6))
	{
		taste = '1';
    43ee:	11 e3       	ldi	r17, 0x31	; 49
	}
	PORTD &= ~(1<<PORTD3);
    43f0:	5b 98       	cbi	0x0b, 3	; 11
	
	//zweite Zeile
	PORTD |= (1<<PORTD2);
    43f2:	5a 9a       	sbi	0x0b, 2	; 11
    43f4:	82 e0       	ldi	r24, 0x02	; 2
    43f6:	8a 95       	dec	r24
    43f8:	f1 f7       	brne	.-4      	; 0x43f6 <_ZN9Interface6TasterEv+0x56>
    43fa:	00 c0       	rjmp	.+0      	; 0x43fc <_ZN9Interface6TasterEv+0x5c>
	_delay_us(1);
	if(debounce(&PIND,PIND4)){
    43fc:	44 e0       	ldi	r20, 0x04	; 4
    43fe:	69 e2       	ldi	r22, 0x29	; 41
    4400:	70 e0       	ldi	r23, 0x00	; 0
    4402:	ce 01       	movw	r24, r28
    4404:	0e 94 aa 21 	call	0x4354	; 0x4354 <_ZN9Interface8debounceEPVhh>
    4408:	81 11       	cpse	r24, r1
    440a:	11 c0       	rjmp	.+34     	; 0x442e <_ZN9Interface6TasterEv+0x8e>
		taste = '6';
	}
	else if (debounce(&PIND,PIND5))
    440c:	45 e0       	ldi	r20, 0x05	; 5
    440e:	69 e2       	ldi	r22, 0x29	; 41
    4410:	70 e0       	ldi	r23, 0x00	; 0
    4412:	ce 01       	movw	r24, r28
    4414:	0e 94 aa 21 	call	0x4354	; 0x4354 <_ZN9Interface8debounceEPVhh>
    4418:	81 11       	cpse	r24, r1
    441a:	0b c0       	rjmp	.+22     	; 0x4432 <_ZN9Interface6TasterEv+0x92>
	{
		taste = '5';
	}
	else if (debounce(&PIND,PIND6))
    441c:	46 e0       	ldi	r20, 0x06	; 6
    441e:	69 e2       	ldi	r22, 0x29	; 41
    4420:	70 e0       	ldi	r23, 0x00	; 0
    4422:	ce 01       	movw	r24, r28
    4424:	0e 94 aa 21 	call	0x4354	; 0x4354 <_ZN9Interface8debounceEPVhh>
    4428:	81 11       	cpse	r24, r1
    442a:	05 c0       	rjmp	.+10     	; 0x4436 <_ZN9Interface6TasterEv+0x96>
    442c:	05 c0       	rjmp	.+10     	; 0x4438 <_ZN9Interface6TasterEv+0x98>
	
	//zweite Zeile
	PORTD |= (1<<PORTD2);
	_delay_us(1);
	if(debounce(&PIND,PIND4)){
		taste = '6';
    442e:	16 e3       	ldi	r17, 0x36	; 54
    4430:	03 c0       	rjmp	.+6      	; 0x4438 <_ZN9Interface6TasterEv+0x98>
	}
	else if (debounce(&PIND,PIND5))
	{
		taste = '5';
    4432:	15 e3       	ldi	r17, 0x35	; 53
    4434:	01 c0       	rjmp	.+2      	; 0x4438 <_ZN9Interface6TasterEv+0x98>
	}
	else if (debounce(&PIND,PIND6))
	{
		taste = '4';
    4436:	14 e3       	ldi	r17, 0x34	; 52
	}
	PORTD &= ~(1<<PORTD2);
    4438:	5a 98       	cbi	0x0b, 2	; 11
	
	//dritte Zeile
	PORTD |= (1<<PORTD1);
    443a:	59 9a       	sbi	0x0b, 1	; 11
    443c:	82 e0       	ldi	r24, 0x02	; 2
    443e:	8a 95       	dec	r24
    4440:	f1 f7       	brne	.-4      	; 0x443e <_ZN9Interface6TasterEv+0x9e>
    4442:	00 c0       	rjmp	.+0      	; 0x4444 <_ZN9Interface6TasterEv+0xa4>
	_delay_us(1);
	if(debounce(&PIND,PIND4)){
    4444:	44 e0       	ldi	r20, 0x04	; 4
    4446:	69 e2       	ldi	r22, 0x29	; 41
    4448:	70 e0       	ldi	r23, 0x00	; 0
    444a:	ce 01       	movw	r24, r28
    444c:	0e 94 aa 21 	call	0x4354	; 0x4354 <_ZN9Interface8debounceEPVhh>
    4450:	81 11       	cpse	r24, r1
    4452:	11 c0       	rjmp	.+34     	; 0x4476 <_ZN9Interface6TasterEv+0xd6>
		taste = '9';
	}
	else if (debounce(&PIND,PIND5))
    4454:	45 e0       	ldi	r20, 0x05	; 5
    4456:	69 e2       	ldi	r22, 0x29	; 41
    4458:	70 e0       	ldi	r23, 0x00	; 0
    445a:	ce 01       	movw	r24, r28
    445c:	0e 94 aa 21 	call	0x4354	; 0x4354 <_ZN9Interface8debounceEPVhh>
    4460:	81 11       	cpse	r24, r1
    4462:	0b c0       	rjmp	.+22     	; 0x447a <_ZN9Interface6TasterEv+0xda>
	{
		taste = '8';
	}
	else if (debounce(&PIND,PIND6))
    4464:	46 e0       	ldi	r20, 0x06	; 6
    4466:	69 e2       	ldi	r22, 0x29	; 41
    4468:	70 e0       	ldi	r23, 0x00	; 0
    446a:	ce 01       	movw	r24, r28
    446c:	0e 94 aa 21 	call	0x4354	; 0x4354 <_ZN9Interface8debounceEPVhh>
    4470:	81 11       	cpse	r24, r1
    4472:	05 c0       	rjmp	.+10     	; 0x447e <_ZN9Interface6TasterEv+0xde>
    4474:	05 c0       	rjmp	.+10     	; 0x4480 <_ZN9Interface6TasterEv+0xe0>
	
	//dritte Zeile
	PORTD |= (1<<PORTD1);
	_delay_us(1);
	if(debounce(&PIND,PIND4)){
		taste = '9';
    4476:	19 e3       	ldi	r17, 0x39	; 57
    4478:	03 c0       	rjmp	.+6      	; 0x4480 <_ZN9Interface6TasterEv+0xe0>
	}
	else if (debounce(&PIND,PIND5))
	{
		taste = '8';
    447a:	18 e3       	ldi	r17, 0x38	; 56
    447c:	01 c0       	rjmp	.+2      	; 0x4480 <_ZN9Interface6TasterEv+0xe0>
	}
	else if (debounce(&PIND,PIND6))
	{
		taste = '7';
    447e:	17 e3       	ldi	r17, 0x37	; 55
	}
	PORTD &= ~(1<<PORT1);
    4480:	59 98       	cbi	0x0b, 1	; 11
	
	//vierte Zeile
	PORTD |= (1<<PORTD0);
    4482:	58 9a       	sbi	0x0b, 0	; 11
    4484:	82 e0       	ldi	r24, 0x02	; 2
    4486:	8a 95       	dec	r24
    4488:	f1 f7       	brne	.-4      	; 0x4486 <_ZN9Interface6TasterEv+0xe6>
    448a:	00 c0       	rjmp	.+0      	; 0x448c <_ZN9Interface6TasterEv+0xec>
	_delay_us(1);
	if(debounce(&PIND,PIND4)){
    448c:	44 e0       	ldi	r20, 0x04	; 4
    448e:	69 e2       	ldi	r22, 0x29	; 41
    4490:	70 e0       	ldi	r23, 0x00	; 0
    4492:	ce 01       	movw	r24, r28
    4494:	0e 94 aa 21 	call	0x4354	; 0x4354 <_ZN9Interface8debounceEPVhh>
    4498:	81 11       	cpse	r24, r1
    449a:	11 c0       	rjmp	.+34     	; 0x44be <_ZN9Interface6TasterEv+0x11e>
		taste = '#';
	}
	else if (debounce(&PIND,PIND5))
    449c:	45 e0       	ldi	r20, 0x05	; 5
    449e:	69 e2       	ldi	r22, 0x29	; 41
    44a0:	70 e0       	ldi	r23, 0x00	; 0
    44a2:	ce 01       	movw	r24, r28
    44a4:	0e 94 aa 21 	call	0x4354	; 0x4354 <_ZN9Interface8debounceEPVhh>
    44a8:	81 11       	cpse	r24, r1
    44aa:	0b c0       	rjmp	.+22     	; 0x44c2 <_ZN9Interface6TasterEv+0x122>
	{
		taste = '0';
	}
	else if (debounce(&PIND,PIND6))
    44ac:	46 e0       	ldi	r20, 0x06	; 6
    44ae:	69 e2       	ldi	r22, 0x29	; 41
    44b0:	70 e0       	ldi	r23, 0x00	; 0
    44b2:	ce 01       	movw	r24, r28
    44b4:	0e 94 aa 21 	call	0x4354	; 0x4354 <_ZN9Interface8debounceEPVhh>
    44b8:	81 11       	cpse	r24, r1
    44ba:	05 c0       	rjmp	.+10     	; 0x44c6 <_ZN9Interface6TasterEv+0x126>
    44bc:	05 c0       	rjmp	.+10     	; 0x44c8 <_ZN9Interface6TasterEv+0x128>
	
	//vierte Zeile
	PORTD |= (1<<PORTD0);
	_delay_us(1);
	if(debounce(&PIND,PIND4)){
		taste = '#';
    44be:	13 e2       	ldi	r17, 0x23	; 35
    44c0:	03 c0       	rjmp	.+6      	; 0x44c8 <_ZN9Interface6TasterEv+0x128>
	}
	else if (debounce(&PIND,PIND5))
	{
		taste = '0';
    44c2:	10 e3       	ldi	r17, 0x30	; 48
    44c4:	01 c0       	rjmp	.+2      	; 0x44c8 <_ZN9Interface6TasterEv+0x128>
	}
	else if (debounce(&PIND,PIND6))
	{
		taste = '*';
    44c6:	1a e2       	ldi	r17, 0x2A	; 42
	}
	PORTD &= ~(1<<PORTD0);
    44c8:	58 98       	cbi	0x0b, 0	; 11
	
	return taste;
}
    44ca:	81 2f       	mov	r24, r17
    44cc:	df 91       	pop	r29
    44ce:	cf 91       	pop	r28
    44d0:	1f 91       	pop	r17
    44d2:	08 95       	ret

000044d4 <_ZN9Interface17ZahlenausTastaturEv>:

uint8_t Interface::ZahlenausTastatur(){
    44d4:	cf 93       	push	r28
    44d6:	df 93       	push	r29
    44d8:	ec 01       	movw	r28, r24
	while(true){
		uint8_t taste = Taster();
    44da:	ce 01       	movw	r24, r28
    44dc:	0e 94 d0 21 	call	0x43a0	; 0x43a0 <_ZN9Interface6TasterEv>
		if(taste>='0' && taste<='9'){
    44e0:	80 53       	subi	r24, 0x30	; 48
    44e2:	8a 30       	cpi	r24, 0x0A	; 10
    44e4:	d0 f7       	brcc	.-12     	; 0x44da <_ZN9Interface17ZahlenausTastaturEv+0x6>
			return taste - '0';
		}
	}
}
    44e6:	df 91       	pop	r29
    44e8:	cf 91       	pop	r28
    44ea:	08 95       	ret

000044ec <_ZN7KompassD1Ev>:
		offset[i]=0;
	}
} //Kompass

// default destructor
Kompass::~Kompass()
    44ec:	06 96       	adiw	r24, 0x06	; 6
    44ee:	0e 94 7e 21 	call	0x42fc	; 0x42fc <_ZN3I2CD1Ev>
    44f2:	08 95       	ret

000044f4 <_ZN7Kompass16HMC5883L_commandEhh>:
{
} //~Kompass

void Kompass::HMC5883L_command(uint8_t adresse, uint8_t command){
    44f4:	0f 93       	push	r16
    44f6:	1f 93       	push	r17
    44f8:	cf 93       	push	r28
    44fa:	df 93       	push	r29
    44fc:	06 2f       	mov	r16, r22
    44fe:	14 2f       	mov	r17, r20
	i2c.twi_start();
    4500:	ec 01       	movw	r28, r24
    4502:	26 96       	adiw	r28, 0x06	; 6
    4504:	ce 01       	movw	r24, r28
    4506:	0e 94 7f 21 	call	0x42fe	; 0x42fe <_ZN3I2C9twi_startEv>
	i2c.twi_write(HMCWRITEADRESSE);
    450a:	6c e3       	ldi	r22, 0x3C	; 60
    450c:	ce 01       	movw	r24, r28
    450e:	0e 94 87 21 	call	0x430e	; 0x430e <_ZN3I2C9twi_writeEh>
	i2c.twi_write(adresse);
    4512:	60 2f       	mov	r22, r16
    4514:	ce 01       	movw	r24, r28
    4516:	0e 94 87 21 	call	0x430e	; 0x430e <_ZN3I2C9twi_writeEh>
	i2c.twi_write(command);
    451a:	61 2f       	mov	r22, r17
    451c:	ce 01       	movw	r24, r28
    451e:	0e 94 87 21 	call	0x430e	; 0x430e <_ZN3I2C9twi_writeEh>
	i2c.twi_stop();
    4522:	ce 01       	movw	r24, r28
    4524:	0e 94 83 21 	call	0x4306	; 0x4306 <_ZN3I2C8twi_stopEv>
}
    4528:	df 91       	pop	r29
    452a:	cf 91       	pop	r28
    452c:	1f 91       	pop	r17
    452e:	0f 91       	pop	r16
    4530:	08 95       	ret

00004532 <_ZN7KompassC1Ev>:


#include "Kompass.h"

// default constructor
Kompass::Kompass()
    4532:	cf 93       	push	r28
    4534:	df 93       	push	r29
    4536:	ec 01       	movw	r28, r24
    4538:	06 96       	adiw	r24, 0x06	; 6
    453a:	0e 94 7a 21 	call	0x42f4	; 0x42f4 <_ZN3I2CC1Ev>
{
	//Config Register A
	HMC5883L_command(0x00, HMCSAMPLES8+HMCDATARATE15+HMCMEASUREMODENORMAL);
    453e:	40 e7       	ldi	r20, 0x70	; 112
    4540:	60 e0       	ldi	r22, 0x00	; 0
    4542:	ce 01       	movw	r24, r28
    4544:	0e 94 7a 22 	call	0x44f4	; 0x44f4 <_ZN7Kompass16HMC5883L_commandEhh>

	//Config Gain
	HMC5883L_command(0x01, HMCGAIN1090);
    4548:	40 e2       	ldi	r20, 0x20	; 32
    454a:	61 e0       	ldi	r22, 0x01	; 1
    454c:	ce 01       	movw	r24, r28
    454e:	0e 94 7a 22 	call	0x44f4	; 0x44f4 <_ZN7Kompass16HMC5883L_commandEhh>

	//Set Mode auf single
	HMC5883L_command(0x02, HMCSIGLEMODE);
    4552:	41 e0       	ldi	r20, 0x01	; 1
    4554:	62 e0       	ldi	r22, 0x02	; 2
    4556:	ce 01       	movw	r24, r28
    4558:	0e 94 7a 22 	call	0x44f4	; 0x44f4 <_ZN7Kompass16HMC5883L_commandEhh>
	//Variablen
	for(uint8_t i=0;i<3;i++){
		achsen[i]=0;
    455c:	19 82       	std	Y+1, r1	; 0x01
    455e:	18 82       	st	Y, r1
		offset[i]=0;
    4560:	18 86       	std	Y+8, r1	; 0x08
    4562:	1f 82       	std	Y+7, r1	; 0x07

	//Set Mode auf single
	HMC5883L_command(0x02, HMCSIGLEMODE);
	//Variablen
	for(uint8_t i=0;i<3;i++){
		achsen[i]=0;
    4564:	1b 82       	std	Y+3, r1	; 0x03
    4566:	1a 82       	std	Y+2, r1	; 0x02
		offset[i]=0;
    4568:	1a 86       	std	Y+10, r1	; 0x0a
    456a:	19 86       	std	Y+9, r1	; 0x09

	//Set Mode auf single
	HMC5883L_command(0x02, HMCSIGLEMODE);
	//Variablen
	for(uint8_t i=0;i<3;i++){
		achsen[i]=0;
    456c:	1d 82       	std	Y+5, r1	; 0x05
    456e:	1c 82       	std	Y+4, r1	; 0x04
		offset[i]=0;
    4570:	1c 86       	std	Y+12, r1	; 0x0c
    4572:	1b 86       	std	Y+11, r1	; 0x0b
	}
} //Kompass
    4574:	df 91       	pop	r29
    4576:	cf 91       	pop	r28
    4578:	08 95       	ret

0000457a <_ZN7Kompass20HMC5883L_readHeadingEv>:
		achsen[i]=0;
		offset[i]=0;
	}
}

uint8_t Kompass::HMC5883L_readHeading(){
    457a:	bf 92       	push	r11
    457c:	cf 92       	push	r12
    457e:	df 92       	push	r13
    4580:	ef 92       	push	r14
    4582:	ff 92       	push	r15
    4584:	0f 93       	push	r16
    4586:	1f 93       	push	r17
    4588:	cf 93       	push	r28
    458a:	df 93       	push	r29
    458c:	00 d0       	rcall	.+0      	; 0x458e <_ZN7Kompass20HMC5883L_readHeadingEv+0x14>
    458e:	00 d0       	rcall	.+0      	; 0x4590 <_ZN7Kompass20HMC5883L_readHeadingEv+0x16>
    4590:	00 d0       	rcall	.+0      	; 0x4592 <_ZN7Kompass20HMC5883L_readHeadingEv+0x18>
    4592:	cd b7       	in	r28, 0x3d	; 61
    4594:	de b7       	in	r29, 0x3e	; 62
    4596:	6c 01       	movw	r12, r24
	cli();
    4598:	f8 94       	cli
	uint8_t heading[6];
	i2c.twi_start();
    459a:	7c 01       	movw	r14, r24
    459c:	26 e0       	ldi	r18, 0x06	; 6
    459e:	e2 0e       	add	r14, r18
    45a0:	f1 1c       	adc	r15, r1
    45a2:	c7 01       	movw	r24, r14
    45a4:	0e 94 7f 21 	call	0x42fe	; 0x42fe <_ZN3I2C9twi_startEv>
	i2c.twi_write(HMCWRITEADRESSE);
    45a8:	6c e3       	ldi	r22, 0x3C	; 60
    45aa:	c7 01       	movw	r24, r14
    45ac:	0e 94 87 21 	call	0x430e	; 0x430e <_ZN3I2C9twi_writeEh>
	i2c.twi_write(0x03);
    45b0:	63 e0       	ldi	r22, 0x03	; 3
    45b2:	c7 01       	movw	r24, r14
    45b4:	0e 94 87 21 	call	0x430e	; 0x430e <_ZN3I2C9twi_writeEh>
	i2c.twi_start();
    45b8:	c7 01       	movw	r24, r14
    45ba:	0e 94 7f 21 	call	0x42fe	; 0x42fe <_ZN3I2C9twi_startEv>
	i2c.twi_write(HMCREADADRESSE);
    45be:	6d e3       	ldi	r22, 0x3D	; 61
    45c0:	c7 01       	movw	r24, r14
    45c2:	0e 94 87 21 	call	0x430e	; 0x430e <_ZN3I2C9twi_writeEh>
    45c6:	8e 01       	movw	r16, r28
    45c8:	0f 5f       	subi	r16, 0xFF	; 255
    45ca:	1f 4f       	sbci	r17, 0xFF	; 255
	
	for(uint8_t i=0; i<6;i++){
    45cc:	b1 2c       	mov	r11, r1
		if (i<5)
    45ce:	84 e0       	ldi	r24, 0x04	; 4
    45d0:	8b 15       	cp	r24, r11
    45d2:	38 f0       	brcs	.+14     	; 0x45e2 <_ZN7Kompass20HMC5883L_readHeadingEv+0x68>
		{
			heading[i]=i2c.twi_read(1);
    45d4:	61 e0       	ldi	r22, 0x01	; 1
    45d6:	c7 01       	movw	r24, r14
    45d8:	0e 94 97 21 	call	0x432e	; 0x432e <_ZN3I2C8twi_readEh>
    45dc:	f8 01       	movw	r30, r16
    45de:	80 83       	st	Z, r24
    45e0:	06 c0       	rjmp	.+12     	; 0x45ee <_ZN7Kompass20HMC5883L_readHeadingEv+0x74>
		}
		else
		{
			heading[i]=i2c.twi_read(0);
    45e2:	60 e0       	ldi	r22, 0x00	; 0
    45e4:	c7 01       	movw	r24, r14
    45e6:	0e 94 97 21 	call	0x432e	; 0x432e <_ZN3I2C8twi_readEh>
    45ea:	f8 01       	movw	r30, r16
    45ec:	80 83       	st	Z, r24
	i2c.twi_write(HMCWRITEADRESSE);
	i2c.twi_write(0x03);
	i2c.twi_start();
	i2c.twi_write(HMCREADADRESSE);
	
	for(uint8_t i=0; i<6;i++){
    45ee:	b3 94       	inc	r11
    45f0:	0f 5f       	subi	r16, 0xFF	; 255
    45f2:	1f 4f       	sbci	r17, 0xFF	; 255
    45f4:	f6 e0       	ldi	r31, 0x06	; 6
    45f6:	bf 12       	cpse	r11, r31
    45f8:	ea cf       	rjmp	.-44     	; 0x45ce <_ZN7Kompass20HMC5883L_readHeadingEv+0x54>
		{
			heading[i]=i2c.twi_read(0);
		}
		
	}
	i2c.twi_stop();
    45fa:	c7 01       	movw	r24, r14
    45fc:	0e 94 83 21 	call	0x4306	; 0x4306 <_ZN3I2C8twi_stopEv>
	achsen[0] =(int16_t) (heading[1] | (heading[0] << 8));
    4600:	89 81       	ldd	r24, Y+1	; 0x01
    4602:	90 e0       	ldi	r25, 0x00	; 0
    4604:	98 2f       	mov	r25, r24
    4606:	88 27       	eor	r24, r24
    4608:	2a 81       	ldd	r18, Y+2	; 0x02
    460a:	82 2b       	or	r24, r18
    460c:	f6 01       	movw	r30, r12
    460e:	91 83       	std	Z+1, r25	; 0x01
    4610:	80 83       	st	Z, r24
	achsen[2] =(int16_t) (heading[3] | (heading[2] << 8));
    4612:	8b 81       	ldd	r24, Y+3	; 0x03
    4614:	90 e0       	ldi	r25, 0x00	; 0
    4616:	98 2f       	mov	r25, r24
    4618:	88 27       	eor	r24, r24
    461a:	2c 81       	ldd	r18, Y+4	; 0x04
    461c:	82 2b       	or	r24, r18
    461e:	95 83       	std	Z+5, r25	; 0x05
    4620:	84 83       	std	Z+4, r24	; 0x04
	achsen[1] =(int16_t) (heading[5] | (heading[4] << 8));
    4622:	8d 81       	ldd	r24, Y+5	; 0x05
    4624:	90 e0       	ldi	r25, 0x00	; 0
    4626:	98 2f       	mov	r25, r24
    4628:	88 27       	eor	r24, r24
    462a:	2e 81       	ldd	r18, Y+6	; 0x06
    462c:	82 2b       	or	r24, r18
    462e:	93 83       	std	Z+3, r25	; 0x03
    4630:	82 83       	std	Z+2, r24	; 0x02
	sei();
    4632:	78 94       	sei
	if (achsen[0]==-4096 || achsen[1]==-4096 || achsen[2]==-4096)
    4634:	f6 01       	movw	r30, r12
    4636:	80 81       	ld	r24, Z
    4638:	91 81       	ldd	r25, Z+1	; 0x01
    463a:	81 15       	cp	r24, r1
    463c:	90 4f       	sbci	r25, 0xF0	; 240
    463e:	09 f4       	brne	.+2      	; 0x4642 <_ZN7Kompass20HMC5883L_readHeadingEv+0xc8>
    4640:	47 c0       	rjmp	.+142    	; 0x46d0 <_ZN7Kompass20HMC5883L_readHeadingEv+0x156>
    4642:	f6 01       	movw	r30, r12
    4644:	82 81       	ldd	r24, Z+2	; 0x02
    4646:	93 81       	ldd	r25, Z+3	; 0x03
    4648:	81 15       	cp	r24, r1
    464a:	90 4f       	sbci	r25, 0xF0	; 240
    464c:	09 f4       	brne	.+2      	; 0x4650 <_ZN7Kompass20HMC5883L_readHeadingEv+0xd6>
    464e:	42 c0       	rjmp	.+132    	; 0x46d4 <_ZN7Kompass20HMC5883L_readHeadingEv+0x15a>
    4650:	f6 01       	movw	r30, r12
    4652:	84 81       	ldd	r24, Z+4	; 0x04
    4654:	95 81       	ldd	r25, Z+5	; 0x05
    4656:	81 15       	cp	r24, r1
    4658:	90 4f       	sbci	r25, 0xF0	; 240
    465a:	f1 f1       	breq	.+124    	; 0x46d8 <_ZN7Kompass20HMC5883L_readHeadingEv+0x15e>
    465c:	f6 01       	movw	r30, r12
    465e:	83 e0       	ldi	r24, 0x03	; 3
    4660:	df 01       	movw	r26, r30
	}
	//Kallibrierung durchfuehren, jedes mal, wenn eine abfrage stattfindet
	//somit passive kalibrierung
	else{
		for(uint8_t i=0;i<3;i++){
			if(achsen[i]>max[i]){
    4662:	20 81       	ld	r18, Z
    4664:	31 81       	ldd	r19, Z+1	; 0x01
    4666:	45 85       	ldd	r20, Z+13	; 0x0d
    4668:	56 85       	ldd	r21, Z+14	; 0x0e
    466a:	42 17       	cp	r20, r18
    466c:	53 07       	cpc	r21, r19
    466e:	8c f4       	brge	.+34     	; 0x4692 <_ZN7Kompass20HMC5883L_readHeadingEv+0x118>
				max[i]=achsen[i];
    4670:	36 87       	std	Z+14, r19	; 0x0e
    4672:	25 87       	std	Z+13, r18	; 0x0d
				offset[i]=(max[i]+min[i])/2;
    4674:	43 89       	ldd	r20, Z+19	; 0x13
    4676:	54 89       	ldd	r21, Z+20	; 0x14
    4678:	24 0f       	add	r18, r20
    467a:	35 1f       	adc	r19, r21
    467c:	33 23       	and	r19, r19
    467e:	14 f4       	brge	.+4      	; 0x4684 <_ZN7Kompass20HMC5883L_readHeadingEv+0x10a>
    4680:	2f 5f       	subi	r18, 0xFF	; 255
    4682:	3f 4f       	sbci	r19, 0xFF	; 255
    4684:	35 95       	asr	r19
    4686:	27 95       	ror	r18
    4688:	18 96       	adiw	r26, 0x08	; 8
    468a:	3c 93       	st	X, r19
    468c:	2e 93       	st	-X, r18
    468e:	17 97       	sbiw	r26, 0x07	; 7
    4690:	1a c0       	rjmp	.+52     	; 0x46c6 <_ZN7Kompass20HMC5883L_readHeadingEv+0x14c>
			}
			else if(achsen[i]<min[i]){
    4692:	63 89       	ldd	r22, Z+19	; 0x13
    4694:	74 89       	ldd	r23, Z+20	; 0x14
    4696:	26 17       	cp	r18, r22
    4698:	37 07       	cpc	r19, r23
    469a:	7c f4       	brge	.+30     	; 0x46ba <_ZN7Kompass20HMC5883L_readHeadingEv+0x140>
				min[i]=achsen[i];
    469c:	34 8b       	std	Z+20, r19	; 0x14
    469e:	23 8b       	std	Z+19, r18	; 0x13
				offset[i]=(max[i]+min[i])/2;
    46a0:	24 0f       	add	r18, r20
    46a2:	35 1f       	adc	r19, r21
    46a4:	33 23       	and	r19, r19
    46a6:	14 f4       	brge	.+4      	; 0x46ac <_ZN7Kompass20HMC5883L_readHeadingEv+0x132>
    46a8:	2f 5f       	subi	r18, 0xFF	; 255
    46aa:	3f 4f       	sbci	r19, 0xFF	; 255
    46ac:	35 95       	asr	r19
    46ae:	27 95       	ror	r18
    46b0:	18 96       	adiw	r26, 0x08	; 8
    46b2:	3c 93       	st	X, r19
    46b4:	2e 93       	st	-X, r18
    46b6:	17 97       	sbiw	r26, 0x07	; 7
    46b8:	06 c0       	rjmp	.+12     	; 0x46c6 <_ZN7Kompass20HMC5883L_readHeadingEv+0x14c>
			}
			else {
				achsen[i]-=offset[i];
    46ba:	47 81       	ldd	r20, Z+7	; 0x07
    46bc:	50 85       	ldd	r21, Z+8	; 0x08
    46be:	24 1b       	sub	r18, r20
    46c0:	35 0b       	sbc	r19, r21
    46c2:	31 83       	std	Z+1, r19	; 0x01
    46c4:	20 83       	st	Z, r18
    46c6:	81 50       	subi	r24, 0x01	; 1
    46c8:	32 96       	adiw	r30, 0x02	; 2
		return 1;
	}
	//Kallibrierung durchfuehren, jedes mal, wenn eine abfrage stattfindet
	//somit passive kalibrierung
	else{
		for(uint8_t i=0;i<3;i++){
    46ca:	81 11       	cpse	r24, r1
    46cc:	c9 cf       	rjmp	.-110    	; 0x4660 <_ZN7Kompass20HMC5883L_readHeadingEv+0xe6>
    46ce:	05 c0       	rjmp	.+10     	; 0x46da <_ZN7Kompass20HMC5883L_readHeadingEv+0x160>
	achsen[2] =(int16_t) (heading[3] | (heading[2] << 8));
	achsen[1] =(int16_t) (heading[5] | (heading[4] << 8));
	sei();
	if (achsen[0]==-4096 || achsen[1]==-4096 || achsen[2]==-4096)
	{
		return 1;
    46d0:	81 e0       	ldi	r24, 0x01	; 1
    46d2:	03 c0       	rjmp	.+6      	; 0x46da <_ZN7Kompass20HMC5883L_readHeadingEv+0x160>
    46d4:	81 e0       	ldi	r24, 0x01	; 1
    46d6:	01 c0       	rjmp	.+2      	; 0x46da <_ZN7Kompass20HMC5883L_readHeadingEv+0x160>
    46d8:	81 e0       	ldi	r24, 0x01	; 1
			}
		}
	}
	
	return 0;
}
    46da:	26 96       	adiw	r28, 0x06	; 6
    46dc:	0f b6       	in	r0, 0x3f	; 63
    46de:	f8 94       	cli
    46e0:	de bf       	out	0x3e, r29	; 62
    46e2:	0f be       	out	0x3f, r0	; 63
    46e4:	cd bf       	out	0x3d, r28	; 61
    46e6:	df 91       	pop	r29
    46e8:	cf 91       	pop	r28
    46ea:	1f 91       	pop	r17
    46ec:	0f 91       	pop	r16
    46ee:	ff 90       	pop	r15
    46f0:	ef 90       	pop	r14
    46f2:	df 90       	pop	r13
    46f4:	cf 90       	pop	r12
    46f6:	bf 90       	pop	r11
    46f8:	08 95       	ret

000046fa <_ZN7Kompass5angleEv>:

double Kompass::angle(){
    46fa:	cf 92       	push	r12
    46fc:	df 92       	push	r13
    46fe:	ef 92       	push	r14
    4700:	ff 92       	push	r15
    4702:	cf 93       	push	r28
    4704:	df 93       	push	r29
    4706:	ec 01       	movw	r28, r24
	double angle=0;
	if (HMC5883L_readHeading())
    4708:	0e 94 bd 22 	call	0x457a	; 0x457a <_ZN7Kompass20HMC5883L_readHeadingEv>
    470c:	81 11       	cpse	r24, r1
    470e:	57 c0       	rjmp	.+174    	; 0x47be <_ZN7Kompass5angleEv+0xc4>
	{
		angle=-1.0;
	}
	else{
		angle=atan2f(achsen[0],achsen[2])*180.0/M_PI+180.0;
    4710:	6c 81       	ldd	r22, Y+4	; 0x04
    4712:	7d 81       	ldd	r23, Y+5	; 0x05
    4714:	88 27       	eor	r24, r24
    4716:	77 fd       	sbrc	r23, 7
    4718:	80 95       	com	r24
    471a:	98 2f       	mov	r25, r24
    471c:	0e 94 79 29 	call	0x52f2	; 0x52f2 <__floatsisf>
    4720:	6b 01       	movw	r12, r22
    4722:	7c 01       	movw	r14, r24
    4724:	68 81       	ld	r22, Y
    4726:	79 81       	ldd	r23, Y+1	; 0x01
    4728:	88 27       	eor	r24, r24
    472a:	77 fd       	sbrc	r23, 7
    472c:	80 95       	com	r24
    472e:	98 2f       	mov	r25, r24
    4730:	0e 94 79 29 	call	0x52f2	; 0x52f2 <__floatsisf>
    4734:	a7 01       	movw	r20, r14
    4736:	96 01       	movw	r18, r12
    4738:	0e 94 84 28 	call	0x5108	; 0x5108 <atan2>
    473c:	20 e0       	ldi	r18, 0x00	; 0
    473e:	30 e0       	ldi	r19, 0x00	; 0
    4740:	44 e3       	ldi	r20, 0x34	; 52
    4742:	53 e4       	ldi	r21, 0x43	; 67
    4744:	0e 94 d7 2a 	call	0x55ae	; 0x55ae <__mulsf3>
    4748:	2b ed       	ldi	r18, 0xDB	; 219
    474a:	3f e0       	ldi	r19, 0x0F	; 15
    474c:	49 e4       	ldi	r20, 0x49	; 73
    474e:	50 e4       	ldi	r21, 0x40	; 64
    4750:	0e 94 de 28 	call	0x51bc	; 0x51bc <__divsf3>
    4754:	20 e0       	ldi	r18, 0x00	; 0
    4756:	30 e0       	ldi	r19, 0x00	; 0
    4758:	44 e3       	ldi	r20, 0x34	; 52
    475a:	53 e4       	ldi	r21, 0x43	; 67
    475c:	0e 94 11 28 	call	0x5022	; 0x5022 <__addsf3>
		//deklination
		angle+=2.35;
    4760:	26 e6       	ldi	r18, 0x66	; 102
    4762:	36 e6       	ldi	r19, 0x66	; 102
    4764:	46 e1       	ldi	r20, 0x16	; 22
    4766:	50 e4       	ldi	r21, 0x40	; 64
    4768:	0e 94 11 28 	call	0x5022	; 0x5022 <__addsf3>
    476c:	6b 01       	movw	r12, r22
    476e:	7c 01       	movw	r14, r24
		//Normierung auf %360
		if (angle>=360)
    4770:	20 e0       	ldi	r18, 0x00	; 0
    4772:	30 e0       	ldi	r19, 0x00	; 0
    4774:	44 eb       	ldi	r20, 0xB4	; 180
    4776:	53 e4       	ldi	r21, 0x43	; 67
    4778:	0e 94 87 2a 	call	0x550e	; 0x550e <__gesf2>
    477c:	88 23       	and	r24, r24
    477e:	5c f0       	brlt	.+22     	; 0x4796 <_ZN7Kompass5angleEv+0x9c>
		{
			angle-=360;
    4780:	20 e0       	ldi	r18, 0x00	; 0
    4782:	30 e0       	ldi	r19, 0x00	; 0
    4784:	44 eb       	ldi	r20, 0xB4	; 180
    4786:	53 e4       	ldi	r21, 0x43	; 67
    4788:	c7 01       	movw	r24, r14
    478a:	b6 01       	movw	r22, r12
    478c:	0e 94 10 28 	call	0x5020	; 0x5020 <__subsf3>
    4790:	6b 01       	movw	r12, r22
    4792:	7c 01       	movw	r14, r24
    4794:	1c c0       	rjmp	.+56     	; 0x47ce <_ZN7Kompass5angleEv+0xd4>
		}
		else if (angle < 0)
    4796:	20 e0       	ldi	r18, 0x00	; 0
    4798:	30 e0       	ldi	r19, 0x00	; 0
    479a:	a9 01       	movw	r20, r18
    479c:	c7 01       	movw	r24, r14
    479e:	b6 01       	movw	r22, r12
    47a0:	0e 94 d7 28 	call	0x51ae	; 0x51ae <__cmpsf2>
    47a4:	88 23       	and	r24, r24
    47a6:	9c f4       	brge	.+38     	; 0x47ce <_ZN7Kompass5angleEv+0xd4>
		{
			angle+=360;
    47a8:	20 e0       	ldi	r18, 0x00	; 0
    47aa:	30 e0       	ldi	r19, 0x00	; 0
    47ac:	44 eb       	ldi	r20, 0xB4	; 180
    47ae:	53 e4       	ldi	r21, 0x43	; 67
    47b0:	c7 01       	movw	r24, r14
    47b2:	b6 01       	movw	r22, r12
    47b4:	0e 94 11 28 	call	0x5022	; 0x5022 <__addsf3>
    47b8:	6b 01       	movw	r12, r22
    47ba:	7c 01       	movw	r14, r24
    47bc:	08 c0       	rjmp	.+16     	; 0x47ce <_ZN7Kompass5angleEv+0xd4>

double Kompass::angle(){
	double angle=0;
	if (HMC5883L_readHeading())
	{
		angle=-1.0;
    47be:	0f 2e       	mov	r0, r31
    47c0:	c1 2c       	mov	r12, r1
    47c2:	d1 2c       	mov	r13, r1
    47c4:	f0 e8       	ldi	r31, 0x80	; 128
    47c6:	ef 2e       	mov	r14, r31
    47c8:	ff eb       	ldi	r31, 0xBF	; 191
    47ca:	ff 2e       	mov	r15, r31
    47cc:	f0 2d       	mov	r31, r0
		{
			angle+=360;
		}
	}
	
	HMC5883L_command(0x02,HMCSIGLEMODE);
    47ce:	41 e0       	ldi	r20, 0x01	; 1
    47d0:	62 e0       	ldi	r22, 0x02	; 2
    47d2:	ce 01       	movw	r24, r28
    47d4:	0e 94 7a 22 	call	0x44f4	; 0x44f4 <_ZN7Kompass16HMC5883L_commandEhh>
	return angle;
}
    47d8:	c7 01       	movw	r24, r14
    47da:	b6 01       	movw	r22, r12
    47dc:	df 91       	pop	r29
    47de:	cf 91       	pop	r28
    47e0:	ff 90       	pop	r15
    47e2:	ef 90       	pop	r14
    47e4:	df 90       	pop	r13
    47e6:	cf 90       	pop	r12
    47e8:	08 95       	ret

000047ea <_ZN7Kompass25kallibrierung_ruecksetzenEv>:

void Kompass::kallibrierung_ruecksetzen(){
    47ea:	fc 01       	movw	r30, r24
	for (uint8_t i=0;i<3;i++)
	{
		max[i]=0;
    47ec:	16 86       	std	Z+14, r1	; 0x0e
    47ee:	15 86       	std	Z+13, r1	; 0x0d
		min[i]=0;
    47f0:	14 8a       	std	Z+20, r1	; 0x14
    47f2:	13 8a       	std	Z+19, r1	; 0x13
		offset[i]=0;
    47f4:	10 86       	std	Z+8, r1	; 0x08
    47f6:	17 82       	std	Z+7, r1	; 0x07
}

void Kompass::kallibrierung_ruecksetzen(){
	for (uint8_t i=0;i<3;i++)
	{
		max[i]=0;
    47f8:	10 8a       	std	Z+16, r1	; 0x10
    47fa:	17 86       	std	Z+15, r1	; 0x0f
		min[i]=0;
    47fc:	16 8a       	std	Z+22, r1	; 0x16
    47fe:	15 8a       	std	Z+21, r1	; 0x15
		offset[i]=0;
    4800:	12 86       	std	Z+10, r1	; 0x0a
    4802:	11 86       	std	Z+9, r1	; 0x09
}

void Kompass::kallibrierung_ruecksetzen(){
	for (uint8_t i=0;i<3;i++)
	{
		max[i]=0;
    4804:	12 8a       	std	Z+18, r1	; 0x12
    4806:	11 8a       	std	Z+17, r1	; 0x11
		min[i]=0;
    4808:	10 8e       	std	Z+24, r1	; 0x18
    480a:	17 8a       	std	Z+23, r1	; 0x17
		offset[i]=0;
    480c:	14 86       	std	Z+12, r1	; 0x0c
    480e:	13 86       	std	Z+11, r1	; 0x0b
    4810:	08 95       	ret

00004812 <_ZN6OutputC1Ehh>:
#include "Output.h"

// default constructor
Output::Output(uint8_t Portpraefix, uint8_t Pinnumber)
{
	Pin=Pinnumber;
    4812:	fc 01       	movw	r30, r24
    4814:	41 83       	std	Z+1, r20	; 0x01
	Port=Portpraefix;
    4816:	60 83       	st	Z, r22
	switch (Portpraefix)
    4818:	63 34       	cpi	r22, 0x43	; 67
    481a:	89 f0       	breq	.+34     	; 0x483e <_ZN6OutputC1Ehh+0x2c>
    481c:	64 34       	cpi	r22, 0x44	; 68
    481e:	e1 f0       	breq	.+56     	; 0x4858 <_ZN6OutputC1Ehh+0x46>
    4820:	62 34       	cpi	r22, 0x42	; 66
    4822:	31 f5       	brne	.+76     	; 0x4870 <_ZN6OutputC1Ehh+0x5e>
	{
	case 'B':
		DDRB |= (1<<Pin);
    4824:	24 b1       	in	r18, 0x04	; 4
    4826:	81 e0       	ldi	r24, 0x01	; 1
    4828:	90 e0       	ldi	r25, 0x00	; 0
    482a:	bc 01       	movw	r22, r24
    482c:	02 c0       	rjmp	.+4      	; 0x4832 <_ZN6OutputC1Ehh+0x20>
    482e:	66 0f       	add	r22, r22
    4830:	77 1f       	adc	r23, r23
    4832:	4a 95       	dec	r20
    4834:	e2 f7       	brpl	.-8      	; 0x482e <_ZN6OutputC1Ehh+0x1c>
    4836:	ab 01       	movw	r20, r22
    4838:	42 2b       	or	r20, r18
    483a:	44 b9       	out	0x04, r20	; 4
		break;
    483c:	08 95       	ret
	case 'C':
		DDRC |= (1<<Pin);
    483e:	27 b1       	in	r18, 0x07	; 7
    4840:	81 e0       	ldi	r24, 0x01	; 1
    4842:	90 e0       	ldi	r25, 0x00	; 0
    4844:	fc 01       	movw	r30, r24
    4846:	02 c0       	rjmp	.+4      	; 0x484c <_ZN6OutputC1Ehh+0x3a>
    4848:	ee 0f       	add	r30, r30
    484a:	ff 1f       	adc	r31, r31
    484c:	4a 95       	dec	r20
    484e:	e2 f7       	brpl	.-8      	; 0x4848 <_ZN6OutputC1Ehh+0x36>
    4850:	af 01       	movw	r20, r30
    4852:	42 2b       	or	r20, r18
    4854:	47 b9       	out	0x07, r20	; 7
		break;
    4856:	08 95       	ret
	case 'D':
		DDRD |= (1<<Pin);
    4858:	2a b1       	in	r18, 0x0a	; 10
    485a:	81 e0       	ldi	r24, 0x01	; 1
    485c:	90 e0       	ldi	r25, 0x00	; 0
    485e:	bc 01       	movw	r22, r24
    4860:	02 c0       	rjmp	.+4      	; 0x4866 <_ZN6OutputC1Ehh+0x54>
    4862:	66 0f       	add	r22, r22
    4864:	77 1f       	adc	r23, r23
    4866:	4a 95       	dec	r20
    4868:	e2 f7       	brpl	.-8      	; 0x4862 <_ZN6OutputC1Ehh+0x50>
    486a:	ab 01       	movw	r20, r22
    486c:	42 2b       	or	r20, r18
    486e:	4a b9       	out	0x0a, r20	; 10
    4870:	08 95       	ret

00004872 <_ZN6OutputD1Ev>:
		break;
	}
} //Output

// default destructor
Output::~Output()
    4872:	08 95       	ret

00004874 <_ZN6Output2onEv>:
{
} //~Output

void Output::on(){
	switch (Port)
    4874:	fc 01       	movw	r30, r24
    4876:	20 81       	ld	r18, Z
    4878:	23 34       	cpi	r18, 0x43	; 67
    487a:	91 f0       	breq	.+36     	; 0x48a0 <_ZN6Output2onEv+0x2c>
    487c:	24 34       	cpi	r18, 0x44	; 68
    487e:	f9 f0       	breq	.+62     	; 0x48be <_ZN6Output2onEv+0x4a>
    4880:	22 34       	cpi	r18, 0x42	; 66
    4882:	59 f5       	brne	.+86     	; 0x48da <_ZN6Output2onEv+0x66>
	{
		case 'B':
			PORTB |= (1<<Pin);
    4884:	45 b1       	in	r20, 0x05	; 5
    4886:	21 e0       	ldi	r18, 0x01	; 1
    4888:	30 e0       	ldi	r19, 0x00	; 0
    488a:	b9 01       	movw	r22, r18
    488c:	01 80       	ldd	r0, Z+1	; 0x01
    488e:	02 c0       	rjmp	.+4      	; 0x4894 <_ZN6Output2onEv+0x20>
    4890:	66 0f       	add	r22, r22
    4892:	77 1f       	adc	r23, r23
    4894:	0a 94       	dec	r0
    4896:	e2 f7       	brpl	.-8      	; 0x4890 <_ZN6Output2onEv+0x1c>
    4898:	cb 01       	movw	r24, r22
    489a:	84 2b       	or	r24, r20
    489c:	85 b9       	out	0x05, r24	; 5
			break;
    489e:	08 95       	ret
		case 'C':
			PORTC |= (1<<Pin);
    48a0:	48 b1       	in	r20, 0x08	; 8
    48a2:	21 e0       	ldi	r18, 0x01	; 1
    48a4:	30 e0       	ldi	r19, 0x00	; 0
    48a6:	b9 01       	movw	r22, r18
    48a8:	fc 01       	movw	r30, r24
    48aa:	01 80       	ldd	r0, Z+1	; 0x01
    48ac:	02 c0       	rjmp	.+4      	; 0x48b2 <_ZN6Output2onEv+0x3e>
    48ae:	66 0f       	add	r22, r22
    48b0:	77 1f       	adc	r23, r23
    48b2:	0a 94       	dec	r0
    48b4:	e2 f7       	brpl	.-8      	; 0x48ae <_ZN6Output2onEv+0x3a>
    48b6:	cb 01       	movw	r24, r22
    48b8:	84 2b       	or	r24, r20
    48ba:	88 b9       	out	0x08, r24	; 8
			break;
    48bc:	08 95       	ret
		case 'D':
			PORTD |= (1<<Pin);
    48be:	4b b1       	in	r20, 0x0b	; 11
    48c0:	21 e0       	ldi	r18, 0x01	; 1
    48c2:	30 e0       	ldi	r19, 0x00	; 0
    48c4:	b9 01       	movw	r22, r18
    48c6:	fc 01       	movw	r30, r24
    48c8:	01 80       	ldd	r0, Z+1	; 0x01
    48ca:	02 c0       	rjmp	.+4      	; 0x48d0 <_ZN6Output2onEv+0x5c>
    48cc:	66 0f       	add	r22, r22
    48ce:	77 1f       	adc	r23, r23
    48d0:	0a 94       	dec	r0
    48d2:	e2 f7       	brpl	.-8      	; 0x48cc <_ZN6Output2onEv+0x58>
    48d4:	cb 01       	movw	r24, r22
    48d6:	84 2b       	or	r24, r20
    48d8:	8b b9       	out	0x0b, r24	; 11
    48da:	08 95       	ret

000048dc <_ZN6Output4isonEv>:
	}
}

uint8_t Output::ison(){
	uint8_t returnparam=0;
	switch (Port)
    48dc:	fc 01       	movw	r30, r24
    48de:	20 81       	ld	r18, Z
    48e0:	23 34       	cpi	r18, 0x43	; 67
    48e2:	81 f0       	breq	.+32     	; 0x4904 <_ZN6Output4isonEv+0x28>
    48e4:	24 34       	cpi	r18, 0x44	; 68
    48e6:	d9 f0       	breq	.+54     	; 0x491e <_ZN6Output4isonEv+0x42>
    48e8:	22 34       	cpi	r18, 0x42	; 66
    48ea:	31 f5       	brne	.+76     	; 0x4938 <_ZN6Output4isonEv+0x5c>
	{
		case 'B':
			if ((PORTB&(1<<Pin)))
    48ec:	25 b1       	in	r18, 0x05	; 5
    48ee:	30 e0       	ldi	r19, 0x00	; 0
    48f0:	a9 01       	movw	r20, r18
    48f2:	01 80       	ldd	r0, Z+1	; 0x01
    48f4:	02 c0       	rjmp	.+4      	; 0x48fa <_ZN6Output4isonEv+0x1e>
    48f6:	55 95       	asr	r21
    48f8:	47 95       	ror	r20
    48fa:	0a 94       	dec	r0
    48fc:	e2 f7       	brpl	.-8      	; 0x48f6 <_ZN6Output4isonEv+0x1a>
    48fe:	ca 01       	movw	r24, r20
    4900:	81 70       	andi	r24, 0x01	; 1
    4902:	08 95       	ret
			{
				returnparam = 1;
			}
			break;
		case 'C':
			if ((PORTC&(1<<Pin)))
    4904:	28 b1       	in	r18, 0x08	; 8
    4906:	30 e0       	ldi	r19, 0x00	; 0
    4908:	a9 01       	movw	r20, r18
    490a:	fc 01       	movw	r30, r24
    490c:	01 80       	ldd	r0, Z+1	; 0x01
    490e:	02 c0       	rjmp	.+4      	; 0x4914 <_ZN6Output4isonEv+0x38>
    4910:	55 95       	asr	r21
    4912:	47 95       	ror	r20
    4914:	0a 94       	dec	r0
    4916:	e2 f7       	brpl	.-8      	; 0x4910 <_ZN6Output4isonEv+0x34>
    4918:	ca 01       	movw	r24, r20
    491a:	81 70       	andi	r24, 0x01	; 1
    491c:	08 95       	ret
			{
				returnparam = 1;
			}
			break;
		case 'D':
			if ((PORTD&(1<<Pin)))
    491e:	2b b1       	in	r18, 0x0b	; 11
    4920:	30 e0       	ldi	r19, 0x00	; 0
    4922:	a9 01       	movw	r20, r18
    4924:	fc 01       	movw	r30, r24
    4926:	01 80       	ldd	r0, Z+1	; 0x01
    4928:	02 c0       	rjmp	.+4      	; 0x492e <_ZN6Output4isonEv+0x52>
    492a:	55 95       	asr	r21
    492c:	47 95       	ror	r20
    492e:	0a 94       	dec	r0
    4930:	e2 f7       	brpl	.-8      	; 0x492a <_ZN6Output4isonEv+0x4e>
    4932:	ca 01       	movw	r24, r20
    4934:	81 70       	andi	r24, 0x01	; 1
    4936:	08 95       	ret
			{
				returnparam = 1;
			}
			break;
		default:
		returnparam = 2;
    4938:	82 e0       	ldi	r24, 0x02	; 2
			break;
	}
	return returnparam;
}
    493a:	08 95       	ret

0000493c <_ZN6Output3offEv>:

void Output::off(){
	switch (Port)
    493c:	fc 01       	movw	r30, r24
    493e:	20 81       	ld	r18, Z
    4940:	23 34       	cpi	r18, 0x43	; 67
    4942:	99 f0       	breq	.+38     	; 0x496a <_ZN6Output3offEv+0x2e>
    4944:	24 34       	cpi	r18, 0x44	; 68
    4946:	09 f1       	breq	.+66     	; 0x498a <_ZN6Output3offEv+0x4e>
    4948:	22 34       	cpi	r18, 0x42	; 66
    494a:	71 f5       	brne	.+92     	; 0x49a8 <_ZN6Output3offEv+0x6c>
	{
		case 'B':
			PORTB &= ~(1<<Pin);
    494c:	45 b1       	in	r20, 0x05	; 5
    494e:	21 e0       	ldi	r18, 0x01	; 1
    4950:	30 e0       	ldi	r19, 0x00	; 0
    4952:	b9 01       	movw	r22, r18
    4954:	01 80       	ldd	r0, Z+1	; 0x01
    4956:	02 c0       	rjmp	.+4      	; 0x495c <_ZN6Output3offEv+0x20>
    4958:	66 0f       	add	r22, r22
    495a:	77 1f       	adc	r23, r23
    495c:	0a 94       	dec	r0
    495e:	e2 f7       	brpl	.-8      	; 0x4958 <_ZN6Output3offEv+0x1c>
    4960:	cb 01       	movw	r24, r22
    4962:	80 95       	com	r24
    4964:	84 23       	and	r24, r20
    4966:	85 b9       	out	0x05, r24	; 5
			break;
    4968:	08 95       	ret
		case 'C':
			PORTC &= ~(1<<Pin);
    496a:	48 b1       	in	r20, 0x08	; 8
    496c:	21 e0       	ldi	r18, 0x01	; 1
    496e:	30 e0       	ldi	r19, 0x00	; 0
    4970:	b9 01       	movw	r22, r18
    4972:	fc 01       	movw	r30, r24
    4974:	01 80       	ldd	r0, Z+1	; 0x01
    4976:	02 c0       	rjmp	.+4      	; 0x497c <_ZN6Output3offEv+0x40>
    4978:	66 0f       	add	r22, r22
    497a:	77 1f       	adc	r23, r23
    497c:	0a 94       	dec	r0
    497e:	e2 f7       	brpl	.-8      	; 0x4978 <_ZN6Output3offEv+0x3c>
    4980:	cb 01       	movw	r24, r22
    4982:	80 95       	com	r24
    4984:	84 23       	and	r24, r20
    4986:	88 b9       	out	0x08, r24	; 8
			break;
    4988:	08 95       	ret
		case 'D':
			PORTD &= ~(1<<Pin);
    498a:	4b b1       	in	r20, 0x0b	; 11
    498c:	21 e0       	ldi	r18, 0x01	; 1
    498e:	30 e0       	ldi	r19, 0x00	; 0
    4990:	b9 01       	movw	r22, r18
    4992:	fc 01       	movw	r30, r24
    4994:	01 80       	ldd	r0, Z+1	; 0x01
    4996:	02 c0       	rjmp	.+4      	; 0x499c <_ZN6Output3offEv+0x60>
    4998:	66 0f       	add	r22, r22
    499a:	77 1f       	adc	r23, r23
    499c:	0a 94       	dec	r0
    499e:	e2 f7       	brpl	.-8      	; 0x4998 <_ZN6Output3offEv+0x5c>
    49a0:	cb 01       	movw	r24, r22
    49a2:	80 95       	com	r24
    49a4:	84 23       	and	r24, r20
    49a6:	8b b9       	out	0x0b, r24	; 11
    49a8:	08 95       	ret

000049aa <_ZN6Output6toggleEv>:
			break;
	}
}

void Output::toggle(){
	switch (Port)
    49aa:	fc 01       	movw	r30, r24
    49ac:	20 81       	ld	r18, Z
    49ae:	23 34       	cpi	r18, 0x43	; 67
    49b0:	a1 f0       	breq	.+40     	; 0x49da <_ZN6Output6toggleEv+0x30>
    49b2:	24 34       	cpi	r18, 0x44	; 68
    49b4:	19 f1       	breq	.+70     	; 0x49fc <_ZN6Output6toggleEv+0x52>
    49b6:	22 34       	cpi	r18, 0x42	; 66
    49b8:	89 f5       	brne	.+98     	; 0x4a1c <_ZN6Output6toggleEv+0x72>
	{
		case 'B':
			if ((PORTB&(1<<Pin)))
    49ba:	25 b1       	in	r18, 0x05	; 5
    49bc:	30 e0       	ldi	r19, 0x00	; 0
    49be:	01 80       	ldd	r0, Z+1	; 0x01
    49c0:	02 c0       	rjmp	.+4      	; 0x49c6 <_ZN6Output6toggleEv+0x1c>
    49c2:	35 95       	asr	r19
    49c4:	27 95       	ror	r18
    49c6:	0a 94       	dec	r0
    49c8:	e2 f7       	brpl	.-8      	; 0x49c2 <_ZN6Output6toggleEv+0x18>
    49ca:	20 ff       	sbrs	r18, 0
    49cc:	03 c0       	rjmp	.+6      	; 0x49d4 <_ZN6Output6toggleEv+0x2a>
			{
				off();
    49ce:	0e 94 9e 24 	call	0x493c	; 0x493c <_ZN6Output3offEv>
    49d2:	08 95       	ret
			}
			else{
				on();
    49d4:	0e 94 3a 24 	call	0x4874	; 0x4874 <_ZN6Output2onEv>
    49d8:	08 95       	ret
			}
			break;
		case 'C':
			if ((PORTC&(1<<Pin)))
    49da:	28 b1       	in	r18, 0x08	; 8
    49dc:	30 e0       	ldi	r19, 0x00	; 0
    49de:	fc 01       	movw	r30, r24
    49e0:	01 80       	ldd	r0, Z+1	; 0x01
    49e2:	02 c0       	rjmp	.+4      	; 0x49e8 <_ZN6Output6toggleEv+0x3e>
    49e4:	35 95       	asr	r19
    49e6:	27 95       	ror	r18
    49e8:	0a 94       	dec	r0
    49ea:	e2 f7       	brpl	.-8      	; 0x49e4 <_ZN6Output6toggleEv+0x3a>
    49ec:	20 ff       	sbrs	r18, 0
    49ee:	03 c0       	rjmp	.+6      	; 0x49f6 <_ZN6Output6toggleEv+0x4c>
			{
				off();
    49f0:	0e 94 9e 24 	call	0x493c	; 0x493c <_ZN6Output3offEv>
    49f4:	08 95       	ret
			}
			else{
				on();
    49f6:	0e 94 3a 24 	call	0x4874	; 0x4874 <_ZN6Output2onEv>
    49fa:	08 95       	ret
			}
			break;
		case 'D':
			if ((PORTD&(1<<Pin)))
    49fc:	2b b1       	in	r18, 0x0b	; 11
    49fe:	30 e0       	ldi	r19, 0x00	; 0
    4a00:	fc 01       	movw	r30, r24
    4a02:	01 80       	ldd	r0, Z+1	; 0x01
    4a04:	02 c0       	rjmp	.+4      	; 0x4a0a <_ZN6Output6toggleEv+0x60>
    4a06:	35 95       	asr	r19
    4a08:	27 95       	ror	r18
    4a0a:	0a 94       	dec	r0
    4a0c:	e2 f7       	brpl	.-8      	; 0x4a06 <_ZN6Output6toggleEv+0x5c>
    4a0e:	20 ff       	sbrs	r18, 0
    4a10:	03 c0       	rjmp	.+6      	; 0x4a18 <_ZN6Output6toggleEv+0x6e>
			{
				off();
    4a12:	0e 94 9e 24 	call	0x493c	; 0x493c <_ZN6Output3offEv>
    4a16:	08 95       	ret
			}
			else{
				on();
    4a18:	0e 94 3a 24 	call	0x4874	; 0x4874 <_ZN6Output2onEv>
    4a1c:	08 95       	ret

00004a1e <_ZN8PressureD1Ev>:
	Pressure0=1;
	LPS25H_initialize();
} //Pressure

// default destructor
Pressure::~Pressure()
    4a1e:	0d 96       	adiw	r24, 0x0d	; 13
    4a20:	0e 94 7e 21 	call	0x42fc	; 0x42fc <_ZN3I2CD1Ev>
    4a24:	08 95       	ret

00004a26 <_ZN8Pressure14LPS25H_commandEhh>:
{
} //~Pressure

void Pressure::LPS25H_command(uint8_t add, uint8_t command){
    4a26:	0f 93       	push	r16
    4a28:	1f 93       	push	r17
    4a2a:	cf 93       	push	r28
    4a2c:	df 93       	push	r29
    4a2e:	06 2f       	mov	r16, r22
    4a30:	14 2f       	mov	r17, r20
	i2c.twi_start();
    4a32:	ec 01       	movw	r28, r24
    4a34:	2d 96       	adiw	r28, 0x0d	; 13
    4a36:	ce 01       	movw	r24, r28
    4a38:	0e 94 7f 21 	call	0x42fe	; 0x42fe <_ZN3I2C9twi_startEv>
	i2c.twi_write(LPS25H_SA1_Write);
    4a3c:	6a eb       	ldi	r22, 0xBA	; 186
    4a3e:	ce 01       	movw	r24, r28
    4a40:	0e 94 87 21 	call	0x430e	; 0x430e <_ZN3I2C9twi_writeEh>
	i2c.twi_write(add);
    4a44:	60 2f       	mov	r22, r16
    4a46:	ce 01       	movw	r24, r28
    4a48:	0e 94 87 21 	call	0x430e	; 0x430e <_ZN3I2C9twi_writeEh>
	i2c.twi_write(command);
    4a4c:	61 2f       	mov	r22, r17
    4a4e:	ce 01       	movw	r24, r28
    4a50:	0e 94 87 21 	call	0x430e	; 0x430e <_ZN3I2C9twi_writeEh>
	i2c.twi_stop();
    4a54:	ce 01       	movw	r24, r28
    4a56:	0e 94 83 21 	call	0x4306	; 0x4306 <_ZN3I2C8twi_stopEv>
}
    4a5a:	df 91       	pop	r29
    4a5c:	cf 91       	pop	r28
    4a5e:	1f 91       	pop	r17
    4a60:	0f 91       	pop	r16
    4a62:	08 95       	ret

00004a64 <_ZN8Pressure17LPS25H_initializeEv>:

void Pressure::LPS25H_initialize(){
    4a64:	cf 93       	push	r28
    4a66:	df 93       	push	r29
    4a68:	ec 01       	movw	r28, r24
	uint8_t temp=0;
	//internal averages Pressure and Temperature (both 8)
	temp &= ~((1<<AVGT1) | (1<<AVGT0) | (1<<AVGP1) | (1<<AVGP0)); 
	LPS25H_command(RES_CONF,temp);
    4a6a:	40 e0       	ldi	r20, 0x00	; 0
    4a6c:	60 e1       	ldi	r22, 0x10	; 16
    4a6e:	0e 94 13 25 	call	0x4a26	; 0x4a26 <_ZN8Pressure14LPS25H_commandEhh>
	temp=0;
	//Enable device and set a single shot as well as Lock while reading
	temp |= (1<<PD) | (1<<BDU) | (1<<ODR1);
	LPS25H_command(CTRL_REG1,temp);
    4a72:	44 ea       	ldi	r20, 0xA4	; 164
    4a74:	60 e2       	ldi	r22, 0x20	; 32
    4a76:	ce 01       	movw	r24, r28
    4a78:	0e 94 13 25 	call	0x4a26	; 0x4a26 <_ZN8Pressure14LPS25H_commandEhh>
	temp=0;
	//FIFO on, no watermark no reset, reboot memory content, FIFO MEAN Mode
	temp |= (1<<BOOT) | (1<<FIFO_EN) | (1<<FIFO_MEAN_DEC);
	LPS25H_command(CTRL_REG2,temp);
    4a7c:	40 ed       	ldi	r20, 0xD0	; 208
    4a7e:	61 e2       	ldi	r22, 0x21	; 33
    4a80:	ce 01       	movw	r24, r28
    4a82:	0e 94 13 25 	call	0x4a26	; 0x4a26 <_ZN8Pressure14LPS25H_commandEhh>
	temp=0;
	//FIFO Controll register for MEAN Mode und 8 moving averages
	temp|=(1<<F_MODE2) | (1<<F_MODE1) | (1<<WTM_POINT0) | (1<<WTM_POINT1) | (1<<WTM_POINT2);
	LPS25H_command(FIFO_CTRL,temp);
    4a86:	47 ec       	ldi	r20, 0xC7	; 199
    4a88:	6e e2       	ldi	r22, 0x2E	; 46
    4a8a:	ce 01       	movw	r24, r28
    4a8c:	0e 94 13 25 	call	0x4a26	; 0x4a26 <_ZN8Pressure14LPS25H_commandEhh>
	//CTRL_REG4 not set
	//INTERRUPT_CFG not set
	//no threshold used
	//no Pressure offset used
	
}
    4a90:	df 91       	pop	r29
    4a92:	cf 91       	pop	r28
    4a94:	08 95       	ret

00004a96 <_ZN8PressureC1Ev>:


#include "Pressure.h"

// default constructor
Pressure::Pressure()
    4a96:	cf 93       	push	r28
    4a98:	df 93       	push	r29
    4a9a:	ec 01       	movw	r28, r24
    4a9c:	0d 96       	adiw	r24, 0x0d	; 13
    4a9e:	0e 94 7a 21 	call	0x42f4	; 0x42f4 <_ZN3I2CC1Ev>
{
	Press = 0;
    4aa2:	18 82       	st	Y, r1
    4aa4:	19 82       	std	Y+1, r1	; 0x01
    4aa6:	1a 82       	std	Y+2, r1	; 0x02
    4aa8:	1b 82       	std	Y+3, r1	; 0x03
	Tempera = 0;
    4aaa:	1c 82       	std	Y+4, r1	; 0x04
    4aac:	1d 82       	std	Y+5, r1	; 0x05
    4aae:	1e 82       	std	Y+6, r1	; 0x06
    4ab0:	1f 82       	std	Y+7, r1	; 0x07
	Tempoffset = -4;	//Aus Erfahrung
    4ab2:	8c ef       	ldi	r24, 0xFC	; 252
    4ab4:	88 87       	std	Y+8, r24	; 0x08
	Pressure0=1;
    4ab6:	40 e0       	ldi	r20, 0x00	; 0
    4ab8:	50 e0       	ldi	r21, 0x00	; 0
    4aba:	60 e8       	ldi	r22, 0x80	; 128
    4abc:	7f e3       	ldi	r23, 0x3F	; 63
    4abe:	49 87       	std	Y+9, r20	; 0x09
    4ac0:	5a 87       	std	Y+10, r21	; 0x0a
    4ac2:	6b 87       	std	Y+11, r22	; 0x0b
    4ac4:	7c 87       	std	Y+12, r23	; 0x0c
	LPS25H_initialize();
    4ac6:	ce 01       	movw	r24, r28
    4ac8:	0e 94 32 25 	call	0x4a64	; 0x4a64 <_ZN8Pressure17LPS25H_initializeEv>
} //Pressure
    4acc:	df 91       	pop	r29
    4ace:	cf 91       	pop	r28
    4ad0:	08 95       	ret

00004ad2 <_ZN8Pressure18READ_Pressure_onceEv>:
	//no threshold used
	//no Pressure offset used
	
}

void Pressure::READ_Pressure_once(){
    4ad2:	af 92       	push	r10
    4ad4:	bf 92       	push	r11
    4ad6:	cf 92       	push	r12
    4ad8:	df 92       	push	r13
    4ada:	ef 92       	push	r14
    4adc:	ff 92       	push	r15
    4ade:	1f 93       	push	r17
    4ae0:	cf 93       	push	r28
    4ae2:	df 93       	push	r29
    4ae4:	00 d0       	rcall	.+0      	; 0x4ae6 <_ZN8Pressure18READ_Pressure_onceEv+0x14>
    4ae6:	1f 92       	push	r1
    4ae8:	cd b7       	in	r28, 0x3d	; 61
    4aea:	de b7       	in	r29, 0x3e	; 62
    4aec:	5c 01       	movw	r10, r24
	uint8_t Wertedruck[3];
	cli();
    4aee:	f8 94       	cli
	i2c.twi_start();
    4af0:	7c 01       	movw	r14, r24
    4af2:	8d e0       	ldi	r24, 0x0D	; 13
    4af4:	e8 0e       	add	r14, r24
    4af6:	f1 1c       	adc	r15, r1
    4af8:	c7 01       	movw	r24, r14
    4afa:	0e 94 7f 21 	call	0x42fe	; 0x42fe <_ZN3I2C9twi_startEv>
	i2c.twi_write(LPS25H_SA1_Write);
    4afe:	6a eb       	ldi	r22, 0xBA	; 186
    4b00:	c7 01       	movw	r24, r14
    4b02:	0e 94 87 21 	call	0x430e	; 0x430e <_ZN3I2C9twi_writeEh>
	i2c.twi_write(PRESS_OUT_XL|(1<<autoincrement));
    4b06:	68 ea       	ldi	r22, 0xA8	; 168
    4b08:	c7 01       	movw	r24, r14
    4b0a:	0e 94 87 21 	call	0x430e	; 0x430e <_ZN3I2C9twi_writeEh>
	i2c.twi_start();
    4b0e:	c7 01       	movw	r24, r14
    4b10:	0e 94 7f 21 	call	0x42fe	; 0x42fe <_ZN3I2C9twi_startEv>
	i2c.twi_write(LPS25H_SA1_READ);
    4b14:	6b eb       	ldi	r22, 0xBB	; 187
    4b16:	c7 01       	movw	r24, r14
    4b18:	0e 94 87 21 	call	0x430e	; 0x430e <_ZN3I2C9twi_writeEh>
    4b1c:	fe 01       	movw	r30, r28
    4b1e:	31 96       	adiw	r30, 0x01	; 1
    4b20:	6f 01       	movw	r12, r30
	for (uint8_t i=0;i<3;i++)
    4b22:	10 e0       	ldi	r17, 0x00	; 0
	{
		if (i<2)
    4b24:	12 30       	cpi	r17, 0x02	; 2
    4b26:	38 f4       	brcc	.+14     	; 0x4b36 <_ZN8Pressure18READ_Pressure_onceEv+0x64>
		{
			Wertedruck[i] = i2c.twi_read(1);
    4b28:	61 e0       	ldi	r22, 0x01	; 1
    4b2a:	c7 01       	movw	r24, r14
    4b2c:	0e 94 97 21 	call	0x432e	; 0x432e <_ZN3I2C8twi_readEh>
    4b30:	f6 01       	movw	r30, r12
    4b32:	80 83       	st	Z, r24
    4b34:	06 c0       	rjmp	.+12     	; 0x4b42 <_ZN8Pressure18READ_Pressure_onceEv+0x70>
		}
		else{
			Wertedruck[i] = i2c.twi_read(0);
    4b36:	60 e0       	ldi	r22, 0x00	; 0
    4b38:	c7 01       	movw	r24, r14
    4b3a:	0e 94 97 21 	call	0x432e	; 0x432e <_ZN3I2C8twi_readEh>
    4b3e:	f6 01       	movw	r30, r12
    4b40:	80 83       	st	Z, r24
	i2c.twi_start();
	i2c.twi_write(LPS25H_SA1_Write);
	i2c.twi_write(PRESS_OUT_XL|(1<<autoincrement));
	i2c.twi_start();
	i2c.twi_write(LPS25H_SA1_READ);
	for (uint8_t i=0;i<3;i++)
    4b42:	1f 5f       	subi	r17, 0xFF	; 255
    4b44:	ff ef       	ldi	r31, 0xFF	; 255
    4b46:	cf 1a       	sub	r12, r31
    4b48:	df 0a       	sbc	r13, r31
    4b4a:	13 30       	cpi	r17, 0x03	; 3
    4b4c:	59 f7       	brne	.-42     	; 0x4b24 <_ZN8Pressure18READ_Pressure_onceEv+0x52>
		}
		else{
			Wertedruck[i] = i2c.twi_read(0);
		}
	}
	i2c.twi_stop();
    4b4e:	c7 01       	movw	r24, r14
    4b50:	0e 94 83 21 	call	0x4306	; 0x4306 <_ZN3I2C8twi_stopEv>
	Press = ((double)Wertedruck[2]*65536);
    4b54:	6b 81       	ldd	r22, Y+3	; 0x03
    4b56:	70 e0       	ldi	r23, 0x00	; 0
    4b58:	80 e0       	ldi	r24, 0x00	; 0
    4b5a:	90 e0       	ldi	r25, 0x00	; 0
    4b5c:	0e 94 77 29 	call	0x52ee	; 0x52ee <__floatunsisf>
    4b60:	20 e0       	ldi	r18, 0x00	; 0
    4b62:	30 e0       	ldi	r19, 0x00	; 0
    4b64:	40 e8       	ldi	r20, 0x80	; 128
    4b66:	57 e4       	ldi	r21, 0x47	; 71
    4b68:	0e 94 d7 2a 	call	0x55ae	; 0x55ae <__mulsf3>
    4b6c:	6b 01       	movw	r12, r22
    4b6e:	7c 01       	movw	r14, r24
	Press += ((double)Wertedruck[1]*256);
    4b70:	6a 81       	ldd	r22, Y+2	; 0x02
    4b72:	70 e0       	ldi	r23, 0x00	; 0
    4b74:	80 e0       	ldi	r24, 0x00	; 0
    4b76:	90 e0       	ldi	r25, 0x00	; 0
    4b78:	0e 94 77 29 	call	0x52ee	; 0x52ee <__floatunsisf>
    4b7c:	20 e0       	ldi	r18, 0x00	; 0
    4b7e:	30 e0       	ldi	r19, 0x00	; 0
    4b80:	40 e8       	ldi	r20, 0x80	; 128
    4b82:	53 e4       	ldi	r21, 0x43	; 67
    4b84:	0e 94 d7 2a 	call	0x55ae	; 0x55ae <__mulsf3>
    4b88:	9b 01       	movw	r18, r22
    4b8a:	ac 01       	movw	r20, r24
    4b8c:	c7 01       	movw	r24, r14
    4b8e:	b6 01       	movw	r22, r12
    4b90:	0e 94 11 28 	call	0x5022	; 0x5022 <__addsf3>
    4b94:	6b 01       	movw	r12, r22
    4b96:	7c 01       	movw	r14, r24
	Press += (double)Wertedruck[0];
    4b98:	69 81       	ldd	r22, Y+1	; 0x01
    4b9a:	70 e0       	ldi	r23, 0x00	; 0
    4b9c:	80 e0       	ldi	r24, 0x00	; 0
    4b9e:	90 e0       	ldi	r25, 0x00	; 0
    4ba0:	0e 94 77 29 	call	0x52ee	; 0x52ee <__floatunsisf>
    4ba4:	9b 01       	movw	r18, r22
    4ba6:	ac 01       	movw	r20, r24
    4ba8:	c7 01       	movw	r24, r14
    4baa:	b6 01       	movw	r22, r12
    4bac:	0e 94 11 28 	call	0x5022	; 0x5022 <__addsf3>
	//Press = (Wertedruck[0] + (Wertedruck[1]*256) + (Wertedruck[2]*65536));
	Press/=4096.0;
    4bb0:	20 e0       	ldi	r18, 0x00	; 0
    4bb2:	30 e0       	ldi	r19, 0x00	; 0
    4bb4:	40 e8       	ldi	r20, 0x80	; 128
    4bb6:	59 e3       	ldi	r21, 0x39	; 57
    4bb8:	0e 94 d7 2a 	call	0x55ae	; 0x55ae <__mulsf3>
    4bbc:	f5 01       	movw	r30, r10
    4bbe:	60 83       	st	Z, r22
    4bc0:	71 83       	std	Z+1, r23	; 0x01
    4bc2:	82 83       	std	Z+2, r24	; 0x02
    4bc4:	93 83       	std	Z+3, r25	; 0x03
	sei();
    4bc6:	78 94       	sei
}
    4bc8:	0f 90       	pop	r0
    4bca:	0f 90       	pop	r0
    4bcc:	0f 90       	pop	r0
    4bce:	df 91       	pop	r29
    4bd0:	cf 91       	pop	r28
    4bd2:	1f 91       	pop	r17
    4bd4:	ff 90       	pop	r15
    4bd6:	ef 90       	pop	r14
    4bd8:	df 90       	pop	r13
    4bda:	cf 90       	pop	r12
    4bdc:	bf 90       	pop	r11
    4bde:	af 90       	pop	r10
    4be0:	08 95       	ret

00004be2 <_ZN8Pressure16READ_TemperatureEv>:

void Pressure::READ_Temperature(){
    4be2:	cf 92       	push	r12
    4be4:	df 92       	push	r13
    4be6:	ef 92       	push	r14
    4be8:	ff 92       	push	r15
    4bea:	0f 93       	push	r16
    4bec:	1f 93       	push	r17
    4bee:	cf 93       	push	r28
    4bf0:	df 93       	push	r29
    4bf2:	00 d0       	rcall	.+0      	; 0x4bf4 <_ZN8Pressure16READ_TemperatureEv+0x12>
    4bf4:	cd b7       	in	r28, 0x3d	; 61
    4bf6:	de b7       	in	r29, 0x3e	; 62
    4bf8:	8c 01       	movw	r16, r24
	cli();
    4bfa:	f8 94       	cli
	uint8_t Wert[2];
	i2c.twi_start();
    4bfc:	7c 01       	movw	r14, r24
    4bfe:	8d e0       	ldi	r24, 0x0D	; 13
    4c00:	e8 0e       	add	r14, r24
    4c02:	f1 1c       	adc	r15, r1
    4c04:	c7 01       	movw	r24, r14
    4c06:	0e 94 7f 21 	call	0x42fe	; 0x42fe <_ZN3I2C9twi_startEv>
	i2c.twi_write(LPS25H_SA1_Write);
    4c0a:	6a eb       	ldi	r22, 0xBA	; 186
    4c0c:	c7 01       	movw	r24, r14
    4c0e:	0e 94 87 21 	call	0x430e	; 0x430e <_ZN3I2C9twi_writeEh>
	i2c.twi_write(TEMP_OUT_L|(1<<autoincrement));
    4c12:	6b ea       	ldi	r22, 0xAB	; 171
    4c14:	c7 01       	movw	r24, r14
    4c16:	0e 94 87 21 	call	0x430e	; 0x430e <_ZN3I2C9twi_writeEh>
	i2c.twi_start();
    4c1a:	c7 01       	movw	r24, r14
    4c1c:	0e 94 7f 21 	call	0x42fe	; 0x42fe <_ZN3I2C9twi_startEv>
	i2c.twi_write(LPS25H_SA1_READ);
    4c20:	6b eb       	ldi	r22, 0xBB	; 187
    4c22:	c7 01       	movw	r24, r14
    4c24:	0e 94 87 21 	call	0x430e	; 0x430e <_ZN3I2C9twi_writeEh>
    4c28:	cc 24       	eor	r12, r12
    4c2a:	c3 94       	inc	r12
    4c2c:	d1 2c       	mov	r13, r1
    4c2e:	02 c0       	rjmp	.+4      	; 0x4c34 <_ZN8Pressure16READ_TemperatureEv+0x52>
    4c30:	d3 94       	inc	r13
    4c32:	c3 94       	inc	r12
	for (uint8_t i=0;i<2;i++)
	{
		if (i<1)
    4c34:	d1 10       	cpse	r13, r1
    4c36:	06 c0       	rjmp	.+12     	; 0x4c44 <_ZN8Pressure16READ_TemperatureEv+0x62>
		{
			Wert[i] = i2c.twi_read(1);
    4c38:	61 e0       	ldi	r22, 0x01	; 1
    4c3a:	c7 01       	movw	r24, r14
    4c3c:	0e 94 97 21 	call	0x432e	; 0x432e <_ZN3I2C8twi_readEh>
    4c40:	89 83       	std	Y+1, r24	; 0x01
    4c42:	f6 cf       	rjmp	.-20     	; 0x4c30 <_ZN8Pressure16READ_TemperatureEv+0x4e>
		}
		else{
			Wert[i] = i2c.twi_read(0);
    4c44:	60 e0       	ldi	r22, 0x00	; 0
    4c46:	c7 01       	movw	r24, r14
    4c48:	0e 94 97 21 	call	0x432e	; 0x432e <_ZN3I2C8twi_readEh>
    4c4c:	e1 e0       	ldi	r30, 0x01	; 1
    4c4e:	f0 e0       	ldi	r31, 0x00	; 0
    4c50:	ec 0f       	add	r30, r28
    4c52:	fd 1f       	adc	r31, r29
    4c54:	ed 0d       	add	r30, r13
    4c56:	f1 1d       	adc	r31, r1
    4c58:	80 83       	st	Z, r24
	i2c.twi_start();
	i2c.twi_write(LPS25H_SA1_Write);
	i2c.twi_write(TEMP_OUT_L|(1<<autoincrement));
	i2c.twi_start();
	i2c.twi_write(LPS25H_SA1_READ);
	for (uint8_t i=0;i<2;i++)
    4c5a:	e1 e0       	ldi	r30, 0x01	; 1
    4c5c:	ec 15       	cp	r30, r12
    4c5e:	40 f7       	brcc	.-48     	; 0x4c30 <_ZN8Pressure16READ_TemperatureEv+0x4e>
		}
		else{
			Wert[i] = i2c.twi_read(0);
		}
	}
	i2c.twi_stop();
    4c60:	c7 01       	movw	r24, r14
    4c62:	0e 94 83 21 	call	0x4306	; 0x4306 <_ZN3I2C8twi_stopEv>
	Tempera = ((int16_t)(Wert[0]+(Wert[1]<<8)))/480.0;
    4c66:	89 81       	ldd	r24, Y+1	; 0x01
    4c68:	6a 81       	ldd	r22, Y+2	; 0x02
    4c6a:	70 e0       	ldi	r23, 0x00	; 0
    4c6c:	76 2f       	mov	r23, r22
    4c6e:	66 27       	eor	r22, r22
    4c70:	68 0f       	add	r22, r24
    4c72:	71 1d       	adc	r23, r1
    4c74:	88 27       	eor	r24, r24
    4c76:	77 fd       	sbrc	r23, 7
    4c78:	80 95       	com	r24
    4c7a:	98 2f       	mov	r25, r24
    4c7c:	0e 94 79 29 	call	0x52f2	; 0x52f2 <__floatsisf>
    4c80:	20 e0       	ldi	r18, 0x00	; 0
    4c82:	30 e0       	ldi	r19, 0x00	; 0
    4c84:	40 ef       	ldi	r20, 0xF0	; 240
    4c86:	53 e4       	ldi	r21, 0x43	; 67
    4c88:	0e 94 de 28 	call	0x51bc	; 0x51bc <__divsf3>
    4c8c:	6b 01       	movw	r12, r22
    4c8e:	7c 01       	movw	r14, r24
	Tempera+=42.5+Tempoffset;
    4c90:	f8 01       	movw	r30, r16
    4c92:	60 85       	ldd	r22, Z+8	; 0x08
    4c94:	77 27       	eor	r23, r23
    4c96:	67 fd       	sbrc	r22, 7
    4c98:	70 95       	com	r23
    4c9a:	87 2f       	mov	r24, r23
    4c9c:	97 2f       	mov	r25, r23
    4c9e:	0e 94 79 29 	call	0x52f2	; 0x52f2 <__floatsisf>
    4ca2:	20 e0       	ldi	r18, 0x00	; 0
    4ca4:	30 e0       	ldi	r19, 0x00	; 0
    4ca6:	4a e2       	ldi	r20, 0x2A	; 42
    4ca8:	52 e4       	ldi	r21, 0x42	; 66
    4caa:	0e 94 11 28 	call	0x5022	; 0x5022 <__addsf3>
    4cae:	9b 01       	movw	r18, r22
    4cb0:	ac 01       	movw	r20, r24
    4cb2:	c7 01       	movw	r24, r14
    4cb4:	b6 01       	movw	r22, r12
    4cb6:	0e 94 11 28 	call	0x5022	; 0x5022 <__addsf3>
    4cba:	f8 01       	movw	r30, r16
    4cbc:	64 83       	std	Z+4, r22	; 0x04
    4cbe:	75 83       	std	Z+5, r23	; 0x05
    4cc0:	86 83       	std	Z+6, r24	; 0x06
    4cc2:	97 83       	std	Z+7, r25	; 0x07
	sei();
    4cc4:	78 94       	sei
}
    4cc6:	0f 90       	pop	r0
    4cc8:	0f 90       	pop	r0
    4cca:	df 91       	pop	r29
    4ccc:	cf 91       	pop	r28
    4cce:	1f 91       	pop	r17
    4cd0:	0f 91       	pop	r16
    4cd2:	ff 90       	pop	r15
    4cd4:	ef 90       	pop	r14
    4cd6:	df 90       	pop	r13
    4cd8:	cf 90       	pop	r12
    4cda:	08 95       	ret

00004cdc <_ZN8Pressure8altitudeEd>:

double Pressure::altitude(double Pressurevalue){
    4cdc:	8f 92       	push	r8
    4cde:	9f 92       	push	r9
    4ce0:	af 92       	push	r10
    4ce2:	bf 92       	push	r11
    4ce4:	cf 92       	push	r12
    4ce6:	df 92       	push	r13
    4ce8:	ef 92       	push	r14
    4cea:	ff 92       	push	r15
	return (Pressure0*100*log(Pressure0/Pressurevalue)/(1.2041*9.81));
    4cec:	fc 01       	movw	r30, r24
    4cee:	c1 84       	ldd	r12, Z+9	; 0x09
    4cf0:	d2 84       	ldd	r13, Z+10	; 0x0a
    4cf2:	e3 84       	ldd	r14, Z+11	; 0x0b
    4cf4:	f4 84       	ldd	r15, Z+12	; 0x0c
    4cf6:	9a 01       	movw	r18, r20
    4cf8:	ab 01       	movw	r20, r22
    4cfa:	c7 01       	movw	r24, r14
    4cfc:	b6 01       	movw	r22, r12
    4cfe:	0e 94 de 28 	call	0x51bc	; 0x51bc <__divsf3>
    4d02:	0e 94 97 2a 	call	0x552e	; 0x552e <log>
    4d06:	4b 01       	movw	r8, r22
    4d08:	5c 01       	movw	r10, r24
    4d0a:	20 e0       	ldi	r18, 0x00	; 0
    4d0c:	30 e0       	ldi	r19, 0x00	; 0
    4d0e:	48 ec       	ldi	r20, 0xC8	; 200
    4d10:	52 e4       	ldi	r21, 0x42	; 66
    4d12:	c7 01       	movw	r24, r14
    4d14:	b6 01       	movw	r22, r12
    4d16:	0e 94 d7 2a 	call	0x55ae	; 0x55ae <__mulsf3>
    4d1a:	a5 01       	movw	r20, r10
    4d1c:	94 01       	movw	r18, r8
    4d1e:	0e 94 d7 2a 	call	0x55ae	; 0x55ae <__mulsf3>
    4d22:	2c ed       	ldi	r18, 0xDC	; 220
    4d24:	3e ef       	ldi	r19, 0xFE	; 254
    4d26:	4c e3       	ldi	r20, 0x3C	; 60
    4d28:	51 e4       	ldi	r21, 0x41	; 65
    4d2a:	0e 94 de 28 	call	0x51bc	; 0x51bc <__divsf3>
}
    4d2e:	ff 90       	pop	r15
    4d30:	ef 90       	pop	r14
    4d32:	df 90       	pop	r13
    4d34:	cf 90       	pop	r12
    4d36:	bf 90       	pop	r11
    4d38:	af 90       	pop	r10
    4d3a:	9f 90       	pop	r9
    4d3c:	8f 90       	pop	r8
    4d3e:	08 95       	ret

00004d40 <_ZN8Pressure13set_Pressure0Ed>:
void Pressure::set_Pressure0(double Pressurevalue){
	Pressure0=Pressurevalue;
    4d40:	fc 01       	movw	r30, r24
    4d42:	41 87       	std	Z+9, r20	; 0x09
    4d44:	52 87       	std	Z+10, r21	; 0x0a
    4d46:	63 87       	std	Z+11, r22	; 0x0b
    4d48:	74 87       	std	Z+12, r23	; 0x0c
    4d4a:	08 95       	ret

00004d4c <_ZN3RTCD1Ev>:
	ausgabezeitneu();
	ausgabedatumneu();
} //RTC

// default destructor
RTC::~RTC()
    4d4c:	08 95       	ret

00004d4e <_ZN3RTC6WeckerEv>:
		}
	}
	ausgabedatumneu();
}

void RTC::Wecker(){
    4d4e:	fc 01       	movw	r30, r24
	if ((interupts&(1<<Weckerein))&&!(interupts&(1<<Weckeractiv)))
    4d50:	80 8d       	ldd	r24, Z+24	; 0x18
    4d52:	83 ff       	sbrs	r24, 3
    4d54:	0c c0       	rjmp	.+24     	; 0x4d6e <_ZN3RTC6WeckerEv+0x20>
    4d56:	84 fd       	sbrc	r24, 4
    4d58:	0a c0       	rjmp	.+20     	; 0x4d6e <_ZN3RTC6WeckerEv+0x20>
	{
		if (WStunden==Stunden)
    4d5a:	22 8d       	ldd	r18, Z+26	; 0x1a
    4d5c:	90 89       	ldd	r25, Z+16	; 0x10
    4d5e:	29 13       	cpse	r18, r25
    4d60:	06 c0       	rjmp	.+12     	; 0x4d6e <_ZN3RTC6WeckerEv+0x20>
		{
			if (WMinuten==Minuten)
    4d62:	21 8d       	ldd	r18, Z+25	; 0x19
    4d64:	91 89       	ldd	r25, Z+17	; 0x11
    4d66:	29 13       	cpse	r18, r25
    4d68:	02 c0       	rjmp	.+4      	; 0x4d6e <_ZN3RTC6WeckerEv+0x20>
			{
				interupts|=(1<<Weckeractiv);
    4d6a:	80 61       	ori	r24, 0x10	; 16
    4d6c:	80 8f       	std	Z+24, r24	; 0x18
    4d6e:	08 95       	ret

00004d70 <_ZN3RTC14ausgabezeitneuEv>:
		}
	}
}


void RTC::ausgabezeitneu(){
    4d70:	fc 01       	movw	r30, r24
	msg_uhr[0]='0'+Stunden/10;
    4d72:	90 89       	ldd	r25, Z+16	; 0x10
    4d74:	8d ec       	ldi	r24, 0xCD	; 205
    4d76:	98 9f       	mul	r25, r24
    4d78:	21 2d       	mov	r18, r1
    4d7a:	11 24       	eor	r1, r1
    4d7c:	26 95       	lsr	r18
    4d7e:	26 95       	lsr	r18
    4d80:	26 95       	lsr	r18
    4d82:	30 e3       	ldi	r19, 0x30	; 48
    4d84:	32 0f       	add	r19, r18
    4d86:	30 83       	st	Z, r19
	msg_uhr[1]='0'+Stunden%10;
    4d88:	22 0f       	add	r18, r18
    4d8a:	32 2f       	mov	r19, r18
    4d8c:	33 0f       	add	r19, r19
    4d8e:	33 0f       	add	r19, r19
    4d90:	23 0f       	add	r18, r19
    4d92:	92 1b       	sub	r25, r18
    4d94:	90 5d       	subi	r25, 0xD0	; 208
    4d96:	91 83       	std	Z+1, r25	; 0x01
	msg_uhr[3]='0'+Minuten/10;
    4d98:	91 89       	ldd	r25, Z+17	; 0x11
    4d9a:	98 9f       	mul	r25, r24
    4d9c:	21 2d       	mov	r18, r1
    4d9e:	11 24       	eor	r1, r1
    4da0:	26 95       	lsr	r18
    4da2:	26 95       	lsr	r18
    4da4:	26 95       	lsr	r18
    4da6:	30 e3       	ldi	r19, 0x30	; 48
    4da8:	32 0f       	add	r19, r18
    4daa:	33 83       	std	Z+3, r19	; 0x03
	msg_uhr[4]='0'+Minuten%10;
    4dac:	22 0f       	add	r18, r18
    4dae:	32 2f       	mov	r19, r18
    4db0:	33 0f       	add	r19, r19
    4db2:	33 0f       	add	r19, r19
    4db4:	23 0f       	add	r18, r19
    4db6:	92 1b       	sub	r25, r18
    4db8:	90 5d       	subi	r25, 0xD0	; 208
    4dba:	94 83       	std	Z+4, r25	; 0x04
	msg_uhr[6]='0'+Sekunden/10;
    4dbc:	92 89       	ldd	r25, Z+18	; 0x12
    4dbe:	98 9f       	mul	r25, r24
    4dc0:	81 2d       	mov	r24, r1
    4dc2:	11 24       	eor	r1, r1
    4dc4:	86 95       	lsr	r24
    4dc6:	86 95       	lsr	r24
    4dc8:	86 95       	lsr	r24
    4dca:	20 e3       	ldi	r18, 0x30	; 48
    4dcc:	28 0f       	add	r18, r24
    4dce:	26 83       	std	Z+6, r18	; 0x06
	msg_uhr[7]='0'+Sekunden%10;
    4dd0:	88 0f       	add	r24, r24
    4dd2:	28 2f       	mov	r18, r24
    4dd4:	22 0f       	add	r18, r18
    4dd6:	22 0f       	add	r18, r18
    4dd8:	82 0f       	add	r24, r18
    4dda:	98 1b       	sub	r25, r24
    4ddc:	90 5d       	subi	r25, 0xD0	; 208
    4dde:	97 83       	std	Z+7, r25	; 0x07
    4de0:	08 95       	ret

00004de2 <_ZN3RTC15ausgabedatumneuEv>:
}
void RTC::ausgabedatumneu(){
    4de2:	fc 01       	movw	r30, r24
	msg_dat[0]='0'+Tag/10;
    4de4:	94 89       	ldd	r25, Z+20	; 0x14
    4de6:	8d ec       	ldi	r24, 0xCD	; 205
    4de8:	98 9f       	mul	r25, r24
    4dea:	21 2d       	mov	r18, r1
    4dec:	11 24       	eor	r1, r1
    4dee:	26 95       	lsr	r18
    4df0:	26 95       	lsr	r18
    4df2:	26 95       	lsr	r18
    4df4:	30 e3       	ldi	r19, 0x30	; 48
    4df6:	32 0f       	add	r19, r18
    4df8:	30 87       	std	Z+8, r19	; 0x08
	msg_dat[1]='0'+Tag%10;
    4dfa:	22 0f       	add	r18, r18
    4dfc:	32 2f       	mov	r19, r18
    4dfe:	33 0f       	add	r19, r19
    4e00:	33 0f       	add	r19, r19
    4e02:	23 0f       	add	r18, r19
    4e04:	92 1b       	sub	r25, r18
    4e06:	90 5d       	subi	r25, 0xD0	; 208
    4e08:	91 87       	std	Z+9, r25	; 0x09
	msg_dat[3]='0'+Monat/10;
    4e0a:	96 89       	ldd	r25, Z+22	; 0x16
    4e0c:	98 9f       	mul	r25, r24
    4e0e:	21 2d       	mov	r18, r1
    4e10:	11 24       	eor	r1, r1
    4e12:	26 95       	lsr	r18
    4e14:	26 95       	lsr	r18
    4e16:	26 95       	lsr	r18
    4e18:	30 e3       	ldi	r19, 0x30	; 48
    4e1a:	32 0f       	add	r19, r18
    4e1c:	33 87       	std	Z+11, r19	; 0x0b
	msg_dat[4]='0'+Monat%10;
    4e1e:	22 0f       	add	r18, r18
    4e20:	32 2f       	mov	r19, r18
    4e22:	33 0f       	add	r19, r19
    4e24:	33 0f       	add	r19, r19
    4e26:	23 0f       	add	r18, r19
    4e28:	92 1b       	sub	r25, r18
    4e2a:	90 5d       	subi	r25, 0xD0	; 208
    4e2c:	94 87       	std	Z+12, r25	; 0x0c
	msg_dat[6]='0'+Jahr/10;
    4e2e:	97 89       	ldd	r25, Z+23	; 0x17
    4e30:	98 9f       	mul	r25, r24
    4e32:	81 2d       	mov	r24, r1
    4e34:	11 24       	eor	r1, r1
    4e36:	86 95       	lsr	r24
    4e38:	86 95       	lsr	r24
    4e3a:	86 95       	lsr	r24
    4e3c:	20 e3       	ldi	r18, 0x30	; 48
    4e3e:	28 0f       	add	r18, r24
    4e40:	26 87       	std	Z+14, r18	; 0x0e
	msg_dat[7]='0'+Jahr%10;
    4e42:	88 0f       	add	r24, r24
    4e44:	28 2f       	mov	r18, r24
    4e46:	22 0f       	add	r18, r18
    4e48:	22 0f       	add	r18, r18
    4e4a:	82 0f       	add	r24, r18
    4e4c:	98 1b       	sub	r25, r24
    4e4e:	90 5d       	subi	r25, 0xD0	; 208
    4e50:	97 87       	std	Z+15, r25	; 0x0f
    4e52:	08 95       	ret

00004e54 <_ZN3RTCC1Ev>:


#include "RTC.h"

// default constructor
RTC::RTC()
    4e54:	cf 93       	push	r28
    4e56:	df 93       	push	r29
    4e58:	ec 01       	movw	r28, r24
{
	Sekunden=0;
    4e5a:	1a 8a       	std	Y+18, r1	; 0x12
	HundSekunden=0;
    4e5c:	1b 8a       	std	Y+19, r1	; 0x13
	Minuten=0;
    4e5e:	19 8a       	std	Y+17, r1	; 0x11
	Stunden=0;
    4e60:	18 8a       	std	Y+16, r1	; 0x10
	Tag=0;
    4e62:	1c 8a       	std	Y+20, r1	; 0x14
	Monat=0;
    4e64:	1e 8a       	std	Y+22, r1	; 0x16
	Jahr=0;
    4e66:	1f 8a       	std	Y+23, r1	; 0x17
	WTag=0;
    4e68:	1d 8a       	std	Y+21, r1	; 0x15
	WMinuten=40;
    4e6a:	88 e2       	ldi	r24, 0x28	; 40
    4e6c:	89 8f       	std	Y+25, r24	; 0x19
	WStunden=10;
    4e6e:	8a e0       	ldi	r24, 0x0A	; 10
    4e70:	8a 8f       	std	Y+26, r24	; 0x1a
    4e72:	de 01       	movw	r26, r28
    4e74:	fe 01       	movw	r30, r28
    4e76:	38 96       	adiw	r30, 0x08	; 8
	for(uint8_t i=0;i<bitsderrtc;i++){
    4e78:	80 e0       	ldi	r24, 0x00	; 0
		msg_uhr[i]=0;
    4e7a:	1d 92       	st	X+, r1
		msg_dat[i]=0;
    4e7c:	11 92       	st	Z+, r1
	Monat=0;
	Jahr=0;
	WTag=0;
	WMinuten=40;
	WStunden=10;
	for(uint8_t i=0;i<bitsderrtc;i++){
    4e7e:	8f 5f       	subi	r24, 0xFF	; 255
    4e80:	88 30       	cpi	r24, 0x08	; 8
    4e82:	d9 f7       	brne	.-10     	; 0x4e7a <_ZN3RTCC1Ev+0x26>
		msg_uhr[i]=0;
		msg_dat[i]=0;
	}
	//Einstellungen des Ausgabebuffers
	msg_uhr[2]=':';
    4e84:	8a e3       	ldi	r24, 0x3A	; 58
    4e86:	8a 83       	std	Y+2, r24	; 0x02
	msg_uhr[5]=':';
    4e88:	8d 83       	std	Y+5, r24	; 0x05
	msg_dat[2]='.';
    4e8a:	8e e2       	ldi	r24, 0x2E	; 46
    4e8c:	8a 87       	std	Y+10, r24	; 0x0a
	msg_dat[5]='.';
    4e8e:	8d 87       	std	Y+13, r24	; 0x0d
	ausgabezeitneu();
    4e90:	ce 01       	movw	r24, r28
    4e92:	0e 94 b8 26 	call	0x4d70	; 0x4d70 <_ZN3RTC14ausgabezeitneuEv>
	ausgabedatumneu();
    4e96:	ce 01       	movw	r24, r28
    4e98:	0e 94 f1 26 	call	0x4de2	; 0x4de2 <_ZN3RTC15ausgabedatumneuEv>
} //RTC
    4e9c:	df 91       	pop	r29
    4e9e:	cf 91       	pop	r28
    4ea0:	08 95       	ret

00004ea2 <_ZN3RTC8kalenderEv>:
	ausgabezeitneu();
	return 0;
}

void RTC::kalender(){
	if (Monat==4||Monat==6||Monat==9||Monat==11)
    4ea2:	fc 01       	movw	r30, r24
    4ea4:	26 89       	ldd	r18, Z+22	; 0x16
    4ea6:	32 2f       	mov	r19, r18
    4ea8:	3d 7f       	andi	r19, 0xFD	; 253
    4eaa:	34 30       	cpi	r19, 0x04	; 4
    4eac:	11 f0       	breq	.+4      	; 0x4eb2 <_ZN3RTC8kalenderEv+0x10>
    4eae:	39 30       	cpi	r19, 0x09	; 9
    4eb0:	91 f4       	brne	.+36     	; 0x4ed6 <_ZN3RTC8kalenderEv+0x34>
	{
		if (Tag>=31)
    4eb2:	fc 01       	movw	r30, r24
    4eb4:	34 89       	ldd	r19, Z+20	; 0x14
    4eb6:	3f 31       	cpi	r19, 0x1F	; 31
    4eb8:	b0 f1       	brcs	.+108    	; 0x4f26 <_ZN3RTC8kalenderEv+0x84>
		{
			Tag=1;
    4eba:	31 e0       	ldi	r19, 0x01	; 1
    4ebc:	34 8b       	std	Z+20, r19	; 0x14
			Monat++;
    4ebe:	2f 5f       	subi	r18, 0xFF	; 255
			if (Monat>=13)
    4ec0:	2d 30       	cpi	r18, 0x0D	; 13
    4ec2:	10 f4       	brcc	.+4      	; 0x4ec8 <_ZN3RTC8kalenderEv+0x26>
	if (Monat==4||Monat==6||Monat==9||Monat==11)
	{
		if (Tag>=31)
		{
			Tag=1;
			Monat++;
    4ec4:	26 8b       	std	Z+22, r18	; 0x16
    4ec6:	2f c0       	rjmp	.+94     	; 0x4f26 <_ZN3RTC8kalenderEv+0x84>
			if (Monat>=13)
			{
				Monat=1;
    4ec8:	21 e0       	ldi	r18, 0x01	; 1
    4eca:	fc 01       	movw	r30, r24
    4ecc:	26 8b       	std	Z+22, r18	; 0x16
				Jahr++;
    4ece:	27 89       	ldd	r18, Z+23	; 0x17
    4ed0:	2f 5f       	subi	r18, 0xFF	; 255
    4ed2:	27 8b       	std	Z+23, r18	; 0x17
    4ed4:	28 c0       	rjmp	.+80     	; 0x4f26 <_ZN3RTC8kalenderEv+0x84>
			}
		}
	}
	else if (Monat==2)
    4ed6:	22 30       	cpi	r18, 0x02	; 2
    4ed8:	a9 f4       	brne	.+42     	; 0x4f04 <_ZN3RTC8kalenderEv+0x62>
	{
		if (Jahr%4==0)
    4eda:	fc 01       	movw	r30, r24
    4edc:	27 89       	ldd	r18, Z+23	; 0x17
    4ede:	23 70       	andi	r18, 0x03	; 3
    4ee0:	41 f4       	brne	.+16     	; 0x4ef2 <_ZN3RTC8kalenderEv+0x50>
		{
			if (Tag>=30)
    4ee2:	24 89       	ldd	r18, Z+20	; 0x14
    4ee4:	2e 31       	cpi	r18, 0x1E	; 30
    4ee6:	f8 f0       	brcs	.+62     	; 0x4f26 <_ZN3RTC8kalenderEv+0x84>
			{
				Tag=1;
    4ee8:	21 e0       	ldi	r18, 0x01	; 1
    4eea:	24 8b       	std	Z+20, r18	; 0x14
				Monat++;
    4eec:	23 e0       	ldi	r18, 0x03	; 3
    4eee:	26 8b       	std	Z+22, r18	; 0x16
    4ef0:	1a c0       	rjmp	.+52     	; 0x4f26 <_ZN3RTC8kalenderEv+0x84>
					Jahr++;
				}
			}
		}
		else{
			if (Tag>=29)
    4ef2:	fc 01       	movw	r30, r24
    4ef4:	24 89       	ldd	r18, Z+20	; 0x14
    4ef6:	2d 31       	cpi	r18, 0x1D	; 29
    4ef8:	b0 f0       	brcs	.+44     	; 0x4f26 <_ZN3RTC8kalenderEv+0x84>
			{
				Tag=1;
    4efa:	21 e0       	ldi	r18, 0x01	; 1
    4efc:	24 8b       	std	Z+20, r18	; 0x14
				Monat++;
    4efe:	23 e0       	ldi	r18, 0x03	; 3
    4f00:	26 8b       	std	Z+22, r18	; 0x16
    4f02:	11 c0       	rjmp	.+34     	; 0x4f26 <_ZN3RTC8kalenderEv+0x84>
				}
			}
		}
	}
	else{
		if (Tag>=32)
    4f04:	fc 01       	movw	r30, r24
    4f06:	34 89       	ldd	r19, Z+20	; 0x14
    4f08:	30 32       	cpi	r19, 0x20	; 32
    4f0a:	68 f0       	brcs	.+26     	; 0x4f26 <_ZN3RTC8kalenderEv+0x84>
		{
			Tag=1;
    4f0c:	31 e0       	ldi	r19, 0x01	; 1
    4f0e:	34 8b       	std	Z+20, r19	; 0x14
			Monat++;
    4f10:	2f 5f       	subi	r18, 0xFF	; 255
			if (Monat>=13)
    4f12:	2d 30       	cpi	r18, 0x0D	; 13
    4f14:	10 f4       	brcc	.+4      	; 0x4f1a <_ZN3RTC8kalenderEv+0x78>
	}
	else{
		if (Tag>=32)
		{
			Tag=1;
			Monat++;
    4f16:	26 8b       	std	Z+22, r18	; 0x16
    4f18:	06 c0       	rjmp	.+12     	; 0x4f26 <_ZN3RTC8kalenderEv+0x84>
			if (Monat>=13)
			{
				Monat=1;
    4f1a:	21 e0       	ldi	r18, 0x01	; 1
    4f1c:	fc 01       	movw	r30, r24
    4f1e:	26 8b       	std	Z+22, r18	; 0x16
				Jahr++;
    4f20:	27 89       	ldd	r18, Z+23	; 0x17
    4f22:	2f 5f       	subi	r18, 0xFF	; 255
    4f24:	27 8b       	std	Z+23, r18	; 0x17
			}
		}
	}
	ausgabedatumneu();
    4f26:	0e 94 f1 26 	call	0x4de2	; 0x4de2 <_ZN3RTC15ausgabedatumneuEv>
    4f2a:	08 95       	ret

00004f2c <_ZN3RTC4zeitEv>:
	}
	ausgabezeitneu();
	return 0;
}

uint8_t RTC::zeit(){
    4f2c:	cf 93       	push	r28
    4f2e:	df 93       	push	r29
    4f30:	ec 01       	movw	r28, r24
	//Sekunden++; sitzt im Vektor um Taster besser entprellen zu koennen
	if (Sekunden >= 60 && Sekunden <=200){
    4f32:	8a 89       	ldd	r24, Y+18	; 0x12
    4f34:	8c 53       	subi	r24, 0x3C	; 60
    4f36:	8d 38       	cpi	r24, 0x8D	; 141
    4f38:	d0 f4       	brcc	.+52     	; 0x4f6e <_ZN3RTC4zeitEv+0x42>
		Sekunden = 0;
    4f3a:	1a 8a       	std	Y+18, r1	; 0x12
		Minuten++;
    4f3c:	89 89       	ldd	r24, Y+17	; 0x11
    4f3e:	8f 5f       	subi	r24, 0xFF	; 255
    4f40:	89 8b       	std	Y+17, r24	; 0x11
		interupts |= (1<<minuteninterupt);
    4f42:	98 8d       	ldd	r25, Y+24	; 0x18
    4f44:	94 60       	ori	r25, 0x04	; 4
    4f46:	98 8f       	std	Y+24, r25	; 0x18
		if(Minuten >= 60){
    4f48:	8c 33       	cpi	r24, 0x3C	; 60
    4f4a:	70 f0       	brcs	.+28     	; 0x4f68 <_ZN3RTC4zeitEv+0x3c>
			Minuten = 0;
    4f4c:	19 8a       	std	Y+17, r1	; 0x11
			Stunden++;
    4f4e:	88 89       	ldd	r24, Y+16	; 0x10
    4f50:	8f 5f       	subi	r24, 0xFF	; 255
			if(Stunden >= 24){
    4f52:	88 31       	cpi	r24, 0x18	; 24
    4f54:	10 f4       	brcc	.+4      	; 0x4f5a <_ZN3RTC4zeitEv+0x2e>
		Sekunden = 0;
		Minuten++;
		interupts |= (1<<minuteninterupt);
		if(Minuten >= 60){
			Minuten = 0;
			Stunden++;
    4f56:	88 8b       	std	Y+16, r24	; 0x10
    4f58:	07 c0       	rjmp	.+14     	; 0x4f68 <_ZN3RTC4zeitEv+0x3c>
			if(Stunden >= 24){
				Stunden = 0;
    4f5a:	18 8a       	std	Y+16, r1	; 0x10
				Tag++;
    4f5c:	8c 89       	ldd	r24, Y+20	; 0x14
    4f5e:	8f 5f       	subi	r24, 0xFF	; 255
    4f60:	8c 8b       	std	Y+20, r24	; 0x14
				kalender();
    4f62:	ce 01       	movw	r24, r28
    4f64:	0e 94 51 27 	call	0x4ea2	; 0x4ea2 <_ZN3RTC8kalenderEv>
			}
		}
		Wecker();
    4f68:	ce 01       	movw	r24, r28
    4f6a:	0e 94 a7 26 	call	0x4d4e	; 0x4d4e <_ZN3RTC6WeckerEv>
	}
	ausgabezeitneu();
    4f6e:	ce 01       	movw	r24, r28
    4f70:	0e 94 b8 26 	call	0x4d70	; 0x4d70 <_ZN3RTC14ausgabezeitneuEv>
	return 0;
}
    4f74:	80 e0       	ldi	r24, 0x00	; 0
    4f76:	df 91       	pop	r29
    4f78:	cf 91       	pop	r28
    4f7a:	08 95       	ret

00004f7c <_ZN3RTC10dummyeinstEv>:
	msg_dat[4]='0'+Monat%10;
	msg_dat[6]='0'+Jahr/10;
	msg_dat[7]='0'+Jahr%10;
}

void RTC::dummyeinst(){
    4f7c:	cf 93       	push	r28
    4f7e:	df 93       	push	r29
    4f80:	ec 01       	movw	r28, r24
	Stunden=10;
    4f82:	8a e0       	ldi	r24, 0x0A	; 10
    4f84:	88 8b       	std	Y+16, r24	; 0x10
	Minuten=30;
    4f86:	8e e1       	ldi	r24, 0x1E	; 30
    4f88:	89 8b       	std	Y+17, r24	; 0x11
	Tag=7;
    4f8a:	87 e0       	ldi	r24, 0x07	; 7
    4f8c:	8c 8b       	std	Y+20, r24	; 0x14
	Monat=9;
    4f8e:	89 e0       	ldi	r24, 0x09	; 9
    4f90:	8e 8b       	std	Y+22, r24	; 0x16
	Jahr=15;
    4f92:	8f e0       	ldi	r24, 0x0F	; 15
    4f94:	8f 8b       	std	Y+23, r24	; 0x17
	ausgabedatumneu();
    4f96:	ce 01       	movw	r24, r28
    4f98:	0e 94 f1 26 	call	0x4de2	; 0x4de2 <_ZN3RTC15ausgabedatumneuEv>
	ausgabezeitneu();
    4f9c:	ce 01       	movw	r24, r28
    4f9e:	0e 94 b8 26 	call	0x4d70	; 0x4d70 <_ZN3RTC14ausgabezeitneuEv>
}
    4fa2:	df 91       	pop	r29
    4fa4:	cf 91       	pop	r28
    4fa6:	08 95       	ret

00004fa8 <_ZN3RTC8RTCstartEv>:

void RTC::RTCstart(){
    4fa8:	fc 01       	movw	r30, r24
	//Einstellungen des Ausgabebuffers
	msg_uhr[0]='0';
    4faa:	80 e3       	ldi	r24, 0x30	; 48
    4fac:	80 83       	st	Z, r24
	msg_uhr[1]='0';
    4fae:	81 83       	std	Z+1, r24	; 0x01
	msg_uhr[2]=':';
    4fb0:	9a e3       	ldi	r25, 0x3A	; 58
    4fb2:	92 83       	std	Z+2, r25	; 0x02
	msg_uhr[3]='0';
    4fb4:	83 83       	std	Z+3, r24	; 0x03
	msg_uhr[4]='0';
    4fb6:	84 83       	std	Z+4, r24	; 0x04
	msg_uhr[5]=':';
    4fb8:	95 83       	std	Z+5, r25	; 0x05
	msg_uhr[6]='0';
    4fba:	86 83       	std	Z+6, r24	; 0x06
	msg_uhr[7]='0';
    4fbc:	87 83       	std	Z+7, r24	; 0x07
	//Timer2 als 1ms Timer fuer die RTC
	//asynchron mit 32.768 kHz (noch synchrom)
	TCNT2 = TIMER2RTCTIME;
    4fbe:	10 92 b2 00 	sts	0x00B2, r1
	ASSR |= (1<<AS2);
    4fc2:	e6 eb       	ldi	r30, 0xB6	; 182
    4fc4:	f0 e0       	ldi	r31, 0x00	; 0
    4fc6:	80 81       	ld	r24, Z
    4fc8:	80 62       	ori	r24, 0x20	; 32
    4fca:	80 83       	st	Z, r24
	TIMSK2 = (1<<TOIE2);
    4fcc:	81 e0       	ldi	r24, 0x01	; 1
    4fce:	80 93 70 00 	sts	0x0070, r24
	TCCR2B = (1<<CS22) | (1<<CS20);		//Vorteiler 256
    4fd2:	85 e0       	ldi	r24, 0x05	; 5
    4fd4:	80 93 b1 00 	sts	0x00B1, r24
    4fd8:	08 95       	ret

00004fda <_ZN3RTC7RTCstopEv>:
}

void RTC::RTCstop(){
	TCCR2B &= ~((1<<CS22) | (1<<CS21));
    4fda:	e1 eb       	ldi	r30, 0xB1	; 177
    4fdc:	f0 e0       	ldi	r31, 0x00	; 0
    4fde:	80 81       	ld	r24, Z
    4fe0:	89 7f       	andi	r24, 0xF9	; 249
    4fe2:	80 83       	st	Z, r24
    4fe4:	08 95       	ret

00004fe6 <_ZN3RTC5timerEv>:
}

uint8_t RTC::timer(){
    4fe6:	fc 01       	movw	r30, r24
	if (Sekunden>60)
    4fe8:	82 89       	ldd	r24, Z+18	; 0x12
    4fea:	8d 33       	cpi	r24, 0x3D	; 61
    4fec:	b8 f0       	brcs	.+46     	; 0x501c <_ZN3RTC5timerEv+0x36>
	{
		Sekunden=59;
    4fee:	8b e3       	ldi	r24, 0x3B	; 59
    4ff0:	82 8b       	std	Z+18, r24	; 0x12
		Minuten--;
    4ff2:	81 89       	ldd	r24, Z+17	; 0x11
    4ff4:	81 50       	subi	r24, 0x01	; 1
		if (Minuten>60)
    4ff6:	8d 33       	cpi	r24, 0x3D	; 61
    4ff8:	18 f4       	brcc	.+6      	; 0x5000 <_ZN3RTC5timerEv+0x1a>

uint8_t RTC::timer(){
	if (Sekunden>60)
	{
		Sekunden=59;
		Minuten--;
    4ffa:	81 8b       	std	Z+17, r24	; 0x11
				Sekunden=0;
				return 1;
			}
		}
	}
	return 0;
    4ffc:	80 e0       	ldi	r24, 0x00	; 0
    4ffe:	08 95       	ret
	{
		Sekunden=59;
		Minuten--;
		if (Minuten>60)
		{
			Minuten=59;
    5000:	8b e3       	ldi	r24, 0x3B	; 59
    5002:	81 8b       	std	Z+17, r24	; 0x11
			Stunden--;
    5004:	80 89       	ldd	r24, Z+16	; 0x10
    5006:	81 50       	subi	r24, 0x01	; 1
			if (Stunden>24)
    5008:	89 31       	cpi	r24, 0x19	; 25
    500a:	18 f4       	brcc	.+6      	; 0x5012 <_ZN3RTC5timerEv+0x2c>
		Sekunden=59;
		Minuten--;
		if (Minuten>60)
		{
			Minuten=59;
			Stunden--;
    500c:	80 8b       	std	Z+16, r24	; 0x10
				Sekunden=0;
				return 1;
			}
		}
	}
	return 0;
    500e:	80 e0       	ldi	r24, 0x00	; 0
    5010:	08 95       	ret
		{
			Minuten=59;
			Stunden--;
			if (Stunden>24)
			{
				Stunden=0;
    5012:	10 8a       	std	Z+16, r1	; 0x10
				Minuten=0;
    5014:	11 8a       	std	Z+17, r1	; 0x11
				Sekunden=0;
    5016:	12 8a       	std	Z+18, r1	; 0x12
				return 1;
    5018:	81 e0       	ldi	r24, 0x01	; 1
    501a:	08 95       	ret
			}
		}
	}
	return 0;
    501c:	80 e0       	ldi	r24, 0x00	; 0
}
    501e:	08 95       	ret

00005020 <__subsf3>:
    5020:	50 58       	subi	r21, 0x80	; 128

00005022 <__addsf3>:
    5022:	bb 27       	eor	r27, r27
    5024:	aa 27       	eor	r26, r26
    5026:	0e d0       	rcall	.+28     	; 0x5044 <__addsf3x>
    5028:	27 c2       	rjmp	.+1102   	; 0x5478 <__fp_round>
    502a:	f0 d1       	rcall	.+992    	; 0x540c <__fp_pscA>
    502c:	30 f0       	brcs	.+12     	; 0x503a <__addsf3+0x18>
    502e:	f5 d1       	rcall	.+1002   	; 0x541a <__fp_pscB>
    5030:	20 f0       	brcs	.+8      	; 0x503a <__addsf3+0x18>
    5032:	31 f4       	brne	.+12     	; 0x5040 <__addsf3+0x1e>
    5034:	9f 3f       	cpi	r25, 0xFF	; 255
    5036:	11 f4       	brne	.+4      	; 0x503c <__addsf3+0x1a>
    5038:	1e f4       	brtc	.+6      	; 0x5040 <__addsf3+0x1e>
    503a:	c0 c1       	rjmp	.+896    	; 0x53bc <__fp_nan>
    503c:	0e f4       	brtc	.+2      	; 0x5040 <__addsf3+0x1e>
    503e:	e0 95       	com	r30
    5040:	e7 fb       	bst	r30, 7
    5042:	b6 c1       	rjmp	.+876    	; 0x53b0 <__fp_inf>

00005044 <__addsf3x>:
    5044:	e9 2f       	mov	r30, r25
    5046:	3a d2       	rcall	.+1140   	; 0x54bc <__fp_split3>
    5048:	80 f3       	brcs	.-32     	; 0x502a <__addsf3+0x8>
    504a:	ba 17       	cp	r27, r26
    504c:	62 07       	cpc	r22, r18
    504e:	73 07       	cpc	r23, r19
    5050:	84 07       	cpc	r24, r20
    5052:	95 07       	cpc	r25, r21
    5054:	18 f0       	brcs	.+6      	; 0x505c <__addsf3x+0x18>
    5056:	71 f4       	brne	.+28     	; 0x5074 <__addsf3x+0x30>
    5058:	9e f5       	brtc	.+102    	; 0x50c0 <__addsf3x+0x7c>
    505a:	52 c2       	rjmp	.+1188   	; 0x5500 <__fp_zero>
    505c:	0e f4       	brtc	.+2      	; 0x5060 <__addsf3x+0x1c>
    505e:	e0 95       	com	r30
    5060:	0b 2e       	mov	r0, r27
    5062:	ba 2f       	mov	r27, r26
    5064:	a0 2d       	mov	r26, r0
    5066:	0b 01       	movw	r0, r22
    5068:	b9 01       	movw	r22, r18
    506a:	90 01       	movw	r18, r0
    506c:	0c 01       	movw	r0, r24
    506e:	ca 01       	movw	r24, r20
    5070:	a0 01       	movw	r20, r0
    5072:	11 24       	eor	r1, r1
    5074:	ff 27       	eor	r31, r31
    5076:	59 1b       	sub	r21, r25
    5078:	99 f0       	breq	.+38     	; 0x50a0 <__addsf3x+0x5c>
    507a:	59 3f       	cpi	r21, 0xF9	; 249
    507c:	50 f4       	brcc	.+20     	; 0x5092 <__addsf3x+0x4e>
    507e:	50 3e       	cpi	r21, 0xE0	; 224
    5080:	68 f1       	brcs	.+90     	; 0x50dc <__addsf3x+0x98>
    5082:	1a 16       	cp	r1, r26
    5084:	f0 40       	sbci	r31, 0x00	; 0
    5086:	a2 2f       	mov	r26, r18
    5088:	23 2f       	mov	r18, r19
    508a:	34 2f       	mov	r19, r20
    508c:	44 27       	eor	r20, r20
    508e:	58 5f       	subi	r21, 0xF8	; 248
    5090:	f3 cf       	rjmp	.-26     	; 0x5078 <__addsf3x+0x34>
    5092:	46 95       	lsr	r20
    5094:	37 95       	ror	r19
    5096:	27 95       	ror	r18
    5098:	a7 95       	ror	r26
    509a:	f0 40       	sbci	r31, 0x00	; 0
    509c:	53 95       	inc	r21
    509e:	c9 f7       	brne	.-14     	; 0x5092 <__addsf3x+0x4e>
    50a0:	7e f4       	brtc	.+30     	; 0x50c0 <__addsf3x+0x7c>
    50a2:	1f 16       	cp	r1, r31
    50a4:	ba 0b       	sbc	r27, r26
    50a6:	62 0b       	sbc	r22, r18
    50a8:	73 0b       	sbc	r23, r19
    50aa:	84 0b       	sbc	r24, r20
    50ac:	ba f0       	brmi	.+46     	; 0x50dc <__addsf3x+0x98>
    50ae:	91 50       	subi	r25, 0x01	; 1
    50b0:	a1 f0       	breq	.+40     	; 0x50da <__addsf3x+0x96>
    50b2:	ff 0f       	add	r31, r31
    50b4:	bb 1f       	adc	r27, r27
    50b6:	66 1f       	adc	r22, r22
    50b8:	77 1f       	adc	r23, r23
    50ba:	88 1f       	adc	r24, r24
    50bc:	c2 f7       	brpl	.-16     	; 0x50ae <__addsf3x+0x6a>
    50be:	0e c0       	rjmp	.+28     	; 0x50dc <__addsf3x+0x98>
    50c0:	ba 0f       	add	r27, r26
    50c2:	62 1f       	adc	r22, r18
    50c4:	73 1f       	adc	r23, r19
    50c6:	84 1f       	adc	r24, r20
    50c8:	48 f4       	brcc	.+18     	; 0x50dc <__addsf3x+0x98>
    50ca:	87 95       	ror	r24
    50cc:	77 95       	ror	r23
    50ce:	67 95       	ror	r22
    50d0:	b7 95       	ror	r27
    50d2:	f7 95       	ror	r31
    50d4:	9e 3f       	cpi	r25, 0xFE	; 254
    50d6:	08 f0       	brcs	.+2      	; 0x50da <__addsf3x+0x96>
    50d8:	b3 cf       	rjmp	.-154    	; 0x5040 <__addsf3+0x1e>
    50da:	93 95       	inc	r25
    50dc:	88 0f       	add	r24, r24
    50de:	08 f0       	brcs	.+2      	; 0x50e2 <__addsf3x+0x9e>
    50e0:	99 27       	eor	r25, r25
    50e2:	ee 0f       	add	r30, r30
    50e4:	97 95       	ror	r25
    50e6:	87 95       	ror	r24
    50e8:	08 95       	ret
    50ea:	90 d1       	rcall	.+800    	; 0x540c <__fp_pscA>
    50ec:	58 f0       	brcs	.+22     	; 0x5104 <__addsf3x+0xc0>
    50ee:	80 e8       	ldi	r24, 0x80	; 128
    50f0:	91 e0       	ldi	r25, 0x01	; 1
    50f2:	09 f4       	brne	.+2      	; 0x50f6 <__addsf3x+0xb2>
    50f4:	9e ef       	ldi	r25, 0xFE	; 254
    50f6:	91 d1       	rcall	.+802    	; 0x541a <__fp_pscB>
    50f8:	28 f0       	brcs	.+10     	; 0x5104 <__addsf3x+0xc0>
    50fa:	40 e8       	ldi	r20, 0x80	; 128
    50fc:	51 e0       	ldi	r21, 0x01	; 1
    50fe:	59 f4       	brne	.+22     	; 0x5116 <atan2+0xe>
    5100:	5e ef       	ldi	r21, 0xFE	; 254
    5102:	09 c0       	rjmp	.+18     	; 0x5116 <atan2+0xe>
    5104:	5b c1       	rjmp	.+694    	; 0x53bc <__fp_nan>
    5106:	fc c1       	rjmp	.+1016   	; 0x5500 <__fp_zero>

00005108 <atan2>:
    5108:	e9 2f       	mov	r30, r25
    510a:	e0 78       	andi	r30, 0x80	; 128
    510c:	d7 d1       	rcall	.+942    	; 0x54bc <__fp_split3>
    510e:	68 f3       	brcs	.-38     	; 0x50ea <__addsf3x+0xa6>
    5110:	09 2e       	mov	r0, r25
    5112:	05 2a       	or	r0, r21
    5114:	c1 f3       	breq	.-16     	; 0x5106 <__addsf3x+0xc2>
    5116:	26 17       	cp	r18, r22
    5118:	37 07       	cpc	r19, r23
    511a:	48 07       	cpc	r20, r24
    511c:	59 07       	cpc	r21, r25
    511e:	38 f0       	brcs	.+14     	; 0x512e <atan2+0x26>
    5120:	0e 2e       	mov	r0, r30
    5122:	07 f8       	bld	r0, 7
    5124:	e0 25       	eor	r30, r0
    5126:	69 f0       	breq	.+26     	; 0x5142 <atan2+0x3a>
    5128:	e0 25       	eor	r30, r0
    512a:	e0 64       	ori	r30, 0x40	; 64
    512c:	0a c0       	rjmp	.+20     	; 0x5142 <atan2+0x3a>
    512e:	ef 63       	ori	r30, 0x3F	; 63
    5130:	07 f8       	bld	r0, 7
    5132:	00 94       	com	r0
    5134:	07 fa       	bst	r0, 7
    5136:	db 01       	movw	r26, r22
    5138:	b9 01       	movw	r22, r18
    513a:	9d 01       	movw	r18, r26
    513c:	dc 01       	movw	r26, r24
    513e:	ca 01       	movw	r24, r20
    5140:	ad 01       	movw	r20, r26
    5142:	ef 93       	push	r30
    5144:	4a d0       	rcall	.+148    	; 0x51da <__divsf3_pse>
    5146:	98 d1       	rcall	.+816    	; 0x5478 <__fp_round>
    5148:	0a d0       	rcall	.+20     	; 0x515e <atan>
    514a:	5f 91       	pop	r21
    514c:	55 23       	and	r21, r21
    514e:	31 f0       	breq	.+12     	; 0x515c <atan2+0x54>
    5150:	2b ed       	ldi	r18, 0xDB	; 219
    5152:	3f e0       	ldi	r19, 0x0F	; 15
    5154:	49 e4       	ldi	r20, 0x49	; 73
    5156:	50 fd       	sbrc	r21, 0
    5158:	49 ec       	ldi	r20, 0xC9	; 201
    515a:	63 cf       	rjmp	.-314    	; 0x5022 <__addsf3>
    515c:	08 95       	ret

0000515e <atan>:
    515e:	df 93       	push	r29
    5160:	dd 27       	eor	r29, r29
    5162:	b9 2f       	mov	r27, r25
    5164:	bf 77       	andi	r27, 0x7F	; 127
    5166:	40 e8       	ldi	r20, 0x80	; 128
    5168:	5f e3       	ldi	r21, 0x3F	; 63
    516a:	16 16       	cp	r1, r22
    516c:	17 06       	cpc	r1, r23
    516e:	48 07       	cpc	r20, r24
    5170:	5b 07       	cpc	r21, r27
    5172:	10 f4       	brcc	.+4      	; 0x5178 <atan+0x1a>
    5174:	d9 2f       	mov	r29, r25
    5176:	cf d1       	rcall	.+926    	; 0x5516 <inverse>
    5178:	9f 93       	push	r25
    517a:	8f 93       	push	r24
    517c:	7f 93       	push	r23
    517e:	6f 93       	push	r22
    5180:	7f d2       	rcall	.+1278   	; 0x5680 <square>
    5182:	ea e9       	ldi	r30, 0x9A	; 154
    5184:	f0 e0       	ldi	r31, 0x00	; 0
    5186:	1d d1       	rcall	.+570    	; 0x53c2 <__fp_powser>
    5188:	77 d1       	rcall	.+750    	; 0x5478 <__fp_round>
    518a:	2f 91       	pop	r18
    518c:	3f 91       	pop	r19
    518e:	4f 91       	pop	r20
    5190:	5f 91       	pop	r21
    5192:	19 d2       	rcall	.+1074   	; 0x55c6 <__mulsf3x>
    5194:	dd 23       	and	r29, r29
    5196:	49 f0       	breq	.+18     	; 0x51aa <atan+0x4c>
    5198:	90 58       	subi	r25, 0x80	; 128
    519a:	a2 ea       	ldi	r26, 0xA2	; 162
    519c:	2a ed       	ldi	r18, 0xDA	; 218
    519e:	3f e0       	ldi	r19, 0x0F	; 15
    51a0:	49 ec       	ldi	r20, 0xC9	; 201
    51a2:	5f e3       	ldi	r21, 0x3F	; 63
    51a4:	d0 78       	andi	r29, 0x80	; 128
    51a6:	5d 27       	eor	r21, r29
    51a8:	4d df       	rcall	.-358    	; 0x5044 <__addsf3x>
    51aa:	df 91       	pop	r29
    51ac:	65 c1       	rjmp	.+714    	; 0x5478 <__fp_round>

000051ae <__cmpsf2>:
    51ae:	dc d0       	rcall	.+440    	; 0x5368 <__fp_cmp>
    51b0:	08 f4       	brcc	.+2      	; 0x51b4 <__cmpsf2+0x6>
    51b2:	81 e0       	ldi	r24, 0x01	; 1
    51b4:	08 95       	ret

000051b6 <cos>:
    51b6:	39 d1       	rcall	.+626    	; 0x542a <__fp_rempio2>
    51b8:	e3 95       	inc	r30
    51ba:	6f c1       	rjmp	.+734    	; 0x549a <__fp_sinus>

000051bc <__divsf3>:
    51bc:	0c d0       	rcall	.+24     	; 0x51d6 <__divsf3x>
    51be:	5c c1       	rjmp	.+696    	; 0x5478 <__fp_round>
    51c0:	2c d1       	rcall	.+600    	; 0x541a <__fp_pscB>
    51c2:	40 f0       	brcs	.+16     	; 0x51d4 <__divsf3+0x18>
    51c4:	23 d1       	rcall	.+582    	; 0x540c <__fp_pscA>
    51c6:	30 f0       	brcs	.+12     	; 0x51d4 <__divsf3+0x18>
    51c8:	21 f4       	brne	.+8      	; 0x51d2 <__divsf3+0x16>
    51ca:	5f 3f       	cpi	r21, 0xFF	; 255
    51cc:	19 f0       	breq	.+6      	; 0x51d4 <__divsf3+0x18>
    51ce:	f0 c0       	rjmp	.+480    	; 0x53b0 <__fp_inf>
    51d0:	51 11       	cpse	r21, r1
    51d2:	97 c1       	rjmp	.+814    	; 0x5502 <__fp_szero>
    51d4:	f3 c0       	rjmp	.+486    	; 0x53bc <__fp_nan>

000051d6 <__divsf3x>:
    51d6:	72 d1       	rcall	.+740    	; 0x54bc <__fp_split3>
    51d8:	98 f3       	brcs	.-26     	; 0x51c0 <__divsf3+0x4>

000051da <__divsf3_pse>:
    51da:	99 23       	and	r25, r25
    51dc:	c9 f3       	breq	.-14     	; 0x51d0 <__divsf3+0x14>
    51de:	55 23       	and	r21, r21
    51e0:	b1 f3       	breq	.-20     	; 0x51ce <__divsf3+0x12>
    51e2:	95 1b       	sub	r25, r21
    51e4:	55 0b       	sbc	r21, r21
    51e6:	bb 27       	eor	r27, r27
    51e8:	aa 27       	eor	r26, r26
    51ea:	62 17       	cp	r22, r18
    51ec:	73 07       	cpc	r23, r19
    51ee:	84 07       	cpc	r24, r20
    51f0:	38 f0       	brcs	.+14     	; 0x5200 <__divsf3_pse+0x26>
    51f2:	9f 5f       	subi	r25, 0xFF	; 255
    51f4:	5f 4f       	sbci	r21, 0xFF	; 255
    51f6:	22 0f       	add	r18, r18
    51f8:	33 1f       	adc	r19, r19
    51fa:	44 1f       	adc	r20, r20
    51fc:	aa 1f       	adc	r26, r26
    51fe:	a9 f3       	breq	.-22     	; 0x51ea <__divsf3_pse+0x10>
    5200:	33 d0       	rcall	.+102    	; 0x5268 <__divsf3_pse+0x8e>
    5202:	0e 2e       	mov	r0, r30
    5204:	3a f0       	brmi	.+14     	; 0x5214 <__divsf3_pse+0x3a>
    5206:	e0 e8       	ldi	r30, 0x80	; 128
    5208:	30 d0       	rcall	.+96     	; 0x526a <__divsf3_pse+0x90>
    520a:	91 50       	subi	r25, 0x01	; 1
    520c:	50 40       	sbci	r21, 0x00	; 0
    520e:	e6 95       	lsr	r30
    5210:	00 1c       	adc	r0, r0
    5212:	ca f7       	brpl	.-14     	; 0x5206 <__divsf3_pse+0x2c>
    5214:	29 d0       	rcall	.+82     	; 0x5268 <__divsf3_pse+0x8e>
    5216:	fe 2f       	mov	r31, r30
    5218:	27 d0       	rcall	.+78     	; 0x5268 <__divsf3_pse+0x8e>
    521a:	66 0f       	add	r22, r22
    521c:	77 1f       	adc	r23, r23
    521e:	88 1f       	adc	r24, r24
    5220:	bb 1f       	adc	r27, r27
    5222:	26 17       	cp	r18, r22
    5224:	37 07       	cpc	r19, r23
    5226:	48 07       	cpc	r20, r24
    5228:	ab 07       	cpc	r26, r27
    522a:	b0 e8       	ldi	r27, 0x80	; 128
    522c:	09 f0       	breq	.+2      	; 0x5230 <__divsf3_pse+0x56>
    522e:	bb 0b       	sbc	r27, r27
    5230:	80 2d       	mov	r24, r0
    5232:	bf 01       	movw	r22, r30
    5234:	ff 27       	eor	r31, r31
    5236:	93 58       	subi	r25, 0x83	; 131
    5238:	5f 4f       	sbci	r21, 0xFF	; 255
    523a:	2a f0       	brmi	.+10     	; 0x5246 <__divsf3_pse+0x6c>
    523c:	9e 3f       	cpi	r25, 0xFE	; 254
    523e:	51 05       	cpc	r21, r1
    5240:	68 f0       	brcs	.+26     	; 0x525c <__divsf3_pse+0x82>
    5242:	b6 c0       	rjmp	.+364    	; 0x53b0 <__fp_inf>
    5244:	5e c1       	rjmp	.+700    	; 0x5502 <__fp_szero>
    5246:	5f 3f       	cpi	r21, 0xFF	; 255
    5248:	ec f3       	brlt	.-6      	; 0x5244 <__divsf3_pse+0x6a>
    524a:	98 3e       	cpi	r25, 0xE8	; 232
    524c:	dc f3       	brlt	.-10     	; 0x5244 <__divsf3_pse+0x6a>
    524e:	86 95       	lsr	r24
    5250:	77 95       	ror	r23
    5252:	67 95       	ror	r22
    5254:	b7 95       	ror	r27
    5256:	f7 95       	ror	r31
    5258:	9f 5f       	subi	r25, 0xFF	; 255
    525a:	c9 f7       	brne	.-14     	; 0x524e <__divsf3_pse+0x74>
    525c:	88 0f       	add	r24, r24
    525e:	91 1d       	adc	r25, r1
    5260:	96 95       	lsr	r25
    5262:	87 95       	ror	r24
    5264:	97 f9       	bld	r25, 7
    5266:	08 95       	ret
    5268:	e1 e0       	ldi	r30, 0x01	; 1
    526a:	66 0f       	add	r22, r22
    526c:	77 1f       	adc	r23, r23
    526e:	88 1f       	adc	r24, r24
    5270:	bb 1f       	adc	r27, r27
    5272:	62 17       	cp	r22, r18
    5274:	73 07       	cpc	r23, r19
    5276:	84 07       	cpc	r24, r20
    5278:	ba 07       	cpc	r27, r26
    527a:	20 f0       	brcs	.+8      	; 0x5284 <__divsf3_pse+0xaa>
    527c:	62 1b       	sub	r22, r18
    527e:	73 0b       	sbc	r23, r19
    5280:	84 0b       	sbc	r24, r20
    5282:	ba 0b       	sbc	r27, r26
    5284:	ee 1f       	adc	r30, r30
    5286:	88 f7       	brcc	.-30     	; 0x526a <__divsf3_pse+0x90>
    5288:	e0 95       	com	r30
    528a:	08 95       	ret

0000528c <__fixsfsi>:
    528c:	04 d0       	rcall	.+8      	; 0x5296 <__fixunssfsi>
    528e:	68 94       	set
    5290:	b1 11       	cpse	r27, r1
    5292:	37 c1       	rjmp	.+622    	; 0x5502 <__fp_szero>
    5294:	08 95       	ret

00005296 <__fixunssfsi>:
    5296:	1a d1       	rcall	.+564    	; 0x54cc <__fp_splitA>
    5298:	88 f0       	brcs	.+34     	; 0x52bc <__fixunssfsi+0x26>
    529a:	9f 57       	subi	r25, 0x7F	; 127
    529c:	90 f0       	brcs	.+36     	; 0x52c2 <__fixunssfsi+0x2c>
    529e:	b9 2f       	mov	r27, r25
    52a0:	99 27       	eor	r25, r25
    52a2:	b7 51       	subi	r27, 0x17	; 23
    52a4:	a0 f0       	brcs	.+40     	; 0x52ce <__fixunssfsi+0x38>
    52a6:	d1 f0       	breq	.+52     	; 0x52dc <__fixunssfsi+0x46>
    52a8:	66 0f       	add	r22, r22
    52aa:	77 1f       	adc	r23, r23
    52ac:	88 1f       	adc	r24, r24
    52ae:	99 1f       	adc	r25, r25
    52b0:	1a f0       	brmi	.+6      	; 0x52b8 <__fixunssfsi+0x22>
    52b2:	ba 95       	dec	r27
    52b4:	c9 f7       	brne	.-14     	; 0x52a8 <__fixunssfsi+0x12>
    52b6:	12 c0       	rjmp	.+36     	; 0x52dc <__fixunssfsi+0x46>
    52b8:	b1 30       	cpi	r27, 0x01	; 1
    52ba:	81 f0       	breq	.+32     	; 0x52dc <__fixunssfsi+0x46>
    52bc:	21 d1       	rcall	.+578    	; 0x5500 <__fp_zero>
    52be:	b1 e0       	ldi	r27, 0x01	; 1
    52c0:	08 95       	ret
    52c2:	1e c1       	rjmp	.+572    	; 0x5500 <__fp_zero>
    52c4:	67 2f       	mov	r22, r23
    52c6:	78 2f       	mov	r23, r24
    52c8:	88 27       	eor	r24, r24
    52ca:	b8 5f       	subi	r27, 0xF8	; 248
    52cc:	39 f0       	breq	.+14     	; 0x52dc <__fixunssfsi+0x46>
    52ce:	b9 3f       	cpi	r27, 0xF9	; 249
    52d0:	cc f3       	brlt	.-14     	; 0x52c4 <__fixunssfsi+0x2e>
    52d2:	86 95       	lsr	r24
    52d4:	77 95       	ror	r23
    52d6:	67 95       	ror	r22
    52d8:	b3 95       	inc	r27
    52da:	d9 f7       	brne	.-10     	; 0x52d2 <__fixunssfsi+0x3c>
    52dc:	3e f4       	brtc	.+14     	; 0x52ec <__fixunssfsi+0x56>
    52de:	90 95       	com	r25
    52e0:	80 95       	com	r24
    52e2:	70 95       	com	r23
    52e4:	61 95       	neg	r22
    52e6:	7f 4f       	sbci	r23, 0xFF	; 255
    52e8:	8f 4f       	sbci	r24, 0xFF	; 255
    52ea:	9f 4f       	sbci	r25, 0xFF	; 255
    52ec:	08 95       	ret

000052ee <__floatunsisf>:
    52ee:	e8 94       	clt
    52f0:	09 c0       	rjmp	.+18     	; 0x5304 <__floatsisf+0x12>

000052f2 <__floatsisf>:
    52f2:	97 fb       	bst	r25, 7
    52f4:	3e f4       	brtc	.+14     	; 0x5304 <__floatsisf+0x12>
    52f6:	90 95       	com	r25
    52f8:	80 95       	com	r24
    52fa:	70 95       	com	r23
    52fc:	61 95       	neg	r22
    52fe:	7f 4f       	sbci	r23, 0xFF	; 255
    5300:	8f 4f       	sbci	r24, 0xFF	; 255
    5302:	9f 4f       	sbci	r25, 0xFF	; 255
    5304:	99 23       	and	r25, r25
    5306:	a9 f0       	breq	.+42     	; 0x5332 <__floatsisf+0x40>
    5308:	f9 2f       	mov	r31, r25
    530a:	96 e9       	ldi	r25, 0x96	; 150
    530c:	bb 27       	eor	r27, r27
    530e:	93 95       	inc	r25
    5310:	f6 95       	lsr	r31
    5312:	87 95       	ror	r24
    5314:	77 95       	ror	r23
    5316:	67 95       	ror	r22
    5318:	b7 95       	ror	r27
    531a:	f1 11       	cpse	r31, r1
    531c:	f8 cf       	rjmp	.-16     	; 0x530e <__floatsisf+0x1c>
    531e:	fa f4       	brpl	.+62     	; 0x535e <__floatsisf+0x6c>
    5320:	bb 0f       	add	r27, r27
    5322:	11 f4       	brne	.+4      	; 0x5328 <__floatsisf+0x36>
    5324:	60 ff       	sbrs	r22, 0
    5326:	1b c0       	rjmp	.+54     	; 0x535e <__floatsisf+0x6c>
    5328:	6f 5f       	subi	r22, 0xFF	; 255
    532a:	7f 4f       	sbci	r23, 0xFF	; 255
    532c:	8f 4f       	sbci	r24, 0xFF	; 255
    532e:	9f 4f       	sbci	r25, 0xFF	; 255
    5330:	16 c0       	rjmp	.+44     	; 0x535e <__floatsisf+0x6c>
    5332:	88 23       	and	r24, r24
    5334:	11 f0       	breq	.+4      	; 0x533a <__floatsisf+0x48>
    5336:	96 e9       	ldi	r25, 0x96	; 150
    5338:	11 c0       	rjmp	.+34     	; 0x535c <__floatsisf+0x6a>
    533a:	77 23       	and	r23, r23
    533c:	21 f0       	breq	.+8      	; 0x5346 <__floatsisf+0x54>
    533e:	9e e8       	ldi	r25, 0x8E	; 142
    5340:	87 2f       	mov	r24, r23
    5342:	76 2f       	mov	r23, r22
    5344:	05 c0       	rjmp	.+10     	; 0x5350 <__floatsisf+0x5e>
    5346:	66 23       	and	r22, r22
    5348:	71 f0       	breq	.+28     	; 0x5366 <__floatsisf+0x74>
    534a:	96 e8       	ldi	r25, 0x86	; 134
    534c:	86 2f       	mov	r24, r22
    534e:	70 e0       	ldi	r23, 0x00	; 0
    5350:	60 e0       	ldi	r22, 0x00	; 0
    5352:	2a f0       	brmi	.+10     	; 0x535e <__floatsisf+0x6c>
    5354:	9a 95       	dec	r25
    5356:	66 0f       	add	r22, r22
    5358:	77 1f       	adc	r23, r23
    535a:	88 1f       	adc	r24, r24
    535c:	da f7       	brpl	.-10     	; 0x5354 <__floatsisf+0x62>
    535e:	88 0f       	add	r24, r24
    5360:	96 95       	lsr	r25
    5362:	87 95       	ror	r24
    5364:	97 f9       	bld	r25, 7
    5366:	08 95       	ret

00005368 <__fp_cmp>:
    5368:	99 0f       	add	r25, r25
    536a:	00 08       	sbc	r0, r0
    536c:	55 0f       	add	r21, r21
    536e:	aa 0b       	sbc	r26, r26
    5370:	e0 e8       	ldi	r30, 0x80	; 128
    5372:	fe ef       	ldi	r31, 0xFE	; 254
    5374:	16 16       	cp	r1, r22
    5376:	17 06       	cpc	r1, r23
    5378:	e8 07       	cpc	r30, r24
    537a:	f9 07       	cpc	r31, r25
    537c:	c0 f0       	brcs	.+48     	; 0x53ae <__fp_cmp+0x46>
    537e:	12 16       	cp	r1, r18
    5380:	13 06       	cpc	r1, r19
    5382:	e4 07       	cpc	r30, r20
    5384:	f5 07       	cpc	r31, r21
    5386:	98 f0       	brcs	.+38     	; 0x53ae <__fp_cmp+0x46>
    5388:	62 1b       	sub	r22, r18
    538a:	73 0b       	sbc	r23, r19
    538c:	84 0b       	sbc	r24, r20
    538e:	95 0b       	sbc	r25, r21
    5390:	39 f4       	brne	.+14     	; 0x53a0 <__fp_cmp+0x38>
    5392:	0a 26       	eor	r0, r26
    5394:	61 f0       	breq	.+24     	; 0x53ae <__fp_cmp+0x46>
    5396:	23 2b       	or	r18, r19
    5398:	24 2b       	or	r18, r20
    539a:	25 2b       	or	r18, r21
    539c:	21 f4       	brne	.+8      	; 0x53a6 <__fp_cmp+0x3e>
    539e:	08 95       	ret
    53a0:	0a 26       	eor	r0, r26
    53a2:	09 f4       	brne	.+2      	; 0x53a6 <__fp_cmp+0x3e>
    53a4:	a1 40       	sbci	r26, 0x01	; 1
    53a6:	a6 95       	lsr	r26
    53a8:	8f ef       	ldi	r24, 0xFF	; 255
    53aa:	81 1d       	adc	r24, r1
    53ac:	81 1d       	adc	r24, r1
    53ae:	08 95       	ret

000053b0 <__fp_inf>:
    53b0:	97 f9       	bld	r25, 7
    53b2:	9f 67       	ori	r25, 0x7F	; 127
    53b4:	80 e8       	ldi	r24, 0x80	; 128
    53b6:	70 e0       	ldi	r23, 0x00	; 0
    53b8:	60 e0       	ldi	r22, 0x00	; 0
    53ba:	08 95       	ret

000053bc <__fp_nan>:
    53bc:	9f ef       	ldi	r25, 0xFF	; 255
    53be:	80 ec       	ldi	r24, 0xC0	; 192
    53c0:	08 95       	ret

000053c2 <__fp_powser>:
    53c2:	df 93       	push	r29
    53c4:	cf 93       	push	r28
    53c6:	1f 93       	push	r17
    53c8:	0f 93       	push	r16
    53ca:	ff 92       	push	r15
    53cc:	ef 92       	push	r14
    53ce:	df 92       	push	r13
    53d0:	7b 01       	movw	r14, r22
    53d2:	8c 01       	movw	r16, r24
    53d4:	68 94       	set
    53d6:	05 c0       	rjmp	.+10     	; 0x53e2 <__fp_powser+0x20>
    53d8:	da 2e       	mov	r13, r26
    53da:	ef 01       	movw	r28, r30
    53dc:	f4 d0       	rcall	.+488    	; 0x55c6 <__mulsf3x>
    53de:	fe 01       	movw	r30, r28
    53e0:	e8 94       	clt
    53e2:	a5 91       	lpm	r26, Z+
    53e4:	25 91       	lpm	r18, Z+
    53e6:	35 91       	lpm	r19, Z+
    53e8:	45 91       	lpm	r20, Z+
    53ea:	55 91       	lpm	r21, Z+
    53ec:	ae f3       	brts	.-22     	; 0x53d8 <__fp_powser+0x16>
    53ee:	ef 01       	movw	r28, r30
    53f0:	29 de       	rcall	.-942    	; 0x5044 <__addsf3x>
    53f2:	fe 01       	movw	r30, r28
    53f4:	97 01       	movw	r18, r14
    53f6:	a8 01       	movw	r20, r16
    53f8:	da 94       	dec	r13
    53fa:	79 f7       	brne	.-34     	; 0x53da <__fp_powser+0x18>
    53fc:	df 90       	pop	r13
    53fe:	ef 90       	pop	r14
    5400:	ff 90       	pop	r15
    5402:	0f 91       	pop	r16
    5404:	1f 91       	pop	r17
    5406:	cf 91       	pop	r28
    5408:	df 91       	pop	r29
    540a:	08 95       	ret

0000540c <__fp_pscA>:
    540c:	00 24       	eor	r0, r0
    540e:	0a 94       	dec	r0
    5410:	16 16       	cp	r1, r22
    5412:	17 06       	cpc	r1, r23
    5414:	18 06       	cpc	r1, r24
    5416:	09 06       	cpc	r0, r25
    5418:	08 95       	ret

0000541a <__fp_pscB>:
    541a:	00 24       	eor	r0, r0
    541c:	0a 94       	dec	r0
    541e:	12 16       	cp	r1, r18
    5420:	13 06       	cpc	r1, r19
    5422:	14 06       	cpc	r1, r20
    5424:	05 06       	cpc	r0, r21
    5426:	08 95       	ret
    5428:	c9 cf       	rjmp	.-110    	; 0x53bc <__fp_nan>

0000542a <__fp_rempio2>:
    542a:	50 d0       	rcall	.+160    	; 0x54cc <__fp_splitA>
    542c:	e8 f3       	brcs	.-6      	; 0x5428 <__fp_pscB+0xe>
    542e:	e8 94       	clt
    5430:	e0 e0       	ldi	r30, 0x00	; 0
    5432:	bb 27       	eor	r27, r27
    5434:	9f 57       	subi	r25, 0x7F	; 127
    5436:	f0 f0       	brcs	.+60     	; 0x5474 <__fp_rempio2+0x4a>
    5438:	2a ed       	ldi	r18, 0xDA	; 218
    543a:	3f e0       	ldi	r19, 0x0F	; 15
    543c:	49 ec       	ldi	r20, 0xC9	; 201
    543e:	06 c0       	rjmp	.+12     	; 0x544c <__fp_rempio2+0x22>
    5440:	ee 0f       	add	r30, r30
    5442:	bb 0f       	add	r27, r27
    5444:	66 1f       	adc	r22, r22
    5446:	77 1f       	adc	r23, r23
    5448:	88 1f       	adc	r24, r24
    544a:	28 f0       	brcs	.+10     	; 0x5456 <__fp_rempio2+0x2c>
    544c:	b2 3a       	cpi	r27, 0xA2	; 162
    544e:	62 07       	cpc	r22, r18
    5450:	73 07       	cpc	r23, r19
    5452:	84 07       	cpc	r24, r20
    5454:	28 f0       	brcs	.+10     	; 0x5460 <__fp_rempio2+0x36>
    5456:	b2 5a       	subi	r27, 0xA2	; 162
    5458:	62 0b       	sbc	r22, r18
    545a:	73 0b       	sbc	r23, r19
    545c:	84 0b       	sbc	r24, r20
    545e:	e3 95       	inc	r30
    5460:	9a 95       	dec	r25
    5462:	72 f7       	brpl	.-36     	; 0x5440 <__fp_rempio2+0x16>
    5464:	80 38       	cpi	r24, 0x80	; 128
    5466:	30 f4       	brcc	.+12     	; 0x5474 <__fp_rempio2+0x4a>
    5468:	9a 95       	dec	r25
    546a:	bb 0f       	add	r27, r27
    546c:	66 1f       	adc	r22, r22
    546e:	77 1f       	adc	r23, r23
    5470:	88 1f       	adc	r24, r24
    5472:	d2 f7       	brpl	.-12     	; 0x5468 <__fp_rempio2+0x3e>
    5474:	90 48       	sbci	r25, 0x80	; 128
    5476:	29 c1       	rjmp	.+594    	; 0x56ca <__fp_mpack_finite>

00005478 <__fp_round>:
    5478:	09 2e       	mov	r0, r25
    547a:	03 94       	inc	r0
    547c:	00 0c       	add	r0, r0
    547e:	11 f4       	brne	.+4      	; 0x5484 <__fp_round+0xc>
    5480:	88 23       	and	r24, r24
    5482:	52 f0       	brmi	.+20     	; 0x5498 <__fp_round+0x20>
    5484:	bb 0f       	add	r27, r27
    5486:	40 f4       	brcc	.+16     	; 0x5498 <__fp_round+0x20>
    5488:	bf 2b       	or	r27, r31
    548a:	11 f4       	brne	.+4      	; 0x5490 <__fp_round+0x18>
    548c:	60 ff       	sbrs	r22, 0
    548e:	04 c0       	rjmp	.+8      	; 0x5498 <__fp_round+0x20>
    5490:	6f 5f       	subi	r22, 0xFF	; 255
    5492:	7f 4f       	sbci	r23, 0xFF	; 255
    5494:	8f 4f       	sbci	r24, 0xFF	; 255
    5496:	9f 4f       	sbci	r25, 0xFF	; 255
    5498:	08 95       	ret

0000549a <__fp_sinus>:
    549a:	ef 93       	push	r30
    549c:	e0 ff       	sbrs	r30, 0
    549e:	06 c0       	rjmp	.+12     	; 0x54ac <__fp_sinus+0x12>
    54a0:	a2 ea       	ldi	r26, 0xA2	; 162
    54a2:	2a ed       	ldi	r18, 0xDA	; 218
    54a4:	3f e0       	ldi	r19, 0x0F	; 15
    54a6:	49 ec       	ldi	r20, 0xC9	; 201
    54a8:	5f eb       	ldi	r21, 0xBF	; 191
    54aa:	cc dd       	rcall	.-1128   	; 0x5044 <__addsf3x>
    54ac:	e5 df       	rcall	.-54     	; 0x5478 <__fp_round>
    54ae:	0f 90       	pop	r0
    54b0:	03 94       	inc	r0
    54b2:	01 fc       	sbrc	r0, 1
    54b4:	90 58       	subi	r25, 0x80	; 128
    54b6:	e7 ec       	ldi	r30, 0xC7	; 199
    54b8:	f0 e0       	ldi	r31, 0x00	; 0
    54ba:	13 c1       	rjmp	.+550    	; 0x56e2 <__fp_powsodd>

000054bc <__fp_split3>:
    54bc:	57 fd       	sbrc	r21, 7
    54be:	90 58       	subi	r25, 0x80	; 128
    54c0:	44 0f       	add	r20, r20
    54c2:	55 1f       	adc	r21, r21
    54c4:	59 f0       	breq	.+22     	; 0x54dc <__fp_splitA+0x10>
    54c6:	5f 3f       	cpi	r21, 0xFF	; 255
    54c8:	71 f0       	breq	.+28     	; 0x54e6 <__fp_splitA+0x1a>
    54ca:	47 95       	ror	r20

000054cc <__fp_splitA>:
    54cc:	88 0f       	add	r24, r24
    54ce:	97 fb       	bst	r25, 7
    54d0:	99 1f       	adc	r25, r25
    54d2:	61 f0       	breq	.+24     	; 0x54ec <__fp_splitA+0x20>
    54d4:	9f 3f       	cpi	r25, 0xFF	; 255
    54d6:	79 f0       	breq	.+30     	; 0x54f6 <__fp_splitA+0x2a>
    54d8:	87 95       	ror	r24
    54da:	08 95       	ret
    54dc:	12 16       	cp	r1, r18
    54de:	13 06       	cpc	r1, r19
    54e0:	14 06       	cpc	r1, r20
    54e2:	55 1f       	adc	r21, r21
    54e4:	f2 cf       	rjmp	.-28     	; 0x54ca <__fp_split3+0xe>
    54e6:	46 95       	lsr	r20
    54e8:	f1 df       	rcall	.-30     	; 0x54cc <__fp_splitA>
    54ea:	08 c0       	rjmp	.+16     	; 0x54fc <__fp_splitA+0x30>
    54ec:	16 16       	cp	r1, r22
    54ee:	17 06       	cpc	r1, r23
    54f0:	18 06       	cpc	r1, r24
    54f2:	99 1f       	adc	r25, r25
    54f4:	f1 cf       	rjmp	.-30     	; 0x54d8 <__fp_splitA+0xc>
    54f6:	86 95       	lsr	r24
    54f8:	71 05       	cpc	r23, r1
    54fa:	61 05       	cpc	r22, r1
    54fc:	08 94       	sec
    54fe:	08 95       	ret

00005500 <__fp_zero>:
    5500:	e8 94       	clt

00005502 <__fp_szero>:
    5502:	bb 27       	eor	r27, r27
    5504:	66 27       	eor	r22, r22
    5506:	77 27       	eor	r23, r23
    5508:	cb 01       	movw	r24, r22
    550a:	97 f9       	bld	r25, 7
    550c:	08 95       	ret

0000550e <__gesf2>:
    550e:	2c df       	rcall	.-424    	; 0x5368 <__fp_cmp>
    5510:	08 f4       	brcc	.+2      	; 0x5514 <__gesf2+0x6>
    5512:	8f ef       	ldi	r24, 0xFF	; 255
    5514:	08 95       	ret

00005516 <inverse>:
    5516:	9b 01       	movw	r18, r22
    5518:	ac 01       	movw	r20, r24
    551a:	60 e0       	ldi	r22, 0x00	; 0
    551c:	70 e0       	ldi	r23, 0x00	; 0
    551e:	80 e8       	ldi	r24, 0x80	; 128
    5520:	9f e3       	ldi	r25, 0x3F	; 63
    5522:	4c ce       	rjmp	.-872    	; 0x51bc <__divsf3>
    5524:	0e f0       	brts	.+2      	; 0x5528 <inverse+0x12>
    5526:	cf c0       	rjmp	.+414    	; 0x56c6 <__fp_mpack>
    5528:	49 cf       	rjmp	.-366    	; 0x53bc <__fp_nan>
    552a:	68 94       	set
    552c:	41 cf       	rjmp	.-382    	; 0x53b0 <__fp_inf>

0000552e <log>:
    552e:	ce df       	rcall	.-100    	; 0x54cc <__fp_splitA>
    5530:	c8 f3       	brcs	.-14     	; 0x5524 <inverse+0xe>
    5532:	99 23       	and	r25, r25
    5534:	d1 f3       	breq	.-12     	; 0x552a <inverse+0x14>
    5536:	c6 f3       	brts	.-16     	; 0x5528 <inverse+0x12>
    5538:	df 93       	push	r29
    553a:	cf 93       	push	r28
    553c:	1f 93       	push	r17
    553e:	0f 93       	push	r16
    5540:	ff 92       	push	r15
    5542:	c9 2f       	mov	r28, r25
    5544:	dd 27       	eor	r29, r29
    5546:	88 23       	and	r24, r24
    5548:	2a f0       	brmi	.+10     	; 0x5554 <log+0x26>
    554a:	21 97       	sbiw	r28, 0x01	; 1
    554c:	66 0f       	add	r22, r22
    554e:	77 1f       	adc	r23, r23
    5550:	88 1f       	adc	r24, r24
    5552:	da f7       	brpl	.-10     	; 0x554a <log+0x1c>
    5554:	20 e0       	ldi	r18, 0x00	; 0
    5556:	30 e0       	ldi	r19, 0x00	; 0
    5558:	40 e8       	ldi	r20, 0x80	; 128
    555a:	5f eb       	ldi	r21, 0xBF	; 191
    555c:	9f e3       	ldi	r25, 0x3F	; 63
    555e:	88 39       	cpi	r24, 0x98	; 152
    5560:	20 f0       	brcs	.+8      	; 0x556a <log+0x3c>
    5562:	80 3e       	cpi	r24, 0xE0	; 224
    5564:	30 f0       	brcs	.+12     	; 0x5572 <log+0x44>
    5566:	21 96       	adiw	r28, 0x01	; 1
    5568:	8f 77       	andi	r24, 0x7F	; 127
    556a:	5b dd       	rcall	.-1354   	; 0x5022 <__addsf3>
    556c:	e5 ee       	ldi	r30, 0xE5	; 229
    556e:	f0 e0       	ldi	r31, 0x00	; 0
    5570:	03 c0       	rjmp	.+6      	; 0x5578 <log+0x4a>
    5572:	57 dd       	rcall	.-1362   	; 0x5022 <__addsf3>
    5574:	e2 e1       	ldi	r30, 0x12	; 18
    5576:	f1 e0       	ldi	r31, 0x01	; 1
    5578:	24 df       	rcall	.-440    	; 0x53c2 <__fp_powser>
    557a:	8b 01       	movw	r16, r22
    557c:	be 01       	movw	r22, r28
    557e:	ec 01       	movw	r28, r24
    5580:	fb 2e       	mov	r15, r27
    5582:	6f 57       	subi	r22, 0x7F	; 127
    5584:	71 09       	sbc	r23, r1
    5586:	75 95       	asr	r23
    5588:	77 1f       	adc	r23, r23
    558a:	88 0b       	sbc	r24, r24
    558c:	99 0b       	sbc	r25, r25
    558e:	b1 de       	rcall	.-670    	; 0x52f2 <__floatsisf>
    5590:	28 e1       	ldi	r18, 0x18	; 24
    5592:	32 e7       	ldi	r19, 0x72	; 114
    5594:	41 e3       	ldi	r20, 0x31	; 49
    5596:	5f e3       	ldi	r21, 0x3F	; 63
    5598:	16 d0       	rcall	.+44     	; 0x55c6 <__mulsf3x>
    559a:	af 2d       	mov	r26, r15
    559c:	98 01       	movw	r18, r16
    559e:	ae 01       	movw	r20, r28
    55a0:	ff 90       	pop	r15
    55a2:	0f 91       	pop	r16
    55a4:	1f 91       	pop	r17
    55a6:	cf 91       	pop	r28
    55a8:	df 91       	pop	r29
    55aa:	4c dd       	rcall	.-1384   	; 0x5044 <__addsf3x>
    55ac:	65 cf       	rjmp	.-310    	; 0x5478 <__fp_round>

000055ae <__mulsf3>:
    55ae:	0b d0       	rcall	.+22     	; 0x55c6 <__mulsf3x>
    55b0:	63 cf       	rjmp	.-314    	; 0x5478 <__fp_round>
    55b2:	2c df       	rcall	.-424    	; 0x540c <__fp_pscA>
    55b4:	28 f0       	brcs	.+10     	; 0x55c0 <__mulsf3+0x12>
    55b6:	31 df       	rcall	.-414    	; 0x541a <__fp_pscB>
    55b8:	18 f0       	brcs	.+6      	; 0x55c0 <__mulsf3+0x12>
    55ba:	95 23       	and	r25, r21
    55bc:	09 f0       	breq	.+2      	; 0x55c0 <__mulsf3+0x12>
    55be:	f8 ce       	rjmp	.-528    	; 0x53b0 <__fp_inf>
    55c0:	fd ce       	rjmp	.-518    	; 0x53bc <__fp_nan>
    55c2:	11 24       	eor	r1, r1
    55c4:	9e cf       	rjmp	.-196    	; 0x5502 <__fp_szero>

000055c6 <__mulsf3x>:
    55c6:	7a df       	rcall	.-268    	; 0x54bc <__fp_split3>
    55c8:	a0 f3       	brcs	.-24     	; 0x55b2 <__mulsf3+0x4>

000055ca <__mulsf3_pse>:
    55ca:	95 9f       	mul	r25, r21
    55cc:	d1 f3       	breq	.-12     	; 0x55c2 <__mulsf3+0x14>
    55ce:	95 0f       	add	r25, r21
    55d0:	50 e0       	ldi	r21, 0x00	; 0
    55d2:	55 1f       	adc	r21, r21
    55d4:	62 9f       	mul	r22, r18
    55d6:	f0 01       	movw	r30, r0
    55d8:	72 9f       	mul	r23, r18
    55da:	bb 27       	eor	r27, r27
    55dc:	f0 0d       	add	r31, r0
    55de:	b1 1d       	adc	r27, r1
    55e0:	63 9f       	mul	r22, r19
    55e2:	aa 27       	eor	r26, r26
    55e4:	f0 0d       	add	r31, r0
    55e6:	b1 1d       	adc	r27, r1
    55e8:	aa 1f       	adc	r26, r26
    55ea:	64 9f       	mul	r22, r20
    55ec:	66 27       	eor	r22, r22
    55ee:	b0 0d       	add	r27, r0
    55f0:	a1 1d       	adc	r26, r1
    55f2:	66 1f       	adc	r22, r22
    55f4:	82 9f       	mul	r24, r18
    55f6:	22 27       	eor	r18, r18
    55f8:	b0 0d       	add	r27, r0
    55fa:	a1 1d       	adc	r26, r1
    55fc:	62 1f       	adc	r22, r18
    55fe:	73 9f       	mul	r23, r19
    5600:	b0 0d       	add	r27, r0
    5602:	a1 1d       	adc	r26, r1
    5604:	62 1f       	adc	r22, r18
    5606:	83 9f       	mul	r24, r19
    5608:	a0 0d       	add	r26, r0
    560a:	61 1d       	adc	r22, r1
    560c:	22 1f       	adc	r18, r18
    560e:	74 9f       	mul	r23, r20
    5610:	33 27       	eor	r19, r19
    5612:	a0 0d       	add	r26, r0
    5614:	61 1d       	adc	r22, r1
    5616:	23 1f       	adc	r18, r19
    5618:	84 9f       	mul	r24, r20
    561a:	60 0d       	add	r22, r0
    561c:	21 1d       	adc	r18, r1
    561e:	82 2f       	mov	r24, r18
    5620:	76 2f       	mov	r23, r22
    5622:	6a 2f       	mov	r22, r26
    5624:	11 24       	eor	r1, r1
    5626:	9f 57       	subi	r25, 0x7F	; 127
    5628:	50 40       	sbci	r21, 0x00	; 0
    562a:	8a f0       	brmi	.+34     	; 0x564e <__mulsf3_pse+0x84>
    562c:	e1 f0       	breq	.+56     	; 0x5666 <__mulsf3_pse+0x9c>
    562e:	88 23       	and	r24, r24
    5630:	4a f0       	brmi	.+18     	; 0x5644 <__mulsf3_pse+0x7a>
    5632:	ee 0f       	add	r30, r30
    5634:	ff 1f       	adc	r31, r31
    5636:	bb 1f       	adc	r27, r27
    5638:	66 1f       	adc	r22, r22
    563a:	77 1f       	adc	r23, r23
    563c:	88 1f       	adc	r24, r24
    563e:	91 50       	subi	r25, 0x01	; 1
    5640:	50 40       	sbci	r21, 0x00	; 0
    5642:	a9 f7       	brne	.-22     	; 0x562e <__mulsf3_pse+0x64>
    5644:	9e 3f       	cpi	r25, 0xFE	; 254
    5646:	51 05       	cpc	r21, r1
    5648:	70 f0       	brcs	.+28     	; 0x5666 <__mulsf3_pse+0x9c>
    564a:	b2 ce       	rjmp	.-668    	; 0x53b0 <__fp_inf>
    564c:	5a cf       	rjmp	.-332    	; 0x5502 <__fp_szero>
    564e:	5f 3f       	cpi	r21, 0xFF	; 255
    5650:	ec f3       	brlt	.-6      	; 0x564c <__mulsf3_pse+0x82>
    5652:	98 3e       	cpi	r25, 0xE8	; 232
    5654:	dc f3       	brlt	.-10     	; 0x564c <__mulsf3_pse+0x82>
    5656:	86 95       	lsr	r24
    5658:	77 95       	ror	r23
    565a:	67 95       	ror	r22
    565c:	b7 95       	ror	r27
    565e:	f7 95       	ror	r31
    5660:	e7 95       	ror	r30
    5662:	9f 5f       	subi	r25, 0xFF	; 255
    5664:	c1 f7       	brne	.-16     	; 0x5656 <__mulsf3_pse+0x8c>
    5666:	fe 2b       	or	r31, r30
    5668:	88 0f       	add	r24, r24
    566a:	91 1d       	adc	r25, r1
    566c:	96 95       	lsr	r25
    566e:	87 95       	ror	r24
    5670:	97 f9       	bld	r25, 7
    5672:	08 95       	ret

00005674 <sin>:
    5674:	9f 93       	push	r25
    5676:	d9 de       	rcall	.-590    	; 0x542a <__fp_rempio2>
    5678:	0f 90       	pop	r0
    567a:	07 fc       	sbrc	r0, 7
    567c:	ee 5f       	subi	r30, 0xFE	; 254
    567e:	0d cf       	rjmp	.-486    	; 0x549a <__fp_sinus>

00005680 <square>:
    5680:	9b 01       	movw	r18, r22
    5682:	ac 01       	movw	r20, r24
    5684:	94 cf       	rjmp	.-216    	; 0x55ae <__mulsf3>

00005686 <tan>:
    5686:	df 93       	push	r29
    5688:	d9 2f       	mov	r29, r25
    568a:	cf de       	rcall	.-610    	; 0x542a <__fp_rempio2>
    568c:	e6 95       	lsr	r30
    568e:	d7 95       	ror	r29
    5690:	2a ed       	ldi	r18, 0xDA	; 218
    5692:	3f e0       	ldi	r19, 0x0F	; 15
    5694:	49 e4       	ldi	r20, 0x49	; 73
    5696:	5f e3       	ldi	r21, 0x3F	; 63
    5698:	b3 3a       	cpi	r27, 0xA3	; 163
    569a:	62 07       	cpc	r22, r18
    569c:	73 07       	cpc	r23, r19
    569e:	84 07       	cpc	r24, r20
    56a0:	95 07       	cpc	r25, r21
    56a2:	d7 95       	ror	r29
    56a4:	2a f0       	brmi	.+10     	; 0x56b0 <tan+0x2a>
    56a6:	a2 ea       	ldi	r26, 0xA2	; 162
    56a8:	49 ec       	ldi	r20, 0xC9	; 201
    56aa:	90 68       	ori	r25, 0x80	; 128
    56ac:	cb dc       	rcall	.-1642   	; 0x5044 <__addsf3x>
    56ae:	e4 de       	rcall	.-568    	; 0x5478 <__fp_round>
    56b0:	ef e3       	ldi	r30, 0x3F	; 63
    56b2:	f1 e0       	ldi	r31, 0x01	; 1
    56b4:	16 d0       	rcall	.+44     	; 0x56e2 <__fp_powsodd>
    56b6:	dd 0f       	add	r29, r29
    56b8:	0b f0       	brvs	.+2      	; 0x56bc <tan+0x36>
    56ba:	2d df       	rcall	.-422    	; 0x5516 <inverse>
    56bc:	dd 0f       	add	r29, r29
    56be:	0b f4       	brvc	.+2      	; 0x56c2 <tan+0x3c>
    56c0:	90 58       	subi	r25, 0x80	; 128
    56c2:	df 91       	pop	r29
    56c4:	08 95       	ret

000056c6 <__fp_mpack>:
    56c6:	9f 3f       	cpi	r25, 0xFF	; 255
    56c8:	31 f0       	breq	.+12     	; 0x56d6 <__fp_mpack_finite+0xc>

000056ca <__fp_mpack_finite>:
    56ca:	91 50       	subi	r25, 0x01	; 1
    56cc:	20 f4       	brcc	.+8      	; 0x56d6 <__fp_mpack_finite+0xc>
    56ce:	87 95       	ror	r24
    56d0:	77 95       	ror	r23
    56d2:	67 95       	ror	r22
    56d4:	b7 95       	ror	r27
    56d6:	88 0f       	add	r24, r24
    56d8:	91 1d       	adc	r25, r1
    56da:	96 95       	lsr	r25
    56dc:	87 95       	ror	r24
    56de:	97 f9       	bld	r25, 7
    56e0:	08 95       	ret

000056e2 <__fp_powsodd>:
    56e2:	9f 93       	push	r25
    56e4:	8f 93       	push	r24
    56e6:	7f 93       	push	r23
    56e8:	6f 93       	push	r22
    56ea:	ff 93       	push	r31
    56ec:	ef 93       	push	r30
    56ee:	9b 01       	movw	r18, r22
    56f0:	ac 01       	movw	r20, r24
    56f2:	5d df       	rcall	.-326    	; 0x55ae <__mulsf3>
    56f4:	ef 91       	pop	r30
    56f6:	ff 91       	pop	r31
    56f8:	64 de       	rcall	.-824    	; 0x53c2 <__fp_powser>
    56fa:	2f 91       	pop	r18
    56fc:	3f 91       	pop	r19
    56fe:	4f 91       	pop	r20
    5700:	5f 91       	pop	r21
    5702:	55 cf       	rjmp	.-342    	; 0x55ae <__mulsf3>

00005704 <vfprintf>:
    5704:	a3 e1       	ldi	r26, 0x13	; 19
    5706:	b0 e0       	ldi	r27, 0x00	; 0
    5708:	e8 e8       	ldi	r30, 0x88	; 136
    570a:	fb e2       	ldi	r31, 0x2B	; 43
    570c:	0c 94 03 2f 	jmp	0x5e06	; 0x5e06 <__prologue_saves__>
    5710:	7c 01       	movw	r14, r24
    5712:	1b 01       	movw	r2, r22
    5714:	6a 01       	movw	r12, r20
    5716:	fc 01       	movw	r30, r24
    5718:	17 82       	std	Z+7, r1	; 0x07
    571a:	16 82       	std	Z+6, r1	; 0x06
    571c:	83 81       	ldd	r24, Z+3	; 0x03
    571e:	81 ff       	sbrs	r24, 1
    5720:	66 c3       	rjmp	.+1740   	; 0x5dee <vfprintf+0x6ea>
    5722:	be 01       	movw	r22, r28
    5724:	6f 5f       	subi	r22, 0xFF	; 255
    5726:	7f 4f       	sbci	r23, 0xFF	; 255
    5728:	4b 01       	movw	r8, r22
    572a:	f7 01       	movw	r30, r14
    572c:	93 81       	ldd	r25, Z+3	; 0x03
    572e:	f1 01       	movw	r30, r2
    5730:	93 fd       	sbrc	r25, 3
    5732:	85 91       	lpm	r24, Z+
    5734:	93 ff       	sbrs	r25, 3
    5736:	81 91       	ld	r24, Z+
    5738:	1f 01       	movw	r2, r30
    573a:	88 23       	and	r24, r24
    573c:	09 f4       	brne	.+2      	; 0x5740 <vfprintf+0x3c>
    573e:	53 c3       	rjmp	.+1702   	; 0x5de6 <vfprintf+0x6e2>
    5740:	85 32       	cpi	r24, 0x25	; 37
    5742:	39 f4       	brne	.+14     	; 0x5752 <vfprintf+0x4e>
    5744:	93 fd       	sbrc	r25, 3
    5746:	85 91       	lpm	r24, Z+
    5748:	93 ff       	sbrs	r25, 3
    574a:	81 91       	ld	r24, Z+
    574c:	1f 01       	movw	r2, r30
    574e:	85 32       	cpi	r24, 0x25	; 37
    5750:	39 f4       	brne	.+14     	; 0x5760 <vfprintf+0x5c>
    5752:	b7 01       	movw	r22, r14
    5754:	90 e0       	ldi	r25, 0x00	; 0
    5756:	0e 94 28 30 	call	0x6050	; 0x6050 <fputc>
    575a:	56 01       	movw	r10, r12
    575c:	65 01       	movw	r12, r10
    575e:	e5 cf       	rjmp	.-54     	; 0x572a <vfprintf+0x26>
    5760:	10 e0       	ldi	r17, 0x00	; 0
    5762:	51 2c       	mov	r5, r1
    5764:	20 e0       	ldi	r18, 0x00	; 0
    5766:	20 32       	cpi	r18, 0x20	; 32
    5768:	a0 f4       	brcc	.+40     	; 0x5792 <vfprintf+0x8e>
    576a:	8b 32       	cpi	r24, 0x2B	; 43
    576c:	69 f0       	breq	.+26     	; 0x5788 <vfprintf+0x84>
    576e:	30 f4       	brcc	.+12     	; 0x577c <vfprintf+0x78>
    5770:	80 32       	cpi	r24, 0x20	; 32
    5772:	59 f0       	breq	.+22     	; 0x578a <vfprintf+0x86>
    5774:	83 32       	cpi	r24, 0x23	; 35
    5776:	69 f4       	brne	.+26     	; 0x5792 <vfprintf+0x8e>
    5778:	20 61       	ori	r18, 0x10	; 16
    577a:	2c c0       	rjmp	.+88     	; 0x57d4 <vfprintf+0xd0>
    577c:	8d 32       	cpi	r24, 0x2D	; 45
    577e:	39 f0       	breq	.+14     	; 0x578e <vfprintf+0x8a>
    5780:	80 33       	cpi	r24, 0x30	; 48
    5782:	39 f4       	brne	.+14     	; 0x5792 <vfprintf+0x8e>
    5784:	21 60       	ori	r18, 0x01	; 1
    5786:	26 c0       	rjmp	.+76     	; 0x57d4 <vfprintf+0xd0>
    5788:	22 60       	ori	r18, 0x02	; 2
    578a:	24 60       	ori	r18, 0x04	; 4
    578c:	23 c0       	rjmp	.+70     	; 0x57d4 <vfprintf+0xd0>
    578e:	28 60       	ori	r18, 0x08	; 8
    5790:	21 c0       	rjmp	.+66     	; 0x57d4 <vfprintf+0xd0>
    5792:	27 fd       	sbrc	r18, 7
    5794:	27 c0       	rjmp	.+78     	; 0x57e4 <vfprintf+0xe0>
    5796:	30 ed       	ldi	r19, 0xD0	; 208
    5798:	38 0f       	add	r19, r24
    579a:	3a 30       	cpi	r19, 0x0A	; 10
    579c:	78 f4       	brcc	.+30     	; 0x57bc <vfprintf+0xb8>
    579e:	26 ff       	sbrs	r18, 6
    57a0:	06 c0       	rjmp	.+12     	; 0x57ae <vfprintf+0xaa>
    57a2:	fa e0       	ldi	r31, 0x0A	; 10
    57a4:	1f 9f       	mul	r17, r31
    57a6:	30 0d       	add	r19, r0
    57a8:	11 24       	eor	r1, r1
    57aa:	13 2f       	mov	r17, r19
    57ac:	13 c0       	rjmp	.+38     	; 0x57d4 <vfprintf+0xd0>
    57ae:	6a e0       	ldi	r22, 0x0A	; 10
    57b0:	56 9e       	mul	r5, r22
    57b2:	30 0d       	add	r19, r0
    57b4:	11 24       	eor	r1, r1
    57b6:	53 2e       	mov	r5, r19
    57b8:	20 62       	ori	r18, 0x20	; 32
    57ba:	0c c0       	rjmp	.+24     	; 0x57d4 <vfprintf+0xd0>
    57bc:	8e 32       	cpi	r24, 0x2E	; 46
    57be:	21 f4       	brne	.+8      	; 0x57c8 <vfprintf+0xc4>
    57c0:	26 fd       	sbrc	r18, 6
    57c2:	11 c3       	rjmp	.+1570   	; 0x5de6 <vfprintf+0x6e2>
    57c4:	20 64       	ori	r18, 0x40	; 64
    57c6:	06 c0       	rjmp	.+12     	; 0x57d4 <vfprintf+0xd0>
    57c8:	8c 36       	cpi	r24, 0x6C	; 108
    57ca:	11 f4       	brne	.+4      	; 0x57d0 <vfprintf+0xcc>
    57cc:	20 68       	ori	r18, 0x80	; 128
    57ce:	02 c0       	rjmp	.+4      	; 0x57d4 <vfprintf+0xd0>
    57d0:	88 36       	cpi	r24, 0x68	; 104
    57d2:	41 f4       	brne	.+16     	; 0x57e4 <vfprintf+0xe0>
    57d4:	f1 01       	movw	r30, r2
    57d6:	93 fd       	sbrc	r25, 3
    57d8:	85 91       	lpm	r24, Z+
    57da:	93 ff       	sbrs	r25, 3
    57dc:	81 91       	ld	r24, Z+
    57de:	1f 01       	movw	r2, r30
    57e0:	81 11       	cpse	r24, r1
    57e2:	c1 cf       	rjmp	.-126    	; 0x5766 <vfprintf+0x62>
    57e4:	9b eb       	ldi	r25, 0xBB	; 187
    57e6:	98 0f       	add	r25, r24
    57e8:	93 30       	cpi	r25, 0x03	; 3
    57ea:	18 f4       	brcc	.+6      	; 0x57f2 <vfprintf+0xee>
    57ec:	20 61       	ori	r18, 0x10	; 16
    57ee:	80 5e       	subi	r24, 0xE0	; 224
    57f0:	06 c0       	rjmp	.+12     	; 0x57fe <vfprintf+0xfa>
    57f2:	9b e9       	ldi	r25, 0x9B	; 155
    57f4:	98 0f       	add	r25, r24
    57f6:	93 30       	cpi	r25, 0x03	; 3
    57f8:	08 f0       	brcs	.+2      	; 0x57fc <vfprintf+0xf8>
    57fa:	aa c1       	rjmp	.+852    	; 0x5b50 <vfprintf+0x44c>
    57fc:	2f 7e       	andi	r18, 0xEF	; 239
    57fe:	26 ff       	sbrs	r18, 6
    5800:	16 e0       	ldi	r17, 0x06	; 6
    5802:	2f 73       	andi	r18, 0x3F	; 63
    5804:	72 2e       	mov	r7, r18
    5806:	85 36       	cpi	r24, 0x65	; 101
    5808:	21 f4       	brne	.+8      	; 0x5812 <vfprintf+0x10e>
    580a:	f2 2f       	mov	r31, r18
    580c:	f0 64       	ori	r31, 0x40	; 64
    580e:	7f 2e       	mov	r7, r31
    5810:	08 c0       	rjmp	.+16     	; 0x5822 <vfprintf+0x11e>
    5812:	86 36       	cpi	r24, 0x66	; 102
    5814:	21 f4       	brne	.+8      	; 0x581e <vfprintf+0x11a>
    5816:	62 2f       	mov	r22, r18
    5818:	60 68       	ori	r22, 0x80	; 128
    581a:	76 2e       	mov	r7, r22
    581c:	02 c0       	rjmp	.+4      	; 0x5822 <vfprintf+0x11e>
    581e:	11 11       	cpse	r17, r1
    5820:	11 50       	subi	r17, 0x01	; 1
    5822:	77 fe       	sbrs	r7, 7
    5824:	07 c0       	rjmp	.+14     	; 0x5834 <vfprintf+0x130>
    5826:	1c 33       	cpi	r17, 0x3C	; 60
    5828:	48 f4       	brcc	.+18     	; 0x583c <vfprintf+0x138>
    582a:	44 24       	eor	r4, r4
    582c:	43 94       	inc	r4
    582e:	41 0e       	add	r4, r17
    5830:	27 e0       	ldi	r18, 0x07	; 7
    5832:	0b c0       	rjmp	.+22     	; 0x584a <vfprintf+0x146>
    5834:	18 30       	cpi	r17, 0x08	; 8
    5836:	30 f4       	brcc	.+12     	; 0x5844 <vfprintf+0x140>
    5838:	21 2f       	mov	r18, r17
    583a:	06 c0       	rjmp	.+12     	; 0x5848 <vfprintf+0x144>
    583c:	27 e0       	ldi	r18, 0x07	; 7
    583e:	4c e3       	ldi	r20, 0x3C	; 60
    5840:	44 2e       	mov	r4, r20
    5842:	03 c0       	rjmp	.+6      	; 0x584a <vfprintf+0x146>
    5844:	27 e0       	ldi	r18, 0x07	; 7
    5846:	17 e0       	ldi	r17, 0x07	; 7
    5848:	41 2c       	mov	r4, r1
    584a:	56 01       	movw	r10, r12
    584c:	74 e0       	ldi	r23, 0x04	; 4
    584e:	a7 0e       	add	r10, r23
    5850:	b1 1c       	adc	r11, r1
    5852:	f6 01       	movw	r30, r12
    5854:	60 81       	ld	r22, Z
    5856:	71 81       	ldd	r23, Z+1	; 0x01
    5858:	82 81       	ldd	r24, Z+2	; 0x02
    585a:	93 81       	ldd	r25, Z+3	; 0x03
    585c:	04 2d       	mov	r16, r4
    585e:	a4 01       	movw	r20, r8
    5860:	0e 94 3a 2f 	call	0x5e74	; 0x5e74 <__ftoa_engine>
    5864:	6c 01       	movw	r12, r24
    5866:	09 81       	ldd	r16, Y+1	; 0x01
    5868:	00 ff       	sbrs	r16, 0
    586a:	02 c0       	rjmp	.+4      	; 0x5870 <vfprintf+0x16c>
    586c:	03 ff       	sbrs	r16, 3
    586e:	06 c0       	rjmp	.+12     	; 0x587c <vfprintf+0x178>
    5870:	71 fc       	sbrc	r7, 1
    5872:	07 c0       	rjmp	.+14     	; 0x5882 <vfprintf+0x17e>
    5874:	72 fc       	sbrc	r7, 2
    5876:	08 c0       	rjmp	.+16     	; 0x5888 <vfprintf+0x184>
    5878:	61 2c       	mov	r6, r1
    587a:	08 c0       	rjmp	.+16     	; 0x588c <vfprintf+0x188>
    587c:	3d e2       	ldi	r19, 0x2D	; 45
    587e:	63 2e       	mov	r6, r19
    5880:	05 c0       	rjmp	.+10     	; 0x588c <vfprintf+0x188>
    5882:	2b e2       	ldi	r18, 0x2B	; 43
    5884:	62 2e       	mov	r6, r18
    5886:	02 c0       	rjmp	.+4      	; 0x588c <vfprintf+0x188>
    5888:	90 e2       	ldi	r25, 0x20	; 32
    588a:	69 2e       	mov	r6, r25
    588c:	80 2f       	mov	r24, r16
    588e:	8c 70       	andi	r24, 0x0C	; 12
    5890:	99 f1       	breq	.+102    	; 0x58f8 <vfprintf+0x1f4>
    5892:	66 20       	and	r6, r6
    5894:	11 f0       	breq	.+4      	; 0x589a <vfprintf+0x196>
    5896:	84 e0       	ldi	r24, 0x04	; 4
    5898:	01 c0       	rjmp	.+2      	; 0x589c <vfprintf+0x198>
    589a:	83 e0       	ldi	r24, 0x03	; 3
    589c:	85 15       	cp	r24, r5
    589e:	10 f0       	brcs	.+4      	; 0x58a4 <vfprintf+0x1a0>
    58a0:	51 2c       	mov	r5, r1
    58a2:	0b c0       	rjmp	.+22     	; 0x58ba <vfprintf+0x1b6>
    58a4:	58 1a       	sub	r5, r24
    58a6:	73 fc       	sbrc	r7, 3
    58a8:	08 c0       	rjmp	.+16     	; 0x58ba <vfprintf+0x1b6>
    58aa:	b7 01       	movw	r22, r14
    58ac:	80 e2       	ldi	r24, 0x20	; 32
    58ae:	90 e0       	ldi	r25, 0x00	; 0
    58b0:	0e 94 28 30 	call	0x6050	; 0x6050 <fputc>
    58b4:	5a 94       	dec	r5
    58b6:	c9 f7       	brne	.-14     	; 0x58aa <vfprintf+0x1a6>
    58b8:	f3 cf       	rjmp	.-26     	; 0x58a0 <vfprintf+0x19c>
    58ba:	66 20       	and	r6, r6
    58bc:	29 f0       	breq	.+10     	; 0x58c8 <vfprintf+0x1c4>
    58be:	b7 01       	movw	r22, r14
    58c0:	86 2d       	mov	r24, r6
    58c2:	90 e0       	ldi	r25, 0x00	; 0
    58c4:	0e 94 28 30 	call	0x6050	; 0x6050 <fputc>
    58c8:	03 fd       	sbrc	r16, 3
    58ca:	03 c0       	rjmp	.+6      	; 0x58d2 <vfprintf+0x1ce>
    58cc:	0c e7       	ldi	r16, 0x7C	; 124
    58ce:	16 e0       	ldi	r17, 0x06	; 6
    58d0:	02 c0       	rjmp	.+4      	; 0x58d6 <vfprintf+0x1d2>
    58d2:	08 e7       	ldi	r16, 0x78	; 120
    58d4:	16 e0       	ldi	r17, 0x06	; 6
    58d6:	f7 2d       	mov	r31, r7
    58d8:	f0 71       	andi	r31, 0x10	; 16
    58da:	7f 2e       	mov	r7, r31
    58dc:	f8 01       	movw	r30, r16
    58de:	84 91       	lpm	r24, Z
    58e0:	88 23       	and	r24, r24
    58e2:	09 f4       	brne	.+2      	; 0x58e6 <vfprintf+0x1e2>
    58e4:	76 c2       	rjmp	.+1260   	; 0x5dd2 <vfprintf+0x6ce>
    58e6:	71 10       	cpse	r7, r1
    58e8:	80 52       	subi	r24, 0x20	; 32
    58ea:	b7 01       	movw	r22, r14
    58ec:	90 e0       	ldi	r25, 0x00	; 0
    58ee:	0e 94 28 30 	call	0x6050	; 0x6050 <fputc>
    58f2:	0f 5f       	subi	r16, 0xFF	; 255
    58f4:	1f 4f       	sbci	r17, 0xFF	; 255
    58f6:	f2 cf       	rjmp	.-28     	; 0x58dc <vfprintf+0x1d8>
    58f8:	77 fe       	sbrs	r7, 7
    58fa:	0f c0       	rjmp	.+30     	; 0x591a <vfprintf+0x216>
    58fc:	4c 0c       	add	r4, r12
    58fe:	04 ff       	sbrs	r16, 4
    5900:	04 c0       	rjmp	.+8      	; 0x590a <vfprintf+0x206>
    5902:	8a 81       	ldd	r24, Y+2	; 0x02
    5904:	81 33       	cpi	r24, 0x31	; 49
    5906:	09 f4       	brne	.+2      	; 0x590a <vfprintf+0x206>
    5908:	4a 94       	dec	r4
    590a:	14 14       	cp	r1, r4
    590c:	74 f5       	brge	.+92     	; 0x596a <vfprintf+0x266>
    590e:	f8 e0       	ldi	r31, 0x08	; 8
    5910:	f4 15       	cp	r31, r4
    5912:	78 f5       	brcc	.+94     	; 0x5972 <vfprintf+0x26e>
    5914:	88 e0       	ldi	r24, 0x08	; 8
    5916:	48 2e       	mov	r4, r24
    5918:	2c c0       	rjmp	.+88     	; 0x5972 <vfprintf+0x26e>
    591a:	76 fc       	sbrc	r7, 6
    591c:	2a c0       	rjmp	.+84     	; 0x5972 <vfprintf+0x26e>
    591e:	81 2f       	mov	r24, r17
    5920:	90 e0       	ldi	r25, 0x00	; 0
    5922:	8c 15       	cp	r24, r12
    5924:	9d 05       	cpc	r25, r13
    5926:	9c f0       	brlt	.+38     	; 0x594e <vfprintf+0x24a>
    5928:	6c ef       	ldi	r22, 0xFC	; 252
    592a:	c6 16       	cp	r12, r22
    592c:	6f ef       	ldi	r22, 0xFF	; 255
    592e:	d6 06       	cpc	r13, r22
    5930:	74 f0       	brlt	.+28     	; 0x594e <vfprintf+0x24a>
    5932:	77 2d       	mov	r23, r7
    5934:	70 68       	ori	r23, 0x80	; 128
    5936:	77 2e       	mov	r7, r23
    5938:	0a c0       	rjmp	.+20     	; 0x594e <vfprintf+0x24a>
    593a:	e2 e0       	ldi	r30, 0x02	; 2
    593c:	f0 e0       	ldi	r31, 0x00	; 0
    593e:	ec 0f       	add	r30, r28
    5940:	fd 1f       	adc	r31, r29
    5942:	e1 0f       	add	r30, r17
    5944:	f1 1d       	adc	r31, r1
    5946:	80 81       	ld	r24, Z
    5948:	80 33       	cpi	r24, 0x30	; 48
    594a:	19 f4       	brne	.+6      	; 0x5952 <vfprintf+0x24e>
    594c:	11 50       	subi	r17, 0x01	; 1
    594e:	11 11       	cpse	r17, r1
    5950:	f4 cf       	rjmp	.-24     	; 0x593a <vfprintf+0x236>
    5952:	77 fe       	sbrs	r7, 7
    5954:	0e c0       	rjmp	.+28     	; 0x5972 <vfprintf+0x26e>
    5956:	44 24       	eor	r4, r4
    5958:	43 94       	inc	r4
    595a:	41 0e       	add	r4, r17
    595c:	81 2f       	mov	r24, r17
    595e:	90 e0       	ldi	r25, 0x00	; 0
    5960:	c8 16       	cp	r12, r24
    5962:	d9 06       	cpc	r13, r25
    5964:	2c f4       	brge	.+10     	; 0x5970 <vfprintf+0x26c>
    5966:	1c 19       	sub	r17, r12
    5968:	04 c0       	rjmp	.+8      	; 0x5972 <vfprintf+0x26e>
    596a:	44 24       	eor	r4, r4
    596c:	43 94       	inc	r4
    596e:	01 c0       	rjmp	.+2      	; 0x5972 <vfprintf+0x26e>
    5970:	10 e0       	ldi	r17, 0x00	; 0
    5972:	77 fe       	sbrs	r7, 7
    5974:	07 c0       	rjmp	.+14     	; 0x5984 <vfprintf+0x280>
    5976:	1c 14       	cp	r1, r12
    5978:	1d 04       	cpc	r1, r13
    597a:	3c f4       	brge	.+14     	; 0x598a <vfprintf+0x286>
    597c:	96 01       	movw	r18, r12
    597e:	2f 5f       	subi	r18, 0xFF	; 255
    5980:	3f 4f       	sbci	r19, 0xFF	; 255
    5982:	05 c0       	rjmp	.+10     	; 0x598e <vfprintf+0x28a>
    5984:	25 e0       	ldi	r18, 0x05	; 5
    5986:	30 e0       	ldi	r19, 0x00	; 0
    5988:	02 c0       	rjmp	.+4      	; 0x598e <vfprintf+0x28a>
    598a:	21 e0       	ldi	r18, 0x01	; 1
    598c:	30 e0       	ldi	r19, 0x00	; 0
    598e:	66 20       	and	r6, r6
    5990:	11 f0       	breq	.+4      	; 0x5996 <vfprintf+0x292>
    5992:	2f 5f       	subi	r18, 0xFF	; 255
    5994:	3f 4f       	sbci	r19, 0xFF	; 255
    5996:	11 23       	and	r17, r17
    5998:	31 f0       	breq	.+12     	; 0x59a6 <vfprintf+0x2a2>
    599a:	41 2f       	mov	r20, r17
    599c:	50 e0       	ldi	r21, 0x00	; 0
    599e:	4f 5f       	subi	r20, 0xFF	; 255
    59a0:	5f 4f       	sbci	r21, 0xFF	; 255
    59a2:	24 0f       	add	r18, r20
    59a4:	35 1f       	adc	r19, r21
    59a6:	45 2d       	mov	r20, r5
    59a8:	50 e0       	ldi	r21, 0x00	; 0
    59aa:	24 17       	cp	r18, r20
    59ac:	35 07       	cpc	r19, r21
    59ae:	14 f4       	brge	.+4      	; 0x59b4 <vfprintf+0x2b0>
    59b0:	52 1a       	sub	r5, r18
    59b2:	01 c0       	rjmp	.+2      	; 0x59b6 <vfprintf+0x2b2>
    59b4:	51 2c       	mov	r5, r1
    59b6:	87 2d       	mov	r24, r7
    59b8:	89 70       	andi	r24, 0x09	; 9
    59ba:	49 f4       	brne	.+18     	; 0x59ce <vfprintf+0x2ca>
    59bc:	55 20       	and	r5, r5
    59be:	39 f0       	breq	.+14     	; 0x59ce <vfprintf+0x2ca>
    59c0:	b7 01       	movw	r22, r14
    59c2:	80 e2       	ldi	r24, 0x20	; 32
    59c4:	90 e0       	ldi	r25, 0x00	; 0
    59c6:	0e 94 28 30 	call	0x6050	; 0x6050 <fputc>
    59ca:	5a 94       	dec	r5
    59cc:	f7 cf       	rjmp	.-18     	; 0x59bc <vfprintf+0x2b8>
    59ce:	66 20       	and	r6, r6
    59d0:	29 f0       	breq	.+10     	; 0x59dc <vfprintf+0x2d8>
    59d2:	b7 01       	movw	r22, r14
    59d4:	86 2d       	mov	r24, r6
    59d6:	90 e0       	ldi	r25, 0x00	; 0
    59d8:	0e 94 28 30 	call	0x6050	; 0x6050 <fputc>
    59dc:	73 fc       	sbrc	r7, 3
    59de:	09 c0       	rjmp	.+18     	; 0x59f2 <vfprintf+0x2ee>
    59e0:	55 20       	and	r5, r5
    59e2:	39 f0       	breq	.+14     	; 0x59f2 <vfprintf+0x2ee>
    59e4:	b7 01       	movw	r22, r14
    59e6:	80 e3       	ldi	r24, 0x30	; 48
    59e8:	90 e0       	ldi	r25, 0x00	; 0
    59ea:	0e 94 28 30 	call	0x6050	; 0x6050 <fputc>
    59ee:	5a 94       	dec	r5
    59f0:	f7 cf       	rjmp	.-18     	; 0x59e0 <vfprintf+0x2dc>
    59f2:	77 fe       	sbrs	r7, 7
    59f4:	5f c0       	rjmp	.+190    	; 0x5ab4 <vfprintf+0x3b0>
    59f6:	9c 2d       	mov	r25, r12
    59f8:	8d 2d       	mov	r24, r13
    59fa:	d7 fe       	sbrs	r13, 7
    59fc:	02 c0       	rjmp	.+4      	; 0x5a02 <vfprintf+0x2fe>
    59fe:	90 e0       	ldi	r25, 0x00	; 0
    5a00:	80 e0       	ldi	r24, 0x00	; 0
    5a02:	69 2e       	mov	r6, r25
    5a04:	78 2e       	mov	r7, r24
    5a06:	40 e0       	ldi	r20, 0x00	; 0
    5a08:	50 e0       	ldi	r21, 0x00	; 0
    5a0a:	c6 01       	movw	r24, r12
    5a0c:	84 19       	sub	r24, r4
    5a0e:	91 09       	sbc	r25, r1
    5a10:	9d 87       	std	Y+13, r25	; 0x0d
    5a12:	8c 87       	std	Y+12, r24	; 0x0c
    5a14:	96 01       	movw	r18, r12
    5a16:	26 19       	sub	r18, r6
    5a18:	37 09       	sbc	r19, r7
    5a1a:	28 0d       	add	r18, r8
    5a1c:	39 1d       	adc	r19, r9
    5a1e:	81 2f       	mov	r24, r17
    5a20:	90 e0       	ldi	r25, 0x00	; 0
    5a22:	ee 27       	eor	r30, r30
    5a24:	ff 27       	eor	r31, r31
    5a26:	e8 1b       	sub	r30, r24
    5a28:	f9 0b       	sbc	r31, r25
    5a2a:	ff 87       	std	Y+15, r31	; 0x0f
    5a2c:	ee 87       	std	Y+14, r30	; 0x0e
    5a2e:	ff ef       	ldi	r31, 0xFF	; 255
    5a30:	6f 16       	cp	r6, r31
    5a32:	7f 06       	cpc	r7, r31
    5a34:	69 f4       	brne	.+26     	; 0x5a50 <vfprintf+0x34c>
    5a36:	b7 01       	movw	r22, r14
    5a38:	8e e2       	ldi	r24, 0x2E	; 46
    5a3a:	90 e0       	ldi	r25, 0x00	; 0
    5a3c:	2b 8b       	std	Y+19, r18	; 0x13
    5a3e:	3a 8b       	std	Y+18, r19	; 0x12
    5a40:	48 8b       	std	Y+16, r20	; 0x10
    5a42:	59 8b       	std	Y+17, r21	; 0x11
    5a44:	0e 94 28 30 	call	0x6050	; 0x6050 <fputc>
    5a48:	59 89       	ldd	r21, Y+17	; 0x11
    5a4a:	48 89       	ldd	r20, Y+16	; 0x10
    5a4c:	3a 89       	ldd	r19, Y+18	; 0x12
    5a4e:	2b 89       	ldd	r18, Y+19	; 0x13
    5a50:	c6 14       	cp	r12, r6
    5a52:	d7 04       	cpc	r13, r7
    5a54:	54 f0       	brlt	.+20     	; 0x5a6a <vfprintf+0x366>
    5a56:	6c 85       	ldd	r22, Y+12	; 0x0c
    5a58:	7d 85       	ldd	r23, Y+13	; 0x0d
    5a5a:	66 15       	cp	r22, r6
    5a5c:	77 05       	cpc	r23, r7
    5a5e:	2c f4       	brge	.+10     	; 0x5a6a <vfprintf+0x366>
    5a60:	f9 01       	movw	r30, r18
    5a62:	e4 0f       	add	r30, r20
    5a64:	f5 1f       	adc	r31, r21
    5a66:	81 81       	ldd	r24, Z+1	; 0x01
    5a68:	01 c0       	rjmp	.+2      	; 0x5a6c <vfprintf+0x368>
    5a6a:	80 e3       	ldi	r24, 0x30	; 48
    5a6c:	71 e0       	ldi	r23, 0x01	; 1
    5a6e:	67 1a       	sub	r6, r23
    5a70:	71 08       	sbc	r7, r1
    5a72:	4f 5f       	subi	r20, 0xFF	; 255
    5a74:	5f 4f       	sbci	r21, 0xFF	; 255
    5a76:	ee 85       	ldd	r30, Y+14	; 0x0e
    5a78:	ff 85       	ldd	r31, Y+15	; 0x0f
    5a7a:	6e 16       	cp	r6, r30
    5a7c:	7f 06       	cpc	r7, r31
    5a7e:	6c f0       	brlt	.+26     	; 0x5a9a <vfprintf+0x396>
    5a80:	b7 01       	movw	r22, r14
    5a82:	90 e0       	ldi	r25, 0x00	; 0
    5a84:	2b 8b       	std	Y+19, r18	; 0x13
    5a86:	3a 8b       	std	Y+18, r19	; 0x12
    5a88:	48 8b       	std	Y+16, r20	; 0x10
    5a8a:	59 8b       	std	Y+17, r21	; 0x11
    5a8c:	0e 94 28 30 	call	0x6050	; 0x6050 <fputc>
    5a90:	2b 89       	ldd	r18, Y+19	; 0x13
    5a92:	3a 89       	ldd	r19, Y+18	; 0x12
    5a94:	48 89       	ldd	r20, Y+16	; 0x10
    5a96:	59 89       	ldd	r21, Y+17	; 0x11
    5a98:	ca cf       	rjmp	.-108    	; 0x5a2e <vfprintf+0x32a>
    5a9a:	6c 14       	cp	r6, r12
    5a9c:	7d 04       	cpc	r7, r13
    5a9e:	39 f4       	brne	.+14     	; 0x5aae <vfprintf+0x3aa>
    5aa0:	9a 81       	ldd	r25, Y+2	; 0x02
    5aa2:	96 33       	cpi	r25, 0x36	; 54
    5aa4:	18 f4       	brcc	.+6      	; 0x5aac <vfprintf+0x3a8>
    5aa6:	95 33       	cpi	r25, 0x35	; 53
    5aa8:	11 f4       	brne	.+4      	; 0x5aae <vfprintf+0x3aa>
    5aaa:	04 ff       	sbrs	r16, 4
    5aac:	81 e3       	ldi	r24, 0x31	; 49
    5aae:	b7 01       	movw	r22, r14
    5ab0:	90 e0       	ldi	r25, 0x00	; 0
    5ab2:	4b c0       	rjmp	.+150    	; 0x5b4a <vfprintf+0x446>
    5ab4:	8a 81       	ldd	r24, Y+2	; 0x02
    5ab6:	81 33       	cpi	r24, 0x31	; 49
    5ab8:	09 f0       	breq	.+2      	; 0x5abc <vfprintf+0x3b8>
    5aba:	0f 7e       	andi	r16, 0xEF	; 239
    5abc:	b7 01       	movw	r22, r14
    5abe:	90 e0       	ldi	r25, 0x00	; 0
    5ac0:	0e 94 28 30 	call	0x6050	; 0x6050 <fputc>
    5ac4:	11 11       	cpse	r17, r1
    5ac6:	05 c0       	rjmp	.+10     	; 0x5ad2 <vfprintf+0x3ce>
    5ac8:	74 fe       	sbrs	r7, 4
    5aca:	18 c0       	rjmp	.+48     	; 0x5afc <vfprintf+0x3f8>
    5acc:	85 e4       	ldi	r24, 0x45	; 69
    5ace:	90 e0       	ldi	r25, 0x00	; 0
    5ad0:	17 c0       	rjmp	.+46     	; 0x5b00 <vfprintf+0x3fc>
    5ad2:	b7 01       	movw	r22, r14
    5ad4:	8e e2       	ldi	r24, 0x2E	; 46
    5ad6:	90 e0       	ldi	r25, 0x00	; 0
    5ad8:	0e 94 28 30 	call	0x6050	; 0x6050 <fputc>
    5adc:	82 e0       	ldi	r24, 0x02	; 2
    5ade:	66 24       	eor	r6, r6
    5ae0:	63 94       	inc	r6
    5ae2:	68 0e       	add	r6, r24
    5ae4:	f4 01       	movw	r30, r8
    5ae6:	e8 0f       	add	r30, r24
    5ae8:	f1 1d       	adc	r31, r1
    5aea:	80 81       	ld	r24, Z
    5aec:	b7 01       	movw	r22, r14
    5aee:	90 e0       	ldi	r25, 0x00	; 0
    5af0:	0e 94 28 30 	call	0x6050	; 0x6050 <fputc>
    5af4:	11 50       	subi	r17, 0x01	; 1
    5af6:	41 f3       	breq	.-48     	; 0x5ac8 <vfprintf+0x3c4>
    5af8:	86 2d       	mov	r24, r6
    5afa:	f1 cf       	rjmp	.-30     	; 0x5ade <vfprintf+0x3da>
    5afc:	85 e6       	ldi	r24, 0x65	; 101
    5afe:	90 e0       	ldi	r25, 0x00	; 0
    5b00:	b7 01       	movw	r22, r14
    5b02:	0e 94 28 30 	call	0x6050	; 0x6050 <fputc>
    5b06:	d7 fc       	sbrc	r13, 7
    5b08:	05 c0       	rjmp	.+10     	; 0x5b14 <vfprintf+0x410>
    5b0a:	c1 14       	cp	r12, r1
    5b0c:	d1 04       	cpc	r13, r1
    5b0e:	39 f4       	brne	.+14     	; 0x5b1e <vfprintf+0x41a>
    5b10:	04 ff       	sbrs	r16, 4
    5b12:	05 c0       	rjmp	.+10     	; 0x5b1e <vfprintf+0x41a>
    5b14:	d1 94       	neg	r13
    5b16:	c1 94       	neg	r12
    5b18:	d1 08       	sbc	r13, r1
    5b1a:	8d e2       	ldi	r24, 0x2D	; 45
    5b1c:	01 c0       	rjmp	.+2      	; 0x5b20 <vfprintf+0x41c>
    5b1e:	8b e2       	ldi	r24, 0x2B	; 43
    5b20:	b7 01       	movw	r22, r14
    5b22:	90 e0       	ldi	r25, 0x00	; 0
    5b24:	0e 94 28 30 	call	0x6050	; 0x6050 <fputc>
    5b28:	80 e3       	ldi	r24, 0x30	; 48
    5b2a:	6a e0       	ldi	r22, 0x0A	; 10
    5b2c:	c6 16       	cp	r12, r22
    5b2e:	d1 04       	cpc	r13, r1
    5b30:	2c f0       	brlt	.+10     	; 0x5b3c <vfprintf+0x438>
    5b32:	8f 5f       	subi	r24, 0xFF	; 255
    5b34:	fa e0       	ldi	r31, 0x0A	; 10
    5b36:	cf 1a       	sub	r12, r31
    5b38:	d1 08       	sbc	r13, r1
    5b3a:	f7 cf       	rjmp	.-18     	; 0x5b2a <vfprintf+0x426>
    5b3c:	b7 01       	movw	r22, r14
    5b3e:	90 e0       	ldi	r25, 0x00	; 0
    5b40:	0e 94 28 30 	call	0x6050	; 0x6050 <fputc>
    5b44:	b7 01       	movw	r22, r14
    5b46:	c6 01       	movw	r24, r12
    5b48:	c0 96       	adiw	r24, 0x30	; 48
    5b4a:	0e 94 28 30 	call	0x6050	; 0x6050 <fputc>
    5b4e:	41 c1       	rjmp	.+642    	; 0x5dd2 <vfprintf+0x6ce>
    5b50:	83 36       	cpi	r24, 0x63	; 99
    5b52:	31 f0       	breq	.+12     	; 0x5b60 <vfprintf+0x45c>
    5b54:	83 37       	cpi	r24, 0x73	; 115
    5b56:	79 f0       	breq	.+30     	; 0x5b76 <vfprintf+0x472>
    5b58:	83 35       	cpi	r24, 0x53	; 83
    5b5a:	09 f0       	breq	.+2      	; 0x5b5e <vfprintf+0x45a>
    5b5c:	58 c0       	rjmp	.+176    	; 0x5c0e <vfprintf+0x50a>
    5b5e:	21 c0       	rjmp	.+66     	; 0x5ba2 <vfprintf+0x49e>
    5b60:	56 01       	movw	r10, r12
    5b62:	72 e0       	ldi	r23, 0x02	; 2
    5b64:	a7 0e       	add	r10, r23
    5b66:	b1 1c       	adc	r11, r1
    5b68:	f6 01       	movw	r30, r12
    5b6a:	80 81       	ld	r24, Z
    5b6c:	89 83       	std	Y+1, r24	; 0x01
    5b6e:	01 e0       	ldi	r16, 0x01	; 1
    5b70:	10 e0       	ldi	r17, 0x00	; 0
    5b72:	64 01       	movw	r12, r8
    5b74:	14 c0       	rjmp	.+40     	; 0x5b9e <vfprintf+0x49a>
    5b76:	56 01       	movw	r10, r12
    5b78:	f2 e0       	ldi	r31, 0x02	; 2
    5b7a:	af 0e       	add	r10, r31
    5b7c:	b1 1c       	adc	r11, r1
    5b7e:	f6 01       	movw	r30, r12
    5b80:	c0 80       	ld	r12, Z
    5b82:	d1 80       	ldd	r13, Z+1	; 0x01
    5b84:	26 ff       	sbrs	r18, 6
    5b86:	03 c0       	rjmp	.+6      	; 0x5b8e <vfprintf+0x48a>
    5b88:	61 2f       	mov	r22, r17
    5b8a:	70 e0       	ldi	r23, 0x00	; 0
    5b8c:	02 c0       	rjmp	.+4      	; 0x5b92 <vfprintf+0x48e>
    5b8e:	6f ef       	ldi	r22, 0xFF	; 255
    5b90:	7f ef       	ldi	r23, 0xFF	; 255
    5b92:	c6 01       	movw	r24, r12
    5b94:	2b 8b       	std	Y+19, r18	; 0x13
    5b96:	0e 94 1d 30 	call	0x603a	; 0x603a <strnlen>
    5b9a:	8c 01       	movw	r16, r24
    5b9c:	2b 89       	ldd	r18, Y+19	; 0x13
    5b9e:	2f 77       	andi	r18, 0x7F	; 127
    5ba0:	15 c0       	rjmp	.+42     	; 0x5bcc <vfprintf+0x4c8>
    5ba2:	56 01       	movw	r10, r12
    5ba4:	f2 e0       	ldi	r31, 0x02	; 2
    5ba6:	af 0e       	add	r10, r31
    5ba8:	b1 1c       	adc	r11, r1
    5baa:	f6 01       	movw	r30, r12
    5bac:	c0 80       	ld	r12, Z
    5bae:	d1 80       	ldd	r13, Z+1	; 0x01
    5bb0:	26 ff       	sbrs	r18, 6
    5bb2:	03 c0       	rjmp	.+6      	; 0x5bba <vfprintf+0x4b6>
    5bb4:	61 2f       	mov	r22, r17
    5bb6:	70 e0       	ldi	r23, 0x00	; 0
    5bb8:	02 c0       	rjmp	.+4      	; 0x5bbe <vfprintf+0x4ba>
    5bba:	6f ef       	ldi	r22, 0xFF	; 255
    5bbc:	7f ef       	ldi	r23, 0xFF	; 255
    5bbe:	c6 01       	movw	r24, r12
    5bc0:	2b 8b       	std	Y+19, r18	; 0x13
    5bc2:	0e 94 12 30 	call	0x6024	; 0x6024 <strnlen_P>
    5bc6:	8c 01       	movw	r16, r24
    5bc8:	2b 89       	ldd	r18, Y+19	; 0x13
    5bca:	20 68       	ori	r18, 0x80	; 128
    5bcc:	72 2e       	mov	r7, r18
    5bce:	23 fd       	sbrc	r18, 3
    5bd0:	1a c0       	rjmp	.+52     	; 0x5c06 <vfprintf+0x502>
    5bd2:	85 2d       	mov	r24, r5
    5bd4:	90 e0       	ldi	r25, 0x00	; 0
    5bd6:	08 17       	cp	r16, r24
    5bd8:	19 07       	cpc	r17, r25
    5bda:	a8 f4       	brcc	.+42     	; 0x5c06 <vfprintf+0x502>
    5bdc:	b7 01       	movw	r22, r14
    5bde:	80 e2       	ldi	r24, 0x20	; 32
    5be0:	90 e0       	ldi	r25, 0x00	; 0
    5be2:	0e 94 28 30 	call	0x6050	; 0x6050 <fputc>
    5be6:	5a 94       	dec	r5
    5be8:	f4 cf       	rjmp	.-24     	; 0x5bd2 <vfprintf+0x4ce>
    5bea:	f6 01       	movw	r30, r12
    5bec:	77 fc       	sbrc	r7, 7
    5bee:	85 91       	lpm	r24, Z+
    5bf0:	77 fe       	sbrs	r7, 7
    5bf2:	81 91       	ld	r24, Z+
    5bf4:	6f 01       	movw	r12, r30
    5bf6:	b7 01       	movw	r22, r14
    5bf8:	90 e0       	ldi	r25, 0x00	; 0
    5bfa:	0e 94 28 30 	call	0x6050	; 0x6050 <fputc>
    5bfe:	51 10       	cpse	r5, r1
    5c00:	5a 94       	dec	r5
    5c02:	01 50       	subi	r16, 0x01	; 1
    5c04:	11 09       	sbc	r17, r1
    5c06:	01 15       	cp	r16, r1
    5c08:	11 05       	cpc	r17, r1
    5c0a:	79 f7       	brne	.-34     	; 0x5bea <vfprintf+0x4e6>
    5c0c:	e2 c0       	rjmp	.+452    	; 0x5dd2 <vfprintf+0x6ce>
    5c0e:	84 36       	cpi	r24, 0x64	; 100
    5c10:	11 f0       	breq	.+4      	; 0x5c16 <vfprintf+0x512>
    5c12:	89 36       	cpi	r24, 0x69	; 105
    5c14:	51 f5       	brne	.+84     	; 0x5c6a <vfprintf+0x566>
    5c16:	56 01       	movw	r10, r12
    5c18:	27 ff       	sbrs	r18, 7
    5c1a:	09 c0       	rjmp	.+18     	; 0x5c2e <vfprintf+0x52a>
    5c1c:	f4 e0       	ldi	r31, 0x04	; 4
    5c1e:	af 0e       	add	r10, r31
    5c20:	b1 1c       	adc	r11, r1
    5c22:	f6 01       	movw	r30, r12
    5c24:	60 81       	ld	r22, Z
    5c26:	71 81       	ldd	r23, Z+1	; 0x01
    5c28:	82 81       	ldd	r24, Z+2	; 0x02
    5c2a:	93 81       	ldd	r25, Z+3	; 0x03
    5c2c:	0a c0       	rjmp	.+20     	; 0x5c42 <vfprintf+0x53e>
    5c2e:	f2 e0       	ldi	r31, 0x02	; 2
    5c30:	af 0e       	add	r10, r31
    5c32:	b1 1c       	adc	r11, r1
    5c34:	f6 01       	movw	r30, r12
    5c36:	60 81       	ld	r22, Z
    5c38:	71 81       	ldd	r23, Z+1	; 0x01
    5c3a:	88 27       	eor	r24, r24
    5c3c:	77 fd       	sbrc	r23, 7
    5c3e:	80 95       	com	r24
    5c40:	98 2f       	mov	r25, r24
    5c42:	02 2f       	mov	r16, r18
    5c44:	0f 76       	andi	r16, 0x6F	; 111
    5c46:	97 ff       	sbrs	r25, 7
    5c48:	08 c0       	rjmp	.+16     	; 0x5c5a <vfprintf+0x556>
    5c4a:	90 95       	com	r25
    5c4c:	80 95       	com	r24
    5c4e:	70 95       	com	r23
    5c50:	61 95       	neg	r22
    5c52:	7f 4f       	sbci	r23, 0xFF	; 255
    5c54:	8f 4f       	sbci	r24, 0xFF	; 255
    5c56:	9f 4f       	sbci	r25, 0xFF	; 255
    5c58:	00 68       	ori	r16, 0x80	; 128
    5c5a:	2a e0       	ldi	r18, 0x0A	; 10
    5c5c:	30 e0       	ldi	r19, 0x00	; 0
    5c5e:	a4 01       	movw	r20, r8
    5c60:	0e 94 7c 30 	call	0x60f8	; 0x60f8 <__ultoa_invert>
    5c64:	c8 2e       	mov	r12, r24
    5c66:	c8 18       	sub	r12, r8
    5c68:	3e c0       	rjmp	.+124    	; 0x5ce6 <vfprintf+0x5e2>
    5c6a:	02 2f       	mov	r16, r18
    5c6c:	85 37       	cpi	r24, 0x75	; 117
    5c6e:	21 f4       	brne	.+8      	; 0x5c78 <vfprintf+0x574>
    5c70:	0f 7e       	andi	r16, 0xEF	; 239
    5c72:	2a e0       	ldi	r18, 0x0A	; 10
    5c74:	30 e0       	ldi	r19, 0x00	; 0
    5c76:	1d c0       	rjmp	.+58     	; 0x5cb2 <vfprintf+0x5ae>
    5c78:	09 7f       	andi	r16, 0xF9	; 249
    5c7a:	8f 36       	cpi	r24, 0x6F	; 111
    5c7c:	91 f0       	breq	.+36     	; 0x5ca2 <vfprintf+0x59e>
    5c7e:	18 f4       	brcc	.+6      	; 0x5c86 <vfprintf+0x582>
    5c80:	88 35       	cpi	r24, 0x58	; 88
    5c82:	59 f0       	breq	.+22     	; 0x5c9a <vfprintf+0x596>
    5c84:	b0 c0       	rjmp	.+352    	; 0x5de6 <vfprintf+0x6e2>
    5c86:	80 37       	cpi	r24, 0x70	; 112
    5c88:	19 f0       	breq	.+6      	; 0x5c90 <vfprintf+0x58c>
    5c8a:	88 37       	cpi	r24, 0x78	; 120
    5c8c:	11 f0       	breq	.+4      	; 0x5c92 <vfprintf+0x58e>
    5c8e:	ab c0       	rjmp	.+342    	; 0x5de6 <vfprintf+0x6e2>
    5c90:	00 61       	ori	r16, 0x10	; 16
    5c92:	04 ff       	sbrs	r16, 4
    5c94:	09 c0       	rjmp	.+18     	; 0x5ca8 <vfprintf+0x5a4>
    5c96:	04 60       	ori	r16, 0x04	; 4
    5c98:	07 c0       	rjmp	.+14     	; 0x5ca8 <vfprintf+0x5a4>
    5c9a:	24 ff       	sbrs	r18, 4
    5c9c:	08 c0       	rjmp	.+16     	; 0x5cae <vfprintf+0x5aa>
    5c9e:	06 60       	ori	r16, 0x06	; 6
    5ca0:	06 c0       	rjmp	.+12     	; 0x5cae <vfprintf+0x5aa>
    5ca2:	28 e0       	ldi	r18, 0x08	; 8
    5ca4:	30 e0       	ldi	r19, 0x00	; 0
    5ca6:	05 c0       	rjmp	.+10     	; 0x5cb2 <vfprintf+0x5ae>
    5ca8:	20 e1       	ldi	r18, 0x10	; 16
    5caa:	30 e0       	ldi	r19, 0x00	; 0
    5cac:	02 c0       	rjmp	.+4      	; 0x5cb2 <vfprintf+0x5ae>
    5cae:	20 e1       	ldi	r18, 0x10	; 16
    5cb0:	32 e0       	ldi	r19, 0x02	; 2
    5cb2:	56 01       	movw	r10, r12
    5cb4:	07 ff       	sbrs	r16, 7
    5cb6:	09 c0       	rjmp	.+18     	; 0x5cca <vfprintf+0x5c6>
    5cb8:	f4 e0       	ldi	r31, 0x04	; 4
    5cba:	af 0e       	add	r10, r31
    5cbc:	b1 1c       	adc	r11, r1
    5cbe:	f6 01       	movw	r30, r12
    5cc0:	60 81       	ld	r22, Z
    5cc2:	71 81       	ldd	r23, Z+1	; 0x01
    5cc4:	82 81       	ldd	r24, Z+2	; 0x02
    5cc6:	93 81       	ldd	r25, Z+3	; 0x03
    5cc8:	08 c0       	rjmp	.+16     	; 0x5cda <vfprintf+0x5d6>
    5cca:	f2 e0       	ldi	r31, 0x02	; 2
    5ccc:	af 0e       	add	r10, r31
    5cce:	b1 1c       	adc	r11, r1
    5cd0:	f6 01       	movw	r30, r12
    5cd2:	60 81       	ld	r22, Z
    5cd4:	71 81       	ldd	r23, Z+1	; 0x01
    5cd6:	80 e0       	ldi	r24, 0x00	; 0
    5cd8:	90 e0       	ldi	r25, 0x00	; 0
    5cda:	a4 01       	movw	r20, r8
    5cdc:	0e 94 7c 30 	call	0x60f8	; 0x60f8 <__ultoa_invert>
    5ce0:	c8 2e       	mov	r12, r24
    5ce2:	c8 18       	sub	r12, r8
    5ce4:	0f 77       	andi	r16, 0x7F	; 127
    5ce6:	06 ff       	sbrs	r16, 6
    5ce8:	0b c0       	rjmp	.+22     	; 0x5d00 <vfprintf+0x5fc>
    5cea:	20 2f       	mov	r18, r16
    5cec:	2e 7f       	andi	r18, 0xFE	; 254
    5cee:	c1 16       	cp	r12, r17
    5cf0:	50 f4       	brcc	.+20     	; 0x5d06 <vfprintf+0x602>
    5cf2:	04 ff       	sbrs	r16, 4
    5cf4:	0a c0       	rjmp	.+20     	; 0x5d0a <vfprintf+0x606>
    5cf6:	02 fd       	sbrc	r16, 2
    5cf8:	08 c0       	rjmp	.+16     	; 0x5d0a <vfprintf+0x606>
    5cfa:	20 2f       	mov	r18, r16
    5cfc:	2e 7e       	andi	r18, 0xEE	; 238
    5cfe:	05 c0       	rjmp	.+10     	; 0x5d0a <vfprintf+0x606>
    5d00:	dc 2c       	mov	r13, r12
    5d02:	20 2f       	mov	r18, r16
    5d04:	03 c0       	rjmp	.+6      	; 0x5d0c <vfprintf+0x608>
    5d06:	dc 2c       	mov	r13, r12
    5d08:	01 c0       	rjmp	.+2      	; 0x5d0c <vfprintf+0x608>
    5d0a:	d1 2e       	mov	r13, r17
    5d0c:	24 ff       	sbrs	r18, 4
    5d0e:	0d c0       	rjmp	.+26     	; 0x5d2a <vfprintf+0x626>
    5d10:	fe 01       	movw	r30, r28
    5d12:	ec 0d       	add	r30, r12
    5d14:	f1 1d       	adc	r31, r1
    5d16:	80 81       	ld	r24, Z
    5d18:	80 33       	cpi	r24, 0x30	; 48
    5d1a:	11 f4       	brne	.+4      	; 0x5d20 <vfprintf+0x61c>
    5d1c:	29 7e       	andi	r18, 0xE9	; 233
    5d1e:	09 c0       	rjmp	.+18     	; 0x5d32 <vfprintf+0x62e>
    5d20:	22 ff       	sbrs	r18, 2
    5d22:	06 c0       	rjmp	.+12     	; 0x5d30 <vfprintf+0x62c>
    5d24:	d3 94       	inc	r13
    5d26:	d3 94       	inc	r13
    5d28:	04 c0       	rjmp	.+8      	; 0x5d32 <vfprintf+0x62e>
    5d2a:	82 2f       	mov	r24, r18
    5d2c:	86 78       	andi	r24, 0x86	; 134
    5d2e:	09 f0       	breq	.+2      	; 0x5d32 <vfprintf+0x62e>
    5d30:	d3 94       	inc	r13
    5d32:	23 fd       	sbrc	r18, 3
    5d34:	13 c0       	rjmp	.+38     	; 0x5d5c <vfprintf+0x658>
    5d36:	20 ff       	sbrs	r18, 0
    5d38:	06 c0       	rjmp	.+12     	; 0x5d46 <vfprintf+0x642>
    5d3a:	1c 2d       	mov	r17, r12
    5d3c:	d5 14       	cp	r13, r5
    5d3e:	18 f4       	brcc	.+6      	; 0x5d46 <vfprintf+0x642>
    5d40:	15 0d       	add	r17, r5
    5d42:	1d 19       	sub	r17, r13
    5d44:	d5 2c       	mov	r13, r5
    5d46:	d5 14       	cp	r13, r5
    5d48:	68 f4       	brcc	.+26     	; 0x5d64 <vfprintf+0x660>
    5d4a:	b7 01       	movw	r22, r14
    5d4c:	80 e2       	ldi	r24, 0x20	; 32
    5d4e:	90 e0       	ldi	r25, 0x00	; 0
    5d50:	2b 8b       	std	Y+19, r18	; 0x13
    5d52:	0e 94 28 30 	call	0x6050	; 0x6050 <fputc>
    5d56:	d3 94       	inc	r13
    5d58:	2b 89       	ldd	r18, Y+19	; 0x13
    5d5a:	f5 cf       	rjmp	.-22     	; 0x5d46 <vfprintf+0x642>
    5d5c:	d5 14       	cp	r13, r5
    5d5e:	10 f4       	brcc	.+4      	; 0x5d64 <vfprintf+0x660>
    5d60:	5d 18       	sub	r5, r13
    5d62:	01 c0       	rjmp	.+2      	; 0x5d66 <vfprintf+0x662>
    5d64:	51 2c       	mov	r5, r1
    5d66:	24 ff       	sbrs	r18, 4
    5d68:	12 c0       	rjmp	.+36     	; 0x5d8e <vfprintf+0x68a>
    5d6a:	b7 01       	movw	r22, r14
    5d6c:	80 e3       	ldi	r24, 0x30	; 48
    5d6e:	90 e0       	ldi	r25, 0x00	; 0
    5d70:	2b 8b       	std	Y+19, r18	; 0x13
    5d72:	0e 94 28 30 	call	0x6050	; 0x6050 <fputc>
    5d76:	2b 89       	ldd	r18, Y+19	; 0x13
    5d78:	22 ff       	sbrs	r18, 2
    5d7a:	17 c0       	rjmp	.+46     	; 0x5daa <vfprintf+0x6a6>
    5d7c:	21 ff       	sbrs	r18, 1
    5d7e:	03 c0       	rjmp	.+6      	; 0x5d86 <vfprintf+0x682>
    5d80:	88 e5       	ldi	r24, 0x58	; 88
    5d82:	90 e0       	ldi	r25, 0x00	; 0
    5d84:	02 c0       	rjmp	.+4      	; 0x5d8a <vfprintf+0x686>
    5d86:	88 e7       	ldi	r24, 0x78	; 120
    5d88:	90 e0       	ldi	r25, 0x00	; 0
    5d8a:	b7 01       	movw	r22, r14
    5d8c:	0c c0       	rjmp	.+24     	; 0x5da6 <vfprintf+0x6a2>
    5d8e:	82 2f       	mov	r24, r18
    5d90:	86 78       	andi	r24, 0x86	; 134
    5d92:	59 f0       	breq	.+22     	; 0x5daa <vfprintf+0x6a6>
    5d94:	21 fd       	sbrc	r18, 1
    5d96:	02 c0       	rjmp	.+4      	; 0x5d9c <vfprintf+0x698>
    5d98:	80 e2       	ldi	r24, 0x20	; 32
    5d9a:	01 c0       	rjmp	.+2      	; 0x5d9e <vfprintf+0x69a>
    5d9c:	8b e2       	ldi	r24, 0x2B	; 43
    5d9e:	27 fd       	sbrc	r18, 7
    5da0:	8d e2       	ldi	r24, 0x2D	; 45
    5da2:	b7 01       	movw	r22, r14
    5da4:	90 e0       	ldi	r25, 0x00	; 0
    5da6:	0e 94 28 30 	call	0x6050	; 0x6050 <fputc>
    5daa:	c1 16       	cp	r12, r17
    5dac:	38 f4       	brcc	.+14     	; 0x5dbc <vfprintf+0x6b8>
    5dae:	b7 01       	movw	r22, r14
    5db0:	80 e3       	ldi	r24, 0x30	; 48
    5db2:	90 e0       	ldi	r25, 0x00	; 0
    5db4:	0e 94 28 30 	call	0x6050	; 0x6050 <fputc>
    5db8:	11 50       	subi	r17, 0x01	; 1
    5dba:	f7 cf       	rjmp	.-18     	; 0x5daa <vfprintf+0x6a6>
    5dbc:	ca 94       	dec	r12
    5dbe:	f4 01       	movw	r30, r8
    5dc0:	ec 0d       	add	r30, r12
    5dc2:	f1 1d       	adc	r31, r1
    5dc4:	80 81       	ld	r24, Z
    5dc6:	b7 01       	movw	r22, r14
    5dc8:	90 e0       	ldi	r25, 0x00	; 0
    5dca:	0e 94 28 30 	call	0x6050	; 0x6050 <fputc>
    5dce:	c1 10       	cpse	r12, r1
    5dd0:	f5 cf       	rjmp	.-22     	; 0x5dbc <vfprintf+0x6b8>
    5dd2:	55 20       	and	r5, r5
    5dd4:	09 f4       	brne	.+2      	; 0x5dd8 <vfprintf+0x6d4>
    5dd6:	c2 cc       	rjmp	.-1660   	; 0x575c <vfprintf+0x58>
    5dd8:	b7 01       	movw	r22, r14
    5dda:	80 e2       	ldi	r24, 0x20	; 32
    5ddc:	90 e0       	ldi	r25, 0x00	; 0
    5dde:	0e 94 28 30 	call	0x6050	; 0x6050 <fputc>
    5de2:	5a 94       	dec	r5
    5de4:	f6 cf       	rjmp	.-20     	; 0x5dd2 <vfprintf+0x6ce>
    5de6:	f7 01       	movw	r30, r14
    5de8:	86 81       	ldd	r24, Z+6	; 0x06
    5dea:	97 81       	ldd	r25, Z+7	; 0x07
    5dec:	02 c0       	rjmp	.+4      	; 0x5df2 <vfprintf+0x6ee>
    5dee:	8f ef       	ldi	r24, 0xFF	; 255
    5df0:	9f ef       	ldi	r25, 0xFF	; 255
    5df2:	63 96       	adiw	r28, 0x13	; 19
    5df4:	e2 e1       	ldi	r30, 0x12	; 18
    5df6:	0c 94 1f 2f 	jmp	0x5e3e	; 0x5e3e <__epilogue_restores__>

00005dfa <__tablejump2__>:
    5dfa:	ee 0f       	add	r30, r30
    5dfc:	ff 1f       	adc	r31, r31

00005dfe <__tablejump__>:
    5dfe:	05 90       	lpm	r0, Z+
    5e00:	f4 91       	lpm	r31, Z
    5e02:	e0 2d       	mov	r30, r0
    5e04:	09 94       	ijmp

00005e06 <__prologue_saves__>:
    5e06:	2f 92       	push	r2
    5e08:	3f 92       	push	r3
    5e0a:	4f 92       	push	r4
    5e0c:	5f 92       	push	r5
    5e0e:	6f 92       	push	r6
    5e10:	7f 92       	push	r7
    5e12:	8f 92       	push	r8
    5e14:	9f 92       	push	r9
    5e16:	af 92       	push	r10
    5e18:	bf 92       	push	r11
    5e1a:	cf 92       	push	r12
    5e1c:	df 92       	push	r13
    5e1e:	ef 92       	push	r14
    5e20:	ff 92       	push	r15
    5e22:	0f 93       	push	r16
    5e24:	1f 93       	push	r17
    5e26:	cf 93       	push	r28
    5e28:	df 93       	push	r29
    5e2a:	cd b7       	in	r28, 0x3d	; 61
    5e2c:	de b7       	in	r29, 0x3e	; 62
    5e2e:	ca 1b       	sub	r28, r26
    5e30:	db 0b       	sbc	r29, r27
    5e32:	0f b6       	in	r0, 0x3f	; 63
    5e34:	f8 94       	cli
    5e36:	de bf       	out	0x3e, r29	; 62
    5e38:	0f be       	out	0x3f, r0	; 63
    5e3a:	cd bf       	out	0x3d, r28	; 61
    5e3c:	09 94       	ijmp

00005e3e <__epilogue_restores__>:
    5e3e:	2a 88       	ldd	r2, Y+18	; 0x12
    5e40:	39 88       	ldd	r3, Y+17	; 0x11
    5e42:	48 88       	ldd	r4, Y+16	; 0x10
    5e44:	5f 84       	ldd	r5, Y+15	; 0x0f
    5e46:	6e 84       	ldd	r6, Y+14	; 0x0e
    5e48:	7d 84       	ldd	r7, Y+13	; 0x0d
    5e4a:	8c 84       	ldd	r8, Y+12	; 0x0c
    5e4c:	9b 84       	ldd	r9, Y+11	; 0x0b
    5e4e:	aa 84       	ldd	r10, Y+10	; 0x0a
    5e50:	b9 84       	ldd	r11, Y+9	; 0x09
    5e52:	c8 84       	ldd	r12, Y+8	; 0x08
    5e54:	df 80       	ldd	r13, Y+7	; 0x07
    5e56:	ee 80       	ldd	r14, Y+6	; 0x06
    5e58:	fd 80       	ldd	r15, Y+5	; 0x05
    5e5a:	0c 81       	ldd	r16, Y+4	; 0x04
    5e5c:	1b 81       	ldd	r17, Y+3	; 0x03
    5e5e:	aa 81       	ldd	r26, Y+2	; 0x02
    5e60:	b9 81       	ldd	r27, Y+1	; 0x01
    5e62:	ce 0f       	add	r28, r30
    5e64:	d1 1d       	adc	r29, r1
    5e66:	0f b6       	in	r0, 0x3f	; 63
    5e68:	f8 94       	cli
    5e6a:	de bf       	out	0x3e, r29	; 62
    5e6c:	0f be       	out	0x3f, r0	; 63
    5e6e:	cd bf       	out	0x3d, r28	; 61
    5e70:	ed 01       	movw	r28, r26
    5e72:	08 95       	ret

00005e74 <__ftoa_engine>:
    5e74:	28 30       	cpi	r18, 0x08	; 8
    5e76:	08 f0       	brcs	.+2      	; 0x5e7a <__ftoa_engine+0x6>
    5e78:	27 e0       	ldi	r18, 0x07	; 7
    5e7a:	33 27       	eor	r19, r19
    5e7c:	da 01       	movw	r26, r20
    5e7e:	99 0f       	add	r25, r25
    5e80:	31 1d       	adc	r19, r1
    5e82:	87 fd       	sbrc	r24, 7
    5e84:	91 60       	ori	r25, 0x01	; 1
    5e86:	00 96       	adiw	r24, 0x00	; 0
    5e88:	61 05       	cpc	r22, r1
    5e8a:	71 05       	cpc	r23, r1
    5e8c:	39 f4       	brne	.+14     	; 0x5e9c <__ftoa_engine+0x28>
    5e8e:	32 60       	ori	r19, 0x02	; 2
    5e90:	2e 5f       	subi	r18, 0xFE	; 254
    5e92:	3d 93       	st	X+, r19
    5e94:	30 e3       	ldi	r19, 0x30	; 48
    5e96:	2a 95       	dec	r18
    5e98:	e1 f7       	brne	.-8      	; 0x5e92 <__ftoa_engine+0x1e>
    5e9a:	08 95       	ret
    5e9c:	9f 3f       	cpi	r25, 0xFF	; 255
    5e9e:	30 f0       	brcs	.+12     	; 0x5eac <__ftoa_engine+0x38>
    5ea0:	80 38       	cpi	r24, 0x80	; 128
    5ea2:	71 05       	cpc	r23, r1
    5ea4:	61 05       	cpc	r22, r1
    5ea6:	09 f0       	breq	.+2      	; 0x5eaa <__ftoa_engine+0x36>
    5ea8:	3c 5f       	subi	r19, 0xFC	; 252
    5eaa:	3c 5f       	subi	r19, 0xFC	; 252
    5eac:	3d 93       	st	X+, r19
    5eae:	91 30       	cpi	r25, 0x01	; 1
    5eb0:	08 f0       	brcs	.+2      	; 0x5eb4 <__ftoa_engine+0x40>
    5eb2:	80 68       	ori	r24, 0x80	; 128
    5eb4:	91 1d       	adc	r25, r1
    5eb6:	df 93       	push	r29
    5eb8:	cf 93       	push	r28
    5eba:	1f 93       	push	r17
    5ebc:	0f 93       	push	r16
    5ebe:	ff 92       	push	r15
    5ec0:	ef 92       	push	r14
    5ec2:	19 2f       	mov	r17, r25
    5ec4:	98 7f       	andi	r25, 0xF8	; 248
    5ec6:	96 95       	lsr	r25
    5ec8:	e9 2f       	mov	r30, r25
    5eca:	96 95       	lsr	r25
    5ecc:	96 95       	lsr	r25
    5ece:	e9 0f       	add	r30, r25
    5ed0:	ff 27       	eor	r31, r31
    5ed2:	e6 52       	subi	r30, 0x26	; 38
    5ed4:	f9 4f       	sbci	r31, 0xF9	; 249
    5ed6:	99 27       	eor	r25, r25
    5ed8:	33 27       	eor	r19, r19
    5eda:	ee 24       	eor	r14, r14
    5edc:	ff 24       	eor	r15, r15
    5ede:	a7 01       	movw	r20, r14
    5ee0:	e7 01       	movw	r28, r14
    5ee2:	05 90       	lpm	r0, Z+
    5ee4:	08 94       	sec
    5ee6:	07 94       	ror	r0
    5ee8:	28 f4       	brcc	.+10     	; 0x5ef4 <__ftoa_engine+0x80>
    5eea:	36 0f       	add	r19, r22
    5eec:	e7 1e       	adc	r14, r23
    5eee:	f8 1e       	adc	r15, r24
    5ef0:	49 1f       	adc	r20, r25
    5ef2:	51 1d       	adc	r21, r1
    5ef4:	66 0f       	add	r22, r22
    5ef6:	77 1f       	adc	r23, r23
    5ef8:	88 1f       	adc	r24, r24
    5efa:	99 1f       	adc	r25, r25
    5efc:	06 94       	lsr	r0
    5efe:	a1 f7       	brne	.-24     	; 0x5ee8 <__ftoa_engine+0x74>
    5f00:	05 90       	lpm	r0, Z+
    5f02:	07 94       	ror	r0
    5f04:	28 f4       	brcc	.+10     	; 0x5f10 <__ftoa_engine+0x9c>
    5f06:	e7 0e       	add	r14, r23
    5f08:	f8 1e       	adc	r15, r24
    5f0a:	49 1f       	adc	r20, r25
    5f0c:	56 1f       	adc	r21, r22
    5f0e:	c1 1d       	adc	r28, r1
    5f10:	77 0f       	add	r23, r23
    5f12:	88 1f       	adc	r24, r24
    5f14:	99 1f       	adc	r25, r25
    5f16:	66 1f       	adc	r22, r22
    5f18:	06 94       	lsr	r0
    5f1a:	a1 f7       	brne	.-24     	; 0x5f04 <__ftoa_engine+0x90>
    5f1c:	05 90       	lpm	r0, Z+
    5f1e:	07 94       	ror	r0
    5f20:	28 f4       	brcc	.+10     	; 0x5f2c <__ftoa_engine+0xb8>
    5f22:	f8 0e       	add	r15, r24
    5f24:	49 1f       	adc	r20, r25
    5f26:	56 1f       	adc	r21, r22
    5f28:	c7 1f       	adc	r28, r23
    5f2a:	d1 1d       	adc	r29, r1
    5f2c:	88 0f       	add	r24, r24
    5f2e:	99 1f       	adc	r25, r25
    5f30:	66 1f       	adc	r22, r22
    5f32:	77 1f       	adc	r23, r23
    5f34:	06 94       	lsr	r0
    5f36:	a1 f7       	brne	.-24     	; 0x5f20 <__ftoa_engine+0xac>
    5f38:	05 90       	lpm	r0, Z+
    5f3a:	07 94       	ror	r0
    5f3c:	20 f4       	brcc	.+8      	; 0x5f46 <__ftoa_engine+0xd2>
    5f3e:	49 0f       	add	r20, r25
    5f40:	56 1f       	adc	r21, r22
    5f42:	c7 1f       	adc	r28, r23
    5f44:	d8 1f       	adc	r29, r24
    5f46:	99 0f       	add	r25, r25
    5f48:	66 1f       	adc	r22, r22
    5f4a:	77 1f       	adc	r23, r23
    5f4c:	88 1f       	adc	r24, r24
    5f4e:	06 94       	lsr	r0
    5f50:	a9 f7       	brne	.-22     	; 0x5f3c <__ftoa_engine+0xc8>
    5f52:	84 91       	lpm	r24, Z
    5f54:	10 95       	com	r17
    5f56:	17 70       	andi	r17, 0x07	; 7
    5f58:	41 f0       	breq	.+16     	; 0x5f6a <__ftoa_engine+0xf6>
    5f5a:	d6 95       	lsr	r29
    5f5c:	c7 95       	ror	r28
    5f5e:	57 95       	ror	r21
    5f60:	47 95       	ror	r20
    5f62:	f7 94       	ror	r15
    5f64:	e7 94       	ror	r14
    5f66:	1a 95       	dec	r17
    5f68:	c1 f7       	brne	.-16     	; 0x5f5a <__ftoa_engine+0xe6>
    5f6a:	e0 e8       	ldi	r30, 0x80	; 128
    5f6c:	f6 e0       	ldi	r31, 0x06	; 6
    5f6e:	68 94       	set
    5f70:	15 90       	lpm	r1, Z+
    5f72:	15 91       	lpm	r17, Z+
    5f74:	35 91       	lpm	r19, Z+
    5f76:	65 91       	lpm	r22, Z+
    5f78:	95 91       	lpm	r25, Z+
    5f7a:	05 90       	lpm	r0, Z+
    5f7c:	7f e2       	ldi	r23, 0x2F	; 47
    5f7e:	73 95       	inc	r23
    5f80:	e1 18       	sub	r14, r1
    5f82:	f1 0a       	sbc	r15, r17
    5f84:	43 0b       	sbc	r20, r19
    5f86:	56 0b       	sbc	r21, r22
    5f88:	c9 0b       	sbc	r28, r25
    5f8a:	d0 09       	sbc	r29, r0
    5f8c:	c0 f7       	brcc	.-16     	; 0x5f7e <__ftoa_engine+0x10a>
    5f8e:	e1 0c       	add	r14, r1
    5f90:	f1 1e       	adc	r15, r17
    5f92:	43 1f       	adc	r20, r19
    5f94:	56 1f       	adc	r21, r22
    5f96:	c9 1f       	adc	r28, r25
    5f98:	d0 1d       	adc	r29, r0
    5f9a:	7e f4       	brtc	.+30     	; 0x5fba <__ftoa_engine+0x146>
    5f9c:	70 33       	cpi	r23, 0x30	; 48
    5f9e:	11 f4       	brne	.+4      	; 0x5fa4 <__ftoa_engine+0x130>
    5fa0:	8a 95       	dec	r24
    5fa2:	e6 cf       	rjmp	.-52     	; 0x5f70 <__ftoa_engine+0xfc>
    5fa4:	e8 94       	clt
    5fa6:	01 50       	subi	r16, 0x01	; 1
    5fa8:	30 f0       	brcs	.+12     	; 0x5fb6 <__ftoa_engine+0x142>
    5faa:	08 0f       	add	r16, r24
    5fac:	0a f4       	brpl	.+2      	; 0x5fb0 <__ftoa_engine+0x13c>
    5fae:	00 27       	eor	r16, r16
    5fb0:	02 17       	cp	r16, r18
    5fb2:	08 f4       	brcc	.+2      	; 0x5fb6 <__ftoa_engine+0x142>
    5fb4:	20 2f       	mov	r18, r16
    5fb6:	23 95       	inc	r18
    5fb8:	02 2f       	mov	r16, r18
    5fba:	7a 33       	cpi	r23, 0x3A	; 58
    5fbc:	28 f0       	brcs	.+10     	; 0x5fc8 <__ftoa_engine+0x154>
    5fbe:	79 e3       	ldi	r23, 0x39	; 57
    5fc0:	7d 93       	st	X+, r23
    5fc2:	2a 95       	dec	r18
    5fc4:	e9 f7       	brne	.-6      	; 0x5fc0 <__ftoa_engine+0x14c>
    5fc6:	10 c0       	rjmp	.+32     	; 0x5fe8 <__ftoa_engine+0x174>
    5fc8:	7d 93       	st	X+, r23
    5fca:	2a 95       	dec	r18
    5fcc:	89 f6       	brne	.-94     	; 0x5f70 <__ftoa_engine+0xfc>
    5fce:	06 94       	lsr	r0
    5fd0:	97 95       	ror	r25
    5fd2:	67 95       	ror	r22
    5fd4:	37 95       	ror	r19
    5fd6:	17 95       	ror	r17
    5fd8:	17 94       	ror	r1
    5fda:	e1 18       	sub	r14, r1
    5fdc:	f1 0a       	sbc	r15, r17
    5fde:	43 0b       	sbc	r20, r19
    5fe0:	56 0b       	sbc	r21, r22
    5fe2:	c9 0b       	sbc	r28, r25
    5fe4:	d0 09       	sbc	r29, r0
    5fe6:	98 f0       	brcs	.+38     	; 0x600e <__ftoa_engine+0x19a>
    5fe8:	23 95       	inc	r18
    5fea:	7e 91       	ld	r23, -X
    5fec:	73 95       	inc	r23
    5fee:	7a 33       	cpi	r23, 0x3A	; 58
    5ff0:	08 f0       	brcs	.+2      	; 0x5ff4 <__ftoa_engine+0x180>
    5ff2:	70 e3       	ldi	r23, 0x30	; 48
    5ff4:	7c 93       	st	X, r23
    5ff6:	20 13       	cpse	r18, r16
    5ff8:	b8 f7       	brcc	.-18     	; 0x5fe8 <__ftoa_engine+0x174>
    5ffa:	7e 91       	ld	r23, -X
    5ffc:	70 61       	ori	r23, 0x10	; 16
    5ffe:	7d 93       	st	X+, r23
    6000:	30 f0       	brcs	.+12     	; 0x600e <__ftoa_engine+0x19a>
    6002:	83 95       	inc	r24
    6004:	71 e3       	ldi	r23, 0x31	; 49
    6006:	7d 93       	st	X+, r23
    6008:	70 e3       	ldi	r23, 0x30	; 48
    600a:	2a 95       	dec	r18
    600c:	e1 f7       	brne	.-8      	; 0x6006 <__ftoa_engine+0x192>
    600e:	11 24       	eor	r1, r1
    6010:	ef 90       	pop	r14
    6012:	ff 90       	pop	r15
    6014:	0f 91       	pop	r16
    6016:	1f 91       	pop	r17
    6018:	cf 91       	pop	r28
    601a:	df 91       	pop	r29
    601c:	99 27       	eor	r25, r25
    601e:	87 fd       	sbrc	r24, 7
    6020:	90 95       	com	r25
    6022:	08 95       	ret

00006024 <strnlen_P>:
    6024:	fc 01       	movw	r30, r24
    6026:	05 90       	lpm	r0, Z+
    6028:	61 50       	subi	r22, 0x01	; 1
    602a:	70 40       	sbci	r23, 0x00	; 0
    602c:	01 10       	cpse	r0, r1
    602e:	d8 f7       	brcc	.-10     	; 0x6026 <strnlen_P+0x2>
    6030:	80 95       	com	r24
    6032:	90 95       	com	r25
    6034:	8e 0f       	add	r24, r30
    6036:	9f 1f       	adc	r25, r31
    6038:	08 95       	ret

0000603a <strnlen>:
    603a:	fc 01       	movw	r30, r24
    603c:	61 50       	subi	r22, 0x01	; 1
    603e:	70 40       	sbci	r23, 0x00	; 0
    6040:	01 90       	ld	r0, Z+
    6042:	01 10       	cpse	r0, r1
    6044:	d8 f7       	brcc	.-10     	; 0x603c <strnlen+0x2>
    6046:	80 95       	com	r24
    6048:	90 95       	com	r25
    604a:	8e 0f       	add	r24, r30
    604c:	9f 1f       	adc	r25, r31
    604e:	08 95       	ret

00006050 <fputc>:
    6050:	0f 93       	push	r16
    6052:	1f 93       	push	r17
    6054:	cf 93       	push	r28
    6056:	df 93       	push	r29
    6058:	18 2f       	mov	r17, r24
    605a:	09 2f       	mov	r16, r25
    605c:	eb 01       	movw	r28, r22
    605e:	8b 81       	ldd	r24, Y+3	; 0x03
    6060:	81 fd       	sbrc	r24, 1
    6062:	03 c0       	rjmp	.+6      	; 0x606a <fputc+0x1a>
    6064:	8f ef       	ldi	r24, 0xFF	; 255
    6066:	9f ef       	ldi	r25, 0xFF	; 255
    6068:	20 c0       	rjmp	.+64     	; 0x60aa <fputc+0x5a>
    606a:	82 ff       	sbrs	r24, 2
    606c:	10 c0       	rjmp	.+32     	; 0x608e <fputc+0x3e>
    606e:	4e 81       	ldd	r20, Y+6	; 0x06
    6070:	5f 81       	ldd	r21, Y+7	; 0x07
    6072:	2c 81       	ldd	r18, Y+4	; 0x04
    6074:	3d 81       	ldd	r19, Y+5	; 0x05
    6076:	42 17       	cp	r20, r18
    6078:	53 07       	cpc	r21, r19
    607a:	7c f4       	brge	.+30     	; 0x609a <fputc+0x4a>
    607c:	e8 81       	ld	r30, Y
    607e:	f9 81       	ldd	r31, Y+1	; 0x01
    6080:	9f 01       	movw	r18, r30
    6082:	2f 5f       	subi	r18, 0xFF	; 255
    6084:	3f 4f       	sbci	r19, 0xFF	; 255
    6086:	39 83       	std	Y+1, r19	; 0x01
    6088:	28 83       	st	Y, r18
    608a:	10 83       	st	Z, r17
    608c:	06 c0       	rjmp	.+12     	; 0x609a <fputc+0x4a>
    608e:	e8 85       	ldd	r30, Y+8	; 0x08
    6090:	f9 85       	ldd	r31, Y+9	; 0x09
    6092:	81 2f       	mov	r24, r17
    6094:	09 95       	icall
    6096:	89 2b       	or	r24, r25
    6098:	29 f7       	brne	.-54     	; 0x6064 <fputc+0x14>
    609a:	2e 81       	ldd	r18, Y+6	; 0x06
    609c:	3f 81       	ldd	r19, Y+7	; 0x07
    609e:	2f 5f       	subi	r18, 0xFF	; 255
    60a0:	3f 4f       	sbci	r19, 0xFF	; 255
    60a2:	3f 83       	std	Y+7, r19	; 0x07
    60a4:	2e 83       	std	Y+6, r18	; 0x06
    60a6:	81 2f       	mov	r24, r17
    60a8:	90 2f       	mov	r25, r16
    60aa:	df 91       	pop	r29
    60ac:	cf 91       	pop	r28
    60ae:	1f 91       	pop	r17
    60b0:	0f 91       	pop	r16
    60b2:	08 95       	ret

000060b4 <sprintf>:
    60b4:	ae e0       	ldi	r26, 0x0E	; 14
    60b6:	b0 e0       	ldi	r27, 0x00	; 0
    60b8:	e0 e6       	ldi	r30, 0x60	; 96
    60ba:	f0 e3       	ldi	r31, 0x30	; 48
    60bc:	0c 94 11 2f 	jmp	0x5e22	; 0x5e22 <__prologue_saves__+0x1c>
    60c0:	0d 89       	ldd	r16, Y+21	; 0x15
    60c2:	1e 89       	ldd	r17, Y+22	; 0x16
    60c4:	86 e0       	ldi	r24, 0x06	; 6
    60c6:	8c 83       	std	Y+4, r24	; 0x04
    60c8:	1a 83       	std	Y+2, r17	; 0x02
    60ca:	09 83       	std	Y+1, r16	; 0x01
    60cc:	8f ef       	ldi	r24, 0xFF	; 255
    60ce:	9f e7       	ldi	r25, 0x7F	; 127
    60d0:	9e 83       	std	Y+6, r25	; 0x06
    60d2:	8d 83       	std	Y+5, r24	; 0x05
    60d4:	ae 01       	movw	r20, r28
    60d6:	47 5e       	subi	r20, 0xE7	; 231
    60d8:	5f 4f       	sbci	r21, 0xFF	; 255
    60da:	6f 89       	ldd	r22, Y+23	; 0x17
    60dc:	78 8d       	ldd	r23, Y+24	; 0x18
    60de:	ce 01       	movw	r24, r28
    60e0:	01 96       	adiw	r24, 0x01	; 1
    60e2:	0e 94 82 2b 	call	0x5704	; 0x5704 <vfprintf>
    60e6:	ef 81       	ldd	r30, Y+7	; 0x07
    60e8:	f8 85       	ldd	r31, Y+8	; 0x08
    60ea:	e0 0f       	add	r30, r16
    60ec:	f1 1f       	adc	r31, r17
    60ee:	10 82       	st	Z, r1
    60f0:	2e 96       	adiw	r28, 0x0e	; 14
    60f2:	e4 e0       	ldi	r30, 0x04	; 4
    60f4:	0c 94 2d 2f 	jmp	0x5e5a	; 0x5e5a <__epilogue_restores__+0x1c>

000060f8 <__ultoa_invert>:
    60f8:	fa 01       	movw	r30, r20
    60fa:	aa 27       	eor	r26, r26
    60fc:	28 30       	cpi	r18, 0x08	; 8
    60fe:	51 f1       	breq	.+84     	; 0x6154 <__ultoa_invert+0x5c>
    6100:	20 31       	cpi	r18, 0x10	; 16
    6102:	81 f1       	breq	.+96     	; 0x6164 <__ultoa_invert+0x6c>
    6104:	e8 94       	clt
    6106:	6f 93       	push	r22
    6108:	6e 7f       	andi	r22, 0xFE	; 254
    610a:	6e 5f       	subi	r22, 0xFE	; 254
    610c:	7f 4f       	sbci	r23, 0xFF	; 255
    610e:	8f 4f       	sbci	r24, 0xFF	; 255
    6110:	9f 4f       	sbci	r25, 0xFF	; 255
    6112:	af 4f       	sbci	r26, 0xFF	; 255
    6114:	b1 e0       	ldi	r27, 0x01	; 1
    6116:	3e d0       	rcall	.+124    	; 0x6194 <__ultoa_invert+0x9c>
    6118:	b4 e0       	ldi	r27, 0x04	; 4
    611a:	3c d0       	rcall	.+120    	; 0x6194 <__ultoa_invert+0x9c>
    611c:	67 0f       	add	r22, r23
    611e:	78 1f       	adc	r23, r24
    6120:	89 1f       	adc	r24, r25
    6122:	9a 1f       	adc	r25, r26
    6124:	a1 1d       	adc	r26, r1
    6126:	68 0f       	add	r22, r24
    6128:	79 1f       	adc	r23, r25
    612a:	8a 1f       	adc	r24, r26
    612c:	91 1d       	adc	r25, r1
    612e:	a1 1d       	adc	r26, r1
    6130:	6a 0f       	add	r22, r26
    6132:	71 1d       	adc	r23, r1
    6134:	81 1d       	adc	r24, r1
    6136:	91 1d       	adc	r25, r1
    6138:	a1 1d       	adc	r26, r1
    613a:	20 d0       	rcall	.+64     	; 0x617c <__ultoa_invert+0x84>
    613c:	09 f4       	brne	.+2      	; 0x6140 <__ultoa_invert+0x48>
    613e:	68 94       	set
    6140:	3f 91       	pop	r19
    6142:	2a e0       	ldi	r18, 0x0A	; 10
    6144:	26 9f       	mul	r18, r22
    6146:	11 24       	eor	r1, r1
    6148:	30 19       	sub	r19, r0
    614a:	30 5d       	subi	r19, 0xD0	; 208
    614c:	31 93       	st	Z+, r19
    614e:	de f6       	brtc	.-74     	; 0x6106 <__ultoa_invert+0xe>
    6150:	cf 01       	movw	r24, r30
    6152:	08 95       	ret
    6154:	46 2f       	mov	r20, r22
    6156:	47 70       	andi	r20, 0x07	; 7
    6158:	40 5d       	subi	r20, 0xD0	; 208
    615a:	41 93       	st	Z+, r20
    615c:	b3 e0       	ldi	r27, 0x03	; 3
    615e:	0f d0       	rcall	.+30     	; 0x617e <__ultoa_invert+0x86>
    6160:	c9 f7       	brne	.-14     	; 0x6154 <__ultoa_invert+0x5c>
    6162:	f6 cf       	rjmp	.-20     	; 0x6150 <__ultoa_invert+0x58>
    6164:	46 2f       	mov	r20, r22
    6166:	4f 70       	andi	r20, 0x0F	; 15
    6168:	40 5d       	subi	r20, 0xD0	; 208
    616a:	4a 33       	cpi	r20, 0x3A	; 58
    616c:	18 f0       	brcs	.+6      	; 0x6174 <__ultoa_invert+0x7c>
    616e:	49 5d       	subi	r20, 0xD9	; 217
    6170:	31 fd       	sbrc	r19, 1
    6172:	40 52       	subi	r20, 0x20	; 32
    6174:	41 93       	st	Z+, r20
    6176:	02 d0       	rcall	.+4      	; 0x617c <__ultoa_invert+0x84>
    6178:	a9 f7       	brne	.-22     	; 0x6164 <__ultoa_invert+0x6c>
    617a:	ea cf       	rjmp	.-44     	; 0x6150 <__ultoa_invert+0x58>
    617c:	b4 e0       	ldi	r27, 0x04	; 4
    617e:	a6 95       	lsr	r26
    6180:	97 95       	ror	r25
    6182:	87 95       	ror	r24
    6184:	77 95       	ror	r23
    6186:	67 95       	ror	r22
    6188:	ba 95       	dec	r27
    618a:	c9 f7       	brne	.-14     	; 0x617e <__ultoa_invert+0x86>
    618c:	00 97       	sbiw	r24, 0x00	; 0
    618e:	61 05       	cpc	r22, r1
    6190:	71 05       	cpc	r23, r1
    6192:	08 95       	ret
    6194:	9b 01       	movw	r18, r22
    6196:	ac 01       	movw	r20, r24
    6198:	0a 2e       	mov	r0, r26
    619a:	06 94       	lsr	r0
    619c:	57 95       	ror	r21
    619e:	47 95       	ror	r20
    61a0:	37 95       	ror	r19
    61a2:	27 95       	ror	r18
    61a4:	ba 95       	dec	r27
    61a6:	c9 f7       	brne	.-14     	; 0x619a <__ultoa_invert+0xa2>
    61a8:	62 0f       	add	r22, r18
    61aa:	73 1f       	adc	r23, r19
    61ac:	84 1f       	adc	r24, r20
    61ae:	95 1f       	adc	r25, r21
    61b0:	a0 1d       	adc	r26, r0
    61b2:	08 95       	ret

000061b4 <__do_global_dtors>:
    61b4:	17 e0       	ldi	r17, 0x07	; 7
    61b6:	cc e7       	ldi	r28, 0x7C	; 124
    61b8:	d7 e0       	ldi	r29, 0x07	; 7
    61ba:	04 c0       	rjmp	.+8      	; 0x61c4 <__do_global_dtors+0x10>
    61bc:	fe 01       	movw	r30, r28
    61be:	0e 94 ff 2e 	call	0x5dfe	; 0x5dfe <__tablejump__>
    61c2:	22 96       	adiw	r28, 0x02	; 2
    61c4:	ce 37       	cpi	r28, 0x7E	; 126
    61c6:	d1 07       	cpc	r29, r17
    61c8:	c9 f7       	brne	.-14     	; 0x61bc <__do_global_dtors+0x8>
    61ca:	f8 94       	cli

000061cc <__stop_program>:
    61cc:	ff cf       	rjmp	.-2      	; 0x61cc <__stop_program>
