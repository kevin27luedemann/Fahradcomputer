
Fahradcomputer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001fc  00800100  00005af2  00005b86  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005af2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000048c  008002fc  008002fc  00005d82  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00005d82  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000003a8  00000000  00000000  00005dde  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000801d  00000000  00000000  00006186  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000015e1  00000000  00000000  0000e1a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001651  00000000  00000000  0000f784  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000e28  00000000  00000000  00010dd8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00001123  00000000  00000000  00011c00  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00005fbe  00000000  00000000  00012d23  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000390  00000000  00000000  00018ce1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 bf 02 	jmp	0x57e	; 0x57e <__dtors_end>
       4:	0c 94 e7 02 	jmp	0x5ce	; 0x5ce <__bad_interrupt>
       8:	0c 94 e7 02 	jmp	0x5ce	; 0x5ce <__bad_interrupt>
       c:	0c 94 e7 02 	jmp	0x5ce	; 0x5ce <__bad_interrupt>
      10:	0c 94 e7 02 	jmp	0x5ce	; 0x5ce <__bad_interrupt>
      14:	0c 94 e7 02 	jmp	0x5ce	; 0x5ce <__bad_interrupt>
      18:	0c 94 e7 02 	jmp	0x5ce	; 0x5ce <__bad_interrupt>
      1c:	0c 94 e7 02 	jmp	0x5ce	; 0x5ce <__bad_interrupt>
      20:	0c 94 e7 02 	jmp	0x5ce	; 0x5ce <__bad_interrupt>
      24:	0c 94 d8 17 	jmp	0x2fb0	; 0x2fb0 <__vector_9>
      28:	0c 94 e7 02 	jmp	0x5ce	; 0x5ce <__bad_interrupt>
      2c:	0c 94 e7 02 	jmp	0x5ce	; 0x5ce <__bad_interrupt>
      30:	0c 94 e7 02 	jmp	0x5ce	; 0x5ce <__bad_interrupt>
      34:	0c 94 e7 02 	jmp	0x5ce	; 0x5ce <__bad_interrupt>
      38:	0c 94 e7 02 	jmp	0x5ce	; 0x5ce <__bad_interrupt>
      3c:	0c 94 e7 02 	jmp	0x5ce	; 0x5ce <__bad_interrupt>
      40:	0c 94 e7 02 	jmp	0x5ce	; 0x5ce <__bad_interrupt>
      44:	0c 94 e7 02 	jmp	0x5ce	; 0x5ce <__bad_interrupt>
      48:	0c 94 e7 02 	jmp	0x5ce	; 0x5ce <__bad_interrupt>
      4c:	0c 94 e7 02 	jmp	0x5ce	; 0x5ce <__bad_interrupt>
      50:	0c 94 e7 02 	jmp	0x5ce	; 0x5ce <__bad_interrupt>
      54:	0c 94 e7 02 	jmp	0x5ce	; 0x5ce <__bad_interrupt>
      58:	0c 94 e7 02 	jmp	0x5ce	; 0x5ce <__bad_interrupt>
      5c:	0c 94 e7 02 	jmp	0x5ce	; 0x5ce <__bad_interrupt>
      60:	0c 94 e7 02 	jmp	0x5ce	; 0x5ce <__bad_interrupt>
      64:	0c 94 e7 02 	jmp	0x5ce	; 0x5ce <__bad_interrupt>
      68:	29 15       	cp	r18, r9
      6a:	51 15       	cp	r21, r1
      6c:	7b 15       	cp	r23, r11
      6e:	a6 15       	cp	r26, r6
      70:	d0 15       	cp	r29, r0
      72:	f9 15       	cp	r31, r9
      74:	21 16       	cp	r2, r17
      76:	4a 16       	cp	r4, r26
      78:	c2 16       	cp	r12, r18
      7a:	ed 16       	cp	r14, r29
      7c:	6c 1b       	sub	r22, r28
      7e:	77 1b       	sub	r23, r23
      80:	85 1b       	sub	r24, r21
      82:	8b 1b       	sub	r24, r27
      84:	92 1b       	sub	r25, r18
      86:	99 1b       	sub	r25, r25
      88:	a7 1b       	sub	r26, r23
      8a:	c7 1b       	sub	r28, r23
      8c:	ce 1b       	sub	r28, r30
      8e:	d5 1b       	sub	r29, r21
      90:	dc 1b       	sub	r29, r28
      92:	e3 1b       	sub	r30, r19
      94:	ea 1b       	sub	r30, r26
      96:	f1 1b       	sub	r31, r17
      98:	f8 1b       	sub	r31, r24
      9a:	08 4a       	sbci	r16, 0xA8	; 168
      9c:	d7 3b       	cpi	r29, 0xB7	; 183
      9e:	3b ce       	rjmp	.-906    	; 0xfffffd16 <__eeprom_end+0xff7efd16>
      a0:	01 6e       	ori	r16, 0xE1	; 225
      a2:	84 bc       	out	0x24, r8	; 36
      a4:	bf fd       	.word	0xfdbf	; ????
      a6:	c1 2f       	mov	r28, r17
      a8:	3d 6c       	ori	r19, 0xCD	; 205
      aa:	74 31       	cpi	r23, 0x14	; 20
      ac:	9a bd       	out	0x2a, r25	; 42
      ae:	56 83       	std	Z+6, r21	; 0x06
      b0:	3d da       	rcall	.-2950   	; 0xfffff52c <__eeprom_end+0xff7ef52c>
      b2:	3d 00       	.word	0x003d	; ????
      b4:	c7 7f       	andi	r28, 0xF7	; 247
      b6:	11 be       	out	0x31, r1	; 49
      b8:	d9 e4       	ldi	r29, 0x49	; 73
      ba:	bb 4c       	sbci	r27, 0xCB	; 203
      bc:	3e 91       	ld	r19, -X
      be:	6b aa       	std	Y+51, r6	; 0x33
      c0:	aa be       	out	0x3a, r10	; 58
      c2:	00 00       	nop
      c4:	00 80       	ld	r0, Z
      c6:	3f 05       	cpc	r19, r15
      c8:	a8 4c       	sbci	r26, 0xC8	; 200
      ca:	cd b2       	in	r12, 0x1d	; 29
      cc:	d4 4e       	sbci	r29, 0xE4	; 228
      ce:	b9 38       	cpi	r27, 0x89	; 137
      d0:	36 a9       	ldd	r19, Z+54	; 0x36
      d2:	02 0c       	add	r0, r2
      d4:	50 b9       	out	0x00, r21	; 0
      d6:	91 86       	std	Z+9, r9	; 0x09
      d8:	88 08       	sbc	r8, r8
      da:	3c a6       	std	Y+44, r3	; 0x2c
      dc:	aa aa       	std	Y+50, r10	; 0x32
      de:	2a be       	out	0x3a, r2	; 58
      e0:	00 00       	nop
      e2:	00 80       	ld	r0, Z
      e4:	3f 08       	sbc	r3, r15
      e6:	00 00       	nop
      e8:	00 be       	out	0x30, r0	; 48
      ea:	92 24       	eor	r9, r2
      ec:	49 12       	cpse	r4, r25
      ee:	3e ab       	std	Y+54, r19	; 0x36
      f0:	aa aa       	std	Y+50, r10	; 0x32
      f2:	2a be       	out	0x3a, r2	; 58
      f4:	cd cc       	rjmp	.-1638   	; 0xfffffa90 <__eeprom_end+0xff7efa90>
      f6:	cc 4c       	sbci	r28, 0xCC	; 204
      f8:	3e 00       	.word	0x003e	; ????
      fa:	00 00       	nop
      fc:	80 be       	out	0x30, r8	; 48
      fe:	ab aa       	std	Y+51, r10	; 0x33
     100:	aa aa       	std	Y+50, r10	; 0x32
     102:	3e 00       	.word	0x003e	; ????
     104:	00 00       	nop
     106:	00 bf       	out	0x30, r16	; 48
     108:	00 00       	nop
     10a:	00 80       	ld	r0, Z
     10c:	3f 00       	.word	0x003f	; ????
     10e:	00 00       	nop
     110:	00 00       	nop
     112:	08 41       	sbci	r16, 0x18	; 24
     114:	78 d3       	rcall	.+1776   	; 0x806 <_ZN7Display9drawPixelEhhh+0x5a>
     116:	bb 43       	sbci	r27, 0x3B	; 59
     118:	87 d1       	rcall	.+782    	; 0x428 <_ZL7font5x8+0x186>
     11a:	13 3d       	cpi	r17, 0xD3	; 211
     11c:	19 0e       	add	r1, r25
     11e:	3c c3       	rjmp	.+1656   	; 0x798 <_ZN7Display9sendFrameEv+0x72>
     120:	bd 42       	sbci	r27, 0x2D	; 45
     122:	82 ad       	ldd	r24, Z+58	; 0x3a
     124:	2b 3e       	cpi	r18, 0xEB	; 235
     126:	68 ec       	ldi	r22, 0xC8	; 200
     128:	82 76       	andi	r24, 0x62	; 98
     12a:	be d9       	rcall	.-3204   	; 0xfffff4a8 <__eeprom_end+0xff7ef4a8>
     12c:	8f e1       	ldi	r24, 0x1F	; 31
     12e:	a9 3e       	cpi	r26, 0xE9	; 233
     130:	4c 80       	ldd	r4, Y+4	; 0x04
     132:	ef ff       	.word	0xffef	; ????
     134:	be 01       	movw	r22, r28
     136:	c4 ff       	sbrs	r28, 4
     138:	7f 3f       	cpi	r23, 0xFF	; 255
     13a:	00 00       	nop
     13c:	00 00       	nop
     13e:	00 06       	cpc	r0, r16
     140:	64 ec       	ldi	r22, 0xC4	; 196
     142:	1b 3c       	cpi	r17, 0xCB	; 203
     144:	04 bc       	out	0x24, r0	; 36
     146:	16 3e       	cpi	r17, 0xE6	; 230
     148:	3b e5       	ldi	r19, 0x5B	; 91
     14a:	b9 3c       	cpi	r27, 0xC9	; 201
     14c:	c9 3c       	cpi	r28, 0xC9	; 201
     14e:	37 c2       	rjmp	.+1134   	; 0x5be <__do_global_ctors+0xe>
     150:	9e 5a       	subi	r25, 0xAE	; 174
     152:	3d 66       	ori	r19, 0x6D	; 109
     154:	04 98       	cbi	0x00, 4	; 0
     156:	08 3e       	cpi	r16, 0xE8	; 232
     158:	ea 69       	ori	r30, 0x9A	; 154
     15a:	aa aa       	std	Y+50, r10	; 0x32
     15c:	3e 00       	.word	0x003e	; ????
     15e:	00 00       	nop
     160:	80 3f       	cpi	r24, 0xF0	; 240

00000162 <__trampolines_end>:
     162:	00 e0       	ldi	r16, 0x00	; 0
     164:	f8 fc       	.word	0xfcf8	; ????
     166:	fe 1e       	adc	r15, r30
     168:	07 07       	cpc	r16, r23
     16a:	07 07       	cpc	r16, r23
     16c:	1e fe       	.word	0xfe1e	; ????
     16e:	fc f8       	.word	0xf8fc	; ????
     170:	f0 00       	.word	0x00f0	; ????
     172:	00 07       	cpc	r16, r16
     174:	0f 3f       	cpi	r16, 0xFF	; 255
     176:	3f 7c       	andi	r19, 0xCF	; 207
     178:	70 70       	andi	r23, 0x00	; 0
     17a:	70 70       	andi	r23, 0x00	; 0
     17c:	7c 3f       	cpi	r23, 0xFC	; 252
     17e:	1f 1f       	adc	r17, r31
     180:	07 00       	.word	0x0007	; ????
     182:	00 00       	nop
     184:	00 06       	cpc	r0, r16
     186:	07 07       	cpc	r16, r23
     188:	ff ff       	.word	0xffff	; ????
     18a:	ff ff       	.word	0xffff	; ????
	...
     198:	7f 7f       	andi	r23, 0xFF	; 255
     19a:	7f 7f       	andi	r23, 0xFF	; 255
     19c:	00 00       	nop
     19e:	00 00       	nop
     1a0:	00 00       	nop
     1a2:	00 38       	cpi	r16, 0x80	; 128
     1a4:	3c 3e       	cpi	r19, 0xEC	; 236
     1a6:	3e 0f       	add	r19, r30
     1a8:	07 07       	cpc	r16, r23
     1aa:	07 cf       	rjmp	.-498    	; 0xffffffba <__eeprom_end+0xff7effba>
     1ac:	ff fe       	.word	0xfeff	; ????
     1ae:	fe 38       	cpi	r31, 0x8E	; 142
     1b0:	00 00       	nop
     1b2:	00 40       	sbci	r16, 0x00	; 0
     1b4:	40 60       	ori	r20, 0x00	; 0
     1b6:	70 78       	andi	r23, 0x80	; 128
     1b8:	7c 7e       	andi	r23, 0xEC	; 236
     1ba:	7f 77       	andi	r23, 0x7F	; 127
     1bc:	73 71       	andi	r23, 0x13	; 19
     1be:	70 70       	andi	r23, 0x00	; 0
     1c0:	00 00       	nop
     1c2:	00 18       	sub	r0, r0
     1c4:	1c 1e       	adc	r1, r28
     1c6:	1e 0f       	add	r17, r30
     1c8:	c7 c7       	rjmp	.+3982   	; 0x1158 <_ZN7Display6analogEhhhh+0x420>
     1ca:	e7 ff       	sbrs	r30, 7
     1cc:	fe be       	out	0x3e, r15	; 62
     1ce:	9c 00       	.word	0x009c	; ????
     1d0:	00 00       	nop
     1d2:	00 0c       	add	r0, r0
     1d4:	1c 3c       	cpi	r17, 0xCC	; 204
     1d6:	3c 78       	andi	r19, 0x8C	; 140
     1d8:	70 70       	andi	r23, 0x00	; 0
     1da:	70 79       	andi	r23, 0x90	; 144
     1dc:	7f 3f       	cpi	r23, 0xFF	; 255
     1de:	1f 0f       	add	r17, r31
     1e0:	00 00       	nop
     1e2:	00 00       	nop
     1e4:	80 c0       	rjmp	.+256    	; 0x2e6 <_ZL7font5x8+0x44>
     1e6:	e0 70       	andi	r30, 0x00	; 0
     1e8:	38 1c       	adc	r3, r8
     1ea:	1e ff       	.word	0xff1e	; ????
     1ec:	ff ff       	.word	0xffff	; ????
     1ee:	ff 00       	.word	0x00ff	; ????
     1f0:	00 00       	nop
     1f2:	06 07       	cpc	r16, r22
     1f4:	07 07       	cpc	r16, r23
     1f6:	06 06       	cpc	r0, r22
     1f8:	06 06       	cpc	r0, r22
     1fa:	06 7f       	andi	r16, 0xF6	; 246
     1fc:	7f 7f       	andi	r23, 0xFF	; 255
     1fe:	7f 06       	cpc	r7, r31
     200:	06 00       	.word	0x0006	; ????
     202:	00 00       	nop
     204:	00 00       	nop
     206:	f0 ff       	sbrs	r31, 0
     208:	ff ff       	.word	0xffff	; ????
     20a:	e7 e7       	ldi	r30, 0x77	; 119
     20c:	e7 e7       	ldi	r30, 0x77	; 119
     20e:	c7 87       	std	Z+15, r28	; 0x0f
     210:	00 00       	nop
     212:	00 00       	nop
     214:	38 78       	andi	r19, 0x88	; 136
     216:	71 70       	andi	r23, 0x01	; 1
     218:	70 70       	andi	r23, 0x00	; 0
     21a:	70 70       	andi	r23, 0x00	; 0
     21c:	39 3f       	cpi	r19, 0xF9	; 249
     21e:	3f 1f       	adc	r19, r31
     220:	0f 00       	.word	0x000f	; ????
     222:	00 80       	ld	r0, Z
     224:	e0 f0       	brcs	.+56     	; 0x25e <__trampolines_end+0xfc>
     226:	f8 fc       	.word	0xfcf8	; ????
     228:	7f 7f       	andi	r23, 0xFF	; 255
     22a:	6f 67       	ori	r22, 0x7F	; 127
     22c:	e1 e1       	ldi	r30, 0x11	; 17
     22e:	c0 80       	ld	r12, Z
     230:	00 00       	nop
     232:	00 0f       	add	r16, r16
     234:	1f 3f       	cpi	r17, 0xFF	; 255
     236:	3f 78       	andi	r19, 0x8F	; 143
     238:	70 70       	andi	r23, 0x00	; 0
     23a:	70 70       	andi	r23, 0x00	; 0
     23c:	78 3f       	cpi	r23, 0xF8	; 248
     23e:	3f 1f       	adc	r19, r31
     240:	0f 00       	.word	0x000f	; ????
     242:	00 07       	cpc	r16, r16
     244:	07 07       	cpc	r16, r23
     246:	07 07       	cpc	r16, r23
     248:	c7 e7       	ldi	r28, 0x77	; 119
     24a:	f7 ff       	sbrs	r31, 7
     24c:	7f 3f       	cpi	r23, 0xFF	; 255
     24e:	1f 07       	cpc	r17, r31
     250:	03 01       	movw	r0, r6
     252:	00 20       	and	r0, r0
     254:	38 7c       	andi	r19, 0xC8	; 200
     256:	7e 3f       	cpi	r23, 0xFE	; 254
     258:	0f 07       	cpc	r16, r31
     25a:	03 00       	.word	0x0003	; ????
	...
     264:	00 1c       	adc	r0, r0
     266:	be fe       	.word	0xfebe	; ????
     268:	ff e7       	ldi	r31, 0x7F	; 127
     26a:	c3 c3       	rjmp	.+1926   	; 0x9f2 <_ZN7Display13draw_triangleEhhhff+0x8c>
     26c:	e7 ff       	sbrs	r30, 7
     26e:	fe be       	out	0x3e, r15	; 62
     270:	1c 00       	.word	0x001c	; ????
     272:	00 00       	nop
     274:	0e 3f       	cpi	r16, 0xFE	; 254
     276:	3f 7f       	andi	r19, 0xFF	; 255
     278:	71 60       	ori	r23, 0x01	; 1
     27a:	60 60       	ori	r22, 0x00	; 0
     27c:	71 7f       	andi	r23, 0xF1	; 241
     27e:	3f 3f       	cpi	r19, 0xFF	; 255
     280:	0f 00       	.word	0x000f	; ????
     282:	00 78       	andi	r16, 0x80	; 128
     284:	fc fe       	.word	0xfefc	; ????
     286:	fe 8f       	std	Y+30, r31	; 0x1e
     288:	07 07       	cpc	r16, r23
     28a:	07 07       	cpc	r16, r23
     28c:	8f fe       	.word	0xfe8f	; ????
     28e:	fe fc       	.word	0xfcfe	; ????
     290:	f8 00       	.word	0x00f8	; ????
     292:	00 00       	nop
     294:	00 01       	movw	r0, r0
     296:	43 43       	sbci	r20, 0x33	; 51
     298:	73 7b       	andi	r23, 0xB3	; 179
     29a:	7f 7f       	andi	r23, 0xFF	; 255
     29c:	1f 0f       	add	r17, r31
     29e:	07 03       	mulsu	r16, r23
	...

000002a2 <_ZL7font5x8>:
     2a2:	00 00 5f 00 00 00 07 00 07 00 14 7f 14 7f 14 24     .._............$
     2b2:	2a 7f 2a 12 23 13 08 64 62 36 49 55 22 50 00 05     *.*.#..db6IU"P..
     2c2:	03 00 00 00 1c 22 41 00 00 41 22 1c 00 14 08 3e     ....."A..A"....>
     2d2:	08 14 08 08 3e 08 08 00 50 30 00 00 08 08 08 08     ....>...P0......
     2e2:	08 00 60 60 00 00 20 10 08 04 02 3e 51 49 45 3e     ..``.. ....>QIE>
     2f2:	00 42 7f 40 00 42 61 51 49 46 21 41 45 4b 31 18     .B.@.BaQIF!AEK1.
     302:	14 12 7f 10 27 45 45 45 39 3c 4a 49 49 30 01 71     ....'EEE9<JII0.q
     312:	09 05 03 36 49 49 49 36 06 49 49 29 1e 00 36 36     ...6III6.II)..66
     322:	00 00 00 56 36 00 00 08 14 22 41 00 14 14 14 14     ...V6...."A.....
     332:	14 00 41 22 14 08 02 01 51 09 06 32 49 79 41 3e     ..A"....Q..2IyA>
     342:	7e 11 11 11 7e 7f 49 49 49 36 3e 41 41 41 22 7f     ~...~.III6>AAA".
     352:	41 41 22 1c 7f 49 49 49 41 7f 09 09 09 01 3e 41     AA"..IIIA.....>A
     362:	49 49 7a 7f 08 08 08 7f 00 41 7f 41 00 20 40 41     IIz......A.A. @A
     372:	3f 01 7f 08 14 22 41 7f 40 40 40 40 7f 02 0c 02     ?...."A.@@@@....
     382:	7f 7f 04 08 10 7f 3e 41 41 41 3e 7f 09 09 09 06     ......>AAA>.....
     392:	3e 41 51 21 5e 7f 09 19 29 46 46 49 49 49 31 01     >AQ!^...)FFIII1.
     3a2:	01 7f 01 01 3f 40 40 40 3f 1f 20 40 20 1f 3f 40     ....?@@@?. @ .?@
     3b2:	38 40 3f 63 14 08 14 63 07 08 70 08 07 61 51 49     8@?c...c..p..aQI
     3c2:	45 43 00 7f 41 41 00 02 04 08 10 20 00 41 41 7f     EC..AA..... .AA.
     3d2:	00 04 02 01 02 04 40 40 40 40 40 00 01 02 04 00     ......@@@@@.....
     3e2:	20 54 54 54 78 7f 48 44 44 38 38 44 44 44 20 38      TTTx.HDD88DDD 8
     3f2:	44 44 48 7f 38 54 54 54 18 08 7e 09 01 02 0c 52     DDH.8TTT..~....R
     402:	52 52 3e 7f 08 04 04 78 00 44 7d 40 00 20 40 44     RR>....x.D}@. @D
     412:	3d 00 7f 10 28 44 00 00 41 7f 40 00 7c 04 18 04     =...(D..A.@.|...
     422:	78 7c 08 04 04 78 38 44 44 44 38 7c 14 14 14 08     x|...x8DDD8|....
     432:	08 14 14 18 7c 7c 08 04 04 08 48 54 54 54 20 04     ....||....HTTT .
     442:	3f 44 40 20 3c 40 40 20 7c 1c 20 40 20 1c 3c 40     ?D@ <@@ |. @ .<@
     452:	30 40 3c 44 28 10 28 44 0c 50 50 50 3c 44 64 54     0@<D(.(D.PPP<DdT
     462:	4c 44 00 08 36 41 00 00 00 7f 00 00 00 41 36 08     LD..6A.......A6.
     472:	00 10 08 08 10 08                                   ......

00000478 <__c.2161>:
     478:	6e 61 6e 00                                         nan.

0000047c <__c.2159>:
     47c:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     48c:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     49c:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     4ac:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     4bc:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     4cc:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     4dc:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     4ec:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     4fc:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     50c:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     51c:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     52c:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     53c:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     54c:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     55c:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     56c:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

0000057a <__ctors_start>:
     57a:	da 1d       	adc	r29, r10

0000057c <__ctors_end>:
     57c:	03 1e       	adc	r0, r19

0000057e <__dtors_end>:
     57e:	11 24       	eor	r1, r1
     580:	1f be       	out	0x3f, r1	; 63
     582:	cf ef       	ldi	r28, 0xFF	; 255
     584:	d8 e0       	ldi	r29, 0x08	; 8
     586:	de bf       	out	0x3e, r29	; 62
     588:	cd bf       	out	0x3d, r28	; 61

0000058a <__do_copy_data>:
     58a:	12 e0       	ldi	r17, 0x02	; 2
     58c:	a0 e0       	ldi	r26, 0x00	; 0
     58e:	b1 e0       	ldi	r27, 0x01	; 1
     590:	e2 ef       	ldi	r30, 0xF2	; 242
     592:	fa e5       	ldi	r31, 0x5A	; 90
     594:	02 c0       	rjmp	.+4      	; 0x59a <__do_copy_data+0x10>
     596:	05 90       	lpm	r0, Z+
     598:	0d 92       	st	X+, r0
     59a:	ac 3f       	cpi	r26, 0xFC	; 252
     59c:	b1 07       	cpc	r27, r17
     59e:	d9 f7       	brne	.-10     	; 0x596 <__do_copy_data+0xc>

000005a0 <__do_clear_bss>:
     5a0:	27 e0       	ldi	r18, 0x07	; 7
     5a2:	ac ef       	ldi	r26, 0xFC	; 252
     5a4:	b2 e0       	ldi	r27, 0x02	; 2
     5a6:	01 c0       	rjmp	.+2      	; 0x5aa <.do_clear_bss_start>

000005a8 <.do_clear_bss_loop>:
     5a8:	1d 92       	st	X+, r1

000005aa <.do_clear_bss_start>:
     5aa:	a8 38       	cpi	r26, 0x88	; 136
     5ac:	b2 07       	cpc	r27, r18
     5ae:	e1 f7       	brne	.-8      	; 0x5a8 <.do_clear_bss_loop>

000005b0 <__do_global_ctors>:
     5b0:	15 e0       	ldi	r17, 0x05	; 5
     5b2:	cc e7       	ldi	r28, 0x7C	; 124
     5b4:	d5 e0       	ldi	r29, 0x05	; 5
     5b6:	04 c0       	rjmp	.+8      	; 0x5c0 <__do_global_ctors+0x10>
     5b8:	22 97       	sbiw	r28, 0x02	; 2
     5ba:	fe 01       	movw	r30, r28
     5bc:	0e 94 91 2b 	call	0x5722	; 0x5722 <__tablejump__>
     5c0:	ca 37       	cpi	r28, 0x7A	; 122
     5c2:	d1 07       	cpc	r29, r17
     5c4:	c9 f7       	brne	.-14     	; 0x5b8 <__do_global_ctors+0x8>
     5c6:	0e 94 cd 1d 	call	0x3b9a	; 0x3b9a <main>
     5ca:	0c 94 6c 2d 	jmp	0x5ad8	; 0x5ad8 <__do_global_dtors>

000005ce <__bad_interrupt>:
     5ce:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000005d2 <_ZN7DisplayD1Ev>:
	//}
	InitializeDisplay();
} //Display

// default destructor
Display::~Display()
     5d2:	9c 5f       	subi	r25, 0xFC	; 252
     5d4:	0e 94 2c 1e 	call	0x3c58	; 0x3c58 <_ZN3I2CD1Ev>
     5d8:	08 95       	ret

000005da <_ZN7Display10clearFrameEv>:
{
} //~Display

void Display::clearFrame(){
     5da:	fc 01       	movw	r30, r24
	for(uint16_t i=0;i<1024;i++){
     5dc:	20 e0       	ldi	r18, 0x00	; 0
     5de:	30 e0       	ldi	r19, 0x00	; 0
		Displayframe[i]=0;
     5e0:	11 92       	st	Z+, r1
Display::~Display()
{
} //~Display

void Display::clearFrame(){
	for(uint16_t i=0;i<1024;i++){
     5e2:	2f 5f       	subi	r18, 0xFF	; 255
     5e4:	3f 4f       	sbci	r19, 0xFF	; 255
     5e6:	21 15       	cp	r18, r1
     5e8:	84 e0       	ldi	r24, 0x04	; 4
     5ea:	38 07       	cpc	r19, r24
     5ec:	c9 f7       	brne	.-14     	; 0x5e0 <_ZN7Display10clearFrameEv+0x6>
		Displayframe[i]=0;
	}
}
     5ee:	08 95       	ret

000005f0 <_ZN7Display15ssd1306_commandEh>:

void Display::ssd1306_command(uint8_t c){
     5f0:	1f 93       	push	r17
     5f2:	cf 93       	push	r28
     5f4:	df 93       	push	r29
     5f6:	16 2f       	mov	r17, r22
	i2c.twi_start();
     5f8:	ec 01       	movw	r28, r24
     5fa:	dc 5f       	subi	r29, 0xFC	; 252
     5fc:	ce 01       	movw	r24, r28
     5fe:	0e 94 2d 1e 	call	0x3c5a	; 0x3c5a <_ZN3I2C9twi_startEv>
	i2c.twi_write(OLEDADRESSE);
     602:	68 e7       	ldi	r22, 0x78	; 120
     604:	ce 01       	movw	r24, r28
     606:	0e 94 35 1e 	call	0x3c6a	; 0x3c6a <_ZN3I2C9twi_writeEh>
	i2c.twi_write(OLEDBEFEHL);
     60a:	60 e0       	ldi	r22, 0x00	; 0
     60c:	ce 01       	movw	r24, r28
     60e:	0e 94 35 1e 	call	0x3c6a	; 0x3c6a <_ZN3I2C9twi_writeEh>
	i2c.twi_write(c);
     612:	61 2f       	mov	r22, r17
     614:	ce 01       	movw	r24, r28
     616:	0e 94 35 1e 	call	0x3c6a	; 0x3c6a <_ZN3I2C9twi_writeEh>
	i2c.twi_stop();
     61a:	ce 01       	movw	r24, r28
     61c:	0e 94 31 1e 	call	0x3c62	; 0x3c62 <_ZN3I2C8twi_stopEv>
}
     620:	df 91       	pop	r29
     622:	cf 91       	pop	r28
     624:	1f 91       	pop	r17
     626:	08 95       	ret

00000628 <_ZN7Display17InitializeDisplayEv>:

void Display::InitializeDisplay()
{
     628:	cf 93       	push	r28
     62a:	df 93       	push	r29
     62c:	ec 01       	movw	r28, r24
	// Init sequence for 128x64 OLED module
	ssd1306_command(SSD1306_DISPLAYOFF);                    // 0xAE
     62e:	6e ea       	ldi	r22, 0xAE	; 174
     630:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <_ZN7Display15ssd1306_commandEh>

	ssd1306_command(SSD1306_SETDISPLAYCLOCKDIV);            // 0xD5
     634:	65 ed       	ldi	r22, 0xD5	; 213
     636:	ce 01       	movw	r24, r28
     638:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <_ZN7Display15ssd1306_commandEh>
	ssd1306_command(0x80);                 // the suggested ratio 0x80
     63c:	60 e8       	ldi	r22, 0x80	; 128
     63e:	ce 01       	movw	r24, r28
     640:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <_ZN7Display15ssd1306_commandEh>

	ssd1306_command(SSD1306_SETMULTIPLEX);                  // 0xA8
     644:	68 ea       	ldi	r22, 0xA8	; 168
     646:	ce 01       	movw	r24, r28
     648:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <_ZN7Display15ssd1306_commandEh>
	ssd1306_command(0x3F);
     64c:	6f e3       	ldi	r22, 0x3F	; 63
     64e:	ce 01       	movw	r24, r28
     650:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <_ZN7Display15ssd1306_commandEh>

	ssd1306_command(SSD1306_SETDISPLAYOFFSET);              // 0xD3
     654:	63 ed       	ldi	r22, 0xD3	; 211
     656:	ce 01       	movw	r24, r28
     658:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <_ZN7Display15ssd1306_commandEh>
	ssd1306_command(0x0);                                   // no offset
     65c:	60 e0       	ldi	r22, 0x00	; 0
     65e:	ce 01       	movw	r24, r28
     660:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <_ZN7Display15ssd1306_commandEh>

	ssd1306_command(SSD1306_SETSTARTLINE);// | 0x0);        // line #0
     664:	60 e4       	ldi	r22, 0x40	; 64
     666:	ce 01       	movw	r24, r28
     668:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <_ZN7Display15ssd1306_commandEh>

	ssd1306_command(SSD1306_CHARGEPUMP);                    // 0x8D
     66c:	6d e8       	ldi	r22, 0x8D	; 141
     66e:	ce 01       	movw	r24, r28
     670:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <_ZN7Display15ssd1306_commandEh>
	ssd1306_command(0x14);  // using internal VCC
     674:	64 e1       	ldi	r22, 0x14	; 20
     676:	ce 01       	movw	r24, r28
     678:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <_ZN7Display15ssd1306_commandEh>

	ssd1306_command(SSD1306_MEMORYMODE);                    // 0x20
     67c:	60 e2       	ldi	r22, 0x20	; 32
     67e:	ce 01       	movw	r24, r28
     680:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <_ZN7Display15ssd1306_commandEh>
	ssd1306_command(0x00);          // 0x00 horizontal addressing
     684:	60 e0       	ldi	r22, 0x00	; 0
     686:	ce 01       	movw	r24, r28
     688:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <_ZN7Display15ssd1306_commandEh>

	ssd1306_command(SSD1306_SEGREMAP | 0x1); // rotate screen 180
     68c:	61 ea       	ldi	r22, 0xA1	; 161
     68e:	ce 01       	movw	r24, r28
     690:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <_ZN7Display15ssd1306_commandEh>

	ssd1306_command(SSD1306_COMSCANDEC); // rotate screen 180
     694:	68 ec       	ldi	r22, 0xC8	; 200
     696:	ce 01       	movw	r24, r28
     698:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <_ZN7Display15ssd1306_commandEh>

	ssd1306_command(SSD1306_SETCOMPINS);                    // 0xDA
     69c:	6a ed       	ldi	r22, 0xDA	; 218
     69e:	ce 01       	movw	r24, r28
     6a0:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <_ZN7Display15ssd1306_commandEh>
	ssd1306_command(0x12);
     6a4:	62 e1       	ldi	r22, 0x12	; 18
     6a6:	ce 01       	movw	r24, r28
     6a8:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <_ZN7Display15ssd1306_commandEh>

	ssd1306_command(SSD1306_SETCONTRAST);                   // 0x81
     6ac:	61 e8       	ldi	r22, 0x81	; 129
     6ae:	ce 01       	movw	r24, r28
     6b0:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <_ZN7Display15ssd1306_commandEh>
	ssd1306_command(0xCF);
     6b4:	6f ec       	ldi	r22, 0xCF	; 207
     6b6:	ce 01       	movw	r24, r28
     6b8:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <_ZN7Display15ssd1306_commandEh>

	ssd1306_command(SSD1306_SETPRECHARGE);                  // 0xd9
     6bc:	69 ed       	ldi	r22, 0xD9	; 217
     6be:	ce 01       	movw	r24, r28
     6c0:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <_ZN7Display15ssd1306_commandEh>
	ssd1306_command(0xF1);
     6c4:	61 ef       	ldi	r22, 0xF1	; 241
     6c6:	ce 01       	movw	r24, r28
     6c8:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <_ZN7Display15ssd1306_commandEh>

	ssd1306_command(SSD1306_SETVCOMDETECT);                 // 0xDB
     6cc:	6b ed       	ldi	r22, 0xDB	; 219
     6ce:	ce 01       	movw	r24, r28
     6d0:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <_ZN7Display15ssd1306_commandEh>
	ssd1306_command(0x40);
     6d4:	60 e4       	ldi	r22, 0x40	; 64
     6d6:	ce 01       	movw	r24, r28
     6d8:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <_ZN7Display15ssd1306_commandEh>

	ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
     6dc:	64 ea       	ldi	r22, 0xA4	; 164
     6de:	ce 01       	movw	r24, r28
     6e0:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <_ZN7Display15ssd1306_commandEh>

	ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
     6e4:	66 ea       	ldi	r22, 0xA6	; 166
     6e6:	ce 01       	movw	r24, r28
     6e8:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <_ZN7Display15ssd1306_commandEh>

	ssd1306_command(SSD1306_DISPLAYON);                     //switch on OLED
     6ec:	6f ea       	ldi	r22, 0xAF	; 175
     6ee:	ce 01       	movw	r24, r28
     6f0:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <_ZN7Display15ssd1306_commandEh>
}
     6f4:	df 91       	pop	r29
     6f6:	cf 91       	pop	r28
     6f8:	08 95       	ret

000006fa <_ZN7DisplayC1Ev>:


#include "Display.h"

// default constructor
Display::Display()
     6fa:	cf 93       	push	r28
     6fc:	df 93       	push	r29
     6fe:	ec 01       	movw	r28, r24
     700:	9c 5f       	subi	r25, 0xFC	; 252
     702:	0e 94 28 1e 	call	0x3c50	; 0x3c50 <_ZN3I2CC1Ev>
{
	//for (uint8_t i=0;i<1024;i++)
	//{
		//Displayframe[i]=0;
	//}
	InitializeDisplay();
     706:	ce 01       	movw	r24, r28
     708:	0e 94 14 03 	call	0x628	; 0x628 <_ZN7Display17InitializeDisplayEv>
} //Display
     70c:	df 91       	pop	r29
     70e:	cf 91       	pop	r28
     710:	08 95       	ret

00000712 <_ZN7Display6invertEh>:

	ssd1306_command(SSD1306_DISPLAYON);                     //switch on OLED
}

void Display::invert(uint8_t inverted) {
	if (inverted) {
     712:	66 23       	and	r22, r22
     714:	21 f0       	breq	.+8      	; 0x71e <_ZN7Display6invertEh+0xc>
		ssd1306_command(SSD1306_INVERTDISPLAY);
     716:	67 ea       	ldi	r22, 0xA7	; 167
     718:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <_ZN7Display15ssd1306_commandEh>
     71c:	08 95       	ret
	}
	else {
		ssd1306_command(SSD1306_NORMALDISPLAY);
     71e:	66 ea       	ldi	r22, 0xA6	; 166
     720:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <_ZN7Display15ssd1306_commandEh>
     724:	08 95       	ret

00000726 <_ZN7Display9sendFrameEv>:
	}
}

void Display::sendFrame(){
     726:	ef 92       	push	r14
     728:	ff 92       	push	r15
     72a:	0f 93       	push	r16
     72c:	1f 93       	push	r17
     72e:	cf 93       	push	r28
     730:	df 93       	push	r29
     732:	8c 01       	movw	r16, r24
	//Cursor an den Anfang setzen
	ssd1306_command(SSD1306_COLUMNADDR);
     734:	61 e2       	ldi	r22, 0x21	; 33
     736:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <_ZN7Display15ssd1306_commandEh>
	ssd1306_command(0x00);
     73a:	60 e0       	ldi	r22, 0x00	; 0
     73c:	c8 01       	movw	r24, r16
     73e:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <_ZN7Display15ssd1306_commandEh>
	ssd1306_command(0x7F);
     742:	6f e7       	ldi	r22, 0x7F	; 127
     744:	c8 01       	movw	r24, r16
     746:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <_ZN7Display15ssd1306_commandEh>

	ssd1306_command(SSD1306_PAGEADDR);
     74a:	62 e2       	ldi	r22, 0x22	; 34
     74c:	c8 01       	movw	r24, r16
     74e:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <_ZN7Display15ssd1306_commandEh>
	ssd1306_command(0x00);
     752:	60 e0       	ldi	r22, 0x00	; 0
     754:	c8 01       	movw	r24, r16
     756:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <_ZN7Display15ssd1306_commandEh>
	ssd1306_command(0x07);
     75a:	67 e0       	ldi	r22, 0x07	; 7
     75c:	c8 01       	movw	r24, r16
     75e:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <_ZN7Display15ssd1306_commandEh>

	i2c.twi_start();
     762:	78 01       	movw	r14, r16
     764:	8c ef       	ldi	r24, 0xFC	; 252
     766:	f8 1a       	sub	r15, r24
     768:	c7 01       	movw	r24, r14
     76a:	0e 94 2d 1e 	call	0x3c5a	; 0x3c5a <_ZN3I2C9twi_startEv>
	i2c.twi_write(OLEDADRESSE);
     76e:	68 e7       	ldi	r22, 0x78	; 120
     770:	c7 01       	movw	r24, r14
     772:	0e 94 35 1e 	call	0x3c6a	; 0x3c6a <_ZN3I2C9twi_writeEh>
	i2c.twi_write(OLEDDATA);
     776:	60 e4       	ldi	r22, 0x40	; 64
     778:	c7 01       	movw	r24, r14
     77a:	0e 94 35 1e 	call	0x3c6a	; 0x3c6a <_ZN3I2C9twi_writeEh>
	
	for(uint16_t i=0; i<1024;i++){
     77e:	c0 e0       	ldi	r28, 0x00	; 0
     780:	d0 e0       	ldi	r29, 0x00	; 0
		i2c.twi_write(Displayframe[i]);
     782:	f8 01       	movw	r30, r16
     784:	61 91       	ld	r22, Z+
     786:	8f 01       	movw	r16, r30
     788:	c7 01       	movw	r24, r14
     78a:	0e 94 35 1e 	call	0x3c6a	; 0x3c6a <_ZN3I2C9twi_writeEh>

	i2c.twi_start();
	i2c.twi_write(OLEDADRESSE);
	i2c.twi_write(OLEDDATA);
	
	for(uint16_t i=0; i<1024;i++){
     78e:	21 96       	adiw	r28, 0x01	; 1
     790:	c1 15       	cp	r28, r1
     792:	f4 e0       	ldi	r31, 0x04	; 4
     794:	df 07       	cpc	r29, r31
     796:	a9 f7       	brne	.-22     	; 0x782 <_ZN7Display9sendFrameEv+0x5c>
		i2c.twi_write(Displayframe[i]);
	}
	i2c.twi_stop();
     798:	c7 01       	movw	r24, r14
     79a:	0e 94 31 1e 	call	0x3c62	; 0x3c62 <_ZN3I2C8twi_stopEv>
}
     79e:	df 91       	pop	r29
     7a0:	cf 91       	pop	r28
     7a2:	1f 91       	pop	r17
     7a4:	0f 91       	pop	r16
     7a6:	ff 90       	pop	r15
     7a8:	ef 90       	pop	r14
     7aa:	08 95       	ret

000007ac <_ZN7Display9drawPixelEhhh>:

void Display::drawPixel(uint8_t pos_x, uint8_t pos_y, uint8_t erase){
	if(!(pos_x >= SSD1306_WIDTH || pos_y >= SSD1306_HEIGHT)){
     7ac:	66 23       	and	r22, r22
     7ae:	bc f1       	brlt	.+110    	; 0x81e <_ZN7Display9drawPixelEhhh+0x72>
     7b0:	40 34       	cpi	r20, 0x40	; 64
     7b2:	a8 f5       	brcc	.+106    	; 0x81e <_ZN7Display9drawPixelEhhh+0x72>
		if(!erase){
     7b4:	21 11       	cpse	r18, r1
     7b6:	19 c0       	rjmp	.+50     	; 0x7ea <_ZN7Display9drawPixelEhhh+0x3e>
			Displayframe[pos_x+(pos_y/8)*SSD1306_WIDTH] |= (1 << (pos_y&7));
     7b8:	e4 2f       	mov	r30, r20
     7ba:	e6 95       	lsr	r30
     7bc:	e6 95       	lsr	r30
     7be:	e6 95       	lsr	r30
     7c0:	20 e8       	ldi	r18, 0x80	; 128
     7c2:	e2 9f       	mul	r30, r18
     7c4:	f0 01       	movw	r30, r0
     7c6:	11 24       	eor	r1, r1
     7c8:	e6 0f       	add	r30, r22
     7ca:	f1 1d       	adc	r31, r1
     7cc:	e8 0f       	add	r30, r24
     7ce:	f9 1f       	adc	r31, r25
     7d0:	47 70       	andi	r20, 0x07	; 7
     7d2:	21 e0       	ldi	r18, 0x01	; 1
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	c9 01       	movw	r24, r18
     7d8:	02 c0       	rjmp	.+4      	; 0x7de <_ZN7Display9drawPixelEhhh+0x32>
     7da:	88 0f       	add	r24, r24
     7dc:	99 1f       	adc	r25, r25
     7de:	4a 95       	dec	r20
     7e0:	e2 f7       	brpl	.-8      	; 0x7da <_ZN7Display9drawPixelEhhh+0x2e>
     7e2:	90 81       	ld	r25, Z
     7e4:	89 2b       	or	r24, r25
     7e6:	80 83       	st	Z, r24
     7e8:	08 95       	ret
		}
		else {
			Displayframe[pos_x+(pos_y/8)*SSD1306_WIDTH] &= ~(1 << (pos_y&7));
     7ea:	e4 2f       	mov	r30, r20
     7ec:	e6 95       	lsr	r30
     7ee:	e6 95       	lsr	r30
     7f0:	e6 95       	lsr	r30
     7f2:	30 e8       	ldi	r19, 0x80	; 128
     7f4:	e3 9f       	mul	r30, r19
     7f6:	f0 01       	movw	r30, r0
     7f8:	11 24       	eor	r1, r1
     7fa:	e6 0f       	add	r30, r22
     7fc:	f1 1d       	adc	r31, r1
     7fe:	e8 0f       	add	r30, r24
     800:	f9 1f       	adc	r31, r25
     802:	47 70       	andi	r20, 0x07	; 7
     804:	81 e0       	ldi	r24, 0x01	; 1
     806:	90 e0       	ldi	r25, 0x00	; 0
     808:	9c 01       	movw	r18, r24
     80a:	02 c0       	rjmp	.+4      	; 0x810 <_ZN7Display9drawPixelEhhh+0x64>
     80c:	22 0f       	add	r18, r18
     80e:	33 1f       	adc	r19, r19
     810:	4a 95       	dec	r20
     812:	e2 f7       	brpl	.-8      	; 0x80c <_ZN7Display9drawPixelEhhh+0x60>
     814:	a9 01       	movw	r20, r18
     816:	40 95       	com	r20
     818:	80 81       	ld	r24, Z
     81a:	48 23       	and	r20, r24
     81c:	40 83       	st	Z, r20
     81e:	08 95       	ret

00000820 <_ZN7Display9draw_lineEhhhf>:
		}
	}
}

//eigene Zeichenfunktionen
void Display::draw_line(uint8_t x, uint8_t y, uint8_t length, float phi){
     820:	2f 92       	push	r2
     822:	3f 92       	push	r3
     824:	4f 92       	push	r4
     826:	5f 92       	push	r5
     828:	6f 92       	push	r6
     82a:	7f 92       	push	r7
     82c:	8f 92       	push	r8
     82e:	9f 92       	push	r9
     830:	af 92       	push	r10
     832:	bf 92       	push	r11
     834:	cf 92       	push	r12
     836:	df 92       	push	r13
     838:	ef 92       	push	r14
     83a:	ff 92       	push	r15
     83c:	0f 93       	push	r16
     83e:	1f 93       	push	r17
     840:	cf 93       	push	r28
     842:	df 93       	push	r29
     844:	cd b7       	in	r28, 0x3d	; 61
     846:	de b7       	in	r29, 0x3e	; 62
     848:	2b 97       	sbiw	r28, 0x0b	; 11
     84a:	0f b6       	in	r0, 0x3f	; 63
     84c:	f8 94       	cli
     84e:	de bf       	out	0x3e, r29	; 62
     850:	0f be       	out	0x3f, r0	; 63
     852:	cd bf       	out	0x3d, r28	; 61
     854:	1c 01       	movw	r2, r24
     856:	d6 2e       	mov	r13, r22
     858:	c4 2e       	mov	r12, r20
     85a:	29 83       	std	Y+1, r18	; 0x01
	//phi*=M_PI/180.0;
	uint8_t pos_x=0, pos_y=0;
	for (uint8_t i=0;i<length;i++)
     85c:	22 23       	and	r18, r18
     85e:	09 f4       	brne	.+2      	; 0x862 <_ZN7Display9draw_lineEhhhf+0x42>
     860:	69 c0       	rjmp	.+210    	; 0x934 <__stack+0x35>
	{
		pos_x=(uint8_t) (-i*cos(phi)+x);
     862:	c8 01       	movw	r24, r16
     864:	b7 01       	movw	r22, r14
     866:	0e 94 6d 25 	call	0x4ada	; 0x4ada <cos>
     86a:	2b 01       	movw	r4, r22
     86c:	3c 01       	movw	r6, r24
		pos_y=(uint8_t) (i*sin(phi)+y);
     86e:	c8 01       	movw	r24, r16
     870:	b7 01       	movw	r22, r14
     872:	0e 94 cc 27 	call	0x4f98	; 0x4f98 <sin>
     876:	4b 01       	movw	r8, r22
     878:	5c 01       	movw	r10, r24
     87a:	1b 86       	std	Y+11, r1	; 0x0b
     87c:	1a 86       	std	Y+10, r1	; 0x0a
     87e:	8c 2d       	mov	r24, r12
     880:	90 e0       	ldi	r25, 0x00	; 0
     882:	a0 e0       	ldi	r26, 0x00	; 0
     884:	b0 e0       	ldi	r27, 0x00	; 0
     886:	8a 83       	std	Y+2, r24	; 0x02
     888:	9b 83       	std	Y+3, r25	; 0x03
     88a:	ac 83       	std	Y+4, r26	; 0x04
     88c:	bd 83       	std	Y+5, r27	; 0x05
void Display::draw_line(uint8_t x, uint8_t y, uint8_t length, float phi){
	//phi*=M_PI/180.0;
	uint8_t pos_x=0, pos_y=0;
	for (uint8_t i=0;i<length;i++)
	{
		pos_x=(uint8_t) (-i*cos(phi)+x);
     88e:	8d 2d       	mov	r24, r13
     890:	90 e0       	ldi	r25, 0x00	; 0
     892:	a0 e0       	ldi	r26, 0x00	; 0
     894:	b0 e0       	ldi	r27, 0x00	; 0
     896:	8e 83       	std	Y+6, r24	; 0x06
     898:	9f 83       	std	Y+7, r25	; 0x07
     89a:	a8 87       	std	Y+8, r26	; 0x08
     89c:	b9 87       	std	Y+9, r27	; 0x09
		pos_y=(uint8_t) (i*sin(phi)+y);
     89e:	aa 85       	ldd	r26, Y+10	; 0x0a
     8a0:	bb 85       	ldd	r27, Y+11	; 0x0b
     8a2:	bd 01       	movw	r22, r26
     8a4:	88 27       	eor	r24, r24
     8a6:	77 fd       	sbrc	r23, 7
     8a8:	80 95       	com	r24
     8aa:	98 2f       	mov	r25, r24
     8ac:	0e 94 0b 26 	call	0x4c16	; 0x4c16 <__floatsisf>
     8b0:	a5 01       	movw	r20, r10
     8b2:	94 01       	movw	r18, r8
     8b4:	0e 94 69 27 	call	0x4ed2	; 0x4ed2 <__mulsf3>
     8b8:	6b 01       	movw	r12, r22
     8ba:	7c 01       	movw	r14, r24
     8bc:	6a 81       	ldd	r22, Y+2	; 0x02
     8be:	7b 81       	ldd	r23, Y+3	; 0x03
     8c0:	8c 81       	ldd	r24, Y+4	; 0x04
     8c2:	9d 81       	ldd	r25, Y+5	; 0x05
     8c4:	0e 94 0b 26 	call	0x4c16	; 0x4c16 <__floatsisf>
     8c8:	9b 01       	movw	r18, r22
     8ca:	ac 01       	movw	r20, r24
     8cc:	c7 01       	movw	r24, r14
     8ce:	b6 01       	movw	r22, r12
     8d0:	0e 94 a3 24 	call	0x4946	; 0x4946 <__addsf3>
     8d4:	0e 94 dd 25 	call	0x4bba	; 0x4bba <__fixunssfsi>
     8d8:	16 2f       	mov	r17, r22
     8da:	6a 85       	ldd	r22, Y+10	; 0x0a
     8dc:	7b 85       	ldd	r23, Y+11	; 0x0b
     8de:	71 95       	neg	r23
     8e0:	61 95       	neg	r22
     8e2:	71 09       	sbc	r23, r1
void Display::draw_line(uint8_t x, uint8_t y, uint8_t length, float phi){
	//phi*=M_PI/180.0;
	uint8_t pos_x=0, pos_y=0;
	for (uint8_t i=0;i<length;i++)
	{
		pos_x=(uint8_t) (-i*cos(phi)+x);
     8e4:	88 27       	eor	r24, r24
     8e6:	77 fd       	sbrc	r23, 7
     8e8:	80 95       	com	r24
     8ea:	98 2f       	mov	r25, r24
     8ec:	0e 94 0b 26 	call	0x4c16	; 0x4c16 <__floatsisf>
     8f0:	a3 01       	movw	r20, r6
     8f2:	92 01       	movw	r18, r4
     8f4:	0e 94 69 27 	call	0x4ed2	; 0x4ed2 <__mulsf3>
     8f8:	6b 01       	movw	r12, r22
     8fa:	7c 01       	movw	r14, r24
     8fc:	6e 81       	ldd	r22, Y+6	; 0x06
     8fe:	7f 81       	ldd	r23, Y+7	; 0x07
     900:	88 85       	ldd	r24, Y+8	; 0x08
     902:	99 85       	ldd	r25, Y+9	; 0x09
     904:	0e 94 0b 26 	call	0x4c16	; 0x4c16 <__floatsisf>
     908:	9b 01       	movw	r18, r22
     90a:	ac 01       	movw	r20, r24
     90c:	c7 01       	movw	r24, r14
     90e:	b6 01       	movw	r22, r12
     910:	0e 94 a3 24 	call	0x4946	; 0x4946 <__addsf3>
     914:	0e 94 dd 25 	call	0x4bba	; 0x4bba <__fixunssfsi>
		pos_y=(uint8_t) (i*sin(phi)+y);
		drawPixel(pos_x,pos_y,0);
     918:	20 e0       	ldi	r18, 0x00	; 0
     91a:	41 2f       	mov	r20, r17
     91c:	c1 01       	movw	r24, r2
     91e:	0e 94 d6 03 	call	0x7ac	; 0x7ac <_ZN7Display9drawPixelEhhh>
     922:	ea 85       	ldd	r30, Y+10	; 0x0a
     924:	fb 85       	ldd	r31, Y+11	; 0x0b
     926:	31 96       	adiw	r30, 0x01	; 1
     928:	fb 87       	std	Y+11, r31	; 0x0b
     92a:	ea 87       	std	Y+10, r30	; 0x0a

//eigene Zeichenfunktionen
void Display::draw_line(uint8_t x, uint8_t y, uint8_t length, float phi){
	//phi*=M_PI/180.0;
	uint8_t pos_x=0, pos_y=0;
	for (uint8_t i=0;i<length;i++)
     92c:	f9 81       	ldd	r31, Y+1	; 0x01
     92e:	ef 17       	cp	r30, r31
     930:	08 f4       	brcc	.+2      	; 0x934 <__stack+0x35>
     932:	b5 cf       	rjmp	.-150    	; 0x89e <_ZN7Display9draw_lineEhhhf+0x7e>
	{
		pos_x=(uint8_t) (-i*cos(phi)+x);
		pos_y=(uint8_t) (i*sin(phi)+y);
		drawPixel(pos_x,pos_y,0);
	}
}
     934:	2b 96       	adiw	r28, 0x0b	; 11
     936:	0f b6       	in	r0, 0x3f	; 63
     938:	f8 94       	cli
     93a:	de bf       	out	0x3e, r29	; 62
     93c:	0f be       	out	0x3f, r0	; 63
     93e:	cd bf       	out	0x3d, r28	; 61
     940:	df 91       	pop	r29
     942:	cf 91       	pop	r28
     944:	1f 91       	pop	r17
     946:	0f 91       	pop	r16
     948:	ff 90       	pop	r15
     94a:	ef 90       	pop	r14
     94c:	df 90       	pop	r13
     94e:	cf 90       	pop	r12
     950:	bf 90       	pop	r11
     952:	af 90       	pop	r10
     954:	9f 90       	pop	r9
     956:	8f 90       	pop	r8
     958:	7f 90       	pop	r7
     95a:	6f 90       	pop	r6
     95c:	5f 90       	pop	r5
     95e:	4f 90       	pop	r4
     960:	3f 90       	pop	r3
     962:	2f 90       	pop	r2
     964:	08 95       	ret

00000966 <_ZN7Display13draw_triangleEhhhff>:

//using basecenterpoint as turningpoint for rotation
//upright triangle has rotationangle of 0
//turning clockwise considered in x transformation
//baseangle=70 is for 1/3 type
void Display::draw_triangle(uint8_t basecenter_x, uint8_t basecenter_y, uint8_t baselength, float baseangle, float rotationangle){
     966:	2f 92       	push	r2
     968:	3f 92       	push	r3
     96a:	4f 92       	push	r4
     96c:	5f 92       	push	r5
     96e:	6f 92       	push	r6
     970:	7f 92       	push	r7
     972:	8f 92       	push	r8
     974:	9f 92       	push	r9
     976:	af 92       	push	r10
     978:	bf 92       	push	r11
     97a:	cf 92       	push	r12
     97c:	df 92       	push	r13
     97e:	ef 92       	push	r14
     980:	ff 92       	push	r15
     982:	0f 93       	push	r16
     984:	1f 93       	push	r17
     986:	cf 93       	push	r28
     988:	df 93       	push	r29
     98a:	cd b7       	in	r28, 0x3d	; 61
     98c:	de b7       	in	r29, 0x3e	; 62
     98e:	60 97       	sbiw	r28, 0x10	; 16
     990:	0f b6       	in	r0, 0x3f	; 63
     992:	f8 94       	cli
     994:	de bf       	out	0x3e, r29	; 62
     996:	0f be       	out	0x3f, r0	; 63
     998:	cd bf       	out	0x3d, r28	; 61
     99a:	1c 01       	movw	r2, r24
     99c:	6f 87       	std	Y+15, r22	; 0x0f
     99e:	4d 83       	std	Y+5, r20	; 0x05
     9a0:	29 83       	std	Y+1, r18	; 0x01
     9a2:	c6 01       	movw	r24, r12
     9a4:	b5 01       	movw	r22, r10
	//correcting rotationangle
	rotationangle*=M_PI/180.0;
     9a6:	25 e3       	ldi	r18, 0x35	; 53
     9a8:	3a ef       	ldi	r19, 0xFA	; 250
     9aa:	4e e8       	ldi	r20, 0x8E	; 142
     9ac:	5c e3       	ldi	r21, 0x3C	; 60
     9ae:	0e 94 69 27 	call	0x4ed2	; 0x4ed2 <__mulsf3>
     9b2:	4b 01       	movw	r8, r22
     9b4:	5c 01       	movw	r10, r24
	baseangle*=M_PI/180.0;
     9b6:	25 e3       	ldi	r18, 0x35	; 53
     9b8:	3a ef       	ldi	r19, 0xFA	; 250
     9ba:	4e e8       	ldi	r20, 0x8E	; 142
     9bc:	5c e3       	ldi	r21, 0x3C	; 60
     9be:	c8 01       	movw	r24, r16
     9c0:	b7 01       	movw	r22, r14
     9c2:	0e 94 69 27 	call	0x4ed2	; 0x4ed2 <__mulsf3>
     9c6:	6e 83       	std	Y+6, r22	; 0x06
     9c8:	7f 83       	std	Y+7, r23	; 0x07
     9ca:	88 87       	std	Y+8, r24	; 0x08
     9cc:	99 87       	std	Y+9, r25	; 0x09
	//draw baseline
	draw_line(basecenter_x,basecenter_y,baselength/2,rotationangle);
     9ce:	79 80       	ldd	r7, Y+1	; 0x01
     9d0:	76 94       	lsr	r7
     9d2:	85 01       	movw	r16, r10
     9d4:	74 01       	movw	r14, r8
     9d6:	27 2d       	mov	r18, r7
     9d8:	4d 81       	ldd	r20, Y+5	; 0x05
     9da:	6f 85       	ldd	r22, Y+15	; 0x0f
     9dc:	c1 01       	movw	r24, r2
     9de:	0e 94 10 04 	call	0x820	; 0x820 <_ZN7Display9draw_lineEhhhf>
	draw_line(basecenter_x,basecenter_y,baselength/2,rotationangle-M_PI);
     9e2:	2b ed       	ldi	r18, 0xDB	; 219
     9e4:	3f e0       	ldi	r19, 0x0F	; 15
     9e6:	49 e4       	ldi	r20, 0x49	; 73
     9e8:	50 e4       	ldi	r21, 0x40	; 64
     9ea:	c5 01       	movw	r24, r10
     9ec:	b4 01       	movw	r22, r8
     9ee:	0e 94 a2 24 	call	0x4944	; 0x4944 <__subsf3>
     9f2:	7b 01       	movw	r14, r22
     9f4:	8c 01       	movw	r16, r24
     9f6:	27 2d       	mov	r18, r7
     9f8:	4d 81       	ldd	r20, Y+5	; 0x05
     9fa:	6f 85       	ldd	r22, Y+15	; 0x0f
     9fc:	c1 01       	movw	r24, r2
     9fe:	0e 94 10 04 	call	0x820	; 0x820 <_ZN7Display9draw_lineEhhhf>
	//draw midleline
	uint8_t middlelength=baselength/2*tan(baseangle);
     a02:	6e 81       	ldd	r22, Y+6	; 0x06
     a04:	7f 81       	ldd	r23, Y+7	; 0x07
     a06:	88 85       	ldd	r24, Y+8	; 0x08
     a08:	99 85       	ldd	r25, Y+9	; 0x09
     a0a:	0e 94 d5 27 	call	0x4faa	; 0x4faa <tan>
     a0e:	6b 01       	movw	r12, r22
     a10:	7c 01       	movw	r14, r24
     a12:	67 2d       	mov	r22, r7
     a14:	70 e0       	ldi	r23, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	90 e0       	ldi	r25, 0x00	; 0
     a1a:	0e 94 0b 26 	call	0x4c16	; 0x4c16 <__floatsisf>
     a1e:	a7 01       	movw	r20, r14
     a20:	96 01       	movw	r18, r12
     a22:	0e 94 69 27 	call	0x4ed2	; 0x4ed2 <__mulsf3>
     a26:	0e 94 dd 25 	call	0x4bba	; 0x4bba <__fixunssfsi>
     a2a:	68 8b       	std	Y+16, r22	; 0x10
	draw_line(basecenter_x,basecenter_y,middlelength,rotationangle-M_PI_2);
     a2c:	2b ed       	ldi	r18, 0xDB	; 219
     a2e:	3f e0       	ldi	r19, 0x0F	; 15
     a30:	49 ec       	ldi	r20, 0xC9	; 201
     a32:	5f e3       	ldi	r21, 0x3F	; 63
     a34:	c5 01       	movw	r24, r10
     a36:	b4 01       	movw	r22, r8
     a38:	0e 94 a2 24 	call	0x4944	; 0x4944 <__subsf3>
     a3c:	6a 87       	std	Y+10, r22	; 0x0a
     a3e:	7b 87       	std	Y+11, r23	; 0x0b
     a40:	8c 87       	std	Y+12, r24	; 0x0c
     a42:	9d 87       	std	Y+13, r25	; 0x0d
     a44:	7b 01       	movw	r14, r22
     a46:	8c 01       	movw	r16, r24
     a48:	28 89       	ldd	r18, Y+16	; 0x10
     a4a:	4d 81       	ldd	r20, Y+5	; 0x05
     a4c:	6f 85       	ldd	r22, Y+15	; 0x0f
     a4e:	c1 01       	movw	r24, r2
     a50:	0e 94 10 04 	call	0x820	; 0x820 <_ZN7Display9draw_lineEhhhf>
	//draw left arm
	uint8_t lengtharm=baselength/(2*cos(baseangle));
     a54:	6e 81       	ldd	r22, Y+6	; 0x06
     a56:	7f 81       	ldd	r23, Y+7	; 0x07
     a58:	88 85       	ldd	r24, Y+8	; 0x08
     a5a:	99 85       	ldd	r25, Y+9	; 0x09
     a5c:	0e 94 6d 25 	call	0x4ada	; 0x4ada <cos>
     a60:	6b 01       	movw	r12, r22
     a62:	7c 01       	movw	r14, r24
     a64:	29 81       	ldd	r18, Y+1	; 0x01
     a66:	62 2f       	mov	r22, r18
     a68:	70 e0       	ldi	r23, 0x00	; 0
     a6a:	80 e0       	ldi	r24, 0x00	; 0
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	0e 94 0b 26 	call	0x4c16	; 0x4c16 <__floatsisf>
     a72:	2b 01       	movw	r4, r22
     a74:	3c 01       	movw	r6, r24
     a76:	a7 01       	movw	r20, r14
     a78:	96 01       	movw	r18, r12
     a7a:	c7 01       	movw	r24, r14
     a7c:	b6 01       	movw	r22, r12
     a7e:	0e 94 a3 24 	call	0x4946	; 0x4946 <__addsf3>
     a82:	9b 01       	movw	r18, r22
     a84:	ac 01       	movw	r20, r24
     a86:	c3 01       	movw	r24, r6
     a88:	b2 01       	movw	r22, r4
     a8a:	0e 94 70 25 	call	0x4ae0	; 0x4ae0 <__divsf3>
     a8e:	0e 94 dd 25 	call	0x4bba	; 0x4bba <__fixunssfsi>
     a92:	6e 87       	std	Y+14, r22	; 0x0e
	uint8_t sx = basecenter_x-middlelength*cos(rotationangle-M_PI_2);
     a94:	e8 89       	ldd	r30, Y+16	; 0x10
     a96:	6e 2f       	mov	r22, r30
     a98:	70 e0       	ldi	r23, 0x00	; 0
     a9a:	80 e0       	ldi	r24, 0x00	; 0
     a9c:	90 e0       	ldi	r25, 0x00	; 0
     a9e:	0e 94 0b 26 	call	0x4c16	; 0x4c16 <__floatsisf>
     aa2:	69 83       	std	Y+1, r22	; 0x01
     aa4:	7a 83       	std	Y+2, r23	; 0x02
     aa6:	8b 83       	std	Y+3, r24	; 0x03
     aa8:	9c 83       	std	Y+4, r25	; 0x04
     aaa:	6a 85       	ldd	r22, Y+10	; 0x0a
     aac:	7b 85       	ldd	r23, Y+11	; 0x0b
     aae:	8c 85       	ldd	r24, Y+12	; 0x0c
     ab0:	9d 85       	ldd	r25, Y+13	; 0x0d
     ab2:	0e 94 6d 25 	call	0x4ada	; 0x4ada <cos>
     ab6:	6b 01       	movw	r12, r22
     ab8:	7c 01       	movw	r14, r24
     aba:	ff 85       	ldd	r31, Y+15	; 0x0f
     abc:	6f 2f       	mov	r22, r31
     abe:	70 e0       	ldi	r23, 0x00	; 0
     ac0:	80 e0       	ldi	r24, 0x00	; 0
     ac2:	90 e0       	ldi	r25, 0x00	; 0
     ac4:	0e 94 0b 26 	call	0x4c16	; 0x4c16 <__floatsisf>
     ac8:	2b 01       	movw	r4, r22
     aca:	3c 01       	movw	r6, r24
     acc:	a7 01       	movw	r20, r14
     ace:	96 01       	movw	r18, r12
     ad0:	69 81       	ldd	r22, Y+1	; 0x01
     ad2:	7a 81       	ldd	r23, Y+2	; 0x02
     ad4:	8b 81       	ldd	r24, Y+3	; 0x03
     ad6:	9c 81       	ldd	r25, Y+4	; 0x04
     ad8:	0e 94 69 27 	call	0x4ed2	; 0x4ed2 <__mulsf3>
     adc:	9b 01       	movw	r18, r22
     ade:	ac 01       	movw	r20, r24
     ae0:	c3 01       	movw	r24, r6
     ae2:	b2 01       	movw	r22, r4
     ae4:	0e 94 a2 24 	call	0x4944	; 0x4944 <__subsf3>
     ae8:	0e 94 dd 25 	call	0x4bba	; 0x4bba <__fixunssfsi>
     aec:	6f 87       	std	Y+15, r22	; 0x0f
	uint8_t sy = basecenter_y+middlelength*sin(rotationangle-M_PI_2);
     aee:	6a 85       	ldd	r22, Y+10	; 0x0a
     af0:	7b 85       	ldd	r23, Y+11	; 0x0b
     af2:	8c 85       	ldd	r24, Y+12	; 0x0c
     af4:	9d 85       	ldd	r25, Y+13	; 0x0d
     af6:	0e 94 cc 27 	call	0x4f98	; 0x4f98 <sin>
     afa:	6b 01       	movw	r12, r22
     afc:	7c 01       	movw	r14, r24
     afe:	2d 81       	ldd	r18, Y+5	; 0x05
     b00:	62 2f       	mov	r22, r18
     b02:	70 e0       	ldi	r23, 0x00	; 0
     b04:	80 e0       	ldi	r24, 0x00	; 0
     b06:	90 e0       	ldi	r25, 0x00	; 0
     b08:	0e 94 0b 26 	call	0x4c16	; 0x4c16 <__floatsisf>
     b0c:	2b 01       	movw	r4, r22
     b0e:	3c 01       	movw	r6, r24
     b10:	a7 01       	movw	r20, r14
     b12:	96 01       	movw	r18, r12
     b14:	69 81       	ldd	r22, Y+1	; 0x01
     b16:	7a 81       	ldd	r23, Y+2	; 0x02
     b18:	8b 81       	ldd	r24, Y+3	; 0x03
     b1a:	9c 81       	ldd	r25, Y+4	; 0x04
     b1c:	0e 94 69 27 	call	0x4ed2	; 0x4ed2 <__mulsf3>
     b20:	9b 01       	movw	r18, r22
     b22:	ac 01       	movw	r20, r24
     b24:	c3 01       	movw	r24, r6
     b26:	b2 01       	movw	r22, r4
     b28:	0e 94 a3 24 	call	0x4946	; 0x4946 <__addsf3>
     b2c:	0e 94 dd 25 	call	0x4bba	; 0x4bba <__fixunssfsi>
     b30:	d6 2e       	mov	r13, r22
	draw_line(sx,sy,lengtharm,baseangle+rotationangle);
     b32:	a5 01       	movw	r20, r10
     b34:	94 01       	movw	r18, r8
     b36:	6e 81       	ldd	r22, Y+6	; 0x06
     b38:	7f 81       	ldd	r23, Y+7	; 0x07
     b3a:	88 85       	ldd	r24, Y+8	; 0x08
     b3c:	99 85       	ldd	r25, Y+9	; 0x09
     b3e:	0e 94 a3 24 	call	0x4946	; 0x4946 <__addsf3>
     b42:	7b 01       	movw	r14, r22
     b44:	8c 01       	movw	r16, r24
     b46:	2e 85       	ldd	r18, Y+14	; 0x0e
     b48:	4d 2d       	mov	r20, r13
     b4a:	6f 85       	ldd	r22, Y+15	; 0x0f
     b4c:	c1 01       	movw	r24, r2
     b4e:	0e 94 10 04 	call	0x820	; 0x820 <_ZN7Display9draw_lineEhhhf>
	//draw right arm
	draw_line(sx,sy,lengtharm,-baseangle+rotationangle-M_PI);
     b52:	2e 81       	ldd	r18, Y+6	; 0x06
     b54:	3f 81       	ldd	r19, Y+7	; 0x07
     b56:	48 85       	ldd	r20, Y+8	; 0x08
     b58:	59 85       	ldd	r21, Y+9	; 0x09
     b5a:	c5 01       	movw	r24, r10
     b5c:	b4 01       	movw	r22, r8
     b5e:	0e 94 a2 24 	call	0x4944	; 0x4944 <__subsf3>
     b62:	2b ed       	ldi	r18, 0xDB	; 219
     b64:	3f e0       	ldi	r19, 0x0F	; 15
     b66:	49 e4       	ldi	r20, 0x49	; 73
     b68:	50 e4       	ldi	r21, 0x40	; 64
     b6a:	0e 94 a2 24 	call	0x4944	; 0x4944 <__subsf3>
     b6e:	7b 01       	movw	r14, r22
     b70:	8c 01       	movw	r16, r24
     b72:	2e 85       	ldd	r18, Y+14	; 0x0e
     b74:	4d 2d       	mov	r20, r13
     b76:	6f 85       	ldd	r22, Y+15	; 0x0f
     b78:	c1 01       	movw	r24, r2
     b7a:	0e 94 10 04 	call	0x820	; 0x820 <_ZN7Display9draw_lineEhhhf>
}
     b7e:	60 96       	adiw	r28, 0x10	; 16
     b80:	0f b6       	in	r0, 0x3f	; 63
     b82:	f8 94       	cli
     b84:	de bf       	out	0x3e, r29	; 62
     b86:	0f be       	out	0x3f, r0	; 63
     b88:	cd bf       	out	0x3d, r28	; 61
     b8a:	df 91       	pop	r29
     b8c:	cf 91       	pop	r28
     b8e:	1f 91       	pop	r17
     b90:	0f 91       	pop	r16
     b92:	ff 90       	pop	r15
     b94:	ef 90       	pop	r14
     b96:	df 90       	pop	r13
     b98:	cf 90       	pop	r12
     b9a:	bf 90       	pop	r11
     b9c:	af 90       	pop	r10
     b9e:	9f 90       	pop	r9
     ba0:	8f 90       	pop	r8
     ba2:	7f 90       	pop	r7
     ba4:	6f 90       	pop	r6
     ba6:	5f 90       	pop	r5
     ba8:	4f 90       	pop	r4
     baa:	3f 90       	pop	r3
     bac:	2f 90       	pop	r2
     bae:	08 95       	ret

00000bb0 <_ZN7Display9draw_ASCIEhhh>:

void Display::draw_ASCI(uint8_t sym,uint8_t x, uint8_t y){
     bb0:	0f 93       	push	r16
     bb2:	1f 93       	push	r17
     bb4:	cf 93       	push	r28
     bb6:	df 93       	push	r29
	if(sym!=' ' && sym>=33){
     bb8:	61 32       	cpi	r22, 0x21	; 33
     bba:	08 f4       	brcc	.+2      	; 0xbbe <_ZN7Display9draw_ASCIEhhh+0xe>
     bbc:	42 c0       	rjmp	.+132    	; 0xc42 <_ZN7Display9draw_ASCIEhhh+0x92>
		sym-=33;
		uint16_t symbol;
		for(uint8_t i = 0; i < 5; i++){
			symbol = pgm_read_byte(&font5x8[sym][i]);
			symbol = symbol << y%8;
			Displayframe[x+(y/8)*SSD1306_WIDTH+i] |=(uint8_t) (symbol & 0x00FF);
     bbe:	a4 2f       	mov	r26, r20
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	02 2f       	mov	r16, r18
     bc4:	06 95       	lsr	r16
     bc6:	06 95       	lsr	r16
     bc8:	06 95       	lsr	r16
     bca:	30 e8       	ldi	r19, 0x80	; 128
     bcc:	03 9f       	mul	r16, r19
     bce:	80 01       	movw	r16, r0
     bd0:	11 24       	eor	r1, r1
     bd2:	ed 01       	movw	r28, r26
     bd4:	c0 0f       	add	r28, r16
     bd6:	d1 1f       	adc	r29, r17
			if(((symbol&0xFF00)>>8)==0){
				Displayframe[x+(y/8+1)*SSD1306_WIDTH+i] |= 0;
			}
			else {
				Displayframe[x+(y/8+1)*SSD1306_WIDTH+i] |= (uint8_t) ((symbol & 0xFF00)>>8);
     bd8:	00 58       	subi	r16, 0x80	; 128
     bda:	1f 4f       	sbci	r17, 0xFF	; 255
     bdc:	0a 0f       	add	r16, r26
     bde:	1b 1f       	adc	r17, r27
	draw_line(sx,sy,lengtharm,-baseangle+rotationangle-M_PI);
}

void Display::draw_ASCI(uint8_t sym,uint8_t x, uint8_t y){
	if(sym!=' ' && sym>=33){
		sym-=33;
     be0:	61 52       	subi	r22, 0x21	; 33
     be2:	46 2f       	mov	r20, r22
     be4:	50 e0       	ldi	r21, 0x00	; 0
     be6:	fa 01       	movw	r30, r20
     be8:	ee 0f       	add	r30, r30
     bea:	ff 1f       	adc	r31, r31
     bec:	ee 0f       	add	r30, r30
     bee:	ff 1f       	adc	r31, r31
     bf0:	e4 0f       	add	r30, r20
     bf2:	f5 1f       	adc	r31, r21
     bf4:	ee 55       	subi	r30, 0x5E	; 94
     bf6:	fd 4f       	sbci	r31, 0xFD	; 253
     bf8:	dc 01       	movw	r26, r24
     bfa:	ac 0f       	add	r26, r28
     bfc:	bd 1f       	adc	r27, r29
     bfe:	ae 01       	movw	r20, r28
     c00:	05 96       	adiw	r24, 0x05	; 5
     c02:	8c 0f       	add	r24, r28
     c04:	9d 1f       	adc	r25, r29
		uint16_t symbol;
		for(uint8_t i = 0; i < 5; i++){
			symbol = pgm_read_byte(&font5x8[sym][i]);
			symbol = symbol << y%8;
     c06:	27 70       	andi	r18, 0x07	; 7
void Display::draw_ASCI(uint8_t sym,uint8_t x, uint8_t y){
	if(sym!=' ' && sym>=33){
		sym-=33;
		uint16_t symbol;
		for(uint8_t i = 0; i < 5; i++){
			symbol = pgm_read_byte(&font5x8[sym][i]);
     c08:	64 91       	lpm	r22, Z
     c0a:	70 e0       	ldi	r23, 0x00	; 0
			symbol = symbol << y%8;
     c0c:	02 2e       	mov	r0, r18
     c0e:	02 c0       	rjmp	.+4      	; 0xc14 <_ZN7Display9draw_ASCIEhhh+0x64>
     c10:	66 0f       	add	r22, r22
     c12:	77 1f       	adc	r23, r23
     c14:	0a 94       	dec	r0
     c16:	e2 f7       	brpl	.-8      	; 0xc10 <_ZN7Display9draw_ASCIEhhh+0x60>
			Displayframe[x+(y/8)*SSD1306_WIDTH+i] |=(uint8_t) (symbol & 0x00FF);
     c18:	3c 91       	ld	r19, X
     c1a:	36 2b       	or	r19, r22
     c1c:	3c 93       	st	X, r19
			if(((symbol&0xFF00)>>8)==0){
     c1e:	67 2f       	mov	r22, r23
     c20:	77 27       	eor	r23, r23
     c22:	61 15       	cp	r22, r1
     c24:	71 05       	cpc	r23, r1
     c26:	41 f0       	breq	.+16     	; 0xc38 <_ZN7Display9draw_ASCIEhhh+0x88>
     c28:	ed 01       	movw	r28, r26
     c2a:	c4 1b       	sub	r28, r20
     c2c:	d5 0b       	sbc	r29, r21
     c2e:	c0 0f       	add	r28, r16
     c30:	d1 1f       	adc	r29, r17
				Displayframe[x+(y/8+1)*SSD1306_WIDTH+i] |= 0;
			}
			else {
				Displayframe[x+(y/8+1)*SSD1306_WIDTH+i] |= (uint8_t) ((symbol & 0xFF00)>>8);
     c32:	38 81       	ld	r19, Y
     c34:	63 2b       	or	r22, r19
     c36:	68 83       	st	Y, r22
     c38:	31 96       	adiw	r30, 0x01	; 1
     c3a:	11 96       	adiw	r26, 0x01	; 1

void Display::draw_ASCI(uint8_t sym,uint8_t x, uint8_t y){
	if(sym!=' ' && sym>=33){
		sym-=33;
		uint16_t symbol;
		for(uint8_t i = 0; i < 5; i++){
     c3c:	a8 17       	cp	r26, r24
     c3e:	b9 07       	cpc	r27, r25
     c40:	19 f7       	brne	.-58     	; 0xc08 <_ZN7Display9draw_ASCIEhhh+0x58>
	else{
		for(uint8_t i = 0; i < 7; i++){
			Displayframe[x+(y/8)*SSD1306_WIDTH+i] |= 0;
		}
	}
}
     c42:	df 91       	pop	r29
     c44:	cf 91       	pop	r28
     c46:	1f 91       	pop	r17
     c48:	0f 91       	pop	r16
     c4a:	08 95       	ret

00000c4c <_ZN7Display16draw_number16x16Ehhh>:

void Display::draw_number16x16(uint8_t number, uint8_t x, uint8_t y){
     c4c:	ef 92       	push	r14
     c4e:	ff 92       	push	r15
     c50:	0f 93       	push	r16
     c52:	1f 93       	push	r17
     c54:	cf 93       	push	r28
     c56:	df 93       	push	r29
	uint16_t symbol;
	if(number>=0 && number<10){
     c58:	6a 30       	cpi	r22, 0x0A	; 10
     c5a:	08 f0       	brcs	.+2      	; 0xc5e <_ZN7Display16draw_number16x16Ehhh+0x12>
     c5c:	66 c0       	rjmp	.+204    	; 0xd2a <_ZN7Display16draw_number16x16Ehhh+0xde>
		for(uint8_t i = 0; i < 32;i++){
			symbol = pgm_read_byte(&digits16x16[number][i]);
			symbol = symbol << y%8;
			if(i<16){
				Displayframe[x+(y/8)*SSD1306_WIDTH+i] |=(uint8_t) (symbol & 0x00FF);
     c5e:	50 e0       	ldi	r21, 0x00	; 0
     c60:	02 2f       	mov	r16, r18
     c62:	06 95       	lsr	r16
     c64:	06 95       	lsr	r16
     c66:	06 95       	lsr	r16
     c68:	10 e0       	ldi	r17, 0x00	; 0
     c6a:	d8 01       	movw	r26, r16
     c6c:	b6 95       	lsr	r27
     c6e:	ba 2f       	mov	r27, r26
     c70:	aa 27       	eor	r26, r26
     c72:	b7 95       	ror	r27
     c74:	a7 95       	ror	r26
				if(((symbol&0xFF00)>>8)==0){
					Displayframe[x+(y/8+1)*SSD1306_WIDTH+i] |= 0;
				}
				else {
					Displayframe[x+(y/8+1)*SSD1306_WIDTH+i] |= (uint8_t) ((symbol & 0xFF00)>>8);
     c76:	0f 5f       	subi	r16, 0xFF	; 255
     c78:	1f 4f       	sbci	r17, 0xFF	; 255
				}
			}
			else {
				Displayframe[x+(y/8+1)*SSD1306_WIDTH+(i-16)] |= (uint8_t) (symbol & 0x00FF);
     c7a:	16 95       	lsr	r17
     c7c:	10 2f       	mov	r17, r16
     c7e:	00 27       	eor	r16, r16
     c80:	17 95       	ror	r17
     c82:	07 95       	ror	r16
				Displayframe[x+(y/8)*SSD1306_WIDTH+i] |=(uint8_t) (symbol & 0x00FF);
				if(((symbol&0xFF00)>>8)==0){
					Displayframe[x+(y/8+1)*SSD1306_WIDTH+i] |= 0;
				}
				else {
					Displayframe[x+(y/8+1)*SSD1306_WIDTH+i] |= (uint8_t) ((symbol & 0xFF00)>>8);
     c84:	7d 01       	movw	r14, r26
     c86:	30 e8       	ldi	r19, 0x80	; 128
     c88:	e3 0e       	add	r14, r19
     c8a:	f1 1c       	adc	r15, r1
     c8c:	e4 0e       	add	r14, r20
     c8e:	f5 1e       	adc	r15, r21
     c90:	e8 0e       	add	r14, r24
     c92:	f9 1e       	adc	r15, r25
				}
			}
			else {
				Displayframe[x+(y/8+1)*SSD1306_WIDTH+(i-16)] |= (uint8_t) (symbol & 0x00FF);
     c94:	ea 01       	movw	r28, r20
     c96:	c0 0f       	add	r28, r16
     c98:	d1 1f       	adc	r29, r17
     c9a:	60 97       	sbiw	r28, 0x10	; 16
     c9c:	c8 0f       	add	r28, r24
     c9e:	d9 1f       	adc	r29, r25
				if(((symbol&0xFF00)>>8)==0){
					Displayframe[x+(y/8+2)*SSD1306_WIDTH+(i-16)] |= 0;
				}
				else {
					Displayframe[x+(y/8+2)*SSD1306_WIDTH+(i-16)] |= (uint8_t) ((symbol & 0xFF00)>>8);
     ca0:	04 0f       	add	r16, r20
     ca2:	15 1f       	adc	r17, r21
     ca4:	00 59       	subi	r16, 0x90	; 144
     ca6:	1f 4f       	sbci	r17, 0xFF	; 255
     ca8:	08 0f       	add	r16, r24
     caa:	19 1f       	adc	r17, r25
	if(number>=0 && number<10){
		for(uint8_t i = 0; i < 32;i++){
			symbol = pgm_read_byte(&digits16x16[number][i]);
			symbol = symbol << y%8;
			if(i<16){
				Displayframe[x+(y/8)*SSD1306_WIDTH+i] |=(uint8_t) (symbol & 0x00FF);
     cac:	a4 0f       	add	r26, r20
     cae:	b5 1f       	adc	r27, r21
     cb0:	a8 0f       	add	r26, r24
     cb2:	b9 1f       	adc	r27, r25
     cb4:	e0 e2       	ldi	r30, 0x20	; 32
     cb6:	6e 9f       	mul	r22, r30
     cb8:	c0 01       	movw	r24, r0
     cba:	11 24       	eor	r1, r1
				Displayframe[x+(y/8+1)*SSD1306_WIDTH+(i-16)] |= (uint8_t) (symbol & 0x00FF);
				if(((symbol&0xFF00)>>8)==0){
					Displayframe[x+(y/8+2)*SSD1306_WIDTH+(i-16)] |= 0;
				}
				else {
					Displayframe[x+(y/8+2)*SSD1306_WIDTH+(i-16)] |= (uint8_t) ((symbol & 0xFF00)>>8);
     cbc:	40 e0       	ldi	r20, 0x00	; 0
     cbe:	50 e0       	ldi	r21, 0x00	; 0
     cc0:	8e 59       	subi	r24, 0x9E	; 158
     cc2:	9e 4f       	sbci	r25, 0xFE	; 254
void Display::draw_number16x16(uint8_t number, uint8_t x, uint8_t y){
	uint16_t symbol;
	if(number>=0 && number<10){
		for(uint8_t i = 0; i < 32;i++){
			symbol = pgm_read_byte(&digits16x16[number][i]);
			symbol = symbol << y%8;
     cc4:	27 70       	andi	r18, 0x07	; 7
     cc6:	fc 01       	movw	r30, r24
     cc8:	e4 0f       	add	r30, r20
     cca:	f5 1f       	adc	r31, r21

void Display::draw_number16x16(uint8_t number, uint8_t x, uint8_t y){
	uint16_t symbol;
	if(number>=0 && number<10){
		for(uint8_t i = 0; i < 32;i++){
			symbol = pgm_read_byte(&digits16x16[number][i]);
     ccc:	e4 91       	lpm	r30, Z
     cce:	f0 e0       	ldi	r31, 0x00	; 0
			symbol = symbol << y%8;
     cd0:	02 2e       	mov	r0, r18
     cd2:	02 c0       	rjmp	.+4      	; 0xcd8 <_ZN7Display16draw_number16x16Ehhh+0x8c>
     cd4:	ee 0f       	add	r30, r30
     cd6:	ff 1f       	adc	r31, r31
     cd8:	0a 94       	dec	r0
     cda:	e2 f7       	brpl	.-8      	; 0xcd4 <_ZN7Display16draw_number16x16Ehhh+0x88>
			if(i<16){
     cdc:	40 31       	cpi	r20, 0x10	; 16
     cde:	68 f4       	brcc	.+26     	; 0xcfa <_ZN7Display16draw_number16x16Ehhh+0xae>
				Displayframe[x+(y/8)*SSD1306_WIDTH+i] |=(uint8_t) (symbol & 0x00FF);
     ce0:	3c 91       	ld	r19, X
     ce2:	3e 2b       	or	r19, r30
     ce4:	3c 93       	st	X, r19
				if(((symbol&0xFF00)>>8)==0){
     ce6:	6f 2f       	mov	r22, r31
     ce8:	77 27       	eor	r23, r23
     cea:	61 15       	cp	r22, r1
     cec:	71 05       	cpc	r23, r1
     cee:	89 f0       	breq	.+34     	; 0xd12 <_ZN7Display16draw_number16x16Ehhh+0xc6>
					Displayframe[x+(y/8+1)*SSD1306_WIDTH+i] |= 0;
				}
				else {
					Displayframe[x+(y/8+1)*SSD1306_WIDTH+i] |= (uint8_t) ((symbol & 0xFF00)>>8);
     cf0:	f7 01       	movw	r30, r14
     cf2:	30 81       	ld	r19, Z
     cf4:	36 2b       	or	r19, r22
     cf6:	30 83       	st	Z, r19
     cf8:	0c c0       	rjmp	.+24     	; 0xd12 <_ZN7Display16draw_number16x16Ehhh+0xc6>
				}
			}
			else {
				Displayframe[x+(y/8+1)*SSD1306_WIDTH+(i-16)] |= (uint8_t) (symbol & 0x00FF);
     cfa:	38 81       	ld	r19, Y
     cfc:	3e 2b       	or	r19, r30
     cfe:	38 83       	st	Y, r19
				if(((symbol&0xFF00)>>8)==0){
     d00:	6f 2f       	mov	r22, r31
     d02:	77 27       	eor	r23, r23
     d04:	61 15       	cp	r22, r1
     d06:	71 05       	cpc	r23, r1
     d08:	21 f0       	breq	.+8      	; 0xd12 <_ZN7Display16draw_number16x16Ehhh+0xc6>
					Displayframe[x+(y/8+2)*SSD1306_WIDTH+(i-16)] |= 0;
				}
				else {
					Displayframe[x+(y/8+2)*SSD1306_WIDTH+(i-16)] |= (uint8_t) ((symbol & 0xFF00)>>8);
     d0a:	f8 01       	movw	r30, r16
     d0c:	30 81       	ld	r19, Z
     d0e:	36 2b       	or	r19, r22
     d10:	30 83       	st	Z, r19
     d12:	4f 5f       	subi	r20, 0xFF	; 255
     d14:	5f 4f       	sbci	r21, 0xFF	; 255
     d16:	ff ef       	ldi	r31, 0xFF	; 255
     d18:	ef 1a       	sub	r14, r31
     d1a:	ff 0a       	sbc	r15, r31
     d1c:	21 96       	adiw	r28, 0x01	; 1
     d1e:	0f 5f       	subi	r16, 0xFF	; 255
     d20:	1f 4f       	sbci	r17, 0xFF	; 255
     d22:	11 96       	adiw	r26, 0x01	; 1
}

void Display::draw_number16x16(uint8_t number, uint8_t x, uint8_t y){
	uint16_t symbol;
	if(number>=0 && number<10){
		for(uint8_t i = 0; i < 32;i++){
     d24:	40 32       	cpi	r20, 0x20	; 32
     d26:	51 05       	cpc	r21, r1
     d28:	71 f6       	brne	.-100    	; 0xcc6 <_ZN7Display16draw_number16x16Ehhh+0x7a>
					Displayframe[x+(y/8+2)*SSD1306_WIDTH+(i-16)] |= (uint8_t) ((symbol & 0xFF00)>>8);
				}
			}
		}
	}
}
     d2a:	df 91       	pop	r29
     d2c:	cf 91       	pop	r28
     d2e:	1f 91       	pop	r17
     d30:	0f 91       	pop	r16
     d32:	ff 90       	pop	r15
     d34:	ef 90       	pop	r14
     d36:	08 95       	ret

00000d38 <_ZN7Display6analogEhhhh>:

void Display::analog(uint8_t stunde, uint8_t minute, uint8_t sekunde, uint8_t sekanzeige){
     d38:	2f 92       	push	r2
     d3a:	3f 92       	push	r3
     d3c:	4f 92       	push	r4
     d3e:	5f 92       	push	r5
     d40:	6f 92       	push	r6
     d42:	7f 92       	push	r7
     d44:	8f 92       	push	r8
     d46:	9f 92       	push	r9
     d48:	af 92       	push	r10
     d4a:	bf 92       	push	r11
     d4c:	cf 92       	push	r12
     d4e:	df 92       	push	r13
     d50:	ef 92       	push	r14
     d52:	ff 92       	push	r15
     d54:	0f 93       	push	r16
     d56:	1f 93       	push	r17
     d58:	cf 93       	push	r28
     d5a:	df 93       	push	r29
     d5c:	cd b7       	in	r28, 0x3d	; 61
     d5e:	de b7       	in	r29, 0x3e	; 62
     d60:	27 97       	sbiw	r28, 0x07	; 7
     d62:	0f b6       	in	r0, 0x3f	; 63
     d64:	f8 94       	cli
     d66:	de bf       	out	0x3e, r29	; 62
     d68:	0f be       	out	0x3f, r0	; 63
     d6a:	cd bf       	out	0x3d, r28	; 61
     d6c:	9f 83       	std	Y+7, r25	; 0x07
     d6e:	8e 83       	std	Y+6, r24	; 0x06
     d70:	6d 83       	std	Y+5, r22	; 0x05
     d72:	34 2e       	mov	r3, r20
	uint8_t Px=32-1;
	uint8_t Py=32-1;
	uint8_t x=0,y=0;
	float winkel=0;
	
	if (sekanzeige)
     d74:	00 23       	and	r16, r16
     d76:	09 f4       	brne	.+2      	; 0xd7a <_ZN7Display6analogEhhhh+0x42>
     d78:	29 c1       	rjmp	.+594    	; 0xfcc <_ZN7Display6analogEhhhh+0x294>
	{
		//Berechnen des Sekundenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(sekunde*6.0)*M_PI/180.0-M_PI/2.0;
     d7a:	62 2f       	mov	r22, r18
     d7c:	70 e0       	ldi	r23, 0x00	; 0
     d7e:	80 e0       	ldi	r24, 0x00	; 0
     d80:	90 e0       	ldi	r25, 0x00	; 0
     d82:	0e 94 0b 26 	call	0x4c16	; 0x4c16 <__floatsisf>
     d86:	20 e0       	ldi	r18, 0x00	; 0
     d88:	30 e0       	ldi	r19, 0x00	; 0
     d8a:	40 ec       	ldi	r20, 0xC0	; 192
     d8c:	50 e4       	ldi	r21, 0x40	; 64
     d8e:	0e 94 69 27 	call	0x4ed2	; 0x4ed2 <__mulsf3>
     d92:	2b ed       	ldi	r18, 0xDB	; 219
     d94:	3f e0       	ldi	r19, 0x0F	; 15
     d96:	49 e4       	ldi	r20, 0x49	; 73
     d98:	50 e4       	ldi	r21, 0x40	; 64
     d9a:	0e 94 69 27 	call	0x4ed2	; 0x4ed2 <__mulsf3>
     d9e:	20 e0       	ldi	r18, 0x00	; 0
     da0:	30 e0       	ldi	r19, 0x00	; 0
     da2:	44 e3       	ldi	r20, 0x34	; 52
     da4:	53 e4       	ldi	r21, 0x43	; 67
     da6:	0e 94 70 25 	call	0x4ae0	; 0x4ae0 <__divsf3>
     daa:	2b ed       	ldi	r18, 0xDB	; 219
     dac:	3f e0       	ldi	r19, 0x0F	; 15
     dae:	49 ec       	ldi	r20, 0xC9	; 201
     db0:	5f e3       	ldi	r21, 0x3F	; 63
     db2:	0e 94 a2 24 	call	0x4944	; 0x4944 <__subsf3>
     db6:	6b 01       	movw	r12, r22
     db8:	7c 01       	movw	r14, r24
			x=(uint8_t) i*cos(winkel)+Px;
     dba:	0e 94 6d 25 	call	0x4ada	; 0x4ada <cos>
     dbe:	2b 01       	movw	r4, r22
     dc0:	3c 01       	movw	r6, r24
			y=(uint8_t) i*sin(winkel)+Py;
     dc2:	c7 01       	movw	r24, r14
     dc4:	b6 01       	movw	r22, r12
     dc6:	0e 94 cc 27 	call	0x4f98	; 0x4f98 <sin>
     dca:	4b 01       	movw	r8, r22
     dcc:	5c 01       	movw	r10, r24
     dce:	00 e0       	ldi	r16, 0x00	; 0
     dd0:	10 e0       	ldi	r17, 0x00	; 0
	if (sekanzeige)
	{
		//Berechnen des Sekundenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(sekunde*6.0)*M_PI/180.0-M_PI/2.0;
			x=(uint8_t) i*cos(winkel)+Px;
     dd2:	b8 01       	movw	r22, r16
     dd4:	88 27       	eor	r24, r24
     dd6:	77 fd       	sbrc	r23, 7
     dd8:	80 95       	com	r24
     dda:	98 2f       	mov	r25, r24
     ddc:	0e 94 0b 26 	call	0x4c16	; 0x4c16 <__floatsisf>
     de0:	6b 01       	movw	r12, r22
     de2:	7c 01       	movw	r14, r24
			y=(uint8_t) i*sin(winkel)+Py;
     de4:	a5 01       	movw	r20, r10
     de6:	94 01       	movw	r18, r8
     de8:	0e 94 69 27 	call	0x4ed2	; 0x4ed2 <__mulsf3>
     dec:	20 e0       	ldi	r18, 0x00	; 0
     dee:	30 e0       	ldi	r19, 0x00	; 0
     df0:	48 ef       	ldi	r20, 0xF8	; 248
     df2:	51 e4       	ldi	r21, 0x41	; 65
     df4:	0e 94 a3 24 	call	0x4946	; 0x4946 <__addsf3>
     df8:	0e 94 dd 25 	call	0x4bba	; 0x4bba <__fixunssfsi>
     dfc:	26 2e       	mov	r2, r22
	if (sekanzeige)
	{
		//Berechnen des Sekundenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(sekunde*6.0)*M_PI/180.0-M_PI/2.0;
			x=(uint8_t) i*cos(winkel)+Px;
     dfe:	a3 01       	movw	r20, r6
     e00:	92 01       	movw	r18, r4
     e02:	c7 01       	movw	r24, r14
     e04:	b6 01       	movw	r22, r12
     e06:	0e 94 69 27 	call	0x4ed2	; 0x4ed2 <__mulsf3>
     e0a:	20 e0       	ldi	r18, 0x00	; 0
     e0c:	30 e0       	ldi	r19, 0x00	; 0
     e0e:	48 ef       	ldi	r20, 0xF8	; 248
     e10:	51 e4       	ldi	r21, 0x41	; 65
     e12:	0e 94 a3 24 	call	0x4946	; 0x4946 <__addsf3>
     e16:	0e 94 dd 25 	call	0x4bba	; 0x4bba <__fixunssfsi>
			y=(uint8_t) i*sin(winkel)+Py;

			drawPixel(x,y,0);
     e1a:	20 e0       	ldi	r18, 0x00	; 0
     e1c:	42 2d       	mov	r20, r2
     e1e:	8e 81       	ldd	r24, Y+6	; 0x06
     e20:	9f 81       	ldd	r25, Y+7	; 0x07
     e22:	0e 94 d6 03 	call	0x7ac	; 0x7ac <_ZN7Display9drawPixelEhhh>
     e26:	0f 5f       	subi	r16, 0xFF	; 255
     e28:	1f 4f       	sbci	r17, 0xFF	; 255
	float winkel=0;
	
	if (sekanzeige)
	{
		//Berechnen des Sekundenzeigers
		for(uint8_t i=0;i<r;i++){
     e2a:	09 31       	cpi	r16, 0x19	; 25
     e2c:	11 05       	cpc	r17, r1
     e2e:	89 f6       	brne	.-94     	; 0xdd2 <_ZN7Display6analogEhhhh+0x9a>
		}

		r=21;
		//Berechnen des Minutenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(minute*6.0)*M_PI/180.0-M_PI/2.0;
     e30:	63 2d       	mov	r22, r3
     e32:	70 e0       	ldi	r23, 0x00	; 0
     e34:	80 e0       	ldi	r24, 0x00	; 0
     e36:	90 e0       	ldi	r25, 0x00	; 0
     e38:	0e 94 0b 26 	call	0x4c16	; 0x4c16 <__floatsisf>
     e3c:	69 83       	std	Y+1, r22	; 0x01
     e3e:	7a 83       	std	Y+2, r23	; 0x02
     e40:	8b 83       	std	Y+3, r24	; 0x03
     e42:	9c 83       	std	Y+4, r25	; 0x04
     e44:	20 e0       	ldi	r18, 0x00	; 0
     e46:	30 e0       	ldi	r19, 0x00	; 0
     e48:	40 ec       	ldi	r20, 0xC0	; 192
     e4a:	50 e4       	ldi	r21, 0x40	; 64
     e4c:	0e 94 69 27 	call	0x4ed2	; 0x4ed2 <__mulsf3>
     e50:	2b ed       	ldi	r18, 0xDB	; 219
     e52:	3f e0       	ldi	r19, 0x0F	; 15
     e54:	49 e4       	ldi	r20, 0x49	; 73
     e56:	50 e4       	ldi	r21, 0x40	; 64
     e58:	0e 94 69 27 	call	0x4ed2	; 0x4ed2 <__mulsf3>
     e5c:	20 e0       	ldi	r18, 0x00	; 0
     e5e:	30 e0       	ldi	r19, 0x00	; 0
     e60:	44 e3       	ldi	r20, 0x34	; 52
     e62:	53 e4       	ldi	r21, 0x43	; 67
     e64:	0e 94 70 25 	call	0x4ae0	; 0x4ae0 <__divsf3>
     e68:	2b ed       	ldi	r18, 0xDB	; 219
     e6a:	3f e0       	ldi	r19, 0x0F	; 15
     e6c:	49 ec       	ldi	r20, 0xC9	; 201
     e6e:	5f e3       	ldi	r21, 0x3F	; 63
     e70:	0e 94 a2 24 	call	0x4944	; 0x4944 <__subsf3>
     e74:	6b 01       	movw	r12, r22
     e76:	7c 01       	movw	r14, r24
			x=(uint8_t) i*cos(winkel)+Px;
     e78:	0e 94 6d 25 	call	0x4ada	; 0x4ada <cos>
     e7c:	4b 01       	movw	r8, r22
     e7e:	5c 01       	movw	r10, r24
			y=(uint8_t) i*sin(winkel)+Py;
     e80:	c7 01       	movw	r24, r14
     e82:	b6 01       	movw	r22, r12
     e84:	0e 94 cc 27 	call	0x4f98	; 0x4f98 <sin>
     e88:	2b 01       	movw	r4, r22
     e8a:	3c 01       	movw	r6, r24
     e8c:	00 e0       	ldi	r16, 0x00	; 0
     e8e:	10 e0       	ldi	r17, 0x00	; 0

		r=21;
		//Berechnen des Minutenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(minute*6.0)*M_PI/180.0-M_PI/2.0;
			x=(uint8_t) i*cos(winkel)+Px;
     e90:	b8 01       	movw	r22, r16
     e92:	88 27       	eor	r24, r24
     e94:	77 fd       	sbrc	r23, 7
     e96:	80 95       	com	r24
     e98:	98 2f       	mov	r25, r24
     e9a:	0e 94 0b 26 	call	0x4c16	; 0x4c16 <__floatsisf>
     e9e:	6b 01       	movw	r12, r22
     ea0:	7c 01       	movw	r14, r24
			y=(uint8_t) i*sin(winkel)+Py;
     ea2:	a3 01       	movw	r20, r6
     ea4:	92 01       	movw	r18, r4
     ea6:	0e 94 69 27 	call	0x4ed2	; 0x4ed2 <__mulsf3>
     eaa:	20 e0       	ldi	r18, 0x00	; 0
     eac:	30 e0       	ldi	r19, 0x00	; 0
     eae:	48 ef       	ldi	r20, 0xF8	; 248
     eb0:	51 e4       	ldi	r21, 0x41	; 65
     eb2:	0e 94 a3 24 	call	0x4946	; 0x4946 <__addsf3>
     eb6:	0e 94 dd 25 	call	0x4bba	; 0x4bba <__fixunssfsi>
     eba:	36 2e       	mov	r3, r22

		r=21;
		//Berechnen des Minutenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(minute*6.0)*M_PI/180.0-M_PI/2.0;
			x=(uint8_t) i*cos(winkel)+Px;
     ebc:	a5 01       	movw	r20, r10
     ebe:	94 01       	movw	r18, r8
     ec0:	c7 01       	movw	r24, r14
     ec2:	b6 01       	movw	r22, r12
     ec4:	0e 94 69 27 	call	0x4ed2	; 0x4ed2 <__mulsf3>
     ec8:	20 e0       	ldi	r18, 0x00	; 0
     eca:	30 e0       	ldi	r19, 0x00	; 0
     ecc:	48 ef       	ldi	r20, 0xF8	; 248
     ece:	51 e4       	ldi	r21, 0x41	; 65
     ed0:	0e 94 a3 24 	call	0x4946	; 0x4946 <__addsf3>
     ed4:	0e 94 dd 25 	call	0x4bba	; 0x4bba <__fixunssfsi>
			y=(uint8_t) i*sin(winkel)+Py;

			drawPixel(x,y,0);
     ed8:	20 e0       	ldi	r18, 0x00	; 0
     eda:	43 2d       	mov	r20, r3
     edc:	8e 81       	ldd	r24, Y+6	; 0x06
     ede:	9f 81       	ldd	r25, Y+7	; 0x07
     ee0:	0e 94 d6 03 	call	0x7ac	; 0x7ac <_ZN7Display9drawPixelEhhh>
     ee4:	0f 5f       	subi	r16, 0xFF	; 255
     ee6:	1f 4f       	sbci	r17, 0xFF	; 255
			drawPixel(x,y,0);
		}

		r=21;
		//Berechnen des Minutenzeigers
		for(uint8_t i=0;i<r;i++){
     ee8:	05 31       	cpi	r16, 0x15	; 21
     eea:	11 05       	cpc	r17, r1
     eec:	89 f6       	brne	.-94     	; 0xe90 <_ZN7Display6analogEhhhh+0x158>
		}

		r=13;
		//Berechnen des Stundenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(stunde*30.0+minute/2.0)*M_PI/180.0-M_PI/2.0;
     eee:	2d 81       	ldd	r18, Y+5	; 0x05
     ef0:	62 2f       	mov	r22, r18
     ef2:	70 e0       	ldi	r23, 0x00	; 0
     ef4:	80 e0       	ldi	r24, 0x00	; 0
     ef6:	90 e0       	ldi	r25, 0x00	; 0
     ef8:	0e 94 0b 26 	call	0x4c16	; 0x4c16 <__floatsisf>
     efc:	20 e0       	ldi	r18, 0x00	; 0
     efe:	30 e0       	ldi	r19, 0x00	; 0
     f00:	40 ef       	ldi	r20, 0xF0	; 240
     f02:	51 e4       	ldi	r21, 0x41	; 65
     f04:	0e 94 69 27 	call	0x4ed2	; 0x4ed2 <__mulsf3>
     f08:	6b 01       	movw	r12, r22
     f0a:	7c 01       	movw	r14, r24
     f0c:	20 e0       	ldi	r18, 0x00	; 0
     f0e:	30 e0       	ldi	r19, 0x00	; 0
     f10:	40 e0       	ldi	r20, 0x00	; 0
     f12:	5f e3       	ldi	r21, 0x3F	; 63
     f14:	69 81       	ldd	r22, Y+1	; 0x01
     f16:	7a 81       	ldd	r23, Y+2	; 0x02
     f18:	8b 81       	ldd	r24, Y+3	; 0x03
     f1a:	9c 81       	ldd	r25, Y+4	; 0x04
     f1c:	0e 94 69 27 	call	0x4ed2	; 0x4ed2 <__mulsf3>
     f20:	9b 01       	movw	r18, r22
     f22:	ac 01       	movw	r20, r24
     f24:	c7 01       	movw	r24, r14
     f26:	b6 01       	movw	r22, r12
     f28:	0e 94 a3 24 	call	0x4946	; 0x4946 <__addsf3>
     f2c:	2b ed       	ldi	r18, 0xDB	; 219
     f2e:	3f e0       	ldi	r19, 0x0F	; 15
     f30:	49 e4       	ldi	r20, 0x49	; 73
     f32:	50 e4       	ldi	r21, 0x40	; 64
     f34:	0e 94 69 27 	call	0x4ed2	; 0x4ed2 <__mulsf3>
     f38:	20 e0       	ldi	r18, 0x00	; 0
     f3a:	30 e0       	ldi	r19, 0x00	; 0
     f3c:	44 e3       	ldi	r20, 0x34	; 52
     f3e:	53 e4       	ldi	r21, 0x43	; 67
     f40:	0e 94 70 25 	call	0x4ae0	; 0x4ae0 <__divsf3>
     f44:	2b ed       	ldi	r18, 0xDB	; 219
     f46:	3f e0       	ldi	r19, 0x0F	; 15
     f48:	49 ec       	ldi	r20, 0xC9	; 201
     f4a:	5f e3       	ldi	r21, 0x3F	; 63
     f4c:	0e 94 a2 24 	call	0x4944	; 0x4944 <__subsf3>
     f50:	6b 01       	movw	r12, r22
     f52:	7c 01       	movw	r14, r24
			x= (uint8_t) i*cos(winkel) +Px;
     f54:	0e 94 6d 25 	call	0x4ada	; 0x4ada <cos>
     f58:	2b 01       	movw	r4, r22
     f5a:	3c 01       	movw	r6, r24
			y= (uint8_t) i*sin(winkel) +Py;
     f5c:	c7 01       	movw	r24, r14
     f5e:	b6 01       	movw	r22, r12
     f60:	0e 94 cc 27 	call	0x4f98	; 0x4f98 <sin>
     f64:	4b 01       	movw	r8, r22
     f66:	5c 01       	movw	r10, r24
     f68:	00 e0       	ldi	r16, 0x00	; 0
     f6a:	10 e0       	ldi	r17, 0x00	; 0

		r=13;
		//Berechnen des Stundenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(stunde*30.0+minute/2.0)*M_PI/180.0-M_PI/2.0;
			x= (uint8_t) i*cos(winkel) +Px;
     f6c:	b8 01       	movw	r22, r16
     f6e:	88 27       	eor	r24, r24
     f70:	77 fd       	sbrc	r23, 7
     f72:	80 95       	com	r24
     f74:	98 2f       	mov	r25, r24
     f76:	0e 94 0b 26 	call	0x4c16	; 0x4c16 <__floatsisf>
     f7a:	6b 01       	movw	r12, r22
     f7c:	7c 01       	movw	r14, r24
			y= (uint8_t) i*sin(winkel) +Py;
     f7e:	a5 01       	movw	r20, r10
     f80:	94 01       	movw	r18, r8
     f82:	0e 94 69 27 	call	0x4ed2	; 0x4ed2 <__mulsf3>
     f86:	20 e0       	ldi	r18, 0x00	; 0
     f88:	30 e0       	ldi	r19, 0x00	; 0
     f8a:	48 ef       	ldi	r20, 0xF8	; 248
     f8c:	51 e4       	ldi	r21, 0x41	; 65
     f8e:	0e 94 a3 24 	call	0x4946	; 0x4946 <__addsf3>
     f92:	0e 94 dd 25 	call	0x4bba	; 0x4bba <__fixunssfsi>
     f96:	36 2e       	mov	r3, r22

		r=13;
		//Berechnen des Stundenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(stunde*30.0+minute/2.0)*M_PI/180.0-M_PI/2.0;
			x= (uint8_t) i*cos(winkel) +Px;
     f98:	a3 01       	movw	r20, r6
     f9a:	92 01       	movw	r18, r4
     f9c:	c7 01       	movw	r24, r14
     f9e:	b6 01       	movw	r22, r12
     fa0:	0e 94 69 27 	call	0x4ed2	; 0x4ed2 <__mulsf3>
     fa4:	20 e0       	ldi	r18, 0x00	; 0
     fa6:	30 e0       	ldi	r19, 0x00	; 0
     fa8:	48 ef       	ldi	r20, 0xF8	; 248
     faa:	51 e4       	ldi	r21, 0x41	; 65
     fac:	0e 94 a3 24 	call	0x4946	; 0x4946 <__addsf3>
     fb0:	0e 94 dd 25 	call	0x4bba	; 0x4bba <__fixunssfsi>
			y= (uint8_t) i*sin(winkel) +Py;

			drawPixel(x,y,0);
     fb4:	20 e0       	ldi	r18, 0x00	; 0
     fb6:	43 2d       	mov	r20, r3
     fb8:	8e 81       	ldd	r24, Y+6	; 0x06
     fba:	9f 81       	ldd	r25, Y+7	; 0x07
     fbc:	0e 94 d6 03 	call	0x7ac	; 0x7ac <_ZN7Display9drawPixelEhhh>
     fc0:	0f 5f       	subi	r16, 0xFF	; 255
     fc2:	1f 4f       	sbci	r17, 0xFF	; 255
			drawPixel(x,y,0);
		}

		r=13;
		//Berechnen des Stundenzeigers
		for(uint8_t i=0;i<r;i++){
     fc4:	0d 30       	cpi	r16, 0x0D	; 13
     fc6:	11 05       	cpc	r17, r1
     fc8:	89 f6       	brne	.-94     	; 0xf6c <_ZN7Display6analogEhhhh+0x234>
     fca:	cd c0       	rjmp	.+410    	; 0x1166 <_ZN7Display6analogEhhhh+0x42e>
	}
	else{
		r=25;
		//Berechnen des Minutenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(minute*6.0)*M_PI/180.0-M_PI/2.0;
     fcc:	64 2f       	mov	r22, r20
     fce:	70 e0       	ldi	r23, 0x00	; 0
     fd0:	80 e0       	ldi	r24, 0x00	; 0
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	0e 94 0b 26 	call	0x4c16	; 0x4c16 <__floatsisf>
     fd8:	69 83       	std	Y+1, r22	; 0x01
     fda:	7a 83       	std	Y+2, r23	; 0x02
     fdc:	8b 83       	std	Y+3, r24	; 0x03
     fde:	9c 83       	std	Y+4, r25	; 0x04
     fe0:	20 e0       	ldi	r18, 0x00	; 0
     fe2:	30 e0       	ldi	r19, 0x00	; 0
     fe4:	40 ec       	ldi	r20, 0xC0	; 192
     fe6:	50 e4       	ldi	r21, 0x40	; 64
     fe8:	0e 94 69 27 	call	0x4ed2	; 0x4ed2 <__mulsf3>
     fec:	2b ed       	ldi	r18, 0xDB	; 219
     fee:	3f e0       	ldi	r19, 0x0F	; 15
     ff0:	49 e4       	ldi	r20, 0x49	; 73
     ff2:	50 e4       	ldi	r21, 0x40	; 64
     ff4:	0e 94 69 27 	call	0x4ed2	; 0x4ed2 <__mulsf3>
     ff8:	20 e0       	ldi	r18, 0x00	; 0
     ffa:	30 e0       	ldi	r19, 0x00	; 0
     ffc:	44 e3       	ldi	r20, 0x34	; 52
     ffe:	53 e4       	ldi	r21, 0x43	; 67
    1000:	0e 94 70 25 	call	0x4ae0	; 0x4ae0 <__divsf3>
    1004:	2b ed       	ldi	r18, 0xDB	; 219
    1006:	3f e0       	ldi	r19, 0x0F	; 15
    1008:	49 ec       	ldi	r20, 0xC9	; 201
    100a:	5f e3       	ldi	r21, 0x3F	; 63
    100c:	0e 94 a2 24 	call	0x4944	; 0x4944 <__subsf3>
    1010:	6b 01       	movw	r12, r22
    1012:	7c 01       	movw	r14, r24
			x=(uint8_t) i*cos(winkel)+Px;
    1014:	0e 94 6d 25 	call	0x4ada	; 0x4ada <cos>
    1018:	4b 01       	movw	r8, r22
    101a:	5c 01       	movw	r10, r24
			y=(uint8_t) i*sin(winkel)+Py;
    101c:	c7 01       	movw	r24, r14
    101e:	b6 01       	movw	r22, r12
    1020:	0e 94 cc 27 	call	0x4f98	; 0x4f98 <sin>
    1024:	2b 01       	movw	r4, r22
    1026:	3c 01       	movw	r6, r24
    1028:	00 e0       	ldi	r16, 0x00	; 0
    102a:	10 e0       	ldi	r17, 0x00	; 0
	else{
		r=25;
		//Berechnen des Minutenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(minute*6.0)*M_PI/180.0-M_PI/2.0;
			x=(uint8_t) i*cos(winkel)+Px;
    102c:	b8 01       	movw	r22, r16
    102e:	88 27       	eor	r24, r24
    1030:	77 fd       	sbrc	r23, 7
    1032:	80 95       	com	r24
    1034:	98 2f       	mov	r25, r24
    1036:	0e 94 0b 26 	call	0x4c16	; 0x4c16 <__floatsisf>
    103a:	6b 01       	movw	r12, r22
    103c:	7c 01       	movw	r14, r24
			y=(uint8_t) i*sin(winkel)+Py;
    103e:	a3 01       	movw	r20, r6
    1040:	92 01       	movw	r18, r4
    1042:	0e 94 69 27 	call	0x4ed2	; 0x4ed2 <__mulsf3>
    1046:	20 e0       	ldi	r18, 0x00	; 0
    1048:	30 e0       	ldi	r19, 0x00	; 0
    104a:	48 ef       	ldi	r20, 0xF8	; 248
    104c:	51 e4       	ldi	r21, 0x41	; 65
    104e:	0e 94 a3 24 	call	0x4946	; 0x4946 <__addsf3>
    1052:	0e 94 dd 25 	call	0x4bba	; 0x4bba <__fixunssfsi>
    1056:	36 2e       	mov	r3, r22
	else{
		r=25;
		//Berechnen des Minutenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(minute*6.0)*M_PI/180.0-M_PI/2.0;
			x=(uint8_t) i*cos(winkel)+Px;
    1058:	a5 01       	movw	r20, r10
    105a:	94 01       	movw	r18, r8
    105c:	c7 01       	movw	r24, r14
    105e:	b6 01       	movw	r22, r12
    1060:	0e 94 69 27 	call	0x4ed2	; 0x4ed2 <__mulsf3>
    1064:	20 e0       	ldi	r18, 0x00	; 0
    1066:	30 e0       	ldi	r19, 0x00	; 0
    1068:	48 ef       	ldi	r20, 0xF8	; 248
    106a:	51 e4       	ldi	r21, 0x41	; 65
    106c:	0e 94 a3 24 	call	0x4946	; 0x4946 <__addsf3>
    1070:	0e 94 dd 25 	call	0x4bba	; 0x4bba <__fixunssfsi>
			y=(uint8_t) i*sin(winkel)+Py;

			drawPixel(x,y,0);
    1074:	20 e0       	ldi	r18, 0x00	; 0
    1076:	43 2d       	mov	r20, r3
    1078:	8e 81       	ldd	r24, Y+6	; 0x06
    107a:	9f 81       	ldd	r25, Y+7	; 0x07
    107c:	0e 94 d6 03 	call	0x7ac	; 0x7ac <_ZN7Display9drawPixelEhhh>
    1080:	0f 5f       	subi	r16, 0xFF	; 255
    1082:	1f 4f       	sbci	r17, 0xFF	; 255
		}
	}
	else{
		r=25;
		//Berechnen des Minutenzeigers
		for(uint8_t i=0;i<r;i++){
    1084:	09 31       	cpi	r16, 0x19	; 25
    1086:	11 05       	cpc	r17, r1
    1088:	89 f6       	brne	.-94     	; 0x102c <_ZN7Display6analogEhhhh+0x2f4>
		}

		r=17;
		//Berechnen des Stundenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(stunde*30.0+minute/2.0)*M_PI/180.0-M_PI/2.0;
    108a:	ed 81       	ldd	r30, Y+5	; 0x05
    108c:	6e 2f       	mov	r22, r30
    108e:	70 e0       	ldi	r23, 0x00	; 0
    1090:	80 e0       	ldi	r24, 0x00	; 0
    1092:	90 e0       	ldi	r25, 0x00	; 0
    1094:	0e 94 0b 26 	call	0x4c16	; 0x4c16 <__floatsisf>
    1098:	20 e0       	ldi	r18, 0x00	; 0
    109a:	30 e0       	ldi	r19, 0x00	; 0
    109c:	40 ef       	ldi	r20, 0xF0	; 240
    109e:	51 e4       	ldi	r21, 0x41	; 65
    10a0:	0e 94 69 27 	call	0x4ed2	; 0x4ed2 <__mulsf3>
    10a4:	6b 01       	movw	r12, r22
    10a6:	7c 01       	movw	r14, r24
    10a8:	20 e0       	ldi	r18, 0x00	; 0
    10aa:	30 e0       	ldi	r19, 0x00	; 0
    10ac:	40 e0       	ldi	r20, 0x00	; 0
    10ae:	5f e3       	ldi	r21, 0x3F	; 63
    10b0:	69 81       	ldd	r22, Y+1	; 0x01
    10b2:	7a 81       	ldd	r23, Y+2	; 0x02
    10b4:	8b 81       	ldd	r24, Y+3	; 0x03
    10b6:	9c 81       	ldd	r25, Y+4	; 0x04
    10b8:	0e 94 69 27 	call	0x4ed2	; 0x4ed2 <__mulsf3>
    10bc:	9b 01       	movw	r18, r22
    10be:	ac 01       	movw	r20, r24
    10c0:	c7 01       	movw	r24, r14
    10c2:	b6 01       	movw	r22, r12
    10c4:	0e 94 a3 24 	call	0x4946	; 0x4946 <__addsf3>
    10c8:	2b ed       	ldi	r18, 0xDB	; 219
    10ca:	3f e0       	ldi	r19, 0x0F	; 15
    10cc:	49 e4       	ldi	r20, 0x49	; 73
    10ce:	50 e4       	ldi	r21, 0x40	; 64
    10d0:	0e 94 69 27 	call	0x4ed2	; 0x4ed2 <__mulsf3>
    10d4:	20 e0       	ldi	r18, 0x00	; 0
    10d6:	30 e0       	ldi	r19, 0x00	; 0
    10d8:	44 e3       	ldi	r20, 0x34	; 52
    10da:	53 e4       	ldi	r21, 0x43	; 67
    10dc:	0e 94 70 25 	call	0x4ae0	; 0x4ae0 <__divsf3>
    10e0:	2b ed       	ldi	r18, 0xDB	; 219
    10e2:	3f e0       	ldi	r19, 0x0F	; 15
    10e4:	49 ec       	ldi	r20, 0xC9	; 201
    10e6:	5f e3       	ldi	r21, 0x3F	; 63
    10e8:	0e 94 a2 24 	call	0x4944	; 0x4944 <__subsf3>
    10ec:	6b 01       	movw	r12, r22
    10ee:	7c 01       	movw	r14, r24
			x= (uint8_t) i*cos(winkel) +Px;
    10f0:	0e 94 6d 25 	call	0x4ada	; 0x4ada <cos>
    10f4:	2b 01       	movw	r4, r22
    10f6:	3c 01       	movw	r6, r24
			y= (uint8_t) i*sin(winkel) +Py;
    10f8:	c7 01       	movw	r24, r14
    10fa:	b6 01       	movw	r22, r12
    10fc:	0e 94 cc 27 	call	0x4f98	; 0x4f98 <sin>
    1100:	4b 01       	movw	r8, r22
    1102:	5c 01       	movw	r10, r24
    1104:	00 e0       	ldi	r16, 0x00	; 0
    1106:	10 e0       	ldi	r17, 0x00	; 0

		r=17;
		//Berechnen des Stundenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(stunde*30.0+minute/2.0)*M_PI/180.0-M_PI/2.0;
			x= (uint8_t) i*cos(winkel) +Px;
    1108:	b8 01       	movw	r22, r16
    110a:	88 27       	eor	r24, r24
    110c:	77 fd       	sbrc	r23, 7
    110e:	80 95       	com	r24
    1110:	98 2f       	mov	r25, r24
    1112:	0e 94 0b 26 	call	0x4c16	; 0x4c16 <__floatsisf>
    1116:	6b 01       	movw	r12, r22
    1118:	7c 01       	movw	r14, r24
			y= (uint8_t) i*sin(winkel) +Py;
    111a:	a5 01       	movw	r20, r10
    111c:	94 01       	movw	r18, r8
    111e:	0e 94 69 27 	call	0x4ed2	; 0x4ed2 <__mulsf3>
    1122:	20 e0       	ldi	r18, 0x00	; 0
    1124:	30 e0       	ldi	r19, 0x00	; 0
    1126:	48 ef       	ldi	r20, 0xF8	; 248
    1128:	51 e4       	ldi	r21, 0x41	; 65
    112a:	0e 94 a3 24 	call	0x4946	; 0x4946 <__addsf3>
    112e:	0e 94 dd 25 	call	0x4bba	; 0x4bba <__fixunssfsi>
    1132:	36 2e       	mov	r3, r22

		r=17;
		//Berechnen des Stundenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(stunde*30.0+minute/2.0)*M_PI/180.0-M_PI/2.0;
			x= (uint8_t) i*cos(winkel) +Px;
    1134:	a3 01       	movw	r20, r6
    1136:	92 01       	movw	r18, r4
    1138:	c7 01       	movw	r24, r14
    113a:	b6 01       	movw	r22, r12
    113c:	0e 94 69 27 	call	0x4ed2	; 0x4ed2 <__mulsf3>
    1140:	20 e0       	ldi	r18, 0x00	; 0
    1142:	30 e0       	ldi	r19, 0x00	; 0
    1144:	48 ef       	ldi	r20, 0xF8	; 248
    1146:	51 e4       	ldi	r21, 0x41	; 65
    1148:	0e 94 a3 24 	call	0x4946	; 0x4946 <__addsf3>
    114c:	0e 94 dd 25 	call	0x4bba	; 0x4bba <__fixunssfsi>
			y= (uint8_t) i*sin(winkel) +Py;

			drawPixel(x,y,0);
    1150:	20 e0       	ldi	r18, 0x00	; 0
    1152:	43 2d       	mov	r20, r3
    1154:	8e 81       	ldd	r24, Y+6	; 0x06
    1156:	9f 81       	ldd	r25, Y+7	; 0x07
    1158:	0e 94 d6 03 	call	0x7ac	; 0x7ac <_ZN7Display9drawPixelEhhh>
    115c:	0f 5f       	subi	r16, 0xFF	; 255
    115e:	1f 4f       	sbci	r17, 0xFF	; 255
			drawPixel(x,y,0);
		}

		r=17;
		//Berechnen des Stundenzeigers
		for(uint8_t i=0;i<r;i++){
    1160:	01 31       	cpi	r16, 0x11	; 17
    1162:	11 05       	cpc	r17, r1
    1164:	89 f6       	brne	.-94     	; 0x1108 <_ZN7Display6analogEhhhh+0x3d0>
		}
	}
	

	//Anzeige der Zahlen
	draw_ASCI('1',32-charsize,0);
    1166:	20 e0       	ldi	r18, 0x00	; 0
    1168:	4a e1       	ldi	r20, 0x1A	; 26
    116a:	61 e3       	ldi	r22, 0x31	; 49
    116c:	8e 81       	ldd	r24, Y+6	; 0x06
    116e:	9f 81       	ldd	r25, Y+7	; 0x07
    1170:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
	draw_ASCI('2',32,0);
    1174:	20 e0       	ldi	r18, 0x00	; 0
    1176:	40 e2       	ldi	r20, 0x20	; 32
    1178:	62 e3       	ldi	r22, 0x32	; 50
    117a:	8e 81       	ldd	r24, Y+6	; 0x06
    117c:	9f 81       	ldd	r25, Y+7	; 0x07
    117e:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
	draw_ASCI('3',64-charsize,4*charhighte-charhighte/2);
    1182:	2c e1       	ldi	r18, 0x1C	; 28
    1184:	4a e3       	ldi	r20, 0x3A	; 58
    1186:	63 e3       	ldi	r22, 0x33	; 51
    1188:	8e 81       	ldd	r24, Y+6	; 0x06
    118a:	9f 81       	ldd	r25, Y+7	; 0x07
    118c:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
	draw_ASCI('6',32-charsize/2,7*charhighte);
    1190:	28 e3       	ldi	r18, 0x38	; 56
    1192:	4d e1       	ldi	r20, 0x1D	; 29
    1194:	66 e3       	ldi	r22, 0x36	; 54
    1196:	8e 81       	ldd	r24, Y+6	; 0x06
    1198:	9f 81       	ldd	r25, Y+7	; 0x07
    119a:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
	draw_ASCI('9',0,4*charhighte-charhighte/2);
    119e:	2c e1       	ldi	r18, 0x1C	; 28
    11a0:	40 e0       	ldi	r20, 0x00	; 0
    11a2:	69 e3       	ldi	r22, 0x39	; 57
    11a4:	8e 81       	ldd	r24, Y+6	; 0x06
    11a6:	9f 81       	ldd	r25, Y+7	; 0x07
    11a8:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>

	//anzeige des Rings fuer die Restlichen Stunden Zahlen
	//1
	drawPixel(26*cos((30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
    11ac:	20 e0       	ldi	r18, 0x00	; 0
    11ae:	48 e0       	ldi	r20, 0x08	; 8
    11b0:	6c e2       	ldi	r22, 0x2C	; 44
    11b2:	8e 81       	ldd	r24, Y+6	; 0x06
    11b4:	9f 81       	ldd	r25, Y+7	; 0x07
    11b6:	0e 94 d6 03 	call	0x7ac	; 0x7ac <_ZN7Display9drawPixelEhhh>
	//2
	drawPixel(26*cos((2*30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((2*30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
    11ba:	20 e0       	ldi	r18, 0x00	; 0
    11bc:	42 e1       	ldi	r20, 0x12	; 18
    11be:	65 e3       	ldi	r22, 0x35	; 53
    11c0:	8e 81       	ldd	r24, Y+6	; 0x06
    11c2:	9f 81       	ldd	r25, Y+7	; 0x07
    11c4:	0e 94 d6 03 	call	0x7ac	; 0x7ac <_ZN7Display9drawPixelEhhh>
	//4
	drawPixel(26*cos((4*30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((4*30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
    11c8:	20 e0       	ldi	r18, 0x00	; 0
    11ca:	4c e2       	ldi	r20, 0x2C	; 44
    11cc:	65 e3       	ldi	r22, 0x35	; 53
    11ce:	8e 81       	ldd	r24, Y+6	; 0x06
    11d0:	9f 81       	ldd	r25, Y+7	; 0x07
    11d2:	0e 94 d6 03 	call	0x7ac	; 0x7ac <_ZN7Display9drawPixelEhhh>
	//5
	drawPixel(26*cos((5*30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((5*30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
    11d6:	20 e0       	ldi	r18, 0x00	; 0
    11d8:	45 e3       	ldi	r20, 0x35	; 53
    11da:	6b e2       	ldi	r22, 0x2B	; 43
    11dc:	8e 81       	ldd	r24, Y+6	; 0x06
    11de:	9f 81       	ldd	r25, Y+7	; 0x07
    11e0:	0e 94 d6 03 	call	0x7ac	; 0x7ac <_ZN7Display9drawPixelEhhh>
	//7
	drawPixel(26*cos((7*30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((7*30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
    11e4:	20 e0       	ldi	r18, 0x00	; 0
    11e6:	45 e3       	ldi	r20, 0x35	; 53
    11e8:	61 e1       	ldi	r22, 0x11	; 17
    11ea:	8e 81       	ldd	r24, Y+6	; 0x06
    11ec:	9f 81       	ldd	r25, Y+7	; 0x07
    11ee:	0e 94 d6 03 	call	0x7ac	; 0x7ac <_ZN7Display9drawPixelEhhh>
	//8
	drawPixel(26*cos((8*30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((8*30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
    11f2:	20 e0       	ldi	r18, 0x00	; 0
    11f4:	4c e2       	ldi	r20, 0x2C	; 44
    11f6:	68 e0       	ldi	r22, 0x08	; 8
    11f8:	8e 81       	ldd	r24, Y+6	; 0x06
    11fa:	9f 81       	ldd	r25, Y+7	; 0x07
    11fc:	0e 94 d6 03 	call	0x7ac	; 0x7ac <_ZN7Display9drawPixelEhhh>
	//10
	drawPixel(26*cos((10*30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((10*30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
    1200:	20 e0       	ldi	r18, 0x00	; 0
    1202:	41 e1       	ldi	r20, 0x11	; 17
    1204:	68 e0       	ldi	r22, 0x08	; 8
    1206:	8e 81       	ldd	r24, Y+6	; 0x06
    1208:	9f 81       	ldd	r25, Y+7	; 0x07
    120a:	0e 94 d6 03 	call	0x7ac	; 0x7ac <_ZN7Display9drawPixelEhhh>
	//11
	drawPixel(26*cos((11*30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((11*30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
    120e:	20 e0       	ldi	r18, 0x00	; 0
    1210:	48 e0       	ldi	r20, 0x08	; 8
    1212:	62 e1       	ldi	r22, 0x12	; 18
    1214:	8e 81       	ldd	r24, Y+6	; 0x06
    1216:	9f 81       	ldd	r25, Y+7	; 0x07
    1218:	0e 94 d6 03 	call	0x7ac	; 0x7ac <_ZN7Display9drawPixelEhhh>
}
    121c:	27 96       	adiw	r28, 0x07	; 7
    121e:	0f b6       	in	r0, 0x3f	; 63
    1220:	f8 94       	cli
    1222:	de bf       	out	0x3e, r29	; 62
    1224:	0f be       	out	0x3f, r0	; 63
    1226:	cd bf       	out	0x3d, r28	; 61
    1228:	df 91       	pop	r29
    122a:	cf 91       	pop	r28
    122c:	1f 91       	pop	r17
    122e:	0f 91       	pop	r16
    1230:	ff 90       	pop	r15
    1232:	ef 90       	pop	r14
    1234:	df 90       	pop	r13
    1236:	cf 90       	pop	r12
    1238:	bf 90       	pop	r11
    123a:	af 90       	pop	r10
    123c:	9f 90       	pop	r9
    123e:	8f 90       	pop	r8
    1240:	7f 90       	pop	r7
    1242:	6f 90       	pop	r6
    1244:	5f 90       	pop	r5
    1246:	4f 90       	pop	r4
    1248:	3f 90       	pop	r3
    124a:	2f 90       	pop	r2
    124c:	08 95       	ret

0000124e <_Z8ADC_Readh>:
#ifndef ADC_H_
#define ADC_H_

uint16_t ADC_Read( uint8_t channel )
{
	ADMUX = (ADMUX & ~(0x1F)) | (channel & 0x1F);
    124e:	ec e7       	ldi	r30, 0x7C	; 124
    1250:	f0 e0       	ldi	r31, 0x00	; 0
    1252:	90 81       	ld	r25, Z
    1254:	8f 71       	andi	r24, 0x1F	; 31
    1256:	90 7e       	andi	r25, 0xE0	; 224
    1258:	98 2b       	or	r25, r24
    125a:	90 83       	st	Z, r25
	ADCSRA |= (1<<ADSC);
    125c:	ea e7       	ldi	r30, 0x7A	; 122
    125e:	f0 e0       	ldi	r31, 0x00	; 0
    1260:	80 81       	ld	r24, Z
    1262:	80 64       	ori	r24, 0x40	; 64
    1264:	80 83       	st	Z, r24
	while (ADCSRA & (1<<ADSC) ) {
    1266:	80 81       	ld	r24, Z
    1268:	86 fd       	sbrc	r24, 6
    126a:	fd cf       	rjmp	.-6      	; 0x1266 <_Z8ADC_Readh+0x18>
	}
	return ADCW;
    126c:	80 91 78 00 	lds	r24, 0x0078
    1270:	90 91 79 00 	lds	r25, 0x0079
}
    1274:	08 95       	ret

00001276 <_Z14Batteriestatusv>:
	return (uint16_t)( sum / nsamples );
}

double batterie;
int8_t Batteriestatus(){
	uint16_t ADCwert=ADC_Read(0);
    1276:	80 e0       	ldi	r24, 0x00	; 0
    1278:	0e 94 27 09 	call	0x124e	; 0x124e <_Z8ADC_Readh>
	batterie = (ADCwert/1023.0)*3.2*SPANNUNGSTEILER;
    127c:	bc 01       	movw	r22, r24
    127e:	80 e0       	ldi	r24, 0x00	; 0
    1280:	90 e0       	ldi	r25, 0x00	; 0
    1282:	0e 94 09 26 	call	0x4c12	; 0x4c12 <__floatunsisf>
    1286:	20 e0       	ldi	r18, 0x00	; 0
    1288:	30 ec       	ldi	r19, 0xC0	; 192
    128a:	4f e7       	ldi	r20, 0x7F	; 127
    128c:	54 e4       	ldi	r21, 0x44	; 68
    128e:	0e 94 70 25 	call	0x4ae0	; 0x4ae0 <__divsf3>
    1292:	2d ec       	ldi	r18, 0xCD	; 205
    1294:	3c ec       	ldi	r19, 0xCC	; 204
    1296:	4c e4       	ldi	r20, 0x4C	; 76
    1298:	50 e4       	ldi	r21, 0x40	; 64
    129a:	0e 94 69 27 	call	0x4ed2	; 0x4ed2 <__mulsf3>
    129e:	2b e7       	ldi	r18, 0x7B	; 123
    12a0:	34 e1       	ldi	r19, 0x14	; 20
    12a2:	4e ef       	ldi	r20, 0xFE	; 254
    12a4:	5f e3       	ldi	r21, 0x3F	; 63
    12a6:	0e 94 69 27 	call	0x4ed2	; 0x4ed2 <__mulsf3>
    12aa:	60 93 0f 03 	sts	0x030F, r22
    12ae:	70 93 10 03 	sts	0x0310, r23
    12b2:	80 93 11 03 	sts	0x0311, r24
    12b6:	90 93 12 03 	sts	0x0312, r25
	return ((batterie-3.0)/(4.2-3.0)*100);
    12ba:	20 e0       	ldi	r18, 0x00	; 0
    12bc:	30 e0       	ldi	r19, 0x00	; 0
    12be:	40 e4       	ldi	r20, 0x40	; 64
    12c0:	50 e4       	ldi	r21, 0x40	; 64
    12c2:	0e 94 a2 24 	call	0x4944	; 0x4944 <__subsf3>
    12c6:	28 e9       	ldi	r18, 0x98	; 152
    12c8:	39 e9       	ldi	r19, 0x99	; 153
    12ca:	49 e9       	ldi	r20, 0x99	; 153
    12cc:	5f e3       	ldi	r21, 0x3F	; 63
    12ce:	0e 94 70 25 	call	0x4ae0	; 0x4ae0 <__divsf3>
    12d2:	20 e0       	ldi	r18, 0x00	; 0
    12d4:	30 e0       	ldi	r19, 0x00	; 0
    12d6:	48 ec       	ldi	r20, 0xC8	; 200
    12d8:	52 e4       	ldi	r21, 0x42	; 66
    12da:	0e 94 69 27 	call	0x4ed2	; 0x4ed2 <__mulsf3>
    12de:	0e 94 d8 25 	call	0x4bb0	; 0x4bb0 <__fixsfsi>
    12e2:	86 2f       	mov	r24, r22
}
    12e4:	08 95       	ret

000012e6 <_Z14willkommenpagev>:
#ifndef SEITEN_H_
#define SEITEN_H_

//Diese Funktionen schreiben nur in den Framebuffer und das Schreiben passiert in der Main ueber einen Interupt

void willkommenpage(){
    12e6:	cf 92       	push	r12
    12e8:	df 92       	push	r13
    12ea:	ef 92       	push	r14
    12ec:	ff 92       	push	r15
    12ee:	0f 93       	push	r16
    12f0:	1f 93       	push	r17
    12f2:	cf 93       	push	r28
    12f4:	df 93       	push	r29
    12f6:	cd b7       	in	r28, 0x3d	; 61
    12f8:	de b7       	in	r29, 0x3e	; 62
    12fa:	64 97       	sbiw	r28, 0x14	; 20
    12fc:	0f b6       	in	r0, 0x3f	; 63
    12fe:	f8 94       	cli
    1300:	de bf       	out	0x3e, r29	; 62
    1302:	0f be       	out	0x3f, r0	; 63
    1304:	cd bf       	out	0x3d, r28	; 61
	char buffer[20];
	uint8_t buffersize;
	oled.clearFrame();
    1306:	86 e2       	ldi	r24, 0x26	; 38
    1308:	93 e0       	ldi	r25, 0x03	; 3
    130a:	0e 94 ed 02 	call	0x5da	; 0x5da <_ZN7Display10clearFrameEv>
	buffersize=sprintf(buffer,"Fahradcomputer");
    130e:	8f e0       	ldi	r24, 0x0F	; 15
    1310:	e0 e0       	ldi	r30, 0x00	; 0
    1312:	f1 e0       	ldi	r31, 0x01	; 1
    1314:	8e 01       	movw	r16, r28
    1316:	0f 5f       	subi	r16, 0xFF	; 255
    1318:	1f 4f       	sbci	r17, 0xFF	; 255
    131a:	d8 01       	movw	r26, r16
    131c:	01 90       	ld	r0, Z+
    131e:	0d 92       	st	X+, r0
    1320:	8a 95       	dec	r24
    1322:	e1 f7       	brne	.-8      	; 0x131c <_Z14willkommenpagev+0x36>
    1324:	c0 2e       	mov	r12, r16
    1326:	d1 2e       	mov	r13, r17
    1328:	78 01       	movw	r14, r16
    132a:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0; i < buffersize;i++){
		oled.draw_ASCI(buffer[i],i*charsize,0);
    132c:	f7 01       	movw	r30, r14
    132e:	61 91       	ld	r22, Z+
    1330:	7f 01       	movw	r14, r30
    1332:	20 e0       	ldi	r18, 0x00	; 0
    1334:	41 2f       	mov	r20, r17
    1336:	86 e2       	ldi	r24, 0x26	; 38
    1338:	93 e0       	ldi	r25, 0x03	; 3
    133a:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    133e:	1a 5f       	subi	r17, 0xFA	; 250
void willkommenpage(){
	char buffer[20];
	uint8_t buffersize;
	oled.clearFrame();
	buffersize=sprintf(buffer,"Fahradcomputer");
	for(uint8_t i=0; i < buffersize;i++){
    1340:	14 35       	cpi	r17, 0x54	; 84
    1342:	a1 f7       	brne	.-24     	; 0x132c <_Z14willkommenpagev+0x46>
		oled.draw_ASCI(buffer[i],i*charsize,0);
	}
	buffersize=sprintf(buffer,"--------------");
    1344:	8f e0       	ldi	r24, 0x0F	; 15
    1346:	ef e0       	ldi	r30, 0x0F	; 15
    1348:	f1 e0       	ldi	r31, 0x01	; 1
    134a:	de 01       	movw	r26, r28
    134c:	11 96       	adiw	r26, 0x01	; 1
    134e:	01 90       	ld	r0, Z+
    1350:	0d 92       	st	X+, r0
    1352:	8a 95       	dec	r24
    1354:	e1 f7       	brne	.-8      	; 0x134e <_Z14willkommenpagev+0x68>
    1356:	ec 2c       	mov	r14, r12
    1358:	fd 2c       	mov	r15, r13
    135a:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0; i < buffersize;i++){
		oled.draw_ASCI(buffer[i],i*charsize,8);
    135c:	f7 01       	movw	r30, r14
    135e:	61 91       	ld	r22, Z+
    1360:	7f 01       	movw	r14, r30
    1362:	28 e0       	ldi	r18, 0x08	; 8
    1364:	41 2f       	mov	r20, r17
    1366:	86 e2       	ldi	r24, 0x26	; 38
    1368:	93 e0       	ldi	r25, 0x03	; 3
    136a:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    136e:	1a 5f       	subi	r17, 0xFA	; 250
	buffersize=sprintf(buffer,"Fahradcomputer");
	for(uint8_t i=0; i < buffersize;i++){
		oled.draw_ASCI(buffer[i],i*charsize,0);
	}
	buffersize=sprintf(buffer,"--------------");
	for(uint8_t i=0; i < buffersize;i++){
    1370:	14 35       	cpi	r17, 0x54	; 84
    1372:	a1 f7       	brne	.-24     	; 0x135c <_Z14willkommenpagev+0x76>
		oled.draw_ASCI(buffer[i],i*charsize,8);
	}
	buffersize=sprintf(buffer,"Version: %.2f",VERSIONSNUMMER);
    1374:	8f e3       	ldi	r24, 0x3F	; 63
    1376:	8f 93       	push	r24
    1378:	84 eb       	ldi	r24, 0xB4	; 180
    137a:	8f 93       	push	r24
    137c:	8a e7       	ldi	r24, 0x7A	; 122
    137e:	8f 93       	push	r24
    1380:	81 ee       	ldi	r24, 0xE1	; 225
    1382:	8f 93       	push	r24
    1384:	8e e1       	ldi	r24, 0x1E	; 30
    1386:	91 e0       	ldi	r25, 0x01	; 1
    1388:	9f 93       	push	r25
    138a:	8f 93       	push	r24
    138c:	ce 01       	movw	r24, r28
    138e:	01 96       	adiw	r24, 0x01	; 1
    1390:	9f 93       	push	r25
    1392:	8f 93       	push	r24
    1394:	0e 94 ec 2c 	call	0x59d8	; 0x59d8 <sprintf>
	for(uint8_t i=0; i < buffersize;i++){
    1398:	0f b6       	in	r0, 0x3f	; 63
    139a:	f8 94       	cli
    139c:	de bf       	out	0x3e, r29	; 62
    139e:	0f be       	out	0x3f, r0	; 63
    13a0:	cd bf       	out	0x3d, r28	; 61
    13a2:	88 23       	and	r24, r24
    13a4:	d1 f0       	breq	.+52     	; 0x13da <_Z14willkommenpagev+0xf4>
    13a6:	81 50       	subi	r24, 0x01	; 1
    13a8:	68 94       	set
    13aa:	ee 24       	eor	r14, r14
    13ac:	e1 f8       	bld	r14, 1
    13ae:	f1 2c       	mov	r15, r1
    13b0:	ec 0e       	add	r14, r28
    13b2:	fd 1e       	adc	r15, r29
    13b4:	e8 0e       	add	r14, r24
    13b6:	f1 1c       	adc	r15, r1
    13b8:	0c 2d       	mov	r16, r12
    13ba:	1d 2d       	mov	r17, r13
    13bc:	d1 2c       	mov	r13, r1
		oled.draw_ASCI(buffer[i],i*charsize,32);
    13be:	f8 01       	movw	r30, r16
    13c0:	61 91       	ld	r22, Z+
    13c2:	8f 01       	movw	r16, r30
    13c4:	20 e2       	ldi	r18, 0x20	; 32
    13c6:	4d 2d       	mov	r20, r13
    13c8:	86 e2       	ldi	r24, 0x26	; 38
    13ca:	93 e0       	ldi	r25, 0x03	; 3
    13cc:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    13d0:	f6 e0       	ldi	r31, 0x06	; 6
    13d2:	df 0e       	add	r13, r31
	buffersize=sprintf(buffer,"--------------");
	for(uint8_t i=0; i < buffersize;i++){
		oled.draw_ASCI(buffer[i],i*charsize,8);
	}
	buffersize=sprintf(buffer,"Version: %.2f",VERSIONSNUMMER);
	for(uint8_t i=0; i < buffersize;i++){
    13d4:	0e 15       	cp	r16, r14
    13d6:	1f 05       	cpc	r17, r15
    13d8:	91 f7       	brne	.-28     	; 0x13be <_Z14willkommenpagev+0xd8>
		oled.draw_ASCI(buffer[i],i*charsize,32);

	}
	oled.sendFrame();
    13da:	86 e2       	ldi	r24, 0x26	; 38
    13dc:	93 e0       	ldi	r25, 0x03	; 3
    13de:	0e 94 93 03 	call	0x726	; 0x726 <_ZN7Display9sendFrameEv>
	oled.clearFrame();
    13e2:	86 e2       	ldi	r24, 0x26	; 38
    13e4:	93 e0       	ldi	r25, 0x03	; 3
    13e6:	0e 94 ed 02 	call	0x5da	; 0x5da <_ZN7Display10clearFrameEv>
    13ea:	85 e0       	ldi	r24, 0x05	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    13ec:	2f e7       	ldi	r18, 0x7F	; 127
    13ee:	38 e3       	ldi	r19, 0x38	; 56
    13f0:	91 e0       	ldi	r25, 0x01	; 1
    13f2:	21 50       	subi	r18, 0x01	; 1
    13f4:	30 40       	sbci	r19, 0x00	; 0
    13f6:	90 40       	sbci	r25, 0x00	; 0
    13f8:	e1 f7       	brne	.-8      	; 0x13f2 <_Z14willkommenpagev+0x10c>
    13fa:	00 c0       	rjmp	.+0      	; 0x13fc <_Z14willkommenpagev+0x116>
    13fc:	00 00       	nop
    13fe:	ef e7       	ldi	r30, 0x7F	; 127
    1400:	f8 e3       	ldi	r31, 0x38	; 56
    1402:	21 e0       	ldi	r18, 0x01	; 1
    1404:	e1 50       	subi	r30, 0x01	; 1
    1406:	f0 40       	sbci	r31, 0x00	; 0
    1408:	20 40       	sbci	r18, 0x00	; 0
    140a:	e1 f7       	brne	.-8      	; 0x1404 <_Z14willkommenpagev+0x11e>
    140c:	00 c0       	rjmp	.+0      	; 0x140e <_Z14willkommenpagev+0x128>
    140e:	00 00       	nop
    1410:	81 50       	subi	r24, 0x01	; 1
	for (uint8_t i=0;i<5;i++)
    1412:	61 f7       	brne	.-40     	; 0x13ec <_Z14willkommenpagev+0x106>
	{
		_delay_ms(50);
		_delay_ms(50);
	}
}
    1414:	64 96       	adiw	r28, 0x14	; 20
    1416:	0f b6       	in	r0, 0x3f	; 63
    1418:	f8 94       	cli
    141a:	de bf       	out	0x3e, r29	; 62
    141c:	0f be       	out	0x3f, r0	; 63
    141e:	cd bf       	out	0x3d, r28	; 61
    1420:	df 91       	pop	r29
    1422:	cf 91       	pop	r28
    1424:	1f 91       	pop	r17
    1426:	0f 91       	pop	r16
    1428:	ff 90       	pop	r15
    142a:	ef 90       	pop	r14
    142c:	df 90       	pop	r13
    142e:	cf 90       	pop	r12
    1430:	08 95       	ret

00001432 <_Z6headerh>:

void header(uint8_t page){
    1432:	ef 92       	push	r14
    1434:	ff 92       	push	r15
    1436:	0f 93       	push	r16
    1438:	1f 93       	push	r17
    143a:	cf 93       	push	r28
    143c:	df 93       	push	r29
    143e:	cd b7       	in	r28, 0x3d	; 61
    1440:	de b7       	in	r29, 0x3e	; 62
    1442:	64 97       	sbiw	r28, 0x14	; 20
    1444:	0f b6       	in	r0, 0x3f	; 63
    1446:	f8 94       	cli
    1448:	de bf       	out	0x3e, r29	; 62
    144a:	0f be       	out	0x3f, r0	; 63
    144c:	cd bf       	out	0x3d, r28	; 61
	char buffer[20];
	uint8_t buffersize=0;;
	switch (page) {
    144e:	81 11       	cpse	r24, r1
    1450:	4d c0       	rjmp	.+154    	; 0x14ec <_Z6headerh+0xba>
    1452:	0f 2e       	mov	r0, r31
    1454:	f7 e5       	ldi	r31, 0x57	; 87
    1456:	ef 2e       	mov	r14, r31
    1458:	f7 e0       	ldi	r31, 0x07	; 7
    145a:	ff 2e       	mov	r15, r31
    145c:	f0 2d       	mov	r31, r0
    145e:	10 e0       	ldi	r17, 0x00	; 0
		case 0:	//standard Header fuer fast alle Pages
			for(uint8_t i=0;i<8;i++){
				oled.draw_ASCI(rtc.msg_uhr[i],i*charsize,0);
    1460:	f7 01       	movw	r30, r14
    1462:	61 91       	ld	r22, Z+
    1464:	7f 01       	movw	r14, r30
    1466:	20 e0       	ldi	r18, 0x00	; 0
    1468:	41 2f       	mov	r20, r17
    146a:	86 e2       	ldi	r24, 0x26	; 38
    146c:	93 e0       	ldi	r25, 0x03	; 3
    146e:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    1472:	1a 5f       	subi	r17, 0xFA	; 250
void header(uint8_t page){
	char buffer[20];
	uint8_t buffersize=0;;
	switch (page) {
		case 0:	//standard Header fuer fast alle Pages
			for(uint8_t i=0;i<8;i++){
    1474:	10 33       	cpi	r17, 0x30	; 48
    1476:	a1 f7       	brne	.-24     	; 0x1460 <_Z6headerh+0x2e>
				oled.draw_ASCI(rtc.msg_uhr[i],i*charsize,0);
			}
			buffersize=sprintf(buffer,"Bat: %i%%",Batteriestatus());
    1478:	0e 94 3b 09 	call	0x1276	; 0x1276 <_Z14Batteriestatusv>
    147c:	28 2f       	mov	r18, r24
    147e:	33 27       	eor	r19, r19
    1480:	27 fd       	sbrc	r18, 7
    1482:	30 95       	com	r19
    1484:	3f 93       	push	r19
    1486:	8f 93       	push	r24
    1488:	8c e2       	ldi	r24, 0x2C	; 44
    148a:	91 e0       	ldi	r25, 0x01	; 1
    148c:	9f 93       	push	r25
    148e:	8f 93       	push	r24
    1490:	ce 01       	movw	r24, r28
    1492:	01 96       	adiw	r24, 0x01	; 1
    1494:	9f 93       	push	r25
    1496:	8f 93       	push	r24
    1498:	0e 94 ec 2c 	call	0x59d8	; 0x59d8 <sprintf>
			for(uint8_t i=((SSD1306_WIDTH/charsize)-buffersize);i<(SSD1306_WIDTH/charsize);i++){
    149c:	25 e1       	ldi	r18, 0x15	; 21
    149e:	f2 2e       	mov	r15, r18
    14a0:	f8 1a       	sub	r15, r24
    14a2:	0f 90       	pop	r0
    14a4:	0f 90       	pop	r0
    14a6:	0f 90       	pop	r0
    14a8:	0f 90       	pop	r0
    14aa:	0f 90       	pop	r0
    14ac:	0f 90       	pop	r0
    14ae:	f4 e1       	ldi	r31, 0x14	; 20
    14b0:	ff 15       	cp	r31, r15
    14b2:	e0 f0       	brcs	.+56     	; 0x14ec <_Z6headerh+0xba>
    14b4:	ef 2c       	mov	r14, r15
    14b6:	ee 0c       	add	r14, r14
    14b8:	ef 0c       	add	r14, r15
    14ba:	ee 0c       	add	r14, r14
				oled.draw_ASCI(buffer[i-((SSD1306_WIDTH/charsize)-buffersize)],i*charsize,0);
    14bc:	8c 01       	movw	r16, r24
    14be:	11 27       	eor	r17, r17
    14c0:	e1 e0       	ldi	r30, 0x01	; 1
    14c2:	f0 e0       	ldi	r31, 0x00	; 0
    14c4:	ec 0f       	add	r30, r28
    14c6:	fd 1f       	adc	r31, r29
    14c8:	ef 0d       	add	r30, r15
    14ca:	f1 1d       	adc	r31, r1
    14cc:	e0 0f       	add	r30, r16
    14ce:	f1 1f       	adc	r31, r17
    14d0:	75 97       	sbiw	r30, 0x15	; 21
    14d2:	20 e0       	ldi	r18, 0x00	; 0
    14d4:	4e 2d       	mov	r20, r14
    14d6:	60 81       	ld	r22, Z
    14d8:	86 e2       	ldi	r24, 0x26	; 38
    14da:	93 e0       	ldi	r25, 0x03	; 3
    14dc:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
		case 0:	//standard Header fuer fast alle Pages
			for(uint8_t i=0;i<8;i++){
				oled.draw_ASCI(rtc.msg_uhr[i],i*charsize,0);
			}
			buffersize=sprintf(buffer,"Bat: %i%%",Batteriestatus());
			for(uint8_t i=((SSD1306_WIDTH/charsize)-buffersize);i<(SSD1306_WIDTH/charsize);i++){
    14e0:	f3 94       	inc	r15
    14e2:	26 e0       	ldi	r18, 0x06	; 6
    14e4:	e2 0e       	add	r14, r18
    14e6:	85 e1       	ldi	r24, 0x15	; 21
    14e8:	f8 12       	cpse	r15, r24
    14ea:	ea cf       	rjmp	.-44     	; 0x14c0 <_Z6headerh+0x8e>
			}
			break;
		default:
			break;
	}
}
    14ec:	64 96       	adiw	r28, 0x14	; 20
    14ee:	0f b6       	in	r0, 0x3f	; 63
    14f0:	f8 94       	cli
    14f2:	de bf       	out	0x3e, r29	; 62
    14f4:	0f be       	out	0x3f, r0	; 63
    14f6:	cd bf       	out	0x3d, r28	; 61
    14f8:	df 91       	pop	r29
    14fa:	cf 91       	pop	r28
    14fc:	1f 91       	pop	r17
    14fe:	0f 91       	pop	r16
    1500:	ff 90       	pop	r15
    1502:	ef 90       	pop	r14
    1504:	08 95       	ret

00001506 <_Z6bottomh>:

void bottom(uint8_t page){
    1506:	1f 93       	push	r17
    1508:	cf 93       	push	r28
    150a:	df 93       	push	r29
	switch (page) {
    150c:	81 11       	cpse	r24, r1
    150e:	0d c0       	rjmp	.+26     	; 0x152a <_Z6bottomh+0x24>
    1510:	cf e5       	ldi	r28, 0x5F	; 95
    1512:	d7 e0       	ldi	r29, 0x07	; 7
    1514:	10 e5       	ldi	r17, 0x50	; 80
		case 0:	//standard Header fuer fast alle Pages
			for(uint8_t i=0;i<8;i++){
				oled.draw_ASCI(rtc.msg_dat[i],i*charsize+(SSD1306_WIDTH-bitsderrtc*charsize),7*charhighte);
    1516:	69 91       	ld	r22, Y+
    1518:	28 e3       	ldi	r18, 0x38	; 56
    151a:	41 2f       	mov	r20, r17
    151c:	86 e2       	ldi	r24, 0x26	; 38
    151e:	93 e0       	ldi	r25, 0x03	; 3
    1520:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    1524:	1a 5f       	subi	r17, 0xFA	; 250
}

void bottom(uint8_t page){
	switch (page) {
		case 0:	//standard Header fuer fast alle Pages
			for(uint8_t i=0;i<8;i++){
    1526:	10 38       	cpi	r17, 0x80	; 128
    1528:	b1 f7       	brne	.-20     	; 0x1516 <_Z6bottomh+0x10>
			}
			break;
		default:
			break;
		}
}
    152a:	df 91       	pop	r29
    152c:	cf 91       	pop	r28
    152e:	1f 91       	pop	r17
    1530:	08 95       	ret

00001532 <_Z16anzeige_richtungf>:

void anzeige_richtung(float winkel){
    1532:	cf 92       	push	r12
    1534:	df 92       	push	r13
    1536:	ef 92       	push	r14
    1538:	ff 92       	push	r15
    153a:	6b 01       	movw	r12, r22
    153c:	7c 01       	movw	r14, r24
	//finden der Ziffer fuer die Anzeige
	if ((winkel<45/2) || (winkel >= 360-45/2))
    153e:	20 e0       	ldi	r18, 0x00	; 0
    1540:	30 e0       	ldi	r19, 0x00	; 0
    1542:	40 eb       	ldi	r20, 0xB0	; 176
    1544:	51 e4       	ldi	r21, 0x41	; 65
    1546:	0e 94 69 25 	call	0x4ad2	; 0x4ad2 <__cmpsf2>
    154a:	88 23       	and	r24, r24
    154c:	54 f0       	brlt	.+20     	; 0x1562 <_Z16anzeige_richtungf+0x30>
    154e:	20 e0       	ldi	r18, 0x00	; 0
    1550:	30 e0       	ldi	r19, 0x00	; 0
    1552:	49 ea       	ldi	r20, 0xA9	; 169
    1554:	53 e4       	ldi	r21, 0x43	; 67
    1556:	c7 01       	movw	r24, r14
    1558:	b6 01       	movw	r22, r12
    155a:	0e 94 19 27 	call	0x4e32	; 0x4e32 <__gesf2>
    155e:	88 23       	and	r24, r24
    1560:	44 f0       	brlt	.+16     	; 0x1572 <_Z16anzeige_richtungf+0x40>
	{
		oled.draw_ASCI('N',80,3.5*charhighte);
    1562:	2c e1       	ldi	r18, 0x1C	; 28
    1564:	40 e5       	ldi	r20, 0x50	; 80
    1566:	6e e4       	ldi	r22, 0x4E	; 78
    1568:	86 e2       	ldi	r24, 0x26	; 38
    156a:	93 e0       	ldi	r25, 0x03	; 3
    156c:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    1570:	99 c0       	rjmp	.+306    	; 0x16a4 <_Z16anzeige_richtungf+0x172>
	}
	else if (winkel<90-45/2)
    1572:	20 e0       	ldi	r18, 0x00	; 0
    1574:	30 e0       	ldi	r19, 0x00	; 0
    1576:	48 e8       	ldi	r20, 0x88	; 136
    1578:	52 e4       	ldi	r21, 0x42	; 66
    157a:	c7 01       	movw	r24, r14
    157c:	b6 01       	movw	r22, r12
    157e:	0e 94 69 25 	call	0x4ad2	; 0x4ad2 <__cmpsf2>
    1582:	88 23       	and	r24, r24
    1584:	7c f4       	brge	.+30     	; 0x15a4 <_Z16anzeige_richtungf+0x72>
	{
		oled.draw_ASCI('N',80-charsize/2,3.5*charhighte);
    1586:	2c e1       	ldi	r18, 0x1C	; 28
    1588:	4d e4       	ldi	r20, 0x4D	; 77
    158a:	6e e4       	ldi	r22, 0x4E	; 78
    158c:	86 e2       	ldi	r24, 0x26	; 38
    158e:	93 e0       	ldi	r25, 0x03	; 3
    1590:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
		oled.draw_ASCI('O',80+charsize/2,3.5*charhighte);
    1594:	2c e1       	ldi	r18, 0x1C	; 28
    1596:	43 e5       	ldi	r20, 0x53	; 83
    1598:	6f e4       	ldi	r22, 0x4F	; 79
    159a:	86 e2       	ldi	r24, 0x26	; 38
    159c:	93 e0       	ldi	r25, 0x03	; 3
    159e:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    15a2:	80 c0       	rjmp	.+256    	; 0x16a4 <_Z16anzeige_richtungf+0x172>
	}
	else if (winkel<135-45/2)
    15a4:	20 e0       	ldi	r18, 0x00	; 0
    15a6:	30 e0       	ldi	r19, 0x00	; 0
    15a8:	42 ee       	ldi	r20, 0xE2	; 226
    15aa:	52 e4       	ldi	r21, 0x42	; 66
    15ac:	c7 01       	movw	r24, r14
    15ae:	b6 01       	movw	r22, r12
    15b0:	0e 94 69 25 	call	0x4ad2	; 0x4ad2 <__cmpsf2>
    15b4:	88 23       	and	r24, r24
    15b6:	44 f4       	brge	.+16     	; 0x15c8 <_Z16anzeige_richtungf+0x96>
	{
		oled.draw_ASCI('O',80,3.5*charhighte);
    15b8:	2c e1       	ldi	r18, 0x1C	; 28
    15ba:	40 e5       	ldi	r20, 0x50	; 80
    15bc:	6f e4       	ldi	r22, 0x4F	; 79
    15be:	86 e2       	ldi	r24, 0x26	; 38
    15c0:	93 e0       	ldi	r25, 0x03	; 3
    15c2:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    15c6:	6e c0       	rjmp	.+220    	; 0x16a4 <_Z16anzeige_richtungf+0x172>
	}
	else if (winkel<180-45/2)
    15c8:	20 e0       	ldi	r18, 0x00	; 0
    15ca:	30 e0       	ldi	r19, 0x00	; 0
    15cc:	4e e1       	ldi	r20, 0x1E	; 30
    15ce:	53 e4       	ldi	r21, 0x43	; 67
    15d0:	c7 01       	movw	r24, r14
    15d2:	b6 01       	movw	r22, r12
    15d4:	0e 94 69 25 	call	0x4ad2	; 0x4ad2 <__cmpsf2>
    15d8:	88 23       	and	r24, r24
    15da:	7c f4       	brge	.+30     	; 0x15fa <_Z16anzeige_richtungf+0xc8>
	{
		oled.draw_ASCI('S',80-charsize/2,3.5*charhighte);
    15dc:	2c e1       	ldi	r18, 0x1C	; 28
    15de:	4d e4       	ldi	r20, 0x4D	; 77
    15e0:	63 e5       	ldi	r22, 0x53	; 83
    15e2:	86 e2       	ldi	r24, 0x26	; 38
    15e4:	93 e0       	ldi	r25, 0x03	; 3
    15e6:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
		oled.draw_ASCI('O',80+charsize/2,3.5*charhighte);
    15ea:	2c e1       	ldi	r18, 0x1C	; 28
    15ec:	43 e5       	ldi	r20, 0x53	; 83
    15ee:	6f e4       	ldi	r22, 0x4F	; 79
    15f0:	86 e2       	ldi	r24, 0x26	; 38
    15f2:	93 e0       	ldi	r25, 0x03	; 3
    15f4:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    15f8:	55 c0       	rjmp	.+170    	; 0x16a4 <_Z16anzeige_richtungf+0x172>
	}
	else if (winkel<225-45/2)
    15fa:	20 e0       	ldi	r18, 0x00	; 0
    15fc:	30 e0       	ldi	r19, 0x00	; 0
    15fe:	4b e4       	ldi	r20, 0x4B	; 75
    1600:	53 e4       	ldi	r21, 0x43	; 67
    1602:	c7 01       	movw	r24, r14
    1604:	b6 01       	movw	r22, r12
    1606:	0e 94 69 25 	call	0x4ad2	; 0x4ad2 <__cmpsf2>
    160a:	88 23       	and	r24, r24
    160c:	44 f4       	brge	.+16     	; 0x161e <_Z16anzeige_richtungf+0xec>
	{
		oled.draw_ASCI('S',80,3.5*charhighte);
    160e:	2c e1       	ldi	r18, 0x1C	; 28
    1610:	40 e5       	ldi	r20, 0x50	; 80
    1612:	63 e5       	ldi	r22, 0x53	; 83
    1614:	86 e2       	ldi	r24, 0x26	; 38
    1616:	93 e0       	ldi	r25, 0x03	; 3
    1618:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    161c:	43 c0       	rjmp	.+134    	; 0x16a4 <_Z16anzeige_richtungf+0x172>
	}
	else if (winkel<270-45/2)
    161e:	20 e0       	ldi	r18, 0x00	; 0
    1620:	30 e0       	ldi	r19, 0x00	; 0
    1622:	48 e7       	ldi	r20, 0x78	; 120
    1624:	53 e4       	ldi	r21, 0x43	; 67
    1626:	c7 01       	movw	r24, r14
    1628:	b6 01       	movw	r22, r12
    162a:	0e 94 69 25 	call	0x4ad2	; 0x4ad2 <__cmpsf2>
    162e:	88 23       	and	r24, r24
    1630:	7c f4       	brge	.+30     	; 0x1650 <_Z16anzeige_richtungf+0x11e>
	{
		oled.draw_ASCI('S',80-charsize/2,3.5*charhighte);
    1632:	2c e1       	ldi	r18, 0x1C	; 28
    1634:	4d e4       	ldi	r20, 0x4D	; 77
    1636:	63 e5       	ldi	r22, 0x53	; 83
    1638:	86 e2       	ldi	r24, 0x26	; 38
    163a:	93 e0       	ldi	r25, 0x03	; 3
    163c:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
		oled.draw_ASCI('W',80+charsize/2,3.5*charhighte);
    1640:	2c e1       	ldi	r18, 0x1C	; 28
    1642:	43 e5       	ldi	r20, 0x53	; 83
    1644:	67 e5       	ldi	r22, 0x57	; 87
    1646:	86 e2       	ldi	r24, 0x26	; 38
    1648:	93 e0       	ldi	r25, 0x03	; 3
    164a:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    164e:	2a c0       	rjmp	.+84     	; 0x16a4 <_Z16anzeige_richtungf+0x172>
	}
	else if (winkel<315-45/2)
    1650:	20 e0       	ldi	r18, 0x00	; 0
    1652:	30 e8       	ldi	r19, 0x80	; 128
    1654:	42 e9       	ldi	r20, 0x92	; 146
    1656:	53 e4       	ldi	r21, 0x43	; 67
    1658:	c7 01       	movw	r24, r14
    165a:	b6 01       	movw	r22, r12
    165c:	0e 94 69 25 	call	0x4ad2	; 0x4ad2 <__cmpsf2>
    1660:	88 23       	and	r24, r24
    1662:	44 f4       	brge	.+16     	; 0x1674 <_Z16anzeige_richtungf+0x142>
	{
		oled.draw_ASCI('W',80,3.5*charhighte);
    1664:	2c e1       	ldi	r18, 0x1C	; 28
    1666:	40 e5       	ldi	r20, 0x50	; 80
    1668:	67 e5       	ldi	r22, 0x57	; 87
    166a:	86 e2       	ldi	r24, 0x26	; 38
    166c:	93 e0       	ldi	r25, 0x03	; 3
    166e:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    1672:	18 c0       	rjmp	.+48     	; 0x16a4 <_Z16anzeige_richtungf+0x172>
	}
	else if (winkel<360-45/2)
    1674:	20 e0       	ldi	r18, 0x00	; 0
    1676:	30 e0       	ldi	r19, 0x00	; 0
    1678:	49 ea       	ldi	r20, 0xA9	; 169
    167a:	53 e4       	ldi	r21, 0x43	; 67
    167c:	c7 01       	movw	r24, r14
    167e:	b6 01       	movw	r22, r12
    1680:	0e 94 69 25 	call	0x4ad2	; 0x4ad2 <__cmpsf2>
    1684:	88 23       	and	r24, r24
    1686:	74 f4       	brge	.+28     	; 0x16a4 <_Z16anzeige_richtungf+0x172>
	{
		oled.draw_ASCI('N',80-charsize/2,3.5*charhighte);
    1688:	2c e1       	ldi	r18, 0x1C	; 28
    168a:	4d e4       	ldi	r20, 0x4D	; 77
    168c:	6e e4       	ldi	r22, 0x4E	; 78
    168e:	86 e2       	ldi	r24, 0x26	; 38
    1690:	93 e0       	ldi	r25, 0x03	; 3
    1692:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
		oled.draw_ASCI('W',80+charsize/2,3.5*charhighte);
    1696:	2c e1       	ldi	r18, 0x1C	; 28
    1698:	43 e5       	ldi	r20, 0x53	; 83
    169a:	67 e5       	ldi	r22, 0x57	; 87
    169c:	86 e2       	ldi	r24, 0x26	; 38
    169e:	93 e0       	ldi	r25, 0x03	; 3
    16a0:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
	}
}
    16a4:	ff 90       	pop	r15
    16a6:	ef 90       	pop	r14
    16a8:	df 90       	pop	r13
    16aa:	cf 90       	pop	r12
    16ac:	08 95       	ret

000016ae <_Z13anzeige_nadelhhf>:

void anzeige_nadel(uint8_t x, uint8_t y, float angle){
    16ae:	af 92       	push	r10
    16b0:	bf 92       	push	r11
    16b2:	cf 92       	push	r12
    16b4:	df 92       	push	r13
    16b6:	ef 92       	push	r14
    16b8:	ff 92       	push	r15
    16ba:	0f 93       	push	r16
    16bc:	1f 93       	push	r17
	//fixed parameters for drawing the arrow
	oled.draw_triangle(x,y,20,70,angle);
    16be:	59 01       	movw	r10, r18
    16c0:	6a 01       	movw	r12, r20
    16c2:	e1 2c       	mov	r14, r1
    16c4:	f1 2c       	mov	r15, r1
    16c6:	0c e8       	ldi	r16, 0x8C	; 140
    16c8:	12 e4       	ldi	r17, 0x42	; 66
    16ca:	24 e1       	ldi	r18, 0x14	; 20
    16cc:	46 2f       	mov	r20, r22
    16ce:	68 2f       	mov	r22, r24
    16d0:	86 e2       	ldi	r24, 0x26	; 38
    16d2:	93 e0       	ldi	r25, 0x03	; 3
    16d4:	0e 94 b3 04 	call	0x966	; 0x966 <_ZN7Display13draw_triangleEhhhff>
}
    16d8:	1f 91       	pop	r17
    16da:	0f 91       	pop	r16
    16dc:	ff 90       	pop	r15
    16de:	ef 90       	pop	r14
    16e0:	df 90       	pop	r13
    16e2:	cf 90       	pop	r12
    16e4:	bf 90       	pop	r11
    16e6:	af 90       	pop	r10
    16e8:	08 95       	ret

000016ea <_Z19anzeige_kleinenadelhhf>:
void anzeige_kleinenadel(uint8_t x, uint8_t y, float angle){
    16ea:	af 92       	push	r10
    16ec:	bf 92       	push	r11
    16ee:	cf 92       	push	r12
    16f0:	df 92       	push	r13
    16f2:	ef 92       	push	r14
    16f4:	ff 92       	push	r15
    16f6:	0f 93       	push	r16
    16f8:	1f 93       	push	r17
	//fixed parameters for drawing the arrow
	oled.draw_triangle(x,y,10,70,angle);
    16fa:	59 01       	movw	r10, r18
    16fc:	6a 01       	movw	r12, r20
    16fe:	e1 2c       	mov	r14, r1
    1700:	f1 2c       	mov	r15, r1
    1702:	0c e8       	ldi	r16, 0x8C	; 140
    1704:	12 e4       	ldi	r17, 0x42	; 66
    1706:	2a e0       	ldi	r18, 0x0A	; 10
    1708:	46 2f       	mov	r20, r22
    170a:	68 2f       	mov	r22, r24
    170c:	86 e2       	ldi	r24, 0x26	; 38
    170e:	93 e0       	ldi	r25, 0x03	; 3
    1710:	0e 94 b3 04 	call	0x966	; 0x966 <_ZN7Display13draw_triangleEhhhff>
}
    1714:	1f 91       	pop	r17
    1716:	0f 91       	pop	r16
    1718:	ff 90       	pop	r15
    171a:	ef 90       	pop	r14
    171c:	df 90       	pop	r13
    171e:	cf 90       	pop	r12
    1720:	bf 90       	pop	r11
    1722:	af 90       	pop	r10
    1724:	08 95       	ret

00001726 <_Z11menue_hauptv>:

void menue_haupt(){
    1726:	cf 92       	push	r12
    1728:	df 92       	push	r13
    172a:	ef 92       	push	r14
    172c:	ff 92       	push	r15
    172e:	0f 93       	push	r16
    1730:	1f 93       	push	r17
    1732:	cf 93       	push	r28
    1734:	df 93       	push	r29
    1736:	cd b7       	in	r28, 0x3d	; 61
    1738:	de b7       	in	r29, 0x3e	; 62
    173a:	64 97       	sbiw	r28, 0x14	; 20
    173c:	0f b6       	in	r0, 0x3f	; 63
    173e:	f8 94       	cli
    1740:	de bf       	out	0x3e, r29	; 62
    1742:	0f be       	out	0x3f, r0	; 63
    1744:	cd bf       	out	0x3d, r28	; 61
	char buffer[20];
	uint8_t buffersize=0;

	oled.clearFrame();
    1746:	86 e2       	ldi	r24, 0x26	; 38
    1748:	93 e0       	ldi	r25, 0x03	; 3
    174a:	0e 94 ed 02 	call	0x5da	; 0x5da <_ZN7Display10clearFrameEv>
	buffersize=sprintf(buffer,"1:Fahradanzeige");
    174e:	80 e1       	ldi	r24, 0x10	; 16
    1750:	e6 e3       	ldi	r30, 0x36	; 54
    1752:	f1 e0       	ldi	r31, 0x01	; 1
    1754:	8e 01       	movw	r16, r28
    1756:	0f 5f       	subi	r16, 0xFF	; 255
    1758:	1f 4f       	sbci	r17, 0xFF	; 255
    175a:	d8 01       	movw	r26, r16
    175c:	01 90       	ld	r0, Z+
    175e:	0d 92       	st	X+, r0
    1760:	8a 95       	dec	r24
    1762:	e1 f7       	brne	.-8      	; 0x175c <_Z11menue_hauptv+0x36>
    1764:	e0 2e       	mov	r14, r16
    1766:	f1 2e       	mov	r15, r17
    1768:	68 01       	movw	r12, r16
    176a:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,0*charhighte);}
    176c:	f6 01       	movw	r30, r12
    176e:	61 91       	ld	r22, Z+
    1770:	6f 01       	movw	r12, r30
    1772:	20 e0       	ldi	r18, 0x00	; 0
    1774:	41 2f       	mov	r20, r17
    1776:	86 e2       	ldi	r24, 0x26	; 38
    1778:	93 e0       	ldi	r25, 0x03	; 3
    177a:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    177e:	1a 5f       	subi	r17, 0xFA	; 250
    1780:	1a 35       	cpi	r17, 0x5A	; 90
    1782:	a1 f7       	brne	.-24     	; 0x176c <_Z11menue_hauptv+0x46>
	buffersize=sprintf(buffer,"2:Taschenrechner");
    1784:	81 e1       	ldi	r24, 0x11	; 17
    1786:	e6 e4       	ldi	r30, 0x46	; 70
    1788:	f1 e0       	ldi	r31, 0x01	; 1
    178a:	de 01       	movw	r26, r28
    178c:	11 96       	adiw	r26, 0x01	; 1
    178e:	01 90       	ld	r0, Z+
    1790:	0d 92       	st	X+, r0
    1792:	8a 95       	dec	r24
    1794:	e1 f7       	brne	.-8      	; 0x178e <_Z11menue_hauptv+0x68>
    1796:	ce 2c       	mov	r12, r14
    1798:	df 2c       	mov	r13, r15
    179a:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,1*charhighte);}
    179c:	f6 01       	movw	r30, r12
    179e:	61 91       	ld	r22, Z+
    17a0:	6f 01       	movw	r12, r30
    17a2:	28 e0       	ldi	r18, 0x08	; 8
    17a4:	41 2f       	mov	r20, r17
    17a6:	86 e2       	ldi	r24, 0x26	; 38
    17a8:	93 e0       	ldi	r25, 0x03	; 3
    17aa:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    17ae:	1a 5f       	subi	r17, 0xFA	; 250
    17b0:	10 36       	cpi	r17, 0x60	; 96
    17b2:	a1 f7       	brne	.-24     	; 0x179c <_Z11menue_hauptv+0x76>
	buffersize=sprintf(buffer,"3:Kompass");
    17b4:	8a e0       	ldi	r24, 0x0A	; 10
    17b6:	e7 e5       	ldi	r30, 0x57	; 87
    17b8:	f1 e0       	ldi	r31, 0x01	; 1
    17ba:	de 01       	movw	r26, r28
    17bc:	11 96       	adiw	r26, 0x01	; 1
    17be:	01 90       	ld	r0, Z+
    17c0:	0d 92       	st	X+, r0
    17c2:	8a 95       	dec	r24
    17c4:	e1 f7       	brne	.-8      	; 0x17be <_Z11menue_hauptv+0x98>
    17c6:	ce 2c       	mov	r12, r14
    17c8:	df 2c       	mov	r13, r15
    17ca:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,2*charhighte);}
    17cc:	f6 01       	movw	r30, r12
    17ce:	61 91       	ld	r22, Z+
    17d0:	6f 01       	movw	r12, r30
    17d2:	20 e1       	ldi	r18, 0x10	; 16
    17d4:	41 2f       	mov	r20, r17
    17d6:	86 e2       	ldi	r24, 0x26	; 38
    17d8:	93 e0       	ldi	r25, 0x03	; 3
    17da:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    17de:	1a 5f       	subi	r17, 0xFA	; 250
    17e0:	16 33       	cpi	r17, 0x36	; 54
    17e2:	a1 f7       	brne	.-24     	; 0x17cc <_Z11menue_hauptv+0xa6>
	buffersize=sprintf(buffer,"4:Uhrmenue");
    17e4:	8b e0       	ldi	r24, 0x0B	; 11
    17e6:	e1 e6       	ldi	r30, 0x61	; 97
    17e8:	f1 e0       	ldi	r31, 0x01	; 1
    17ea:	de 01       	movw	r26, r28
    17ec:	11 96       	adiw	r26, 0x01	; 1
    17ee:	01 90       	ld	r0, Z+
    17f0:	0d 92       	st	X+, r0
    17f2:	8a 95       	dec	r24
    17f4:	e1 f7       	brne	.-8      	; 0x17ee <_Z11menue_hauptv+0xc8>
    17f6:	ce 2c       	mov	r12, r14
    17f8:	df 2c       	mov	r13, r15
    17fa:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,3*charhighte);}
    17fc:	f6 01       	movw	r30, r12
    17fe:	61 91       	ld	r22, Z+
    1800:	6f 01       	movw	r12, r30
    1802:	28 e1       	ldi	r18, 0x18	; 24
    1804:	41 2f       	mov	r20, r17
    1806:	86 e2       	ldi	r24, 0x26	; 38
    1808:	93 e0       	ldi	r25, 0x03	; 3
    180a:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    180e:	1a 5f       	subi	r17, 0xFA	; 250
    1810:	1c 33       	cpi	r17, 0x3C	; 60
    1812:	a1 f7       	brne	.-24     	; 0x17fc <_Z11menue_hauptv+0xd6>
	buffersize=sprintf(buffer,"5:Einstellungen");
    1814:	80 e1       	ldi	r24, 0x10	; 16
    1816:	ec e6       	ldi	r30, 0x6C	; 108
    1818:	f1 e0       	ldi	r31, 0x01	; 1
    181a:	de 01       	movw	r26, r28
    181c:	11 96       	adiw	r26, 0x01	; 1
    181e:	01 90       	ld	r0, Z+
    1820:	0d 92       	st	X+, r0
    1822:	8a 95       	dec	r24
    1824:	e1 f7       	brne	.-8      	; 0x181e <_Z11menue_hauptv+0xf8>
    1826:	ce 2c       	mov	r12, r14
    1828:	df 2c       	mov	r13, r15
    182a:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,4*charhighte);}
    182c:	f6 01       	movw	r30, r12
    182e:	61 91       	ld	r22, Z+
    1830:	6f 01       	movw	r12, r30
    1832:	20 e2       	ldi	r18, 0x20	; 32
    1834:	41 2f       	mov	r20, r17
    1836:	86 e2       	ldi	r24, 0x26	; 38
    1838:	93 e0       	ldi	r25, 0x03	; 3
    183a:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    183e:	1a 5f       	subi	r17, 0xFA	; 250
    1840:	1a 35       	cpi	r17, 0x5A	; 90
    1842:	a1 f7       	brne	.-24     	; 0x182c <_Z11menue_hauptv+0x106>
	buffersize=sprintf(buffer,"6:Display aus");
    1844:	8e e0       	ldi	r24, 0x0E	; 14
    1846:	ec e7       	ldi	r30, 0x7C	; 124
    1848:	f1 e0       	ldi	r31, 0x01	; 1
    184a:	de 01       	movw	r26, r28
    184c:	11 96       	adiw	r26, 0x01	; 1
    184e:	01 90       	ld	r0, Z+
    1850:	0d 92       	st	X+, r0
    1852:	8a 95       	dec	r24
    1854:	e1 f7       	brne	.-8      	; 0x184e <_Z11menue_hauptv+0x128>
    1856:	ce 2c       	mov	r12, r14
    1858:	df 2c       	mov	r13, r15
    185a:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,5*charhighte);}
    185c:	f6 01       	movw	r30, r12
    185e:	61 91       	ld	r22, Z+
    1860:	6f 01       	movw	r12, r30
    1862:	28 e2       	ldi	r18, 0x28	; 40
    1864:	41 2f       	mov	r20, r17
    1866:	86 e2       	ldi	r24, 0x26	; 38
    1868:	93 e0       	ldi	r25, 0x03	; 3
    186a:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    186e:	1a 5f       	subi	r17, 0xFA	; 250
    1870:	1e 34       	cpi	r17, 0x4E	; 78
    1872:	a1 f7       	brne	.-24     	; 0x185c <_Z11menue_hauptv+0x136>
	buffersize=sprintf(buffer,"7:Drucksensor");
    1874:	8e e0       	ldi	r24, 0x0E	; 14
    1876:	ea e8       	ldi	r30, 0x8A	; 138
    1878:	f1 e0       	ldi	r31, 0x01	; 1
    187a:	de 01       	movw	r26, r28
    187c:	11 96       	adiw	r26, 0x01	; 1
    187e:	01 90       	ld	r0, Z+
    1880:	0d 92       	st	X+, r0
    1882:	8a 95       	dec	r24
    1884:	e1 f7       	brne	.-8      	; 0x187e <_Z11menue_hauptv+0x158>
    1886:	ce 2c       	mov	r12, r14
    1888:	df 2c       	mov	r13, r15
    188a:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,6*charhighte);}
    188c:	f6 01       	movw	r30, r12
    188e:	61 91       	ld	r22, Z+
    1890:	6f 01       	movw	r12, r30
    1892:	20 e3       	ldi	r18, 0x30	; 48
    1894:	41 2f       	mov	r20, r17
    1896:	86 e2       	ldi	r24, 0x26	; 38
    1898:	93 e0       	ldi	r25, 0x03	; 3
    189a:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    189e:	1a 5f       	subi	r17, 0xFA	; 250
    18a0:	1e 34       	cpi	r17, 0x4E	; 78
    18a2:	a1 f7       	brne	.-24     	; 0x188c <_Z11menue_hauptv+0x166>
}
    18a4:	64 96       	adiw	r28, 0x14	; 20
    18a6:	0f b6       	in	r0, 0x3f	; 63
    18a8:	f8 94       	cli
    18aa:	de bf       	out	0x3e, r29	; 62
    18ac:	0f be       	out	0x3f, r0	; 63
    18ae:	cd bf       	out	0x3d, r28	; 61
    18b0:	df 91       	pop	r29
    18b2:	cf 91       	pop	r28
    18b4:	1f 91       	pop	r17
    18b6:	0f 91       	pop	r16
    18b8:	ff 90       	pop	r15
    18ba:	ef 90       	pop	r14
    18bc:	df 90       	pop	r13
    18be:	cf 90       	pop	r12
    18c0:	08 95       	ret

000018c2 <_Z11menue_einstv>:
void menue_einst(){
    18c2:	af 92       	push	r10
    18c4:	bf 92       	push	r11
    18c6:	df 92       	push	r13
    18c8:	ef 92       	push	r14
    18ca:	0f 93       	push	r16
    18cc:	1f 93       	push	r17
    18ce:	cf 93       	push	r28
    18d0:	df 93       	push	r29
    18d2:	cd b7       	in	r28, 0x3d	; 61
    18d4:	de b7       	in	r29, 0x3e	; 62
    18d6:	64 97       	sbiw	r28, 0x14	; 20
    18d8:	0f b6       	in	r0, 0x3f	; 63
    18da:	f8 94       	cli
    18dc:	de bf       	out	0x3e, r29	; 62
    18de:	0f be       	out	0x3f, r0	; 63
    18e0:	cd bf       	out	0x3d, r28	; 61
	char buffer[20];
	uint8_t buffersize=0;

	oled.clearFrame();
    18e2:	86 e2       	ldi	r24, 0x26	; 38
    18e4:	93 e0       	ldi	r25, 0x03	; 3
    18e6:	0e 94 ed 02 	call	0x5da	; 0x5da <_ZN7Display10clearFrameEv>
	buffersize=sprintf(buffer,"1:Kompass kalib.");
    18ea:	81 e1       	ldi	r24, 0x11	; 17
    18ec:	e8 e9       	ldi	r30, 0x98	; 152
    18ee:	f1 e0       	ldi	r31, 0x01	; 1
    18f0:	8e 01       	movw	r16, r28
    18f2:	0f 5f       	subi	r16, 0xFF	; 255
    18f4:	1f 4f       	sbci	r17, 0xFF	; 255
    18f6:	d8 01       	movw	r26, r16
    18f8:	01 90       	ld	r0, Z+
    18fa:	0d 92       	st	X+, r0
    18fc:	8a 95       	dec	r24
    18fe:	e1 f7       	brne	.-8      	; 0x18f8 <_Z11menue_einstv+0x36>
    1900:	d0 2e       	mov	r13, r16
    1902:	e1 2e       	mov	r14, r17
    1904:	58 01       	movw	r10, r16
    1906:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,0*charhighte);}
    1908:	f5 01       	movw	r30, r10
    190a:	61 91       	ld	r22, Z+
    190c:	5f 01       	movw	r10, r30
    190e:	20 e0       	ldi	r18, 0x00	; 0
    1910:	41 2f       	mov	r20, r17
    1912:	86 e2       	ldi	r24, 0x26	; 38
    1914:	93 e0       	ldi	r25, 0x03	; 3
    1916:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    191a:	1a 5f       	subi	r17, 0xFA	; 250
    191c:	10 36       	cpi	r17, 0x60	; 96
    191e:	a1 f7       	brne	.-24     	; 0x1908 <_Z11menue_einstv+0x46>
	buffersize=sprintf(buffer,"2:Kompassverstaerkung");
    1920:	86 e1       	ldi	r24, 0x16	; 22
    1922:	e9 ea       	ldi	r30, 0xA9	; 169
    1924:	f1 e0       	ldi	r31, 0x01	; 1
    1926:	de 01       	movw	r26, r28
    1928:	11 96       	adiw	r26, 0x01	; 1
    192a:	01 90       	ld	r0, Z+
    192c:	0d 92       	st	X+, r0
    192e:	8a 95       	dec	r24
    1930:	e1 f7       	brne	.-8      	; 0x192a <_Z11menue_einstv+0x68>
    1932:	ad 2c       	mov	r10, r13
    1934:	be 2c       	mov	r11, r14
    1936:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,1*charhighte);}
    1938:	f5 01       	movw	r30, r10
    193a:	61 91       	ld	r22, Z+
    193c:	5f 01       	movw	r10, r30
    193e:	28 e0       	ldi	r18, 0x08	; 8
    1940:	41 2f       	mov	r20, r17
    1942:	86 e2       	ldi	r24, 0x26	; 38
    1944:	93 e0       	ldi	r25, 0x03	; 3
    1946:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    194a:	1a 5f       	subi	r17, 0xFA	; 250
    194c:	1e 37       	cpi	r17, 0x7E	; 126
    194e:	a1 f7       	brne	.-24     	; 0x1938 <_Z11menue_einstv+0x76>
	buffersize=sprintf(buffer,"3:Uhr einstellen");
    1950:	81 e1       	ldi	r24, 0x11	; 17
    1952:	ef eb       	ldi	r30, 0xBF	; 191
    1954:	f1 e0       	ldi	r31, 0x01	; 1
    1956:	de 01       	movw	r26, r28
    1958:	11 96       	adiw	r26, 0x01	; 1
    195a:	01 90       	ld	r0, Z+
    195c:	0d 92       	st	X+, r0
    195e:	8a 95       	dec	r24
    1960:	e1 f7       	brne	.-8      	; 0x195a <_Z11menue_einstv+0x98>
    1962:	ad 2c       	mov	r10, r13
    1964:	be 2c       	mov	r11, r14
    1966:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,2*charhighte);}
    1968:	f5 01       	movw	r30, r10
    196a:	61 91       	ld	r22, Z+
    196c:	5f 01       	movw	r10, r30
    196e:	20 e1       	ldi	r18, 0x10	; 16
    1970:	41 2f       	mov	r20, r17
    1972:	86 e2       	ldi	r24, 0x26	; 38
    1974:	93 e0       	ldi	r25, 0x03	; 3
    1976:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    197a:	1a 5f       	subi	r17, 0xFA	; 250
    197c:	10 36       	cpi	r17, 0x60	; 96
    197e:	a1 f7       	brne	.-24     	; 0x1968 <_Z11menue_einstv+0xa6>
	//for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,4*charhighte);}
	//buffersize=sprintf(buffer,"6:HMC5883L Gain");
	//for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,5*charhighte);}
	//buffersize=sprintf(buffer,"7:Uhr einstellen");
	//for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,6*charhighte);}
}
    1980:	64 96       	adiw	r28, 0x14	; 20
    1982:	0f b6       	in	r0, 0x3f	; 63
    1984:	f8 94       	cli
    1986:	de bf       	out	0x3e, r29	; 62
    1988:	0f be       	out	0x3f, r0	; 63
    198a:	cd bf       	out	0x3d, r28	; 61
    198c:	df 91       	pop	r29
    198e:	cf 91       	pop	r28
    1990:	1f 91       	pop	r17
    1992:	0f 91       	pop	r16
    1994:	ef 90       	pop	r14
    1996:	df 90       	pop	r13
    1998:	bf 90       	pop	r11
    199a:	af 90       	pop	r10
    199c:	08 95       	ret

0000199e <_Z9menue_uhrv>:
void menue_uhr(){
    199e:	af 92       	push	r10
    19a0:	bf 92       	push	r11
    19a2:	df 92       	push	r13
    19a4:	ef 92       	push	r14
    19a6:	0f 93       	push	r16
    19a8:	1f 93       	push	r17
    19aa:	cf 93       	push	r28
    19ac:	df 93       	push	r29
    19ae:	cd b7       	in	r28, 0x3d	; 61
    19b0:	de b7       	in	r29, 0x3e	; 62
    19b2:	64 97       	sbiw	r28, 0x14	; 20
    19b4:	0f b6       	in	r0, 0x3f	; 63
    19b6:	f8 94       	cli
    19b8:	de bf       	out	0x3e, r29	; 62
    19ba:	0f be       	out	0x3f, r0	; 63
    19bc:	cd bf       	out	0x3d, r28	; 61
	char buffer[20];
	uint8_t buffersize=0;

	oled.clearFrame();
    19be:	86 e2       	ldi	r24, 0x26	; 38
    19c0:	93 e0       	ldi	r25, 0x03	; 3
    19c2:	0e 94 ed 02 	call	0x5da	; 0x5da <_ZN7Display10clearFrameEv>
	buffersize=sprintf(buffer,"1:Uhr");
    19c6:	86 e0       	ldi	r24, 0x06	; 6
    19c8:	e0 ed       	ldi	r30, 0xD0	; 208
    19ca:	f1 e0       	ldi	r31, 0x01	; 1
    19cc:	8e 01       	movw	r16, r28
    19ce:	0f 5f       	subi	r16, 0xFF	; 255
    19d0:	1f 4f       	sbci	r17, 0xFF	; 255
    19d2:	d8 01       	movw	r26, r16
    19d4:	01 90       	ld	r0, Z+
    19d6:	0d 92       	st	X+, r0
    19d8:	8a 95       	dec	r24
    19da:	e1 f7       	brne	.-8      	; 0x19d4 <_Z9menue_uhrv+0x36>
    19dc:	d0 2e       	mov	r13, r16
    19de:	e1 2e       	mov	r14, r17
    19e0:	58 01       	movw	r10, r16
    19e2:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,0*charhighte);}
    19e4:	f5 01       	movw	r30, r10
    19e6:	61 91       	ld	r22, Z+
    19e8:	5f 01       	movw	r10, r30
    19ea:	20 e0       	ldi	r18, 0x00	; 0
    19ec:	41 2f       	mov	r20, r17
    19ee:	86 e2       	ldi	r24, 0x26	; 38
    19f0:	93 e0       	ldi	r25, 0x03	; 3
    19f2:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    19f6:	1a 5f       	subi	r17, 0xFA	; 250
    19f8:	1e 31       	cpi	r17, 0x1E	; 30
    19fa:	a1 f7       	brne	.-24     	; 0x19e4 <_Z9menue_uhrv+0x46>
	buffersize=sprintf(buffer,"2:Stoppuhr");
    19fc:	8b e0       	ldi	r24, 0x0B	; 11
    19fe:	e6 ed       	ldi	r30, 0xD6	; 214
    1a00:	f1 e0       	ldi	r31, 0x01	; 1
    1a02:	de 01       	movw	r26, r28
    1a04:	11 96       	adiw	r26, 0x01	; 1
    1a06:	01 90       	ld	r0, Z+
    1a08:	0d 92       	st	X+, r0
    1a0a:	8a 95       	dec	r24
    1a0c:	e1 f7       	brne	.-8      	; 0x1a06 <_Z9menue_uhrv+0x68>
    1a0e:	ad 2c       	mov	r10, r13
    1a10:	be 2c       	mov	r11, r14
    1a12:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,1*charhighte);}
    1a14:	f5 01       	movw	r30, r10
    1a16:	61 91       	ld	r22, Z+
    1a18:	5f 01       	movw	r10, r30
    1a1a:	28 e0       	ldi	r18, 0x08	; 8
    1a1c:	41 2f       	mov	r20, r17
    1a1e:	86 e2       	ldi	r24, 0x26	; 38
    1a20:	93 e0       	ldi	r25, 0x03	; 3
    1a22:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    1a26:	1a 5f       	subi	r17, 0xFA	; 250
    1a28:	1c 33       	cpi	r17, 0x3C	; 60
    1a2a:	a1 f7       	brne	.-24     	; 0x1a14 <_Z9menue_uhrv+0x76>
	buffersize=sprintf(buffer,"3:Timer");
    1a2c:	88 e0       	ldi	r24, 0x08	; 8
    1a2e:	e1 ee       	ldi	r30, 0xE1	; 225
    1a30:	f1 e0       	ldi	r31, 0x01	; 1
    1a32:	de 01       	movw	r26, r28
    1a34:	11 96       	adiw	r26, 0x01	; 1
    1a36:	01 90       	ld	r0, Z+
    1a38:	0d 92       	st	X+, r0
    1a3a:	8a 95       	dec	r24
    1a3c:	e1 f7       	brne	.-8      	; 0x1a36 <_Z9menue_uhrv+0x98>
    1a3e:	ad 2c       	mov	r10, r13
    1a40:	be 2c       	mov	r11, r14
    1a42:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,2*charhighte);}
    1a44:	f5 01       	movw	r30, r10
    1a46:	61 91       	ld	r22, Z+
    1a48:	5f 01       	movw	r10, r30
    1a4a:	20 e1       	ldi	r18, 0x10	; 16
    1a4c:	41 2f       	mov	r20, r17
    1a4e:	86 e2       	ldi	r24, 0x26	; 38
    1a50:	93 e0       	ldi	r25, 0x03	; 3
    1a52:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    1a56:	1a 5f       	subi	r17, 0xFA	; 250
    1a58:	1a 32       	cpi	r17, 0x2A	; 42
    1a5a:	a1 f7       	brne	.-24     	; 0x1a44 <_Z9menue_uhrv+0xa6>
	buffersize=sprintf(buffer,"4:Alarm");
    1a5c:	88 e0       	ldi	r24, 0x08	; 8
    1a5e:	e9 ee       	ldi	r30, 0xE9	; 233
    1a60:	f1 e0       	ldi	r31, 0x01	; 1
    1a62:	de 01       	movw	r26, r28
    1a64:	11 96       	adiw	r26, 0x01	; 1
    1a66:	01 90       	ld	r0, Z+
    1a68:	0d 92       	st	X+, r0
    1a6a:	8a 95       	dec	r24
    1a6c:	e1 f7       	brne	.-8      	; 0x1a66 <_Z9menue_uhrv+0xc8>
    1a6e:	ad 2c       	mov	r10, r13
    1a70:	be 2c       	mov	r11, r14
    1a72:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,3*charhighte);}
    1a74:	f5 01       	movw	r30, r10
    1a76:	61 91       	ld	r22, Z+
    1a78:	5f 01       	movw	r10, r30
    1a7a:	28 e1       	ldi	r18, 0x18	; 24
    1a7c:	41 2f       	mov	r20, r17
    1a7e:	86 e2       	ldi	r24, 0x26	; 38
    1a80:	93 e0       	ldi	r25, 0x03	; 3
    1a82:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    1a86:	1a 5f       	subi	r17, 0xFA	; 250
    1a88:	1a 32       	cpi	r17, 0x2A	; 42
    1a8a:	a1 f7       	brne	.-24     	; 0x1a74 <_Z9menue_uhrv+0xd6>
	buffersize=sprintf(buffer,"5:Uhr gross");
    1a8c:	8c e0       	ldi	r24, 0x0C	; 12
    1a8e:	e1 ef       	ldi	r30, 0xF1	; 241
    1a90:	f1 e0       	ldi	r31, 0x01	; 1
    1a92:	de 01       	movw	r26, r28
    1a94:	11 96       	adiw	r26, 0x01	; 1
    1a96:	01 90       	ld	r0, Z+
    1a98:	0d 92       	st	X+, r0
    1a9a:	8a 95       	dec	r24
    1a9c:	e1 f7       	brne	.-8      	; 0x1a96 <_Z9menue_uhrv+0xf8>
    1a9e:	ad 2c       	mov	r10, r13
    1aa0:	be 2c       	mov	r11, r14
    1aa2:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,4*charhighte);}
    1aa4:	f5 01       	movw	r30, r10
    1aa6:	61 91       	ld	r22, Z+
    1aa8:	5f 01       	movw	r10, r30
    1aaa:	20 e2       	ldi	r18, 0x20	; 32
    1aac:	41 2f       	mov	r20, r17
    1aae:	86 e2       	ldi	r24, 0x26	; 38
    1ab0:	93 e0       	ldi	r25, 0x03	; 3
    1ab2:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    1ab6:	1a 5f       	subi	r17, 0xFA	; 250
    1ab8:	12 34       	cpi	r17, 0x42	; 66
    1aba:	a1 f7       	brne	.-24     	; 0x1aa4 <_Z9menue_uhrv+0x106>
	//buffersize=sprintf(buffer,"6:HMC5883L Gain");
	//for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,5*charhighte);}
	//buffersize=sprintf(buffer,"7:Uhr einstellen");
	//for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,6*charhighte);}
}
    1abc:	64 96       	adiw	r28, 0x14	; 20
    1abe:	0f b6       	in	r0, 0x3f	; 63
    1ac0:	f8 94       	cli
    1ac2:	de bf       	out	0x3e, r29	; 62
    1ac4:	0f be       	out	0x3f, r0	; 63
    1ac6:	cd bf       	out	0x3d, r28	; 61
    1ac8:	df 91       	pop	r29
    1aca:	cf 91       	pop	r28
    1acc:	1f 91       	pop	r17
    1ace:	0f 91       	pop	r16
    1ad0:	ef 90       	pop	r14
    1ad2:	df 90       	pop	r13
    1ad4:	bf 90       	pop	r11
    1ad6:	af 90       	pop	r10
    1ad8:	08 95       	ret

00001ada <_Z11uhranzeigenv>:

void uhranzeigen(){
    1ada:	df 92       	push	r13
    1adc:	ef 92       	push	r14
    1ade:	ff 92       	push	r15
    1ae0:	0f 93       	push	r16
    1ae2:	1f 93       	push	r17
    1ae4:	cf 93       	push	r28
    1ae6:	df 93       	push	r29
    1ae8:	cd b7       	in	r28, 0x3d	; 61
    1aea:	de b7       	in	r29, 0x3e	; 62
    1aec:	64 97       	sbiw	r28, 0x14	; 20
    1aee:	0f b6       	in	r0, 0x3f	; 63
    1af0:	f8 94       	cli
    1af2:	de bf       	out	0x3e, r29	; 62
    1af4:	0f be       	out	0x3f, r0	; 63
    1af6:	cd bf       	out	0x3d, r28	; 61
	Baro.READ_Temperature();
    1af8:	83 e1       	ldi	r24, 0x13	; 19
    1afa:	93 e0       	ldi	r25, 0x03	; 3
    1afc:	0e 94 9f 22 	call	0x453e	; 0x453e <_ZN8Pressure16READ_TemperatureEv>
	uint8_t buffersize;
	char Buffer[20];
	oled.clearFrame();
    1b00:	86 e2       	ldi	r24, 0x26	; 38
    1b02:	93 e0       	ldi	r25, 0x03	; 3
    1b04:	0e 94 ed 02 	call	0x5da	; 0x5da <_ZN7Display10clearFrameEv>
	oled.analog(rtc.Stunden,rtc.Minuten,rtc.Sekunden,1);
    1b08:	01 e0       	ldi	r16, 0x01	; 1
    1b0a:	20 91 69 07 	lds	r18, 0x0769
    1b0e:	40 91 68 07 	lds	r20, 0x0768
    1b12:	60 91 67 07 	lds	r22, 0x0767
    1b16:	86 e2       	ldi	r24, 0x26	; 38
    1b18:	93 e0       	ldi	r25, 0x03	; 3
    1b1a:	0e 94 9c 06 	call	0xd38	; 0xd38 <_ZN7Display6analogEhhhh>
    1b1e:	0f 2e       	mov	r0, r31
    1b20:	f7 e5       	ldi	r31, 0x57	; 87
    1b22:	ef 2e       	mov	r14, r31
    1b24:	f7 e0       	ldi	r31, 0x07	; 7
    1b26:	ff 2e       	mov	r15, r31
    1b28:	f0 2d       	mov	r31, r0
    1b2a:	11 e4       	ldi	r17, 0x41	; 65
	for(uint8_t i=0;i<bitsderrtc;i++){oled.draw_ASCI(rtc.msg_uhr[i],65+i*charsize,0*charhighte);}
    1b2c:	f7 01       	movw	r30, r14
    1b2e:	61 91       	ld	r22, Z+
    1b30:	7f 01       	movw	r14, r30
    1b32:	20 e0       	ldi	r18, 0x00	; 0
    1b34:	41 2f       	mov	r20, r17
    1b36:	86 e2       	ldi	r24, 0x26	; 38
    1b38:	93 e0       	ldi	r25, 0x03	; 3
    1b3a:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    1b3e:	1a 5f       	subi	r17, 0xFA	; 250
    1b40:	11 37       	cpi	r17, 0x71	; 113
    1b42:	a1 f7       	brne	.-24     	; 0x1b2c <_Z11uhranzeigenv+0x52>
    1b44:	0f 2e       	mov	r0, r31
    1b46:	ff e5       	ldi	r31, 0x5F	; 95
    1b48:	ef 2e       	mov	r14, r31
    1b4a:	f7 e0       	ldi	r31, 0x07	; 7
    1b4c:	ff 2e       	mov	r15, r31
    1b4e:	f0 2d       	mov	r31, r0
    1b50:	11 e4       	ldi	r17, 0x41	; 65
	for(uint8_t i=0;i<bitsderrtc;i++){oled.draw_ASCI(rtc.msg_dat[i],65+i*charsize,7*charhighte);}
    1b52:	f7 01       	movw	r30, r14
    1b54:	61 91       	ld	r22, Z+
    1b56:	7f 01       	movw	r14, r30
    1b58:	28 e3       	ldi	r18, 0x38	; 56
    1b5a:	41 2f       	mov	r20, r17
    1b5c:	86 e2       	ldi	r24, 0x26	; 38
    1b5e:	93 e0       	ldi	r25, 0x03	; 3
    1b60:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    1b64:	1a 5f       	subi	r17, 0xFA	; 250
    1b66:	11 37       	cpi	r17, 0x71	; 113
    1b68:	a1 f7       	brne	.-24     	; 0x1b52 <_Z11uhranzeigenv+0x78>
	buffersize=sprintf(Buffer,"%i%%",Batteriestatus());
    1b6a:	0e 94 3b 09 	call	0x1276	; 0x1276 <_Z14Batteriestatusv>
    1b6e:	28 2f       	mov	r18, r24
    1b70:	33 27       	eor	r19, r19
    1b72:	27 fd       	sbrc	r18, 7
    1b74:	30 95       	com	r19
    1b76:	3f 93       	push	r19
    1b78:	8f 93       	push	r24
    1b7a:	81 e3       	ldi	r24, 0x31	; 49
    1b7c:	91 e0       	ldi	r25, 0x01	; 1
    1b7e:	9f 93       	push	r25
    1b80:	8f 93       	push	r24
    1b82:	ce 01       	movw	r24, r28
    1b84:	01 96       	adiw	r24, 0x01	; 1
    1b86:	9f 93       	push	r25
    1b88:	8f 93       	push	r24
    1b8a:	0e 94 ec 2c 	call	0x59d8	; 0x59d8 <sprintf>
	for(uint8_t i=0;i<buffersize;i++){
    1b8e:	0f 90       	pop	r0
    1b90:	0f 90       	pop	r0
    1b92:	0f 90       	pop	r0
    1b94:	0f 90       	pop	r0
    1b96:	0f 90       	pop	r0
    1b98:	0f 90       	pop	r0
    1b9a:	88 23       	and	r24, r24
    1b9c:	59 f1       	breq	.+86     	; 0x1bf4 <_Z11uhranzeigenv+0x11a>
    1b9e:	8e 01       	movw	r16, r28
    1ba0:	0f 5f       	subi	r16, 0xFF	; 255
    1ba2:	1f 4f       	sbci	r17, 0xFF	; 255
    1ba4:	81 50       	subi	r24, 0x01	; 1
    1ba6:	68 94       	set
    1ba8:	ee 24       	eor	r14, r14
    1baa:	e1 f8       	bld	r14, 1
    1bac:	f1 2c       	mov	r15, r1
    1bae:	ec 0e       	add	r14, r28
    1bb0:	fd 1e       	adc	r15, r29
    1bb2:	e8 0e       	add	r14, r24
    1bb4:	f1 1c       	adc	r15, r1
    1bb6:	0f 2e       	mov	r0, r31
    1bb8:	f9 e4       	ldi	r31, 0x49	; 73
    1bba:	df 2e       	mov	r13, r31
    1bbc:	f0 2d       	mov	r31, r0
		if (Buffer[i]=='%' || Buffer[i]=='-')
    1bbe:	f8 01       	movw	r30, r16
    1bc0:	61 91       	ld	r22, Z+
    1bc2:	8f 01       	movw	r16, r30
    1bc4:	86 2f       	mov	r24, r22
    1bc6:	87 7f       	andi	r24, 0xF7	; 247
    1bc8:	85 32       	cpi	r24, 0x25	; 37
    1bca:	39 f4       	brne	.+14     	; 0x1bda <_Z11uhranzeigenv+0x100>
		{
			oled.draw_ASCI(Buffer[i],73+i*numbersmalsize,3*charhighte);
    1bcc:	28 e1       	ldi	r18, 0x18	; 24
    1bce:	4d 2d       	mov	r20, r13
    1bd0:	86 e2       	ldi	r24, 0x26	; 38
    1bd2:	93 e0       	ldi	r25, 0x03	; 3
    1bd4:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    1bd8:	08 c0       	rjmp	.+16     	; 0x1bea <_Z11uhranzeigenv+0x110>
		}
		else{
			oled.draw_number16x16(Buffer[i]-'0',70+i*numbersmalsize,2.5*charhighte);
    1bda:	60 53       	subi	r22, 0x30	; 48
    1bdc:	24 e1       	ldi	r18, 0x14	; 20
    1bde:	4d ef       	ldi	r20, 0xFD	; 253
    1be0:	4d 0d       	add	r20, r13
    1be2:	86 e2       	ldi	r24, 0x26	; 38
    1be4:	93 e0       	ldi	r25, 0x03	; 3
    1be6:	0e 94 26 06 	call	0xc4c	; 0xc4c <_ZN7Display16draw_number16x16Ehhh>
    1bea:	f0 e1       	ldi	r31, 0x10	; 16
    1bec:	df 0e       	add	r13, r31
	oled.clearFrame();
	oled.analog(rtc.Stunden,rtc.Minuten,rtc.Sekunden,1);
	for(uint8_t i=0;i<bitsderrtc;i++){oled.draw_ASCI(rtc.msg_uhr[i],65+i*charsize,0*charhighte);}
	for(uint8_t i=0;i<bitsderrtc;i++){oled.draw_ASCI(rtc.msg_dat[i],65+i*charsize,7*charhighte);}
	buffersize=sprintf(Buffer,"%i%%",Batteriestatus());
	for(uint8_t i=0;i<buffersize;i++){
    1bee:	0e 15       	cp	r16, r14
    1bf0:	1f 05       	cpc	r17, r15
    1bf2:	29 f7       	brne	.-54     	; 0x1bbe <_Z11uhranzeigenv+0xe4>
		}
		else{
			oled.draw_number16x16(Buffer[i]-'0',70+i*numbersmalsize,2.5*charhighte);
		}
	}
	buffersize=sprintf(Buffer,"%.1f C",(double)Baro.Tempera);
    1bf4:	e7 e1       	ldi	r30, 0x17	; 23
    1bf6:	f3 e0       	ldi	r31, 0x03	; 3
    1bf8:	83 81       	ldd	r24, Z+3	; 0x03
    1bfa:	8f 93       	push	r24
    1bfc:	82 81       	ldd	r24, Z+2	; 0x02
    1bfe:	8f 93       	push	r24
    1c00:	81 81       	ldd	r24, Z+1	; 0x01
    1c02:	8f 93       	push	r24
    1c04:	80 81       	ld	r24, Z
    1c06:	8f 93       	push	r24
    1c08:	8d ef       	ldi	r24, 0xFD	; 253
    1c0a:	91 e0       	ldi	r25, 0x01	; 1
    1c0c:	9f 93       	push	r25
    1c0e:	8f 93       	push	r24
    1c10:	ce 01       	movw	r24, r28
    1c12:	01 96       	adiw	r24, 0x01	; 1
    1c14:	9f 93       	push	r25
    1c16:	8f 93       	push	r24
    1c18:	0e 94 ec 2c 	call	0x59d8	; 0x59d8 <sprintf>
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(Buffer[i],70+i*charsize,5*charhighte);}
    1c1c:	0f b6       	in	r0, 0x3f	; 63
    1c1e:	f8 94       	cli
    1c20:	de bf       	out	0x3e, r29	; 62
    1c22:	0f be       	out	0x3f, r0	; 63
    1c24:	cd bf       	out	0x3d, r28	; 61
    1c26:	88 23       	and	r24, r24
    1c28:	f1 f0       	breq	.+60     	; 0x1c66 <_Z11uhranzeigenv+0x18c>
    1c2a:	8e 01       	movw	r16, r28
    1c2c:	0f 5f       	subi	r16, 0xFF	; 255
    1c2e:	1f 4f       	sbci	r17, 0xFF	; 255
    1c30:	81 50       	subi	r24, 0x01	; 1
    1c32:	68 94       	set
    1c34:	ee 24       	eor	r14, r14
    1c36:	e1 f8       	bld	r14, 1
    1c38:	f1 2c       	mov	r15, r1
    1c3a:	ec 0e       	add	r14, r28
    1c3c:	fd 1e       	adc	r15, r29
    1c3e:	e8 0e       	add	r14, r24
    1c40:	f1 1c       	adc	r15, r1
    1c42:	0f 2e       	mov	r0, r31
    1c44:	f6 e4       	ldi	r31, 0x46	; 70
    1c46:	df 2e       	mov	r13, r31
    1c48:	f0 2d       	mov	r31, r0
    1c4a:	f8 01       	movw	r30, r16
    1c4c:	61 91       	ld	r22, Z+
    1c4e:	8f 01       	movw	r16, r30
    1c50:	28 e2       	ldi	r18, 0x28	; 40
    1c52:	4d 2d       	mov	r20, r13
    1c54:	86 e2       	ldi	r24, 0x26	; 38
    1c56:	93 e0       	ldi	r25, 0x03	; 3
    1c58:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    1c5c:	f6 e0       	ldi	r31, 0x06	; 6
    1c5e:	df 0e       	add	r13, r31
    1c60:	0e 15       	cp	r16, r14
    1c62:	1f 05       	cpc	r17, r15
    1c64:	91 f7       	brne	.-28     	; 0x1c4a <_Z11uhranzeigenv+0x170>
}
    1c66:	64 96       	adiw	r28, 0x14	; 20
    1c68:	0f b6       	in	r0, 0x3f	; 63
    1c6a:	f8 94       	cli
    1c6c:	de bf       	out	0x3e, r29	; 62
    1c6e:	0f be       	out	0x3f, r0	; 63
    1c70:	cd bf       	out	0x3d, r28	; 61
    1c72:	df 91       	pop	r29
    1c74:	cf 91       	pop	r28
    1c76:	1f 91       	pop	r17
    1c78:	0f 91       	pop	r16
    1c7a:	ff 90       	pop	r15
    1c7c:	ef 90       	pop	r14
    1c7e:	df 90       	pop	r13
    1c80:	08 95       	ret

00001c82 <_Z14uhranzeigenminv>:

void uhranzeigenmin(){
    1c82:	0f 93       	push	r16
    1c84:	1f 93       	push	r17
    1c86:	cf 93       	push	r28
    1c88:	df 93       	push	r29
	oled.clearFrame();
    1c8a:	86 e2       	ldi	r24, 0x26	; 38
    1c8c:	93 e0       	ldi	r25, 0x03	; 3
    1c8e:	0e 94 ed 02 	call	0x5da	; 0x5da <_ZN7Display10clearFrameEv>
	oled.analog(rtc.Stunden,rtc.Minuten,rtc.Sekunden,0);
    1c92:	00 e0       	ldi	r16, 0x00	; 0
    1c94:	20 91 69 07 	lds	r18, 0x0769
    1c98:	40 91 68 07 	lds	r20, 0x0768
    1c9c:	60 91 67 07 	lds	r22, 0x0767
    1ca0:	86 e2       	ldi	r24, 0x26	; 38
    1ca2:	93 e0       	ldi	r25, 0x03	; 3
    1ca4:	0e 94 9c 06 	call	0xd38	; 0xd38 <_ZN7Display6analogEhhhh>
    1ca8:	c7 e5       	ldi	r28, 0x57	; 87
    1caa:	d7 e0       	ldi	r29, 0x07	; 7
    1cac:	11 e4       	ldi	r17, 0x41	; 65
	for(uint8_t i=0;i<(bitsderrtc-3);i++){oled.draw_ASCI(rtc.msg_uhr[i],65+i*charsize,0*charhighte);}
    1cae:	69 91       	ld	r22, Y+
    1cb0:	20 e0       	ldi	r18, 0x00	; 0
    1cb2:	41 2f       	mov	r20, r17
    1cb4:	86 e2       	ldi	r24, 0x26	; 38
    1cb6:	93 e0       	ldi	r25, 0x03	; 3
    1cb8:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    1cbc:	1a 5f       	subi	r17, 0xFA	; 250
    1cbe:	1f 35       	cpi	r17, 0x5F	; 95
    1cc0:	b1 f7       	brne	.-20     	; 0x1cae <_Z14uhranzeigenminv+0x2c>
    1cc2:	cf e5       	ldi	r28, 0x5F	; 95
    1cc4:	d7 e0       	ldi	r29, 0x07	; 7
    1cc6:	11 e4       	ldi	r17, 0x41	; 65
	for(uint8_t i=0;i<bitsderrtc;i++){oled.draw_ASCI(rtc.msg_dat[i],65+i*charsize,7*charhighte);}
    1cc8:	69 91       	ld	r22, Y+
    1cca:	28 e3       	ldi	r18, 0x38	; 56
    1ccc:	41 2f       	mov	r20, r17
    1cce:	86 e2       	ldi	r24, 0x26	; 38
    1cd0:	93 e0       	ldi	r25, 0x03	; 3
    1cd2:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    1cd6:	1a 5f       	subi	r17, 0xFA	; 250
    1cd8:	11 37       	cpi	r17, 0x71	; 113
    1cda:	b1 f7       	brne	.-20     	; 0x1cc8 <_Z14uhranzeigenminv+0x46>
	//show hours and minutes in big numbers
	oled.draw_number16x16(rtc.msg_uhr[0]-'0',70,1.66*charhighte);
    1cdc:	60 91 57 07 	lds	r22, 0x0757
    1ce0:	60 53       	subi	r22, 0x30	; 48
    1ce2:	2d e0       	ldi	r18, 0x0D	; 13
    1ce4:	46 e4       	ldi	r20, 0x46	; 70
    1ce6:	86 e2       	ldi	r24, 0x26	; 38
    1ce8:	93 e0       	ldi	r25, 0x03	; 3
    1cea:	0e 94 26 06 	call	0xc4c	; 0xc4c <_ZN7Display16draw_number16x16Ehhh>
	oled.draw_number16x16(rtc.msg_uhr[1]-'0',70+numbersmalsize,1.66*charhighte);
    1cee:	60 91 58 07 	lds	r22, 0x0758
    1cf2:	60 53       	subi	r22, 0x30	; 48
    1cf4:	2d e0       	ldi	r18, 0x0D	; 13
    1cf6:	46 e5       	ldi	r20, 0x56	; 86
    1cf8:	86 e2       	ldi	r24, 0x26	; 38
    1cfa:	93 e0       	ldi	r25, 0x03	; 3
    1cfc:	0e 94 26 06 	call	0xc4c	; 0xc4c <_ZN7Display16draw_number16x16Ehhh>
	oled.draw_number16x16(rtc.msg_uhr[3]-'0',70,2.33*charhighte+numbersmalhight);
    1d00:	60 91 5a 07 	lds	r22, 0x075A
    1d04:	60 53       	subi	r22, 0x30	; 48
    1d06:	22 e2       	ldi	r18, 0x22	; 34
    1d08:	46 e4       	ldi	r20, 0x46	; 70
    1d0a:	86 e2       	ldi	r24, 0x26	; 38
    1d0c:	93 e0       	ldi	r25, 0x03	; 3
    1d0e:	0e 94 26 06 	call	0xc4c	; 0xc4c <_ZN7Display16draw_number16x16Ehhh>
	oled.draw_number16x16(rtc.msg_uhr[4]-'0',70+numbersmalsize,2.33*charhighte+numbersmalhight);
    1d12:	60 91 5b 07 	lds	r22, 0x075B
    1d16:	60 53       	subi	r22, 0x30	; 48
    1d18:	22 e2       	ldi	r18, 0x22	; 34
    1d1a:	46 e5       	ldi	r20, 0x56	; 86
    1d1c:	86 e2       	ldi	r24, 0x26	; 38
    1d1e:	93 e0       	ldi	r25, 0x03	; 3
    1d20:	0e 94 26 06 	call	0xc4c	; 0xc4c <_ZN7Display16draw_number16x16Ehhh>
		//}
		//else{
			//oled.draw_number16x16(Buffer[i]-'0',70+i*numbersmalsize,3*charhighte);
		//}
	//}
}
    1d24:	df 91       	pop	r29
    1d26:	cf 91       	pop	r28
    1d28:	1f 91       	pop	r17
    1d2a:	0f 91       	pop	r16
    1d2c:	08 95       	ret

00001d2e <_Z12fahradschirmddddm>:

void fahradschirm(double winkelgeschw, double angle, double weite, double maxgeschwinsigkeit, uint32_t Zeit){
    1d2e:	2f 92       	push	r2
    1d30:	3f 92       	push	r3
    1d32:	4f 92       	push	r4
    1d34:	5f 92       	push	r5
    1d36:	6f 92       	push	r6
    1d38:	7f 92       	push	r7
    1d3a:	8f 92       	push	r8
    1d3c:	9f 92       	push	r9
    1d3e:	af 92       	push	r10
    1d40:	bf 92       	push	r11
    1d42:	cf 92       	push	r12
    1d44:	df 92       	push	r13
    1d46:	ef 92       	push	r14
    1d48:	ff 92       	push	r15
    1d4a:	0f 93       	push	r16
    1d4c:	1f 93       	push	r17
    1d4e:	cf 93       	push	r28
    1d50:	df 93       	push	r29
    1d52:	cd b7       	in	r28, 0x3d	; 61
    1d54:	de b7       	in	r29, 0x3e	; 62
    1d56:	62 97       	sbiw	r28, 0x12	; 18
    1d58:	0f b6       	in	r0, 0x3f	; 63
    1d5a:	f8 94       	cli
    1d5c:	de bf       	out	0x3e, r29	; 62
    1d5e:	0f be       	out	0x3f, r0	; 63
    1d60:	cd bf       	out	0x3d, r28	; 61
    1d62:	76 2e       	mov	r7, r22
    1d64:	67 2e       	mov	r6, r23
    1d66:	58 2e       	mov	r5, r24
    1d68:	49 2e       	mov	r4, r25
    1d6a:	82 2e       	mov	r8, r18
    1d6c:	23 2e       	mov	r2, r19
    1d6e:	94 2e       	mov	r9, r20
    1d70:	35 2e       	mov	r3, r21
    1d72:	eb 86       	std	Y+11, r14	; 0x0b
    1d74:	fc 86       	std	Y+12, r15	; 0x0c
    1d76:	0d 87       	std	Y+13, r16	; 0x0d
    1d78:	1e 87       	std	Y+14, r17	; 0x0e
    1d7a:	2f a1       	ldd	r18, Y+39	; 0x27
    1d7c:	2f 87       	std	Y+15, r18	; 0x0f
    1d7e:	38 a5       	ldd	r19, Y+40	; 0x28
    1d80:	38 8b       	std	Y+16, r19	; 0x10
    1d82:	89 a5       	ldd	r24, Y+41	; 0x29
    1d84:	89 8b       	std	Y+17, r24	; 0x11
    1d86:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d88:	9a 8b       	std	Y+18, r25	; 0x12
	char buffer[10];
	uint8_t buffersize=0;
	oled.clearFrame();
    1d8a:	86 e2       	ldi	r24, 0x26	; 38
    1d8c:	93 e0       	ldi	r25, 0x03	; 3
    1d8e:	0e 94 ed 02 	call	0x5da	; 0x5da <_ZN7Display10clearFrameEv>
	header(0);
    1d92:	80 e0       	ldi	r24, 0x00	; 0
    1d94:	0e 94 19 0a 	call	0x1432	; 0x1432 <_Z6headerh>
	bottom(0);
    1d98:	80 e0       	ldi	r24, 0x00	; 0
    1d9a:	0e 94 83 0a 	call	0x1506	; 0x1506 <_Z6bottomh>
	//Ausgabe der Geschwidigkeit
	buffersize=sprintf(buffer,"%3.1f",winkelgeschw);
    1d9e:	4f 92       	push	r4
    1da0:	5f 92       	push	r5
    1da2:	6f 92       	push	r6
    1da4:	7f 92       	push	r7
    1da6:	84 e0       	ldi	r24, 0x04	; 4
    1da8:	92 e0       	ldi	r25, 0x02	; 2
    1daa:	9f 93       	push	r25
    1dac:	8f 93       	push	r24
    1dae:	ce 01       	movw	r24, r28
    1db0:	01 96       	adiw	r24, 0x01	; 1
    1db2:	9f 93       	push	r25
    1db4:	8f 93       	push	r24
    1db6:	0e 94 ec 2c 	call	0x59d8	; 0x59d8 <sprintf>
	for(uint8_t i=((SSD1306_WIDTH/numbersmalsize)-buffersize-1);i<((SSD1306_WIDTH/numbersmalsize)-1);i++){
    1dba:	27 e0       	ldi	r18, 0x07	; 7
    1dbc:	02 2f       	mov	r16, r18
    1dbe:	08 1b       	sub	r16, r24
    1dc0:	0f b6       	in	r0, 0x3f	; 63
    1dc2:	f8 94       	cli
    1dc4:	de bf       	out	0x3e, r29	; 62
    1dc6:	0f be       	out	0x3f, r0	; 63
    1dc8:	cd bf       	out	0x3d, r28	; 61
    1dca:	07 30       	cpi	r16, 0x07	; 7
    1dcc:	18 f5       	brcc	.+70     	; 0x1e14 <_Z12fahradschirmddddm+0xe6>
    1dce:	10 2f       	mov	r17, r16
    1dd0:	12 95       	swap	r17
    1dd2:	10 7f       	andi	r17, 0xF0	; 240
		if(buffer[i-((SSD1306_WIDTH/numbersmalsize)-buffersize-1)]=='.'){
    1dd4:	7c 01       	movw	r14, r24
    1dd6:	ff 24       	eor	r15, r15
    1dd8:	e1 e0       	ldi	r30, 0x01	; 1
    1dda:	f0 e0       	ldi	r31, 0x00	; 0
    1ddc:	ec 0f       	add	r30, r28
    1dde:	fd 1f       	adc	r31, r29
    1de0:	e0 0f       	add	r30, r16
    1de2:	f1 1d       	adc	r31, r1
    1de4:	ee 0d       	add	r30, r14
    1de6:	ff 1d       	adc	r31, r15
    1de8:	37 97       	sbiw	r30, 0x07	; 7
    1dea:	60 81       	ld	r22, Z
    1dec:	6e 32       	cpi	r22, 0x2E	; 46
    1dee:	39 f4       	brne	.+14     	; 0x1dfe <_Z12fahradschirmddddm+0xd0>
			oled.draw_ASCI(buffer[i-((SSD1306_WIDTH/numbersmalsize)-buffersize-1)],i*numbersmalsize,4*charhighte);
    1df0:	20 e2       	ldi	r18, 0x20	; 32
    1df2:	41 2f       	mov	r20, r17
    1df4:	86 e2       	ldi	r24, 0x26	; 38
    1df6:	93 e0       	ldi	r25, 0x03	; 3
    1df8:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    1dfc:	07 c0       	rjmp	.+14     	; 0x1e0c <_Z12fahradschirmddddm+0xde>
		}
		else{
			oled.draw_number16x16(buffer[i-((SSD1306_WIDTH/numbersmalsize)-buffersize-1)]-'0',i*numbersmalsize,3*charhighte);
    1dfe:	60 53       	subi	r22, 0x30	; 48
    1e00:	28 e1       	ldi	r18, 0x18	; 24
    1e02:	41 2f       	mov	r20, r17
    1e04:	86 e2       	ldi	r24, 0x26	; 38
    1e06:	93 e0       	ldi	r25, 0x03	; 3
    1e08:	0e 94 26 06 	call	0xc4c	; 0xc4c <_ZN7Display16draw_number16x16Ehhh>
	oled.clearFrame();
	header(0);
	bottom(0);
	//Ausgabe der Geschwidigkeit
	buffersize=sprintf(buffer,"%3.1f",winkelgeschw);
	for(uint8_t i=((SSD1306_WIDTH/numbersmalsize)-buffersize-1);i<((SSD1306_WIDTH/numbersmalsize)-1);i++){
    1e0c:	0f 5f       	subi	r16, 0xFF	; 255
    1e0e:	10 5f       	subi	r17, 0xF0	; 240
    1e10:	07 30       	cpi	r16, 0x07	; 7
    1e12:	11 f7       	brne	.-60     	; 0x1dd8 <_Z12fahradschirmddddm+0xaa>
		}
		else{
			oled.draw_number16x16(buffer[i-((SSD1306_WIDTH/numbersmalsize)-buffersize-1)]-'0',i*numbersmalsize,3*charhighte);
		}
	}
	oled.draw_ASCI('k',((SSD1306_WIDTH/charsize-2)*charsize),3*charhighte);
    1e14:	28 e1       	ldi	r18, 0x18	; 24
    1e16:	42 e7       	ldi	r20, 0x72	; 114
    1e18:	6b e6       	ldi	r22, 0x6B	; 107
    1e1a:	86 e2       	ldi	r24, 0x26	; 38
    1e1c:	93 e0       	ldi	r25, 0x03	; 3
    1e1e:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
	oled.draw_ASCI('m',((SSD1306_WIDTH/charsize-1)*charsize),3*charhighte);
    1e22:	28 e1       	ldi	r18, 0x18	; 24
    1e24:	48 e7       	ldi	r20, 0x78	; 120
    1e26:	6d e6       	ldi	r22, 0x6D	; 109
    1e28:	86 e2       	ldi	r24, 0x26	; 38
    1e2a:	93 e0       	ldi	r25, 0x03	; 3
    1e2c:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
	oled.draw_ASCI('h',((SSD1306_WIDTH/charsize-2)*charsize),4*charhighte);
    1e30:	20 e2       	ldi	r18, 0x20	; 32
    1e32:	42 e7       	ldi	r20, 0x72	; 114
    1e34:	68 e6       	ldi	r22, 0x68	; 104
    1e36:	86 e2       	ldi	r24, 0x26	; 38
    1e38:	93 e0       	ldi	r25, 0x03	; 3
    1e3a:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
	//winkelausgabe
	buffersize=sprintf(buffer,"%3.1f",angle);
    1e3e:	3f 92       	push	r3
    1e40:	9f 92       	push	r9
    1e42:	2f 92       	push	r2
    1e44:	8f 92       	push	r8
    1e46:	84 e0       	ldi	r24, 0x04	; 4
    1e48:	92 e0       	ldi	r25, 0x02	; 2
    1e4a:	9f 93       	push	r25
    1e4c:	8f 93       	push	r24
    1e4e:	ce 01       	movw	r24, r28
    1e50:	01 96       	adiw	r24, 0x01	; 1
    1e52:	9f 93       	push	r25
    1e54:	8f 93       	push	r24
    1e56:	0e 94 ec 2c 	call	0x59d8	; 0x59d8 <sprintf>
    1e5a:	48 2e       	mov	r4, r24
	for (uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,7*charhighte);}
    1e5c:	0f b6       	in	r0, 0x3f	; 63
    1e5e:	f8 94       	cli
    1e60:	de bf       	out	0x3e, r29	; 62
    1e62:	0f be       	out	0x3f, r0	; 63
    1e64:	cd bf       	out	0x3d, r28	; 61
    1e66:	88 23       	and	r24, r24
    1e68:	99 f0       	breq	.+38     	; 0x1e90 <_Z12fahradschirmddddm+0x162>
    1e6a:	ce 01       	movw	r24, r28
    1e6c:	01 96       	adiw	r24, 0x01	; 1
    1e6e:	3c 01       	movw	r6, r24
    1e70:	7c 01       	movw	r14, r24
    1e72:	10 e0       	ldi	r17, 0x00	; 0
    1e74:	f7 01       	movw	r30, r14
    1e76:	61 91       	ld	r22, Z+
    1e78:	7f 01       	movw	r14, r30
    1e7a:	28 e3       	ldi	r18, 0x38	; 56
    1e7c:	41 2f       	mov	r20, r17
    1e7e:	86 e2       	ldi	r24, 0x26	; 38
    1e80:	93 e0       	ldi	r25, 0x03	; 3
    1e82:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    1e86:	1a 5f       	subi	r17, 0xFA	; 250
    1e88:	8e 2d       	mov	r24, r14
    1e8a:	86 19       	sub	r24, r6
    1e8c:	84 15       	cp	r24, r4
    1e8e:	90 f3       	brcs	.-28     	; 0x1e74 <_Z12fahradschirmddddm+0x146>
	anzeige_kleinenadel(31,31,angle);
    1e90:	28 2d       	mov	r18, r8
    1e92:	32 2d       	mov	r19, r2
    1e94:	49 2d       	mov	r20, r9
    1e96:	53 2d       	mov	r21, r3
    1e98:	6f e1       	ldi	r22, 0x1F	; 31
    1e9a:	8f e1       	ldi	r24, 0x1F	; 31
    1e9c:	0e 94 75 0b 	call	0x16ea	; 0x16ea <_Z19anzeige_kleinenadelhhf>
	//anzeige der gesammtstrecke
	buffersize=sprintf(buffer,"%.1fm",weite);
    1ea0:	fe 85       	ldd	r31, Y+14	; 0x0e
    1ea2:	ff 93       	push	r31
    1ea4:	2d 85       	ldd	r18, Y+13	; 0x0d
    1ea6:	2f 93       	push	r18
    1ea8:	3c 85       	ldd	r19, Y+12	; 0x0c
    1eaa:	3f 93       	push	r19
    1eac:	8b 85       	ldd	r24, Y+11	; 0x0b
    1eae:	8f 93       	push	r24
    1eb0:	8a e0       	ldi	r24, 0x0A	; 10
    1eb2:	92 e0       	ldi	r25, 0x02	; 2
    1eb4:	9f 93       	push	r25
    1eb6:	8f 93       	push	r24
    1eb8:	ce 01       	movw	r24, r28
    1eba:	01 96       	adiw	r24, 0x01	; 1
    1ebc:	9f 93       	push	r25
    1ebe:	8f 93       	push	r24
    1ec0:	0e 94 ec 2c 	call	0x59d8	; 0x59d8 <sprintf>
    1ec4:	88 2e       	mov	r8, r24
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize+70,2*charhighte);}
    1ec6:	0f b6       	in	r0, 0x3f	; 63
    1ec8:	f8 94       	cli
    1eca:	de bf       	out	0x3e, r29	; 62
    1ecc:	0f be       	out	0x3f, r0	; 63
    1ece:	cd bf       	out	0x3d, r28	; 61
    1ed0:	88 23       	and	r24, r24
    1ed2:	c1 f0       	breq	.+48     	; 0x1f04 <_Z12fahradschirmddddm+0x1d6>
    1ed4:	9e 01       	movw	r18, r28
    1ed6:	2f 5f       	subi	r18, 0xFF	; 255
    1ed8:	3f 4f       	sbci	r19, 0xFF	; 255
    1eda:	79 01       	movw	r14, r18
    1edc:	89 01       	movw	r16, r18
    1ede:	0f 2e       	mov	r0, r31
    1ee0:	f6 e4       	ldi	r31, 0x46	; 70
    1ee2:	9f 2e       	mov	r9, r31
    1ee4:	f0 2d       	mov	r31, r0
    1ee6:	f8 01       	movw	r30, r16
    1ee8:	61 91       	ld	r22, Z+
    1eea:	8f 01       	movw	r16, r30
    1eec:	20 e1       	ldi	r18, 0x10	; 16
    1eee:	49 2d       	mov	r20, r9
    1ef0:	86 e2       	ldi	r24, 0x26	; 38
    1ef2:	93 e0       	ldi	r25, 0x03	; 3
    1ef4:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    1ef8:	f6 e0       	ldi	r31, 0x06	; 6
    1efa:	9f 0e       	add	r9, r31
    1efc:	90 2f       	mov	r25, r16
    1efe:	9e 19       	sub	r25, r14
    1f00:	98 15       	cp	r25, r8
    1f02:	88 f3       	brcs	.-30     	; 0x1ee6 <_Z12fahradschirmddddm+0x1b8>
	//anzeige der max geschwindigkeit
	buffersize=sprintf(buffer,"%.1fkm/h",maxgeschwinsigkeit);
    1f04:	df 92       	push	r13
    1f06:	cf 92       	push	r12
    1f08:	bf 92       	push	r11
    1f0a:	af 92       	push	r10
    1f0c:	80 e1       	ldi	r24, 0x10	; 16
    1f0e:	92 e0       	ldi	r25, 0x02	; 2
    1f10:	9f 93       	push	r25
    1f12:	8f 93       	push	r24
    1f14:	ce 01       	movw	r24, r28
    1f16:	01 96       	adiw	r24, 0x01	; 1
    1f18:	9f 93       	push	r25
    1f1a:	8f 93       	push	r24
    1f1c:	0e 94 ec 2c 	call	0x59d8	; 0x59d8 <sprintf>
    1f20:	c8 2e       	mov	r12, r24
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize+70,5*charhighte);}
    1f22:	0f b6       	in	r0, 0x3f	; 63
    1f24:	f8 94       	cli
    1f26:	de bf       	out	0x3e, r29	; 62
    1f28:	0f be       	out	0x3f, r0	; 63
    1f2a:	cd bf       	out	0x3d, r28	; 61
    1f2c:	88 23       	and	r24, r24
    1f2e:	b9 f0       	breq	.+46     	; 0x1f5e <_Z12fahradschirmddddm+0x230>
    1f30:	ce 01       	movw	r24, r28
    1f32:	01 96       	adiw	r24, 0x01	; 1
    1f34:	7c 01       	movw	r14, r24
    1f36:	8c 01       	movw	r16, r24
    1f38:	0f 2e       	mov	r0, r31
    1f3a:	f6 e4       	ldi	r31, 0x46	; 70
    1f3c:	df 2e       	mov	r13, r31
    1f3e:	f0 2d       	mov	r31, r0
    1f40:	f8 01       	movw	r30, r16
    1f42:	61 91       	ld	r22, Z+
    1f44:	8f 01       	movw	r16, r30
    1f46:	28 e2       	ldi	r18, 0x28	; 40
    1f48:	4d 2d       	mov	r20, r13
    1f4a:	86 e2       	ldi	r24, 0x26	; 38
    1f4c:	93 e0       	ldi	r25, 0x03	; 3
    1f4e:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    1f52:	f6 e0       	ldi	r31, 0x06	; 6
    1f54:	df 0e       	add	r13, r31
    1f56:	90 2f       	mov	r25, r16
    1f58:	9e 19       	sub	r25, r14
    1f5a:	9c 15       	cp	r25, r12
    1f5c:	88 f3       	brcs	.-30     	; 0x1f40 <_Z12fahradschirmddddm+0x212>
	//anzeige der Fahrtzeit
	buffersize=sprintf(buffer,"%lus",Zeit);
    1f5e:	2a 89       	ldd	r18, Y+18	; 0x12
    1f60:	2f 93       	push	r18
    1f62:	39 89       	ldd	r19, Y+17	; 0x11
    1f64:	3f 93       	push	r19
    1f66:	88 89       	ldd	r24, Y+16	; 0x10
    1f68:	8f 93       	push	r24
    1f6a:	9f 85       	ldd	r25, Y+15	; 0x0f
    1f6c:	9f 93       	push	r25
    1f6e:	89 e1       	ldi	r24, 0x19	; 25
    1f70:	92 e0       	ldi	r25, 0x02	; 2
    1f72:	9f 93       	push	r25
    1f74:	8f 93       	push	r24
    1f76:	ce 01       	movw	r24, r28
    1f78:	01 96       	adiw	r24, 0x01	; 1
    1f7a:	9f 93       	push	r25
    1f7c:	8f 93       	push	r24
    1f7e:	0e 94 ec 2c 	call	0x59d8	; 0x59d8 <sprintf>
    1f82:	c8 2e       	mov	r12, r24
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize+70,6*charhighte);}
    1f84:	0f b6       	in	r0, 0x3f	; 63
    1f86:	f8 94       	cli
    1f88:	de bf       	out	0x3e, r29	; 62
    1f8a:	0f be       	out	0x3f, r0	; 63
    1f8c:	cd bf       	out	0x3d, r28	; 61
    1f8e:	88 23       	and	r24, r24
    1f90:	c1 f0       	breq	.+48     	; 0x1fc2 <_Z12fahradschirmddddm+0x294>
    1f92:	9e 01       	movw	r18, r28
    1f94:	2f 5f       	subi	r18, 0xFF	; 255
    1f96:	3f 4f       	sbci	r19, 0xFF	; 255
    1f98:	79 01       	movw	r14, r18
    1f9a:	89 01       	movw	r16, r18
    1f9c:	0f 2e       	mov	r0, r31
    1f9e:	f6 e4       	ldi	r31, 0x46	; 70
    1fa0:	df 2e       	mov	r13, r31
    1fa2:	f0 2d       	mov	r31, r0
    1fa4:	f8 01       	movw	r30, r16
    1fa6:	61 91       	ld	r22, Z+
    1fa8:	8f 01       	movw	r16, r30
    1faa:	20 e3       	ldi	r18, 0x30	; 48
    1fac:	4d 2d       	mov	r20, r13
    1fae:	86 e2       	ldi	r24, 0x26	; 38
    1fb0:	93 e0       	ldi	r25, 0x03	; 3
    1fb2:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    1fb6:	f6 e0       	ldi	r31, 0x06	; 6
    1fb8:	df 0e       	add	r13, r31
    1fba:	90 2f       	mov	r25, r16
    1fbc:	9e 19       	sub	r25, r14
    1fbe:	9c 15       	cp	r25, r12
    1fc0:	88 f3       	brcs	.-30     	; 0x1fa4 <_Z12fahradschirmddddm+0x276>
}
    1fc2:	62 96       	adiw	r28, 0x12	; 18
    1fc4:	0f b6       	in	r0, 0x3f	; 63
    1fc6:	f8 94       	cli
    1fc8:	de bf       	out	0x3e, r29	; 62
    1fca:	0f be       	out	0x3f, r0	; 63
    1fcc:	cd bf       	out	0x3d, r28	; 61
    1fce:	df 91       	pop	r29
    1fd0:	cf 91       	pop	r28
    1fd2:	1f 91       	pop	r17
    1fd4:	0f 91       	pop	r16
    1fd6:	ff 90       	pop	r15
    1fd8:	ef 90       	pop	r14
    1fda:	df 90       	pop	r13
    1fdc:	cf 90       	pop	r12
    1fde:	bf 90       	pop	r11
    1fe0:	af 90       	pop	r10
    1fe2:	9f 90       	pop	r9
    1fe4:	8f 90       	pop	r8
    1fe6:	7f 90       	pop	r7
    1fe8:	6f 90       	pop	r6
    1fea:	5f 90       	pop	r5
    1fec:	4f 90       	pop	r4
    1fee:	3f 90       	pop	r3
    1ff0:	2f 90       	pop	r2
    1ff2:	08 95       	ret

00001ff4 <_Z14Gaineinstellenv>:

void Gaineinstellen(){
    1ff4:	cf 92       	push	r12
    1ff6:	df 92       	push	r13
    1ff8:	ef 92       	push	r14
    1ffa:	ff 92       	push	r15
    1ffc:	0f 93       	push	r16
    1ffe:	1f 93       	push	r17
    2000:	cf 93       	push	r28
    2002:	df 93       	push	r29
    2004:	cd b7       	in	r28, 0x3d	; 61
    2006:	de b7       	in	r29, 0x3e	; 62
    2008:	64 97       	sbiw	r28, 0x14	; 20
    200a:	0f b6       	in	r0, 0x3f	; 63
    200c:	f8 94       	cli
    200e:	de bf       	out	0x3e, r29	; 62
    2010:	0f be       	out	0x3f, r0	; 63
    2012:	cd bf       	out	0x3d, r28	; 61
	char buffer[20];
	uint8_t buffersize=0;

	oled.clearFrame();
    2014:	86 e2       	ldi	r24, 0x26	; 38
    2016:	93 e0       	ldi	r25, 0x03	; 3
    2018:	0e 94 ed 02 	call	0x5da	; 0x5da <_ZN7Display10clearFrameEv>
	buffersize=sprintf(buffer,"1: 1370");
    201c:	88 e0       	ldi	r24, 0x08	; 8
    201e:	ee e1       	ldi	r30, 0x1E	; 30
    2020:	f2 e0       	ldi	r31, 0x02	; 2
    2022:	8e 01       	movw	r16, r28
    2024:	0f 5f       	subi	r16, 0xFF	; 255
    2026:	1f 4f       	sbci	r17, 0xFF	; 255
    2028:	d8 01       	movw	r26, r16
    202a:	01 90       	ld	r0, Z+
    202c:	0d 92       	st	X+, r0
    202e:	8a 95       	dec	r24
    2030:	e1 f7       	brne	.-8      	; 0x202a <_Z14Gaineinstellenv+0x36>
    2032:	e0 2e       	mov	r14, r16
    2034:	f1 2e       	mov	r15, r17
    2036:	68 01       	movw	r12, r16
    2038:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,0*charhighte);}
    203a:	f6 01       	movw	r30, r12
    203c:	61 91       	ld	r22, Z+
    203e:	6f 01       	movw	r12, r30
    2040:	20 e0       	ldi	r18, 0x00	; 0
    2042:	41 2f       	mov	r20, r17
    2044:	86 e2       	ldi	r24, 0x26	; 38
    2046:	93 e0       	ldi	r25, 0x03	; 3
    2048:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    204c:	1a 5f       	subi	r17, 0xFA	; 250
    204e:	1a 32       	cpi	r17, 0x2A	; 42
    2050:	a1 f7       	brne	.-24     	; 0x203a <_Z14Gaineinstellenv+0x46>
	buffersize=sprintf(buffer,"2: 1090");
    2052:	88 e0       	ldi	r24, 0x08	; 8
    2054:	e6 e2       	ldi	r30, 0x26	; 38
    2056:	f2 e0       	ldi	r31, 0x02	; 2
    2058:	de 01       	movw	r26, r28
    205a:	11 96       	adiw	r26, 0x01	; 1
    205c:	01 90       	ld	r0, Z+
    205e:	0d 92       	st	X+, r0
    2060:	8a 95       	dec	r24
    2062:	e1 f7       	brne	.-8      	; 0x205c <_Z14Gaineinstellenv+0x68>
    2064:	ce 2c       	mov	r12, r14
    2066:	df 2c       	mov	r13, r15
    2068:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,1*charhighte);}
    206a:	f6 01       	movw	r30, r12
    206c:	61 91       	ld	r22, Z+
    206e:	6f 01       	movw	r12, r30
    2070:	28 e0       	ldi	r18, 0x08	; 8
    2072:	41 2f       	mov	r20, r17
    2074:	86 e2       	ldi	r24, 0x26	; 38
    2076:	93 e0       	ldi	r25, 0x03	; 3
    2078:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    207c:	1a 5f       	subi	r17, 0xFA	; 250
    207e:	1a 32       	cpi	r17, 0x2A	; 42
    2080:	a1 f7       	brne	.-24     	; 0x206a <_Z14Gaineinstellenv+0x76>
	buffersize=sprintf(buffer,"3:  820");
    2082:	88 e0       	ldi	r24, 0x08	; 8
    2084:	ee e2       	ldi	r30, 0x2E	; 46
    2086:	f2 e0       	ldi	r31, 0x02	; 2
    2088:	de 01       	movw	r26, r28
    208a:	11 96       	adiw	r26, 0x01	; 1
    208c:	01 90       	ld	r0, Z+
    208e:	0d 92       	st	X+, r0
    2090:	8a 95       	dec	r24
    2092:	e1 f7       	brne	.-8      	; 0x208c <_Z14Gaineinstellenv+0x98>
    2094:	ce 2c       	mov	r12, r14
    2096:	df 2c       	mov	r13, r15
    2098:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,2*charhighte);}
    209a:	f6 01       	movw	r30, r12
    209c:	61 91       	ld	r22, Z+
    209e:	6f 01       	movw	r12, r30
    20a0:	20 e1       	ldi	r18, 0x10	; 16
    20a2:	41 2f       	mov	r20, r17
    20a4:	86 e2       	ldi	r24, 0x26	; 38
    20a6:	93 e0       	ldi	r25, 0x03	; 3
    20a8:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    20ac:	1a 5f       	subi	r17, 0xFA	; 250
    20ae:	1a 32       	cpi	r17, 0x2A	; 42
    20b0:	a1 f7       	brne	.-24     	; 0x209a <_Z14Gaineinstellenv+0xa6>
	buffersize=sprintf(buffer,"4:  660");
    20b2:	88 e0       	ldi	r24, 0x08	; 8
    20b4:	e6 e3       	ldi	r30, 0x36	; 54
    20b6:	f2 e0       	ldi	r31, 0x02	; 2
    20b8:	de 01       	movw	r26, r28
    20ba:	11 96       	adiw	r26, 0x01	; 1
    20bc:	01 90       	ld	r0, Z+
    20be:	0d 92       	st	X+, r0
    20c0:	8a 95       	dec	r24
    20c2:	e1 f7       	brne	.-8      	; 0x20bc <_Z14Gaineinstellenv+0xc8>
    20c4:	ce 2c       	mov	r12, r14
    20c6:	df 2c       	mov	r13, r15
    20c8:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,3*charhighte);}
    20ca:	f6 01       	movw	r30, r12
    20cc:	61 91       	ld	r22, Z+
    20ce:	6f 01       	movw	r12, r30
    20d0:	28 e1       	ldi	r18, 0x18	; 24
    20d2:	41 2f       	mov	r20, r17
    20d4:	86 e2       	ldi	r24, 0x26	; 38
    20d6:	93 e0       	ldi	r25, 0x03	; 3
    20d8:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    20dc:	1a 5f       	subi	r17, 0xFA	; 250
    20de:	1a 32       	cpi	r17, 0x2A	; 42
    20e0:	a1 f7       	brne	.-24     	; 0x20ca <_Z14Gaineinstellenv+0xd6>
	buffersize=sprintf(buffer,"5:  440");
    20e2:	88 e0       	ldi	r24, 0x08	; 8
    20e4:	ee e3       	ldi	r30, 0x3E	; 62
    20e6:	f2 e0       	ldi	r31, 0x02	; 2
    20e8:	de 01       	movw	r26, r28
    20ea:	11 96       	adiw	r26, 0x01	; 1
    20ec:	01 90       	ld	r0, Z+
    20ee:	0d 92       	st	X+, r0
    20f0:	8a 95       	dec	r24
    20f2:	e1 f7       	brne	.-8      	; 0x20ec <_Z14Gaineinstellenv+0xf8>
    20f4:	ce 2c       	mov	r12, r14
    20f6:	df 2c       	mov	r13, r15
    20f8:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,4*charhighte);}
    20fa:	f6 01       	movw	r30, r12
    20fc:	61 91       	ld	r22, Z+
    20fe:	6f 01       	movw	r12, r30
    2100:	20 e2       	ldi	r18, 0x20	; 32
    2102:	41 2f       	mov	r20, r17
    2104:	86 e2       	ldi	r24, 0x26	; 38
    2106:	93 e0       	ldi	r25, 0x03	; 3
    2108:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    210c:	1a 5f       	subi	r17, 0xFA	; 250
    210e:	1a 32       	cpi	r17, 0x2A	; 42
    2110:	a1 f7       	brne	.-24     	; 0x20fa <_Z14Gaineinstellenv+0x106>
	buffersize=sprintf(buffer,"6:  390");
    2112:	88 e0       	ldi	r24, 0x08	; 8
    2114:	e6 e4       	ldi	r30, 0x46	; 70
    2116:	f2 e0       	ldi	r31, 0x02	; 2
    2118:	de 01       	movw	r26, r28
    211a:	11 96       	adiw	r26, 0x01	; 1
    211c:	01 90       	ld	r0, Z+
    211e:	0d 92       	st	X+, r0
    2120:	8a 95       	dec	r24
    2122:	e1 f7       	brne	.-8      	; 0x211c <_Z14Gaineinstellenv+0x128>
    2124:	ce 2c       	mov	r12, r14
    2126:	df 2c       	mov	r13, r15
    2128:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,5*charhighte);}
    212a:	f6 01       	movw	r30, r12
    212c:	61 91       	ld	r22, Z+
    212e:	6f 01       	movw	r12, r30
    2130:	28 e2       	ldi	r18, 0x28	; 40
    2132:	41 2f       	mov	r20, r17
    2134:	86 e2       	ldi	r24, 0x26	; 38
    2136:	93 e0       	ldi	r25, 0x03	; 3
    2138:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    213c:	1a 5f       	subi	r17, 0xFA	; 250
    213e:	1a 32       	cpi	r17, 0x2A	; 42
    2140:	a1 f7       	brne	.-24     	; 0x212a <_Z14Gaineinstellenv+0x136>
	buffersize=sprintf(buffer,"7:  330");
    2142:	88 e0       	ldi	r24, 0x08	; 8
    2144:	ee e4       	ldi	r30, 0x4E	; 78
    2146:	f2 e0       	ldi	r31, 0x02	; 2
    2148:	de 01       	movw	r26, r28
    214a:	11 96       	adiw	r26, 0x01	; 1
    214c:	01 90       	ld	r0, Z+
    214e:	0d 92       	st	X+, r0
    2150:	8a 95       	dec	r24
    2152:	e1 f7       	brne	.-8      	; 0x214c <_Z14Gaineinstellenv+0x158>
    2154:	ce 2c       	mov	r12, r14
    2156:	df 2c       	mov	r13, r15
    2158:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,6*charhighte);}
    215a:	f6 01       	movw	r30, r12
    215c:	61 91       	ld	r22, Z+
    215e:	6f 01       	movw	r12, r30
    2160:	20 e3       	ldi	r18, 0x30	; 48
    2162:	41 2f       	mov	r20, r17
    2164:	86 e2       	ldi	r24, 0x26	; 38
    2166:	93 e0       	ldi	r25, 0x03	; 3
    2168:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    216c:	1a 5f       	subi	r17, 0xFA	; 250
    216e:	1a 32       	cpi	r17, 0x2A	; 42
    2170:	a1 f7       	brne	.-24     	; 0x215a <_Z14Gaineinstellenv+0x166>
	buffersize=sprintf(buffer,"8:  230");
    2172:	88 e0       	ldi	r24, 0x08	; 8
    2174:	e6 e5       	ldi	r30, 0x56	; 86
    2176:	f2 e0       	ldi	r31, 0x02	; 2
    2178:	de 01       	movw	r26, r28
    217a:	11 96       	adiw	r26, 0x01	; 1
    217c:	01 90       	ld	r0, Z+
    217e:	0d 92       	st	X+, r0
    2180:	8a 95       	dec	r24
    2182:	e1 f7       	brne	.-8      	; 0x217c <_Z14Gaineinstellenv+0x188>
    2184:	ce 2c       	mov	r12, r14
    2186:	df 2c       	mov	r13, r15
    2188:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,7*charhighte);}
    218a:	f6 01       	movw	r30, r12
    218c:	61 91       	ld	r22, Z+
    218e:	6f 01       	movw	r12, r30
    2190:	28 e3       	ldi	r18, 0x38	; 56
    2192:	41 2f       	mov	r20, r17
    2194:	86 e2       	ldi	r24, 0x26	; 38
    2196:	93 e0       	ldi	r25, 0x03	; 3
    2198:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    219c:	1a 5f       	subi	r17, 0xFA	; 250
    219e:	1a 32       	cpi	r17, 0x2A	; 42
    21a0:	a1 f7       	brne	.-24     	; 0x218a <_Z14Gaineinstellenv+0x196>
}
    21a2:	64 96       	adiw	r28, 0x14	; 20
    21a4:	0f b6       	in	r0, 0x3f	; 63
    21a6:	f8 94       	cli
    21a8:	de bf       	out	0x3e, r29	; 62
    21aa:	0f be       	out	0x3f, r0	; 63
    21ac:	cd bf       	out	0x3d, r28	; 61
    21ae:	df 91       	pop	r29
    21b0:	cf 91       	pop	r28
    21b2:	1f 91       	pop	r17
    21b4:	0f 91       	pop	r16
    21b6:	ff 90       	pop	r15
    21b8:	ef 90       	pop	r14
    21ba:	df 90       	pop	r13
    21bc:	cf 90       	pop	r12
    21be:	08 95       	ret

000021c0 <_Z15anzeige_kompassd>:

void anzeige_kompass(double winkel){
    21c0:	9f 92       	push	r9
    21c2:	af 92       	push	r10
    21c4:	bf 92       	push	r11
    21c6:	cf 92       	push	r12
    21c8:	df 92       	push	r13
    21ca:	ef 92       	push	r14
    21cc:	ff 92       	push	r15
    21ce:	0f 93       	push	r16
    21d0:	1f 93       	push	r17
    21d2:	cf 93       	push	r28
    21d4:	df 93       	push	r29
    21d6:	cd b7       	in	r28, 0x3d	; 61
    21d8:	de b7       	in	r29, 0x3e	; 62
    21da:	64 97       	sbiw	r28, 0x14	; 20
    21dc:	0f b6       	in	r0, 0x3f	; 63
    21de:	f8 94       	cli
    21e0:	de bf       	out	0x3e, r29	; 62
    21e2:	0f be       	out	0x3f, r0	; 63
    21e4:	cd bf       	out	0x3d, r28	; 61
    21e6:	c6 2e       	mov	r12, r22
    21e8:	d7 2e       	mov	r13, r23
    21ea:	e8 2e       	mov	r14, r24
    21ec:	f9 2e       	mov	r15, r25
	Baro.READ_Pressure_once();
    21ee:	83 e1       	ldi	r24, 0x13	; 19
    21f0:	93 e0       	ldi	r25, 0x03	; 3
    21f2:	0e 94 17 22 	call	0x442e	; 0x442e <_ZN8Pressure18READ_Pressure_onceEv>
	Baro.READ_Temperature();
    21f6:	83 e1       	ldi	r24, 0x13	; 19
    21f8:	93 e0       	ldi	r25, 0x03	; 3
    21fa:	0e 94 9f 22 	call	0x453e	; 0x453e <_ZN8Pressure16READ_TemperatureEv>
	oled.clearFrame();
    21fe:	86 e2       	ldi	r24, 0x26	; 38
    2200:	93 e0       	ldi	r25, 0x03	; 3
    2202:	0e 94 ed 02 	call	0x5da	; 0x5da <_ZN7Display10clearFrameEv>
    2206:	0f 2e       	mov	r0, r31
    2208:	f7 e5       	ldi	r31, 0x57	; 87
    220a:	af 2e       	mov	r10, r31
    220c:	f7 e0       	ldi	r31, 0x07	; 7
    220e:	bf 2e       	mov	r11, r31
    2210:	f0 2d       	mov	r31, r0
    2212:	11 e4       	ldi	r17, 0x41	; 65
	char buffer[20];
	uint8_t buffersize=0;
	//Uhrzeit
	for(uint8_t i=0;i<bitsderrtc;i++){oled.draw_ASCI(rtc.msg_uhr[i],65+i*charsize,0*charhighte);}
    2214:	f5 01       	movw	r30, r10
    2216:	61 91       	ld	r22, Z+
    2218:	5f 01       	movw	r10, r30
    221a:	20 e0       	ldi	r18, 0x00	; 0
    221c:	41 2f       	mov	r20, r17
    221e:	86 e2       	ldi	r24, 0x26	; 38
    2220:	93 e0       	ldi	r25, 0x03	; 3
    2222:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    2226:	1a 5f       	subi	r17, 0xFA	; 250
    2228:	11 37       	cpi	r17, 0x71	; 113
    222a:	a1 f7       	brne	.-24     	; 0x2214 <_Z15anzeige_kompassd+0x54>
    222c:	0f 2e       	mov	r0, r31
    222e:	ff e5       	ldi	r31, 0x5F	; 95
    2230:	af 2e       	mov	r10, r31
    2232:	f7 e0       	ldi	r31, 0x07	; 7
    2234:	bf 2e       	mov	r11, r31
    2236:	f0 2d       	mov	r31, r0
    2238:	11 e4       	ldi	r17, 0x41	; 65
	for(uint8_t i=0;i<bitsderrtc;i++){oled.draw_ASCI(rtc.msg_dat[i],65+i*charsize,7*charhighte);}
    223a:	f5 01       	movw	r30, r10
    223c:	61 91       	ld	r22, Z+
    223e:	5f 01       	movw	r10, r30
    2240:	28 e3       	ldi	r18, 0x38	; 56
    2242:	41 2f       	mov	r20, r17
    2244:	86 e2       	ldi	r24, 0x26	; 38
    2246:	93 e0       	ldi	r25, 0x03	; 3
    2248:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    224c:	1a 5f       	subi	r17, 0xFA	; 250
    224e:	11 37       	cpi	r17, 0x71	; 113
    2250:	a1 f7       	brne	.-24     	; 0x223a <_Z15anzeige_kompassd+0x7a>
	//Azeige der Hoehe ueber Altitude
	buffersize=sprintf(buffer,"H: %.1f m",(double)Baro.altitude(Baro.Press));
    2252:	40 91 13 03 	lds	r20, 0x0313
    2256:	50 91 14 03 	lds	r21, 0x0314
    225a:	60 91 15 03 	lds	r22, 0x0315
    225e:	70 91 16 03 	lds	r23, 0x0316
    2262:	83 e1       	ldi	r24, 0x13	; 19
    2264:	93 e0       	ldi	r25, 0x03	; 3
    2266:	0e 94 1c 23 	call	0x4638	; 0x4638 <_ZN8Pressure8altitudeEd>
    226a:	9f 93       	push	r25
    226c:	8f 93       	push	r24
    226e:	7f 93       	push	r23
    2270:	6f 93       	push	r22
    2272:	8e e5       	ldi	r24, 0x5E	; 94
    2274:	92 e0       	ldi	r25, 0x02	; 2
    2276:	9f 93       	push	r25
    2278:	8f 93       	push	r24
    227a:	ce 01       	movw	r24, r28
    227c:	01 96       	adiw	r24, 0x01	; 1
    227e:	9f 93       	push	r25
    2280:	8f 93       	push	r24
    2282:	0e 94 ec 2c 	call	0x59d8	; 0x59d8 <sprintf>
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],65+i*charsize,1.33*charhighte);}
    2286:	0f b6       	in	r0, 0x3f	; 63
    2288:	f8 94       	cli
    228a:	de bf       	out	0x3e, r29	; 62
    228c:	0f be       	out	0x3f, r0	; 63
    228e:	cd bf       	out	0x3d, r28	; 61
    2290:	88 23       	and	r24, r24
    2292:	f1 f0       	breq	.+60     	; 0x22d0 <_Z15anzeige_kompassd+0x110>
    2294:	8e 01       	movw	r16, r28
    2296:	0f 5f       	subi	r16, 0xFF	; 255
    2298:	1f 4f       	sbci	r17, 0xFF	; 255
    229a:	81 50       	subi	r24, 0x01	; 1
    229c:	68 94       	set
    229e:	aa 24       	eor	r10, r10
    22a0:	a1 f8       	bld	r10, 1
    22a2:	b1 2c       	mov	r11, r1
    22a4:	ac 0e       	add	r10, r28
    22a6:	bd 1e       	adc	r11, r29
    22a8:	a8 0e       	add	r10, r24
    22aa:	b1 1c       	adc	r11, r1
    22ac:	0f 2e       	mov	r0, r31
    22ae:	f1 e4       	ldi	r31, 0x41	; 65
    22b0:	9f 2e       	mov	r9, r31
    22b2:	f0 2d       	mov	r31, r0
    22b4:	f8 01       	movw	r30, r16
    22b6:	61 91       	ld	r22, Z+
    22b8:	8f 01       	movw	r16, r30
    22ba:	2a e0       	ldi	r18, 0x0A	; 10
    22bc:	49 2d       	mov	r20, r9
    22be:	86 e2       	ldi	r24, 0x26	; 38
    22c0:	93 e0       	ldi	r25, 0x03	; 3
    22c2:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    22c6:	f6 e0       	ldi	r31, 0x06	; 6
    22c8:	9f 0e       	add	r9, r31
    22ca:	0a 15       	cp	r16, r10
    22cc:	1b 05       	cpc	r17, r11
    22ce:	91 f7       	brne	.-28     	; 0x22b4 <_Z15anzeige_kompassd+0xf4>
	//Anzeige der Temperatur
	buffersize=sprintf(buffer,"%.1f C",(double)Baro.Tempera);
    22d0:	e7 e1       	ldi	r30, 0x17	; 23
    22d2:	f3 e0       	ldi	r31, 0x03	; 3
    22d4:	83 81       	ldd	r24, Z+3	; 0x03
    22d6:	8f 93       	push	r24
    22d8:	82 81       	ldd	r24, Z+2	; 0x02
    22da:	8f 93       	push	r24
    22dc:	81 81       	ldd	r24, Z+1	; 0x01
    22de:	8f 93       	push	r24
    22e0:	80 81       	ld	r24, Z
    22e2:	8f 93       	push	r24
    22e4:	8d ef       	ldi	r24, 0xFD	; 253
    22e6:	91 e0       	ldi	r25, 0x01	; 1
    22e8:	9f 93       	push	r25
    22ea:	8f 93       	push	r24
    22ec:	ce 01       	movw	r24, r28
    22ee:	01 96       	adiw	r24, 0x01	; 1
    22f0:	9f 93       	push	r25
    22f2:	8f 93       	push	r24
    22f4:	0e 94 ec 2c 	call	0x59d8	; 0x59d8 <sprintf>
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],65+i*charsize,5*charhighte);}
    22f8:	0f b6       	in	r0, 0x3f	; 63
    22fa:	f8 94       	cli
    22fc:	de bf       	out	0x3e, r29	; 62
    22fe:	0f be       	out	0x3f, r0	; 63
    2300:	cd bf       	out	0x3d, r28	; 61
    2302:	88 23       	and	r24, r24
    2304:	f1 f0       	breq	.+60     	; 0x2342 <_Z15anzeige_kompassd+0x182>
    2306:	8e 01       	movw	r16, r28
    2308:	0f 5f       	subi	r16, 0xFF	; 255
    230a:	1f 4f       	sbci	r17, 0xFF	; 255
    230c:	81 50       	subi	r24, 0x01	; 1
    230e:	68 94       	set
    2310:	aa 24       	eor	r10, r10
    2312:	a1 f8       	bld	r10, 1
    2314:	b1 2c       	mov	r11, r1
    2316:	ac 0e       	add	r10, r28
    2318:	bd 1e       	adc	r11, r29
    231a:	a8 0e       	add	r10, r24
    231c:	b1 1c       	adc	r11, r1
    231e:	0f 2e       	mov	r0, r31
    2320:	f1 e4       	ldi	r31, 0x41	; 65
    2322:	9f 2e       	mov	r9, r31
    2324:	f0 2d       	mov	r31, r0
    2326:	f8 01       	movw	r30, r16
    2328:	61 91       	ld	r22, Z+
    232a:	8f 01       	movw	r16, r30
    232c:	28 e2       	ldi	r18, 0x28	; 40
    232e:	49 2d       	mov	r20, r9
    2330:	86 e2       	ldi	r24, 0x26	; 38
    2332:	93 e0       	ldi	r25, 0x03	; 3
    2334:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    2338:	f6 e0       	ldi	r31, 0x06	; 6
    233a:	9f 0e       	add	r9, r31
    233c:	0a 15       	cp	r16, r10
    233e:	1b 05       	cpc	r17, r11
    2340:	91 f7       	brne	.-28     	; 0x2326 <_Z15anzeige_kompassd+0x166>
	//winkel als Zahl ausgeben
	buffersize=sprintf(buffer,"angle=%.0f",winkel);
    2342:	ff 92       	push	r15
    2344:	ef 92       	push	r14
    2346:	df 92       	push	r13
    2348:	cf 92       	push	r12
    234a:	88 e6       	ldi	r24, 0x68	; 104
    234c:	92 e0       	ldi	r25, 0x02	; 2
    234e:	9f 93       	push	r25
    2350:	8f 93       	push	r24
    2352:	ce 01       	movw	r24, r28
    2354:	01 96       	adiw	r24, 0x01	; 1
    2356:	9f 93       	push	r25
    2358:	8f 93       	push	r24
    235a:	0e 94 ec 2c 	call	0x59d8	; 0x59d8 <sprintf>
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],65+i*charsize,6*charhighte);}
    235e:	0f b6       	in	r0, 0x3f	; 63
    2360:	f8 94       	cli
    2362:	de bf       	out	0x3e, r29	; 62
    2364:	0f be       	out	0x3f, r0	; 63
    2366:	cd bf       	out	0x3d, r28	; 61
    2368:	88 23       	and	r24, r24
    236a:	f1 f0       	breq	.+60     	; 0x23a8 <_Z15anzeige_kompassd+0x1e8>
    236c:	8e 01       	movw	r16, r28
    236e:	0f 5f       	subi	r16, 0xFF	; 255
    2370:	1f 4f       	sbci	r17, 0xFF	; 255
    2372:	81 50       	subi	r24, 0x01	; 1
    2374:	68 94       	set
    2376:	aa 24       	eor	r10, r10
    2378:	a1 f8       	bld	r10, 1
    237a:	b1 2c       	mov	r11, r1
    237c:	ac 0e       	add	r10, r28
    237e:	bd 1e       	adc	r11, r29
    2380:	a8 0e       	add	r10, r24
    2382:	b1 1c       	adc	r11, r1
    2384:	0f 2e       	mov	r0, r31
    2386:	f1 e4       	ldi	r31, 0x41	; 65
    2388:	9f 2e       	mov	r9, r31
    238a:	f0 2d       	mov	r31, r0
    238c:	f8 01       	movw	r30, r16
    238e:	61 91       	ld	r22, Z+
    2390:	8f 01       	movw	r16, r30
    2392:	20 e3       	ldi	r18, 0x30	; 48
    2394:	49 2d       	mov	r20, r9
    2396:	86 e2       	ldi	r24, 0x26	; 38
    2398:	93 e0       	ldi	r25, 0x03	; 3
    239a:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    239e:	f6 e0       	ldi	r31, 0x06	; 6
    23a0:	9f 0e       	add	r9, r31
    23a2:	0a 15       	cp	r16, r10
    23a4:	1b 05       	cpc	r17, r11
    23a6:	91 f7       	brne	.-28     	; 0x238c <_Z15anzeige_kompassd+0x1cc>
	//dreieck als Zeiger
	anzeige_nadel(31,31,winkel);
    23a8:	2c 2d       	mov	r18, r12
    23aa:	3d 2d       	mov	r19, r13
    23ac:	4e 2d       	mov	r20, r14
    23ae:	5f 2d       	mov	r21, r15
    23b0:	6f e1       	ldi	r22, 0x1F	; 31
    23b2:	8f e1       	ldi	r24, 0x1F	; 31
    23b4:	0e 94 57 0b 	call	0x16ae	; 0x16ae <_Z13anzeige_nadelhhf>
	//Richtung ausgeben
	anzeige_richtung(winkel);	
    23b8:	6c 2d       	mov	r22, r12
    23ba:	7d 2d       	mov	r23, r13
    23bc:	8e 2d       	mov	r24, r14
    23be:	9f 2d       	mov	r25, r15
    23c0:	0e 94 99 0a 	call	0x1532	; 0x1532 <_Z16anzeige_richtungf>
}
    23c4:	64 96       	adiw	r28, 0x14	; 20
    23c6:	0f b6       	in	r0, 0x3f	; 63
    23c8:	f8 94       	cli
    23ca:	de bf       	out	0x3e, r29	; 62
    23cc:	0f be       	out	0x3f, r0	; 63
    23ce:	cd bf       	out	0x3d, r28	; 61
    23d0:	df 91       	pop	r29
    23d2:	cf 91       	pop	r28
    23d4:	1f 91       	pop	r17
    23d6:	0f 91       	pop	r16
    23d8:	ff 90       	pop	r15
    23da:	ef 90       	pop	r14
    23dc:	df 90       	pop	r13
    23de:	cf 90       	pop	r12
    23e0:	bf 90       	pop	r11
    23e2:	af 90       	pop	r10
    23e4:	9f 90       	pop	r9
    23e6:	08 95       	ret

000023e8 <_Z10timerseitev>:

void timerseite(){
    23e8:	af 92       	push	r10
    23ea:	bf 92       	push	r11
    23ec:	df 92       	push	r13
    23ee:	ef 92       	push	r14
    23f0:	0f 93       	push	r16
    23f2:	1f 93       	push	r17
    23f4:	cf 93       	push	r28
    23f6:	df 93       	push	r29
    23f8:	cd b7       	in	r28, 0x3d	; 61
    23fa:	de b7       	in	r29, 0x3e	; 62
    23fc:	64 97       	sbiw	r28, 0x14	; 20
    23fe:	0f b6       	in	r0, 0x3f	; 63
    2400:	f8 94       	cli
    2402:	de bf       	out	0x3e, r29	; 62
    2404:	0f be       	out	0x3f, r0	; 63
    2406:	cd bf       	out	0x3d, r28	; 61
	char buffer[20];
	uint8_t buffersize=0;
	oled.clearFrame();
    2408:	86 e2       	ldi	r24, 0x26	; 38
    240a:	93 e0       	ldi	r25, 0x03	; 3
    240c:	0e 94 ed 02 	call	0x5da	; 0x5da <_ZN7Display10clearFrameEv>
	buffersize=sprintf(buffer,"Timer: ");
    2410:	88 e0       	ldi	r24, 0x08	; 8
    2412:	e3 e7       	ldi	r30, 0x73	; 115
    2414:	f2 e0       	ldi	r31, 0x02	; 2
    2416:	8e 01       	movw	r16, r28
    2418:	0f 5f       	subi	r16, 0xFF	; 255
    241a:	1f 4f       	sbci	r17, 0xFF	; 255
    241c:	d8 01       	movw	r26, r16
    241e:	01 90       	ld	r0, Z+
    2420:	0d 92       	st	X+, r0
    2422:	8a 95       	dec	r24
    2424:	e1 f7       	brne	.-8      	; 0x241e <_Z10timerseitev+0x36>
    2426:	d0 2e       	mov	r13, r16
    2428:	e1 2e       	mov	r14, r17
    242a:	58 01       	movw	r10, r16
    242c:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,0*charhighte);}
    242e:	f5 01       	movw	r30, r10
    2430:	61 91       	ld	r22, Z+
    2432:	5f 01       	movw	r10, r30
    2434:	20 e0       	ldi	r18, 0x00	; 0
    2436:	41 2f       	mov	r20, r17
    2438:	86 e2       	ldi	r24, 0x26	; 38
    243a:	93 e0       	ldi	r25, 0x03	; 3
    243c:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    2440:	1a 5f       	subi	r17, 0xFA	; 250
    2442:	1a 32       	cpi	r17, 0x2A	; 42
    2444:	a1 f7       	brne	.-24     	; 0x242e <_Z10timerseitev+0x46>
	if (pos!=0)
    2446:	60 91 0c 03 	lds	r22, 0x030C
    244a:	66 23       	and	r22, r22
    244c:	39 f0       	breq	.+14     	; 0x245c <_Z10timerseitev+0x74>
	{
		oled.draw_ASCI(pos+'0',buffersize*charsize,0*charhighte);
    244e:	60 5d       	subi	r22, 0xD0	; 208
    2450:	20 e0       	ldi	r18, 0x00	; 0
    2452:	4a e2       	ldi	r20, 0x2A	; 42
    2454:	86 e2       	ldi	r24, 0x26	; 38
    2456:	93 e0       	ldi	r25, 0x03	; 3
    2458:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
	}
		
	buffer[0]=zaehler.Stunden/10;
    245c:	90 91 4f 07 	lds	r25, 0x074F
    2460:	8d ec       	ldi	r24, 0xCD	; 205
    2462:	98 9f       	mul	r25, r24
    2464:	21 2d       	mov	r18, r1
    2466:	11 24       	eor	r1, r1
    2468:	26 95       	lsr	r18
    246a:	26 95       	lsr	r18
    246c:	26 95       	lsr	r18
    246e:	29 83       	std	Y+1, r18	; 0x01
	buffer[1]=zaehler.Stunden%10;
    2470:	22 0f       	add	r18, r18
    2472:	32 2f       	mov	r19, r18
    2474:	33 0f       	add	r19, r19
    2476:	33 0f       	add	r19, r19
    2478:	23 0f       	add	r18, r19
    247a:	92 1b       	sub	r25, r18
    247c:	9a 83       	std	Y+2, r25	; 0x02
	buffer[2]=':';
    247e:	9a e3       	ldi	r25, 0x3A	; 58
    2480:	9b 83       	std	Y+3, r25	; 0x03
	buffer[3]=zaehler.Minuten/10;
    2482:	20 91 50 07 	lds	r18, 0x0750
    2486:	28 9f       	mul	r18, r24
    2488:	31 2d       	mov	r19, r1
    248a:	11 24       	eor	r1, r1
    248c:	36 95       	lsr	r19
    248e:	36 95       	lsr	r19
    2490:	36 95       	lsr	r19
    2492:	3c 83       	std	Y+4, r19	; 0x04
	buffer[4]=zaehler.Minuten%10;
    2494:	33 0f       	add	r19, r19
    2496:	43 2f       	mov	r20, r19
    2498:	44 0f       	add	r20, r20
    249a:	44 0f       	add	r20, r20
    249c:	34 0f       	add	r19, r20
    249e:	23 1b       	sub	r18, r19
    24a0:	2d 83       	std	Y+5, r18	; 0x05
	buffer[5]=':';
    24a2:	9e 83       	std	Y+6, r25	; 0x06
	buffer[6]=zaehler.Sekunden/10;
    24a4:	90 91 51 07 	lds	r25, 0x0751
    24a8:	98 9f       	mul	r25, r24
    24aa:	81 2d       	mov	r24, r1
    24ac:	11 24       	eor	r1, r1
    24ae:	86 95       	lsr	r24
    24b0:	86 95       	lsr	r24
    24b2:	86 95       	lsr	r24
    24b4:	8f 83       	std	Y+7, r24	; 0x07
	buffer[7]=zaehler.Sekunden%10;
    24b6:	88 0f       	add	r24, r24
    24b8:	28 2f       	mov	r18, r24
    24ba:	22 0f       	add	r18, r18
    24bc:	22 0f       	add	r18, r18
    24be:	82 0f       	add	r24, r18
    24c0:	98 1b       	sub	r25, r24
    24c2:	98 87       	std	Y+8, r25	; 0x08
    24c4:	ad 2c       	mov	r10, r13
    24c6:	be 2c       	mov	r11, r14
    24c8:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<bitsderrtc;i++){
		if (buffer[i]==':')
    24ca:	f5 01       	movw	r30, r10
    24cc:	61 91       	ld	r22, Z+
    24ce:	5f 01       	movw	r10, r30
    24d0:	6a 33       	cpi	r22, 0x3A	; 58
    24d2:	39 f4       	brne	.+14     	; 0x24e2 <_Z10timerseitev+0xfa>
		{
			oled.draw_ASCI(buffer[i],i*numbersmalsize,2.5*charhighte);
    24d4:	24 e1       	ldi	r18, 0x14	; 20
    24d6:	41 2f       	mov	r20, r17
    24d8:	86 e2       	ldi	r24, 0x26	; 38
    24da:	93 e0       	ldi	r25, 0x03	; 3
    24dc:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    24e0:	06 c0       	rjmp	.+12     	; 0x24ee <_Z10timerseitev+0x106>
		}
		else{
			oled.draw_number16x16(buffer[i],i*numbersmalsize,2*charhighte);
    24e2:	20 e1       	ldi	r18, 0x10	; 16
    24e4:	41 2f       	mov	r20, r17
    24e6:	86 e2       	ldi	r24, 0x26	; 38
    24e8:	93 e0       	ldi	r25, 0x03	; 3
    24ea:	0e 94 26 06 	call	0xc4c	; 0xc4c <_ZN7Display16draw_number16x16Ehhh>
    24ee:	10 5f       	subi	r17, 0xF0	; 240
	buffer[3]=zaehler.Minuten/10;
	buffer[4]=zaehler.Minuten%10;
	buffer[5]=':';
	buffer[6]=zaehler.Sekunden/10;
	buffer[7]=zaehler.Sekunden%10;
	for(uint8_t i=0;i<bitsderrtc;i++){
    24f0:	10 38       	cpi	r17, 0x80	; 128
    24f2:	59 f7       	brne	.-42     	; 0x24ca <_Z10timerseitev+0xe2>
		}
		else{
			oled.draw_number16x16(buffer[i],i*numbersmalsize,2*charhighte);
		}
	}
}
    24f4:	64 96       	adiw	r28, 0x14	; 20
    24f6:	0f b6       	in	r0, 0x3f	; 63
    24f8:	f8 94       	cli
    24fa:	de bf       	out	0x3e, r29	; 62
    24fc:	0f be       	out	0x3f, r0	; 63
    24fe:	cd bf       	out	0x3d, r28	; 61
    2500:	df 91       	pop	r29
    2502:	cf 91       	pop	r28
    2504:	1f 91       	pop	r17
    2506:	0f 91       	pop	r16
    2508:	ef 90       	pop	r14
    250a:	df 90       	pop	r13
    250c:	bf 90       	pop	r11
    250e:	af 90       	pop	r10
    2510:	08 95       	ret

00002512 <_Z13Stoppuhrseitev>:

void Stoppuhrseite(){
    2512:	af 92       	push	r10
    2514:	bf 92       	push	r11
    2516:	df 92       	push	r13
    2518:	ef 92       	push	r14
    251a:	0f 93       	push	r16
    251c:	1f 93       	push	r17
    251e:	cf 93       	push	r28
    2520:	df 93       	push	r29
    2522:	cd b7       	in	r28, 0x3d	; 61
    2524:	de b7       	in	r29, 0x3e	; 62
    2526:	64 97       	sbiw	r28, 0x14	; 20
    2528:	0f b6       	in	r0, 0x3f	; 63
    252a:	f8 94       	cli
    252c:	de bf       	out	0x3e, r29	; 62
    252e:	0f be       	out	0x3f, r0	; 63
    2530:	cd bf       	out	0x3d, r28	; 61
	char buffer[20];
	uint8_t buffersize=0;
	oled.clearFrame();
    2532:	86 e2       	ldi	r24, 0x26	; 38
    2534:	93 e0       	ldi	r25, 0x03	; 3
    2536:	0e 94 ed 02 	call	0x5da	; 0x5da <_ZN7Display10clearFrameEv>
	buffersize=sprintf(buffer,"Stoppuhr: ");
    253a:	8b e0       	ldi	r24, 0x0B	; 11
    253c:	eb e7       	ldi	r30, 0x7B	; 123
    253e:	f2 e0       	ldi	r31, 0x02	; 2
    2540:	8e 01       	movw	r16, r28
    2542:	0f 5f       	subi	r16, 0xFF	; 255
    2544:	1f 4f       	sbci	r17, 0xFF	; 255
    2546:	d8 01       	movw	r26, r16
    2548:	01 90       	ld	r0, Z+
    254a:	0d 92       	st	X+, r0
    254c:	8a 95       	dec	r24
    254e:	e1 f7       	brne	.-8      	; 0x2548 <_Z13Stoppuhrseitev+0x36>
    2550:	d0 2e       	mov	r13, r16
    2552:	e1 2e       	mov	r14, r17
    2554:	58 01       	movw	r10, r16
    2556:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,0*charhighte);}
    2558:	f5 01       	movw	r30, r10
    255a:	61 91       	ld	r22, Z+
    255c:	5f 01       	movw	r10, r30
    255e:	20 e0       	ldi	r18, 0x00	; 0
    2560:	41 2f       	mov	r20, r17
    2562:	86 e2       	ldi	r24, 0x26	; 38
    2564:	93 e0       	ldi	r25, 0x03	; 3
    2566:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    256a:	1a 5f       	subi	r17, 0xFA	; 250
    256c:	1c 33       	cpi	r17, 0x3C	; 60
    256e:	a1 f7       	brne	.-24     	; 0x2558 <_Z13Stoppuhrseitev+0x46>
	
	buffer[0]=stoppuhr.Stunden/10;
    2570:	90 91 37 07 	lds	r25, 0x0737
    2574:	8d ec       	ldi	r24, 0xCD	; 205
    2576:	98 9f       	mul	r25, r24
    2578:	21 2d       	mov	r18, r1
    257a:	11 24       	eor	r1, r1
    257c:	26 95       	lsr	r18
    257e:	26 95       	lsr	r18
    2580:	26 95       	lsr	r18
    2582:	29 83       	std	Y+1, r18	; 0x01
	buffer[1]=stoppuhr.Stunden%10;
    2584:	22 0f       	add	r18, r18
    2586:	32 2f       	mov	r19, r18
    2588:	33 0f       	add	r19, r19
    258a:	33 0f       	add	r19, r19
    258c:	23 0f       	add	r18, r19
    258e:	92 1b       	sub	r25, r18
    2590:	9a 83       	std	Y+2, r25	; 0x02
	buffer[2]=':';
    2592:	9a e3       	ldi	r25, 0x3A	; 58
    2594:	9b 83       	std	Y+3, r25	; 0x03
	buffer[3]=stoppuhr.Minuten/10;
    2596:	20 91 38 07 	lds	r18, 0x0738
    259a:	28 9f       	mul	r18, r24
    259c:	31 2d       	mov	r19, r1
    259e:	11 24       	eor	r1, r1
    25a0:	36 95       	lsr	r19
    25a2:	36 95       	lsr	r19
    25a4:	36 95       	lsr	r19
    25a6:	3c 83       	std	Y+4, r19	; 0x04
	buffer[4]=stoppuhr.Minuten%10;
    25a8:	33 0f       	add	r19, r19
    25aa:	43 2f       	mov	r20, r19
    25ac:	44 0f       	add	r20, r20
    25ae:	44 0f       	add	r20, r20
    25b0:	34 0f       	add	r19, r20
    25b2:	23 1b       	sub	r18, r19
    25b4:	2d 83       	std	Y+5, r18	; 0x05
	buffer[5]=':';
    25b6:	9e 83       	std	Y+6, r25	; 0x06
	buffer[6]=stoppuhr.Sekunden/10;
    25b8:	90 91 39 07 	lds	r25, 0x0739
    25bc:	98 9f       	mul	r25, r24
    25be:	81 2d       	mov	r24, r1
    25c0:	11 24       	eor	r1, r1
    25c2:	86 95       	lsr	r24
    25c4:	86 95       	lsr	r24
    25c6:	86 95       	lsr	r24
    25c8:	8f 83       	std	Y+7, r24	; 0x07
	buffer[7]=stoppuhr.Sekunden%10;
    25ca:	88 0f       	add	r24, r24
    25cc:	28 2f       	mov	r18, r24
    25ce:	22 0f       	add	r18, r18
    25d0:	22 0f       	add	r18, r18
    25d2:	82 0f       	add	r24, r18
    25d4:	98 1b       	sub	r25, r24
    25d6:	98 87       	std	Y+8, r25	; 0x08
    25d8:	ad 2c       	mov	r10, r13
    25da:	be 2c       	mov	r11, r14
    25dc:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<bitsderrtc;i++){
		if (buffer[i]==':')
    25de:	f5 01       	movw	r30, r10
    25e0:	61 91       	ld	r22, Z+
    25e2:	5f 01       	movw	r10, r30
    25e4:	6a 33       	cpi	r22, 0x3A	; 58
    25e6:	39 f4       	brne	.+14     	; 0x25f6 <_Z13Stoppuhrseitev+0xe4>
		{
			oled.draw_ASCI(buffer[i],i*numbersmalsize,2.5*charhighte);
    25e8:	24 e1       	ldi	r18, 0x14	; 20
    25ea:	41 2f       	mov	r20, r17
    25ec:	86 e2       	ldi	r24, 0x26	; 38
    25ee:	93 e0       	ldi	r25, 0x03	; 3
    25f0:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    25f4:	06 c0       	rjmp	.+12     	; 0x2602 <_Z13Stoppuhrseitev+0xf0>
		}
		else{
			oled.draw_number16x16(buffer[i],i*numbersmalsize,2*charhighte);
    25f6:	20 e1       	ldi	r18, 0x10	; 16
    25f8:	41 2f       	mov	r20, r17
    25fa:	86 e2       	ldi	r24, 0x26	; 38
    25fc:	93 e0       	ldi	r25, 0x03	; 3
    25fe:	0e 94 26 06 	call	0xc4c	; 0xc4c <_ZN7Display16draw_number16x16Ehhh>
    2602:	10 5f       	subi	r17, 0xF0	; 240
	buffer[3]=stoppuhr.Minuten/10;
	buffer[4]=stoppuhr.Minuten%10;
	buffer[5]=':';
	buffer[6]=stoppuhr.Sekunden/10;
	buffer[7]=stoppuhr.Sekunden%10;
	for(uint8_t i=0;i<bitsderrtc;i++){
    2604:	10 38       	cpi	r17, 0x80	; 128
    2606:	59 f7       	brne	.-42     	; 0x25de <_Z13Stoppuhrseitev+0xcc>
		}
		else{
			oled.draw_number16x16(buffer[i],i*numbersmalsize,2*charhighte);
		}
	}
}
    2608:	64 96       	adiw	r28, 0x14	; 20
    260a:	0f b6       	in	r0, 0x3f	; 63
    260c:	f8 94       	cli
    260e:	de bf       	out	0x3e, r29	; 62
    2610:	0f be       	out	0x3f, r0	; 63
    2612:	cd bf       	out	0x3d, r28	; 61
    2614:	df 91       	pop	r29
    2616:	cf 91       	pop	r28
    2618:	1f 91       	pop	r17
    261a:	0f 91       	pop	r16
    261c:	ef 90       	pop	r14
    261e:	df 90       	pop	r13
    2620:	bf 90       	pop	r11
    2622:	af 90       	pop	r10
    2624:	08 95       	ret

00002626 <_Z14Pressuresensorv>:

void Pressuresensor(){
    2626:	bf 92       	push	r11
    2628:	cf 92       	push	r12
    262a:	df 92       	push	r13
    262c:	ef 92       	push	r14
    262e:	ff 92       	push	r15
    2630:	0f 93       	push	r16
    2632:	1f 93       	push	r17
    2634:	cf 93       	push	r28
    2636:	df 93       	push	r29
    2638:	cd b7       	in	r28, 0x3d	; 61
    263a:	de b7       	in	r29, 0x3e	; 62
    263c:	64 97       	sbiw	r28, 0x14	; 20
    263e:	0f b6       	in	r0, 0x3f	; 63
    2640:	f8 94       	cli
    2642:	de bf       	out	0x3e, r29	; 62
    2644:	0f be       	out	0x3f, r0	; 63
    2646:	cd bf       	out	0x3d, r28	; 61
	Baro.READ_Pressure_once();
    2648:	83 e1       	ldi	r24, 0x13	; 19
    264a:	93 e0       	ldi	r25, 0x03	; 3
    264c:	0e 94 17 22 	call	0x442e	; 0x442e <_ZN8Pressure18READ_Pressure_onceEv>
	Baro.READ_Temperature();
    2650:	83 e1       	ldi	r24, 0x13	; 19
    2652:	93 e0       	ldi	r25, 0x03	; 3
    2654:	0e 94 9f 22 	call	0x453e	; 0x453e <_ZN8Pressure16READ_TemperatureEv>
	char buffer[20];
	uint8_t buffersize=0;
	oled.clearFrame();
    2658:	86 e2       	ldi	r24, 0x26	; 38
    265a:	93 e0       	ldi	r25, 0x03	; 3
    265c:	0e 94 ed 02 	call	0x5da	; 0x5da <_ZN7Display10clearFrameEv>
	header(0);
    2660:	80 e0       	ldi	r24, 0x00	; 0
    2662:	0e 94 19 0a 	call	0x1432	; 0x1432 <_Z6headerh>
	bottom(0);
    2666:	80 e0       	ldi	r24, 0x00	; 0
    2668:	0e 94 83 0a 	call	0x1506	; 0x1506 <_Z6bottomh>
	buffersize=sprintf(buffer,"LPS25H Daten:");
    266c:	8e e0       	ldi	r24, 0x0E	; 14
    266e:	e6 e8       	ldi	r30, 0x86	; 134
    2670:	f2 e0       	ldi	r31, 0x02	; 2
    2672:	8e 01       	movw	r16, r28
    2674:	0f 5f       	subi	r16, 0xFF	; 255
    2676:	1f 4f       	sbci	r17, 0xFF	; 255
    2678:	d8 01       	movw	r26, r16
    267a:	01 90       	ld	r0, Z+
    267c:	0d 92       	st	X+, r0
    267e:	8a 95       	dec	r24
    2680:	e1 f7       	brne	.-8      	; 0x267a <_Z14Pressuresensorv+0x54>
    2682:	c0 2e       	mov	r12, r16
    2684:	d1 2e       	mov	r13, r17
    2686:	78 01       	movw	r14, r16
    2688:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,2*charhighte);}
    268a:	f7 01       	movw	r30, r14
    268c:	61 91       	ld	r22, Z+
    268e:	7f 01       	movw	r14, r30
    2690:	20 e1       	ldi	r18, 0x10	; 16
    2692:	41 2f       	mov	r20, r17
    2694:	86 e2       	ldi	r24, 0x26	; 38
    2696:	93 e0       	ldi	r25, 0x03	; 3
    2698:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    269c:	1a 5f       	subi	r17, 0xFA	; 250
    269e:	1e 34       	cpi	r17, 0x4E	; 78
    26a0:	a1 f7       	brne	.-24     	; 0x268a <_Z14Pressuresensorv+0x64>
	buffersize=sprintf(buffer,"%.1f HPa",Baro.Press);
    26a2:	e3 e1       	ldi	r30, 0x13	; 19
    26a4:	f3 e0       	ldi	r31, 0x03	; 3
    26a6:	83 81       	ldd	r24, Z+3	; 0x03
    26a8:	8f 93       	push	r24
    26aa:	82 81       	ldd	r24, Z+2	; 0x02
    26ac:	8f 93       	push	r24
    26ae:	81 81       	ldd	r24, Z+1	; 0x01
    26b0:	8f 93       	push	r24
    26b2:	80 81       	ld	r24, Z
    26b4:	8f 93       	push	r24
    26b6:	84 e9       	ldi	r24, 0x94	; 148
    26b8:	92 e0       	ldi	r25, 0x02	; 2
    26ba:	9f 93       	push	r25
    26bc:	8f 93       	push	r24
    26be:	ce 01       	movw	r24, r28
    26c0:	01 96       	adiw	r24, 0x01	; 1
    26c2:	9f 93       	push	r25
    26c4:	8f 93       	push	r24
    26c6:	0e 94 ec 2c 	call	0x59d8	; 0x59d8 <sprintf>
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,3*charhighte);}
    26ca:	0f b6       	in	r0, 0x3f	; 63
    26cc:	f8 94       	cli
    26ce:	de bf       	out	0x3e, r29	; 62
    26d0:	0f be       	out	0x3f, r0	; 63
    26d2:	cd bf       	out	0x3d, r28	; 61
    26d4:	88 23       	and	r24, r24
    26d6:	d1 f0       	breq	.+52     	; 0x270c <_Z14Pressuresensorv+0xe6>
    26d8:	81 50       	subi	r24, 0x01	; 1
    26da:	68 94       	set
    26dc:	ee 24       	eor	r14, r14
    26de:	e1 f8       	bld	r14, 1
    26e0:	f1 2c       	mov	r15, r1
    26e2:	ec 0e       	add	r14, r28
    26e4:	fd 1e       	adc	r15, r29
    26e6:	e8 0e       	add	r14, r24
    26e8:	f1 1c       	adc	r15, r1
    26ea:	0c 2d       	mov	r16, r12
    26ec:	1d 2d       	mov	r17, r13
    26ee:	b1 2c       	mov	r11, r1
    26f0:	f8 01       	movw	r30, r16
    26f2:	61 91       	ld	r22, Z+
    26f4:	8f 01       	movw	r16, r30
    26f6:	28 e1       	ldi	r18, 0x18	; 24
    26f8:	4b 2d       	mov	r20, r11
    26fa:	86 e2       	ldi	r24, 0x26	; 38
    26fc:	93 e0       	ldi	r25, 0x03	; 3
    26fe:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    2702:	f6 e0       	ldi	r31, 0x06	; 6
    2704:	bf 0e       	add	r11, r31
    2706:	0e 15       	cp	r16, r14
    2708:	1f 05       	cpc	r17, r15
    270a:	91 f7       	brne	.-28     	; 0x26f0 <_Z14Pressuresensorv+0xca>
	buffersize=sprintf(buffer,"Hoehe: %.1f m",(double)Baro.altitude(Baro.Press));
    270c:	40 91 13 03 	lds	r20, 0x0313
    2710:	50 91 14 03 	lds	r21, 0x0314
    2714:	60 91 15 03 	lds	r22, 0x0315
    2718:	70 91 16 03 	lds	r23, 0x0316
    271c:	83 e1       	ldi	r24, 0x13	; 19
    271e:	93 e0       	ldi	r25, 0x03	; 3
    2720:	0e 94 1c 23 	call	0x4638	; 0x4638 <_ZN8Pressure8altitudeEd>
    2724:	9f 93       	push	r25
    2726:	8f 93       	push	r24
    2728:	7f 93       	push	r23
    272a:	6f 93       	push	r22
    272c:	8d e9       	ldi	r24, 0x9D	; 157
    272e:	92 e0       	ldi	r25, 0x02	; 2
    2730:	9f 93       	push	r25
    2732:	8f 93       	push	r24
    2734:	ce 01       	movw	r24, r28
    2736:	01 96       	adiw	r24, 0x01	; 1
    2738:	9f 93       	push	r25
    273a:	8f 93       	push	r24
    273c:	0e 94 ec 2c 	call	0x59d8	; 0x59d8 <sprintf>
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,4*charhighte);}
    2740:	0f b6       	in	r0, 0x3f	; 63
    2742:	f8 94       	cli
    2744:	de bf       	out	0x3e, r29	; 62
    2746:	0f be       	out	0x3f, r0	; 63
    2748:	cd bf       	out	0x3d, r28	; 61
    274a:	88 23       	and	r24, r24
    274c:	d1 f0       	breq	.+52     	; 0x2782 <_Z14Pressuresensorv+0x15c>
    274e:	81 50       	subi	r24, 0x01	; 1
    2750:	68 94       	set
    2752:	ee 24       	eor	r14, r14
    2754:	e1 f8       	bld	r14, 1
    2756:	f1 2c       	mov	r15, r1
    2758:	ec 0e       	add	r14, r28
    275a:	fd 1e       	adc	r15, r29
    275c:	e8 0e       	add	r14, r24
    275e:	f1 1c       	adc	r15, r1
    2760:	0c 2d       	mov	r16, r12
    2762:	1d 2d       	mov	r17, r13
    2764:	b1 2c       	mov	r11, r1
    2766:	f8 01       	movw	r30, r16
    2768:	61 91       	ld	r22, Z+
    276a:	8f 01       	movw	r16, r30
    276c:	20 e2       	ldi	r18, 0x20	; 32
    276e:	4b 2d       	mov	r20, r11
    2770:	86 e2       	ldi	r24, 0x26	; 38
    2772:	93 e0       	ldi	r25, 0x03	; 3
    2774:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    2778:	f6 e0       	ldi	r31, 0x06	; 6
    277a:	bf 0e       	add	r11, r31
    277c:	0e 15       	cp	r16, r14
    277e:	1f 05       	cpc	r17, r15
    2780:	91 f7       	brne	.-28     	; 0x2766 <_Z14Pressuresensorv+0x140>
	buffersize=sprintf(buffer,"%.1f C",(double)Baro.Tempera);
    2782:	e7 e1       	ldi	r30, 0x17	; 23
    2784:	f3 e0       	ldi	r31, 0x03	; 3
    2786:	83 81       	ldd	r24, Z+3	; 0x03
    2788:	8f 93       	push	r24
    278a:	82 81       	ldd	r24, Z+2	; 0x02
    278c:	8f 93       	push	r24
    278e:	81 81       	ldd	r24, Z+1	; 0x01
    2790:	8f 93       	push	r24
    2792:	80 81       	ld	r24, Z
    2794:	8f 93       	push	r24
    2796:	8d ef       	ldi	r24, 0xFD	; 253
    2798:	91 e0       	ldi	r25, 0x01	; 1
    279a:	9f 93       	push	r25
    279c:	8f 93       	push	r24
    279e:	ce 01       	movw	r24, r28
    27a0:	01 96       	adiw	r24, 0x01	; 1
    27a2:	9f 93       	push	r25
    27a4:	8f 93       	push	r24
    27a6:	0e 94 ec 2c 	call	0x59d8	; 0x59d8 <sprintf>
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,6*charhighte);}
    27aa:	0f b6       	in	r0, 0x3f	; 63
    27ac:	f8 94       	cli
    27ae:	de bf       	out	0x3e, r29	; 62
    27b0:	0f be       	out	0x3f, r0	; 63
    27b2:	cd bf       	out	0x3d, r28	; 61
    27b4:	88 23       	and	r24, r24
    27b6:	d1 f0       	breq	.+52     	; 0x27ec <_Z14Pressuresensorv+0x1c6>
    27b8:	81 50       	subi	r24, 0x01	; 1
    27ba:	68 94       	set
    27bc:	ee 24       	eor	r14, r14
    27be:	e1 f8       	bld	r14, 1
    27c0:	f1 2c       	mov	r15, r1
    27c2:	ec 0e       	add	r14, r28
    27c4:	fd 1e       	adc	r15, r29
    27c6:	e8 0e       	add	r14, r24
    27c8:	f1 1c       	adc	r15, r1
    27ca:	0c 2d       	mov	r16, r12
    27cc:	1d 2d       	mov	r17, r13
    27ce:	d1 2c       	mov	r13, r1
    27d0:	f8 01       	movw	r30, r16
    27d2:	61 91       	ld	r22, Z+
    27d4:	8f 01       	movw	r16, r30
    27d6:	20 e3       	ldi	r18, 0x30	; 48
    27d8:	4d 2d       	mov	r20, r13
    27da:	86 e2       	ldi	r24, 0x26	; 38
    27dc:	93 e0       	ldi	r25, 0x03	; 3
    27de:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    27e2:	f6 e0       	ldi	r31, 0x06	; 6
    27e4:	df 0e       	add	r13, r31
    27e6:	0e 15       	cp	r16, r14
    27e8:	1f 05       	cpc	r17, r15
    27ea:	91 f7       	brne	.-28     	; 0x27d0 <_Z14Pressuresensorv+0x1aa>
	//buffersize=sprintf(buffer,"%i",Baro.Wertedruck[1]);
	//for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,4*charhighte);}
	//buffersize=sprintf(buffer,"%i",Baro.Wertedruck[2]);
	//for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,5*charhighte);}
}
    27ec:	64 96       	adiw	r28, 0x14	; 20
    27ee:	0f b6       	in	r0, 0x3f	; 63
    27f0:	f8 94       	cli
    27f2:	de bf       	out	0x3e, r29	; 62
    27f4:	0f be       	out	0x3f, r0	; 63
    27f6:	cd bf       	out	0x3d, r28	; 61
    27f8:	df 91       	pop	r29
    27fa:	cf 91       	pop	r28
    27fc:	1f 91       	pop	r17
    27fe:	0f 91       	pop	r16
    2800:	ff 90       	pop	r15
    2802:	ef 90       	pop	r14
    2804:	df 90       	pop	r13
    2806:	cf 90       	pop	r12
    2808:	bf 90       	pop	r11
    280a:	08 95       	ret

0000280c <_Z13uhreinstellenv>:

void uhreinstellen(){
    280c:	2f 92       	push	r2
    280e:	3f 92       	push	r3
    2810:	4f 92       	push	r4
    2812:	5f 92       	push	r5
    2814:	6f 92       	push	r6
    2816:	7f 92       	push	r7
    2818:	8f 92       	push	r8
    281a:	9f 92       	push	r9
    281c:	af 92       	push	r10
    281e:	bf 92       	push	r11
    2820:	cf 92       	push	r12
    2822:	df 92       	push	r13
    2824:	ef 92       	push	r14
    2826:	ff 92       	push	r15
    2828:	0f 93       	push	r16
    282a:	1f 93       	push	r17
    282c:	cf 93       	push	r28
    282e:	df 93       	push	r29
    2830:	cd b7       	in	r28, 0x3d	; 61
    2832:	de b7       	in	r29, 0x3e	; 62
    2834:	66 97       	sbiw	r28, 0x16	; 22
    2836:	0f b6       	in	r0, 0x3f	; 63
    2838:	f8 94       	cli
    283a:	de bf       	out	0x3e, r29	; 62
    283c:	0f be       	out	0x3f, r0	; 63
    283e:	cd bf       	out	0x3d, r28	; 61
	rtc.RTCstop();
    2840:	87 e5       	ldi	r24, 0x57	; 87
    2842:	97 e0       	ldi	r25, 0x07	; 7
    2844:	0e 94 7f 24 	call	0x48fe	; 0x48fe <_ZN3RTC7RTCstopEv>
	
	oled.clearFrame();
    2848:	86 e2       	ldi	r24, 0x26	; 38
    284a:	93 e0       	ldi	r25, 0x03	; 3
    284c:	0e 94 ed 02 	call	0x5da	; 0x5da <_ZN7Display10clearFrameEv>
	char buffer[20];
	uint8_t buffersize;
	uint8_t pos=0;
    2850:	91 2c       	mov	r9, r1
	while(pos<11){
		buffersize=sprintf(buffer,"Uhreinstellung");
    2852:	0f 2e       	mov	r0, r31
    2854:	ff e0       	ldi	r31, 0x0F	; 15
    2856:	6f 2e       	mov	r6, r31
    2858:	f0 2d       	mov	r31, r0
    285a:	ce 01       	movw	r24, r28
    285c:	01 96       	adiw	r24, 0x01	; 1
    285e:	7c 01       	movw	r14, r24
    2860:	78 2e       	mov	r7, r24
    2862:	8f 2c       	mov	r8, r15
    2864:	b1 2c       	mov	r11, r1
		for(uint8_t i = 0; i<buffersize;i++){
			oled.draw_ASCI(buffer[i],charsize*i,0);
		}
		buffersize=sprintf(buffer,"--------------");
    2866:	8d 8b       	std	Y+21, r24	; 0x15
    2868:	fe 8a       	std	Y+22, r15	; 0x16
		for(uint8_t i = 0; i<buffersize;i++){
			oled.draw_ASCI(buffer[i],charsize*i,8);
		}
		buffer[0]=rtc.Stunden/10;
    286a:	0f 2e       	mov	r0, r31
    286c:	fd ec       	ldi	r31, 0xCD	; 205
    286e:	af 2e       	mov	r10, r31
    2870:	f0 2d       	mov	r31, r0
		buffer[1]=rtc.Stunden%10;
		buffer[2]=':';
		buffer[3]=rtc.Minuten/10;
		buffer[4]=rtc.Minuten%10;
		buffer[5]=' ';
		buffer[6]=rtc.Tag/10;
    2872:	0f 2e       	mov	r0, r31
    2874:	fb e6       	ldi	r31, 0x6B	; 107
    2876:	4f 2e       	mov	r4, r31
    2878:	f7 e0       	ldi	r31, 0x07	; 7
    287a:	5f 2e       	mov	r5, r31
    287c:	f0 2d       	mov	r31, r0
		buffer[7]=rtc.Tag%10;
		buffer[8]='.';
		buffer[9]=rtc.Monat/10;
    287e:	0f 2e       	mov	r0, r31
    2880:	fc e6       	ldi	r31, 0x6C	; 108
    2882:	cf 2e       	mov	r12, r31
    2884:	f7 e0       	ldi	r31, 0x07	; 7
    2886:	df 2e       	mov	r13, r31
    2888:	f0 2d       	mov	r31, r0
	oled.clearFrame();
	char buffer[20];
	uint8_t buffersize;
	uint8_t pos=0;
	while(pos<11){
		buffersize=sprintf(buffer,"Uhreinstellung");
    288a:	eb ea       	ldi	r30, 0xAB	; 171
    288c:	f2 e0       	ldi	r31, 0x02	; 2
    288e:	a7 2d       	mov	r26, r7
    2890:	b8 2d       	mov	r27, r8
    2892:	86 2d       	mov	r24, r6
    2894:	01 90       	ld	r0, Z+
    2896:	0d 92       	st	X+, r0
    2898:	8a 95       	dec	r24
    289a:	e1 f7       	brne	.-8      	; 0x2894 <_Z13uhreinstellenv+0x88>
    289c:	27 2c       	mov	r2, r7
    289e:	38 2c       	mov	r3, r8
    28a0:	1b 2d       	mov	r17, r11
		for(uint8_t i = 0; i<buffersize;i++){
			oled.draw_ASCI(buffer[i],charsize*i,0);
    28a2:	f1 01       	movw	r30, r2
    28a4:	61 91       	ld	r22, Z+
    28a6:	1f 01       	movw	r2, r30
    28a8:	2b 2d       	mov	r18, r11
    28aa:	41 2f       	mov	r20, r17
    28ac:	86 e2       	ldi	r24, 0x26	; 38
    28ae:	93 e0       	ldi	r25, 0x03	; 3
    28b0:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    28b4:	1a 5f       	subi	r17, 0xFA	; 250
	char buffer[20];
	uint8_t buffersize;
	uint8_t pos=0;
	while(pos<11){
		buffersize=sprintf(buffer,"Uhreinstellung");
		for(uint8_t i = 0; i<buffersize;i++){
    28b6:	14 35       	cpi	r17, 0x54	; 84
    28b8:	a1 f7       	brne	.-24     	; 0x28a2 <_Z13uhreinstellenv+0x96>
			oled.draw_ASCI(buffer[i],charsize*i,0);
		}
		buffersize=sprintf(buffer,"--------------");
    28ba:	ef e0       	ldi	r30, 0x0F	; 15
    28bc:	f1 e0       	ldi	r31, 0x01	; 1
    28be:	a7 2d       	mov	r26, r7
    28c0:	b8 2d       	mov	r27, r8
    28c2:	86 2d       	mov	r24, r6
    28c4:	01 90       	ld	r0, Z+
    28c6:	0d 92       	st	X+, r0
    28c8:	8a 95       	dec	r24
    28ca:	e1 f7       	brne	.-8      	; 0x28c4 <_Z13uhreinstellenv+0xb8>
    28cc:	2d 88       	ldd	r2, Y+21	; 0x15
    28ce:	3e 88       	ldd	r3, Y+22	; 0x16
    28d0:	1b 2d       	mov	r17, r11
		for(uint8_t i = 0; i<buffersize;i++){
			oled.draw_ASCI(buffer[i],charsize*i,8);
    28d2:	f1 01       	movw	r30, r2
    28d4:	61 91       	ld	r22, Z+
    28d6:	1f 01       	movw	r2, r30
    28d8:	28 e0       	ldi	r18, 0x08	; 8
    28da:	41 2f       	mov	r20, r17
    28dc:	86 e2       	ldi	r24, 0x26	; 38
    28de:	93 e0       	ldi	r25, 0x03	; 3
    28e0:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    28e4:	1a 5f       	subi	r17, 0xFA	; 250
		buffersize=sprintf(buffer,"Uhreinstellung");
		for(uint8_t i = 0; i<buffersize;i++){
			oled.draw_ASCI(buffer[i],charsize*i,0);
		}
		buffersize=sprintf(buffer,"--------------");
		for(uint8_t i = 0; i<buffersize;i++){
    28e6:	14 35       	cpi	r17, 0x54	; 84
    28e8:	a1 f7       	brne	.-24     	; 0x28d2 <_Z13uhreinstellenv+0xc6>
			oled.draw_ASCI(buffer[i],charsize*i,8);
		}
		buffer[0]=rtc.Stunden/10;
    28ea:	e7 e6       	ldi	r30, 0x67	; 103
    28ec:	f7 e0       	ldi	r31, 0x07	; 7
    28ee:	80 81       	ld	r24, Z
    28f0:	8a 9d       	mul	r24, r10
    28f2:	91 2d       	mov	r25, r1
    28f4:	11 24       	eor	r1, r1
    28f6:	96 95       	lsr	r25
    28f8:	96 95       	lsr	r25
    28fa:	96 95       	lsr	r25
    28fc:	99 83       	std	Y+1, r25	; 0x01
		buffer[1]=rtc.Stunden%10;
    28fe:	99 0f       	add	r25, r25
    2900:	29 2f       	mov	r18, r25
    2902:	22 0f       	add	r18, r18
    2904:	22 0f       	add	r18, r18
    2906:	92 0f       	add	r25, r18
    2908:	89 1b       	sub	r24, r25
    290a:	8a 83       	std	Y+2, r24	; 0x02
		buffer[2]=':';
    290c:	fa e3       	ldi	r31, 0x3A	; 58
    290e:	fb 83       	std	Y+3, r31	; 0x03
		buffer[3]=rtc.Minuten/10;
    2910:	e8 e6       	ldi	r30, 0x68	; 104
    2912:	f7 e0       	ldi	r31, 0x07	; 7
    2914:	80 81       	ld	r24, Z
    2916:	8a 9d       	mul	r24, r10
    2918:	91 2d       	mov	r25, r1
    291a:	11 24       	eor	r1, r1
    291c:	96 95       	lsr	r25
    291e:	96 95       	lsr	r25
    2920:	96 95       	lsr	r25
    2922:	9c 83       	std	Y+4, r25	; 0x04
		buffer[4]=rtc.Minuten%10;
    2924:	99 0f       	add	r25, r25
    2926:	29 2f       	mov	r18, r25
    2928:	22 0f       	add	r18, r18
    292a:	22 0f       	add	r18, r18
    292c:	92 0f       	add	r25, r18
    292e:	89 1b       	sub	r24, r25
    2930:	8d 83       	std	Y+5, r24	; 0x05
		buffer[5]=' ';
    2932:	80 e2       	ldi	r24, 0x20	; 32
    2934:	8e 83       	std	Y+6, r24	; 0x06
		buffer[6]=rtc.Tag/10;
    2936:	f2 01       	movw	r30, r4
    2938:	80 81       	ld	r24, Z
    293a:	8a 9d       	mul	r24, r10
    293c:	91 2d       	mov	r25, r1
    293e:	11 24       	eor	r1, r1
    2940:	96 95       	lsr	r25
    2942:	96 95       	lsr	r25
    2944:	96 95       	lsr	r25
    2946:	9f 83       	std	Y+7, r25	; 0x07
		buffer[7]=rtc.Tag%10;
    2948:	99 0f       	add	r25, r25
    294a:	29 2f       	mov	r18, r25
    294c:	22 0f       	add	r18, r18
    294e:	22 0f       	add	r18, r18
    2950:	92 0f       	add	r25, r18
    2952:	89 1b       	sub	r24, r25
    2954:	88 87       	std	Y+8, r24	; 0x08
		buffer[8]='.';
    2956:	8e e2       	ldi	r24, 0x2E	; 46
    2958:	89 87       	std	Y+9, r24	; 0x09
		buffer[9]=rtc.Monat/10;
    295a:	f6 01       	movw	r30, r12
    295c:	90 81       	ld	r25, Z
    295e:	9a 9d       	mul	r25, r10
    2960:	21 2d       	mov	r18, r1
    2962:	11 24       	eor	r1, r1
    2964:	26 95       	lsr	r18
    2966:	26 95       	lsr	r18
    2968:	26 95       	lsr	r18
    296a:	2a 87       	std	Y+10, r18	; 0x0a
		buffer[10]=rtc.Monat%10;
    296c:	22 0f       	add	r18, r18
    296e:	32 2f       	mov	r19, r18
    2970:	33 0f       	add	r19, r19
    2972:	33 0f       	add	r19, r19
    2974:	23 0f       	add	r18, r19
    2976:	92 1b       	sub	r25, r18
    2978:	9b 87       	std	Y+11, r25	; 0x0b
		buffer[11]='.';
    297a:	8c 87       	std	Y+12, r24	; 0x0c
		buffer[12]=rtc.Jahr/10;
    297c:	ed e6       	ldi	r30, 0x6D	; 109
    297e:	f7 e0       	ldi	r31, 0x07	; 7
    2980:	80 81       	ld	r24, Z
    2982:	8a 9d       	mul	r24, r10
    2984:	91 2d       	mov	r25, r1
    2986:	11 24       	eor	r1, r1
    2988:	96 95       	lsr	r25
    298a:	96 95       	lsr	r25
    298c:	96 95       	lsr	r25
    298e:	9d 87       	std	Y+13, r25	; 0x0d
		buffer[13]=rtc.Jahr%10;
    2990:	99 0f       	add	r25, r25
    2992:	29 2f       	mov	r18, r25
    2994:	22 0f       	add	r18, r18
    2996:	22 0f       	add	r18, r18
    2998:	92 0f       	add	r25, r18
    299a:	89 1b       	sub	r24, r25
    299c:	8e 87       	std	Y+14, r24	; 0x0e
    299e:	3b 2c       	mov	r3, r11
    29a0:	01 e0       	ldi	r16, 0x01	; 1
    29a2:	1b 2d       	mov	r17, r11
    29a4:	04 c0       	rjmp	.+8      	; 0x29ae <_Z13uhreinstellenv+0x1a2>
    29a6:	1f 5f       	subi	r17, 0xFF	; 255
    29a8:	0f 5f       	subi	r16, 0xFF	; 255
    29aa:	f0 e1       	ldi	r31, 0x10	; 16
    29ac:	3f 0e       	add	r3, r31
		buffersize=14;
		for(uint8_t i = 0; i<5;i++){
			if(i!=2){
    29ae:	12 30       	cpi	r17, 0x02	; 2
    29b0:	69 f0       	breq	.+26     	; 0x29cc <_Z13uhreinstellenv+0x1c0>
				oled.draw_number16x16(buffer[i],i*numbersmalsize,2*charhighte);
    29b2:	20 e1       	ldi	r18, 0x10	; 16
    29b4:	43 2d       	mov	r20, r3
    29b6:	f7 01       	movw	r30, r14
    29b8:	e1 0f       	add	r30, r17
    29ba:	f1 1d       	adc	r31, r1
    29bc:	60 81       	ld	r22, Z
    29be:	86 e2       	ldi	r24, 0x26	; 38
    29c0:	93 e0       	ldi	r25, 0x03	; 3
    29c2:	0e 94 26 06 	call	0xc4c	; 0xc4c <_ZN7Display16draw_number16x16Ehhh>
		buffer[10]=rtc.Monat%10;
		buffer[11]='.';
		buffer[12]=rtc.Jahr/10;
		buffer[13]=rtc.Jahr%10;
		buffersize=14;
		for(uint8_t i = 0; i<5;i++){
    29c6:	05 30       	cpi	r16, 0x05	; 5
    29c8:	70 f3       	brcs	.-36     	; 0x29a6 <_Z13uhreinstellenv+0x19a>
    29ca:	08 c0       	rjmp	.+16     	; 0x29dc <_Z13uhreinstellenv+0x1d0>
			if(i!=2){
				oled.draw_number16x16(buffer[i],i*numbersmalsize,2*charhighte);
			}
			else {
				oled.draw_ASCI(buffer[i],i*numbersmalsize+numbersmalsize/2,2*charhighte+charhighte/2);
    29cc:	24 e1       	ldi	r18, 0x14	; 20
    29ce:	48 e2       	ldi	r20, 0x28	; 40
    29d0:	6b 81       	ldd	r22, Y+3	; 0x03
    29d2:	86 e2       	ldi	r24, 0x26	; 38
    29d4:	93 e0       	ldi	r25, 0x03	; 3
    29d6:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    29da:	e5 cf       	rjmp	.-54     	; 0x29a6 <_Z13uhreinstellenv+0x19a>
    29dc:	8e 01       	movw	r16, r28
    29de:	09 5f       	subi	r16, 0xF9	; 249
    29e0:	1f 4f       	sbci	r17, 0xFF	; 255
		buffer[10]=rtc.Monat%10;
		buffer[11]='.';
		buffer[12]=rtc.Jahr/10;
		buffer[13]=rtc.Jahr%10;
		buffersize=14;
		for(uint8_t i = 0; i<5;i++){
    29e2:	2b 2c       	mov	r2, r11
    29e4:	0f 2e       	mov	r0, r31
    29e6:	f6 e0       	ldi	r31, 0x06	; 6
    29e8:	3f 2e       	mov	r3, r31
    29ea:	f0 2d       	mov	r31, r0
			else {
				oled.draw_ASCI(buffer[i],i*numbersmalsize+numbersmalsize/2,2*charhighte+charhighte/2);
			}
		}
		for(uint8_t i = 6; i<buffersize;i++){
			if(i!=8 && i!=11){
    29ec:	88 e0       	ldi	r24, 0x08	; 8
    29ee:	38 16       	cp	r3, r24
    29f0:	61 f0       	breq	.+24     	; 0x2a0a <_Z13uhreinstellenv+0x1fe>
    29f2:	9b e0       	ldi	r25, 0x0B	; 11
    29f4:	39 16       	cp	r3, r25
    29f6:	49 f0       	breq	.+18     	; 0x2a0a <_Z13uhreinstellenv+0x1fe>
				oled.draw_number16x16(buffer[i],i*numbersmalsize-6*numbersmalsize,4*charhighte);
    29f8:	20 e2       	ldi	r18, 0x20	; 32
    29fa:	42 2d       	mov	r20, r2
    29fc:	f8 01       	movw	r30, r16
    29fe:	60 81       	ld	r22, Z
    2a00:	86 e2       	ldi	r24, 0x26	; 38
    2a02:	93 e0       	ldi	r25, 0x03	; 3
    2a04:	0e 94 26 06 	call	0xc4c	; 0xc4c <_ZN7Display16draw_number16x16Ehhh>
    2a08:	09 c0       	rjmp	.+18     	; 0x2a1c <_Z13uhreinstellenv+0x210>
			}
			else {
				oled.draw_ASCI(buffer[i],i*numbersmalsize+numbersmalsize/2-6*numbersmalsize,5*charhighte);
    2a0a:	28 e2       	ldi	r18, 0x28	; 40
    2a0c:	48 e0       	ldi	r20, 0x08	; 8
    2a0e:	42 0d       	add	r20, r2
    2a10:	f8 01       	movw	r30, r16
    2a12:	60 81       	ld	r22, Z
    2a14:	86 e2       	ldi	r24, 0x26	; 38
    2a16:	93 e0       	ldi	r25, 0x03	; 3
    2a18:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
			}
			else {
				oled.draw_ASCI(buffer[i],i*numbersmalsize+numbersmalsize/2,2*charhighte+charhighte/2);
			}
		}
		for(uint8_t i = 6; i<buffersize;i++){
    2a1c:	33 94       	inc	r3
    2a1e:	0f 5f       	subi	r16, 0xFF	; 255
    2a20:	1f 4f       	sbci	r17, 0xFF	; 255
    2a22:	f0 e1       	ldi	r31, 0x10	; 16
    2a24:	2f 0e       	add	r2, r31
    2a26:	8e e0       	ldi	r24, 0x0E	; 14
    2a28:	38 12       	cpse	r3, r24
    2a2a:	e0 cf       	rjmp	.-64     	; 0x29ec <_Z13uhreinstellenv+0x1e0>
			else {
				oled.draw_ASCI(buffer[i],i*numbersmalsize+numbersmalsize/2-6*numbersmalsize,5*charhighte);
			}
		}

		oled.sendFrame();
    2a2c:	86 e2       	ldi	r24, 0x26	; 38
    2a2e:	93 e0       	ldi	r25, 0x03	; 3
    2a30:	0e 94 93 03 	call	0x726	; 0x726 <_ZN7Display9sendFrameEv>
		oled.clearFrame();
    2a34:	86 e2       	ldi	r24, 0x26	; 38
    2a36:	93 e0       	ldi	r25, 0x03	; 3
    2a38:	0e 94 ed 02 	call	0x5da	; 0x5da <_ZN7Display10clearFrameEv>
		switch (pos) {
    2a3c:	89 2d       	mov	r24, r9
    2a3e:	90 e0       	ldi	r25, 0x00	; 0
    2a40:	8a 30       	cpi	r24, 0x0A	; 10
    2a42:	91 05       	cpc	r25, r1
    2a44:	08 f0       	brcs	.+2      	; 0x2a48 <_Z13uhreinstellenv+0x23c>
    2a46:	47 c2       	rjmp	.+1166   	; 0x2ed6 <_Z13uhreinstellenv+0x6ca>
    2a48:	fc 01       	movw	r30, r24
    2a4a:	ec 5c       	subi	r30, 0xCC	; 204
    2a4c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a4e:	0c 94 8f 2b 	jmp	0x571e	; 0x571e <__tablejump2__>
			case 0:
				rtc.Stunden=Tastatur.ZahlenausTastatur()*10;
    2a52:	85 e2       	ldi	r24, 0x25	; 37
    2a54:	93 e0       	ldi	r25, 0x03	; 3
    2a56:	0e 94 18 1f 	call	0x3e30	; 0x3e30 <_ZN9Interface17ZahlenausTastaturEv>
    2a5a:	88 0f       	add	r24, r24
    2a5c:	98 2f       	mov	r25, r24
    2a5e:	99 0f       	add	r25, r25
    2a60:	99 0f       	add	r25, r25
    2a62:	89 0f       	add	r24, r25
				if(rtc.Stunden>=24){
    2a64:	88 31       	cpi	r24, 0x18	; 24
    2a66:	08 f4       	brcc	.+2      	; 0x2a6a <_Z13uhreinstellenv+0x25e>
    2a68:	51 c2       	rjmp	.+1186   	; 0x2f0c <_Z13uhreinstellenv+0x700>
					rtc.Stunden=0;
    2a6a:	e7 e6       	ldi	r30, 0x67	; 103
    2a6c:	f7 e0       	ldi	r31, 0x07	; 7
    2a6e:	10 82       	st	Z, r1
					pos=-1;
					buffersize=sprintf(buffer,"Stunden falsch");
    2a70:	ea eb       	ldi	r30, 0xBA	; 186
    2a72:	f2 e0       	ldi	r31, 0x02	; 2
    2a74:	a7 2d       	mov	r26, r7
    2a76:	b8 2d       	mov	r27, r8
    2a78:	86 2d       	mov	r24, r6
    2a7a:	01 90       	ld	r0, Z+
    2a7c:	0d 92       	st	X+, r0
    2a7e:	8a 95       	dec	r24
    2a80:	e1 f7       	brne	.-8      	; 0x2a7a <_Z13uhreinstellenv+0x26e>
    2a82:	2d 88       	ldd	r2, Y+21	; 0x15
    2a84:	3e 88       	ldd	r3, Y+22	; 0x16
    2a86:	1b 2d       	mov	r17, r11
					for(uint8_t i = 0; i<buffersize;i++){
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
    2a88:	f1 01       	movw	r30, r2
    2a8a:	61 91       	ld	r22, Z+
    2a8c:	1f 01       	movw	r2, r30
    2a8e:	28 e3       	ldi	r18, 0x38	; 56
    2a90:	41 2f       	mov	r20, r17
    2a92:	86 e2       	ldi	r24, 0x26	; 38
    2a94:	93 e0       	ldi	r25, 0x03	; 3
    2a96:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    2a9a:	1a 5f       	subi	r17, 0xFA	; 250
				rtc.Stunden=Tastatur.ZahlenausTastatur()*10;
				if(rtc.Stunden>=24){
					rtc.Stunden=0;
					pos=-1;
					buffersize=sprintf(buffer,"Stunden falsch");
					for(uint8_t i = 0; i<buffersize;i++){
    2a9c:	14 35       	cpi	r17, 0x54	; 84
    2a9e:	a1 f7       	brne	.-24     	; 0x2a88 <_Z13uhreinstellenv+0x27c>
    2aa0:	39 c2       	rjmp	.+1138   	; 0x2f14 <_Z13uhreinstellenv+0x708>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 1:
				rtc.Stunden+=Tastatur.ZahlenausTastatur();
    2aa2:	85 e2       	ldi	r24, 0x25	; 37
    2aa4:	93 e0       	ldi	r25, 0x03	; 3
    2aa6:	0e 94 18 1f 	call	0x3e30	; 0x3e30 <_ZN9Interface17ZahlenausTastaturEv>
    2aaa:	e7 e6       	ldi	r30, 0x67	; 103
    2aac:	f7 e0       	ldi	r31, 0x07	; 7
    2aae:	20 81       	ld	r18, Z
    2ab0:	90 e0       	ldi	r25, 0x00	; 0
    2ab2:	82 0f       	add	r24, r18
    2ab4:	91 1d       	adc	r25, r1
				if(rtc.Stunden>=24){
    2ab6:	88 31       	cpi	r24, 0x18	; 24
    2ab8:	10 f4       	brcc	.+4      	; 0x2abe <_Z13uhreinstellenv+0x2b2>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 1:
				rtc.Stunden+=Tastatur.ZahlenausTastatur();
    2aba:	80 83       	st	Z, r24
    2abc:	5e c2       	rjmp	.+1212   	; 0x2f7a <_Z13uhreinstellenv+0x76e>
				if(rtc.Stunden>=24){
					rtc.Stunden=0;
    2abe:	e7 e6       	ldi	r30, 0x67	; 103
    2ac0:	f7 e0       	ldi	r31, 0x07	; 7
    2ac2:	10 82       	st	Z, r1
					pos=-1;
					buffersize=sprintf(buffer,"Stunden falsch");
    2ac4:	ea eb       	ldi	r30, 0xBA	; 186
    2ac6:	f2 e0       	ldi	r31, 0x02	; 2
    2ac8:	a7 2d       	mov	r26, r7
    2aca:	b8 2d       	mov	r27, r8
    2acc:	86 2d       	mov	r24, r6
    2ace:	01 90       	ld	r0, Z+
    2ad0:	0d 92       	st	X+, r0
    2ad2:	8a 95       	dec	r24
    2ad4:	e1 f7       	brne	.-8      	; 0x2ace <_Z13uhreinstellenv+0x2c2>
    2ad6:	2d 88       	ldd	r2, Y+21	; 0x15
    2ad8:	3e 88       	ldd	r3, Y+22	; 0x16
    2ada:	1b 2d       	mov	r17, r11
					for(uint8_t i = 0; i<buffersize;i++){
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
    2adc:	f1 01       	movw	r30, r2
    2ade:	61 91       	ld	r22, Z+
    2ae0:	1f 01       	movw	r2, r30
    2ae2:	28 e3       	ldi	r18, 0x38	; 56
    2ae4:	41 2f       	mov	r20, r17
    2ae6:	86 e2       	ldi	r24, 0x26	; 38
    2ae8:	93 e0       	ldi	r25, 0x03	; 3
    2aea:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    2aee:	1a 5f       	subi	r17, 0xFA	; 250
				rtc.Stunden+=Tastatur.ZahlenausTastatur();
				if(rtc.Stunden>=24){
					rtc.Stunden=0;
					pos=-1;
					buffersize=sprintf(buffer,"Stunden falsch");
					for(uint8_t i = 0; i<buffersize;i++){
    2af0:	14 35       	cpi	r17, 0x54	; 84
    2af2:	a1 f7       	brne	.-24     	; 0x2adc <_Z13uhreinstellenv+0x2d0>
    2af4:	12 c2       	rjmp	.+1060   	; 0x2f1a <_Z13uhreinstellenv+0x70e>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 2:
				rtc.Minuten=Tastatur.ZahlenausTastatur()*10;
    2af6:	85 e2       	ldi	r24, 0x25	; 37
    2af8:	93 e0       	ldi	r25, 0x03	; 3
    2afa:	0e 94 18 1f 	call	0x3e30	; 0x3e30 <_ZN9Interface17ZahlenausTastaturEv>
    2afe:	88 0f       	add	r24, r24
    2b00:	98 2f       	mov	r25, r24
    2b02:	99 0f       	add	r25, r25
    2b04:	99 0f       	add	r25, r25
    2b06:	89 0f       	add	r24, r25
				if(rtc.Minuten>=60){
    2b08:	8c 33       	cpi	r24, 0x3C	; 60
    2b0a:	20 f4       	brcc	.+8      	; 0x2b14 <_Z13uhreinstellenv+0x308>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 2:
				rtc.Minuten=Tastatur.ZahlenausTastatur()*10;
    2b0c:	e8 e6       	ldi	r30, 0x68	; 104
    2b0e:	f7 e0       	ldi	r31, 0x07	; 7
    2b10:	80 83       	st	Z, r24
    2b12:	33 c2       	rjmp	.+1126   	; 0x2f7a <_Z13uhreinstellenv+0x76e>
				if(rtc.Minuten>=60){
					rtc.Minuten=0;
    2b14:	e8 e6       	ldi	r30, 0x68	; 104
    2b16:	f7 e0       	ldi	r31, 0x07	; 7
    2b18:	10 82       	st	Z, r1
					pos=1;
					buffersize=sprintf(buffer,"Minuten falsch");
    2b1a:	e9 ec       	ldi	r30, 0xC9	; 201
    2b1c:	f2 e0       	ldi	r31, 0x02	; 2
    2b1e:	a7 2d       	mov	r26, r7
    2b20:	b8 2d       	mov	r27, r8
    2b22:	86 2d       	mov	r24, r6
    2b24:	01 90       	ld	r0, Z+
    2b26:	0d 92       	st	X+, r0
    2b28:	8a 95       	dec	r24
    2b2a:	e1 f7       	brne	.-8      	; 0x2b24 <_Z13uhreinstellenv+0x318>
    2b2c:	2d 88       	ldd	r2, Y+21	; 0x15
    2b2e:	3e 88       	ldd	r3, Y+22	; 0x16
    2b30:	1b 2d       	mov	r17, r11
					for(uint8_t i = 0; i<buffersize;i++){
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
    2b32:	f1 01       	movw	r30, r2
    2b34:	61 91       	ld	r22, Z+
    2b36:	1f 01       	movw	r2, r30
    2b38:	28 e3       	ldi	r18, 0x38	; 56
    2b3a:	41 2f       	mov	r20, r17
    2b3c:	86 e2       	ldi	r24, 0x26	; 38
    2b3e:	93 e0       	ldi	r25, 0x03	; 3
    2b40:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    2b44:	1a 5f       	subi	r17, 0xFA	; 250
				rtc.Minuten=Tastatur.ZahlenausTastatur()*10;
				if(rtc.Minuten>=60){
					rtc.Minuten=0;
					pos=1;
					buffersize=sprintf(buffer,"Minuten falsch");
					for(uint8_t i = 0; i<buffersize;i++){
    2b46:	14 35       	cpi	r17, 0x54	; 84
    2b48:	a1 f7       	brne	.-24     	; 0x2b32 <_Z13uhreinstellenv+0x326>
    2b4a:	ea c1       	rjmp	.+980    	; 0x2f20 <_Z13uhreinstellenv+0x714>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 3:
				rtc.Minuten+=Tastatur.ZahlenausTastatur();
    2b4c:	85 e2       	ldi	r24, 0x25	; 37
    2b4e:	93 e0       	ldi	r25, 0x03	; 3
    2b50:	0e 94 18 1f 	call	0x3e30	; 0x3e30 <_ZN9Interface17ZahlenausTastaturEv>
    2b54:	e8 e6       	ldi	r30, 0x68	; 104
    2b56:	f7 e0       	ldi	r31, 0x07	; 7
    2b58:	20 81       	ld	r18, Z
    2b5a:	90 e0       	ldi	r25, 0x00	; 0
    2b5c:	82 0f       	add	r24, r18
    2b5e:	91 1d       	adc	r25, r1
				if(rtc.Minuten>=60){
    2b60:	8c 33       	cpi	r24, 0x3C	; 60
    2b62:	10 f4       	brcc	.+4      	; 0x2b68 <_Z13uhreinstellenv+0x35c>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 3:
				rtc.Minuten+=Tastatur.ZahlenausTastatur();
    2b64:	80 83       	st	Z, r24
    2b66:	09 c2       	rjmp	.+1042   	; 0x2f7a <_Z13uhreinstellenv+0x76e>
				if(rtc.Minuten>=60){
					rtc.Minuten=0;
    2b68:	e8 e6       	ldi	r30, 0x68	; 104
    2b6a:	f7 e0       	ldi	r31, 0x07	; 7
    2b6c:	10 82       	st	Z, r1
					pos=1;
					buffersize=sprintf(buffer,"Minuten falsch");
    2b6e:	e9 ec       	ldi	r30, 0xC9	; 201
    2b70:	f2 e0       	ldi	r31, 0x02	; 2
    2b72:	a7 2d       	mov	r26, r7
    2b74:	b8 2d       	mov	r27, r8
    2b76:	86 2d       	mov	r24, r6
    2b78:	01 90       	ld	r0, Z+
    2b7a:	0d 92       	st	X+, r0
    2b7c:	8a 95       	dec	r24
    2b7e:	e1 f7       	brne	.-8      	; 0x2b78 <_Z13uhreinstellenv+0x36c>
    2b80:	2d 88       	ldd	r2, Y+21	; 0x15
    2b82:	3e 88       	ldd	r3, Y+22	; 0x16
    2b84:	1b 2d       	mov	r17, r11
					for(uint8_t i = 0; i<buffersize;i++){
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
    2b86:	f1 01       	movw	r30, r2
    2b88:	61 91       	ld	r22, Z+
    2b8a:	1f 01       	movw	r2, r30
    2b8c:	28 e3       	ldi	r18, 0x38	; 56
    2b8e:	41 2f       	mov	r20, r17
    2b90:	86 e2       	ldi	r24, 0x26	; 38
    2b92:	93 e0       	ldi	r25, 0x03	; 3
    2b94:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    2b98:	1a 5f       	subi	r17, 0xFA	; 250
				rtc.Minuten+=Tastatur.ZahlenausTastatur();
				if(rtc.Minuten>=60){
					rtc.Minuten=0;
					pos=1;
					buffersize=sprintf(buffer,"Minuten falsch");
					for(uint8_t i = 0; i<buffersize;i++){
    2b9a:	14 35       	cpi	r17, 0x54	; 84
    2b9c:	a1 f7       	brne	.-24     	; 0x2b86 <_Z13uhreinstellenv+0x37a>
    2b9e:	c3 c1       	rjmp	.+902    	; 0x2f26 <_Z13uhreinstellenv+0x71a>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 4:
				rtc.Tag=Tastatur.ZahlenausTastatur()*10;
    2ba0:	85 e2       	ldi	r24, 0x25	; 37
    2ba2:	93 e0       	ldi	r25, 0x03	; 3
    2ba4:	0e 94 18 1f 	call	0x3e30	; 0x3e30 <_ZN9Interface17ZahlenausTastaturEv>
    2ba8:	88 0f       	add	r24, r24
    2baa:	98 2f       	mov	r25, r24
    2bac:	99 0f       	add	r25, r25
    2bae:	99 0f       	add	r25, r25
    2bb0:	89 0f       	add	r24, r25
				if(rtc.Tag>=32){
    2bb2:	80 32       	cpi	r24, 0x20	; 32
    2bb4:	18 f4       	brcc	.+6      	; 0x2bbc <_Z13uhreinstellenv+0x3b0>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 4:
				rtc.Tag=Tastatur.ZahlenausTastatur()*10;
    2bb6:	f2 01       	movw	r30, r4
    2bb8:	80 83       	st	Z, r24
    2bba:	df c1       	rjmp	.+958    	; 0x2f7a <_Z13uhreinstellenv+0x76e>
				if(rtc.Tag>=32){
					rtc.Tag=0;
    2bbc:	f2 01       	movw	r30, r4
    2bbe:	10 82       	st	Z, r1
					pos=3;
					buffersize=sprintf(buffer,"Tag falsch");
    2bc0:	8b e0       	ldi	r24, 0x0B	; 11
    2bc2:	e8 ed       	ldi	r30, 0xD8	; 216
    2bc4:	f2 e0       	ldi	r31, 0x02	; 2
    2bc6:	a7 2d       	mov	r26, r7
    2bc8:	b8 2d       	mov	r27, r8
    2bca:	01 90       	ld	r0, Z+
    2bcc:	0d 92       	st	X+, r0
    2bce:	8a 95       	dec	r24
    2bd0:	e1 f7       	brne	.-8      	; 0x2bca <_Z13uhreinstellenv+0x3be>
    2bd2:	2d 88       	ldd	r2, Y+21	; 0x15
    2bd4:	3e 88       	ldd	r3, Y+22	; 0x16
    2bd6:	1b 2d       	mov	r17, r11
					for(uint8_t i = 0; i<buffersize;i++){
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
    2bd8:	f1 01       	movw	r30, r2
    2bda:	61 91       	ld	r22, Z+
    2bdc:	1f 01       	movw	r2, r30
    2bde:	28 e3       	ldi	r18, 0x38	; 56
    2be0:	41 2f       	mov	r20, r17
    2be2:	86 e2       	ldi	r24, 0x26	; 38
    2be4:	93 e0       	ldi	r25, 0x03	; 3
    2be6:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    2bea:	1a 5f       	subi	r17, 0xFA	; 250
				rtc.Tag=Tastatur.ZahlenausTastatur()*10;
				if(rtc.Tag>=32){
					rtc.Tag=0;
					pos=3;
					buffersize=sprintf(buffer,"Tag falsch");
					for(uint8_t i = 0; i<buffersize;i++){
    2bec:	1c 33       	cpi	r17, 0x3C	; 60
    2bee:	a1 f7       	brne	.-24     	; 0x2bd8 <_Z13uhreinstellenv+0x3cc>
    2bf0:	9d c1       	rjmp	.+826    	; 0x2f2c <_Z13uhreinstellenv+0x720>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 5:
				rtc.Tag+=Tastatur.ZahlenausTastatur();
    2bf2:	85 e2       	ldi	r24, 0x25	; 37
    2bf4:	93 e0       	ldi	r25, 0x03	; 3
    2bf6:	0e 94 18 1f 	call	0x3e30	; 0x3e30 <_ZN9Interface17ZahlenausTastaturEv>
    2bfa:	f2 01       	movw	r30, r4
    2bfc:	20 81       	ld	r18, Z
    2bfe:	90 e0       	ldi	r25, 0x00	; 0
    2c00:	82 0f       	add	r24, r18
    2c02:	91 1d       	adc	r25, r1
				if(rtc.Tag>=32){
    2c04:	80 32       	cpi	r24, 0x20	; 32
    2c06:	10 f4       	brcc	.+4      	; 0x2c0c <_Z13uhreinstellenv+0x400>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 5:
				rtc.Tag+=Tastatur.ZahlenausTastatur();
    2c08:	80 83       	st	Z, r24
    2c0a:	b7 c1       	rjmp	.+878    	; 0x2f7a <_Z13uhreinstellenv+0x76e>
				if(rtc.Tag>=32){
					rtc.Tag=0;
    2c0c:	f2 01       	movw	r30, r4
    2c0e:	10 82       	st	Z, r1
					pos=3;
					buffersize=sprintf(buffer,"Tag falsch");
    2c10:	8b e0       	ldi	r24, 0x0B	; 11
    2c12:	e8 ed       	ldi	r30, 0xD8	; 216
    2c14:	f2 e0       	ldi	r31, 0x02	; 2
    2c16:	a7 2d       	mov	r26, r7
    2c18:	b8 2d       	mov	r27, r8
    2c1a:	01 90       	ld	r0, Z+
    2c1c:	0d 92       	st	X+, r0
    2c1e:	8a 95       	dec	r24
    2c20:	e1 f7       	brne	.-8      	; 0x2c1a <_Z13uhreinstellenv+0x40e>
    2c22:	2d 88       	ldd	r2, Y+21	; 0x15
    2c24:	3e 88       	ldd	r3, Y+22	; 0x16
    2c26:	1b 2d       	mov	r17, r11
					for(uint8_t i = 0; i<buffersize;i++){
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
    2c28:	f1 01       	movw	r30, r2
    2c2a:	61 91       	ld	r22, Z+
    2c2c:	1f 01       	movw	r2, r30
    2c2e:	28 e3       	ldi	r18, 0x38	; 56
    2c30:	41 2f       	mov	r20, r17
    2c32:	86 e2       	ldi	r24, 0x26	; 38
    2c34:	93 e0       	ldi	r25, 0x03	; 3
    2c36:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    2c3a:	1a 5f       	subi	r17, 0xFA	; 250
				rtc.Tag+=Tastatur.ZahlenausTastatur();
				if(rtc.Tag>=32){
					rtc.Tag=0;
					pos=3;
					buffersize=sprintf(buffer,"Tag falsch");
					for(uint8_t i = 0; i<buffersize;i++){
    2c3c:	1c 33       	cpi	r17, 0x3C	; 60
    2c3e:	a1 f7       	brne	.-24     	; 0x2c28 <_Z13uhreinstellenv+0x41c>
    2c40:	7a c1       	rjmp	.+756    	; 0x2f36 <_Z13uhreinstellenv+0x72a>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 6:
				rtc.Monat=Tastatur.ZahlenausTastatur()*10;
    2c42:	85 e2       	ldi	r24, 0x25	; 37
    2c44:	93 e0       	ldi	r25, 0x03	; 3
    2c46:	0e 94 18 1f 	call	0x3e30	; 0x3e30 <_ZN9Interface17ZahlenausTastaturEv>
    2c4a:	88 0f       	add	r24, r24
    2c4c:	98 2f       	mov	r25, r24
    2c4e:	99 0f       	add	r25, r25
    2c50:	99 0f       	add	r25, r25
    2c52:	89 0f       	add	r24, r25
				if(rtc.Monat>=13){
    2c54:	8d 30       	cpi	r24, 0x0D	; 13
    2c56:	18 f4       	brcc	.+6      	; 0x2c5e <_Z13uhreinstellenv+0x452>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 6:
				rtc.Monat=Tastatur.ZahlenausTastatur()*10;
    2c58:	f6 01       	movw	r30, r12
    2c5a:	80 83       	st	Z, r24
    2c5c:	8e c1       	rjmp	.+796    	; 0x2f7a <_Z13uhreinstellenv+0x76e>
				if(rtc.Monat>=13){
					rtc.Monat=0;
    2c5e:	f6 01       	movw	r30, r12
    2c60:	10 82       	st	Z, r1
					pos=5;
					buffersize=sprintf(buffer,"Monat falsch");
    2c62:	8d e0       	ldi	r24, 0x0D	; 13
    2c64:	e3 ee       	ldi	r30, 0xE3	; 227
    2c66:	f2 e0       	ldi	r31, 0x02	; 2
    2c68:	a7 2d       	mov	r26, r7
    2c6a:	b8 2d       	mov	r27, r8
    2c6c:	01 90       	ld	r0, Z+
    2c6e:	0d 92       	st	X+, r0
    2c70:	8a 95       	dec	r24
    2c72:	e1 f7       	brne	.-8      	; 0x2c6c <_Z13uhreinstellenv+0x460>
    2c74:	2d 88       	ldd	r2, Y+21	; 0x15
    2c76:	3e 88       	ldd	r3, Y+22	; 0x16
    2c78:	1b 2d       	mov	r17, r11
					for(uint8_t i = 0; i<buffersize;i++){
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
    2c7a:	f1 01       	movw	r30, r2
    2c7c:	61 91       	ld	r22, Z+
    2c7e:	1f 01       	movw	r2, r30
    2c80:	28 e3       	ldi	r18, 0x38	; 56
    2c82:	41 2f       	mov	r20, r17
    2c84:	86 e2       	ldi	r24, 0x26	; 38
    2c86:	93 e0       	ldi	r25, 0x03	; 3
    2c88:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    2c8c:	1a 5f       	subi	r17, 0xFA	; 250
				rtc.Monat=Tastatur.ZahlenausTastatur()*10;
				if(rtc.Monat>=13){
					rtc.Monat=0;
					pos=5;
					buffersize=sprintf(buffer,"Monat falsch");
					for(uint8_t i = 0; i<buffersize;i++){
    2c8e:	18 34       	cpi	r17, 0x48	; 72
    2c90:	a1 f7       	brne	.-24     	; 0x2c7a <_Z13uhreinstellenv+0x46e>
    2c92:	56 c1       	rjmp	.+684    	; 0x2f40 <_Z13uhreinstellenv+0x734>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 7:
				rtc.Monat+=Tastatur.ZahlenausTastatur();
    2c94:	85 e2       	ldi	r24, 0x25	; 37
    2c96:	93 e0       	ldi	r25, 0x03	; 3
    2c98:	0e 94 18 1f 	call	0x3e30	; 0x3e30 <_ZN9Interface17ZahlenausTastaturEv>
    2c9c:	f6 01       	movw	r30, r12
    2c9e:	20 81       	ld	r18, Z
    2ca0:	90 e0       	ldi	r25, 0x00	; 0
    2ca2:	82 0f       	add	r24, r18
    2ca4:	91 1d       	adc	r25, r1
				if(rtc.Monat>=13){
    2ca6:	8d 30       	cpi	r24, 0x0D	; 13
    2ca8:	10 f4       	brcc	.+4      	; 0x2cae <_Z13uhreinstellenv+0x4a2>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 7:
				rtc.Monat+=Tastatur.ZahlenausTastatur();
    2caa:	80 83       	st	Z, r24
    2cac:	1e c0       	rjmp	.+60     	; 0x2cea <_Z13uhreinstellenv+0x4de>
				if(rtc.Monat>=13){
					rtc.Monat=0;
    2cae:	f6 01       	movw	r30, r12
    2cb0:	10 82       	st	Z, r1
					pos=5;
					buffersize=sprintf(buffer,"Monat falsch");
    2cb2:	8d e0       	ldi	r24, 0x0D	; 13
    2cb4:	e3 ee       	ldi	r30, 0xE3	; 227
    2cb6:	f2 e0       	ldi	r31, 0x02	; 2
    2cb8:	a7 2d       	mov	r26, r7
    2cba:	b8 2d       	mov	r27, r8
    2cbc:	01 90       	ld	r0, Z+
    2cbe:	0d 92       	st	X+, r0
    2cc0:	8a 95       	dec	r24
    2cc2:	e1 f7       	brne	.-8      	; 0x2cbc <_Z13uhreinstellenv+0x4b0>
    2cc4:	2d 88       	ldd	r2, Y+21	; 0x15
    2cc6:	3e 88       	ldd	r3, Y+22	; 0x16
    2cc8:	1b 2d       	mov	r17, r11
					for(uint8_t i = 0; i<buffersize;i++){
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
    2cca:	f1 01       	movw	r30, r2
    2ccc:	61 91       	ld	r22, Z+
    2cce:	1f 01       	movw	r2, r30
    2cd0:	28 e3       	ldi	r18, 0x38	; 56
    2cd2:	41 2f       	mov	r20, r17
    2cd4:	86 e2       	ldi	r24, 0x26	; 38
    2cd6:	93 e0       	ldi	r25, 0x03	; 3
    2cd8:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    2cdc:	1a 5f       	subi	r17, 0xFA	; 250
				rtc.Monat+=Tastatur.ZahlenausTastatur();
				if(rtc.Monat>=13){
					rtc.Monat=0;
					pos=5;
					buffersize=sprintf(buffer,"Monat falsch");
					for(uint8_t i = 0; i<buffersize;i++){
    2cde:	18 34       	cpi	r17, 0x48	; 72
    2ce0:	a1 f7       	brne	.-24     	; 0x2cca <_Z13uhreinstellenv+0x4be>
				break;
			case 7:
				rtc.Monat+=Tastatur.ZahlenausTastatur();
				if(rtc.Monat>=13){
					rtc.Monat=0;
					pos=5;
    2ce2:	0f 2e       	mov	r0, r31
    2ce4:	f5 e0       	ldi	r31, 0x05	; 5
    2ce6:	9f 2e       	mov	r9, r31
    2ce8:	f0 2d       	mov	r31, r0
					buffersize=sprintf(buffer,"Monat falsch");
					for(uint8_t i = 0; i<buffersize;i++){
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				if(rtc.Monat==4||rtc.Monat==6||rtc.Monat==9||rtc.Monat==11){
    2cea:	f6 01       	movw	r30, r12
    2cec:	90 81       	ld	r25, Z
    2cee:	89 2f       	mov	r24, r25
    2cf0:	8d 7f       	andi	r24, 0xFD	; 253
    2cf2:	84 30       	cpi	r24, 0x04	; 4
    2cf4:	11 f0       	breq	.+4      	; 0x2cfa <_Z13uhreinstellenv+0x4ee>
    2cf6:	89 30       	cpi	r24, 0x09	; 9
    2cf8:	09 f5       	brne	.+66     	; 0x2d3c <_Z13uhreinstellenv+0x530>
					if(rtc.Tag>=31){
    2cfa:	f2 01       	movw	r30, r4
    2cfc:	80 81       	ld	r24, Z
    2cfe:	8f 31       	cpi	r24, 0x1F	; 31
    2d00:	08 f4       	brcc	.+2      	; 0x2d04 <_Z13uhreinstellenv+0x4f8>
    2d02:	ea c0       	rjmp	.+468    	; 0x2ed8 <_Z13uhreinstellenv+0x6cc>
						rtc.Tag=0;
    2d04:	10 82       	st	Z, r1
						rtc.Monat=0;
    2d06:	f6 01       	movw	r30, r12
    2d08:	10 82       	st	Z, r1
						pos=3;
						buffersize=sprintf(buffer,"Tag falsch");
    2d0a:	8b e0       	ldi	r24, 0x0B	; 11
    2d0c:	e8 ed       	ldi	r30, 0xD8	; 216
    2d0e:	f2 e0       	ldi	r31, 0x02	; 2
    2d10:	a7 2d       	mov	r26, r7
    2d12:	b8 2d       	mov	r27, r8
    2d14:	01 90       	ld	r0, Z+
    2d16:	0d 92       	st	X+, r0
    2d18:	8a 95       	dec	r24
    2d1a:	e1 f7       	brne	.-8      	; 0x2d14 <_Z13uhreinstellenv+0x508>
    2d1c:	2d 88       	ldd	r2, Y+21	; 0x15
    2d1e:	3e 88       	ldd	r3, Y+22	; 0x16
    2d20:	1b 2d       	mov	r17, r11
						for(uint8_t i = 0; i<buffersize;i++){
							oled.draw_ASCI(buffer[i],charsize*i,7*8);
    2d22:	f1 01       	movw	r30, r2
    2d24:	61 91       	ld	r22, Z+
    2d26:	1f 01       	movw	r2, r30
    2d28:	28 e3       	ldi	r18, 0x38	; 56
    2d2a:	41 2f       	mov	r20, r17
    2d2c:	86 e2       	ldi	r24, 0x26	; 38
    2d2e:	93 e0       	ldi	r25, 0x03	; 3
    2d30:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    2d34:	1a 5f       	subi	r17, 0xFA	; 250
					if(rtc.Tag>=31){
						rtc.Tag=0;
						rtc.Monat=0;
						pos=3;
						buffersize=sprintf(buffer,"Tag falsch");
						for(uint8_t i = 0; i<buffersize;i++){
    2d36:	1c 33       	cpi	r17, 0x3C	; 60
    2d38:	a1 f7       	brne	.-24     	; 0x2d22 <_Z13uhreinstellenv+0x516>
    2d3a:	07 c1       	rjmp	.+526    	; 0x2f4a <_Z13uhreinstellenv+0x73e>
							oled.draw_ASCI(buffer[i],charsize*i,7*8);
						}
					}
				}
				else if(rtc.Monat==2){
    2d3c:	92 30       	cpi	r25, 0x02	; 2
    2d3e:	09 f0       	breq	.+2      	; 0x2d42 <_Z13uhreinstellenv+0x536>
    2d40:	cb c0       	rjmp	.+406    	; 0x2ed8 <_Z13uhreinstellenv+0x6cc>
					if(rtc.Tag>=30){
    2d42:	f2 01       	movw	r30, r4
    2d44:	80 81       	ld	r24, Z
    2d46:	8e 31       	cpi	r24, 0x1E	; 30
    2d48:	08 f4       	brcc	.+2      	; 0x2d4c <_Z13uhreinstellenv+0x540>
    2d4a:	c6 c0       	rjmp	.+396    	; 0x2ed8 <_Z13uhreinstellenv+0x6cc>
						rtc.Tag=0;
    2d4c:	10 82       	st	Z, r1
						rtc.Monat=0;
    2d4e:	f6 01       	movw	r30, r12
    2d50:	10 82       	st	Z, r1
						pos=3;
						buffersize=sprintf(buffer,"Tag falsch");
    2d52:	8b e0       	ldi	r24, 0x0B	; 11
    2d54:	e8 ed       	ldi	r30, 0xD8	; 216
    2d56:	f2 e0       	ldi	r31, 0x02	; 2
    2d58:	a7 2d       	mov	r26, r7
    2d5a:	b8 2d       	mov	r27, r8
    2d5c:	01 90       	ld	r0, Z+
    2d5e:	0d 92       	st	X+, r0
    2d60:	8a 95       	dec	r24
    2d62:	e1 f7       	brne	.-8      	; 0x2d5c <_Z13uhreinstellenv+0x550>
    2d64:	2d 88       	ldd	r2, Y+21	; 0x15
    2d66:	3e 88       	ldd	r3, Y+22	; 0x16
    2d68:	1b 2d       	mov	r17, r11
						for(uint8_t i = 0; i<buffersize;i++){
							oled.draw_ASCI(buffer[i],charsize*i,7*8);
    2d6a:	f1 01       	movw	r30, r2
    2d6c:	61 91       	ld	r22, Z+
    2d6e:	1f 01       	movw	r2, r30
    2d70:	28 e3       	ldi	r18, 0x38	; 56
    2d72:	41 2f       	mov	r20, r17
    2d74:	86 e2       	ldi	r24, 0x26	; 38
    2d76:	93 e0       	ldi	r25, 0x03	; 3
    2d78:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    2d7c:	1a 5f       	subi	r17, 0xFA	; 250
					if(rtc.Tag>=30){
						rtc.Tag=0;
						rtc.Monat=0;
						pos=3;
						buffersize=sprintf(buffer,"Tag falsch");
						for(uint8_t i = 0; i<buffersize;i++){
    2d7e:	1c 33       	cpi	r17, 0x3C	; 60
    2d80:	a1 f7       	brne	.-24     	; 0x2d6a <_Z13uhreinstellenv+0x55e>
    2d82:	e8 c0       	rjmp	.+464    	; 0x2f54 <_Z13uhreinstellenv+0x748>
						}
					}
				}
				break;
			case 8:
				rtc.Jahr=Tastatur.ZahlenausTastatur()*10;
    2d84:	85 e2       	ldi	r24, 0x25	; 37
    2d86:	93 e0       	ldi	r25, 0x03	; 3
    2d88:	0e 94 18 1f 	call	0x3e30	; 0x3e30 <_ZN9Interface17ZahlenausTastaturEv>
    2d8c:	88 0f       	add	r24, r24
    2d8e:	98 2f       	mov	r25, r24
    2d90:	99 0f       	add	r25, r25
    2d92:	99 0f       	add	r25, r25
    2d94:	89 0f       	add	r24, r25
				if(rtc.Jahr>=50){
    2d96:	82 33       	cpi	r24, 0x32	; 50
    2d98:	20 f4       	brcc	.+8      	; 0x2da2 <_Z13uhreinstellenv+0x596>
						}
					}
				}
				break;
			case 8:
				rtc.Jahr=Tastatur.ZahlenausTastatur()*10;
    2d9a:	ed e6       	ldi	r30, 0x6D	; 109
    2d9c:	f7 e0       	ldi	r31, 0x07	; 7
    2d9e:	80 83       	st	Z, r24
    2da0:	ec c0       	rjmp	.+472    	; 0x2f7a <_Z13uhreinstellenv+0x76e>
				if(rtc.Jahr>=50){
					rtc.Jahr=0;
    2da2:	ed e6       	ldi	r30, 0x6D	; 109
    2da4:	f7 e0       	ldi	r31, 0x07	; 7
    2da6:	10 82       	st	Z, r1
					pos=7;
					buffersize=sprintf(buffer,"Jahr falsch");
    2da8:	8c e0       	ldi	r24, 0x0C	; 12
    2daa:	e0 ef       	ldi	r30, 0xF0	; 240
    2dac:	f2 e0       	ldi	r31, 0x02	; 2
    2dae:	a7 2d       	mov	r26, r7
    2db0:	b8 2d       	mov	r27, r8
    2db2:	01 90       	ld	r0, Z+
    2db4:	0d 92       	st	X+, r0
    2db6:	8a 95       	dec	r24
    2db8:	e1 f7       	brne	.-8      	; 0x2db2 <_Z13uhreinstellenv+0x5a6>
    2dba:	2d 88       	ldd	r2, Y+21	; 0x15
    2dbc:	3e 88       	ldd	r3, Y+22	; 0x16
    2dbe:	1b 2d       	mov	r17, r11
					for(uint8_t i = 0; i<buffersize;i++){
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
    2dc0:	f1 01       	movw	r30, r2
    2dc2:	61 91       	ld	r22, Z+
    2dc4:	1f 01       	movw	r2, r30
    2dc6:	28 e3       	ldi	r18, 0x38	; 56
    2dc8:	41 2f       	mov	r20, r17
    2dca:	86 e2       	ldi	r24, 0x26	; 38
    2dcc:	93 e0       	ldi	r25, 0x03	; 3
    2dce:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    2dd2:	1a 5f       	subi	r17, 0xFA	; 250
				rtc.Jahr=Tastatur.ZahlenausTastatur()*10;
				if(rtc.Jahr>=50){
					rtc.Jahr=0;
					pos=7;
					buffersize=sprintf(buffer,"Jahr falsch");
					for(uint8_t i = 0; i<buffersize;i++){
    2dd4:	12 34       	cpi	r17, 0x42	; 66
    2dd6:	a1 f7       	brne	.-24     	; 0x2dc0 <_Z13uhreinstellenv+0x5b4>
    2dd8:	c2 c0       	rjmp	.+388    	; 0x2f5e <_Z13uhreinstellenv+0x752>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 9:
				rtc.Jahr+=Tastatur.ZahlenausTastatur();
    2dda:	85 e2       	ldi	r24, 0x25	; 37
    2ddc:	93 e0       	ldi	r25, 0x03	; 3
    2dde:	0e 94 18 1f 	call	0x3e30	; 0x3e30 <_ZN9Interface17ZahlenausTastaturEv>
    2de2:	ed e6       	ldi	r30, 0x6D	; 109
    2de4:	f7 e0       	ldi	r31, 0x07	; 7
    2de6:	20 81       	ld	r18, Z
    2de8:	90 e0       	ldi	r25, 0x00	; 0
    2dea:	82 0f       	add	r24, r18
    2dec:	91 1d       	adc	r25, r1
				if(rtc.Jahr>=50){
    2dee:	82 33       	cpi	r24, 0x32	; 50
    2df0:	10 f4       	brcc	.+4      	; 0x2df6 <_Z13uhreinstellenv+0x5ea>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 9:
				rtc.Jahr+=Tastatur.ZahlenausTastatur();
    2df2:	80 83       	st	Z, r24
    2df4:	1f c0       	rjmp	.+62     	; 0x2e34 <_Z13uhreinstellenv+0x628>
				if(rtc.Jahr>=50){
					rtc.Jahr=0;
    2df6:	ed e6       	ldi	r30, 0x6D	; 109
    2df8:	f7 e0       	ldi	r31, 0x07	; 7
    2dfa:	10 82       	st	Z, r1
					pos=7;
					buffersize=sprintf(buffer,"Jahr falsch");
    2dfc:	8c e0       	ldi	r24, 0x0C	; 12
    2dfe:	e0 ef       	ldi	r30, 0xF0	; 240
    2e00:	f2 e0       	ldi	r31, 0x02	; 2
    2e02:	a7 2d       	mov	r26, r7
    2e04:	b8 2d       	mov	r27, r8
    2e06:	01 90       	ld	r0, Z+
    2e08:	0d 92       	st	X+, r0
    2e0a:	8a 95       	dec	r24
    2e0c:	e1 f7       	brne	.-8      	; 0x2e06 <_Z13uhreinstellenv+0x5fa>
    2e0e:	2d 88       	ldd	r2, Y+21	; 0x15
    2e10:	3e 88       	ldd	r3, Y+22	; 0x16
    2e12:	1b 2d       	mov	r17, r11
					for(uint8_t i = 0; i<buffersize;i++){
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
    2e14:	f1 01       	movw	r30, r2
    2e16:	61 91       	ld	r22, Z+
    2e18:	1f 01       	movw	r2, r30
    2e1a:	28 e3       	ldi	r18, 0x38	; 56
    2e1c:	41 2f       	mov	r20, r17
    2e1e:	86 e2       	ldi	r24, 0x26	; 38
    2e20:	93 e0       	ldi	r25, 0x03	; 3
    2e22:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    2e26:	1a 5f       	subi	r17, 0xFA	; 250
				rtc.Jahr+=Tastatur.ZahlenausTastatur();
				if(rtc.Jahr>=50){
					rtc.Jahr=0;
					pos=7;
					buffersize=sprintf(buffer,"Jahr falsch");
					for(uint8_t i = 0; i<buffersize;i++){
    2e28:	12 34       	cpi	r17, 0x42	; 66
    2e2a:	a1 f7       	brne	.-24     	; 0x2e14 <_Z13uhreinstellenv+0x608>
				break;
			case 9:
				rtc.Jahr+=Tastatur.ZahlenausTastatur();
				if(rtc.Jahr>=50){
					rtc.Jahr=0;
					pos=7;
    2e2c:	0f 2e       	mov	r0, r31
    2e2e:	f7 e0       	ldi	r31, 0x07	; 7
    2e30:	9f 2e       	mov	r9, r31
    2e32:	f0 2d       	mov	r31, r0
					buffersize=sprintf(buffer,"Jahr falsch");
					for(uint8_t i = 0; i<buffersize;i++){
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				if(rtc.Monat==2){
    2e34:	f6 01       	movw	r30, r12
    2e36:	80 81       	ld	r24, Z
    2e38:	82 30       	cpi	r24, 0x02	; 2
    2e3a:	09 f0       	breq	.+2      	; 0x2e3e <_Z13uhreinstellenv+0x632>
    2e3c:	4d c0       	rjmp	.+154    	; 0x2ed8 <_Z13uhreinstellenv+0x6cc>
					if(rtc.Jahr%4==0){
    2e3e:	ed e6       	ldi	r30, 0x6D	; 109
    2e40:	f7 e0       	ldi	r31, 0x07	; 7
    2e42:	80 81       	ld	r24, Z
    2e44:	83 70       	andi	r24, 0x03	; 3
    2e46:	21 f5       	brne	.+72     	; 0x2e90 <_Z13uhreinstellenv+0x684>
						if (rtc.Tag>=30)
    2e48:	f2 01       	movw	r30, r4
    2e4a:	80 81       	ld	r24, Z
    2e4c:	8e 31       	cpi	r24, 0x1E	; 30
    2e4e:	08 f4       	brcc	.+2      	; 0x2e52 <_Z13uhreinstellenv+0x646>
    2e50:	43 c0       	rjmp	.+134    	; 0x2ed8 <_Z13uhreinstellenv+0x6cc>
						{
							rtc.Tag=0;
    2e52:	10 82       	st	Z, r1
							rtc.Monat=0;
    2e54:	f6 01       	movw	r30, r12
    2e56:	10 82       	st	Z, r1
							rtc.Jahr=0;
    2e58:	ed e6       	ldi	r30, 0x6D	; 109
    2e5a:	f7 e0       	ldi	r31, 0x07	; 7
    2e5c:	10 82       	st	Z, r1
							pos=3;
							buffersize=sprintf(buffer,"Tag falsch");
    2e5e:	8b e0       	ldi	r24, 0x0B	; 11
    2e60:	e8 ed       	ldi	r30, 0xD8	; 216
    2e62:	f2 e0       	ldi	r31, 0x02	; 2
    2e64:	a7 2d       	mov	r26, r7
    2e66:	b8 2d       	mov	r27, r8
    2e68:	01 90       	ld	r0, Z+
    2e6a:	0d 92       	st	X+, r0
    2e6c:	8a 95       	dec	r24
    2e6e:	e1 f7       	brne	.-8      	; 0x2e68 <_Z13uhreinstellenv+0x65c>
    2e70:	2d 88       	ldd	r2, Y+21	; 0x15
    2e72:	3e 88       	ldd	r3, Y+22	; 0x16
    2e74:	1b 2d       	mov	r17, r11
							for(uint8_t i = 0; i<buffersize;i++){
								oled.draw_ASCI(buffer[i],charsize*i,7*8);
    2e76:	f1 01       	movw	r30, r2
    2e78:	61 91       	ld	r22, Z+
    2e7a:	1f 01       	movw	r2, r30
    2e7c:	28 e3       	ldi	r18, 0x38	; 56
    2e7e:	41 2f       	mov	r20, r17
    2e80:	86 e2       	ldi	r24, 0x26	; 38
    2e82:	93 e0       	ldi	r25, 0x03	; 3
    2e84:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    2e88:	1a 5f       	subi	r17, 0xFA	; 250
							rtc.Tag=0;
							rtc.Monat=0;
							rtc.Jahr=0;
							pos=3;
							buffersize=sprintf(buffer,"Tag falsch");
							for(uint8_t i = 0; i<buffersize;i++){
    2e8a:	1c 33       	cpi	r17, 0x3C	; 60
    2e8c:	a1 f7       	brne	.-24     	; 0x2e76 <_Z13uhreinstellenv+0x66a>
    2e8e:	6c c0       	rjmp	.+216    	; 0x2f68 <_Z13uhreinstellenv+0x75c>
								oled.draw_ASCI(buffer[i],charsize*i,7*8);
							}
						}
					}
					else{
						if(rtc.Tag>=29){
    2e90:	f2 01       	movw	r30, r4
    2e92:	80 81       	ld	r24, Z
    2e94:	8d 31       	cpi	r24, 0x1D	; 29
    2e96:	00 f1       	brcs	.+64     	; 0x2ed8 <_Z13uhreinstellenv+0x6cc>
							rtc.Tag=0;
    2e98:	10 82       	st	Z, r1
							rtc.Monat=0;
    2e9a:	f6 01       	movw	r30, r12
    2e9c:	10 82       	st	Z, r1
							rtc.Jahr=0;
    2e9e:	ed e6       	ldi	r30, 0x6D	; 109
    2ea0:	f7 e0       	ldi	r31, 0x07	; 7
    2ea2:	10 82       	st	Z, r1
							pos=3;
							buffersize=sprintf(buffer,"Tag falsch");
    2ea4:	8b e0       	ldi	r24, 0x0B	; 11
    2ea6:	e8 ed       	ldi	r30, 0xD8	; 216
    2ea8:	f2 e0       	ldi	r31, 0x02	; 2
    2eaa:	a7 2d       	mov	r26, r7
    2eac:	b8 2d       	mov	r27, r8
    2eae:	01 90       	ld	r0, Z+
    2eb0:	0d 92       	st	X+, r0
    2eb2:	8a 95       	dec	r24
    2eb4:	e1 f7       	brne	.-8      	; 0x2eae <_Z13uhreinstellenv+0x6a2>
    2eb6:	2d 88       	ldd	r2, Y+21	; 0x15
    2eb8:	3e 88       	ldd	r3, Y+22	; 0x16
    2eba:	1b 2d       	mov	r17, r11
							for(uint8_t i = 0; i<buffersize;i++){
								oled.draw_ASCI(buffer[i],charsize*i,7*8);
    2ebc:	f1 01       	movw	r30, r2
    2ebe:	61 91       	ld	r22, Z+
    2ec0:	1f 01       	movw	r2, r30
    2ec2:	28 e3       	ldi	r18, 0x38	; 56
    2ec4:	41 2f       	mov	r20, r17
    2ec6:	86 e2       	ldi	r24, 0x26	; 38
    2ec8:	93 e0       	ldi	r25, 0x03	; 3
    2eca:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7Display9draw_ASCIEhhh>
    2ece:	1a 5f       	subi	r17, 0xFA	; 250
							rtc.Tag=0;
							rtc.Monat=0;
							rtc.Jahr=0;
							pos=3;
							buffersize=sprintf(buffer,"Tag falsch");
							for(uint8_t i = 0; i<buffersize;i++){
    2ed0:	1c 33       	cpi	r17, 0x3C	; 60
    2ed2:	a1 f7       	brne	.-24     	; 0x2ebc <_Z13uhreinstellenv+0x6b0>
    2ed4:	4e c0       	rjmp	.+156    	; 0x2f72 <_Z13uhreinstellenv+0x766>
						}
					}
				}
				break;
			default:
				pos++;
    2ed6:	93 94       	inc	r9
				break;
		}
		pos++;
    2ed8:	93 94       	inc	r9
	
	oled.clearFrame();
	char buffer[20];
	uint8_t buffersize;
	uint8_t pos=0;
	while(pos<11){
    2eda:	fa e0       	ldi	r31, 0x0A	; 10
    2edc:	f9 15       	cp	r31, r9
    2ede:	08 f0       	brcs	.+2      	; 0x2ee2 <_Z13uhreinstellenv+0x6d6>
    2ee0:	d4 cc       	rjmp	.-1624   	; 0x288a <_Z13uhreinstellenv+0x7e>
				break;
		}
		pos++;
	}
	
	rtc.Sekunden		= 0;
    2ee2:	10 92 69 07 	sts	0x0769, r1
	rtc.HundSekunden	= 0;
    2ee6:	10 92 6a 07 	sts	0x076A, r1
	oled.clearFrame();
    2eea:	86 e2       	ldi	r24, 0x26	; 38
    2eec:	93 e0       	ldi	r25, 0x03	; 3
    2eee:	0e 94 ed 02 	call	0x5da	; 0x5da <_ZN7Display10clearFrameEv>
	rtc.ausgabedatumneu();
    2ef2:	87 e5       	ldi	r24, 0x57	; 87
    2ef4:	97 e0       	ldi	r25, 0x07	; 7
    2ef6:	0e 94 8e 23 	call	0x471c	; 0x471c <_ZN3RTC15ausgabedatumneuEv>
	rtc.ausgabezeitneu();
    2efa:	87 e5       	ldi	r24, 0x57	; 87
    2efc:	97 e0       	ldi	r25, 0x07	; 7
    2efe:	0e 94 55 23 	call	0x46aa	; 0x46aa <_ZN3RTC14ausgabezeitneuEv>
	rtc.RTCstart();
    2f02:	87 e5       	ldi	r24, 0x57	; 87
    2f04:	97 e0       	ldi	r25, 0x07	; 7
    2f06:	0e 94 66 24 	call	0x48cc	; 0x48cc <_ZN3RTC8RTCstartEv>
    2f0a:	39 c0       	rjmp	.+114    	; 0x2f7e <_Z13uhreinstellenv+0x772>

		oled.sendFrame();
		oled.clearFrame();
		switch (pos) {
			case 0:
				rtc.Stunden=Tastatur.ZahlenausTastatur()*10;
    2f0c:	e7 e6       	ldi	r30, 0x67	; 103
    2f0e:	f7 e0       	ldi	r31, 0x07	; 7
    2f10:	80 83       	st	Z, r24
    2f12:	33 c0       	rjmp	.+102    	; 0x2f7a <_Z13uhreinstellenv+0x76e>
				if(rtc.Stunden>=24){
					rtc.Stunden=0;
					pos=-1;
    2f14:	99 24       	eor	r9, r9
    2f16:	9a 94       	dec	r9
    2f18:	30 c0       	rjmp	.+96     	; 0x2f7a <_Z13uhreinstellenv+0x76e>
				break;
			case 1:
				rtc.Stunden+=Tastatur.ZahlenausTastatur();
				if(rtc.Stunden>=24){
					rtc.Stunden=0;
					pos=-1;
    2f1a:	99 24       	eor	r9, r9
    2f1c:	9a 94       	dec	r9
    2f1e:	2d c0       	rjmp	.+90     	; 0x2f7a <_Z13uhreinstellenv+0x76e>
				break;
			case 2:
				rtc.Minuten=Tastatur.ZahlenausTastatur()*10;
				if(rtc.Minuten>=60){
					rtc.Minuten=0;
					pos=1;
    2f20:	99 24       	eor	r9, r9
    2f22:	93 94       	inc	r9
    2f24:	2a c0       	rjmp	.+84     	; 0x2f7a <_Z13uhreinstellenv+0x76e>
				break;
			case 3:
				rtc.Minuten+=Tastatur.ZahlenausTastatur();
				if(rtc.Minuten>=60){
					rtc.Minuten=0;
					pos=1;
    2f26:	99 24       	eor	r9, r9
    2f28:	93 94       	inc	r9
    2f2a:	27 c0       	rjmp	.+78     	; 0x2f7a <_Z13uhreinstellenv+0x76e>
				break;
			case 4:
				rtc.Tag=Tastatur.ZahlenausTastatur()*10;
				if(rtc.Tag>=32){
					rtc.Tag=0;
					pos=3;
    2f2c:	0f 2e       	mov	r0, r31
    2f2e:	f3 e0       	ldi	r31, 0x03	; 3
    2f30:	9f 2e       	mov	r9, r31
    2f32:	f0 2d       	mov	r31, r0
    2f34:	22 c0       	rjmp	.+68     	; 0x2f7a <_Z13uhreinstellenv+0x76e>
				break;
			case 5:
				rtc.Tag+=Tastatur.ZahlenausTastatur();
				if(rtc.Tag>=32){
					rtc.Tag=0;
					pos=3;
    2f36:	0f 2e       	mov	r0, r31
    2f38:	f3 e0       	ldi	r31, 0x03	; 3
    2f3a:	9f 2e       	mov	r9, r31
    2f3c:	f0 2d       	mov	r31, r0
    2f3e:	1d c0       	rjmp	.+58     	; 0x2f7a <_Z13uhreinstellenv+0x76e>
				break;
			case 6:
				rtc.Monat=Tastatur.ZahlenausTastatur()*10;
				if(rtc.Monat>=13){
					rtc.Monat=0;
					pos=5;
    2f40:	0f 2e       	mov	r0, r31
    2f42:	f5 e0       	ldi	r31, 0x05	; 5
    2f44:	9f 2e       	mov	r9, r31
    2f46:	f0 2d       	mov	r31, r0
    2f48:	18 c0       	rjmp	.+48     	; 0x2f7a <_Z13uhreinstellenv+0x76e>
				}
				if(rtc.Monat==4||rtc.Monat==6||rtc.Monat==9||rtc.Monat==11){
					if(rtc.Tag>=31){
						rtc.Tag=0;
						rtc.Monat=0;
						pos=3;
    2f4a:	0f 2e       	mov	r0, r31
    2f4c:	f3 e0       	ldi	r31, 0x03	; 3
    2f4e:	9f 2e       	mov	r9, r31
    2f50:	f0 2d       	mov	r31, r0
    2f52:	13 c0       	rjmp	.+38     	; 0x2f7a <_Z13uhreinstellenv+0x76e>
				}
				else if(rtc.Monat==2){
					if(rtc.Tag>=30){
						rtc.Tag=0;
						rtc.Monat=0;
						pos=3;
    2f54:	0f 2e       	mov	r0, r31
    2f56:	f3 e0       	ldi	r31, 0x03	; 3
    2f58:	9f 2e       	mov	r9, r31
    2f5a:	f0 2d       	mov	r31, r0
    2f5c:	0e c0       	rjmp	.+28     	; 0x2f7a <_Z13uhreinstellenv+0x76e>
				break;
			case 8:
				rtc.Jahr=Tastatur.ZahlenausTastatur()*10;
				if(rtc.Jahr>=50){
					rtc.Jahr=0;
					pos=7;
    2f5e:	0f 2e       	mov	r0, r31
    2f60:	f7 e0       	ldi	r31, 0x07	; 7
    2f62:	9f 2e       	mov	r9, r31
    2f64:	f0 2d       	mov	r31, r0
    2f66:	09 c0       	rjmp	.+18     	; 0x2f7a <_Z13uhreinstellenv+0x76e>
						if (rtc.Tag>=30)
						{
							rtc.Tag=0;
							rtc.Monat=0;
							rtc.Jahr=0;
							pos=3;
    2f68:	0f 2e       	mov	r0, r31
    2f6a:	f3 e0       	ldi	r31, 0x03	; 3
    2f6c:	9f 2e       	mov	r9, r31
    2f6e:	f0 2d       	mov	r31, r0
    2f70:	04 c0       	rjmp	.+8      	; 0x2f7a <_Z13uhreinstellenv+0x76e>
					else{
						if(rtc.Tag>=29){
							rtc.Tag=0;
							rtc.Monat=0;
							rtc.Jahr=0;
							pos=3;
    2f72:	0f 2e       	mov	r0, r31
    2f74:	f3 e0       	ldi	r31, 0x03	; 3
    2f76:	9f 2e       	mov	r9, r31
    2f78:	f0 2d       	mov	r31, r0
				break;
			default:
				pos++;
				break;
		}
		pos++;
    2f7a:	93 94       	inc	r9
    2f7c:	86 cc       	rjmp	.-1780   	; 0x288a <_Z13uhreinstellenv+0x7e>
	rtc.HundSekunden	= 0;
	oled.clearFrame();
	rtc.ausgabedatumneu();
	rtc.ausgabezeitneu();
	rtc.RTCstart();
}
    2f7e:	66 96       	adiw	r28, 0x16	; 22
    2f80:	0f b6       	in	r0, 0x3f	; 63
    2f82:	f8 94       	cli
    2f84:	de bf       	out	0x3e, r29	; 62
    2f86:	0f be       	out	0x3f, r0	; 63
    2f88:	cd bf       	out	0x3d, r28	; 61
    2f8a:	df 91       	pop	r29
    2f8c:	cf 91       	pop	r28
    2f8e:	1f 91       	pop	r17
    2f90:	0f 91       	pop	r16
    2f92:	ff 90       	pop	r15
    2f94:	ef 90       	pop	r14
    2f96:	df 90       	pop	r13
    2f98:	cf 90       	pop	r12
    2f9a:	bf 90       	pop	r11
    2f9c:	af 90       	pop	r10
    2f9e:	9f 90       	pop	r9
    2fa0:	8f 90       	pop	r8
    2fa2:	7f 90       	pop	r7
    2fa4:	6f 90       	pop	r6
    2fa6:	5f 90       	pop	r5
    2fa8:	4f 90       	pop	r4
    2faa:	3f 90       	pop	r3
    2fac:	2f 90       	pop	r2
    2fae:	08 95       	ret

00002fb0 <__vector_9>:
uint8_t pos;		//Handler fuer die Einganbe von Zahlen

//Ausgelagerte Sammlung der einzelnen Seitenlayouts
#include "Seiten.h"

ISR(TIMER2_OVF_vect){	//Vektor fuer die RTC
    2fb0:	1f 92       	push	r1
    2fb2:	0f 92       	push	r0
    2fb4:	0f b6       	in	r0, 0x3f	; 63
    2fb6:	0f 92       	push	r0
    2fb8:	11 24       	eor	r1, r1
    2fba:	8f 93       	push	r24
    2fbc:	ef 93       	push	r30
    2fbe:	ff 93       	push	r31
	TCNT2=TIMER2RTCTIME;
    2fc0:	10 92 b2 00 	sts	0x00B2, r1
	rtc.Sekunden++;
    2fc4:	e9 e6       	ldi	r30, 0x69	; 105
    2fc6:	f7 e0       	ldi	r31, 0x07	; 7
    2fc8:	80 81       	ld	r24, Z
    2fca:	8f 5f       	subi	r24, 0xFF	; 255
    2fcc:	80 83       	st	Z, r24
	rtc.interupts|= (1<<sekundeninterupt);
    2fce:	ee e6       	ldi	r30, 0x6E	; 110
    2fd0:	f7 e0       	ldi	r31, 0x07	; 7
    2fd2:	80 81       	ld	r24, Z
    2fd4:	82 60       	ori	r24, 0x02	; 2
    2fd6:	80 83       	st	Z, r24
}
    2fd8:	ff 91       	pop	r31
    2fda:	ef 91       	pop	r30
    2fdc:	8f 91       	pop	r24
    2fde:	0f 90       	pop	r0
    2fe0:	0f be       	out	0x3f, r0	; 63
    2fe2:	0f 90       	pop	r0
    2fe4:	1f 90       	pop	r1
    2fe6:	18 95       	reti

00002fe8 <_Z15geschwindigkeitf>:

double geschw;
double strecke;
double maxgeschw;
uint32_t Fahrtzeit;
void geschwindigkeit(float durch){
    2fe8:	cf 92       	push	r12
    2fea:	df 92       	push	r13
    2fec:	ef 92       	push	r14
    2fee:	ff 92       	push	r15
    2ff0:	cf 93       	push	r28
    2ff2:	df 93       	push	r29
	//uint16_t zaehlungen = (TCNT1H<<8) | (TCNT1L);
	uint16_t zaehlungen = TCNT1;
    2ff4:	c0 91 84 00 	lds	r28, 0x0084
    2ff8:	d0 91 85 00 	lds	r29, 0x0085
	//geschw = durch*M_PI/(REEDMS+((double)zaehlungen/zaehlungenprozeiteinheit)*zeitproachtzaehlungen);
	double umlaufzeit = (REEDMS/1000.0+(zaehlungen/zaehlungenprozeiteinheit)*zeitproachtzaehlungen);
	//geschw = umlaufzeit;
	geschw = (durch)*M_PI*3.6;
    2ffc:	2b ed       	ldi	r18, 0xDB	; 219
    2ffe:	3f e0       	ldi	r19, 0x0F	; 15
    3000:	49 e4       	ldi	r20, 0x49	; 73
    3002:	50 e4       	ldi	r21, 0x40	; 64
    3004:	0e 94 69 27 	call	0x4ed2	; 0x4ed2 <__mulsf3>
    3008:	26 e6       	ldi	r18, 0x66	; 102
    300a:	36 e6       	ldi	r19, 0x66	; 102
    300c:	46 e6       	ldi	r20, 0x66	; 102
    300e:	50 e4       	ldi	r21, 0x40	; 64
    3010:	0e 94 69 27 	call	0x4ed2	; 0x4ed2 <__mulsf3>
    3014:	6b 01       	movw	r12, r22
    3016:	7c 01       	movw	r14, r24
uint32_t Fahrtzeit;
void geschwindigkeit(float durch){
	//uint16_t zaehlungen = (TCNT1H<<8) | (TCNT1L);
	uint16_t zaehlungen = TCNT1;
	//geschw = durch*M_PI/(REEDMS+((double)zaehlungen/zaehlungenprozeiteinheit)*zeitproachtzaehlungen);
	double umlaufzeit = (REEDMS/1000.0+(zaehlungen/zaehlungenprozeiteinheit)*zeitproachtzaehlungen);
    3018:	be 01       	movw	r22, r28
    301a:	80 e0       	ldi	r24, 0x00	; 0
    301c:	90 e0       	ldi	r25, 0x00	; 0
    301e:	0e 94 09 26 	call	0x4c12	; 0x4c12 <__floatunsisf>
    3022:	20 e0       	ldi	r18, 0x00	; 0
    3024:	30 e0       	ldi	r19, 0x00	; 0
    3026:	40 e0       	ldi	r20, 0x00	; 0
    3028:	5e e3       	ldi	r21, 0x3E	; 62
    302a:	0e 94 69 27 	call	0x4ed2	; 0x4ed2 <__mulsf3>
    302e:	2d eb       	ldi	r18, 0xBD	; 189
    3030:	37 e3       	ldi	r19, 0x37	; 55
    3032:	46 e8       	ldi	r20, 0x86	; 134
    3034:	5a e3       	ldi	r21, 0x3A	; 58
    3036:	0e 94 69 27 	call	0x4ed2	; 0x4ed2 <__mulsf3>
    303a:	2a e0       	ldi	r18, 0x0A	; 10
    303c:	37 ed       	ldi	r19, 0xD7	; 215
    303e:	43 ea       	ldi	r20, 0xA3	; 163
    3040:	5b e3       	ldi	r21, 0x3B	; 59
    3042:	0e 94 a3 24 	call	0x4946	; 0x4946 <__addsf3>
    3046:	9b 01       	movw	r18, r22
    3048:	ac 01       	movw	r20, r24
	//geschw = umlaufzeit;
	geschw = (durch)*M_PI*3.6;
	geschw /= umlaufzeit;
    304a:	c7 01       	movw	r24, r14
    304c:	b6 01       	movw	r22, r12
    304e:	0e 94 70 25 	call	0x4ae0	; 0x4ae0 <__divsf3>
    3052:	6b 01       	movw	r12, r22
    3054:	7c 01       	movw	r14, r24
	if (geschw >=160)
    3056:	20 e0       	ldi	r18, 0x00	; 0
    3058:	30 e0       	ldi	r19, 0x00	; 0
    305a:	40 e2       	ldi	r20, 0x20	; 32
    305c:	53 e4       	ldi	r21, 0x43	; 67
    305e:	0e 94 19 27 	call	0x4e32	; 0x4e32 <__gesf2>
    3062:	88 23       	and	r24, r24
    3064:	4c f4       	brge	.+18     	; 0x3078 <_Z15geschwindigkeitf+0x90>
	uint16_t zaehlungen = TCNT1;
	//geschw = durch*M_PI/(REEDMS+((double)zaehlungen/zaehlungenprozeiteinheit)*zeitproachtzaehlungen);
	double umlaufzeit = (REEDMS/1000.0+(zaehlungen/zaehlungenprozeiteinheit)*zeitproachtzaehlungen);
	//geschw = umlaufzeit;
	geschw = (durch)*M_PI*3.6;
	geschw /= umlaufzeit;
    3066:	c0 92 08 03 	sts	0x0308, r12
    306a:	d0 92 09 03 	sts	0x0309, r13
    306e:	e0 92 0a 03 	sts	0x030A, r14
    3072:	f0 92 0b 03 	sts	0x030B, r15
    3076:	08 c0       	rjmp	.+16     	; 0x3088 <_Z15geschwindigkeitf+0xa0>
	if (geschw >=160)
	{
		geschw=0;
    3078:	10 92 08 03 	sts	0x0308, r1
    307c:	10 92 09 03 	sts	0x0309, r1
    3080:	10 92 0a 03 	sts	0x030A, r1
    3084:	10 92 0b 03 	sts	0x030B, r1
	}
	//im kn/h *3.6
	//geschw*=3.6;
	//TCNT1H = 0;
	//TCNT1L = 0;
	TCNT1 = 0;
    3088:	10 92 85 00 	sts	0x0085, r1
    308c:	10 92 84 00 	sts	0x0084, r1
}
    3090:	df 91       	pop	r29
    3092:	cf 91       	pop	r28
    3094:	ff 90       	pop	r15
    3096:	ef 90       	pop	r14
    3098:	df 90       	pop	r13
    309a:	cf 90       	pop	r12
    309c:	08 95       	ret

0000309e <_Z13reed_debouncePVhh>:

uint8_t reed_debounce(volatile uint8_t *port, uint8_t pin)
{
	if ( !(*port & (1 << pin)) )
    309e:	fc 01       	movw	r30, r24
    30a0:	20 81       	ld	r18, Z
    30a2:	30 e0       	ldi	r19, 0x00	; 0
    30a4:	06 2e       	mov	r0, r22
    30a6:	02 c0       	rjmp	.+4      	; 0x30ac <_Z13reed_debouncePVhh+0xe>
    30a8:	35 95       	asr	r19
    30aa:	27 95       	ror	r18
    30ac:	0a 94       	dec	r0
    30ae:	e2 f7       	brpl	.-8      	; 0x30a8 <_Z13reed_debouncePVhh+0xa>
    30b0:	20 fd       	sbrc	r18, 0
    30b2:	17 c0       	rjmp	.+46     	; 0x30e2 <_Z13reed_debouncePVhh+0x44>
    30b4:	ef e0       	ldi	r30, 0x0F	; 15
    30b6:	f7 e2       	ldi	r31, 0x27	; 39
    30b8:	31 97       	sbiw	r30, 0x01	; 1
    30ba:	f1 f7       	brne	.-4      	; 0x30b8 <_Z13reed_debouncePVhh+0x1a>
    30bc:	00 c0       	rjmp	.+0      	; 0x30be <_Z13reed_debouncePVhh+0x20>
    30be:	00 00       	nop
	{
		/* Pin wurde auf Masse gezogen, ms warten   */
		//_delay_us(50);
		//_delay_us(50);
		_delay_ms(REEDMS);
		if ( (*port & (1 << pin)) )
    30c0:	fc 01       	movw	r30, r24
    30c2:	80 81       	ld	r24, Z
    30c4:	90 e0       	ldi	r25, 0x00	; 0
    30c6:	9c 01       	movw	r18, r24
    30c8:	02 c0       	rjmp	.+4      	; 0x30ce <_Z13reed_debouncePVhh+0x30>
    30ca:	35 95       	asr	r19
    30cc:	27 95       	ror	r18
    30ce:	6a 95       	dec	r22
    30d0:	e2 f7       	brpl	.-8      	; 0x30ca <_Z13reed_debouncePVhh+0x2c>
    30d2:	20 ff       	sbrs	r18, 0
    30d4:	08 c0       	rjmp	.+16     	; 0x30e6 <_Z13reed_debouncePVhh+0x48>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    30d6:	32 e0       	ldi	r19, 0x02	; 2
    30d8:	3a 95       	dec	r19
    30da:	f1 f7       	brne	.-4      	; 0x30d8 <_Z13reed_debouncePVhh+0x3a>
    30dc:	00 c0       	rjmp	.+0      	; 0x30de <_Z13reed_debouncePVhh+0x40>
		{
			/* Anwender Zeit zum Loslassen des Tasters geben */
			_delay_us(1);
			return 1;
    30de:	81 e0       	ldi	r24, 0x01	; 1
    30e0:	08 95       	ret
		}
	}
	return 0;
    30e2:	80 e0       	ldi	r24, 0x00	; 0
    30e4:	08 95       	ret
    30e6:	80 e0       	ldi	r24, 0x00	; 0
}
    30e8:	08 95       	ret

000030ea <_Z15initialisierungv>:
    }
}

void initialisierung(){
	//nullen der Flagregister
	rtc.interupts=0;
    30ea:	10 92 6e 07 	sts	0x076E, r1
	anzeige=0;
    30ee:	10 92 0e 03 	sts	0x030E, r1
    30f2:	10 92 0d 03 	sts	0x030D, r1
	pos=0;
    30f6:	10 92 0c 03 	sts	0x030C, r1
	//initialisieren des Zaehler fuer die Winkelgeschw sowie den Timer
	geschw=0;
    30fa:	10 92 08 03 	sts	0x0308, r1
    30fe:	10 92 09 03 	sts	0x0309, r1
    3102:	10 92 0a 03 	sts	0x030A, r1
    3106:	10 92 0b 03 	sts	0x030B, r1
	strecke = 0;
    310a:	10 92 04 03 	sts	0x0304, r1
    310e:	10 92 05 03 	sts	0x0305, r1
    3112:	10 92 06 03 	sts	0x0306, r1
    3116:	10 92 07 03 	sts	0x0307, r1
	maxgeschw = 0;
    311a:	10 92 00 03 	sts	0x0300, r1
    311e:	10 92 01 03 	sts	0x0301, r1
    3122:	10 92 02 03 	sts	0x0302, r1
    3126:	10 92 03 03 	sts	0x0303, r1
	Fahrtzeit = 0;
    312a:	10 92 fc 02 	sts	0x02FC, r1
    312e:	10 92 fd 02 	sts	0x02FD, r1
    3132:	10 92 fe 02 	sts	0x02FE, r1
    3136:	10 92 ff 02 	sts	0x02FF, r1
	TCNT1=0;
    313a:	10 92 85 00 	sts	0x0085, r1
    313e:	10 92 84 00 	sts	0x0084, r1
	//Ausgaenge und Eingaenge einstellen
	DDRD = (1<<PIND0) | (1<<PIND1) | (1<<PIND2) | (1<<PIND3);	//Pins zur Ausgabe
    3142:	8f e0       	ldi	r24, 0x0F	; 15
    3144:	8a b9       	out	0x0a, r24	; 10
	DDRD &= ~((1<<PIND4) | (1<<PIND5) | (1<<PIND6));			//Restliche Pins als Eingaenge schalten
    3146:	8a b1       	in	r24, 0x0a	; 10
    3148:	8f 78       	andi	r24, 0x8F	; 143
    314a:	8a b9       	out	0x0a, r24	; 10
	//Eingang fuer den Reedkontak schalten mit internem Pullup
	DDRC &= ~((1<<PORTC3));
    314c:	3b 98       	cbi	0x07, 3	; 7
	PORTC |= (1<<PORTC3);
    314e:	43 9a       	sbi	0x08, 3	; 8
	//I2C Interface
	//twi_init();
	//Display
	oled.InitializeDisplay();
    3150:	86 e2       	ldi	r24, 0x26	; 38
    3152:	93 e0       	ldi	r25, 0x03	; 3
    3154:	0e 94 14 03 	call	0x628	; 0x628 <_ZN7Display17InitializeDisplayEv>
	//initialisierung wird im konstruktor vorgenommen
	oled.clearFrame();
    3158:	86 e2       	ldi	r24, 0x26	; 38
    315a:	93 e0       	ldi	r25, 0x03	; 3
    315c:	0e 94 ed 02 	call	0x5da	; 0x5da <_ZN7Display10clearFrameEv>
	//HMC5883L initialisieren
	//kompass.initialize_HMC5883L();
	//initialisierung wird im Konstruktor erledigt
	
	//ADC Initialisieren auf CH0
	ADMUX = (1<<REFS0);
    3160:	80 e4       	ldi	r24, 0x40	; 64
    3162:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA = (1<<ADPS1) | (1<<ADPS0);
    3166:	ea e7       	ldi	r30, 0x7A	; 122
    3168:	f0 e0       	ldi	r31, 0x00	; 0
    316a:	83 e0       	ldi	r24, 0x03	; 3
    316c:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADEN);
    316e:	80 81       	ld	r24, Z
    3170:	80 68       	ori	r24, 0x80	; 128
    3172:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);
    3174:	80 81       	ld	r24, Z
    3176:	80 64       	ori	r24, 0x40	; 64
    3178:	80 83       	st	Z, r24
	while (ADCSRA & (1<<ADSC) ) {
    317a:	80 81       	ld	r24, Z
    317c:	86 fd       	sbrc	r24, 6
    317e:	fd cf       	rjmp	.-6      	; 0x317a <_Z15initialisierungv+0x90>
	}
	(void) ADCW;
    3180:	80 91 78 00 	lds	r24, 0x0078
    3184:	90 91 79 00 	lds	r25, 0x0079
	//Wilkommensanzeige
	willkommenpage();
    3188:	0e 94 73 09 	call	0x12e6	; 0x12e6 <_Z14willkommenpagev>
	//Uhreinstellungen
	//uhreinstellen();
	//*************************************************
	//Nur Test, damit es schneller geht beim Start
	rtc.dummyeinst();
    318c:	87 e5       	ldi	r24, 0x57	; 87
    318e:	97 e0       	ldi	r25, 0x07	; 7
    3190:	0e 94 50 24 	call	0x48a0	; 0x48a0 <_ZN3RTC10dummyeinstEv>
	//*********************************
	rtc.RTCstart();
    3194:	87 e5       	ldi	r24, 0x57	; 87
    3196:	97 e0       	ldi	r25, 0x07	; 7
    3198:	0e 94 66 24 	call	0x48cc	; 0x48cc <_ZN3RTC8RTCstartEv>
	//ausgabe starten
	anzeige|=(1<<Uhrflag);
    319c:	80 91 0d 03 	lds	r24, 0x030D
    31a0:	90 91 0e 03 	lds	r25, 0x030E
    31a4:	81 60       	ori	r24, 0x01	; 1
    31a6:	90 93 0e 03 	sts	0x030E, r25
    31aa:	80 93 0d 03 	sts	0x030D, r24
	sei();
    31ae:	78 94       	sei
    31b0:	08 95       	ret

000031b2 <_Z19maininterupthandlerv>:
	//interupt dierekt aus der rtc
	//if((rtc.interupts & (1<<hundinterupt))){
		//rtc.zeit();
		//rtc.interupts&=~(1<<hundinterupt);
	//}
	if ((anzeige&(1<<Fahradflag)))
    31b2:	80 91 0d 03 	lds	r24, 0x030D
    31b6:	81 ff       	sbrs	r24, 1
    31b8:	0d c0       	rjmp	.+26     	; 0x31d4 <_Z19maininterupthandlerv+0x22>
	{
		//debounce Funktion fuer den Reedswitch
		if (reed_debounce(&PINC,PINC3))
    31ba:	63 e0       	ldi	r22, 0x03	; 3
    31bc:	86 e2       	ldi	r24, 0x26	; 38
    31be:	90 e0       	ldi	r25, 0x00	; 0
    31c0:	0e 94 4f 18 	call	0x309e	; 0x309e <_Z13reed_debouncePVhh>
    31c4:	88 23       	and	r24, r24
    31c6:	31 f0       	breq	.+12     	; 0x31d4 <_Z19maininterupthandlerv+0x22>
		{
			//Durchmesser ist 28 Zoll
			geschwindigkeit(28.0*2.54/100.0);
    31c8:	63 e3       	ldi	r22, 0x33	; 51
    31ca:	71 e1       	ldi	r23, 0x11	; 17
    31cc:	86 e3       	ldi	r24, 0x36	; 54
    31ce:	9f e3       	ldi	r25, 0x3F	; 63
    31d0:	0e 94 f4 17 	call	0x2fe8	; 0x2fe8 <_Z15geschwindigkeitf>
    31d4:	08 95       	ret

000031d6 <_Z14anzeigehandlerv>:
		}
	}
}

void anzeigehandler(){
    31d6:	4f 92       	push	r4
    31d8:	5f 92       	push	r5
    31da:	6f 92       	push	r6
    31dc:	7f 92       	push	r7
    31de:	af 92       	push	r10
    31e0:	bf 92       	push	r11
    31e2:	cf 92       	push	r12
    31e4:	df 92       	push	r13
    31e6:	ef 92       	push	r14
    31e8:	ff 92       	push	r15
    31ea:	0f 93       	push	r16
    31ec:	1f 93       	push	r17
    31ee:	cf 93       	push	r28
    31f0:	df 93       	push	r29
	//Handler fuer 1Hz Flag
	if ((rtc.interupts & (1<<sekundeninterupt)))
    31f2:	80 91 6e 07 	lds	r24, 0x076E
    31f6:	81 ff       	sbrs	r24, 1
    31f8:	5f c1       	rjmp	.+702    	; 0x34b8 <_Z14anzeigehandlerv+0x2e2>
	{
		rtc.zeit();
    31fa:	87 e5       	ldi	r24, 0x57	; 87
    31fc:	97 e0       	ldi	r25, 0x07	; 7
    31fe:	0e 94 2b 24 	call	0x4856	; 0x4856 <_ZN3RTC4zeitEv>
		//Handler fuer die Anzeige der Seiten
		//Die einzelnen Funktionen beschreiben nur den Framebuffer und nicht dierekt das Display
		if ((anzeige&(1<<menueflag)) && (anzeige&(1<<Uhrflag)))
    3202:	80 91 0d 03 	lds	r24, 0x030D
    3206:	90 91 0e 03 	lds	r25, 0x030E
    320a:	9c 01       	movw	r18, r24
    320c:	21 70       	andi	r18, 0x01	; 1
    320e:	30 72       	andi	r19, 0x20	; 32
    3210:	21 30       	cpi	r18, 0x01	; 1
    3212:	30 42       	sbci	r19, 0x20	; 32
    3214:	61 f4       	brne	.+24     	; 0x322e <_Z14anzeigehandlerv+0x58>
		{
			menue_uhr();
    3216:	0e 94 cf 0c 	call	0x199e	; 0x199e <_Z9menue_uhrv>
			anzeige|=(1<<refreshdisplay);
    321a:	80 91 0d 03 	lds	r24, 0x030D
    321e:	90 91 0e 03 	lds	r25, 0x030E
    3222:	90 68       	ori	r25, 0x80	; 128
    3224:	90 93 0e 03 	sts	0x030E, r25
    3228:	80 93 0d 03 	sts	0x030D, r24
    322c:	40 c1       	rjmp	.+640    	; 0x34ae <_Z14anzeigehandlerv+0x2d8>
    322e:	9c 01       	movw	r18, r24
    3230:	28 70       	andi	r18, 0x08	; 8
    3232:	30 72       	andi	r19, 0x20	; 32
		}
		else if ((anzeige&(1<<menueflag)) && (anzeige&(1<<Einstellungsflag)))
    3234:	28 30       	cpi	r18, 0x08	; 8
    3236:	30 42       	sbci	r19, 0x20	; 32
    3238:	61 f4       	brne	.+24     	; 0x3252 <_Z14anzeigehandlerv+0x7c>
		{
			menue_einst();
    323a:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <_Z11menue_einstv>
			anzeige|=(1<<refreshdisplay);
    323e:	80 91 0d 03 	lds	r24, 0x030D
    3242:	90 91 0e 03 	lds	r25, 0x030E
    3246:	90 68       	ori	r25, 0x80	; 128
    3248:	90 93 0e 03 	sts	0x030E, r25
    324c:	80 93 0d 03 	sts	0x030D, r24
    3250:	2e c1       	rjmp	.+604    	; 0x34ae <_Z14anzeigehandlerv+0x2d8>
		}
		else if ((anzeige&(1<<menueflag)))
    3252:	95 ff       	sbrs	r25, 5
    3254:	0c c0       	rjmp	.+24     	; 0x326e <_Z14anzeigehandlerv+0x98>
		{
			menue_haupt();
    3256:	0e 94 93 0b 	call	0x1726	; 0x1726 <_Z11menue_hauptv>
			anzeige|=(1<<refreshdisplay);
    325a:	80 91 0d 03 	lds	r24, 0x030D
    325e:	90 91 0e 03 	lds	r25, 0x030E
    3262:	90 68       	ori	r25, 0x80	; 128
    3264:	90 93 0e 03 	sts	0x030E, r25
    3268:	80 93 0d 03 	sts	0x030D, r24
    326c:	20 c1       	rjmp	.+576    	; 0x34ae <_Z14anzeigehandlerv+0x2d8>
		}
		else if ((anzeige&(1<<Kompasgaineinstellenflag)))
    326e:	85 ff       	sbrs	r24, 5
    3270:	0c c0       	rjmp	.+24     	; 0x328a <_Z14anzeigehandlerv+0xb4>
		{
			Gaineinstellen();
    3272:	0e 94 fa 0f 	call	0x1ff4	; 0x1ff4 <_Z14Gaineinstellenv>
			anzeige|=(1<<refreshdisplay);
    3276:	80 91 0d 03 	lds	r24, 0x030D
    327a:	90 91 0e 03 	lds	r25, 0x030E
    327e:	90 68       	ori	r25, 0x80	; 128
    3280:	90 93 0e 03 	sts	0x030E, r25
    3284:	80 93 0d 03 	sts	0x030D, r24
    3288:	12 c1       	rjmp	.+548    	; 0x34ae <_Z14anzeigehandlerv+0x2d8>
		}
		else if ((anzeige&(1<<Uhrflag)))
    328a:	80 ff       	sbrs	r24, 0
    328c:	0c c0       	rjmp	.+24     	; 0x32a6 <_Z14anzeigehandlerv+0xd0>
		{
			uhranzeigen();
    328e:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <_Z11uhranzeigenv>
			anzeige|=(1<<refreshdisplay);
    3292:	80 91 0d 03 	lds	r24, 0x030D
    3296:	90 91 0e 03 	lds	r25, 0x030E
    329a:	90 68       	ori	r25, 0x80	; 128
    329c:	90 93 0e 03 	sts	0x030E, r25
    32a0:	80 93 0d 03 	sts	0x030D, r24
    32a4:	04 c1       	rjmp	.+520    	; 0x34ae <_Z14anzeigehandlerv+0x2d8>
		}
		else if ((anzeige&(1<<Kompasflag)))
    32a6:	82 ff       	sbrs	r24, 2
    32a8:	10 c0       	rjmp	.+32     	; 0x32ca <_Z14anzeigehandlerv+0xf4>
		{
			anzeige_kompass(kompass.angle());
    32aa:	8f e6       	ldi	r24, 0x6F	; 111
    32ac:	97 e0       	ldi	r25, 0x07	; 7
    32ae:	0e 94 2b 20 	call	0x4056	; 0x4056 <_ZN7Kompass5angleEv>
    32b2:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <_Z15anzeige_kompassd>
			anzeige|=(1<<refreshdisplay);
    32b6:	80 91 0d 03 	lds	r24, 0x030D
    32ba:	90 91 0e 03 	lds	r25, 0x030E
    32be:	90 68       	ori	r25, 0x80	; 128
    32c0:	90 93 0e 03 	sts	0x030E, r25
    32c4:	80 93 0d 03 	sts	0x030D, r24
    32c8:	f2 c0       	rjmp	.+484    	; 0x34ae <_Z14anzeigehandlerv+0x2d8>
		}
		else if ((anzeige&(1<<Fahradflag)))
    32ca:	81 ff       	sbrs	r24, 1
    32cc:	96 c0       	rjmp	.+300    	; 0x33fa <_Z14anzeigehandlerv+0x224>
		{
			//fahradschirm(12.3,kompass.angle());
			if (geschw>maxgeschw)
    32ce:	40 90 08 03 	lds	r4, 0x0308
    32d2:	50 90 09 03 	lds	r5, 0x0309
    32d6:	60 90 0a 03 	lds	r6, 0x030A
    32da:	70 90 0b 03 	lds	r7, 0x030B
    32de:	20 91 00 03 	lds	r18, 0x0300
    32e2:	30 91 01 03 	lds	r19, 0x0301
    32e6:	40 91 02 03 	lds	r20, 0x0302
    32ea:	50 91 03 03 	lds	r21, 0x0303
    32ee:	c3 01       	movw	r24, r6
    32f0:	b2 01       	movw	r22, r4
    32f2:	0e 94 19 27 	call	0x4e32	; 0x4e32 <__gesf2>
    32f6:	18 16       	cp	r1, r24
    32f8:	44 f4       	brge	.+16     	; 0x330a <_Z14anzeigehandlerv+0x134>
			{
				maxgeschw=geschw;
    32fa:	40 92 00 03 	sts	0x0300, r4
    32fe:	50 92 01 03 	sts	0x0301, r5
    3302:	60 92 02 03 	sts	0x0302, r6
    3306:	70 92 03 03 	sts	0x0303, r7
			}
			if (geschw != 0)
    330a:	20 e0       	ldi	r18, 0x00	; 0
    330c:	30 e0       	ldi	r19, 0x00	; 0
    330e:	a9 01       	movw	r20, r18
    3310:	c3 01       	movw	r24, r6
    3312:	b2 01       	movw	r22, r4
    3314:	0e 94 69 25 	call	0x4ad2	; 0x4ad2 <__cmpsf2>
    3318:	88 23       	and	r24, r24
    331a:	99 f0       	breq	.+38     	; 0x3342 <_Z14anzeigehandlerv+0x16c>
			{
				Fahrtzeit++;
    331c:	80 91 fc 02 	lds	r24, 0x02FC
    3320:	90 91 fd 02 	lds	r25, 0x02FD
    3324:	a0 91 fe 02 	lds	r26, 0x02FE
    3328:	b0 91 ff 02 	lds	r27, 0x02FF
    332c:	01 96       	adiw	r24, 0x01	; 1
    332e:	a1 1d       	adc	r26, r1
    3330:	b1 1d       	adc	r27, r1
    3332:	80 93 fc 02 	sts	0x02FC, r24
    3336:	90 93 fd 02 	sts	0x02FD, r25
    333a:	a0 93 fe 02 	sts	0x02FE, r26
    333e:	b0 93 ff 02 	sts	0x02FF, r27
			}
			strecke+=geschw/3.6;
    3342:	26 e6       	ldi	r18, 0x66	; 102
    3344:	36 e6       	ldi	r19, 0x66	; 102
    3346:	46 e6       	ldi	r20, 0x66	; 102
    3348:	50 e4       	ldi	r21, 0x40	; 64
    334a:	c3 01       	movw	r24, r6
    334c:	b2 01       	movw	r22, r4
    334e:	0e 94 70 25 	call	0x4ae0	; 0x4ae0 <__divsf3>
    3352:	20 91 04 03 	lds	r18, 0x0304
    3356:	30 91 05 03 	lds	r19, 0x0305
    335a:	40 91 06 03 	lds	r20, 0x0306
    335e:	50 91 07 03 	lds	r21, 0x0307
    3362:	0e 94 a3 24 	call	0x4946	; 0x4946 <__addsf3>
    3366:	2b 01       	movw	r4, r22
    3368:	3c 01       	movw	r6, r24
    336a:	60 93 04 03 	sts	0x0304, r22
    336e:	70 93 05 03 	sts	0x0305, r23
    3372:	80 93 06 03 	sts	0x0306, r24
    3376:	90 93 07 03 	sts	0x0307, r25
			fahradschirm(geschw,kompass.angle(),strecke,maxgeschw, Fahrtzeit);
    337a:	c0 91 fc 02 	lds	r28, 0x02FC
    337e:	d0 91 fd 02 	lds	r29, 0x02FD
    3382:	10 91 fe 02 	lds	r17, 0x02FE
    3386:	00 91 ff 02 	lds	r16, 0x02FF
    338a:	a0 90 00 03 	lds	r10, 0x0300
    338e:	b0 90 01 03 	lds	r11, 0x0301
    3392:	c0 90 02 03 	lds	r12, 0x0302
    3396:	d0 90 03 03 	lds	r13, 0x0303
    339a:	8f e6       	ldi	r24, 0x6F	; 111
    339c:	97 e0       	ldi	r25, 0x07	; 7
    339e:	0e 94 2b 20 	call	0x4056	; 0x4056 <_ZN7Kompass5angleEv>
    33a2:	9b 01       	movw	r18, r22
    33a4:	ac 01       	movw	r20, r24
    33a6:	60 91 08 03 	lds	r22, 0x0308
    33aa:	70 91 09 03 	lds	r23, 0x0309
    33ae:	80 91 0a 03 	lds	r24, 0x030A
    33b2:	90 91 0b 03 	lds	r25, 0x030B
    33b6:	0f 93       	push	r16
    33b8:	1f 93       	push	r17
    33ba:	df 93       	push	r29
    33bc:	cf 93       	push	r28
    33be:	83 01       	movw	r16, r6
    33c0:	72 01       	movw	r14, r4
    33c2:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <_Z12fahradschirmddddm>
			if (rtc.Sekunden%2)
    33c6:	80 91 69 07 	lds	r24, 0x0769
    33ca:	0f 90       	pop	r0
    33cc:	0f 90       	pop	r0
    33ce:	0f 90       	pop	r0
    33d0:	0f 90       	pop	r0
    33d2:	80 ff       	sbrs	r24, 0
    33d4:	08 c0       	rjmp	.+16     	; 0x33e6 <_Z14anzeigehandlerv+0x210>
			{
				geschw=0;
    33d6:	10 92 08 03 	sts	0x0308, r1
    33da:	10 92 09 03 	sts	0x0309, r1
    33de:	10 92 0a 03 	sts	0x030A, r1
    33e2:	10 92 0b 03 	sts	0x030B, r1
			}
			anzeige|=(1<<refreshdisplay);
    33e6:	80 91 0d 03 	lds	r24, 0x030D
    33ea:	90 91 0e 03 	lds	r25, 0x030E
    33ee:	90 68       	ori	r25, 0x80	; 128
    33f0:	90 93 0e 03 	sts	0x030E, r25
    33f4:	80 93 0d 03 	sts	0x030D, r24
    33f8:	5a c0       	rjmp	.+180    	; 0x34ae <_Z14anzeigehandlerv+0x2d8>
    33fa:	9c 01       	movw	r18, r24
    33fc:	28 74       	andi	r18, 0x48	; 72
    33fe:	33 27       	eor	r19, r19
		}
		else if ((anzeige&(1<<Einstellungsflag)) && (anzeige&(1<<Timerflag)))
    3400:	28 34       	cpi	r18, 0x48	; 72
    3402:	31 05       	cpc	r19, r1
    3404:	61 f4       	brne	.+24     	; 0x341e <_Z14anzeigehandlerv+0x248>
		{
			timerseite();
    3406:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <_Z10timerseitev>
			anzeige|=(1<<refreshdisplay);
    340a:	80 91 0d 03 	lds	r24, 0x030D
    340e:	90 91 0e 03 	lds	r25, 0x030E
    3412:	90 68       	ori	r25, 0x80	; 128
    3414:	90 93 0e 03 	sts	0x030E, r25
    3418:	80 93 0d 03 	sts	0x030D, r24
    341c:	48 c0       	rjmp	.+144    	; 0x34ae <_Z14anzeigehandlerv+0x2d8>
		}
		else if ((anzeige&(1<<Stoppuhrflag)))
    341e:	87 ff       	sbrs	r24, 7
    3420:	17 c0       	rjmp	.+46     	; 0x3450 <_Z14anzeigehandlerv+0x27a>
		{
			if ((anzeige&(1<<Einstellungsflag)))
    3422:	83 ff       	sbrs	r24, 3
    3424:	09 c0       	rjmp	.+18     	; 0x3438 <_Z14anzeigehandlerv+0x262>
			{
				stoppuhr.Sekunden++;
    3426:	e9 e3       	ldi	r30, 0x39	; 57
    3428:	f7 e0       	ldi	r31, 0x07	; 7
    342a:	80 81       	ld	r24, Z
    342c:	8f 5f       	subi	r24, 0xFF	; 255
    342e:	80 83       	st	Z, r24
				stoppuhr.zeit();
    3430:	87 e2       	ldi	r24, 0x27	; 39
    3432:	97 e0       	ldi	r25, 0x07	; 7
    3434:	0e 94 2b 24 	call	0x4856	; 0x4856 <_ZN3RTC4zeitEv>
			}
			Stoppuhrseite();
    3438:	0e 94 89 12 	call	0x2512	; 0x2512 <_Z13Stoppuhrseitev>
			anzeige|=(1<<refreshdisplay);
    343c:	80 91 0d 03 	lds	r24, 0x030D
    3440:	90 91 0e 03 	lds	r25, 0x030E
    3444:	90 68       	ori	r25, 0x80	; 128
    3446:	90 93 0e 03 	sts	0x030E, r25
    344a:	80 93 0d 03 	sts	0x030D, r24
    344e:	2f c0       	rjmp	.+94     	; 0x34ae <_Z14anzeigehandlerv+0x2d8>
		}
		else if ((anzeige&(1<<Timerflag)))
    3450:	86 ff       	sbrs	r24, 6
    3452:	20 c0       	rjmp	.+64     	; 0x3494 <_Z14anzeigehandlerv+0x2be>
		{
			zaehler.Sekunden--;
    3454:	e1 e5       	ldi	r30, 0x51	; 81
    3456:	f7 e0       	ldi	r31, 0x07	; 7
    3458:	80 81       	ld	r24, Z
    345a:	81 50       	subi	r24, 0x01	; 1
    345c:	80 83       	st	Z, r24
			if(zaehler.timer()){
    345e:	8f e3       	ldi	r24, 0x3F	; 63
    3460:	97 e0       	ldi	r25, 0x07	; 7
    3462:	0e 94 85 24 	call	0x490a	; 0x490a <_ZN3RTC5timerEv>
    3466:	88 23       	and	r24, r24
    3468:	49 f0       	breq	.+18     	; 0x347c <_Z14anzeigehandlerv+0x2a6>
				anzeige|=(1<<blinkflag);
    346a:	80 91 0d 03 	lds	r24, 0x030D
    346e:	90 91 0e 03 	lds	r25, 0x030E
    3472:	90 64       	ori	r25, 0x40	; 64
    3474:	90 93 0e 03 	sts	0x030E, r25
    3478:	80 93 0d 03 	sts	0x030D, r24
			}
			timerseite();
    347c:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <_Z10timerseitev>
			anzeige|=(1<<refreshdisplay);
    3480:	80 91 0d 03 	lds	r24, 0x030D
    3484:	90 91 0e 03 	lds	r25, 0x030E
    3488:	90 68       	ori	r25, 0x80	; 128
    348a:	90 93 0e 03 	sts	0x030E, r25
    348e:	80 93 0d 03 	sts	0x030D, r24
    3492:	0d c0       	rjmp	.+26     	; 0x34ae <_Z14anzeigehandlerv+0x2d8>
		}
		else if ((anzeige&(1<<Druckflag)))
    3494:	91 ff       	sbrs	r25, 1
    3496:	0b c0       	rjmp	.+22     	; 0x34ae <_Z14anzeigehandlerv+0x2d8>
		{
			Pressuresensor();
    3498:	0e 94 13 13 	call	0x2626	; 0x2626 <_Z14Pressuresensorv>
			anzeige |= (1<<refreshdisplay);
    349c:	80 91 0d 03 	lds	r24, 0x030D
    34a0:	90 91 0e 03 	lds	r25, 0x030E
    34a4:	90 68       	ori	r25, 0x80	; 128
    34a6:	90 93 0e 03 	sts	0x030E, r25
    34aa:	80 93 0d 03 	sts	0x030D, r24
		}
		rtc.interupts&=~(1<<sekundeninterupt);
    34ae:	ee e6       	ldi	r30, 0x6E	; 110
    34b0:	f7 e0       	ldi	r31, 0x07	; 7
    34b2:	80 81       	ld	r24, Z
    34b4:	8d 7f       	andi	r24, 0xFD	; 253
    34b6:	80 83       	st	Z, r24
	}
	//Minuteninterrupt
	if ((rtc.interupts&(1<<minuteninterupt)))
    34b8:	80 91 6e 07 	lds	r24, 0x076E
    34bc:	82 ff       	sbrs	r24, 2
    34be:	16 c0       	rjmp	.+44     	; 0x34ec <_Z14anzeigehandlerv+0x316>
	{
		if ((anzeige&(1<<Uhrflaggross)))
    34c0:	80 91 0d 03 	lds	r24, 0x030D
    34c4:	90 91 0e 03 	lds	r25, 0x030E
    34c8:	92 ff       	sbrs	r25, 2
    34ca:	0b c0       	rjmp	.+22     	; 0x34e2 <_Z14anzeigehandlerv+0x30c>
		{
			uhranzeigenmin();
    34cc:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <_Z14uhranzeigenminv>
			anzeige|=(1<<refreshdisplay);
    34d0:	80 91 0d 03 	lds	r24, 0x030D
    34d4:	90 91 0e 03 	lds	r25, 0x030E
    34d8:	90 68       	ori	r25, 0x80	; 128
    34da:	90 93 0e 03 	sts	0x030E, r25
    34de:	80 93 0d 03 	sts	0x030D, r24
		}
		rtc.interupts&=~(1<<minuteninterupt);
    34e2:	ee e6       	ldi	r30, 0x6E	; 110
    34e4:	f7 e0       	ldi	r31, 0x07	; 7
    34e6:	80 81       	ld	r24, Z
    34e8:	8b 7f       	andi	r24, 0xFB	; 251
    34ea:	80 83       	st	Z, r24
	}
	//neuen Framebuffer an das Dispay senden
	if ((anzeige&(1<<refreshdisplay)))
    34ec:	80 91 0d 03 	lds	r24, 0x030D
    34f0:	90 91 0e 03 	lds	r25, 0x030E
    34f4:	99 23       	and	r25, r25
    34f6:	14 f5       	brge	.+68     	; 0x353c <_Z14anzeigehandlerv+0x366>
	{
		oled.sendFrame();
    34f8:	86 e2       	ldi	r24, 0x26	; 38
    34fa:	93 e0       	ldi	r25, 0x03	; 3
    34fc:	0e 94 93 03 	call	0x726	; 0x726 <_ZN7Display9sendFrameEv>
		if ((anzeige&(1<<blinkflag)))
    3500:	80 91 0d 03 	lds	r24, 0x030D
    3504:	90 91 0e 03 	lds	r25, 0x030E
    3508:	96 ff       	sbrs	r25, 6
    350a:	0f c0       	rjmp	.+30     	; 0x352a <_Z14anzeigehandlerv+0x354>
		{
			oled.invert(rtc.Sekunden%2);
    350c:	60 91 69 07 	lds	r22, 0x0769
    3510:	61 70       	andi	r22, 0x01	; 1
    3512:	86 e2       	ldi	r24, 0x26	; 38
    3514:	93 e0       	ldi	r25, 0x03	; 3
    3516:	0e 94 89 03 	call	0x712	; 0x712 <_ZN7Display6invertEh>
			LED.toggle();
    351a:	83 e2       	ldi	r24, 0x23	; 35
    351c:	93 e0       	ldi	r25, 0x03	; 3
    351e:	0e 94 83 21 	call	0x4306	; 0x4306 <_ZN6Output6toggleEv>
			Vibrationsmotor.on();
    3522:	81 e2       	ldi	r24, 0x21	; 33
    3524:	93 e0       	ldi	r25, 0x03	; 3
    3526:	0e 94 e8 20 	call	0x41d0	; 0x41d0 <_ZN6Output2onEv>
		}
		anzeige&=~(1<<refreshdisplay);
    352a:	80 91 0d 03 	lds	r24, 0x030D
    352e:	90 91 0e 03 	lds	r25, 0x030E
    3532:	9f 77       	andi	r25, 0x7F	; 127
    3534:	90 93 0e 03 	sts	0x030E, r25
    3538:	80 93 0d 03 	sts	0x030D, r24
	}
}
    353c:	df 91       	pop	r29
    353e:	cf 91       	pop	r28
    3540:	1f 91       	pop	r17
    3542:	0f 91       	pop	r16
    3544:	ff 90       	pop	r15
    3546:	ef 90       	pop	r14
    3548:	df 90       	pop	r13
    354a:	cf 90       	pop	r12
    354c:	bf 90       	pop	r11
    354e:	af 90       	pop	r10
    3550:	7f 90       	pop	r7
    3552:	6f 90       	pop	r6
    3554:	5f 90       	pop	r5
    3556:	4f 90       	pop	r4
    3558:	08 95       	ret

0000355a <_Z14eingabehandlerh>:

void eingabehandler(uint8_t taste){
	if (taste!='A')
    355a:	81 34       	cpi	r24, 0x41	; 65
    355c:	09 f4       	brne	.+2      	; 0x3560 <_Z14eingabehandlerh+0x6>
    355e:	1c c3       	rjmp	.+1592   	; 0x3b98 <_Z14eingabehandlerh+0x63e>
	{
		rtc.interupts |= (1<<sekundeninterupt);
    3560:	ee e6       	ldi	r30, 0x6E	; 110
    3562:	f7 e0       	ldi	r31, 0x07	; 7
    3564:	90 81       	ld	r25, Z
    3566:	29 2f       	mov	r18, r25
    3568:	22 60       	ori	r18, 0x02	; 2
    356a:	20 83       	st	Z, r18
		if (anzeige==255)
    356c:	20 91 0d 03 	lds	r18, 0x030D
    3570:	30 91 0e 03 	lds	r19, 0x030E
    3574:	2f 3f       	cpi	r18, 0xFF	; 255
    3576:	31 05       	cpc	r19, r1
    3578:	61 f4       	brne	.+24     	; 0x3592 <_Z14eingabehandlerh+0x38>
		{
			oled.ssd1306_command(SSD1306_DISPLAYON);
    357a:	6f ea       	ldi	r22, 0xAF	; 175
    357c:	86 e2       	ldi	r24, 0x26	; 38
    357e:	93 e0       	ldi	r25, 0x03	; 3
    3580:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <_ZN7Display15ssd1306_commandEh>
			//entweder display aus oder das Menue starten
			anzeige=(1<<menueflag);
    3584:	80 e0       	ldi	r24, 0x00	; 0
    3586:	90 e2       	ldi	r25, 0x20	; 32
    3588:	90 93 0e 03 	sts	0x030E, r25
    358c:	80 93 0d 03 	sts	0x030D, r24
    3590:	08 95       	ret
    3592:	a9 01       	movw	r20, r18
    3594:	41 70       	andi	r20, 0x01	; 1
    3596:	50 72       	andi	r21, 0x20	; 32
		}
		//gleicher Handler wie oben, aber hier speziell fuer die Bearbeitung von Tastereingaben mit switch fuer die Tasten
		//es sind einfach so viele Tasten moeglich 
		else if ((anzeige&(1<<menueflag)) && (anzeige&(1<<Uhrflag)))	//Menue der Uhr
    3598:	41 30       	cpi	r20, 0x01	; 1
    359a:	50 42       	sbci	r21, 0x20	; 32
    359c:	09 f0       	breq	.+2      	; 0x35a0 <_Z14eingabehandlerh+0x46>
    359e:	50 c0       	rjmp	.+160    	; 0x3640 <_Z14eingabehandlerh+0xe6>
		{	
			anzeige&=~((1<<menueflag)|(1<<Uhrflag));
    35a0:	2e 7f       	andi	r18, 0xFE	; 254
    35a2:	3f 7d       	andi	r19, 0xDF	; 223
    35a4:	30 93 0e 03 	sts	0x030E, r19
    35a8:	20 93 0d 03 	sts	0x030D, r18
			switch (taste)
    35ac:	83 33       	cpi	r24, 0x33	; 51
    35ae:	f1 f0       	breq	.+60     	; 0x35ec <_Z14eingabehandlerh+0x92>
    35b0:	28 f4       	brcc	.+10     	; 0x35bc <_Z14eingabehandlerh+0x62>
    35b2:	81 33       	cpi	r24, 0x31	; 49
    35b4:	41 f0       	breq	.+16     	; 0x35c6 <_Z14eingabehandlerh+0x6c>
    35b6:	82 33       	cpi	r24, 0x32	; 50
    35b8:	61 f0       	breq	.+24     	; 0x35d2 <_Z14eingabehandlerh+0x78>
    35ba:	3b c0       	rjmp	.+118    	; 0x3632 <_Z14eingabehandlerh+0xd8>
    35bc:	84 33       	cpi	r24, 0x34	; 52
    35be:	11 f1       	breq	.+68     	; 0x3604 <_Z14eingabehandlerh+0xaa>
    35c0:	85 33       	cpi	r24, 0x35	; 53
    35c2:	71 f1       	breq	.+92     	; 0x3620 <_Z14eingabehandlerh+0xc6>
    35c4:	36 c0       	rjmp	.+108    	; 0x3632 <_Z14eingabehandlerh+0xd8>
			{
				case '1':
					//Wechseln auf die Uhr
					anzeige|=(1<<Uhrflag);
    35c6:	21 60       	ori	r18, 0x01	; 1
    35c8:	30 93 0e 03 	sts	0x030E, r19
    35cc:	20 93 0d 03 	sts	0x030D, r18
					break;
    35d0:	08 95       	ret
				
				case '2':
					//starten der Stoppuhr APP
					stoppuhr.Sekunden=0;
    35d2:	10 92 39 07 	sts	0x0739, r1
					stoppuhr.Minuten=0;
    35d6:	10 92 38 07 	sts	0x0738, r1
					stoppuhr.Stunden=0;
    35da:	10 92 37 07 	sts	0x0737, r1
					anzeige|=(1<<refreshdisplay) | (1<<Stoppuhrflag);
    35de:	20 68       	ori	r18, 0x80	; 128
    35e0:	30 68       	ori	r19, 0x80	; 128
    35e2:	30 93 0e 03 	sts	0x030E, r19
    35e6:	20 93 0d 03 	sts	0x030D, r18
					break;
    35ea:	08 95       	ret
				
				case '3':
					//Starten der Timer APP
					zaehler.Sekunden=0;
    35ec:	10 92 51 07 	sts	0x0751, r1
					zaehler.Minuten=0;
    35f0:	10 92 50 07 	sts	0x0750, r1
					zaehler.Stunden=0;
    35f4:	10 92 4f 07 	sts	0x074F, r1
					
					anzeige|=(1<<Timerflag) | (1<<Einstellungsflag);
    35f8:	28 64       	ori	r18, 0x48	; 72
    35fa:	30 93 0e 03 	sts	0x030E, r19
    35fe:	20 93 0d 03 	sts	0x030D, r18
					break;
    3602:	08 95       	ret
				
				case '4':
					//Starten der Alarmapp, momentan nicht implementiert
					oled.clearFrame();
    3604:	86 e2       	ldi	r24, 0x26	; 38
    3606:	93 e0       	ldi	r25, 0x03	; 3
    3608:	0e 94 ed 02 	call	0x5da	; 0x5da <_ZN7Display10clearFrameEv>
					anzeige|=(1<<refreshdisplay);
    360c:	80 91 0d 03 	lds	r24, 0x030D
    3610:	90 91 0e 03 	lds	r25, 0x030E
    3614:	90 68       	ori	r25, 0x80	; 128
    3616:	90 93 0e 03 	sts	0x030E, r25
    361a:	80 93 0d 03 	sts	0x030D, r24
					break;
    361e:	08 95       	ret
				
				case '5':
					//Wechseln auf grosse Uhr
					rtc.interupts |=(1<<minuteninterupt);
    3620:	96 60       	ori	r25, 0x06	; 6
    3622:	90 93 6e 07 	sts	0x076E, r25
					anzeige |=(1<<Uhrflaggross) | (1<<refreshdisplay);	
    3626:	34 68       	ori	r19, 0x84	; 132
    3628:	30 93 0e 03 	sts	0x030E, r19
    362c:	20 93 0d 03 	sts	0x030D, r18
					break;
    3630:	08 95       	ret
				
				default:
					//menueflag erneu setzen
					anzeige|=(1<<menueflag)|(1<<Uhrflag);
    3632:	21 60       	ori	r18, 0x01	; 1
    3634:	30 62       	ori	r19, 0x20	; 32
    3636:	30 93 0e 03 	sts	0x030E, r19
    363a:	20 93 0d 03 	sts	0x030D, r18
					break;
    363e:	8b c2       	rjmp	.+1302   	; 0x3b56 <_Z14eingabehandlerh+0x5fc>
    3640:	a9 01       	movw	r20, r18
    3642:	48 70       	andi	r20, 0x08	; 8
    3644:	50 72       	andi	r21, 0x20	; 32
			}
		}
		else if ((anzeige&(1<<menueflag)) && (anzeige&(1<<Einstellungsflag)))	//Menue der Einstellungen
    3646:	48 30       	cpi	r20, 0x08	; 8
    3648:	50 42       	sbci	r21, 0x20	; 32
    364a:	99 f5       	brne	.+102    	; 0x36b2 <_Z14eingabehandlerh+0x158>
		{
			anzeige&=~((1<<menueflag)|(1<<Einstellungsflag));
    364c:	27 7f       	andi	r18, 0xF7	; 247
    364e:	3f 7d       	andi	r19, 0xDF	; 223
    3650:	30 93 0e 03 	sts	0x030E, r19
    3654:	20 93 0d 03 	sts	0x030D, r18
			switch (taste)
    3658:	82 33       	cpi	r24, 0x32	; 50
    365a:	91 f0       	breq	.+36     	; 0x3680 <_Z14eingabehandlerh+0x126>
    365c:	83 33       	cpi	r24, 0x33	; 51
    365e:	b1 f0       	breq	.+44     	; 0x368c <_Z14eingabehandlerh+0x132>
    3660:	81 33       	cpi	r24, 0x31	; 49
    3662:	01 f5       	brne	.+64     	; 0x36a4 <_Z14eingabehandlerh+0x14a>
			{
				case '1':
					//zuruecksetzen der Kalibrierung, da passive Kallibrierung eingebaut
					kompass.kallibrierung_ruecksetzen();
    3664:	8f e6       	ldi	r24, 0x6F	; 111
    3666:	97 e0       	ldi	r25, 0x07	; 7
    3668:	0e 94 a3 20 	call	0x4146	; 0x4146 <_ZN7Kompass25kallibrierung_ruecksetzenEv>
					anzeige|=(1<<Kompasflag);
    366c:	80 91 0d 03 	lds	r24, 0x030D
    3670:	90 91 0e 03 	lds	r25, 0x030E
    3674:	84 60       	ori	r24, 0x04	; 4
    3676:	90 93 0e 03 	sts	0x030E, r25
    367a:	80 93 0d 03 	sts	0x030D, r24
					break;
    367e:	08 95       	ret
				case '2':
					//Gaineinstellung fuer den Kompass
					anzeige|=(1<<Kompasgaineinstellenflag);
    3680:	20 62       	ori	r18, 0x20	; 32
    3682:	30 93 0e 03 	sts	0x030E, r19
    3686:	20 93 0d 03 	sts	0x030D, r18
					break;
    368a:	08 95       	ret
				case '3':
					//dies ist eine der wenigen Funktinen, die die Handler Strucktur nicht anwenden, da sie die rtc anhaellt
					uhreinstellen();
    368c:	0e 94 06 14 	call	0x280c	; 0x280c <_Z13uhreinstellenv>
					anzeige|=(1<<Uhrflag);
    3690:	80 91 0d 03 	lds	r24, 0x030D
    3694:	90 91 0e 03 	lds	r25, 0x030E
    3698:	81 60       	ori	r24, 0x01	; 1
    369a:	90 93 0e 03 	sts	0x030E, r25
    369e:	80 93 0d 03 	sts	0x030D, r24
					break;
    36a2:	08 95       	ret
				default:
					//Menueflag neu setzten
					anzeige|=(1<<menueflag)|(1<<Einstellungsflag);
    36a4:	28 60       	ori	r18, 0x08	; 8
    36a6:	30 62       	ori	r19, 0x20	; 32
    36a8:	30 93 0e 03 	sts	0x030E, r19
    36ac:	20 93 0d 03 	sts	0x030D, r18
					break;
    36b0:	52 c2       	rjmp	.+1188   	; 0x3b56 <_Z14eingabehandlerh+0x5fc>
			}
		}
		else if ((anzeige&(1<<menueflag)))	//nur das grosse menue
    36b2:	35 ff       	sbrs	r19, 5
    36b4:	58 c0       	rjmp	.+176    	; 0x3766 <_Z14eingabehandlerh+0x20c>
		{
			anzeige&=~(1<<menueflag);
    36b6:	3f 7d       	andi	r19, 0xDF	; 223
    36b8:	30 93 0e 03 	sts	0x030E, r19
    36bc:	20 93 0d 03 	sts	0x030D, r18
			switch (taste)
    36c0:	48 2f       	mov	r20, r24
    36c2:	50 e0       	ldi	r21, 0x00	; 0
    36c4:	fa 01       	movw	r30, r20
    36c6:	f1 97       	sbiw	r30, 0x31	; 49
    36c8:	e7 30       	cpi	r30, 0x07	; 7
    36ca:	f1 05       	cpc	r31, r1
    36cc:	08 f0       	brcs	.+2      	; 0x36d0 <_Z14eingabehandlerh+0x176>
    36ce:	45 c0       	rjmp	.+138    	; 0x375a <_Z14eingabehandlerh+0x200>
    36d0:	e2 5c       	subi	r30, 0xC2	; 194
    36d2:	ff 4f       	sbci	r31, 0xFF	; 255
    36d4:	0c 94 8f 2b 	jmp	0x571e	; 0x571e <__tablejump2__>
			{
				case '1':
					anzeige|=(1<<Fahradflag);
    36d8:	22 60       	ori	r18, 0x02	; 2
    36da:	30 93 0e 03 	sts	0x030E, r19
    36de:	20 93 0d 03 	sts	0x030D, r18
					//starten des Timers fuer die geschwindigkeit
					TCCR1B |= ((1<<CS12) | (1<<CS10));
    36e2:	e1 e8       	ldi	r30, 0x81	; 129
    36e4:	f0 e0       	ldi	r31, 0x00	; 0
    36e6:	80 81       	ld	r24, Z
    36e8:	85 60       	ori	r24, 0x05	; 5
    36ea:	80 83       	st	Z, r24
					break;
    36ec:	08 95       	ret
				
				case '2':
					//Taschenrechner starten
					//Monentan deaktiv, da Umstellung der Handler 
					//operation(Flieskommazahleingabe());
					oled.clearFrame();
    36ee:	86 e2       	ldi	r24, 0x26	; 38
    36f0:	93 e0       	ldi	r25, 0x03	; 3
    36f2:	0e 94 ed 02 	call	0x5da	; 0x5da <_ZN7Display10clearFrameEv>
					anzeige|=(1<<refreshdisplay);	
    36f6:	80 91 0d 03 	lds	r24, 0x030D
    36fa:	90 91 0e 03 	lds	r25, 0x030E
    36fe:	90 68       	ori	r25, 0x80	; 128
    3700:	90 93 0e 03 	sts	0x030E, r25
    3704:	80 93 0d 03 	sts	0x030D, r24
					break;
    3708:	08 95       	ret
				
				case '3':
					anzeige|=(1<<Kompasflag);
    370a:	24 60       	ori	r18, 0x04	; 4
    370c:	30 93 0e 03 	sts	0x030E, r19
    3710:	20 93 0d 03 	sts	0x030D, r18
					break;
    3714:	08 95       	ret
				
				case '4':
					//Menue der Uhr
					anzeige|=(1<<menueflag) | (1<<Uhrflag);
    3716:	21 60       	ori	r18, 0x01	; 1
    3718:	30 62       	ori	r19, 0x20	; 32
    371a:	30 93 0e 03 	sts	0x030E, r19
    371e:	20 93 0d 03 	sts	0x030D, r18
					break;
    3722:	08 95       	ret
				
				case '5':
					//menue der Einstellungen
					anzeige|=(1<<menueflag) | (1<<Einstellungsflag);
    3724:	28 60       	ori	r18, 0x08	; 8
    3726:	30 62       	ori	r19, 0x20	; 32
    3728:	30 93 0e 03 	sts	0x030E, r19
    372c:	20 93 0d 03 	sts	0x030D, r18
					break;
    3730:	08 95       	ret
				
				case '6':
					//Display ausschalten
					//anzeige=255;
					oled.clearFrame();
    3732:	86 e2       	ldi	r24, 0x26	; 38
    3734:	93 e0       	ldi	r25, 0x03	; 3
    3736:	0e 94 ed 02 	call	0x5da	; 0x5da <_ZN7Display10clearFrameEv>
					anzeige|=(1<<refreshdisplay);
    373a:	80 91 0d 03 	lds	r24, 0x030D
    373e:	90 91 0e 03 	lds	r25, 0x030E
    3742:	90 68       	ori	r25, 0x80	; 128
    3744:	90 93 0e 03 	sts	0x030E, r25
    3748:	80 93 0d 03 	sts	0x030D, r24
					break;
    374c:	08 95       	ret
				case '7':
					anzeige |= (1<<Druckflag);
    374e:	32 60       	ori	r19, 0x02	; 2
    3750:	30 93 0e 03 	sts	0x030E, r19
    3754:	20 93 0d 03 	sts	0x030D, r18
					break;
    3758:	08 95       	ret
				default:
					//menueflag erneut setzen um abschalten zu verhindern
					anzeige|=(1<<menueflag);
    375a:	30 62       	ori	r19, 0x20	; 32
    375c:	30 93 0e 03 	sts	0x030E, r19
    3760:	20 93 0d 03 	sts	0x030D, r18
					break;
    3764:	f8 c1       	rjmp	.+1008   	; 0x3b56 <_Z14eingabehandlerh+0x5fc>
			}
		}
		else if ((anzeige&(1<<Kompasgaineinstellenflag)))
    3766:	25 ff       	sbrs	r18, 5
    3768:	51 c0       	rjmp	.+162    	; 0x380c <_Z14eingabehandlerh+0x2b2>
		{
			anzeige&=~(1<<Kompasgaineinstellenflag);
    376a:	a9 01       	movw	r20, r18
    376c:	4f 7d       	andi	r20, 0xDF	; 223
			anzeige|=(1<<Kompasflag);
    376e:	44 60       	ori	r20, 0x04	; 4
    3770:	50 93 0e 03 	sts	0x030E, r21
    3774:	40 93 0d 03 	sts	0x030D, r20
			switch (taste) {
    3778:	48 2f       	mov	r20, r24
    377a:	50 e0       	ldi	r21, 0x00	; 0
    377c:	fa 01       	movw	r30, r20
    377e:	f1 97       	sbiw	r30, 0x31	; 49
    3780:	e8 30       	cpi	r30, 0x08	; 8
    3782:	f1 05       	cpc	r31, r1
    3784:	e0 f5       	brcc	.+120    	; 0x37fe <_Z14eingabehandlerh+0x2a4>
    3786:	eb 5b       	subi	r30, 0xBB	; 187
    3788:	ff 4f       	sbci	r31, 0xFF	; 255
    378a:	0c 94 8f 2b 	jmp	0x571e	; 0x571e <__tablejump2__>
				case '1':
					kompass.HMC5883L_command(0x01,HMCGAIN1370);
    378e:	40 e0       	ldi	r20, 0x00	; 0
    3790:	61 e0       	ldi	r22, 0x01	; 1
    3792:	8f e6       	ldi	r24, 0x6F	; 111
    3794:	97 e0       	ldi	r25, 0x07	; 7
    3796:	0e 94 28 1f 	call	0x3e50	; 0x3e50 <_ZN7Kompass16HMC5883L_commandEhh>
					break;
    379a:	08 95       	ret
				case '2':
					kompass.HMC5883L_command(0x01,HMCGAIN1090);
    379c:	40 e2       	ldi	r20, 0x20	; 32
    379e:	61 e0       	ldi	r22, 0x01	; 1
    37a0:	8f e6       	ldi	r24, 0x6F	; 111
    37a2:	97 e0       	ldi	r25, 0x07	; 7
    37a4:	0e 94 28 1f 	call	0x3e50	; 0x3e50 <_ZN7Kompass16HMC5883L_commandEhh>
					break;
    37a8:	08 95       	ret
				case '3':
					kompass.HMC5883L_command(0x01,HMCGAIN820);
    37aa:	40 e4       	ldi	r20, 0x40	; 64
    37ac:	61 e0       	ldi	r22, 0x01	; 1
    37ae:	8f e6       	ldi	r24, 0x6F	; 111
    37b0:	97 e0       	ldi	r25, 0x07	; 7
    37b2:	0e 94 28 1f 	call	0x3e50	; 0x3e50 <_ZN7Kompass16HMC5883L_commandEhh>
					break;
    37b6:	08 95       	ret
				case '4':
					kompass.HMC5883L_command(0x01,HMCGAIN660);
    37b8:	40 e6       	ldi	r20, 0x60	; 96
    37ba:	61 e0       	ldi	r22, 0x01	; 1
    37bc:	8f e6       	ldi	r24, 0x6F	; 111
    37be:	97 e0       	ldi	r25, 0x07	; 7
    37c0:	0e 94 28 1f 	call	0x3e50	; 0x3e50 <_ZN7Kompass16HMC5883L_commandEhh>
					break;
    37c4:	08 95       	ret
				case '5':
					kompass.HMC5883L_command(0x01,HMCGAIN440);
    37c6:	40 e8       	ldi	r20, 0x80	; 128
    37c8:	61 e0       	ldi	r22, 0x01	; 1
    37ca:	8f e6       	ldi	r24, 0x6F	; 111
    37cc:	97 e0       	ldi	r25, 0x07	; 7
    37ce:	0e 94 28 1f 	call	0x3e50	; 0x3e50 <_ZN7Kompass16HMC5883L_commandEhh>
					break;
    37d2:	08 95       	ret
				case '6':
					kompass.HMC5883L_command(0x01,HMCGAIN390);
    37d4:	40 ea       	ldi	r20, 0xA0	; 160
    37d6:	61 e0       	ldi	r22, 0x01	; 1
    37d8:	8f e6       	ldi	r24, 0x6F	; 111
    37da:	97 e0       	ldi	r25, 0x07	; 7
    37dc:	0e 94 28 1f 	call	0x3e50	; 0x3e50 <_ZN7Kompass16HMC5883L_commandEhh>
					break;
    37e0:	08 95       	ret
				case '7':
					kompass.HMC5883L_command(0x01,HMCGAIN330);
    37e2:	40 ec       	ldi	r20, 0xC0	; 192
    37e4:	61 e0       	ldi	r22, 0x01	; 1
    37e6:	8f e6       	ldi	r24, 0x6F	; 111
    37e8:	97 e0       	ldi	r25, 0x07	; 7
    37ea:	0e 94 28 1f 	call	0x3e50	; 0x3e50 <_ZN7Kompass16HMC5883L_commandEhh>
					break;
    37ee:	08 95       	ret
				case '8':
					kompass.HMC5883L_command(0x01,HMCGAIN230);
    37f0:	40 ee       	ldi	r20, 0xE0	; 224
    37f2:	61 e0       	ldi	r22, 0x01	; 1
    37f4:	8f e6       	ldi	r24, 0x6F	; 111
    37f6:	97 e0       	ldi	r25, 0x07	; 7
    37f8:	0e 94 28 1f 	call	0x3e50	; 0x3e50 <_ZN7Kompass16HMC5883L_commandEhh>
					break;
    37fc:	08 95       	ret
				default:
					anzeige &=~(1<<Kompasflag);
    37fe:	2b 7d       	andi	r18, 0xDB	; 219
					anzeige|=(1<<Kompasgaineinstellenflag);
    3800:	20 62       	ori	r18, 0x20	; 32
    3802:	30 93 0e 03 	sts	0x030E, r19
    3806:	20 93 0d 03 	sts	0x030D, r18
					break;
    380a:	a5 c1       	rjmp	.+842    	; 0x3b56 <_Z14eingabehandlerh+0x5fc>
    380c:	a9 01       	movw	r20, r18
    380e:	48 74       	andi	r20, 0x48	; 72
    3810:	55 27       	eor	r21, r21
			}
		}
		else if ((anzeige&(1<<Einstellungsflag)) && (anzeige&(1<<Timerflag)))
    3812:	48 34       	cpi	r20, 0x48	; 72
    3814:	51 05       	cpc	r21, r1
    3816:	09 f0       	breq	.+2      	; 0x381a <_Z14eingabehandlerh+0x2c0>
    3818:	87 c0       	rjmp	.+270    	; 0x3928 <_Z14eingabehandlerh+0x3ce>
		{
			switch (pos)
    381a:	90 91 0c 03 	lds	r25, 0x030C
    381e:	92 30       	cpi	r25, 0x02	; 2
    3820:	a9 f1       	breq	.+106    	; 0x388c <_Z14eingabehandlerh+0x332>
    3822:	28 f4       	brcc	.+10     	; 0x382e <_Z14eingabehandlerh+0x2d4>
    3824:	99 23       	and	r25, r25
    3826:	61 f0       	breq	.+24     	; 0x3840 <_Z14eingabehandlerh+0x2e6>
    3828:	91 30       	cpi	r25, 0x01	; 1
    382a:	01 f1       	breq	.+64     	; 0x386c <_Z14eingabehandlerh+0x312>
    382c:	94 c1       	rjmp	.+808    	; 0x3b56 <_Z14eingabehandlerh+0x5fc>
    382e:	94 30       	cpi	r25, 0x04	; 4
    3830:	09 f4       	brne	.+2      	; 0x3834 <_Z14eingabehandlerh+0x2da>
    3832:	52 c0       	rjmp	.+164    	; 0x38d8 <_Z14eingabehandlerh+0x37e>
    3834:	08 f4       	brcc	.+2      	; 0x3838 <_Z14eingabehandlerh+0x2de>
    3836:	40 c0       	rjmp	.+128    	; 0x38b8 <_Z14eingabehandlerh+0x35e>
    3838:	95 30       	cpi	r25, 0x05	; 5
    383a:	09 f4       	brne	.+2      	; 0x383e <_Z14eingabehandlerh+0x2e4>
    383c:	63 c0       	rjmp	.+198    	; 0x3904 <_Z14eingabehandlerh+0x3aa>
    383e:	8b c1       	rjmp	.+790    	; 0x3b56 <_Z14eingabehandlerh+0x5fc>
			{
			case 0:
				switch (taste)
    3840:	83 32       	cpi	r24, 0x23	; 35
    3842:	09 f4       	brne	.+2      	; 0x3846 <_Z14eingabehandlerh+0x2ec>
    3844:	88 c1       	rjmp	.+784    	; 0x3b56 <_Z14eingabehandlerh+0x5fc>
    3846:	8a 32       	cpi	r24, 0x2A	; 42
    3848:	09 f4       	brne	.+2      	; 0x384c <_Z14eingabehandlerh+0x2f2>
    384a:	85 c1       	rjmp	.+778    	; 0x3b56 <_Z14eingabehandlerh+0x5fc>
					case '#':
						break;
					case '*':
						break;
					default:
						zaehler.Sekunden+=(taste-'0')*10;
    384c:	e1 e5       	ldi	r30, 0x51	; 81
    384e:	f7 e0       	ldi	r31, 0x07	; 7
    3850:	98 2f       	mov	r25, r24
    3852:	99 0f       	add	r25, r25
    3854:	90 56       	subi	r25, 0x60	; 96
    3856:	29 2f       	mov	r18, r25
    3858:	22 0f       	add	r18, r18
    385a:	22 0f       	add	r18, r18
    385c:	92 0f       	add	r25, r18
    385e:	20 81       	ld	r18, Z
    3860:	92 0f       	add	r25, r18
    3862:	90 83       	st	Z, r25
						pos++;
    3864:	91 e0       	ldi	r25, 0x01	; 1
    3866:	90 93 0c 03 	sts	0x030C, r25
						break;
    386a:	75 c1       	rjmp	.+746    	; 0x3b56 <_Z14eingabehandlerh+0x5fc>
				}
				break;
			case 1:
				switch (taste)
    386c:	83 32       	cpi	r24, 0x23	; 35
    386e:	09 f4       	brne	.+2      	; 0x3872 <_Z14eingabehandlerh+0x318>
    3870:	72 c1       	rjmp	.+740    	; 0x3b56 <_Z14eingabehandlerh+0x5fc>
    3872:	8a 32       	cpi	r24, 0x2A	; 42
    3874:	09 f4       	brne	.+2      	; 0x3878 <_Z14eingabehandlerh+0x31e>
    3876:	6f c1       	rjmp	.+734    	; 0x3b56 <_Z14eingabehandlerh+0x5fc>
					case '#':
					break;
					case '*':
					break;
					default:
					zaehler.Sekunden+=(taste-'0');
    3878:	e1 e5       	ldi	r30, 0x51	; 81
    387a:	f7 e0       	ldi	r31, 0x07	; 7
    387c:	90 81       	ld	r25, Z
    387e:	90 53       	subi	r25, 0x30	; 48
    3880:	98 0f       	add	r25, r24
    3882:	90 83       	st	Z, r25
					pos++;
    3884:	92 e0       	ldi	r25, 0x02	; 2
    3886:	90 93 0c 03 	sts	0x030C, r25
					break;
    388a:	65 c1       	rjmp	.+714    	; 0x3b56 <_Z14eingabehandlerh+0x5fc>
				}
				break;
			case 2:
				switch (taste)
    388c:	83 32       	cpi	r24, 0x23	; 35
    388e:	09 f4       	brne	.+2      	; 0x3892 <_Z14eingabehandlerh+0x338>
    3890:	62 c1       	rjmp	.+708    	; 0x3b56 <_Z14eingabehandlerh+0x5fc>
    3892:	8a 32       	cpi	r24, 0x2A	; 42
    3894:	09 f4       	brne	.+2      	; 0x3898 <_Z14eingabehandlerh+0x33e>
    3896:	5f c1       	rjmp	.+702    	; 0x3b56 <_Z14eingabehandlerh+0x5fc>
					case '#':
					break;
					case '*':
					break;
					default:
					zaehler.Minuten+=(taste-'0')*10;
    3898:	e0 e5       	ldi	r30, 0x50	; 80
    389a:	f7 e0       	ldi	r31, 0x07	; 7
    389c:	98 2f       	mov	r25, r24
    389e:	99 0f       	add	r25, r25
    38a0:	90 56       	subi	r25, 0x60	; 96
    38a2:	29 2f       	mov	r18, r25
    38a4:	22 0f       	add	r18, r18
    38a6:	22 0f       	add	r18, r18
    38a8:	92 0f       	add	r25, r18
    38aa:	20 81       	ld	r18, Z
    38ac:	92 0f       	add	r25, r18
    38ae:	90 83       	st	Z, r25
					pos++;
    38b0:	93 e0       	ldi	r25, 0x03	; 3
    38b2:	90 93 0c 03 	sts	0x030C, r25
					break;
    38b6:	4f c1       	rjmp	.+670    	; 0x3b56 <_Z14eingabehandlerh+0x5fc>
				}
				break;
			case 3:
				switch (taste)
    38b8:	83 32       	cpi	r24, 0x23	; 35
    38ba:	09 f4       	brne	.+2      	; 0x38be <_Z14eingabehandlerh+0x364>
    38bc:	4c c1       	rjmp	.+664    	; 0x3b56 <_Z14eingabehandlerh+0x5fc>
    38be:	8a 32       	cpi	r24, 0x2A	; 42
    38c0:	09 f4       	brne	.+2      	; 0x38c4 <_Z14eingabehandlerh+0x36a>
    38c2:	49 c1       	rjmp	.+658    	; 0x3b56 <_Z14eingabehandlerh+0x5fc>
					case '#':
					break;
					case '*':
					break;
					default:
					zaehler.Minuten+=(taste-'0');
    38c4:	e0 e5       	ldi	r30, 0x50	; 80
    38c6:	f7 e0       	ldi	r31, 0x07	; 7
    38c8:	90 81       	ld	r25, Z
    38ca:	90 53       	subi	r25, 0x30	; 48
    38cc:	98 0f       	add	r25, r24
    38ce:	90 83       	st	Z, r25
					pos++;
    38d0:	94 e0       	ldi	r25, 0x04	; 4
    38d2:	90 93 0c 03 	sts	0x030C, r25
					break;
    38d6:	3f c1       	rjmp	.+638    	; 0x3b56 <_Z14eingabehandlerh+0x5fc>
				}
				break;
			case 4:
				switch (taste)
    38d8:	83 32       	cpi	r24, 0x23	; 35
    38da:	09 f4       	brne	.+2      	; 0x38de <_Z14eingabehandlerh+0x384>
    38dc:	3c c1       	rjmp	.+632    	; 0x3b56 <_Z14eingabehandlerh+0x5fc>
    38de:	8a 32       	cpi	r24, 0x2A	; 42
    38e0:	09 f4       	brne	.+2      	; 0x38e4 <_Z14eingabehandlerh+0x38a>
    38e2:	39 c1       	rjmp	.+626    	; 0x3b56 <_Z14eingabehandlerh+0x5fc>
					case '#':
					break;
					case '*':
					break;
					default:
					zaehler.Stunden+=(taste-'0')*10;
    38e4:	ef e4       	ldi	r30, 0x4F	; 79
    38e6:	f7 e0       	ldi	r31, 0x07	; 7
    38e8:	98 2f       	mov	r25, r24
    38ea:	99 0f       	add	r25, r25
    38ec:	90 56       	subi	r25, 0x60	; 96
    38ee:	29 2f       	mov	r18, r25
    38f0:	22 0f       	add	r18, r18
    38f2:	22 0f       	add	r18, r18
    38f4:	92 0f       	add	r25, r18
    38f6:	20 81       	ld	r18, Z
    38f8:	92 0f       	add	r25, r18
    38fa:	90 83       	st	Z, r25
					pos++;
    38fc:	95 e0       	ldi	r25, 0x05	; 5
    38fe:	90 93 0c 03 	sts	0x030C, r25
					break;
    3902:	29 c1       	rjmp	.+594    	; 0x3b56 <_Z14eingabehandlerh+0x5fc>
				}
				break;
			case 5:
				switch (taste)
    3904:	83 32       	cpi	r24, 0x23	; 35
    3906:	41 f0       	breq	.+16     	; 0x3918 <_Z14eingabehandlerh+0x3be>
    3908:	8a 32       	cpi	r24, 0x2A	; 42
    390a:	31 f0       	breq	.+12     	; 0x3918 <_Z14eingabehandlerh+0x3be>
					case '#':
					break;
					case '*':
					break;
					default:
					zaehler.Stunden+=(taste-'0');
    390c:	ef e4       	ldi	r30, 0x4F	; 79
    390e:	f7 e0       	ldi	r31, 0x07	; 7
    3910:	90 81       	ld	r25, Z
    3912:	90 53       	subi	r25, 0x30	; 48
    3914:	98 0f       	add	r25, r24
    3916:	90 83       	st	Z, r25
					pos++;
					break;
				}
				pos=0;
    3918:	10 92 0c 03 	sts	0x030C, r1
				anzeige&=~(1<<Einstellungsflag);
    391c:	27 7f       	andi	r18, 0xF7	; 247
    391e:	30 93 0e 03 	sts	0x030E, r19
    3922:	20 93 0d 03 	sts	0x030D, r18
				break;
    3926:	17 c1       	rjmp	.+558    	; 0x3b56 <_Z14eingabehandlerh+0x5fc>
			}
		}
		else if ((anzeige&(1<<Stoppuhrflag)))
    3928:	27 ff       	sbrs	r18, 7
    392a:	23 c0       	rjmp	.+70     	; 0x3972 <_Z14eingabehandlerh+0x418>
		{
			if (taste=='*')
    392c:	8a 32       	cpi	r24, 0x2A	; 42
    392e:	71 f4       	brne	.+28     	; 0x394c <_Z14eingabehandlerh+0x3f2>
			{
				if ((anzeige&(1<<Einstellungsflag)))
    3930:	23 ff       	sbrs	r18, 3
    3932:	06 c0       	rjmp	.+12     	; 0x3940 <_Z14eingabehandlerh+0x3e6>
				{
					anzeige&=~(1<<Einstellungsflag);
    3934:	27 7f       	andi	r18, 0xF7	; 247
    3936:	30 93 0e 03 	sts	0x030E, r19
    393a:	20 93 0d 03 	sts	0x030D, r18
    393e:	26 c1       	rjmp	.+588    	; 0x3b8c <_Z14eingabehandlerh+0x632>
				}
				else{
					anzeige|=(1<<Einstellungsflag);
    3940:	28 60       	ori	r18, 0x08	; 8
    3942:	30 93 0e 03 	sts	0x030E, r19
    3946:	20 93 0d 03 	sts	0x030D, r18
    394a:	20 c1       	rjmp	.+576    	; 0x3b8c <_Z14eingabehandlerh+0x632>
				}
			}
			else if (taste=='0')
    394c:	80 33       	cpi	r24, 0x30	; 48
    394e:	39 f4       	brne	.+14     	; 0x395e <_Z14eingabehandlerh+0x404>
			{
				stoppuhr.Sekunden=0;
    3950:	10 92 39 07 	sts	0x0739, r1
				stoppuhr.Minuten=0;
    3954:	10 92 38 07 	sts	0x0738, r1
				stoppuhr.Stunden=0;
    3958:	10 92 37 07 	sts	0x0737, r1
    395c:	08 95       	ret
			}
			else if (taste=='#')
    395e:	83 32       	cpi	r24, 0x23	; 35
    3960:	09 f0       	breq	.+2      	; 0x3964 <_Z14eingabehandlerh+0x40a>
    3962:	1a c1       	rjmp	.+564    	; 0x3b98 <_Z14eingabehandlerh+0x63e>
			{
				anzeige&=~((1<<Stoppuhrflag)|(1<<Einstellungsflag));
    3964:	27 77       	andi	r18, 0x77	; 119
				anzeige|=(1<<menueflag);
    3966:	30 62       	ori	r19, 0x20	; 32
    3968:	30 93 0e 03 	sts	0x030E, r19
    396c:	20 93 0d 03 	sts	0x030D, r18
    3970:	08 95       	ret
			}
		}
		else if ((anzeige&(1<<Uhrflag)))
    3972:	20 ff       	sbrs	r18, 0
    3974:	1c c0       	rjmp	.+56     	; 0x39ae <_Z14eingabehandlerh+0x454>
		{
			if (taste=='#')
    3976:	83 32       	cpi	r24, 0x23	; 35
    3978:	39 f4       	brne	.+14     	; 0x3988 <_Z14eingabehandlerh+0x42e>
			{
				anzeige&=~(1<<Uhrflag);
    397a:	2e 7f       	andi	r18, 0xFE	; 254
				anzeige|=(1<<menueflag);
    397c:	30 62       	ori	r19, 0x20	; 32
    397e:	30 93 0e 03 	sts	0x030E, r19
    3982:	20 93 0d 03 	sts	0x030D, r18
    3986:	08 95       	ret
			}
			else if (taste=='0')
    3988:	80 33       	cpi	r24, 0x30	; 48
    398a:	09 f0       	breq	.+2      	; 0x398e <_Z14eingabehandlerh+0x434>
    398c:	e4 c0       	rjmp	.+456    	; 0x3b56 <_Z14eingabehandlerh+0x5fc>
			{
				if (LED.ison())
    398e:	83 e2       	ldi	r24, 0x23	; 35
    3990:	93 e0       	ldi	r25, 0x03	; 3
    3992:	0e 94 1c 21 	call	0x4238	; 0x4238 <_ZN6Output4isonEv>
    3996:	88 23       	and	r24, r24
    3998:	29 f0       	breq	.+10     	; 0x39a4 <_Z14eingabehandlerh+0x44a>
				{
					LED.off();
    399a:	83 e2       	ldi	r24, 0x23	; 35
    399c:	93 e0       	ldi	r25, 0x03	; 3
    399e:	0e 94 4c 21 	call	0x4298	; 0x4298 <_ZN6Output3offEv>
    39a2:	08 95       	ret
				}
				else{
					LED.on();
    39a4:	83 e2       	ldi	r24, 0x23	; 35
    39a6:	93 e0       	ldi	r25, 0x03	; 3
    39a8:	0e 94 e8 20 	call	0x41d0	; 0x41d0 <_ZN6Output2onEv>
    39ac:	08 95       	ret
				}
			}
		}
		else if ((anzeige&(1<<Kompasflag)))
    39ae:	22 ff       	sbrs	r18, 2
    39b0:	1c c0       	rjmp	.+56     	; 0x39ea <_Z14eingabehandlerh+0x490>
		{
			if (taste=='#')
    39b2:	83 32       	cpi	r24, 0x23	; 35
    39b4:	39 f4       	brne	.+14     	; 0x39c4 <_Z14eingabehandlerh+0x46a>
			{
				anzeige&=~(1<<Kompasflag);
    39b6:	2b 7f       	andi	r18, 0xFB	; 251
				anzeige|=(1<<menueflag);
    39b8:	30 62       	ori	r19, 0x20	; 32
    39ba:	30 93 0e 03 	sts	0x030E, r19
    39be:	20 93 0d 03 	sts	0x030D, r18
    39c2:	08 95       	ret
			}
			else if (taste=='0')
    39c4:	80 33       	cpi	r24, 0x30	; 48
    39c6:	09 f0       	breq	.+2      	; 0x39ca <_Z14eingabehandlerh+0x470>
    39c8:	c6 c0       	rjmp	.+396    	; 0x3b56 <_Z14eingabehandlerh+0x5fc>
			{
				if (LED.ison())
    39ca:	83 e2       	ldi	r24, 0x23	; 35
    39cc:	93 e0       	ldi	r25, 0x03	; 3
    39ce:	0e 94 1c 21 	call	0x4238	; 0x4238 <_ZN6Output4isonEv>
    39d2:	88 23       	and	r24, r24
    39d4:	29 f0       	breq	.+10     	; 0x39e0 <_Z14eingabehandlerh+0x486>
				{
					LED.off();
    39d6:	83 e2       	ldi	r24, 0x23	; 35
    39d8:	93 e0       	ldi	r25, 0x03	; 3
    39da:	0e 94 4c 21 	call	0x4298	; 0x4298 <_ZN6Output3offEv>
    39de:	08 95       	ret
				}
				else{
					LED.on();
    39e0:	83 e2       	ldi	r24, 0x23	; 35
    39e2:	93 e0       	ldi	r25, 0x03	; 3
    39e4:	0e 94 e8 20 	call	0x41d0	; 0x41d0 <_ZN6Output2onEv>
    39e8:	08 95       	ret
				}
			}
		}
		else if ((anzeige&(1<<Fahradflag)))
    39ea:	21 ff       	sbrs	r18, 1
    39ec:	3d c0       	rjmp	.+122    	; 0x3a68 <_Z14eingabehandlerh+0x50e>
		{
			if (taste=='#')
    39ee:	83 32       	cpi	r24, 0x23	; 35
    39f0:	69 f4       	brne	.+26     	; 0x3a0c <_Z14eingabehandlerh+0x4b2>
			{
				anzeige&=~(1<<Fahradflag);
    39f2:	c9 01       	movw	r24, r18
    39f4:	8d 7f       	andi	r24, 0xFD	; 253
				anzeige|=(1<<menueflag);
    39f6:	90 62       	ori	r25, 0x20	; 32
    39f8:	90 93 0e 03 	sts	0x030E, r25
    39fc:	80 93 0d 03 	sts	0x030D, r24
				TCCR1B &= ~((1<<CS12) | (1<<CS10));
    3a00:	e1 e8       	ldi	r30, 0x81	; 129
    3a02:	f0 e0       	ldi	r31, 0x00	; 0
    3a04:	80 81       	ld	r24, Z
    3a06:	8a 7f       	andi	r24, 0xFA	; 250
    3a08:	80 83       	st	Z, r24
    3a0a:	08 95       	ret
			}
			else if (taste=='*')
    3a0c:	8a 32       	cpi	r24, 0x2A	; 42
    3a0e:	c9 f4       	brne	.+50     	; 0x3a42 <_Z14eingabehandlerh+0x4e8>
			{
				maxgeschw = 0;
    3a10:	10 92 00 03 	sts	0x0300, r1
    3a14:	10 92 01 03 	sts	0x0301, r1
    3a18:	10 92 02 03 	sts	0x0302, r1
    3a1c:	10 92 03 03 	sts	0x0303, r1
				strecke = 0;
    3a20:	10 92 04 03 	sts	0x0304, r1
    3a24:	10 92 05 03 	sts	0x0305, r1
    3a28:	10 92 06 03 	sts	0x0306, r1
    3a2c:	10 92 07 03 	sts	0x0307, r1
				Fahrtzeit = 0;
    3a30:	10 92 fc 02 	sts	0x02FC, r1
    3a34:	10 92 fd 02 	sts	0x02FD, r1
    3a38:	10 92 fe 02 	sts	0x02FE, r1
    3a3c:	10 92 ff 02 	sts	0x02FF, r1
    3a40:	a5 c0       	rjmp	.+330    	; 0x3b8c <_Z14eingabehandlerh+0x632>
			}
			else if (taste=='0')
    3a42:	80 33       	cpi	r24, 0x30	; 48
    3a44:	09 f0       	breq	.+2      	; 0x3a48 <_Z14eingabehandlerh+0x4ee>
    3a46:	a8 c0       	rjmp	.+336    	; 0x3b98 <_Z14eingabehandlerh+0x63e>
			{
				if (LED.ison())
    3a48:	83 e2       	ldi	r24, 0x23	; 35
    3a4a:	93 e0       	ldi	r25, 0x03	; 3
    3a4c:	0e 94 1c 21 	call	0x4238	; 0x4238 <_ZN6Output4isonEv>
    3a50:	88 23       	and	r24, r24
    3a52:	29 f0       	breq	.+10     	; 0x3a5e <_Z14eingabehandlerh+0x504>
				{
					LED.off();
    3a54:	83 e2       	ldi	r24, 0x23	; 35
    3a56:	93 e0       	ldi	r25, 0x03	; 3
    3a58:	0e 94 4c 21 	call	0x4298	; 0x4298 <_ZN6Output3offEv>
    3a5c:	08 95       	ret
				}
				else{
					LED.on();
    3a5e:	83 e2       	ldi	r24, 0x23	; 35
    3a60:	93 e0       	ldi	r25, 0x03	; 3
    3a62:	0e 94 e8 20 	call	0x41d0	; 0x41d0 <_ZN6Output2onEv>
    3a66:	08 95       	ret
				}
			}
		}
		else if ((anzeige&(1<<Druckflag)))
    3a68:	31 ff       	sbrs	r19, 1
    3a6a:	2c c0       	rjmp	.+88     	; 0x3ac4 <_Z14eingabehandlerh+0x56a>
		{
			if (taste=='#')
    3a6c:	83 32       	cpi	r24, 0x23	; 35
    3a6e:	41 f4       	brne	.+16     	; 0x3a80 <_Z14eingabehandlerh+0x526>
			{
				anzeige&=~(1<<Druckflag);
    3a70:	c9 01       	movw	r24, r18
    3a72:	9d 7f       	andi	r25, 0xFD	; 253
				anzeige|=(1<<menueflag);
    3a74:	90 62       	ori	r25, 0x20	; 32
    3a76:	90 93 0e 03 	sts	0x030E, r25
    3a7a:	80 93 0d 03 	sts	0x030D, r24
    3a7e:	08 95       	ret
			}
			else if (taste=='*')
    3a80:	8a 32       	cpi	r24, 0x2A	; 42
    3a82:	69 f4       	brne	.+26     	; 0x3a9e <_Z14eingabehandlerh+0x544>
			{
				Baro.set_Pressure0(Baro.Press);
    3a84:	40 91 13 03 	lds	r20, 0x0313
    3a88:	50 91 14 03 	lds	r21, 0x0314
    3a8c:	60 91 15 03 	lds	r22, 0x0315
    3a90:	70 91 16 03 	lds	r23, 0x0316
    3a94:	83 e1       	ldi	r24, 0x13	; 19
    3a96:	93 e0       	ldi	r25, 0x03	; 3
    3a98:	0e 94 4e 23 	call	0x469c	; 0x469c <_ZN8Pressure13set_Pressure0Ed>
    3a9c:	77 c0       	rjmp	.+238    	; 0x3b8c <_Z14eingabehandlerh+0x632>
			}
			else if (taste=='0')
    3a9e:	80 33       	cpi	r24, 0x30	; 48
    3aa0:	09 f0       	breq	.+2      	; 0x3aa4 <_Z14eingabehandlerh+0x54a>
    3aa2:	7a c0       	rjmp	.+244    	; 0x3b98 <_Z14eingabehandlerh+0x63e>
			{
				if (LED.ison())
    3aa4:	83 e2       	ldi	r24, 0x23	; 35
    3aa6:	93 e0       	ldi	r25, 0x03	; 3
    3aa8:	0e 94 1c 21 	call	0x4238	; 0x4238 <_ZN6Output4isonEv>
    3aac:	88 23       	and	r24, r24
    3aae:	29 f0       	breq	.+10     	; 0x3aba <_Z14eingabehandlerh+0x560>
				{
					LED.off();
    3ab0:	83 e2       	ldi	r24, 0x23	; 35
    3ab2:	93 e0       	ldi	r25, 0x03	; 3
    3ab4:	0e 94 4c 21 	call	0x4298	; 0x4298 <_ZN6Output3offEv>
    3ab8:	08 95       	ret
				}
				else{
					LED.on();
    3aba:	83 e2       	ldi	r24, 0x23	; 35
    3abc:	93 e0       	ldi	r25, 0x03	; 3
    3abe:	0e 94 e8 20 	call	0x41d0	; 0x41d0 <_ZN6Output2onEv>
    3ac2:	08 95       	ret
				}
			}
		}
		else if ((anzeige&(1<<Timerflag)))
    3ac4:	26 ff       	sbrs	r18, 6
    3ac6:	20 c0       	rjmp	.+64     	; 0x3b08 <_Z14eingabehandlerh+0x5ae>
		{
			if (taste=='#')
    3ac8:	83 32       	cpi	r24, 0x23	; 35
    3aca:	09 f0       	breq	.+2      	; 0x3ace <_Z14eingabehandlerh+0x574>
    3acc:	44 c0       	rjmp	.+136    	; 0x3b56 <_Z14eingabehandlerh+0x5fc>
			{
				anzeige&=~((1<<Timerflag)|(1<<blinkflag));
    3ace:	2f 7b       	andi	r18, 0xBF	; 191
    3ad0:	3f 7b       	andi	r19, 0xBF	; 191
    3ad2:	30 93 0e 03 	sts	0x030E, r19
    3ad6:	20 93 0d 03 	sts	0x030D, r18
				oled.invert(0);	//fuer den Fall, dass es invertiert blieb (50% der Faelle)
    3ada:	60 e0       	ldi	r22, 0x00	; 0
    3adc:	86 e2       	ldi	r24, 0x26	; 38
    3ade:	93 e0       	ldi	r25, 0x03	; 3
    3ae0:	0e 94 89 03 	call	0x712	; 0x712 <_ZN7Display6invertEh>
				LED.off();
    3ae4:	83 e2       	ldi	r24, 0x23	; 35
    3ae6:	93 e0       	ldi	r25, 0x03	; 3
    3ae8:	0e 94 4c 21 	call	0x4298	; 0x4298 <_ZN6Output3offEv>
				Vibrationsmotor.off();
    3aec:	81 e2       	ldi	r24, 0x21	; 33
    3aee:	93 e0       	ldi	r25, 0x03	; 3
    3af0:	0e 94 4c 21 	call	0x4298	; 0x4298 <_ZN6Output3offEv>
				
				anzeige|=(1<<menueflag);
    3af4:	80 91 0d 03 	lds	r24, 0x030D
    3af8:	90 91 0e 03 	lds	r25, 0x030E
    3afc:	90 62       	ori	r25, 0x20	; 32
    3afe:	90 93 0e 03 	sts	0x030E, r25
    3b02:	80 93 0d 03 	sts	0x030D, r24
    3b06:	08 95       	ret
			}
		}
		else if ((anzeige&(1<<Uhrflaggross)))
    3b08:	32 ff       	sbrs	r19, 2
    3b0a:	1c c0       	rjmp	.+56     	; 0x3b44 <_Z14eingabehandlerh+0x5ea>
		{
			if (taste=='#')
    3b0c:	83 32       	cpi	r24, 0x23	; 35
    3b0e:	41 f4       	brne	.+16     	; 0x3b20 <_Z14eingabehandlerh+0x5c6>
			{
				anzeige&=~(1<<Uhrflaggross);
    3b10:	c9 01       	movw	r24, r18
    3b12:	9b 7f       	andi	r25, 0xFB	; 251
				anzeige|=(1<<menueflag);
    3b14:	90 62       	ori	r25, 0x20	; 32
    3b16:	90 93 0e 03 	sts	0x030E, r25
    3b1a:	80 93 0d 03 	sts	0x030D, r24
    3b1e:	08 95       	ret
			}
			else if (taste=='0')
    3b20:	80 33       	cpi	r24, 0x30	; 48
    3b22:	c9 f4       	brne	.+50     	; 0x3b56 <_Z14eingabehandlerh+0x5fc>
			{
				if (LED.ison())
    3b24:	83 e2       	ldi	r24, 0x23	; 35
    3b26:	93 e0       	ldi	r25, 0x03	; 3
    3b28:	0e 94 1c 21 	call	0x4238	; 0x4238 <_ZN6Output4isonEv>
    3b2c:	88 23       	and	r24, r24
    3b2e:	29 f0       	breq	.+10     	; 0x3b3a <_Z14eingabehandlerh+0x5e0>
				{
					LED.off();
    3b30:	83 e2       	ldi	r24, 0x23	; 35
    3b32:	93 e0       	ldi	r25, 0x03	; 3
    3b34:	0e 94 4c 21 	call	0x4298	; 0x4298 <_ZN6Output3offEv>
    3b38:	08 95       	ret
				}
				else{
					LED.on();
    3b3a:	83 e2       	ldi	r24, 0x23	; 35
    3b3c:	93 e0       	ldi	r25, 0x03	; 3
    3b3e:	0e 94 e8 20 	call	0x41d0	; 0x41d0 <_ZN6Output2onEv>
    3b42:	08 95       	ret
				}
			}
		}
		else if (anzeige==0)
    3b44:	23 2b       	or	r18, r19
    3b46:	39 f4       	brne	.+14     	; 0x3b56 <_Z14eingabehandlerh+0x5fc>
		{
			anzeige|=(1<<menueflag);
    3b48:	80 e0       	ldi	r24, 0x00	; 0
    3b4a:	90 e2       	ldi	r25, 0x20	; 32
    3b4c:	90 93 0e 03 	sts	0x030E, r25
    3b50:	80 93 0d 03 	sts	0x030D, r24
    3b54:	08 95       	ret
		}
		if ((anzeige&(1<<blinkflag)))
    3b56:	20 91 0d 03 	lds	r18, 0x030D
    3b5a:	30 91 0e 03 	lds	r19, 0x030E
    3b5e:	36 ff       	sbrs	r19, 6
    3b60:	1b c0       	rjmp	.+54     	; 0x3b98 <_Z14eingabehandlerh+0x63e>
		{
			if (taste=='*')
    3b62:	8a 32       	cpi	r24, 0x2A	; 42
    3b64:	c9 f4       	brne	.+50     	; 0x3b98 <_Z14eingabehandlerh+0x63e>
			{
				anzeige &=~(1<<blinkflag);
    3b66:	3f 7b       	andi	r19, 0xBF	; 191
    3b68:	30 93 0e 03 	sts	0x030E, r19
    3b6c:	20 93 0d 03 	sts	0x030D, r18
				oled.invert(0);	//fuer den Fall, dass es invertiert blieb (50% der Faelle)
    3b70:	60 e0       	ldi	r22, 0x00	; 0
    3b72:	86 e2       	ldi	r24, 0x26	; 38
    3b74:	93 e0       	ldi	r25, 0x03	; 3
    3b76:	0e 94 89 03 	call	0x712	; 0x712 <_ZN7Display6invertEh>
				LED.off();
    3b7a:	83 e2       	ldi	r24, 0x23	; 35
    3b7c:	93 e0       	ldi	r25, 0x03	; 3
    3b7e:	0e 94 4c 21 	call	0x4298	; 0x4298 <_ZN6Output3offEv>
				Vibrationsmotor.off();
    3b82:	81 e2       	ldi	r24, 0x21	; 33
    3b84:	93 e0       	ldi	r25, 0x03	; 3
    3b86:	0e 94 4c 21 	call	0x4298	; 0x4298 <_ZN6Output3offEv>
    3b8a:	08 95       	ret
		}
		else if (anzeige==0)
		{
			anzeige|=(1<<menueflag);
		}
		if ((anzeige&(1<<blinkflag)))
    3b8c:	20 91 0d 03 	lds	r18, 0x030D
    3b90:	30 91 0e 03 	lds	r19, 0x030E
    3b94:	36 fd       	sbrc	r19, 6
    3b96:	e7 cf       	rjmp	.-50     	; 0x3b66 <_Z14eingabehandlerh+0x60c>
    3b98:	08 95       	ret

00003b9a <main>:
void eingabehandler(uint8_t taste);

int main(void)
{
	//initialisierung
	initialisierung();
    3b9a:	0e 94 75 18 	call	0x30ea	; 0x30ea <_Z15initialisierungv>
	
    while(1)
    {
		//Steuerung der interupts durch Handler
		maininterupthandler();
    3b9e:	0e 94 d9 18 	call	0x31b2	; 0x31b2 <_Z19maininterupthandlerv>
		//Steuerung der Anzeige alle Sekunde zur aktualisierung maximale Aktulisierungsrate ist 1Hz
		anzeigehandler();
    3ba2:	0e 94 eb 18 	call	0x31d6	; 0x31d6 <_Z14anzeigehandlerv>
		//Tasthandler
		eingabehandler(Tastatur.Taster());
    3ba6:	85 e2       	ldi	r24, 0x25	; 37
    3ba8:	93 e0       	ldi	r25, 0x03	; 3
    3baa:	0e 94 7e 1e 	call	0x3cfc	; 0x3cfc <_ZN9Interface6TasterEv>
    3bae:	0e 94 ad 1a 	call	0x355a	; 0x355a <_Z14eingabehandlerh>
    3bb2:	f5 cf       	rjmp	.-22     	; 0x3b9e <main+0x4>

00003bb4 <_GLOBAL__sub_I_kompass>:
#include <stdlib.h>
#include <stdio.h>
#include <avr/interrupt.h>

#include "Kompass.h"
Kompass kompass;
    3bb4:	8f e6       	ldi	r24, 0x6F	; 111
    3bb6:	97 e0       	ldi	r25, 0x07	; 7
    3bb8:	0e 94 47 1f 	call	0x3e8e	; 0x3e8e <_ZN7KompassC1Ev>

#include "RTC.h"
RTC rtc;
    3bbc:	87 e5       	ldi	r24, 0x57	; 87
    3bbe:	97 e0       	ldi	r25, 0x07	; 7
    3bc0:	0e 94 c7 23 	call	0x478e	; 0x478e <_ZN3RTCC1Ev>
RTC zaehler;
    3bc4:	8f e3       	ldi	r24, 0x3F	; 63
    3bc6:	97 e0       	ldi	r25, 0x07	; 7
    3bc8:	0e 94 c7 23 	call	0x478e	; 0x478e <_ZN3RTCC1Ev>
RTC stoppuhr;
    3bcc:	87 e2       	ldi	r24, 0x27	; 39
    3bce:	97 e0       	ldi	r25, 0x07	; 7
    3bd0:	0e 94 c7 23 	call	0x478e	; 0x478e <_ZN3RTCC1Ev>

#include "Display.h"
Display oled;
    3bd4:	86 e2       	ldi	r24, 0x26	; 38
    3bd6:	93 e0       	ldi	r25, 0x03	; 3
    3bd8:	0e 94 7d 03 	call	0x6fa	; 0x6fa <_ZN7DisplayC1Ev>

#include "Interface.h"
Interface Tastatur;
    3bdc:	85 e2       	ldi	r24, 0x25	; 37
    3bde:	93 e0       	ldi	r25, 0x03	; 3
    3be0:	0e 94 56 1e 	call	0x3cac	; 0x3cac <_ZN9InterfaceC1Ev>

#include "Output.h"
Output LED('D',PORTD7);
    3be4:	47 e0       	ldi	r20, 0x07	; 7
    3be6:	64 e4       	ldi	r22, 0x44	; 68
    3be8:	83 e2       	ldi	r24, 0x23	; 35
    3bea:	93 e0       	ldi	r25, 0x03	; 3
    3bec:	0e 94 b7 20 	call	0x416e	; 0x416e <_ZN6OutputC1Ehh>
Output Vibrationsmotor('B',PORTB0);
    3bf0:	40 e0       	ldi	r20, 0x00	; 0
    3bf2:	62 e4       	ldi	r22, 0x42	; 66
    3bf4:	81 e2       	ldi	r24, 0x21	; 33
    3bf6:	93 e0       	ldi	r25, 0x03	; 3
    3bf8:	0e 94 b7 20 	call	0x416e	; 0x416e <_ZN6OutputC1Ehh>

#include "Pressure.h"
Pressure Baro;
    3bfc:	83 e1       	ldi	r24, 0x13	; 19
    3bfe:	93 e0       	ldi	r25, 0x03	; 3
    3c00:	0e 94 f9 21 	call	0x43f2	; 0x43f2 <_ZN8PressureC1Ev>
    3c04:	08 95       	ret

00003c06 <_GLOBAL__sub_D_kompass>:
    3c06:	83 e1       	ldi	r24, 0x13	; 19
    3c08:	93 e0       	ldi	r25, 0x03	; 3
    3c0a:	0e 94 bd 21 	call	0x437a	; 0x437a <_ZN8PressureD1Ev>
#include "Interface.h"
Interface Tastatur;

#include "Output.h"
Output LED('D',PORTD7);
Output Vibrationsmotor('B',PORTB0);
    3c0e:	81 e2       	ldi	r24, 0x21	; 33
    3c10:	93 e0       	ldi	r25, 0x03	; 3
    3c12:	0e 94 e7 20 	call	0x41ce	; 0x41ce <_ZN6OutputD1Ev>

#include "Interface.h"
Interface Tastatur;

#include "Output.h"
Output LED('D',PORTD7);
    3c16:	83 e2       	ldi	r24, 0x23	; 35
    3c18:	93 e0       	ldi	r25, 0x03	; 3
    3c1a:	0e 94 e7 20 	call	0x41ce	; 0x41ce <_ZN6OutputD1Ev>

#include "Display.h"
Display oled;

#include "Interface.h"
Interface Tastatur;
    3c1e:	85 e2       	ldi	r24, 0x25	; 37
    3c20:	93 e0       	ldi	r25, 0x03	; 3
    3c22:	0e 94 57 1e 	call	0x3cae	; 0x3cae <_ZN9InterfaceD1Ev>
RTC rtc;
RTC zaehler;
RTC stoppuhr;

#include "Display.h"
Display oled;
    3c26:	86 e2       	ldi	r24, 0x26	; 38
    3c28:	93 e0       	ldi	r25, 0x03	; 3
    3c2a:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <_ZN7DisplayD1Ev>
Kompass kompass;

#include "RTC.h"
RTC rtc;
RTC zaehler;
RTC stoppuhr;
    3c2e:	87 e2       	ldi	r24, 0x27	; 39
    3c30:	97 e0       	ldi	r25, 0x07	; 7
    3c32:	0e 94 54 23 	call	0x46a8	; 0x46a8 <_ZN3RTCD1Ev>
#include "Kompass.h"
Kompass kompass;

#include "RTC.h"
RTC rtc;
RTC zaehler;
    3c36:	8f e3       	ldi	r24, 0x3F	; 63
    3c38:	97 e0       	ldi	r25, 0x07	; 7
    3c3a:	0e 94 54 23 	call	0x46a8	; 0x46a8 <_ZN3RTCD1Ev>

#include "Kompass.h"
Kompass kompass;

#include "RTC.h"
RTC rtc;
    3c3e:	87 e5       	ldi	r24, 0x57	; 87
    3c40:	97 e0       	ldi	r25, 0x07	; 7
    3c42:	0e 94 54 23 	call	0x46a8	; 0x46a8 <_ZN3RTCD1Ev>
#include <stdlib.h>
#include <stdio.h>
#include <avr/interrupt.h>

#include "Kompass.h"
Kompass kompass;
    3c46:	8f e6       	ldi	r24, 0x6F	; 111
    3c48:	97 e0       	ldi	r25, 0x07	; 7
    3c4a:	0e 94 24 1f 	call	0x3e48	; 0x3e48 <_ZN7KompassD1Ev>
    3c4e:	08 95       	ret

00003c50 <_ZN3I2CC1Ev>:

// default constructor
I2C::I2C()
{
	//TWBR = 10; //Bit fuer 100khz an Tackrate, reicht gerade noch so
	TWBR=2; //fuer 8MHz und 400kHz in SCL
    3c50:	82 e0       	ldi	r24, 0x02	; 2
    3c52:	80 93 b8 00 	sts	0x00B8, r24
    3c56:	08 95       	ret

00003c58 <_ZN3I2CD1Ev>:
} //I2C

// default destructor
I2C::~I2C()
    3c58:	08 95       	ret

00003c5a <_ZN3I2C9twi_startEv>:
{
} //~I2C

void I2C::twi_start(){
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    3c5a:	84 ea       	ldi	r24, 0xA4	; 164
    3c5c:	80 93 bc 00 	sts	0x00BC, r24
    3c60:	08 95       	ret

00003c62 <_ZN3I2C8twi_stopEv>:
}
void I2C::twi_stop(){
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    3c62:	84 e9       	ldi	r24, 0x94	; 148
    3c64:	80 93 bc 00 	sts	0x00BC, r24
    3c68:	08 95       	ret

00003c6a <_ZN3I2C9twi_writeEh>:
	TWCR = (1<<TWINT) | (1<<TWEN);
	TWCR &= ~(1<<TWEA);
}

void I2C::twi_write(uint8_t data){
	while(!(TWCR & (1<<TWINT)));
    3c6a:	ec eb       	ldi	r30, 0xBC	; 188
    3c6c:	f0 e0       	ldi	r31, 0x00	; 0
    3c6e:	80 81       	ld	r24, Z
    3c70:	88 23       	and	r24, r24
    3c72:	ec f7       	brge	.-6      	; 0x3c6e <_ZN3I2C9twi_writeEh+0x4>
	TWDR = data;
    3c74:	60 93 bb 00 	sts	0x00BB, r22
	TWCR = (1<<TWINT) | (1<<TWEN);
    3c78:	84 e8       	ldi	r24, 0x84	; 132
    3c7a:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));
    3c7e:	ec eb       	ldi	r30, 0xBC	; 188
    3c80:	f0 e0       	ldi	r31, 0x00	; 0
    3c82:	80 81       	ld	r24, Z
    3c84:	88 23       	and	r24, r24
    3c86:	ec f7       	brge	.-6      	; 0x3c82 <_ZN3I2C9twi_writeEh+0x18>
}
    3c88:	08 95       	ret

00003c8a <_ZN3I2C8twi_readEh>:

uint8_t I2C::twi_read(uint8_t ack){
	if (ack)
    3c8a:	66 23       	and	r22, r22
    3c8c:	21 f0       	breq	.+8      	; 0x3c96 <_ZN3I2C8twi_readEh+0xc>
	{
		TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    3c8e:	84 ec       	ldi	r24, 0xC4	; 196
    3c90:	80 93 bc 00 	sts	0x00BC, r24
    3c94:	03 c0       	rjmp	.+6      	; 0x3c9c <_ZN3I2C8twi_readEh+0x12>
	}
	else{
		TWCR = (1<<TWINT) | (1<<TWEN);
    3c96:	84 e8       	ldi	r24, 0x84	; 132
    3c98:	80 93 bc 00 	sts	0x00BC, r24
	}
	
	while(!(TWCR & (1<<TWINT)));
    3c9c:	ec eb       	ldi	r30, 0xBC	; 188
    3c9e:	f0 e0       	ldi	r31, 0x00	; 0
    3ca0:	80 81       	ld	r24, Z
    3ca2:	88 23       	and	r24, r24
    3ca4:	ec f7       	brge	.-6      	; 0x3ca0 <_ZN3I2C8twi_readEh+0x16>
	return TWDR;
    3ca6:	80 91 bb 00 	lds	r24, 0x00BB
    3caa:	08 95       	ret

00003cac <_ZN9InterfaceC1Ev>:


#include "Interface.h"

// default constructor
Interface::Interface()
    3cac:	08 95       	ret

00003cae <_ZN9InterfaceD1Ev>:
{
} //Interface

// default destructor
Interface::~Interface()
    3cae:	08 95       	ret

00003cb0 <_ZN9Interface8debounceEPVhh>:
{
} //~Interface

uint8_t Interface::debounce(volatile uint8_t *port, uint8_t pin)
{
	if ( (*port & (1 << pin)) )
    3cb0:	fb 01       	movw	r30, r22
    3cb2:	80 81       	ld	r24, Z
    3cb4:	90 e0       	ldi	r25, 0x00	; 0
    3cb6:	04 2e       	mov	r0, r20
    3cb8:	02 c0       	rjmp	.+4      	; 0x3cbe <_ZN9Interface8debounceEPVhh+0xe>
    3cba:	95 95       	asr	r25
    3cbc:	87 95       	ror	r24
    3cbe:	0a 94       	dec	r0
    3cc0:	e2 f7       	brpl	.-8      	; 0x3cba <_ZN9Interface8debounceEPVhh+0xa>
    3cc2:	80 ff       	sbrs	r24, 0
    3cc4:	17 c0       	rjmp	.+46     	; 0x3cf4 <_ZN9Interface8debounceEPVhh+0x44>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3cc6:	8f ec       	ldi	r24, 0xCF	; 207
    3cc8:	97 e0       	ldi	r25, 0x07	; 7
    3cca:	01 97       	sbiw	r24, 0x01	; 1
    3ccc:	f1 f7       	brne	.-4      	; 0x3cca <_ZN9Interface8debounceEPVhh+0x1a>
    3cce:	00 c0       	rjmp	.+0      	; 0x3cd0 <_ZN9Interface8debounceEPVhh+0x20>
    3cd0:	00 00       	nop
	{
		/* Pin wurde auf Masse gezogen, 100ms warten   */
		_delay_ms(1);
		if ( !(*port & (1 << pin)) )
    3cd2:	fb 01       	movw	r30, r22
    3cd4:	80 81       	ld	r24, Z
    3cd6:	90 e0       	ldi	r25, 0x00	; 0
    3cd8:	9c 01       	movw	r18, r24
    3cda:	02 c0       	rjmp	.+4      	; 0x3ce0 <_ZN9Interface8debounceEPVhh+0x30>
    3cdc:	35 95       	asr	r19
    3cde:	27 95       	ror	r18
    3ce0:	4a 95       	dec	r20
    3ce2:	e2 f7       	brpl	.-8      	; 0x3cdc <_ZN9Interface8debounceEPVhh+0x2c>
    3ce4:	20 fd       	sbrc	r18, 0
    3ce6:	08 c0       	rjmp	.+16     	; 0x3cf8 <_ZN9Interface8debounceEPVhh+0x48>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3ce8:	3a e1       	ldi	r19, 0x1A	; 26
    3cea:	3a 95       	dec	r19
    3cec:	f1 f7       	brne	.-4      	; 0x3cea <_ZN9Interface8debounceEPVhh+0x3a>
    3cee:	00 c0       	rjmp	.+0      	; 0x3cf0 <_ZN9Interface8debounceEPVhh+0x40>
		{
			/* Anwender Zeit zum Loslassen des Tasters geben */
			_delay_us(10);
			return 1;
    3cf0:	81 e0       	ldi	r24, 0x01	; 1
    3cf2:	08 95       	ret
		}
	}
	return 0;
    3cf4:	80 e0       	ldi	r24, 0x00	; 0
    3cf6:	08 95       	ret
    3cf8:	80 e0       	ldi	r24, 0x00	; 0
}
    3cfa:	08 95       	ret

00003cfc <_ZN9Interface6TasterEv>:
		break;
	}
	return abfrage;
}

uint8_t Interface::Taster(){
    3cfc:	1f 93       	push	r17
    3cfe:	cf 93       	push	r28
    3d00:	df 93       	push	r29
    3d02:	ec 01       	movw	r28, r24
	uint8_t taste = 'A';
	
	//erste Zeile
	PORTD |= (1<<PORTD3);
    3d04:	5b 9a       	sbi	0x0b, 3	; 11
    3d06:	82 e0       	ldi	r24, 0x02	; 2
    3d08:	8a 95       	dec	r24
    3d0a:	f1 f7       	brne	.-4      	; 0x3d08 <_ZN9Interface6TasterEv+0xc>
    3d0c:	00 c0       	rjmp	.+0      	; 0x3d0e <_ZN9Interface6TasterEv+0x12>
	_delay_us(1);
	if(debounce(&PIND,PIND4)){
    3d0e:	44 e0       	ldi	r20, 0x04	; 4
    3d10:	69 e2       	ldi	r22, 0x29	; 41
    3d12:	70 e0       	ldi	r23, 0x00	; 0
    3d14:	ce 01       	movw	r24, r28
    3d16:	0e 94 58 1e 	call	0x3cb0	; 0x3cb0 <_ZN9Interface8debounceEPVhh>
    3d1a:	81 11       	cpse	r24, r1
    3d1c:	12 c0       	rjmp	.+36     	; 0x3d42 <_ZN9Interface6TasterEv+0x46>
		taste = '3';
	}
	else if (debounce(&PIND,PIND5))
    3d1e:	45 e0       	ldi	r20, 0x05	; 5
    3d20:	69 e2       	ldi	r22, 0x29	; 41
    3d22:	70 e0       	ldi	r23, 0x00	; 0
    3d24:	ce 01       	movw	r24, r28
    3d26:	0e 94 58 1e 	call	0x3cb0	; 0x3cb0 <_ZN9Interface8debounceEPVhh>
    3d2a:	81 11       	cpse	r24, r1
    3d2c:	0c c0       	rjmp	.+24     	; 0x3d46 <_ZN9Interface6TasterEv+0x4a>
	{
		taste = '2';
	}
	else if (debounce(&PIND,PIND6))
    3d2e:	46 e0       	ldi	r20, 0x06	; 6
    3d30:	69 e2       	ldi	r22, 0x29	; 41
    3d32:	70 e0       	ldi	r23, 0x00	; 0
    3d34:	ce 01       	movw	r24, r28
    3d36:	0e 94 58 1e 	call	0x3cb0	; 0x3cb0 <_ZN9Interface8debounceEPVhh>
    3d3a:	81 11       	cpse	r24, r1
    3d3c:	06 c0       	rjmp	.+12     	; 0x3d4a <_ZN9Interface6TasterEv+0x4e>
	}
	return abfrage;
}

uint8_t Interface::Taster(){
	uint8_t taste = 'A';
    3d3e:	11 e4       	ldi	r17, 0x41	; 65
    3d40:	05 c0       	rjmp	.+10     	; 0x3d4c <_ZN9Interface6TasterEv+0x50>
	
	//erste Zeile
	PORTD |= (1<<PORTD3);
	_delay_us(1);
	if(debounce(&PIND,PIND4)){
		taste = '3';
    3d42:	13 e3       	ldi	r17, 0x33	; 51
    3d44:	03 c0       	rjmp	.+6      	; 0x3d4c <_ZN9Interface6TasterEv+0x50>
	}
	else if (debounce(&PIND,PIND5))
	{
		taste = '2';
    3d46:	12 e3       	ldi	r17, 0x32	; 50
    3d48:	01 c0       	rjmp	.+2      	; 0x3d4c <_ZN9Interface6TasterEv+0x50>
	}
	else if (debounce(&PIND,PIND6))
	{
		taste = '1';
    3d4a:	11 e3       	ldi	r17, 0x31	; 49
	}
	PORTD &= ~(1<<PORTD3);
    3d4c:	5b 98       	cbi	0x0b, 3	; 11
	
	//zweite Zeile
	PORTD |= (1<<PORTD2);
    3d4e:	5a 9a       	sbi	0x0b, 2	; 11
    3d50:	82 e0       	ldi	r24, 0x02	; 2
    3d52:	8a 95       	dec	r24
    3d54:	f1 f7       	brne	.-4      	; 0x3d52 <_ZN9Interface6TasterEv+0x56>
    3d56:	00 c0       	rjmp	.+0      	; 0x3d58 <_ZN9Interface6TasterEv+0x5c>
	_delay_us(1);
	if(debounce(&PIND,PIND4)){
    3d58:	44 e0       	ldi	r20, 0x04	; 4
    3d5a:	69 e2       	ldi	r22, 0x29	; 41
    3d5c:	70 e0       	ldi	r23, 0x00	; 0
    3d5e:	ce 01       	movw	r24, r28
    3d60:	0e 94 58 1e 	call	0x3cb0	; 0x3cb0 <_ZN9Interface8debounceEPVhh>
    3d64:	81 11       	cpse	r24, r1
    3d66:	11 c0       	rjmp	.+34     	; 0x3d8a <_ZN9Interface6TasterEv+0x8e>
		taste = '6';
	}
	else if (debounce(&PIND,PIND5))
    3d68:	45 e0       	ldi	r20, 0x05	; 5
    3d6a:	69 e2       	ldi	r22, 0x29	; 41
    3d6c:	70 e0       	ldi	r23, 0x00	; 0
    3d6e:	ce 01       	movw	r24, r28
    3d70:	0e 94 58 1e 	call	0x3cb0	; 0x3cb0 <_ZN9Interface8debounceEPVhh>
    3d74:	81 11       	cpse	r24, r1
    3d76:	0b c0       	rjmp	.+22     	; 0x3d8e <_ZN9Interface6TasterEv+0x92>
	{
		taste = '5';
	}
	else if (debounce(&PIND,PIND6))
    3d78:	46 e0       	ldi	r20, 0x06	; 6
    3d7a:	69 e2       	ldi	r22, 0x29	; 41
    3d7c:	70 e0       	ldi	r23, 0x00	; 0
    3d7e:	ce 01       	movw	r24, r28
    3d80:	0e 94 58 1e 	call	0x3cb0	; 0x3cb0 <_ZN9Interface8debounceEPVhh>
    3d84:	81 11       	cpse	r24, r1
    3d86:	05 c0       	rjmp	.+10     	; 0x3d92 <_ZN9Interface6TasterEv+0x96>
    3d88:	05 c0       	rjmp	.+10     	; 0x3d94 <_ZN9Interface6TasterEv+0x98>
	
	//zweite Zeile
	PORTD |= (1<<PORTD2);
	_delay_us(1);
	if(debounce(&PIND,PIND4)){
		taste = '6';
    3d8a:	16 e3       	ldi	r17, 0x36	; 54
    3d8c:	03 c0       	rjmp	.+6      	; 0x3d94 <_ZN9Interface6TasterEv+0x98>
	}
	else if (debounce(&PIND,PIND5))
	{
		taste = '5';
    3d8e:	15 e3       	ldi	r17, 0x35	; 53
    3d90:	01 c0       	rjmp	.+2      	; 0x3d94 <_ZN9Interface6TasterEv+0x98>
	}
	else if (debounce(&PIND,PIND6))
	{
		taste = '4';
    3d92:	14 e3       	ldi	r17, 0x34	; 52
	}
	PORTD &= ~(1<<PORTD2);
    3d94:	5a 98       	cbi	0x0b, 2	; 11
	
	//dritte Zeile
	PORTD |= (1<<PORTD1);
    3d96:	59 9a       	sbi	0x0b, 1	; 11
    3d98:	82 e0       	ldi	r24, 0x02	; 2
    3d9a:	8a 95       	dec	r24
    3d9c:	f1 f7       	brne	.-4      	; 0x3d9a <_ZN9Interface6TasterEv+0x9e>
    3d9e:	00 c0       	rjmp	.+0      	; 0x3da0 <_ZN9Interface6TasterEv+0xa4>
	_delay_us(1);
	if(debounce(&PIND,PIND4)){
    3da0:	44 e0       	ldi	r20, 0x04	; 4
    3da2:	69 e2       	ldi	r22, 0x29	; 41
    3da4:	70 e0       	ldi	r23, 0x00	; 0
    3da6:	ce 01       	movw	r24, r28
    3da8:	0e 94 58 1e 	call	0x3cb0	; 0x3cb0 <_ZN9Interface8debounceEPVhh>
    3dac:	81 11       	cpse	r24, r1
    3dae:	11 c0       	rjmp	.+34     	; 0x3dd2 <_ZN9Interface6TasterEv+0xd6>
		taste = '9';
	}
	else if (debounce(&PIND,PIND5))
    3db0:	45 e0       	ldi	r20, 0x05	; 5
    3db2:	69 e2       	ldi	r22, 0x29	; 41
    3db4:	70 e0       	ldi	r23, 0x00	; 0
    3db6:	ce 01       	movw	r24, r28
    3db8:	0e 94 58 1e 	call	0x3cb0	; 0x3cb0 <_ZN9Interface8debounceEPVhh>
    3dbc:	81 11       	cpse	r24, r1
    3dbe:	0b c0       	rjmp	.+22     	; 0x3dd6 <_ZN9Interface6TasterEv+0xda>
	{
		taste = '8';
	}
	else if (debounce(&PIND,PIND6))
    3dc0:	46 e0       	ldi	r20, 0x06	; 6
    3dc2:	69 e2       	ldi	r22, 0x29	; 41
    3dc4:	70 e0       	ldi	r23, 0x00	; 0
    3dc6:	ce 01       	movw	r24, r28
    3dc8:	0e 94 58 1e 	call	0x3cb0	; 0x3cb0 <_ZN9Interface8debounceEPVhh>
    3dcc:	81 11       	cpse	r24, r1
    3dce:	05 c0       	rjmp	.+10     	; 0x3dda <_ZN9Interface6TasterEv+0xde>
    3dd0:	05 c0       	rjmp	.+10     	; 0x3ddc <_ZN9Interface6TasterEv+0xe0>
	
	//dritte Zeile
	PORTD |= (1<<PORTD1);
	_delay_us(1);
	if(debounce(&PIND,PIND4)){
		taste = '9';
    3dd2:	19 e3       	ldi	r17, 0x39	; 57
    3dd4:	03 c0       	rjmp	.+6      	; 0x3ddc <_ZN9Interface6TasterEv+0xe0>
	}
	else if (debounce(&PIND,PIND5))
	{
		taste = '8';
    3dd6:	18 e3       	ldi	r17, 0x38	; 56
    3dd8:	01 c0       	rjmp	.+2      	; 0x3ddc <_ZN9Interface6TasterEv+0xe0>
	}
	else if (debounce(&PIND,PIND6))
	{
		taste = '7';
    3dda:	17 e3       	ldi	r17, 0x37	; 55
	}
	PORTD &= ~(1<<PORT1);
    3ddc:	59 98       	cbi	0x0b, 1	; 11
	
	//vierte Zeile
	PORTD |= (1<<PORTD0);
    3dde:	58 9a       	sbi	0x0b, 0	; 11
    3de0:	82 e0       	ldi	r24, 0x02	; 2
    3de2:	8a 95       	dec	r24
    3de4:	f1 f7       	brne	.-4      	; 0x3de2 <_ZN9Interface6TasterEv+0xe6>
    3de6:	00 c0       	rjmp	.+0      	; 0x3de8 <_ZN9Interface6TasterEv+0xec>
	_delay_us(1);
	if(debounce(&PIND,PIND4)){
    3de8:	44 e0       	ldi	r20, 0x04	; 4
    3dea:	69 e2       	ldi	r22, 0x29	; 41
    3dec:	70 e0       	ldi	r23, 0x00	; 0
    3dee:	ce 01       	movw	r24, r28
    3df0:	0e 94 58 1e 	call	0x3cb0	; 0x3cb0 <_ZN9Interface8debounceEPVhh>
    3df4:	81 11       	cpse	r24, r1
    3df6:	11 c0       	rjmp	.+34     	; 0x3e1a <_ZN9Interface6TasterEv+0x11e>
		taste = '#';
	}
	else if (debounce(&PIND,PIND5))
    3df8:	45 e0       	ldi	r20, 0x05	; 5
    3dfa:	69 e2       	ldi	r22, 0x29	; 41
    3dfc:	70 e0       	ldi	r23, 0x00	; 0
    3dfe:	ce 01       	movw	r24, r28
    3e00:	0e 94 58 1e 	call	0x3cb0	; 0x3cb0 <_ZN9Interface8debounceEPVhh>
    3e04:	81 11       	cpse	r24, r1
    3e06:	0b c0       	rjmp	.+22     	; 0x3e1e <_ZN9Interface6TasterEv+0x122>
	{
		taste = '0';
	}
	else if (debounce(&PIND,PIND6))
    3e08:	46 e0       	ldi	r20, 0x06	; 6
    3e0a:	69 e2       	ldi	r22, 0x29	; 41
    3e0c:	70 e0       	ldi	r23, 0x00	; 0
    3e0e:	ce 01       	movw	r24, r28
    3e10:	0e 94 58 1e 	call	0x3cb0	; 0x3cb0 <_ZN9Interface8debounceEPVhh>
    3e14:	81 11       	cpse	r24, r1
    3e16:	05 c0       	rjmp	.+10     	; 0x3e22 <_ZN9Interface6TasterEv+0x126>
    3e18:	05 c0       	rjmp	.+10     	; 0x3e24 <_ZN9Interface6TasterEv+0x128>
	
	//vierte Zeile
	PORTD |= (1<<PORTD0);
	_delay_us(1);
	if(debounce(&PIND,PIND4)){
		taste = '#';
    3e1a:	13 e2       	ldi	r17, 0x23	; 35
    3e1c:	03 c0       	rjmp	.+6      	; 0x3e24 <_ZN9Interface6TasterEv+0x128>
	}
	else if (debounce(&PIND,PIND5))
	{
		taste = '0';
    3e1e:	10 e3       	ldi	r17, 0x30	; 48
    3e20:	01 c0       	rjmp	.+2      	; 0x3e24 <_ZN9Interface6TasterEv+0x128>
	}
	else if (debounce(&PIND,PIND6))
	{
		taste = '*';
    3e22:	1a e2       	ldi	r17, 0x2A	; 42
	}
	PORTD &= ~(1<<PORTD0);
    3e24:	58 98       	cbi	0x0b, 0	; 11
	
	return taste;
}
    3e26:	81 2f       	mov	r24, r17
    3e28:	df 91       	pop	r29
    3e2a:	cf 91       	pop	r28
    3e2c:	1f 91       	pop	r17
    3e2e:	08 95       	ret

00003e30 <_ZN9Interface17ZahlenausTastaturEv>:

uint8_t Interface::ZahlenausTastatur(){
    3e30:	cf 93       	push	r28
    3e32:	df 93       	push	r29
    3e34:	ec 01       	movw	r28, r24
	while(true){
		uint8_t taste = Taster();
    3e36:	ce 01       	movw	r24, r28
    3e38:	0e 94 7e 1e 	call	0x3cfc	; 0x3cfc <_ZN9Interface6TasterEv>
		if(taste>='0' && taste<='9'){
    3e3c:	80 53       	subi	r24, 0x30	; 48
    3e3e:	8a 30       	cpi	r24, 0x0A	; 10
    3e40:	d0 f7       	brcc	.-12     	; 0x3e36 <_ZN9Interface17ZahlenausTastaturEv+0x6>
			return taste - '0';
		}
	}
}
    3e42:	df 91       	pop	r29
    3e44:	cf 91       	pop	r28
    3e46:	08 95       	ret

00003e48 <_ZN7KompassD1Ev>:
		offset[i]=0;
	}
} //Kompass

// default destructor
Kompass::~Kompass()
    3e48:	06 96       	adiw	r24, 0x06	; 6
    3e4a:	0e 94 2c 1e 	call	0x3c58	; 0x3c58 <_ZN3I2CD1Ev>
    3e4e:	08 95       	ret

00003e50 <_ZN7Kompass16HMC5883L_commandEhh>:
{
} //~Kompass

void Kompass::HMC5883L_command(uint8_t adresse, uint8_t command){
    3e50:	0f 93       	push	r16
    3e52:	1f 93       	push	r17
    3e54:	cf 93       	push	r28
    3e56:	df 93       	push	r29
    3e58:	06 2f       	mov	r16, r22
    3e5a:	14 2f       	mov	r17, r20
	i2c.twi_start();
    3e5c:	ec 01       	movw	r28, r24
    3e5e:	26 96       	adiw	r28, 0x06	; 6
    3e60:	ce 01       	movw	r24, r28
    3e62:	0e 94 2d 1e 	call	0x3c5a	; 0x3c5a <_ZN3I2C9twi_startEv>
	i2c.twi_write(HMCWRITEADRESSE);
    3e66:	6c e3       	ldi	r22, 0x3C	; 60
    3e68:	ce 01       	movw	r24, r28
    3e6a:	0e 94 35 1e 	call	0x3c6a	; 0x3c6a <_ZN3I2C9twi_writeEh>
	i2c.twi_write(adresse);
    3e6e:	60 2f       	mov	r22, r16
    3e70:	ce 01       	movw	r24, r28
    3e72:	0e 94 35 1e 	call	0x3c6a	; 0x3c6a <_ZN3I2C9twi_writeEh>
	i2c.twi_write(command);
    3e76:	61 2f       	mov	r22, r17
    3e78:	ce 01       	movw	r24, r28
    3e7a:	0e 94 35 1e 	call	0x3c6a	; 0x3c6a <_ZN3I2C9twi_writeEh>
	i2c.twi_stop();
    3e7e:	ce 01       	movw	r24, r28
    3e80:	0e 94 31 1e 	call	0x3c62	; 0x3c62 <_ZN3I2C8twi_stopEv>
}
    3e84:	df 91       	pop	r29
    3e86:	cf 91       	pop	r28
    3e88:	1f 91       	pop	r17
    3e8a:	0f 91       	pop	r16
    3e8c:	08 95       	ret

00003e8e <_ZN7KompassC1Ev>:


#include "Kompass.h"

// default constructor
Kompass::Kompass()
    3e8e:	cf 93       	push	r28
    3e90:	df 93       	push	r29
    3e92:	ec 01       	movw	r28, r24
    3e94:	06 96       	adiw	r24, 0x06	; 6
    3e96:	0e 94 28 1e 	call	0x3c50	; 0x3c50 <_ZN3I2CC1Ev>
{
	//Config Register A
	HMC5883L_command(0x00, HMCSAMPLES8+HMCDATARATE15+HMCMEASUREMODENORMAL);
    3e9a:	40 e7       	ldi	r20, 0x70	; 112
    3e9c:	60 e0       	ldi	r22, 0x00	; 0
    3e9e:	ce 01       	movw	r24, r28
    3ea0:	0e 94 28 1f 	call	0x3e50	; 0x3e50 <_ZN7Kompass16HMC5883L_commandEhh>

	//Config Gain
	HMC5883L_command(0x01, HMCGAIN1090);
    3ea4:	40 e2       	ldi	r20, 0x20	; 32
    3ea6:	61 e0       	ldi	r22, 0x01	; 1
    3ea8:	ce 01       	movw	r24, r28
    3eaa:	0e 94 28 1f 	call	0x3e50	; 0x3e50 <_ZN7Kompass16HMC5883L_commandEhh>

	//Set Mode auf single
	HMC5883L_command(0x02, HMCSIGLEMODE);
    3eae:	41 e0       	ldi	r20, 0x01	; 1
    3eb0:	62 e0       	ldi	r22, 0x02	; 2
    3eb2:	ce 01       	movw	r24, r28
    3eb4:	0e 94 28 1f 	call	0x3e50	; 0x3e50 <_ZN7Kompass16HMC5883L_commandEhh>
	//Variablen
	for(uint8_t i=0;i<3;i++){
		achsen[i]=0;
    3eb8:	19 82       	std	Y+1, r1	; 0x01
    3eba:	18 82       	st	Y, r1
		offset[i]=0;
    3ebc:	18 86       	std	Y+8, r1	; 0x08
    3ebe:	1f 82       	std	Y+7, r1	; 0x07

	//Set Mode auf single
	HMC5883L_command(0x02, HMCSIGLEMODE);
	//Variablen
	for(uint8_t i=0;i<3;i++){
		achsen[i]=0;
    3ec0:	1b 82       	std	Y+3, r1	; 0x03
    3ec2:	1a 82       	std	Y+2, r1	; 0x02
		offset[i]=0;
    3ec4:	1a 86       	std	Y+10, r1	; 0x0a
    3ec6:	19 86       	std	Y+9, r1	; 0x09

	//Set Mode auf single
	HMC5883L_command(0x02, HMCSIGLEMODE);
	//Variablen
	for(uint8_t i=0;i<3;i++){
		achsen[i]=0;
    3ec8:	1d 82       	std	Y+5, r1	; 0x05
    3eca:	1c 82       	std	Y+4, r1	; 0x04
		offset[i]=0;
    3ecc:	1c 86       	std	Y+12, r1	; 0x0c
    3ece:	1b 86       	std	Y+11, r1	; 0x0b
	}
} //Kompass
    3ed0:	df 91       	pop	r29
    3ed2:	cf 91       	pop	r28
    3ed4:	08 95       	ret

00003ed6 <_ZN7Kompass20HMC5883L_readHeadingEv>:
		achsen[i]=0;
		offset[i]=0;
	}
}

uint8_t Kompass::HMC5883L_readHeading(){
    3ed6:	bf 92       	push	r11
    3ed8:	cf 92       	push	r12
    3eda:	df 92       	push	r13
    3edc:	ef 92       	push	r14
    3ede:	ff 92       	push	r15
    3ee0:	0f 93       	push	r16
    3ee2:	1f 93       	push	r17
    3ee4:	cf 93       	push	r28
    3ee6:	df 93       	push	r29
    3ee8:	00 d0       	rcall	.+0      	; 0x3eea <_ZN7Kompass20HMC5883L_readHeadingEv+0x14>
    3eea:	00 d0       	rcall	.+0      	; 0x3eec <_ZN7Kompass20HMC5883L_readHeadingEv+0x16>
    3eec:	00 d0       	rcall	.+0      	; 0x3eee <_ZN7Kompass20HMC5883L_readHeadingEv+0x18>
    3eee:	cd b7       	in	r28, 0x3d	; 61
    3ef0:	de b7       	in	r29, 0x3e	; 62
    3ef2:	6c 01       	movw	r12, r24
	cli();
    3ef4:	f8 94       	cli
	uint8_t heading[6];
	i2c.twi_start();
    3ef6:	7c 01       	movw	r14, r24
    3ef8:	26 e0       	ldi	r18, 0x06	; 6
    3efa:	e2 0e       	add	r14, r18
    3efc:	f1 1c       	adc	r15, r1
    3efe:	c7 01       	movw	r24, r14
    3f00:	0e 94 2d 1e 	call	0x3c5a	; 0x3c5a <_ZN3I2C9twi_startEv>
	i2c.twi_write(HMCWRITEADRESSE);
    3f04:	6c e3       	ldi	r22, 0x3C	; 60
    3f06:	c7 01       	movw	r24, r14
    3f08:	0e 94 35 1e 	call	0x3c6a	; 0x3c6a <_ZN3I2C9twi_writeEh>
	i2c.twi_write(0x03);
    3f0c:	63 e0       	ldi	r22, 0x03	; 3
    3f0e:	c7 01       	movw	r24, r14
    3f10:	0e 94 35 1e 	call	0x3c6a	; 0x3c6a <_ZN3I2C9twi_writeEh>
	i2c.twi_start();
    3f14:	c7 01       	movw	r24, r14
    3f16:	0e 94 2d 1e 	call	0x3c5a	; 0x3c5a <_ZN3I2C9twi_startEv>
	i2c.twi_write(HMCREADADRESSE);
    3f1a:	6d e3       	ldi	r22, 0x3D	; 61
    3f1c:	c7 01       	movw	r24, r14
    3f1e:	0e 94 35 1e 	call	0x3c6a	; 0x3c6a <_ZN3I2C9twi_writeEh>
    3f22:	8e 01       	movw	r16, r28
    3f24:	0f 5f       	subi	r16, 0xFF	; 255
    3f26:	1f 4f       	sbci	r17, 0xFF	; 255
	
	for(uint8_t i=0; i<6;i++){
    3f28:	b1 2c       	mov	r11, r1
		if (i<5)
    3f2a:	84 e0       	ldi	r24, 0x04	; 4
    3f2c:	8b 15       	cp	r24, r11
    3f2e:	38 f0       	brcs	.+14     	; 0x3f3e <_ZN7Kompass20HMC5883L_readHeadingEv+0x68>
		{
			heading[i]=i2c.twi_read(1);
    3f30:	61 e0       	ldi	r22, 0x01	; 1
    3f32:	c7 01       	movw	r24, r14
    3f34:	0e 94 45 1e 	call	0x3c8a	; 0x3c8a <_ZN3I2C8twi_readEh>
    3f38:	f8 01       	movw	r30, r16
    3f3a:	80 83       	st	Z, r24
    3f3c:	06 c0       	rjmp	.+12     	; 0x3f4a <_ZN7Kompass20HMC5883L_readHeadingEv+0x74>
		}
		else
		{
			heading[i]=i2c.twi_read(0);
    3f3e:	60 e0       	ldi	r22, 0x00	; 0
    3f40:	c7 01       	movw	r24, r14
    3f42:	0e 94 45 1e 	call	0x3c8a	; 0x3c8a <_ZN3I2C8twi_readEh>
    3f46:	f8 01       	movw	r30, r16
    3f48:	80 83       	st	Z, r24
	i2c.twi_write(HMCWRITEADRESSE);
	i2c.twi_write(0x03);
	i2c.twi_start();
	i2c.twi_write(HMCREADADRESSE);
	
	for(uint8_t i=0; i<6;i++){
    3f4a:	b3 94       	inc	r11
    3f4c:	0f 5f       	subi	r16, 0xFF	; 255
    3f4e:	1f 4f       	sbci	r17, 0xFF	; 255
    3f50:	f6 e0       	ldi	r31, 0x06	; 6
    3f52:	bf 12       	cpse	r11, r31
    3f54:	ea cf       	rjmp	.-44     	; 0x3f2a <_ZN7Kompass20HMC5883L_readHeadingEv+0x54>
		{
			heading[i]=i2c.twi_read(0);
		}
		
	}
	i2c.twi_stop();
    3f56:	c7 01       	movw	r24, r14
    3f58:	0e 94 31 1e 	call	0x3c62	; 0x3c62 <_ZN3I2C8twi_stopEv>
	achsen[0] =(int16_t) (heading[1] | (heading[0] << 8));
    3f5c:	89 81       	ldd	r24, Y+1	; 0x01
    3f5e:	90 e0       	ldi	r25, 0x00	; 0
    3f60:	98 2f       	mov	r25, r24
    3f62:	88 27       	eor	r24, r24
    3f64:	2a 81       	ldd	r18, Y+2	; 0x02
    3f66:	82 2b       	or	r24, r18
    3f68:	f6 01       	movw	r30, r12
    3f6a:	91 83       	std	Z+1, r25	; 0x01
    3f6c:	80 83       	st	Z, r24
	achsen[2] =(int16_t) (heading[3] | (heading[2] << 8));
    3f6e:	8b 81       	ldd	r24, Y+3	; 0x03
    3f70:	90 e0       	ldi	r25, 0x00	; 0
    3f72:	98 2f       	mov	r25, r24
    3f74:	88 27       	eor	r24, r24
    3f76:	2c 81       	ldd	r18, Y+4	; 0x04
    3f78:	82 2b       	or	r24, r18
    3f7a:	95 83       	std	Z+5, r25	; 0x05
    3f7c:	84 83       	std	Z+4, r24	; 0x04
	achsen[1] =(int16_t) (heading[5] | (heading[4] << 8));
    3f7e:	8d 81       	ldd	r24, Y+5	; 0x05
    3f80:	90 e0       	ldi	r25, 0x00	; 0
    3f82:	98 2f       	mov	r25, r24
    3f84:	88 27       	eor	r24, r24
    3f86:	2e 81       	ldd	r18, Y+6	; 0x06
    3f88:	82 2b       	or	r24, r18
    3f8a:	93 83       	std	Z+3, r25	; 0x03
    3f8c:	82 83       	std	Z+2, r24	; 0x02
	sei();
    3f8e:	78 94       	sei
	if (achsen[0]==-4096 || achsen[1]==-4096 || achsen[2]==-4096)
    3f90:	f6 01       	movw	r30, r12
    3f92:	80 81       	ld	r24, Z
    3f94:	91 81       	ldd	r25, Z+1	; 0x01
    3f96:	81 15       	cp	r24, r1
    3f98:	90 4f       	sbci	r25, 0xF0	; 240
    3f9a:	09 f4       	brne	.+2      	; 0x3f9e <_ZN7Kompass20HMC5883L_readHeadingEv+0xc8>
    3f9c:	47 c0       	rjmp	.+142    	; 0x402c <_ZN7Kompass20HMC5883L_readHeadingEv+0x156>
    3f9e:	f6 01       	movw	r30, r12
    3fa0:	82 81       	ldd	r24, Z+2	; 0x02
    3fa2:	93 81       	ldd	r25, Z+3	; 0x03
    3fa4:	81 15       	cp	r24, r1
    3fa6:	90 4f       	sbci	r25, 0xF0	; 240
    3fa8:	09 f4       	brne	.+2      	; 0x3fac <_ZN7Kompass20HMC5883L_readHeadingEv+0xd6>
    3faa:	42 c0       	rjmp	.+132    	; 0x4030 <_ZN7Kompass20HMC5883L_readHeadingEv+0x15a>
    3fac:	f6 01       	movw	r30, r12
    3fae:	84 81       	ldd	r24, Z+4	; 0x04
    3fb0:	95 81       	ldd	r25, Z+5	; 0x05
    3fb2:	81 15       	cp	r24, r1
    3fb4:	90 4f       	sbci	r25, 0xF0	; 240
    3fb6:	f1 f1       	breq	.+124    	; 0x4034 <_ZN7Kompass20HMC5883L_readHeadingEv+0x15e>
    3fb8:	f6 01       	movw	r30, r12
    3fba:	83 e0       	ldi	r24, 0x03	; 3
    3fbc:	df 01       	movw	r26, r30
	}
	//Kallibrierung durchfuehren, jedes mal, wenn eine abfrage stattfindet
	//somit passive kalibrierung
	else{
		for(uint8_t i=0;i<3;i++){
			if(achsen[i]>max[i]){
    3fbe:	20 81       	ld	r18, Z
    3fc0:	31 81       	ldd	r19, Z+1	; 0x01
    3fc2:	45 85       	ldd	r20, Z+13	; 0x0d
    3fc4:	56 85       	ldd	r21, Z+14	; 0x0e
    3fc6:	42 17       	cp	r20, r18
    3fc8:	53 07       	cpc	r21, r19
    3fca:	8c f4       	brge	.+34     	; 0x3fee <_ZN7Kompass20HMC5883L_readHeadingEv+0x118>
				max[i]=achsen[i];
    3fcc:	36 87       	std	Z+14, r19	; 0x0e
    3fce:	25 87       	std	Z+13, r18	; 0x0d
				offset[i]=(max[i]+min[i])/2;
    3fd0:	43 89       	ldd	r20, Z+19	; 0x13
    3fd2:	54 89       	ldd	r21, Z+20	; 0x14
    3fd4:	24 0f       	add	r18, r20
    3fd6:	35 1f       	adc	r19, r21
    3fd8:	33 23       	and	r19, r19
    3fda:	14 f4       	brge	.+4      	; 0x3fe0 <_ZN7Kompass20HMC5883L_readHeadingEv+0x10a>
    3fdc:	2f 5f       	subi	r18, 0xFF	; 255
    3fde:	3f 4f       	sbci	r19, 0xFF	; 255
    3fe0:	35 95       	asr	r19
    3fe2:	27 95       	ror	r18
    3fe4:	18 96       	adiw	r26, 0x08	; 8
    3fe6:	3c 93       	st	X, r19
    3fe8:	2e 93       	st	-X, r18
    3fea:	17 97       	sbiw	r26, 0x07	; 7
    3fec:	1a c0       	rjmp	.+52     	; 0x4022 <_ZN7Kompass20HMC5883L_readHeadingEv+0x14c>
			}
			else if(achsen[i]<min[i]){
    3fee:	63 89       	ldd	r22, Z+19	; 0x13
    3ff0:	74 89       	ldd	r23, Z+20	; 0x14
    3ff2:	26 17       	cp	r18, r22
    3ff4:	37 07       	cpc	r19, r23
    3ff6:	7c f4       	brge	.+30     	; 0x4016 <_ZN7Kompass20HMC5883L_readHeadingEv+0x140>
				min[i]=achsen[i];
    3ff8:	34 8b       	std	Z+20, r19	; 0x14
    3ffa:	23 8b       	std	Z+19, r18	; 0x13
				offset[i]=(max[i]+min[i])/2;
    3ffc:	24 0f       	add	r18, r20
    3ffe:	35 1f       	adc	r19, r21
    4000:	33 23       	and	r19, r19
    4002:	14 f4       	brge	.+4      	; 0x4008 <_ZN7Kompass20HMC5883L_readHeadingEv+0x132>
    4004:	2f 5f       	subi	r18, 0xFF	; 255
    4006:	3f 4f       	sbci	r19, 0xFF	; 255
    4008:	35 95       	asr	r19
    400a:	27 95       	ror	r18
    400c:	18 96       	adiw	r26, 0x08	; 8
    400e:	3c 93       	st	X, r19
    4010:	2e 93       	st	-X, r18
    4012:	17 97       	sbiw	r26, 0x07	; 7
    4014:	06 c0       	rjmp	.+12     	; 0x4022 <_ZN7Kompass20HMC5883L_readHeadingEv+0x14c>
			}
			else {
				achsen[i]-=offset[i];
    4016:	47 81       	ldd	r20, Z+7	; 0x07
    4018:	50 85       	ldd	r21, Z+8	; 0x08
    401a:	24 1b       	sub	r18, r20
    401c:	35 0b       	sbc	r19, r21
    401e:	31 83       	std	Z+1, r19	; 0x01
    4020:	20 83       	st	Z, r18
    4022:	81 50       	subi	r24, 0x01	; 1
    4024:	32 96       	adiw	r30, 0x02	; 2
		return 1;
	}
	//Kallibrierung durchfuehren, jedes mal, wenn eine abfrage stattfindet
	//somit passive kalibrierung
	else{
		for(uint8_t i=0;i<3;i++){
    4026:	81 11       	cpse	r24, r1
    4028:	c9 cf       	rjmp	.-110    	; 0x3fbc <_ZN7Kompass20HMC5883L_readHeadingEv+0xe6>
    402a:	05 c0       	rjmp	.+10     	; 0x4036 <_ZN7Kompass20HMC5883L_readHeadingEv+0x160>
	achsen[2] =(int16_t) (heading[3] | (heading[2] << 8));
	achsen[1] =(int16_t) (heading[5] | (heading[4] << 8));
	sei();
	if (achsen[0]==-4096 || achsen[1]==-4096 || achsen[2]==-4096)
	{
		return 1;
    402c:	81 e0       	ldi	r24, 0x01	; 1
    402e:	03 c0       	rjmp	.+6      	; 0x4036 <_ZN7Kompass20HMC5883L_readHeadingEv+0x160>
    4030:	81 e0       	ldi	r24, 0x01	; 1
    4032:	01 c0       	rjmp	.+2      	; 0x4036 <_ZN7Kompass20HMC5883L_readHeadingEv+0x160>
    4034:	81 e0       	ldi	r24, 0x01	; 1
			}
		}
	}
	
	return 0;
}
    4036:	26 96       	adiw	r28, 0x06	; 6
    4038:	0f b6       	in	r0, 0x3f	; 63
    403a:	f8 94       	cli
    403c:	de bf       	out	0x3e, r29	; 62
    403e:	0f be       	out	0x3f, r0	; 63
    4040:	cd bf       	out	0x3d, r28	; 61
    4042:	df 91       	pop	r29
    4044:	cf 91       	pop	r28
    4046:	1f 91       	pop	r17
    4048:	0f 91       	pop	r16
    404a:	ff 90       	pop	r15
    404c:	ef 90       	pop	r14
    404e:	df 90       	pop	r13
    4050:	cf 90       	pop	r12
    4052:	bf 90       	pop	r11
    4054:	08 95       	ret

00004056 <_ZN7Kompass5angleEv>:

double Kompass::angle(){
    4056:	cf 92       	push	r12
    4058:	df 92       	push	r13
    405a:	ef 92       	push	r14
    405c:	ff 92       	push	r15
    405e:	cf 93       	push	r28
    4060:	df 93       	push	r29
    4062:	ec 01       	movw	r28, r24
	double angle=0;
	if (HMC5883L_readHeading())
    4064:	0e 94 6b 1f 	call	0x3ed6	; 0x3ed6 <_ZN7Kompass20HMC5883L_readHeadingEv>
    4068:	81 11       	cpse	r24, r1
    406a:	57 c0       	rjmp	.+174    	; 0x411a <_ZN7Kompass5angleEv+0xc4>
	{
		angle=-1.0;
	}
	else{
		angle=atan2f(achsen[0],achsen[2])*180.0/M_PI+180.0;
    406c:	6c 81       	ldd	r22, Y+4	; 0x04
    406e:	7d 81       	ldd	r23, Y+5	; 0x05
    4070:	88 27       	eor	r24, r24
    4072:	77 fd       	sbrc	r23, 7
    4074:	80 95       	com	r24
    4076:	98 2f       	mov	r25, r24
    4078:	0e 94 0b 26 	call	0x4c16	; 0x4c16 <__floatsisf>
    407c:	6b 01       	movw	r12, r22
    407e:	7c 01       	movw	r14, r24
    4080:	68 81       	ld	r22, Y
    4082:	79 81       	ldd	r23, Y+1	; 0x01
    4084:	88 27       	eor	r24, r24
    4086:	77 fd       	sbrc	r23, 7
    4088:	80 95       	com	r24
    408a:	98 2f       	mov	r25, r24
    408c:	0e 94 0b 26 	call	0x4c16	; 0x4c16 <__floatsisf>
    4090:	a7 01       	movw	r20, r14
    4092:	96 01       	movw	r18, r12
    4094:	0e 94 16 25 	call	0x4a2c	; 0x4a2c <atan2>
    4098:	20 e0       	ldi	r18, 0x00	; 0
    409a:	30 e0       	ldi	r19, 0x00	; 0
    409c:	44 e3       	ldi	r20, 0x34	; 52
    409e:	53 e4       	ldi	r21, 0x43	; 67
    40a0:	0e 94 69 27 	call	0x4ed2	; 0x4ed2 <__mulsf3>
    40a4:	2b ed       	ldi	r18, 0xDB	; 219
    40a6:	3f e0       	ldi	r19, 0x0F	; 15
    40a8:	49 e4       	ldi	r20, 0x49	; 73
    40aa:	50 e4       	ldi	r21, 0x40	; 64
    40ac:	0e 94 70 25 	call	0x4ae0	; 0x4ae0 <__divsf3>
    40b0:	20 e0       	ldi	r18, 0x00	; 0
    40b2:	30 e0       	ldi	r19, 0x00	; 0
    40b4:	44 e3       	ldi	r20, 0x34	; 52
    40b6:	53 e4       	ldi	r21, 0x43	; 67
    40b8:	0e 94 a3 24 	call	0x4946	; 0x4946 <__addsf3>
		//deklination
		angle+=2.35;
    40bc:	26 e6       	ldi	r18, 0x66	; 102
    40be:	36 e6       	ldi	r19, 0x66	; 102
    40c0:	46 e1       	ldi	r20, 0x16	; 22
    40c2:	50 e4       	ldi	r21, 0x40	; 64
    40c4:	0e 94 a3 24 	call	0x4946	; 0x4946 <__addsf3>
    40c8:	6b 01       	movw	r12, r22
    40ca:	7c 01       	movw	r14, r24
		//Normierung auf %360
		if (angle>=360)
    40cc:	20 e0       	ldi	r18, 0x00	; 0
    40ce:	30 e0       	ldi	r19, 0x00	; 0
    40d0:	44 eb       	ldi	r20, 0xB4	; 180
    40d2:	53 e4       	ldi	r21, 0x43	; 67
    40d4:	0e 94 19 27 	call	0x4e32	; 0x4e32 <__gesf2>
    40d8:	88 23       	and	r24, r24
    40da:	5c f0       	brlt	.+22     	; 0x40f2 <_ZN7Kompass5angleEv+0x9c>
		{
			angle-=360;
    40dc:	20 e0       	ldi	r18, 0x00	; 0
    40de:	30 e0       	ldi	r19, 0x00	; 0
    40e0:	44 eb       	ldi	r20, 0xB4	; 180
    40e2:	53 e4       	ldi	r21, 0x43	; 67
    40e4:	c7 01       	movw	r24, r14
    40e6:	b6 01       	movw	r22, r12
    40e8:	0e 94 a2 24 	call	0x4944	; 0x4944 <__subsf3>
    40ec:	6b 01       	movw	r12, r22
    40ee:	7c 01       	movw	r14, r24
    40f0:	1c c0       	rjmp	.+56     	; 0x412a <_ZN7Kompass5angleEv+0xd4>
		}
		else if (angle < 0)
    40f2:	20 e0       	ldi	r18, 0x00	; 0
    40f4:	30 e0       	ldi	r19, 0x00	; 0
    40f6:	a9 01       	movw	r20, r18
    40f8:	c7 01       	movw	r24, r14
    40fa:	b6 01       	movw	r22, r12
    40fc:	0e 94 69 25 	call	0x4ad2	; 0x4ad2 <__cmpsf2>
    4100:	88 23       	and	r24, r24
    4102:	9c f4       	brge	.+38     	; 0x412a <_ZN7Kompass5angleEv+0xd4>
		{
			angle+=360;
    4104:	20 e0       	ldi	r18, 0x00	; 0
    4106:	30 e0       	ldi	r19, 0x00	; 0
    4108:	44 eb       	ldi	r20, 0xB4	; 180
    410a:	53 e4       	ldi	r21, 0x43	; 67
    410c:	c7 01       	movw	r24, r14
    410e:	b6 01       	movw	r22, r12
    4110:	0e 94 a3 24 	call	0x4946	; 0x4946 <__addsf3>
    4114:	6b 01       	movw	r12, r22
    4116:	7c 01       	movw	r14, r24
    4118:	08 c0       	rjmp	.+16     	; 0x412a <_ZN7Kompass5angleEv+0xd4>

double Kompass::angle(){
	double angle=0;
	if (HMC5883L_readHeading())
	{
		angle=-1.0;
    411a:	0f 2e       	mov	r0, r31
    411c:	c1 2c       	mov	r12, r1
    411e:	d1 2c       	mov	r13, r1
    4120:	f0 e8       	ldi	r31, 0x80	; 128
    4122:	ef 2e       	mov	r14, r31
    4124:	ff eb       	ldi	r31, 0xBF	; 191
    4126:	ff 2e       	mov	r15, r31
    4128:	f0 2d       	mov	r31, r0
		{
			angle+=360;
		}
	}
	
	HMC5883L_command(0x02,HMCSIGLEMODE);
    412a:	41 e0       	ldi	r20, 0x01	; 1
    412c:	62 e0       	ldi	r22, 0x02	; 2
    412e:	ce 01       	movw	r24, r28
    4130:	0e 94 28 1f 	call	0x3e50	; 0x3e50 <_ZN7Kompass16HMC5883L_commandEhh>
	return angle;
}
    4134:	c7 01       	movw	r24, r14
    4136:	b6 01       	movw	r22, r12
    4138:	df 91       	pop	r29
    413a:	cf 91       	pop	r28
    413c:	ff 90       	pop	r15
    413e:	ef 90       	pop	r14
    4140:	df 90       	pop	r13
    4142:	cf 90       	pop	r12
    4144:	08 95       	ret

00004146 <_ZN7Kompass25kallibrierung_ruecksetzenEv>:

void Kompass::kallibrierung_ruecksetzen(){
    4146:	fc 01       	movw	r30, r24
	for (uint8_t i=0;i<3;i++)
	{
		max[i]=0;
    4148:	16 86       	std	Z+14, r1	; 0x0e
    414a:	15 86       	std	Z+13, r1	; 0x0d
		min[i]=0;
    414c:	14 8a       	std	Z+20, r1	; 0x14
    414e:	13 8a       	std	Z+19, r1	; 0x13
		offset[i]=0;
    4150:	10 86       	std	Z+8, r1	; 0x08
    4152:	17 82       	std	Z+7, r1	; 0x07
}

void Kompass::kallibrierung_ruecksetzen(){
	for (uint8_t i=0;i<3;i++)
	{
		max[i]=0;
    4154:	10 8a       	std	Z+16, r1	; 0x10
    4156:	17 86       	std	Z+15, r1	; 0x0f
		min[i]=0;
    4158:	16 8a       	std	Z+22, r1	; 0x16
    415a:	15 8a       	std	Z+21, r1	; 0x15
		offset[i]=0;
    415c:	12 86       	std	Z+10, r1	; 0x0a
    415e:	11 86       	std	Z+9, r1	; 0x09
}

void Kompass::kallibrierung_ruecksetzen(){
	for (uint8_t i=0;i<3;i++)
	{
		max[i]=0;
    4160:	12 8a       	std	Z+18, r1	; 0x12
    4162:	11 8a       	std	Z+17, r1	; 0x11
		min[i]=0;
    4164:	10 8e       	std	Z+24, r1	; 0x18
    4166:	17 8a       	std	Z+23, r1	; 0x17
		offset[i]=0;
    4168:	14 86       	std	Z+12, r1	; 0x0c
    416a:	13 86       	std	Z+11, r1	; 0x0b
    416c:	08 95       	ret

0000416e <_ZN6OutputC1Ehh>:
#include "Output.h"

// default constructor
Output::Output(uint8_t Portpraefix, uint8_t Pinnumber)
{
	Pin=Pinnumber;
    416e:	fc 01       	movw	r30, r24
    4170:	41 83       	std	Z+1, r20	; 0x01
	Port=Portpraefix;
    4172:	60 83       	st	Z, r22
	switch (Portpraefix)
    4174:	63 34       	cpi	r22, 0x43	; 67
    4176:	89 f0       	breq	.+34     	; 0x419a <_ZN6OutputC1Ehh+0x2c>
    4178:	64 34       	cpi	r22, 0x44	; 68
    417a:	e1 f0       	breq	.+56     	; 0x41b4 <_ZN6OutputC1Ehh+0x46>
    417c:	62 34       	cpi	r22, 0x42	; 66
    417e:	31 f5       	brne	.+76     	; 0x41cc <_ZN6OutputC1Ehh+0x5e>
	{
	case 'B':
		DDRB |= (1<<Pin);
    4180:	24 b1       	in	r18, 0x04	; 4
    4182:	81 e0       	ldi	r24, 0x01	; 1
    4184:	90 e0       	ldi	r25, 0x00	; 0
    4186:	bc 01       	movw	r22, r24
    4188:	02 c0       	rjmp	.+4      	; 0x418e <_ZN6OutputC1Ehh+0x20>
    418a:	66 0f       	add	r22, r22
    418c:	77 1f       	adc	r23, r23
    418e:	4a 95       	dec	r20
    4190:	e2 f7       	brpl	.-8      	; 0x418a <_ZN6OutputC1Ehh+0x1c>
    4192:	ab 01       	movw	r20, r22
    4194:	42 2b       	or	r20, r18
    4196:	44 b9       	out	0x04, r20	; 4
		break;
    4198:	08 95       	ret
	case 'C':
		DDRC |= (1<<Pin);
    419a:	27 b1       	in	r18, 0x07	; 7
    419c:	81 e0       	ldi	r24, 0x01	; 1
    419e:	90 e0       	ldi	r25, 0x00	; 0
    41a0:	fc 01       	movw	r30, r24
    41a2:	02 c0       	rjmp	.+4      	; 0x41a8 <_ZN6OutputC1Ehh+0x3a>
    41a4:	ee 0f       	add	r30, r30
    41a6:	ff 1f       	adc	r31, r31
    41a8:	4a 95       	dec	r20
    41aa:	e2 f7       	brpl	.-8      	; 0x41a4 <_ZN6OutputC1Ehh+0x36>
    41ac:	af 01       	movw	r20, r30
    41ae:	42 2b       	or	r20, r18
    41b0:	47 b9       	out	0x07, r20	; 7
		break;
    41b2:	08 95       	ret
	case 'D':
		DDRD |= (1<<Pin);
    41b4:	2a b1       	in	r18, 0x0a	; 10
    41b6:	81 e0       	ldi	r24, 0x01	; 1
    41b8:	90 e0       	ldi	r25, 0x00	; 0
    41ba:	bc 01       	movw	r22, r24
    41bc:	02 c0       	rjmp	.+4      	; 0x41c2 <_ZN6OutputC1Ehh+0x54>
    41be:	66 0f       	add	r22, r22
    41c0:	77 1f       	adc	r23, r23
    41c2:	4a 95       	dec	r20
    41c4:	e2 f7       	brpl	.-8      	; 0x41be <_ZN6OutputC1Ehh+0x50>
    41c6:	ab 01       	movw	r20, r22
    41c8:	42 2b       	or	r20, r18
    41ca:	4a b9       	out	0x0a, r20	; 10
    41cc:	08 95       	ret

000041ce <_ZN6OutputD1Ev>:
		break;
	}
} //Output

// default destructor
Output::~Output()
    41ce:	08 95       	ret

000041d0 <_ZN6Output2onEv>:
{
} //~Output

void Output::on(){
	switch (Port)
    41d0:	fc 01       	movw	r30, r24
    41d2:	20 81       	ld	r18, Z
    41d4:	23 34       	cpi	r18, 0x43	; 67
    41d6:	91 f0       	breq	.+36     	; 0x41fc <_ZN6Output2onEv+0x2c>
    41d8:	24 34       	cpi	r18, 0x44	; 68
    41da:	f9 f0       	breq	.+62     	; 0x421a <_ZN6Output2onEv+0x4a>
    41dc:	22 34       	cpi	r18, 0x42	; 66
    41de:	59 f5       	brne	.+86     	; 0x4236 <_ZN6Output2onEv+0x66>
	{
		case 'B':
			PORTB |= (1<<Pin);
    41e0:	45 b1       	in	r20, 0x05	; 5
    41e2:	21 e0       	ldi	r18, 0x01	; 1
    41e4:	30 e0       	ldi	r19, 0x00	; 0
    41e6:	b9 01       	movw	r22, r18
    41e8:	01 80       	ldd	r0, Z+1	; 0x01
    41ea:	02 c0       	rjmp	.+4      	; 0x41f0 <_ZN6Output2onEv+0x20>
    41ec:	66 0f       	add	r22, r22
    41ee:	77 1f       	adc	r23, r23
    41f0:	0a 94       	dec	r0
    41f2:	e2 f7       	brpl	.-8      	; 0x41ec <_ZN6Output2onEv+0x1c>
    41f4:	cb 01       	movw	r24, r22
    41f6:	84 2b       	or	r24, r20
    41f8:	85 b9       	out	0x05, r24	; 5
			break;
    41fa:	08 95       	ret
		case 'C':
			PORTC |= (1<<Pin);
    41fc:	48 b1       	in	r20, 0x08	; 8
    41fe:	21 e0       	ldi	r18, 0x01	; 1
    4200:	30 e0       	ldi	r19, 0x00	; 0
    4202:	b9 01       	movw	r22, r18
    4204:	fc 01       	movw	r30, r24
    4206:	01 80       	ldd	r0, Z+1	; 0x01
    4208:	02 c0       	rjmp	.+4      	; 0x420e <_ZN6Output2onEv+0x3e>
    420a:	66 0f       	add	r22, r22
    420c:	77 1f       	adc	r23, r23
    420e:	0a 94       	dec	r0
    4210:	e2 f7       	brpl	.-8      	; 0x420a <_ZN6Output2onEv+0x3a>
    4212:	cb 01       	movw	r24, r22
    4214:	84 2b       	or	r24, r20
    4216:	88 b9       	out	0x08, r24	; 8
			break;
    4218:	08 95       	ret
		case 'D':
			PORTD |= (1<<Pin);
    421a:	4b b1       	in	r20, 0x0b	; 11
    421c:	21 e0       	ldi	r18, 0x01	; 1
    421e:	30 e0       	ldi	r19, 0x00	; 0
    4220:	b9 01       	movw	r22, r18
    4222:	fc 01       	movw	r30, r24
    4224:	01 80       	ldd	r0, Z+1	; 0x01
    4226:	02 c0       	rjmp	.+4      	; 0x422c <_ZN6Output2onEv+0x5c>
    4228:	66 0f       	add	r22, r22
    422a:	77 1f       	adc	r23, r23
    422c:	0a 94       	dec	r0
    422e:	e2 f7       	brpl	.-8      	; 0x4228 <_ZN6Output2onEv+0x58>
    4230:	cb 01       	movw	r24, r22
    4232:	84 2b       	or	r24, r20
    4234:	8b b9       	out	0x0b, r24	; 11
    4236:	08 95       	ret

00004238 <_ZN6Output4isonEv>:
	}
}

uint8_t Output::ison(){
	uint8_t returnparam=0;
	switch (Port)
    4238:	fc 01       	movw	r30, r24
    423a:	20 81       	ld	r18, Z
    423c:	23 34       	cpi	r18, 0x43	; 67
    423e:	81 f0       	breq	.+32     	; 0x4260 <_ZN6Output4isonEv+0x28>
    4240:	24 34       	cpi	r18, 0x44	; 68
    4242:	d9 f0       	breq	.+54     	; 0x427a <_ZN6Output4isonEv+0x42>
    4244:	22 34       	cpi	r18, 0x42	; 66
    4246:	31 f5       	brne	.+76     	; 0x4294 <_ZN6Output4isonEv+0x5c>
	{
		case 'B':
			if ((PORTB&(1<<Pin)))
    4248:	25 b1       	in	r18, 0x05	; 5
    424a:	30 e0       	ldi	r19, 0x00	; 0
    424c:	a9 01       	movw	r20, r18
    424e:	01 80       	ldd	r0, Z+1	; 0x01
    4250:	02 c0       	rjmp	.+4      	; 0x4256 <_ZN6Output4isonEv+0x1e>
    4252:	55 95       	asr	r21
    4254:	47 95       	ror	r20
    4256:	0a 94       	dec	r0
    4258:	e2 f7       	brpl	.-8      	; 0x4252 <_ZN6Output4isonEv+0x1a>
    425a:	ca 01       	movw	r24, r20
    425c:	81 70       	andi	r24, 0x01	; 1
    425e:	08 95       	ret
			{
				returnparam = 1;
			}
			break;
		case 'C':
			if ((PORTC&(1<<Pin)))
    4260:	28 b1       	in	r18, 0x08	; 8
    4262:	30 e0       	ldi	r19, 0x00	; 0
    4264:	a9 01       	movw	r20, r18
    4266:	fc 01       	movw	r30, r24
    4268:	01 80       	ldd	r0, Z+1	; 0x01
    426a:	02 c0       	rjmp	.+4      	; 0x4270 <_ZN6Output4isonEv+0x38>
    426c:	55 95       	asr	r21
    426e:	47 95       	ror	r20
    4270:	0a 94       	dec	r0
    4272:	e2 f7       	brpl	.-8      	; 0x426c <_ZN6Output4isonEv+0x34>
    4274:	ca 01       	movw	r24, r20
    4276:	81 70       	andi	r24, 0x01	; 1
    4278:	08 95       	ret
			{
				returnparam = 1;
			}
			break;
		case 'D':
			if ((PORTD&(1<<Pin)))
    427a:	2b b1       	in	r18, 0x0b	; 11
    427c:	30 e0       	ldi	r19, 0x00	; 0
    427e:	a9 01       	movw	r20, r18
    4280:	fc 01       	movw	r30, r24
    4282:	01 80       	ldd	r0, Z+1	; 0x01
    4284:	02 c0       	rjmp	.+4      	; 0x428a <_ZN6Output4isonEv+0x52>
    4286:	55 95       	asr	r21
    4288:	47 95       	ror	r20
    428a:	0a 94       	dec	r0
    428c:	e2 f7       	brpl	.-8      	; 0x4286 <_ZN6Output4isonEv+0x4e>
    428e:	ca 01       	movw	r24, r20
    4290:	81 70       	andi	r24, 0x01	; 1
    4292:	08 95       	ret
			{
				returnparam = 1;
			}
			break;
		default:
		returnparam = 2;
    4294:	82 e0       	ldi	r24, 0x02	; 2
			break;
	}
	return returnparam;
}
    4296:	08 95       	ret

00004298 <_ZN6Output3offEv>:

void Output::off(){
	switch (Port)
    4298:	fc 01       	movw	r30, r24
    429a:	20 81       	ld	r18, Z
    429c:	23 34       	cpi	r18, 0x43	; 67
    429e:	99 f0       	breq	.+38     	; 0x42c6 <_ZN6Output3offEv+0x2e>
    42a0:	24 34       	cpi	r18, 0x44	; 68
    42a2:	09 f1       	breq	.+66     	; 0x42e6 <_ZN6Output3offEv+0x4e>
    42a4:	22 34       	cpi	r18, 0x42	; 66
    42a6:	71 f5       	brne	.+92     	; 0x4304 <_ZN6Output3offEv+0x6c>
	{
		case 'B':
			PORTB &= ~(1<<Pin);
    42a8:	45 b1       	in	r20, 0x05	; 5
    42aa:	21 e0       	ldi	r18, 0x01	; 1
    42ac:	30 e0       	ldi	r19, 0x00	; 0
    42ae:	b9 01       	movw	r22, r18
    42b0:	01 80       	ldd	r0, Z+1	; 0x01
    42b2:	02 c0       	rjmp	.+4      	; 0x42b8 <_ZN6Output3offEv+0x20>
    42b4:	66 0f       	add	r22, r22
    42b6:	77 1f       	adc	r23, r23
    42b8:	0a 94       	dec	r0
    42ba:	e2 f7       	brpl	.-8      	; 0x42b4 <_ZN6Output3offEv+0x1c>
    42bc:	cb 01       	movw	r24, r22
    42be:	80 95       	com	r24
    42c0:	84 23       	and	r24, r20
    42c2:	85 b9       	out	0x05, r24	; 5
			break;
    42c4:	08 95       	ret
		case 'C':
			PORTC &= ~(1<<Pin);
    42c6:	48 b1       	in	r20, 0x08	; 8
    42c8:	21 e0       	ldi	r18, 0x01	; 1
    42ca:	30 e0       	ldi	r19, 0x00	; 0
    42cc:	b9 01       	movw	r22, r18
    42ce:	fc 01       	movw	r30, r24
    42d0:	01 80       	ldd	r0, Z+1	; 0x01
    42d2:	02 c0       	rjmp	.+4      	; 0x42d8 <_ZN6Output3offEv+0x40>
    42d4:	66 0f       	add	r22, r22
    42d6:	77 1f       	adc	r23, r23
    42d8:	0a 94       	dec	r0
    42da:	e2 f7       	brpl	.-8      	; 0x42d4 <_ZN6Output3offEv+0x3c>
    42dc:	cb 01       	movw	r24, r22
    42de:	80 95       	com	r24
    42e0:	84 23       	and	r24, r20
    42e2:	88 b9       	out	0x08, r24	; 8
			break;
    42e4:	08 95       	ret
		case 'D':
			PORTD &= ~(1<<Pin);
    42e6:	4b b1       	in	r20, 0x0b	; 11
    42e8:	21 e0       	ldi	r18, 0x01	; 1
    42ea:	30 e0       	ldi	r19, 0x00	; 0
    42ec:	b9 01       	movw	r22, r18
    42ee:	fc 01       	movw	r30, r24
    42f0:	01 80       	ldd	r0, Z+1	; 0x01
    42f2:	02 c0       	rjmp	.+4      	; 0x42f8 <_ZN6Output3offEv+0x60>
    42f4:	66 0f       	add	r22, r22
    42f6:	77 1f       	adc	r23, r23
    42f8:	0a 94       	dec	r0
    42fa:	e2 f7       	brpl	.-8      	; 0x42f4 <_ZN6Output3offEv+0x5c>
    42fc:	cb 01       	movw	r24, r22
    42fe:	80 95       	com	r24
    4300:	84 23       	and	r24, r20
    4302:	8b b9       	out	0x0b, r24	; 11
    4304:	08 95       	ret

00004306 <_ZN6Output6toggleEv>:
			break;
	}
}

void Output::toggle(){
	switch (Port)
    4306:	fc 01       	movw	r30, r24
    4308:	20 81       	ld	r18, Z
    430a:	23 34       	cpi	r18, 0x43	; 67
    430c:	a1 f0       	breq	.+40     	; 0x4336 <_ZN6Output6toggleEv+0x30>
    430e:	24 34       	cpi	r18, 0x44	; 68
    4310:	19 f1       	breq	.+70     	; 0x4358 <_ZN6Output6toggleEv+0x52>
    4312:	22 34       	cpi	r18, 0x42	; 66
    4314:	89 f5       	brne	.+98     	; 0x4378 <_ZN6Output6toggleEv+0x72>
	{
		case 'B':
			if ((PORTB&(1<<Pin)))
    4316:	25 b1       	in	r18, 0x05	; 5
    4318:	30 e0       	ldi	r19, 0x00	; 0
    431a:	01 80       	ldd	r0, Z+1	; 0x01
    431c:	02 c0       	rjmp	.+4      	; 0x4322 <_ZN6Output6toggleEv+0x1c>
    431e:	35 95       	asr	r19
    4320:	27 95       	ror	r18
    4322:	0a 94       	dec	r0
    4324:	e2 f7       	brpl	.-8      	; 0x431e <_ZN6Output6toggleEv+0x18>
    4326:	20 ff       	sbrs	r18, 0
    4328:	03 c0       	rjmp	.+6      	; 0x4330 <_ZN6Output6toggleEv+0x2a>
			{
				off();
    432a:	0e 94 4c 21 	call	0x4298	; 0x4298 <_ZN6Output3offEv>
    432e:	08 95       	ret
			}
			else{
				on();
    4330:	0e 94 e8 20 	call	0x41d0	; 0x41d0 <_ZN6Output2onEv>
    4334:	08 95       	ret
			}
			break;
		case 'C':
			if ((PORTC&(1<<Pin)))
    4336:	28 b1       	in	r18, 0x08	; 8
    4338:	30 e0       	ldi	r19, 0x00	; 0
    433a:	fc 01       	movw	r30, r24
    433c:	01 80       	ldd	r0, Z+1	; 0x01
    433e:	02 c0       	rjmp	.+4      	; 0x4344 <_ZN6Output6toggleEv+0x3e>
    4340:	35 95       	asr	r19
    4342:	27 95       	ror	r18
    4344:	0a 94       	dec	r0
    4346:	e2 f7       	brpl	.-8      	; 0x4340 <_ZN6Output6toggleEv+0x3a>
    4348:	20 ff       	sbrs	r18, 0
    434a:	03 c0       	rjmp	.+6      	; 0x4352 <_ZN6Output6toggleEv+0x4c>
			{
				off();
    434c:	0e 94 4c 21 	call	0x4298	; 0x4298 <_ZN6Output3offEv>
    4350:	08 95       	ret
			}
			else{
				on();
    4352:	0e 94 e8 20 	call	0x41d0	; 0x41d0 <_ZN6Output2onEv>
    4356:	08 95       	ret
			}
			break;
		case 'D':
			if ((PORTD&(1<<Pin)))
    4358:	2b b1       	in	r18, 0x0b	; 11
    435a:	30 e0       	ldi	r19, 0x00	; 0
    435c:	fc 01       	movw	r30, r24
    435e:	01 80       	ldd	r0, Z+1	; 0x01
    4360:	02 c0       	rjmp	.+4      	; 0x4366 <_ZN6Output6toggleEv+0x60>
    4362:	35 95       	asr	r19
    4364:	27 95       	ror	r18
    4366:	0a 94       	dec	r0
    4368:	e2 f7       	brpl	.-8      	; 0x4362 <_ZN6Output6toggleEv+0x5c>
    436a:	20 ff       	sbrs	r18, 0
    436c:	03 c0       	rjmp	.+6      	; 0x4374 <_ZN6Output6toggleEv+0x6e>
			{
				off();
    436e:	0e 94 4c 21 	call	0x4298	; 0x4298 <_ZN6Output3offEv>
    4372:	08 95       	ret
			}
			else{
				on();
    4374:	0e 94 e8 20 	call	0x41d0	; 0x41d0 <_ZN6Output2onEv>
    4378:	08 95       	ret

0000437a <_ZN8PressureD1Ev>:
	Pressure0=1;
	LPS25H_initialize();
} //Pressure

// default destructor
Pressure::~Pressure()
    437a:	0d 96       	adiw	r24, 0x0d	; 13
    437c:	0e 94 2c 1e 	call	0x3c58	; 0x3c58 <_ZN3I2CD1Ev>
    4380:	08 95       	ret

00004382 <_ZN8Pressure14LPS25H_commandEhh>:
{
} //~Pressure

void Pressure::LPS25H_command(uint8_t add, uint8_t command){
    4382:	0f 93       	push	r16
    4384:	1f 93       	push	r17
    4386:	cf 93       	push	r28
    4388:	df 93       	push	r29
    438a:	06 2f       	mov	r16, r22
    438c:	14 2f       	mov	r17, r20
	i2c.twi_start();
    438e:	ec 01       	movw	r28, r24
    4390:	2d 96       	adiw	r28, 0x0d	; 13
    4392:	ce 01       	movw	r24, r28
    4394:	0e 94 2d 1e 	call	0x3c5a	; 0x3c5a <_ZN3I2C9twi_startEv>
	i2c.twi_write(LPS25H_SA1_Write);
    4398:	6a eb       	ldi	r22, 0xBA	; 186
    439a:	ce 01       	movw	r24, r28
    439c:	0e 94 35 1e 	call	0x3c6a	; 0x3c6a <_ZN3I2C9twi_writeEh>
	i2c.twi_write(add);
    43a0:	60 2f       	mov	r22, r16
    43a2:	ce 01       	movw	r24, r28
    43a4:	0e 94 35 1e 	call	0x3c6a	; 0x3c6a <_ZN3I2C9twi_writeEh>
	i2c.twi_write(command);
    43a8:	61 2f       	mov	r22, r17
    43aa:	ce 01       	movw	r24, r28
    43ac:	0e 94 35 1e 	call	0x3c6a	; 0x3c6a <_ZN3I2C9twi_writeEh>
	i2c.twi_stop();
    43b0:	ce 01       	movw	r24, r28
    43b2:	0e 94 31 1e 	call	0x3c62	; 0x3c62 <_ZN3I2C8twi_stopEv>
}
    43b6:	df 91       	pop	r29
    43b8:	cf 91       	pop	r28
    43ba:	1f 91       	pop	r17
    43bc:	0f 91       	pop	r16
    43be:	08 95       	ret

000043c0 <_ZN8Pressure17LPS25H_initializeEv>:

void Pressure::LPS25H_initialize(){
    43c0:	cf 93       	push	r28
    43c2:	df 93       	push	r29
    43c4:	ec 01       	movw	r28, r24
	uint8_t temp=0;
	//internal averages Pressure and Temperature (both 8)
	temp &= ~((1<<AVGT1) | (1<<AVGT0) | (1<<AVGP1) | (1<<AVGP0)); 
	LPS25H_command(RES_CONF,temp);
    43c6:	40 e0       	ldi	r20, 0x00	; 0
    43c8:	60 e1       	ldi	r22, 0x10	; 16
    43ca:	0e 94 c1 21 	call	0x4382	; 0x4382 <_ZN8Pressure14LPS25H_commandEhh>
	temp=0;
	//Enable device and set a single shot as well as Lock while reading
	temp |= (1<<PD) | (1<<BDU) | (1<<ODR1);
	LPS25H_command(CTRL_REG1,temp);
    43ce:	44 ea       	ldi	r20, 0xA4	; 164
    43d0:	60 e2       	ldi	r22, 0x20	; 32
    43d2:	ce 01       	movw	r24, r28
    43d4:	0e 94 c1 21 	call	0x4382	; 0x4382 <_ZN8Pressure14LPS25H_commandEhh>
	temp=0;
	//FIFO on, no watermark no reset, reboot memory content, FIFO MEAN Mode
	temp |= (1<<BOOT) | (1<<FIFO_EN) | (1<<FIFO_MEAN_DEC);
	LPS25H_command(CTRL_REG2,temp);
    43d8:	40 ed       	ldi	r20, 0xD0	; 208
    43da:	61 e2       	ldi	r22, 0x21	; 33
    43dc:	ce 01       	movw	r24, r28
    43de:	0e 94 c1 21 	call	0x4382	; 0x4382 <_ZN8Pressure14LPS25H_commandEhh>
	temp=0;
	//FIFO Controll register for MEAN Mode und 8 moving averages
	temp|=(1<<F_MODE2) | (1<<F_MODE1) | (1<<WTM_POINT0) | (1<<WTM_POINT1) | (1<<WTM_POINT2);
	LPS25H_command(FIFO_CTRL,temp);
    43e2:	47 ec       	ldi	r20, 0xC7	; 199
    43e4:	6e e2       	ldi	r22, 0x2E	; 46
    43e6:	ce 01       	movw	r24, r28
    43e8:	0e 94 c1 21 	call	0x4382	; 0x4382 <_ZN8Pressure14LPS25H_commandEhh>
	//CTRL_REG4 not set
	//INTERRUPT_CFG not set
	//no threshold used
	//no Pressure offset used
	
}
    43ec:	df 91       	pop	r29
    43ee:	cf 91       	pop	r28
    43f0:	08 95       	ret

000043f2 <_ZN8PressureC1Ev>:


#include "Pressure.h"

// default constructor
Pressure::Pressure()
    43f2:	cf 93       	push	r28
    43f4:	df 93       	push	r29
    43f6:	ec 01       	movw	r28, r24
    43f8:	0d 96       	adiw	r24, 0x0d	; 13
    43fa:	0e 94 28 1e 	call	0x3c50	; 0x3c50 <_ZN3I2CC1Ev>
{
	Press = 0;
    43fe:	18 82       	st	Y, r1
    4400:	19 82       	std	Y+1, r1	; 0x01
    4402:	1a 82       	std	Y+2, r1	; 0x02
    4404:	1b 82       	std	Y+3, r1	; 0x03
	Tempera = 0;
    4406:	1c 82       	std	Y+4, r1	; 0x04
    4408:	1d 82       	std	Y+5, r1	; 0x05
    440a:	1e 82       	std	Y+6, r1	; 0x06
    440c:	1f 82       	std	Y+7, r1	; 0x07
	Tempoffset = -4;	//Aus Erfahrung
    440e:	8c ef       	ldi	r24, 0xFC	; 252
    4410:	88 87       	std	Y+8, r24	; 0x08
	Pressure0=1;
    4412:	40 e0       	ldi	r20, 0x00	; 0
    4414:	50 e0       	ldi	r21, 0x00	; 0
    4416:	60 e8       	ldi	r22, 0x80	; 128
    4418:	7f e3       	ldi	r23, 0x3F	; 63
    441a:	49 87       	std	Y+9, r20	; 0x09
    441c:	5a 87       	std	Y+10, r21	; 0x0a
    441e:	6b 87       	std	Y+11, r22	; 0x0b
    4420:	7c 87       	std	Y+12, r23	; 0x0c
	LPS25H_initialize();
    4422:	ce 01       	movw	r24, r28
    4424:	0e 94 e0 21 	call	0x43c0	; 0x43c0 <_ZN8Pressure17LPS25H_initializeEv>
} //Pressure
    4428:	df 91       	pop	r29
    442a:	cf 91       	pop	r28
    442c:	08 95       	ret

0000442e <_ZN8Pressure18READ_Pressure_onceEv>:
	//no threshold used
	//no Pressure offset used
	
}

void Pressure::READ_Pressure_once(){
    442e:	af 92       	push	r10
    4430:	bf 92       	push	r11
    4432:	cf 92       	push	r12
    4434:	df 92       	push	r13
    4436:	ef 92       	push	r14
    4438:	ff 92       	push	r15
    443a:	1f 93       	push	r17
    443c:	cf 93       	push	r28
    443e:	df 93       	push	r29
    4440:	00 d0       	rcall	.+0      	; 0x4442 <_ZN8Pressure18READ_Pressure_onceEv+0x14>
    4442:	1f 92       	push	r1
    4444:	cd b7       	in	r28, 0x3d	; 61
    4446:	de b7       	in	r29, 0x3e	; 62
    4448:	5c 01       	movw	r10, r24
	uint8_t Wertedruck[3];
	cli();
    444a:	f8 94       	cli
	i2c.twi_start();
    444c:	7c 01       	movw	r14, r24
    444e:	8d e0       	ldi	r24, 0x0D	; 13
    4450:	e8 0e       	add	r14, r24
    4452:	f1 1c       	adc	r15, r1
    4454:	c7 01       	movw	r24, r14
    4456:	0e 94 2d 1e 	call	0x3c5a	; 0x3c5a <_ZN3I2C9twi_startEv>
	i2c.twi_write(LPS25H_SA1_Write);
    445a:	6a eb       	ldi	r22, 0xBA	; 186
    445c:	c7 01       	movw	r24, r14
    445e:	0e 94 35 1e 	call	0x3c6a	; 0x3c6a <_ZN3I2C9twi_writeEh>
	i2c.twi_write(PRESS_OUT_XL|(1<<autoincrement));
    4462:	68 ea       	ldi	r22, 0xA8	; 168
    4464:	c7 01       	movw	r24, r14
    4466:	0e 94 35 1e 	call	0x3c6a	; 0x3c6a <_ZN3I2C9twi_writeEh>
	i2c.twi_start();
    446a:	c7 01       	movw	r24, r14
    446c:	0e 94 2d 1e 	call	0x3c5a	; 0x3c5a <_ZN3I2C9twi_startEv>
	i2c.twi_write(LPS25H_SA1_READ);
    4470:	6b eb       	ldi	r22, 0xBB	; 187
    4472:	c7 01       	movw	r24, r14
    4474:	0e 94 35 1e 	call	0x3c6a	; 0x3c6a <_ZN3I2C9twi_writeEh>
    4478:	fe 01       	movw	r30, r28
    447a:	31 96       	adiw	r30, 0x01	; 1
    447c:	6f 01       	movw	r12, r30
	for (uint8_t i=0;i<3;i++)
    447e:	10 e0       	ldi	r17, 0x00	; 0
	{
		if (i<2)
    4480:	12 30       	cpi	r17, 0x02	; 2
    4482:	38 f4       	brcc	.+14     	; 0x4492 <_ZN8Pressure18READ_Pressure_onceEv+0x64>
		{
			Wertedruck[i] = i2c.twi_read(1);
    4484:	61 e0       	ldi	r22, 0x01	; 1
    4486:	c7 01       	movw	r24, r14
    4488:	0e 94 45 1e 	call	0x3c8a	; 0x3c8a <_ZN3I2C8twi_readEh>
    448c:	f6 01       	movw	r30, r12
    448e:	80 83       	st	Z, r24
    4490:	06 c0       	rjmp	.+12     	; 0x449e <_ZN8Pressure18READ_Pressure_onceEv+0x70>
		}
		else{
			Wertedruck[i] = i2c.twi_read(0);
    4492:	60 e0       	ldi	r22, 0x00	; 0
    4494:	c7 01       	movw	r24, r14
    4496:	0e 94 45 1e 	call	0x3c8a	; 0x3c8a <_ZN3I2C8twi_readEh>
    449a:	f6 01       	movw	r30, r12
    449c:	80 83       	st	Z, r24
	i2c.twi_start();
	i2c.twi_write(LPS25H_SA1_Write);
	i2c.twi_write(PRESS_OUT_XL|(1<<autoincrement));
	i2c.twi_start();
	i2c.twi_write(LPS25H_SA1_READ);
	for (uint8_t i=0;i<3;i++)
    449e:	1f 5f       	subi	r17, 0xFF	; 255
    44a0:	ff ef       	ldi	r31, 0xFF	; 255
    44a2:	cf 1a       	sub	r12, r31
    44a4:	df 0a       	sbc	r13, r31
    44a6:	13 30       	cpi	r17, 0x03	; 3
    44a8:	59 f7       	brne	.-42     	; 0x4480 <_ZN8Pressure18READ_Pressure_onceEv+0x52>
		}
		else{
			Wertedruck[i] = i2c.twi_read(0);
		}
	}
	i2c.twi_stop();
    44aa:	c7 01       	movw	r24, r14
    44ac:	0e 94 31 1e 	call	0x3c62	; 0x3c62 <_ZN3I2C8twi_stopEv>
	Press = ((double)Wertedruck[2]*65536);
    44b0:	6b 81       	ldd	r22, Y+3	; 0x03
    44b2:	70 e0       	ldi	r23, 0x00	; 0
    44b4:	80 e0       	ldi	r24, 0x00	; 0
    44b6:	90 e0       	ldi	r25, 0x00	; 0
    44b8:	0e 94 09 26 	call	0x4c12	; 0x4c12 <__floatunsisf>
    44bc:	20 e0       	ldi	r18, 0x00	; 0
    44be:	30 e0       	ldi	r19, 0x00	; 0
    44c0:	40 e8       	ldi	r20, 0x80	; 128
    44c2:	57 e4       	ldi	r21, 0x47	; 71
    44c4:	0e 94 69 27 	call	0x4ed2	; 0x4ed2 <__mulsf3>
    44c8:	6b 01       	movw	r12, r22
    44ca:	7c 01       	movw	r14, r24
	Press += ((double)Wertedruck[1]*256);
    44cc:	6a 81       	ldd	r22, Y+2	; 0x02
    44ce:	70 e0       	ldi	r23, 0x00	; 0
    44d0:	80 e0       	ldi	r24, 0x00	; 0
    44d2:	90 e0       	ldi	r25, 0x00	; 0
    44d4:	0e 94 09 26 	call	0x4c12	; 0x4c12 <__floatunsisf>
    44d8:	20 e0       	ldi	r18, 0x00	; 0
    44da:	30 e0       	ldi	r19, 0x00	; 0
    44dc:	40 e8       	ldi	r20, 0x80	; 128
    44de:	53 e4       	ldi	r21, 0x43	; 67
    44e0:	0e 94 69 27 	call	0x4ed2	; 0x4ed2 <__mulsf3>
    44e4:	9b 01       	movw	r18, r22
    44e6:	ac 01       	movw	r20, r24
    44e8:	c7 01       	movw	r24, r14
    44ea:	b6 01       	movw	r22, r12
    44ec:	0e 94 a3 24 	call	0x4946	; 0x4946 <__addsf3>
    44f0:	6b 01       	movw	r12, r22
    44f2:	7c 01       	movw	r14, r24
	Press += (double)Wertedruck[0];
    44f4:	69 81       	ldd	r22, Y+1	; 0x01
    44f6:	70 e0       	ldi	r23, 0x00	; 0
    44f8:	80 e0       	ldi	r24, 0x00	; 0
    44fa:	90 e0       	ldi	r25, 0x00	; 0
    44fc:	0e 94 09 26 	call	0x4c12	; 0x4c12 <__floatunsisf>
    4500:	9b 01       	movw	r18, r22
    4502:	ac 01       	movw	r20, r24
    4504:	c7 01       	movw	r24, r14
    4506:	b6 01       	movw	r22, r12
    4508:	0e 94 a3 24 	call	0x4946	; 0x4946 <__addsf3>
	//Press = (Wertedruck[0] + (Wertedruck[1]*256) + (Wertedruck[2]*65536));
	Press/=4096.0;
    450c:	20 e0       	ldi	r18, 0x00	; 0
    450e:	30 e0       	ldi	r19, 0x00	; 0
    4510:	40 e8       	ldi	r20, 0x80	; 128
    4512:	59 e3       	ldi	r21, 0x39	; 57
    4514:	0e 94 69 27 	call	0x4ed2	; 0x4ed2 <__mulsf3>
    4518:	f5 01       	movw	r30, r10
    451a:	60 83       	st	Z, r22
    451c:	71 83       	std	Z+1, r23	; 0x01
    451e:	82 83       	std	Z+2, r24	; 0x02
    4520:	93 83       	std	Z+3, r25	; 0x03
	sei();
    4522:	78 94       	sei
}
    4524:	0f 90       	pop	r0
    4526:	0f 90       	pop	r0
    4528:	0f 90       	pop	r0
    452a:	df 91       	pop	r29
    452c:	cf 91       	pop	r28
    452e:	1f 91       	pop	r17
    4530:	ff 90       	pop	r15
    4532:	ef 90       	pop	r14
    4534:	df 90       	pop	r13
    4536:	cf 90       	pop	r12
    4538:	bf 90       	pop	r11
    453a:	af 90       	pop	r10
    453c:	08 95       	ret

0000453e <_ZN8Pressure16READ_TemperatureEv>:

void Pressure::READ_Temperature(){
    453e:	cf 92       	push	r12
    4540:	df 92       	push	r13
    4542:	ef 92       	push	r14
    4544:	ff 92       	push	r15
    4546:	0f 93       	push	r16
    4548:	1f 93       	push	r17
    454a:	cf 93       	push	r28
    454c:	df 93       	push	r29
    454e:	00 d0       	rcall	.+0      	; 0x4550 <_ZN8Pressure16READ_TemperatureEv+0x12>
    4550:	cd b7       	in	r28, 0x3d	; 61
    4552:	de b7       	in	r29, 0x3e	; 62
    4554:	8c 01       	movw	r16, r24
	cli();
    4556:	f8 94       	cli
	uint8_t Wert[2];
	i2c.twi_start();
    4558:	7c 01       	movw	r14, r24
    455a:	8d e0       	ldi	r24, 0x0D	; 13
    455c:	e8 0e       	add	r14, r24
    455e:	f1 1c       	adc	r15, r1
    4560:	c7 01       	movw	r24, r14
    4562:	0e 94 2d 1e 	call	0x3c5a	; 0x3c5a <_ZN3I2C9twi_startEv>
	i2c.twi_write(LPS25H_SA1_Write);
    4566:	6a eb       	ldi	r22, 0xBA	; 186
    4568:	c7 01       	movw	r24, r14
    456a:	0e 94 35 1e 	call	0x3c6a	; 0x3c6a <_ZN3I2C9twi_writeEh>
	i2c.twi_write(TEMP_OUT_L|(1<<autoincrement));
    456e:	6b ea       	ldi	r22, 0xAB	; 171
    4570:	c7 01       	movw	r24, r14
    4572:	0e 94 35 1e 	call	0x3c6a	; 0x3c6a <_ZN3I2C9twi_writeEh>
	i2c.twi_start();
    4576:	c7 01       	movw	r24, r14
    4578:	0e 94 2d 1e 	call	0x3c5a	; 0x3c5a <_ZN3I2C9twi_startEv>
	i2c.twi_write(LPS25H_SA1_READ);
    457c:	6b eb       	ldi	r22, 0xBB	; 187
    457e:	c7 01       	movw	r24, r14
    4580:	0e 94 35 1e 	call	0x3c6a	; 0x3c6a <_ZN3I2C9twi_writeEh>
    4584:	cc 24       	eor	r12, r12
    4586:	c3 94       	inc	r12
    4588:	d1 2c       	mov	r13, r1
    458a:	02 c0       	rjmp	.+4      	; 0x4590 <_ZN8Pressure16READ_TemperatureEv+0x52>
    458c:	d3 94       	inc	r13
    458e:	c3 94       	inc	r12
	for (uint8_t i=0;i<2;i++)
	{
		if (i<1)
    4590:	d1 10       	cpse	r13, r1
    4592:	06 c0       	rjmp	.+12     	; 0x45a0 <_ZN8Pressure16READ_TemperatureEv+0x62>
		{
			Wert[i] = i2c.twi_read(1);
    4594:	61 e0       	ldi	r22, 0x01	; 1
    4596:	c7 01       	movw	r24, r14
    4598:	0e 94 45 1e 	call	0x3c8a	; 0x3c8a <_ZN3I2C8twi_readEh>
    459c:	89 83       	std	Y+1, r24	; 0x01
    459e:	f6 cf       	rjmp	.-20     	; 0x458c <_ZN8Pressure16READ_TemperatureEv+0x4e>
		}
		else{
			Wert[i] = i2c.twi_read(0);
    45a0:	60 e0       	ldi	r22, 0x00	; 0
    45a2:	c7 01       	movw	r24, r14
    45a4:	0e 94 45 1e 	call	0x3c8a	; 0x3c8a <_ZN3I2C8twi_readEh>
    45a8:	e1 e0       	ldi	r30, 0x01	; 1
    45aa:	f0 e0       	ldi	r31, 0x00	; 0
    45ac:	ec 0f       	add	r30, r28
    45ae:	fd 1f       	adc	r31, r29
    45b0:	ed 0d       	add	r30, r13
    45b2:	f1 1d       	adc	r31, r1
    45b4:	80 83       	st	Z, r24
	i2c.twi_start();
	i2c.twi_write(LPS25H_SA1_Write);
	i2c.twi_write(TEMP_OUT_L|(1<<autoincrement));
	i2c.twi_start();
	i2c.twi_write(LPS25H_SA1_READ);
	for (uint8_t i=0;i<2;i++)
    45b6:	e1 e0       	ldi	r30, 0x01	; 1
    45b8:	ec 15       	cp	r30, r12
    45ba:	40 f7       	brcc	.-48     	; 0x458c <_ZN8Pressure16READ_TemperatureEv+0x4e>
		}
		else{
			Wert[i] = i2c.twi_read(0);
		}
	}
	i2c.twi_stop();
    45bc:	c7 01       	movw	r24, r14
    45be:	0e 94 31 1e 	call	0x3c62	; 0x3c62 <_ZN3I2C8twi_stopEv>
	Tempera = ((int16_t)(Wert[0]+(Wert[1]<<8)))/480.0;
    45c2:	89 81       	ldd	r24, Y+1	; 0x01
    45c4:	6a 81       	ldd	r22, Y+2	; 0x02
    45c6:	70 e0       	ldi	r23, 0x00	; 0
    45c8:	76 2f       	mov	r23, r22
    45ca:	66 27       	eor	r22, r22
    45cc:	68 0f       	add	r22, r24
    45ce:	71 1d       	adc	r23, r1
    45d0:	88 27       	eor	r24, r24
    45d2:	77 fd       	sbrc	r23, 7
    45d4:	80 95       	com	r24
    45d6:	98 2f       	mov	r25, r24
    45d8:	0e 94 0b 26 	call	0x4c16	; 0x4c16 <__floatsisf>
    45dc:	20 e0       	ldi	r18, 0x00	; 0
    45de:	30 e0       	ldi	r19, 0x00	; 0
    45e0:	40 ef       	ldi	r20, 0xF0	; 240
    45e2:	53 e4       	ldi	r21, 0x43	; 67
    45e4:	0e 94 70 25 	call	0x4ae0	; 0x4ae0 <__divsf3>
    45e8:	6b 01       	movw	r12, r22
    45ea:	7c 01       	movw	r14, r24
	Tempera+=42.5+Tempoffset;
    45ec:	f8 01       	movw	r30, r16
    45ee:	60 85       	ldd	r22, Z+8	; 0x08
    45f0:	77 27       	eor	r23, r23
    45f2:	67 fd       	sbrc	r22, 7
    45f4:	70 95       	com	r23
    45f6:	87 2f       	mov	r24, r23
    45f8:	97 2f       	mov	r25, r23
    45fa:	0e 94 0b 26 	call	0x4c16	; 0x4c16 <__floatsisf>
    45fe:	20 e0       	ldi	r18, 0x00	; 0
    4600:	30 e0       	ldi	r19, 0x00	; 0
    4602:	4a e2       	ldi	r20, 0x2A	; 42
    4604:	52 e4       	ldi	r21, 0x42	; 66
    4606:	0e 94 a3 24 	call	0x4946	; 0x4946 <__addsf3>
    460a:	9b 01       	movw	r18, r22
    460c:	ac 01       	movw	r20, r24
    460e:	c7 01       	movw	r24, r14
    4610:	b6 01       	movw	r22, r12
    4612:	0e 94 a3 24 	call	0x4946	; 0x4946 <__addsf3>
    4616:	f8 01       	movw	r30, r16
    4618:	64 83       	std	Z+4, r22	; 0x04
    461a:	75 83       	std	Z+5, r23	; 0x05
    461c:	86 83       	std	Z+6, r24	; 0x06
    461e:	97 83       	std	Z+7, r25	; 0x07
	sei();
    4620:	78 94       	sei
}
    4622:	0f 90       	pop	r0
    4624:	0f 90       	pop	r0
    4626:	df 91       	pop	r29
    4628:	cf 91       	pop	r28
    462a:	1f 91       	pop	r17
    462c:	0f 91       	pop	r16
    462e:	ff 90       	pop	r15
    4630:	ef 90       	pop	r14
    4632:	df 90       	pop	r13
    4634:	cf 90       	pop	r12
    4636:	08 95       	ret

00004638 <_ZN8Pressure8altitudeEd>:

double Pressure::altitude(double Pressurevalue){
    4638:	8f 92       	push	r8
    463a:	9f 92       	push	r9
    463c:	af 92       	push	r10
    463e:	bf 92       	push	r11
    4640:	cf 92       	push	r12
    4642:	df 92       	push	r13
    4644:	ef 92       	push	r14
    4646:	ff 92       	push	r15
	return (Pressure0*100*log(Pressure0/Pressurevalue)/(1.2041*9.81));
    4648:	fc 01       	movw	r30, r24
    464a:	c1 84       	ldd	r12, Z+9	; 0x09
    464c:	d2 84       	ldd	r13, Z+10	; 0x0a
    464e:	e3 84       	ldd	r14, Z+11	; 0x0b
    4650:	f4 84       	ldd	r15, Z+12	; 0x0c
    4652:	9a 01       	movw	r18, r20
    4654:	ab 01       	movw	r20, r22
    4656:	c7 01       	movw	r24, r14
    4658:	b6 01       	movw	r22, r12
    465a:	0e 94 70 25 	call	0x4ae0	; 0x4ae0 <__divsf3>
    465e:	0e 94 29 27 	call	0x4e52	; 0x4e52 <log>
    4662:	4b 01       	movw	r8, r22
    4664:	5c 01       	movw	r10, r24
    4666:	20 e0       	ldi	r18, 0x00	; 0
    4668:	30 e0       	ldi	r19, 0x00	; 0
    466a:	48 ec       	ldi	r20, 0xC8	; 200
    466c:	52 e4       	ldi	r21, 0x42	; 66
    466e:	c7 01       	movw	r24, r14
    4670:	b6 01       	movw	r22, r12
    4672:	0e 94 69 27 	call	0x4ed2	; 0x4ed2 <__mulsf3>
    4676:	a5 01       	movw	r20, r10
    4678:	94 01       	movw	r18, r8
    467a:	0e 94 69 27 	call	0x4ed2	; 0x4ed2 <__mulsf3>
    467e:	2c ed       	ldi	r18, 0xDC	; 220
    4680:	3e ef       	ldi	r19, 0xFE	; 254
    4682:	4c e3       	ldi	r20, 0x3C	; 60
    4684:	51 e4       	ldi	r21, 0x41	; 65
    4686:	0e 94 70 25 	call	0x4ae0	; 0x4ae0 <__divsf3>
}
    468a:	ff 90       	pop	r15
    468c:	ef 90       	pop	r14
    468e:	df 90       	pop	r13
    4690:	cf 90       	pop	r12
    4692:	bf 90       	pop	r11
    4694:	af 90       	pop	r10
    4696:	9f 90       	pop	r9
    4698:	8f 90       	pop	r8
    469a:	08 95       	ret

0000469c <_ZN8Pressure13set_Pressure0Ed>:
void Pressure::set_Pressure0(double Pressurevalue){
	Pressure0=Pressurevalue;
    469c:	fc 01       	movw	r30, r24
    469e:	41 87       	std	Z+9, r20	; 0x09
    46a0:	52 87       	std	Z+10, r21	; 0x0a
    46a2:	63 87       	std	Z+11, r22	; 0x0b
    46a4:	74 87       	std	Z+12, r23	; 0x0c
    46a6:	08 95       	ret

000046a8 <_ZN3RTCD1Ev>:
	ausgabezeitneu();
	ausgabedatumneu();
} //RTC

// default destructor
RTC::~RTC()
    46a8:	08 95       	ret

000046aa <_ZN3RTC14ausgabezeitneuEv>:
		}
	}
	ausgabedatumneu();
}

void RTC::ausgabezeitneu(){
    46aa:	fc 01       	movw	r30, r24
	msg_uhr[0]='0'+Stunden/10;
    46ac:	90 89       	ldd	r25, Z+16	; 0x10
    46ae:	8d ec       	ldi	r24, 0xCD	; 205
    46b0:	98 9f       	mul	r25, r24
    46b2:	21 2d       	mov	r18, r1
    46b4:	11 24       	eor	r1, r1
    46b6:	26 95       	lsr	r18
    46b8:	26 95       	lsr	r18
    46ba:	26 95       	lsr	r18
    46bc:	30 e3       	ldi	r19, 0x30	; 48
    46be:	32 0f       	add	r19, r18
    46c0:	30 83       	st	Z, r19
	msg_uhr[1]='0'+Stunden%10;
    46c2:	22 0f       	add	r18, r18
    46c4:	32 2f       	mov	r19, r18
    46c6:	33 0f       	add	r19, r19
    46c8:	33 0f       	add	r19, r19
    46ca:	23 0f       	add	r18, r19
    46cc:	92 1b       	sub	r25, r18
    46ce:	90 5d       	subi	r25, 0xD0	; 208
    46d0:	91 83       	std	Z+1, r25	; 0x01
	msg_uhr[3]='0'+Minuten/10;
    46d2:	91 89       	ldd	r25, Z+17	; 0x11
    46d4:	98 9f       	mul	r25, r24
    46d6:	21 2d       	mov	r18, r1
    46d8:	11 24       	eor	r1, r1
    46da:	26 95       	lsr	r18
    46dc:	26 95       	lsr	r18
    46de:	26 95       	lsr	r18
    46e0:	30 e3       	ldi	r19, 0x30	; 48
    46e2:	32 0f       	add	r19, r18
    46e4:	33 83       	std	Z+3, r19	; 0x03
	msg_uhr[4]='0'+Minuten%10;
    46e6:	22 0f       	add	r18, r18
    46e8:	32 2f       	mov	r19, r18
    46ea:	33 0f       	add	r19, r19
    46ec:	33 0f       	add	r19, r19
    46ee:	23 0f       	add	r18, r19
    46f0:	92 1b       	sub	r25, r18
    46f2:	90 5d       	subi	r25, 0xD0	; 208
    46f4:	94 83       	std	Z+4, r25	; 0x04
	msg_uhr[6]='0'+Sekunden/10;
    46f6:	92 89       	ldd	r25, Z+18	; 0x12
    46f8:	98 9f       	mul	r25, r24
    46fa:	81 2d       	mov	r24, r1
    46fc:	11 24       	eor	r1, r1
    46fe:	86 95       	lsr	r24
    4700:	86 95       	lsr	r24
    4702:	86 95       	lsr	r24
    4704:	20 e3       	ldi	r18, 0x30	; 48
    4706:	28 0f       	add	r18, r24
    4708:	26 83       	std	Z+6, r18	; 0x06
	msg_uhr[7]='0'+Sekunden%10;
    470a:	88 0f       	add	r24, r24
    470c:	28 2f       	mov	r18, r24
    470e:	22 0f       	add	r18, r18
    4710:	22 0f       	add	r18, r18
    4712:	82 0f       	add	r24, r18
    4714:	98 1b       	sub	r25, r24
    4716:	90 5d       	subi	r25, 0xD0	; 208
    4718:	97 83       	std	Z+7, r25	; 0x07
    471a:	08 95       	ret

0000471c <_ZN3RTC15ausgabedatumneuEv>:
}
void RTC::ausgabedatumneu(){
    471c:	fc 01       	movw	r30, r24
	msg_dat[0]='0'+Tag/10;
    471e:	94 89       	ldd	r25, Z+20	; 0x14
    4720:	8d ec       	ldi	r24, 0xCD	; 205
    4722:	98 9f       	mul	r25, r24
    4724:	21 2d       	mov	r18, r1
    4726:	11 24       	eor	r1, r1
    4728:	26 95       	lsr	r18
    472a:	26 95       	lsr	r18
    472c:	26 95       	lsr	r18
    472e:	30 e3       	ldi	r19, 0x30	; 48
    4730:	32 0f       	add	r19, r18
    4732:	30 87       	std	Z+8, r19	; 0x08
	msg_dat[1]='0'+Tag%10;
    4734:	22 0f       	add	r18, r18
    4736:	32 2f       	mov	r19, r18
    4738:	33 0f       	add	r19, r19
    473a:	33 0f       	add	r19, r19
    473c:	23 0f       	add	r18, r19
    473e:	92 1b       	sub	r25, r18
    4740:	90 5d       	subi	r25, 0xD0	; 208
    4742:	91 87       	std	Z+9, r25	; 0x09
	msg_dat[3]='0'+Monat/10;
    4744:	95 89       	ldd	r25, Z+21	; 0x15
    4746:	98 9f       	mul	r25, r24
    4748:	21 2d       	mov	r18, r1
    474a:	11 24       	eor	r1, r1
    474c:	26 95       	lsr	r18
    474e:	26 95       	lsr	r18
    4750:	26 95       	lsr	r18
    4752:	30 e3       	ldi	r19, 0x30	; 48
    4754:	32 0f       	add	r19, r18
    4756:	33 87       	std	Z+11, r19	; 0x0b
	msg_dat[4]='0'+Monat%10;
    4758:	22 0f       	add	r18, r18
    475a:	32 2f       	mov	r19, r18
    475c:	33 0f       	add	r19, r19
    475e:	33 0f       	add	r19, r19
    4760:	23 0f       	add	r18, r19
    4762:	92 1b       	sub	r25, r18
    4764:	90 5d       	subi	r25, 0xD0	; 208
    4766:	94 87       	std	Z+12, r25	; 0x0c
	msg_dat[6]='0'+Jahr/10;
    4768:	96 89       	ldd	r25, Z+22	; 0x16
    476a:	98 9f       	mul	r25, r24
    476c:	81 2d       	mov	r24, r1
    476e:	11 24       	eor	r1, r1
    4770:	86 95       	lsr	r24
    4772:	86 95       	lsr	r24
    4774:	86 95       	lsr	r24
    4776:	20 e3       	ldi	r18, 0x30	; 48
    4778:	28 0f       	add	r18, r24
    477a:	26 87       	std	Z+14, r18	; 0x0e
	msg_dat[7]='0'+Jahr%10;
    477c:	88 0f       	add	r24, r24
    477e:	28 2f       	mov	r18, r24
    4780:	22 0f       	add	r18, r18
    4782:	22 0f       	add	r18, r18
    4784:	82 0f       	add	r24, r18
    4786:	98 1b       	sub	r25, r24
    4788:	90 5d       	subi	r25, 0xD0	; 208
    478a:	97 87       	std	Z+15, r25	; 0x0f
    478c:	08 95       	ret

0000478e <_ZN3RTCC1Ev>:


#include "RTC.h"

// default constructor
RTC::RTC()
    478e:	cf 93       	push	r28
    4790:	df 93       	push	r29
    4792:	ec 01       	movw	r28, r24
{
	Sekunden=0;
    4794:	1a 8a       	std	Y+18, r1	; 0x12
	HundSekunden=0;
    4796:	1b 8a       	std	Y+19, r1	; 0x13
	Minuten=0;
    4798:	19 8a       	std	Y+17, r1	; 0x11
	Stunden=0;
    479a:	18 8a       	std	Y+16, r1	; 0x10
	Tag=0;
    479c:	1c 8a       	std	Y+20, r1	; 0x14
	Monat=0;
    479e:	1d 8a       	std	Y+21, r1	; 0x15
	Jahr=0;
    47a0:	1e 8a       	std	Y+22, r1	; 0x16
    47a2:	fc 01       	movw	r30, r24
	for(uint8_t i=0;i<bitsderrtc;i++){
    47a4:	80 e0       	ldi	r24, 0x00	; 0
		msg_uhr[i]=0;
    47a6:	11 92       	st	Z+, r1
	Minuten=0;
	Stunden=0;
	Tag=0;
	Monat=0;
	Jahr=0;
	for(uint8_t i=0;i<bitsderrtc;i++){
    47a8:	8f 5f       	subi	r24, 0xFF	; 255
    47aa:	88 30       	cpi	r24, 0x08	; 8
    47ac:	e1 f7       	brne	.-8      	; 0x47a6 <_ZN3RTCC1Ev+0x18>
		msg_uhr[i]=0;
	}
	//Einstellungen des Ausgabebuffers
	msg_uhr[2]=':';
    47ae:	8a e3       	ldi	r24, 0x3A	; 58
    47b0:	8a 83       	std	Y+2, r24	; 0x02
	msg_uhr[5]=':';
    47b2:	8d 83       	std	Y+5, r24	; 0x05
	msg_dat[2]='.';
    47b4:	8e e2       	ldi	r24, 0x2E	; 46
    47b6:	8a 87       	std	Y+10, r24	; 0x0a
	msg_dat[5]='.';
    47b8:	8d 87       	std	Y+13, r24	; 0x0d
	ausgabezeitneu();
    47ba:	ce 01       	movw	r24, r28
    47bc:	0e 94 55 23 	call	0x46aa	; 0x46aa <_ZN3RTC14ausgabezeitneuEv>
	ausgabedatumneu();
    47c0:	ce 01       	movw	r24, r28
    47c2:	0e 94 8e 23 	call	0x471c	; 0x471c <_ZN3RTC15ausgabedatumneuEv>
} //RTC
    47c6:	df 91       	pop	r29
    47c8:	cf 91       	pop	r28
    47ca:	08 95       	ret

000047cc <_ZN3RTC8kalenderEv>:
	ausgabezeitneu();
	return 0;
}

void RTC::kalender(){
	if (Monat==4||Monat==6||Monat==9||Monat==11)
    47cc:	fc 01       	movw	r30, r24
    47ce:	25 89       	ldd	r18, Z+21	; 0x15
    47d0:	32 2f       	mov	r19, r18
    47d2:	3d 7f       	andi	r19, 0xFD	; 253
    47d4:	34 30       	cpi	r19, 0x04	; 4
    47d6:	11 f0       	breq	.+4      	; 0x47dc <_ZN3RTC8kalenderEv+0x10>
    47d8:	39 30       	cpi	r19, 0x09	; 9
    47da:	91 f4       	brne	.+36     	; 0x4800 <_ZN3RTC8kalenderEv+0x34>
	{
		if (Tag>=31)
    47dc:	fc 01       	movw	r30, r24
    47de:	34 89       	ldd	r19, Z+20	; 0x14
    47e0:	3f 31       	cpi	r19, 0x1F	; 31
    47e2:	b0 f1       	brcs	.+108    	; 0x4850 <_ZN3RTC8kalenderEv+0x84>
		{
			Tag=1;
    47e4:	31 e0       	ldi	r19, 0x01	; 1
    47e6:	34 8b       	std	Z+20, r19	; 0x14
			Monat++;
    47e8:	2f 5f       	subi	r18, 0xFF	; 255
			if (Monat>=13)
    47ea:	2d 30       	cpi	r18, 0x0D	; 13
    47ec:	10 f4       	brcc	.+4      	; 0x47f2 <_ZN3RTC8kalenderEv+0x26>
	if (Monat==4||Monat==6||Monat==9||Monat==11)
	{
		if (Tag>=31)
		{
			Tag=1;
			Monat++;
    47ee:	25 8b       	std	Z+21, r18	; 0x15
    47f0:	2f c0       	rjmp	.+94     	; 0x4850 <_ZN3RTC8kalenderEv+0x84>
			if (Monat>=13)
			{
				Monat=1;
    47f2:	21 e0       	ldi	r18, 0x01	; 1
    47f4:	fc 01       	movw	r30, r24
    47f6:	25 8b       	std	Z+21, r18	; 0x15
				Jahr++;
    47f8:	26 89       	ldd	r18, Z+22	; 0x16
    47fa:	2f 5f       	subi	r18, 0xFF	; 255
    47fc:	26 8b       	std	Z+22, r18	; 0x16
    47fe:	28 c0       	rjmp	.+80     	; 0x4850 <_ZN3RTC8kalenderEv+0x84>
			}
		}
	}
	else if (Monat==2)
    4800:	22 30       	cpi	r18, 0x02	; 2
    4802:	a9 f4       	brne	.+42     	; 0x482e <_ZN3RTC8kalenderEv+0x62>
	{
		if (Jahr%4==0)
    4804:	fc 01       	movw	r30, r24
    4806:	26 89       	ldd	r18, Z+22	; 0x16
    4808:	23 70       	andi	r18, 0x03	; 3
    480a:	41 f4       	brne	.+16     	; 0x481c <_ZN3RTC8kalenderEv+0x50>
		{
			if (Tag>=30)
    480c:	24 89       	ldd	r18, Z+20	; 0x14
    480e:	2e 31       	cpi	r18, 0x1E	; 30
    4810:	f8 f0       	brcs	.+62     	; 0x4850 <_ZN3RTC8kalenderEv+0x84>
			{
				Tag=1;
    4812:	21 e0       	ldi	r18, 0x01	; 1
    4814:	24 8b       	std	Z+20, r18	; 0x14
				Monat++;
    4816:	23 e0       	ldi	r18, 0x03	; 3
    4818:	25 8b       	std	Z+21, r18	; 0x15
    481a:	1a c0       	rjmp	.+52     	; 0x4850 <_ZN3RTC8kalenderEv+0x84>
					Jahr++;
				}
			}
		}
		else{
			if (Tag>=29)
    481c:	fc 01       	movw	r30, r24
    481e:	24 89       	ldd	r18, Z+20	; 0x14
    4820:	2d 31       	cpi	r18, 0x1D	; 29
    4822:	b0 f0       	brcs	.+44     	; 0x4850 <_ZN3RTC8kalenderEv+0x84>
			{
				Tag=1;
    4824:	21 e0       	ldi	r18, 0x01	; 1
    4826:	24 8b       	std	Z+20, r18	; 0x14
				Monat++;
    4828:	23 e0       	ldi	r18, 0x03	; 3
    482a:	25 8b       	std	Z+21, r18	; 0x15
    482c:	11 c0       	rjmp	.+34     	; 0x4850 <_ZN3RTC8kalenderEv+0x84>
				}
			}
		}
	}
	else{
		if (Tag>=32)
    482e:	fc 01       	movw	r30, r24
    4830:	34 89       	ldd	r19, Z+20	; 0x14
    4832:	30 32       	cpi	r19, 0x20	; 32
    4834:	68 f0       	brcs	.+26     	; 0x4850 <_ZN3RTC8kalenderEv+0x84>
		{
			Tag=1;
    4836:	31 e0       	ldi	r19, 0x01	; 1
    4838:	34 8b       	std	Z+20, r19	; 0x14
			Monat++;
    483a:	2f 5f       	subi	r18, 0xFF	; 255
			if (Monat>=13)
    483c:	2d 30       	cpi	r18, 0x0D	; 13
    483e:	10 f4       	brcc	.+4      	; 0x4844 <_ZN3RTC8kalenderEv+0x78>
	}
	else{
		if (Tag>=32)
		{
			Tag=1;
			Monat++;
    4840:	25 8b       	std	Z+21, r18	; 0x15
    4842:	06 c0       	rjmp	.+12     	; 0x4850 <_ZN3RTC8kalenderEv+0x84>
			if (Monat>=13)
			{
				Monat=1;
    4844:	21 e0       	ldi	r18, 0x01	; 1
    4846:	fc 01       	movw	r30, r24
    4848:	25 8b       	std	Z+21, r18	; 0x15
				Jahr++;
    484a:	26 89       	ldd	r18, Z+22	; 0x16
    484c:	2f 5f       	subi	r18, 0xFF	; 255
    484e:	26 8b       	std	Z+22, r18	; 0x16
			}
		}
	}
	ausgabedatumneu();
    4850:	0e 94 8e 23 	call	0x471c	; 0x471c <_ZN3RTC15ausgabedatumneuEv>
    4854:	08 95       	ret

00004856 <_ZN3RTC4zeitEv>:
	}
	ausgabezeitneu();
	return 0;
}

uint8_t RTC::zeit(){
    4856:	cf 93       	push	r28
    4858:	df 93       	push	r29
    485a:	ec 01       	movw	r28, r24
	//Sekunden++; sitzt im Vektor um Taster besser entprellen zu koennen
	if (Sekunden >= 60 && Sekunden <=200){
    485c:	8a 89       	ldd	r24, Y+18	; 0x12
    485e:	8c 53       	subi	r24, 0x3C	; 60
    4860:	8d 38       	cpi	r24, 0x8D	; 141
    4862:	b8 f4       	brcc	.+46     	; 0x4892 <_ZN3RTC4zeitEv+0x3c>
		Sekunden = 0;
    4864:	1a 8a       	std	Y+18, r1	; 0x12
		Minuten++;
    4866:	89 89       	ldd	r24, Y+17	; 0x11
    4868:	8f 5f       	subi	r24, 0xFF	; 255
    486a:	89 8b       	std	Y+17, r24	; 0x11
		interupts |= (1<<minuteninterupt);
    486c:	9f 89       	ldd	r25, Y+23	; 0x17
    486e:	94 60       	ori	r25, 0x04	; 4
    4870:	9f 8b       	std	Y+23, r25	; 0x17
		if(Minuten >= 60){
    4872:	8c 33       	cpi	r24, 0x3C	; 60
    4874:	20 f0       	brcs	.+8      	; 0x487e <_ZN3RTC4zeitEv+0x28>
			Minuten = 0;
    4876:	19 8a       	std	Y+17, r1	; 0x11
			Stunden++;
    4878:	88 89       	ldd	r24, Y+16	; 0x10
    487a:	8f 5f       	subi	r24, 0xFF	; 255
    487c:	88 8b       	std	Y+16, r24	; 0x10
		}
		if(Stunden >= 24){
    487e:	88 89       	ldd	r24, Y+16	; 0x10
    4880:	88 31       	cpi	r24, 0x18	; 24
    4882:	38 f0       	brcs	.+14     	; 0x4892 <_ZN3RTC4zeitEv+0x3c>
			Stunden = 0;
    4884:	18 8a       	std	Y+16, r1	; 0x10
			Tag++;
    4886:	8c 89       	ldd	r24, Y+20	; 0x14
    4888:	8f 5f       	subi	r24, 0xFF	; 255
    488a:	8c 8b       	std	Y+20, r24	; 0x14
			kalender();
    488c:	ce 01       	movw	r24, r28
    488e:	0e 94 e6 23 	call	0x47cc	; 0x47cc <_ZN3RTC8kalenderEv>
		}
	}
	ausgabezeitneu();
    4892:	ce 01       	movw	r24, r28
    4894:	0e 94 55 23 	call	0x46aa	; 0x46aa <_ZN3RTC14ausgabezeitneuEv>
	return 0;
}
    4898:	80 e0       	ldi	r24, 0x00	; 0
    489a:	df 91       	pop	r29
    489c:	cf 91       	pop	r28
    489e:	08 95       	ret

000048a0 <_ZN3RTC10dummyeinstEv>:
	msg_dat[4]='0'+Monat%10;
	msg_dat[6]='0'+Jahr/10;
	msg_dat[7]='0'+Jahr%10;
}

void RTC::dummyeinst(){
    48a0:	cf 93       	push	r28
    48a2:	df 93       	push	r29
    48a4:	ec 01       	movw	r28, r24
	Stunden=10;
    48a6:	8a e0       	ldi	r24, 0x0A	; 10
    48a8:	88 8b       	std	Y+16, r24	; 0x10
	Minuten=30;
    48aa:	8e e1       	ldi	r24, 0x1E	; 30
    48ac:	89 8b       	std	Y+17, r24	; 0x11
	Tag=7;
    48ae:	87 e0       	ldi	r24, 0x07	; 7
    48b0:	8c 8b       	std	Y+20, r24	; 0x14
	Monat=9;
    48b2:	89 e0       	ldi	r24, 0x09	; 9
    48b4:	8d 8b       	std	Y+21, r24	; 0x15
	Jahr=15;
    48b6:	8f e0       	ldi	r24, 0x0F	; 15
    48b8:	8e 8b       	std	Y+22, r24	; 0x16
	ausgabedatumneu();
    48ba:	ce 01       	movw	r24, r28
    48bc:	0e 94 8e 23 	call	0x471c	; 0x471c <_ZN3RTC15ausgabedatumneuEv>
	ausgabezeitneu();
    48c0:	ce 01       	movw	r24, r28
    48c2:	0e 94 55 23 	call	0x46aa	; 0x46aa <_ZN3RTC14ausgabezeitneuEv>
}
    48c6:	df 91       	pop	r29
    48c8:	cf 91       	pop	r28
    48ca:	08 95       	ret

000048cc <_ZN3RTC8RTCstartEv>:

void RTC::RTCstart(){
    48cc:	fc 01       	movw	r30, r24
	//Einstellungen des Ausgabebuffers
	msg_uhr[0]='0';
    48ce:	80 e3       	ldi	r24, 0x30	; 48
    48d0:	80 83       	st	Z, r24
	msg_uhr[1]='0';
    48d2:	81 83       	std	Z+1, r24	; 0x01
	msg_uhr[2]=':';
    48d4:	9a e3       	ldi	r25, 0x3A	; 58
    48d6:	92 83       	std	Z+2, r25	; 0x02
	msg_uhr[3]='0';
    48d8:	83 83       	std	Z+3, r24	; 0x03
	msg_uhr[4]='0';
    48da:	84 83       	std	Z+4, r24	; 0x04
	msg_uhr[5]=':';
    48dc:	95 83       	std	Z+5, r25	; 0x05
	msg_uhr[6]='0';
    48de:	86 83       	std	Z+6, r24	; 0x06
	msg_uhr[7]='0';
    48e0:	87 83       	std	Z+7, r24	; 0x07
	//Timer2 als 1ms Timer fuer die RTC
	//asynchron mit 32.768 kHz (noch synchrom)
	TCNT2 = TIMER2RTCTIME;
    48e2:	10 92 b2 00 	sts	0x00B2, r1
	ASSR |= (1<<AS2);
    48e6:	e6 eb       	ldi	r30, 0xB6	; 182
    48e8:	f0 e0       	ldi	r31, 0x00	; 0
    48ea:	80 81       	ld	r24, Z
    48ec:	80 62       	ori	r24, 0x20	; 32
    48ee:	80 83       	st	Z, r24
	TIMSK2 = (1<<TOIE2);
    48f0:	81 e0       	ldi	r24, 0x01	; 1
    48f2:	80 93 70 00 	sts	0x0070, r24
	TCCR2B = (1<<CS22) | (1<<CS20);		//Vorteiler 256
    48f6:	85 e0       	ldi	r24, 0x05	; 5
    48f8:	80 93 b1 00 	sts	0x00B1, r24
    48fc:	08 95       	ret

000048fe <_ZN3RTC7RTCstopEv>:
}

void RTC::RTCstop(){
	TCCR2B &= ~((1<<CS22) | (1<<CS21));
    48fe:	e1 eb       	ldi	r30, 0xB1	; 177
    4900:	f0 e0       	ldi	r31, 0x00	; 0
    4902:	80 81       	ld	r24, Z
    4904:	89 7f       	andi	r24, 0xF9	; 249
    4906:	80 83       	st	Z, r24
    4908:	08 95       	ret

0000490a <_ZN3RTC5timerEv>:
}

uint8_t RTC::timer(){
    490a:	fc 01       	movw	r30, r24
	if (Sekunden>60)
    490c:	82 89       	ldd	r24, Z+18	; 0x12
    490e:	8d 33       	cpi	r24, 0x3D	; 61
    4910:	b8 f0       	brcs	.+46     	; 0x4940 <_ZN3RTC5timerEv+0x36>
	{
		Sekunden=59;
    4912:	8b e3       	ldi	r24, 0x3B	; 59
    4914:	82 8b       	std	Z+18, r24	; 0x12
		Minuten--;
    4916:	81 89       	ldd	r24, Z+17	; 0x11
    4918:	81 50       	subi	r24, 0x01	; 1
		if (Minuten>60)
    491a:	8d 33       	cpi	r24, 0x3D	; 61
    491c:	18 f4       	brcc	.+6      	; 0x4924 <_ZN3RTC5timerEv+0x1a>

uint8_t RTC::timer(){
	if (Sekunden>60)
	{
		Sekunden=59;
		Minuten--;
    491e:	81 8b       	std	Z+17, r24	; 0x11
				Sekunden=0;
				return 1;
			}
		}
	}
	return 0;
    4920:	80 e0       	ldi	r24, 0x00	; 0
    4922:	08 95       	ret
	{
		Sekunden=59;
		Minuten--;
		if (Minuten>60)
		{
			Minuten=59;
    4924:	8b e3       	ldi	r24, 0x3B	; 59
    4926:	81 8b       	std	Z+17, r24	; 0x11
			Stunden--;
    4928:	80 89       	ldd	r24, Z+16	; 0x10
    492a:	81 50       	subi	r24, 0x01	; 1
			if (Stunden>24)
    492c:	89 31       	cpi	r24, 0x19	; 25
    492e:	18 f4       	brcc	.+6      	; 0x4936 <_ZN3RTC5timerEv+0x2c>
		Sekunden=59;
		Minuten--;
		if (Minuten>60)
		{
			Minuten=59;
			Stunden--;
    4930:	80 8b       	std	Z+16, r24	; 0x10
				Sekunden=0;
				return 1;
			}
		}
	}
	return 0;
    4932:	80 e0       	ldi	r24, 0x00	; 0
    4934:	08 95       	ret
		{
			Minuten=59;
			Stunden--;
			if (Stunden>24)
			{
				Stunden=0;
    4936:	10 8a       	std	Z+16, r1	; 0x10
				Minuten=0;
    4938:	11 8a       	std	Z+17, r1	; 0x11
				Sekunden=0;
    493a:	12 8a       	std	Z+18, r1	; 0x12
				return 1;
    493c:	81 e0       	ldi	r24, 0x01	; 1
    493e:	08 95       	ret
			}
		}
	}
	return 0;
    4940:	80 e0       	ldi	r24, 0x00	; 0
}
    4942:	08 95       	ret

00004944 <__subsf3>:
    4944:	50 58       	subi	r21, 0x80	; 128

00004946 <__addsf3>:
    4946:	bb 27       	eor	r27, r27
    4948:	aa 27       	eor	r26, r26
    494a:	0e d0       	rcall	.+28     	; 0x4968 <__addsf3x>
    494c:	27 c2       	rjmp	.+1102   	; 0x4d9c <__fp_round>
    494e:	f0 d1       	rcall	.+992    	; 0x4d30 <__fp_pscA>
    4950:	30 f0       	brcs	.+12     	; 0x495e <__addsf3+0x18>
    4952:	f5 d1       	rcall	.+1002   	; 0x4d3e <__fp_pscB>
    4954:	20 f0       	brcs	.+8      	; 0x495e <__addsf3+0x18>
    4956:	31 f4       	brne	.+12     	; 0x4964 <__addsf3+0x1e>
    4958:	9f 3f       	cpi	r25, 0xFF	; 255
    495a:	11 f4       	brne	.+4      	; 0x4960 <__addsf3+0x1a>
    495c:	1e f4       	brtc	.+6      	; 0x4964 <__addsf3+0x1e>
    495e:	c0 c1       	rjmp	.+896    	; 0x4ce0 <__fp_nan>
    4960:	0e f4       	brtc	.+2      	; 0x4964 <__addsf3+0x1e>
    4962:	e0 95       	com	r30
    4964:	e7 fb       	bst	r30, 7
    4966:	b6 c1       	rjmp	.+876    	; 0x4cd4 <__fp_inf>

00004968 <__addsf3x>:
    4968:	e9 2f       	mov	r30, r25
    496a:	3a d2       	rcall	.+1140   	; 0x4de0 <__fp_split3>
    496c:	80 f3       	brcs	.-32     	; 0x494e <__addsf3+0x8>
    496e:	ba 17       	cp	r27, r26
    4970:	62 07       	cpc	r22, r18
    4972:	73 07       	cpc	r23, r19
    4974:	84 07       	cpc	r24, r20
    4976:	95 07       	cpc	r25, r21
    4978:	18 f0       	brcs	.+6      	; 0x4980 <__addsf3x+0x18>
    497a:	71 f4       	brne	.+28     	; 0x4998 <__addsf3x+0x30>
    497c:	9e f5       	brtc	.+102    	; 0x49e4 <__addsf3x+0x7c>
    497e:	52 c2       	rjmp	.+1188   	; 0x4e24 <__fp_zero>
    4980:	0e f4       	brtc	.+2      	; 0x4984 <__addsf3x+0x1c>
    4982:	e0 95       	com	r30
    4984:	0b 2e       	mov	r0, r27
    4986:	ba 2f       	mov	r27, r26
    4988:	a0 2d       	mov	r26, r0
    498a:	0b 01       	movw	r0, r22
    498c:	b9 01       	movw	r22, r18
    498e:	90 01       	movw	r18, r0
    4990:	0c 01       	movw	r0, r24
    4992:	ca 01       	movw	r24, r20
    4994:	a0 01       	movw	r20, r0
    4996:	11 24       	eor	r1, r1
    4998:	ff 27       	eor	r31, r31
    499a:	59 1b       	sub	r21, r25
    499c:	99 f0       	breq	.+38     	; 0x49c4 <__addsf3x+0x5c>
    499e:	59 3f       	cpi	r21, 0xF9	; 249
    49a0:	50 f4       	brcc	.+20     	; 0x49b6 <__addsf3x+0x4e>
    49a2:	50 3e       	cpi	r21, 0xE0	; 224
    49a4:	68 f1       	brcs	.+90     	; 0x4a00 <__addsf3x+0x98>
    49a6:	1a 16       	cp	r1, r26
    49a8:	f0 40       	sbci	r31, 0x00	; 0
    49aa:	a2 2f       	mov	r26, r18
    49ac:	23 2f       	mov	r18, r19
    49ae:	34 2f       	mov	r19, r20
    49b0:	44 27       	eor	r20, r20
    49b2:	58 5f       	subi	r21, 0xF8	; 248
    49b4:	f3 cf       	rjmp	.-26     	; 0x499c <__addsf3x+0x34>
    49b6:	46 95       	lsr	r20
    49b8:	37 95       	ror	r19
    49ba:	27 95       	ror	r18
    49bc:	a7 95       	ror	r26
    49be:	f0 40       	sbci	r31, 0x00	; 0
    49c0:	53 95       	inc	r21
    49c2:	c9 f7       	brne	.-14     	; 0x49b6 <__addsf3x+0x4e>
    49c4:	7e f4       	brtc	.+30     	; 0x49e4 <__addsf3x+0x7c>
    49c6:	1f 16       	cp	r1, r31
    49c8:	ba 0b       	sbc	r27, r26
    49ca:	62 0b       	sbc	r22, r18
    49cc:	73 0b       	sbc	r23, r19
    49ce:	84 0b       	sbc	r24, r20
    49d0:	ba f0       	brmi	.+46     	; 0x4a00 <__addsf3x+0x98>
    49d2:	91 50       	subi	r25, 0x01	; 1
    49d4:	a1 f0       	breq	.+40     	; 0x49fe <__addsf3x+0x96>
    49d6:	ff 0f       	add	r31, r31
    49d8:	bb 1f       	adc	r27, r27
    49da:	66 1f       	adc	r22, r22
    49dc:	77 1f       	adc	r23, r23
    49de:	88 1f       	adc	r24, r24
    49e0:	c2 f7       	brpl	.-16     	; 0x49d2 <__addsf3x+0x6a>
    49e2:	0e c0       	rjmp	.+28     	; 0x4a00 <__addsf3x+0x98>
    49e4:	ba 0f       	add	r27, r26
    49e6:	62 1f       	adc	r22, r18
    49e8:	73 1f       	adc	r23, r19
    49ea:	84 1f       	adc	r24, r20
    49ec:	48 f4       	brcc	.+18     	; 0x4a00 <__addsf3x+0x98>
    49ee:	87 95       	ror	r24
    49f0:	77 95       	ror	r23
    49f2:	67 95       	ror	r22
    49f4:	b7 95       	ror	r27
    49f6:	f7 95       	ror	r31
    49f8:	9e 3f       	cpi	r25, 0xFE	; 254
    49fa:	08 f0       	brcs	.+2      	; 0x49fe <__addsf3x+0x96>
    49fc:	b3 cf       	rjmp	.-154    	; 0x4964 <__addsf3+0x1e>
    49fe:	93 95       	inc	r25
    4a00:	88 0f       	add	r24, r24
    4a02:	08 f0       	brcs	.+2      	; 0x4a06 <__addsf3x+0x9e>
    4a04:	99 27       	eor	r25, r25
    4a06:	ee 0f       	add	r30, r30
    4a08:	97 95       	ror	r25
    4a0a:	87 95       	ror	r24
    4a0c:	08 95       	ret
    4a0e:	90 d1       	rcall	.+800    	; 0x4d30 <__fp_pscA>
    4a10:	58 f0       	brcs	.+22     	; 0x4a28 <__addsf3x+0xc0>
    4a12:	80 e8       	ldi	r24, 0x80	; 128
    4a14:	91 e0       	ldi	r25, 0x01	; 1
    4a16:	09 f4       	brne	.+2      	; 0x4a1a <__addsf3x+0xb2>
    4a18:	9e ef       	ldi	r25, 0xFE	; 254
    4a1a:	91 d1       	rcall	.+802    	; 0x4d3e <__fp_pscB>
    4a1c:	28 f0       	brcs	.+10     	; 0x4a28 <__addsf3x+0xc0>
    4a1e:	40 e8       	ldi	r20, 0x80	; 128
    4a20:	51 e0       	ldi	r21, 0x01	; 1
    4a22:	59 f4       	brne	.+22     	; 0x4a3a <atan2+0xe>
    4a24:	5e ef       	ldi	r21, 0xFE	; 254
    4a26:	09 c0       	rjmp	.+18     	; 0x4a3a <atan2+0xe>
    4a28:	5b c1       	rjmp	.+694    	; 0x4ce0 <__fp_nan>
    4a2a:	fc c1       	rjmp	.+1016   	; 0x4e24 <__fp_zero>

00004a2c <atan2>:
    4a2c:	e9 2f       	mov	r30, r25
    4a2e:	e0 78       	andi	r30, 0x80	; 128
    4a30:	d7 d1       	rcall	.+942    	; 0x4de0 <__fp_split3>
    4a32:	68 f3       	brcs	.-38     	; 0x4a0e <__addsf3x+0xa6>
    4a34:	09 2e       	mov	r0, r25
    4a36:	05 2a       	or	r0, r21
    4a38:	c1 f3       	breq	.-16     	; 0x4a2a <__addsf3x+0xc2>
    4a3a:	26 17       	cp	r18, r22
    4a3c:	37 07       	cpc	r19, r23
    4a3e:	48 07       	cpc	r20, r24
    4a40:	59 07       	cpc	r21, r25
    4a42:	38 f0       	brcs	.+14     	; 0x4a52 <atan2+0x26>
    4a44:	0e 2e       	mov	r0, r30
    4a46:	07 f8       	bld	r0, 7
    4a48:	e0 25       	eor	r30, r0
    4a4a:	69 f0       	breq	.+26     	; 0x4a66 <atan2+0x3a>
    4a4c:	e0 25       	eor	r30, r0
    4a4e:	e0 64       	ori	r30, 0x40	; 64
    4a50:	0a c0       	rjmp	.+20     	; 0x4a66 <atan2+0x3a>
    4a52:	ef 63       	ori	r30, 0x3F	; 63
    4a54:	07 f8       	bld	r0, 7
    4a56:	00 94       	com	r0
    4a58:	07 fa       	bst	r0, 7
    4a5a:	db 01       	movw	r26, r22
    4a5c:	b9 01       	movw	r22, r18
    4a5e:	9d 01       	movw	r18, r26
    4a60:	dc 01       	movw	r26, r24
    4a62:	ca 01       	movw	r24, r20
    4a64:	ad 01       	movw	r20, r26
    4a66:	ef 93       	push	r30
    4a68:	4a d0       	rcall	.+148    	; 0x4afe <__divsf3_pse>
    4a6a:	98 d1       	rcall	.+816    	; 0x4d9c <__fp_round>
    4a6c:	0a d0       	rcall	.+20     	; 0x4a82 <atan>
    4a6e:	5f 91       	pop	r21
    4a70:	55 23       	and	r21, r21
    4a72:	31 f0       	breq	.+12     	; 0x4a80 <atan2+0x54>
    4a74:	2b ed       	ldi	r18, 0xDB	; 219
    4a76:	3f e0       	ldi	r19, 0x0F	; 15
    4a78:	49 e4       	ldi	r20, 0x49	; 73
    4a7a:	50 fd       	sbrc	r21, 0
    4a7c:	49 ec       	ldi	r20, 0xC9	; 201
    4a7e:	63 cf       	rjmp	.-314    	; 0x4946 <__addsf3>
    4a80:	08 95       	ret

00004a82 <atan>:
    4a82:	df 93       	push	r29
    4a84:	dd 27       	eor	r29, r29
    4a86:	b9 2f       	mov	r27, r25
    4a88:	bf 77       	andi	r27, 0x7F	; 127
    4a8a:	40 e8       	ldi	r20, 0x80	; 128
    4a8c:	5f e3       	ldi	r21, 0x3F	; 63
    4a8e:	16 16       	cp	r1, r22
    4a90:	17 06       	cpc	r1, r23
    4a92:	48 07       	cpc	r20, r24
    4a94:	5b 07       	cpc	r21, r27
    4a96:	10 f4       	brcc	.+4      	; 0x4a9c <atan+0x1a>
    4a98:	d9 2f       	mov	r29, r25
    4a9a:	cf d1       	rcall	.+926    	; 0x4e3a <inverse>
    4a9c:	9f 93       	push	r25
    4a9e:	8f 93       	push	r24
    4aa0:	7f 93       	push	r23
    4aa2:	6f 93       	push	r22
    4aa4:	7f d2       	rcall	.+1278   	; 0x4fa4 <square>
    4aa6:	ea e9       	ldi	r30, 0x9A	; 154
    4aa8:	f0 e0       	ldi	r31, 0x00	; 0
    4aaa:	1d d1       	rcall	.+570    	; 0x4ce6 <__fp_powser>
    4aac:	77 d1       	rcall	.+750    	; 0x4d9c <__fp_round>
    4aae:	2f 91       	pop	r18
    4ab0:	3f 91       	pop	r19
    4ab2:	4f 91       	pop	r20
    4ab4:	5f 91       	pop	r21
    4ab6:	19 d2       	rcall	.+1074   	; 0x4eea <__mulsf3x>
    4ab8:	dd 23       	and	r29, r29
    4aba:	49 f0       	breq	.+18     	; 0x4ace <atan+0x4c>
    4abc:	90 58       	subi	r25, 0x80	; 128
    4abe:	a2 ea       	ldi	r26, 0xA2	; 162
    4ac0:	2a ed       	ldi	r18, 0xDA	; 218
    4ac2:	3f e0       	ldi	r19, 0x0F	; 15
    4ac4:	49 ec       	ldi	r20, 0xC9	; 201
    4ac6:	5f e3       	ldi	r21, 0x3F	; 63
    4ac8:	d0 78       	andi	r29, 0x80	; 128
    4aca:	5d 27       	eor	r21, r29
    4acc:	4d df       	rcall	.-358    	; 0x4968 <__addsf3x>
    4ace:	df 91       	pop	r29
    4ad0:	65 c1       	rjmp	.+714    	; 0x4d9c <__fp_round>

00004ad2 <__cmpsf2>:
    4ad2:	dc d0       	rcall	.+440    	; 0x4c8c <__fp_cmp>
    4ad4:	08 f4       	brcc	.+2      	; 0x4ad8 <__cmpsf2+0x6>
    4ad6:	81 e0       	ldi	r24, 0x01	; 1
    4ad8:	08 95       	ret

00004ada <cos>:
    4ada:	39 d1       	rcall	.+626    	; 0x4d4e <__fp_rempio2>
    4adc:	e3 95       	inc	r30
    4ade:	6f c1       	rjmp	.+734    	; 0x4dbe <__fp_sinus>

00004ae0 <__divsf3>:
    4ae0:	0c d0       	rcall	.+24     	; 0x4afa <__divsf3x>
    4ae2:	5c c1       	rjmp	.+696    	; 0x4d9c <__fp_round>
    4ae4:	2c d1       	rcall	.+600    	; 0x4d3e <__fp_pscB>
    4ae6:	40 f0       	brcs	.+16     	; 0x4af8 <__divsf3+0x18>
    4ae8:	23 d1       	rcall	.+582    	; 0x4d30 <__fp_pscA>
    4aea:	30 f0       	brcs	.+12     	; 0x4af8 <__divsf3+0x18>
    4aec:	21 f4       	brne	.+8      	; 0x4af6 <__divsf3+0x16>
    4aee:	5f 3f       	cpi	r21, 0xFF	; 255
    4af0:	19 f0       	breq	.+6      	; 0x4af8 <__divsf3+0x18>
    4af2:	f0 c0       	rjmp	.+480    	; 0x4cd4 <__fp_inf>
    4af4:	51 11       	cpse	r21, r1
    4af6:	97 c1       	rjmp	.+814    	; 0x4e26 <__fp_szero>
    4af8:	f3 c0       	rjmp	.+486    	; 0x4ce0 <__fp_nan>

00004afa <__divsf3x>:
    4afa:	72 d1       	rcall	.+740    	; 0x4de0 <__fp_split3>
    4afc:	98 f3       	brcs	.-26     	; 0x4ae4 <__divsf3+0x4>

00004afe <__divsf3_pse>:
    4afe:	99 23       	and	r25, r25
    4b00:	c9 f3       	breq	.-14     	; 0x4af4 <__divsf3+0x14>
    4b02:	55 23       	and	r21, r21
    4b04:	b1 f3       	breq	.-20     	; 0x4af2 <__divsf3+0x12>
    4b06:	95 1b       	sub	r25, r21
    4b08:	55 0b       	sbc	r21, r21
    4b0a:	bb 27       	eor	r27, r27
    4b0c:	aa 27       	eor	r26, r26
    4b0e:	62 17       	cp	r22, r18
    4b10:	73 07       	cpc	r23, r19
    4b12:	84 07       	cpc	r24, r20
    4b14:	38 f0       	brcs	.+14     	; 0x4b24 <__divsf3_pse+0x26>
    4b16:	9f 5f       	subi	r25, 0xFF	; 255
    4b18:	5f 4f       	sbci	r21, 0xFF	; 255
    4b1a:	22 0f       	add	r18, r18
    4b1c:	33 1f       	adc	r19, r19
    4b1e:	44 1f       	adc	r20, r20
    4b20:	aa 1f       	adc	r26, r26
    4b22:	a9 f3       	breq	.-22     	; 0x4b0e <__divsf3_pse+0x10>
    4b24:	33 d0       	rcall	.+102    	; 0x4b8c <__divsf3_pse+0x8e>
    4b26:	0e 2e       	mov	r0, r30
    4b28:	3a f0       	brmi	.+14     	; 0x4b38 <__divsf3_pse+0x3a>
    4b2a:	e0 e8       	ldi	r30, 0x80	; 128
    4b2c:	30 d0       	rcall	.+96     	; 0x4b8e <__divsf3_pse+0x90>
    4b2e:	91 50       	subi	r25, 0x01	; 1
    4b30:	50 40       	sbci	r21, 0x00	; 0
    4b32:	e6 95       	lsr	r30
    4b34:	00 1c       	adc	r0, r0
    4b36:	ca f7       	brpl	.-14     	; 0x4b2a <__divsf3_pse+0x2c>
    4b38:	29 d0       	rcall	.+82     	; 0x4b8c <__divsf3_pse+0x8e>
    4b3a:	fe 2f       	mov	r31, r30
    4b3c:	27 d0       	rcall	.+78     	; 0x4b8c <__divsf3_pse+0x8e>
    4b3e:	66 0f       	add	r22, r22
    4b40:	77 1f       	adc	r23, r23
    4b42:	88 1f       	adc	r24, r24
    4b44:	bb 1f       	adc	r27, r27
    4b46:	26 17       	cp	r18, r22
    4b48:	37 07       	cpc	r19, r23
    4b4a:	48 07       	cpc	r20, r24
    4b4c:	ab 07       	cpc	r26, r27
    4b4e:	b0 e8       	ldi	r27, 0x80	; 128
    4b50:	09 f0       	breq	.+2      	; 0x4b54 <__divsf3_pse+0x56>
    4b52:	bb 0b       	sbc	r27, r27
    4b54:	80 2d       	mov	r24, r0
    4b56:	bf 01       	movw	r22, r30
    4b58:	ff 27       	eor	r31, r31
    4b5a:	93 58       	subi	r25, 0x83	; 131
    4b5c:	5f 4f       	sbci	r21, 0xFF	; 255
    4b5e:	2a f0       	brmi	.+10     	; 0x4b6a <__divsf3_pse+0x6c>
    4b60:	9e 3f       	cpi	r25, 0xFE	; 254
    4b62:	51 05       	cpc	r21, r1
    4b64:	68 f0       	brcs	.+26     	; 0x4b80 <__divsf3_pse+0x82>
    4b66:	b6 c0       	rjmp	.+364    	; 0x4cd4 <__fp_inf>
    4b68:	5e c1       	rjmp	.+700    	; 0x4e26 <__fp_szero>
    4b6a:	5f 3f       	cpi	r21, 0xFF	; 255
    4b6c:	ec f3       	brlt	.-6      	; 0x4b68 <__divsf3_pse+0x6a>
    4b6e:	98 3e       	cpi	r25, 0xE8	; 232
    4b70:	dc f3       	brlt	.-10     	; 0x4b68 <__divsf3_pse+0x6a>
    4b72:	86 95       	lsr	r24
    4b74:	77 95       	ror	r23
    4b76:	67 95       	ror	r22
    4b78:	b7 95       	ror	r27
    4b7a:	f7 95       	ror	r31
    4b7c:	9f 5f       	subi	r25, 0xFF	; 255
    4b7e:	c9 f7       	brne	.-14     	; 0x4b72 <__divsf3_pse+0x74>
    4b80:	88 0f       	add	r24, r24
    4b82:	91 1d       	adc	r25, r1
    4b84:	96 95       	lsr	r25
    4b86:	87 95       	ror	r24
    4b88:	97 f9       	bld	r25, 7
    4b8a:	08 95       	ret
    4b8c:	e1 e0       	ldi	r30, 0x01	; 1
    4b8e:	66 0f       	add	r22, r22
    4b90:	77 1f       	adc	r23, r23
    4b92:	88 1f       	adc	r24, r24
    4b94:	bb 1f       	adc	r27, r27
    4b96:	62 17       	cp	r22, r18
    4b98:	73 07       	cpc	r23, r19
    4b9a:	84 07       	cpc	r24, r20
    4b9c:	ba 07       	cpc	r27, r26
    4b9e:	20 f0       	brcs	.+8      	; 0x4ba8 <__divsf3_pse+0xaa>
    4ba0:	62 1b       	sub	r22, r18
    4ba2:	73 0b       	sbc	r23, r19
    4ba4:	84 0b       	sbc	r24, r20
    4ba6:	ba 0b       	sbc	r27, r26
    4ba8:	ee 1f       	adc	r30, r30
    4baa:	88 f7       	brcc	.-30     	; 0x4b8e <__divsf3_pse+0x90>
    4bac:	e0 95       	com	r30
    4bae:	08 95       	ret

00004bb0 <__fixsfsi>:
    4bb0:	04 d0       	rcall	.+8      	; 0x4bba <__fixunssfsi>
    4bb2:	68 94       	set
    4bb4:	b1 11       	cpse	r27, r1
    4bb6:	37 c1       	rjmp	.+622    	; 0x4e26 <__fp_szero>
    4bb8:	08 95       	ret

00004bba <__fixunssfsi>:
    4bba:	1a d1       	rcall	.+564    	; 0x4df0 <__fp_splitA>
    4bbc:	88 f0       	brcs	.+34     	; 0x4be0 <__fixunssfsi+0x26>
    4bbe:	9f 57       	subi	r25, 0x7F	; 127
    4bc0:	90 f0       	brcs	.+36     	; 0x4be6 <__fixunssfsi+0x2c>
    4bc2:	b9 2f       	mov	r27, r25
    4bc4:	99 27       	eor	r25, r25
    4bc6:	b7 51       	subi	r27, 0x17	; 23
    4bc8:	a0 f0       	brcs	.+40     	; 0x4bf2 <__fixunssfsi+0x38>
    4bca:	d1 f0       	breq	.+52     	; 0x4c00 <__fixunssfsi+0x46>
    4bcc:	66 0f       	add	r22, r22
    4bce:	77 1f       	adc	r23, r23
    4bd0:	88 1f       	adc	r24, r24
    4bd2:	99 1f       	adc	r25, r25
    4bd4:	1a f0       	brmi	.+6      	; 0x4bdc <__fixunssfsi+0x22>
    4bd6:	ba 95       	dec	r27
    4bd8:	c9 f7       	brne	.-14     	; 0x4bcc <__fixunssfsi+0x12>
    4bda:	12 c0       	rjmp	.+36     	; 0x4c00 <__fixunssfsi+0x46>
    4bdc:	b1 30       	cpi	r27, 0x01	; 1
    4bde:	81 f0       	breq	.+32     	; 0x4c00 <__fixunssfsi+0x46>
    4be0:	21 d1       	rcall	.+578    	; 0x4e24 <__fp_zero>
    4be2:	b1 e0       	ldi	r27, 0x01	; 1
    4be4:	08 95       	ret
    4be6:	1e c1       	rjmp	.+572    	; 0x4e24 <__fp_zero>
    4be8:	67 2f       	mov	r22, r23
    4bea:	78 2f       	mov	r23, r24
    4bec:	88 27       	eor	r24, r24
    4bee:	b8 5f       	subi	r27, 0xF8	; 248
    4bf0:	39 f0       	breq	.+14     	; 0x4c00 <__fixunssfsi+0x46>
    4bf2:	b9 3f       	cpi	r27, 0xF9	; 249
    4bf4:	cc f3       	brlt	.-14     	; 0x4be8 <__fixunssfsi+0x2e>
    4bf6:	86 95       	lsr	r24
    4bf8:	77 95       	ror	r23
    4bfa:	67 95       	ror	r22
    4bfc:	b3 95       	inc	r27
    4bfe:	d9 f7       	brne	.-10     	; 0x4bf6 <__fixunssfsi+0x3c>
    4c00:	3e f4       	brtc	.+14     	; 0x4c10 <__fixunssfsi+0x56>
    4c02:	90 95       	com	r25
    4c04:	80 95       	com	r24
    4c06:	70 95       	com	r23
    4c08:	61 95       	neg	r22
    4c0a:	7f 4f       	sbci	r23, 0xFF	; 255
    4c0c:	8f 4f       	sbci	r24, 0xFF	; 255
    4c0e:	9f 4f       	sbci	r25, 0xFF	; 255
    4c10:	08 95       	ret

00004c12 <__floatunsisf>:
    4c12:	e8 94       	clt
    4c14:	09 c0       	rjmp	.+18     	; 0x4c28 <__floatsisf+0x12>

00004c16 <__floatsisf>:
    4c16:	97 fb       	bst	r25, 7
    4c18:	3e f4       	brtc	.+14     	; 0x4c28 <__floatsisf+0x12>
    4c1a:	90 95       	com	r25
    4c1c:	80 95       	com	r24
    4c1e:	70 95       	com	r23
    4c20:	61 95       	neg	r22
    4c22:	7f 4f       	sbci	r23, 0xFF	; 255
    4c24:	8f 4f       	sbci	r24, 0xFF	; 255
    4c26:	9f 4f       	sbci	r25, 0xFF	; 255
    4c28:	99 23       	and	r25, r25
    4c2a:	a9 f0       	breq	.+42     	; 0x4c56 <__floatsisf+0x40>
    4c2c:	f9 2f       	mov	r31, r25
    4c2e:	96 e9       	ldi	r25, 0x96	; 150
    4c30:	bb 27       	eor	r27, r27
    4c32:	93 95       	inc	r25
    4c34:	f6 95       	lsr	r31
    4c36:	87 95       	ror	r24
    4c38:	77 95       	ror	r23
    4c3a:	67 95       	ror	r22
    4c3c:	b7 95       	ror	r27
    4c3e:	f1 11       	cpse	r31, r1
    4c40:	f8 cf       	rjmp	.-16     	; 0x4c32 <__floatsisf+0x1c>
    4c42:	fa f4       	brpl	.+62     	; 0x4c82 <__floatsisf+0x6c>
    4c44:	bb 0f       	add	r27, r27
    4c46:	11 f4       	brne	.+4      	; 0x4c4c <__floatsisf+0x36>
    4c48:	60 ff       	sbrs	r22, 0
    4c4a:	1b c0       	rjmp	.+54     	; 0x4c82 <__floatsisf+0x6c>
    4c4c:	6f 5f       	subi	r22, 0xFF	; 255
    4c4e:	7f 4f       	sbci	r23, 0xFF	; 255
    4c50:	8f 4f       	sbci	r24, 0xFF	; 255
    4c52:	9f 4f       	sbci	r25, 0xFF	; 255
    4c54:	16 c0       	rjmp	.+44     	; 0x4c82 <__floatsisf+0x6c>
    4c56:	88 23       	and	r24, r24
    4c58:	11 f0       	breq	.+4      	; 0x4c5e <__floatsisf+0x48>
    4c5a:	96 e9       	ldi	r25, 0x96	; 150
    4c5c:	11 c0       	rjmp	.+34     	; 0x4c80 <__floatsisf+0x6a>
    4c5e:	77 23       	and	r23, r23
    4c60:	21 f0       	breq	.+8      	; 0x4c6a <__floatsisf+0x54>
    4c62:	9e e8       	ldi	r25, 0x8E	; 142
    4c64:	87 2f       	mov	r24, r23
    4c66:	76 2f       	mov	r23, r22
    4c68:	05 c0       	rjmp	.+10     	; 0x4c74 <__floatsisf+0x5e>
    4c6a:	66 23       	and	r22, r22
    4c6c:	71 f0       	breq	.+28     	; 0x4c8a <__floatsisf+0x74>
    4c6e:	96 e8       	ldi	r25, 0x86	; 134
    4c70:	86 2f       	mov	r24, r22
    4c72:	70 e0       	ldi	r23, 0x00	; 0
    4c74:	60 e0       	ldi	r22, 0x00	; 0
    4c76:	2a f0       	brmi	.+10     	; 0x4c82 <__floatsisf+0x6c>
    4c78:	9a 95       	dec	r25
    4c7a:	66 0f       	add	r22, r22
    4c7c:	77 1f       	adc	r23, r23
    4c7e:	88 1f       	adc	r24, r24
    4c80:	da f7       	brpl	.-10     	; 0x4c78 <__floatsisf+0x62>
    4c82:	88 0f       	add	r24, r24
    4c84:	96 95       	lsr	r25
    4c86:	87 95       	ror	r24
    4c88:	97 f9       	bld	r25, 7
    4c8a:	08 95       	ret

00004c8c <__fp_cmp>:
    4c8c:	99 0f       	add	r25, r25
    4c8e:	00 08       	sbc	r0, r0
    4c90:	55 0f       	add	r21, r21
    4c92:	aa 0b       	sbc	r26, r26
    4c94:	e0 e8       	ldi	r30, 0x80	; 128
    4c96:	fe ef       	ldi	r31, 0xFE	; 254
    4c98:	16 16       	cp	r1, r22
    4c9a:	17 06       	cpc	r1, r23
    4c9c:	e8 07       	cpc	r30, r24
    4c9e:	f9 07       	cpc	r31, r25
    4ca0:	c0 f0       	brcs	.+48     	; 0x4cd2 <__fp_cmp+0x46>
    4ca2:	12 16       	cp	r1, r18
    4ca4:	13 06       	cpc	r1, r19
    4ca6:	e4 07       	cpc	r30, r20
    4ca8:	f5 07       	cpc	r31, r21
    4caa:	98 f0       	brcs	.+38     	; 0x4cd2 <__fp_cmp+0x46>
    4cac:	62 1b       	sub	r22, r18
    4cae:	73 0b       	sbc	r23, r19
    4cb0:	84 0b       	sbc	r24, r20
    4cb2:	95 0b       	sbc	r25, r21
    4cb4:	39 f4       	brne	.+14     	; 0x4cc4 <__fp_cmp+0x38>
    4cb6:	0a 26       	eor	r0, r26
    4cb8:	61 f0       	breq	.+24     	; 0x4cd2 <__fp_cmp+0x46>
    4cba:	23 2b       	or	r18, r19
    4cbc:	24 2b       	or	r18, r20
    4cbe:	25 2b       	or	r18, r21
    4cc0:	21 f4       	brne	.+8      	; 0x4cca <__fp_cmp+0x3e>
    4cc2:	08 95       	ret
    4cc4:	0a 26       	eor	r0, r26
    4cc6:	09 f4       	brne	.+2      	; 0x4cca <__fp_cmp+0x3e>
    4cc8:	a1 40       	sbci	r26, 0x01	; 1
    4cca:	a6 95       	lsr	r26
    4ccc:	8f ef       	ldi	r24, 0xFF	; 255
    4cce:	81 1d       	adc	r24, r1
    4cd0:	81 1d       	adc	r24, r1
    4cd2:	08 95       	ret

00004cd4 <__fp_inf>:
    4cd4:	97 f9       	bld	r25, 7
    4cd6:	9f 67       	ori	r25, 0x7F	; 127
    4cd8:	80 e8       	ldi	r24, 0x80	; 128
    4cda:	70 e0       	ldi	r23, 0x00	; 0
    4cdc:	60 e0       	ldi	r22, 0x00	; 0
    4cde:	08 95       	ret

00004ce0 <__fp_nan>:
    4ce0:	9f ef       	ldi	r25, 0xFF	; 255
    4ce2:	80 ec       	ldi	r24, 0xC0	; 192
    4ce4:	08 95       	ret

00004ce6 <__fp_powser>:
    4ce6:	df 93       	push	r29
    4ce8:	cf 93       	push	r28
    4cea:	1f 93       	push	r17
    4cec:	0f 93       	push	r16
    4cee:	ff 92       	push	r15
    4cf0:	ef 92       	push	r14
    4cf2:	df 92       	push	r13
    4cf4:	7b 01       	movw	r14, r22
    4cf6:	8c 01       	movw	r16, r24
    4cf8:	68 94       	set
    4cfa:	05 c0       	rjmp	.+10     	; 0x4d06 <__fp_powser+0x20>
    4cfc:	da 2e       	mov	r13, r26
    4cfe:	ef 01       	movw	r28, r30
    4d00:	f4 d0       	rcall	.+488    	; 0x4eea <__mulsf3x>
    4d02:	fe 01       	movw	r30, r28
    4d04:	e8 94       	clt
    4d06:	a5 91       	lpm	r26, Z+
    4d08:	25 91       	lpm	r18, Z+
    4d0a:	35 91       	lpm	r19, Z+
    4d0c:	45 91       	lpm	r20, Z+
    4d0e:	55 91       	lpm	r21, Z+
    4d10:	ae f3       	brts	.-22     	; 0x4cfc <__fp_powser+0x16>
    4d12:	ef 01       	movw	r28, r30
    4d14:	29 de       	rcall	.-942    	; 0x4968 <__addsf3x>
    4d16:	fe 01       	movw	r30, r28
    4d18:	97 01       	movw	r18, r14
    4d1a:	a8 01       	movw	r20, r16
    4d1c:	da 94       	dec	r13
    4d1e:	79 f7       	brne	.-34     	; 0x4cfe <__fp_powser+0x18>
    4d20:	df 90       	pop	r13
    4d22:	ef 90       	pop	r14
    4d24:	ff 90       	pop	r15
    4d26:	0f 91       	pop	r16
    4d28:	1f 91       	pop	r17
    4d2a:	cf 91       	pop	r28
    4d2c:	df 91       	pop	r29
    4d2e:	08 95       	ret

00004d30 <__fp_pscA>:
    4d30:	00 24       	eor	r0, r0
    4d32:	0a 94       	dec	r0
    4d34:	16 16       	cp	r1, r22
    4d36:	17 06       	cpc	r1, r23
    4d38:	18 06       	cpc	r1, r24
    4d3a:	09 06       	cpc	r0, r25
    4d3c:	08 95       	ret

00004d3e <__fp_pscB>:
    4d3e:	00 24       	eor	r0, r0
    4d40:	0a 94       	dec	r0
    4d42:	12 16       	cp	r1, r18
    4d44:	13 06       	cpc	r1, r19
    4d46:	14 06       	cpc	r1, r20
    4d48:	05 06       	cpc	r0, r21
    4d4a:	08 95       	ret
    4d4c:	c9 cf       	rjmp	.-110    	; 0x4ce0 <__fp_nan>

00004d4e <__fp_rempio2>:
    4d4e:	50 d0       	rcall	.+160    	; 0x4df0 <__fp_splitA>
    4d50:	e8 f3       	brcs	.-6      	; 0x4d4c <__fp_pscB+0xe>
    4d52:	e8 94       	clt
    4d54:	e0 e0       	ldi	r30, 0x00	; 0
    4d56:	bb 27       	eor	r27, r27
    4d58:	9f 57       	subi	r25, 0x7F	; 127
    4d5a:	f0 f0       	brcs	.+60     	; 0x4d98 <__fp_rempio2+0x4a>
    4d5c:	2a ed       	ldi	r18, 0xDA	; 218
    4d5e:	3f e0       	ldi	r19, 0x0F	; 15
    4d60:	49 ec       	ldi	r20, 0xC9	; 201
    4d62:	06 c0       	rjmp	.+12     	; 0x4d70 <__fp_rempio2+0x22>
    4d64:	ee 0f       	add	r30, r30
    4d66:	bb 0f       	add	r27, r27
    4d68:	66 1f       	adc	r22, r22
    4d6a:	77 1f       	adc	r23, r23
    4d6c:	88 1f       	adc	r24, r24
    4d6e:	28 f0       	brcs	.+10     	; 0x4d7a <__fp_rempio2+0x2c>
    4d70:	b2 3a       	cpi	r27, 0xA2	; 162
    4d72:	62 07       	cpc	r22, r18
    4d74:	73 07       	cpc	r23, r19
    4d76:	84 07       	cpc	r24, r20
    4d78:	28 f0       	brcs	.+10     	; 0x4d84 <__fp_rempio2+0x36>
    4d7a:	b2 5a       	subi	r27, 0xA2	; 162
    4d7c:	62 0b       	sbc	r22, r18
    4d7e:	73 0b       	sbc	r23, r19
    4d80:	84 0b       	sbc	r24, r20
    4d82:	e3 95       	inc	r30
    4d84:	9a 95       	dec	r25
    4d86:	72 f7       	brpl	.-36     	; 0x4d64 <__fp_rempio2+0x16>
    4d88:	80 38       	cpi	r24, 0x80	; 128
    4d8a:	30 f4       	brcc	.+12     	; 0x4d98 <__fp_rempio2+0x4a>
    4d8c:	9a 95       	dec	r25
    4d8e:	bb 0f       	add	r27, r27
    4d90:	66 1f       	adc	r22, r22
    4d92:	77 1f       	adc	r23, r23
    4d94:	88 1f       	adc	r24, r24
    4d96:	d2 f7       	brpl	.-12     	; 0x4d8c <__fp_rempio2+0x3e>
    4d98:	90 48       	sbci	r25, 0x80	; 128
    4d9a:	29 c1       	rjmp	.+594    	; 0x4fee <__fp_mpack_finite>

00004d9c <__fp_round>:
    4d9c:	09 2e       	mov	r0, r25
    4d9e:	03 94       	inc	r0
    4da0:	00 0c       	add	r0, r0
    4da2:	11 f4       	brne	.+4      	; 0x4da8 <__fp_round+0xc>
    4da4:	88 23       	and	r24, r24
    4da6:	52 f0       	brmi	.+20     	; 0x4dbc <__fp_round+0x20>
    4da8:	bb 0f       	add	r27, r27
    4daa:	40 f4       	brcc	.+16     	; 0x4dbc <__fp_round+0x20>
    4dac:	bf 2b       	or	r27, r31
    4dae:	11 f4       	brne	.+4      	; 0x4db4 <__fp_round+0x18>
    4db0:	60 ff       	sbrs	r22, 0
    4db2:	04 c0       	rjmp	.+8      	; 0x4dbc <__fp_round+0x20>
    4db4:	6f 5f       	subi	r22, 0xFF	; 255
    4db6:	7f 4f       	sbci	r23, 0xFF	; 255
    4db8:	8f 4f       	sbci	r24, 0xFF	; 255
    4dba:	9f 4f       	sbci	r25, 0xFF	; 255
    4dbc:	08 95       	ret

00004dbe <__fp_sinus>:
    4dbe:	ef 93       	push	r30
    4dc0:	e0 ff       	sbrs	r30, 0
    4dc2:	06 c0       	rjmp	.+12     	; 0x4dd0 <__fp_sinus+0x12>
    4dc4:	a2 ea       	ldi	r26, 0xA2	; 162
    4dc6:	2a ed       	ldi	r18, 0xDA	; 218
    4dc8:	3f e0       	ldi	r19, 0x0F	; 15
    4dca:	49 ec       	ldi	r20, 0xC9	; 201
    4dcc:	5f eb       	ldi	r21, 0xBF	; 191
    4dce:	cc dd       	rcall	.-1128   	; 0x4968 <__addsf3x>
    4dd0:	e5 df       	rcall	.-54     	; 0x4d9c <__fp_round>
    4dd2:	0f 90       	pop	r0
    4dd4:	03 94       	inc	r0
    4dd6:	01 fc       	sbrc	r0, 1
    4dd8:	90 58       	subi	r25, 0x80	; 128
    4dda:	e7 ec       	ldi	r30, 0xC7	; 199
    4ddc:	f0 e0       	ldi	r31, 0x00	; 0
    4dde:	13 c1       	rjmp	.+550    	; 0x5006 <__fp_powsodd>

00004de0 <__fp_split3>:
    4de0:	57 fd       	sbrc	r21, 7
    4de2:	90 58       	subi	r25, 0x80	; 128
    4de4:	44 0f       	add	r20, r20
    4de6:	55 1f       	adc	r21, r21
    4de8:	59 f0       	breq	.+22     	; 0x4e00 <__fp_splitA+0x10>
    4dea:	5f 3f       	cpi	r21, 0xFF	; 255
    4dec:	71 f0       	breq	.+28     	; 0x4e0a <__fp_splitA+0x1a>
    4dee:	47 95       	ror	r20

00004df0 <__fp_splitA>:
    4df0:	88 0f       	add	r24, r24
    4df2:	97 fb       	bst	r25, 7
    4df4:	99 1f       	adc	r25, r25
    4df6:	61 f0       	breq	.+24     	; 0x4e10 <__fp_splitA+0x20>
    4df8:	9f 3f       	cpi	r25, 0xFF	; 255
    4dfa:	79 f0       	breq	.+30     	; 0x4e1a <__fp_splitA+0x2a>
    4dfc:	87 95       	ror	r24
    4dfe:	08 95       	ret
    4e00:	12 16       	cp	r1, r18
    4e02:	13 06       	cpc	r1, r19
    4e04:	14 06       	cpc	r1, r20
    4e06:	55 1f       	adc	r21, r21
    4e08:	f2 cf       	rjmp	.-28     	; 0x4dee <__fp_split3+0xe>
    4e0a:	46 95       	lsr	r20
    4e0c:	f1 df       	rcall	.-30     	; 0x4df0 <__fp_splitA>
    4e0e:	08 c0       	rjmp	.+16     	; 0x4e20 <__fp_splitA+0x30>
    4e10:	16 16       	cp	r1, r22
    4e12:	17 06       	cpc	r1, r23
    4e14:	18 06       	cpc	r1, r24
    4e16:	99 1f       	adc	r25, r25
    4e18:	f1 cf       	rjmp	.-30     	; 0x4dfc <__fp_splitA+0xc>
    4e1a:	86 95       	lsr	r24
    4e1c:	71 05       	cpc	r23, r1
    4e1e:	61 05       	cpc	r22, r1
    4e20:	08 94       	sec
    4e22:	08 95       	ret

00004e24 <__fp_zero>:
    4e24:	e8 94       	clt

00004e26 <__fp_szero>:
    4e26:	bb 27       	eor	r27, r27
    4e28:	66 27       	eor	r22, r22
    4e2a:	77 27       	eor	r23, r23
    4e2c:	cb 01       	movw	r24, r22
    4e2e:	97 f9       	bld	r25, 7
    4e30:	08 95       	ret

00004e32 <__gesf2>:
    4e32:	2c df       	rcall	.-424    	; 0x4c8c <__fp_cmp>
    4e34:	08 f4       	brcc	.+2      	; 0x4e38 <__gesf2+0x6>
    4e36:	8f ef       	ldi	r24, 0xFF	; 255
    4e38:	08 95       	ret

00004e3a <inverse>:
    4e3a:	9b 01       	movw	r18, r22
    4e3c:	ac 01       	movw	r20, r24
    4e3e:	60 e0       	ldi	r22, 0x00	; 0
    4e40:	70 e0       	ldi	r23, 0x00	; 0
    4e42:	80 e8       	ldi	r24, 0x80	; 128
    4e44:	9f e3       	ldi	r25, 0x3F	; 63
    4e46:	4c ce       	rjmp	.-872    	; 0x4ae0 <__divsf3>
    4e48:	0e f0       	brts	.+2      	; 0x4e4c <inverse+0x12>
    4e4a:	cf c0       	rjmp	.+414    	; 0x4fea <__fp_mpack>
    4e4c:	49 cf       	rjmp	.-366    	; 0x4ce0 <__fp_nan>
    4e4e:	68 94       	set
    4e50:	41 cf       	rjmp	.-382    	; 0x4cd4 <__fp_inf>

00004e52 <log>:
    4e52:	ce df       	rcall	.-100    	; 0x4df0 <__fp_splitA>
    4e54:	c8 f3       	brcs	.-14     	; 0x4e48 <inverse+0xe>
    4e56:	99 23       	and	r25, r25
    4e58:	d1 f3       	breq	.-12     	; 0x4e4e <inverse+0x14>
    4e5a:	c6 f3       	brts	.-16     	; 0x4e4c <inverse+0x12>
    4e5c:	df 93       	push	r29
    4e5e:	cf 93       	push	r28
    4e60:	1f 93       	push	r17
    4e62:	0f 93       	push	r16
    4e64:	ff 92       	push	r15
    4e66:	c9 2f       	mov	r28, r25
    4e68:	dd 27       	eor	r29, r29
    4e6a:	88 23       	and	r24, r24
    4e6c:	2a f0       	brmi	.+10     	; 0x4e78 <log+0x26>
    4e6e:	21 97       	sbiw	r28, 0x01	; 1
    4e70:	66 0f       	add	r22, r22
    4e72:	77 1f       	adc	r23, r23
    4e74:	88 1f       	adc	r24, r24
    4e76:	da f7       	brpl	.-10     	; 0x4e6e <log+0x1c>
    4e78:	20 e0       	ldi	r18, 0x00	; 0
    4e7a:	30 e0       	ldi	r19, 0x00	; 0
    4e7c:	40 e8       	ldi	r20, 0x80	; 128
    4e7e:	5f eb       	ldi	r21, 0xBF	; 191
    4e80:	9f e3       	ldi	r25, 0x3F	; 63
    4e82:	88 39       	cpi	r24, 0x98	; 152
    4e84:	20 f0       	brcs	.+8      	; 0x4e8e <log+0x3c>
    4e86:	80 3e       	cpi	r24, 0xE0	; 224
    4e88:	30 f0       	brcs	.+12     	; 0x4e96 <log+0x44>
    4e8a:	21 96       	adiw	r28, 0x01	; 1
    4e8c:	8f 77       	andi	r24, 0x7F	; 127
    4e8e:	5b dd       	rcall	.-1354   	; 0x4946 <__addsf3>
    4e90:	e5 ee       	ldi	r30, 0xE5	; 229
    4e92:	f0 e0       	ldi	r31, 0x00	; 0
    4e94:	03 c0       	rjmp	.+6      	; 0x4e9c <log+0x4a>
    4e96:	57 dd       	rcall	.-1362   	; 0x4946 <__addsf3>
    4e98:	e2 e1       	ldi	r30, 0x12	; 18
    4e9a:	f1 e0       	ldi	r31, 0x01	; 1
    4e9c:	24 df       	rcall	.-440    	; 0x4ce6 <__fp_powser>
    4e9e:	8b 01       	movw	r16, r22
    4ea0:	be 01       	movw	r22, r28
    4ea2:	ec 01       	movw	r28, r24
    4ea4:	fb 2e       	mov	r15, r27
    4ea6:	6f 57       	subi	r22, 0x7F	; 127
    4ea8:	71 09       	sbc	r23, r1
    4eaa:	75 95       	asr	r23
    4eac:	77 1f       	adc	r23, r23
    4eae:	88 0b       	sbc	r24, r24
    4eb0:	99 0b       	sbc	r25, r25
    4eb2:	b1 de       	rcall	.-670    	; 0x4c16 <__floatsisf>
    4eb4:	28 e1       	ldi	r18, 0x18	; 24
    4eb6:	32 e7       	ldi	r19, 0x72	; 114
    4eb8:	41 e3       	ldi	r20, 0x31	; 49
    4eba:	5f e3       	ldi	r21, 0x3F	; 63
    4ebc:	16 d0       	rcall	.+44     	; 0x4eea <__mulsf3x>
    4ebe:	af 2d       	mov	r26, r15
    4ec0:	98 01       	movw	r18, r16
    4ec2:	ae 01       	movw	r20, r28
    4ec4:	ff 90       	pop	r15
    4ec6:	0f 91       	pop	r16
    4ec8:	1f 91       	pop	r17
    4eca:	cf 91       	pop	r28
    4ecc:	df 91       	pop	r29
    4ece:	4c dd       	rcall	.-1384   	; 0x4968 <__addsf3x>
    4ed0:	65 cf       	rjmp	.-310    	; 0x4d9c <__fp_round>

00004ed2 <__mulsf3>:
    4ed2:	0b d0       	rcall	.+22     	; 0x4eea <__mulsf3x>
    4ed4:	63 cf       	rjmp	.-314    	; 0x4d9c <__fp_round>
    4ed6:	2c df       	rcall	.-424    	; 0x4d30 <__fp_pscA>
    4ed8:	28 f0       	brcs	.+10     	; 0x4ee4 <__mulsf3+0x12>
    4eda:	31 df       	rcall	.-414    	; 0x4d3e <__fp_pscB>
    4edc:	18 f0       	brcs	.+6      	; 0x4ee4 <__mulsf3+0x12>
    4ede:	95 23       	and	r25, r21
    4ee0:	09 f0       	breq	.+2      	; 0x4ee4 <__mulsf3+0x12>
    4ee2:	f8 ce       	rjmp	.-528    	; 0x4cd4 <__fp_inf>
    4ee4:	fd ce       	rjmp	.-518    	; 0x4ce0 <__fp_nan>
    4ee6:	11 24       	eor	r1, r1
    4ee8:	9e cf       	rjmp	.-196    	; 0x4e26 <__fp_szero>

00004eea <__mulsf3x>:
    4eea:	7a df       	rcall	.-268    	; 0x4de0 <__fp_split3>
    4eec:	a0 f3       	brcs	.-24     	; 0x4ed6 <__mulsf3+0x4>

00004eee <__mulsf3_pse>:
    4eee:	95 9f       	mul	r25, r21
    4ef0:	d1 f3       	breq	.-12     	; 0x4ee6 <__mulsf3+0x14>
    4ef2:	95 0f       	add	r25, r21
    4ef4:	50 e0       	ldi	r21, 0x00	; 0
    4ef6:	55 1f       	adc	r21, r21
    4ef8:	62 9f       	mul	r22, r18
    4efa:	f0 01       	movw	r30, r0
    4efc:	72 9f       	mul	r23, r18
    4efe:	bb 27       	eor	r27, r27
    4f00:	f0 0d       	add	r31, r0
    4f02:	b1 1d       	adc	r27, r1
    4f04:	63 9f       	mul	r22, r19
    4f06:	aa 27       	eor	r26, r26
    4f08:	f0 0d       	add	r31, r0
    4f0a:	b1 1d       	adc	r27, r1
    4f0c:	aa 1f       	adc	r26, r26
    4f0e:	64 9f       	mul	r22, r20
    4f10:	66 27       	eor	r22, r22
    4f12:	b0 0d       	add	r27, r0
    4f14:	a1 1d       	adc	r26, r1
    4f16:	66 1f       	adc	r22, r22
    4f18:	82 9f       	mul	r24, r18
    4f1a:	22 27       	eor	r18, r18
    4f1c:	b0 0d       	add	r27, r0
    4f1e:	a1 1d       	adc	r26, r1
    4f20:	62 1f       	adc	r22, r18
    4f22:	73 9f       	mul	r23, r19
    4f24:	b0 0d       	add	r27, r0
    4f26:	a1 1d       	adc	r26, r1
    4f28:	62 1f       	adc	r22, r18
    4f2a:	83 9f       	mul	r24, r19
    4f2c:	a0 0d       	add	r26, r0
    4f2e:	61 1d       	adc	r22, r1
    4f30:	22 1f       	adc	r18, r18
    4f32:	74 9f       	mul	r23, r20
    4f34:	33 27       	eor	r19, r19
    4f36:	a0 0d       	add	r26, r0
    4f38:	61 1d       	adc	r22, r1
    4f3a:	23 1f       	adc	r18, r19
    4f3c:	84 9f       	mul	r24, r20
    4f3e:	60 0d       	add	r22, r0
    4f40:	21 1d       	adc	r18, r1
    4f42:	82 2f       	mov	r24, r18
    4f44:	76 2f       	mov	r23, r22
    4f46:	6a 2f       	mov	r22, r26
    4f48:	11 24       	eor	r1, r1
    4f4a:	9f 57       	subi	r25, 0x7F	; 127
    4f4c:	50 40       	sbci	r21, 0x00	; 0
    4f4e:	8a f0       	brmi	.+34     	; 0x4f72 <__mulsf3_pse+0x84>
    4f50:	e1 f0       	breq	.+56     	; 0x4f8a <__mulsf3_pse+0x9c>
    4f52:	88 23       	and	r24, r24
    4f54:	4a f0       	brmi	.+18     	; 0x4f68 <__mulsf3_pse+0x7a>
    4f56:	ee 0f       	add	r30, r30
    4f58:	ff 1f       	adc	r31, r31
    4f5a:	bb 1f       	adc	r27, r27
    4f5c:	66 1f       	adc	r22, r22
    4f5e:	77 1f       	adc	r23, r23
    4f60:	88 1f       	adc	r24, r24
    4f62:	91 50       	subi	r25, 0x01	; 1
    4f64:	50 40       	sbci	r21, 0x00	; 0
    4f66:	a9 f7       	brne	.-22     	; 0x4f52 <__mulsf3_pse+0x64>
    4f68:	9e 3f       	cpi	r25, 0xFE	; 254
    4f6a:	51 05       	cpc	r21, r1
    4f6c:	70 f0       	brcs	.+28     	; 0x4f8a <__mulsf3_pse+0x9c>
    4f6e:	b2 ce       	rjmp	.-668    	; 0x4cd4 <__fp_inf>
    4f70:	5a cf       	rjmp	.-332    	; 0x4e26 <__fp_szero>
    4f72:	5f 3f       	cpi	r21, 0xFF	; 255
    4f74:	ec f3       	brlt	.-6      	; 0x4f70 <__mulsf3_pse+0x82>
    4f76:	98 3e       	cpi	r25, 0xE8	; 232
    4f78:	dc f3       	brlt	.-10     	; 0x4f70 <__mulsf3_pse+0x82>
    4f7a:	86 95       	lsr	r24
    4f7c:	77 95       	ror	r23
    4f7e:	67 95       	ror	r22
    4f80:	b7 95       	ror	r27
    4f82:	f7 95       	ror	r31
    4f84:	e7 95       	ror	r30
    4f86:	9f 5f       	subi	r25, 0xFF	; 255
    4f88:	c1 f7       	brne	.-16     	; 0x4f7a <__mulsf3_pse+0x8c>
    4f8a:	fe 2b       	or	r31, r30
    4f8c:	88 0f       	add	r24, r24
    4f8e:	91 1d       	adc	r25, r1
    4f90:	96 95       	lsr	r25
    4f92:	87 95       	ror	r24
    4f94:	97 f9       	bld	r25, 7
    4f96:	08 95       	ret

00004f98 <sin>:
    4f98:	9f 93       	push	r25
    4f9a:	d9 de       	rcall	.-590    	; 0x4d4e <__fp_rempio2>
    4f9c:	0f 90       	pop	r0
    4f9e:	07 fc       	sbrc	r0, 7
    4fa0:	ee 5f       	subi	r30, 0xFE	; 254
    4fa2:	0d cf       	rjmp	.-486    	; 0x4dbe <__fp_sinus>

00004fa4 <square>:
    4fa4:	9b 01       	movw	r18, r22
    4fa6:	ac 01       	movw	r20, r24
    4fa8:	94 cf       	rjmp	.-216    	; 0x4ed2 <__mulsf3>

00004faa <tan>:
    4faa:	df 93       	push	r29
    4fac:	d9 2f       	mov	r29, r25
    4fae:	cf de       	rcall	.-610    	; 0x4d4e <__fp_rempio2>
    4fb0:	e6 95       	lsr	r30
    4fb2:	d7 95       	ror	r29
    4fb4:	2a ed       	ldi	r18, 0xDA	; 218
    4fb6:	3f e0       	ldi	r19, 0x0F	; 15
    4fb8:	49 e4       	ldi	r20, 0x49	; 73
    4fba:	5f e3       	ldi	r21, 0x3F	; 63
    4fbc:	b3 3a       	cpi	r27, 0xA3	; 163
    4fbe:	62 07       	cpc	r22, r18
    4fc0:	73 07       	cpc	r23, r19
    4fc2:	84 07       	cpc	r24, r20
    4fc4:	95 07       	cpc	r25, r21
    4fc6:	d7 95       	ror	r29
    4fc8:	2a f0       	brmi	.+10     	; 0x4fd4 <tan+0x2a>
    4fca:	a2 ea       	ldi	r26, 0xA2	; 162
    4fcc:	49 ec       	ldi	r20, 0xC9	; 201
    4fce:	90 68       	ori	r25, 0x80	; 128
    4fd0:	cb dc       	rcall	.-1642   	; 0x4968 <__addsf3x>
    4fd2:	e4 de       	rcall	.-568    	; 0x4d9c <__fp_round>
    4fd4:	ef e3       	ldi	r30, 0x3F	; 63
    4fd6:	f1 e0       	ldi	r31, 0x01	; 1
    4fd8:	16 d0       	rcall	.+44     	; 0x5006 <__fp_powsodd>
    4fda:	dd 0f       	add	r29, r29
    4fdc:	0b f0       	brvs	.+2      	; 0x4fe0 <tan+0x36>
    4fde:	2d df       	rcall	.-422    	; 0x4e3a <inverse>
    4fe0:	dd 0f       	add	r29, r29
    4fe2:	0b f4       	brvc	.+2      	; 0x4fe6 <tan+0x3c>
    4fe4:	90 58       	subi	r25, 0x80	; 128
    4fe6:	df 91       	pop	r29
    4fe8:	08 95       	ret

00004fea <__fp_mpack>:
    4fea:	9f 3f       	cpi	r25, 0xFF	; 255
    4fec:	31 f0       	breq	.+12     	; 0x4ffa <__fp_mpack_finite+0xc>

00004fee <__fp_mpack_finite>:
    4fee:	91 50       	subi	r25, 0x01	; 1
    4ff0:	20 f4       	brcc	.+8      	; 0x4ffa <__fp_mpack_finite+0xc>
    4ff2:	87 95       	ror	r24
    4ff4:	77 95       	ror	r23
    4ff6:	67 95       	ror	r22
    4ff8:	b7 95       	ror	r27
    4ffa:	88 0f       	add	r24, r24
    4ffc:	91 1d       	adc	r25, r1
    4ffe:	96 95       	lsr	r25
    5000:	87 95       	ror	r24
    5002:	97 f9       	bld	r25, 7
    5004:	08 95       	ret

00005006 <__fp_powsodd>:
    5006:	9f 93       	push	r25
    5008:	8f 93       	push	r24
    500a:	7f 93       	push	r23
    500c:	6f 93       	push	r22
    500e:	ff 93       	push	r31
    5010:	ef 93       	push	r30
    5012:	9b 01       	movw	r18, r22
    5014:	ac 01       	movw	r20, r24
    5016:	5d df       	rcall	.-326    	; 0x4ed2 <__mulsf3>
    5018:	ef 91       	pop	r30
    501a:	ff 91       	pop	r31
    501c:	64 de       	rcall	.-824    	; 0x4ce6 <__fp_powser>
    501e:	2f 91       	pop	r18
    5020:	3f 91       	pop	r19
    5022:	4f 91       	pop	r20
    5024:	5f 91       	pop	r21
    5026:	55 cf       	rjmp	.-342    	; 0x4ed2 <__mulsf3>

00005028 <vfprintf>:
    5028:	a3 e1       	ldi	r26, 0x13	; 19
    502a:	b0 e0       	ldi	r27, 0x00	; 0
    502c:	ea e1       	ldi	r30, 0x1A	; 26
    502e:	f8 e2       	ldi	r31, 0x28	; 40
    5030:	0c 94 95 2b 	jmp	0x572a	; 0x572a <__prologue_saves__>
    5034:	7c 01       	movw	r14, r24
    5036:	1b 01       	movw	r2, r22
    5038:	6a 01       	movw	r12, r20
    503a:	fc 01       	movw	r30, r24
    503c:	17 82       	std	Z+7, r1	; 0x07
    503e:	16 82       	std	Z+6, r1	; 0x06
    5040:	83 81       	ldd	r24, Z+3	; 0x03
    5042:	81 ff       	sbrs	r24, 1
    5044:	66 c3       	rjmp	.+1740   	; 0x5712 <vfprintf+0x6ea>
    5046:	be 01       	movw	r22, r28
    5048:	6f 5f       	subi	r22, 0xFF	; 255
    504a:	7f 4f       	sbci	r23, 0xFF	; 255
    504c:	4b 01       	movw	r8, r22
    504e:	f7 01       	movw	r30, r14
    5050:	93 81       	ldd	r25, Z+3	; 0x03
    5052:	f1 01       	movw	r30, r2
    5054:	93 fd       	sbrc	r25, 3
    5056:	85 91       	lpm	r24, Z+
    5058:	93 ff       	sbrs	r25, 3
    505a:	81 91       	ld	r24, Z+
    505c:	1f 01       	movw	r2, r30
    505e:	88 23       	and	r24, r24
    5060:	09 f4       	brne	.+2      	; 0x5064 <vfprintf+0x3c>
    5062:	53 c3       	rjmp	.+1702   	; 0x570a <vfprintf+0x6e2>
    5064:	85 32       	cpi	r24, 0x25	; 37
    5066:	39 f4       	brne	.+14     	; 0x5076 <vfprintf+0x4e>
    5068:	93 fd       	sbrc	r25, 3
    506a:	85 91       	lpm	r24, Z+
    506c:	93 ff       	sbrs	r25, 3
    506e:	81 91       	ld	r24, Z+
    5070:	1f 01       	movw	r2, r30
    5072:	85 32       	cpi	r24, 0x25	; 37
    5074:	39 f4       	brne	.+14     	; 0x5084 <vfprintf+0x5c>
    5076:	b7 01       	movw	r22, r14
    5078:	90 e0       	ldi	r25, 0x00	; 0
    507a:	0e 94 ba 2c 	call	0x5974	; 0x5974 <fputc>
    507e:	56 01       	movw	r10, r12
    5080:	65 01       	movw	r12, r10
    5082:	e5 cf       	rjmp	.-54     	; 0x504e <vfprintf+0x26>
    5084:	10 e0       	ldi	r17, 0x00	; 0
    5086:	51 2c       	mov	r5, r1
    5088:	20 e0       	ldi	r18, 0x00	; 0
    508a:	20 32       	cpi	r18, 0x20	; 32
    508c:	a0 f4       	brcc	.+40     	; 0x50b6 <vfprintf+0x8e>
    508e:	8b 32       	cpi	r24, 0x2B	; 43
    5090:	69 f0       	breq	.+26     	; 0x50ac <vfprintf+0x84>
    5092:	30 f4       	brcc	.+12     	; 0x50a0 <vfprintf+0x78>
    5094:	80 32       	cpi	r24, 0x20	; 32
    5096:	59 f0       	breq	.+22     	; 0x50ae <vfprintf+0x86>
    5098:	83 32       	cpi	r24, 0x23	; 35
    509a:	69 f4       	brne	.+26     	; 0x50b6 <vfprintf+0x8e>
    509c:	20 61       	ori	r18, 0x10	; 16
    509e:	2c c0       	rjmp	.+88     	; 0x50f8 <vfprintf+0xd0>
    50a0:	8d 32       	cpi	r24, 0x2D	; 45
    50a2:	39 f0       	breq	.+14     	; 0x50b2 <vfprintf+0x8a>
    50a4:	80 33       	cpi	r24, 0x30	; 48
    50a6:	39 f4       	brne	.+14     	; 0x50b6 <vfprintf+0x8e>
    50a8:	21 60       	ori	r18, 0x01	; 1
    50aa:	26 c0       	rjmp	.+76     	; 0x50f8 <vfprintf+0xd0>
    50ac:	22 60       	ori	r18, 0x02	; 2
    50ae:	24 60       	ori	r18, 0x04	; 4
    50b0:	23 c0       	rjmp	.+70     	; 0x50f8 <vfprintf+0xd0>
    50b2:	28 60       	ori	r18, 0x08	; 8
    50b4:	21 c0       	rjmp	.+66     	; 0x50f8 <vfprintf+0xd0>
    50b6:	27 fd       	sbrc	r18, 7
    50b8:	27 c0       	rjmp	.+78     	; 0x5108 <vfprintf+0xe0>
    50ba:	30 ed       	ldi	r19, 0xD0	; 208
    50bc:	38 0f       	add	r19, r24
    50be:	3a 30       	cpi	r19, 0x0A	; 10
    50c0:	78 f4       	brcc	.+30     	; 0x50e0 <vfprintf+0xb8>
    50c2:	26 ff       	sbrs	r18, 6
    50c4:	06 c0       	rjmp	.+12     	; 0x50d2 <vfprintf+0xaa>
    50c6:	fa e0       	ldi	r31, 0x0A	; 10
    50c8:	1f 9f       	mul	r17, r31
    50ca:	30 0d       	add	r19, r0
    50cc:	11 24       	eor	r1, r1
    50ce:	13 2f       	mov	r17, r19
    50d0:	13 c0       	rjmp	.+38     	; 0x50f8 <vfprintf+0xd0>
    50d2:	6a e0       	ldi	r22, 0x0A	; 10
    50d4:	56 9e       	mul	r5, r22
    50d6:	30 0d       	add	r19, r0
    50d8:	11 24       	eor	r1, r1
    50da:	53 2e       	mov	r5, r19
    50dc:	20 62       	ori	r18, 0x20	; 32
    50de:	0c c0       	rjmp	.+24     	; 0x50f8 <vfprintf+0xd0>
    50e0:	8e 32       	cpi	r24, 0x2E	; 46
    50e2:	21 f4       	brne	.+8      	; 0x50ec <vfprintf+0xc4>
    50e4:	26 fd       	sbrc	r18, 6
    50e6:	11 c3       	rjmp	.+1570   	; 0x570a <vfprintf+0x6e2>
    50e8:	20 64       	ori	r18, 0x40	; 64
    50ea:	06 c0       	rjmp	.+12     	; 0x50f8 <vfprintf+0xd0>
    50ec:	8c 36       	cpi	r24, 0x6C	; 108
    50ee:	11 f4       	brne	.+4      	; 0x50f4 <vfprintf+0xcc>
    50f0:	20 68       	ori	r18, 0x80	; 128
    50f2:	02 c0       	rjmp	.+4      	; 0x50f8 <vfprintf+0xd0>
    50f4:	88 36       	cpi	r24, 0x68	; 104
    50f6:	41 f4       	brne	.+16     	; 0x5108 <vfprintf+0xe0>
    50f8:	f1 01       	movw	r30, r2
    50fa:	93 fd       	sbrc	r25, 3
    50fc:	85 91       	lpm	r24, Z+
    50fe:	93 ff       	sbrs	r25, 3
    5100:	81 91       	ld	r24, Z+
    5102:	1f 01       	movw	r2, r30
    5104:	81 11       	cpse	r24, r1
    5106:	c1 cf       	rjmp	.-126    	; 0x508a <vfprintf+0x62>
    5108:	9b eb       	ldi	r25, 0xBB	; 187
    510a:	98 0f       	add	r25, r24
    510c:	93 30       	cpi	r25, 0x03	; 3
    510e:	18 f4       	brcc	.+6      	; 0x5116 <vfprintf+0xee>
    5110:	20 61       	ori	r18, 0x10	; 16
    5112:	80 5e       	subi	r24, 0xE0	; 224
    5114:	06 c0       	rjmp	.+12     	; 0x5122 <vfprintf+0xfa>
    5116:	9b e9       	ldi	r25, 0x9B	; 155
    5118:	98 0f       	add	r25, r24
    511a:	93 30       	cpi	r25, 0x03	; 3
    511c:	08 f0       	brcs	.+2      	; 0x5120 <vfprintf+0xf8>
    511e:	aa c1       	rjmp	.+852    	; 0x5474 <vfprintf+0x44c>
    5120:	2f 7e       	andi	r18, 0xEF	; 239
    5122:	26 ff       	sbrs	r18, 6
    5124:	16 e0       	ldi	r17, 0x06	; 6
    5126:	2f 73       	andi	r18, 0x3F	; 63
    5128:	72 2e       	mov	r7, r18
    512a:	85 36       	cpi	r24, 0x65	; 101
    512c:	21 f4       	brne	.+8      	; 0x5136 <vfprintf+0x10e>
    512e:	f2 2f       	mov	r31, r18
    5130:	f0 64       	ori	r31, 0x40	; 64
    5132:	7f 2e       	mov	r7, r31
    5134:	08 c0       	rjmp	.+16     	; 0x5146 <vfprintf+0x11e>
    5136:	86 36       	cpi	r24, 0x66	; 102
    5138:	21 f4       	brne	.+8      	; 0x5142 <vfprintf+0x11a>
    513a:	62 2f       	mov	r22, r18
    513c:	60 68       	ori	r22, 0x80	; 128
    513e:	76 2e       	mov	r7, r22
    5140:	02 c0       	rjmp	.+4      	; 0x5146 <vfprintf+0x11e>
    5142:	11 11       	cpse	r17, r1
    5144:	11 50       	subi	r17, 0x01	; 1
    5146:	77 fe       	sbrs	r7, 7
    5148:	07 c0       	rjmp	.+14     	; 0x5158 <vfprintf+0x130>
    514a:	1c 33       	cpi	r17, 0x3C	; 60
    514c:	48 f4       	brcc	.+18     	; 0x5160 <vfprintf+0x138>
    514e:	44 24       	eor	r4, r4
    5150:	43 94       	inc	r4
    5152:	41 0e       	add	r4, r17
    5154:	27 e0       	ldi	r18, 0x07	; 7
    5156:	0b c0       	rjmp	.+22     	; 0x516e <vfprintf+0x146>
    5158:	18 30       	cpi	r17, 0x08	; 8
    515a:	30 f4       	brcc	.+12     	; 0x5168 <vfprintf+0x140>
    515c:	21 2f       	mov	r18, r17
    515e:	06 c0       	rjmp	.+12     	; 0x516c <vfprintf+0x144>
    5160:	27 e0       	ldi	r18, 0x07	; 7
    5162:	4c e3       	ldi	r20, 0x3C	; 60
    5164:	44 2e       	mov	r4, r20
    5166:	03 c0       	rjmp	.+6      	; 0x516e <vfprintf+0x146>
    5168:	27 e0       	ldi	r18, 0x07	; 7
    516a:	17 e0       	ldi	r17, 0x07	; 7
    516c:	41 2c       	mov	r4, r1
    516e:	56 01       	movw	r10, r12
    5170:	74 e0       	ldi	r23, 0x04	; 4
    5172:	a7 0e       	add	r10, r23
    5174:	b1 1c       	adc	r11, r1
    5176:	f6 01       	movw	r30, r12
    5178:	60 81       	ld	r22, Z
    517a:	71 81       	ldd	r23, Z+1	; 0x01
    517c:	82 81       	ldd	r24, Z+2	; 0x02
    517e:	93 81       	ldd	r25, Z+3	; 0x03
    5180:	04 2d       	mov	r16, r4
    5182:	a4 01       	movw	r20, r8
    5184:	0e 94 cc 2b 	call	0x5798	; 0x5798 <__ftoa_engine>
    5188:	6c 01       	movw	r12, r24
    518a:	09 81       	ldd	r16, Y+1	; 0x01
    518c:	00 ff       	sbrs	r16, 0
    518e:	02 c0       	rjmp	.+4      	; 0x5194 <vfprintf+0x16c>
    5190:	03 ff       	sbrs	r16, 3
    5192:	06 c0       	rjmp	.+12     	; 0x51a0 <vfprintf+0x178>
    5194:	71 fc       	sbrc	r7, 1
    5196:	07 c0       	rjmp	.+14     	; 0x51a6 <vfprintf+0x17e>
    5198:	72 fc       	sbrc	r7, 2
    519a:	08 c0       	rjmp	.+16     	; 0x51ac <vfprintf+0x184>
    519c:	61 2c       	mov	r6, r1
    519e:	08 c0       	rjmp	.+16     	; 0x51b0 <vfprintf+0x188>
    51a0:	3d e2       	ldi	r19, 0x2D	; 45
    51a2:	63 2e       	mov	r6, r19
    51a4:	05 c0       	rjmp	.+10     	; 0x51b0 <vfprintf+0x188>
    51a6:	2b e2       	ldi	r18, 0x2B	; 43
    51a8:	62 2e       	mov	r6, r18
    51aa:	02 c0       	rjmp	.+4      	; 0x51b0 <vfprintf+0x188>
    51ac:	90 e2       	ldi	r25, 0x20	; 32
    51ae:	69 2e       	mov	r6, r25
    51b0:	80 2f       	mov	r24, r16
    51b2:	8c 70       	andi	r24, 0x0C	; 12
    51b4:	99 f1       	breq	.+102    	; 0x521c <vfprintf+0x1f4>
    51b6:	66 20       	and	r6, r6
    51b8:	11 f0       	breq	.+4      	; 0x51be <vfprintf+0x196>
    51ba:	84 e0       	ldi	r24, 0x04	; 4
    51bc:	01 c0       	rjmp	.+2      	; 0x51c0 <vfprintf+0x198>
    51be:	83 e0       	ldi	r24, 0x03	; 3
    51c0:	85 15       	cp	r24, r5
    51c2:	10 f0       	brcs	.+4      	; 0x51c8 <vfprintf+0x1a0>
    51c4:	51 2c       	mov	r5, r1
    51c6:	0b c0       	rjmp	.+22     	; 0x51de <vfprintf+0x1b6>
    51c8:	58 1a       	sub	r5, r24
    51ca:	73 fc       	sbrc	r7, 3
    51cc:	08 c0       	rjmp	.+16     	; 0x51de <vfprintf+0x1b6>
    51ce:	b7 01       	movw	r22, r14
    51d0:	80 e2       	ldi	r24, 0x20	; 32
    51d2:	90 e0       	ldi	r25, 0x00	; 0
    51d4:	0e 94 ba 2c 	call	0x5974	; 0x5974 <fputc>
    51d8:	5a 94       	dec	r5
    51da:	c9 f7       	brne	.-14     	; 0x51ce <vfprintf+0x1a6>
    51dc:	f3 cf       	rjmp	.-26     	; 0x51c4 <vfprintf+0x19c>
    51de:	66 20       	and	r6, r6
    51e0:	29 f0       	breq	.+10     	; 0x51ec <vfprintf+0x1c4>
    51e2:	b7 01       	movw	r22, r14
    51e4:	86 2d       	mov	r24, r6
    51e6:	90 e0       	ldi	r25, 0x00	; 0
    51e8:	0e 94 ba 2c 	call	0x5974	; 0x5974 <fputc>
    51ec:	03 fd       	sbrc	r16, 3
    51ee:	03 c0       	rjmp	.+6      	; 0x51f6 <vfprintf+0x1ce>
    51f0:	0c e7       	ldi	r16, 0x7C	; 124
    51f2:	14 e0       	ldi	r17, 0x04	; 4
    51f4:	02 c0       	rjmp	.+4      	; 0x51fa <vfprintf+0x1d2>
    51f6:	08 e7       	ldi	r16, 0x78	; 120
    51f8:	14 e0       	ldi	r17, 0x04	; 4
    51fa:	f7 2d       	mov	r31, r7
    51fc:	f0 71       	andi	r31, 0x10	; 16
    51fe:	7f 2e       	mov	r7, r31
    5200:	f8 01       	movw	r30, r16
    5202:	84 91       	lpm	r24, Z
    5204:	88 23       	and	r24, r24
    5206:	09 f4       	brne	.+2      	; 0x520a <vfprintf+0x1e2>
    5208:	76 c2       	rjmp	.+1260   	; 0x56f6 <vfprintf+0x6ce>
    520a:	71 10       	cpse	r7, r1
    520c:	80 52       	subi	r24, 0x20	; 32
    520e:	b7 01       	movw	r22, r14
    5210:	90 e0       	ldi	r25, 0x00	; 0
    5212:	0e 94 ba 2c 	call	0x5974	; 0x5974 <fputc>
    5216:	0f 5f       	subi	r16, 0xFF	; 255
    5218:	1f 4f       	sbci	r17, 0xFF	; 255
    521a:	f2 cf       	rjmp	.-28     	; 0x5200 <vfprintf+0x1d8>
    521c:	77 fe       	sbrs	r7, 7
    521e:	0f c0       	rjmp	.+30     	; 0x523e <vfprintf+0x216>
    5220:	4c 0c       	add	r4, r12
    5222:	04 ff       	sbrs	r16, 4
    5224:	04 c0       	rjmp	.+8      	; 0x522e <vfprintf+0x206>
    5226:	8a 81       	ldd	r24, Y+2	; 0x02
    5228:	81 33       	cpi	r24, 0x31	; 49
    522a:	09 f4       	brne	.+2      	; 0x522e <vfprintf+0x206>
    522c:	4a 94       	dec	r4
    522e:	14 14       	cp	r1, r4
    5230:	74 f5       	brge	.+92     	; 0x528e <vfprintf+0x266>
    5232:	f8 e0       	ldi	r31, 0x08	; 8
    5234:	f4 15       	cp	r31, r4
    5236:	78 f5       	brcc	.+94     	; 0x5296 <vfprintf+0x26e>
    5238:	88 e0       	ldi	r24, 0x08	; 8
    523a:	48 2e       	mov	r4, r24
    523c:	2c c0       	rjmp	.+88     	; 0x5296 <vfprintf+0x26e>
    523e:	76 fc       	sbrc	r7, 6
    5240:	2a c0       	rjmp	.+84     	; 0x5296 <vfprintf+0x26e>
    5242:	81 2f       	mov	r24, r17
    5244:	90 e0       	ldi	r25, 0x00	; 0
    5246:	8c 15       	cp	r24, r12
    5248:	9d 05       	cpc	r25, r13
    524a:	9c f0       	brlt	.+38     	; 0x5272 <vfprintf+0x24a>
    524c:	6c ef       	ldi	r22, 0xFC	; 252
    524e:	c6 16       	cp	r12, r22
    5250:	6f ef       	ldi	r22, 0xFF	; 255
    5252:	d6 06       	cpc	r13, r22
    5254:	74 f0       	brlt	.+28     	; 0x5272 <vfprintf+0x24a>
    5256:	77 2d       	mov	r23, r7
    5258:	70 68       	ori	r23, 0x80	; 128
    525a:	77 2e       	mov	r7, r23
    525c:	0a c0       	rjmp	.+20     	; 0x5272 <vfprintf+0x24a>
    525e:	e2 e0       	ldi	r30, 0x02	; 2
    5260:	f0 e0       	ldi	r31, 0x00	; 0
    5262:	ec 0f       	add	r30, r28
    5264:	fd 1f       	adc	r31, r29
    5266:	e1 0f       	add	r30, r17
    5268:	f1 1d       	adc	r31, r1
    526a:	80 81       	ld	r24, Z
    526c:	80 33       	cpi	r24, 0x30	; 48
    526e:	19 f4       	brne	.+6      	; 0x5276 <vfprintf+0x24e>
    5270:	11 50       	subi	r17, 0x01	; 1
    5272:	11 11       	cpse	r17, r1
    5274:	f4 cf       	rjmp	.-24     	; 0x525e <vfprintf+0x236>
    5276:	77 fe       	sbrs	r7, 7
    5278:	0e c0       	rjmp	.+28     	; 0x5296 <vfprintf+0x26e>
    527a:	44 24       	eor	r4, r4
    527c:	43 94       	inc	r4
    527e:	41 0e       	add	r4, r17
    5280:	81 2f       	mov	r24, r17
    5282:	90 e0       	ldi	r25, 0x00	; 0
    5284:	c8 16       	cp	r12, r24
    5286:	d9 06       	cpc	r13, r25
    5288:	2c f4       	brge	.+10     	; 0x5294 <vfprintf+0x26c>
    528a:	1c 19       	sub	r17, r12
    528c:	04 c0       	rjmp	.+8      	; 0x5296 <vfprintf+0x26e>
    528e:	44 24       	eor	r4, r4
    5290:	43 94       	inc	r4
    5292:	01 c0       	rjmp	.+2      	; 0x5296 <vfprintf+0x26e>
    5294:	10 e0       	ldi	r17, 0x00	; 0
    5296:	77 fe       	sbrs	r7, 7
    5298:	07 c0       	rjmp	.+14     	; 0x52a8 <vfprintf+0x280>
    529a:	1c 14       	cp	r1, r12
    529c:	1d 04       	cpc	r1, r13
    529e:	3c f4       	brge	.+14     	; 0x52ae <vfprintf+0x286>
    52a0:	96 01       	movw	r18, r12
    52a2:	2f 5f       	subi	r18, 0xFF	; 255
    52a4:	3f 4f       	sbci	r19, 0xFF	; 255
    52a6:	05 c0       	rjmp	.+10     	; 0x52b2 <vfprintf+0x28a>
    52a8:	25 e0       	ldi	r18, 0x05	; 5
    52aa:	30 e0       	ldi	r19, 0x00	; 0
    52ac:	02 c0       	rjmp	.+4      	; 0x52b2 <vfprintf+0x28a>
    52ae:	21 e0       	ldi	r18, 0x01	; 1
    52b0:	30 e0       	ldi	r19, 0x00	; 0
    52b2:	66 20       	and	r6, r6
    52b4:	11 f0       	breq	.+4      	; 0x52ba <vfprintf+0x292>
    52b6:	2f 5f       	subi	r18, 0xFF	; 255
    52b8:	3f 4f       	sbci	r19, 0xFF	; 255
    52ba:	11 23       	and	r17, r17
    52bc:	31 f0       	breq	.+12     	; 0x52ca <vfprintf+0x2a2>
    52be:	41 2f       	mov	r20, r17
    52c0:	50 e0       	ldi	r21, 0x00	; 0
    52c2:	4f 5f       	subi	r20, 0xFF	; 255
    52c4:	5f 4f       	sbci	r21, 0xFF	; 255
    52c6:	24 0f       	add	r18, r20
    52c8:	35 1f       	adc	r19, r21
    52ca:	45 2d       	mov	r20, r5
    52cc:	50 e0       	ldi	r21, 0x00	; 0
    52ce:	24 17       	cp	r18, r20
    52d0:	35 07       	cpc	r19, r21
    52d2:	14 f4       	brge	.+4      	; 0x52d8 <vfprintf+0x2b0>
    52d4:	52 1a       	sub	r5, r18
    52d6:	01 c0       	rjmp	.+2      	; 0x52da <vfprintf+0x2b2>
    52d8:	51 2c       	mov	r5, r1
    52da:	87 2d       	mov	r24, r7
    52dc:	89 70       	andi	r24, 0x09	; 9
    52de:	49 f4       	brne	.+18     	; 0x52f2 <vfprintf+0x2ca>
    52e0:	55 20       	and	r5, r5
    52e2:	39 f0       	breq	.+14     	; 0x52f2 <vfprintf+0x2ca>
    52e4:	b7 01       	movw	r22, r14
    52e6:	80 e2       	ldi	r24, 0x20	; 32
    52e8:	90 e0       	ldi	r25, 0x00	; 0
    52ea:	0e 94 ba 2c 	call	0x5974	; 0x5974 <fputc>
    52ee:	5a 94       	dec	r5
    52f0:	f7 cf       	rjmp	.-18     	; 0x52e0 <vfprintf+0x2b8>
    52f2:	66 20       	and	r6, r6
    52f4:	29 f0       	breq	.+10     	; 0x5300 <vfprintf+0x2d8>
    52f6:	b7 01       	movw	r22, r14
    52f8:	86 2d       	mov	r24, r6
    52fa:	90 e0       	ldi	r25, 0x00	; 0
    52fc:	0e 94 ba 2c 	call	0x5974	; 0x5974 <fputc>
    5300:	73 fc       	sbrc	r7, 3
    5302:	09 c0       	rjmp	.+18     	; 0x5316 <vfprintf+0x2ee>
    5304:	55 20       	and	r5, r5
    5306:	39 f0       	breq	.+14     	; 0x5316 <vfprintf+0x2ee>
    5308:	b7 01       	movw	r22, r14
    530a:	80 e3       	ldi	r24, 0x30	; 48
    530c:	90 e0       	ldi	r25, 0x00	; 0
    530e:	0e 94 ba 2c 	call	0x5974	; 0x5974 <fputc>
    5312:	5a 94       	dec	r5
    5314:	f7 cf       	rjmp	.-18     	; 0x5304 <vfprintf+0x2dc>
    5316:	77 fe       	sbrs	r7, 7
    5318:	5f c0       	rjmp	.+190    	; 0x53d8 <vfprintf+0x3b0>
    531a:	9c 2d       	mov	r25, r12
    531c:	8d 2d       	mov	r24, r13
    531e:	d7 fe       	sbrs	r13, 7
    5320:	02 c0       	rjmp	.+4      	; 0x5326 <vfprintf+0x2fe>
    5322:	90 e0       	ldi	r25, 0x00	; 0
    5324:	80 e0       	ldi	r24, 0x00	; 0
    5326:	69 2e       	mov	r6, r25
    5328:	78 2e       	mov	r7, r24
    532a:	40 e0       	ldi	r20, 0x00	; 0
    532c:	50 e0       	ldi	r21, 0x00	; 0
    532e:	c6 01       	movw	r24, r12
    5330:	84 19       	sub	r24, r4
    5332:	91 09       	sbc	r25, r1
    5334:	9d 87       	std	Y+13, r25	; 0x0d
    5336:	8c 87       	std	Y+12, r24	; 0x0c
    5338:	96 01       	movw	r18, r12
    533a:	26 19       	sub	r18, r6
    533c:	37 09       	sbc	r19, r7
    533e:	28 0d       	add	r18, r8
    5340:	39 1d       	adc	r19, r9
    5342:	81 2f       	mov	r24, r17
    5344:	90 e0       	ldi	r25, 0x00	; 0
    5346:	ee 27       	eor	r30, r30
    5348:	ff 27       	eor	r31, r31
    534a:	e8 1b       	sub	r30, r24
    534c:	f9 0b       	sbc	r31, r25
    534e:	ff 87       	std	Y+15, r31	; 0x0f
    5350:	ee 87       	std	Y+14, r30	; 0x0e
    5352:	ff ef       	ldi	r31, 0xFF	; 255
    5354:	6f 16       	cp	r6, r31
    5356:	7f 06       	cpc	r7, r31
    5358:	69 f4       	brne	.+26     	; 0x5374 <vfprintf+0x34c>
    535a:	b7 01       	movw	r22, r14
    535c:	8e e2       	ldi	r24, 0x2E	; 46
    535e:	90 e0       	ldi	r25, 0x00	; 0
    5360:	2b 8b       	std	Y+19, r18	; 0x13
    5362:	3a 8b       	std	Y+18, r19	; 0x12
    5364:	48 8b       	std	Y+16, r20	; 0x10
    5366:	59 8b       	std	Y+17, r21	; 0x11
    5368:	0e 94 ba 2c 	call	0x5974	; 0x5974 <fputc>
    536c:	59 89       	ldd	r21, Y+17	; 0x11
    536e:	48 89       	ldd	r20, Y+16	; 0x10
    5370:	3a 89       	ldd	r19, Y+18	; 0x12
    5372:	2b 89       	ldd	r18, Y+19	; 0x13
    5374:	c6 14       	cp	r12, r6
    5376:	d7 04       	cpc	r13, r7
    5378:	54 f0       	brlt	.+20     	; 0x538e <vfprintf+0x366>
    537a:	6c 85       	ldd	r22, Y+12	; 0x0c
    537c:	7d 85       	ldd	r23, Y+13	; 0x0d
    537e:	66 15       	cp	r22, r6
    5380:	77 05       	cpc	r23, r7
    5382:	2c f4       	brge	.+10     	; 0x538e <vfprintf+0x366>
    5384:	f9 01       	movw	r30, r18
    5386:	e4 0f       	add	r30, r20
    5388:	f5 1f       	adc	r31, r21
    538a:	81 81       	ldd	r24, Z+1	; 0x01
    538c:	01 c0       	rjmp	.+2      	; 0x5390 <vfprintf+0x368>
    538e:	80 e3       	ldi	r24, 0x30	; 48
    5390:	71 e0       	ldi	r23, 0x01	; 1
    5392:	67 1a       	sub	r6, r23
    5394:	71 08       	sbc	r7, r1
    5396:	4f 5f       	subi	r20, 0xFF	; 255
    5398:	5f 4f       	sbci	r21, 0xFF	; 255
    539a:	ee 85       	ldd	r30, Y+14	; 0x0e
    539c:	ff 85       	ldd	r31, Y+15	; 0x0f
    539e:	6e 16       	cp	r6, r30
    53a0:	7f 06       	cpc	r7, r31
    53a2:	6c f0       	brlt	.+26     	; 0x53be <vfprintf+0x396>
    53a4:	b7 01       	movw	r22, r14
    53a6:	90 e0       	ldi	r25, 0x00	; 0
    53a8:	2b 8b       	std	Y+19, r18	; 0x13
    53aa:	3a 8b       	std	Y+18, r19	; 0x12
    53ac:	48 8b       	std	Y+16, r20	; 0x10
    53ae:	59 8b       	std	Y+17, r21	; 0x11
    53b0:	0e 94 ba 2c 	call	0x5974	; 0x5974 <fputc>
    53b4:	2b 89       	ldd	r18, Y+19	; 0x13
    53b6:	3a 89       	ldd	r19, Y+18	; 0x12
    53b8:	48 89       	ldd	r20, Y+16	; 0x10
    53ba:	59 89       	ldd	r21, Y+17	; 0x11
    53bc:	ca cf       	rjmp	.-108    	; 0x5352 <vfprintf+0x32a>
    53be:	6c 14       	cp	r6, r12
    53c0:	7d 04       	cpc	r7, r13
    53c2:	39 f4       	brne	.+14     	; 0x53d2 <vfprintf+0x3aa>
    53c4:	9a 81       	ldd	r25, Y+2	; 0x02
    53c6:	96 33       	cpi	r25, 0x36	; 54
    53c8:	18 f4       	brcc	.+6      	; 0x53d0 <vfprintf+0x3a8>
    53ca:	95 33       	cpi	r25, 0x35	; 53
    53cc:	11 f4       	brne	.+4      	; 0x53d2 <vfprintf+0x3aa>
    53ce:	04 ff       	sbrs	r16, 4
    53d0:	81 e3       	ldi	r24, 0x31	; 49
    53d2:	b7 01       	movw	r22, r14
    53d4:	90 e0       	ldi	r25, 0x00	; 0
    53d6:	4b c0       	rjmp	.+150    	; 0x546e <vfprintf+0x446>
    53d8:	8a 81       	ldd	r24, Y+2	; 0x02
    53da:	81 33       	cpi	r24, 0x31	; 49
    53dc:	09 f0       	breq	.+2      	; 0x53e0 <vfprintf+0x3b8>
    53de:	0f 7e       	andi	r16, 0xEF	; 239
    53e0:	b7 01       	movw	r22, r14
    53e2:	90 e0       	ldi	r25, 0x00	; 0
    53e4:	0e 94 ba 2c 	call	0x5974	; 0x5974 <fputc>
    53e8:	11 11       	cpse	r17, r1
    53ea:	05 c0       	rjmp	.+10     	; 0x53f6 <vfprintf+0x3ce>
    53ec:	74 fe       	sbrs	r7, 4
    53ee:	18 c0       	rjmp	.+48     	; 0x5420 <vfprintf+0x3f8>
    53f0:	85 e4       	ldi	r24, 0x45	; 69
    53f2:	90 e0       	ldi	r25, 0x00	; 0
    53f4:	17 c0       	rjmp	.+46     	; 0x5424 <vfprintf+0x3fc>
    53f6:	b7 01       	movw	r22, r14
    53f8:	8e e2       	ldi	r24, 0x2E	; 46
    53fa:	90 e0       	ldi	r25, 0x00	; 0
    53fc:	0e 94 ba 2c 	call	0x5974	; 0x5974 <fputc>
    5400:	82 e0       	ldi	r24, 0x02	; 2
    5402:	66 24       	eor	r6, r6
    5404:	63 94       	inc	r6
    5406:	68 0e       	add	r6, r24
    5408:	f4 01       	movw	r30, r8
    540a:	e8 0f       	add	r30, r24
    540c:	f1 1d       	adc	r31, r1
    540e:	80 81       	ld	r24, Z
    5410:	b7 01       	movw	r22, r14
    5412:	90 e0       	ldi	r25, 0x00	; 0
    5414:	0e 94 ba 2c 	call	0x5974	; 0x5974 <fputc>
    5418:	11 50       	subi	r17, 0x01	; 1
    541a:	41 f3       	breq	.-48     	; 0x53ec <vfprintf+0x3c4>
    541c:	86 2d       	mov	r24, r6
    541e:	f1 cf       	rjmp	.-30     	; 0x5402 <vfprintf+0x3da>
    5420:	85 e6       	ldi	r24, 0x65	; 101
    5422:	90 e0       	ldi	r25, 0x00	; 0
    5424:	b7 01       	movw	r22, r14
    5426:	0e 94 ba 2c 	call	0x5974	; 0x5974 <fputc>
    542a:	d7 fc       	sbrc	r13, 7
    542c:	05 c0       	rjmp	.+10     	; 0x5438 <vfprintf+0x410>
    542e:	c1 14       	cp	r12, r1
    5430:	d1 04       	cpc	r13, r1
    5432:	39 f4       	brne	.+14     	; 0x5442 <vfprintf+0x41a>
    5434:	04 ff       	sbrs	r16, 4
    5436:	05 c0       	rjmp	.+10     	; 0x5442 <vfprintf+0x41a>
    5438:	d1 94       	neg	r13
    543a:	c1 94       	neg	r12
    543c:	d1 08       	sbc	r13, r1
    543e:	8d e2       	ldi	r24, 0x2D	; 45
    5440:	01 c0       	rjmp	.+2      	; 0x5444 <vfprintf+0x41c>
    5442:	8b e2       	ldi	r24, 0x2B	; 43
    5444:	b7 01       	movw	r22, r14
    5446:	90 e0       	ldi	r25, 0x00	; 0
    5448:	0e 94 ba 2c 	call	0x5974	; 0x5974 <fputc>
    544c:	80 e3       	ldi	r24, 0x30	; 48
    544e:	6a e0       	ldi	r22, 0x0A	; 10
    5450:	c6 16       	cp	r12, r22
    5452:	d1 04       	cpc	r13, r1
    5454:	2c f0       	brlt	.+10     	; 0x5460 <vfprintf+0x438>
    5456:	8f 5f       	subi	r24, 0xFF	; 255
    5458:	fa e0       	ldi	r31, 0x0A	; 10
    545a:	cf 1a       	sub	r12, r31
    545c:	d1 08       	sbc	r13, r1
    545e:	f7 cf       	rjmp	.-18     	; 0x544e <vfprintf+0x426>
    5460:	b7 01       	movw	r22, r14
    5462:	90 e0       	ldi	r25, 0x00	; 0
    5464:	0e 94 ba 2c 	call	0x5974	; 0x5974 <fputc>
    5468:	b7 01       	movw	r22, r14
    546a:	c6 01       	movw	r24, r12
    546c:	c0 96       	adiw	r24, 0x30	; 48
    546e:	0e 94 ba 2c 	call	0x5974	; 0x5974 <fputc>
    5472:	41 c1       	rjmp	.+642    	; 0x56f6 <vfprintf+0x6ce>
    5474:	83 36       	cpi	r24, 0x63	; 99
    5476:	31 f0       	breq	.+12     	; 0x5484 <vfprintf+0x45c>
    5478:	83 37       	cpi	r24, 0x73	; 115
    547a:	79 f0       	breq	.+30     	; 0x549a <vfprintf+0x472>
    547c:	83 35       	cpi	r24, 0x53	; 83
    547e:	09 f0       	breq	.+2      	; 0x5482 <vfprintf+0x45a>
    5480:	58 c0       	rjmp	.+176    	; 0x5532 <vfprintf+0x50a>
    5482:	21 c0       	rjmp	.+66     	; 0x54c6 <vfprintf+0x49e>
    5484:	56 01       	movw	r10, r12
    5486:	72 e0       	ldi	r23, 0x02	; 2
    5488:	a7 0e       	add	r10, r23
    548a:	b1 1c       	adc	r11, r1
    548c:	f6 01       	movw	r30, r12
    548e:	80 81       	ld	r24, Z
    5490:	89 83       	std	Y+1, r24	; 0x01
    5492:	01 e0       	ldi	r16, 0x01	; 1
    5494:	10 e0       	ldi	r17, 0x00	; 0
    5496:	64 01       	movw	r12, r8
    5498:	14 c0       	rjmp	.+40     	; 0x54c2 <vfprintf+0x49a>
    549a:	56 01       	movw	r10, r12
    549c:	f2 e0       	ldi	r31, 0x02	; 2
    549e:	af 0e       	add	r10, r31
    54a0:	b1 1c       	adc	r11, r1
    54a2:	f6 01       	movw	r30, r12
    54a4:	c0 80       	ld	r12, Z
    54a6:	d1 80       	ldd	r13, Z+1	; 0x01
    54a8:	26 ff       	sbrs	r18, 6
    54aa:	03 c0       	rjmp	.+6      	; 0x54b2 <vfprintf+0x48a>
    54ac:	61 2f       	mov	r22, r17
    54ae:	70 e0       	ldi	r23, 0x00	; 0
    54b0:	02 c0       	rjmp	.+4      	; 0x54b6 <vfprintf+0x48e>
    54b2:	6f ef       	ldi	r22, 0xFF	; 255
    54b4:	7f ef       	ldi	r23, 0xFF	; 255
    54b6:	c6 01       	movw	r24, r12
    54b8:	2b 8b       	std	Y+19, r18	; 0x13
    54ba:	0e 94 af 2c 	call	0x595e	; 0x595e <strnlen>
    54be:	8c 01       	movw	r16, r24
    54c0:	2b 89       	ldd	r18, Y+19	; 0x13
    54c2:	2f 77       	andi	r18, 0x7F	; 127
    54c4:	15 c0       	rjmp	.+42     	; 0x54f0 <vfprintf+0x4c8>
    54c6:	56 01       	movw	r10, r12
    54c8:	f2 e0       	ldi	r31, 0x02	; 2
    54ca:	af 0e       	add	r10, r31
    54cc:	b1 1c       	adc	r11, r1
    54ce:	f6 01       	movw	r30, r12
    54d0:	c0 80       	ld	r12, Z
    54d2:	d1 80       	ldd	r13, Z+1	; 0x01
    54d4:	26 ff       	sbrs	r18, 6
    54d6:	03 c0       	rjmp	.+6      	; 0x54de <vfprintf+0x4b6>
    54d8:	61 2f       	mov	r22, r17
    54da:	70 e0       	ldi	r23, 0x00	; 0
    54dc:	02 c0       	rjmp	.+4      	; 0x54e2 <vfprintf+0x4ba>
    54de:	6f ef       	ldi	r22, 0xFF	; 255
    54e0:	7f ef       	ldi	r23, 0xFF	; 255
    54e2:	c6 01       	movw	r24, r12
    54e4:	2b 8b       	std	Y+19, r18	; 0x13
    54e6:	0e 94 a4 2c 	call	0x5948	; 0x5948 <strnlen_P>
    54ea:	8c 01       	movw	r16, r24
    54ec:	2b 89       	ldd	r18, Y+19	; 0x13
    54ee:	20 68       	ori	r18, 0x80	; 128
    54f0:	72 2e       	mov	r7, r18
    54f2:	23 fd       	sbrc	r18, 3
    54f4:	1a c0       	rjmp	.+52     	; 0x552a <vfprintf+0x502>
    54f6:	85 2d       	mov	r24, r5
    54f8:	90 e0       	ldi	r25, 0x00	; 0
    54fa:	08 17       	cp	r16, r24
    54fc:	19 07       	cpc	r17, r25
    54fe:	a8 f4       	brcc	.+42     	; 0x552a <vfprintf+0x502>
    5500:	b7 01       	movw	r22, r14
    5502:	80 e2       	ldi	r24, 0x20	; 32
    5504:	90 e0       	ldi	r25, 0x00	; 0
    5506:	0e 94 ba 2c 	call	0x5974	; 0x5974 <fputc>
    550a:	5a 94       	dec	r5
    550c:	f4 cf       	rjmp	.-24     	; 0x54f6 <vfprintf+0x4ce>
    550e:	f6 01       	movw	r30, r12
    5510:	77 fc       	sbrc	r7, 7
    5512:	85 91       	lpm	r24, Z+
    5514:	77 fe       	sbrs	r7, 7
    5516:	81 91       	ld	r24, Z+
    5518:	6f 01       	movw	r12, r30
    551a:	b7 01       	movw	r22, r14
    551c:	90 e0       	ldi	r25, 0x00	; 0
    551e:	0e 94 ba 2c 	call	0x5974	; 0x5974 <fputc>
    5522:	51 10       	cpse	r5, r1
    5524:	5a 94       	dec	r5
    5526:	01 50       	subi	r16, 0x01	; 1
    5528:	11 09       	sbc	r17, r1
    552a:	01 15       	cp	r16, r1
    552c:	11 05       	cpc	r17, r1
    552e:	79 f7       	brne	.-34     	; 0x550e <vfprintf+0x4e6>
    5530:	e2 c0       	rjmp	.+452    	; 0x56f6 <vfprintf+0x6ce>
    5532:	84 36       	cpi	r24, 0x64	; 100
    5534:	11 f0       	breq	.+4      	; 0x553a <vfprintf+0x512>
    5536:	89 36       	cpi	r24, 0x69	; 105
    5538:	51 f5       	brne	.+84     	; 0x558e <vfprintf+0x566>
    553a:	56 01       	movw	r10, r12
    553c:	27 ff       	sbrs	r18, 7
    553e:	09 c0       	rjmp	.+18     	; 0x5552 <vfprintf+0x52a>
    5540:	f4 e0       	ldi	r31, 0x04	; 4
    5542:	af 0e       	add	r10, r31
    5544:	b1 1c       	adc	r11, r1
    5546:	f6 01       	movw	r30, r12
    5548:	60 81       	ld	r22, Z
    554a:	71 81       	ldd	r23, Z+1	; 0x01
    554c:	82 81       	ldd	r24, Z+2	; 0x02
    554e:	93 81       	ldd	r25, Z+3	; 0x03
    5550:	0a c0       	rjmp	.+20     	; 0x5566 <vfprintf+0x53e>
    5552:	f2 e0       	ldi	r31, 0x02	; 2
    5554:	af 0e       	add	r10, r31
    5556:	b1 1c       	adc	r11, r1
    5558:	f6 01       	movw	r30, r12
    555a:	60 81       	ld	r22, Z
    555c:	71 81       	ldd	r23, Z+1	; 0x01
    555e:	88 27       	eor	r24, r24
    5560:	77 fd       	sbrc	r23, 7
    5562:	80 95       	com	r24
    5564:	98 2f       	mov	r25, r24
    5566:	02 2f       	mov	r16, r18
    5568:	0f 76       	andi	r16, 0x6F	; 111
    556a:	97 ff       	sbrs	r25, 7
    556c:	08 c0       	rjmp	.+16     	; 0x557e <vfprintf+0x556>
    556e:	90 95       	com	r25
    5570:	80 95       	com	r24
    5572:	70 95       	com	r23
    5574:	61 95       	neg	r22
    5576:	7f 4f       	sbci	r23, 0xFF	; 255
    5578:	8f 4f       	sbci	r24, 0xFF	; 255
    557a:	9f 4f       	sbci	r25, 0xFF	; 255
    557c:	00 68       	ori	r16, 0x80	; 128
    557e:	2a e0       	ldi	r18, 0x0A	; 10
    5580:	30 e0       	ldi	r19, 0x00	; 0
    5582:	a4 01       	movw	r20, r8
    5584:	0e 94 0e 2d 	call	0x5a1c	; 0x5a1c <__ultoa_invert>
    5588:	c8 2e       	mov	r12, r24
    558a:	c8 18       	sub	r12, r8
    558c:	3e c0       	rjmp	.+124    	; 0x560a <vfprintf+0x5e2>
    558e:	02 2f       	mov	r16, r18
    5590:	85 37       	cpi	r24, 0x75	; 117
    5592:	21 f4       	brne	.+8      	; 0x559c <vfprintf+0x574>
    5594:	0f 7e       	andi	r16, 0xEF	; 239
    5596:	2a e0       	ldi	r18, 0x0A	; 10
    5598:	30 e0       	ldi	r19, 0x00	; 0
    559a:	1d c0       	rjmp	.+58     	; 0x55d6 <vfprintf+0x5ae>
    559c:	09 7f       	andi	r16, 0xF9	; 249
    559e:	8f 36       	cpi	r24, 0x6F	; 111
    55a0:	91 f0       	breq	.+36     	; 0x55c6 <vfprintf+0x59e>
    55a2:	18 f4       	brcc	.+6      	; 0x55aa <vfprintf+0x582>
    55a4:	88 35       	cpi	r24, 0x58	; 88
    55a6:	59 f0       	breq	.+22     	; 0x55be <vfprintf+0x596>
    55a8:	b0 c0       	rjmp	.+352    	; 0x570a <vfprintf+0x6e2>
    55aa:	80 37       	cpi	r24, 0x70	; 112
    55ac:	19 f0       	breq	.+6      	; 0x55b4 <vfprintf+0x58c>
    55ae:	88 37       	cpi	r24, 0x78	; 120
    55b0:	11 f0       	breq	.+4      	; 0x55b6 <vfprintf+0x58e>
    55b2:	ab c0       	rjmp	.+342    	; 0x570a <vfprintf+0x6e2>
    55b4:	00 61       	ori	r16, 0x10	; 16
    55b6:	04 ff       	sbrs	r16, 4
    55b8:	09 c0       	rjmp	.+18     	; 0x55cc <vfprintf+0x5a4>
    55ba:	04 60       	ori	r16, 0x04	; 4
    55bc:	07 c0       	rjmp	.+14     	; 0x55cc <vfprintf+0x5a4>
    55be:	24 ff       	sbrs	r18, 4
    55c0:	08 c0       	rjmp	.+16     	; 0x55d2 <vfprintf+0x5aa>
    55c2:	06 60       	ori	r16, 0x06	; 6
    55c4:	06 c0       	rjmp	.+12     	; 0x55d2 <vfprintf+0x5aa>
    55c6:	28 e0       	ldi	r18, 0x08	; 8
    55c8:	30 e0       	ldi	r19, 0x00	; 0
    55ca:	05 c0       	rjmp	.+10     	; 0x55d6 <vfprintf+0x5ae>
    55cc:	20 e1       	ldi	r18, 0x10	; 16
    55ce:	30 e0       	ldi	r19, 0x00	; 0
    55d0:	02 c0       	rjmp	.+4      	; 0x55d6 <vfprintf+0x5ae>
    55d2:	20 e1       	ldi	r18, 0x10	; 16
    55d4:	32 e0       	ldi	r19, 0x02	; 2
    55d6:	56 01       	movw	r10, r12
    55d8:	07 ff       	sbrs	r16, 7
    55da:	09 c0       	rjmp	.+18     	; 0x55ee <vfprintf+0x5c6>
    55dc:	f4 e0       	ldi	r31, 0x04	; 4
    55de:	af 0e       	add	r10, r31
    55e0:	b1 1c       	adc	r11, r1
    55e2:	f6 01       	movw	r30, r12
    55e4:	60 81       	ld	r22, Z
    55e6:	71 81       	ldd	r23, Z+1	; 0x01
    55e8:	82 81       	ldd	r24, Z+2	; 0x02
    55ea:	93 81       	ldd	r25, Z+3	; 0x03
    55ec:	08 c0       	rjmp	.+16     	; 0x55fe <vfprintf+0x5d6>
    55ee:	f2 e0       	ldi	r31, 0x02	; 2
    55f0:	af 0e       	add	r10, r31
    55f2:	b1 1c       	adc	r11, r1
    55f4:	f6 01       	movw	r30, r12
    55f6:	60 81       	ld	r22, Z
    55f8:	71 81       	ldd	r23, Z+1	; 0x01
    55fa:	80 e0       	ldi	r24, 0x00	; 0
    55fc:	90 e0       	ldi	r25, 0x00	; 0
    55fe:	a4 01       	movw	r20, r8
    5600:	0e 94 0e 2d 	call	0x5a1c	; 0x5a1c <__ultoa_invert>
    5604:	c8 2e       	mov	r12, r24
    5606:	c8 18       	sub	r12, r8
    5608:	0f 77       	andi	r16, 0x7F	; 127
    560a:	06 ff       	sbrs	r16, 6
    560c:	0b c0       	rjmp	.+22     	; 0x5624 <vfprintf+0x5fc>
    560e:	20 2f       	mov	r18, r16
    5610:	2e 7f       	andi	r18, 0xFE	; 254
    5612:	c1 16       	cp	r12, r17
    5614:	50 f4       	brcc	.+20     	; 0x562a <vfprintf+0x602>
    5616:	04 ff       	sbrs	r16, 4
    5618:	0a c0       	rjmp	.+20     	; 0x562e <vfprintf+0x606>
    561a:	02 fd       	sbrc	r16, 2
    561c:	08 c0       	rjmp	.+16     	; 0x562e <vfprintf+0x606>
    561e:	20 2f       	mov	r18, r16
    5620:	2e 7e       	andi	r18, 0xEE	; 238
    5622:	05 c0       	rjmp	.+10     	; 0x562e <vfprintf+0x606>
    5624:	dc 2c       	mov	r13, r12
    5626:	20 2f       	mov	r18, r16
    5628:	03 c0       	rjmp	.+6      	; 0x5630 <vfprintf+0x608>
    562a:	dc 2c       	mov	r13, r12
    562c:	01 c0       	rjmp	.+2      	; 0x5630 <vfprintf+0x608>
    562e:	d1 2e       	mov	r13, r17
    5630:	24 ff       	sbrs	r18, 4
    5632:	0d c0       	rjmp	.+26     	; 0x564e <vfprintf+0x626>
    5634:	fe 01       	movw	r30, r28
    5636:	ec 0d       	add	r30, r12
    5638:	f1 1d       	adc	r31, r1
    563a:	80 81       	ld	r24, Z
    563c:	80 33       	cpi	r24, 0x30	; 48
    563e:	11 f4       	brne	.+4      	; 0x5644 <vfprintf+0x61c>
    5640:	29 7e       	andi	r18, 0xE9	; 233
    5642:	09 c0       	rjmp	.+18     	; 0x5656 <vfprintf+0x62e>
    5644:	22 ff       	sbrs	r18, 2
    5646:	06 c0       	rjmp	.+12     	; 0x5654 <vfprintf+0x62c>
    5648:	d3 94       	inc	r13
    564a:	d3 94       	inc	r13
    564c:	04 c0       	rjmp	.+8      	; 0x5656 <vfprintf+0x62e>
    564e:	82 2f       	mov	r24, r18
    5650:	86 78       	andi	r24, 0x86	; 134
    5652:	09 f0       	breq	.+2      	; 0x5656 <vfprintf+0x62e>
    5654:	d3 94       	inc	r13
    5656:	23 fd       	sbrc	r18, 3
    5658:	13 c0       	rjmp	.+38     	; 0x5680 <vfprintf+0x658>
    565a:	20 ff       	sbrs	r18, 0
    565c:	06 c0       	rjmp	.+12     	; 0x566a <vfprintf+0x642>
    565e:	1c 2d       	mov	r17, r12
    5660:	d5 14       	cp	r13, r5
    5662:	18 f4       	brcc	.+6      	; 0x566a <vfprintf+0x642>
    5664:	15 0d       	add	r17, r5
    5666:	1d 19       	sub	r17, r13
    5668:	d5 2c       	mov	r13, r5
    566a:	d5 14       	cp	r13, r5
    566c:	68 f4       	brcc	.+26     	; 0x5688 <vfprintf+0x660>
    566e:	b7 01       	movw	r22, r14
    5670:	80 e2       	ldi	r24, 0x20	; 32
    5672:	90 e0       	ldi	r25, 0x00	; 0
    5674:	2b 8b       	std	Y+19, r18	; 0x13
    5676:	0e 94 ba 2c 	call	0x5974	; 0x5974 <fputc>
    567a:	d3 94       	inc	r13
    567c:	2b 89       	ldd	r18, Y+19	; 0x13
    567e:	f5 cf       	rjmp	.-22     	; 0x566a <vfprintf+0x642>
    5680:	d5 14       	cp	r13, r5
    5682:	10 f4       	brcc	.+4      	; 0x5688 <vfprintf+0x660>
    5684:	5d 18       	sub	r5, r13
    5686:	01 c0       	rjmp	.+2      	; 0x568a <vfprintf+0x662>
    5688:	51 2c       	mov	r5, r1
    568a:	24 ff       	sbrs	r18, 4
    568c:	12 c0       	rjmp	.+36     	; 0x56b2 <vfprintf+0x68a>
    568e:	b7 01       	movw	r22, r14
    5690:	80 e3       	ldi	r24, 0x30	; 48
    5692:	90 e0       	ldi	r25, 0x00	; 0
    5694:	2b 8b       	std	Y+19, r18	; 0x13
    5696:	0e 94 ba 2c 	call	0x5974	; 0x5974 <fputc>
    569a:	2b 89       	ldd	r18, Y+19	; 0x13
    569c:	22 ff       	sbrs	r18, 2
    569e:	17 c0       	rjmp	.+46     	; 0x56ce <vfprintf+0x6a6>
    56a0:	21 ff       	sbrs	r18, 1
    56a2:	03 c0       	rjmp	.+6      	; 0x56aa <vfprintf+0x682>
    56a4:	88 e5       	ldi	r24, 0x58	; 88
    56a6:	90 e0       	ldi	r25, 0x00	; 0
    56a8:	02 c0       	rjmp	.+4      	; 0x56ae <vfprintf+0x686>
    56aa:	88 e7       	ldi	r24, 0x78	; 120
    56ac:	90 e0       	ldi	r25, 0x00	; 0
    56ae:	b7 01       	movw	r22, r14
    56b0:	0c c0       	rjmp	.+24     	; 0x56ca <vfprintf+0x6a2>
    56b2:	82 2f       	mov	r24, r18
    56b4:	86 78       	andi	r24, 0x86	; 134
    56b6:	59 f0       	breq	.+22     	; 0x56ce <vfprintf+0x6a6>
    56b8:	21 fd       	sbrc	r18, 1
    56ba:	02 c0       	rjmp	.+4      	; 0x56c0 <vfprintf+0x698>
    56bc:	80 e2       	ldi	r24, 0x20	; 32
    56be:	01 c0       	rjmp	.+2      	; 0x56c2 <vfprintf+0x69a>
    56c0:	8b e2       	ldi	r24, 0x2B	; 43
    56c2:	27 fd       	sbrc	r18, 7
    56c4:	8d e2       	ldi	r24, 0x2D	; 45
    56c6:	b7 01       	movw	r22, r14
    56c8:	90 e0       	ldi	r25, 0x00	; 0
    56ca:	0e 94 ba 2c 	call	0x5974	; 0x5974 <fputc>
    56ce:	c1 16       	cp	r12, r17
    56d0:	38 f4       	brcc	.+14     	; 0x56e0 <vfprintf+0x6b8>
    56d2:	b7 01       	movw	r22, r14
    56d4:	80 e3       	ldi	r24, 0x30	; 48
    56d6:	90 e0       	ldi	r25, 0x00	; 0
    56d8:	0e 94 ba 2c 	call	0x5974	; 0x5974 <fputc>
    56dc:	11 50       	subi	r17, 0x01	; 1
    56de:	f7 cf       	rjmp	.-18     	; 0x56ce <vfprintf+0x6a6>
    56e0:	ca 94       	dec	r12
    56e2:	f4 01       	movw	r30, r8
    56e4:	ec 0d       	add	r30, r12
    56e6:	f1 1d       	adc	r31, r1
    56e8:	80 81       	ld	r24, Z
    56ea:	b7 01       	movw	r22, r14
    56ec:	90 e0       	ldi	r25, 0x00	; 0
    56ee:	0e 94 ba 2c 	call	0x5974	; 0x5974 <fputc>
    56f2:	c1 10       	cpse	r12, r1
    56f4:	f5 cf       	rjmp	.-22     	; 0x56e0 <vfprintf+0x6b8>
    56f6:	55 20       	and	r5, r5
    56f8:	09 f4       	brne	.+2      	; 0x56fc <vfprintf+0x6d4>
    56fa:	c2 cc       	rjmp	.-1660   	; 0x5080 <vfprintf+0x58>
    56fc:	b7 01       	movw	r22, r14
    56fe:	80 e2       	ldi	r24, 0x20	; 32
    5700:	90 e0       	ldi	r25, 0x00	; 0
    5702:	0e 94 ba 2c 	call	0x5974	; 0x5974 <fputc>
    5706:	5a 94       	dec	r5
    5708:	f6 cf       	rjmp	.-20     	; 0x56f6 <vfprintf+0x6ce>
    570a:	f7 01       	movw	r30, r14
    570c:	86 81       	ldd	r24, Z+6	; 0x06
    570e:	97 81       	ldd	r25, Z+7	; 0x07
    5710:	02 c0       	rjmp	.+4      	; 0x5716 <vfprintf+0x6ee>
    5712:	8f ef       	ldi	r24, 0xFF	; 255
    5714:	9f ef       	ldi	r25, 0xFF	; 255
    5716:	63 96       	adiw	r28, 0x13	; 19
    5718:	e2 e1       	ldi	r30, 0x12	; 18
    571a:	0c 94 b1 2b 	jmp	0x5762	; 0x5762 <__epilogue_restores__>

0000571e <__tablejump2__>:
    571e:	ee 0f       	add	r30, r30
    5720:	ff 1f       	adc	r31, r31

00005722 <__tablejump__>:
    5722:	05 90       	lpm	r0, Z+
    5724:	f4 91       	lpm	r31, Z
    5726:	e0 2d       	mov	r30, r0
    5728:	09 94       	ijmp

0000572a <__prologue_saves__>:
    572a:	2f 92       	push	r2
    572c:	3f 92       	push	r3
    572e:	4f 92       	push	r4
    5730:	5f 92       	push	r5
    5732:	6f 92       	push	r6
    5734:	7f 92       	push	r7
    5736:	8f 92       	push	r8
    5738:	9f 92       	push	r9
    573a:	af 92       	push	r10
    573c:	bf 92       	push	r11
    573e:	cf 92       	push	r12
    5740:	df 92       	push	r13
    5742:	ef 92       	push	r14
    5744:	ff 92       	push	r15
    5746:	0f 93       	push	r16
    5748:	1f 93       	push	r17
    574a:	cf 93       	push	r28
    574c:	df 93       	push	r29
    574e:	cd b7       	in	r28, 0x3d	; 61
    5750:	de b7       	in	r29, 0x3e	; 62
    5752:	ca 1b       	sub	r28, r26
    5754:	db 0b       	sbc	r29, r27
    5756:	0f b6       	in	r0, 0x3f	; 63
    5758:	f8 94       	cli
    575a:	de bf       	out	0x3e, r29	; 62
    575c:	0f be       	out	0x3f, r0	; 63
    575e:	cd bf       	out	0x3d, r28	; 61
    5760:	09 94       	ijmp

00005762 <__epilogue_restores__>:
    5762:	2a 88       	ldd	r2, Y+18	; 0x12
    5764:	39 88       	ldd	r3, Y+17	; 0x11
    5766:	48 88       	ldd	r4, Y+16	; 0x10
    5768:	5f 84       	ldd	r5, Y+15	; 0x0f
    576a:	6e 84       	ldd	r6, Y+14	; 0x0e
    576c:	7d 84       	ldd	r7, Y+13	; 0x0d
    576e:	8c 84       	ldd	r8, Y+12	; 0x0c
    5770:	9b 84       	ldd	r9, Y+11	; 0x0b
    5772:	aa 84       	ldd	r10, Y+10	; 0x0a
    5774:	b9 84       	ldd	r11, Y+9	; 0x09
    5776:	c8 84       	ldd	r12, Y+8	; 0x08
    5778:	df 80       	ldd	r13, Y+7	; 0x07
    577a:	ee 80       	ldd	r14, Y+6	; 0x06
    577c:	fd 80       	ldd	r15, Y+5	; 0x05
    577e:	0c 81       	ldd	r16, Y+4	; 0x04
    5780:	1b 81       	ldd	r17, Y+3	; 0x03
    5782:	aa 81       	ldd	r26, Y+2	; 0x02
    5784:	b9 81       	ldd	r27, Y+1	; 0x01
    5786:	ce 0f       	add	r28, r30
    5788:	d1 1d       	adc	r29, r1
    578a:	0f b6       	in	r0, 0x3f	; 63
    578c:	f8 94       	cli
    578e:	de bf       	out	0x3e, r29	; 62
    5790:	0f be       	out	0x3f, r0	; 63
    5792:	cd bf       	out	0x3d, r28	; 61
    5794:	ed 01       	movw	r28, r26
    5796:	08 95       	ret

00005798 <__ftoa_engine>:
    5798:	28 30       	cpi	r18, 0x08	; 8
    579a:	08 f0       	brcs	.+2      	; 0x579e <__ftoa_engine+0x6>
    579c:	27 e0       	ldi	r18, 0x07	; 7
    579e:	33 27       	eor	r19, r19
    57a0:	da 01       	movw	r26, r20
    57a2:	99 0f       	add	r25, r25
    57a4:	31 1d       	adc	r19, r1
    57a6:	87 fd       	sbrc	r24, 7
    57a8:	91 60       	ori	r25, 0x01	; 1
    57aa:	00 96       	adiw	r24, 0x00	; 0
    57ac:	61 05       	cpc	r22, r1
    57ae:	71 05       	cpc	r23, r1
    57b0:	39 f4       	brne	.+14     	; 0x57c0 <__ftoa_engine+0x28>
    57b2:	32 60       	ori	r19, 0x02	; 2
    57b4:	2e 5f       	subi	r18, 0xFE	; 254
    57b6:	3d 93       	st	X+, r19
    57b8:	30 e3       	ldi	r19, 0x30	; 48
    57ba:	2a 95       	dec	r18
    57bc:	e1 f7       	brne	.-8      	; 0x57b6 <__ftoa_engine+0x1e>
    57be:	08 95       	ret
    57c0:	9f 3f       	cpi	r25, 0xFF	; 255
    57c2:	30 f0       	brcs	.+12     	; 0x57d0 <__ftoa_engine+0x38>
    57c4:	80 38       	cpi	r24, 0x80	; 128
    57c6:	71 05       	cpc	r23, r1
    57c8:	61 05       	cpc	r22, r1
    57ca:	09 f0       	breq	.+2      	; 0x57ce <__ftoa_engine+0x36>
    57cc:	3c 5f       	subi	r19, 0xFC	; 252
    57ce:	3c 5f       	subi	r19, 0xFC	; 252
    57d0:	3d 93       	st	X+, r19
    57d2:	91 30       	cpi	r25, 0x01	; 1
    57d4:	08 f0       	brcs	.+2      	; 0x57d8 <__ftoa_engine+0x40>
    57d6:	80 68       	ori	r24, 0x80	; 128
    57d8:	91 1d       	adc	r25, r1
    57da:	df 93       	push	r29
    57dc:	cf 93       	push	r28
    57de:	1f 93       	push	r17
    57e0:	0f 93       	push	r16
    57e2:	ff 92       	push	r15
    57e4:	ef 92       	push	r14
    57e6:	19 2f       	mov	r17, r25
    57e8:	98 7f       	andi	r25, 0xF8	; 248
    57ea:	96 95       	lsr	r25
    57ec:	e9 2f       	mov	r30, r25
    57ee:	96 95       	lsr	r25
    57f0:	96 95       	lsr	r25
    57f2:	e9 0f       	add	r30, r25
    57f4:	ff 27       	eor	r31, r31
    57f6:	e6 52       	subi	r30, 0x26	; 38
    57f8:	fb 4f       	sbci	r31, 0xFB	; 251
    57fa:	99 27       	eor	r25, r25
    57fc:	33 27       	eor	r19, r19
    57fe:	ee 24       	eor	r14, r14
    5800:	ff 24       	eor	r15, r15
    5802:	a7 01       	movw	r20, r14
    5804:	e7 01       	movw	r28, r14
    5806:	05 90       	lpm	r0, Z+
    5808:	08 94       	sec
    580a:	07 94       	ror	r0
    580c:	28 f4       	brcc	.+10     	; 0x5818 <__ftoa_engine+0x80>
    580e:	36 0f       	add	r19, r22
    5810:	e7 1e       	adc	r14, r23
    5812:	f8 1e       	adc	r15, r24
    5814:	49 1f       	adc	r20, r25
    5816:	51 1d       	adc	r21, r1
    5818:	66 0f       	add	r22, r22
    581a:	77 1f       	adc	r23, r23
    581c:	88 1f       	adc	r24, r24
    581e:	99 1f       	adc	r25, r25
    5820:	06 94       	lsr	r0
    5822:	a1 f7       	brne	.-24     	; 0x580c <__ftoa_engine+0x74>
    5824:	05 90       	lpm	r0, Z+
    5826:	07 94       	ror	r0
    5828:	28 f4       	brcc	.+10     	; 0x5834 <__ftoa_engine+0x9c>
    582a:	e7 0e       	add	r14, r23
    582c:	f8 1e       	adc	r15, r24
    582e:	49 1f       	adc	r20, r25
    5830:	56 1f       	adc	r21, r22
    5832:	c1 1d       	adc	r28, r1
    5834:	77 0f       	add	r23, r23
    5836:	88 1f       	adc	r24, r24
    5838:	99 1f       	adc	r25, r25
    583a:	66 1f       	adc	r22, r22
    583c:	06 94       	lsr	r0
    583e:	a1 f7       	brne	.-24     	; 0x5828 <__ftoa_engine+0x90>
    5840:	05 90       	lpm	r0, Z+
    5842:	07 94       	ror	r0
    5844:	28 f4       	brcc	.+10     	; 0x5850 <__ftoa_engine+0xb8>
    5846:	f8 0e       	add	r15, r24
    5848:	49 1f       	adc	r20, r25
    584a:	56 1f       	adc	r21, r22
    584c:	c7 1f       	adc	r28, r23
    584e:	d1 1d       	adc	r29, r1
    5850:	88 0f       	add	r24, r24
    5852:	99 1f       	adc	r25, r25
    5854:	66 1f       	adc	r22, r22
    5856:	77 1f       	adc	r23, r23
    5858:	06 94       	lsr	r0
    585a:	a1 f7       	brne	.-24     	; 0x5844 <__ftoa_engine+0xac>
    585c:	05 90       	lpm	r0, Z+
    585e:	07 94       	ror	r0
    5860:	20 f4       	brcc	.+8      	; 0x586a <__ftoa_engine+0xd2>
    5862:	49 0f       	add	r20, r25
    5864:	56 1f       	adc	r21, r22
    5866:	c7 1f       	adc	r28, r23
    5868:	d8 1f       	adc	r29, r24
    586a:	99 0f       	add	r25, r25
    586c:	66 1f       	adc	r22, r22
    586e:	77 1f       	adc	r23, r23
    5870:	88 1f       	adc	r24, r24
    5872:	06 94       	lsr	r0
    5874:	a9 f7       	brne	.-22     	; 0x5860 <__ftoa_engine+0xc8>
    5876:	84 91       	lpm	r24, Z
    5878:	10 95       	com	r17
    587a:	17 70       	andi	r17, 0x07	; 7
    587c:	41 f0       	breq	.+16     	; 0x588e <__ftoa_engine+0xf6>
    587e:	d6 95       	lsr	r29
    5880:	c7 95       	ror	r28
    5882:	57 95       	ror	r21
    5884:	47 95       	ror	r20
    5886:	f7 94       	ror	r15
    5888:	e7 94       	ror	r14
    588a:	1a 95       	dec	r17
    588c:	c1 f7       	brne	.-16     	; 0x587e <__ftoa_engine+0xe6>
    588e:	e0 e8       	ldi	r30, 0x80	; 128
    5890:	f4 e0       	ldi	r31, 0x04	; 4
    5892:	68 94       	set
    5894:	15 90       	lpm	r1, Z+
    5896:	15 91       	lpm	r17, Z+
    5898:	35 91       	lpm	r19, Z+
    589a:	65 91       	lpm	r22, Z+
    589c:	95 91       	lpm	r25, Z+
    589e:	05 90       	lpm	r0, Z+
    58a0:	7f e2       	ldi	r23, 0x2F	; 47
    58a2:	73 95       	inc	r23
    58a4:	e1 18       	sub	r14, r1
    58a6:	f1 0a       	sbc	r15, r17
    58a8:	43 0b       	sbc	r20, r19
    58aa:	56 0b       	sbc	r21, r22
    58ac:	c9 0b       	sbc	r28, r25
    58ae:	d0 09       	sbc	r29, r0
    58b0:	c0 f7       	brcc	.-16     	; 0x58a2 <__ftoa_engine+0x10a>
    58b2:	e1 0c       	add	r14, r1
    58b4:	f1 1e       	adc	r15, r17
    58b6:	43 1f       	adc	r20, r19
    58b8:	56 1f       	adc	r21, r22
    58ba:	c9 1f       	adc	r28, r25
    58bc:	d0 1d       	adc	r29, r0
    58be:	7e f4       	brtc	.+30     	; 0x58de <__ftoa_engine+0x146>
    58c0:	70 33       	cpi	r23, 0x30	; 48
    58c2:	11 f4       	brne	.+4      	; 0x58c8 <__ftoa_engine+0x130>
    58c4:	8a 95       	dec	r24
    58c6:	e6 cf       	rjmp	.-52     	; 0x5894 <__ftoa_engine+0xfc>
    58c8:	e8 94       	clt
    58ca:	01 50       	subi	r16, 0x01	; 1
    58cc:	30 f0       	brcs	.+12     	; 0x58da <__ftoa_engine+0x142>
    58ce:	08 0f       	add	r16, r24
    58d0:	0a f4       	brpl	.+2      	; 0x58d4 <__ftoa_engine+0x13c>
    58d2:	00 27       	eor	r16, r16
    58d4:	02 17       	cp	r16, r18
    58d6:	08 f4       	brcc	.+2      	; 0x58da <__ftoa_engine+0x142>
    58d8:	20 2f       	mov	r18, r16
    58da:	23 95       	inc	r18
    58dc:	02 2f       	mov	r16, r18
    58de:	7a 33       	cpi	r23, 0x3A	; 58
    58e0:	28 f0       	brcs	.+10     	; 0x58ec <__ftoa_engine+0x154>
    58e2:	79 e3       	ldi	r23, 0x39	; 57
    58e4:	7d 93       	st	X+, r23
    58e6:	2a 95       	dec	r18
    58e8:	e9 f7       	brne	.-6      	; 0x58e4 <__ftoa_engine+0x14c>
    58ea:	10 c0       	rjmp	.+32     	; 0x590c <__ftoa_engine+0x174>
    58ec:	7d 93       	st	X+, r23
    58ee:	2a 95       	dec	r18
    58f0:	89 f6       	brne	.-94     	; 0x5894 <__ftoa_engine+0xfc>
    58f2:	06 94       	lsr	r0
    58f4:	97 95       	ror	r25
    58f6:	67 95       	ror	r22
    58f8:	37 95       	ror	r19
    58fa:	17 95       	ror	r17
    58fc:	17 94       	ror	r1
    58fe:	e1 18       	sub	r14, r1
    5900:	f1 0a       	sbc	r15, r17
    5902:	43 0b       	sbc	r20, r19
    5904:	56 0b       	sbc	r21, r22
    5906:	c9 0b       	sbc	r28, r25
    5908:	d0 09       	sbc	r29, r0
    590a:	98 f0       	brcs	.+38     	; 0x5932 <__ftoa_engine+0x19a>
    590c:	23 95       	inc	r18
    590e:	7e 91       	ld	r23, -X
    5910:	73 95       	inc	r23
    5912:	7a 33       	cpi	r23, 0x3A	; 58
    5914:	08 f0       	brcs	.+2      	; 0x5918 <__ftoa_engine+0x180>
    5916:	70 e3       	ldi	r23, 0x30	; 48
    5918:	7c 93       	st	X, r23
    591a:	20 13       	cpse	r18, r16
    591c:	b8 f7       	brcc	.-18     	; 0x590c <__ftoa_engine+0x174>
    591e:	7e 91       	ld	r23, -X
    5920:	70 61       	ori	r23, 0x10	; 16
    5922:	7d 93       	st	X+, r23
    5924:	30 f0       	brcs	.+12     	; 0x5932 <__ftoa_engine+0x19a>
    5926:	83 95       	inc	r24
    5928:	71 e3       	ldi	r23, 0x31	; 49
    592a:	7d 93       	st	X+, r23
    592c:	70 e3       	ldi	r23, 0x30	; 48
    592e:	2a 95       	dec	r18
    5930:	e1 f7       	brne	.-8      	; 0x592a <__ftoa_engine+0x192>
    5932:	11 24       	eor	r1, r1
    5934:	ef 90       	pop	r14
    5936:	ff 90       	pop	r15
    5938:	0f 91       	pop	r16
    593a:	1f 91       	pop	r17
    593c:	cf 91       	pop	r28
    593e:	df 91       	pop	r29
    5940:	99 27       	eor	r25, r25
    5942:	87 fd       	sbrc	r24, 7
    5944:	90 95       	com	r25
    5946:	08 95       	ret

00005948 <strnlen_P>:
    5948:	fc 01       	movw	r30, r24
    594a:	05 90       	lpm	r0, Z+
    594c:	61 50       	subi	r22, 0x01	; 1
    594e:	70 40       	sbci	r23, 0x00	; 0
    5950:	01 10       	cpse	r0, r1
    5952:	d8 f7       	brcc	.-10     	; 0x594a <strnlen_P+0x2>
    5954:	80 95       	com	r24
    5956:	90 95       	com	r25
    5958:	8e 0f       	add	r24, r30
    595a:	9f 1f       	adc	r25, r31
    595c:	08 95       	ret

0000595e <strnlen>:
    595e:	fc 01       	movw	r30, r24
    5960:	61 50       	subi	r22, 0x01	; 1
    5962:	70 40       	sbci	r23, 0x00	; 0
    5964:	01 90       	ld	r0, Z+
    5966:	01 10       	cpse	r0, r1
    5968:	d8 f7       	brcc	.-10     	; 0x5960 <strnlen+0x2>
    596a:	80 95       	com	r24
    596c:	90 95       	com	r25
    596e:	8e 0f       	add	r24, r30
    5970:	9f 1f       	adc	r25, r31
    5972:	08 95       	ret

00005974 <fputc>:
    5974:	0f 93       	push	r16
    5976:	1f 93       	push	r17
    5978:	cf 93       	push	r28
    597a:	df 93       	push	r29
    597c:	18 2f       	mov	r17, r24
    597e:	09 2f       	mov	r16, r25
    5980:	eb 01       	movw	r28, r22
    5982:	8b 81       	ldd	r24, Y+3	; 0x03
    5984:	81 fd       	sbrc	r24, 1
    5986:	03 c0       	rjmp	.+6      	; 0x598e <fputc+0x1a>
    5988:	8f ef       	ldi	r24, 0xFF	; 255
    598a:	9f ef       	ldi	r25, 0xFF	; 255
    598c:	20 c0       	rjmp	.+64     	; 0x59ce <fputc+0x5a>
    598e:	82 ff       	sbrs	r24, 2
    5990:	10 c0       	rjmp	.+32     	; 0x59b2 <fputc+0x3e>
    5992:	4e 81       	ldd	r20, Y+6	; 0x06
    5994:	5f 81       	ldd	r21, Y+7	; 0x07
    5996:	2c 81       	ldd	r18, Y+4	; 0x04
    5998:	3d 81       	ldd	r19, Y+5	; 0x05
    599a:	42 17       	cp	r20, r18
    599c:	53 07       	cpc	r21, r19
    599e:	7c f4       	brge	.+30     	; 0x59be <fputc+0x4a>
    59a0:	e8 81       	ld	r30, Y
    59a2:	f9 81       	ldd	r31, Y+1	; 0x01
    59a4:	9f 01       	movw	r18, r30
    59a6:	2f 5f       	subi	r18, 0xFF	; 255
    59a8:	3f 4f       	sbci	r19, 0xFF	; 255
    59aa:	39 83       	std	Y+1, r19	; 0x01
    59ac:	28 83       	st	Y, r18
    59ae:	10 83       	st	Z, r17
    59b0:	06 c0       	rjmp	.+12     	; 0x59be <fputc+0x4a>
    59b2:	e8 85       	ldd	r30, Y+8	; 0x08
    59b4:	f9 85       	ldd	r31, Y+9	; 0x09
    59b6:	81 2f       	mov	r24, r17
    59b8:	09 95       	icall
    59ba:	89 2b       	or	r24, r25
    59bc:	29 f7       	brne	.-54     	; 0x5988 <fputc+0x14>
    59be:	2e 81       	ldd	r18, Y+6	; 0x06
    59c0:	3f 81       	ldd	r19, Y+7	; 0x07
    59c2:	2f 5f       	subi	r18, 0xFF	; 255
    59c4:	3f 4f       	sbci	r19, 0xFF	; 255
    59c6:	3f 83       	std	Y+7, r19	; 0x07
    59c8:	2e 83       	std	Y+6, r18	; 0x06
    59ca:	81 2f       	mov	r24, r17
    59cc:	90 2f       	mov	r25, r16
    59ce:	df 91       	pop	r29
    59d0:	cf 91       	pop	r28
    59d2:	1f 91       	pop	r17
    59d4:	0f 91       	pop	r16
    59d6:	08 95       	ret

000059d8 <sprintf>:
    59d8:	ae e0       	ldi	r26, 0x0E	; 14
    59da:	b0 e0       	ldi	r27, 0x00	; 0
    59dc:	e2 ef       	ldi	r30, 0xF2	; 242
    59de:	fc e2       	ldi	r31, 0x2C	; 44
    59e0:	0c 94 a3 2b 	jmp	0x5746	; 0x5746 <__prologue_saves__+0x1c>
    59e4:	0d 89       	ldd	r16, Y+21	; 0x15
    59e6:	1e 89       	ldd	r17, Y+22	; 0x16
    59e8:	86 e0       	ldi	r24, 0x06	; 6
    59ea:	8c 83       	std	Y+4, r24	; 0x04
    59ec:	1a 83       	std	Y+2, r17	; 0x02
    59ee:	09 83       	std	Y+1, r16	; 0x01
    59f0:	8f ef       	ldi	r24, 0xFF	; 255
    59f2:	9f e7       	ldi	r25, 0x7F	; 127
    59f4:	9e 83       	std	Y+6, r25	; 0x06
    59f6:	8d 83       	std	Y+5, r24	; 0x05
    59f8:	ae 01       	movw	r20, r28
    59fa:	47 5e       	subi	r20, 0xE7	; 231
    59fc:	5f 4f       	sbci	r21, 0xFF	; 255
    59fe:	6f 89       	ldd	r22, Y+23	; 0x17
    5a00:	78 8d       	ldd	r23, Y+24	; 0x18
    5a02:	ce 01       	movw	r24, r28
    5a04:	01 96       	adiw	r24, 0x01	; 1
    5a06:	0e 94 14 28 	call	0x5028	; 0x5028 <vfprintf>
    5a0a:	ef 81       	ldd	r30, Y+7	; 0x07
    5a0c:	f8 85       	ldd	r31, Y+8	; 0x08
    5a0e:	e0 0f       	add	r30, r16
    5a10:	f1 1f       	adc	r31, r17
    5a12:	10 82       	st	Z, r1
    5a14:	2e 96       	adiw	r28, 0x0e	; 14
    5a16:	e4 e0       	ldi	r30, 0x04	; 4
    5a18:	0c 94 bf 2b 	jmp	0x577e	; 0x577e <__epilogue_restores__+0x1c>

00005a1c <__ultoa_invert>:
    5a1c:	fa 01       	movw	r30, r20
    5a1e:	aa 27       	eor	r26, r26
    5a20:	28 30       	cpi	r18, 0x08	; 8
    5a22:	51 f1       	breq	.+84     	; 0x5a78 <__ultoa_invert+0x5c>
    5a24:	20 31       	cpi	r18, 0x10	; 16
    5a26:	81 f1       	breq	.+96     	; 0x5a88 <__ultoa_invert+0x6c>
    5a28:	e8 94       	clt
    5a2a:	6f 93       	push	r22
    5a2c:	6e 7f       	andi	r22, 0xFE	; 254
    5a2e:	6e 5f       	subi	r22, 0xFE	; 254
    5a30:	7f 4f       	sbci	r23, 0xFF	; 255
    5a32:	8f 4f       	sbci	r24, 0xFF	; 255
    5a34:	9f 4f       	sbci	r25, 0xFF	; 255
    5a36:	af 4f       	sbci	r26, 0xFF	; 255
    5a38:	b1 e0       	ldi	r27, 0x01	; 1
    5a3a:	3e d0       	rcall	.+124    	; 0x5ab8 <__ultoa_invert+0x9c>
    5a3c:	b4 e0       	ldi	r27, 0x04	; 4
    5a3e:	3c d0       	rcall	.+120    	; 0x5ab8 <__ultoa_invert+0x9c>
    5a40:	67 0f       	add	r22, r23
    5a42:	78 1f       	adc	r23, r24
    5a44:	89 1f       	adc	r24, r25
    5a46:	9a 1f       	adc	r25, r26
    5a48:	a1 1d       	adc	r26, r1
    5a4a:	68 0f       	add	r22, r24
    5a4c:	79 1f       	adc	r23, r25
    5a4e:	8a 1f       	adc	r24, r26
    5a50:	91 1d       	adc	r25, r1
    5a52:	a1 1d       	adc	r26, r1
    5a54:	6a 0f       	add	r22, r26
    5a56:	71 1d       	adc	r23, r1
    5a58:	81 1d       	adc	r24, r1
    5a5a:	91 1d       	adc	r25, r1
    5a5c:	a1 1d       	adc	r26, r1
    5a5e:	20 d0       	rcall	.+64     	; 0x5aa0 <__ultoa_invert+0x84>
    5a60:	09 f4       	brne	.+2      	; 0x5a64 <__ultoa_invert+0x48>
    5a62:	68 94       	set
    5a64:	3f 91       	pop	r19
    5a66:	2a e0       	ldi	r18, 0x0A	; 10
    5a68:	26 9f       	mul	r18, r22
    5a6a:	11 24       	eor	r1, r1
    5a6c:	30 19       	sub	r19, r0
    5a6e:	30 5d       	subi	r19, 0xD0	; 208
    5a70:	31 93       	st	Z+, r19
    5a72:	de f6       	brtc	.-74     	; 0x5a2a <__ultoa_invert+0xe>
    5a74:	cf 01       	movw	r24, r30
    5a76:	08 95       	ret
    5a78:	46 2f       	mov	r20, r22
    5a7a:	47 70       	andi	r20, 0x07	; 7
    5a7c:	40 5d       	subi	r20, 0xD0	; 208
    5a7e:	41 93       	st	Z+, r20
    5a80:	b3 e0       	ldi	r27, 0x03	; 3
    5a82:	0f d0       	rcall	.+30     	; 0x5aa2 <__ultoa_invert+0x86>
    5a84:	c9 f7       	brne	.-14     	; 0x5a78 <__ultoa_invert+0x5c>
    5a86:	f6 cf       	rjmp	.-20     	; 0x5a74 <__ultoa_invert+0x58>
    5a88:	46 2f       	mov	r20, r22
    5a8a:	4f 70       	andi	r20, 0x0F	; 15
    5a8c:	40 5d       	subi	r20, 0xD0	; 208
    5a8e:	4a 33       	cpi	r20, 0x3A	; 58
    5a90:	18 f0       	brcs	.+6      	; 0x5a98 <__ultoa_invert+0x7c>
    5a92:	49 5d       	subi	r20, 0xD9	; 217
    5a94:	31 fd       	sbrc	r19, 1
    5a96:	40 52       	subi	r20, 0x20	; 32
    5a98:	41 93       	st	Z+, r20
    5a9a:	02 d0       	rcall	.+4      	; 0x5aa0 <__ultoa_invert+0x84>
    5a9c:	a9 f7       	brne	.-22     	; 0x5a88 <__ultoa_invert+0x6c>
    5a9e:	ea cf       	rjmp	.-44     	; 0x5a74 <__ultoa_invert+0x58>
    5aa0:	b4 e0       	ldi	r27, 0x04	; 4
    5aa2:	a6 95       	lsr	r26
    5aa4:	97 95       	ror	r25
    5aa6:	87 95       	ror	r24
    5aa8:	77 95       	ror	r23
    5aaa:	67 95       	ror	r22
    5aac:	ba 95       	dec	r27
    5aae:	c9 f7       	brne	.-14     	; 0x5aa2 <__ultoa_invert+0x86>
    5ab0:	00 97       	sbiw	r24, 0x00	; 0
    5ab2:	61 05       	cpc	r22, r1
    5ab4:	71 05       	cpc	r23, r1
    5ab6:	08 95       	ret
    5ab8:	9b 01       	movw	r18, r22
    5aba:	ac 01       	movw	r20, r24
    5abc:	0a 2e       	mov	r0, r26
    5abe:	06 94       	lsr	r0
    5ac0:	57 95       	ror	r21
    5ac2:	47 95       	ror	r20
    5ac4:	37 95       	ror	r19
    5ac6:	27 95       	ror	r18
    5ac8:	ba 95       	dec	r27
    5aca:	c9 f7       	brne	.-14     	; 0x5abe <__ultoa_invert+0xa2>
    5acc:	62 0f       	add	r22, r18
    5ace:	73 1f       	adc	r23, r19
    5ad0:	84 1f       	adc	r24, r20
    5ad2:	95 1f       	adc	r25, r21
    5ad4:	a0 1d       	adc	r26, r0
    5ad6:	08 95       	ret

00005ad8 <__do_global_dtors>:
    5ad8:	15 e0       	ldi	r17, 0x05	; 5
    5ada:	cc e7       	ldi	r28, 0x7C	; 124
    5adc:	d5 e0       	ldi	r29, 0x05	; 5
    5ade:	04 c0       	rjmp	.+8      	; 0x5ae8 <__do_global_dtors+0x10>
    5ae0:	fe 01       	movw	r30, r28
    5ae2:	0e 94 91 2b 	call	0x5722	; 0x5722 <__tablejump__>
    5ae6:	22 96       	adiw	r28, 0x02	; 2
    5ae8:	ce 37       	cpi	r28, 0x7E	; 126
    5aea:	d1 07       	cpc	r29, r17
    5aec:	c9 f7       	brne	.-14     	; 0x5ae0 <__do_global_dtors+0x8>
    5aee:	f8 94       	cli

00005af0 <__stop_program>:
    5af0:	ff cf       	rjmp	.-2      	; 0x5af0 <__stop_program>
