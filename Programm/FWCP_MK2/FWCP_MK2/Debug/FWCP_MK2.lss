
FWCP_MK2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000218  00800100  0000609e  00006132  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000609e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000499  00800318  00800318  0000634a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000634a  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000003c0  00000000  00000000  000063a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000863c  00000000  00000000  00006766  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001611  00000000  00000000  0000eda2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000333d  00000000  00000000  000103b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000e70  00000000  00000000  000136f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000011a7  00000000  00000000  00014560  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000641b  00000000  00000000  00015707  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000003a8  00000000  00000000  0001bb22  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	d0 c3       	rjmp	.+1952   	; 0x7a2 <__dtors_end>
       2:	00 00       	nop
       4:	fd c3       	rjmp	.+2042   	; 0x800 <__bad_interrupt>
       6:	00 00       	nop
       8:	fb c3       	rjmp	.+2038   	; 0x800 <__bad_interrupt>
       a:	00 00       	nop
       c:	f9 c3       	rjmp	.+2034   	; 0x800 <__bad_interrupt>
       e:	00 00       	nop
      10:	f7 c3       	rjmp	.+2030   	; 0x800 <__bad_interrupt>
      12:	00 00       	nop
      14:	f5 c3       	rjmp	.+2026   	; 0x800 <__bad_interrupt>
      16:	00 00       	nop
      18:	f3 c3       	rjmp	.+2022   	; 0x800 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	f1 c3       	rjmp	.+2018   	; 0x800 <__bad_interrupt>
      1e:	00 00       	nop
      20:	ef c3       	rjmp	.+2014   	; 0x800 <__bad_interrupt>
      22:	00 00       	nop
      24:	ed c3       	rjmp	.+2010   	; 0x800 <__bad_interrupt>
      26:	00 00       	nop
      28:	eb c3       	rjmp	.+2006   	; 0x800 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	0c 94 e4 19 	jmp	0x33c8	; 0x33c8 <__vector_11>
      30:	e7 c3       	rjmp	.+1998   	; 0x800 <__bad_interrupt>
      32:	00 00       	nop
      34:	e5 c3       	rjmp	.+1994   	; 0x800 <__bad_interrupt>
      36:	00 00       	nop
      38:	e3 c3       	rjmp	.+1990   	; 0x800 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	e1 c3       	rjmp	.+1986   	; 0x800 <__bad_interrupt>
      3e:	00 00       	nop
      40:	df c3       	rjmp	.+1982   	; 0x800 <__bad_interrupt>
      42:	00 00       	nop
      44:	dd c3       	rjmp	.+1978   	; 0x800 <__bad_interrupt>
      46:	00 00       	nop
      48:	db c3       	rjmp	.+1974   	; 0x800 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	d9 c3       	rjmp	.+1970   	; 0x800 <__bad_interrupt>
      4e:	00 00       	nop
      50:	d7 c3       	rjmp	.+1966   	; 0x800 <__bad_interrupt>
      52:	00 00       	nop
      54:	d5 c3       	rjmp	.+1962   	; 0x800 <__bad_interrupt>
      56:	00 00       	nop
      58:	d3 c3       	rjmp	.+1958   	; 0x800 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	d1 c3       	rjmp	.+1954   	; 0x800 <__bad_interrupt>
      5e:	00 00       	nop
      60:	cf c3       	rjmp	.+1950   	; 0x800 <__bad_interrupt>
      62:	00 00       	nop
      64:	cd c3       	rjmp	.+1946   	; 0x800 <__bad_interrupt>
      66:	00 00       	nop
      68:	cb c3       	rjmp	.+1942   	; 0x800 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	c9 c3       	rjmp	.+1938   	; 0x800 <__bad_interrupt>
      6e:	00 00       	nop
      70:	c7 c3       	rjmp	.+1934   	; 0x800 <__bad_interrupt>
      72:	00 00       	nop
      74:	c5 c3       	rjmp	.+1930   	; 0x800 <__bad_interrupt>
      76:	00 00       	nop
      78:	c3 c3       	rjmp	.+1926   	; 0x800 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	c1 c3       	rjmp	.+1922   	; 0x800 <__bad_interrupt>
      7e:	00 00       	nop
      80:	bf c3       	rjmp	.+1918   	; 0x800 <__bad_interrupt>
      82:	00 00       	nop
      84:	bd c3       	rjmp	.+1914   	; 0x800 <__bad_interrupt>
      86:	00 00       	nop
      88:	bb c3       	rjmp	.+1910   	; 0x800 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	35 17       	cp	r19, r21
      8e:	5d 17       	cp	r21, r29
      90:	87 17       	cp	r24, r23
      92:	b2 17       	cp	r27, r18
      94:	dc 17       	cp	r29, r28
      96:	05 18       	sub	r0, r5
      98:	2d 18       	sub	r2, r13
      9a:	56 18       	sub	r5, r6
      9c:	ce 18       	sub	r12, r14
      9e:	f9 18       	sub	r15, r9
      a0:	b3 1d       	adc	r27, r3
      a2:	be 1d       	adc	r27, r14
      a4:	cc 1d       	adc	r28, r12
      a6:	d2 1d       	adc	r29, r2
      a8:	d9 1d       	adc	r29, r9
      aa:	e0 1d       	adc	r30, r0
      ac:	ee 1d       	adc	r30, r14
      ae:	7d 1e       	adc	r7, r29
      b0:	83 1e       	adc	r8, r19
      b2:	89 1e       	adc	r8, r25
      b4:	8f 1e       	adc	r8, r31
      b6:	95 1e       	adc	r9, r21
      b8:	9b 1e       	adc	r9, r27
      ba:	a1 1e       	adc	r10, r17
      bc:	a7 1e       	adc	r10, r23
      be:	08 4a       	sbci	r16, 0xA8	; 168
      c0:	d7 3b       	cpi	r29, 0xB7	; 183
      c2:	3b ce       	rjmp	.-906    	; 0xfffffd3a <__eeprom_end+0xff7efd3a>
      c4:	01 6e       	ori	r16, 0xE1	; 225
      c6:	84 bc       	out	0x24, r8	; 36
      c8:	bf fd       	.word	0xfdbf	; ????
      ca:	c1 2f       	mov	r28, r17
      cc:	3d 6c       	ori	r19, 0xCD	; 205
      ce:	74 31       	cpi	r23, 0x14	; 20
      d0:	9a bd       	out	0x2a, r25	; 42
      d2:	56 83       	std	Z+6, r21	; 0x06
      d4:	3d da       	rcall	.-2950   	; 0xfffff550 <__eeprom_end+0xff7ef550>
      d6:	3d 00       	.word	0x003d	; ????
      d8:	c7 7f       	andi	r28, 0xF7	; 247
      da:	11 be       	out	0x31, r1	; 49
      dc:	d9 e4       	ldi	r29, 0x49	; 73
      de:	bb 4c       	sbci	r27, 0xCB	; 203
      e0:	3e 91       	ld	r19, -X
      e2:	6b aa       	std	Y+51, r6	; 0x33
      e4:	aa be       	out	0x3a, r10	; 58
      e6:	00 00       	nop
      e8:	00 80       	ld	r0, Z
      ea:	3f 05       	cpc	r19, r15
      ec:	a8 4c       	sbci	r26, 0xC8	; 200
      ee:	cd b2       	in	r12, 0x1d	; 29
      f0:	d4 4e       	sbci	r29, 0xE4	; 228
      f2:	b9 38       	cpi	r27, 0x89	; 137
      f4:	36 a9       	ldd	r19, Z+54	; 0x36
      f6:	02 0c       	add	r0, r2
      f8:	50 b9       	out	0x00, r21	; 0
      fa:	91 86       	std	Z+9, r9	; 0x09
      fc:	88 08       	sbc	r8, r8
      fe:	3c a6       	std	Y+44, r3	; 0x2c
     100:	aa aa       	std	Y+50, r10	; 0x32
     102:	2a be       	out	0x3a, r2	; 58
     104:	00 00       	nop
     106:	00 80       	ld	r0, Z
     108:	3f 08       	sbc	r3, r15
     10a:	00 00       	nop
     10c:	00 be       	out	0x30, r0	; 48
     10e:	92 24       	eor	r9, r2
     110:	49 12       	cpse	r4, r25
     112:	3e ab       	std	Y+54, r19	; 0x36
     114:	aa aa       	std	Y+50, r10	; 0x32
     116:	2a be       	out	0x3a, r2	; 58
     118:	cd cc       	rjmp	.-1638   	; 0xfffffab4 <__eeprom_end+0xff7efab4>
     11a:	cc 4c       	sbci	r28, 0xCC	; 204
     11c:	3e 00       	.word	0x003e	; ????
     11e:	00 00       	nop
     120:	80 be       	out	0x30, r8	; 48
     122:	ab aa       	std	Y+51, r10	; 0x33
     124:	aa aa       	std	Y+50, r10	; 0x32
     126:	3e 00       	.word	0x003e	; ????
     128:	00 00       	nop
     12a:	00 bf       	out	0x30, r16	; 48
     12c:	00 00       	nop
     12e:	00 80       	ld	r0, Z
     130:	3f 00       	.word	0x003f	; ????
     132:	00 00       	nop
     134:	00 00       	nop
     136:	08 41       	sbci	r16, 0x18	; 24
     138:	78 d3       	rcall	.+1776   	; 0x82a <_ZN7Display15ssd1306_commandEh+0xa>
     13a:	bb 43       	sbci	r27, 0x3B	; 59
     13c:	87 d1       	rcall	.+782    	; 0x44c <_ZL11digits16x16+0xc6>
     13e:	13 3d       	cpi	r17, 0xD3	; 211
     140:	19 0e       	add	r1, r25
     142:	3c c3       	rjmp	.+1656   	; 0x7bc <__do_copy_data+0xe>
     144:	bd 42       	sbci	r27, 0x2D	; 45
     146:	82 ad       	ldd	r24, Z+58	; 0x3a
     148:	2b 3e       	cpi	r18, 0xEB	; 235
     14a:	68 ec       	ldi	r22, 0xC8	; 200
     14c:	82 76       	andi	r24, 0x62	; 98
     14e:	be d9       	rcall	.-3204   	; 0xfffff4cc <__eeprom_end+0xff7ef4cc>
     150:	8f e1       	ldi	r24, 0x1F	; 31
     152:	a9 3e       	cpi	r26, 0xE9	; 233
     154:	4c 80       	ldd	r4, Y+4	; 0x04
     156:	ef ff       	.word	0xffef	; ????
     158:	be 01       	movw	r22, r28
     15a:	c4 ff       	sbrs	r28, 4
     15c:	7f 3f       	cpi	r23, 0xFF	; 255
     15e:	00 00       	nop
     160:	00 00       	nop
     162:	00 06       	cpc	r0, r16
     164:	64 ec       	ldi	r22, 0xC4	; 196
     166:	1b 3c       	cpi	r17, 0xCB	; 203
     168:	04 bc       	out	0x24, r0	; 36
     16a:	16 3e       	cpi	r17, 0xE6	; 230
     16c:	3b e5       	ldi	r19, 0x5B	; 91
     16e:	b9 3c       	cpi	r27, 0xC9	; 201
     170:	c9 3c       	cpi	r28, 0xC9	; 201
     172:	37 c2       	rjmp	.+1134   	; 0x5e2 <_ZL7font5x8+0x11c>
     174:	9e 5a       	subi	r25, 0xAE	; 174
     176:	3d 66       	ori	r19, 0x6D	; 109
     178:	04 98       	cbi	0x00, 4	; 0
     17a:	08 3e       	cpi	r16, 0xE8	; 232
     17c:	ea 69       	ori	r30, 0x9A	; 154
     17e:	aa aa       	std	Y+50, r10	; 0x32
     180:	3e 00       	.word	0x003e	; ????
     182:	00 00       	nop
     184:	80 3f       	cpi	r24, 0xF0	; 240

00000186 <__trampolines_end>:
	...
     1ce:	00 00       	nop
     1d0:	20 60       	ori	r18, 0x00	; 0
     1d2:	60 e0       	ldi	r22, 0x00	; 0
     1d4:	c0 c0       	rjmp	.+384    	; 0x356 <__trampolines_end+0x1d0>
     1d6:	80 80       	ld	r8, Z
     1d8:	00 00       	nop
     1da:	00 00       	nop
     1dc:	00 80       	ld	r0, Z
     1de:	80 c0       	rjmp	.+256    	; 0x2e0 <__trampolines_end+0x15a>
     1e0:	c0 e0       	ldi	r28, 0x00	; 0
     1e2:	e0 e0       	ldi	r30, 0x00	; 0
     1e4:	e0 60       	ori	r30, 0x00	; 0
     1e6:	40 80       	ld	r4, Z
     1e8:	80 40       	sbci	r24, 0x00	; 0
     1ea:	40 40       	sbci	r20, 0x00	; 0
     1ec:	20 e0       	ldi	r18, 0x00	; 0
     1ee:	e0 c0       	rjmp	.+448    	; 0x3b0 <_ZL11digits16x16+0x2a>
	...
     214:	01 03       	mulsu	r16, r17
     216:	07 ff       	sbrs	r16, 7
     218:	1f 07       	cpc	r17, r31
     21a:	07 03       	mulsu	r16, r23
     21c:	03 04       	cpc	r0, r3
     21e:	04 07       	cpc	r16, r20
     220:	03 60       	ori	r16, 0x03	; 3
     222:	60 00       	.word	0x0060	; ????
     224:	02 62       	ori	r16, 0x22	; 34
     226:	9c 00       	.word	0x009c	; ????
     228:	f8 fc       	.word	0xfcf8	; ????
     22a:	fc fc       	.word	0xfcfc	; ????
     22c:	fe fe       	.word	0xfefe	; ????
     22e:	fe ff       	.word	0xfffe	; ????
     230:	ff ff       	.word	0xffff	; ????
     232:	ff fe       	.word	0xfeff	; ????
     234:	fe fe       	.word	0xfefe	; ????
     236:	fc fc       	.word	0xfcfc	; ????
     238:	f8 f8       	.word	0xf8f8	; ????
     23a:	f8 f8       	.word	0xf8f8	; ????
	...
     254:	00 00       	nop
     256:	c0 ff       	sbrs	r28, 0
     258:	80 00       	.word	0x0080	; ????
     25a:	00 00       	nop
     25c:	38 64       	ori	r19, 0x48	; 72
     25e:	64 7c       	andi	r22, 0xC4	; 196
     260:	38 80       	ld	r3, Y
     262:	80 80       	ld	r8, Z
     264:	84 04       	cpc	r8, r4
     266:	03 00       	.word	0x0003	; ????
     268:	87 bf       	out	0x37, r24	; 55
     26a:	bf ff       	.word	0xffbf	; ????
     26c:	ff ff       	.word	0xffff	; ????
     26e:	ff ff       	.word	0xffff	; ????
     270:	ff ff       	.word	0xffff	; ????
     272:	ff ff       	.word	0xffff	; ????
     274:	ff 7f       	andi	r31, 0xFF	; 255
     276:	7f ff       	.word	0xff7f	; ????
     278:	9f c1       	rjmp	.+830    	; 0x5b8 <_ZL7font5x8+0xf2>
     27a:	c1 c0       	rjmp	.+386    	; 0x3fe <_ZL11digits16x16+0x78>
	...
     290:	00 80       	ld	r0, Z
     292:	80 e0       	ldi	r24, 0x00	; 0
     294:	fc 7f       	andi	r31, 0xFC	; 252
     296:	3f 1f       	adc	r19, r31
     298:	9f 06       	cpc	r9, r31
     29a:	06 1c       	adc	r0, r6
     29c:	18 38       	cpi	r17, 0x88	; 136
     29e:	20 60       	ori	r18, 0x00	; 0
     2a0:	47 df       	rcall	.-370    	; 0x130 <__SREG__+0xf1>
     2a2:	df 9f       	mul	r29, r31
     2a4:	9f c7       	rjmp	.+3902   	; 0x11e4 <_ZN7Display6analogEhhhh+0x296>
     2a6:	c0 e0       	ldi	r28, 0x00	; 0
     2a8:	e0 f8       	bld	r14, 0
     2aa:	f8 fc       	.word	0xfcf8	; ????
     2ac:	f8 83       	st	Y, r31
     2ae:	c3 81       	ldd	r28, Z+3	; 0x03
     2b0:	00 03       	mulsu	r16, r16
     2b2:	03 01       	movw	r0, r6
     2b4:	00 00       	nop
     2b6:	80 c1       	rjmp	.+768    	; 0x5b8 <_ZL7font5x8+0xf2>
     2b8:	7f 1f       	adc	r23, r31
     2ba:	1f 07       	cpc	r17, r31
	...
     2d0:	86 c3       	rjmp	.+1804   	; 0x9de <_ZN7Display9drawPixelEhhh+0x46>
     2d2:	c3 e1       	ldi	r28, 0x13	; 19
     2d4:	f8 fc       	.word	0xfcf8	; ????
     2d6:	fe 7f       	andi	r31, 0xFE	; 254
     2d8:	ff ff       	.word	0xffff	; ????
     2da:	ff fe       	.word	0xfeff	; ????
     2dc:	ff ff       	.word	0xffff	; ????
     2de:	fc f8       	.word	0xf8fc	; ????
     2e0:	e0 c0       	rjmp	.+448    	; 0x4a2 <_ZL11digits16x16+0x11c>
     2e2:	c0 80       	ld	r12, Z
     2e4:	81 c1       	rjmp	.+770    	; 0x5e8 <_ZL7font5x8+0x122>
     2e6:	e3 e3       	ldi	r30, 0x33	; 51
     2e8:	e3 e7       	ldi	r30, 0x73	; 115
     2ea:	e7 67       	ori	r30, 0x77	; 119
     2ec:	3f 3f       	cpi	r19, 0xFF	; 255
     2ee:	1f 07       	cpc	r17, r31
     2f0:	04 04       	cpc	r0, r4
     2f2:	04 06       	cpc	r0, r20
     2f4:	02 03       	mulsu	r16, r18
     2f6:	01 00       	.word	0x0001	; ????
	...
     30c:	00 00       	nop
     30e:	02 03       	mulsu	r16, r18
     310:	03 03       	mulsu	r16, r19
     312:	03 03       	mulsu	r16, r19
     314:	03 01       	movw	r0, r6
     316:	00 00       	nop
     318:	00 01       	movw	r0, r0
     31a:	01 03       	mulsu	r16, r17
     31c:	07 03       	mulsu	r16, r23
     31e:	01 00       	.word	0x0001	; ????
     320:	01 03       	mulsu	r16, r17
     322:	03 03       	mulsu	r16, r19
     324:	03 01       	movw	r0, r6
	...

00000386 <_ZL11digits16x16>:
     386:	00 e0 f8 fc fe 1e 07 07 07 07 1e fe fc f8 f0 00     ................
     396:	00 07 0f 3f 3f 7c 70 70 70 70 7c 3f 1f 1f 07 00     ...??|pppp|?....
     3a6:	00 00 00 06 07 07 ff ff ff ff 00 00 00 00 00 00     ................
     3b6:	00 00 00 00 00 00 7f 7f 7f 7f 00 00 00 00 00 00     ................
     3c6:	00 38 3c 3e 3e 0f 07 07 07 cf ff fe fe 38 00 00     .8<>>........8..
     3d6:	00 40 40 60 70 78 7c 7e 7f 77 73 71 70 70 00 00     .@@`px|~.wsqpp..
     3e6:	00 18 1c 1e 1e 0f c7 c7 e7 ff fe be 9c 00 00 00     ................
     3f6:	00 0c 1c 3c 3c 78 70 70 70 79 7f 3f 1f 0f 00 00     ...<<xpppy.?....
     406:	00 00 80 c0 e0 70 38 1c 1e ff ff ff ff 00 00 00     .....p8.........
     416:	06 07 07 07 06 06 06 06 06 7f 7f 7f 7f 06 06 00     ................
     426:	00 00 00 00 f0 ff ff ff e7 e7 e7 e7 c7 87 00 00     ................
     436:	00 00 38 78 71 70 70 70 70 70 39 3f 3f 1f 0f 00     ..8xqppppp9??...
     446:	00 80 e0 f0 f8 fc 7f 7f 6f 67 e1 e1 c0 80 00 00     ........og......
     456:	00 0f 1f 3f 3f 78 70 70 70 70 78 3f 3f 1f 0f 00     ...??xppppx??...
     466:	00 07 07 07 07 07 c7 e7 f7 ff 7f 3f 1f 07 03 01     ...........?....
     476:	00 20 38 7c 7e 3f 0f 07 03 00 00 00 00 00 00 00     . 8|~?..........
     486:	00 00 00 1c be fe ff e7 c3 c3 e7 ff fe be 1c 00     ................
     496:	00 00 0e 3f 3f 7f 71 60 60 60 71 7f 3f 3f 0f 00     ...??.q```q.??..
     4a6:	00 78 fc fe fe 8f 07 07 07 07 8f fe fe fc f8 00     .x..............
     4b6:	00 00 00 01 43 43 73 7b 7f 7f 1f 0f 07 03 00 00     ....CCs{........

000004c6 <_ZL7font5x8>:
     4c6:	00 00 5f 00 00 00 07 00 07 00 14 7f 14 7f 14 24     .._............$
     4d6:	2a 7f 2a 12 23 13 08 64 62 36 49 55 22 50 00 05     *.*.#..db6IU"P..
     4e6:	03 00 00 00 1c 22 41 00 00 41 22 1c 00 14 08 3e     ....."A..A"....>
     4f6:	08 14 08 08 3e 08 08 00 50 30 00 00 08 08 08 08     ....>...P0......
     506:	08 00 60 60 00 00 20 10 08 04 02 3e 51 49 45 3e     ..``.. ....>QIE>
     516:	00 42 7f 40 00 42 61 51 49 46 21 41 45 4b 31 18     .B.@.BaQIF!AEK1.
     526:	14 12 7f 10 27 45 45 45 39 3c 4a 49 49 30 01 71     ....'EEE9<JII0.q
     536:	09 05 03 36 49 49 49 36 06 49 49 29 1e 00 36 36     ...6III6.II)..66
     546:	00 00 00 56 36 00 00 08 14 22 41 00 14 14 14 14     ...V6...."A.....
     556:	14 00 41 22 14 08 02 01 51 09 06 32 49 79 41 3e     ..A"....Q..2IyA>
     566:	7e 11 11 11 7e 7f 49 49 49 36 3e 41 41 41 22 7f     ~...~.III6>AAA".
     576:	41 41 22 1c 7f 49 49 49 41 7f 09 09 09 01 3e 41     AA"..IIIA.....>A
     586:	49 49 7a 7f 08 08 08 7f 00 41 7f 41 00 20 40 41     IIz......A.A. @A
     596:	3f 01 7f 08 14 22 41 7f 40 40 40 40 7f 02 0c 02     ?...."A.@@@@....
     5a6:	7f 7f 04 08 10 7f 3e 41 41 41 3e 7f 09 09 09 06     ......>AAA>.....
     5b6:	3e 41 51 21 5e 7f 09 19 29 46 46 49 49 49 31 01     >AQ!^...)FFIII1.
     5c6:	01 7f 01 01 3f 40 40 40 3f 1f 20 40 20 1f 3f 40     ....?@@@?. @ .?@
     5d6:	38 40 3f 63 14 08 14 63 07 08 70 08 07 61 51 49     8@?c...c..p..aQI
     5e6:	45 43 00 7f 41 41 00 02 04 08 10 20 00 41 41 7f     EC..AA..... .AA.
     5f6:	00 04 02 01 02 04 40 40 40 40 40 00 01 02 04 00     ......@@@@@.....
     606:	20 54 54 54 78 7f 48 44 44 38 38 44 44 44 20 38      TTTx.HDD88DDD 8
     616:	44 44 48 7f 38 54 54 54 18 08 7e 09 01 02 0c 52     DDH.8TTT..~....R
     626:	52 52 3e 7f 08 04 04 78 00 44 7d 40 00 20 40 44     RR>....x.D}@. @D
     636:	3d 00 7f 10 28 44 00 00 41 7f 40 00 7c 04 18 04     =...(D..A.@.|...
     646:	78 7c 08 04 04 78 38 44 44 44 38 7c 14 14 14 08     x|...x8DDD8|....
     656:	08 14 14 18 7c 7c 08 04 04 08 48 54 54 54 20 04     ....||....HTTT .
     666:	3f 44 40 20 3c 40 40 20 7c 1c 20 40 20 1c 3c 40     ?D@ <@@ |. @ .<@
     676:	30 40 3c 44 28 10 28 44 0c 50 50 50 3c 44 64 54     0@<D(.(D.PPP<DdT
     686:	4c 44 00 08 36 41 00 00 00 7f 00 00 00 41 36 08     LD..6A.......A6.
     696:	00 10 08 08 10 08                                   ......

0000069c <__c.2161>:
     69c:	6e 61 6e 00                                         nan.

000006a0 <__c.2159>:
     6a0:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     6b0:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     6c0:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     6d0:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     6e0:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     6f0:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     700:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     710:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     720:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     730:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     740:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     750:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     760:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     770:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     780:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     790:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

0000079e <__ctors_start>:
     79e:	a2 20       	and	r10, r2

000007a0 <__ctors_end>:
     7a0:	cd 20       	and	r12, r13

000007a2 <__dtors_end>:
     7a2:	11 24       	eor	r1, r1
     7a4:	1f be       	out	0x3f, r1	; 63
     7a6:	cf ef       	ldi	r28, 0xFF	; 255
     7a8:	d0 e4       	ldi	r29, 0x40	; 64
     7aa:	de bf       	out	0x3e, r29	; 62
     7ac:	cd bf       	out	0x3d, r28	; 61

000007ae <__do_copy_data>:
     7ae:	13 e0       	ldi	r17, 0x03	; 3
     7b0:	a0 e0       	ldi	r26, 0x00	; 0
     7b2:	b1 e0       	ldi	r27, 0x01	; 1
     7b4:	ee e9       	ldi	r30, 0x9E	; 158
     7b6:	f0 e6       	ldi	r31, 0x60	; 96
     7b8:	00 e0       	ldi	r16, 0x00	; 0
     7ba:	0b bf       	out	0x3b, r16	; 59
     7bc:	02 c0       	rjmp	.+4      	; 0x7c2 <__do_copy_data+0x14>
     7be:	07 90       	elpm	r0, Z+
     7c0:	0d 92       	st	X+, r0
     7c2:	a8 31       	cpi	r26, 0x18	; 24
     7c4:	b1 07       	cpc	r27, r17
     7c6:	d9 f7       	brne	.-10     	; 0x7be <__do_copy_data+0x10>

000007c8 <__do_clear_bss>:
     7c8:	27 e0       	ldi	r18, 0x07	; 7
     7ca:	a8 e1       	ldi	r26, 0x18	; 24
     7cc:	b3 e0       	ldi	r27, 0x03	; 3
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <.do_clear_bss_start>

000007d0 <.do_clear_bss_loop>:
     7d0:	1d 92       	st	X+, r1

000007d2 <.do_clear_bss_start>:
     7d2:	a1 3b       	cpi	r26, 0xB1	; 177
     7d4:	b2 07       	cpc	r27, r18
     7d6:	e1 f7       	brne	.-8      	; 0x7d0 <.do_clear_bss_loop>

000007d8 <__do_global_ctors>:
     7d8:	17 e0       	ldi	r17, 0x07	; 7
     7da:	c0 ea       	ldi	r28, 0xA0	; 160
     7dc:	d7 e0       	ldi	r29, 0x07	; 7
     7de:	00 e0       	ldi	r16, 0x00	; 0
     7e0:	06 c0       	rjmp	.+12     	; 0x7ee <__do_global_ctors+0x16>
     7e2:	22 97       	sbiw	r28, 0x02	; 2
     7e4:	01 09       	sbc	r16, r1
     7e6:	fe 01       	movw	r30, r28
     7e8:	0b bf       	out	0x3b, r16	; 59
     7ea:	0e 94 8e 2e 	call	0x5d1c	; 0x5d1c <__tablejump_elpm__>
     7ee:	ce 39       	cpi	r28, 0x9E	; 158
     7f0:	d1 07       	cpc	r29, r17
     7f2:	80 e0       	ldi	r24, 0x00	; 0
     7f4:	08 07       	cpc	r16, r24
     7f6:	a9 f7       	brne	.-22     	; 0x7e2 <__do_global_ctors+0xa>
     7f8:	0e 94 9a 20 	call	0x4134	; 0x4134 <main>
     7fc:	0c 94 3e 30 	jmp	0x607c	; 0x607c <__do_global_dtors>

00000800 <__bad_interrupt>:
     800:	ff cb       	rjmp	.-2050   	; 0x0 <__vectors>

00000802 <_ZN7DisplayD1Ev>:
			for (int y = 0; y <= height; ++y) {
				drawPixel(x1+x,y+y1,0);
			}
		}
	}
}
     802:	9c 5f       	subi	r25, 0xFC	; 252
     804:	0c 94 f4 20 	jmp	0x41e8	; 0x41e8 <_ZN3I2CD1Ev>
     808:	08 95       	ret

0000080a <_ZN7Display10clearFrameEv>:
     80a:	fc 01       	movw	r30, r24
     80c:	20 e0       	ldi	r18, 0x00	; 0
     80e:	30 e0       	ldi	r19, 0x00	; 0
     810:	11 92       	st	Z+, r1
     812:	2f 5f       	subi	r18, 0xFF	; 255
     814:	3f 4f       	sbci	r19, 0xFF	; 255
     816:	21 15       	cp	r18, r1
     818:	84 e0       	ldi	r24, 0x04	; 4
     81a:	38 07       	cpc	r19, r24
     81c:	c9 f7       	brne	.-14     	; 0x810 <_ZN7Display10clearFrameEv+0x6>
     81e:	08 95       	ret

00000820 <_ZN7Display15ssd1306_commandEh>:
     820:	1f 93       	push	r17
     822:	cf 93       	push	r28
     824:	df 93       	push	r29
     826:	16 2f       	mov	r17, r22
     828:	ec 01       	movw	r28, r24
     82a:	dc 5f       	subi	r29, 0xFC	; 252
     82c:	ce 01       	movw	r24, r28
     82e:	0e 94 f5 20 	call	0x41ea	; 0x41ea <_ZN3I2C9twi_startEv>
     832:	68 e7       	ldi	r22, 0x78	; 120
     834:	ce 01       	movw	r24, r28
     836:	0e 94 fd 20 	call	0x41fa	; 0x41fa <_ZN3I2C9twi_writeEh>
     83a:	60 e0       	ldi	r22, 0x00	; 0
     83c:	ce 01       	movw	r24, r28
     83e:	0e 94 fd 20 	call	0x41fa	; 0x41fa <_ZN3I2C9twi_writeEh>
     842:	61 2f       	mov	r22, r17
     844:	ce 01       	movw	r24, r28
     846:	0e 94 fd 20 	call	0x41fa	; 0x41fa <_ZN3I2C9twi_writeEh>
     84a:	ce 01       	movw	r24, r28
     84c:	0e 94 f9 20 	call	0x41f2	; 0x41f2 <_ZN3I2C8twi_stopEv>
     850:	df 91       	pop	r29
     852:	cf 91       	pop	r28
     854:	1f 91       	pop	r17
     856:	08 95       	ret

00000858 <_ZN7Display17InitializeDisplayEv>:
     858:	cf 93       	push	r28
     85a:	df 93       	push	r29
     85c:	ec 01       	movw	r28, r24
     85e:	6e ea       	ldi	r22, 0xAE	; 174
     860:	df df       	rcall	.-66     	; 0x820 <_ZN7Display15ssd1306_commandEh>
     862:	65 ed       	ldi	r22, 0xD5	; 213
     864:	ce 01       	movw	r24, r28
     866:	dc df       	rcall	.-72     	; 0x820 <_ZN7Display15ssd1306_commandEh>
     868:	60 e8       	ldi	r22, 0x80	; 128
     86a:	ce 01       	movw	r24, r28
     86c:	d9 df       	rcall	.-78     	; 0x820 <_ZN7Display15ssd1306_commandEh>
     86e:	68 ea       	ldi	r22, 0xA8	; 168
     870:	ce 01       	movw	r24, r28
     872:	d6 df       	rcall	.-84     	; 0x820 <_ZN7Display15ssd1306_commandEh>
     874:	6f e3       	ldi	r22, 0x3F	; 63
     876:	ce 01       	movw	r24, r28
     878:	d3 df       	rcall	.-90     	; 0x820 <_ZN7Display15ssd1306_commandEh>
     87a:	63 ed       	ldi	r22, 0xD3	; 211
     87c:	ce 01       	movw	r24, r28
     87e:	d0 df       	rcall	.-96     	; 0x820 <_ZN7Display15ssd1306_commandEh>
     880:	60 e0       	ldi	r22, 0x00	; 0
     882:	ce 01       	movw	r24, r28
     884:	cd df       	rcall	.-102    	; 0x820 <_ZN7Display15ssd1306_commandEh>
     886:	60 e4       	ldi	r22, 0x40	; 64
     888:	ce 01       	movw	r24, r28
     88a:	ca df       	rcall	.-108    	; 0x820 <_ZN7Display15ssd1306_commandEh>
     88c:	6d e8       	ldi	r22, 0x8D	; 141
     88e:	ce 01       	movw	r24, r28
     890:	c7 df       	rcall	.-114    	; 0x820 <_ZN7Display15ssd1306_commandEh>
     892:	64 e1       	ldi	r22, 0x14	; 20
     894:	ce 01       	movw	r24, r28
     896:	c4 df       	rcall	.-120    	; 0x820 <_ZN7Display15ssd1306_commandEh>
     898:	60 e2       	ldi	r22, 0x20	; 32
     89a:	ce 01       	movw	r24, r28
     89c:	c1 df       	rcall	.-126    	; 0x820 <_ZN7Display15ssd1306_commandEh>
     89e:	60 e0       	ldi	r22, 0x00	; 0
     8a0:	ce 01       	movw	r24, r28
     8a2:	be df       	rcall	.-132    	; 0x820 <_ZN7Display15ssd1306_commandEh>
     8a4:	61 ea       	ldi	r22, 0xA1	; 161
     8a6:	ce 01       	movw	r24, r28
     8a8:	bb df       	rcall	.-138    	; 0x820 <_ZN7Display15ssd1306_commandEh>
     8aa:	68 ec       	ldi	r22, 0xC8	; 200
     8ac:	ce 01       	movw	r24, r28
     8ae:	b8 df       	rcall	.-144    	; 0x820 <_ZN7Display15ssd1306_commandEh>
     8b0:	6a ed       	ldi	r22, 0xDA	; 218
     8b2:	ce 01       	movw	r24, r28
     8b4:	b5 df       	rcall	.-150    	; 0x820 <_ZN7Display15ssd1306_commandEh>
     8b6:	62 e1       	ldi	r22, 0x12	; 18
     8b8:	ce 01       	movw	r24, r28
     8ba:	b2 df       	rcall	.-156    	; 0x820 <_ZN7Display15ssd1306_commandEh>
     8bc:	61 e8       	ldi	r22, 0x81	; 129
     8be:	ce 01       	movw	r24, r28
     8c0:	af df       	rcall	.-162    	; 0x820 <_ZN7Display15ssd1306_commandEh>
     8c2:	6f ec       	ldi	r22, 0xCF	; 207
     8c4:	ce 01       	movw	r24, r28
     8c6:	ac df       	rcall	.-168    	; 0x820 <_ZN7Display15ssd1306_commandEh>
     8c8:	69 ed       	ldi	r22, 0xD9	; 217
     8ca:	ce 01       	movw	r24, r28
     8cc:	a9 df       	rcall	.-174    	; 0x820 <_ZN7Display15ssd1306_commandEh>
     8ce:	61 ef       	ldi	r22, 0xF1	; 241
     8d0:	ce 01       	movw	r24, r28
     8d2:	a6 df       	rcall	.-180    	; 0x820 <_ZN7Display15ssd1306_commandEh>
     8d4:	6b ed       	ldi	r22, 0xDB	; 219
     8d6:	ce 01       	movw	r24, r28
     8d8:	a3 df       	rcall	.-186    	; 0x820 <_ZN7Display15ssd1306_commandEh>
     8da:	60 e4       	ldi	r22, 0x40	; 64
     8dc:	ce 01       	movw	r24, r28
     8de:	a0 df       	rcall	.-192    	; 0x820 <_ZN7Display15ssd1306_commandEh>
     8e0:	64 ea       	ldi	r22, 0xA4	; 164
     8e2:	ce 01       	movw	r24, r28
     8e4:	9d df       	rcall	.-198    	; 0x820 <_ZN7Display15ssd1306_commandEh>
     8e6:	66 ea       	ldi	r22, 0xA6	; 166
     8e8:	ce 01       	movw	r24, r28
     8ea:	9a df       	rcall	.-204    	; 0x820 <_ZN7Display15ssd1306_commandEh>
     8ec:	6f ea       	ldi	r22, 0xAF	; 175
     8ee:	ce 01       	movw	r24, r28
     8f0:	97 df       	rcall	.-210    	; 0x820 <_ZN7Display15ssd1306_commandEh>
     8f2:	df 91       	pop	r29
     8f4:	cf 91       	pop	r28
     8f6:	08 95       	ret

000008f8 <_ZN7DisplayC1Ev>:
     8f8:	cf 93       	push	r28
     8fa:	df 93       	push	r29
     8fc:	ec 01       	movw	r28, r24
     8fe:	9c 5f       	subi	r25, 0xFC	; 252
     900:	0e 94 f0 20 	call	0x41e0	; 0x41e0 <_ZN3I2CC1Ev>
     904:	ce 01       	movw	r24, r28
     906:	a8 df       	rcall	.-176    	; 0x858 <_ZN7Display17InitializeDisplayEv>
     908:	df 91       	pop	r29
     90a:	cf 91       	pop	r28
     90c:	08 95       	ret

0000090e <_ZN7Display6invertEh>:
     90e:	66 23       	and	r22, r22
     910:	19 f0       	breq	.+6      	; 0x918 <_ZN7Display6invertEh+0xa>
     912:	67 ea       	ldi	r22, 0xA7	; 167
     914:	85 cf       	rjmp	.-246    	; 0x820 <_ZN7Display15ssd1306_commandEh>
     916:	08 95       	ret
     918:	66 ea       	ldi	r22, 0xA6	; 166
     91a:	82 cf       	rjmp	.-252    	; 0x820 <_ZN7Display15ssd1306_commandEh>
     91c:	08 95       	ret

0000091e <_ZN7Display9sendFrameEv>:
     91e:	ef 92       	push	r14
     920:	ff 92       	push	r15
     922:	0f 93       	push	r16
     924:	1f 93       	push	r17
     926:	cf 93       	push	r28
     928:	df 93       	push	r29
     92a:	8c 01       	movw	r16, r24
     92c:	61 e2       	ldi	r22, 0x21	; 33
     92e:	78 df       	rcall	.-272    	; 0x820 <_ZN7Display15ssd1306_commandEh>
     930:	60 e0       	ldi	r22, 0x00	; 0
     932:	c8 01       	movw	r24, r16
     934:	75 df       	rcall	.-278    	; 0x820 <_ZN7Display15ssd1306_commandEh>
     936:	6f e7       	ldi	r22, 0x7F	; 127
     938:	c8 01       	movw	r24, r16
     93a:	72 df       	rcall	.-284    	; 0x820 <_ZN7Display15ssd1306_commandEh>
     93c:	62 e2       	ldi	r22, 0x22	; 34
     93e:	c8 01       	movw	r24, r16
     940:	6f df       	rcall	.-290    	; 0x820 <_ZN7Display15ssd1306_commandEh>
     942:	60 e0       	ldi	r22, 0x00	; 0
     944:	c8 01       	movw	r24, r16
     946:	6c df       	rcall	.-296    	; 0x820 <_ZN7Display15ssd1306_commandEh>
     948:	67 e0       	ldi	r22, 0x07	; 7
     94a:	c8 01       	movw	r24, r16
     94c:	69 df       	rcall	.-302    	; 0x820 <_ZN7Display15ssd1306_commandEh>
     94e:	78 01       	movw	r14, r16
     950:	8c ef       	ldi	r24, 0xFC	; 252
     952:	f8 1a       	sub	r15, r24
     954:	c7 01       	movw	r24, r14
     956:	0e 94 f5 20 	call	0x41ea	; 0x41ea <_ZN3I2C9twi_startEv>
     95a:	68 e7       	ldi	r22, 0x78	; 120
     95c:	c7 01       	movw	r24, r14
     95e:	0e 94 fd 20 	call	0x41fa	; 0x41fa <_ZN3I2C9twi_writeEh>
     962:	60 e4       	ldi	r22, 0x40	; 64
     964:	c7 01       	movw	r24, r14
     966:	0e 94 fd 20 	call	0x41fa	; 0x41fa <_ZN3I2C9twi_writeEh>
     96a:	c0 e0       	ldi	r28, 0x00	; 0
     96c:	d0 e0       	ldi	r29, 0x00	; 0
     96e:	f8 01       	movw	r30, r16
     970:	61 91       	ld	r22, Z+
     972:	8f 01       	movw	r16, r30
     974:	c7 01       	movw	r24, r14
     976:	0e 94 fd 20 	call	0x41fa	; 0x41fa <_ZN3I2C9twi_writeEh>
     97a:	21 96       	adiw	r28, 0x01	; 1
     97c:	c1 15       	cp	r28, r1
     97e:	f4 e0       	ldi	r31, 0x04	; 4
     980:	df 07       	cpc	r29, r31
     982:	a9 f7       	brne	.-22     	; 0x96e <_ZN7Display9sendFrameEv+0x50>
     984:	c7 01       	movw	r24, r14
     986:	0e 94 f9 20 	call	0x41f2	; 0x41f2 <_ZN3I2C8twi_stopEv>
     98a:	df 91       	pop	r29
     98c:	cf 91       	pop	r28
     98e:	1f 91       	pop	r17
     990:	0f 91       	pop	r16
     992:	ff 90       	pop	r15
     994:	ef 90       	pop	r14
     996:	08 95       	ret

00000998 <_ZN7Display9drawPixelEhhh>:
     998:	66 23       	and	r22, r22
     99a:	bc f1       	brlt	.+110    	; 0xa0a <_ZN7Display9drawPixelEhhh+0x72>
     99c:	40 34       	cpi	r20, 0x40	; 64
     99e:	a8 f5       	brcc	.+106    	; 0xa0a <_ZN7Display9drawPixelEhhh+0x72>
     9a0:	21 11       	cpse	r18, r1
     9a2:	19 c0       	rjmp	.+50     	; 0x9d6 <_ZN7Display9drawPixelEhhh+0x3e>
     9a4:	e4 2f       	mov	r30, r20
     9a6:	e6 95       	lsr	r30
     9a8:	e6 95       	lsr	r30
     9aa:	e6 95       	lsr	r30
     9ac:	20 e8       	ldi	r18, 0x80	; 128
     9ae:	e2 9f       	mul	r30, r18
     9b0:	f0 01       	movw	r30, r0
     9b2:	11 24       	eor	r1, r1
     9b4:	e6 0f       	add	r30, r22
     9b6:	f1 1d       	adc	r31, r1
     9b8:	e8 0f       	add	r30, r24
     9ba:	f9 1f       	adc	r31, r25
     9bc:	47 70       	andi	r20, 0x07	; 7
     9be:	21 e0       	ldi	r18, 0x01	; 1
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	c9 01       	movw	r24, r18
     9c4:	02 c0       	rjmp	.+4      	; 0x9ca <_ZN7Display9drawPixelEhhh+0x32>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	4a 95       	dec	r20
     9cc:	e2 f7       	brpl	.-8      	; 0x9c6 <_ZN7Display9drawPixelEhhh+0x2e>
     9ce:	90 81       	ld	r25, Z
     9d0:	89 2b       	or	r24, r25
     9d2:	80 83       	st	Z, r24
     9d4:	08 95       	ret
     9d6:	e4 2f       	mov	r30, r20
     9d8:	e6 95       	lsr	r30
     9da:	e6 95       	lsr	r30
     9dc:	e6 95       	lsr	r30
     9de:	30 e8       	ldi	r19, 0x80	; 128
     9e0:	e3 9f       	mul	r30, r19
     9e2:	f0 01       	movw	r30, r0
     9e4:	11 24       	eor	r1, r1
     9e6:	e6 0f       	add	r30, r22
     9e8:	f1 1d       	adc	r31, r1
     9ea:	e8 0f       	add	r30, r24
     9ec:	f9 1f       	adc	r31, r25
     9ee:	47 70       	andi	r20, 0x07	; 7
     9f0:	81 e0       	ldi	r24, 0x01	; 1
     9f2:	90 e0       	ldi	r25, 0x00	; 0
     9f4:	9c 01       	movw	r18, r24
     9f6:	02 c0       	rjmp	.+4      	; 0x9fc <_ZN7Display9drawPixelEhhh+0x64>
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	4a 95       	dec	r20
     9fe:	e2 f7       	brpl	.-8      	; 0x9f8 <_ZN7Display9drawPixelEhhh+0x60>
     a00:	a9 01       	movw	r20, r18
     a02:	40 95       	com	r20
     a04:	80 81       	ld	r24, Z
     a06:	48 23       	and	r20, r24
     a08:	40 83       	st	Z, r20
     a0a:	08 95       	ret

00000a0c <_ZN7Display9draw_lineEhhhf>:

//eigene Zeichenfunktionen
void Display::draw_line(uint8_t x, uint8_t y, uint8_t length, float phi){
     a0c:	2f 92       	push	r2
     a0e:	3f 92       	push	r3
     a10:	4f 92       	push	r4
     a12:	5f 92       	push	r5
     a14:	6f 92       	push	r6
     a16:	7f 92       	push	r7
     a18:	8f 92       	push	r8
     a1a:	9f 92       	push	r9
     a1c:	af 92       	push	r10
     a1e:	bf 92       	push	r11
     a20:	cf 92       	push	r12
     a22:	df 92       	push	r13
     a24:	ef 92       	push	r14
     a26:	ff 92       	push	r15
     a28:	0f 93       	push	r16
     a2a:	1f 93       	push	r17
     a2c:	cf 93       	push	r28
     a2e:	df 93       	push	r29
     a30:	cd b7       	in	r28, 0x3d	; 61
     a32:	de b7       	in	r29, 0x3e	; 62
     a34:	2b 97       	sbiw	r28, 0x0b	; 11
     a36:	0f b6       	in	r0, 0x3f	; 63
     a38:	f8 94       	cli
     a3a:	de bf       	out	0x3e, r29	; 62
     a3c:	0f be       	out	0x3f, r0	; 63
     a3e:	cd bf       	out	0x3d, r28	; 61
     a40:	1c 01       	movw	r2, r24
     a42:	d6 2e       	mov	r13, r22
     a44:	c4 2e       	mov	r12, r20
     a46:	29 83       	std	Y+1, r18	; 0x01
	//phi*=M_PI/180.0;
	uint8_t pos_x=0, pos_y=0;
	for (uint8_t i=0;i<length;i++)
     a48:	22 23       	and	r18, r18
     a4a:	09 f4       	brne	.+2      	; 0xa4e <_ZN7Display9draw_lineEhhhf+0x42>
     a4c:	68 c0       	rjmp	.+208    	; 0xb1e <_ZN7Display9draw_lineEhhhf+0x112>
	{
		pos_x=(uint8_t) (-i*cos(phi)+x);
     a4e:	c8 01       	movw	r24, r16
     a50:	b7 01       	movw	r22, r14
     a52:	0e 94 5a 28 	call	0x50b4	; 0x50b4 <cos>
     a56:	2b 01       	movw	r4, r22
     a58:	3c 01       	movw	r6, r24
		pos_y=(uint8_t) (i*sin(phi)+y);
     a5a:	c8 01       	movw	r24, r16
     a5c:	b7 01       	movw	r22, r14
     a5e:	0e 94 b9 2a 	call	0x5572	; 0x5572 <sin>
     a62:	4b 01       	movw	r8, r22
     a64:	5c 01       	movw	r10, r24
     a66:	1b 86       	std	Y+11, r1	; 0x0b
     a68:	1a 86       	std	Y+10, r1	; 0x0a
     a6a:	8c 2d       	mov	r24, r12
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	a0 e0       	ldi	r26, 0x00	; 0
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	8a 83       	std	Y+2, r24	; 0x02
     a74:	9b 83       	std	Y+3, r25	; 0x03
     a76:	ac 83       	std	Y+4, r26	; 0x04
     a78:	bd 83       	std	Y+5, r27	; 0x05
void Display::draw_line(uint8_t x, uint8_t y, uint8_t length, float phi){
	//phi*=M_PI/180.0;
	uint8_t pos_x=0, pos_y=0;
	for (uint8_t i=0;i<length;i++)
	{
		pos_x=(uint8_t) (-i*cos(phi)+x);
     a7a:	8d 2d       	mov	r24, r13
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	8e 83       	std	Y+6, r24	; 0x06
     a84:	9f 83       	std	Y+7, r25	; 0x07
     a86:	a8 87       	std	Y+8, r26	; 0x08
     a88:	b9 87       	std	Y+9, r27	; 0x09
		pos_y=(uint8_t) (i*sin(phi)+y);
     a8a:	aa 85       	ldd	r26, Y+10	; 0x0a
     a8c:	bb 85       	ldd	r27, Y+11	; 0x0b
     a8e:	bd 01       	movw	r22, r26
     a90:	88 27       	eor	r24, r24
     a92:	77 fd       	sbrc	r23, 7
     a94:	80 95       	com	r24
     a96:	98 2f       	mov	r25, r24
     a98:	0e 94 f8 28 	call	0x51f0	; 0x51f0 <__floatsisf>
     a9c:	a5 01       	movw	r20, r10
     a9e:	94 01       	movw	r18, r8
     aa0:	0e 94 56 2a 	call	0x54ac	; 0x54ac <__mulsf3>
     aa4:	6b 01       	movw	r12, r22
     aa6:	7c 01       	movw	r14, r24
     aa8:	6a 81       	ldd	r22, Y+2	; 0x02
     aaa:	7b 81       	ldd	r23, Y+3	; 0x03
     aac:	8c 81       	ldd	r24, Y+4	; 0x04
     aae:	9d 81       	ldd	r25, Y+5	; 0x05
     ab0:	0e 94 f8 28 	call	0x51f0	; 0x51f0 <__floatsisf>
     ab4:	9b 01       	movw	r18, r22
     ab6:	ac 01       	movw	r20, r24
     ab8:	c7 01       	movw	r24, r14
     aba:	b6 01       	movw	r22, r12
     abc:	0e 94 90 27 	call	0x4f20	; 0x4f20 <__addsf3>
     ac0:	0e 94 ca 28 	call	0x5194	; 0x5194 <__fixunssfsi>
     ac4:	16 2f       	mov	r17, r22
     ac6:	6a 85       	ldd	r22, Y+10	; 0x0a
     ac8:	7b 85       	ldd	r23, Y+11	; 0x0b
     aca:	71 95       	neg	r23
     acc:	61 95       	neg	r22
     ace:	71 09       	sbc	r23, r1
void Display::draw_line(uint8_t x, uint8_t y, uint8_t length, float phi){
	//phi*=M_PI/180.0;
	uint8_t pos_x=0, pos_y=0;
	for (uint8_t i=0;i<length;i++)
	{
		pos_x=(uint8_t) (-i*cos(phi)+x);
     ad0:	88 27       	eor	r24, r24
     ad2:	77 fd       	sbrc	r23, 7
     ad4:	80 95       	com	r24
     ad6:	98 2f       	mov	r25, r24
     ad8:	0e 94 f8 28 	call	0x51f0	; 0x51f0 <__floatsisf>
     adc:	a3 01       	movw	r20, r6
     ade:	92 01       	movw	r18, r4
     ae0:	0e 94 56 2a 	call	0x54ac	; 0x54ac <__mulsf3>
     ae4:	6b 01       	movw	r12, r22
     ae6:	7c 01       	movw	r14, r24
     ae8:	6e 81       	ldd	r22, Y+6	; 0x06
     aea:	7f 81       	ldd	r23, Y+7	; 0x07
     aec:	88 85       	ldd	r24, Y+8	; 0x08
     aee:	99 85       	ldd	r25, Y+9	; 0x09
     af0:	0e 94 f8 28 	call	0x51f0	; 0x51f0 <__floatsisf>
     af4:	9b 01       	movw	r18, r22
     af6:	ac 01       	movw	r20, r24
     af8:	c7 01       	movw	r24, r14
     afa:	b6 01       	movw	r22, r12
     afc:	0e 94 90 27 	call	0x4f20	; 0x4f20 <__addsf3>
     b00:	0e 94 ca 28 	call	0x5194	; 0x5194 <__fixunssfsi>
		pos_y=(uint8_t) (i*sin(phi)+y);
		drawPixel(pos_x,pos_y,0);
     b04:	20 e0       	ldi	r18, 0x00	; 0
     b06:	41 2f       	mov	r20, r17
     b08:	c1 01       	movw	r24, r2
     b0a:	46 df       	rcall	.-372    	; 0x998 <_ZN7Display9drawPixelEhhh>
     b0c:	ea 85       	ldd	r30, Y+10	; 0x0a
     b0e:	fb 85       	ldd	r31, Y+11	; 0x0b
     b10:	31 96       	adiw	r30, 0x01	; 1
     b12:	fb 87       	std	Y+11, r31	; 0x0b
     b14:	ea 87       	std	Y+10, r30	; 0x0a

//eigene Zeichenfunktionen
void Display::draw_line(uint8_t x, uint8_t y, uint8_t length, float phi){
	//phi*=M_PI/180.0;
	uint8_t pos_x=0, pos_y=0;
	for (uint8_t i=0;i<length;i++)
     b16:	f9 81       	ldd	r31, Y+1	; 0x01
     b18:	ef 17       	cp	r30, r31
     b1a:	08 f4       	brcc	.+2      	; 0xb1e <_ZN7Display9draw_lineEhhhf+0x112>
     b1c:	b6 cf       	rjmp	.-148    	; 0xa8a <_ZN7Display9draw_lineEhhhf+0x7e>
	{
		pos_x=(uint8_t) (-i*cos(phi)+x);
		pos_y=(uint8_t) (i*sin(phi)+y);
		drawPixel(pos_x,pos_y,0);
	}
}
     b1e:	2b 96       	adiw	r28, 0x0b	; 11
     b20:	0f b6       	in	r0, 0x3f	; 63
     b22:	f8 94       	cli
     b24:	de bf       	out	0x3e, r29	; 62
     b26:	0f be       	out	0x3f, r0	; 63
     b28:	cd bf       	out	0x3d, r28	; 61
     b2a:	df 91       	pop	r29
     b2c:	cf 91       	pop	r28
     b2e:	1f 91       	pop	r17
     b30:	0f 91       	pop	r16
     b32:	ff 90       	pop	r15
     b34:	ef 90       	pop	r14
     b36:	df 90       	pop	r13
     b38:	cf 90       	pop	r12
     b3a:	bf 90       	pop	r11
     b3c:	af 90       	pop	r10
     b3e:	9f 90       	pop	r9
     b40:	8f 90       	pop	r8
     b42:	7f 90       	pop	r7
     b44:	6f 90       	pop	r6
     b46:	5f 90       	pop	r5
     b48:	4f 90       	pop	r4
     b4a:	3f 90       	pop	r3
     b4c:	2f 90       	pop	r2
     b4e:	08 95       	ret

00000b50 <_ZN7Display13draw_triangleEhhhff>:

//using basecenterpoint as turningpoint for rotation
//upright triangle has rotationangle of 0
//turning clockwise considered in x transformation
//baseangle=70 is for 1/3 type
void Display::draw_triangle(uint8_t basecenter_x, uint8_t basecenter_y, uint8_t baselength, float baseangle, float rotationangle){
     b50:	2f 92       	push	r2
     b52:	3f 92       	push	r3
     b54:	4f 92       	push	r4
     b56:	5f 92       	push	r5
     b58:	6f 92       	push	r6
     b5a:	7f 92       	push	r7
     b5c:	8f 92       	push	r8
     b5e:	9f 92       	push	r9
     b60:	af 92       	push	r10
     b62:	bf 92       	push	r11
     b64:	cf 92       	push	r12
     b66:	df 92       	push	r13
     b68:	ef 92       	push	r14
     b6a:	ff 92       	push	r15
     b6c:	0f 93       	push	r16
     b6e:	1f 93       	push	r17
     b70:	cf 93       	push	r28
     b72:	df 93       	push	r29
     b74:	cd b7       	in	r28, 0x3d	; 61
     b76:	de b7       	in	r29, 0x3e	; 62
     b78:	60 97       	sbiw	r28, 0x10	; 16
     b7a:	0f b6       	in	r0, 0x3f	; 63
     b7c:	f8 94       	cli
     b7e:	de bf       	out	0x3e, r29	; 62
     b80:	0f be       	out	0x3f, r0	; 63
     b82:	cd bf       	out	0x3d, r28	; 61
     b84:	1c 01       	movw	r2, r24
     b86:	6f 87       	std	Y+15, r22	; 0x0f
     b88:	4d 83       	std	Y+5, r20	; 0x05
     b8a:	29 83       	std	Y+1, r18	; 0x01
     b8c:	c6 01       	movw	r24, r12
     b8e:	b5 01       	movw	r22, r10
	//correcting rotationangle
	rotationangle*=M_PI/180.0;
     b90:	25 e3       	ldi	r18, 0x35	; 53
     b92:	3a ef       	ldi	r19, 0xFA	; 250
     b94:	4e e8       	ldi	r20, 0x8E	; 142
     b96:	5c e3       	ldi	r21, 0x3C	; 60
     b98:	0e 94 56 2a 	call	0x54ac	; 0x54ac <__mulsf3>
     b9c:	4b 01       	movw	r8, r22
     b9e:	5c 01       	movw	r10, r24
	baseangle*=M_PI/180.0;
     ba0:	25 e3       	ldi	r18, 0x35	; 53
     ba2:	3a ef       	ldi	r19, 0xFA	; 250
     ba4:	4e e8       	ldi	r20, 0x8E	; 142
     ba6:	5c e3       	ldi	r21, 0x3C	; 60
     ba8:	c8 01       	movw	r24, r16
     baa:	b7 01       	movw	r22, r14
     bac:	0e 94 56 2a 	call	0x54ac	; 0x54ac <__mulsf3>
     bb0:	6e 83       	std	Y+6, r22	; 0x06
     bb2:	7f 83       	std	Y+7, r23	; 0x07
     bb4:	88 87       	std	Y+8, r24	; 0x08
     bb6:	99 87       	std	Y+9, r25	; 0x09
	//draw baseline
	draw_line(basecenter_x,basecenter_y,baselength/2,rotationangle);
     bb8:	79 80       	ldd	r7, Y+1	; 0x01
     bba:	76 94       	lsr	r7
     bbc:	85 01       	movw	r16, r10
     bbe:	74 01       	movw	r14, r8
     bc0:	27 2d       	mov	r18, r7
     bc2:	4d 81       	ldd	r20, Y+5	; 0x05
     bc4:	6f 85       	ldd	r22, Y+15	; 0x0f
     bc6:	c1 01       	movw	r24, r2
     bc8:	21 df       	rcall	.-446    	; 0xa0c <_ZN7Display9draw_lineEhhhf>
	draw_line(basecenter_x,basecenter_y,baselength/2,rotationangle-M_PI);
     bca:	2b ed       	ldi	r18, 0xDB	; 219
     bcc:	3f e0       	ldi	r19, 0x0F	; 15
     bce:	49 e4       	ldi	r20, 0x49	; 73
     bd0:	50 e4       	ldi	r21, 0x40	; 64
     bd2:	c5 01       	movw	r24, r10
     bd4:	b4 01       	movw	r22, r8
     bd6:	0e 94 8f 27 	call	0x4f1e	; 0x4f1e <__subsf3>
     bda:	7b 01       	movw	r14, r22
     bdc:	8c 01       	movw	r16, r24
     bde:	27 2d       	mov	r18, r7
     be0:	4d 81       	ldd	r20, Y+5	; 0x05
     be2:	6f 85       	ldd	r22, Y+15	; 0x0f
     be4:	c1 01       	movw	r24, r2
     be6:	12 df       	rcall	.-476    	; 0xa0c <_ZN7Display9draw_lineEhhhf>
	//draw midleline
	uint8_t middlelength=baselength/2*tan(baseangle);
     be8:	6e 81       	ldd	r22, Y+6	; 0x06
     bea:	7f 81       	ldd	r23, Y+7	; 0x07
     bec:	88 85       	ldd	r24, Y+8	; 0x08
     bee:	99 85       	ldd	r25, Y+9	; 0x09
     bf0:	0e 94 c2 2a 	call	0x5584	; 0x5584 <tan>
     bf4:	6b 01       	movw	r12, r22
     bf6:	7c 01       	movw	r14, r24
     bf8:	67 2d       	mov	r22, r7
     bfa:	70 e0       	ldi	r23, 0x00	; 0
     bfc:	80 e0       	ldi	r24, 0x00	; 0
     bfe:	90 e0       	ldi	r25, 0x00	; 0
     c00:	0e 94 f8 28 	call	0x51f0	; 0x51f0 <__floatsisf>
     c04:	a7 01       	movw	r20, r14
     c06:	96 01       	movw	r18, r12
     c08:	0e 94 56 2a 	call	0x54ac	; 0x54ac <__mulsf3>
     c0c:	0e 94 ca 28 	call	0x5194	; 0x5194 <__fixunssfsi>
     c10:	68 8b       	std	Y+16, r22	; 0x10
	draw_line(basecenter_x,basecenter_y,middlelength,rotationangle-M_PI_2);
     c12:	2b ed       	ldi	r18, 0xDB	; 219
     c14:	3f e0       	ldi	r19, 0x0F	; 15
     c16:	49 ec       	ldi	r20, 0xC9	; 201
     c18:	5f e3       	ldi	r21, 0x3F	; 63
     c1a:	c5 01       	movw	r24, r10
     c1c:	b4 01       	movw	r22, r8
     c1e:	0e 94 8f 27 	call	0x4f1e	; 0x4f1e <__subsf3>
     c22:	6a 87       	std	Y+10, r22	; 0x0a
     c24:	7b 87       	std	Y+11, r23	; 0x0b
     c26:	8c 87       	std	Y+12, r24	; 0x0c
     c28:	9d 87       	std	Y+13, r25	; 0x0d
     c2a:	7b 01       	movw	r14, r22
     c2c:	8c 01       	movw	r16, r24
     c2e:	28 89       	ldd	r18, Y+16	; 0x10
     c30:	4d 81       	ldd	r20, Y+5	; 0x05
     c32:	6f 85       	ldd	r22, Y+15	; 0x0f
     c34:	c1 01       	movw	r24, r2
     c36:	ea de       	rcall	.-556    	; 0xa0c <_ZN7Display9draw_lineEhhhf>
	//draw left arm
	uint8_t lengtharm=baselength/(2*cos(baseangle));
     c38:	6e 81       	ldd	r22, Y+6	; 0x06
     c3a:	7f 81       	ldd	r23, Y+7	; 0x07
     c3c:	88 85       	ldd	r24, Y+8	; 0x08
     c3e:	99 85       	ldd	r25, Y+9	; 0x09
     c40:	0e 94 5a 28 	call	0x50b4	; 0x50b4 <cos>
     c44:	6b 01       	movw	r12, r22
     c46:	7c 01       	movw	r14, r24
     c48:	29 81       	ldd	r18, Y+1	; 0x01
     c4a:	62 2f       	mov	r22, r18
     c4c:	70 e0       	ldi	r23, 0x00	; 0
     c4e:	80 e0       	ldi	r24, 0x00	; 0
     c50:	90 e0       	ldi	r25, 0x00	; 0
     c52:	0e 94 f8 28 	call	0x51f0	; 0x51f0 <__floatsisf>
     c56:	2b 01       	movw	r4, r22
     c58:	3c 01       	movw	r6, r24
     c5a:	a7 01       	movw	r20, r14
     c5c:	96 01       	movw	r18, r12
     c5e:	c7 01       	movw	r24, r14
     c60:	b6 01       	movw	r22, r12
     c62:	0e 94 90 27 	call	0x4f20	; 0x4f20 <__addsf3>
     c66:	9b 01       	movw	r18, r22
     c68:	ac 01       	movw	r20, r24
     c6a:	c3 01       	movw	r24, r6
     c6c:	b2 01       	movw	r22, r4
     c6e:	0e 94 5d 28 	call	0x50ba	; 0x50ba <__divsf3>
     c72:	0e 94 ca 28 	call	0x5194	; 0x5194 <__fixunssfsi>
     c76:	6e 87       	std	Y+14, r22	; 0x0e
	uint8_t sx = basecenter_x-middlelength*cos(rotationangle-M_PI_2);
     c78:	e8 89       	ldd	r30, Y+16	; 0x10
     c7a:	6e 2f       	mov	r22, r30
     c7c:	70 e0       	ldi	r23, 0x00	; 0
     c7e:	80 e0       	ldi	r24, 0x00	; 0
     c80:	90 e0       	ldi	r25, 0x00	; 0
     c82:	0e 94 f8 28 	call	0x51f0	; 0x51f0 <__floatsisf>
     c86:	69 83       	std	Y+1, r22	; 0x01
     c88:	7a 83       	std	Y+2, r23	; 0x02
     c8a:	8b 83       	std	Y+3, r24	; 0x03
     c8c:	9c 83       	std	Y+4, r25	; 0x04
     c8e:	6a 85       	ldd	r22, Y+10	; 0x0a
     c90:	7b 85       	ldd	r23, Y+11	; 0x0b
     c92:	8c 85       	ldd	r24, Y+12	; 0x0c
     c94:	9d 85       	ldd	r25, Y+13	; 0x0d
     c96:	0e 94 5a 28 	call	0x50b4	; 0x50b4 <cos>
     c9a:	6b 01       	movw	r12, r22
     c9c:	7c 01       	movw	r14, r24
     c9e:	ff 85       	ldd	r31, Y+15	; 0x0f
     ca0:	6f 2f       	mov	r22, r31
     ca2:	70 e0       	ldi	r23, 0x00	; 0
     ca4:	80 e0       	ldi	r24, 0x00	; 0
     ca6:	90 e0       	ldi	r25, 0x00	; 0
     ca8:	0e 94 f8 28 	call	0x51f0	; 0x51f0 <__floatsisf>
     cac:	2b 01       	movw	r4, r22
     cae:	3c 01       	movw	r6, r24
     cb0:	a7 01       	movw	r20, r14
     cb2:	96 01       	movw	r18, r12
     cb4:	69 81       	ldd	r22, Y+1	; 0x01
     cb6:	7a 81       	ldd	r23, Y+2	; 0x02
     cb8:	8b 81       	ldd	r24, Y+3	; 0x03
     cba:	9c 81       	ldd	r25, Y+4	; 0x04
     cbc:	0e 94 56 2a 	call	0x54ac	; 0x54ac <__mulsf3>
     cc0:	9b 01       	movw	r18, r22
     cc2:	ac 01       	movw	r20, r24
     cc4:	c3 01       	movw	r24, r6
     cc6:	b2 01       	movw	r22, r4
     cc8:	0e 94 8f 27 	call	0x4f1e	; 0x4f1e <__subsf3>
     ccc:	0e 94 ca 28 	call	0x5194	; 0x5194 <__fixunssfsi>
     cd0:	6f 87       	std	Y+15, r22	; 0x0f
	uint8_t sy = basecenter_y+middlelength*sin(rotationangle-M_PI_2);
     cd2:	6a 85       	ldd	r22, Y+10	; 0x0a
     cd4:	7b 85       	ldd	r23, Y+11	; 0x0b
     cd6:	8c 85       	ldd	r24, Y+12	; 0x0c
     cd8:	9d 85       	ldd	r25, Y+13	; 0x0d
     cda:	0e 94 b9 2a 	call	0x5572	; 0x5572 <sin>
     cde:	6b 01       	movw	r12, r22
     ce0:	7c 01       	movw	r14, r24
     ce2:	2d 81       	ldd	r18, Y+5	; 0x05
     ce4:	62 2f       	mov	r22, r18
     ce6:	70 e0       	ldi	r23, 0x00	; 0
     ce8:	80 e0       	ldi	r24, 0x00	; 0
     cea:	90 e0       	ldi	r25, 0x00	; 0
     cec:	0e 94 f8 28 	call	0x51f0	; 0x51f0 <__floatsisf>
     cf0:	2b 01       	movw	r4, r22
     cf2:	3c 01       	movw	r6, r24
     cf4:	a7 01       	movw	r20, r14
     cf6:	96 01       	movw	r18, r12
     cf8:	69 81       	ldd	r22, Y+1	; 0x01
     cfa:	7a 81       	ldd	r23, Y+2	; 0x02
     cfc:	8b 81       	ldd	r24, Y+3	; 0x03
     cfe:	9c 81       	ldd	r25, Y+4	; 0x04
     d00:	0e 94 56 2a 	call	0x54ac	; 0x54ac <__mulsf3>
     d04:	9b 01       	movw	r18, r22
     d06:	ac 01       	movw	r20, r24
     d08:	c3 01       	movw	r24, r6
     d0a:	b2 01       	movw	r22, r4
     d0c:	0e 94 90 27 	call	0x4f20	; 0x4f20 <__addsf3>
     d10:	0e 94 ca 28 	call	0x5194	; 0x5194 <__fixunssfsi>
     d14:	d6 2e       	mov	r13, r22
	draw_line(sx,sy,lengtharm,baseangle+rotationangle);
     d16:	a5 01       	movw	r20, r10
     d18:	94 01       	movw	r18, r8
     d1a:	6e 81       	ldd	r22, Y+6	; 0x06
     d1c:	7f 81       	ldd	r23, Y+7	; 0x07
     d1e:	88 85       	ldd	r24, Y+8	; 0x08
     d20:	99 85       	ldd	r25, Y+9	; 0x09
     d22:	0e 94 90 27 	call	0x4f20	; 0x4f20 <__addsf3>
     d26:	7b 01       	movw	r14, r22
     d28:	8c 01       	movw	r16, r24
     d2a:	2e 85       	ldd	r18, Y+14	; 0x0e
     d2c:	4d 2d       	mov	r20, r13
     d2e:	6f 85       	ldd	r22, Y+15	; 0x0f
     d30:	c1 01       	movw	r24, r2
     d32:	6c de       	rcall	.-808    	; 0xa0c <_ZN7Display9draw_lineEhhhf>
	//draw right arm
	draw_line(sx,sy,lengtharm,-baseangle+rotationangle-M_PI);
     d34:	2e 81       	ldd	r18, Y+6	; 0x06
     d36:	3f 81       	ldd	r19, Y+7	; 0x07
     d38:	48 85       	ldd	r20, Y+8	; 0x08
     d3a:	59 85       	ldd	r21, Y+9	; 0x09
     d3c:	c5 01       	movw	r24, r10
     d3e:	b4 01       	movw	r22, r8
     d40:	0e 94 8f 27 	call	0x4f1e	; 0x4f1e <__subsf3>
     d44:	2b ed       	ldi	r18, 0xDB	; 219
     d46:	3f e0       	ldi	r19, 0x0F	; 15
     d48:	49 e4       	ldi	r20, 0x49	; 73
     d4a:	50 e4       	ldi	r21, 0x40	; 64
     d4c:	0e 94 8f 27 	call	0x4f1e	; 0x4f1e <__subsf3>
     d50:	7b 01       	movw	r14, r22
     d52:	8c 01       	movw	r16, r24
     d54:	2e 85       	ldd	r18, Y+14	; 0x0e
     d56:	4d 2d       	mov	r20, r13
     d58:	6f 85       	ldd	r22, Y+15	; 0x0f
     d5a:	c1 01       	movw	r24, r2
     d5c:	57 de       	rcall	.-850    	; 0xa0c <_ZN7Display9draw_lineEhhhf>
}
     d5e:	60 96       	adiw	r28, 0x10	; 16
     d60:	0f b6       	in	r0, 0x3f	; 63
     d62:	f8 94       	cli
     d64:	de bf       	out	0x3e, r29	; 62
     d66:	0f be       	out	0x3f, r0	; 63
     d68:	cd bf       	out	0x3d, r28	; 61
     d6a:	df 91       	pop	r29
     d6c:	cf 91       	pop	r28
     d6e:	1f 91       	pop	r17
     d70:	0f 91       	pop	r16
     d72:	ff 90       	pop	r15
     d74:	ef 90       	pop	r14
     d76:	df 90       	pop	r13
     d78:	cf 90       	pop	r12
     d7a:	bf 90       	pop	r11
     d7c:	af 90       	pop	r10
     d7e:	9f 90       	pop	r9
     d80:	8f 90       	pop	r8
     d82:	7f 90       	pop	r7
     d84:	6f 90       	pop	r6
     d86:	5f 90       	pop	r5
     d88:	4f 90       	pop	r4
     d8a:	3f 90       	pop	r3
     d8c:	2f 90       	pop	r2
     d8e:	08 95       	ret

00000d90 <_ZN7Display9draw_ASCIEhhh>:

void Display::draw_ASCI(uint8_t sym,uint8_t x, uint8_t y){
     d90:	0f 93       	push	r16
     d92:	1f 93       	push	r17
     d94:	cf 93       	push	r28
     d96:	df 93       	push	r29
	if(sym!=' ' && sym>=33){
     d98:	61 32       	cpi	r22, 0x21	; 33
     d9a:	08 f4       	brcc	.+2      	; 0xd9e <_ZN7Display9draw_ASCIEhhh+0xe>
     d9c:	42 c0       	rjmp	.+132    	; 0xe22 <_ZN7Display9draw_ASCIEhhh+0x92>
		sym-=33;
		uint16_t symbol;
		for(uint8_t i = 0; i < 5; i++){
			symbol = pgm_read_byte(&font5x8[sym][i]);
			symbol = symbol << y%8;
			Displayframe[x+(y/8)*SSD1306_WIDTH+i] |=(uint8_t) (symbol & 0x00FF);
     d9e:	a4 2f       	mov	r26, r20
     da0:	b0 e0       	ldi	r27, 0x00	; 0
     da2:	02 2f       	mov	r16, r18
     da4:	06 95       	lsr	r16
     da6:	06 95       	lsr	r16
     da8:	06 95       	lsr	r16
     daa:	30 e8       	ldi	r19, 0x80	; 128
     dac:	03 9f       	mul	r16, r19
     dae:	80 01       	movw	r16, r0
     db0:	11 24       	eor	r1, r1
     db2:	ed 01       	movw	r28, r26
     db4:	c0 0f       	add	r28, r16
     db6:	d1 1f       	adc	r29, r17
			if(((symbol&0xFF00)>>8)==0){
				Displayframe[x+(y/8+1)*SSD1306_WIDTH+i] |= 0;
			}
			else {
				Displayframe[x+(y/8+1)*SSD1306_WIDTH+i] |= (uint8_t) ((symbol & 0xFF00)>>8);
     db8:	00 58       	subi	r16, 0x80	; 128
     dba:	1f 4f       	sbci	r17, 0xFF	; 255
     dbc:	0a 0f       	add	r16, r26
     dbe:	1b 1f       	adc	r17, r27
	draw_line(sx,sy,lengtharm,-baseangle+rotationangle-M_PI);
}

void Display::draw_ASCI(uint8_t sym,uint8_t x, uint8_t y){
	if(sym!=' ' && sym>=33){
		sym-=33;
     dc0:	61 52       	subi	r22, 0x21	; 33
     dc2:	46 2f       	mov	r20, r22
     dc4:	50 e0       	ldi	r21, 0x00	; 0
     dc6:	fa 01       	movw	r30, r20
     dc8:	ee 0f       	add	r30, r30
     dca:	ff 1f       	adc	r31, r31
     dcc:	ee 0f       	add	r30, r30
     dce:	ff 1f       	adc	r31, r31
     dd0:	e4 0f       	add	r30, r20
     dd2:	f5 1f       	adc	r31, r21
     dd4:	ea 53       	subi	r30, 0x3A	; 58
     dd6:	fb 4f       	sbci	r31, 0xFB	; 251
     dd8:	dc 01       	movw	r26, r24
     dda:	ac 0f       	add	r26, r28
     ddc:	bd 1f       	adc	r27, r29
     dde:	ae 01       	movw	r20, r28
     de0:	05 96       	adiw	r24, 0x05	; 5
     de2:	8c 0f       	add	r24, r28
     de4:	9d 1f       	adc	r25, r29
		uint16_t symbol;
		for(uint8_t i = 0; i < 5; i++){
			symbol = pgm_read_byte(&font5x8[sym][i]);
			symbol = symbol << y%8;
     de6:	27 70       	andi	r18, 0x07	; 7
void Display::draw_ASCI(uint8_t sym,uint8_t x, uint8_t y){
	if(sym!=' ' && sym>=33){
		sym-=33;
		uint16_t symbol;
		for(uint8_t i = 0; i < 5; i++){
			symbol = pgm_read_byte(&font5x8[sym][i]);
     de8:	64 91       	lpm	r22, Z
     dea:	70 e0       	ldi	r23, 0x00	; 0
			symbol = symbol << y%8;
     dec:	02 2e       	mov	r0, r18
     dee:	02 c0       	rjmp	.+4      	; 0xdf4 <_ZN7Display9draw_ASCIEhhh+0x64>
     df0:	66 0f       	add	r22, r22
     df2:	77 1f       	adc	r23, r23
     df4:	0a 94       	dec	r0
     df6:	e2 f7       	brpl	.-8      	; 0xdf0 <_ZN7Display9draw_ASCIEhhh+0x60>
			Displayframe[x+(y/8)*SSD1306_WIDTH+i] |=(uint8_t) (symbol & 0x00FF);
     df8:	3c 91       	ld	r19, X
     dfa:	36 2b       	or	r19, r22
     dfc:	3c 93       	st	X, r19
			if(((symbol&0xFF00)>>8)==0){
     dfe:	67 2f       	mov	r22, r23
     e00:	77 27       	eor	r23, r23
     e02:	61 15       	cp	r22, r1
     e04:	71 05       	cpc	r23, r1
     e06:	41 f0       	breq	.+16     	; 0xe18 <_ZN7Display9draw_ASCIEhhh+0x88>
     e08:	ed 01       	movw	r28, r26
     e0a:	c4 1b       	sub	r28, r20
     e0c:	d5 0b       	sbc	r29, r21
     e0e:	c0 0f       	add	r28, r16
     e10:	d1 1f       	adc	r29, r17
				Displayframe[x+(y/8+1)*SSD1306_WIDTH+i] |= 0;
			}
			else {
				Displayframe[x+(y/8+1)*SSD1306_WIDTH+i] |= (uint8_t) ((symbol & 0xFF00)>>8);
     e12:	38 81       	ld	r19, Y
     e14:	63 2b       	or	r22, r19
     e16:	68 83       	st	Y, r22
     e18:	31 96       	adiw	r30, 0x01	; 1
     e1a:	11 96       	adiw	r26, 0x01	; 1

void Display::draw_ASCI(uint8_t sym,uint8_t x, uint8_t y){
	if(sym!=' ' && sym>=33){
		sym-=33;
		uint16_t symbol;
		for(uint8_t i = 0; i < 5; i++){
     e1c:	a8 17       	cp	r26, r24
     e1e:	b9 07       	cpc	r27, r25
     e20:	19 f7       	brne	.-58     	; 0xde8 <_ZN7Display9draw_ASCIEhhh+0x58>
	else{
		for(uint8_t i = 0; i < 7; i++){
			Displayframe[x+(y/8)*SSD1306_WIDTH+i] |= 0;
		}
	}
}
     e22:	df 91       	pop	r29
     e24:	cf 91       	pop	r28
     e26:	1f 91       	pop	r17
     e28:	0f 91       	pop	r16
     e2a:	08 95       	ret

00000e2c <_ZN7Display12draw_pikachuEv>:

void Display::draw_pikachu(){
     e2c:	cf 93       	push	r28
     e2e:	46 e8       	ldi	r20, 0x86	; 134
     e30:	51 e0       	ldi	r21, 0x01	; 1
     e32:	66 e8       	ldi	r22, 0x86	; 134
     e34:	73 e0       	ldi	r23, 0x03	; 3
     e36:	0d c0       	rjmp	.+26     	; 0xe52 <_ZN7Display12draw_pikachuEv+0x26>
	for (uint8_t i = 0; i<8;i++)
	{
		for (uint8_t j = 0;j<64;j++)
		{
			Displayframe[i*SSD1306_WIDTH+j]=pgm_read_byte(&Pikachu[i][j]);
     e38:	c4 91       	lpm	r28, Z
     e3a:	cd 93       	st	X+, r28
     e3c:	31 96       	adiw	r30, 0x01	; 1
}

void Display::draw_pikachu(){
	for (uint8_t i = 0; i<8;i++)
	{
		for (uint8_t j = 0;j<64;j++)
     e3e:	a2 17       	cp	r26, r18
     e40:	b3 07       	cpc	r27, r19
     e42:	d1 f7       	brne	.-12     	; 0xe38 <_ZN7Display12draw_pikachuEv+0xc>
     e44:	40 5c       	subi	r20, 0xC0	; 192
     e46:	5f 4f       	sbci	r21, 0xFF	; 255
     e48:	80 58       	subi	r24, 0x80	; 128
     e4a:	9f 4f       	sbci	r25, 0xFF	; 255
		}
	}
}

void Display::draw_pikachu(){
	for (uint8_t i = 0; i<8;i++)
     e4c:	46 17       	cp	r20, r22
     e4e:	57 07       	cpc	r21, r23
     e50:	31 f0       	breq	.+12     	; 0xe5e <_ZN7Display12draw_pikachuEv+0x32>
     e52:	9c 01       	movw	r18, r24
     e54:	20 5c       	subi	r18, 0xC0	; 192
     e56:	3f 4f       	sbci	r19, 0xFF	; 255
			Displayframe[x+(y/8)*SSD1306_WIDTH+i] |= 0;
		}
	}
}

void Display::draw_pikachu(){
     e58:	dc 01       	movw	r26, r24
     e5a:	fa 01       	movw	r30, r20
     e5c:	ed cf       	rjmp	.-38     	; 0xe38 <_ZN7Display12draw_pikachuEv+0xc>
		for (uint8_t j = 0;j<64;j++)
		{
			Displayframe[i*SSD1306_WIDTH+j]=pgm_read_byte(&Pikachu[i][j]);
		}
	}
}
     e5e:	cf 91       	pop	r28
     e60:	08 95       	ret

00000e62 <_ZN7Display16draw_number16x16Ehhh>:

void Display::draw_number16x16(uint8_t number, uint8_t x, uint8_t y){
     e62:	ef 92       	push	r14
     e64:	ff 92       	push	r15
     e66:	0f 93       	push	r16
     e68:	1f 93       	push	r17
     e6a:	cf 93       	push	r28
     e6c:	df 93       	push	r29
	uint16_t symbol;
	if(number>=0 && number<10){
     e6e:	6a 30       	cpi	r22, 0x0A	; 10
     e70:	08 f0       	brcs	.+2      	; 0xe74 <_ZN7Display16draw_number16x16Ehhh+0x12>
     e72:	66 c0       	rjmp	.+204    	; 0xf40 <_ZN7Display16draw_number16x16Ehhh+0xde>
		for(uint8_t i = 0; i < 32;i++){
			symbol = pgm_read_byte(&digits16x16[number][i]);
			symbol = symbol << y%8;
			if(i<16){
				Displayframe[x+(y/8)*SSD1306_WIDTH+i] |=(uint8_t) (symbol & 0x00FF);
     e74:	50 e0       	ldi	r21, 0x00	; 0
     e76:	02 2f       	mov	r16, r18
     e78:	06 95       	lsr	r16
     e7a:	06 95       	lsr	r16
     e7c:	06 95       	lsr	r16
     e7e:	10 e0       	ldi	r17, 0x00	; 0
     e80:	d8 01       	movw	r26, r16
     e82:	b6 95       	lsr	r27
     e84:	ba 2f       	mov	r27, r26
     e86:	aa 27       	eor	r26, r26
     e88:	b7 95       	ror	r27
     e8a:	a7 95       	ror	r26
				if(((symbol&0xFF00)>>8)==0){
					Displayframe[x+(y/8+1)*SSD1306_WIDTH+i] |= 0;
				}
				else {
					Displayframe[x+(y/8+1)*SSD1306_WIDTH+i] |= (uint8_t) ((symbol & 0xFF00)>>8);
     e8c:	0f 5f       	subi	r16, 0xFF	; 255
     e8e:	1f 4f       	sbci	r17, 0xFF	; 255
				}
			}
			else {
				Displayframe[x+(y/8+1)*SSD1306_WIDTH+(i-16)] |= (uint8_t) (symbol & 0x00FF);
     e90:	16 95       	lsr	r17
     e92:	10 2f       	mov	r17, r16
     e94:	00 27       	eor	r16, r16
     e96:	17 95       	ror	r17
     e98:	07 95       	ror	r16
				Displayframe[x+(y/8)*SSD1306_WIDTH+i] |=(uint8_t) (symbol & 0x00FF);
				if(((symbol&0xFF00)>>8)==0){
					Displayframe[x+(y/8+1)*SSD1306_WIDTH+i] |= 0;
				}
				else {
					Displayframe[x+(y/8+1)*SSD1306_WIDTH+i] |= (uint8_t) ((symbol & 0xFF00)>>8);
     e9a:	7d 01       	movw	r14, r26
     e9c:	30 e8       	ldi	r19, 0x80	; 128
     e9e:	e3 0e       	add	r14, r19
     ea0:	f1 1c       	adc	r15, r1
     ea2:	e4 0e       	add	r14, r20
     ea4:	f5 1e       	adc	r15, r21
     ea6:	e8 0e       	add	r14, r24
     ea8:	f9 1e       	adc	r15, r25
				}
			}
			else {
				Displayframe[x+(y/8+1)*SSD1306_WIDTH+(i-16)] |= (uint8_t) (symbol & 0x00FF);
     eaa:	ea 01       	movw	r28, r20
     eac:	c0 0f       	add	r28, r16
     eae:	d1 1f       	adc	r29, r17
     eb0:	60 97       	sbiw	r28, 0x10	; 16
     eb2:	c8 0f       	add	r28, r24
     eb4:	d9 1f       	adc	r29, r25
				if(((symbol&0xFF00)>>8)==0){
					Displayframe[x+(y/8+2)*SSD1306_WIDTH+(i-16)] |= 0;
				}
				else {
					Displayframe[x+(y/8+2)*SSD1306_WIDTH+(i-16)] |= (uint8_t) ((symbol & 0xFF00)>>8);
     eb6:	04 0f       	add	r16, r20
     eb8:	15 1f       	adc	r17, r21
     eba:	00 59       	subi	r16, 0x90	; 144
     ebc:	1f 4f       	sbci	r17, 0xFF	; 255
     ebe:	08 0f       	add	r16, r24
     ec0:	19 1f       	adc	r17, r25
	if(number>=0 && number<10){
		for(uint8_t i = 0; i < 32;i++){
			symbol = pgm_read_byte(&digits16x16[number][i]);
			symbol = symbol << y%8;
			if(i<16){
				Displayframe[x+(y/8)*SSD1306_WIDTH+i] |=(uint8_t) (symbol & 0x00FF);
     ec2:	a4 0f       	add	r26, r20
     ec4:	b5 1f       	adc	r27, r21
     ec6:	a8 0f       	add	r26, r24
     ec8:	b9 1f       	adc	r27, r25
     eca:	e0 e2       	ldi	r30, 0x20	; 32
     ecc:	6e 9f       	mul	r22, r30
     ece:	c0 01       	movw	r24, r0
     ed0:	11 24       	eor	r1, r1
				Displayframe[x+(y/8+1)*SSD1306_WIDTH+(i-16)] |= (uint8_t) (symbol & 0x00FF);
				if(((symbol&0xFF00)>>8)==0){
					Displayframe[x+(y/8+2)*SSD1306_WIDTH+(i-16)] |= 0;
				}
				else {
					Displayframe[x+(y/8+2)*SSD1306_WIDTH+(i-16)] |= (uint8_t) ((symbol & 0xFF00)>>8);
     ed2:	40 e0       	ldi	r20, 0x00	; 0
     ed4:	50 e0       	ldi	r21, 0x00	; 0
     ed6:	8a 57       	subi	r24, 0x7A	; 122
     ed8:	9c 4f       	sbci	r25, 0xFC	; 252
void Display::draw_number16x16(uint8_t number, uint8_t x, uint8_t y){
	uint16_t symbol;
	if(number>=0 && number<10){
		for(uint8_t i = 0; i < 32;i++){
			symbol = pgm_read_byte(&digits16x16[number][i]);
			symbol = symbol << y%8;
     eda:	27 70       	andi	r18, 0x07	; 7
     edc:	fc 01       	movw	r30, r24
     ede:	e4 0f       	add	r30, r20
     ee0:	f5 1f       	adc	r31, r21

void Display::draw_number16x16(uint8_t number, uint8_t x, uint8_t y){
	uint16_t symbol;
	if(number>=0 && number<10){
		for(uint8_t i = 0; i < 32;i++){
			symbol = pgm_read_byte(&digits16x16[number][i]);
     ee2:	e4 91       	lpm	r30, Z
     ee4:	f0 e0       	ldi	r31, 0x00	; 0
			symbol = symbol << y%8;
     ee6:	02 2e       	mov	r0, r18
     ee8:	02 c0       	rjmp	.+4      	; 0xeee <_ZN7Display16draw_number16x16Ehhh+0x8c>
     eea:	ee 0f       	add	r30, r30
     eec:	ff 1f       	adc	r31, r31
     eee:	0a 94       	dec	r0
     ef0:	e2 f7       	brpl	.-8      	; 0xeea <_ZN7Display16draw_number16x16Ehhh+0x88>
			if(i<16){
     ef2:	40 31       	cpi	r20, 0x10	; 16
     ef4:	68 f4       	brcc	.+26     	; 0xf10 <_ZN7Display16draw_number16x16Ehhh+0xae>
				Displayframe[x+(y/8)*SSD1306_WIDTH+i] |=(uint8_t) (symbol & 0x00FF);
     ef6:	3c 91       	ld	r19, X
     ef8:	3e 2b       	or	r19, r30
     efa:	3c 93       	st	X, r19
				if(((symbol&0xFF00)>>8)==0){
     efc:	6f 2f       	mov	r22, r31
     efe:	77 27       	eor	r23, r23
     f00:	61 15       	cp	r22, r1
     f02:	71 05       	cpc	r23, r1
     f04:	89 f0       	breq	.+34     	; 0xf28 <_ZN7Display16draw_number16x16Ehhh+0xc6>
					Displayframe[x+(y/8+1)*SSD1306_WIDTH+i] |= 0;
				}
				else {
					Displayframe[x+(y/8+1)*SSD1306_WIDTH+i] |= (uint8_t) ((symbol & 0xFF00)>>8);
     f06:	f7 01       	movw	r30, r14
     f08:	30 81       	ld	r19, Z
     f0a:	36 2b       	or	r19, r22
     f0c:	30 83       	st	Z, r19
     f0e:	0c c0       	rjmp	.+24     	; 0xf28 <_ZN7Display16draw_number16x16Ehhh+0xc6>
				}
			}
			else {
				Displayframe[x+(y/8+1)*SSD1306_WIDTH+(i-16)] |= (uint8_t) (symbol & 0x00FF);
     f10:	38 81       	ld	r19, Y
     f12:	3e 2b       	or	r19, r30
     f14:	38 83       	st	Y, r19
				if(((symbol&0xFF00)>>8)==0){
     f16:	6f 2f       	mov	r22, r31
     f18:	77 27       	eor	r23, r23
     f1a:	61 15       	cp	r22, r1
     f1c:	71 05       	cpc	r23, r1
     f1e:	21 f0       	breq	.+8      	; 0xf28 <_ZN7Display16draw_number16x16Ehhh+0xc6>
					Displayframe[x+(y/8+2)*SSD1306_WIDTH+(i-16)] |= 0;
				}
				else {
					Displayframe[x+(y/8+2)*SSD1306_WIDTH+(i-16)] |= (uint8_t) ((symbol & 0xFF00)>>8);
     f20:	f8 01       	movw	r30, r16
     f22:	30 81       	ld	r19, Z
     f24:	36 2b       	or	r19, r22
     f26:	30 83       	st	Z, r19
     f28:	4f 5f       	subi	r20, 0xFF	; 255
     f2a:	5f 4f       	sbci	r21, 0xFF	; 255
     f2c:	ff ef       	ldi	r31, 0xFF	; 255
     f2e:	ef 1a       	sub	r14, r31
     f30:	ff 0a       	sbc	r15, r31
     f32:	21 96       	adiw	r28, 0x01	; 1
     f34:	0f 5f       	subi	r16, 0xFF	; 255
     f36:	1f 4f       	sbci	r17, 0xFF	; 255
     f38:	11 96       	adiw	r26, 0x01	; 1
}

void Display::draw_number16x16(uint8_t number, uint8_t x, uint8_t y){
	uint16_t symbol;
	if(number>=0 && number<10){
		for(uint8_t i = 0; i < 32;i++){
     f3a:	40 32       	cpi	r20, 0x20	; 32
     f3c:	51 05       	cpc	r21, r1
     f3e:	71 f6       	brne	.-100    	; 0xedc <_ZN7Display16draw_number16x16Ehhh+0x7a>
					Displayframe[x+(y/8+2)*SSD1306_WIDTH+(i-16)] |= (uint8_t) ((symbol & 0xFF00)>>8);
				}
			}
		}
	}
}
     f40:	df 91       	pop	r29
     f42:	cf 91       	pop	r28
     f44:	1f 91       	pop	r17
     f46:	0f 91       	pop	r16
     f48:	ff 90       	pop	r15
     f4a:	ef 90       	pop	r14
     f4c:	08 95       	ret

00000f4e <_ZN7Display6analogEhhhh>:

void Display::analog(uint8_t stunde, uint8_t minute, uint8_t sekunde, uint8_t sekanzeige){
     f4e:	2f 92       	push	r2
     f50:	3f 92       	push	r3
     f52:	4f 92       	push	r4
     f54:	5f 92       	push	r5
     f56:	6f 92       	push	r6
     f58:	7f 92       	push	r7
     f5a:	8f 92       	push	r8
     f5c:	9f 92       	push	r9
     f5e:	af 92       	push	r10
     f60:	bf 92       	push	r11
     f62:	cf 92       	push	r12
     f64:	df 92       	push	r13
     f66:	ef 92       	push	r14
     f68:	ff 92       	push	r15
     f6a:	0f 93       	push	r16
     f6c:	1f 93       	push	r17
     f6e:	cf 93       	push	r28
     f70:	df 93       	push	r29
     f72:	cd b7       	in	r28, 0x3d	; 61
     f74:	de b7       	in	r29, 0x3e	; 62
     f76:	27 97       	sbiw	r28, 0x07	; 7
     f78:	0f b6       	in	r0, 0x3f	; 63
     f7a:	f8 94       	cli
     f7c:	de bf       	out	0x3e, r29	; 62
     f7e:	0f be       	out	0x3f, r0	; 63
     f80:	cd bf       	out	0x3d, r28	; 61
     f82:	9f 83       	std	Y+7, r25	; 0x07
     f84:	8e 83       	std	Y+6, r24	; 0x06
     f86:	6d 83       	std	Y+5, r22	; 0x05
     f88:	34 2e       	mov	r3, r20
	uint8_t Px=32-1;
	uint8_t Py=32-1;
	uint8_t x=0,y=0;
	float winkel=0;
	
	if (sekanzeige)
     f8a:	00 23       	and	r16, r16
     f8c:	09 f4       	brne	.+2      	; 0xf90 <_ZN7Display6analogEhhhh+0x42>
     f8e:	26 c1       	rjmp	.+588    	; 0x11dc <_ZN7Display6analogEhhhh+0x28e>
	{
		//Berechnen des Sekundenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(sekunde*6.0)*M_PI/180.0-M_PI/2.0;
     f90:	62 2f       	mov	r22, r18
     f92:	70 e0       	ldi	r23, 0x00	; 0
     f94:	80 e0       	ldi	r24, 0x00	; 0
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	0e 94 f8 28 	call	0x51f0	; 0x51f0 <__floatsisf>
     f9c:	20 e0       	ldi	r18, 0x00	; 0
     f9e:	30 e0       	ldi	r19, 0x00	; 0
     fa0:	40 ec       	ldi	r20, 0xC0	; 192
     fa2:	50 e4       	ldi	r21, 0x40	; 64
     fa4:	0e 94 56 2a 	call	0x54ac	; 0x54ac <__mulsf3>
     fa8:	2b ed       	ldi	r18, 0xDB	; 219
     faa:	3f e0       	ldi	r19, 0x0F	; 15
     fac:	49 e4       	ldi	r20, 0x49	; 73
     fae:	50 e4       	ldi	r21, 0x40	; 64
     fb0:	0e 94 56 2a 	call	0x54ac	; 0x54ac <__mulsf3>
     fb4:	20 e0       	ldi	r18, 0x00	; 0
     fb6:	30 e0       	ldi	r19, 0x00	; 0
     fb8:	44 e3       	ldi	r20, 0x34	; 52
     fba:	53 e4       	ldi	r21, 0x43	; 67
     fbc:	0e 94 5d 28 	call	0x50ba	; 0x50ba <__divsf3>
     fc0:	2b ed       	ldi	r18, 0xDB	; 219
     fc2:	3f e0       	ldi	r19, 0x0F	; 15
     fc4:	49 ec       	ldi	r20, 0xC9	; 201
     fc6:	5f e3       	ldi	r21, 0x3F	; 63
     fc8:	0e 94 8f 27 	call	0x4f1e	; 0x4f1e <__subsf3>
     fcc:	6b 01       	movw	r12, r22
     fce:	7c 01       	movw	r14, r24
			x=(uint8_t) i*cos(winkel)+Px;
     fd0:	0e 94 5a 28 	call	0x50b4	; 0x50b4 <cos>
     fd4:	2b 01       	movw	r4, r22
     fd6:	3c 01       	movw	r6, r24
			y=(uint8_t) i*sin(winkel)+Py;
     fd8:	c7 01       	movw	r24, r14
     fda:	b6 01       	movw	r22, r12
     fdc:	0e 94 b9 2a 	call	0x5572	; 0x5572 <sin>
     fe0:	4b 01       	movw	r8, r22
     fe2:	5c 01       	movw	r10, r24
     fe4:	00 e0       	ldi	r16, 0x00	; 0
     fe6:	10 e0       	ldi	r17, 0x00	; 0
	if (sekanzeige)
	{
		//Berechnen des Sekundenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(sekunde*6.0)*M_PI/180.0-M_PI/2.0;
			x=(uint8_t) i*cos(winkel)+Px;
     fe8:	b8 01       	movw	r22, r16
     fea:	88 27       	eor	r24, r24
     fec:	77 fd       	sbrc	r23, 7
     fee:	80 95       	com	r24
     ff0:	98 2f       	mov	r25, r24
     ff2:	0e 94 f8 28 	call	0x51f0	; 0x51f0 <__floatsisf>
     ff6:	6b 01       	movw	r12, r22
     ff8:	7c 01       	movw	r14, r24
			y=(uint8_t) i*sin(winkel)+Py;
     ffa:	a5 01       	movw	r20, r10
     ffc:	94 01       	movw	r18, r8
     ffe:	0e 94 56 2a 	call	0x54ac	; 0x54ac <__mulsf3>
    1002:	20 e0       	ldi	r18, 0x00	; 0
    1004:	30 e0       	ldi	r19, 0x00	; 0
    1006:	48 ef       	ldi	r20, 0xF8	; 248
    1008:	51 e4       	ldi	r21, 0x41	; 65
    100a:	0e 94 90 27 	call	0x4f20	; 0x4f20 <__addsf3>
    100e:	0e 94 ca 28 	call	0x5194	; 0x5194 <__fixunssfsi>
    1012:	26 2e       	mov	r2, r22
	if (sekanzeige)
	{
		//Berechnen des Sekundenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(sekunde*6.0)*M_PI/180.0-M_PI/2.0;
			x=(uint8_t) i*cos(winkel)+Px;
    1014:	a3 01       	movw	r20, r6
    1016:	92 01       	movw	r18, r4
    1018:	c7 01       	movw	r24, r14
    101a:	b6 01       	movw	r22, r12
    101c:	0e 94 56 2a 	call	0x54ac	; 0x54ac <__mulsf3>
    1020:	20 e0       	ldi	r18, 0x00	; 0
    1022:	30 e0       	ldi	r19, 0x00	; 0
    1024:	48 ef       	ldi	r20, 0xF8	; 248
    1026:	51 e4       	ldi	r21, 0x41	; 65
    1028:	0e 94 90 27 	call	0x4f20	; 0x4f20 <__addsf3>
    102c:	0e 94 ca 28 	call	0x5194	; 0x5194 <__fixunssfsi>
			y=(uint8_t) i*sin(winkel)+Py;

			drawPixel(x,y,0);
    1030:	20 e0       	ldi	r18, 0x00	; 0
    1032:	42 2d       	mov	r20, r2
    1034:	8e 81       	ldd	r24, Y+6	; 0x06
    1036:	9f 81       	ldd	r25, Y+7	; 0x07
    1038:	af dc       	rcall	.-1698   	; 0x998 <_ZN7Display9drawPixelEhhh>
    103a:	0f 5f       	subi	r16, 0xFF	; 255
    103c:	1f 4f       	sbci	r17, 0xFF	; 255
	float winkel=0;
	
	if (sekanzeige)
	{
		//Berechnen des Sekundenzeigers
		for(uint8_t i=0;i<r;i++){
    103e:	09 31       	cpi	r16, 0x19	; 25
    1040:	11 05       	cpc	r17, r1
    1042:	91 f6       	brne	.-92     	; 0xfe8 <_ZN7Display6analogEhhhh+0x9a>
		}

		r=21;
		//Berechnen des Minutenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(minute*6.0)*M_PI/180.0-M_PI/2.0;
    1044:	63 2d       	mov	r22, r3
    1046:	70 e0       	ldi	r23, 0x00	; 0
    1048:	80 e0       	ldi	r24, 0x00	; 0
    104a:	90 e0       	ldi	r25, 0x00	; 0
    104c:	0e 94 f8 28 	call	0x51f0	; 0x51f0 <__floatsisf>
    1050:	69 83       	std	Y+1, r22	; 0x01
    1052:	7a 83       	std	Y+2, r23	; 0x02
    1054:	8b 83       	std	Y+3, r24	; 0x03
    1056:	9c 83       	std	Y+4, r25	; 0x04
    1058:	20 e0       	ldi	r18, 0x00	; 0
    105a:	30 e0       	ldi	r19, 0x00	; 0
    105c:	40 ec       	ldi	r20, 0xC0	; 192
    105e:	50 e4       	ldi	r21, 0x40	; 64
    1060:	0e 94 56 2a 	call	0x54ac	; 0x54ac <__mulsf3>
    1064:	2b ed       	ldi	r18, 0xDB	; 219
    1066:	3f e0       	ldi	r19, 0x0F	; 15
    1068:	49 e4       	ldi	r20, 0x49	; 73
    106a:	50 e4       	ldi	r21, 0x40	; 64
    106c:	0e 94 56 2a 	call	0x54ac	; 0x54ac <__mulsf3>
    1070:	20 e0       	ldi	r18, 0x00	; 0
    1072:	30 e0       	ldi	r19, 0x00	; 0
    1074:	44 e3       	ldi	r20, 0x34	; 52
    1076:	53 e4       	ldi	r21, 0x43	; 67
    1078:	0e 94 5d 28 	call	0x50ba	; 0x50ba <__divsf3>
    107c:	2b ed       	ldi	r18, 0xDB	; 219
    107e:	3f e0       	ldi	r19, 0x0F	; 15
    1080:	49 ec       	ldi	r20, 0xC9	; 201
    1082:	5f e3       	ldi	r21, 0x3F	; 63
    1084:	0e 94 8f 27 	call	0x4f1e	; 0x4f1e <__subsf3>
    1088:	6b 01       	movw	r12, r22
    108a:	7c 01       	movw	r14, r24
			x=(uint8_t) i*cos(winkel)+Px;
    108c:	0e 94 5a 28 	call	0x50b4	; 0x50b4 <cos>
    1090:	4b 01       	movw	r8, r22
    1092:	5c 01       	movw	r10, r24
			y=(uint8_t) i*sin(winkel)+Py;
    1094:	c7 01       	movw	r24, r14
    1096:	b6 01       	movw	r22, r12
    1098:	0e 94 b9 2a 	call	0x5572	; 0x5572 <sin>
    109c:	2b 01       	movw	r4, r22
    109e:	3c 01       	movw	r6, r24
    10a0:	00 e0       	ldi	r16, 0x00	; 0
    10a2:	10 e0       	ldi	r17, 0x00	; 0

		r=21;
		//Berechnen des Minutenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(minute*6.0)*M_PI/180.0-M_PI/2.0;
			x=(uint8_t) i*cos(winkel)+Px;
    10a4:	b8 01       	movw	r22, r16
    10a6:	88 27       	eor	r24, r24
    10a8:	77 fd       	sbrc	r23, 7
    10aa:	80 95       	com	r24
    10ac:	98 2f       	mov	r25, r24
    10ae:	0e 94 f8 28 	call	0x51f0	; 0x51f0 <__floatsisf>
    10b2:	6b 01       	movw	r12, r22
    10b4:	7c 01       	movw	r14, r24
			y=(uint8_t) i*sin(winkel)+Py;
    10b6:	a3 01       	movw	r20, r6
    10b8:	92 01       	movw	r18, r4
    10ba:	0e 94 56 2a 	call	0x54ac	; 0x54ac <__mulsf3>
    10be:	20 e0       	ldi	r18, 0x00	; 0
    10c0:	30 e0       	ldi	r19, 0x00	; 0
    10c2:	48 ef       	ldi	r20, 0xF8	; 248
    10c4:	51 e4       	ldi	r21, 0x41	; 65
    10c6:	0e 94 90 27 	call	0x4f20	; 0x4f20 <__addsf3>
    10ca:	0e 94 ca 28 	call	0x5194	; 0x5194 <__fixunssfsi>
    10ce:	36 2e       	mov	r3, r22

		r=21;
		//Berechnen des Minutenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(minute*6.0)*M_PI/180.0-M_PI/2.0;
			x=(uint8_t) i*cos(winkel)+Px;
    10d0:	a5 01       	movw	r20, r10
    10d2:	94 01       	movw	r18, r8
    10d4:	c7 01       	movw	r24, r14
    10d6:	b6 01       	movw	r22, r12
    10d8:	0e 94 56 2a 	call	0x54ac	; 0x54ac <__mulsf3>
    10dc:	20 e0       	ldi	r18, 0x00	; 0
    10de:	30 e0       	ldi	r19, 0x00	; 0
    10e0:	48 ef       	ldi	r20, 0xF8	; 248
    10e2:	51 e4       	ldi	r21, 0x41	; 65
    10e4:	0e 94 90 27 	call	0x4f20	; 0x4f20 <__addsf3>
    10e8:	0e 94 ca 28 	call	0x5194	; 0x5194 <__fixunssfsi>
			y=(uint8_t) i*sin(winkel)+Py;

			drawPixel(x,y,0);
    10ec:	20 e0       	ldi	r18, 0x00	; 0
    10ee:	43 2d       	mov	r20, r3
    10f0:	8e 81       	ldd	r24, Y+6	; 0x06
    10f2:	9f 81       	ldd	r25, Y+7	; 0x07
    10f4:	51 dc       	rcall	.-1886   	; 0x998 <_ZN7Display9drawPixelEhhh>
    10f6:	0f 5f       	subi	r16, 0xFF	; 255
    10f8:	1f 4f       	sbci	r17, 0xFF	; 255
			drawPixel(x,y,0);
		}

		r=21;
		//Berechnen des Minutenzeigers
		for(uint8_t i=0;i<r;i++){
    10fa:	05 31       	cpi	r16, 0x15	; 21
    10fc:	11 05       	cpc	r17, r1
    10fe:	91 f6       	brne	.-92     	; 0x10a4 <_ZN7Display6analogEhhhh+0x156>
		}

		r=13;
		//Berechnen des Stundenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(stunde*30.0+minute/2.0)*M_PI/180.0-M_PI/2.0;
    1100:	2d 81       	ldd	r18, Y+5	; 0x05
    1102:	62 2f       	mov	r22, r18
    1104:	70 e0       	ldi	r23, 0x00	; 0
    1106:	80 e0       	ldi	r24, 0x00	; 0
    1108:	90 e0       	ldi	r25, 0x00	; 0
    110a:	0e 94 f8 28 	call	0x51f0	; 0x51f0 <__floatsisf>
    110e:	20 e0       	ldi	r18, 0x00	; 0
    1110:	30 e0       	ldi	r19, 0x00	; 0
    1112:	40 ef       	ldi	r20, 0xF0	; 240
    1114:	51 e4       	ldi	r21, 0x41	; 65
    1116:	0e 94 56 2a 	call	0x54ac	; 0x54ac <__mulsf3>
    111a:	6b 01       	movw	r12, r22
    111c:	7c 01       	movw	r14, r24
    111e:	20 e0       	ldi	r18, 0x00	; 0
    1120:	30 e0       	ldi	r19, 0x00	; 0
    1122:	40 e0       	ldi	r20, 0x00	; 0
    1124:	5f e3       	ldi	r21, 0x3F	; 63
    1126:	69 81       	ldd	r22, Y+1	; 0x01
    1128:	7a 81       	ldd	r23, Y+2	; 0x02
    112a:	8b 81       	ldd	r24, Y+3	; 0x03
    112c:	9c 81       	ldd	r25, Y+4	; 0x04
    112e:	0e 94 56 2a 	call	0x54ac	; 0x54ac <__mulsf3>
    1132:	9b 01       	movw	r18, r22
    1134:	ac 01       	movw	r20, r24
    1136:	c7 01       	movw	r24, r14
    1138:	b6 01       	movw	r22, r12
    113a:	0e 94 90 27 	call	0x4f20	; 0x4f20 <__addsf3>
    113e:	2b ed       	ldi	r18, 0xDB	; 219
    1140:	3f e0       	ldi	r19, 0x0F	; 15
    1142:	49 e4       	ldi	r20, 0x49	; 73
    1144:	50 e4       	ldi	r21, 0x40	; 64
    1146:	0e 94 56 2a 	call	0x54ac	; 0x54ac <__mulsf3>
    114a:	20 e0       	ldi	r18, 0x00	; 0
    114c:	30 e0       	ldi	r19, 0x00	; 0
    114e:	44 e3       	ldi	r20, 0x34	; 52
    1150:	53 e4       	ldi	r21, 0x43	; 67
    1152:	0e 94 5d 28 	call	0x50ba	; 0x50ba <__divsf3>
    1156:	2b ed       	ldi	r18, 0xDB	; 219
    1158:	3f e0       	ldi	r19, 0x0F	; 15
    115a:	49 ec       	ldi	r20, 0xC9	; 201
    115c:	5f e3       	ldi	r21, 0x3F	; 63
    115e:	0e 94 8f 27 	call	0x4f1e	; 0x4f1e <__subsf3>
    1162:	6b 01       	movw	r12, r22
    1164:	7c 01       	movw	r14, r24
			x= (uint8_t) i*cos(winkel) +Px;
    1166:	0e 94 5a 28 	call	0x50b4	; 0x50b4 <cos>
    116a:	2b 01       	movw	r4, r22
    116c:	3c 01       	movw	r6, r24
			y= (uint8_t) i*sin(winkel) +Py;
    116e:	c7 01       	movw	r24, r14
    1170:	b6 01       	movw	r22, r12
    1172:	0e 94 b9 2a 	call	0x5572	; 0x5572 <sin>
    1176:	4b 01       	movw	r8, r22
    1178:	5c 01       	movw	r10, r24
    117a:	00 e0       	ldi	r16, 0x00	; 0
    117c:	10 e0       	ldi	r17, 0x00	; 0

		r=13;
		//Berechnen des Stundenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(stunde*30.0+minute/2.0)*M_PI/180.0-M_PI/2.0;
			x= (uint8_t) i*cos(winkel) +Px;
    117e:	b8 01       	movw	r22, r16
    1180:	88 27       	eor	r24, r24
    1182:	77 fd       	sbrc	r23, 7
    1184:	80 95       	com	r24
    1186:	98 2f       	mov	r25, r24
    1188:	0e 94 f8 28 	call	0x51f0	; 0x51f0 <__floatsisf>
    118c:	6b 01       	movw	r12, r22
    118e:	7c 01       	movw	r14, r24
			y= (uint8_t) i*sin(winkel) +Py;
    1190:	a5 01       	movw	r20, r10
    1192:	94 01       	movw	r18, r8
    1194:	0e 94 56 2a 	call	0x54ac	; 0x54ac <__mulsf3>
    1198:	20 e0       	ldi	r18, 0x00	; 0
    119a:	30 e0       	ldi	r19, 0x00	; 0
    119c:	48 ef       	ldi	r20, 0xF8	; 248
    119e:	51 e4       	ldi	r21, 0x41	; 65
    11a0:	0e 94 90 27 	call	0x4f20	; 0x4f20 <__addsf3>
    11a4:	0e 94 ca 28 	call	0x5194	; 0x5194 <__fixunssfsi>
    11a8:	36 2e       	mov	r3, r22

		r=13;
		//Berechnen des Stundenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(stunde*30.0+minute/2.0)*M_PI/180.0-M_PI/2.0;
			x= (uint8_t) i*cos(winkel) +Px;
    11aa:	a3 01       	movw	r20, r6
    11ac:	92 01       	movw	r18, r4
    11ae:	c7 01       	movw	r24, r14
    11b0:	b6 01       	movw	r22, r12
    11b2:	0e 94 56 2a 	call	0x54ac	; 0x54ac <__mulsf3>
    11b6:	20 e0       	ldi	r18, 0x00	; 0
    11b8:	30 e0       	ldi	r19, 0x00	; 0
    11ba:	48 ef       	ldi	r20, 0xF8	; 248
    11bc:	51 e4       	ldi	r21, 0x41	; 65
    11be:	0e 94 90 27 	call	0x4f20	; 0x4f20 <__addsf3>
    11c2:	0e 94 ca 28 	call	0x5194	; 0x5194 <__fixunssfsi>
			y= (uint8_t) i*sin(winkel) +Py;

			drawPixel(x,y,0);
    11c6:	20 e0       	ldi	r18, 0x00	; 0
    11c8:	43 2d       	mov	r20, r3
    11ca:	8e 81       	ldd	r24, Y+6	; 0x06
    11cc:	9f 81       	ldd	r25, Y+7	; 0x07
    11ce:	e4 db       	rcall	.-2104   	; 0x998 <_ZN7Display9drawPixelEhhh>
    11d0:	0f 5f       	subi	r16, 0xFF	; 255
    11d2:	1f 4f       	sbci	r17, 0xFF	; 255
			drawPixel(x,y,0);
		}

		r=13;
		//Berechnen des Stundenzeigers
		for(uint8_t i=0;i<r;i++){
    11d4:	0d 30       	cpi	r16, 0x0D	; 13
    11d6:	11 05       	cpc	r17, r1
    11d8:	91 f6       	brne	.-92     	; 0x117e <_ZN7Display6analogEhhhh+0x230>
    11da:	cb c0       	rjmp	.+406    	; 0x1372 <_ZN7Display6analogEhhhh+0x424>
	}
	else{
		r=25;
		//Berechnen des Minutenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(minute*6.0)*M_PI/180.0-M_PI/2.0;
    11dc:	64 2f       	mov	r22, r20
    11de:	70 e0       	ldi	r23, 0x00	; 0
    11e0:	80 e0       	ldi	r24, 0x00	; 0
    11e2:	90 e0       	ldi	r25, 0x00	; 0
    11e4:	0e 94 f8 28 	call	0x51f0	; 0x51f0 <__floatsisf>
    11e8:	69 83       	std	Y+1, r22	; 0x01
    11ea:	7a 83       	std	Y+2, r23	; 0x02
    11ec:	8b 83       	std	Y+3, r24	; 0x03
    11ee:	9c 83       	std	Y+4, r25	; 0x04
    11f0:	20 e0       	ldi	r18, 0x00	; 0
    11f2:	30 e0       	ldi	r19, 0x00	; 0
    11f4:	40 ec       	ldi	r20, 0xC0	; 192
    11f6:	50 e4       	ldi	r21, 0x40	; 64
    11f8:	0e 94 56 2a 	call	0x54ac	; 0x54ac <__mulsf3>
    11fc:	2b ed       	ldi	r18, 0xDB	; 219
    11fe:	3f e0       	ldi	r19, 0x0F	; 15
    1200:	49 e4       	ldi	r20, 0x49	; 73
    1202:	50 e4       	ldi	r21, 0x40	; 64
    1204:	0e 94 56 2a 	call	0x54ac	; 0x54ac <__mulsf3>
    1208:	20 e0       	ldi	r18, 0x00	; 0
    120a:	30 e0       	ldi	r19, 0x00	; 0
    120c:	44 e3       	ldi	r20, 0x34	; 52
    120e:	53 e4       	ldi	r21, 0x43	; 67
    1210:	0e 94 5d 28 	call	0x50ba	; 0x50ba <__divsf3>
    1214:	2b ed       	ldi	r18, 0xDB	; 219
    1216:	3f e0       	ldi	r19, 0x0F	; 15
    1218:	49 ec       	ldi	r20, 0xC9	; 201
    121a:	5f e3       	ldi	r21, 0x3F	; 63
    121c:	0e 94 8f 27 	call	0x4f1e	; 0x4f1e <__subsf3>
    1220:	6b 01       	movw	r12, r22
    1222:	7c 01       	movw	r14, r24
			x=(uint8_t) i*cos(winkel)+Px;
    1224:	0e 94 5a 28 	call	0x50b4	; 0x50b4 <cos>
    1228:	4b 01       	movw	r8, r22
    122a:	5c 01       	movw	r10, r24
			y=(uint8_t) i*sin(winkel)+Py;
    122c:	c7 01       	movw	r24, r14
    122e:	b6 01       	movw	r22, r12
    1230:	0e 94 b9 2a 	call	0x5572	; 0x5572 <sin>
    1234:	2b 01       	movw	r4, r22
    1236:	3c 01       	movw	r6, r24
    1238:	00 e0       	ldi	r16, 0x00	; 0
    123a:	10 e0       	ldi	r17, 0x00	; 0
	else{
		r=25;
		//Berechnen des Minutenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(minute*6.0)*M_PI/180.0-M_PI/2.0;
			x=(uint8_t) i*cos(winkel)+Px;
    123c:	b8 01       	movw	r22, r16
    123e:	88 27       	eor	r24, r24
    1240:	77 fd       	sbrc	r23, 7
    1242:	80 95       	com	r24
    1244:	98 2f       	mov	r25, r24
    1246:	0e 94 f8 28 	call	0x51f0	; 0x51f0 <__floatsisf>
    124a:	6b 01       	movw	r12, r22
    124c:	7c 01       	movw	r14, r24
			y=(uint8_t) i*sin(winkel)+Py;
    124e:	a3 01       	movw	r20, r6
    1250:	92 01       	movw	r18, r4
    1252:	0e 94 56 2a 	call	0x54ac	; 0x54ac <__mulsf3>
    1256:	20 e0       	ldi	r18, 0x00	; 0
    1258:	30 e0       	ldi	r19, 0x00	; 0
    125a:	48 ef       	ldi	r20, 0xF8	; 248
    125c:	51 e4       	ldi	r21, 0x41	; 65
    125e:	0e 94 90 27 	call	0x4f20	; 0x4f20 <__addsf3>
    1262:	0e 94 ca 28 	call	0x5194	; 0x5194 <__fixunssfsi>
    1266:	36 2e       	mov	r3, r22
	else{
		r=25;
		//Berechnen des Minutenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(minute*6.0)*M_PI/180.0-M_PI/2.0;
			x=(uint8_t) i*cos(winkel)+Px;
    1268:	a5 01       	movw	r20, r10
    126a:	94 01       	movw	r18, r8
    126c:	c7 01       	movw	r24, r14
    126e:	b6 01       	movw	r22, r12
    1270:	0e 94 56 2a 	call	0x54ac	; 0x54ac <__mulsf3>
    1274:	20 e0       	ldi	r18, 0x00	; 0
    1276:	30 e0       	ldi	r19, 0x00	; 0
    1278:	48 ef       	ldi	r20, 0xF8	; 248
    127a:	51 e4       	ldi	r21, 0x41	; 65
    127c:	0e 94 90 27 	call	0x4f20	; 0x4f20 <__addsf3>
    1280:	0e 94 ca 28 	call	0x5194	; 0x5194 <__fixunssfsi>
			y=(uint8_t) i*sin(winkel)+Py;

			drawPixel(x,y,0);
    1284:	20 e0       	ldi	r18, 0x00	; 0
    1286:	43 2d       	mov	r20, r3
    1288:	8e 81       	ldd	r24, Y+6	; 0x06
    128a:	9f 81       	ldd	r25, Y+7	; 0x07
    128c:	85 db       	rcall	.-2294   	; 0x998 <_ZN7Display9drawPixelEhhh>
    128e:	0f 5f       	subi	r16, 0xFF	; 255
    1290:	1f 4f       	sbci	r17, 0xFF	; 255
		}
	}
	else{
		r=25;
		//Berechnen des Minutenzeigers
		for(uint8_t i=0;i<r;i++){
    1292:	09 31       	cpi	r16, 0x19	; 25
    1294:	11 05       	cpc	r17, r1
    1296:	91 f6       	brne	.-92     	; 0x123c <_ZN7Display6analogEhhhh+0x2ee>
		}

		r=17;
		//Berechnen des Stundenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(stunde*30.0+minute/2.0)*M_PI/180.0-M_PI/2.0;
    1298:	ed 81       	ldd	r30, Y+5	; 0x05
    129a:	6e 2f       	mov	r22, r30
    129c:	70 e0       	ldi	r23, 0x00	; 0
    129e:	80 e0       	ldi	r24, 0x00	; 0
    12a0:	90 e0       	ldi	r25, 0x00	; 0
    12a2:	0e 94 f8 28 	call	0x51f0	; 0x51f0 <__floatsisf>
    12a6:	20 e0       	ldi	r18, 0x00	; 0
    12a8:	30 e0       	ldi	r19, 0x00	; 0
    12aa:	40 ef       	ldi	r20, 0xF0	; 240
    12ac:	51 e4       	ldi	r21, 0x41	; 65
    12ae:	0e 94 56 2a 	call	0x54ac	; 0x54ac <__mulsf3>
    12b2:	6b 01       	movw	r12, r22
    12b4:	7c 01       	movw	r14, r24
    12b6:	20 e0       	ldi	r18, 0x00	; 0
    12b8:	30 e0       	ldi	r19, 0x00	; 0
    12ba:	40 e0       	ldi	r20, 0x00	; 0
    12bc:	5f e3       	ldi	r21, 0x3F	; 63
    12be:	69 81       	ldd	r22, Y+1	; 0x01
    12c0:	7a 81       	ldd	r23, Y+2	; 0x02
    12c2:	8b 81       	ldd	r24, Y+3	; 0x03
    12c4:	9c 81       	ldd	r25, Y+4	; 0x04
    12c6:	0e 94 56 2a 	call	0x54ac	; 0x54ac <__mulsf3>
    12ca:	9b 01       	movw	r18, r22
    12cc:	ac 01       	movw	r20, r24
    12ce:	c7 01       	movw	r24, r14
    12d0:	b6 01       	movw	r22, r12
    12d2:	0e 94 90 27 	call	0x4f20	; 0x4f20 <__addsf3>
    12d6:	2b ed       	ldi	r18, 0xDB	; 219
    12d8:	3f e0       	ldi	r19, 0x0F	; 15
    12da:	49 e4       	ldi	r20, 0x49	; 73
    12dc:	50 e4       	ldi	r21, 0x40	; 64
    12de:	0e 94 56 2a 	call	0x54ac	; 0x54ac <__mulsf3>
    12e2:	20 e0       	ldi	r18, 0x00	; 0
    12e4:	30 e0       	ldi	r19, 0x00	; 0
    12e6:	44 e3       	ldi	r20, 0x34	; 52
    12e8:	53 e4       	ldi	r21, 0x43	; 67
    12ea:	0e 94 5d 28 	call	0x50ba	; 0x50ba <__divsf3>
    12ee:	2b ed       	ldi	r18, 0xDB	; 219
    12f0:	3f e0       	ldi	r19, 0x0F	; 15
    12f2:	49 ec       	ldi	r20, 0xC9	; 201
    12f4:	5f e3       	ldi	r21, 0x3F	; 63
    12f6:	0e 94 8f 27 	call	0x4f1e	; 0x4f1e <__subsf3>
    12fa:	6b 01       	movw	r12, r22
    12fc:	7c 01       	movw	r14, r24
			x= (uint8_t) i*cos(winkel) +Px;
    12fe:	0e 94 5a 28 	call	0x50b4	; 0x50b4 <cos>
    1302:	2b 01       	movw	r4, r22
    1304:	3c 01       	movw	r6, r24
			y= (uint8_t) i*sin(winkel) +Py;
    1306:	c7 01       	movw	r24, r14
    1308:	b6 01       	movw	r22, r12
    130a:	0e 94 b9 2a 	call	0x5572	; 0x5572 <sin>
    130e:	4b 01       	movw	r8, r22
    1310:	5c 01       	movw	r10, r24
    1312:	00 e0       	ldi	r16, 0x00	; 0
    1314:	10 e0       	ldi	r17, 0x00	; 0

		r=17;
		//Berechnen des Stundenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(stunde*30.0+minute/2.0)*M_PI/180.0-M_PI/2.0;
			x= (uint8_t) i*cos(winkel) +Px;
    1316:	b8 01       	movw	r22, r16
    1318:	88 27       	eor	r24, r24
    131a:	77 fd       	sbrc	r23, 7
    131c:	80 95       	com	r24
    131e:	98 2f       	mov	r25, r24
    1320:	0e 94 f8 28 	call	0x51f0	; 0x51f0 <__floatsisf>
    1324:	6b 01       	movw	r12, r22
    1326:	7c 01       	movw	r14, r24
			y= (uint8_t) i*sin(winkel) +Py;
    1328:	a5 01       	movw	r20, r10
    132a:	94 01       	movw	r18, r8
    132c:	0e 94 56 2a 	call	0x54ac	; 0x54ac <__mulsf3>
    1330:	20 e0       	ldi	r18, 0x00	; 0
    1332:	30 e0       	ldi	r19, 0x00	; 0
    1334:	48 ef       	ldi	r20, 0xF8	; 248
    1336:	51 e4       	ldi	r21, 0x41	; 65
    1338:	0e 94 90 27 	call	0x4f20	; 0x4f20 <__addsf3>
    133c:	0e 94 ca 28 	call	0x5194	; 0x5194 <__fixunssfsi>
    1340:	36 2e       	mov	r3, r22

		r=17;
		//Berechnen des Stundenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(stunde*30.0+minute/2.0)*M_PI/180.0-M_PI/2.0;
			x= (uint8_t) i*cos(winkel) +Px;
    1342:	a3 01       	movw	r20, r6
    1344:	92 01       	movw	r18, r4
    1346:	c7 01       	movw	r24, r14
    1348:	b6 01       	movw	r22, r12
    134a:	0e 94 56 2a 	call	0x54ac	; 0x54ac <__mulsf3>
    134e:	20 e0       	ldi	r18, 0x00	; 0
    1350:	30 e0       	ldi	r19, 0x00	; 0
    1352:	48 ef       	ldi	r20, 0xF8	; 248
    1354:	51 e4       	ldi	r21, 0x41	; 65
    1356:	0e 94 90 27 	call	0x4f20	; 0x4f20 <__addsf3>
    135a:	0e 94 ca 28 	call	0x5194	; 0x5194 <__fixunssfsi>
			y= (uint8_t) i*sin(winkel) +Py;

			drawPixel(x,y,0);
    135e:	20 e0       	ldi	r18, 0x00	; 0
    1360:	43 2d       	mov	r20, r3
    1362:	8e 81       	ldd	r24, Y+6	; 0x06
    1364:	9f 81       	ldd	r25, Y+7	; 0x07
    1366:	18 db       	rcall	.-2512   	; 0x998 <_ZN7Display9drawPixelEhhh>
    1368:	0f 5f       	subi	r16, 0xFF	; 255
    136a:	1f 4f       	sbci	r17, 0xFF	; 255
			drawPixel(x,y,0);
		}

		r=17;
		//Berechnen des Stundenzeigers
		for(uint8_t i=0;i<r;i++){
    136c:	01 31       	cpi	r16, 0x11	; 17
    136e:	11 05       	cpc	r17, r1
    1370:	91 f6       	brne	.-92     	; 0x1316 <_ZN7Display6analogEhhhh+0x3c8>
		}
	}
	

	//Anzeige der Zahlen
	draw_ASCI('1',32-charsize,0);
    1372:	20 e0       	ldi	r18, 0x00	; 0
    1374:	4a e1       	ldi	r20, 0x1A	; 26
    1376:	61 e3       	ldi	r22, 0x31	; 49
    1378:	8e 81       	ldd	r24, Y+6	; 0x06
    137a:	9f 81       	ldd	r25, Y+7	; 0x07
    137c:	09 dd       	rcall	.-1518   	; 0xd90 <_ZN7Display9draw_ASCIEhhh>
	draw_ASCI('2',32,0);
    137e:	20 e0       	ldi	r18, 0x00	; 0
    1380:	40 e2       	ldi	r20, 0x20	; 32
    1382:	62 e3       	ldi	r22, 0x32	; 50
    1384:	8e 81       	ldd	r24, Y+6	; 0x06
    1386:	9f 81       	ldd	r25, Y+7	; 0x07
    1388:	03 dd       	rcall	.-1530   	; 0xd90 <_ZN7Display9draw_ASCIEhhh>
	draw_ASCI('3',64-charsize,4*charhighte-charhighte/2);
    138a:	2c e1       	ldi	r18, 0x1C	; 28
    138c:	4a e3       	ldi	r20, 0x3A	; 58
    138e:	63 e3       	ldi	r22, 0x33	; 51
    1390:	8e 81       	ldd	r24, Y+6	; 0x06
    1392:	9f 81       	ldd	r25, Y+7	; 0x07
    1394:	fd dc       	rcall	.-1542   	; 0xd90 <_ZN7Display9draw_ASCIEhhh>
	draw_ASCI('6',32-charsize/2,7*charhighte);
    1396:	28 e3       	ldi	r18, 0x38	; 56
    1398:	4d e1       	ldi	r20, 0x1D	; 29
    139a:	66 e3       	ldi	r22, 0x36	; 54
    139c:	8e 81       	ldd	r24, Y+6	; 0x06
    139e:	9f 81       	ldd	r25, Y+7	; 0x07
    13a0:	f7 dc       	rcall	.-1554   	; 0xd90 <_ZN7Display9draw_ASCIEhhh>
	draw_ASCI('9',0,4*charhighte-charhighte/2);
    13a2:	2c e1       	ldi	r18, 0x1C	; 28
    13a4:	40 e0       	ldi	r20, 0x00	; 0
    13a6:	69 e3       	ldi	r22, 0x39	; 57
    13a8:	8e 81       	ldd	r24, Y+6	; 0x06
    13aa:	9f 81       	ldd	r25, Y+7	; 0x07
    13ac:	f1 dc       	rcall	.-1566   	; 0xd90 <_ZN7Display9draw_ASCIEhhh>

	//anzeige des Rings fuer die Restlichen Stunden Zahlen
	//1
	drawPixel(26*cos((30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
    13ae:	20 e0       	ldi	r18, 0x00	; 0
    13b0:	48 e0       	ldi	r20, 0x08	; 8
    13b2:	6c e2       	ldi	r22, 0x2C	; 44
    13b4:	8e 81       	ldd	r24, Y+6	; 0x06
    13b6:	9f 81       	ldd	r25, Y+7	; 0x07
    13b8:	ef da       	rcall	.-2594   	; 0x998 <_ZN7Display9drawPixelEhhh>
	//2
	drawPixel(26*cos((2*30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((2*30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
    13ba:	20 e0       	ldi	r18, 0x00	; 0
    13bc:	42 e1       	ldi	r20, 0x12	; 18
    13be:	65 e3       	ldi	r22, 0x35	; 53
    13c0:	8e 81       	ldd	r24, Y+6	; 0x06
    13c2:	9f 81       	ldd	r25, Y+7	; 0x07
    13c4:	e9 da       	rcall	.-2606   	; 0x998 <_ZN7Display9drawPixelEhhh>
	//4
	drawPixel(26*cos((4*30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((4*30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
    13c6:	20 e0       	ldi	r18, 0x00	; 0
    13c8:	4c e2       	ldi	r20, 0x2C	; 44
    13ca:	65 e3       	ldi	r22, 0x35	; 53
    13cc:	8e 81       	ldd	r24, Y+6	; 0x06
    13ce:	9f 81       	ldd	r25, Y+7	; 0x07
    13d0:	e3 da       	rcall	.-2618   	; 0x998 <_ZN7Display9drawPixelEhhh>
	//5
	drawPixel(26*cos((5*30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((5*30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
    13d2:	20 e0       	ldi	r18, 0x00	; 0
    13d4:	45 e3       	ldi	r20, 0x35	; 53
    13d6:	6b e2       	ldi	r22, 0x2B	; 43
    13d8:	8e 81       	ldd	r24, Y+6	; 0x06
    13da:	9f 81       	ldd	r25, Y+7	; 0x07
    13dc:	dd da       	rcall	.-2630   	; 0x998 <_ZN7Display9drawPixelEhhh>
	//7
	drawPixel(26*cos((7*30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((7*30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
    13de:	20 e0       	ldi	r18, 0x00	; 0
    13e0:	45 e3       	ldi	r20, 0x35	; 53
    13e2:	61 e1       	ldi	r22, 0x11	; 17
    13e4:	8e 81       	ldd	r24, Y+6	; 0x06
    13e6:	9f 81       	ldd	r25, Y+7	; 0x07
    13e8:	d7 da       	rcall	.-2642   	; 0x998 <_ZN7Display9drawPixelEhhh>
	//8
	drawPixel(26*cos((8*30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((8*30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
    13ea:	20 e0       	ldi	r18, 0x00	; 0
    13ec:	4c e2       	ldi	r20, 0x2C	; 44
    13ee:	68 e0       	ldi	r22, 0x08	; 8
    13f0:	8e 81       	ldd	r24, Y+6	; 0x06
    13f2:	9f 81       	ldd	r25, Y+7	; 0x07
    13f4:	d1 da       	rcall	.-2654   	; 0x998 <_ZN7Display9drawPixelEhhh>
	//10
	drawPixel(26*cos((10*30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((10*30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
    13f6:	20 e0       	ldi	r18, 0x00	; 0
    13f8:	41 e1       	ldi	r20, 0x11	; 17
    13fa:	68 e0       	ldi	r22, 0x08	; 8
    13fc:	8e 81       	ldd	r24, Y+6	; 0x06
    13fe:	9f 81       	ldd	r25, Y+7	; 0x07
    1400:	cb da       	rcall	.-2666   	; 0x998 <_ZN7Display9drawPixelEhhh>
	//11
	drawPixel(26*cos((11*30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((11*30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
    1402:	20 e0       	ldi	r18, 0x00	; 0
    1404:	48 e0       	ldi	r20, 0x08	; 8
    1406:	62 e1       	ldi	r22, 0x12	; 18
    1408:	8e 81       	ldd	r24, Y+6	; 0x06
    140a:	9f 81       	ldd	r25, Y+7	; 0x07
    140c:	c5 da       	rcall	.-2678   	; 0x998 <_ZN7Display9drawPixelEhhh>
}
    140e:	27 96       	adiw	r28, 0x07	; 7
    1410:	0f b6       	in	r0, 0x3f	; 63
    1412:	f8 94       	cli
    1414:	de bf       	out	0x3e, r29	; 62
    1416:	0f be       	out	0x3f, r0	; 63
    1418:	cd bf       	out	0x3d, r28	; 61
    141a:	df 91       	pop	r29
    141c:	cf 91       	pop	r28
    141e:	1f 91       	pop	r17
    1420:	0f 91       	pop	r16
    1422:	ff 90       	pop	r15
    1424:	ef 90       	pop	r14
    1426:	df 90       	pop	r13
    1428:	cf 90       	pop	r12
    142a:	bf 90       	pop	r11
    142c:	af 90       	pop	r10
    142e:	9f 90       	pop	r9
    1430:	8f 90       	pop	r8
    1432:	7f 90       	pop	r7
    1434:	6f 90       	pop	r6
    1436:	5f 90       	pop	r5
    1438:	4f 90       	pop	r4
    143a:	3f 90       	pop	r3
    143c:	2f 90       	pop	r2
    143e:	08 95       	ret

00001440 <_Z8ADC_Readh>:
	for (uint8_t i = 0; i < nsamples; ++i ) {
		sum += ADC_Read( channel );
	}
	
	return (uint16_t)( sum / nsamples );
}
    1440:	ec e7       	ldi	r30, 0x7C	; 124
    1442:	f0 e0       	ldi	r31, 0x00	; 0
    1444:	90 81       	ld	r25, Z
    1446:	8f 71       	andi	r24, 0x1F	; 31
    1448:	90 7e       	andi	r25, 0xE0	; 224
    144a:	98 2b       	or	r25, r24
    144c:	90 83       	st	Z, r25
    144e:	ea e7       	ldi	r30, 0x7A	; 122
    1450:	f0 e0       	ldi	r31, 0x00	; 0
    1452:	80 81       	ld	r24, Z
    1454:	80 64       	ori	r24, 0x40	; 64
    1456:	80 83       	st	Z, r24
    1458:	80 81       	ld	r24, Z
    145a:	86 fd       	sbrc	r24, 6
    145c:	fd cf       	rjmp	.-6      	; 0x1458 <_Z8ADC_Readh+0x18>
    145e:	80 91 78 00 	lds	r24, 0x0078
    1462:	90 91 79 00 	lds	r25, 0x0079
    1466:	08 95       	ret

00001468 <_Z14Batteriestatusv>:

double batterie;
int8_t Batteriestatus(){
	uint16_t ADCwert=ADC_Read(0);
    1468:	80 e0       	ldi	r24, 0x00	; 0
    146a:	ea df       	rcall	.-44     	; 0x1440 <_Z8ADC_Readh>
	batterie = (ADCwert/1023.0)*3.3*SPANNUNGSTEILER;
    146c:	bc 01       	movw	r22, r24
    146e:	80 e0       	ldi	r24, 0x00	; 0
    1470:	90 e0       	ldi	r25, 0x00	; 0
    1472:	0e 94 f6 28 	call	0x51ec	; 0x51ec <__floatunsisf>
    1476:	20 e0       	ldi	r18, 0x00	; 0
    1478:	30 ec       	ldi	r19, 0xC0	; 192
    147a:	4f e7       	ldi	r20, 0x7F	; 127
    147c:	54 e4       	ldi	r21, 0x44	; 68
    147e:	0e 94 5d 28 	call	0x50ba	; 0x50ba <__divsf3>
    1482:	23 e3       	ldi	r18, 0x33	; 51
    1484:	33 e3       	ldi	r19, 0x33	; 51
    1486:	43 e5       	ldi	r20, 0x53	; 83
    1488:	50 e4       	ldi	r21, 0x40	; 64
    148a:	0e 94 56 2a 	call	0x54ac	; 0x54ac <__mulsf3>
    148e:	2d e0       	ldi	r18, 0x0D	; 13
    1490:	31 e7       	ldi	r19, 0x71	; 113
    1492:	40 e0       	ldi	r20, 0x00	; 0
    1494:	50 e4       	ldi	r21, 0x40	; 64
    1496:	0e 94 56 2a 	call	0x54ac	; 0x54ac <__mulsf3>
    149a:	60 93 2b 03 	sts	0x032B, r22
    149e:	70 93 2c 03 	sts	0x032C, r23
    14a2:	80 93 2d 03 	sts	0x032D, r24
    14a6:	90 93 2e 03 	sts	0x032E, r25
	return ((batterie-3.0)/(4.2-3.0)*100);
    14aa:	20 e0       	ldi	r18, 0x00	; 0
    14ac:	30 e0       	ldi	r19, 0x00	; 0
    14ae:	40 e4       	ldi	r20, 0x40	; 64
    14b0:	50 e4       	ldi	r21, 0x40	; 64
    14b2:	0e 94 8f 27 	call	0x4f1e	; 0x4f1e <__subsf3>
    14b6:	28 e9       	ldi	r18, 0x98	; 152
    14b8:	39 e9       	ldi	r19, 0x99	; 153
    14ba:	49 e9       	ldi	r20, 0x99	; 153
    14bc:	5f e3       	ldi	r21, 0x3F	; 63
    14be:	0e 94 5d 28 	call	0x50ba	; 0x50ba <__divsf3>
    14c2:	20 e0       	ldi	r18, 0x00	; 0
    14c4:	30 e0       	ldi	r19, 0x00	; 0
    14c6:	48 ec       	ldi	r20, 0xC8	; 200
    14c8:	52 e4       	ldi	r21, 0x42	; 66
    14ca:	0e 94 56 2a 	call	0x54ac	; 0x54ac <__mulsf3>
    14ce:	0e 94 c5 28 	call	0x518a	; 0x518a <__fixsfsi>
    14d2:	86 2f       	mov	r24, r22
}
    14d4:	08 95       	ret

000014d6 <_Z14willkommenpagev>:
#ifndef SEITEN_H_
#define SEITEN_H_

//Diese Funktionen schreiben nur in den Framebuffer und das Schreiben passiert in der Main ueber einen Interupt

void willkommenpage(){
    14d6:	cf 92       	push	r12
    14d8:	df 92       	push	r13
    14da:	ef 92       	push	r14
    14dc:	ff 92       	push	r15
    14de:	0f 93       	push	r16
    14e0:	1f 93       	push	r17
    14e2:	cf 93       	push	r28
    14e4:	df 93       	push	r29
    14e6:	cd b7       	in	r28, 0x3d	; 61
    14e8:	de b7       	in	r29, 0x3e	; 62
    14ea:	64 97       	sbiw	r28, 0x14	; 20
    14ec:	0f b6       	in	r0, 0x3f	; 63
    14ee:	f8 94       	cli
    14f0:	de bf       	out	0x3e, r29	; 62
    14f2:	0f be       	out	0x3f, r0	; 63
    14f4:	cd bf       	out	0x3d, r28	; 61
	char buffer[20];
	uint8_t buffersize;
	oled.clearFrame();
    14f6:	86 e4       	ldi	r24, 0x46	; 70
    14f8:	93 e0       	ldi	r25, 0x03	; 3
    14fa:	87 d9       	rcall	.-3314   	; 0x80a <_ZN7Display10clearFrameEv>
	buffersize=sprintf(buffer,"Fahradcomputer");
    14fc:	8f e0       	ldi	r24, 0x0F	; 15
    14fe:	e0 e0       	ldi	r30, 0x00	; 0
    1500:	f1 e0       	ldi	r31, 0x01	; 1
    1502:	8e 01       	movw	r16, r28
    1504:	0f 5f       	subi	r16, 0xFF	; 255
    1506:	1f 4f       	sbci	r17, 0xFF	; 255
    1508:	d8 01       	movw	r26, r16
    150a:	01 90       	ld	r0, Z+
    150c:	0d 92       	st	X+, r0
    150e:	8a 95       	dec	r24
    1510:	e1 f7       	brne	.-8      	; 0x150a <_Z14willkommenpagev+0x34>
    1512:	c0 2e       	mov	r12, r16
    1514:	d1 2e       	mov	r13, r17
    1516:	78 01       	movw	r14, r16
    1518:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0; i < buffersize;i++){
		oled.draw_ASCI(buffer[i],i*charsize,0);
    151a:	f7 01       	movw	r30, r14
    151c:	61 91       	ld	r22, Z+
    151e:	7f 01       	movw	r14, r30
    1520:	20 e0       	ldi	r18, 0x00	; 0
    1522:	41 2f       	mov	r20, r17
    1524:	86 e4       	ldi	r24, 0x46	; 70
    1526:	93 e0       	ldi	r25, 0x03	; 3
    1528:	33 dc       	rcall	.-1946   	; 0xd90 <_ZN7Display9draw_ASCIEhhh>
    152a:	1a 5f       	subi	r17, 0xFA	; 250
void willkommenpage(){
	char buffer[20];
	uint8_t buffersize;
	oled.clearFrame();
	buffersize=sprintf(buffer,"Fahradcomputer");
	for(uint8_t i=0; i < buffersize;i++){
    152c:	14 35       	cpi	r17, 0x54	; 84
    152e:	a9 f7       	brne	.-22     	; 0x151a <_Z14willkommenpagev+0x44>
		oled.draw_ASCI(buffer[i],i*charsize,0);
	}
	buffersize=sprintf(buffer,"--------------");
    1530:	8f e0       	ldi	r24, 0x0F	; 15
    1532:	ef e0       	ldi	r30, 0x0F	; 15
    1534:	f1 e0       	ldi	r31, 0x01	; 1
    1536:	de 01       	movw	r26, r28
    1538:	11 96       	adiw	r26, 0x01	; 1
    153a:	01 90       	ld	r0, Z+
    153c:	0d 92       	st	X+, r0
    153e:	8a 95       	dec	r24
    1540:	e1 f7       	brne	.-8      	; 0x153a <_Z14willkommenpagev+0x64>
    1542:	ec 2c       	mov	r14, r12
    1544:	fd 2c       	mov	r15, r13
    1546:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0; i < buffersize;i++){
		oled.draw_ASCI(buffer[i],i*charsize,8);
    1548:	f7 01       	movw	r30, r14
    154a:	61 91       	ld	r22, Z+
    154c:	7f 01       	movw	r14, r30
    154e:	28 e0       	ldi	r18, 0x08	; 8
    1550:	41 2f       	mov	r20, r17
    1552:	86 e4       	ldi	r24, 0x46	; 70
    1554:	93 e0       	ldi	r25, 0x03	; 3
    1556:	1c dc       	rcall	.-1992   	; 0xd90 <_ZN7Display9draw_ASCIEhhh>
    1558:	1a 5f       	subi	r17, 0xFA	; 250
	buffersize=sprintf(buffer,"Fahradcomputer");
	for(uint8_t i=0; i < buffersize;i++){
		oled.draw_ASCI(buffer[i],i*charsize,0);
	}
	buffersize=sprintf(buffer,"--------------");
	for(uint8_t i=0; i < buffersize;i++){
    155a:	14 35       	cpi	r17, 0x54	; 84
    155c:	a9 f7       	brne	.-22     	; 0x1548 <_Z14willkommenpagev+0x72>
		oled.draw_ASCI(buffer[i],i*charsize,8);
	}
	buffersize=sprintf(buffer,"Version: %.2f",(double)VERSIONSNUMMER);
    155e:	80 e4       	ldi	r24, 0x40	; 64
    1560:	8f 93       	push	r24
    1562:	1f 92       	push	r1
    1564:	1f 92       	push	r1
    1566:	1f 92       	push	r1
    1568:	8e e1       	ldi	r24, 0x1E	; 30
    156a:	91 e0       	ldi	r25, 0x01	; 1
    156c:	9f 93       	push	r25
    156e:	8f 93       	push	r24
    1570:	ce 01       	movw	r24, r28
    1572:	01 96       	adiw	r24, 0x01	; 1
    1574:	9f 93       	push	r25
    1576:	8f 93       	push	r24
    1578:	0e 94 b2 2f 	call	0x5f64	; 0x5f64 <sprintf>
	for(uint8_t i=0; i < buffersize;i++){
    157c:	0f b6       	in	r0, 0x3f	; 63
    157e:	f8 94       	cli
    1580:	de bf       	out	0x3e, r29	; 62
    1582:	0f be       	out	0x3f, r0	; 63
    1584:	cd bf       	out	0x3d, r28	; 61
    1586:	88 23       	and	r24, r24
    1588:	c9 f0       	breq	.+50     	; 0x15bc <_Z14willkommenpagev+0xe6>
    158a:	81 50       	subi	r24, 0x01	; 1
    158c:	68 94       	set
    158e:	ee 24       	eor	r14, r14
    1590:	e1 f8       	bld	r14, 1
    1592:	f1 2c       	mov	r15, r1
    1594:	ec 0e       	add	r14, r28
    1596:	fd 1e       	adc	r15, r29
    1598:	e8 0e       	add	r14, r24
    159a:	f1 1c       	adc	r15, r1
    159c:	0c 2d       	mov	r16, r12
    159e:	1d 2d       	mov	r17, r13
    15a0:	d1 2c       	mov	r13, r1
		oled.draw_ASCI(buffer[i],i*charsize,32);
    15a2:	f8 01       	movw	r30, r16
    15a4:	61 91       	ld	r22, Z+
    15a6:	8f 01       	movw	r16, r30
    15a8:	20 e2       	ldi	r18, 0x20	; 32
    15aa:	4d 2d       	mov	r20, r13
    15ac:	86 e4       	ldi	r24, 0x46	; 70
    15ae:	93 e0       	ldi	r25, 0x03	; 3
    15b0:	ef db       	rcall	.-2082   	; 0xd90 <_ZN7Display9draw_ASCIEhhh>
    15b2:	f6 e0       	ldi	r31, 0x06	; 6
    15b4:	df 0e       	add	r13, r31
	buffersize=sprintf(buffer,"--------------");
	for(uint8_t i=0; i < buffersize;i++){
		oled.draw_ASCI(buffer[i],i*charsize,8);
	}
	buffersize=sprintf(buffer,"Version: %.2f",(double)VERSIONSNUMMER);
	for(uint8_t i=0; i < buffersize;i++){
    15b6:	0e 15       	cp	r16, r14
    15b8:	1f 05       	cpc	r17, r15
    15ba:	99 f7       	brne	.-26     	; 0x15a2 <_Z14willkommenpagev+0xcc>
		oled.draw_ASCI(buffer[i],i*charsize,32);

	}
	oled.sendFrame();
    15bc:	86 e4       	ldi	r24, 0x46	; 70
    15be:	93 e0       	ldi	r25, 0x03	; 3
    15c0:	ae d9       	rcall	.-3236   	; 0x91e <_ZN7Display9sendFrameEv>
	oled.clearFrame();
    15c2:	86 e4       	ldi	r24, 0x46	; 70
    15c4:	93 e0       	ldi	r25, 0x03	; 3
    15c6:	21 d9       	rcall	.-3518   	; 0x80a <_ZN7Display10clearFrameEv>
    15c8:	85 e0       	ldi	r24, 0x05	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    15ca:	2f e7       	ldi	r18, 0x7F	; 127
    15cc:	38 e3       	ldi	r19, 0x38	; 56
    15ce:	91 e0       	ldi	r25, 0x01	; 1
    15d0:	21 50       	subi	r18, 0x01	; 1
    15d2:	30 40       	sbci	r19, 0x00	; 0
    15d4:	90 40       	sbci	r25, 0x00	; 0
    15d6:	e1 f7       	brne	.-8      	; 0x15d0 <_Z14willkommenpagev+0xfa>
    15d8:	00 c0       	rjmp	.+0      	; 0x15da <_Z14willkommenpagev+0x104>
    15da:	00 00       	nop
    15dc:	ef e7       	ldi	r30, 0x7F	; 127
    15de:	f8 e3       	ldi	r31, 0x38	; 56
    15e0:	21 e0       	ldi	r18, 0x01	; 1
    15e2:	e1 50       	subi	r30, 0x01	; 1
    15e4:	f0 40       	sbci	r31, 0x00	; 0
    15e6:	20 40       	sbci	r18, 0x00	; 0
    15e8:	e1 f7       	brne	.-8      	; 0x15e2 <_Z14willkommenpagev+0x10c>
    15ea:	00 c0       	rjmp	.+0      	; 0x15ec <_Z14willkommenpagev+0x116>
    15ec:	00 00       	nop
    15ee:	81 50       	subi	r24, 0x01	; 1
	for (uint8_t i=0;i<5;i++)
    15f0:	61 f7       	brne	.-40     	; 0x15ca <_Z14willkommenpagev+0xf4>
	{
		_delay_ms(50);
		_delay_ms(50);
	}
}
    15f2:	64 96       	adiw	r28, 0x14	; 20
    15f4:	0f b6       	in	r0, 0x3f	; 63
    15f6:	f8 94       	cli
    15f8:	de bf       	out	0x3e, r29	; 62
    15fa:	0f be       	out	0x3f, r0	; 63
    15fc:	cd bf       	out	0x3d, r28	; 61
    15fe:	df 91       	pop	r29
    1600:	cf 91       	pop	r28
    1602:	1f 91       	pop	r17
    1604:	0f 91       	pop	r16
    1606:	ff 90       	pop	r15
    1608:	ef 90       	pop	r14
    160a:	df 90       	pop	r13
    160c:	cf 90       	pop	r12
    160e:	08 95       	ret

00001610 <_Z6headerh>:

void header(uint8_t page){
    1610:	ef 92       	push	r14
    1612:	ff 92       	push	r15
    1614:	0f 93       	push	r16
    1616:	1f 93       	push	r17
    1618:	cf 93       	push	r28
    161a:	df 93       	push	r29
    161c:	cd b7       	in	r28, 0x3d	; 61
    161e:	de b7       	in	r29, 0x3e	; 62
    1620:	64 97       	sbiw	r28, 0x14	; 20
    1622:	0f b6       	in	r0, 0x3f	; 63
    1624:	f8 94       	cli
    1626:	de bf       	out	0x3e, r29	; 62
    1628:	0f be       	out	0x3f, r0	; 63
    162a:	cd bf       	out	0x3d, r28	; 61
	char buffer[20];
	uint8_t buffersize=0;;
	switch (page) {
    162c:	81 30       	cpi	r24, 0x01	; 1
    162e:	09 f4       	brne	.+2      	; 0x1632 <_Z6headerh+0x22>
    1630:	51 c0       	rjmp	.+162    	; 0x16d4 <_Z6headerh+0xc4>
    1632:	20 f0       	brcs	.+8      	; 0x163c <_Z6headerh+0x2c>
    1634:	82 30       	cpi	r24, 0x02	; 2
    1636:	09 f4       	brne	.+2      	; 0x163a <_Z6headerh+0x2a>
    1638:	87 c0       	rjmp	.+270    	; 0x1748 <_Z6headerh+0x138>
    163a:	be c0       	rjmp	.+380    	; 0x17b8 <_Z6headerh+0x1a8>
    163c:	0f 2e       	mov	r0, r31
    163e:	fd e7       	ldi	r31, 0x7D	; 125
    1640:	ef 2e       	mov	r14, r31
    1642:	f7 e0       	ldi	r31, 0x07	; 7
    1644:	ff 2e       	mov	r15, r31
    1646:	f0 2d       	mov	r31, r0
    1648:	10 e0       	ldi	r17, 0x00	; 0
		case 0:	//standard Header fuer fast alle Pages
			for(uint8_t i=0;i<8;i++){
				oled.draw_ASCI(rtc.msg_uhr[i],i*charsize,0);
    164a:	f7 01       	movw	r30, r14
    164c:	61 91       	ld	r22, Z+
    164e:	7f 01       	movw	r14, r30
    1650:	20 e0       	ldi	r18, 0x00	; 0
    1652:	41 2f       	mov	r20, r17
    1654:	86 e4       	ldi	r24, 0x46	; 70
    1656:	93 e0       	ldi	r25, 0x03	; 3
    1658:	9b db       	rcall	.-2250   	; 0xd90 <_ZN7Display9draw_ASCIEhhh>
    165a:	1a 5f       	subi	r17, 0xFA	; 250
void header(uint8_t page){
	char buffer[20];
	uint8_t buffersize=0;;
	switch (page) {
		case 0:	//standard Header fuer fast alle Pages
			for(uint8_t i=0;i<8;i++){
    165c:	10 33       	cpi	r17, 0x30	; 48
    165e:	a9 f7       	brne	.-22     	; 0x164a <_Z6headerh+0x3a>
				oled.draw_ASCI(rtc.msg_uhr[i],i*charsize,0);
			}
			buffersize=sprintf(buffer,"Bat: %i%%",Batteriestatus());
    1660:	03 df       	rcall	.-506    	; 0x1468 <_Z14Batteriestatusv>
    1662:	28 2f       	mov	r18, r24
    1664:	33 27       	eor	r19, r19
    1666:	27 fd       	sbrc	r18, 7
    1668:	30 95       	com	r19
    166a:	3f 93       	push	r19
    166c:	8f 93       	push	r24
    166e:	8c e2       	ldi	r24, 0x2C	; 44
    1670:	91 e0       	ldi	r25, 0x01	; 1
    1672:	9f 93       	push	r25
    1674:	8f 93       	push	r24
    1676:	ce 01       	movw	r24, r28
    1678:	01 96       	adiw	r24, 0x01	; 1
    167a:	9f 93       	push	r25
    167c:	8f 93       	push	r24
    167e:	0e 94 b2 2f 	call	0x5f64	; 0x5f64 <sprintf>
			for(uint8_t i=((SSD1306_WIDTH/charsize)-buffersize);i<(SSD1306_WIDTH/charsize);i++){
    1682:	25 e1       	ldi	r18, 0x15	; 21
    1684:	f2 2e       	mov	r15, r18
    1686:	f8 1a       	sub	r15, r24
    1688:	0f 90       	pop	r0
    168a:	0f 90       	pop	r0
    168c:	0f 90       	pop	r0
    168e:	0f 90       	pop	r0
    1690:	0f 90       	pop	r0
    1692:	0f 90       	pop	r0
    1694:	f4 e1       	ldi	r31, 0x14	; 20
    1696:	ff 15       	cp	r31, r15
    1698:	08 f4       	brcc	.+2      	; 0x169c <_Z6headerh+0x8c>
    169a:	8e c0       	rjmp	.+284    	; 0x17b8 <_Z6headerh+0x1a8>
    169c:	ef 2c       	mov	r14, r15
    169e:	ee 0c       	add	r14, r14
    16a0:	ef 0c       	add	r14, r15
    16a2:	ee 0c       	add	r14, r14
				oled.draw_ASCI(buffer[i-((SSD1306_WIDTH/charsize)-buffersize)],i*charsize,0);
    16a4:	8c 01       	movw	r16, r24
    16a6:	11 27       	eor	r17, r17
    16a8:	e1 e0       	ldi	r30, 0x01	; 1
    16aa:	f0 e0       	ldi	r31, 0x00	; 0
    16ac:	ec 0f       	add	r30, r28
    16ae:	fd 1f       	adc	r31, r29
    16b0:	ef 0d       	add	r30, r15
    16b2:	f1 1d       	adc	r31, r1
    16b4:	e0 0f       	add	r30, r16
    16b6:	f1 1f       	adc	r31, r17
    16b8:	75 97       	sbiw	r30, 0x15	; 21
    16ba:	20 e0       	ldi	r18, 0x00	; 0
    16bc:	4e 2d       	mov	r20, r14
    16be:	60 81       	ld	r22, Z
    16c0:	86 e4       	ldi	r24, 0x46	; 70
    16c2:	93 e0       	ldi	r25, 0x03	; 3
    16c4:	65 db       	rcall	.-2358   	; 0xd90 <_ZN7Display9draw_ASCIEhhh>
		case 0:	//standard Header fuer fast alle Pages
			for(uint8_t i=0;i<8;i++){
				oled.draw_ASCI(rtc.msg_uhr[i],i*charsize,0);
			}
			buffersize=sprintf(buffer,"Bat: %i%%",Batteriestatus());
			for(uint8_t i=((SSD1306_WIDTH/charsize)-buffersize);i<(SSD1306_WIDTH/charsize);i++){
    16c6:	f3 94       	inc	r15
    16c8:	26 e0       	ldi	r18, 0x06	; 6
    16ca:	e2 0e       	add	r14, r18
    16cc:	85 e1       	ldi	r24, 0x15	; 21
    16ce:	f8 12       	cpse	r15, r24
    16d0:	eb cf       	rjmp	.-42     	; 0x16a8 <_Z6headerh+0x98>
    16d2:	72 c0       	rjmp	.+228    	; 0x17b8 <_Z6headerh+0x1a8>
				oled.draw_ASCI(buffer[i-((SSD1306_WIDTH/charsize)-buffersize)],i*charsize,0);
			}
			break;
		case 1:
			buffersize=sprintf(buffer,"Bat: %i%%",Batteriestatus());
    16d4:	c9 de       	rcall	.-622    	; 0x1468 <_Z14Batteriestatusv>
    16d6:	28 2f       	mov	r18, r24
    16d8:	33 27       	eor	r19, r19
    16da:	27 fd       	sbrc	r18, 7
    16dc:	30 95       	com	r19
    16de:	3f 93       	push	r19
    16e0:	8f 93       	push	r24
    16e2:	8c e2       	ldi	r24, 0x2C	; 44
    16e4:	91 e0       	ldi	r25, 0x01	; 1
    16e6:	9f 93       	push	r25
    16e8:	8f 93       	push	r24
    16ea:	ce 01       	movw	r24, r28
    16ec:	01 96       	adiw	r24, 0x01	; 1
    16ee:	9f 93       	push	r25
    16f0:	8f 93       	push	r24
    16f2:	0e 94 b2 2f 	call	0x5f64	; 0x5f64 <sprintf>
			for(uint8_t i=((SSD1306_WIDTH/charsize)-buffersize);i<(SSD1306_WIDTH/charsize);i++){
    16f6:	25 e1       	ldi	r18, 0x15	; 21
    16f8:	f2 2e       	mov	r15, r18
    16fa:	f8 1a       	sub	r15, r24
    16fc:	0f 90       	pop	r0
    16fe:	0f 90       	pop	r0
    1700:	0f 90       	pop	r0
    1702:	0f 90       	pop	r0
    1704:	0f 90       	pop	r0
    1706:	0f 90       	pop	r0
    1708:	e4 e1       	ldi	r30, 0x14	; 20
    170a:	ef 15       	cp	r30, r15
    170c:	08 f4       	brcc	.+2      	; 0x1710 <_Z6headerh+0x100>
    170e:	54 c0       	rjmp	.+168    	; 0x17b8 <_Z6headerh+0x1a8>
    1710:	ef 2c       	mov	r14, r15
    1712:	ee 0c       	add	r14, r14
    1714:	ef 0c       	add	r14, r15
    1716:	ee 0c       	add	r14, r14
				oled.draw_ASCI(buffer[i-((SSD1306_WIDTH/charsize)-buffersize)],i*charsize,0);
    1718:	8c 01       	movw	r16, r24
    171a:	11 27       	eor	r17, r17
    171c:	e1 e0       	ldi	r30, 0x01	; 1
    171e:	f0 e0       	ldi	r31, 0x00	; 0
    1720:	ec 0f       	add	r30, r28
    1722:	fd 1f       	adc	r31, r29
    1724:	ef 0d       	add	r30, r15
    1726:	f1 1d       	adc	r31, r1
    1728:	e0 0f       	add	r30, r16
    172a:	f1 1f       	adc	r31, r17
    172c:	75 97       	sbiw	r30, 0x15	; 21
    172e:	20 e0       	ldi	r18, 0x00	; 0
    1730:	4e 2d       	mov	r20, r14
    1732:	60 81       	ld	r22, Z
    1734:	86 e4       	ldi	r24, 0x46	; 70
    1736:	93 e0       	ldi	r25, 0x03	; 3
    1738:	2b db       	rcall	.-2474   	; 0xd90 <_ZN7Display9draw_ASCIEhhh>
				oled.draw_ASCI(buffer[i-((SSD1306_WIDTH/charsize)-buffersize)],i*charsize,0);
			}
			break;
		case 1:
			buffersize=sprintf(buffer,"Bat: %i%%",Batteriestatus());
			for(uint8_t i=((SSD1306_WIDTH/charsize)-buffersize);i<(SSD1306_WIDTH/charsize);i++){
    173a:	f3 94       	inc	r15
    173c:	f6 e0       	ldi	r31, 0x06	; 6
    173e:	ef 0e       	add	r14, r31
    1740:	25 e1       	ldi	r18, 0x15	; 21
    1742:	f2 12       	cpse	r15, r18
    1744:	eb cf       	rjmp	.-42     	; 0x171c <_Z6headerh+0x10c>
    1746:	38 c0       	rjmp	.+112    	; 0x17b8 <_Z6headerh+0x1a8>
				oled.draw_ASCI(buffer[i-((SSD1306_WIDTH/charsize)-buffersize)],i*charsize,0);
			}
			break;
		case 2:
			buffersize=sprintf(buffer,"%i%%",Batteriestatus());
    1748:	8f de       	rcall	.-738    	; 0x1468 <_Z14Batteriestatusv>
    174a:	28 2f       	mov	r18, r24
    174c:	33 27       	eor	r19, r19
    174e:	27 fd       	sbrc	r18, 7
    1750:	30 95       	com	r19
    1752:	3f 93       	push	r19
    1754:	8f 93       	push	r24
    1756:	81 e3       	ldi	r24, 0x31	; 49
    1758:	91 e0       	ldi	r25, 0x01	; 1
    175a:	9f 93       	push	r25
    175c:	8f 93       	push	r24
    175e:	ce 01       	movw	r24, r28
    1760:	01 96       	adiw	r24, 0x01	; 1
    1762:	9f 93       	push	r25
    1764:	8f 93       	push	r24
    1766:	0e 94 b2 2f 	call	0x5f64	; 0x5f64 <sprintf>
			for(uint8_t i=((SSD1306_WIDTH/charsize)-buffersize);i<(SSD1306_WIDTH/charsize);i++){
    176a:	25 e1       	ldi	r18, 0x15	; 21
    176c:	f2 2e       	mov	r15, r18
    176e:	f8 1a       	sub	r15, r24
    1770:	0f 90       	pop	r0
    1772:	0f 90       	pop	r0
    1774:	0f 90       	pop	r0
    1776:	0f 90       	pop	r0
    1778:	0f 90       	pop	r0
    177a:	0f 90       	pop	r0
    177c:	e4 e1       	ldi	r30, 0x14	; 20
    177e:	ef 15       	cp	r30, r15
    1780:	d8 f0       	brcs	.+54     	; 0x17b8 <_Z6headerh+0x1a8>
    1782:	ef 2c       	mov	r14, r15
    1784:	ee 0c       	add	r14, r14
    1786:	ef 0c       	add	r14, r15
    1788:	ee 0c       	add	r14, r14
				oled.draw_ASCI(buffer[i-((SSD1306_WIDTH/charsize)-buffersize)],i*charsize,0);
    178a:	8c 01       	movw	r16, r24
    178c:	11 27       	eor	r17, r17
    178e:	e1 e0       	ldi	r30, 0x01	; 1
    1790:	f0 e0       	ldi	r31, 0x00	; 0
    1792:	ec 0f       	add	r30, r28
    1794:	fd 1f       	adc	r31, r29
    1796:	ef 0d       	add	r30, r15
    1798:	f1 1d       	adc	r31, r1
    179a:	e0 0f       	add	r30, r16
    179c:	f1 1f       	adc	r31, r17
    179e:	75 97       	sbiw	r30, 0x15	; 21
    17a0:	20 e0       	ldi	r18, 0x00	; 0
    17a2:	4e 2d       	mov	r20, r14
    17a4:	60 81       	ld	r22, Z
    17a6:	86 e4       	ldi	r24, 0x46	; 70
    17a8:	93 e0       	ldi	r25, 0x03	; 3
    17aa:	f2 da       	rcall	.-2588   	; 0xd90 <_ZN7Display9draw_ASCIEhhh>
				oled.draw_ASCI(buffer[i-((SSD1306_WIDTH/charsize)-buffersize)],i*charsize,0);
			}
			break;
		case 2:
			buffersize=sprintf(buffer,"%i%%",Batteriestatus());
			for(uint8_t i=((SSD1306_WIDTH/charsize)-buffersize);i<(SSD1306_WIDTH/charsize);i++){
    17ac:	f3 94       	inc	r15
    17ae:	f6 e0       	ldi	r31, 0x06	; 6
    17b0:	ef 0e       	add	r14, r31
    17b2:	25 e1       	ldi	r18, 0x15	; 21
    17b4:	f2 12       	cpse	r15, r18
    17b6:	eb cf       	rjmp	.-42     	; 0x178e <_Z6headerh+0x17e>
			}
			break;
		default:
			break;
	}
}
    17b8:	64 96       	adiw	r28, 0x14	; 20
    17ba:	0f b6       	in	r0, 0x3f	; 63
    17bc:	f8 94       	cli
    17be:	de bf       	out	0x3e, r29	; 62
    17c0:	0f be       	out	0x3f, r0	; 63
    17c2:	cd bf       	out	0x3d, r28	; 61
    17c4:	df 91       	pop	r29
    17c6:	cf 91       	pop	r28
    17c8:	1f 91       	pop	r17
    17ca:	0f 91       	pop	r16
    17cc:	ff 90       	pop	r15
    17ce:	ef 90       	pop	r14
    17d0:	08 95       	ret

000017d2 <_Z6bottomh>:

void bottom(uint8_t page){
    17d2:	1f 93       	push	r17
    17d4:	cf 93       	push	r28
    17d6:	df 93       	push	r29
	switch (page) {
    17d8:	88 23       	and	r24, r24
    17da:	19 f0       	breq	.+6      	; 0x17e2 <_Z6bottomh+0x10>
    17dc:	81 30       	cpi	r24, 0x01	; 1
    17de:	71 f0       	breq	.+28     	; 0x17fc <_Z6bottomh+0x2a>
    17e0:	19 c0       	rjmp	.+50     	; 0x1814 <_Z6bottomh+0x42>
    17e2:	c5 e8       	ldi	r28, 0x85	; 133
    17e4:	d7 e0       	ldi	r29, 0x07	; 7
    17e6:	10 e5       	ldi	r17, 0x50	; 80
		case 0:	//standard Header fuer fast alle Pages
			for(uint8_t i=0;i<8;i++){
				oled.draw_ASCI(rtc.msg_dat[i],i*charsize+(SSD1306_WIDTH-bitsderrtc*charsize),7*charhighte);
    17e8:	69 91       	ld	r22, Y+
    17ea:	28 e3       	ldi	r18, 0x38	; 56
    17ec:	41 2f       	mov	r20, r17
    17ee:	86 e4       	ldi	r24, 0x46	; 70
    17f0:	93 e0       	ldi	r25, 0x03	; 3
    17f2:	ce da       	rcall	.-2660   	; 0xd90 <_ZN7Display9draw_ASCIEhhh>
    17f4:	1a 5f       	subi	r17, 0xFA	; 250
}

void bottom(uint8_t page){
	switch (page) {
		case 0:	//standard Header fuer fast alle Pages
			for(uint8_t i=0;i<8;i++){
    17f6:	10 38       	cpi	r17, 0x80	; 128
    17f8:	b9 f7       	brne	.-18     	; 0x17e8 <_Z6bottomh+0x16>
    17fa:	0c c0       	rjmp	.+24     	; 0x1814 <_Z6bottomh+0x42>
    17fc:	c5 e8       	ldi	r28, 0x85	; 133
    17fe:	d7 e0       	ldi	r29, 0x07	; 7
			break;
	}
}

void bottom(uint8_t page){
	switch (page) {
    1800:	15 e0       	ldi	r17, 0x05	; 5
				oled.draw_ASCI(rtc.msg_dat[i],i*charsize+(SSD1306_WIDTH-bitsderrtc*charsize),7*charhighte);
			}
			break;
		case 1:
			for(uint8_t i=0;i<8;i++){
				oled.draw_ASCI(rtc.msg_dat[i],5+i*charsize,7*charhighte);
    1802:	69 91       	ld	r22, Y+
    1804:	28 e3       	ldi	r18, 0x38	; 56
    1806:	41 2f       	mov	r20, r17
    1808:	86 e4       	ldi	r24, 0x46	; 70
    180a:	93 e0       	ldi	r25, 0x03	; 3
    180c:	c1 da       	rcall	.-2686   	; 0xd90 <_ZN7Display9draw_ASCIEhhh>
    180e:	1a 5f       	subi	r17, 0xFA	; 250
			for(uint8_t i=0;i<8;i++){
				oled.draw_ASCI(rtc.msg_dat[i],i*charsize+(SSD1306_WIDTH-bitsderrtc*charsize),7*charhighte);
			}
			break;
		case 1:
			for(uint8_t i=0;i<8;i++){
    1810:	15 33       	cpi	r17, 0x35	; 53
    1812:	b9 f7       	brne	.-18     	; 0x1802 <_Z6bottomh+0x30>
			}
			break;
		default:
			break;
		}
}
    1814:	df 91       	pop	r29
    1816:	cf 91       	pop	r28
    1818:	1f 91       	pop	r17
    181a:	08 95       	ret

0000181c <_Z16anzeige_richtungf>:

void anzeige_richtung(float winkel){
    181c:	cf 92       	push	r12
    181e:	df 92       	push	r13
    1820:	ef 92       	push	r14
    1822:	ff 92       	push	r15
    1824:	6b 01       	movw	r12, r22
    1826:	7c 01       	movw	r14, r24
	//finden der Ziffer fuer die Anzeige
	if ((winkel<45/2) || (winkel >= 360-45/2))
    1828:	20 e0       	ldi	r18, 0x00	; 0
    182a:	30 e0       	ldi	r19, 0x00	; 0
    182c:	40 eb       	ldi	r20, 0xB0	; 176
    182e:	51 e4       	ldi	r21, 0x41	; 65
    1830:	0e 94 56 28 	call	0x50ac	; 0x50ac <__cmpsf2>
    1834:	88 23       	and	r24, r24
    1836:	54 f0       	brlt	.+20     	; 0x184c <_Z16anzeige_richtungf+0x30>
    1838:	20 e0       	ldi	r18, 0x00	; 0
    183a:	30 e0       	ldi	r19, 0x00	; 0
    183c:	49 ea       	ldi	r20, 0xA9	; 169
    183e:	53 e4       	ldi	r21, 0x43	; 67
    1840:	c7 01       	movw	r24, r14
    1842:	b6 01       	movw	r22, r12
    1844:	0e 94 06 2a 	call	0x540c	; 0x540c <__gesf2>
    1848:	88 23       	and	r24, r24
    184a:	3c f0       	brlt	.+14     	; 0x185a <_Z16anzeige_richtungf+0x3e>
	{
		oled.draw_ASCI('N',80,3.5*charhighte);
    184c:	2c e1       	ldi	r18, 0x1C	; 28
    184e:	40 e5       	ldi	r20, 0x50	; 80
    1850:	6e e4       	ldi	r22, 0x4E	; 78
    1852:	86 e4       	ldi	r24, 0x46	; 70
    1854:	93 e0       	ldi	r25, 0x03	; 3
    1856:	9c da       	rcall	.-2760   	; 0xd90 <_ZN7Display9draw_ASCIEhhh>
    1858:	8e c0       	rjmp	.+284    	; 0x1976 <_Z16anzeige_richtungf+0x15a>
	}
	else if (winkel<90-45/2)
    185a:	20 e0       	ldi	r18, 0x00	; 0
    185c:	30 e0       	ldi	r19, 0x00	; 0
    185e:	48 e8       	ldi	r20, 0x88	; 136
    1860:	52 e4       	ldi	r21, 0x42	; 66
    1862:	c7 01       	movw	r24, r14
    1864:	b6 01       	movw	r22, r12
    1866:	0e 94 56 28 	call	0x50ac	; 0x50ac <__cmpsf2>
    186a:	88 23       	and	r24, r24
    186c:	6c f4       	brge	.+26     	; 0x1888 <_Z16anzeige_richtungf+0x6c>
	{
		oled.draw_ASCI('N',80-charsize/2,3.5*charhighte);
    186e:	2c e1       	ldi	r18, 0x1C	; 28
    1870:	4d e4       	ldi	r20, 0x4D	; 77
    1872:	6e e4       	ldi	r22, 0x4E	; 78
    1874:	86 e4       	ldi	r24, 0x46	; 70
    1876:	93 e0       	ldi	r25, 0x03	; 3
    1878:	8b da       	rcall	.-2794   	; 0xd90 <_ZN7Display9draw_ASCIEhhh>
		oled.draw_ASCI('O',80+charsize/2,3.5*charhighte);
    187a:	2c e1       	ldi	r18, 0x1C	; 28
    187c:	43 e5       	ldi	r20, 0x53	; 83
    187e:	6f e4       	ldi	r22, 0x4F	; 79
    1880:	86 e4       	ldi	r24, 0x46	; 70
    1882:	93 e0       	ldi	r25, 0x03	; 3
    1884:	85 da       	rcall	.-2806   	; 0xd90 <_ZN7Display9draw_ASCIEhhh>
    1886:	77 c0       	rjmp	.+238    	; 0x1976 <_Z16anzeige_richtungf+0x15a>
	}
	else if (winkel<135-45/2)
    1888:	20 e0       	ldi	r18, 0x00	; 0
    188a:	30 e0       	ldi	r19, 0x00	; 0
    188c:	42 ee       	ldi	r20, 0xE2	; 226
    188e:	52 e4       	ldi	r21, 0x42	; 66
    1890:	c7 01       	movw	r24, r14
    1892:	b6 01       	movw	r22, r12
    1894:	0e 94 56 28 	call	0x50ac	; 0x50ac <__cmpsf2>
    1898:	88 23       	and	r24, r24
    189a:	3c f4       	brge	.+14     	; 0x18aa <_Z16anzeige_richtungf+0x8e>
	{
		oled.draw_ASCI('O',80,3.5*charhighte);
    189c:	2c e1       	ldi	r18, 0x1C	; 28
    189e:	40 e5       	ldi	r20, 0x50	; 80
    18a0:	6f e4       	ldi	r22, 0x4F	; 79
    18a2:	86 e4       	ldi	r24, 0x46	; 70
    18a4:	93 e0       	ldi	r25, 0x03	; 3
    18a6:	74 da       	rcall	.-2840   	; 0xd90 <_ZN7Display9draw_ASCIEhhh>
    18a8:	66 c0       	rjmp	.+204    	; 0x1976 <_Z16anzeige_richtungf+0x15a>
	}
	else if (winkel<180-45/2)
    18aa:	20 e0       	ldi	r18, 0x00	; 0
    18ac:	30 e0       	ldi	r19, 0x00	; 0
    18ae:	4e e1       	ldi	r20, 0x1E	; 30
    18b0:	53 e4       	ldi	r21, 0x43	; 67
    18b2:	c7 01       	movw	r24, r14
    18b4:	b6 01       	movw	r22, r12
    18b6:	0e 94 56 28 	call	0x50ac	; 0x50ac <__cmpsf2>
    18ba:	88 23       	and	r24, r24
    18bc:	6c f4       	brge	.+26     	; 0x18d8 <_Z16anzeige_richtungf+0xbc>
	{
		oled.draw_ASCI('S',80-charsize/2,3.5*charhighte);
    18be:	2c e1       	ldi	r18, 0x1C	; 28
    18c0:	4d e4       	ldi	r20, 0x4D	; 77
    18c2:	63 e5       	ldi	r22, 0x53	; 83
    18c4:	86 e4       	ldi	r24, 0x46	; 70
    18c6:	93 e0       	ldi	r25, 0x03	; 3
    18c8:	63 da       	rcall	.-2874   	; 0xd90 <_ZN7Display9draw_ASCIEhhh>
		oled.draw_ASCI('O',80+charsize/2,3.5*charhighte);
    18ca:	2c e1       	ldi	r18, 0x1C	; 28
    18cc:	43 e5       	ldi	r20, 0x53	; 83
    18ce:	6f e4       	ldi	r22, 0x4F	; 79
    18d0:	86 e4       	ldi	r24, 0x46	; 70
    18d2:	93 e0       	ldi	r25, 0x03	; 3
    18d4:	5d da       	rcall	.-2886   	; 0xd90 <_ZN7Display9draw_ASCIEhhh>
    18d6:	4f c0       	rjmp	.+158    	; 0x1976 <_Z16anzeige_richtungf+0x15a>
	}
	else if (winkel<225-45/2)
    18d8:	20 e0       	ldi	r18, 0x00	; 0
    18da:	30 e0       	ldi	r19, 0x00	; 0
    18dc:	4b e4       	ldi	r20, 0x4B	; 75
    18de:	53 e4       	ldi	r21, 0x43	; 67
    18e0:	c7 01       	movw	r24, r14
    18e2:	b6 01       	movw	r22, r12
    18e4:	0e 94 56 28 	call	0x50ac	; 0x50ac <__cmpsf2>
    18e8:	88 23       	and	r24, r24
    18ea:	3c f4       	brge	.+14     	; 0x18fa <_Z16anzeige_richtungf+0xde>
	{
		oled.draw_ASCI('S',80,3.5*charhighte);
    18ec:	2c e1       	ldi	r18, 0x1C	; 28
    18ee:	40 e5       	ldi	r20, 0x50	; 80
    18f0:	63 e5       	ldi	r22, 0x53	; 83
    18f2:	86 e4       	ldi	r24, 0x46	; 70
    18f4:	93 e0       	ldi	r25, 0x03	; 3
    18f6:	4c da       	rcall	.-2920   	; 0xd90 <_ZN7Display9draw_ASCIEhhh>
    18f8:	3e c0       	rjmp	.+124    	; 0x1976 <_Z16anzeige_richtungf+0x15a>
	}
	else if (winkel<270-45/2)
    18fa:	20 e0       	ldi	r18, 0x00	; 0
    18fc:	30 e0       	ldi	r19, 0x00	; 0
    18fe:	48 e7       	ldi	r20, 0x78	; 120
    1900:	53 e4       	ldi	r21, 0x43	; 67
    1902:	c7 01       	movw	r24, r14
    1904:	b6 01       	movw	r22, r12
    1906:	0e 94 56 28 	call	0x50ac	; 0x50ac <__cmpsf2>
    190a:	88 23       	and	r24, r24
    190c:	6c f4       	brge	.+26     	; 0x1928 <_Z16anzeige_richtungf+0x10c>
	{
		oled.draw_ASCI('S',80-charsize/2,3.5*charhighte);
    190e:	2c e1       	ldi	r18, 0x1C	; 28
    1910:	4d e4       	ldi	r20, 0x4D	; 77
    1912:	63 e5       	ldi	r22, 0x53	; 83
    1914:	86 e4       	ldi	r24, 0x46	; 70
    1916:	93 e0       	ldi	r25, 0x03	; 3
    1918:	3b da       	rcall	.-2954   	; 0xd90 <_ZN7Display9draw_ASCIEhhh>
		oled.draw_ASCI('W',80+charsize/2,3.5*charhighte);
    191a:	2c e1       	ldi	r18, 0x1C	; 28
    191c:	43 e5       	ldi	r20, 0x53	; 83
    191e:	67 e5       	ldi	r22, 0x57	; 87
    1920:	86 e4       	ldi	r24, 0x46	; 70
    1922:	93 e0       	ldi	r25, 0x03	; 3
    1924:	35 da       	rcall	.-2966   	; 0xd90 <_ZN7Display9draw_ASCIEhhh>
    1926:	27 c0       	rjmp	.+78     	; 0x1976 <_Z16anzeige_richtungf+0x15a>
	}
	else if (winkel<315-45/2)
    1928:	20 e0       	ldi	r18, 0x00	; 0
    192a:	30 e8       	ldi	r19, 0x80	; 128
    192c:	42 e9       	ldi	r20, 0x92	; 146
    192e:	53 e4       	ldi	r21, 0x43	; 67
    1930:	c7 01       	movw	r24, r14
    1932:	b6 01       	movw	r22, r12
    1934:	0e 94 56 28 	call	0x50ac	; 0x50ac <__cmpsf2>
    1938:	88 23       	and	r24, r24
    193a:	3c f4       	brge	.+14     	; 0x194a <_Z16anzeige_richtungf+0x12e>
	{
		oled.draw_ASCI('W',80,3.5*charhighte);
    193c:	2c e1       	ldi	r18, 0x1C	; 28
    193e:	40 e5       	ldi	r20, 0x50	; 80
    1940:	67 e5       	ldi	r22, 0x57	; 87
    1942:	86 e4       	ldi	r24, 0x46	; 70
    1944:	93 e0       	ldi	r25, 0x03	; 3
    1946:	24 da       	rcall	.-3000   	; 0xd90 <_ZN7Display9draw_ASCIEhhh>
    1948:	16 c0       	rjmp	.+44     	; 0x1976 <_Z16anzeige_richtungf+0x15a>
	}
	else if (winkel<360-45/2)
    194a:	20 e0       	ldi	r18, 0x00	; 0
    194c:	30 e0       	ldi	r19, 0x00	; 0
    194e:	49 ea       	ldi	r20, 0xA9	; 169
    1950:	53 e4       	ldi	r21, 0x43	; 67
    1952:	c7 01       	movw	r24, r14
    1954:	b6 01       	movw	r22, r12
    1956:	0e 94 56 28 	call	0x50ac	; 0x50ac <__cmpsf2>
    195a:	88 23       	and	r24, r24
    195c:	64 f4       	brge	.+24     	; 0x1976 <_Z16anzeige_richtungf+0x15a>
	{
		oled.draw_ASCI('N',80-charsize/2,3.5*charhighte);
    195e:	2c e1       	ldi	r18, 0x1C	; 28
    1960:	4d e4       	ldi	r20, 0x4D	; 77
    1962:	6e e4       	ldi	r22, 0x4E	; 78
    1964:	86 e4       	ldi	r24, 0x46	; 70
    1966:	93 e0       	ldi	r25, 0x03	; 3
    1968:	13 da       	rcall	.-3034   	; 0xd90 <_ZN7Display9draw_ASCIEhhh>
		oled.draw_ASCI('W',80+charsize/2,3.5*charhighte);
    196a:	2c e1       	ldi	r18, 0x1C	; 28
    196c:	43 e5       	ldi	r20, 0x53	; 83
    196e:	67 e5       	ldi	r22, 0x57	; 87
    1970:	86 e4       	ldi	r24, 0x46	; 70
    1972:	93 e0       	ldi	r25, 0x03	; 3
    1974:	0d da       	rcall	.-3046   	; 0xd90 <_ZN7Display9draw_ASCIEhhh>
	}
}
    1976:	ff 90       	pop	r15
    1978:	ef 90       	pop	r14
    197a:	df 90       	pop	r13
    197c:	cf 90       	pop	r12
    197e:	08 95       	ret

00001980 <_Z13anzeige_nadelhhf>:

void anzeige_nadel(uint8_t x, uint8_t y, float angle){
    1980:	af 92       	push	r10
    1982:	bf 92       	push	r11
    1984:	cf 92       	push	r12
    1986:	df 92       	push	r13
    1988:	ef 92       	push	r14
    198a:	ff 92       	push	r15
    198c:	0f 93       	push	r16
    198e:	1f 93       	push	r17
	//fixed parameters for drawing the arrow
	oled.draw_triangle(x,y,20,70,angle);
    1990:	59 01       	movw	r10, r18
    1992:	6a 01       	movw	r12, r20
    1994:	e1 2c       	mov	r14, r1
    1996:	f1 2c       	mov	r15, r1
    1998:	0c e8       	ldi	r16, 0x8C	; 140
    199a:	12 e4       	ldi	r17, 0x42	; 66
    199c:	24 e1       	ldi	r18, 0x14	; 20
    199e:	46 2f       	mov	r20, r22
    19a0:	68 2f       	mov	r22, r24
    19a2:	86 e4       	ldi	r24, 0x46	; 70
    19a4:	93 e0       	ldi	r25, 0x03	; 3
    19a6:	d4 d8       	rcall	.-3672   	; 0xb50 <_ZN7Display13draw_triangleEhhhff>
}
    19a8:	1f 91       	pop	r17
    19aa:	0f 91       	pop	r16
    19ac:	ff 90       	pop	r15
    19ae:	ef 90       	pop	r14
    19b0:	df 90       	pop	r13
    19b2:	cf 90       	pop	r12
    19b4:	bf 90       	pop	r11
    19b6:	af 90       	pop	r10
    19b8:	08 95       	ret

000019ba <_Z19anzeige_kleinenadelhhf>:
void anzeige_kleinenadel(uint8_t x, uint8_t y, float angle){
    19ba:	af 92       	push	r10
    19bc:	bf 92       	push	r11
    19be:	cf 92       	push	r12
    19c0:	df 92       	push	r13
    19c2:	ef 92       	push	r14
    19c4:	ff 92       	push	r15
    19c6:	0f 93       	push	r16
    19c8:	1f 93       	push	r17
	//fixed parameters for drawing the arrow
	oled.draw_triangle(x,y,10,70,angle);
    19ca:	59 01       	movw	r10, r18
    19cc:	6a 01       	movw	r12, r20
    19ce:	e1 2c       	mov	r14, r1
    19d0:	f1 2c       	mov	r15, r1
    19d2:	0c e8       	ldi	r16, 0x8C	; 140
    19d4:	12 e4       	ldi	r17, 0x42	; 66
    19d6:	2a e0       	ldi	r18, 0x0A	; 10
    19d8:	46 2f       	mov	r20, r22
    19da:	68 2f       	mov	r22, r24
    19dc:	86 e4       	ldi	r24, 0x46	; 70
    19de:	93 e0       	ldi	r25, 0x03	; 3
    19e0:	b7 d8       	rcall	.-3730   	; 0xb50 <_ZN7Display13draw_triangleEhhhff>
}
    19e2:	1f 91       	pop	r17
    19e4:	0f 91       	pop	r16
    19e6:	ff 90       	pop	r15
    19e8:	ef 90       	pop	r14
    19ea:	df 90       	pop	r13
    19ec:	cf 90       	pop	r12
    19ee:	bf 90       	pop	r11
    19f0:	af 90       	pop	r10
    19f2:	08 95       	ret

000019f4 <_Z11menue_hauptv>:

void menue_haupt(){
    19f4:	cf 92       	push	r12
    19f6:	df 92       	push	r13
    19f8:	ef 92       	push	r14
    19fa:	ff 92       	push	r15
    19fc:	0f 93       	push	r16
    19fe:	1f 93       	push	r17
    1a00:	cf 93       	push	r28
    1a02:	df 93       	push	r29
    1a04:	cd b7       	in	r28, 0x3d	; 61
    1a06:	de b7       	in	r29, 0x3e	; 62
    1a08:	64 97       	sbiw	r28, 0x14	; 20
    1a0a:	0f b6       	in	r0, 0x3f	; 63
    1a0c:	f8 94       	cli
    1a0e:	de bf       	out	0x3e, r29	; 62
    1a10:	0f be       	out	0x3f, r0	; 63
    1a12:	cd bf       	out	0x3d, r28	; 61
	char buffer[20];
	uint8_t buffersize=0;

	oled.clearFrame();
    1a14:	86 e4       	ldi	r24, 0x46	; 70
    1a16:	93 e0       	ldi	r25, 0x03	; 3
    1a18:	0e 94 05 04 	call	0x80a	; 0x80a <_ZN7Display10clearFrameEv>
	buffersize=sprintf(buffer,"1:Fahradanzeige");
    1a1c:	80 e1       	ldi	r24, 0x10	; 16
    1a1e:	e6 e3       	ldi	r30, 0x36	; 54
    1a20:	f1 e0       	ldi	r31, 0x01	; 1
    1a22:	8e 01       	movw	r16, r28
    1a24:	0f 5f       	subi	r16, 0xFF	; 255
    1a26:	1f 4f       	sbci	r17, 0xFF	; 255
    1a28:	d8 01       	movw	r26, r16
    1a2a:	01 90       	ld	r0, Z+
    1a2c:	0d 92       	st	X+, r0
    1a2e:	8a 95       	dec	r24
    1a30:	e1 f7       	brne	.-8      	; 0x1a2a <_Z11menue_hauptv+0x36>
    1a32:	e0 2e       	mov	r14, r16
    1a34:	f1 2e       	mov	r15, r17
    1a36:	68 01       	movw	r12, r16
    1a38:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,0*charhighte);}
    1a3a:	f6 01       	movw	r30, r12
    1a3c:	61 91       	ld	r22, Z+
    1a3e:	6f 01       	movw	r12, r30
    1a40:	20 e0       	ldi	r18, 0x00	; 0
    1a42:	41 2f       	mov	r20, r17
    1a44:	86 e4       	ldi	r24, 0x46	; 70
    1a46:	93 e0       	ldi	r25, 0x03	; 3
    1a48:	a3 d9       	rcall	.-3258   	; 0xd90 <_ZN7Display9draw_ASCIEhhh>
    1a4a:	1a 5f       	subi	r17, 0xFA	; 250
    1a4c:	1a 35       	cpi	r17, 0x5A	; 90
    1a4e:	a9 f7       	brne	.-22     	; 0x1a3a <_Z11menue_hauptv+0x46>
	buffersize=sprintf(buffer,"2:Taschenrechner");
    1a50:	81 e1       	ldi	r24, 0x11	; 17
    1a52:	e6 e4       	ldi	r30, 0x46	; 70
    1a54:	f1 e0       	ldi	r31, 0x01	; 1
    1a56:	de 01       	movw	r26, r28
    1a58:	11 96       	adiw	r26, 0x01	; 1
    1a5a:	01 90       	ld	r0, Z+
    1a5c:	0d 92       	st	X+, r0
    1a5e:	8a 95       	dec	r24
    1a60:	e1 f7       	brne	.-8      	; 0x1a5a <_Z11menue_hauptv+0x66>
    1a62:	ce 2c       	mov	r12, r14
    1a64:	df 2c       	mov	r13, r15
    1a66:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,1*charhighte);}
    1a68:	f6 01       	movw	r30, r12
    1a6a:	61 91       	ld	r22, Z+
    1a6c:	6f 01       	movw	r12, r30
    1a6e:	28 e0       	ldi	r18, 0x08	; 8
    1a70:	41 2f       	mov	r20, r17
    1a72:	86 e4       	ldi	r24, 0x46	; 70
    1a74:	93 e0       	ldi	r25, 0x03	; 3
    1a76:	8c d9       	rcall	.-3304   	; 0xd90 <_ZN7Display9draw_ASCIEhhh>
    1a78:	1a 5f       	subi	r17, 0xFA	; 250
    1a7a:	10 36       	cpi	r17, 0x60	; 96
    1a7c:	a9 f7       	brne	.-22     	; 0x1a68 <_Z11menue_hauptv+0x74>
	buffersize=sprintf(buffer,"3:Kompass");
    1a7e:	8a e0       	ldi	r24, 0x0A	; 10
    1a80:	e7 e5       	ldi	r30, 0x57	; 87
    1a82:	f1 e0       	ldi	r31, 0x01	; 1
    1a84:	de 01       	movw	r26, r28
    1a86:	11 96       	adiw	r26, 0x01	; 1
    1a88:	01 90       	ld	r0, Z+
    1a8a:	0d 92       	st	X+, r0
    1a8c:	8a 95       	dec	r24
    1a8e:	e1 f7       	brne	.-8      	; 0x1a88 <_Z11menue_hauptv+0x94>
    1a90:	ce 2c       	mov	r12, r14
    1a92:	df 2c       	mov	r13, r15
    1a94:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,2*charhighte);}
    1a96:	f6 01       	movw	r30, r12
    1a98:	61 91       	ld	r22, Z+
    1a9a:	6f 01       	movw	r12, r30
    1a9c:	20 e1       	ldi	r18, 0x10	; 16
    1a9e:	41 2f       	mov	r20, r17
    1aa0:	86 e4       	ldi	r24, 0x46	; 70
    1aa2:	93 e0       	ldi	r25, 0x03	; 3
    1aa4:	75 d9       	rcall	.-3350   	; 0xd90 <_ZN7Display9draw_ASCIEhhh>
    1aa6:	1a 5f       	subi	r17, 0xFA	; 250
    1aa8:	16 33       	cpi	r17, 0x36	; 54
    1aaa:	a9 f7       	brne	.-22     	; 0x1a96 <_Z11menue_hauptv+0xa2>
	buffersize=sprintf(buffer,"4:Uhrmenue");
    1aac:	8b e0       	ldi	r24, 0x0B	; 11
    1aae:	e1 e6       	ldi	r30, 0x61	; 97
    1ab0:	f1 e0       	ldi	r31, 0x01	; 1
    1ab2:	de 01       	movw	r26, r28
    1ab4:	11 96       	adiw	r26, 0x01	; 1
    1ab6:	01 90       	ld	r0, Z+
    1ab8:	0d 92       	st	X+, r0
    1aba:	8a 95       	dec	r24
    1abc:	e1 f7       	brne	.-8      	; 0x1ab6 <_Z11menue_hauptv+0xc2>
    1abe:	ce 2c       	mov	r12, r14
    1ac0:	df 2c       	mov	r13, r15
    1ac2:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,3*charhighte);}
    1ac4:	f6 01       	movw	r30, r12
    1ac6:	61 91       	ld	r22, Z+
    1ac8:	6f 01       	movw	r12, r30
    1aca:	28 e1       	ldi	r18, 0x18	; 24
    1acc:	41 2f       	mov	r20, r17
    1ace:	86 e4       	ldi	r24, 0x46	; 70
    1ad0:	93 e0       	ldi	r25, 0x03	; 3
    1ad2:	5e d9       	rcall	.-3396   	; 0xd90 <_ZN7Display9draw_ASCIEhhh>
    1ad4:	1a 5f       	subi	r17, 0xFA	; 250
    1ad6:	1c 33       	cpi	r17, 0x3C	; 60
    1ad8:	a9 f7       	brne	.-22     	; 0x1ac4 <_Z11menue_hauptv+0xd0>
	buffersize=sprintf(buffer,"5:Einstellungen");
    1ada:	80 e1       	ldi	r24, 0x10	; 16
    1adc:	ec e6       	ldi	r30, 0x6C	; 108
    1ade:	f1 e0       	ldi	r31, 0x01	; 1
    1ae0:	de 01       	movw	r26, r28
    1ae2:	11 96       	adiw	r26, 0x01	; 1
    1ae4:	01 90       	ld	r0, Z+
    1ae6:	0d 92       	st	X+, r0
    1ae8:	8a 95       	dec	r24
    1aea:	e1 f7       	brne	.-8      	; 0x1ae4 <_Z11menue_hauptv+0xf0>
    1aec:	ce 2c       	mov	r12, r14
    1aee:	df 2c       	mov	r13, r15
    1af0:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,4*charhighte);}
    1af2:	f6 01       	movw	r30, r12
    1af4:	61 91       	ld	r22, Z+
    1af6:	6f 01       	movw	r12, r30
    1af8:	20 e2       	ldi	r18, 0x20	; 32
    1afa:	41 2f       	mov	r20, r17
    1afc:	86 e4       	ldi	r24, 0x46	; 70
    1afe:	93 e0       	ldi	r25, 0x03	; 3
    1b00:	47 d9       	rcall	.-3442   	; 0xd90 <_ZN7Display9draw_ASCIEhhh>
    1b02:	1a 5f       	subi	r17, 0xFA	; 250
    1b04:	1a 35       	cpi	r17, 0x5A	; 90
    1b06:	a9 f7       	brne	.-22     	; 0x1af2 <_Z11menue_hauptv+0xfe>
	buffersize=sprintf(buffer,"6:Display aus");
    1b08:	8e e0       	ldi	r24, 0x0E	; 14
    1b0a:	ec e7       	ldi	r30, 0x7C	; 124
    1b0c:	f1 e0       	ldi	r31, 0x01	; 1
    1b0e:	de 01       	movw	r26, r28
    1b10:	11 96       	adiw	r26, 0x01	; 1
    1b12:	01 90       	ld	r0, Z+
    1b14:	0d 92       	st	X+, r0
    1b16:	8a 95       	dec	r24
    1b18:	e1 f7       	brne	.-8      	; 0x1b12 <_Z11menue_hauptv+0x11e>
    1b1a:	ce 2c       	mov	r12, r14
    1b1c:	df 2c       	mov	r13, r15
    1b1e:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,5*charhighte);}
    1b20:	f6 01       	movw	r30, r12
    1b22:	61 91       	ld	r22, Z+
    1b24:	6f 01       	movw	r12, r30
    1b26:	28 e2       	ldi	r18, 0x28	; 40
    1b28:	41 2f       	mov	r20, r17
    1b2a:	86 e4       	ldi	r24, 0x46	; 70
    1b2c:	93 e0       	ldi	r25, 0x03	; 3
    1b2e:	30 d9       	rcall	.-3488   	; 0xd90 <_ZN7Display9draw_ASCIEhhh>
    1b30:	1a 5f       	subi	r17, 0xFA	; 250
    1b32:	1e 34       	cpi	r17, 0x4E	; 78
    1b34:	a9 f7       	brne	.-22     	; 0x1b20 <_Z11menue_hauptv+0x12c>
	buffersize=sprintf(buffer,"7:Drucksensor");
    1b36:	8e e0       	ldi	r24, 0x0E	; 14
    1b38:	ea e8       	ldi	r30, 0x8A	; 138
    1b3a:	f1 e0       	ldi	r31, 0x01	; 1
    1b3c:	de 01       	movw	r26, r28
    1b3e:	11 96       	adiw	r26, 0x01	; 1
    1b40:	01 90       	ld	r0, Z+
    1b42:	0d 92       	st	X+, r0
    1b44:	8a 95       	dec	r24
    1b46:	e1 f7       	brne	.-8      	; 0x1b40 <_Z11menue_hauptv+0x14c>
    1b48:	ce 2c       	mov	r12, r14
    1b4a:	df 2c       	mov	r13, r15
    1b4c:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,6*charhighte);}
    1b4e:	f6 01       	movw	r30, r12
    1b50:	61 91       	ld	r22, Z+
    1b52:	6f 01       	movw	r12, r30
    1b54:	20 e3       	ldi	r18, 0x30	; 48
    1b56:	41 2f       	mov	r20, r17
    1b58:	86 e4       	ldi	r24, 0x46	; 70
    1b5a:	93 e0       	ldi	r25, 0x03	; 3
    1b5c:	19 d9       	rcall	.-3534   	; 0xd90 <_ZN7Display9draw_ASCIEhhh>
    1b5e:	1a 5f       	subi	r17, 0xFA	; 250
    1b60:	1e 34       	cpi	r17, 0x4E	; 78
    1b62:	a9 f7       	brne	.-22     	; 0x1b4e <_Z11menue_hauptv+0x15a>
}
    1b64:	64 96       	adiw	r28, 0x14	; 20
    1b66:	0f b6       	in	r0, 0x3f	; 63
    1b68:	f8 94       	cli
    1b6a:	de bf       	out	0x3e, r29	; 62
    1b6c:	0f be       	out	0x3f, r0	; 63
    1b6e:	cd bf       	out	0x3d, r28	; 61
    1b70:	df 91       	pop	r29
    1b72:	cf 91       	pop	r28
    1b74:	1f 91       	pop	r17
    1b76:	0f 91       	pop	r16
    1b78:	ff 90       	pop	r15
    1b7a:	ef 90       	pop	r14
    1b7c:	df 90       	pop	r13
    1b7e:	cf 90       	pop	r12
    1b80:	08 95       	ret

00001b82 <_Z11menue_einstv>:
void menue_einst(){
    1b82:	af 92       	push	r10
    1b84:	bf 92       	push	r11
    1b86:	df 92       	push	r13
    1b88:	ef 92       	push	r14
    1b8a:	0f 93       	push	r16
    1b8c:	1f 93       	push	r17
    1b8e:	cf 93       	push	r28
    1b90:	df 93       	push	r29
    1b92:	cd b7       	in	r28, 0x3d	; 61
    1b94:	de b7       	in	r29, 0x3e	; 62
    1b96:	64 97       	sbiw	r28, 0x14	; 20
    1b98:	0f b6       	in	r0, 0x3f	; 63
    1b9a:	f8 94       	cli
    1b9c:	de bf       	out	0x3e, r29	; 62
    1b9e:	0f be       	out	0x3f, r0	; 63
    1ba0:	cd bf       	out	0x3d, r28	; 61
	char buffer[20];
	uint8_t buffersize=0;

	oled.clearFrame();
    1ba2:	86 e4       	ldi	r24, 0x46	; 70
    1ba4:	93 e0       	ldi	r25, 0x03	; 3
    1ba6:	0e 94 05 04 	call	0x80a	; 0x80a <_ZN7Display10clearFrameEv>
	buffersize=sprintf(buffer,"1:Kompass kalib.");
    1baa:	81 e1       	ldi	r24, 0x11	; 17
    1bac:	e8 e9       	ldi	r30, 0x98	; 152
    1bae:	f1 e0       	ldi	r31, 0x01	; 1
    1bb0:	8e 01       	movw	r16, r28
    1bb2:	0f 5f       	subi	r16, 0xFF	; 255
    1bb4:	1f 4f       	sbci	r17, 0xFF	; 255
    1bb6:	d8 01       	movw	r26, r16
    1bb8:	01 90       	ld	r0, Z+
    1bba:	0d 92       	st	X+, r0
    1bbc:	8a 95       	dec	r24
    1bbe:	e1 f7       	brne	.-8      	; 0x1bb8 <_Z11menue_einstv+0x36>
    1bc0:	d0 2e       	mov	r13, r16
    1bc2:	e1 2e       	mov	r14, r17
    1bc4:	58 01       	movw	r10, r16
    1bc6:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,0*charhighte);}
    1bc8:	f5 01       	movw	r30, r10
    1bca:	61 91       	ld	r22, Z+
    1bcc:	5f 01       	movw	r10, r30
    1bce:	20 e0       	ldi	r18, 0x00	; 0
    1bd0:	41 2f       	mov	r20, r17
    1bd2:	86 e4       	ldi	r24, 0x46	; 70
    1bd4:	93 e0       	ldi	r25, 0x03	; 3
    1bd6:	dc d8       	rcall	.-3656   	; 0xd90 <_ZN7Display9draw_ASCIEhhh>
    1bd8:	1a 5f       	subi	r17, 0xFA	; 250
    1bda:	10 36       	cpi	r17, 0x60	; 96
    1bdc:	a9 f7       	brne	.-22     	; 0x1bc8 <_Z11menue_einstv+0x46>
	buffersize=sprintf(buffer,"2:Kompassverstaerkung");
    1bde:	86 e1       	ldi	r24, 0x16	; 22
    1be0:	e9 ea       	ldi	r30, 0xA9	; 169
    1be2:	f1 e0       	ldi	r31, 0x01	; 1
    1be4:	de 01       	movw	r26, r28
    1be6:	11 96       	adiw	r26, 0x01	; 1
    1be8:	01 90       	ld	r0, Z+
    1bea:	0d 92       	st	X+, r0
    1bec:	8a 95       	dec	r24
    1bee:	e1 f7       	brne	.-8      	; 0x1be8 <_Z11menue_einstv+0x66>
    1bf0:	ad 2c       	mov	r10, r13
    1bf2:	be 2c       	mov	r11, r14
    1bf4:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,1*charhighte);}
    1bf6:	f5 01       	movw	r30, r10
    1bf8:	61 91       	ld	r22, Z+
    1bfa:	5f 01       	movw	r10, r30
    1bfc:	28 e0       	ldi	r18, 0x08	; 8
    1bfe:	41 2f       	mov	r20, r17
    1c00:	86 e4       	ldi	r24, 0x46	; 70
    1c02:	93 e0       	ldi	r25, 0x03	; 3
    1c04:	c5 d8       	rcall	.-3702   	; 0xd90 <_ZN7Display9draw_ASCIEhhh>
    1c06:	1a 5f       	subi	r17, 0xFA	; 250
    1c08:	1e 37       	cpi	r17, 0x7E	; 126
    1c0a:	a9 f7       	brne	.-22     	; 0x1bf6 <_Z11menue_einstv+0x74>
	buffersize=sprintf(buffer,"3:Uhr einstellen");
    1c0c:	81 e1       	ldi	r24, 0x11	; 17
    1c0e:	ef eb       	ldi	r30, 0xBF	; 191
    1c10:	f1 e0       	ldi	r31, 0x01	; 1
    1c12:	de 01       	movw	r26, r28
    1c14:	11 96       	adiw	r26, 0x01	; 1
    1c16:	01 90       	ld	r0, Z+
    1c18:	0d 92       	st	X+, r0
    1c1a:	8a 95       	dec	r24
    1c1c:	e1 f7       	brne	.-8      	; 0x1c16 <_Z11menue_einstv+0x94>
    1c1e:	ad 2c       	mov	r10, r13
    1c20:	be 2c       	mov	r11, r14
    1c22:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,2*charhighte);}
    1c24:	f5 01       	movw	r30, r10
    1c26:	61 91       	ld	r22, Z+
    1c28:	5f 01       	movw	r10, r30
    1c2a:	20 e1       	ldi	r18, 0x10	; 16
    1c2c:	41 2f       	mov	r20, r17
    1c2e:	86 e4       	ldi	r24, 0x46	; 70
    1c30:	93 e0       	ldi	r25, 0x03	; 3
    1c32:	ae d8       	rcall	.-3748   	; 0xd90 <_ZN7Display9draw_ASCIEhhh>
    1c34:	1a 5f       	subi	r17, 0xFA	; 250
    1c36:	10 36       	cpi	r17, 0x60	; 96
    1c38:	a9 f7       	brne	.-22     	; 0x1c24 <_Z11menue_einstv+0xa2>
	buffersize=sprintf(buffer,"4:Weckereinstellen");
    1c3a:	83 e1       	ldi	r24, 0x13	; 19
    1c3c:	e0 ed       	ldi	r30, 0xD0	; 208
    1c3e:	f1 e0       	ldi	r31, 0x01	; 1
    1c40:	de 01       	movw	r26, r28
    1c42:	11 96       	adiw	r26, 0x01	; 1
    1c44:	01 90       	ld	r0, Z+
    1c46:	0d 92       	st	X+, r0
    1c48:	8a 95       	dec	r24
    1c4a:	e1 f7       	brne	.-8      	; 0x1c44 <_Z11menue_einstv+0xc2>
    1c4c:	ad 2c       	mov	r10, r13
    1c4e:	be 2c       	mov	r11, r14
    1c50:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,3*charhighte);}
    1c52:	f5 01       	movw	r30, r10
    1c54:	61 91       	ld	r22, Z+
    1c56:	5f 01       	movw	r10, r30
    1c58:	28 e1       	ldi	r18, 0x18	; 24
    1c5a:	41 2f       	mov	r20, r17
    1c5c:	86 e4       	ldi	r24, 0x46	; 70
    1c5e:	93 e0       	ldi	r25, 0x03	; 3
    1c60:	97 d8       	rcall	.-3794   	; 0xd90 <_ZN7Display9draw_ASCIEhhh>
    1c62:	1a 5f       	subi	r17, 0xFA	; 250
    1c64:	1c 36       	cpi	r17, 0x6C	; 108
    1c66:	a9 f7       	brne	.-22     	; 0x1c52 <_Z11menue_einstv+0xd0>
	//for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,4*charhighte);}
	//buffersize=sprintf(buffer,"6:HMC5883L Gain");
	//for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,5*charhighte);}
	//buffersize=sprintf(buffer,"7:Uhr einstellen");
	//for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,6*charhighte);}
}
    1c68:	64 96       	adiw	r28, 0x14	; 20
    1c6a:	0f b6       	in	r0, 0x3f	; 63
    1c6c:	f8 94       	cli
    1c6e:	de bf       	out	0x3e, r29	; 62
    1c70:	0f be       	out	0x3f, r0	; 63
    1c72:	cd bf       	out	0x3d, r28	; 61
    1c74:	df 91       	pop	r29
    1c76:	cf 91       	pop	r28
    1c78:	1f 91       	pop	r17
    1c7a:	0f 91       	pop	r16
    1c7c:	ef 90       	pop	r14
    1c7e:	df 90       	pop	r13
    1c80:	bf 90       	pop	r11
    1c82:	af 90       	pop	r10
    1c84:	08 95       	ret

00001c86 <_Z9menue_uhrv>:
void menue_uhr(){
    1c86:	cf 92       	push	r12
    1c88:	df 92       	push	r13
    1c8a:	ef 92       	push	r14
    1c8c:	ff 92       	push	r15
    1c8e:	0f 93       	push	r16
    1c90:	1f 93       	push	r17
    1c92:	cf 93       	push	r28
    1c94:	df 93       	push	r29
    1c96:	cd b7       	in	r28, 0x3d	; 61
    1c98:	de b7       	in	r29, 0x3e	; 62
    1c9a:	64 97       	sbiw	r28, 0x14	; 20
    1c9c:	0f b6       	in	r0, 0x3f	; 63
    1c9e:	f8 94       	cli
    1ca0:	de bf       	out	0x3e, r29	; 62
    1ca2:	0f be       	out	0x3f, r0	; 63
    1ca4:	cd bf       	out	0x3d, r28	; 61
	char buffer[20];
	uint8_t buffersize=0;

	oled.clearFrame();
    1ca6:	86 e4       	ldi	r24, 0x46	; 70
    1ca8:	93 e0       	ldi	r25, 0x03	; 3
    1caa:	0e 94 05 04 	call	0x80a	; 0x80a <_ZN7Display10clearFrameEv>
	buffersize=sprintf(buffer,"1:Uhr");
    1cae:	86 e0       	ldi	r24, 0x06	; 6
    1cb0:	e3 ee       	ldi	r30, 0xE3	; 227
    1cb2:	f1 e0       	ldi	r31, 0x01	; 1
    1cb4:	8e 01       	movw	r16, r28
    1cb6:	0f 5f       	subi	r16, 0xFF	; 255
    1cb8:	1f 4f       	sbci	r17, 0xFF	; 255
    1cba:	d8 01       	movw	r26, r16
    1cbc:	01 90       	ld	r0, Z+
    1cbe:	0d 92       	st	X+, r0
    1cc0:	8a 95       	dec	r24
    1cc2:	e1 f7       	brne	.-8      	; 0x1cbc <_Z9menue_uhrv+0x36>
    1cc4:	e0 2e       	mov	r14, r16
    1cc6:	f1 2e       	mov	r15, r17
    1cc8:	68 01       	movw	r12, r16
    1cca:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,0*charhighte);}
    1ccc:	f6 01       	movw	r30, r12
    1cce:	61 91       	ld	r22, Z+
    1cd0:	6f 01       	movw	r12, r30
    1cd2:	20 e0       	ldi	r18, 0x00	; 0
    1cd4:	41 2f       	mov	r20, r17
    1cd6:	86 e4       	ldi	r24, 0x46	; 70
    1cd8:	93 e0       	ldi	r25, 0x03	; 3
    1cda:	5a d8       	rcall	.-3916   	; 0xd90 <_ZN7Display9draw_ASCIEhhh>
    1cdc:	1a 5f       	subi	r17, 0xFA	; 250
    1cde:	1e 31       	cpi	r17, 0x1E	; 30
    1ce0:	a9 f7       	brne	.-22     	; 0x1ccc <_Z9menue_uhrv+0x46>
	buffersize=sprintf(buffer,"2:Stoppuhr");
    1ce2:	8b e0       	ldi	r24, 0x0B	; 11
    1ce4:	e9 ee       	ldi	r30, 0xE9	; 233
    1ce6:	f1 e0       	ldi	r31, 0x01	; 1
    1ce8:	de 01       	movw	r26, r28
    1cea:	11 96       	adiw	r26, 0x01	; 1
    1cec:	01 90       	ld	r0, Z+
    1cee:	0d 92       	st	X+, r0
    1cf0:	8a 95       	dec	r24
    1cf2:	e1 f7       	brne	.-8      	; 0x1cec <_Z9menue_uhrv+0x66>
    1cf4:	ce 2c       	mov	r12, r14
    1cf6:	df 2c       	mov	r13, r15
    1cf8:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,1*charhighte);}
    1cfa:	f6 01       	movw	r30, r12
    1cfc:	61 91       	ld	r22, Z+
    1cfe:	6f 01       	movw	r12, r30
    1d00:	28 e0       	ldi	r18, 0x08	; 8
    1d02:	41 2f       	mov	r20, r17
    1d04:	86 e4       	ldi	r24, 0x46	; 70
    1d06:	93 e0       	ldi	r25, 0x03	; 3
    1d08:	43 d8       	rcall	.-3962   	; 0xd90 <_ZN7Display9draw_ASCIEhhh>
    1d0a:	1a 5f       	subi	r17, 0xFA	; 250
    1d0c:	1c 33       	cpi	r17, 0x3C	; 60
    1d0e:	a9 f7       	brne	.-22     	; 0x1cfa <_Z9menue_uhrv+0x74>
	buffersize=sprintf(buffer,"3:Timer");
    1d10:	88 e0       	ldi	r24, 0x08	; 8
    1d12:	e4 ef       	ldi	r30, 0xF4	; 244
    1d14:	f1 e0       	ldi	r31, 0x01	; 1
    1d16:	de 01       	movw	r26, r28
    1d18:	11 96       	adiw	r26, 0x01	; 1
    1d1a:	01 90       	ld	r0, Z+
    1d1c:	0d 92       	st	X+, r0
    1d1e:	8a 95       	dec	r24
    1d20:	e1 f7       	brne	.-8      	; 0x1d1a <_Z9menue_uhrv+0x94>
    1d22:	ce 2c       	mov	r12, r14
    1d24:	df 2c       	mov	r13, r15
    1d26:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,2*charhighte);}
    1d28:	f6 01       	movw	r30, r12
    1d2a:	61 91       	ld	r22, Z+
    1d2c:	6f 01       	movw	r12, r30
    1d2e:	20 e1       	ldi	r18, 0x10	; 16
    1d30:	41 2f       	mov	r20, r17
    1d32:	86 e4       	ldi	r24, 0x46	; 70
    1d34:	93 e0       	ldi	r25, 0x03	; 3
    1d36:	2c d8       	rcall	.-4008   	; 0xd90 <_ZN7Display9draw_ASCIEhhh>
    1d38:	1a 5f       	subi	r17, 0xFA	; 250
    1d3a:	1a 32       	cpi	r17, 0x2A	; 42
    1d3c:	a9 f7       	brne	.-22     	; 0x1d28 <_Z9menue_uhrv+0xa2>
	buffersize=sprintf(buffer,"4:Alarm");
    1d3e:	88 e0       	ldi	r24, 0x08	; 8
    1d40:	ec ef       	ldi	r30, 0xFC	; 252
    1d42:	f1 e0       	ldi	r31, 0x01	; 1
    1d44:	de 01       	movw	r26, r28
    1d46:	11 96       	adiw	r26, 0x01	; 1
    1d48:	01 90       	ld	r0, Z+
    1d4a:	0d 92       	st	X+, r0
    1d4c:	8a 95       	dec	r24
    1d4e:	e1 f7       	brne	.-8      	; 0x1d48 <_Z9menue_uhrv+0xc2>
    1d50:	ce 2c       	mov	r12, r14
    1d52:	df 2c       	mov	r13, r15
    1d54:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,3*charhighte);}
    1d56:	f6 01       	movw	r30, r12
    1d58:	61 91       	ld	r22, Z+
    1d5a:	6f 01       	movw	r12, r30
    1d5c:	28 e1       	ldi	r18, 0x18	; 24
    1d5e:	41 2f       	mov	r20, r17
    1d60:	86 e4       	ldi	r24, 0x46	; 70
    1d62:	93 e0       	ldi	r25, 0x03	; 3
    1d64:	15 d8       	rcall	.-4054   	; 0xd90 <_ZN7Display9draw_ASCIEhhh>
    1d66:	1a 5f       	subi	r17, 0xFA	; 250
    1d68:	1a 32       	cpi	r17, 0x2A	; 42
    1d6a:	a9 f7       	brne	.-22     	; 0x1d56 <_Z9menue_uhrv+0xd0>
	buffersize=sprintf(buffer,"5:Uhr gross");
    1d6c:	8c e0       	ldi	r24, 0x0C	; 12
    1d6e:	e4 e0       	ldi	r30, 0x04	; 4
    1d70:	f2 e0       	ldi	r31, 0x02	; 2
    1d72:	de 01       	movw	r26, r28
    1d74:	11 96       	adiw	r26, 0x01	; 1
    1d76:	01 90       	ld	r0, Z+
    1d78:	0d 92       	st	X+, r0
    1d7a:	8a 95       	dec	r24
    1d7c:	e1 f7       	brne	.-8      	; 0x1d76 <_Z9menue_uhrv+0xf0>
    1d7e:	ce 2c       	mov	r12, r14
    1d80:	df 2c       	mov	r13, r15
    1d82:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,4*charhighte);}
    1d84:	f6 01       	movw	r30, r12
    1d86:	61 91       	ld	r22, Z+
    1d88:	6f 01       	movw	r12, r30
    1d8a:	20 e2       	ldi	r18, 0x20	; 32
    1d8c:	41 2f       	mov	r20, r17
    1d8e:	86 e4       	ldi	r24, 0x46	; 70
    1d90:	93 e0       	ldi	r25, 0x03	; 3
    1d92:	0e 94 c8 06 	call	0xd90	; 0xd90 <_ZN7Display9draw_ASCIEhhh>
    1d96:	1a 5f       	subi	r17, 0xFA	; 250
    1d98:	12 34       	cpi	r17, 0x42	; 66
    1d9a:	a1 f7       	brne	.-24     	; 0x1d84 <_Z9menue_uhrv+0xfe>
	buffersize=sprintf(buffer,"6:Wecker");
    1d9c:	89 e0       	ldi	r24, 0x09	; 9
    1d9e:	e0 e1       	ldi	r30, 0x10	; 16
    1da0:	f2 e0       	ldi	r31, 0x02	; 2
    1da2:	de 01       	movw	r26, r28
    1da4:	11 96       	adiw	r26, 0x01	; 1
    1da6:	01 90       	ld	r0, Z+
    1da8:	0d 92       	st	X+, r0
    1daa:	8a 95       	dec	r24
    1dac:	e1 f7       	brne	.-8      	; 0x1da6 <_Z9menue_uhrv+0x120>
    1dae:	ce 2c       	mov	r12, r14
    1db0:	df 2c       	mov	r13, r15
    1db2:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,5*charhighte);}
    1db4:	f6 01       	movw	r30, r12
    1db6:	61 91       	ld	r22, Z+
    1db8:	6f 01       	movw	r12, r30
    1dba:	28 e2       	ldi	r18, 0x28	; 40
    1dbc:	41 2f       	mov	r20, r17
    1dbe:	86 e4       	ldi	r24, 0x46	; 70
    1dc0:	93 e0       	ldi	r25, 0x03	; 3
    1dc2:	0e 94 c8 06 	call	0xd90	; 0xd90 <_ZN7Display9draw_ASCIEhhh>
    1dc6:	1a 5f       	subi	r17, 0xFA	; 250
    1dc8:	10 33       	cpi	r17, 0x30	; 48
    1dca:	a1 f7       	brne	.-24     	; 0x1db4 <_Z9menue_uhrv+0x12e>
	//buffersize=sprintf(buffer,"7:Uhr einstellen");
	//for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,6*charhighte);}
}
    1dcc:	64 96       	adiw	r28, 0x14	; 20
    1dce:	0f b6       	in	r0, 0x3f	; 63
    1dd0:	f8 94       	cli
    1dd2:	de bf       	out	0x3e, r29	; 62
    1dd4:	0f be       	out	0x3f, r0	; 63
    1dd6:	cd bf       	out	0x3d, r28	; 61
    1dd8:	df 91       	pop	r29
    1dda:	cf 91       	pop	r28
    1ddc:	1f 91       	pop	r17
    1dde:	0f 91       	pop	r16
    1de0:	ff 90       	pop	r15
    1de2:	ef 90       	pop	r14
    1de4:	df 90       	pop	r13
    1de6:	cf 90       	pop	r12
    1de8:	08 95       	ret

00001dea <_Z11uhranzeigenv>:

void uhranzeigen(){
    1dea:	df 92       	push	r13
    1dec:	ef 92       	push	r14
    1dee:	ff 92       	push	r15
    1df0:	0f 93       	push	r16
    1df2:	1f 93       	push	r17
    1df4:	cf 93       	push	r28
    1df6:	df 93       	push	r29
    1df8:	cd b7       	in	r28, 0x3d	; 61
    1dfa:	de b7       	in	r29, 0x3e	; 62
    1dfc:	64 97       	sbiw	r28, 0x14	; 20
    1dfe:	0f b6       	in	r0, 0x3f	; 63
    1e00:	f8 94       	cli
    1e02:	de bf       	out	0x3e, r29	; 62
    1e04:	0f be       	out	0x3f, r0	; 63
    1e06:	cd bf       	out	0x3d, r28	; 61
	Baro.READ_Temperature();
    1e08:	8f e2       	ldi	r24, 0x2F	; 47
    1e0a:	93 e0       	ldi	r25, 0x03	; 3
    1e0c:	0e 94 8a 25 	call	0x4b14	; 0x4b14 <_ZN8Pressure16READ_TemperatureEv>
	uint8_t buffersize;
	char Buffer[20];
	oled.clearFrame();
    1e10:	86 e4       	ldi	r24, 0x46	; 70
    1e12:	93 e0       	ldi	r25, 0x03	; 3
    1e14:	0e 94 05 04 	call	0x80a	; 0x80a <_ZN7Display10clearFrameEv>
	//oled.analog(rtc.Stunden,rtc.Minuten,rtc.Sekunden,1);
	oled.draw_pikachu();
    1e18:	86 e4       	ldi	r24, 0x46	; 70
    1e1a:	93 e0       	ldi	r25, 0x03	; 3
    1e1c:	07 d8       	rcall	.-4082   	; 0xe2c <_ZN7Display12draw_pikachuEv>
    1e1e:	0f 2e       	mov	r0, r31
    1e20:	fd e7       	ldi	r31, 0x7D	; 125
    1e22:	ef 2e       	mov	r14, r31
    1e24:	f7 e0       	ldi	r31, 0x07	; 7
    1e26:	ff 2e       	mov	r15, r31
    1e28:	f0 2d       	mov	r31, r0
    1e2a:	11 e4       	ldi	r17, 0x41	; 65
	for(uint8_t i=0;i<bitsderrtc;i++){oled.draw_ASCI(rtc.msg_uhr[i],65+i*charsize,0*charhighte);}
    1e2c:	f7 01       	movw	r30, r14
    1e2e:	61 91       	ld	r22, Z+
    1e30:	7f 01       	movw	r14, r30
    1e32:	20 e0       	ldi	r18, 0x00	; 0
    1e34:	41 2f       	mov	r20, r17
    1e36:	86 e4       	ldi	r24, 0x46	; 70
    1e38:	93 e0       	ldi	r25, 0x03	; 3
    1e3a:	0e 94 c8 06 	call	0xd90	; 0xd90 <_ZN7Display9draw_ASCIEhhh>
    1e3e:	1a 5f       	subi	r17, 0xFA	; 250
    1e40:	11 37       	cpi	r17, 0x71	; 113
    1e42:	a1 f7       	brne	.-24     	; 0x1e2c <_Z11uhranzeigenv+0x42>
    1e44:	0f 2e       	mov	r0, r31
    1e46:	f5 e8       	ldi	r31, 0x85	; 133
    1e48:	ef 2e       	mov	r14, r31
    1e4a:	f7 e0       	ldi	r31, 0x07	; 7
    1e4c:	ff 2e       	mov	r15, r31
    1e4e:	f0 2d       	mov	r31, r0
    1e50:	11 e4       	ldi	r17, 0x41	; 65
	for(uint8_t i=0;i<bitsderrtc;i++){oled.draw_ASCI(rtc.msg_dat[i],65+i*charsize,7*charhighte);}
    1e52:	f7 01       	movw	r30, r14
    1e54:	61 91       	ld	r22, Z+
    1e56:	7f 01       	movw	r14, r30
    1e58:	28 e3       	ldi	r18, 0x38	; 56
    1e5a:	41 2f       	mov	r20, r17
    1e5c:	86 e4       	ldi	r24, 0x46	; 70
    1e5e:	93 e0       	ldi	r25, 0x03	; 3
    1e60:	0e 94 c8 06 	call	0xd90	; 0xd90 <_ZN7Display9draw_ASCIEhhh>
    1e64:	1a 5f       	subi	r17, 0xFA	; 250
    1e66:	11 37       	cpi	r17, 0x71	; 113
    1e68:	a1 f7       	brne	.-24     	; 0x1e52 <_Z11uhranzeigenv+0x68>
	buffersize=sprintf(Buffer,"%i%%",Batteriestatus());
    1e6a:	fe da       	rcall	.-2564   	; 0x1468 <_Z14Batteriestatusv>
    1e6c:	28 2f       	mov	r18, r24
    1e6e:	33 27       	eor	r19, r19
    1e70:	27 fd       	sbrc	r18, 7
    1e72:	30 95       	com	r19
    1e74:	3f 93       	push	r19
    1e76:	8f 93       	push	r24
    1e78:	81 e3       	ldi	r24, 0x31	; 49
    1e7a:	91 e0       	ldi	r25, 0x01	; 1
    1e7c:	9f 93       	push	r25
    1e7e:	8f 93       	push	r24
    1e80:	ce 01       	movw	r24, r28
    1e82:	01 96       	adiw	r24, 0x01	; 1
    1e84:	9f 93       	push	r25
    1e86:	8f 93       	push	r24
    1e88:	0e 94 b2 2f 	call	0x5f64	; 0x5f64 <sprintf>
	for(uint8_t i=0;i<buffersize;i++){
    1e8c:	0f 90       	pop	r0
    1e8e:	0f 90       	pop	r0
    1e90:	0f 90       	pop	r0
    1e92:	0f 90       	pop	r0
    1e94:	0f 90       	pop	r0
    1e96:	0f 90       	pop	r0
    1e98:	88 23       	and	r24, r24
    1e9a:	59 f1       	breq	.+86     	; 0x1ef2 <_Z11uhranzeigenv+0x108>
    1e9c:	8e 01       	movw	r16, r28
    1e9e:	0f 5f       	subi	r16, 0xFF	; 255
    1ea0:	1f 4f       	sbci	r17, 0xFF	; 255
    1ea2:	81 50       	subi	r24, 0x01	; 1
    1ea4:	68 94       	set
    1ea6:	ee 24       	eor	r14, r14
    1ea8:	e1 f8       	bld	r14, 1
    1eaa:	f1 2c       	mov	r15, r1
    1eac:	ec 0e       	add	r14, r28
    1eae:	fd 1e       	adc	r15, r29
    1eb0:	e8 0e       	add	r14, r24
    1eb2:	f1 1c       	adc	r15, r1
    1eb4:	0f 2e       	mov	r0, r31
    1eb6:	f9 e4       	ldi	r31, 0x49	; 73
    1eb8:	df 2e       	mov	r13, r31
    1eba:	f0 2d       	mov	r31, r0
		if (Buffer[i]=='%' || Buffer[i]=='-')
    1ebc:	f8 01       	movw	r30, r16
    1ebe:	61 91       	ld	r22, Z+
    1ec0:	8f 01       	movw	r16, r30
    1ec2:	86 2f       	mov	r24, r22
    1ec4:	87 7f       	andi	r24, 0xF7	; 247
    1ec6:	85 32       	cpi	r24, 0x25	; 37
    1ec8:	39 f4       	brne	.+14     	; 0x1ed8 <_Z11uhranzeigenv+0xee>
		{
			oled.draw_ASCI(Buffer[i],73+i*numbersmalsize,3*charhighte);
    1eca:	28 e1       	ldi	r18, 0x18	; 24
    1ecc:	4d 2d       	mov	r20, r13
    1ece:	86 e4       	ldi	r24, 0x46	; 70
    1ed0:	93 e0       	ldi	r25, 0x03	; 3
    1ed2:	0e 94 c8 06 	call	0xd90	; 0xd90 <_ZN7Display9draw_ASCIEhhh>
    1ed6:	08 c0       	rjmp	.+16     	; 0x1ee8 <_Z11uhranzeigenv+0xfe>
		}
		else{
			oled.draw_number16x16(Buffer[i]-'0',70+i*numbersmalsize,2.5*charhighte);
    1ed8:	60 53       	subi	r22, 0x30	; 48
    1eda:	24 e1       	ldi	r18, 0x14	; 20
    1edc:	4d ef       	ldi	r20, 0xFD	; 253
    1ede:	4d 0d       	add	r20, r13
    1ee0:	86 e4       	ldi	r24, 0x46	; 70
    1ee2:	93 e0       	ldi	r25, 0x03	; 3
    1ee4:	0e 94 31 07 	call	0xe62	; 0xe62 <_ZN7Display16draw_number16x16Ehhh>
    1ee8:	f0 e1       	ldi	r31, 0x10	; 16
    1eea:	df 0e       	add	r13, r31
	//oled.analog(rtc.Stunden,rtc.Minuten,rtc.Sekunden,1);
	oled.draw_pikachu();
	for(uint8_t i=0;i<bitsderrtc;i++){oled.draw_ASCI(rtc.msg_uhr[i],65+i*charsize,0*charhighte);}
	for(uint8_t i=0;i<bitsderrtc;i++){oled.draw_ASCI(rtc.msg_dat[i],65+i*charsize,7*charhighte);}
	buffersize=sprintf(Buffer,"%i%%",Batteriestatus());
	for(uint8_t i=0;i<buffersize;i++){
    1eec:	0e 15       	cp	r16, r14
    1eee:	1f 05       	cpc	r17, r15
    1ef0:	29 f7       	brne	.-54     	; 0x1ebc <_Z11uhranzeigenv+0xd2>
		}
		else{
			oled.draw_number16x16(Buffer[i]-'0',70+i*numbersmalsize,2.5*charhighte);
		}
	}
	buffersize=sprintf(Buffer,"%.1f C",(double)Baro.Tempera);
    1ef2:	e3 e3       	ldi	r30, 0x33	; 51
    1ef4:	f3 e0       	ldi	r31, 0x03	; 3
    1ef6:	83 81       	ldd	r24, Z+3	; 0x03
    1ef8:	8f 93       	push	r24
    1efa:	82 81       	ldd	r24, Z+2	; 0x02
    1efc:	8f 93       	push	r24
    1efe:	81 81       	ldd	r24, Z+1	; 0x01
    1f00:	8f 93       	push	r24
    1f02:	80 81       	ld	r24, Z
    1f04:	8f 93       	push	r24
    1f06:	89 e1       	ldi	r24, 0x19	; 25
    1f08:	92 e0       	ldi	r25, 0x02	; 2
    1f0a:	9f 93       	push	r25
    1f0c:	8f 93       	push	r24
    1f0e:	ce 01       	movw	r24, r28
    1f10:	01 96       	adiw	r24, 0x01	; 1
    1f12:	9f 93       	push	r25
    1f14:	8f 93       	push	r24
    1f16:	0e 94 b2 2f 	call	0x5f64	; 0x5f64 <sprintf>
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(Buffer[i],70+i*charsize,5*charhighte);}
    1f1a:	0f b6       	in	r0, 0x3f	; 63
    1f1c:	f8 94       	cli
    1f1e:	de bf       	out	0x3e, r29	; 62
    1f20:	0f be       	out	0x3f, r0	; 63
    1f22:	cd bf       	out	0x3d, r28	; 61
    1f24:	88 23       	and	r24, r24
    1f26:	f1 f0       	breq	.+60     	; 0x1f64 <_Z11uhranzeigenv+0x17a>
    1f28:	8e 01       	movw	r16, r28
    1f2a:	0f 5f       	subi	r16, 0xFF	; 255
    1f2c:	1f 4f       	sbci	r17, 0xFF	; 255
    1f2e:	81 50       	subi	r24, 0x01	; 1
    1f30:	68 94       	set
    1f32:	ee 24       	eor	r14, r14
    1f34:	e1 f8       	bld	r14, 1
    1f36:	f1 2c       	mov	r15, r1
    1f38:	ec 0e       	add	r14, r28
    1f3a:	fd 1e       	adc	r15, r29
    1f3c:	e8 0e       	add	r14, r24
    1f3e:	f1 1c       	adc	r15, r1
    1f40:	0f 2e       	mov	r0, r31
    1f42:	f6 e4       	ldi	r31, 0x46	; 70
    1f44:	df 2e       	mov	r13, r31
    1f46:	f0 2d       	mov	r31, r0
    1f48:	f8 01       	movw	r30, r16
    1f4a:	61 91       	ld	r22, Z+
    1f4c:	8f 01       	movw	r16, r30
    1f4e:	28 e2       	ldi	r18, 0x28	; 40
    1f50:	4d 2d       	mov	r20, r13
    1f52:	86 e4       	ldi	r24, 0x46	; 70
    1f54:	93 e0       	ldi	r25, 0x03	; 3
    1f56:	0e 94 c8 06 	call	0xd90	; 0xd90 <_ZN7Display9draw_ASCIEhhh>
    1f5a:	f6 e0       	ldi	r31, 0x06	; 6
    1f5c:	df 0e       	add	r13, r31
    1f5e:	0e 15       	cp	r16, r14
    1f60:	1f 05       	cpc	r17, r15
    1f62:	91 f7       	brne	.-28     	; 0x1f48 <_Z11uhranzeigenv+0x15e>
}
    1f64:	64 96       	adiw	r28, 0x14	; 20
    1f66:	0f b6       	in	r0, 0x3f	; 63
    1f68:	f8 94       	cli
    1f6a:	de bf       	out	0x3e, r29	; 62
    1f6c:	0f be       	out	0x3f, r0	; 63
    1f6e:	cd bf       	out	0x3d, r28	; 61
    1f70:	df 91       	pop	r29
    1f72:	cf 91       	pop	r28
    1f74:	1f 91       	pop	r17
    1f76:	0f 91       	pop	r16
    1f78:	ff 90       	pop	r15
    1f7a:	ef 90       	pop	r14
    1f7c:	df 90       	pop	r13
    1f7e:	08 95       	ret

00001f80 <_Z14uhranzeigenminv>:

void uhranzeigenmin(){
    1f80:	0f 93       	push	r16
    1f82:	1f 93       	push	r17
    1f84:	cf 93       	push	r28
    1f86:	df 93       	push	r29
	oled.clearFrame();
    1f88:	86 e4       	ldi	r24, 0x46	; 70
    1f8a:	93 e0       	ldi	r25, 0x03	; 3
    1f8c:	0e 94 05 04 	call	0x80a	; 0x80a <_ZN7Display10clearFrameEv>
	header(2);
    1f90:	82 e0       	ldi	r24, 0x02	; 2
    1f92:	3e db       	rcall	.-2436   	; 0x1610 <_Z6headerh>
	oled.analog(rtc.Stunden,rtc.Minuten,rtc.Sekunden,0);
    1f94:	00 e0       	ldi	r16, 0x00	; 0
    1f96:	20 91 8f 07 	lds	r18, 0x078F
    1f9a:	40 91 8e 07 	lds	r20, 0x078E
    1f9e:	60 91 8d 07 	lds	r22, 0x078D
    1fa2:	86 e4       	ldi	r24, 0x46	; 70
    1fa4:	93 e0       	ldi	r25, 0x03	; 3
    1fa6:	0e 94 a7 07 	call	0xf4e	; 0xf4e <_ZN7Display6analogEhhhh>
    1faa:	cd e7       	ldi	r28, 0x7D	; 125
    1fac:	d7 e0       	ldi	r29, 0x07	; 7
    1fae:	11 e4       	ldi	r17, 0x41	; 65
	for(uint8_t i=0;i<(bitsderrtc-3);i++){oled.draw_ASCI(rtc.msg_uhr[i],65+i*charsize,0*charhighte);}
    1fb0:	69 91       	ld	r22, Y+
    1fb2:	20 e0       	ldi	r18, 0x00	; 0
    1fb4:	41 2f       	mov	r20, r17
    1fb6:	86 e4       	ldi	r24, 0x46	; 70
    1fb8:	93 e0       	ldi	r25, 0x03	; 3
    1fba:	0e 94 c8 06 	call	0xd90	; 0xd90 <_ZN7Display9draw_ASCIEhhh>
    1fbe:	1a 5f       	subi	r17, 0xFA	; 250
    1fc0:	1f 35       	cpi	r17, 0x5F	; 95
    1fc2:	b1 f7       	brne	.-20     	; 0x1fb0 <_Z14uhranzeigenminv+0x30>
    1fc4:	c5 e8       	ldi	r28, 0x85	; 133
    1fc6:	d7 e0       	ldi	r29, 0x07	; 7
    1fc8:	11 e4       	ldi	r17, 0x41	; 65
	for(uint8_t i=0;i<bitsderrtc;i++){oled.draw_ASCI(rtc.msg_dat[i],65+i*charsize,7*charhighte);}
    1fca:	69 91       	ld	r22, Y+
    1fcc:	28 e3       	ldi	r18, 0x38	; 56
    1fce:	41 2f       	mov	r20, r17
    1fd0:	86 e4       	ldi	r24, 0x46	; 70
    1fd2:	93 e0       	ldi	r25, 0x03	; 3
    1fd4:	0e 94 c8 06 	call	0xd90	; 0xd90 <_ZN7Display9draw_ASCIEhhh>
    1fd8:	1a 5f       	subi	r17, 0xFA	; 250
    1fda:	11 37       	cpi	r17, 0x71	; 113
    1fdc:	b1 f7       	brne	.-20     	; 0x1fca <_Z14uhranzeigenminv+0x4a>
	//show hours and minutes in big numbers
	oled.draw_number16x16(rtc.msg_uhr[0]-'0',70,1.66*charhighte);
    1fde:	60 91 7d 07 	lds	r22, 0x077D
    1fe2:	60 53       	subi	r22, 0x30	; 48
    1fe4:	2d e0       	ldi	r18, 0x0D	; 13
    1fe6:	46 e4       	ldi	r20, 0x46	; 70
    1fe8:	86 e4       	ldi	r24, 0x46	; 70
    1fea:	93 e0       	ldi	r25, 0x03	; 3
    1fec:	0e 94 31 07 	call	0xe62	; 0xe62 <_ZN7Display16draw_number16x16Ehhh>
	oled.draw_number16x16(rtc.msg_uhr[1]-'0',70+numbersmalsize,1.66*charhighte);
    1ff0:	60 91 7e 07 	lds	r22, 0x077E
    1ff4:	60 53       	subi	r22, 0x30	; 48
    1ff6:	2d e0       	ldi	r18, 0x0D	; 13
    1ff8:	46 e5       	ldi	r20, 0x56	; 86
    1ffa:	86 e4       	ldi	r24, 0x46	; 70
    1ffc:	93 e0       	ldi	r25, 0x03	; 3
    1ffe:	0e 94 31 07 	call	0xe62	; 0xe62 <_ZN7Display16draw_number16x16Ehhh>
	oled.draw_number16x16(rtc.msg_uhr[3]-'0',70,2.33*charhighte+numbersmalhight);
    2002:	60 91 80 07 	lds	r22, 0x0780
    2006:	60 53       	subi	r22, 0x30	; 48
    2008:	22 e2       	ldi	r18, 0x22	; 34
    200a:	46 e4       	ldi	r20, 0x46	; 70
    200c:	86 e4       	ldi	r24, 0x46	; 70
    200e:	93 e0       	ldi	r25, 0x03	; 3
    2010:	0e 94 31 07 	call	0xe62	; 0xe62 <_ZN7Display16draw_number16x16Ehhh>
	oled.draw_number16x16(rtc.msg_uhr[4]-'0',70+numbersmalsize,2.33*charhighte+numbersmalhight);
    2014:	60 91 81 07 	lds	r22, 0x0781
    2018:	60 53       	subi	r22, 0x30	; 48
    201a:	22 e2       	ldi	r18, 0x22	; 34
    201c:	46 e5       	ldi	r20, 0x56	; 86
    201e:	86 e4       	ldi	r24, 0x46	; 70
    2020:	93 e0       	ldi	r25, 0x03	; 3
    2022:	0e 94 31 07 	call	0xe62	; 0xe62 <_ZN7Display16draw_number16x16Ehhh>
		//}
		//else{
			//oled.draw_number16x16(Buffer[i]-'0',70+i*numbersmalsize,3*charhighte);
		//}
	//}
}
    2026:	df 91       	pop	r29
    2028:	cf 91       	pop	r28
    202a:	1f 91       	pop	r17
    202c:	0f 91       	pop	r16
    202e:	08 95       	ret

00002030 <_Z13Weckeranzeigev>:

void Weckeranzeige(){
    2030:	1f 93       	push	r17
    2032:	cf 93       	push	r28
    2034:	df 93       	push	r29
	oled.clearFrame();
    2036:	86 e4       	ldi	r24, 0x46	; 70
    2038:	93 e0       	ldi	r25, 0x03	; 3
    203a:	0e 94 05 04 	call	0x80a	; 0x80a <_ZN7Display10clearFrameEv>
	bottom(1);
    203e:	81 e0       	ldi	r24, 0x01	; 1
    2040:	c8 db       	rcall	.-2160   	; 0x17d2 <_Z6bottomh>
	header(1);
    2042:	81 e0       	ldi	r24, 0x01	; 1
    2044:	e5 da       	rcall	.-2614   	; 0x1610 <_Z6headerh>
	//Uhr
	oled.draw_number16x16(rtc.msg_uhr[0]-'0',5,1.66*charhighte);
    2046:	60 91 7d 07 	lds	r22, 0x077D
    204a:	60 53       	subi	r22, 0x30	; 48
    204c:	2d e0       	ldi	r18, 0x0D	; 13
    204e:	45 e0       	ldi	r20, 0x05	; 5
    2050:	86 e4       	ldi	r24, 0x46	; 70
    2052:	93 e0       	ldi	r25, 0x03	; 3
    2054:	0e 94 31 07 	call	0xe62	; 0xe62 <_ZN7Display16draw_number16x16Ehhh>
	oled.draw_number16x16(rtc.msg_uhr[1]-'0',5+numbersmalsize,1.66*charhighte);
    2058:	60 91 7e 07 	lds	r22, 0x077E
    205c:	60 53       	subi	r22, 0x30	; 48
    205e:	2d e0       	ldi	r18, 0x0D	; 13
    2060:	45 e1       	ldi	r20, 0x15	; 21
    2062:	86 e4       	ldi	r24, 0x46	; 70
    2064:	93 e0       	ldi	r25, 0x03	; 3
    2066:	0e 94 31 07 	call	0xe62	; 0xe62 <_ZN7Display16draw_number16x16Ehhh>
	oled.draw_number16x16(rtc.msg_uhr[3]-'0',5,2.33*charhighte+numbersmalhight);
    206a:	60 91 80 07 	lds	r22, 0x0780
    206e:	60 53       	subi	r22, 0x30	; 48
    2070:	22 e2       	ldi	r18, 0x22	; 34
    2072:	45 e0       	ldi	r20, 0x05	; 5
    2074:	86 e4       	ldi	r24, 0x46	; 70
    2076:	93 e0       	ldi	r25, 0x03	; 3
    2078:	0e 94 31 07 	call	0xe62	; 0xe62 <_ZN7Display16draw_number16x16Ehhh>
	oled.draw_number16x16(rtc.msg_uhr[4]-'0',5+numbersmalsize,2.33*charhighte+numbersmalhight);
    207c:	60 91 81 07 	lds	r22, 0x0781
    2080:	60 53       	subi	r22, 0x30	; 48
    2082:	22 e2       	ldi	r18, 0x22	; 34
    2084:	45 e1       	ldi	r20, 0x15	; 21
    2086:	86 e4       	ldi	r24, 0x46	; 70
    2088:	93 e0       	ldi	r25, 0x03	; 3
    208a:	0e 94 31 07 	call	0xe62	; 0xe62 <_ZN7Display16draw_number16x16Ehhh>
	
	//Weckerzeit
	oled.draw_number16x16(rtc.WStunden/10,70,1.66*charhighte);
    208e:	c7 e9       	ldi	r28, 0x97	; 151
    2090:	d7 e0       	ldi	r29, 0x07	; 7
    2092:	68 81       	ld	r22, Y
    2094:	1d ec       	ldi	r17, 0xCD	; 205
    2096:	61 9f       	mul	r22, r17
    2098:	61 2d       	mov	r22, r1
    209a:	11 24       	eor	r1, r1
    209c:	66 95       	lsr	r22
    209e:	66 95       	lsr	r22
    20a0:	66 95       	lsr	r22
    20a2:	2d e0       	ldi	r18, 0x0D	; 13
    20a4:	46 e4       	ldi	r20, 0x46	; 70
    20a6:	86 e4       	ldi	r24, 0x46	; 70
    20a8:	93 e0       	ldi	r25, 0x03	; 3
    20aa:	0e 94 31 07 	call	0xe62	; 0xe62 <_ZN7Display16draw_number16x16Ehhh>
	oled.draw_number16x16(rtc.WStunden%10,70+numbersmalsize,1.66*charhighte);
    20ae:	68 81       	ld	r22, Y
    20b0:	61 9f       	mul	r22, r17
    20b2:	81 2d       	mov	r24, r1
    20b4:	11 24       	eor	r1, r1
    20b6:	86 95       	lsr	r24
    20b8:	86 95       	lsr	r24
    20ba:	86 95       	lsr	r24
    20bc:	88 0f       	add	r24, r24
    20be:	98 2f       	mov	r25, r24
    20c0:	99 0f       	add	r25, r25
    20c2:	99 0f       	add	r25, r25
    20c4:	89 0f       	add	r24, r25
    20c6:	68 1b       	sub	r22, r24
    20c8:	2d e0       	ldi	r18, 0x0D	; 13
    20ca:	46 e5       	ldi	r20, 0x56	; 86
    20cc:	86 e4       	ldi	r24, 0x46	; 70
    20ce:	93 e0       	ldi	r25, 0x03	; 3
    20d0:	0e 94 31 07 	call	0xe62	; 0xe62 <_ZN7Display16draw_number16x16Ehhh>
	oled.draw_number16x16(rtc.WMinuten/10,70,2.33*charhighte+numbersmalhight);
    20d4:	c6 e9       	ldi	r28, 0x96	; 150
    20d6:	d7 e0       	ldi	r29, 0x07	; 7
    20d8:	68 81       	ld	r22, Y
    20da:	61 9f       	mul	r22, r17
    20dc:	61 2d       	mov	r22, r1
    20de:	11 24       	eor	r1, r1
    20e0:	66 95       	lsr	r22
    20e2:	66 95       	lsr	r22
    20e4:	66 95       	lsr	r22
    20e6:	22 e2       	ldi	r18, 0x22	; 34
    20e8:	46 e4       	ldi	r20, 0x46	; 70
    20ea:	86 e4       	ldi	r24, 0x46	; 70
    20ec:	93 e0       	ldi	r25, 0x03	; 3
    20ee:	0e 94 31 07 	call	0xe62	; 0xe62 <_ZN7Display16draw_number16x16Ehhh>
	oled.draw_number16x16(rtc.WMinuten%10,70+numbersmalsize,2.33*charhighte+numbersmalhight);
    20f2:	68 81       	ld	r22, Y
    20f4:	61 9f       	mul	r22, r17
    20f6:	11 2d       	mov	r17, r1
    20f8:	11 24       	eor	r1, r1
    20fa:	16 95       	lsr	r17
    20fc:	16 95       	lsr	r17
    20fe:	16 95       	lsr	r17
    2100:	11 0f       	add	r17, r17
    2102:	81 2f       	mov	r24, r17
    2104:	88 0f       	add	r24, r24
    2106:	88 0f       	add	r24, r24
    2108:	18 0f       	add	r17, r24
    210a:	61 1b       	sub	r22, r17
    210c:	22 e2       	ldi	r18, 0x22	; 34
    210e:	46 e5       	ldi	r20, 0x56	; 86
    2110:	86 e4       	ldi	r24, 0x46	; 70
    2112:	93 e0       	ldi	r25, 0x03	; 3
    2114:	0e 94 31 07 	call	0xe62	; 0xe62 <_ZN7Display16draw_number16x16Ehhh>
	
	//Weckeraktiv Zeichen
	if ((rtc.interupts&(1<<Weckerein)))
    2118:	80 91 95 07 	lds	r24, 0x0795
    211c:	83 ff       	sbrs	r24, 3
    211e:	07 c0       	rjmp	.+14     	; 0x212e <_Z13Weckeranzeigev+0xfe>
	{
		oled.draw_ASCI('o',0,0);
    2120:	20 e0       	ldi	r18, 0x00	; 0
    2122:	40 e0       	ldi	r20, 0x00	; 0
    2124:	6f e6       	ldi	r22, 0x6F	; 111
    2126:	86 e4       	ldi	r24, 0x46	; 70
    2128:	93 e0       	ldi	r25, 0x03	; 3
    212a:	0e 94 c8 06 	call	0xd90	; 0xd90 <_ZN7Display9draw_ASCIEhhh>
	}
	
	//Einstellungsmoeglichekeit
	if ((anzeige&(1<<Einstellungsflag)))
    212e:	80 91 29 03 	lds	r24, 0x0329
    2132:	83 ff       	sbrs	r24, 3
    2134:	09 c0       	rjmp	.+18     	; 0x2148 <_Z13Weckeranzeigev+0x118>
	{
		oled.draw_ASCI(pos+'0',1*charsize,0*charhighte);
    2136:	60 91 28 03 	lds	r22, 0x0328
    213a:	60 5d       	subi	r22, 0xD0	; 208
    213c:	20 e0       	ldi	r18, 0x00	; 0
    213e:	46 e0       	ldi	r20, 0x06	; 6
    2140:	86 e4       	ldi	r24, 0x46	; 70
    2142:	93 e0       	ldi	r25, 0x03	; 3
    2144:	0e 94 c8 06 	call	0xd90	; 0xd90 <_ZN7Display9draw_ASCIEhhh>
	}
}
    2148:	df 91       	pop	r29
    214a:	cf 91       	pop	r28
    214c:	1f 91       	pop	r17
    214e:	08 95       	ret

00002150 <_Z12fahradschirmddddm>:

void fahradschirm(double winkelgeschw, double angle, double weite, double maxgeschwinsigkeit, uint32_t Zeit){
    2150:	2f 92       	push	r2
    2152:	3f 92       	push	r3
    2154:	4f 92       	push	r4
    2156:	5f 92       	push	r5
    2158:	6f 92       	push	r6
    215a:	7f 92       	push	r7
    215c:	8f 92       	push	r8
    215e:	9f 92       	push	r9
    2160:	af 92       	push	r10
    2162:	bf 92       	push	r11
    2164:	cf 92       	push	r12
    2166:	df 92       	push	r13
    2168:	ef 92       	push	r14
    216a:	ff 92       	push	r15
    216c:	0f 93       	push	r16
    216e:	1f 93       	push	r17
    2170:	cf 93       	push	r28
    2172:	df 93       	push	r29
    2174:	cd b7       	in	r28, 0x3d	; 61
    2176:	de b7       	in	r29, 0x3e	; 62
    2178:	62 97       	sbiw	r28, 0x12	; 18
    217a:	0f b6       	in	r0, 0x3f	; 63
    217c:	f8 94       	cli
    217e:	de bf       	out	0x3e, r29	; 62
    2180:	0f be       	out	0x3f, r0	; 63
    2182:	cd bf       	out	0x3d, r28	; 61
    2184:	76 2e       	mov	r7, r22
    2186:	67 2e       	mov	r6, r23
    2188:	58 2e       	mov	r5, r24
    218a:	49 2e       	mov	r4, r25
    218c:	82 2e       	mov	r8, r18
    218e:	23 2e       	mov	r2, r19
    2190:	94 2e       	mov	r9, r20
    2192:	35 2e       	mov	r3, r21
    2194:	eb 86       	std	Y+11, r14	; 0x0b
    2196:	fc 86       	std	Y+12, r15	; 0x0c
    2198:	0d 87       	std	Y+13, r16	; 0x0d
    219a:	1e 87       	std	Y+14, r17	; 0x0e
    219c:	2f a1       	ldd	r18, Y+39	; 0x27
    219e:	2f 87       	std	Y+15, r18	; 0x0f
    21a0:	38 a5       	ldd	r19, Y+40	; 0x28
    21a2:	38 8b       	std	Y+16, r19	; 0x10
    21a4:	89 a5       	ldd	r24, Y+41	; 0x29
    21a6:	89 8b       	std	Y+17, r24	; 0x11
    21a8:	9a a5       	ldd	r25, Y+42	; 0x2a
    21aa:	9a 8b       	std	Y+18, r25	; 0x12
	char buffer[10];
	uint8_t buffersize=0;
	oled.clearFrame();
    21ac:	86 e4       	ldi	r24, 0x46	; 70
    21ae:	93 e0       	ldi	r25, 0x03	; 3
    21b0:	0e 94 05 04 	call	0x80a	; 0x80a <_ZN7Display10clearFrameEv>
	header(0);
    21b4:	80 e0       	ldi	r24, 0x00	; 0
    21b6:	2c da       	rcall	.-2984   	; 0x1610 <_Z6headerh>
	bottom(0);
    21b8:	80 e0       	ldi	r24, 0x00	; 0
    21ba:	0b db       	rcall	.-2538   	; 0x17d2 <_Z6bottomh>
	//Ausgabe der Geschwidigkeit
	buffersize=sprintf(buffer,"%3.1f",winkelgeschw);
    21bc:	4f 92       	push	r4
    21be:	5f 92       	push	r5
    21c0:	6f 92       	push	r6
    21c2:	7f 92       	push	r7
    21c4:	80 e2       	ldi	r24, 0x20	; 32
    21c6:	92 e0       	ldi	r25, 0x02	; 2
    21c8:	9f 93       	push	r25
    21ca:	8f 93       	push	r24
    21cc:	ce 01       	movw	r24, r28
    21ce:	01 96       	adiw	r24, 0x01	; 1
    21d0:	9f 93       	push	r25
    21d2:	8f 93       	push	r24
    21d4:	0e 94 b2 2f 	call	0x5f64	; 0x5f64 <sprintf>
	for(uint8_t i=((SSD1306_WIDTH/numbersmalsize)-buffersize-1);i<((SSD1306_WIDTH/numbersmalsize)-1);i++){
    21d8:	27 e0       	ldi	r18, 0x07	; 7
    21da:	02 2f       	mov	r16, r18
    21dc:	08 1b       	sub	r16, r24
    21de:	0f b6       	in	r0, 0x3f	; 63
    21e0:	f8 94       	cli
    21e2:	de bf       	out	0x3e, r29	; 62
    21e4:	0f be       	out	0x3f, r0	; 63
    21e6:	cd bf       	out	0x3d, r28	; 61
    21e8:	07 30       	cpi	r16, 0x07	; 7
    21ea:	18 f5       	brcc	.+70     	; 0x2232 <_Z12fahradschirmddddm+0xe2>
    21ec:	10 2f       	mov	r17, r16
    21ee:	12 95       	swap	r17
    21f0:	10 7f       	andi	r17, 0xF0	; 240
		if(buffer[i-((SSD1306_WIDTH/numbersmalsize)-buffersize-1)]=='.'){
    21f2:	7c 01       	movw	r14, r24
    21f4:	ff 24       	eor	r15, r15
    21f6:	e1 e0       	ldi	r30, 0x01	; 1
    21f8:	f0 e0       	ldi	r31, 0x00	; 0
    21fa:	ec 0f       	add	r30, r28
    21fc:	fd 1f       	adc	r31, r29
    21fe:	e0 0f       	add	r30, r16
    2200:	f1 1d       	adc	r31, r1
    2202:	ee 0d       	add	r30, r14
    2204:	ff 1d       	adc	r31, r15
    2206:	37 97       	sbiw	r30, 0x07	; 7
    2208:	60 81       	ld	r22, Z
    220a:	6e 32       	cpi	r22, 0x2E	; 46
    220c:	39 f4       	brne	.+14     	; 0x221c <_Z12fahradschirmddddm+0xcc>
			oled.draw_ASCI(buffer[i-((SSD1306_WIDTH/numbersmalsize)-buffersize-1)],i*numbersmalsize,4*charhighte);
    220e:	20 e2       	ldi	r18, 0x20	; 32
    2210:	41 2f       	mov	r20, r17
    2212:	86 e4       	ldi	r24, 0x46	; 70
    2214:	93 e0       	ldi	r25, 0x03	; 3
    2216:	0e 94 c8 06 	call	0xd90	; 0xd90 <_ZN7Display9draw_ASCIEhhh>
    221a:	07 c0       	rjmp	.+14     	; 0x222a <_Z12fahradschirmddddm+0xda>
		}
		else{
			oled.draw_number16x16(buffer[i-((SSD1306_WIDTH/numbersmalsize)-buffersize-1)]-'0',i*numbersmalsize,3*charhighte);
    221c:	60 53       	subi	r22, 0x30	; 48
    221e:	28 e1       	ldi	r18, 0x18	; 24
    2220:	41 2f       	mov	r20, r17
    2222:	86 e4       	ldi	r24, 0x46	; 70
    2224:	93 e0       	ldi	r25, 0x03	; 3
    2226:	0e 94 31 07 	call	0xe62	; 0xe62 <_ZN7Display16draw_number16x16Ehhh>
	oled.clearFrame();
	header(0);
	bottom(0);
	//Ausgabe der Geschwidigkeit
	buffersize=sprintf(buffer,"%3.1f",winkelgeschw);
	for(uint8_t i=((SSD1306_WIDTH/numbersmalsize)-buffersize-1);i<((SSD1306_WIDTH/numbersmalsize)-1);i++){
    222a:	0f 5f       	subi	r16, 0xFF	; 255
    222c:	10 5f       	subi	r17, 0xF0	; 240
    222e:	07 30       	cpi	r16, 0x07	; 7
    2230:	11 f7       	brne	.-60     	; 0x21f6 <_Z12fahradschirmddddm+0xa6>
		}
		else{
			oled.draw_number16x16(buffer[i-((SSD1306_WIDTH/numbersmalsize)-buffersize-1)]-'0',i*numbersmalsize,3*charhighte);
		}
	}
	oled.draw_ASCI('k',((SSD1306_WIDTH/charsize-2)*charsize),3*charhighte);
    2232:	28 e1       	ldi	r18, 0x18	; 24
    2234:	42 e7       	ldi	r20, 0x72	; 114
    2236:	6b e6       	ldi	r22, 0x6B	; 107
    2238:	86 e4       	ldi	r24, 0x46	; 70
    223a:	93 e0       	ldi	r25, 0x03	; 3
    223c:	0e 94 c8 06 	call	0xd90	; 0xd90 <_ZN7Display9draw_ASCIEhhh>
	oled.draw_ASCI('m',((SSD1306_WIDTH/charsize-1)*charsize),3*charhighte);
    2240:	28 e1       	ldi	r18, 0x18	; 24
    2242:	48 e7       	ldi	r20, 0x78	; 120
    2244:	6d e6       	ldi	r22, 0x6D	; 109
    2246:	86 e4       	ldi	r24, 0x46	; 70
    2248:	93 e0       	ldi	r25, 0x03	; 3
    224a:	0e 94 c8 06 	call	0xd90	; 0xd90 <_ZN7Display9draw_ASCIEhhh>
	oled.draw_ASCI('h',((SSD1306_WIDTH/charsize-2)*charsize),4*charhighte);
    224e:	20 e2       	ldi	r18, 0x20	; 32
    2250:	42 e7       	ldi	r20, 0x72	; 114
    2252:	68 e6       	ldi	r22, 0x68	; 104
    2254:	86 e4       	ldi	r24, 0x46	; 70
    2256:	93 e0       	ldi	r25, 0x03	; 3
    2258:	0e 94 c8 06 	call	0xd90	; 0xd90 <_ZN7Display9draw_ASCIEhhh>
	//winkelausgabe
	buffersize=sprintf(buffer,"%3.1f",angle);
    225c:	3f 92       	push	r3
    225e:	9f 92       	push	r9
    2260:	2f 92       	push	r2
    2262:	8f 92       	push	r8
    2264:	80 e2       	ldi	r24, 0x20	; 32
    2266:	92 e0       	ldi	r25, 0x02	; 2
    2268:	9f 93       	push	r25
    226a:	8f 93       	push	r24
    226c:	ce 01       	movw	r24, r28
    226e:	01 96       	adiw	r24, 0x01	; 1
    2270:	9f 93       	push	r25
    2272:	8f 93       	push	r24
    2274:	0e 94 b2 2f 	call	0x5f64	; 0x5f64 <sprintf>
    2278:	48 2e       	mov	r4, r24
	for (uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,7*charhighte);}
    227a:	0f b6       	in	r0, 0x3f	; 63
    227c:	f8 94       	cli
    227e:	de bf       	out	0x3e, r29	; 62
    2280:	0f be       	out	0x3f, r0	; 63
    2282:	cd bf       	out	0x3d, r28	; 61
    2284:	88 23       	and	r24, r24
    2286:	99 f0       	breq	.+38     	; 0x22ae <_Z12fahradschirmddddm+0x15e>
    2288:	ce 01       	movw	r24, r28
    228a:	01 96       	adiw	r24, 0x01	; 1
    228c:	3c 01       	movw	r6, r24
    228e:	7c 01       	movw	r14, r24
    2290:	10 e0       	ldi	r17, 0x00	; 0
    2292:	f7 01       	movw	r30, r14
    2294:	61 91       	ld	r22, Z+
    2296:	7f 01       	movw	r14, r30
    2298:	28 e3       	ldi	r18, 0x38	; 56
    229a:	41 2f       	mov	r20, r17
    229c:	86 e4       	ldi	r24, 0x46	; 70
    229e:	93 e0       	ldi	r25, 0x03	; 3
    22a0:	0e 94 c8 06 	call	0xd90	; 0xd90 <_ZN7Display9draw_ASCIEhhh>
    22a4:	1a 5f       	subi	r17, 0xFA	; 250
    22a6:	8e 2d       	mov	r24, r14
    22a8:	86 19       	sub	r24, r6
    22aa:	84 15       	cp	r24, r4
    22ac:	90 f3       	brcs	.-28     	; 0x2292 <_Z12fahradschirmddddm+0x142>
	anzeige_kleinenadel(31,31,angle);
    22ae:	28 2d       	mov	r18, r8
    22b0:	32 2d       	mov	r19, r2
    22b2:	49 2d       	mov	r20, r9
    22b4:	53 2d       	mov	r21, r3
    22b6:	6f e1       	ldi	r22, 0x1F	; 31
    22b8:	8f e1       	ldi	r24, 0x1F	; 31
    22ba:	7f db       	rcall	.-2306   	; 0x19ba <_Z19anzeige_kleinenadelhhf>
	//anzeige der gesammtstrecke
	buffersize=sprintf(buffer,"%.1fm",weite);
    22bc:	fe 85       	ldd	r31, Y+14	; 0x0e
    22be:	ff 93       	push	r31
    22c0:	2d 85       	ldd	r18, Y+13	; 0x0d
    22c2:	2f 93       	push	r18
    22c4:	3c 85       	ldd	r19, Y+12	; 0x0c
    22c6:	3f 93       	push	r19
    22c8:	8b 85       	ldd	r24, Y+11	; 0x0b
    22ca:	8f 93       	push	r24
    22cc:	86 e2       	ldi	r24, 0x26	; 38
    22ce:	92 e0       	ldi	r25, 0x02	; 2
    22d0:	9f 93       	push	r25
    22d2:	8f 93       	push	r24
    22d4:	ce 01       	movw	r24, r28
    22d6:	01 96       	adiw	r24, 0x01	; 1
    22d8:	9f 93       	push	r25
    22da:	8f 93       	push	r24
    22dc:	0e 94 b2 2f 	call	0x5f64	; 0x5f64 <sprintf>
    22e0:	88 2e       	mov	r8, r24
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize+70,2*charhighte);}
    22e2:	0f b6       	in	r0, 0x3f	; 63
    22e4:	f8 94       	cli
    22e6:	de bf       	out	0x3e, r29	; 62
    22e8:	0f be       	out	0x3f, r0	; 63
    22ea:	cd bf       	out	0x3d, r28	; 61
    22ec:	88 23       	and	r24, r24
    22ee:	c1 f0       	breq	.+48     	; 0x2320 <_Z12fahradschirmddddm+0x1d0>
    22f0:	9e 01       	movw	r18, r28
    22f2:	2f 5f       	subi	r18, 0xFF	; 255
    22f4:	3f 4f       	sbci	r19, 0xFF	; 255
    22f6:	79 01       	movw	r14, r18
    22f8:	89 01       	movw	r16, r18
    22fa:	0f 2e       	mov	r0, r31
    22fc:	f6 e4       	ldi	r31, 0x46	; 70
    22fe:	9f 2e       	mov	r9, r31
    2300:	f0 2d       	mov	r31, r0
    2302:	f8 01       	movw	r30, r16
    2304:	61 91       	ld	r22, Z+
    2306:	8f 01       	movw	r16, r30
    2308:	20 e1       	ldi	r18, 0x10	; 16
    230a:	49 2d       	mov	r20, r9
    230c:	86 e4       	ldi	r24, 0x46	; 70
    230e:	93 e0       	ldi	r25, 0x03	; 3
    2310:	0e 94 c8 06 	call	0xd90	; 0xd90 <_ZN7Display9draw_ASCIEhhh>
    2314:	f6 e0       	ldi	r31, 0x06	; 6
    2316:	9f 0e       	add	r9, r31
    2318:	90 2f       	mov	r25, r16
    231a:	9e 19       	sub	r25, r14
    231c:	98 15       	cp	r25, r8
    231e:	88 f3       	brcs	.-30     	; 0x2302 <_Z12fahradschirmddddm+0x1b2>
	//anzeige der max geschwindigkeit
	buffersize=sprintf(buffer,"%.1fkm/h",maxgeschwinsigkeit);
    2320:	df 92       	push	r13
    2322:	cf 92       	push	r12
    2324:	bf 92       	push	r11
    2326:	af 92       	push	r10
    2328:	8c e2       	ldi	r24, 0x2C	; 44
    232a:	92 e0       	ldi	r25, 0x02	; 2
    232c:	9f 93       	push	r25
    232e:	8f 93       	push	r24
    2330:	ce 01       	movw	r24, r28
    2332:	01 96       	adiw	r24, 0x01	; 1
    2334:	9f 93       	push	r25
    2336:	8f 93       	push	r24
    2338:	0e 94 b2 2f 	call	0x5f64	; 0x5f64 <sprintf>
    233c:	c8 2e       	mov	r12, r24
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize+70,5*charhighte);}
    233e:	0f b6       	in	r0, 0x3f	; 63
    2340:	f8 94       	cli
    2342:	de bf       	out	0x3e, r29	; 62
    2344:	0f be       	out	0x3f, r0	; 63
    2346:	cd bf       	out	0x3d, r28	; 61
    2348:	88 23       	and	r24, r24
    234a:	b9 f0       	breq	.+46     	; 0x237a <_Z12fahradschirmddddm+0x22a>
    234c:	ce 01       	movw	r24, r28
    234e:	01 96       	adiw	r24, 0x01	; 1
    2350:	7c 01       	movw	r14, r24
    2352:	8c 01       	movw	r16, r24
    2354:	0f 2e       	mov	r0, r31
    2356:	f6 e4       	ldi	r31, 0x46	; 70
    2358:	df 2e       	mov	r13, r31
    235a:	f0 2d       	mov	r31, r0
    235c:	f8 01       	movw	r30, r16
    235e:	61 91       	ld	r22, Z+
    2360:	8f 01       	movw	r16, r30
    2362:	28 e2       	ldi	r18, 0x28	; 40
    2364:	4d 2d       	mov	r20, r13
    2366:	86 e4       	ldi	r24, 0x46	; 70
    2368:	93 e0       	ldi	r25, 0x03	; 3
    236a:	0e 94 c8 06 	call	0xd90	; 0xd90 <_ZN7Display9draw_ASCIEhhh>
    236e:	f6 e0       	ldi	r31, 0x06	; 6
    2370:	df 0e       	add	r13, r31
    2372:	90 2f       	mov	r25, r16
    2374:	9e 19       	sub	r25, r14
    2376:	9c 15       	cp	r25, r12
    2378:	88 f3       	brcs	.-30     	; 0x235c <_Z12fahradschirmddddm+0x20c>
	//anzeige der Fahrtzeit
	buffersize=sprintf(buffer,"%lus",Zeit);
    237a:	2a 89       	ldd	r18, Y+18	; 0x12
    237c:	2f 93       	push	r18
    237e:	39 89       	ldd	r19, Y+17	; 0x11
    2380:	3f 93       	push	r19
    2382:	88 89       	ldd	r24, Y+16	; 0x10
    2384:	8f 93       	push	r24
    2386:	9f 85       	ldd	r25, Y+15	; 0x0f
    2388:	9f 93       	push	r25
    238a:	85 e3       	ldi	r24, 0x35	; 53
    238c:	92 e0       	ldi	r25, 0x02	; 2
    238e:	9f 93       	push	r25
    2390:	8f 93       	push	r24
    2392:	ce 01       	movw	r24, r28
    2394:	01 96       	adiw	r24, 0x01	; 1
    2396:	9f 93       	push	r25
    2398:	8f 93       	push	r24
    239a:	0e 94 b2 2f 	call	0x5f64	; 0x5f64 <sprintf>
    239e:	c8 2e       	mov	r12, r24
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize+70,6*charhighte);}
    23a0:	0f b6       	in	r0, 0x3f	; 63
    23a2:	f8 94       	cli
    23a4:	de bf       	out	0x3e, r29	; 62
    23a6:	0f be       	out	0x3f, r0	; 63
    23a8:	cd bf       	out	0x3d, r28	; 61
    23aa:	88 23       	and	r24, r24
    23ac:	c1 f0       	breq	.+48     	; 0x23de <_Z12fahradschirmddddm+0x28e>
    23ae:	9e 01       	movw	r18, r28
    23b0:	2f 5f       	subi	r18, 0xFF	; 255
    23b2:	3f 4f       	sbci	r19, 0xFF	; 255
    23b4:	79 01       	movw	r14, r18
    23b6:	89 01       	movw	r16, r18
    23b8:	0f 2e       	mov	r0, r31
    23ba:	f6 e4       	ldi	r31, 0x46	; 70
    23bc:	df 2e       	mov	r13, r31
    23be:	f0 2d       	mov	r31, r0
    23c0:	f8 01       	movw	r30, r16
    23c2:	61 91       	ld	r22, Z+
    23c4:	8f 01       	movw	r16, r30
    23c6:	20 e3       	ldi	r18, 0x30	; 48
    23c8:	4d 2d       	mov	r20, r13
    23ca:	86 e4       	ldi	r24, 0x46	; 70
    23cc:	93 e0       	ldi	r25, 0x03	; 3
    23ce:	0e 94 c8 06 	call	0xd90	; 0xd90 <_ZN7Display9draw_ASCIEhhh>
    23d2:	f6 e0       	ldi	r31, 0x06	; 6
    23d4:	df 0e       	add	r13, r31
    23d6:	90 2f       	mov	r25, r16
    23d8:	9e 19       	sub	r25, r14
    23da:	9c 15       	cp	r25, r12
    23dc:	88 f3       	brcs	.-30     	; 0x23c0 <_Z12fahradschirmddddm+0x270>
}
    23de:	62 96       	adiw	r28, 0x12	; 18
    23e0:	0f b6       	in	r0, 0x3f	; 63
    23e2:	f8 94       	cli
    23e4:	de bf       	out	0x3e, r29	; 62
    23e6:	0f be       	out	0x3f, r0	; 63
    23e8:	cd bf       	out	0x3d, r28	; 61
    23ea:	df 91       	pop	r29
    23ec:	cf 91       	pop	r28
    23ee:	1f 91       	pop	r17
    23f0:	0f 91       	pop	r16
    23f2:	ff 90       	pop	r15
    23f4:	ef 90       	pop	r14
    23f6:	df 90       	pop	r13
    23f8:	cf 90       	pop	r12
    23fa:	bf 90       	pop	r11
    23fc:	af 90       	pop	r10
    23fe:	9f 90       	pop	r9
    2400:	8f 90       	pop	r8
    2402:	7f 90       	pop	r7
    2404:	6f 90       	pop	r6
    2406:	5f 90       	pop	r5
    2408:	4f 90       	pop	r4
    240a:	3f 90       	pop	r3
    240c:	2f 90       	pop	r2
    240e:	08 95       	ret

00002410 <_Z14Gaineinstellenv>:

void Gaineinstellen(){
    2410:	cf 92       	push	r12
    2412:	df 92       	push	r13
    2414:	ef 92       	push	r14
    2416:	ff 92       	push	r15
    2418:	0f 93       	push	r16
    241a:	1f 93       	push	r17
    241c:	cf 93       	push	r28
    241e:	df 93       	push	r29
    2420:	cd b7       	in	r28, 0x3d	; 61
    2422:	de b7       	in	r29, 0x3e	; 62
    2424:	64 97       	sbiw	r28, 0x14	; 20
    2426:	0f b6       	in	r0, 0x3f	; 63
    2428:	f8 94       	cli
    242a:	de bf       	out	0x3e, r29	; 62
    242c:	0f be       	out	0x3f, r0	; 63
    242e:	cd bf       	out	0x3d, r28	; 61
	char buffer[20];
	uint8_t buffersize=0;

	oled.clearFrame();
    2430:	86 e4       	ldi	r24, 0x46	; 70
    2432:	93 e0       	ldi	r25, 0x03	; 3
    2434:	0e 94 05 04 	call	0x80a	; 0x80a <_ZN7Display10clearFrameEv>
	buffersize=sprintf(buffer,"1: 1370");
    2438:	88 e0       	ldi	r24, 0x08	; 8
    243a:	ea e3       	ldi	r30, 0x3A	; 58
    243c:	f2 e0       	ldi	r31, 0x02	; 2
    243e:	8e 01       	movw	r16, r28
    2440:	0f 5f       	subi	r16, 0xFF	; 255
    2442:	1f 4f       	sbci	r17, 0xFF	; 255
    2444:	d8 01       	movw	r26, r16
    2446:	01 90       	ld	r0, Z+
    2448:	0d 92       	st	X+, r0
    244a:	8a 95       	dec	r24
    244c:	e1 f7       	brne	.-8      	; 0x2446 <_Z14Gaineinstellenv+0x36>
    244e:	e0 2e       	mov	r14, r16
    2450:	f1 2e       	mov	r15, r17
    2452:	68 01       	movw	r12, r16
    2454:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,0*charhighte);}
    2456:	f6 01       	movw	r30, r12
    2458:	61 91       	ld	r22, Z+
    245a:	6f 01       	movw	r12, r30
    245c:	20 e0       	ldi	r18, 0x00	; 0
    245e:	41 2f       	mov	r20, r17
    2460:	86 e4       	ldi	r24, 0x46	; 70
    2462:	93 e0       	ldi	r25, 0x03	; 3
    2464:	0e 94 c8 06 	call	0xd90	; 0xd90 <_ZN7Display9draw_ASCIEhhh>
    2468:	1a 5f       	subi	r17, 0xFA	; 250
    246a:	1a 32       	cpi	r17, 0x2A	; 42
    246c:	a1 f7       	brne	.-24     	; 0x2456 <_Z14Gaineinstellenv+0x46>
	buffersize=sprintf(buffer,"2: 1090");
    246e:	88 e0       	ldi	r24, 0x08	; 8
    2470:	e2 e4       	ldi	r30, 0x42	; 66
    2472:	f2 e0       	ldi	r31, 0x02	; 2
    2474:	de 01       	movw	r26, r28
    2476:	11 96       	adiw	r26, 0x01	; 1
    2478:	01 90       	ld	r0, Z+
    247a:	0d 92       	st	X+, r0
    247c:	8a 95       	dec	r24
    247e:	e1 f7       	brne	.-8      	; 0x2478 <_Z14Gaineinstellenv+0x68>
    2480:	ce 2c       	mov	r12, r14
    2482:	df 2c       	mov	r13, r15
    2484:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,1*charhighte);}
    2486:	f6 01       	movw	r30, r12
    2488:	61 91       	ld	r22, Z+
    248a:	6f 01       	movw	r12, r30
    248c:	28 e0       	ldi	r18, 0x08	; 8
    248e:	41 2f       	mov	r20, r17
    2490:	86 e4       	ldi	r24, 0x46	; 70
    2492:	93 e0       	ldi	r25, 0x03	; 3
    2494:	0e 94 c8 06 	call	0xd90	; 0xd90 <_ZN7Display9draw_ASCIEhhh>
    2498:	1a 5f       	subi	r17, 0xFA	; 250
    249a:	1a 32       	cpi	r17, 0x2A	; 42
    249c:	a1 f7       	brne	.-24     	; 0x2486 <_Z14Gaineinstellenv+0x76>
	buffersize=sprintf(buffer,"3:  820");
    249e:	88 e0       	ldi	r24, 0x08	; 8
    24a0:	ea e4       	ldi	r30, 0x4A	; 74
    24a2:	f2 e0       	ldi	r31, 0x02	; 2
    24a4:	de 01       	movw	r26, r28
    24a6:	11 96       	adiw	r26, 0x01	; 1
    24a8:	01 90       	ld	r0, Z+
    24aa:	0d 92       	st	X+, r0
    24ac:	8a 95       	dec	r24
    24ae:	e1 f7       	brne	.-8      	; 0x24a8 <_Z14Gaineinstellenv+0x98>
    24b0:	ce 2c       	mov	r12, r14
    24b2:	df 2c       	mov	r13, r15
    24b4:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,2*charhighte);}
    24b6:	f6 01       	movw	r30, r12
    24b8:	61 91       	ld	r22, Z+
    24ba:	6f 01       	movw	r12, r30
    24bc:	20 e1       	ldi	r18, 0x10	; 16
    24be:	41 2f       	mov	r20, r17
    24c0:	86 e4       	ldi	r24, 0x46	; 70
    24c2:	93 e0       	ldi	r25, 0x03	; 3
    24c4:	0e 94 c8 06 	call	0xd90	; 0xd90 <_ZN7Display9draw_ASCIEhhh>
    24c8:	1a 5f       	subi	r17, 0xFA	; 250
    24ca:	1a 32       	cpi	r17, 0x2A	; 42
    24cc:	a1 f7       	brne	.-24     	; 0x24b6 <_Z14Gaineinstellenv+0xa6>
	buffersize=sprintf(buffer,"4:  660");
    24ce:	88 e0       	ldi	r24, 0x08	; 8
    24d0:	e2 e5       	ldi	r30, 0x52	; 82
    24d2:	f2 e0       	ldi	r31, 0x02	; 2
    24d4:	de 01       	movw	r26, r28
    24d6:	11 96       	adiw	r26, 0x01	; 1
    24d8:	01 90       	ld	r0, Z+
    24da:	0d 92       	st	X+, r0
    24dc:	8a 95       	dec	r24
    24de:	e1 f7       	brne	.-8      	; 0x24d8 <_Z14Gaineinstellenv+0xc8>
    24e0:	ce 2c       	mov	r12, r14
    24e2:	df 2c       	mov	r13, r15
    24e4:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,3*charhighte);}
    24e6:	f6 01       	movw	r30, r12
    24e8:	61 91       	ld	r22, Z+
    24ea:	6f 01       	movw	r12, r30
    24ec:	28 e1       	ldi	r18, 0x18	; 24
    24ee:	41 2f       	mov	r20, r17
    24f0:	86 e4       	ldi	r24, 0x46	; 70
    24f2:	93 e0       	ldi	r25, 0x03	; 3
    24f4:	0e 94 c8 06 	call	0xd90	; 0xd90 <_ZN7Display9draw_ASCIEhhh>
    24f8:	1a 5f       	subi	r17, 0xFA	; 250
    24fa:	1a 32       	cpi	r17, 0x2A	; 42
    24fc:	a1 f7       	brne	.-24     	; 0x24e6 <_Z14Gaineinstellenv+0xd6>
	buffersize=sprintf(buffer,"5:  440");
    24fe:	88 e0       	ldi	r24, 0x08	; 8
    2500:	ea e5       	ldi	r30, 0x5A	; 90
    2502:	f2 e0       	ldi	r31, 0x02	; 2
    2504:	de 01       	movw	r26, r28
    2506:	11 96       	adiw	r26, 0x01	; 1
    2508:	01 90       	ld	r0, Z+
    250a:	0d 92       	st	X+, r0
    250c:	8a 95       	dec	r24
    250e:	e1 f7       	brne	.-8      	; 0x2508 <_Z14Gaineinstellenv+0xf8>
    2510:	ce 2c       	mov	r12, r14
    2512:	df 2c       	mov	r13, r15
    2514:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,4*charhighte);}
    2516:	f6 01       	movw	r30, r12
    2518:	61 91       	ld	r22, Z+
    251a:	6f 01       	movw	r12, r30
    251c:	20 e2       	ldi	r18, 0x20	; 32
    251e:	41 2f       	mov	r20, r17
    2520:	86 e4       	ldi	r24, 0x46	; 70
    2522:	93 e0       	ldi	r25, 0x03	; 3
    2524:	0e 94 c8 06 	call	0xd90	; 0xd90 <_ZN7Display9draw_ASCIEhhh>
    2528:	1a 5f       	subi	r17, 0xFA	; 250
    252a:	1a 32       	cpi	r17, 0x2A	; 42
    252c:	a1 f7       	brne	.-24     	; 0x2516 <_Z14Gaineinstellenv+0x106>
	buffersize=sprintf(buffer,"6:  390");
    252e:	88 e0       	ldi	r24, 0x08	; 8
    2530:	e2 e6       	ldi	r30, 0x62	; 98
    2532:	f2 e0       	ldi	r31, 0x02	; 2
    2534:	de 01       	movw	r26, r28
    2536:	11 96       	adiw	r26, 0x01	; 1
    2538:	01 90       	ld	r0, Z+
    253a:	0d 92       	st	X+, r0
    253c:	8a 95       	dec	r24
    253e:	e1 f7       	brne	.-8      	; 0x2538 <_Z14Gaineinstellenv+0x128>
    2540:	ce 2c       	mov	r12, r14
    2542:	df 2c       	mov	r13, r15
    2544:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,5*charhighte);}
    2546:	f6 01       	movw	r30, r12
    2548:	61 91       	ld	r22, Z+
    254a:	6f 01       	movw	r12, r30
    254c:	28 e2       	ldi	r18, 0x28	; 40
    254e:	41 2f       	mov	r20, r17
    2550:	86 e4       	ldi	r24, 0x46	; 70
    2552:	93 e0       	ldi	r25, 0x03	; 3
    2554:	0e 94 c8 06 	call	0xd90	; 0xd90 <_ZN7Display9draw_ASCIEhhh>
    2558:	1a 5f       	subi	r17, 0xFA	; 250
    255a:	1a 32       	cpi	r17, 0x2A	; 42
    255c:	a1 f7       	brne	.-24     	; 0x2546 <_Z14Gaineinstellenv+0x136>
	buffersize=sprintf(buffer,"7:  330");
    255e:	88 e0       	ldi	r24, 0x08	; 8
    2560:	ea e6       	ldi	r30, 0x6A	; 106
    2562:	f2 e0       	ldi	r31, 0x02	; 2
    2564:	de 01       	movw	r26, r28
    2566:	11 96       	adiw	r26, 0x01	; 1
    2568:	01 90       	ld	r0, Z+
    256a:	0d 92       	st	X+, r0
    256c:	8a 95       	dec	r24
    256e:	e1 f7       	brne	.-8      	; 0x2568 <_Z14Gaineinstellenv+0x158>
    2570:	ce 2c       	mov	r12, r14
    2572:	df 2c       	mov	r13, r15
    2574:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,6*charhighte);}
    2576:	f6 01       	movw	r30, r12
    2578:	61 91       	ld	r22, Z+
    257a:	6f 01       	movw	r12, r30
    257c:	20 e3       	ldi	r18, 0x30	; 48
    257e:	41 2f       	mov	r20, r17
    2580:	86 e4       	ldi	r24, 0x46	; 70
    2582:	93 e0       	ldi	r25, 0x03	; 3
    2584:	0e 94 c8 06 	call	0xd90	; 0xd90 <_ZN7Display9draw_ASCIEhhh>
    2588:	1a 5f       	subi	r17, 0xFA	; 250
    258a:	1a 32       	cpi	r17, 0x2A	; 42
    258c:	a1 f7       	brne	.-24     	; 0x2576 <_Z14Gaineinstellenv+0x166>
	buffersize=sprintf(buffer,"8:  230");
    258e:	88 e0       	ldi	r24, 0x08	; 8
    2590:	e2 e7       	ldi	r30, 0x72	; 114
    2592:	f2 e0       	ldi	r31, 0x02	; 2
    2594:	de 01       	movw	r26, r28
    2596:	11 96       	adiw	r26, 0x01	; 1
    2598:	01 90       	ld	r0, Z+
    259a:	0d 92       	st	X+, r0
    259c:	8a 95       	dec	r24
    259e:	e1 f7       	brne	.-8      	; 0x2598 <_Z14Gaineinstellenv+0x188>
    25a0:	ce 2c       	mov	r12, r14
    25a2:	df 2c       	mov	r13, r15
    25a4:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,7*charhighte);}
    25a6:	f6 01       	movw	r30, r12
    25a8:	61 91       	ld	r22, Z+
    25aa:	6f 01       	movw	r12, r30
    25ac:	28 e3       	ldi	r18, 0x38	; 56
    25ae:	41 2f       	mov	r20, r17
    25b0:	86 e4       	ldi	r24, 0x46	; 70
    25b2:	93 e0       	ldi	r25, 0x03	; 3
    25b4:	0e 94 c8 06 	call	0xd90	; 0xd90 <_ZN7Display9draw_ASCIEhhh>
    25b8:	1a 5f       	subi	r17, 0xFA	; 250
    25ba:	1a 32       	cpi	r17, 0x2A	; 42
    25bc:	a1 f7       	brne	.-24     	; 0x25a6 <_Z14Gaineinstellenv+0x196>
}
    25be:	64 96       	adiw	r28, 0x14	; 20
    25c0:	0f b6       	in	r0, 0x3f	; 63
    25c2:	f8 94       	cli
    25c4:	de bf       	out	0x3e, r29	; 62
    25c6:	0f be       	out	0x3f, r0	; 63
    25c8:	cd bf       	out	0x3d, r28	; 61
    25ca:	df 91       	pop	r29
    25cc:	cf 91       	pop	r28
    25ce:	1f 91       	pop	r17
    25d0:	0f 91       	pop	r16
    25d2:	ff 90       	pop	r15
    25d4:	ef 90       	pop	r14
    25d6:	df 90       	pop	r13
    25d8:	cf 90       	pop	r12
    25da:	08 95       	ret

000025dc <_Z15anzeige_kompassd>:

void anzeige_kompass(double winkel){
    25dc:	9f 92       	push	r9
    25de:	af 92       	push	r10
    25e0:	bf 92       	push	r11
    25e2:	cf 92       	push	r12
    25e4:	df 92       	push	r13
    25e6:	ef 92       	push	r14
    25e8:	ff 92       	push	r15
    25ea:	0f 93       	push	r16
    25ec:	1f 93       	push	r17
    25ee:	cf 93       	push	r28
    25f0:	df 93       	push	r29
    25f2:	cd b7       	in	r28, 0x3d	; 61
    25f4:	de b7       	in	r29, 0x3e	; 62
    25f6:	64 97       	sbiw	r28, 0x14	; 20
    25f8:	0f b6       	in	r0, 0x3f	; 63
    25fa:	f8 94       	cli
    25fc:	de bf       	out	0x3e, r29	; 62
    25fe:	0f be       	out	0x3f, r0	; 63
    2600:	cd bf       	out	0x3d, r28	; 61
    2602:	c6 2e       	mov	r12, r22
    2604:	d7 2e       	mov	r13, r23
    2606:	e8 2e       	mov	r14, r24
    2608:	f9 2e       	mov	r15, r25
	Baro.READ_Pressure_once();
    260a:	8f e2       	ldi	r24, 0x2F	; 47
    260c:	93 e0       	ldi	r25, 0x03	; 3
    260e:	0e 94 12 25 	call	0x4a24	; 0x4a24 <_ZN8Pressure18READ_Pressure_onceEv>
	Baro.READ_Temperature();
    2612:	8f e2       	ldi	r24, 0x2F	; 47
    2614:	93 e0       	ldi	r25, 0x03	; 3
    2616:	0e 94 8a 25 	call	0x4b14	; 0x4b14 <_ZN8Pressure16READ_TemperatureEv>
	oled.clearFrame();
    261a:	86 e4       	ldi	r24, 0x46	; 70
    261c:	93 e0       	ldi	r25, 0x03	; 3
    261e:	0e 94 05 04 	call	0x80a	; 0x80a <_ZN7Display10clearFrameEv>
    2622:	0f 2e       	mov	r0, r31
    2624:	fd e7       	ldi	r31, 0x7D	; 125
    2626:	af 2e       	mov	r10, r31
    2628:	f7 e0       	ldi	r31, 0x07	; 7
    262a:	bf 2e       	mov	r11, r31
    262c:	f0 2d       	mov	r31, r0
    262e:	11 e4       	ldi	r17, 0x41	; 65
	char buffer[20];
	uint8_t buffersize=0;
	//Uhrzeit
	for(uint8_t i=0;i<bitsderrtc;i++){oled.draw_ASCI(rtc.msg_uhr[i],65+i*charsize,0*charhighte);}
    2630:	f5 01       	movw	r30, r10
    2632:	61 91       	ld	r22, Z+
    2634:	5f 01       	movw	r10, r30
    2636:	20 e0       	ldi	r18, 0x00	; 0
    2638:	41 2f       	mov	r20, r17
    263a:	86 e4       	ldi	r24, 0x46	; 70
    263c:	93 e0       	ldi	r25, 0x03	; 3
    263e:	0e 94 c8 06 	call	0xd90	; 0xd90 <_ZN7Display9draw_ASCIEhhh>
    2642:	1a 5f       	subi	r17, 0xFA	; 250
    2644:	11 37       	cpi	r17, 0x71	; 113
    2646:	a1 f7       	brne	.-24     	; 0x2630 <_Z15anzeige_kompassd+0x54>
    2648:	0f 2e       	mov	r0, r31
    264a:	f5 e8       	ldi	r31, 0x85	; 133
    264c:	af 2e       	mov	r10, r31
    264e:	f7 e0       	ldi	r31, 0x07	; 7
    2650:	bf 2e       	mov	r11, r31
    2652:	f0 2d       	mov	r31, r0
    2654:	11 e4       	ldi	r17, 0x41	; 65
	for(uint8_t i=0;i<bitsderrtc;i++){oled.draw_ASCI(rtc.msg_dat[i],65+i*charsize,7*charhighte);}
    2656:	f5 01       	movw	r30, r10
    2658:	61 91       	ld	r22, Z+
    265a:	5f 01       	movw	r10, r30
    265c:	28 e3       	ldi	r18, 0x38	; 56
    265e:	41 2f       	mov	r20, r17
    2660:	86 e4       	ldi	r24, 0x46	; 70
    2662:	93 e0       	ldi	r25, 0x03	; 3
    2664:	0e 94 c8 06 	call	0xd90	; 0xd90 <_ZN7Display9draw_ASCIEhhh>
    2668:	1a 5f       	subi	r17, 0xFA	; 250
    266a:	11 37       	cpi	r17, 0x71	; 113
    266c:	a1 f7       	brne	.-24     	; 0x2656 <_Z15anzeige_kompassd+0x7a>
	//Azeige der Hoehe ueber Altitude
	buffersize=sprintf(buffer,"H: %.1f m",(double)Baro.altitude(Baro.Press));
    266e:	40 91 2f 03 	lds	r20, 0x032F
    2672:	50 91 30 03 	lds	r21, 0x0330
    2676:	60 91 31 03 	lds	r22, 0x0331
    267a:	70 91 32 03 	lds	r23, 0x0332
    267e:	8f e2       	ldi	r24, 0x2F	; 47
    2680:	93 e0       	ldi	r25, 0x03	; 3
    2682:	0e 94 fa 25 	call	0x4bf4	; 0x4bf4 <_ZN8Pressure8altitudeEd>
    2686:	9f 93       	push	r25
    2688:	8f 93       	push	r24
    268a:	7f 93       	push	r23
    268c:	6f 93       	push	r22
    268e:	8a e7       	ldi	r24, 0x7A	; 122
    2690:	92 e0       	ldi	r25, 0x02	; 2
    2692:	9f 93       	push	r25
    2694:	8f 93       	push	r24
    2696:	ce 01       	movw	r24, r28
    2698:	01 96       	adiw	r24, 0x01	; 1
    269a:	9f 93       	push	r25
    269c:	8f 93       	push	r24
    269e:	0e 94 b2 2f 	call	0x5f64	; 0x5f64 <sprintf>
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],65+i*charsize,1.33*charhighte);}
    26a2:	0f b6       	in	r0, 0x3f	; 63
    26a4:	f8 94       	cli
    26a6:	de bf       	out	0x3e, r29	; 62
    26a8:	0f be       	out	0x3f, r0	; 63
    26aa:	cd bf       	out	0x3d, r28	; 61
    26ac:	88 23       	and	r24, r24
    26ae:	f1 f0       	breq	.+60     	; 0x26ec <_Z15anzeige_kompassd+0x110>
    26b0:	8e 01       	movw	r16, r28
    26b2:	0f 5f       	subi	r16, 0xFF	; 255
    26b4:	1f 4f       	sbci	r17, 0xFF	; 255
    26b6:	81 50       	subi	r24, 0x01	; 1
    26b8:	68 94       	set
    26ba:	aa 24       	eor	r10, r10
    26bc:	a1 f8       	bld	r10, 1
    26be:	b1 2c       	mov	r11, r1
    26c0:	ac 0e       	add	r10, r28
    26c2:	bd 1e       	adc	r11, r29
    26c4:	a8 0e       	add	r10, r24
    26c6:	b1 1c       	adc	r11, r1
    26c8:	0f 2e       	mov	r0, r31
    26ca:	f1 e4       	ldi	r31, 0x41	; 65
    26cc:	9f 2e       	mov	r9, r31
    26ce:	f0 2d       	mov	r31, r0
    26d0:	f8 01       	movw	r30, r16
    26d2:	61 91       	ld	r22, Z+
    26d4:	8f 01       	movw	r16, r30
    26d6:	2a e0       	ldi	r18, 0x0A	; 10
    26d8:	49 2d       	mov	r20, r9
    26da:	86 e4       	ldi	r24, 0x46	; 70
    26dc:	93 e0       	ldi	r25, 0x03	; 3
    26de:	0e 94 c8 06 	call	0xd90	; 0xd90 <_ZN7Display9draw_ASCIEhhh>
    26e2:	f6 e0       	ldi	r31, 0x06	; 6
    26e4:	9f 0e       	add	r9, r31
    26e6:	0a 15       	cp	r16, r10
    26e8:	1b 05       	cpc	r17, r11
    26ea:	91 f7       	brne	.-28     	; 0x26d0 <_Z15anzeige_kompassd+0xf4>
	//Anzeige der Temperatur
	buffersize=sprintf(buffer,"%.1f C",(double)Baro.Tempera);
    26ec:	e3 e3       	ldi	r30, 0x33	; 51
    26ee:	f3 e0       	ldi	r31, 0x03	; 3
    26f0:	83 81       	ldd	r24, Z+3	; 0x03
    26f2:	8f 93       	push	r24
    26f4:	82 81       	ldd	r24, Z+2	; 0x02
    26f6:	8f 93       	push	r24
    26f8:	81 81       	ldd	r24, Z+1	; 0x01
    26fa:	8f 93       	push	r24
    26fc:	80 81       	ld	r24, Z
    26fe:	8f 93       	push	r24
    2700:	89 e1       	ldi	r24, 0x19	; 25
    2702:	92 e0       	ldi	r25, 0x02	; 2
    2704:	9f 93       	push	r25
    2706:	8f 93       	push	r24
    2708:	ce 01       	movw	r24, r28
    270a:	01 96       	adiw	r24, 0x01	; 1
    270c:	9f 93       	push	r25
    270e:	8f 93       	push	r24
    2710:	0e 94 b2 2f 	call	0x5f64	; 0x5f64 <sprintf>
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],65+i*charsize,5*charhighte);}
    2714:	0f b6       	in	r0, 0x3f	; 63
    2716:	f8 94       	cli
    2718:	de bf       	out	0x3e, r29	; 62
    271a:	0f be       	out	0x3f, r0	; 63
    271c:	cd bf       	out	0x3d, r28	; 61
    271e:	88 23       	and	r24, r24
    2720:	f1 f0       	breq	.+60     	; 0x275e <_Z15anzeige_kompassd+0x182>
    2722:	8e 01       	movw	r16, r28
    2724:	0f 5f       	subi	r16, 0xFF	; 255
    2726:	1f 4f       	sbci	r17, 0xFF	; 255
    2728:	81 50       	subi	r24, 0x01	; 1
    272a:	68 94       	set
    272c:	aa 24       	eor	r10, r10
    272e:	a1 f8       	bld	r10, 1
    2730:	b1 2c       	mov	r11, r1
    2732:	ac 0e       	add	r10, r28
    2734:	bd 1e       	adc	r11, r29
    2736:	a8 0e       	add	r10, r24
    2738:	b1 1c       	adc	r11, r1
    273a:	0f 2e       	mov	r0, r31
    273c:	f1 e4       	ldi	r31, 0x41	; 65
    273e:	9f 2e       	mov	r9, r31
    2740:	f0 2d       	mov	r31, r0
    2742:	f8 01       	movw	r30, r16
    2744:	61 91       	ld	r22, Z+
    2746:	8f 01       	movw	r16, r30
    2748:	28 e2       	ldi	r18, 0x28	; 40
    274a:	49 2d       	mov	r20, r9
    274c:	86 e4       	ldi	r24, 0x46	; 70
    274e:	93 e0       	ldi	r25, 0x03	; 3
    2750:	0e 94 c8 06 	call	0xd90	; 0xd90 <_ZN7Display9draw_ASCIEhhh>
    2754:	f6 e0       	ldi	r31, 0x06	; 6
    2756:	9f 0e       	add	r9, r31
    2758:	0a 15       	cp	r16, r10
    275a:	1b 05       	cpc	r17, r11
    275c:	91 f7       	brne	.-28     	; 0x2742 <_Z15anzeige_kompassd+0x166>
	//winkel als Zahl ausgeben
	buffersize=sprintf(buffer,"angle=%.0f",winkel);
    275e:	ff 92       	push	r15
    2760:	ef 92       	push	r14
    2762:	df 92       	push	r13
    2764:	cf 92       	push	r12
    2766:	84 e8       	ldi	r24, 0x84	; 132
    2768:	92 e0       	ldi	r25, 0x02	; 2
    276a:	9f 93       	push	r25
    276c:	8f 93       	push	r24
    276e:	ce 01       	movw	r24, r28
    2770:	01 96       	adiw	r24, 0x01	; 1
    2772:	9f 93       	push	r25
    2774:	8f 93       	push	r24
    2776:	0e 94 b2 2f 	call	0x5f64	; 0x5f64 <sprintf>
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],65+i*charsize,6*charhighte);}
    277a:	0f b6       	in	r0, 0x3f	; 63
    277c:	f8 94       	cli
    277e:	de bf       	out	0x3e, r29	; 62
    2780:	0f be       	out	0x3f, r0	; 63
    2782:	cd bf       	out	0x3d, r28	; 61
    2784:	88 23       	and	r24, r24
    2786:	f1 f0       	breq	.+60     	; 0x27c4 <_Z15anzeige_kompassd+0x1e8>
    2788:	8e 01       	movw	r16, r28
    278a:	0f 5f       	subi	r16, 0xFF	; 255
    278c:	1f 4f       	sbci	r17, 0xFF	; 255
    278e:	81 50       	subi	r24, 0x01	; 1
    2790:	68 94       	set
    2792:	aa 24       	eor	r10, r10
    2794:	a1 f8       	bld	r10, 1
    2796:	b1 2c       	mov	r11, r1
    2798:	ac 0e       	add	r10, r28
    279a:	bd 1e       	adc	r11, r29
    279c:	a8 0e       	add	r10, r24
    279e:	b1 1c       	adc	r11, r1
    27a0:	0f 2e       	mov	r0, r31
    27a2:	f1 e4       	ldi	r31, 0x41	; 65
    27a4:	9f 2e       	mov	r9, r31
    27a6:	f0 2d       	mov	r31, r0
    27a8:	f8 01       	movw	r30, r16
    27aa:	61 91       	ld	r22, Z+
    27ac:	8f 01       	movw	r16, r30
    27ae:	20 e3       	ldi	r18, 0x30	; 48
    27b0:	49 2d       	mov	r20, r9
    27b2:	86 e4       	ldi	r24, 0x46	; 70
    27b4:	93 e0       	ldi	r25, 0x03	; 3
    27b6:	0e 94 c8 06 	call	0xd90	; 0xd90 <_ZN7Display9draw_ASCIEhhh>
    27ba:	f6 e0       	ldi	r31, 0x06	; 6
    27bc:	9f 0e       	add	r9, r31
    27be:	0a 15       	cp	r16, r10
    27c0:	1b 05       	cpc	r17, r11
    27c2:	91 f7       	brne	.-28     	; 0x27a8 <_Z15anzeige_kompassd+0x1cc>
	//dreieck als Zeiger
	anzeige_nadel(31,31,winkel);
    27c4:	2c 2d       	mov	r18, r12
    27c6:	3d 2d       	mov	r19, r13
    27c8:	4e 2d       	mov	r20, r14
    27ca:	5f 2d       	mov	r21, r15
    27cc:	6f e1       	ldi	r22, 0x1F	; 31
    27ce:	8f e1       	ldi	r24, 0x1F	; 31
    27d0:	d7 d8       	rcall	.-3666   	; 0x1980 <_Z13anzeige_nadelhhf>
	//Richtung ausgeben
	anzeige_richtung(winkel);	
    27d2:	6c 2d       	mov	r22, r12
    27d4:	7d 2d       	mov	r23, r13
    27d6:	8e 2d       	mov	r24, r14
    27d8:	9f 2d       	mov	r25, r15
    27da:	20 d8       	rcall	.-4032   	; 0x181c <_Z16anzeige_richtungf>
}
    27dc:	64 96       	adiw	r28, 0x14	; 20
    27de:	0f b6       	in	r0, 0x3f	; 63
    27e0:	f8 94       	cli
    27e2:	de bf       	out	0x3e, r29	; 62
    27e4:	0f be       	out	0x3f, r0	; 63
    27e6:	cd bf       	out	0x3d, r28	; 61
    27e8:	df 91       	pop	r29
    27ea:	cf 91       	pop	r28
    27ec:	1f 91       	pop	r17
    27ee:	0f 91       	pop	r16
    27f0:	ff 90       	pop	r15
    27f2:	ef 90       	pop	r14
    27f4:	df 90       	pop	r13
    27f6:	cf 90       	pop	r12
    27f8:	bf 90       	pop	r11
    27fa:	af 90       	pop	r10
    27fc:	9f 90       	pop	r9
    27fe:	08 95       	ret

00002800 <_Z10timerseitev>:

void timerseite(){
    2800:	af 92       	push	r10
    2802:	bf 92       	push	r11
    2804:	df 92       	push	r13
    2806:	ef 92       	push	r14
    2808:	0f 93       	push	r16
    280a:	1f 93       	push	r17
    280c:	cf 93       	push	r28
    280e:	df 93       	push	r29
    2810:	cd b7       	in	r28, 0x3d	; 61
    2812:	de b7       	in	r29, 0x3e	; 62
    2814:	64 97       	sbiw	r28, 0x14	; 20
    2816:	0f b6       	in	r0, 0x3f	; 63
    2818:	f8 94       	cli
    281a:	de bf       	out	0x3e, r29	; 62
    281c:	0f be       	out	0x3f, r0	; 63
    281e:	cd bf       	out	0x3d, r28	; 61
	char buffer[20];
	uint8_t buffersize=0;
	oled.clearFrame();
    2820:	86 e4       	ldi	r24, 0x46	; 70
    2822:	93 e0       	ldi	r25, 0x03	; 3
    2824:	0e 94 05 04 	call	0x80a	; 0x80a <_ZN7Display10clearFrameEv>
	buffersize=sprintf(buffer,"Timer: ");
    2828:	88 e0       	ldi	r24, 0x08	; 8
    282a:	ef e8       	ldi	r30, 0x8F	; 143
    282c:	f2 e0       	ldi	r31, 0x02	; 2
    282e:	8e 01       	movw	r16, r28
    2830:	0f 5f       	subi	r16, 0xFF	; 255
    2832:	1f 4f       	sbci	r17, 0xFF	; 255
    2834:	d8 01       	movw	r26, r16
    2836:	01 90       	ld	r0, Z+
    2838:	0d 92       	st	X+, r0
    283a:	8a 95       	dec	r24
    283c:	e1 f7       	brne	.-8      	; 0x2836 <_Z10timerseitev+0x36>
    283e:	d0 2e       	mov	r13, r16
    2840:	e1 2e       	mov	r14, r17
    2842:	58 01       	movw	r10, r16
    2844:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,0*charhighte);}
    2846:	f5 01       	movw	r30, r10
    2848:	61 91       	ld	r22, Z+
    284a:	5f 01       	movw	r10, r30
    284c:	20 e0       	ldi	r18, 0x00	; 0
    284e:	41 2f       	mov	r20, r17
    2850:	86 e4       	ldi	r24, 0x46	; 70
    2852:	93 e0       	ldi	r25, 0x03	; 3
    2854:	0e 94 c8 06 	call	0xd90	; 0xd90 <_ZN7Display9draw_ASCIEhhh>
    2858:	1a 5f       	subi	r17, 0xFA	; 250
    285a:	1a 32       	cpi	r17, 0x2A	; 42
    285c:	a1 f7       	brne	.-24     	; 0x2846 <_Z10timerseitev+0x46>
	if (pos!=0)
    285e:	60 91 28 03 	lds	r22, 0x0328
    2862:	66 23       	and	r22, r22
    2864:	39 f0       	breq	.+14     	; 0x2874 <_Z10timerseitev+0x74>
	{
		oled.draw_ASCI(pos+'0',buffersize*charsize,0*charhighte);
    2866:	60 5d       	subi	r22, 0xD0	; 208
    2868:	20 e0       	ldi	r18, 0x00	; 0
    286a:	4a e2       	ldi	r20, 0x2A	; 42
    286c:	86 e4       	ldi	r24, 0x46	; 70
    286e:	93 e0       	ldi	r25, 0x03	; 3
    2870:	0e 94 c8 06 	call	0xd90	; 0xd90 <_ZN7Display9draw_ASCIEhhh>
	}
		
	buffer[0]=zaehler.Stunden/10;
    2874:	90 91 72 07 	lds	r25, 0x0772
    2878:	8d ec       	ldi	r24, 0xCD	; 205
    287a:	98 9f       	mul	r25, r24
    287c:	21 2d       	mov	r18, r1
    287e:	11 24       	eor	r1, r1
    2880:	26 95       	lsr	r18
    2882:	26 95       	lsr	r18
    2884:	26 95       	lsr	r18
    2886:	29 83       	std	Y+1, r18	; 0x01
	buffer[1]=zaehler.Stunden%10;
    2888:	22 0f       	add	r18, r18
    288a:	32 2f       	mov	r19, r18
    288c:	33 0f       	add	r19, r19
    288e:	33 0f       	add	r19, r19
    2890:	23 0f       	add	r18, r19
    2892:	92 1b       	sub	r25, r18
    2894:	9a 83       	std	Y+2, r25	; 0x02
	buffer[2]=':';
    2896:	9a e3       	ldi	r25, 0x3A	; 58
    2898:	9b 83       	std	Y+3, r25	; 0x03
	buffer[3]=zaehler.Minuten/10;
    289a:	20 91 73 07 	lds	r18, 0x0773
    289e:	28 9f       	mul	r18, r24
    28a0:	31 2d       	mov	r19, r1
    28a2:	11 24       	eor	r1, r1
    28a4:	36 95       	lsr	r19
    28a6:	36 95       	lsr	r19
    28a8:	36 95       	lsr	r19
    28aa:	3c 83       	std	Y+4, r19	; 0x04
	buffer[4]=zaehler.Minuten%10;
    28ac:	33 0f       	add	r19, r19
    28ae:	43 2f       	mov	r20, r19
    28b0:	44 0f       	add	r20, r20
    28b2:	44 0f       	add	r20, r20
    28b4:	34 0f       	add	r19, r20
    28b6:	23 1b       	sub	r18, r19
    28b8:	2d 83       	std	Y+5, r18	; 0x05
	buffer[5]=':';
    28ba:	9e 83       	std	Y+6, r25	; 0x06
	buffer[6]=zaehler.Sekunden/10;
    28bc:	90 91 74 07 	lds	r25, 0x0774
    28c0:	98 9f       	mul	r25, r24
    28c2:	81 2d       	mov	r24, r1
    28c4:	11 24       	eor	r1, r1
    28c6:	86 95       	lsr	r24
    28c8:	86 95       	lsr	r24
    28ca:	86 95       	lsr	r24
    28cc:	8f 83       	std	Y+7, r24	; 0x07
	buffer[7]=zaehler.Sekunden%10;
    28ce:	88 0f       	add	r24, r24
    28d0:	28 2f       	mov	r18, r24
    28d2:	22 0f       	add	r18, r18
    28d4:	22 0f       	add	r18, r18
    28d6:	82 0f       	add	r24, r18
    28d8:	98 1b       	sub	r25, r24
    28da:	98 87       	std	Y+8, r25	; 0x08
    28dc:	ad 2c       	mov	r10, r13
    28de:	be 2c       	mov	r11, r14
    28e0:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<bitsderrtc;i++){
		if (buffer[i]==':')
    28e2:	f5 01       	movw	r30, r10
    28e4:	61 91       	ld	r22, Z+
    28e6:	5f 01       	movw	r10, r30
    28e8:	6a 33       	cpi	r22, 0x3A	; 58
    28ea:	39 f4       	brne	.+14     	; 0x28fa <_Z10timerseitev+0xfa>
		{
			oled.draw_ASCI(buffer[i],i*numbersmalsize,2.5*charhighte);
    28ec:	24 e1       	ldi	r18, 0x14	; 20
    28ee:	41 2f       	mov	r20, r17
    28f0:	86 e4       	ldi	r24, 0x46	; 70
    28f2:	93 e0       	ldi	r25, 0x03	; 3
    28f4:	0e 94 c8 06 	call	0xd90	; 0xd90 <_ZN7Display9draw_ASCIEhhh>
    28f8:	06 c0       	rjmp	.+12     	; 0x2906 <_Z10timerseitev+0x106>
		}
		else{
			oled.draw_number16x16(buffer[i],i*numbersmalsize,2*charhighte);
    28fa:	20 e1       	ldi	r18, 0x10	; 16
    28fc:	41 2f       	mov	r20, r17
    28fe:	86 e4       	ldi	r24, 0x46	; 70
    2900:	93 e0       	ldi	r25, 0x03	; 3
    2902:	0e 94 31 07 	call	0xe62	; 0xe62 <_ZN7Display16draw_number16x16Ehhh>
    2906:	10 5f       	subi	r17, 0xF0	; 240
	buffer[3]=zaehler.Minuten/10;
	buffer[4]=zaehler.Minuten%10;
	buffer[5]=':';
	buffer[6]=zaehler.Sekunden/10;
	buffer[7]=zaehler.Sekunden%10;
	for(uint8_t i=0;i<bitsderrtc;i++){
    2908:	10 38       	cpi	r17, 0x80	; 128
    290a:	59 f7       	brne	.-42     	; 0x28e2 <_Z10timerseitev+0xe2>
		}
		else{
			oled.draw_number16x16(buffer[i],i*numbersmalsize,2*charhighte);
		}
	}
}
    290c:	64 96       	adiw	r28, 0x14	; 20
    290e:	0f b6       	in	r0, 0x3f	; 63
    2910:	f8 94       	cli
    2912:	de bf       	out	0x3e, r29	; 62
    2914:	0f be       	out	0x3f, r0	; 63
    2916:	cd bf       	out	0x3d, r28	; 61
    2918:	df 91       	pop	r29
    291a:	cf 91       	pop	r28
    291c:	1f 91       	pop	r17
    291e:	0f 91       	pop	r16
    2920:	ef 90       	pop	r14
    2922:	df 90       	pop	r13
    2924:	bf 90       	pop	r11
    2926:	af 90       	pop	r10
    2928:	08 95       	ret

0000292a <_Z13Stoppuhrseitev>:

void Stoppuhrseite(){
    292a:	af 92       	push	r10
    292c:	bf 92       	push	r11
    292e:	df 92       	push	r13
    2930:	ef 92       	push	r14
    2932:	0f 93       	push	r16
    2934:	1f 93       	push	r17
    2936:	cf 93       	push	r28
    2938:	df 93       	push	r29
    293a:	cd b7       	in	r28, 0x3d	; 61
    293c:	de b7       	in	r29, 0x3e	; 62
    293e:	64 97       	sbiw	r28, 0x14	; 20
    2940:	0f b6       	in	r0, 0x3f	; 63
    2942:	f8 94       	cli
    2944:	de bf       	out	0x3e, r29	; 62
    2946:	0f be       	out	0x3f, r0	; 63
    2948:	cd bf       	out	0x3d, r28	; 61
	char buffer[20];
	uint8_t buffersize=0;
	oled.clearFrame();
    294a:	86 e4       	ldi	r24, 0x46	; 70
    294c:	93 e0       	ldi	r25, 0x03	; 3
    294e:	0e 94 05 04 	call	0x80a	; 0x80a <_ZN7Display10clearFrameEv>
	buffersize=sprintf(buffer,"Stoppuhr: ");
    2952:	8b e0       	ldi	r24, 0x0B	; 11
    2954:	e7 e9       	ldi	r30, 0x97	; 151
    2956:	f2 e0       	ldi	r31, 0x02	; 2
    2958:	8e 01       	movw	r16, r28
    295a:	0f 5f       	subi	r16, 0xFF	; 255
    295c:	1f 4f       	sbci	r17, 0xFF	; 255
    295e:	d8 01       	movw	r26, r16
    2960:	01 90       	ld	r0, Z+
    2962:	0d 92       	st	X+, r0
    2964:	8a 95       	dec	r24
    2966:	e1 f7       	brne	.-8      	; 0x2960 <_Z13Stoppuhrseitev+0x36>
    2968:	d0 2e       	mov	r13, r16
    296a:	e1 2e       	mov	r14, r17
    296c:	58 01       	movw	r10, r16
    296e:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,0*charhighte);}
    2970:	f5 01       	movw	r30, r10
    2972:	61 91       	ld	r22, Z+
    2974:	5f 01       	movw	r10, r30
    2976:	20 e0       	ldi	r18, 0x00	; 0
    2978:	41 2f       	mov	r20, r17
    297a:	86 e4       	ldi	r24, 0x46	; 70
    297c:	93 e0       	ldi	r25, 0x03	; 3
    297e:	0e 94 c8 06 	call	0xd90	; 0xd90 <_ZN7Display9draw_ASCIEhhh>
    2982:	1a 5f       	subi	r17, 0xFA	; 250
    2984:	1c 33       	cpi	r17, 0x3C	; 60
    2986:	a1 f7       	brne	.-24     	; 0x2970 <_Z13Stoppuhrseitev+0x46>
	
	buffer[0]=stoppuhr.Stunden/10;
    2988:	90 91 57 07 	lds	r25, 0x0757
    298c:	8d ec       	ldi	r24, 0xCD	; 205
    298e:	98 9f       	mul	r25, r24
    2990:	21 2d       	mov	r18, r1
    2992:	11 24       	eor	r1, r1
    2994:	26 95       	lsr	r18
    2996:	26 95       	lsr	r18
    2998:	26 95       	lsr	r18
    299a:	29 83       	std	Y+1, r18	; 0x01
	buffer[1]=stoppuhr.Stunden%10;
    299c:	22 0f       	add	r18, r18
    299e:	32 2f       	mov	r19, r18
    29a0:	33 0f       	add	r19, r19
    29a2:	33 0f       	add	r19, r19
    29a4:	23 0f       	add	r18, r19
    29a6:	92 1b       	sub	r25, r18
    29a8:	9a 83       	std	Y+2, r25	; 0x02
	buffer[2]=':';
    29aa:	9a e3       	ldi	r25, 0x3A	; 58
    29ac:	9b 83       	std	Y+3, r25	; 0x03
	buffer[3]=stoppuhr.Minuten/10;
    29ae:	20 91 58 07 	lds	r18, 0x0758
    29b2:	28 9f       	mul	r18, r24
    29b4:	31 2d       	mov	r19, r1
    29b6:	11 24       	eor	r1, r1
    29b8:	36 95       	lsr	r19
    29ba:	36 95       	lsr	r19
    29bc:	36 95       	lsr	r19
    29be:	3c 83       	std	Y+4, r19	; 0x04
	buffer[4]=stoppuhr.Minuten%10;
    29c0:	33 0f       	add	r19, r19
    29c2:	43 2f       	mov	r20, r19
    29c4:	44 0f       	add	r20, r20
    29c6:	44 0f       	add	r20, r20
    29c8:	34 0f       	add	r19, r20
    29ca:	23 1b       	sub	r18, r19
    29cc:	2d 83       	std	Y+5, r18	; 0x05
	buffer[5]=':';
    29ce:	9e 83       	std	Y+6, r25	; 0x06
	buffer[6]=stoppuhr.Sekunden/10;
    29d0:	90 91 59 07 	lds	r25, 0x0759
    29d4:	98 9f       	mul	r25, r24
    29d6:	81 2d       	mov	r24, r1
    29d8:	11 24       	eor	r1, r1
    29da:	86 95       	lsr	r24
    29dc:	86 95       	lsr	r24
    29de:	86 95       	lsr	r24
    29e0:	8f 83       	std	Y+7, r24	; 0x07
	buffer[7]=stoppuhr.Sekunden%10;
    29e2:	88 0f       	add	r24, r24
    29e4:	28 2f       	mov	r18, r24
    29e6:	22 0f       	add	r18, r18
    29e8:	22 0f       	add	r18, r18
    29ea:	82 0f       	add	r24, r18
    29ec:	98 1b       	sub	r25, r24
    29ee:	98 87       	std	Y+8, r25	; 0x08
    29f0:	ad 2c       	mov	r10, r13
    29f2:	be 2c       	mov	r11, r14
    29f4:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<bitsderrtc;i++){
		if (buffer[i]==':')
    29f6:	f5 01       	movw	r30, r10
    29f8:	61 91       	ld	r22, Z+
    29fa:	5f 01       	movw	r10, r30
    29fc:	6a 33       	cpi	r22, 0x3A	; 58
    29fe:	39 f4       	brne	.+14     	; 0x2a0e <_Z13Stoppuhrseitev+0xe4>
		{
			oled.draw_ASCI(buffer[i],i*numbersmalsize,2.5*charhighte);
    2a00:	24 e1       	ldi	r18, 0x14	; 20
    2a02:	41 2f       	mov	r20, r17
    2a04:	86 e4       	ldi	r24, 0x46	; 70
    2a06:	93 e0       	ldi	r25, 0x03	; 3
    2a08:	0e 94 c8 06 	call	0xd90	; 0xd90 <_ZN7Display9draw_ASCIEhhh>
    2a0c:	06 c0       	rjmp	.+12     	; 0x2a1a <_Z13Stoppuhrseitev+0xf0>
		}
		else{
			oled.draw_number16x16(buffer[i],i*numbersmalsize,2*charhighte);
    2a0e:	20 e1       	ldi	r18, 0x10	; 16
    2a10:	41 2f       	mov	r20, r17
    2a12:	86 e4       	ldi	r24, 0x46	; 70
    2a14:	93 e0       	ldi	r25, 0x03	; 3
    2a16:	0e 94 31 07 	call	0xe62	; 0xe62 <_ZN7Display16draw_number16x16Ehhh>
    2a1a:	10 5f       	subi	r17, 0xF0	; 240
	buffer[3]=stoppuhr.Minuten/10;
	buffer[4]=stoppuhr.Minuten%10;
	buffer[5]=':';
	buffer[6]=stoppuhr.Sekunden/10;
	buffer[7]=stoppuhr.Sekunden%10;
	for(uint8_t i=0;i<bitsderrtc;i++){
    2a1c:	10 38       	cpi	r17, 0x80	; 128
    2a1e:	59 f7       	brne	.-42     	; 0x29f6 <_Z13Stoppuhrseitev+0xcc>
		}
		else{
			oled.draw_number16x16(buffer[i],i*numbersmalsize,2*charhighte);
		}
	}
}
    2a20:	64 96       	adiw	r28, 0x14	; 20
    2a22:	0f b6       	in	r0, 0x3f	; 63
    2a24:	f8 94       	cli
    2a26:	de bf       	out	0x3e, r29	; 62
    2a28:	0f be       	out	0x3f, r0	; 63
    2a2a:	cd bf       	out	0x3d, r28	; 61
    2a2c:	df 91       	pop	r29
    2a2e:	cf 91       	pop	r28
    2a30:	1f 91       	pop	r17
    2a32:	0f 91       	pop	r16
    2a34:	ef 90       	pop	r14
    2a36:	df 90       	pop	r13
    2a38:	bf 90       	pop	r11
    2a3a:	af 90       	pop	r10
    2a3c:	08 95       	ret

00002a3e <_Z14Pressuresensorv>:

void Pressuresensor(){
    2a3e:	bf 92       	push	r11
    2a40:	cf 92       	push	r12
    2a42:	df 92       	push	r13
    2a44:	ef 92       	push	r14
    2a46:	ff 92       	push	r15
    2a48:	0f 93       	push	r16
    2a4a:	1f 93       	push	r17
    2a4c:	cf 93       	push	r28
    2a4e:	df 93       	push	r29
    2a50:	cd b7       	in	r28, 0x3d	; 61
    2a52:	de b7       	in	r29, 0x3e	; 62
    2a54:	64 97       	sbiw	r28, 0x14	; 20
    2a56:	0f b6       	in	r0, 0x3f	; 63
    2a58:	f8 94       	cli
    2a5a:	de bf       	out	0x3e, r29	; 62
    2a5c:	0f be       	out	0x3f, r0	; 63
    2a5e:	cd bf       	out	0x3d, r28	; 61
	Baro.READ_Pressure_once();
    2a60:	8f e2       	ldi	r24, 0x2F	; 47
    2a62:	93 e0       	ldi	r25, 0x03	; 3
    2a64:	0e 94 12 25 	call	0x4a24	; 0x4a24 <_ZN8Pressure18READ_Pressure_onceEv>
	Baro.READ_Temperature();
    2a68:	8f e2       	ldi	r24, 0x2F	; 47
    2a6a:	93 e0       	ldi	r25, 0x03	; 3
    2a6c:	0e 94 8a 25 	call	0x4b14	; 0x4b14 <_ZN8Pressure16READ_TemperatureEv>
	char buffer[20];
	uint8_t buffersize=0;
	oled.clearFrame();
    2a70:	86 e4       	ldi	r24, 0x46	; 70
    2a72:	93 e0       	ldi	r25, 0x03	; 3
    2a74:	0e 94 05 04 	call	0x80a	; 0x80a <_ZN7Display10clearFrameEv>
	header(0);
    2a78:	80 e0       	ldi	r24, 0x00	; 0
    2a7a:	0e 94 08 0b 	call	0x1610	; 0x1610 <_Z6headerh>
	bottom(0);
    2a7e:	80 e0       	ldi	r24, 0x00	; 0
    2a80:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <_Z6bottomh>
	buffersize=sprintf(buffer,"LPS25H Daten:");
    2a84:	8e e0       	ldi	r24, 0x0E	; 14
    2a86:	e2 ea       	ldi	r30, 0xA2	; 162
    2a88:	f2 e0       	ldi	r31, 0x02	; 2
    2a8a:	8e 01       	movw	r16, r28
    2a8c:	0f 5f       	subi	r16, 0xFF	; 255
    2a8e:	1f 4f       	sbci	r17, 0xFF	; 255
    2a90:	d8 01       	movw	r26, r16
    2a92:	01 90       	ld	r0, Z+
    2a94:	0d 92       	st	X+, r0
    2a96:	8a 95       	dec	r24
    2a98:	e1 f7       	brne	.-8      	; 0x2a92 <_Z14Pressuresensorv+0x54>
    2a9a:	c0 2e       	mov	r12, r16
    2a9c:	d1 2e       	mov	r13, r17
    2a9e:	78 01       	movw	r14, r16
    2aa0:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,2*charhighte);}
    2aa2:	f7 01       	movw	r30, r14
    2aa4:	61 91       	ld	r22, Z+
    2aa6:	7f 01       	movw	r14, r30
    2aa8:	20 e1       	ldi	r18, 0x10	; 16
    2aaa:	41 2f       	mov	r20, r17
    2aac:	86 e4       	ldi	r24, 0x46	; 70
    2aae:	93 e0       	ldi	r25, 0x03	; 3
    2ab0:	0e 94 c8 06 	call	0xd90	; 0xd90 <_ZN7Display9draw_ASCIEhhh>
    2ab4:	1a 5f       	subi	r17, 0xFA	; 250
    2ab6:	1e 34       	cpi	r17, 0x4E	; 78
    2ab8:	a1 f7       	brne	.-24     	; 0x2aa2 <_Z14Pressuresensorv+0x64>
	buffersize=sprintf(buffer,"%.1f HPa",Baro.Press);
    2aba:	ef e2       	ldi	r30, 0x2F	; 47
    2abc:	f3 e0       	ldi	r31, 0x03	; 3
    2abe:	83 81       	ldd	r24, Z+3	; 0x03
    2ac0:	8f 93       	push	r24
    2ac2:	82 81       	ldd	r24, Z+2	; 0x02
    2ac4:	8f 93       	push	r24
    2ac6:	81 81       	ldd	r24, Z+1	; 0x01
    2ac8:	8f 93       	push	r24
    2aca:	80 81       	ld	r24, Z
    2acc:	8f 93       	push	r24
    2ace:	80 eb       	ldi	r24, 0xB0	; 176
    2ad0:	92 e0       	ldi	r25, 0x02	; 2
    2ad2:	9f 93       	push	r25
    2ad4:	8f 93       	push	r24
    2ad6:	ce 01       	movw	r24, r28
    2ad8:	01 96       	adiw	r24, 0x01	; 1
    2ada:	9f 93       	push	r25
    2adc:	8f 93       	push	r24
    2ade:	0e 94 b2 2f 	call	0x5f64	; 0x5f64 <sprintf>
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,3*charhighte);}
    2ae2:	0f b6       	in	r0, 0x3f	; 63
    2ae4:	f8 94       	cli
    2ae6:	de bf       	out	0x3e, r29	; 62
    2ae8:	0f be       	out	0x3f, r0	; 63
    2aea:	cd bf       	out	0x3d, r28	; 61
    2aec:	88 23       	and	r24, r24
    2aee:	d1 f0       	breq	.+52     	; 0x2b24 <_Z14Pressuresensorv+0xe6>
    2af0:	81 50       	subi	r24, 0x01	; 1
    2af2:	68 94       	set
    2af4:	ee 24       	eor	r14, r14
    2af6:	e1 f8       	bld	r14, 1
    2af8:	f1 2c       	mov	r15, r1
    2afa:	ec 0e       	add	r14, r28
    2afc:	fd 1e       	adc	r15, r29
    2afe:	e8 0e       	add	r14, r24
    2b00:	f1 1c       	adc	r15, r1
    2b02:	0c 2d       	mov	r16, r12
    2b04:	1d 2d       	mov	r17, r13
    2b06:	b1 2c       	mov	r11, r1
    2b08:	f8 01       	movw	r30, r16
    2b0a:	61 91       	ld	r22, Z+
    2b0c:	8f 01       	movw	r16, r30
    2b0e:	28 e1       	ldi	r18, 0x18	; 24
    2b10:	4b 2d       	mov	r20, r11
    2b12:	86 e4       	ldi	r24, 0x46	; 70
    2b14:	93 e0       	ldi	r25, 0x03	; 3
    2b16:	0e 94 c8 06 	call	0xd90	; 0xd90 <_ZN7Display9draw_ASCIEhhh>
    2b1a:	f6 e0       	ldi	r31, 0x06	; 6
    2b1c:	bf 0e       	add	r11, r31
    2b1e:	0e 15       	cp	r16, r14
    2b20:	1f 05       	cpc	r17, r15
    2b22:	91 f7       	brne	.-28     	; 0x2b08 <_Z14Pressuresensorv+0xca>
	buffersize=sprintf(buffer,"Hoehe: %.1f m",(double)Baro.altitude(Baro.Press));
    2b24:	40 91 2f 03 	lds	r20, 0x032F
    2b28:	50 91 30 03 	lds	r21, 0x0330
    2b2c:	60 91 31 03 	lds	r22, 0x0331
    2b30:	70 91 32 03 	lds	r23, 0x0332
    2b34:	8f e2       	ldi	r24, 0x2F	; 47
    2b36:	93 e0       	ldi	r25, 0x03	; 3
    2b38:	0e 94 fa 25 	call	0x4bf4	; 0x4bf4 <_ZN8Pressure8altitudeEd>
    2b3c:	9f 93       	push	r25
    2b3e:	8f 93       	push	r24
    2b40:	7f 93       	push	r23
    2b42:	6f 93       	push	r22
    2b44:	89 eb       	ldi	r24, 0xB9	; 185
    2b46:	92 e0       	ldi	r25, 0x02	; 2
    2b48:	9f 93       	push	r25
    2b4a:	8f 93       	push	r24
    2b4c:	ce 01       	movw	r24, r28
    2b4e:	01 96       	adiw	r24, 0x01	; 1
    2b50:	9f 93       	push	r25
    2b52:	8f 93       	push	r24
    2b54:	0e 94 b2 2f 	call	0x5f64	; 0x5f64 <sprintf>
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,4*charhighte);}
    2b58:	0f b6       	in	r0, 0x3f	; 63
    2b5a:	f8 94       	cli
    2b5c:	de bf       	out	0x3e, r29	; 62
    2b5e:	0f be       	out	0x3f, r0	; 63
    2b60:	cd bf       	out	0x3d, r28	; 61
    2b62:	88 23       	and	r24, r24
    2b64:	d1 f0       	breq	.+52     	; 0x2b9a <_Z14Pressuresensorv+0x15c>
    2b66:	81 50       	subi	r24, 0x01	; 1
    2b68:	68 94       	set
    2b6a:	ee 24       	eor	r14, r14
    2b6c:	e1 f8       	bld	r14, 1
    2b6e:	f1 2c       	mov	r15, r1
    2b70:	ec 0e       	add	r14, r28
    2b72:	fd 1e       	adc	r15, r29
    2b74:	e8 0e       	add	r14, r24
    2b76:	f1 1c       	adc	r15, r1
    2b78:	0c 2d       	mov	r16, r12
    2b7a:	1d 2d       	mov	r17, r13
    2b7c:	b1 2c       	mov	r11, r1
    2b7e:	f8 01       	movw	r30, r16
    2b80:	61 91       	ld	r22, Z+
    2b82:	8f 01       	movw	r16, r30
    2b84:	20 e2       	ldi	r18, 0x20	; 32
    2b86:	4b 2d       	mov	r20, r11
    2b88:	86 e4       	ldi	r24, 0x46	; 70
    2b8a:	93 e0       	ldi	r25, 0x03	; 3
    2b8c:	0e 94 c8 06 	call	0xd90	; 0xd90 <_ZN7Display9draw_ASCIEhhh>
    2b90:	f6 e0       	ldi	r31, 0x06	; 6
    2b92:	bf 0e       	add	r11, r31
    2b94:	0e 15       	cp	r16, r14
    2b96:	1f 05       	cpc	r17, r15
    2b98:	91 f7       	brne	.-28     	; 0x2b7e <_Z14Pressuresensorv+0x140>
	buffersize=sprintf(buffer,"%.1f C",(double)Baro.Tempera);
    2b9a:	e3 e3       	ldi	r30, 0x33	; 51
    2b9c:	f3 e0       	ldi	r31, 0x03	; 3
    2b9e:	83 81       	ldd	r24, Z+3	; 0x03
    2ba0:	8f 93       	push	r24
    2ba2:	82 81       	ldd	r24, Z+2	; 0x02
    2ba4:	8f 93       	push	r24
    2ba6:	81 81       	ldd	r24, Z+1	; 0x01
    2ba8:	8f 93       	push	r24
    2baa:	80 81       	ld	r24, Z
    2bac:	8f 93       	push	r24
    2bae:	89 e1       	ldi	r24, 0x19	; 25
    2bb0:	92 e0       	ldi	r25, 0x02	; 2
    2bb2:	9f 93       	push	r25
    2bb4:	8f 93       	push	r24
    2bb6:	ce 01       	movw	r24, r28
    2bb8:	01 96       	adiw	r24, 0x01	; 1
    2bba:	9f 93       	push	r25
    2bbc:	8f 93       	push	r24
    2bbe:	0e 94 b2 2f 	call	0x5f64	; 0x5f64 <sprintf>
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,6*charhighte);}
    2bc2:	0f b6       	in	r0, 0x3f	; 63
    2bc4:	f8 94       	cli
    2bc6:	de bf       	out	0x3e, r29	; 62
    2bc8:	0f be       	out	0x3f, r0	; 63
    2bca:	cd bf       	out	0x3d, r28	; 61
    2bcc:	88 23       	and	r24, r24
    2bce:	d1 f0       	breq	.+52     	; 0x2c04 <_Z14Pressuresensorv+0x1c6>
    2bd0:	81 50       	subi	r24, 0x01	; 1
    2bd2:	68 94       	set
    2bd4:	ee 24       	eor	r14, r14
    2bd6:	e1 f8       	bld	r14, 1
    2bd8:	f1 2c       	mov	r15, r1
    2bda:	ec 0e       	add	r14, r28
    2bdc:	fd 1e       	adc	r15, r29
    2bde:	e8 0e       	add	r14, r24
    2be0:	f1 1c       	adc	r15, r1
    2be2:	0c 2d       	mov	r16, r12
    2be4:	1d 2d       	mov	r17, r13
    2be6:	d1 2c       	mov	r13, r1
    2be8:	f8 01       	movw	r30, r16
    2bea:	61 91       	ld	r22, Z+
    2bec:	8f 01       	movw	r16, r30
    2bee:	20 e3       	ldi	r18, 0x30	; 48
    2bf0:	4d 2d       	mov	r20, r13
    2bf2:	86 e4       	ldi	r24, 0x46	; 70
    2bf4:	93 e0       	ldi	r25, 0x03	; 3
    2bf6:	0e 94 c8 06 	call	0xd90	; 0xd90 <_ZN7Display9draw_ASCIEhhh>
    2bfa:	f6 e0       	ldi	r31, 0x06	; 6
    2bfc:	df 0e       	add	r13, r31
    2bfe:	0e 15       	cp	r16, r14
    2c00:	1f 05       	cpc	r17, r15
    2c02:	91 f7       	brne	.-28     	; 0x2be8 <_Z14Pressuresensorv+0x1aa>
	//buffersize=sprintf(buffer,"%i",Baro.Wertedruck[1]);
	//for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,4*charhighte);}
	//buffersize=sprintf(buffer,"%i",Baro.Wertedruck[2]);
	//for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,5*charhighte);}
}
    2c04:	64 96       	adiw	r28, 0x14	; 20
    2c06:	0f b6       	in	r0, 0x3f	; 63
    2c08:	f8 94       	cli
    2c0a:	de bf       	out	0x3e, r29	; 62
    2c0c:	0f be       	out	0x3f, r0	; 63
    2c0e:	cd bf       	out	0x3d, r28	; 61
    2c10:	df 91       	pop	r29
    2c12:	cf 91       	pop	r28
    2c14:	1f 91       	pop	r17
    2c16:	0f 91       	pop	r16
    2c18:	ff 90       	pop	r15
    2c1a:	ef 90       	pop	r14
    2c1c:	df 90       	pop	r13
    2c1e:	cf 90       	pop	r12
    2c20:	bf 90       	pop	r11
    2c22:	08 95       	ret

00002c24 <_Z13uhreinstellenv>:

void uhreinstellen(){
    2c24:	2f 92       	push	r2
    2c26:	3f 92       	push	r3
    2c28:	4f 92       	push	r4
    2c2a:	5f 92       	push	r5
    2c2c:	6f 92       	push	r6
    2c2e:	7f 92       	push	r7
    2c30:	8f 92       	push	r8
    2c32:	9f 92       	push	r9
    2c34:	af 92       	push	r10
    2c36:	bf 92       	push	r11
    2c38:	cf 92       	push	r12
    2c3a:	df 92       	push	r13
    2c3c:	ef 92       	push	r14
    2c3e:	ff 92       	push	r15
    2c40:	0f 93       	push	r16
    2c42:	1f 93       	push	r17
    2c44:	cf 93       	push	r28
    2c46:	df 93       	push	r29
    2c48:	cd b7       	in	r28, 0x3d	; 61
    2c4a:	de b7       	in	r29, 0x3e	; 62
    2c4c:	66 97       	sbiw	r28, 0x16	; 22
    2c4e:	0f b6       	in	r0, 0x3f	; 63
    2c50:	f8 94       	cli
    2c52:	de bf       	out	0x3e, r29	; 62
    2c54:	0f be       	out	0x3f, r0	; 63
    2c56:	cd bf       	out	0x3d, r28	; 61
	rtc.RTCstop();
    2c58:	8d e7       	ldi	r24, 0x7D	; 125
    2c5a:	97 e0       	ldi	r25, 0x07	; 7
    2c5c:	0e 94 6c 27 	call	0x4ed8	; 0x4ed8 <_ZN3RTC7RTCstopEv>
	
	oled.clearFrame();
    2c60:	86 e4       	ldi	r24, 0x46	; 70
    2c62:	93 e0       	ldi	r25, 0x03	; 3
    2c64:	0e 94 05 04 	call	0x80a	; 0x80a <_ZN7Display10clearFrameEv>
	char buffer[20];
	uint8_t buffersize;
	uint8_t pos=0;
    2c68:	91 2c       	mov	r9, r1
	while(pos<11){
		buffersize=sprintf(buffer,"Uhreinstellung");
    2c6a:	0f 2e       	mov	r0, r31
    2c6c:	ff e0       	ldi	r31, 0x0F	; 15
    2c6e:	6f 2e       	mov	r6, r31
    2c70:	f0 2d       	mov	r31, r0
    2c72:	ce 01       	movw	r24, r28
    2c74:	01 96       	adiw	r24, 0x01	; 1
    2c76:	7c 01       	movw	r14, r24
    2c78:	78 2e       	mov	r7, r24
    2c7a:	8f 2c       	mov	r8, r15
    2c7c:	b1 2c       	mov	r11, r1
		for(uint8_t i = 0; i<buffersize;i++){
			oled.draw_ASCI(buffer[i],charsize*i,0);
		}
		buffersize=sprintf(buffer,"--------------");
    2c7e:	8d 8b       	std	Y+21, r24	; 0x15
    2c80:	fe 8a       	std	Y+22, r15	; 0x16
		for(uint8_t i = 0; i<buffersize;i++){
			oled.draw_ASCI(buffer[i],charsize*i,8);
		}
		buffer[0]=rtc.Stunden/10;
    2c82:	0f 2e       	mov	r0, r31
    2c84:	fd ec       	ldi	r31, 0xCD	; 205
    2c86:	af 2e       	mov	r10, r31
    2c88:	f0 2d       	mov	r31, r0
		buffer[1]=rtc.Stunden%10;
		buffer[2]=':';
		buffer[3]=rtc.Minuten/10;
		buffer[4]=rtc.Minuten%10;
		buffer[5]=' ';
		buffer[6]=rtc.Tag/10;
    2c8a:	0f 2e       	mov	r0, r31
    2c8c:	f1 e9       	ldi	r31, 0x91	; 145
    2c8e:	4f 2e       	mov	r4, r31
    2c90:	f7 e0       	ldi	r31, 0x07	; 7
    2c92:	5f 2e       	mov	r5, r31
    2c94:	f0 2d       	mov	r31, r0
		buffer[7]=rtc.Tag%10;
		buffer[8]='.';
		buffer[9]=rtc.Monat/10;
    2c96:	0f 2e       	mov	r0, r31
    2c98:	f3 e9       	ldi	r31, 0x93	; 147
    2c9a:	cf 2e       	mov	r12, r31
    2c9c:	f7 e0       	ldi	r31, 0x07	; 7
    2c9e:	df 2e       	mov	r13, r31
    2ca0:	f0 2d       	mov	r31, r0
	oled.clearFrame();
	char buffer[20];
	uint8_t buffersize;
	uint8_t pos=0;
	while(pos<11){
		buffersize=sprintf(buffer,"Uhreinstellung");
    2ca2:	e7 ec       	ldi	r30, 0xC7	; 199
    2ca4:	f2 e0       	ldi	r31, 0x02	; 2
    2ca6:	a7 2d       	mov	r26, r7
    2ca8:	b8 2d       	mov	r27, r8
    2caa:	86 2d       	mov	r24, r6
    2cac:	01 90       	ld	r0, Z+
    2cae:	0d 92       	st	X+, r0
    2cb0:	8a 95       	dec	r24
    2cb2:	e1 f7       	brne	.-8      	; 0x2cac <_Z13uhreinstellenv+0x88>
    2cb4:	27 2c       	mov	r2, r7
    2cb6:	38 2c       	mov	r3, r8
    2cb8:	1b 2d       	mov	r17, r11
		for(uint8_t i = 0; i<buffersize;i++){
			oled.draw_ASCI(buffer[i],charsize*i,0);
    2cba:	f1 01       	movw	r30, r2
    2cbc:	61 91       	ld	r22, Z+
    2cbe:	1f 01       	movw	r2, r30
    2cc0:	2b 2d       	mov	r18, r11
    2cc2:	41 2f       	mov	r20, r17
    2cc4:	86 e4       	ldi	r24, 0x46	; 70
    2cc6:	93 e0       	ldi	r25, 0x03	; 3
    2cc8:	0e 94 c8 06 	call	0xd90	; 0xd90 <_ZN7Display9draw_ASCIEhhh>
    2ccc:	1a 5f       	subi	r17, 0xFA	; 250
	char buffer[20];
	uint8_t buffersize;
	uint8_t pos=0;
	while(pos<11){
		buffersize=sprintf(buffer,"Uhreinstellung");
		for(uint8_t i = 0; i<buffersize;i++){
    2cce:	14 35       	cpi	r17, 0x54	; 84
    2cd0:	a1 f7       	brne	.-24     	; 0x2cba <_Z13uhreinstellenv+0x96>
			oled.draw_ASCI(buffer[i],charsize*i,0);
		}
		buffersize=sprintf(buffer,"--------------");
    2cd2:	ef e0       	ldi	r30, 0x0F	; 15
    2cd4:	f1 e0       	ldi	r31, 0x01	; 1
    2cd6:	a7 2d       	mov	r26, r7
    2cd8:	b8 2d       	mov	r27, r8
    2cda:	86 2d       	mov	r24, r6
    2cdc:	01 90       	ld	r0, Z+
    2cde:	0d 92       	st	X+, r0
    2ce0:	8a 95       	dec	r24
    2ce2:	e1 f7       	brne	.-8      	; 0x2cdc <_Z13uhreinstellenv+0xb8>
    2ce4:	2d 88       	ldd	r2, Y+21	; 0x15
    2ce6:	3e 88       	ldd	r3, Y+22	; 0x16
    2ce8:	1b 2d       	mov	r17, r11
		for(uint8_t i = 0; i<buffersize;i++){
			oled.draw_ASCI(buffer[i],charsize*i,8);
    2cea:	f1 01       	movw	r30, r2
    2cec:	61 91       	ld	r22, Z+
    2cee:	1f 01       	movw	r2, r30
    2cf0:	28 e0       	ldi	r18, 0x08	; 8
    2cf2:	41 2f       	mov	r20, r17
    2cf4:	86 e4       	ldi	r24, 0x46	; 70
    2cf6:	93 e0       	ldi	r25, 0x03	; 3
    2cf8:	0e 94 c8 06 	call	0xd90	; 0xd90 <_ZN7Display9draw_ASCIEhhh>
    2cfc:	1a 5f       	subi	r17, 0xFA	; 250
		buffersize=sprintf(buffer,"Uhreinstellung");
		for(uint8_t i = 0; i<buffersize;i++){
			oled.draw_ASCI(buffer[i],charsize*i,0);
		}
		buffersize=sprintf(buffer,"--------------");
		for(uint8_t i = 0; i<buffersize;i++){
    2cfe:	14 35       	cpi	r17, 0x54	; 84
    2d00:	a1 f7       	brne	.-24     	; 0x2cea <_Z13uhreinstellenv+0xc6>
			oled.draw_ASCI(buffer[i],charsize*i,8);
		}
		buffer[0]=rtc.Stunden/10;
    2d02:	ed e8       	ldi	r30, 0x8D	; 141
    2d04:	f7 e0       	ldi	r31, 0x07	; 7
    2d06:	80 81       	ld	r24, Z
    2d08:	8a 9d       	mul	r24, r10
    2d0a:	91 2d       	mov	r25, r1
    2d0c:	11 24       	eor	r1, r1
    2d0e:	96 95       	lsr	r25
    2d10:	96 95       	lsr	r25
    2d12:	96 95       	lsr	r25
    2d14:	99 83       	std	Y+1, r25	; 0x01
		buffer[1]=rtc.Stunden%10;
    2d16:	99 0f       	add	r25, r25
    2d18:	29 2f       	mov	r18, r25
    2d1a:	22 0f       	add	r18, r18
    2d1c:	22 0f       	add	r18, r18
    2d1e:	92 0f       	add	r25, r18
    2d20:	89 1b       	sub	r24, r25
    2d22:	8a 83       	std	Y+2, r24	; 0x02
		buffer[2]=':';
    2d24:	fa e3       	ldi	r31, 0x3A	; 58
    2d26:	fb 83       	std	Y+3, r31	; 0x03
		buffer[3]=rtc.Minuten/10;
    2d28:	ee e8       	ldi	r30, 0x8E	; 142
    2d2a:	f7 e0       	ldi	r31, 0x07	; 7
    2d2c:	80 81       	ld	r24, Z
    2d2e:	8a 9d       	mul	r24, r10
    2d30:	91 2d       	mov	r25, r1
    2d32:	11 24       	eor	r1, r1
    2d34:	96 95       	lsr	r25
    2d36:	96 95       	lsr	r25
    2d38:	96 95       	lsr	r25
    2d3a:	9c 83       	std	Y+4, r25	; 0x04
		buffer[4]=rtc.Minuten%10;
    2d3c:	99 0f       	add	r25, r25
    2d3e:	29 2f       	mov	r18, r25
    2d40:	22 0f       	add	r18, r18
    2d42:	22 0f       	add	r18, r18
    2d44:	92 0f       	add	r25, r18
    2d46:	89 1b       	sub	r24, r25
    2d48:	8d 83       	std	Y+5, r24	; 0x05
		buffer[5]=' ';
    2d4a:	80 e2       	ldi	r24, 0x20	; 32
    2d4c:	8e 83       	std	Y+6, r24	; 0x06
		buffer[6]=rtc.Tag/10;
    2d4e:	f2 01       	movw	r30, r4
    2d50:	80 81       	ld	r24, Z
    2d52:	8a 9d       	mul	r24, r10
    2d54:	91 2d       	mov	r25, r1
    2d56:	11 24       	eor	r1, r1
    2d58:	96 95       	lsr	r25
    2d5a:	96 95       	lsr	r25
    2d5c:	96 95       	lsr	r25
    2d5e:	9f 83       	std	Y+7, r25	; 0x07
		buffer[7]=rtc.Tag%10;
    2d60:	99 0f       	add	r25, r25
    2d62:	29 2f       	mov	r18, r25
    2d64:	22 0f       	add	r18, r18
    2d66:	22 0f       	add	r18, r18
    2d68:	92 0f       	add	r25, r18
    2d6a:	89 1b       	sub	r24, r25
    2d6c:	88 87       	std	Y+8, r24	; 0x08
		buffer[8]='.';
    2d6e:	8e e2       	ldi	r24, 0x2E	; 46
    2d70:	89 87       	std	Y+9, r24	; 0x09
		buffer[9]=rtc.Monat/10;
    2d72:	f6 01       	movw	r30, r12
    2d74:	90 81       	ld	r25, Z
    2d76:	9a 9d       	mul	r25, r10
    2d78:	21 2d       	mov	r18, r1
    2d7a:	11 24       	eor	r1, r1
    2d7c:	26 95       	lsr	r18
    2d7e:	26 95       	lsr	r18
    2d80:	26 95       	lsr	r18
    2d82:	2a 87       	std	Y+10, r18	; 0x0a
		buffer[10]=rtc.Monat%10;
    2d84:	22 0f       	add	r18, r18
    2d86:	32 2f       	mov	r19, r18
    2d88:	33 0f       	add	r19, r19
    2d8a:	33 0f       	add	r19, r19
    2d8c:	23 0f       	add	r18, r19
    2d8e:	92 1b       	sub	r25, r18
    2d90:	9b 87       	std	Y+11, r25	; 0x0b
		buffer[11]='.';
    2d92:	8c 87       	std	Y+12, r24	; 0x0c
		buffer[12]=rtc.Jahr/10;
    2d94:	e4 e9       	ldi	r30, 0x94	; 148
    2d96:	f7 e0       	ldi	r31, 0x07	; 7
    2d98:	80 81       	ld	r24, Z
    2d9a:	8a 9d       	mul	r24, r10
    2d9c:	91 2d       	mov	r25, r1
    2d9e:	11 24       	eor	r1, r1
    2da0:	96 95       	lsr	r25
    2da2:	96 95       	lsr	r25
    2da4:	96 95       	lsr	r25
    2da6:	9d 87       	std	Y+13, r25	; 0x0d
		buffer[13]=rtc.Jahr%10;
    2da8:	99 0f       	add	r25, r25
    2daa:	29 2f       	mov	r18, r25
    2dac:	22 0f       	add	r18, r18
    2dae:	22 0f       	add	r18, r18
    2db0:	92 0f       	add	r25, r18
    2db2:	89 1b       	sub	r24, r25
    2db4:	8e 87       	std	Y+14, r24	; 0x0e
    2db6:	3b 2c       	mov	r3, r11
    2db8:	01 e0       	ldi	r16, 0x01	; 1
    2dba:	1b 2d       	mov	r17, r11
    2dbc:	04 c0       	rjmp	.+8      	; 0x2dc6 <_Z13uhreinstellenv+0x1a2>
    2dbe:	1f 5f       	subi	r17, 0xFF	; 255
    2dc0:	0f 5f       	subi	r16, 0xFF	; 255
    2dc2:	f0 e1       	ldi	r31, 0x10	; 16
    2dc4:	3f 0e       	add	r3, r31
		buffersize=14;
		for(uint8_t i = 0; i<5;i++){
			if(i!=2){
    2dc6:	12 30       	cpi	r17, 0x02	; 2
    2dc8:	69 f0       	breq	.+26     	; 0x2de4 <_Z13uhreinstellenv+0x1c0>
				oled.draw_number16x16(buffer[i],i*numbersmalsize,2*charhighte);
    2dca:	20 e1       	ldi	r18, 0x10	; 16
    2dcc:	43 2d       	mov	r20, r3
    2dce:	f7 01       	movw	r30, r14
    2dd0:	e1 0f       	add	r30, r17
    2dd2:	f1 1d       	adc	r31, r1
    2dd4:	60 81       	ld	r22, Z
    2dd6:	86 e4       	ldi	r24, 0x46	; 70
    2dd8:	93 e0       	ldi	r25, 0x03	; 3
    2dda:	0e 94 31 07 	call	0xe62	; 0xe62 <_ZN7Display16draw_number16x16Ehhh>
		buffer[10]=rtc.Monat%10;
		buffer[11]='.';
		buffer[12]=rtc.Jahr/10;
		buffer[13]=rtc.Jahr%10;
		buffersize=14;
		for(uint8_t i = 0; i<5;i++){
    2dde:	05 30       	cpi	r16, 0x05	; 5
    2de0:	70 f3       	brcs	.-36     	; 0x2dbe <_Z13uhreinstellenv+0x19a>
    2de2:	08 c0       	rjmp	.+16     	; 0x2df4 <_Z13uhreinstellenv+0x1d0>
			if(i!=2){
				oled.draw_number16x16(buffer[i],i*numbersmalsize,2*charhighte);
			}
			else {
				oled.draw_ASCI(buffer[i],i*numbersmalsize+numbersmalsize/2,2*charhighte+charhighte/2);
    2de4:	24 e1       	ldi	r18, 0x14	; 20
    2de6:	48 e2       	ldi	r20, 0x28	; 40
    2de8:	6b 81       	ldd	r22, Y+3	; 0x03
    2dea:	86 e4       	ldi	r24, 0x46	; 70
    2dec:	93 e0       	ldi	r25, 0x03	; 3
    2dee:	0e 94 c8 06 	call	0xd90	; 0xd90 <_ZN7Display9draw_ASCIEhhh>
    2df2:	e5 cf       	rjmp	.-54     	; 0x2dbe <_Z13uhreinstellenv+0x19a>
    2df4:	8e 01       	movw	r16, r28
    2df6:	09 5f       	subi	r16, 0xF9	; 249
    2df8:	1f 4f       	sbci	r17, 0xFF	; 255
		buffer[10]=rtc.Monat%10;
		buffer[11]='.';
		buffer[12]=rtc.Jahr/10;
		buffer[13]=rtc.Jahr%10;
		buffersize=14;
		for(uint8_t i = 0; i<5;i++){
    2dfa:	2b 2c       	mov	r2, r11
    2dfc:	0f 2e       	mov	r0, r31
    2dfe:	f6 e0       	ldi	r31, 0x06	; 6
    2e00:	3f 2e       	mov	r3, r31
    2e02:	f0 2d       	mov	r31, r0
			else {
				oled.draw_ASCI(buffer[i],i*numbersmalsize+numbersmalsize/2,2*charhighte+charhighte/2);
			}
		}
		for(uint8_t i = 6; i<buffersize;i++){
			if(i!=8 && i!=11){
    2e04:	88 e0       	ldi	r24, 0x08	; 8
    2e06:	38 16       	cp	r3, r24
    2e08:	61 f0       	breq	.+24     	; 0x2e22 <_Z13uhreinstellenv+0x1fe>
    2e0a:	9b e0       	ldi	r25, 0x0B	; 11
    2e0c:	39 16       	cp	r3, r25
    2e0e:	49 f0       	breq	.+18     	; 0x2e22 <_Z13uhreinstellenv+0x1fe>
				oled.draw_number16x16(buffer[i],i*numbersmalsize-6*numbersmalsize,4*charhighte);
    2e10:	20 e2       	ldi	r18, 0x20	; 32
    2e12:	42 2d       	mov	r20, r2
    2e14:	f8 01       	movw	r30, r16
    2e16:	60 81       	ld	r22, Z
    2e18:	86 e4       	ldi	r24, 0x46	; 70
    2e1a:	93 e0       	ldi	r25, 0x03	; 3
    2e1c:	0e 94 31 07 	call	0xe62	; 0xe62 <_ZN7Display16draw_number16x16Ehhh>
    2e20:	09 c0       	rjmp	.+18     	; 0x2e34 <_Z13uhreinstellenv+0x210>
			}
			else {
				oled.draw_ASCI(buffer[i],i*numbersmalsize+numbersmalsize/2-6*numbersmalsize,5*charhighte);
    2e22:	28 e2       	ldi	r18, 0x28	; 40
    2e24:	48 e0       	ldi	r20, 0x08	; 8
    2e26:	42 0d       	add	r20, r2
    2e28:	f8 01       	movw	r30, r16
    2e2a:	60 81       	ld	r22, Z
    2e2c:	86 e4       	ldi	r24, 0x46	; 70
    2e2e:	93 e0       	ldi	r25, 0x03	; 3
    2e30:	0e 94 c8 06 	call	0xd90	; 0xd90 <_ZN7Display9draw_ASCIEhhh>
			}
			else {
				oled.draw_ASCI(buffer[i],i*numbersmalsize+numbersmalsize/2,2*charhighte+charhighte/2);
			}
		}
		for(uint8_t i = 6; i<buffersize;i++){
    2e34:	33 94       	inc	r3
    2e36:	0f 5f       	subi	r16, 0xFF	; 255
    2e38:	1f 4f       	sbci	r17, 0xFF	; 255
    2e3a:	f0 e1       	ldi	r31, 0x10	; 16
    2e3c:	2f 0e       	add	r2, r31
    2e3e:	8e e0       	ldi	r24, 0x0E	; 14
    2e40:	38 12       	cpse	r3, r24
    2e42:	e0 cf       	rjmp	.-64     	; 0x2e04 <_Z13uhreinstellenv+0x1e0>
			else {
				oled.draw_ASCI(buffer[i],i*numbersmalsize+numbersmalsize/2-6*numbersmalsize,5*charhighte);
			}
		}

		oled.sendFrame();
    2e44:	86 e4       	ldi	r24, 0x46	; 70
    2e46:	93 e0       	ldi	r25, 0x03	; 3
    2e48:	0e 94 8f 04 	call	0x91e	; 0x91e <_ZN7Display9sendFrameEv>
		oled.clearFrame();
    2e4c:	86 e4       	ldi	r24, 0x46	; 70
    2e4e:	93 e0       	ldi	r25, 0x03	; 3
    2e50:	0e 94 05 04 	call	0x80a	; 0x80a <_ZN7Display10clearFrameEv>
		switch (pos) {
    2e54:	89 2d       	mov	r24, r9
    2e56:	90 e0       	ldi	r25, 0x00	; 0
    2e58:	8a 30       	cpi	r24, 0x0A	; 10
    2e5a:	91 05       	cpc	r25, r1
    2e5c:	08 f0       	brcs	.+2      	; 0x2e60 <_Z13uhreinstellenv+0x23c>
    2e5e:	47 c2       	rjmp	.+1166   	; 0x32ee <_Z13uhreinstellenv+0x6ca>
    2e60:	fc 01       	movw	r30, r24
    2e62:	ea 5b       	subi	r30, 0xBA	; 186
    2e64:	ff 4f       	sbci	r31, 0xFF	; 255
    2e66:	0c 94 88 2e 	jmp	0x5d10	; 0x5d10 <__tablejump2__>
			case 0:
				rtc.Stunden=Tastatur.ZahlenausTastatur()*10;
    2e6a:	85 e4       	ldi	r24, 0x45	; 69
    2e6c:	93 e0       	ldi	r25, 0x03	; 3
    2e6e:	0e 94 e0 21 	call	0x43c0	; 0x43c0 <_ZN9Interface17ZahlenausTastaturEv>
    2e72:	88 0f       	add	r24, r24
    2e74:	98 2f       	mov	r25, r24
    2e76:	99 0f       	add	r25, r25
    2e78:	99 0f       	add	r25, r25
    2e7a:	89 0f       	add	r24, r25
				if(rtc.Stunden>=24){
    2e7c:	88 31       	cpi	r24, 0x18	; 24
    2e7e:	08 f4       	brcc	.+2      	; 0x2e82 <_Z13uhreinstellenv+0x25e>
    2e80:	51 c2       	rjmp	.+1186   	; 0x3324 <_Z13uhreinstellenv+0x700>
					rtc.Stunden=0;
    2e82:	ed e8       	ldi	r30, 0x8D	; 141
    2e84:	f7 e0       	ldi	r31, 0x07	; 7
    2e86:	10 82       	st	Z, r1
					pos=-1;
					buffersize=sprintf(buffer,"Stunden falsch");
    2e88:	e6 ed       	ldi	r30, 0xD6	; 214
    2e8a:	f2 e0       	ldi	r31, 0x02	; 2
    2e8c:	a7 2d       	mov	r26, r7
    2e8e:	b8 2d       	mov	r27, r8
    2e90:	86 2d       	mov	r24, r6
    2e92:	01 90       	ld	r0, Z+
    2e94:	0d 92       	st	X+, r0
    2e96:	8a 95       	dec	r24
    2e98:	e1 f7       	brne	.-8      	; 0x2e92 <_Z13uhreinstellenv+0x26e>
    2e9a:	2d 88       	ldd	r2, Y+21	; 0x15
    2e9c:	3e 88       	ldd	r3, Y+22	; 0x16
    2e9e:	1b 2d       	mov	r17, r11
					for(uint8_t i = 0; i<buffersize;i++){
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
    2ea0:	f1 01       	movw	r30, r2
    2ea2:	61 91       	ld	r22, Z+
    2ea4:	1f 01       	movw	r2, r30
    2ea6:	28 e3       	ldi	r18, 0x38	; 56
    2ea8:	41 2f       	mov	r20, r17
    2eaa:	86 e4       	ldi	r24, 0x46	; 70
    2eac:	93 e0       	ldi	r25, 0x03	; 3
    2eae:	0e 94 c8 06 	call	0xd90	; 0xd90 <_ZN7Display9draw_ASCIEhhh>
    2eb2:	1a 5f       	subi	r17, 0xFA	; 250
				rtc.Stunden=Tastatur.ZahlenausTastatur()*10;
				if(rtc.Stunden>=24){
					rtc.Stunden=0;
					pos=-1;
					buffersize=sprintf(buffer,"Stunden falsch");
					for(uint8_t i = 0; i<buffersize;i++){
    2eb4:	14 35       	cpi	r17, 0x54	; 84
    2eb6:	a1 f7       	brne	.-24     	; 0x2ea0 <_Z13uhreinstellenv+0x27c>
    2eb8:	39 c2       	rjmp	.+1138   	; 0x332c <_Z13uhreinstellenv+0x708>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 1:
				rtc.Stunden+=Tastatur.ZahlenausTastatur();
    2eba:	85 e4       	ldi	r24, 0x45	; 69
    2ebc:	93 e0       	ldi	r25, 0x03	; 3
    2ebe:	0e 94 e0 21 	call	0x43c0	; 0x43c0 <_ZN9Interface17ZahlenausTastaturEv>
    2ec2:	ed e8       	ldi	r30, 0x8D	; 141
    2ec4:	f7 e0       	ldi	r31, 0x07	; 7
    2ec6:	20 81       	ld	r18, Z
    2ec8:	90 e0       	ldi	r25, 0x00	; 0
    2eca:	82 0f       	add	r24, r18
    2ecc:	91 1d       	adc	r25, r1
				if(rtc.Stunden>=24){
    2ece:	88 31       	cpi	r24, 0x18	; 24
    2ed0:	10 f4       	brcc	.+4      	; 0x2ed6 <_Z13uhreinstellenv+0x2b2>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 1:
				rtc.Stunden+=Tastatur.ZahlenausTastatur();
    2ed2:	80 83       	st	Z, r24
    2ed4:	5e c2       	rjmp	.+1212   	; 0x3392 <_Z13uhreinstellenv+0x76e>
				if(rtc.Stunden>=24){
					rtc.Stunden=0;
    2ed6:	ed e8       	ldi	r30, 0x8D	; 141
    2ed8:	f7 e0       	ldi	r31, 0x07	; 7
    2eda:	10 82       	st	Z, r1
					pos=-1;
					buffersize=sprintf(buffer,"Stunden falsch");
    2edc:	e6 ed       	ldi	r30, 0xD6	; 214
    2ede:	f2 e0       	ldi	r31, 0x02	; 2
    2ee0:	a7 2d       	mov	r26, r7
    2ee2:	b8 2d       	mov	r27, r8
    2ee4:	86 2d       	mov	r24, r6
    2ee6:	01 90       	ld	r0, Z+
    2ee8:	0d 92       	st	X+, r0
    2eea:	8a 95       	dec	r24
    2eec:	e1 f7       	brne	.-8      	; 0x2ee6 <_Z13uhreinstellenv+0x2c2>
    2eee:	2d 88       	ldd	r2, Y+21	; 0x15
    2ef0:	3e 88       	ldd	r3, Y+22	; 0x16
    2ef2:	1b 2d       	mov	r17, r11
					for(uint8_t i = 0; i<buffersize;i++){
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
    2ef4:	f1 01       	movw	r30, r2
    2ef6:	61 91       	ld	r22, Z+
    2ef8:	1f 01       	movw	r2, r30
    2efa:	28 e3       	ldi	r18, 0x38	; 56
    2efc:	41 2f       	mov	r20, r17
    2efe:	86 e4       	ldi	r24, 0x46	; 70
    2f00:	93 e0       	ldi	r25, 0x03	; 3
    2f02:	0e 94 c8 06 	call	0xd90	; 0xd90 <_ZN7Display9draw_ASCIEhhh>
    2f06:	1a 5f       	subi	r17, 0xFA	; 250
				rtc.Stunden+=Tastatur.ZahlenausTastatur();
				if(rtc.Stunden>=24){
					rtc.Stunden=0;
					pos=-1;
					buffersize=sprintf(buffer,"Stunden falsch");
					for(uint8_t i = 0; i<buffersize;i++){
    2f08:	14 35       	cpi	r17, 0x54	; 84
    2f0a:	a1 f7       	brne	.-24     	; 0x2ef4 <_Z13uhreinstellenv+0x2d0>
    2f0c:	12 c2       	rjmp	.+1060   	; 0x3332 <_Z13uhreinstellenv+0x70e>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 2:
				rtc.Minuten=Tastatur.ZahlenausTastatur()*10;
    2f0e:	85 e4       	ldi	r24, 0x45	; 69
    2f10:	93 e0       	ldi	r25, 0x03	; 3
    2f12:	0e 94 e0 21 	call	0x43c0	; 0x43c0 <_ZN9Interface17ZahlenausTastaturEv>
    2f16:	88 0f       	add	r24, r24
    2f18:	98 2f       	mov	r25, r24
    2f1a:	99 0f       	add	r25, r25
    2f1c:	99 0f       	add	r25, r25
    2f1e:	89 0f       	add	r24, r25
				if(rtc.Minuten>=60){
    2f20:	8c 33       	cpi	r24, 0x3C	; 60
    2f22:	20 f4       	brcc	.+8      	; 0x2f2c <_Z13uhreinstellenv+0x308>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 2:
				rtc.Minuten=Tastatur.ZahlenausTastatur()*10;
    2f24:	ee e8       	ldi	r30, 0x8E	; 142
    2f26:	f7 e0       	ldi	r31, 0x07	; 7
    2f28:	80 83       	st	Z, r24
    2f2a:	33 c2       	rjmp	.+1126   	; 0x3392 <_Z13uhreinstellenv+0x76e>
				if(rtc.Minuten>=60){
					rtc.Minuten=0;
    2f2c:	ee e8       	ldi	r30, 0x8E	; 142
    2f2e:	f7 e0       	ldi	r31, 0x07	; 7
    2f30:	10 82       	st	Z, r1
					pos=1;
					buffersize=sprintf(buffer,"Minuten falsch");
    2f32:	e5 ee       	ldi	r30, 0xE5	; 229
    2f34:	f2 e0       	ldi	r31, 0x02	; 2
    2f36:	a7 2d       	mov	r26, r7
    2f38:	b8 2d       	mov	r27, r8
    2f3a:	86 2d       	mov	r24, r6
    2f3c:	01 90       	ld	r0, Z+
    2f3e:	0d 92       	st	X+, r0
    2f40:	8a 95       	dec	r24
    2f42:	e1 f7       	brne	.-8      	; 0x2f3c <_Z13uhreinstellenv+0x318>
    2f44:	2d 88       	ldd	r2, Y+21	; 0x15
    2f46:	3e 88       	ldd	r3, Y+22	; 0x16
    2f48:	1b 2d       	mov	r17, r11
					for(uint8_t i = 0; i<buffersize;i++){
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
    2f4a:	f1 01       	movw	r30, r2
    2f4c:	61 91       	ld	r22, Z+
    2f4e:	1f 01       	movw	r2, r30
    2f50:	28 e3       	ldi	r18, 0x38	; 56
    2f52:	41 2f       	mov	r20, r17
    2f54:	86 e4       	ldi	r24, 0x46	; 70
    2f56:	93 e0       	ldi	r25, 0x03	; 3
    2f58:	0e 94 c8 06 	call	0xd90	; 0xd90 <_ZN7Display9draw_ASCIEhhh>
    2f5c:	1a 5f       	subi	r17, 0xFA	; 250
				rtc.Minuten=Tastatur.ZahlenausTastatur()*10;
				if(rtc.Minuten>=60){
					rtc.Minuten=0;
					pos=1;
					buffersize=sprintf(buffer,"Minuten falsch");
					for(uint8_t i = 0; i<buffersize;i++){
    2f5e:	14 35       	cpi	r17, 0x54	; 84
    2f60:	a1 f7       	brne	.-24     	; 0x2f4a <_Z13uhreinstellenv+0x326>
    2f62:	ea c1       	rjmp	.+980    	; 0x3338 <_Z13uhreinstellenv+0x714>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 3:
				rtc.Minuten+=Tastatur.ZahlenausTastatur();
    2f64:	85 e4       	ldi	r24, 0x45	; 69
    2f66:	93 e0       	ldi	r25, 0x03	; 3
    2f68:	0e 94 e0 21 	call	0x43c0	; 0x43c0 <_ZN9Interface17ZahlenausTastaturEv>
    2f6c:	ee e8       	ldi	r30, 0x8E	; 142
    2f6e:	f7 e0       	ldi	r31, 0x07	; 7
    2f70:	20 81       	ld	r18, Z
    2f72:	90 e0       	ldi	r25, 0x00	; 0
    2f74:	82 0f       	add	r24, r18
    2f76:	91 1d       	adc	r25, r1
				if(rtc.Minuten>=60){
    2f78:	8c 33       	cpi	r24, 0x3C	; 60
    2f7a:	10 f4       	brcc	.+4      	; 0x2f80 <_Z13uhreinstellenv+0x35c>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 3:
				rtc.Minuten+=Tastatur.ZahlenausTastatur();
    2f7c:	80 83       	st	Z, r24
    2f7e:	09 c2       	rjmp	.+1042   	; 0x3392 <_Z13uhreinstellenv+0x76e>
				if(rtc.Minuten>=60){
					rtc.Minuten=0;
    2f80:	ee e8       	ldi	r30, 0x8E	; 142
    2f82:	f7 e0       	ldi	r31, 0x07	; 7
    2f84:	10 82       	st	Z, r1
					pos=1;
					buffersize=sprintf(buffer,"Minuten falsch");
    2f86:	e5 ee       	ldi	r30, 0xE5	; 229
    2f88:	f2 e0       	ldi	r31, 0x02	; 2
    2f8a:	a7 2d       	mov	r26, r7
    2f8c:	b8 2d       	mov	r27, r8
    2f8e:	86 2d       	mov	r24, r6
    2f90:	01 90       	ld	r0, Z+
    2f92:	0d 92       	st	X+, r0
    2f94:	8a 95       	dec	r24
    2f96:	e1 f7       	brne	.-8      	; 0x2f90 <_Z13uhreinstellenv+0x36c>
    2f98:	2d 88       	ldd	r2, Y+21	; 0x15
    2f9a:	3e 88       	ldd	r3, Y+22	; 0x16
    2f9c:	1b 2d       	mov	r17, r11
					for(uint8_t i = 0; i<buffersize;i++){
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
    2f9e:	f1 01       	movw	r30, r2
    2fa0:	61 91       	ld	r22, Z+
    2fa2:	1f 01       	movw	r2, r30
    2fa4:	28 e3       	ldi	r18, 0x38	; 56
    2fa6:	41 2f       	mov	r20, r17
    2fa8:	86 e4       	ldi	r24, 0x46	; 70
    2faa:	93 e0       	ldi	r25, 0x03	; 3
    2fac:	0e 94 c8 06 	call	0xd90	; 0xd90 <_ZN7Display9draw_ASCIEhhh>
    2fb0:	1a 5f       	subi	r17, 0xFA	; 250
				rtc.Minuten+=Tastatur.ZahlenausTastatur();
				if(rtc.Minuten>=60){
					rtc.Minuten=0;
					pos=1;
					buffersize=sprintf(buffer,"Minuten falsch");
					for(uint8_t i = 0; i<buffersize;i++){
    2fb2:	14 35       	cpi	r17, 0x54	; 84
    2fb4:	a1 f7       	brne	.-24     	; 0x2f9e <_Z13uhreinstellenv+0x37a>
    2fb6:	c3 c1       	rjmp	.+902    	; 0x333e <_Z13uhreinstellenv+0x71a>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 4:
				rtc.Tag=Tastatur.ZahlenausTastatur()*10;
    2fb8:	85 e4       	ldi	r24, 0x45	; 69
    2fba:	93 e0       	ldi	r25, 0x03	; 3
    2fbc:	0e 94 e0 21 	call	0x43c0	; 0x43c0 <_ZN9Interface17ZahlenausTastaturEv>
    2fc0:	88 0f       	add	r24, r24
    2fc2:	98 2f       	mov	r25, r24
    2fc4:	99 0f       	add	r25, r25
    2fc6:	99 0f       	add	r25, r25
    2fc8:	89 0f       	add	r24, r25
				if(rtc.Tag>=32){
    2fca:	80 32       	cpi	r24, 0x20	; 32
    2fcc:	18 f4       	brcc	.+6      	; 0x2fd4 <_Z13uhreinstellenv+0x3b0>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 4:
				rtc.Tag=Tastatur.ZahlenausTastatur()*10;
    2fce:	f2 01       	movw	r30, r4
    2fd0:	80 83       	st	Z, r24
    2fd2:	df c1       	rjmp	.+958    	; 0x3392 <_Z13uhreinstellenv+0x76e>
				if(rtc.Tag>=32){
					rtc.Tag=0;
    2fd4:	f2 01       	movw	r30, r4
    2fd6:	10 82       	st	Z, r1
					pos=3;
					buffersize=sprintf(buffer,"Tag falsch");
    2fd8:	8b e0       	ldi	r24, 0x0B	; 11
    2fda:	e4 ef       	ldi	r30, 0xF4	; 244
    2fdc:	f2 e0       	ldi	r31, 0x02	; 2
    2fde:	a7 2d       	mov	r26, r7
    2fe0:	b8 2d       	mov	r27, r8
    2fe2:	01 90       	ld	r0, Z+
    2fe4:	0d 92       	st	X+, r0
    2fe6:	8a 95       	dec	r24
    2fe8:	e1 f7       	brne	.-8      	; 0x2fe2 <_Z13uhreinstellenv+0x3be>
    2fea:	2d 88       	ldd	r2, Y+21	; 0x15
    2fec:	3e 88       	ldd	r3, Y+22	; 0x16
    2fee:	1b 2d       	mov	r17, r11
					for(uint8_t i = 0; i<buffersize;i++){
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
    2ff0:	f1 01       	movw	r30, r2
    2ff2:	61 91       	ld	r22, Z+
    2ff4:	1f 01       	movw	r2, r30
    2ff6:	28 e3       	ldi	r18, 0x38	; 56
    2ff8:	41 2f       	mov	r20, r17
    2ffa:	86 e4       	ldi	r24, 0x46	; 70
    2ffc:	93 e0       	ldi	r25, 0x03	; 3
    2ffe:	0e 94 c8 06 	call	0xd90	; 0xd90 <_ZN7Display9draw_ASCIEhhh>
    3002:	1a 5f       	subi	r17, 0xFA	; 250
				rtc.Tag=Tastatur.ZahlenausTastatur()*10;
				if(rtc.Tag>=32){
					rtc.Tag=0;
					pos=3;
					buffersize=sprintf(buffer,"Tag falsch");
					for(uint8_t i = 0; i<buffersize;i++){
    3004:	1c 33       	cpi	r17, 0x3C	; 60
    3006:	a1 f7       	brne	.-24     	; 0x2ff0 <_Z13uhreinstellenv+0x3cc>
    3008:	9d c1       	rjmp	.+826    	; 0x3344 <_Z13uhreinstellenv+0x720>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 5:
				rtc.Tag+=Tastatur.ZahlenausTastatur();
    300a:	85 e4       	ldi	r24, 0x45	; 69
    300c:	93 e0       	ldi	r25, 0x03	; 3
    300e:	0e 94 e0 21 	call	0x43c0	; 0x43c0 <_ZN9Interface17ZahlenausTastaturEv>
    3012:	f2 01       	movw	r30, r4
    3014:	20 81       	ld	r18, Z
    3016:	90 e0       	ldi	r25, 0x00	; 0
    3018:	82 0f       	add	r24, r18
    301a:	91 1d       	adc	r25, r1
				if(rtc.Tag>=32){
    301c:	80 32       	cpi	r24, 0x20	; 32
    301e:	10 f4       	brcc	.+4      	; 0x3024 <_Z13uhreinstellenv+0x400>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 5:
				rtc.Tag+=Tastatur.ZahlenausTastatur();
    3020:	80 83       	st	Z, r24
    3022:	b7 c1       	rjmp	.+878    	; 0x3392 <_Z13uhreinstellenv+0x76e>
				if(rtc.Tag>=32){
					rtc.Tag=0;
    3024:	f2 01       	movw	r30, r4
    3026:	10 82       	st	Z, r1
					pos=3;
					buffersize=sprintf(buffer,"Tag falsch");
    3028:	8b e0       	ldi	r24, 0x0B	; 11
    302a:	e4 ef       	ldi	r30, 0xF4	; 244
    302c:	f2 e0       	ldi	r31, 0x02	; 2
    302e:	a7 2d       	mov	r26, r7
    3030:	b8 2d       	mov	r27, r8
    3032:	01 90       	ld	r0, Z+
    3034:	0d 92       	st	X+, r0
    3036:	8a 95       	dec	r24
    3038:	e1 f7       	brne	.-8      	; 0x3032 <_Z13uhreinstellenv+0x40e>
    303a:	2d 88       	ldd	r2, Y+21	; 0x15
    303c:	3e 88       	ldd	r3, Y+22	; 0x16
    303e:	1b 2d       	mov	r17, r11
					for(uint8_t i = 0; i<buffersize;i++){
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
    3040:	f1 01       	movw	r30, r2
    3042:	61 91       	ld	r22, Z+
    3044:	1f 01       	movw	r2, r30
    3046:	28 e3       	ldi	r18, 0x38	; 56
    3048:	41 2f       	mov	r20, r17
    304a:	86 e4       	ldi	r24, 0x46	; 70
    304c:	93 e0       	ldi	r25, 0x03	; 3
    304e:	0e 94 c8 06 	call	0xd90	; 0xd90 <_ZN7Display9draw_ASCIEhhh>
    3052:	1a 5f       	subi	r17, 0xFA	; 250
				rtc.Tag+=Tastatur.ZahlenausTastatur();
				if(rtc.Tag>=32){
					rtc.Tag=0;
					pos=3;
					buffersize=sprintf(buffer,"Tag falsch");
					for(uint8_t i = 0; i<buffersize;i++){
    3054:	1c 33       	cpi	r17, 0x3C	; 60
    3056:	a1 f7       	brne	.-24     	; 0x3040 <_Z13uhreinstellenv+0x41c>
    3058:	7a c1       	rjmp	.+756    	; 0x334e <_Z13uhreinstellenv+0x72a>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 6:
				rtc.Monat=Tastatur.ZahlenausTastatur()*10;
    305a:	85 e4       	ldi	r24, 0x45	; 69
    305c:	93 e0       	ldi	r25, 0x03	; 3
    305e:	0e 94 e0 21 	call	0x43c0	; 0x43c0 <_ZN9Interface17ZahlenausTastaturEv>
    3062:	88 0f       	add	r24, r24
    3064:	98 2f       	mov	r25, r24
    3066:	99 0f       	add	r25, r25
    3068:	99 0f       	add	r25, r25
    306a:	89 0f       	add	r24, r25
				if(rtc.Monat>=13){
    306c:	8d 30       	cpi	r24, 0x0D	; 13
    306e:	18 f4       	brcc	.+6      	; 0x3076 <_Z13uhreinstellenv+0x452>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 6:
				rtc.Monat=Tastatur.ZahlenausTastatur()*10;
    3070:	f6 01       	movw	r30, r12
    3072:	80 83       	st	Z, r24
    3074:	8e c1       	rjmp	.+796    	; 0x3392 <_Z13uhreinstellenv+0x76e>
				if(rtc.Monat>=13){
					rtc.Monat=0;
    3076:	f6 01       	movw	r30, r12
    3078:	10 82       	st	Z, r1
					pos=5;
					buffersize=sprintf(buffer,"Monat falsch");
    307a:	8d e0       	ldi	r24, 0x0D	; 13
    307c:	ef ef       	ldi	r30, 0xFF	; 255
    307e:	f2 e0       	ldi	r31, 0x02	; 2
    3080:	a7 2d       	mov	r26, r7
    3082:	b8 2d       	mov	r27, r8
    3084:	01 90       	ld	r0, Z+
    3086:	0d 92       	st	X+, r0
    3088:	8a 95       	dec	r24
    308a:	e1 f7       	brne	.-8      	; 0x3084 <_Z13uhreinstellenv+0x460>
    308c:	2d 88       	ldd	r2, Y+21	; 0x15
    308e:	3e 88       	ldd	r3, Y+22	; 0x16
    3090:	1b 2d       	mov	r17, r11
					for(uint8_t i = 0; i<buffersize;i++){
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
    3092:	f1 01       	movw	r30, r2
    3094:	61 91       	ld	r22, Z+
    3096:	1f 01       	movw	r2, r30
    3098:	28 e3       	ldi	r18, 0x38	; 56
    309a:	41 2f       	mov	r20, r17
    309c:	86 e4       	ldi	r24, 0x46	; 70
    309e:	93 e0       	ldi	r25, 0x03	; 3
    30a0:	0e 94 c8 06 	call	0xd90	; 0xd90 <_ZN7Display9draw_ASCIEhhh>
    30a4:	1a 5f       	subi	r17, 0xFA	; 250
				rtc.Monat=Tastatur.ZahlenausTastatur()*10;
				if(rtc.Monat>=13){
					rtc.Monat=0;
					pos=5;
					buffersize=sprintf(buffer,"Monat falsch");
					for(uint8_t i = 0; i<buffersize;i++){
    30a6:	18 34       	cpi	r17, 0x48	; 72
    30a8:	a1 f7       	brne	.-24     	; 0x3092 <_Z13uhreinstellenv+0x46e>
    30aa:	56 c1       	rjmp	.+684    	; 0x3358 <_Z13uhreinstellenv+0x734>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 7:
				rtc.Monat+=Tastatur.ZahlenausTastatur();
    30ac:	85 e4       	ldi	r24, 0x45	; 69
    30ae:	93 e0       	ldi	r25, 0x03	; 3
    30b0:	0e 94 e0 21 	call	0x43c0	; 0x43c0 <_ZN9Interface17ZahlenausTastaturEv>
    30b4:	f6 01       	movw	r30, r12
    30b6:	20 81       	ld	r18, Z
    30b8:	90 e0       	ldi	r25, 0x00	; 0
    30ba:	82 0f       	add	r24, r18
    30bc:	91 1d       	adc	r25, r1
				if(rtc.Monat>=13){
    30be:	8d 30       	cpi	r24, 0x0D	; 13
    30c0:	10 f4       	brcc	.+4      	; 0x30c6 <_Z13uhreinstellenv+0x4a2>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 7:
				rtc.Monat+=Tastatur.ZahlenausTastatur();
    30c2:	80 83       	st	Z, r24
    30c4:	1e c0       	rjmp	.+60     	; 0x3102 <_Z13uhreinstellenv+0x4de>
				if(rtc.Monat>=13){
					rtc.Monat=0;
    30c6:	f6 01       	movw	r30, r12
    30c8:	10 82       	st	Z, r1
					pos=5;
					buffersize=sprintf(buffer,"Monat falsch");
    30ca:	8d e0       	ldi	r24, 0x0D	; 13
    30cc:	ef ef       	ldi	r30, 0xFF	; 255
    30ce:	f2 e0       	ldi	r31, 0x02	; 2
    30d0:	a7 2d       	mov	r26, r7
    30d2:	b8 2d       	mov	r27, r8
    30d4:	01 90       	ld	r0, Z+
    30d6:	0d 92       	st	X+, r0
    30d8:	8a 95       	dec	r24
    30da:	e1 f7       	brne	.-8      	; 0x30d4 <_Z13uhreinstellenv+0x4b0>
    30dc:	2d 88       	ldd	r2, Y+21	; 0x15
    30de:	3e 88       	ldd	r3, Y+22	; 0x16
    30e0:	1b 2d       	mov	r17, r11
					for(uint8_t i = 0; i<buffersize;i++){
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
    30e2:	f1 01       	movw	r30, r2
    30e4:	61 91       	ld	r22, Z+
    30e6:	1f 01       	movw	r2, r30
    30e8:	28 e3       	ldi	r18, 0x38	; 56
    30ea:	41 2f       	mov	r20, r17
    30ec:	86 e4       	ldi	r24, 0x46	; 70
    30ee:	93 e0       	ldi	r25, 0x03	; 3
    30f0:	0e 94 c8 06 	call	0xd90	; 0xd90 <_ZN7Display9draw_ASCIEhhh>
    30f4:	1a 5f       	subi	r17, 0xFA	; 250
				rtc.Monat+=Tastatur.ZahlenausTastatur();
				if(rtc.Monat>=13){
					rtc.Monat=0;
					pos=5;
					buffersize=sprintf(buffer,"Monat falsch");
					for(uint8_t i = 0; i<buffersize;i++){
    30f6:	18 34       	cpi	r17, 0x48	; 72
    30f8:	a1 f7       	brne	.-24     	; 0x30e2 <_Z13uhreinstellenv+0x4be>
				break;
			case 7:
				rtc.Monat+=Tastatur.ZahlenausTastatur();
				if(rtc.Monat>=13){
					rtc.Monat=0;
					pos=5;
    30fa:	0f 2e       	mov	r0, r31
    30fc:	f5 e0       	ldi	r31, 0x05	; 5
    30fe:	9f 2e       	mov	r9, r31
    3100:	f0 2d       	mov	r31, r0
					buffersize=sprintf(buffer,"Monat falsch");
					for(uint8_t i = 0; i<buffersize;i++){
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				if(rtc.Monat==4||rtc.Monat==6||rtc.Monat==9||rtc.Monat==11){
    3102:	f6 01       	movw	r30, r12
    3104:	90 81       	ld	r25, Z
    3106:	89 2f       	mov	r24, r25
    3108:	8d 7f       	andi	r24, 0xFD	; 253
    310a:	84 30       	cpi	r24, 0x04	; 4
    310c:	11 f0       	breq	.+4      	; 0x3112 <_Z13uhreinstellenv+0x4ee>
    310e:	89 30       	cpi	r24, 0x09	; 9
    3110:	09 f5       	brne	.+66     	; 0x3154 <_Z13uhreinstellenv+0x530>
					if(rtc.Tag>=31){
    3112:	f2 01       	movw	r30, r4
    3114:	80 81       	ld	r24, Z
    3116:	8f 31       	cpi	r24, 0x1F	; 31
    3118:	08 f4       	brcc	.+2      	; 0x311c <_Z13uhreinstellenv+0x4f8>
    311a:	ea c0       	rjmp	.+468    	; 0x32f0 <_Z13uhreinstellenv+0x6cc>
						rtc.Tag=0;
    311c:	10 82       	st	Z, r1
						rtc.Monat=0;
    311e:	f6 01       	movw	r30, r12
    3120:	10 82       	st	Z, r1
						pos=3;
						buffersize=sprintf(buffer,"Tag falsch");
    3122:	8b e0       	ldi	r24, 0x0B	; 11
    3124:	e4 ef       	ldi	r30, 0xF4	; 244
    3126:	f2 e0       	ldi	r31, 0x02	; 2
    3128:	a7 2d       	mov	r26, r7
    312a:	b8 2d       	mov	r27, r8
    312c:	01 90       	ld	r0, Z+
    312e:	0d 92       	st	X+, r0
    3130:	8a 95       	dec	r24
    3132:	e1 f7       	brne	.-8      	; 0x312c <_Z13uhreinstellenv+0x508>
    3134:	2d 88       	ldd	r2, Y+21	; 0x15
    3136:	3e 88       	ldd	r3, Y+22	; 0x16
    3138:	1b 2d       	mov	r17, r11
						for(uint8_t i = 0; i<buffersize;i++){
							oled.draw_ASCI(buffer[i],charsize*i,7*8);
    313a:	f1 01       	movw	r30, r2
    313c:	61 91       	ld	r22, Z+
    313e:	1f 01       	movw	r2, r30
    3140:	28 e3       	ldi	r18, 0x38	; 56
    3142:	41 2f       	mov	r20, r17
    3144:	86 e4       	ldi	r24, 0x46	; 70
    3146:	93 e0       	ldi	r25, 0x03	; 3
    3148:	0e 94 c8 06 	call	0xd90	; 0xd90 <_ZN7Display9draw_ASCIEhhh>
    314c:	1a 5f       	subi	r17, 0xFA	; 250
					if(rtc.Tag>=31){
						rtc.Tag=0;
						rtc.Monat=0;
						pos=3;
						buffersize=sprintf(buffer,"Tag falsch");
						for(uint8_t i = 0; i<buffersize;i++){
    314e:	1c 33       	cpi	r17, 0x3C	; 60
    3150:	a1 f7       	brne	.-24     	; 0x313a <_Z13uhreinstellenv+0x516>
    3152:	07 c1       	rjmp	.+526    	; 0x3362 <_Z13uhreinstellenv+0x73e>
							oled.draw_ASCI(buffer[i],charsize*i,7*8);
						}
					}
				}
				else if(rtc.Monat==2){
    3154:	92 30       	cpi	r25, 0x02	; 2
    3156:	09 f0       	breq	.+2      	; 0x315a <_Z13uhreinstellenv+0x536>
    3158:	cb c0       	rjmp	.+406    	; 0x32f0 <_Z13uhreinstellenv+0x6cc>
					if(rtc.Tag>=30){
    315a:	f2 01       	movw	r30, r4
    315c:	80 81       	ld	r24, Z
    315e:	8e 31       	cpi	r24, 0x1E	; 30
    3160:	08 f4       	brcc	.+2      	; 0x3164 <_Z13uhreinstellenv+0x540>
    3162:	c6 c0       	rjmp	.+396    	; 0x32f0 <_Z13uhreinstellenv+0x6cc>
						rtc.Tag=0;
    3164:	10 82       	st	Z, r1
						rtc.Monat=0;
    3166:	f6 01       	movw	r30, r12
    3168:	10 82       	st	Z, r1
						pos=3;
						buffersize=sprintf(buffer,"Tag falsch");
    316a:	8b e0       	ldi	r24, 0x0B	; 11
    316c:	e4 ef       	ldi	r30, 0xF4	; 244
    316e:	f2 e0       	ldi	r31, 0x02	; 2
    3170:	a7 2d       	mov	r26, r7
    3172:	b8 2d       	mov	r27, r8
    3174:	01 90       	ld	r0, Z+
    3176:	0d 92       	st	X+, r0
    3178:	8a 95       	dec	r24
    317a:	e1 f7       	brne	.-8      	; 0x3174 <_Z13uhreinstellenv+0x550>
    317c:	2d 88       	ldd	r2, Y+21	; 0x15
    317e:	3e 88       	ldd	r3, Y+22	; 0x16
    3180:	1b 2d       	mov	r17, r11
						for(uint8_t i = 0; i<buffersize;i++){
							oled.draw_ASCI(buffer[i],charsize*i,7*8);
    3182:	f1 01       	movw	r30, r2
    3184:	61 91       	ld	r22, Z+
    3186:	1f 01       	movw	r2, r30
    3188:	28 e3       	ldi	r18, 0x38	; 56
    318a:	41 2f       	mov	r20, r17
    318c:	86 e4       	ldi	r24, 0x46	; 70
    318e:	93 e0       	ldi	r25, 0x03	; 3
    3190:	0e 94 c8 06 	call	0xd90	; 0xd90 <_ZN7Display9draw_ASCIEhhh>
    3194:	1a 5f       	subi	r17, 0xFA	; 250
					if(rtc.Tag>=30){
						rtc.Tag=0;
						rtc.Monat=0;
						pos=3;
						buffersize=sprintf(buffer,"Tag falsch");
						for(uint8_t i = 0; i<buffersize;i++){
    3196:	1c 33       	cpi	r17, 0x3C	; 60
    3198:	a1 f7       	brne	.-24     	; 0x3182 <_Z13uhreinstellenv+0x55e>
    319a:	e8 c0       	rjmp	.+464    	; 0x336c <_Z13uhreinstellenv+0x748>
						}
					}
				}
				break;
			case 8:
				rtc.Jahr=Tastatur.ZahlenausTastatur()*10;
    319c:	85 e4       	ldi	r24, 0x45	; 69
    319e:	93 e0       	ldi	r25, 0x03	; 3
    31a0:	0e 94 e0 21 	call	0x43c0	; 0x43c0 <_ZN9Interface17ZahlenausTastaturEv>
    31a4:	88 0f       	add	r24, r24
    31a6:	98 2f       	mov	r25, r24
    31a8:	99 0f       	add	r25, r25
    31aa:	99 0f       	add	r25, r25
    31ac:	89 0f       	add	r24, r25
				if(rtc.Jahr>=50){
    31ae:	82 33       	cpi	r24, 0x32	; 50
    31b0:	20 f4       	brcc	.+8      	; 0x31ba <_Z13uhreinstellenv+0x596>
						}
					}
				}
				break;
			case 8:
				rtc.Jahr=Tastatur.ZahlenausTastatur()*10;
    31b2:	e4 e9       	ldi	r30, 0x94	; 148
    31b4:	f7 e0       	ldi	r31, 0x07	; 7
    31b6:	80 83       	st	Z, r24
    31b8:	ec c0       	rjmp	.+472    	; 0x3392 <_Z13uhreinstellenv+0x76e>
				if(rtc.Jahr>=50){
					rtc.Jahr=0;
    31ba:	e4 e9       	ldi	r30, 0x94	; 148
    31bc:	f7 e0       	ldi	r31, 0x07	; 7
    31be:	10 82       	st	Z, r1
					pos=7;
					buffersize=sprintf(buffer,"Jahr falsch");
    31c0:	8c e0       	ldi	r24, 0x0C	; 12
    31c2:	ec e0       	ldi	r30, 0x0C	; 12
    31c4:	f3 e0       	ldi	r31, 0x03	; 3
    31c6:	a7 2d       	mov	r26, r7
    31c8:	b8 2d       	mov	r27, r8
    31ca:	01 90       	ld	r0, Z+
    31cc:	0d 92       	st	X+, r0
    31ce:	8a 95       	dec	r24
    31d0:	e1 f7       	brne	.-8      	; 0x31ca <_Z13uhreinstellenv+0x5a6>
    31d2:	2d 88       	ldd	r2, Y+21	; 0x15
    31d4:	3e 88       	ldd	r3, Y+22	; 0x16
    31d6:	1b 2d       	mov	r17, r11
					for(uint8_t i = 0; i<buffersize;i++){
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
    31d8:	f1 01       	movw	r30, r2
    31da:	61 91       	ld	r22, Z+
    31dc:	1f 01       	movw	r2, r30
    31de:	28 e3       	ldi	r18, 0x38	; 56
    31e0:	41 2f       	mov	r20, r17
    31e2:	86 e4       	ldi	r24, 0x46	; 70
    31e4:	93 e0       	ldi	r25, 0x03	; 3
    31e6:	0e 94 c8 06 	call	0xd90	; 0xd90 <_ZN7Display9draw_ASCIEhhh>
    31ea:	1a 5f       	subi	r17, 0xFA	; 250
				rtc.Jahr=Tastatur.ZahlenausTastatur()*10;
				if(rtc.Jahr>=50){
					rtc.Jahr=0;
					pos=7;
					buffersize=sprintf(buffer,"Jahr falsch");
					for(uint8_t i = 0; i<buffersize;i++){
    31ec:	12 34       	cpi	r17, 0x42	; 66
    31ee:	a1 f7       	brne	.-24     	; 0x31d8 <_Z13uhreinstellenv+0x5b4>
    31f0:	c2 c0       	rjmp	.+388    	; 0x3376 <_Z13uhreinstellenv+0x752>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 9:
				rtc.Jahr+=Tastatur.ZahlenausTastatur();
    31f2:	85 e4       	ldi	r24, 0x45	; 69
    31f4:	93 e0       	ldi	r25, 0x03	; 3
    31f6:	0e 94 e0 21 	call	0x43c0	; 0x43c0 <_ZN9Interface17ZahlenausTastaturEv>
    31fa:	e4 e9       	ldi	r30, 0x94	; 148
    31fc:	f7 e0       	ldi	r31, 0x07	; 7
    31fe:	20 81       	ld	r18, Z
    3200:	90 e0       	ldi	r25, 0x00	; 0
    3202:	82 0f       	add	r24, r18
    3204:	91 1d       	adc	r25, r1
				if(rtc.Jahr>=50){
    3206:	82 33       	cpi	r24, 0x32	; 50
    3208:	10 f4       	brcc	.+4      	; 0x320e <_Z13uhreinstellenv+0x5ea>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 9:
				rtc.Jahr+=Tastatur.ZahlenausTastatur();
    320a:	80 83       	st	Z, r24
    320c:	1f c0       	rjmp	.+62     	; 0x324c <_Z13uhreinstellenv+0x628>
				if(rtc.Jahr>=50){
					rtc.Jahr=0;
    320e:	e4 e9       	ldi	r30, 0x94	; 148
    3210:	f7 e0       	ldi	r31, 0x07	; 7
    3212:	10 82       	st	Z, r1
					pos=7;
					buffersize=sprintf(buffer,"Jahr falsch");
    3214:	8c e0       	ldi	r24, 0x0C	; 12
    3216:	ec e0       	ldi	r30, 0x0C	; 12
    3218:	f3 e0       	ldi	r31, 0x03	; 3
    321a:	a7 2d       	mov	r26, r7
    321c:	b8 2d       	mov	r27, r8
    321e:	01 90       	ld	r0, Z+
    3220:	0d 92       	st	X+, r0
    3222:	8a 95       	dec	r24
    3224:	e1 f7       	brne	.-8      	; 0x321e <_Z13uhreinstellenv+0x5fa>
    3226:	2d 88       	ldd	r2, Y+21	; 0x15
    3228:	3e 88       	ldd	r3, Y+22	; 0x16
    322a:	1b 2d       	mov	r17, r11
					for(uint8_t i = 0; i<buffersize;i++){
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
    322c:	f1 01       	movw	r30, r2
    322e:	61 91       	ld	r22, Z+
    3230:	1f 01       	movw	r2, r30
    3232:	28 e3       	ldi	r18, 0x38	; 56
    3234:	41 2f       	mov	r20, r17
    3236:	86 e4       	ldi	r24, 0x46	; 70
    3238:	93 e0       	ldi	r25, 0x03	; 3
    323a:	0e 94 c8 06 	call	0xd90	; 0xd90 <_ZN7Display9draw_ASCIEhhh>
    323e:	1a 5f       	subi	r17, 0xFA	; 250
				rtc.Jahr+=Tastatur.ZahlenausTastatur();
				if(rtc.Jahr>=50){
					rtc.Jahr=0;
					pos=7;
					buffersize=sprintf(buffer,"Jahr falsch");
					for(uint8_t i = 0; i<buffersize;i++){
    3240:	12 34       	cpi	r17, 0x42	; 66
    3242:	a1 f7       	brne	.-24     	; 0x322c <_Z13uhreinstellenv+0x608>
				break;
			case 9:
				rtc.Jahr+=Tastatur.ZahlenausTastatur();
				if(rtc.Jahr>=50){
					rtc.Jahr=0;
					pos=7;
    3244:	0f 2e       	mov	r0, r31
    3246:	f7 e0       	ldi	r31, 0x07	; 7
    3248:	9f 2e       	mov	r9, r31
    324a:	f0 2d       	mov	r31, r0
					buffersize=sprintf(buffer,"Jahr falsch");
					for(uint8_t i = 0; i<buffersize;i++){
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				if(rtc.Monat==2){
    324c:	f6 01       	movw	r30, r12
    324e:	80 81       	ld	r24, Z
    3250:	82 30       	cpi	r24, 0x02	; 2
    3252:	09 f0       	breq	.+2      	; 0x3256 <_Z13uhreinstellenv+0x632>
    3254:	4d c0       	rjmp	.+154    	; 0x32f0 <_Z13uhreinstellenv+0x6cc>
					if(rtc.Jahr%4==0){
    3256:	e4 e9       	ldi	r30, 0x94	; 148
    3258:	f7 e0       	ldi	r31, 0x07	; 7
    325a:	80 81       	ld	r24, Z
    325c:	83 70       	andi	r24, 0x03	; 3
    325e:	21 f5       	brne	.+72     	; 0x32a8 <_Z13uhreinstellenv+0x684>
						if (rtc.Tag>=30)
    3260:	f2 01       	movw	r30, r4
    3262:	80 81       	ld	r24, Z
    3264:	8e 31       	cpi	r24, 0x1E	; 30
    3266:	08 f4       	brcc	.+2      	; 0x326a <_Z13uhreinstellenv+0x646>
    3268:	43 c0       	rjmp	.+134    	; 0x32f0 <_Z13uhreinstellenv+0x6cc>
						{
							rtc.Tag=0;
    326a:	10 82       	st	Z, r1
							rtc.Monat=0;
    326c:	f6 01       	movw	r30, r12
    326e:	10 82       	st	Z, r1
							rtc.Jahr=0;
    3270:	e4 e9       	ldi	r30, 0x94	; 148
    3272:	f7 e0       	ldi	r31, 0x07	; 7
    3274:	10 82       	st	Z, r1
							pos=3;
							buffersize=sprintf(buffer,"Tag falsch");
    3276:	8b e0       	ldi	r24, 0x0B	; 11
    3278:	e4 ef       	ldi	r30, 0xF4	; 244
    327a:	f2 e0       	ldi	r31, 0x02	; 2
    327c:	a7 2d       	mov	r26, r7
    327e:	b8 2d       	mov	r27, r8
    3280:	01 90       	ld	r0, Z+
    3282:	0d 92       	st	X+, r0
    3284:	8a 95       	dec	r24
    3286:	e1 f7       	brne	.-8      	; 0x3280 <_Z13uhreinstellenv+0x65c>
    3288:	2d 88       	ldd	r2, Y+21	; 0x15
    328a:	3e 88       	ldd	r3, Y+22	; 0x16
    328c:	1b 2d       	mov	r17, r11
							for(uint8_t i = 0; i<buffersize;i++){
								oled.draw_ASCI(buffer[i],charsize*i,7*8);
    328e:	f1 01       	movw	r30, r2
    3290:	61 91       	ld	r22, Z+
    3292:	1f 01       	movw	r2, r30
    3294:	28 e3       	ldi	r18, 0x38	; 56
    3296:	41 2f       	mov	r20, r17
    3298:	86 e4       	ldi	r24, 0x46	; 70
    329a:	93 e0       	ldi	r25, 0x03	; 3
    329c:	0e 94 c8 06 	call	0xd90	; 0xd90 <_ZN7Display9draw_ASCIEhhh>
    32a0:	1a 5f       	subi	r17, 0xFA	; 250
							rtc.Tag=0;
							rtc.Monat=0;
							rtc.Jahr=0;
							pos=3;
							buffersize=sprintf(buffer,"Tag falsch");
							for(uint8_t i = 0; i<buffersize;i++){
    32a2:	1c 33       	cpi	r17, 0x3C	; 60
    32a4:	a1 f7       	brne	.-24     	; 0x328e <_Z13uhreinstellenv+0x66a>
    32a6:	6c c0       	rjmp	.+216    	; 0x3380 <_Z13uhreinstellenv+0x75c>
								oled.draw_ASCI(buffer[i],charsize*i,7*8);
							}
						}
					}
					else{
						if(rtc.Tag>=29){
    32a8:	f2 01       	movw	r30, r4
    32aa:	80 81       	ld	r24, Z
    32ac:	8d 31       	cpi	r24, 0x1D	; 29
    32ae:	00 f1       	brcs	.+64     	; 0x32f0 <_Z13uhreinstellenv+0x6cc>
							rtc.Tag=0;
    32b0:	10 82       	st	Z, r1
							rtc.Monat=0;
    32b2:	f6 01       	movw	r30, r12
    32b4:	10 82       	st	Z, r1
							rtc.Jahr=0;
    32b6:	e4 e9       	ldi	r30, 0x94	; 148
    32b8:	f7 e0       	ldi	r31, 0x07	; 7
    32ba:	10 82       	st	Z, r1
							pos=3;
							buffersize=sprintf(buffer,"Tag falsch");
    32bc:	8b e0       	ldi	r24, 0x0B	; 11
    32be:	e4 ef       	ldi	r30, 0xF4	; 244
    32c0:	f2 e0       	ldi	r31, 0x02	; 2
    32c2:	a7 2d       	mov	r26, r7
    32c4:	b8 2d       	mov	r27, r8
    32c6:	01 90       	ld	r0, Z+
    32c8:	0d 92       	st	X+, r0
    32ca:	8a 95       	dec	r24
    32cc:	e1 f7       	brne	.-8      	; 0x32c6 <_Z13uhreinstellenv+0x6a2>
    32ce:	2d 88       	ldd	r2, Y+21	; 0x15
    32d0:	3e 88       	ldd	r3, Y+22	; 0x16
    32d2:	1b 2d       	mov	r17, r11
							for(uint8_t i = 0; i<buffersize;i++){
								oled.draw_ASCI(buffer[i],charsize*i,7*8);
    32d4:	f1 01       	movw	r30, r2
    32d6:	61 91       	ld	r22, Z+
    32d8:	1f 01       	movw	r2, r30
    32da:	28 e3       	ldi	r18, 0x38	; 56
    32dc:	41 2f       	mov	r20, r17
    32de:	86 e4       	ldi	r24, 0x46	; 70
    32e0:	93 e0       	ldi	r25, 0x03	; 3
    32e2:	0e 94 c8 06 	call	0xd90	; 0xd90 <_ZN7Display9draw_ASCIEhhh>
    32e6:	1a 5f       	subi	r17, 0xFA	; 250
							rtc.Tag=0;
							rtc.Monat=0;
							rtc.Jahr=0;
							pos=3;
							buffersize=sprintf(buffer,"Tag falsch");
							for(uint8_t i = 0; i<buffersize;i++){
    32e8:	1c 33       	cpi	r17, 0x3C	; 60
    32ea:	a1 f7       	brne	.-24     	; 0x32d4 <_Z13uhreinstellenv+0x6b0>
    32ec:	4e c0       	rjmp	.+156    	; 0x338a <_Z13uhreinstellenv+0x766>
						}
					}
				}
				break;
			default:
				pos++;
    32ee:	93 94       	inc	r9
				break;
		}
		pos++;
    32f0:	93 94       	inc	r9
	
	oled.clearFrame();
	char buffer[20];
	uint8_t buffersize;
	uint8_t pos=0;
	while(pos<11){
    32f2:	fa e0       	ldi	r31, 0x0A	; 10
    32f4:	f9 15       	cp	r31, r9
    32f6:	08 f0       	brcs	.+2      	; 0x32fa <_Z13uhreinstellenv+0x6d6>
    32f8:	d4 cc       	rjmp	.-1624   	; 0x2ca2 <_Z13uhreinstellenv+0x7e>
				break;
		}
		pos++;
	}
	
	rtc.Sekunden		= 0;
    32fa:	10 92 8f 07 	sts	0x078F, r1
	rtc.HundSekunden	= 0;
    32fe:	10 92 90 07 	sts	0x0790, r1
	oled.clearFrame();
    3302:	86 e4       	ldi	r24, 0x46	; 70
    3304:	93 e0       	ldi	r25, 0x03	; 3
    3306:	0e 94 05 04 	call	0x80a	; 0x80a <_ZN7Display10clearFrameEv>
	rtc.ausgabedatumneu();
    330a:	8d e7       	ldi	r24, 0x7D	; 125
    330c:	97 e0       	ldi	r25, 0x07	; 7
    330e:	0e 94 78 26 	call	0x4cf0	; 0x4cf0 <_ZN3RTC15ausgabedatumneuEv>
	rtc.ausgabezeitneu();
    3312:	8d e7       	ldi	r24, 0x7D	; 125
    3314:	97 e0       	ldi	r25, 0x07	; 7
    3316:	0e 94 3f 26 	call	0x4c7e	; 0x4c7e <_ZN3RTC14ausgabezeitneuEv>
	rtc.RTCstart();
    331a:	8d e7       	ldi	r24, 0x7D	; 125
    331c:	97 e0       	ldi	r25, 0x07	; 7
    331e:	0e 94 53 27 	call	0x4ea6	; 0x4ea6 <_ZN3RTC8RTCstartEv>
    3322:	39 c0       	rjmp	.+114    	; 0x3396 <_Z13uhreinstellenv+0x772>

		oled.sendFrame();
		oled.clearFrame();
		switch (pos) {
			case 0:
				rtc.Stunden=Tastatur.ZahlenausTastatur()*10;
    3324:	ed e8       	ldi	r30, 0x8D	; 141
    3326:	f7 e0       	ldi	r31, 0x07	; 7
    3328:	80 83       	st	Z, r24
    332a:	33 c0       	rjmp	.+102    	; 0x3392 <_Z13uhreinstellenv+0x76e>
				if(rtc.Stunden>=24){
					rtc.Stunden=0;
					pos=-1;
    332c:	99 24       	eor	r9, r9
    332e:	9a 94       	dec	r9
    3330:	30 c0       	rjmp	.+96     	; 0x3392 <_Z13uhreinstellenv+0x76e>
				break;
			case 1:
				rtc.Stunden+=Tastatur.ZahlenausTastatur();
				if(rtc.Stunden>=24){
					rtc.Stunden=0;
					pos=-1;
    3332:	99 24       	eor	r9, r9
    3334:	9a 94       	dec	r9
    3336:	2d c0       	rjmp	.+90     	; 0x3392 <_Z13uhreinstellenv+0x76e>
				break;
			case 2:
				rtc.Minuten=Tastatur.ZahlenausTastatur()*10;
				if(rtc.Minuten>=60){
					rtc.Minuten=0;
					pos=1;
    3338:	99 24       	eor	r9, r9
    333a:	93 94       	inc	r9
    333c:	2a c0       	rjmp	.+84     	; 0x3392 <_Z13uhreinstellenv+0x76e>
				break;
			case 3:
				rtc.Minuten+=Tastatur.ZahlenausTastatur();
				if(rtc.Minuten>=60){
					rtc.Minuten=0;
					pos=1;
    333e:	99 24       	eor	r9, r9
    3340:	93 94       	inc	r9
    3342:	27 c0       	rjmp	.+78     	; 0x3392 <_Z13uhreinstellenv+0x76e>
				break;
			case 4:
				rtc.Tag=Tastatur.ZahlenausTastatur()*10;
				if(rtc.Tag>=32){
					rtc.Tag=0;
					pos=3;
    3344:	0f 2e       	mov	r0, r31
    3346:	f3 e0       	ldi	r31, 0x03	; 3
    3348:	9f 2e       	mov	r9, r31
    334a:	f0 2d       	mov	r31, r0
    334c:	22 c0       	rjmp	.+68     	; 0x3392 <_Z13uhreinstellenv+0x76e>
				break;
			case 5:
				rtc.Tag+=Tastatur.ZahlenausTastatur();
				if(rtc.Tag>=32){
					rtc.Tag=0;
					pos=3;
    334e:	0f 2e       	mov	r0, r31
    3350:	f3 e0       	ldi	r31, 0x03	; 3
    3352:	9f 2e       	mov	r9, r31
    3354:	f0 2d       	mov	r31, r0
    3356:	1d c0       	rjmp	.+58     	; 0x3392 <_Z13uhreinstellenv+0x76e>
				break;
			case 6:
				rtc.Monat=Tastatur.ZahlenausTastatur()*10;
				if(rtc.Monat>=13){
					rtc.Monat=0;
					pos=5;
    3358:	0f 2e       	mov	r0, r31
    335a:	f5 e0       	ldi	r31, 0x05	; 5
    335c:	9f 2e       	mov	r9, r31
    335e:	f0 2d       	mov	r31, r0
    3360:	18 c0       	rjmp	.+48     	; 0x3392 <_Z13uhreinstellenv+0x76e>
				}
				if(rtc.Monat==4||rtc.Monat==6||rtc.Monat==9||rtc.Monat==11){
					if(rtc.Tag>=31){
						rtc.Tag=0;
						rtc.Monat=0;
						pos=3;
    3362:	0f 2e       	mov	r0, r31
    3364:	f3 e0       	ldi	r31, 0x03	; 3
    3366:	9f 2e       	mov	r9, r31
    3368:	f0 2d       	mov	r31, r0
    336a:	13 c0       	rjmp	.+38     	; 0x3392 <_Z13uhreinstellenv+0x76e>
				}
				else if(rtc.Monat==2){
					if(rtc.Tag>=30){
						rtc.Tag=0;
						rtc.Monat=0;
						pos=3;
    336c:	0f 2e       	mov	r0, r31
    336e:	f3 e0       	ldi	r31, 0x03	; 3
    3370:	9f 2e       	mov	r9, r31
    3372:	f0 2d       	mov	r31, r0
    3374:	0e c0       	rjmp	.+28     	; 0x3392 <_Z13uhreinstellenv+0x76e>
				break;
			case 8:
				rtc.Jahr=Tastatur.ZahlenausTastatur()*10;
				if(rtc.Jahr>=50){
					rtc.Jahr=0;
					pos=7;
    3376:	0f 2e       	mov	r0, r31
    3378:	f7 e0       	ldi	r31, 0x07	; 7
    337a:	9f 2e       	mov	r9, r31
    337c:	f0 2d       	mov	r31, r0
    337e:	09 c0       	rjmp	.+18     	; 0x3392 <_Z13uhreinstellenv+0x76e>
						if (rtc.Tag>=30)
						{
							rtc.Tag=0;
							rtc.Monat=0;
							rtc.Jahr=0;
							pos=3;
    3380:	0f 2e       	mov	r0, r31
    3382:	f3 e0       	ldi	r31, 0x03	; 3
    3384:	9f 2e       	mov	r9, r31
    3386:	f0 2d       	mov	r31, r0
    3388:	04 c0       	rjmp	.+8      	; 0x3392 <_Z13uhreinstellenv+0x76e>
					else{
						if(rtc.Tag>=29){
							rtc.Tag=0;
							rtc.Monat=0;
							rtc.Jahr=0;
							pos=3;
    338a:	0f 2e       	mov	r0, r31
    338c:	f3 e0       	ldi	r31, 0x03	; 3
    338e:	9f 2e       	mov	r9, r31
    3390:	f0 2d       	mov	r31, r0
				break;
			default:
				pos++;
				break;
		}
		pos++;
    3392:	93 94       	inc	r9
    3394:	86 cc       	rjmp	.-1780   	; 0x2ca2 <_Z13uhreinstellenv+0x7e>
	rtc.HundSekunden	= 0;
	oled.clearFrame();
	rtc.ausgabedatumneu();
	rtc.ausgabezeitneu();
	rtc.RTCstart();
}
    3396:	66 96       	adiw	r28, 0x16	; 22
    3398:	0f b6       	in	r0, 0x3f	; 63
    339a:	f8 94       	cli
    339c:	de bf       	out	0x3e, r29	; 62
    339e:	0f be       	out	0x3f, r0	; 63
    33a0:	cd bf       	out	0x3d, r28	; 61
    33a2:	df 91       	pop	r29
    33a4:	cf 91       	pop	r28
    33a6:	1f 91       	pop	r17
    33a8:	0f 91       	pop	r16
    33aa:	ff 90       	pop	r15
    33ac:	ef 90       	pop	r14
    33ae:	df 90       	pop	r13
    33b0:	cf 90       	pop	r12
    33b2:	bf 90       	pop	r11
    33b4:	af 90       	pop	r10
    33b6:	9f 90       	pop	r9
    33b8:	8f 90       	pop	r8
    33ba:	7f 90       	pop	r7
    33bc:	6f 90       	pop	r6
    33be:	5f 90       	pop	r5
    33c0:	4f 90       	pop	r4
    33c2:	3f 90       	pop	r3
    33c4:	2f 90       	pop	r2
    33c6:	08 95       	ret

000033c8 <__vector_11>:
uint8_t pos;		//Handler fuer die Einganbe von Zahlen

//Ausgelagerte Sammlung der einzelnen Seitenlayouts
#include "Seiten.h"

ISR(TIMER2_OVF_vect){	//Vektor fuer die RTC
    33c8:	1f 92       	push	r1
    33ca:	0f 92       	push	r0
    33cc:	0f b6       	in	r0, 0x3f	; 63
    33ce:	0f 92       	push	r0
    33d0:	11 24       	eor	r1, r1
    33d2:	0b b6       	in	r0, 0x3b	; 59
    33d4:	0f 92       	push	r0
    33d6:	8f 93       	push	r24
    33d8:	ef 93       	push	r30
    33da:	ff 93       	push	r31
	TCNT2=TIMER2RTCTIME;
    33dc:	10 92 b2 00 	sts	0x00B2, r1
	rtc.Sekunden++;
    33e0:	ef e8       	ldi	r30, 0x8F	; 143
    33e2:	f7 e0       	ldi	r31, 0x07	; 7
    33e4:	80 81       	ld	r24, Z
    33e6:	8f 5f       	subi	r24, 0xFF	; 255
    33e8:	80 83       	st	Z, r24
	rtc.interupts|= (1<<sekundeninterupt);
    33ea:	e5 e9       	ldi	r30, 0x95	; 149
    33ec:	f7 e0       	ldi	r31, 0x07	; 7
    33ee:	80 81       	ld	r24, Z
    33f0:	82 60       	ori	r24, 0x02	; 2
    33f2:	80 83       	st	Z, r24
}
    33f4:	ff 91       	pop	r31
    33f6:	ef 91       	pop	r30
    33f8:	8f 91       	pop	r24
    33fa:	0f 90       	pop	r0
    33fc:	0b be       	out	0x3b, r0	; 59
    33fe:	0f 90       	pop	r0
    3400:	0f be       	out	0x3f, r0	; 63
    3402:	0f 90       	pop	r0
    3404:	1f 90       	pop	r1
    3406:	18 95       	reti

00003408 <_Z15geschwindigkeitf>:

double geschw;
double strecke;
double maxgeschw;
uint32_t Fahrtzeit;
void geschwindigkeit(float durch){
    3408:	cf 92       	push	r12
    340a:	df 92       	push	r13
    340c:	ef 92       	push	r14
    340e:	ff 92       	push	r15
    3410:	cf 93       	push	r28
    3412:	df 93       	push	r29
	//Einholen der Daten und ruecksetzen
	uint16_t zaehlungen = TCNT1;
    3414:	e4 e8       	ldi	r30, 0x84	; 132
    3416:	f0 e0       	ldi	r31, 0x00	; 0
    3418:	c0 81       	ld	r28, Z
    341a:	d1 81       	ldd	r29, Z+1	; 0x01
	TCNT1 = 0;
    341c:	11 82       	std	Z+1, r1	; 0x01
    341e:	10 82       	st	Z, r1
	//Berechnung
	double umlaufzeit = (REEDMS/1000.0+(zaehlungen/zaehlungenprozeiteinheit)*zeitproachtzaehlungen);
	geschw = (durch)*M_PI*3.6;
    3420:	2b ed       	ldi	r18, 0xDB	; 219
    3422:	3f e0       	ldi	r19, 0x0F	; 15
    3424:	49 e4       	ldi	r20, 0x49	; 73
    3426:	50 e4       	ldi	r21, 0x40	; 64
    3428:	0e 94 56 2a 	call	0x54ac	; 0x54ac <__mulsf3>
    342c:	26 e6       	ldi	r18, 0x66	; 102
    342e:	36 e6       	ldi	r19, 0x66	; 102
    3430:	46 e6       	ldi	r20, 0x66	; 102
    3432:	50 e4       	ldi	r21, 0x40	; 64
    3434:	0e 94 56 2a 	call	0x54ac	; 0x54ac <__mulsf3>
    3438:	6b 01       	movw	r12, r22
    343a:	7c 01       	movw	r14, r24
void geschwindigkeit(float durch){
	//Einholen der Daten und ruecksetzen
	uint16_t zaehlungen = TCNT1;
	TCNT1 = 0;
	//Berechnung
	double umlaufzeit = (REEDMS/1000.0+(zaehlungen/zaehlungenprozeiteinheit)*zeitproachtzaehlungen);
    343c:	be 01       	movw	r22, r28
    343e:	80 e0       	ldi	r24, 0x00	; 0
    3440:	90 e0       	ldi	r25, 0x00	; 0
    3442:	0e 94 f6 28 	call	0x51ec	; 0x51ec <__floatunsisf>
    3446:	20 e0       	ldi	r18, 0x00	; 0
    3448:	30 e0       	ldi	r19, 0x00	; 0
    344a:	40 e0       	ldi	r20, 0x00	; 0
    344c:	5e e3       	ldi	r21, 0x3E	; 62
    344e:	0e 94 56 2a 	call	0x54ac	; 0x54ac <__mulsf3>
    3452:	2d eb       	ldi	r18, 0xBD	; 189
    3454:	37 e3       	ldi	r19, 0x37	; 55
    3456:	46 e8       	ldi	r20, 0x86	; 134
    3458:	5a e3       	ldi	r21, 0x3A	; 58
    345a:	0e 94 56 2a 	call	0x54ac	; 0x54ac <__mulsf3>
    345e:	2a e0       	ldi	r18, 0x0A	; 10
    3460:	37 ed       	ldi	r19, 0xD7	; 215
    3462:	43 ea       	ldi	r20, 0xA3	; 163
    3464:	5b e3       	ldi	r21, 0x3B	; 59
    3466:	0e 94 90 27 	call	0x4f20	; 0x4f20 <__addsf3>
    346a:	9b 01       	movw	r18, r22
    346c:	ac 01       	movw	r20, r24
	geschw = (durch)*M_PI*3.6;
	geschw /= umlaufzeit;
    346e:	c7 01       	movw	r24, r14
    3470:	b6 01       	movw	r22, r12
    3472:	0e 94 5d 28 	call	0x50ba	; 0x50ba <__divsf3>
    3476:	6b 01       	movw	r12, r22
    3478:	7c 01       	movw	r14, r24
	if (geschw >=160)
    347a:	20 e0       	ldi	r18, 0x00	; 0
    347c:	30 e0       	ldi	r19, 0x00	; 0
    347e:	40 e2       	ldi	r20, 0x20	; 32
    3480:	53 e4       	ldi	r21, 0x43	; 67
    3482:	0e 94 06 2a 	call	0x540c	; 0x540c <__gesf2>
    3486:	88 23       	and	r24, r24
    3488:	4c f4       	brge	.+18     	; 0x349c <_Z15geschwindigkeitf+0x94>
	uint16_t zaehlungen = TCNT1;
	TCNT1 = 0;
	//Berechnung
	double umlaufzeit = (REEDMS/1000.0+(zaehlungen/zaehlungenprozeiteinheit)*zeitproachtzaehlungen);
	geschw = (durch)*M_PI*3.6;
	geschw /= umlaufzeit;
    348a:	c0 92 24 03 	sts	0x0324, r12
    348e:	d0 92 25 03 	sts	0x0325, r13
    3492:	e0 92 26 03 	sts	0x0326, r14
    3496:	f0 92 27 03 	sts	0x0327, r15
    349a:	08 c0       	rjmp	.+16     	; 0x34ac <_Z15geschwindigkeitf+0xa4>
	if (geschw >=160)
	{
		geschw=0;
    349c:	10 92 24 03 	sts	0x0324, r1
    34a0:	10 92 25 03 	sts	0x0325, r1
    34a4:	10 92 26 03 	sts	0x0326, r1
    34a8:	10 92 27 03 	sts	0x0327, r1
	}
}
    34ac:	df 91       	pop	r29
    34ae:	cf 91       	pop	r28
    34b0:	ff 90       	pop	r15
    34b2:	ef 90       	pop	r14
    34b4:	df 90       	pop	r13
    34b6:	cf 90       	pop	r12
    34b8:	08 95       	ret

000034ba <_Z13reed_debouncePVhh>:

uint8_t reed_debounce(volatile uint8_t *port, uint8_t pin)
{
	if ( (*port & (1 << pin)) )
    34ba:	fc 01       	movw	r30, r24
    34bc:	20 81       	ld	r18, Z
    34be:	30 e0       	ldi	r19, 0x00	; 0
    34c0:	06 2e       	mov	r0, r22
    34c2:	02 c0       	rjmp	.+4      	; 0x34c8 <_Z13reed_debouncePVhh+0xe>
    34c4:	35 95       	asr	r19
    34c6:	27 95       	ror	r18
    34c8:	0a 94       	dec	r0
    34ca:	e2 f7       	brpl	.-8      	; 0x34c4 <_Z13reed_debouncePVhh+0xa>
    34cc:	20 ff       	sbrs	r18, 0
    34ce:	17 c0       	rjmp	.+46     	; 0x34fe <_Z13reed_debouncePVhh+0x44>
    34d0:	ef e0       	ldi	r30, 0x0F	; 15
    34d2:	f7 e2       	ldi	r31, 0x27	; 39
    34d4:	31 97       	sbiw	r30, 0x01	; 1
    34d6:	f1 f7       	brne	.-4      	; 0x34d4 <_Z13reed_debouncePVhh+0x1a>
    34d8:	00 c0       	rjmp	.+0      	; 0x34da <_Z13reed_debouncePVhh+0x20>
    34da:	00 00       	nop
	{
		/* Pin wurde auf Masse gezogen, ms warten   */
		_delay_ms(REEDMS);
		if ( !(*port & (1 << pin)) )
    34dc:	fc 01       	movw	r30, r24
    34de:	80 81       	ld	r24, Z
    34e0:	90 e0       	ldi	r25, 0x00	; 0
    34e2:	9c 01       	movw	r18, r24
    34e4:	02 c0       	rjmp	.+4      	; 0x34ea <_Z13reed_debouncePVhh+0x30>
    34e6:	35 95       	asr	r19
    34e8:	27 95       	ror	r18
    34ea:	6a 95       	dec	r22
    34ec:	e2 f7       	brpl	.-8      	; 0x34e6 <_Z13reed_debouncePVhh+0x2c>
    34ee:	20 fd       	sbrc	r18, 0
    34f0:	08 c0       	rjmp	.+16     	; 0x3502 <_Z13reed_debouncePVhh+0x48>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    34f2:	32 e0       	ldi	r19, 0x02	; 2
    34f4:	3a 95       	dec	r19
    34f6:	f1 f7       	brne	.-4      	; 0x34f4 <_Z13reed_debouncePVhh+0x3a>
    34f8:	00 c0       	rjmp	.+0      	; 0x34fa <_Z13reed_debouncePVhh+0x40>
		{
			/* Anwender Zeit zum Loslassen des Tasters geben */
			_delay_us(1);
			return 1;
    34fa:	81 e0       	ldi	r24, 0x01	; 1
    34fc:	08 95       	ret
		}
	}
	return 0;
    34fe:	80 e0       	ldi	r24, 0x00	; 0
    3500:	08 95       	ret
    3502:	80 e0       	ldi	r24, 0x00	; 0
}
    3504:	08 95       	ret

00003506 <_Z15initialisierungv>:
    }
}

void initialisierung(){
	//nullen der Flagregister
	rtc.interupts=0;
    3506:	10 92 95 07 	sts	0x0795, r1
	anzeige=0;
    350a:	10 92 2a 03 	sts	0x032A, r1
    350e:	10 92 29 03 	sts	0x0329, r1
	pos=0;
    3512:	10 92 28 03 	sts	0x0328, r1
	//initialisieren des Zaehler fuer die Winkelgeschw sowie den Timer
	geschw=0;
    3516:	10 92 24 03 	sts	0x0324, r1
    351a:	10 92 25 03 	sts	0x0325, r1
    351e:	10 92 26 03 	sts	0x0326, r1
    3522:	10 92 27 03 	sts	0x0327, r1
	strecke = 0;
    3526:	10 92 20 03 	sts	0x0320, r1
    352a:	10 92 21 03 	sts	0x0321, r1
    352e:	10 92 22 03 	sts	0x0322, r1
    3532:	10 92 23 03 	sts	0x0323, r1
	maxgeschw = 0;
    3536:	10 92 1c 03 	sts	0x031C, r1
    353a:	10 92 1d 03 	sts	0x031D, r1
    353e:	10 92 1e 03 	sts	0x031E, r1
    3542:	10 92 1f 03 	sts	0x031F, r1
	Fahrtzeit = 0;
    3546:	10 92 18 03 	sts	0x0318, r1
    354a:	10 92 19 03 	sts	0x0319, r1
    354e:	10 92 1a 03 	sts	0x031A, r1
    3552:	10 92 1b 03 	sts	0x031B, r1
	TCNT1=0;
    3556:	10 92 85 00 	sts	0x0085, r1
    355a:	10 92 84 00 	sts	0x0084, r1
	//Tastatur inm Contruktor initialisiert
	//Eingang fuer den Reedkontak schalten mit internem Pullup
	DDRA |= ((1<<PORTA6));
    355e:	0e 9a       	sbi	0x01, 6	; 1
	PORTA |= (1<<PORTA6);
    3560:	16 9a       	sbi	0x02, 6	; 2
	//Ausgabe einstellen
	//LED.on();
	//Vibrationsmotor.on();
	//Display
	oled.InitializeDisplay();
    3562:	86 e4       	ldi	r24, 0x46	; 70
    3564:	93 e0       	ldi	r25, 0x03	; 3
    3566:	0e 94 2c 04 	call	0x858	; 0x858 <_ZN7Display17InitializeDisplayEv>
	//initialisierung wird im konstruktor vorgenommen
	oled.clearFrame();
    356a:	86 e4       	ldi	r24, 0x46	; 70
    356c:	93 e0       	ldi	r25, 0x03	; 3
    356e:	0e 94 05 04 	call	0x80a	; 0x80a <_ZN7Display10clearFrameEv>
	//HMC5883L initialisieren
	//kompass.initialize_HMC5883L();
	//initialisierung wird im Konstruktor erledigt
	
	//ADC Initialisieren auf CH0
	ADMUX = (1<<REFS0);
    3572:	80 e4       	ldi	r24, 0x40	; 64
    3574:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA = (1<<ADPS1) | (1<<ADPS0);
    3578:	ea e7       	ldi	r30, 0x7A	; 122
    357a:	f0 e0       	ldi	r31, 0x00	; 0
    357c:	83 e0       	ldi	r24, 0x03	; 3
    357e:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADEN);
    3580:	80 81       	ld	r24, Z
    3582:	80 68       	ori	r24, 0x80	; 128
    3584:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);
    3586:	80 81       	ld	r24, Z
    3588:	80 64       	ori	r24, 0x40	; 64
    358a:	80 83       	st	Z, r24
	while (ADCSRA & (1<<ADSC) ) {}
    358c:	80 81       	ld	r24, Z
    358e:	86 fd       	sbrc	r24, 6
    3590:	fd cf       	rjmp	.-6      	; 0x358c <_Z15initialisierungv+0x86>
	(void) ADCW;
    3592:	80 91 78 00 	lds	r24, 0x0078
    3596:	90 91 79 00 	lds	r25, 0x0079
	//Wilkommensanzeige
	willkommenpage();
    359a:	0e 94 6b 0a 	call	0x14d6	; 0x14d6 <_Z14willkommenpagev>
	//Uhreinstellungen
	//uhreinstellen();
	//*************************************************
	//Nur Test, damit es schneller geht beim Start
	rtc.dummyeinst();
    359e:	8d e7       	ldi	r24, 0x7D	; 125
    35a0:	97 e0       	ldi	r25, 0x07	; 7
    35a2:	0e 94 3f 27 	call	0x4e7e	; 0x4e7e <_ZN3RTC10dummyeinstEv>
	//*********************************
	rtc.RTCstart();
    35a6:	8d e7       	ldi	r24, 0x7D	; 125
    35a8:	97 e0       	ldi	r25, 0x07	; 7
    35aa:	0e 94 53 27 	call	0x4ea6	; 0x4ea6 <_ZN3RTC8RTCstartEv>
	//ausgabe starten
	anzeige|=(1<<Uhrflag);
    35ae:	80 91 29 03 	lds	r24, 0x0329
    35b2:	90 91 2a 03 	lds	r25, 0x032A
    35b6:	81 60       	ori	r24, 0x01	; 1
    35b8:	90 93 2a 03 	sts	0x032A, r25
    35bc:	80 93 29 03 	sts	0x0329, r24
	sei();
    35c0:	78 94       	sei
    35c2:	08 95       	ret

000035c4 <_Z19maininterupthandlerv>:
	//interupt dierekt aus der rtc
	//if((rtc.interupts & (1<<hundinterupt))){
	//rtc.zeit();
	//rtc.interupts&=~(1<<hundinterupt);
	//}
	if ((anzeige&(1<<Fahradflag)))
    35c4:	80 91 29 03 	lds	r24, 0x0329
    35c8:	81 ff       	sbrs	r24, 1
    35ca:	0b c0       	rjmp	.+22     	; 0x35e2 <_Z19maininterupthandlerv+0x1e>
	{
		//debounce Funktion fuer den Reedswitch
		if (reed_debounce(&PINA,PINA7))
    35cc:	67 e0       	ldi	r22, 0x07	; 7
    35ce:	80 e2       	ldi	r24, 0x20	; 32
    35d0:	90 e0       	ldi	r25, 0x00	; 0
    35d2:	73 df       	rcall	.-282    	; 0x34ba <_Z13reed_debouncePVhh>
    35d4:	88 23       	and	r24, r24
    35d6:	29 f0       	breq	.+10     	; 0x35e2 <_Z19maininterupthandlerv+0x1e>
		{
			//Durchmesser ist 28 Zoll
			geschwindigkeit(28.0*2.54/100.0);
    35d8:	63 e3       	ldi	r22, 0x33	; 51
    35da:	71 e1       	ldi	r23, 0x11	; 17
    35dc:	86 e3       	ldi	r24, 0x36	; 54
    35de:	9f e3       	ldi	r25, 0x3F	; 63
    35e0:	13 df       	rcall	.-474    	; 0x3408 <_Z15geschwindigkeitf>
		}
	}
	if ((rtc.interupts&(1<<Weckeractiv)))
    35e2:	20 91 95 07 	lds	r18, 0x0795
    35e6:	82 2f       	mov	r24, r18
    35e8:	88 71       	andi	r24, 0x18	; 24
	{
		if ((rtc.interupts&(1<<Weckerein)))
    35ea:	88 31       	cpi	r24, 0x18	; 24
    35ec:	61 f4       	brne	.+24     	; 0x3606 <_Z19maininterupthandlerv+0x42>
		{
			anzeige |= (1<<blinkflag) | (1<<refreshdisplay);
    35ee:	80 91 29 03 	lds	r24, 0x0329
    35f2:	90 91 2a 03 	lds	r25, 0x032A
    35f6:	90 6c       	ori	r25, 0xC0	; 192
    35f8:	90 93 2a 03 	sts	0x032A, r25
    35fc:	80 93 29 03 	sts	0x0329, r24
			rtc.interupts &= ~(1<<Weckerein);
    3600:	27 7f       	andi	r18, 0xF7	; 247
    3602:	20 93 95 07 	sts	0x0795, r18
    3606:	08 95       	ret

00003608 <_Z14anzeigehandlerv>:
		}
	}
}

void anzeigehandler(){
    3608:	4f 92       	push	r4
    360a:	5f 92       	push	r5
    360c:	6f 92       	push	r6
    360e:	7f 92       	push	r7
    3610:	af 92       	push	r10
    3612:	bf 92       	push	r11
    3614:	cf 92       	push	r12
    3616:	df 92       	push	r13
    3618:	ef 92       	push	r14
    361a:	ff 92       	push	r15
    361c:	0f 93       	push	r16
    361e:	1f 93       	push	r17
    3620:	cf 93       	push	r28
    3622:	df 93       	push	r29
	//Handler fuer 1Hz Flag
	if ((rtc.interupts & (1<<sekundeninterupt)))
    3624:	80 91 95 07 	lds	r24, 0x0795
    3628:	81 ff       	sbrs	r24, 1
    362a:	7f c1       	rjmp	.+766    	; 0x392a <_Z14anzeigehandlerv+0x322>
	{
		rtc.zeit();
    362c:	8d e7       	ldi	r24, 0x7D	; 125
    362e:	97 e0       	ldi	r25, 0x07	; 7
    3630:	0e 94 1a 27 	call	0x4e34	; 0x4e34 <_ZN3RTC4zeitEv>
		//Handler fuer die Anzeige der Seiten
		//Die einzelnen Funktionen beschreiben nur den Framebuffer und nicht dierekt das Display
		if ((anzeige&(1<<menueflag)) && (anzeige&(1<<Uhrflag)))
    3634:	80 91 29 03 	lds	r24, 0x0329
    3638:	90 91 2a 03 	lds	r25, 0x032A
    363c:	9c 01       	movw	r18, r24
    363e:	21 70       	andi	r18, 0x01	; 1
    3640:	30 72       	andi	r19, 0x20	; 32
    3642:	21 30       	cpi	r18, 0x01	; 1
    3644:	30 42       	sbci	r19, 0x20	; 32
    3646:	61 f4       	brne	.+24     	; 0x3660 <_Z14anzeigehandlerv+0x58>
		{
			menue_uhr();
    3648:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <_Z9menue_uhrv>
			anzeige|=(1<<refreshdisplay);
    364c:	80 91 29 03 	lds	r24, 0x0329
    3650:	90 91 2a 03 	lds	r25, 0x032A
    3654:	90 68       	ori	r25, 0x80	; 128
    3656:	90 93 2a 03 	sts	0x032A, r25
    365a:	80 93 29 03 	sts	0x0329, r24
    365e:	4d c1       	rjmp	.+666    	; 0x38fa <_Z14anzeigehandlerv+0x2f2>
    3660:	9c 01       	movw	r18, r24
    3662:	28 70       	andi	r18, 0x08	; 8
    3664:	30 72       	andi	r19, 0x20	; 32
		}
		else if ((anzeige&(1<<menueflag)) && (anzeige&(1<<Einstellungsflag)))
    3666:	28 30       	cpi	r18, 0x08	; 8
    3668:	30 42       	sbci	r19, 0x20	; 32
    366a:	61 f4       	brne	.+24     	; 0x3684 <_Z14anzeigehandlerv+0x7c>
		{
			menue_einst();
    366c:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <_Z11menue_einstv>
			anzeige|=(1<<refreshdisplay);
    3670:	80 91 29 03 	lds	r24, 0x0329
    3674:	90 91 2a 03 	lds	r25, 0x032A
    3678:	90 68       	ori	r25, 0x80	; 128
    367a:	90 93 2a 03 	sts	0x032A, r25
    367e:	80 93 29 03 	sts	0x0329, r24
    3682:	3b c1       	rjmp	.+630    	; 0x38fa <_Z14anzeigehandlerv+0x2f2>
		}
		else if ((anzeige&(1<<menueflag)))
    3684:	95 ff       	sbrs	r25, 5
    3686:	0c c0       	rjmp	.+24     	; 0x36a0 <_Z14anzeigehandlerv+0x98>
		{
			menue_haupt();
    3688:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <_Z11menue_hauptv>
			anzeige|=(1<<refreshdisplay);
    368c:	80 91 29 03 	lds	r24, 0x0329
    3690:	90 91 2a 03 	lds	r25, 0x032A
    3694:	90 68       	ori	r25, 0x80	; 128
    3696:	90 93 2a 03 	sts	0x032A, r25
    369a:	80 93 29 03 	sts	0x0329, r24
    369e:	2d c1       	rjmp	.+602    	; 0x38fa <_Z14anzeigehandlerv+0x2f2>
		}
		else if ((anzeige&(1<<Kompasgaineinstellenflag)))
    36a0:	85 ff       	sbrs	r24, 5
    36a2:	0c c0       	rjmp	.+24     	; 0x36bc <_Z14anzeigehandlerv+0xb4>
		{
			Gaineinstellen();
    36a4:	0e 94 08 12 	call	0x2410	; 0x2410 <_Z14Gaineinstellenv>
			anzeige|=(1<<refreshdisplay);
    36a8:	80 91 29 03 	lds	r24, 0x0329
    36ac:	90 91 2a 03 	lds	r25, 0x032A
    36b0:	90 68       	ori	r25, 0x80	; 128
    36b2:	90 93 2a 03 	sts	0x032A, r25
    36b6:	80 93 29 03 	sts	0x0329, r24
    36ba:	1f c1       	rjmp	.+574    	; 0x38fa <_Z14anzeigehandlerv+0x2f2>
		}
		else if ((anzeige&(1<<Uhrflag)))
    36bc:	80 ff       	sbrs	r24, 0
    36be:	0c c0       	rjmp	.+24     	; 0x36d8 <_Z14anzeigehandlerv+0xd0>
		{
			uhranzeigen();
    36c0:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <_Z11uhranzeigenv>
			anzeige|=(1<<refreshdisplay);
    36c4:	80 91 29 03 	lds	r24, 0x0329
    36c8:	90 91 2a 03 	lds	r25, 0x032A
    36cc:	90 68       	ori	r25, 0x80	; 128
    36ce:	90 93 2a 03 	sts	0x032A, r25
    36d2:	80 93 29 03 	sts	0x0329, r24
    36d6:	11 c1       	rjmp	.+546    	; 0x38fa <_Z14anzeigehandlerv+0x2f2>
		}
		else if ((anzeige&(1<<Kompasflag)))
    36d8:	82 ff       	sbrs	r24, 2
    36da:	0f c0       	rjmp	.+30     	; 0x36fa <_Z14anzeigehandlerv+0xf2>
		{
			anzeige_kompass(kompass.angle());
    36dc:	88 e9       	ldi	r24, 0x98	; 152
    36de:	97 e0       	ldi	r25, 0x07	; 7
    36e0:	6f d7       	rcall	.+3806   	; 0x45c0 <_ZN7Kompass5angleEv>
    36e2:	0e 94 ee 12 	call	0x25dc	; 0x25dc <_Z15anzeige_kompassd>
			anzeige|=(1<<refreshdisplay);
    36e6:	80 91 29 03 	lds	r24, 0x0329
    36ea:	90 91 2a 03 	lds	r25, 0x032A
    36ee:	90 68       	ori	r25, 0x80	; 128
    36f0:	90 93 2a 03 	sts	0x032A, r25
    36f4:	80 93 29 03 	sts	0x0329, r24
    36f8:	00 c1       	rjmp	.+512    	; 0x38fa <_Z14anzeigehandlerv+0x2f2>
		}
		else if ((anzeige&(1<<Fahradflag)))
    36fa:	81 ff       	sbrs	r24, 1
    36fc:	95 c0       	rjmp	.+298    	; 0x3828 <_Z14anzeigehandlerv+0x220>
		{
			//fahradschirm(12.3,kompass.angle());
			if (geschw>maxgeschw)
    36fe:	40 90 24 03 	lds	r4, 0x0324
    3702:	50 90 25 03 	lds	r5, 0x0325
    3706:	60 90 26 03 	lds	r6, 0x0326
    370a:	70 90 27 03 	lds	r7, 0x0327
    370e:	20 91 1c 03 	lds	r18, 0x031C
    3712:	30 91 1d 03 	lds	r19, 0x031D
    3716:	40 91 1e 03 	lds	r20, 0x031E
    371a:	50 91 1f 03 	lds	r21, 0x031F
    371e:	c3 01       	movw	r24, r6
    3720:	b2 01       	movw	r22, r4
    3722:	0e 94 06 2a 	call	0x540c	; 0x540c <__gesf2>
    3726:	18 16       	cp	r1, r24
    3728:	44 f4       	brge	.+16     	; 0x373a <_Z14anzeigehandlerv+0x132>
			{
				maxgeschw=geschw;
    372a:	40 92 1c 03 	sts	0x031C, r4
    372e:	50 92 1d 03 	sts	0x031D, r5
    3732:	60 92 1e 03 	sts	0x031E, r6
    3736:	70 92 1f 03 	sts	0x031F, r7
			}
			if (geschw != 0)
    373a:	20 e0       	ldi	r18, 0x00	; 0
    373c:	30 e0       	ldi	r19, 0x00	; 0
    373e:	a9 01       	movw	r20, r18
    3740:	c3 01       	movw	r24, r6
    3742:	b2 01       	movw	r22, r4
    3744:	0e 94 56 28 	call	0x50ac	; 0x50ac <__cmpsf2>
    3748:	88 23       	and	r24, r24
    374a:	99 f0       	breq	.+38     	; 0x3772 <_Z14anzeigehandlerv+0x16a>
			{
				Fahrtzeit++;
    374c:	80 91 18 03 	lds	r24, 0x0318
    3750:	90 91 19 03 	lds	r25, 0x0319
    3754:	a0 91 1a 03 	lds	r26, 0x031A
    3758:	b0 91 1b 03 	lds	r27, 0x031B
    375c:	01 96       	adiw	r24, 0x01	; 1
    375e:	a1 1d       	adc	r26, r1
    3760:	b1 1d       	adc	r27, r1
    3762:	80 93 18 03 	sts	0x0318, r24
    3766:	90 93 19 03 	sts	0x0319, r25
    376a:	a0 93 1a 03 	sts	0x031A, r26
    376e:	b0 93 1b 03 	sts	0x031B, r27
			}
			strecke+=geschw/3.6;
    3772:	26 e6       	ldi	r18, 0x66	; 102
    3774:	36 e6       	ldi	r19, 0x66	; 102
    3776:	46 e6       	ldi	r20, 0x66	; 102
    3778:	50 e4       	ldi	r21, 0x40	; 64
    377a:	c3 01       	movw	r24, r6
    377c:	b2 01       	movw	r22, r4
    377e:	0e 94 5d 28 	call	0x50ba	; 0x50ba <__divsf3>
    3782:	20 91 20 03 	lds	r18, 0x0320
    3786:	30 91 21 03 	lds	r19, 0x0321
    378a:	40 91 22 03 	lds	r20, 0x0322
    378e:	50 91 23 03 	lds	r21, 0x0323
    3792:	0e 94 90 27 	call	0x4f20	; 0x4f20 <__addsf3>
    3796:	2b 01       	movw	r4, r22
    3798:	3c 01       	movw	r6, r24
    379a:	60 93 20 03 	sts	0x0320, r22
    379e:	70 93 21 03 	sts	0x0321, r23
    37a2:	80 93 22 03 	sts	0x0322, r24
    37a6:	90 93 23 03 	sts	0x0323, r25
			fahradschirm(geschw,kompass.angle(),strecke,maxgeschw, Fahrtzeit);
    37aa:	c0 91 18 03 	lds	r28, 0x0318
    37ae:	d0 91 19 03 	lds	r29, 0x0319
    37b2:	10 91 1a 03 	lds	r17, 0x031A
    37b6:	00 91 1b 03 	lds	r16, 0x031B
    37ba:	a0 90 1c 03 	lds	r10, 0x031C
    37be:	b0 90 1d 03 	lds	r11, 0x031D
    37c2:	c0 90 1e 03 	lds	r12, 0x031E
    37c6:	d0 90 1f 03 	lds	r13, 0x031F
    37ca:	88 e9       	ldi	r24, 0x98	; 152
    37cc:	97 e0       	ldi	r25, 0x07	; 7
    37ce:	f8 d6       	rcall	.+3568   	; 0x45c0 <_ZN7Kompass5angleEv>
    37d0:	9b 01       	movw	r18, r22
    37d2:	ac 01       	movw	r20, r24
    37d4:	60 91 24 03 	lds	r22, 0x0324
    37d8:	70 91 25 03 	lds	r23, 0x0325
    37dc:	80 91 26 03 	lds	r24, 0x0326
    37e0:	90 91 27 03 	lds	r25, 0x0327
    37e4:	0f 93       	push	r16
    37e6:	1f 93       	push	r17
    37e8:	df 93       	push	r29
    37ea:	cf 93       	push	r28
    37ec:	83 01       	movw	r16, r6
    37ee:	72 01       	movw	r14, r4
    37f0:	0e 94 a8 10 	call	0x2150	; 0x2150 <_Z12fahradschirmddddm>
			if (rtc.Sekunden%2)
    37f4:	80 91 8f 07 	lds	r24, 0x078F
    37f8:	0f 90       	pop	r0
    37fa:	0f 90       	pop	r0
    37fc:	0f 90       	pop	r0
    37fe:	0f 90       	pop	r0
    3800:	80 ff       	sbrs	r24, 0
    3802:	08 c0       	rjmp	.+16     	; 0x3814 <_Z14anzeigehandlerv+0x20c>
			{
				geschw=0;
    3804:	10 92 24 03 	sts	0x0324, r1
    3808:	10 92 25 03 	sts	0x0325, r1
    380c:	10 92 26 03 	sts	0x0326, r1
    3810:	10 92 27 03 	sts	0x0327, r1
			}
			anzeige|=(1<<refreshdisplay);
    3814:	80 91 29 03 	lds	r24, 0x0329
    3818:	90 91 2a 03 	lds	r25, 0x032A
    381c:	90 68       	ori	r25, 0x80	; 128
    381e:	90 93 2a 03 	sts	0x032A, r25
    3822:	80 93 29 03 	sts	0x0329, r24
    3826:	69 c0       	rjmp	.+210    	; 0x38fa <_Z14anzeigehandlerv+0x2f2>
    3828:	9c 01       	movw	r18, r24
    382a:	28 74       	andi	r18, 0x48	; 72
    382c:	33 27       	eor	r19, r19
		}
		else if ((anzeige&(1<<Einstellungsflag)) && (anzeige&(1<<Timerflag)))
    382e:	28 34       	cpi	r18, 0x48	; 72
    3830:	31 05       	cpc	r19, r1
    3832:	61 f4       	brne	.+24     	; 0x384c <_Z14anzeigehandlerv+0x244>
		{
			timerseite();
    3834:	0e 94 00 14 	call	0x2800	; 0x2800 <_Z10timerseitev>
			anzeige|=(1<<refreshdisplay);
    3838:	80 91 29 03 	lds	r24, 0x0329
    383c:	90 91 2a 03 	lds	r25, 0x032A
    3840:	90 68       	ori	r25, 0x80	; 128
    3842:	90 93 2a 03 	sts	0x032A, r25
    3846:	80 93 29 03 	sts	0x0329, r24
    384a:	57 c0       	rjmp	.+174    	; 0x38fa <_Z14anzeigehandlerv+0x2f2>
		}
		else if ((anzeige&(1<<Stoppuhrflag)))
    384c:	87 ff       	sbrs	r24, 7
    384e:	16 c0       	rjmp	.+44     	; 0x387c <_Z14anzeigehandlerv+0x274>
		{
			if ((anzeige&(1<<Einstellungsflag)))
    3850:	83 ff       	sbrs	r24, 3
    3852:	09 c0       	rjmp	.+18     	; 0x3866 <_Z14anzeigehandlerv+0x25e>
			{
				stoppuhr.Sekunden++;
    3854:	e9 e5       	ldi	r30, 0x59	; 89
    3856:	f7 e0       	ldi	r31, 0x07	; 7
    3858:	80 81       	ld	r24, Z
    385a:	8f 5f       	subi	r24, 0xFF	; 255
    385c:	80 83       	st	Z, r24
				stoppuhr.zeit();
    385e:	87 e4       	ldi	r24, 0x47	; 71
    3860:	97 e0       	ldi	r25, 0x07	; 7
    3862:	0e 94 1a 27 	call	0x4e34	; 0x4e34 <_ZN3RTC4zeitEv>
			}
			Stoppuhrseite();
    3866:	61 d8       	rcall	.-3902   	; 0x292a <_Z13Stoppuhrseitev>
			anzeige|=(1<<refreshdisplay);
    3868:	80 91 29 03 	lds	r24, 0x0329
    386c:	90 91 2a 03 	lds	r25, 0x032A
    3870:	90 68       	ori	r25, 0x80	; 128
    3872:	90 93 2a 03 	sts	0x032A, r25
    3876:	80 93 29 03 	sts	0x0329, r24
    387a:	3f c0       	rjmp	.+126    	; 0x38fa <_Z14anzeigehandlerv+0x2f2>
		}
		else if ((anzeige&(1<<Timerflag)))
    387c:	86 ff       	sbrs	r24, 6
    387e:	20 c0       	rjmp	.+64     	; 0x38c0 <_Z14anzeigehandlerv+0x2b8>
		{
			zaehler.Sekunden--;
    3880:	e4 e7       	ldi	r30, 0x74	; 116
    3882:	f7 e0       	ldi	r31, 0x07	; 7
    3884:	80 81       	ld	r24, Z
    3886:	81 50       	subi	r24, 0x01	; 1
    3888:	80 83       	st	Z, r24
			if(zaehler.timer()){
    388a:	82 e6       	ldi	r24, 0x62	; 98
    388c:	97 e0       	ldi	r25, 0x07	; 7
    388e:	0e 94 72 27 	call	0x4ee4	; 0x4ee4 <_ZN3RTC5timerEv>
    3892:	88 23       	and	r24, r24
    3894:	49 f0       	breq	.+18     	; 0x38a8 <_Z14anzeigehandlerv+0x2a0>
				anzeige|=(1<<blinkflag);
    3896:	80 91 29 03 	lds	r24, 0x0329
    389a:	90 91 2a 03 	lds	r25, 0x032A
    389e:	90 64       	ori	r25, 0x40	; 64
    38a0:	90 93 2a 03 	sts	0x032A, r25
    38a4:	80 93 29 03 	sts	0x0329, r24
			}
			timerseite();
    38a8:	0e 94 00 14 	call	0x2800	; 0x2800 <_Z10timerseitev>
			anzeige|=(1<<refreshdisplay);
    38ac:	80 91 29 03 	lds	r24, 0x0329
    38b0:	90 91 2a 03 	lds	r25, 0x032A
    38b4:	90 68       	ori	r25, 0x80	; 128
    38b6:	90 93 2a 03 	sts	0x032A, r25
    38ba:	80 93 29 03 	sts	0x0329, r24
    38be:	1d c0       	rjmp	.+58     	; 0x38fa <_Z14anzeigehandlerv+0x2f2>
		}
		else if ((anzeige&(1<<Druckflag)))
    38c0:	91 ff       	sbrs	r25, 1
    38c2:	0b c0       	rjmp	.+22     	; 0x38da <_Z14anzeigehandlerv+0x2d2>
		{
			Pressuresensor();
    38c4:	bc d8       	rcall	.-3720   	; 0x2a3e <_Z14Pressuresensorv>
			anzeige |= (1<<refreshdisplay);
    38c6:	80 91 29 03 	lds	r24, 0x0329
    38ca:	90 91 2a 03 	lds	r25, 0x032A
    38ce:	90 68       	ori	r25, 0x80	; 128
    38d0:	90 93 2a 03 	sts	0x032A, r25
    38d4:	80 93 29 03 	sts	0x0329, r24
    38d8:	10 c0       	rjmp	.+32     	; 0x38fa <_Z14anzeigehandlerv+0x2f2>
    38da:	88 70       	andi	r24, 0x08	; 8
    38dc:	98 70       	andi	r25, 0x08	; 8
		}
		else if ((anzeige&(1<<Weckeranzeigeflag))&&(anzeige&(1<<Einstellungsflag)))
    38de:	88 30       	cpi	r24, 0x08	; 8
    38e0:	98 40       	sbci	r25, 0x08	; 8
    38e2:	59 f4       	brne	.+22     	; 0x38fa <_Z14anzeigehandlerv+0x2f2>
		{
			Weckeranzeige();
    38e4:	0e 94 18 10 	call	0x2030	; 0x2030 <_Z13Weckeranzeigev>
			anzeige|=(1<<refreshdisplay);
    38e8:	80 91 29 03 	lds	r24, 0x0329
    38ec:	90 91 2a 03 	lds	r25, 0x032A
    38f0:	90 68       	ori	r25, 0x80	; 128
    38f2:	90 93 2a 03 	sts	0x032A, r25
    38f6:	80 93 29 03 	sts	0x0329, r24
		}
		if ((anzeige&(1<<blinkflag)))
    38fa:	80 91 29 03 	lds	r24, 0x0329
    38fe:	90 91 2a 03 	lds	r25, 0x032A
    3902:	96 ff       	sbrs	r25, 6
    3904:	0d c0       	rjmp	.+26     	; 0x3920 <_Z14anzeigehandlerv+0x318>
		{
			oled.invert(rtc.Sekunden%2);
    3906:	60 91 8f 07 	lds	r22, 0x078F
    390a:	61 70       	andi	r22, 0x01	; 1
    390c:	86 e4       	ldi	r24, 0x46	; 70
    390e:	93 e0       	ldi	r25, 0x03	; 3
    3910:	0e 94 87 04 	call	0x90e	; 0x90e <_ZN7Display6invertEh>
			LED.toggle();
    3914:	83 e4       	ldi	r24, 0x43	; 67
    3916:	93 e0       	ldi	r25, 0x03	; 3
    3918:	ee d7       	rcall	.+4060   	; 0x48f6 <_ZN6Output6toggleEv>
			Vibrationsmotor.on();
    391a:	81 e4       	ldi	r24, 0x41	; 65
    391c:	93 e0       	ldi	r25, 0x03	; 3
    391e:	12 d7       	rcall	.+3620   	; 0x4744 <_ZN6Output2onEv>
		}
		rtc.interupts&=~(1<<sekundeninterupt);
    3920:	e5 e9       	ldi	r30, 0x95	; 149
    3922:	f7 e0       	ldi	r31, 0x07	; 7
    3924:	80 81       	ld	r24, Z
    3926:	8d 7f       	andi	r24, 0xFD	; 253
    3928:	80 83       	st	Z, r24
	}
	//Minuteninterrupt
	if ((rtc.interupts&(1<<minuteninterupt)))
    392a:	80 91 95 07 	lds	r24, 0x0795
    392e:	82 ff       	sbrs	r24, 2
    3930:	24 c0       	rjmp	.+72     	; 0x397a <_Z14anzeigehandlerv+0x372>
	{
		if ((anzeige&(1<<Uhrflaggross)))
    3932:	80 91 29 03 	lds	r24, 0x0329
    3936:	90 91 2a 03 	lds	r25, 0x032A
    393a:	92 ff       	sbrs	r25, 2
    393c:	0c c0       	rjmp	.+24     	; 0x3956 <_Z14anzeigehandlerv+0x34e>
		{
			uhranzeigenmin();
    393e:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <_Z14uhranzeigenminv>
			anzeige|=(1<<refreshdisplay);
    3942:	80 91 29 03 	lds	r24, 0x0329
    3946:	90 91 2a 03 	lds	r25, 0x032A
    394a:	90 68       	ori	r25, 0x80	; 128
    394c:	90 93 2a 03 	sts	0x032A, r25
    3950:	80 93 29 03 	sts	0x0329, r24
    3954:	0d c0       	rjmp	.+26     	; 0x3970 <_Z14anzeigehandlerv+0x368>
		}
		else if ((anzeige&(1<<Weckeranzeigeflag)))
    3956:	93 ff       	sbrs	r25, 3
    3958:	0b c0       	rjmp	.+22     	; 0x3970 <_Z14anzeigehandlerv+0x368>
		{
			Weckeranzeige();
    395a:	0e 94 18 10 	call	0x2030	; 0x2030 <_Z13Weckeranzeigev>
			anzeige|=(1<<refreshdisplay);
    395e:	80 91 29 03 	lds	r24, 0x0329
    3962:	90 91 2a 03 	lds	r25, 0x032A
    3966:	90 68       	ori	r25, 0x80	; 128
    3968:	90 93 2a 03 	sts	0x032A, r25
    396c:	80 93 29 03 	sts	0x0329, r24
		}
		rtc.interupts&=~(1<<minuteninterupt);
    3970:	e5 e9       	ldi	r30, 0x95	; 149
    3972:	f7 e0       	ldi	r31, 0x07	; 7
    3974:	80 81       	ld	r24, Z
    3976:	8b 7f       	andi	r24, 0xFB	; 251
    3978:	80 83       	st	Z, r24
	}
	//neuen Framebuffer an das Dispay senden
	if ((anzeige&(1<<refreshdisplay)))
    397a:	80 91 29 03 	lds	r24, 0x0329
    397e:	90 91 2a 03 	lds	r25, 0x032A
    3982:	99 23       	and	r25, r25
    3984:	6c f4       	brge	.+26     	; 0x39a0 <_Z14anzeigehandlerv+0x398>
	{
		oled.sendFrame();
    3986:	86 e4       	ldi	r24, 0x46	; 70
    3988:	93 e0       	ldi	r25, 0x03	; 3
    398a:	0e 94 8f 04 	call	0x91e	; 0x91e <_ZN7Display9sendFrameEv>
		anzeige&=~(1<<refreshdisplay);
    398e:	80 91 29 03 	lds	r24, 0x0329
    3992:	90 91 2a 03 	lds	r25, 0x032A
    3996:	9f 77       	andi	r25, 0x7F	; 127
    3998:	90 93 2a 03 	sts	0x032A, r25
    399c:	80 93 29 03 	sts	0x0329, r24
	}
}
    39a0:	df 91       	pop	r29
    39a2:	cf 91       	pop	r28
    39a4:	1f 91       	pop	r17
    39a6:	0f 91       	pop	r16
    39a8:	ff 90       	pop	r15
    39aa:	ef 90       	pop	r14
    39ac:	df 90       	pop	r13
    39ae:	cf 90       	pop	r12
    39b0:	bf 90       	pop	r11
    39b2:	af 90       	pop	r10
    39b4:	7f 90       	pop	r7
    39b6:	6f 90       	pop	r6
    39b8:	5f 90       	pop	r5
    39ba:	4f 90       	pop	r4
    39bc:	08 95       	ret

000039be <_Z14eingabehandlerh>:

void eingabehandler(uint8_t taste){
	if (taste!='A')
    39be:	81 34       	cpi	r24, 0x41	; 65
    39c0:	09 f4       	brne	.+2      	; 0x39c4 <_Z14eingabehandlerh+0x6>
    39c2:	b7 c3       	rjmp	.+1902   	; 0x4132 <__stack+0x33>
	{
		rtc.interupts |= (1<<sekundeninterupt);
    39c4:	e5 e9       	ldi	r30, 0x95	; 149
    39c6:	f7 e0       	ldi	r31, 0x07	; 7
    39c8:	90 81       	ld	r25, Z
    39ca:	29 2f       	mov	r18, r25
    39cc:	22 60       	ori	r18, 0x02	; 2
    39ce:	20 83       	st	Z, r18
		if (anzeige==255)
    39d0:	20 91 29 03 	lds	r18, 0x0329
    39d4:	30 91 2a 03 	lds	r19, 0x032A
    39d8:	2f 3f       	cpi	r18, 0xFF	; 255
    39da:	31 05       	cpc	r19, r1
    39dc:	61 f4       	brne	.+24     	; 0x39f6 <_Z14eingabehandlerh+0x38>
		{
			oled.ssd1306_command(SSD1306_DISPLAYON);
    39de:	6f ea       	ldi	r22, 0xAF	; 175
    39e0:	86 e4       	ldi	r24, 0x46	; 70
    39e2:	93 e0       	ldi	r25, 0x03	; 3
    39e4:	0e 94 10 04 	call	0x820	; 0x820 <_ZN7Display15ssd1306_commandEh>
			//entweder display aus oder das Menue starten
			anzeige=(1<<menueflag);
    39e8:	80 e0       	ldi	r24, 0x00	; 0
    39ea:	90 e2       	ldi	r25, 0x20	; 32
    39ec:	90 93 2a 03 	sts	0x032A, r25
    39f0:	80 93 29 03 	sts	0x0329, r24
    39f4:	08 95       	ret
    39f6:	a9 01       	movw	r20, r18
    39f8:	41 70       	andi	r20, 0x01	; 1
    39fa:	50 72       	andi	r21, 0x20	; 32
		}
		//gleicher Handler wie oben, aber hier speziell fuer die Bearbeitung von Tastereingaben mit switch fuer die Tasten
		//es sind einfach so viele Tasten moeglich
		else if ((anzeige&(1<<menueflag)) && (anzeige&(1<<Uhrflag)))	//Menue der Uhr
    39fc:	41 30       	cpi	r20, 0x01	; 1
    39fe:	50 42       	sbci	r21, 0x20	; 32
    3a00:	09 f0       	breq	.+2      	; 0x3a04 <_Z14eingabehandlerh+0x46>
    3a02:	5a c0       	rjmp	.+180    	; 0x3ab8 <_Z14eingabehandlerh+0xfa>
		{
			anzeige&=~((1<<menueflag)|(1<<Uhrflag));
    3a04:	2e 7f       	andi	r18, 0xFE	; 254
    3a06:	3f 7d       	andi	r19, 0xDF	; 223
    3a08:	30 93 2a 03 	sts	0x032A, r19
    3a0c:	20 93 29 03 	sts	0x0329, r18
			switch (taste)
    3a10:	83 33       	cpi	r24, 0x33	; 51
    3a12:	f9 f0       	breq	.+62     	; 0x3a52 <_Z14eingabehandlerh+0x94>
    3a14:	28 f4       	brcc	.+10     	; 0x3a20 <_Z14eingabehandlerh+0x62>
    3a16:	81 33       	cpi	r24, 0x31	; 49
    3a18:	49 f0       	breq	.+18     	; 0x3a2c <_Z14eingabehandlerh+0x6e>
    3a1a:	82 33       	cpi	r24, 0x32	; 50
    3a1c:	69 f0       	breq	.+26     	; 0x3a38 <_Z14eingabehandlerh+0x7a>
    3a1e:	45 c0       	rjmp	.+138    	; 0x3aaa <_Z14eingabehandlerh+0xec>
    3a20:	85 33       	cpi	r24, 0x35	; 53
    3a22:	89 f1       	breq	.+98     	; 0x3a86 <_Z14eingabehandlerh+0xc8>
    3a24:	10 f1       	brcs	.+68     	; 0x3a6a <_Z14eingabehandlerh+0xac>
    3a26:	86 33       	cpi	r24, 0x36	; 54
    3a28:	b9 f1       	breq	.+110    	; 0x3a98 <_Z14eingabehandlerh+0xda>
    3a2a:	3f c0       	rjmp	.+126    	; 0x3aaa <_Z14eingabehandlerh+0xec>
			{
				case '1':
				//Wechseln auf die Uhr
				anzeige|=(1<<Uhrflag);
    3a2c:	21 60       	ori	r18, 0x01	; 1
    3a2e:	30 93 2a 03 	sts	0x032A, r19
    3a32:	20 93 29 03 	sts	0x0329, r18
				break;
    3a36:	08 95       	ret
				
				case '2':
				//starten der Stoppuhr APP
				stoppuhr.Sekunden=0;
    3a38:	10 92 59 07 	sts	0x0759, r1
				stoppuhr.Minuten=0;
    3a3c:	10 92 58 07 	sts	0x0758, r1
				stoppuhr.Stunden=0;
    3a40:	10 92 57 07 	sts	0x0757, r1
				anzeige|=(1<<refreshdisplay) | (1<<Stoppuhrflag);
    3a44:	20 68       	ori	r18, 0x80	; 128
    3a46:	30 68       	ori	r19, 0x80	; 128
    3a48:	30 93 2a 03 	sts	0x032A, r19
    3a4c:	20 93 29 03 	sts	0x0329, r18
				break;
    3a50:	08 95       	ret
				
				case '3':
				//Starten der Timer APP
				zaehler.Sekunden=0;
    3a52:	10 92 74 07 	sts	0x0774, r1
				zaehler.Minuten=0;
    3a56:	10 92 73 07 	sts	0x0773, r1
				zaehler.Stunden=0;
    3a5a:	10 92 72 07 	sts	0x0772, r1
				
				anzeige|=(1<<Timerflag) | (1<<Einstellungsflag);
    3a5e:	28 64       	ori	r18, 0x48	; 72
    3a60:	30 93 2a 03 	sts	0x032A, r19
    3a64:	20 93 29 03 	sts	0x0329, r18
				break;
    3a68:	08 95       	ret
				
				case '4':
				//Starten der Alarmapp, momentan nicht implementiert
				oled.clearFrame();
    3a6a:	86 e4       	ldi	r24, 0x46	; 70
    3a6c:	93 e0       	ldi	r25, 0x03	; 3
    3a6e:	0e 94 05 04 	call	0x80a	; 0x80a <_ZN7Display10clearFrameEv>
				anzeige|=(1<<refreshdisplay);
    3a72:	80 91 29 03 	lds	r24, 0x0329
    3a76:	90 91 2a 03 	lds	r25, 0x032A
    3a7a:	90 68       	ori	r25, 0x80	; 128
    3a7c:	90 93 2a 03 	sts	0x032A, r25
    3a80:	80 93 29 03 	sts	0x0329, r24
				break;
    3a84:	08 95       	ret
				
				case '5':
				//Wechseln auf grosse Uhr
				rtc.interupts |=(1<<minuteninterupt);
    3a86:	96 60       	ori	r25, 0x06	; 6
    3a88:	90 93 95 07 	sts	0x0795, r25
				anzeige |=(1<<Uhrflaggross) | (1<<refreshdisplay);
    3a8c:	34 68       	ori	r19, 0x84	; 132
    3a8e:	30 93 2a 03 	sts	0x032A, r19
    3a92:	20 93 29 03 	sts	0x0329, r18
				break;
    3a96:	08 95       	ret
				case '6':
				rtc.interupts |=(1<<minuteninterupt);
    3a98:	96 60       	ori	r25, 0x06	; 6
    3a9a:	90 93 95 07 	sts	0x0795, r25
				anzeige |= (1<<Weckeranzeigeflag);
    3a9e:	38 60       	ori	r19, 0x08	; 8
    3aa0:	30 93 2a 03 	sts	0x032A, r19
    3aa4:	20 93 29 03 	sts	0x0329, r18
				break;
    3aa8:	08 95       	ret
				default:
				//menueflag erneu setzen
				anzeige|=(1<<menueflag)|(1<<Uhrflag);
    3aaa:	21 60       	ori	r18, 0x01	; 1
    3aac:	30 62       	ori	r19, 0x20	; 32
    3aae:	30 93 2a 03 	sts	0x032A, r19
    3ab2:	20 93 29 03 	sts	0x0329, r18
				break;
    3ab6:	15 c3       	rjmp	.+1578   	; 0x40e2 <_Z14eingabehandlerh+0x724>
    3ab8:	a9 01       	movw	r20, r18
    3aba:	48 70       	andi	r20, 0x08	; 8
    3abc:	50 72       	andi	r21, 0x20	; 32
			}
		}
		else if ((anzeige&(1<<menueflag)) && (anzeige&(1<<Einstellungsflag)))	//Menue der Einstellungen
    3abe:	48 30       	cpi	r20, 0x08	; 8
    3ac0:	50 42       	sbci	r21, 0x20	; 32
    3ac2:	09 f0       	breq	.+2      	; 0x3ac6 <_Z14eingabehandlerh+0x108>
    3ac4:	3d c0       	rjmp	.+122    	; 0x3b40 <_Z14eingabehandlerh+0x182>
		{
			anzeige&=~((1<<menueflag)|(1<<Einstellungsflag));
    3ac6:	27 7f       	andi	r18, 0xF7	; 247
    3ac8:	3f 7d       	andi	r19, 0xDF	; 223
    3aca:	30 93 2a 03 	sts	0x032A, r19
    3ace:	20 93 29 03 	sts	0x0329, r18
			switch (taste)
    3ad2:	82 33       	cpi	r24, 0x32	; 50
    3ad4:	b1 f0       	breq	.+44     	; 0x3b02 <_Z14eingabehandlerh+0x144>
    3ad6:	18 f4       	brcc	.+6      	; 0x3ade <_Z14eingabehandlerh+0x120>
    3ad8:	81 33       	cpi	r24, 0x31	; 49
    3ada:	31 f0       	breq	.+12     	; 0x3ae8 <_Z14eingabehandlerh+0x12a>
    3adc:	2a c0       	rjmp	.+84     	; 0x3b32 <_Z14eingabehandlerh+0x174>
    3ade:	83 33       	cpi	r24, 0x33	; 51
    3ae0:	b1 f0       	breq	.+44     	; 0x3b0e <_Z14eingabehandlerh+0x150>
    3ae2:	84 33       	cpi	r24, 0x34	; 52
    3ae4:	f9 f0       	breq	.+62     	; 0x3b24 <_Z14eingabehandlerh+0x166>
    3ae6:	25 c0       	rjmp	.+74     	; 0x3b32 <_Z14eingabehandlerh+0x174>
			{
				case '1':
				//zuruecksetzen der Kalibrierung, da passive Kallibrierung eingebaut
				kompass.kallibrierung_ruecksetzen();
    3ae8:	88 e9       	ldi	r24, 0x98	; 152
    3aea:	97 e0       	ldi	r25, 0x07	; 7
    3aec:	d4 d5       	rcall	.+2984   	; 0x4696 <_ZN7Kompass25kallibrierung_ruecksetzenEv>
				anzeige|=(1<<Kompasflag);
    3aee:	80 91 29 03 	lds	r24, 0x0329
    3af2:	90 91 2a 03 	lds	r25, 0x032A
    3af6:	84 60       	ori	r24, 0x04	; 4
    3af8:	90 93 2a 03 	sts	0x032A, r25
    3afc:	80 93 29 03 	sts	0x0329, r24
				break;
    3b00:	08 95       	ret
				case '2':
				//Gaineinstellung fuer den Kompass
				anzeige|=(1<<Kompasgaineinstellenflag);
    3b02:	20 62       	ori	r18, 0x20	; 32
    3b04:	30 93 2a 03 	sts	0x032A, r19
    3b08:	20 93 29 03 	sts	0x0329, r18
				break;
    3b0c:	08 95       	ret
				case '3':
				//dies ist eine der wenigen Funktinen, die die Handler Strucktur nicht anwenden, da sie die rtc anhaellt
				uhreinstellen();
    3b0e:	8a d8       	rcall	.-3820   	; 0x2c24 <_Z13uhreinstellenv>
				anzeige|=(1<<Uhrflag);
    3b10:	80 91 29 03 	lds	r24, 0x0329
    3b14:	90 91 2a 03 	lds	r25, 0x032A
    3b18:	81 60       	ori	r24, 0x01	; 1
    3b1a:	90 93 2a 03 	sts	0x032A, r25
    3b1e:	80 93 29 03 	sts	0x0329, r24
				break;
    3b22:	08 95       	ret
				case '4':
				anzeige |= (1<<Einstellungsflag) | (1<<Weckeranzeigeflag);
    3b24:	28 60       	ori	r18, 0x08	; 8
    3b26:	38 60       	ori	r19, 0x08	; 8
    3b28:	30 93 2a 03 	sts	0x032A, r19
    3b2c:	20 93 29 03 	sts	0x0329, r18
				break;
    3b30:	08 95       	ret
				default:
				//Menueflag neu setzten
				anzeige|=(1<<menueflag)|(1<<Einstellungsflag);
    3b32:	28 60       	ori	r18, 0x08	; 8
    3b34:	30 62       	ori	r19, 0x20	; 32
    3b36:	30 93 2a 03 	sts	0x032A, r19
    3b3a:	20 93 29 03 	sts	0x0329, r18
				break;
    3b3e:	d1 c2       	rjmp	.+1442   	; 0x40e2 <_Z14eingabehandlerh+0x724>
			}
		}
		else if ((anzeige&(1<<menueflag)))	//nur das grosse menue
    3b40:	35 ff       	sbrs	r19, 5
    3b42:	58 c0       	rjmp	.+176    	; 0x3bf4 <_Z14eingabehandlerh+0x236>
		{
			anzeige&=~(1<<menueflag);
    3b44:	3f 7d       	andi	r19, 0xDF	; 223
    3b46:	30 93 2a 03 	sts	0x032A, r19
    3b4a:	20 93 29 03 	sts	0x0329, r18
			switch (taste)
    3b4e:	48 2f       	mov	r20, r24
    3b50:	50 e0       	ldi	r21, 0x00	; 0
    3b52:	fa 01       	movw	r30, r20
    3b54:	f1 97       	sbiw	r30, 0x31	; 49
    3b56:	e7 30       	cpi	r30, 0x07	; 7
    3b58:	f1 05       	cpc	r31, r1
    3b5a:	08 f0       	brcs	.+2      	; 0x3b5e <_Z14eingabehandlerh+0x1a0>
    3b5c:	45 c0       	rjmp	.+138    	; 0x3be8 <_Z14eingabehandlerh+0x22a>
    3b5e:	e0 5b       	subi	r30, 0xB0	; 176
    3b60:	ff 4f       	sbci	r31, 0xFF	; 255
    3b62:	0c 94 88 2e 	jmp	0x5d10	; 0x5d10 <__tablejump2__>
			{
				case '1':
				anzeige|=(1<<Fahradflag);
    3b66:	22 60       	ori	r18, 0x02	; 2
    3b68:	30 93 2a 03 	sts	0x032A, r19
    3b6c:	20 93 29 03 	sts	0x0329, r18
				//starten des Timers fuer die geschwindigkeit
				TCCR1B |= ((1<<CS12) | (1<<CS10));
    3b70:	e1 e8       	ldi	r30, 0x81	; 129
    3b72:	f0 e0       	ldi	r31, 0x00	; 0
    3b74:	80 81       	ld	r24, Z
    3b76:	85 60       	ori	r24, 0x05	; 5
    3b78:	80 83       	st	Z, r24
				break;
    3b7a:	08 95       	ret
				
				case '2':
				//Taschenrechner starten
				//Monentan deaktiv, da Umstellung der Handler
				//operation(Flieskommazahleingabe());
				oled.clearFrame();
    3b7c:	86 e4       	ldi	r24, 0x46	; 70
    3b7e:	93 e0       	ldi	r25, 0x03	; 3
    3b80:	0e 94 05 04 	call	0x80a	; 0x80a <_ZN7Display10clearFrameEv>
				anzeige|=(1<<refreshdisplay);
    3b84:	80 91 29 03 	lds	r24, 0x0329
    3b88:	90 91 2a 03 	lds	r25, 0x032A
    3b8c:	90 68       	ori	r25, 0x80	; 128
    3b8e:	90 93 2a 03 	sts	0x032A, r25
    3b92:	80 93 29 03 	sts	0x0329, r24
				break;
    3b96:	08 95       	ret
				
				case '3':
				anzeige|=(1<<Kompasflag);
    3b98:	24 60       	ori	r18, 0x04	; 4
    3b9a:	30 93 2a 03 	sts	0x032A, r19
    3b9e:	20 93 29 03 	sts	0x0329, r18
				break;
    3ba2:	08 95       	ret
				
				case '4':
				//Menue der Uhr
				anzeige|=(1<<menueflag) | (1<<Uhrflag);
    3ba4:	21 60       	ori	r18, 0x01	; 1
    3ba6:	30 62       	ori	r19, 0x20	; 32
    3ba8:	30 93 2a 03 	sts	0x032A, r19
    3bac:	20 93 29 03 	sts	0x0329, r18
				break;
    3bb0:	08 95       	ret
				
				case '5':
				//menue der Einstellungen
				anzeige|=(1<<menueflag) | (1<<Einstellungsflag);
    3bb2:	28 60       	ori	r18, 0x08	; 8
    3bb4:	30 62       	ori	r19, 0x20	; 32
    3bb6:	30 93 2a 03 	sts	0x032A, r19
    3bba:	20 93 29 03 	sts	0x0329, r18
				break;
    3bbe:	08 95       	ret
				
				case '6':
				//Display ausschalten
				//anzeige=255;
				oled.clearFrame();
    3bc0:	86 e4       	ldi	r24, 0x46	; 70
    3bc2:	93 e0       	ldi	r25, 0x03	; 3
    3bc4:	0e 94 05 04 	call	0x80a	; 0x80a <_ZN7Display10clearFrameEv>
				anzeige|=(1<<refreshdisplay);
    3bc8:	80 91 29 03 	lds	r24, 0x0329
    3bcc:	90 91 2a 03 	lds	r25, 0x032A
    3bd0:	90 68       	ori	r25, 0x80	; 128
    3bd2:	90 93 2a 03 	sts	0x032A, r25
    3bd6:	80 93 29 03 	sts	0x0329, r24
				break;
    3bda:	08 95       	ret
				case '7':
				anzeige |= (1<<Druckflag);
    3bdc:	32 60       	ori	r19, 0x02	; 2
    3bde:	30 93 2a 03 	sts	0x032A, r19
    3be2:	20 93 29 03 	sts	0x0329, r18
				break;
    3be6:	08 95       	ret
				default:
				//menueflag erneut setzen um abschalten zu verhindern
				anzeige|=(1<<menueflag);
    3be8:	30 62       	ori	r19, 0x20	; 32
    3bea:	30 93 2a 03 	sts	0x032A, r19
    3bee:	20 93 29 03 	sts	0x0329, r18
				break;
    3bf2:	77 c2       	rjmp	.+1262   	; 0x40e2 <_Z14eingabehandlerh+0x724>
    3bf4:	a9 01       	movw	r20, r18
    3bf6:	48 70       	andi	r20, 0x08	; 8
    3bf8:	58 70       	andi	r21, 0x08	; 8
			}
		}
		else if ((anzeige&(1<<Einstellungsflag))&&(anzeige&(1<<Weckeranzeigeflag)))
    3bfa:	48 30       	cpi	r20, 0x08	; 8
    3bfc:	58 40       	sbci	r21, 0x08	; 8
    3bfe:	09 f0       	breq	.+2      	; 0x3c02 <_Z14eingabehandlerh+0x244>
    3c00:	68 c0       	rjmp	.+208    	; 0x3cd2 <_Z14eingabehandlerh+0x314>
		{
			switch (pos)
    3c02:	40 91 28 03 	lds	r20, 0x0328
    3c06:	41 30       	cpi	r20, 0x01	; 1
    3c08:	11 f1       	breq	.+68     	; 0x3c4e <_Z14eingabehandlerh+0x290>
    3c0a:	30 f0       	brcs	.+12     	; 0x3c18 <_Z14eingabehandlerh+0x25a>
    3c0c:	42 30       	cpi	r20, 0x02	; 2
    3c0e:	79 f1       	breq	.+94     	; 0x3c6e <_Z14eingabehandlerh+0x2b0>
    3c10:	43 30       	cpi	r20, 0x03	; 3
    3c12:	09 f4       	brne	.+2      	; 0x3c16 <_Z14eingabehandlerh+0x258>
    3c14:	3f c0       	rjmp	.+126    	; 0x3c94 <_Z14eingabehandlerh+0x2d6>
    3c16:	65 c2       	rjmp	.+1226   	; 0x40e2 <_Z14eingabehandlerh+0x724>
			{
				case 0:
				rtc.WStunden=0;
    3c18:	10 92 97 07 	sts	0x0797, r1
				rtc.WMinuten=0;
    3c1c:	10 92 96 07 	sts	0x0796, r1
				rtc.interupts &= ~((1<<Weckerein)|(1<<Weckeractiv));
    3c20:	97 7e       	andi	r25, 0xE7	; 231
    3c22:	92 60       	ori	r25, 0x02	; 2
    3c24:	90 93 95 07 	sts	0x0795, r25
				switch (taste)
    3c28:	83 32       	cpi	r24, 0x23	; 35
    3c2a:	09 f4       	brne	.+2      	; 0x3c2e <_Z14eingabehandlerh+0x270>
    3c2c:	5a c2       	rjmp	.+1204   	; 0x40e2 <_Z14eingabehandlerh+0x724>
    3c2e:	8a 32       	cpi	r24, 0x2A	; 42
    3c30:	09 f4       	brne	.+2      	; 0x3c34 <_Z14eingabehandlerh+0x276>
    3c32:	57 c2       	rjmp	.+1198   	; 0x40e2 <_Z14eingabehandlerh+0x724>
					case '#':
					break;
					case '*':
					break;
					default:
					rtc.WStunden=(taste-'0')*10;
    3c34:	98 2f       	mov	r25, r24
    3c36:	99 0f       	add	r25, r25
    3c38:	90 56       	subi	r25, 0x60	; 96
    3c3a:	29 2f       	mov	r18, r25
    3c3c:	22 0f       	add	r18, r18
    3c3e:	22 0f       	add	r18, r18
    3c40:	92 0f       	add	r25, r18
    3c42:	90 93 97 07 	sts	0x0797, r25
					pos++;
    3c46:	91 e0       	ldi	r25, 0x01	; 1
    3c48:	90 93 28 03 	sts	0x0328, r25
					break;
    3c4c:	4a c2       	rjmp	.+1172   	; 0x40e2 <_Z14eingabehandlerh+0x724>
				}
				break;
				case 1:
				switch (taste)
    3c4e:	83 32       	cpi	r24, 0x23	; 35
    3c50:	09 f4       	brne	.+2      	; 0x3c54 <_Z14eingabehandlerh+0x296>
    3c52:	47 c2       	rjmp	.+1166   	; 0x40e2 <_Z14eingabehandlerh+0x724>
    3c54:	8a 32       	cpi	r24, 0x2A	; 42
    3c56:	09 f4       	brne	.+2      	; 0x3c5a <_Z14eingabehandlerh+0x29c>
    3c58:	44 c2       	rjmp	.+1160   	; 0x40e2 <_Z14eingabehandlerh+0x724>
					case '#':
					break;
					case '*':
					break;
					default:
					rtc.WStunden+=(taste-'0');
    3c5a:	e7 e9       	ldi	r30, 0x97	; 151
    3c5c:	f7 e0       	ldi	r31, 0x07	; 7
    3c5e:	90 81       	ld	r25, Z
    3c60:	90 53       	subi	r25, 0x30	; 48
    3c62:	98 0f       	add	r25, r24
    3c64:	90 83       	st	Z, r25
					pos++;
    3c66:	92 e0       	ldi	r25, 0x02	; 2
    3c68:	90 93 28 03 	sts	0x0328, r25
					break;
    3c6c:	3a c2       	rjmp	.+1140   	; 0x40e2 <_Z14eingabehandlerh+0x724>
				}
				break;
				case 2:
				switch (taste)
    3c6e:	83 32       	cpi	r24, 0x23	; 35
    3c70:	09 f4       	brne	.+2      	; 0x3c74 <_Z14eingabehandlerh+0x2b6>
    3c72:	37 c2       	rjmp	.+1134   	; 0x40e2 <_Z14eingabehandlerh+0x724>
    3c74:	8a 32       	cpi	r24, 0x2A	; 42
    3c76:	09 f4       	brne	.+2      	; 0x3c7a <_Z14eingabehandlerh+0x2bc>
    3c78:	34 c2       	rjmp	.+1128   	; 0x40e2 <_Z14eingabehandlerh+0x724>
					case '#':
					break;
					case '*':
					break;
					default:
					rtc.WMinuten=(taste-'0')*10;
    3c7a:	98 2f       	mov	r25, r24
    3c7c:	99 0f       	add	r25, r25
    3c7e:	90 56       	subi	r25, 0x60	; 96
    3c80:	29 2f       	mov	r18, r25
    3c82:	22 0f       	add	r18, r18
    3c84:	22 0f       	add	r18, r18
    3c86:	92 0f       	add	r25, r18
    3c88:	90 93 96 07 	sts	0x0796, r25
					pos++;
    3c8c:	93 e0       	ldi	r25, 0x03	; 3
    3c8e:	90 93 28 03 	sts	0x0328, r25
					break;
    3c92:	27 c2       	rjmp	.+1102   	; 0x40e2 <_Z14eingabehandlerh+0x724>
				}
				break;
				case 3:
				switch (taste)
    3c94:	83 32       	cpi	r24, 0x23	; 35
    3c96:	41 f0       	breq	.+16     	; 0x3ca8 <_Z14eingabehandlerh+0x2ea>
    3c98:	8a 32       	cpi	r24, 0x2A	; 42
    3c9a:	31 f0       	breq	.+12     	; 0x3ca8 <_Z14eingabehandlerh+0x2ea>
					case '#':
					break;
					case '*':
					break;
					default:
					rtc.WMinuten+=(taste-'0');
    3c9c:	e6 e9       	ldi	r30, 0x96	; 150
    3c9e:	f7 e0       	ldi	r31, 0x07	; 7
    3ca0:	40 81       	ld	r20, Z
    3ca2:	40 53       	subi	r20, 0x30	; 48
    3ca4:	48 0f       	add	r20, r24
    3ca6:	40 83       	st	Z, r20
					pos++;
					break;
				}
				pos=0;
    3ca8:	10 92 28 03 	sts	0x0328, r1
				if (!(rtc.WStunden>=24) && !(rtc.WMinuten>=60))
    3cac:	40 91 97 07 	lds	r20, 0x0797
    3cb0:	48 31       	cpi	r20, 0x18	; 24
    3cb2:	08 f0       	brcs	.+2      	; 0x3cb6 <_Z14eingabehandlerh+0x2f8>
    3cb4:	16 c2       	rjmp	.+1068   	; 0x40e2 <_Z14eingabehandlerh+0x724>
    3cb6:	40 91 96 07 	lds	r20, 0x0796
    3cba:	4c 33       	cpi	r20, 0x3C	; 60
    3cbc:	08 f0       	brcs	.+2      	; 0x3cc0 <_Z14eingabehandlerh+0x302>
    3cbe:	11 c2       	rjmp	.+1058   	; 0x40e2 <_Z14eingabehandlerh+0x724>
				{
					anzeige&=~(1<<Einstellungsflag);
    3cc0:	27 7f       	andi	r18, 0xF7	; 247
    3cc2:	30 93 2a 03 	sts	0x032A, r19
    3cc6:	20 93 29 03 	sts	0x0329, r18
					rtc.interupts|=(1<<Weckerein);
					rtc.interupts|=(1<<minuteninterupt);
    3cca:	9e 60       	ori	r25, 0x0E	; 14
    3ccc:	90 93 95 07 	sts	0x0795, r25
    3cd0:	08 c2       	rjmp	.+1040   	; 0x40e2 <_Z14eingabehandlerh+0x724>
				}
				break;
			}
		}
		else if ((anzeige&(1<<Kompasgaineinstellenflag)))
    3cd2:	25 ff       	sbrs	r18, 5
    3cd4:	49 c0       	rjmp	.+146    	; 0x3d68 <_Z14eingabehandlerh+0x3aa>
		{
			anzeige&=~(1<<Kompasgaineinstellenflag);
    3cd6:	a9 01       	movw	r20, r18
    3cd8:	4f 7d       	andi	r20, 0xDF	; 223
			anzeige|=(1<<Kompasflag);
    3cda:	44 60       	ori	r20, 0x04	; 4
    3cdc:	50 93 2a 03 	sts	0x032A, r21
    3ce0:	40 93 29 03 	sts	0x0329, r20
			switch (taste) {
    3ce4:	48 2f       	mov	r20, r24
    3ce6:	50 e0       	ldi	r21, 0x00	; 0
    3ce8:	fa 01       	movw	r30, r20
    3cea:	f1 97       	sbiw	r30, 0x31	; 49
    3cec:	e8 30       	cpi	r30, 0x08	; 8
    3cee:	f1 05       	cpc	r31, r1
    3cf0:	a0 f5       	brcc	.+104    	; 0x3d5a <_Z14eingabehandlerh+0x39c>
    3cf2:	e9 5a       	subi	r30, 0xA9	; 169
    3cf4:	ff 4f       	sbci	r31, 0xFF	; 255
    3cf6:	0c 94 88 2e 	jmp	0x5d10	; 0x5d10 <__tablejump2__>
				case '1':
				kompass.HMC5883L_command(0x01,HMCGAIN1370);
    3cfa:	40 e0       	ldi	r20, 0x00	; 0
    3cfc:	61 e0       	ldi	r22, 0x01	; 1
    3cfe:	88 e9       	ldi	r24, 0x98	; 152
    3d00:	97 e0       	ldi	r25, 0x07	; 7
    3d02:	6c c3       	rjmp	.+1752   	; 0x43dc <_ZN7Kompass16HMC5883L_commandEhh>
				break;
    3d04:	08 95       	ret
				case '2':
				kompass.HMC5883L_command(0x01,HMCGAIN1090);
    3d06:	40 e2       	ldi	r20, 0x20	; 32
    3d08:	61 e0       	ldi	r22, 0x01	; 1
    3d0a:	88 e9       	ldi	r24, 0x98	; 152
    3d0c:	97 e0       	ldi	r25, 0x07	; 7
    3d0e:	66 c3       	rjmp	.+1740   	; 0x43dc <_ZN7Kompass16HMC5883L_commandEhh>
				break;
    3d10:	08 95       	ret
				case '3':
				kompass.HMC5883L_command(0x01,HMCGAIN820);
    3d12:	40 e4       	ldi	r20, 0x40	; 64
    3d14:	61 e0       	ldi	r22, 0x01	; 1
    3d16:	88 e9       	ldi	r24, 0x98	; 152
    3d18:	97 e0       	ldi	r25, 0x07	; 7
    3d1a:	60 c3       	rjmp	.+1728   	; 0x43dc <_ZN7Kompass16HMC5883L_commandEhh>
				break;
    3d1c:	08 95       	ret
				case '4':
				kompass.HMC5883L_command(0x01,HMCGAIN660);
    3d1e:	40 e6       	ldi	r20, 0x60	; 96
    3d20:	61 e0       	ldi	r22, 0x01	; 1
    3d22:	88 e9       	ldi	r24, 0x98	; 152
    3d24:	97 e0       	ldi	r25, 0x07	; 7
    3d26:	5a c3       	rjmp	.+1716   	; 0x43dc <_ZN7Kompass16HMC5883L_commandEhh>
				break;
    3d28:	08 95       	ret
				case '5':
				kompass.HMC5883L_command(0x01,HMCGAIN440);
    3d2a:	40 e8       	ldi	r20, 0x80	; 128
    3d2c:	61 e0       	ldi	r22, 0x01	; 1
    3d2e:	88 e9       	ldi	r24, 0x98	; 152
    3d30:	97 e0       	ldi	r25, 0x07	; 7
    3d32:	54 c3       	rjmp	.+1704   	; 0x43dc <_ZN7Kompass16HMC5883L_commandEhh>
				break;
    3d34:	08 95       	ret
				case '6':
				kompass.HMC5883L_command(0x01,HMCGAIN390);
    3d36:	40 ea       	ldi	r20, 0xA0	; 160
    3d38:	61 e0       	ldi	r22, 0x01	; 1
    3d3a:	88 e9       	ldi	r24, 0x98	; 152
    3d3c:	97 e0       	ldi	r25, 0x07	; 7
    3d3e:	4e c3       	rjmp	.+1692   	; 0x43dc <_ZN7Kompass16HMC5883L_commandEhh>
				break;
    3d40:	08 95       	ret
				case '7':
				kompass.HMC5883L_command(0x01,HMCGAIN330);
    3d42:	40 ec       	ldi	r20, 0xC0	; 192
    3d44:	61 e0       	ldi	r22, 0x01	; 1
    3d46:	88 e9       	ldi	r24, 0x98	; 152
    3d48:	97 e0       	ldi	r25, 0x07	; 7
    3d4a:	48 c3       	rjmp	.+1680   	; 0x43dc <_ZN7Kompass16HMC5883L_commandEhh>
				break;
    3d4c:	08 95       	ret
				case '8':
				kompass.HMC5883L_command(0x01,HMCGAIN230);
    3d4e:	40 ee       	ldi	r20, 0xE0	; 224
    3d50:	61 e0       	ldi	r22, 0x01	; 1
    3d52:	88 e9       	ldi	r24, 0x98	; 152
    3d54:	97 e0       	ldi	r25, 0x07	; 7
    3d56:	42 c3       	rjmp	.+1668   	; 0x43dc <_ZN7Kompass16HMC5883L_commandEhh>
				break;
    3d58:	08 95       	ret
				default:
				anzeige &=~(1<<Kompasflag);
    3d5a:	2b 7d       	andi	r18, 0xDB	; 219
				anzeige|=(1<<Kompasgaineinstellenflag);
    3d5c:	20 62       	ori	r18, 0x20	; 32
    3d5e:	30 93 2a 03 	sts	0x032A, r19
    3d62:	20 93 29 03 	sts	0x0329, r18
				break;
    3d66:	bd c1       	rjmp	.+890    	; 0x40e2 <_Z14eingabehandlerh+0x724>
    3d68:	a9 01       	movw	r20, r18
    3d6a:	48 74       	andi	r20, 0x48	; 72
    3d6c:	55 27       	eor	r21, r21
			}
		}
		else if ((anzeige&(1<<Einstellungsflag)) && (anzeige&(1<<Timerflag)))
    3d6e:	48 34       	cpi	r20, 0x48	; 72
    3d70:	51 05       	cpc	r21, r1
    3d72:	09 f0       	breq	.+2      	; 0x3d76 <_Z14eingabehandlerh+0x3b8>
    3d74:	87 c0       	rjmp	.+270    	; 0x3e84 <_Z14eingabehandlerh+0x4c6>
		{
			switch (pos)
    3d76:	90 91 28 03 	lds	r25, 0x0328
    3d7a:	92 30       	cpi	r25, 0x02	; 2
    3d7c:	a9 f1       	breq	.+106    	; 0x3de8 <_Z14eingabehandlerh+0x42a>
    3d7e:	28 f4       	brcc	.+10     	; 0x3d8a <_Z14eingabehandlerh+0x3cc>
    3d80:	99 23       	and	r25, r25
    3d82:	61 f0       	breq	.+24     	; 0x3d9c <_Z14eingabehandlerh+0x3de>
    3d84:	91 30       	cpi	r25, 0x01	; 1
    3d86:	01 f1       	breq	.+64     	; 0x3dc8 <_Z14eingabehandlerh+0x40a>
    3d88:	ac c1       	rjmp	.+856    	; 0x40e2 <_Z14eingabehandlerh+0x724>
    3d8a:	94 30       	cpi	r25, 0x04	; 4
    3d8c:	09 f4       	brne	.+2      	; 0x3d90 <_Z14eingabehandlerh+0x3d2>
    3d8e:	52 c0       	rjmp	.+164    	; 0x3e34 <_Z14eingabehandlerh+0x476>
    3d90:	08 f4       	brcc	.+2      	; 0x3d94 <_Z14eingabehandlerh+0x3d6>
    3d92:	40 c0       	rjmp	.+128    	; 0x3e14 <_Z14eingabehandlerh+0x456>
    3d94:	95 30       	cpi	r25, 0x05	; 5
    3d96:	09 f4       	brne	.+2      	; 0x3d9a <_Z14eingabehandlerh+0x3dc>
    3d98:	63 c0       	rjmp	.+198    	; 0x3e60 <_Z14eingabehandlerh+0x4a2>
    3d9a:	a3 c1       	rjmp	.+838    	; 0x40e2 <_Z14eingabehandlerh+0x724>
			{
				case 0:
				switch (taste)
    3d9c:	83 32       	cpi	r24, 0x23	; 35
    3d9e:	09 f4       	brne	.+2      	; 0x3da2 <_Z14eingabehandlerh+0x3e4>
    3da0:	a0 c1       	rjmp	.+832    	; 0x40e2 <_Z14eingabehandlerh+0x724>
    3da2:	8a 32       	cpi	r24, 0x2A	; 42
    3da4:	09 f4       	brne	.+2      	; 0x3da8 <_Z14eingabehandlerh+0x3ea>
    3da6:	9d c1       	rjmp	.+826    	; 0x40e2 <_Z14eingabehandlerh+0x724>
					case '#':
					break;
					case '*':
					break;
					default:
					zaehler.Sekunden+=(taste-'0')*10;
    3da8:	e4 e7       	ldi	r30, 0x74	; 116
    3daa:	f7 e0       	ldi	r31, 0x07	; 7
    3dac:	98 2f       	mov	r25, r24
    3dae:	99 0f       	add	r25, r25
    3db0:	90 56       	subi	r25, 0x60	; 96
    3db2:	29 2f       	mov	r18, r25
    3db4:	22 0f       	add	r18, r18
    3db6:	22 0f       	add	r18, r18
    3db8:	92 0f       	add	r25, r18
    3dba:	20 81       	ld	r18, Z
    3dbc:	92 0f       	add	r25, r18
    3dbe:	90 83       	st	Z, r25
					pos++;
    3dc0:	91 e0       	ldi	r25, 0x01	; 1
    3dc2:	90 93 28 03 	sts	0x0328, r25
					break;
    3dc6:	8d c1       	rjmp	.+794    	; 0x40e2 <_Z14eingabehandlerh+0x724>
				}
				break;
				case 1:
				switch (taste)
    3dc8:	83 32       	cpi	r24, 0x23	; 35
    3dca:	09 f4       	brne	.+2      	; 0x3dce <_Z14eingabehandlerh+0x410>
    3dcc:	8a c1       	rjmp	.+788    	; 0x40e2 <_Z14eingabehandlerh+0x724>
    3dce:	8a 32       	cpi	r24, 0x2A	; 42
    3dd0:	09 f4       	brne	.+2      	; 0x3dd4 <_Z14eingabehandlerh+0x416>
    3dd2:	87 c1       	rjmp	.+782    	; 0x40e2 <_Z14eingabehandlerh+0x724>
					case '#':
					break;
					case '*':
					break;
					default:
					zaehler.Sekunden+=(taste-'0');
    3dd4:	e4 e7       	ldi	r30, 0x74	; 116
    3dd6:	f7 e0       	ldi	r31, 0x07	; 7
    3dd8:	90 81       	ld	r25, Z
    3dda:	90 53       	subi	r25, 0x30	; 48
    3ddc:	98 0f       	add	r25, r24
    3dde:	90 83       	st	Z, r25
					pos++;
    3de0:	92 e0       	ldi	r25, 0x02	; 2
    3de2:	90 93 28 03 	sts	0x0328, r25
					break;
    3de6:	7d c1       	rjmp	.+762    	; 0x40e2 <_Z14eingabehandlerh+0x724>
				}
				break;
				case 2:
				switch (taste)
    3de8:	83 32       	cpi	r24, 0x23	; 35
    3dea:	09 f4       	brne	.+2      	; 0x3dee <_Z14eingabehandlerh+0x430>
    3dec:	7a c1       	rjmp	.+756    	; 0x40e2 <_Z14eingabehandlerh+0x724>
    3dee:	8a 32       	cpi	r24, 0x2A	; 42
    3df0:	09 f4       	brne	.+2      	; 0x3df4 <_Z14eingabehandlerh+0x436>
    3df2:	77 c1       	rjmp	.+750    	; 0x40e2 <_Z14eingabehandlerh+0x724>
					case '#':
					break;
					case '*':
					break;
					default:
					zaehler.Minuten+=(taste-'0')*10;
    3df4:	e3 e7       	ldi	r30, 0x73	; 115
    3df6:	f7 e0       	ldi	r31, 0x07	; 7
    3df8:	98 2f       	mov	r25, r24
    3dfa:	99 0f       	add	r25, r25
    3dfc:	90 56       	subi	r25, 0x60	; 96
    3dfe:	29 2f       	mov	r18, r25
    3e00:	22 0f       	add	r18, r18
    3e02:	22 0f       	add	r18, r18
    3e04:	92 0f       	add	r25, r18
    3e06:	20 81       	ld	r18, Z
    3e08:	92 0f       	add	r25, r18
    3e0a:	90 83       	st	Z, r25
					pos++;
    3e0c:	93 e0       	ldi	r25, 0x03	; 3
    3e0e:	90 93 28 03 	sts	0x0328, r25
					break;
    3e12:	67 c1       	rjmp	.+718    	; 0x40e2 <_Z14eingabehandlerh+0x724>
				}
				break;
				case 3:
				switch (taste)
    3e14:	83 32       	cpi	r24, 0x23	; 35
    3e16:	09 f4       	brne	.+2      	; 0x3e1a <_Z14eingabehandlerh+0x45c>
    3e18:	64 c1       	rjmp	.+712    	; 0x40e2 <_Z14eingabehandlerh+0x724>
    3e1a:	8a 32       	cpi	r24, 0x2A	; 42
    3e1c:	09 f4       	brne	.+2      	; 0x3e20 <_Z14eingabehandlerh+0x462>
    3e1e:	61 c1       	rjmp	.+706    	; 0x40e2 <_Z14eingabehandlerh+0x724>
					case '#':
					break;
					case '*':
					break;
					default:
					zaehler.Minuten+=(taste-'0');
    3e20:	e3 e7       	ldi	r30, 0x73	; 115
    3e22:	f7 e0       	ldi	r31, 0x07	; 7
    3e24:	90 81       	ld	r25, Z
    3e26:	90 53       	subi	r25, 0x30	; 48
    3e28:	98 0f       	add	r25, r24
    3e2a:	90 83       	st	Z, r25
					pos++;
    3e2c:	94 e0       	ldi	r25, 0x04	; 4
    3e2e:	90 93 28 03 	sts	0x0328, r25
					break;
    3e32:	57 c1       	rjmp	.+686    	; 0x40e2 <_Z14eingabehandlerh+0x724>
				}
				break;
				case 4:
				switch (taste)
    3e34:	83 32       	cpi	r24, 0x23	; 35
    3e36:	09 f4       	brne	.+2      	; 0x3e3a <_Z14eingabehandlerh+0x47c>
    3e38:	54 c1       	rjmp	.+680    	; 0x40e2 <_Z14eingabehandlerh+0x724>
    3e3a:	8a 32       	cpi	r24, 0x2A	; 42
    3e3c:	09 f4       	brne	.+2      	; 0x3e40 <_Z14eingabehandlerh+0x482>
    3e3e:	51 c1       	rjmp	.+674    	; 0x40e2 <_Z14eingabehandlerh+0x724>
					case '#':
					break;
					case '*':
					break;
					default:
					zaehler.Stunden+=(taste-'0')*10;
    3e40:	e2 e7       	ldi	r30, 0x72	; 114
    3e42:	f7 e0       	ldi	r31, 0x07	; 7
    3e44:	98 2f       	mov	r25, r24
    3e46:	99 0f       	add	r25, r25
    3e48:	90 56       	subi	r25, 0x60	; 96
    3e4a:	29 2f       	mov	r18, r25
    3e4c:	22 0f       	add	r18, r18
    3e4e:	22 0f       	add	r18, r18
    3e50:	92 0f       	add	r25, r18
    3e52:	20 81       	ld	r18, Z
    3e54:	92 0f       	add	r25, r18
    3e56:	90 83       	st	Z, r25
					pos++;
    3e58:	95 e0       	ldi	r25, 0x05	; 5
    3e5a:	90 93 28 03 	sts	0x0328, r25
					break;
    3e5e:	41 c1       	rjmp	.+642    	; 0x40e2 <_Z14eingabehandlerh+0x724>
				}
				break;
				case 5:
				switch (taste)
    3e60:	83 32       	cpi	r24, 0x23	; 35
    3e62:	41 f0       	breq	.+16     	; 0x3e74 <_Z14eingabehandlerh+0x4b6>
    3e64:	8a 32       	cpi	r24, 0x2A	; 42
    3e66:	31 f0       	breq	.+12     	; 0x3e74 <_Z14eingabehandlerh+0x4b6>
					case '#':
					break;
					case '*':
					break;
					default:
					zaehler.Stunden+=(taste-'0');
    3e68:	e2 e7       	ldi	r30, 0x72	; 114
    3e6a:	f7 e0       	ldi	r31, 0x07	; 7
    3e6c:	90 81       	ld	r25, Z
    3e6e:	90 53       	subi	r25, 0x30	; 48
    3e70:	98 0f       	add	r25, r24
    3e72:	90 83       	st	Z, r25
					pos++;
					break;
				}
				pos=0;
    3e74:	10 92 28 03 	sts	0x0328, r1
				anzeige&=~(1<<Einstellungsflag);
    3e78:	27 7f       	andi	r18, 0xF7	; 247
    3e7a:	30 93 2a 03 	sts	0x032A, r19
    3e7e:	20 93 29 03 	sts	0x0329, r18
				break;
    3e82:	2f c1       	rjmp	.+606    	; 0x40e2 <_Z14eingabehandlerh+0x724>
			}
		}
		else if ((anzeige&(1<<Stoppuhrflag)))
    3e84:	27 ff       	sbrs	r18, 7
    3e86:	23 c0       	rjmp	.+70     	; 0x3ece <_Z14eingabehandlerh+0x510>
		{
			if (taste=='*')
    3e88:	8a 32       	cpi	r24, 0x2A	; 42
    3e8a:	71 f4       	brne	.+28     	; 0x3ea8 <_Z14eingabehandlerh+0x4ea>
			{
				if ((anzeige&(1<<Einstellungsflag)))
    3e8c:	23 ff       	sbrs	r18, 3
    3e8e:	06 c0       	rjmp	.+12     	; 0x3e9c <_Z14eingabehandlerh+0x4de>
				{
					anzeige&=~(1<<Einstellungsflag);
    3e90:	27 7f       	andi	r18, 0xF7	; 247
    3e92:	30 93 2a 03 	sts	0x032A, r19
    3e96:	20 93 29 03 	sts	0x0329, r18
    3e9a:	45 c1       	rjmp	.+650    	; 0x4126 <__stack+0x27>
				}
				else{
					anzeige|=(1<<Einstellungsflag);
    3e9c:	28 60       	ori	r18, 0x08	; 8
    3e9e:	30 93 2a 03 	sts	0x032A, r19
    3ea2:	20 93 29 03 	sts	0x0329, r18
    3ea6:	3f c1       	rjmp	.+638    	; 0x4126 <__stack+0x27>
				}
			}
			else if (taste=='0')
    3ea8:	80 33       	cpi	r24, 0x30	; 48
    3eaa:	39 f4       	brne	.+14     	; 0x3eba <_Z14eingabehandlerh+0x4fc>
			{
				stoppuhr.Sekunden=0;
    3eac:	10 92 59 07 	sts	0x0759, r1
				stoppuhr.Minuten=0;
    3eb0:	10 92 58 07 	sts	0x0758, r1
				stoppuhr.Stunden=0;
    3eb4:	10 92 57 07 	sts	0x0757, r1
    3eb8:	08 95       	ret
			}
			else if (taste=='#')
    3eba:	83 32       	cpi	r24, 0x23	; 35
    3ebc:	09 f0       	breq	.+2      	; 0x3ec0 <_Z14eingabehandlerh+0x502>
    3ebe:	39 c1       	rjmp	.+626    	; 0x4132 <__stack+0x33>
			{
				anzeige&=~((1<<Stoppuhrflag)|(1<<Einstellungsflag));
    3ec0:	27 77       	andi	r18, 0x77	; 119
				anzeige|=(1<<menueflag);
    3ec2:	30 62       	ori	r19, 0x20	; 32
    3ec4:	30 93 2a 03 	sts	0x032A, r19
    3ec8:	20 93 29 03 	sts	0x0329, r18
    3ecc:	08 95       	ret
			}
		}
		else if ((anzeige&(1<<Uhrflag)))
    3ece:	20 ff       	sbrs	r18, 0
    3ed0:	19 c0       	rjmp	.+50     	; 0x3f04 <_Z14eingabehandlerh+0x546>
		{
			if (taste=='#')
    3ed2:	83 32       	cpi	r24, 0x23	; 35
    3ed4:	39 f4       	brne	.+14     	; 0x3ee4 <_Z14eingabehandlerh+0x526>
			{
				anzeige&=~(1<<Uhrflag);
    3ed6:	2e 7f       	andi	r18, 0xFE	; 254
				anzeige|=(1<<menueflag);
    3ed8:	30 62       	ori	r19, 0x20	; 32
    3eda:	30 93 2a 03 	sts	0x032A, r19
    3ede:	20 93 29 03 	sts	0x0329, r18
    3ee2:	08 95       	ret
			}
			else if (taste=='0')
    3ee4:	80 33       	cpi	r24, 0x30	; 48
    3ee6:	09 f0       	breq	.+2      	; 0x3eea <_Z14eingabehandlerh+0x52c>
    3ee8:	fc c0       	rjmp	.+504    	; 0x40e2 <_Z14eingabehandlerh+0x724>
			{
				if (LED.ison())
    3eea:	83 e4       	ldi	r24, 0x43	; 67
    3eec:	93 e0       	ldi	r25, 0x03	; 3
    3eee:	73 d4       	rcall	.+2278   	; 0x47d6 <_ZN6Output4isonEv>
    3ef0:	88 23       	and	r24, r24
    3ef2:	21 f0       	breq	.+8      	; 0x3efc <_Z14eingabehandlerh+0x53e>
				{
					LED.off();
    3ef4:	83 e4       	ldi	r24, 0x43	; 67
    3ef6:	93 e0       	ldi	r25, 0x03	; 3
    3ef8:	b1 c4       	rjmp	.+2402   	; 0x485c <_ZN6Output3offEv>
    3efa:	08 95       	ret
				}
				else{
					LED.on();
    3efc:	83 e4       	ldi	r24, 0x43	; 67
    3efe:	93 e0       	ldi	r25, 0x03	; 3
    3f00:	21 c4       	rjmp	.+2114   	; 0x4744 <_ZN6Output2onEv>
    3f02:	08 95       	ret
				}
			}
		}
		else if ((anzeige&(1<<Kompasflag)))
    3f04:	22 ff       	sbrs	r18, 2
    3f06:	1a c0       	rjmp	.+52     	; 0x3f3c <_Z14eingabehandlerh+0x57e>
		{
			if (taste=='#')
    3f08:	83 32       	cpi	r24, 0x23	; 35
    3f0a:	41 f4       	brne	.+16     	; 0x3f1c <_Z14eingabehandlerh+0x55e>
			{
				anzeige&=~(1<<Kompasflag);
    3f0c:	c9 01       	movw	r24, r18
    3f0e:	8b 7f       	andi	r24, 0xFB	; 251
				anzeige|=(1<<menueflag);
    3f10:	90 62       	ori	r25, 0x20	; 32
    3f12:	90 93 2a 03 	sts	0x032A, r25
    3f16:	80 93 29 03 	sts	0x0329, r24
    3f1a:	08 95       	ret
			}
			else if (taste=='0')
    3f1c:	80 33       	cpi	r24, 0x30	; 48
    3f1e:	09 f0       	breq	.+2      	; 0x3f22 <_Z14eingabehandlerh+0x564>
    3f20:	e0 c0       	rjmp	.+448    	; 0x40e2 <_Z14eingabehandlerh+0x724>
			{
				if (LED.ison())
    3f22:	83 e4       	ldi	r24, 0x43	; 67
    3f24:	93 e0       	ldi	r25, 0x03	; 3
    3f26:	57 d4       	rcall	.+2222   	; 0x47d6 <_ZN6Output4isonEv>
    3f28:	88 23       	and	r24, r24
    3f2a:	21 f0       	breq	.+8      	; 0x3f34 <_Z14eingabehandlerh+0x576>
				{
					LED.off();
    3f2c:	83 e4       	ldi	r24, 0x43	; 67
    3f2e:	93 e0       	ldi	r25, 0x03	; 3
    3f30:	95 c4       	rjmp	.+2346   	; 0x485c <_ZN6Output3offEv>
    3f32:	08 95       	ret
				}
				else{
					LED.on();
    3f34:	83 e4       	ldi	r24, 0x43	; 67
    3f36:	93 e0       	ldi	r25, 0x03	; 3
    3f38:	05 c4       	rjmp	.+2058   	; 0x4744 <_ZN6Output2onEv>
    3f3a:	08 95       	ret
				}
			}
		}
		else if ((anzeige&(1<<Fahradflag)))
    3f3c:	21 ff       	sbrs	r18, 1
    3f3e:	3a c0       	rjmp	.+116    	; 0x3fb4 <_Z14eingabehandlerh+0x5f6>
		{
			if (taste=='#')
    3f40:	83 32       	cpi	r24, 0x23	; 35
    3f42:	69 f4       	brne	.+26     	; 0x3f5e <_Z14eingabehandlerh+0x5a0>
			{
				anzeige&=~(1<<Fahradflag);
    3f44:	c9 01       	movw	r24, r18
    3f46:	8d 7f       	andi	r24, 0xFD	; 253
				anzeige|=(1<<menueflag);
    3f48:	90 62       	ori	r25, 0x20	; 32
    3f4a:	90 93 2a 03 	sts	0x032A, r25
    3f4e:	80 93 29 03 	sts	0x0329, r24
				TCCR1B &= ~((1<<CS12) | (1<<CS10));
    3f52:	e1 e8       	ldi	r30, 0x81	; 129
    3f54:	f0 e0       	ldi	r31, 0x00	; 0
    3f56:	80 81       	ld	r24, Z
    3f58:	8a 7f       	andi	r24, 0xFA	; 250
    3f5a:	80 83       	st	Z, r24
    3f5c:	08 95       	ret
			}
			else if (taste=='*')
    3f5e:	8a 32       	cpi	r24, 0x2A	; 42
    3f60:	c9 f4       	brne	.+50     	; 0x3f94 <_Z14eingabehandlerh+0x5d6>
			{
				maxgeschw = 0;
    3f62:	10 92 1c 03 	sts	0x031C, r1
    3f66:	10 92 1d 03 	sts	0x031D, r1
    3f6a:	10 92 1e 03 	sts	0x031E, r1
    3f6e:	10 92 1f 03 	sts	0x031F, r1
				strecke = 0;
    3f72:	10 92 20 03 	sts	0x0320, r1
    3f76:	10 92 21 03 	sts	0x0321, r1
    3f7a:	10 92 22 03 	sts	0x0322, r1
    3f7e:	10 92 23 03 	sts	0x0323, r1
				Fahrtzeit = 0;
    3f82:	10 92 18 03 	sts	0x0318, r1
    3f86:	10 92 19 03 	sts	0x0319, r1
    3f8a:	10 92 1a 03 	sts	0x031A, r1
    3f8e:	10 92 1b 03 	sts	0x031B, r1
    3f92:	c9 c0       	rjmp	.+402    	; 0x4126 <__stack+0x27>
			}
			else if (taste=='0')
    3f94:	80 33       	cpi	r24, 0x30	; 48
    3f96:	09 f0       	breq	.+2      	; 0x3f9a <_Z14eingabehandlerh+0x5dc>
    3f98:	cc c0       	rjmp	.+408    	; 0x4132 <__stack+0x33>
			{
				if (LED.ison())
    3f9a:	83 e4       	ldi	r24, 0x43	; 67
    3f9c:	93 e0       	ldi	r25, 0x03	; 3
    3f9e:	1b d4       	rcall	.+2102   	; 0x47d6 <_ZN6Output4isonEv>
    3fa0:	88 23       	and	r24, r24
    3fa2:	21 f0       	breq	.+8      	; 0x3fac <_Z14eingabehandlerh+0x5ee>
				{
					LED.off();
    3fa4:	83 e4       	ldi	r24, 0x43	; 67
    3fa6:	93 e0       	ldi	r25, 0x03	; 3
    3fa8:	59 c4       	rjmp	.+2226   	; 0x485c <_ZN6Output3offEv>
    3faa:	08 95       	ret
				}
				else{
					LED.on();
    3fac:	83 e4       	ldi	r24, 0x43	; 67
    3fae:	93 e0       	ldi	r25, 0x03	; 3
    3fb0:	c9 c3       	rjmp	.+1938   	; 0x4744 <_ZN6Output2onEv>
    3fb2:	08 95       	ret
				}
			}
		}
		else if ((anzeige&(1<<Druckflag)))
    3fb4:	31 ff       	sbrs	r19, 1
    3fb6:	28 c0       	rjmp	.+80     	; 0x4008 <_Z14eingabehandlerh+0x64a>
		{
			if (taste=='#')
    3fb8:	83 32       	cpi	r24, 0x23	; 35
    3fba:	41 f4       	brne	.+16     	; 0x3fcc <_Z14eingabehandlerh+0x60e>
			{
				anzeige&=~(1<<Druckflag);
    3fbc:	c9 01       	movw	r24, r18
    3fbe:	9d 7f       	andi	r25, 0xFD	; 253
				anzeige|=(1<<menueflag);
    3fc0:	90 62       	ori	r25, 0x20	; 32
    3fc2:	90 93 2a 03 	sts	0x032A, r25
    3fc6:	80 93 29 03 	sts	0x0329, r24
    3fca:	08 95       	ret
			}
			else if (taste=='*')
    3fcc:	8a 32       	cpi	r24, 0x2A	; 42
    3fce:	61 f4       	brne	.+24     	; 0x3fe8 <_Z14eingabehandlerh+0x62a>
			{
				Baro.set_Pressure0(Baro.Press);
    3fd0:	40 91 2f 03 	lds	r20, 0x032F
    3fd4:	50 91 30 03 	lds	r21, 0x0330
    3fd8:	60 91 31 03 	lds	r22, 0x0331
    3fdc:	70 91 32 03 	lds	r23, 0x0332
    3fe0:	8f e2       	ldi	r24, 0x2F	; 47
    3fe2:	93 e0       	ldi	r25, 0x03	; 3
    3fe4:	34 d6       	rcall	.+3176   	; 0x4c4e <_ZN8Pressure13set_Pressure0Ed>
    3fe6:	9f c0       	rjmp	.+318    	; 0x4126 <__stack+0x27>
			}
			else if (taste=='0')
    3fe8:	80 33       	cpi	r24, 0x30	; 48
    3fea:	09 f0       	breq	.+2      	; 0x3fee <_Z14eingabehandlerh+0x630>
    3fec:	a2 c0       	rjmp	.+324    	; 0x4132 <__stack+0x33>
			{
				if (LED.ison())
    3fee:	83 e4       	ldi	r24, 0x43	; 67
    3ff0:	93 e0       	ldi	r25, 0x03	; 3
    3ff2:	f1 d3       	rcall	.+2018   	; 0x47d6 <_ZN6Output4isonEv>
    3ff4:	88 23       	and	r24, r24
    3ff6:	21 f0       	breq	.+8      	; 0x4000 <_Z14eingabehandlerh+0x642>
				{
					LED.off();
    3ff8:	83 e4       	ldi	r24, 0x43	; 67
    3ffa:	93 e0       	ldi	r25, 0x03	; 3
    3ffc:	2f c4       	rjmp	.+2142   	; 0x485c <_ZN6Output3offEv>
    3ffe:	08 95       	ret
				}
				else{
					LED.on();
    4000:	83 e4       	ldi	r24, 0x43	; 67
    4002:	93 e0       	ldi	r25, 0x03	; 3
    4004:	9f c3       	rjmp	.+1854   	; 0x4744 <_ZN6Output2onEv>
    4006:	08 95       	ret
				}
			}
		}
		else if ((anzeige&(1<<Timerflag)))
    4008:	26 ff       	sbrs	r18, 6
    400a:	1e c0       	rjmp	.+60     	; 0x4048 <_Z14eingabehandlerh+0x68a>
		{
			if (taste=='#')
    400c:	83 32       	cpi	r24, 0x23	; 35
    400e:	09 f0       	breq	.+2      	; 0x4012 <_Z14eingabehandlerh+0x654>
    4010:	68 c0       	rjmp	.+208    	; 0x40e2 <_Z14eingabehandlerh+0x724>
			{
				anzeige&=~((1<<Timerflag)|(1<<blinkflag));
    4012:	2f 7b       	andi	r18, 0xBF	; 191
    4014:	3f 7b       	andi	r19, 0xBF	; 191
    4016:	30 93 2a 03 	sts	0x032A, r19
    401a:	20 93 29 03 	sts	0x0329, r18
				oled.invert(0);	//fuer den Fall, dass es invertiert blieb (50% der Faelle)
    401e:	60 e0       	ldi	r22, 0x00	; 0
    4020:	86 e4       	ldi	r24, 0x46	; 70
    4022:	93 e0       	ldi	r25, 0x03	; 3
    4024:	0e 94 87 04 	call	0x90e	; 0x90e <_ZN7Display6invertEh>
				LED.off();
    4028:	83 e4       	ldi	r24, 0x43	; 67
    402a:	93 e0       	ldi	r25, 0x03	; 3
    402c:	17 d4       	rcall	.+2094   	; 0x485c <_ZN6Output3offEv>
				Vibrationsmotor.off();
    402e:	81 e4       	ldi	r24, 0x41	; 65
    4030:	93 e0       	ldi	r25, 0x03	; 3
    4032:	14 d4       	rcall	.+2088   	; 0x485c <_ZN6Output3offEv>
				
				anzeige|=(1<<menueflag);
    4034:	80 91 29 03 	lds	r24, 0x0329
    4038:	90 91 2a 03 	lds	r25, 0x032A
    403c:	90 62       	ori	r25, 0x20	; 32
    403e:	90 93 2a 03 	sts	0x032A, r25
    4042:	80 93 29 03 	sts	0x0329, r24
    4046:	08 95       	ret
			}
		}
		else if ((anzeige&(1<<Uhrflaggross)))
    4048:	32 ff       	sbrs	r19, 2
    404a:	1a c0       	rjmp	.+52     	; 0x4080 <_Z14eingabehandlerh+0x6c2>
		{
			if (taste=='#')
    404c:	83 32       	cpi	r24, 0x23	; 35
    404e:	41 f4       	brne	.+16     	; 0x4060 <_Z14eingabehandlerh+0x6a2>
			{
				anzeige&=~(1<<Uhrflaggross);
    4050:	c9 01       	movw	r24, r18
    4052:	9b 7f       	andi	r25, 0xFB	; 251
				anzeige|=(1<<menueflag);
    4054:	90 62       	ori	r25, 0x20	; 32
    4056:	90 93 2a 03 	sts	0x032A, r25
    405a:	80 93 29 03 	sts	0x0329, r24
    405e:	08 95       	ret
			}
			else if (taste=='0')
    4060:	80 33       	cpi	r24, 0x30	; 48
    4062:	09 f0       	breq	.+2      	; 0x4066 <_Z14eingabehandlerh+0x6a8>
    4064:	3e c0       	rjmp	.+124    	; 0x40e2 <_Z14eingabehandlerh+0x724>
			{
				if (LED.ison())
    4066:	83 e4       	ldi	r24, 0x43	; 67
    4068:	93 e0       	ldi	r25, 0x03	; 3
    406a:	b5 d3       	rcall	.+1898   	; 0x47d6 <_ZN6Output4isonEv>
    406c:	88 23       	and	r24, r24
    406e:	21 f0       	breq	.+8      	; 0x4078 <_Z14eingabehandlerh+0x6ba>
				{
					LED.off();
    4070:	83 e4       	ldi	r24, 0x43	; 67
    4072:	93 e0       	ldi	r25, 0x03	; 3
    4074:	f3 c3       	rjmp	.+2022   	; 0x485c <_ZN6Output3offEv>
    4076:	08 95       	ret
				}
				else{
					LED.on();
    4078:	83 e4       	ldi	r24, 0x43	; 67
    407a:	93 e0       	ldi	r25, 0x03	; 3
    407c:	63 c3       	rjmp	.+1734   	; 0x4744 <_ZN6Output2onEv>
    407e:	08 95       	ret
				}
			}
		}
		else if ((anzeige&(1<<Weckeranzeigeflag)))
    4080:	33 ff       	sbrs	r19, 3
    4082:	26 c0       	rjmp	.+76     	; 0x40d0 <_Z14eingabehandlerh+0x712>
		{
			if (taste=='#')
    4084:	83 32       	cpi	r24, 0x23	; 35
    4086:	41 f4       	brne	.+16     	; 0x4098 <_Z14eingabehandlerh+0x6da>
			{
				anzeige&=~(1<<Weckeranzeigeflag);
    4088:	c9 01       	movw	r24, r18
    408a:	97 7f       	andi	r25, 0xF7	; 247
				anzeige|=(1<<menueflag);
    408c:	90 62       	ori	r25, 0x20	; 32
    408e:	90 93 2a 03 	sts	0x032A, r25
    4092:	80 93 29 03 	sts	0x0329, r24
    4096:	08 95       	ret
			}
			if (taste=='*')
    4098:	8a 32       	cpi	r24, 0x2A	; 42
    409a:	09 f0       	breq	.+2      	; 0x409e <_Z14eingabehandlerh+0x6e0>
    409c:	4a c0       	rjmp	.+148    	; 0x4132 <__stack+0x33>
			{
				if (rtc.interupts&(1<<Weckeractiv))
    409e:	94 ff       	sbrs	r25, 4
    40a0:	06 c0       	rjmp	.+12     	; 0x40ae <_Z14eingabehandlerh+0x6f0>
				{
					rtc.interupts &= ~((1<<Weckerein) | (1<<Weckeractiv));
    40a2:	89 2f       	mov	r24, r25
    40a4:	87 7e       	andi	r24, 0xE7	; 231
    40a6:	82 60       	ori	r24, 0x02	; 2
    40a8:	80 93 95 07 	sts	0x0795, r24
    40ac:	0b c0       	rjmp	.+22     	; 0x40c4 <_Z14eingabehandlerh+0x706>
				}
				else if ((rtc.interupts&(1<<Weckerein)))
    40ae:	93 ff       	sbrs	r25, 3
    40b0:	06 c0       	rjmp	.+12     	; 0x40be <_Z14eingabehandlerh+0x700>
				{
					rtc.interupts &= ~(1<<Weckerein);
    40b2:	89 2f       	mov	r24, r25
    40b4:	87 7f       	andi	r24, 0xF7	; 247
    40b6:	82 60       	ori	r24, 0x02	; 2
    40b8:	80 93 95 07 	sts	0x0795, r24
    40bc:	03 c0       	rjmp	.+6      	; 0x40c4 <_Z14eingabehandlerh+0x706>
				}
				else{
					rtc.interupts |= (1<<Weckerein);
    40be:	9a 60       	ori	r25, 0x0A	; 10
    40c0:	90 93 95 07 	sts	0x0795, r25
				}
				rtc.interupts|=(1<<minuteninterupt);
    40c4:	e5 e9       	ldi	r30, 0x95	; 149
    40c6:	f7 e0       	ldi	r31, 0x07	; 7
    40c8:	80 81       	ld	r24, Z
    40ca:	84 60       	ori	r24, 0x04	; 4
    40cc:	80 83       	st	Z, r24
    40ce:	2b c0       	rjmp	.+86     	; 0x4126 <__stack+0x27>
			}
		}
		else if (anzeige==0)
    40d0:	23 2b       	or	r18, r19
    40d2:	39 f4       	brne	.+14     	; 0x40e2 <_Z14eingabehandlerh+0x724>
		{
			anzeige|=(1<<menueflag);
    40d4:	80 e0       	ldi	r24, 0x00	; 0
    40d6:	90 e2       	ldi	r25, 0x20	; 32
    40d8:	90 93 2a 03 	sts	0x032A, r25
    40dc:	80 93 29 03 	sts	0x0329, r24
    40e0:	08 95       	ret
		}
		if ((anzeige&(1<<blinkflag)))
    40e2:	20 91 29 03 	lds	r18, 0x0329
    40e6:	30 91 2a 03 	lds	r19, 0x032A
    40ea:	36 ff       	sbrs	r19, 6
    40ec:	22 c0       	rjmp	.+68     	; 0x4132 <__stack+0x33>
		{
			if (taste=='*')
    40ee:	8a 32       	cpi	r24, 0x2A	; 42
    40f0:	01 f5       	brne	.+64     	; 0x4132 <__stack+0x33>
			{
				anzeige &=~(1<<blinkflag);
    40f2:	3f 7b       	andi	r19, 0xBF	; 191
    40f4:	30 93 2a 03 	sts	0x032A, r19
    40f8:	20 93 29 03 	sts	0x0329, r18
				oled.invert(0);	//fuer den Fall, dass es invertiert blieb (50% der Faelle)
    40fc:	60 e0       	ldi	r22, 0x00	; 0
    40fe:	86 e4       	ldi	r24, 0x46	; 70
    4100:	93 e0       	ldi	r25, 0x03	; 3
    4102:	0e 94 87 04 	call	0x90e	; 0x90e <_ZN7Display6invertEh>
				LED.off();
    4106:	83 e4       	ldi	r24, 0x43	; 67
    4108:	93 e0       	ldi	r25, 0x03	; 3
    410a:	a8 d3       	rcall	.+1872   	; 0x485c <_ZN6Output3offEv>
				Vibrationsmotor.off();
    410c:	81 e4       	ldi	r24, 0x41	; 65
    410e:	93 e0       	ldi	r25, 0x03	; 3
    4110:	a5 d3       	rcall	.+1866   	; 0x485c <_ZN6Output3offEv>
				if ((rtc.interupts&(1<<Weckeractiv)))
    4112:	80 91 95 07 	lds	r24, 0x0795
    4116:	98 2f       	mov	r25, r24
    4118:	98 71       	andi	r25, 0x18	; 24
				{
					if ((rtc.interupts&(1<<Weckerein)))
    411a:	98 31       	cpi	r25, 0x18	; 24
    411c:	51 f4       	brne	.+20     	; 0x4132 <__stack+0x33>
					{
						rtc.interupts &= ~((1<<Weckerein)|(1<<Weckeractiv));
    411e:	87 7e       	andi	r24, 0xE7	; 231
    4120:	80 93 95 07 	sts	0x0795, r24
    4124:	08 95       	ret
		}
		else if (anzeige==0)
		{
			anzeige|=(1<<menueflag);
		}
		if ((anzeige&(1<<blinkflag)))
    4126:	20 91 29 03 	lds	r18, 0x0329
    412a:	30 91 2a 03 	lds	r19, 0x032A
    412e:	36 fd       	sbrc	r19, 6
    4130:	e0 cf       	rjmp	.-64     	; 0x40f2 <_Z14eingabehandlerh+0x734>
    4132:	08 95       	ret

00004134 <main>:
void eingabehandler(uint8_t taste);

int main(void)
{
	//initialisierung
	initialisierung();
    4134:	e8 d9       	rcall	.-3120   	; 0x3506 <_Z15initialisierungv>
    while(1)
    {
         //Steuerung der interupts durch Handler
         maininterupthandler();
    4136:	46 da       	rcall	.-2932   	; 0x35c4 <_Z19maininterupthandlerv>
         //Steuerung der Anzeige alle Sekunde zur aktualisierung maximale Aktulisierungsrate ist 1Hz
         anzeigehandler();
    4138:	67 da       	rcall	.-2866   	; 0x3608 <_Z14anzeigehandlerv>
         //Tasthandler
         eingabehandler(Tastatur.Taster());
    413a:	85 e4       	ldi	r24, 0x45	; 69
    413c:	93 e0       	ldi	r25, 0x03	; 3
    413e:	b2 d0       	rcall	.+356    	; 0x42a4 <_ZN9Interface6TasterEv>
    4140:	3e dc       	rcall	.-1924   	; 0x39be <_Z14eingabehandlerh>
    4142:	f9 cf       	rjmp	.-14     	; 0x4136 <main+0x2>

00004144 <_GLOBAL__sub_I_kompass>:
#include <stdlib.h>
#include <stdio.h>
#include <avr/interrupt.h>

#include "Kompass.h"
Kompass kompass;
    4144:	88 e9       	ldi	r24, 0x98	; 152
    4146:	97 e0       	ldi	r25, 0x07	; 7
    4148:	63 d1       	rcall	.+710    	; 0x4410 <_ZN7KompassC1Ev>

#include "RTC.h"
RTC rtc;
    414a:	8d e7       	ldi	r24, 0x7D	; 125
    414c:	97 e0       	ldi	r25, 0x07	; 7
    414e:	09 d6       	rcall	.+3090   	; 0x4d62 <_ZN3RTCC1Ev>
RTC zaehler;
    4150:	82 e6       	ldi	r24, 0x62	; 98
    4152:	97 e0       	ldi	r25, 0x07	; 7
    4154:	06 d6       	rcall	.+3084   	; 0x4d62 <_ZN3RTCC1Ev>
RTC stoppuhr;
    4156:	87 e4       	ldi	r24, 0x47	; 71
    4158:	97 e0       	ldi	r25, 0x07	; 7
    415a:	03 d6       	rcall	.+3078   	; 0x4d62 <_ZN3RTCC1Ev>

#include "Display.h"
Display oled;
    415c:	86 e4       	ldi	r24, 0x46	; 70
    415e:	93 e0       	ldi	r25, 0x03	; 3
    4160:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <_ZN7DisplayC1Ev>

#include "Interface.h"
Interface Tastatur;
    4164:	85 e4       	ldi	r24, 0x45	; 69
    4166:	93 e0       	ldi	r25, 0x03	; 3
    4168:	69 d0       	rcall	.+210    	; 0x423c <_ZN9InterfaceC1Ev>

#include "Output.h"
Output LED('B',PORTB1);
    416a:	41 e0       	ldi	r20, 0x01	; 1
    416c:	62 e4       	ldi	r22, 0x42	; 66
    416e:	83 e4       	ldi	r24, 0x43	; 67
    4170:	93 e0       	ldi	r25, 0x03	; 3
    4172:	a5 d2       	rcall	.+1354   	; 0x46be <_ZN6OutputC1Ehh>
Output Vibrationsmotor('B',PORTB2);
    4174:	42 e0       	ldi	r20, 0x02	; 2
    4176:	62 e4       	ldi	r22, 0x42	; 66
    4178:	81 e4       	ldi	r24, 0x41	; 65
    417a:	93 e0       	ldi	r25, 0x03	; 3
    417c:	a0 d2       	rcall	.+1344   	; 0x46be <_ZN6OutputC1Ehh>
Output IRLED('D',PORTD7);
    417e:	47 e0       	ldi	r20, 0x07	; 7
    4180:	64 e4       	ldi	r22, 0x44	; 68
    4182:	8f e3       	ldi	r24, 0x3F	; 63
    4184:	93 e0       	ldi	r25, 0x03	; 3
    4186:	9b d2       	rcall	.+1334   	; 0x46be <_ZN6OutputC1Ehh>
Output Sound('B',PORTB3);
    4188:	43 e0       	ldi	r20, 0x03	; 3
    418a:	62 e4       	ldi	r22, 0x42	; 66
    418c:	8d e3       	ldi	r24, 0x3D	; 61
    418e:	93 e0       	ldi	r25, 0x03	; 3
    4190:	96 d2       	rcall	.+1324   	; 0x46be <_ZN6OutputC1Ehh>

#include "Pressure.h"
Pressure Baro;
    4192:	8f e2       	ldi	r24, 0x2F	; 47
    4194:	93 e0       	ldi	r25, 0x03	; 3
    4196:	2a c4       	rjmp	.+2132   	; 0x49ec <_ZN8PressureC1Ev>
    4198:	08 95       	ret

0000419a <_GLOBAL__sub_D_kompass>:
    419a:	8f e2       	ldi	r24, 0x2F	; 47
    419c:	93 e0       	ldi	r25, 0x03	; 3
    419e:	f4 d3       	rcall	.+2024   	; 0x4988 <_ZN8PressureD1Ev>

#include "Output.h"
Output LED('B',PORTB1);
Output Vibrationsmotor('B',PORTB2);
Output IRLED('D',PORTD7);
Output Sound('B',PORTB3);
    41a0:	8d e3       	ldi	r24, 0x3D	; 61
    41a2:	93 e0       	ldi	r25, 0x03	; 3
    41a4:	ce d2       	rcall	.+1436   	; 0x4742 <_ZN6OutputD1Ev>
Interface Tastatur;

#include "Output.h"
Output LED('B',PORTB1);
Output Vibrationsmotor('B',PORTB2);
Output IRLED('D',PORTD7);
    41a6:	8f e3       	ldi	r24, 0x3F	; 63
    41a8:	93 e0       	ldi	r25, 0x03	; 3
    41aa:	cb d2       	rcall	.+1430   	; 0x4742 <_ZN6OutputD1Ev>
#include "Interface.h"
Interface Tastatur;

#include "Output.h"
Output LED('B',PORTB1);
Output Vibrationsmotor('B',PORTB2);
    41ac:	81 e4       	ldi	r24, 0x41	; 65
    41ae:	93 e0       	ldi	r25, 0x03	; 3
    41b0:	c8 d2       	rcall	.+1424   	; 0x4742 <_ZN6OutputD1Ev>

#include "Interface.h"
Interface Tastatur;

#include "Output.h"
Output LED('B',PORTB1);
    41b2:	83 e4       	ldi	r24, 0x43	; 67
    41b4:	93 e0       	ldi	r25, 0x03	; 3
    41b6:	c5 d2       	rcall	.+1418   	; 0x4742 <_ZN6OutputD1Ev>

#include "Display.h"
Display oled;

#include "Interface.h"
Interface Tastatur;
    41b8:	85 e4       	ldi	r24, 0x45	; 69
    41ba:	93 e0       	ldi	r25, 0x03	; 3
    41bc:	4c d0       	rcall	.+152    	; 0x4256 <_ZN9InterfaceD1Ev>
RTC rtc;
RTC zaehler;
RTC stoppuhr;

#include "Display.h"
Display oled;
    41be:	86 e4       	ldi	r24, 0x46	; 70
    41c0:	93 e0       	ldi	r25, 0x03	; 3
    41c2:	0e 94 01 04 	call	0x802	; 0x802 <_ZN7DisplayD1Ev>
Kompass kompass;

#include "RTC.h"
RTC rtc;
RTC zaehler;
RTC stoppuhr;
    41c6:	87 e4       	ldi	r24, 0x47	; 71
    41c8:	97 e0       	ldi	r25, 0x07	; 7
    41ca:	47 d5       	rcall	.+2702   	; 0x4c5a <_ZN3RTCD1Ev>
#include "Kompass.h"
Kompass kompass;

#include "RTC.h"
RTC rtc;
RTC zaehler;
    41cc:	82 e6       	ldi	r24, 0x62	; 98
    41ce:	97 e0       	ldi	r25, 0x07	; 7
    41d0:	44 d5       	rcall	.+2696   	; 0x4c5a <_ZN3RTCD1Ev>

#include "Kompass.h"
Kompass kompass;

#include "RTC.h"
RTC rtc;
    41d2:	8d e7       	ldi	r24, 0x7D	; 125
    41d4:	97 e0       	ldi	r25, 0x07	; 7
    41d6:	41 d5       	rcall	.+2690   	; 0x4c5a <_ZN3RTCD1Ev>
#include <stdlib.h>
#include <stdio.h>
#include <avr/interrupt.h>

#include "Kompass.h"
Kompass kompass;
    41d8:	88 e9       	ldi	r24, 0x98	; 152
    41da:	97 e0       	ldi	r25, 0x07	; 7
    41dc:	fc c0       	rjmp	.+504    	; 0x43d6 <_ZN7KompassD1Ev>
    41de:	08 95       	ret

000041e0 <_ZN3I2CC1Ev>:
void I2C::twi_ack(){
	TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);
}
void I2C::twi_nack(){
	TWCR = (1<<TWINT) | (1<<TWEN);
	TWCR &= ~(1<<TWEA);
    41e0:	82 e0       	ldi	r24, 0x02	; 2
    41e2:	80 93 b8 00 	sts	0x00B8, r24
    41e6:	08 95       	ret

000041e8 <_ZN3I2CD1Ev>:
    41e8:	08 95       	ret

000041ea <_ZN3I2C9twi_startEv>:
    41ea:	84 ea       	ldi	r24, 0xA4	; 164
    41ec:	80 93 bc 00 	sts	0x00BC, r24
    41f0:	08 95       	ret

000041f2 <_ZN3I2C8twi_stopEv>:
    41f2:	84 e9       	ldi	r24, 0x94	; 148
    41f4:	80 93 bc 00 	sts	0x00BC, r24
    41f8:	08 95       	ret

000041fa <_ZN3I2C9twi_writeEh>:
}

void I2C::twi_write(uint8_t data){
	while(!(TWCR & (1<<TWINT)));
    41fa:	ec eb       	ldi	r30, 0xBC	; 188
    41fc:	f0 e0       	ldi	r31, 0x00	; 0
    41fe:	80 81       	ld	r24, Z
    4200:	88 23       	and	r24, r24
    4202:	ec f7       	brge	.-6      	; 0x41fe <_ZN3I2C9twi_writeEh+0x4>
	TWDR = data;
    4204:	60 93 bb 00 	sts	0x00BB, r22
	TWCR = (1<<TWINT) | (1<<TWEN);
    4208:	84 e8       	ldi	r24, 0x84	; 132
    420a:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));
    420e:	ec eb       	ldi	r30, 0xBC	; 188
    4210:	f0 e0       	ldi	r31, 0x00	; 0
    4212:	80 81       	ld	r24, Z
    4214:	88 23       	and	r24, r24
    4216:	ec f7       	brge	.-6      	; 0x4212 <_ZN3I2C9twi_writeEh+0x18>
}
    4218:	08 95       	ret

0000421a <_ZN3I2C8twi_readEh>:

uint8_t I2C::twi_read(uint8_t ack){
	if (ack)
    421a:	66 23       	and	r22, r22
    421c:	21 f0       	breq	.+8      	; 0x4226 <_ZN3I2C8twi_readEh+0xc>
	{
		TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    421e:	84 ec       	ldi	r24, 0xC4	; 196
    4220:	80 93 bc 00 	sts	0x00BC, r24
    4224:	03 c0       	rjmp	.+6      	; 0x422c <_ZN3I2C8twi_readEh+0x12>
	}
	else{
		TWCR = (1<<TWINT) | (1<<TWEN);
    4226:	84 e8       	ldi	r24, 0x84	; 132
    4228:	80 93 bc 00 	sts	0x00BC, r24
	}
	
	while(!(TWCR & (1<<TWINT)));
    422c:	ec eb       	ldi	r30, 0xBC	; 188
    422e:	f0 e0       	ldi	r31, 0x00	; 0
    4230:	80 81       	ld	r24, Z
    4232:	88 23       	and	r24, r24
    4234:	ec f7       	brge	.-6      	; 0x4230 <_ZN3I2C8twi_readEh+0x16>
	return TWDR;
    4236:	80 91 bb 00 	lds	r24, 0x00BB
    423a:	08 95       	ret

0000423c <_ZN9InterfaceC1Ev>:
		default:
		abfrage = 0;
		break;
	}
	return abfrage;
}
    423c:	8a b1       	in	r24, 0x0a	; 10
    423e:	80 66       	ori	r24, 0x60	; 96
    4240:	8a b9       	out	0x0a, r24	; 10
    4242:	88 b1       	in	r24, 0x08	; 8
    4244:	83 7f       	andi	r24, 0xF3	; 243
    4246:	88 b9       	out	0x08, r24	; 8
    4248:	87 b1       	in	r24, 0x07	; 7
    424a:	8c 60       	ori	r24, 0x0C	; 12
    424c:	87 b9       	out	0x07, r24	; 7
    424e:	8a b1       	in	r24, 0x0a	; 10
    4250:	83 7e       	andi	r24, 0xE3	; 227
    4252:	8a b9       	out	0x0a, r24	; 10
    4254:	08 95       	ret

00004256 <_ZN9InterfaceD1Ev>:
    4256:	08 95       	ret

00004258 <_ZN9Interface8debounceEPVhh>:
    4258:	fb 01       	movw	r30, r22
    425a:	80 81       	ld	r24, Z
    425c:	90 e0       	ldi	r25, 0x00	; 0
    425e:	04 2e       	mov	r0, r20
    4260:	02 c0       	rjmp	.+4      	; 0x4266 <_ZN9Interface8debounceEPVhh+0xe>
    4262:	95 95       	asr	r25
    4264:	87 95       	ror	r24
    4266:	0a 94       	dec	r0
    4268:	e2 f7       	brpl	.-8      	; 0x4262 <_ZN9Interface8debounceEPVhh+0xa>
    426a:	80 ff       	sbrs	r24, 0
    426c:	17 c0       	rjmp	.+46     	; 0x429c <_ZN9Interface8debounceEPVhh+0x44>
    426e:	8f ec       	ldi	r24, 0xCF	; 207
    4270:	97 e0       	ldi	r25, 0x07	; 7
    4272:	01 97       	sbiw	r24, 0x01	; 1
    4274:	f1 f7       	brne	.-4      	; 0x4272 <_ZN9Interface8debounceEPVhh+0x1a>
    4276:	00 c0       	rjmp	.+0      	; 0x4278 <_ZN9Interface8debounceEPVhh+0x20>
    4278:	00 00       	nop
    427a:	fb 01       	movw	r30, r22
    427c:	80 81       	ld	r24, Z
    427e:	90 e0       	ldi	r25, 0x00	; 0
    4280:	9c 01       	movw	r18, r24
    4282:	02 c0       	rjmp	.+4      	; 0x4288 <_ZN9Interface8debounceEPVhh+0x30>
    4284:	35 95       	asr	r19
    4286:	27 95       	ror	r18
    4288:	4a 95       	dec	r20
    428a:	e2 f7       	brpl	.-8      	; 0x4284 <_ZN9Interface8debounceEPVhh+0x2c>
    428c:	20 fd       	sbrc	r18, 0
    428e:	08 c0       	rjmp	.+16     	; 0x42a0 <_ZN9Interface8debounceEPVhh+0x48>
    4290:	3a e1       	ldi	r19, 0x1A	; 26
    4292:	3a 95       	dec	r19
    4294:	f1 f7       	brne	.-4      	; 0x4292 <_ZN9Interface8debounceEPVhh+0x3a>
    4296:	00 c0       	rjmp	.+0      	; 0x4298 <_ZN9Interface8debounceEPVhh+0x40>
    4298:	81 e0       	ldi	r24, 0x01	; 1
    429a:	08 95       	ret
    429c:	80 e0       	ldi	r24, 0x00	; 0
    429e:	08 95       	ret
    42a0:	80 e0       	ldi	r24, 0x00	; 0
    42a2:	08 95       	ret

000042a4 <_ZN9Interface6TasterEv>:

uint8_t Interface::Taster(){
    42a4:	1f 93       	push	r17
    42a6:	cf 93       	push	r28
    42a8:	df 93       	push	r29
    42aa:	ec 01       	movw	r28, r24
	uint8_t taste = 'A';
	
	//erste Zeile
	PORTC |= (1<<PORTC3);
    42ac:	43 9a       	sbi	0x08, 3	; 8
    42ae:	82 e0       	ldi	r24, 0x02	; 2
    42b0:	8a 95       	dec	r24
    42b2:	f1 f7       	brne	.-4      	; 0x42b0 <_ZN9Interface6TasterEv+0xc>
    42b4:	00 c0       	rjmp	.+0      	; 0x42b6 <_ZN9Interface6TasterEv+0x12>
	_delay_us(1);
	if(debounce(&PIND,PIND4)){
    42b6:	44 e0       	ldi	r20, 0x04	; 4
    42b8:	69 e2       	ldi	r22, 0x29	; 41
    42ba:	70 e0       	ldi	r23, 0x00	; 0
    42bc:	ce 01       	movw	r24, r28
    42be:	cc df       	rcall	.-104    	; 0x4258 <_ZN9Interface8debounceEPVhh>
    42c0:	81 11       	cpse	r24, r1
    42c2:	10 c0       	rjmp	.+32     	; 0x42e4 <_ZN9Interface6TasterEv+0x40>
		taste = '3';
	}
	else if (debounce(&PIND,PIND3))
    42c4:	43 e0       	ldi	r20, 0x03	; 3
    42c6:	69 e2       	ldi	r22, 0x29	; 41
    42c8:	70 e0       	ldi	r23, 0x00	; 0
    42ca:	ce 01       	movw	r24, r28
    42cc:	c5 df       	rcall	.-118    	; 0x4258 <_ZN9Interface8debounceEPVhh>
    42ce:	81 11       	cpse	r24, r1
    42d0:	0b c0       	rjmp	.+22     	; 0x42e8 <_ZN9Interface6TasterEv+0x44>
	{
		taste = '2';
	}
	else if (debounce(&PIND,PIND2))
    42d2:	42 e0       	ldi	r20, 0x02	; 2
    42d4:	69 e2       	ldi	r22, 0x29	; 41
    42d6:	70 e0       	ldi	r23, 0x00	; 0
    42d8:	ce 01       	movw	r24, r28
    42da:	be df       	rcall	.-132    	; 0x4258 <_ZN9Interface8debounceEPVhh>
    42dc:	81 11       	cpse	r24, r1
    42de:	06 c0       	rjmp	.+12     	; 0x42ec <_ZN9Interface6TasterEv+0x48>
	}
	return abfrage;
}

uint8_t Interface::Taster(){
	uint8_t taste = 'A';
    42e0:	11 e4       	ldi	r17, 0x41	; 65
    42e2:	05 c0       	rjmp	.+10     	; 0x42ee <_ZN9Interface6TasterEv+0x4a>
	
	//erste Zeile
	PORTC |= (1<<PORTC3);
	_delay_us(1);
	if(debounce(&PIND,PIND4)){
		taste = '3';
    42e4:	13 e3       	ldi	r17, 0x33	; 51
    42e6:	03 c0       	rjmp	.+6      	; 0x42ee <_ZN9Interface6TasterEv+0x4a>
	}
	else if (debounce(&PIND,PIND3))
	{
		taste = '2';
    42e8:	12 e3       	ldi	r17, 0x32	; 50
    42ea:	01 c0       	rjmp	.+2      	; 0x42ee <_ZN9Interface6TasterEv+0x4a>
	}
	else if (debounce(&PIND,PIND2))
	{
		taste = '1';
    42ec:	11 e3       	ldi	r17, 0x31	; 49
	}
	PORTC &= ~(1<<PORTC3);
    42ee:	43 98       	cbi	0x08, 3	; 8
	
	//zweite Zeile
	PORTC |= (1<<PORTC2);
    42f0:	42 9a       	sbi	0x08, 2	; 8
    42f2:	82 e0       	ldi	r24, 0x02	; 2
    42f4:	8a 95       	dec	r24
    42f6:	f1 f7       	brne	.-4      	; 0x42f4 <_ZN9Interface6TasterEv+0x50>
    42f8:	00 c0       	rjmp	.+0      	; 0x42fa <_ZN9Interface6TasterEv+0x56>
	_delay_us(1);
	if(debounce(&PIND,PIND4)){
    42fa:	44 e0       	ldi	r20, 0x04	; 4
    42fc:	69 e2       	ldi	r22, 0x29	; 41
    42fe:	70 e0       	ldi	r23, 0x00	; 0
    4300:	ce 01       	movw	r24, r28
    4302:	aa df       	rcall	.-172    	; 0x4258 <_ZN9Interface8debounceEPVhh>
    4304:	81 11       	cpse	r24, r1
    4306:	0f c0       	rjmp	.+30     	; 0x4326 <_ZN9Interface6TasterEv+0x82>
		taste = '6';
	}
	else if (debounce(&PIND,PIND3))
    4308:	43 e0       	ldi	r20, 0x03	; 3
    430a:	69 e2       	ldi	r22, 0x29	; 41
    430c:	70 e0       	ldi	r23, 0x00	; 0
    430e:	ce 01       	movw	r24, r28
    4310:	a3 df       	rcall	.-186    	; 0x4258 <_ZN9Interface8debounceEPVhh>
    4312:	81 11       	cpse	r24, r1
    4314:	0a c0       	rjmp	.+20     	; 0x432a <_ZN9Interface6TasterEv+0x86>
	{
		taste = '5';
	}
	else if (debounce(&PIND,PIND2))
    4316:	42 e0       	ldi	r20, 0x02	; 2
    4318:	69 e2       	ldi	r22, 0x29	; 41
    431a:	70 e0       	ldi	r23, 0x00	; 0
    431c:	ce 01       	movw	r24, r28
    431e:	9c df       	rcall	.-200    	; 0x4258 <_ZN9Interface8debounceEPVhh>
    4320:	81 11       	cpse	r24, r1
    4322:	05 c0       	rjmp	.+10     	; 0x432e <_ZN9Interface6TasterEv+0x8a>
    4324:	05 c0       	rjmp	.+10     	; 0x4330 <_ZN9Interface6TasterEv+0x8c>
	
	//zweite Zeile
	PORTC |= (1<<PORTC2);
	_delay_us(1);
	if(debounce(&PIND,PIND4)){
		taste = '6';
    4326:	16 e3       	ldi	r17, 0x36	; 54
    4328:	03 c0       	rjmp	.+6      	; 0x4330 <_ZN9Interface6TasterEv+0x8c>
	}
	else if (debounce(&PIND,PIND3))
	{
		taste = '5';
    432a:	15 e3       	ldi	r17, 0x35	; 53
    432c:	01 c0       	rjmp	.+2      	; 0x4330 <_ZN9Interface6TasterEv+0x8c>
	}
	else if (debounce(&PIND,PIND2))
	{
		taste = '4';
    432e:	14 e3       	ldi	r17, 0x34	; 52
	}
	PORTC &= ~(1<<PORTC2);
    4330:	42 98       	cbi	0x08, 2	; 8
	
	//dritte Zeile
	PORTD |= (1<<PORTD6);
    4332:	5e 9a       	sbi	0x0b, 6	; 11
    4334:	82 e0       	ldi	r24, 0x02	; 2
    4336:	8a 95       	dec	r24
    4338:	f1 f7       	brne	.-4      	; 0x4336 <_ZN9Interface6TasterEv+0x92>
    433a:	00 c0       	rjmp	.+0      	; 0x433c <_ZN9Interface6TasterEv+0x98>
	_delay_us(1);
	if(debounce(&PIND,PIND4)){
    433c:	44 e0       	ldi	r20, 0x04	; 4
    433e:	69 e2       	ldi	r22, 0x29	; 41
    4340:	70 e0       	ldi	r23, 0x00	; 0
    4342:	ce 01       	movw	r24, r28
    4344:	89 df       	rcall	.-238    	; 0x4258 <_ZN9Interface8debounceEPVhh>
    4346:	81 11       	cpse	r24, r1
    4348:	0f c0       	rjmp	.+30     	; 0x4368 <_ZN9Interface6TasterEv+0xc4>
		taste = '9';
	}
	else if (debounce(&PIND,PIND3))
    434a:	43 e0       	ldi	r20, 0x03	; 3
    434c:	69 e2       	ldi	r22, 0x29	; 41
    434e:	70 e0       	ldi	r23, 0x00	; 0
    4350:	ce 01       	movw	r24, r28
    4352:	82 df       	rcall	.-252    	; 0x4258 <_ZN9Interface8debounceEPVhh>
    4354:	81 11       	cpse	r24, r1
    4356:	0a c0       	rjmp	.+20     	; 0x436c <_ZN9Interface6TasterEv+0xc8>
	{
		taste = '8';
	}
	else if (debounce(&PIND,PIND2))
    4358:	42 e0       	ldi	r20, 0x02	; 2
    435a:	69 e2       	ldi	r22, 0x29	; 41
    435c:	70 e0       	ldi	r23, 0x00	; 0
    435e:	ce 01       	movw	r24, r28
    4360:	7b df       	rcall	.-266    	; 0x4258 <_ZN9Interface8debounceEPVhh>
    4362:	81 11       	cpse	r24, r1
    4364:	05 c0       	rjmp	.+10     	; 0x4370 <_ZN9Interface6TasterEv+0xcc>
    4366:	05 c0       	rjmp	.+10     	; 0x4372 <_ZN9Interface6TasterEv+0xce>
	
	//dritte Zeile
	PORTD |= (1<<PORTD6);
	_delay_us(1);
	if(debounce(&PIND,PIND4)){
		taste = '9';
    4368:	19 e3       	ldi	r17, 0x39	; 57
    436a:	03 c0       	rjmp	.+6      	; 0x4372 <_ZN9Interface6TasterEv+0xce>
	}
	else if (debounce(&PIND,PIND3))
	{
		taste = '8';
    436c:	18 e3       	ldi	r17, 0x38	; 56
    436e:	01 c0       	rjmp	.+2      	; 0x4372 <_ZN9Interface6TasterEv+0xce>
	}
	else if (debounce(&PIND,PIND2))
	{
		taste = '7';
    4370:	17 e3       	ldi	r17, 0x37	; 55
	}
	PORTD &= ~(1<<PORTD6);
    4372:	5e 98       	cbi	0x0b, 6	; 11
	
	//vierte Zeile
	PORTD |= (1<<PORTD5);
    4374:	5d 9a       	sbi	0x0b, 5	; 11
    4376:	82 e0       	ldi	r24, 0x02	; 2
    4378:	8a 95       	dec	r24
    437a:	f1 f7       	brne	.-4      	; 0x4378 <_ZN9Interface6TasterEv+0xd4>
    437c:	00 c0       	rjmp	.+0      	; 0x437e <_ZN9Interface6TasterEv+0xda>
	_delay_us(1);
	if(debounce(&PIND,PIND4)){
    437e:	44 e0       	ldi	r20, 0x04	; 4
    4380:	69 e2       	ldi	r22, 0x29	; 41
    4382:	70 e0       	ldi	r23, 0x00	; 0
    4384:	ce 01       	movw	r24, r28
    4386:	68 df       	rcall	.-304    	; 0x4258 <_ZN9Interface8debounceEPVhh>
    4388:	81 11       	cpse	r24, r1
    438a:	0f c0       	rjmp	.+30     	; 0x43aa <_ZN9Interface6TasterEv+0x106>
		taste = '#';
	}
	else if (debounce(&PIND,PIND3))
    438c:	43 e0       	ldi	r20, 0x03	; 3
    438e:	69 e2       	ldi	r22, 0x29	; 41
    4390:	70 e0       	ldi	r23, 0x00	; 0
    4392:	ce 01       	movw	r24, r28
    4394:	61 df       	rcall	.-318    	; 0x4258 <_ZN9Interface8debounceEPVhh>
    4396:	81 11       	cpse	r24, r1
    4398:	0a c0       	rjmp	.+20     	; 0x43ae <_ZN9Interface6TasterEv+0x10a>
	{
		taste = '0';
	}
	else if (debounce(&PIND,PIND2))
    439a:	42 e0       	ldi	r20, 0x02	; 2
    439c:	69 e2       	ldi	r22, 0x29	; 41
    439e:	70 e0       	ldi	r23, 0x00	; 0
    43a0:	ce 01       	movw	r24, r28
    43a2:	5a df       	rcall	.-332    	; 0x4258 <_ZN9Interface8debounceEPVhh>
    43a4:	81 11       	cpse	r24, r1
    43a6:	05 c0       	rjmp	.+10     	; 0x43b2 <_ZN9Interface6TasterEv+0x10e>
    43a8:	05 c0       	rjmp	.+10     	; 0x43b4 <_ZN9Interface6TasterEv+0x110>
	
	//vierte Zeile
	PORTD |= (1<<PORTD5);
	_delay_us(1);
	if(debounce(&PIND,PIND4)){
		taste = '#';
    43aa:	13 e2       	ldi	r17, 0x23	; 35
    43ac:	03 c0       	rjmp	.+6      	; 0x43b4 <_ZN9Interface6TasterEv+0x110>
	}
	else if (debounce(&PIND,PIND3))
	{
		taste = '0';
    43ae:	10 e3       	ldi	r17, 0x30	; 48
    43b0:	01 c0       	rjmp	.+2      	; 0x43b4 <_ZN9Interface6TasterEv+0x110>
	}
	else if (debounce(&PIND,PIND2))
	{
		taste = '*';
    43b2:	1a e2       	ldi	r17, 0x2A	; 42
	}
	PORTD &= ~(1<<PORTD5);
    43b4:	5d 98       	cbi	0x0b, 5	; 11
	
	return taste;
}
    43b6:	81 2f       	mov	r24, r17
    43b8:	df 91       	pop	r29
    43ba:	cf 91       	pop	r28
    43bc:	1f 91       	pop	r17
    43be:	08 95       	ret

000043c0 <_ZN9Interface17ZahlenausTastaturEv>:

uint8_t Interface::ZahlenausTastatur(){
    43c0:	cf 93       	push	r28
    43c2:	df 93       	push	r29
    43c4:	ec 01       	movw	r28, r24
	while(true){
		uint8_t taste = Taster();
    43c6:	ce 01       	movw	r24, r28
    43c8:	6d df       	rcall	.-294    	; 0x42a4 <_ZN9Interface6TasterEv>
		if(taste>='0' && taste<='9'){
    43ca:	80 53       	subi	r24, 0x30	; 48
    43cc:	8a 30       	cpi	r24, 0x0A	; 10
    43ce:	d8 f7       	brcc	.-10     	; 0x43c6 <_ZN9Interface17ZahlenausTastaturEv+0x6>
			return taste - '0';
		}
	}
}
    43d0:	df 91       	pop	r29
    43d2:	cf 91       	pop	r28
    43d4:	08 95       	ret

000043d6 <_ZN7KompassD1Ev>:
	for (uint8_t i=0;i<3;i++)
	{
		achsen[i]=0;
		offset[i]=0;
	}
}
    43d6:	06 96       	adiw	r24, 0x06	; 6
    43d8:	07 cf       	rjmp	.-498    	; 0x41e8 <_ZN3I2CD1Ev>
    43da:	08 95       	ret

000043dc <_ZN7Kompass16HMC5883L_commandEhh>:
    43dc:	0f 93       	push	r16
    43de:	1f 93       	push	r17
    43e0:	cf 93       	push	r28
    43e2:	df 93       	push	r29
    43e4:	06 2f       	mov	r16, r22
    43e6:	14 2f       	mov	r17, r20
    43e8:	ec 01       	movw	r28, r24
    43ea:	26 96       	adiw	r28, 0x06	; 6
    43ec:	ce 01       	movw	r24, r28
    43ee:	fd de       	rcall	.-518    	; 0x41ea <_ZN3I2C9twi_startEv>
    43f0:	6c e3       	ldi	r22, 0x3C	; 60
    43f2:	ce 01       	movw	r24, r28
    43f4:	02 df       	rcall	.-508    	; 0x41fa <_ZN3I2C9twi_writeEh>
    43f6:	60 2f       	mov	r22, r16
    43f8:	ce 01       	movw	r24, r28
    43fa:	ff de       	rcall	.-514    	; 0x41fa <_ZN3I2C9twi_writeEh>
    43fc:	61 2f       	mov	r22, r17
    43fe:	ce 01       	movw	r24, r28
    4400:	fc de       	rcall	.-520    	; 0x41fa <_ZN3I2C9twi_writeEh>
    4402:	ce 01       	movw	r24, r28
    4404:	f6 de       	rcall	.-532    	; 0x41f2 <_ZN3I2C8twi_stopEv>
    4406:	df 91       	pop	r29
    4408:	cf 91       	pop	r28
    440a:	1f 91       	pop	r17
    440c:	0f 91       	pop	r16
    440e:	08 95       	ret

00004410 <_ZN7KompassC1Ev>:
    4410:	cf 93       	push	r28
    4412:	df 93       	push	r29
    4414:	ec 01       	movw	r28, r24
    4416:	06 96       	adiw	r24, 0x06	; 6
    4418:	e3 de       	rcall	.-570    	; 0x41e0 <_ZN3I2CC1Ev>
    441a:	40 e7       	ldi	r20, 0x70	; 112
    441c:	60 e0       	ldi	r22, 0x00	; 0
    441e:	ce 01       	movw	r24, r28
    4420:	dd df       	rcall	.-70     	; 0x43dc <_ZN7Kompass16HMC5883L_commandEhh>
    4422:	40 e2       	ldi	r20, 0x20	; 32
    4424:	61 e0       	ldi	r22, 0x01	; 1
    4426:	ce 01       	movw	r24, r28
    4428:	d9 df       	rcall	.-78     	; 0x43dc <_ZN7Kompass16HMC5883L_commandEhh>
    442a:	41 e0       	ldi	r20, 0x01	; 1
    442c:	62 e0       	ldi	r22, 0x02	; 2
    442e:	ce 01       	movw	r24, r28
    4430:	d5 df       	rcall	.-86     	; 0x43dc <_ZN7Kompass16HMC5883L_commandEhh>
    4432:	19 82       	std	Y+1, r1	; 0x01
    4434:	18 82       	st	Y, r1
    4436:	18 86       	std	Y+8, r1	; 0x08
    4438:	1f 82       	std	Y+7, r1	; 0x07
    443a:	1b 82       	std	Y+3, r1	; 0x03
    443c:	1a 82       	std	Y+2, r1	; 0x02
    443e:	1a 86       	std	Y+10, r1	; 0x0a
    4440:	19 86       	std	Y+9, r1	; 0x09
    4442:	1d 82       	std	Y+5, r1	; 0x05
    4444:	1c 82       	std	Y+4, r1	; 0x04
    4446:	1c 86       	std	Y+12, r1	; 0x0c
    4448:	1b 86       	std	Y+11, r1	; 0x0b
    444a:	df 91       	pop	r29
    444c:	cf 91       	pop	r28
    444e:	08 95       	ret

00004450 <_ZN7Kompass20HMC5883L_readHeadingEv>:

uint8_t Kompass::HMC5883L_readHeading(){
    4450:	bf 92       	push	r11
    4452:	cf 92       	push	r12
    4454:	df 92       	push	r13
    4456:	ef 92       	push	r14
    4458:	ff 92       	push	r15
    445a:	0f 93       	push	r16
    445c:	1f 93       	push	r17
    445e:	cf 93       	push	r28
    4460:	df 93       	push	r29
    4462:	00 d0       	rcall	.+0      	; 0x4464 <_ZN7Kompass20HMC5883L_readHeadingEv+0x14>
    4464:	00 d0       	rcall	.+0      	; 0x4466 <_ZN7Kompass20HMC5883L_readHeadingEv+0x16>
    4466:	00 d0       	rcall	.+0      	; 0x4468 <_ZN7Kompass20HMC5883L_readHeadingEv+0x18>
    4468:	cd b7       	in	r28, 0x3d	; 61
    446a:	de b7       	in	r29, 0x3e	; 62
    446c:	6c 01       	movw	r12, r24
	cli();
    446e:	f8 94       	cli
	uint8_t heading[6];
	i2c.twi_start();
    4470:	7c 01       	movw	r14, r24
    4472:	26 e0       	ldi	r18, 0x06	; 6
    4474:	e2 0e       	add	r14, r18
    4476:	f1 1c       	adc	r15, r1
    4478:	c7 01       	movw	r24, r14
    447a:	b7 de       	rcall	.-658    	; 0x41ea <_ZN3I2C9twi_startEv>
	i2c.twi_write(HMCWRITEADRESSE);
    447c:	6c e3       	ldi	r22, 0x3C	; 60
    447e:	c7 01       	movw	r24, r14
    4480:	bc de       	rcall	.-648    	; 0x41fa <_ZN3I2C9twi_writeEh>
	i2c.twi_write(0x03);
    4482:	63 e0       	ldi	r22, 0x03	; 3
    4484:	c7 01       	movw	r24, r14
    4486:	b9 de       	rcall	.-654    	; 0x41fa <_ZN3I2C9twi_writeEh>
	i2c.twi_start();
    4488:	c7 01       	movw	r24, r14
    448a:	af de       	rcall	.-674    	; 0x41ea <_ZN3I2C9twi_startEv>
	i2c.twi_write(HMCREADADRESSE);
    448c:	6d e3       	ldi	r22, 0x3D	; 61
    448e:	c7 01       	movw	r24, r14
    4490:	b4 de       	rcall	.-664    	; 0x41fa <_ZN3I2C9twi_writeEh>
    4492:	8e 01       	movw	r16, r28
    4494:	0f 5f       	subi	r16, 0xFF	; 255
    4496:	1f 4f       	sbci	r17, 0xFF	; 255
	
	for(uint8_t i=0; i<6;i++){
    4498:	b1 2c       	mov	r11, r1
		if (i<5)
    449a:	84 e0       	ldi	r24, 0x04	; 4
    449c:	8b 15       	cp	r24, r11
    449e:	30 f0       	brcs	.+12     	; 0x44ac <_ZN7Kompass20HMC5883L_readHeadingEv+0x5c>
		{
			heading[i]=i2c.twi_read(1);
    44a0:	61 e0       	ldi	r22, 0x01	; 1
    44a2:	c7 01       	movw	r24, r14
    44a4:	ba de       	rcall	.-652    	; 0x421a <_ZN3I2C8twi_readEh>
    44a6:	f8 01       	movw	r30, r16
    44a8:	80 83       	st	Z, r24
    44aa:	05 c0       	rjmp	.+10     	; 0x44b6 <_ZN7Kompass20HMC5883L_readHeadingEv+0x66>
		}
		else
		{
			heading[i]=i2c.twi_read(0);
    44ac:	60 e0       	ldi	r22, 0x00	; 0
    44ae:	c7 01       	movw	r24, r14
    44b0:	b4 de       	rcall	.-664    	; 0x421a <_ZN3I2C8twi_readEh>
    44b2:	f8 01       	movw	r30, r16
    44b4:	80 83       	st	Z, r24
	i2c.twi_write(HMCWRITEADRESSE);
	i2c.twi_write(0x03);
	i2c.twi_start();
	i2c.twi_write(HMCREADADRESSE);
	
	for(uint8_t i=0; i<6;i++){
    44b6:	b3 94       	inc	r11
    44b8:	0f 5f       	subi	r16, 0xFF	; 255
    44ba:	1f 4f       	sbci	r17, 0xFF	; 255
    44bc:	f6 e0       	ldi	r31, 0x06	; 6
    44be:	bf 12       	cpse	r11, r31
    44c0:	ec cf       	rjmp	.-40     	; 0x449a <_ZN7Kompass20HMC5883L_readHeadingEv+0x4a>
		{
			heading[i]=i2c.twi_read(0);
		}
		
	}
	i2c.twi_stop();
    44c2:	c7 01       	movw	r24, r14
    44c4:	96 de       	rcall	.-724    	; 0x41f2 <_ZN3I2C8twi_stopEv>
	achsen[0] =(int16_t) (heading[1] | (heading[0] << 8));
    44c6:	89 81       	ldd	r24, Y+1	; 0x01
    44c8:	90 e0       	ldi	r25, 0x00	; 0
    44ca:	98 2f       	mov	r25, r24
    44cc:	88 27       	eor	r24, r24
    44ce:	2a 81       	ldd	r18, Y+2	; 0x02
    44d0:	82 2b       	or	r24, r18
    44d2:	f6 01       	movw	r30, r12
    44d4:	91 83       	std	Z+1, r25	; 0x01
    44d6:	80 83       	st	Z, r24
	achsen[2] =(int16_t) (heading[3] | (heading[2] << 8));
    44d8:	8b 81       	ldd	r24, Y+3	; 0x03
    44da:	90 e0       	ldi	r25, 0x00	; 0
    44dc:	98 2f       	mov	r25, r24
    44de:	88 27       	eor	r24, r24
    44e0:	2c 81       	ldd	r18, Y+4	; 0x04
    44e2:	82 2b       	or	r24, r18
    44e4:	95 83       	std	Z+5, r25	; 0x05
    44e6:	84 83       	std	Z+4, r24	; 0x04
	achsen[1] =(int16_t) (heading[5] | (heading[4] << 8));
    44e8:	8d 81       	ldd	r24, Y+5	; 0x05
    44ea:	90 e0       	ldi	r25, 0x00	; 0
    44ec:	98 2f       	mov	r25, r24
    44ee:	88 27       	eor	r24, r24
    44f0:	2e 81       	ldd	r18, Y+6	; 0x06
    44f2:	82 2b       	or	r24, r18
    44f4:	93 83       	std	Z+3, r25	; 0x03
    44f6:	82 83       	std	Z+2, r24	; 0x02
	sei();
    44f8:	78 94       	sei
	if (achsen[0]==-4096 || achsen[1]==-4096 || achsen[2]==-4096)
    44fa:	f6 01       	movw	r30, r12
    44fc:	80 81       	ld	r24, Z
    44fe:	91 81       	ldd	r25, Z+1	; 0x01
    4500:	81 15       	cp	r24, r1
    4502:	90 4f       	sbci	r25, 0xF0	; 240
    4504:	09 f4       	brne	.+2      	; 0x4508 <_ZN7Kompass20HMC5883L_readHeadingEv+0xb8>
    4506:	47 c0       	rjmp	.+142    	; 0x4596 <_ZN7Kompass20HMC5883L_readHeadingEv+0x146>
    4508:	f6 01       	movw	r30, r12
    450a:	82 81       	ldd	r24, Z+2	; 0x02
    450c:	93 81       	ldd	r25, Z+3	; 0x03
    450e:	81 15       	cp	r24, r1
    4510:	90 4f       	sbci	r25, 0xF0	; 240
    4512:	09 f4       	brne	.+2      	; 0x4516 <_ZN7Kompass20HMC5883L_readHeadingEv+0xc6>
    4514:	42 c0       	rjmp	.+132    	; 0x459a <_ZN7Kompass20HMC5883L_readHeadingEv+0x14a>
    4516:	f6 01       	movw	r30, r12
    4518:	84 81       	ldd	r24, Z+4	; 0x04
    451a:	95 81       	ldd	r25, Z+5	; 0x05
    451c:	81 15       	cp	r24, r1
    451e:	90 4f       	sbci	r25, 0xF0	; 240
    4520:	f1 f1       	breq	.+124    	; 0x459e <_ZN7Kompass20HMC5883L_readHeadingEv+0x14e>
    4522:	f6 01       	movw	r30, r12
    4524:	83 e0       	ldi	r24, 0x03	; 3
    4526:	df 01       	movw	r26, r30
	}
	//Kallibrierung durchfuehren, jedes mal, wenn eine abfrage stattfindet
	//somit passive kalibrierung
	else{
		for(uint8_t i=0;i<3;i++){
			if(achsen[i]>max[i]){
    4528:	20 81       	ld	r18, Z
    452a:	31 81       	ldd	r19, Z+1	; 0x01
    452c:	45 85       	ldd	r20, Z+13	; 0x0d
    452e:	56 85       	ldd	r21, Z+14	; 0x0e
    4530:	42 17       	cp	r20, r18
    4532:	53 07       	cpc	r21, r19
    4534:	8c f4       	brge	.+34     	; 0x4558 <_ZN7Kompass20HMC5883L_readHeadingEv+0x108>
				max[i]=achsen[i];
    4536:	36 87       	std	Z+14, r19	; 0x0e
    4538:	25 87       	std	Z+13, r18	; 0x0d
				offset[i]=(max[i]+min[i])/2;
    453a:	43 89       	ldd	r20, Z+19	; 0x13
    453c:	54 89       	ldd	r21, Z+20	; 0x14
    453e:	24 0f       	add	r18, r20
    4540:	35 1f       	adc	r19, r21
    4542:	33 23       	and	r19, r19
    4544:	14 f4       	brge	.+4      	; 0x454a <_ZN7Kompass20HMC5883L_readHeadingEv+0xfa>
    4546:	2f 5f       	subi	r18, 0xFF	; 255
    4548:	3f 4f       	sbci	r19, 0xFF	; 255
    454a:	35 95       	asr	r19
    454c:	27 95       	ror	r18
    454e:	18 96       	adiw	r26, 0x08	; 8
    4550:	3c 93       	st	X, r19
    4552:	2e 93       	st	-X, r18
    4554:	17 97       	sbiw	r26, 0x07	; 7
    4556:	1a c0       	rjmp	.+52     	; 0x458c <_ZN7Kompass20HMC5883L_readHeadingEv+0x13c>
			}
			else if(achsen[i]<min[i]){
    4558:	63 89       	ldd	r22, Z+19	; 0x13
    455a:	74 89       	ldd	r23, Z+20	; 0x14
    455c:	26 17       	cp	r18, r22
    455e:	37 07       	cpc	r19, r23
    4560:	7c f4       	brge	.+30     	; 0x4580 <_ZN7Kompass20HMC5883L_readHeadingEv+0x130>
				min[i]=achsen[i];
    4562:	34 8b       	std	Z+20, r19	; 0x14
    4564:	23 8b       	std	Z+19, r18	; 0x13
				offset[i]=(max[i]+min[i])/2;
    4566:	24 0f       	add	r18, r20
    4568:	35 1f       	adc	r19, r21
    456a:	33 23       	and	r19, r19
    456c:	14 f4       	brge	.+4      	; 0x4572 <_ZN7Kompass20HMC5883L_readHeadingEv+0x122>
    456e:	2f 5f       	subi	r18, 0xFF	; 255
    4570:	3f 4f       	sbci	r19, 0xFF	; 255
    4572:	35 95       	asr	r19
    4574:	27 95       	ror	r18
    4576:	18 96       	adiw	r26, 0x08	; 8
    4578:	3c 93       	st	X, r19
    457a:	2e 93       	st	-X, r18
    457c:	17 97       	sbiw	r26, 0x07	; 7
    457e:	06 c0       	rjmp	.+12     	; 0x458c <_ZN7Kompass20HMC5883L_readHeadingEv+0x13c>
			}
			else {
				achsen[i]-=offset[i];
    4580:	47 81       	ldd	r20, Z+7	; 0x07
    4582:	50 85       	ldd	r21, Z+8	; 0x08
    4584:	24 1b       	sub	r18, r20
    4586:	35 0b       	sbc	r19, r21
    4588:	31 83       	std	Z+1, r19	; 0x01
    458a:	20 83       	st	Z, r18
    458c:	81 50       	subi	r24, 0x01	; 1
    458e:	32 96       	adiw	r30, 0x02	; 2
		return 1;
	}
	//Kallibrierung durchfuehren, jedes mal, wenn eine abfrage stattfindet
	//somit passive kalibrierung
	else{
		for(uint8_t i=0;i<3;i++){
    4590:	81 11       	cpse	r24, r1
    4592:	c9 cf       	rjmp	.-110    	; 0x4526 <_ZN7Kompass20HMC5883L_readHeadingEv+0xd6>
    4594:	05 c0       	rjmp	.+10     	; 0x45a0 <_ZN7Kompass20HMC5883L_readHeadingEv+0x150>
	achsen[2] =(int16_t) (heading[3] | (heading[2] << 8));
	achsen[1] =(int16_t) (heading[5] | (heading[4] << 8));
	sei();
	if (achsen[0]==-4096 || achsen[1]==-4096 || achsen[2]==-4096)
	{
		return 1;
    4596:	81 e0       	ldi	r24, 0x01	; 1
    4598:	03 c0       	rjmp	.+6      	; 0x45a0 <_ZN7Kompass20HMC5883L_readHeadingEv+0x150>
    459a:	81 e0       	ldi	r24, 0x01	; 1
    459c:	01 c0       	rjmp	.+2      	; 0x45a0 <_ZN7Kompass20HMC5883L_readHeadingEv+0x150>
    459e:	81 e0       	ldi	r24, 0x01	; 1
			}
		}
	}
	
	return 0;
}
    45a0:	26 96       	adiw	r28, 0x06	; 6
    45a2:	0f b6       	in	r0, 0x3f	; 63
    45a4:	f8 94       	cli
    45a6:	de bf       	out	0x3e, r29	; 62
    45a8:	0f be       	out	0x3f, r0	; 63
    45aa:	cd bf       	out	0x3d, r28	; 61
    45ac:	df 91       	pop	r29
    45ae:	cf 91       	pop	r28
    45b0:	1f 91       	pop	r17
    45b2:	0f 91       	pop	r16
    45b4:	ff 90       	pop	r15
    45b6:	ef 90       	pop	r14
    45b8:	df 90       	pop	r13
    45ba:	cf 90       	pop	r12
    45bc:	bf 90       	pop	r11
    45be:	08 95       	ret

000045c0 <_ZN7Kompass5angleEv>:

double Kompass::angle(){
    45c0:	cf 92       	push	r12
    45c2:	df 92       	push	r13
    45c4:	ef 92       	push	r14
    45c6:	ff 92       	push	r15
    45c8:	cf 93       	push	r28
    45ca:	df 93       	push	r29
    45cc:	ec 01       	movw	r28, r24
	double angle=0;
	if (HMC5883L_readHeading())
    45ce:	40 df       	rcall	.-384    	; 0x4450 <_ZN7Kompass20HMC5883L_readHeadingEv>
    45d0:	81 11       	cpse	r24, r1
    45d2:	4c c0       	rjmp	.+152    	; 0x466c <_ZN7Kompass5angleEv+0xac>
	{
		angle=-1.0;
	}
	else{
		angle=atan2f(achsen[0],achsen[2])*180.0/M_PI+180.0;
    45d4:	6c 81       	ldd	r22, Y+4	; 0x04
    45d6:	7d 81       	ldd	r23, Y+5	; 0x05
    45d8:	88 27       	eor	r24, r24
    45da:	77 fd       	sbrc	r23, 7
    45dc:	80 95       	com	r24
    45de:	98 2f       	mov	r25, r24
    45e0:	07 d6       	rcall	.+3086   	; 0x51f0 <__floatsisf>
    45e2:	6b 01       	movw	r12, r22
    45e4:	7c 01       	movw	r14, r24
    45e6:	68 81       	ld	r22, Y
    45e8:	79 81       	ldd	r23, Y+1	; 0x01
    45ea:	88 27       	eor	r24, r24
    45ec:	77 fd       	sbrc	r23, 7
    45ee:	80 95       	com	r24
    45f0:	98 2f       	mov	r25, r24
    45f2:	fe d5       	rcall	.+3068   	; 0x51f0 <__floatsisf>
    45f4:	a7 01       	movw	r20, r14
    45f6:	96 01       	movw	r18, r12
    45f8:	06 d5       	rcall	.+2572   	; 0x5006 <atan2>
    45fa:	20 e0       	ldi	r18, 0x00	; 0
    45fc:	30 e0       	ldi	r19, 0x00	; 0
    45fe:	44 e3       	ldi	r20, 0x34	; 52
    4600:	53 e4       	ldi	r21, 0x43	; 67
    4602:	54 d7       	rcall	.+3752   	; 0x54ac <__mulsf3>
    4604:	2b ed       	ldi	r18, 0xDB	; 219
    4606:	3f e0       	ldi	r19, 0x0F	; 15
    4608:	49 e4       	ldi	r20, 0x49	; 73
    460a:	50 e4       	ldi	r21, 0x40	; 64
    460c:	56 d5       	rcall	.+2732   	; 0x50ba <__divsf3>
    460e:	20 e0       	ldi	r18, 0x00	; 0
    4610:	30 e0       	ldi	r19, 0x00	; 0
    4612:	44 e3       	ldi	r20, 0x34	; 52
    4614:	53 e4       	ldi	r21, 0x43	; 67
    4616:	84 d4       	rcall	.+2312   	; 0x4f20 <__addsf3>
		//deklination
		angle+=2.35;
    4618:	26 e6       	ldi	r18, 0x66	; 102
    461a:	36 e6       	ldi	r19, 0x66	; 102
    461c:	46 e1       	ldi	r20, 0x16	; 22
    461e:	50 e4       	ldi	r21, 0x40	; 64
    4620:	7f d4       	rcall	.+2302   	; 0x4f20 <__addsf3>
    4622:	6b 01       	movw	r12, r22
    4624:	7c 01       	movw	r14, r24
		//Normierung auf %360
		if (angle>=360)
    4626:	20 e0       	ldi	r18, 0x00	; 0
    4628:	30 e0       	ldi	r19, 0x00	; 0
    462a:	44 eb       	ldi	r20, 0xB4	; 180
    462c:	53 e4       	ldi	r21, 0x43	; 67
    462e:	ee d6       	rcall	.+3548   	; 0x540c <__gesf2>
    4630:	88 23       	and	r24, r24
    4632:	54 f0       	brlt	.+20     	; 0x4648 <_ZN7Kompass5angleEv+0x88>
		{
			angle-=360;
    4634:	20 e0       	ldi	r18, 0x00	; 0
    4636:	30 e0       	ldi	r19, 0x00	; 0
    4638:	44 eb       	ldi	r20, 0xB4	; 180
    463a:	53 e4       	ldi	r21, 0x43	; 67
    463c:	c7 01       	movw	r24, r14
    463e:	b6 01       	movw	r22, r12
    4640:	6e d4       	rcall	.+2268   	; 0x4f1e <__subsf3>
    4642:	6b 01       	movw	r12, r22
    4644:	7c 01       	movw	r14, r24
    4646:	1a c0       	rjmp	.+52     	; 0x467c <_ZN7Kompass5angleEv+0xbc>
		}
		else if (angle < 0)
    4648:	20 e0       	ldi	r18, 0x00	; 0
    464a:	30 e0       	ldi	r19, 0x00	; 0
    464c:	a9 01       	movw	r20, r18
    464e:	c7 01       	movw	r24, r14
    4650:	b6 01       	movw	r22, r12
    4652:	2c d5       	rcall	.+2648   	; 0x50ac <__cmpsf2>
    4654:	88 23       	and	r24, r24
    4656:	94 f4       	brge	.+36     	; 0x467c <_ZN7Kompass5angleEv+0xbc>
		{
			angle+=360;
    4658:	20 e0       	ldi	r18, 0x00	; 0
    465a:	30 e0       	ldi	r19, 0x00	; 0
    465c:	44 eb       	ldi	r20, 0xB4	; 180
    465e:	53 e4       	ldi	r21, 0x43	; 67
    4660:	c7 01       	movw	r24, r14
    4662:	b6 01       	movw	r22, r12
    4664:	5d d4       	rcall	.+2234   	; 0x4f20 <__addsf3>
    4666:	6b 01       	movw	r12, r22
    4668:	7c 01       	movw	r14, r24
    466a:	08 c0       	rjmp	.+16     	; 0x467c <_ZN7Kompass5angleEv+0xbc>

double Kompass::angle(){
	double angle=0;
	if (HMC5883L_readHeading())
	{
		angle=-1.0;
    466c:	0f 2e       	mov	r0, r31
    466e:	c1 2c       	mov	r12, r1
    4670:	d1 2c       	mov	r13, r1
    4672:	f0 e8       	ldi	r31, 0x80	; 128
    4674:	ef 2e       	mov	r14, r31
    4676:	ff eb       	ldi	r31, 0xBF	; 191
    4678:	ff 2e       	mov	r15, r31
    467a:	f0 2d       	mov	r31, r0
		{
			angle+=360;
		}
	}
	
	HMC5883L_command(0x02,HMCSIGLEMODE);
    467c:	41 e0       	ldi	r20, 0x01	; 1
    467e:	62 e0       	ldi	r22, 0x02	; 2
    4680:	ce 01       	movw	r24, r28
    4682:	ac de       	rcall	.-680    	; 0x43dc <_ZN7Kompass16HMC5883L_commandEhh>
	return angle;
}
    4684:	c7 01       	movw	r24, r14
    4686:	b6 01       	movw	r22, r12
    4688:	df 91       	pop	r29
    468a:	cf 91       	pop	r28
    468c:	ff 90       	pop	r15
    468e:	ef 90       	pop	r14
    4690:	df 90       	pop	r13
    4692:	cf 90       	pop	r12
    4694:	08 95       	ret

00004696 <_ZN7Kompass25kallibrierung_ruecksetzenEv>:

void Kompass::kallibrierung_ruecksetzen(){
    4696:	fc 01       	movw	r30, r24
	for (uint8_t i=0;i<3;i++)
	{
		max[i]=0;
    4698:	16 86       	std	Z+14, r1	; 0x0e
    469a:	15 86       	std	Z+13, r1	; 0x0d
		min[i]=0;
    469c:	14 8a       	std	Z+20, r1	; 0x14
    469e:	13 8a       	std	Z+19, r1	; 0x13
		offset[i]=0;
    46a0:	10 86       	std	Z+8, r1	; 0x08
    46a2:	17 82       	std	Z+7, r1	; 0x07
}

void Kompass::kallibrierung_ruecksetzen(){
	for (uint8_t i=0;i<3;i++)
	{
		max[i]=0;
    46a4:	10 8a       	std	Z+16, r1	; 0x10
    46a6:	17 86       	std	Z+15, r1	; 0x0f
		min[i]=0;
    46a8:	16 8a       	std	Z+22, r1	; 0x16
    46aa:	15 8a       	std	Z+21, r1	; 0x15
		offset[i]=0;
    46ac:	12 86       	std	Z+10, r1	; 0x0a
    46ae:	11 86       	std	Z+9, r1	; 0x09
}

void Kompass::kallibrierung_ruecksetzen(){
	for (uint8_t i=0;i<3;i++)
	{
		max[i]=0;
    46b0:	12 8a       	std	Z+18, r1	; 0x12
    46b2:	11 8a       	std	Z+17, r1	; 0x11
		min[i]=0;
    46b4:	10 8e       	std	Z+24, r1	; 0x18
    46b6:	17 8a       	std	Z+23, r1	; 0x17
		offset[i]=0;
    46b8:	14 86       	std	Z+12, r1	; 0x0c
    46ba:	13 86       	std	Z+11, r1	; 0x0b
    46bc:	08 95       	ret

000046be <_ZN6OutputC1Ehh>:
#include "Output.h"

// default constructor
Output::Output(uint8_t Portpraefix, uint8_t Pinnumber)
{
	Pin=Pinnumber;
    46be:	fc 01       	movw	r30, r24
    46c0:	41 83       	std	Z+1, r20	; 0x01
	Port=Portpraefix;
    46c2:	60 83       	st	Z, r22
	switch (Portpraefix)
    46c4:	62 34       	cpi	r22, 0x42	; 66
    46c6:	b1 f0       	breq	.+44     	; 0x46f4 <_ZN6OutputC1Ehh+0x36>
    46c8:	18 f4       	brcc	.+6      	; 0x46d0 <_ZN6OutputC1Ehh+0x12>
    46ca:	61 34       	cpi	r22, 0x41	; 65
    46cc:	31 f0       	breq	.+12     	; 0x46da <_ZN6OutputC1Ehh+0x1c>
    46ce:	08 95       	ret
    46d0:	63 34       	cpi	r22, 0x43	; 67
    46d2:	e9 f0       	breq	.+58     	; 0x470e <_ZN6OutputC1Ehh+0x50>
    46d4:	64 34       	cpi	r22, 0x44	; 68
    46d6:	41 f1       	breq	.+80     	; 0x4728 <_ZN6OutputC1Ehh+0x6a>
    46d8:	08 95       	ret
	{
		case 'A':
			DDRA |= (1<<Pin);
    46da:	21 b1       	in	r18, 0x01	; 1
    46dc:	81 e0       	ldi	r24, 0x01	; 1
    46de:	90 e0       	ldi	r25, 0x00	; 0
    46e0:	bc 01       	movw	r22, r24
    46e2:	02 c0       	rjmp	.+4      	; 0x46e8 <_ZN6OutputC1Ehh+0x2a>
    46e4:	66 0f       	add	r22, r22
    46e6:	77 1f       	adc	r23, r23
    46e8:	4a 95       	dec	r20
    46ea:	e2 f7       	brpl	.-8      	; 0x46e4 <_ZN6OutputC1Ehh+0x26>
    46ec:	ab 01       	movw	r20, r22
    46ee:	42 2b       	or	r20, r18
    46f0:	41 b9       	out	0x01, r20	; 1
			break;
    46f2:	08 95       	ret
		case 'B':
			DDRB |= (1<<Pin);
    46f4:	24 b1       	in	r18, 0x04	; 4
    46f6:	81 e0       	ldi	r24, 0x01	; 1
    46f8:	90 e0       	ldi	r25, 0x00	; 0
    46fa:	fc 01       	movw	r30, r24
    46fc:	02 c0       	rjmp	.+4      	; 0x4702 <_ZN6OutputC1Ehh+0x44>
    46fe:	ee 0f       	add	r30, r30
    4700:	ff 1f       	adc	r31, r31
    4702:	4a 95       	dec	r20
    4704:	e2 f7       	brpl	.-8      	; 0x46fe <_ZN6OutputC1Ehh+0x40>
    4706:	af 01       	movw	r20, r30
    4708:	42 2b       	or	r20, r18
    470a:	44 b9       	out	0x04, r20	; 4
			break;
    470c:	08 95       	ret
		case 'C':
			DDRC |= (1<<Pin);
    470e:	27 b1       	in	r18, 0x07	; 7
    4710:	81 e0       	ldi	r24, 0x01	; 1
    4712:	90 e0       	ldi	r25, 0x00	; 0
    4714:	bc 01       	movw	r22, r24
    4716:	02 c0       	rjmp	.+4      	; 0x471c <_ZN6OutputC1Ehh+0x5e>
    4718:	66 0f       	add	r22, r22
    471a:	77 1f       	adc	r23, r23
    471c:	4a 95       	dec	r20
    471e:	e2 f7       	brpl	.-8      	; 0x4718 <_ZN6OutputC1Ehh+0x5a>
    4720:	ab 01       	movw	r20, r22
    4722:	42 2b       	or	r20, r18
    4724:	47 b9       	out	0x07, r20	; 7
			break;
    4726:	08 95       	ret
		case 'D':
			DDRD |= (1<<Pin);
    4728:	2a b1       	in	r18, 0x0a	; 10
    472a:	81 e0       	ldi	r24, 0x01	; 1
    472c:	90 e0       	ldi	r25, 0x00	; 0
    472e:	fc 01       	movw	r30, r24
    4730:	02 c0       	rjmp	.+4      	; 0x4736 <_ZN6OutputC1Ehh+0x78>
    4732:	ee 0f       	add	r30, r30
    4734:	ff 1f       	adc	r31, r31
    4736:	4a 95       	dec	r20
    4738:	e2 f7       	brpl	.-8      	; 0x4732 <_ZN6OutputC1Ehh+0x74>
    473a:	af 01       	movw	r20, r30
    473c:	42 2b       	or	r20, r18
    473e:	4a b9       	out	0x0a, r20	; 10
    4740:	08 95       	ret

00004742 <_ZN6OutputD1Ev>:
			break;
	}
} //Output

// default destructor
Output::~Output()
    4742:	08 95       	ret

00004744 <_ZN6Output2onEv>:
{
} //~Output

void Output::on(){
	switch (Port)
    4744:	fc 01       	movw	r30, r24
    4746:	20 81       	ld	r18, Z
    4748:	22 34       	cpi	r18, 0x42	; 66
    474a:	c1 f0       	breq	.+48     	; 0x477c <_ZN6Output2onEv+0x38>
    474c:	18 f4       	brcc	.+6      	; 0x4754 <_ZN6Output2onEv+0x10>
    474e:	21 34       	cpi	r18, 0x41	; 65
    4750:	31 f0       	breq	.+12     	; 0x475e <_ZN6Output2onEv+0x1a>
    4752:	08 95       	ret
    4754:	23 34       	cpi	r18, 0x43	; 67
    4756:	09 f1       	breq	.+66     	; 0x479a <_ZN6Output2onEv+0x56>
    4758:	24 34       	cpi	r18, 0x44	; 68
    475a:	71 f1       	breq	.+92     	; 0x47b8 <_ZN6Output2onEv+0x74>
    475c:	08 95       	ret
	{
		case 'A':
			PORTA |= (1<<Pin);
    475e:	42 b1       	in	r20, 0x02	; 2
    4760:	21 e0       	ldi	r18, 0x01	; 1
    4762:	30 e0       	ldi	r19, 0x00	; 0
    4764:	b9 01       	movw	r22, r18
    4766:	fc 01       	movw	r30, r24
    4768:	01 80       	ldd	r0, Z+1	; 0x01
    476a:	02 c0       	rjmp	.+4      	; 0x4770 <_ZN6Output2onEv+0x2c>
    476c:	66 0f       	add	r22, r22
    476e:	77 1f       	adc	r23, r23
    4770:	0a 94       	dec	r0
    4772:	e2 f7       	brpl	.-8      	; 0x476c <_ZN6Output2onEv+0x28>
    4774:	cb 01       	movw	r24, r22
    4776:	84 2b       	or	r24, r20
    4778:	82 b9       	out	0x02, r24	; 2
			break;
    477a:	08 95       	ret
		case 'B':
			PORTB |= (1<<Pin);
    477c:	45 b1       	in	r20, 0x05	; 5
    477e:	21 e0       	ldi	r18, 0x01	; 1
    4780:	30 e0       	ldi	r19, 0x00	; 0
    4782:	b9 01       	movw	r22, r18
    4784:	fc 01       	movw	r30, r24
    4786:	01 80       	ldd	r0, Z+1	; 0x01
    4788:	02 c0       	rjmp	.+4      	; 0x478e <_ZN6Output2onEv+0x4a>
    478a:	66 0f       	add	r22, r22
    478c:	77 1f       	adc	r23, r23
    478e:	0a 94       	dec	r0
    4790:	e2 f7       	brpl	.-8      	; 0x478a <_ZN6Output2onEv+0x46>
    4792:	cb 01       	movw	r24, r22
    4794:	84 2b       	or	r24, r20
    4796:	85 b9       	out	0x05, r24	; 5
			break;
    4798:	08 95       	ret
		case 'C':
			PORTC |= (1<<Pin);
    479a:	48 b1       	in	r20, 0x08	; 8
    479c:	21 e0       	ldi	r18, 0x01	; 1
    479e:	30 e0       	ldi	r19, 0x00	; 0
    47a0:	b9 01       	movw	r22, r18
    47a2:	fc 01       	movw	r30, r24
    47a4:	01 80       	ldd	r0, Z+1	; 0x01
    47a6:	02 c0       	rjmp	.+4      	; 0x47ac <_ZN6Output2onEv+0x68>
    47a8:	66 0f       	add	r22, r22
    47aa:	77 1f       	adc	r23, r23
    47ac:	0a 94       	dec	r0
    47ae:	e2 f7       	brpl	.-8      	; 0x47a8 <_ZN6Output2onEv+0x64>
    47b0:	cb 01       	movw	r24, r22
    47b2:	84 2b       	or	r24, r20
    47b4:	88 b9       	out	0x08, r24	; 8
			break;
    47b6:	08 95       	ret
		case 'D':
			PORTD |= (1<<Pin);
    47b8:	4b b1       	in	r20, 0x0b	; 11
    47ba:	21 e0       	ldi	r18, 0x01	; 1
    47bc:	30 e0       	ldi	r19, 0x00	; 0
    47be:	b9 01       	movw	r22, r18
    47c0:	fc 01       	movw	r30, r24
    47c2:	01 80       	ldd	r0, Z+1	; 0x01
    47c4:	02 c0       	rjmp	.+4      	; 0x47ca <_ZN6Output2onEv+0x86>
    47c6:	66 0f       	add	r22, r22
    47c8:	77 1f       	adc	r23, r23
    47ca:	0a 94       	dec	r0
    47cc:	e2 f7       	brpl	.-8      	; 0x47c6 <_ZN6Output2onEv+0x82>
    47ce:	cb 01       	movw	r24, r22
    47d0:	84 2b       	or	r24, r20
    47d2:	8b b9       	out	0x0b, r24	; 11
    47d4:	08 95       	ret

000047d6 <_ZN6Output4isonEv>:
	}
}

uint8_t Output::ison(){
	uint8_t returnparam=0;
	switch (Port)
    47d6:	fc 01       	movw	r30, r24
    47d8:	20 81       	ld	r18, Z
    47da:	22 34       	cpi	r18, 0x42	; 66
    47dc:	b1 f0       	breq	.+44     	; 0x480a <_ZN6Output4isonEv+0x34>
    47de:	18 f4       	brcc	.+6      	; 0x47e6 <_ZN6Output4isonEv+0x10>
    47e0:	21 34       	cpi	r18, 0x41	; 65
    47e2:	31 f0       	breq	.+12     	; 0x47f0 <_ZN6Output4isonEv+0x1a>
    47e4:	39 c0       	rjmp	.+114    	; 0x4858 <_ZN6Output4isonEv+0x82>
    47e6:	23 34       	cpi	r18, 0x43	; 67
    47e8:	e9 f0       	breq	.+58     	; 0x4824 <_ZN6Output4isonEv+0x4e>
    47ea:	24 34       	cpi	r18, 0x44	; 68
    47ec:	41 f1       	breq	.+80     	; 0x483e <_ZN6Output4isonEv+0x68>
    47ee:	34 c0       	rjmp	.+104    	; 0x4858 <_ZN6Output4isonEv+0x82>
	{
		case 'A':
			if ((PORTA&(1<<Pin)))
    47f0:	22 b1       	in	r18, 0x02	; 2
    47f2:	30 e0       	ldi	r19, 0x00	; 0
    47f4:	a9 01       	movw	r20, r18
    47f6:	fc 01       	movw	r30, r24
    47f8:	01 80       	ldd	r0, Z+1	; 0x01
    47fa:	02 c0       	rjmp	.+4      	; 0x4800 <_ZN6Output4isonEv+0x2a>
    47fc:	55 95       	asr	r21
    47fe:	47 95       	ror	r20
    4800:	0a 94       	dec	r0
    4802:	e2 f7       	brpl	.-8      	; 0x47fc <_ZN6Output4isonEv+0x26>
    4804:	ca 01       	movw	r24, r20
    4806:	81 70       	andi	r24, 0x01	; 1
    4808:	08 95       	ret
			{
				returnparam = 1;
			}
			break;
		case 'B':
			if ((PORTB&(1<<Pin)))
    480a:	25 b1       	in	r18, 0x05	; 5
    480c:	30 e0       	ldi	r19, 0x00	; 0
    480e:	a9 01       	movw	r20, r18
    4810:	fc 01       	movw	r30, r24
    4812:	01 80       	ldd	r0, Z+1	; 0x01
    4814:	02 c0       	rjmp	.+4      	; 0x481a <_ZN6Output4isonEv+0x44>
    4816:	55 95       	asr	r21
    4818:	47 95       	ror	r20
    481a:	0a 94       	dec	r0
    481c:	e2 f7       	brpl	.-8      	; 0x4816 <_ZN6Output4isonEv+0x40>
    481e:	ca 01       	movw	r24, r20
    4820:	81 70       	andi	r24, 0x01	; 1
    4822:	08 95       	ret
			{
				returnparam = 1;
			}
			break;
		case 'C':
			if ((PORTC&(1<<Pin)))
    4824:	28 b1       	in	r18, 0x08	; 8
    4826:	30 e0       	ldi	r19, 0x00	; 0
    4828:	a9 01       	movw	r20, r18
    482a:	fc 01       	movw	r30, r24
    482c:	01 80       	ldd	r0, Z+1	; 0x01
    482e:	02 c0       	rjmp	.+4      	; 0x4834 <_ZN6Output4isonEv+0x5e>
    4830:	55 95       	asr	r21
    4832:	47 95       	ror	r20
    4834:	0a 94       	dec	r0
    4836:	e2 f7       	brpl	.-8      	; 0x4830 <_ZN6Output4isonEv+0x5a>
    4838:	ca 01       	movw	r24, r20
    483a:	81 70       	andi	r24, 0x01	; 1
    483c:	08 95       	ret
			{
				returnparam = 1;
			}
			break;
		case 'D':
			if ((PORTD&(1<<Pin)))
    483e:	2b b1       	in	r18, 0x0b	; 11
    4840:	30 e0       	ldi	r19, 0x00	; 0
    4842:	a9 01       	movw	r20, r18
    4844:	fc 01       	movw	r30, r24
    4846:	01 80       	ldd	r0, Z+1	; 0x01
    4848:	02 c0       	rjmp	.+4      	; 0x484e <_ZN6Output4isonEv+0x78>
    484a:	55 95       	asr	r21
    484c:	47 95       	ror	r20
    484e:	0a 94       	dec	r0
    4850:	e2 f7       	brpl	.-8      	; 0x484a <_ZN6Output4isonEv+0x74>
    4852:	ca 01       	movw	r24, r20
    4854:	81 70       	andi	r24, 0x01	; 1
    4856:	08 95       	ret
			{
				returnparam = 1;
			}
			break;
		default:
		returnparam = 2;
    4858:	82 e0       	ldi	r24, 0x02	; 2
			break;
	}
	return returnparam;
}
    485a:	08 95       	ret

0000485c <_ZN6Output3offEv>:

void Output::off(){
	switch (Port)
    485c:	fc 01       	movw	r30, r24
    485e:	20 81       	ld	r18, Z
    4860:	22 34       	cpi	r18, 0x42	; 66
    4862:	c9 f0       	breq	.+50     	; 0x4896 <_ZN6Output3offEv+0x3a>
    4864:	18 f4       	brcc	.+6      	; 0x486c <_ZN6Output3offEv+0x10>
    4866:	21 34       	cpi	r18, 0x41	; 65
    4868:	31 f0       	breq	.+12     	; 0x4876 <_ZN6Output3offEv+0x1a>
    486a:	08 95       	ret
    486c:	23 34       	cpi	r18, 0x43	; 67
    486e:	19 f1       	breq	.+70     	; 0x48b6 <_ZN6Output3offEv+0x5a>
    4870:	24 34       	cpi	r18, 0x44	; 68
    4872:	89 f1       	breq	.+98     	; 0x48d6 <_ZN6Output3offEv+0x7a>
    4874:	08 95       	ret
	{
		case 'A':
			PORTA &= ~(1<<Pin);
    4876:	42 b1       	in	r20, 0x02	; 2
    4878:	21 e0       	ldi	r18, 0x01	; 1
    487a:	30 e0       	ldi	r19, 0x00	; 0
    487c:	b9 01       	movw	r22, r18
    487e:	fc 01       	movw	r30, r24
    4880:	01 80       	ldd	r0, Z+1	; 0x01
    4882:	02 c0       	rjmp	.+4      	; 0x4888 <_ZN6Output3offEv+0x2c>
    4884:	66 0f       	add	r22, r22
    4886:	77 1f       	adc	r23, r23
    4888:	0a 94       	dec	r0
    488a:	e2 f7       	brpl	.-8      	; 0x4884 <_ZN6Output3offEv+0x28>
    488c:	cb 01       	movw	r24, r22
    488e:	80 95       	com	r24
    4890:	84 23       	and	r24, r20
    4892:	82 b9       	out	0x02, r24	; 2
			break;
    4894:	08 95       	ret
		case 'B':
			PORTB &= ~(1<<Pin);
    4896:	45 b1       	in	r20, 0x05	; 5
    4898:	21 e0       	ldi	r18, 0x01	; 1
    489a:	30 e0       	ldi	r19, 0x00	; 0
    489c:	b9 01       	movw	r22, r18
    489e:	fc 01       	movw	r30, r24
    48a0:	01 80       	ldd	r0, Z+1	; 0x01
    48a2:	02 c0       	rjmp	.+4      	; 0x48a8 <_ZN6Output3offEv+0x4c>
    48a4:	66 0f       	add	r22, r22
    48a6:	77 1f       	adc	r23, r23
    48a8:	0a 94       	dec	r0
    48aa:	e2 f7       	brpl	.-8      	; 0x48a4 <_ZN6Output3offEv+0x48>
    48ac:	cb 01       	movw	r24, r22
    48ae:	80 95       	com	r24
    48b0:	84 23       	and	r24, r20
    48b2:	85 b9       	out	0x05, r24	; 5
			break;
    48b4:	08 95       	ret
		case 'C':
			PORTC &= ~(1<<Pin);
    48b6:	48 b1       	in	r20, 0x08	; 8
    48b8:	21 e0       	ldi	r18, 0x01	; 1
    48ba:	30 e0       	ldi	r19, 0x00	; 0
    48bc:	b9 01       	movw	r22, r18
    48be:	fc 01       	movw	r30, r24
    48c0:	01 80       	ldd	r0, Z+1	; 0x01
    48c2:	02 c0       	rjmp	.+4      	; 0x48c8 <_ZN6Output3offEv+0x6c>
    48c4:	66 0f       	add	r22, r22
    48c6:	77 1f       	adc	r23, r23
    48c8:	0a 94       	dec	r0
    48ca:	e2 f7       	brpl	.-8      	; 0x48c4 <_ZN6Output3offEv+0x68>
    48cc:	cb 01       	movw	r24, r22
    48ce:	80 95       	com	r24
    48d0:	84 23       	and	r24, r20
    48d2:	88 b9       	out	0x08, r24	; 8
			break;
    48d4:	08 95       	ret
		case 'D':
			PORTD &= ~(1<<Pin);
    48d6:	4b b1       	in	r20, 0x0b	; 11
    48d8:	21 e0       	ldi	r18, 0x01	; 1
    48da:	30 e0       	ldi	r19, 0x00	; 0
    48dc:	b9 01       	movw	r22, r18
    48de:	fc 01       	movw	r30, r24
    48e0:	01 80       	ldd	r0, Z+1	; 0x01
    48e2:	02 c0       	rjmp	.+4      	; 0x48e8 <_ZN6Output3offEv+0x8c>
    48e4:	66 0f       	add	r22, r22
    48e6:	77 1f       	adc	r23, r23
    48e8:	0a 94       	dec	r0
    48ea:	e2 f7       	brpl	.-8      	; 0x48e4 <_ZN6Output3offEv+0x88>
    48ec:	cb 01       	movw	r24, r22
    48ee:	80 95       	com	r24
    48f0:	84 23       	and	r24, r20
    48f2:	8b b9       	out	0x0b, r24	; 11
    48f4:	08 95       	ret

000048f6 <_ZN6Output6toggleEv>:
			break;
	}
}

void Output::toggle(){
	switch (Port)
    48f6:	fc 01       	movw	r30, r24
    48f8:	20 81       	ld	r18, Z
    48fa:	22 34       	cpi	r18, 0x42	; 66
    48fc:	c1 f0       	breq	.+48     	; 0x492e <_ZN6Output6toggleEv+0x38>
    48fe:	18 f4       	brcc	.+6      	; 0x4906 <_ZN6Output6toggleEv+0x10>
    4900:	21 34       	cpi	r18, 0x41	; 65
    4902:	31 f0       	breq	.+12     	; 0x4910 <_ZN6Output6toggleEv+0x1a>
    4904:	08 95       	ret
    4906:	23 34       	cpi	r18, 0x43	; 67
    4908:	09 f1       	breq	.+66     	; 0x494c <_ZN6Output6toggleEv+0x56>
    490a:	24 34       	cpi	r18, 0x44	; 68
    490c:	71 f1       	breq	.+92     	; 0x496a <_ZN6Output6toggleEv+0x74>
    490e:	08 95       	ret
	{
		case 'A':
			if ((PORTA&(1<<Pin)))
    4910:	22 b1       	in	r18, 0x02	; 2
    4912:	30 e0       	ldi	r19, 0x00	; 0
    4914:	fc 01       	movw	r30, r24
    4916:	01 80       	ldd	r0, Z+1	; 0x01
    4918:	02 c0       	rjmp	.+4      	; 0x491e <_ZN6Output6toggleEv+0x28>
    491a:	35 95       	asr	r19
    491c:	27 95       	ror	r18
    491e:	0a 94       	dec	r0
    4920:	e2 f7       	brpl	.-8      	; 0x491a <_ZN6Output6toggleEv+0x24>
    4922:	20 ff       	sbrs	r18, 0
    4924:	02 c0       	rjmp	.+4      	; 0x492a <_ZN6Output6toggleEv+0x34>
			{
				off();
    4926:	9a cf       	rjmp	.-204    	; 0x485c <_ZN6Output3offEv>
    4928:	08 95       	ret
			}
			else{
				on();
    492a:	0c cf       	rjmp	.-488    	; 0x4744 <_ZN6Output2onEv>
    492c:	08 95       	ret
			}
			break;
		case 'B':
			if ((PORTB&(1<<Pin)))
    492e:	25 b1       	in	r18, 0x05	; 5
    4930:	30 e0       	ldi	r19, 0x00	; 0
    4932:	fc 01       	movw	r30, r24
    4934:	01 80       	ldd	r0, Z+1	; 0x01
    4936:	02 c0       	rjmp	.+4      	; 0x493c <_ZN6Output6toggleEv+0x46>
    4938:	35 95       	asr	r19
    493a:	27 95       	ror	r18
    493c:	0a 94       	dec	r0
    493e:	e2 f7       	brpl	.-8      	; 0x4938 <_ZN6Output6toggleEv+0x42>
    4940:	20 ff       	sbrs	r18, 0
    4942:	02 c0       	rjmp	.+4      	; 0x4948 <_ZN6Output6toggleEv+0x52>
			{
				off();
    4944:	8b cf       	rjmp	.-234    	; 0x485c <_ZN6Output3offEv>
    4946:	08 95       	ret
			}
			else{
				on();
    4948:	fd ce       	rjmp	.-518    	; 0x4744 <_ZN6Output2onEv>
    494a:	08 95       	ret
			}
			break;
		case 'C':
			if ((PORTC&(1<<Pin)))
    494c:	28 b1       	in	r18, 0x08	; 8
    494e:	30 e0       	ldi	r19, 0x00	; 0
    4950:	fc 01       	movw	r30, r24
    4952:	01 80       	ldd	r0, Z+1	; 0x01
    4954:	02 c0       	rjmp	.+4      	; 0x495a <_ZN6Output6toggleEv+0x64>
    4956:	35 95       	asr	r19
    4958:	27 95       	ror	r18
    495a:	0a 94       	dec	r0
    495c:	e2 f7       	brpl	.-8      	; 0x4956 <_ZN6Output6toggleEv+0x60>
    495e:	20 ff       	sbrs	r18, 0
    4960:	02 c0       	rjmp	.+4      	; 0x4966 <_ZN6Output6toggleEv+0x70>
			{
				off();
    4962:	7c cf       	rjmp	.-264    	; 0x485c <_ZN6Output3offEv>
    4964:	08 95       	ret
			}
			else{
				on();
    4966:	ee ce       	rjmp	.-548    	; 0x4744 <_ZN6Output2onEv>
    4968:	08 95       	ret
			}
			break;
		case 'D':
			if ((PORTD&(1<<Pin)))
    496a:	2b b1       	in	r18, 0x0b	; 11
    496c:	30 e0       	ldi	r19, 0x00	; 0
    496e:	fc 01       	movw	r30, r24
    4970:	01 80       	ldd	r0, Z+1	; 0x01
    4972:	02 c0       	rjmp	.+4      	; 0x4978 <_ZN6Output6toggleEv+0x82>
    4974:	35 95       	asr	r19
    4976:	27 95       	ror	r18
    4978:	0a 94       	dec	r0
    497a:	e2 f7       	brpl	.-8      	; 0x4974 <_ZN6Output6toggleEv+0x7e>
    497c:	20 ff       	sbrs	r18, 0
    497e:	02 c0       	rjmp	.+4      	; 0x4984 <_ZN6Output6toggleEv+0x8e>
			{
				off();
    4980:	6d cf       	rjmp	.-294    	; 0x485c <_ZN6Output3offEv>
    4982:	08 95       	ret
			}
			else{
				on();
    4984:	df ce       	rjmp	.-578    	; 0x4744 <_ZN6Output2onEv>
    4986:	08 95       	ret

00004988 <_ZN8PressureD1Ev>:
	Pressure0=1;
	LPS25H_initialize();
} //Pressure

// default destructor
Pressure::~Pressure()
    4988:	0d 96       	adiw	r24, 0x0d	; 13
    498a:	2e cc       	rjmp	.-1956   	; 0x41e8 <_ZN3I2CD1Ev>
    498c:	08 95       	ret

0000498e <_ZN8Pressure14LPS25H_commandEhh>:
{
} //~Pressure

void Pressure::LPS25H_command(uint8_t add, uint8_t command){
    498e:	0f 93       	push	r16
    4990:	1f 93       	push	r17
    4992:	cf 93       	push	r28
    4994:	df 93       	push	r29
    4996:	06 2f       	mov	r16, r22
    4998:	14 2f       	mov	r17, r20
	i2c.twi_start();
    499a:	ec 01       	movw	r28, r24
    499c:	2d 96       	adiw	r28, 0x0d	; 13
    499e:	ce 01       	movw	r24, r28
    49a0:	24 dc       	rcall	.-1976   	; 0x41ea <_ZN3I2C9twi_startEv>
	i2c.twi_write(LPS25H_SA1_Write);
    49a2:	6a eb       	ldi	r22, 0xBA	; 186
    49a4:	ce 01       	movw	r24, r28
    49a6:	29 dc       	rcall	.-1966   	; 0x41fa <_ZN3I2C9twi_writeEh>
	i2c.twi_write(add);
    49a8:	60 2f       	mov	r22, r16
    49aa:	ce 01       	movw	r24, r28
    49ac:	26 dc       	rcall	.-1972   	; 0x41fa <_ZN3I2C9twi_writeEh>
	i2c.twi_write(command);
    49ae:	61 2f       	mov	r22, r17
    49b0:	ce 01       	movw	r24, r28
    49b2:	23 dc       	rcall	.-1978   	; 0x41fa <_ZN3I2C9twi_writeEh>
	i2c.twi_stop();
    49b4:	ce 01       	movw	r24, r28
    49b6:	1d dc       	rcall	.-1990   	; 0x41f2 <_ZN3I2C8twi_stopEv>
}
    49b8:	df 91       	pop	r29
    49ba:	cf 91       	pop	r28
    49bc:	1f 91       	pop	r17
    49be:	0f 91       	pop	r16
    49c0:	08 95       	ret

000049c2 <_ZN8Pressure17LPS25H_initializeEv>:

void Pressure::LPS25H_initialize(){
    49c2:	cf 93       	push	r28
    49c4:	df 93       	push	r29
    49c6:	ec 01       	movw	r28, r24
	uint8_t temp=0;
	//internal averages Pressure and Temperature (both 8)
	temp &= ~((1<<AVGT1) | (1<<AVGT0) | (1<<AVGP1) | (1<<AVGP0)); 
	LPS25H_command(RES_CONF,temp);
    49c8:	40 e0       	ldi	r20, 0x00	; 0
    49ca:	60 e1       	ldi	r22, 0x10	; 16
    49cc:	e0 df       	rcall	.-64     	; 0x498e <_ZN8Pressure14LPS25H_commandEhh>
	temp=0;
	//Enable device and set a single shot as well as Lock while reading
	temp |= (1<<PD) | (1<<BDU) | (1<<ODR1);
	LPS25H_command(CTRL_REG1,temp);
    49ce:	44 ea       	ldi	r20, 0xA4	; 164
    49d0:	60 e2       	ldi	r22, 0x20	; 32
    49d2:	ce 01       	movw	r24, r28
    49d4:	dc df       	rcall	.-72     	; 0x498e <_ZN8Pressure14LPS25H_commandEhh>
	temp=0;
	//FIFO on, no watermark no reset, reboot memory content, FIFO MEAN Mode
	temp |= (1<<BOOT) | (1<<FIFO_EN) | (1<<FIFO_MEAN_DEC);
	LPS25H_command(CTRL_REG2,temp);
    49d6:	40 ed       	ldi	r20, 0xD0	; 208
    49d8:	61 e2       	ldi	r22, 0x21	; 33
    49da:	ce 01       	movw	r24, r28
    49dc:	d8 df       	rcall	.-80     	; 0x498e <_ZN8Pressure14LPS25H_commandEhh>
	temp=0;
	//FIFO Controll register for MEAN Mode und 8 moving averages
	temp|=(1<<F_MODE2) | (1<<F_MODE1) | (1<<WTM_POINT0) | (1<<WTM_POINT1) | (1<<WTM_POINT2);
	LPS25H_command(FIFO_CTRL,temp);
    49de:	47 ec       	ldi	r20, 0xC7	; 199
    49e0:	6e e2       	ldi	r22, 0x2E	; 46
    49e2:	ce 01       	movw	r24, r28
    49e4:	d4 df       	rcall	.-88     	; 0x498e <_ZN8Pressure14LPS25H_commandEhh>
	//CTRL_REG4 not set
	//INTERRUPT_CFG not set
	//no threshold used
	//no Pressure offset used
	
}
    49e6:	df 91       	pop	r29
    49e8:	cf 91       	pop	r28
    49ea:	08 95       	ret

000049ec <_ZN8PressureC1Ev>:


#include "Pressure.h"

// default constructor
Pressure::Pressure()
    49ec:	cf 93       	push	r28
    49ee:	df 93       	push	r29
    49f0:	ec 01       	movw	r28, r24
    49f2:	0d 96       	adiw	r24, 0x0d	; 13
    49f4:	f5 db       	rcall	.-2070   	; 0x41e0 <_ZN3I2CC1Ev>
{
	Press = 0;
    49f6:	18 82       	st	Y, r1
    49f8:	19 82       	std	Y+1, r1	; 0x01
    49fa:	1a 82       	std	Y+2, r1	; 0x02
    49fc:	1b 82       	std	Y+3, r1	; 0x03
	Tempera = 0;
    49fe:	1c 82       	std	Y+4, r1	; 0x04
    4a00:	1d 82       	std	Y+5, r1	; 0x05
    4a02:	1e 82       	std	Y+6, r1	; 0x06
    4a04:	1f 82       	std	Y+7, r1	; 0x07
	Tempoffset = -4;	//Aus Erfahrung
    4a06:	8c ef       	ldi	r24, 0xFC	; 252
    4a08:	88 87       	std	Y+8, r24	; 0x08
	Pressure0=1;
    4a0a:	40 e0       	ldi	r20, 0x00	; 0
    4a0c:	50 e0       	ldi	r21, 0x00	; 0
    4a0e:	60 e8       	ldi	r22, 0x80	; 128
    4a10:	7f e3       	ldi	r23, 0x3F	; 63
    4a12:	49 87       	std	Y+9, r20	; 0x09
    4a14:	5a 87       	std	Y+10, r21	; 0x0a
    4a16:	6b 87       	std	Y+11, r22	; 0x0b
    4a18:	7c 87       	std	Y+12, r23	; 0x0c
	LPS25H_initialize();
    4a1a:	ce 01       	movw	r24, r28
    4a1c:	d2 df       	rcall	.-92     	; 0x49c2 <_ZN8Pressure17LPS25H_initializeEv>
} //Pressure
    4a1e:	df 91       	pop	r29
    4a20:	cf 91       	pop	r28
    4a22:	08 95       	ret

00004a24 <_ZN8Pressure18READ_Pressure_onceEv>:
	//no threshold used
	//no Pressure offset used
	
}

void Pressure::READ_Pressure_once(){
    4a24:	af 92       	push	r10
    4a26:	bf 92       	push	r11
    4a28:	cf 92       	push	r12
    4a2a:	df 92       	push	r13
    4a2c:	ef 92       	push	r14
    4a2e:	ff 92       	push	r15
    4a30:	1f 93       	push	r17
    4a32:	cf 93       	push	r28
    4a34:	df 93       	push	r29
    4a36:	00 d0       	rcall	.+0      	; 0x4a38 <_ZN8Pressure18READ_Pressure_onceEv+0x14>
    4a38:	1f 92       	push	r1
    4a3a:	cd b7       	in	r28, 0x3d	; 61
    4a3c:	de b7       	in	r29, 0x3e	; 62
    4a3e:	5c 01       	movw	r10, r24
	uint8_t Wertedruck[3];
	cli();
    4a40:	f8 94       	cli
	i2c.twi_start();
    4a42:	7c 01       	movw	r14, r24
    4a44:	8d e0       	ldi	r24, 0x0D	; 13
    4a46:	e8 0e       	add	r14, r24
    4a48:	f1 1c       	adc	r15, r1
    4a4a:	c7 01       	movw	r24, r14
    4a4c:	ce db       	rcall	.-2148   	; 0x41ea <_ZN3I2C9twi_startEv>
	i2c.twi_write(LPS25H_SA1_Write);
    4a4e:	6a eb       	ldi	r22, 0xBA	; 186
    4a50:	c7 01       	movw	r24, r14
    4a52:	d3 db       	rcall	.-2138   	; 0x41fa <_ZN3I2C9twi_writeEh>
	i2c.twi_write(PRESS_OUT_XL|(1<<autoincrement));
    4a54:	68 ea       	ldi	r22, 0xA8	; 168
    4a56:	c7 01       	movw	r24, r14
    4a58:	d0 db       	rcall	.-2144   	; 0x41fa <_ZN3I2C9twi_writeEh>
	i2c.twi_start();
    4a5a:	c7 01       	movw	r24, r14
    4a5c:	c6 db       	rcall	.-2164   	; 0x41ea <_ZN3I2C9twi_startEv>
	i2c.twi_write(LPS25H_SA1_READ);
    4a5e:	6b eb       	ldi	r22, 0xBB	; 187
    4a60:	c7 01       	movw	r24, r14
    4a62:	cb db       	rcall	.-2154   	; 0x41fa <_ZN3I2C9twi_writeEh>
    4a64:	fe 01       	movw	r30, r28
    4a66:	31 96       	adiw	r30, 0x01	; 1
    4a68:	6f 01       	movw	r12, r30
	for (uint8_t i=0;i<3;i++)
    4a6a:	10 e0       	ldi	r17, 0x00	; 0
	{
		if (i<2)
    4a6c:	12 30       	cpi	r17, 0x02	; 2
    4a6e:	30 f4       	brcc	.+12     	; 0x4a7c <_ZN8Pressure18READ_Pressure_onceEv+0x58>
		{
			Wertedruck[i] = i2c.twi_read(1);
    4a70:	61 e0       	ldi	r22, 0x01	; 1
    4a72:	c7 01       	movw	r24, r14
    4a74:	d2 db       	rcall	.-2140   	; 0x421a <_ZN3I2C8twi_readEh>
    4a76:	f6 01       	movw	r30, r12
    4a78:	80 83       	st	Z, r24
    4a7a:	05 c0       	rjmp	.+10     	; 0x4a86 <_ZN8Pressure18READ_Pressure_onceEv+0x62>
		}
		else{
			Wertedruck[i] = i2c.twi_read(0);
    4a7c:	60 e0       	ldi	r22, 0x00	; 0
    4a7e:	c7 01       	movw	r24, r14
    4a80:	cc db       	rcall	.-2152   	; 0x421a <_ZN3I2C8twi_readEh>
    4a82:	f6 01       	movw	r30, r12
    4a84:	80 83       	st	Z, r24
	i2c.twi_start();
	i2c.twi_write(LPS25H_SA1_Write);
	i2c.twi_write(PRESS_OUT_XL|(1<<autoincrement));
	i2c.twi_start();
	i2c.twi_write(LPS25H_SA1_READ);
	for (uint8_t i=0;i<3;i++)
    4a86:	1f 5f       	subi	r17, 0xFF	; 255
    4a88:	ff ef       	ldi	r31, 0xFF	; 255
    4a8a:	cf 1a       	sub	r12, r31
    4a8c:	df 0a       	sbc	r13, r31
    4a8e:	13 30       	cpi	r17, 0x03	; 3
    4a90:	69 f7       	brne	.-38     	; 0x4a6c <_ZN8Pressure18READ_Pressure_onceEv+0x48>
		}
		else{
			Wertedruck[i] = i2c.twi_read(0);
		}
	}
	i2c.twi_stop();
    4a92:	c7 01       	movw	r24, r14
    4a94:	ae db       	rcall	.-2212   	; 0x41f2 <_ZN3I2C8twi_stopEv>
	Press = ((double)Wertedruck[2]*65536);
    4a96:	6b 81       	ldd	r22, Y+3	; 0x03
    4a98:	70 e0       	ldi	r23, 0x00	; 0
    4a9a:	80 e0       	ldi	r24, 0x00	; 0
    4a9c:	90 e0       	ldi	r25, 0x00	; 0
    4a9e:	a6 d3       	rcall	.+1868   	; 0x51ec <__floatunsisf>
    4aa0:	20 e0       	ldi	r18, 0x00	; 0
    4aa2:	30 e0       	ldi	r19, 0x00	; 0
    4aa4:	40 e8       	ldi	r20, 0x80	; 128
    4aa6:	57 e4       	ldi	r21, 0x47	; 71
    4aa8:	01 d5       	rcall	.+2562   	; 0x54ac <__mulsf3>
    4aaa:	6b 01       	movw	r12, r22
    4aac:	7c 01       	movw	r14, r24
	Press += ((double)Wertedruck[1]*256);
    4aae:	6a 81       	ldd	r22, Y+2	; 0x02
    4ab0:	70 e0       	ldi	r23, 0x00	; 0
    4ab2:	80 e0       	ldi	r24, 0x00	; 0
    4ab4:	90 e0       	ldi	r25, 0x00	; 0
    4ab6:	9a d3       	rcall	.+1844   	; 0x51ec <__floatunsisf>
    4ab8:	20 e0       	ldi	r18, 0x00	; 0
    4aba:	30 e0       	ldi	r19, 0x00	; 0
    4abc:	40 e8       	ldi	r20, 0x80	; 128
    4abe:	53 e4       	ldi	r21, 0x43	; 67
    4ac0:	f5 d4       	rcall	.+2538   	; 0x54ac <__mulsf3>
    4ac2:	9b 01       	movw	r18, r22
    4ac4:	ac 01       	movw	r20, r24
    4ac6:	c7 01       	movw	r24, r14
    4ac8:	b6 01       	movw	r22, r12
    4aca:	2a d2       	rcall	.+1108   	; 0x4f20 <__addsf3>
    4acc:	6b 01       	movw	r12, r22
    4ace:	7c 01       	movw	r14, r24
	Press += (double)Wertedruck[0];
    4ad0:	69 81       	ldd	r22, Y+1	; 0x01
    4ad2:	70 e0       	ldi	r23, 0x00	; 0
    4ad4:	80 e0       	ldi	r24, 0x00	; 0
    4ad6:	90 e0       	ldi	r25, 0x00	; 0
    4ad8:	89 d3       	rcall	.+1810   	; 0x51ec <__floatunsisf>
    4ada:	9b 01       	movw	r18, r22
    4adc:	ac 01       	movw	r20, r24
    4ade:	c7 01       	movw	r24, r14
    4ae0:	b6 01       	movw	r22, r12
    4ae2:	1e d2       	rcall	.+1084   	; 0x4f20 <__addsf3>
	//Press = (Wertedruck[0] + (Wertedruck[1]*256) + (Wertedruck[2]*65536));
	Press/=4096.0;
    4ae4:	20 e0       	ldi	r18, 0x00	; 0
    4ae6:	30 e0       	ldi	r19, 0x00	; 0
    4ae8:	40 e8       	ldi	r20, 0x80	; 128
    4aea:	59 e3       	ldi	r21, 0x39	; 57
    4aec:	df d4       	rcall	.+2494   	; 0x54ac <__mulsf3>
    4aee:	f5 01       	movw	r30, r10
    4af0:	60 83       	st	Z, r22
    4af2:	71 83       	std	Z+1, r23	; 0x01
    4af4:	82 83       	std	Z+2, r24	; 0x02
    4af6:	93 83       	std	Z+3, r25	; 0x03
	sei();
    4af8:	78 94       	sei
}
    4afa:	0f 90       	pop	r0
    4afc:	0f 90       	pop	r0
    4afe:	0f 90       	pop	r0
    4b00:	df 91       	pop	r29
    4b02:	cf 91       	pop	r28
    4b04:	1f 91       	pop	r17
    4b06:	ff 90       	pop	r15
    4b08:	ef 90       	pop	r14
    4b0a:	df 90       	pop	r13
    4b0c:	cf 90       	pop	r12
    4b0e:	bf 90       	pop	r11
    4b10:	af 90       	pop	r10
    4b12:	08 95       	ret

00004b14 <_ZN8Pressure16READ_TemperatureEv>:

void Pressure::READ_Temperature(){
    4b14:	cf 92       	push	r12
    4b16:	df 92       	push	r13
    4b18:	ef 92       	push	r14
    4b1a:	ff 92       	push	r15
    4b1c:	0f 93       	push	r16
    4b1e:	1f 93       	push	r17
    4b20:	cf 93       	push	r28
    4b22:	df 93       	push	r29
    4b24:	00 d0       	rcall	.+0      	; 0x4b26 <_ZN8Pressure16READ_TemperatureEv+0x12>
    4b26:	cd b7       	in	r28, 0x3d	; 61
    4b28:	de b7       	in	r29, 0x3e	; 62
    4b2a:	8c 01       	movw	r16, r24
	cli();
    4b2c:	f8 94       	cli
	uint8_t Wert[2];
	i2c.twi_start();
    4b2e:	7c 01       	movw	r14, r24
    4b30:	8d e0       	ldi	r24, 0x0D	; 13
    4b32:	e8 0e       	add	r14, r24
    4b34:	f1 1c       	adc	r15, r1
    4b36:	c7 01       	movw	r24, r14
    4b38:	58 db       	rcall	.-2384   	; 0x41ea <_ZN3I2C9twi_startEv>
	i2c.twi_write(LPS25H_SA1_Write);
    4b3a:	6a eb       	ldi	r22, 0xBA	; 186
    4b3c:	c7 01       	movw	r24, r14
    4b3e:	5d db       	rcall	.-2374   	; 0x41fa <_ZN3I2C9twi_writeEh>
	i2c.twi_write(TEMP_OUT_L|(1<<autoincrement));
    4b40:	6b ea       	ldi	r22, 0xAB	; 171
    4b42:	c7 01       	movw	r24, r14
    4b44:	5a db       	rcall	.-2380   	; 0x41fa <_ZN3I2C9twi_writeEh>
	i2c.twi_start();
    4b46:	c7 01       	movw	r24, r14
    4b48:	50 db       	rcall	.-2400   	; 0x41ea <_ZN3I2C9twi_startEv>
	i2c.twi_write(LPS25H_SA1_READ);
    4b4a:	6b eb       	ldi	r22, 0xBB	; 187
    4b4c:	c7 01       	movw	r24, r14
    4b4e:	55 db       	rcall	.-2390   	; 0x41fa <_ZN3I2C9twi_writeEh>
    4b50:	cc 24       	eor	r12, r12
    4b52:	c3 94       	inc	r12
    4b54:	d1 2c       	mov	r13, r1
    4b56:	02 c0       	rjmp	.+4      	; 0x4b5c <_ZN8Pressure16READ_TemperatureEv+0x48>
    4b58:	d3 94       	inc	r13
    4b5a:	c3 94       	inc	r12
	for (uint8_t i=0;i<2;i++)
	{
		if (i<1)
    4b5c:	d1 10       	cpse	r13, r1
    4b5e:	05 c0       	rjmp	.+10     	; 0x4b6a <_ZN8Pressure16READ_TemperatureEv+0x56>
		{
			Wert[i] = i2c.twi_read(1);
    4b60:	61 e0       	ldi	r22, 0x01	; 1
    4b62:	c7 01       	movw	r24, r14
    4b64:	5a db       	rcall	.-2380   	; 0x421a <_ZN3I2C8twi_readEh>
    4b66:	89 83       	std	Y+1, r24	; 0x01
    4b68:	f7 cf       	rjmp	.-18     	; 0x4b58 <_ZN8Pressure16READ_TemperatureEv+0x44>
		}
		else{
			Wert[i] = i2c.twi_read(0);
    4b6a:	60 e0       	ldi	r22, 0x00	; 0
    4b6c:	c7 01       	movw	r24, r14
    4b6e:	55 db       	rcall	.-2390   	; 0x421a <_ZN3I2C8twi_readEh>
    4b70:	e1 e0       	ldi	r30, 0x01	; 1
    4b72:	f0 e0       	ldi	r31, 0x00	; 0
    4b74:	ec 0f       	add	r30, r28
    4b76:	fd 1f       	adc	r31, r29
    4b78:	ed 0d       	add	r30, r13
    4b7a:	f1 1d       	adc	r31, r1
    4b7c:	80 83       	st	Z, r24
	i2c.twi_start();
	i2c.twi_write(LPS25H_SA1_Write);
	i2c.twi_write(TEMP_OUT_L|(1<<autoincrement));
	i2c.twi_start();
	i2c.twi_write(LPS25H_SA1_READ);
	for (uint8_t i=0;i<2;i++)
    4b7e:	e1 e0       	ldi	r30, 0x01	; 1
    4b80:	ec 15       	cp	r30, r12
    4b82:	50 f7       	brcc	.-44     	; 0x4b58 <_ZN8Pressure16READ_TemperatureEv+0x44>
		}
		else{
			Wert[i] = i2c.twi_read(0);
		}
	}
	i2c.twi_stop();
    4b84:	c7 01       	movw	r24, r14
    4b86:	35 db       	rcall	.-2454   	; 0x41f2 <_ZN3I2C8twi_stopEv>
	Tempera = ((int16_t)(Wert[0]+(Wert[1]<<8)))/480.0;
    4b88:	89 81       	ldd	r24, Y+1	; 0x01
    4b8a:	6a 81       	ldd	r22, Y+2	; 0x02
    4b8c:	70 e0       	ldi	r23, 0x00	; 0
    4b8e:	76 2f       	mov	r23, r22
    4b90:	66 27       	eor	r22, r22
    4b92:	68 0f       	add	r22, r24
    4b94:	71 1d       	adc	r23, r1
    4b96:	88 27       	eor	r24, r24
    4b98:	77 fd       	sbrc	r23, 7
    4b9a:	80 95       	com	r24
    4b9c:	98 2f       	mov	r25, r24
    4b9e:	28 d3       	rcall	.+1616   	; 0x51f0 <__floatsisf>
    4ba0:	20 e0       	ldi	r18, 0x00	; 0
    4ba2:	30 e0       	ldi	r19, 0x00	; 0
    4ba4:	40 ef       	ldi	r20, 0xF0	; 240
    4ba6:	53 e4       	ldi	r21, 0x43	; 67
    4ba8:	88 d2       	rcall	.+1296   	; 0x50ba <__divsf3>
    4baa:	6b 01       	movw	r12, r22
    4bac:	7c 01       	movw	r14, r24
	Tempera+=42.5+Tempoffset;
    4bae:	f8 01       	movw	r30, r16
    4bb0:	60 85       	ldd	r22, Z+8	; 0x08
    4bb2:	77 27       	eor	r23, r23
    4bb4:	67 fd       	sbrc	r22, 7
    4bb6:	70 95       	com	r23
    4bb8:	87 2f       	mov	r24, r23
    4bba:	97 2f       	mov	r25, r23
    4bbc:	19 d3       	rcall	.+1586   	; 0x51f0 <__floatsisf>
    4bbe:	20 e0       	ldi	r18, 0x00	; 0
    4bc0:	30 e0       	ldi	r19, 0x00	; 0
    4bc2:	4a e2       	ldi	r20, 0x2A	; 42
    4bc4:	52 e4       	ldi	r21, 0x42	; 66
    4bc6:	ac d1       	rcall	.+856    	; 0x4f20 <__addsf3>
    4bc8:	9b 01       	movw	r18, r22
    4bca:	ac 01       	movw	r20, r24
    4bcc:	c7 01       	movw	r24, r14
    4bce:	b6 01       	movw	r22, r12
    4bd0:	a7 d1       	rcall	.+846    	; 0x4f20 <__addsf3>
    4bd2:	f8 01       	movw	r30, r16
    4bd4:	64 83       	std	Z+4, r22	; 0x04
    4bd6:	75 83       	std	Z+5, r23	; 0x05
    4bd8:	86 83       	std	Z+6, r24	; 0x06
    4bda:	97 83       	std	Z+7, r25	; 0x07
	sei();
    4bdc:	78 94       	sei
}
    4bde:	0f 90       	pop	r0
    4be0:	0f 90       	pop	r0
    4be2:	df 91       	pop	r29
    4be4:	cf 91       	pop	r28
    4be6:	1f 91       	pop	r17
    4be8:	0f 91       	pop	r16
    4bea:	ff 90       	pop	r15
    4bec:	ef 90       	pop	r14
    4bee:	df 90       	pop	r13
    4bf0:	cf 90       	pop	r12
    4bf2:	08 95       	ret

00004bf4 <_ZN8Pressure8altitudeEd>:

double Pressure::altitude(double Pressurevalue){
    4bf4:	8f 92       	push	r8
    4bf6:	9f 92       	push	r9
    4bf8:	af 92       	push	r10
    4bfa:	bf 92       	push	r11
    4bfc:	cf 92       	push	r12
    4bfe:	df 92       	push	r13
    4c00:	ef 92       	push	r14
    4c02:	ff 92       	push	r15
	return (Pressure0*100*log(Pressure0/Pressurevalue)/(1.2041*9.81));
    4c04:	fc 01       	movw	r30, r24
    4c06:	c1 84       	ldd	r12, Z+9	; 0x09
    4c08:	d2 84       	ldd	r13, Z+10	; 0x0a
    4c0a:	e3 84       	ldd	r14, Z+11	; 0x0b
    4c0c:	f4 84       	ldd	r15, Z+12	; 0x0c
    4c0e:	9a 01       	movw	r18, r20
    4c10:	ab 01       	movw	r20, r22
    4c12:	c7 01       	movw	r24, r14
    4c14:	b6 01       	movw	r22, r12
    4c16:	51 d2       	rcall	.+1186   	; 0x50ba <__divsf3>
    4c18:	09 d4       	rcall	.+2066   	; 0x542c <log>
    4c1a:	4b 01       	movw	r8, r22
    4c1c:	5c 01       	movw	r10, r24
    4c1e:	20 e0       	ldi	r18, 0x00	; 0
    4c20:	30 e0       	ldi	r19, 0x00	; 0
    4c22:	48 ec       	ldi	r20, 0xC8	; 200
    4c24:	52 e4       	ldi	r21, 0x42	; 66
    4c26:	c7 01       	movw	r24, r14
    4c28:	b6 01       	movw	r22, r12
    4c2a:	40 d4       	rcall	.+2176   	; 0x54ac <__mulsf3>
    4c2c:	a5 01       	movw	r20, r10
    4c2e:	94 01       	movw	r18, r8
    4c30:	3d d4       	rcall	.+2170   	; 0x54ac <__mulsf3>
    4c32:	2c ed       	ldi	r18, 0xDC	; 220
    4c34:	3e ef       	ldi	r19, 0xFE	; 254
    4c36:	4c e3       	ldi	r20, 0x3C	; 60
    4c38:	51 e4       	ldi	r21, 0x41	; 65
    4c3a:	3f d2       	rcall	.+1150   	; 0x50ba <__divsf3>
}
    4c3c:	ff 90       	pop	r15
    4c3e:	ef 90       	pop	r14
    4c40:	df 90       	pop	r13
    4c42:	cf 90       	pop	r12
    4c44:	bf 90       	pop	r11
    4c46:	af 90       	pop	r10
    4c48:	9f 90       	pop	r9
    4c4a:	8f 90       	pop	r8
    4c4c:	08 95       	ret

00004c4e <_ZN8Pressure13set_Pressure0Ed>:
void Pressure::set_Pressure0(double Pressurevalue){
	Pressure0=Pressurevalue;
    4c4e:	fc 01       	movw	r30, r24
    4c50:	41 87       	std	Z+9, r20	; 0x09
    4c52:	52 87       	std	Z+10, r21	; 0x0a
    4c54:	63 87       	std	Z+11, r22	; 0x0b
    4c56:	74 87       	std	Z+12, r23	; 0x0c
    4c58:	08 95       	ret

00004c5a <_ZN3RTCD1Ev>:
		}
		Wecker();
	}
	ausgabezeitneu();
	return 0;
}
    4c5a:	08 95       	ret

00004c5c <_ZN3RTC6WeckerEv>:
    4c5c:	fc 01       	movw	r30, r24
    4c5e:	80 8d       	ldd	r24, Z+24	; 0x18
    4c60:	83 ff       	sbrs	r24, 3
    4c62:	0c c0       	rjmp	.+24     	; 0x4c7c <_ZN3RTC6WeckerEv+0x20>
    4c64:	84 fd       	sbrc	r24, 4
    4c66:	0a c0       	rjmp	.+20     	; 0x4c7c <_ZN3RTC6WeckerEv+0x20>
    4c68:	22 8d       	ldd	r18, Z+26	; 0x1a
    4c6a:	90 89       	ldd	r25, Z+16	; 0x10
    4c6c:	29 13       	cpse	r18, r25
    4c6e:	06 c0       	rjmp	.+12     	; 0x4c7c <_ZN3RTC6WeckerEv+0x20>
    4c70:	21 8d       	ldd	r18, Z+25	; 0x19
    4c72:	91 89       	ldd	r25, Z+17	; 0x11
    4c74:	29 13       	cpse	r18, r25
    4c76:	02 c0       	rjmp	.+4      	; 0x4c7c <_ZN3RTC6WeckerEv+0x20>
    4c78:	80 61       	ori	r24, 0x10	; 16
    4c7a:	80 8f       	std	Z+24, r24	; 0x18
    4c7c:	08 95       	ret

00004c7e <_ZN3RTC14ausgabezeitneuEv>:
    4c7e:	fc 01       	movw	r30, r24
    4c80:	90 89       	ldd	r25, Z+16	; 0x10
    4c82:	8d ec       	ldi	r24, 0xCD	; 205
    4c84:	98 9f       	mul	r25, r24
    4c86:	21 2d       	mov	r18, r1
    4c88:	11 24       	eor	r1, r1
    4c8a:	26 95       	lsr	r18
    4c8c:	26 95       	lsr	r18
    4c8e:	26 95       	lsr	r18
    4c90:	30 e3       	ldi	r19, 0x30	; 48
    4c92:	32 0f       	add	r19, r18
    4c94:	30 83       	st	Z, r19
    4c96:	22 0f       	add	r18, r18
    4c98:	32 2f       	mov	r19, r18
    4c9a:	33 0f       	add	r19, r19
    4c9c:	33 0f       	add	r19, r19
    4c9e:	23 0f       	add	r18, r19
    4ca0:	92 1b       	sub	r25, r18
    4ca2:	90 5d       	subi	r25, 0xD0	; 208
    4ca4:	91 83       	std	Z+1, r25	; 0x01
    4ca6:	91 89       	ldd	r25, Z+17	; 0x11
    4ca8:	98 9f       	mul	r25, r24
    4caa:	21 2d       	mov	r18, r1
    4cac:	11 24       	eor	r1, r1
    4cae:	26 95       	lsr	r18
    4cb0:	26 95       	lsr	r18
    4cb2:	26 95       	lsr	r18
    4cb4:	30 e3       	ldi	r19, 0x30	; 48
    4cb6:	32 0f       	add	r19, r18
    4cb8:	33 83       	std	Z+3, r19	; 0x03
    4cba:	22 0f       	add	r18, r18
    4cbc:	32 2f       	mov	r19, r18
    4cbe:	33 0f       	add	r19, r19
    4cc0:	33 0f       	add	r19, r19
    4cc2:	23 0f       	add	r18, r19
    4cc4:	92 1b       	sub	r25, r18
    4cc6:	90 5d       	subi	r25, 0xD0	; 208
    4cc8:	94 83       	std	Z+4, r25	; 0x04
    4cca:	92 89       	ldd	r25, Z+18	; 0x12
    4ccc:	98 9f       	mul	r25, r24
    4cce:	81 2d       	mov	r24, r1
    4cd0:	11 24       	eor	r1, r1
    4cd2:	86 95       	lsr	r24
    4cd4:	86 95       	lsr	r24
    4cd6:	86 95       	lsr	r24
    4cd8:	20 e3       	ldi	r18, 0x30	; 48
    4cda:	28 0f       	add	r18, r24
    4cdc:	26 83       	std	Z+6, r18	; 0x06
    4cde:	88 0f       	add	r24, r24
    4ce0:	28 2f       	mov	r18, r24
    4ce2:	22 0f       	add	r18, r18
    4ce4:	22 0f       	add	r18, r18
    4ce6:	82 0f       	add	r24, r18
    4ce8:	98 1b       	sub	r25, r24
    4cea:	90 5d       	subi	r25, 0xD0	; 208
    4cec:	97 83       	std	Z+7, r25	; 0x07
    4cee:	08 95       	ret

00004cf0 <_ZN3RTC15ausgabedatumneuEv>:
    4cf0:	fc 01       	movw	r30, r24
    4cf2:	94 89       	ldd	r25, Z+20	; 0x14
    4cf4:	8d ec       	ldi	r24, 0xCD	; 205
    4cf6:	98 9f       	mul	r25, r24
    4cf8:	21 2d       	mov	r18, r1
    4cfa:	11 24       	eor	r1, r1
    4cfc:	26 95       	lsr	r18
    4cfe:	26 95       	lsr	r18
    4d00:	26 95       	lsr	r18
    4d02:	30 e3       	ldi	r19, 0x30	; 48
    4d04:	32 0f       	add	r19, r18
    4d06:	30 87       	std	Z+8, r19	; 0x08
    4d08:	22 0f       	add	r18, r18
    4d0a:	32 2f       	mov	r19, r18
    4d0c:	33 0f       	add	r19, r19
    4d0e:	33 0f       	add	r19, r19
    4d10:	23 0f       	add	r18, r19
    4d12:	92 1b       	sub	r25, r18
    4d14:	90 5d       	subi	r25, 0xD0	; 208
    4d16:	91 87       	std	Z+9, r25	; 0x09
    4d18:	96 89       	ldd	r25, Z+22	; 0x16
    4d1a:	98 9f       	mul	r25, r24
    4d1c:	21 2d       	mov	r18, r1
    4d1e:	11 24       	eor	r1, r1
    4d20:	26 95       	lsr	r18
    4d22:	26 95       	lsr	r18
    4d24:	26 95       	lsr	r18
    4d26:	30 e3       	ldi	r19, 0x30	; 48
    4d28:	32 0f       	add	r19, r18
    4d2a:	33 87       	std	Z+11, r19	; 0x0b
    4d2c:	22 0f       	add	r18, r18
    4d2e:	32 2f       	mov	r19, r18
    4d30:	33 0f       	add	r19, r19
    4d32:	33 0f       	add	r19, r19
    4d34:	23 0f       	add	r18, r19
    4d36:	92 1b       	sub	r25, r18
    4d38:	90 5d       	subi	r25, 0xD0	; 208
    4d3a:	94 87       	std	Z+12, r25	; 0x0c
    4d3c:	97 89       	ldd	r25, Z+23	; 0x17
    4d3e:	98 9f       	mul	r25, r24
    4d40:	81 2d       	mov	r24, r1
    4d42:	11 24       	eor	r1, r1
    4d44:	86 95       	lsr	r24
    4d46:	86 95       	lsr	r24
    4d48:	86 95       	lsr	r24
    4d4a:	20 e3       	ldi	r18, 0x30	; 48
    4d4c:	28 0f       	add	r18, r24
    4d4e:	26 87       	std	Z+14, r18	; 0x0e
    4d50:	88 0f       	add	r24, r24
    4d52:	28 2f       	mov	r18, r24
    4d54:	22 0f       	add	r18, r18
    4d56:	22 0f       	add	r18, r18
    4d58:	82 0f       	add	r24, r18
    4d5a:	98 1b       	sub	r25, r24
    4d5c:	90 5d       	subi	r25, 0xD0	; 208
    4d5e:	97 87       	std	Z+15, r25	; 0x0f
    4d60:	08 95       	ret

00004d62 <_ZN3RTCC1Ev>:
    4d62:	cf 93       	push	r28
    4d64:	df 93       	push	r29
    4d66:	ec 01       	movw	r28, r24
    4d68:	1a 8a       	std	Y+18, r1	; 0x12
    4d6a:	1b 8a       	std	Y+19, r1	; 0x13
    4d6c:	19 8a       	std	Y+17, r1	; 0x11
    4d6e:	18 8a       	std	Y+16, r1	; 0x10
    4d70:	1c 8a       	std	Y+20, r1	; 0x14
    4d72:	1e 8a       	std	Y+22, r1	; 0x16
    4d74:	1f 8a       	std	Y+23, r1	; 0x17
    4d76:	1d 8a       	std	Y+21, r1	; 0x15
    4d78:	88 e2       	ldi	r24, 0x28	; 40
    4d7a:	89 8f       	std	Y+25, r24	; 0x19
    4d7c:	8a e0       	ldi	r24, 0x0A	; 10
    4d7e:	8a 8f       	std	Y+26, r24	; 0x1a
    4d80:	de 01       	movw	r26, r28
    4d82:	fe 01       	movw	r30, r28
    4d84:	38 96       	adiw	r30, 0x08	; 8
    4d86:	80 e0       	ldi	r24, 0x00	; 0
    4d88:	1d 92       	st	X+, r1
    4d8a:	11 92       	st	Z+, r1
    4d8c:	8f 5f       	subi	r24, 0xFF	; 255
    4d8e:	88 30       	cpi	r24, 0x08	; 8
    4d90:	d9 f7       	brne	.-10     	; 0x4d88 <_ZN3RTCC1Ev+0x26>
    4d92:	8a e3       	ldi	r24, 0x3A	; 58
    4d94:	8a 83       	std	Y+2, r24	; 0x02
    4d96:	8d 83       	std	Y+5, r24	; 0x05
    4d98:	8e e2       	ldi	r24, 0x2E	; 46
    4d9a:	8a 87       	std	Y+10, r24	; 0x0a
    4d9c:	8d 87       	std	Y+13, r24	; 0x0d
    4d9e:	ce 01       	movw	r24, r28
    4da0:	6e df       	rcall	.-292    	; 0x4c7e <_ZN3RTC14ausgabezeitneuEv>
    4da2:	ce 01       	movw	r24, r28
    4da4:	a5 df       	rcall	.-182    	; 0x4cf0 <_ZN3RTC15ausgabedatumneuEv>
    4da6:	df 91       	pop	r29
    4da8:	cf 91       	pop	r28
    4daa:	08 95       	ret

00004dac <_ZN3RTC8kalenderEv>:
    4dac:	fc 01       	movw	r30, r24
    4dae:	26 89       	ldd	r18, Z+22	; 0x16
    4db0:	32 2f       	mov	r19, r18
    4db2:	3d 7f       	andi	r19, 0xFD	; 253
    4db4:	34 30       	cpi	r19, 0x04	; 4
    4db6:	11 f0       	breq	.+4      	; 0x4dbc <_ZN3RTC8kalenderEv+0x10>
    4db8:	39 30       	cpi	r19, 0x09	; 9
    4dba:	91 f4       	brne	.+36     	; 0x4de0 <_ZN3RTC8kalenderEv+0x34>
    4dbc:	fc 01       	movw	r30, r24
    4dbe:	34 89       	ldd	r19, Z+20	; 0x14
    4dc0:	3f 31       	cpi	r19, 0x1F	; 31
    4dc2:	b0 f1       	brcs	.+108    	; 0x4e30 <_ZN3RTC8kalenderEv+0x84>
    4dc4:	31 e0       	ldi	r19, 0x01	; 1
    4dc6:	34 8b       	std	Z+20, r19	; 0x14
    4dc8:	2f 5f       	subi	r18, 0xFF	; 255
    4dca:	2d 30       	cpi	r18, 0x0D	; 13
    4dcc:	10 f4       	brcc	.+4      	; 0x4dd2 <_ZN3RTC8kalenderEv+0x26>
    4dce:	26 8b       	std	Z+22, r18	; 0x16
    4dd0:	2f c0       	rjmp	.+94     	; 0x4e30 <_ZN3RTC8kalenderEv+0x84>
    4dd2:	21 e0       	ldi	r18, 0x01	; 1
    4dd4:	fc 01       	movw	r30, r24
    4dd6:	26 8b       	std	Z+22, r18	; 0x16
    4dd8:	27 89       	ldd	r18, Z+23	; 0x17
    4dda:	2f 5f       	subi	r18, 0xFF	; 255
    4ddc:	27 8b       	std	Z+23, r18	; 0x17
    4dde:	28 c0       	rjmp	.+80     	; 0x4e30 <_ZN3RTC8kalenderEv+0x84>
    4de0:	22 30       	cpi	r18, 0x02	; 2
    4de2:	a9 f4       	brne	.+42     	; 0x4e0e <_ZN3RTC8kalenderEv+0x62>
    4de4:	fc 01       	movw	r30, r24
    4de6:	27 89       	ldd	r18, Z+23	; 0x17
    4de8:	23 70       	andi	r18, 0x03	; 3
    4dea:	41 f4       	brne	.+16     	; 0x4dfc <_ZN3RTC8kalenderEv+0x50>
    4dec:	24 89       	ldd	r18, Z+20	; 0x14
    4dee:	2e 31       	cpi	r18, 0x1E	; 30
    4df0:	f8 f0       	brcs	.+62     	; 0x4e30 <_ZN3RTC8kalenderEv+0x84>
    4df2:	21 e0       	ldi	r18, 0x01	; 1
    4df4:	24 8b       	std	Z+20, r18	; 0x14
    4df6:	23 e0       	ldi	r18, 0x03	; 3
    4df8:	26 8b       	std	Z+22, r18	; 0x16
    4dfa:	1a c0       	rjmp	.+52     	; 0x4e30 <_ZN3RTC8kalenderEv+0x84>
    4dfc:	fc 01       	movw	r30, r24
    4dfe:	24 89       	ldd	r18, Z+20	; 0x14
    4e00:	2d 31       	cpi	r18, 0x1D	; 29
    4e02:	b0 f0       	brcs	.+44     	; 0x4e30 <_ZN3RTC8kalenderEv+0x84>
    4e04:	21 e0       	ldi	r18, 0x01	; 1
    4e06:	24 8b       	std	Z+20, r18	; 0x14
    4e08:	23 e0       	ldi	r18, 0x03	; 3
    4e0a:	26 8b       	std	Z+22, r18	; 0x16
    4e0c:	11 c0       	rjmp	.+34     	; 0x4e30 <_ZN3RTC8kalenderEv+0x84>
    4e0e:	fc 01       	movw	r30, r24
    4e10:	34 89       	ldd	r19, Z+20	; 0x14
    4e12:	30 32       	cpi	r19, 0x20	; 32
    4e14:	68 f0       	brcs	.+26     	; 0x4e30 <_ZN3RTC8kalenderEv+0x84>
    4e16:	31 e0       	ldi	r19, 0x01	; 1
    4e18:	34 8b       	std	Z+20, r19	; 0x14
    4e1a:	2f 5f       	subi	r18, 0xFF	; 255
    4e1c:	2d 30       	cpi	r18, 0x0D	; 13
    4e1e:	10 f4       	brcc	.+4      	; 0x4e24 <_ZN3RTC8kalenderEv+0x78>
    4e20:	26 8b       	std	Z+22, r18	; 0x16
    4e22:	06 c0       	rjmp	.+12     	; 0x4e30 <_ZN3RTC8kalenderEv+0x84>
    4e24:	21 e0       	ldi	r18, 0x01	; 1
    4e26:	fc 01       	movw	r30, r24
    4e28:	26 8b       	std	Z+22, r18	; 0x16
    4e2a:	27 89       	ldd	r18, Z+23	; 0x17
    4e2c:	2f 5f       	subi	r18, 0xFF	; 255
    4e2e:	27 8b       	std	Z+23, r18	; 0x17
    4e30:	5f cf       	rjmp	.-322    	; 0x4cf0 <_ZN3RTC15ausgabedatumneuEv>
    4e32:	08 95       	ret

00004e34 <_ZN3RTC4zeitEv>:

uint8_t RTC::zeit(){
    4e34:	cf 93       	push	r28
    4e36:	df 93       	push	r29
    4e38:	ec 01       	movw	r28, r24
	//Sekunden++; sitzt im Vektor um Taster besser entprellen zu koennen
	if (Sekunden >= 60 && Sekunden <=200){
    4e3a:	8a 89       	ldd	r24, Y+18	; 0x12
    4e3c:	8c 53       	subi	r24, 0x3C	; 60
    4e3e:	8d 38       	cpi	r24, 0x8D	; 141
    4e40:	c0 f4       	brcc	.+48     	; 0x4e72 <_ZN3RTC4zeitEv+0x3e>
		Sekunden = 0;
    4e42:	1a 8a       	std	Y+18, r1	; 0x12
		Minuten++;
    4e44:	89 89       	ldd	r24, Y+17	; 0x11
    4e46:	8f 5f       	subi	r24, 0xFF	; 255
    4e48:	89 8b       	std	Y+17, r24	; 0x11
		interupts |= (1<<minuteninterupt);
    4e4a:	98 8d       	ldd	r25, Y+24	; 0x18
    4e4c:	94 60       	ori	r25, 0x04	; 4
    4e4e:	98 8f       	std	Y+24, r25	; 0x18
		if(Minuten >= 60){
    4e50:	8c 33       	cpi	r24, 0x3C	; 60
    4e52:	68 f0       	brcs	.+26     	; 0x4e6e <_ZN3RTC4zeitEv+0x3a>
			Minuten = 0;
    4e54:	19 8a       	std	Y+17, r1	; 0x11
			Stunden++;
    4e56:	88 89       	ldd	r24, Y+16	; 0x10
    4e58:	8f 5f       	subi	r24, 0xFF	; 255
			if(Stunden >= 24){
    4e5a:	88 31       	cpi	r24, 0x18	; 24
    4e5c:	10 f4       	brcc	.+4      	; 0x4e62 <_ZN3RTC4zeitEv+0x2e>
		Sekunden = 0;
		Minuten++;
		interupts |= (1<<minuteninterupt);
		if(Minuten >= 60){
			Minuten = 0;
			Stunden++;
    4e5e:	88 8b       	std	Y+16, r24	; 0x10
    4e60:	06 c0       	rjmp	.+12     	; 0x4e6e <_ZN3RTC4zeitEv+0x3a>
			if(Stunden >= 24){
				Stunden = 0;
    4e62:	18 8a       	std	Y+16, r1	; 0x10
				Tag++;
    4e64:	8c 89       	ldd	r24, Y+20	; 0x14
    4e66:	8f 5f       	subi	r24, 0xFF	; 255
    4e68:	8c 8b       	std	Y+20, r24	; 0x14
				kalender();
    4e6a:	ce 01       	movw	r24, r28
    4e6c:	9f df       	rcall	.-194    	; 0x4dac <_ZN3RTC8kalenderEv>
			}
		}
		Wecker();
    4e6e:	ce 01       	movw	r24, r28
    4e70:	f5 de       	rcall	.-534    	; 0x4c5c <_ZN3RTC6WeckerEv>
	}
	ausgabezeitneu();
    4e72:	ce 01       	movw	r24, r28
    4e74:	04 df       	rcall	.-504    	; 0x4c7e <_ZN3RTC14ausgabezeitneuEv>
	return 0;
}
    4e76:	80 e0       	ldi	r24, 0x00	; 0
    4e78:	df 91       	pop	r29
    4e7a:	cf 91       	pop	r28
    4e7c:	08 95       	ret

00004e7e <_ZN3RTC10dummyeinstEv>:
	msg_dat[4]='0'+Monat%10;
	msg_dat[6]='0'+Jahr/10;
	msg_dat[7]='0'+Jahr%10;
}

void RTC::dummyeinst(){
    4e7e:	cf 93       	push	r28
    4e80:	df 93       	push	r29
    4e82:	ec 01       	movw	r28, r24
	Stunden=10;
    4e84:	8a e0       	ldi	r24, 0x0A	; 10
    4e86:	88 8b       	std	Y+16, r24	; 0x10
	Minuten=30;
    4e88:	8e e1       	ldi	r24, 0x1E	; 30
    4e8a:	89 8b       	std	Y+17, r24	; 0x11
	Tag=7;
    4e8c:	87 e0       	ldi	r24, 0x07	; 7
    4e8e:	8c 8b       	std	Y+20, r24	; 0x14
	Monat=9;
    4e90:	89 e0       	ldi	r24, 0x09	; 9
    4e92:	8e 8b       	std	Y+22, r24	; 0x16
	Jahr=15;
    4e94:	8f e0       	ldi	r24, 0x0F	; 15
    4e96:	8f 8b       	std	Y+23, r24	; 0x17
	ausgabedatumneu();
    4e98:	ce 01       	movw	r24, r28
    4e9a:	2a df       	rcall	.-428    	; 0x4cf0 <_ZN3RTC15ausgabedatumneuEv>
	ausgabezeitneu();
    4e9c:	ce 01       	movw	r24, r28
    4e9e:	ef de       	rcall	.-546    	; 0x4c7e <_ZN3RTC14ausgabezeitneuEv>
}
    4ea0:	df 91       	pop	r29
    4ea2:	cf 91       	pop	r28
    4ea4:	08 95       	ret

00004ea6 <_ZN3RTC8RTCstartEv>:

void RTC::RTCstart(){
    4ea6:	fc 01       	movw	r30, r24
	//Einstellungen des Ausgabebuffers
	msg_uhr[0]='0';
    4ea8:	80 e3       	ldi	r24, 0x30	; 48
    4eaa:	80 83       	st	Z, r24
	msg_uhr[1]='0';
    4eac:	81 83       	std	Z+1, r24	; 0x01
	msg_uhr[2]=':';
    4eae:	9a e3       	ldi	r25, 0x3A	; 58
    4eb0:	92 83       	std	Z+2, r25	; 0x02
	msg_uhr[3]='0';
    4eb2:	83 83       	std	Z+3, r24	; 0x03
	msg_uhr[4]='0';
    4eb4:	84 83       	std	Z+4, r24	; 0x04
	msg_uhr[5]=':';
    4eb6:	95 83       	std	Z+5, r25	; 0x05
	msg_uhr[6]='0';
    4eb8:	86 83       	std	Z+6, r24	; 0x06
	msg_uhr[7]='0';
    4eba:	87 83       	std	Z+7, r24	; 0x07
	//Timer2 als 1ms Timer fuer die RTC
	//asynchron mit 32.768 kHz (noch synchrom)
	TCNT2 = TIMER2RTCTIME;
    4ebc:	10 92 b2 00 	sts	0x00B2, r1
	ASSR |= (1<<AS2);
    4ec0:	e6 eb       	ldi	r30, 0xB6	; 182
    4ec2:	f0 e0       	ldi	r31, 0x00	; 0
    4ec4:	80 81       	ld	r24, Z
    4ec6:	80 62       	ori	r24, 0x20	; 32
    4ec8:	80 83       	st	Z, r24
	TIMSK2 = (1<<TOIE2);
    4eca:	81 e0       	ldi	r24, 0x01	; 1
    4ecc:	80 93 70 00 	sts	0x0070, r24
	TCCR2B = (1<<CS22) | (1<<CS20);		//Vorteiler 256
    4ed0:	85 e0       	ldi	r24, 0x05	; 5
    4ed2:	80 93 b1 00 	sts	0x00B1, r24
    4ed6:	08 95       	ret

00004ed8 <_ZN3RTC7RTCstopEv>:
}

void RTC::RTCstop(){
	TCCR2B &= ~((1<<CS22) | (1<<CS21));
    4ed8:	e1 eb       	ldi	r30, 0xB1	; 177
    4eda:	f0 e0       	ldi	r31, 0x00	; 0
    4edc:	80 81       	ld	r24, Z
    4ede:	89 7f       	andi	r24, 0xF9	; 249
    4ee0:	80 83       	st	Z, r24
    4ee2:	08 95       	ret

00004ee4 <_ZN3RTC5timerEv>:
}

uint8_t RTC::timer(){
    4ee4:	fc 01       	movw	r30, r24
	if (Sekunden>60)
    4ee6:	82 89       	ldd	r24, Z+18	; 0x12
    4ee8:	8d 33       	cpi	r24, 0x3D	; 61
    4eea:	b8 f0       	brcs	.+46     	; 0x4f1a <_ZN3RTC5timerEv+0x36>
	{
		Sekunden=59;
    4eec:	8b e3       	ldi	r24, 0x3B	; 59
    4eee:	82 8b       	std	Z+18, r24	; 0x12
		Minuten--;
    4ef0:	81 89       	ldd	r24, Z+17	; 0x11
    4ef2:	81 50       	subi	r24, 0x01	; 1
		if (Minuten>60)
    4ef4:	8d 33       	cpi	r24, 0x3D	; 61
    4ef6:	18 f4       	brcc	.+6      	; 0x4efe <_ZN3RTC5timerEv+0x1a>

uint8_t RTC::timer(){
	if (Sekunden>60)
	{
		Sekunden=59;
		Minuten--;
    4ef8:	81 8b       	std	Z+17, r24	; 0x11
				Sekunden=0;
				return 1;
			}
		}
	}
	return 0;
    4efa:	80 e0       	ldi	r24, 0x00	; 0
    4efc:	08 95       	ret
	{
		Sekunden=59;
		Minuten--;
		if (Minuten>60)
		{
			Minuten=59;
    4efe:	8b e3       	ldi	r24, 0x3B	; 59
    4f00:	81 8b       	std	Z+17, r24	; 0x11
			Stunden--;
    4f02:	80 89       	ldd	r24, Z+16	; 0x10
    4f04:	81 50       	subi	r24, 0x01	; 1
			if (Stunden>24)
    4f06:	89 31       	cpi	r24, 0x19	; 25
    4f08:	18 f4       	brcc	.+6      	; 0x4f10 <_ZN3RTC5timerEv+0x2c>
		Sekunden=59;
		Minuten--;
		if (Minuten>60)
		{
			Minuten=59;
			Stunden--;
    4f0a:	80 8b       	std	Z+16, r24	; 0x10
				Sekunden=0;
				return 1;
			}
		}
	}
	return 0;
    4f0c:	80 e0       	ldi	r24, 0x00	; 0
    4f0e:	08 95       	ret
		{
			Minuten=59;
			Stunden--;
			if (Stunden>24)
			{
				Stunden=0;
    4f10:	10 8a       	std	Z+16, r1	; 0x10
				Minuten=0;
    4f12:	11 8a       	std	Z+17, r1	; 0x11
				Sekunden=0;
    4f14:	12 8a       	std	Z+18, r1	; 0x12
				return 1;
    4f16:	81 e0       	ldi	r24, 0x01	; 1
    4f18:	08 95       	ret
			}
		}
	}
	return 0;
    4f1a:	80 e0       	ldi	r24, 0x00	; 0
}
    4f1c:	08 95       	ret

00004f1e <__subsf3>:
    4f1e:	50 58       	subi	r21, 0x80	; 128

00004f20 <__addsf3>:
    4f20:	bb 27       	eor	r27, r27
    4f22:	aa 27       	eor	r26, r26
    4f24:	0e d0       	rcall	.+28     	; 0x4f42 <__addsf3x>
    4f26:	27 c2       	rjmp	.+1102   	; 0x5376 <__fp_round>
    4f28:	f0 d1       	rcall	.+992    	; 0x530a <__fp_pscA>
    4f2a:	30 f0       	brcs	.+12     	; 0x4f38 <__addsf3+0x18>
    4f2c:	f5 d1       	rcall	.+1002   	; 0x5318 <__fp_pscB>
    4f2e:	20 f0       	brcs	.+8      	; 0x4f38 <__addsf3+0x18>
    4f30:	31 f4       	brne	.+12     	; 0x4f3e <__addsf3+0x1e>
    4f32:	9f 3f       	cpi	r25, 0xFF	; 255
    4f34:	11 f4       	brne	.+4      	; 0x4f3a <__addsf3+0x1a>
    4f36:	1e f4       	brtc	.+6      	; 0x4f3e <__addsf3+0x1e>
    4f38:	c0 c1       	rjmp	.+896    	; 0x52ba <__fp_nan>
    4f3a:	0e f4       	brtc	.+2      	; 0x4f3e <__addsf3+0x1e>
    4f3c:	e0 95       	com	r30
    4f3e:	e7 fb       	bst	r30, 7
    4f40:	b6 c1       	rjmp	.+876    	; 0x52ae <__fp_inf>

00004f42 <__addsf3x>:
    4f42:	e9 2f       	mov	r30, r25
    4f44:	3a d2       	rcall	.+1140   	; 0x53ba <__fp_split3>
    4f46:	80 f3       	brcs	.-32     	; 0x4f28 <__addsf3+0x8>
    4f48:	ba 17       	cp	r27, r26
    4f4a:	62 07       	cpc	r22, r18
    4f4c:	73 07       	cpc	r23, r19
    4f4e:	84 07       	cpc	r24, r20
    4f50:	95 07       	cpc	r25, r21
    4f52:	18 f0       	brcs	.+6      	; 0x4f5a <__addsf3x+0x18>
    4f54:	71 f4       	brne	.+28     	; 0x4f72 <__addsf3x+0x30>
    4f56:	9e f5       	brtc	.+102    	; 0x4fbe <__addsf3x+0x7c>
    4f58:	52 c2       	rjmp	.+1188   	; 0x53fe <__fp_zero>
    4f5a:	0e f4       	brtc	.+2      	; 0x4f5e <__addsf3x+0x1c>
    4f5c:	e0 95       	com	r30
    4f5e:	0b 2e       	mov	r0, r27
    4f60:	ba 2f       	mov	r27, r26
    4f62:	a0 2d       	mov	r26, r0
    4f64:	0b 01       	movw	r0, r22
    4f66:	b9 01       	movw	r22, r18
    4f68:	90 01       	movw	r18, r0
    4f6a:	0c 01       	movw	r0, r24
    4f6c:	ca 01       	movw	r24, r20
    4f6e:	a0 01       	movw	r20, r0
    4f70:	11 24       	eor	r1, r1
    4f72:	ff 27       	eor	r31, r31
    4f74:	59 1b       	sub	r21, r25
    4f76:	99 f0       	breq	.+38     	; 0x4f9e <__addsf3x+0x5c>
    4f78:	59 3f       	cpi	r21, 0xF9	; 249
    4f7a:	50 f4       	brcc	.+20     	; 0x4f90 <__addsf3x+0x4e>
    4f7c:	50 3e       	cpi	r21, 0xE0	; 224
    4f7e:	68 f1       	brcs	.+90     	; 0x4fda <__addsf3x+0x98>
    4f80:	1a 16       	cp	r1, r26
    4f82:	f0 40       	sbci	r31, 0x00	; 0
    4f84:	a2 2f       	mov	r26, r18
    4f86:	23 2f       	mov	r18, r19
    4f88:	34 2f       	mov	r19, r20
    4f8a:	44 27       	eor	r20, r20
    4f8c:	58 5f       	subi	r21, 0xF8	; 248
    4f8e:	f3 cf       	rjmp	.-26     	; 0x4f76 <__addsf3x+0x34>
    4f90:	46 95       	lsr	r20
    4f92:	37 95       	ror	r19
    4f94:	27 95       	ror	r18
    4f96:	a7 95       	ror	r26
    4f98:	f0 40       	sbci	r31, 0x00	; 0
    4f9a:	53 95       	inc	r21
    4f9c:	c9 f7       	brne	.-14     	; 0x4f90 <__addsf3x+0x4e>
    4f9e:	7e f4       	brtc	.+30     	; 0x4fbe <__addsf3x+0x7c>
    4fa0:	1f 16       	cp	r1, r31
    4fa2:	ba 0b       	sbc	r27, r26
    4fa4:	62 0b       	sbc	r22, r18
    4fa6:	73 0b       	sbc	r23, r19
    4fa8:	84 0b       	sbc	r24, r20
    4faa:	ba f0       	brmi	.+46     	; 0x4fda <__addsf3x+0x98>
    4fac:	91 50       	subi	r25, 0x01	; 1
    4fae:	a1 f0       	breq	.+40     	; 0x4fd8 <__addsf3x+0x96>
    4fb0:	ff 0f       	add	r31, r31
    4fb2:	bb 1f       	adc	r27, r27
    4fb4:	66 1f       	adc	r22, r22
    4fb6:	77 1f       	adc	r23, r23
    4fb8:	88 1f       	adc	r24, r24
    4fba:	c2 f7       	brpl	.-16     	; 0x4fac <__addsf3x+0x6a>
    4fbc:	0e c0       	rjmp	.+28     	; 0x4fda <__addsf3x+0x98>
    4fbe:	ba 0f       	add	r27, r26
    4fc0:	62 1f       	adc	r22, r18
    4fc2:	73 1f       	adc	r23, r19
    4fc4:	84 1f       	adc	r24, r20
    4fc6:	48 f4       	brcc	.+18     	; 0x4fda <__addsf3x+0x98>
    4fc8:	87 95       	ror	r24
    4fca:	77 95       	ror	r23
    4fcc:	67 95       	ror	r22
    4fce:	b7 95       	ror	r27
    4fd0:	f7 95       	ror	r31
    4fd2:	9e 3f       	cpi	r25, 0xFE	; 254
    4fd4:	08 f0       	brcs	.+2      	; 0x4fd8 <__addsf3x+0x96>
    4fd6:	b3 cf       	rjmp	.-154    	; 0x4f3e <__addsf3+0x1e>
    4fd8:	93 95       	inc	r25
    4fda:	88 0f       	add	r24, r24
    4fdc:	08 f0       	brcs	.+2      	; 0x4fe0 <__addsf3x+0x9e>
    4fde:	99 27       	eor	r25, r25
    4fe0:	ee 0f       	add	r30, r30
    4fe2:	97 95       	ror	r25
    4fe4:	87 95       	ror	r24
    4fe6:	08 95       	ret
    4fe8:	90 d1       	rcall	.+800    	; 0x530a <__fp_pscA>
    4fea:	58 f0       	brcs	.+22     	; 0x5002 <__addsf3x+0xc0>
    4fec:	80 e8       	ldi	r24, 0x80	; 128
    4fee:	91 e0       	ldi	r25, 0x01	; 1
    4ff0:	09 f4       	brne	.+2      	; 0x4ff4 <__addsf3x+0xb2>
    4ff2:	9e ef       	ldi	r25, 0xFE	; 254
    4ff4:	91 d1       	rcall	.+802    	; 0x5318 <__fp_pscB>
    4ff6:	28 f0       	brcs	.+10     	; 0x5002 <__addsf3x+0xc0>
    4ff8:	40 e8       	ldi	r20, 0x80	; 128
    4ffa:	51 e0       	ldi	r21, 0x01	; 1
    4ffc:	59 f4       	brne	.+22     	; 0x5014 <atan2+0xe>
    4ffe:	5e ef       	ldi	r21, 0xFE	; 254
    5000:	09 c0       	rjmp	.+18     	; 0x5014 <atan2+0xe>
    5002:	5b c1       	rjmp	.+694    	; 0x52ba <__fp_nan>
    5004:	fc c1       	rjmp	.+1016   	; 0x53fe <__fp_zero>

00005006 <atan2>:
    5006:	e9 2f       	mov	r30, r25
    5008:	e0 78       	andi	r30, 0x80	; 128
    500a:	d7 d1       	rcall	.+942    	; 0x53ba <__fp_split3>
    500c:	68 f3       	brcs	.-38     	; 0x4fe8 <__addsf3x+0xa6>
    500e:	09 2e       	mov	r0, r25
    5010:	05 2a       	or	r0, r21
    5012:	c1 f3       	breq	.-16     	; 0x5004 <__addsf3x+0xc2>
    5014:	26 17       	cp	r18, r22
    5016:	37 07       	cpc	r19, r23
    5018:	48 07       	cpc	r20, r24
    501a:	59 07       	cpc	r21, r25
    501c:	38 f0       	brcs	.+14     	; 0x502c <atan2+0x26>
    501e:	0e 2e       	mov	r0, r30
    5020:	07 f8       	bld	r0, 7
    5022:	e0 25       	eor	r30, r0
    5024:	69 f0       	breq	.+26     	; 0x5040 <atan2+0x3a>
    5026:	e0 25       	eor	r30, r0
    5028:	e0 64       	ori	r30, 0x40	; 64
    502a:	0a c0       	rjmp	.+20     	; 0x5040 <atan2+0x3a>
    502c:	ef 63       	ori	r30, 0x3F	; 63
    502e:	07 f8       	bld	r0, 7
    5030:	00 94       	com	r0
    5032:	07 fa       	bst	r0, 7
    5034:	db 01       	movw	r26, r22
    5036:	b9 01       	movw	r22, r18
    5038:	9d 01       	movw	r18, r26
    503a:	dc 01       	movw	r26, r24
    503c:	ca 01       	movw	r24, r20
    503e:	ad 01       	movw	r20, r26
    5040:	ef 93       	push	r30
    5042:	4a d0       	rcall	.+148    	; 0x50d8 <__divsf3_pse>
    5044:	98 d1       	rcall	.+816    	; 0x5376 <__fp_round>
    5046:	0a d0       	rcall	.+20     	; 0x505c <atan>
    5048:	5f 91       	pop	r21
    504a:	55 23       	and	r21, r21
    504c:	31 f0       	breq	.+12     	; 0x505a <atan2+0x54>
    504e:	2b ed       	ldi	r18, 0xDB	; 219
    5050:	3f e0       	ldi	r19, 0x0F	; 15
    5052:	49 e4       	ldi	r20, 0x49	; 73
    5054:	50 fd       	sbrc	r21, 0
    5056:	49 ec       	ldi	r20, 0xC9	; 201
    5058:	63 cf       	rjmp	.-314    	; 0x4f20 <__addsf3>
    505a:	08 95       	ret

0000505c <atan>:
    505c:	df 93       	push	r29
    505e:	dd 27       	eor	r29, r29
    5060:	b9 2f       	mov	r27, r25
    5062:	bf 77       	andi	r27, 0x7F	; 127
    5064:	40 e8       	ldi	r20, 0x80	; 128
    5066:	5f e3       	ldi	r21, 0x3F	; 63
    5068:	16 16       	cp	r1, r22
    506a:	17 06       	cpc	r1, r23
    506c:	48 07       	cpc	r20, r24
    506e:	5b 07       	cpc	r21, r27
    5070:	10 f4       	brcc	.+4      	; 0x5076 <atan+0x1a>
    5072:	d9 2f       	mov	r29, r25
    5074:	cf d1       	rcall	.+926    	; 0x5414 <inverse>
    5076:	9f 93       	push	r25
    5078:	8f 93       	push	r24
    507a:	7f 93       	push	r23
    507c:	6f 93       	push	r22
    507e:	7f d2       	rcall	.+1278   	; 0x557e <square>
    5080:	ee eb       	ldi	r30, 0xBE	; 190
    5082:	f0 e0       	ldi	r31, 0x00	; 0
    5084:	1d d1       	rcall	.+570    	; 0x52c0 <__fp_powser>
    5086:	77 d1       	rcall	.+750    	; 0x5376 <__fp_round>
    5088:	2f 91       	pop	r18
    508a:	3f 91       	pop	r19
    508c:	4f 91       	pop	r20
    508e:	5f 91       	pop	r21
    5090:	19 d2       	rcall	.+1074   	; 0x54c4 <__mulsf3x>
    5092:	dd 23       	and	r29, r29
    5094:	49 f0       	breq	.+18     	; 0x50a8 <atan+0x4c>
    5096:	90 58       	subi	r25, 0x80	; 128
    5098:	a2 ea       	ldi	r26, 0xA2	; 162
    509a:	2a ed       	ldi	r18, 0xDA	; 218
    509c:	3f e0       	ldi	r19, 0x0F	; 15
    509e:	49 ec       	ldi	r20, 0xC9	; 201
    50a0:	5f e3       	ldi	r21, 0x3F	; 63
    50a2:	d0 78       	andi	r29, 0x80	; 128
    50a4:	5d 27       	eor	r21, r29
    50a6:	4d df       	rcall	.-358    	; 0x4f42 <__addsf3x>
    50a8:	df 91       	pop	r29
    50aa:	65 c1       	rjmp	.+714    	; 0x5376 <__fp_round>

000050ac <__cmpsf2>:
    50ac:	dc d0       	rcall	.+440    	; 0x5266 <__fp_cmp>
    50ae:	08 f4       	brcc	.+2      	; 0x50b2 <__cmpsf2+0x6>
    50b0:	81 e0       	ldi	r24, 0x01	; 1
    50b2:	08 95       	ret

000050b4 <cos>:
    50b4:	39 d1       	rcall	.+626    	; 0x5328 <__fp_rempio2>
    50b6:	e3 95       	inc	r30
    50b8:	6f c1       	rjmp	.+734    	; 0x5398 <__fp_sinus>

000050ba <__divsf3>:
    50ba:	0c d0       	rcall	.+24     	; 0x50d4 <__divsf3x>
    50bc:	5c c1       	rjmp	.+696    	; 0x5376 <__fp_round>
    50be:	2c d1       	rcall	.+600    	; 0x5318 <__fp_pscB>
    50c0:	40 f0       	brcs	.+16     	; 0x50d2 <__divsf3+0x18>
    50c2:	23 d1       	rcall	.+582    	; 0x530a <__fp_pscA>
    50c4:	30 f0       	brcs	.+12     	; 0x50d2 <__divsf3+0x18>
    50c6:	21 f4       	brne	.+8      	; 0x50d0 <__divsf3+0x16>
    50c8:	5f 3f       	cpi	r21, 0xFF	; 255
    50ca:	19 f0       	breq	.+6      	; 0x50d2 <__divsf3+0x18>
    50cc:	f0 c0       	rjmp	.+480    	; 0x52ae <__fp_inf>
    50ce:	51 11       	cpse	r21, r1
    50d0:	97 c1       	rjmp	.+814    	; 0x5400 <__fp_szero>
    50d2:	f3 c0       	rjmp	.+486    	; 0x52ba <__fp_nan>

000050d4 <__divsf3x>:
    50d4:	72 d1       	rcall	.+740    	; 0x53ba <__fp_split3>
    50d6:	98 f3       	brcs	.-26     	; 0x50be <__divsf3+0x4>

000050d8 <__divsf3_pse>:
    50d8:	99 23       	and	r25, r25
    50da:	c9 f3       	breq	.-14     	; 0x50ce <__divsf3+0x14>
    50dc:	55 23       	and	r21, r21
    50de:	b1 f3       	breq	.-20     	; 0x50cc <__divsf3+0x12>
    50e0:	95 1b       	sub	r25, r21
    50e2:	55 0b       	sbc	r21, r21
    50e4:	bb 27       	eor	r27, r27
    50e6:	aa 27       	eor	r26, r26
    50e8:	62 17       	cp	r22, r18
    50ea:	73 07       	cpc	r23, r19
    50ec:	84 07       	cpc	r24, r20
    50ee:	38 f0       	brcs	.+14     	; 0x50fe <__divsf3_pse+0x26>
    50f0:	9f 5f       	subi	r25, 0xFF	; 255
    50f2:	5f 4f       	sbci	r21, 0xFF	; 255
    50f4:	22 0f       	add	r18, r18
    50f6:	33 1f       	adc	r19, r19
    50f8:	44 1f       	adc	r20, r20
    50fa:	aa 1f       	adc	r26, r26
    50fc:	a9 f3       	breq	.-22     	; 0x50e8 <__divsf3_pse+0x10>
    50fe:	33 d0       	rcall	.+102    	; 0x5166 <__divsf3_pse+0x8e>
    5100:	0e 2e       	mov	r0, r30
    5102:	3a f0       	brmi	.+14     	; 0x5112 <__divsf3_pse+0x3a>
    5104:	e0 e8       	ldi	r30, 0x80	; 128
    5106:	30 d0       	rcall	.+96     	; 0x5168 <__divsf3_pse+0x90>
    5108:	91 50       	subi	r25, 0x01	; 1
    510a:	50 40       	sbci	r21, 0x00	; 0
    510c:	e6 95       	lsr	r30
    510e:	00 1c       	adc	r0, r0
    5110:	ca f7       	brpl	.-14     	; 0x5104 <__divsf3_pse+0x2c>
    5112:	29 d0       	rcall	.+82     	; 0x5166 <__divsf3_pse+0x8e>
    5114:	fe 2f       	mov	r31, r30
    5116:	27 d0       	rcall	.+78     	; 0x5166 <__divsf3_pse+0x8e>
    5118:	66 0f       	add	r22, r22
    511a:	77 1f       	adc	r23, r23
    511c:	88 1f       	adc	r24, r24
    511e:	bb 1f       	adc	r27, r27
    5120:	26 17       	cp	r18, r22
    5122:	37 07       	cpc	r19, r23
    5124:	48 07       	cpc	r20, r24
    5126:	ab 07       	cpc	r26, r27
    5128:	b0 e8       	ldi	r27, 0x80	; 128
    512a:	09 f0       	breq	.+2      	; 0x512e <__divsf3_pse+0x56>
    512c:	bb 0b       	sbc	r27, r27
    512e:	80 2d       	mov	r24, r0
    5130:	bf 01       	movw	r22, r30
    5132:	ff 27       	eor	r31, r31
    5134:	93 58       	subi	r25, 0x83	; 131
    5136:	5f 4f       	sbci	r21, 0xFF	; 255
    5138:	2a f0       	brmi	.+10     	; 0x5144 <__divsf3_pse+0x6c>
    513a:	9e 3f       	cpi	r25, 0xFE	; 254
    513c:	51 05       	cpc	r21, r1
    513e:	68 f0       	brcs	.+26     	; 0x515a <__divsf3_pse+0x82>
    5140:	b6 c0       	rjmp	.+364    	; 0x52ae <__fp_inf>
    5142:	5e c1       	rjmp	.+700    	; 0x5400 <__fp_szero>
    5144:	5f 3f       	cpi	r21, 0xFF	; 255
    5146:	ec f3       	brlt	.-6      	; 0x5142 <__divsf3_pse+0x6a>
    5148:	98 3e       	cpi	r25, 0xE8	; 232
    514a:	dc f3       	brlt	.-10     	; 0x5142 <__divsf3_pse+0x6a>
    514c:	86 95       	lsr	r24
    514e:	77 95       	ror	r23
    5150:	67 95       	ror	r22
    5152:	b7 95       	ror	r27
    5154:	f7 95       	ror	r31
    5156:	9f 5f       	subi	r25, 0xFF	; 255
    5158:	c9 f7       	brne	.-14     	; 0x514c <__divsf3_pse+0x74>
    515a:	88 0f       	add	r24, r24
    515c:	91 1d       	adc	r25, r1
    515e:	96 95       	lsr	r25
    5160:	87 95       	ror	r24
    5162:	97 f9       	bld	r25, 7
    5164:	08 95       	ret
    5166:	e1 e0       	ldi	r30, 0x01	; 1
    5168:	66 0f       	add	r22, r22
    516a:	77 1f       	adc	r23, r23
    516c:	88 1f       	adc	r24, r24
    516e:	bb 1f       	adc	r27, r27
    5170:	62 17       	cp	r22, r18
    5172:	73 07       	cpc	r23, r19
    5174:	84 07       	cpc	r24, r20
    5176:	ba 07       	cpc	r27, r26
    5178:	20 f0       	brcs	.+8      	; 0x5182 <__divsf3_pse+0xaa>
    517a:	62 1b       	sub	r22, r18
    517c:	73 0b       	sbc	r23, r19
    517e:	84 0b       	sbc	r24, r20
    5180:	ba 0b       	sbc	r27, r26
    5182:	ee 1f       	adc	r30, r30
    5184:	88 f7       	brcc	.-30     	; 0x5168 <__divsf3_pse+0x90>
    5186:	e0 95       	com	r30
    5188:	08 95       	ret

0000518a <__fixsfsi>:
    518a:	04 d0       	rcall	.+8      	; 0x5194 <__fixunssfsi>
    518c:	68 94       	set
    518e:	b1 11       	cpse	r27, r1
    5190:	37 c1       	rjmp	.+622    	; 0x5400 <__fp_szero>
    5192:	08 95       	ret

00005194 <__fixunssfsi>:
    5194:	1a d1       	rcall	.+564    	; 0x53ca <__fp_splitA>
    5196:	88 f0       	brcs	.+34     	; 0x51ba <__fixunssfsi+0x26>
    5198:	9f 57       	subi	r25, 0x7F	; 127
    519a:	90 f0       	brcs	.+36     	; 0x51c0 <__fixunssfsi+0x2c>
    519c:	b9 2f       	mov	r27, r25
    519e:	99 27       	eor	r25, r25
    51a0:	b7 51       	subi	r27, 0x17	; 23
    51a2:	a0 f0       	brcs	.+40     	; 0x51cc <__fixunssfsi+0x38>
    51a4:	d1 f0       	breq	.+52     	; 0x51da <__fixunssfsi+0x46>
    51a6:	66 0f       	add	r22, r22
    51a8:	77 1f       	adc	r23, r23
    51aa:	88 1f       	adc	r24, r24
    51ac:	99 1f       	adc	r25, r25
    51ae:	1a f0       	brmi	.+6      	; 0x51b6 <__fixunssfsi+0x22>
    51b0:	ba 95       	dec	r27
    51b2:	c9 f7       	brne	.-14     	; 0x51a6 <__fixunssfsi+0x12>
    51b4:	12 c0       	rjmp	.+36     	; 0x51da <__fixunssfsi+0x46>
    51b6:	b1 30       	cpi	r27, 0x01	; 1
    51b8:	81 f0       	breq	.+32     	; 0x51da <__fixunssfsi+0x46>
    51ba:	21 d1       	rcall	.+578    	; 0x53fe <__fp_zero>
    51bc:	b1 e0       	ldi	r27, 0x01	; 1
    51be:	08 95       	ret
    51c0:	1e c1       	rjmp	.+572    	; 0x53fe <__fp_zero>
    51c2:	67 2f       	mov	r22, r23
    51c4:	78 2f       	mov	r23, r24
    51c6:	88 27       	eor	r24, r24
    51c8:	b8 5f       	subi	r27, 0xF8	; 248
    51ca:	39 f0       	breq	.+14     	; 0x51da <__fixunssfsi+0x46>
    51cc:	b9 3f       	cpi	r27, 0xF9	; 249
    51ce:	cc f3       	brlt	.-14     	; 0x51c2 <__fixunssfsi+0x2e>
    51d0:	86 95       	lsr	r24
    51d2:	77 95       	ror	r23
    51d4:	67 95       	ror	r22
    51d6:	b3 95       	inc	r27
    51d8:	d9 f7       	brne	.-10     	; 0x51d0 <__fixunssfsi+0x3c>
    51da:	3e f4       	brtc	.+14     	; 0x51ea <__fixunssfsi+0x56>
    51dc:	90 95       	com	r25
    51de:	80 95       	com	r24
    51e0:	70 95       	com	r23
    51e2:	61 95       	neg	r22
    51e4:	7f 4f       	sbci	r23, 0xFF	; 255
    51e6:	8f 4f       	sbci	r24, 0xFF	; 255
    51e8:	9f 4f       	sbci	r25, 0xFF	; 255
    51ea:	08 95       	ret

000051ec <__floatunsisf>:
    51ec:	e8 94       	clt
    51ee:	09 c0       	rjmp	.+18     	; 0x5202 <__floatsisf+0x12>

000051f0 <__floatsisf>:
    51f0:	97 fb       	bst	r25, 7
    51f2:	3e f4       	brtc	.+14     	; 0x5202 <__floatsisf+0x12>
    51f4:	90 95       	com	r25
    51f6:	80 95       	com	r24
    51f8:	70 95       	com	r23
    51fa:	61 95       	neg	r22
    51fc:	7f 4f       	sbci	r23, 0xFF	; 255
    51fe:	8f 4f       	sbci	r24, 0xFF	; 255
    5200:	9f 4f       	sbci	r25, 0xFF	; 255
    5202:	99 23       	and	r25, r25
    5204:	a9 f0       	breq	.+42     	; 0x5230 <__floatsisf+0x40>
    5206:	f9 2f       	mov	r31, r25
    5208:	96 e9       	ldi	r25, 0x96	; 150
    520a:	bb 27       	eor	r27, r27
    520c:	93 95       	inc	r25
    520e:	f6 95       	lsr	r31
    5210:	87 95       	ror	r24
    5212:	77 95       	ror	r23
    5214:	67 95       	ror	r22
    5216:	b7 95       	ror	r27
    5218:	f1 11       	cpse	r31, r1
    521a:	f8 cf       	rjmp	.-16     	; 0x520c <__floatsisf+0x1c>
    521c:	fa f4       	brpl	.+62     	; 0x525c <__floatsisf+0x6c>
    521e:	bb 0f       	add	r27, r27
    5220:	11 f4       	brne	.+4      	; 0x5226 <__floatsisf+0x36>
    5222:	60 ff       	sbrs	r22, 0
    5224:	1b c0       	rjmp	.+54     	; 0x525c <__floatsisf+0x6c>
    5226:	6f 5f       	subi	r22, 0xFF	; 255
    5228:	7f 4f       	sbci	r23, 0xFF	; 255
    522a:	8f 4f       	sbci	r24, 0xFF	; 255
    522c:	9f 4f       	sbci	r25, 0xFF	; 255
    522e:	16 c0       	rjmp	.+44     	; 0x525c <__floatsisf+0x6c>
    5230:	88 23       	and	r24, r24
    5232:	11 f0       	breq	.+4      	; 0x5238 <__floatsisf+0x48>
    5234:	96 e9       	ldi	r25, 0x96	; 150
    5236:	11 c0       	rjmp	.+34     	; 0x525a <__floatsisf+0x6a>
    5238:	77 23       	and	r23, r23
    523a:	21 f0       	breq	.+8      	; 0x5244 <__floatsisf+0x54>
    523c:	9e e8       	ldi	r25, 0x8E	; 142
    523e:	87 2f       	mov	r24, r23
    5240:	76 2f       	mov	r23, r22
    5242:	05 c0       	rjmp	.+10     	; 0x524e <__floatsisf+0x5e>
    5244:	66 23       	and	r22, r22
    5246:	71 f0       	breq	.+28     	; 0x5264 <__floatsisf+0x74>
    5248:	96 e8       	ldi	r25, 0x86	; 134
    524a:	86 2f       	mov	r24, r22
    524c:	70 e0       	ldi	r23, 0x00	; 0
    524e:	60 e0       	ldi	r22, 0x00	; 0
    5250:	2a f0       	brmi	.+10     	; 0x525c <__floatsisf+0x6c>
    5252:	9a 95       	dec	r25
    5254:	66 0f       	add	r22, r22
    5256:	77 1f       	adc	r23, r23
    5258:	88 1f       	adc	r24, r24
    525a:	da f7       	brpl	.-10     	; 0x5252 <__floatsisf+0x62>
    525c:	88 0f       	add	r24, r24
    525e:	96 95       	lsr	r25
    5260:	87 95       	ror	r24
    5262:	97 f9       	bld	r25, 7
    5264:	08 95       	ret

00005266 <__fp_cmp>:
    5266:	99 0f       	add	r25, r25
    5268:	00 08       	sbc	r0, r0
    526a:	55 0f       	add	r21, r21
    526c:	aa 0b       	sbc	r26, r26
    526e:	e0 e8       	ldi	r30, 0x80	; 128
    5270:	fe ef       	ldi	r31, 0xFE	; 254
    5272:	16 16       	cp	r1, r22
    5274:	17 06       	cpc	r1, r23
    5276:	e8 07       	cpc	r30, r24
    5278:	f9 07       	cpc	r31, r25
    527a:	c0 f0       	brcs	.+48     	; 0x52ac <__fp_cmp+0x46>
    527c:	12 16       	cp	r1, r18
    527e:	13 06       	cpc	r1, r19
    5280:	e4 07       	cpc	r30, r20
    5282:	f5 07       	cpc	r31, r21
    5284:	98 f0       	brcs	.+38     	; 0x52ac <__fp_cmp+0x46>
    5286:	62 1b       	sub	r22, r18
    5288:	73 0b       	sbc	r23, r19
    528a:	84 0b       	sbc	r24, r20
    528c:	95 0b       	sbc	r25, r21
    528e:	39 f4       	brne	.+14     	; 0x529e <__fp_cmp+0x38>
    5290:	0a 26       	eor	r0, r26
    5292:	61 f0       	breq	.+24     	; 0x52ac <__fp_cmp+0x46>
    5294:	23 2b       	or	r18, r19
    5296:	24 2b       	or	r18, r20
    5298:	25 2b       	or	r18, r21
    529a:	21 f4       	brne	.+8      	; 0x52a4 <__fp_cmp+0x3e>
    529c:	08 95       	ret
    529e:	0a 26       	eor	r0, r26
    52a0:	09 f4       	brne	.+2      	; 0x52a4 <__fp_cmp+0x3e>
    52a2:	a1 40       	sbci	r26, 0x01	; 1
    52a4:	a6 95       	lsr	r26
    52a6:	8f ef       	ldi	r24, 0xFF	; 255
    52a8:	81 1d       	adc	r24, r1
    52aa:	81 1d       	adc	r24, r1
    52ac:	08 95       	ret

000052ae <__fp_inf>:
    52ae:	97 f9       	bld	r25, 7
    52b0:	9f 67       	ori	r25, 0x7F	; 127
    52b2:	80 e8       	ldi	r24, 0x80	; 128
    52b4:	70 e0       	ldi	r23, 0x00	; 0
    52b6:	60 e0       	ldi	r22, 0x00	; 0
    52b8:	08 95       	ret

000052ba <__fp_nan>:
    52ba:	9f ef       	ldi	r25, 0xFF	; 255
    52bc:	80 ec       	ldi	r24, 0xC0	; 192
    52be:	08 95       	ret

000052c0 <__fp_powser>:
    52c0:	df 93       	push	r29
    52c2:	cf 93       	push	r28
    52c4:	1f 93       	push	r17
    52c6:	0f 93       	push	r16
    52c8:	ff 92       	push	r15
    52ca:	ef 92       	push	r14
    52cc:	df 92       	push	r13
    52ce:	7b 01       	movw	r14, r22
    52d0:	8c 01       	movw	r16, r24
    52d2:	68 94       	set
    52d4:	05 c0       	rjmp	.+10     	; 0x52e0 <__fp_powser+0x20>
    52d6:	da 2e       	mov	r13, r26
    52d8:	ef 01       	movw	r28, r30
    52da:	f4 d0       	rcall	.+488    	; 0x54c4 <__mulsf3x>
    52dc:	fe 01       	movw	r30, r28
    52de:	e8 94       	clt
    52e0:	a5 91       	lpm	r26, Z+
    52e2:	25 91       	lpm	r18, Z+
    52e4:	35 91       	lpm	r19, Z+
    52e6:	45 91       	lpm	r20, Z+
    52e8:	55 91       	lpm	r21, Z+
    52ea:	ae f3       	brts	.-22     	; 0x52d6 <__fp_powser+0x16>
    52ec:	ef 01       	movw	r28, r30
    52ee:	29 de       	rcall	.-942    	; 0x4f42 <__addsf3x>
    52f0:	fe 01       	movw	r30, r28
    52f2:	97 01       	movw	r18, r14
    52f4:	a8 01       	movw	r20, r16
    52f6:	da 94       	dec	r13
    52f8:	79 f7       	brne	.-34     	; 0x52d8 <__fp_powser+0x18>
    52fa:	df 90       	pop	r13
    52fc:	ef 90       	pop	r14
    52fe:	ff 90       	pop	r15
    5300:	0f 91       	pop	r16
    5302:	1f 91       	pop	r17
    5304:	cf 91       	pop	r28
    5306:	df 91       	pop	r29
    5308:	08 95       	ret

0000530a <__fp_pscA>:
    530a:	00 24       	eor	r0, r0
    530c:	0a 94       	dec	r0
    530e:	16 16       	cp	r1, r22
    5310:	17 06       	cpc	r1, r23
    5312:	18 06       	cpc	r1, r24
    5314:	09 06       	cpc	r0, r25
    5316:	08 95       	ret

00005318 <__fp_pscB>:
    5318:	00 24       	eor	r0, r0
    531a:	0a 94       	dec	r0
    531c:	12 16       	cp	r1, r18
    531e:	13 06       	cpc	r1, r19
    5320:	14 06       	cpc	r1, r20
    5322:	05 06       	cpc	r0, r21
    5324:	08 95       	ret
    5326:	c9 cf       	rjmp	.-110    	; 0x52ba <__fp_nan>

00005328 <__fp_rempio2>:
    5328:	50 d0       	rcall	.+160    	; 0x53ca <__fp_splitA>
    532a:	e8 f3       	brcs	.-6      	; 0x5326 <__fp_pscB+0xe>
    532c:	e8 94       	clt
    532e:	e0 e0       	ldi	r30, 0x00	; 0
    5330:	bb 27       	eor	r27, r27
    5332:	9f 57       	subi	r25, 0x7F	; 127
    5334:	f0 f0       	brcs	.+60     	; 0x5372 <__fp_rempio2+0x4a>
    5336:	2a ed       	ldi	r18, 0xDA	; 218
    5338:	3f e0       	ldi	r19, 0x0F	; 15
    533a:	49 ec       	ldi	r20, 0xC9	; 201
    533c:	06 c0       	rjmp	.+12     	; 0x534a <__fp_rempio2+0x22>
    533e:	ee 0f       	add	r30, r30
    5340:	bb 0f       	add	r27, r27
    5342:	66 1f       	adc	r22, r22
    5344:	77 1f       	adc	r23, r23
    5346:	88 1f       	adc	r24, r24
    5348:	28 f0       	brcs	.+10     	; 0x5354 <__fp_rempio2+0x2c>
    534a:	b2 3a       	cpi	r27, 0xA2	; 162
    534c:	62 07       	cpc	r22, r18
    534e:	73 07       	cpc	r23, r19
    5350:	84 07       	cpc	r24, r20
    5352:	28 f0       	brcs	.+10     	; 0x535e <__fp_rempio2+0x36>
    5354:	b2 5a       	subi	r27, 0xA2	; 162
    5356:	62 0b       	sbc	r22, r18
    5358:	73 0b       	sbc	r23, r19
    535a:	84 0b       	sbc	r24, r20
    535c:	e3 95       	inc	r30
    535e:	9a 95       	dec	r25
    5360:	72 f7       	brpl	.-36     	; 0x533e <__fp_rempio2+0x16>
    5362:	80 38       	cpi	r24, 0x80	; 128
    5364:	30 f4       	brcc	.+12     	; 0x5372 <__fp_rempio2+0x4a>
    5366:	9a 95       	dec	r25
    5368:	bb 0f       	add	r27, r27
    536a:	66 1f       	adc	r22, r22
    536c:	77 1f       	adc	r23, r23
    536e:	88 1f       	adc	r24, r24
    5370:	d2 f7       	brpl	.-12     	; 0x5366 <__fp_rempio2+0x3e>
    5372:	90 48       	sbci	r25, 0x80	; 128
    5374:	29 c1       	rjmp	.+594    	; 0x55c8 <__fp_mpack_finite>

00005376 <__fp_round>:
    5376:	09 2e       	mov	r0, r25
    5378:	03 94       	inc	r0
    537a:	00 0c       	add	r0, r0
    537c:	11 f4       	brne	.+4      	; 0x5382 <__fp_round+0xc>
    537e:	88 23       	and	r24, r24
    5380:	52 f0       	brmi	.+20     	; 0x5396 <__fp_round+0x20>
    5382:	bb 0f       	add	r27, r27
    5384:	40 f4       	brcc	.+16     	; 0x5396 <__fp_round+0x20>
    5386:	bf 2b       	or	r27, r31
    5388:	11 f4       	brne	.+4      	; 0x538e <__fp_round+0x18>
    538a:	60 ff       	sbrs	r22, 0
    538c:	04 c0       	rjmp	.+8      	; 0x5396 <__fp_round+0x20>
    538e:	6f 5f       	subi	r22, 0xFF	; 255
    5390:	7f 4f       	sbci	r23, 0xFF	; 255
    5392:	8f 4f       	sbci	r24, 0xFF	; 255
    5394:	9f 4f       	sbci	r25, 0xFF	; 255
    5396:	08 95       	ret

00005398 <__fp_sinus>:
    5398:	ef 93       	push	r30
    539a:	e0 ff       	sbrs	r30, 0
    539c:	06 c0       	rjmp	.+12     	; 0x53aa <__fp_sinus+0x12>
    539e:	a2 ea       	ldi	r26, 0xA2	; 162
    53a0:	2a ed       	ldi	r18, 0xDA	; 218
    53a2:	3f e0       	ldi	r19, 0x0F	; 15
    53a4:	49 ec       	ldi	r20, 0xC9	; 201
    53a6:	5f eb       	ldi	r21, 0xBF	; 191
    53a8:	cc dd       	rcall	.-1128   	; 0x4f42 <__addsf3x>
    53aa:	e5 df       	rcall	.-54     	; 0x5376 <__fp_round>
    53ac:	0f 90       	pop	r0
    53ae:	03 94       	inc	r0
    53b0:	01 fc       	sbrc	r0, 1
    53b2:	90 58       	subi	r25, 0x80	; 128
    53b4:	eb ee       	ldi	r30, 0xEB	; 235
    53b6:	f0 e0       	ldi	r31, 0x00	; 0
    53b8:	13 c1       	rjmp	.+550    	; 0x55e0 <__fp_powsodd>

000053ba <__fp_split3>:
    53ba:	57 fd       	sbrc	r21, 7
    53bc:	90 58       	subi	r25, 0x80	; 128
    53be:	44 0f       	add	r20, r20
    53c0:	55 1f       	adc	r21, r21
    53c2:	59 f0       	breq	.+22     	; 0x53da <__fp_splitA+0x10>
    53c4:	5f 3f       	cpi	r21, 0xFF	; 255
    53c6:	71 f0       	breq	.+28     	; 0x53e4 <__fp_splitA+0x1a>
    53c8:	47 95       	ror	r20

000053ca <__fp_splitA>:
    53ca:	88 0f       	add	r24, r24
    53cc:	97 fb       	bst	r25, 7
    53ce:	99 1f       	adc	r25, r25
    53d0:	61 f0       	breq	.+24     	; 0x53ea <__fp_splitA+0x20>
    53d2:	9f 3f       	cpi	r25, 0xFF	; 255
    53d4:	79 f0       	breq	.+30     	; 0x53f4 <__fp_splitA+0x2a>
    53d6:	87 95       	ror	r24
    53d8:	08 95       	ret
    53da:	12 16       	cp	r1, r18
    53dc:	13 06       	cpc	r1, r19
    53de:	14 06       	cpc	r1, r20
    53e0:	55 1f       	adc	r21, r21
    53e2:	f2 cf       	rjmp	.-28     	; 0x53c8 <__fp_split3+0xe>
    53e4:	46 95       	lsr	r20
    53e6:	f1 df       	rcall	.-30     	; 0x53ca <__fp_splitA>
    53e8:	08 c0       	rjmp	.+16     	; 0x53fa <__fp_splitA+0x30>
    53ea:	16 16       	cp	r1, r22
    53ec:	17 06       	cpc	r1, r23
    53ee:	18 06       	cpc	r1, r24
    53f0:	99 1f       	adc	r25, r25
    53f2:	f1 cf       	rjmp	.-30     	; 0x53d6 <__fp_splitA+0xc>
    53f4:	86 95       	lsr	r24
    53f6:	71 05       	cpc	r23, r1
    53f8:	61 05       	cpc	r22, r1
    53fa:	08 94       	sec
    53fc:	08 95       	ret

000053fe <__fp_zero>:
    53fe:	e8 94       	clt

00005400 <__fp_szero>:
    5400:	bb 27       	eor	r27, r27
    5402:	66 27       	eor	r22, r22
    5404:	77 27       	eor	r23, r23
    5406:	cb 01       	movw	r24, r22
    5408:	97 f9       	bld	r25, 7
    540a:	08 95       	ret

0000540c <__gesf2>:
    540c:	2c df       	rcall	.-424    	; 0x5266 <__fp_cmp>
    540e:	08 f4       	brcc	.+2      	; 0x5412 <__gesf2+0x6>
    5410:	8f ef       	ldi	r24, 0xFF	; 255
    5412:	08 95       	ret

00005414 <inverse>:
    5414:	9b 01       	movw	r18, r22
    5416:	ac 01       	movw	r20, r24
    5418:	60 e0       	ldi	r22, 0x00	; 0
    541a:	70 e0       	ldi	r23, 0x00	; 0
    541c:	80 e8       	ldi	r24, 0x80	; 128
    541e:	9f e3       	ldi	r25, 0x3F	; 63
    5420:	4c ce       	rjmp	.-872    	; 0x50ba <__divsf3>
    5422:	0e f0       	brts	.+2      	; 0x5426 <inverse+0x12>
    5424:	cf c0       	rjmp	.+414    	; 0x55c4 <__fp_mpack>
    5426:	49 cf       	rjmp	.-366    	; 0x52ba <__fp_nan>
    5428:	68 94       	set
    542a:	41 cf       	rjmp	.-382    	; 0x52ae <__fp_inf>

0000542c <log>:
    542c:	ce df       	rcall	.-100    	; 0x53ca <__fp_splitA>
    542e:	c8 f3       	brcs	.-14     	; 0x5422 <inverse+0xe>
    5430:	99 23       	and	r25, r25
    5432:	d1 f3       	breq	.-12     	; 0x5428 <inverse+0x14>
    5434:	c6 f3       	brts	.-16     	; 0x5426 <inverse+0x12>
    5436:	df 93       	push	r29
    5438:	cf 93       	push	r28
    543a:	1f 93       	push	r17
    543c:	0f 93       	push	r16
    543e:	ff 92       	push	r15
    5440:	c9 2f       	mov	r28, r25
    5442:	dd 27       	eor	r29, r29
    5444:	88 23       	and	r24, r24
    5446:	2a f0       	brmi	.+10     	; 0x5452 <log+0x26>
    5448:	21 97       	sbiw	r28, 0x01	; 1
    544a:	66 0f       	add	r22, r22
    544c:	77 1f       	adc	r23, r23
    544e:	88 1f       	adc	r24, r24
    5450:	da f7       	brpl	.-10     	; 0x5448 <log+0x1c>
    5452:	20 e0       	ldi	r18, 0x00	; 0
    5454:	30 e0       	ldi	r19, 0x00	; 0
    5456:	40 e8       	ldi	r20, 0x80	; 128
    5458:	5f eb       	ldi	r21, 0xBF	; 191
    545a:	9f e3       	ldi	r25, 0x3F	; 63
    545c:	88 39       	cpi	r24, 0x98	; 152
    545e:	20 f0       	brcs	.+8      	; 0x5468 <log+0x3c>
    5460:	80 3e       	cpi	r24, 0xE0	; 224
    5462:	30 f0       	brcs	.+12     	; 0x5470 <log+0x44>
    5464:	21 96       	adiw	r28, 0x01	; 1
    5466:	8f 77       	andi	r24, 0x7F	; 127
    5468:	5b dd       	rcall	.-1354   	; 0x4f20 <__addsf3>
    546a:	e9 e0       	ldi	r30, 0x09	; 9
    546c:	f1 e0       	ldi	r31, 0x01	; 1
    546e:	03 c0       	rjmp	.+6      	; 0x5476 <log+0x4a>
    5470:	57 dd       	rcall	.-1362   	; 0x4f20 <__addsf3>
    5472:	e6 e3       	ldi	r30, 0x36	; 54
    5474:	f1 e0       	ldi	r31, 0x01	; 1
    5476:	24 df       	rcall	.-440    	; 0x52c0 <__fp_powser>
    5478:	8b 01       	movw	r16, r22
    547a:	be 01       	movw	r22, r28
    547c:	ec 01       	movw	r28, r24
    547e:	fb 2e       	mov	r15, r27
    5480:	6f 57       	subi	r22, 0x7F	; 127
    5482:	71 09       	sbc	r23, r1
    5484:	75 95       	asr	r23
    5486:	77 1f       	adc	r23, r23
    5488:	88 0b       	sbc	r24, r24
    548a:	99 0b       	sbc	r25, r25
    548c:	b1 de       	rcall	.-670    	; 0x51f0 <__floatsisf>
    548e:	28 e1       	ldi	r18, 0x18	; 24
    5490:	32 e7       	ldi	r19, 0x72	; 114
    5492:	41 e3       	ldi	r20, 0x31	; 49
    5494:	5f e3       	ldi	r21, 0x3F	; 63
    5496:	16 d0       	rcall	.+44     	; 0x54c4 <__mulsf3x>
    5498:	af 2d       	mov	r26, r15
    549a:	98 01       	movw	r18, r16
    549c:	ae 01       	movw	r20, r28
    549e:	ff 90       	pop	r15
    54a0:	0f 91       	pop	r16
    54a2:	1f 91       	pop	r17
    54a4:	cf 91       	pop	r28
    54a6:	df 91       	pop	r29
    54a8:	4c dd       	rcall	.-1384   	; 0x4f42 <__addsf3x>
    54aa:	65 cf       	rjmp	.-310    	; 0x5376 <__fp_round>

000054ac <__mulsf3>:
    54ac:	0b d0       	rcall	.+22     	; 0x54c4 <__mulsf3x>
    54ae:	63 cf       	rjmp	.-314    	; 0x5376 <__fp_round>
    54b0:	2c df       	rcall	.-424    	; 0x530a <__fp_pscA>
    54b2:	28 f0       	brcs	.+10     	; 0x54be <__mulsf3+0x12>
    54b4:	31 df       	rcall	.-414    	; 0x5318 <__fp_pscB>
    54b6:	18 f0       	brcs	.+6      	; 0x54be <__mulsf3+0x12>
    54b8:	95 23       	and	r25, r21
    54ba:	09 f0       	breq	.+2      	; 0x54be <__mulsf3+0x12>
    54bc:	f8 ce       	rjmp	.-528    	; 0x52ae <__fp_inf>
    54be:	fd ce       	rjmp	.-518    	; 0x52ba <__fp_nan>
    54c0:	11 24       	eor	r1, r1
    54c2:	9e cf       	rjmp	.-196    	; 0x5400 <__fp_szero>

000054c4 <__mulsf3x>:
    54c4:	7a df       	rcall	.-268    	; 0x53ba <__fp_split3>
    54c6:	a0 f3       	brcs	.-24     	; 0x54b0 <__mulsf3+0x4>

000054c8 <__mulsf3_pse>:
    54c8:	95 9f       	mul	r25, r21
    54ca:	d1 f3       	breq	.-12     	; 0x54c0 <__mulsf3+0x14>
    54cc:	95 0f       	add	r25, r21
    54ce:	50 e0       	ldi	r21, 0x00	; 0
    54d0:	55 1f       	adc	r21, r21
    54d2:	62 9f       	mul	r22, r18
    54d4:	f0 01       	movw	r30, r0
    54d6:	72 9f       	mul	r23, r18
    54d8:	bb 27       	eor	r27, r27
    54da:	f0 0d       	add	r31, r0
    54dc:	b1 1d       	adc	r27, r1
    54de:	63 9f       	mul	r22, r19
    54e0:	aa 27       	eor	r26, r26
    54e2:	f0 0d       	add	r31, r0
    54e4:	b1 1d       	adc	r27, r1
    54e6:	aa 1f       	adc	r26, r26
    54e8:	64 9f       	mul	r22, r20
    54ea:	66 27       	eor	r22, r22
    54ec:	b0 0d       	add	r27, r0
    54ee:	a1 1d       	adc	r26, r1
    54f0:	66 1f       	adc	r22, r22
    54f2:	82 9f       	mul	r24, r18
    54f4:	22 27       	eor	r18, r18
    54f6:	b0 0d       	add	r27, r0
    54f8:	a1 1d       	adc	r26, r1
    54fa:	62 1f       	adc	r22, r18
    54fc:	73 9f       	mul	r23, r19
    54fe:	b0 0d       	add	r27, r0
    5500:	a1 1d       	adc	r26, r1
    5502:	62 1f       	adc	r22, r18
    5504:	83 9f       	mul	r24, r19
    5506:	a0 0d       	add	r26, r0
    5508:	61 1d       	adc	r22, r1
    550a:	22 1f       	adc	r18, r18
    550c:	74 9f       	mul	r23, r20
    550e:	33 27       	eor	r19, r19
    5510:	a0 0d       	add	r26, r0
    5512:	61 1d       	adc	r22, r1
    5514:	23 1f       	adc	r18, r19
    5516:	84 9f       	mul	r24, r20
    5518:	60 0d       	add	r22, r0
    551a:	21 1d       	adc	r18, r1
    551c:	82 2f       	mov	r24, r18
    551e:	76 2f       	mov	r23, r22
    5520:	6a 2f       	mov	r22, r26
    5522:	11 24       	eor	r1, r1
    5524:	9f 57       	subi	r25, 0x7F	; 127
    5526:	50 40       	sbci	r21, 0x00	; 0
    5528:	8a f0       	brmi	.+34     	; 0x554c <__mulsf3_pse+0x84>
    552a:	e1 f0       	breq	.+56     	; 0x5564 <__mulsf3_pse+0x9c>
    552c:	88 23       	and	r24, r24
    552e:	4a f0       	brmi	.+18     	; 0x5542 <__mulsf3_pse+0x7a>
    5530:	ee 0f       	add	r30, r30
    5532:	ff 1f       	adc	r31, r31
    5534:	bb 1f       	adc	r27, r27
    5536:	66 1f       	adc	r22, r22
    5538:	77 1f       	adc	r23, r23
    553a:	88 1f       	adc	r24, r24
    553c:	91 50       	subi	r25, 0x01	; 1
    553e:	50 40       	sbci	r21, 0x00	; 0
    5540:	a9 f7       	brne	.-22     	; 0x552c <__mulsf3_pse+0x64>
    5542:	9e 3f       	cpi	r25, 0xFE	; 254
    5544:	51 05       	cpc	r21, r1
    5546:	70 f0       	brcs	.+28     	; 0x5564 <__mulsf3_pse+0x9c>
    5548:	b2 ce       	rjmp	.-668    	; 0x52ae <__fp_inf>
    554a:	5a cf       	rjmp	.-332    	; 0x5400 <__fp_szero>
    554c:	5f 3f       	cpi	r21, 0xFF	; 255
    554e:	ec f3       	brlt	.-6      	; 0x554a <__mulsf3_pse+0x82>
    5550:	98 3e       	cpi	r25, 0xE8	; 232
    5552:	dc f3       	brlt	.-10     	; 0x554a <__mulsf3_pse+0x82>
    5554:	86 95       	lsr	r24
    5556:	77 95       	ror	r23
    5558:	67 95       	ror	r22
    555a:	b7 95       	ror	r27
    555c:	f7 95       	ror	r31
    555e:	e7 95       	ror	r30
    5560:	9f 5f       	subi	r25, 0xFF	; 255
    5562:	c1 f7       	brne	.-16     	; 0x5554 <__mulsf3_pse+0x8c>
    5564:	fe 2b       	or	r31, r30
    5566:	88 0f       	add	r24, r24
    5568:	91 1d       	adc	r25, r1
    556a:	96 95       	lsr	r25
    556c:	87 95       	ror	r24
    556e:	97 f9       	bld	r25, 7
    5570:	08 95       	ret

00005572 <sin>:
    5572:	9f 93       	push	r25
    5574:	d9 de       	rcall	.-590    	; 0x5328 <__fp_rempio2>
    5576:	0f 90       	pop	r0
    5578:	07 fc       	sbrc	r0, 7
    557a:	ee 5f       	subi	r30, 0xFE	; 254
    557c:	0d cf       	rjmp	.-486    	; 0x5398 <__fp_sinus>

0000557e <square>:
    557e:	9b 01       	movw	r18, r22
    5580:	ac 01       	movw	r20, r24
    5582:	94 cf       	rjmp	.-216    	; 0x54ac <__mulsf3>

00005584 <tan>:
    5584:	df 93       	push	r29
    5586:	d9 2f       	mov	r29, r25
    5588:	cf de       	rcall	.-610    	; 0x5328 <__fp_rempio2>
    558a:	e6 95       	lsr	r30
    558c:	d7 95       	ror	r29
    558e:	2a ed       	ldi	r18, 0xDA	; 218
    5590:	3f e0       	ldi	r19, 0x0F	; 15
    5592:	49 e4       	ldi	r20, 0x49	; 73
    5594:	5f e3       	ldi	r21, 0x3F	; 63
    5596:	b3 3a       	cpi	r27, 0xA3	; 163
    5598:	62 07       	cpc	r22, r18
    559a:	73 07       	cpc	r23, r19
    559c:	84 07       	cpc	r24, r20
    559e:	95 07       	cpc	r25, r21
    55a0:	d7 95       	ror	r29
    55a2:	2a f0       	brmi	.+10     	; 0x55ae <tan+0x2a>
    55a4:	a2 ea       	ldi	r26, 0xA2	; 162
    55a6:	49 ec       	ldi	r20, 0xC9	; 201
    55a8:	90 68       	ori	r25, 0x80	; 128
    55aa:	cb dc       	rcall	.-1642   	; 0x4f42 <__addsf3x>
    55ac:	e4 de       	rcall	.-568    	; 0x5376 <__fp_round>
    55ae:	e3 e6       	ldi	r30, 0x63	; 99
    55b0:	f1 e0       	ldi	r31, 0x01	; 1
    55b2:	16 d0       	rcall	.+44     	; 0x55e0 <__fp_powsodd>
    55b4:	dd 0f       	add	r29, r29
    55b6:	0b f0       	brvs	.+2      	; 0x55ba <tan+0x36>
    55b8:	2d df       	rcall	.-422    	; 0x5414 <inverse>
    55ba:	dd 0f       	add	r29, r29
    55bc:	0b f4       	brvc	.+2      	; 0x55c0 <tan+0x3c>
    55be:	90 58       	subi	r25, 0x80	; 128
    55c0:	df 91       	pop	r29
    55c2:	08 95       	ret

000055c4 <__fp_mpack>:
    55c4:	9f 3f       	cpi	r25, 0xFF	; 255
    55c6:	31 f0       	breq	.+12     	; 0x55d4 <__fp_mpack_finite+0xc>

000055c8 <__fp_mpack_finite>:
    55c8:	91 50       	subi	r25, 0x01	; 1
    55ca:	20 f4       	brcc	.+8      	; 0x55d4 <__fp_mpack_finite+0xc>
    55cc:	87 95       	ror	r24
    55ce:	77 95       	ror	r23
    55d0:	67 95       	ror	r22
    55d2:	b7 95       	ror	r27
    55d4:	88 0f       	add	r24, r24
    55d6:	91 1d       	adc	r25, r1
    55d8:	96 95       	lsr	r25
    55da:	87 95       	ror	r24
    55dc:	97 f9       	bld	r25, 7
    55de:	08 95       	ret

000055e0 <__fp_powsodd>:
    55e0:	9f 93       	push	r25
    55e2:	8f 93       	push	r24
    55e4:	7f 93       	push	r23
    55e6:	6f 93       	push	r22
    55e8:	ff 93       	push	r31
    55ea:	ef 93       	push	r30
    55ec:	9b 01       	movw	r18, r22
    55ee:	ac 01       	movw	r20, r24
    55f0:	5d df       	rcall	.-326    	; 0x54ac <__mulsf3>
    55f2:	ef 91       	pop	r30
    55f4:	ff 91       	pop	r31
    55f6:	64 de       	rcall	.-824    	; 0x52c0 <__fp_powser>
    55f8:	2f 91       	pop	r18
    55fa:	3f 91       	pop	r19
    55fc:	4f 91       	pop	r20
    55fe:	5f 91       	pop	r21
    5600:	55 cf       	rjmp	.-342    	; 0x54ac <__mulsf3>

00005602 <vfprintf>:
    5602:	2f 92       	push	r2
    5604:	3f 92       	push	r3
    5606:	4f 92       	push	r4
    5608:	5f 92       	push	r5
    560a:	6f 92       	push	r6
    560c:	7f 92       	push	r7
    560e:	8f 92       	push	r8
    5610:	9f 92       	push	r9
    5612:	af 92       	push	r10
    5614:	bf 92       	push	r11
    5616:	cf 92       	push	r12
    5618:	df 92       	push	r13
    561a:	ef 92       	push	r14
    561c:	ff 92       	push	r15
    561e:	0f 93       	push	r16
    5620:	1f 93       	push	r17
    5622:	cf 93       	push	r28
    5624:	df 93       	push	r29
    5626:	cd b7       	in	r28, 0x3d	; 61
    5628:	de b7       	in	r29, 0x3e	; 62
    562a:	63 97       	sbiw	r28, 0x13	; 19
    562c:	0f b6       	in	r0, 0x3f	; 63
    562e:	f8 94       	cli
    5630:	de bf       	out	0x3e, r29	; 62
    5632:	0f be       	out	0x3f, r0	; 63
    5634:	cd bf       	out	0x3d, r28	; 61
    5636:	7c 01       	movw	r14, r24
    5638:	1b 01       	movw	r2, r22
    563a:	6a 01       	movw	r12, r20
    563c:	fc 01       	movw	r30, r24
    563e:	17 82       	std	Z+7, r1	; 0x07
    5640:	16 82       	std	Z+6, r1	; 0x06
    5642:	83 81       	ldd	r24, Z+3	; 0x03
    5644:	81 ff       	sbrs	r24, 1
    5646:	49 c3       	rjmp	.+1682   	; 0x5cda <vfprintf+0x6d8>
    5648:	be 01       	movw	r22, r28
    564a:	6f 5f       	subi	r22, 0xFF	; 255
    564c:	7f 4f       	sbci	r23, 0xFF	; 255
    564e:	4b 01       	movw	r8, r22
    5650:	f7 01       	movw	r30, r14
    5652:	93 81       	ldd	r25, Z+3	; 0x03
    5654:	f1 01       	movw	r30, r2
    5656:	93 fd       	sbrc	r25, 3
    5658:	85 91       	lpm	r24, Z+
    565a:	93 ff       	sbrs	r25, 3
    565c:	81 91       	ld	r24, Z+
    565e:	1f 01       	movw	r2, r30
    5660:	88 23       	and	r24, r24
    5662:	09 f4       	brne	.+2      	; 0x5666 <vfprintf+0x64>
    5664:	36 c3       	rjmp	.+1644   	; 0x5cd2 <vfprintf+0x6d0>
    5666:	85 32       	cpi	r24, 0x25	; 37
    5668:	39 f4       	brne	.+14     	; 0x5678 <vfprintf+0x76>
    566a:	93 fd       	sbrc	r25, 3
    566c:	85 91       	lpm	r24, Z+
    566e:	93 ff       	sbrs	r25, 3
    5670:	81 91       	ld	r24, Z+
    5672:	1f 01       	movw	r2, r30
    5674:	85 32       	cpi	r24, 0x25	; 37
    5676:	31 f4       	brne	.+12     	; 0x5684 <vfprintf+0x82>
    5678:	b7 01       	movw	r22, r14
    567a:	90 e0       	ldi	r25, 0x00	; 0
    567c:	41 d4       	rcall	.+2178   	; 0x5f00 <fputc>
    567e:	56 01       	movw	r10, r12
    5680:	65 01       	movw	r12, r10
    5682:	e6 cf       	rjmp	.-52     	; 0x5650 <vfprintf+0x4e>
    5684:	10 e0       	ldi	r17, 0x00	; 0
    5686:	51 2c       	mov	r5, r1
    5688:	20 e0       	ldi	r18, 0x00	; 0
    568a:	20 32       	cpi	r18, 0x20	; 32
    568c:	a0 f4       	brcc	.+40     	; 0x56b6 <vfprintf+0xb4>
    568e:	8b 32       	cpi	r24, 0x2B	; 43
    5690:	69 f0       	breq	.+26     	; 0x56ac <vfprintf+0xaa>
    5692:	30 f4       	brcc	.+12     	; 0x56a0 <vfprintf+0x9e>
    5694:	80 32       	cpi	r24, 0x20	; 32
    5696:	59 f0       	breq	.+22     	; 0x56ae <vfprintf+0xac>
    5698:	83 32       	cpi	r24, 0x23	; 35
    569a:	69 f4       	brne	.+26     	; 0x56b6 <vfprintf+0xb4>
    569c:	20 61       	ori	r18, 0x10	; 16
    569e:	2c c0       	rjmp	.+88     	; 0x56f8 <vfprintf+0xf6>
    56a0:	8d 32       	cpi	r24, 0x2D	; 45
    56a2:	39 f0       	breq	.+14     	; 0x56b2 <vfprintf+0xb0>
    56a4:	80 33       	cpi	r24, 0x30	; 48
    56a6:	39 f4       	brne	.+14     	; 0x56b6 <vfprintf+0xb4>
    56a8:	21 60       	ori	r18, 0x01	; 1
    56aa:	26 c0       	rjmp	.+76     	; 0x56f8 <vfprintf+0xf6>
    56ac:	22 60       	ori	r18, 0x02	; 2
    56ae:	24 60       	ori	r18, 0x04	; 4
    56b0:	23 c0       	rjmp	.+70     	; 0x56f8 <vfprintf+0xf6>
    56b2:	28 60       	ori	r18, 0x08	; 8
    56b4:	21 c0       	rjmp	.+66     	; 0x56f8 <vfprintf+0xf6>
    56b6:	27 fd       	sbrc	r18, 7
    56b8:	27 c0       	rjmp	.+78     	; 0x5708 <vfprintf+0x106>
    56ba:	30 ed       	ldi	r19, 0xD0	; 208
    56bc:	38 0f       	add	r19, r24
    56be:	3a 30       	cpi	r19, 0x0A	; 10
    56c0:	78 f4       	brcc	.+30     	; 0x56e0 <vfprintf+0xde>
    56c2:	26 ff       	sbrs	r18, 6
    56c4:	06 c0       	rjmp	.+12     	; 0x56d2 <vfprintf+0xd0>
    56c6:	fa e0       	ldi	r31, 0x0A	; 10
    56c8:	1f 9f       	mul	r17, r31
    56ca:	30 0d       	add	r19, r0
    56cc:	11 24       	eor	r1, r1
    56ce:	13 2f       	mov	r17, r19
    56d0:	13 c0       	rjmp	.+38     	; 0x56f8 <vfprintf+0xf6>
    56d2:	6a e0       	ldi	r22, 0x0A	; 10
    56d4:	56 9e       	mul	r5, r22
    56d6:	30 0d       	add	r19, r0
    56d8:	11 24       	eor	r1, r1
    56da:	53 2e       	mov	r5, r19
    56dc:	20 62       	ori	r18, 0x20	; 32
    56de:	0c c0       	rjmp	.+24     	; 0x56f8 <vfprintf+0xf6>
    56e0:	8e 32       	cpi	r24, 0x2E	; 46
    56e2:	21 f4       	brne	.+8      	; 0x56ec <vfprintf+0xea>
    56e4:	26 fd       	sbrc	r18, 6
    56e6:	f5 c2       	rjmp	.+1514   	; 0x5cd2 <vfprintf+0x6d0>
    56e8:	20 64       	ori	r18, 0x40	; 64
    56ea:	06 c0       	rjmp	.+12     	; 0x56f8 <vfprintf+0xf6>
    56ec:	8c 36       	cpi	r24, 0x6C	; 108
    56ee:	11 f4       	brne	.+4      	; 0x56f4 <vfprintf+0xf2>
    56f0:	20 68       	ori	r18, 0x80	; 128
    56f2:	02 c0       	rjmp	.+4      	; 0x56f8 <vfprintf+0xf6>
    56f4:	88 36       	cpi	r24, 0x68	; 104
    56f6:	41 f4       	brne	.+16     	; 0x5708 <vfprintf+0x106>
    56f8:	f1 01       	movw	r30, r2
    56fa:	93 fd       	sbrc	r25, 3
    56fc:	85 91       	lpm	r24, Z+
    56fe:	93 ff       	sbrs	r25, 3
    5700:	81 91       	ld	r24, Z+
    5702:	1f 01       	movw	r2, r30
    5704:	81 11       	cpse	r24, r1
    5706:	c1 cf       	rjmp	.-126    	; 0x568a <vfprintf+0x88>
    5708:	9b eb       	ldi	r25, 0xBB	; 187
    570a:	98 0f       	add	r25, r24
    570c:	93 30       	cpi	r25, 0x03	; 3
    570e:	18 f4       	brcc	.+6      	; 0x5716 <vfprintf+0x114>
    5710:	20 61       	ori	r18, 0x10	; 16
    5712:	80 5e       	subi	r24, 0xE0	; 224
    5714:	06 c0       	rjmp	.+12     	; 0x5722 <vfprintf+0x120>
    5716:	9b e9       	ldi	r25, 0x9B	; 155
    5718:	98 0f       	add	r25, r24
    571a:	93 30       	cpi	r25, 0x03	; 3
    571c:	08 f0       	brcs	.+2      	; 0x5720 <vfprintf+0x11e>
    571e:	9a c1       	rjmp	.+820    	; 0x5a54 <vfprintf+0x452>
    5720:	2f 7e       	andi	r18, 0xEF	; 239
    5722:	26 ff       	sbrs	r18, 6
    5724:	16 e0       	ldi	r17, 0x06	; 6
    5726:	2f 73       	andi	r18, 0x3F	; 63
    5728:	72 2e       	mov	r7, r18
    572a:	85 36       	cpi	r24, 0x65	; 101
    572c:	21 f4       	brne	.+8      	; 0x5736 <vfprintf+0x134>
    572e:	f2 2f       	mov	r31, r18
    5730:	f0 64       	ori	r31, 0x40	; 64
    5732:	7f 2e       	mov	r7, r31
    5734:	08 c0       	rjmp	.+16     	; 0x5746 <vfprintf+0x144>
    5736:	86 36       	cpi	r24, 0x66	; 102
    5738:	21 f4       	brne	.+8      	; 0x5742 <vfprintf+0x140>
    573a:	62 2f       	mov	r22, r18
    573c:	60 68       	ori	r22, 0x80	; 128
    573e:	76 2e       	mov	r7, r22
    5740:	02 c0       	rjmp	.+4      	; 0x5746 <vfprintf+0x144>
    5742:	11 11       	cpse	r17, r1
    5744:	11 50       	subi	r17, 0x01	; 1
    5746:	77 fe       	sbrs	r7, 7
    5748:	07 c0       	rjmp	.+14     	; 0x5758 <vfprintf+0x156>
    574a:	1c 33       	cpi	r17, 0x3C	; 60
    574c:	48 f4       	brcc	.+18     	; 0x5760 <vfprintf+0x15e>
    574e:	44 24       	eor	r4, r4
    5750:	43 94       	inc	r4
    5752:	41 0e       	add	r4, r17
    5754:	27 e0       	ldi	r18, 0x07	; 7
    5756:	0b c0       	rjmp	.+22     	; 0x576e <vfprintf+0x16c>
    5758:	18 30       	cpi	r17, 0x08	; 8
    575a:	30 f4       	brcc	.+12     	; 0x5768 <vfprintf+0x166>
    575c:	21 2f       	mov	r18, r17
    575e:	06 c0       	rjmp	.+12     	; 0x576c <vfprintf+0x16a>
    5760:	27 e0       	ldi	r18, 0x07	; 7
    5762:	4c e3       	ldi	r20, 0x3C	; 60
    5764:	44 2e       	mov	r4, r20
    5766:	03 c0       	rjmp	.+6      	; 0x576e <vfprintf+0x16c>
    5768:	27 e0       	ldi	r18, 0x07	; 7
    576a:	17 e0       	ldi	r17, 0x07	; 7
    576c:	41 2c       	mov	r4, r1
    576e:	56 01       	movw	r10, r12
    5770:	74 e0       	ldi	r23, 0x04	; 4
    5772:	a7 0e       	add	r10, r23
    5774:	b1 1c       	adc	r11, r1
    5776:	f6 01       	movw	r30, r12
    5778:	60 81       	ld	r22, Z
    577a:	71 81       	ldd	r23, Z+1	; 0x01
    577c:	82 81       	ldd	r24, Z+2	; 0x02
    577e:	93 81       	ldd	r25, Z+3	; 0x03
    5780:	04 2d       	mov	r16, r4
    5782:	a4 01       	movw	r20, r8
    5784:	cf d2       	rcall	.+1438   	; 0x5d24 <__ftoa_engine>
    5786:	6c 01       	movw	r12, r24
    5788:	09 81       	ldd	r16, Y+1	; 0x01
    578a:	00 ff       	sbrs	r16, 0
    578c:	02 c0       	rjmp	.+4      	; 0x5792 <vfprintf+0x190>
    578e:	03 ff       	sbrs	r16, 3
    5790:	06 c0       	rjmp	.+12     	; 0x579e <vfprintf+0x19c>
    5792:	71 fc       	sbrc	r7, 1
    5794:	07 c0       	rjmp	.+14     	; 0x57a4 <vfprintf+0x1a2>
    5796:	72 fc       	sbrc	r7, 2
    5798:	08 c0       	rjmp	.+16     	; 0x57aa <vfprintf+0x1a8>
    579a:	61 2c       	mov	r6, r1
    579c:	08 c0       	rjmp	.+16     	; 0x57ae <vfprintf+0x1ac>
    579e:	3d e2       	ldi	r19, 0x2D	; 45
    57a0:	63 2e       	mov	r6, r19
    57a2:	05 c0       	rjmp	.+10     	; 0x57ae <vfprintf+0x1ac>
    57a4:	2b e2       	ldi	r18, 0x2B	; 43
    57a6:	62 2e       	mov	r6, r18
    57a8:	02 c0       	rjmp	.+4      	; 0x57ae <vfprintf+0x1ac>
    57aa:	90 e2       	ldi	r25, 0x20	; 32
    57ac:	69 2e       	mov	r6, r25
    57ae:	80 2f       	mov	r24, r16
    57b0:	8c 70       	andi	r24, 0x0C	; 12
    57b2:	81 f1       	breq	.+96     	; 0x5814 <vfprintf+0x212>
    57b4:	66 20       	and	r6, r6
    57b6:	11 f0       	breq	.+4      	; 0x57bc <vfprintf+0x1ba>
    57b8:	84 e0       	ldi	r24, 0x04	; 4
    57ba:	01 c0       	rjmp	.+2      	; 0x57be <vfprintf+0x1bc>
    57bc:	83 e0       	ldi	r24, 0x03	; 3
    57be:	85 15       	cp	r24, r5
    57c0:	10 f0       	brcs	.+4      	; 0x57c6 <vfprintf+0x1c4>
    57c2:	51 2c       	mov	r5, r1
    57c4:	0a c0       	rjmp	.+20     	; 0x57da <vfprintf+0x1d8>
    57c6:	58 1a       	sub	r5, r24
    57c8:	73 fc       	sbrc	r7, 3
    57ca:	07 c0       	rjmp	.+14     	; 0x57da <vfprintf+0x1d8>
    57cc:	b7 01       	movw	r22, r14
    57ce:	80 e2       	ldi	r24, 0x20	; 32
    57d0:	90 e0       	ldi	r25, 0x00	; 0
    57d2:	96 d3       	rcall	.+1836   	; 0x5f00 <fputc>
    57d4:	5a 94       	dec	r5
    57d6:	d1 f7       	brne	.-12     	; 0x57cc <vfprintf+0x1ca>
    57d8:	f4 cf       	rjmp	.-24     	; 0x57c2 <vfprintf+0x1c0>
    57da:	66 20       	and	r6, r6
    57dc:	21 f0       	breq	.+8      	; 0x57e6 <vfprintf+0x1e4>
    57de:	b7 01       	movw	r22, r14
    57e0:	86 2d       	mov	r24, r6
    57e2:	90 e0       	ldi	r25, 0x00	; 0
    57e4:	8d d3       	rcall	.+1818   	; 0x5f00 <fputc>
    57e6:	03 fd       	sbrc	r16, 3
    57e8:	03 c0       	rjmp	.+6      	; 0x57f0 <vfprintf+0x1ee>
    57ea:	00 ea       	ldi	r16, 0xA0	; 160
    57ec:	16 e0       	ldi	r17, 0x06	; 6
    57ee:	02 c0       	rjmp	.+4      	; 0x57f4 <vfprintf+0x1f2>
    57f0:	0c e9       	ldi	r16, 0x9C	; 156
    57f2:	16 e0       	ldi	r17, 0x06	; 6
    57f4:	f7 2d       	mov	r31, r7
    57f6:	f0 71       	andi	r31, 0x10	; 16
    57f8:	7f 2e       	mov	r7, r31
    57fa:	f8 01       	movw	r30, r16
    57fc:	84 91       	lpm	r24, Z
    57fe:	88 23       	and	r24, r24
    5800:	09 f4       	brne	.+2      	; 0x5804 <vfprintf+0x202>
    5802:	5e c2       	rjmp	.+1212   	; 0x5cc0 <vfprintf+0x6be>
    5804:	71 10       	cpse	r7, r1
    5806:	80 52       	subi	r24, 0x20	; 32
    5808:	b7 01       	movw	r22, r14
    580a:	90 e0       	ldi	r25, 0x00	; 0
    580c:	79 d3       	rcall	.+1778   	; 0x5f00 <fputc>
    580e:	0f 5f       	subi	r16, 0xFF	; 255
    5810:	1f 4f       	sbci	r17, 0xFF	; 255
    5812:	f3 cf       	rjmp	.-26     	; 0x57fa <vfprintf+0x1f8>
    5814:	77 fe       	sbrs	r7, 7
    5816:	0f c0       	rjmp	.+30     	; 0x5836 <vfprintf+0x234>
    5818:	4c 0c       	add	r4, r12
    581a:	04 ff       	sbrs	r16, 4
    581c:	04 c0       	rjmp	.+8      	; 0x5826 <vfprintf+0x224>
    581e:	8a 81       	ldd	r24, Y+2	; 0x02
    5820:	81 33       	cpi	r24, 0x31	; 49
    5822:	09 f4       	brne	.+2      	; 0x5826 <vfprintf+0x224>
    5824:	4a 94       	dec	r4
    5826:	14 14       	cp	r1, r4
    5828:	74 f5       	brge	.+92     	; 0x5886 <vfprintf+0x284>
    582a:	f8 e0       	ldi	r31, 0x08	; 8
    582c:	f4 15       	cp	r31, r4
    582e:	78 f5       	brcc	.+94     	; 0x588e <vfprintf+0x28c>
    5830:	88 e0       	ldi	r24, 0x08	; 8
    5832:	48 2e       	mov	r4, r24
    5834:	2c c0       	rjmp	.+88     	; 0x588e <vfprintf+0x28c>
    5836:	76 fc       	sbrc	r7, 6
    5838:	2a c0       	rjmp	.+84     	; 0x588e <vfprintf+0x28c>
    583a:	81 2f       	mov	r24, r17
    583c:	90 e0       	ldi	r25, 0x00	; 0
    583e:	8c 15       	cp	r24, r12
    5840:	9d 05       	cpc	r25, r13
    5842:	9c f0       	brlt	.+38     	; 0x586a <vfprintf+0x268>
    5844:	6c ef       	ldi	r22, 0xFC	; 252
    5846:	c6 16       	cp	r12, r22
    5848:	6f ef       	ldi	r22, 0xFF	; 255
    584a:	d6 06       	cpc	r13, r22
    584c:	74 f0       	brlt	.+28     	; 0x586a <vfprintf+0x268>
    584e:	77 2d       	mov	r23, r7
    5850:	70 68       	ori	r23, 0x80	; 128
    5852:	77 2e       	mov	r7, r23
    5854:	0a c0       	rjmp	.+20     	; 0x586a <vfprintf+0x268>
    5856:	e2 e0       	ldi	r30, 0x02	; 2
    5858:	f0 e0       	ldi	r31, 0x00	; 0
    585a:	ec 0f       	add	r30, r28
    585c:	fd 1f       	adc	r31, r29
    585e:	e1 0f       	add	r30, r17
    5860:	f1 1d       	adc	r31, r1
    5862:	80 81       	ld	r24, Z
    5864:	80 33       	cpi	r24, 0x30	; 48
    5866:	19 f4       	brne	.+6      	; 0x586e <vfprintf+0x26c>
    5868:	11 50       	subi	r17, 0x01	; 1
    586a:	11 11       	cpse	r17, r1
    586c:	f4 cf       	rjmp	.-24     	; 0x5856 <vfprintf+0x254>
    586e:	77 fe       	sbrs	r7, 7
    5870:	0e c0       	rjmp	.+28     	; 0x588e <vfprintf+0x28c>
    5872:	44 24       	eor	r4, r4
    5874:	43 94       	inc	r4
    5876:	41 0e       	add	r4, r17
    5878:	81 2f       	mov	r24, r17
    587a:	90 e0       	ldi	r25, 0x00	; 0
    587c:	c8 16       	cp	r12, r24
    587e:	d9 06       	cpc	r13, r25
    5880:	2c f4       	brge	.+10     	; 0x588c <vfprintf+0x28a>
    5882:	1c 19       	sub	r17, r12
    5884:	04 c0       	rjmp	.+8      	; 0x588e <vfprintf+0x28c>
    5886:	44 24       	eor	r4, r4
    5888:	43 94       	inc	r4
    588a:	01 c0       	rjmp	.+2      	; 0x588e <vfprintf+0x28c>
    588c:	10 e0       	ldi	r17, 0x00	; 0
    588e:	77 fe       	sbrs	r7, 7
    5890:	07 c0       	rjmp	.+14     	; 0x58a0 <vfprintf+0x29e>
    5892:	1c 14       	cp	r1, r12
    5894:	1d 04       	cpc	r1, r13
    5896:	3c f4       	brge	.+14     	; 0x58a6 <vfprintf+0x2a4>
    5898:	96 01       	movw	r18, r12
    589a:	2f 5f       	subi	r18, 0xFF	; 255
    589c:	3f 4f       	sbci	r19, 0xFF	; 255
    589e:	05 c0       	rjmp	.+10     	; 0x58aa <vfprintf+0x2a8>
    58a0:	25 e0       	ldi	r18, 0x05	; 5
    58a2:	30 e0       	ldi	r19, 0x00	; 0
    58a4:	02 c0       	rjmp	.+4      	; 0x58aa <vfprintf+0x2a8>
    58a6:	21 e0       	ldi	r18, 0x01	; 1
    58a8:	30 e0       	ldi	r19, 0x00	; 0
    58aa:	66 20       	and	r6, r6
    58ac:	11 f0       	breq	.+4      	; 0x58b2 <vfprintf+0x2b0>
    58ae:	2f 5f       	subi	r18, 0xFF	; 255
    58b0:	3f 4f       	sbci	r19, 0xFF	; 255
    58b2:	11 23       	and	r17, r17
    58b4:	31 f0       	breq	.+12     	; 0x58c2 <vfprintf+0x2c0>
    58b6:	41 2f       	mov	r20, r17
    58b8:	50 e0       	ldi	r21, 0x00	; 0
    58ba:	4f 5f       	subi	r20, 0xFF	; 255
    58bc:	5f 4f       	sbci	r21, 0xFF	; 255
    58be:	24 0f       	add	r18, r20
    58c0:	35 1f       	adc	r19, r21
    58c2:	45 2d       	mov	r20, r5
    58c4:	50 e0       	ldi	r21, 0x00	; 0
    58c6:	24 17       	cp	r18, r20
    58c8:	35 07       	cpc	r19, r21
    58ca:	14 f4       	brge	.+4      	; 0x58d0 <vfprintf+0x2ce>
    58cc:	52 1a       	sub	r5, r18
    58ce:	01 c0       	rjmp	.+2      	; 0x58d2 <vfprintf+0x2d0>
    58d0:	51 2c       	mov	r5, r1
    58d2:	87 2d       	mov	r24, r7
    58d4:	89 70       	andi	r24, 0x09	; 9
    58d6:	41 f4       	brne	.+16     	; 0x58e8 <vfprintf+0x2e6>
    58d8:	55 20       	and	r5, r5
    58da:	31 f0       	breq	.+12     	; 0x58e8 <vfprintf+0x2e6>
    58dc:	b7 01       	movw	r22, r14
    58de:	80 e2       	ldi	r24, 0x20	; 32
    58e0:	90 e0       	ldi	r25, 0x00	; 0
    58e2:	0e d3       	rcall	.+1564   	; 0x5f00 <fputc>
    58e4:	5a 94       	dec	r5
    58e6:	f8 cf       	rjmp	.-16     	; 0x58d8 <vfprintf+0x2d6>
    58e8:	66 20       	and	r6, r6
    58ea:	21 f0       	breq	.+8      	; 0x58f4 <vfprintf+0x2f2>
    58ec:	b7 01       	movw	r22, r14
    58ee:	86 2d       	mov	r24, r6
    58f0:	90 e0       	ldi	r25, 0x00	; 0
    58f2:	06 d3       	rcall	.+1548   	; 0x5f00 <fputc>
    58f4:	73 fc       	sbrc	r7, 3
    58f6:	08 c0       	rjmp	.+16     	; 0x5908 <vfprintf+0x306>
    58f8:	55 20       	and	r5, r5
    58fa:	31 f0       	breq	.+12     	; 0x5908 <vfprintf+0x306>
    58fc:	b7 01       	movw	r22, r14
    58fe:	80 e3       	ldi	r24, 0x30	; 48
    5900:	90 e0       	ldi	r25, 0x00	; 0
    5902:	fe d2       	rcall	.+1532   	; 0x5f00 <fputc>
    5904:	5a 94       	dec	r5
    5906:	f8 cf       	rjmp	.-16     	; 0x58f8 <vfprintf+0x2f6>
    5908:	77 fe       	sbrs	r7, 7
    590a:	5d c0       	rjmp	.+186    	; 0x59c6 <vfprintf+0x3c4>
    590c:	9c 2d       	mov	r25, r12
    590e:	8d 2d       	mov	r24, r13
    5910:	d7 fe       	sbrs	r13, 7
    5912:	02 c0       	rjmp	.+4      	; 0x5918 <vfprintf+0x316>
    5914:	90 e0       	ldi	r25, 0x00	; 0
    5916:	80 e0       	ldi	r24, 0x00	; 0
    5918:	69 2e       	mov	r6, r25
    591a:	78 2e       	mov	r7, r24
    591c:	40 e0       	ldi	r20, 0x00	; 0
    591e:	50 e0       	ldi	r21, 0x00	; 0
    5920:	c6 01       	movw	r24, r12
    5922:	84 19       	sub	r24, r4
    5924:	91 09       	sbc	r25, r1
    5926:	9d 87       	std	Y+13, r25	; 0x0d
    5928:	8c 87       	std	Y+12, r24	; 0x0c
    592a:	96 01       	movw	r18, r12
    592c:	26 19       	sub	r18, r6
    592e:	37 09       	sbc	r19, r7
    5930:	28 0d       	add	r18, r8
    5932:	39 1d       	adc	r19, r9
    5934:	81 2f       	mov	r24, r17
    5936:	90 e0       	ldi	r25, 0x00	; 0
    5938:	ee 27       	eor	r30, r30
    593a:	ff 27       	eor	r31, r31
    593c:	e8 1b       	sub	r30, r24
    593e:	f9 0b       	sbc	r31, r25
    5940:	ff 87       	std	Y+15, r31	; 0x0f
    5942:	ee 87       	std	Y+14, r30	; 0x0e
    5944:	ff ef       	ldi	r31, 0xFF	; 255
    5946:	6f 16       	cp	r6, r31
    5948:	7f 06       	cpc	r7, r31
    594a:	61 f4       	brne	.+24     	; 0x5964 <vfprintf+0x362>
    594c:	b7 01       	movw	r22, r14
    594e:	8e e2       	ldi	r24, 0x2E	; 46
    5950:	90 e0       	ldi	r25, 0x00	; 0
    5952:	2b 8b       	std	Y+19, r18	; 0x13
    5954:	3a 8b       	std	Y+18, r19	; 0x12
    5956:	48 8b       	std	Y+16, r20	; 0x10
    5958:	59 8b       	std	Y+17, r21	; 0x11
    595a:	d2 d2       	rcall	.+1444   	; 0x5f00 <fputc>
    595c:	59 89       	ldd	r21, Y+17	; 0x11
    595e:	48 89       	ldd	r20, Y+16	; 0x10
    5960:	3a 89       	ldd	r19, Y+18	; 0x12
    5962:	2b 89       	ldd	r18, Y+19	; 0x13
    5964:	c6 14       	cp	r12, r6
    5966:	d7 04       	cpc	r13, r7
    5968:	54 f0       	brlt	.+20     	; 0x597e <vfprintf+0x37c>
    596a:	6c 85       	ldd	r22, Y+12	; 0x0c
    596c:	7d 85       	ldd	r23, Y+13	; 0x0d
    596e:	66 15       	cp	r22, r6
    5970:	77 05       	cpc	r23, r7
    5972:	2c f4       	brge	.+10     	; 0x597e <vfprintf+0x37c>
    5974:	f9 01       	movw	r30, r18
    5976:	e4 0f       	add	r30, r20
    5978:	f5 1f       	adc	r31, r21
    597a:	81 81       	ldd	r24, Z+1	; 0x01
    597c:	01 c0       	rjmp	.+2      	; 0x5980 <vfprintf+0x37e>
    597e:	80 e3       	ldi	r24, 0x30	; 48
    5980:	71 e0       	ldi	r23, 0x01	; 1
    5982:	67 1a       	sub	r6, r23
    5984:	71 08       	sbc	r7, r1
    5986:	4f 5f       	subi	r20, 0xFF	; 255
    5988:	5f 4f       	sbci	r21, 0xFF	; 255
    598a:	ee 85       	ldd	r30, Y+14	; 0x0e
    598c:	ff 85       	ldd	r31, Y+15	; 0x0f
    598e:	6e 16       	cp	r6, r30
    5990:	7f 06       	cpc	r7, r31
    5992:	64 f0       	brlt	.+24     	; 0x59ac <vfprintf+0x3aa>
    5994:	b7 01       	movw	r22, r14
    5996:	90 e0       	ldi	r25, 0x00	; 0
    5998:	2b 8b       	std	Y+19, r18	; 0x13
    599a:	3a 8b       	std	Y+18, r19	; 0x12
    599c:	48 8b       	std	Y+16, r20	; 0x10
    599e:	59 8b       	std	Y+17, r21	; 0x11
    59a0:	af d2       	rcall	.+1374   	; 0x5f00 <fputc>
    59a2:	2b 89       	ldd	r18, Y+19	; 0x13
    59a4:	3a 89       	ldd	r19, Y+18	; 0x12
    59a6:	48 89       	ldd	r20, Y+16	; 0x10
    59a8:	59 89       	ldd	r21, Y+17	; 0x11
    59aa:	cc cf       	rjmp	.-104    	; 0x5944 <vfprintf+0x342>
    59ac:	6c 14       	cp	r6, r12
    59ae:	7d 04       	cpc	r7, r13
    59b0:	39 f4       	brne	.+14     	; 0x59c0 <vfprintf+0x3be>
    59b2:	9a 81       	ldd	r25, Y+2	; 0x02
    59b4:	96 33       	cpi	r25, 0x36	; 54
    59b6:	18 f4       	brcc	.+6      	; 0x59be <vfprintf+0x3bc>
    59b8:	95 33       	cpi	r25, 0x35	; 53
    59ba:	11 f4       	brne	.+4      	; 0x59c0 <vfprintf+0x3be>
    59bc:	04 ff       	sbrs	r16, 4
    59be:	81 e3       	ldi	r24, 0x31	; 49
    59c0:	b7 01       	movw	r22, r14
    59c2:	90 e0       	ldi	r25, 0x00	; 0
    59c4:	45 c0       	rjmp	.+138    	; 0x5a50 <vfprintf+0x44e>
    59c6:	8a 81       	ldd	r24, Y+2	; 0x02
    59c8:	81 33       	cpi	r24, 0x31	; 49
    59ca:	09 f0       	breq	.+2      	; 0x59ce <vfprintf+0x3cc>
    59cc:	0f 7e       	andi	r16, 0xEF	; 239
    59ce:	b7 01       	movw	r22, r14
    59d0:	90 e0       	ldi	r25, 0x00	; 0
    59d2:	96 d2       	rcall	.+1324   	; 0x5f00 <fputc>
    59d4:	11 11       	cpse	r17, r1
    59d6:	05 c0       	rjmp	.+10     	; 0x59e2 <vfprintf+0x3e0>
    59d8:	74 fe       	sbrs	r7, 4
    59da:	16 c0       	rjmp	.+44     	; 0x5a08 <vfprintf+0x406>
    59dc:	85 e4       	ldi	r24, 0x45	; 69
    59de:	90 e0       	ldi	r25, 0x00	; 0
    59e0:	15 c0       	rjmp	.+42     	; 0x5a0c <vfprintf+0x40a>
    59e2:	b7 01       	movw	r22, r14
    59e4:	8e e2       	ldi	r24, 0x2E	; 46
    59e6:	90 e0       	ldi	r25, 0x00	; 0
    59e8:	8b d2       	rcall	.+1302   	; 0x5f00 <fputc>
    59ea:	82 e0       	ldi	r24, 0x02	; 2
    59ec:	66 24       	eor	r6, r6
    59ee:	63 94       	inc	r6
    59f0:	68 0e       	add	r6, r24
    59f2:	f4 01       	movw	r30, r8
    59f4:	e8 0f       	add	r30, r24
    59f6:	f1 1d       	adc	r31, r1
    59f8:	80 81       	ld	r24, Z
    59fa:	b7 01       	movw	r22, r14
    59fc:	90 e0       	ldi	r25, 0x00	; 0
    59fe:	80 d2       	rcall	.+1280   	; 0x5f00 <fputc>
    5a00:	11 50       	subi	r17, 0x01	; 1
    5a02:	51 f3       	breq	.-44     	; 0x59d8 <vfprintf+0x3d6>
    5a04:	86 2d       	mov	r24, r6
    5a06:	f2 cf       	rjmp	.-28     	; 0x59ec <vfprintf+0x3ea>
    5a08:	85 e6       	ldi	r24, 0x65	; 101
    5a0a:	90 e0       	ldi	r25, 0x00	; 0
    5a0c:	b7 01       	movw	r22, r14
    5a0e:	78 d2       	rcall	.+1264   	; 0x5f00 <fputc>
    5a10:	d7 fc       	sbrc	r13, 7
    5a12:	05 c0       	rjmp	.+10     	; 0x5a1e <vfprintf+0x41c>
    5a14:	c1 14       	cp	r12, r1
    5a16:	d1 04       	cpc	r13, r1
    5a18:	39 f4       	brne	.+14     	; 0x5a28 <vfprintf+0x426>
    5a1a:	04 ff       	sbrs	r16, 4
    5a1c:	05 c0       	rjmp	.+10     	; 0x5a28 <vfprintf+0x426>
    5a1e:	d1 94       	neg	r13
    5a20:	c1 94       	neg	r12
    5a22:	d1 08       	sbc	r13, r1
    5a24:	8d e2       	ldi	r24, 0x2D	; 45
    5a26:	01 c0       	rjmp	.+2      	; 0x5a2a <vfprintf+0x428>
    5a28:	8b e2       	ldi	r24, 0x2B	; 43
    5a2a:	b7 01       	movw	r22, r14
    5a2c:	90 e0       	ldi	r25, 0x00	; 0
    5a2e:	68 d2       	rcall	.+1232   	; 0x5f00 <fputc>
    5a30:	80 e3       	ldi	r24, 0x30	; 48
    5a32:	6a e0       	ldi	r22, 0x0A	; 10
    5a34:	c6 16       	cp	r12, r22
    5a36:	d1 04       	cpc	r13, r1
    5a38:	2c f0       	brlt	.+10     	; 0x5a44 <vfprintf+0x442>
    5a3a:	8f 5f       	subi	r24, 0xFF	; 255
    5a3c:	fa e0       	ldi	r31, 0x0A	; 10
    5a3e:	cf 1a       	sub	r12, r31
    5a40:	d1 08       	sbc	r13, r1
    5a42:	f7 cf       	rjmp	.-18     	; 0x5a32 <vfprintf+0x430>
    5a44:	b7 01       	movw	r22, r14
    5a46:	90 e0       	ldi	r25, 0x00	; 0
    5a48:	5b d2       	rcall	.+1206   	; 0x5f00 <fputc>
    5a4a:	b7 01       	movw	r22, r14
    5a4c:	c6 01       	movw	r24, r12
    5a4e:	c0 96       	adiw	r24, 0x30	; 48
    5a50:	57 d2       	rcall	.+1198   	; 0x5f00 <fputc>
    5a52:	36 c1       	rjmp	.+620    	; 0x5cc0 <vfprintf+0x6be>
    5a54:	83 36       	cpi	r24, 0x63	; 99
    5a56:	31 f0       	breq	.+12     	; 0x5a64 <vfprintf+0x462>
    5a58:	83 37       	cpi	r24, 0x73	; 115
    5a5a:	79 f0       	breq	.+30     	; 0x5a7a <vfprintf+0x478>
    5a5c:	83 35       	cpi	r24, 0x53	; 83
    5a5e:	09 f0       	breq	.+2      	; 0x5a62 <vfprintf+0x460>
    5a60:	54 c0       	rjmp	.+168    	; 0x5b0a <vfprintf+0x508>
    5a62:	20 c0       	rjmp	.+64     	; 0x5aa4 <vfprintf+0x4a2>
    5a64:	56 01       	movw	r10, r12
    5a66:	72 e0       	ldi	r23, 0x02	; 2
    5a68:	a7 0e       	add	r10, r23
    5a6a:	b1 1c       	adc	r11, r1
    5a6c:	f6 01       	movw	r30, r12
    5a6e:	80 81       	ld	r24, Z
    5a70:	89 83       	std	Y+1, r24	; 0x01
    5a72:	01 e0       	ldi	r16, 0x01	; 1
    5a74:	10 e0       	ldi	r17, 0x00	; 0
    5a76:	64 01       	movw	r12, r8
    5a78:	13 c0       	rjmp	.+38     	; 0x5aa0 <vfprintf+0x49e>
    5a7a:	56 01       	movw	r10, r12
    5a7c:	f2 e0       	ldi	r31, 0x02	; 2
    5a7e:	af 0e       	add	r10, r31
    5a80:	b1 1c       	adc	r11, r1
    5a82:	f6 01       	movw	r30, r12
    5a84:	c0 80       	ld	r12, Z
    5a86:	d1 80       	ldd	r13, Z+1	; 0x01
    5a88:	26 ff       	sbrs	r18, 6
    5a8a:	03 c0       	rjmp	.+6      	; 0x5a92 <vfprintf+0x490>
    5a8c:	61 2f       	mov	r22, r17
    5a8e:	70 e0       	ldi	r23, 0x00	; 0
    5a90:	02 c0       	rjmp	.+4      	; 0x5a96 <vfprintf+0x494>
    5a92:	6f ef       	ldi	r22, 0xFF	; 255
    5a94:	7f ef       	ldi	r23, 0xFF	; 255
    5a96:	c6 01       	movw	r24, r12
    5a98:	2b 8b       	std	Y+19, r18	; 0x13
    5a9a:	27 d2       	rcall	.+1102   	; 0x5eea <strnlen>
    5a9c:	8c 01       	movw	r16, r24
    5a9e:	2b 89       	ldd	r18, Y+19	; 0x13
    5aa0:	2f 77       	andi	r18, 0x7F	; 127
    5aa2:	14 c0       	rjmp	.+40     	; 0x5acc <vfprintf+0x4ca>
    5aa4:	56 01       	movw	r10, r12
    5aa6:	f2 e0       	ldi	r31, 0x02	; 2
    5aa8:	af 0e       	add	r10, r31
    5aaa:	b1 1c       	adc	r11, r1
    5aac:	f6 01       	movw	r30, r12
    5aae:	c0 80       	ld	r12, Z
    5ab0:	d1 80       	ldd	r13, Z+1	; 0x01
    5ab2:	26 ff       	sbrs	r18, 6
    5ab4:	03 c0       	rjmp	.+6      	; 0x5abc <vfprintf+0x4ba>
    5ab6:	61 2f       	mov	r22, r17
    5ab8:	70 e0       	ldi	r23, 0x00	; 0
    5aba:	02 c0       	rjmp	.+4      	; 0x5ac0 <vfprintf+0x4be>
    5abc:	6f ef       	ldi	r22, 0xFF	; 255
    5abe:	7f ef       	ldi	r23, 0xFF	; 255
    5ac0:	c6 01       	movw	r24, r12
    5ac2:	2b 8b       	std	Y+19, r18	; 0x13
    5ac4:	07 d2       	rcall	.+1038   	; 0x5ed4 <strnlen_P>
    5ac6:	8c 01       	movw	r16, r24
    5ac8:	2b 89       	ldd	r18, Y+19	; 0x13
    5aca:	20 68       	ori	r18, 0x80	; 128
    5acc:	72 2e       	mov	r7, r18
    5ace:	23 fd       	sbrc	r18, 3
    5ad0:	18 c0       	rjmp	.+48     	; 0x5b02 <vfprintf+0x500>
    5ad2:	85 2d       	mov	r24, r5
    5ad4:	90 e0       	ldi	r25, 0x00	; 0
    5ad6:	08 17       	cp	r16, r24
    5ad8:	19 07       	cpc	r17, r25
    5ada:	98 f4       	brcc	.+38     	; 0x5b02 <vfprintf+0x500>
    5adc:	b7 01       	movw	r22, r14
    5ade:	80 e2       	ldi	r24, 0x20	; 32
    5ae0:	90 e0       	ldi	r25, 0x00	; 0
    5ae2:	0e d2       	rcall	.+1052   	; 0x5f00 <fputc>
    5ae4:	5a 94       	dec	r5
    5ae6:	f5 cf       	rjmp	.-22     	; 0x5ad2 <vfprintf+0x4d0>
    5ae8:	f6 01       	movw	r30, r12
    5aea:	77 fc       	sbrc	r7, 7
    5aec:	85 91       	lpm	r24, Z+
    5aee:	77 fe       	sbrs	r7, 7
    5af0:	81 91       	ld	r24, Z+
    5af2:	6f 01       	movw	r12, r30
    5af4:	b7 01       	movw	r22, r14
    5af6:	90 e0       	ldi	r25, 0x00	; 0
    5af8:	03 d2       	rcall	.+1030   	; 0x5f00 <fputc>
    5afa:	51 10       	cpse	r5, r1
    5afc:	5a 94       	dec	r5
    5afe:	01 50       	subi	r16, 0x01	; 1
    5b00:	11 09       	sbc	r17, r1
    5b02:	01 15       	cp	r16, r1
    5b04:	11 05       	cpc	r17, r1
    5b06:	81 f7       	brne	.-32     	; 0x5ae8 <vfprintf+0x4e6>
    5b08:	db c0       	rjmp	.+438    	; 0x5cc0 <vfprintf+0x6be>
    5b0a:	84 36       	cpi	r24, 0x64	; 100
    5b0c:	11 f0       	breq	.+4      	; 0x5b12 <vfprintf+0x510>
    5b0e:	89 36       	cpi	r24, 0x69	; 105
    5b10:	49 f5       	brne	.+82     	; 0x5b64 <vfprintf+0x562>
    5b12:	56 01       	movw	r10, r12
    5b14:	27 ff       	sbrs	r18, 7
    5b16:	09 c0       	rjmp	.+18     	; 0x5b2a <vfprintf+0x528>
    5b18:	f4 e0       	ldi	r31, 0x04	; 4
    5b1a:	af 0e       	add	r10, r31
    5b1c:	b1 1c       	adc	r11, r1
    5b1e:	f6 01       	movw	r30, r12
    5b20:	60 81       	ld	r22, Z
    5b22:	71 81       	ldd	r23, Z+1	; 0x01
    5b24:	82 81       	ldd	r24, Z+2	; 0x02
    5b26:	93 81       	ldd	r25, Z+3	; 0x03
    5b28:	0a c0       	rjmp	.+20     	; 0x5b3e <vfprintf+0x53c>
    5b2a:	f2 e0       	ldi	r31, 0x02	; 2
    5b2c:	af 0e       	add	r10, r31
    5b2e:	b1 1c       	adc	r11, r1
    5b30:	f6 01       	movw	r30, r12
    5b32:	60 81       	ld	r22, Z
    5b34:	71 81       	ldd	r23, Z+1	; 0x01
    5b36:	88 27       	eor	r24, r24
    5b38:	77 fd       	sbrc	r23, 7
    5b3a:	80 95       	com	r24
    5b3c:	98 2f       	mov	r25, r24
    5b3e:	02 2f       	mov	r16, r18
    5b40:	0f 76       	andi	r16, 0x6F	; 111
    5b42:	97 ff       	sbrs	r25, 7
    5b44:	08 c0       	rjmp	.+16     	; 0x5b56 <vfprintf+0x554>
    5b46:	90 95       	com	r25
    5b48:	80 95       	com	r24
    5b4a:	70 95       	com	r23
    5b4c:	61 95       	neg	r22
    5b4e:	7f 4f       	sbci	r23, 0xFF	; 255
    5b50:	8f 4f       	sbci	r24, 0xFF	; 255
    5b52:	9f 4f       	sbci	r25, 0xFF	; 255
    5b54:	00 68       	ori	r16, 0x80	; 128
    5b56:	2a e0       	ldi	r18, 0x0A	; 10
    5b58:	30 e0       	ldi	r19, 0x00	; 0
    5b5a:	a4 01       	movw	r20, r8
    5b5c:	31 d2       	rcall	.+1122   	; 0x5fc0 <__ultoa_invert>
    5b5e:	c8 2e       	mov	r12, r24
    5b60:	c8 18       	sub	r12, r8
    5b62:	3d c0       	rjmp	.+122    	; 0x5bde <vfprintf+0x5dc>
    5b64:	02 2f       	mov	r16, r18
    5b66:	85 37       	cpi	r24, 0x75	; 117
    5b68:	21 f4       	brne	.+8      	; 0x5b72 <vfprintf+0x570>
    5b6a:	0f 7e       	andi	r16, 0xEF	; 239
    5b6c:	2a e0       	ldi	r18, 0x0A	; 10
    5b6e:	30 e0       	ldi	r19, 0x00	; 0
    5b70:	1d c0       	rjmp	.+58     	; 0x5bac <vfprintf+0x5aa>
    5b72:	09 7f       	andi	r16, 0xF9	; 249
    5b74:	8f 36       	cpi	r24, 0x6F	; 111
    5b76:	91 f0       	breq	.+36     	; 0x5b9c <vfprintf+0x59a>
    5b78:	18 f4       	brcc	.+6      	; 0x5b80 <vfprintf+0x57e>
    5b7a:	88 35       	cpi	r24, 0x58	; 88
    5b7c:	59 f0       	breq	.+22     	; 0x5b94 <vfprintf+0x592>
    5b7e:	a9 c0       	rjmp	.+338    	; 0x5cd2 <vfprintf+0x6d0>
    5b80:	80 37       	cpi	r24, 0x70	; 112
    5b82:	19 f0       	breq	.+6      	; 0x5b8a <vfprintf+0x588>
    5b84:	88 37       	cpi	r24, 0x78	; 120
    5b86:	11 f0       	breq	.+4      	; 0x5b8c <vfprintf+0x58a>
    5b88:	a4 c0       	rjmp	.+328    	; 0x5cd2 <vfprintf+0x6d0>
    5b8a:	00 61       	ori	r16, 0x10	; 16
    5b8c:	04 ff       	sbrs	r16, 4
    5b8e:	09 c0       	rjmp	.+18     	; 0x5ba2 <vfprintf+0x5a0>
    5b90:	04 60       	ori	r16, 0x04	; 4
    5b92:	07 c0       	rjmp	.+14     	; 0x5ba2 <vfprintf+0x5a0>
    5b94:	24 ff       	sbrs	r18, 4
    5b96:	08 c0       	rjmp	.+16     	; 0x5ba8 <vfprintf+0x5a6>
    5b98:	06 60       	ori	r16, 0x06	; 6
    5b9a:	06 c0       	rjmp	.+12     	; 0x5ba8 <vfprintf+0x5a6>
    5b9c:	28 e0       	ldi	r18, 0x08	; 8
    5b9e:	30 e0       	ldi	r19, 0x00	; 0
    5ba0:	05 c0       	rjmp	.+10     	; 0x5bac <vfprintf+0x5aa>
    5ba2:	20 e1       	ldi	r18, 0x10	; 16
    5ba4:	30 e0       	ldi	r19, 0x00	; 0
    5ba6:	02 c0       	rjmp	.+4      	; 0x5bac <vfprintf+0x5aa>
    5ba8:	20 e1       	ldi	r18, 0x10	; 16
    5baa:	32 e0       	ldi	r19, 0x02	; 2
    5bac:	56 01       	movw	r10, r12
    5bae:	07 ff       	sbrs	r16, 7
    5bb0:	09 c0       	rjmp	.+18     	; 0x5bc4 <vfprintf+0x5c2>
    5bb2:	f4 e0       	ldi	r31, 0x04	; 4
    5bb4:	af 0e       	add	r10, r31
    5bb6:	b1 1c       	adc	r11, r1
    5bb8:	f6 01       	movw	r30, r12
    5bba:	60 81       	ld	r22, Z
    5bbc:	71 81       	ldd	r23, Z+1	; 0x01
    5bbe:	82 81       	ldd	r24, Z+2	; 0x02
    5bc0:	93 81       	ldd	r25, Z+3	; 0x03
    5bc2:	08 c0       	rjmp	.+16     	; 0x5bd4 <vfprintf+0x5d2>
    5bc4:	f2 e0       	ldi	r31, 0x02	; 2
    5bc6:	af 0e       	add	r10, r31
    5bc8:	b1 1c       	adc	r11, r1
    5bca:	f6 01       	movw	r30, r12
    5bcc:	60 81       	ld	r22, Z
    5bce:	71 81       	ldd	r23, Z+1	; 0x01
    5bd0:	80 e0       	ldi	r24, 0x00	; 0
    5bd2:	90 e0       	ldi	r25, 0x00	; 0
    5bd4:	a4 01       	movw	r20, r8
    5bd6:	f4 d1       	rcall	.+1000   	; 0x5fc0 <__ultoa_invert>
    5bd8:	c8 2e       	mov	r12, r24
    5bda:	c8 18       	sub	r12, r8
    5bdc:	0f 77       	andi	r16, 0x7F	; 127
    5bde:	06 ff       	sbrs	r16, 6
    5be0:	0b c0       	rjmp	.+22     	; 0x5bf8 <vfprintf+0x5f6>
    5be2:	20 2f       	mov	r18, r16
    5be4:	2e 7f       	andi	r18, 0xFE	; 254
    5be6:	c1 16       	cp	r12, r17
    5be8:	50 f4       	brcc	.+20     	; 0x5bfe <vfprintf+0x5fc>
    5bea:	04 ff       	sbrs	r16, 4
    5bec:	0a c0       	rjmp	.+20     	; 0x5c02 <vfprintf+0x600>
    5bee:	02 fd       	sbrc	r16, 2
    5bf0:	08 c0       	rjmp	.+16     	; 0x5c02 <vfprintf+0x600>
    5bf2:	20 2f       	mov	r18, r16
    5bf4:	2e 7e       	andi	r18, 0xEE	; 238
    5bf6:	05 c0       	rjmp	.+10     	; 0x5c02 <vfprintf+0x600>
    5bf8:	dc 2c       	mov	r13, r12
    5bfa:	20 2f       	mov	r18, r16
    5bfc:	03 c0       	rjmp	.+6      	; 0x5c04 <vfprintf+0x602>
    5bfe:	dc 2c       	mov	r13, r12
    5c00:	01 c0       	rjmp	.+2      	; 0x5c04 <vfprintf+0x602>
    5c02:	d1 2e       	mov	r13, r17
    5c04:	24 ff       	sbrs	r18, 4
    5c06:	0d c0       	rjmp	.+26     	; 0x5c22 <vfprintf+0x620>
    5c08:	fe 01       	movw	r30, r28
    5c0a:	ec 0d       	add	r30, r12
    5c0c:	f1 1d       	adc	r31, r1
    5c0e:	80 81       	ld	r24, Z
    5c10:	80 33       	cpi	r24, 0x30	; 48
    5c12:	11 f4       	brne	.+4      	; 0x5c18 <vfprintf+0x616>
    5c14:	29 7e       	andi	r18, 0xE9	; 233
    5c16:	09 c0       	rjmp	.+18     	; 0x5c2a <vfprintf+0x628>
    5c18:	22 ff       	sbrs	r18, 2
    5c1a:	06 c0       	rjmp	.+12     	; 0x5c28 <vfprintf+0x626>
    5c1c:	d3 94       	inc	r13
    5c1e:	d3 94       	inc	r13
    5c20:	04 c0       	rjmp	.+8      	; 0x5c2a <vfprintf+0x628>
    5c22:	82 2f       	mov	r24, r18
    5c24:	86 78       	andi	r24, 0x86	; 134
    5c26:	09 f0       	breq	.+2      	; 0x5c2a <vfprintf+0x628>
    5c28:	d3 94       	inc	r13
    5c2a:	23 fd       	sbrc	r18, 3
    5c2c:	12 c0       	rjmp	.+36     	; 0x5c52 <vfprintf+0x650>
    5c2e:	20 ff       	sbrs	r18, 0
    5c30:	06 c0       	rjmp	.+12     	; 0x5c3e <vfprintf+0x63c>
    5c32:	1c 2d       	mov	r17, r12
    5c34:	d5 14       	cp	r13, r5
    5c36:	18 f4       	brcc	.+6      	; 0x5c3e <vfprintf+0x63c>
    5c38:	15 0d       	add	r17, r5
    5c3a:	1d 19       	sub	r17, r13
    5c3c:	d5 2c       	mov	r13, r5
    5c3e:	d5 14       	cp	r13, r5
    5c40:	60 f4       	brcc	.+24     	; 0x5c5a <vfprintf+0x658>
    5c42:	b7 01       	movw	r22, r14
    5c44:	80 e2       	ldi	r24, 0x20	; 32
    5c46:	90 e0       	ldi	r25, 0x00	; 0
    5c48:	2b 8b       	std	Y+19, r18	; 0x13
    5c4a:	5a d1       	rcall	.+692    	; 0x5f00 <fputc>
    5c4c:	d3 94       	inc	r13
    5c4e:	2b 89       	ldd	r18, Y+19	; 0x13
    5c50:	f6 cf       	rjmp	.-20     	; 0x5c3e <vfprintf+0x63c>
    5c52:	d5 14       	cp	r13, r5
    5c54:	10 f4       	brcc	.+4      	; 0x5c5a <vfprintf+0x658>
    5c56:	5d 18       	sub	r5, r13
    5c58:	01 c0       	rjmp	.+2      	; 0x5c5c <vfprintf+0x65a>
    5c5a:	51 2c       	mov	r5, r1
    5c5c:	24 ff       	sbrs	r18, 4
    5c5e:	11 c0       	rjmp	.+34     	; 0x5c82 <vfprintf+0x680>
    5c60:	b7 01       	movw	r22, r14
    5c62:	80 e3       	ldi	r24, 0x30	; 48
    5c64:	90 e0       	ldi	r25, 0x00	; 0
    5c66:	2b 8b       	std	Y+19, r18	; 0x13
    5c68:	4b d1       	rcall	.+662    	; 0x5f00 <fputc>
    5c6a:	2b 89       	ldd	r18, Y+19	; 0x13
    5c6c:	22 ff       	sbrs	r18, 2
    5c6e:	16 c0       	rjmp	.+44     	; 0x5c9c <vfprintf+0x69a>
    5c70:	21 ff       	sbrs	r18, 1
    5c72:	03 c0       	rjmp	.+6      	; 0x5c7a <vfprintf+0x678>
    5c74:	88 e5       	ldi	r24, 0x58	; 88
    5c76:	90 e0       	ldi	r25, 0x00	; 0
    5c78:	02 c0       	rjmp	.+4      	; 0x5c7e <vfprintf+0x67c>
    5c7a:	88 e7       	ldi	r24, 0x78	; 120
    5c7c:	90 e0       	ldi	r25, 0x00	; 0
    5c7e:	b7 01       	movw	r22, r14
    5c80:	0c c0       	rjmp	.+24     	; 0x5c9a <vfprintf+0x698>
    5c82:	82 2f       	mov	r24, r18
    5c84:	86 78       	andi	r24, 0x86	; 134
    5c86:	51 f0       	breq	.+20     	; 0x5c9c <vfprintf+0x69a>
    5c88:	21 fd       	sbrc	r18, 1
    5c8a:	02 c0       	rjmp	.+4      	; 0x5c90 <vfprintf+0x68e>
    5c8c:	80 e2       	ldi	r24, 0x20	; 32
    5c8e:	01 c0       	rjmp	.+2      	; 0x5c92 <vfprintf+0x690>
    5c90:	8b e2       	ldi	r24, 0x2B	; 43
    5c92:	27 fd       	sbrc	r18, 7
    5c94:	8d e2       	ldi	r24, 0x2D	; 45
    5c96:	b7 01       	movw	r22, r14
    5c98:	90 e0       	ldi	r25, 0x00	; 0
    5c9a:	32 d1       	rcall	.+612    	; 0x5f00 <fputc>
    5c9c:	c1 16       	cp	r12, r17
    5c9e:	30 f4       	brcc	.+12     	; 0x5cac <vfprintf+0x6aa>
    5ca0:	b7 01       	movw	r22, r14
    5ca2:	80 e3       	ldi	r24, 0x30	; 48
    5ca4:	90 e0       	ldi	r25, 0x00	; 0
    5ca6:	2c d1       	rcall	.+600    	; 0x5f00 <fputc>
    5ca8:	11 50       	subi	r17, 0x01	; 1
    5caa:	f8 cf       	rjmp	.-16     	; 0x5c9c <vfprintf+0x69a>
    5cac:	ca 94       	dec	r12
    5cae:	f4 01       	movw	r30, r8
    5cb0:	ec 0d       	add	r30, r12
    5cb2:	f1 1d       	adc	r31, r1
    5cb4:	80 81       	ld	r24, Z
    5cb6:	b7 01       	movw	r22, r14
    5cb8:	90 e0       	ldi	r25, 0x00	; 0
    5cba:	22 d1       	rcall	.+580    	; 0x5f00 <fputc>
    5cbc:	c1 10       	cpse	r12, r1
    5cbe:	f6 cf       	rjmp	.-20     	; 0x5cac <vfprintf+0x6aa>
    5cc0:	55 20       	and	r5, r5
    5cc2:	09 f4       	brne	.+2      	; 0x5cc6 <vfprintf+0x6c4>
    5cc4:	dd cc       	rjmp	.-1606   	; 0x5680 <vfprintf+0x7e>
    5cc6:	b7 01       	movw	r22, r14
    5cc8:	80 e2       	ldi	r24, 0x20	; 32
    5cca:	90 e0       	ldi	r25, 0x00	; 0
    5ccc:	19 d1       	rcall	.+562    	; 0x5f00 <fputc>
    5cce:	5a 94       	dec	r5
    5cd0:	f7 cf       	rjmp	.-18     	; 0x5cc0 <vfprintf+0x6be>
    5cd2:	f7 01       	movw	r30, r14
    5cd4:	86 81       	ldd	r24, Z+6	; 0x06
    5cd6:	97 81       	ldd	r25, Z+7	; 0x07
    5cd8:	02 c0       	rjmp	.+4      	; 0x5cde <vfprintf+0x6dc>
    5cda:	8f ef       	ldi	r24, 0xFF	; 255
    5cdc:	9f ef       	ldi	r25, 0xFF	; 255
    5cde:	63 96       	adiw	r28, 0x13	; 19
    5ce0:	0f b6       	in	r0, 0x3f	; 63
    5ce2:	f8 94       	cli
    5ce4:	de bf       	out	0x3e, r29	; 62
    5ce6:	0f be       	out	0x3f, r0	; 63
    5ce8:	cd bf       	out	0x3d, r28	; 61
    5cea:	df 91       	pop	r29
    5cec:	cf 91       	pop	r28
    5cee:	1f 91       	pop	r17
    5cf0:	0f 91       	pop	r16
    5cf2:	ff 90       	pop	r15
    5cf4:	ef 90       	pop	r14
    5cf6:	df 90       	pop	r13
    5cf8:	cf 90       	pop	r12
    5cfa:	bf 90       	pop	r11
    5cfc:	af 90       	pop	r10
    5cfe:	9f 90       	pop	r9
    5d00:	8f 90       	pop	r8
    5d02:	7f 90       	pop	r7
    5d04:	6f 90       	pop	r6
    5d06:	5f 90       	pop	r5
    5d08:	4f 90       	pop	r4
    5d0a:	3f 90       	pop	r3
    5d0c:	2f 90       	pop	r2
    5d0e:	08 95       	ret

00005d10 <__tablejump2__>:
    5d10:	ee 0f       	add	r30, r30
    5d12:	ff 1f       	adc	r31, r31

00005d14 <__tablejump__>:
    5d14:	05 90       	lpm	r0, Z+
    5d16:	f4 91       	lpm	r31, Z
    5d18:	e0 2d       	mov	r30, r0
    5d1a:	09 94       	ijmp

00005d1c <__tablejump_elpm__>:
    5d1c:	07 90       	elpm	r0, Z+
    5d1e:	f6 91       	elpm	r31, Z
    5d20:	e0 2d       	mov	r30, r0
    5d22:	09 94       	ijmp

00005d24 <__ftoa_engine>:
    5d24:	28 30       	cpi	r18, 0x08	; 8
    5d26:	08 f0       	brcs	.+2      	; 0x5d2a <__ftoa_engine+0x6>
    5d28:	27 e0       	ldi	r18, 0x07	; 7
    5d2a:	33 27       	eor	r19, r19
    5d2c:	da 01       	movw	r26, r20
    5d2e:	99 0f       	add	r25, r25
    5d30:	31 1d       	adc	r19, r1
    5d32:	87 fd       	sbrc	r24, 7
    5d34:	91 60       	ori	r25, 0x01	; 1
    5d36:	00 96       	adiw	r24, 0x00	; 0
    5d38:	61 05       	cpc	r22, r1
    5d3a:	71 05       	cpc	r23, r1
    5d3c:	39 f4       	brne	.+14     	; 0x5d4c <__ftoa_engine+0x28>
    5d3e:	32 60       	ori	r19, 0x02	; 2
    5d40:	2e 5f       	subi	r18, 0xFE	; 254
    5d42:	3d 93       	st	X+, r19
    5d44:	30 e3       	ldi	r19, 0x30	; 48
    5d46:	2a 95       	dec	r18
    5d48:	e1 f7       	brne	.-8      	; 0x5d42 <__ftoa_engine+0x1e>
    5d4a:	08 95       	ret
    5d4c:	9f 3f       	cpi	r25, 0xFF	; 255
    5d4e:	30 f0       	brcs	.+12     	; 0x5d5c <__ftoa_engine+0x38>
    5d50:	80 38       	cpi	r24, 0x80	; 128
    5d52:	71 05       	cpc	r23, r1
    5d54:	61 05       	cpc	r22, r1
    5d56:	09 f0       	breq	.+2      	; 0x5d5a <__ftoa_engine+0x36>
    5d58:	3c 5f       	subi	r19, 0xFC	; 252
    5d5a:	3c 5f       	subi	r19, 0xFC	; 252
    5d5c:	3d 93       	st	X+, r19
    5d5e:	91 30       	cpi	r25, 0x01	; 1
    5d60:	08 f0       	brcs	.+2      	; 0x5d64 <__ftoa_engine+0x40>
    5d62:	80 68       	ori	r24, 0x80	; 128
    5d64:	91 1d       	adc	r25, r1
    5d66:	df 93       	push	r29
    5d68:	cf 93       	push	r28
    5d6a:	1f 93       	push	r17
    5d6c:	0f 93       	push	r16
    5d6e:	ff 92       	push	r15
    5d70:	ef 92       	push	r14
    5d72:	19 2f       	mov	r17, r25
    5d74:	98 7f       	andi	r25, 0xF8	; 248
    5d76:	96 95       	lsr	r25
    5d78:	e9 2f       	mov	r30, r25
    5d7a:	96 95       	lsr	r25
    5d7c:	96 95       	lsr	r25
    5d7e:	e9 0f       	add	r30, r25
    5d80:	ff 27       	eor	r31, r31
    5d82:	e2 50       	subi	r30, 0x02	; 2
    5d84:	f9 4f       	sbci	r31, 0xF9	; 249
    5d86:	99 27       	eor	r25, r25
    5d88:	33 27       	eor	r19, r19
    5d8a:	ee 24       	eor	r14, r14
    5d8c:	ff 24       	eor	r15, r15
    5d8e:	a7 01       	movw	r20, r14
    5d90:	e7 01       	movw	r28, r14
    5d92:	05 90       	lpm	r0, Z+
    5d94:	08 94       	sec
    5d96:	07 94       	ror	r0
    5d98:	28 f4       	brcc	.+10     	; 0x5da4 <__ftoa_engine+0x80>
    5d9a:	36 0f       	add	r19, r22
    5d9c:	e7 1e       	adc	r14, r23
    5d9e:	f8 1e       	adc	r15, r24
    5da0:	49 1f       	adc	r20, r25
    5da2:	51 1d       	adc	r21, r1
    5da4:	66 0f       	add	r22, r22
    5da6:	77 1f       	adc	r23, r23
    5da8:	88 1f       	adc	r24, r24
    5daa:	99 1f       	adc	r25, r25
    5dac:	06 94       	lsr	r0
    5dae:	a1 f7       	brne	.-24     	; 0x5d98 <__ftoa_engine+0x74>
    5db0:	05 90       	lpm	r0, Z+
    5db2:	07 94       	ror	r0
    5db4:	28 f4       	brcc	.+10     	; 0x5dc0 <__ftoa_engine+0x9c>
    5db6:	e7 0e       	add	r14, r23
    5db8:	f8 1e       	adc	r15, r24
    5dba:	49 1f       	adc	r20, r25
    5dbc:	56 1f       	adc	r21, r22
    5dbe:	c1 1d       	adc	r28, r1
    5dc0:	77 0f       	add	r23, r23
    5dc2:	88 1f       	adc	r24, r24
    5dc4:	99 1f       	adc	r25, r25
    5dc6:	66 1f       	adc	r22, r22
    5dc8:	06 94       	lsr	r0
    5dca:	a1 f7       	brne	.-24     	; 0x5db4 <__ftoa_engine+0x90>
    5dcc:	05 90       	lpm	r0, Z+
    5dce:	07 94       	ror	r0
    5dd0:	28 f4       	brcc	.+10     	; 0x5ddc <__ftoa_engine+0xb8>
    5dd2:	f8 0e       	add	r15, r24
    5dd4:	49 1f       	adc	r20, r25
    5dd6:	56 1f       	adc	r21, r22
    5dd8:	c7 1f       	adc	r28, r23
    5dda:	d1 1d       	adc	r29, r1
    5ddc:	88 0f       	add	r24, r24
    5dde:	99 1f       	adc	r25, r25
    5de0:	66 1f       	adc	r22, r22
    5de2:	77 1f       	adc	r23, r23
    5de4:	06 94       	lsr	r0
    5de6:	a1 f7       	brne	.-24     	; 0x5dd0 <__ftoa_engine+0xac>
    5de8:	05 90       	lpm	r0, Z+
    5dea:	07 94       	ror	r0
    5dec:	20 f4       	brcc	.+8      	; 0x5df6 <__ftoa_engine+0xd2>
    5dee:	49 0f       	add	r20, r25
    5df0:	56 1f       	adc	r21, r22
    5df2:	c7 1f       	adc	r28, r23
    5df4:	d8 1f       	adc	r29, r24
    5df6:	99 0f       	add	r25, r25
    5df8:	66 1f       	adc	r22, r22
    5dfa:	77 1f       	adc	r23, r23
    5dfc:	88 1f       	adc	r24, r24
    5dfe:	06 94       	lsr	r0
    5e00:	a9 f7       	brne	.-22     	; 0x5dec <__ftoa_engine+0xc8>
    5e02:	84 91       	lpm	r24, Z
    5e04:	10 95       	com	r17
    5e06:	17 70       	andi	r17, 0x07	; 7
    5e08:	41 f0       	breq	.+16     	; 0x5e1a <__ftoa_engine+0xf6>
    5e0a:	d6 95       	lsr	r29
    5e0c:	c7 95       	ror	r28
    5e0e:	57 95       	ror	r21
    5e10:	47 95       	ror	r20
    5e12:	f7 94       	ror	r15
    5e14:	e7 94       	ror	r14
    5e16:	1a 95       	dec	r17
    5e18:	c1 f7       	brne	.-16     	; 0x5e0a <__ftoa_engine+0xe6>
    5e1a:	e4 ea       	ldi	r30, 0xA4	; 164
    5e1c:	f6 e0       	ldi	r31, 0x06	; 6
    5e1e:	68 94       	set
    5e20:	15 90       	lpm	r1, Z+
    5e22:	15 91       	lpm	r17, Z+
    5e24:	35 91       	lpm	r19, Z+
    5e26:	65 91       	lpm	r22, Z+
    5e28:	95 91       	lpm	r25, Z+
    5e2a:	05 90       	lpm	r0, Z+
    5e2c:	7f e2       	ldi	r23, 0x2F	; 47
    5e2e:	73 95       	inc	r23
    5e30:	e1 18       	sub	r14, r1
    5e32:	f1 0a       	sbc	r15, r17
    5e34:	43 0b       	sbc	r20, r19
    5e36:	56 0b       	sbc	r21, r22
    5e38:	c9 0b       	sbc	r28, r25
    5e3a:	d0 09       	sbc	r29, r0
    5e3c:	c0 f7       	brcc	.-16     	; 0x5e2e <__ftoa_engine+0x10a>
    5e3e:	e1 0c       	add	r14, r1
    5e40:	f1 1e       	adc	r15, r17
    5e42:	43 1f       	adc	r20, r19
    5e44:	56 1f       	adc	r21, r22
    5e46:	c9 1f       	adc	r28, r25
    5e48:	d0 1d       	adc	r29, r0
    5e4a:	7e f4       	brtc	.+30     	; 0x5e6a <__ftoa_engine+0x146>
    5e4c:	70 33       	cpi	r23, 0x30	; 48
    5e4e:	11 f4       	brne	.+4      	; 0x5e54 <__ftoa_engine+0x130>
    5e50:	8a 95       	dec	r24
    5e52:	e6 cf       	rjmp	.-52     	; 0x5e20 <__ftoa_engine+0xfc>
    5e54:	e8 94       	clt
    5e56:	01 50       	subi	r16, 0x01	; 1
    5e58:	30 f0       	brcs	.+12     	; 0x5e66 <__ftoa_engine+0x142>
    5e5a:	08 0f       	add	r16, r24
    5e5c:	0a f4       	brpl	.+2      	; 0x5e60 <__ftoa_engine+0x13c>
    5e5e:	00 27       	eor	r16, r16
    5e60:	02 17       	cp	r16, r18
    5e62:	08 f4       	brcc	.+2      	; 0x5e66 <__ftoa_engine+0x142>
    5e64:	20 2f       	mov	r18, r16
    5e66:	23 95       	inc	r18
    5e68:	02 2f       	mov	r16, r18
    5e6a:	7a 33       	cpi	r23, 0x3A	; 58
    5e6c:	28 f0       	brcs	.+10     	; 0x5e78 <__ftoa_engine+0x154>
    5e6e:	79 e3       	ldi	r23, 0x39	; 57
    5e70:	7d 93       	st	X+, r23
    5e72:	2a 95       	dec	r18
    5e74:	e9 f7       	brne	.-6      	; 0x5e70 <__ftoa_engine+0x14c>
    5e76:	10 c0       	rjmp	.+32     	; 0x5e98 <__ftoa_engine+0x174>
    5e78:	7d 93       	st	X+, r23
    5e7a:	2a 95       	dec	r18
    5e7c:	89 f6       	brne	.-94     	; 0x5e20 <__ftoa_engine+0xfc>
    5e7e:	06 94       	lsr	r0
    5e80:	97 95       	ror	r25
    5e82:	67 95       	ror	r22
    5e84:	37 95       	ror	r19
    5e86:	17 95       	ror	r17
    5e88:	17 94       	ror	r1
    5e8a:	e1 18       	sub	r14, r1
    5e8c:	f1 0a       	sbc	r15, r17
    5e8e:	43 0b       	sbc	r20, r19
    5e90:	56 0b       	sbc	r21, r22
    5e92:	c9 0b       	sbc	r28, r25
    5e94:	d0 09       	sbc	r29, r0
    5e96:	98 f0       	brcs	.+38     	; 0x5ebe <__ftoa_engine+0x19a>
    5e98:	23 95       	inc	r18
    5e9a:	7e 91       	ld	r23, -X
    5e9c:	73 95       	inc	r23
    5e9e:	7a 33       	cpi	r23, 0x3A	; 58
    5ea0:	08 f0       	brcs	.+2      	; 0x5ea4 <__ftoa_engine+0x180>
    5ea2:	70 e3       	ldi	r23, 0x30	; 48
    5ea4:	7c 93       	st	X, r23
    5ea6:	20 13       	cpse	r18, r16
    5ea8:	b8 f7       	brcc	.-18     	; 0x5e98 <__ftoa_engine+0x174>
    5eaa:	7e 91       	ld	r23, -X
    5eac:	70 61       	ori	r23, 0x10	; 16
    5eae:	7d 93       	st	X+, r23
    5eb0:	30 f0       	brcs	.+12     	; 0x5ebe <__ftoa_engine+0x19a>
    5eb2:	83 95       	inc	r24
    5eb4:	71 e3       	ldi	r23, 0x31	; 49
    5eb6:	7d 93       	st	X+, r23
    5eb8:	70 e3       	ldi	r23, 0x30	; 48
    5eba:	2a 95       	dec	r18
    5ebc:	e1 f7       	brne	.-8      	; 0x5eb6 <__ftoa_engine+0x192>
    5ebe:	11 24       	eor	r1, r1
    5ec0:	ef 90       	pop	r14
    5ec2:	ff 90       	pop	r15
    5ec4:	0f 91       	pop	r16
    5ec6:	1f 91       	pop	r17
    5ec8:	cf 91       	pop	r28
    5eca:	df 91       	pop	r29
    5ecc:	99 27       	eor	r25, r25
    5ece:	87 fd       	sbrc	r24, 7
    5ed0:	90 95       	com	r25
    5ed2:	08 95       	ret

00005ed4 <strnlen_P>:
    5ed4:	fc 01       	movw	r30, r24
    5ed6:	05 90       	lpm	r0, Z+
    5ed8:	61 50       	subi	r22, 0x01	; 1
    5eda:	70 40       	sbci	r23, 0x00	; 0
    5edc:	01 10       	cpse	r0, r1
    5ede:	d8 f7       	brcc	.-10     	; 0x5ed6 <strnlen_P+0x2>
    5ee0:	80 95       	com	r24
    5ee2:	90 95       	com	r25
    5ee4:	8e 0f       	add	r24, r30
    5ee6:	9f 1f       	adc	r25, r31
    5ee8:	08 95       	ret

00005eea <strnlen>:
    5eea:	fc 01       	movw	r30, r24
    5eec:	61 50       	subi	r22, 0x01	; 1
    5eee:	70 40       	sbci	r23, 0x00	; 0
    5ef0:	01 90       	ld	r0, Z+
    5ef2:	01 10       	cpse	r0, r1
    5ef4:	d8 f7       	brcc	.-10     	; 0x5eec <strnlen+0x2>
    5ef6:	80 95       	com	r24
    5ef8:	90 95       	com	r25
    5efa:	8e 0f       	add	r24, r30
    5efc:	9f 1f       	adc	r25, r31
    5efe:	08 95       	ret

00005f00 <fputc>:
    5f00:	0f 93       	push	r16
    5f02:	1f 93       	push	r17
    5f04:	cf 93       	push	r28
    5f06:	df 93       	push	r29
    5f08:	18 2f       	mov	r17, r24
    5f0a:	09 2f       	mov	r16, r25
    5f0c:	eb 01       	movw	r28, r22
    5f0e:	8b 81       	ldd	r24, Y+3	; 0x03
    5f10:	81 fd       	sbrc	r24, 1
    5f12:	03 c0       	rjmp	.+6      	; 0x5f1a <fputc+0x1a>
    5f14:	8f ef       	ldi	r24, 0xFF	; 255
    5f16:	9f ef       	ldi	r25, 0xFF	; 255
    5f18:	20 c0       	rjmp	.+64     	; 0x5f5a <fputc+0x5a>
    5f1a:	82 ff       	sbrs	r24, 2
    5f1c:	10 c0       	rjmp	.+32     	; 0x5f3e <fputc+0x3e>
    5f1e:	4e 81       	ldd	r20, Y+6	; 0x06
    5f20:	5f 81       	ldd	r21, Y+7	; 0x07
    5f22:	2c 81       	ldd	r18, Y+4	; 0x04
    5f24:	3d 81       	ldd	r19, Y+5	; 0x05
    5f26:	42 17       	cp	r20, r18
    5f28:	53 07       	cpc	r21, r19
    5f2a:	7c f4       	brge	.+30     	; 0x5f4a <fputc+0x4a>
    5f2c:	e8 81       	ld	r30, Y
    5f2e:	f9 81       	ldd	r31, Y+1	; 0x01
    5f30:	9f 01       	movw	r18, r30
    5f32:	2f 5f       	subi	r18, 0xFF	; 255
    5f34:	3f 4f       	sbci	r19, 0xFF	; 255
    5f36:	39 83       	std	Y+1, r19	; 0x01
    5f38:	28 83       	st	Y, r18
    5f3a:	10 83       	st	Z, r17
    5f3c:	06 c0       	rjmp	.+12     	; 0x5f4a <fputc+0x4a>
    5f3e:	e8 85       	ldd	r30, Y+8	; 0x08
    5f40:	f9 85       	ldd	r31, Y+9	; 0x09
    5f42:	81 2f       	mov	r24, r17
    5f44:	09 95       	icall
    5f46:	89 2b       	or	r24, r25
    5f48:	29 f7       	brne	.-54     	; 0x5f14 <fputc+0x14>
    5f4a:	2e 81       	ldd	r18, Y+6	; 0x06
    5f4c:	3f 81       	ldd	r19, Y+7	; 0x07
    5f4e:	2f 5f       	subi	r18, 0xFF	; 255
    5f50:	3f 4f       	sbci	r19, 0xFF	; 255
    5f52:	3f 83       	std	Y+7, r19	; 0x07
    5f54:	2e 83       	std	Y+6, r18	; 0x06
    5f56:	81 2f       	mov	r24, r17
    5f58:	90 2f       	mov	r25, r16
    5f5a:	df 91       	pop	r29
    5f5c:	cf 91       	pop	r28
    5f5e:	1f 91       	pop	r17
    5f60:	0f 91       	pop	r16
    5f62:	08 95       	ret

00005f64 <sprintf>:
    5f64:	0f 93       	push	r16
    5f66:	1f 93       	push	r17
    5f68:	cf 93       	push	r28
    5f6a:	df 93       	push	r29
    5f6c:	cd b7       	in	r28, 0x3d	; 61
    5f6e:	de b7       	in	r29, 0x3e	; 62
    5f70:	2e 97       	sbiw	r28, 0x0e	; 14
    5f72:	0f b6       	in	r0, 0x3f	; 63
    5f74:	f8 94       	cli
    5f76:	de bf       	out	0x3e, r29	; 62
    5f78:	0f be       	out	0x3f, r0	; 63
    5f7a:	cd bf       	out	0x3d, r28	; 61
    5f7c:	0d 89       	ldd	r16, Y+21	; 0x15
    5f7e:	1e 89       	ldd	r17, Y+22	; 0x16
    5f80:	86 e0       	ldi	r24, 0x06	; 6
    5f82:	8c 83       	std	Y+4, r24	; 0x04
    5f84:	1a 83       	std	Y+2, r17	; 0x02
    5f86:	09 83       	std	Y+1, r16	; 0x01
    5f88:	8f ef       	ldi	r24, 0xFF	; 255
    5f8a:	9f e7       	ldi	r25, 0x7F	; 127
    5f8c:	9e 83       	std	Y+6, r25	; 0x06
    5f8e:	8d 83       	std	Y+5, r24	; 0x05
    5f90:	ae 01       	movw	r20, r28
    5f92:	47 5e       	subi	r20, 0xE7	; 231
    5f94:	5f 4f       	sbci	r21, 0xFF	; 255
    5f96:	6f 89       	ldd	r22, Y+23	; 0x17
    5f98:	78 8d       	ldd	r23, Y+24	; 0x18
    5f9a:	ce 01       	movw	r24, r28
    5f9c:	01 96       	adiw	r24, 0x01	; 1
    5f9e:	31 db       	rcall	.-2462   	; 0x5602 <vfprintf>
    5fa0:	ef 81       	ldd	r30, Y+7	; 0x07
    5fa2:	f8 85       	ldd	r31, Y+8	; 0x08
    5fa4:	e0 0f       	add	r30, r16
    5fa6:	f1 1f       	adc	r31, r17
    5fa8:	10 82       	st	Z, r1
    5faa:	2e 96       	adiw	r28, 0x0e	; 14
    5fac:	0f b6       	in	r0, 0x3f	; 63
    5fae:	f8 94       	cli
    5fb0:	de bf       	out	0x3e, r29	; 62
    5fb2:	0f be       	out	0x3f, r0	; 63
    5fb4:	cd bf       	out	0x3d, r28	; 61
    5fb6:	df 91       	pop	r29
    5fb8:	cf 91       	pop	r28
    5fba:	1f 91       	pop	r17
    5fbc:	0f 91       	pop	r16
    5fbe:	08 95       	ret

00005fc0 <__ultoa_invert>:
    5fc0:	fa 01       	movw	r30, r20
    5fc2:	aa 27       	eor	r26, r26
    5fc4:	28 30       	cpi	r18, 0x08	; 8
    5fc6:	51 f1       	breq	.+84     	; 0x601c <__ultoa_invert+0x5c>
    5fc8:	20 31       	cpi	r18, 0x10	; 16
    5fca:	81 f1       	breq	.+96     	; 0x602c <__ultoa_invert+0x6c>
    5fcc:	e8 94       	clt
    5fce:	6f 93       	push	r22
    5fd0:	6e 7f       	andi	r22, 0xFE	; 254
    5fd2:	6e 5f       	subi	r22, 0xFE	; 254
    5fd4:	7f 4f       	sbci	r23, 0xFF	; 255
    5fd6:	8f 4f       	sbci	r24, 0xFF	; 255
    5fd8:	9f 4f       	sbci	r25, 0xFF	; 255
    5fda:	af 4f       	sbci	r26, 0xFF	; 255
    5fdc:	b1 e0       	ldi	r27, 0x01	; 1
    5fde:	3e d0       	rcall	.+124    	; 0x605c <__ultoa_invert+0x9c>
    5fe0:	b4 e0       	ldi	r27, 0x04	; 4
    5fe2:	3c d0       	rcall	.+120    	; 0x605c <__ultoa_invert+0x9c>
    5fe4:	67 0f       	add	r22, r23
    5fe6:	78 1f       	adc	r23, r24
    5fe8:	89 1f       	adc	r24, r25
    5fea:	9a 1f       	adc	r25, r26
    5fec:	a1 1d       	adc	r26, r1
    5fee:	68 0f       	add	r22, r24
    5ff0:	79 1f       	adc	r23, r25
    5ff2:	8a 1f       	adc	r24, r26
    5ff4:	91 1d       	adc	r25, r1
    5ff6:	a1 1d       	adc	r26, r1
    5ff8:	6a 0f       	add	r22, r26
    5ffa:	71 1d       	adc	r23, r1
    5ffc:	81 1d       	adc	r24, r1
    5ffe:	91 1d       	adc	r25, r1
    6000:	a1 1d       	adc	r26, r1
    6002:	20 d0       	rcall	.+64     	; 0x6044 <__ultoa_invert+0x84>
    6004:	09 f4       	brne	.+2      	; 0x6008 <__ultoa_invert+0x48>
    6006:	68 94       	set
    6008:	3f 91       	pop	r19
    600a:	2a e0       	ldi	r18, 0x0A	; 10
    600c:	26 9f       	mul	r18, r22
    600e:	11 24       	eor	r1, r1
    6010:	30 19       	sub	r19, r0
    6012:	30 5d       	subi	r19, 0xD0	; 208
    6014:	31 93       	st	Z+, r19
    6016:	de f6       	brtc	.-74     	; 0x5fce <__ultoa_invert+0xe>
    6018:	cf 01       	movw	r24, r30
    601a:	08 95       	ret
    601c:	46 2f       	mov	r20, r22
    601e:	47 70       	andi	r20, 0x07	; 7
    6020:	40 5d       	subi	r20, 0xD0	; 208
    6022:	41 93       	st	Z+, r20
    6024:	b3 e0       	ldi	r27, 0x03	; 3
    6026:	0f d0       	rcall	.+30     	; 0x6046 <__ultoa_invert+0x86>
    6028:	c9 f7       	brne	.-14     	; 0x601c <__ultoa_invert+0x5c>
    602a:	f6 cf       	rjmp	.-20     	; 0x6018 <__ultoa_invert+0x58>
    602c:	46 2f       	mov	r20, r22
    602e:	4f 70       	andi	r20, 0x0F	; 15
    6030:	40 5d       	subi	r20, 0xD0	; 208
    6032:	4a 33       	cpi	r20, 0x3A	; 58
    6034:	18 f0       	brcs	.+6      	; 0x603c <__ultoa_invert+0x7c>
    6036:	49 5d       	subi	r20, 0xD9	; 217
    6038:	31 fd       	sbrc	r19, 1
    603a:	40 52       	subi	r20, 0x20	; 32
    603c:	41 93       	st	Z+, r20
    603e:	02 d0       	rcall	.+4      	; 0x6044 <__ultoa_invert+0x84>
    6040:	a9 f7       	brne	.-22     	; 0x602c <__ultoa_invert+0x6c>
    6042:	ea cf       	rjmp	.-44     	; 0x6018 <__ultoa_invert+0x58>
    6044:	b4 e0       	ldi	r27, 0x04	; 4
    6046:	a6 95       	lsr	r26
    6048:	97 95       	ror	r25
    604a:	87 95       	ror	r24
    604c:	77 95       	ror	r23
    604e:	67 95       	ror	r22
    6050:	ba 95       	dec	r27
    6052:	c9 f7       	brne	.-14     	; 0x6046 <__ultoa_invert+0x86>
    6054:	00 97       	sbiw	r24, 0x00	; 0
    6056:	61 05       	cpc	r22, r1
    6058:	71 05       	cpc	r23, r1
    605a:	08 95       	ret
    605c:	9b 01       	movw	r18, r22
    605e:	ac 01       	movw	r20, r24
    6060:	0a 2e       	mov	r0, r26
    6062:	06 94       	lsr	r0
    6064:	57 95       	ror	r21
    6066:	47 95       	ror	r20
    6068:	37 95       	ror	r19
    606a:	27 95       	ror	r18
    606c:	ba 95       	dec	r27
    606e:	c9 f7       	brne	.-14     	; 0x6062 <__ultoa_invert+0xa2>
    6070:	62 0f       	add	r22, r18
    6072:	73 1f       	adc	r23, r19
    6074:	84 1f       	adc	r24, r20
    6076:	95 1f       	adc	r25, r21
    6078:	a0 1d       	adc	r26, r0
    607a:	08 95       	ret

0000607c <__do_global_dtors>:
    607c:	17 e0       	ldi	r17, 0x07	; 7
    607e:	c0 ea       	ldi	r28, 0xA0	; 160
    6080:	d7 e0       	ldi	r29, 0x07	; 7
    6082:	00 e0       	ldi	r16, 0x00	; 0
    6084:	05 c0       	rjmp	.+10     	; 0x6090 <__do_global_dtors+0x14>
    6086:	22 97       	sbiw	r28, 0x02	; 2
    6088:	01 09       	sbc	r16, r1
    608a:	fe 01       	movw	r30, r28
    608c:	0b bf       	out	0x3b, r16	; 59
    608e:	46 de       	rcall	.-884    	; 0x5d1c <__tablejump_elpm__>
    6090:	c2 3a       	cpi	r28, 0xA2	; 162
    6092:	d1 07       	cpc	r29, r17
    6094:	80 e0       	ldi	r24, 0x00	; 0
    6096:	08 07       	cpc	r16, r24
    6098:	b1 f7       	brne	.-20     	; 0x6086 <__do_global_dtors+0xa>
    609a:	f8 94       	cli

0000609c <__stop_program>:
    609c:	ff cf       	rjmp	.-2      	; 0x609c <__stop_program>
