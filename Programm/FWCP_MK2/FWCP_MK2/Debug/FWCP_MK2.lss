
FWCP_MK2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000218  00800100  0000630e  000063a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000630e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000499  00800318  00800318  000065ba  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000065ba  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000003c8  00000000  00000000  00006616  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00008742  00000000  00000000  000069de  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001647  00000000  00000000  0000f120  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000033c2  00000000  00000000  00010767  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000e88  00000000  00000000  00013b2c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000011d5  00000000  00000000  000149b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00006500  00000000  00000000  00015b89  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000003b0  00000000  00000000  0001c089  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	d0 c4       	rjmp	.+2464   	; 0x9a2 <__dtors_end>
       2:	00 00       	nop
       4:	fd c4       	rjmp	.+2554   	; 0xa00 <__bad_interrupt>
       6:	00 00       	nop
       8:	fb c4       	rjmp	.+2550   	; 0xa00 <__bad_interrupt>
       a:	00 00       	nop
       c:	f9 c4       	rjmp	.+2546   	; 0xa00 <__bad_interrupt>
       e:	00 00       	nop
      10:	f7 c4       	rjmp	.+2542   	; 0xa00 <__bad_interrupt>
      12:	00 00       	nop
      14:	f5 c4       	rjmp	.+2538   	; 0xa00 <__bad_interrupt>
      16:	00 00       	nop
      18:	f3 c4       	rjmp	.+2534   	; 0xa00 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	f1 c4       	rjmp	.+2530   	; 0xa00 <__bad_interrupt>
      1e:	00 00       	nop
      20:	ef c4       	rjmp	.+2526   	; 0xa00 <__bad_interrupt>
      22:	00 00       	nop
      24:	ed c4       	rjmp	.+2522   	; 0xa00 <__bad_interrupt>
      26:	00 00       	nop
      28:	eb c4       	rjmp	.+2518   	; 0xa00 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	0c 94 0d 1b 	jmp	0x361a	; 0x361a <__vector_11>
      30:	e7 c4       	rjmp	.+2510   	; 0xa00 <__bad_interrupt>
      32:	00 00       	nop
      34:	e5 c4       	rjmp	.+2506   	; 0xa00 <__bad_interrupt>
      36:	00 00       	nop
      38:	e3 c4       	rjmp	.+2502   	; 0xa00 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	e1 c4       	rjmp	.+2498   	; 0xa00 <__bad_interrupt>
      3e:	00 00       	nop
      40:	df c4       	rjmp	.+2494   	; 0xa00 <__bad_interrupt>
      42:	00 00       	nop
      44:	dd c4       	rjmp	.+2490   	; 0xa00 <__bad_interrupt>
      46:	00 00       	nop
      48:	db c4       	rjmp	.+2486   	; 0xa00 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	d9 c4       	rjmp	.+2482   	; 0xa00 <__bad_interrupt>
      4e:	00 00       	nop
      50:	d7 c4       	rjmp	.+2478   	; 0xa00 <__bad_interrupt>
      52:	00 00       	nop
      54:	d5 c4       	rjmp	.+2474   	; 0xa00 <__bad_interrupt>
      56:	00 00       	nop
      58:	d3 c4       	rjmp	.+2470   	; 0xa00 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	d1 c4       	rjmp	.+2466   	; 0xa00 <__bad_interrupt>
      5e:	00 00       	nop
      60:	cf c4       	rjmp	.+2462   	; 0xa00 <__bad_interrupt>
      62:	00 00       	nop
      64:	cd c4       	rjmp	.+2458   	; 0xa00 <__bad_interrupt>
      66:	00 00       	nop
      68:	cb c4       	rjmp	.+2454   	; 0xa00 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	c9 c4       	rjmp	.+2450   	; 0xa00 <__bad_interrupt>
      6e:	00 00       	nop
      70:	c7 c4       	rjmp	.+2446   	; 0xa00 <__bad_interrupt>
      72:	00 00       	nop
      74:	c5 c4       	rjmp	.+2442   	; 0xa00 <__bad_interrupt>
      76:	00 00       	nop
      78:	c3 c4       	rjmp	.+2438   	; 0xa00 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	c1 c4       	rjmp	.+2434   	; 0xa00 <__bad_interrupt>
      7e:	00 00       	nop
      80:	bf c4       	rjmp	.+2430   	; 0xa00 <__bad_interrupt>
      82:	00 00       	nop
      84:	bd c4       	rjmp	.+2426   	; 0xa00 <__bad_interrupt>
      86:	00 00       	nop
      88:	bb c4       	rjmp	.+2422   	; 0xa00 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	5e 18       	sub	r5, r14
      8e:	86 18       	sub	r8, r6
      90:	b0 18       	sub	r11, r0
      92:	db 18       	sub	r13, r11
      94:	05 19       	sub	r16, r5
      96:	2e 19       	sub	r18, r14
      98:	56 19       	sub	r21, r6
      9a:	7f 19       	sub	r23, r15
      9c:	f7 19       	sub	r31, r7
      9e:	22 1a       	sub	r2, r18
      a0:	dc 1e       	adc	r13, r28
      a2:	e7 1e       	adc	r14, r23
      a4:	f5 1e       	adc	r15, r21
      a6:	fb 1e       	adc	r15, r27
      a8:	02 1f       	adc	r16, r18
      aa:	09 1f       	adc	r16, r25
      ac:	17 1f       	adc	r17, r23
      ae:	a6 1f       	adc	r26, r22
      b0:	ac 1f       	adc	r26, r28
      b2:	b2 1f       	adc	r27, r18
      b4:	b8 1f       	adc	r27, r24
      b6:	be 1f       	adc	r27, r30
      b8:	c4 1f       	adc	r28, r20
      ba:	ca 1f       	adc	r28, r26
      bc:	d0 1f       	adc	r29, r16
      be:	08 4a       	sbci	r16, 0xA8	; 168
      c0:	d7 3b       	cpi	r29, 0xB7	; 183
      c2:	3b ce       	rjmp	.-906    	; 0xfffffd3a <__eeprom_end+0xff7efd3a>
      c4:	01 6e       	ori	r16, 0xE1	; 225
      c6:	84 bc       	out	0x24, r8	; 36
      c8:	bf fd       	.word	0xfdbf	; ????
      ca:	c1 2f       	mov	r28, r17
      cc:	3d 6c       	ori	r19, 0xCD	; 205
      ce:	74 31       	cpi	r23, 0x14	; 20
      d0:	9a bd       	out	0x2a, r25	; 42
      d2:	56 83       	std	Z+6, r21	; 0x06
      d4:	3d da       	rcall	.-2950   	; 0xfffff550 <__eeprom_end+0xff7ef550>
      d6:	3d 00       	.word	0x003d	; ????
      d8:	c7 7f       	andi	r28, 0xF7	; 247
      da:	11 be       	out	0x31, r1	; 49
      dc:	d9 e4       	ldi	r29, 0x49	; 73
      de:	bb 4c       	sbci	r27, 0xCB	; 203
      e0:	3e 91       	ld	r19, -X
      e2:	6b aa       	std	Y+51, r6	; 0x33
      e4:	aa be       	out	0x3a, r10	; 58
      e6:	00 00       	nop
      e8:	00 80       	ld	r0, Z
      ea:	3f 05       	cpc	r19, r15
      ec:	a8 4c       	sbci	r26, 0xC8	; 200
      ee:	cd b2       	in	r12, 0x1d	; 29
      f0:	d4 4e       	sbci	r29, 0xE4	; 228
      f2:	b9 38       	cpi	r27, 0x89	; 137
      f4:	36 a9       	ldd	r19, Z+54	; 0x36
      f6:	02 0c       	add	r0, r2
      f8:	50 b9       	out	0x00, r21	; 0
      fa:	91 86       	std	Z+9, r9	; 0x09
      fc:	88 08       	sbc	r8, r8
      fe:	3c a6       	std	Y+44, r3	; 0x2c
     100:	aa aa       	std	Y+50, r10	; 0x32
     102:	2a be       	out	0x3a, r2	; 58
     104:	00 00       	nop
     106:	00 80       	ld	r0, Z
     108:	3f 08       	sbc	r3, r15
     10a:	00 00       	nop
     10c:	00 be       	out	0x30, r0	; 48
     10e:	92 24       	eor	r9, r2
     110:	49 12       	cpse	r4, r25
     112:	3e ab       	std	Y+54, r19	; 0x36
     114:	aa aa       	std	Y+50, r10	; 0x32
     116:	2a be       	out	0x3a, r2	; 58
     118:	cd cc       	rjmp	.-1638   	; 0xfffffab4 <__eeprom_end+0xff7efab4>
     11a:	cc 4c       	sbci	r28, 0xCC	; 204
     11c:	3e 00       	.word	0x003e	; ????
     11e:	00 00       	nop
     120:	80 be       	out	0x30, r8	; 48
     122:	ab aa       	std	Y+51, r10	; 0x33
     124:	aa aa       	std	Y+50, r10	; 0x32
     126:	3e 00       	.word	0x003e	; ????
     128:	00 00       	nop
     12a:	00 bf       	out	0x30, r16	; 48
     12c:	00 00       	nop
     12e:	00 80       	ld	r0, Z
     130:	3f 00       	.word	0x003f	; ????
     132:	00 00       	nop
     134:	00 00       	nop
     136:	08 41       	sbci	r16, 0x18	; 24
     138:	78 d3       	rcall	.+1776   	; 0x82a <_ZL7font5x8+0x164>
     13a:	bb 43       	sbci	r27, 0x3B	; 59
     13c:	87 d1       	rcall	.+782    	; 0x44c <_ZL7Pikachu+0xc6>
     13e:	13 3d       	cpi	r17, 0xD3	; 211
     140:	19 0e       	add	r1, r25
     142:	3c c3       	rjmp	.+1656   	; 0x7bc <_ZL7font5x8+0xf6>
     144:	bd 42       	sbci	r27, 0x2D	; 45
     146:	82 ad       	ldd	r24, Z+58	; 0x3a
     148:	2b 3e       	cpi	r18, 0xEB	; 235
     14a:	68 ec       	ldi	r22, 0xC8	; 200
     14c:	82 76       	andi	r24, 0x62	; 98
     14e:	be d9       	rcall	.-3204   	; 0xfffff4cc <__eeprom_end+0xff7ef4cc>
     150:	8f e1       	ldi	r24, 0x1F	; 31
     152:	a9 3e       	cpi	r26, 0xE9	; 233
     154:	4c 80       	ldd	r4, Y+4	; 0x04
     156:	ef ff       	.word	0xffef	; ????
     158:	be 01       	movw	r22, r28
     15a:	c4 ff       	sbrs	r28, 4
     15c:	7f 3f       	cpi	r23, 0xFF	; 255
     15e:	00 00       	nop
     160:	00 00       	nop
     162:	00 06       	cpc	r0, r16
     164:	64 ec       	ldi	r22, 0xC4	; 196
     166:	1b 3c       	cpi	r17, 0xCB	; 203
     168:	04 bc       	out	0x24, r0	; 36
     16a:	16 3e       	cpi	r17, 0xE6	; 230
     16c:	3b e5       	ldi	r19, 0x5B	; 91
     16e:	b9 3c       	cpi	r27, 0xC9	; 201
     170:	c9 3c       	cpi	r28, 0xC9	; 201
     172:	37 c2       	rjmp	.+1134   	; 0x5e2 <_ZL11digits16x16+0x5c>
     174:	9e 5a       	subi	r25, 0xAE	; 174
     176:	3d 66       	ori	r19, 0x6D	; 109
     178:	04 98       	cbi	0x00, 4	; 0
     17a:	08 3e       	cpi	r16, 0xE8	; 232
     17c:	ea 69       	ori	r30, 0x9A	; 154
     17e:	aa aa       	std	Y+50, r10	; 0x32
     180:	3e 00       	.word	0x003e	; ????
     182:	00 00       	nop
     184:	80 3f       	cpi	r24, 0xF0	; 240

00000186 <__trampolines_end>:
	...
     196:	00 00       	nop
     198:	00 18       	sub	r0, r0
     19a:	18 00       	.word	0x0018	; ????
     19c:	18 18       	sub	r1, r8
     19e:	a0 e0       	ldi	r26, 0x00	; 0
     1a0:	e0 e0       	ldi	r30, 0x00	; 0
     1a2:	e0 40       	sbci	r30, 0x00	; 0
     1a4:	40 c0       	rjmp	.+128    	; 0x226 <__trampolines_end+0xa0>
     1a6:	80 80       	ld	r8, Z
	...
     1b8:	00 00       	nop
     1ba:	00 c0       	rjmp	.+0      	; 0x1bc <__trampolines_end+0x36>
     1bc:	80 00       	.word	0x0080	; ????
	...
     1c6:	00 00       	nop
     1c8:	00 78       	andi	r16, 0x80	; 128
     1ca:	78 fe       	.word	0xfe78	; ????
     1cc:	7f fc       	.word	0xfc7f	; ????
     1ce:	e0 00       	.word	0x00e0	; ????
     1d0:	00 00       	nop
     1d2:	00 00       	nop
     1d4:	00 80       	ld	r0, Z
     1d6:	80 00       	.word	0x0080	; ????
     1d8:	00 00       	nop
     1da:	00 80       	ld	r0, Z
     1dc:	80 40       	sbci	r24, 0x00	; 0
     1de:	ff ff       	.word	0xffff	; ????
     1e0:	3f c3       	rjmp	.+1662   	; 0x860 <_ZL7font5x8+0x19a>
     1e2:	c3 fc       	sbrc	r12, 3
     1e4:	ff fe       	.word	0xfeff	; ????
     1e6:	fd fd       	.word	0xfdfd	; ????
     1e8:	fb e7       	ldi	r31, 0x7B	; 123
     1ea:	e7 de       	rcall	.-562    	; 0xffffffba <__eeprom_end+0xff7effba>
     1ec:	bc 7c       	andi	r27, 0xCC	; 204
     1ee:	f8 e0       	ldi	r31, 0x08	; 8
     1f0:	c0 80       	ld	r12, Z
     1f2:	80 00       	.word	0x0080	; ????
     1f4:	00 00       	nop
     1f6:	00 00       	nop
     1f8:	00 80       	ld	r0, Z
     1fa:	80 e1       	ldi	r24, 0x10	; 16
     1fc:	ff ff       	.word	0xffff	; ????
     1fe:	ff fe       	.word	0xfeff	; ????
     200:	f8 e0       	ldi	r31, 0x08	; 8
     202:	e0 c0       	rjmp	.+448    	; 0x3c4 <_ZL7Pikachu+0x3e>
     204:	00 00       	nop
     206:	00 00       	nop
     208:	ff 7e       	andi	r31, 0xEF	; 239
     20a:	7e 80       	ldd	r7, Y+6	; 0x06
     20c:	e1 03       	fmuls	r22, r17
     20e:	85 3b       	cpi	r24, 0xB5	; 181
     210:	e0 40       	sbci	r30, 0x00	; 0
     212:	40 78       	andi	r20, 0x80	; 128
     214:	3d 7d       	andi	r19, 0xDD	; 221
     216:	fd f8       	.word	0xf8fd	; ????
     218:	ff f8       	.word	0xf8ff	; ????
     21a:	f8 fb       	.word	0xfbf8	; ????
     21c:	e7 5f       	subi	r30, 0xF7	; 247
     21e:	fe fc       	.word	0xfcfe	; ????
     220:	fb e7       	ldi	r31, 0x7B	; 123
     222:	e7 df       	rcall	.-50     	; 0x1f2 <__trampolines_end+0x6c>
     224:	a7 47       	sbci	r26, 0x77	; 119
     226:	47 9f       	mul	r20, r23
     228:	1f 1f       	adc	r17, r31
     22a:	1f 3f       	cpi	r17, 0xFF	; 255
     22c:	3f 7e       	andi	r19, 0xEF	; 239
     22e:	7f fb       	.word	0xfb7f	; ????
     230:	c7 ff       	sbrs	r28, 7
     232:	ff ff       	.word	0xffff	; ????
     234:	fe fc       	.word	0xfcfe	; ????
     236:	e0 80       	ld	r14, Z
     238:	7f ff       	.word	0xff7f	; ????
     23a:	ff ff       	.word	0xffff	; ????
     23c:	ff ff       	.word	0xffff	; ????
     23e:	ff ff       	.word	0xffff	; ????
     240:	ff ff       	.word	0xffff	; ????
     242:	ff ff       	.word	0xffff	; ????
     244:	fe 00       	.word	0x00fe	; ????
     246:	00 fc       	sbrc	r0, 0
     248:	1f e0       	ldi	r17, 0x0F	; 15
     24a:	e0 3f       	cpi	r30, 0xF0	; 240
     24c:	ff 00       	.word	0x00ff	; ????
     24e:	87 41       	sbci	r24, 0x17	; 23
     250:	40 00       	.word	0x0040	; ????
     252:	00 80       	ld	r0, Z
     254:	00 78       	andi	r16, 0x80	; 128
     256:	fc ff       	.word	0xfffc	; ????
     258:	ff e3       	ldi	r31, 0x3F	; 63
     25a:	e3 d9       	rcall	.-3130   	; 0xfffff622 <__eeprom_end+0xff7ef622>
     25c:	c3 c1       	rjmp	.+902    	; 0x5e4 <_ZL11digits16x16+0x5e>
     25e:	20 ff       	sbrs	r18, 0
     260:	ff 3f       	cpi	r31, 0xFF	; 255
     262:	3f 1f       	adc	r19, r31
     264:	07 07       	cpc	r16, r23
     266:	07 62       	ori	r16, 0x27	; 39
     268:	86 1f       	adc	r24, r22
     26a:	1d 38       	cpi	r17, 0x8D	; 141
     26c:	e4 c0       	rjmp	.+456    	; 0x436 <_ZL7Pikachu+0xb0>
     26e:	a0 c1       	rjmp	.+832    	; 0x5b0 <_ZL11digits16x16+0x2a>
     270:	9f ff       	.word	0xff9f	; ????
     272:	ff f9       	.word	0xf9ff	; ????
     274:	c7 3f       	cpi	r28, 0xF7	; 247
     276:	ff ff       	.word	0xffff	; ????
     278:	fe e0       	ldi	r31, 0x0E	; 14
     27a:	e0 03       	fmuls	r22, r16
     27c:	ff ff       	.word	0xffff	; ????
     27e:	ff 3f       	cpi	r31, 0xFF	; 255
     280:	3f 3f       	cpi	r19, 0xFF	; 255
     282:	3f 1f       	adc	r19, r31
     284:	03 00       	.word	0x0003	; ????
     286:	00 ff       	sbrs	r16, 0
     288:	00 03       	mulsu	r16, r16
     28a:	03 00       	.word	0x0003	; ????
     28c:	1f f8       	.word	0xf81f	; ????
     28e:	00 01       	movw	r0, r0
     290:	1e fc       	.word	0xfc1e	; ????
     292:	fc 3a       	cpi	r31, 0xAC	; 172
     294:	1f 43       	sbci	r17, 0x3F	; 63
     296:	86 3f       	cpi	r24, 0xF6	; 246
     298:	7f 7f       	andi	r23, 0xFF	; 255
     29a:	7f ff       	.word	0xff7f	; ????
     29c:	5f 7f       	andi	r21, 0xFF	; 255
     29e:	3c 03       	fmul	r19, r20
     2a0:	00 00       	nop
     2a2:	00 00       	nop
     2a4:	c0 80       	ld	r12, Z
     2a6:	c0 b8       	out	0x00, r12	; 0
     2a8:	86 c0       	rjmp	.+268    	; 0x3b6 <_ZL7Pikachu+0x30>
     2aa:	c0 c0       	rjmp	.+384    	; 0x42c <_ZL7Pikachu+0xa6>
     2ac:	e0 ff       	sbrs	r30, 0
     2ae:	ff 7f       	andi	r31, 0xFF	; 255
     2b0:	03 07       	cpc	r16, r19
     2b2:	07 07       	cpc	r16, r23
     2b4:	83 c0       	rjmp	.+262    	; 0x3bc <_ZL7Pikachu+0x36>
     2b6:	c1 e7       	ldi	r28, 0x71	; 113
     2b8:	fb fd       	.word	0xfdfb	; ????
     2ba:	fd fe       	.word	0xfefd	; ????
     2bc:	ff 3f       	cpi	r31, 0xFF	; 255
     2be:	03 00       	.word	0x0003	; ????
     2c0:	00 00       	nop
     2c2:	00 00       	nop
     2c4:	00 00       	nop
     2c6:	00 03       	mulsu	r16, r16
     2c8:	00 07       	cpc	r16, r16
     2ca:	07 3c       	cpi	r16, 0xC7	; 199
     2cc:	18 20       	and	r1, r8
     2ce:	c3 3c       	cpi	r28, 0xC3	; 195
     2d0:	78 fc       	.word	0xfc78	; ????
     2d2:	fc ff       	.word	0xfffc	; ????
     2d4:	7e 38       	cpi	r23, 0x8E	; 142
     2d6:	00 1c       	adc	r0, r0
     2d8:	02 00       	.word	0x0002	; ????
     2da:	00 01       	movw	r0, r0
     2dc:	00 00       	nop
     2de:	00 00       	nop
     2e0:	05 19       	sub	r16, r5
     2e2:	19 27       	eor	r17, r25
     2e4:	47 3f       	cpi	r20, 0xF7	; 247
     2e6:	3f 1f       	adc	r19, r31
     2e8:	7f ff       	.word	0xff7f	; ????
     2ea:	e7 7d       	andi	r30, 0xD7	; 215
     2ec:	3d 3e       	cpi	r19, 0xED	; 237
     2ee:	3e 7f       	andi	r19, 0xFE	; 254
     2f0:	ff fe       	.word	0xfeff	; ????
     2f2:	fe fe       	.word	0xfefe	; ????
     2f4:	fd f9       	.word	0xf9fd	; ????
     2f6:	c3 03       	fmuls	r20, r19
     2f8:	03 01       	movw	r0, r6
     2fa:	01 01       	movw	r0, r2
	...
     30c:	00 00       	nop
     30e:	05 00       	.word	0x0005	; ????
     310:	47 02       	muls	r20, r23
     312:	02 06       	cpc	r0, r18
     314:	7e fe       	.word	0xfe7e	; ????
     316:	fc f8       	.word	0xf8fc	; ????
     318:	e0 c0       	rjmp	.+448    	; 0x4da <_ZL7Pikachu+0x154>
     31a:	c0 80       	ld	r12, Z
     31c:	40 80       	ld	r4, Z
     31e:	80 80       	ld	r8, Z
     320:	80 c0       	rjmp	.+256    	; 0x422 <_ZL7Pikachu+0x9c>
     322:	c0 c0       	rjmp	.+384    	; 0x4a4 <_ZL7Pikachu+0x11e>
     324:	c0 e0       	ldi	r28, 0x00	; 0
     326:	f8 fd       	.word	0xfdf8	; ????
     328:	c0 40       	sbci	r28, 0x00	; 0
     32a:	40 00       	.word	0x0040	; ????
     32c:	80 00       	.word	0x0080	; ????
     32e:	00 00       	nop
     330:	01 87       	std	Z+9, r16	; 0x09
     332:	87 bf       	out	0x37, r24	; 55
     334:	ff ff       	.word	0xffff	; ????
     336:	7f 3e       	cpi	r23, 0xEF	; 239
	...
     34c:	00 00       	nop
     34e:	60 98       	cbi	0x0c, 0	; 12
     350:	24 20       	and	r2, r4
     352:	00 40       	sbci	r16, 0x00	; 0
     354:	40 45       	sbci	r20, 0x50	; 80
     356:	1f 7f       	andi	r17, 0xFF	; 255
     358:	7f 7f       	andi	r23, 0xFF	; 255
     35a:	7f 7f       	andi	r23, 0xFF	; 255
     35c:	1f 1c       	adc	r1, r15
     35e:	18 39       	cpi	r17, 0x98	; 152
     360:	01 01       	movw	r0, r2
     362:	01 01       	movw	r0, r2
     364:	01 01       	movw	r0, r2
     366:	01 01       	movw	r0, r2
     368:	01 00       	.word	0x0001	; ????
     36a:	00 00       	nop
     36c:	00 00       	nop
     36e:	01 04       	cpc	r0, r1
     370:	80 20       	and	r8, r0
     372:	20 7b       	andi	r18, 0xB0	; 176
     374:	df 3f       	cpi	r29, 0xFF	; 255
     376:	9f 27       	eor	r25, r31
     378:	67 c6       	rjmp	.+3278   	; 0x1048 <_ZN7Display12draw_pikachuEv+0x1c>
     37a:	c6 00       	.word	0x00c6	; ????
     37c:	98 3c       	cpi	r25, 0xC8	; 200
     37e:	e0 40       	sbci	r30, 0x00	; 0
     380:	00 00       	nop
     382:	00 00       	nop
	...

00000386 <_ZL7Pikachu>:
	...
     3d2:	00 3c f8 e0 c0 80 00 00 00 00 00 00 00 00 00 00     .<..............
     3e2:	00 00 00 00 80 80 c0 c0 c0 e0 e0 78 38 1c 84 c0     ...........x8...
     3f2:	c0 e0 f8 fc fe 7f 00 00 00 00 00 00 00 00 00 00     ................
	...
     412:	00 00 00 83 7f 7f 9f 06 06 02 02 02 02 02 82 42     ...............B
     422:	42 c2 83 07 07 1f 3f e7 e7 81 00 04 de ff ff ff     B.....?.........
     432:	ff ff ff fd f8 e0 40 00 00 00 00 00 00 00 00 00     ......@.........
	...
     452:	00 f8 fe 7f 06 c6 03 00 00 98 98 00 00 00 c3 06     ................
     462:	06 07 03 78 fc fc fc 78 78 03 9e f8 c0 00 01 03     ...x...xx.......
     472:	03 07 9f ff fd 78 00 00 00 00 00 00 00 00 00 00     .....x..........
	...
     492:	00 c0 b9 86 00 c0 f9 fd fd fc fc fd fd fd fc f8     ................
     4a2:	f8 f8 e0 fc 80 80 20 78 78 7e 7f ff ff ff f8 c0     ...... xx~......
     4b2:	c0 ff 3f 1f 00 00 00 00 00 00 00 00 00 00 00 00     ..?.............
	...
     4d2:	00 01 03 03 1e ff ff ff ff ff ff ff ff ff ff ff     ................
     4e2:	ff ff ff 7f 3b 19 00 00 00 00 01 03 83 e3 3f 01     ....;.........?.
     4f2:	01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     516:	00 00 03 3f 3f 3f 3f 3f 1f 07 07 07 07 03 3b 3e     ...?????......;>
     526:	3e 3c 3c 1c 1c 04 06 03 01 00 00 00 00 00 00 00     ><<.............
	...

00000586 <_ZL11digits16x16>:
     586:	00 e0 f8 fc fe 1e 07 07 07 07 1e fe fc f8 f0 00     ................
     596:	00 07 0f 3f 3f 7c 70 70 70 70 7c 3f 1f 1f 07 00     ...??|pppp|?....
     5a6:	00 00 00 06 07 07 ff ff ff ff 00 00 00 00 00 00     ................
     5b6:	00 00 00 00 00 00 7f 7f 7f 7f 00 00 00 00 00 00     ................
     5c6:	00 38 3c 3e 3e 0f 07 07 07 cf ff fe fe 38 00 00     .8<>>........8..
     5d6:	00 40 40 60 70 78 7c 7e 7f 77 73 71 70 70 00 00     .@@`px|~.wsqpp..
     5e6:	00 18 1c 1e 1e 0f c7 c7 e7 ff fe be 9c 00 00 00     ................
     5f6:	00 0c 1c 3c 3c 78 70 70 70 79 7f 3f 1f 0f 00 00     ...<<xpppy.?....
     606:	00 00 80 c0 e0 70 38 1c 1e ff ff ff ff 00 00 00     .....p8.........
     616:	06 07 07 07 06 06 06 06 06 7f 7f 7f 7f 06 06 00     ................
     626:	00 00 00 00 f0 ff ff ff e7 e7 e7 e7 c7 87 00 00     ................
     636:	00 00 38 78 71 70 70 70 70 70 39 3f 3f 1f 0f 00     ..8xqppppp9??...
     646:	00 80 e0 f0 f8 fc 7f 7f 6f 67 e1 e1 c0 80 00 00     ........og......
     656:	00 0f 1f 3f 3f 78 70 70 70 70 78 3f 3f 1f 0f 00     ...??xppppx??...
     666:	00 07 07 07 07 07 c7 e7 f7 ff 7f 3f 1f 07 03 01     ...........?....
     676:	00 20 38 7c 7e 3f 0f 07 03 00 00 00 00 00 00 00     . 8|~?..........
     686:	00 00 00 1c be fe ff e7 c3 c3 e7 ff fe be 1c 00     ................
     696:	00 00 0e 3f 3f 7f 71 60 60 60 71 7f 3f 3f 0f 00     ...??.q```q.??..
     6a6:	00 78 fc fe fe 8f 07 07 07 07 8f fe fe fc f8 00     .x..............
     6b6:	00 00 00 01 43 43 73 7b 7f 7f 1f 0f 07 03 00 00     ....CCs{........

000006c6 <_ZL7font5x8>:
     6c6:	00 00 5f 00 00 00 07 00 07 00 14 7f 14 7f 14 24     .._............$
     6d6:	2a 7f 2a 12 23 13 08 64 62 36 49 55 22 50 00 05     *.*.#..db6IU"P..
     6e6:	03 00 00 00 1c 22 41 00 00 41 22 1c 00 14 08 3e     ....."A..A"....>
     6f6:	08 14 08 08 3e 08 08 00 50 30 00 00 08 08 08 08     ....>...P0......
     706:	08 00 60 60 00 00 20 10 08 04 02 3e 51 49 45 3e     ..``.. ....>QIE>
     716:	00 42 7f 40 00 42 61 51 49 46 21 41 45 4b 31 18     .B.@.BaQIF!AEK1.
     726:	14 12 7f 10 27 45 45 45 39 3c 4a 49 49 30 01 71     ....'EEE9<JII0.q
     736:	09 05 03 36 49 49 49 36 06 49 49 29 1e 00 36 36     ...6III6.II)..66
     746:	00 00 00 56 36 00 00 08 14 22 41 00 14 14 14 14     ...V6...."A.....
     756:	14 00 41 22 14 08 02 01 51 09 06 32 49 79 41 3e     ..A"....Q..2IyA>
     766:	7e 11 11 11 7e 7f 49 49 49 36 3e 41 41 41 22 7f     ~...~.III6>AAA".
     776:	41 41 22 1c 7f 49 49 49 41 7f 09 09 09 01 3e 41     AA"..IIIA.....>A
     786:	49 49 7a 7f 08 08 08 7f 00 41 7f 41 00 20 40 41     IIz......A.A. @A
     796:	3f 01 7f 08 14 22 41 7f 40 40 40 40 7f 02 0c 02     ?...."A.@@@@....
     7a6:	7f 7f 04 08 10 7f 3e 41 41 41 3e 7f 09 09 09 06     ......>AAA>.....
     7b6:	3e 41 51 21 5e 7f 09 19 29 46 46 49 49 49 31 01     >AQ!^...)FFIII1.
     7c6:	01 7f 01 01 3f 40 40 40 3f 1f 20 40 20 1f 3f 40     ....?@@@?. @ .?@
     7d6:	38 40 3f 63 14 08 14 63 07 08 70 08 07 61 51 49     8@?c...c..p..aQI
     7e6:	45 43 00 7f 41 41 00 02 04 08 10 20 00 41 41 7f     EC..AA..... .AA.
     7f6:	00 04 02 01 02 04 40 40 40 40 40 00 01 02 04 00     ......@@@@@.....
     806:	20 54 54 54 78 7f 48 44 44 38 38 44 44 44 20 38      TTTx.HDD88DDD 8
     816:	44 44 48 7f 38 54 54 54 18 08 7e 09 01 02 0c 52     DDH.8TTT..~....R
     826:	52 52 3e 7f 08 04 04 78 00 44 7d 40 00 20 40 44     RR>....x.D}@. @D
     836:	3d 00 7f 10 28 44 00 00 41 7f 40 00 7c 04 18 04     =...(D..A.@.|...
     846:	78 7c 08 04 04 78 38 44 44 44 38 7c 14 14 14 08     x|...x8DDD8|....
     856:	08 14 14 18 7c 7c 08 04 04 08 48 54 54 54 20 04     ....||....HTTT .
     866:	3f 44 40 20 3c 40 40 20 7c 1c 20 40 20 1c 3c 40     ?D@ <@@ |. @ .<@
     876:	30 40 3c 44 28 10 28 44 0c 50 50 50 3c 44 64 54     0@<D(.(D.PPP<DdT
     886:	4c 44 00 08 36 41 00 00 00 7f 00 00 00 41 36 08     LD..6A.......A6.
     896:	00 10 08 08 10 08                                   ......

0000089c <__c.2161>:
     89c:	6e 61 6e 00                                         nan.

000008a0 <__c.2159>:
     8a0:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     8b0:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     8c0:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     8d0:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     8e0:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     8f0:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     900:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     910:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     920:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     930:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     940:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     950:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     960:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     970:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     980:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     990:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

0000099e <__ctors_start>:
     99e:	da 21       	and	r29, r10

000009a0 <__ctors_end>:
     9a0:	05 22       	and	r0, r21

000009a2 <__dtors_end>:
     9a2:	11 24       	eor	r1, r1
     9a4:	1f be       	out	0x3f, r1	; 63
     9a6:	cf ef       	ldi	r28, 0xFF	; 255
     9a8:	d0 e4       	ldi	r29, 0x40	; 64
     9aa:	de bf       	out	0x3e, r29	; 62
     9ac:	cd bf       	out	0x3d, r28	; 61

000009ae <__do_copy_data>:
     9ae:	13 e0       	ldi	r17, 0x03	; 3
     9b0:	a0 e0       	ldi	r26, 0x00	; 0
     9b2:	b1 e0       	ldi	r27, 0x01	; 1
     9b4:	ee e0       	ldi	r30, 0x0E	; 14
     9b6:	f3 e6       	ldi	r31, 0x63	; 99
     9b8:	00 e0       	ldi	r16, 0x00	; 0
     9ba:	0b bf       	out	0x3b, r16	; 59
     9bc:	02 c0       	rjmp	.+4      	; 0x9c2 <__do_copy_data+0x14>
     9be:	07 90       	elpm	r0, Z+
     9c0:	0d 92       	st	X+, r0
     9c2:	a8 31       	cpi	r26, 0x18	; 24
     9c4:	b1 07       	cpc	r27, r17
     9c6:	d9 f7       	brne	.-10     	; 0x9be <__do_copy_data+0x10>

000009c8 <__do_clear_bss>:
     9c8:	27 e0       	ldi	r18, 0x07	; 7
     9ca:	a8 e1       	ldi	r26, 0x18	; 24
     9cc:	b3 e0       	ldi	r27, 0x03	; 3
     9ce:	01 c0       	rjmp	.+2      	; 0x9d2 <.do_clear_bss_start>

000009d0 <.do_clear_bss_loop>:
     9d0:	1d 92       	st	X+, r1

000009d2 <.do_clear_bss_start>:
     9d2:	a1 3b       	cpi	r26, 0xB1	; 177
     9d4:	b2 07       	cpc	r27, r18
     9d6:	e1 f7       	brne	.-8      	; 0x9d0 <.do_clear_bss_loop>

000009d8 <__do_global_ctors>:
     9d8:	19 e0       	ldi	r17, 0x09	; 9
     9da:	c0 ea       	ldi	r28, 0xA0	; 160
     9dc:	d9 e0       	ldi	r29, 0x09	; 9
     9de:	00 e0       	ldi	r16, 0x00	; 0
     9e0:	06 c0       	rjmp	.+12     	; 0x9ee <__do_global_ctors+0x16>
     9e2:	22 97       	sbiw	r28, 0x02	; 2
     9e4:	01 09       	sbc	r16, r1
     9e6:	fe 01       	movw	r30, r28
     9e8:	0b bf       	out	0x3b, r16	; 59
     9ea:	0e 94 c6 2f 	call	0x5f8c	; 0x5f8c <__tablejump_elpm__>
     9ee:	ce 39       	cpi	r28, 0x9E	; 158
     9f0:	d1 07       	cpc	r29, r17
     9f2:	80 e0       	ldi	r24, 0x00	; 0
     9f4:	08 07       	cpc	r16, r24
     9f6:	a9 f7       	brne	.-22     	; 0x9e2 <__do_global_ctors+0xa>
     9f8:	0e 94 d2 21 	call	0x43a4	; 0x43a4 <main>
     9fc:	0c 94 76 31 	jmp	0x62ec	; 0x62ec <__do_global_dtors>

00000a00 <__bad_interrupt>:
     a00:	ff ca       	rjmp	.-2562   	; 0x0 <__vectors>

00000a02 <_ZN7DisplayD1Ev>:
			for (int y = 0; y <= height; ++y) {
				drawPixel(x1+x,y+y1,0);
			}
		}
	}
}
     a02:	9c 5f       	subi	r25, 0xFC	; 252
     a04:	0c 94 2c 22 	jmp	0x4458	; 0x4458 <_ZN3I2CD1Ev>
     a08:	08 95       	ret

00000a0a <_ZN7Display10clearFrameEv>:
     a0a:	fc 01       	movw	r30, r24
     a0c:	20 e0       	ldi	r18, 0x00	; 0
     a0e:	30 e0       	ldi	r19, 0x00	; 0
     a10:	11 92       	st	Z+, r1
     a12:	2f 5f       	subi	r18, 0xFF	; 255
     a14:	3f 4f       	sbci	r19, 0xFF	; 255
     a16:	21 15       	cp	r18, r1
     a18:	84 e0       	ldi	r24, 0x04	; 4
     a1a:	38 07       	cpc	r19, r24
     a1c:	c9 f7       	brne	.-14     	; 0xa10 <_ZN7Display10clearFrameEv+0x6>
     a1e:	08 95       	ret

00000a20 <_ZN7Display15ssd1306_commandEh>:
     a20:	1f 93       	push	r17
     a22:	cf 93       	push	r28
     a24:	df 93       	push	r29
     a26:	16 2f       	mov	r17, r22
     a28:	ec 01       	movw	r28, r24
     a2a:	dc 5f       	subi	r29, 0xFC	; 252
     a2c:	ce 01       	movw	r24, r28
     a2e:	0e 94 2d 22 	call	0x445a	; 0x445a <_ZN3I2C9twi_startEv>
     a32:	68 e7       	ldi	r22, 0x78	; 120
     a34:	ce 01       	movw	r24, r28
     a36:	0e 94 35 22 	call	0x446a	; 0x446a <_ZN3I2C9twi_writeEh>
     a3a:	60 e0       	ldi	r22, 0x00	; 0
     a3c:	ce 01       	movw	r24, r28
     a3e:	0e 94 35 22 	call	0x446a	; 0x446a <_ZN3I2C9twi_writeEh>
     a42:	61 2f       	mov	r22, r17
     a44:	ce 01       	movw	r24, r28
     a46:	0e 94 35 22 	call	0x446a	; 0x446a <_ZN3I2C9twi_writeEh>
     a4a:	ce 01       	movw	r24, r28
     a4c:	0e 94 31 22 	call	0x4462	; 0x4462 <_ZN3I2C8twi_stopEv>
     a50:	df 91       	pop	r29
     a52:	cf 91       	pop	r28
     a54:	1f 91       	pop	r17
     a56:	08 95       	ret

00000a58 <_ZN7Display17InitializeDisplayEv>:
     a58:	cf 93       	push	r28
     a5a:	df 93       	push	r29
     a5c:	ec 01       	movw	r28, r24
     a5e:	6e ea       	ldi	r22, 0xAE	; 174
     a60:	df df       	rcall	.-66     	; 0xa20 <_ZN7Display15ssd1306_commandEh>
     a62:	65 ed       	ldi	r22, 0xD5	; 213
     a64:	ce 01       	movw	r24, r28
     a66:	dc df       	rcall	.-72     	; 0xa20 <_ZN7Display15ssd1306_commandEh>
     a68:	60 e8       	ldi	r22, 0x80	; 128
     a6a:	ce 01       	movw	r24, r28
     a6c:	d9 df       	rcall	.-78     	; 0xa20 <_ZN7Display15ssd1306_commandEh>
     a6e:	68 ea       	ldi	r22, 0xA8	; 168
     a70:	ce 01       	movw	r24, r28
     a72:	d6 df       	rcall	.-84     	; 0xa20 <_ZN7Display15ssd1306_commandEh>
     a74:	6f e3       	ldi	r22, 0x3F	; 63
     a76:	ce 01       	movw	r24, r28
     a78:	d3 df       	rcall	.-90     	; 0xa20 <_ZN7Display15ssd1306_commandEh>
     a7a:	63 ed       	ldi	r22, 0xD3	; 211
     a7c:	ce 01       	movw	r24, r28
     a7e:	d0 df       	rcall	.-96     	; 0xa20 <_ZN7Display15ssd1306_commandEh>
     a80:	60 e0       	ldi	r22, 0x00	; 0
     a82:	ce 01       	movw	r24, r28
     a84:	cd df       	rcall	.-102    	; 0xa20 <_ZN7Display15ssd1306_commandEh>
     a86:	60 e4       	ldi	r22, 0x40	; 64
     a88:	ce 01       	movw	r24, r28
     a8a:	ca df       	rcall	.-108    	; 0xa20 <_ZN7Display15ssd1306_commandEh>
     a8c:	6d e8       	ldi	r22, 0x8D	; 141
     a8e:	ce 01       	movw	r24, r28
     a90:	c7 df       	rcall	.-114    	; 0xa20 <_ZN7Display15ssd1306_commandEh>
     a92:	64 e1       	ldi	r22, 0x14	; 20
     a94:	ce 01       	movw	r24, r28
     a96:	c4 df       	rcall	.-120    	; 0xa20 <_ZN7Display15ssd1306_commandEh>
     a98:	60 e2       	ldi	r22, 0x20	; 32
     a9a:	ce 01       	movw	r24, r28
     a9c:	c1 df       	rcall	.-126    	; 0xa20 <_ZN7Display15ssd1306_commandEh>
     a9e:	60 e0       	ldi	r22, 0x00	; 0
     aa0:	ce 01       	movw	r24, r28
     aa2:	be df       	rcall	.-132    	; 0xa20 <_ZN7Display15ssd1306_commandEh>
     aa4:	61 ea       	ldi	r22, 0xA1	; 161
     aa6:	ce 01       	movw	r24, r28
     aa8:	bb df       	rcall	.-138    	; 0xa20 <_ZN7Display15ssd1306_commandEh>
     aaa:	68 ec       	ldi	r22, 0xC8	; 200
     aac:	ce 01       	movw	r24, r28
     aae:	b8 df       	rcall	.-144    	; 0xa20 <_ZN7Display15ssd1306_commandEh>
     ab0:	6a ed       	ldi	r22, 0xDA	; 218
     ab2:	ce 01       	movw	r24, r28
     ab4:	b5 df       	rcall	.-150    	; 0xa20 <_ZN7Display15ssd1306_commandEh>
     ab6:	62 e1       	ldi	r22, 0x12	; 18
     ab8:	ce 01       	movw	r24, r28
     aba:	b2 df       	rcall	.-156    	; 0xa20 <_ZN7Display15ssd1306_commandEh>
     abc:	61 e8       	ldi	r22, 0x81	; 129
     abe:	ce 01       	movw	r24, r28
     ac0:	af df       	rcall	.-162    	; 0xa20 <_ZN7Display15ssd1306_commandEh>
     ac2:	6f ec       	ldi	r22, 0xCF	; 207
     ac4:	ce 01       	movw	r24, r28
     ac6:	ac df       	rcall	.-168    	; 0xa20 <_ZN7Display15ssd1306_commandEh>
     ac8:	69 ed       	ldi	r22, 0xD9	; 217
     aca:	ce 01       	movw	r24, r28
     acc:	a9 df       	rcall	.-174    	; 0xa20 <_ZN7Display15ssd1306_commandEh>
     ace:	61 ef       	ldi	r22, 0xF1	; 241
     ad0:	ce 01       	movw	r24, r28
     ad2:	a6 df       	rcall	.-180    	; 0xa20 <_ZN7Display15ssd1306_commandEh>
     ad4:	6b ed       	ldi	r22, 0xDB	; 219
     ad6:	ce 01       	movw	r24, r28
     ad8:	a3 df       	rcall	.-186    	; 0xa20 <_ZN7Display15ssd1306_commandEh>
     ada:	60 e4       	ldi	r22, 0x40	; 64
     adc:	ce 01       	movw	r24, r28
     ade:	a0 df       	rcall	.-192    	; 0xa20 <_ZN7Display15ssd1306_commandEh>
     ae0:	64 ea       	ldi	r22, 0xA4	; 164
     ae2:	ce 01       	movw	r24, r28
     ae4:	9d df       	rcall	.-198    	; 0xa20 <_ZN7Display15ssd1306_commandEh>
     ae6:	66 ea       	ldi	r22, 0xA6	; 166
     ae8:	ce 01       	movw	r24, r28
     aea:	9a df       	rcall	.-204    	; 0xa20 <_ZN7Display15ssd1306_commandEh>
     aec:	6f ea       	ldi	r22, 0xAF	; 175
     aee:	ce 01       	movw	r24, r28
     af0:	97 df       	rcall	.-210    	; 0xa20 <_ZN7Display15ssd1306_commandEh>
     af2:	df 91       	pop	r29
     af4:	cf 91       	pop	r28
     af6:	08 95       	ret

00000af8 <_ZN7DisplayC1Ev>:
     af8:	cf 93       	push	r28
     afa:	df 93       	push	r29
     afc:	ec 01       	movw	r28, r24
     afe:	9c 5f       	subi	r25, 0xFC	; 252
     b00:	0e 94 28 22 	call	0x4450	; 0x4450 <_ZN3I2CC1Ev>
     b04:	ce 01       	movw	r24, r28
     b06:	a8 df       	rcall	.-176    	; 0xa58 <_ZN7Display17InitializeDisplayEv>
     b08:	df 91       	pop	r29
     b0a:	cf 91       	pop	r28
     b0c:	08 95       	ret

00000b0e <_ZN7Display6invertEh>:
     b0e:	66 23       	and	r22, r22
     b10:	19 f0       	breq	.+6      	; 0xb18 <_ZN7Display6invertEh+0xa>
     b12:	67 ea       	ldi	r22, 0xA7	; 167
     b14:	85 cf       	rjmp	.-246    	; 0xa20 <_ZN7Display15ssd1306_commandEh>
     b16:	08 95       	ret
     b18:	66 ea       	ldi	r22, 0xA6	; 166
     b1a:	82 cf       	rjmp	.-252    	; 0xa20 <_ZN7Display15ssd1306_commandEh>
     b1c:	08 95       	ret

00000b1e <_ZN7Display9sendFrameEv>:
     b1e:	ef 92       	push	r14
     b20:	ff 92       	push	r15
     b22:	0f 93       	push	r16
     b24:	1f 93       	push	r17
     b26:	cf 93       	push	r28
     b28:	df 93       	push	r29
     b2a:	8c 01       	movw	r16, r24
     b2c:	61 e2       	ldi	r22, 0x21	; 33
     b2e:	78 df       	rcall	.-272    	; 0xa20 <_ZN7Display15ssd1306_commandEh>
     b30:	60 e0       	ldi	r22, 0x00	; 0
     b32:	c8 01       	movw	r24, r16
     b34:	75 df       	rcall	.-278    	; 0xa20 <_ZN7Display15ssd1306_commandEh>
     b36:	6f e7       	ldi	r22, 0x7F	; 127
     b38:	c8 01       	movw	r24, r16
     b3a:	72 df       	rcall	.-284    	; 0xa20 <_ZN7Display15ssd1306_commandEh>
     b3c:	62 e2       	ldi	r22, 0x22	; 34
     b3e:	c8 01       	movw	r24, r16
     b40:	6f df       	rcall	.-290    	; 0xa20 <_ZN7Display15ssd1306_commandEh>
     b42:	60 e0       	ldi	r22, 0x00	; 0
     b44:	c8 01       	movw	r24, r16
     b46:	6c df       	rcall	.-296    	; 0xa20 <_ZN7Display15ssd1306_commandEh>
     b48:	67 e0       	ldi	r22, 0x07	; 7
     b4a:	c8 01       	movw	r24, r16
     b4c:	69 df       	rcall	.-302    	; 0xa20 <_ZN7Display15ssd1306_commandEh>
     b4e:	78 01       	movw	r14, r16
     b50:	8c ef       	ldi	r24, 0xFC	; 252
     b52:	f8 1a       	sub	r15, r24
     b54:	c7 01       	movw	r24, r14
     b56:	0e 94 2d 22 	call	0x445a	; 0x445a <_ZN3I2C9twi_startEv>
     b5a:	68 e7       	ldi	r22, 0x78	; 120
     b5c:	c7 01       	movw	r24, r14
     b5e:	0e 94 35 22 	call	0x446a	; 0x446a <_ZN3I2C9twi_writeEh>
     b62:	60 e4       	ldi	r22, 0x40	; 64
     b64:	c7 01       	movw	r24, r14
     b66:	0e 94 35 22 	call	0x446a	; 0x446a <_ZN3I2C9twi_writeEh>
     b6a:	c0 e0       	ldi	r28, 0x00	; 0
     b6c:	d0 e0       	ldi	r29, 0x00	; 0
     b6e:	f8 01       	movw	r30, r16
     b70:	61 91       	ld	r22, Z+
     b72:	8f 01       	movw	r16, r30
     b74:	c7 01       	movw	r24, r14
     b76:	0e 94 35 22 	call	0x446a	; 0x446a <_ZN3I2C9twi_writeEh>
     b7a:	21 96       	adiw	r28, 0x01	; 1
     b7c:	c1 15       	cp	r28, r1
     b7e:	f4 e0       	ldi	r31, 0x04	; 4
     b80:	df 07       	cpc	r29, r31
     b82:	a9 f7       	brne	.-22     	; 0xb6e <_ZN7Display9sendFrameEv+0x50>
     b84:	c7 01       	movw	r24, r14
     b86:	0e 94 31 22 	call	0x4462	; 0x4462 <_ZN3I2C8twi_stopEv>
     b8a:	df 91       	pop	r29
     b8c:	cf 91       	pop	r28
     b8e:	1f 91       	pop	r17
     b90:	0f 91       	pop	r16
     b92:	ff 90       	pop	r15
     b94:	ef 90       	pop	r14
     b96:	08 95       	ret

00000b98 <_ZN7Display9drawPixelEhhh>:
     b98:	66 23       	and	r22, r22
     b9a:	bc f1       	brlt	.+110    	; 0xc0a <_ZN7Display9drawPixelEhhh+0x72>
     b9c:	40 34       	cpi	r20, 0x40	; 64
     b9e:	a8 f5       	brcc	.+106    	; 0xc0a <_ZN7Display9drawPixelEhhh+0x72>
     ba0:	21 11       	cpse	r18, r1
     ba2:	19 c0       	rjmp	.+50     	; 0xbd6 <_ZN7Display9drawPixelEhhh+0x3e>
     ba4:	e4 2f       	mov	r30, r20
     ba6:	e6 95       	lsr	r30
     ba8:	e6 95       	lsr	r30
     baa:	e6 95       	lsr	r30
     bac:	20 e8       	ldi	r18, 0x80	; 128
     bae:	e2 9f       	mul	r30, r18
     bb0:	f0 01       	movw	r30, r0
     bb2:	11 24       	eor	r1, r1
     bb4:	e6 0f       	add	r30, r22
     bb6:	f1 1d       	adc	r31, r1
     bb8:	e8 0f       	add	r30, r24
     bba:	f9 1f       	adc	r31, r25
     bbc:	47 70       	andi	r20, 0x07	; 7
     bbe:	21 e0       	ldi	r18, 0x01	; 1
     bc0:	30 e0       	ldi	r19, 0x00	; 0
     bc2:	c9 01       	movw	r24, r18
     bc4:	02 c0       	rjmp	.+4      	; 0xbca <_ZN7Display9drawPixelEhhh+0x32>
     bc6:	88 0f       	add	r24, r24
     bc8:	99 1f       	adc	r25, r25
     bca:	4a 95       	dec	r20
     bcc:	e2 f7       	brpl	.-8      	; 0xbc6 <_ZN7Display9drawPixelEhhh+0x2e>
     bce:	90 81       	ld	r25, Z
     bd0:	89 2b       	or	r24, r25
     bd2:	80 83       	st	Z, r24
     bd4:	08 95       	ret
     bd6:	e4 2f       	mov	r30, r20
     bd8:	e6 95       	lsr	r30
     bda:	e6 95       	lsr	r30
     bdc:	e6 95       	lsr	r30
     bde:	30 e8       	ldi	r19, 0x80	; 128
     be0:	e3 9f       	mul	r30, r19
     be2:	f0 01       	movw	r30, r0
     be4:	11 24       	eor	r1, r1
     be6:	e6 0f       	add	r30, r22
     be8:	f1 1d       	adc	r31, r1
     bea:	e8 0f       	add	r30, r24
     bec:	f9 1f       	adc	r31, r25
     bee:	47 70       	andi	r20, 0x07	; 7
     bf0:	81 e0       	ldi	r24, 0x01	; 1
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	9c 01       	movw	r18, r24
     bf6:	02 c0       	rjmp	.+4      	; 0xbfc <_ZN7Display9drawPixelEhhh+0x64>
     bf8:	22 0f       	add	r18, r18
     bfa:	33 1f       	adc	r19, r19
     bfc:	4a 95       	dec	r20
     bfe:	e2 f7       	brpl	.-8      	; 0xbf8 <_ZN7Display9drawPixelEhhh+0x60>
     c00:	a9 01       	movw	r20, r18
     c02:	40 95       	com	r20
     c04:	80 81       	ld	r24, Z
     c06:	48 23       	and	r20, r24
     c08:	40 83       	st	Z, r20
     c0a:	08 95       	ret

00000c0c <_ZN7Display9draw_lineEhhhf>:

//eigene Zeichenfunktionen
void Display::draw_line(uint8_t x, uint8_t y, uint8_t length, float phi){
     c0c:	2f 92       	push	r2
     c0e:	3f 92       	push	r3
     c10:	4f 92       	push	r4
     c12:	5f 92       	push	r5
     c14:	6f 92       	push	r6
     c16:	7f 92       	push	r7
     c18:	8f 92       	push	r8
     c1a:	9f 92       	push	r9
     c1c:	af 92       	push	r10
     c1e:	bf 92       	push	r11
     c20:	cf 92       	push	r12
     c22:	df 92       	push	r13
     c24:	ef 92       	push	r14
     c26:	ff 92       	push	r15
     c28:	0f 93       	push	r16
     c2a:	1f 93       	push	r17
     c2c:	cf 93       	push	r28
     c2e:	df 93       	push	r29
     c30:	cd b7       	in	r28, 0x3d	; 61
     c32:	de b7       	in	r29, 0x3e	; 62
     c34:	2b 97       	sbiw	r28, 0x0b	; 11
     c36:	0f b6       	in	r0, 0x3f	; 63
     c38:	f8 94       	cli
     c3a:	de bf       	out	0x3e, r29	; 62
     c3c:	0f be       	out	0x3f, r0	; 63
     c3e:	cd bf       	out	0x3d, r28	; 61
     c40:	1c 01       	movw	r2, r24
     c42:	d6 2e       	mov	r13, r22
     c44:	c4 2e       	mov	r12, r20
     c46:	29 83       	std	Y+1, r18	; 0x01
	//phi*=M_PI/180.0;
	uint8_t pos_x=0, pos_y=0;
	for (uint8_t i=0;i<length;i++)
     c48:	22 23       	and	r18, r18
     c4a:	09 f4       	brne	.+2      	; 0xc4e <_ZN7Display9draw_lineEhhhf+0x42>
     c4c:	68 c0       	rjmp	.+208    	; 0xd1e <_ZN7Display9draw_lineEhhhf+0x112>
	{
		pos_x=(uint8_t) (-i*cos(phi)+x);
     c4e:	c8 01       	movw	r24, r16
     c50:	b7 01       	movw	r22, r14
     c52:	0e 94 92 29 	call	0x5324	; 0x5324 <cos>
     c56:	2b 01       	movw	r4, r22
     c58:	3c 01       	movw	r6, r24
		pos_y=(uint8_t) (i*sin(phi)+y);
     c5a:	c8 01       	movw	r24, r16
     c5c:	b7 01       	movw	r22, r14
     c5e:	0e 94 f1 2b 	call	0x57e2	; 0x57e2 <sin>
     c62:	4b 01       	movw	r8, r22
     c64:	5c 01       	movw	r10, r24
     c66:	1b 86       	std	Y+11, r1	; 0x0b
     c68:	1a 86       	std	Y+10, r1	; 0x0a
     c6a:	8c 2d       	mov	r24, r12
     c6c:	90 e0       	ldi	r25, 0x00	; 0
     c6e:	a0 e0       	ldi	r26, 0x00	; 0
     c70:	b0 e0       	ldi	r27, 0x00	; 0
     c72:	8a 83       	std	Y+2, r24	; 0x02
     c74:	9b 83       	std	Y+3, r25	; 0x03
     c76:	ac 83       	std	Y+4, r26	; 0x04
     c78:	bd 83       	std	Y+5, r27	; 0x05
void Display::draw_line(uint8_t x, uint8_t y, uint8_t length, float phi){
	//phi*=M_PI/180.0;
	uint8_t pos_x=0, pos_y=0;
	for (uint8_t i=0;i<length;i++)
	{
		pos_x=(uint8_t) (-i*cos(phi)+x);
     c7a:	8d 2d       	mov	r24, r13
     c7c:	90 e0       	ldi	r25, 0x00	; 0
     c7e:	a0 e0       	ldi	r26, 0x00	; 0
     c80:	b0 e0       	ldi	r27, 0x00	; 0
     c82:	8e 83       	std	Y+6, r24	; 0x06
     c84:	9f 83       	std	Y+7, r25	; 0x07
     c86:	a8 87       	std	Y+8, r26	; 0x08
     c88:	b9 87       	std	Y+9, r27	; 0x09
		pos_y=(uint8_t) (i*sin(phi)+y);
     c8a:	aa 85       	ldd	r26, Y+10	; 0x0a
     c8c:	bb 85       	ldd	r27, Y+11	; 0x0b
     c8e:	bd 01       	movw	r22, r26
     c90:	88 27       	eor	r24, r24
     c92:	77 fd       	sbrc	r23, 7
     c94:	80 95       	com	r24
     c96:	98 2f       	mov	r25, r24
     c98:	0e 94 30 2a 	call	0x5460	; 0x5460 <__floatsisf>
     c9c:	a5 01       	movw	r20, r10
     c9e:	94 01       	movw	r18, r8
     ca0:	0e 94 8e 2b 	call	0x571c	; 0x571c <__mulsf3>
     ca4:	6b 01       	movw	r12, r22
     ca6:	7c 01       	movw	r14, r24
     ca8:	6a 81       	ldd	r22, Y+2	; 0x02
     caa:	7b 81       	ldd	r23, Y+3	; 0x03
     cac:	8c 81       	ldd	r24, Y+4	; 0x04
     cae:	9d 81       	ldd	r25, Y+5	; 0x05
     cb0:	0e 94 30 2a 	call	0x5460	; 0x5460 <__floatsisf>
     cb4:	9b 01       	movw	r18, r22
     cb6:	ac 01       	movw	r20, r24
     cb8:	c7 01       	movw	r24, r14
     cba:	b6 01       	movw	r22, r12
     cbc:	0e 94 c8 28 	call	0x5190	; 0x5190 <__addsf3>
     cc0:	0e 94 02 2a 	call	0x5404	; 0x5404 <__fixunssfsi>
     cc4:	16 2f       	mov	r17, r22
     cc6:	6a 85       	ldd	r22, Y+10	; 0x0a
     cc8:	7b 85       	ldd	r23, Y+11	; 0x0b
     cca:	71 95       	neg	r23
     ccc:	61 95       	neg	r22
     cce:	71 09       	sbc	r23, r1
void Display::draw_line(uint8_t x, uint8_t y, uint8_t length, float phi){
	//phi*=M_PI/180.0;
	uint8_t pos_x=0, pos_y=0;
	for (uint8_t i=0;i<length;i++)
	{
		pos_x=(uint8_t) (-i*cos(phi)+x);
     cd0:	88 27       	eor	r24, r24
     cd2:	77 fd       	sbrc	r23, 7
     cd4:	80 95       	com	r24
     cd6:	98 2f       	mov	r25, r24
     cd8:	0e 94 30 2a 	call	0x5460	; 0x5460 <__floatsisf>
     cdc:	a3 01       	movw	r20, r6
     cde:	92 01       	movw	r18, r4
     ce0:	0e 94 8e 2b 	call	0x571c	; 0x571c <__mulsf3>
     ce4:	6b 01       	movw	r12, r22
     ce6:	7c 01       	movw	r14, r24
     ce8:	6e 81       	ldd	r22, Y+6	; 0x06
     cea:	7f 81       	ldd	r23, Y+7	; 0x07
     cec:	88 85       	ldd	r24, Y+8	; 0x08
     cee:	99 85       	ldd	r25, Y+9	; 0x09
     cf0:	0e 94 30 2a 	call	0x5460	; 0x5460 <__floatsisf>
     cf4:	9b 01       	movw	r18, r22
     cf6:	ac 01       	movw	r20, r24
     cf8:	c7 01       	movw	r24, r14
     cfa:	b6 01       	movw	r22, r12
     cfc:	0e 94 c8 28 	call	0x5190	; 0x5190 <__addsf3>
     d00:	0e 94 02 2a 	call	0x5404	; 0x5404 <__fixunssfsi>
		pos_y=(uint8_t) (i*sin(phi)+y);
		drawPixel(pos_x,pos_y,0);
     d04:	20 e0       	ldi	r18, 0x00	; 0
     d06:	41 2f       	mov	r20, r17
     d08:	c1 01       	movw	r24, r2
     d0a:	46 df       	rcall	.-372    	; 0xb98 <_ZN7Display9drawPixelEhhh>
     d0c:	ea 85       	ldd	r30, Y+10	; 0x0a
     d0e:	fb 85       	ldd	r31, Y+11	; 0x0b
     d10:	31 96       	adiw	r30, 0x01	; 1
     d12:	fb 87       	std	Y+11, r31	; 0x0b
     d14:	ea 87       	std	Y+10, r30	; 0x0a

//eigene Zeichenfunktionen
void Display::draw_line(uint8_t x, uint8_t y, uint8_t length, float phi){
	//phi*=M_PI/180.0;
	uint8_t pos_x=0, pos_y=0;
	for (uint8_t i=0;i<length;i++)
     d16:	f9 81       	ldd	r31, Y+1	; 0x01
     d18:	ef 17       	cp	r30, r31
     d1a:	08 f4       	brcc	.+2      	; 0xd1e <_ZN7Display9draw_lineEhhhf+0x112>
     d1c:	b6 cf       	rjmp	.-148    	; 0xc8a <_ZN7Display9draw_lineEhhhf+0x7e>
	{
		pos_x=(uint8_t) (-i*cos(phi)+x);
		pos_y=(uint8_t) (i*sin(phi)+y);
		drawPixel(pos_x,pos_y,0);
	}
}
     d1e:	2b 96       	adiw	r28, 0x0b	; 11
     d20:	0f b6       	in	r0, 0x3f	; 63
     d22:	f8 94       	cli
     d24:	de bf       	out	0x3e, r29	; 62
     d26:	0f be       	out	0x3f, r0	; 63
     d28:	cd bf       	out	0x3d, r28	; 61
     d2a:	df 91       	pop	r29
     d2c:	cf 91       	pop	r28
     d2e:	1f 91       	pop	r17
     d30:	0f 91       	pop	r16
     d32:	ff 90       	pop	r15
     d34:	ef 90       	pop	r14
     d36:	df 90       	pop	r13
     d38:	cf 90       	pop	r12
     d3a:	bf 90       	pop	r11
     d3c:	af 90       	pop	r10
     d3e:	9f 90       	pop	r9
     d40:	8f 90       	pop	r8
     d42:	7f 90       	pop	r7
     d44:	6f 90       	pop	r6
     d46:	5f 90       	pop	r5
     d48:	4f 90       	pop	r4
     d4a:	3f 90       	pop	r3
     d4c:	2f 90       	pop	r2
     d4e:	08 95       	ret

00000d50 <_ZN7Display13draw_triangleEhhhff>:

//using basecenterpoint as turningpoint for rotation
//upright triangle has rotationangle of 0
//turning clockwise considered in x transformation
//baseangle=70 is for 1/3 type
void Display::draw_triangle(uint8_t basecenter_x, uint8_t basecenter_y, uint8_t baselength, float baseangle, float rotationangle){
     d50:	2f 92       	push	r2
     d52:	3f 92       	push	r3
     d54:	4f 92       	push	r4
     d56:	5f 92       	push	r5
     d58:	6f 92       	push	r6
     d5a:	7f 92       	push	r7
     d5c:	8f 92       	push	r8
     d5e:	9f 92       	push	r9
     d60:	af 92       	push	r10
     d62:	bf 92       	push	r11
     d64:	cf 92       	push	r12
     d66:	df 92       	push	r13
     d68:	ef 92       	push	r14
     d6a:	ff 92       	push	r15
     d6c:	0f 93       	push	r16
     d6e:	1f 93       	push	r17
     d70:	cf 93       	push	r28
     d72:	df 93       	push	r29
     d74:	cd b7       	in	r28, 0x3d	; 61
     d76:	de b7       	in	r29, 0x3e	; 62
     d78:	60 97       	sbiw	r28, 0x10	; 16
     d7a:	0f b6       	in	r0, 0x3f	; 63
     d7c:	f8 94       	cli
     d7e:	de bf       	out	0x3e, r29	; 62
     d80:	0f be       	out	0x3f, r0	; 63
     d82:	cd bf       	out	0x3d, r28	; 61
     d84:	1c 01       	movw	r2, r24
     d86:	6f 87       	std	Y+15, r22	; 0x0f
     d88:	4d 83       	std	Y+5, r20	; 0x05
     d8a:	29 83       	std	Y+1, r18	; 0x01
     d8c:	c6 01       	movw	r24, r12
     d8e:	b5 01       	movw	r22, r10
	//correcting rotationangle
	rotationangle*=M_PI/180.0;
     d90:	25 e3       	ldi	r18, 0x35	; 53
     d92:	3a ef       	ldi	r19, 0xFA	; 250
     d94:	4e e8       	ldi	r20, 0x8E	; 142
     d96:	5c e3       	ldi	r21, 0x3C	; 60
     d98:	0e 94 8e 2b 	call	0x571c	; 0x571c <__mulsf3>
     d9c:	4b 01       	movw	r8, r22
     d9e:	5c 01       	movw	r10, r24
	baseangle*=M_PI/180.0;
     da0:	25 e3       	ldi	r18, 0x35	; 53
     da2:	3a ef       	ldi	r19, 0xFA	; 250
     da4:	4e e8       	ldi	r20, 0x8E	; 142
     da6:	5c e3       	ldi	r21, 0x3C	; 60
     da8:	c8 01       	movw	r24, r16
     daa:	b7 01       	movw	r22, r14
     dac:	0e 94 8e 2b 	call	0x571c	; 0x571c <__mulsf3>
     db0:	6e 83       	std	Y+6, r22	; 0x06
     db2:	7f 83       	std	Y+7, r23	; 0x07
     db4:	88 87       	std	Y+8, r24	; 0x08
     db6:	99 87       	std	Y+9, r25	; 0x09
	//draw baseline
	draw_line(basecenter_x,basecenter_y,baselength/2,rotationangle);
     db8:	79 80       	ldd	r7, Y+1	; 0x01
     dba:	76 94       	lsr	r7
     dbc:	85 01       	movw	r16, r10
     dbe:	74 01       	movw	r14, r8
     dc0:	27 2d       	mov	r18, r7
     dc2:	4d 81       	ldd	r20, Y+5	; 0x05
     dc4:	6f 85       	ldd	r22, Y+15	; 0x0f
     dc6:	c1 01       	movw	r24, r2
     dc8:	21 df       	rcall	.-446    	; 0xc0c <_ZN7Display9draw_lineEhhhf>
	draw_line(basecenter_x,basecenter_y,baselength/2,rotationangle-M_PI);
     dca:	2b ed       	ldi	r18, 0xDB	; 219
     dcc:	3f e0       	ldi	r19, 0x0F	; 15
     dce:	49 e4       	ldi	r20, 0x49	; 73
     dd0:	50 e4       	ldi	r21, 0x40	; 64
     dd2:	c5 01       	movw	r24, r10
     dd4:	b4 01       	movw	r22, r8
     dd6:	0e 94 c7 28 	call	0x518e	; 0x518e <__subsf3>
     dda:	7b 01       	movw	r14, r22
     ddc:	8c 01       	movw	r16, r24
     dde:	27 2d       	mov	r18, r7
     de0:	4d 81       	ldd	r20, Y+5	; 0x05
     de2:	6f 85       	ldd	r22, Y+15	; 0x0f
     de4:	c1 01       	movw	r24, r2
     de6:	12 df       	rcall	.-476    	; 0xc0c <_ZN7Display9draw_lineEhhhf>
	//draw midleline
	uint8_t middlelength=baselength/2*tan(baseangle);
     de8:	6e 81       	ldd	r22, Y+6	; 0x06
     dea:	7f 81       	ldd	r23, Y+7	; 0x07
     dec:	88 85       	ldd	r24, Y+8	; 0x08
     dee:	99 85       	ldd	r25, Y+9	; 0x09
     df0:	0e 94 fa 2b 	call	0x57f4	; 0x57f4 <tan>
     df4:	6b 01       	movw	r12, r22
     df6:	7c 01       	movw	r14, r24
     df8:	67 2d       	mov	r22, r7
     dfa:	70 e0       	ldi	r23, 0x00	; 0
     dfc:	80 e0       	ldi	r24, 0x00	; 0
     dfe:	90 e0       	ldi	r25, 0x00	; 0
     e00:	0e 94 30 2a 	call	0x5460	; 0x5460 <__floatsisf>
     e04:	a7 01       	movw	r20, r14
     e06:	96 01       	movw	r18, r12
     e08:	0e 94 8e 2b 	call	0x571c	; 0x571c <__mulsf3>
     e0c:	0e 94 02 2a 	call	0x5404	; 0x5404 <__fixunssfsi>
     e10:	68 8b       	std	Y+16, r22	; 0x10
	draw_line(basecenter_x,basecenter_y,middlelength,rotationangle-M_PI_2);
     e12:	2b ed       	ldi	r18, 0xDB	; 219
     e14:	3f e0       	ldi	r19, 0x0F	; 15
     e16:	49 ec       	ldi	r20, 0xC9	; 201
     e18:	5f e3       	ldi	r21, 0x3F	; 63
     e1a:	c5 01       	movw	r24, r10
     e1c:	b4 01       	movw	r22, r8
     e1e:	0e 94 c7 28 	call	0x518e	; 0x518e <__subsf3>
     e22:	6a 87       	std	Y+10, r22	; 0x0a
     e24:	7b 87       	std	Y+11, r23	; 0x0b
     e26:	8c 87       	std	Y+12, r24	; 0x0c
     e28:	9d 87       	std	Y+13, r25	; 0x0d
     e2a:	7b 01       	movw	r14, r22
     e2c:	8c 01       	movw	r16, r24
     e2e:	28 89       	ldd	r18, Y+16	; 0x10
     e30:	4d 81       	ldd	r20, Y+5	; 0x05
     e32:	6f 85       	ldd	r22, Y+15	; 0x0f
     e34:	c1 01       	movw	r24, r2
     e36:	ea de       	rcall	.-556    	; 0xc0c <_ZN7Display9draw_lineEhhhf>
	//draw left arm
	uint8_t lengtharm=baselength/(2*cos(baseangle));
     e38:	6e 81       	ldd	r22, Y+6	; 0x06
     e3a:	7f 81       	ldd	r23, Y+7	; 0x07
     e3c:	88 85       	ldd	r24, Y+8	; 0x08
     e3e:	99 85       	ldd	r25, Y+9	; 0x09
     e40:	0e 94 92 29 	call	0x5324	; 0x5324 <cos>
     e44:	6b 01       	movw	r12, r22
     e46:	7c 01       	movw	r14, r24
     e48:	29 81       	ldd	r18, Y+1	; 0x01
     e4a:	62 2f       	mov	r22, r18
     e4c:	70 e0       	ldi	r23, 0x00	; 0
     e4e:	80 e0       	ldi	r24, 0x00	; 0
     e50:	90 e0       	ldi	r25, 0x00	; 0
     e52:	0e 94 30 2a 	call	0x5460	; 0x5460 <__floatsisf>
     e56:	2b 01       	movw	r4, r22
     e58:	3c 01       	movw	r6, r24
     e5a:	a7 01       	movw	r20, r14
     e5c:	96 01       	movw	r18, r12
     e5e:	c7 01       	movw	r24, r14
     e60:	b6 01       	movw	r22, r12
     e62:	0e 94 c8 28 	call	0x5190	; 0x5190 <__addsf3>
     e66:	9b 01       	movw	r18, r22
     e68:	ac 01       	movw	r20, r24
     e6a:	c3 01       	movw	r24, r6
     e6c:	b2 01       	movw	r22, r4
     e6e:	0e 94 95 29 	call	0x532a	; 0x532a <__divsf3>
     e72:	0e 94 02 2a 	call	0x5404	; 0x5404 <__fixunssfsi>
     e76:	6e 87       	std	Y+14, r22	; 0x0e
	uint8_t sx = basecenter_x-middlelength*cos(rotationangle-M_PI_2);
     e78:	e8 89       	ldd	r30, Y+16	; 0x10
     e7a:	6e 2f       	mov	r22, r30
     e7c:	70 e0       	ldi	r23, 0x00	; 0
     e7e:	80 e0       	ldi	r24, 0x00	; 0
     e80:	90 e0       	ldi	r25, 0x00	; 0
     e82:	0e 94 30 2a 	call	0x5460	; 0x5460 <__floatsisf>
     e86:	69 83       	std	Y+1, r22	; 0x01
     e88:	7a 83       	std	Y+2, r23	; 0x02
     e8a:	8b 83       	std	Y+3, r24	; 0x03
     e8c:	9c 83       	std	Y+4, r25	; 0x04
     e8e:	6a 85       	ldd	r22, Y+10	; 0x0a
     e90:	7b 85       	ldd	r23, Y+11	; 0x0b
     e92:	8c 85       	ldd	r24, Y+12	; 0x0c
     e94:	9d 85       	ldd	r25, Y+13	; 0x0d
     e96:	0e 94 92 29 	call	0x5324	; 0x5324 <cos>
     e9a:	6b 01       	movw	r12, r22
     e9c:	7c 01       	movw	r14, r24
     e9e:	ff 85       	ldd	r31, Y+15	; 0x0f
     ea0:	6f 2f       	mov	r22, r31
     ea2:	70 e0       	ldi	r23, 0x00	; 0
     ea4:	80 e0       	ldi	r24, 0x00	; 0
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	0e 94 30 2a 	call	0x5460	; 0x5460 <__floatsisf>
     eac:	2b 01       	movw	r4, r22
     eae:	3c 01       	movw	r6, r24
     eb0:	a7 01       	movw	r20, r14
     eb2:	96 01       	movw	r18, r12
     eb4:	69 81       	ldd	r22, Y+1	; 0x01
     eb6:	7a 81       	ldd	r23, Y+2	; 0x02
     eb8:	8b 81       	ldd	r24, Y+3	; 0x03
     eba:	9c 81       	ldd	r25, Y+4	; 0x04
     ebc:	0e 94 8e 2b 	call	0x571c	; 0x571c <__mulsf3>
     ec0:	9b 01       	movw	r18, r22
     ec2:	ac 01       	movw	r20, r24
     ec4:	c3 01       	movw	r24, r6
     ec6:	b2 01       	movw	r22, r4
     ec8:	0e 94 c7 28 	call	0x518e	; 0x518e <__subsf3>
     ecc:	0e 94 02 2a 	call	0x5404	; 0x5404 <__fixunssfsi>
     ed0:	6f 87       	std	Y+15, r22	; 0x0f
	uint8_t sy = basecenter_y+middlelength*sin(rotationangle-M_PI_2);
     ed2:	6a 85       	ldd	r22, Y+10	; 0x0a
     ed4:	7b 85       	ldd	r23, Y+11	; 0x0b
     ed6:	8c 85       	ldd	r24, Y+12	; 0x0c
     ed8:	9d 85       	ldd	r25, Y+13	; 0x0d
     eda:	0e 94 f1 2b 	call	0x57e2	; 0x57e2 <sin>
     ede:	6b 01       	movw	r12, r22
     ee0:	7c 01       	movw	r14, r24
     ee2:	2d 81       	ldd	r18, Y+5	; 0x05
     ee4:	62 2f       	mov	r22, r18
     ee6:	70 e0       	ldi	r23, 0x00	; 0
     ee8:	80 e0       	ldi	r24, 0x00	; 0
     eea:	90 e0       	ldi	r25, 0x00	; 0
     eec:	0e 94 30 2a 	call	0x5460	; 0x5460 <__floatsisf>
     ef0:	2b 01       	movw	r4, r22
     ef2:	3c 01       	movw	r6, r24
     ef4:	a7 01       	movw	r20, r14
     ef6:	96 01       	movw	r18, r12
     ef8:	69 81       	ldd	r22, Y+1	; 0x01
     efa:	7a 81       	ldd	r23, Y+2	; 0x02
     efc:	8b 81       	ldd	r24, Y+3	; 0x03
     efe:	9c 81       	ldd	r25, Y+4	; 0x04
     f00:	0e 94 8e 2b 	call	0x571c	; 0x571c <__mulsf3>
     f04:	9b 01       	movw	r18, r22
     f06:	ac 01       	movw	r20, r24
     f08:	c3 01       	movw	r24, r6
     f0a:	b2 01       	movw	r22, r4
     f0c:	0e 94 c8 28 	call	0x5190	; 0x5190 <__addsf3>
     f10:	0e 94 02 2a 	call	0x5404	; 0x5404 <__fixunssfsi>
     f14:	d6 2e       	mov	r13, r22
	draw_line(sx,sy,lengtharm,baseangle+rotationangle);
     f16:	a5 01       	movw	r20, r10
     f18:	94 01       	movw	r18, r8
     f1a:	6e 81       	ldd	r22, Y+6	; 0x06
     f1c:	7f 81       	ldd	r23, Y+7	; 0x07
     f1e:	88 85       	ldd	r24, Y+8	; 0x08
     f20:	99 85       	ldd	r25, Y+9	; 0x09
     f22:	0e 94 c8 28 	call	0x5190	; 0x5190 <__addsf3>
     f26:	7b 01       	movw	r14, r22
     f28:	8c 01       	movw	r16, r24
     f2a:	2e 85       	ldd	r18, Y+14	; 0x0e
     f2c:	4d 2d       	mov	r20, r13
     f2e:	6f 85       	ldd	r22, Y+15	; 0x0f
     f30:	c1 01       	movw	r24, r2
     f32:	6c de       	rcall	.-808    	; 0xc0c <_ZN7Display9draw_lineEhhhf>
	//draw right arm
	draw_line(sx,sy,lengtharm,-baseangle+rotationangle-M_PI);
     f34:	2e 81       	ldd	r18, Y+6	; 0x06
     f36:	3f 81       	ldd	r19, Y+7	; 0x07
     f38:	48 85       	ldd	r20, Y+8	; 0x08
     f3a:	59 85       	ldd	r21, Y+9	; 0x09
     f3c:	c5 01       	movw	r24, r10
     f3e:	b4 01       	movw	r22, r8
     f40:	0e 94 c7 28 	call	0x518e	; 0x518e <__subsf3>
     f44:	2b ed       	ldi	r18, 0xDB	; 219
     f46:	3f e0       	ldi	r19, 0x0F	; 15
     f48:	49 e4       	ldi	r20, 0x49	; 73
     f4a:	50 e4       	ldi	r21, 0x40	; 64
     f4c:	0e 94 c7 28 	call	0x518e	; 0x518e <__subsf3>
     f50:	7b 01       	movw	r14, r22
     f52:	8c 01       	movw	r16, r24
     f54:	2e 85       	ldd	r18, Y+14	; 0x0e
     f56:	4d 2d       	mov	r20, r13
     f58:	6f 85       	ldd	r22, Y+15	; 0x0f
     f5a:	c1 01       	movw	r24, r2
     f5c:	57 de       	rcall	.-850    	; 0xc0c <_ZN7Display9draw_lineEhhhf>
}
     f5e:	60 96       	adiw	r28, 0x10	; 16
     f60:	0f b6       	in	r0, 0x3f	; 63
     f62:	f8 94       	cli
     f64:	de bf       	out	0x3e, r29	; 62
     f66:	0f be       	out	0x3f, r0	; 63
     f68:	cd bf       	out	0x3d, r28	; 61
     f6a:	df 91       	pop	r29
     f6c:	cf 91       	pop	r28
     f6e:	1f 91       	pop	r17
     f70:	0f 91       	pop	r16
     f72:	ff 90       	pop	r15
     f74:	ef 90       	pop	r14
     f76:	df 90       	pop	r13
     f78:	cf 90       	pop	r12
     f7a:	bf 90       	pop	r11
     f7c:	af 90       	pop	r10
     f7e:	9f 90       	pop	r9
     f80:	8f 90       	pop	r8
     f82:	7f 90       	pop	r7
     f84:	6f 90       	pop	r6
     f86:	5f 90       	pop	r5
     f88:	4f 90       	pop	r4
     f8a:	3f 90       	pop	r3
     f8c:	2f 90       	pop	r2
     f8e:	08 95       	ret

00000f90 <_ZN7Display9draw_ASCIEhhh>:

void Display::draw_ASCI(uint8_t sym,uint8_t x, uint8_t y){
     f90:	0f 93       	push	r16
     f92:	1f 93       	push	r17
     f94:	cf 93       	push	r28
     f96:	df 93       	push	r29
	if(sym!=' ' && sym>=33){
     f98:	61 32       	cpi	r22, 0x21	; 33
     f9a:	08 f4       	brcc	.+2      	; 0xf9e <_ZN7Display9draw_ASCIEhhh+0xe>
     f9c:	42 c0       	rjmp	.+132    	; 0x1022 <_ZN7Display9draw_ASCIEhhh+0x92>
		sym-=33;
		uint16_t symbol;
		for(uint8_t i = 0; i < 5; i++){
			symbol = pgm_read_byte(&font5x8[sym][i]);
			symbol = symbol << y%8;
			Displayframe[x+(y/8)*SSD1306_WIDTH+i] |=(uint8_t) (symbol & 0x00FF);
     f9e:	a4 2f       	mov	r26, r20
     fa0:	b0 e0       	ldi	r27, 0x00	; 0
     fa2:	02 2f       	mov	r16, r18
     fa4:	06 95       	lsr	r16
     fa6:	06 95       	lsr	r16
     fa8:	06 95       	lsr	r16
     faa:	30 e8       	ldi	r19, 0x80	; 128
     fac:	03 9f       	mul	r16, r19
     fae:	80 01       	movw	r16, r0
     fb0:	11 24       	eor	r1, r1
     fb2:	ed 01       	movw	r28, r26
     fb4:	c0 0f       	add	r28, r16
     fb6:	d1 1f       	adc	r29, r17
			if(((symbol&0xFF00)>>8)==0){
				Displayframe[x+(y/8+1)*SSD1306_WIDTH+i] |= 0;
			}
			else {
				Displayframe[x+(y/8+1)*SSD1306_WIDTH+i] |= (uint8_t) ((symbol & 0xFF00)>>8);
     fb8:	00 58       	subi	r16, 0x80	; 128
     fba:	1f 4f       	sbci	r17, 0xFF	; 255
     fbc:	0a 0f       	add	r16, r26
     fbe:	1b 1f       	adc	r17, r27
	draw_line(sx,sy,lengtharm,-baseangle+rotationangle-M_PI);
}

void Display::draw_ASCI(uint8_t sym,uint8_t x, uint8_t y){
	if(sym!=' ' && sym>=33){
		sym-=33;
     fc0:	61 52       	subi	r22, 0x21	; 33
     fc2:	46 2f       	mov	r20, r22
     fc4:	50 e0       	ldi	r21, 0x00	; 0
     fc6:	fa 01       	movw	r30, r20
     fc8:	ee 0f       	add	r30, r30
     fca:	ff 1f       	adc	r31, r31
     fcc:	ee 0f       	add	r30, r30
     fce:	ff 1f       	adc	r31, r31
     fd0:	e4 0f       	add	r30, r20
     fd2:	f5 1f       	adc	r31, r21
     fd4:	ea 53       	subi	r30, 0x3A	; 58
     fd6:	f9 4f       	sbci	r31, 0xF9	; 249
     fd8:	dc 01       	movw	r26, r24
     fda:	ac 0f       	add	r26, r28
     fdc:	bd 1f       	adc	r27, r29
     fde:	ae 01       	movw	r20, r28
     fe0:	05 96       	adiw	r24, 0x05	; 5
     fe2:	8c 0f       	add	r24, r28
     fe4:	9d 1f       	adc	r25, r29
		uint16_t symbol;
		for(uint8_t i = 0; i < 5; i++){
			symbol = pgm_read_byte(&font5x8[sym][i]);
			symbol = symbol << y%8;
     fe6:	27 70       	andi	r18, 0x07	; 7
void Display::draw_ASCI(uint8_t sym,uint8_t x, uint8_t y){
	if(sym!=' ' && sym>=33){
		sym-=33;
		uint16_t symbol;
		for(uint8_t i = 0; i < 5; i++){
			symbol = pgm_read_byte(&font5x8[sym][i]);
     fe8:	64 91       	lpm	r22, Z
     fea:	70 e0       	ldi	r23, 0x00	; 0
			symbol = symbol << y%8;
     fec:	02 2e       	mov	r0, r18
     fee:	02 c0       	rjmp	.+4      	; 0xff4 <_ZN7Display9draw_ASCIEhhh+0x64>
     ff0:	66 0f       	add	r22, r22
     ff2:	77 1f       	adc	r23, r23
     ff4:	0a 94       	dec	r0
     ff6:	e2 f7       	brpl	.-8      	; 0xff0 <_ZN7Display9draw_ASCIEhhh+0x60>
			Displayframe[x+(y/8)*SSD1306_WIDTH+i] |=(uint8_t) (symbol & 0x00FF);
     ff8:	3c 91       	ld	r19, X
     ffa:	36 2b       	or	r19, r22
     ffc:	3c 93       	st	X, r19
			if(((symbol&0xFF00)>>8)==0){
     ffe:	67 2f       	mov	r22, r23
    1000:	77 27       	eor	r23, r23
    1002:	61 15       	cp	r22, r1
    1004:	71 05       	cpc	r23, r1
    1006:	41 f0       	breq	.+16     	; 0x1018 <_ZN7Display9draw_ASCIEhhh+0x88>
    1008:	ed 01       	movw	r28, r26
    100a:	c4 1b       	sub	r28, r20
    100c:	d5 0b       	sbc	r29, r21
    100e:	c0 0f       	add	r28, r16
    1010:	d1 1f       	adc	r29, r17
				Displayframe[x+(y/8+1)*SSD1306_WIDTH+i] |= 0;
			}
			else {
				Displayframe[x+(y/8+1)*SSD1306_WIDTH+i] |= (uint8_t) ((symbol & 0xFF00)>>8);
    1012:	38 81       	ld	r19, Y
    1014:	63 2b       	or	r22, r19
    1016:	68 83       	st	Y, r22
    1018:	31 96       	adiw	r30, 0x01	; 1
    101a:	11 96       	adiw	r26, 0x01	; 1

void Display::draw_ASCI(uint8_t sym,uint8_t x, uint8_t y){
	if(sym!=' ' && sym>=33){
		sym-=33;
		uint16_t symbol;
		for(uint8_t i = 0; i < 5; i++){
    101c:	a8 17       	cp	r26, r24
    101e:	b9 07       	cpc	r27, r25
    1020:	19 f7       	brne	.-58     	; 0xfe8 <_ZN7Display9draw_ASCIEhhh+0x58>
	else{
		for(uint8_t i = 0; i < 7; i++){
			Displayframe[x+(y/8)*SSD1306_WIDTH+i] |= 0;
		}
	}
}
    1022:	df 91       	pop	r29
    1024:	cf 91       	pop	r28
    1026:	1f 91       	pop	r17
    1028:	0f 91       	pop	r16
    102a:	08 95       	ret

0000102c <_ZN7Display12draw_pikachuEv>:

void Display::draw_pikachu(){
    102c:	cf 93       	push	r28
    102e:	46 e8       	ldi	r20, 0x86	; 134
    1030:	53 e0       	ldi	r21, 0x03	; 3
    1032:	66 e8       	ldi	r22, 0x86	; 134
    1034:	75 e0       	ldi	r23, 0x05	; 5
    1036:	0d c0       	rjmp	.+26     	; 0x1052 <_ZN7Display12draw_pikachuEv+0x26>
	for (uint8_t i = 0; i<8;i++)
	{
		for (uint8_t j = 0;j<64;j++)
		{
			Displayframe[i*SSD1306_WIDTH+j]=pgm_read_byte(&Pikachu[i][j]);
    1038:	c4 91       	lpm	r28, Z
    103a:	cd 93       	st	X+, r28
    103c:	31 96       	adiw	r30, 0x01	; 1
}

void Display::draw_pikachu(){
	for (uint8_t i = 0; i<8;i++)
	{
		for (uint8_t j = 0;j<64;j++)
    103e:	a2 17       	cp	r26, r18
    1040:	b3 07       	cpc	r27, r19
    1042:	d1 f7       	brne	.-12     	; 0x1038 <_ZN7Display12draw_pikachuEv+0xc>
    1044:	40 5c       	subi	r20, 0xC0	; 192
    1046:	5f 4f       	sbci	r21, 0xFF	; 255
    1048:	80 58       	subi	r24, 0x80	; 128
    104a:	9f 4f       	sbci	r25, 0xFF	; 255
		}
	}
}

void Display::draw_pikachu(){
	for (uint8_t i = 0; i<8;i++)
    104c:	46 17       	cp	r20, r22
    104e:	57 07       	cpc	r21, r23
    1050:	31 f0       	breq	.+12     	; 0x105e <_ZN7Display12draw_pikachuEv+0x32>
    1052:	9c 01       	movw	r18, r24
    1054:	20 5c       	subi	r18, 0xC0	; 192
    1056:	3f 4f       	sbci	r19, 0xFF	; 255
			Displayframe[x+(y/8)*SSD1306_WIDTH+i] |= 0;
		}
	}
}

void Display::draw_pikachu(){
    1058:	dc 01       	movw	r26, r24
    105a:	fa 01       	movw	r30, r20
    105c:	ed cf       	rjmp	.-38     	; 0x1038 <_ZN7Display12draw_pikachuEv+0xc>
		for (uint8_t j = 0;j<64;j++)
		{
			Displayframe[i*SSD1306_WIDTH+j]=pgm_read_byte(&Pikachu[i][j]);
		}
	}
}
    105e:	cf 91       	pop	r28
    1060:	08 95       	ret

00001062 <_ZN7Display11draw_glurakEv>:

void Display::draw_glurak(){
    1062:	cf 93       	push	r28
    1064:	46 e8       	ldi	r20, 0x86	; 134
    1066:	51 e0       	ldi	r21, 0x01	; 1
    1068:	66 e8       	ldi	r22, 0x86	; 134
    106a:	73 e0       	ldi	r23, 0x03	; 3
    106c:	0d c0       	rjmp	.+26     	; 0x1088 <_ZN7Display11draw_glurakEv+0x26>
	for (uint8_t i = 0; i<8;i++)
	{
		for (uint8_t j = 0;j<64;j++)
		{
			Displayframe[i*SSD1306_WIDTH+j]=pgm_read_byte(&Glurak[i][j]);
    106e:	c4 91       	lpm	r28, Z
    1070:	cd 93       	st	X+, r28
    1072:	31 96       	adiw	r30, 0x01	; 1
}

void Display::draw_glurak(){
	for (uint8_t i = 0; i<8;i++)
	{
		for (uint8_t j = 0;j<64;j++)
    1074:	a2 17       	cp	r26, r18
    1076:	b3 07       	cpc	r27, r19
    1078:	d1 f7       	brne	.-12     	; 0x106e <_ZN7Display11draw_glurakEv+0xc>
    107a:	40 5c       	subi	r20, 0xC0	; 192
    107c:	5f 4f       	sbci	r21, 0xFF	; 255
    107e:	80 58       	subi	r24, 0x80	; 128
    1080:	9f 4f       	sbci	r25, 0xFF	; 255
		}
	}
}

void Display::draw_glurak(){
	for (uint8_t i = 0; i<8;i++)
    1082:	46 17       	cp	r20, r22
    1084:	57 07       	cpc	r21, r23
    1086:	31 f0       	breq	.+12     	; 0x1094 <_ZN7Display11draw_glurakEv+0x32>
    1088:	9c 01       	movw	r18, r24
    108a:	20 5c       	subi	r18, 0xC0	; 192
    108c:	3f 4f       	sbci	r19, 0xFF	; 255
			Displayframe[i*SSD1306_WIDTH+j]=pgm_read_byte(&Pikachu[i][j]);
		}
	}
}

void Display::draw_glurak(){
    108e:	dc 01       	movw	r26, r24
    1090:	fa 01       	movw	r30, r20
    1092:	ed cf       	rjmp	.-38     	; 0x106e <_ZN7Display11draw_glurakEv+0xc>
		for (uint8_t j = 0;j<64;j++)
		{
			Displayframe[i*SSD1306_WIDTH+j]=pgm_read_byte(&Glurak[i][j]);
		}
	}
}
    1094:	cf 91       	pop	r28
    1096:	08 95       	ret

00001098 <_ZN7Display16draw_number16x16Ehhh>:

void Display::draw_number16x16(uint8_t number, uint8_t x, uint8_t y){
    1098:	ef 92       	push	r14
    109a:	ff 92       	push	r15
    109c:	0f 93       	push	r16
    109e:	1f 93       	push	r17
    10a0:	cf 93       	push	r28
    10a2:	df 93       	push	r29
	uint16_t symbol;
	if(number>=0 && number<10){
    10a4:	6a 30       	cpi	r22, 0x0A	; 10
    10a6:	08 f0       	brcs	.+2      	; 0x10aa <_ZN7Display16draw_number16x16Ehhh+0x12>
    10a8:	66 c0       	rjmp	.+204    	; 0x1176 <_ZN7Display16draw_number16x16Ehhh+0xde>
		for(uint8_t i = 0; i < 32;i++){
			symbol = pgm_read_byte(&digits16x16[number][i]);
			symbol = symbol << y%8;
			if(i<16){
				Displayframe[x+(y/8)*SSD1306_WIDTH+i] |=(uint8_t) (symbol & 0x00FF);
    10aa:	50 e0       	ldi	r21, 0x00	; 0
    10ac:	02 2f       	mov	r16, r18
    10ae:	06 95       	lsr	r16
    10b0:	06 95       	lsr	r16
    10b2:	06 95       	lsr	r16
    10b4:	10 e0       	ldi	r17, 0x00	; 0
    10b6:	d8 01       	movw	r26, r16
    10b8:	b6 95       	lsr	r27
    10ba:	ba 2f       	mov	r27, r26
    10bc:	aa 27       	eor	r26, r26
    10be:	b7 95       	ror	r27
    10c0:	a7 95       	ror	r26
				if(((symbol&0xFF00)>>8)==0){
					Displayframe[x+(y/8+1)*SSD1306_WIDTH+i] |= 0;
				}
				else {
					Displayframe[x+(y/8+1)*SSD1306_WIDTH+i] |= (uint8_t) ((symbol & 0xFF00)>>8);
    10c2:	0f 5f       	subi	r16, 0xFF	; 255
    10c4:	1f 4f       	sbci	r17, 0xFF	; 255
				}
			}
			else {
				Displayframe[x+(y/8+1)*SSD1306_WIDTH+(i-16)] |= (uint8_t) (symbol & 0x00FF);
    10c6:	16 95       	lsr	r17
    10c8:	10 2f       	mov	r17, r16
    10ca:	00 27       	eor	r16, r16
    10cc:	17 95       	ror	r17
    10ce:	07 95       	ror	r16
				Displayframe[x+(y/8)*SSD1306_WIDTH+i] |=(uint8_t) (symbol & 0x00FF);
				if(((symbol&0xFF00)>>8)==0){
					Displayframe[x+(y/8+1)*SSD1306_WIDTH+i] |= 0;
				}
				else {
					Displayframe[x+(y/8+1)*SSD1306_WIDTH+i] |= (uint8_t) ((symbol & 0xFF00)>>8);
    10d0:	7d 01       	movw	r14, r26
    10d2:	30 e8       	ldi	r19, 0x80	; 128
    10d4:	e3 0e       	add	r14, r19
    10d6:	f1 1c       	adc	r15, r1
    10d8:	e4 0e       	add	r14, r20
    10da:	f5 1e       	adc	r15, r21
    10dc:	e8 0e       	add	r14, r24
    10de:	f9 1e       	adc	r15, r25
				}
			}
			else {
				Displayframe[x+(y/8+1)*SSD1306_WIDTH+(i-16)] |= (uint8_t) (symbol & 0x00FF);
    10e0:	ea 01       	movw	r28, r20
    10e2:	c0 0f       	add	r28, r16
    10e4:	d1 1f       	adc	r29, r17
    10e6:	60 97       	sbiw	r28, 0x10	; 16
    10e8:	c8 0f       	add	r28, r24
    10ea:	d9 1f       	adc	r29, r25
				if(((symbol&0xFF00)>>8)==0){
					Displayframe[x+(y/8+2)*SSD1306_WIDTH+(i-16)] |= 0;
				}
				else {
					Displayframe[x+(y/8+2)*SSD1306_WIDTH+(i-16)] |= (uint8_t) ((symbol & 0xFF00)>>8);
    10ec:	04 0f       	add	r16, r20
    10ee:	15 1f       	adc	r17, r21
    10f0:	00 59       	subi	r16, 0x90	; 144
    10f2:	1f 4f       	sbci	r17, 0xFF	; 255
    10f4:	08 0f       	add	r16, r24
    10f6:	19 1f       	adc	r17, r25
	if(number>=0 && number<10){
		for(uint8_t i = 0; i < 32;i++){
			symbol = pgm_read_byte(&digits16x16[number][i]);
			symbol = symbol << y%8;
			if(i<16){
				Displayframe[x+(y/8)*SSD1306_WIDTH+i] |=(uint8_t) (symbol & 0x00FF);
    10f8:	a4 0f       	add	r26, r20
    10fa:	b5 1f       	adc	r27, r21
    10fc:	a8 0f       	add	r26, r24
    10fe:	b9 1f       	adc	r27, r25
    1100:	e0 e2       	ldi	r30, 0x20	; 32
    1102:	6e 9f       	mul	r22, r30
    1104:	c0 01       	movw	r24, r0
    1106:	11 24       	eor	r1, r1
				Displayframe[x+(y/8+1)*SSD1306_WIDTH+(i-16)] |= (uint8_t) (symbol & 0x00FF);
				if(((symbol&0xFF00)>>8)==0){
					Displayframe[x+(y/8+2)*SSD1306_WIDTH+(i-16)] |= 0;
				}
				else {
					Displayframe[x+(y/8+2)*SSD1306_WIDTH+(i-16)] |= (uint8_t) ((symbol & 0xFF00)>>8);
    1108:	40 e0       	ldi	r20, 0x00	; 0
    110a:	50 e0       	ldi	r21, 0x00	; 0
    110c:	8a 57       	subi	r24, 0x7A	; 122
    110e:	9a 4f       	sbci	r25, 0xFA	; 250
void Display::draw_number16x16(uint8_t number, uint8_t x, uint8_t y){
	uint16_t symbol;
	if(number>=0 && number<10){
		for(uint8_t i = 0; i < 32;i++){
			symbol = pgm_read_byte(&digits16x16[number][i]);
			symbol = symbol << y%8;
    1110:	27 70       	andi	r18, 0x07	; 7
    1112:	fc 01       	movw	r30, r24
    1114:	e4 0f       	add	r30, r20
    1116:	f5 1f       	adc	r31, r21

void Display::draw_number16x16(uint8_t number, uint8_t x, uint8_t y){
	uint16_t symbol;
	if(number>=0 && number<10){
		for(uint8_t i = 0; i < 32;i++){
			symbol = pgm_read_byte(&digits16x16[number][i]);
    1118:	e4 91       	lpm	r30, Z
    111a:	f0 e0       	ldi	r31, 0x00	; 0
			symbol = symbol << y%8;
    111c:	02 2e       	mov	r0, r18
    111e:	02 c0       	rjmp	.+4      	; 0x1124 <_ZN7Display16draw_number16x16Ehhh+0x8c>
    1120:	ee 0f       	add	r30, r30
    1122:	ff 1f       	adc	r31, r31
    1124:	0a 94       	dec	r0
    1126:	e2 f7       	brpl	.-8      	; 0x1120 <_ZN7Display16draw_number16x16Ehhh+0x88>
			if(i<16){
    1128:	40 31       	cpi	r20, 0x10	; 16
    112a:	68 f4       	brcc	.+26     	; 0x1146 <_ZN7Display16draw_number16x16Ehhh+0xae>
				Displayframe[x+(y/8)*SSD1306_WIDTH+i] |=(uint8_t) (symbol & 0x00FF);
    112c:	3c 91       	ld	r19, X
    112e:	3e 2b       	or	r19, r30
    1130:	3c 93       	st	X, r19
				if(((symbol&0xFF00)>>8)==0){
    1132:	6f 2f       	mov	r22, r31
    1134:	77 27       	eor	r23, r23
    1136:	61 15       	cp	r22, r1
    1138:	71 05       	cpc	r23, r1
    113a:	89 f0       	breq	.+34     	; 0x115e <_ZN7Display16draw_number16x16Ehhh+0xc6>
					Displayframe[x+(y/8+1)*SSD1306_WIDTH+i] |= 0;
				}
				else {
					Displayframe[x+(y/8+1)*SSD1306_WIDTH+i] |= (uint8_t) ((symbol & 0xFF00)>>8);
    113c:	f7 01       	movw	r30, r14
    113e:	30 81       	ld	r19, Z
    1140:	36 2b       	or	r19, r22
    1142:	30 83       	st	Z, r19
    1144:	0c c0       	rjmp	.+24     	; 0x115e <_ZN7Display16draw_number16x16Ehhh+0xc6>
				}
			}
			else {
				Displayframe[x+(y/8+1)*SSD1306_WIDTH+(i-16)] |= (uint8_t) (symbol & 0x00FF);
    1146:	38 81       	ld	r19, Y
    1148:	3e 2b       	or	r19, r30
    114a:	38 83       	st	Y, r19
				if(((symbol&0xFF00)>>8)==0){
    114c:	6f 2f       	mov	r22, r31
    114e:	77 27       	eor	r23, r23
    1150:	61 15       	cp	r22, r1
    1152:	71 05       	cpc	r23, r1
    1154:	21 f0       	breq	.+8      	; 0x115e <_ZN7Display16draw_number16x16Ehhh+0xc6>
					Displayframe[x+(y/8+2)*SSD1306_WIDTH+(i-16)] |= 0;
				}
				else {
					Displayframe[x+(y/8+2)*SSD1306_WIDTH+(i-16)] |= (uint8_t) ((symbol & 0xFF00)>>8);
    1156:	f8 01       	movw	r30, r16
    1158:	30 81       	ld	r19, Z
    115a:	36 2b       	or	r19, r22
    115c:	30 83       	st	Z, r19
    115e:	4f 5f       	subi	r20, 0xFF	; 255
    1160:	5f 4f       	sbci	r21, 0xFF	; 255
    1162:	ff ef       	ldi	r31, 0xFF	; 255
    1164:	ef 1a       	sub	r14, r31
    1166:	ff 0a       	sbc	r15, r31
    1168:	21 96       	adiw	r28, 0x01	; 1
    116a:	0f 5f       	subi	r16, 0xFF	; 255
    116c:	1f 4f       	sbci	r17, 0xFF	; 255
    116e:	11 96       	adiw	r26, 0x01	; 1
}

void Display::draw_number16x16(uint8_t number, uint8_t x, uint8_t y){
	uint16_t symbol;
	if(number>=0 && number<10){
		for(uint8_t i = 0; i < 32;i++){
    1170:	40 32       	cpi	r20, 0x20	; 32
    1172:	51 05       	cpc	r21, r1
    1174:	71 f6       	brne	.-100    	; 0x1112 <_ZN7Display16draw_number16x16Ehhh+0x7a>
					Displayframe[x+(y/8+2)*SSD1306_WIDTH+(i-16)] |= (uint8_t) ((symbol & 0xFF00)>>8);
				}
			}
		}
	}
}
    1176:	df 91       	pop	r29
    1178:	cf 91       	pop	r28
    117a:	1f 91       	pop	r17
    117c:	0f 91       	pop	r16
    117e:	ff 90       	pop	r15
    1180:	ef 90       	pop	r14
    1182:	08 95       	ret

00001184 <_ZN7Display6analogEhhhh>:

void Display::analog(uint8_t stunde, uint8_t minute, uint8_t sekunde, uint8_t sekanzeige){
    1184:	2f 92       	push	r2
    1186:	3f 92       	push	r3
    1188:	4f 92       	push	r4
    118a:	5f 92       	push	r5
    118c:	6f 92       	push	r6
    118e:	7f 92       	push	r7
    1190:	8f 92       	push	r8
    1192:	9f 92       	push	r9
    1194:	af 92       	push	r10
    1196:	bf 92       	push	r11
    1198:	cf 92       	push	r12
    119a:	df 92       	push	r13
    119c:	ef 92       	push	r14
    119e:	ff 92       	push	r15
    11a0:	0f 93       	push	r16
    11a2:	1f 93       	push	r17
    11a4:	cf 93       	push	r28
    11a6:	df 93       	push	r29
    11a8:	cd b7       	in	r28, 0x3d	; 61
    11aa:	de b7       	in	r29, 0x3e	; 62
    11ac:	27 97       	sbiw	r28, 0x07	; 7
    11ae:	0f b6       	in	r0, 0x3f	; 63
    11b0:	f8 94       	cli
    11b2:	de bf       	out	0x3e, r29	; 62
    11b4:	0f be       	out	0x3f, r0	; 63
    11b6:	cd bf       	out	0x3d, r28	; 61
    11b8:	9f 83       	std	Y+7, r25	; 0x07
    11ba:	8e 83       	std	Y+6, r24	; 0x06
    11bc:	6d 83       	std	Y+5, r22	; 0x05
    11be:	34 2e       	mov	r3, r20
	uint8_t Px=32-1;
	uint8_t Py=32-1;
	uint8_t x=0,y=0;
	float winkel=0;
	
	if (sekanzeige)
    11c0:	00 23       	and	r16, r16
    11c2:	09 f4       	brne	.+2      	; 0x11c6 <_ZN7Display6analogEhhhh+0x42>
    11c4:	26 c1       	rjmp	.+588    	; 0x1412 <_ZN7Display6analogEhhhh+0x28e>
	{
		//Berechnen des Sekundenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(sekunde*6.0)*M_PI/180.0-M_PI/2.0;
    11c6:	62 2f       	mov	r22, r18
    11c8:	70 e0       	ldi	r23, 0x00	; 0
    11ca:	80 e0       	ldi	r24, 0x00	; 0
    11cc:	90 e0       	ldi	r25, 0x00	; 0
    11ce:	0e 94 30 2a 	call	0x5460	; 0x5460 <__floatsisf>
    11d2:	20 e0       	ldi	r18, 0x00	; 0
    11d4:	30 e0       	ldi	r19, 0x00	; 0
    11d6:	40 ec       	ldi	r20, 0xC0	; 192
    11d8:	50 e4       	ldi	r21, 0x40	; 64
    11da:	0e 94 8e 2b 	call	0x571c	; 0x571c <__mulsf3>
    11de:	2b ed       	ldi	r18, 0xDB	; 219
    11e0:	3f e0       	ldi	r19, 0x0F	; 15
    11e2:	49 e4       	ldi	r20, 0x49	; 73
    11e4:	50 e4       	ldi	r21, 0x40	; 64
    11e6:	0e 94 8e 2b 	call	0x571c	; 0x571c <__mulsf3>
    11ea:	20 e0       	ldi	r18, 0x00	; 0
    11ec:	30 e0       	ldi	r19, 0x00	; 0
    11ee:	44 e3       	ldi	r20, 0x34	; 52
    11f0:	53 e4       	ldi	r21, 0x43	; 67
    11f2:	0e 94 95 29 	call	0x532a	; 0x532a <__divsf3>
    11f6:	2b ed       	ldi	r18, 0xDB	; 219
    11f8:	3f e0       	ldi	r19, 0x0F	; 15
    11fa:	49 ec       	ldi	r20, 0xC9	; 201
    11fc:	5f e3       	ldi	r21, 0x3F	; 63
    11fe:	0e 94 c7 28 	call	0x518e	; 0x518e <__subsf3>
    1202:	6b 01       	movw	r12, r22
    1204:	7c 01       	movw	r14, r24
			x=(uint8_t) i*cos(winkel)+Px;
    1206:	0e 94 92 29 	call	0x5324	; 0x5324 <cos>
    120a:	2b 01       	movw	r4, r22
    120c:	3c 01       	movw	r6, r24
			y=(uint8_t) i*sin(winkel)+Py;
    120e:	c7 01       	movw	r24, r14
    1210:	b6 01       	movw	r22, r12
    1212:	0e 94 f1 2b 	call	0x57e2	; 0x57e2 <sin>
    1216:	4b 01       	movw	r8, r22
    1218:	5c 01       	movw	r10, r24
    121a:	00 e0       	ldi	r16, 0x00	; 0
    121c:	10 e0       	ldi	r17, 0x00	; 0
	if (sekanzeige)
	{
		//Berechnen des Sekundenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(sekunde*6.0)*M_PI/180.0-M_PI/2.0;
			x=(uint8_t) i*cos(winkel)+Px;
    121e:	b8 01       	movw	r22, r16
    1220:	88 27       	eor	r24, r24
    1222:	77 fd       	sbrc	r23, 7
    1224:	80 95       	com	r24
    1226:	98 2f       	mov	r25, r24
    1228:	0e 94 30 2a 	call	0x5460	; 0x5460 <__floatsisf>
    122c:	6b 01       	movw	r12, r22
    122e:	7c 01       	movw	r14, r24
			y=(uint8_t) i*sin(winkel)+Py;
    1230:	a5 01       	movw	r20, r10
    1232:	94 01       	movw	r18, r8
    1234:	0e 94 8e 2b 	call	0x571c	; 0x571c <__mulsf3>
    1238:	20 e0       	ldi	r18, 0x00	; 0
    123a:	30 e0       	ldi	r19, 0x00	; 0
    123c:	48 ef       	ldi	r20, 0xF8	; 248
    123e:	51 e4       	ldi	r21, 0x41	; 65
    1240:	0e 94 c8 28 	call	0x5190	; 0x5190 <__addsf3>
    1244:	0e 94 02 2a 	call	0x5404	; 0x5404 <__fixunssfsi>
    1248:	26 2e       	mov	r2, r22
	if (sekanzeige)
	{
		//Berechnen des Sekundenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(sekunde*6.0)*M_PI/180.0-M_PI/2.0;
			x=(uint8_t) i*cos(winkel)+Px;
    124a:	a3 01       	movw	r20, r6
    124c:	92 01       	movw	r18, r4
    124e:	c7 01       	movw	r24, r14
    1250:	b6 01       	movw	r22, r12
    1252:	0e 94 8e 2b 	call	0x571c	; 0x571c <__mulsf3>
    1256:	20 e0       	ldi	r18, 0x00	; 0
    1258:	30 e0       	ldi	r19, 0x00	; 0
    125a:	48 ef       	ldi	r20, 0xF8	; 248
    125c:	51 e4       	ldi	r21, 0x41	; 65
    125e:	0e 94 c8 28 	call	0x5190	; 0x5190 <__addsf3>
    1262:	0e 94 02 2a 	call	0x5404	; 0x5404 <__fixunssfsi>
			y=(uint8_t) i*sin(winkel)+Py;

			drawPixel(x,y,0);
    1266:	20 e0       	ldi	r18, 0x00	; 0
    1268:	42 2d       	mov	r20, r2
    126a:	8e 81       	ldd	r24, Y+6	; 0x06
    126c:	9f 81       	ldd	r25, Y+7	; 0x07
    126e:	94 dc       	rcall	.-1752   	; 0xb98 <_ZN7Display9drawPixelEhhh>
    1270:	0f 5f       	subi	r16, 0xFF	; 255
    1272:	1f 4f       	sbci	r17, 0xFF	; 255
	float winkel=0;
	
	if (sekanzeige)
	{
		//Berechnen des Sekundenzeigers
		for(uint8_t i=0;i<r;i++){
    1274:	09 31       	cpi	r16, 0x19	; 25
    1276:	11 05       	cpc	r17, r1
    1278:	91 f6       	brne	.-92     	; 0x121e <_ZN7Display6analogEhhhh+0x9a>
		}

		r=21;
		//Berechnen des Minutenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(minute*6.0)*M_PI/180.0-M_PI/2.0;
    127a:	63 2d       	mov	r22, r3
    127c:	70 e0       	ldi	r23, 0x00	; 0
    127e:	80 e0       	ldi	r24, 0x00	; 0
    1280:	90 e0       	ldi	r25, 0x00	; 0
    1282:	0e 94 30 2a 	call	0x5460	; 0x5460 <__floatsisf>
    1286:	69 83       	std	Y+1, r22	; 0x01
    1288:	7a 83       	std	Y+2, r23	; 0x02
    128a:	8b 83       	std	Y+3, r24	; 0x03
    128c:	9c 83       	std	Y+4, r25	; 0x04
    128e:	20 e0       	ldi	r18, 0x00	; 0
    1290:	30 e0       	ldi	r19, 0x00	; 0
    1292:	40 ec       	ldi	r20, 0xC0	; 192
    1294:	50 e4       	ldi	r21, 0x40	; 64
    1296:	0e 94 8e 2b 	call	0x571c	; 0x571c <__mulsf3>
    129a:	2b ed       	ldi	r18, 0xDB	; 219
    129c:	3f e0       	ldi	r19, 0x0F	; 15
    129e:	49 e4       	ldi	r20, 0x49	; 73
    12a0:	50 e4       	ldi	r21, 0x40	; 64
    12a2:	0e 94 8e 2b 	call	0x571c	; 0x571c <__mulsf3>
    12a6:	20 e0       	ldi	r18, 0x00	; 0
    12a8:	30 e0       	ldi	r19, 0x00	; 0
    12aa:	44 e3       	ldi	r20, 0x34	; 52
    12ac:	53 e4       	ldi	r21, 0x43	; 67
    12ae:	0e 94 95 29 	call	0x532a	; 0x532a <__divsf3>
    12b2:	2b ed       	ldi	r18, 0xDB	; 219
    12b4:	3f e0       	ldi	r19, 0x0F	; 15
    12b6:	49 ec       	ldi	r20, 0xC9	; 201
    12b8:	5f e3       	ldi	r21, 0x3F	; 63
    12ba:	0e 94 c7 28 	call	0x518e	; 0x518e <__subsf3>
    12be:	6b 01       	movw	r12, r22
    12c0:	7c 01       	movw	r14, r24
			x=(uint8_t) i*cos(winkel)+Px;
    12c2:	0e 94 92 29 	call	0x5324	; 0x5324 <cos>
    12c6:	4b 01       	movw	r8, r22
    12c8:	5c 01       	movw	r10, r24
			y=(uint8_t) i*sin(winkel)+Py;
    12ca:	c7 01       	movw	r24, r14
    12cc:	b6 01       	movw	r22, r12
    12ce:	0e 94 f1 2b 	call	0x57e2	; 0x57e2 <sin>
    12d2:	2b 01       	movw	r4, r22
    12d4:	3c 01       	movw	r6, r24
    12d6:	00 e0       	ldi	r16, 0x00	; 0
    12d8:	10 e0       	ldi	r17, 0x00	; 0

		r=21;
		//Berechnen des Minutenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(minute*6.0)*M_PI/180.0-M_PI/2.0;
			x=(uint8_t) i*cos(winkel)+Px;
    12da:	b8 01       	movw	r22, r16
    12dc:	88 27       	eor	r24, r24
    12de:	77 fd       	sbrc	r23, 7
    12e0:	80 95       	com	r24
    12e2:	98 2f       	mov	r25, r24
    12e4:	0e 94 30 2a 	call	0x5460	; 0x5460 <__floatsisf>
    12e8:	6b 01       	movw	r12, r22
    12ea:	7c 01       	movw	r14, r24
			y=(uint8_t) i*sin(winkel)+Py;
    12ec:	a3 01       	movw	r20, r6
    12ee:	92 01       	movw	r18, r4
    12f0:	0e 94 8e 2b 	call	0x571c	; 0x571c <__mulsf3>
    12f4:	20 e0       	ldi	r18, 0x00	; 0
    12f6:	30 e0       	ldi	r19, 0x00	; 0
    12f8:	48 ef       	ldi	r20, 0xF8	; 248
    12fa:	51 e4       	ldi	r21, 0x41	; 65
    12fc:	0e 94 c8 28 	call	0x5190	; 0x5190 <__addsf3>
    1300:	0e 94 02 2a 	call	0x5404	; 0x5404 <__fixunssfsi>
    1304:	36 2e       	mov	r3, r22

		r=21;
		//Berechnen des Minutenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(minute*6.0)*M_PI/180.0-M_PI/2.0;
			x=(uint8_t) i*cos(winkel)+Px;
    1306:	a5 01       	movw	r20, r10
    1308:	94 01       	movw	r18, r8
    130a:	c7 01       	movw	r24, r14
    130c:	b6 01       	movw	r22, r12
    130e:	0e 94 8e 2b 	call	0x571c	; 0x571c <__mulsf3>
    1312:	20 e0       	ldi	r18, 0x00	; 0
    1314:	30 e0       	ldi	r19, 0x00	; 0
    1316:	48 ef       	ldi	r20, 0xF8	; 248
    1318:	51 e4       	ldi	r21, 0x41	; 65
    131a:	0e 94 c8 28 	call	0x5190	; 0x5190 <__addsf3>
    131e:	0e 94 02 2a 	call	0x5404	; 0x5404 <__fixunssfsi>
			y=(uint8_t) i*sin(winkel)+Py;

			drawPixel(x,y,0);
    1322:	20 e0       	ldi	r18, 0x00	; 0
    1324:	43 2d       	mov	r20, r3
    1326:	8e 81       	ldd	r24, Y+6	; 0x06
    1328:	9f 81       	ldd	r25, Y+7	; 0x07
    132a:	36 dc       	rcall	.-1940   	; 0xb98 <_ZN7Display9drawPixelEhhh>
    132c:	0f 5f       	subi	r16, 0xFF	; 255
    132e:	1f 4f       	sbci	r17, 0xFF	; 255
			drawPixel(x,y,0);
		}

		r=21;
		//Berechnen des Minutenzeigers
		for(uint8_t i=0;i<r;i++){
    1330:	05 31       	cpi	r16, 0x15	; 21
    1332:	11 05       	cpc	r17, r1
    1334:	91 f6       	brne	.-92     	; 0x12da <_ZN7Display6analogEhhhh+0x156>
		}

		r=13;
		//Berechnen des Stundenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(stunde*30.0+minute/2.0)*M_PI/180.0-M_PI/2.0;
    1336:	2d 81       	ldd	r18, Y+5	; 0x05
    1338:	62 2f       	mov	r22, r18
    133a:	70 e0       	ldi	r23, 0x00	; 0
    133c:	80 e0       	ldi	r24, 0x00	; 0
    133e:	90 e0       	ldi	r25, 0x00	; 0
    1340:	0e 94 30 2a 	call	0x5460	; 0x5460 <__floatsisf>
    1344:	20 e0       	ldi	r18, 0x00	; 0
    1346:	30 e0       	ldi	r19, 0x00	; 0
    1348:	40 ef       	ldi	r20, 0xF0	; 240
    134a:	51 e4       	ldi	r21, 0x41	; 65
    134c:	0e 94 8e 2b 	call	0x571c	; 0x571c <__mulsf3>
    1350:	6b 01       	movw	r12, r22
    1352:	7c 01       	movw	r14, r24
    1354:	20 e0       	ldi	r18, 0x00	; 0
    1356:	30 e0       	ldi	r19, 0x00	; 0
    1358:	40 e0       	ldi	r20, 0x00	; 0
    135a:	5f e3       	ldi	r21, 0x3F	; 63
    135c:	69 81       	ldd	r22, Y+1	; 0x01
    135e:	7a 81       	ldd	r23, Y+2	; 0x02
    1360:	8b 81       	ldd	r24, Y+3	; 0x03
    1362:	9c 81       	ldd	r25, Y+4	; 0x04
    1364:	0e 94 8e 2b 	call	0x571c	; 0x571c <__mulsf3>
    1368:	9b 01       	movw	r18, r22
    136a:	ac 01       	movw	r20, r24
    136c:	c7 01       	movw	r24, r14
    136e:	b6 01       	movw	r22, r12
    1370:	0e 94 c8 28 	call	0x5190	; 0x5190 <__addsf3>
    1374:	2b ed       	ldi	r18, 0xDB	; 219
    1376:	3f e0       	ldi	r19, 0x0F	; 15
    1378:	49 e4       	ldi	r20, 0x49	; 73
    137a:	50 e4       	ldi	r21, 0x40	; 64
    137c:	0e 94 8e 2b 	call	0x571c	; 0x571c <__mulsf3>
    1380:	20 e0       	ldi	r18, 0x00	; 0
    1382:	30 e0       	ldi	r19, 0x00	; 0
    1384:	44 e3       	ldi	r20, 0x34	; 52
    1386:	53 e4       	ldi	r21, 0x43	; 67
    1388:	0e 94 95 29 	call	0x532a	; 0x532a <__divsf3>
    138c:	2b ed       	ldi	r18, 0xDB	; 219
    138e:	3f e0       	ldi	r19, 0x0F	; 15
    1390:	49 ec       	ldi	r20, 0xC9	; 201
    1392:	5f e3       	ldi	r21, 0x3F	; 63
    1394:	0e 94 c7 28 	call	0x518e	; 0x518e <__subsf3>
    1398:	6b 01       	movw	r12, r22
    139a:	7c 01       	movw	r14, r24
			x= (uint8_t) i*cos(winkel) +Px;
    139c:	0e 94 92 29 	call	0x5324	; 0x5324 <cos>
    13a0:	2b 01       	movw	r4, r22
    13a2:	3c 01       	movw	r6, r24
			y= (uint8_t) i*sin(winkel) +Py;
    13a4:	c7 01       	movw	r24, r14
    13a6:	b6 01       	movw	r22, r12
    13a8:	0e 94 f1 2b 	call	0x57e2	; 0x57e2 <sin>
    13ac:	4b 01       	movw	r8, r22
    13ae:	5c 01       	movw	r10, r24
    13b0:	00 e0       	ldi	r16, 0x00	; 0
    13b2:	10 e0       	ldi	r17, 0x00	; 0

		r=13;
		//Berechnen des Stundenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(stunde*30.0+minute/2.0)*M_PI/180.0-M_PI/2.0;
			x= (uint8_t) i*cos(winkel) +Px;
    13b4:	b8 01       	movw	r22, r16
    13b6:	88 27       	eor	r24, r24
    13b8:	77 fd       	sbrc	r23, 7
    13ba:	80 95       	com	r24
    13bc:	98 2f       	mov	r25, r24
    13be:	0e 94 30 2a 	call	0x5460	; 0x5460 <__floatsisf>
    13c2:	6b 01       	movw	r12, r22
    13c4:	7c 01       	movw	r14, r24
			y= (uint8_t) i*sin(winkel) +Py;
    13c6:	a5 01       	movw	r20, r10
    13c8:	94 01       	movw	r18, r8
    13ca:	0e 94 8e 2b 	call	0x571c	; 0x571c <__mulsf3>
    13ce:	20 e0       	ldi	r18, 0x00	; 0
    13d0:	30 e0       	ldi	r19, 0x00	; 0
    13d2:	48 ef       	ldi	r20, 0xF8	; 248
    13d4:	51 e4       	ldi	r21, 0x41	; 65
    13d6:	0e 94 c8 28 	call	0x5190	; 0x5190 <__addsf3>
    13da:	0e 94 02 2a 	call	0x5404	; 0x5404 <__fixunssfsi>
    13de:	36 2e       	mov	r3, r22

		r=13;
		//Berechnen des Stundenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(stunde*30.0+minute/2.0)*M_PI/180.0-M_PI/2.0;
			x= (uint8_t) i*cos(winkel) +Px;
    13e0:	a3 01       	movw	r20, r6
    13e2:	92 01       	movw	r18, r4
    13e4:	c7 01       	movw	r24, r14
    13e6:	b6 01       	movw	r22, r12
    13e8:	0e 94 8e 2b 	call	0x571c	; 0x571c <__mulsf3>
    13ec:	20 e0       	ldi	r18, 0x00	; 0
    13ee:	30 e0       	ldi	r19, 0x00	; 0
    13f0:	48 ef       	ldi	r20, 0xF8	; 248
    13f2:	51 e4       	ldi	r21, 0x41	; 65
    13f4:	0e 94 c8 28 	call	0x5190	; 0x5190 <__addsf3>
    13f8:	0e 94 02 2a 	call	0x5404	; 0x5404 <__fixunssfsi>
			y= (uint8_t) i*sin(winkel) +Py;

			drawPixel(x,y,0);
    13fc:	20 e0       	ldi	r18, 0x00	; 0
    13fe:	43 2d       	mov	r20, r3
    1400:	8e 81       	ldd	r24, Y+6	; 0x06
    1402:	9f 81       	ldd	r25, Y+7	; 0x07
    1404:	c9 db       	rcall	.-2158   	; 0xb98 <_ZN7Display9drawPixelEhhh>
    1406:	0f 5f       	subi	r16, 0xFF	; 255
    1408:	1f 4f       	sbci	r17, 0xFF	; 255
			drawPixel(x,y,0);
		}

		r=13;
		//Berechnen des Stundenzeigers
		for(uint8_t i=0;i<r;i++){
    140a:	0d 30       	cpi	r16, 0x0D	; 13
    140c:	11 05       	cpc	r17, r1
    140e:	91 f6       	brne	.-92     	; 0x13b4 <_ZN7Display6analogEhhhh+0x230>
    1410:	cb c0       	rjmp	.+406    	; 0x15a8 <_ZN7Display6analogEhhhh+0x424>
	}
	else{
		r=25;
		//Berechnen des Minutenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(minute*6.0)*M_PI/180.0-M_PI/2.0;
    1412:	64 2f       	mov	r22, r20
    1414:	70 e0       	ldi	r23, 0x00	; 0
    1416:	80 e0       	ldi	r24, 0x00	; 0
    1418:	90 e0       	ldi	r25, 0x00	; 0
    141a:	0e 94 30 2a 	call	0x5460	; 0x5460 <__floatsisf>
    141e:	69 83       	std	Y+1, r22	; 0x01
    1420:	7a 83       	std	Y+2, r23	; 0x02
    1422:	8b 83       	std	Y+3, r24	; 0x03
    1424:	9c 83       	std	Y+4, r25	; 0x04
    1426:	20 e0       	ldi	r18, 0x00	; 0
    1428:	30 e0       	ldi	r19, 0x00	; 0
    142a:	40 ec       	ldi	r20, 0xC0	; 192
    142c:	50 e4       	ldi	r21, 0x40	; 64
    142e:	0e 94 8e 2b 	call	0x571c	; 0x571c <__mulsf3>
    1432:	2b ed       	ldi	r18, 0xDB	; 219
    1434:	3f e0       	ldi	r19, 0x0F	; 15
    1436:	49 e4       	ldi	r20, 0x49	; 73
    1438:	50 e4       	ldi	r21, 0x40	; 64
    143a:	0e 94 8e 2b 	call	0x571c	; 0x571c <__mulsf3>
    143e:	20 e0       	ldi	r18, 0x00	; 0
    1440:	30 e0       	ldi	r19, 0x00	; 0
    1442:	44 e3       	ldi	r20, 0x34	; 52
    1444:	53 e4       	ldi	r21, 0x43	; 67
    1446:	0e 94 95 29 	call	0x532a	; 0x532a <__divsf3>
    144a:	2b ed       	ldi	r18, 0xDB	; 219
    144c:	3f e0       	ldi	r19, 0x0F	; 15
    144e:	49 ec       	ldi	r20, 0xC9	; 201
    1450:	5f e3       	ldi	r21, 0x3F	; 63
    1452:	0e 94 c7 28 	call	0x518e	; 0x518e <__subsf3>
    1456:	6b 01       	movw	r12, r22
    1458:	7c 01       	movw	r14, r24
			x=(uint8_t) i*cos(winkel)+Px;
    145a:	0e 94 92 29 	call	0x5324	; 0x5324 <cos>
    145e:	4b 01       	movw	r8, r22
    1460:	5c 01       	movw	r10, r24
			y=(uint8_t) i*sin(winkel)+Py;
    1462:	c7 01       	movw	r24, r14
    1464:	b6 01       	movw	r22, r12
    1466:	0e 94 f1 2b 	call	0x57e2	; 0x57e2 <sin>
    146a:	2b 01       	movw	r4, r22
    146c:	3c 01       	movw	r6, r24
    146e:	00 e0       	ldi	r16, 0x00	; 0
    1470:	10 e0       	ldi	r17, 0x00	; 0
	else{
		r=25;
		//Berechnen des Minutenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(minute*6.0)*M_PI/180.0-M_PI/2.0;
			x=(uint8_t) i*cos(winkel)+Px;
    1472:	b8 01       	movw	r22, r16
    1474:	88 27       	eor	r24, r24
    1476:	77 fd       	sbrc	r23, 7
    1478:	80 95       	com	r24
    147a:	98 2f       	mov	r25, r24
    147c:	0e 94 30 2a 	call	0x5460	; 0x5460 <__floatsisf>
    1480:	6b 01       	movw	r12, r22
    1482:	7c 01       	movw	r14, r24
			y=(uint8_t) i*sin(winkel)+Py;
    1484:	a3 01       	movw	r20, r6
    1486:	92 01       	movw	r18, r4
    1488:	0e 94 8e 2b 	call	0x571c	; 0x571c <__mulsf3>
    148c:	20 e0       	ldi	r18, 0x00	; 0
    148e:	30 e0       	ldi	r19, 0x00	; 0
    1490:	48 ef       	ldi	r20, 0xF8	; 248
    1492:	51 e4       	ldi	r21, 0x41	; 65
    1494:	0e 94 c8 28 	call	0x5190	; 0x5190 <__addsf3>
    1498:	0e 94 02 2a 	call	0x5404	; 0x5404 <__fixunssfsi>
    149c:	36 2e       	mov	r3, r22
	else{
		r=25;
		//Berechnen des Minutenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(minute*6.0)*M_PI/180.0-M_PI/2.0;
			x=(uint8_t) i*cos(winkel)+Px;
    149e:	a5 01       	movw	r20, r10
    14a0:	94 01       	movw	r18, r8
    14a2:	c7 01       	movw	r24, r14
    14a4:	b6 01       	movw	r22, r12
    14a6:	0e 94 8e 2b 	call	0x571c	; 0x571c <__mulsf3>
    14aa:	20 e0       	ldi	r18, 0x00	; 0
    14ac:	30 e0       	ldi	r19, 0x00	; 0
    14ae:	48 ef       	ldi	r20, 0xF8	; 248
    14b0:	51 e4       	ldi	r21, 0x41	; 65
    14b2:	0e 94 c8 28 	call	0x5190	; 0x5190 <__addsf3>
    14b6:	0e 94 02 2a 	call	0x5404	; 0x5404 <__fixunssfsi>
			y=(uint8_t) i*sin(winkel)+Py;

			drawPixel(x,y,0);
    14ba:	20 e0       	ldi	r18, 0x00	; 0
    14bc:	43 2d       	mov	r20, r3
    14be:	8e 81       	ldd	r24, Y+6	; 0x06
    14c0:	9f 81       	ldd	r25, Y+7	; 0x07
    14c2:	6a db       	rcall	.-2348   	; 0xb98 <_ZN7Display9drawPixelEhhh>
    14c4:	0f 5f       	subi	r16, 0xFF	; 255
    14c6:	1f 4f       	sbci	r17, 0xFF	; 255
		}
	}
	else{
		r=25;
		//Berechnen des Minutenzeigers
		for(uint8_t i=0;i<r;i++){
    14c8:	09 31       	cpi	r16, 0x19	; 25
    14ca:	11 05       	cpc	r17, r1
    14cc:	91 f6       	brne	.-92     	; 0x1472 <_ZN7Display6analogEhhhh+0x2ee>
		}

		r=17;
		//Berechnen des Stundenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(stunde*30.0+minute/2.0)*M_PI/180.0-M_PI/2.0;
    14ce:	ed 81       	ldd	r30, Y+5	; 0x05
    14d0:	6e 2f       	mov	r22, r30
    14d2:	70 e0       	ldi	r23, 0x00	; 0
    14d4:	80 e0       	ldi	r24, 0x00	; 0
    14d6:	90 e0       	ldi	r25, 0x00	; 0
    14d8:	0e 94 30 2a 	call	0x5460	; 0x5460 <__floatsisf>
    14dc:	20 e0       	ldi	r18, 0x00	; 0
    14de:	30 e0       	ldi	r19, 0x00	; 0
    14e0:	40 ef       	ldi	r20, 0xF0	; 240
    14e2:	51 e4       	ldi	r21, 0x41	; 65
    14e4:	0e 94 8e 2b 	call	0x571c	; 0x571c <__mulsf3>
    14e8:	6b 01       	movw	r12, r22
    14ea:	7c 01       	movw	r14, r24
    14ec:	20 e0       	ldi	r18, 0x00	; 0
    14ee:	30 e0       	ldi	r19, 0x00	; 0
    14f0:	40 e0       	ldi	r20, 0x00	; 0
    14f2:	5f e3       	ldi	r21, 0x3F	; 63
    14f4:	69 81       	ldd	r22, Y+1	; 0x01
    14f6:	7a 81       	ldd	r23, Y+2	; 0x02
    14f8:	8b 81       	ldd	r24, Y+3	; 0x03
    14fa:	9c 81       	ldd	r25, Y+4	; 0x04
    14fc:	0e 94 8e 2b 	call	0x571c	; 0x571c <__mulsf3>
    1500:	9b 01       	movw	r18, r22
    1502:	ac 01       	movw	r20, r24
    1504:	c7 01       	movw	r24, r14
    1506:	b6 01       	movw	r22, r12
    1508:	0e 94 c8 28 	call	0x5190	; 0x5190 <__addsf3>
    150c:	2b ed       	ldi	r18, 0xDB	; 219
    150e:	3f e0       	ldi	r19, 0x0F	; 15
    1510:	49 e4       	ldi	r20, 0x49	; 73
    1512:	50 e4       	ldi	r21, 0x40	; 64
    1514:	0e 94 8e 2b 	call	0x571c	; 0x571c <__mulsf3>
    1518:	20 e0       	ldi	r18, 0x00	; 0
    151a:	30 e0       	ldi	r19, 0x00	; 0
    151c:	44 e3       	ldi	r20, 0x34	; 52
    151e:	53 e4       	ldi	r21, 0x43	; 67
    1520:	0e 94 95 29 	call	0x532a	; 0x532a <__divsf3>
    1524:	2b ed       	ldi	r18, 0xDB	; 219
    1526:	3f e0       	ldi	r19, 0x0F	; 15
    1528:	49 ec       	ldi	r20, 0xC9	; 201
    152a:	5f e3       	ldi	r21, 0x3F	; 63
    152c:	0e 94 c7 28 	call	0x518e	; 0x518e <__subsf3>
    1530:	6b 01       	movw	r12, r22
    1532:	7c 01       	movw	r14, r24
			x= (uint8_t) i*cos(winkel) +Px;
    1534:	0e 94 92 29 	call	0x5324	; 0x5324 <cos>
    1538:	2b 01       	movw	r4, r22
    153a:	3c 01       	movw	r6, r24
			y= (uint8_t) i*sin(winkel) +Py;
    153c:	c7 01       	movw	r24, r14
    153e:	b6 01       	movw	r22, r12
    1540:	0e 94 f1 2b 	call	0x57e2	; 0x57e2 <sin>
    1544:	4b 01       	movw	r8, r22
    1546:	5c 01       	movw	r10, r24
    1548:	00 e0       	ldi	r16, 0x00	; 0
    154a:	10 e0       	ldi	r17, 0x00	; 0

		r=17;
		//Berechnen des Stundenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(stunde*30.0+minute/2.0)*M_PI/180.0-M_PI/2.0;
			x= (uint8_t) i*cos(winkel) +Px;
    154c:	b8 01       	movw	r22, r16
    154e:	88 27       	eor	r24, r24
    1550:	77 fd       	sbrc	r23, 7
    1552:	80 95       	com	r24
    1554:	98 2f       	mov	r25, r24
    1556:	0e 94 30 2a 	call	0x5460	; 0x5460 <__floatsisf>
    155a:	6b 01       	movw	r12, r22
    155c:	7c 01       	movw	r14, r24
			y= (uint8_t) i*sin(winkel) +Py;
    155e:	a5 01       	movw	r20, r10
    1560:	94 01       	movw	r18, r8
    1562:	0e 94 8e 2b 	call	0x571c	; 0x571c <__mulsf3>
    1566:	20 e0       	ldi	r18, 0x00	; 0
    1568:	30 e0       	ldi	r19, 0x00	; 0
    156a:	48 ef       	ldi	r20, 0xF8	; 248
    156c:	51 e4       	ldi	r21, 0x41	; 65
    156e:	0e 94 c8 28 	call	0x5190	; 0x5190 <__addsf3>
    1572:	0e 94 02 2a 	call	0x5404	; 0x5404 <__fixunssfsi>
    1576:	36 2e       	mov	r3, r22

		r=17;
		//Berechnen des Stundenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(stunde*30.0+minute/2.0)*M_PI/180.0-M_PI/2.0;
			x= (uint8_t) i*cos(winkel) +Px;
    1578:	a3 01       	movw	r20, r6
    157a:	92 01       	movw	r18, r4
    157c:	c7 01       	movw	r24, r14
    157e:	b6 01       	movw	r22, r12
    1580:	0e 94 8e 2b 	call	0x571c	; 0x571c <__mulsf3>
    1584:	20 e0       	ldi	r18, 0x00	; 0
    1586:	30 e0       	ldi	r19, 0x00	; 0
    1588:	48 ef       	ldi	r20, 0xF8	; 248
    158a:	51 e4       	ldi	r21, 0x41	; 65
    158c:	0e 94 c8 28 	call	0x5190	; 0x5190 <__addsf3>
    1590:	0e 94 02 2a 	call	0x5404	; 0x5404 <__fixunssfsi>
			y= (uint8_t) i*sin(winkel) +Py;

			drawPixel(x,y,0);
    1594:	20 e0       	ldi	r18, 0x00	; 0
    1596:	43 2d       	mov	r20, r3
    1598:	8e 81       	ldd	r24, Y+6	; 0x06
    159a:	9f 81       	ldd	r25, Y+7	; 0x07
    159c:	fd da       	rcall	.-2566   	; 0xb98 <_ZN7Display9drawPixelEhhh>
    159e:	0f 5f       	subi	r16, 0xFF	; 255
    15a0:	1f 4f       	sbci	r17, 0xFF	; 255
			drawPixel(x,y,0);
		}

		r=17;
		//Berechnen des Stundenzeigers
		for(uint8_t i=0;i<r;i++){
    15a2:	01 31       	cpi	r16, 0x11	; 17
    15a4:	11 05       	cpc	r17, r1
    15a6:	91 f6       	brne	.-92     	; 0x154c <_ZN7Display6analogEhhhh+0x3c8>
		}
	}
	

	//Anzeige der Zahlen
	draw_ASCI('1',32-charsize,0);
    15a8:	20 e0       	ldi	r18, 0x00	; 0
    15aa:	4a e1       	ldi	r20, 0x1A	; 26
    15ac:	61 e3       	ldi	r22, 0x31	; 49
    15ae:	8e 81       	ldd	r24, Y+6	; 0x06
    15b0:	9f 81       	ldd	r25, Y+7	; 0x07
    15b2:	ee dc       	rcall	.-1572   	; 0xf90 <_ZN7Display9draw_ASCIEhhh>
	draw_ASCI('2',32,0);
    15b4:	20 e0       	ldi	r18, 0x00	; 0
    15b6:	40 e2       	ldi	r20, 0x20	; 32
    15b8:	62 e3       	ldi	r22, 0x32	; 50
    15ba:	8e 81       	ldd	r24, Y+6	; 0x06
    15bc:	9f 81       	ldd	r25, Y+7	; 0x07
    15be:	e8 dc       	rcall	.-1584   	; 0xf90 <_ZN7Display9draw_ASCIEhhh>
	draw_ASCI('3',64-charsize,4*charhighte-charhighte/2);
    15c0:	2c e1       	ldi	r18, 0x1C	; 28
    15c2:	4a e3       	ldi	r20, 0x3A	; 58
    15c4:	63 e3       	ldi	r22, 0x33	; 51
    15c6:	8e 81       	ldd	r24, Y+6	; 0x06
    15c8:	9f 81       	ldd	r25, Y+7	; 0x07
    15ca:	e2 dc       	rcall	.-1596   	; 0xf90 <_ZN7Display9draw_ASCIEhhh>
	draw_ASCI('6',32-charsize/2,7*charhighte);
    15cc:	28 e3       	ldi	r18, 0x38	; 56
    15ce:	4d e1       	ldi	r20, 0x1D	; 29
    15d0:	66 e3       	ldi	r22, 0x36	; 54
    15d2:	8e 81       	ldd	r24, Y+6	; 0x06
    15d4:	9f 81       	ldd	r25, Y+7	; 0x07
    15d6:	dc dc       	rcall	.-1608   	; 0xf90 <_ZN7Display9draw_ASCIEhhh>
	draw_ASCI('9',0,4*charhighte-charhighte/2);
    15d8:	2c e1       	ldi	r18, 0x1C	; 28
    15da:	40 e0       	ldi	r20, 0x00	; 0
    15dc:	69 e3       	ldi	r22, 0x39	; 57
    15de:	8e 81       	ldd	r24, Y+6	; 0x06
    15e0:	9f 81       	ldd	r25, Y+7	; 0x07
    15e2:	d6 dc       	rcall	.-1620   	; 0xf90 <_ZN7Display9draw_ASCIEhhh>

	//anzeige des Rings fuer die Restlichen Stunden Zahlen
	//1
	drawPixel(26*cos((30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
    15e4:	20 e0       	ldi	r18, 0x00	; 0
    15e6:	48 e0       	ldi	r20, 0x08	; 8
    15e8:	6c e2       	ldi	r22, 0x2C	; 44
    15ea:	8e 81       	ldd	r24, Y+6	; 0x06
    15ec:	9f 81       	ldd	r25, Y+7	; 0x07
    15ee:	d4 da       	rcall	.-2648   	; 0xb98 <_ZN7Display9drawPixelEhhh>
	//2
	drawPixel(26*cos((2*30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((2*30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
    15f0:	20 e0       	ldi	r18, 0x00	; 0
    15f2:	42 e1       	ldi	r20, 0x12	; 18
    15f4:	65 e3       	ldi	r22, 0x35	; 53
    15f6:	8e 81       	ldd	r24, Y+6	; 0x06
    15f8:	9f 81       	ldd	r25, Y+7	; 0x07
    15fa:	ce da       	rcall	.-2660   	; 0xb98 <_ZN7Display9drawPixelEhhh>
	//4
	drawPixel(26*cos((4*30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((4*30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
    15fc:	20 e0       	ldi	r18, 0x00	; 0
    15fe:	4c e2       	ldi	r20, 0x2C	; 44
    1600:	65 e3       	ldi	r22, 0x35	; 53
    1602:	8e 81       	ldd	r24, Y+6	; 0x06
    1604:	9f 81       	ldd	r25, Y+7	; 0x07
    1606:	c8 da       	rcall	.-2672   	; 0xb98 <_ZN7Display9drawPixelEhhh>
	//5
	drawPixel(26*cos((5*30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((5*30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
    1608:	20 e0       	ldi	r18, 0x00	; 0
    160a:	45 e3       	ldi	r20, 0x35	; 53
    160c:	6b e2       	ldi	r22, 0x2B	; 43
    160e:	8e 81       	ldd	r24, Y+6	; 0x06
    1610:	9f 81       	ldd	r25, Y+7	; 0x07
    1612:	c2 da       	rcall	.-2684   	; 0xb98 <_ZN7Display9drawPixelEhhh>
	//7
	drawPixel(26*cos((7*30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((7*30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
    1614:	20 e0       	ldi	r18, 0x00	; 0
    1616:	45 e3       	ldi	r20, 0x35	; 53
    1618:	61 e1       	ldi	r22, 0x11	; 17
    161a:	8e 81       	ldd	r24, Y+6	; 0x06
    161c:	9f 81       	ldd	r25, Y+7	; 0x07
    161e:	bc da       	rcall	.-2696   	; 0xb98 <_ZN7Display9drawPixelEhhh>
	//8
	drawPixel(26*cos((8*30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((8*30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
    1620:	20 e0       	ldi	r18, 0x00	; 0
    1622:	4c e2       	ldi	r20, 0x2C	; 44
    1624:	68 e0       	ldi	r22, 0x08	; 8
    1626:	8e 81       	ldd	r24, Y+6	; 0x06
    1628:	9f 81       	ldd	r25, Y+7	; 0x07
    162a:	b6 da       	rcall	.-2708   	; 0xb98 <_ZN7Display9drawPixelEhhh>
	//10
	drawPixel(26*cos((10*30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((10*30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
    162c:	20 e0       	ldi	r18, 0x00	; 0
    162e:	41 e1       	ldi	r20, 0x11	; 17
    1630:	68 e0       	ldi	r22, 0x08	; 8
    1632:	8e 81       	ldd	r24, Y+6	; 0x06
    1634:	9f 81       	ldd	r25, Y+7	; 0x07
    1636:	b0 da       	rcall	.-2720   	; 0xb98 <_ZN7Display9drawPixelEhhh>
	//11
	drawPixel(26*cos((11*30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((11*30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
    1638:	20 e0       	ldi	r18, 0x00	; 0
    163a:	48 e0       	ldi	r20, 0x08	; 8
    163c:	62 e1       	ldi	r22, 0x12	; 18
    163e:	8e 81       	ldd	r24, Y+6	; 0x06
    1640:	9f 81       	ldd	r25, Y+7	; 0x07
    1642:	aa da       	rcall	.-2732   	; 0xb98 <_ZN7Display9drawPixelEhhh>
}
    1644:	27 96       	adiw	r28, 0x07	; 7
    1646:	0f b6       	in	r0, 0x3f	; 63
    1648:	f8 94       	cli
    164a:	de bf       	out	0x3e, r29	; 62
    164c:	0f be       	out	0x3f, r0	; 63
    164e:	cd bf       	out	0x3d, r28	; 61
    1650:	df 91       	pop	r29
    1652:	cf 91       	pop	r28
    1654:	1f 91       	pop	r17
    1656:	0f 91       	pop	r16
    1658:	ff 90       	pop	r15
    165a:	ef 90       	pop	r14
    165c:	df 90       	pop	r13
    165e:	cf 90       	pop	r12
    1660:	bf 90       	pop	r11
    1662:	af 90       	pop	r10
    1664:	9f 90       	pop	r9
    1666:	8f 90       	pop	r8
    1668:	7f 90       	pop	r7
    166a:	6f 90       	pop	r6
    166c:	5f 90       	pop	r5
    166e:	4f 90       	pop	r4
    1670:	3f 90       	pop	r3
    1672:	2f 90       	pop	r2
    1674:	08 95       	ret

00001676 <_Z8ADC_Readh>:
	for (uint8_t i = 0; i < nsamples; ++i ) {
		sum += ADC_Read( channel );
	}
	
	return (uint16_t)( sum / nsamples );
}
    1676:	ec e7       	ldi	r30, 0x7C	; 124
    1678:	f0 e0       	ldi	r31, 0x00	; 0
    167a:	90 81       	ld	r25, Z
    167c:	8f 71       	andi	r24, 0x1F	; 31
    167e:	90 7e       	andi	r25, 0xE0	; 224
    1680:	98 2b       	or	r25, r24
    1682:	90 83       	st	Z, r25
    1684:	ea e7       	ldi	r30, 0x7A	; 122
    1686:	f0 e0       	ldi	r31, 0x00	; 0
    1688:	80 81       	ld	r24, Z
    168a:	80 64       	ori	r24, 0x40	; 64
    168c:	80 83       	st	Z, r24
    168e:	80 81       	ld	r24, Z
    1690:	86 fd       	sbrc	r24, 6
    1692:	fd cf       	rjmp	.-6      	; 0x168e <_Z8ADC_Readh+0x18>
    1694:	80 91 78 00 	lds	r24, 0x0078
    1698:	90 91 79 00 	lds	r25, 0x0079
    169c:	08 95       	ret

0000169e <_Z14Batteriestatusv>:

double batterie;
int8_t Batteriestatus(){
	uint16_t ADCwert=ADC_Read(0);
    169e:	80 e0       	ldi	r24, 0x00	; 0
    16a0:	ea df       	rcall	.-44     	; 0x1676 <_Z8ADC_Readh>
	batterie = (ADCwert/1023.0)*3.3*SPANNUNGSTEILER;
    16a2:	bc 01       	movw	r22, r24
    16a4:	80 e0       	ldi	r24, 0x00	; 0
    16a6:	90 e0       	ldi	r25, 0x00	; 0
    16a8:	0e 94 2e 2a 	call	0x545c	; 0x545c <__floatunsisf>
    16ac:	20 e0       	ldi	r18, 0x00	; 0
    16ae:	30 ec       	ldi	r19, 0xC0	; 192
    16b0:	4f e7       	ldi	r20, 0x7F	; 127
    16b2:	54 e4       	ldi	r21, 0x44	; 68
    16b4:	0e 94 95 29 	call	0x532a	; 0x532a <__divsf3>
    16b8:	23 e3       	ldi	r18, 0x33	; 51
    16ba:	33 e3       	ldi	r19, 0x33	; 51
    16bc:	43 e5       	ldi	r20, 0x53	; 83
    16be:	50 e4       	ldi	r21, 0x40	; 64
    16c0:	0e 94 8e 2b 	call	0x571c	; 0x571c <__mulsf3>
    16c4:	2d e0       	ldi	r18, 0x0D	; 13
    16c6:	31 e7       	ldi	r19, 0x71	; 113
    16c8:	40 e0       	ldi	r20, 0x00	; 0
    16ca:	50 e4       	ldi	r21, 0x40	; 64
    16cc:	0e 94 8e 2b 	call	0x571c	; 0x571c <__mulsf3>
    16d0:	60 93 2b 03 	sts	0x032B, r22
    16d4:	70 93 2c 03 	sts	0x032C, r23
    16d8:	80 93 2d 03 	sts	0x032D, r24
    16dc:	90 93 2e 03 	sts	0x032E, r25
	return ((batterie-3.0)/(4.2-3.0)*100);
    16e0:	20 e0       	ldi	r18, 0x00	; 0
    16e2:	30 e0       	ldi	r19, 0x00	; 0
    16e4:	40 e4       	ldi	r20, 0x40	; 64
    16e6:	50 e4       	ldi	r21, 0x40	; 64
    16e8:	0e 94 c7 28 	call	0x518e	; 0x518e <__subsf3>
    16ec:	28 e9       	ldi	r18, 0x98	; 152
    16ee:	39 e9       	ldi	r19, 0x99	; 153
    16f0:	49 e9       	ldi	r20, 0x99	; 153
    16f2:	5f e3       	ldi	r21, 0x3F	; 63
    16f4:	0e 94 95 29 	call	0x532a	; 0x532a <__divsf3>
    16f8:	20 e0       	ldi	r18, 0x00	; 0
    16fa:	30 e0       	ldi	r19, 0x00	; 0
    16fc:	48 ec       	ldi	r20, 0xC8	; 200
    16fe:	52 e4       	ldi	r21, 0x42	; 66
    1700:	0e 94 8e 2b 	call	0x571c	; 0x571c <__mulsf3>
    1704:	0e 94 fd 29 	call	0x53fa	; 0x53fa <__fixsfsi>
    1708:	86 2f       	mov	r24, r22
}
    170a:	08 95       	ret

0000170c <_Z14willkommenpagev>:
#ifndef SEITEN_H_
#define SEITEN_H_

//Diese Funktionen schreiben nur in den Framebuffer und das Schreiben passiert in der Main ueber einen Interupt

void willkommenpage(){
    170c:	cf 92       	push	r12
    170e:	df 92       	push	r13
    1710:	ef 92       	push	r14
    1712:	ff 92       	push	r15
    1714:	0f 93       	push	r16
    1716:	1f 93       	push	r17
    1718:	cf 93       	push	r28
    171a:	df 93       	push	r29
    171c:	cd b7       	in	r28, 0x3d	; 61
    171e:	de b7       	in	r29, 0x3e	; 62
    1720:	64 97       	sbiw	r28, 0x14	; 20
    1722:	0f b6       	in	r0, 0x3f	; 63
    1724:	f8 94       	cli
    1726:	de bf       	out	0x3e, r29	; 62
    1728:	0f be       	out	0x3f, r0	; 63
    172a:	cd bf       	out	0x3d, r28	; 61
	char buffer[20];
	uint8_t buffersize;
	oled.clearFrame();
    172c:	86 e4       	ldi	r24, 0x46	; 70
    172e:	93 e0       	ldi	r25, 0x03	; 3
    1730:	6c d9       	rcall	.-3368   	; 0xa0a <_ZN7Display10clearFrameEv>
	buffersize=sprintf(buffer,"Fahradcomputer");
    1732:	8f e0       	ldi	r24, 0x0F	; 15
    1734:	e0 e0       	ldi	r30, 0x00	; 0
    1736:	f1 e0       	ldi	r31, 0x01	; 1
    1738:	8e 01       	movw	r16, r28
    173a:	0f 5f       	subi	r16, 0xFF	; 255
    173c:	1f 4f       	sbci	r17, 0xFF	; 255
    173e:	d8 01       	movw	r26, r16
    1740:	01 90       	ld	r0, Z+
    1742:	0d 92       	st	X+, r0
    1744:	8a 95       	dec	r24
    1746:	e1 f7       	brne	.-8      	; 0x1740 <_Z14willkommenpagev+0x34>
    1748:	c0 2e       	mov	r12, r16
    174a:	d1 2e       	mov	r13, r17
    174c:	78 01       	movw	r14, r16
    174e:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0; i < buffersize;i++){
		oled.draw_ASCI(buffer[i],i*charsize,0);
    1750:	f7 01       	movw	r30, r14
    1752:	61 91       	ld	r22, Z+
    1754:	7f 01       	movw	r14, r30
    1756:	20 e0       	ldi	r18, 0x00	; 0
    1758:	41 2f       	mov	r20, r17
    175a:	86 e4       	ldi	r24, 0x46	; 70
    175c:	93 e0       	ldi	r25, 0x03	; 3
    175e:	18 dc       	rcall	.-2000   	; 0xf90 <_ZN7Display9draw_ASCIEhhh>
    1760:	1a 5f       	subi	r17, 0xFA	; 250
void willkommenpage(){
	char buffer[20];
	uint8_t buffersize;
	oled.clearFrame();
	buffersize=sprintf(buffer,"Fahradcomputer");
	for(uint8_t i=0; i < buffersize;i++){
    1762:	14 35       	cpi	r17, 0x54	; 84
    1764:	a9 f7       	brne	.-22     	; 0x1750 <_Z14willkommenpagev+0x44>
		oled.draw_ASCI(buffer[i],i*charsize,0);
	}
	buffersize=sprintf(buffer,"--------------");
    1766:	8f e0       	ldi	r24, 0x0F	; 15
    1768:	ef e0       	ldi	r30, 0x0F	; 15
    176a:	f1 e0       	ldi	r31, 0x01	; 1
    176c:	de 01       	movw	r26, r28
    176e:	11 96       	adiw	r26, 0x01	; 1
    1770:	01 90       	ld	r0, Z+
    1772:	0d 92       	st	X+, r0
    1774:	8a 95       	dec	r24
    1776:	e1 f7       	brne	.-8      	; 0x1770 <_Z14willkommenpagev+0x64>
    1778:	ec 2c       	mov	r14, r12
    177a:	fd 2c       	mov	r15, r13
    177c:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0; i < buffersize;i++){
		oled.draw_ASCI(buffer[i],i*charsize,8);
    177e:	f7 01       	movw	r30, r14
    1780:	61 91       	ld	r22, Z+
    1782:	7f 01       	movw	r14, r30
    1784:	28 e0       	ldi	r18, 0x08	; 8
    1786:	41 2f       	mov	r20, r17
    1788:	86 e4       	ldi	r24, 0x46	; 70
    178a:	93 e0       	ldi	r25, 0x03	; 3
    178c:	01 dc       	rcall	.-2046   	; 0xf90 <_ZN7Display9draw_ASCIEhhh>
    178e:	1a 5f       	subi	r17, 0xFA	; 250
	buffersize=sprintf(buffer,"Fahradcomputer");
	for(uint8_t i=0; i < buffersize;i++){
		oled.draw_ASCI(buffer[i],i*charsize,0);
	}
	buffersize=sprintf(buffer,"--------------");
	for(uint8_t i=0; i < buffersize;i++){
    1790:	14 35       	cpi	r17, 0x54	; 84
    1792:	a9 f7       	brne	.-22     	; 0x177e <_Z14willkommenpagev+0x72>
		oled.draw_ASCI(buffer[i],i*charsize,8);
	}
	buffersize=sprintf(buffer,"Version: %.2f",(double)VERSIONSNUMMER);
    1794:	80 e4       	ldi	r24, 0x40	; 64
    1796:	8f 93       	push	r24
    1798:	1f 92       	push	r1
    179a:	1f 92       	push	r1
    179c:	1f 92       	push	r1
    179e:	8e e1       	ldi	r24, 0x1E	; 30
    17a0:	91 e0       	ldi	r25, 0x01	; 1
    17a2:	9f 93       	push	r25
    17a4:	8f 93       	push	r24
    17a6:	ce 01       	movw	r24, r28
    17a8:	01 96       	adiw	r24, 0x01	; 1
    17aa:	9f 93       	push	r25
    17ac:	8f 93       	push	r24
    17ae:	0e 94 ea 30 	call	0x61d4	; 0x61d4 <sprintf>
	for(uint8_t i=0; i < buffersize;i++){
    17b2:	0f b6       	in	r0, 0x3f	; 63
    17b4:	f8 94       	cli
    17b6:	de bf       	out	0x3e, r29	; 62
    17b8:	0f be       	out	0x3f, r0	; 63
    17ba:	cd bf       	out	0x3d, r28	; 61
    17bc:	88 23       	and	r24, r24
    17be:	c9 f0       	breq	.+50     	; 0x17f2 <_Z14willkommenpagev+0xe6>
    17c0:	81 50       	subi	r24, 0x01	; 1
    17c2:	68 94       	set
    17c4:	ee 24       	eor	r14, r14
    17c6:	e1 f8       	bld	r14, 1
    17c8:	f1 2c       	mov	r15, r1
    17ca:	ec 0e       	add	r14, r28
    17cc:	fd 1e       	adc	r15, r29
    17ce:	e8 0e       	add	r14, r24
    17d0:	f1 1c       	adc	r15, r1
    17d2:	0c 2d       	mov	r16, r12
    17d4:	1d 2d       	mov	r17, r13
    17d6:	d1 2c       	mov	r13, r1
		oled.draw_ASCI(buffer[i],i*charsize,32);
    17d8:	f8 01       	movw	r30, r16
    17da:	61 91       	ld	r22, Z+
    17dc:	8f 01       	movw	r16, r30
    17de:	20 e2       	ldi	r18, 0x20	; 32
    17e0:	4d 2d       	mov	r20, r13
    17e2:	86 e4       	ldi	r24, 0x46	; 70
    17e4:	93 e0       	ldi	r25, 0x03	; 3
    17e6:	d4 db       	rcall	.-2136   	; 0xf90 <_ZN7Display9draw_ASCIEhhh>
    17e8:	f6 e0       	ldi	r31, 0x06	; 6
    17ea:	df 0e       	add	r13, r31
	buffersize=sprintf(buffer,"--------------");
	for(uint8_t i=0; i < buffersize;i++){
		oled.draw_ASCI(buffer[i],i*charsize,8);
	}
	buffersize=sprintf(buffer,"Version: %.2f",(double)VERSIONSNUMMER);
	for(uint8_t i=0; i < buffersize;i++){
    17ec:	0e 15       	cp	r16, r14
    17ee:	1f 05       	cpc	r17, r15
    17f0:	99 f7       	brne	.-26     	; 0x17d8 <_Z14willkommenpagev+0xcc>
		oled.draw_ASCI(buffer[i],i*charsize,32);

	}
	oled.sendFrame();
    17f2:	86 e4       	ldi	r24, 0x46	; 70
    17f4:	93 e0       	ldi	r25, 0x03	; 3
    17f6:	93 d9       	rcall	.-3290   	; 0xb1e <_ZN7Display9sendFrameEv>
	oled.clearFrame();
    17f8:	86 e4       	ldi	r24, 0x46	; 70
    17fa:	93 e0       	ldi	r25, 0x03	; 3
    17fc:	06 d9       	rcall	.-3572   	; 0xa0a <_ZN7Display10clearFrameEv>
    17fe:	85 e0       	ldi	r24, 0x05	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1800:	2f e7       	ldi	r18, 0x7F	; 127
    1802:	38 e3       	ldi	r19, 0x38	; 56
    1804:	91 e0       	ldi	r25, 0x01	; 1
    1806:	21 50       	subi	r18, 0x01	; 1
    1808:	30 40       	sbci	r19, 0x00	; 0
    180a:	90 40       	sbci	r25, 0x00	; 0
    180c:	e1 f7       	brne	.-8      	; 0x1806 <_Z14willkommenpagev+0xfa>
    180e:	00 c0       	rjmp	.+0      	; 0x1810 <_Z14willkommenpagev+0x104>
    1810:	00 00       	nop
    1812:	ef e7       	ldi	r30, 0x7F	; 127
    1814:	f8 e3       	ldi	r31, 0x38	; 56
    1816:	21 e0       	ldi	r18, 0x01	; 1
    1818:	e1 50       	subi	r30, 0x01	; 1
    181a:	f0 40       	sbci	r31, 0x00	; 0
    181c:	20 40       	sbci	r18, 0x00	; 0
    181e:	e1 f7       	brne	.-8      	; 0x1818 <_Z14willkommenpagev+0x10c>
    1820:	00 c0       	rjmp	.+0      	; 0x1822 <_Z14willkommenpagev+0x116>
    1822:	00 00       	nop
    1824:	81 50       	subi	r24, 0x01	; 1
	for (uint8_t i=0;i<5;i++)
    1826:	61 f7       	brne	.-40     	; 0x1800 <_Z14willkommenpagev+0xf4>
	{
		_delay_ms(50);
		_delay_ms(50);
	}
}
    1828:	64 96       	adiw	r28, 0x14	; 20
    182a:	0f b6       	in	r0, 0x3f	; 63
    182c:	f8 94       	cli
    182e:	de bf       	out	0x3e, r29	; 62
    1830:	0f be       	out	0x3f, r0	; 63
    1832:	cd bf       	out	0x3d, r28	; 61
    1834:	df 91       	pop	r29
    1836:	cf 91       	pop	r28
    1838:	1f 91       	pop	r17
    183a:	0f 91       	pop	r16
    183c:	ff 90       	pop	r15
    183e:	ef 90       	pop	r14
    1840:	df 90       	pop	r13
    1842:	cf 90       	pop	r12
    1844:	08 95       	ret

00001846 <_Z6headerh>:

void header(uint8_t page){
    1846:	ef 92       	push	r14
    1848:	ff 92       	push	r15
    184a:	0f 93       	push	r16
    184c:	1f 93       	push	r17
    184e:	cf 93       	push	r28
    1850:	df 93       	push	r29
    1852:	cd b7       	in	r28, 0x3d	; 61
    1854:	de b7       	in	r29, 0x3e	; 62
    1856:	64 97       	sbiw	r28, 0x14	; 20
    1858:	0f b6       	in	r0, 0x3f	; 63
    185a:	f8 94       	cli
    185c:	de bf       	out	0x3e, r29	; 62
    185e:	0f be       	out	0x3f, r0	; 63
    1860:	cd bf       	out	0x3d, r28	; 61
	char buffer[20];
	uint8_t buffersize=0;;
	switch (page) {
    1862:	81 30       	cpi	r24, 0x01	; 1
    1864:	09 f4       	brne	.+2      	; 0x1868 <_Z6headerh+0x22>
    1866:	51 c0       	rjmp	.+162    	; 0x190a <_Z6headerh+0xc4>
    1868:	20 f0       	brcs	.+8      	; 0x1872 <_Z6headerh+0x2c>
    186a:	82 30       	cpi	r24, 0x02	; 2
    186c:	09 f4       	brne	.+2      	; 0x1870 <_Z6headerh+0x2a>
    186e:	87 c0       	rjmp	.+270    	; 0x197e <_Z6headerh+0x138>
    1870:	be c0       	rjmp	.+380    	; 0x19ee <_Z6headerh+0x1a8>
    1872:	0f 2e       	mov	r0, r31
    1874:	fd e7       	ldi	r31, 0x7D	; 125
    1876:	ef 2e       	mov	r14, r31
    1878:	f7 e0       	ldi	r31, 0x07	; 7
    187a:	ff 2e       	mov	r15, r31
    187c:	f0 2d       	mov	r31, r0
    187e:	10 e0       	ldi	r17, 0x00	; 0
		case 0:	//standard Header fuer fast alle Pages
			for(uint8_t i=0;i<8;i++){
				oled.draw_ASCI(rtc.msg_uhr[i],i*charsize,0);
    1880:	f7 01       	movw	r30, r14
    1882:	61 91       	ld	r22, Z+
    1884:	7f 01       	movw	r14, r30
    1886:	20 e0       	ldi	r18, 0x00	; 0
    1888:	41 2f       	mov	r20, r17
    188a:	86 e4       	ldi	r24, 0x46	; 70
    188c:	93 e0       	ldi	r25, 0x03	; 3
    188e:	80 db       	rcall	.-2304   	; 0xf90 <_ZN7Display9draw_ASCIEhhh>
    1890:	1a 5f       	subi	r17, 0xFA	; 250
void header(uint8_t page){
	char buffer[20];
	uint8_t buffersize=0;;
	switch (page) {
		case 0:	//standard Header fuer fast alle Pages
			for(uint8_t i=0;i<8;i++){
    1892:	10 33       	cpi	r17, 0x30	; 48
    1894:	a9 f7       	brne	.-22     	; 0x1880 <_Z6headerh+0x3a>
				oled.draw_ASCI(rtc.msg_uhr[i],i*charsize,0);
			}
			buffersize=sprintf(buffer,"Bat: %i%%",Batteriestatus());
    1896:	03 df       	rcall	.-506    	; 0x169e <_Z14Batteriestatusv>
    1898:	28 2f       	mov	r18, r24
    189a:	33 27       	eor	r19, r19
    189c:	27 fd       	sbrc	r18, 7
    189e:	30 95       	com	r19
    18a0:	3f 93       	push	r19
    18a2:	8f 93       	push	r24
    18a4:	8c e2       	ldi	r24, 0x2C	; 44
    18a6:	91 e0       	ldi	r25, 0x01	; 1
    18a8:	9f 93       	push	r25
    18aa:	8f 93       	push	r24
    18ac:	ce 01       	movw	r24, r28
    18ae:	01 96       	adiw	r24, 0x01	; 1
    18b0:	9f 93       	push	r25
    18b2:	8f 93       	push	r24
    18b4:	0e 94 ea 30 	call	0x61d4	; 0x61d4 <sprintf>
			for(uint8_t i=((SSD1306_WIDTH/charsize)-buffersize);i<(SSD1306_WIDTH/charsize);i++){
    18b8:	25 e1       	ldi	r18, 0x15	; 21
    18ba:	f2 2e       	mov	r15, r18
    18bc:	f8 1a       	sub	r15, r24
    18be:	0f 90       	pop	r0
    18c0:	0f 90       	pop	r0
    18c2:	0f 90       	pop	r0
    18c4:	0f 90       	pop	r0
    18c6:	0f 90       	pop	r0
    18c8:	0f 90       	pop	r0
    18ca:	f4 e1       	ldi	r31, 0x14	; 20
    18cc:	ff 15       	cp	r31, r15
    18ce:	08 f4       	brcc	.+2      	; 0x18d2 <_Z6headerh+0x8c>
    18d0:	8e c0       	rjmp	.+284    	; 0x19ee <_Z6headerh+0x1a8>
    18d2:	ef 2c       	mov	r14, r15
    18d4:	ee 0c       	add	r14, r14
    18d6:	ef 0c       	add	r14, r15
    18d8:	ee 0c       	add	r14, r14
				oled.draw_ASCI(buffer[i-((SSD1306_WIDTH/charsize)-buffersize)],i*charsize,0);
    18da:	8c 01       	movw	r16, r24
    18dc:	11 27       	eor	r17, r17
    18de:	e1 e0       	ldi	r30, 0x01	; 1
    18e0:	f0 e0       	ldi	r31, 0x00	; 0
    18e2:	ec 0f       	add	r30, r28
    18e4:	fd 1f       	adc	r31, r29
    18e6:	ef 0d       	add	r30, r15
    18e8:	f1 1d       	adc	r31, r1
    18ea:	e0 0f       	add	r30, r16
    18ec:	f1 1f       	adc	r31, r17
    18ee:	75 97       	sbiw	r30, 0x15	; 21
    18f0:	20 e0       	ldi	r18, 0x00	; 0
    18f2:	4e 2d       	mov	r20, r14
    18f4:	60 81       	ld	r22, Z
    18f6:	86 e4       	ldi	r24, 0x46	; 70
    18f8:	93 e0       	ldi	r25, 0x03	; 3
    18fa:	4a db       	rcall	.-2412   	; 0xf90 <_ZN7Display9draw_ASCIEhhh>
		case 0:	//standard Header fuer fast alle Pages
			for(uint8_t i=0;i<8;i++){
				oled.draw_ASCI(rtc.msg_uhr[i],i*charsize,0);
			}
			buffersize=sprintf(buffer,"Bat: %i%%",Batteriestatus());
			for(uint8_t i=((SSD1306_WIDTH/charsize)-buffersize);i<(SSD1306_WIDTH/charsize);i++){
    18fc:	f3 94       	inc	r15
    18fe:	26 e0       	ldi	r18, 0x06	; 6
    1900:	e2 0e       	add	r14, r18
    1902:	85 e1       	ldi	r24, 0x15	; 21
    1904:	f8 12       	cpse	r15, r24
    1906:	eb cf       	rjmp	.-42     	; 0x18de <_Z6headerh+0x98>
    1908:	72 c0       	rjmp	.+228    	; 0x19ee <_Z6headerh+0x1a8>
				oled.draw_ASCI(buffer[i-((SSD1306_WIDTH/charsize)-buffersize)],i*charsize,0);
			}
			break;
		case 1:
			buffersize=sprintf(buffer,"Bat: %i%%",Batteriestatus());
    190a:	c9 de       	rcall	.-622    	; 0x169e <_Z14Batteriestatusv>
    190c:	28 2f       	mov	r18, r24
    190e:	33 27       	eor	r19, r19
    1910:	27 fd       	sbrc	r18, 7
    1912:	30 95       	com	r19
    1914:	3f 93       	push	r19
    1916:	8f 93       	push	r24
    1918:	8c e2       	ldi	r24, 0x2C	; 44
    191a:	91 e0       	ldi	r25, 0x01	; 1
    191c:	9f 93       	push	r25
    191e:	8f 93       	push	r24
    1920:	ce 01       	movw	r24, r28
    1922:	01 96       	adiw	r24, 0x01	; 1
    1924:	9f 93       	push	r25
    1926:	8f 93       	push	r24
    1928:	0e 94 ea 30 	call	0x61d4	; 0x61d4 <sprintf>
			for(uint8_t i=((SSD1306_WIDTH/charsize)-buffersize);i<(SSD1306_WIDTH/charsize);i++){
    192c:	25 e1       	ldi	r18, 0x15	; 21
    192e:	f2 2e       	mov	r15, r18
    1930:	f8 1a       	sub	r15, r24
    1932:	0f 90       	pop	r0
    1934:	0f 90       	pop	r0
    1936:	0f 90       	pop	r0
    1938:	0f 90       	pop	r0
    193a:	0f 90       	pop	r0
    193c:	0f 90       	pop	r0
    193e:	e4 e1       	ldi	r30, 0x14	; 20
    1940:	ef 15       	cp	r30, r15
    1942:	08 f4       	brcc	.+2      	; 0x1946 <_Z6headerh+0x100>
    1944:	54 c0       	rjmp	.+168    	; 0x19ee <_Z6headerh+0x1a8>
    1946:	ef 2c       	mov	r14, r15
    1948:	ee 0c       	add	r14, r14
    194a:	ef 0c       	add	r14, r15
    194c:	ee 0c       	add	r14, r14
				oled.draw_ASCI(buffer[i-((SSD1306_WIDTH/charsize)-buffersize)],i*charsize,0);
    194e:	8c 01       	movw	r16, r24
    1950:	11 27       	eor	r17, r17
    1952:	e1 e0       	ldi	r30, 0x01	; 1
    1954:	f0 e0       	ldi	r31, 0x00	; 0
    1956:	ec 0f       	add	r30, r28
    1958:	fd 1f       	adc	r31, r29
    195a:	ef 0d       	add	r30, r15
    195c:	f1 1d       	adc	r31, r1
    195e:	e0 0f       	add	r30, r16
    1960:	f1 1f       	adc	r31, r17
    1962:	75 97       	sbiw	r30, 0x15	; 21
    1964:	20 e0       	ldi	r18, 0x00	; 0
    1966:	4e 2d       	mov	r20, r14
    1968:	60 81       	ld	r22, Z
    196a:	86 e4       	ldi	r24, 0x46	; 70
    196c:	93 e0       	ldi	r25, 0x03	; 3
    196e:	10 db       	rcall	.-2528   	; 0xf90 <_ZN7Display9draw_ASCIEhhh>
				oled.draw_ASCI(buffer[i-((SSD1306_WIDTH/charsize)-buffersize)],i*charsize,0);
			}
			break;
		case 1:
			buffersize=sprintf(buffer,"Bat: %i%%",Batteriestatus());
			for(uint8_t i=((SSD1306_WIDTH/charsize)-buffersize);i<(SSD1306_WIDTH/charsize);i++){
    1970:	f3 94       	inc	r15
    1972:	f6 e0       	ldi	r31, 0x06	; 6
    1974:	ef 0e       	add	r14, r31
    1976:	25 e1       	ldi	r18, 0x15	; 21
    1978:	f2 12       	cpse	r15, r18
    197a:	eb cf       	rjmp	.-42     	; 0x1952 <_Z6headerh+0x10c>
    197c:	38 c0       	rjmp	.+112    	; 0x19ee <_Z6headerh+0x1a8>
				oled.draw_ASCI(buffer[i-((SSD1306_WIDTH/charsize)-buffersize)],i*charsize,0);
			}
			break;
		case 2:
			buffersize=sprintf(buffer,"%i%%",Batteriestatus());
    197e:	8f de       	rcall	.-738    	; 0x169e <_Z14Batteriestatusv>
    1980:	28 2f       	mov	r18, r24
    1982:	33 27       	eor	r19, r19
    1984:	27 fd       	sbrc	r18, 7
    1986:	30 95       	com	r19
    1988:	3f 93       	push	r19
    198a:	8f 93       	push	r24
    198c:	81 e3       	ldi	r24, 0x31	; 49
    198e:	91 e0       	ldi	r25, 0x01	; 1
    1990:	9f 93       	push	r25
    1992:	8f 93       	push	r24
    1994:	ce 01       	movw	r24, r28
    1996:	01 96       	adiw	r24, 0x01	; 1
    1998:	9f 93       	push	r25
    199a:	8f 93       	push	r24
    199c:	0e 94 ea 30 	call	0x61d4	; 0x61d4 <sprintf>
			for(uint8_t i=((SSD1306_WIDTH/charsize)-buffersize);i<(SSD1306_WIDTH/charsize);i++){
    19a0:	25 e1       	ldi	r18, 0x15	; 21
    19a2:	f2 2e       	mov	r15, r18
    19a4:	f8 1a       	sub	r15, r24
    19a6:	0f 90       	pop	r0
    19a8:	0f 90       	pop	r0
    19aa:	0f 90       	pop	r0
    19ac:	0f 90       	pop	r0
    19ae:	0f 90       	pop	r0
    19b0:	0f 90       	pop	r0
    19b2:	e4 e1       	ldi	r30, 0x14	; 20
    19b4:	ef 15       	cp	r30, r15
    19b6:	d8 f0       	brcs	.+54     	; 0x19ee <_Z6headerh+0x1a8>
    19b8:	ef 2c       	mov	r14, r15
    19ba:	ee 0c       	add	r14, r14
    19bc:	ef 0c       	add	r14, r15
    19be:	ee 0c       	add	r14, r14
				oled.draw_ASCI(buffer[i-((SSD1306_WIDTH/charsize)-buffersize)],i*charsize,0);
    19c0:	8c 01       	movw	r16, r24
    19c2:	11 27       	eor	r17, r17
    19c4:	e1 e0       	ldi	r30, 0x01	; 1
    19c6:	f0 e0       	ldi	r31, 0x00	; 0
    19c8:	ec 0f       	add	r30, r28
    19ca:	fd 1f       	adc	r31, r29
    19cc:	ef 0d       	add	r30, r15
    19ce:	f1 1d       	adc	r31, r1
    19d0:	e0 0f       	add	r30, r16
    19d2:	f1 1f       	adc	r31, r17
    19d4:	75 97       	sbiw	r30, 0x15	; 21
    19d6:	20 e0       	ldi	r18, 0x00	; 0
    19d8:	4e 2d       	mov	r20, r14
    19da:	60 81       	ld	r22, Z
    19dc:	86 e4       	ldi	r24, 0x46	; 70
    19de:	93 e0       	ldi	r25, 0x03	; 3
    19e0:	d7 da       	rcall	.-2642   	; 0xf90 <_ZN7Display9draw_ASCIEhhh>
				oled.draw_ASCI(buffer[i-((SSD1306_WIDTH/charsize)-buffersize)],i*charsize,0);
			}
			break;
		case 2:
			buffersize=sprintf(buffer,"%i%%",Batteriestatus());
			for(uint8_t i=((SSD1306_WIDTH/charsize)-buffersize);i<(SSD1306_WIDTH/charsize);i++){
    19e2:	f3 94       	inc	r15
    19e4:	f6 e0       	ldi	r31, 0x06	; 6
    19e6:	ef 0e       	add	r14, r31
    19e8:	25 e1       	ldi	r18, 0x15	; 21
    19ea:	f2 12       	cpse	r15, r18
    19ec:	eb cf       	rjmp	.-42     	; 0x19c4 <_Z6headerh+0x17e>
			}
			break;
		default:
			break;
	}
}
    19ee:	64 96       	adiw	r28, 0x14	; 20
    19f0:	0f b6       	in	r0, 0x3f	; 63
    19f2:	f8 94       	cli
    19f4:	de bf       	out	0x3e, r29	; 62
    19f6:	0f be       	out	0x3f, r0	; 63
    19f8:	cd bf       	out	0x3d, r28	; 61
    19fa:	df 91       	pop	r29
    19fc:	cf 91       	pop	r28
    19fe:	1f 91       	pop	r17
    1a00:	0f 91       	pop	r16
    1a02:	ff 90       	pop	r15
    1a04:	ef 90       	pop	r14
    1a06:	08 95       	ret

00001a08 <_Z6bottomh>:

void bottom(uint8_t page){
    1a08:	1f 93       	push	r17
    1a0a:	cf 93       	push	r28
    1a0c:	df 93       	push	r29
	switch (page) {
    1a0e:	88 23       	and	r24, r24
    1a10:	19 f0       	breq	.+6      	; 0x1a18 <_Z6bottomh+0x10>
    1a12:	81 30       	cpi	r24, 0x01	; 1
    1a14:	71 f0       	breq	.+28     	; 0x1a32 <_Z6bottomh+0x2a>
    1a16:	19 c0       	rjmp	.+50     	; 0x1a4a <_Z6bottomh+0x42>
    1a18:	c5 e8       	ldi	r28, 0x85	; 133
    1a1a:	d7 e0       	ldi	r29, 0x07	; 7
    1a1c:	10 e5       	ldi	r17, 0x50	; 80
		case 0:	//standard Header fuer fast alle Pages
			for(uint8_t i=0;i<8;i++){
				oled.draw_ASCI(rtc.msg_dat[i],i*charsize+(SSD1306_WIDTH-bitsderrtc*charsize),7*charhighte);
    1a1e:	69 91       	ld	r22, Y+
    1a20:	28 e3       	ldi	r18, 0x38	; 56
    1a22:	41 2f       	mov	r20, r17
    1a24:	86 e4       	ldi	r24, 0x46	; 70
    1a26:	93 e0       	ldi	r25, 0x03	; 3
    1a28:	b3 da       	rcall	.-2714   	; 0xf90 <_ZN7Display9draw_ASCIEhhh>
    1a2a:	1a 5f       	subi	r17, 0xFA	; 250
}

void bottom(uint8_t page){
	switch (page) {
		case 0:	//standard Header fuer fast alle Pages
			for(uint8_t i=0;i<8;i++){
    1a2c:	10 38       	cpi	r17, 0x80	; 128
    1a2e:	b9 f7       	brne	.-18     	; 0x1a1e <_Z6bottomh+0x16>
    1a30:	0c c0       	rjmp	.+24     	; 0x1a4a <_Z6bottomh+0x42>
    1a32:	c5 e8       	ldi	r28, 0x85	; 133
    1a34:	d7 e0       	ldi	r29, 0x07	; 7
			break;
	}
}

void bottom(uint8_t page){
	switch (page) {
    1a36:	15 e0       	ldi	r17, 0x05	; 5
				oled.draw_ASCI(rtc.msg_dat[i],i*charsize+(SSD1306_WIDTH-bitsderrtc*charsize),7*charhighte);
			}
			break;
		case 1:
			for(uint8_t i=0;i<8;i++){
				oled.draw_ASCI(rtc.msg_dat[i],5+i*charsize,7*charhighte);
    1a38:	69 91       	ld	r22, Y+
    1a3a:	28 e3       	ldi	r18, 0x38	; 56
    1a3c:	41 2f       	mov	r20, r17
    1a3e:	86 e4       	ldi	r24, 0x46	; 70
    1a40:	93 e0       	ldi	r25, 0x03	; 3
    1a42:	a6 da       	rcall	.-2740   	; 0xf90 <_ZN7Display9draw_ASCIEhhh>
    1a44:	1a 5f       	subi	r17, 0xFA	; 250
			for(uint8_t i=0;i<8;i++){
				oled.draw_ASCI(rtc.msg_dat[i],i*charsize+(SSD1306_WIDTH-bitsderrtc*charsize),7*charhighte);
			}
			break;
		case 1:
			for(uint8_t i=0;i<8;i++){
    1a46:	15 33       	cpi	r17, 0x35	; 53
    1a48:	b9 f7       	brne	.-18     	; 0x1a38 <_Z6bottomh+0x30>
			}
			break;
		default:
			break;
		}
}
    1a4a:	df 91       	pop	r29
    1a4c:	cf 91       	pop	r28
    1a4e:	1f 91       	pop	r17
    1a50:	08 95       	ret

00001a52 <_Z16anzeige_richtungf>:

void anzeige_richtung(float winkel){
    1a52:	cf 92       	push	r12
    1a54:	df 92       	push	r13
    1a56:	ef 92       	push	r14
    1a58:	ff 92       	push	r15
    1a5a:	6b 01       	movw	r12, r22
    1a5c:	7c 01       	movw	r14, r24
	//finden der Ziffer fuer die Anzeige
	if ((winkel<45/2) || (winkel >= 360-45/2))
    1a5e:	20 e0       	ldi	r18, 0x00	; 0
    1a60:	30 e0       	ldi	r19, 0x00	; 0
    1a62:	40 eb       	ldi	r20, 0xB0	; 176
    1a64:	51 e4       	ldi	r21, 0x41	; 65
    1a66:	0e 94 8e 29 	call	0x531c	; 0x531c <__cmpsf2>
    1a6a:	88 23       	and	r24, r24
    1a6c:	54 f0       	brlt	.+20     	; 0x1a82 <_Z16anzeige_richtungf+0x30>
    1a6e:	20 e0       	ldi	r18, 0x00	; 0
    1a70:	30 e0       	ldi	r19, 0x00	; 0
    1a72:	49 ea       	ldi	r20, 0xA9	; 169
    1a74:	53 e4       	ldi	r21, 0x43	; 67
    1a76:	c7 01       	movw	r24, r14
    1a78:	b6 01       	movw	r22, r12
    1a7a:	0e 94 3e 2b 	call	0x567c	; 0x567c <__gesf2>
    1a7e:	88 23       	and	r24, r24
    1a80:	3c f0       	brlt	.+14     	; 0x1a90 <_Z16anzeige_richtungf+0x3e>
	{
		oled.draw_ASCI('N',80,3.5*charhighte);
    1a82:	2c e1       	ldi	r18, 0x1C	; 28
    1a84:	40 e5       	ldi	r20, 0x50	; 80
    1a86:	6e e4       	ldi	r22, 0x4E	; 78
    1a88:	86 e4       	ldi	r24, 0x46	; 70
    1a8a:	93 e0       	ldi	r25, 0x03	; 3
    1a8c:	81 da       	rcall	.-2814   	; 0xf90 <_ZN7Display9draw_ASCIEhhh>
    1a8e:	8e c0       	rjmp	.+284    	; 0x1bac <_Z16anzeige_richtungf+0x15a>
	}
	else if (winkel<90-45/2)
    1a90:	20 e0       	ldi	r18, 0x00	; 0
    1a92:	30 e0       	ldi	r19, 0x00	; 0
    1a94:	48 e8       	ldi	r20, 0x88	; 136
    1a96:	52 e4       	ldi	r21, 0x42	; 66
    1a98:	c7 01       	movw	r24, r14
    1a9a:	b6 01       	movw	r22, r12
    1a9c:	0e 94 8e 29 	call	0x531c	; 0x531c <__cmpsf2>
    1aa0:	88 23       	and	r24, r24
    1aa2:	6c f4       	brge	.+26     	; 0x1abe <_Z16anzeige_richtungf+0x6c>
	{
		oled.draw_ASCI('N',80-charsize/2,3.5*charhighte);
    1aa4:	2c e1       	ldi	r18, 0x1C	; 28
    1aa6:	4d e4       	ldi	r20, 0x4D	; 77
    1aa8:	6e e4       	ldi	r22, 0x4E	; 78
    1aaa:	86 e4       	ldi	r24, 0x46	; 70
    1aac:	93 e0       	ldi	r25, 0x03	; 3
    1aae:	70 da       	rcall	.-2848   	; 0xf90 <_ZN7Display9draw_ASCIEhhh>
		oled.draw_ASCI('O',80+charsize/2,3.5*charhighte);
    1ab0:	2c e1       	ldi	r18, 0x1C	; 28
    1ab2:	43 e5       	ldi	r20, 0x53	; 83
    1ab4:	6f e4       	ldi	r22, 0x4F	; 79
    1ab6:	86 e4       	ldi	r24, 0x46	; 70
    1ab8:	93 e0       	ldi	r25, 0x03	; 3
    1aba:	6a da       	rcall	.-2860   	; 0xf90 <_ZN7Display9draw_ASCIEhhh>
    1abc:	77 c0       	rjmp	.+238    	; 0x1bac <_Z16anzeige_richtungf+0x15a>
	}
	else if (winkel<135-45/2)
    1abe:	20 e0       	ldi	r18, 0x00	; 0
    1ac0:	30 e0       	ldi	r19, 0x00	; 0
    1ac2:	42 ee       	ldi	r20, 0xE2	; 226
    1ac4:	52 e4       	ldi	r21, 0x42	; 66
    1ac6:	c7 01       	movw	r24, r14
    1ac8:	b6 01       	movw	r22, r12
    1aca:	0e 94 8e 29 	call	0x531c	; 0x531c <__cmpsf2>
    1ace:	88 23       	and	r24, r24
    1ad0:	3c f4       	brge	.+14     	; 0x1ae0 <_Z16anzeige_richtungf+0x8e>
	{
		oled.draw_ASCI('O',80,3.5*charhighte);
    1ad2:	2c e1       	ldi	r18, 0x1C	; 28
    1ad4:	40 e5       	ldi	r20, 0x50	; 80
    1ad6:	6f e4       	ldi	r22, 0x4F	; 79
    1ad8:	86 e4       	ldi	r24, 0x46	; 70
    1ada:	93 e0       	ldi	r25, 0x03	; 3
    1adc:	59 da       	rcall	.-2894   	; 0xf90 <_ZN7Display9draw_ASCIEhhh>
    1ade:	66 c0       	rjmp	.+204    	; 0x1bac <_Z16anzeige_richtungf+0x15a>
	}
	else if (winkel<180-45/2)
    1ae0:	20 e0       	ldi	r18, 0x00	; 0
    1ae2:	30 e0       	ldi	r19, 0x00	; 0
    1ae4:	4e e1       	ldi	r20, 0x1E	; 30
    1ae6:	53 e4       	ldi	r21, 0x43	; 67
    1ae8:	c7 01       	movw	r24, r14
    1aea:	b6 01       	movw	r22, r12
    1aec:	0e 94 8e 29 	call	0x531c	; 0x531c <__cmpsf2>
    1af0:	88 23       	and	r24, r24
    1af2:	6c f4       	brge	.+26     	; 0x1b0e <_Z16anzeige_richtungf+0xbc>
	{
		oled.draw_ASCI('S',80-charsize/2,3.5*charhighte);
    1af4:	2c e1       	ldi	r18, 0x1C	; 28
    1af6:	4d e4       	ldi	r20, 0x4D	; 77
    1af8:	63 e5       	ldi	r22, 0x53	; 83
    1afa:	86 e4       	ldi	r24, 0x46	; 70
    1afc:	93 e0       	ldi	r25, 0x03	; 3
    1afe:	48 da       	rcall	.-2928   	; 0xf90 <_ZN7Display9draw_ASCIEhhh>
		oled.draw_ASCI('O',80+charsize/2,3.5*charhighte);
    1b00:	2c e1       	ldi	r18, 0x1C	; 28
    1b02:	43 e5       	ldi	r20, 0x53	; 83
    1b04:	6f e4       	ldi	r22, 0x4F	; 79
    1b06:	86 e4       	ldi	r24, 0x46	; 70
    1b08:	93 e0       	ldi	r25, 0x03	; 3
    1b0a:	42 da       	rcall	.-2940   	; 0xf90 <_ZN7Display9draw_ASCIEhhh>
    1b0c:	4f c0       	rjmp	.+158    	; 0x1bac <_Z16anzeige_richtungf+0x15a>
	}
	else if (winkel<225-45/2)
    1b0e:	20 e0       	ldi	r18, 0x00	; 0
    1b10:	30 e0       	ldi	r19, 0x00	; 0
    1b12:	4b e4       	ldi	r20, 0x4B	; 75
    1b14:	53 e4       	ldi	r21, 0x43	; 67
    1b16:	c7 01       	movw	r24, r14
    1b18:	b6 01       	movw	r22, r12
    1b1a:	0e 94 8e 29 	call	0x531c	; 0x531c <__cmpsf2>
    1b1e:	88 23       	and	r24, r24
    1b20:	3c f4       	brge	.+14     	; 0x1b30 <_Z16anzeige_richtungf+0xde>
	{
		oled.draw_ASCI('S',80,3.5*charhighte);
    1b22:	2c e1       	ldi	r18, 0x1C	; 28
    1b24:	40 e5       	ldi	r20, 0x50	; 80
    1b26:	63 e5       	ldi	r22, 0x53	; 83
    1b28:	86 e4       	ldi	r24, 0x46	; 70
    1b2a:	93 e0       	ldi	r25, 0x03	; 3
    1b2c:	31 da       	rcall	.-2974   	; 0xf90 <_ZN7Display9draw_ASCIEhhh>
    1b2e:	3e c0       	rjmp	.+124    	; 0x1bac <_Z16anzeige_richtungf+0x15a>
	}
	else if (winkel<270-45/2)
    1b30:	20 e0       	ldi	r18, 0x00	; 0
    1b32:	30 e0       	ldi	r19, 0x00	; 0
    1b34:	48 e7       	ldi	r20, 0x78	; 120
    1b36:	53 e4       	ldi	r21, 0x43	; 67
    1b38:	c7 01       	movw	r24, r14
    1b3a:	b6 01       	movw	r22, r12
    1b3c:	0e 94 8e 29 	call	0x531c	; 0x531c <__cmpsf2>
    1b40:	88 23       	and	r24, r24
    1b42:	6c f4       	brge	.+26     	; 0x1b5e <_Z16anzeige_richtungf+0x10c>
	{
		oled.draw_ASCI('S',80-charsize/2,3.5*charhighte);
    1b44:	2c e1       	ldi	r18, 0x1C	; 28
    1b46:	4d e4       	ldi	r20, 0x4D	; 77
    1b48:	63 e5       	ldi	r22, 0x53	; 83
    1b4a:	86 e4       	ldi	r24, 0x46	; 70
    1b4c:	93 e0       	ldi	r25, 0x03	; 3
    1b4e:	20 da       	rcall	.-3008   	; 0xf90 <_ZN7Display9draw_ASCIEhhh>
		oled.draw_ASCI('W',80+charsize/2,3.5*charhighte);
    1b50:	2c e1       	ldi	r18, 0x1C	; 28
    1b52:	43 e5       	ldi	r20, 0x53	; 83
    1b54:	67 e5       	ldi	r22, 0x57	; 87
    1b56:	86 e4       	ldi	r24, 0x46	; 70
    1b58:	93 e0       	ldi	r25, 0x03	; 3
    1b5a:	1a da       	rcall	.-3020   	; 0xf90 <_ZN7Display9draw_ASCIEhhh>
    1b5c:	27 c0       	rjmp	.+78     	; 0x1bac <_Z16anzeige_richtungf+0x15a>
	}
	else if (winkel<315-45/2)
    1b5e:	20 e0       	ldi	r18, 0x00	; 0
    1b60:	30 e8       	ldi	r19, 0x80	; 128
    1b62:	42 e9       	ldi	r20, 0x92	; 146
    1b64:	53 e4       	ldi	r21, 0x43	; 67
    1b66:	c7 01       	movw	r24, r14
    1b68:	b6 01       	movw	r22, r12
    1b6a:	0e 94 8e 29 	call	0x531c	; 0x531c <__cmpsf2>
    1b6e:	88 23       	and	r24, r24
    1b70:	3c f4       	brge	.+14     	; 0x1b80 <_Z16anzeige_richtungf+0x12e>
	{
		oled.draw_ASCI('W',80,3.5*charhighte);
    1b72:	2c e1       	ldi	r18, 0x1C	; 28
    1b74:	40 e5       	ldi	r20, 0x50	; 80
    1b76:	67 e5       	ldi	r22, 0x57	; 87
    1b78:	86 e4       	ldi	r24, 0x46	; 70
    1b7a:	93 e0       	ldi	r25, 0x03	; 3
    1b7c:	09 da       	rcall	.-3054   	; 0xf90 <_ZN7Display9draw_ASCIEhhh>
    1b7e:	16 c0       	rjmp	.+44     	; 0x1bac <_Z16anzeige_richtungf+0x15a>
	}
	else if (winkel<360-45/2)
    1b80:	20 e0       	ldi	r18, 0x00	; 0
    1b82:	30 e0       	ldi	r19, 0x00	; 0
    1b84:	49 ea       	ldi	r20, 0xA9	; 169
    1b86:	53 e4       	ldi	r21, 0x43	; 67
    1b88:	c7 01       	movw	r24, r14
    1b8a:	b6 01       	movw	r22, r12
    1b8c:	0e 94 8e 29 	call	0x531c	; 0x531c <__cmpsf2>
    1b90:	88 23       	and	r24, r24
    1b92:	64 f4       	brge	.+24     	; 0x1bac <_Z16anzeige_richtungf+0x15a>
	{
		oled.draw_ASCI('N',80-charsize/2,3.5*charhighte);
    1b94:	2c e1       	ldi	r18, 0x1C	; 28
    1b96:	4d e4       	ldi	r20, 0x4D	; 77
    1b98:	6e e4       	ldi	r22, 0x4E	; 78
    1b9a:	86 e4       	ldi	r24, 0x46	; 70
    1b9c:	93 e0       	ldi	r25, 0x03	; 3
    1b9e:	f8 d9       	rcall	.-3088   	; 0xf90 <_ZN7Display9draw_ASCIEhhh>
		oled.draw_ASCI('W',80+charsize/2,3.5*charhighte);
    1ba0:	2c e1       	ldi	r18, 0x1C	; 28
    1ba2:	43 e5       	ldi	r20, 0x53	; 83
    1ba4:	67 e5       	ldi	r22, 0x57	; 87
    1ba6:	86 e4       	ldi	r24, 0x46	; 70
    1ba8:	93 e0       	ldi	r25, 0x03	; 3
    1baa:	f2 d9       	rcall	.-3100   	; 0xf90 <_ZN7Display9draw_ASCIEhhh>
	}
}
    1bac:	ff 90       	pop	r15
    1bae:	ef 90       	pop	r14
    1bb0:	df 90       	pop	r13
    1bb2:	cf 90       	pop	r12
    1bb4:	08 95       	ret

00001bb6 <_Z13anzeige_nadelhhf>:

void anzeige_nadel(uint8_t x, uint8_t y, float angle){
    1bb6:	af 92       	push	r10
    1bb8:	bf 92       	push	r11
    1bba:	cf 92       	push	r12
    1bbc:	df 92       	push	r13
    1bbe:	ef 92       	push	r14
    1bc0:	ff 92       	push	r15
    1bc2:	0f 93       	push	r16
    1bc4:	1f 93       	push	r17
	//fixed parameters for drawing the arrow
	oled.draw_triangle(x,y,20,70,angle);
    1bc6:	59 01       	movw	r10, r18
    1bc8:	6a 01       	movw	r12, r20
    1bca:	e1 2c       	mov	r14, r1
    1bcc:	f1 2c       	mov	r15, r1
    1bce:	0c e8       	ldi	r16, 0x8C	; 140
    1bd0:	12 e4       	ldi	r17, 0x42	; 66
    1bd2:	24 e1       	ldi	r18, 0x14	; 20
    1bd4:	46 2f       	mov	r20, r22
    1bd6:	68 2f       	mov	r22, r24
    1bd8:	86 e4       	ldi	r24, 0x46	; 70
    1bda:	93 e0       	ldi	r25, 0x03	; 3
    1bdc:	b9 d8       	rcall	.-3726   	; 0xd50 <_ZN7Display13draw_triangleEhhhff>
}
    1bde:	1f 91       	pop	r17
    1be0:	0f 91       	pop	r16
    1be2:	ff 90       	pop	r15
    1be4:	ef 90       	pop	r14
    1be6:	df 90       	pop	r13
    1be8:	cf 90       	pop	r12
    1bea:	bf 90       	pop	r11
    1bec:	af 90       	pop	r10
    1bee:	08 95       	ret

00001bf0 <_Z19anzeige_kleinenadelhhf>:
void anzeige_kleinenadel(uint8_t x, uint8_t y, float angle){
    1bf0:	af 92       	push	r10
    1bf2:	bf 92       	push	r11
    1bf4:	cf 92       	push	r12
    1bf6:	df 92       	push	r13
    1bf8:	ef 92       	push	r14
    1bfa:	ff 92       	push	r15
    1bfc:	0f 93       	push	r16
    1bfe:	1f 93       	push	r17
	//fixed parameters for drawing the arrow
	oled.draw_triangle(x,y,10,70,angle);
    1c00:	59 01       	movw	r10, r18
    1c02:	6a 01       	movw	r12, r20
    1c04:	e1 2c       	mov	r14, r1
    1c06:	f1 2c       	mov	r15, r1
    1c08:	0c e8       	ldi	r16, 0x8C	; 140
    1c0a:	12 e4       	ldi	r17, 0x42	; 66
    1c0c:	2a e0       	ldi	r18, 0x0A	; 10
    1c0e:	46 2f       	mov	r20, r22
    1c10:	68 2f       	mov	r22, r24
    1c12:	86 e4       	ldi	r24, 0x46	; 70
    1c14:	93 e0       	ldi	r25, 0x03	; 3
    1c16:	9c d8       	rcall	.-3784   	; 0xd50 <_ZN7Display13draw_triangleEhhhff>
}
    1c18:	1f 91       	pop	r17
    1c1a:	0f 91       	pop	r16
    1c1c:	ff 90       	pop	r15
    1c1e:	ef 90       	pop	r14
    1c20:	df 90       	pop	r13
    1c22:	cf 90       	pop	r12
    1c24:	bf 90       	pop	r11
    1c26:	af 90       	pop	r10
    1c28:	08 95       	ret

00001c2a <_Z11menue_hauptv>:

void menue_haupt(){
    1c2a:	cf 92       	push	r12
    1c2c:	df 92       	push	r13
    1c2e:	ef 92       	push	r14
    1c30:	ff 92       	push	r15
    1c32:	0f 93       	push	r16
    1c34:	1f 93       	push	r17
    1c36:	cf 93       	push	r28
    1c38:	df 93       	push	r29
    1c3a:	cd b7       	in	r28, 0x3d	; 61
    1c3c:	de b7       	in	r29, 0x3e	; 62
    1c3e:	64 97       	sbiw	r28, 0x14	; 20
    1c40:	0f b6       	in	r0, 0x3f	; 63
    1c42:	f8 94       	cli
    1c44:	de bf       	out	0x3e, r29	; 62
    1c46:	0f be       	out	0x3f, r0	; 63
    1c48:	cd bf       	out	0x3d, r28	; 61
	char buffer[20];
	uint8_t buffersize=0;

	oled.clearFrame();
    1c4a:	86 e4       	ldi	r24, 0x46	; 70
    1c4c:	93 e0       	ldi	r25, 0x03	; 3
    1c4e:	0e 94 05 05 	call	0xa0a	; 0xa0a <_ZN7Display10clearFrameEv>
	buffersize=sprintf(buffer,"1:Fahradanzeige");
    1c52:	80 e1       	ldi	r24, 0x10	; 16
    1c54:	e6 e3       	ldi	r30, 0x36	; 54
    1c56:	f1 e0       	ldi	r31, 0x01	; 1
    1c58:	8e 01       	movw	r16, r28
    1c5a:	0f 5f       	subi	r16, 0xFF	; 255
    1c5c:	1f 4f       	sbci	r17, 0xFF	; 255
    1c5e:	d8 01       	movw	r26, r16
    1c60:	01 90       	ld	r0, Z+
    1c62:	0d 92       	st	X+, r0
    1c64:	8a 95       	dec	r24
    1c66:	e1 f7       	brne	.-8      	; 0x1c60 <_Z11menue_hauptv+0x36>
    1c68:	e0 2e       	mov	r14, r16
    1c6a:	f1 2e       	mov	r15, r17
    1c6c:	68 01       	movw	r12, r16
    1c6e:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,0*charhighte);}
    1c70:	f6 01       	movw	r30, r12
    1c72:	61 91       	ld	r22, Z+
    1c74:	6f 01       	movw	r12, r30
    1c76:	20 e0       	ldi	r18, 0x00	; 0
    1c78:	41 2f       	mov	r20, r17
    1c7a:	86 e4       	ldi	r24, 0x46	; 70
    1c7c:	93 e0       	ldi	r25, 0x03	; 3
    1c7e:	88 d9       	rcall	.-3312   	; 0xf90 <_ZN7Display9draw_ASCIEhhh>
    1c80:	1a 5f       	subi	r17, 0xFA	; 250
    1c82:	1a 35       	cpi	r17, 0x5A	; 90
    1c84:	a9 f7       	brne	.-22     	; 0x1c70 <_Z11menue_hauptv+0x46>
	buffersize=sprintf(buffer,"2:Taschenrechner");
    1c86:	81 e1       	ldi	r24, 0x11	; 17
    1c88:	e6 e4       	ldi	r30, 0x46	; 70
    1c8a:	f1 e0       	ldi	r31, 0x01	; 1
    1c8c:	de 01       	movw	r26, r28
    1c8e:	11 96       	adiw	r26, 0x01	; 1
    1c90:	01 90       	ld	r0, Z+
    1c92:	0d 92       	st	X+, r0
    1c94:	8a 95       	dec	r24
    1c96:	e1 f7       	brne	.-8      	; 0x1c90 <_Z11menue_hauptv+0x66>
    1c98:	ce 2c       	mov	r12, r14
    1c9a:	df 2c       	mov	r13, r15
    1c9c:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,1*charhighte);}
    1c9e:	f6 01       	movw	r30, r12
    1ca0:	61 91       	ld	r22, Z+
    1ca2:	6f 01       	movw	r12, r30
    1ca4:	28 e0       	ldi	r18, 0x08	; 8
    1ca6:	41 2f       	mov	r20, r17
    1ca8:	86 e4       	ldi	r24, 0x46	; 70
    1caa:	93 e0       	ldi	r25, 0x03	; 3
    1cac:	71 d9       	rcall	.-3358   	; 0xf90 <_ZN7Display9draw_ASCIEhhh>
    1cae:	1a 5f       	subi	r17, 0xFA	; 250
    1cb0:	10 36       	cpi	r17, 0x60	; 96
    1cb2:	a9 f7       	brne	.-22     	; 0x1c9e <_Z11menue_hauptv+0x74>
	buffersize=sprintf(buffer,"3:Kompass");
    1cb4:	8a e0       	ldi	r24, 0x0A	; 10
    1cb6:	e7 e5       	ldi	r30, 0x57	; 87
    1cb8:	f1 e0       	ldi	r31, 0x01	; 1
    1cba:	de 01       	movw	r26, r28
    1cbc:	11 96       	adiw	r26, 0x01	; 1
    1cbe:	01 90       	ld	r0, Z+
    1cc0:	0d 92       	st	X+, r0
    1cc2:	8a 95       	dec	r24
    1cc4:	e1 f7       	brne	.-8      	; 0x1cbe <_Z11menue_hauptv+0x94>
    1cc6:	ce 2c       	mov	r12, r14
    1cc8:	df 2c       	mov	r13, r15
    1cca:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,2*charhighte);}
    1ccc:	f6 01       	movw	r30, r12
    1cce:	61 91       	ld	r22, Z+
    1cd0:	6f 01       	movw	r12, r30
    1cd2:	20 e1       	ldi	r18, 0x10	; 16
    1cd4:	41 2f       	mov	r20, r17
    1cd6:	86 e4       	ldi	r24, 0x46	; 70
    1cd8:	93 e0       	ldi	r25, 0x03	; 3
    1cda:	5a d9       	rcall	.-3404   	; 0xf90 <_ZN7Display9draw_ASCIEhhh>
    1cdc:	1a 5f       	subi	r17, 0xFA	; 250
    1cde:	16 33       	cpi	r17, 0x36	; 54
    1ce0:	a9 f7       	brne	.-22     	; 0x1ccc <_Z11menue_hauptv+0xa2>
	buffersize=sprintf(buffer,"4:Uhrmenue");
    1ce2:	8b e0       	ldi	r24, 0x0B	; 11
    1ce4:	e1 e6       	ldi	r30, 0x61	; 97
    1ce6:	f1 e0       	ldi	r31, 0x01	; 1
    1ce8:	de 01       	movw	r26, r28
    1cea:	11 96       	adiw	r26, 0x01	; 1
    1cec:	01 90       	ld	r0, Z+
    1cee:	0d 92       	st	X+, r0
    1cf0:	8a 95       	dec	r24
    1cf2:	e1 f7       	brne	.-8      	; 0x1cec <_Z11menue_hauptv+0xc2>
    1cf4:	ce 2c       	mov	r12, r14
    1cf6:	df 2c       	mov	r13, r15
    1cf8:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,3*charhighte);}
    1cfa:	f6 01       	movw	r30, r12
    1cfc:	61 91       	ld	r22, Z+
    1cfe:	6f 01       	movw	r12, r30
    1d00:	28 e1       	ldi	r18, 0x18	; 24
    1d02:	41 2f       	mov	r20, r17
    1d04:	86 e4       	ldi	r24, 0x46	; 70
    1d06:	93 e0       	ldi	r25, 0x03	; 3
    1d08:	43 d9       	rcall	.-3450   	; 0xf90 <_ZN7Display9draw_ASCIEhhh>
    1d0a:	1a 5f       	subi	r17, 0xFA	; 250
    1d0c:	1c 33       	cpi	r17, 0x3C	; 60
    1d0e:	a9 f7       	brne	.-22     	; 0x1cfa <_Z11menue_hauptv+0xd0>
	buffersize=sprintf(buffer,"5:Einstellungen");
    1d10:	80 e1       	ldi	r24, 0x10	; 16
    1d12:	ec e6       	ldi	r30, 0x6C	; 108
    1d14:	f1 e0       	ldi	r31, 0x01	; 1
    1d16:	de 01       	movw	r26, r28
    1d18:	11 96       	adiw	r26, 0x01	; 1
    1d1a:	01 90       	ld	r0, Z+
    1d1c:	0d 92       	st	X+, r0
    1d1e:	8a 95       	dec	r24
    1d20:	e1 f7       	brne	.-8      	; 0x1d1a <_Z11menue_hauptv+0xf0>
    1d22:	ce 2c       	mov	r12, r14
    1d24:	df 2c       	mov	r13, r15
    1d26:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,4*charhighte);}
    1d28:	f6 01       	movw	r30, r12
    1d2a:	61 91       	ld	r22, Z+
    1d2c:	6f 01       	movw	r12, r30
    1d2e:	20 e2       	ldi	r18, 0x20	; 32
    1d30:	41 2f       	mov	r20, r17
    1d32:	86 e4       	ldi	r24, 0x46	; 70
    1d34:	93 e0       	ldi	r25, 0x03	; 3
    1d36:	2c d9       	rcall	.-3496   	; 0xf90 <_ZN7Display9draw_ASCIEhhh>
    1d38:	1a 5f       	subi	r17, 0xFA	; 250
    1d3a:	1a 35       	cpi	r17, 0x5A	; 90
    1d3c:	a9 f7       	brne	.-22     	; 0x1d28 <_Z11menue_hauptv+0xfe>
	buffersize=sprintf(buffer,"6:Display aus");
    1d3e:	8e e0       	ldi	r24, 0x0E	; 14
    1d40:	ec e7       	ldi	r30, 0x7C	; 124
    1d42:	f1 e0       	ldi	r31, 0x01	; 1
    1d44:	de 01       	movw	r26, r28
    1d46:	11 96       	adiw	r26, 0x01	; 1
    1d48:	01 90       	ld	r0, Z+
    1d4a:	0d 92       	st	X+, r0
    1d4c:	8a 95       	dec	r24
    1d4e:	e1 f7       	brne	.-8      	; 0x1d48 <_Z11menue_hauptv+0x11e>
    1d50:	ce 2c       	mov	r12, r14
    1d52:	df 2c       	mov	r13, r15
    1d54:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,5*charhighte);}
    1d56:	f6 01       	movw	r30, r12
    1d58:	61 91       	ld	r22, Z+
    1d5a:	6f 01       	movw	r12, r30
    1d5c:	28 e2       	ldi	r18, 0x28	; 40
    1d5e:	41 2f       	mov	r20, r17
    1d60:	86 e4       	ldi	r24, 0x46	; 70
    1d62:	93 e0       	ldi	r25, 0x03	; 3
    1d64:	15 d9       	rcall	.-3542   	; 0xf90 <_ZN7Display9draw_ASCIEhhh>
    1d66:	1a 5f       	subi	r17, 0xFA	; 250
    1d68:	1e 34       	cpi	r17, 0x4E	; 78
    1d6a:	a9 f7       	brne	.-22     	; 0x1d56 <_Z11menue_hauptv+0x12c>
	buffersize=sprintf(buffer,"7:Drucksensor");
    1d6c:	8e e0       	ldi	r24, 0x0E	; 14
    1d6e:	ea e8       	ldi	r30, 0x8A	; 138
    1d70:	f1 e0       	ldi	r31, 0x01	; 1
    1d72:	de 01       	movw	r26, r28
    1d74:	11 96       	adiw	r26, 0x01	; 1
    1d76:	01 90       	ld	r0, Z+
    1d78:	0d 92       	st	X+, r0
    1d7a:	8a 95       	dec	r24
    1d7c:	e1 f7       	brne	.-8      	; 0x1d76 <_Z11menue_hauptv+0x14c>
    1d7e:	ce 2c       	mov	r12, r14
    1d80:	df 2c       	mov	r13, r15
    1d82:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,6*charhighte);}
    1d84:	f6 01       	movw	r30, r12
    1d86:	61 91       	ld	r22, Z+
    1d88:	6f 01       	movw	r12, r30
    1d8a:	20 e3       	ldi	r18, 0x30	; 48
    1d8c:	41 2f       	mov	r20, r17
    1d8e:	86 e4       	ldi	r24, 0x46	; 70
    1d90:	93 e0       	ldi	r25, 0x03	; 3
    1d92:	fe d8       	rcall	.-3588   	; 0xf90 <_ZN7Display9draw_ASCIEhhh>
    1d94:	1a 5f       	subi	r17, 0xFA	; 250
    1d96:	1e 34       	cpi	r17, 0x4E	; 78
    1d98:	a9 f7       	brne	.-22     	; 0x1d84 <_Z11menue_hauptv+0x15a>
}
    1d9a:	64 96       	adiw	r28, 0x14	; 20
    1d9c:	0f b6       	in	r0, 0x3f	; 63
    1d9e:	f8 94       	cli
    1da0:	de bf       	out	0x3e, r29	; 62
    1da2:	0f be       	out	0x3f, r0	; 63
    1da4:	cd bf       	out	0x3d, r28	; 61
    1da6:	df 91       	pop	r29
    1da8:	cf 91       	pop	r28
    1daa:	1f 91       	pop	r17
    1dac:	0f 91       	pop	r16
    1dae:	ff 90       	pop	r15
    1db0:	ef 90       	pop	r14
    1db2:	df 90       	pop	r13
    1db4:	cf 90       	pop	r12
    1db6:	08 95       	ret

00001db8 <_Z11menue_einstv>:
void menue_einst(){
    1db8:	af 92       	push	r10
    1dba:	bf 92       	push	r11
    1dbc:	df 92       	push	r13
    1dbe:	ef 92       	push	r14
    1dc0:	0f 93       	push	r16
    1dc2:	1f 93       	push	r17
    1dc4:	cf 93       	push	r28
    1dc6:	df 93       	push	r29
    1dc8:	cd b7       	in	r28, 0x3d	; 61
    1dca:	de b7       	in	r29, 0x3e	; 62
    1dcc:	64 97       	sbiw	r28, 0x14	; 20
    1dce:	0f b6       	in	r0, 0x3f	; 63
    1dd0:	f8 94       	cli
    1dd2:	de bf       	out	0x3e, r29	; 62
    1dd4:	0f be       	out	0x3f, r0	; 63
    1dd6:	cd bf       	out	0x3d, r28	; 61
	char buffer[20];
	uint8_t buffersize=0;

	oled.clearFrame();
    1dd8:	86 e4       	ldi	r24, 0x46	; 70
    1dda:	93 e0       	ldi	r25, 0x03	; 3
    1ddc:	0e 94 05 05 	call	0xa0a	; 0xa0a <_ZN7Display10clearFrameEv>
	buffersize=sprintf(buffer,"1:Kompass kalib.");
    1de0:	81 e1       	ldi	r24, 0x11	; 17
    1de2:	e8 e9       	ldi	r30, 0x98	; 152
    1de4:	f1 e0       	ldi	r31, 0x01	; 1
    1de6:	8e 01       	movw	r16, r28
    1de8:	0f 5f       	subi	r16, 0xFF	; 255
    1dea:	1f 4f       	sbci	r17, 0xFF	; 255
    1dec:	d8 01       	movw	r26, r16
    1dee:	01 90       	ld	r0, Z+
    1df0:	0d 92       	st	X+, r0
    1df2:	8a 95       	dec	r24
    1df4:	e1 f7       	brne	.-8      	; 0x1dee <_Z11menue_einstv+0x36>
    1df6:	d0 2e       	mov	r13, r16
    1df8:	e1 2e       	mov	r14, r17
    1dfa:	58 01       	movw	r10, r16
    1dfc:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,0*charhighte);}
    1dfe:	f5 01       	movw	r30, r10
    1e00:	61 91       	ld	r22, Z+
    1e02:	5f 01       	movw	r10, r30
    1e04:	20 e0       	ldi	r18, 0x00	; 0
    1e06:	41 2f       	mov	r20, r17
    1e08:	86 e4       	ldi	r24, 0x46	; 70
    1e0a:	93 e0       	ldi	r25, 0x03	; 3
    1e0c:	c1 d8       	rcall	.-3710   	; 0xf90 <_ZN7Display9draw_ASCIEhhh>
    1e0e:	1a 5f       	subi	r17, 0xFA	; 250
    1e10:	10 36       	cpi	r17, 0x60	; 96
    1e12:	a9 f7       	brne	.-22     	; 0x1dfe <_Z11menue_einstv+0x46>
	buffersize=sprintf(buffer,"2:Kompassverstaerkung");
    1e14:	86 e1       	ldi	r24, 0x16	; 22
    1e16:	e9 ea       	ldi	r30, 0xA9	; 169
    1e18:	f1 e0       	ldi	r31, 0x01	; 1
    1e1a:	de 01       	movw	r26, r28
    1e1c:	11 96       	adiw	r26, 0x01	; 1
    1e1e:	01 90       	ld	r0, Z+
    1e20:	0d 92       	st	X+, r0
    1e22:	8a 95       	dec	r24
    1e24:	e1 f7       	brne	.-8      	; 0x1e1e <_Z11menue_einstv+0x66>
    1e26:	ad 2c       	mov	r10, r13
    1e28:	be 2c       	mov	r11, r14
    1e2a:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,1*charhighte);}
    1e2c:	f5 01       	movw	r30, r10
    1e2e:	61 91       	ld	r22, Z+
    1e30:	5f 01       	movw	r10, r30
    1e32:	28 e0       	ldi	r18, 0x08	; 8
    1e34:	41 2f       	mov	r20, r17
    1e36:	86 e4       	ldi	r24, 0x46	; 70
    1e38:	93 e0       	ldi	r25, 0x03	; 3
    1e3a:	aa d8       	rcall	.-3756   	; 0xf90 <_ZN7Display9draw_ASCIEhhh>
    1e3c:	1a 5f       	subi	r17, 0xFA	; 250
    1e3e:	1e 37       	cpi	r17, 0x7E	; 126
    1e40:	a9 f7       	brne	.-22     	; 0x1e2c <_Z11menue_einstv+0x74>
	buffersize=sprintf(buffer,"3:Uhr einstellen");
    1e42:	81 e1       	ldi	r24, 0x11	; 17
    1e44:	ef eb       	ldi	r30, 0xBF	; 191
    1e46:	f1 e0       	ldi	r31, 0x01	; 1
    1e48:	de 01       	movw	r26, r28
    1e4a:	11 96       	adiw	r26, 0x01	; 1
    1e4c:	01 90       	ld	r0, Z+
    1e4e:	0d 92       	st	X+, r0
    1e50:	8a 95       	dec	r24
    1e52:	e1 f7       	brne	.-8      	; 0x1e4c <_Z11menue_einstv+0x94>
    1e54:	ad 2c       	mov	r10, r13
    1e56:	be 2c       	mov	r11, r14
    1e58:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,2*charhighte);}
    1e5a:	f5 01       	movw	r30, r10
    1e5c:	61 91       	ld	r22, Z+
    1e5e:	5f 01       	movw	r10, r30
    1e60:	20 e1       	ldi	r18, 0x10	; 16
    1e62:	41 2f       	mov	r20, r17
    1e64:	86 e4       	ldi	r24, 0x46	; 70
    1e66:	93 e0       	ldi	r25, 0x03	; 3
    1e68:	93 d8       	rcall	.-3802   	; 0xf90 <_ZN7Display9draw_ASCIEhhh>
    1e6a:	1a 5f       	subi	r17, 0xFA	; 250
    1e6c:	10 36       	cpi	r17, 0x60	; 96
    1e6e:	a9 f7       	brne	.-22     	; 0x1e5a <_Z11menue_einstv+0xa2>
	buffersize=sprintf(buffer,"4:Weckereinstellen");
    1e70:	83 e1       	ldi	r24, 0x13	; 19
    1e72:	e0 ed       	ldi	r30, 0xD0	; 208
    1e74:	f1 e0       	ldi	r31, 0x01	; 1
    1e76:	de 01       	movw	r26, r28
    1e78:	11 96       	adiw	r26, 0x01	; 1
    1e7a:	01 90       	ld	r0, Z+
    1e7c:	0d 92       	st	X+, r0
    1e7e:	8a 95       	dec	r24
    1e80:	e1 f7       	brne	.-8      	; 0x1e7a <_Z11menue_einstv+0xc2>
    1e82:	ad 2c       	mov	r10, r13
    1e84:	be 2c       	mov	r11, r14
    1e86:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,3*charhighte);}
    1e88:	f5 01       	movw	r30, r10
    1e8a:	61 91       	ld	r22, Z+
    1e8c:	5f 01       	movw	r10, r30
    1e8e:	28 e1       	ldi	r18, 0x18	; 24
    1e90:	41 2f       	mov	r20, r17
    1e92:	86 e4       	ldi	r24, 0x46	; 70
    1e94:	93 e0       	ldi	r25, 0x03	; 3
    1e96:	7c d8       	rcall	.-3848   	; 0xf90 <_ZN7Display9draw_ASCIEhhh>
    1e98:	1a 5f       	subi	r17, 0xFA	; 250
    1e9a:	1c 36       	cpi	r17, 0x6C	; 108
    1e9c:	a9 f7       	brne	.-22     	; 0x1e88 <_Z11menue_einstv+0xd0>
	//for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,4*charhighte);}
	//buffersize=sprintf(buffer,"6:HMC5883L Gain");
	//for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,5*charhighte);}
	//buffersize=sprintf(buffer,"7:Uhr einstellen");
	//for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,6*charhighte);}
}
    1e9e:	64 96       	adiw	r28, 0x14	; 20
    1ea0:	0f b6       	in	r0, 0x3f	; 63
    1ea2:	f8 94       	cli
    1ea4:	de bf       	out	0x3e, r29	; 62
    1ea6:	0f be       	out	0x3f, r0	; 63
    1ea8:	cd bf       	out	0x3d, r28	; 61
    1eaa:	df 91       	pop	r29
    1eac:	cf 91       	pop	r28
    1eae:	1f 91       	pop	r17
    1eb0:	0f 91       	pop	r16
    1eb2:	ef 90       	pop	r14
    1eb4:	df 90       	pop	r13
    1eb6:	bf 90       	pop	r11
    1eb8:	af 90       	pop	r10
    1eba:	08 95       	ret

00001ebc <_Z9menue_uhrv>:
void menue_uhr(){
    1ebc:	cf 92       	push	r12
    1ebe:	df 92       	push	r13
    1ec0:	ef 92       	push	r14
    1ec2:	ff 92       	push	r15
    1ec4:	0f 93       	push	r16
    1ec6:	1f 93       	push	r17
    1ec8:	cf 93       	push	r28
    1eca:	df 93       	push	r29
    1ecc:	cd b7       	in	r28, 0x3d	; 61
    1ece:	de b7       	in	r29, 0x3e	; 62
    1ed0:	64 97       	sbiw	r28, 0x14	; 20
    1ed2:	0f b6       	in	r0, 0x3f	; 63
    1ed4:	f8 94       	cli
    1ed6:	de bf       	out	0x3e, r29	; 62
    1ed8:	0f be       	out	0x3f, r0	; 63
    1eda:	cd bf       	out	0x3d, r28	; 61
	char buffer[20];
	uint8_t buffersize=0;

	oled.clearFrame();
    1edc:	86 e4       	ldi	r24, 0x46	; 70
    1ede:	93 e0       	ldi	r25, 0x03	; 3
    1ee0:	0e 94 05 05 	call	0xa0a	; 0xa0a <_ZN7Display10clearFrameEv>
	buffersize=sprintf(buffer,"1:Uhr");
    1ee4:	86 e0       	ldi	r24, 0x06	; 6
    1ee6:	e3 ee       	ldi	r30, 0xE3	; 227
    1ee8:	f1 e0       	ldi	r31, 0x01	; 1
    1eea:	8e 01       	movw	r16, r28
    1eec:	0f 5f       	subi	r16, 0xFF	; 255
    1eee:	1f 4f       	sbci	r17, 0xFF	; 255
    1ef0:	d8 01       	movw	r26, r16
    1ef2:	01 90       	ld	r0, Z+
    1ef4:	0d 92       	st	X+, r0
    1ef6:	8a 95       	dec	r24
    1ef8:	e1 f7       	brne	.-8      	; 0x1ef2 <_Z9menue_uhrv+0x36>
    1efa:	e0 2e       	mov	r14, r16
    1efc:	f1 2e       	mov	r15, r17
    1efe:	68 01       	movw	r12, r16
    1f00:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,0*charhighte);}
    1f02:	f6 01       	movw	r30, r12
    1f04:	61 91       	ld	r22, Z+
    1f06:	6f 01       	movw	r12, r30
    1f08:	20 e0       	ldi	r18, 0x00	; 0
    1f0a:	41 2f       	mov	r20, r17
    1f0c:	86 e4       	ldi	r24, 0x46	; 70
    1f0e:	93 e0       	ldi	r25, 0x03	; 3
    1f10:	3f d8       	rcall	.-3970   	; 0xf90 <_ZN7Display9draw_ASCIEhhh>
    1f12:	1a 5f       	subi	r17, 0xFA	; 250
    1f14:	1e 31       	cpi	r17, 0x1E	; 30
    1f16:	a9 f7       	brne	.-22     	; 0x1f02 <_Z9menue_uhrv+0x46>
	buffersize=sprintf(buffer,"2:Stoppuhr");
    1f18:	8b e0       	ldi	r24, 0x0B	; 11
    1f1a:	e9 ee       	ldi	r30, 0xE9	; 233
    1f1c:	f1 e0       	ldi	r31, 0x01	; 1
    1f1e:	de 01       	movw	r26, r28
    1f20:	11 96       	adiw	r26, 0x01	; 1
    1f22:	01 90       	ld	r0, Z+
    1f24:	0d 92       	st	X+, r0
    1f26:	8a 95       	dec	r24
    1f28:	e1 f7       	brne	.-8      	; 0x1f22 <_Z9menue_uhrv+0x66>
    1f2a:	ce 2c       	mov	r12, r14
    1f2c:	df 2c       	mov	r13, r15
    1f2e:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,1*charhighte);}
    1f30:	f6 01       	movw	r30, r12
    1f32:	61 91       	ld	r22, Z+
    1f34:	6f 01       	movw	r12, r30
    1f36:	28 e0       	ldi	r18, 0x08	; 8
    1f38:	41 2f       	mov	r20, r17
    1f3a:	86 e4       	ldi	r24, 0x46	; 70
    1f3c:	93 e0       	ldi	r25, 0x03	; 3
    1f3e:	28 d8       	rcall	.-4016   	; 0xf90 <_ZN7Display9draw_ASCIEhhh>
    1f40:	1a 5f       	subi	r17, 0xFA	; 250
    1f42:	1c 33       	cpi	r17, 0x3C	; 60
    1f44:	a9 f7       	brne	.-22     	; 0x1f30 <_Z9menue_uhrv+0x74>
	buffersize=sprintf(buffer,"3:Timer");
    1f46:	88 e0       	ldi	r24, 0x08	; 8
    1f48:	e4 ef       	ldi	r30, 0xF4	; 244
    1f4a:	f1 e0       	ldi	r31, 0x01	; 1
    1f4c:	de 01       	movw	r26, r28
    1f4e:	11 96       	adiw	r26, 0x01	; 1
    1f50:	01 90       	ld	r0, Z+
    1f52:	0d 92       	st	X+, r0
    1f54:	8a 95       	dec	r24
    1f56:	e1 f7       	brne	.-8      	; 0x1f50 <_Z9menue_uhrv+0x94>
    1f58:	ce 2c       	mov	r12, r14
    1f5a:	df 2c       	mov	r13, r15
    1f5c:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,2*charhighte);}
    1f5e:	f6 01       	movw	r30, r12
    1f60:	61 91       	ld	r22, Z+
    1f62:	6f 01       	movw	r12, r30
    1f64:	20 e1       	ldi	r18, 0x10	; 16
    1f66:	41 2f       	mov	r20, r17
    1f68:	86 e4       	ldi	r24, 0x46	; 70
    1f6a:	93 e0       	ldi	r25, 0x03	; 3
    1f6c:	11 d8       	rcall	.-4062   	; 0xf90 <_ZN7Display9draw_ASCIEhhh>
    1f6e:	1a 5f       	subi	r17, 0xFA	; 250
    1f70:	1a 32       	cpi	r17, 0x2A	; 42
    1f72:	a9 f7       	brne	.-22     	; 0x1f5e <_Z9menue_uhrv+0xa2>
	buffersize=sprintf(buffer,"4:Alarm");
    1f74:	88 e0       	ldi	r24, 0x08	; 8
    1f76:	ec ef       	ldi	r30, 0xFC	; 252
    1f78:	f1 e0       	ldi	r31, 0x01	; 1
    1f7a:	de 01       	movw	r26, r28
    1f7c:	11 96       	adiw	r26, 0x01	; 1
    1f7e:	01 90       	ld	r0, Z+
    1f80:	0d 92       	st	X+, r0
    1f82:	8a 95       	dec	r24
    1f84:	e1 f7       	brne	.-8      	; 0x1f7e <_Z9menue_uhrv+0xc2>
    1f86:	ce 2c       	mov	r12, r14
    1f88:	df 2c       	mov	r13, r15
    1f8a:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,3*charhighte);}
    1f8c:	f6 01       	movw	r30, r12
    1f8e:	61 91       	ld	r22, Z+
    1f90:	6f 01       	movw	r12, r30
    1f92:	28 e1       	ldi	r18, 0x18	; 24
    1f94:	41 2f       	mov	r20, r17
    1f96:	86 e4       	ldi	r24, 0x46	; 70
    1f98:	93 e0       	ldi	r25, 0x03	; 3
    1f9a:	0e 94 c8 07 	call	0xf90	; 0xf90 <_ZN7Display9draw_ASCIEhhh>
    1f9e:	1a 5f       	subi	r17, 0xFA	; 250
    1fa0:	1a 32       	cpi	r17, 0x2A	; 42
    1fa2:	a1 f7       	brne	.-24     	; 0x1f8c <_Z9menue_uhrv+0xd0>
	buffersize=sprintf(buffer,"5:Uhr gross");
    1fa4:	8c e0       	ldi	r24, 0x0C	; 12
    1fa6:	e4 e0       	ldi	r30, 0x04	; 4
    1fa8:	f2 e0       	ldi	r31, 0x02	; 2
    1faa:	de 01       	movw	r26, r28
    1fac:	11 96       	adiw	r26, 0x01	; 1
    1fae:	01 90       	ld	r0, Z+
    1fb0:	0d 92       	st	X+, r0
    1fb2:	8a 95       	dec	r24
    1fb4:	e1 f7       	brne	.-8      	; 0x1fae <_Z9menue_uhrv+0xf2>
    1fb6:	ce 2c       	mov	r12, r14
    1fb8:	df 2c       	mov	r13, r15
    1fba:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,4*charhighte);}
    1fbc:	f6 01       	movw	r30, r12
    1fbe:	61 91       	ld	r22, Z+
    1fc0:	6f 01       	movw	r12, r30
    1fc2:	20 e2       	ldi	r18, 0x20	; 32
    1fc4:	41 2f       	mov	r20, r17
    1fc6:	86 e4       	ldi	r24, 0x46	; 70
    1fc8:	93 e0       	ldi	r25, 0x03	; 3
    1fca:	0e 94 c8 07 	call	0xf90	; 0xf90 <_ZN7Display9draw_ASCIEhhh>
    1fce:	1a 5f       	subi	r17, 0xFA	; 250
    1fd0:	12 34       	cpi	r17, 0x42	; 66
    1fd2:	a1 f7       	brne	.-24     	; 0x1fbc <_Z9menue_uhrv+0x100>
	buffersize=sprintf(buffer,"6:Wecker");
    1fd4:	89 e0       	ldi	r24, 0x09	; 9
    1fd6:	e0 e1       	ldi	r30, 0x10	; 16
    1fd8:	f2 e0       	ldi	r31, 0x02	; 2
    1fda:	de 01       	movw	r26, r28
    1fdc:	11 96       	adiw	r26, 0x01	; 1
    1fde:	01 90       	ld	r0, Z+
    1fe0:	0d 92       	st	X+, r0
    1fe2:	8a 95       	dec	r24
    1fe4:	e1 f7       	brne	.-8      	; 0x1fde <_Z9menue_uhrv+0x122>
    1fe6:	ce 2c       	mov	r12, r14
    1fe8:	df 2c       	mov	r13, r15
    1fea:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,5*charhighte);}
    1fec:	f6 01       	movw	r30, r12
    1fee:	61 91       	ld	r22, Z+
    1ff0:	6f 01       	movw	r12, r30
    1ff2:	28 e2       	ldi	r18, 0x28	; 40
    1ff4:	41 2f       	mov	r20, r17
    1ff6:	86 e4       	ldi	r24, 0x46	; 70
    1ff8:	93 e0       	ldi	r25, 0x03	; 3
    1ffa:	0e 94 c8 07 	call	0xf90	; 0xf90 <_ZN7Display9draw_ASCIEhhh>
    1ffe:	1a 5f       	subi	r17, 0xFA	; 250
    2000:	10 33       	cpi	r17, 0x30	; 48
    2002:	a1 f7       	brne	.-24     	; 0x1fec <_Z9menue_uhrv+0x130>
	//buffersize=sprintf(buffer,"7:Uhr einstellen");
	//for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,6*charhighte);}
}
    2004:	64 96       	adiw	r28, 0x14	; 20
    2006:	0f b6       	in	r0, 0x3f	; 63
    2008:	f8 94       	cli
    200a:	de bf       	out	0x3e, r29	; 62
    200c:	0f be       	out	0x3f, r0	; 63
    200e:	cd bf       	out	0x3d, r28	; 61
    2010:	df 91       	pop	r29
    2012:	cf 91       	pop	r28
    2014:	1f 91       	pop	r17
    2016:	0f 91       	pop	r16
    2018:	ff 90       	pop	r15
    201a:	ef 90       	pop	r14
    201c:	df 90       	pop	r13
    201e:	cf 90       	pop	r12
    2020:	08 95       	ret

00002022 <_Z11uhranzeigenv>:

void uhranzeigen(){
    2022:	df 92       	push	r13
    2024:	ef 92       	push	r14
    2026:	ff 92       	push	r15
    2028:	0f 93       	push	r16
    202a:	1f 93       	push	r17
    202c:	cf 93       	push	r28
    202e:	df 93       	push	r29
    2030:	cd b7       	in	r28, 0x3d	; 61
    2032:	de b7       	in	r29, 0x3e	; 62
    2034:	64 97       	sbiw	r28, 0x14	; 20
    2036:	0f b6       	in	r0, 0x3f	; 63
    2038:	f8 94       	cli
    203a:	de bf       	out	0x3e, r29	; 62
    203c:	0f be       	out	0x3f, r0	; 63
    203e:	cd bf       	out	0x3d, r28	; 61
	Baro.READ_Temperature();
    2040:	8f e2       	ldi	r24, 0x2F	; 47
    2042:	93 e0       	ldi	r25, 0x03	; 3
    2044:	0e 94 c2 26 	call	0x4d84	; 0x4d84 <_ZN8Pressure16READ_TemperatureEv>
	uint8_t buffersize;
	char Buffer[20];
	oled.clearFrame();
    2048:	86 e4       	ldi	r24, 0x46	; 70
    204a:	93 e0       	ldi	r25, 0x03	; 3
    204c:	0e 94 05 05 	call	0xa0a	; 0xa0a <_ZN7Display10clearFrameEv>
	//oled.analog(rtc.Stunden,rtc.Minuten,rtc.Sekunden,1);
	if (pos==0)
    2050:	80 91 28 03 	lds	r24, 0x0328
    2054:	81 11       	cpse	r24, r1
    2056:	05 c0       	rjmp	.+10     	; 0x2062 <_Z11uhranzeigenv+0x40>
	{
		oled.draw_pikachu();
    2058:	86 e4       	ldi	r24, 0x46	; 70
    205a:	93 e0       	ldi	r25, 0x03	; 3
    205c:	0e 94 16 08 	call	0x102c	; 0x102c <_ZN7Display12draw_pikachuEv>
    2060:	a2 c0       	rjmp	.+324    	; 0x21a6 <_Z11uhranzeigenv+0x184>
	}
	else{
		oled.draw_glurak();
    2062:	86 e4       	ldi	r24, 0x46	; 70
    2064:	93 e0       	ldi	r25, 0x03	; 3
    2066:	0e 94 31 08 	call	0x1062	; 0x1062 <_ZN7Display11draw_glurakEv>
    206a:	9d c0       	rjmp	.+314    	; 0x21a6 <_Z11uhranzeigenv+0x184>
	}
	for(uint8_t i=0;i<bitsderrtc;i++){oled.draw_ASCI(rtc.msg_uhr[i],65+i*charsize,0*charhighte);}
    206c:	f7 01       	movw	r30, r14
    206e:	61 91       	ld	r22, Z+
    2070:	7f 01       	movw	r14, r30
    2072:	20 e0       	ldi	r18, 0x00	; 0
    2074:	41 2f       	mov	r20, r17
    2076:	86 e4       	ldi	r24, 0x46	; 70
    2078:	93 e0       	ldi	r25, 0x03	; 3
    207a:	0e 94 c8 07 	call	0xf90	; 0xf90 <_ZN7Display9draw_ASCIEhhh>
    207e:	1a 5f       	subi	r17, 0xFA	; 250
    2080:	11 37       	cpi	r17, 0x71	; 113
    2082:	a1 f7       	brne	.-24     	; 0x206c <_Z11uhranzeigenv+0x4a>
    2084:	0f 2e       	mov	r0, r31
    2086:	f5 e8       	ldi	r31, 0x85	; 133
    2088:	ef 2e       	mov	r14, r31
    208a:	f7 e0       	ldi	r31, 0x07	; 7
    208c:	ff 2e       	mov	r15, r31
    208e:	f0 2d       	mov	r31, r0
    2090:	11 e4       	ldi	r17, 0x41	; 65
	for(uint8_t i=0;i<bitsderrtc;i++){oled.draw_ASCI(rtc.msg_dat[i],65+i*charsize,7*charhighte);}
    2092:	f7 01       	movw	r30, r14
    2094:	61 91       	ld	r22, Z+
    2096:	7f 01       	movw	r14, r30
    2098:	28 e3       	ldi	r18, 0x38	; 56
    209a:	41 2f       	mov	r20, r17
    209c:	86 e4       	ldi	r24, 0x46	; 70
    209e:	93 e0       	ldi	r25, 0x03	; 3
    20a0:	0e 94 c8 07 	call	0xf90	; 0xf90 <_ZN7Display9draw_ASCIEhhh>
    20a4:	1a 5f       	subi	r17, 0xFA	; 250
    20a6:	11 37       	cpi	r17, 0x71	; 113
    20a8:	a1 f7       	brne	.-24     	; 0x2092 <_Z11uhranzeigenv+0x70>
	buffersize=sprintf(Buffer,"%i%%",Batteriestatus());
    20aa:	f9 da       	rcall	.-2574   	; 0x169e <_Z14Batteriestatusv>
    20ac:	28 2f       	mov	r18, r24
    20ae:	33 27       	eor	r19, r19
    20b0:	27 fd       	sbrc	r18, 7
    20b2:	30 95       	com	r19
    20b4:	3f 93       	push	r19
    20b6:	8f 93       	push	r24
    20b8:	81 e3       	ldi	r24, 0x31	; 49
    20ba:	91 e0       	ldi	r25, 0x01	; 1
    20bc:	9f 93       	push	r25
    20be:	8f 93       	push	r24
    20c0:	ce 01       	movw	r24, r28
    20c2:	01 96       	adiw	r24, 0x01	; 1
    20c4:	9f 93       	push	r25
    20c6:	8f 93       	push	r24
    20c8:	0e 94 ea 30 	call	0x61d4	; 0x61d4 <sprintf>
	for(uint8_t i=0;i<buffersize;i++){
    20cc:	0f 90       	pop	r0
    20ce:	0f 90       	pop	r0
    20d0:	0f 90       	pop	r0
    20d2:	0f 90       	pop	r0
    20d4:	0f 90       	pop	r0
    20d6:	0f 90       	pop	r0
    20d8:	88 23       	and	r24, r24
    20da:	59 f1       	breq	.+86     	; 0x2132 <_Z11uhranzeigenv+0x110>
    20dc:	8e 01       	movw	r16, r28
    20de:	0f 5f       	subi	r16, 0xFF	; 255
    20e0:	1f 4f       	sbci	r17, 0xFF	; 255
    20e2:	81 50       	subi	r24, 0x01	; 1
    20e4:	68 94       	set
    20e6:	ee 24       	eor	r14, r14
    20e8:	e1 f8       	bld	r14, 1
    20ea:	f1 2c       	mov	r15, r1
    20ec:	ec 0e       	add	r14, r28
    20ee:	fd 1e       	adc	r15, r29
    20f0:	e8 0e       	add	r14, r24
    20f2:	f1 1c       	adc	r15, r1
    20f4:	0f 2e       	mov	r0, r31
    20f6:	f9 e4       	ldi	r31, 0x49	; 73
    20f8:	df 2e       	mov	r13, r31
    20fa:	f0 2d       	mov	r31, r0
		if (Buffer[i]=='%' || Buffer[i]=='-')
    20fc:	f8 01       	movw	r30, r16
    20fe:	61 91       	ld	r22, Z+
    2100:	8f 01       	movw	r16, r30
    2102:	86 2f       	mov	r24, r22
    2104:	87 7f       	andi	r24, 0xF7	; 247
    2106:	85 32       	cpi	r24, 0x25	; 37
    2108:	39 f4       	brne	.+14     	; 0x2118 <_Z11uhranzeigenv+0xf6>
		{
			oled.draw_ASCI(Buffer[i],73+i*numbersmalsize,3*charhighte);
    210a:	28 e1       	ldi	r18, 0x18	; 24
    210c:	4d 2d       	mov	r20, r13
    210e:	86 e4       	ldi	r24, 0x46	; 70
    2110:	93 e0       	ldi	r25, 0x03	; 3
    2112:	0e 94 c8 07 	call	0xf90	; 0xf90 <_ZN7Display9draw_ASCIEhhh>
    2116:	08 c0       	rjmp	.+16     	; 0x2128 <_Z11uhranzeigenv+0x106>
		}
		else{
			oled.draw_number16x16(Buffer[i]-'0',70+i*numbersmalsize,2.5*charhighte);
    2118:	60 53       	subi	r22, 0x30	; 48
    211a:	24 e1       	ldi	r18, 0x14	; 20
    211c:	4d ef       	ldi	r20, 0xFD	; 253
    211e:	4d 0d       	add	r20, r13
    2120:	86 e4       	ldi	r24, 0x46	; 70
    2122:	93 e0       	ldi	r25, 0x03	; 3
    2124:	0e 94 4c 08 	call	0x1098	; 0x1098 <_ZN7Display16draw_number16x16Ehhh>
    2128:	f0 e1       	ldi	r31, 0x10	; 16
    212a:	df 0e       	add	r13, r31
		oled.draw_glurak();
	}
	for(uint8_t i=0;i<bitsderrtc;i++){oled.draw_ASCI(rtc.msg_uhr[i],65+i*charsize,0*charhighte);}
	for(uint8_t i=0;i<bitsderrtc;i++){oled.draw_ASCI(rtc.msg_dat[i],65+i*charsize,7*charhighte);}
	buffersize=sprintf(Buffer,"%i%%",Batteriestatus());
	for(uint8_t i=0;i<buffersize;i++){
    212c:	0e 15       	cp	r16, r14
    212e:	1f 05       	cpc	r17, r15
    2130:	29 f7       	brne	.-54     	; 0x20fc <_Z11uhranzeigenv+0xda>
		}
		else{
			oled.draw_number16x16(Buffer[i]-'0',70+i*numbersmalsize,2.5*charhighte);
		}
	}
	buffersize=sprintf(Buffer,"%.1f C",(double)Baro.Tempera);
    2132:	e3 e3       	ldi	r30, 0x33	; 51
    2134:	f3 e0       	ldi	r31, 0x03	; 3
    2136:	83 81       	ldd	r24, Z+3	; 0x03
    2138:	8f 93       	push	r24
    213a:	82 81       	ldd	r24, Z+2	; 0x02
    213c:	8f 93       	push	r24
    213e:	81 81       	ldd	r24, Z+1	; 0x01
    2140:	8f 93       	push	r24
    2142:	80 81       	ld	r24, Z
    2144:	8f 93       	push	r24
    2146:	89 e1       	ldi	r24, 0x19	; 25
    2148:	92 e0       	ldi	r25, 0x02	; 2
    214a:	9f 93       	push	r25
    214c:	8f 93       	push	r24
    214e:	ce 01       	movw	r24, r28
    2150:	01 96       	adiw	r24, 0x01	; 1
    2152:	9f 93       	push	r25
    2154:	8f 93       	push	r24
    2156:	0e 94 ea 30 	call	0x61d4	; 0x61d4 <sprintf>
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(Buffer[i],70+i*charsize,5*charhighte);}
    215a:	0f b6       	in	r0, 0x3f	; 63
    215c:	f8 94       	cli
    215e:	de bf       	out	0x3e, r29	; 62
    2160:	0f be       	out	0x3f, r0	; 63
    2162:	cd bf       	out	0x3d, r28	; 61
    2164:	88 23       	and	r24, r24
    2166:	39 f1       	breq	.+78     	; 0x21b6 <_Z11uhranzeigenv+0x194>
    2168:	8e 01       	movw	r16, r28
    216a:	0f 5f       	subi	r16, 0xFF	; 255
    216c:	1f 4f       	sbci	r17, 0xFF	; 255
    216e:	81 50       	subi	r24, 0x01	; 1
    2170:	68 94       	set
    2172:	ee 24       	eor	r14, r14
    2174:	e1 f8       	bld	r14, 1
    2176:	f1 2c       	mov	r15, r1
    2178:	ec 0e       	add	r14, r28
    217a:	fd 1e       	adc	r15, r29
    217c:	e8 0e       	add	r14, r24
    217e:	f1 1c       	adc	r15, r1
    2180:	0f 2e       	mov	r0, r31
    2182:	f6 e4       	ldi	r31, 0x46	; 70
    2184:	df 2e       	mov	r13, r31
    2186:	f0 2d       	mov	r31, r0
    2188:	f8 01       	movw	r30, r16
    218a:	61 91       	ld	r22, Z+
    218c:	8f 01       	movw	r16, r30
    218e:	28 e2       	ldi	r18, 0x28	; 40
    2190:	4d 2d       	mov	r20, r13
    2192:	86 e4       	ldi	r24, 0x46	; 70
    2194:	93 e0       	ldi	r25, 0x03	; 3
    2196:	0e 94 c8 07 	call	0xf90	; 0xf90 <_ZN7Display9draw_ASCIEhhh>
    219a:	f6 e0       	ldi	r31, 0x06	; 6
    219c:	df 0e       	add	r13, r31
    219e:	0e 15       	cp	r16, r14
    21a0:	1f 05       	cpc	r17, r15
    21a2:	91 f7       	brne	.-28     	; 0x2188 <_Z11uhranzeigenv+0x166>
    21a4:	08 c0       	rjmp	.+16     	; 0x21b6 <_Z11uhranzeigenv+0x194>
    21a6:	0f 2e       	mov	r0, r31
    21a8:	fd e7       	ldi	r31, 0x7D	; 125
    21aa:	ef 2e       	mov	r14, r31
    21ac:	f7 e0       	ldi	r31, 0x07	; 7
    21ae:	ff 2e       	mov	r15, r31
    21b0:	f0 2d       	mov	r31, r0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,5*charhighte);}
	//buffersize=sprintf(buffer,"7:Uhr einstellen");
	//for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,6*charhighte);}
}

void uhranzeigen(){
    21b2:	11 e4       	ldi	r17, 0x41	; 65
    21b4:	5b cf       	rjmp	.-330    	; 0x206c <_Z11uhranzeigenv+0x4a>
			oled.draw_number16x16(Buffer[i]-'0',70+i*numbersmalsize,2.5*charhighte);
		}
	}
	buffersize=sprintf(Buffer,"%.1f C",(double)Baro.Tempera);
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(Buffer[i],70+i*charsize,5*charhighte);}
}
    21b6:	64 96       	adiw	r28, 0x14	; 20
    21b8:	0f b6       	in	r0, 0x3f	; 63
    21ba:	f8 94       	cli
    21bc:	de bf       	out	0x3e, r29	; 62
    21be:	0f be       	out	0x3f, r0	; 63
    21c0:	cd bf       	out	0x3d, r28	; 61
    21c2:	df 91       	pop	r29
    21c4:	cf 91       	pop	r28
    21c6:	1f 91       	pop	r17
    21c8:	0f 91       	pop	r16
    21ca:	ff 90       	pop	r15
    21cc:	ef 90       	pop	r14
    21ce:	df 90       	pop	r13
    21d0:	08 95       	ret

000021d2 <_Z14uhranzeigenminv>:

void uhranzeigenmin(){
    21d2:	0f 93       	push	r16
    21d4:	1f 93       	push	r17
    21d6:	cf 93       	push	r28
    21d8:	df 93       	push	r29
	oled.clearFrame();
    21da:	86 e4       	ldi	r24, 0x46	; 70
    21dc:	93 e0       	ldi	r25, 0x03	; 3
    21de:	0e 94 05 05 	call	0xa0a	; 0xa0a <_ZN7Display10clearFrameEv>
	header(2);
    21e2:	82 e0       	ldi	r24, 0x02	; 2
    21e4:	30 db       	rcall	.-2464   	; 0x1846 <_Z6headerh>
	oled.analog(rtc.Stunden,rtc.Minuten,rtc.Sekunden,0);
    21e6:	00 e0       	ldi	r16, 0x00	; 0
    21e8:	20 91 8f 07 	lds	r18, 0x078F
    21ec:	40 91 8e 07 	lds	r20, 0x078E
    21f0:	60 91 8d 07 	lds	r22, 0x078D
    21f4:	86 e4       	ldi	r24, 0x46	; 70
    21f6:	93 e0       	ldi	r25, 0x03	; 3
    21f8:	0e 94 c2 08 	call	0x1184	; 0x1184 <_ZN7Display6analogEhhhh>
    21fc:	cd e7       	ldi	r28, 0x7D	; 125
    21fe:	d7 e0       	ldi	r29, 0x07	; 7
    2200:	11 e4       	ldi	r17, 0x41	; 65
	for(uint8_t i=0;i<(bitsderrtc-3);i++){oled.draw_ASCI(rtc.msg_uhr[i],65+i*charsize,0*charhighte);}
    2202:	69 91       	ld	r22, Y+
    2204:	20 e0       	ldi	r18, 0x00	; 0
    2206:	41 2f       	mov	r20, r17
    2208:	86 e4       	ldi	r24, 0x46	; 70
    220a:	93 e0       	ldi	r25, 0x03	; 3
    220c:	0e 94 c8 07 	call	0xf90	; 0xf90 <_ZN7Display9draw_ASCIEhhh>
    2210:	1a 5f       	subi	r17, 0xFA	; 250
    2212:	1f 35       	cpi	r17, 0x5F	; 95
    2214:	b1 f7       	brne	.-20     	; 0x2202 <_Z14uhranzeigenminv+0x30>
    2216:	c5 e8       	ldi	r28, 0x85	; 133
    2218:	d7 e0       	ldi	r29, 0x07	; 7
    221a:	11 e4       	ldi	r17, 0x41	; 65
	for(uint8_t i=0;i<bitsderrtc;i++){oled.draw_ASCI(rtc.msg_dat[i],65+i*charsize,7*charhighte);}
    221c:	69 91       	ld	r22, Y+
    221e:	28 e3       	ldi	r18, 0x38	; 56
    2220:	41 2f       	mov	r20, r17
    2222:	86 e4       	ldi	r24, 0x46	; 70
    2224:	93 e0       	ldi	r25, 0x03	; 3
    2226:	0e 94 c8 07 	call	0xf90	; 0xf90 <_ZN7Display9draw_ASCIEhhh>
    222a:	1a 5f       	subi	r17, 0xFA	; 250
    222c:	11 37       	cpi	r17, 0x71	; 113
    222e:	b1 f7       	brne	.-20     	; 0x221c <_Z14uhranzeigenminv+0x4a>
	//show hours and minutes in big numbers
	oled.draw_number16x16(rtc.msg_uhr[0]-'0',70,1.66*charhighte);
    2230:	60 91 7d 07 	lds	r22, 0x077D
    2234:	60 53       	subi	r22, 0x30	; 48
    2236:	2d e0       	ldi	r18, 0x0D	; 13
    2238:	46 e4       	ldi	r20, 0x46	; 70
    223a:	86 e4       	ldi	r24, 0x46	; 70
    223c:	93 e0       	ldi	r25, 0x03	; 3
    223e:	0e 94 4c 08 	call	0x1098	; 0x1098 <_ZN7Display16draw_number16x16Ehhh>
	oled.draw_number16x16(rtc.msg_uhr[1]-'0',70+numbersmalsize,1.66*charhighte);
    2242:	60 91 7e 07 	lds	r22, 0x077E
    2246:	60 53       	subi	r22, 0x30	; 48
    2248:	2d e0       	ldi	r18, 0x0D	; 13
    224a:	46 e5       	ldi	r20, 0x56	; 86
    224c:	86 e4       	ldi	r24, 0x46	; 70
    224e:	93 e0       	ldi	r25, 0x03	; 3
    2250:	0e 94 4c 08 	call	0x1098	; 0x1098 <_ZN7Display16draw_number16x16Ehhh>
	oled.draw_number16x16(rtc.msg_uhr[3]-'0',70,2.33*charhighte+numbersmalhight);
    2254:	60 91 80 07 	lds	r22, 0x0780
    2258:	60 53       	subi	r22, 0x30	; 48
    225a:	22 e2       	ldi	r18, 0x22	; 34
    225c:	46 e4       	ldi	r20, 0x46	; 70
    225e:	86 e4       	ldi	r24, 0x46	; 70
    2260:	93 e0       	ldi	r25, 0x03	; 3
    2262:	0e 94 4c 08 	call	0x1098	; 0x1098 <_ZN7Display16draw_number16x16Ehhh>
	oled.draw_number16x16(rtc.msg_uhr[4]-'0',70+numbersmalsize,2.33*charhighte+numbersmalhight);
    2266:	60 91 81 07 	lds	r22, 0x0781
    226a:	60 53       	subi	r22, 0x30	; 48
    226c:	22 e2       	ldi	r18, 0x22	; 34
    226e:	46 e5       	ldi	r20, 0x56	; 86
    2270:	86 e4       	ldi	r24, 0x46	; 70
    2272:	93 e0       	ldi	r25, 0x03	; 3
    2274:	0e 94 4c 08 	call	0x1098	; 0x1098 <_ZN7Display16draw_number16x16Ehhh>
		//}
		//else{
			//oled.draw_number16x16(Buffer[i]-'0',70+i*numbersmalsize,3*charhighte);
		//}
	//}
}
    2278:	df 91       	pop	r29
    227a:	cf 91       	pop	r28
    227c:	1f 91       	pop	r17
    227e:	0f 91       	pop	r16
    2280:	08 95       	ret

00002282 <_Z13Weckeranzeigev>:

void Weckeranzeige(){
    2282:	1f 93       	push	r17
    2284:	cf 93       	push	r28
    2286:	df 93       	push	r29
	oled.clearFrame();
    2288:	86 e4       	ldi	r24, 0x46	; 70
    228a:	93 e0       	ldi	r25, 0x03	; 3
    228c:	0e 94 05 05 	call	0xa0a	; 0xa0a <_ZN7Display10clearFrameEv>
	bottom(1);
    2290:	81 e0       	ldi	r24, 0x01	; 1
    2292:	ba db       	rcall	.-2188   	; 0x1a08 <_Z6bottomh>
	header(1);
    2294:	81 e0       	ldi	r24, 0x01	; 1
    2296:	d7 da       	rcall	.-2642   	; 0x1846 <_Z6headerh>
	//Uhr
	oled.draw_number16x16(rtc.msg_uhr[0]-'0',5,1.66*charhighte);
    2298:	60 91 7d 07 	lds	r22, 0x077D
    229c:	60 53       	subi	r22, 0x30	; 48
    229e:	2d e0       	ldi	r18, 0x0D	; 13
    22a0:	45 e0       	ldi	r20, 0x05	; 5
    22a2:	86 e4       	ldi	r24, 0x46	; 70
    22a4:	93 e0       	ldi	r25, 0x03	; 3
    22a6:	0e 94 4c 08 	call	0x1098	; 0x1098 <_ZN7Display16draw_number16x16Ehhh>
	oled.draw_number16x16(rtc.msg_uhr[1]-'0',5+numbersmalsize,1.66*charhighte);
    22aa:	60 91 7e 07 	lds	r22, 0x077E
    22ae:	60 53       	subi	r22, 0x30	; 48
    22b0:	2d e0       	ldi	r18, 0x0D	; 13
    22b2:	45 e1       	ldi	r20, 0x15	; 21
    22b4:	86 e4       	ldi	r24, 0x46	; 70
    22b6:	93 e0       	ldi	r25, 0x03	; 3
    22b8:	0e 94 4c 08 	call	0x1098	; 0x1098 <_ZN7Display16draw_number16x16Ehhh>
	oled.draw_number16x16(rtc.msg_uhr[3]-'0',5,2.33*charhighte+numbersmalhight);
    22bc:	60 91 80 07 	lds	r22, 0x0780
    22c0:	60 53       	subi	r22, 0x30	; 48
    22c2:	22 e2       	ldi	r18, 0x22	; 34
    22c4:	45 e0       	ldi	r20, 0x05	; 5
    22c6:	86 e4       	ldi	r24, 0x46	; 70
    22c8:	93 e0       	ldi	r25, 0x03	; 3
    22ca:	0e 94 4c 08 	call	0x1098	; 0x1098 <_ZN7Display16draw_number16x16Ehhh>
	oled.draw_number16x16(rtc.msg_uhr[4]-'0',5+numbersmalsize,2.33*charhighte+numbersmalhight);
    22ce:	60 91 81 07 	lds	r22, 0x0781
    22d2:	60 53       	subi	r22, 0x30	; 48
    22d4:	22 e2       	ldi	r18, 0x22	; 34
    22d6:	45 e1       	ldi	r20, 0x15	; 21
    22d8:	86 e4       	ldi	r24, 0x46	; 70
    22da:	93 e0       	ldi	r25, 0x03	; 3
    22dc:	0e 94 4c 08 	call	0x1098	; 0x1098 <_ZN7Display16draw_number16x16Ehhh>
	
	//Weckerzeit
	oled.draw_number16x16(rtc.WStunden/10,70,1.66*charhighte);
    22e0:	c7 e9       	ldi	r28, 0x97	; 151
    22e2:	d7 e0       	ldi	r29, 0x07	; 7
    22e4:	68 81       	ld	r22, Y
    22e6:	1d ec       	ldi	r17, 0xCD	; 205
    22e8:	61 9f       	mul	r22, r17
    22ea:	61 2d       	mov	r22, r1
    22ec:	11 24       	eor	r1, r1
    22ee:	66 95       	lsr	r22
    22f0:	66 95       	lsr	r22
    22f2:	66 95       	lsr	r22
    22f4:	2d e0       	ldi	r18, 0x0D	; 13
    22f6:	46 e4       	ldi	r20, 0x46	; 70
    22f8:	86 e4       	ldi	r24, 0x46	; 70
    22fa:	93 e0       	ldi	r25, 0x03	; 3
    22fc:	0e 94 4c 08 	call	0x1098	; 0x1098 <_ZN7Display16draw_number16x16Ehhh>
	oled.draw_number16x16(rtc.WStunden%10,70+numbersmalsize,1.66*charhighte);
    2300:	68 81       	ld	r22, Y
    2302:	61 9f       	mul	r22, r17
    2304:	81 2d       	mov	r24, r1
    2306:	11 24       	eor	r1, r1
    2308:	86 95       	lsr	r24
    230a:	86 95       	lsr	r24
    230c:	86 95       	lsr	r24
    230e:	88 0f       	add	r24, r24
    2310:	98 2f       	mov	r25, r24
    2312:	99 0f       	add	r25, r25
    2314:	99 0f       	add	r25, r25
    2316:	89 0f       	add	r24, r25
    2318:	68 1b       	sub	r22, r24
    231a:	2d e0       	ldi	r18, 0x0D	; 13
    231c:	46 e5       	ldi	r20, 0x56	; 86
    231e:	86 e4       	ldi	r24, 0x46	; 70
    2320:	93 e0       	ldi	r25, 0x03	; 3
    2322:	0e 94 4c 08 	call	0x1098	; 0x1098 <_ZN7Display16draw_number16x16Ehhh>
	oled.draw_number16x16(rtc.WMinuten/10,70,2.33*charhighte+numbersmalhight);
    2326:	c6 e9       	ldi	r28, 0x96	; 150
    2328:	d7 e0       	ldi	r29, 0x07	; 7
    232a:	68 81       	ld	r22, Y
    232c:	61 9f       	mul	r22, r17
    232e:	61 2d       	mov	r22, r1
    2330:	11 24       	eor	r1, r1
    2332:	66 95       	lsr	r22
    2334:	66 95       	lsr	r22
    2336:	66 95       	lsr	r22
    2338:	22 e2       	ldi	r18, 0x22	; 34
    233a:	46 e4       	ldi	r20, 0x46	; 70
    233c:	86 e4       	ldi	r24, 0x46	; 70
    233e:	93 e0       	ldi	r25, 0x03	; 3
    2340:	0e 94 4c 08 	call	0x1098	; 0x1098 <_ZN7Display16draw_number16x16Ehhh>
	oled.draw_number16x16(rtc.WMinuten%10,70+numbersmalsize,2.33*charhighte+numbersmalhight);
    2344:	68 81       	ld	r22, Y
    2346:	61 9f       	mul	r22, r17
    2348:	11 2d       	mov	r17, r1
    234a:	11 24       	eor	r1, r1
    234c:	16 95       	lsr	r17
    234e:	16 95       	lsr	r17
    2350:	16 95       	lsr	r17
    2352:	11 0f       	add	r17, r17
    2354:	81 2f       	mov	r24, r17
    2356:	88 0f       	add	r24, r24
    2358:	88 0f       	add	r24, r24
    235a:	18 0f       	add	r17, r24
    235c:	61 1b       	sub	r22, r17
    235e:	22 e2       	ldi	r18, 0x22	; 34
    2360:	46 e5       	ldi	r20, 0x56	; 86
    2362:	86 e4       	ldi	r24, 0x46	; 70
    2364:	93 e0       	ldi	r25, 0x03	; 3
    2366:	0e 94 4c 08 	call	0x1098	; 0x1098 <_ZN7Display16draw_number16x16Ehhh>
	
	//Weckeraktiv Zeichen
	if ((rtc.interupts&(1<<Weckerein)))
    236a:	80 91 95 07 	lds	r24, 0x0795
    236e:	83 ff       	sbrs	r24, 3
    2370:	07 c0       	rjmp	.+14     	; 0x2380 <_Z13Weckeranzeigev+0xfe>
	{
		oled.draw_ASCI('o',0,0);
    2372:	20 e0       	ldi	r18, 0x00	; 0
    2374:	40 e0       	ldi	r20, 0x00	; 0
    2376:	6f e6       	ldi	r22, 0x6F	; 111
    2378:	86 e4       	ldi	r24, 0x46	; 70
    237a:	93 e0       	ldi	r25, 0x03	; 3
    237c:	0e 94 c8 07 	call	0xf90	; 0xf90 <_ZN7Display9draw_ASCIEhhh>
	}
	
	//Einstellungsmoeglichekeit
	if ((anzeige&(1<<Einstellungsflag)))
    2380:	80 91 29 03 	lds	r24, 0x0329
    2384:	83 ff       	sbrs	r24, 3
    2386:	09 c0       	rjmp	.+18     	; 0x239a <_Z13Weckeranzeigev+0x118>
	{
		oled.draw_ASCI(pos+'0',1*charsize,0*charhighte);
    2388:	60 91 28 03 	lds	r22, 0x0328
    238c:	60 5d       	subi	r22, 0xD0	; 208
    238e:	20 e0       	ldi	r18, 0x00	; 0
    2390:	46 e0       	ldi	r20, 0x06	; 6
    2392:	86 e4       	ldi	r24, 0x46	; 70
    2394:	93 e0       	ldi	r25, 0x03	; 3
    2396:	0e 94 c8 07 	call	0xf90	; 0xf90 <_ZN7Display9draw_ASCIEhhh>
	}
}
    239a:	df 91       	pop	r29
    239c:	cf 91       	pop	r28
    239e:	1f 91       	pop	r17
    23a0:	08 95       	ret

000023a2 <_Z12fahradschirmddddm>:

void fahradschirm(double winkelgeschw, double angle, double weite, double maxgeschwinsigkeit, uint32_t Zeit){
    23a2:	2f 92       	push	r2
    23a4:	3f 92       	push	r3
    23a6:	4f 92       	push	r4
    23a8:	5f 92       	push	r5
    23aa:	6f 92       	push	r6
    23ac:	7f 92       	push	r7
    23ae:	8f 92       	push	r8
    23b0:	9f 92       	push	r9
    23b2:	af 92       	push	r10
    23b4:	bf 92       	push	r11
    23b6:	cf 92       	push	r12
    23b8:	df 92       	push	r13
    23ba:	ef 92       	push	r14
    23bc:	ff 92       	push	r15
    23be:	0f 93       	push	r16
    23c0:	1f 93       	push	r17
    23c2:	cf 93       	push	r28
    23c4:	df 93       	push	r29
    23c6:	cd b7       	in	r28, 0x3d	; 61
    23c8:	de b7       	in	r29, 0x3e	; 62
    23ca:	62 97       	sbiw	r28, 0x12	; 18
    23cc:	0f b6       	in	r0, 0x3f	; 63
    23ce:	f8 94       	cli
    23d0:	de bf       	out	0x3e, r29	; 62
    23d2:	0f be       	out	0x3f, r0	; 63
    23d4:	cd bf       	out	0x3d, r28	; 61
    23d6:	76 2e       	mov	r7, r22
    23d8:	67 2e       	mov	r6, r23
    23da:	58 2e       	mov	r5, r24
    23dc:	49 2e       	mov	r4, r25
    23de:	82 2e       	mov	r8, r18
    23e0:	23 2e       	mov	r2, r19
    23e2:	94 2e       	mov	r9, r20
    23e4:	35 2e       	mov	r3, r21
    23e6:	eb 86       	std	Y+11, r14	; 0x0b
    23e8:	fc 86       	std	Y+12, r15	; 0x0c
    23ea:	0d 87       	std	Y+13, r16	; 0x0d
    23ec:	1e 87       	std	Y+14, r17	; 0x0e
    23ee:	2f a1       	ldd	r18, Y+39	; 0x27
    23f0:	2f 87       	std	Y+15, r18	; 0x0f
    23f2:	38 a5       	ldd	r19, Y+40	; 0x28
    23f4:	38 8b       	std	Y+16, r19	; 0x10
    23f6:	89 a5       	ldd	r24, Y+41	; 0x29
    23f8:	89 8b       	std	Y+17, r24	; 0x11
    23fa:	9a a5       	ldd	r25, Y+42	; 0x2a
    23fc:	9a 8b       	std	Y+18, r25	; 0x12
	char buffer[10];
	uint8_t buffersize=0;
	oled.clearFrame();
    23fe:	86 e4       	ldi	r24, 0x46	; 70
    2400:	93 e0       	ldi	r25, 0x03	; 3
    2402:	0e 94 05 05 	call	0xa0a	; 0xa0a <_ZN7Display10clearFrameEv>
	header(0);
    2406:	80 e0       	ldi	r24, 0x00	; 0
    2408:	1e da       	rcall	.-3012   	; 0x1846 <_Z6headerh>
	bottom(0);
    240a:	80 e0       	ldi	r24, 0x00	; 0
    240c:	fd da       	rcall	.-2566   	; 0x1a08 <_Z6bottomh>
	//Ausgabe der Geschwidigkeit
	buffersize=sprintf(buffer,"%3.1f",winkelgeschw);
    240e:	4f 92       	push	r4
    2410:	5f 92       	push	r5
    2412:	6f 92       	push	r6
    2414:	7f 92       	push	r7
    2416:	80 e2       	ldi	r24, 0x20	; 32
    2418:	92 e0       	ldi	r25, 0x02	; 2
    241a:	9f 93       	push	r25
    241c:	8f 93       	push	r24
    241e:	ce 01       	movw	r24, r28
    2420:	01 96       	adiw	r24, 0x01	; 1
    2422:	9f 93       	push	r25
    2424:	8f 93       	push	r24
    2426:	0e 94 ea 30 	call	0x61d4	; 0x61d4 <sprintf>
	for(uint8_t i=((SSD1306_WIDTH/numbersmalsize)-buffersize-1);i<((SSD1306_WIDTH/numbersmalsize)-1);i++){
    242a:	27 e0       	ldi	r18, 0x07	; 7
    242c:	02 2f       	mov	r16, r18
    242e:	08 1b       	sub	r16, r24
    2430:	0f b6       	in	r0, 0x3f	; 63
    2432:	f8 94       	cli
    2434:	de bf       	out	0x3e, r29	; 62
    2436:	0f be       	out	0x3f, r0	; 63
    2438:	cd bf       	out	0x3d, r28	; 61
    243a:	07 30       	cpi	r16, 0x07	; 7
    243c:	18 f5       	brcc	.+70     	; 0x2484 <_Z12fahradschirmddddm+0xe2>
    243e:	10 2f       	mov	r17, r16
    2440:	12 95       	swap	r17
    2442:	10 7f       	andi	r17, 0xF0	; 240
		if(buffer[i-((SSD1306_WIDTH/numbersmalsize)-buffersize-1)]=='.'){
    2444:	7c 01       	movw	r14, r24
    2446:	ff 24       	eor	r15, r15
    2448:	e1 e0       	ldi	r30, 0x01	; 1
    244a:	f0 e0       	ldi	r31, 0x00	; 0
    244c:	ec 0f       	add	r30, r28
    244e:	fd 1f       	adc	r31, r29
    2450:	e0 0f       	add	r30, r16
    2452:	f1 1d       	adc	r31, r1
    2454:	ee 0d       	add	r30, r14
    2456:	ff 1d       	adc	r31, r15
    2458:	37 97       	sbiw	r30, 0x07	; 7
    245a:	60 81       	ld	r22, Z
    245c:	6e 32       	cpi	r22, 0x2E	; 46
    245e:	39 f4       	brne	.+14     	; 0x246e <_Z12fahradschirmddddm+0xcc>
			oled.draw_ASCI(buffer[i-((SSD1306_WIDTH/numbersmalsize)-buffersize-1)],i*numbersmalsize,4*charhighte);
    2460:	20 e2       	ldi	r18, 0x20	; 32
    2462:	41 2f       	mov	r20, r17
    2464:	86 e4       	ldi	r24, 0x46	; 70
    2466:	93 e0       	ldi	r25, 0x03	; 3
    2468:	0e 94 c8 07 	call	0xf90	; 0xf90 <_ZN7Display9draw_ASCIEhhh>
    246c:	07 c0       	rjmp	.+14     	; 0x247c <_Z12fahradschirmddddm+0xda>
		}
		else{
			oled.draw_number16x16(buffer[i-((SSD1306_WIDTH/numbersmalsize)-buffersize-1)]-'0',i*numbersmalsize,3*charhighte);
    246e:	60 53       	subi	r22, 0x30	; 48
    2470:	28 e1       	ldi	r18, 0x18	; 24
    2472:	41 2f       	mov	r20, r17
    2474:	86 e4       	ldi	r24, 0x46	; 70
    2476:	93 e0       	ldi	r25, 0x03	; 3
    2478:	0e 94 4c 08 	call	0x1098	; 0x1098 <_ZN7Display16draw_number16x16Ehhh>
	oled.clearFrame();
	header(0);
	bottom(0);
	//Ausgabe der Geschwidigkeit
	buffersize=sprintf(buffer,"%3.1f",winkelgeschw);
	for(uint8_t i=((SSD1306_WIDTH/numbersmalsize)-buffersize-1);i<((SSD1306_WIDTH/numbersmalsize)-1);i++){
    247c:	0f 5f       	subi	r16, 0xFF	; 255
    247e:	10 5f       	subi	r17, 0xF0	; 240
    2480:	07 30       	cpi	r16, 0x07	; 7
    2482:	11 f7       	brne	.-60     	; 0x2448 <_Z12fahradschirmddddm+0xa6>
		}
		else{
			oled.draw_number16x16(buffer[i-((SSD1306_WIDTH/numbersmalsize)-buffersize-1)]-'0',i*numbersmalsize,3*charhighte);
		}
	}
	oled.draw_ASCI('k',((SSD1306_WIDTH/charsize-2)*charsize),3*charhighte);
    2484:	28 e1       	ldi	r18, 0x18	; 24
    2486:	42 e7       	ldi	r20, 0x72	; 114
    2488:	6b e6       	ldi	r22, 0x6B	; 107
    248a:	86 e4       	ldi	r24, 0x46	; 70
    248c:	93 e0       	ldi	r25, 0x03	; 3
    248e:	0e 94 c8 07 	call	0xf90	; 0xf90 <_ZN7Display9draw_ASCIEhhh>
	oled.draw_ASCI('m',((SSD1306_WIDTH/charsize-1)*charsize),3*charhighte);
    2492:	28 e1       	ldi	r18, 0x18	; 24
    2494:	48 e7       	ldi	r20, 0x78	; 120
    2496:	6d e6       	ldi	r22, 0x6D	; 109
    2498:	86 e4       	ldi	r24, 0x46	; 70
    249a:	93 e0       	ldi	r25, 0x03	; 3
    249c:	0e 94 c8 07 	call	0xf90	; 0xf90 <_ZN7Display9draw_ASCIEhhh>
	oled.draw_ASCI('h',((SSD1306_WIDTH/charsize-2)*charsize),4*charhighte);
    24a0:	20 e2       	ldi	r18, 0x20	; 32
    24a2:	42 e7       	ldi	r20, 0x72	; 114
    24a4:	68 e6       	ldi	r22, 0x68	; 104
    24a6:	86 e4       	ldi	r24, 0x46	; 70
    24a8:	93 e0       	ldi	r25, 0x03	; 3
    24aa:	0e 94 c8 07 	call	0xf90	; 0xf90 <_ZN7Display9draw_ASCIEhhh>
	//winkelausgabe
	buffersize=sprintf(buffer,"%3.1f",angle);
    24ae:	3f 92       	push	r3
    24b0:	9f 92       	push	r9
    24b2:	2f 92       	push	r2
    24b4:	8f 92       	push	r8
    24b6:	80 e2       	ldi	r24, 0x20	; 32
    24b8:	92 e0       	ldi	r25, 0x02	; 2
    24ba:	9f 93       	push	r25
    24bc:	8f 93       	push	r24
    24be:	ce 01       	movw	r24, r28
    24c0:	01 96       	adiw	r24, 0x01	; 1
    24c2:	9f 93       	push	r25
    24c4:	8f 93       	push	r24
    24c6:	0e 94 ea 30 	call	0x61d4	; 0x61d4 <sprintf>
    24ca:	48 2e       	mov	r4, r24
	for (uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,7*charhighte);}
    24cc:	0f b6       	in	r0, 0x3f	; 63
    24ce:	f8 94       	cli
    24d0:	de bf       	out	0x3e, r29	; 62
    24d2:	0f be       	out	0x3f, r0	; 63
    24d4:	cd bf       	out	0x3d, r28	; 61
    24d6:	88 23       	and	r24, r24
    24d8:	99 f0       	breq	.+38     	; 0x2500 <_Z12fahradschirmddddm+0x15e>
    24da:	ce 01       	movw	r24, r28
    24dc:	01 96       	adiw	r24, 0x01	; 1
    24de:	3c 01       	movw	r6, r24
    24e0:	7c 01       	movw	r14, r24
    24e2:	10 e0       	ldi	r17, 0x00	; 0
    24e4:	f7 01       	movw	r30, r14
    24e6:	61 91       	ld	r22, Z+
    24e8:	7f 01       	movw	r14, r30
    24ea:	28 e3       	ldi	r18, 0x38	; 56
    24ec:	41 2f       	mov	r20, r17
    24ee:	86 e4       	ldi	r24, 0x46	; 70
    24f0:	93 e0       	ldi	r25, 0x03	; 3
    24f2:	0e 94 c8 07 	call	0xf90	; 0xf90 <_ZN7Display9draw_ASCIEhhh>
    24f6:	1a 5f       	subi	r17, 0xFA	; 250
    24f8:	8e 2d       	mov	r24, r14
    24fa:	86 19       	sub	r24, r6
    24fc:	84 15       	cp	r24, r4
    24fe:	90 f3       	brcs	.-28     	; 0x24e4 <_Z12fahradschirmddddm+0x142>
	anzeige_kleinenadel(31,31,angle);
    2500:	28 2d       	mov	r18, r8
    2502:	32 2d       	mov	r19, r2
    2504:	49 2d       	mov	r20, r9
    2506:	53 2d       	mov	r21, r3
    2508:	6f e1       	ldi	r22, 0x1F	; 31
    250a:	8f e1       	ldi	r24, 0x1F	; 31
    250c:	71 db       	rcall	.-2334   	; 0x1bf0 <_Z19anzeige_kleinenadelhhf>
	//anzeige der gesammtstrecke
	buffersize=sprintf(buffer,"%.1fm",weite);
    250e:	fe 85       	ldd	r31, Y+14	; 0x0e
    2510:	ff 93       	push	r31
    2512:	2d 85       	ldd	r18, Y+13	; 0x0d
    2514:	2f 93       	push	r18
    2516:	3c 85       	ldd	r19, Y+12	; 0x0c
    2518:	3f 93       	push	r19
    251a:	8b 85       	ldd	r24, Y+11	; 0x0b
    251c:	8f 93       	push	r24
    251e:	86 e2       	ldi	r24, 0x26	; 38
    2520:	92 e0       	ldi	r25, 0x02	; 2
    2522:	9f 93       	push	r25
    2524:	8f 93       	push	r24
    2526:	ce 01       	movw	r24, r28
    2528:	01 96       	adiw	r24, 0x01	; 1
    252a:	9f 93       	push	r25
    252c:	8f 93       	push	r24
    252e:	0e 94 ea 30 	call	0x61d4	; 0x61d4 <sprintf>
    2532:	88 2e       	mov	r8, r24
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize+70,2*charhighte);}
    2534:	0f b6       	in	r0, 0x3f	; 63
    2536:	f8 94       	cli
    2538:	de bf       	out	0x3e, r29	; 62
    253a:	0f be       	out	0x3f, r0	; 63
    253c:	cd bf       	out	0x3d, r28	; 61
    253e:	88 23       	and	r24, r24
    2540:	c1 f0       	breq	.+48     	; 0x2572 <_Z12fahradschirmddddm+0x1d0>
    2542:	9e 01       	movw	r18, r28
    2544:	2f 5f       	subi	r18, 0xFF	; 255
    2546:	3f 4f       	sbci	r19, 0xFF	; 255
    2548:	79 01       	movw	r14, r18
    254a:	89 01       	movw	r16, r18
    254c:	0f 2e       	mov	r0, r31
    254e:	f6 e4       	ldi	r31, 0x46	; 70
    2550:	9f 2e       	mov	r9, r31
    2552:	f0 2d       	mov	r31, r0
    2554:	f8 01       	movw	r30, r16
    2556:	61 91       	ld	r22, Z+
    2558:	8f 01       	movw	r16, r30
    255a:	20 e1       	ldi	r18, 0x10	; 16
    255c:	49 2d       	mov	r20, r9
    255e:	86 e4       	ldi	r24, 0x46	; 70
    2560:	93 e0       	ldi	r25, 0x03	; 3
    2562:	0e 94 c8 07 	call	0xf90	; 0xf90 <_ZN7Display9draw_ASCIEhhh>
    2566:	f6 e0       	ldi	r31, 0x06	; 6
    2568:	9f 0e       	add	r9, r31
    256a:	90 2f       	mov	r25, r16
    256c:	9e 19       	sub	r25, r14
    256e:	98 15       	cp	r25, r8
    2570:	88 f3       	brcs	.-30     	; 0x2554 <_Z12fahradschirmddddm+0x1b2>
	//anzeige der max geschwindigkeit
	buffersize=sprintf(buffer,"%.1fkm/h",maxgeschwinsigkeit);
    2572:	df 92       	push	r13
    2574:	cf 92       	push	r12
    2576:	bf 92       	push	r11
    2578:	af 92       	push	r10
    257a:	8c e2       	ldi	r24, 0x2C	; 44
    257c:	92 e0       	ldi	r25, 0x02	; 2
    257e:	9f 93       	push	r25
    2580:	8f 93       	push	r24
    2582:	ce 01       	movw	r24, r28
    2584:	01 96       	adiw	r24, 0x01	; 1
    2586:	9f 93       	push	r25
    2588:	8f 93       	push	r24
    258a:	0e 94 ea 30 	call	0x61d4	; 0x61d4 <sprintf>
    258e:	c8 2e       	mov	r12, r24
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize+70,5*charhighte);}
    2590:	0f b6       	in	r0, 0x3f	; 63
    2592:	f8 94       	cli
    2594:	de bf       	out	0x3e, r29	; 62
    2596:	0f be       	out	0x3f, r0	; 63
    2598:	cd bf       	out	0x3d, r28	; 61
    259a:	88 23       	and	r24, r24
    259c:	b9 f0       	breq	.+46     	; 0x25cc <_Z12fahradschirmddddm+0x22a>
    259e:	ce 01       	movw	r24, r28
    25a0:	01 96       	adiw	r24, 0x01	; 1
    25a2:	7c 01       	movw	r14, r24
    25a4:	8c 01       	movw	r16, r24
    25a6:	0f 2e       	mov	r0, r31
    25a8:	f6 e4       	ldi	r31, 0x46	; 70
    25aa:	df 2e       	mov	r13, r31
    25ac:	f0 2d       	mov	r31, r0
    25ae:	f8 01       	movw	r30, r16
    25b0:	61 91       	ld	r22, Z+
    25b2:	8f 01       	movw	r16, r30
    25b4:	28 e2       	ldi	r18, 0x28	; 40
    25b6:	4d 2d       	mov	r20, r13
    25b8:	86 e4       	ldi	r24, 0x46	; 70
    25ba:	93 e0       	ldi	r25, 0x03	; 3
    25bc:	0e 94 c8 07 	call	0xf90	; 0xf90 <_ZN7Display9draw_ASCIEhhh>
    25c0:	f6 e0       	ldi	r31, 0x06	; 6
    25c2:	df 0e       	add	r13, r31
    25c4:	90 2f       	mov	r25, r16
    25c6:	9e 19       	sub	r25, r14
    25c8:	9c 15       	cp	r25, r12
    25ca:	88 f3       	brcs	.-30     	; 0x25ae <_Z12fahradschirmddddm+0x20c>
	//anzeige der Fahrtzeit
	buffersize=sprintf(buffer,"%lus",Zeit);
    25cc:	2a 89       	ldd	r18, Y+18	; 0x12
    25ce:	2f 93       	push	r18
    25d0:	39 89       	ldd	r19, Y+17	; 0x11
    25d2:	3f 93       	push	r19
    25d4:	88 89       	ldd	r24, Y+16	; 0x10
    25d6:	8f 93       	push	r24
    25d8:	9f 85       	ldd	r25, Y+15	; 0x0f
    25da:	9f 93       	push	r25
    25dc:	85 e3       	ldi	r24, 0x35	; 53
    25de:	92 e0       	ldi	r25, 0x02	; 2
    25e0:	9f 93       	push	r25
    25e2:	8f 93       	push	r24
    25e4:	ce 01       	movw	r24, r28
    25e6:	01 96       	adiw	r24, 0x01	; 1
    25e8:	9f 93       	push	r25
    25ea:	8f 93       	push	r24
    25ec:	0e 94 ea 30 	call	0x61d4	; 0x61d4 <sprintf>
    25f0:	c8 2e       	mov	r12, r24
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize+70,6*charhighte);}
    25f2:	0f b6       	in	r0, 0x3f	; 63
    25f4:	f8 94       	cli
    25f6:	de bf       	out	0x3e, r29	; 62
    25f8:	0f be       	out	0x3f, r0	; 63
    25fa:	cd bf       	out	0x3d, r28	; 61
    25fc:	88 23       	and	r24, r24
    25fe:	c1 f0       	breq	.+48     	; 0x2630 <_Z12fahradschirmddddm+0x28e>
    2600:	9e 01       	movw	r18, r28
    2602:	2f 5f       	subi	r18, 0xFF	; 255
    2604:	3f 4f       	sbci	r19, 0xFF	; 255
    2606:	79 01       	movw	r14, r18
    2608:	89 01       	movw	r16, r18
    260a:	0f 2e       	mov	r0, r31
    260c:	f6 e4       	ldi	r31, 0x46	; 70
    260e:	df 2e       	mov	r13, r31
    2610:	f0 2d       	mov	r31, r0
    2612:	f8 01       	movw	r30, r16
    2614:	61 91       	ld	r22, Z+
    2616:	8f 01       	movw	r16, r30
    2618:	20 e3       	ldi	r18, 0x30	; 48
    261a:	4d 2d       	mov	r20, r13
    261c:	86 e4       	ldi	r24, 0x46	; 70
    261e:	93 e0       	ldi	r25, 0x03	; 3
    2620:	0e 94 c8 07 	call	0xf90	; 0xf90 <_ZN7Display9draw_ASCIEhhh>
    2624:	f6 e0       	ldi	r31, 0x06	; 6
    2626:	df 0e       	add	r13, r31
    2628:	90 2f       	mov	r25, r16
    262a:	9e 19       	sub	r25, r14
    262c:	9c 15       	cp	r25, r12
    262e:	88 f3       	brcs	.-30     	; 0x2612 <_Z12fahradschirmddddm+0x270>
}
    2630:	62 96       	adiw	r28, 0x12	; 18
    2632:	0f b6       	in	r0, 0x3f	; 63
    2634:	f8 94       	cli
    2636:	de bf       	out	0x3e, r29	; 62
    2638:	0f be       	out	0x3f, r0	; 63
    263a:	cd bf       	out	0x3d, r28	; 61
    263c:	df 91       	pop	r29
    263e:	cf 91       	pop	r28
    2640:	1f 91       	pop	r17
    2642:	0f 91       	pop	r16
    2644:	ff 90       	pop	r15
    2646:	ef 90       	pop	r14
    2648:	df 90       	pop	r13
    264a:	cf 90       	pop	r12
    264c:	bf 90       	pop	r11
    264e:	af 90       	pop	r10
    2650:	9f 90       	pop	r9
    2652:	8f 90       	pop	r8
    2654:	7f 90       	pop	r7
    2656:	6f 90       	pop	r6
    2658:	5f 90       	pop	r5
    265a:	4f 90       	pop	r4
    265c:	3f 90       	pop	r3
    265e:	2f 90       	pop	r2
    2660:	08 95       	ret

00002662 <_Z14Gaineinstellenv>:

void Gaineinstellen(){
    2662:	cf 92       	push	r12
    2664:	df 92       	push	r13
    2666:	ef 92       	push	r14
    2668:	ff 92       	push	r15
    266a:	0f 93       	push	r16
    266c:	1f 93       	push	r17
    266e:	cf 93       	push	r28
    2670:	df 93       	push	r29
    2672:	cd b7       	in	r28, 0x3d	; 61
    2674:	de b7       	in	r29, 0x3e	; 62
    2676:	64 97       	sbiw	r28, 0x14	; 20
    2678:	0f b6       	in	r0, 0x3f	; 63
    267a:	f8 94       	cli
    267c:	de bf       	out	0x3e, r29	; 62
    267e:	0f be       	out	0x3f, r0	; 63
    2680:	cd bf       	out	0x3d, r28	; 61
	char buffer[20];
	uint8_t buffersize=0;

	oled.clearFrame();
    2682:	86 e4       	ldi	r24, 0x46	; 70
    2684:	93 e0       	ldi	r25, 0x03	; 3
    2686:	0e 94 05 05 	call	0xa0a	; 0xa0a <_ZN7Display10clearFrameEv>
	buffersize=sprintf(buffer,"1: 1370");
    268a:	88 e0       	ldi	r24, 0x08	; 8
    268c:	ea e3       	ldi	r30, 0x3A	; 58
    268e:	f2 e0       	ldi	r31, 0x02	; 2
    2690:	8e 01       	movw	r16, r28
    2692:	0f 5f       	subi	r16, 0xFF	; 255
    2694:	1f 4f       	sbci	r17, 0xFF	; 255
    2696:	d8 01       	movw	r26, r16
    2698:	01 90       	ld	r0, Z+
    269a:	0d 92       	st	X+, r0
    269c:	8a 95       	dec	r24
    269e:	e1 f7       	brne	.-8      	; 0x2698 <_Z14Gaineinstellenv+0x36>
    26a0:	e0 2e       	mov	r14, r16
    26a2:	f1 2e       	mov	r15, r17
    26a4:	68 01       	movw	r12, r16
    26a6:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,0*charhighte);}
    26a8:	f6 01       	movw	r30, r12
    26aa:	61 91       	ld	r22, Z+
    26ac:	6f 01       	movw	r12, r30
    26ae:	20 e0       	ldi	r18, 0x00	; 0
    26b0:	41 2f       	mov	r20, r17
    26b2:	86 e4       	ldi	r24, 0x46	; 70
    26b4:	93 e0       	ldi	r25, 0x03	; 3
    26b6:	0e 94 c8 07 	call	0xf90	; 0xf90 <_ZN7Display9draw_ASCIEhhh>
    26ba:	1a 5f       	subi	r17, 0xFA	; 250
    26bc:	1a 32       	cpi	r17, 0x2A	; 42
    26be:	a1 f7       	brne	.-24     	; 0x26a8 <_Z14Gaineinstellenv+0x46>
	buffersize=sprintf(buffer,"2: 1090");
    26c0:	88 e0       	ldi	r24, 0x08	; 8
    26c2:	e2 e4       	ldi	r30, 0x42	; 66
    26c4:	f2 e0       	ldi	r31, 0x02	; 2
    26c6:	de 01       	movw	r26, r28
    26c8:	11 96       	adiw	r26, 0x01	; 1
    26ca:	01 90       	ld	r0, Z+
    26cc:	0d 92       	st	X+, r0
    26ce:	8a 95       	dec	r24
    26d0:	e1 f7       	brne	.-8      	; 0x26ca <_Z14Gaineinstellenv+0x68>
    26d2:	ce 2c       	mov	r12, r14
    26d4:	df 2c       	mov	r13, r15
    26d6:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,1*charhighte);}
    26d8:	f6 01       	movw	r30, r12
    26da:	61 91       	ld	r22, Z+
    26dc:	6f 01       	movw	r12, r30
    26de:	28 e0       	ldi	r18, 0x08	; 8
    26e0:	41 2f       	mov	r20, r17
    26e2:	86 e4       	ldi	r24, 0x46	; 70
    26e4:	93 e0       	ldi	r25, 0x03	; 3
    26e6:	0e 94 c8 07 	call	0xf90	; 0xf90 <_ZN7Display9draw_ASCIEhhh>
    26ea:	1a 5f       	subi	r17, 0xFA	; 250
    26ec:	1a 32       	cpi	r17, 0x2A	; 42
    26ee:	a1 f7       	brne	.-24     	; 0x26d8 <_Z14Gaineinstellenv+0x76>
	buffersize=sprintf(buffer,"3:  820");
    26f0:	88 e0       	ldi	r24, 0x08	; 8
    26f2:	ea e4       	ldi	r30, 0x4A	; 74
    26f4:	f2 e0       	ldi	r31, 0x02	; 2
    26f6:	de 01       	movw	r26, r28
    26f8:	11 96       	adiw	r26, 0x01	; 1
    26fa:	01 90       	ld	r0, Z+
    26fc:	0d 92       	st	X+, r0
    26fe:	8a 95       	dec	r24
    2700:	e1 f7       	brne	.-8      	; 0x26fa <_Z14Gaineinstellenv+0x98>
    2702:	ce 2c       	mov	r12, r14
    2704:	df 2c       	mov	r13, r15
    2706:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,2*charhighte);}
    2708:	f6 01       	movw	r30, r12
    270a:	61 91       	ld	r22, Z+
    270c:	6f 01       	movw	r12, r30
    270e:	20 e1       	ldi	r18, 0x10	; 16
    2710:	41 2f       	mov	r20, r17
    2712:	86 e4       	ldi	r24, 0x46	; 70
    2714:	93 e0       	ldi	r25, 0x03	; 3
    2716:	0e 94 c8 07 	call	0xf90	; 0xf90 <_ZN7Display9draw_ASCIEhhh>
    271a:	1a 5f       	subi	r17, 0xFA	; 250
    271c:	1a 32       	cpi	r17, 0x2A	; 42
    271e:	a1 f7       	brne	.-24     	; 0x2708 <_Z14Gaineinstellenv+0xa6>
	buffersize=sprintf(buffer,"4:  660");
    2720:	88 e0       	ldi	r24, 0x08	; 8
    2722:	e2 e5       	ldi	r30, 0x52	; 82
    2724:	f2 e0       	ldi	r31, 0x02	; 2
    2726:	de 01       	movw	r26, r28
    2728:	11 96       	adiw	r26, 0x01	; 1
    272a:	01 90       	ld	r0, Z+
    272c:	0d 92       	st	X+, r0
    272e:	8a 95       	dec	r24
    2730:	e1 f7       	brne	.-8      	; 0x272a <_Z14Gaineinstellenv+0xc8>
    2732:	ce 2c       	mov	r12, r14
    2734:	df 2c       	mov	r13, r15
    2736:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,3*charhighte);}
    2738:	f6 01       	movw	r30, r12
    273a:	61 91       	ld	r22, Z+
    273c:	6f 01       	movw	r12, r30
    273e:	28 e1       	ldi	r18, 0x18	; 24
    2740:	41 2f       	mov	r20, r17
    2742:	86 e4       	ldi	r24, 0x46	; 70
    2744:	93 e0       	ldi	r25, 0x03	; 3
    2746:	0e 94 c8 07 	call	0xf90	; 0xf90 <_ZN7Display9draw_ASCIEhhh>
    274a:	1a 5f       	subi	r17, 0xFA	; 250
    274c:	1a 32       	cpi	r17, 0x2A	; 42
    274e:	a1 f7       	brne	.-24     	; 0x2738 <_Z14Gaineinstellenv+0xd6>
	buffersize=sprintf(buffer,"5:  440");
    2750:	88 e0       	ldi	r24, 0x08	; 8
    2752:	ea e5       	ldi	r30, 0x5A	; 90
    2754:	f2 e0       	ldi	r31, 0x02	; 2
    2756:	de 01       	movw	r26, r28
    2758:	11 96       	adiw	r26, 0x01	; 1
    275a:	01 90       	ld	r0, Z+
    275c:	0d 92       	st	X+, r0
    275e:	8a 95       	dec	r24
    2760:	e1 f7       	brne	.-8      	; 0x275a <_Z14Gaineinstellenv+0xf8>
    2762:	ce 2c       	mov	r12, r14
    2764:	df 2c       	mov	r13, r15
    2766:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,4*charhighte);}
    2768:	f6 01       	movw	r30, r12
    276a:	61 91       	ld	r22, Z+
    276c:	6f 01       	movw	r12, r30
    276e:	20 e2       	ldi	r18, 0x20	; 32
    2770:	41 2f       	mov	r20, r17
    2772:	86 e4       	ldi	r24, 0x46	; 70
    2774:	93 e0       	ldi	r25, 0x03	; 3
    2776:	0e 94 c8 07 	call	0xf90	; 0xf90 <_ZN7Display9draw_ASCIEhhh>
    277a:	1a 5f       	subi	r17, 0xFA	; 250
    277c:	1a 32       	cpi	r17, 0x2A	; 42
    277e:	a1 f7       	brne	.-24     	; 0x2768 <_Z14Gaineinstellenv+0x106>
	buffersize=sprintf(buffer,"6:  390");
    2780:	88 e0       	ldi	r24, 0x08	; 8
    2782:	e2 e6       	ldi	r30, 0x62	; 98
    2784:	f2 e0       	ldi	r31, 0x02	; 2
    2786:	de 01       	movw	r26, r28
    2788:	11 96       	adiw	r26, 0x01	; 1
    278a:	01 90       	ld	r0, Z+
    278c:	0d 92       	st	X+, r0
    278e:	8a 95       	dec	r24
    2790:	e1 f7       	brne	.-8      	; 0x278a <_Z14Gaineinstellenv+0x128>
    2792:	ce 2c       	mov	r12, r14
    2794:	df 2c       	mov	r13, r15
    2796:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,5*charhighte);}
    2798:	f6 01       	movw	r30, r12
    279a:	61 91       	ld	r22, Z+
    279c:	6f 01       	movw	r12, r30
    279e:	28 e2       	ldi	r18, 0x28	; 40
    27a0:	41 2f       	mov	r20, r17
    27a2:	86 e4       	ldi	r24, 0x46	; 70
    27a4:	93 e0       	ldi	r25, 0x03	; 3
    27a6:	0e 94 c8 07 	call	0xf90	; 0xf90 <_ZN7Display9draw_ASCIEhhh>
    27aa:	1a 5f       	subi	r17, 0xFA	; 250
    27ac:	1a 32       	cpi	r17, 0x2A	; 42
    27ae:	a1 f7       	brne	.-24     	; 0x2798 <_Z14Gaineinstellenv+0x136>
	buffersize=sprintf(buffer,"7:  330");
    27b0:	88 e0       	ldi	r24, 0x08	; 8
    27b2:	ea e6       	ldi	r30, 0x6A	; 106
    27b4:	f2 e0       	ldi	r31, 0x02	; 2
    27b6:	de 01       	movw	r26, r28
    27b8:	11 96       	adiw	r26, 0x01	; 1
    27ba:	01 90       	ld	r0, Z+
    27bc:	0d 92       	st	X+, r0
    27be:	8a 95       	dec	r24
    27c0:	e1 f7       	brne	.-8      	; 0x27ba <_Z14Gaineinstellenv+0x158>
    27c2:	ce 2c       	mov	r12, r14
    27c4:	df 2c       	mov	r13, r15
    27c6:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,6*charhighte);}
    27c8:	f6 01       	movw	r30, r12
    27ca:	61 91       	ld	r22, Z+
    27cc:	6f 01       	movw	r12, r30
    27ce:	20 e3       	ldi	r18, 0x30	; 48
    27d0:	41 2f       	mov	r20, r17
    27d2:	86 e4       	ldi	r24, 0x46	; 70
    27d4:	93 e0       	ldi	r25, 0x03	; 3
    27d6:	0e 94 c8 07 	call	0xf90	; 0xf90 <_ZN7Display9draw_ASCIEhhh>
    27da:	1a 5f       	subi	r17, 0xFA	; 250
    27dc:	1a 32       	cpi	r17, 0x2A	; 42
    27de:	a1 f7       	brne	.-24     	; 0x27c8 <_Z14Gaineinstellenv+0x166>
	buffersize=sprintf(buffer,"8:  230");
    27e0:	88 e0       	ldi	r24, 0x08	; 8
    27e2:	e2 e7       	ldi	r30, 0x72	; 114
    27e4:	f2 e0       	ldi	r31, 0x02	; 2
    27e6:	de 01       	movw	r26, r28
    27e8:	11 96       	adiw	r26, 0x01	; 1
    27ea:	01 90       	ld	r0, Z+
    27ec:	0d 92       	st	X+, r0
    27ee:	8a 95       	dec	r24
    27f0:	e1 f7       	brne	.-8      	; 0x27ea <_Z14Gaineinstellenv+0x188>
    27f2:	ce 2c       	mov	r12, r14
    27f4:	df 2c       	mov	r13, r15
    27f6:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,7*charhighte);}
    27f8:	f6 01       	movw	r30, r12
    27fa:	61 91       	ld	r22, Z+
    27fc:	6f 01       	movw	r12, r30
    27fe:	28 e3       	ldi	r18, 0x38	; 56
    2800:	41 2f       	mov	r20, r17
    2802:	86 e4       	ldi	r24, 0x46	; 70
    2804:	93 e0       	ldi	r25, 0x03	; 3
    2806:	0e 94 c8 07 	call	0xf90	; 0xf90 <_ZN7Display9draw_ASCIEhhh>
    280a:	1a 5f       	subi	r17, 0xFA	; 250
    280c:	1a 32       	cpi	r17, 0x2A	; 42
    280e:	a1 f7       	brne	.-24     	; 0x27f8 <_Z14Gaineinstellenv+0x196>
}
    2810:	64 96       	adiw	r28, 0x14	; 20
    2812:	0f b6       	in	r0, 0x3f	; 63
    2814:	f8 94       	cli
    2816:	de bf       	out	0x3e, r29	; 62
    2818:	0f be       	out	0x3f, r0	; 63
    281a:	cd bf       	out	0x3d, r28	; 61
    281c:	df 91       	pop	r29
    281e:	cf 91       	pop	r28
    2820:	1f 91       	pop	r17
    2822:	0f 91       	pop	r16
    2824:	ff 90       	pop	r15
    2826:	ef 90       	pop	r14
    2828:	df 90       	pop	r13
    282a:	cf 90       	pop	r12
    282c:	08 95       	ret

0000282e <_Z15anzeige_kompassd>:

void anzeige_kompass(double winkel){
    282e:	9f 92       	push	r9
    2830:	af 92       	push	r10
    2832:	bf 92       	push	r11
    2834:	cf 92       	push	r12
    2836:	df 92       	push	r13
    2838:	ef 92       	push	r14
    283a:	ff 92       	push	r15
    283c:	0f 93       	push	r16
    283e:	1f 93       	push	r17
    2840:	cf 93       	push	r28
    2842:	df 93       	push	r29
    2844:	cd b7       	in	r28, 0x3d	; 61
    2846:	de b7       	in	r29, 0x3e	; 62
    2848:	64 97       	sbiw	r28, 0x14	; 20
    284a:	0f b6       	in	r0, 0x3f	; 63
    284c:	f8 94       	cli
    284e:	de bf       	out	0x3e, r29	; 62
    2850:	0f be       	out	0x3f, r0	; 63
    2852:	cd bf       	out	0x3d, r28	; 61
    2854:	c6 2e       	mov	r12, r22
    2856:	d7 2e       	mov	r13, r23
    2858:	e8 2e       	mov	r14, r24
    285a:	f9 2e       	mov	r15, r25
	Baro.READ_Pressure_once();
    285c:	8f e2       	ldi	r24, 0x2F	; 47
    285e:	93 e0       	ldi	r25, 0x03	; 3
    2860:	0e 94 4a 26 	call	0x4c94	; 0x4c94 <_ZN8Pressure18READ_Pressure_onceEv>
	Baro.READ_Temperature();
    2864:	8f e2       	ldi	r24, 0x2F	; 47
    2866:	93 e0       	ldi	r25, 0x03	; 3
    2868:	0e 94 c2 26 	call	0x4d84	; 0x4d84 <_ZN8Pressure16READ_TemperatureEv>
	oled.clearFrame();
    286c:	86 e4       	ldi	r24, 0x46	; 70
    286e:	93 e0       	ldi	r25, 0x03	; 3
    2870:	0e 94 05 05 	call	0xa0a	; 0xa0a <_ZN7Display10clearFrameEv>
    2874:	0f 2e       	mov	r0, r31
    2876:	fd e7       	ldi	r31, 0x7D	; 125
    2878:	af 2e       	mov	r10, r31
    287a:	f7 e0       	ldi	r31, 0x07	; 7
    287c:	bf 2e       	mov	r11, r31
    287e:	f0 2d       	mov	r31, r0
    2880:	11 e4       	ldi	r17, 0x41	; 65
	char buffer[20];
	uint8_t buffersize=0;
	//Uhrzeit
	for(uint8_t i=0;i<bitsderrtc;i++){oled.draw_ASCI(rtc.msg_uhr[i],65+i*charsize,0*charhighte);}
    2882:	f5 01       	movw	r30, r10
    2884:	61 91       	ld	r22, Z+
    2886:	5f 01       	movw	r10, r30
    2888:	20 e0       	ldi	r18, 0x00	; 0
    288a:	41 2f       	mov	r20, r17
    288c:	86 e4       	ldi	r24, 0x46	; 70
    288e:	93 e0       	ldi	r25, 0x03	; 3
    2890:	0e 94 c8 07 	call	0xf90	; 0xf90 <_ZN7Display9draw_ASCIEhhh>
    2894:	1a 5f       	subi	r17, 0xFA	; 250
    2896:	11 37       	cpi	r17, 0x71	; 113
    2898:	a1 f7       	brne	.-24     	; 0x2882 <_Z15anzeige_kompassd+0x54>
    289a:	0f 2e       	mov	r0, r31
    289c:	f5 e8       	ldi	r31, 0x85	; 133
    289e:	af 2e       	mov	r10, r31
    28a0:	f7 e0       	ldi	r31, 0x07	; 7
    28a2:	bf 2e       	mov	r11, r31
    28a4:	f0 2d       	mov	r31, r0
    28a6:	11 e4       	ldi	r17, 0x41	; 65
	for(uint8_t i=0;i<bitsderrtc;i++){oled.draw_ASCI(rtc.msg_dat[i],65+i*charsize,7*charhighte);}
    28a8:	f5 01       	movw	r30, r10
    28aa:	61 91       	ld	r22, Z+
    28ac:	5f 01       	movw	r10, r30
    28ae:	28 e3       	ldi	r18, 0x38	; 56
    28b0:	41 2f       	mov	r20, r17
    28b2:	86 e4       	ldi	r24, 0x46	; 70
    28b4:	93 e0       	ldi	r25, 0x03	; 3
    28b6:	0e 94 c8 07 	call	0xf90	; 0xf90 <_ZN7Display9draw_ASCIEhhh>
    28ba:	1a 5f       	subi	r17, 0xFA	; 250
    28bc:	11 37       	cpi	r17, 0x71	; 113
    28be:	a1 f7       	brne	.-24     	; 0x28a8 <_Z15anzeige_kompassd+0x7a>
	//Azeige der Hoehe ueber Altitude
	buffersize=sprintf(buffer,"H: %.1f m",(double)Baro.altitude(Baro.Press));
    28c0:	40 91 2f 03 	lds	r20, 0x032F
    28c4:	50 91 30 03 	lds	r21, 0x0330
    28c8:	60 91 31 03 	lds	r22, 0x0331
    28cc:	70 91 32 03 	lds	r23, 0x0332
    28d0:	8f e2       	ldi	r24, 0x2F	; 47
    28d2:	93 e0       	ldi	r25, 0x03	; 3
    28d4:	0e 94 32 27 	call	0x4e64	; 0x4e64 <_ZN8Pressure8altitudeEd>
    28d8:	9f 93       	push	r25
    28da:	8f 93       	push	r24
    28dc:	7f 93       	push	r23
    28de:	6f 93       	push	r22
    28e0:	8a e7       	ldi	r24, 0x7A	; 122
    28e2:	92 e0       	ldi	r25, 0x02	; 2
    28e4:	9f 93       	push	r25
    28e6:	8f 93       	push	r24
    28e8:	ce 01       	movw	r24, r28
    28ea:	01 96       	adiw	r24, 0x01	; 1
    28ec:	9f 93       	push	r25
    28ee:	8f 93       	push	r24
    28f0:	0e 94 ea 30 	call	0x61d4	; 0x61d4 <sprintf>
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],65+i*charsize,1.33*charhighte);}
    28f4:	0f b6       	in	r0, 0x3f	; 63
    28f6:	f8 94       	cli
    28f8:	de bf       	out	0x3e, r29	; 62
    28fa:	0f be       	out	0x3f, r0	; 63
    28fc:	cd bf       	out	0x3d, r28	; 61
    28fe:	88 23       	and	r24, r24
    2900:	f1 f0       	breq	.+60     	; 0x293e <_Z15anzeige_kompassd+0x110>
    2902:	8e 01       	movw	r16, r28
    2904:	0f 5f       	subi	r16, 0xFF	; 255
    2906:	1f 4f       	sbci	r17, 0xFF	; 255
    2908:	81 50       	subi	r24, 0x01	; 1
    290a:	68 94       	set
    290c:	aa 24       	eor	r10, r10
    290e:	a1 f8       	bld	r10, 1
    2910:	b1 2c       	mov	r11, r1
    2912:	ac 0e       	add	r10, r28
    2914:	bd 1e       	adc	r11, r29
    2916:	a8 0e       	add	r10, r24
    2918:	b1 1c       	adc	r11, r1
    291a:	0f 2e       	mov	r0, r31
    291c:	f1 e4       	ldi	r31, 0x41	; 65
    291e:	9f 2e       	mov	r9, r31
    2920:	f0 2d       	mov	r31, r0
    2922:	f8 01       	movw	r30, r16
    2924:	61 91       	ld	r22, Z+
    2926:	8f 01       	movw	r16, r30
    2928:	2a e0       	ldi	r18, 0x0A	; 10
    292a:	49 2d       	mov	r20, r9
    292c:	86 e4       	ldi	r24, 0x46	; 70
    292e:	93 e0       	ldi	r25, 0x03	; 3
    2930:	0e 94 c8 07 	call	0xf90	; 0xf90 <_ZN7Display9draw_ASCIEhhh>
    2934:	f6 e0       	ldi	r31, 0x06	; 6
    2936:	9f 0e       	add	r9, r31
    2938:	0a 15       	cp	r16, r10
    293a:	1b 05       	cpc	r17, r11
    293c:	91 f7       	brne	.-28     	; 0x2922 <_Z15anzeige_kompassd+0xf4>
	//Anzeige der Temperatur
	buffersize=sprintf(buffer,"%.1f C",(double)Baro.Tempera);
    293e:	e3 e3       	ldi	r30, 0x33	; 51
    2940:	f3 e0       	ldi	r31, 0x03	; 3
    2942:	83 81       	ldd	r24, Z+3	; 0x03
    2944:	8f 93       	push	r24
    2946:	82 81       	ldd	r24, Z+2	; 0x02
    2948:	8f 93       	push	r24
    294a:	81 81       	ldd	r24, Z+1	; 0x01
    294c:	8f 93       	push	r24
    294e:	80 81       	ld	r24, Z
    2950:	8f 93       	push	r24
    2952:	89 e1       	ldi	r24, 0x19	; 25
    2954:	92 e0       	ldi	r25, 0x02	; 2
    2956:	9f 93       	push	r25
    2958:	8f 93       	push	r24
    295a:	ce 01       	movw	r24, r28
    295c:	01 96       	adiw	r24, 0x01	; 1
    295e:	9f 93       	push	r25
    2960:	8f 93       	push	r24
    2962:	0e 94 ea 30 	call	0x61d4	; 0x61d4 <sprintf>
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],65+i*charsize,5*charhighte);}
    2966:	0f b6       	in	r0, 0x3f	; 63
    2968:	f8 94       	cli
    296a:	de bf       	out	0x3e, r29	; 62
    296c:	0f be       	out	0x3f, r0	; 63
    296e:	cd bf       	out	0x3d, r28	; 61
    2970:	88 23       	and	r24, r24
    2972:	f1 f0       	breq	.+60     	; 0x29b0 <_Z15anzeige_kompassd+0x182>
    2974:	8e 01       	movw	r16, r28
    2976:	0f 5f       	subi	r16, 0xFF	; 255
    2978:	1f 4f       	sbci	r17, 0xFF	; 255
    297a:	81 50       	subi	r24, 0x01	; 1
    297c:	68 94       	set
    297e:	aa 24       	eor	r10, r10
    2980:	a1 f8       	bld	r10, 1
    2982:	b1 2c       	mov	r11, r1
    2984:	ac 0e       	add	r10, r28
    2986:	bd 1e       	adc	r11, r29
    2988:	a8 0e       	add	r10, r24
    298a:	b1 1c       	adc	r11, r1
    298c:	0f 2e       	mov	r0, r31
    298e:	f1 e4       	ldi	r31, 0x41	; 65
    2990:	9f 2e       	mov	r9, r31
    2992:	f0 2d       	mov	r31, r0
    2994:	f8 01       	movw	r30, r16
    2996:	61 91       	ld	r22, Z+
    2998:	8f 01       	movw	r16, r30
    299a:	28 e2       	ldi	r18, 0x28	; 40
    299c:	49 2d       	mov	r20, r9
    299e:	86 e4       	ldi	r24, 0x46	; 70
    29a0:	93 e0       	ldi	r25, 0x03	; 3
    29a2:	0e 94 c8 07 	call	0xf90	; 0xf90 <_ZN7Display9draw_ASCIEhhh>
    29a6:	f6 e0       	ldi	r31, 0x06	; 6
    29a8:	9f 0e       	add	r9, r31
    29aa:	0a 15       	cp	r16, r10
    29ac:	1b 05       	cpc	r17, r11
    29ae:	91 f7       	brne	.-28     	; 0x2994 <_Z15anzeige_kompassd+0x166>
	//winkel als Zahl ausgeben
	buffersize=sprintf(buffer,"angle=%.0f",winkel);
    29b0:	ff 92       	push	r15
    29b2:	ef 92       	push	r14
    29b4:	df 92       	push	r13
    29b6:	cf 92       	push	r12
    29b8:	84 e8       	ldi	r24, 0x84	; 132
    29ba:	92 e0       	ldi	r25, 0x02	; 2
    29bc:	9f 93       	push	r25
    29be:	8f 93       	push	r24
    29c0:	ce 01       	movw	r24, r28
    29c2:	01 96       	adiw	r24, 0x01	; 1
    29c4:	9f 93       	push	r25
    29c6:	8f 93       	push	r24
    29c8:	0e 94 ea 30 	call	0x61d4	; 0x61d4 <sprintf>
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],65+i*charsize,6*charhighte);}
    29cc:	0f b6       	in	r0, 0x3f	; 63
    29ce:	f8 94       	cli
    29d0:	de bf       	out	0x3e, r29	; 62
    29d2:	0f be       	out	0x3f, r0	; 63
    29d4:	cd bf       	out	0x3d, r28	; 61
    29d6:	88 23       	and	r24, r24
    29d8:	f1 f0       	breq	.+60     	; 0x2a16 <_Z15anzeige_kompassd+0x1e8>
    29da:	8e 01       	movw	r16, r28
    29dc:	0f 5f       	subi	r16, 0xFF	; 255
    29de:	1f 4f       	sbci	r17, 0xFF	; 255
    29e0:	81 50       	subi	r24, 0x01	; 1
    29e2:	68 94       	set
    29e4:	aa 24       	eor	r10, r10
    29e6:	a1 f8       	bld	r10, 1
    29e8:	b1 2c       	mov	r11, r1
    29ea:	ac 0e       	add	r10, r28
    29ec:	bd 1e       	adc	r11, r29
    29ee:	a8 0e       	add	r10, r24
    29f0:	b1 1c       	adc	r11, r1
    29f2:	0f 2e       	mov	r0, r31
    29f4:	f1 e4       	ldi	r31, 0x41	; 65
    29f6:	9f 2e       	mov	r9, r31
    29f8:	f0 2d       	mov	r31, r0
    29fa:	f8 01       	movw	r30, r16
    29fc:	61 91       	ld	r22, Z+
    29fe:	8f 01       	movw	r16, r30
    2a00:	20 e3       	ldi	r18, 0x30	; 48
    2a02:	49 2d       	mov	r20, r9
    2a04:	86 e4       	ldi	r24, 0x46	; 70
    2a06:	93 e0       	ldi	r25, 0x03	; 3
    2a08:	0e 94 c8 07 	call	0xf90	; 0xf90 <_ZN7Display9draw_ASCIEhhh>
    2a0c:	f6 e0       	ldi	r31, 0x06	; 6
    2a0e:	9f 0e       	add	r9, r31
    2a10:	0a 15       	cp	r16, r10
    2a12:	1b 05       	cpc	r17, r11
    2a14:	91 f7       	brne	.-28     	; 0x29fa <_Z15anzeige_kompassd+0x1cc>
	//dreieck als Zeiger
	anzeige_nadel(31,31,winkel);
    2a16:	2c 2d       	mov	r18, r12
    2a18:	3d 2d       	mov	r19, r13
    2a1a:	4e 2d       	mov	r20, r14
    2a1c:	5f 2d       	mov	r21, r15
    2a1e:	6f e1       	ldi	r22, 0x1F	; 31
    2a20:	8f e1       	ldi	r24, 0x1F	; 31
    2a22:	c9 d8       	rcall	.-3694   	; 0x1bb6 <_Z13anzeige_nadelhhf>
	//Richtung ausgeben
	anzeige_richtung(winkel);	
    2a24:	6c 2d       	mov	r22, r12
    2a26:	7d 2d       	mov	r23, r13
    2a28:	8e 2d       	mov	r24, r14
    2a2a:	9f 2d       	mov	r25, r15
    2a2c:	12 d8       	rcall	.-4060   	; 0x1a52 <_Z16anzeige_richtungf>
}
    2a2e:	64 96       	adiw	r28, 0x14	; 20
    2a30:	0f b6       	in	r0, 0x3f	; 63
    2a32:	f8 94       	cli
    2a34:	de bf       	out	0x3e, r29	; 62
    2a36:	0f be       	out	0x3f, r0	; 63
    2a38:	cd bf       	out	0x3d, r28	; 61
    2a3a:	df 91       	pop	r29
    2a3c:	cf 91       	pop	r28
    2a3e:	1f 91       	pop	r17
    2a40:	0f 91       	pop	r16
    2a42:	ff 90       	pop	r15
    2a44:	ef 90       	pop	r14
    2a46:	df 90       	pop	r13
    2a48:	cf 90       	pop	r12
    2a4a:	bf 90       	pop	r11
    2a4c:	af 90       	pop	r10
    2a4e:	9f 90       	pop	r9
    2a50:	08 95       	ret

00002a52 <_Z10timerseitev>:

void timerseite(){
    2a52:	af 92       	push	r10
    2a54:	bf 92       	push	r11
    2a56:	df 92       	push	r13
    2a58:	ef 92       	push	r14
    2a5a:	0f 93       	push	r16
    2a5c:	1f 93       	push	r17
    2a5e:	cf 93       	push	r28
    2a60:	df 93       	push	r29
    2a62:	cd b7       	in	r28, 0x3d	; 61
    2a64:	de b7       	in	r29, 0x3e	; 62
    2a66:	64 97       	sbiw	r28, 0x14	; 20
    2a68:	0f b6       	in	r0, 0x3f	; 63
    2a6a:	f8 94       	cli
    2a6c:	de bf       	out	0x3e, r29	; 62
    2a6e:	0f be       	out	0x3f, r0	; 63
    2a70:	cd bf       	out	0x3d, r28	; 61
	char buffer[20];
	uint8_t buffersize=0;
	oled.clearFrame();
    2a72:	86 e4       	ldi	r24, 0x46	; 70
    2a74:	93 e0       	ldi	r25, 0x03	; 3
    2a76:	0e 94 05 05 	call	0xa0a	; 0xa0a <_ZN7Display10clearFrameEv>
	buffersize=sprintf(buffer,"Timer: ");
    2a7a:	88 e0       	ldi	r24, 0x08	; 8
    2a7c:	ef e8       	ldi	r30, 0x8F	; 143
    2a7e:	f2 e0       	ldi	r31, 0x02	; 2
    2a80:	8e 01       	movw	r16, r28
    2a82:	0f 5f       	subi	r16, 0xFF	; 255
    2a84:	1f 4f       	sbci	r17, 0xFF	; 255
    2a86:	d8 01       	movw	r26, r16
    2a88:	01 90       	ld	r0, Z+
    2a8a:	0d 92       	st	X+, r0
    2a8c:	8a 95       	dec	r24
    2a8e:	e1 f7       	brne	.-8      	; 0x2a88 <_Z10timerseitev+0x36>
    2a90:	d0 2e       	mov	r13, r16
    2a92:	e1 2e       	mov	r14, r17
    2a94:	58 01       	movw	r10, r16
    2a96:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,0*charhighte);}
    2a98:	f5 01       	movw	r30, r10
    2a9a:	61 91       	ld	r22, Z+
    2a9c:	5f 01       	movw	r10, r30
    2a9e:	20 e0       	ldi	r18, 0x00	; 0
    2aa0:	41 2f       	mov	r20, r17
    2aa2:	86 e4       	ldi	r24, 0x46	; 70
    2aa4:	93 e0       	ldi	r25, 0x03	; 3
    2aa6:	0e 94 c8 07 	call	0xf90	; 0xf90 <_ZN7Display9draw_ASCIEhhh>
    2aaa:	1a 5f       	subi	r17, 0xFA	; 250
    2aac:	1a 32       	cpi	r17, 0x2A	; 42
    2aae:	a1 f7       	brne	.-24     	; 0x2a98 <_Z10timerseitev+0x46>
	if (pos!=0)
    2ab0:	60 91 28 03 	lds	r22, 0x0328
    2ab4:	66 23       	and	r22, r22
    2ab6:	39 f0       	breq	.+14     	; 0x2ac6 <_Z10timerseitev+0x74>
	{
		oled.draw_ASCI(pos+'0',buffersize*charsize,0*charhighte);
    2ab8:	60 5d       	subi	r22, 0xD0	; 208
    2aba:	20 e0       	ldi	r18, 0x00	; 0
    2abc:	4a e2       	ldi	r20, 0x2A	; 42
    2abe:	86 e4       	ldi	r24, 0x46	; 70
    2ac0:	93 e0       	ldi	r25, 0x03	; 3
    2ac2:	0e 94 c8 07 	call	0xf90	; 0xf90 <_ZN7Display9draw_ASCIEhhh>
	}
		
	buffer[0]=zaehler.Stunden/10;
    2ac6:	90 91 72 07 	lds	r25, 0x0772
    2aca:	8d ec       	ldi	r24, 0xCD	; 205
    2acc:	98 9f       	mul	r25, r24
    2ace:	21 2d       	mov	r18, r1
    2ad0:	11 24       	eor	r1, r1
    2ad2:	26 95       	lsr	r18
    2ad4:	26 95       	lsr	r18
    2ad6:	26 95       	lsr	r18
    2ad8:	29 83       	std	Y+1, r18	; 0x01
	buffer[1]=zaehler.Stunden%10;
    2ada:	22 0f       	add	r18, r18
    2adc:	32 2f       	mov	r19, r18
    2ade:	33 0f       	add	r19, r19
    2ae0:	33 0f       	add	r19, r19
    2ae2:	23 0f       	add	r18, r19
    2ae4:	92 1b       	sub	r25, r18
    2ae6:	9a 83       	std	Y+2, r25	; 0x02
	buffer[2]=':';
    2ae8:	9a e3       	ldi	r25, 0x3A	; 58
    2aea:	9b 83       	std	Y+3, r25	; 0x03
	buffer[3]=zaehler.Minuten/10;
    2aec:	20 91 73 07 	lds	r18, 0x0773
    2af0:	28 9f       	mul	r18, r24
    2af2:	31 2d       	mov	r19, r1
    2af4:	11 24       	eor	r1, r1
    2af6:	36 95       	lsr	r19
    2af8:	36 95       	lsr	r19
    2afa:	36 95       	lsr	r19
    2afc:	3c 83       	std	Y+4, r19	; 0x04
	buffer[4]=zaehler.Minuten%10;
    2afe:	33 0f       	add	r19, r19
    2b00:	43 2f       	mov	r20, r19
    2b02:	44 0f       	add	r20, r20
    2b04:	44 0f       	add	r20, r20
    2b06:	34 0f       	add	r19, r20
    2b08:	23 1b       	sub	r18, r19
    2b0a:	2d 83       	std	Y+5, r18	; 0x05
	buffer[5]=':';
    2b0c:	9e 83       	std	Y+6, r25	; 0x06
	buffer[6]=zaehler.Sekunden/10;
    2b0e:	90 91 74 07 	lds	r25, 0x0774
    2b12:	98 9f       	mul	r25, r24
    2b14:	81 2d       	mov	r24, r1
    2b16:	11 24       	eor	r1, r1
    2b18:	86 95       	lsr	r24
    2b1a:	86 95       	lsr	r24
    2b1c:	86 95       	lsr	r24
    2b1e:	8f 83       	std	Y+7, r24	; 0x07
	buffer[7]=zaehler.Sekunden%10;
    2b20:	88 0f       	add	r24, r24
    2b22:	28 2f       	mov	r18, r24
    2b24:	22 0f       	add	r18, r18
    2b26:	22 0f       	add	r18, r18
    2b28:	82 0f       	add	r24, r18
    2b2a:	98 1b       	sub	r25, r24
    2b2c:	98 87       	std	Y+8, r25	; 0x08
    2b2e:	ad 2c       	mov	r10, r13
    2b30:	be 2c       	mov	r11, r14
    2b32:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<bitsderrtc;i++){
		if (buffer[i]==':')
    2b34:	f5 01       	movw	r30, r10
    2b36:	61 91       	ld	r22, Z+
    2b38:	5f 01       	movw	r10, r30
    2b3a:	6a 33       	cpi	r22, 0x3A	; 58
    2b3c:	39 f4       	brne	.+14     	; 0x2b4c <_Z10timerseitev+0xfa>
		{
			oled.draw_ASCI(buffer[i],i*numbersmalsize,2.5*charhighte);
    2b3e:	24 e1       	ldi	r18, 0x14	; 20
    2b40:	41 2f       	mov	r20, r17
    2b42:	86 e4       	ldi	r24, 0x46	; 70
    2b44:	93 e0       	ldi	r25, 0x03	; 3
    2b46:	0e 94 c8 07 	call	0xf90	; 0xf90 <_ZN7Display9draw_ASCIEhhh>
    2b4a:	06 c0       	rjmp	.+12     	; 0x2b58 <_Z10timerseitev+0x106>
		}
		else{
			oled.draw_number16x16(buffer[i],i*numbersmalsize,2*charhighte);
    2b4c:	20 e1       	ldi	r18, 0x10	; 16
    2b4e:	41 2f       	mov	r20, r17
    2b50:	86 e4       	ldi	r24, 0x46	; 70
    2b52:	93 e0       	ldi	r25, 0x03	; 3
    2b54:	0e 94 4c 08 	call	0x1098	; 0x1098 <_ZN7Display16draw_number16x16Ehhh>
    2b58:	10 5f       	subi	r17, 0xF0	; 240
	buffer[3]=zaehler.Minuten/10;
	buffer[4]=zaehler.Minuten%10;
	buffer[5]=':';
	buffer[6]=zaehler.Sekunden/10;
	buffer[7]=zaehler.Sekunden%10;
	for(uint8_t i=0;i<bitsderrtc;i++){
    2b5a:	10 38       	cpi	r17, 0x80	; 128
    2b5c:	59 f7       	brne	.-42     	; 0x2b34 <_Z10timerseitev+0xe2>
		}
		else{
			oled.draw_number16x16(buffer[i],i*numbersmalsize,2*charhighte);
		}
	}
}
    2b5e:	64 96       	adiw	r28, 0x14	; 20
    2b60:	0f b6       	in	r0, 0x3f	; 63
    2b62:	f8 94       	cli
    2b64:	de bf       	out	0x3e, r29	; 62
    2b66:	0f be       	out	0x3f, r0	; 63
    2b68:	cd bf       	out	0x3d, r28	; 61
    2b6a:	df 91       	pop	r29
    2b6c:	cf 91       	pop	r28
    2b6e:	1f 91       	pop	r17
    2b70:	0f 91       	pop	r16
    2b72:	ef 90       	pop	r14
    2b74:	df 90       	pop	r13
    2b76:	bf 90       	pop	r11
    2b78:	af 90       	pop	r10
    2b7a:	08 95       	ret

00002b7c <_Z13Stoppuhrseitev>:

void Stoppuhrseite(){
    2b7c:	af 92       	push	r10
    2b7e:	bf 92       	push	r11
    2b80:	df 92       	push	r13
    2b82:	ef 92       	push	r14
    2b84:	0f 93       	push	r16
    2b86:	1f 93       	push	r17
    2b88:	cf 93       	push	r28
    2b8a:	df 93       	push	r29
    2b8c:	cd b7       	in	r28, 0x3d	; 61
    2b8e:	de b7       	in	r29, 0x3e	; 62
    2b90:	64 97       	sbiw	r28, 0x14	; 20
    2b92:	0f b6       	in	r0, 0x3f	; 63
    2b94:	f8 94       	cli
    2b96:	de bf       	out	0x3e, r29	; 62
    2b98:	0f be       	out	0x3f, r0	; 63
    2b9a:	cd bf       	out	0x3d, r28	; 61
	char buffer[20];
	uint8_t buffersize=0;
	oled.clearFrame();
    2b9c:	86 e4       	ldi	r24, 0x46	; 70
    2b9e:	93 e0       	ldi	r25, 0x03	; 3
    2ba0:	0e 94 05 05 	call	0xa0a	; 0xa0a <_ZN7Display10clearFrameEv>
	buffersize=sprintf(buffer,"Stoppuhr: ");
    2ba4:	8b e0       	ldi	r24, 0x0B	; 11
    2ba6:	e7 e9       	ldi	r30, 0x97	; 151
    2ba8:	f2 e0       	ldi	r31, 0x02	; 2
    2baa:	8e 01       	movw	r16, r28
    2bac:	0f 5f       	subi	r16, 0xFF	; 255
    2bae:	1f 4f       	sbci	r17, 0xFF	; 255
    2bb0:	d8 01       	movw	r26, r16
    2bb2:	01 90       	ld	r0, Z+
    2bb4:	0d 92       	st	X+, r0
    2bb6:	8a 95       	dec	r24
    2bb8:	e1 f7       	brne	.-8      	; 0x2bb2 <_Z13Stoppuhrseitev+0x36>
    2bba:	d0 2e       	mov	r13, r16
    2bbc:	e1 2e       	mov	r14, r17
    2bbe:	58 01       	movw	r10, r16
    2bc0:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,0*charhighte);}
    2bc2:	f5 01       	movw	r30, r10
    2bc4:	61 91       	ld	r22, Z+
    2bc6:	5f 01       	movw	r10, r30
    2bc8:	20 e0       	ldi	r18, 0x00	; 0
    2bca:	41 2f       	mov	r20, r17
    2bcc:	86 e4       	ldi	r24, 0x46	; 70
    2bce:	93 e0       	ldi	r25, 0x03	; 3
    2bd0:	0e 94 c8 07 	call	0xf90	; 0xf90 <_ZN7Display9draw_ASCIEhhh>
    2bd4:	1a 5f       	subi	r17, 0xFA	; 250
    2bd6:	1c 33       	cpi	r17, 0x3C	; 60
    2bd8:	a1 f7       	brne	.-24     	; 0x2bc2 <_Z13Stoppuhrseitev+0x46>
	
	buffer[0]=stoppuhr.Stunden/10;
    2bda:	90 91 57 07 	lds	r25, 0x0757
    2bde:	8d ec       	ldi	r24, 0xCD	; 205
    2be0:	98 9f       	mul	r25, r24
    2be2:	21 2d       	mov	r18, r1
    2be4:	11 24       	eor	r1, r1
    2be6:	26 95       	lsr	r18
    2be8:	26 95       	lsr	r18
    2bea:	26 95       	lsr	r18
    2bec:	29 83       	std	Y+1, r18	; 0x01
	buffer[1]=stoppuhr.Stunden%10;
    2bee:	22 0f       	add	r18, r18
    2bf0:	32 2f       	mov	r19, r18
    2bf2:	33 0f       	add	r19, r19
    2bf4:	33 0f       	add	r19, r19
    2bf6:	23 0f       	add	r18, r19
    2bf8:	92 1b       	sub	r25, r18
    2bfa:	9a 83       	std	Y+2, r25	; 0x02
	buffer[2]=':';
    2bfc:	9a e3       	ldi	r25, 0x3A	; 58
    2bfe:	9b 83       	std	Y+3, r25	; 0x03
	buffer[3]=stoppuhr.Minuten/10;
    2c00:	20 91 58 07 	lds	r18, 0x0758
    2c04:	28 9f       	mul	r18, r24
    2c06:	31 2d       	mov	r19, r1
    2c08:	11 24       	eor	r1, r1
    2c0a:	36 95       	lsr	r19
    2c0c:	36 95       	lsr	r19
    2c0e:	36 95       	lsr	r19
    2c10:	3c 83       	std	Y+4, r19	; 0x04
	buffer[4]=stoppuhr.Minuten%10;
    2c12:	33 0f       	add	r19, r19
    2c14:	43 2f       	mov	r20, r19
    2c16:	44 0f       	add	r20, r20
    2c18:	44 0f       	add	r20, r20
    2c1a:	34 0f       	add	r19, r20
    2c1c:	23 1b       	sub	r18, r19
    2c1e:	2d 83       	std	Y+5, r18	; 0x05
	buffer[5]=':';
    2c20:	9e 83       	std	Y+6, r25	; 0x06
	buffer[6]=stoppuhr.Sekunden/10;
    2c22:	90 91 59 07 	lds	r25, 0x0759
    2c26:	98 9f       	mul	r25, r24
    2c28:	81 2d       	mov	r24, r1
    2c2a:	11 24       	eor	r1, r1
    2c2c:	86 95       	lsr	r24
    2c2e:	86 95       	lsr	r24
    2c30:	86 95       	lsr	r24
    2c32:	8f 83       	std	Y+7, r24	; 0x07
	buffer[7]=stoppuhr.Sekunden%10;
    2c34:	88 0f       	add	r24, r24
    2c36:	28 2f       	mov	r18, r24
    2c38:	22 0f       	add	r18, r18
    2c3a:	22 0f       	add	r18, r18
    2c3c:	82 0f       	add	r24, r18
    2c3e:	98 1b       	sub	r25, r24
    2c40:	98 87       	std	Y+8, r25	; 0x08
    2c42:	ad 2c       	mov	r10, r13
    2c44:	be 2c       	mov	r11, r14
    2c46:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<bitsderrtc;i++){
		if (buffer[i]==':')
    2c48:	f5 01       	movw	r30, r10
    2c4a:	61 91       	ld	r22, Z+
    2c4c:	5f 01       	movw	r10, r30
    2c4e:	6a 33       	cpi	r22, 0x3A	; 58
    2c50:	39 f4       	brne	.+14     	; 0x2c60 <_Z13Stoppuhrseitev+0xe4>
		{
			oled.draw_ASCI(buffer[i],i*numbersmalsize,2.5*charhighte);
    2c52:	24 e1       	ldi	r18, 0x14	; 20
    2c54:	41 2f       	mov	r20, r17
    2c56:	86 e4       	ldi	r24, 0x46	; 70
    2c58:	93 e0       	ldi	r25, 0x03	; 3
    2c5a:	0e 94 c8 07 	call	0xf90	; 0xf90 <_ZN7Display9draw_ASCIEhhh>
    2c5e:	06 c0       	rjmp	.+12     	; 0x2c6c <_Z13Stoppuhrseitev+0xf0>
		}
		else{
			oled.draw_number16x16(buffer[i],i*numbersmalsize,2*charhighte);
    2c60:	20 e1       	ldi	r18, 0x10	; 16
    2c62:	41 2f       	mov	r20, r17
    2c64:	86 e4       	ldi	r24, 0x46	; 70
    2c66:	93 e0       	ldi	r25, 0x03	; 3
    2c68:	0e 94 4c 08 	call	0x1098	; 0x1098 <_ZN7Display16draw_number16x16Ehhh>
    2c6c:	10 5f       	subi	r17, 0xF0	; 240
	buffer[3]=stoppuhr.Minuten/10;
	buffer[4]=stoppuhr.Minuten%10;
	buffer[5]=':';
	buffer[6]=stoppuhr.Sekunden/10;
	buffer[7]=stoppuhr.Sekunden%10;
	for(uint8_t i=0;i<bitsderrtc;i++){
    2c6e:	10 38       	cpi	r17, 0x80	; 128
    2c70:	59 f7       	brne	.-42     	; 0x2c48 <_Z13Stoppuhrseitev+0xcc>
		}
		else{
			oled.draw_number16x16(buffer[i],i*numbersmalsize,2*charhighte);
		}
	}
}
    2c72:	64 96       	adiw	r28, 0x14	; 20
    2c74:	0f b6       	in	r0, 0x3f	; 63
    2c76:	f8 94       	cli
    2c78:	de bf       	out	0x3e, r29	; 62
    2c7a:	0f be       	out	0x3f, r0	; 63
    2c7c:	cd bf       	out	0x3d, r28	; 61
    2c7e:	df 91       	pop	r29
    2c80:	cf 91       	pop	r28
    2c82:	1f 91       	pop	r17
    2c84:	0f 91       	pop	r16
    2c86:	ef 90       	pop	r14
    2c88:	df 90       	pop	r13
    2c8a:	bf 90       	pop	r11
    2c8c:	af 90       	pop	r10
    2c8e:	08 95       	ret

00002c90 <_Z14Pressuresensorv>:

void Pressuresensor(){
    2c90:	bf 92       	push	r11
    2c92:	cf 92       	push	r12
    2c94:	df 92       	push	r13
    2c96:	ef 92       	push	r14
    2c98:	ff 92       	push	r15
    2c9a:	0f 93       	push	r16
    2c9c:	1f 93       	push	r17
    2c9e:	cf 93       	push	r28
    2ca0:	df 93       	push	r29
    2ca2:	cd b7       	in	r28, 0x3d	; 61
    2ca4:	de b7       	in	r29, 0x3e	; 62
    2ca6:	64 97       	sbiw	r28, 0x14	; 20
    2ca8:	0f b6       	in	r0, 0x3f	; 63
    2caa:	f8 94       	cli
    2cac:	de bf       	out	0x3e, r29	; 62
    2cae:	0f be       	out	0x3f, r0	; 63
    2cb0:	cd bf       	out	0x3d, r28	; 61
	Baro.READ_Pressure_once();
    2cb2:	8f e2       	ldi	r24, 0x2F	; 47
    2cb4:	93 e0       	ldi	r25, 0x03	; 3
    2cb6:	0e 94 4a 26 	call	0x4c94	; 0x4c94 <_ZN8Pressure18READ_Pressure_onceEv>
	Baro.READ_Temperature();
    2cba:	8f e2       	ldi	r24, 0x2F	; 47
    2cbc:	93 e0       	ldi	r25, 0x03	; 3
    2cbe:	0e 94 c2 26 	call	0x4d84	; 0x4d84 <_ZN8Pressure16READ_TemperatureEv>
	char buffer[20];
	uint8_t buffersize=0;
	oled.clearFrame();
    2cc2:	86 e4       	ldi	r24, 0x46	; 70
    2cc4:	93 e0       	ldi	r25, 0x03	; 3
    2cc6:	0e 94 05 05 	call	0xa0a	; 0xa0a <_ZN7Display10clearFrameEv>
	header(0);
    2cca:	80 e0       	ldi	r24, 0x00	; 0
    2ccc:	0e 94 23 0c 	call	0x1846	; 0x1846 <_Z6headerh>
	bottom(0);
    2cd0:	80 e0       	ldi	r24, 0x00	; 0
    2cd2:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <_Z6bottomh>
	buffersize=sprintf(buffer,"LPS25H Daten:");
    2cd6:	8e e0       	ldi	r24, 0x0E	; 14
    2cd8:	e2 ea       	ldi	r30, 0xA2	; 162
    2cda:	f2 e0       	ldi	r31, 0x02	; 2
    2cdc:	8e 01       	movw	r16, r28
    2cde:	0f 5f       	subi	r16, 0xFF	; 255
    2ce0:	1f 4f       	sbci	r17, 0xFF	; 255
    2ce2:	d8 01       	movw	r26, r16
    2ce4:	01 90       	ld	r0, Z+
    2ce6:	0d 92       	st	X+, r0
    2ce8:	8a 95       	dec	r24
    2cea:	e1 f7       	brne	.-8      	; 0x2ce4 <_Z14Pressuresensorv+0x54>
    2cec:	c0 2e       	mov	r12, r16
    2cee:	d1 2e       	mov	r13, r17
    2cf0:	78 01       	movw	r14, r16
    2cf2:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,2*charhighte);}
    2cf4:	f7 01       	movw	r30, r14
    2cf6:	61 91       	ld	r22, Z+
    2cf8:	7f 01       	movw	r14, r30
    2cfa:	20 e1       	ldi	r18, 0x10	; 16
    2cfc:	41 2f       	mov	r20, r17
    2cfe:	86 e4       	ldi	r24, 0x46	; 70
    2d00:	93 e0       	ldi	r25, 0x03	; 3
    2d02:	0e 94 c8 07 	call	0xf90	; 0xf90 <_ZN7Display9draw_ASCIEhhh>
    2d06:	1a 5f       	subi	r17, 0xFA	; 250
    2d08:	1e 34       	cpi	r17, 0x4E	; 78
    2d0a:	a1 f7       	brne	.-24     	; 0x2cf4 <_Z14Pressuresensorv+0x64>
	buffersize=sprintf(buffer,"%.1f HPa",Baro.Press);
    2d0c:	ef e2       	ldi	r30, 0x2F	; 47
    2d0e:	f3 e0       	ldi	r31, 0x03	; 3
    2d10:	83 81       	ldd	r24, Z+3	; 0x03
    2d12:	8f 93       	push	r24
    2d14:	82 81       	ldd	r24, Z+2	; 0x02
    2d16:	8f 93       	push	r24
    2d18:	81 81       	ldd	r24, Z+1	; 0x01
    2d1a:	8f 93       	push	r24
    2d1c:	80 81       	ld	r24, Z
    2d1e:	8f 93       	push	r24
    2d20:	80 eb       	ldi	r24, 0xB0	; 176
    2d22:	92 e0       	ldi	r25, 0x02	; 2
    2d24:	9f 93       	push	r25
    2d26:	8f 93       	push	r24
    2d28:	ce 01       	movw	r24, r28
    2d2a:	01 96       	adiw	r24, 0x01	; 1
    2d2c:	9f 93       	push	r25
    2d2e:	8f 93       	push	r24
    2d30:	0e 94 ea 30 	call	0x61d4	; 0x61d4 <sprintf>
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,3*charhighte);}
    2d34:	0f b6       	in	r0, 0x3f	; 63
    2d36:	f8 94       	cli
    2d38:	de bf       	out	0x3e, r29	; 62
    2d3a:	0f be       	out	0x3f, r0	; 63
    2d3c:	cd bf       	out	0x3d, r28	; 61
    2d3e:	88 23       	and	r24, r24
    2d40:	d1 f0       	breq	.+52     	; 0x2d76 <_Z14Pressuresensorv+0xe6>
    2d42:	81 50       	subi	r24, 0x01	; 1
    2d44:	68 94       	set
    2d46:	ee 24       	eor	r14, r14
    2d48:	e1 f8       	bld	r14, 1
    2d4a:	f1 2c       	mov	r15, r1
    2d4c:	ec 0e       	add	r14, r28
    2d4e:	fd 1e       	adc	r15, r29
    2d50:	e8 0e       	add	r14, r24
    2d52:	f1 1c       	adc	r15, r1
    2d54:	0c 2d       	mov	r16, r12
    2d56:	1d 2d       	mov	r17, r13
    2d58:	b1 2c       	mov	r11, r1
    2d5a:	f8 01       	movw	r30, r16
    2d5c:	61 91       	ld	r22, Z+
    2d5e:	8f 01       	movw	r16, r30
    2d60:	28 e1       	ldi	r18, 0x18	; 24
    2d62:	4b 2d       	mov	r20, r11
    2d64:	86 e4       	ldi	r24, 0x46	; 70
    2d66:	93 e0       	ldi	r25, 0x03	; 3
    2d68:	0e 94 c8 07 	call	0xf90	; 0xf90 <_ZN7Display9draw_ASCIEhhh>
    2d6c:	f6 e0       	ldi	r31, 0x06	; 6
    2d6e:	bf 0e       	add	r11, r31
    2d70:	0e 15       	cp	r16, r14
    2d72:	1f 05       	cpc	r17, r15
    2d74:	91 f7       	brne	.-28     	; 0x2d5a <_Z14Pressuresensorv+0xca>
	buffersize=sprintf(buffer,"Hoehe: %.1f m",(double)Baro.altitude(Baro.Press));
    2d76:	40 91 2f 03 	lds	r20, 0x032F
    2d7a:	50 91 30 03 	lds	r21, 0x0330
    2d7e:	60 91 31 03 	lds	r22, 0x0331
    2d82:	70 91 32 03 	lds	r23, 0x0332
    2d86:	8f e2       	ldi	r24, 0x2F	; 47
    2d88:	93 e0       	ldi	r25, 0x03	; 3
    2d8a:	0e 94 32 27 	call	0x4e64	; 0x4e64 <_ZN8Pressure8altitudeEd>
    2d8e:	9f 93       	push	r25
    2d90:	8f 93       	push	r24
    2d92:	7f 93       	push	r23
    2d94:	6f 93       	push	r22
    2d96:	89 eb       	ldi	r24, 0xB9	; 185
    2d98:	92 e0       	ldi	r25, 0x02	; 2
    2d9a:	9f 93       	push	r25
    2d9c:	8f 93       	push	r24
    2d9e:	ce 01       	movw	r24, r28
    2da0:	01 96       	adiw	r24, 0x01	; 1
    2da2:	9f 93       	push	r25
    2da4:	8f 93       	push	r24
    2da6:	0e 94 ea 30 	call	0x61d4	; 0x61d4 <sprintf>
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,4*charhighte);}
    2daa:	0f b6       	in	r0, 0x3f	; 63
    2dac:	f8 94       	cli
    2dae:	de bf       	out	0x3e, r29	; 62
    2db0:	0f be       	out	0x3f, r0	; 63
    2db2:	cd bf       	out	0x3d, r28	; 61
    2db4:	88 23       	and	r24, r24
    2db6:	d1 f0       	breq	.+52     	; 0x2dec <_Z14Pressuresensorv+0x15c>
    2db8:	81 50       	subi	r24, 0x01	; 1
    2dba:	68 94       	set
    2dbc:	ee 24       	eor	r14, r14
    2dbe:	e1 f8       	bld	r14, 1
    2dc0:	f1 2c       	mov	r15, r1
    2dc2:	ec 0e       	add	r14, r28
    2dc4:	fd 1e       	adc	r15, r29
    2dc6:	e8 0e       	add	r14, r24
    2dc8:	f1 1c       	adc	r15, r1
    2dca:	0c 2d       	mov	r16, r12
    2dcc:	1d 2d       	mov	r17, r13
    2dce:	b1 2c       	mov	r11, r1
    2dd0:	f8 01       	movw	r30, r16
    2dd2:	61 91       	ld	r22, Z+
    2dd4:	8f 01       	movw	r16, r30
    2dd6:	20 e2       	ldi	r18, 0x20	; 32
    2dd8:	4b 2d       	mov	r20, r11
    2dda:	86 e4       	ldi	r24, 0x46	; 70
    2ddc:	93 e0       	ldi	r25, 0x03	; 3
    2dde:	0e 94 c8 07 	call	0xf90	; 0xf90 <_ZN7Display9draw_ASCIEhhh>
    2de2:	f6 e0       	ldi	r31, 0x06	; 6
    2de4:	bf 0e       	add	r11, r31
    2de6:	0e 15       	cp	r16, r14
    2de8:	1f 05       	cpc	r17, r15
    2dea:	91 f7       	brne	.-28     	; 0x2dd0 <_Z14Pressuresensorv+0x140>
	buffersize=sprintf(buffer,"%.1f C",(double)Baro.Tempera);
    2dec:	e3 e3       	ldi	r30, 0x33	; 51
    2dee:	f3 e0       	ldi	r31, 0x03	; 3
    2df0:	83 81       	ldd	r24, Z+3	; 0x03
    2df2:	8f 93       	push	r24
    2df4:	82 81       	ldd	r24, Z+2	; 0x02
    2df6:	8f 93       	push	r24
    2df8:	81 81       	ldd	r24, Z+1	; 0x01
    2dfa:	8f 93       	push	r24
    2dfc:	80 81       	ld	r24, Z
    2dfe:	8f 93       	push	r24
    2e00:	89 e1       	ldi	r24, 0x19	; 25
    2e02:	92 e0       	ldi	r25, 0x02	; 2
    2e04:	9f 93       	push	r25
    2e06:	8f 93       	push	r24
    2e08:	ce 01       	movw	r24, r28
    2e0a:	01 96       	adiw	r24, 0x01	; 1
    2e0c:	9f 93       	push	r25
    2e0e:	8f 93       	push	r24
    2e10:	0e 94 ea 30 	call	0x61d4	; 0x61d4 <sprintf>
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,6*charhighte);}
    2e14:	0f b6       	in	r0, 0x3f	; 63
    2e16:	f8 94       	cli
    2e18:	de bf       	out	0x3e, r29	; 62
    2e1a:	0f be       	out	0x3f, r0	; 63
    2e1c:	cd bf       	out	0x3d, r28	; 61
    2e1e:	88 23       	and	r24, r24
    2e20:	d1 f0       	breq	.+52     	; 0x2e56 <_Z14Pressuresensorv+0x1c6>
    2e22:	81 50       	subi	r24, 0x01	; 1
    2e24:	68 94       	set
    2e26:	ee 24       	eor	r14, r14
    2e28:	e1 f8       	bld	r14, 1
    2e2a:	f1 2c       	mov	r15, r1
    2e2c:	ec 0e       	add	r14, r28
    2e2e:	fd 1e       	adc	r15, r29
    2e30:	e8 0e       	add	r14, r24
    2e32:	f1 1c       	adc	r15, r1
    2e34:	0c 2d       	mov	r16, r12
    2e36:	1d 2d       	mov	r17, r13
    2e38:	d1 2c       	mov	r13, r1
    2e3a:	f8 01       	movw	r30, r16
    2e3c:	61 91       	ld	r22, Z+
    2e3e:	8f 01       	movw	r16, r30
    2e40:	20 e3       	ldi	r18, 0x30	; 48
    2e42:	4d 2d       	mov	r20, r13
    2e44:	86 e4       	ldi	r24, 0x46	; 70
    2e46:	93 e0       	ldi	r25, 0x03	; 3
    2e48:	0e 94 c8 07 	call	0xf90	; 0xf90 <_ZN7Display9draw_ASCIEhhh>
    2e4c:	f6 e0       	ldi	r31, 0x06	; 6
    2e4e:	df 0e       	add	r13, r31
    2e50:	0e 15       	cp	r16, r14
    2e52:	1f 05       	cpc	r17, r15
    2e54:	91 f7       	brne	.-28     	; 0x2e3a <_Z14Pressuresensorv+0x1aa>
	//buffersize=sprintf(buffer,"%i",Baro.Wertedruck[1]);
	//for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,4*charhighte);}
	//buffersize=sprintf(buffer,"%i",Baro.Wertedruck[2]);
	//for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,5*charhighte);}
}
    2e56:	64 96       	adiw	r28, 0x14	; 20
    2e58:	0f b6       	in	r0, 0x3f	; 63
    2e5a:	f8 94       	cli
    2e5c:	de bf       	out	0x3e, r29	; 62
    2e5e:	0f be       	out	0x3f, r0	; 63
    2e60:	cd bf       	out	0x3d, r28	; 61
    2e62:	df 91       	pop	r29
    2e64:	cf 91       	pop	r28
    2e66:	1f 91       	pop	r17
    2e68:	0f 91       	pop	r16
    2e6a:	ff 90       	pop	r15
    2e6c:	ef 90       	pop	r14
    2e6e:	df 90       	pop	r13
    2e70:	cf 90       	pop	r12
    2e72:	bf 90       	pop	r11
    2e74:	08 95       	ret

00002e76 <_Z13uhreinstellenv>:

void uhreinstellen(){
    2e76:	2f 92       	push	r2
    2e78:	3f 92       	push	r3
    2e7a:	4f 92       	push	r4
    2e7c:	5f 92       	push	r5
    2e7e:	6f 92       	push	r6
    2e80:	7f 92       	push	r7
    2e82:	8f 92       	push	r8
    2e84:	9f 92       	push	r9
    2e86:	af 92       	push	r10
    2e88:	bf 92       	push	r11
    2e8a:	cf 92       	push	r12
    2e8c:	df 92       	push	r13
    2e8e:	ef 92       	push	r14
    2e90:	ff 92       	push	r15
    2e92:	0f 93       	push	r16
    2e94:	1f 93       	push	r17
    2e96:	cf 93       	push	r28
    2e98:	df 93       	push	r29
    2e9a:	cd b7       	in	r28, 0x3d	; 61
    2e9c:	de b7       	in	r29, 0x3e	; 62
    2e9e:	66 97       	sbiw	r28, 0x16	; 22
    2ea0:	0f b6       	in	r0, 0x3f	; 63
    2ea2:	f8 94       	cli
    2ea4:	de bf       	out	0x3e, r29	; 62
    2ea6:	0f be       	out	0x3f, r0	; 63
    2ea8:	cd bf       	out	0x3d, r28	; 61
	rtc.RTCstop();
    2eaa:	8d e7       	ldi	r24, 0x7D	; 125
    2eac:	97 e0       	ldi	r25, 0x07	; 7
    2eae:	0e 94 a4 28 	call	0x5148	; 0x5148 <_ZN3RTC7RTCstopEv>
	
	oled.clearFrame();
    2eb2:	86 e4       	ldi	r24, 0x46	; 70
    2eb4:	93 e0       	ldi	r25, 0x03	; 3
    2eb6:	0e 94 05 05 	call	0xa0a	; 0xa0a <_ZN7Display10clearFrameEv>
	char buffer[20];
	uint8_t buffersize;
	uint8_t pos=0;
    2eba:	91 2c       	mov	r9, r1
	while(pos<11){
		buffersize=sprintf(buffer,"Uhreinstellung");
    2ebc:	0f 2e       	mov	r0, r31
    2ebe:	ff e0       	ldi	r31, 0x0F	; 15
    2ec0:	6f 2e       	mov	r6, r31
    2ec2:	f0 2d       	mov	r31, r0
    2ec4:	ce 01       	movw	r24, r28
    2ec6:	01 96       	adiw	r24, 0x01	; 1
    2ec8:	7c 01       	movw	r14, r24
    2eca:	78 2e       	mov	r7, r24
    2ecc:	8f 2c       	mov	r8, r15
    2ece:	b1 2c       	mov	r11, r1
		for(uint8_t i = 0; i<buffersize;i++){
			oled.draw_ASCI(buffer[i],charsize*i,0);
		}
		buffersize=sprintf(buffer,"--------------");
    2ed0:	8d 8b       	std	Y+21, r24	; 0x15
    2ed2:	fe 8a       	std	Y+22, r15	; 0x16
		for(uint8_t i = 0; i<buffersize;i++){
			oled.draw_ASCI(buffer[i],charsize*i,8);
		}
		buffer[0]=rtc.Stunden/10;
    2ed4:	0f 2e       	mov	r0, r31
    2ed6:	fd ec       	ldi	r31, 0xCD	; 205
    2ed8:	af 2e       	mov	r10, r31
    2eda:	f0 2d       	mov	r31, r0
		buffer[1]=rtc.Stunden%10;
		buffer[2]=':';
		buffer[3]=rtc.Minuten/10;
		buffer[4]=rtc.Minuten%10;
		buffer[5]=' ';
		buffer[6]=rtc.Tag/10;
    2edc:	0f 2e       	mov	r0, r31
    2ede:	f1 e9       	ldi	r31, 0x91	; 145
    2ee0:	4f 2e       	mov	r4, r31
    2ee2:	f7 e0       	ldi	r31, 0x07	; 7
    2ee4:	5f 2e       	mov	r5, r31
    2ee6:	f0 2d       	mov	r31, r0
		buffer[7]=rtc.Tag%10;
		buffer[8]='.';
		buffer[9]=rtc.Monat/10;
    2ee8:	0f 2e       	mov	r0, r31
    2eea:	f3 e9       	ldi	r31, 0x93	; 147
    2eec:	cf 2e       	mov	r12, r31
    2eee:	f7 e0       	ldi	r31, 0x07	; 7
    2ef0:	df 2e       	mov	r13, r31
    2ef2:	f0 2d       	mov	r31, r0
	oled.clearFrame();
	char buffer[20];
	uint8_t buffersize;
	uint8_t pos=0;
	while(pos<11){
		buffersize=sprintf(buffer,"Uhreinstellung");
    2ef4:	e7 ec       	ldi	r30, 0xC7	; 199
    2ef6:	f2 e0       	ldi	r31, 0x02	; 2
    2ef8:	a7 2d       	mov	r26, r7
    2efa:	b8 2d       	mov	r27, r8
    2efc:	86 2d       	mov	r24, r6
    2efe:	01 90       	ld	r0, Z+
    2f00:	0d 92       	st	X+, r0
    2f02:	8a 95       	dec	r24
    2f04:	e1 f7       	brne	.-8      	; 0x2efe <_Z13uhreinstellenv+0x88>
    2f06:	27 2c       	mov	r2, r7
    2f08:	38 2c       	mov	r3, r8
    2f0a:	1b 2d       	mov	r17, r11
		for(uint8_t i = 0; i<buffersize;i++){
			oled.draw_ASCI(buffer[i],charsize*i,0);
    2f0c:	f1 01       	movw	r30, r2
    2f0e:	61 91       	ld	r22, Z+
    2f10:	1f 01       	movw	r2, r30
    2f12:	2b 2d       	mov	r18, r11
    2f14:	41 2f       	mov	r20, r17
    2f16:	86 e4       	ldi	r24, 0x46	; 70
    2f18:	93 e0       	ldi	r25, 0x03	; 3
    2f1a:	0e 94 c8 07 	call	0xf90	; 0xf90 <_ZN7Display9draw_ASCIEhhh>
    2f1e:	1a 5f       	subi	r17, 0xFA	; 250
	char buffer[20];
	uint8_t buffersize;
	uint8_t pos=0;
	while(pos<11){
		buffersize=sprintf(buffer,"Uhreinstellung");
		for(uint8_t i = 0; i<buffersize;i++){
    2f20:	14 35       	cpi	r17, 0x54	; 84
    2f22:	a1 f7       	brne	.-24     	; 0x2f0c <_Z13uhreinstellenv+0x96>
			oled.draw_ASCI(buffer[i],charsize*i,0);
		}
		buffersize=sprintf(buffer,"--------------");
    2f24:	ef e0       	ldi	r30, 0x0F	; 15
    2f26:	f1 e0       	ldi	r31, 0x01	; 1
    2f28:	a7 2d       	mov	r26, r7
    2f2a:	b8 2d       	mov	r27, r8
    2f2c:	86 2d       	mov	r24, r6
    2f2e:	01 90       	ld	r0, Z+
    2f30:	0d 92       	st	X+, r0
    2f32:	8a 95       	dec	r24
    2f34:	e1 f7       	brne	.-8      	; 0x2f2e <_Z13uhreinstellenv+0xb8>
    2f36:	2d 88       	ldd	r2, Y+21	; 0x15
    2f38:	3e 88       	ldd	r3, Y+22	; 0x16
    2f3a:	1b 2d       	mov	r17, r11
		for(uint8_t i = 0; i<buffersize;i++){
			oled.draw_ASCI(buffer[i],charsize*i,8);
    2f3c:	f1 01       	movw	r30, r2
    2f3e:	61 91       	ld	r22, Z+
    2f40:	1f 01       	movw	r2, r30
    2f42:	28 e0       	ldi	r18, 0x08	; 8
    2f44:	41 2f       	mov	r20, r17
    2f46:	86 e4       	ldi	r24, 0x46	; 70
    2f48:	93 e0       	ldi	r25, 0x03	; 3
    2f4a:	0e 94 c8 07 	call	0xf90	; 0xf90 <_ZN7Display9draw_ASCIEhhh>
    2f4e:	1a 5f       	subi	r17, 0xFA	; 250
		buffersize=sprintf(buffer,"Uhreinstellung");
		for(uint8_t i = 0; i<buffersize;i++){
			oled.draw_ASCI(buffer[i],charsize*i,0);
		}
		buffersize=sprintf(buffer,"--------------");
		for(uint8_t i = 0; i<buffersize;i++){
    2f50:	14 35       	cpi	r17, 0x54	; 84
    2f52:	a1 f7       	brne	.-24     	; 0x2f3c <_Z13uhreinstellenv+0xc6>
			oled.draw_ASCI(buffer[i],charsize*i,8);
		}
		buffer[0]=rtc.Stunden/10;
    2f54:	ed e8       	ldi	r30, 0x8D	; 141
    2f56:	f7 e0       	ldi	r31, 0x07	; 7
    2f58:	80 81       	ld	r24, Z
    2f5a:	8a 9d       	mul	r24, r10
    2f5c:	91 2d       	mov	r25, r1
    2f5e:	11 24       	eor	r1, r1
    2f60:	96 95       	lsr	r25
    2f62:	96 95       	lsr	r25
    2f64:	96 95       	lsr	r25
    2f66:	99 83       	std	Y+1, r25	; 0x01
		buffer[1]=rtc.Stunden%10;
    2f68:	99 0f       	add	r25, r25
    2f6a:	29 2f       	mov	r18, r25
    2f6c:	22 0f       	add	r18, r18
    2f6e:	22 0f       	add	r18, r18
    2f70:	92 0f       	add	r25, r18
    2f72:	89 1b       	sub	r24, r25
    2f74:	8a 83       	std	Y+2, r24	; 0x02
		buffer[2]=':';
    2f76:	fa e3       	ldi	r31, 0x3A	; 58
    2f78:	fb 83       	std	Y+3, r31	; 0x03
		buffer[3]=rtc.Minuten/10;
    2f7a:	ee e8       	ldi	r30, 0x8E	; 142
    2f7c:	f7 e0       	ldi	r31, 0x07	; 7
    2f7e:	80 81       	ld	r24, Z
    2f80:	8a 9d       	mul	r24, r10
    2f82:	91 2d       	mov	r25, r1
    2f84:	11 24       	eor	r1, r1
    2f86:	96 95       	lsr	r25
    2f88:	96 95       	lsr	r25
    2f8a:	96 95       	lsr	r25
    2f8c:	9c 83       	std	Y+4, r25	; 0x04
		buffer[4]=rtc.Minuten%10;
    2f8e:	99 0f       	add	r25, r25
    2f90:	29 2f       	mov	r18, r25
    2f92:	22 0f       	add	r18, r18
    2f94:	22 0f       	add	r18, r18
    2f96:	92 0f       	add	r25, r18
    2f98:	89 1b       	sub	r24, r25
    2f9a:	8d 83       	std	Y+5, r24	; 0x05
		buffer[5]=' ';
    2f9c:	80 e2       	ldi	r24, 0x20	; 32
    2f9e:	8e 83       	std	Y+6, r24	; 0x06
		buffer[6]=rtc.Tag/10;
    2fa0:	f2 01       	movw	r30, r4
    2fa2:	80 81       	ld	r24, Z
    2fa4:	8a 9d       	mul	r24, r10
    2fa6:	91 2d       	mov	r25, r1
    2fa8:	11 24       	eor	r1, r1
    2faa:	96 95       	lsr	r25
    2fac:	96 95       	lsr	r25
    2fae:	96 95       	lsr	r25
    2fb0:	9f 83       	std	Y+7, r25	; 0x07
		buffer[7]=rtc.Tag%10;
    2fb2:	99 0f       	add	r25, r25
    2fb4:	29 2f       	mov	r18, r25
    2fb6:	22 0f       	add	r18, r18
    2fb8:	22 0f       	add	r18, r18
    2fba:	92 0f       	add	r25, r18
    2fbc:	89 1b       	sub	r24, r25
    2fbe:	88 87       	std	Y+8, r24	; 0x08
		buffer[8]='.';
    2fc0:	8e e2       	ldi	r24, 0x2E	; 46
    2fc2:	89 87       	std	Y+9, r24	; 0x09
		buffer[9]=rtc.Monat/10;
    2fc4:	f6 01       	movw	r30, r12
    2fc6:	90 81       	ld	r25, Z
    2fc8:	9a 9d       	mul	r25, r10
    2fca:	21 2d       	mov	r18, r1
    2fcc:	11 24       	eor	r1, r1
    2fce:	26 95       	lsr	r18
    2fd0:	26 95       	lsr	r18
    2fd2:	26 95       	lsr	r18
    2fd4:	2a 87       	std	Y+10, r18	; 0x0a
		buffer[10]=rtc.Monat%10;
    2fd6:	22 0f       	add	r18, r18
    2fd8:	32 2f       	mov	r19, r18
    2fda:	33 0f       	add	r19, r19
    2fdc:	33 0f       	add	r19, r19
    2fde:	23 0f       	add	r18, r19
    2fe0:	92 1b       	sub	r25, r18
    2fe2:	9b 87       	std	Y+11, r25	; 0x0b
		buffer[11]='.';
    2fe4:	8c 87       	std	Y+12, r24	; 0x0c
		buffer[12]=rtc.Jahr/10;
    2fe6:	e4 e9       	ldi	r30, 0x94	; 148
    2fe8:	f7 e0       	ldi	r31, 0x07	; 7
    2fea:	80 81       	ld	r24, Z
    2fec:	8a 9d       	mul	r24, r10
    2fee:	91 2d       	mov	r25, r1
    2ff0:	11 24       	eor	r1, r1
    2ff2:	96 95       	lsr	r25
    2ff4:	96 95       	lsr	r25
    2ff6:	96 95       	lsr	r25
    2ff8:	9d 87       	std	Y+13, r25	; 0x0d
		buffer[13]=rtc.Jahr%10;
    2ffa:	99 0f       	add	r25, r25
    2ffc:	29 2f       	mov	r18, r25
    2ffe:	22 0f       	add	r18, r18
    3000:	22 0f       	add	r18, r18
    3002:	92 0f       	add	r25, r18
    3004:	89 1b       	sub	r24, r25
    3006:	8e 87       	std	Y+14, r24	; 0x0e
    3008:	3b 2c       	mov	r3, r11
    300a:	01 e0       	ldi	r16, 0x01	; 1
    300c:	1b 2d       	mov	r17, r11
    300e:	04 c0       	rjmp	.+8      	; 0x3018 <_Z13uhreinstellenv+0x1a2>
    3010:	1f 5f       	subi	r17, 0xFF	; 255
    3012:	0f 5f       	subi	r16, 0xFF	; 255
    3014:	f0 e1       	ldi	r31, 0x10	; 16
    3016:	3f 0e       	add	r3, r31
		buffersize=14;
		for(uint8_t i = 0; i<5;i++){
			if(i!=2){
    3018:	12 30       	cpi	r17, 0x02	; 2
    301a:	69 f0       	breq	.+26     	; 0x3036 <_Z13uhreinstellenv+0x1c0>
				oled.draw_number16x16(buffer[i],i*numbersmalsize,2*charhighte);
    301c:	20 e1       	ldi	r18, 0x10	; 16
    301e:	43 2d       	mov	r20, r3
    3020:	f7 01       	movw	r30, r14
    3022:	e1 0f       	add	r30, r17
    3024:	f1 1d       	adc	r31, r1
    3026:	60 81       	ld	r22, Z
    3028:	86 e4       	ldi	r24, 0x46	; 70
    302a:	93 e0       	ldi	r25, 0x03	; 3
    302c:	0e 94 4c 08 	call	0x1098	; 0x1098 <_ZN7Display16draw_number16x16Ehhh>
		buffer[10]=rtc.Monat%10;
		buffer[11]='.';
		buffer[12]=rtc.Jahr/10;
		buffer[13]=rtc.Jahr%10;
		buffersize=14;
		for(uint8_t i = 0; i<5;i++){
    3030:	05 30       	cpi	r16, 0x05	; 5
    3032:	70 f3       	brcs	.-36     	; 0x3010 <_Z13uhreinstellenv+0x19a>
    3034:	08 c0       	rjmp	.+16     	; 0x3046 <_Z13uhreinstellenv+0x1d0>
			if(i!=2){
				oled.draw_number16x16(buffer[i],i*numbersmalsize,2*charhighte);
			}
			else {
				oled.draw_ASCI(buffer[i],i*numbersmalsize+numbersmalsize/2,2*charhighte+charhighte/2);
    3036:	24 e1       	ldi	r18, 0x14	; 20
    3038:	48 e2       	ldi	r20, 0x28	; 40
    303a:	6b 81       	ldd	r22, Y+3	; 0x03
    303c:	86 e4       	ldi	r24, 0x46	; 70
    303e:	93 e0       	ldi	r25, 0x03	; 3
    3040:	0e 94 c8 07 	call	0xf90	; 0xf90 <_ZN7Display9draw_ASCIEhhh>
    3044:	e5 cf       	rjmp	.-54     	; 0x3010 <_Z13uhreinstellenv+0x19a>
    3046:	8e 01       	movw	r16, r28
    3048:	09 5f       	subi	r16, 0xF9	; 249
    304a:	1f 4f       	sbci	r17, 0xFF	; 255
		buffer[10]=rtc.Monat%10;
		buffer[11]='.';
		buffer[12]=rtc.Jahr/10;
		buffer[13]=rtc.Jahr%10;
		buffersize=14;
		for(uint8_t i = 0; i<5;i++){
    304c:	2b 2c       	mov	r2, r11
    304e:	0f 2e       	mov	r0, r31
    3050:	f6 e0       	ldi	r31, 0x06	; 6
    3052:	3f 2e       	mov	r3, r31
    3054:	f0 2d       	mov	r31, r0
			else {
				oled.draw_ASCI(buffer[i],i*numbersmalsize+numbersmalsize/2,2*charhighte+charhighte/2);
			}
		}
		for(uint8_t i = 6; i<buffersize;i++){
			if(i!=8 && i!=11){
    3056:	88 e0       	ldi	r24, 0x08	; 8
    3058:	38 16       	cp	r3, r24
    305a:	61 f0       	breq	.+24     	; 0x3074 <_Z13uhreinstellenv+0x1fe>
    305c:	9b e0       	ldi	r25, 0x0B	; 11
    305e:	39 16       	cp	r3, r25
    3060:	49 f0       	breq	.+18     	; 0x3074 <_Z13uhreinstellenv+0x1fe>
				oled.draw_number16x16(buffer[i],i*numbersmalsize-6*numbersmalsize,4*charhighte);
    3062:	20 e2       	ldi	r18, 0x20	; 32
    3064:	42 2d       	mov	r20, r2
    3066:	f8 01       	movw	r30, r16
    3068:	60 81       	ld	r22, Z
    306a:	86 e4       	ldi	r24, 0x46	; 70
    306c:	93 e0       	ldi	r25, 0x03	; 3
    306e:	0e 94 4c 08 	call	0x1098	; 0x1098 <_ZN7Display16draw_number16x16Ehhh>
    3072:	09 c0       	rjmp	.+18     	; 0x3086 <_Z13uhreinstellenv+0x210>
			}
			else {
				oled.draw_ASCI(buffer[i],i*numbersmalsize+numbersmalsize/2-6*numbersmalsize,5*charhighte);
    3074:	28 e2       	ldi	r18, 0x28	; 40
    3076:	48 e0       	ldi	r20, 0x08	; 8
    3078:	42 0d       	add	r20, r2
    307a:	f8 01       	movw	r30, r16
    307c:	60 81       	ld	r22, Z
    307e:	86 e4       	ldi	r24, 0x46	; 70
    3080:	93 e0       	ldi	r25, 0x03	; 3
    3082:	0e 94 c8 07 	call	0xf90	; 0xf90 <_ZN7Display9draw_ASCIEhhh>
			}
			else {
				oled.draw_ASCI(buffer[i],i*numbersmalsize+numbersmalsize/2,2*charhighte+charhighte/2);
			}
		}
		for(uint8_t i = 6; i<buffersize;i++){
    3086:	33 94       	inc	r3
    3088:	0f 5f       	subi	r16, 0xFF	; 255
    308a:	1f 4f       	sbci	r17, 0xFF	; 255
    308c:	f0 e1       	ldi	r31, 0x10	; 16
    308e:	2f 0e       	add	r2, r31
    3090:	8e e0       	ldi	r24, 0x0E	; 14
    3092:	38 12       	cpse	r3, r24
    3094:	e0 cf       	rjmp	.-64     	; 0x3056 <_Z13uhreinstellenv+0x1e0>
			else {
				oled.draw_ASCI(buffer[i],i*numbersmalsize+numbersmalsize/2-6*numbersmalsize,5*charhighte);
			}
		}

		oled.sendFrame();
    3096:	86 e4       	ldi	r24, 0x46	; 70
    3098:	93 e0       	ldi	r25, 0x03	; 3
    309a:	0e 94 8f 05 	call	0xb1e	; 0xb1e <_ZN7Display9sendFrameEv>
		oled.clearFrame();
    309e:	86 e4       	ldi	r24, 0x46	; 70
    30a0:	93 e0       	ldi	r25, 0x03	; 3
    30a2:	0e 94 05 05 	call	0xa0a	; 0xa0a <_ZN7Display10clearFrameEv>
		switch (pos) {
    30a6:	89 2d       	mov	r24, r9
    30a8:	90 e0       	ldi	r25, 0x00	; 0
    30aa:	8a 30       	cpi	r24, 0x0A	; 10
    30ac:	91 05       	cpc	r25, r1
    30ae:	08 f0       	brcs	.+2      	; 0x30b2 <_Z13uhreinstellenv+0x23c>
    30b0:	47 c2       	rjmp	.+1166   	; 0x3540 <_Z13uhreinstellenv+0x6ca>
    30b2:	fc 01       	movw	r30, r24
    30b4:	ea 5b       	subi	r30, 0xBA	; 186
    30b6:	ff 4f       	sbci	r31, 0xFF	; 255
    30b8:	0c 94 c0 2f 	jmp	0x5f80	; 0x5f80 <__tablejump2__>
			case 0:
				rtc.Stunden=Tastatur.ZahlenausTastatur()*10;
    30bc:	85 e4       	ldi	r24, 0x45	; 69
    30be:	93 e0       	ldi	r25, 0x03	; 3
    30c0:	0e 94 18 23 	call	0x4630	; 0x4630 <_ZN9Interface17ZahlenausTastaturEv>
    30c4:	88 0f       	add	r24, r24
    30c6:	98 2f       	mov	r25, r24
    30c8:	99 0f       	add	r25, r25
    30ca:	99 0f       	add	r25, r25
    30cc:	89 0f       	add	r24, r25
				if(rtc.Stunden>=24){
    30ce:	88 31       	cpi	r24, 0x18	; 24
    30d0:	08 f4       	brcc	.+2      	; 0x30d4 <_Z13uhreinstellenv+0x25e>
    30d2:	51 c2       	rjmp	.+1186   	; 0x3576 <_Z13uhreinstellenv+0x700>
					rtc.Stunden=0;
    30d4:	ed e8       	ldi	r30, 0x8D	; 141
    30d6:	f7 e0       	ldi	r31, 0x07	; 7
    30d8:	10 82       	st	Z, r1
					pos=-1;
					buffersize=sprintf(buffer,"Stunden falsch");
    30da:	e6 ed       	ldi	r30, 0xD6	; 214
    30dc:	f2 e0       	ldi	r31, 0x02	; 2
    30de:	a7 2d       	mov	r26, r7
    30e0:	b8 2d       	mov	r27, r8
    30e2:	86 2d       	mov	r24, r6
    30e4:	01 90       	ld	r0, Z+
    30e6:	0d 92       	st	X+, r0
    30e8:	8a 95       	dec	r24
    30ea:	e1 f7       	brne	.-8      	; 0x30e4 <_Z13uhreinstellenv+0x26e>
    30ec:	2d 88       	ldd	r2, Y+21	; 0x15
    30ee:	3e 88       	ldd	r3, Y+22	; 0x16
    30f0:	1b 2d       	mov	r17, r11
					for(uint8_t i = 0; i<buffersize;i++){
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
    30f2:	f1 01       	movw	r30, r2
    30f4:	61 91       	ld	r22, Z+
    30f6:	1f 01       	movw	r2, r30
    30f8:	28 e3       	ldi	r18, 0x38	; 56
    30fa:	41 2f       	mov	r20, r17
    30fc:	86 e4       	ldi	r24, 0x46	; 70
    30fe:	93 e0       	ldi	r25, 0x03	; 3
    3100:	0e 94 c8 07 	call	0xf90	; 0xf90 <_ZN7Display9draw_ASCIEhhh>
    3104:	1a 5f       	subi	r17, 0xFA	; 250
				rtc.Stunden=Tastatur.ZahlenausTastatur()*10;
				if(rtc.Stunden>=24){
					rtc.Stunden=0;
					pos=-1;
					buffersize=sprintf(buffer,"Stunden falsch");
					for(uint8_t i = 0; i<buffersize;i++){
    3106:	14 35       	cpi	r17, 0x54	; 84
    3108:	a1 f7       	brne	.-24     	; 0x30f2 <_Z13uhreinstellenv+0x27c>
    310a:	39 c2       	rjmp	.+1138   	; 0x357e <_Z13uhreinstellenv+0x708>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 1:
				rtc.Stunden+=Tastatur.ZahlenausTastatur();
    310c:	85 e4       	ldi	r24, 0x45	; 69
    310e:	93 e0       	ldi	r25, 0x03	; 3
    3110:	0e 94 18 23 	call	0x4630	; 0x4630 <_ZN9Interface17ZahlenausTastaturEv>
    3114:	ed e8       	ldi	r30, 0x8D	; 141
    3116:	f7 e0       	ldi	r31, 0x07	; 7
    3118:	20 81       	ld	r18, Z
    311a:	90 e0       	ldi	r25, 0x00	; 0
    311c:	82 0f       	add	r24, r18
    311e:	91 1d       	adc	r25, r1
				if(rtc.Stunden>=24){
    3120:	88 31       	cpi	r24, 0x18	; 24
    3122:	10 f4       	brcc	.+4      	; 0x3128 <_Z13uhreinstellenv+0x2b2>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 1:
				rtc.Stunden+=Tastatur.ZahlenausTastatur();
    3124:	80 83       	st	Z, r24
    3126:	5e c2       	rjmp	.+1212   	; 0x35e4 <_Z13uhreinstellenv+0x76e>
				if(rtc.Stunden>=24){
					rtc.Stunden=0;
    3128:	ed e8       	ldi	r30, 0x8D	; 141
    312a:	f7 e0       	ldi	r31, 0x07	; 7
    312c:	10 82       	st	Z, r1
					pos=-1;
					buffersize=sprintf(buffer,"Stunden falsch");
    312e:	e6 ed       	ldi	r30, 0xD6	; 214
    3130:	f2 e0       	ldi	r31, 0x02	; 2
    3132:	a7 2d       	mov	r26, r7
    3134:	b8 2d       	mov	r27, r8
    3136:	86 2d       	mov	r24, r6
    3138:	01 90       	ld	r0, Z+
    313a:	0d 92       	st	X+, r0
    313c:	8a 95       	dec	r24
    313e:	e1 f7       	brne	.-8      	; 0x3138 <_Z13uhreinstellenv+0x2c2>
    3140:	2d 88       	ldd	r2, Y+21	; 0x15
    3142:	3e 88       	ldd	r3, Y+22	; 0x16
    3144:	1b 2d       	mov	r17, r11
					for(uint8_t i = 0; i<buffersize;i++){
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
    3146:	f1 01       	movw	r30, r2
    3148:	61 91       	ld	r22, Z+
    314a:	1f 01       	movw	r2, r30
    314c:	28 e3       	ldi	r18, 0x38	; 56
    314e:	41 2f       	mov	r20, r17
    3150:	86 e4       	ldi	r24, 0x46	; 70
    3152:	93 e0       	ldi	r25, 0x03	; 3
    3154:	0e 94 c8 07 	call	0xf90	; 0xf90 <_ZN7Display9draw_ASCIEhhh>
    3158:	1a 5f       	subi	r17, 0xFA	; 250
				rtc.Stunden+=Tastatur.ZahlenausTastatur();
				if(rtc.Stunden>=24){
					rtc.Stunden=0;
					pos=-1;
					buffersize=sprintf(buffer,"Stunden falsch");
					for(uint8_t i = 0; i<buffersize;i++){
    315a:	14 35       	cpi	r17, 0x54	; 84
    315c:	a1 f7       	brne	.-24     	; 0x3146 <_Z13uhreinstellenv+0x2d0>
    315e:	12 c2       	rjmp	.+1060   	; 0x3584 <_Z13uhreinstellenv+0x70e>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 2:
				rtc.Minuten=Tastatur.ZahlenausTastatur()*10;
    3160:	85 e4       	ldi	r24, 0x45	; 69
    3162:	93 e0       	ldi	r25, 0x03	; 3
    3164:	0e 94 18 23 	call	0x4630	; 0x4630 <_ZN9Interface17ZahlenausTastaturEv>
    3168:	88 0f       	add	r24, r24
    316a:	98 2f       	mov	r25, r24
    316c:	99 0f       	add	r25, r25
    316e:	99 0f       	add	r25, r25
    3170:	89 0f       	add	r24, r25
				if(rtc.Minuten>=60){
    3172:	8c 33       	cpi	r24, 0x3C	; 60
    3174:	20 f4       	brcc	.+8      	; 0x317e <_Z13uhreinstellenv+0x308>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 2:
				rtc.Minuten=Tastatur.ZahlenausTastatur()*10;
    3176:	ee e8       	ldi	r30, 0x8E	; 142
    3178:	f7 e0       	ldi	r31, 0x07	; 7
    317a:	80 83       	st	Z, r24
    317c:	33 c2       	rjmp	.+1126   	; 0x35e4 <_Z13uhreinstellenv+0x76e>
				if(rtc.Minuten>=60){
					rtc.Minuten=0;
    317e:	ee e8       	ldi	r30, 0x8E	; 142
    3180:	f7 e0       	ldi	r31, 0x07	; 7
    3182:	10 82       	st	Z, r1
					pos=1;
					buffersize=sprintf(buffer,"Minuten falsch");
    3184:	e5 ee       	ldi	r30, 0xE5	; 229
    3186:	f2 e0       	ldi	r31, 0x02	; 2
    3188:	a7 2d       	mov	r26, r7
    318a:	b8 2d       	mov	r27, r8
    318c:	86 2d       	mov	r24, r6
    318e:	01 90       	ld	r0, Z+
    3190:	0d 92       	st	X+, r0
    3192:	8a 95       	dec	r24
    3194:	e1 f7       	brne	.-8      	; 0x318e <_Z13uhreinstellenv+0x318>
    3196:	2d 88       	ldd	r2, Y+21	; 0x15
    3198:	3e 88       	ldd	r3, Y+22	; 0x16
    319a:	1b 2d       	mov	r17, r11
					for(uint8_t i = 0; i<buffersize;i++){
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
    319c:	f1 01       	movw	r30, r2
    319e:	61 91       	ld	r22, Z+
    31a0:	1f 01       	movw	r2, r30
    31a2:	28 e3       	ldi	r18, 0x38	; 56
    31a4:	41 2f       	mov	r20, r17
    31a6:	86 e4       	ldi	r24, 0x46	; 70
    31a8:	93 e0       	ldi	r25, 0x03	; 3
    31aa:	0e 94 c8 07 	call	0xf90	; 0xf90 <_ZN7Display9draw_ASCIEhhh>
    31ae:	1a 5f       	subi	r17, 0xFA	; 250
				rtc.Minuten=Tastatur.ZahlenausTastatur()*10;
				if(rtc.Minuten>=60){
					rtc.Minuten=0;
					pos=1;
					buffersize=sprintf(buffer,"Minuten falsch");
					for(uint8_t i = 0; i<buffersize;i++){
    31b0:	14 35       	cpi	r17, 0x54	; 84
    31b2:	a1 f7       	brne	.-24     	; 0x319c <_Z13uhreinstellenv+0x326>
    31b4:	ea c1       	rjmp	.+980    	; 0x358a <_Z13uhreinstellenv+0x714>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 3:
				rtc.Minuten+=Tastatur.ZahlenausTastatur();
    31b6:	85 e4       	ldi	r24, 0x45	; 69
    31b8:	93 e0       	ldi	r25, 0x03	; 3
    31ba:	0e 94 18 23 	call	0x4630	; 0x4630 <_ZN9Interface17ZahlenausTastaturEv>
    31be:	ee e8       	ldi	r30, 0x8E	; 142
    31c0:	f7 e0       	ldi	r31, 0x07	; 7
    31c2:	20 81       	ld	r18, Z
    31c4:	90 e0       	ldi	r25, 0x00	; 0
    31c6:	82 0f       	add	r24, r18
    31c8:	91 1d       	adc	r25, r1
				if(rtc.Minuten>=60){
    31ca:	8c 33       	cpi	r24, 0x3C	; 60
    31cc:	10 f4       	brcc	.+4      	; 0x31d2 <_Z13uhreinstellenv+0x35c>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 3:
				rtc.Minuten+=Tastatur.ZahlenausTastatur();
    31ce:	80 83       	st	Z, r24
    31d0:	09 c2       	rjmp	.+1042   	; 0x35e4 <_Z13uhreinstellenv+0x76e>
				if(rtc.Minuten>=60){
					rtc.Minuten=0;
    31d2:	ee e8       	ldi	r30, 0x8E	; 142
    31d4:	f7 e0       	ldi	r31, 0x07	; 7
    31d6:	10 82       	st	Z, r1
					pos=1;
					buffersize=sprintf(buffer,"Minuten falsch");
    31d8:	e5 ee       	ldi	r30, 0xE5	; 229
    31da:	f2 e0       	ldi	r31, 0x02	; 2
    31dc:	a7 2d       	mov	r26, r7
    31de:	b8 2d       	mov	r27, r8
    31e0:	86 2d       	mov	r24, r6
    31e2:	01 90       	ld	r0, Z+
    31e4:	0d 92       	st	X+, r0
    31e6:	8a 95       	dec	r24
    31e8:	e1 f7       	brne	.-8      	; 0x31e2 <_Z13uhreinstellenv+0x36c>
    31ea:	2d 88       	ldd	r2, Y+21	; 0x15
    31ec:	3e 88       	ldd	r3, Y+22	; 0x16
    31ee:	1b 2d       	mov	r17, r11
					for(uint8_t i = 0; i<buffersize;i++){
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
    31f0:	f1 01       	movw	r30, r2
    31f2:	61 91       	ld	r22, Z+
    31f4:	1f 01       	movw	r2, r30
    31f6:	28 e3       	ldi	r18, 0x38	; 56
    31f8:	41 2f       	mov	r20, r17
    31fa:	86 e4       	ldi	r24, 0x46	; 70
    31fc:	93 e0       	ldi	r25, 0x03	; 3
    31fe:	0e 94 c8 07 	call	0xf90	; 0xf90 <_ZN7Display9draw_ASCIEhhh>
    3202:	1a 5f       	subi	r17, 0xFA	; 250
				rtc.Minuten+=Tastatur.ZahlenausTastatur();
				if(rtc.Minuten>=60){
					rtc.Minuten=0;
					pos=1;
					buffersize=sprintf(buffer,"Minuten falsch");
					for(uint8_t i = 0; i<buffersize;i++){
    3204:	14 35       	cpi	r17, 0x54	; 84
    3206:	a1 f7       	brne	.-24     	; 0x31f0 <_Z13uhreinstellenv+0x37a>
    3208:	c3 c1       	rjmp	.+902    	; 0x3590 <_Z13uhreinstellenv+0x71a>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 4:
				rtc.Tag=Tastatur.ZahlenausTastatur()*10;
    320a:	85 e4       	ldi	r24, 0x45	; 69
    320c:	93 e0       	ldi	r25, 0x03	; 3
    320e:	0e 94 18 23 	call	0x4630	; 0x4630 <_ZN9Interface17ZahlenausTastaturEv>
    3212:	88 0f       	add	r24, r24
    3214:	98 2f       	mov	r25, r24
    3216:	99 0f       	add	r25, r25
    3218:	99 0f       	add	r25, r25
    321a:	89 0f       	add	r24, r25
				if(rtc.Tag>=32){
    321c:	80 32       	cpi	r24, 0x20	; 32
    321e:	18 f4       	brcc	.+6      	; 0x3226 <_Z13uhreinstellenv+0x3b0>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 4:
				rtc.Tag=Tastatur.ZahlenausTastatur()*10;
    3220:	f2 01       	movw	r30, r4
    3222:	80 83       	st	Z, r24
    3224:	df c1       	rjmp	.+958    	; 0x35e4 <_Z13uhreinstellenv+0x76e>
				if(rtc.Tag>=32){
					rtc.Tag=0;
    3226:	f2 01       	movw	r30, r4
    3228:	10 82       	st	Z, r1
					pos=3;
					buffersize=sprintf(buffer,"Tag falsch");
    322a:	8b e0       	ldi	r24, 0x0B	; 11
    322c:	e4 ef       	ldi	r30, 0xF4	; 244
    322e:	f2 e0       	ldi	r31, 0x02	; 2
    3230:	a7 2d       	mov	r26, r7
    3232:	b8 2d       	mov	r27, r8
    3234:	01 90       	ld	r0, Z+
    3236:	0d 92       	st	X+, r0
    3238:	8a 95       	dec	r24
    323a:	e1 f7       	brne	.-8      	; 0x3234 <_Z13uhreinstellenv+0x3be>
    323c:	2d 88       	ldd	r2, Y+21	; 0x15
    323e:	3e 88       	ldd	r3, Y+22	; 0x16
    3240:	1b 2d       	mov	r17, r11
					for(uint8_t i = 0; i<buffersize;i++){
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
    3242:	f1 01       	movw	r30, r2
    3244:	61 91       	ld	r22, Z+
    3246:	1f 01       	movw	r2, r30
    3248:	28 e3       	ldi	r18, 0x38	; 56
    324a:	41 2f       	mov	r20, r17
    324c:	86 e4       	ldi	r24, 0x46	; 70
    324e:	93 e0       	ldi	r25, 0x03	; 3
    3250:	0e 94 c8 07 	call	0xf90	; 0xf90 <_ZN7Display9draw_ASCIEhhh>
    3254:	1a 5f       	subi	r17, 0xFA	; 250
				rtc.Tag=Tastatur.ZahlenausTastatur()*10;
				if(rtc.Tag>=32){
					rtc.Tag=0;
					pos=3;
					buffersize=sprintf(buffer,"Tag falsch");
					for(uint8_t i = 0; i<buffersize;i++){
    3256:	1c 33       	cpi	r17, 0x3C	; 60
    3258:	a1 f7       	brne	.-24     	; 0x3242 <_Z13uhreinstellenv+0x3cc>
    325a:	9d c1       	rjmp	.+826    	; 0x3596 <_Z13uhreinstellenv+0x720>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 5:
				rtc.Tag+=Tastatur.ZahlenausTastatur();
    325c:	85 e4       	ldi	r24, 0x45	; 69
    325e:	93 e0       	ldi	r25, 0x03	; 3
    3260:	0e 94 18 23 	call	0x4630	; 0x4630 <_ZN9Interface17ZahlenausTastaturEv>
    3264:	f2 01       	movw	r30, r4
    3266:	20 81       	ld	r18, Z
    3268:	90 e0       	ldi	r25, 0x00	; 0
    326a:	82 0f       	add	r24, r18
    326c:	91 1d       	adc	r25, r1
				if(rtc.Tag>=32){
    326e:	80 32       	cpi	r24, 0x20	; 32
    3270:	10 f4       	brcc	.+4      	; 0x3276 <_Z13uhreinstellenv+0x400>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 5:
				rtc.Tag+=Tastatur.ZahlenausTastatur();
    3272:	80 83       	st	Z, r24
    3274:	b7 c1       	rjmp	.+878    	; 0x35e4 <_Z13uhreinstellenv+0x76e>
				if(rtc.Tag>=32){
					rtc.Tag=0;
    3276:	f2 01       	movw	r30, r4
    3278:	10 82       	st	Z, r1
					pos=3;
					buffersize=sprintf(buffer,"Tag falsch");
    327a:	8b e0       	ldi	r24, 0x0B	; 11
    327c:	e4 ef       	ldi	r30, 0xF4	; 244
    327e:	f2 e0       	ldi	r31, 0x02	; 2
    3280:	a7 2d       	mov	r26, r7
    3282:	b8 2d       	mov	r27, r8
    3284:	01 90       	ld	r0, Z+
    3286:	0d 92       	st	X+, r0
    3288:	8a 95       	dec	r24
    328a:	e1 f7       	brne	.-8      	; 0x3284 <_Z13uhreinstellenv+0x40e>
    328c:	2d 88       	ldd	r2, Y+21	; 0x15
    328e:	3e 88       	ldd	r3, Y+22	; 0x16
    3290:	1b 2d       	mov	r17, r11
					for(uint8_t i = 0; i<buffersize;i++){
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
    3292:	f1 01       	movw	r30, r2
    3294:	61 91       	ld	r22, Z+
    3296:	1f 01       	movw	r2, r30
    3298:	28 e3       	ldi	r18, 0x38	; 56
    329a:	41 2f       	mov	r20, r17
    329c:	86 e4       	ldi	r24, 0x46	; 70
    329e:	93 e0       	ldi	r25, 0x03	; 3
    32a0:	0e 94 c8 07 	call	0xf90	; 0xf90 <_ZN7Display9draw_ASCIEhhh>
    32a4:	1a 5f       	subi	r17, 0xFA	; 250
				rtc.Tag+=Tastatur.ZahlenausTastatur();
				if(rtc.Tag>=32){
					rtc.Tag=0;
					pos=3;
					buffersize=sprintf(buffer,"Tag falsch");
					for(uint8_t i = 0; i<buffersize;i++){
    32a6:	1c 33       	cpi	r17, 0x3C	; 60
    32a8:	a1 f7       	brne	.-24     	; 0x3292 <_Z13uhreinstellenv+0x41c>
    32aa:	7a c1       	rjmp	.+756    	; 0x35a0 <_Z13uhreinstellenv+0x72a>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 6:
				rtc.Monat=Tastatur.ZahlenausTastatur()*10;
    32ac:	85 e4       	ldi	r24, 0x45	; 69
    32ae:	93 e0       	ldi	r25, 0x03	; 3
    32b0:	0e 94 18 23 	call	0x4630	; 0x4630 <_ZN9Interface17ZahlenausTastaturEv>
    32b4:	88 0f       	add	r24, r24
    32b6:	98 2f       	mov	r25, r24
    32b8:	99 0f       	add	r25, r25
    32ba:	99 0f       	add	r25, r25
    32bc:	89 0f       	add	r24, r25
				if(rtc.Monat>=13){
    32be:	8d 30       	cpi	r24, 0x0D	; 13
    32c0:	18 f4       	brcc	.+6      	; 0x32c8 <_Z13uhreinstellenv+0x452>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 6:
				rtc.Monat=Tastatur.ZahlenausTastatur()*10;
    32c2:	f6 01       	movw	r30, r12
    32c4:	80 83       	st	Z, r24
    32c6:	8e c1       	rjmp	.+796    	; 0x35e4 <_Z13uhreinstellenv+0x76e>
				if(rtc.Monat>=13){
					rtc.Monat=0;
    32c8:	f6 01       	movw	r30, r12
    32ca:	10 82       	st	Z, r1
					pos=5;
					buffersize=sprintf(buffer,"Monat falsch");
    32cc:	8d e0       	ldi	r24, 0x0D	; 13
    32ce:	ef ef       	ldi	r30, 0xFF	; 255
    32d0:	f2 e0       	ldi	r31, 0x02	; 2
    32d2:	a7 2d       	mov	r26, r7
    32d4:	b8 2d       	mov	r27, r8
    32d6:	01 90       	ld	r0, Z+
    32d8:	0d 92       	st	X+, r0
    32da:	8a 95       	dec	r24
    32dc:	e1 f7       	brne	.-8      	; 0x32d6 <_Z13uhreinstellenv+0x460>
    32de:	2d 88       	ldd	r2, Y+21	; 0x15
    32e0:	3e 88       	ldd	r3, Y+22	; 0x16
    32e2:	1b 2d       	mov	r17, r11
					for(uint8_t i = 0; i<buffersize;i++){
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
    32e4:	f1 01       	movw	r30, r2
    32e6:	61 91       	ld	r22, Z+
    32e8:	1f 01       	movw	r2, r30
    32ea:	28 e3       	ldi	r18, 0x38	; 56
    32ec:	41 2f       	mov	r20, r17
    32ee:	86 e4       	ldi	r24, 0x46	; 70
    32f0:	93 e0       	ldi	r25, 0x03	; 3
    32f2:	0e 94 c8 07 	call	0xf90	; 0xf90 <_ZN7Display9draw_ASCIEhhh>
    32f6:	1a 5f       	subi	r17, 0xFA	; 250
				rtc.Monat=Tastatur.ZahlenausTastatur()*10;
				if(rtc.Monat>=13){
					rtc.Monat=0;
					pos=5;
					buffersize=sprintf(buffer,"Monat falsch");
					for(uint8_t i = 0; i<buffersize;i++){
    32f8:	18 34       	cpi	r17, 0x48	; 72
    32fa:	a1 f7       	brne	.-24     	; 0x32e4 <_Z13uhreinstellenv+0x46e>
    32fc:	56 c1       	rjmp	.+684    	; 0x35aa <_Z13uhreinstellenv+0x734>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 7:
				rtc.Monat+=Tastatur.ZahlenausTastatur();
    32fe:	85 e4       	ldi	r24, 0x45	; 69
    3300:	93 e0       	ldi	r25, 0x03	; 3
    3302:	0e 94 18 23 	call	0x4630	; 0x4630 <_ZN9Interface17ZahlenausTastaturEv>
    3306:	f6 01       	movw	r30, r12
    3308:	20 81       	ld	r18, Z
    330a:	90 e0       	ldi	r25, 0x00	; 0
    330c:	82 0f       	add	r24, r18
    330e:	91 1d       	adc	r25, r1
				if(rtc.Monat>=13){
    3310:	8d 30       	cpi	r24, 0x0D	; 13
    3312:	10 f4       	brcc	.+4      	; 0x3318 <_Z13uhreinstellenv+0x4a2>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 7:
				rtc.Monat+=Tastatur.ZahlenausTastatur();
    3314:	80 83       	st	Z, r24
    3316:	1e c0       	rjmp	.+60     	; 0x3354 <_Z13uhreinstellenv+0x4de>
				if(rtc.Monat>=13){
					rtc.Monat=0;
    3318:	f6 01       	movw	r30, r12
    331a:	10 82       	st	Z, r1
					pos=5;
					buffersize=sprintf(buffer,"Monat falsch");
    331c:	8d e0       	ldi	r24, 0x0D	; 13
    331e:	ef ef       	ldi	r30, 0xFF	; 255
    3320:	f2 e0       	ldi	r31, 0x02	; 2
    3322:	a7 2d       	mov	r26, r7
    3324:	b8 2d       	mov	r27, r8
    3326:	01 90       	ld	r0, Z+
    3328:	0d 92       	st	X+, r0
    332a:	8a 95       	dec	r24
    332c:	e1 f7       	brne	.-8      	; 0x3326 <_Z13uhreinstellenv+0x4b0>
    332e:	2d 88       	ldd	r2, Y+21	; 0x15
    3330:	3e 88       	ldd	r3, Y+22	; 0x16
    3332:	1b 2d       	mov	r17, r11
					for(uint8_t i = 0; i<buffersize;i++){
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
    3334:	f1 01       	movw	r30, r2
    3336:	61 91       	ld	r22, Z+
    3338:	1f 01       	movw	r2, r30
    333a:	28 e3       	ldi	r18, 0x38	; 56
    333c:	41 2f       	mov	r20, r17
    333e:	86 e4       	ldi	r24, 0x46	; 70
    3340:	93 e0       	ldi	r25, 0x03	; 3
    3342:	0e 94 c8 07 	call	0xf90	; 0xf90 <_ZN7Display9draw_ASCIEhhh>
    3346:	1a 5f       	subi	r17, 0xFA	; 250
				rtc.Monat+=Tastatur.ZahlenausTastatur();
				if(rtc.Monat>=13){
					rtc.Monat=0;
					pos=5;
					buffersize=sprintf(buffer,"Monat falsch");
					for(uint8_t i = 0; i<buffersize;i++){
    3348:	18 34       	cpi	r17, 0x48	; 72
    334a:	a1 f7       	brne	.-24     	; 0x3334 <_Z13uhreinstellenv+0x4be>
				break;
			case 7:
				rtc.Monat+=Tastatur.ZahlenausTastatur();
				if(rtc.Monat>=13){
					rtc.Monat=0;
					pos=5;
    334c:	0f 2e       	mov	r0, r31
    334e:	f5 e0       	ldi	r31, 0x05	; 5
    3350:	9f 2e       	mov	r9, r31
    3352:	f0 2d       	mov	r31, r0
					buffersize=sprintf(buffer,"Monat falsch");
					for(uint8_t i = 0; i<buffersize;i++){
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				if(rtc.Monat==4||rtc.Monat==6||rtc.Monat==9||rtc.Monat==11){
    3354:	f6 01       	movw	r30, r12
    3356:	90 81       	ld	r25, Z
    3358:	89 2f       	mov	r24, r25
    335a:	8d 7f       	andi	r24, 0xFD	; 253
    335c:	84 30       	cpi	r24, 0x04	; 4
    335e:	11 f0       	breq	.+4      	; 0x3364 <_Z13uhreinstellenv+0x4ee>
    3360:	89 30       	cpi	r24, 0x09	; 9
    3362:	09 f5       	brne	.+66     	; 0x33a6 <_Z13uhreinstellenv+0x530>
					if(rtc.Tag>=31){
    3364:	f2 01       	movw	r30, r4
    3366:	80 81       	ld	r24, Z
    3368:	8f 31       	cpi	r24, 0x1F	; 31
    336a:	08 f4       	brcc	.+2      	; 0x336e <_Z13uhreinstellenv+0x4f8>
    336c:	ea c0       	rjmp	.+468    	; 0x3542 <_Z13uhreinstellenv+0x6cc>
						rtc.Tag=0;
    336e:	10 82       	st	Z, r1
						rtc.Monat=0;
    3370:	f6 01       	movw	r30, r12
    3372:	10 82       	st	Z, r1
						pos=3;
						buffersize=sprintf(buffer,"Tag falsch");
    3374:	8b e0       	ldi	r24, 0x0B	; 11
    3376:	e4 ef       	ldi	r30, 0xF4	; 244
    3378:	f2 e0       	ldi	r31, 0x02	; 2
    337a:	a7 2d       	mov	r26, r7
    337c:	b8 2d       	mov	r27, r8
    337e:	01 90       	ld	r0, Z+
    3380:	0d 92       	st	X+, r0
    3382:	8a 95       	dec	r24
    3384:	e1 f7       	brne	.-8      	; 0x337e <_Z13uhreinstellenv+0x508>
    3386:	2d 88       	ldd	r2, Y+21	; 0x15
    3388:	3e 88       	ldd	r3, Y+22	; 0x16
    338a:	1b 2d       	mov	r17, r11
						for(uint8_t i = 0; i<buffersize;i++){
							oled.draw_ASCI(buffer[i],charsize*i,7*8);
    338c:	f1 01       	movw	r30, r2
    338e:	61 91       	ld	r22, Z+
    3390:	1f 01       	movw	r2, r30
    3392:	28 e3       	ldi	r18, 0x38	; 56
    3394:	41 2f       	mov	r20, r17
    3396:	86 e4       	ldi	r24, 0x46	; 70
    3398:	93 e0       	ldi	r25, 0x03	; 3
    339a:	0e 94 c8 07 	call	0xf90	; 0xf90 <_ZN7Display9draw_ASCIEhhh>
    339e:	1a 5f       	subi	r17, 0xFA	; 250
					if(rtc.Tag>=31){
						rtc.Tag=0;
						rtc.Monat=0;
						pos=3;
						buffersize=sprintf(buffer,"Tag falsch");
						for(uint8_t i = 0; i<buffersize;i++){
    33a0:	1c 33       	cpi	r17, 0x3C	; 60
    33a2:	a1 f7       	brne	.-24     	; 0x338c <_Z13uhreinstellenv+0x516>
    33a4:	07 c1       	rjmp	.+526    	; 0x35b4 <_Z13uhreinstellenv+0x73e>
							oled.draw_ASCI(buffer[i],charsize*i,7*8);
						}
					}
				}
				else if(rtc.Monat==2){
    33a6:	92 30       	cpi	r25, 0x02	; 2
    33a8:	09 f0       	breq	.+2      	; 0x33ac <_Z13uhreinstellenv+0x536>
    33aa:	cb c0       	rjmp	.+406    	; 0x3542 <_Z13uhreinstellenv+0x6cc>
					if(rtc.Tag>=30){
    33ac:	f2 01       	movw	r30, r4
    33ae:	80 81       	ld	r24, Z
    33b0:	8e 31       	cpi	r24, 0x1E	; 30
    33b2:	08 f4       	brcc	.+2      	; 0x33b6 <_Z13uhreinstellenv+0x540>
    33b4:	c6 c0       	rjmp	.+396    	; 0x3542 <_Z13uhreinstellenv+0x6cc>
						rtc.Tag=0;
    33b6:	10 82       	st	Z, r1
						rtc.Monat=0;
    33b8:	f6 01       	movw	r30, r12
    33ba:	10 82       	st	Z, r1
						pos=3;
						buffersize=sprintf(buffer,"Tag falsch");
    33bc:	8b e0       	ldi	r24, 0x0B	; 11
    33be:	e4 ef       	ldi	r30, 0xF4	; 244
    33c0:	f2 e0       	ldi	r31, 0x02	; 2
    33c2:	a7 2d       	mov	r26, r7
    33c4:	b8 2d       	mov	r27, r8
    33c6:	01 90       	ld	r0, Z+
    33c8:	0d 92       	st	X+, r0
    33ca:	8a 95       	dec	r24
    33cc:	e1 f7       	brne	.-8      	; 0x33c6 <_Z13uhreinstellenv+0x550>
    33ce:	2d 88       	ldd	r2, Y+21	; 0x15
    33d0:	3e 88       	ldd	r3, Y+22	; 0x16
    33d2:	1b 2d       	mov	r17, r11
						for(uint8_t i = 0; i<buffersize;i++){
							oled.draw_ASCI(buffer[i],charsize*i,7*8);
    33d4:	f1 01       	movw	r30, r2
    33d6:	61 91       	ld	r22, Z+
    33d8:	1f 01       	movw	r2, r30
    33da:	28 e3       	ldi	r18, 0x38	; 56
    33dc:	41 2f       	mov	r20, r17
    33de:	86 e4       	ldi	r24, 0x46	; 70
    33e0:	93 e0       	ldi	r25, 0x03	; 3
    33e2:	0e 94 c8 07 	call	0xf90	; 0xf90 <_ZN7Display9draw_ASCIEhhh>
    33e6:	1a 5f       	subi	r17, 0xFA	; 250
					if(rtc.Tag>=30){
						rtc.Tag=0;
						rtc.Monat=0;
						pos=3;
						buffersize=sprintf(buffer,"Tag falsch");
						for(uint8_t i = 0; i<buffersize;i++){
    33e8:	1c 33       	cpi	r17, 0x3C	; 60
    33ea:	a1 f7       	brne	.-24     	; 0x33d4 <_Z13uhreinstellenv+0x55e>
    33ec:	e8 c0       	rjmp	.+464    	; 0x35be <_Z13uhreinstellenv+0x748>
						}
					}
				}
				break;
			case 8:
				rtc.Jahr=Tastatur.ZahlenausTastatur()*10;
    33ee:	85 e4       	ldi	r24, 0x45	; 69
    33f0:	93 e0       	ldi	r25, 0x03	; 3
    33f2:	0e 94 18 23 	call	0x4630	; 0x4630 <_ZN9Interface17ZahlenausTastaturEv>
    33f6:	88 0f       	add	r24, r24
    33f8:	98 2f       	mov	r25, r24
    33fa:	99 0f       	add	r25, r25
    33fc:	99 0f       	add	r25, r25
    33fe:	89 0f       	add	r24, r25
				if(rtc.Jahr>=50){
    3400:	82 33       	cpi	r24, 0x32	; 50
    3402:	20 f4       	brcc	.+8      	; 0x340c <_Z13uhreinstellenv+0x596>
						}
					}
				}
				break;
			case 8:
				rtc.Jahr=Tastatur.ZahlenausTastatur()*10;
    3404:	e4 e9       	ldi	r30, 0x94	; 148
    3406:	f7 e0       	ldi	r31, 0x07	; 7
    3408:	80 83       	st	Z, r24
    340a:	ec c0       	rjmp	.+472    	; 0x35e4 <_Z13uhreinstellenv+0x76e>
				if(rtc.Jahr>=50){
					rtc.Jahr=0;
    340c:	e4 e9       	ldi	r30, 0x94	; 148
    340e:	f7 e0       	ldi	r31, 0x07	; 7
    3410:	10 82       	st	Z, r1
					pos=7;
					buffersize=sprintf(buffer,"Jahr falsch");
    3412:	8c e0       	ldi	r24, 0x0C	; 12
    3414:	ec e0       	ldi	r30, 0x0C	; 12
    3416:	f3 e0       	ldi	r31, 0x03	; 3
    3418:	a7 2d       	mov	r26, r7
    341a:	b8 2d       	mov	r27, r8
    341c:	01 90       	ld	r0, Z+
    341e:	0d 92       	st	X+, r0
    3420:	8a 95       	dec	r24
    3422:	e1 f7       	brne	.-8      	; 0x341c <_Z13uhreinstellenv+0x5a6>
    3424:	2d 88       	ldd	r2, Y+21	; 0x15
    3426:	3e 88       	ldd	r3, Y+22	; 0x16
    3428:	1b 2d       	mov	r17, r11
					for(uint8_t i = 0; i<buffersize;i++){
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
    342a:	f1 01       	movw	r30, r2
    342c:	61 91       	ld	r22, Z+
    342e:	1f 01       	movw	r2, r30
    3430:	28 e3       	ldi	r18, 0x38	; 56
    3432:	41 2f       	mov	r20, r17
    3434:	86 e4       	ldi	r24, 0x46	; 70
    3436:	93 e0       	ldi	r25, 0x03	; 3
    3438:	0e 94 c8 07 	call	0xf90	; 0xf90 <_ZN7Display9draw_ASCIEhhh>
    343c:	1a 5f       	subi	r17, 0xFA	; 250
				rtc.Jahr=Tastatur.ZahlenausTastatur()*10;
				if(rtc.Jahr>=50){
					rtc.Jahr=0;
					pos=7;
					buffersize=sprintf(buffer,"Jahr falsch");
					for(uint8_t i = 0; i<buffersize;i++){
    343e:	12 34       	cpi	r17, 0x42	; 66
    3440:	a1 f7       	brne	.-24     	; 0x342a <_Z13uhreinstellenv+0x5b4>
    3442:	c2 c0       	rjmp	.+388    	; 0x35c8 <_Z13uhreinstellenv+0x752>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 9:
				rtc.Jahr+=Tastatur.ZahlenausTastatur();
    3444:	85 e4       	ldi	r24, 0x45	; 69
    3446:	93 e0       	ldi	r25, 0x03	; 3
    3448:	0e 94 18 23 	call	0x4630	; 0x4630 <_ZN9Interface17ZahlenausTastaturEv>
    344c:	e4 e9       	ldi	r30, 0x94	; 148
    344e:	f7 e0       	ldi	r31, 0x07	; 7
    3450:	20 81       	ld	r18, Z
    3452:	90 e0       	ldi	r25, 0x00	; 0
    3454:	82 0f       	add	r24, r18
    3456:	91 1d       	adc	r25, r1
				if(rtc.Jahr>=50){
    3458:	82 33       	cpi	r24, 0x32	; 50
    345a:	10 f4       	brcc	.+4      	; 0x3460 <_Z13uhreinstellenv+0x5ea>
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				break;
			case 9:
				rtc.Jahr+=Tastatur.ZahlenausTastatur();
    345c:	80 83       	st	Z, r24
    345e:	1f c0       	rjmp	.+62     	; 0x349e <_Z13uhreinstellenv+0x628>
				if(rtc.Jahr>=50){
					rtc.Jahr=0;
    3460:	e4 e9       	ldi	r30, 0x94	; 148
    3462:	f7 e0       	ldi	r31, 0x07	; 7
    3464:	10 82       	st	Z, r1
					pos=7;
					buffersize=sprintf(buffer,"Jahr falsch");
    3466:	8c e0       	ldi	r24, 0x0C	; 12
    3468:	ec e0       	ldi	r30, 0x0C	; 12
    346a:	f3 e0       	ldi	r31, 0x03	; 3
    346c:	a7 2d       	mov	r26, r7
    346e:	b8 2d       	mov	r27, r8
    3470:	01 90       	ld	r0, Z+
    3472:	0d 92       	st	X+, r0
    3474:	8a 95       	dec	r24
    3476:	e1 f7       	brne	.-8      	; 0x3470 <_Z13uhreinstellenv+0x5fa>
    3478:	2d 88       	ldd	r2, Y+21	; 0x15
    347a:	3e 88       	ldd	r3, Y+22	; 0x16
    347c:	1b 2d       	mov	r17, r11
					for(uint8_t i = 0; i<buffersize;i++){
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
    347e:	f1 01       	movw	r30, r2
    3480:	61 91       	ld	r22, Z+
    3482:	1f 01       	movw	r2, r30
    3484:	28 e3       	ldi	r18, 0x38	; 56
    3486:	41 2f       	mov	r20, r17
    3488:	86 e4       	ldi	r24, 0x46	; 70
    348a:	93 e0       	ldi	r25, 0x03	; 3
    348c:	0e 94 c8 07 	call	0xf90	; 0xf90 <_ZN7Display9draw_ASCIEhhh>
    3490:	1a 5f       	subi	r17, 0xFA	; 250
				rtc.Jahr+=Tastatur.ZahlenausTastatur();
				if(rtc.Jahr>=50){
					rtc.Jahr=0;
					pos=7;
					buffersize=sprintf(buffer,"Jahr falsch");
					for(uint8_t i = 0; i<buffersize;i++){
    3492:	12 34       	cpi	r17, 0x42	; 66
    3494:	a1 f7       	brne	.-24     	; 0x347e <_Z13uhreinstellenv+0x608>
				break;
			case 9:
				rtc.Jahr+=Tastatur.ZahlenausTastatur();
				if(rtc.Jahr>=50){
					rtc.Jahr=0;
					pos=7;
    3496:	0f 2e       	mov	r0, r31
    3498:	f7 e0       	ldi	r31, 0x07	; 7
    349a:	9f 2e       	mov	r9, r31
    349c:	f0 2d       	mov	r31, r0
					buffersize=sprintf(buffer,"Jahr falsch");
					for(uint8_t i = 0; i<buffersize;i++){
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
				if(rtc.Monat==2){
    349e:	f6 01       	movw	r30, r12
    34a0:	80 81       	ld	r24, Z
    34a2:	82 30       	cpi	r24, 0x02	; 2
    34a4:	09 f0       	breq	.+2      	; 0x34a8 <_Z13uhreinstellenv+0x632>
    34a6:	4d c0       	rjmp	.+154    	; 0x3542 <_Z13uhreinstellenv+0x6cc>
					if(rtc.Jahr%4==0){
    34a8:	e4 e9       	ldi	r30, 0x94	; 148
    34aa:	f7 e0       	ldi	r31, 0x07	; 7
    34ac:	80 81       	ld	r24, Z
    34ae:	83 70       	andi	r24, 0x03	; 3
    34b0:	21 f5       	brne	.+72     	; 0x34fa <_Z13uhreinstellenv+0x684>
						if (rtc.Tag>=30)
    34b2:	f2 01       	movw	r30, r4
    34b4:	80 81       	ld	r24, Z
    34b6:	8e 31       	cpi	r24, 0x1E	; 30
    34b8:	08 f4       	brcc	.+2      	; 0x34bc <_Z13uhreinstellenv+0x646>
    34ba:	43 c0       	rjmp	.+134    	; 0x3542 <_Z13uhreinstellenv+0x6cc>
						{
							rtc.Tag=0;
    34bc:	10 82       	st	Z, r1
							rtc.Monat=0;
    34be:	f6 01       	movw	r30, r12
    34c0:	10 82       	st	Z, r1
							rtc.Jahr=0;
    34c2:	e4 e9       	ldi	r30, 0x94	; 148
    34c4:	f7 e0       	ldi	r31, 0x07	; 7
    34c6:	10 82       	st	Z, r1
							pos=3;
							buffersize=sprintf(buffer,"Tag falsch");
    34c8:	8b e0       	ldi	r24, 0x0B	; 11
    34ca:	e4 ef       	ldi	r30, 0xF4	; 244
    34cc:	f2 e0       	ldi	r31, 0x02	; 2
    34ce:	a7 2d       	mov	r26, r7
    34d0:	b8 2d       	mov	r27, r8
    34d2:	01 90       	ld	r0, Z+
    34d4:	0d 92       	st	X+, r0
    34d6:	8a 95       	dec	r24
    34d8:	e1 f7       	brne	.-8      	; 0x34d2 <_Z13uhreinstellenv+0x65c>
    34da:	2d 88       	ldd	r2, Y+21	; 0x15
    34dc:	3e 88       	ldd	r3, Y+22	; 0x16
    34de:	1b 2d       	mov	r17, r11
							for(uint8_t i = 0; i<buffersize;i++){
								oled.draw_ASCI(buffer[i],charsize*i,7*8);
    34e0:	f1 01       	movw	r30, r2
    34e2:	61 91       	ld	r22, Z+
    34e4:	1f 01       	movw	r2, r30
    34e6:	28 e3       	ldi	r18, 0x38	; 56
    34e8:	41 2f       	mov	r20, r17
    34ea:	86 e4       	ldi	r24, 0x46	; 70
    34ec:	93 e0       	ldi	r25, 0x03	; 3
    34ee:	0e 94 c8 07 	call	0xf90	; 0xf90 <_ZN7Display9draw_ASCIEhhh>
    34f2:	1a 5f       	subi	r17, 0xFA	; 250
							rtc.Tag=0;
							rtc.Monat=0;
							rtc.Jahr=0;
							pos=3;
							buffersize=sprintf(buffer,"Tag falsch");
							for(uint8_t i = 0; i<buffersize;i++){
    34f4:	1c 33       	cpi	r17, 0x3C	; 60
    34f6:	a1 f7       	brne	.-24     	; 0x34e0 <_Z13uhreinstellenv+0x66a>
    34f8:	6c c0       	rjmp	.+216    	; 0x35d2 <_Z13uhreinstellenv+0x75c>
								oled.draw_ASCI(buffer[i],charsize*i,7*8);
							}
						}
					}
					else{
						if(rtc.Tag>=29){
    34fa:	f2 01       	movw	r30, r4
    34fc:	80 81       	ld	r24, Z
    34fe:	8d 31       	cpi	r24, 0x1D	; 29
    3500:	00 f1       	brcs	.+64     	; 0x3542 <_Z13uhreinstellenv+0x6cc>
							rtc.Tag=0;
    3502:	10 82       	st	Z, r1
							rtc.Monat=0;
    3504:	f6 01       	movw	r30, r12
    3506:	10 82       	st	Z, r1
							rtc.Jahr=0;
    3508:	e4 e9       	ldi	r30, 0x94	; 148
    350a:	f7 e0       	ldi	r31, 0x07	; 7
    350c:	10 82       	st	Z, r1
							pos=3;
							buffersize=sprintf(buffer,"Tag falsch");
    350e:	8b e0       	ldi	r24, 0x0B	; 11
    3510:	e4 ef       	ldi	r30, 0xF4	; 244
    3512:	f2 e0       	ldi	r31, 0x02	; 2
    3514:	a7 2d       	mov	r26, r7
    3516:	b8 2d       	mov	r27, r8
    3518:	01 90       	ld	r0, Z+
    351a:	0d 92       	st	X+, r0
    351c:	8a 95       	dec	r24
    351e:	e1 f7       	brne	.-8      	; 0x3518 <_Z13uhreinstellenv+0x6a2>
    3520:	2d 88       	ldd	r2, Y+21	; 0x15
    3522:	3e 88       	ldd	r3, Y+22	; 0x16
    3524:	1b 2d       	mov	r17, r11
							for(uint8_t i = 0; i<buffersize;i++){
								oled.draw_ASCI(buffer[i],charsize*i,7*8);
    3526:	f1 01       	movw	r30, r2
    3528:	61 91       	ld	r22, Z+
    352a:	1f 01       	movw	r2, r30
    352c:	28 e3       	ldi	r18, 0x38	; 56
    352e:	41 2f       	mov	r20, r17
    3530:	86 e4       	ldi	r24, 0x46	; 70
    3532:	93 e0       	ldi	r25, 0x03	; 3
    3534:	0e 94 c8 07 	call	0xf90	; 0xf90 <_ZN7Display9draw_ASCIEhhh>
    3538:	1a 5f       	subi	r17, 0xFA	; 250
							rtc.Tag=0;
							rtc.Monat=0;
							rtc.Jahr=0;
							pos=3;
							buffersize=sprintf(buffer,"Tag falsch");
							for(uint8_t i = 0; i<buffersize;i++){
    353a:	1c 33       	cpi	r17, 0x3C	; 60
    353c:	a1 f7       	brne	.-24     	; 0x3526 <_Z13uhreinstellenv+0x6b0>
    353e:	4e c0       	rjmp	.+156    	; 0x35dc <_Z13uhreinstellenv+0x766>
						}
					}
				}
				break;
			default:
				pos++;
    3540:	93 94       	inc	r9
				break;
		}
		pos++;
    3542:	93 94       	inc	r9
	
	oled.clearFrame();
	char buffer[20];
	uint8_t buffersize;
	uint8_t pos=0;
	while(pos<11){
    3544:	fa e0       	ldi	r31, 0x0A	; 10
    3546:	f9 15       	cp	r31, r9
    3548:	08 f0       	brcs	.+2      	; 0x354c <_Z13uhreinstellenv+0x6d6>
    354a:	d4 cc       	rjmp	.-1624   	; 0x2ef4 <_Z13uhreinstellenv+0x7e>
				break;
		}
		pos++;
	}
	
	rtc.Sekunden		= 0;
    354c:	10 92 8f 07 	sts	0x078F, r1
	rtc.HundSekunden	= 0;
    3550:	10 92 90 07 	sts	0x0790, r1
	oled.clearFrame();
    3554:	86 e4       	ldi	r24, 0x46	; 70
    3556:	93 e0       	ldi	r25, 0x03	; 3
    3558:	0e 94 05 05 	call	0xa0a	; 0xa0a <_ZN7Display10clearFrameEv>
	rtc.ausgabedatumneu();
    355c:	8d e7       	ldi	r24, 0x7D	; 125
    355e:	97 e0       	ldi	r25, 0x07	; 7
    3560:	0e 94 b0 27 	call	0x4f60	; 0x4f60 <_ZN3RTC15ausgabedatumneuEv>
	rtc.ausgabezeitneu();
    3564:	8d e7       	ldi	r24, 0x7D	; 125
    3566:	97 e0       	ldi	r25, 0x07	; 7
    3568:	0e 94 77 27 	call	0x4eee	; 0x4eee <_ZN3RTC14ausgabezeitneuEv>
	rtc.RTCstart();
    356c:	8d e7       	ldi	r24, 0x7D	; 125
    356e:	97 e0       	ldi	r25, 0x07	; 7
    3570:	0e 94 8b 28 	call	0x5116	; 0x5116 <_ZN3RTC8RTCstartEv>
    3574:	39 c0       	rjmp	.+114    	; 0x35e8 <_Z13uhreinstellenv+0x772>

		oled.sendFrame();
		oled.clearFrame();
		switch (pos) {
			case 0:
				rtc.Stunden=Tastatur.ZahlenausTastatur()*10;
    3576:	ed e8       	ldi	r30, 0x8D	; 141
    3578:	f7 e0       	ldi	r31, 0x07	; 7
    357a:	80 83       	st	Z, r24
    357c:	33 c0       	rjmp	.+102    	; 0x35e4 <_Z13uhreinstellenv+0x76e>
				if(rtc.Stunden>=24){
					rtc.Stunden=0;
					pos=-1;
    357e:	99 24       	eor	r9, r9
    3580:	9a 94       	dec	r9
    3582:	30 c0       	rjmp	.+96     	; 0x35e4 <_Z13uhreinstellenv+0x76e>
				break;
			case 1:
				rtc.Stunden+=Tastatur.ZahlenausTastatur();
				if(rtc.Stunden>=24){
					rtc.Stunden=0;
					pos=-1;
    3584:	99 24       	eor	r9, r9
    3586:	9a 94       	dec	r9
    3588:	2d c0       	rjmp	.+90     	; 0x35e4 <_Z13uhreinstellenv+0x76e>
				break;
			case 2:
				rtc.Minuten=Tastatur.ZahlenausTastatur()*10;
				if(rtc.Minuten>=60){
					rtc.Minuten=0;
					pos=1;
    358a:	99 24       	eor	r9, r9
    358c:	93 94       	inc	r9
    358e:	2a c0       	rjmp	.+84     	; 0x35e4 <_Z13uhreinstellenv+0x76e>
				break;
			case 3:
				rtc.Minuten+=Tastatur.ZahlenausTastatur();
				if(rtc.Minuten>=60){
					rtc.Minuten=0;
					pos=1;
    3590:	99 24       	eor	r9, r9
    3592:	93 94       	inc	r9
    3594:	27 c0       	rjmp	.+78     	; 0x35e4 <_Z13uhreinstellenv+0x76e>
				break;
			case 4:
				rtc.Tag=Tastatur.ZahlenausTastatur()*10;
				if(rtc.Tag>=32){
					rtc.Tag=0;
					pos=3;
    3596:	0f 2e       	mov	r0, r31
    3598:	f3 e0       	ldi	r31, 0x03	; 3
    359a:	9f 2e       	mov	r9, r31
    359c:	f0 2d       	mov	r31, r0
    359e:	22 c0       	rjmp	.+68     	; 0x35e4 <_Z13uhreinstellenv+0x76e>
				break;
			case 5:
				rtc.Tag+=Tastatur.ZahlenausTastatur();
				if(rtc.Tag>=32){
					rtc.Tag=0;
					pos=3;
    35a0:	0f 2e       	mov	r0, r31
    35a2:	f3 e0       	ldi	r31, 0x03	; 3
    35a4:	9f 2e       	mov	r9, r31
    35a6:	f0 2d       	mov	r31, r0
    35a8:	1d c0       	rjmp	.+58     	; 0x35e4 <_Z13uhreinstellenv+0x76e>
				break;
			case 6:
				rtc.Monat=Tastatur.ZahlenausTastatur()*10;
				if(rtc.Monat>=13){
					rtc.Monat=0;
					pos=5;
    35aa:	0f 2e       	mov	r0, r31
    35ac:	f5 e0       	ldi	r31, 0x05	; 5
    35ae:	9f 2e       	mov	r9, r31
    35b0:	f0 2d       	mov	r31, r0
    35b2:	18 c0       	rjmp	.+48     	; 0x35e4 <_Z13uhreinstellenv+0x76e>
				}
				if(rtc.Monat==4||rtc.Monat==6||rtc.Monat==9||rtc.Monat==11){
					if(rtc.Tag>=31){
						rtc.Tag=0;
						rtc.Monat=0;
						pos=3;
    35b4:	0f 2e       	mov	r0, r31
    35b6:	f3 e0       	ldi	r31, 0x03	; 3
    35b8:	9f 2e       	mov	r9, r31
    35ba:	f0 2d       	mov	r31, r0
    35bc:	13 c0       	rjmp	.+38     	; 0x35e4 <_Z13uhreinstellenv+0x76e>
				}
				else if(rtc.Monat==2){
					if(rtc.Tag>=30){
						rtc.Tag=0;
						rtc.Monat=0;
						pos=3;
    35be:	0f 2e       	mov	r0, r31
    35c0:	f3 e0       	ldi	r31, 0x03	; 3
    35c2:	9f 2e       	mov	r9, r31
    35c4:	f0 2d       	mov	r31, r0
    35c6:	0e c0       	rjmp	.+28     	; 0x35e4 <_Z13uhreinstellenv+0x76e>
				break;
			case 8:
				rtc.Jahr=Tastatur.ZahlenausTastatur()*10;
				if(rtc.Jahr>=50){
					rtc.Jahr=0;
					pos=7;
    35c8:	0f 2e       	mov	r0, r31
    35ca:	f7 e0       	ldi	r31, 0x07	; 7
    35cc:	9f 2e       	mov	r9, r31
    35ce:	f0 2d       	mov	r31, r0
    35d0:	09 c0       	rjmp	.+18     	; 0x35e4 <_Z13uhreinstellenv+0x76e>
						if (rtc.Tag>=30)
						{
							rtc.Tag=0;
							rtc.Monat=0;
							rtc.Jahr=0;
							pos=3;
    35d2:	0f 2e       	mov	r0, r31
    35d4:	f3 e0       	ldi	r31, 0x03	; 3
    35d6:	9f 2e       	mov	r9, r31
    35d8:	f0 2d       	mov	r31, r0
    35da:	04 c0       	rjmp	.+8      	; 0x35e4 <_Z13uhreinstellenv+0x76e>
					else{
						if(rtc.Tag>=29){
							rtc.Tag=0;
							rtc.Monat=0;
							rtc.Jahr=0;
							pos=3;
    35dc:	0f 2e       	mov	r0, r31
    35de:	f3 e0       	ldi	r31, 0x03	; 3
    35e0:	9f 2e       	mov	r9, r31
    35e2:	f0 2d       	mov	r31, r0
				break;
			default:
				pos++;
				break;
		}
		pos++;
    35e4:	93 94       	inc	r9
    35e6:	86 cc       	rjmp	.-1780   	; 0x2ef4 <_Z13uhreinstellenv+0x7e>
	rtc.HundSekunden	= 0;
	oled.clearFrame();
	rtc.ausgabedatumneu();
	rtc.ausgabezeitneu();
	rtc.RTCstart();
}
    35e8:	66 96       	adiw	r28, 0x16	; 22
    35ea:	0f b6       	in	r0, 0x3f	; 63
    35ec:	f8 94       	cli
    35ee:	de bf       	out	0x3e, r29	; 62
    35f0:	0f be       	out	0x3f, r0	; 63
    35f2:	cd bf       	out	0x3d, r28	; 61
    35f4:	df 91       	pop	r29
    35f6:	cf 91       	pop	r28
    35f8:	1f 91       	pop	r17
    35fa:	0f 91       	pop	r16
    35fc:	ff 90       	pop	r15
    35fe:	ef 90       	pop	r14
    3600:	df 90       	pop	r13
    3602:	cf 90       	pop	r12
    3604:	bf 90       	pop	r11
    3606:	af 90       	pop	r10
    3608:	9f 90       	pop	r9
    360a:	8f 90       	pop	r8
    360c:	7f 90       	pop	r7
    360e:	6f 90       	pop	r6
    3610:	5f 90       	pop	r5
    3612:	4f 90       	pop	r4
    3614:	3f 90       	pop	r3
    3616:	2f 90       	pop	r2
    3618:	08 95       	ret

0000361a <__vector_11>:
uint8_t pos;		//Handler fuer die Einganbe von Zahlen

//Ausgelagerte Sammlung der einzelnen Seitenlayouts
#include "Seiten.h"

ISR(TIMER2_OVF_vect){	//Vektor fuer die RTC
    361a:	1f 92       	push	r1
    361c:	0f 92       	push	r0
    361e:	0f b6       	in	r0, 0x3f	; 63
    3620:	0f 92       	push	r0
    3622:	11 24       	eor	r1, r1
    3624:	0b b6       	in	r0, 0x3b	; 59
    3626:	0f 92       	push	r0
    3628:	8f 93       	push	r24
    362a:	ef 93       	push	r30
    362c:	ff 93       	push	r31
	TCNT2=TIMER2RTCTIME;
    362e:	10 92 b2 00 	sts	0x00B2, r1
	rtc.Sekunden++;
    3632:	ef e8       	ldi	r30, 0x8F	; 143
    3634:	f7 e0       	ldi	r31, 0x07	; 7
    3636:	80 81       	ld	r24, Z
    3638:	8f 5f       	subi	r24, 0xFF	; 255
    363a:	80 83       	st	Z, r24
	rtc.interupts|= (1<<sekundeninterupt);
    363c:	e5 e9       	ldi	r30, 0x95	; 149
    363e:	f7 e0       	ldi	r31, 0x07	; 7
    3640:	80 81       	ld	r24, Z
    3642:	82 60       	ori	r24, 0x02	; 2
    3644:	80 83       	st	Z, r24
}
    3646:	ff 91       	pop	r31
    3648:	ef 91       	pop	r30
    364a:	8f 91       	pop	r24
    364c:	0f 90       	pop	r0
    364e:	0b be       	out	0x3b, r0	; 59
    3650:	0f 90       	pop	r0
    3652:	0f be       	out	0x3f, r0	; 63
    3654:	0f 90       	pop	r0
    3656:	1f 90       	pop	r1
    3658:	18 95       	reti

0000365a <_Z15geschwindigkeitf>:

double geschw;
double strecke;
double maxgeschw;
uint32_t Fahrtzeit;
void geschwindigkeit(float durch){
    365a:	cf 92       	push	r12
    365c:	df 92       	push	r13
    365e:	ef 92       	push	r14
    3660:	ff 92       	push	r15
    3662:	cf 93       	push	r28
    3664:	df 93       	push	r29
	//Einholen der Daten und ruecksetzen
	uint16_t zaehlungen = TCNT1;
    3666:	e4 e8       	ldi	r30, 0x84	; 132
    3668:	f0 e0       	ldi	r31, 0x00	; 0
    366a:	c0 81       	ld	r28, Z
    366c:	d1 81       	ldd	r29, Z+1	; 0x01
	TCNT1 = 0;
    366e:	11 82       	std	Z+1, r1	; 0x01
    3670:	10 82       	st	Z, r1
	//Berechnung
	double umlaufzeit = (REEDMS/1000.0+(zaehlungen/zaehlungenprozeiteinheit)*zeitproachtzaehlungen);
	geschw = (durch)*M_PI*3.6;
    3672:	2b ed       	ldi	r18, 0xDB	; 219
    3674:	3f e0       	ldi	r19, 0x0F	; 15
    3676:	49 e4       	ldi	r20, 0x49	; 73
    3678:	50 e4       	ldi	r21, 0x40	; 64
    367a:	0e 94 8e 2b 	call	0x571c	; 0x571c <__mulsf3>
    367e:	26 e6       	ldi	r18, 0x66	; 102
    3680:	36 e6       	ldi	r19, 0x66	; 102
    3682:	46 e6       	ldi	r20, 0x66	; 102
    3684:	50 e4       	ldi	r21, 0x40	; 64
    3686:	0e 94 8e 2b 	call	0x571c	; 0x571c <__mulsf3>
    368a:	6b 01       	movw	r12, r22
    368c:	7c 01       	movw	r14, r24
void geschwindigkeit(float durch){
	//Einholen der Daten und ruecksetzen
	uint16_t zaehlungen = TCNT1;
	TCNT1 = 0;
	//Berechnung
	double umlaufzeit = (REEDMS/1000.0+(zaehlungen/zaehlungenprozeiteinheit)*zeitproachtzaehlungen);
    368e:	be 01       	movw	r22, r28
    3690:	80 e0       	ldi	r24, 0x00	; 0
    3692:	90 e0       	ldi	r25, 0x00	; 0
    3694:	0e 94 2e 2a 	call	0x545c	; 0x545c <__floatunsisf>
    3698:	20 e0       	ldi	r18, 0x00	; 0
    369a:	30 e0       	ldi	r19, 0x00	; 0
    369c:	40 e0       	ldi	r20, 0x00	; 0
    369e:	5e e3       	ldi	r21, 0x3E	; 62
    36a0:	0e 94 8e 2b 	call	0x571c	; 0x571c <__mulsf3>
    36a4:	2d eb       	ldi	r18, 0xBD	; 189
    36a6:	37 e3       	ldi	r19, 0x37	; 55
    36a8:	46 e8       	ldi	r20, 0x86	; 134
    36aa:	5a e3       	ldi	r21, 0x3A	; 58
    36ac:	0e 94 8e 2b 	call	0x571c	; 0x571c <__mulsf3>
    36b0:	2a e0       	ldi	r18, 0x0A	; 10
    36b2:	37 ed       	ldi	r19, 0xD7	; 215
    36b4:	43 ea       	ldi	r20, 0xA3	; 163
    36b6:	5b e3       	ldi	r21, 0x3B	; 59
    36b8:	0e 94 c8 28 	call	0x5190	; 0x5190 <__addsf3>
    36bc:	9b 01       	movw	r18, r22
    36be:	ac 01       	movw	r20, r24
	geschw = (durch)*M_PI*3.6;
	geschw /= umlaufzeit;
    36c0:	c7 01       	movw	r24, r14
    36c2:	b6 01       	movw	r22, r12
    36c4:	0e 94 95 29 	call	0x532a	; 0x532a <__divsf3>
    36c8:	6b 01       	movw	r12, r22
    36ca:	7c 01       	movw	r14, r24
	if (geschw >=160)
    36cc:	20 e0       	ldi	r18, 0x00	; 0
    36ce:	30 e0       	ldi	r19, 0x00	; 0
    36d0:	40 e2       	ldi	r20, 0x20	; 32
    36d2:	53 e4       	ldi	r21, 0x43	; 67
    36d4:	0e 94 3e 2b 	call	0x567c	; 0x567c <__gesf2>
    36d8:	88 23       	and	r24, r24
    36da:	4c f4       	brge	.+18     	; 0x36ee <_Z15geschwindigkeitf+0x94>
	uint16_t zaehlungen = TCNT1;
	TCNT1 = 0;
	//Berechnung
	double umlaufzeit = (REEDMS/1000.0+(zaehlungen/zaehlungenprozeiteinheit)*zeitproachtzaehlungen);
	geschw = (durch)*M_PI*3.6;
	geschw /= umlaufzeit;
    36dc:	c0 92 24 03 	sts	0x0324, r12
    36e0:	d0 92 25 03 	sts	0x0325, r13
    36e4:	e0 92 26 03 	sts	0x0326, r14
    36e8:	f0 92 27 03 	sts	0x0327, r15
    36ec:	08 c0       	rjmp	.+16     	; 0x36fe <_Z15geschwindigkeitf+0xa4>
	if (geschw >=160)
	{
		geschw=0;
    36ee:	10 92 24 03 	sts	0x0324, r1
    36f2:	10 92 25 03 	sts	0x0325, r1
    36f6:	10 92 26 03 	sts	0x0326, r1
    36fa:	10 92 27 03 	sts	0x0327, r1
	}
}
    36fe:	df 91       	pop	r29
    3700:	cf 91       	pop	r28
    3702:	ff 90       	pop	r15
    3704:	ef 90       	pop	r14
    3706:	df 90       	pop	r13
    3708:	cf 90       	pop	r12
    370a:	08 95       	ret

0000370c <_Z13reed_debouncePVhh>:

uint8_t reed_debounce(volatile uint8_t *port, uint8_t pin)
{
	if ( (*port & (1 << pin)) )
    370c:	fc 01       	movw	r30, r24
    370e:	20 81       	ld	r18, Z
    3710:	30 e0       	ldi	r19, 0x00	; 0
    3712:	06 2e       	mov	r0, r22
    3714:	02 c0       	rjmp	.+4      	; 0x371a <_Z13reed_debouncePVhh+0xe>
    3716:	35 95       	asr	r19
    3718:	27 95       	ror	r18
    371a:	0a 94       	dec	r0
    371c:	e2 f7       	brpl	.-8      	; 0x3716 <_Z13reed_debouncePVhh+0xa>
    371e:	20 ff       	sbrs	r18, 0
    3720:	17 c0       	rjmp	.+46     	; 0x3750 <_Z13reed_debouncePVhh+0x44>
    3722:	ef e0       	ldi	r30, 0x0F	; 15
    3724:	f7 e2       	ldi	r31, 0x27	; 39
    3726:	31 97       	sbiw	r30, 0x01	; 1
    3728:	f1 f7       	brne	.-4      	; 0x3726 <_Z13reed_debouncePVhh+0x1a>
    372a:	00 c0       	rjmp	.+0      	; 0x372c <_Z13reed_debouncePVhh+0x20>
    372c:	00 00       	nop
	{
		/* Pin wurde auf Masse gezogen, ms warten   */
		_delay_ms(REEDMS);
		if ( !(*port & (1 << pin)) )
    372e:	fc 01       	movw	r30, r24
    3730:	80 81       	ld	r24, Z
    3732:	90 e0       	ldi	r25, 0x00	; 0
    3734:	9c 01       	movw	r18, r24
    3736:	02 c0       	rjmp	.+4      	; 0x373c <_Z13reed_debouncePVhh+0x30>
    3738:	35 95       	asr	r19
    373a:	27 95       	ror	r18
    373c:	6a 95       	dec	r22
    373e:	e2 f7       	brpl	.-8      	; 0x3738 <_Z13reed_debouncePVhh+0x2c>
    3740:	20 fd       	sbrc	r18, 0
    3742:	08 c0       	rjmp	.+16     	; 0x3754 <_Z13reed_debouncePVhh+0x48>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3744:	32 e0       	ldi	r19, 0x02	; 2
    3746:	3a 95       	dec	r19
    3748:	f1 f7       	brne	.-4      	; 0x3746 <_Z13reed_debouncePVhh+0x3a>
    374a:	00 c0       	rjmp	.+0      	; 0x374c <_Z13reed_debouncePVhh+0x40>
		{
			/* Anwender Zeit zum Loslassen des Tasters geben */
			_delay_us(1);
			return 1;
    374c:	81 e0       	ldi	r24, 0x01	; 1
    374e:	08 95       	ret
		}
	}
	return 0;
    3750:	80 e0       	ldi	r24, 0x00	; 0
    3752:	08 95       	ret
    3754:	80 e0       	ldi	r24, 0x00	; 0
}
    3756:	08 95       	ret

00003758 <_Z15initialisierungv>:
    }
}

void initialisierung(){
	//nullen der Flagregister
	rtc.interupts=0;
    3758:	10 92 95 07 	sts	0x0795, r1
	anzeige=0;
    375c:	10 92 2a 03 	sts	0x032A, r1
    3760:	10 92 29 03 	sts	0x0329, r1
	pos=0;
    3764:	10 92 28 03 	sts	0x0328, r1
	//initialisieren des Zaehler fuer die Winkelgeschw sowie den Timer
	geschw=0;
    3768:	10 92 24 03 	sts	0x0324, r1
    376c:	10 92 25 03 	sts	0x0325, r1
    3770:	10 92 26 03 	sts	0x0326, r1
    3774:	10 92 27 03 	sts	0x0327, r1
	strecke = 0;
    3778:	10 92 20 03 	sts	0x0320, r1
    377c:	10 92 21 03 	sts	0x0321, r1
    3780:	10 92 22 03 	sts	0x0322, r1
    3784:	10 92 23 03 	sts	0x0323, r1
	maxgeschw = 0;
    3788:	10 92 1c 03 	sts	0x031C, r1
    378c:	10 92 1d 03 	sts	0x031D, r1
    3790:	10 92 1e 03 	sts	0x031E, r1
    3794:	10 92 1f 03 	sts	0x031F, r1
	Fahrtzeit = 0;
    3798:	10 92 18 03 	sts	0x0318, r1
    379c:	10 92 19 03 	sts	0x0319, r1
    37a0:	10 92 1a 03 	sts	0x031A, r1
    37a4:	10 92 1b 03 	sts	0x031B, r1
	TCNT1=0;
    37a8:	10 92 85 00 	sts	0x0085, r1
    37ac:	10 92 84 00 	sts	0x0084, r1
	//Tastatur inm Contruktor initialisiert
	//Eingang fuer den Reedkontak schalten mit internem Pullup
	DDRA |= ((1<<PORTA6));
    37b0:	0e 9a       	sbi	0x01, 6	; 1
	PORTA |= (1<<PORTA6);
    37b2:	16 9a       	sbi	0x02, 6	; 2
	//Display
	oled.InitializeDisplay();
    37b4:	86 e4       	ldi	r24, 0x46	; 70
    37b6:	93 e0       	ldi	r25, 0x03	; 3
    37b8:	0e 94 2c 05 	call	0xa58	; 0xa58 <_ZN7Display17InitializeDisplayEv>
	//initialisierung wird im konstruktor vorgenommen
	oled.clearFrame();
    37bc:	86 e4       	ldi	r24, 0x46	; 70
    37be:	93 e0       	ldi	r25, 0x03	; 3
    37c0:	0e 94 05 05 	call	0xa0a	; 0xa0a <_ZN7Display10clearFrameEv>
	//HMC5883L initialisieren
	//kompass.initialize_HMC5883L();
	//initialisierung wird im Konstruktor erledigt
	
	//ADC Initialisieren auf CH0
	ADMUX = (1<<REFS0);
    37c4:	80 e4       	ldi	r24, 0x40	; 64
    37c6:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA = (1<<ADPS1) | (1<<ADPS0);
    37ca:	ea e7       	ldi	r30, 0x7A	; 122
    37cc:	f0 e0       	ldi	r31, 0x00	; 0
    37ce:	83 e0       	ldi	r24, 0x03	; 3
    37d0:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADEN);
    37d2:	80 81       	ld	r24, Z
    37d4:	80 68       	ori	r24, 0x80	; 128
    37d6:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);
    37d8:	80 81       	ld	r24, Z
    37da:	80 64       	ori	r24, 0x40	; 64
    37dc:	80 83       	st	Z, r24
	while (ADCSRA & (1<<ADSC) ) {}
    37de:	80 81       	ld	r24, Z
    37e0:	86 fd       	sbrc	r24, 6
    37e2:	fd cf       	rjmp	.-6      	; 0x37de <_Z15initialisierungv+0x86>
	(void) ADCW;
    37e4:	80 91 78 00 	lds	r24, 0x0078
    37e8:	90 91 79 00 	lds	r25, 0x0079
	//Wilkommensanzeige
	willkommenpage();
    37ec:	0e 94 86 0b 	call	0x170c	; 0x170c <_Z14willkommenpagev>
	//Uhreinstellungen
	//uhreinstellen();
	//*************************************************
	//Nur Test, damit es schneller geht beim Start
	rtc.dummyeinst();
    37f0:	8d e7       	ldi	r24, 0x7D	; 125
    37f2:	97 e0       	ldi	r25, 0x07	; 7
    37f4:	0e 94 77 28 	call	0x50ee	; 0x50ee <_ZN3RTC10dummyeinstEv>
	//*********************************
	rtc.RTCstart();
    37f8:	8d e7       	ldi	r24, 0x7D	; 125
    37fa:	97 e0       	ldi	r25, 0x07	; 7
    37fc:	0e 94 8b 28 	call	0x5116	; 0x5116 <_ZN3RTC8RTCstartEv>
	//ausgabe starten
	anzeige|=(1<<Uhrflag);
    3800:	80 91 29 03 	lds	r24, 0x0329
    3804:	90 91 2a 03 	lds	r25, 0x032A
    3808:	81 60       	ori	r24, 0x01	; 1
    380a:	90 93 2a 03 	sts	0x032A, r25
    380e:	80 93 29 03 	sts	0x0329, r24
	sei();
    3812:	78 94       	sei
    3814:	08 95       	ret

00003816 <_Z19maininterupthandlerv>:
	//interupt dierekt aus der rtc
	//if((rtc.interupts & (1<<hundinterupt))){
	//rtc.zeit();
	//rtc.interupts&=~(1<<hundinterupt);
	//}
	if ((anzeige&(1<<Fahradflag)))
    3816:	80 91 29 03 	lds	r24, 0x0329
    381a:	81 ff       	sbrs	r24, 1
    381c:	0b c0       	rjmp	.+22     	; 0x3834 <_Z19maininterupthandlerv+0x1e>
	{
		//debounce Funktion fuer den Reedswitch
		if (reed_debounce(&PINA,PINA7))
    381e:	67 e0       	ldi	r22, 0x07	; 7
    3820:	80 e2       	ldi	r24, 0x20	; 32
    3822:	90 e0       	ldi	r25, 0x00	; 0
    3824:	73 df       	rcall	.-282    	; 0x370c <_Z13reed_debouncePVhh>
    3826:	88 23       	and	r24, r24
    3828:	29 f0       	breq	.+10     	; 0x3834 <_Z19maininterupthandlerv+0x1e>
		{
			//Durchmesser ist 28 Zoll
			geschwindigkeit(28.0*2.54/100.0);
    382a:	63 e3       	ldi	r22, 0x33	; 51
    382c:	71 e1       	ldi	r23, 0x11	; 17
    382e:	86 e3       	ldi	r24, 0x36	; 54
    3830:	9f e3       	ldi	r25, 0x3F	; 63
    3832:	13 df       	rcall	.-474    	; 0x365a <_Z15geschwindigkeitf>
		}
	}
	if ((rtc.interupts&(1<<Weckeractiv)))
    3834:	20 91 95 07 	lds	r18, 0x0795
    3838:	82 2f       	mov	r24, r18
    383a:	88 71       	andi	r24, 0x18	; 24
	{
		if ((rtc.interupts&(1<<Weckerein)))
    383c:	88 31       	cpi	r24, 0x18	; 24
    383e:	61 f4       	brne	.+24     	; 0x3858 <_Z19maininterupthandlerv+0x42>
		{
			anzeige |= (1<<blinkflag) | (1<<refreshdisplay);
    3840:	80 91 29 03 	lds	r24, 0x0329
    3844:	90 91 2a 03 	lds	r25, 0x032A
    3848:	90 6c       	ori	r25, 0xC0	; 192
    384a:	90 93 2a 03 	sts	0x032A, r25
    384e:	80 93 29 03 	sts	0x0329, r24
			rtc.interupts &= ~(1<<Weckerein);
    3852:	27 7f       	andi	r18, 0xF7	; 247
    3854:	20 93 95 07 	sts	0x0795, r18
    3858:	08 95       	ret

0000385a <_Z14anzeigehandlerv>:
		}
	}
}

void anzeigehandler(){
    385a:	4f 92       	push	r4
    385c:	5f 92       	push	r5
    385e:	6f 92       	push	r6
    3860:	7f 92       	push	r7
    3862:	af 92       	push	r10
    3864:	bf 92       	push	r11
    3866:	cf 92       	push	r12
    3868:	df 92       	push	r13
    386a:	ef 92       	push	r14
    386c:	ff 92       	push	r15
    386e:	0f 93       	push	r16
    3870:	1f 93       	push	r17
    3872:	cf 93       	push	r28
    3874:	df 93       	push	r29
	//Handler fuer 1Hz Flag
	if ((rtc.interupts & (1<<sekundeninterupt)))
    3876:	80 91 95 07 	lds	r24, 0x0795
    387a:	81 ff       	sbrs	r24, 1
    387c:	7f c1       	rjmp	.+766    	; 0x3b7c <_Z14anzeigehandlerv+0x322>
	{
		rtc.zeit();
    387e:	8d e7       	ldi	r24, 0x7D	; 125
    3880:	97 e0       	ldi	r25, 0x07	; 7
    3882:	0e 94 52 28 	call	0x50a4	; 0x50a4 <_ZN3RTC4zeitEv>
		//Handler fuer die Anzeige der Seiten
		//Die einzelnen Funktionen beschreiben nur den Framebuffer und nicht dierekt das Display
		if ((anzeige&(1<<menueflag)) && (anzeige&(1<<Uhrflag)))
    3886:	80 91 29 03 	lds	r24, 0x0329
    388a:	90 91 2a 03 	lds	r25, 0x032A
    388e:	9c 01       	movw	r18, r24
    3890:	21 70       	andi	r18, 0x01	; 1
    3892:	30 72       	andi	r19, 0x20	; 32
    3894:	21 30       	cpi	r18, 0x01	; 1
    3896:	30 42       	sbci	r19, 0x20	; 32
    3898:	61 f4       	brne	.+24     	; 0x38b2 <_Z14anzeigehandlerv+0x58>
		{
			menue_uhr();
    389a:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <_Z9menue_uhrv>
			anzeige|=(1<<refreshdisplay);
    389e:	80 91 29 03 	lds	r24, 0x0329
    38a2:	90 91 2a 03 	lds	r25, 0x032A
    38a6:	90 68       	ori	r25, 0x80	; 128
    38a8:	90 93 2a 03 	sts	0x032A, r25
    38ac:	80 93 29 03 	sts	0x0329, r24
    38b0:	4d c1       	rjmp	.+666    	; 0x3b4c <_Z14anzeigehandlerv+0x2f2>
    38b2:	9c 01       	movw	r18, r24
    38b4:	28 70       	andi	r18, 0x08	; 8
    38b6:	30 72       	andi	r19, 0x20	; 32
		}
		else if ((anzeige&(1<<menueflag)) && (anzeige&(1<<Einstellungsflag)))
    38b8:	28 30       	cpi	r18, 0x08	; 8
    38ba:	30 42       	sbci	r19, 0x20	; 32
    38bc:	61 f4       	brne	.+24     	; 0x38d6 <_Z14anzeigehandlerv+0x7c>
		{
			menue_einst();
    38be:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <_Z11menue_einstv>
			anzeige|=(1<<refreshdisplay);
    38c2:	80 91 29 03 	lds	r24, 0x0329
    38c6:	90 91 2a 03 	lds	r25, 0x032A
    38ca:	90 68       	ori	r25, 0x80	; 128
    38cc:	90 93 2a 03 	sts	0x032A, r25
    38d0:	80 93 29 03 	sts	0x0329, r24
    38d4:	3b c1       	rjmp	.+630    	; 0x3b4c <_Z14anzeigehandlerv+0x2f2>
		}
		else if ((anzeige&(1<<menueflag)))
    38d6:	95 ff       	sbrs	r25, 5
    38d8:	0c c0       	rjmp	.+24     	; 0x38f2 <_Z14anzeigehandlerv+0x98>
		{
			menue_haupt();
    38da:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <_Z11menue_hauptv>
			anzeige|=(1<<refreshdisplay);
    38de:	80 91 29 03 	lds	r24, 0x0329
    38e2:	90 91 2a 03 	lds	r25, 0x032A
    38e6:	90 68       	ori	r25, 0x80	; 128
    38e8:	90 93 2a 03 	sts	0x032A, r25
    38ec:	80 93 29 03 	sts	0x0329, r24
    38f0:	2d c1       	rjmp	.+602    	; 0x3b4c <_Z14anzeigehandlerv+0x2f2>
		}
		else if ((anzeige&(1<<Kompasgaineinstellenflag)))
    38f2:	85 ff       	sbrs	r24, 5
    38f4:	0c c0       	rjmp	.+24     	; 0x390e <_Z14anzeigehandlerv+0xb4>
		{
			Gaineinstellen();
    38f6:	0e 94 31 13 	call	0x2662	; 0x2662 <_Z14Gaineinstellenv>
			anzeige|=(1<<refreshdisplay);
    38fa:	80 91 29 03 	lds	r24, 0x0329
    38fe:	90 91 2a 03 	lds	r25, 0x032A
    3902:	90 68       	ori	r25, 0x80	; 128
    3904:	90 93 2a 03 	sts	0x032A, r25
    3908:	80 93 29 03 	sts	0x0329, r24
    390c:	1f c1       	rjmp	.+574    	; 0x3b4c <_Z14anzeigehandlerv+0x2f2>
		}
		else if ((anzeige&(1<<Uhrflag)))
    390e:	80 ff       	sbrs	r24, 0
    3910:	0c c0       	rjmp	.+24     	; 0x392a <_Z14anzeigehandlerv+0xd0>
		{
			uhranzeigen();
    3912:	0e 94 11 10 	call	0x2022	; 0x2022 <_Z11uhranzeigenv>
			anzeige|=(1<<refreshdisplay);
    3916:	80 91 29 03 	lds	r24, 0x0329
    391a:	90 91 2a 03 	lds	r25, 0x032A
    391e:	90 68       	ori	r25, 0x80	; 128
    3920:	90 93 2a 03 	sts	0x032A, r25
    3924:	80 93 29 03 	sts	0x0329, r24
    3928:	11 c1       	rjmp	.+546    	; 0x3b4c <_Z14anzeigehandlerv+0x2f2>
		}
		else if ((anzeige&(1<<Kompasflag)))
    392a:	82 ff       	sbrs	r24, 2
    392c:	0f c0       	rjmp	.+30     	; 0x394c <_Z14anzeigehandlerv+0xf2>
		{
			anzeige_kompass(kompass.angle());
    392e:	88 e9       	ldi	r24, 0x98	; 152
    3930:	97 e0       	ldi	r25, 0x07	; 7
    3932:	7e d7       	rcall	.+3836   	; 0x4830 <_ZN7Kompass5angleEv>
    3934:	0e 94 17 14 	call	0x282e	; 0x282e <_Z15anzeige_kompassd>
			anzeige|=(1<<refreshdisplay);
    3938:	80 91 29 03 	lds	r24, 0x0329
    393c:	90 91 2a 03 	lds	r25, 0x032A
    3940:	90 68       	ori	r25, 0x80	; 128
    3942:	90 93 2a 03 	sts	0x032A, r25
    3946:	80 93 29 03 	sts	0x0329, r24
    394a:	00 c1       	rjmp	.+512    	; 0x3b4c <_Z14anzeigehandlerv+0x2f2>
		}
		else if ((anzeige&(1<<Fahradflag)))
    394c:	81 ff       	sbrs	r24, 1
    394e:	95 c0       	rjmp	.+298    	; 0x3a7a <_Z14anzeigehandlerv+0x220>
		{
			//fahradschirm(12.3,kompass.angle());
			if (geschw>maxgeschw)
    3950:	40 90 24 03 	lds	r4, 0x0324
    3954:	50 90 25 03 	lds	r5, 0x0325
    3958:	60 90 26 03 	lds	r6, 0x0326
    395c:	70 90 27 03 	lds	r7, 0x0327
    3960:	20 91 1c 03 	lds	r18, 0x031C
    3964:	30 91 1d 03 	lds	r19, 0x031D
    3968:	40 91 1e 03 	lds	r20, 0x031E
    396c:	50 91 1f 03 	lds	r21, 0x031F
    3970:	c3 01       	movw	r24, r6
    3972:	b2 01       	movw	r22, r4
    3974:	0e 94 3e 2b 	call	0x567c	; 0x567c <__gesf2>
    3978:	18 16       	cp	r1, r24
    397a:	44 f4       	brge	.+16     	; 0x398c <_Z14anzeigehandlerv+0x132>
			{
				maxgeschw=geschw;
    397c:	40 92 1c 03 	sts	0x031C, r4
    3980:	50 92 1d 03 	sts	0x031D, r5
    3984:	60 92 1e 03 	sts	0x031E, r6
    3988:	70 92 1f 03 	sts	0x031F, r7
			}
			if (geschw != 0)
    398c:	20 e0       	ldi	r18, 0x00	; 0
    398e:	30 e0       	ldi	r19, 0x00	; 0
    3990:	a9 01       	movw	r20, r18
    3992:	c3 01       	movw	r24, r6
    3994:	b2 01       	movw	r22, r4
    3996:	0e 94 8e 29 	call	0x531c	; 0x531c <__cmpsf2>
    399a:	88 23       	and	r24, r24
    399c:	99 f0       	breq	.+38     	; 0x39c4 <_Z14anzeigehandlerv+0x16a>
			{
				Fahrtzeit++;
    399e:	80 91 18 03 	lds	r24, 0x0318
    39a2:	90 91 19 03 	lds	r25, 0x0319
    39a6:	a0 91 1a 03 	lds	r26, 0x031A
    39aa:	b0 91 1b 03 	lds	r27, 0x031B
    39ae:	01 96       	adiw	r24, 0x01	; 1
    39b0:	a1 1d       	adc	r26, r1
    39b2:	b1 1d       	adc	r27, r1
    39b4:	80 93 18 03 	sts	0x0318, r24
    39b8:	90 93 19 03 	sts	0x0319, r25
    39bc:	a0 93 1a 03 	sts	0x031A, r26
    39c0:	b0 93 1b 03 	sts	0x031B, r27
			}
			strecke+=geschw/3.6;
    39c4:	26 e6       	ldi	r18, 0x66	; 102
    39c6:	36 e6       	ldi	r19, 0x66	; 102
    39c8:	46 e6       	ldi	r20, 0x66	; 102
    39ca:	50 e4       	ldi	r21, 0x40	; 64
    39cc:	c3 01       	movw	r24, r6
    39ce:	b2 01       	movw	r22, r4
    39d0:	0e 94 95 29 	call	0x532a	; 0x532a <__divsf3>
    39d4:	20 91 20 03 	lds	r18, 0x0320
    39d8:	30 91 21 03 	lds	r19, 0x0321
    39dc:	40 91 22 03 	lds	r20, 0x0322
    39e0:	50 91 23 03 	lds	r21, 0x0323
    39e4:	0e 94 c8 28 	call	0x5190	; 0x5190 <__addsf3>
    39e8:	2b 01       	movw	r4, r22
    39ea:	3c 01       	movw	r6, r24
    39ec:	60 93 20 03 	sts	0x0320, r22
    39f0:	70 93 21 03 	sts	0x0321, r23
    39f4:	80 93 22 03 	sts	0x0322, r24
    39f8:	90 93 23 03 	sts	0x0323, r25
			fahradschirm(geschw,kompass.angle(),strecke,maxgeschw, Fahrtzeit);
    39fc:	c0 91 18 03 	lds	r28, 0x0318
    3a00:	d0 91 19 03 	lds	r29, 0x0319
    3a04:	10 91 1a 03 	lds	r17, 0x031A
    3a08:	00 91 1b 03 	lds	r16, 0x031B
    3a0c:	a0 90 1c 03 	lds	r10, 0x031C
    3a10:	b0 90 1d 03 	lds	r11, 0x031D
    3a14:	c0 90 1e 03 	lds	r12, 0x031E
    3a18:	d0 90 1f 03 	lds	r13, 0x031F
    3a1c:	88 e9       	ldi	r24, 0x98	; 152
    3a1e:	97 e0       	ldi	r25, 0x07	; 7
    3a20:	07 d7       	rcall	.+3598   	; 0x4830 <_ZN7Kompass5angleEv>
    3a22:	9b 01       	movw	r18, r22
    3a24:	ac 01       	movw	r20, r24
    3a26:	60 91 24 03 	lds	r22, 0x0324
    3a2a:	70 91 25 03 	lds	r23, 0x0325
    3a2e:	80 91 26 03 	lds	r24, 0x0326
    3a32:	90 91 27 03 	lds	r25, 0x0327
    3a36:	0f 93       	push	r16
    3a38:	1f 93       	push	r17
    3a3a:	df 93       	push	r29
    3a3c:	cf 93       	push	r28
    3a3e:	83 01       	movw	r16, r6
    3a40:	72 01       	movw	r14, r4
    3a42:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <_Z12fahradschirmddddm>
			if (rtc.Sekunden%2)
    3a46:	80 91 8f 07 	lds	r24, 0x078F
    3a4a:	0f 90       	pop	r0
    3a4c:	0f 90       	pop	r0
    3a4e:	0f 90       	pop	r0
    3a50:	0f 90       	pop	r0
    3a52:	80 ff       	sbrs	r24, 0
    3a54:	08 c0       	rjmp	.+16     	; 0x3a66 <_Z14anzeigehandlerv+0x20c>
			{
				geschw=0;
    3a56:	10 92 24 03 	sts	0x0324, r1
    3a5a:	10 92 25 03 	sts	0x0325, r1
    3a5e:	10 92 26 03 	sts	0x0326, r1
    3a62:	10 92 27 03 	sts	0x0327, r1
			}
			anzeige|=(1<<refreshdisplay);
    3a66:	80 91 29 03 	lds	r24, 0x0329
    3a6a:	90 91 2a 03 	lds	r25, 0x032A
    3a6e:	90 68       	ori	r25, 0x80	; 128
    3a70:	90 93 2a 03 	sts	0x032A, r25
    3a74:	80 93 29 03 	sts	0x0329, r24
    3a78:	69 c0       	rjmp	.+210    	; 0x3b4c <_Z14anzeigehandlerv+0x2f2>
    3a7a:	9c 01       	movw	r18, r24
    3a7c:	28 74       	andi	r18, 0x48	; 72
    3a7e:	33 27       	eor	r19, r19
		}
		else if ((anzeige&(1<<Einstellungsflag)) && (anzeige&(1<<Timerflag)))
    3a80:	28 34       	cpi	r18, 0x48	; 72
    3a82:	31 05       	cpc	r19, r1
    3a84:	61 f4       	brne	.+24     	; 0x3a9e <_Z14anzeigehandlerv+0x244>
		{
			timerseite();
    3a86:	0e 94 29 15 	call	0x2a52	; 0x2a52 <_Z10timerseitev>
			anzeige|=(1<<refreshdisplay);
    3a8a:	80 91 29 03 	lds	r24, 0x0329
    3a8e:	90 91 2a 03 	lds	r25, 0x032A
    3a92:	90 68       	ori	r25, 0x80	; 128
    3a94:	90 93 2a 03 	sts	0x032A, r25
    3a98:	80 93 29 03 	sts	0x0329, r24
    3a9c:	57 c0       	rjmp	.+174    	; 0x3b4c <_Z14anzeigehandlerv+0x2f2>
		}
		else if ((anzeige&(1<<Stoppuhrflag)))
    3a9e:	87 ff       	sbrs	r24, 7
    3aa0:	16 c0       	rjmp	.+44     	; 0x3ace <_Z14anzeigehandlerv+0x274>
		{
			if ((anzeige&(1<<Einstellungsflag)))
    3aa2:	83 ff       	sbrs	r24, 3
    3aa4:	09 c0       	rjmp	.+18     	; 0x3ab8 <_Z14anzeigehandlerv+0x25e>
			{
				stoppuhr.Sekunden++;
    3aa6:	e9 e5       	ldi	r30, 0x59	; 89
    3aa8:	f7 e0       	ldi	r31, 0x07	; 7
    3aaa:	80 81       	ld	r24, Z
    3aac:	8f 5f       	subi	r24, 0xFF	; 255
    3aae:	80 83       	st	Z, r24
				stoppuhr.zeit();
    3ab0:	87 e4       	ldi	r24, 0x47	; 71
    3ab2:	97 e0       	ldi	r25, 0x07	; 7
    3ab4:	0e 94 52 28 	call	0x50a4	; 0x50a4 <_ZN3RTC4zeitEv>
			}
			Stoppuhrseite();
    3ab8:	61 d8       	rcall	.-3902   	; 0x2b7c <_Z13Stoppuhrseitev>
			anzeige|=(1<<refreshdisplay);
    3aba:	80 91 29 03 	lds	r24, 0x0329
    3abe:	90 91 2a 03 	lds	r25, 0x032A
    3ac2:	90 68       	ori	r25, 0x80	; 128
    3ac4:	90 93 2a 03 	sts	0x032A, r25
    3ac8:	80 93 29 03 	sts	0x0329, r24
    3acc:	3f c0       	rjmp	.+126    	; 0x3b4c <_Z14anzeigehandlerv+0x2f2>
		}
		else if ((anzeige&(1<<Timerflag)))
    3ace:	86 ff       	sbrs	r24, 6
    3ad0:	20 c0       	rjmp	.+64     	; 0x3b12 <_Z14anzeigehandlerv+0x2b8>
		{
			zaehler.Sekunden--;
    3ad2:	e4 e7       	ldi	r30, 0x74	; 116
    3ad4:	f7 e0       	ldi	r31, 0x07	; 7
    3ad6:	80 81       	ld	r24, Z
    3ad8:	81 50       	subi	r24, 0x01	; 1
    3ada:	80 83       	st	Z, r24
			if(zaehler.timer()){
    3adc:	82 e6       	ldi	r24, 0x62	; 98
    3ade:	97 e0       	ldi	r25, 0x07	; 7
    3ae0:	0e 94 aa 28 	call	0x5154	; 0x5154 <_ZN3RTC5timerEv>
    3ae4:	88 23       	and	r24, r24
    3ae6:	49 f0       	breq	.+18     	; 0x3afa <_Z14anzeigehandlerv+0x2a0>
				anzeige|=(1<<blinkflag);
    3ae8:	80 91 29 03 	lds	r24, 0x0329
    3aec:	90 91 2a 03 	lds	r25, 0x032A
    3af0:	90 64       	ori	r25, 0x40	; 64
    3af2:	90 93 2a 03 	sts	0x032A, r25
    3af6:	80 93 29 03 	sts	0x0329, r24
			}
			timerseite();
    3afa:	0e 94 29 15 	call	0x2a52	; 0x2a52 <_Z10timerseitev>
			anzeige|=(1<<refreshdisplay);
    3afe:	80 91 29 03 	lds	r24, 0x0329
    3b02:	90 91 2a 03 	lds	r25, 0x032A
    3b06:	90 68       	ori	r25, 0x80	; 128
    3b08:	90 93 2a 03 	sts	0x032A, r25
    3b0c:	80 93 29 03 	sts	0x0329, r24
    3b10:	1d c0       	rjmp	.+58     	; 0x3b4c <_Z14anzeigehandlerv+0x2f2>
		}
		else if ((anzeige&(1<<Druckflag)))
    3b12:	91 ff       	sbrs	r25, 1
    3b14:	0b c0       	rjmp	.+22     	; 0x3b2c <_Z14anzeigehandlerv+0x2d2>
		{
			Pressuresensor();
    3b16:	bc d8       	rcall	.-3720   	; 0x2c90 <_Z14Pressuresensorv>
			anzeige |= (1<<refreshdisplay);
    3b18:	80 91 29 03 	lds	r24, 0x0329
    3b1c:	90 91 2a 03 	lds	r25, 0x032A
    3b20:	90 68       	ori	r25, 0x80	; 128
    3b22:	90 93 2a 03 	sts	0x032A, r25
    3b26:	80 93 29 03 	sts	0x0329, r24
    3b2a:	10 c0       	rjmp	.+32     	; 0x3b4c <_Z14anzeigehandlerv+0x2f2>
    3b2c:	88 70       	andi	r24, 0x08	; 8
    3b2e:	98 70       	andi	r25, 0x08	; 8
		}
		else if ((anzeige&(1<<Weckeranzeigeflag))&&(anzeige&(1<<Einstellungsflag)))
    3b30:	88 30       	cpi	r24, 0x08	; 8
    3b32:	98 40       	sbci	r25, 0x08	; 8
    3b34:	59 f4       	brne	.+22     	; 0x3b4c <_Z14anzeigehandlerv+0x2f2>
		{
			Weckeranzeige();
    3b36:	0e 94 41 11 	call	0x2282	; 0x2282 <_Z13Weckeranzeigev>
			anzeige|=(1<<refreshdisplay);
    3b3a:	80 91 29 03 	lds	r24, 0x0329
    3b3e:	90 91 2a 03 	lds	r25, 0x032A
    3b42:	90 68       	ori	r25, 0x80	; 128
    3b44:	90 93 2a 03 	sts	0x032A, r25
    3b48:	80 93 29 03 	sts	0x0329, r24
		}
		if ((anzeige&(1<<blinkflag)))
    3b4c:	80 91 29 03 	lds	r24, 0x0329
    3b50:	90 91 2a 03 	lds	r25, 0x032A
    3b54:	96 ff       	sbrs	r25, 6
    3b56:	0d c0       	rjmp	.+26     	; 0x3b72 <_Z14anzeigehandlerv+0x318>
		{
			oled.invert(rtc.Sekunden%2);
    3b58:	60 91 8f 07 	lds	r22, 0x078F
    3b5c:	61 70       	andi	r22, 0x01	; 1
    3b5e:	86 e4       	ldi	r24, 0x46	; 70
    3b60:	93 e0       	ldi	r25, 0x03	; 3
    3b62:	0e 94 87 05 	call	0xb0e	; 0xb0e <_ZN7Display6invertEh>
			LED.toggle();
    3b66:	83 e4       	ldi	r24, 0x43	; 67
    3b68:	93 e0       	ldi	r25, 0x03	; 3
    3b6a:	fd d7       	rcall	.+4090   	; 0x4b66 <_ZN6Output6toggleEv>
			Vibrationsmotor.on();
    3b6c:	81 e4       	ldi	r24, 0x41	; 65
    3b6e:	93 e0       	ldi	r25, 0x03	; 3
    3b70:	21 d7       	rcall	.+3650   	; 0x49b4 <_ZN6Output2onEv>
		}
		rtc.interupts&=~(1<<sekundeninterupt);
    3b72:	e5 e9       	ldi	r30, 0x95	; 149
    3b74:	f7 e0       	ldi	r31, 0x07	; 7
    3b76:	80 81       	ld	r24, Z
    3b78:	8d 7f       	andi	r24, 0xFD	; 253
    3b7a:	80 83       	st	Z, r24
	}
	//Minuteninterrupt
	if ((rtc.interupts&(1<<minuteninterupt)))
    3b7c:	80 91 95 07 	lds	r24, 0x0795
    3b80:	82 ff       	sbrs	r24, 2
    3b82:	24 c0       	rjmp	.+72     	; 0x3bcc <_Z14anzeigehandlerv+0x372>
	{
		if ((anzeige&(1<<Uhrflaggross)))
    3b84:	80 91 29 03 	lds	r24, 0x0329
    3b88:	90 91 2a 03 	lds	r25, 0x032A
    3b8c:	92 ff       	sbrs	r25, 2
    3b8e:	0c c0       	rjmp	.+24     	; 0x3ba8 <_Z14anzeigehandlerv+0x34e>
		{
			uhranzeigenmin();
    3b90:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <_Z14uhranzeigenminv>
			anzeige|=(1<<refreshdisplay);
    3b94:	80 91 29 03 	lds	r24, 0x0329
    3b98:	90 91 2a 03 	lds	r25, 0x032A
    3b9c:	90 68       	ori	r25, 0x80	; 128
    3b9e:	90 93 2a 03 	sts	0x032A, r25
    3ba2:	80 93 29 03 	sts	0x0329, r24
    3ba6:	0d c0       	rjmp	.+26     	; 0x3bc2 <_Z14anzeigehandlerv+0x368>
		}
		else if ((anzeige&(1<<Weckeranzeigeflag)))
    3ba8:	93 ff       	sbrs	r25, 3
    3baa:	0b c0       	rjmp	.+22     	; 0x3bc2 <_Z14anzeigehandlerv+0x368>
		{
			Weckeranzeige();
    3bac:	0e 94 41 11 	call	0x2282	; 0x2282 <_Z13Weckeranzeigev>
			anzeige|=(1<<refreshdisplay);
    3bb0:	80 91 29 03 	lds	r24, 0x0329
    3bb4:	90 91 2a 03 	lds	r25, 0x032A
    3bb8:	90 68       	ori	r25, 0x80	; 128
    3bba:	90 93 2a 03 	sts	0x032A, r25
    3bbe:	80 93 29 03 	sts	0x0329, r24
		}
		rtc.interupts&=~(1<<minuteninterupt);
    3bc2:	e5 e9       	ldi	r30, 0x95	; 149
    3bc4:	f7 e0       	ldi	r31, 0x07	; 7
    3bc6:	80 81       	ld	r24, Z
    3bc8:	8b 7f       	andi	r24, 0xFB	; 251
    3bca:	80 83       	st	Z, r24
	}
	//neuen Framebuffer an das Dispay senden
	if ((anzeige&(1<<refreshdisplay)))
    3bcc:	80 91 29 03 	lds	r24, 0x0329
    3bd0:	90 91 2a 03 	lds	r25, 0x032A
    3bd4:	99 23       	and	r25, r25
    3bd6:	6c f4       	brge	.+26     	; 0x3bf2 <_Z14anzeigehandlerv+0x398>
	{
		oled.sendFrame();
    3bd8:	86 e4       	ldi	r24, 0x46	; 70
    3bda:	93 e0       	ldi	r25, 0x03	; 3
    3bdc:	0e 94 8f 05 	call	0xb1e	; 0xb1e <_ZN7Display9sendFrameEv>
		anzeige&=~(1<<refreshdisplay);
    3be0:	80 91 29 03 	lds	r24, 0x0329
    3be4:	90 91 2a 03 	lds	r25, 0x032A
    3be8:	9f 77       	andi	r25, 0x7F	; 127
    3bea:	90 93 2a 03 	sts	0x032A, r25
    3bee:	80 93 29 03 	sts	0x0329, r24
	}
}
    3bf2:	df 91       	pop	r29
    3bf4:	cf 91       	pop	r28
    3bf6:	1f 91       	pop	r17
    3bf8:	0f 91       	pop	r16
    3bfa:	ff 90       	pop	r15
    3bfc:	ef 90       	pop	r14
    3bfe:	df 90       	pop	r13
    3c00:	cf 90       	pop	r12
    3c02:	bf 90       	pop	r11
    3c04:	af 90       	pop	r10
    3c06:	7f 90       	pop	r7
    3c08:	6f 90       	pop	r6
    3c0a:	5f 90       	pop	r5
    3c0c:	4f 90       	pop	r4
    3c0e:	08 95       	ret

00003c10 <_Z14eingabehandlerh>:

void eingabehandler(uint8_t taste){
	if (taste!='A')
    3c10:	81 34       	cpi	r24, 0x41	; 65
    3c12:	09 f4       	brne	.+2      	; 0x3c16 <_Z14eingabehandlerh+0x6>
    3c14:	c6 c3       	rjmp	.+1932   	; 0x43a2 <__stack+0x2a3>
	{
		rtc.interupts |= (1<<sekundeninterupt);
    3c16:	e5 e9       	ldi	r30, 0x95	; 149
    3c18:	f7 e0       	ldi	r31, 0x07	; 7
    3c1a:	90 81       	ld	r25, Z
    3c1c:	29 2f       	mov	r18, r25
    3c1e:	22 60       	ori	r18, 0x02	; 2
    3c20:	20 83       	st	Z, r18
		if (anzeige==255)
    3c22:	20 91 29 03 	lds	r18, 0x0329
    3c26:	30 91 2a 03 	lds	r19, 0x032A
    3c2a:	2f 3f       	cpi	r18, 0xFF	; 255
    3c2c:	31 05       	cpc	r19, r1
    3c2e:	61 f4       	brne	.+24     	; 0x3c48 <_Z14eingabehandlerh+0x38>
		{
			oled.ssd1306_command(SSD1306_DISPLAYON);
    3c30:	6f ea       	ldi	r22, 0xAF	; 175
    3c32:	86 e4       	ldi	r24, 0x46	; 70
    3c34:	93 e0       	ldi	r25, 0x03	; 3
    3c36:	0e 94 10 05 	call	0xa20	; 0xa20 <_ZN7Display15ssd1306_commandEh>
			//entweder display aus oder das Menue starten
			anzeige=(1<<menueflag);
    3c3a:	80 e0       	ldi	r24, 0x00	; 0
    3c3c:	90 e2       	ldi	r25, 0x20	; 32
    3c3e:	90 93 2a 03 	sts	0x032A, r25
    3c42:	80 93 29 03 	sts	0x0329, r24
    3c46:	08 95       	ret
    3c48:	a9 01       	movw	r20, r18
    3c4a:	41 70       	andi	r20, 0x01	; 1
    3c4c:	50 72       	andi	r21, 0x20	; 32
		}
		//gleicher Handler wie oben, aber hier speziell fuer die Bearbeitung von Tastereingaben mit switch fuer die Tasten
		//es sind einfach so viele Tasten moeglich
		else if ((anzeige&(1<<menueflag)) && (anzeige&(1<<Uhrflag)))	//Menue der Uhr
    3c4e:	41 30       	cpi	r20, 0x01	; 1
    3c50:	50 42       	sbci	r21, 0x20	; 32
    3c52:	09 f0       	breq	.+2      	; 0x3c56 <_Z14eingabehandlerh+0x46>
    3c54:	5a c0       	rjmp	.+180    	; 0x3d0a <_Z14eingabehandlerh+0xfa>
		{
			anzeige&=~((1<<menueflag)|(1<<Uhrflag));
    3c56:	2e 7f       	andi	r18, 0xFE	; 254
    3c58:	3f 7d       	andi	r19, 0xDF	; 223
    3c5a:	30 93 2a 03 	sts	0x032A, r19
    3c5e:	20 93 29 03 	sts	0x0329, r18
			switch (taste)
    3c62:	83 33       	cpi	r24, 0x33	; 51
    3c64:	f9 f0       	breq	.+62     	; 0x3ca4 <_Z14eingabehandlerh+0x94>
    3c66:	28 f4       	brcc	.+10     	; 0x3c72 <_Z14eingabehandlerh+0x62>
    3c68:	81 33       	cpi	r24, 0x31	; 49
    3c6a:	49 f0       	breq	.+18     	; 0x3c7e <_Z14eingabehandlerh+0x6e>
    3c6c:	82 33       	cpi	r24, 0x32	; 50
    3c6e:	69 f0       	breq	.+26     	; 0x3c8a <_Z14eingabehandlerh+0x7a>
    3c70:	45 c0       	rjmp	.+138    	; 0x3cfc <_Z14eingabehandlerh+0xec>
    3c72:	85 33       	cpi	r24, 0x35	; 53
    3c74:	89 f1       	breq	.+98     	; 0x3cd8 <_Z14eingabehandlerh+0xc8>
    3c76:	10 f1       	brcs	.+68     	; 0x3cbc <_Z14eingabehandlerh+0xac>
    3c78:	86 33       	cpi	r24, 0x36	; 54
    3c7a:	b9 f1       	breq	.+110    	; 0x3cea <_Z14eingabehandlerh+0xda>
    3c7c:	3f c0       	rjmp	.+126    	; 0x3cfc <_Z14eingabehandlerh+0xec>
			{
				case '1':
				//Wechseln auf die Uhr
				anzeige|=(1<<Uhrflag);
    3c7e:	21 60       	ori	r18, 0x01	; 1
    3c80:	30 93 2a 03 	sts	0x032A, r19
    3c84:	20 93 29 03 	sts	0x0329, r18
				break;
    3c88:	08 95       	ret
				
				case '2':
				//starten der Stoppuhr APP
				stoppuhr.Sekunden=0;
    3c8a:	10 92 59 07 	sts	0x0759, r1
				stoppuhr.Minuten=0;
    3c8e:	10 92 58 07 	sts	0x0758, r1
				stoppuhr.Stunden=0;
    3c92:	10 92 57 07 	sts	0x0757, r1
				anzeige|=(1<<refreshdisplay) | (1<<Stoppuhrflag);
    3c96:	20 68       	ori	r18, 0x80	; 128
    3c98:	30 68       	ori	r19, 0x80	; 128
    3c9a:	30 93 2a 03 	sts	0x032A, r19
    3c9e:	20 93 29 03 	sts	0x0329, r18
				break;
    3ca2:	08 95       	ret
				
				case '3':
				//Starten der Timer APP
				zaehler.Sekunden=0;
    3ca4:	10 92 74 07 	sts	0x0774, r1
				zaehler.Minuten=0;
    3ca8:	10 92 73 07 	sts	0x0773, r1
				zaehler.Stunden=0;
    3cac:	10 92 72 07 	sts	0x0772, r1
				
				anzeige|=(1<<Timerflag) | (1<<Einstellungsflag);
    3cb0:	28 64       	ori	r18, 0x48	; 72
    3cb2:	30 93 2a 03 	sts	0x032A, r19
    3cb6:	20 93 29 03 	sts	0x0329, r18
				break;
    3cba:	08 95       	ret
				
				case '4':
				//Starten der Alarmapp, momentan nicht implementiert
				oled.clearFrame();
    3cbc:	86 e4       	ldi	r24, 0x46	; 70
    3cbe:	93 e0       	ldi	r25, 0x03	; 3
    3cc0:	0e 94 05 05 	call	0xa0a	; 0xa0a <_ZN7Display10clearFrameEv>
				anzeige|=(1<<refreshdisplay);
    3cc4:	80 91 29 03 	lds	r24, 0x0329
    3cc8:	90 91 2a 03 	lds	r25, 0x032A
    3ccc:	90 68       	ori	r25, 0x80	; 128
    3cce:	90 93 2a 03 	sts	0x032A, r25
    3cd2:	80 93 29 03 	sts	0x0329, r24
				break;
    3cd6:	08 95       	ret
				
				case '5':
				//Wechseln auf grosse Uhr
				rtc.interupts |=(1<<minuteninterupt);
    3cd8:	96 60       	ori	r25, 0x06	; 6
    3cda:	90 93 95 07 	sts	0x0795, r25
				anzeige |=(1<<Uhrflaggross) | (1<<refreshdisplay);
    3cde:	34 68       	ori	r19, 0x84	; 132
    3ce0:	30 93 2a 03 	sts	0x032A, r19
    3ce4:	20 93 29 03 	sts	0x0329, r18
				break;
    3ce8:	08 95       	ret
				case '6':
				rtc.interupts |=(1<<minuteninterupt);
    3cea:	96 60       	ori	r25, 0x06	; 6
    3cec:	90 93 95 07 	sts	0x0795, r25
				anzeige |= (1<<Weckeranzeigeflag);
    3cf0:	38 60       	ori	r19, 0x08	; 8
    3cf2:	30 93 2a 03 	sts	0x032A, r19
    3cf6:	20 93 29 03 	sts	0x0329, r18
				break;
    3cfa:	08 95       	ret
				default:
				//menueflag erneu setzen
				anzeige|=(1<<menueflag)|(1<<Uhrflag);
    3cfc:	21 60       	ori	r18, 0x01	; 1
    3cfe:	30 62       	ori	r19, 0x20	; 32
    3d00:	30 93 2a 03 	sts	0x032A, r19
    3d04:	20 93 29 03 	sts	0x0329, r18
				break;
    3d08:	22 c3       	rjmp	.+1604   	; 0x434e <__stack+0x24f>
    3d0a:	a9 01       	movw	r20, r18
    3d0c:	48 70       	andi	r20, 0x08	; 8
    3d0e:	50 72       	andi	r21, 0x20	; 32
			}
		}
		else if ((anzeige&(1<<menueflag)) && (anzeige&(1<<Einstellungsflag)))	//Menue der Einstellungen
    3d10:	48 30       	cpi	r20, 0x08	; 8
    3d12:	50 42       	sbci	r21, 0x20	; 32
    3d14:	09 f0       	breq	.+2      	; 0x3d18 <_Z14eingabehandlerh+0x108>
    3d16:	3d c0       	rjmp	.+122    	; 0x3d92 <_Z14eingabehandlerh+0x182>
		{
			anzeige&=~((1<<menueflag)|(1<<Einstellungsflag));
    3d18:	27 7f       	andi	r18, 0xF7	; 247
    3d1a:	3f 7d       	andi	r19, 0xDF	; 223
    3d1c:	30 93 2a 03 	sts	0x032A, r19
    3d20:	20 93 29 03 	sts	0x0329, r18
			switch (taste)
    3d24:	82 33       	cpi	r24, 0x32	; 50
    3d26:	b1 f0       	breq	.+44     	; 0x3d54 <_Z14eingabehandlerh+0x144>
    3d28:	18 f4       	brcc	.+6      	; 0x3d30 <_Z14eingabehandlerh+0x120>
    3d2a:	81 33       	cpi	r24, 0x31	; 49
    3d2c:	31 f0       	breq	.+12     	; 0x3d3a <_Z14eingabehandlerh+0x12a>
    3d2e:	2a c0       	rjmp	.+84     	; 0x3d84 <_Z14eingabehandlerh+0x174>
    3d30:	83 33       	cpi	r24, 0x33	; 51
    3d32:	b1 f0       	breq	.+44     	; 0x3d60 <_Z14eingabehandlerh+0x150>
    3d34:	84 33       	cpi	r24, 0x34	; 52
    3d36:	f9 f0       	breq	.+62     	; 0x3d76 <_Z14eingabehandlerh+0x166>
    3d38:	25 c0       	rjmp	.+74     	; 0x3d84 <_Z14eingabehandlerh+0x174>
			{
				case '1':
				//zuruecksetzen der Kalibrierung, da passive Kallibrierung eingebaut
				kompass.kallibrierung_ruecksetzen();
    3d3a:	88 e9       	ldi	r24, 0x98	; 152
    3d3c:	97 e0       	ldi	r25, 0x07	; 7
    3d3e:	e3 d5       	rcall	.+3014   	; 0x4906 <_ZN7Kompass25kallibrierung_ruecksetzenEv>
				anzeige|=(1<<Kompasflag);
    3d40:	80 91 29 03 	lds	r24, 0x0329
    3d44:	90 91 2a 03 	lds	r25, 0x032A
    3d48:	84 60       	ori	r24, 0x04	; 4
    3d4a:	90 93 2a 03 	sts	0x032A, r25
    3d4e:	80 93 29 03 	sts	0x0329, r24
				break;
    3d52:	08 95       	ret
				case '2':
				//Gaineinstellung fuer den Kompass
				anzeige|=(1<<Kompasgaineinstellenflag);
    3d54:	20 62       	ori	r18, 0x20	; 32
    3d56:	30 93 2a 03 	sts	0x032A, r19
    3d5a:	20 93 29 03 	sts	0x0329, r18
				break;
    3d5e:	08 95       	ret
				case '3':
				//dies ist eine der wenigen Funktinen, die die Handler Strucktur nicht anwenden, da sie die rtc anhaellt
				uhreinstellen();
    3d60:	8a d8       	rcall	.-3820   	; 0x2e76 <_Z13uhreinstellenv>
				anzeige|=(1<<Uhrflag);
    3d62:	80 91 29 03 	lds	r24, 0x0329
    3d66:	90 91 2a 03 	lds	r25, 0x032A
    3d6a:	81 60       	ori	r24, 0x01	; 1
    3d6c:	90 93 2a 03 	sts	0x032A, r25
    3d70:	80 93 29 03 	sts	0x0329, r24
				break;
    3d74:	08 95       	ret
				case '4':
				anzeige |= (1<<Einstellungsflag) | (1<<Weckeranzeigeflag);
    3d76:	28 60       	ori	r18, 0x08	; 8
    3d78:	38 60       	ori	r19, 0x08	; 8
    3d7a:	30 93 2a 03 	sts	0x032A, r19
    3d7e:	20 93 29 03 	sts	0x0329, r18
				break;
    3d82:	08 95       	ret
				default:
				//Menueflag neu setzten
				anzeige|=(1<<menueflag)|(1<<Einstellungsflag);
    3d84:	28 60       	ori	r18, 0x08	; 8
    3d86:	30 62       	ori	r19, 0x20	; 32
    3d88:	30 93 2a 03 	sts	0x032A, r19
    3d8c:	20 93 29 03 	sts	0x0329, r18
				break;
    3d90:	de c2       	rjmp	.+1468   	; 0x434e <__stack+0x24f>
			}
		}
		else if ((anzeige&(1<<menueflag)))	//nur das grosse menue
    3d92:	35 ff       	sbrs	r19, 5
    3d94:	58 c0       	rjmp	.+176    	; 0x3e46 <_Z14eingabehandlerh+0x236>
		{
			anzeige&=~(1<<menueflag);
    3d96:	3f 7d       	andi	r19, 0xDF	; 223
    3d98:	30 93 2a 03 	sts	0x032A, r19
    3d9c:	20 93 29 03 	sts	0x0329, r18
			switch (taste)
    3da0:	48 2f       	mov	r20, r24
    3da2:	50 e0       	ldi	r21, 0x00	; 0
    3da4:	fa 01       	movw	r30, r20
    3da6:	f1 97       	sbiw	r30, 0x31	; 49
    3da8:	e7 30       	cpi	r30, 0x07	; 7
    3daa:	f1 05       	cpc	r31, r1
    3dac:	08 f0       	brcs	.+2      	; 0x3db0 <_Z14eingabehandlerh+0x1a0>
    3dae:	45 c0       	rjmp	.+138    	; 0x3e3a <_Z14eingabehandlerh+0x22a>
    3db0:	e0 5b       	subi	r30, 0xB0	; 176
    3db2:	ff 4f       	sbci	r31, 0xFF	; 255
    3db4:	0c 94 c0 2f 	jmp	0x5f80	; 0x5f80 <__tablejump2__>
			{
				case '1':
				anzeige|=(1<<Fahradflag);
    3db8:	22 60       	ori	r18, 0x02	; 2
    3dba:	30 93 2a 03 	sts	0x032A, r19
    3dbe:	20 93 29 03 	sts	0x0329, r18
				//starten des Timers fuer die geschwindigkeit
				TCCR1B |= ((1<<CS12) | (1<<CS10));
    3dc2:	e1 e8       	ldi	r30, 0x81	; 129
    3dc4:	f0 e0       	ldi	r31, 0x00	; 0
    3dc6:	80 81       	ld	r24, Z
    3dc8:	85 60       	ori	r24, 0x05	; 5
    3dca:	80 83       	st	Z, r24
				break;
    3dcc:	08 95       	ret
				
				case '2':
				//Taschenrechner starten
				//Monentan deaktiv, da Umstellung der Handler
				//operation(Flieskommazahleingabe());
				oled.clearFrame();
    3dce:	86 e4       	ldi	r24, 0x46	; 70
    3dd0:	93 e0       	ldi	r25, 0x03	; 3
    3dd2:	0e 94 05 05 	call	0xa0a	; 0xa0a <_ZN7Display10clearFrameEv>
				anzeige|=(1<<refreshdisplay);
    3dd6:	80 91 29 03 	lds	r24, 0x0329
    3dda:	90 91 2a 03 	lds	r25, 0x032A
    3dde:	90 68       	ori	r25, 0x80	; 128
    3de0:	90 93 2a 03 	sts	0x032A, r25
    3de4:	80 93 29 03 	sts	0x0329, r24
				break;
    3de8:	08 95       	ret
				
				case '3':
				anzeige|=(1<<Kompasflag);
    3dea:	24 60       	ori	r18, 0x04	; 4
    3dec:	30 93 2a 03 	sts	0x032A, r19
    3df0:	20 93 29 03 	sts	0x0329, r18
				break;
    3df4:	08 95       	ret
				
				case '4':
				//Menue der Uhr
				anzeige|=(1<<menueflag) | (1<<Uhrflag);
    3df6:	21 60       	ori	r18, 0x01	; 1
    3df8:	30 62       	ori	r19, 0x20	; 32
    3dfa:	30 93 2a 03 	sts	0x032A, r19
    3dfe:	20 93 29 03 	sts	0x0329, r18
				break;
    3e02:	08 95       	ret
				
				case '5':
				//menue der Einstellungen
				anzeige|=(1<<menueflag) | (1<<Einstellungsflag);
    3e04:	28 60       	ori	r18, 0x08	; 8
    3e06:	30 62       	ori	r19, 0x20	; 32
    3e08:	30 93 2a 03 	sts	0x032A, r19
    3e0c:	20 93 29 03 	sts	0x0329, r18
				break;
    3e10:	08 95       	ret
				
				case '6':
				//Display ausschalten
				//anzeige=255;
				oled.clearFrame();
    3e12:	86 e4       	ldi	r24, 0x46	; 70
    3e14:	93 e0       	ldi	r25, 0x03	; 3
    3e16:	0e 94 05 05 	call	0xa0a	; 0xa0a <_ZN7Display10clearFrameEv>
				anzeige|=(1<<refreshdisplay);
    3e1a:	80 91 29 03 	lds	r24, 0x0329
    3e1e:	90 91 2a 03 	lds	r25, 0x032A
    3e22:	90 68       	ori	r25, 0x80	; 128
    3e24:	90 93 2a 03 	sts	0x032A, r25
    3e28:	80 93 29 03 	sts	0x0329, r24
				break;
    3e2c:	08 95       	ret
				case '7':
				anzeige |= (1<<Druckflag);
    3e2e:	32 60       	ori	r19, 0x02	; 2
    3e30:	30 93 2a 03 	sts	0x032A, r19
    3e34:	20 93 29 03 	sts	0x0329, r18
				break;
    3e38:	08 95       	ret
				default:
				//menueflag erneut setzen um abschalten zu verhindern
				anzeige|=(1<<menueflag);
    3e3a:	30 62       	ori	r19, 0x20	; 32
    3e3c:	30 93 2a 03 	sts	0x032A, r19
    3e40:	20 93 29 03 	sts	0x0329, r18
				break;
    3e44:	84 c2       	rjmp	.+1288   	; 0x434e <__stack+0x24f>
    3e46:	a9 01       	movw	r20, r18
    3e48:	48 70       	andi	r20, 0x08	; 8
    3e4a:	58 70       	andi	r21, 0x08	; 8
			}
		}
		else if ((anzeige&(1<<Einstellungsflag))&&(anzeige&(1<<Weckeranzeigeflag)))
    3e4c:	48 30       	cpi	r20, 0x08	; 8
    3e4e:	58 40       	sbci	r21, 0x08	; 8
    3e50:	09 f0       	breq	.+2      	; 0x3e54 <_Z14eingabehandlerh+0x244>
    3e52:	68 c0       	rjmp	.+208    	; 0x3f24 <_Z14eingabehandlerh+0x314>
		{
			switch (pos)
    3e54:	40 91 28 03 	lds	r20, 0x0328
    3e58:	41 30       	cpi	r20, 0x01	; 1
    3e5a:	11 f1       	breq	.+68     	; 0x3ea0 <_Z14eingabehandlerh+0x290>
    3e5c:	30 f0       	brcs	.+12     	; 0x3e6a <_Z14eingabehandlerh+0x25a>
    3e5e:	42 30       	cpi	r20, 0x02	; 2
    3e60:	79 f1       	breq	.+94     	; 0x3ec0 <_Z14eingabehandlerh+0x2b0>
    3e62:	43 30       	cpi	r20, 0x03	; 3
    3e64:	09 f4       	brne	.+2      	; 0x3e68 <_Z14eingabehandlerh+0x258>
    3e66:	3f c0       	rjmp	.+126    	; 0x3ee6 <_Z14eingabehandlerh+0x2d6>
    3e68:	72 c2       	rjmp	.+1252   	; 0x434e <__stack+0x24f>
			{
				case 0:
				rtc.WStunden=0;
    3e6a:	10 92 97 07 	sts	0x0797, r1
				rtc.WMinuten=0;
    3e6e:	10 92 96 07 	sts	0x0796, r1
				rtc.interupts &= ~((1<<Weckerein)|(1<<Weckeractiv));
    3e72:	97 7e       	andi	r25, 0xE7	; 231
    3e74:	92 60       	ori	r25, 0x02	; 2
    3e76:	90 93 95 07 	sts	0x0795, r25
				switch (taste)
    3e7a:	83 32       	cpi	r24, 0x23	; 35
    3e7c:	09 f4       	brne	.+2      	; 0x3e80 <_Z14eingabehandlerh+0x270>
    3e7e:	67 c2       	rjmp	.+1230   	; 0x434e <__stack+0x24f>
    3e80:	8a 32       	cpi	r24, 0x2A	; 42
    3e82:	09 f4       	brne	.+2      	; 0x3e86 <_Z14eingabehandlerh+0x276>
    3e84:	64 c2       	rjmp	.+1224   	; 0x434e <__stack+0x24f>
					case '#':
					break;
					case '*':
					break;
					default:
					rtc.WStunden=(taste-'0')*10;
    3e86:	98 2f       	mov	r25, r24
    3e88:	99 0f       	add	r25, r25
    3e8a:	90 56       	subi	r25, 0x60	; 96
    3e8c:	29 2f       	mov	r18, r25
    3e8e:	22 0f       	add	r18, r18
    3e90:	22 0f       	add	r18, r18
    3e92:	92 0f       	add	r25, r18
    3e94:	90 93 97 07 	sts	0x0797, r25
					pos++;
    3e98:	91 e0       	ldi	r25, 0x01	; 1
    3e9a:	90 93 28 03 	sts	0x0328, r25
					break;
    3e9e:	57 c2       	rjmp	.+1198   	; 0x434e <__stack+0x24f>
				}
				break;
				case 1:
				switch (taste)
    3ea0:	83 32       	cpi	r24, 0x23	; 35
    3ea2:	09 f4       	brne	.+2      	; 0x3ea6 <_Z14eingabehandlerh+0x296>
    3ea4:	54 c2       	rjmp	.+1192   	; 0x434e <__stack+0x24f>
    3ea6:	8a 32       	cpi	r24, 0x2A	; 42
    3ea8:	09 f4       	brne	.+2      	; 0x3eac <_Z14eingabehandlerh+0x29c>
    3eaa:	51 c2       	rjmp	.+1186   	; 0x434e <__stack+0x24f>
					case '#':
					break;
					case '*':
					break;
					default:
					rtc.WStunden+=(taste-'0');
    3eac:	e7 e9       	ldi	r30, 0x97	; 151
    3eae:	f7 e0       	ldi	r31, 0x07	; 7
    3eb0:	90 81       	ld	r25, Z
    3eb2:	90 53       	subi	r25, 0x30	; 48
    3eb4:	98 0f       	add	r25, r24
    3eb6:	90 83       	st	Z, r25
					pos++;
    3eb8:	92 e0       	ldi	r25, 0x02	; 2
    3eba:	90 93 28 03 	sts	0x0328, r25
					break;
    3ebe:	47 c2       	rjmp	.+1166   	; 0x434e <__stack+0x24f>
				}
				break;
				case 2:
				switch (taste)
    3ec0:	83 32       	cpi	r24, 0x23	; 35
    3ec2:	09 f4       	brne	.+2      	; 0x3ec6 <_Z14eingabehandlerh+0x2b6>
    3ec4:	44 c2       	rjmp	.+1160   	; 0x434e <__stack+0x24f>
    3ec6:	8a 32       	cpi	r24, 0x2A	; 42
    3ec8:	09 f4       	brne	.+2      	; 0x3ecc <_Z14eingabehandlerh+0x2bc>
    3eca:	41 c2       	rjmp	.+1154   	; 0x434e <__stack+0x24f>
					case '#':
					break;
					case '*':
					break;
					default:
					rtc.WMinuten=(taste-'0')*10;
    3ecc:	98 2f       	mov	r25, r24
    3ece:	99 0f       	add	r25, r25
    3ed0:	90 56       	subi	r25, 0x60	; 96
    3ed2:	29 2f       	mov	r18, r25
    3ed4:	22 0f       	add	r18, r18
    3ed6:	22 0f       	add	r18, r18
    3ed8:	92 0f       	add	r25, r18
    3eda:	90 93 96 07 	sts	0x0796, r25
					pos++;
    3ede:	93 e0       	ldi	r25, 0x03	; 3
    3ee0:	90 93 28 03 	sts	0x0328, r25
					break;
    3ee4:	34 c2       	rjmp	.+1128   	; 0x434e <__stack+0x24f>
				}
				break;
				case 3:
				switch (taste)
    3ee6:	83 32       	cpi	r24, 0x23	; 35
    3ee8:	41 f0       	breq	.+16     	; 0x3efa <_Z14eingabehandlerh+0x2ea>
    3eea:	8a 32       	cpi	r24, 0x2A	; 42
    3eec:	31 f0       	breq	.+12     	; 0x3efa <_Z14eingabehandlerh+0x2ea>
					case '#':
					break;
					case '*':
					break;
					default:
					rtc.WMinuten+=(taste-'0');
    3eee:	e6 e9       	ldi	r30, 0x96	; 150
    3ef0:	f7 e0       	ldi	r31, 0x07	; 7
    3ef2:	40 81       	ld	r20, Z
    3ef4:	40 53       	subi	r20, 0x30	; 48
    3ef6:	48 0f       	add	r20, r24
    3ef8:	40 83       	st	Z, r20
					pos++;
					break;
				}
				pos=0;
    3efa:	10 92 28 03 	sts	0x0328, r1
				if (!(rtc.WStunden>=24) && !(rtc.WMinuten>=60))
    3efe:	40 91 97 07 	lds	r20, 0x0797
    3f02:	48 31       	cpi	r20, 0x18	; 24
    3f04:	08 f0       	brcs	.+2      	; 0x3f08 <_Z14eingabehandlerh+0x2f8>
    3f06:	23 c2       	rjmp	.+1094   	; 0x434e <__stack+0x24f>
    3f08:	40 91 96 07 	lds	r20, 0x0796
    3f0c:	4c 33       	cpi	r20, 0x3C	; 60
    3f0e:	08 f0       	brcs	.+2      	; 0x3f12 <_Z14eingabehandlerh+0x302>
    3f10:	1e c2       	rjmp	.+1084   	; 0x434e <__stack+0x24f>
				{
					anzeige&=~(1<<Einstellungsflag);
    3f12:	27 7f       	andi	r18, 0xF7	; 247
    3f14:	30 93 2a 03 	sts	0x032A, r19
    3f18:	20 93 29 03 	sts	0x0329, r18
					rtc.interupts|=(1<<Weckerein);
					rtc.interupts|=(1<<minuteninterupt);
    3f1c:	9e 60       	ori	r25, 0x0E	; 14
    3f1e:	90 93 95 07 	sts	0x0795, r25
    3f22:	15 c2       	rjmp	.+1066   	; 0x434e <__stack+0x24f>
				}
				break;
			}
		}
		else if ((anzeige&(1<<Kompasgaineinstellenflag)))
    3f24:	25 ff       	sbrs	r18, 5
    3f26:	49 c0       	rjmp	.+146    	; 0x3fba <_Z14eingabehandlerh+0x3aa>
		{
			anzeige&=~(1<<Kompasgaineinstellenflag);
    3f28:	a9 01       	movw	r20, r18
    3f2a:	4f 7d       	andi	r20, 0xDF	; 223
			anzeige|=(1<<Kompasflag);
    3f2c:	44 60       	ori	r20, 0x04	; 4
    3f2e:	50 93 2a 03 	sts	0x032A, r21
    3f32:	40 93 29 03 	sts	0x0329, r20
			switch (taste) {
    3f36:	48 2f       	mov	r20, r24
    3f38:	50 e0       	ldi	r21, 0x00	; 0
    3f3a:	fa 01       	movw	r30, r20
    3f3c:	f1 97       	sbiw	r30, 0x31	; 49
    3f3e:	e8 30       	cpi	r30, 0x08	; 8
    3f40:	f1 05       	cpc	r31, r1
    3f42:	a0 f5       	brcc	.+104    	; 0x3fac <_Z14eingabehandlerh+0x39c>
    3f44:	e9 5a       	subi	r30, 0xA9	; 169
    3f46:	ff 4f       	sbci	r31, 0xFF	; 255
    3f48:	0c 94 c0 2f 	jmp	0x5f80	; 0x5f80 <__tablejump2__>
				case '1':
				kompass.HMC5883L_command(0x01,HMCGAIN1370);
    3f4c:	40 e0       	ldi	r20, 0x00	; 0
    3f4e:	61 e0       	ldi	r22, 0x01	; 1
    3f50:	88 e9       	ldi	r24, 0x98	; 152
    3f52:	97 e0       	ldi	r25, 0x07	; 7
    3f54:	7b c3       	rjmp	.+1782   	; 0x464c <_ZN7Kompass16HMC5883L_commandEhh>
				break;
    3f56:	08 95       	ret
				case '2':
				kompass.HMC5883L_command(0x01,HMCGAIN1090);
    3f58:	40 e2       	ldi	r20, 0x20	; 32
    3f5a:	61 e0       	ldi	r22, 0x01	; 1
    3f5c:	88 e9       	ldi	r24, 0x98	; 152
    3f5e:	97 e0       	ldi	r25, 0x07	; 7
    3f60:	75 c3       	rjmp	.+1770   	; 0x464c <_ZN7Kompass16HMC5883L_commandEhh>
				break;
    3f62:	08 95       	ret
				case '3':
				kompass.HMC5883L_command(0x01,HMCGAIN820);
    3f64:	40 e4       	ldi	r20, 0x40	; 64
    3f66:	61 e0       	ldi	r22, 0x01	; 1
    3f68:	88 e9       	ldi	r24, 0x98	; 152
    3f6a:	97 e0       	ldi	r25, 0x07	; 7
    3f6c:	6f c3       	rjmp	.+1758   	; 0x464c <_ZN7Kompass16HMC5883L_commandEhh>
				break;
    3f6e:	08 95       	ret
				case '4':
				kompass.HMC5883L_command(0x01,HMCGAIN660);
    3f70:	40 e6       	ldi	r20, 0x60	; 96
    3f72:	61 e0       	ldi	r22, 0x01	; 1
    3f74:	88 e9       	ldi	r24, 0x98	; 152
    3f76:	97 e0       	ldi	r25, 0x07	; 7
    3f78:	69 c3       	rjmp	.+1746   	; 0x464c <_ZN7Kompass16HMC5883L_commandEhh>
				break;
    3f7a:	08 95       	ret
				case '5':
				kompass.HMC5883L_command(0x01,HMCGAIN440);
    3f7c:	40 e8       	ldi	r20, 0x80	; 128
    3f7e:	61 e0       	ldi	r22, 0x01	; 1
    3f80:	88 e9       	ldi	r24, 0x98	; 152
    3f82:	97 e0       	ldi	r25, 0x07	; 7
    3f84:	63 c3       	rjmp	.+1734   	; 0x464c <_ZN7Kompass16HMC5883L_commandEhh>
				break;
    3f86:	08 95       	ret
				case '6':
				kompass.HMC5883L_command(0x01,HMCGAIN390);
    3f88:	40 ea       	ldi	r20, 0xA0	; 160
    3f8a:	61 e0       	ldi	r22, 0x01	; 1
    3f8c:	88 e9       	ldi	r24, 0x98	; 152
    3f8e:	97 e0       	ldi	r25, 0x07	; 7
    3f90:	5d c3       	rjmp	.+1722   	; 0x464c <_ZN7Kompass16HMC5883L_commandEhh>
				break;
    3f92:	08 95       	ret
				case '7':
				kompass.HMC5883L_command(0x01,HMCGAIN330);
    3f94:	40 ec       	ldi	r20, 0xC0	; 192
    3f96:	61 e0       	ldi	r22, 0x01	; 1
    3f98:	88 e9       	ldi	r24, 0x98	; 152
    3f9a:	97 e0       	ldi	r25, 0x07	; 7
    3f9c:	57 c3       	rjmp	.+1710   	; 0x464c <_ZN7Kompass16HMC5883L_commandEhh>
				break;
    3f9e:	08 95       	ret
				case '8':
				kompass.HMC5883L_command(0x01,HMCGAIN230);
    3fa0:	40 ee       	ldi	r20, 0xE0	; 224
    3fa2:	61 e0       	ldi	r22, 0x01	; 1
    3fa4:	88 e9       	ldi	r24, 0x98	; 152
    3fa6:	97 e0       	ldi	r25, 0x07	; 7
    3fa8:	51 c3       	rjmp	.+1698   	; 0x464c <_ZN7Kompass16HMC5883L_commandEhh>
				break;
    3faa:	08 95       	ret
				default:
				anzeige &=~(1<<Kompasflag);
    3fac:	2b 7d       	andi	r18, 0xDB	; 219
				anzeige|=(1<<Kompasgaineinstellenflag);
    3fae:	20 62       	ori	r18, 0x20	; 32
    3fb0:	30 93 2a 03 	sts	0x032A, r19
    3fb4:	20 93 29 03 	sts	0x0329, r18
				break;
    3fb8:	ca c1       	rjmp	.+916    	; 0x434e <__stack+0x24f>
    3fba:	a9 01       	movw	r20, r18
    3fbc:	48 74       	andi	r20, 0x48	; 72
    3fbe:	55 27       	eor	r21, r21
			}
		}
		else if ((anzeige&(1<<Einstellungsflag)) && (anzeige&(1<<Timerflag)))
    3fc0:	48 34       	cpi	r20, 0x48	; 72
    3fc2:	51 05       	cpc	r21, r1
    3fc4:	09 f0       	breq	.+2      	; 0x3fc8 <_Z14eingabehandlerh+0x3b8>
    3fc6:	87 c0       	rjmp	.+270    	; 0x40d6 <_Z14eingabehandlerh+0x4c6>
		{
			switch (pos)
    3fc8:	90 91 28 03 	lds	r25, 0x0328
    3fcc:	92 30       	cpi	r25, 0x02	; 2
    3fce:	a9 f1       	breq	.+106    	; 0x403a <_Z14eingabehandlerh+0x42a>
    3fd0:	28 f4       	brcc	.+10     	; 0x3fdc <_Z14eingabehandlerh+0x3cc>
    3fd2:	99 23       	and	r25, r25
    3fd4:	61 f0       	breq	.+24     	; 0x3fee <_Z14eingabehandlerh+0x3de>
    3fd6:	91 30       	cpi	r25, 0x01	; 1
    3fd8:	01 f1       	breq	.+64     	; 0x401a <_Z14eingabehandlerh+0x40a>
    3fda:	b9 c1       	rjmp	.+882    	; 0x434e <__stack+0x24f>
    3fdc:	94 30       	cpi	r25, 0x04	; 4
    3fde:	09 f4       	brne	.+2      	; 0x3fe2 <_Z14eingabehandlerh+0x3d2>
    3fe0:	52 c0       	rjmp	.+164    	; 0x4086 <_Z14eingabehandlerh+0x476>
    3fe2:	08 f4       	brcc	.+2      	; 0x3fe6 <_Z14eingabehandlerh+0x3d6>
    3fe4:	40 c0       	rjmp	.+128    	; 0x4066 <_Z14eingabehandlerh+0x456>
    3fe6:	95 30       	cpi	r25, 0x05	; 5
    3fe8:	09 f4       	brne	.+2      	; 0x3fec <_Z14eingabehandlerh+0x3dc>
    3fea:	63 c0       	rjmp	.+198    	; 0x40b2 <_Z14eingabehandlerh+0x4a2>
    3fec:	b0 c1       	rjmp	.+864    	; 0x434e <__stack+0x24f>
			{
				case 0:
				switch (taste)
    3fee:	83 32       	cpi	r24, 0x23	; 35
    3ff0:	09 f4       	brne	.+2      	; 0x3ff4 <_Z14eingabehandlerh+0x3e4>
    3ff2:	ad c1       	rjmp	.+858    	; 0x434e <__stack+0x24f>
    3ff4:	8a 32       	cpi	r24, 0x2A	; 42
    3ff6:	09 f4       	brne	.+2      	; 0x3ffa <_Z14eingabehandlerh+0x3ea>
    3ff8:	aa c1       	rjmp	.+852    	; 0x434e <__stack+0x24f>
					case '#':
					break;
					case '*':
					break;
					default:
					zaehler.Sekunden+=(taste-'0')*10;
    3ffa:	e4 e7       	ldi	r30, 0x74	; 116
    3ffc:	f7 e0       	ldi	r31, 0x07	; 7
    3ffe:	98 2f       	mov	r25, r24
    4000:	99 0f       	add	r25, r25
    4002:	90 56       	subi	r25, 0x60	; 96
    4004:	29 2f       	mov	r18, r25
    4006:	22 0f       	add	r18, r18
    4008:	22 0f       	add	r18, r18
    400a:	92 0f       	add	r25, r18
    400c:	20 81       	ld	r18, Z
    400e:	92 0f       	add	r25, r18
    4010:	90 83       	st	Z, r25
					pos++;
    4012:	91 e0       	ldi	r25, 0x01	; 1
    4014:	90 93 28 03 	sts	0x0328, r25
					break;
    4018:	9a c1       	rjmp	.+820    	; 0x434e <__stack+0x24f>
				}
				break;
				case 1:
				switch (taste)
    401a:	83 32       	cpi	r24, 0x23	; 35
    401c:	09 f4       	brne	.+2      	; 0x4020 <_Z14eingabehandlerh+0x410>
    401e:	97 c1       	rjmp	.+814    	; 0x434e <__stack+0x24f>
    4020:	8a 32       	cpi	r24, 0x2A	; 42
    4022:	09 f4       	brne	.+2      	; 0x4026 <_Z14eingabehandlerh+0x416>
    4024:	94 c1       	rjmp	.+808    	; 0x434e <__stack+0x24f>
					case '#':
					break;
					case '*':
					break;
					default:
					zaehler.Sekunden+=(taste-'0');
    4026:	e4 e7       	ldi	r30, 0x74	; 116
    4028:	f7 e0       	ldi	r31, 0x07	; 7
    402a:	90 81       	ld	r25, Z
    402c:	90 53       	subi	r25, 0x30	; 48
    402e:	98 0f       	add	r25, r24
    4030:	90 83       	st	Z, r25
					pos++;
    4032:	92 e0       	ldi	r25, 0x02	; 2
    4034:	90 93 28 03 	sts	0x0328, r25
					break;
    4038:	8a c1       	rjmp	.+788    	; 0x434e <__stack+0x24f>
				}
				break;
				case 2:
				switch (taste)
    403a:	83 32       	cpi	r24, 0x23	; 35
    403c:	09 f4       	brne	.+2      	; 0x4040 <_Z14eingabehandlerh+0x430>
    403e:	87 c1       	rjmp	.+782    	; 0x434e <__stack+0x24f>
    4040:	8a 32       	cpi	r24, 0x2A	; 42
    4042:	09 f4       	brne	.+2      	; 0x4046 <_Z14eingabehandlerh+0x436>
    4044:	84 c1       	rjmp	.+776    	; 0x434e <__stack+0x24f>
					case '#':
					break;
					case '*':
					break;
					default:
					zaehler.Minuten+=(taste-'0')*10;
    4046:	e3 e7       	ldi	r30, 0x73	; 115
    4048:	f7 e0       	ldi	r31, 0x07	; 7
    404a:	98 2f       	mov	r25, r24
    404c:	99 0f       	add	r25, r25
    404e:	90 56       	subi	r25, 0x60	; 96
    4050:	29 2f       	mov	r18, r25
    4052:	22 0f       	add	r18, r18
    4054:	22 0f       	add	r18, r18
    4056:	92 0f       	add	r25, r18
    4058:	20 81       	ld	r18, Z
    405a:	92 0f       	add	r25, r18
    405c:	90 83       	st	Z, r25
					pos++;
    405e:	93 e0       	ldi	r25, 0x03	; 3
    4060:	90 93 28 03 	sts	0x0328, r25
					break;
    4064:	74 c1       	rjmp	.+744    	; 0x434e <__stack+0x24f>
				}
				break;
				case 3:
				switch (taste)
    4066:	83 32       	cpi	r24, 0x23	; 35
    4068:	09 f4       	brne	.+2      	; 0x406c <_Z14eingabehandlerh+0x45c>
    406a:	71 c1       	rjmp	.+738    	; 0x434e <__stack+0x24f>
    406c:	8a 32       	cpi	r24, 0x2A	; 42
    406e:	09 f4       	brne	.+2      	; 0x4072 <_Z14eingabehandlerh+0x462>
    4070:	6e c1       	rjmp	.+732    	; 0x434e <__stack+0x24f>
					case '#':
					break;
					case '*':
					break;
					default:
					zaehler.Minuten+=(taste-'0');
    4072:	e3 e7       	ldi	r30, 0x73	; 115
    4074:	f7 e0       	ldi	r31, 0x07	; 7
    4076:	90 81       	ld	r25, Z
    4078:	90 53       	subi	r25, 0x30	; 48
    407a:	98 0f       	add	r25, r24
    407c:	90 83       	st	Z, r25
					pos++;
    407e:	94 e0       	ldi	r25, 0x04	; 4
    4080:	90 93 28 03 	sts	0x0328, r25
					break;
    4084:	64 c1       	rjmp	.+712    	; 0x434e <__stack+0x24f>
				}
				break;
				case 4:
				switch (taste)
    4086:	83 32       	cpi	r24, 0x23	; 35
    4088:	09 f4       	brne	.+2      	; 0x408c <_Z14eingabehandlerh+0x47c>
    408a:	61 c1       	rjmp	.+706    	; 0x434e <__stack+0x24f>
    408c:	8a 32       	cpi	r24, 0x2A	; 42
    408e:	09 f4       	brne	.+2      	; 0x4092 <_Z14eingabehandlerh+0x482>
    4090:	5e c1       	rjmp	.+700    	; 0x434e <__stack+0x24f>
					case '#':
					break;
					case '*':
					break;
					default:
					zaehler.Stunden+=(taste-'0')*10;
    4092:	e2 e7       	ldi	r30, 0x72	; 114
    4094:	f7 e0       	ldi	r31, 0x07	; 7
    4096:	98 2f       	mov	r25, r24
    4098:	99 0f       	add	r25, r25
    409a:	90 56       	subi	r25, 0x60	; 96
    409c:	29 2f       	mov	r18, r25
    409e:	22 0f       	add	r18, r18
    40a0:	22 0f       	add	r18, r18
    40a2:	92 0f       	add	r25, r18
    40a4:	20 81       	ld	r18, Z
    40a6:	92 0f       	add	r25, r18
    40a8:	90 83       	st	Z, r25
					pos++;
    40aa:	95 e0       	ldi	r25, 0x05	; 5
    40ac:	90 93 28 03 	sts	0x0328, r25
					break;
    40b0:	4e c1       	rjmp	.+668    	; 0x434e <__stack+0x24f>
				}
				break;
				case 5:
				switch (taste)
    40b2:	83 32       	cpi	r24, 0x23	; 35
    40b4:	41 f0       	breq	.+16     	; 0x40c6 <_Z14eingabehandlerh+0x4b6>
    40b6:	8a 32       	cpi	r24, 0x2A	; 42
    40b8:	31 f0       	breq	.+12     	; 0x40c6 <_Z14eingabehandlerh+0x4b6>
					case '#':
					break;
					case '*':
					break;
					default:
					zaehler.Stunden+=(taste-'0');
    40ba:	e2 e7       	ldi	r30, 0x72	; 114
    40bc:	f7 e0       	ldi	r31, 0x07	; 7
    40be:	90 81       	ld	r25, Z
    40c0:	90 53       	subi	r25, 0x30	; 48
    40c2:	98 0f       	add	r25, r24
    40c4:	90 83       	st	Z, r25
					pos++;
					break;
				}
				pos=0;
    40c6:	10 92 28 03 	sts	0x0328, r1
				anzeige&=~(1<<Einstellungsflag);
    40ca:	27 7f       	andi	r18, 0xF7	; 247
    40cc:	30 93 2a 03 	sts	0x032A, r19
    40d0:	20 93 29 03 	sts	0x0329, r18
				break;
    40d4:	3c c1       	rjmp	.+632    	; 0x434e <__stack+0x24f>
			}
		}
		else if ((anzeige&(1<<Stoppuhrflag)))
    40d6:	27 ff       	sbrs	r18, 7
    40d8:	23 c0       	rjmp	.+70     	; 0x4120 <__stack+0x21>
		{
			if (taste=='*')
    40da:	8a 32       	cpi	r24, 0x2A	; 42
    40dc:	71 f4       	brne	.+28     	; 0x40fa <_Z14eingabehandlerh+0x4ea>
			{
				if ((anzeige&(1<<Einstellungsflag)))
    40de:	23 ff       	sbrs	r18, 3
    40e0:	06 c0       	rjmp	.+12     	; 0x40ee <_Z14eingabehandlerh+0x4de>
				{
					anzeige&=~(1<<Einstellungsflag);
    40e2:	27 7f       	andi	r18, 0xF7	; 247
    40e4:	30 93 2a 03 	sts	0x032A, r19
    40e8:	20 93 29 03 	sts	0x0329, r18
    40ec:	54 c1       	rjmp	.+680    	; 0x4396 <__stack+0x297>
				}
				else{
					anzeige|=(1<<Einstellungsflag);
    40ee:	28 60       	ori	r18, 0x08	; 8
    40f0:	30 93 2a 03 	sts	0x032A, r19
    40f4:	20 93 29 03 	sts	0x0329, r18
    40f8:	4e c1       	rjmp	.+668    	; 0x4396 <__stack+0x297>
				}
			}
			else if (taste=='0')
    40fa:	80 33       	cpi	r24, 0x30	; 48
    40fc:	39 f4       	brne	.+14     	; 0x410c <__stack+0xd>
			{
				stoppuhr.Sekunden=0;
    40fe:	10 92 59 07 	sts	0x0759, r1
				stoppuhr.Minuten=0;
    4102:	10 92 58 07 	sts	0x0758, r1
				stoppuhr.Stunden=0;
    4106:	10 92 57 07 	sts	0x0757, r1
    410a:	08 95       	ret
			}
			else if (taste=='#')
    410c:	83 32       	cpi	r24, 0x23	; 35
    410e:	09 f0       	breq	.+2      	; 0x4112 <__stack+0x13>
    4110:	48 c1       	rjmp	.+656    	; 0x43a2 <__stack+0x2a3>
			{
				anzeige&=~((1<<Stoppuhrflag)|(1<<Einstellungsflag));
    4112:	27 77       	andi	r18, 0x77	; 119
				anzeige|=(1<<menueflag);
    4114:	30 62       	ori	r19, 0x20	; 32
    4116:	30 93 2a 03 	sts	0x032A, r19
    411a:	20 93 29 03 	sts	0x0329, r18
    411e:	08 95       	ret
			}
		}
		else if ((anzeige&(1<<Uhrflag)))
    4120:	20 ff       	sbrs	r18, 0
    4122:	26 c0       	rjmp	.+76     	; 0x4170 <__stack+0x71>
		{
			if (taste=='#')
    4124:	83 32       	cpi	r24, 0x23	; 35
    4126:	49 f4       	brne	.+18     	; 0x413a <__stack+0x3b>
			{
				pos=0;
    4128:	10 92 28 03 	sts	0x0328, r1
				anzeige&=~(1<<Uhrflag);
    412c:	2e 7f       	andi	r18, 0xFE	; 254
				anzeige|=(1<<menueflag);
    412e:	30 62       	ori	r19, 0x20	; 32
    4130:	30 93 2a 03 	sts	0x032A, r19
    4134:	20 93 29 03 	sts	0x0329, r18
    4138:	08 95       	ret
			}
			else if (taste=='*')
    413a:	8a 32       	cpi	r24, 0x2A	; 42
    413c:	49 f4       	brne	.+18     	; 0x4150 <__stack+0x51>
			{
				pos++;
    413e:	80 91 28 03 	lds	r24, 0x0328
    4142:	8f 5f       	subi	r24, 0xFF	; 255
				if (pos>1)
    4144:	82 30       	cpi	r24, 0x02	; 2
    4146:	08 f4       	brcc	.+2      	; 0x414a <__stack+0x4b>
    4148:	24 c1       	rjmp	.+584    	; 0x4392 <__stack+0x293>
				{
					pos=0;
    414a:	10 92 28 03 	sts	0x0328, r1
    414e:	23 c1       	rjmp	.+582    	; 0x4396 <__stack+0x297>
				}
			}
			else if (taste=='0')
    4150:	80 33       	cpi	r24, 0x30	; 48
    4152:	09 f0       	breq	.+2      	; 0x4156 <__stack+0x57>
    4154:	26 c1       	rjmp	.+588    	; 0x43a2 <__stack+0x2a3>
			{
				if (LED.ison())
    4156:	83 e4       	ldi	r24, 0x43	; 67
    4158:	93 e0       	ldi	r25, 0x03	; 3
    415a:	75 d4       	rcall	.+2282   	; 0x4a46 <_ZN6Output4isonEv>
    415c:	88 23       	and	r24, r24
    415e:	21 f0       	breq	.+8      	; 0x4168 <__stack+0x69>
				{
					LED.off();
    4160:	83 e4       	ldi	r24, 0x43	; 67
    4162:	93 e0       	ldi	r25, 0x03	; 3
    4164:	b3 c4       	rjmp	.+2406   	; 0x4acc <_ZN6Output3offEv>
    4166:	08 95       	ret
				}
				else{
					LED.on();
    4168:	83 e4       	ldi	r24, 0x43	; 67
    416a:	93 e0       	ldi	r25, 0x03	; 3
    416c:	23 c4       	rjmp	.+2118   	; 0x49b4 <_ZN6Output2onEv>
    416e:	08 95       	ret
				}
			}
		}
		else if ((anzeige&(1<<Kompasflag)))
    4170:	22 ff       	sbrs	r18, 2
    4172:	1a c0       	rjmp	.+52     	; 0x41a8 <__stack+0xa9>
		{
			if (taste=='#')
    4174:	83 32       	cpi	r24, 0x23	; 35
    4176:	41 f4       	brne	.+16     	; 0x4188 <__stack+0x89>
			{
				anzeige&=~(1<<Kompasflag);
    4178:	c9 01       	movw	r24, r18
    417a:	8b 7f       	andi	r24, 0xFB	; 251
				anzeige|=(1<<menueflag);
    417c:	90 62       	ori	r25, 0x20	; 32
    417e:	90 93 2a 03 	sts	0x032A, r25
    4182:	80 93 29 03 	sts	0x0329, r24
    4186:	08 95       	ret
			}
			else if (taste=='0')
    4188:	80 33       	cpi	r24, 0x30	; 48
    418a:	09 f0       	breq	.+2      	; 0x418e <__stack+0x8f>
    418c:	e0 c0       	rjmp	.+448    	; 0x434e <__stack+0x24f>
			{
				if (LED.ison())
    418e:	83 e4       	ldi	r24, 0x43	; 67
    4190:	93 e0       	ldi	r25, 0x03	; 3
    4192:	59 d4       	rcall	.+2226   	; 0x4a46 <_ZN6Output4isonEv>
    4194:	88 23       	and	r24, r24
    4196:	21 f0       	breq	.+8      	; 0x41a0 <__stack+0xa1>
				{
					LED.off();
    4198:	83 e4       	ldi	r24, 0x43	; 67
    419a:	93 e0       	ldi	r25, 0x03	; 3
    419c:	97 c4       	rjmp	.+2350   	; 0x4acc <_ZN6Output3offEv>
    419e:	08 95       	ret
				}
				else{
					LED.on();
    41a0:	83 e4       	ldi	r24, 0x43	; 67
    41a2:	93 e0       	ldi	r25, 0x03	; 3
    41a4:	07 c4       	rjmp	.+2062   	; 0x49b4 <_ZN6Output2onEv>
    41a6:	08 95       	ret
				}
			}
		}
		else if ((anzeige&(1<<Fahradflag)))
    41a8:	21 ff       	sbrs	r18, 1
    41aa:	3a c0       	rjmp	.+116    	; 0x4220 <__stack+0x121>
		{
			if (taste=='#')
    41ac:	83 32       	cpi	r24, 0x23	; 35
    41ae:	69 f4       	brne	.+26     	; 0x41ca <__stack+0xcb>
			{
				anzeige&=~(1<<Fahradflag);
    41b0:	c9 01       	movw	r24, r18
    41b2:	8d 7f       	andi	r24, 0xFD	; 253
				anzeige|=(1<<menueflag);
    41b4:	90 62       	ori	r25, 0x20	; 32
    41b6:	90 93 2a 03 	sts	0x032A, r25
    41ba:	80 93 29 03 	sts	0x0329, r24
				TCCR1B &= ~((1<<CS12) | (1<<CS10));
    41be:	e1 e8       	ldi	r30, 0x81	; 129
    41c0:	f0 e0       	ldi	r31, 0x00	; 0
    41c2:	80 81       	ld	r24, Z
    41c4:	8a 7f       	andi	r24, 0xFA	; 250
    41c6:	80 83       	st	Z, r24
    41c8:	08 95       	ret
			}
			else if (taste=='*')
    41ca:	8a 32       	cpi	r24, 0x2A	; 42
    41cc:	c9 f4       	brne	.+50     	; 0x4200 <__stack+0x101>
			{
				maxgeschw = 0;
    41ce:	10 92 1c 03 	sts	0x031C, r1
    41d2:	10 92 1d 03 	sts	0x031D, r1
    41d6:	10 92 1e 03 	sts	0x031E, r1
    41da:	10 92 1f 03 	sts	0x031F, r1
				strecke = 0;
    41de:	10 92 20 03 	sts	0x0320, r1
    41e2:	10 92 21 03 	sts	0x0321, r1
    41e6:	10 92 22 03 	sts	0x0322, r1
    41ea:	10 92 23 03 	sts	0x0323, r1
				Fahrtzeit = 0;
    41ee:	10 92 18 03 	sts	0x0318, r1
    41f2:	10 92 19 03 	sts	0x0319, r1
    41f6:	10 92 1a 03 	sts	0x031A, r1
    41fa:	10 92 1b 03 	sts	0x031B, r1
    41fe:	cb c0       	rjmp	.+406    	; 0x4396 <__stack+0x297>
			}
			else if (taste=='0')
    4200:	80 33       	cpi	r24, 0x30	; 48
    4202:	09 f0       	breq	.+2      	; 0x4206 <__stack+0x107>
    4204:	ce c0       	rjmp	.+412    	; 0x43a2 <__stack+0x2a3>
			{
				if (LED.ison())
    4206:	83 e4       	ldi	r24, 0x43	; 67
    4208:	93 e0       	ldi	r25, 0x03	; 3
    420a:	1d d4       	rcall	.+2106   	; 0x4a46 <_ZN6Output4isonEv>
    420c:	88 23       	and	r24, r24
    420e:	21 f0       	breq	.+8      	; 0x4218 <__stack+0x119>
				{
					LED.off();
    4210:	83 e4       	ldi	r24, 0x43	; 67
    4212:	93 e0       	ldi	r25, 0x03	; 3
    4214:	5b c4       	rjmp	.+2230   	; 0x4acc <_ZN6Output3offEv>
    4216:	08 95       	ret
				}
				else{
					LED.on();
    4218:	83 e4       	ldi	r24, 0x43	; 67
    421a:	93 e0       	ldi	r25, 0x03	; 3
    421c:	cb c3       	rjmp	.+1942   	; 0x49b4 <_ZN6Output2onEv>
    421e:	08 95       	ret
				}
			}
		}
		else if ((anzeige&(1<<Druckflag)))
    4220:	31 ff       	sbrs	r19, 1
    4222:	28 c0       	rjmp	.+80     	; 0x4274 <__stack+0x175>
		{
			if (taste=='#')
    4224:	83 32       	cpi	r24, 0x23	; 35
    4226:	41 f4       	brne	.+16     	; 0x4238 <__stack+0x139>
			{
				anzeige&=~(1<<Druckflag);
    4228:	c9 01       	movw	r24, r18
    422a:	9d 7f       	andi	r25, 0xFD	; 253
				anzeige|=(1<<menueflag);
    422c:	90 62       	ori	r25, 0x20	; 32
    422e:	90 93 2a 03 	sts	0x032A, r25
    4232:	80 93 29 03 	sts	0x0329, r24
    4236:	08 95       	ret
			}
			else if (taste=='*')
    4238:	8a 32       	cpi	r24, 0x2A	; 42
    423a:	61 f4       	brne	.+24     	; 0x4254 <__stack+0x155>
			{
				Baro.set_Pressure0(Baro.Press);
    423c:	40 91 2f 03 	lds	r20, 0x032F
    4240:	50 91 30 03 	lds	r21, 0x0330
    4244:	60 91 31 03 	lds	r22, 0x0331
    4248:	70 91 32 03 	lds	r23, 0x0332
    424c:	8f e2       	ldi	r24, 0x2F	; 47
    424e:	93 e0       	ldi	r25, 0x03	; 3
    4250:	36 d6       	rcall	.+3180   	; 0x4ebe <_ZN8Pressure13set_Pressure0Ed>
    4252:	a1 c0       	rjmp	.+322    	; 0x4396 <__stack+0x297>
			}
			else if (taste=='0')
    4254:	80 33       	cpi	r24, 0x30	; 48
    4256:	09 f0       	breq	.+2      	; 0x425a <__stack+0x15b>
    4258:	a4 c0       	rjmp	.+328    	; 0x43a2 <__stack+0x2a3>
			{
				if (LED.ison())
    425a:	83 e4       	ldi	r24, 0x43	; 67
    425c:	93 e0       	ldi	r25, 0x03	; 3
    425e:	f3 d3       	rcall	.+2022   	; 0x4a46 <_ZN6Output4isonEv>
    4260:	88 23       	and	r24, r24
    4262:	21 f0       	breq	.+8      	; 0x426c <__stack+0x16d>
				{
					LED.off();
    4264:	83 e4       	ldi	r24, 0x43	; 67
    4266:	93 e0       	ldi	r25, 0x03	; 3
    4268:	31 c4       	rjmp	.+2146   	; 0x4acc <_ZN6Output3offEv>
    426a:	08 95       	ret
				}
				else{
					LED.on();
    426c:	83 e4       	ldi	r24, 0x43	; 67
    426e:	93 e0       	ldi	r25, 0x03	; 3
    4270:	a1 c3       	rjmp	.+1858   	; 0x49b4 <_ZN6Output2onEv>
    4272:	08 95       	ret
				}
			}
		}
		else if ((anzeige&(1<<Timerflag)))
    4274:	26 ff       	sbrs	r18, 6
    4276:	1e c0       	rjmp	.+60     	; 0x42b4 <__stack+0x1b5>
		{
			if (taste=='#')
    4278:	83 32       	cpi	r24, 0x23	; 35
    427a:	09 f0       	breq	.+2      	; 0x427e <__stack+0x17f>
    427c:	68 c0       	rjmp	.+208    	; 0x434e <__stack+0x24f>
			{
				anzeige&=~((1<<Timerflag)|(1<<blinkflag));
    427e:	2f 7b       	andi	r18, 0xBF	; 191
    4280:	3f 7b       	andi	r19, 0xBF	; 191
    4282:	30 93 2a 03 	sts	0x032A, r19
    4286:	20 93 29 03 	sts	0x0329, r18
				oled.invert(0);	//fuer den Fall, dass es invertiert blieb (50% der Faelle)
    428a:	60 e0       	ldi	r22, 0x00	; 0
    428c:	86 e4       	ldi	r24, 0x46	; 70
    428e:	93 e0       	ldi	r25, 0x03	; 3
    4290:	0e 94 87 05 	call	0xb0e	; 0xb0e <_ZN7Display6invertEh>
				LED.off();
    4294:	83 e4       	ldi	r24, 0x43	; 67
    4296:	93 e0       	ldi	r25, 0x03	; 3
    4298:	19 d4       	rcall	.+2098   	; 0x4acc <_ZN6Output3offEv>
				Vibrationsmotor.off();
    429a:	81 e4       	ldi	r24, 0x41	; 65
    429c:	93 e0       	ldi	r25, 0x03	; 3
    429e:	16 d4       	rcall	.+2092   	; 0x4acc <_ZN6Output3offEv>
				
				anzeige|=(1<<menueflag);
    42a0:	80 91 29 03 	lds	r24, 0x0329
    42a4:	90 91 2a 03 	lds	r25, 0x032A
    42a8:	90 62       	ori	r25, 0x20	; 32
    42aa:	90 93 2a 03 	sts	0x032A, r25
    42ae:	80 93 29 03 	sts	0x0329, r24
    42b2:	08 95       	ret
			}
		}
		else if ((anzeige&(1<<Uhrflaggross)))
    42b4:	32 ff       	sbrs	r19, 2
    42b6:	1a c0       	rjmp	.+52     	; 0x42ec <__stack+0x1ed>
		{
			if (taste=='#')
    42b8:	83 32       	cpi	r24, 0x23	; 35
    42ba:	41 f4       	brne	.+16     	; 0x42cc <__stack+0x1cd>
			{
				anzeige&=~(1<<Uhrflaggross);
    42bc:	c9 01       	movw	r24, r18
    42be:	9b 7f       	andi	r25, 0xFB	; 251
				anzeige|=(1<<menueflag);
    42c0:	90 62       	ori	r25, 0x20	; 32
    42c2:	90 93 2a 03 	sts	0x032A, r25
    42c6:	80 93 29 03 	sts	0x0329, r24
    42ca:	08 95       	ret
			}
			else if (taste=='0')
    42cc:	80 33       	cpi	r24, 0x30	; 48
    42ce:	09 f0       	breq	.+2      	; 0x42d2 <__stack+0x1d3>
    42d0:	3e c0       	rjmp	.+124    	; 0x434e <__stack+0x24f>
			{
				if (LED.ison())
    42d2:	83 e4       	ldi	r24, 0x43	; 67
    42d4:	93 e0       	ldi	r25, 0x03	; 3
    42d6:	b7 d3       	rcall	.+1902   	; 0x4a46 <_ZN6Output4isonEv>
    42d8:	88 23       	and	r24, r24
    42da:	21 f0       	breq	.+8      	; 0x42e4 <__stack+0x1e5>
				{
					LED.off();
    42dc:	83 e4       	ldi	r24, 0x43	; 67
    42de:	93 e0       	ldi	r25, 0x03	; 3
    42e0:	f5 c3       	rjmp	.+2026   	; 0x4acc <_ZN6Output3offEv>
    42e2:	08 95       	ret
				}
				else{
					LED.on();
    42e4:	83 e4       	ldi	r24, 0x43	; 67
    42e6:	93 e0       	ldi	r25, 0x03	; 3
    42e8:	65 c3       	rjmp	.+1738   	; 0x49b4 <_ZN6Output2onEv>
    42ea:	08 95       	ret
				}
			}
		}
		else if ((anzeige&(1<<Weckeranzeigeflag)))
    42ec:	33 ff       	sbrs	r19, 3
    42ee:	26 c0       	rjmp	.+76     	; 0x433c <__stack+0x23d>
		{
			if (taste=='#')
    42f0:	83 32       	cpi	r24, 0x23	; 35
    42f2:	41 f4       	brne	.+16     	; 0x4304 <__stack+0x205>
			{
				anzeige&=~(1<<Weckeranzeigeflag);
    42f4:	c9 01       	movw	r24, r18
    42f6:	97 7f       	andi	r25, 0xF7	; 247
				anzeige|=(1<<menueflag);
    42f8:	90 62       	ori	r25, 0x20	; 32
    42fa:	90 93 2a 03 	sts	0x032A, r25
    42fe:	80 93 29 03 	sts	0x0329, r24
    4302:	08 95       	ret
			}
			if (taste=='*')
    4304:	8a 32       	cpi	r24, 0x2A	; 42
    4306:	09 f0       	breq	.+2      	; 0x430a <__stack+0x20b>
    4308:	4c c0       	rjmp	.+152    	; 0x43a2 <__stack+0x2a3>
			{
				if (rtc.interupts&(1<<Weckeractiv))
    430a:	94 ff       	sbrs	r25, 4
    430c:	06 c0       	rjmp	.+12     	; 0x431a <__stack+0x21b>
				{
					rtc.interupts &= ~((1<<Weckerein) | (1<<Weckeractiv));
    430e:	89 2f       	mov	r24, r25
    4310:	87 7e       	andi	r24, 0xE7	; 231
    4312:	82 60       	ori	r24, 0x02	; 2
    4314:	80 93 95 07 	sts	0x0795, r24
    4318:	0b c0       	rjmp	.+22     	; 0x4330 <__stack+0x231>
				}
				else if ((rtc.interupts&(1<<Weckerein)))
    431a:	93 ff       	sbrs	r25, 3
    431c:	06 c0       	rjmp	.+12     	; 0x432a <__stack+0x22b>
				{
					rtc.interupts &= ~(1<<Weckerein);
    431e:	89 2f       	mov	r24, r25
    4320:	87 7f       	andi	r24, 0xF7	; 247
    4322:	82 60       	ori	r24, 0x02	; 2
    4324:	80 93 95 07 	sts	0x0795, r24
    4328:	03 c0       	rjmp	.+6      	; 0x4330 <__stack+0x231>
				}
				else{
					rtc.interupts |= (1<<Weckerein);
    432a:	9a 60       	ori	r25, 0x0A	; 10
    432c:	90 93 95 07 	sts	0x0795, r25
				}
				rtc.interupts|=(1<<minuteninterupt);
    4330:	e5 e9       	ldi	r30, 0x95	; 149
    4332:	f7 e0       	ldi	r31, 0x07	; 7
    4334:	80 81       	ld	r24, Z
    4336:	84 60       	ori	r24, 0x04	; 4
    4338:	80 83       	st	Z, r24
    433a:	2d c0       	rjmp	.+90     	; 0x4396 <__stack+0x297>
			}
		}
		else if (anzeige==0)
    433c:	23 2b       	or	r18, r19
    433e:	39 f4       	brne	.+14     	; 0x434e <__stack+0x24f>
		{
			anzeige|=(1<<menueflag);
    4340:	80 e0       	ldi	r24, 0x00	; 0
    4342:	90 e2       	ldi	r25, 0x20	; 32
    4344:	90 93 2a 03 	sts	0x032A, r25
    4348:	80 93 29 03 	sts	0x0329, r24
    434c:	08 95       	ret
		}
		if ((anzeige&(1<<blinkflag)))
    434e:	20 91 29 03 	lds	r18, 0x0329
    4352:	30 91 2a 03 	lds	r19, 0x032A
    4356:	36 ff       	sbrs	r19, 6
    4358:	24 c0       	rjmp	.+72     	; 0x43a2 <__stack+0x2a3>
		{
			if (taste=='*')
    435a:	8a 32       	cpi	r24, 0x2A	; 42
    435c:	11 f5       	brne	.+68     	; 0x43a2 <__stack+0x2a3>
			{
				anzeige &=~(1<<blinkflag);
    435e:	3f 7b       	andi	r19, 0xBF	; 191
    4360:	30 93 2a 03 	sts	0x032A, r19
    4364:	20 93 29 03 	sts	0x0329, r18
				oled.invert(0);	//fuer den Fall, dass es invertiert blieb (50% der Faelle)
    4368:	60 e0       	ldi	r22, 0x00	; 0
    436a:	86 e4       	ldi	r24, 0x46	; 70
    436c:	93 e0       	ldi	r25, 0x03	; 3
    436e:	0e 94 87 05 	call	0xb0e	; 0xb0e <_ZN7Display6invertEh>
				LED.off();
    4372:	83 e4       	ldi	r24, 0x43	; 67
    4374:	93 e0       	ldi	r25, 0x03	; 3
    4376:	aa d3       	rcall	.+1876   	; 0x4acc <_ZN6Output3offEv>
				Vibrationsmotor.off();
    4378:	81 e4       	ldi	r24, 0x41	; 65
    437a:	93 e0       	ldi	r25, 0x03	; 3
    437c:	a7 d3       	rcall	.+1870   	; 0x4acc <_ZN6Output3offEv>
				if ((rtc.interupts&(1<<Weckeractiv)))
    437e:	80 91 95 07 	lds	r24, 0x0795
    4382:	98 2f       	mov	r25, r24
    4384:	98 71       	andi	r25, 0x18	; 24
				{
					if ((rtc.interupts&(1<<Weckerein)))
    4386:	98 31       	cpi	r25, 0x18	; 24
    4388:	61 f4       	brne	.+24     	; 0x43a2 <__stack+0x2a3>
					{
						rtc.interupts &= ~((1<<Weckerein)|(1<<Weckeractiv));
    438a:	87 7e       	andi	r24, 0xE7	; 231
    438c:	80 93 95 07 	sts	0x0795, r24
    4390:	08 95       	ret
				anzeige&=~(1<<Uhrflag);
				anzeige|=(1<<menueflag);
			}
			else if (taste=='*')
			{
				pos++;
    4392:	80 93 28 03 	sts	0x0328, r24
		}
		else if (anzeige==0)
		{
			anzeige|=(1<<menueflag);
		}
		if ((anzeige&(1<<blinkflag)))
    4396:	20 91 29 03 	lds	r18, 0x0329
    439a:	30 91 2a 03 	lds	r19, 0x032A
    439e:	36 fd       	sbrc	r19, 6
    43a0:	de cf       	rjmp	.-68     	; 0x435e <__stack+0x25f>
    43a2:	08 95       	ret

000043a4 <main>:
void eingabehandler(uint8_t taste);

int main(void)
{
	//initialisierung
	initialisierung();
    43a4:	d9 d9       	rcall	.-3150   	; 0x3758 <_Z15initialisierungv>
    while(1)
    {
         //Steuerung der interupts durch Handler
         maininterupthandler();
    43a6:	37 da       	rcall	.-2962   	; 0x3816 <_Z19maininterupthandlerv>
         //Steuerung der Anzeige alle Sekunde zur aktualisierung maximale Aktulisierungsrate ist 1Hz
         anzeigehandler();
    43a8:	58 da       	rcall	.-2896   	; 0x385a <_Z14anzeigehandlerv>
         //Tasthandler
         eingabehandler(Tastatur.Taster());
    43aa:	85 e4       	ldi	r24, 0x45	; 69
    43ac:	93 e0       	ldi	r25, 0x03	; 3
    43ae:	b2 d0       	rcall	.+356    	; 0x4514 <_ZN9Interface6TasterEv>
    43b0:	2f dc       	rcall	.-1954   	; 0x3c10 <_Z14eingabehandlerh>
    43b2:	f9 cf       	rjmp	.-14     	; 0x43a6 <main+0x2>

000043b4 <_GLOBAL__sub_I_kompass>:
#include <stdlib.h>
#include <stdio.h>
#include <avr/interrupt.h>

#include "Kompass.h"
Kompass kompass;
    43b4:	88 e9       	ldi	r24, 0x98	; 152
    43b6:	97 e0       	ldi	r25, 0x07	; 7
    43b8:	63 d1       	rcall	.+710    	; 0x4680 <_ZN7KompassC1Ev>

#include "RTC.h"
RTC rtc;
    43ba:	8d e7       	ldi	r24, 0x7D	; 125
    43bc:	97 e0       	ldi	r25, 0x07	; 7
    43be:	09 d6       	rcall	.+3090   	; 0x4fd2 <_ZN3RTCC1Ev>
RTC zaehler;
    43c0:	82 e6       	ldi	r24, 0x62	; 98
    43c2:	97 e0       	ldi	r25, 0x07	; 7
    43c4:	06 d6       	rcall	.+3084   	; 0x4fd2 <_ZN3RTCC1Ev>
RTC stoppuhr;
    43c6:	87 e4       	ldi	r24, 0x47	; 71
    43c8:	97 e0       	ldi	r25, 0x07	; 7
    43ca:	03 d6       	rcall	.+3078   	; 0x4fd2 <_ZN3RTCC1Ev>

#include "Display.h"
Display oled;
    43cc:	86 e4       	ldi	r24, 0x46	; 70
    43ce:	93 e0       	ldi	r25, 0x03	; 3
    43d0:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <_ZN7DisplayC1Ev>

#include "Interface.h"
Interface Tastatur;
    43d4:	85 e4       	ldi	r24, 0x45	; 69
    43d6:	93 e0       	ldi	r25, 0x03	; 3
    43d8:	69 d0       	rcall	.+210    	; 0x44ac <_ZN9InterfaceC1Ev>

#include "Output.h"
Output LED('B',PORTB1);
    43da:	41 e0       	ldi	r20, 0x01	; 1
    43dc:	62 e4       	ldi	r22, 0x42	; 66
    43de:	83 e4       	ldi	r24, 0x43	; 67
    43e0:	93 e0       	ldi	r25, 0x03	; 3
    43e2:	a5 d2       	rcall	.+1354   	; 0x492e <_ZN6OutputC1Ehh>
Output Vibrationsmotor('B',PORTB2);
    43e4:	42 e0       	ldi	r20, 0x02	; 2
    43e6:	62 e4       	ldi	r22, 0x42	; 66
    43e8:	81 e4       	ldi	r24, 0x41	; 65
    43ea:	93 e0       	ldi	r25, 0x03	; 3
    43ec:	a0 d2       	rcall	.+1344   	; 0x492e <_ZN6OutputC1Ehh>
Output IRLED('D',PORTD7);
    43ee:	47 e0       	ldi	r20, 0x07	; 7
    43f0:	64 e4       	ldi	r22, 0x44	; 68
    43f2:	8f e3       	ldi	r24, 0x3F	; 63
    43f4:	93 e0       	ldi	r25, 0x03	; 3
    43f6:	9b d2       	rcall	.+1334   	; 0x492e <_ZN6OutputC1Ehh>
Output Sound('B',PORTB3);
    43f8:	43 e0       	ldi	r20, 0x03	; 3
    43fa:	62 e4       	ldi	r22, 0x42	; 66
    43fc:	8d e3       	ldi	r24, 0x3D	; 61
    43fe:	93 e0       	ldi	r25, 0x03	; 3
    4400:	96 d2       	rcall	.+1324   	; 0x492e <_ZN6OutputC1Ehh>

#include "Pressure.h"
Pressure Baro;
    4402:	8f e2       	ldi	r24, 0x2F	; 47
    4404:	93 e0       	ldi	r25, 0x03	; 3
    4406:	2a c4       	rjmp	.+2132   	; 0x4c5c <_ZN8PressureC1Ev>
    4408:	08 95       	ret

0000440a <_GLOBAL__sub_D_kompass>:
    440a:	8f e2       	ldi	r24, 0x2F	; 47
    440c:	93 e0       	ldi	r25, 0x03	; 3
    440e:	f4 d3       	rcall	.+2024   	; 0x4bf8 <_ZN8PressureD1Ev>

#include "Output.h"
Output LED('B',PORTB1);
Output Vibrationsmotor('B',PORTB2);
Output IRLED('D',PORTD7);
Output Sound('B',PORTB3);
    4410:	8d e3       	ldi	r24, 0x3D	; 61
    4412:	93 e0       	ldi	r25, 0x03	; 3
    4414:	ce d2       	rcall	.+1436   	; 0x49b2 <_ZN6OutputD1Ev>
Interface Tastatur;

#include "Output.h"
Output LED('B',PORTB1);
Output Vibrationsmotor('B',PORTB2);
Output IRLED('D',PORTD7);
    4416:	8f e3       	ldi	r24, 0x3F	; 63
    4418:	93 e0       	ldi	r25, 0x03	; 3
    441a:	cb d2       	rcall	.+1430   	; 0x49b2 <_ZN6OutputD1Ev>
#include "Interface.h"
Interface Tastatur;

#include "Output.h"
Output LED('B',PORTB1);
Output Vibrationsmotor('B',PORTB2);
    441c:	81 e4       	ldi	r24, 0x41	; 65
    441e:	93 e0       	ldi	r25, 0x03	; 3
    4420:	c8 d2       	rcall	.+1424   	; 0x49b2 <_ZN6OutputD1Ev>

#include "Interface.h"
Interface Tastatur;

#include "Output.h"
Output LED('B',PORTB1);
    4422:	83 e4       	ldi	r24, 0x43	; 67
    4424:	93 e0       	ldi	r25, 0x03	; 3
    4426:	c5 d2       	rcall	.+1418   	; 0x49b2 <_ZN6OutputD1Ev>

#include "Display.h"
Display oled;

#include "Interface.h"
Interface Tastatur;
    4428:	85 e4       	ldi	r24, 0x45	; 69
    442a:	93 e0       	ldi	r25, 0x03	; 3
    442c:	4c d0       	rcall	.+152    	; 0x44c6 <_ZN9InterfaceD1Ev>
RTC rtc;
RTC zaehler;
RTC stoppuhr;

#include "Display.h"
Display oled;
    442e:	86 e4       	ldi	r24, 0x46	; 70
    4430:	93 e0       	ldi	r25, 0x03	; 3
    4432:	0e 94 01 05 	call	0xa02	; 0xa02 <_ZN7DisplayD1Ev>
Kompass kompass;

#include "RTC.h"
RTC rtc;
RTC zaehler;
RTC stoppuhr;
    4436:	87 e4       	ldi	r24, 0x47	; 71
    4438:	97 e0       	ldi	r25, 0x07	; 7
    443a:	47 d5       	rcall	.+2702   	; 0x4eca <_ZN3RTCD1Ev>
#include "Kompass.h"
Kompass kompass;

#include "RTC.h"
RTC rtc;
RTC zaehler;
    443c:	82 e6       	ldi	r24, 0x62	; 98
    443e:	97 e0       	ldi	r25, 0x07	; 7
    4440:	44 d5       	rcall	.+2696   	; 0x4eca <_ZN3RTCD1Ev>

#include "Kompass.h"
Kompass kompass;

#include "RTC.h"
RTC rtc;
    4442:	8d e7       	ldi	r24, 0x7D	; 125
    4444:	97 e0       	ldi	r25, 0x07	; 7
    4446:	41 d5       	rcall	.+2690   	; 0x4eca <_ZN3RTCD1Ev>
#include <stdlib.h>
#include <stdio.h>
#include <avr/interrupt.h>

#include "Kompass.h"
Kompass kompass;
    4448:	88 e9       	ldi	r24, 0x98	; 152
    444a:	97 e0       	ldi	r25, 0x07	; 7
    444c:	fc c0       	rjmp	.+504    	; 0x4646 <_ZN7KompassD1Ev>
    444e:	08 95       	ret

00004450 <_ZN3I2CC1Ev>:
void I2C::twi_ack(){
	TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);
}
void I2C::twi_nack(){
	TWCR = (1<<TWINT) | (1<<TWEN);
	TWCR &= ~(1<<TWEA);
    4450:	82 e0       	ldi	r24, 0x02	; 2
    4452:	80 93 b8 00 	sts	0x00B8, r24
    4456:	08 95       	ret

00004458 <_ZN3I2CD1Ev>:
    4458:	08 95       	ret

0000445a <_ZN3I2C9twi_startEv>:
    445a:	84 ea       	ldi	r24, 0xA4	; 164
    445c:	80 93 bc 00 	sts	0x00BC, r24
    4460:	08 95       	ret

00004462 <_ZN3I2C8twi_stopEv>:
    4462:	84 e9       	ldi	r24, 0x94	; 148
    4464:	80 93 bc 00 	sts	0x00BC, r24
    4468:	08 95       	ret

0000446a <_ZN3I2C9twi_writeEh>:
}

void I2C::twi_write(uint8_t data){
	while(!(TWCR & (1<<TWINT)));
    446a:	ec eb       	ldi	r30, 0xBC	; 188
    446c:	f0 e0       	ldi	r31, 0x00	; 0
    446e:	80 81       	ld	r24, Z
    4470:	88 23       	and	r24, r24
    4472:	ec f7       	brge	.-6      	; 0x446e <_ZN3I2C9twi_writeEh+0x4>
	TWDR = data;
    4474:	60 93 bb 00 	sts	0x00BB, r22
	TWCR = (1<<TWINT) | (1<<TWEN);
    4478:	84 e8       	ldi	r24, 0x84	; 132
    447a:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));
    447e:	ec eb       	ldi	r30, 0xBC	; 188
    4480:	f0 e0       	ldi	r31, 0x00	; 0
    4482:	80 81       	ld	r24, Z
    4484:	88 23       	and	r24, r24
    4486:	ec f7       	brge	.-6      	; 0x4482 <_ZN3I2C9twi_writeEh+0x18>
}
    4488:	08 95       	ret

0000448a <_ZN3I2C8twi_readEh>:

uint8_t I2C::twi_read(uint8_t ack){
	if (ack)
    448a:	66 23       	and	r22, r22
    448c:	21 f0       	breq	.+8      	; 0x4496 <_ZN3I2C8twi_readEh+0xc>
	{
		TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    448e:	84 ec       	ldi	r24, 0xC4	; 196
    4490:	80 93 bc 00 	sts	0x00BC, r24
    4494:	03 c0       	rjmp	.+6      	; 0x449c <_ZN3I2C8twi_readEh+0x12>
	}
	else{
		TWCR = (1<<TWINT) | (1<<TWEN);
    4496:	84 e8       	ldi	r24, 0x84	; 132
    4498:	80 93 bc 00 	sts	0x00BC, r24
	}
	
	while(!(TWCR & (1<<TWINT)));
    449c:	ec eb       	ldi	r30, 0xBC	; 188
    449e:	f0 e0       	ldi	r31, 0x00	; 0
    44a0:	80 81       	ld	r24, Z
    44a2:	88 23       	and	r24, r24
    44a4:	ec f7       	brge	.-6      	; 0x44a0 <_ZN3I2C8twi_readEh+0x16>
	return TWDR;
    44a6:	80 91 bb 00 	lds	r24, 0x00BB
    44aa:	08 95       	ret

000044ac <_ZN9InterfaceC1Ev>:
		default:
		abfrage = 0;
		break;
	}
	return abfrage;
}
    44ac:	8a b1       	in	r24, 0x0a	; 10
    44ae:	80 66       	ori	r24, 0x60	; 96
    44b0:	8a b9       	out	0x0a, r24	; 10
    44b2:	88 b1       	in	r24, 0x08	; 8
    44b4:	83 7f       	andi	r24, 0xF3	; 243
    44b6:	88 b9       	out	0x08, r24	; 8
    44b8:	87 b1       	in	r24, 0x07	; 7
    44ba:	8c 60       	ori	r24, 0x0C	; 12
    44bc:	87 b9       	out	0x07, r24	; 7
    44be:	8a b1       	in	r24, 0x0a	; 10
    44c0:	83 7e       	andi	r24, 0xE3	; 227
    44c2:	8a b9       	out	0x0a, r24	; 10
    44c4:	08 95       	ret

000044c6 <_ZN9InterfaceD1Ev>:
    44c6:	08 95       	ret

000044c8 <_ZN9Interface8debounceEPVhh>:
    44c8:	fb 01       	movw	r30, r22
    44ca:	80 81       	ld	r24, Z
    44cc:	90 e0       	ldi	r25, 0x00	; 0
    44ce:	04 2e       	mov	r0, r20
    44d0:	02 c0       	rjmp	.+4      	; 0x44d6 <_ZN9Interface8debounceEPVhh+0xe>
    44d2:	95 95       	asr	r25
    44d4:	87 95       	ror	r24
    44d6:	0a 94       	dec	r0
    44d8:	e2 f7       	brpl	.-8      	; 0x44d2 <_ZN9Interface8debounceEPVhh+0xa>
    44da:	80 ff       	sbrs	r24, 0
    44dc:	17 c0       	rjmp	.+46     	; 0x450c <_ZN9Interface8debounceEPVhh+0x44>
    44de:	8f ec       	ldi	r24, 0xCF	; 207
    44e0:	97 e0       	ldi	r25, 0x07	; 7
    44e2:	01 97       	sbiw	r24, 0x01	; 1
    44e4:	f1 f7       	brne	.-4      	; 0x44e2 <_ZN9Interface8debounceEPVhh+0x1a>
    44e6:	00 c0       	rjmp	.+0      	; 0x44e8 <_ZN9Interface8debounceEPVhh+0x20>
    44e8:	00 00       	nop
    44ea:	fb 01       	movw	r30, r22
    44ec:	80 81       	ld	r24, Z
    44ee:	90 e0       	ldi	r25, 0x00	; 0
    44f0:	9c 01       	movw	r18, r24
    44f2:	02 c0       	rjmp	.+4      	; 0x44f8 <_ZN9Interface8debounceEPVhh+0x30>
    44f4:	35 95       	asr	r19
    44f6:	27 95       	ror	r18
    44f8:	4a 95       	dec	r20
    44fa:	e2 f7       	brpl	.-8      	; 0x44f4 <_ZN9Interface8debounceEPVhh+0x2c>
    44fc:	20 fd       	sbrc	r18, 0
    44fe:	08 c0       	rjmp	.+16     	; 0x4510 <_ZN9Interface8debounceEPVhh+0x48>
    4500:	3a e1       	ldi	r19, 0x1A	; 26
    4502:	3a 95       	dec	r19
    4504:	f1 f7       	brne	.-4      	; 0x4502 <_ZN9Interface8debounceEPVhh+0x3a>
    4506:	00 c0       	rjmp	.+0      	; 0x4508 <_ZN9Interface8debounceEPVhh+0x40>
    4508:	81 e0       	ldi	r24, 0x01	; 1
    450a:	08 95       	ret
    450c:	80 e0       	ldi	r24, 0x00	; 0
    450e:	08 95       	ret
    4510:	80 e0       	ldi	r24, 0x00	; 0
    4512:	08 95       	ret

00004514 <_ZN9Interface6TasterEv>:

uint8_t Interface::Taster(){
    4514:	1f 93       	push	r17
    4516:	cf 93       	push	r28
    4518:	df 93       	push	r29
    451a:	ec 01       	movw	r28, r24
	uint8_t taste = 'A';
	
	//erste Zeile
	PORTC |= (1<<PORTC3);
    451c:	43 9a       	sbi	0x08, 3	; 8
    451e:	82 e0       	ldi	r24, 0x02	; 2
    4520:	8a 95       	dec	r24
    4522:	f1 f7       	brne	.-4      	; 0x4520 <_ZN9Interface6TasterEv+0xc>
    4524:	00 c0       	rjmp	.+0      	; 0x4526 <_ZN9Interface6TasterEv+0x12>
	_delay_us(1);
	if(debounce(&PIND,PIND4)){
    4526:	44 e0       	ldi	r20, 0x04	; 4
    4528:	69 e2       	ldi	r22, 0x29	; 41
    452a:	70 e0       	ldi	r23, 0x00	; 0
    452c:	ce 01       	movw	r24, r28
    452e:	cc df       	rcall	.-104    	; 0x44c8 <_ZN9Interface8debounceEPVhh>
    4530:	81 11       	cpse	r24, r1
    4532:	10 c0       	rjmp	.+32     	; 0x4554 <_ZN9Interface6TasterEv+0x40>
		taste = '3';
	}
	else if (debounce(&PIND,PIND3))
    4534:	43 e0       	ldi	r20, 0x03	; 3
    4536:	69 e2       	ldi	r22, 0x29	; 41
    4538:	70 e0       	ldi	r23, 0x00	; 0
    453a:	ce 01       	movw	r24, r28
    453c:	c5 df       	rcall	.-118    	; 0x44c8 <_ZN9Interface8debounceEPVhh>
    453e:	81 11       	cpse	r24, r1
    4540:	0b c0       	rjmp	.+22     	; 0x4558 <_ZN9Interface6TasterEv+0x44>
	{
		taste = '2';
	}
	else if (debounce(&PIND,PIND2))
    4542:	42 e0       	ldi	r20, 0x02	; 2
    4544:	69 e2       	ldi	r22, 0x29	; 41
    4546:	70 e0       	ldi	r23, 0x00	; 0
    4548:	ce 01       	movw	r24, r28
    454a:	be df       	rcall	.-132    	; 0x44c8 <_ZN9Interface8debounceEPVhh>
    454c:	81 11       	cpse	r24, r1
    454e:	06 c0       	rjmp	.+12     	; 0x455c <_ZN9Interface6TasterEv+0x48>
	}
	return abfrage;
}

uint8_t Interface::Taster(){
	uint8_t taste = 'A';
    4550:	11 e4       	ldi	r17, 0x41	; 65
    4552:	05 c0       	rjmp	.+10     	; 0x455e <_ZN9Interface6TasterEv+0x4a>
	
	//erste Zeile
	PORTC |= (1<<PORTC3);
	_delay_us(1);
	if(debounce(&PIND,PIND4)){
		taste = '3';
    4554:	13 e3       	ldi	r17, 0x33	; 51
    4556:	03 c0       	rjmp	.+6      	; 0x455e <_ZN9Interface6TasterEv+0x4a>
	}
	else if (debounce(&PIND,PIND3))
	{
		taste = '2';
    4558:	12 e3       	ldi	r17, 0x32	; 50
    455a:	01 c0       	rjmp	.+2      	; 0x455e <_ZN9Interface6TasterEv+0x4a>
	}
	else if (debounce(&PIND,PIND2))
	{
		taste = '1';
    455c:	11 e3       	ldi	r17, 0x31	; 49
	}
	PORTC &= ~(1<<PORTC3);
    455e:	43 98       	cbi	0x08, 3	; 8
	
	//zweite Zeile
	PORTC |= (1<<PORTC2);
    4560:	42 9a       	sbi	0x08, 2	; 8
    4562:	82 e0       	ldi	r24, 0x02	; 2
    4564:	8a 95       	dec	r24
    4566:	f1 f7       	brne	.-4      	; 0x4564 <_ZN9Interface6TasterEv+0x50>
    4568:	00 c0       	rjmp	.+0      	; 0x456a <_ZN9Interface6TasterEv+0x56>
	_delay_us(1);
	if(debounce(&PIND,PIND4)){
    456a:	44 e0       	ldi	r20, 0x04	; 4
    456c:	69 e2       	ldi	r22, 0x29	; 41
    456e:	70 e0       	ldi	r23, 0x00	; 0
    4570:	ce 01       	movw	r24, r28
    4572:	aa df       	rcall	.-172    	; 0x44c8 <_ZN9Interface8debounceEPVhh>
    4574:	81 11       	cpse	r24, r1
    4576:	0f c0       	rjmp	.+30     	; 0x4596 <_ZN9Interface6TasterEv+0x82>
		taste = '6';
	}
	else if (debounce(&PIND,PIND3))
    4578:	43 e0       	ldi	r20, 0x03	; 3
    457a:	69 e2       	ldi	r22, 0x29	; 41
    457c:	70 e0       	ldi	r23, 0x00	; 0
    457e:	ce 01       	movw	r24, r28
    4580:	a3 df       	rcall	.-186    	; 0x44c8 <_ZN9Interface8debounceEPVhh>
    4582:	81 11       	cpse	r24, r1
    4584:	0a c0       	rjmp	.+20     	; 0x459a <_ZN9Interface6TasterEv+0x86>
	{
		taste = '5';
	}
	else if (debounce(&PIND,PIND2))
    4586:	42 e0       	ldi	r20, 0x02	; 2
    4588:	69 e2       	ldi	r22, 0x29	; 41
    458a:	70 e0       	ldi	r23, 0x00	; 0
    458c:	ce 01       	movw	r24, r28
    458e:	9c df       	rcall	.-200    	; 0x44c8 <_ZN9Interface8debounceEPVhh>
    4590:	81 11       	cpse	r24, r1
    4592:	05 c0       	rjmp	.+10     	; 0x459e <_ZN9Interface6TasterEv+0x8a>
    4594:	05 c0       	rjmp	.+10     	; 0x45a0 <_ZN9Interface6TasterEv+0x8c>
	
	//zweite Zeile
	PORTC |= (1<<PORTC2);
	_delay_us(1);
	if(debounce(&PIND,PIND4)){
		taste = '6';
    4596:	16 e3       	ldi	r17, 0x36	; 54
    4598:	03 c0       	rjmp	.+6      	; 0x45a0 <_ZN9Interface6TasterEv+0x8c>
	}
	else if (debounce(&PIND,PIND3))
	{
		taste = '5';
    459a:	15 e3       	ldi	r17, 0x35	; 53
    459c:	01 c0       	rjmp	.+2      	; 0x45a0 <_ZN9Interface6TasterEv+0x8c>
	}
	else if (debounce(&PIND,PIND2))
	{
		taste = '4';
    459e:	14 e3       	ldi	r17, 0x34	; 52
	}
	PORTC &= ~(1<<PORTC2);
    45a0:	42 98       	cbi	0x08, 2	; 8
	
	//dritte Zeile
	PORTD |= (1<<PORTD6);
    45a2:	5e 9a       	sbi	0x0b, 6	; 11
    45a4:	82 e0       	ldi	r24, 0x02	; 2
    45a6:	8a 95       	dec	r24
    45a8:	f1 f7       	brne	.-4      	; 0x45a6 <_ZN9Interface6TasterEv+0x92>
    45aa:	00 c0       	rjmp	.+0      	; 0x45ac <_ZN9Interface6TasterEv+0x98>
	_delay_us(1);
	if(debounce(&PIND,PIND4)){
    45ac:	44 e0       	ldi	r20, 0x04	; 4
    45ae:	69 e2       	ldi	r22, 0x29	; 41
    45b0:	70 e0       	ldi	r23, 0x00	; 0
    45b2:	ce 01       	movw	r24, r28
    45b4:	89 df       	rcall	.-238    	; 0x44c8 <_ZN9Interface8debounceEPVhh>
    45b6:	81 11       	cpse	r24, r1
    45b8:	0f c0       	rjmp	.+30     	; 0x45d8 <_ZN9Interface6TasterEv+0xc4>
		taste = '9';
	}
	else if (debounce(&PIND,PIND3))
    45ba:	43 e0       	ldi	r20, 0x03	; 3
    45bc:	69 e2       	ldi	r22, 0x29	; 41
    45be:	70 e0       	ldi	r23, 0x00	; 0
    45c0:	ce 01       	movw	r24, r28
    45c2:	82 df       	rcall	.-252    	; 0x44c8 <_ZN9Interface8debounceEPVhh>
    45c4:	81 11       	cpse	r24, r1
    45c6:	0a c0       	rjmp	.+20     	; 0x45dc <_ZN9Interface6TasterEv+0xc8>
	{
		taste = '8';
	}
	else if (debounce(&PIND,PIND2))
    45c8:	42 e0       	ldi	r20, 0x02	; 2
    45ca:	69 e2       	ldi	r22, 0x29	; 41
    45cc:	70 e0       	ldi	r23, 0x00	; 0
    45ce:	ce 01       	movw	r24, r28
    45d0:	7b df       	rcall	.-266    	; 0x44c8 <_ZN9Interface8debounceEPVhh>
    45d2:	81 11       	cpse	r24, r1
    45d4:	05 c0       	rjmp	.+10     	; 0x45e0 <_ZN9Interface6TasterEv+0xcc>
    45d6:	05 c0       	rjmp	.+10     	; 0x45e2 <_ZN9Interface6TasterEv+0xce>
	
	//dritte Zeile
	PORTD |= (1<<PORTD6);
	_delay_us(1);
	if(debounce(&PIND,PIND4)){
		taste = '9';
    45d8:	19 e3       	ldi	r17, 0x39	; 57
    45da:	03 c0       	rjmp	.+6      	; 0x45e2 <_ZN9Interface6TasterEv+0xce>
	}
	else if (debounce(&PIND,PIND3))
	{
		taste = '8';
    45dc:	18 e3       	ldi	r17, 0x38	; 56
    45de:	01 c0       	rjmp	.+2      	; 0x45e2 <_ZN9Interface6TasterEv+0xce>
	}
	else if (debounce(&PIND,PIND2))
	{
		taste = '7';
    45e0:	17 e3       	ldi	r17, 0x37	; 55
	}
	PORTD &= ~(1<<PORTD6);
    45e2:	5e 98       	cbi	0x0b, 6	; 11
	
	//vierte Zeile
	PORTD |= (1<<PORTD5);
    45e4:	5d 9a       	sbi	0x0b, 5	; 11
    45e6:	82 e0       	ldi	r24, 0x02	; 2
    45e8:	8a 95       	dec	r24
    45ea:	f1 f7       	brne	.-4      	; 0x45e8 <_ZN9Interface6TasterEv+0xd4>
    45ec:	00 c0       	rjmp	.+0      	; 0x45ee <_ZN9Interface6TasterEv+0xda>
	_delay_us(1);
	if(debounce(&PIND,PIND4)){
    45ee:	44 e0       	ldi	r20, 0x04	; 4
    45f0:	69 e2       	ldi	r22, 0x29	; 41
    45f2:	70 e0       	ldi	r23, 0x00	; 0
    45f4:	ce 01       	movw	r24, r28
    45f6:	68 df       	rcall	.-304    	; 0x44c8 <_ZN9Interface8debounceEPVhh>
    45f8:	81 11       	cpse	r24, r1
    45fa:	0f c0       	rjmp	.+30     	; 0x461a <_ZN9Interface6TasterEv+0x106>
		taste = '#';
	}
	else if (debounce(&PIND,PIND3))
    45fc:	43 e0       	ldi	r20, 0x03	; 3
    45fe:	69 e2       	ldi	r22, 0x29	; 41
    4600:	70 e0       	ldi	r23, 0x00	; 0
    4602:	ce 01       	movw	r24, r28
    4604:	61 df       	rcall	.-318    	; 0x44c8 <_ZN9Interface8debounceEPVhh>
    4606:	81 11       	cpse	r24, r1
    4608:	0a c0       	rjmp	.+20     	; 0x461e <_ZN9Interface6TasterEv+0x10a>
	{
		taste = '0';
	}
	else if (debounce(&PIND,PIND2))
    460a:	42 e0       	ldi	r20, 0x02	; 2
    460c:	69 e2       	ldi	r22, 0x29	; 41
    460e:	70 e0       	ldi	r23, 0x00	; 0
    4610:	ce 01       	movw	r24, r28
    4612:	5a df       	rcall	.-332    	; 0x44c8 <_ZN9Interface8debounceEPVhh>
    4614:	81 11       	cpse	r24, r1
    4616:	05 c0       	rjmp	.+10     	; 0x4622 <_ZN9Interface6TasterEv+0x10e>
    4618:	05 c0       	rjmp	.+10     	; 0x4624 <_ZN9Interface6TasterEv+0x110>
	
	//vierte Zeile
	PORTD |= (1<<PORTD5);
	_delay_us(1);
	if(debounce(&PIND,PIND4)){
		taste = '#';
    461a:	13 e2       	ldi	r17, 0x23	; 35
    461c:	03 c0       	rjmp	.+6      	; 0x4624 <_ZN9Interface6TasterEv+0x110>
	}
	else if (debounce(&PIND,PIND3))
	{
		taste = '0';
    461e:	10 e3       	ldi	r17, 0x30	; 48
    4620:	01 c0       	rjmp	.+2      	; 0x4624 <_ZN9Interface6TasterEv+0x110>
	}
	else if (debounce(&PIND,PIND2))
	{
		taste = '*';
    4622:	1a e2       	ldi	r17, 0x2A	; 42
	}
	PORTD &= ~(1<<PORTD5);
    4624:	5d 98       	cbi	0x0b, 5	; 11
	
	return taste;
}
    4626:	81 2f       	mov	r24, r17
    4628:	df 91       	pop	r29
    462a:	cf 91       	pop	r28
    462c:	1f 91       	pop	r17
    462e:	08 95       	ret

00004630 <_ZN9Interface17ZahlenausTastaturEv>:

uint8_t Interface::ZahlenausTastatur(){
    4630:	cf 93       	push	r28
    4632:	df 93       	push	r29
    4634:	ec 01       	movw	r28, r24
	while(true){
		uint8_t taste = Taster();
    4636:	ce 01       	movw	r24, r28
    4638:	6d df       	rcall	.-294    	; 0x4514 <_ZN9Interface6TasterEv>
		if(taste>='0' && taste<='9'){
    463a:	80 53       	subi	r24, 0x30	; 48
    463c:	8a 30       	cpi	r24, 0x0A	; 10
    463e:	d8 f7       	brcc	.-10     	; 0x4636 <_ZN9Interface17ZahlenausTastaturEv+0x6>
			return taste - '0';
		}
	}
}
    4640:	df 91       	pop	r29
    4642:	cf 91       	pop	r28
    4644:	08 95       	ret

00004646 <_ZN7KompassD1Ev>:
	for (uint8_t i=0;i<3;i++)
	{
		achsen[i]=0;
		offset[i]=0;
	}
}
    4646:	06 96       	adiw	r24, 0x06	; 6
    4648:	07 cf       	rjmp	.-498    	; 0x4458 <_ZN3I2CD1Ev>
    464a:	08 95       	ret

0000464c <_ZN7Kompass16HMC5883L_commandEhh>:
    464c:	0f 93       	push	r16
    464e:	1f 93       	push	r17
    4650:	cf 93       	push	r28
    4652:	df 93       	push	r29
    4654:	06 2f       	mov	r16, r22
    4656:	14 2f       	mov	r17, r20
    4658:	ec 01       	movw	r28, r24
    465a:	26 96       	adiw	r28, 0x06	; 6
    465c:	ce 01       	movw	r24, r28
    465e:	fd de       	rcall	.-518    	; 0x445a <_ZN3I2C9twi_startEv>
    4660:	6c e3       	ldi	r22, 0x3C	; 60
    4662:	ce 01       	movw	r24, r28
    4664:	02 df       	rcall	.-508    	; 0x446a <_ZN3I2C9twi_writeEh>
    4666:	60 2f       	mov	r22, r16
    4668:	ce 01       	movw	r24, r28
    466a:	ff de       	rcall	.-514    	; 0x446a <_ZN3I2C9twi_writeEh>
    466c:	61 2f       	mov	r22, r17
    466e:	ce 01       	movw	r24, r28
    4670:	fc de       	rcall	.-520    	; 0x446a <_ZN3I2C9twi_writeEh>
    4672:	ce 01       	movw	r24, r28
    4674:	f6 de       	rcall	.-532    	; 0x4462 <_ZN3I2C8twi_stopEv>
    4676:	df 91       	pop	r29
    4678:	cf 91       	pop	r28
    467a:	1f 91       	pop	r17
    467c:	0f 91       	pop	r16
    467e:	08 95       	ret

00004680 <_ZN7KompassC1Ev>:
    4680:	cf 93       	push	r28
    4682:	df 93       	push	r29
    4684:	ec 01       	movw	r28, r24
    4686:	06 96       	adiw	r24, 0x06	; 6
    4688:	e3 de       	rcall	.-570    	; 0x4450 <_ZN3I2CC1Ev>
    468a:	40 e7       	ldi	r20, 0x70	; 112
    468c:	60 e0       	ldi	r22, 0x00	; 0
    468e:	ce 01       	movw	r24, r28
    4690:	dd df       	rcall	.-70     	; 0x464c <_ZN7Kompass16HMC5883L_commandEhh>
    4692:	40 e2       	ldi	r20, 0x20	; 32
    4694:	61 e0       	ldi	r22, 0x01	; 1
    4696:	ce 01       	movw	r24, r28
    4698:	d9 df       	rcall	.-78     	; 0x464c <_ZN7Kompass16HMC5883L_commandEhh>
    469a:	41 e0       	ldi	r20, 0x01	; 1
    469c:	62 e0       	ldi	r22, 0x02	; 2
    469e:	ce 01       	movw	r24, r28
    46a0:	d5 df       	rcall	.-86     	; 0x464c <_ZN7Kompass16HMC5883L_commandEhh>
    46a2:	19 82       	std	Y+1, r1	; 0x01
    46a4:	18 82       	st	Y, r1
    46a6:	18 86       	std	Y+8, r1	; 0x08
    46a8:	1f 82       	std	Y+7, r1	; 0x07
    46aa:	1b 82       	std	Y+3, r1	; 0x03
    46ac:	1a 82       	std	Y+2, r1	; 0x02
    46ae:	1a 86       	std	Y+10, r1	; 0x0a
    46b0:	19 86       	std	Y+9, r1	; 0x09
    46b2:	1d 82       	std	Y+5, r1	; 0x05
    46b4:	1c 82       	std	Y+4, r1	; 0x04
    46b6:	1c 86       	std	Y+12, r1	; 0x0c
    46b8:	1b 86       	std	Y+11, r1	; 0x0b
    46ba:	df 91       	pop	r29
    46bc:	cf 91       	pop	r28
    46be:	08 95       	ret

000046c0 <_ZN7Kompass20HMC5883L_readHeadingEv>:

uint8_t Kompass::HMC5883L_readHeading(){
    46c0:	bf 92       	push	r11
    46c2:	cf 92       	push	r12
    46c4:	df 92       	push	r13
    46c6:	ef 92       	push	r14
    46c8:	ff 92       	push	r15
    46ca:	0f 93       	push	r16
    46cc:	1f 93       	push	r17
    46ce:	cf 93       	push	r28
    46d0:	df 93       	push	r29
    46d2:	00 d0       	rcall	.+0      	; 0x46d4 <_ZN7Kompass20HMC5883L_readHeadingEv+0x14>
    46d4:	00 d0       	rcall	.+0      	; 0x46d6 <_ZN7Kompass20HMC5883L_readHeadingEv+0x16>
    46d6:	00 d0       	rcall	.+0      	; 0x46d8 <_ZN7Kompass20HMC5883L_readHeadingEv+0x18>
    46d8:	cd b7       	in	r28, 0x3d	; 61
    46da:	de b7       	in	r29, 0x3e	; 62
    46dc:	6c 01       	movw	r12, r24
	cli();
    46de:	f8 94       	cli
	uint8_t heading[6];
	i2c.twi_start();
    46e0:	7c 01       	movw	r14, r24
    46e2:	26 e0       	ldi	r18, 0x06	; 6
    46e4:	e2 0e       	add	r14, r18
    46e6:	f1 1c       	adc	r15, r1
    46e8:	c7 01       	movw	r24, r14
    46ea:	b7 de       	rcall	.-658    	; 0x445a <_ZN3I2C9twi_startEv>
	i2c.twi_write(HMCWRITEADRESSE);
    46ec:	6c e3       	ldi	r22, 0x3C	; 60
    46ee:	c7 01       	movw	r24, r14
    46f0:	bc de       	rcall	.-648    	; 0x446a <_ZN3I2C9twi_writeEh>
	i2c.twi_write(0x03);
    46f2:	63 e0       	ldi	r22, 0x03	; 3
    46f4:	c7 01       	movw	r24, r14
    46f6:	b9 de       	rcall	.-654    	; 0x446a <_ZN3I2C9twi_writeEh>
	i2c.twi_start();
    46f8:	c7 01       	movw	r24, r14
    46fa:	af de       	rcall	.-674    	; 0x445a <_ZN3I2C9twi_startEv>
	i2c.twi_write(HMCREADADRESSE);
    46fc:	6d e3       	ldi	r22, 0x3D	; 61
    46fe:	c7 01       	movw	r24, r14
    4700:	b4 de       	rcall	.-664    	; 0x446a <_ZN3I2C9twi_writeEh>
    4702:	8e 01       	movw	r16, r28
    4704:	0f 5f       	subi	r16, 0xFF	; 255
    4706:	1f 4f       	sbci	r17, 0xFF	; 255
	
	for(uint8_t i=0; i<6;i++){
    4708:	b1 2c       	mov	r11, r1
		if (i<5)
    470a:	84 e0       	ldi	r24, 0x04	; 4
    470c:	8b 15       	cp	r24, r11
    470e:	30 f0       	brcs	.+12     	; 0x471c <_ZN7Kompass20HMC5883L_readHeadingEv+0x5c>
		{
			heading[i]=i2c.twi_read(1);
    4710:	61 e0       	ldi	r22, 0x01	; 1
    4712:	c7 01       	movw	r24, r14
    4714:	ba de       	rcall	.-652    	; 0x448a <_ZN3I2C8twi_readEh>
    4716:	f8 01       	movw	r30, r16
    4718:	80 83       	st	Z, r24
    471a:	05 c0       	rjmp	.+10     	; 0x4726 <_ZN7Kompass20HMC5883L_readHeadingEv+0x66>
		}
		else
		{
			heading[i]=i2c.twi_read(0);
    471c:	60 e0       	ldi	r22, 0x00	; 0
    471e:	c7 01       	movw	r24, r14
    4720:	b4 de       	rcall	.-664    	; 0x448a <_ZN3I2C8twi_readEh>
    4722:	f8 01       	movw	r30, r16
    4724:	80 83       	st	Z, r24
	i2c.twi_write(HMCWRITEADRESSE);
	i2c.twi_write(0x03);
	i2c.twi_start();
	i2c.twi_write(HMCREADADRESSE);
	
	for(uint8_t i=0; i<6;i++){
    4726:	b3 94       	inc	r11
    4728:	0f 5f       	subi	r16, 0xFF	; 255
    472a:	1f 4f       	sbci	r17, 0xFF	; 255
    472c:	f6 e0       	ldi	r31, 0x06	; 6
    472e:	bf 12       	cpse	r11, r31
    4730:	ec cf       	rjmp	.-40     	; 0x470a <_ZN7Kompass20HMC5883L_readHeadingEv+0x4a>
		{
			heading[i]=i2c.twi_read(0);
		}
		
	}
	i2c.twi_stop();
    4732:	c7 01       	movw	r24, r14
    4734:	96 de       	rcall	.-724    	; 0x4462 <_ZN3I2C8twi_stopEv>
	achsen[0] =(int16_t) (heading[1] | (heading[0] << 8));
    4736:	89 81       	ldd	r24, Y+1	; 0x01
    4738:	90 e0       	ldi	r25, 0x00	; 0
    473a:	98 2f       	mov	r25, r24
    473c:	88 27       	eor	r24, r24
    473e:	2a 81       	ldd	r18, Y+2	; 0x02
    4740:	82 2b       	or	r24, r18
    4742:	f6 01       	movw	r30, r12
    4744:	91 83       	std	Z+1, r25	; 0x01
    4746:	80 83       	st	Z, r24
	achsen[2] =(int16_t) (heading[3] | (heading[2] << 8));
    4748:	8b 81       	ldd	r24, Y+3	; 0x03
    474a:	90 e0       	ldi	r25, 0x00	; 0
    474c:	98 2f       	mov	r25, r24
    474e:	88 27       	eor	r24, r24
    4750:	2c 81       	ldd	r18, Y+4	; 0x04
    4752:	82 2b       	or	r24, r18
    4754:	95 83       	std	Z+5, r25	; 0x05
    4756:	84 83       	std	Z+4, r24	; 0x04
	achsen[1] =(int16_t) (heading[5] | (heading[4] << 8));
    4758:	8d 81       	ldd	r24, Y+5	; 0x05
    475a:	90 e0       	ldi	r25, 0x00	; 0
    475c:	98 2f       	mov	r25, r24
    475e:	88 27       	eor	r24, r24
    4760:	2e 81       	ldd	r18, Y+6	; 0x06
    4762:	82 2b       	or	r24, r18
    4764:	93 83       	std	Z+3, r25	; 0x03
    4766:	82 83       	std	Z+2, r24	; 0x02
	sei();
    4768:	78 94       	sei
	if (achsen[0]==-4096 || achsen[1]==-4096 || achsen[2]==-4096)
    476a:	f6 01       	movw	r30, r12
    476c:	80 81       	ld	r24, Z
    476e:	91 81       	ldd	r25, Z+1	; 0x01
    4770:	81 15       	cp	r24, r1
    4772:	90 4f       	sbci	r25, 0xF0	; 240
    4774:	09 f4       	brne	.+2      	; 0x4778 <_ZN7Kompass20HMC5883L_readHeadingEv+0xb8>
    4776:	47 c0       	rjmp	.+142    	; 0x4806 <_ZN7Kompass20HMC5883L_readHeadingEv+0x146>
    4778:	f6 01       	movw	r30, r12
    477a:	82 81       	ldd	r24, Z+2	; 0x02
    477c:	93 81       	ldd	r25, Z+3	; 0x03
    477e:	81 15       	cp	r24, r1
    4780:	90 4f       	sbci	r25, 0xF0	; 240
    4782:	09 f4       	brne	.+2      	; 0x4786 <_ZN7Kompass20HMC5883L_readHeadingEv+0xc6>
    4784:	42 c0       	rjmp	.+132    	; 0x480a <_ZN7Kompass20HMC5883L_readHeadingEv+0x14a>
    4786:	f6 01       	movw	r30, r12
    4788:	84 81       	ldd	r24, Z+4	; 0x04
    478a:	95 81       	ldd	r25, Z+5	; 0x05
    478c:	81 15       	cp	r24, r1
    478e:	90 4f       	sbci	r25, 0xF0	; 240
    4790:	f1 f1       	breq	.+124    	; 0x480e <_ZN7Kompass20HMC5883L_readHeadingEv+0x14e>
    4792:	f6 01       	movw	r30, r12
    4794:	83 e0       	ldi	r24, 0x03	; 3
    4796:	df 01       	movw	r26, r30
	}
	//Kallibrierung durchfuehren, jedes mal, wenn eine abfrage stattfindet
	//somit passive kalibrierung
	else{
		for(uint8_t i=0;i<3;i++){
			if(achsen[i]>max[i]){
    4798:	20 81       	ld	r18, Z
    479a:	31 81       	ldd	r19, Z+1	; 0x01
    479c:	45 85       	ldd	r20, Z+13	; 0x0d
    479e:	56 85       	ldd	r21, Z+14	; 0x0e
    47a0:	42 17       	cp	r20, r18
    47a2:	53 07       	cpc	r21, r19
    47a4:	8c f4       	brge	.+34     	; 0x47c8 <_ZN7Kompass20HMC5883L_readHeadingEv+0x108>
				max[i]=achsen[i];
    47a6:	36 87       	std	Z+14, r19	; 0x0e
    47a8:	25 87       	std	Z+13, r18	; 0x0d
				offset[i]=(max[i]+min[i])/2;
    47aa:	43 89       	ldd	r20, Z+19	; 0x13
    47ac:	54 89       	ldd	r21, Z+20	; 0x14
    47ae:	24 0f       	add	r18, r20
    47b0:	35 1f       	adc	r19, r21
    47b2:	33 23       	and	r19, r19
    47b4:	14 f4       	brge	.+4      	; 0x47ba <_ZN7Kompass20HMC5883L_readHeadingEv+0xfa>
    47b6:	2f 5f       	subi	r18, 0xFF	; 255
    47b8:	3f 4f       	sbci	r19, 0xFF	; 255
    47ba:	35 95       	asr	r19
    47bc:	27 95       	ror	r18
    47be:	18 96       	adiw	r26, 0x08	; 8
    47c0:	3c 93       	st	X, r19
    47c2:	2e 93       	st	-X, r18
    47c4:	17 97       	sbiw	r26, 0x07	; 7
    47c6:	1a c0       	rjmp	.+52     	; 0x47fc <_ZN7Kompass20HMC5883L_readHeadingEv+0x13c>
			}
			else if(achsen[i]<min[i]){
    47c8:	63 89       	ldd	r22, Z+19	; 0x13
    47ca:	74 89       	ldd	r23, Z+20	; 0x14
    47cc:	26 17       	cp	r18, r22
    47ce:	37 07       	cpc	r19, r23
    47d0:	7c f4       	brge	.+30     	; 0x47f0 <_ZN7Kompass20HMC5883L_readHeadingEv+0x130>
				min[i]=achsen[i];
    47d2:	34 8b       	std	Z+20, r19	; 0x14
    47d4:	23 8b       	std	Z+19, r18	; 0x13
				offset[i]=(max[i]+min[i])/2;
    47d6:	24 0f       	add	r18, r20
    47d8:	35 1f       	adc	r19, r21
    47da:	33 23       	and	r19, r19
    47dc:	14 f4       	brge	.+4      	; 0x47e2 <_ZN7Kompass20HMC5883L_readHeadingEv+0x122>
    47de:	2f 5f       	subi	r18, 0xFF	; 255
    47e0:	3f 4f       	sbci	r19, 0xFF	; 255
    47e2:	35 95       	asr	r19
    47e4:	27 95       	ror	r18
    47e6:	18 96       	adiw	r26, 0x08	; 8
    47e8:	3c 93       	st	X, r19
    47ea:	2e 93       	st	-X, r18
    47ec:	17 97       	sbiw	r26, 0x07	; 7
    47ee:	06 c0       	rjmp	.+12     	; 0x47fc <_ZN7Kompass20HMC5883L_readHeadingEv+0x13c>
			}
			else {
				achsen[i]-=offset[i];
    47f0:	47 81       	ldd	r20, Z+7	; 0x07
    47f2:	50 85       	ldd	r21, Z+8	; 0x08
    47f4:	24 1b       	sub	r18, r20
    47f6:	35 0b       	sbc	r19, r21
    47f8:	31 83       	std	Z+1, r19	; 0x01
    47fa:	20 83       	st	Z, r18
    47fc:	81 50       	subi	r24, 0x01	; 1
    47fe:	32 96       	adiw	r30, 0x02	; 2
		return 1;
	}
	//Kallibrierung durchfuehren, jedes mal, wenn eine abfrage stattfindet
	//somit passive kalibrierung
	else{
		for(uint8_t i=0;i<3;i++){
    4800:	81 11       	cpse	r24, r1
    4802:	c9 cf       	rjmp	.-110    	; 0x4796 <_ZN7Kompass20HMC5883L_readHeadingEv+0xd6>
    4804:	05 c0       	rjmp	.+10     	; 0x4810 <_ZN7Kompass20HMC5883L_readHeadingEv+0x150>
	achsen[2] =(int16_t) (heading[3] | (heading[2] << 8));
	achsen[1] =(int16_t) (heading[5] | (heading[4] << 8));
	sei();
	if (achsen[0]==-4096 || achsen[1]==-4096 || achsen[2]==-4096)
	{
		return 1;
    4806:	81 e0       	ldi	r24, 0x01	; 1
    4808:	03 c0       	rjmp	.+6      	; 0x4810 <_ZN7Kompass20HMC5883L_readHeadingEv+0x150>
    480a:	81 e0       	ldi	r24, 0x01	; 1
    480c:	01 c0       	rjmp	.+2      	; 0x4810 <_ZN7Kompass20HMC5883L_readHeadingEv+0x150>
    480e:	81 e0       	ldi	r24, 0x01	; 1
			}
		}
	}
	
	return 0;
}
    4810:	26 96       	adiw	r28, 0x06	; 6
    4812:	0f b6       	in	r0, 0x3f	; 63
    4814:	f8 94       	cli
    4816:	de bf       	out	0x3e, r29	; 62
    4818:	0f be       	out	0x3f, r0	; 63
    481a:	cd bf       	out	0x3d, r28	; 61
    481c:	df 91       	pop	r29
    481e:	cf 91       	pop	r28
    4820:	1f 91       	pop	r17
    4822:	0f 91       	pop	r16
    4824:	ff 90       	pop	r15
    4826:	ef 90       	pop	r14
    4828:	df 90       	pop	r13
    482a:	cf 90       	pop	r12
    482c:	bf 90       	pop	r11
    482e:	08 95       	ret

00004830 <_ZN7Kompass5angleEv>:

double Kompass::angle(){
    4830:	cf 92       	push	r12
    4832:	df 92       	push	r13
    4834:	ef 92       	push	r14
    4836:	ff 92       	push	r15
    4838:	cf 93       	push	r28
    483a:	df 93       	push	r29
    483c:	ec 01       	movw	r28, r24
	double angle=0;
	if (HMC5883L_readHeading())
    483e:	40 df       	rcall	.-384    	; 0x46c0 <_ZN7Kompass20HMC5883L_readHeadingEv>
    4840:	81 11       	cpse	r24, r1
    4842:	4c c0       	rjmp	.+152    	; 0x48dc <_ZN7Kompass5angleEv+0xac>
	{
		angle=-1.0;
	}
	else{
		angle=atan2f(achsen[0],achsen[2])*180.0/M_PI+180.0;
    4844:	6c 81       	ldd	r22, Y+4	; 0x04
    4846:	7d 81       	ldd	r23, Y+5	; 0x05
    4848:	88 27       	eor	r24, r24
    484a:	77 fd       	sbrc	r23, 7
    484c:	80 95       	com	r24
    484e:	98 2f       	mov	r25, r24
    4850:	07 d6       	rcall	.+3086   	; 0x5460 <__floatsisf>
    4852:	6b 01       	movw	r12, r22
    4854:	7c 01       	movw	r14, r24
    4856:	68 81       	ld	r22, Y
    4858:	79 81       	ldd	r23, Y+1	; 0x01
    485a:	88 27       	eor	r24, r24
    485c:	77 fd       	sbrc	r23, 7
    485e:	80 95       	com	r24
    4860:	98 2f       	mov	r25, r24
    4862:	fe d5       	rcall	.+3068   	; 0x5460 <__floatsisf>
    4864:	a7 01       	movw	r20, r14
    4866:	96 01       	movw	r18, r12
    4868:	06 d5       	rcall	.+2572   	; 0x5276 <atan2>
    486a:	20 e0       	ldi	r18, 0x00	; 0
    486c:	30 e0       	ldi	r19, 0x00	; 0
    486e:	44 e3       	ldi	r20, 0x34	; 52
    4870:	53 e4       	ldi	r21, 0x43	; 67
    4872:	54 d7       	rcall	.+3752   	; 0x571c <__mulsf3>
    4874:	2b ed       	ldi	r18, 0xDB	; 219
    4876:	3f e0       	ldi	r19, 0x0F	; 15
    4878:	49 e4       	ldi	r20, 0x49	; 73
    487a:	50 e4       	ldi	r21, 0x40	; 64
    487c:	56 d5       	rcall	.+2732   	; 0x532a <__divsf3>
    487e:	20 e0       	ldi	r18, 0x00	; 0
    4880:	30 e0       	ldi	r19, 0x00	; 0
    4882:	44 e3       	ldi	r20, 0x34	; 52
    4884:	53 e4       	ldi	r21, 0x43	; 67
    4886:	84 d4       	rcall	.+2312   	; 0x5190 <__addsf3>
		//deklination
		angle+=2.35;
    4888:	26 e6       	ldi	r18, 0x66	; 102
    488a:	36 e6       	ldi	r19, 0x66	; 102
    488c:	46 e1       	ldi	r20, 0x16	; 22
    488e:	50 e4       	ldi	r21, 0x40	; 64
    4890:	7f d4       	rcall	.+2302   	; 0x5190 <__addsf3>
    4892:	6b 01       	movw	r12, r22
    4894:	7c 01       	movw	r14, r24
		//Normierung auf %360
		if (angle>=360)
    4896:	20 e0       	ldi	r18, 0x00	; 0
    4898:	30 e0       	ldi	r19, 0x00	; 0
    489a:	44 eb       	ldi	r20, 0xB4	; 180
    489c:	53 e4       	ldi	r21, 0x43	; 67
    489e:	ee d6       	rcall	.+3548   	; 0x567c <__gesf2>
    48a0:	88 23       	and	r24, r24
    48a2:	54 f0       	brlt	.+20     	; 0x48b8 <_ZN7Kompass5angleEv+0x88>
		{
			angle-=360;
    48a4:	20 e0       	ldi	r18, 0x00	; 0
    48a6:	30 e0       	ldi	r19, 0x00	; 0
    48a8:	44 eb       	ldi	r20, 0xB4	; 180
    48aa:	53 e4       	ldi	r21, 0x43	; 67
    48ac:	c7 01       	movw	r24, r14
    48ae:	b6 01       	movw	r22, r12
    48b0:	6e d4       	rcall	.+2268   	; 0x518e <__subsf3>
    48b2:	6b 01       	movw	r12, r22
    48b4:	7c 01       	movw	r14, r24
    48b6:	1a c0       	rjmp	.+52     	; 0x48ec <_ZN7Kompass5angleEv+0xbc>
		}
		else if (angle < 0)
    48b8:	20 e0       	ldi	r18, 0x00	; 0
    48ba:	30 e0       	ldi	r19, 0x00	; 0
    48bc:	a9 01       	movw	r20, r18
    48be:	c7 01       	movw	r24, r14
    48c0:	b6 01       	movw	r22, r12
    48c2:	2c d5       	rcall	.+2648   	; 0x531c <__cmpsf2>
    48c4:	88 23       	and	r24, r24
    48c6:	94 f4       	brge	.+36     	; 0x48ec <_ZN7Kompass5angleEv+0xbc>
		{
			angle+=360;
    48c8:	20 e0       	ldi	r18, 0x00	; 0
    48ca:	30 e0       	ldi	r19, 0x00	; 0
    48cc:	44 eb       	ldi	r20, 0xB4	; 180
    48ce:	53 e4       	ldi	r21, 0x43	; 67
    48d0:	c7 01       	movw	r24, r14
    48d2:	b6 01       	movw	r22, r12
    48d4:	5d d4       	rcall	.+2234   	; 0x5190 <__addsf3>
    48d6:	6b 01       	movw	r12, r22
    48d8:	7c 01       	movw	r14, r24
    48da:	08 c0       	rjmp	.+16     	; 0x48ec <_ZN7Kompass5angleEv+0xbc>

double Kompass::angle(){
	double angle=0;
	if (HMC5883L_readHeading())
	{
		angle=-1.0;
    48dc:	0f 2e       	mov	r0, r31
    48de:	c1 2c       	mov	r12, r1
    48e0:	d1 2c       	mov	r13, r1
    48e2:	f0 e8       	ldi	r31, 0x80	; 128
    48e4:	ef 2e       	mov	r14, r31
    48e6:	ff eb       	ldi	r31, 0xBF	; 191
    48e8:	ff 2e       	mov	r15, r31
    48ea:	f0 2d       	mov	r31, r0
		{
			angle+=360;
		}
	}
	
	HMC5883L_command(0x02,HMCSIGLEMODE);
    48ec:	41 e0       	ldi	r20, 0x01	; 1
    48ee:	62 e0       	ldi	r22, 0x02	; 2
    48f0:	ce 01       	movw	r24, r28
    48f2:	ac de       	rcall	.-680    	; 0x464c <_ZN7Kompass16HMC5883L_commandEhh>
	return angle;
}
    48f4:	c7 01       	movw	r24, r14
    48f6:	b6 01       	movw	r22, r12
    48f8:	df 91       	pop	r29
    48fa:	cf 91       	pop	r28
    48fc:	ff 90       	pop	r15
    48fe:	ef 90       	pop	r14
    4900:	df 90       	pop	r13
    4902:	cf 90       	pop	r12
    4904:	08 95       	ret

00004906 <_ZN7Kompass25kallibrierung_ruecksetzenEv>:

void Kompass::kallibrierung_ruecksetzen(){
    4906:	fc 01       	movw	r30, r24
	for (uint8_t i=0;i<3;i++)
	{
		max[i]=0;
    4908:	16 86       	std	Z+14, r1	; 0x0e
    490a:	15 86       	std	Z+13, r1	; 0x0d
		min[i]=0;
    490c:	14 8a       	std	Z+20, r1	; 0x14
    490e:	13 8a       	std	Z+19, r1	; 0x13
		offset[i]=0;
    4910:	10 86       	std	Z+8, r1	; 0x08
    4912:	17 82       	std	Z+7, r1	; 0x07
}

void Kompass::kallibrierung_ruecksetzen(){
	for (uint8_t i=0;i<3;i++)
	{
		max[i]=0;
    4914:	10 8a       	std	Z+16, r1	; 0x10
    4916:	17 86       	std	Z+15, r1	; 0x0f
		min[i]=0;
    4918:	16 8a       	std	Z+22, r1	; 0x16
    491a:	15 8a       	std	Z+21, r1	; 0x15
		offset[i]=0;
    491c:	12 86       	std	Z+10, r1	; 0x0a
    491e:	11 86       	std	Z+9, r1	; 0x09
}

void Kompass::kallibrierung_ruecksetzen(){
	for (uint8_t i=0;i<3;i++)
	{
		max[i]=0;
    4920:	12 8a       	std	Z+18, r1	; 0x12
    4922:	11 8a       	std	Z+17, r1	; 0x11
		min[i]=0;
    4924:	10 8e       	std	Z+24, r1	; 0x18
    4926:	17 8a       	std	Z+23, r1	; 0x17
		offset[i]=0;
    4928:	14 86       	std	Z+12, r1	; 0x0c
    492a:	13 86       	std	Z+11, r1	; 0x0b
    492c:	08 95       	ret

0000492e <_ZN6OutputC1Ehh>:
#include "Output.h"

// default constructor
Output::Output(uint8_t Portpraefix, uint8_t Pinnumber)
{
	Pin=Pinnumber;
    492e:	fc 01       	movw	r30, r24
    4930:	41 83       	std	Z+1, r20	; 0x01
	Port=Portpraefix;
    4932:	60 83       	st	Z, r22
	switch (Portpraefix)
    4934:	62 34       	cpi	r22, 0x42	; 66
    4936:	b1 f0       	breq	.+44     	; 0x4964 <_ZN6OutputC1Ehh+0x36>
    4938:	18 f4       	brcc	.+6      	; 0x4940 <_ZN6OutputC1Ehh+0x12>
    493a:	61 34       	cpi	r22, 0x41	; 65
    493c:	31 f0       	breq	.+12     	; 0x494a <_ZN6OutputC1Ehh+0x1c>
    493e:	08 95       	ret
    4940:	63 34       	cpi	r22, 0x43	; 67
    4942:	e9 f0       	breq	.+58     	; 0x497e <_ZN6OutputC1Ehh+0x50>
    4944:	64 34       	cpi	r22, 0x44	; 68
    4946:	41 f1       	breq	.+80     	; 0x4998 <_ZN6OutputC1Ehh+0x6a>
    4948:	08 95       	ret
	{
		case 'A':
			DDRA |= (1<<Pin);
    494a:	21 b1       	in	r18, 0x01	; 1
    494c:	81 e0       	ldi	r24, 0x01	; 1
    494e:	90 e0       	ldi	r25, 0x00	; 0
    4950:	bc 01       	movw	r22, r24
    4952:	02 c0       	rjmp	.+4      	; 0x4958 <_ZN6OutputC1Ehh+0x2a>
    4954:	66 0f       	add	r22, r22
    4956:	77 1f       	adc	r23, r23
    4958:	4a 95       	dec	r20
    495a:	e2 f7       	brpl	.-8      	; 0x4954 <_ZN6OutputC1Ehh+0x26>
    495c:	ab 01       	movw	r20, r22
    495e:	42 2b       	or	r20, r18
    4960:	41 b9       	out	0x01, r20	; 1
			break;
    4962:	08 95       	ret
		case 'B':
			DDRB |= (1<<Pin);
    4964:	24 b1       	in	r18, 0x04	; 4
    4966:	81 e0       	ldi	r24, 0x01	; 1
    4968:	90 e0       	ldi	r25, 0x00	; 0
    496a:	fc 01       	movw	r30, r24
    496c:	02 c0       	rjmp	.+4      	; 0x4972 <_ZN6OutputC1Ehh+0x44>
    496e:	ee 0f       	add	r30, r30
    4970:	ff 1f       	adc	r31, r31
    4972:	4a 95       	dec	r20
    4974:	e2 f7       	brpl	.-8      	; 0x496e <_ZN6OutputC1Ehh+0x40>
    4976:	af 01       	movw	r20, r30
    4978:	42 2b       	or	r20, r18
    497a:	44 b9       	out	0x04, r20	; 4
			break;
    497c:	08 95       	ret
		case 'C':
			DDRC |= (1<<Pin);
    497e:	27 b1       	in	r18, 0x07	; 7
    4980:	81 e0       	ldi	r24, 0x01	; 1
    4982:	90 e0       	ldi	r25, 0x00	; 0
    4984:	bc 01       	movw	r22, r24
    4986:	02 c0       	rjmp	.+4      	; 0x498c <_ZN6OutputC1Ehh+0x5e>
    4988:	66 0f       	add	r22, r22
    498a:	77 1f       	adc	r23, r23
    498c:	4a 95       	dec	r20
    498e:	e2 f7       	brpl	.-8      	; 0x4988 <_ZN6OutputC1Ehh+0x5a>
    4990:	ab 01       	movw	r20, r22
    4992:	42 2b       	or	r20, r18
    4994:	47 b9       	out	0x07, r20	; 7
			break;
    4996:	08 95       	ret
		case 'D':
			DDRD |= (1<<Pin);
    4998:	2a b1       	in	r18, 0x0a	; 10
    499a:	81 e0       	ldi	r24, 0x01	; 1
    499c:	90 e0       	ldi	r25, 0x00	; 0
    499e:	fc 01       	movw	r30, r24
    49a0:	02 c0       	rjmp	.+4      	; 0x49a6 <_ZN6OutputC1Ehh+0x78>
    49a2:	ee 0f       	add	r30, r30
    49a4:	ff 1f       	adc	r31, r31
    49a6:	4a 95       	dec	r20
    49a8:	e2 f7       	brpl	.-8      	; 0x49a2 <_ZN6OutputC1Ehh+0x74>
    49aa:	af 01       	movw	r20, r30
    49ac:	42 2b       	or	r20, r18
    49ae:	4a b9       	out	0x0a, r20	; 10
    49b0:	08 95       	ret

000049b2 <_ZN6OutputD1Ev>:
			break;
	}
} //Output

// default destructor
Output::~Output()
    49b2:	08 95       	ret

000049b4 <_ZN6Output2onEv>:
{
} //~Output

void Output::on(){
	switch (Port)
    49b4:	fc 01       	movw	r30, r24
    49b6:	20 81       	ld	r18, Z
    49b8:	22 34       	cpi	r18, 0x42	; 66
    49ba:	c1 f0       	breq	.+48     	; 0x49ec <_ZN6Output2onEv+0x38>
    49bc:	18 f4       	brcc	.+6      	; 0x49c4 <_ZN6Output2onEv+0x10>
    49be:	21 34       	cpi	r18, 0x41	; 65
    49c0:	31 f0       	breq	.+12     	; 0x49ce <_ZN6Output2onEv+0x1a>
    49c2:	08 95       	ret
    49c4:	23 34       	cpi	r18, 0x43	; 67
    49c6:	09 f1       	breq	.+66     	; 0x4a0a <_ZN6Output2onEv+0x56>
    49c8:	24 34       	cpi	r18, 0x44	; 68
    49ca:	71 f1       	breq	.+92     	; 0x4a28 <_ZN6Output2onEv+0x74>
    49cc:	08 95       	ret
	{
		case 'A':
			PORTA |= (1<<Pin);
    49ce:	42 b1       	in	r20, 0x02	; 2
    49d0:	21 e0       	ldi	r18, 0x01	; 1
    49d2:	30 e0       	ldi	r19, 0x00	; 0
    49d4:	b9 01       	movw	r22, r18
    49d6:	fc 01       	movw	r30, r24
    49d8:	01 80       	ldd	r0, Z+1	; 0x01
    49da:	02 c0       	rjmp	.+4      	; 0x49e0 <_ZN6Output2onEv+0x2c>
    49dc:	66 0f       	add	r22, r22
    49de:	77 1f       	adc	r23, r23
    49e0:	0a 94       	dec	r0
    49e2:	e2 f7       	brpl	.-8      	; 0x49dc <_ZN6Output2onEv+0x28>
    49e4:	cb 01       	movw	r24, r22
    49e6:	84 2b       	or	r24, r20
    49e8:	82 b9       	out	0x02, r24	; 2
			break;
    49ea:	08 95       	ret
		case 'B':
			PORTB |= (1<<Pin);
    49ec:	45 b1       	in	r20, 0x05	; 5
    49ee:	21 e0       	ldi	r18, 0x01	; 1
    49f0:	30 e0       	ldi	r19, 0x00	; 0
    49f2:	b9 01       	movw	r22, r18
    49f4:	fc 01       	movw	r30, r24
    49f6:	01 80       	ldd	r0, Z+1	; 0x01
    49f8:	02 c0       	rjmp	.+4      	; 0x49fe <_ZN6Output2onEv+0x4a>
    49fa:	66 0f       	add	r22, r22
    49fc:	77 1f       	adc	r23, r23
    49fe:	0a 94       	dec	r0
    4a00:	e2 f7       	brpl	.-8      	; 0x49fa <_ZN6Output2onEv+0x46>
    4a02:	cb 01       	movw	r24, r22
    4a04:	84 2b       	or	r24, r20
    4a06:	85 b9       	out	0x05, r24	; 5
			break;
    4a08:	08 95       	ret
		case 'C':
			PORTC |= (1<<Pin);
    4a0a:	48 b1       	in	r20, 0x08	; 8
    4a0c:	21 e0       	ldi	r18, 0x01	; 1
    4a0e:	30 e0       	ldi	r19, 0x00	; 0
    4a10:	b9 01       	movw	r22, r18
    4a12:	fc 01       	movw	r30, r24
    4a14:	01 80       	ldd	r0, Z+1	; 0x01
    4a16:	02 c0       	rjmp	.+4      	; 0x4a1c <_ZN6Output2onEv+0x68>
    4a18:	66 0f       	add	r22, r22
    4a1a:	77 1f       	adc	r23, r23
    4a1c:	0a 94       	dec	r0
    4a1e:	e2 f7       	brpl	.-8      	; 0x4a18 <_ZN6Output2onEv+0x64>
    4a20:	cb 01       	movw	r24, r22
    4a22:	84 2b       	or	r24, r20
    4a24:	88 b9       	out	0x08, r24	; 8
			break;
    4a26:	08 95       	ret
		case 'D':
			PORTD |= (1<<Pin);
    4a28:	4b b1       	in	r20, 0x0b	; 11
    4a2a:	21 e0       	ldi	r18, 0x01	; 1
    4a2c:	30 e0       	ldi	r19, 0x00	; 0
    4a2e:	b9 01       	movw	r22, r18
    4a30:	fc 01       	movw	r30, r24
    4a32:	01 80       	ldd	r0, Z+1	; 0x01
    4a34:	02 c0       	rjmp	.+4      	; 0x4a3a <_ZN6Output2onEv+0x86>
    4a36:	66 0f       	add	r22, r22
    4a38:	77 1f       	adc	r23, r23
    4a3a:	0a 94       	dec	r0
    4a3c:	e2 f7       	brpl	.-8      	; 0x4a36 <_ZN6Output2onEv+0x82>
    4a3e:	cb 01       	movw	r24, r22
    4a40:	84 2b       	or	r24, r20
    4a42:	8b b9       	out	0x0b, r24	; 11
    4a44:	08 95       	ret

00004a46 <_ZN6Output4isonEv>:
	}
}

uint8_t Output::ison(){
	uint8_t returnparam=0;
	switch (Port)
    4a46:	fc 01       	movw	r30, r24
    4a48:	20 81       	ld	r18, Z
    4a4a:	22 34       	cpi	r18, 0x42	; 66
    4a4c:	b1 f0       	breq	.+44     	; 0x4a7a <_ZN6Output4isonEv+0x34>
    4a4e:	18 f4       	brcc	.+6      	; 0x4a56 <_ZN6Output4isonEv+0x10>
    4a50:	21 34       	cpi	r18, 0x41	; 65
    4a52:	31 f0       	breq	.+12     	; 0x4a60 <_ZN6Output4isonEv+0x1a>
    4a54:	39 c0       	rjmp	.+114    	; 0x4ac8 <_ZN6Output4isonEv+0x82>
    4a56:	23 34       	cpi	r18, 0x43	; 67
    4a58:	e9 f0       	breq	.+58     	; 0x4a94 <_ZN6Output4isonEv+0x4e>
    4a5a:	24 34       	cpi	r18, 0x44	; 68
    4a5c:	41 f1       	breq	.+80     	; 0x4aae <_ZN6Output4isonEv+0x68>
    4a5e:	34 c0       	rjmp	.+104    	; 0x4ac8 <_ZN6Output4isonEv+0x82>
	{
		case 'A':
			if ((PORTA&(1<<Pin)))
    4a60:	22 b1       	in	r18, 0x02	; 2
    4a62:	30 e0       	ldi	r19, 0x00	; 0
    4a64:	a9 01       	movw	r20, r18
    4a66:	fc 01       	movw	r30, r24
    4a68:	01 80       	ldd	r0, Z+1	; 0x01
    4a6a:	02 c0       	rjmp	.+4      	; 0x4a70 <_ZN6Output4isonEv+0x2a>
    4a6c:	55 95       	asr	r21
    4a6e:	47 95       	ror	r20
    4a70:	0a 94       	dec	r0
    4a72:	e2 f7       	brpl	.-8      	; 0x4a6c <_ZN6Output4isonEv+0x26>
    4a74:	ca 01       	movw	r24, r20
    4a76:	81 70       	andi	r24, 0x01	; 1
    4a78:	08 95       	ret
			{
				returnparam = 1;
			}
			break;
		case 'B':
			if ((PORTB&(1<<Pin)))
    4a7a:	25 b1       	in	r18, 0x05	; 5
    4a7c:	30 e0       	ldi	r19, 0x00	; 0
    4a7e:	a9 01       	movw	r20, r18
    4a80:	fc 01       	movw	r30, r24
    4a82:	01 80       	ldd	r0, Z+1	; 0x01
    4a84:	02 c0       	rjmp	.+4      	; 0x4a8a <_ZN6Output4isonEv+0x44>
    4a86:	55 95       	asr	r21
    4a88:	47 95       	ror	r20
    4a8a:	0a 94       	dec	r0
    4a8c:	e2 f7       	brpl	.-8      	; 0x4a86 <_ZN6Output4isonEv+0x40>
    4a8e:	ca 01       	movw	r24, r20
    4a90:	81 70       	andi	r24, 0x01	; 1
    4a92:	08 95       	ret
			{
				returnparam = 1;
			}
			break;
		case 'C':
			if ((PORTC&(1<<Pin)))
    4a94:	28 b1       	in	r18, 0x08	; 8
    4a96:	30 e0       	ldi	r19, 0x00	; 0
    4a98:	a9 01       	movw	r20, r18
    4a9a:	fc 01       	movw	r30, r24
    4a9c:	01 80       	ldd	r0, Z+1	; 0x01
    4a9e:	02 c0       	rjmp	.+4      	; 0x4aa4 <_ZN6Output4isonEv+0x5e>
    4aa0:	55 95       	asr	r21
    4aa2:	47 95       	ror	r20
    4aa4:	0a 94       	dec	r0
    4aa6:	e2 f7       	brpl	.-8      	; 0x4aa0 <_ZN6Output4isonEv+0x5a>
    4aa8:	ca 01       	movw	r24, r20
    4aaa:	81 70       	andi	r24, 0x01	; 1
    4aac:	08 95       	ret
			{
				returnparam = 1;
			}
			break;
		case 'D':
			if ((PORTD&(1<<Pin)))
    4aae:	2b b1       	in	r18, 0x0b	; 11
    4ab0:	30 e0       	ldi	r19, 0x00	; 0
    4ab2:	a9 01       	movw	r20, r18
    4ab4:	fc 01       	movw	r30, r24
    4ab6:	01 80       	ldd	r0, Z+1	; 0x01
    4ab8:	02 c0       	rjmp	.+4      	; 0x4abe <_ZN6Output4isonEv+0x78>
    4aba:	55 95       	asr	r21
    4abc:	47 95       	ror	r20
    4abe:	0a 94       	dec	r0
    4ac0:	e2 f7       	brpl	.-8      	; 0x4aba <_ZN6Output4isonEv+0x74>
    4ac2:	ca 01       	movw	r24, r20
    4ac4:	81 70       	andi	r24, 0x01	; 1
    4ac6:	08 95       	ret
			{
				returnparam = 1;
			}
			break;
		default:
		returnparam = 2;
    4ac8:	82 e0       	ldi	r24, 0x02	; 2
			break;
	}
	return returnparam;
}
    4aca:	08 95       	ret

00004acc <_ZN6Output3offEv>:

void Output::off(){
	switch (Port)
    4acc:	fc 01       	movw	r30, r24
    4ace:	20 81       	ld	r18, Z
    4ad0:	22 34       	cpi	r18, 0x42	; 66
    4ad2:	c9 f0       	breq	.+50     	; 0x4b06 <_ZN6Output3offEv+0x3a>
    4ad4:	18 f4       	brcc	.+6      	; 0x4adc <_ZN6Output3offEv+0x10>
    4ad6:	21 34       	cpi	r18, 0x41	; 65
    4ad8:	31 f0       	breq	.+12     	; 0x4ae6 <_ZN6Output3offEv+0x1a>
    4ada:	08 95       	ret
    4adc:	23 34       	cpi	r18, 0x43	; 67
    4ade:	19 f1       	breq	.+70     	; 0x4b26 <_ZN6Output3offEv+0x5a>
    4ae0:	24 34       	cpi	r18, 0x44	; 68
    4ae2:	89 f1       	breq	.+98     	; 0x4b46 <_ZN6Output3offEv+0x7a>
    4ae4:	08 95       	ret
	{
		case 'A':
			PORTA &= ~(1<<Pin);
    4ae6:	42 b1       	in	r20, 0x02	; 2
    4ae8:	21 e0       	ldi	r18, 0x01	; 1
    4aea:	30 e0       	ldi	r19, 0x00	; 0
    4aec:	b9 01       	movw	r22, r18
    4aee:	fc 01       	movw	r30, r24
    4af0:	01 80       	ldd	r0, Z+1	; 0x01
    4af2:	02 c0       	rjmp	.+4      	; 0x4af8 <_ZN6Output3offEv+0x2c>
    4af4:	66 0f       	add	r22, r22
    4af6:	77 1f       	adc	r23, r23
    4af8:	0a 94       	dec	r0
    4afa:	e2 f7       	brpl	.-8      	; 0x4af4 <_ZN6Output3offEv+0x28>
    4afc:	cb 01       	movw	r24, r22
    4afe:	80 95       	com	r24
    4b00:	84 23       	and	r24, r20
    4b02:	82 b9       	out	0x02, r24	; 2
			break;
    4b04:	08 95       	ret
		case 'B':
			PORTB &= ~(1<<Pin);
    4b06:	45 b1       	in	r20, 0x05	; 5
    4b08:	21 e0       	ldi	r18, 0x01	; 1
    4b0a:	30 e0       	ldi	r19, 0x00	; 0
    4b0c:	b9 01       	movw	r22, r18
    4b0e:	fc 01       	movw	r30, r24
    4b10:	01 80       	ldd	r0, Z+1	; 0x01
    4b12:	02 c0       	rjmp	.+4      	; 0x4b18 <_ZN6Output3offEv+0x4c>
    4b14:	66 0f       	add	r22, r22
    4b16:	77 1f       	adc	r23, r23
    4b18:	0a 94       	dec	r0
    4b1a:	e2 f7       	brpl	.-8      	; 0x4b14 <_ZN6Output3offEv+0x48>
    4b1c:	cb 01       	movw	r24, r22
    4b1e:	80 95       	com	r24
    4b20:	84 23       	and	r24, r20
    4b22:	85 b9       	out	0x05, r24	; 5
			break;
    4b24:	08 95       	ret
		case 'C':
			PORTC &= ~(1<<Pin);
    4b26:	48 b1       	in	r20, 0x08	; 8
    4b28:	21 e0       	ldi	r18, 0x01	; 1
    4b2a:	30 e0       	ldi	r19, 0x00	; 0
    4b2c:	b9 01       	movw	r22, r18
    4b2e:	fc 01       	movw	r30, r24
    4b30:	01 80       	ldd	r0, Z+1	; 0x01
    4b32:	02 c0       	rjmp	.+4      	; 0x4b38 <_ZN6Output3offEv+0x6c>
    4b34:	66 0f       	add	r22, r22
    4b36:	77 1f       	adc	r23, r23
    4b38:	0a 94       	dec	r0
    4b3a:	e2 f7       	brpl	.-8      	; 0x4b34 <_ZN6Output3offEv+0x68>
    4b3c:	cb 01       	movw	r24, r22
    4b3e:	80 95       	com	r24
    4b40:	84 23       	and	r24, r20
    4b42:	88 b9       	out	0x08, r24	; 8
			break;
    4b44:	08 95       	ret
		case 'D':
			PORTD &= ~(1<<Pin);
    4b46:	4b b1       	in	r20, 0x0b	; 11
    4b48:	21 e0       	ldi	r18, 0x01	; 1
    4b4a:	30 e0       	ldi	r19, 0x00	; 0
    4b4c:	b9 01       	movw	r22, r18
    4b4e:	fc 01       	movw	r30, r24
    4b50:	01 80       	ldd	r0, Z+1	; 0x01
    4b52:	02 c0       	rjmp	.+4      	; 0x4b58 <_ZN6Output3offEv+0x8c>
    4b54:	66 0f       	add	r22, r22
    4b56:	77 1f       	adc	r23, r23
    4b58:	0a 94       	dec	r0
    4b5a:	e2 f7       	brpl	.-8      	; 0x4b54 <_ZN6Output3offEv+0x88>
    4b5c:	cb 01       	movw	r24, r22
    4b5e:	80 95       	com	r24
    4b60:	84 23       	and	r24, r20
    4b62:	8b b9       	out	0x0b, r24	; 11
    4b64:	08 95       	ret

00004b66 <_ZN6Output6toggleEv>:
			break;
	}
}

void Output::toggle(){
	switch (Port)
    4b66:	fc 01       	movw	r30, r24
    4b68:	20 81       	ld	r18, Z
    4b6a:	22 34       	cpi	r18, 0x42	; 66
    4b6c:	c1 f0       	breq	.+48     	; 0x4b9e <_ZN6Output6toggleEv+0x38>
    4b6e:	18 f4       	brcc	.+6      	; 0x4b76 <_ZN6Output6toggleEv+0x10>
    4b70:	21 34       	cpi	r18, 0x41	; 65
    4b72:	31 f0       	breq	.+12     	; 0x4b80 <_ZN6Output6toggleEv+0x1a>
    4b74:	08 95       	ret
    4b76:	23 34       	cpi	r18, 0x43	; 67
    4b78:	09 f1       	breq	.+66     	; 0x4bbc <_ZN6Output6toggleEv+0x56>
    4b7a:	24 34       	cpi	r18, 0x44	; 68
    4b7c:	71 f1       	breq	.+92     	; 0x4bda <_ZN6Output6toggleEv+0x74>
    4b7e:	08 95       	ret
	{
		case 'A':
			if ((PORTA&(1<<Pin)))
    4b80:	22 b1       	in	r18, 0x02	; 2
    4b82:	30 e0       	ldi	r19, 0x00	; 0
    4b84:	fc 01       	movw	r30, r24
    4b86:	01 80       	ldd	r0, Z+1	; 0x01
    4b88:	02 c0       	rjmp	.+4      	; 0x4b8e <_ZN6Output6toggleEv+0x28>
    4b8a:	35 95       	asr	r19
    4b8c:	27 95       	ror	r18
    4b8e:	0a 94       	dec	r0
    4b90:	e2 f7       	brpl	.-8      	; 0x4b8a <_ZN6Output6toggleEv+0x24>
    4b92:	20 ff       	sbrs	r18, 0
    4b94:	02 c0       	rjmp	.+4      	; 0x4b9a <_ZN6Output6toggleEv+0x34>
			{
				off();
    4b96:	9a cf       	rjmp	.-204    	; 0x4acc <_ZN6Output3offEv>
    4b98:	08 95       	ret
			}
			else{
				on();
    4b9a:	0c cf       	rjmp	.-488    	; 0x49b4 <_ZN6Output2onEv>
    4b9c:	08 95       	ret
			}
			break;
		case 'B':
			if ((PORTB&(1<<Pin)))
    4b9e:	25 b1       	in	r18, 0x05	; 5
    4ba0:	30 e0       	ldi	r19, 0x00	; 0
    4ba2:	fc 01       	movw	r30, r24
    4ba4:	01 80       	ldd	r0, Z+1	; 0x01
    4ba6:	02 c0       	rjmp	.+4      	; 0x4bac <_ZN6Output6toggleEv+0x46>
    4ba8:	35 95       	asr	r19
    4baa:	27 95       	ror	r18
    4bac:	0a 94       	dec	r0
    4bae:	e2 f7       	brpl	.-8      	; 0x4ba8 <_ZN6Output6toggleEv+0x42>
    4bb0:	20 ff       	sbrs	r18, 0
    4bb2:	02 c0       	rjmp	.+4      	; 0x4bb8 <_ZN6Output6toggleEv+0x52>
			{
				off();
    4bb4:	8b cf       	rjmp	.-234    	; 0x4acc <_ZN6Output3offEv>
    4bb6:	08 95       	ret
			}
			else{
				on();
    4bb8:	fd ce       	rjmp	.-518    	; 0x49b4 <_ZN6Output2onEv>
    4bba:	08 95       	ret
			}
			break;
		case 'C':
			if ((PORTC&(1<<Pin)))
    4bbc:	28 b1       	in	r18, 0x08	; 8
    4bbe:	30 e0       	ldi	r19, 0x00	; 0
    4bc0:	fc 01       	movw	r30, r24
    4bc2:	01 80       	ldd	r0, Z+1	; 0x01
    4bc4:	02 c0       	rjmp	.+4      	; 0x4bca <_ZN6Output6toggleEv+0x64>
    4bc6:	35 95       	asr	r19
    4bc8:	27 95       	ror	r18
    4bca:	0a 94       	dec	r0
    4bcc:	e2 f7       	brpl	.-8      	; 0x4bc6 <_ZN6Output6toggleEv+0x60>
    4bce:	20 ff       	sbrs	r18, 0
    4bd0:	02 c0       	rjmp	.+4      	; 0x4bd6 <_ZN6Output6toggleEv+0x70>
			{
				off();
    4bd2:	7c cf       	rjmp	.-264    	; 0x4acc <_ZN6Output3offEv>
    4bd4:	08 95       	ret
			}
			else{
				on();
    4bd6:	ee ce       	rjmp	.-548    	; 0x49b4 <_ZN6Output2onEv>
    4bd8:	08 95       	ret
			}
			break;
		case 'D':
			if ((PORTD&(1<<Pin)))
    4bda:	2b b1       	in	r18, 0x0b	; 11
    4bdc:	30 e0       	ldi	r19, 0x00	; 0
    4bde:	fc 01       	movw	r30, r24
    4be0:	01 80       	ldd	r0, Z+1	; 0x01
    4be2:	02 c0       	rjmp	.+4      	; 0x4be8 <_ZN6Output6toggleEv+0x82>
    4be4:	35 95       	asr	r19
    4be6:	27 95       	ror	r18
    4be8:	0a 94       	dec	r0
    4bea:	e2 f7       	brpl	.-8      	; 0x4be4 <_ZN6Output6toggleEv+0x7e>
    4bec:	20 ff       	sbrs	r18, 0
    4bee:	02 c0       	rjmp	.+4      	; 0x4bf4 <_ZN6Output6toggleEv+0x8e>
			{
				off();
    4bf0:	6d cf       	rjmp	.-294    	; 0x4acc <_ZN6Output3offEv>
    4bf2:	08 95       	ret
			}
			else{
				on();
    4bf4:	df ce       	rjmp	.-578    	; 0x49b4 <_ZN6Output2onEv>
    4bf6:	08 95       	ret

00004bf8 <_ZN8PressureD1Ev>:
	Pressure0=1;
	LPS25H_initialize();
} //Pressure

// default destructor
Pressure::~Pressure()
    4bf8:	0d 96       	adiw	r24, 0x0d	; 13
    4bfa:	2e cc       	rjmp	.-1956   	; 0x4458 <_ZN3I2CD1Ev>
    4bfc:	08 95       	ret

00004bfe <_ZN8Pressure14LPS25H_commandEhh>:
{
} //~Pressure

void Pressure::LPS25H_command(uint8_t add, uint8_t command){
    4bfe:	0f 93       	push	r16
    4c00:	1f 93       	push	r17
    4c02:	cf 93       	push	r28
    4c04:	df 93       	push	r29
    4c06:	06 2f       	mov	r16, r22
    4c08:	14 2f       	mov	r17, r20
	i2c.twi_start();
    4c0a:	ec 01       	movw	r28, r24
    4c0c:	2d 96       	adiw	r28, 0x0d	; 13
    4c0e:	ce 01       	movw	r24, r28
    4c10:	24 dc       	rcall	.-1976   	; 0x445a <_ZN3I2C9twi_startEv>
	i2c.twi_write(LPS25H_SA1_Write);
    4c12:	6a eb       	ldi	r22, 0xBA	; 186
    4c14:	ce 01       	movw	r24, r28
    4c16:	29 dc       	rcall	.-1966   	; 0x446a <_ZN3I2C9twi_writeEh>
	i2c.twi_write(add);
    4c18:	60 2f       	mov	r22, r16
    4c1a:	ce 01       	movw	r24, r28
    4c1c:	26 dc       	rcall	.-1972   	; 0x446a <_ZN3I2C9twi_writeEh>
	i2c.twi_write(command);
    4c1e:	61 2f       	mov	r22, r17
    4c20:	ce 01       	movw	r24, r28
    4c22:	23 dc       	rcall	.-1978   	; 0x446a <_ZN3I2C9twi_writeEh>
	i2c.twi_stop();
    4c24:	ce 01       	movw	r24, r28
    4c26:	1d dc       	rcall	.-1990   	; 0x4462 <_ZN3I2C8twi_stopEv>
}
    4c28:	df 91       	pop	r29
    4c2a:	cf 91       	pop	r28
    4c2c:	1f 91       	pop	r17
    4c2e:	0f 91       	pop	r16
    4c30:	08 95       	ret

00004c32 <_ZN8Pressure17LPS25H_initializeEv>:

void Pressure::LPS25H_initialize(){
    4c32:	cf 93       	push	r28
    4c34:	df 93       	push	r29
    4c36:	ec 01       	movw	r28, r24
	uint8_t temp=0;
	//internal averages Pressure and Temperature (both 8)
	temp &= ~((1<<AVGT1) | (1<<AVGT0) | (1<<AVGP1) | (1<<AVGP0)); 
	LPS25H_command(RES_CONF,temp);
    4c38:	40 e0       	ldi	r20, 0x00	; 0
    4c3a:	60 e1       	ldi	r22, 0x10	; 16
    4c3c:	e0 df       	rcall	.-64     	; 0x4bfe <_ZN8Pressure14LPS25H_commandEhh>
	temp=0;
	//Enable device and set a single shot as well as Lock while reading
	temp |= (1<<PD) | (1<<BDU) | (1<<ODR1);
	LPS25H_command(CTRL_REG1,temp);
    4c3e:	44 ea       	ldi	r20, 0xA4	; 164
    4c40:	60 e2       	ldi	r22, 0x20	; 32
    4c42:	ce 01       	movw	r24, r28
    4c44:	dc df       	rcall	.-72     	; 0x4bfe <_ZN8Pressure14LPS25H_commandEhh>
	temp=0;
	//FIFO on, no watermark no reset, reboot memory content, FIFO MEAN Mode
	temp |= (1<<BOOT) | (1<<FIFO_EN) | (1<<FIFO_MEAN_DEC);
	LPS25H_command(CTRL_REG2,temp);
    4c46:	40 ed       	ldi	r20, 0xD0	; 208
    4c48:	61 e2       	ldi	r22, 0x21	; 33
    4c4a:	ce 01       	movw	r24, r28
    4c4c:	d8 df       	rcall	.-80     	; 0x4bfe <_ZN8Pressure14LPS25H_commandEhh>
	temp=0;
	//FIFO Controll register for MEAN Mode und 8 moving averages
	temp|=(1<<F_MODE2) | (1<<F_MODE1) | (1<<WTM_POINT0) | (1<<WTM_POINT1) | (1<<WTM_POINT2);
	LPS25H_command(FIFO_CTRL,temp);
    4c4e:	47 ec       	ldi	r20, 0xC7	; 199
    4c50:	6e e2       	ldi	r22, 0x2E	; 46
    4c52:	ce 01       	movw	r24, r28
    4c54:	d4 df       	rcall	.-88     	; 0x4bfe <_ZN8Pressure14LPS25H_commandEhh>
	//CTRL_REG4 not set
	//INTERRUPT_CFG not set
	//no threshold used
	//no Pressure offset used
	
}
    4c56:	df 91       	pop	r29
    4c58:	cf 91       	pop	r28
    4c5a:	08 95       	ret

00004c5c <_ZN8PressureC1Ev>:


#include "Pressure.h"

// default constructor
Pressure::Pressure()
    4c5c:	cf 93       	push	r28
    4c5e:	df 93       	push	r29
    4c60:	ec 01       	movw	r28, r24
    4c62:	0d 96       	adiw	r24, 0x0d	; 13
    4c64:	f5 db       	rcall	.-2070   	; 0x4450 <_ZN3I2CC1Ev>
{
	Press = 0;
    4c66:	18 82       	st	Y, r1
    4c68:	19 82       	std	Y+1, r1	; 0x01
    4c6a:	1a 82       	std	Y+2, r1	; 0x02
    4c6c:	1b 82       	std	Y+3, r1	; 0x03
	Tempera = 0;
    4c6e:	1c 82       	std	Y+4, r1	; 0x04
    4c70:	1d 82       	std	Y+5, r1	; 0x05
    4c72:	1e 82       	std	Y+6, r1	; 0x06
    4c74:	1f 82       	std	Y+7, r1	; 0x07
	Tempoffset = -4;	//Aus Erfahrung
    4c76:	8c ef       	ldi	r24, 0xFC	; 252
    4c78:	88 87       	std	Y+8, r24	; 0x08
	Pressure0=1;
    4c7a:	40 e0       	ldi	r20, 0x00	; 0
    4c7c:	50 e0       	ldi	r21, 0x00	; 0
    4c7e:	60 e8       	ldi	r22, 0x80	; 128
    4c80:	7f e3       	ldi	r23, 0x3F	; 63
    4c82:	49 87       	std	Y+9, r20	; 0x09
    4c84:	5a 87       	std	Y+10, r21	; 0x0a
    4c86:	6b 87       	std	Y+11, r22	; 0x0b
    4c88:	7c 87       	std	Y+12, r23	; 0x0c
	LPS25H_initialize();
    4c8a:	ce 01       	movw	r24, r28
    4c8c:	d2 df       	rcall	.-92     	; 0x4c32 <_ZN8Pressure17LPS25H_initializeEv>
} //Pressure
    4c8e:	df 91       	pop	r29
    4c90:	cf 91       	pop	r28
    4c92:	08 95       	ret

00004c94 <_ZN8Pressure18READ_Pressure_onceEv>:
	//no threshold used
	//no Pressure offset used
	
}

void Pressure::READ_Pressure_once(){
    4c94:	af 92       	push	r10
    4c96:	bf 92       	push	r11
    4c98:	cf 92       	push	r12
    4c9a:	df 92       	push	r13
    4c9c:	ef 92       	push	r14
    4c9e:	ff 92       	push	r15
    4ca0:	1f 93       	push	r17
    4ca2:	cf 93       	push	r28
    4ca4:	df 93       	push	r29
    4ca6:	00 d0       	rcall	.+0      	; 0x4ca8 <_ZN8Pressure18READ_Pressure_onceEv+0x14>
    4ca8:	1f 92       	push	r1
    4caa:	cd b7       	in	r28, 0x3d	; 61
    4cac:	de b7       	in	r29, 0x3e	; 62
    4cae:	5c 01       	movw	r10, r24
	uint8_t Wertedruck[3];
	cli();
    4cb0:	f8 94       	cli
	i2c.twi_start();
    4cb2:	7c 01       	movw	r14, r24
    4cb4:	8d e0       	ldi	r24, 0x0D	; 13
    4cb6:	e8 0e       	add	r14, r24
    4cb8:	f1 1c       	adc	r15, r1
    4cba:	c7 01       	movw	r24, r14
    4cbc:	ce db       	rcall	.-2148   	; 0x445a <_ZN3I2C9twi_startEv>
	i2c.twi_write(LPS25H_SA1_Write);
    4cbe:	6a eb       	ldi	r22, 0xBA	; 186
    4cc0:	c7 01       	movw	r24, r14
    4cc2:	d3 db       	rcall	.-2138   	; 0x446a <_ZN3I2C9twi_writeEh>
	i2c.twi_write(PRESS_OUT_XL|(1<<autoincrement));
    4cc4:	68 ea       	ldi	r22, 0xA8	; 168
    4cc6:	c7 01       	movw	r24, r14
    4cc8:	d0 db       	rcall	.-2144   	; 0x446a <_ZN3I2C9twi_writeEh>
	i2c.twi_start();
    4cca:	c7 01       	movw	r24, r14
    4ccc:	c6 db       	rcall	.-2164   	; 0x445a <_ZN3I2C9twi_startEv>
	i2c.twi_write(LPS25H_SA1_READ);
    4cce:	6b eb       	ldi	r22, 0xBB	; 187
    4cd0:	c7 01       	movw	r24, r14
    4cd2:	cb db       	rcall	.-2154   	; 0x446a <_ZN3I2C9twi_writeEh>
    4cd4:	fe 01       	movw	r30, r28
    4cd6:	31 96       	adiw	r30, 0x01	; 1
    4cd8:	6f 01       	movw	r12, r30
	for (uint8_t i=0;i<3;i++)
    4cda:	10 e0       	ldi	r17, 0x00	; 0
	{
		if (i<2)
    4cdc:	12 30       	cpi	r17, 0x02	; 2
    4cde:	30 f4       	brcc	.+12     	; 0x4cec <_ZN8Pressure18READ_Pressure_onceEv+0x58>
		{
			Wertedruck[i] = i2c.twi_read(1);
    4ce0:	61 e0       	ldi	r22, 0x01	; 1
    4ce2:	c7 01       	movw	r24, r14
    4ce4:	d2 db       	rcall	.-2140   	; 0x448a <_ZN3I2C8twi_readEh>
    4ce6:	f6 01       	movw	r30, r12
    4ce8:	80 83       	st	Z, r24
    4cea:	05 c0       	rjmp	.+10     	; 0x4cf6 <_ZN8Pressure18READ_Pressure_onceEv+0x62>
		}
		else{
			Wertedruck[i] = i2c.twi_read(0);
    4cec:	60 e0       	ldi	r22, 0x00	; 0
    4cee:	c7 01       	movw	r24, r14
    4cf0:	cc db       	rcall	.-2152   	; 0x448a <_ZN3I2C8twi_readEh>
    4cf2:	f6 01       	movw	r30, r12
    4cf4:	80 83       	st	Z, r24
	i2c.twi_start();
	i2c.twi_write(LPS25H_SA1_Write);
	i2c.twi_write(PRESS_OUT_XL|(1<<autoincrement));
	i2c.twi_start();
	i2c.twi_write(LPS25H_SA1_READ);
	for (uint8_t i=0;i<3;i++)
    4cf6:	1f 5f       	subi	r17, 0xFF	; 255
    4cf8:	ff ef       	ldi	r31, 0xFF	; 255
    4cfa:	cf 1a       	sub	r12, r31
    4cfc:	df 0a       	sbc	r13, r31
    4cfe:	13 30       	cpi	r17, 0x03	; 3
    4d00:	69 f7       	brne	.-38     	; 0x4cdc <_ZN8Pressure18READ_Pressure_onceEv+0x48>
		}
		else{
			Wertedruck[i] = i2c.twi_read(0);
		}
	}
	i2c.twi_stop();
    4d02:	c7 01       	movw	r24, r14
    4d04:	ae db       	rcall	.-2212   	; 0x4462 <_ZN3I2C8twi_stopEv>
	Press = ((double)Wertedruck[2]*65536);
    4d06:	6b 81       	ldd	r22, Y+3	; 0x03
    4d08:	70 e0       	ldi	r23, 0x00	; 0
    4d0a:	80 e0       	ldi	r24, 0x00	; 0
    4d0c:	90 e0       	ldi	r25, 0x00	; 0
    4d0e:	a6 d3       	rcall	.+1868   	; 0x545c <__floatunsisf>
    4d10:	20 e0       	ldi	r18, 0x00	; 0
    4d12:	30 e0       	ldi	r19, 0x00	; 0
    4d14:	40 e8       	ldi	r20, 0x80	; 128
    4d16:	57 e4       	ldi	r21, 0x47	; 71
    4d18:	01 d5       	rcall	.+2562   	; 0x571c <__mulsf3>
    4d1a:	6b 01       	movw	r12, r22
    4d1c:	7c 01       	movw	r14, r24
	Press += ((double)Wertedruck[1]*256);
    4d1e:	6a 81       	ldd	r22, Y+2	; 0x02
    4d20:	70 e0       	ldi	r23, 0x00	; 0
    4d22:	80 e0       	ldi	r24, 0x00	; 0
    4d24:	90 e0       	ldi	r25, 0x00	; 0
    4d26:	9a d3       	rcall	.+1844   	; 0x545c <__floatunsisf>
    4d28:	20 e0       	ldi	r18, 0x00	; 0
    4d2a:	30 e0       	ldi	r19, 0x00	; 0
    4d2c:	40 e8       	ldi	r20, 0x80	; 128
    4d2e:	53 e4       	ldi	r21, 0x43	; 67
    4d30:	f5 d4       	rcall	.+2538   	; 0x571c <__mulsf3>
    4d32:	9b 01       	movw	r18, r22
    4d34:	ac 01       	movw	r20, r24
    4d36:	c7 01       	movw	r24, r14
    4d38:	b6 01       	movw	r22, r12
    4d3a:	2a d2       	rcall	.+1108   	; 0x5190 <__addsf3>
    4d3c:	6b 01       	movw	r12, r22
    4d3e:	7c 01       	movw	r14, r24
	Press += (double)Wertedruck[0];
    4d40:	69 81       	ldd	r22, Y+1	; 0x01
    4d42:	70 e0       	ldi	r23, 0x00	; 0
    4d44:	80 e0       	ldi	r24, 0x00	; 0
    4d46:	90 e0       	ldi	r25, 0x00	; 0
    4d48:	89 d3       	rcall	.+1810   	; 0x545c <__floatunsisf>
    4d4a:	9b 01       	movw	r18, r22
    4d4c:	ac 01       	movw	r20, r24
    4d4e:	c7 01       	movw	r24, r14
    4d50:	b6 01       	movw	r22, r12
    4d52:	1e d2       	rcall	.+1084   	; 0x5190 <__addsf3>
	//Press = (Wertedruck[0] + (Wertedruck[1]*256) + (Wertedruck[2]*65536));
	Press/=4096.0;
    4d54:	20 e0       	ldi	r18, 0x00	; 0
    4d56:	30 e0       	ldi	r19, 0x00	; 0
    4d58:	40 e8       	ldi	r20, 0x80	; 128
    4d5a:	59 e3       	ldi	r21, 0x39	; 57
    4d5c:	df d4       	rcall	.+2494   	; 0x571c <__mulsf3>
    4d5e:	f5 01       	movw	r30, r10
    4d60:	60 83       	st	Z, r22
    4d62:	71 83       	std	Z+1, r23	; 0x01
    4d64:	82 83       	std	Z+2, r24	; 0x02
    4d66:	93 83       	std	Z+3, r25	; 0x03
	sei();
    4d68:	78 94       	sei
}
    4d6a:	0f 90       	pop	r0
    4d6c:	0f 90       	pop	r0
    4d6e:	0f 90       	pop	r0
    4d70:	df 91       	pop	r29
    4d72:	cf 91       	pop	r28
    4d74:	1f 91       	pop	r17
    4d76:	ff 90       	pop	r15
    4d78:	ef 90       	pop	r14
    4d7a:	df 90       	pop	r13
    4d7c:	cf 90       	pop	r12
    4d7e:	bf 90       	pop	r11
    4d80:	af 90       	pop	r10
    4d82:	08 95       	ret

00004d84 <_ZN8Pressure16READ_TemperatureEv>:

void Pressure::READ_Temperature(){
    4d84:	cf 92       	push	r12
    4d86:	df 92       	push	r13
    4d88:	ef 92       	push	r14
    4d8a:	ff 92       	push	r15
    4d8c:	0f 93       	push	r16
    4d8e:	1f 93       	push	r17
    4d90:	cf 93       	push	r28
    4d92:	df 93       	push	r29
    4d94:	00 d0       	rcall	.+0      	; 0x4d96 <_ZN8Pressure16READ_TemperatureEv+0x12>
    4d96:	cd b7       	in	r28, 0x3d	; 61
    4d98:	de b7       	in	r29, 0x3e	; 62
    4d9a:	8c 01       	movw	r16, r24
	cli();
    4d9c:	f8 94       	cli
	uint8_t Wert[2];
	i2c.twi_start();
    4d9e:	7c 01       	movw	r14, r24
    4da0:	8d e0       	ldi	r24, 0x0D	; 13
    4da2:	e8 0e       	add	r14, r24
    4da4:	f1 1c       	adc	r15, r1
    4da6:	c7 01       	movw	r24, r14
    4da8:	58 db       	rcall	.-2384   	; 0x445a <_ZN3I2C9twi_startEv>
	i2c.twi_write(LPS25H_SA1_Write);
    4daa:	6a eb       	ldi	r22, 0xBA	; 186
    4dac:	c7 01       	movw	r24, r14
    4dae:	5d db       	rcall	.-2374   	; 0x446a <_ZN3I2C9twi_writeEh>
	i2c.twi_write(TEMP_OUT_L|(1<<autoincrement));
    4db0:	6b ea       	ldi	r22, 0xAB	; 171
    4db2:	c7 01       	movw	r24, r14
    4db4:	5a db       	rcall	.-2380   	; 0x446a <_ZN3I2C9twi_writeEh>
	i2c.twi_start();
    4db6:	c7 01       	movw	r24, r14
    4db8:	50 db       	rcall	.-2400   	; 0x445a <_ZN3I2C9twi_startEv>
	i2c.twi_write(LPS25H_SA1_READ);
    4dba:	6b eb       	ldi	r22, 0xBB	; 187
    4dbc:	c7 01       	movw	r24, r14
    4dbe:	55 db       	rcall	.-2390   	; 0x446a <_ZN3I2C9twi_writeEh>
    4dc0:	cc 24       	eor	r12, r12
    4dc2:	c3 94       	inc	r12
    4dc4:	d1 2c       	mov	r13, r1
    4dc6:	02 c0       	rjmp	.+4      	; 0x4dcc <_ZN8Pressure16READ_TemperatureEv+0x48>
    4dc8:	d3 94       	inc	r13
    4dca:	c3 94       	inc	r12
	for (uint8_t i=0;i<2;i++)
	{
		if (i<1)
    4dcc:	d1 10       	cpse	r13, r1
    4dce:	05 c0       	rjmp	.+10     	; 0x4dda <_ZN8Pressure16READ_TemperatureEv+0x56>
		{
			Wert[i] = i2c.twi_read(1);
    4dd0:	61 e0       	ldi	r22, 0x01	; 1
    4dd2:	c7 01       	movw	r24, r14
    4dd4:	5a db       	rcall	.-2380   	; 0x448a <_ZN3I2C8twi_readEh>
    4dd6:	89 83       	std	Y+1, r24	; 0x01
    4dd8:	f7 cf       	rjmp	.-18     	; 0x4dc8 <_ZN8Pressure16READ_TemperatureEv+0x44>
		}
		else{
			Wert[i] = i2c.twi_read(0);
    4dda:	60 e0       	ldi	r22, 0x00	; 0
    4ddc:	c7 01       	movw	r24, r14
    4dde:	55 db       	rcall	.-2390   	; 0x448a <_ZN3I2C8twi_readEh>
    4de0:	e1 e0       	ldi	r30, 0x01	; 1
    4de2:	f0 e0       	ldi	r31, 0x00	; 0
    4de4:	ec 0f       	add	r30, r28
    4de6:	fd 1f       	adc	r31, r29
    4de8:	ed 0d       	add	r30, r13
    4dea:	f1 1d       	adc	r31, r1
    4dec:	80 83       	st	Z, r24
	i2c.twi_start();
	i2c.twi_write(LPS25H_SA1_Write);
	i2c.twi_write(TEMP_OUT_L|(1<<autoincrement));
	i2c.twi_start();
	i2c.twi_write(LPS25H_SA1_READ);
	for (uint8_t i=0;i<2;i++)
    4dee:	e1 e0       	ldi	r30, 0x01	; 1
    4df0:	ec 15       	cp	r30, r12
    4df2:	50 f7       	brcc	.-44     	; 0x4dc8 <_ZN8Pressure16READ_TemperatureEv+0x44>
		}
		else{
			Wert[i] = i2c.twi_read(0);
		}
	}
	i2c.twi_stop();
    4df4:	c7 01       	movw	r24, r14
    4df6:	35 db       	rcall	.-2454   	; 0x4462 <_ZN3I2C8twi_stopEv>
	Tempera = ((int16_t)(Wert[0]+(Wert[1]<<8)))/480.0;
    4df8:	89 81       	ldd	r24, Y+1	; 0x01
    4dfa:	6a 81       	ldd	r22, Y+2	; 0x02
    4dfc:	70 e0       	ldi	r23, 0x00	; 0
    4dfe:	76 2f       	mov	r23, r22
    4e00:	66 27       	eor	r22, r22
    4e02:	68 0f       	add	r22, r24
    4e04:	71 1d       	adc	r23, r1
    4e06:	88 27       	eor	r24, r24
    4e08:	77 fd       	sbrc	r23, 7
    4e0a:	80 95       	com	r24
    4e0c:	98 2f       	mov	r25, r24
    4e0e:	28 d3       	rcall	.+1616   	; 0x5460 <__floatsisf>
    4e10:	20 e0       	ldi	r18, 0x00	; 0
    4e12:	30 e0       	ldi	r19, 0x00	; 0
    4e14:	40 ef       	ldi	r20, 0xF0	; 240
    4e16:	53 e4       	ldi	r21, 0x43	; 67
    4e18:	88 d2       	rcall	.+1296   	; 0x532a <__divsf3>
    4e1a:	6b 01       	movw	r12, r22
    4e1c:	7c 01       	movw	r14, r24
	Tempera+=42.5+Tempoffset;
    4e1e:	f8 01       	movw	r30, r16
    4e20:	60 85       	ldd	r22, Z+8	; 0x08
    4e22:	77 27       	eor	r23, r23
    4e24:	67 fd       	sbrc	r22, 7
    4e26:	70 95       	com	r23
    4e28:	87 2f       	mov	r24, r23
    4e2a:	97 2f       	mov	r25, r23
    4e2c:	19 d3       	rcall	.+1586   	; 0x5460 <__floatsisf>
    4e2e:	20 e0       	ldi	r18, 0x00	; 0
    4e30:	30 e0       	ldi	r19, 0x00	; 0
    4e32:	4a e2       	ldi	r20, 0x2A	; 42
    4e34:	52 e4       	ldi	r21, 0x42	; 66
    4e36:	ac d1       	rcall	.+856    	; 0x5190 <__addsf3>
    4e38:	9b 01       	movw	r18, r22
    4e3a:	ac 01       	movw	r20, r24
    4e3c:	c7 01       	movw	r24, r14
    4e3e:	b6 01       	movw	r22, r12
    4e40:	a7 d1       	rcall	.+846    	; 0x5190 <__addsf3>
    4e42:	f8 01       	movw	r30, r16
    4e44:	64 83       	std	Z+4, r22	; 0x04
    4e46:	75 83       	std	Z+5, r23	; 0x05
    4e48:	86 83       	std	Z+6, r24	; 0x06
    4e4a:	97 83       	std	Z+7, r25	; 0x07
	sei();
    4e4c:	78 94       	sei
}
    4e4e:	0f 90       	pop	r0
    4e50:	0f 90       	pop	r0
    4e52:	df 91       	pop	r29
    4e54:	cf 91       	pop	r28
    4e56:	1f 91       	pop	r17
    4e58:	0f 91       	pop	r16
    4e5a:	ff 90       	pop	r15
    4e5c:	ef 90       	pop	r14
    4e5e:	df 90       	pop	r13
    4e60:	cf 90       	pop	r12
    4e62:	08 95       	ret

00004e64 <_ZN8Pressure8altitudeEd>:

double Pressure::altitude(double Pressurevalue){
    4e64:	8f 92       	push	r8
    4e66:	9f 92       	push	r9
    4e68:	af 92       	push	r10
    4e6a:	bf 92       	push	r11
    4e6c:	cf 92       	push	r12
    4e6e:	df 92       	push	r13
    4e70:	ef 92       	push	r14
    4e72:	ff 92       	push	r15
	return (Pressure0*100*log(Pressure0/Pressurevalue)/(1.2041*9.81));
    4e74:	fc 01       	movw	r30, r24
    4e76:	c1 84       	ldd	r12, Z+9	; 0x09
    4e78:	d2 84       	ldd	r13, Z+10	; 0x0a
    4e7a:	e3 84       	ldd	r14, Z+11	; 0x0b
    4e7c:	f4 84       	ldd	r15, Z+12	; 0x0c
    4e7e:	9a 01       	movw	r18, r20
    4e80:	ab 01       	movw	r20, r22
    4e82:	c7 01       	movw	r24, r14
    4e84:	b6 01       	movw	r22, r12
    4e86:	51 d2       	rcall	.+1186   	; 0x532a <__divsf3>
    4e88:	09 d4       	rcall	.+2066   	; 0x569c <log>
    4e8a:	4b 01       	movw	r8, r22
    4e8c:	5c 01       	movw	r10, r24
    4e8e:	20 e0       	ldi	r18, 0x00	; 0
    4e90:	30 e0       	ldi	r19, 0x00	; 0
    4e92:	48 ec       	ldi	r20, 0xC8	; 200
    4e94:	52 e4       	ldi	r21, 0x42	; 66
    4e96:	c7 01       	movw	r24, r14
    4e98:	b6 01       	movw	r22, r12
    4e9a:	40 d4       	rcall	.+2176   	; 0x571c <__mulsf3>
    4e9c:	a5 01       	movw	r20, r10
    4e9e:	94 01       	movw	r18, r8
    4ea0:	3d d4       	rcall	.+2170   	; 0x571c <__mulsf3>
    4ea2:	2c ed       	ldi	r18, 0xDC	; 220
    4ea4:	3e ef       	ldi	r19, 0xFE	; 254
    4ea6:	4c e3       	ldi	r20, 0x3C	; 60
    4ea8:	51 e4       	ldi	r21, 0x41	; 65
    4eaa:	3f d2       	rcall	.+1150   	; 0x532a <__divsf3>
}
    4eac:	ff 90       	pop	r15
    4eae:	ef 90       	pop	r14
    4eb0:	df 90       	pop	r13
    4eb2:	cf 90       	pop	r12
    4eb4:	bf 90       	pop	r11
    4eb6:	af 90       	pop	r10
    4eb8:	9f 90       	pop	r9
    4eba:	8f 90       	pop	r8
    4ebc:	08 95       	ret

00004ebe <_ZN8Pressure13set_Pressure0Ed>:
void Pressure::set_Pressure0(double Pressurevalue){
	Pressure0=Pressurevalue;
    4ebe:	fc 01       	movw	r30, r24
    4ec0:	41 87       	std	Z+9, r20	; 0x09
    4ec2:	52 87       	std	Z+10, r21	; 0x0a
    4ec4:	63 87       	std	Z+11, r22	; 0x0b
    4ec6:	74 87       	std	Z+12, r23	; 0x0c
    4ec8:	08 95       	ret

00004eca <_ZN3RTCD1Ev>:
		}
		Wecker();
	}
	ausgabezeitneu();
	return 0;
}
    4eca:	08 95       	ret

00004ecc <_ZN3RTC6WeckerEv>:
    4ecc:	fc 01       	movw	r30, r24
    4ece:	80 8d       	ldd	r24, Z+24	; 0x18
    4ed0:	83 ff       	sbrs	r24, 3
    4ed2:	0c c0       	rjmp	.+24     	; 0x4eec <_ZN3RTC6WeckerEv+0x20>
    4ed4:	84 fd       	sbrc	r24, 4
    4ed6:	0a c0       	rjmp	.+20     	; 0x4eec <_ZN3RTC6WeckerEv+0x20>
    4ed8:	22 8d       	ldd	r18, Z+26	; 0x1a
    4eda:	90 89       	ldd	r25, Z+16	; 0x10
    4edc:	29 13       	cpse	r18, r25
    4ede:	06 c0       	rjmp	.+12     	; 0x4eec <_ZN3RTC6WeckerEv+0x20>
    4ee0:	21 8d       	ldd	r18, Z+25	; 0x19
    4ee2:	91 89       	ldd	r25, Z+17	; 0x11
    4ee4:	29 13       	cpse	r18, r25
    4ee6:	02 c0       	rjmp	.+4      	; 0x4eec <_ZN3RTC6WeckerEv+0x20>
    4ee8:	80 61       	ori	r24, 0x10	; 16
    4eea:	80 8f       	std	Z+24, r24	; 0x18
    4eec:	08 95       	ret

00004eee <_ZN3RTC14ausgabezeitneuEv>:
    4eee:	fc 01       	movw	r30, r24
    4ef0:	90 89       	ldd	r25, Z+16	; 0x10
    4ef2:	8d ec       	ldi	r24, 0xCD	; 205
    4ef4:	98 9f       	mul	r25, r24
    4ef6:	21 2d       	mov	r18, r1
    4ef8:	11 24       	eor	r1, r1
    4efa:	26 95       	lsr	r18
    4efc:	26 95       	lsr	r18
    4efe:	26 95       	lsr	r18
    4f00:	30 e3       	ldi	r19, 0x30	; 48
    4f02:	32 0f       	add	r19, r18
    4f04:	30 83       	st	Z, r19
    4f06:	22 0f       	add	r18, r18
    4f08:	32 2f       	mov	r19, r18
    4f0a:	33 0f       	add	r19, r19
    4f0c:	33 0f       	add	r19, r19
    4f0e:	23 0f       	add	r18, r19
    4f10:	92 1b       	sub	r25, r18
    4f12:	90 5d       	subi	r25, 0xD0	; 208
    4f14:	91 83       	std	Z+1, r25	; 0x01
    4f16:	91 89       	ldd	r25, Z+17	; 0x11
    4f18:	98 9f       	mul	r25, r24
    4f1a:	21 2d       	mov	r18, r1
    4f1c:	11 24       	eor	r1, r1
    4f1e:	26 95       	lsr	r18
    4f20:	26 95       	lsr	r18
    4f22:	26 95       	lsr	r18
    4f24:	30 e3       	ldi	r19, 0x30	; 48
    4f26:	32 0f       	add	r19, r18
    4f28:	33 83       	std	Z+3, r19	; 0x03
    4f2a:	22 0f       	add	r18, r18
    4f2c:	32 2f       	mov	r19, r18
    4f2e:	33 0f       	add	r19, r19
    4f30:	33 0f       	add	r19, r19
    4f32:	23 0f       	add	r18, r19
    4f34:	92 1b       	sub	r25, r18
    4f36:	90 5d       	subi	r25, 0xD0	; 208
    4f38:	94 83       	std	Z+4, r25	; 0x04
    4f3a:	92 89       	ldd	r25, Z+18	; 0x12
    4f3c:	98 9f       	mul	r25, r24
    4f3e:	81 2d       	mov	r24, r1
    4f40:	11 24       	eor	r1, r1
    4f42:	86 95       	lsr	r24
    4f44:	86 95       	lsr	r24
    4f46:	86 95       	lsr	r24
    4f48:	20 e3       	ldi	r18, 0x30	; 48
    4f4a:	28 0f       	add	r18, r24
    4f4c:	26 83       	std	Z+6, r18	; 0x06
    4f4e:	88 0f       	add	r24, r24
    4f50:	28 2f       	mov	r18, r24
    4f52:	22 0f       	add	r18, r18
    4f54:	22 0f       	add	r18, r18
    4f56:	82 0f       	add	r24, r18
    4f58:	98 1b       	sub	r25, r24
    4f5a:	90 5d       	subi	r25, 0xD0	; 208
    4f5c:	97 83       	std	Z+7, r25	; 0x07
    4f5e:	08 95       	ret

00004f60 <_ZN3RTC15ausgabedatumneuEv>:
    4f60:	fc 01       	movw	r30, r24
    4f62:	94 89       	ldd	r25, Z+20	; 0x14
    4f64:	8d ec       	ldi	r24, 0xCD	; 205
    4f66:	98 9f       	mul	r25, r24
    4f68:	21 2d       	mov	r18, r1
    4f6a:	11 24       	eor	r1, r1
    4f6c:	26 95       	lsr	r18
    4f6e:	26 95       	lsr	r18
    4f70:	26 95       	lsr	r18
    4f72:	30 e3       	ldi	r19, 0x30	; 48
    4f74:	32 0f       	add	r19, r18
    4f76:	30 87       	std	Z+8, r19	; 0x08
    4f78:	22 0f       	add	r18, r18
    4f7a:	32 2f       	mov	r19, r18
    4f7c:	33 0f       	add	r19, r19
    4f7e:	33 0f       	add	r19, r19
    4f80:	23 0f       	add	r18, r19
    4f82:	92 1b       	sub	r25, r18
    4f84:	90 5d       	subi	r25, 0xD0	; 208
    4f86:	91 87       	std	Z+9, r25	; 0x09
    4f88:	96 89       	ldd	r25, Z+22	; 0x16
    4f8a:	98 9f       	mul	r25, r24
    4f8c:	21 2d       	mov	r18, r1
    4f8e:	11 24       	eor	r1, r1
    4f90:	26 95       	lsr	r18
    4f92:	26 95       	lsr	r18
    4f94:	26 95       	lsr	r18
    4f96:	30 e3       	ldi	r19, 0x30	; 48
    4f98:	32 0f       	add	r19, r18
    4f9a:	33 87       	std	Z+11, r19	; 0x0b
    4f9c:	22 0f       	add	r18, r18
    4f9e:	32 2f       	mov	r19, r18
    4fa0:	33 0f       	add	r19, r19
    4fa2:	33 0f       	add	r19, r19
    4fa4:	23 0f       	add	r18, r19
    4fa6:	92 1b       	sub	r25, r18
    4fa8:	90 5d       	subi	r25, 0xD0	; 208
    4faa:	94 87       	std	Z+12, r25	; 0x0c
    4fac:	97 89       	ldd	r25, Z+23	; 0x17
    4fae:	98 9f       	mul	r25, r24
    4fb0:	81 2d       	mov	r24, r1
    4fb2:	11 24       	eor	r1, r1
    4fb4:	86 95       	lsr	r24
    4fb6:	86 95       	lsr	r24
    4fb8:	86 95       	lsr	r24
    4fba:	20 e3       	ldi	r18, 0x30	; 48
    4fbc:	28 0f       	add	r18, r24
    4fbe:	26 87       	std	Z+14, r18	; 0x0e
    4fc0:	88 0f       	add	r24, r24
    4fc2:	28 2f       	mov	r18, r24
    4fc4:	22 0f       	add	r18, r18
    4fc6:	22 0f       	add	r18, r18
    4fc8:	82 0f       	add	r24, r18
    4fca:	98 1b       	sub	r25, r24
    4fcc:	90 5d       	subi	r25, 0xD0	; 208
    4fce:	97 87       	std	Z+15, r25	; 0x0f
    4fd0:	08 95       	ret

00004fd2 <_ZN3RTCC1Ev>:
    4fd2:	cf 93       	push	r28
    4fd4:	df 93       	push	r29
    4fd6:	ec 01       	movw	r28, r24
    4fd8:	1a 8a       	std	Y+18, r1	; 0x12
    4fda:	1b 8a       	std	Y+19, r1	; 0x13
    4fdc:	19 8a       	std	Y+17, r1	; 0x11
    4fde:	18 8a       	std	Y+16, r1	; 0x10
    4fe0:	1c 8a       	std	Y+20, r1	; 0x14
    4fe2:	1e 8a       	std	Y+22, r1	; 0x16
    4fe4:	1f 8a       	std	Y+23, r1	; 0x17
    4fe6:	1d 8a       	std	Y+21, r1	; 0x15
    4fe8:	88 e2       	ldi	r24, 0x28	; 40
    4fea:	89 8f       	std	Y+25, r24	; 0x19
    4fec:	8a e0       	ldi	r24, 0x0A	; 10
    4fee:	8a 8f       	std	Y+26, r24	; 0x1a
    4ff0:	de 01       	movw	r26, r28
    4ff2:	fe 01       	movw	r30, r28
    4ff4:	38 96       	adiw	r30, 0x08	; 8
    4ff6:	80 e0       	ldi	r24, 0x00	; 0
    4ff8:	1d 92       	st	X+, r1
    4ffa:	11 92       	st	Z+, r1
    4ffc:	8f 5f       	subi	r24, 0xFF	; 255
    4ffe:	88 30       	cpi	r24, 0x08	; 8
    5000:	d9 f7       	brne	.-10     	; 0x4ff8 <_ZN3RTCC1Ev+0x26>
    5002:	8a e3       	ldi	r24, 0x3A	; 58
    5004:	8a 83       	std	Y+2, r24	; 0x02
    5006:	8d 83       	std	Y+5, r24	; 0x05
    5008:	8e e2       	ldi	r24, 0x2E	; 46
    500a:	8a 87       	std	Y+10, r24	; 0x0a
    500c:	8d 87       	std	Y+13, r24	; 0x0d
    500e:	ce 01       	movw	r24, r28
    5010:	6e df       	rcall	.-292    	; 0x4eee <_ZN3RTC14ausgabezeitneuEv>
    5012:	ce 01       	movw	r24, r28
    5014:	a5 df       	rcall	.-182    	; 0x4f60 <_ZN3RTC15ausgabedatumneuEv>
    5016:	df 91       	pop	r29
    5018:	cf 91       	pop	r28
    501a:	08 95       	ret

0000501c <_ZN3RTC8kalenderEv>:
    501c:	fc 01       	movw	r30, r24
    501e:	26 89       	ldd	r18, Z+22	; 0x16
    5020:	32 2f       	mov	r19, r18
    5022:	3d 7f       	andi	r19, 0xFD	; 253
    5024:	34 30       	cpi	r19, 0x04	; 4
    5026:	11 f0       	breq	.+4      	; 0x502c <_ZN3RTC8kalenderEv+0x10>
    5028:	39 30       	cpi	r19, 0x09	; 9
    502a:	91 f4       	brne	.+36     	; 0x5050 <_ZN3RTC8kalenderEv+0x34>
    502c:	fc 01       	movw	r30, r24
    502e:	34 89       	ldd	r19, Z+20	; 0x14
    5030:	3f 31       	cpi	r19, 0x1F	; 31
    5032:	b0 f1       	brcs	.+108    	; 0x50a0 <_ZN3RTC8kalenderEv+0x84>
    5034:	31 e0       	ldi	r19, 0x01	; 1
    5036:	34 8b       	std	Z+20, r19	; 0x14
    5038:	2f 5f       	subi	r18, 0xFF	; 255
    503a:	2d 30       	cpi	r18, 0x0D	; 13
    503c:	10 f4       	brcc	.+4      	; 0x5042 <_ZN3RTC8kalenderEv+0x26>
    503e:	26 8b       	std	Z+22, r18	; 0x16
    5040:	2f c0       	rjmp	.+94     	; 0x50a0 <_ZN3RTC8kalenderEv+0x84>
    5042:	21 e0       	ldi	r18, 0x01	; 1
    5044:	fc 01       	movw	r30, r24
    5046:	26 8b       	std	Z+22, r18	; 0x16
    5048:	27 89       	ldd	r18, Z+23	; 0x17
    504a:	2f 5f       	subi	r18, 0xFF	; 255
    504c:	27 8b       	std	Z+23, r18	; 0x17
    504e:	28 c0       	rjmp	.+80     	; 0x50a0 <_ZN3RTC8kalenderEv+0x84>
    5050:	22 30       	cpi	r18, 0x02	; 2
    5052:	a9 f4       	brne	.+42     	; 0x507e <_ZN3RTC8kalenderEv+0x62>
    5054:	fc 01       	movw	r30, r24
    5056:	27 89       	ldd	r18, Z+23	; 0x17
    5058:	23 70       	andi	r18, 0x03	; 3
    505a:	41 f4       	brne	.+16     	; 0x506c <_ZN3RTC8kalenderEv+0x50>
    505c:	24 89       	ldd	r18, Z+20	; 0x14
    505e:	2e 31       	cpi	r18, 0x1E	; 30
    5060:	f8 f0       	brcs	.+62     	; 0x50a0 <_ZN3RTC8kalenderEv+0x84>
    5062:	21 e0       	ldi	r18, 0x01	; 1
    5064:	24 8b       	std	Z+20, r18	; 0x14
    5066:	23 e0       	ldi	r18, 0x03	; 3
    5068:	26 8b       	std	Z+22, r18	; 0x16
    506a:	1a c0       	rjmp	.+52     	; 0x50a0 <_ZN3RTC8kalenderEv+0x84>
    506c:	fc 01       	movw	r30, r24
    506e:	24 89       	ldd	r18, Z+20	; 0x14
    5070:	2d 31       	cpi	r18, 0x1D	; 29
    5072:	b0 f0       	brcs	.+44     	; 0x50a0 <_ZN3RTC8kalenderEv+0x84>
    5074:	21 e0       	ldi	r18, 0x01	; 1
    5076:	24 8b       	std	Z+20, r18	; 0x14
    5078:	23 e0       	ldi	r18, 0x03	; 3
    507a:	26 8b       	std	Z+22, r18	; 0x16
    507c:	11 c0       	rjmp	.+34     	; 0x50a0 <_ZN3RTC8kalenderEv+0x84>
    507e:	fc 01       	movw	r30, r24
    5080:	34 89       	ldd	r19, Z+20	; 0x14
    5082:	30 32       	cpi	r19, 0x20	; 32
    5084:	68 f0       	brcs	.+26     	; 0x50a0 <_ZN3RTC8kalenderEv+0x84>
    5086:	31 e0       	ldi	r19, 0x01	; 1
    5088:	34 8b       	std	Z+20, r19	; 0x14
    508a:	2f 5f       	subi	r18, 0xFF	; 255
    508c:	2d 30       	cpi	r18, 0x0D	; 13
    508e:	10 f4       	brcc	.+4      	; 0x5094 <_ZN3RTC8kalenderEv+0x78>
    5090:	26 8b       	std	Z+22, r18	; 0x16
    5092:	06 c0       	rjmp	.+12     	; 0x50a0 <_ZN3RTC8kalenderEv+0x84>
    5094:	21 e0       	ldi	r18, 0x01	; 1
    5096:	fc 01       	movw	r30, r24
    5098:	26 8b       	std	Z+22, r18	; 0x16
    509a:	27 89       	ldd	r18, Z+23	; 0x17
    509c:	2f 5f       	subi	r18, 0xFF	; 255
    509e:	27 8b       	std	Z+23, r18	; 0x17
    50a0:	5f cf       	rjmp	.-322    	; 0x4f60 <_ZN3RTC15ausgabedatumneuEv>
    50a2:	08 95       	ret

000050a4 <_ZN3RTC4zeitEv>:

uint8_t RTC::zeit(){
    50a4:	cf 93       	push	r28
    50a6:	df 93       	push	r29
    50a8:	ec 01       	movw	r28, r24
	//Sekunden++; sitzt im Vektor um Taster besser entprellen zu koennen
	if (Sekunden >= 60 && Sekunden <=200){
    50aa:	8a 89       	ldd	r24, Y+18	; 0x12
    50ac:	8c 53       	subi	r24, 0x3C	; 60
    50ae:	8d 38       	cpi	r24, 0x8D	; 141
    50b0:	c0 f4       	brcc	.+48     	; 0x50e2 <_ZN3RTC4zeitEv+0x3e>
		Sekunden = 0;
    50b2:	1a 8a       	std	Y+18, r1	; 0x12
		Minuten++;
    50b4:	89 89       	ldd	r24, Y+17	; 0x11
    50b6:	8f 5f       	subi	r24, 0xFF	; 255
    50b8:	89 8b       	std	Y+17, r24	; 0x11
		interupts |= (1<<minuteninterupt);
    50ba:	98 8d       	ldd	r25, Y+24	; 0x18
    50bc:	94 60       	ori	r25, 0x04	; 4
    50be:	98 8f       	std	Y+24, r25	; 0x18
		if(Minuten >= 60){
    50c0:	8c 33       	cpi	r24, 0x3C	; 60
    50c2:	68 f0       	brcs	.+26     	; 0x50de <_ZN3RTC4zeitEv+0x3a>
			Minuten = 0;
    50c4:	19 8a       	std	Y+17, r1	; 0x11
			Stunden++;
    50c6:	88 89       	ldd	r24, Y+16	; 0x10
    50c8:	8f 5f       	subi	r24, 0xFF	; 255
			if(Stunden >= 24){
    50ca:	88 31       	cpi	r24, 0x18	; 24
    50cc:	10 f4       	brcc	.+4      	; 0x50d2 <_ZN3RTC4zeitEv+0x2e>
		Sekunden = 0;
		Minuten++;
		interupts |= (1<<minuteninterupt);
		if(Minuten >= 60){
			Minuten = 0;
			Stunden++;
    50ce:	88 8b       	std	Y+16, r24	; 0x10
    50d0:	06 c0       	rjmp	.+12     	; 0x50de <_ZN3RTC4zeitEv+0x3a>
			if(Stunden >= 24){
				Stunden = 0;
    50d2:	18 8a       	std	Y+16, r1	; 0x10
				Tag++;
    50d4:	8c 89       	ldd	r24, Y+20	; 0x14
    50d6:	8f 5f       	subi	r24, 0xFF	; 255
    50d8:	8c 8b       	std	Y+20, r24	; 0x14
				kalender();
    50da:	ce 01       	movw	r24, r28
    50dc:	9f df       	rcall	.-194    	; 0x501c <_ZN3RTC8kalenderEv>
			}
		}
		Wecker();
    50de:	ce 01       	movw	r24, r28
    50e0:	f5 de       	rcall	.-534    	; 0x4ecc <_ZN3RTC6WeckerEv>
	}
	ausgabezeitneu();
    50e2:	ce 01       	movw	r24, r28
    50e4:	04 df       	rcall	.-504    	; 0x4eee <_ZN3RTC14ausgabezeitneuEv>
	return 0;
}
    50e6:	80 e0       	ldi	r24, 0x00	; 0
    50e8:	df 91       	pop	r29
    50ea:	cf 91       	pop	r28
    50ec:	08 95       	ret

000050ee <_ZN3RTC10dummyeinstEv>:
	msg_dat[4]='0'+Monat%10;
	msg_dat[6]='0'+Jahr/10;
	msg_dat[7]='0'+Jahr%10;
}

void RTC::dummyeinst(){
    50ee:	cf 93       	push	r28
    50f0:	df 93       	push	r29
    50f2:	ec 01       	movw	r28, r24
	Stunden=10;
    50f4:	8a e0       	ldi	r24, 0x0A	; 10
    50f6:	88 8b       	std	Y+16, r24	; 0x10
	Minuten=30;
    50f8:	8e e1       	ldi	r24, 0x1E	; 30
    50fa:	89 8b       	std	Y+17, r24	; 0x11
	Tag=7;
    50fc:	87 e0       	ldi	r24, 0x07	; 7
    50fe:	8c 8b       	std	Y+20, r24	; 0x14
	Monat=9;
    5100:	89 e0       	ldi	r24, 0x09	; 9
    5102:	8e 8b       	std	Y+22, r24	; 0x16
	Jahr=15;
    5104:	8f e0       	ldi	r24, 0x0F	; 15
    5106:	8f 8b       	std	Y+23, r24	; 0x17
	ausgabedatumneu();
    5108:	ce 01       	movw	r24, r28
    510a:	2a df       	rcall	.-428    	; 0x4f60 <_ZN3RTC15ausgabedatumneuEv>
	ausgabezeitneu();
    510c:	ce 01       	movw	r24, r28
    510e:	ef de       	rcall	.-546    	; 0x4eee <_ZN3RTC14ausgabezeitneuEv>
}
    5110:	df 91       	pop	r29
    5112:	cf 91       	pop	r28
    5114:	08 95       	ret

00005116 <_ZN3RTC8RTCstartEv>:

void RTC::RTCstart(){
    5116:	fc 01       	movw	r30, r24
	//Einstellungen des Ausgabebuffers
	msg_uhr[0]='0';
    5118:	80 e3       	ldi	r24, 0x30	; 48
    511a:	80 83       	st	Z, r24
	msg_uhr[1]='0';
    511c:	81 83       	std	Z+1, r24	; 0x01
	msg_uhr[2]=':';
    511e:	9a e3       	ldi	r25, 0x3A	; 58
    5120:	92 83       	std	Z+2, r25	; 0x02
	msg_uhr[3]='0';
    5122:	83 83       	std	Z+3, r24	; 0x03
	msg_uhr[4]='0';
    5124:	84 83       	std	Z+4, r24	; 0x04
	msg_uhr[5]=':';
    5126:	95 83       	std	Z+5, r25	; 0x05
	msg_uhr[6]='0';
    5128:	86 83       	std	Z+6, r24	; 0x06
	msg_uhr[7]='0';
    512a:	87 83       	std	Z+7, r24	; 0x07
	//Timer2 als 1ms Timer fuer die RTC
	//asynchron mit 32.768 kHz (noch synchrom)
	TCNT2 = TIMER2RTCTIME;
    512c:	10 92 b2 00 	sts	0x00B2, r1
	ASSR |= (1<<AS2);
    5130:	e6 eb       	ldi	r30, 0xB6	; 182
    5132:	f0 e0       	ldi	r31, 0x00	; 0
    5134:	80 81       	ld	r24, Z
    5136:	80 62       	ori	r24, 0x20	; 32
    5138:	80 83       	st	Z, r24
	TIMSK2 = (1<<TOIE2);
    513a:	81 e0       	ldi	r24, 0x01	; 1
    513c:	80 93 70 00 	sts	0x0070, r24
	TCCR2B = (1<<CS22) | (1<<CS20);		//Vorteiler 256
    5140:	85 e0       	ldi	r24, 0x05	; 5
    5142:	80 93 b1 00 	sts	0x00B1, r24
    5146:	08 95       	ret

00005148 <_ZN3RTC7RTCstopEv>:
}

void RTC::RTCstop(){
	TCCR2B &= ~((1<<CS22) | (1<<CS21));
    5148:	e1 eb       	ldi	r30, 0xB1	; 177
    514a:	f0 e0       	ldi	r31, 0x00	; 0
    514c:	80 81       	ld	r24, Z
    514e:	89 7f       	andi	r24, 0xF9	; 249
    5150:	80 83       	st	Z, r24
    5152:	08 95       	ret

00005154 <_ZN3RTC5timerEv>:
}

uint8_t RTC::timer(){
    5154:	fc 01       	movw	r30, r24
	if (Sekunden>60)
    5156:	82 89       	ldd	r24, Z+18	; 0x12
    5158:	8d 33       	cpi	r24, 0x3D	; 61
    515a:	b8 f0       	brcs	.+46     	; 0x518a <_ZN3RTC5timerEv+0x36>
	{
		Sekunden=59;
    515c:	8b e3       	ldi	r24, 0x3B	; 59
    515e:	82 8b       	std	Z+18, r24	; 0x12
		Minuten--;
    5160:	81 89       	ldd	r24, Z+17	; 0x11
    5162:	81 50       	subi	r24, 0x01	; 1
		if (Minuten>60)
    5164:	8d 33       	cpi	r24, 0x3D	; 61
    5166:	18 f4       	brcc	.+6      	; 0x516e <_ZN3RTC5timerEv+0x1a>

uint8_t RTC::timer(){
	if (Sekunden>60)
	{
		Sekunden=59;
		Minuten--;
    5168:	81 8b       	std	Z+17, r24	; 0x11
				Sekunden=0;
				return 1;
			}
		}
	}
	return 0;
    516a:	80 e0       	ldi	r24, 0x00	; 0
    516c:	08 95       	ret
	{
		Sekunden=59;
		Minuten--;
		if (Minuten>60)
		{
			Minuten=59;
    516e:	8b e3       	ldi	r24, 0x3B	; 59
    5170:	81 8b       	std	Z+17, r24	; 0x11
			Stunden--;
    5172:	80 89       	ldd	r24, Z+16	; 0x10
    5174:	81 50       	subi	r24, 0x01	; 1
			if (Stunden>24)
    5176:	89 31       	cpi	r24, 0x19	; 25
    5178:	18 f4       	brcc	.+6      	; 0x5180 <_ZN3RTC5timerEv+0x2c>
		Sekunden=59;
		Minuten--;
		if (Minuten>60)
		{
			Minuten=59;
			Stunden--;
    517a:	80 8b       	std	Z+16, r24	; 0x10
				Sekunden=0;
				return 1;
			}
		}
	}
	return 0;
    517c:	80 e0       	ldi	r24, 0x00	; 0
    517e:	08 95       	ret
		{
			Minuten=59;
			Stunden--;
			if (Stunden>24)
			{
				Stunden=0;
    5180:	10 8a       	std	Z+16, r1	; 0x10
				Minuten=0;
    5182:	11 8a       	std	Z+17, r1	; 0x11
				Sekunden=0;
    5184:	12 8a       	std	Z+18, r1	; 0x12
				return 1;
    5186:	81 e0       	ldi	r24, 0x01	; 1
    5188:	08 95       	ret
			}
		}
	}
	return 0;
    518a:	80 e0       	ldi	r24, 0x00	; 0
}
    518c:	08 95       	ret

0000518e <__subsf3>:
    518e:	50 58       	subi	r21, 0x80	; 128

00005190 <__addsf3>:
    5190:	bb 27       	eor	r27, r27
    5192:	aa 27       	eor	r26, r26
    5194:	0e d0       	rcall	.+28     	; 0x51b2 <__addsf3x>
    5196:	27 c2       	rjmp	.+1102   	; 0x55e6 <__fp_round>
    5198:	f0 d1       	rcall	.+992    	; 0x557a <__fp_pscA>
    519a:	30 f0       	brcs	.+12     	; 0x51a8 <__addsf3+0x18>
    519c:	f5 d1       	rcall	.+1002   	; 0x5588 <__fp_pscB>
    519e:	20 f0       	brcs	.+8      	; 0x51a8 <__addsf3+0x18>
    51a0:	31 f4       	brne	.+12     	; 0x51ae <__addsf3+0x1e>
    51a2:	9f 3f       	cpi	r25, 0xFF	; 255
    51a4:	11 f4       	brne	.+4      	; 0x51aa <__addsf3+0x1a>
    51a6:	1e f4       	brtc	.+6      	; 0x51ae <__addsf3+0x1e>
    51a8:	c0 c1       	rjmp	.+896    	; 0x552a <__fp_nan>
    51aa:	0e f4       	brtc	.+2      	; 0x51ae <__addsf3+0x1e>
    51ac:	e0 95       	com	r30
    51ae:	e7 fb       	bst	r30, 7
    51b0:	b6 c1       	rjmp	.+876    	; 0x551e <__fp_inf>

000051b2 <__addsf3x>:
    51b2:	e9 2f       	mov	r30, r25
    51b4:	3a d2       	rcall	.+1140   	; 0x562a <__fp_split3>
    51b6:	80 f3       	brcs	.-32     	; 0x5198 <__addsf3+0x8>
    51b8:	ba 17       	cp	r27, r26
    51ba:	62 07       	cpc	r22, r18
    51bc:	73 07       	cpc	r23, r19
    51be:	84 07       	cpc	r24, r20
    51c0:	95 07       	cpc	r25, r21
    51c2:	18 f0       	brcs	.+6      	; 0x51ca <__addsf3x+0x18>
    51c4:	71 f4       	brne	.+28     	; 0x51e2 <__addsf3x+0x30>
    51c6:	9e f5       	brtc	.+102    	; 0x522e <__addsf3x+0x7c>
    51c8:	52 c2       	rjmp	.+1188   	; 0x566e <__fp_zero>
    51ca:	0e f4       	brtc	.+2      	; 0x51ce <__addsf3x+0x1c>
    51cc:	e0 95       	com	r30
    51ce:	0b 2e       	mov	r0, r27
    51d0:	ba 2f       	mov	r27, r26
    51d2:	a0 2d       	mov	r26, r0
    51d4:	0b 01       	movw	r0, r22
    51d6:	b9 01       	movw	r22, r18
    51d8:	90 01       	movw	r18, r0
    51da:	0c 01       	movw	r0, r24
    51dc:	ca 01       	movw	r24, r20
    51de:	a0 01       	movw	r20, r0
    51e0:	11 24       	eor	r1, r1
    51e2:	ff 27       	eor	r31, r31
    51e4:	59 1b       	sub	r21, r25
    51e6:	99 f0       	breq	.+38     	; 0x520e <__addsf3x+0x5c>
    51e8:	59 3f       	cpi	r21, 0xF9	; 249
    51ea:	50 f4       	brcc	.+20     	; 0x5200 <__addsf3x+0x4e>
    51ec:	50 3e       	cpi	r21, 0xE0	; 224
    51ee:	68 f1       	brcs	.+90     	; 0x524a <__addsf3x+0x98>
    51f0:	1a 16       	cp	r1, r26
    51f2:	f0 40       	sbci	r31, 0x00	; 0
    51f4:	a2 2f       	mov	r26, r18
    51f6:	23 2f       	mov	r18, r19
    51f8:	34 2f       	mov	r19, r20
    51fa:	44 27       	eor	r20, r20
    51fc:	58 5f       	subi	r21, 0xF8	; 248
    51fe:	f3 cf       	rjmp	.-26     	; 0x51e6 <__addsf3x+0x34>
    5200:	46 95       	lsr	r20
    5202:	37 95       	ror	r19
    5204:	27 95       	ror	r18
    5206:	a7 95       	ror	r26
    5208:	f0 40       	sbci	r31, 0x00	; 0
    520a:	53 95       	inc	r21
    520c:	c9 f7       	brne	.-14     	; 0x5200 <__addsf3x+0x4e>
    520e:	7e f4       	brtc	.+30     	; 0x522e <__addsf3x+0x7c>
    5210:	1f 16       	cp	r1, r31
    5212:	ba 0b       	sbc	r27, r26
    5214:	62 0b       	sbc	r22, r18
    5216:	73 0b       	sbc	r23, r19
    5218:	84 0b       	sbc	r24, r20
    521a:	ba f0       	brmi	.+46     	; 0x524a <__addsf3x+0x98>
    521c:	91 50       	subi	r25, 0x01	; 1
    521e:	a1 f0       	breq	.+40     	; 0x5248 <__addsf3x+0x96>
    5220:	ff 0f       	add	r31, r31
    5222:	bb 1f       	adc	r27, r27
    5224:	66 1f       	adc	r22, r22
    5226:	77 1f       	adc	r23, r23
    5228:	88 1f       	adc	r24, r24
    522a:	c2 f7       	brpl	.-16     	; 0x521c <__addsf3x+0x6a>
    522c:	0e c0       	rjmp	.+28     	; 0x524a <__addsf3x+0x98>
    522e:	ba 0f       	add	r27, r26
    5230:	62 1f       	adc	r22, r18
    5232:	73 1f       	adc	r23, r19
    5234:	84 1f       	adc	r24, r20
    5236:	48 f4       	brcc	.+18     	; 0x524a <__addsf3x+0x98>
    5238:	87 95       	ror	r24
    523a:	77 95       	ror	r23
    523c:	67 95       	ror	r22
    523e:	b7 95       	ror	r27
    5240:	f7 95       	ror	r31
    5242:	9e 3f       	cpi	r25, 0xFE	; 254
    5244:	08 f0       	brcs	.+2      	; 0x5248 <__addsf3x+0x96>
    5246:	b3 cf       	rjmp	.-154    	; 0x51ae <__addsf3+0x1e>
    5248:	93 95       	inc	r25
    524a:	88 0f       	add	r24, r24
    524c:	08 f0       	brcs	.+2      	; 0x5250 <__addsf3x+0x9e>
    524e:	99 27       	eor	r25, r25
    5250:	ee 0f       	add	r30, r30
    5252:	97 95       	ror	r25
    5254:	87 95       	ror	r24
    5256:	08 95       	ret
    5258:	90 d1       	rcall	.+800    	; 0x557a <__fp_pscA>
    525a:	58 f0       	brcs	.+22     	; 0x5272 <__addsf3x+0xc0>
    525c:	80 e8       	ldi	r24, 0x80	; 128
    525e:	91 e0       	ldi	r25, 0x01	; 1
    5260:	09 f4       	brne	.+2      	; 0x5264 <__addsf3x+0xb2>
    5262:	9e ef       	ldi	r25, 0xFE	; 254
    5264:	91 d1       	rcall	.+802    	; 0x5588 <__fp_pscB>
    5266:	28 f0       	brcs	.+10     	; 0x5272 <__addsf3x+0xc0>
    5268:	40 e8       	ldi	r20, 0x80	; 128
    526a:	51 e0       	ldi	r21, 0x01	; 1
    526c:	59 f4       	brne	.+22     	; 0x5284 <atan2+0xe>
    526e:	5e ef       	ldi	r21, 0xFE	; 254
    5270:	09 c0       	rjmp	.+18     	; 0x5284 <atan2+0xe>
    5272:	5b c1       	rjmp	.+694    	; 0x552a <__fp_nan>
    5274:	fc c1       	rjmp	.+1016   	; 0x566e <__fp_zero>

00005276 <atan2>:
    5276:	e9 2f       	mov	r30, r25
    5278:	e0 78       	andi	r30, 0x80	; 128
    527a:	d7 d1       	rcall	.+942    	; 0x562a <__fp_split3>
    527c:	68 f3       	brcs	.-38     	; 0x5258 <__addsf3x+0xa6>
    527e:	09 2e       	mov	r0, r25
    5280:	05 2a       	or	r0, r21
    5282:	c1 f3       	breq	.-16     	; 0x5274 <__addsf3x+0xc2>
    5284:	26 17       	cp	r18, r22
    5286:	37 07       	cpc	r19, r23
    5288:	48 07       	cpc	r20, r24
    528a:	59 07       	cpc	r21, r25
    528c:	38 f0       	brcs	.+14     	; 0x529c <atan2+0x26>
    528e:	0e 2e       	mov	r0, r30
    5290:	07 f8       	bld	r0, 7
    5292:	e0 25       	eor	r30, r0
    5294:	69 f0       	breq	.+26     	; 0x52b0 <atan2+0x3a>
    5296:	e0 25       	eor	r30, r0
    5298:	e0 64       	ori	r30, 0x40	; 64
    529a:	0a c0       	rjmp	.+20     	; 0x52b0 <atan2+0x3a>
    529c:	ef 63       	ori	r30, 0x3F	; 63
    529e:	07 f8       	bld	r0, 7
    52a0:	00 94       	com	r0
    52a2:	07 fa       	bst	r0, 7
    52a4:	db 01       	movw	r26, r22
    52a6:	b9 01       	movw	r22, r18
    52a8:	9d 01       	movw	r18, r26
    52aa:	dc 01       	movw	r26, r24
    52ac:	ca 01       	movw	r24, r20
    52ae:	ad 01       	movw	r20, r26
    52b0:	ef 93       	push	r30
    52b2:	4a d0       	rcall	.+148    	; 0x5348 <__divsf3_pse>
    52b4:	98 d1       	rcall	.+816    	; 0x55e6 <__fp_round>
    52b6:	0a d0       	rcall	.+20     	; 0x52cc <atan>
    52b8:	5f 91       	pop	r21
    52ba:	55 23       	and	r21, r21
    52bc:	31 f0       	breq	.+12     	; 0x52ca <atan2+0x54>
    52be:	2b ed       	ldi	r18, 0xDB	; 219
    52c0:	3f e0       	ldi	r19, 0x0F	; 15
    52c2:	49 e4       	ldi	r20, 0x49	; 73
    52c4:	50 fd       	sbrc	r21, 0
    52c6:	49 ec       	ldi	r20, 0xC9	; 201
    52c8:	63 cf       	rjmp	.-314    	; 0x5190 <__addsf3>
    52ca:	08 95       	ret

000052cc <atan>:
    52cc:	df 93       	push	r29
    52ce:	dd 27       	eor	r29, r29
    52d0:	b9 2f       	mov	r27, r25
    52d2:	bf 77       	andi	r27, 0x7F	; 127
    52d4:	40 e8       	ldi	r20, 0x80	; 128
    52d6:	5f e3       	ldi	r21, 0x3F	; 63
    52d8:	16 16       	cp	r1, r22
    52da:	17 06       	cpc	r1, r23
    52dc:	48 07       	cpc	r20, r24
    52de:	5b 07       	cpc	r21, r27
    52e0:	10 f4       	brcc	.+4      	; 0x52e6 <atan+0x1a>
    52e2:	d9 2f       	mov	r29, r25
    52e4:	cf d1       	rcall	.+926    	; 0x5684 <inverse>
    52e6:	9f 93       	push	r25
    52e8:	8f 93       	push	r24
    52ea:	7f 93       	push	r23
    52ec:	6f 93       	push	r22
    52ee:	7f d2       	rcall	.+1278   	; 0x57ee <square>
    52f0:	ee eb       	ldi	r30, 0xBE	; 190
    52f2:	f0 e0       	ldi	r31, 0x00	; 0
    52f4:	1d d1       	rcall	.+570    	; 0x5530 <__fp_powser>
    52f6:	77 d1       	rcall	.+750    	; 0x55e6 <__fp_round>
    52f8:	2f 91       	pop	r18
    52fa:	3f 91       	pop	r19
    52fc:	4f 91       	pop	r20
    52fe:	5f 91       	pop	r21
    5300:	19 d2       	rcall	.+1074   	; 0x5734 <__mulsf3x>
    5302:	dd 23       	and	r29, r29
    5304:	49 f0       	breq	.+18     	; 0x5318 <atan+0x4c>
    5306:	90 58       	subi	r25, 0x80	; 128
    5308:	a2 ea       	ldi	r26, 0xA2	; 162
    530a:	2a ed       	ldi	r18, 0xDA	; 218
    530c:	3f e0       	ldi	r19, 0x0F	; 15
    530e:	49 ec       	ldi	r20, 0xC9	; 201
    5310:	5f e3       	ldi	r21, 0x3F	; 63
    5312:	d0 78       	andi	r29, 0x80	; 128
    5314:	5d 27       	eor	r21, r29
    5316:	4d df       	rcall	.-358    	; 0x51b2 <__addsf3x>
    5318:	df 91       	pop	r29
    531a:	65 c1       	rjmp	.+714    	; 0x55e6 <__fp_round>

0000531c <__cmpsf2>:
    531c:	dc d0       	rcall	.+440    	; 0x54d6 <__fp_cmp>
    531e:	08 f4       	brcc	.+2      	; 0x5322 <__cmpsf2+0x6>
    5320:	81 e0       	ldi	r24, 0x01	; 1
    5322:	08 95       	ret

00005324 <cos>:
    5324:	39 d1       	rcall	.+626    	; 0x5598 <__fp_rempio2>
    5326:	e3 95       	inc	r30
    5328:	6f c1       	rjmp	.+734    	; 0x5608 <__fp_sinus>

0000532a <__divsf3>:
    532a:	0c d0       	rcall	.+24     	; 0x5344 <__divsf3x>
    532c:	5c c1       	rjmp	.+696    	; 0x55e6 <__fp_round>
    532e:	2c d1       	rcall	.+600    	; 0x5588 <__fp_pscB>
    5330:	40 f0       	brcs	.+16     	; 0x5342 <__divsf3+0x18>
    5332:	23 d1       	rcall	.+582    	; 0x557a <__fp_pscA>
    5334:	30 f0       	brcs	.+12     	; 0x5342 <__divsf3+0x18>
    5336:	21 f4       	brne	.+8      	; 0x5340 <__divsf3+0x16>
    5338:	5f 3f       	cpi	r21, 0xFF	; 255
    533a:	19 f0       	breq	.+6      	; 0x5342 <__divsf3+0x18>
    533c:	f0 c0       	rjmp	.+480    	; 0x551e <__fp_inf>
    533e:	51 11       	cpse	r21, r1
    5340:	97 c1       	rjmp	.+814    	; 0x5670 <__fp_szero>
    5342:	f3 c0       	rjmp	.+486    	; 0x552a <__fp_nan>

00005344 <__divsf3x>:
    5344:	72 d1       	rcall	.+740    	; 0x562a <__fp_split3>
    5346:	98 f3       	brcs	.-26     	; 0x532e <__divsf3+0x4>

00005348 <__divsf3_pse>:
    5348:	99 23       	and	r25, r25
    534a:	c9 f3       	breq	.-14     	; 0x533e <__divsf3+0x14>
    534c:	55 23       	and	r21, r21
    534e:	b1 f3       	breq	.-20     	; 0x533c <__divsf3+0x12>
    5350:	95 1b       	sub	r25, r21
    5352:	55 0b       	sbc	r21, r21
    5354:	bb 27       	eor	r27, r27
    5356:	aa 27       	eor	r26, r26
    5358:	62 17       	cp	r22, r18
    535a:	73 07       	cpc	r23, r19
    535c:	84 07       	cpc	r24, r20
    535e:	38 f0       	brcs	.+14     	; 0x536e <__divsf3_pse+0x26>
    5360:	9f 5f       	subi	r25, 0xFF	; 255
    5362:	5f 4f       	sbci	r21, 0xFF	; 255
    5364:	22 0f       	add	r18, r18
    5366:	33 1f       	adc	r19, r19
    5368:	44 1f       	adc	r20, r20
    536a:	aa 1f       	adc	r26, r26
    536c:	a9 f3       	breq	.-22     	; 0x5358 <__divsf3_pse+0x10>
    536e:	33 d0       	rcall	.+102    	; 0x53d6 <__divsf3_pse+0x8e>
    5370:	0e 2e       	mov	r0, r30
    5372:	3a f0       	brmi	.+14     	; 0x5382 <__divsf3_pse+0x3a>
    5374:	e0 e8       	ldi	r30, 0x80	; 128
    5376:	30 d0       	rcall	.+96     	; 0x53d8 <__divsf3_pse+0x90>
    5378:	91 50       	subi	r25, 0x01	; 1
    537a:	50 40       	sbci	r21, 0x00	; 0
    537c:	e6 95       	lsr	r30
    537e:	00 1c       	adc	r0, r0
    5380:	ca f7       	brpl	.-14     	; 0x5374 <__divsf3_pse+0x2c>
    5382:	29 d0       	rcall	.+82     	; 0x53d6 <__divsf3_pse+0x8e>
    5384:	fe 2f       	mov	r31, r30
    5386:	27 d0       	rcall	.+78     	; 0x53d6 <__divsf3_pse+0x8e>
    5388:	66 0f       	add	r22, r22
    538a:	77 1f       	adc	r23, r23
    538c:	88 1f       	adc	r24, r24
    538e:	bb 1f       	adc	r27, r27
    5390:	26 17       	cp	r18, r22
    5392:	37 07       	cpc	r19, r23
    5394:	48 07       	cpc	r20, r24
    5396:	ab 07       	cpc	r26, r27
    5398:	b0 e8       	ldi	r27, 0x80	; 128
    539a:	09 f0       	breq	.+2      	; 0x539e <__divsf3_pse+0x56>
    539c:	bb 0b       	sbc	r27, r27
    539e:	80 2d       	mov	r24, r0
    53a0:	bf 01       	movw	r22, r30
    53a2:	ff 27       	eor	r31, r31
    53a4:	93 58       	subi	r25, 0x83	; 131
    53a6:	5f 4f       	sbci	r21, 0xFF	; 255
    53a8:	2a f0       	brmi	.+10     	; 0x53b4 <__divsf3_pse+0x6c>
    53aa:	9e 3f       	cpi	r25, 0xFE	; 254
    53ac:	51 05       	cpc	r21, r1
    53ae:	68 f0       	brcs	.+26     	; 0x53ca <__divsf3_pse+0x82>
    53b0:	b6 c0       	rjmp	.+364    	; 0x551e <__fp_inf>
    53b2:	5e c1       	rjmp	.+700    	; 0x5670 <__fp_szero>
    53b4:	5f 3f       	cpi	r21, 0xFF	; 255
    53b6:	ec f3       	brlt	.-6      	; 0x53b2 <__divsf3_pse+0x6a>
    53b8:	98 3e       	cpi	r25, 0xE8	; 232
    53ba:	dc f3       	brlt	.-10     	; 0x53b2 <__divsf3_pse+0x6a>
    53bc:	86 95       	lsr	r24
    53be:	77 95       	ror	r23
    53c0:	67 95       	ror	r22
    53c2:	b7 95       	ror	r27
    53c4:	f7 95       	ror	r31
    53c6:	9f 5f       	subi	r25, 0xFF	; 255
    53c8:	c9 f7       	brne	.-14     	; 0x53bc <__divsf3_pse+0x74>
    53ca:	88 0f       	add	r24, r24
    53cc:	91 1d       	adc	r25, r1
    53ce:	96 95       	lsr	r25
    53d0:	87 95       	ror	r24
    53d2:	97 f9       	bld	r25, 7
    53d4:	08 95       	ret
    53d6:	e1 e0       	ldi	r30, 0x01	; 1
    53d8:	66 0f       	add	r22, r22
    53da:	77 1f       	adc	r23, r23
    53dc:	88 1f       	adc	r24, r24
    53de:	bb 1f       	adc	r27, r27
    53e0:	62 17       	cp	r22, r18
    53e2:	73 07       	cpc	r23, r19
    53e4:	84 07       	cpc	r24, r20
    53e6:	ba 07       	cpc	r27, r26
    53e8:	20 f0       	brcs	.+8      	; 0x53f2 <__divsf3_pse+0xaa>
    53ea:	62 1b       	sub	r22, r18
    53ec:	73 0b       	sbc	r23, r19
    53ee:	84 0b       	sbc	r24, r20
    53f0:	ba 0b       	sbc	r27, r26
    53f2:	ee 1f       	adc	r30, r30
    53f4:	88 f7       	brcc	.-30     	; 0x53d8 <__divsf3_pse+0x90>
    53f6:	e0 95       	com	r30
    53f8:	08 95       	ret

000053fa <__fixsfsi>:
    53fa:	04 d0       	rcall	.+8      	; 0x5404 <__fixunssfsi>
    53fc:	68 94       	set
    53fe:	b1 11       	cpse	r27, r1
    5400:	37 c1       	rjmp	.+622    	; 0x5670 <__fp_szero>
    5402:	08 95       	ret

00005404 <__fixunssfsi>:
    5404:	1a d1       	rcall	.+564    	; 0x563a <__fp_splitA>
    5406:	88 f0       	brcs	.+34     	; 0x542a <__fixunssfsi+0x26>
    5408:	9f 57       	subi	r25, 0x7F	; 127
    540a:	90 f0       	brcs	.+36     	; 0x5430 <__fixunssfsi+0x2c>
    540c:	b9 2f       	mov	r27, r25
    540e:	99 27       	eor	r25, r25
    5410:	b7 51       	subi	r27, 0x17	; 23
    5412:	a0 f0       	brcs	.+40     	; 0x543c <__fixunssfsi+0x38>
    5414:	d1 f0       	breq	.+52     	; 0x544a <__fixunssfsi+0x46>
    5416:	66 0f       	add	r22, r22
    5418:	77 1f       	adc	r23, r23
    541a:	88 1f       	adc	r24, r24
    541c:	99 1f       	adc	r25, r25
    541e:	1a f0       	brmi	.+6      	; 0x5426 <__fixunssfsi+0x22>
    5420:	ba 95       	dec	r27
    5422:	c9 f7       	brne	.-14     	; 0x5416 <__fixunssfsi+0x12>
    5424:	12 c0       	rjmp	.+36     	; 0x544a <__fixunssfsi+0x46>
    5426:	b1 30       	cpi	r27, 0x01	; 1
    5428:	81 f0       	breq	.+32     	; 0x544a <__fixunssfsi+0x46>
    542a:	21 d1       	rcall	.+578    	; 0x566e <__fp_zero>
    542c:	b1 e0       	ldi	r27, 0x01	; 1
    542e:	08 95       	ret
    5430:	1e c1       	rjmp	.+572    	; 0x566e <__fp_zero>
    5432:	67 2f       	mov	r22, r23
    5434:	78 2f       	mov	r23, r24
    5436:	88 27       	eor	r24, r24
    5438:	b8 5f       	subi	r27, 0xF8	; 248
    543a:	39 f0       	breq	.+14     	; 0x544a <__fixunssfsi+0x46>
    543c:	b9 3f       	cpi	r27, 0xF9	; 249
    543e:	cc f3       	brlt	.-14     	; 0x5432 <__fixunssfsi+0x2e>
    5440:	86 95       	lsr	r24
    5442:	77 95       	ror	r23
    5444:	67 95       	ror	r22
    5446:	b3 95       	inc	r27
    5448:	d9 f7       	brne	.-10     	; 0x5440 <__fixunssfsi+0x3c>
    544a:	3e f4       	brtc	.+14     	; 0x545a <__fixunssfsi+0x56>
    544c:	90 95       	com	r25
    544e:	80 95       	com	r24
    5450:	70 95       	com	r23
    5452:	61 95       	neg	r22
    5454:	7f 4f       	sbci	r23, 0xFF	; 255
    5456:	8f 4f       	sbci	r24, 0xFF	; 255
    5458:	9f 4f       	sbci	r25, 0xFF	; 255
    545a:	08 95       	ret

0000545c <__floatunsisf>:
    545c:	e8 94       	clt
    545e:	09 c0       	rjmp	.+18     	; 0x5472 <__floatsisf+0x12>

00005460 <__floatsisf>:
    5460:	97 fb       	bst	r25, 7
    5462:	3e f4       	brtc	.+14     	; 0x5472 <__floatsisf+0x12>
    5464:	90 95       	com	r25
    5466:	80 95       	com	r24
    5468:	70 95       	com	r23
    546a:	61 95       	neg	r22
    546c:	7f 4f       	sbci	r23, 0xFF	; 255
    546e:	8f 4f       	sbci	r24, 0xFF	; 255
    5470:	9f 4f       	sbci	r25, 0xFF	; 255
    5472:	99 23       	and	r25, r25
    5474:	a9 f0       	breq	.+42     	; 0x54a0 <__floatsisf+0x40>
    5476:	f9 2f       	mov	r31, r25
    5478:	96 e9       	ldi	r25, 0x96	; 150
    547a:	bb 27       	eor	r27, r27
    547c:	93 95       	inc	r25
    547e:	f6 95       	lsr	r31
    5480:	87 95       	ror	r24
    5482:	77 95       	ror	r23
    5484:	67 95       	ror	r22
    5486:	b7 95       	ror	r27
    5488:	f1 11       	cpse	r31, r1
    548a:	f8 cf       	rjmp	.-16     	; 0x547c <__floatsisf+0x1c>
    548c:	fa f4       	brpl	.+62     	; 0x54cc <__floatsisf+0x6c>
    548e:	bb 0f       	add	r27, r27
    5490:	11 f4       	brne	.+4      	; 0x5496 <__floatsisf+0x36>
    5492:	60 ff       	sbrs	r22, 0
    5494:	1b c0       	rjmp	.+54     	; 0x54cc <__floatsisf+0x6c>
    5496:	6f 5f       	subi	r22, 0xFF	; 255
    5498:	7f 4f       	sbci	r23, 0xFF	; 255
    549a:	8f 4f       	sbci	r24, 0xFF	; 255
    549c:	9f 4f       	sbci	r25, 0xFF	; 255
    549e:	16 c0       	rjmp	.+44     	; 0x54cc <__floatsisf+0x6c>
    54a0:	88 23       	and	r24, r24
    54a2:	11 f0       	breq	.+4      	; 0x54a8 <__floatsisf+0x48>
    54a4:	96 e9       	ldi	r25, 0x96	; 150
    54a6:	11 c0       	rjmp	.+34     	; 0x54ca <__floatsisf+0x6a>
    54a8:	77 23       	and	r23, r23
    54aa:	21 f0       	breq	.+8      	; 0x54b4 <__floatsisf+0x54>
    54ac:	9e e8       	ldi	r25, 0x8E	; 142
    54ae:	87 2f       	mov	r24, r23
    54b0:	76 2f       	mov	r23, r22
    54b2:	05 c0       	rjmp	.+10     	; 0x54be <__floatsisf+0x5e>
    54b4:	66 23       	and	r22, r22
    54b6:	71 f0       	breq	.+28     	; 0x54d4 <__floatsisf+0x74>
    54b8:	96 e8       	ldi	r25, 0x86	; 134
    54ba:	86 2f       	mov	r24, r22
    54bc:	70 e0       	ldi	r23, 0x00	; 0
    54be:	60 e0       	ldi	r22, 0x00	; 0
    54c0:	2a f0       	brmi	.+10     	; 0x54cc <__floatsisf+0x6c>
    54c2:	9a 95       	dec	r25
    54c4:	66 0f       	add	r22, r22
    54c6:	77 1f       	adc	r23, r23
    54c8:	88 1f       	adc	r24, r24
    54ca:	da f7       	brpl	.-10     	; 0x54c2 <__floatsisf+0x62>
    54cc:	88 0f       	add	r24, r24
    54ce:	96 95       	lsr	r25
    54d0:	87 95       	ror	r24
    54d2:	97 f9       	bld	r25, 7
    54d4:	08 95       	ret

000054d6 <__fp_cmp>:
    54d6:	99 0f       	add	r25, r25
    54d8:	00 08       	sbc	r0, r0
    54da:	55 0f       	add	r21, r21
    54dc:	aa 0b       	sbc	r26, r26
    54de:	e0 e8       	ldi	r30, 0x80	; 128
    54e0:	fe ef       	ldi	r31, 0xFE	; 254
    54e2:	16 16       	cp	r1, r22
    54e4:	17 06       	cpc	r1, r23
    54e6:	e8 07       	cpc	r30, r24
    54e8:	f9 07       	cpc	r31, r25
    54ea:	c0 f0       	brcs	.+48     	; 0x551c <__fp_cmp+0x46>
    54ec:	12 16       	cp	r1, r18
    54ee:	13 06       	cpc	r1, r19
    54f0:	e4 07       	cpc	r30, r20
    54f2:	f5 07       	cpc	r31, r21
    54f4:	98 f0       	brcs	.+38     	; 0x551c <__fp_cmp+0x46>
    54f6:	62 1b       	sub	r22, r18
    54f8:	73 0b       	sbc	r23, r19
    54fa:	84 0b       	sbc	r24, r20
    54fc:	95 0b       	sbc	r25, r21
    54fe:	39 f4       	brne	.+14     	; 0x550e <__fp_cmp+0x38>
    5500:	0a 26       	eor	r0, r26
    5502:	61 f0       	breq	.+24     	; 0x551c <__fp_cmp+0x46>
    5504:	23 2b       	or	r18, r19
    5506:	24 2b       	or	r18, r20
    5508:	25 2b       	or	r18, r21
    550a:	21 f4       	brne	.+8      	; 0x5514 <__fp_cmp+0x3e>
    550c:	08 95       	ret
    550e:	0a 26       	eor	r0, r26
    5510:	09 f4       	brne	.+2      	; 0x5514 <__fp_cmp+0x3e>
    5512:	a1 40       	sbci	r26, 0x01	; 1
    5514:	a6 95       	lsr	r26
    5516:	8f ef       	ldi	r24, 0xFF	; 255
    5518:	81 1d       	adc	r24, r1
    551a:	81 1d       	adc	r24, r1
    551c:	08 95       	ret

0000551e <__fp_inf>:
    551e:	97 f9       	bld	r25, 7
    5520:	9f 67       	ori	r25, 0x7F	; 127
    5522:	80 e8       	ldi	r24, 0x80	; 128
    5524:	70 e0       	ldi	r23, 0x00	; 0
    5526:	60 e0       	ldi	r22, 0x00	; 0
    5528:	08 95       	ret

0000552a <__fp_nan>:
    552a:	9f ef       	ldi	r25, 0xFF	; 255
    552c:	80 ec       	ldi	r24, 0xC0	; 192
    552e:	08 95       	ret

00005530 <__fp_powser>:
    5530:	df 93       	push	r29
    5532:	cf 93       	push	r28
    5534:	1f 93       	push	r17
    5536:	0f 93       	push	r16
    5538:	ff 92       	push	r15
    553a:	ef 92       	push	r14
    553c:	df 92       	push	r13
    553e:	7b 01       	movw	r14, r22
    5540:	8c 01       	movw	r16, r24
    5542:	68 94       	set
    5544:	05 c0       	rjmp	.+10     	; 0x5550 <__fp_powser+0x20>
    5546:	da 2e       	mov	r13, r26
    5548:	ef 01       	movw	r28, r30
    554a:	f4 d0       	rcall	.+488    	; 0x5734 <__mulsf3x>
    554c:	fe 01       	movw	r30, r28
    554e:	e8 94       	clt
    5550:	a5 91       	lpm	r26, Z+
    5552:	25 91       	lpm	r18, Z+
    5554:	35 91       	lpm	r19, Z+
    5556:	45 91       	lpm	r20, Z+
    5558:	55 91       	lpm	r21, Z+
    555a:	ae f3       	brts	.-22     	; 0x5546 <__fp_powser+0x16>
    555c:	ef 01       	movw	r28, r30
    555e:	29 de       	rcall	.-942    	; 0x51b2 <__addsf3x>
    5560:	fe 01       	movw	r30, r28
    5562:	97 01       	movw	r18, r14
    5564:	a8 01       	movw	r20, r16
    5566:	da 94       	dec	r13
    5568:	79 f7       	brne	.-34     	; 0x5548 <__fp_powser+0x18>
    556a:	df 90       	pop	r13
    556c:	ef 90       	pop	r14
    556e:	ff 90       	pop	r15
    5570:	0f 91       	pop	r16
    5572:	1f 91       	pop	r17
    5574:	cf 91       	pop	r28
    5576:	df 91       	pop	r29
    5578:	08 95       	ret

0000557a <__fp_pscA>:
    557a:	00 24       	eor	r0, r0
    557c:	0a 94       	dec	r0
    557e:	16 16       	cp	r1, r22
    5580:	17 06       	cpc	r1, r23
    5582:	18 06       	cpc	r1, r24
    5584:	09 06       	cpc	r0, r25
    5586:	08 95       	ret

00005588 <__fp_pscB>:
    5588:	00 24       	eor	r0, r0
    558a:	0a 94       	dec	r0
    558c:	12 16       	cp	r1, r18
    558e:	13 06       	cpc	r1, r19
    5590:	14 06       	cpc	r1, r20
    5592:	05 06       	cpc	r0, r21
    5594:	08 95       	ret
    5596:	c9 cf       	rjmp	.-110    	; 0x552a <__fp_nan>

00005598 <__fp_rempio2>:
    5598:	50 d0       	rcall	.+160    	; 0x563a <__fp_splitA>
    559a:	e8 f3       	brcs	.-6      	; 0x5596 <__fp_pscB+0xe>
    559c:	e8 94       	clt
    559e:	e0 e0       	ldi	r30, 0x00	; 0
    55a0:	bb 27       	eor	r27, r27
    55a2:	9f 57       	subi	r25, 0x7F	; 127
    55a4:	f0 f0       	brcs	.+60     	; 0x55e2 <__fp_rempio2+0x4a>
    55a6:	2a ed       	ldi	r18, 0xDA	; 218
    55a8:	3f e0       	ldi	r19, 0x0F	; 15
    55aa:	49 ec       	ldi	r20, 0xC9	; 201
    55ac:	06 c0       	rjmp	.+12     	; 0x55ba <__fp_rempio2+0x22>
    55ae:	ee 0f       	add	r30, r30
    55b0:	bb 0f       	add	r27, r27
    55b2:	66 1f       	adc	r22, r22
    55b4:	77 1f       	adc	r23, r23
    55b6:	88 1f       	adc	r24, r24
    55b8:	28 f0       	brcs	.+10     	; 0x55c4 <__fp_rempio2+0x2c>
    55ba:	b2 3a       	cpi	r27, 0xA2	; 162
    55bc:	62 07       	cpc	r22, r18
    55be:	73 07       	cpc	r23, r19
    55c0:	84 07       	cpc	r24, r20
    55c2:	28 f0       	brcs	.+10     	; 0x55ce <__fp_rempio2+0x36>
    55c4:	b2 5a       	subi	r27, 0xA2	; 162
    55c6:	62 0b       	sbc	r22, r18
    55c8:	73 0b       	sbc	r23, r19
    55ca:	84 0b       	sbc	r24, r20
    55cc:	e3 95       	inc	r30
    55ce:	9a 95       	dec	r25
    55d0:	72 f7       	brpl	.-36     	; 0x55ae <__fp_rempio2+0x16>
    55d2:	80 38       	cpi	r24, 0x80	; 128
    55d4:	30 f4       	brcc	.+12     	; 0x55e2 <__fp_rempio2+0x4a>
    55d6:	9a 95       	dec	r25
    55d8:	bb 0f       	add	r27, r27
    55da:	66 1f       	adc	r22, r22
    55dc:	77 1f       	adc	r23, r23
    55de:	88 1f       	adc	r24, r24
    55e0:	d2 f7       	brpl	.-12     	; 0x55d6 <__fp_rempio2+0x3e>
    55e2:	90 48       	sbci	r25, 0x80	; 128
    55e4:	29 c1       	rjmp	.+594    	; 0x5838 <__fp_mpack_finite>

000055e6 <__fp_round>:
    55e6:	09 2e       	mov	r0, r25
    55e8:	03 94       	inc	r0
    55ea:	00 0c       	add	r0, r0
    55ec:	11 f4       	brne	.+4      	; 0x55f2 <__fp_round+0xc>
    55ee:	88 23       	and	r24, r24
    55f0:	52 f0       	brmi	.+20     	; 0x5606 <__fp_round+0x20>
    55f2:	bb 0f       	add	r27, r27
    55f4:	40 f4       	brcc	.+16     	; 0x5606 <__fp_round+0x20>
    55f6:	bf 2b       	or	r27, r31
    55f8:	11 f4       	brne	.+4      	; 0x55fe <__fp_round+0x18>
    55fa:	60 ff       	sbrs	r22, 0
    55fc:	04 c0       	rjmp	.+8      	; 0x5606 <__fp_round+0x20>
    55fe:	6f 5f       	subi	r22, 0xFF	; 255
    5600:	7f 4f       	sbci	r23, 0xFF	; 255
    5602:	8f 4f       	sbci	r24, 0xFF	; 255
    5604:	9f 4f       	sbci	r25, 0xFF	; 255
    5606:	08 95       	ret

00005608 <__fp_sinus>:
    5608:	ef 93       	push	r30
    560a:	e0 ff       	sbrs	r30, 0
    560c:	06 c0       	rjmp	.+12     	; 0x561a <__fp_sinus+0x12>
    560e:	a2 ea       	ldi	r26, 0xA2	; 162
    5610:	2a ed       	ldi	r18, 0xDA	; 218
    5612:	3f e0       	ldi	r19, 0x0F	; 15
    5614:	49 ec       	ldi	r20, 0xC9	; 201
    5616:	5f eb       	ldi	r21, 0xBF	; 191
    5618:	cc dd       	rcall	.-1128   	; 0x51b2 <__addsf3x>
    561a:	e5 df       	rcall	.-54     	; 0x55e6 <__fp_round>
    561c:	0f 90       	pop	r0
    561e:	03 94       	inc	r0
    5620:	01 fc       	sbrc	r0, 1
    5622:	90 58       	subi	r25, 0x80	; 128
    5624:	eb ee       	ldi	r30, 0xEB	; 235
    5626:	f0 e0       	ldi	r31, 0x00	; 0
    5628:	13 c1       	rjmp	.+550    	; 0x5850 <__fp_powsodd>

0000562a <__fp_split3>:
    562a:	57 fd       	sbrc	r21, 7
    562c:	90 58       	subi	r25, 0x80	; 128
    562e:	44 0f       	add	r20, r20
    5630:	55 1f       	adc	r21, r21
    5632:	59 f0       	breq	.+22     	; 0x564a <__fp_splitA+0x10>
    5634:	5f 3f       	cpi	r21, 0xFF	; 255
    5636:	71 f0       	breq	.+28     	; 0x5654 <__fp_splitA+0x1a>
    5638:	47 95       	ror	r20

0000563a <__fp_splitA>:
    563a:	88 0f       	add	r24, r24
    563c:	97 fb       	bst	r25, 7
    563e:	99 1f       	adc	r25, r25
    5640:	61 f0       	breq	.+24     	; 0x565a <__fp_splitA+0x20>
    5642:	9f 3f       	cpi	r25, 0xFF	; 255
    5644:	79 f0       	breq	.+30     	; 0x5664 <__fp_splitA+0x2a>
    5646:	87 95       	ror	r24
    5648:	08 95       	ret
    564a:	12 16       	cp	r1, r18
    564c:	13 06       	cpc	r1, r19
    564e:	14 06       	cpc	r1, r20
    5650:	55 1f       	adc	r21, r21
    5652:	f2 cf       	rjmp	.-28     	; 0x5638 <__fp_split3+0xe>
    5654:	46 95       	lsr	r20
    5656:	f1 df       	rcall	.-30     	; 0x563a <__fp_splitA>
    5658:	08 c0       	rjmp	.+16     	; 0x566a <__fp_splitA+0x30>
    565a:	16 16       	cp	r1, r22
    565c:	17 06       	cpc	r1, r23
    565e:	18 06       	cpc	r1, r24
    5660:	99 1f       	adc	r25, r25
    5662:	f1 cf       	rjmp	.-30     	; 0x5646 <__fp_splitA+0xc>
    5664:	86 95       	lsr	r24
    5666:	71 05       	cpc	r23, r1
    5668:	61 05       	cpc	r22, r1
    566a:	08 94       	sec
    566c:	08 95       	ret

0000566e <__fp_zero>:
    566e:	e8 94       	clt

00005670 <__fp_szero>:
    5670:	bb 27       	eor	r27, r27
    5672:	66 27       	eor	r22, r22
    5674:	77 27       	eor	r23, r23
    5676:	cb 01       	movw	r24, r22
    5678:	97 f9       	bld	r25, 7
    567a:	08 95       	ret

0000567c <__gesf2>:
    567c:	2c df       	rcall	.-424    	; 0x54d6 <__fp_cmp>
    567e:	08 f4       	brcc	.+2      	; 0x5682 <__gesf2+0x6>
    5680:	8f ef       	ldi	r24, 0xFF	; 255
    5682:	08 95       	ret

00005684 <inverse>:
    5684:	9b 01       	movw	r18, r22
    5686:	ac 01       	movw	r20, r24
    5688:	60 e0       	ldi	r22, 0x00	; 0
    568a:	70 e0       	ldi	r23, 0x00	; 0
    568c:	80 e8       	ldi	r24, 0x80	; 128
    568e:	9f e3       	ldi	r25, 0x3F	; 63
    5690:	4c ce       	rjmp	.-872    	; 0x532a <__divsf3>
    5692:	0e f0       	brts	.+2      	; 0x5696 <inverse+0x12>
    5694:	cf c0       	rjmp	.+414    	; 0x5834 <__fp_mpack>
    5696:	49 cf       	rjmp	.-366    	; 0x552a <__fp_nan>
    5698:	68 94       	set
    569a:	41 cf       	rjmp	.-382    	; 0x551e <__fp_inf>

0000569c <log>:
    569c:	ce df       	rcall	.-100    	; 0x563a <__fp_splitA>
    569e:	c8 f3       	brcs	.-14     	; 0x5692 <inverse+0xe>
    56a0:	99 23       	and	r25, r25
    56a2:	d1 f3       	breq	.-12     	; 0x5698 <inverse+0x14>
    56a4:	c6 f3       	brts	.-16     	; 0x5696 <inverse+0x12>
    56a6:	df 93       	push	r29
    56a8:	cf 93       	push	r28
    56aa:	1f 93       	push	r17
    56ac:	0f 93       	push	r16
    56ae:	ff 92       	push	r15
    56b0:	c9 2f       	mov	r28, r25
    56b2:	dd 27       	eor	r29, r29
    56b4:	88 23       	and	r24, r24
    56b6:	2a f0       	brmi	.+10     	; 0x56c2 <log+0x26>
    56b8:	21 97       	sbiw	r28, 0x01	; 1
    56ba:	66 0f       	add	r22, r22
    56bc:	77 1f       	adc	r23, r23
    56be:	88 1f       	adc	r24, r24
    56c0:	da f7       	brpl	.-10     	; 0x56b8 <log+0x1c>
    56c2:	20 e0       	ldi	r18, 0x00	; 0
    56c4:	30 e0       	ldi	r19, 0x00	; 0
    56c6:	40 e8       	ldi	r20, 0x80	; 128
    56c8:	5f eb       	ldi	r21, 0xBF	; 191
    56ca:	9f e3       	ldi	r25, 0x3F	; 63
    56cc:	88 39       	cpi	r24, 0x98	; 152
    56ce:	20 f0       	brcs	.+8      	; 0x56d8 <log+0x3c>
    56d0:	80 3e       	cpi	r24, 0xE0	; 224
    56d2:	30 f0       	brcs	.+12     	; 0x56e0 <log+0x44>
    56d4:	21 96       	adiw	r28, 0x01	; 1
    56d6:	8f 77       	andi	r24, 0x7F	; 127
    56d8:	5b dd       	rcall	.-1354   	; 0x5190 <__addsf3>
    56da:	e9 e0       	ldi	r30, 0x09	; 9
    56dc:	f1 e0       	ldi	r31, 0x01	; 1
    56de:	03 c0       	rjmp	.+6      	; 0x56e6 <log+0x4a>
    56e0:	57 dd       	rcall	.-1362   	; 0x5190 <__addsf3>
    56e2:	e6 e3       	ldi	r30, 0x36	; 54
    56e4:	f1 e0       	ldi	r31, 0x01	; 1
    56e6:	24 df       	rcall	.-440    	; 0x5530 <__fp_powser>
    56e8:	8b 01       	movw	r16, r22
    56ea:	be 01       	movw	r22, r28
    56ec:	ec 01       	movw	r28, r24
    56ee:	fb 2e       	mov	r15, r27
    56f0:	6f 57       	subi	r22, 0x7F	; 127
    56f2:	71 09       	sbc	r23, r1
    56f4:	75 95       	asr	r23
    56f6:	77 1f       	adc	r23, r23
    56f8:	88 0b       	sbc	r24, r24
    56fa:	99 0b       	sbc	r25, r25
    56fc:	b1 de       	rcall	.-670    	; 0x5460 <__floatsisf>
    56fe:	28 e1       	ldi	r18, 0x18	; 24
    5700:	32 e7       	ldi	r19, 0x72	; 114
    5702:	41 e3       	ldi	r20, 0x31	; 49
    5704:	5f e3       	ldi	r21, 0x3F	; 63
    5706:	16 d0       	rcall	.+44     	; 0x5734 <__mulsf3x>
    5708:	af 2d       	mov	r26, r15
    570a:	98 01       	movw	r18, r16
    570c:	ae 01       	movw	r20, r28
    570e:	ff 90       	pop	r15
    5710:	0f 91       	pop	r16
    5712:	1f 91       	pop	r17
    5714:	cf 91       	pop	r28
    5716:	df 91       	pop	r29
    5718:	4c dd       	rcall	.-1384   	; 0x51b2 <__addsf3x>
    571a:	65 cf       	rjmp	.-310    	; 0x55e6 <__fp_round>

0000571c <__mulsf3>:
    571c:	0b d0       	rcall	.+22     	; 0x5734 <__mulsf3x>
    571e:	63 cf       	rjmp	.-314    	; 0x55e6 <__fp_round>
    5720:	2c df       	rcall	.-424    	; 0x557a <__fp_pscA>
    5722:	28 f0       	brcs	.+10     	; 0x572e <__mulsf3+0x12>
    5724:	31 df       	rcall	.-414    	; 0x5588 <__fp_pscB>
    5726:	18 f0       	brcs	.+6      	; 0x572e <__mulsf3+0x12>
    5728:	95 23       	and	r25, r21
    572a:	09 f0       	breq	.+2      	; 0x572e <__mulsf3+0x12>
    572c:	f8 ce       	rjmp	.-528    	; 0x551e <__fp_inf>
    572e:	fd ce       	rjmp	.-518    	; 0x552a <__fp_nan>
    5730:	11 24       	eor	r1, r1
    5732:	9e cf       	rjmp	.-196    	; 0x5670 <__fp_szero>

00005734 <__mulsf3x>:
    5734:	7a df       	rcall	.-268    	; 0x562a <__fp_split3>
    5736:	a0 f3       	brcs	.-24     	; 0x5720 <__mulsf3+0x4>

00005738 <__mulsf3_pse>:
    5738:	95 9f       	mul	r25, r21
    573a:	d1 f3       	breq	.-12     	; 0x5730 <__mulsf3+0x14>
    573c:	95 0f       	add	r25, r21
    573e:	50 e0       	ldi	r21, 0x00	; 0
    5740:	55 1f       	adc	r21, r21
    5742:	62 9f       	mul	r22, r18
    5744:	f0 01       	movw	r30, r0
    5746:	72 9f       	mul	r23, r18
    5748:	bb 27       	eor	r27, r27
    574a:	f0 0d       	add	r31, r0
    574c:	b1 1d       	adc	r27, r1
    574e:	63 9f       	mul	r22, r19
    5750:	aa 27       	eor	r26, r26
    5752:	f0 0d       	add	r31, r0
    5754:	b1 1d       	adc	r27, r1
    5756:	aa 1f       	adc	r26, r26
    5758:	64 9f       	mul	r22, r20
    575a:	66 27       	eor	r22, r22
    575c:	b0 0d       	add	r27, r0
    575e:	a1 1d       	adc	r26, r1
    5760:	66 1f       	adc	r22, r22
    5762:	82 9f       	mul	r24, r18
    5764:	22 27       	eor	r18, r18
    5766:	b0 0d       	add	r27, r0
    5768:	a1 1d       	adc	r26, r1
    576a:	62 1f       	adc	r22, r18
    576c:	73 9f       	mul	r23, r19
    576e:	b0 0d       	add	r27, r0
    5770:	a1 1d       	adc	r26, r1
    5772:	62 1f       	adc	r22, r18
    5774:	83 9f       	mul	r24, r19
    5776:	a0 0d       	add	r26, r0
    5778:	61 1d       	adc	r22, r1
    577a:	22 1f       	adc	r18, r18
    577c:	74 9f       	mul	r23, r20
    577e:	33 27       	eor	r19, r19
    5780:	a0 0d       	add	r26, r0
    5782:	61 1d       	adc	r22, r1
    5784:	23 1f       	adc	r18, r19
    5786:	84 9f       	mul	r24, r20
    5788:	60 0d       	add	r22, r0
    578a:	21 1d       	adc	r18, r1
    578c:	82 2f       	mov	r24, r18
    578e:	76 2f       	mov	r23, r22
    5790:	6a 2f       	mov	r22, r26
    5792:	11 24       	eor	r1, r1
    5794:	9f 57       	subi	r25, 0x7F	; 127
    5796:	50 40       	sbci	r21, 0x00	; 0
    5798:	8a f0       	brmi	.+34     	; 0x57bc <__mulsf3_pse+0x84>
    579a:	e1 f0       	breq	.+56     	; 0x57d4 <__mulsf3_pse+0x9c>
    579c:	88 23       	and	r24, r24
    579e:	4a f0       	brmi	.+18     	; 0x57b2 <__mulsf3_pse+0x7a>
    57a0:	ee 0f       	add	r30, r30
    57a2:	ff 1f       	adc	r31, r31
    57a4:	bb 1f       	adc	r27, r27
    57a6:	66 1f       	adc	r22, r22
    57a8:	77 1f       	adc	r23, r23
    57aa:	88 1f       	adc	r24, r24
    57ac:	91 50       	subi	r25, 0x01	; 1
    57ae:	50 40       	sbci	r21, 0x00	; 0
    57b0:	a9 f7       	brne	.-22     	; 0x579c <__mulsf3_pse+0x64>
    57b2:	9e 3f       	cpi	r25, 0xFE	; 254
    57b4:	51 05       	cpc	r21, r1
    57b6:	70 f0       	brcs	.+28     	; 0x57d4 <__mulsf3_pse+0x9c>
    57b8:	b2 ce       	rjmp	.-668    	; 0x551e <__fp_inf>
    57ba:	5a cf       	rjmp	.-332    	; 0x5670 <__fp_szero>
    57bc:	5f 3f       	cpi	r21, 0xFF	; 255
    57be:	ec f3       	brlt	.-6      	; 0x57ba <__mulsf3_pse+0x82>
    57c0:	98 3e       	cpi	r25, 0xE8	; 232
    57c2:	dc f3       	brlt	.-10     	; 0x57ba <__mulsf3_pse+0x82>
    57c4:	86 95       	lsr	r24
    57c6:	77 95       	ror	r23
    57c8:	67 95       	ror	r22
    57ca:	b7 95       	ror	r27
    57cc:	f7 95       	ror	r31
    57ce:	e7 95       	ror	r30
    57d0:	9f 5f       	subi	r25, 0xFF	; 255
    57d2:	c1 f7       	brne	.-16     	; 0x57c4 <__mulsf3_pse+0x8c>
    57d4:	fe 2b       	or	r31, r30
    57d6:	88 0f       	add	r24, r24
    57d8:	91 1d       	adc	r25, r1
    57da:	96 95       	lsr	r25
    57dc:	87 95       	ror	r24
    57de:	97 f9       	bld	r25, 7
    57e0:	08 95       	ret

000057e2 <sin>:
    57e2:	9f 93       	push	r25
    57e4:	d9 de       	rcall	.-590    	; 0x5598 <__fp_rempio2>
    57e6:	0f 90       	pop	r0
    57e8:	07 fc       	sbrc	r0, 7
    57ea:	ee 5f       	subi	r30, 0xFE	; 254
    57ec:	0d cf       	rjmp	.-486    	; 0x5608 <__fp_sinus>

000057ee <square>:
    57ee:	9b 01       	movw	r18, r22
    57f0:	ac 01       	movw	r20, r24
    57f2:	94 cf       	rjmp	.-216    	; 0x571c <__mulsf3>

000057f4 <tan>:
    57f4:	df 93       	push	r29
    57f6:	d9 2f       	mov	r29, r25
    57f8:	cf de       	rcall	.-610    	; 0x5598 <__fp_rempio2>
    57fa:	e6 95       	lsr	r30
    57fc:	d7 95       	ror	r29
    57fe:	2a ed       	ldi	r18, 0xDA	; 218
    5800:	3f e0       	ldi	r19, 0x0F	; 15
    5802:	49 e4       	ldi	r20, 0x49	; 73
    5804:	5f e3       	ldi	r21, 0x3F	; 63
    5806:	b3 3a       	cpi	r27, 0xA3	; 163
    5808:	62 07       	cpc	r22, r18
    580a:	73 07       	cpc	r23, r19
    580c:	84 07       	cpc	r24, r20
    580e:	95 07       	cpc	r25, r21
    5810:	d7 95       	ror	r29
    5812:	2a f0       	brmi	.+10     	; 0x581e <tan+0x2a>
    5814:	a2 ea       	ldi	r26, 0xA2	; 162
    5816:	49 ec       	ldi	r20, 0xC9	; 201
    5818:	90 68       	ori	r25, 0x80	; 128
    581a:	cb dc       	rcall	.-1642   	; 0x51b2 <__addsf3x>
    581c:	e4 de       	rcall	.-568    	; 0x55e6 <__fp_round>
    581e:	e3 e6       	ldi	r30, 0x63	; 99
    5820:	f1 e0       	ldi	r31, 0x01	; 1
    5822:	16 d0       	rcall	.+44     	; 0x5850 <__fp_powsodd>
    5824:	dd 0f       	add	r29, r29
    5826:	0b f0       	brvs	.+2      	; 0x582a <tan+0x36>
    5828:	2d df       	rcall	.-422    	; 0x5684 <inverse>
    582a:	dd 0f       	add	r29, r29
    582c:	0b f4       	brvc	.+2      	; 0x5830 <tan+0x3c>
    582e:	90 58       	subi	r25, 0x80	; 128
    5830:	df 91       	pop	r29
    5832:	08 95       	ret

00005834 <__fp_mpack>:
    5834:	9f 3f       	cpi	r25, 0xFF	; 255
    5836:	31 f0       	breq	.+12     	; 0x5844 <__fp_mpack_finite+0xc>

00005838 <__fp_mpack_finite>:
    5838:	91 50       	subi	r25, 0x01	; 1
    583a:	20 f4       	brcc	.+8      	; 0x5844 <__fp_mpack_finite+0xc>
    583c:	87 95       	ror	r24
    583e:	77 95       	ror	r23
    5840:	67 95       	ror	r22
    5842:	b7 95       	ror	r27
    5844:	88 0f       	add	r24, r24
    5846:	91 1d       	adc	r25, r1
    5848:	96 95       	lsr	r25
    584a:	87 95       	ror	r24
    584c:	97 f9       	bld	r25, 7
    584e:	08 95       	ret

00005850 <__fp_powsodd>:
    5850:	9f 93       	push	r25
    5852:	8f 93       	push	r24
    5854:	7f 93       	push	r23
    5856:	6f 93       	push	r22
    5858:	ff 93       	push	r31
    585a:	ef 93       	push	r30
    585c:	9b 01       	movw	r18, r22
    585e:	ac 01       	movw	r20, r24
    5860:	5d df       	rcall	.-326    	; 0x571c <__mulsf3>
    5862:	ef 91       	pop	r30
    5864:	ff 91       	pop	r31
    5866:	64 de       	rcall	.-824    	; 0x5530 <__fp_powser>
    5868:	2f 91       	pop	r18
    586a:	3f 91       	pop	r19
    586c:	4f 91       	pop	r20
    586e:	5f 91       	pop	r21
    5870:	55 cf       	rjmp	.-342    	; 0x571c <__mulsf3>

00005872 <vfprintf>:
    5872:	2f 92       	push	r2
    5874:	3f 92       	push	r3
    5876:	4f 92       	push	r4
    5878:	5f 92       	push	r5
    587a:	6f 92       	push	r6
    587c:	7f 92       	push	r7
    587e:	8f 92       	push	r8
    5880:	9f 92       	push	r9
    5882:	af 92       	push	r10
    5884:	bf 92       	push	r11
    5886:	cf 92       	push	r12
    5888:	df 92       	push	r13
    588a:	ef 92       	push	r14
    588c:	ff 92       	push	r15
    588e:	0f 93       	push	r16
    5890:	1f 93       	push	r17
    5892:	cf 93       	push	r28
    5894:	df 93       	push	r29
    5896:	cd b7       	in	r28, 0x3d	; 61
    5898:	de b7       	in	r29, 0x3e	; 62
    589a:	63 97       	sbiw	r28, 0x13	; 19
    589c:	0f b6       	in	r0, 0x3f	; 63
    589e:	f8 94       	cli
    58a0:	de bf       	out	0x3e, r29	; 62
    58a2:	0f be       	out	0x3f, r0	; 63
    58a4:	cd bf       	out	0x3d, r28	; 61
    58a6:	7c 01       	movw	r14, r24
    58a8:	1b 01       	movw	r2, r22
    58aa:	6a 01       	movw	r12, r20
    58ac:	fc 01       	movw	r30, r24
    58ae:	17 82       	std	Z+7, r1	; 0x07
    58b0:	16 82       	std	Z+6, r1	; 0x06
    58b2:	83 81       	ldd	r24, Z+3	; 0x03
    58b4:	81 ff       	sbrs	r24, 1
    58b6:	49 c3       	rjmp	.+1682   	; 0x5f4a <vfprintf+0x6d8>
    58b8:	be 01       	movw	r22, r28
    58ba:	6f 5f       	subi	r22, 0xFF	; 255
    58bc:	7f 4f       	sbci	r23, 0xFF	; 255
    58be:	4b 01       	movw	r8, r22
    58c0:	f7 01       	movw	r30, r14
    58c2:	93 81       	ldd	r25, Z+3	; 0x03
    58c4:	f1 01       	movw	r30, r2
    58c6:	93 fd       	sbrc	r25, 3
    58c8:	85 91       	lpm	r24, Z+
    58ca:	93 ff       	sbrs	r25, 3
    58cc:	81 91       	ld	r24, Z+
    58ce:	1f 01       	movw	r2, r30
    58d0:	88 23       	and	r24, r24
    58d2:	09 f4       	brne	.+2      	; 0x58d6 <vfprintf+0x64>
    58d4:	36 c3       	rjmp	.+1644   	; 0x5f42 <vfprintf+0x6d0>
    58d6:	85 32       	cpi	r24, 0x25	; 37
    58d8:	39 f4       	brne	.+14     	; 0x58e8 <vfprintf+0x76>
    58da:	93 fd       	sbrc	r25, 3
    58dc:	85 91       	lpm	r24, Z+
    58de:	93 ff       	sbrs	r25, 3
    58e0:	81 91       	ld	r24, Z+
    58e2:	1f 01       	movw	r2, r30
    58e4:	85 32       	cpi	r24, 0x25	; 37
    58e6:	31 f4       	brne	.+12     	; 0x58f4 <vfprintf+0x82>
    58e8:	b7 01       	movw	r22, r14
    58ea:	90 e0       	ldi	r25, 0x00	; 0
    58ec:	41 d4       	rcall	.+2178   	; 0x6170 <fputc>
    58ee:	56 01       	movw	r10, r12
    58f0:	65 01       	movw	r12, r10
    58f2:	e6 cf       	rjmp	.-52     	; 0x58c0 <vfprintf+0x4e>
    58f4:	10 e0       	ldi	r17, 0x00	; 0
    58f6:	51 2c       	mov	r5, r1
    58f8:	20 e0       	ldi	r18, 0x00	; 0
    58fa:	20 32       	cpi	r18, 0x20	; 32
    58fc:	a0 f4       	brcc	.+40     	; 0x5926 <vfprintf+0xb4>
    58fe:	8b 32       	cpi	r24, 0x2B	; 43
    5900:	69 f0       	breq	.+26     	; 0x591c <vfprintf+0xaa>
    5902:	30 f4       	brcc	.+12     	; 0x5910 <vfprintf+0x9e>
    5904:	80 32       	cpi	r24, 0x20	; 32
    5906:	59 f0       	breq	.+22     	; 0x591e <vfprintf+0xac>
    5908:	83 32       	cpi	r24, 0x23	; 35
    590a:	69 f4       	brne	.+26     	; 0x5926 <vfprintf+0xb4>
    590c:	20 61       	ori	r18, 0x10	; 16
    590e:	2c c0       	rjmp	.+88     	; 0x5968 <vfprintf+0xf6>
    5910:	8d 32       	cpi	r24, 0x2D	; 45
    5912:	39 f0       	breq	.+14     	; 0x5922 <vfprintf+0xb0>
    5914:	80 33       	cpi	r24, 0x30	; 48
    5916:	39 f4       	brne	.+14     	; 0x5926 <vfprintf+0xb4>
    5918:	21 60       	ori	r18, 0x01	; 1
    591a:	26 c0       	rjmp	.+76     	; 0x5968 <vfprintf+0xf6>
    591c:	22 60       	ori	r18, 0x02	; 2
    591e:	24 60       	ori	r18, 0x04	; 4
    5920:	23 c0       	rjmp	.+70     	; 0x5968 <vfprintf+0xf6>
    5922:	28 60       	ori	r18, 0x08	; 8
    5924:	21 c0       	rjmp	.+66     	; 0x5968 <vfprintf+0xf6>
    5926:	27 fd       	sbrc	r18, 7
    5928:	27 c0       	rjmp	.+78     	; 0x5978 <vfprintf+0x106>
    592a:	30 ed       	ldi	r19, 0xD0	; 208
    592c:	38 0f       	add	r19, r24
    592e:	3a 30       	cpi	r19, 0x0A	; 10
    5930:	78 f4       	brcc	.+30     	; 0x5950 <vfprintf+0xde>
    5932:	26 ff       	sbrs	r18, 6
    5934:	06 c0       	rjmp	.+12     	; 0x5942 <vfprintf+0xd0>
    5936:	fa e0       	ldi	r31, 0x0A	; 10
    5938:	1f 9f       	mul	r17, r31
    593a:	30 0d       	add	r19, r0
    593c:	11 24       	eor	r1, r1
    593e:	13 2f       	mov	r17, r19
    5940:	13 c0       	rjmp	.+38     	; 0x5968 <vfprintf+0xf6>
    5942:	6a e0       	ldi	r22, 0x0A	; 10
    5944:	56 9e       	mul	r5, r22
    5946:	30 0d       	add	r19, r0
    5948:	11 24       	eor	r1, r1
    594a:	53 2e       	mov	r5, r19
    594c:	20 62       	ori	r18, 0x20	; 32
    594e:	0c c0       	rjmp	.+24     	; 0x5968 <vfprintf+0xf6>
    5950:	8e 32       	cpi	r24, 0x2E	; 46
    5952:	21 f4       	brne	.+8      	; 0x595c <vfprintf+0xea>
    5954:	26 fd       	sbrc	r18, 6
    5956:	f5 c2       	rjmp	.+1514   	; 0x5f42 <vfprintf+0x6d0>
    5958:	20 64       	ori	r18, 0x40	; 64
    595a:	06 c0       	rjmp	.+12     	; 0x5968 <vfprintf+0xf6>
    595c:	8c 36       	cpi	r24, 0x6C	; 108
    595e:	11 f4       	brne	.+4      	; 0x5964 <vfprintf+0xf2>
    5960:	20 68       	ori	r18, 0x80	; 128
    5962:	02 c0       	rjmp	.+4      	; 0x5968 <vfprintf+0xf6>
    5964:	88 36       	cpi	r24, 0x68	; 104
    5966:	41 f4       	brne	.+16     	; 0x5978 <vfprintf+0x106>
    5968:	f1 01       	movw	r30, r2
    596a:	93 fd       	sbrc	r25, 3
    596c:	85 91       	lpm	r24, Z+
    596e:	93 ff       	sbrs	r25, 3
    5970:	81 91       	ld	r24, Z+
    5972:	1f 01       	movw	r2, r30
    5974:	81 11       	cpse	r24, r1
    5976:	c1 cf       	rjmp	.-126    	; 0x58fa <vfprintf+0x88>
    5978:	9b eb       	ldi	r25, 0xBB	; 187
    597a:	98 0f       	add	r25, r24
    597c:	93 30       	cpi	r25, 0x03	; 3
    597e:	18 f4       	brcc	.+6      	; 0x5986 <vfprintf+0x114>
    5980:	20 61       	ori	r18, 0x10	; 16
    5982:	80 5e       	subi	r24, 0xE0	; 224
    5984:	06 c0       	rjmp	.+12     	; 0x5992 <vfprintf+0x120>
    5986:	9b e9       	ldi	r25, 0x9B	; 155
    5988:	98 0f       	add	r25, r24
    598a:	93 30       	cpi	r25, 0x03	; 3
    598c:	08 f0       	brcs	.+2      	; 0x5990 <vfprintf+0x11e>
    598e:	9a c1       	rjmp	.+820    	; 0x5cc4 <vfprintf+0x452>
    5990:	2f 7e       	andi	r18, 0xEF	; 239
    5992:	26 ff       	sbrs	r18, 6
    5994:	16 e0       	ldi	r17, 0x06	; 6
    5996:	2f 73       	andi	r18, 0x3F	; 63
    5998:	72 2e       	mov	r7, r18
    599a:	85 36       	cpi	r24, 0x65	; 101
    599c:	21 f4       	brne	.+8      	; 0x59a6 <vfprintf+0x134>
    599e:	f2 2f       	mov	r31, r18
    59a0:	f0 64       	ori	r31, 0x40	; 64
    59a2:	7f 2e       	mov	r7, r31
    59a4:	08 c0       	rjmp	.+16     	; 0x59b6 <vfprintf+0x144>
    59a6:	86 36       	cpi	r24, 0x66	; 102
    59a8:	21 f4       	brne	.+8      	; 0x59b2 <vfprintf+0x140>
    59aa:	62 2f       	mov	r22, r18
    59ac:	60 68       	ori	r22, 0x80	; 128
    59ae:	76 2e       	mov	r7, r22
    59b0:	02 c0       	rjmp	.+4      	; 0x59b6 <vfprintf+0x144>
    59b2:	11 11       	cpse	r17, r1
    59b4:	11 50       	subi	r17, 0x01	; 1
    59b6:	77 fe       	sbrs	r7, 7
    59b8:	07 c0       	rjmp	.+14     	; 0x59c8 <vfprintf+0x156>
    59ba:	1c 33       	cpi	r17, 0x3C	; 60
    59bc:	48 f4       	brcc	.+18     	; 0x59d0 <vfprintf+0x15e>
    59be:	44 24       	eor	r4, r4
    59c0:	43 94       	inc	r4
    59c2:	41 0e       	add	r4, r17
    59c4:	27 e0       	ldi	r18, 0x07	; 7
    59c6:	0b c0       	rjmp	.+22     	; 0x59de <vfprintf+0x16c>
    59c8:	18 30       	cpi	r17, 0x08	; 8
    59ca:	30 f4       	brcc	.+12     	; 0x59d8 <vfprintf+0x166>
    59cc:	21 2f       	mov	r18, r17
    59ce:	06 c0       	rjmp	.+12     	; 0x59dc <vfprintf+0x16a>
    59d0:	27 e0       	ldi	r18, 0x07	; 7
    59d2:	4c e3       	ldi	r20, 0x3C	; 60
    59d4:	44 2e       	mov	r4, r20
    59d6:	03 c0       	rjmp	.+6      	; 0x59de <vfprintf+0x16c>
    59d8:	27 e0       	ldi	r18, 0x07	; 7
    59da:	17 e0       	ldi	r17, 0x07	; 7
    59dc:	41 2c       	mov	r4, r1
    59de:	56 01       	movw	r10, r12
    59e0:	74 e0       	ldi	r23, 0x04	; 4
    59e2:	a7 0e       	add	r10, r23
    59e4:	b1 1c       	adc	r11, r1
    59e6:	f6 01       	movw	r30, r12
    59e8:	60 81       	ld	r22, Z
    59ea:	71 81       	ldd	r23, Z+1	; 0x01
    59ec:	82 81       	ldd	r24, Z+2	; 0x02
    59ee:	93 81       	ldd	r25, Z+3	; 0x03
    59f0:	04 2d       	mov	r16, r4
    59f2:	a4 01       	movw	r20, r8
    59f4:	cf d2       	rcall	.+1438   	; 0x5f94 <__ftoa_engine>
    59f6:	6c 01       	movw	r12, r24
    59f8:	09 81       	ldd	r16, Y+1	; 0x01
    59fa:	00 ff       	sbrs	r16, 0
    59fc:	02 c0       	rjmp	.+4      	; 0x5a02 <vfprintf+0x190>
    59fe:	03 ff       	sbrs	r16, 3
    5a00:	06 c0       	rjmp	.+12     	; 0x5a0e <vfprintf+0x19c>
    5a02:	71 fc       	sbrc	r7, 1
    5a04:	07 c0       	rjmp	.+14     	; 0x5a14 <vfprintf+0x1a2>
    5a06:	72 fc       	sbrc	r7, 2
    5a08:	08 c0       	rjmp	.+16     	; 0x5a1a <vfprintf+0x1a8>
    5a0a:	61 2c       	mov	r6, r1
    5a0c:	08 c0       	rjmp	.+16     	; 0x5a1e <vfprintf+0x1ac>
    5a0e:	3d e2       	ldi	r19, 0x2D	; 45
    5a10:	63 2e       	mov	r6, r19
    5a12:	05 c0       	rjmp	.+10     	; 0x5a1e <vfprintf+0x1ac>
    5a14:	2b e2       	ldi	r18, 0x2B	; 43
    5a16:	62 2e       	mov	r6, r18
    5a18:	02 c0       	rjmp	.+4      	; 0x5a1e <vfprintf+0x1ac>
    5a1a:	90 e2       	ldi	r25, 0x20	; 32
    5a1c:	69 2e       	mov	r6, r25
    5a1e:	80 2f       	mov	r24, r16
    5a20:	8c 70       	andi	r24, 0x0C	; 12
    5a22:	81 f1       	breq	.+96     	; 0x5a84 <vfprintf+0x212>
    5a24:	66 20       	and	r6, r6
    5a26:	11 f0       	breq	.+4      	; 0x5a2c <vfprintf+0x1ba>
    5a28:	84 e0       	ldi	r24, 0x04	; 4
    5a2a:	01 c0       	rjmp	.+2      	; 0x5a2e <vfprintf+0x1bc>
    5a2c:	83 e0       	ldi	r24, 0x03	; 3
    5a2e:	85 15       	cp	r24, r5
    5a30:	10 f0       	brcs	.+4      	; 0x5a36 <vfprintf+0x1c4>
    5a32:	51 2c       	mov	r5, r1
    5a34:	0a c0       	rjmp	.+20     	; 0x5a4a <vfprintf+0x1d8>
    5a36:	58 1a       	sub	r5, r24
    5a38:	73 fc       	sbrc	r7, 3
    5a3a:	07 c0       	rjmp	.+14     	; 0x5a4a <vfprintf+0x1d8>
    5a3c:	b7 01       	movw	r22, r14
    5a3e:	80 e2       	ldi	r24, 0x20	; 32
    5a40:	90 e0       	ldi	r25, 0x00	; 0
    5a42:	96 d3       	rcall	.+1836   	; 0x6170 <fputc>
    5a44:	5a 94       	dec	r5
    5a46:	d1 f7       	brne	.-12     	; 0x5a3c <vfprintf+0x1ca>
    5a48:	f4 cf       	rjmp	.-24     	; 0x5a32 <vfprintf+0x1c0>
    5a4a:	66 20       	and	r6, r6
    5a4c:	21 f0       	breq	.+8      	; 0x5a56 <vfprintf+0x1e4>
    5a4e:	b7 01       	movw	r22, r14
    5a50:	86 2d       	mov	r24, r6
    5a52:	90 e0       	ldi	r25, 0x00	; 0
    5a54:	8d d3       	rcall	.+1818   	; 0x6170 <fputc>
    5a56:	03 fd       	sbrc	r16, 3
    5a58:	03 c0       	rjmp	.+6      	; 0x5a60 <vfprintf+0x1ee>
    5a5a:	00 ea       	ldi	r16, 0xA0	; 160
    5a5c:	18 e0       	ldi	r17, 0x08	; 8
    5a5e:	02 c0       	rjmp	.+4      	; 0x5a64 <vfprintf+0x1f2>
    5a60:	0c e9       	ldi	r16, 0x9C	; 156
    5a62:	18 e0       	ldi	r17, 0x08	; 8
    5a64:	f7 2d       	mov	r31, r7
    5a66:	f0 71       	andi	r31, 0x10	; 16
    5a68:	7f 2e       	mov	r7, r31
    5a6a:	f8 01       	movw	r30, r16
    5a6c:	84 91       	lpm	r24, Z
    5a6e:	88 23       	and	r24, r24
    5a70:	09 f4       	brne	.+2      	; 0x5a74 <vfprintf+0x202>
    5a72:	5e c2       	rjmp	.+1212   	; 0x5f30 <vfprintf+0x6be>
    5a74:	71 10       	cpse	r7, r1
    5a76:	80 52       	subi	r24, 0x20	; 32
    5a78:	b7 01       	movw	r22, r14
    5a7a:	90 e0       	ldi	r25, 0x00	; 0
    5a7c:	79 d3       	rcall	.+1778   	; 0x6170 <fputc>
    5a7e:	0f 5f       	subi	r16, 0xFF	; 255
    5a80:	1f 4f       	sbci	r17, 0xFF	; 255
    5a82:	f3 cf       	rjmp	.-26     	; 0x5a6a <vfprintf+0x1f8>
    5a84:	77 fe       	sbrs	r7, 7
    5a86:	0f c0       	rjmp	.+30     	; 0x5aa6 <vfprintf+0x234>
    5a88:	4c 0c       	add	r4, r12
    5a8a:	04 ff       	sbrs	r16, 4
    5a8c:	04 c0       	rjmp	.+8      	; 0x5a96 <vfprintf+0x224>
    5a8e:	8a 81       	ldd	r24, Y+2	; 0x02
    5a90:	81 33       	cpi	r24, 0x31	; 49
    5a92:	09 f4       	brne	.+2      	; 0x5a96 <vfprintf+0x224>
    5a94:	4a 94       	dec	r4
    5a96:	14 14       	cp	r1, r4
    5a98:	74 f5       	brge	.+92     	; 0x5af6 <vfprintf+0x284>
    5a9a:	f8 e0       	ldi	r31, 0x08	; 8
    5a9c:	f4 15       	cp	r31, r4
    5a9e:	78 f5       	brcc	.+94     	; 0x5afe <vfprintf+0x28c>
    5aa0:	88 e0       	ldi	r24, 0x08	; 8
    5aa2:	48 2e       	mov	r4, r24
    5aa4:	2c c0       	rjmp	.+88     	; 0x5afe <vfprintf+0x28c>
    5aa6:	76 fc       	sbrc	r7, 6
    5aa8:	2a c0       	rjmp	.+84     	; 0x5afe <vfprintf+0x28c>
    5aaa:	81 2f       	mov	r24, r17
    5aac:	90 e0       	ldi	r25, 0x00	; 0
    5aae:	8c 15       	cp	r24, r12
    5ab0:	9d 05       	cpc	r25, r13
    5ab2:	9c f0       	brlt	.+38     	; 0x5ada <vfprintf+0x268>
    5ab4:	6c ef       	ldi	r22, 0xFC	; 252
    5ab6:	c6 16       	cp	r12, r22
    5ab8:	6f ef       	ldi	r22, 0xFF	; 255
    5aba:	d6 06       	cpc	r13, r22
    5abc:	74 f0       	brlt	.+28     	; 0x5ada <vfprintf+0x268>
    5abe:	77 2d       	mov	r23, r7
    5ac0:	70 68       	ori	r23, 0x80	; 128
    5ac2:	77 2e       	mov	r7, r23
    5ac4:	0a c0       	rjmp	.+20     	; 0x5ada <vfprintf+0x268>
    5ac6:	e2 e0       	ldi	r30, 0x02	; 2
    5ac8:	f0 e0       	ldi	r31, 0x00	; 0
    5aca:	ec 0f       	add	r30, r28
    5acc:	fd 1f       	adc	r31, r29
    5ace:	e1 0f       	add	r30, r17
    5ad0:	f1 1d       	adc	r31, r1
    5ad2:	80 81       	ld	r24, Z
    5ad4:	80 33       	cpi	r24, 0x30	; 48
    5ad6:	19 f4       	brne	.+6      	; 0x5ade <vfprintf+0x26c>
    5ad8:	11 50       	subi	r17, 0x01	; 1
    5ada:	11 11       	cpse	r17, r1
    5adc:	f4 cf       	rjmp	.-24     	; 0x5ac6 <vfprintf+0x254>
    5ade:	77 fe       	sbrs	r7, 7
    5ae0:	0e c0       	rjmp	.+28     	; 0x5afe <vfprintf+0x28c>
    5ae2:	44 24       	eor	r4, r4
    5ae4:	43 94       	inc	r4
    5ae6:	41 0e       	add	r4, r17
    5ae8:	81 2f       	mov	r24, r17
    5aea:	90 e0       	ldi	r25, 0x00	; 0
    5aec:	c8 16       	cp	r12, r24
    5aee:	d9 06       	cpc	r13, r25
    5af0:	2c f4       	brge	.+10     	; 0x5afc <vfprintf+0x28a>
    5af2:	1c 19       	sub	r17, r12
    5af4:	04 c0       	rjmp	.+8      	; 0x5afe <vfprintf+0x28c>
    5af6:	44 24       	eor	r4, r4
    5af8:	43 94       	inc	r4
    5afa:	01 c0       	rjmp	.+2      	; 0x5afe <vfprintf+0x28c>
    5afc:	10 e0       	ldi	r17, 0x00	; 0
    5afe:	77 fe       	sbrs	r7, 7
    5b00:	07 c0       	rjmp	.+14     	; 0x5b10 <vfprintf+0x29e>
    5b02:	1c 14       	cp	r1, r12
    5b04:	1d 04       	cpc	r1, r13
    5b06:	3c f4       	brge	.+14     	; 0x5b16 <vfprintf+0x2a4>
    5b08:	96 01       	movw	r18, r12
    5b0a:	2f 5f       	subi	r18, 0xFF	; 255
    5b0c:	3f 4f       	sbci	r19, 0xFF	; 255
    5b0e:	05 c0       	rjmp	.+10     	; 0x5b1a <vfprintf+0x2a8>
    5b10:	25 e0       	ldi	r18, 0x05	; 5
    5b12:	30 e0       	ldi	r19, 0x00	; 0
    5b14:	02 c0       	rjmp	.+4      	; 0x5b1a <vfprintf+0x2a8>
    5b16:	21 e0       	ldi	r18, 0x01	; 1
    5b18:	30 e0       	ldi	r19, 0x00	; 0
    5b1a:	66 20       	and	r6, r6
    5b1c:	11 f0       	breq	.+4      	; 0x5b22 <vfprintf+0x2b0>
    5b1e:	2f 5f       	subi	r18, 0xFF	; 255
    5b20:	3f 4f       	sbci	r19, 0xFF	; 255
    5b22:	11 23       	and	r17, r17
    5b24:	31 f0       	breq	.+12     	; 0x5b32 <vfprintf+0x2c0>
    5b26:	41 2f       	mov	r20, r17
    5b28:	50 e0       	ldi	r21, 0x00	; 0
    5b2a:	4f 5f       	subi	r20, 0xFF	; 255
    5b2c:	5f 4f       	sbci	r21, 0xFF	; 255
    5b2e:	24 0f       	add	r18, r20
    5b30:	35 1f       	adc	r19, r21
    5b32:	45 2d       	mov	r20, r5
    5b34:	50 e0       	ldi	r21, 0x00	; 0
    5b36:	24 17       	cp	r18, r20
    5b38:	35 07       	cpc	r19, r21
    5b3a:	14 f4       	brge	.+4      	; 0x5b40 <vfprintf+0x2ce>
    5b3c:	52 1a       	sub	r5, r18
    5b3e:	01 c0       	rjmp	.+2      	; 0x5b42 <vfprintf+0x2d0>
    5b40:	51 2c       	mov	r5, r1
    5b42:	87 2d       	mov	r24, r7
    5b44:	89 70       	andi	r24, 0x09	; 9
    5b46:	41 f4       	brne	.+16     	; 0x5b58 <vfprintf+0x2e6>
    5b48:	55 20       	and	r5, r5
    5b4a:	31 f0       	breq	.+12     	; 0x5b58 <vfprintf+0x2e6>
    5b4c:	b7 01       	movw	r22, r14
    5b4e:	80 e2       	ldi	r24, 0x20	; 32
    5b50:	90 e0       	ldi	r25, 0x00	; 0
    5b52:	0e d3       	rcall	.+1564   	; 0x6170 <fputc>
    5b54:	5a 94       	dec	r5
    5b56:	f8 cf       	rjmp	.-16     	; 0x5b48 <vfprintf+0x2d6>
    5b58:	66 20       	and	r6, r6
    5b5a:	21 f0       	breq	.+8      	; 0x5b64 <vfprintf+0x2f2>
    5b5c:	b7 01       	movw	r22, r14
    5b5e:	86 2d       	mov	r24, r6
    5b60:	90 e0       	ldi	r25, 0x00	; 0
    5b62:	06 d3       	rcall	.+1548   	; 0x6170 <fputc>
    5b64:	73 fc       	sbrc	r7, 3
    5b66:	08 c0       	rjmp	.+16     	; 0x5b78 <vfprintf+0x306>
    5b68:	55 20       	and	r5, r5
    5b6a:	31 f0       	breq	.+12     	; 0x5b78 <vfprintf+0x306>
    5b6c:	b7 01       	movw	r22, r14
    5b6e:	80 e3       	ldi	r24, 0x30	; 48
    5b70:	90 e0       	ldi	r25, 0x00	; 0
    5b72:	fe d2       	rcall	.+1532   	; 0x6170 <fputc>
    5b74:	5a 94       	dec	r5
    5b76:	f8 cf       	rjmp	.-16     	; 0x5b68 <vfprintf+0x2f6>
    5b78:	77 fe       	sbrs	r7, 7
    5b7a:	5d c0       	rjmp	.+186    	; 0x5c36 <vfprintf+0x3c4>
    5b7c:	9c 2d       	mov	r25, r12
    5b7e:	8d 2d       	mov	r24, r13
    5b80:	d7 fe       	sbrs	r13, 7
    5b82:	02 c0       	rjmp	.+4      	; 0x5b88 <vfprintf+0x316>
    5b84:	90 e0       	ldi	r25, 0x00	; 0
    5b86:	80 e0       	ldi	r24, 0x00	; 0
    5b88:	69 2e       	mov	r6, r25
    5b8a:	78 2e       	mov	r7, r24
    5b8c:	40 e0       	ldi	r20, 0x00	; 0
    5b8e:	50 e0       	ldi	r21, 0x00	; 0
    5b90:	c6 01       	movw	r24, r12
    5b92:	84 19       	sub	r24, r4
    5b94:	91 09       	sbc	r25, r1
    5b96:	9d 87       	std	Y+13, r25	; 0x0d
    5b98:	8c 87       	std	Y+12, r24	; 0x0c
    5b9a:	96 01       	movw	r18, r12
    5b9c:	26 19       	sub	r18, r6
    5b9e:	37 09       	sbc	r19, r7
    5ba0:	28 0d       	add	r18, r8
    5ba2:	39 1d       	adc	r19, r9
    5ba4:	81 2f       	mov	r24, r17
    5ba6:	90 e0       	ldi	r25, 0x00	; 0
    5ba8:	ee 27       	eor	r30, r30
    5baa:	ff 27       	eor	r31, r31
    5bac:	e8 1b       	sub	r30, r24
    5bae:	f9 0b       	sbc	r31, r25
    5bb0:	ff 87       	std	Y+15, r31	; 0x0f
    5bb2:	ee 87       	std	Y+14, r30	; 0x0e
    5bb4:	ff ef       	ldi	r31, 0xFF	; 255
    5bb6:	6f 16       	cp	r6, r31
    5bb8:	7f 06       	cpc	r7, r31
    5bba:	61 f4       	brne	.+24     	; 0x5bd4 <vfprintf+0x362>
    5bbc:	b7 01       	movw	r22, r14
    5bbe:	8e e2       	ldi	r24, 0x2E	; 46
    5bc0:	90 e0       	ldi	r25, 0x00	; 0
    5bc2:	2b 8b       	std	Y+19, r18	; 0x13
    5bc4:	3a 8b       	std	Y+18, r19	; 0x12
    5bc6:	48 8b       	std	Y+16, r20	; 0x10
    5bc8:	59 8b       	std	Y+17, r21	; 0x11
    5bca:	d2 d2       	rcall	.+1444   	; 0x6170 <fputc>
    5bcc:	59 89       	ldd	r21, Y+17	; 0x11
    5bce:	48 89       	ldd	r20, Y+16	; 0x10
    5bd0:	3a 89       	ldd	r19, Y+18	; 0x12
    5bd2:	2b 89       	ldd	r18, Y+19	; 0x13
    5bd4:	c6 14       	cp	r12, r6
    5bd6:	d7 04       	cpc	r13, r7
    5bd8:	54 f0       	brlt	.+20     	; 0x5bee <vfprintf+0x37c>
    5bda:	6c 85       	ldd	r22, Y+12	; 0x0c
    5bdc:	7d 85       	ldd	r23, Y+13	; 0x0d
    5bde:	66 15       	cp	r22, r6
    5be0:	77 05       	cpc	r23, r7
    5be2:	2c f4       	brge	.+10     	; 0x5bee <vfprintf+0x37c>
    5be4:	f9 01       	movw	r30, r18
    5be6:	e4 0f       	add	r30, r20
    5be8:	f5 1f       	adc	r31, r21
    5bea:	81 81       	ldd	r24, Z+1	; 0x01
    5bec:	01 c0       	rjmp	.+2      	; 0x5bf0 <vfprintf+0x37e>
    5bee:	80 e3       	ldi	r24, 0x30	; 48
    5bf0:	71 e0       	ldi	r23, 0x01	; 1
    5bf2:	67 1a       	sub	r6, r23
    5bf4:	71 08       	sbc	r7, r1
    5bf6:	4f 5f       	subi	r20, 0xFF	; 255
    5bf8:	5f 4f       	sbci	r21, 0xFF	; 255
    5bfa:	ee 85       	ldd	r30, Y+14	; 0x0e
    5bfc:	ff 85       	ldd	r31, Y+15	; 0x0f
    5bfe:	6e 16       	cp	r6, r30
    5c00:	7f 06       	cpc	r7, r31
    5c02:	64 f0       	brlt	.+24     	; 0x5c1c <vfprintf+0x3aa>
    5c04:	b7 01       	movw	r22, r14
    5c06:	90 e0       	ldi	r25, 0x00	; 0
    5c08:	2b 8b       	std	Y+19, r18	; 0x13
    5c0a:	3a 8b       	std	Y+18, r19	; 0x12
    5c0c:	48 8b       	std	Y+16, r20	; 0x10
    5c0e:	59 8b       	std	Y+17, r21	; 0x11
    5c10:	af d2       	rcall	.+1374   	; 0x6170 <fputc>
    5c12:	2b 89       	ldd	r18, Y+19	; 0x13
    5c14:	3a 89       	ldd	r19, Y+18	; 0x12
    5c16:	48 89       	ldd	r20, Y+16	; 0x10
    5c18:	59 89       	ldd	r21, Y+17	; 0x11
    5c1a:	cc cf       	rjmp	.-104    	; 0x5bb4 <vfprintf+0x342>
    5c1c:	6c 14       	cp	r6, r12
    5c1e:	7d 04       	cpc	r7, r13
    5c20:	39 f4       	brne	.+14     	; 0x5c30 <vfprintf+0x3be>
    5c22:	9a 81       	ldd	r25, Y+2	; 0x02
    5c24:	96 33       	cpi	r25, 0x36	; 54
    5c26:	18 f4       	brcc	.+6      	; 0x5c2e <vfprintf+0x3bc>
    5c28:	95 33       	cpi	r25, 0x35	; 53
    5c2a:	11 f4       	brne	.+4      	; 0x5c30 <vfprintf+0x3be>
    5c2c:	04 ff       	sbrs	r16, 4
    5c2e:	81 e3       	ldi	r24, 0x31	; 49
    5c30:	b7 01       	movw	r22, r14
    5c32:	90 e0       	ldi	r25, 0x00	; 0
    5c34:	45 c0       	rjmp	.+138    	; 0x5cc0 <vfprintf+0x44e>
    5c36:	8a 81       	ldd	r24, Y+2	; 0x02
    5c38:	81 33       	cpi	r24, 0x31	; 49
    5c3a:	09 f0       	breq	.+2      	; 0x5c3e <vfprintf+0x3cc>
    5c3c:	0f 7e       	andi	r16, 0xEF	; 239
    5c3e:	b7 01       	movw	r22, r14
    5c40:	90 e0       	ldi	r25, 0x00	; 0
    5c42:	96 d2       	rcall	.+1324   	; 0x6170 <fputc>
    5c44:	11 11       	cpse	r17, r1
    5c46:	05 c0       	rjmp	.+10     	; 0x5c52 <vfprintf+0x3e0>
    5c48:	74 fe       	sbrs	r7, 4
    5c4a:	16 c0       	rjmp	.+44     	; 0x5c78 <vfprintf+0x406>
    5c4c:	85 e4       	ldi	r24, 0x45	; 69
    5c4e:	90 e0       	ldi	r25, 0x00	; 0
    5c50:	15 c0       	rjmp	.+42     	; 0x5c7c <vfprintf+0x40a>
    5c52:	b7 01       	movw	r22, r14
    5c54:	8e e2       	ldi	r24, 0x2E	; 46
    5c56:	90 e0       	ldi	r25, 0x00	; 0
    5c58:	8b d2       	rcall	.+1302   	; 0x6170 <fputc>
    5c5a:	82 e0       	ldi	r24, 0x02	; 2
    5c5c:	66 24       	eor	r6, r6
    5c5e:	63 94       	inc	r6
    5c60:	68 0e       	add	r6, r24
    5c62:	f4 01       	movw	r30, r8
    5c64:	e8 0f       	add	r30, r24
    5c66:	f1 1d       	adc	r31, r1
    5c68:	80 81       	ld	r24, Z
    5c6a:	b7 01       	movw	r22, r14
    5c6c:	90 e0       	ldi	r25, 0x00	; 0
    5c6e:	80 d2       	rcall	.+1280   	; 0x6170 <fputc>
    5c70:	11 50       	subi	r17, 0x01	; 1
    5c72:	51 f3       	breq	.-44     	; 0x5c48 <vfprintf+0x3d6>
    5c74:	86 2d       	mov	r24, r6
    5c76:	f2 cf       	rjmp	.-28     	; 0x5c5c <vfprintf+0x3ea>
    5c78:	85 e6       	ldi	r24, 0x65	; 101
    5c7a:	90 e0       	ldi	r25, 0x00	; 0
    5c7c:	b7 01       	movw	r22, r14
    5c7e:	78 d2       	rcall	.+1264   	; 0x6170 <fputc>
    5c80:	d7 fc       	sbrc	r13, 7
    5c82:	05 c0       	rjmp	.+10     	; 0x5c8e <vfprintf+0x41c>
    5c84:	c1 14       	cp	r12, r1
    5c86:	d1 04       	cpc	r13, r1
    5c88:	39 f4       	brne	.+14     	; 0x5c98 <vfprintf+0x426>
    5c8a:	04 ff       	sbrs	r16, 4
    5c8c:	05 c0       	rjmp	.+10     	; 0x5c98 <vfprintf+0x426>
    5c8e:	d1 94       	neg	r13
    5c90:	c1 94       	neg	r12
    5c92:	d1 08       	sbc	r13, r1
    5c94:	8d e2       	ldi	r24, 0x2D	; 45
    5c96:	01 c0       	rjmp	.+2      	; 0x5c9a <vfprintf+0x428>
    5c98:	8b e2       	ldi	r24, 0x2B	; 43
    5c9a:	b7 01       	movw	r22, r14
    5c9c:	90 e0       	ldi	r25, 0x00	; 0
    5c9e:	68 d2       	rcall	.+1232   	; 0x6170 <fputc>
    5ca0:	80 e3       	ldi	r24, 0x30	; 48
    5ca2:	6a e0       	ldi	r22, 0x0A	; 10
    5ca4:	c6 16       	cp	r12, r22
    5ca6:	d1 04       	cpc	r13, r1
    5ca8:	2c f0       	brlt	.+10     	; 0x5cb4 <vfprintf+0x442>
    5caa:	8f 5f       	subi	r24, 0xFF	; 255
    5cac:	fa e0       	ldi	r31, 0x0A	; 10
    5cae:	cf 1a       	sub	r12, r31
    5cb0:	d1 08       	sbc	r13, r1
    5cb2:	f7 cf       	rjmp	.-18     	; 0x5ca2 <vfprintf+0x430>
    5cb4:	b7 01       	movw	r22, r14
    5cb6:	90 e0       	ldi	r25, 0x00	; 0
    5cb8:	5b d2       	rcall	.+1206   	; 0x6170 <fputc>
    5cba:	b7 01       	movw	r22, r14
    5cbc:	c6 01       	movw	r24, r12
    5cbe:	c0 96       	adiw	r24, 0x30	; 48
    5cc0:	57 d2       	rcall	.+1198   	; 0x6170 <fputc>
    5cc2:	36 c1       	rjmp	.+620    	; 0x5f30 <vfprintf+0x6be>
    5cc4:	83 36       	cpi	r24, 0x63	; 99
    5cc6:	31 f0       	breq	.+12     	; 0x5cd4 <vfprintf+0x462>
    5cc8:	83 37       	cpi	r24, 0x73	; 115
    5cca:	79 f0       	breq	.+30     	; 0x5cea <vfprintf+0x478>
    5ccc:	83 35       	cpi	r24, 0x53	; 83
    5cce:	09 f0       	breq	.+2      	; 0x5cd2 <vfprintf+0x460>
    5cd0:	54 c0       	rjmp	.+168    	; 0x5d7a <vfprintf+0x508>
    5cd2:	20 c0       	rjmp	.+64     	; 0x5d14 <vfprintf+0x4a2>
    5cd4:	56 01       	movw	r10, r12
    5cd6:	72 e0       	ldi	r23, 0x02	; 2
    5cd8:	a7 0e       	add	r10, r23
    5cda:	b1 1c       	adc	r11, r1
    5cdc:	f6 01       	movw	r30, r12
    5cde:	80 81       	ld	r24, Z
    5ce0:	89 83       	std	Y+1, r24	; 0x01
    5ce2:	01 e0       	ldi	r16, 0x01	; 1
    5ce4:	10 e0       	ldi	r17, 0x00	; 0
    5ce6:	64 01       	movw	r12, r8
    5ce8:	13 c0       	rjmp	.+38     	; 0x5d10 <vfprintf+0x49e>
    5cea:	56 01       	movw	r10, r12
    5cec:	f2 e0       	ldi	r31, 0x02	; 2
    5cee:	af 0e       	add	r10, r31
    5cf0:	b1 1c       	adc	r11, r1
    5cf2:	f6 01       	movw	r30, r12
    5cf4:	c0 80       	ld	r12, Z
    5cf6:	d1 80       	ldd	r13, Z+1	; 0x01
    5cf8:	26 ff       	sbrs	r18, 6
    5cfa:	03 c0       	rjmp	.+6      	; 0x5d02 <vfprintf+0x490>
    5cfc:	61 2f       	mov	r22, r17
    5cfe:	70 e0       	ldi	r23, 0x00	; 0
    5d00:	02 c0       	rjmp	.+4      	; 0x5d06 <vfprintf+0x494>
    5d02:	6f ef       	ldi	r22, 0xFF	; 255
    5d04:	7f ef       	ldi	r23, 0xFF	; 255
    5d06:	c6 01       	movw	r24, r12
    5d08:	2b 8b       	std	Y+19, r18	; 0x13
    5d0a:	27 d2       	rcall	.+1102   	; 0x615a <strnlen>
    5d0c:	8c 01       	movw	r16, r24
    5d0e:	2b 89       	ldd	r18, Y+19	; 0x13
    5d10:	2f 77       	andi	r18, 0x7F	; 127
    5d12:	14 c0       	rjmp	.+40     	; 0x5d3c <vfprintf+0x4ca>
    5d14:	56 01       	movw	r10, r12
    5d16:	f2 e0       	ldi	r31, 0x02	; 2
    5d18:	af 0e       	add	r10, r31
    5d1a:	b1 1c       	adc	r11, r1
    5d1c:	f6 01       	movw	r30, r12
    5d1e:	c0 80       	ld	r12, Z
    5d20:	d1 80       	ldd	r13, Z+1	; 0x01
    5d22:	26 ff       	sbrs	r18, 6
    5d24:	03 c0       	rjmp	.+6      	; 0x5d2c <vfprintf+0x4ba>
    5d26:	61 2f       	mov	r22, r17
    5d28:	70 e0       	ldi	r23, 0x00	; 0
    5d2a:	02 c0       	rjmp	.+4      	; 0x5d30 <vfprintf+0x4be>
    5d2c:	6f ef       	ldi	r22, 0xFF	; 255
    5d2e:	7f ef       	ldi	r23, 0xFF	; 255
    5d30:	c6 01       	movw	r24, r12
    5d32:	2b 8b       	std	Y+19, r18	; 0x13
    5d34:	07 d2       	rcall	.+1038   	; 0x6144 <strnlen_P>
    5d36:	8c 01       	movw	r16, r24
    5d38:	2b 89       	ldd	r18, Y+19	; 0x13
    5d3a:	20 68       	ori	r18, 0x80	; 128
    5d3c:	72 2e       	mov	r7, r18
    5d3e:	23 fd       	sbrc	r18, 3
    5d40:	18 c0       	rjmp	.+48     	; 0x5d72 <vfprintf+0x500>
    5d42:	85 2d       	mov	r24, r5
    5d44:	90 e0       	ldi	r25, 0x00	; 0
    5d46:	08 17       	cp	r16, r24
    5d48:	19 07       	cpc	r17, r25
    5d4a:	98 f4       	brcc	.+38     	; 0x5d72 <vfprintf+0x500>
    5d4c:	b7 01       	movw	r22, r14
    5d4e:	80 e2       	ldi	r24, 0x20	; 32
    5d50:	90 e0       	ldi	r25, 0x00	; 0
    5d52:	0e d2       	rcall	.+1052   	; 0x6170 <fputc>
    5d54:	5a 94       	dec	r5
    5d56:	f5 cf       	rjmp	.-22     	; 0x5d42 <vfprintf+0x4d0>
    5d58:	f6 01       	movw	r30, r12
    5d5a:	77 fc       	sbrc	r7, 7
    5d5c:	85 91       	lpm	r24, Z+
    5d5e:	77 fe       	sbrs	r7, 7
    5d60:	81 91       	ld	r24, Z+
    5d62:	6f 01       	movw	r12, r30
    5d64:	b7 01       	movw	r22, r14
    5d66:	90 e0       	ldi	r25, 0x00	; 0
    5d68:	03 d2       	rcall	.+1030   	; 0x6170 <fputc>
    5d6a:	51 10       	cpse	r5, r1
    5d6c:	5a 94       	dec	r5
    5d6e:	01 50       	subi	r16, 0x01	; 1
    5d70:	11 09       	sbc	r17, r1
    5d72:	01 15       	cp	r16, r1
    5d74:	11 05       	cpc	r17, r1
    5d76:	81 f7       	brne	.-32     	; 0x5d58 <vfprintf+0x4e6>
    5d78:	db c0       	rjmp	.+438    	; 0x5f30 <vfprintf+0x6be>
    5d7a:	84 36       	cpi	r24, 0x64	; 100
    5d7c:	11 f0       	breq	.+4      	; 0x5d82 <vfprintf+0x510>
    5d7e:	89 36       	cpi	r24, 0x69	; 105
    5d80:	49 f5       	brne	.+82     	; 0x5dd4 <vfprintf+0x562>
    5d82:	56 01       	movw	r10, r12
    5d84:	27 ff       	sbrs	r18, 7
    5d86:	09 c0       	rjmp	.+18     	; 0x5d9a <vfprintf+0x528>
    5d88:	f4 e0       	ldi	r31, 0x04	; 4
    5d8a:	af 0e       	add	r10, r31
    5d8c:	b1 1c       	adc	r11, r1
    5d8e:	f6 01       	movw	r30, r12
    5d90:	60 81       	ld	r22, Z
    5d92:	71 81       	ldd	r23, Z+1	; 0x01
    5d94:	82 81       	ldd	r24, Z+2	; 0x02
    5d96:	93 81       	ldd	r25, Z+3	; 0x03
    5d98:	0a c0       	rjmp	.+20     	; 0x5dae <vfprintf+0x53c>
    5d9a:	f2 e0       	ldi	r31, 0x02	; 2
    5d9c:	af 0e       	add	r10, r31
    5d9e:	b1 1c       	adc	r11, r1
    5da0:	f6 01       	movw	r30, r12
    5da2:	60 81       	ld	r22, Z
    5da4:	71 81       	ldd	r23, Z+1	; 0x01
    5da6:	88 27       	eor	r24, r24
    5da8:	77 fd       	sbrc	r23, 7
    5daa:	80 95       	com	r24
    5dac:	98 2f       	mov	r25, r24
    5dae:	02 2f       	mov	r16, r18
    5db0:	0f 76       	andi	r16, 0x6F	; 111
    5db2:	97 ff       	sbrs	r25, 7
    5db4:	08 c0       	rjmp	.+16     	; 0x5dc6 <vfprintf+0x554>
    5db6:	90 95       	com	r25
    5db8:	80 95       	com	r24
    5dba:	70 95       	com	r23
    5dbc:	61 95       	neg	r22
    5dbe:	7f 4f       	sbci	r23, 0xFF	; 255
    5dc0:	8f 4f       	sbci	r24, 0xFF	; 255
    5dc2:	9f 4f       	sbci	r25, 0xFF	; 255
    5dc4:	00 68       	ori	r16, 0x80	; 128
    5dc6:	2a e0       	ldi	r18, 0x0A	; 10
    5dc8:	30 e0       	ldi	r19, 0x00	; 0
    5dca:	a4 01       	movw	r20, r8
    5dcc:	31 d2       	rcall	.+1122   	; 0x6230 <__ultoa_invert>
    5dce:	c8 2e       	mov	r12, r24
    5dd0:	c8 18       	sub	r12, r8
    5dd2:	3d c0       	rjmp	.+122    	; 0x5e4e <vfprintf+0x5dc>
    5dd4:	02 2f       	mov	r16, r18
    5dd6:	85 37       	cpi	r24, 0x75	; 117
    5dd8:	21 f4       	brne	.+8      	; 0x5de2 <vfprintf+0x570>
    5dda:	0f 7e       	andi	r16, 0xEF	; 239
    5ddc:	2a e0       	ldi	r18, 0x0A	; 10
    5dde:	30 e0       	ldi	r19, 0x00	; 0
    5de0:	1d c0       	rjmp	.+58     	; 0x5e1c <vfprintf+0x5aa>
    5de2:	09 7f       	andi	r16, 0xF9	; 249
    5de4:	8f 36       	cpi	r24, 0x6F	; 111
    5de6:	91 f0       	breq	.+36     	; 0x5e0c <vfprintf+0x59a>
    5de8:	18 f4       	brcc	.+6      	; 0x5df0 <vfprintf+0x57e>
    5dea:	88 35       	cpi	r24, 0x58	; 88
    5dec:	59 f0       	breq	.+22     	; 0x5e04 <vfprintf+0x592>
    5dee:	a9 c0       	rjmp	.+338    	; 0x5f42 <vfprintf+0x6d0>
    5df0:	80 37       	cpi	r24, 0x70	; 112
    5df2:	19 f0       	breq	.+6      	; 0x5dfa <vfprintf+0x588>
    5df4:	88 37       	cpi	r24, 0x78	; 120
    5df6:	11 f0       	breq	.+4      	; 0x5dfc <vfprintf+0x58a>
    5df8:	a4 c0       	rjmp	.+328    	; 0x5f42 <vfprintf+0x6d0>
    5dfa:	00 61       	ori	r16, 0x10	; 16
    5dfc:	04 ff       	sbrs	r16, 4
    5dfe:	09 c0       	rjmp	.+18     	; 0x5e12 <vfprintf+0x5a0>
    5e00:	04 60       	ori	r16, 0x04	; 4
    5e02:	07 c0       	rjmp	.+14     	; 0x5e12 <vfprintf+0x5a0>
    5e04:	24 ff       	sbrs	r18, 4
    5e06:	08 c0       	rjmp	.+16     	; 0x5e18 <vfprintf+0x5a6>
    5e08:	06 60       	ori	r16, 0x06	; 6
    5e0a:	06 c0       	rjmp	.+12     	; 0x5e18 <vfprintf+0x5a6>
    5e0c:	28 e0       	ldi	r18, 0x08	; 8
    5e0e:	30 e0       	ldi	r19, 0x00	; 0
    5e10:	05 c0       	rjmp	.+10     	; 0x5e1c <vfprintf+0x5aa>
    5e12:	20 e1       	ldi	r18, 0x10	; 16
    5e14:	30 e0       	ldi	r19, 0x00	; 0
    5e16:	02 c0       	rjmp	.+4      	; 0x5e1c <vfprintf+0x5aa>
    5e18:	20 e1       	ldi	r18, 0x10	; 16
    5e1a:	32 e0       	ldi	r19, 0x02	; 2
    5e1c:	56 01       	movw	r10, r12
    5e1e:	07 ff       	sbrs	r16, 7
    5e20:	09 c0       	rjmp	.+18     	; 0x5e34 <vfprintf+0x5c2>
    5e22:	f4 e0       	ldi	r31, 0x04	; 4
    5e24:	af 0e       	add	r10, r31
    5e26:	b1 1c       	adc	r11, r1
    5e28:	f6 01       	movw	r30, r12
    5e2a:	60 81       	ld	r22, Z
    5e2c:	71 81       	ldd	r23, Z+1	; 0x01
    5e2e:	82 81       	ldd	r24, Z+2	; 0x02
    5e30:	93 81       	ldd	r25, Z+3	; 0x03
    5e32:	08 c0       	rjmp	.+16     	; 0x5e44 <vfprintf+0x5d2>
    5e34:	f2 e0       	ldi	r31, 0x02	; 2
    5e36:	af 0e       	add	r10, r31
    5e38:	b1 1c       	adc	r11, r1
    5e3a:	f6 01       	movw	r30, r12
    5e3c:	60 81       	ld	r22, Z
    5e3e:	71 81       	ldd	r23, Z+1	; 0x01
    5e40:	80 e0       	ldi	r24, 0x00	; 0
    5e42:	90 e0       	ldi	r25, 0x00	; 0
    5e44:	a4 01       	movw	r20, r8
    5e46:	f4 d1       	rcall	.+1000   	; 0x6230 <__ultoa_invert>
    5e48:	c8 2e       	mov	r12, r24
    5e4a:	c8 18       	sub	r12, r8
    5e4c:	0f 77       	andi	r16, 0x7F	; 127
    5e4e:	06 ff       	sbrs	r16, 6
    5e50:	0b c0       	rjmp	.+22     	; 0x5e68 <vfprintf+0x5f6>
    5e52:	20 2f       	mov	r18, r16
    5e54:	2e 7f       	andi	r18, 0xFE	; 254
    5e56:	c1 16       	cp	r12, r17
    5e58:	50 f4       	brcc	.+20     	; 0x5e6e <vfprintf+0x5fc>
    5e5a:	04 ff       	sbrs	r16, 4
    5e5c:	0a c0       	rjmp	.+20     	; 0x5e72 <vfprintf+0x600>
    5e5e:	02 fd       	sbrc	r16, 2
    5e60:	08 c0       	rjmp	.+16     	; 0x5e72 <vfprintf+0x600>
    5e62:	20 2f       	mov	r18, r16
    5e64:	2e 7e       	andi	r18, 0xEE	; 238
    5e66:	05 c0       	rjmp	.+10     	; 0x5e72 <vfprintf+0x600>
    5e68:	dc 2c       	mov	r13, r12
    5e6a:	20 2f       	mov	r18, r16
    5e6c:	03 c0       	rjmp	.+6      	; 0x5e74 <vfprintf+0x602>
    5e6e:	dc 2c       	mov	r13, r12
    5e70:	01 c0       	rjmp	.+2      	; 0x5e74 <vfprintf+0x602>
    5e72:	d1 2e       	mov	r13, r17
    5e74:	24 ff       	sbrs	r18, 4
    5e76:	0d c0       	rjmp	.+26     	; 0x5e92 <vfprintf+0x620>
    5e78:	fe 01       	movw	r30, r28
    5e7a:	ec 0d       	add	r30, r12
    5e7c:	f1 1d       	adc	r31, r1
    5e7e:	80 81       	ld	r24, Z
    5e80:	80 33       	cpi	r24, 0x30	; 48
    5e82:	11 f4       	brne	.+4      	; 0x5e88 <vfprintf+0x616>
    5e84:	29 7e       	andi	r18, 0xE9	; 233
    5e86:	09 c0       	rjmp	.+18     	; 0x5e9a <vfprintf+0x628>
    5e88:	22 ff       	sbrs	r18, 2
    5e8a:	06 c0       	rjmp	.+12     	; 0x5e98 <vfprintf+0x626>
    5e8c:	d3 94       	inc	r13
    5e8e:	d3 94       	inc	r13
    5e90:	04 c0       	rjmp	.+8      	; 0x5e9a <vfprintf+0x628>
    5e92:	82 2f       	mov	r24, r18
    5e94:	86 78       	andi	r24, 0x86	; 134
    5e96:	09 f0       	breq	.+2      	; 0x5e9a <vfprintf+0x628>
    5e98:	d3 94       	inc	r13
    5e9a:	23 fd       	sbrc	r18, 3
    5e9c:	12 c0       	rjmp	.+36     	; 0x5ec2 <vfprintf+0x650>
    5e9e:	20 ff       	sbrs	r18, 0
    5ea0:	06 c0       	rjmp	.+12     	; 0x5eae <vfprintf+0x63c>
    5ea2:	1c 2d       	mov	r17, r12
    5ea4:	d5 14       	cp	r13, r5
    5ea6:	18 f4       	brcc	.+6      	; 0x5eae <vfprintf+0x63c>
    5ea8:	15 0d       	add	r17, r5
    5eaa:	1d 19       	sub	r17, r13
    5eac:	d5 2c       	mov	r13, r5
    5eae:	d5 14       	cp	r13, r5
    5eb0:	60 f4       	brcc	.+24     	; 0x5eca <vfprintf+0x658>
    5eb2:	b7 01       	movw	r22, r14
    5eb4:	80 e2       	ldi	r24, 0x20	; 32
    5eb6:	90 e0       	ldi	r25, 0x00	; 0
    5eb8:	2b 8b       	std	Y+19, r18	; 0x13
    5eba:	5a d1       	rcall	.+692    	; 0x6170 <fputc>
    5ebc:	d3 94       	inc	r13
    5ebe:	2b 89       	ldd	r18, Y+19	; 0x13
    5ec0:	f6 cf       	rjmp	.-20     	; 0x5eae <vfprintf+0x63c>
    5ec2:	d5 14       	cp	r13, r5
    5ec4:	10 f4       	brcc	.+4      	; 0x5eca <vfprintf+0x658>
    5ec6:	5d 18       	sub	r5, r13
    5ec8:	01 c0       	rjmp	.+2      	; 0x5ecc <vfprintf+0x65a>
    5eca:	51 2c       	mov	r5, r1
    5ecc:	24 ff       	sbrs	r18, 4
    5ece:	11 c0       	rjmp	.+34     	; 0x5ef2 <vfprintf+0x680>
    5ed0:	b7 01       	movw	r22, r14
    5ed2:	80 e3       	ldi	r24, 0x30	; 48
    5ed4:	90 e0       	ldi	r25, 0x00	; 0
    5ed6:	2b 8b       	std	Y+19, r18	; 0x13
    5ed8:	4b d1       	rcall	.+662    	; 0x6170 <fputc>
    5eda:	2b 89       	ldd	r18, Y+19	; 0x13
    5edc:	22 ff       	sbrs	r18, 2
    5ede:	16 c0       	rjmp	.+44     	; 0x5f0c <vfprintf+0x69a>
    5ee0:	21 ff       	sbrs	r18, 1
    5ee2:	03 c0       	rjmp	.+6      	; 0x5eea <vfprintf+0x678>
    5ee4:	88 e5       	ldi	r24, 0x58	; 88
    5ee6:	90 e0       	ldi	r25, 0x00	; 0
    5ee8:	02 c0       	rjmp	.+4      	; 0x5eee <vfprintf+0x67c>
    5eea:	88 e7       	ldi	r24, 0x78	; 120
    5eec:	90 e0       	ldi	r25, 0x00	; 0
    5eee:	b7 01       	movw	r22, r14
    5ef0:	0c c0       	rjmp	.+24     	; 0x5f0a <vfprintf+0x698>
    5ef2:	82 2f       	mov	r24, r18
    5ef4:	86 78       	andi	r24, 0x86	; 134
    5ef6:	51 f0       	breq	.+20     	; 0x5f0c <vfprintf+0x69a>
    5ef8:	21 fd       	sbrc	r18, 1
    5efa:	02 c0       	rjmp	.+4      	; 0x5f00 <vfprintf+0x68e>
    5efc:	80 e2       	ldi	r24, 0x20	; 32
    5efe:	01 c0       	rjmp	.+2      	; 0x5f02 <vfprintf+0x690>
    5f00:	8b e2       	ldi	r24, 0x2B	; 43
    5f02:	27 fd       	sbrc	r18, 7
    5f04:	8d e2       	ldi	r24, 0x2D	; 45
    5f06:	b7 01       	movw	r22, r14
    5f08:	90 e0       	ldi	r25, 0x00	; 0
    5f0a:	32 d1       	rcall	.+612    	; 0x6170 <fputc>
    5f0c:	c1 16       	cp	r12, r17
    5f0e:	30 f4       	brcc	.+12     	; 0x5f1c <vfprintf+0x6aa>
    5f10:	b7 01       	movw	r22, r14
    5f12:	80 e3       	ldi	r24, 0x30	; 48
    5f14:	90 e0       	ldi	r25, 0x00	; 0
    5f16:	2c d1       	rcall	.+600    	; 0x6170 <fputc>
    5f18:	11 50       	subi	r17, 0x01	; 1
    5f1a:	f8 cf       	rjmp	.-16     	; 0x5f0c <vfprintf+0x69a>
    5f1c:	ca 94       	dec	r12
    5f1e:	f4 01       	movw	r30, r8
    5f20:	ec 0d       	add	r30, r12
    5f22:	f1 1d       	adc	r31, r1
    5f24:	80 81       	ld	r24, Z
    5f26:	b7 01       	movw	r22, r14
    5f28:	90 e0       	ldi	r25, 0x00	; 0
    5f2a:	22 d1       	rcall	.+580    	; 0x6170 <fputc>
    5f2c:	c1 10       	cpse	r12, r1
    5f2e:	f6 cf       	rjmp	.-20     	; 0x5f1c <vfprintf+0x6aa>
    5f30:	55 20       	and	r5, r5
    5f32:	09 f4       	brne	.+2      	; 0x5f36 <vfprintf+0x6c4>
    5f34:	dd cc       	rjmp	.-1606   	; 0x58f0 <vfprintf+0x7e>
    5f36:	b7 01       	movw	r22, r14
    5f38:	80 e2       	ldi	r24, 0x20	; 32
    5f3a:	90 e0       	ldi	r25, 0x00	; 0
    5f3c:	19 d1       	rcall	.+562    	; 0x6170 <fputc>
    5f3e:	5a 94       	dec	r5
    5f40:	f7 cf       	rjmp	.-18     	; 0x5f30 <vfprintf+0x6be>
    5f42:	f7 01       	movw	r30, r14
    5f44:	86 81       	ldd	r24, Z+6	; 0x06
    5f46:	97 81       	ldd	r25, Z+7	; 0x07
    5f48:	02 c0       	rjmp	.+4      	; 0x5f4e <vfprintf+0x6dc>
    5f4a:	8f ef       	ldi	r24, 0xFF	; 255
    5f4c:	9f ef       	ldi	r25, 0xFF	; 255
    5f4e:	63 96       	adiw	r28, 0x13	; 19
    5f50:	0f b6       	in	r0, 0x3f	; 63
    5f52:	f8 94       	cli
    5f54:	de bf       	out	0x3e, r29	; 62
    5f56:	0f be       	out	0x3f, r0	; 63
    5f58:	cd bf       	out	0x3d, r28	; 61
    5f5a:	df 91       	pop	r29
    5f5c:	cf 91       	pop	r28
    5f5e:	1f 91       	pop	r17
    5f60:	0f 91       	pop	r16
    5f62:	ff 90       	pop	r15
    5f64:	ef 90       	pop	r14
    5f66:	df 90       	pop	r13
    5f68:	cf 90       	pop	r12
    5f6a:	bf 90       	pop	r11
    5f6c:	af 90       	pop	r10
    5f6e:	9f 90       	pop	r9
    5f70:	8f 90       	pop	r8
    5f72:	7f 90       	pop	r7
    5f74:	6f 90       	pop	r6
    5f76:	5f 90       	pop	r5
    5f78:	4f 90       	pop	r4
    5f7a:	3f 90       	pop	r3
    5f7c:	2f 90       	pop	r2
    5f7e:	08 95       	ret

00005f80 <__tablejump2__>:
    5f80:	ee 0f       	add	r30, r30
    5f82:	ff 1f       	adc	r31, r31

00005f84 <__tablejump__>:
    5f84:	05 90       	lpm	r0, Z+
    5f86:	f4 91       	lpm	r31, Z
    5f88:	e0 2d       	mov	r30, r0
    5f8a:	09 94       	ijmp

00005f8c <__tablejump_elpm__>:
    5f8c:	07 90       	elpm	r0, Z+
    5f8e:	f6 91       	elpm	r31, Z
    5f90:	e0 2d       	mov	r30, r0
    5f92:	09 94       	ijmp

00005f94 <__ftoa_engine>:
    5f94:	28 30       	cpi	r18, 0x08	; 8
    5f96:	08 f0       	brcs	.+2      	; 0x5f9a <__ftoa_engine+0x6>
    5f98:	27 e0       	ldi	r18, 0x07	; 7
    5f9a:	33 27       	eor	r19, r19
    5f9c:	da 01       	movw	r26, r20
    5f9e:	99 0f       	add	r25, r25
    5fa0:	31 1d       	adc	r19, r1
    5fa2:	87 fd       	sbrc	r24, 7
    5fa4:	91 60       	ori	r25, 0x01	; 1
    5fa6:	00 96       	adiw	r24, 0x00	; 0
    5fa8:	61 05       	cpc	r22, r1
    5faa:	71 05       	cpc	r23, r1
    5fac:	39 f4       	brne	.+14     	; 0x5fbc <__ftoa_engine+0x28>
    5fae:	32 60       	ori	r19, 0x02	; 2
    5fb0:	2e 5f       	subi	r18, 0xFE	; 254
    5fb2:	3d 93       	st	X+, r19
    5fb4:	30 e3       	ldi	r19, 0x30	; 48
    5fb6:	2a 95       	dec	r18
    5fb8:	e1 f7       	brne	.-8      	; 0x5fb2 <__ftoa_engine+0x1e>
    5fba:	08 95       	ret
    5fbc:	9f 3f       	cpi	r25, 0xFF	; 255
    5fbe:	30 f0       	brcs	.+12     	; 0x5fcc <__ftoa_engine+0x38>
    5fc0:	80 38       	cpi	r24, 0x80	; 128
    5fc2:	71 05       	cpc	r23, r1
    5fc4:	61 05       	cpc	r22, r1
    5fc6:	09 f0       	breq	.+2      	; 0x5fca <__ftoa_engine+0x36>
    5fc8:	3c 5f       	subi	r19, 0xFC	; 252
    5fca:	3c 5f       	subi	r19, 0xFC	; 252
    5fcc:	3d 93       	st	X+, r19
    5fce:	91 30       	cpi	r25, 0x01	; 1
    5fd0:	08 f0       	brcs	.+2      	; 0x5fd4 <__ftoa_engine+0x40>
    5fd2:	80 68       	ori	r24, 0x80	; 128
    5fd4:	91 1d       	adc	r25, r1
    5fd6:	df 93       	push	r29
    5fd8:	cf 93       	push	r28
    5fda:	1f 93       	push	r17
    5fdc:	0f 93       	push	r16
    5fde:	ff 92       	push	r15
    5fe0:	ef 92       	push	r14
    5fe2:	19 2f       	mov	r17, r25
    5fe4:	98 7f       	andi	r25, 0xF8	; 248
    5fe6:	96 95       	lsr	r25
    5fe8:	e9 2f       	mov	r30, r25
    5fea:	96 95       	lsr	r25
    5fec:	96 95       	lsr	r25
    5fee:	e9 0f       	add	r30, r25
    5ff0:	ff 27       	eor	r31, r31
    5ff2:	e2 50       	subi	r30, 0x02	; 2
    5ff4:	f7 4f       	sbci	r31, 0xF7	; 247
    5ff6:	99 27       	eor	r25, r25
    5ff8:	33 27       	eor	r19, r19
    5ffa:	ee 24       	eor	r14, r14
    5ffc:	ff 24       	eor	r15, r15
    5ffe:	a7 01       	movw	r20, r14
    6000:	e7 01       	movw	r28, r14
    6002:	05 90       	lpm	r0, Z+
    6004:	08 94       	sec
    6006:	07 94       	ror	r0
    6008:	28 f4       	brcc	.+10     	; 0x6014 <__ftoa_engine+0x80>
    600a:	36 0f       	add	r19, r22
    600c:	e7 1e       	adc	r14, r23
    600e:	f8 1e       	adc	r15, r24
    6010:	49 1f       	adc	r20, r25
    6012:	51 1d       	adc	r21, r1
    6014:	66 0f       	add	r22, r22
    6016:	77 1f       	adc	r23, r23
    6018:	88 1f       	adc	r24, r24
    601a:	99 1f       	adc	r25, r25
    601c:	06 94       	lsr	r0
    601e:	a1 f7       	brne	.-24     	; 0x6008 <__ftoa_engine+0x74>
    6020:	05 90       	lpm	r0, Z+
    6022:	07 94       	ror	r0
    6024:	28 f4       	brcc	.+10     	; 0x6030 <__ftoa_engine+0x9c>
    6026:	e7 0e       	add	r14, r23
    6028:	f8 1e       	adc	r15, r24
    602a:	49 1f       	adc	r20, r25
    602c:	56 1f       	adc	r21, r22
    602e:	c1 1d       	adc	r28, r1
    6030:	77 0f       	add	r23, r23
    6032:	88 1f       	adc	r24, r24
    6034:	99 1f       	adc	r25, r25
    6036:	66 1f       	adc	r22, r22
    6038:	06 94       	lsr	r0
    603a:	a1 f7       	brne	.-24     	; 0x6024 <__ftoa_engine+0x90>
    603c:	05 90       	lpm	r0, Z+
    603e:	07 94       	ror	r0
    6040:	28 f4       	brcc	.+10     	; 0x604c <__ftoa_engine+0xb8>
    6042:	f8 0e       	add	r15, r24
    6044:	49 1f       	adc	r20, r25
    6046:	56 1f       	adc	r21, r22
    6048:	c7 1f       	adc	r28, r23
    604a:	d1 1d       	adc	r29, r1
    604c:	88 0f       	add	r24, r24
    604e:	99 1f       	adc	r25, r25
    6050:	66 1f       	adc	r22, r22
    6052:	77 1f       	adc	r23, r23
    6054:	06 94       	lsr	r0
    6056:	a1 f7       	brne	.-24     	; 0x6040 <__ftoa_engine+0xac>
    6058:	05 90       	lpm	r0, Z+
    605a:	07 94       	ror	r0
    605c:	20 f4       	brcc	.+8      	; 0x6066 <__ftoa_engine+0xd2>
    605e:	49 0f       	add	r20, r25
    6060:	56 1f       	adc	r21, r22
    6062:	c7 1f       	adc	r28, r23
    6064:	d8 1f       	adc	r29, r24
    6066:	99 0f       	add	r25, r25
    6068:	66 1f       	adc	r22, r22
    606a:	77 1f       	adc	r23, r23
    606c:	88 1f       	adc	r24, r24
    606e:	06 94       	lsr	r0
    6070:	a9 f7       	brne	.-22     	; 0x605c <__ftoa_engine+0xc8>
    6072:	84 91       	lpm	r24, Z
    6074:	10 95       	com	r17
    6076:	17 70       	andi	r17, 0x07	; 7
    6078:	41 f0       	breq	.+16     	; 0x608a <__ftoa_engine+0xf6>
    607a:	d6 95       	lsr	r29
    607c:	c7 95       	ror	r28
    607e:	57 95       	ror	r21
    6080:	47 95       	ror	r20
    6082:	f7 94       	ror	r15
    6084:	e7 94       	ror	r14
    6086:	1a 95       	dec	r17
    6088:	c1 f7       	brne	.-16     	; 0x607a <__ftoa_engine+0xe6>
    608a:	e4 ea       	ldi	r30, 0xA4	; 164
    608c:	f8 e0       	ldi	r31, 0x08	; 8
    608e:	68 94       	set
    6090:	15 90       	lpm	r1, Z+
    6092:	15 91       	lpm	r17, Z+
    6094:	35 91       	lpm	r19, Z+
    6096:	65 91       	lpm	r22, Z+
    6098:	95 91       	lpm	r25, Z+
    609a:	05 90       	lpm	r0, Z+
    609c:	7f e2       	ldi	r23, 0x2F	; 47
    609e:	73 95       	inc	r23
    60a0:	e1 18       	sub	r14, r1
    60a2:	f1 0a       	sbc	r15, r17
    60a4:	43 0b       	sbc	r20, r19
    60a6:	56 0b       	sbc	r21, r22
    60a8:	c9 0b       	sbc	r28, r25
    60aa:	d0 09       	sbc	r29, r0
    60ac:	c0 f7       	brcc	.-16     	; 0x609e <__ftoa_engine+0x10a>
    60ae:	e1 0c       	add	r14, r1
    60b0:	f1 1e       	adc	r15, r17
    60b2:	43 1f       	adc	r20, r19
    60b4:	56 1f       	adc	r21, r22
    60b6:	c9 1f       	adc	r28, r25
    60b8:	d0 1d       	adc	r29, r0
    60ba:	7e f4       	brtc	.+30     	; 0x60da <__ftoa_engine+0x146>
    60bc:	70 33       	cpi	r23, 0x30	; 48
    60be:	11 f4       	brne	.+4      	; 0x60c4 <__ftoa_engine+0x130>
    60c0:	8a 95       	dec	r24
    60c2:	e6 cf       	rjmp	.-52     	; 0x6090 <__ftoa_engine+0xfc>
    60c4:	e8 94       	clt
    60c6:	01 50       	subi	r16, 0x01	; 1
    60c8:	30 f0       	brcs	.+12     	; 0x60d6 <__ftoa_engine+0x142>
    60ca:	08 0f       	add	r16, r24
    60cc:	0a f4       	brpl	.+2      	; 0x60d0 <__ftoa_engine+0x13c>
    60ce:	00 27       	eor	r16, r16
    60d0:	02 17       	cp	r16, r18
    60d2:	08 f4       	brcc	.+2      	; 0x60d6 <__ftoa_engine+0x142>
    60d4:	20 2f       	mov	r18, r16
    60d6:	23 95       	inc	r18
    60d8:	02 2f       	mov	r16, r18
    60da:	7a 33       	cpi	r23, 0x3A	; 58
    60dc:	28 f0       	brcs	.+10     	; 0x60e8 <__ftoa_engine+0x154>
    60de:	79 e3       	ldi	r23, 0x39	; 57
    60e0:	7d 93       	st	X+, r23
    60e2:	2a 95       	dec	r18
    60e4:	e9 f7       	brne	.-6      	; 0x60e0 <__ftoa_engine+0x14c>
    60e6:	10 c0       	rjmp	.+32     	; 0x6108 <__ftoa_engine+0x174>
    60e8:	7d 93       	st	X+, r23
    60ea:	2a 95       	dec	r18
    60ec:	89 f6       	brne	.-94     	; 0x6090 <__ftoa_engine+0xfc>
    60ee:	06 94       	lsr	r0
    60f0:	97 95       	ror	r25
    60f2:	67 95       	ror	r22
    60f4:	37 95       	ror	r19
    60f6:	17 95       	ror	r17
    60f8:	17 94       	ror	r1
    60fa:	e1 18       	sub	r14, r1
    60fc:	f1 0a       	sbc	r15, r17
    60fe:	43 0b       	sbc	r20, r19
    6100:	56 0b       	sbc	r21, r22
    6102:	c9 0b       	sbc	r28, r25
    6104:	d0 09       	sbc	r29, r0
    6106:	98 f0       	brcs	.+38     	; 0x612e <__ftoa_engine+0x19a>
    6108:	23 95       	inc	r18
    610a:	7e 91       	ld	r23, -X
    610c:	73 95       	inc	r23
    610e:	7a 33       	cpi	r23, 0x3A	; 58
    6110:	08 f0       	brcs	.+2      	; 0x6114 <__ftoa_engine+0x180>
    6112:	70 e3       	ldi	r23, 0x30	; 48
    6114:	7c 93       	st	X, r23
    6116:	20 13       	cpse	r18, r16
    6118:	b8 f7       	brcc	.-18     	; 0x6108 <__ftoa_engine+0x174>
    611a:	7e 91       	ld	r23, -X
    611c:	70 61       	ori	r23, 0x10	; 16
    611e:	7d 93       	st	X+, r23
    6120:	30 f0       	brcs	.+12     	; 0x612e <__ftoa_engine+0x19a>
    6122:	83 95       	inc	r24
    6124:	71 e3       	ldi	r23, 0x31	; 49
    6126:	7d 93       	st	X+, r23
    6128:	70 e3       	ldi	r23, 0x30	; 48
    612a:	2a 95       	dec	r18
    612c:	e1 f7       	brne	.-8      	; 0x6126 <__ftoa_engine+0x192>
    612e:	11 24       	eor	r1, r1
    6130:	ef 90       	pop	r14
    6132:	ff 90       	pop	r15
    6134:	0f 91       	pop	r16
    6136:	1f 91       	pop	r17
    6138:	cf 91       	pop	r28
    613a:	df 91       	pop	r29
    613c:	99 27       	eor	r25, r25
    613e:	87 fd       	sbrc	r24, 7
    6140:	90 95       	com	r25
    6142:	08 95       	ret

00006144 <strnlen_P>:
    6144:	fc 01       	movw	r30, r24
    6146:	05 90       	lpm	r0, Z+
    6148:	61 50       	subi	r22, 0x01	; 1
    614a:	70 40       	sbci	r23, 0x00	; 0
    614c:	01 10       	cpse	r0, r1
    614e:	d8 f7       	brcc	.-10     	; 0x6146 <strnlen_P+0x2>
    6150:	80 95       	com	r24
    6152:	90 95       	com	r25
    6154:	8e 0f       	add	r24, r30
    6156:	9f 1f       	adc	r25, r31
    6158:	08 95       	ret

0000615a <strnlen>:
    615a:	fc 01       	movw	r30, r24
    615c:	61 50       	subi	r22, 0x01	; 1
    615e:	70 40       	sbci	r23, 0x00	; 0
    6160:	01 90       	ld	r0, Z+
    6162:	01 10       	cpse	r0, r1
    6164:	d8 f7       	brcc	.-10     	; 0x615c <strnlen+0x2>
    6166:	80 95       	com	r24
    6168:	90 95       	com	r25
    616a:	8e 0f       	add	r24, r30
    616c:	9f 1f       	adc	r25, r31
    616e:	08 95       	ret

00006170 <fputc>:
    6170:	0f 93       	push	r16
    6172:	1f 93       	push	r17
    6174:	cf 93       	push	r28
    6176:	df 93       	push	r29
    6178:	18 2f       	mov	r17, r24
    617a:	09 2f       	mov	r16, r25
    617c:	eb 01       	movw	r28, r22
    617e:	8b 81       	ldd	r24, Y+3	; 0x03
    6180:	81 fd       	sbrc	r24, 1
    6182:	03 c0       	rjmp	.+6      	; 0x618a <fputc+0x1a>
    6184:	8f ef       	ldi	r24, 0xFF	; 255
    6186:	9f ef       	ldi	r25, 0xFF	; 255
    6188:	20 c0       	rjmp	.+64     	; 0x61ca <fputc+0x5a>
    618a:	82 ff       	sbrs	r24, 2
    618c:	10 c0       	rjmp	.+32     	; 0x61ae <fputc+0x3e>
    618e:	4e 81       	ldd	r20, Y+6	; 0x06
    6190:	5f 81       	ldd	r21, Y+7	; 0x07
    6192:	2c 81       	ldd	r18, Y+4	; 0x04
    6194:	3d 81       	ldd	r19, Y+5	; 0x05
    6196:	42 17       	cp	r20, r18
    6198:	53 07       	cpc	r21, r19
    619a:	7c f4       	brge	.+30     	; 0x61ba <fputc+0x4a>
    619c:	e8 81       	ld	r30, Y
    619e:	f9 81       	ldd	r31, Y+1	; 0x01
    61a0:	9f 01       	movw	r18, r30
    61a2:	2f 5f       	subi	r18, 0xFF	; 255
    61a4:	3f 4f       	sbci	r19, 0xFF	; 255
    61a6:	39 83       	std	Y+1, r19	; 0x01
    61a8:	28 83       	st	Y, r18
    61aa:	10 83       	st	Z, r17
    61ac:	06 c0       	rjmp	.+12     	; 0x61ba <fputc+0x4a>
    61ae:	e8 85       	ldd	r30, Y+8	; 0x08
    61b0:	f9 85       	ldd	r31, Y+9	; 0x09
    61b2:	81 2f       	mov	r24, r17
    61b4:	09 95       	icall
    61b6:	89 2b       	or	r24, r25
    61b8:	29 f7       	brne	.-54     	; 0x6184 <fputc+0x14>
    61ba:	2e 81       	ldd	r18, Y+6	; 0x06
    61bc:	3f 81       	ldd	r19, Y+7	; 0x07
    61be:	2f 5f       	subi	r18, 0xFF	; 255
    61c0:	3f 4f       	sbci	r19, 0xFF	; 255
    61c2:	3f 83       	std	Y+7, r19	; 0x07
    61c4:	2e 83       	std	Y+6, r18	; 0x06
    61c6:	81 2f       	mov	r24, r17
    61c8:	90 2f       	mov	r25, r16
    61ca:	df 91       	pop	r29
    61cc:	cf 91       	pop	r28
    61ce:	1f 91       	pop	r17
    61d0:	0f 91       	pop	r16
    61d2:	08 95       	ret

000061d4 <sprintf>:
    61d4:	0f 93       	push	r16
    61d6:	1f 93       	push	r17
    61d8:	cf 93       	push	r28
    61da:	df 93       	push	r29
    61dc:	cd b7       	in	r28, 0x3d	; 61
    61de:	de b7       	in	r29, 0x3e	; 62
    61e0:	2e 97       	sbiw	r28, 0x0e	; 14
    61e2:	0f b6       	in	r0, 0x3f	; 63
    61e4:	f8 94       	cli
    61e6:	de bf       	out	0x3e, r29	; 62
    61e8:	0f be       	out	0x3f, r0	; 63
    61ea:	cd bf       	out	0x3d, r28	; 61
    61ec:	0d 89       	ldd	r16, Y+21	; 0x15
    61ee:	1e 89       	ldd	r17, Y+22	; 0x16
    61f0:	86 e0       	ldi	r24, 0x06	; 6
    61f2:	8c 83       	std	Y+4, r24	; 0x04
    61f4:	1a 83       	std	Y+2, r17	; 0x02
    61f6:	09 83       	std	Y+1, r16	; 0x01
    61f8:	8f ef       	ldi	r24, 0xFF	; 255
    61fa:	9f e7       	ldi	r25, 0x7F	; 127
    61fc:	9e 83       	std	Y+6, r25	; 0x06
    61fe:	8d 83       	std	Y+5, r24	; 0x05
    6200:	ae 01       	movw	r20, r28
    6202:	47 5e       	subi	r20, 0xE7	; 231
    6204:	5f 4f       	sbci	r21, 0xFF	; 255
    6206:	6f 89       	ldd	r22, Y+23	; 0x17
    6208:	78 8d       	ldd	r23, Y+24	; 0x18
    620a:	ce 01       	movw	r24, r28
    620c:	01 96       	adiw	r24, 0x01	; 1
    620e:	31 db       	rcall	.-2462   	; 0x5872 <vfprintf>
    6210:	ef 81       	ldd	r30, Y+7	; 0x07
    6212:	f8 85       	ldd	r31, Y+8	; 0x08
    6214:	e0 0f       	add	r30, r16
    6216:	f1 1f       	adc	r31, r17
    6218:	10 82       	st	Z, r1
    621a:	2e 96       	adiw	r28, 0x0e	; 14
    621c:	0f b6       	in	r0, 0x3f	; 63
    621e:	f8 94       	cli
    6220:	de bf       	out	0x3e, r29	; 62
    6222:	0f be       	out	0x3f, r0	; 63
    6224:	cd bf       	out	0x3d, r28	; 61
    6226:	df 91       	pop	r29
    6228:	cf 91       	pop	r28
    622a:	1f 91       	pop	r17
    622c:	0f 91       	pop	r16
    622e:	08 95       	ret

00006230 <__ultoa_invert>:
    6230:	fa 01       	movw	r30, r20
    6232:	aa 27       	eor	r26, r26
    6234:	28 30       	cpi	r18, 0x08	; 8
    6236:	51 f1       	breq	.+84     	; 0x628c <__ultoa_invert+0x5c>
    6238:	20 31       	cpi	r18, 0x10	; 16
    623a:	81 f1       	breq	.+96     	; 0x629c <__ultoa_invert+0x6c>
    623c:	e8 94       	clt
    623e:	6f 93       	push	r22
    6240:	6e 7f       	andi	r22, 0xFE	; 254
    6242:	6e 5f       	subi	r22, 0xFE	; 254
    6244:	7f 4f       	sbci	r23, 0xFF	; 255
    6246:	8f 4f       	sbci	r24, 0xFF	; 255
    6248:	9f 4f       	sbci	r25, 0xFF	; 255
    624a:	af 4f       	sbci	r26, 0xFF	; 255
    624c:	b1 e0       	ldi	r27, 0x01	; 1
    624e:	3e d0       	rcall	.+124    	; 0x62cc <__ultoa_invert+0x9c>
    6250:	b4 e0       	ldi	r27, 0x04	; 4
    6252:	3c d0       	rcall	.+120    	; 0x62cc <__ultoa_invert+0x9c>
    6254:	67 0f       	add	r22, r23
    6256:	78 1f       	adc	r23, r24
    6258:	89 1f       	adc	r24, r25
    625a:	9a 1f       	adc	r25, r26
    625c:	a1 1d       	adc	r26, r1
    625e:	68 0f       	add	r22, r24
    6260:	79 1f       	adc	r23, r25
    6262:	8a 1f       	adc	r24, r26
    6264:	91 1d       	adc	r25, r1
    6266:	a1 1d       	adc	r26, r1
    6268:	6a 0f       	add	r22, r26
    626a:	71 1d       	adc	r23, r1
    626c:	81 1d       	adc	r24, r1
    626e:	91 1d       	adc	r25, r1
    6270:	a1 1d       	adc	r26, r1
    6272:	20 d0       	rcall	.+64     	; 0x62b4 <__ultoa_invert+0x84>
    6274:	09 f4       	brne	.+2      	; 0x6278 <__ultoa_invert+0x48>
    6276:	68 94       	set
    6278:	3f 91       	pop	r19
    627a:	2a e0       	ldi	r18, 0x0A	; 10
    627c:	26 9f       	mul	r18, r22
    627e:	11 24       	eor	r1, r1
    6280:	30 19       	sub	r19, r0
    6282:	30 5d       	subi	r19, 0xD0	; 208
    6284:	31 93       	st	Z+, r19
    6286:	de f6       	brtc	.-74     	; 0x623e <__ultoa_invert+0xe>
    6288:	cf 01       	movw	r24, r30
    628a:	08 95       	ret
    628c:	46 2f       	mov	r20, r22
    628e:	47 70       	andi	r20, 0x07	; 7
    6290:	40 5d       	subi	r20, 0xD0	; 208
    6292:	41 93       	st	Z+, r20
    6294:	b3 e0       	ldi	r27, 0x03	; 3
    6296:	0f d0       	rcall	.+30     	; 0x62b6 <__ultoa_invert+0x86>
    6298:	c9 f7       	brne	.-14     	; 0x628c <__ultoa_invert+0x5c>
    629a:	f6 cf       	rjmp	.-20     	; 0x6288 <__ultoa_invert+0x58>
    629c:	46 2f       	mov	r20, r22
    629e:	4f 70       	andi	r20, 0x0F	; 15
    62a0:	40 5d       	subi	r20, 0xD0	; 208
    62a2:	4a 33       	cpi	r20, 0x3A	; 58
    62a4:	18 f0       	brcs	.+6      	; 0x62ac <__ultoa_invert+0x7c>
    62a6:	49 5d       	subi	r20, 0xD9	; 217
    62a8:	31 fd       	sbrc	r19, 1
    62aa:	40 52       	subi	r20, 0x20	; 32
    62ac:	41 93       	st	Z+, r20
    62ae:	02 d0       	rcall	.+4      	; 0x62b4 <__ultoa_invert+0x84>
    62b0:	a9 f7       	brne	.-22     	; 0x629c <__ultoa_invert+0x6c>
    62b2:	ea cf       	rjmp	.-44     	; 0x6288 <__ultoa_invert+0x58>
    62b4:	b4 e0       	ldi	r27, 0x04	; 4
    62b6:	a6 95       	lsr	r26
    62b8:	97 95       	ror	r25
    62ba:	87 95       	ror	r24
    62bc:	77 95       	ror	r23
    62be:	67 95       	ror	r22
    62c0:	ba 95       	dec	r27
    62c2:	c9 f7       	brne	.-14     	; 0x62b6 <__ultoa_invert+0x86>
    62c4:	00 97       	sbiw	r24, 0x00	; 0
    62c6:	61 05       	cpc	r22, r1
    62c8:	71 05       	cpc	r23, r1
    62ca:	08 95       	ret
    62cc:	9b 01       	movw	r18, r22
    62ce:	ac 01       	movw	r20, r24
    62d0:	0a 2e       	mov	r0, r26
    62d2:	06 94       	lsr	r0
    62d4:	57 95       	ror	r21
    62d6:	47 95       	ror	r20
    62d8:	37 95       	ror	r19
    62da:	27 95       	ror	r18
    62dc:	ba 95       	dec	r27
    62de:	c9 f7       	brne	.-14     	; 0x62d2 <__ultoa_invert+0xa2>
    62e0:	62 0f       	add	r22, r18
    62e2:	73 1f       	adc	r23, r19
    62e4:	84 1f       	adc	r24, r20
    62e6:	95 1f       	adc	r25, r21
    62e8:	a0 1d       	adc	r26, r0
    62ea:	08 95       	ret

000062ec <__do_global_dtors>:
    62ec:	19 e0       	ldi	r17, 0x09	; 9
    62ee:	c0 ea       	ldi	r28, 0xA0	; 160
    62f0:	d9 e0       	ldi	r29, 0x09	; 9
    62f2:	00 e0       	ldi	r16, 0x00	; 0
    62f4:	05 c0       	rjmp	.+10     	; 0x6300 <__do_global_dtors+0x14>
    62f6:	22 97       	sbiw	r28, 0x02	; 2
    62f8:	01 09       	sbc	r16, r1
    62fa:	fe 01       	movw	r30, r28
    62fc:	0b bf       	out	0x3b, r16	; 59
    62fe:	46 de       	rcall	.-884    	; 0x5f8c <__tablejump_elpm__>
    6300:	c2 3a       	cpi	r28, 0xA2	; 162
    6302:	d1 07       	cpc	r29, r17
    6304:	80 e0       	ldi	r24, 0x00	; 0
    6306:	08 07       	cpc	r16, r24
    6308:	b1 f7       	brne	.-20     	; 0x62f6 <__do_global_dtors+0xa>
    630a:	f8 94       	cli

0000630c <__stop_program>:
    630c:	ff cf       	rjmp	.-2      	; 0x630c <__stop_program>
