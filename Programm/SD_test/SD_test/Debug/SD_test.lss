
SD_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  00001730  000017c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001730  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000023c  00800116  00800116  000017da  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000017da  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000180c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000180  00000000  00000000  0000184c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001fb4  00000000  00000000  000019cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008b1  00000000  00000000  00003980  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000011e0  00000000  00000000  00004231  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000788  00000000  00000000  00005414  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006d1  00000000  00000000  00005b9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000259c  00000000  00000000  0000626d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000158  00000000  00000000  00008809  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	62 c0       	rjmp	.+196    	; 0xca <__bad_interrupt>
       6:	00 00       	nop
       8:	60 c0       	rjmp	.+192    	; 0xca <__bad_interrupt>
       a:	00 00       	nop
       c:	5e c0       	rjmp	.+188    	; 0xca <__bad_interrupt>
       e:	00 00       	nop
      10:	5c c0       	rjmp	.+184    	; 0xca <__bad_interrupt>
      12:	00 00       	nop
      14:	5a c0       	rjmp	.+180    	; 0xca <__bad_interrupt>
      16:	00 00       	nop
      18:	58 c0       	rjmp	.+176    	; 0xca <__bad_interrupt>
      1a:	00 00       	nop
      1c:	56 c0       	rjmp	.+172    	; 0xca <__bad_interrupt>
      1e:	00 00       	nop
      20:	54 c0       	rjmp	.+168    	; 0xca <__bad_interrupt>
      22:	00 00       	nop
      24:	52 c0       	rjmp	.+164    	; 0xca <__bad_interrupt>
      26:	00 00       	nop
      28:	50 c0       	rjmp	.+160    	; 0xca <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4e c0       	rjmp	.+156    	; 0xca <__bad_interrupt>
      2e:	00 00       	nop
      30:	4c c0       	rjmp	.+152    	; 0xca <__bad_interrupt>
      32:	00 00       	nop
      34:	4a c0       	rjmp	.+148    	; 0xca <__bad_interrupt>
      36:	00 00       	nop
      38:	48 c0       	rjmp	.+144    	; 0xca <__bad_interrupt>
      3a:	00 00       	nop
      3c:	46 c0       	rjmp	.+140    	; 0xca <__bad_interrupt>
      3e:	00 00       	nop
      40:	44 c0       	rjmp	.+136    	; 0xca <__bad_interrupt>
      42:	00 00       	nop
      44:	42 c0       	rjmp	.+132    	; 0xca <__bad_interrupt>
      46:	00 00       	nop
      48:	40 c0       	rjmp	.+128    	; 0xca <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3e c0       	rjmp	.+124    	; 0xca <__bad_interrupt>
      4e:	00 00       	nop
      50:	3c c0       	rjmp	.+120    	; 0xca <__bad_interrupt>
      52:	00 00       	nop
      54:	3a c0       	rjmp	.+116    	; 0xca <__bad_interrupt>
      56:	00 00       	nop
      58:	38 c0       	rjmp	.+112    	; 0xca <__bad_interrupt>
      5a:	00 00       	nop
      5c:	36 c0       	rjmp	.+108    	; 0xca <__bad_interrupt>
      5e:	00 00       	nop
      60:	34 c0       	rjmp	.+104    	; 0xca <__bad_interrupt>
      62:	00 00       	nop
      64:	32 c0       	rjmp	.+100    	; 0xca <__bad_interrupt>
      66:	00 00       	nop
      68:	30 c0       	rjmp	.+96     	; 0xca <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2e c0       	rjmp	.+92     	; 0xca <__bad_interrupt>
      6e:	00 00       	nop
      70:	2c c0       	rjmp	.+88     	; 0xca <__bad_interrupt>
      72:	00 00       	nop
      74:	2a c0       	rjmp	.+84     	; 0xca <__bad_interrupt>
      76:	00 00       	nop
      78:	28 c0       	rjmp	.+80     	; 0xca <__bad_interrupt>
      7a:	00 00       	nop
      7c:	26 c0       	rjmp	.+76     	; 0xca <__bad_interrupt>
      7e:	00 00       	nop
      80:	24 c0       	rjmp	.+72     	; 0xca <__bad_interrupt>
      82:	00 00       	nop
      84:	22 c0       	rjmp	.+68     	; 0xca <__bad_interrupt>
      86:	00 00       	nop
      88:	20 c0       	rjmp	.+64     	; 0xca <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e4       	ldi	r29, 0x40	; 64
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e0 e3       	ldi	r30, 0x30	; 48
      a0:	f7 e1       	ldi	r31, 0x17	; 23
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a6 31       	cpi	r26, 0x16	; 22
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	23 e0       	ldi	r18, 0x03	; 3
      b4:	a6 e1       	ldi	r26, 0x16	; 22
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a2 35       	cpi	r26, 0x52	; 82
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 61 09 	call	0x12c2	; 0x12c2 <main>
      c6:	0c 94 96 0b 	jmp	0x172c	; 0x172c <_exit>

000000ca <__bad_interrupt>:
      ca:	9a cf       	rjmp	.-204    	; 0x0 <__vectors>

000000cc <fat_writeSector>:
	 nextCluster = fat_getNextCluster(startCluster);
	 fat_setCluster(startCluster,0x00000000);  	
  }while(!((nextCluster>=0x0ffffff8&&fat.fatType==32)||(nextCluster>=0xfff8&&fat.fatType==16)));

  fat_writeSector(file.currentSectorNr);
}
      cc:	10 92 1b 01 	sts	0x011B, r1
      d0:	4f e2       	ldi	r20, 0x2F	; 47
      d2:	51 e0       	ldi	r21, 0x01	; 1
      d4:	0c 94 cf 0a 	jmp	0x159e	; 0x159e <mmc_write_sector>
      d8:	08 95       	ret

000000da <fat_loadSector>:
      da:	cf 92       	push	r12
      dc:	df 92       	push	r13
      de:	ef 92       	push	r14
      e0:	ff 92       	push	r15
      e2:	0f 93       	push	r16
      e4:	1f 93       	push	r17
      e6:	cf 93       	push	r28
      e8:	df 93       	push	r29
      ea:	00 91 3f 03 	lds	r16, 0x033F
      ee:	10 91 40 03 	lds	r17, 0x0340
      f2:	20 91 41 03 	lds	r18, 0x0341
      f6:	30 91 42 03 	lds	r19, 0x0342
      fa:	06 17       	cp	r16, r22
      fc:	17 07       	cpc	r17, r23
      fe:	28 07       	cpc	r18, r24
     100:	39 07       	cpc	r19, r25
     102:	31 f1       	breq	.+76     	; 0x150 <fat_loadSector+0x76>
     104:	6b 01       	movw	r12, r22
     106:	7c 01       	movw	r14, r24
     108:	80 91 1b 01 	lds	r24, 0x011B
     10c:	81 30       	cpi	r24, 0x01	; 1
     10e:	41 f4       	brne	.+16     	; 0x120 <fat_loadSector+0x46>
     110:	10 92 1b 01 	sts	0x011B, r1
     114:	4f e2       	ldi	r20, 0x2F	; 47
     116:	51 e0       	ldi	r21, 0x01	; 1
     118:	c9 01       	movw	r24, r18
     11a:	b8 01       	movw	r22, r16
     11c:	0e 94 cf 0a 	call	0x159e	; 0x159e <mmc_write_sector>
     120:	c9 e3       	ldi	r28, 0x39	; 57
     122:	d3 e0       	ldi	r29, 0x03	; 3
     124:	8e 81       	ldd	r24, Y+6	; 0x06
     126:	9f 81       	ldd	r25, Y+7	; 0x07
     128:	a8 85       	ldd	r26, Y+8	; 0x08
     12a:	b9 85       	ldd	r27, Y+9	; 0x09
     12c:	80 93 17 01 	sts	0x0117, r24
     130:	90 93 18 01 	sts	0x0118, r25
     134:	a0 93 19 01 	sts	0x0119, r26
     138:	b0 93 1a 01 	sts	0x011A, r27
     13c:	4f e2       	ldi	r20, 0x2F	; 47
     13e:	51 e0       	ldi	r21, 0x01	; 1
     140:	c7 01       	movw	r24, r14
     142:	b6 01       	movw	r22, r12
     144:	0e 94 10 0b 	call	0x1620	; 0x1620 <mmc_read_sector>
     148:	ce 82       	std	Y+6, r12	; 0x06
     14a:	df 82       	std	Y+7, r13	; 0x07
     14c:	e8 86       	std	Y+8, r14	; 0x08
     14e:	f9 86       	std	Y+9, r15	; 0x09
     150:	81 e0       	ldi	r24, 0x01	; 1
     152:	df 91       	pop	r29
     154:	cf 91       	pop	r28
     156:	1f 91       	pop	r17
     158:	0f 91       	pop	r16
     15a:	ff 90       	pop	r15
     15c:	ef 90       	pop	r14
     15e:	df 90       	pop	r13
     160:	cf 90       	pop	r12
     162:	08 95       	ret

00000164 <fat_getFreeRowsOfCluster>:
     164:	9f 92       	push	r9
     166:	af 92       	push	r10
     168:	bf 92       	push	r11
     16a:	cf 92       	push	r12
     16c:	df 92       	push	r13
     16e:	ef 92       	push	r14
     170:	ff 92       	push	r15
     172:	0f 93       	push	r16
     174:	1f 93       	push	r17
     176:	cf 93       	push	r28
     178:	df 93       	push	r29
     17a:	6b 01       	movw	r12, r22
     17c:	7c 01       	movw	r14, r24
     17e:	c4 2f       	mov	r28, r20
     180:	b1 2c       	mov	r11, r1
     182:	91 2c       	mov	r9, r1
     184:	a1 2c       	mov	r10, r1
     186:	d0 e0       	ldi	r29, 0x00	; 0
     188:	07 e1       	ldi	r16, 0x17	; 23
     18a:	11 e0       	ldi	r17, 0x01	; 1
     18c:	c7 01       	movw	r24, r14
     18e:	b6 01       	movw	r22, r12
     190:	6b 0d       	add	r22, r11
     192:	71 1d       	adc	r23, r1
     194:	81 1d       	adc	r24, r1
     196:	91 1d       	adc	r25, r1
     198:	a0 df       	rcall	.-192    	; 0xda <fat_loadSector>
     19a:	30 91 16 01 	lds	r19, 0x0116
     19e:	89 2d       	mov	r24, r9
     1a0:	9a 2d       	mov	r25, r10
     1a2:	fc 01       	movw	r30, r24
     1a4:	e9 5e       	subi	r30, 0xE9	; 233
     1a6:	fe 4f       	sbci	r31, 0xFE	; 254
     1a8:	20 8d       	ldd	r18, Z+24	; 0x18
     1aa:	22 23       	and	r18, r18
     1ac:	11 f0       	breq	.+4      	; 0x1b2 <fat_getFreeRowsOfCluster+0x4e>
     1ae:	25 3e       	cpi	r18, 0xE5	; 229
     1b0:	89 f4       	brne	.+34     	; 0x1d4 <fat_getFreeRowsOfCluster+0x70>
     1b2:	3f 5f       	subi	r19, 0xFF	; 255
     1b4:	3c 13       	cpse	r19, r28
     1b6:	0f c0       	rjmp	.+30     	; 0x1d6 <fat_getFreeRowsOfCluster+0x72>
     1b8:	96 95       	lsr	r25
     1ba:	87 95       	ror	r24
     1bc:	92 95       	swap	r25
     1be:	82 95       	swap	r24
     1c0:	8f 70       	andi	r24, 0x0F	; 15
     1c2:	89 27       	eor	r24, r25
     1c4:	9f 70       	andi	r25, 0x0F	; 15
     1c6:	89 27       	eor	r24, r25
     1c8:	80 93 49 03 	sts	0x0349, r24
     1cc:	10 92 16 01 	sts	0x0116, r1
     1d0:	81 e0       	ldi	r24, 0x01	; 1
     1d2:	0e c0       	rjmp	.+28     	; 0x1f0 <fat_getFreeRowsOfCluster+0x8c>
     1d4:	3d 2f       	mov	r19, r29
     1d6:	80 96       	adiw	r24, 0x20	; 32
     1d8:	81 15       	cp	r24, r1
     1da:	22 e0       	ldi	r18, 0x02	; 2
     1dc:	92 07       	cpc	r25, r18
     1de:	09 f7       	brne	.-62     	; 0x1a2 <fat_getFreeRowsOfCluster+0x3e>
     1e0:	30 93 16 01 	sts	0x0116, r19
     1e4:	b3 94       	inc	r11
     1e6:	f8 01       	movw	r30, r16
     1e8:	85 89       	ldd	r24, Z+21	; 0x15
     1ea:	b8 16       	cp	r11, r24
     1ec:	78 f2       	brcs	.-98     	; 0x18c <fat_getFreeRowsOfCluster+0x28>
     1ee:	80 e0       	ldi	r24, 0x00	; 0
     1f0:	df 91       	pop	r29
     1f2:	cf 91       	pop	r28
     1f4:	1f 91       	pop	r17
     1f6:	0f 91       	pop	r16
     1f8:	ff 90       	pop	r15
     1fa:	ef 90       	pop	r14
     1fc:	df 90       	pop	r13
     1fe:	cf 90       	pop	r12
     200:	bf 90       	pop	r11
     202:	af 90       	pop	r10
     204:	9f 90       	pop	r9
     206:	08 95       	ret

00000208 <fat_clustToSec>:
     208:	0f 93       	push	r16
     20a:	1f 93       	push	r17
     20c:	9b 01       	movw	r18, r22
     20e:	ac 01       	movw	r20, r24
     210:	22 50       	subi	r18, 0x02	; 2
     212:	31 09       	sbc	r19, r1
     214:	41 09       	sbc	r20, r1
     216:	51 09       	sbc	r21, r1
     218:	e7 e1       	ldi	r30, 0x17	; 23
     21a:	f1 e0       	ldi	r31, 0x01	; 1
     21c:	a5 89       	ldd	r26, Z+21	; 0x15
     21e:	b0 e0       	ldi	r27, 0x00	; 0
     220:	0e 94 75 0b 	call	0x16ea	; 0x16ea <__muluhisi3>
     224:	05 85       	ldd	r16, Z+13	; 0x0d
     226:	16 85       	ldd	r17, Z+14	; 0x0e
     228:	27 85       	ldd	r18, Z+15	; 0x0f
     22a:	30 89       	ldd	r19, Z+16	; 0x10
     22c:	60 0f       	add	r22, r16
     22e:	71 1f       	adc	r23, r17
     230:	82 1f       	adc	r24, r18
     232:	93 1f       	adc	r25, r19
     234:	1f 91       	pop	r17
     236:	0f 91       	pop	r16
     238:	08 95       	ret

0000023a <fat_secToClust>:
     23a:	0f 93       	push	r16
     23c:	1f 93       	push	r17
     23e:	e7 e1       	ldi	r30, 0x17	; 23
     240:	f1 e0       	ldi	r31, 0x01	; 1
     242:	05 85       	ldd	r16, Z+13	; 0x0d
     244:	16 85       	ldd	r17, Z+14	; 0x0e
     246:	27 85       	ldd	r18, Z+15	; 0x0f
     248:	30 89       	ldd	r19, Z+16	; 0x10
     24a:	60 1b       	sub	r22, r16
     24c:	71 0b       	sbc	r23, r17
     24e:	82 0b       	sbc	r24, r18
     250:	93 0b       	sbc	r25, r19
     252:	25 89       	ldd	r18, Z+21	; 0x15
     254:	30 e0       	ldi	r19, 0x00	; 0
     256:	40 e0       	ldi	r20, 0x00	; 0
     258:	50 e0       	ldi	r21, 0x00	; 0
     25a:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <__udivmodsi4>
     25e:	ca 01       	movw	r24, r20
     260:	b9 01       	movw	r22, r18
     262:	6e 5f       	subi	r22, 0xFE	; 254
     264:	7f 4f       	sbci	r23, 0xFF	; 255
     266:	8f 4f       	sbci	r24, 0xFF	; 255
     268:	9f 4f       	sbci	r25, 0xFF	; 255
     26a:	1f 91       	pop	r17
     26c:	0f 91       	pop	r16
     26e:	08 95       	ret

00000270 <fat_loadRowOfSector>:
     270:	0f 93       	push	r16
     272:	1f 93       	push	r17
     274:	e9 e3       	ldi	r30, 0x39	; 57
     276:	f3 e0       	ldi	r31, 0x03	; 3
     278:	dc 01       	movw	r26, r24
     27a:	ad 5b       	subi	r26, 0xBD	; 189
     27c:	be 4f       	sbci	r27, 0xFE	; 254
     27e:	4d 91       	ld	r20, X+
     280:	5c 91       	ld	r21, X
     282:	60 e0       	ldi	r22, 0x00	; 0
     284:	70 e0       	ldi	r23, 0x00	; 0
     286:	ba 01       	movw	r22, r20
     288:	55 27       	eor	r21, r21
     28a:	44 27       	eor	r20, r20
     28c:	dc 01       	movw	r26, r24
     28e:	a7 5b       	subi	r26, 0xB7	; 183
     290:	be 4f       	sbci	r27, 0xFE	; 254
     292:	0d 91       	ld	r16, X+
     294:	1c 91       	ld	r17, X
     296:	20 e0       	ldi	r18, 0x00	; 0
     298:	30 e0       	ldi	r19, 0x00	; 0
     29a:	40 2b       	or	r20, r16
     29c:	51 2b       	or	r21, r17
     29e:	62 2b       	or	r22, r18
     2a0:	73 2b       	or	r23, r19
     2a2:	41 8b       	std	Z+17, r20	; 0x11
     2a4:	52 8b       	std	Z+18, r21	; 0x12
     2a6:	63 8b       	std	Z+19, r22	; 0x13
     2a8:	74 8b       	std	Z+20, r23	; 0x14
     2aa:	dc 01       	movw	r26, r24
     2ac:	a5 5b       	subi	r26, 0xB5	; 181
     2ae:	be 4f       	sbci	r27, 0xFE	; 254
     2b0:	8d 91       	ld	r24, X+
     2b2:	9d 91       	ld	r25, X+
     2b4:	0d 90       	ld	r0, X+
     2b6:	bc 91       	ld	r27, X
     2b8:	a0 2d       	mov	r26, r0
     2ba:	82 87       	std	Z+10, r24	; 0x0a
     2bc:	93 87       	std	Z+11, r25	; 0x0b
     2be:	a4 87       	std	Z+12, r26	; 0x0c
     2c0:	b5 87       	std	Z+13, r27	; 0x0d
     2c2:	1f 91       	pop	r17
     2c4:	0f 91       	pop	r16
     2c6:	08 95       	ret

000002c8 <fat_loadFileDataFromCluster>:
     2c8:	2f 92       	push	r2
     2ca:	3f 92       	push	r3
     2cc:	4f 92       	push	r4
     2ce:	5f 92       	push	r5
     2d0:	6f 92       	push	r6
     2d2:	7f 92       	push	r7
     2d4:	8f 92       	push	r8
     2d6:	9f 92       	push	r9
     2d8:	af 92       	push	r10
     2da:	bf 92       	push	r11
     2dc:	cf 92       	push	r12
     2de:	df 92       	push	r13
     2e0:	ef 92       	push	r14
     2e2:	ff 92       	push	r15
     2e4:	0f 93       	push	r16
     2e6:	1f 93       	push	r17
     2e8:	cf 93       	push	r28
     2ea:	df 93       	push	r29
     2ec:	2b 01       	movw	r4, r22
     2ee:	3c 01       	movw	r6, r24
     2f0:	5a 01       	movw	r10, r20
     2f2:	31 2c       	mov	r3, r1
     2f4:	21 2c       	mov	r2, r1
     2f6:	81 2c       	mov	r8, r1
     2f8:	4f e2       	ldi	r20, 0x2F	; 47
     2fa:	51 e0       	ldi	r21, 0x01	; 1
     2fc:	73 01       	movw	r14, r6
     2fe:	62 01       	movw	r12, r4
     300:	c3 0c       	add	r12, r3
     302:	d1 1c       	adc	r13, r1
     304:	e1 1c       	adc	r14, r1
     306:	f1 1c       	adc	r15, r1
     308:	c7 01       	movw	r24, r14
     30a:	b6 01       	movw	r22, r12
     30c:	0e 94 10 0b 	call	0x1620	; 0x1620 <mmc_read_sector>
     310:	c0 92 3f 03 	sts	0x033F, r12
     314:	d0 92 40 03 	sts	0x0340, r13
     318:	e0 92 41 03 	sts	0x0341, r14
     31c:	f0 92 42 03 	sts	0x0342, r15
     320:	0a e3       	ldi	r16, 0x3A	; 58
     322:	11 e0       	ldi	r17, 0x01	; 1
     324:	e2 2c       	mov	r14, r2
     326:	f1 2c       	mov	r15, r1
     328:	f8 01       	movw	r30, r16
     32a:	3b 97       	sbiw	r30, 0x0b	; 11
     32c:	80 81       	ld	r24, Z
     32e:	88 23       	and	r24, r24
     330:	09 f4       	brne	.+2      	; 0x334 <fat_loadFileDataFromCluster+0x6c>
     332:	59 c0       	rjmp	.+178    	; 0x3e6 <fat_loadFileDataFromCluster+0x11e>
     334:	f8 01       	movw	r30, r16
     336:	90 81       	ld	r25, Z
     338:	90 31       	cpi	r25, 0x10	; 16
     33a:	19 f0       	breq	.+6      	; 0x342 <fat_loadFileDataFromCluster+0x7a>
     33c:	90 32       	cpi	r25, 0x20	; 32
     33e:	09 f0       	breq	.+2      	; 0x342 <fat_loadFileDataFromCluster+0x7a>
     340:	41 c0       	rjmp	.+130    	; 0x3c4 <fat_loadFileDataFromCluster+0xfc>
     342:	85 3e       	cpi	r24, 0xE5	; 229
     344:	09 f4       	brne	.+2      	; 0x348 <fat_loadFileDataFromCluster+0x80>
     346:	3e c0       	rjmp	.+124    	; 0x3c4 <fat_loadFileDataFromCluster+0xfc>
     348:	98 2c       	mov	r9, r8
     34a:	c8 2d       	mov	r28, r8
     34c:	c7 01       	movw	r24, r14
     34e:	89 5e       	subi	r24, 0xE9	; 233
     350:	9e 4f       	sbci	r25, 0xFE	; 254
     352:	6c 01       	movw	r12, r24
     354:	f6 01       	movw	r30, r12
     356:	ec 0f       	add	r30, r28
     358:	f1 1d       	adc	r31, r1
     35a:	d0 8d       	ldd	r29, Z+24	; 0x18
     35c:	d0 32       	cpi	r29, 0x20	; 32
     35e:	11 f4       	brne	.+4      	; 0x364 <fat_loadFileDataFromCluster+0x9c>
     360:	cf 5f       	subi	r28, 0xFF	; 255
     362:	14 c0       	rjmp	.+40     	; 0x38c <fat_loadFileDataFromCluster+0xc4>
     364:	f5 01       	movw	r30, r10
     366:	e9 0d       	add	r30, r9
     368:	f1 1d       	adc	r31, r1
     36a:	80 81       	ld	r24, Z
     36c:	8e 32       	cpi	r24, 0x2E	; 46
     36e:	21 f4       	brne	.+8      	; 0x378 <fat_loadFileDataFromCluster+0xb0>
     370:	c8 30       	cpi	r28, 0x08	; 8
     372:	70 f0       	brcs	.+28     	; 0x390 <fat_loadFileDataFromCluster+0xc8>
     374:	93 94       	inc	r9
     376:	0a c0       	rjmp	.+20     	; 0x38c <fat_loadFileDataFromCluster+0xc4>
     378:	90 e0       	ldi	r25, 0x00	; 0
     37a:	0e 94 8e 0b 	call	0x171c	; 0x171c <toupper>
     37e:	2d 2f       	mov	r18, r29
     380:	30 e0       	ldi	r19, 0x00	; 0
     382:	28 17       	cp	r18, r24
     384:	39 07       	cpc	r19, r25
     386:	21 f4       	brne	.+8      	; 0x390 <fat_loadFileDataFromCluster+0xc8>
     388:	93 94       	inc	r9
     38a:	cf 5f       	subi	r28, 0xFF	; 255
     38c:	cb 30       	cpi	r28, 0x0B	; 11
     38e:	10 f3       	brcs	.-60     	; 0x354 <fat_loadFileDataFromCluster+0x8c>
     390:	cb 30       	cpi	r28, 0x0B	; 11
     392:	c1 f4       	brne	.+48     	; 0x3c4 <fat_loadFileDataFromCluster+0xfc>
     394:	c9 e3       	ldi	r28, 0x39	; 57
     396:	d3 e0       	ldi	r29, 0x03	; 3
     398:	c7 01       	movw	r24, r14
     39a:	96 95       	lsr	r25
     39c:	87 95       	ror	r24
     39e:	92 95       	swap	r25
     3a0:	82 95       	swap	r24
     3a2:	8f 70       	andi	r24, 0x0F	; 15
     3a4:	89 27       	eor	r24, r25
     3a6:	9f 70       	andi	r25, 0x0F	; 15
     3a8:	89 27       	eor	r24, r25
     3aa:	88 8b       	std	Y+16, r24	; 0x10
     3ac:	c7 01       	movw	r24, r14
     3ae:	60 df       	rcall	.-320    	; 0x270 <fat_loadRowOfSector>
     3b0:	8e 81       	ldd	r24, Y+6	; 0x06
     3b2:	9f 81       	ldd	r25, Y+7	; 0x07
     3b4:	a8 85       	ldd	r26, Y+8	; 0x08
     3b6:	b9 85       	ldd	r27, Y+9	; 0x09
     3b8:	8d 8b       	std	Y+21, r24	; 0x15
     3ba:	9e 8b       	std	Y+22, r25	; 0x16
     3bc:	af 8b       	std	Y+23, r26	; 0x17
     3be:	b8 8f       	std	Y+24, r27	; 0x18
     3c0:	81 e0       	ldi	r24, 0x01	; 1
     3c2:	11 c0       	rjmp	.+34     	; 0x3e6 <fat_loadFileDataFromCluster+0x11e>
     3c4:	90 e2       	ldi	r25, 0x20	; 32
     3c6:	e9 0e       	add	r14, r25
     3c8:	f1 1c       	adc	r15, r1
     3ca:	00 5e       	subi	r16, 0xE0	; 224
     3cc:	1f 4f       	sbci	r17, 0xFF	; 255
     3ce:	e1 14       	cp	r14, r1
     3d0:	e2 e0       	ldi	r30, 0x02	; 2
     3d2:	fe 06       	cpc	r15, r30
     3d4:	09 f0       	breq	.+2      	; 0x3d8 <fat_loadFileDataFromCluster+0x110>
     3d6:	a8 cf       	rjmp	.-176    	; 0x328 <fat_loadFileDataFromCluster+0x60>
     3d8:	33 94       	inc	r3
     3da:	80 91 2c 01 	lds	r24, 0x012C
     3de:	38 16       	cp	r3, r24
     3e0:	08 f4       	brcc	.+2      	; 0x3e4 <fat_loadFileDataFromCluster+0x11c>
     3e2:	8a cf       	rjmp	.-236    	; 0x2f8 <fat_loadFileDataFromCluster+0x30>
     3e4:	80 e0       	ldi	r24, 0x00	; 0
     3e6:	df 91       	pop	r29
     3e8:	cf 91       	pop	r28
     3ea:	1f 91       	pop	r17
     3ec:	0f 91       	pop	r16
     3ee:	ff 90       	pop	r15
     3f0:	ef 90       	pop	r14
     3f2:	df 90       	pop	r13
     3f4:	cf 90       	pop	r12
     3f6:	bf 90       	pop	r11
     3f8:	af 90       	pop	r10
     3fa:	9f 90       	pop	r9
     3fc:	8f 90       	pop	r8
     3fe:	7f 90       	pop	r7
     400:	6f 90       	pop	r6
     402:	5f 90       	pop	r5
     404:	4f 90       	pop	r4
     406:	3f 90       	pop	r3
     408:	2f 90       	pop	r2
     40a:	08 95       	ret

0000040c <fat_makeSfnDataEntry>:
     40c:	2f 92       	push	r2
     40e:	3f 92       	push	r3
     410:	5f 92       	push	r5
     412:	6f 92       	push	r6
     414:	7f 92       	push	r7
     416:	8f 92       	push	r8
     418:	9f 92       	push	r9
     41a:	af 92       	push	r10
     41c:	bf 92       	push	r11
     41e:	cf 92       	push	r12
     420:	df 92       	push	r13
     422:	ef 92       	push	r14
     424:	ff 92       	push	r15
     426:	0f 93       	push	r16
     428:	1f 93       	push	r17
     42a:	cf 93       	push	r28
     42c:	df 93       	push	r29
     42e:	00 d0       	rcall	.+0      	; 0x430 <fat_makeSfnDataEntry+0x24>
     430:	00 d0       	rcall	.+0      	; 0x432 <fat_makeSfnDataEntry+0x26>
     432:	cd b7       	in	r28, 0x3d	; 61
     434:	de b7       	in	r29, 0x3e	; 62
     436:	9c 83       	std	Y+4, r25	; 0x04
     438:	8b 83       	std	Y+3, r24	; 0x03
     43a:	56 2e       	mov	r5, r22
     43c:	49 01       	movw	r8, r18
     43e:	5a 01       	movw	r10, r20
     440:	67 01       	movw	r12, r14
     442:	78 01       	movw	r14, r16
     444:	81 e0       	ldi	r24, 0x01	; 1
     446:	80 93 1b 01 	sts	0x011B, r24
     44a:	00 91 49 03 	lds	r16, 0x0349
     44e:	80 e2       	ldi	r24, 0x20	; 32
     450:	08 9f       	mul	r16, r24
     452:	80 01       	movw	r16, r0
     454:	11 24       	eor	r1, r1
     456:	d8 01       	movw	r26, r16
     458:	a1 5d       	subi	r26, 0xD1	; 209
     45a:	be 4f       	sbci	r27, 0xFE	; 254
     45c:	ba 83       	std	Y+2, r27	; 0x02
     45e:	a9 83       	std	Y+1, r26	; 0x01
     460:	fd 01       	movw	r30, r26
     462:	cd 01       	movw	r24, r26
     464:	45 96       	adiw	r24, 0x15	; 21
     466:	11 92       	st	Z+, r1
     468:	e8 17       	cp	r30, r24
     46a:	f9 07       	cpc	r31, r25
     46c:	e1 f7       	brne	.-8      	; 0x466 <fat_makeSfnDataEntry+0x5a>
     46e:	69 80       	ldd	r6, Y+1	; 0x01
     470:	7a 80       	ldd	r7, Y+2	; 0x02
     472:	31 2c       	mov	r3, r1
     474:	10 e0       	ldi	r17, 0x00	; 0
     476:	68 94       	set
     478:	22 24       	eor	r2, r2
     47a:	25 f8       	bld	r2, 5
     47c:	f3 01       	movw	r30, r6
     47e:	20 82       	st	Z, r2
     480:	18 30       	cpi	r17, 0x08	; 8
     482:	a8 f5       	brcc	.+106    	; 0x4ee <fat_makeSfnDataEntry+0xe2>
     484:	eb 81       	ldd	r30, Y+3	; 0x03
     486:	fc 81       	ldd	r31, Y+4	; 0x04
     488:	e3 0d       	add	r30, r3
     48a:	f1 1d       	adc	r31, r1
     48c:	80 81       	ld	r24, Z
     48e:	8e 32       	cpi	r24, 0x2E	; 46
     490:	89 f1       	breq	.+98     	; 0x4f4 <fat_makeSfnDataEntry+0xe8>
     492:	90 e0       	ldi	r25, 0x00	; 0
     494:	0e 94 8e 0b 	call	0x171c	; 0x171c <toupper>
     498:	d3 01       	movw	r26, r6
     49a:	8c 93       	st	X, r24
     49c:	33 94       	inc	r3
     49e:	2a c0       	rjmp	.+84     	; 0x4f4 <fat_makeSfnDataEntry+0xe8>
     4a0:	33 94       	inc	r3
     4a2:	eb 81       	ldd	r30, Y+3	; 0x03
     4a4:	fc 81       	ldd	r31, Y+4	; 0x04
     4a6:	e3 0d       	add	r30, r3
     4a8:	f1 1d       	adc	r31, r1
     4aa:	80 81       	ld	r24, Z
     4ac:	88 23       	and	r24, r24
     4ae:	31 f0       	breq	.+12     	; 0x4bc <fat_makeSfnDataEntry+0xb0>
     4b0:	90 e0       	ldi	r25, 0x00	; 0
     4b2:	0e 94 8e 0b 	call	0x171c	; 0x171c <toupper>
     4b6:	f3 01       	movw	r30, r6
     4b8:	80 83       	st	Z, r24
     4ba:	33 94       	inc	r3
     4bc:	ff ef       	ldi	r31, 0xFF	; 255
     4be:	6f 1a       	sub	r6, r31
     4c0:	7f 0a       	sbc	r7, r31
     4c2:	1f 5f       	subi	r17, 0xFF	; 255
     4c4:	1b 30       	cpi	r17, 0x0B	; 11
     4c6:	d1 f6       	brne	.-76     	; 0x47c <fat_makeSfnDataEntry+0x70>
     4c8:	a9 81       	ldd	r26, Y+1	; 0x01
     4ca:	ba 81       	ldd	r27, Y+2	; 0x02
     4cc:	1b 96       	adiw	r26, 0x0b	; 11
     4ce:	5c 92       	st	X, r5
     4d0:	1b 97       	sbiw	r26, 0x0b	; 11
     4d2:	55 96       	adiw	r26, 0x15	; 21
     4d4:	bc 92       	st	X, r11
     4d6:	ae 92       	st	-X, r10
     4d8:	54 97       	sbiw	r26, 0x14	; 20
     4da:	5b 96       	adiw	r26, 0x1b	; 27
     4dc:	9c 92       	st	X, r9
     4de:	8e 92       	st	-X, r8
     4e0:	5a 97       	sbiw	r26, 0x1a	; 26
     4e2:	fd 01       	movw	r30, r26
     4e4:	c4 8e       	std	Z+28, r12	; 0x1c
     4e6:	d5 8e       	std	Z+29, r13	; 0x1d
     4e8:	e6 8e       	std	Z+30, r14	; 0x1e
     4ea:	f7 8e       	std	Z+31, r15	; 0x1f
     4ec:	06 c0       	rjmp	.+12     	; 0x4fa <fat_makeSfnDataEntry+0xee>
     4ee:	18 30       	cpi	r17, 0x08	; 8
     4f0:	c1 f6       	brne	.-80     	; 0x4a2 <fat_makeSfnDataEntry+0x96>
     4f2:	d6 cf       	rjmp	.-84     	; 0x4a0 <fat_makeSfnDataEntry+0x94>
     4f4:	18 30       	cpi	r17, 0x08	; 8
     4f6:	11 f7       	brne	.-60     	; 0x4bc <fat_makeSfnDataEntry+0xb0>
     4f8:	d3 cf       	rjmp	.-90     	; 0x4a0 <fat_makeSfnDataEntry+0x94>
     4fa:	0f 90       	pop	r0
     4fc:	0f 90       	pop	r0
     4fe:	0f 90       	pop	r0
     500:	0f 90       	pop	r0
     502:	df 91       	pop	r29
     504:	cf 91       	pop	r28
     506:	1f 91       	pop	r17
     508:	0f 91       	pop	r16
     50a:	ff 90       	pop	r15
     50c:	ef 90       	pop	r14
     50e:	df 90       	pop	r13
     510:	cf 90       	pop	r12
     512:	bf 90       	pop	r11
     514:	af 90       	pop	r10
     516:	9f 90       	pop	r9
     518:	8f 90       	pop	r8
     51a:	7f 90       	pop	r7
     51c:	6f 90       	pop	r6
     51e:	5f 90       	pop	r5
     520:	3f 90       	pop	r3
     522:	2f 90       	pop	r2
     524:	08 95       	ret

00000526 <fat_getNextCluster>:
     526:	cf 92       	push	r12
     528:	df 92       	push	r13
     52a:	ef 92       	push	r14
     52c:	ff 92       	push	r15
     52e:	0f 93       	push	r16
     530:	1f 93       	push	r17
     532:	20 91 2d 01 	lds	r18, 0x012D
     536:	20 31       	cpi	r18, 0x10	; 16
     538:	81 f5       	brne	.+96     	; 0x59a <fat_getNextCluster+0x74>
     53a:	6b 01       	movw	r12, r22
     53c:	7c 01       	movw	r14, r24
     53e:	cc 0c       	add	r12, r12
     540:	dd 1c       	adc	r13, r13
     542:	ee 1c       	adc	r14, r14
     544:	ff 1c       	adc	r15, r15
     546:	b7 01       	movw	r22, r14
     548:	a6 01       	movw	r20, r12
     54a:	03 2e       	mov	r0, r19
     54c:	39 e0       	ldi	r19, 0x09	; 9
     54e:	76 95       	lsr	r23
     550:	67 95       	ror	r22
     552:	57 95       	ror	r21
     554:	47 95       	ror	r20
     556:	3a 95       	dec	r19
     558:	d1 f7       	brne	.-12     	; 0x54e <fat_getNextCluster+0x28>
     55a:	30 2d       	mov	r19, r0
     55c:	80 91 28 01 	lds	r24, 0x0128
     560:	90 91 29 01 	lds	r25, 0x0129
     564:	a0 91 2a 01 	lds	r26, 0x012A
     568:	b0 91 2b 01 	lds	r27, 0x012B
     56c:	8a 01       	movw	r16, r20
     56e:	9b 01       	movw	r18, r22
     570:	08 0f       	add	r16, r24
     572:	19 1f       	adc	r17, r25
     574:	2a 1f       	adc	r18, r26
     576:	3b 1f       	adc	r19, r27
     578:	c9 01       	movw	r24, r18
     57a:	b8 01       	movw	r22, r16
     57c:	ae dd       	rcall	.-1188   	; 0xda <fat_loadSector>
     57e:	11 e0       	ldi	r17, 0x01	; 1
     580:	d1 22       	and	r13, r17
     582:	ee 24       	eor	r14, r14
     584:	ff 24       	eor	r15, r15
     586:	c6 01       	movw	r24, r12
     588:	48 96       	adiw	r24, 0x18	; 24
     58a:	fc 01       	movw	r30, r24
     58c:	e9 5e       	subi	r30, 0xE9	; 233
     58e:	fe 4f       	sbci	r31, 0xFE	; 254
     590:	60 81       	ld	r22, Z
     592:	71 81       	ldd	r23, Z+1	; 0x01
     594:	80 e0       	ldi	r24, 0x00	; 0
     596:	90 e0       	ldi	r25, 0x00	; 0
     598:	33 c0       	rjmp	.+102    	; 0x600 <fat_getNextCluster+0xda>
     59a:	6b 01       	movw	r12, r22
     59c:	7c 01       	movw	r14, r24
     59e:	cc 0c       	add	r12, r12
     5a0:	dd 1c       	adc	r13, r13
     5a2:	ee 1c       	adc	r14, r14
     5a4:	ff 1c       	adc	r15, r15
     5a6:	cc 0c       	add	r12, r12
     5a8:	dd 1c       	adc	r13, r13
     5aa:	ee 1c       	adc	r14, r14
     5ac:	ff 1c       	adc	r15, r15
     5ae:	b7 01       	movw	r22, r14
     5b0:	a6 01       	movw	r20, r12
     5b2:	03 2e       	mov	r0, r19
     5b4:	39 e0       	ldi	r19, 0x09	; 9
     5b6:	76 95       	lsr	r23
     5b8:	67 95       	ror	r22
     5ba:	57 95       	ror	r21
     5bc:	47 95       	ror	r20
     5be:	3a 95       	dec	r19
     5c0:	d1 f7       	brne	.-12     	; 0x5b6 <fat_getNextCluster+0x90>
     5c2:	30 2d       	mov	r19, r0
     5c4:	80 91 28 01 	lds	r24, 0x0128
     5c8:	90 91 29 01 	lds	r25, 0x0129
     5cc:	a0 91 2a 01 	lds	r26, 0x012A
     5d0:	b0 91 2b 01 	lds	r27, 0x012B
     5d4:	8a 01       	movw	r16, r20
     5d6:	9b 01       	movw	r18, r22
     5d8:	08 0f       	add	r16, r24
     5da:	19 1f       	adc	r17, r25
     5dc:	2a 1f       	adc	r18, r26
     5de:	3b 1f       	adc	r19, r27
     5e0:	c9 01       	movw	r24, r18
     5e2:	b8 01       	movw	r22, r16
     5e4:	7a dd       	rcall	.-1292   	; 0xda <fat_loadSector>
     5e6:	11 e0       	ldi	r17, 0x01	; 1
     5e8:	d1 22       	and	r13, r17
     5ea:	ee 24       	eor	r14, r14
     5ec:	ff 24       	eor	r15, r15
     5ee:	c6 01       	movw	r24, r12
     5f0:	48 96       	adiw	r24, 0x18	; 24
     5f2:	fc 01       	movw	r30, r24
     5f4:	e9 5e       	subi	r30, 0xE9	; 233
     5f6:	fe 4f       	sbci	r31, 0xFE	; 254
     5f8:	60 81       	ld	r22, Z
     5fa:	71 81       	ldd	r23, Z+1	; 0x01
     5fc:	82 81       	ldd	r24, Z+2	; 0x02
     5fe:	93 81       	ldd	r25, Z+3	; 0x03
     600:	1f 91       	pop	r17
     602:	0f 91       	pop	r16
     604:	ff 90       	pop	r15
     606:	ef 90       	pop	r14
     608:	df 90       	pop	r13
     60a:	cf 90       	pop	r12
     60c:	08 95       	ret

0000060e <fat_loadFileDataFromDir>:
     60e:	cf 92       	push	r12
     610:	df 92       	push	r13
     612:	ef 92       	push	r14
     614:	ff 92       	push	r15
     616:	0f 93       	push	r16
     618:	1f 93       	push	r17
     61a:	cf 93       	push	r28
     61c:	df 93       	push	r29
     61e:	8c 01       	movw	r16, r24
     620:	c0 90 1c 01 	lds	r12, 0x011C
     624:	d0 90 1d 01 	lds	r13, 0x011D
     628:	e0 90 1e 01 	lds	r14, 0x011E
     62c:	f0 90 1f 01 	lds	r15, 0x011F
     630:	c1 14       	cp	r12, r1
     632:	d1 04       	cpc	r13, r1
     634:	e1 04       	cpc	r14, r1
     636:	f1 04       	cpc	r15, r1
     638:	21 f5       	brne	.+72     	; 0x682 <fat_loadFileDataFromDir+0x74>
     63a:	80 91 2d 01 	lds	r24, 0x012D
     63e:	80 31       	cpi	r24, 0x10	; 16
     640:	c1 f4       	brne	.+48     	; 0x672 <fat_loadFileDataFromDir+0x64>
     642:	f1 2c       	mov	r15, r1
     644:	c7 e1       	ldi	r28, 0x17	; 23
     646:	d1 e0       	ldi	r29, 0x01	; 1
     648:	89 85       	ldd	r24, Y+9	; 0x09
     64a:	9a 85       	ldd	r25, Y+10	; 0x0a
     64c:	ab 85       	ldd	r26, Y+11	; 0x0b
     64e:	bc 85       	ldd	r27, Y+12	; 0x0c
     650:	bc 01       	movw	r22, r24
     652:	cd 01       	movw	r24, r26
     654:	6f 0d       	add	r22, r15
     656:	71 1d       	adc	r23, r1
     658:	81 1d       	adc	r24, r1
     65a:	91 1d       	adc	r25, r1
     65c:	a8 01       	movw	r20, r16
     65e:	34 de       	rcall	.-920    	; 0x2c8 <fat_loadFileDataFromCluster>
     660:	81 30       	cpi	r24, 0x01	; 1
     662:	b1 f1       	breq	.+108    	; 0x6d0 <fat_loadFileDataFromDir+0xc2>
     664:	8d 89       	ldd	r24, Y+21	; 0x15
     666:	f8 0e       	add	r15, r24
     668:	8f e1       	ldi	r24, 0x1F	; 31
     66a:	8f 15       	cp	r24, r15
     66c:	68 f7       	brcc	.-38     	; 0x648 <fat_loadFileDataFromDir+0x3a>
     66e:	80 e0       	ldi	r24, 0x00	; 0
     670:	2f c0       	rjmp	.+94     	; 0x6d0 <fat_loadFileDataFromDir+0xc2>
     672:	c0 90 20 01 	lds	r12, 0x0120
     676:	d0 90 21 01 	lds	r13, 0x0121
     67a:	e0 90 22 01 	lds	r14, 0x0122
     67e:	f0 90 23 01 	lds	r15, 0x0123
     682:	c7 e1       	ldi	r28, 0x17	; 23
     684:	d1 e0       	ldi	r29, 0x01	; 1
     686:	0c c0       	rjmp	.+24     	; 0x6a0 <fat_loadFileDataFromDir+0x92>
     688:	c7 01       	movw	r24, r14
     68a:	b6 01       	movw	r22, r12
     68c:	bd dd       	rcall	.-1158   	; 0x208 <fat_clustToSec>
     68e:	a8 01       	movw	r20, r16
     690:	1b de       	rcall	.-970    	; 0x2c8 <fat_loadFileDataFromCluster>
     692:	81 30       	cpi	r24, 0x01	; 1
     694:	e9 f0       	breq	.+58     	; 0x6d0 <fat_loadFileDataFromDir+0xc2>
     696:	c7 01       	movw	r24, r14
     698:	b6 01       	movw	r22, r12
     69a:	45 df       	rcall	.-374    	; 0x526 <fat_getNextCluster>
     69c:	6b 01       	movw	r12, r22
     69e:	7c 01       	movw	r14, r24
     6a0:	88 ef       	ldi	r24, 0xF8	; 248
     6a2:	c8 16       	cp	r12, r24
     6a4:	8f ef       	ldi	r24, 0xFF	; 255
     6a6:	d8 06       	cpc	r13, r24
     6a8:	e8 06       	cpc	r14, r24
     6aa:	8f e0       	ldi	r24, 0x0F	; 15
     6ac:	f8 06       	cpc	r15, r24
     6ae:	18 f0       	brcs	.+6      	; 0x6b6 <fat_loadFileDataFromDir+0xa8>
     6b0:	8e 89       	ldd	r24, Y+22	; 0x16
     6b2:	80 32       	cpi	r24, 0x20	; 32
     6b4:	61 f0       	breq	.+24     	; 0x6ce <fat_loadFileDataFromDir+0xc0>
     6b6:	88 ef       	ldi	r24, 0xF8	; 248
     6b8:	c8 16       	cp	r12, r24
     6ba:	8f ef       	ldi	r24, 0xFF	; 255
     6bc:	d8 06       	cpc	r13, r24
     6be:	e1 04       	cpc	r14, r1
     6c0:	f1 04       	cpc	r15, r1
     6c2:	10 f3       	brcs	.-60     	; 0x688 <fat_loadFileDataFromDir+0x7a>
     6c4:	8e 89       	ldd	r24, Y+22	; 0x16
     6c6:	80 31       	cpi	r24, 0x10	; 16
     6c8:	f9 f6       	brne	.-66     	; 0x688 <fat_loadFileDataFromDir+0x7a>
     6ca:	80 e0       	ldi	r24, 0x00	; 0
     6cc:	01 c0       	rjmp	.+2      	; 0x6d0 <fat_loadFileDataFromDir+0xc2>
     6ce:	80 e0       	ldi	r24, 0x00	; 0
     6d0:	df 91       	pop	r29
     6d2:	cf 91       	pop	r28
     6d4:	1f 91       	pop	r17
     6d6:	0f 91       	pop	r16
     6d8:	ff 90       	pop	r15
     6da:	ef 90       	pop	r14
     6dc:	df 90       	pop	r13
     6de:	cf 90       	pop	r12
     6e0:	08 95       	ret

000006e2 <fat_getFatChainClustersInRow>:
     6e2:	2f 92       	push	r2
     6e4:	3f 92       	push	r3
     6e6:	4f 92       	push	r4
     6e8:	5f 92       	push	r5
     6ea:	6f 92       	push	r6
     6ec:	7f 92       	push	r7
     6ee:	8f 92       	push	r8
     6f0:	9f 92       	push	r9
     6f2:	af 92       	push	r10
     6f4:	bf 92       	push	r11
     6f6:	cf 92       	push	r12
     6f8:	df 92       	push	r13
     6fa:	ef 92       	push	r14
     6fc:	ff 92       	push	r15
     6fe:	0f 93       	push	r16
     700:	1f 93       	push	r17
     702:	cf 93       	push	r28
     704:	df 93       	push	r29
     706:	2b 01       	movw	r4, r22
     708:	3c 01       	movw	r6, r24
     70a:	7e dd       	rcall	.-1284   	; 0x208 <fat_clustToSec>
     70c:	ef e2       	ldi	r30, 0x2F	; 47
     70e:	f3 e0       	ldi	r31, 0x03	; 3
     710:	60 83       	st	Z, r22
     712:	71 83       	std	Z+1, r23	; 0x01
     714:	82 83       	std	Z+2, r24	; 0x02
     716:	93 83       	std	Z+3, r25	; 0x03
     718:	80 91 2c 01 	lds	r24, 0x012C
     71c:	90 e0       	ldi	r25, 0x00	; 0
     71e:	95 83       	std	Z+5, r25	; 0x05
     720:	84 83       	std	Z+4, r24	; 0x04
     722:	73 01       	movw	r14, r6
     724:	62 01       	movw	r12, r4
     726:	00 e0       	ldi	r16, 0x00	; 0
     728:	10 e0       	ldi	r17, 0x00	; 0
     72a:	ef 01       	movw	r28, r30
     72c:	0f 2e       	mov	r0, r31
     72e:	f7 e1       	ldi	r31, 0x17	; 23
     730:	2f 2e       	mov	r2, r31
     732:	f1 e0       	ldi	r31, 0x01	; 1
     734:	3f 2e       	mov	r3, r31
     736:	f0 2d       	mov	r31, r0
     738:	46 01       	movw	r8, r12
     73a:	57 01       	movw	r10, r14
     73c:	8f ef       	ldi	r24, 0xFF	; 255
     73e:	88 1a       	sub	r8, r24
     740:	98 0a       	sbc	r9, r24
     742:	a8 0a       	sbc	r10, r24
     744:	b8 0a       	sbc	r11, r24
     746:	c7 01       	movw	r24, r14
     748:	b6 01       	movw	r22, r12
     74a:	ed de       	rcall	.-550    	; 0x526 <fat_getNextCluster>
     74c:	86 16       	cp	r8, r22
     74e:	97 06       	cpc	r9, r23
     750:	a8 06       	cpc	r10, r24
     752:	b9 06       	cpc	r11, r25
     754:	89 f4       	brne	.+34     	; 0x778 <fat_getFatChainClustersInRow+0x96>
     756:	f1 01       	movw	r30, r2
     758:	25 89       	ldd	r18, Z+21	; 0x15
     75a:	8c 81       	ldd	r24, Y+4	; 0x04
     75c:	9d 81       	ldd	r25, Y+5	; 0x05
     75e:	82 0f       	add	r24, r18
     760:	91 1d       	adc	r25, r1
     762:	9d 83       	std	Y+5, r25	; 0x05
     764:	8c 83       	std	Y+4, r24	; 0x04
     766:	0f 5f       	subi	r16, 0xFF	; 255
     768:	1f 4f       	sbci	r17, 0xFF	; 255
     76a:	75 01       	movw	r14, r10
     76c:	64 01       	movw	r12, r8
     76e:	01 15       	cp	r16, r1
     770:	f1 e0       	ldi	r31, 0x01	; 1
     772:	1f 07       	cpc	r17, r31
     774:	09 f7       	brne	.-62     	; 0x738 <fat_getFatChainClustersInRow+0x56>
     776:	09 c0       	rjmp	.+18     	; 0x78a <fat_getFatChainClustersInRow+0xa8>
     778:	c0 92 35 03 	sts	0x0335, r12
     77c:	d0 92 36 03 	sts	0x0336, r13
     780:	e0 92 37 03 	sts	0x0337, r14
     784:	f0 92 38 03 	sts	0x0338, r15
     788:	0c c0       	rjmp	.+24     	; 0x7a2 <fat_getFatChainClustersInRow+0xc0>
     78a:	8f ef       	ldi	r24, 0xFF	; 255
     78c:	58 1a       	sub	r5, r24
     78e:	68 0a       	sbc	r6, r24
     790:	78 0a       	sbc	r7, r24
     792:	40 92 35 03 	sts	0x0335, r4
     796:	50 92 36 03 	sts	0x0336, r5
     79a:	60 92 37 03 	sts	0x0337, r6
     79e:	70 92 38 03 	sts	0x0338, r7
     7a2:	df 91       	pop	r29
     7a4:	cf 91       	pop	r28
     7a6:	1f 91       	pop	r17
     7a8:	0f 91       	pop	r16
     7aa:	ff 90       	pop	r15
     7ac:	ef 90       	pop	r14
     7ae:	df 90       	pop	r13
     7b0:	cf 90       	pop	r12
     7b2:	bf 90       	pop	r11
     7b4:	af 90       	pop	r10
     7b6:	9f 90       	pop	r9
     7b8:	8f 90       	pop	r8
     7ba:	7f 90       	pop	r7
     7bc:	6f 90       	pop	r6
     7be:	5f 90       	pop	r5
     7c0:	4f 90       	pop	r4
     7c2:	3f 90       	pop	r3
     7c4:	2f 90       	pop	r2
     7c6:	08 95       	ret

000007c8 <fat_getFreeClustersInRow>:
     7c8:	8f 92       	push	r8
     7ca:	9f 92       	push	r9
     7cc:	af 92       	push	r10
     7ce:	bf 92       	push	r11
     7d0:	cf 92       	push	r12
     7d2:	df 92       	push	r13
     7d4:	ef 92       	push	r14
     7d6:	ff 92       	push	r15
     7d8:	0f 93       	push	r16
     7da:	1f 93       	push	r17
     7dc:	cf 93       	push	r28
     7de:	df 93       	push	r29
     7e0:	4b 01       	movw	r8, r22
     7e2:	5c 01       	movw	r10, r24
     7e4:	05 c0       	rjmp	.+10     	; 0x7f0 <fat_getFreeClustersInRow+0x28>
     7e6:	8f ef       	ldi	r24, 0xFF	; 255
     7e8:	88 1a       	sub	r8, r24
     7ea:	98 0a       	sbc	r9, r24
     7ec:	a8 0a       	sbc	r10, r24
     7ee:	b8 0a       	sbc	r11, r24
     7f0:	c5 01       	movw	r24, r10
     7f2:	b4 01       	movw	r22, r8
     7f4:	98 de       	rcall	.-720    	; 0x526 <fat_getNextCluster>
     7f6:	67 2b       	or	r22, r23
     7f8:	68 2b       	or	r22, r24
     7fa:	69 2b       	or	r22, r25
     7fc:	a1 f7       	brne	.-24     	; 0x7e6 <fat_getFreeClustersInRow+0x1e>
     7fe:	c5 01       	movw	r24, r10
     800:	b4 01       	movw	r22, r8
     802:	02 dd       	rcall	.-1532   	; 0x208 <fat_clustToSec>
     804:	ef e2       	ldi	r30, 0x2F	; 47
     806:	f3 e0       	ldi	r31, 0x03	; 3
     808:	60 83       	st	Z, r22
     80a:	71 83       	std	Z+1, r23	; 0x01
     80c:	82 83       	std	Z+2, r24	; 0x02
     80e:	93 83       	std	Z+3, r25	; 0x03
     810:	80 91 2c 01 	lds	r24, 0x012C
     814:	90 e0       	ldi	r25, 0x00	; 0
     816:	95 83       	std	Z+5, r25	; 0x05
     818:	84 83       	std	Z+4, r24	; 0x04
     81a:	75 01       	movw	r14, r10
     81c:	64 01       	movw	r12, r8
     81e:	ef ef       	ldi	r30, 0xFF	; 255
     820:	ce 1a       	sub	r12, r30
     822:	de 0a       	sbc	r13, r30
     824:	ee 0a       	sbc	r14, r30
     826:	fe 0a       	sbc	r15, r30
     828:	ff ef       	ldi	r31, 0xFF	; 255
     82a:	9f 1a       	sub	r9, r31
     82c:	af 0a       	sbc	r10, r31
     82e:	bf 0a       	sbc	r11, r31
     830:	cf e2       	ldi	r28, 0x2F	; 47
     832:	d3 e0       	ldi	r29, 0x03	; 3
     834:	07 e1       	ldi	r16, 0x17	; 23
     836:	11 e0       	ldi	r17, 0x01	; 1
     838:	c7 01       	movw	r24, r14
     83a:	b6 01       	movw	r22, r12
     83c:	74 de       	rcall	.-792    	; 0x526 <fat_getNextCluster>
     83e:	67 2b       	or	r22, r23
     840:	68 2b       	or	r22, r24
     842:	69 2b       	or	r22, r25
     844:	91 f4       	brne	.+36     	; 0x86a <fat_getFreeClustersInRow+0xa2>
     846:	f8 01       	movw	r30, r16
     848:	25 89       	ldd	r18, Z+21	; 0x15
     84a:	8c 81       	ldd	r24, Y+4	; 0x04
     84c:	9d 81       	ldd	r25, Y+5	; 0x05
     84e:	82 0f       	add	r24, r18
     850:	91 1d       	adc	r25, r1
     852:	9d 83       	std	Y+5, r25	; 0x05
     854:	8c 83       	std	Y+4, r24	; 0x04
     856:	ff ef       	ldi	r31, 0xFF	; 255
     858:	cf 1a       	sub	r12, r31
     85a:	df 0a       	sbc	r13, r31
     85c:	ef 0a       	sbc	r14, r31
     85e:	ff 0a       	sbc	r15, r31
     860:	c8 14       	cp	r12, r8
     862:	d9 04       	cpc	r13, r9
     864:	ea 04       	cpc	r14, r10
     866:	fb 04       	cpc	r15, r11
     868:	39 f7       	brne	.-50     	; 0x838 <fat_getFreeClustersInRow+0x70>
     86a:	df 91       	pop	r29
     86c:	cf 91       	pop	r28
     86e:	1f 91       	pop	r17
     870:	0f 91       	pop	r16
     872:	ff 90       	pop	r15
     874:	ef 90       	pop	r14
     876:	df 90       	pop	r13
     878:	cf 90       	pop	r12
     87a:	bf 90       	pop	r11
     87c:	af 90       	pop	r10
     87e:	9f 90       	pop	r9
     880:	8f 90       	pop	r8
     882:	08 95       	ret

00000884 <fat_setCluster>:
     884:	8f 92       	push	r8
     886:	9f 92       	push	r9
     888:	af 92       	push	r10
     88a:	bf 92       	push	r11
     88c:	cf 92       	push	r12
     88e:	df 92       	push	r13
     890:	ef 92       	push	r14
     892:	ff 92       	push	r15
     894:	0f 93       	push	r16
     896:	1f 93       	push	r17
     898:	49 01       	movw	r8, r18
     89a:	5a 01       	movw	r10, r20
     89c:	20 91 2d 01 	lds	r18, 0x012D
     8a0:	20 31       	cpi	r18, 0x10	; 16
     8a2:	71 f5       	brne	.+92     	; 0x900 <fat_setCluster+0x7c>
     8a4:	6b 01       	movw	r12, r22
     8a6:	7c 01       	movw	r14, r24
     8a8:	cc 0c       	add	r12, r12
     8aa:	dd 1c       	adc	r13, r13
     8ac:	ee 1c       	adc	r14, r14
     8ae:	ff 1c       	adc	r15, r15
     8b0:	b7 01       	movw	r22, r14
     8b2:	a6 01       	movw	r20, r12
     8b4:	03 2e       	mov	r0, r19
     8b6:	39 e0       	ldi	r19, 0x09	; 9
     8b8:	76 95       	lsr	r23
     8ba:	67 95       	ror	r22
     8bc:	57 95       	ror	r21
     8be:	47 95       	ror	r20
     8c0:	3a 95       	dec	r19
     8c2:	d1 f7       	brne	.-12     	; 0x8b8 <fat_setCluster+0x34>
     8c4:	30 2d       	mov	r19, r0
     8c6:	80 91 28 01 	lds	r24, 0x0128
     8ca:	90 91 29 01 	lds	r25, 0x0129
     8ce:	a0 91 2a 01 	lds	r26, 0x012A
     8d2:	b0 91 2b 01 	lds	r27, 0x012B
     8d6:	8a 01       	movw	r16, r20
     8d8:	9b 01       	movw	r18, r22
     8da:	08 0f       	add	r16, r24
     8dc:	19 1f       	adc	r17, r25
     8de:	2a 1f       	adc	r18, r26
     8e0:	3b 1f       	adc	r19, r27
     8e2:	c9 01       	movw	r24, r18
     8e4:	b8 01       	movw	r22, r16
     8e6:	f9 db       	rcall	.-2062   	; 0xda <fat_loadSector>
     8e8:	11 e0       	ldi	r17, 0x01	; 1
     8ea:	d1 22       	and	r13, r17
     8ec:	ee 24       	eor	r14, r14
     8ee:	ff 24       	eor	r15, r15
     8f0:	c6 01       	movw	r24, r12
     8f2:	48 96       	adiw	r24, 0x18	; 24
     8f4:	fc 01       	movw	r30, r24
     8f6:	e9 5e       	subi	r30, 0xE9	; 233
     8f8:	fe 4f       	sbci	r31, 0xFE	; 254
     8fa:	91 82       	std	Z+1, r9	; 0x01
     8fc:	80 82       	st	Z, r8
     8fe:	33 c0       	rjmp	.+102    	; 0x966 <fat_setCluster+0xe2>
     900:	6b 01       	movw	r12, r22
     902:	7c 01       	movw	r14, r24
     904:	cc 0c       	add	r12, r12
     906:	dd 1c       	adc	r13, r13
     908:	ee 1c       	adc	r14, r14
     90a:	ff 1c       	adc	r15, r15
     90c:	cc 0c       	add	r12, r12
     90e:	dd 1c       	adc	r13, r13
     910:	ee 1c       	adc	r14, r14
     912:	ff 1c       	adc	r15, r15
     914:	b7 01       	movw	r22, r14
     916:	a6 01       	movw	r20, r12
     918:	03 2e       	mov	r0, r19
     91a:	39 e0       	ldi	r19, 0x09	; 9
     91c:	76 95       	lsr	r23
     91e:	67 95       	ror	r22
     920:	57 95       	ror	r21
     922:	47 95       	ror	r20
     924:	3a 95       	dec	r19
     926:	d1 f7       	brne	.-12     	; 0x91c <fat_setCluster+0x98>
     928:	30 2d       	mov	r19, r0
     92a:	80 91 28 01 	lds	r24, 0x0128
     92e:	90 91 29 01 	lds	r25, 0x0129
     932:	a0 91 2a 01 	lds	r26, 0x012A
     936:	b0 91 2b 01 	lds	r27, 0x012B
     93a:	8a 01       	movw	r16, r20
     93c:	9b 01       	movw	r18, r22
     93e:	08 0f       	add	r16, r24
     940:	19 1f       	adc	r17, r25
     942:	2a 1f       	adc	r18, r26
     944:	3b 1f       	adc	r19, r27
     946:	c9 01       	movw	r24, r18
     948:	b8 01       	movw	r22, r16
     94a:	c7 db       	rcall	.-2162   	; 0xda <fat_loadSector>
     94c:	11 e0       	ldi	r17, 0x01	; 1
     94e:	d1 22       	and	r13, r17
     950:	ee 24       	eor	r14, r14
     952:	ff 24       	eor	r15, r15
     954:	c6 01       	movw	r24, r12
     956:	48 96       	adiw	r24, 0x18	; 24
     958:	fc 01       	movw	r30, r24
     95a:	e9 5e       	subi	r30, 0xE9	; 233
     95c:	fe 4f       	sbci	r31, 0xFE	; 254
     95e:	80 82       	st	Z, r8
     960:	91 82       	std	Z+1, r9	; 0x01
     962:	a2 82       	std	Z+2, r10	; 0x02
     964:	b3 82       	std	Z+3, r11	; 0x03
     966:	81 e0       	ldi	r24, 0x01	; 1
     968:	80 93 1b 01 	sts	0x011B, r24
     96c:	1f 91       	pop	r17
     96e:	0f 91       	pop	r16
     970:	ff 90       	pop	r15
     972:	ef 90       	pop	r14
     974:	df 90       	pop	r13
     976:	cf 90       	pop	r12
     978:	bf 90       	pop	r11
     97a:	af 90       	pop	r10
     97c:	9f 90       	pop	r9
     97e:	8f 90       	pop	r8
     980:	08 95       	ret

00000982 <fat_makeFileEntry>:
     982:	2f 92       	push	r2
     984:	3f 92       	push	r3
     986:	4f 92       	push	r4
     988:	5f 92       	push	r5
     98a:	7f 92       	push	r7
     98c:	8f 92       	push	r8
     98e:	9f 92       	push	r9
     990:	af 92       	push	r10
     992:	bf 92       	push	r11
     994:	cf 92       	push	r12
     996:	df 92       	push	r13
     998:	ef 92       	push	r14
     99a:	ff 92       	push	r15
     99c:	0f 93       	push	r16
     99e:	1f 93       	push	r17
     9a0:	cf 93       	push	r28
     9a2:	df 93       	push	r29
     9a4:	00 d0       	rcall	.+0      	; 0x9a6 <fat_makeFileEntry+0x24>
     9a6:	cd b7       	in	r28, 0x3d	; 61
     9a8:	de b7       	in	r29, 0x3e	; 62
     9aa:	9a 83       	std	Y+2, r25	; 0x02
     9ac:	89 83       	std	Y+1, r24	; 0x01
     9ae:	76 2e       	mov	r7, r22
     9b0:	c0 90 1c 01 	lds	r12, 0x011C
     9b4:	d0 90 1d 01 	lds	r13, 0x011D
     9b8:	e0 90 1e 01 	lds	r14, 0x011E
     9bc:	f0 90 1f 01 	lds	r15, 0x011F
     9c0:	c1 14       	cp	r12, r1
     9c2:	d1 04       	cpc	r13, r1
     9c4:	e1 04       	cpc	r14, r1
     9c6:	f1 04       	cpc	r15, r1
     9c8:	49 f4       	brne	.+18     	; 0x9dc <fat_makeFileEntry+0x5a>
     9ca:	e7 e1       	ldi	r30, 0x17	; 23
     9cc:	f1 e0       	ldi	r31, 0x01	; 1
     9ce:	c1 84       	ldd	r12, Z+9	; 0x09
     9d0:	d2 84       	ldd	r13, Z+10	; 0x0a
     9d2:	e3 84       	ldd	r14, Z+11	; 0x0b
     9d4:	f4 84       	ldd	r15, Z+12	; 0x0c
     9d6:	86 89       	ldd	r24, Z+22	; 0x16
     9d8:	80 31       	cpi	r24, 0x10	; 16
     9da:	49 f0       	breq	.+18     	; 0x9ee <fat_makeFileEntry+0x6c>
     9dc:	0f 2e       	mov	r0, r31
     9de:	f9 e3       	ldi	r31, 0x39	; 57
     9e0:	4f 2e       	mov	r4, r31
     9e2:	f3 e0       	ldi	r31, 0x03	; 3
     9e4:	5f 2e       	mov	r5, r31
     9e6:	f0 2d       	mov	r31, r0
     9e8:	07 e1       	ldi	r16, 0x17	; 23
     9ea:	11 e0       	ldi	r17, 0x01	; 1
     9ec:	1d c0       	rjmp	.+58     	; 0xa28 <fat_makeFileEntry+0xa6>
     9ee:	10 e0       	ldi	r17, 0x00	; 0
     9f0:	0f 2e       	mov	r0, r31
     9f2:	f7 e1       	ldi	r31, 0x17	; 23
     9f4:	af 2e       	mov	r10, r31
     9f6:	f1 e0       	ldi	r31, 0x01	; 1
     9f8:	bf 2e       	mov	r11, r31
     9fa:	f0 2d       	mov	r31, r0
     9fc:	41 e0       	ldi	r20, 0x01	; 1
     9fe:	c7 01       	movw	r24, r14
     a00:	b6 01       	movw	r22, r12
     a02:	61 0f       	add	r22, r17
     a04:	71 1d       	adc	r23, r1
     a06:	81 1d       	adc	r24, r1
     a08:	91 1d       	adc	r25, r1
     a0a:	ac db       	rcall	.-2216   	; 0x164 <fat_getFreeRowsOfCluster>
     a0c:	81 30       	cpi	r24, 0x01	; 1
     a0e:	09 f4       	brne	.+2      	; 0xa12 <fat_makeFileEntry+0x90>
     a10:	b2 c0       	rjmp	.+356    	; 0xb76 <fat_makeFileEntry+0x1f4>
     a12:	f5 01       	movw	r30, r10
     a14:	85 89       	ldd	r24, Z+21	; 0x15
     a16:	18 0f       	add	r17, r24
     a18:	10 32       	cpi	r17, 0x20	; 32
     a1a:	80 f3       	brcs	.-32     	; 0x9fc <fat_makeFileEntry+0x7a>
     a1c:	ac c0       	rjmp	.+344    	; 0xb76 <fat_makeFileEntry+0x1f4>
     a1e:	6b 01       	movw	r12, r22
     a20:	7c 01       	movw	r14, r24
     a22:	02 c0       	rjmp	.+4      	; 0xa28 <fat_makeFileEntry+0xa6>
     a24:	6b 01       	movw	r12, r22
     a26:	7c 01       	movw	r14, r24
     a28:	c7 01       	movw	r24, r14
     a2a:	b6 01       	movw	r22, r12
     a2c:	ed db       	rcall	.-2086   	; 0x208 <fat_clustToSec>
     a2e:	41 e0       	ldi	r20, 0x01	; 1
     a30:	99 db       	rcall	.-2254   	; 0x164 <fat_getFreeRowsOfCluster>
     a32:	81 30       	cpi	r24, 0x01	; 1
     a34:	09 f4       	brne	.+2      	; 0xa38 <fat_makeFileEntry+0xb6>
     a36:	9f c0       	rjmp	.+318    	; 0xb76 <fat_makeFileEntry+0x1f4>
     a38:	f2 01       	movw	r30, r4
     a3a:	86 80       	ldd	r8, Z+6	; 0x06
     a3c:	97 80       	ldd	r9, Z+7	; 0x07
     a3e:	a0 84       	ldd	r10, Z+8	; 0x08
     a40:	b1 84       	ldd	r11, Z+9	; 0x09
     a42:	c7 01       	movw	r24, r14
     a44:	b6 01       	movw	r22, r12
     a46:	6f dd       	rcall	.-1314   	; 0x526 <fat_getNextCluster>
     a48:	68 3f       	cpi	r22, 0xF8	; 248
     a4a:	ff ef       	ldi	r31, 0xFF	; 255
     a4c:	7f 07       	cpc	r23, r31
     a4e:	8f 07       	cpc	r24, r31
     a50:	ff e0       	ldi	r31, 0x0F	; 15
     a52:	9f 07       	cpc	r25, r31
     a54:	20 f0       	brcs	.+8      	; 0xa5e <fat_makeFileEntry+0xdc>
     a56:	f8 01       	movw	r30, r16
     a58:	26 89       	ldd	r18, Z+22	; 0x16
     a5a:	20 32       	cpi	r18, 0x20	; 32
     a5c:	51 f0       	breq	.+20     	; 0xa72 <fat_makeFileEntry+0xf0>
     a5e:	68 3f       	cpi	r22, 0xF8	; 248
     a60:	ff ef       	ldi	r31, 0xFF	; 255
     a62:	7f 07       	cpc	r23, r31
     a64:	81 05       	cpc	r24, r1
     a66:	91 05       	cpc	r25, r1
     a68:	d0 f2       	brcs	.-76     	; 0xa1e <fat_makeFileEntry+0x9c>
     a6a:	f8 01       	movw	r30, r16
     a6c:	26 89       	ldd	r18, Z+22	; 0x16
     a6e:	20 31       	cpi	r18, 0x10	; 16
     a70:	c9 f6       	brne	.-78     	; 0xa24 <fat_makeFileEntry+0xa2>
     a72:	60 91 2f 03 	lds	r22, 0x032F
     a76:	70 91 30 03 	lds	r23, 0x0330
     a7a:	80 91 31 03 	lds	r24, 0x0331
     a7e:	90 91 32 03 	lds	r25, 0x0332
     a82:	db db       	rcall	.-2122   	; 0x23a <fat_secToClust>
     a84:	1b 01       	movw	r2, r22
     a86:	2c 01       	movw	r4, r24
     a88:	9b 01       	movw	r18, r22
     a8a:	ac 01       	movw	r20, r24
     a8c:	c7 01       	movw	r24, r14
     a8e:	b6 01       	movw	r22, r12
     a90:	f9 de       	rcall	.-526    	; 0x884 <fat_setCluster>
     a92:	2f ef       	ldi	r18, 0xFF	; 255
     a94:	3f ef       	ldi	r19, 0xFF	; 255
     a96:	4f ef       	ldi	r20, 0xFF	; 255
     a98:	5f e0       	ldi	r21, 0x0F	; 15
     a9a:	c2 01       	movw	r24, r4
     a9c:	b1 01       	movw	r22, r2
     a9e:	f2 de       	rcall	.-540    	; 0x884 <fat_setCluster>
     aa0:	60 91 3f 03 	lds	r22, 0x033F
     aa4:	70 91 40 03 	lds	r23, 0x0340
     aa8:	80 91 41 03 	lds	r24, 0x0341
     aac:	90 91 42 03 	lds	r25, 0x0342
     ab0:	4f e2       	ldi	r20, 0x2F	; 47
     ab2:	51 e0       	ldi	r21, 0x01	; 1
     ab4:	74 d5       	rcall	.+2792   	; 0x159e <mmc_write_sector>
     ab6:	ef e2       	ldi	r30, 0x2F	; 47
     ab8:	f3 e0       	ldi	r31, 0x03	; 3
     aba:	8f e2       	ldi	r24, 0x2F	; 47
     abc:	91 e0       	ldi	r25, 0x01	; 1
     abe:	12 92       	st	-Z, r1
     ac0:	e8 17       	cp	r30, r24
     ac2:	f9 07       	cpc	r31, r25
     ac4:	e1 f7       	brne	.-8      	; 0xabe <fat_makeFileEntry+0x13c>
     ac6:	51 2c       	mov	r5, r1
     ac8:	0f 2e       	mov	r0, r31
     aca:	ff e2       	ldi	r31, 0x2F	; 47
     acc:	2f 2e       	mov	r2, r31
     ace:	f3 e0       	ldi	r31, 0x03	; 3
     ad0:	3f 2e       	mov	r3, r31
     ad2:	f0 2d       	mov	r31, r0
     ad4:	07 e1       	ldi	r16, 0x17	; 23
     ad6:	11 e0       	ldi	r17, 0x01	; 1
     ad8:	01 c0       	rjmp	.+2      	; 0xadc <fat_makeFileEntry+0x15a>
     ada:	59 2e       	mov	r5, r25
     adc:	f1 01       	movw	r30, r2
     ade:	80 81       	ld	r24, Z
     ae0:	91 81       	ldd	r25, Z+1	; 0x01
     ae2:	a2 81       	ldd	r26, Z+2	; 0x02
     ae4:	b3 81       	ldd	r27, Z+3	; 0x03
     ae6:	bc 01       	movw	r22, r24
     ae8:	cd 01       	movw	r24, r26
     aea:	65 0d       	add	r22, r5
     aec:	71 1d       	adc	r23, r1
     aee:	81 1d       	adc	r24, r1
     af0:	91 1d       	adc	r25, r1
     af2:	ec da       	rcall	.-2600   	; 0xcc <fat_writeSector>
     af4:	91 e0       	ldi	r25, 0x01	; 1
     af6:	95 0d       	add	r25, r5
     af8:	f8 01       	movw	r30, r16
     afa:	85 89       	ldd	r24, Z+21	; 0x15
     afc:	58 16       	cp	r5, r24
     afe:	68 f3       	brcs	.-38     	; 0xada <fat_makeFileEntry+0x158>
     b00:	0f e2       	ldi	r16, 0x2F	; 47
     b02:	13 e0       	ldi	r17, 0x03	; 3
     b04:	f8 01       	movw	r30, r16
     b06:	20 80       	ld	r2, Z
     b08:	31 80       	ldd	r3, Z+1	; 0x01
     b0a:	42 80       	ldd	r4, Z+2	; 0x02
     b0c:	53 80       	ldd	r5, Z+3	; 0x03
     b0e:	20 92 3f 03 	sts	0x033F, r2
     b12:	30 92 40 03 	sts	0x0340, r3
     b16:	40 92 41 03 	sts	0x0341, r4
     b1a:	50 92 42 03 	sts	0x0342, r5
     b1e:	c5 01       	movw	r24, r10
     b20:	b4 01       	movw	r22, r8
     b22:	8b db       	rcall	.-2282   	; 0x23a <fat_secToClust>
     b24:	f8 01       	movw	r30, r16
     b26:	66 83       	std	Z+6, r22	; 0x06
     b28:	77 83       	std	Z+7, r23	; 0x07
     b2a:	80 87       	std	Z+8, r24	; 0x08
     b2c:	91 87       	std	Z+9, r25	; 0x09
     b2e:	41 e0       	ldi	r20, 0x01	; 1
     b30:	c2 01       	movw	r24, r4
     b32:	b1 01       	movw	r22, r2
     b34:	17 db       	rcall	.-2514   	; 0x164 <fat_getFreeRowsOfCluster>
     b36:	f8 01       	movw	r30, r16
     b38:	84 81       	ldd	r24, Z+4	; 0x04
     b3a:	95 81       	ldd	r25, Z+5	; 0x05
     b3c:	40 91 2c 01 	lds	r20, 0x012C
     b40:	24 2f       	mov	r18, r20
     b42:	30 e0       	ldi	r19, 0x00	; 0
     b44:	28 17       	cp	r18, r24
     b46:	39 07       	cpc	r19, r25
     b48:	98 f4       	brcc	.+38     	; 0xb70 <fat_makeFileEntry+0x1ee>
     b4a:	c0 80       	ld	r12, Z
     b4c:	d1 80       	ldd	r13, Z+1	; 0x01
     b4e:	e2 80       	ldd	r14, Z+2	; 0x02
     b50:	f3 80       	ldd	r15, Z+3	; 0x03
     b52:	46 01       	movw	r8, r12
     b54:	57 01       	movw	r10, r14
     b56:	84 0e       	add	r8, r20
     b58:	91 1c       	adc	r9, r1
     b5a:	a1 1c       	adc	r10, r1
     b5c:	b1 1c       	adc	r11, r1
     b5e:	80 82       	st	Z, r8
     b60:	91 82       	std	Z+1, r9	; 0x01
     b62:	a2 82       	std	Z+2, r10	; 0x02
     b64:	b3 82       	std	Z+3, r11	; 0x03
     b66:	82 1b       	sub	r24, r18
     b68:	93 0b       	sbc	r25, r19
     b6a:	95 83       	std	Z+5, r25	; 0x05
     b6c:	84 83       	std	Z+4, r24	; 0x04
     b6e:	03 c0       	rjmp	.+6      	; 0xb76 <fat_makeFileEntry+0x1f4>
     b70:	c7 01       	movw	r24, r14
     b72:	b6 01       	movw	r22, r12
     b74:	29 de       	rcall	.-942    	; 0x7c8 <fat_getFreeClustersInRow>
     b76:	0f 2e       	mov	r0, r31
     b78:	f9 e3       	ldi	r31, 0x39	; 57
     b7a:	af 2e       	mov	r10, r31
     b7c:	f3 e0       	ldi	r31, 0x03	; 3
     b7e:	bf 2e       	mov	r11, r31
     b80:	f0 2d       	mov	r31, r0
     b82:	f5 01       	movw	r30, r10
     b84:	86 81       	ldd	r24, Z+6	; 0x06
     b86:	97 81       	ldd	r25, Z+7	; 0x07
     b88:	a0 85       	ldd	r26, Z+8	; 0x08
     b8a:	b1 85       	ldd	r27, Z+9	; 0x09
     b8c:	85 8b       	std	Z+21, r24	; 0x15
     b8e:	96 8b       	std	Z+22, r25	; 0x16
     b90:	a7 8b       	std	Z+23, r26	; 0x17
     b92:	b0 8f       	std	Z+24, r27	; 0x18
     b94:	0f 2e       	mov	r0, r31
     b96:	ff e2       	ldi	r31, 0x2F	; 47
     b98:	cf 2e       	mov	r12, r31
     b9a:	f3 e0       	ldi	r31, 0x03	; 3
     b9c:	df 2e       	mov	r13, r31
     b9e:	f0 2d       	mov	r31, r0
     ba0:	f6 01       	movw	r30, r12
     ba2:	60 81       	ld	r22, Z
     ba4:	71 81       	ldd	r23, Z+1	; 0x01
     ba6:	82 81       	ldd	r24, Z+2	; 0x02
     ba8:	93 81       	ldd	r25, Z+3	; 0x03
     baa:	47 db       	rcall	.-2418   	; 0x23a <fat_secToClust>
     bac:	9b 01       	movw	r18, r22
     bae:	ac 01       	movw	r20, r24
     bb0:	f5 01       	movw	r30, r10
     bb2:	61 8b       	std	Z+17, r22	; 0x11
     bb4:	72 8b       	std	Z+18, r23	; 0x12
     bb6:	83 8b       	std	Z+19, r24	; 0x13
     bb8:	94 8b       	std	Z+20, r25	; 0x14
     bba:	f6 01       	movw	r30, r12
     bbc:	66 83       	std	Z+6, r22	; 0x06
     bbe:	77 83       	std	Z+7, r23	; 0x07
     bc0:	80 87       	std	Z+8, r24	; 0x08
     bc2:	91 87       	std	Z+9, r25	; 0x09
     bc4:	f5 01       	movw	r30, r10
     bc6:	12 86       	std	Z+10, r1	; 0x0a
     bc8:	13 86       	std	Z+11, r1	; 0x0b
     bca:	14 86       	std	Z+12, r1	; 0x0c
     bcc:	15 86       	std	Z+13, r1	; 0x0d
     bce:	e1 2c       	mov	r14, r1
     bd0:	f1 2c       	mov	r15, r1
     bd2:	87 01       	movw	r16, r14
     bd4:	67 2d       	mov	r22, r7
     bd6:	89 81       	ldd	r24, Y+1	; 0x01
     bd8:	9a 81       	ldd	r25, Y+2	; 0x02
     bda:	18 dc       	rcall	.-2000   	; 0x40c <fat_makeSfnDataEntry>
     bdc:	f5 01       	movw	r30, r10
     bde:	66 81       	ldd	r22, Z+6	; 0x06
     be0:	77 81       	ldd	r23, Z+7	; 0x07
     be2:	80 85       	ldd	r24, Z+8	; 0x08
     be4:	91 85       	ldd	r25, Z+9	; 0x09
     be6:	4f e2       	ldi	r20, 0x2F	; 47
     be8:	51 e0       	ldi	r21, 0x01	; 1
     bea:	d9 d4       	rcall	.+2482   	; 0x159e <mmc_write_sector>
     bec:	f6 01       	movw	r30, r12
     bee:	80 81       	ld	r24, Z
     bf0:	91 81       	ldd	r25, Z+1	; 0x01
     bf2:	a2 81       	ldd	r26, Z+2	; 0x02
     bf4:	b3 81       	ldd	r27, Z+3	; 0x03
     bf6:	f5 01       	movw	r30, r10
     bf8:	86 83       	std	Z+6, r24	; 0x06
     bfa:	97 83       	std	Z+7, r25	; 0x07
     bfc:	a0 87       	std	Z+8, r26	; 0x08
     bfe:	b1 87       	std	Z+9, r27	; 0x09
     c00:	0f 90       	pop	r0
     c02:	0f 90       	pop	r0
     c04:	df 91       	pop	r29
     c06:	cf 91       	pop	r28
     c08:	1f 91       	pop	r17
     c0a:	0f 91       	pop	r16
     c0c:	ff 90       	pop	r15
     c0e:	ef 90       	pop	r14
     c10:	df 90       	pop	r13
     c12:	cf 90       	pop	r12
     c14:	bf 90       	pop	r11
     c16:	af 90       	pop	r10
     c18:	9f 90       	pop	r9
     c1a:	8f 90       	pop	r8
     c1c:	7f 90       	pop	r7
     c1e:	5f 90       	pop	r5
     c20:	4f 90       	pop	r4
     c22:	3f 90       	pop	r3
     c24:	2f 90       	pop	r2
     c26:	08 95       	ret

00000c28 <fat_setClusterChain>:
     c28:	4f 92       	push	r4
     c2a:	5f 92       	push	r5
     c2c:	6f 92       	push	r6
     c2e:	7f 92       	push	r7
     c30:	8f 92       	push	r8
     c32:	9f 92       	push	r9
     c34:	af 92       	push	r10
     c36:	bf 92       	push	r11
     c38:	cf 92       	push	r12
     c3a:	df 92       	push	r13
     c3c:	ef 92       	push	r14
     c3e:	ff 92       	push	r15
     c40:	6b 01       	movw	r12, r22
     c42:	7c 01       	movw	r14, r24
     c44:	29 01       	movw	r4, r18
     c46:	3a 01       	movw	r6, r20
     c48:	60 91 35 03 	lds	r22, 0x0335
     c4c:	70 91 36 03 	lds	r23, 0x0336
     c50:	80 91 37 03 	lds	r24, 0x0337
     c54:	90 91 38 03 	lds	r25, 0x0338
     c58:	a7 01       	movw	r20, r14
     c5a:	96 01       	movw	r18, r12
     c5c:	13 de       	rcall	.-986    	; 0x884 <fat_setCluster>
     c5e:	c4 14       	cp	r12, r4
     c60:	d5 04       	cpc	r13, r5
     c62:	e6 04       	cpc	r14, r6
     c64:	f7 04       	cpc	r15, r7
     c66:	99 f0       	breq	.+38     	; 0xc8e <fat_setClusterChain+0x66>
     c68:	46 01       	movw	r8, r12
     c6a:	57 01       	movw	r10, r14
     c6c:	8f ef       	ldi	r24, 0xFF	; 255
     c6e:	88 1a       	sub	r8, r24
     c70:	98 0a       	sbc	r9, r24
     c72:	a8 0a       	sbc	r10, r24
     c74:	b8 0a       	sbc	r11, r24
     c76:	a5 01       	movw	r20, r10
     c78:	94 01       	movw	r18, r8
     c7a:	c7 01       	movw	r24, r14
     c7c:	b6 01       	movw	r22, r12
     c7e:	02 de       	rcall	.-1020   	; 0x884 <fat_setCluster>
     c80:	75 01       	movw	r14, r10
     c82:	64 01       	movw	r12, r8
     c84:	48 14       	cp	r4, r8
     c86:	59 04       	cpc	r5, r9
     c88:	6a 04       	cpc	r6, r10
     c8a:	7b 04       	cpc	r7, r11
     c8c:	69 f7       	brne	.-38     	; 0xc68 <fat_setClusterChain+0x40>
     c8e:	2f ef       	ldi	r18, 0xFF	; 255
     c90:	3f ef       	ldi	r19, 0xFF	; 255
     c92:	4f ef       	ldi	r20, 0xFF	; 255
     c94:	5f e0       	ldi	r21, 0x0F	; 15
     c96:	c3 01       	movw	r24, r6
     c98:	b2 01       	movw	r22, r4
     c9a:	f4 dd       	rcall	.-1048   	; 0x884 <fat_setCluster>
     c9c:	40 92 35 03 	sts	0x0335, r4
     ca0:	50 92 36 03 	sts	0x0336, r5
     ca4:	60 92 37 03 	sts	0x0337, r6
     ca8:	70 92 38 03 	sts	0x0338, r7
     cac:	10 92 1b 01 	sts	0x011B, r1
     cb0:	60 91 3f 03 	lds	r22, 0x033F
     cb4:	70 91 40 03 	lds	r23, 0x0340
     cb8:	80 91 41 03 	lds	r24, 0x0341
     cbc:	90 91 42 03 	lds	r25, 0x0342
     cc0:	4f e2       	ldi	r20, 0x2F	; 47
     cc2:	51 e0       	ldi	r21, 0x01	; 1
     cc4:	6c d4       	rcall	.+2264   	; 0x159e <mmc_write_sector>
     cc6:	ff 90       	pop	r15
     cc8:	ef 90       	pop	r14
     cca:	df 90       	pop	r13
     ccc:	cf 90       	pop	r12
     cce:	bf 90       	pop	r11
     cd0:	af 90       	pop	r10
     cd2:	9f 90       	pop	r9
     cd4:	8f 90       	pop	r8
     cd6:	7f 90       	pop	r7
     cd8:	6f 90       	pop	r6
     cda:	5f 90       	pop	r5
     cdc:	4f 90       	pop	r4
     cde:	08 95       	ret

00000ce0 <fat_loadFatData>:
//***************************************************************************************************************
// Initialisiert die Fat(16/32) daten, wie: root directory sektor, daten sektor, fat sektor...
// siehe auch Fatgen103.pdf. ist NICHT auf performance optimiert!
// byte/sector, byte/cluster, anzahl der fats, sector/fat ... (halt alle wichtigen daten zum lesen ders datei systems!)
//*****************************************************************<**********************************************
uint8_t fat_loadFatData(void){
     ce0:	8f 92       	push	r8
     ce2:	9f 92       	push	r9
     ce4:	af 92       	push	r10
     ce6:	bf 92       	push	r11
     ce8:	cf 92       	push	r12
     cea:	df 92       	push	r13
     cec:	ef 92       	push	r14
     cee:	ff 92       	push	r15
     cf0:	cf 93       	push	r28
	uint32_t 	secOfFirstPartition;				// ist 1. sektor der 1. partition aus dem MBR
	#if (MMC_ENDIANNESS_LITTLE==TRUE)
		void *vsector;
	#endif

	if(TRUE==mmc_read_sector(0,fat.sector)){				//startsektor bestimmen
     cf2:	4f e2       	ldi	r20, 0x2F	; 47
     cf4:	51 e0       	ldi	r21, 0x01	; 1
     cf6:	60 e0       	ldi	r22, 0x00	; 0
     cf8:	70 e0       	ldi	r23, 0x00	; 0
     cfa:	cb 01       	movw	r24, r22
     cfc:	91 d4       	rcall	.+2338   	; 0x1620 <mmc_read_sector>
     cfe:	c8 2f       	mov	r28, r24
     d00:	81 30       	cpi	r24, 0x01	; 1
     d02:	09 f0       	breq	.+2      	; 0xd06 <fat_loadFatData+0x26>
     d04:	94 c0       	rjmp	.+296    	; 0xe2e <fat_loadFatData+0x14e>
		secOfFirstPartition = 0;
		if( fat.sector[457] == 0 ){		
     d06:	80 91 f8 02 	lds	r24, 0x02F8
     d0a:	81 11       	cpse	r24, r1
     d0c:	0e c0       	rjmp	.+28     	; 0xd2a <fat_loadFatData+0x4a>
			#if (MMC_ENDIANNESS_LITTLE==TRUE)
				vsector =& fat.sector[454];
				secOfFirstPartition = *(uint32_t*)vsector;
     d0e:	80 90 f5 02 	lds	r8, 0x02F5
     d12:	90 90 f6 02 	lds	r9, 0x02F6
     d16:	a0 90 f7 02 	lds	r10, 0x02F7
     d1a:	b0 90 f8 02 	lds	r11, 0x02F8
				secOfFirstPartition |= fat.sector[455];
				secOfFirstPartition <<= 8;
	
				secOfFirstPartition |= fat.sector[454];
			#endif
			mmc_read_sector(secOfFirstPartition,fat.sector);		// ist kein superfloppy gewesen
     d1e:	4f e2       	ldi	r20, 0x2F	; 47
     d20:	51 e0       	ldi	r21, 0x01	; 1
     d22:	c5 01       	movw	r24, r10
     d24:	b4 01       	movw	r22, r8
     d26:	7c d4       	rcall	.+2296   	; 0x1620 <mmc_read_sector>
     d28:	03 c0       	rjmp	.+6      	; 0xd30 <fat_loadFatData+0x50>
	#if (MMC_ENDIANNESS_LITTLE==TRUE)
		void *vsector;
	#endif

	if(TRUE==mmc_read_sector(0,fat.sector)){				//startsektor bestimmen
		secOfFirstPartition = 0;
     d2a:	81 2c       	mov	r8, r1
     d2c:	91 2c       	mov	r9, r1
     d2e:	54 01       	movw	r10, r8
				secOfFirstPartition |= fat.sector[454];
			#endif
			mmc_read_sector(secOfFirstPartition,fat.sector);		// ist kein superfloppy gewesen
		}
					
		fat.secPerClust=fat.sector[13];		// fat.secPerClust, 13 only (power of 2)
     d30:	e7 e1       	ldi	r30, 0x17	; 23
     d32:	f1 e0       	ldi	r31, 0x01	; 1
     d34:	85 a1       	ldd	r24, Z+37	; 0x25
     d36:	85 8b       	std	Z+21, r24	; 0x15

		#if (MMC_ENDIANNESS_LITTLE==TRUE)
			vsector =& fat.sector[14];
			fat.fatSec=*(uint16_t*)vsector;
     d38:	c6 a0       	ldd	r12, Z+38	; 0x26
     d3a:	d7 a0       	ldd	r13, Z+39	; 0x27
     d3c:	e1 2c       	mov	r14, r1
     d3e:	f1 2c       	mov	r15, r1
     d40:	c1 8a       	std	Z+17, r12	; 0x11
     d42:	d2 8a       	std	Z+18, r13	; 0x12
     d44:	e3 8a       	std	Z+19, r14	; 0x13
     d46:	f4 8a       	std	Z+20, r15	; 0x14

			vsector=&fat.sector[17];
			rootEntCnt=*(uint16_t*)vsector;

			vsector=&fat.sector[22];
			fatSz16=*(uint16_t*)vsector;
     d48:	86 a5       	ldd	r24, Z+46	; 0x2e
     d4a:	97 a5       	ldd	r25, Z+47	; 0x2f
			fatSz16 = fat.sector[23];
			fatSz16 <<= 8;
			fatSz16 |= fat.sector[22];
		#endif

		fat.rootDir	 = ( (rootEntCnt <<5) + 511 ) /512;	// ist 0 bei fat 32, sonst der root dir sektor
     d4c:	41 a5       	ldd	r20, Z+41	; 0x29
     d4e:	52 a5       	ldd	r21, Z+42	; 0x2a
     d50:	44 0f       	add	r20, r20
     d52:	55 1f       	adc	r21, r21
     d54:	42 95       	swap	r20
     d56:	52 95       	swap	r21
     d58:	50 7f       	andi	r21, 0xF0	; 240
     d5a:	54 27       	eor	r21, r20
     d5c:	40 7f       	andi	r20, 0xF0	; 240
     d5e:	54 27       	eor	r21, r20
     d60:	41 50       	subi	r20, 0x01	; 1
     d62:	5e 4f       	sbci	r21, 0xFE	; 254
     d64:	45 2f       	mov	r20, r21
     d66:	55 27       	eor	r21, r21
     d68:	46 95       	lsr	r20
     d6a:	60 e0       	ldi	r22, 0x00	; 0
     d6c:	70 e0       	ldi	r23, 0x00	; 0

		if(fat.rootDir==0){									// FAT32 spezifisch (die pruefung so, ist nicht spezifikation konform !).
     d6e:	41 15       	cp	r20, r1
     d70:	51 05       	cpc	r21, r1
     d72:	61 05       	cpc	r22, r1
     d74:	71 05       	cpc	r23, r1
     d76:	f1 f4       	brne	.+60     	; 0xdb4 <fat_loadFatData+0xd4>
			#if (MMC_ENDIANNESS_LITTLE==TRUE)
				vsector=&fat.sector[36];
				fatSz32=*(uint32_t *)vsector;
     d78:	24 ad       	ldd	r18, Z+60	; 0x3c
     d7a:	35 ad       	ldd	r19, Z+61	; 0x3d
     d7c:	46 ad       	ldd	r20, Z+62	; 0x3e
     d7e:	57 ad       	ldd	r21, Z+63	; 0x3f

				vsector=&fat.sector[44];
				fat.rootDir=*(uint32_t *)vsector;
     d80:	80 91 5b 01 	lds	r24, 0x015B
     d84:	90 91 5c 01 	lds	r25, 0x015C
     d88:	a0 91 5d 01 	lds	r26, 0x015D
     d8c:	b0 91 5e 01 	lds	r27, 0x015E
     d90:	81 87       	std	Z+9, r24	; 0x09
     d92:	92 87       	std	Z+10, r25	; 0x0a
     d94:	a3 87       	std	Z+11, r26	; 0x0b
     d96:	b4 87       	std	Z+12, r27	; 0x0c
				fat.rootDir |= fat.sector[45];
				fat.rootDir <<= 8;
				fat.rootDir |= fat.sector[44];
			#endif

			fat.dataDirSec = fat.fatSec + (fatSz32 * fat.sector[16]);	// data sector (beginnt mit cluster 2)
     d98:	a0 a5       	ldd	r26, Z+40	; 0x28
     d9a:	b0 e0       	ldi	r27, 0x00	; 0
     d9c:	a6 d4       	rcall	.+2380   	; 0x16ea <__muluhisi3>
     d9e:	c6 0e       	add	r12, r22
     da0:	d7 1e       	adc	r13, r23
     da2:	e8 1e       	adc	r14, r24
     da4:	f9 1e       	adc	r15, r25
     da6:	c5 86       	std	Z+13, r12	; 0x0d
     da8:	d6 86       	std	Z+14, r13	; 0x0e
     daa:	e7 86       	std	Z+15, r14	; 0x0f
     dac:	f0 8a       	std	Z+16, r15	; 0x10
			fat.fatType=32;									// fat typ
     dae:	80 e2       	ldi	r24, 0x20	; 32
     db0:	86 8b       	std	Z+22, r24	; 0x16
     db2:	1e c0       	rjmp	.+60     	; 0xdf0 <fat_loadFatData+0x110>
			}

		else{												// FAT16	spezifisch
			fat.dataDirSec = fat.fatSec + (fatSz16 * fat.sector[16]) + fat.rootDir;		// data sektor (beginnt mit cluster 2)
     db4:	e7 e1       	ldi	r30, 0x17	; 23
     db6:	f1 e0       	ldi	r31, 0x01	; 1
     db8:	a0 a5       	ldd	r26, Z+40	; 0x28
     dba:	a8 9f       	mul	r26, r24
     dbc:	90 01       	movw	r18, r0
     dbe:	a9 9f       	mul	r26, r25
     dc0:	30 0d       	add	r19, r0
     dc2:	11 24       	eor	r1, r1
     dc4:	c2 0e       	add	r12, r18
     dc6:	d3 1e       	adc	r13, r19
     dc8:	e1 1c       	adc	r14, r1
     dca:	f1 1c       	adc	r15, r1
     dcc:	4c 0d       	add	r20, r12
     dce:	5d 1d       	adc	r21, r13
     dd0:	6e 1d       	adc	r22, r14
     dd2:	7f 1d       	adc	r23, r15
     dd4:	45 87       	std	Z+13, r20	; 0x0d
     dd6:	56 87       	std	Z+14, r21	; 0x0e
     dd8:	67 87       	std	Z+15, r22	; 0x0f
     dda:	70 8b       	std	Z+16, r23	; 0x10
			fat.rootDir=fat.dataDirSec-fat.rootDir;			// root dir sektor, da nicht im datenbereich (cluster)
			fat.rootDir+=secOfFirstPartition;				// addiert den startsektor auf 	"
     ddc:	c8 0c       	add	r12, r8
     dde:	d9 1c       	adc	r13, r9
     de0:	ea 1c       	adc	r14, r10
     de2:	fb 1c       	adc	r15, r11
     de4:	c1 86       	std	Z+9, r12	; 0x09
     de6:	d2 86       	std	Z+10, r13	; 0x0a
     de8:	e3 86       	std	Z+11, r14	; 0x0b
     dea:	f4 86       	std	Z+12, r15	; 0x0c
			fat.fatType=16;									// fat typ
     dec:	80 e1       	ldi	r24, 0x10	; 16
     dee:	86 8b       	std	Z+22, r24	; 0x16
			}

		fat.fatSec+=secOfFirstPartition;					// addiert den startsektor auf
     df0:	e7 e1       	ldi	r30, 0x17	; 23
     df2:	f1 e0       	ldi	r31, 0x01	; 1
     df4:	81 89       	ldd	r24, Z+17	; 0x11
     df6:	92 89       	ldd	r25, Z+18	; 0x12
     df8:	a3 89       	ldd	r26, Z+19	; 0x13
     dfa:	b4 89       	ldd	r27, Z+20	; 0x14
     dfc:	88 0d       	add	r24, r8
     dfe:	99 1d       	adc	r25, r9
     e00:	aa 1d       	adc	r26, r10
     e02:	bb 1d       	adc	r27, r11
     e04:	81 8b       	std	Z+17, r24	; 0x11
     e06:	92 8b       	std	Z+18, r25	; 0x12
     e08:	a3 8b       	std	Z+19, r26	; 0x13
     e0a:	b4 8b       	std	Z+20, r27	; 0x14
		fat.dataDirSec+=secOfFirstPartition;				// addiert den startsektor auf (umrechnung von absolut auf real)
     e0c:	85 85       	ldd	r24, Z+13	; 0x0d
     e0e:	96 85       	ldd	r25, Z+14	; 0x0e
     e10:	a7 85       	ldd	r26, Z+15	; 0x0f
     e12:	b0 89       	ldd	r27, Z+16	; 0x10
     e14:	88 0e       	add	r8, r24
     e16:	99 1e       	adc	r9, r25
     e18:	aa 1e       	adc	r10, r26
     e1a:	bb 1e       	adc	r11, r27
     e1c:	85 86       	std	Z+13, r8	; 0x0d
     e1e:	96 86       	std	Z+14, r9	; 0x0e
     e20:	a7 86       	std	Z+15, r10	; 0x0f
     e22:	b0 8a       	std	Z+16, r11	; 0x10
		fat.dir=0;											// dir auf '0'==root dir, sonst 1.Cluster des dir
     e24:	15 82       	std	Z+5, r1	; 0x05
     e26:	16 82       	std	Z+6, r1	; 0x06
     e28:	17 82       	std	Z+7, r1	; 0x07
     e2a:	10 86       	std	Z+8, r1	; 0x08
		return TRUE;
     e2c:	01 c0       	rjmp	.+2      	; 0xe30 <fat_loadFatData+0x150>
		}

return FALSE;			// sector nicht gelesen, fat nicht initialisiert!!
     e2e:	c0 e0       	ldi	r28, 0x00	; 0
}
     e30:	8c 2f       	mov	r24, r28
     e32:	cf 91       	pop	r28
     e34:	ff 90       	pop	r15
     e36:	ef 90       	pop	r14
     e38:	df 90       	pop	r13
     e3a:	cf 90       	pop	r12
     e3c:	bf 90       	pop	r11
     e3e:	af 90       	pop	r10
     e40:	9f 90       	pop	r9
     e42:	8f 90       	pop	r8
     e44:	08 95       	ret

00000e46 <ffopen>:
		#else
			fat_loadSector(file.currentSectorNr+1);				//2.) die bekannten in einer reihe reichen noch.(nur alle 512 bytes)
		#endif
	}
	return fat.sector[file.cntOfBytes++];
}
     e46:	0f 93       	push	r16
     e48:	1f 93       	push	r17
     e4a:	cf 93       	push	r28
     e4c:	df 93       	push	r29
     e4e:	ec 01       	movw	r28, r24
     e50:	16 2f       	mov	r17, r22
     e52:	dd db       	rcall	.-2118   	; 0x60e <fat_loadFileDataFromDir>
     e54:	81 30       	cpi	r24, 0x01	; 1
     e56:	c1 f4       	brne	.+48     	; 0xe88 <ffopen+0x42>
     e58:	12 37       	cpi	r17, 0x72	; 114
     e5a:	51 f5       	brne	.+84     	; 0xeb0 <ffopen+0x6a>
     e5c:	09 e3       	ldi	r16, 0x39	; 57
     e5e:	13 e0       	ldi	r17, 0x03	; 3
     e60:	f8 01       	movw	r30, r16
     e62:	61 89       	ldd	r22, Z+17	; 0x11
     e64:	72 89       	ldd	r23, Z+18	; 0x12
     e66:	83 89       	ldd	r24, Z+19	; 0x13
     e68:	94 89       	ldd	r25, Z+20	; 0x14
     e6a:	3b dc       	rcall	.-1930   	; 0x6e2 <fat_getFatChainClustersInRow>
     e6c:	f8 01       	movw	r30, r16
     e6e:	d7 87       	std	Z+15, r29	; 0x0f
     e70:	c6 87       	std	Z+14, r28	; 0x0e
     e72:	60 91 2f 03 	lds	r22, 0x032F
     e76:	70 91 30 03 	lds	r23, 0x0330
     e7a:	80 91 31 03 	lds	r24, 0x0331
     e7e:	90 91 32 03 	lds	r25, 0x0332
     e82:	2b d9       	rcall	.-3498   	; 0xda <fat_loadSector>
     e84:	80 e0       	ldi	r24, 0x00	; 0
     e86:	19 c0       	rjmp	.+50     	; 0xeba <ffopen+0x74>
     e88:	81 11       	cpse	r24, r1
     e8a:	14 c0       	rjmp	.+40     	; 0xeb4 <ffopen+0x6e>
     e8c:	13 36       	cpi	r17, 0x63	; 99
     e8e:	a1 f4       	brne	.+40     	; 0xeb8 <ffopen+0x72>
     e90:	d0 93 48 03 	sts	0x0348, r29
     e94:	c0 93 47 03 	sts	0x0347, r28
     e98:	62 e0       	ldi	r22, 0x02	; 2
     e9a:	70 e0       	ldi	r23, 0x00	; 0
     e9c:	80 e0       	ldi	r24, 0x00	; 0
     e9e:	90 e0       	ldi	r25, 0x00	; 0
     ea0:	93 dc       	rcall	.-1754   	; 0x7c8 <fat_getFreeClustersInRow>
     ea2:	60 e2       	ldi	r22, 0x20	; 32
     ea4:	ce 01       	movw	r24, r28
     ea6:	6d dd       	rcall	.-1318   	; 0x982 <fat_makeFileEntry>
     ea8:	81 e0       	ldi	r24, 0x01	; 1
     eaa:	80 93 1b 01 	sts	0x011B, r24
     eae:	05 c0       	rjmp	.+10     	; 0xeba <ffopen+0x74>
     eb0:	82 e0       	ldi	r24, 0x02	; 2
     eb2:	03 c0       	rjmp	.+6      	; 0xeba <ffopen+0x74>
     eb4:	82 e0       	ldi	r24, 0x02	; 2
     eb6:	01 c0       	rjmp	.+2      	; 0xeba <ffopen+0x74>
     eb8:	82 e0       	ldi	r24, 0x02	; 2
     eba:	df 91       	pop	r29
     ebc:	cf 91       	pop	r28
     ebe:	1f 91       	pop	r17
     ec0:	0f 91       	pop	r16
     ec2:	08 95       	ret

00000ec4 <fflushFileData>:
     ec4:	4f 92       	push	r4
     ec6:	5f 92       	push	r5
     ec8:	6f 92       	push	r6
     eca:	7f 92       	push	r7
     ecc:	8f 92       	push	r8
     ece:	9f 92       	push	r9
     ed0:	af 92       	push	r10
     ed2:	bf 92       	push	r11
     ed4:	cf 92       	push	r12
     ed6:	df 92       	push	r13
     ed8:	ef 92       	push	r14
     eda:	ff 92       	push	r15
     edc:	0f 93       	push	r16
     ede:	1f 93       	push	r17
     ee0:	cf 93       	push	r28
     ee2:	df 93       	push	r29
     ee4:	a9 e3       	ldi	r26, 0x39	; 57
     ee6:	b3 e0       	ldi	r27, 0x03	; 3
     ee8:	ed 91       	ld	r30, X+
     eea:	fc 91       	ld	r31, X
     eec:	11 97       	sbiw	r26, 0x01	; 1
     eee:	12 96       	adiw	r26, 0x02	; 2
     ef0:	cd 90       	ld	r12, X+
     ef2:	dd 90       	ld	r13, X+
     ef4:	ed 90       	ld	r14, X+
     ef6:	fc 90       	ld	r15, X
     ef8:	15 97       	sbiw	r26, 0x05	; 5
     efa:	ce 0e       	add	r12, r30
     efc:	df 1e       	adc	r13, r31
     efe:	e1 1c       	adc	r14, r1
     f00:	f1 1c       	adc	r15, r1
     f02:	1a 96       	adiw	r26, 0x0a	; 10
     f04:	8d 91       	ld	r24, X+
     f06:	9d 91       	ld	r25, X+
     f08:	0d 90       	ld	r0, X+
     f0a:	bc 91       	ld	r27, X
     f0c:	a0 2d       	mov	r26, r0
     f0e:	8c 15       	cp	r24, r12
     f10:	9d 05       	cpc	r25, r13
     f12:	ae 05       	cpc	r26, r14
     f14:	bf 05       	cpc	r27, r15
     f16:	08 f0       	brcs	.+2      	; 0xf1a <fflushFileData+0x56>
     f18:	5a c0       	rjmp	.+180    	; 0xfce <fflushFileData+0x10a>
     f1a:	80 90 3f 03 	lds	r8, 0x033F
     f1e:	90 90 40 03 	lds	r9, 0x0340
     f22:	a0 90 41 03 	lds	r10, 0x0341
     f26:	b0 90 42 03 	lds	r11, 0x0342
     f2a:	30 97       	sbiw	r30, 0x00	; 0
     f2c:	09 f0       	breq	.+2      	; 0xf30 <fflushFileData+0x6c>
     f2e:	59 c0       	rjmp	.+178    	; 0xfe2 <fflushFileData+0x11e>
     f30:	62 c0       	rjmp	.+196    	; 0xff6 <fflushFileData+0x132>
     f32:	11 92       	st	Z+, r1
     f34:	e8 17       	cp	r30, r24
     f36:	f9 07       	cpc	r31, r25
     f38:	e1 f7       	brne	.-8      	; 0xf32 <fflushFileData+0x6e>
     f3a:	81 e0       	ldi	r24, 0x01	; 1
     f3c:	80 93 1b 01 	sts	0x011B, r24
     f40:	10 c0       	rjmp	.+32     	; 0xf62 <fflushFileData+0x9e>
     f42:	7b d9       	rcall	.-3338   	; 0x23a <fat_secToClust>
     f44:	2b 01       	movw	r4, r22
     f46:	3c 01       	movw	r6, r24
     f48:	60 91 2f 03 	lds	r22, 0x032F
     f4c:	70 91 30 03 	lds	r23, 0x0330
     f50:	80 91 31 03 	lds	r24, 0x0331
     f54:	90 91 32 03 	lds	r25, 0x0332
     f58:	70 d9       	rcall	.-3360   	; 0x23a <fat_secToClust>
     f5a:	a3 01       	movw	r20, r6
     f5c:	92 01       	movw	r18, r4
     f5e:	64 de       	rcall	.-824    	; 0xc28 <fat_setClusterChain>
     f60:	11 c0       	rjmp	.+34     	; 0xf84 <fflushFileData+0xc0>
     f62:	c5 01       	movw	r24, r10
     f64:	b4 01       	movw	r22, r8
     f66:	69 d9       	rcall	.-3374   	; 0x23a <fat_secToClust>
     f68:	2b 01       	movw	r4, r22
     f6a:	3c 01       	movw	r6, r24
     f6c:	60 91 2f 03 	lds	r22, 0x032F
     f70:	70 91 30 03 	lds	r23, 0x0330
     f74:	80 91 31 03 	lds	r24, 0x0331
     f78:	90 91 32 03 	lds	r25, 0x0332
     f7c:	5e d9       	rcall	.-3396   	; 0x23a <fat_secToClust>
     f7e:	a3 01       	movw	r20, r6
     f80:	92 01       	movw	r18, r4
     f82:	52 de       	rcall	.-860    	; 0xc28 <fat_setClusterChain>
     f84:	c9 e3       	ldi	r28, 0x39	; 57
     f86:	d3 e0       	ldi	r29, 0x03	; 3
     f88:	6d 89       	ldd	r22, Y+21	; 0x15
     f8a:	7e 89       	ldd	r23, Y+22	; 0x16
     f8c:	8f 89       	ldd	r24, Y+23	; 0x17
     f8e:	98 8d       	ldd	r25, Y+24	; 0x18
     f90:	a4 d8       	rcall	.-3768   	; 0xda <fat_loadSector>
     f92:	e8 89       	ldd	r30, Y+16	; 0x10
     f94:	80 e2       	ldi	r24, 0x20	; 32
     f96:	e8 9f       	mul	r30, r24
     f98:	f0 01       	movw	r30, r0
     f9a:	11 24       	eor	r1, r1
     f9c:	e5 5b       	subi	r30, 0xB5	; 181
     f9e:	fe 4f       	sbci	r31, 0xFE	; 254
     fa0:	c0 82       	st	Z, r12
     fa2:	d1 82       	std	Z+1, r13	; 0x01
     fa4:	e2 82       	std	Z+2, r14	; 0x02
     fa6:	f3 82       	std	Z+3, r15	; 0x03
     fa8:	ca 86       	std	Y+10, r12	; 0x0a
     faa:	db 86       	std	Y+11, r13	; 0x0b
     fac:	ec 86       	std	Y+12, r14	; 0x0c
     fae:	fd 86       	std	Y+13, r15	; 0x0d
     fb0:	80 92 2f 03 	sts	0x032F, r8
     fb4:	90 92 30 03 	sts	0x0330, r9
     fb8:	a0 92 31 03 	sts	0x0331, r10
     fbc:	b0 92 32 03 	sts	0x0332, r11
     fc0:	81 e0       	ldi	r24, 0x01	; 1
     fc2:	80 93 1b 01 	sts	0x011B, r24
     fc6:	c5 01       	movw	r24, r10
     fc8:	b4 01       	movw	r22, r8
     fca:	87 d8       	rcall	.-3826   	; 0xda <fat_loadSector>
     fcc:	29 c0       	rjmp	.+82     	; 0x1020 <fflushFileData+0x15c>
     fce:	60 91 3f 03 	lds	r22, 0x033F
     fd2:	70 91 40 03 	lds	r23, 0x0340
     fd6:	80 91 41 03 	lds	r24, 0x0341
     fda:	90 91 42 03 	lds	r25, 0x0342
     fde:	76 d8       	rcall	.-3860   	; 0xcc <fat_writeSector>
     fe0:	1f c0       	rjmp	.+62     	; 0x1020 <fflushFileData+0x15c>
     fe2:	e1 15       	cp	r30, r1
     fe4:	82 e0       	ldi	r24, 0x02	; 2
     fe6:	f8 07       	cpc	r31, r24
     fe8:	08 f0       	brcs	.+2      	; 0xfec <fflushFileData+0x128>
     fea:	bb cf       	rjmp	.-138    	; 0xf62 <fflushFileData+0x9e>
     fec:	e1 5d       	subi	r30, 0xD1	; 209
     fee:	fe 4f       	sbci	r31, 0xFE	; 254
     ff0:	8f e2       	ldi	r24, 0x2F	; 47
     ff2:	93 e0       	ldi	r25, 0x03	; 3
     ff4:	9e cf       	rjmp	.-196    	; 0xf32 <fflushFileData+0x6e>
     ff6:	c5 01       	movw	r24, r10
     ff8:	b4 01       	movw	r22, r8
     ffa:	61 50       	subi	r22, 0x01	; 1
     ffc:	71 09       	sbc	r23, r1
     ffe:	81 09       	sbc	r24, r1
    1000:	91 09       	sbc	r25, r1
    1002:	00 91 2f 03 	lds	r16, 0x032F
    1006:	10 91 30 03 	lds	r17, 0x0330
    100a:	20 91 31 03 	lds	r18, 0x0331
    100e:	30 91 32 03 	lds	r19, 0x0332
    1012:	60 17       	cp	r22, r16
    1014:	71 07       	cpc	r23, r17
    1016:	82 07       	cpc	r24, r18
    1018:	93 07       	cpc	r25, r19
    101a:	08 f4       	brcc	.+2      	; 0x101e <fflushFileData+0x15a>
    101c:	b3 cf       	rjmp	.-154    	; 0xf84 <fflushFileData+0xc0>
    101e:	91 cf       	rjmp	.-222    	; 0xf42 <fflushFileData+0x7e>
    1020:	df 91       	pop	r29
    1022:	cf 91       	pop	r28
    1024:	1f 91       	pop	r17
    1026:	0f 91       	pop	r16
    1028:	ff 90       	pop	r15
    102a:	ef 90       	pop	r14
    102c:	df 90       	pop	r13
    102e:	cf 90       	pop	r12
    1030:	bf 90       	pop	r11
    1032:	af 90       	pop	r10
    1034:	9f 90       	pop	r9
    1036:	8f 90       	pop	r8
    1038:	7f 90       	pop	r7
    103a:	6f 90       	pop	r6
    103c:	5f 90       	pop	r5
    103e:	4f 90       	pop	r4
    1040:	08 95       	ret

00001042 <ffclose>:
    1042:	40 df       	rcall	.-384    	; 0xec4 <fflushFileData>
    1044:	e9 e3       	ldi	r30, 0x39	; 57
    1046:	f3 e0       	ldi	r31, 0x03	; 3
    1048:	11 82       	std	Z+1, r1	; 0x01
    104a:	10 82       	st	Z, r1
    104c:	12 82       	std	Z+2, r1	; 0x02
    104e:	13 82       	std	Z+3, r1	; 0x03
    1050:	14 82       	std	Z+4, r1	; 0x04
    1052:	15 82       	std	Z+5, r1	; 0x05
    1054:	81 e0       	ldi	r24, 0x01	; 1
    1056:	08 95       	ret

00001058 <ffseek>:
    1058:	8f 92       	push	r8
    105a:	9f 92       	push	r9
    105c:	af 92       	push	r10
    105e:	bf 92       	push	r11
    1060:	cf 92       	push	r12
    1062:	df 92       	push	r13
    1064:	ef 92       	push	r14
    1066:	ff 92       	push	r15
    1068:	0f 93       	push	r16
    106a:	1f 93       	push	r17
    106c:	cf 93       	push	r28
    106e:	df 93       	push	r29
    1070:	4b 01       	movw	r8, r22
    1072:	5c 01       	movw	r10, r24
    1074:	27 df       	rcall	.-434    	; 0xec4 <fflushFileData>
    1076:	c9 e3       	ldi	r28, 0x39	; 57
    1078:	d3 e0       	ldi	r29, 0x03	; 3
    107a:	69 89       	ldd	r22, Y+17	; 0x11
    107c:	7a 89       	ldd	r23, Y+18	; 0x12
    107e:	8b 89       	ldd	r24, Y+19	; 0x13
    1080:	9c 89       	ldd	r25, Y+20	; 0x14
    1082:	2f db       	rcall	.-2466   	; 0x6e2 <fat_getFatChainClustersInRow>
    1084:	40 91 2f 03 	lds	r20, 0x032F
    1088:	50 91 30 03 	lds	r21, 0x0330
    108c:	60 91 31 03 	lds	r22, 0x0331
    1090:	70 91 32 03 	lds	r23, 0x0332
    1094:	1a 82       	std	Y+2, r1	; 0x02
    1096:	1b 82       	std	Y+3, r1	; 0x03
    1098:	1c 82       	std	Y+4, r1	; 0x04
    109a:	1d 82       	std	Y+5, r1	; 0x05
    109c:	81 14       	cp	r8, r1
    109e:	82 e0       	ldi	r24, 0x02	; 2
    10a0:	98 06       	cpc	r9, r24
    10a2:	a1 04       	cpc	r10, r1
    10a4:	b1 04       	cpc	r11, r1
    10a6:	a8 f1       	brcs	.+106    	; 0x1112 <ffseek+0xba>
    10a8:	75 01       	movw	r14, r10
    10aa:	64 01       	movw	r12, r8
    10ac:	8e 01       	movw	r16, r28
    10ae:	cf e2       	ldi	r28, 0x2F	; 47
    10b0:	d3 e0       	ldi	r29, 0x03	; 3
    10b2:	e2 e0       	ldi	r30, 0x02	; 2
    10b4:	de 1a       	sub	r13, r30
    10b6:	e1 08       	sbc	r14, r1
    10b8:	f1 08       	sbc	r15, r1
    10ba:	f8 01       	movw	r30, r16
    10bc:	82 81       	ldd	r24, Z+2	; 0x02
    10be:	93 81       	ldd	r25, Z+3	; 0x03
    10c0:	a4 81       	ldd	r26, Z+4	; 0x04
    10c2:	b5 81       	ldd	r27, Z+5	; 0x05
    10c4:	9e 5f       	subi	r25, 0xFE	; 254
    10c6:	af 4f       	sbci	r26, 0xFF	; 255
    10c8:	bf 4f       	sbci	r27, 0xFF	; 255
    10ca:	82 83       	std	Z+2, r24	; 0x02
    10cc:	93 83       	std	Z+3, r25	; 0x03
    10ce:	a4 83       	std	Z+4, r26	; 0x04
    10d0:	b5 83       	std	Z+5, r27	; 0x05
    10d2:	8c 81       	ldd	r24, Y+4	; 0x04
    10d4:	9d 81       	ldd	r25, Y+5	; 0x05
    10d6:	01 97       	sbiw	r24, 0x01	; 1
    10d8:	9d 83       	std	Y+5, r25	; 0x05
    10da:	8c 83       	std	Y+4, r24	; 0x04
    10dc:	89 2b       	or	r24, r25
    10de:	29 f0       	breq	.+10     	; 0x10ea <ffseek+0x92>
    10e0:	4f 5f       	subi	r20, 0xFF	; 255
    10e2:	5f 4f       	sbci	r21, 0xFF	; 255
    10e4:	6f 4f       	sbci	r22, 0xFF	; 255
    10e6:	7f 4f       	sbci	r23, 0xFF	; 255
    10e8:	0a c0       	rjmp	.+20     	; 0x10fe <ffseek+0xa6>
    10ea:	6e 81       	ldd	r22, Y+6	; 0x06
    10ec:	7f 81       	ldd	r23, Y+7	; 0x07
    10ee:	88 85       	ldd	r24, Y+8	; 0x08
    10f0:	99 85       	ldd	r25, Y+9	; 0x09
    10f2:	19 da       	rcall	.-3022   	; 0x526 <fat_getNextCluster>
    10f4:	f6 da       	rcall	.-2580   	; 0x6e2 <fat_getFatChainClustersInRow>
    10f6:	48 81       	ld	r20, Y
    10f8:	59 81       	ldd	r21, Y+1	; 0x01
    10fa:	6a 81       	ldd	r22, Y+2	; 0x02
    10fc:	7b 81       	ldd	r23, Y+3	; 0x03
    10fe:	c1 14       	cp	r12, r1
    1100:	f2 e0       	ldi	r31, 0x02	; 2
    1102:	df 06       	cpc	r13, r31
    1104:	e1 04       	cpc	r14, r1
    1106:	f1 04       	cpc	r15, r1
    1108:	a0 f6       	brcc	.-88     	; 0x10b2 <ffseek+0x5a>
    110a:	81 e0       	ldi	r24, 0x01	; 1
    110c:	98 22       	and	r9, r24
    110e:	aa 24       	eor	r10, r10
    1110:	bb 24       	eor	r11, r11
    1112:	cb 01       	movw	r24, r22
    1114:	ba 01       	movw	r22, r20
    1116:	0e 94 6d 00 	call	0xda	; 0xda <fat_loadSector>
    111a:	90 92 3a 03 	sts	0x033A, r9
    111e:	80 92 39 03 	sts	0x0339, r8
    1122:	df 91       	pop	r29
    1124:	cf 91       	pop	r28
    1126:	1f 91       	pop	r17
    1128:	0f 91       	pop	r16
    112a:	ff 90       	pop	r15
    112c:	ef 90       	pop	r14
    112e:	df 90       	pop	r13
    1130:	cf 90       	pop	r12
    1132:	bf 90       	pop	r11
    1134:	af 90       	pop	r10
    1136:	9f 90       	pop	r9
    1138:	8f 90       	pop	r8
    113a:	08 95       	ret

0000113c <ffwrite>:
// sektoren bekannt sein(datenmenge zu gross), werden die alten verkettet und neue gesucht. es ist noetig sich den letzten bekannten einer
// kette zu merken -> file.lastCluster, um auch nicht zusammenhaengende cluster verketten zu koennen (fat_setClusterChain macht das)!
// es ist beim ueberschreiben noetig, die schon beschriebenen sektoren der datei zu laden, damit man die richtigen daten
// hat. das ist bloed, weil so ein daten overhead von 50% entsteht. da lesen aber schneller als schreiben geht, verliert man nicht 50% an geschwindigkeit.
//*******************************************************************************************************************************
void ffwrite( uint8_t c){
    113c:	cf 92       	push	r12
    113e:	df 92       	push	r13
    1140:	ef 92       	push	r14
    1142:	ff 92       	push	r15
    1144:	0f 93       	push	r16
    1146:	1f 93       	push	r17
    1148:	cf 93       	push	r28
    114a:	df 93       	push	r29

	fat.sector[ file.cntOfBytes++ ]=c;							// schreiben des chars auf den puffer sector und zaehler erhoehen (pre-increment)
    114c:	e9 e3       	ldi	r30, 0x39	; 57
    114e:	f3 e0       	ldi	r31, 0x03	; 3
    1150:	20 81       	ld	r18, Z
    1152:	31 81       	ldd	r19, Z+1	; 0x01
    1154:	a9 01       	movw	r20, r18
    1156:	4f 5f       	subi	r20, 0xFF	; 255
    1158:	5f 4f       	sbci	r21, 0xFF	; 255
    115a:	51 83       	std	Z+1, r21	; 0x01
    115c:	40 83       	st	Z, r20
    115e:	f9 01       	movw	r30, r18
    1160:	e9 5e       	subi	r30, 0xE9	; 233
    1162:	fe 4f       	sbci	r31, 0xFE	; 254
    1164:	80 8f       	std	Z+24, r24	; 0x18

	if( file.cntOfBytes==512 ){									/** SEKTOR VOLL ( 3 moeglichkeiten ab hier !) **/
    1166:	41 15       	cp	r20, r1
    1168:	52 40       	sbci	r21, 0x02	; 2
    116a:	09 f0       	breq	.+2      	; 0x116e <ffwrite+0x32>
    116c:	90 c0       	rjmp	.+288    	; 0x128e <ffwrite+0x152>

		file.cntOfBytes = 0;	  									// ruecksetzen des sektor byte zaehlers.
    116e:	c9 e3       	ldi	r28, 0x39	; 57
    1170:	d3 e0       	ldi	r29, 0x03	; 3
    1172:	19 82       	std	Y+1, r1	; 0x01
    1174:	18 82       	st	Y, r1
		file.seek += 512;											// position in der datei erhoehen, weil grade 512 bytes geschrieben.
    1176:	8a 81       	ldd	r24, Y+2	; 0x02
    1178:	9b 81       	ldd	r25, Y+3	; 0x03
    117a:	ac 81       	ldd	r26, Y+4	; 0x04
    117c:	bd 81       	ldd	r27, Y+5	; 0x05
    117e:	9e 5f       	subi	r25, 0xFE	; 254
    1180:	af 4f       	sbci	r26, 0xFF	; 255
    1182:	bf 4f       	sbci	r27, 0xFF	; 255
    1184:	8a 83       	std	Y+2, r24	; 0x02
    1186:	9b 83       	std	Y+3, r25	; 0x03
    1188:	ac 83       	std	Y+4, r26	; 0x04
    118a:	bd 83       	std	Y+5, r27	; 0x05
		mmc_write_sector( file.currentSectorNr,fat.sector );	/** 1.) vollen sektor auf karte schreiben, es sind noch freie sektoren bekannt**/
    118c:	6e 81       	ldd	r22, Y+6	; 0x06
    118e:	7f 81       	ldd	r23, Y+7	; 0x07
    1190:	88 85       	ldd	r24, Y+8	; 0x08
    1192:	99 85       	ldd	r25, Y+9	; 0x09
    1194:	4f e2       	ldi	r20, 0x2F	; 47
    1196:	51 e0       	ldi	r21, 0x01	; 1
    1198:	02 d2       	rcall	.+1028   	; 0x159e <mmc_write_sector>
		file.currentSectorNr +=1;									// naechsten sektor zum beschreiben.
    119a:	4e 81       	ldd	r20, Y+6	; 0x06
    119c:	5f 81       	ldd	r21, Y+7	; 0x07
    119e:	68 85       	ldd	r22, Y+8	; 0x08
    11a0:	79 85       	ldd	r23, Y+9	; 0x09
    11a2:	db 01       	movw	r26, r22
    11a4:	ca 01       	movw	r24, r20
    11a6:	01 96       	adiw	r24, 0x01	; 1
    11a8:	a1 1d       	adc	r26, r1
    11aa:	b1 1d       	adc	r27, r1
    11ac:	8e 83       	std	Y+6, r24	; 0x06
    11ae:	9f 83       	std	Y+7, r25	; 0x07
    11b0:	a8 87       	std	Y+8, r26	; 0x08
    11b2:	b9 87       	std	Y+9, r27	; 0x09
		chain.cntSecs -=1;											// einen freien sektor zum beschreiben weniger.
    11b4:	ef e2       	ldi	r30, 0x2F	; 47
    11b6:	f3 e0       	ldi	r31, 0x03	; 3
    11b8:	84 81       	ldd	r24, Z+4	; 0x04
    11ba:	95 81       	ldd	r25, Z+5	; 0x05
    11bc:	01 97       	sbiw	r24, 0x01	; 1
    11be:	95 83       	std	Z+5, r25	; 0x05
    11c0:	84 83       	std	Z+4, r24	; 0x04

		if( chain.cntSecs==0 ){										// ende der bekannten in einer reihe erreicht (freie oder verkettete)
    11c2:	89 2b       	or	r24, r25
    11c4:	09 f0       	breq	.+2      	; 0x11c8 <ffwrite+0x8c>
    11c6:	49 c0       	rjmp	.+146    	; 0x125a <ffwrite+0x11e>
			if( file.seek > file.length ){						/** 2.) ausserhalb der datei, jetzt ist es noetig die beschriebenen cluster zu verketten und neue freie zu suchen	**/
    11c8:	0a 81       	ldd	r16, Y+2	; 0x02
    11ca:	1b 81       	ldd	r17, Y+3	; 0x03
    11cc:	2c 81       	ldd	r18, Y+4	; 0x04
    11ce:	3d 81       	ldd	r19, Y+5	; 0x05
    11d0:	8a 85       	ldd	r24, Y+10	; 0x0a
    11d2:	9b 85       	ldd	r25, Y+11	; 0x0b
    11d4:	ac 85       	ldd	r26, Y+12	; 0x0c
    11d6:	bd 85       	ldd	r27, Y+13	; 0x0d
    11d8:	80 17       	cp	r24, r16
    11da:	91 07       	cpc	r25, r17
    11dc:	a2 07       	cpc	r26, r18
    11de:	b3 07       	cpc	r27, r19
    11e0:	40 f5       	brcc	.+80     	; 0x1232 <ffwrite+0xf6>
				fat.bufferDirty = FALSE;							// damit nicht durch z.b. fat_getNextCluster nochmal dieser sektor gescchrieben wird, siehe fat_loadSector
    11e2:	07 e1       	ldi	r16, 0x17	; 23
    11e4:	11 e0       	ldi	r17, 0x01	; 1
    11e6:	f8 01       	movw	r30, r16
    11e8:	14 82       	std	Z+4, r1	; 0x04
				fat_setClusterChain( fat_secToClust(chain.startSectors) , fat_secToClust(file.currentSectorNr-1) );	// verketten der beschriebenen.
    11ea:	cb 01       	movw	r24, r22
    11ec:	ba 01       	movw	r22, r20
    11ee:	25 d8       	rcall	.-4022   	; 0x23a <fat_secToClust>
    11f0:	6b 01       	movw	r12, r22
    11f2:	7c 01       	movw	r14, r24
    11f4:	cf e2       	ldi	r28, 0x2F	; 47
    11f6:	d3 e0       	ldi	r29, 0x03	; 3
    11f8:	68 81       	ld	r22, Y
    11fa:	79 81       	ldd	r23, Y+1	; 0x01
    11fc:	8a 81       	ldd	r24, Y+2	; 0x02
    11fe:	9b 81       	ldd	r25, Y+3	; 0x03
    1200:	1c d8       	rcall	.-4040   	; 0x23a <fat_secToClust>
    1202:	a7 01       	movw	r20, r14
    1204:	96 01       	movw	r18, r12
    1206:	10 dd       	rcall	.-1504   	; 0xc28 <fat_setClusterChain>
				fat_getFreeClustersInRow( chain.lastCluster );		// neue leere sektoren benoetigt, also suchen.
    1208:	6e 81       	ldd	r22, Y+6	; 0x06
    120a:	7f 81       	ldd	r23, Y+7	; 0x07
    120c:	88 85       	ldd	r24, Y+8	; 0x08
    120e:	99 85       	ldd	r25, Y+9	; 0x09
    1210:	db da       	rcall	.-2634   	; 0x7c8 <fat_getFreeClustersInRow>
				file.currentSectorNr = chain.startSectors;				// setzen des 1. sektors der neuen reihe zum schreiben.
    1212:	88 81       	ld	r24, Y
    1214:	99 81       	ldd	r25, Y+1	; 0x01
    1216:	aa 81       	ldd	r26, Y+2	; 0x02
    1218:	bb 81       	ldd	r27, Y+3	; 0x03
    121a:	80 93 3f 03 	sts	0x033F, r24
    121e:	90 93 40 03 	sts	0x0340, r25
    1222:	a0 93 41 03 	sts	0x0341, r26
    1226:	b0 93 42 03 	sts	0x0342, r27
				fat.bufferDirty = TRUE;
    122a:	81 e0       	ldi	r24, 0x01	; 1
    122c:	f8 01       	movw	r30, r16
    122e:	84 83       	std	Z+4, r24	; 0x04
    1230:	14 c0       	rjmp	.+40     	; 0x125a <ffwrite+0x11e>
			}
			else {												/** 3.) noch innerhalb der datei, aber es muessen neue verkettete cluster gesucht werden, zum ueberschreiben **/
				fat_getFatChainClustersInRow( fat_getNextCluster(chain.lastCluster) );		// noch innerhalb der datei, deshlab verkettete suchen.
    1232:	cf e2       	ldi	r28, 0x2F	; 47
    1234:	d3 e0       	ldi	r29, 0x03	; 3
    1236:	6e 81       	ldd	r22, Y+6	; 0x06
    1238:	7f 81       	ldd	r23, Y+7	; 0x07
    123a:	88 85       	ldd	r24, Y+8	; 0x08
    123c:	99 85       	ldd	r25, Y+9	; 0x09
    123e:	73 d9       	rcall	.-3354   	; 0x526 <fat_getNextCluster>
    1240:	50 da       	rcall	.-2912   	; 0x6e2 <fat_getFatChainClustersInRow>
				file.currentSectorNr = chain.startSectors;				// setzen des 1. sektors der neuen reihe zum schreiben.
    1242:	88 81       	ld	r24, Y
    1244:	99 81       	ldd	r25, Y+1	; 0x01
    1246:	aa 81       	ldd	r26, Y+2	; 0x02
    1248:	bb 81       	ldd	r27, Y+3	; 0x03
    124a:	80 93 3f 03 	sts	0x033F, r24
    124e:	90 93 40 03 	sts	0x0340, r25
    1252:	a0 93 41 03 	sts	0x0341, r26
    1256:	b0 93 42 03 	sts	0x0342, r27
			}
		}

		if( file.seek <= file.length ){
    125a:	e9 e3       	ldi	r30, 0x39	; 57
    125c:	f3 e0       	ldi	r31, 0x03	; 3
    125e:	42 81       	ldd	r20, Z+2	; 0x02
    1260:	53 81       	ldd	r21, Z+3	; 0x03
    1262:	64 81       	ldd	r22, Z+4	; 0x04
    1264:	75 81       	ldd	r23, Z+5	; 0x05
    1266:	82 85       	ldd	r24, Z+10	; 0x0a
    1268:	93 85       	ldd	r25, Z+11	; 0x0b
    126a:	a4 85       	ldd	r26, Z+12	; 0x0c
    126c:	b5 85       	ldd	r27, Z+13	; 0x0d
    126e:	84 17       	cp	r24, r20
    1270:	95 07       	cpc	r25, r21
    1272:	a6 07       	cpc	r26, r22
    1274:	b7 07       	cpc	r27, r23
    1276:	58 f0       	brcs	.+22     	; 0x128e <ffwrite+0x152>
			mmc_read_sector(file.currentSectorNr,fat.sector);		// wegen ueberschreiben, muss der zu beschreibende sektor geladen werden (zustand 3)...
    1278:	60 91 3f 03 	lds	r22, 0x033F
    127c:	70 91 40 03 	lds	r23, 0x0340
    1280:	80 91 41 03 	lds	r24, 0x0341
    1284:	90 91 42 03 	lds	r25, 0x0342
    1288:	4f e2       	ldi	r20, 0x2F	; 47
    128a:	51 e0       	ldi	r21, 0x01	; 1
    128c:	c9 d1       	rcall	.+914    	; 0x1620 <mmc_read_sector>
		}
	}
}
    128e:	df 91       	pop	r29
    1290:	cf 91       	pop	r28
    1292:	1f 91       	pop	r17
    1294:	0f 91       	pop	r16
    1296:	ff 90       	pop	r15
    1298:	ef 90       	pop	r14
    129a:	df 90       	pop	r13
    129c:	cf 90       	pop	r12
    129e:	08 95       	ret

000012a0 <ffwrites>:
// *******************************************************************************************************************************
// schreibt string auf karte, siehe ffwrite()
// ein string sind zeichen, '\0' bzw. 0x00 bzw dezimal 0 wird als string ende gewertet !!
// wenn sonderzeichen auf die karte sollen, lieber ffwrite benutzen!
// *******************************************************************************************************************************
void ffwrites( uint8_t *s ){
    12a0:	cf 93       	push	r28
    12a2:	df 93       	push	r29
    12a4:	ec 01       	movw	r28, r24
    while (*s){
    12a6:	88 81       	ld	r24, Y
    12a8:	88 23       	and	r24, r24
    12aa:	29 f0       	breq	.+10     	; 0x12b6 <ffwrites+0x16>
    12ac:	21 96       	adiw	r28, 0x01	; 1
    	ffwrite(*s++);
    12ae:	46 df       	rcall	.-372    	; 0x113c <ffwrite>
// schreibt string auf karte, siehe ffwrite()
// ein string sind zeichen, '\0' bzw. 0x00 bzw dezimal 0 wird als string ende gewertet !!
// wenn sonderzeichen auf die karte sollen, lieber ffwrite benutzen!
// *******************************************************************************************************************************
void ffwrites( uint8_t *s ){
    while (*s){
    12b0:	89 91       	ld	r24, Y+
    12b2:	81 11       	cpse	r24, r1
    12b4:	fc cf       	rjmp	.-8      	; 0x12ae <ffwrites+0xe>
    	ffwrite(*s++);
    }
    fat.bufferDirty = TRUE;
    12b6:	81 e0       	ldi	r24, 0x01	; 1
    12b8:	80 93 1b 01 	sts	0x011B, r24
  }
    12bc:	df 91       	pop	r29
    12be:	cf 91       	pop	r28
    12c0:	08 95       	ret

000012c2 <main>:
#include "fat.h"
#include "mmc.h"
};

int main(void)
{
    12c2:	cf 93       	push	r28
    12c4:	df 93       	push	r29
    12c6:	cd b7       	in	r28, 0x3d	; 61
    12c8:	de b7       	in	r29, 0x3e	; 62
    12ca:	66 97       	sbiw	r28, 0x16	; 22
    12cc:	0f b6       	in	r0, 0x3f	; 63
    12ce:	f8 94       	cli
    12d0:	de bf       	out	0x3e, r29	; 62
    12d2:	0f be       	out	0x3f, r0	; 63
    12d4:	cd bf       	out	0x3d, r28	; 61
	// Versuch Karte zu Initialisieren, bis es klappt.
	// Unbedingt so, weil die Initialisierung nicht immer
	// auf Anhieb klappt.
    while (FALSE == mmc_init()){}
    12d6:	a1 d0       	rcall	.+322    	; 0x141a <mmc_init>
    12d8:	88 23       	and	r24, r24
    12da:	e9 f3       	breq	.-6      	; 0x12d6 <main+0x14>
	
	// Fat initialisieren. Nur wenn das klappt sind weitere
	// Aktionen sinnvoll, sonst endet das Programm.
	if (!fat_loadFatData())
    12dc:	01 dd       	rcall	.-1534   	; 0xce0 <fat_loadFatData>
    12de:	88 23       	and	r24, r24
    12e0:	09 f4       	brne	.+2      	; 0x12e4 <main+0x22>
    12e2:	34 c0       	rjmp	.+104    	; 0x134c <main+0x8a>
		return -1;
	
	// Dateinamen muessen in diesem Format sein
	// Man beachte die Größe des Arrays und die Großbuchstaben!
	uint8_t file_name[] = "test.txt";
    12e4:	89 e0       	ldi	r24, 0x09	; 9
    12e6:	e0 e0       	ldi	r30, 0x00	; 0
    12e8:	f1 e0       	ldi	r31, 0x01	; 1
    12ea:	de 01       	movw	r26, r28
    12ec:	1e 96       	adiw	r26, 0x0e	; 14
    12ee:	01 90       	ld	r0, Z+
    12f0:	0d 92       	st	X+, r0
    12f2:	8a 95       	dec	r24
    12f4:	e1 f7       	brne	.-8      	; 0x12ee <main+0x2c>
	
	// String zum in die Datei schreiben.
	uint8_t str[] = "Hallo Datei!";
    12f6:	8d e0       	ldi	r24, 0x0D	; 13
    12f8:	e9 e0       	ldi	r30, 0x09	; 9
    12fa:	f1 e0       	ldi	r31, 0x01	; 1
    12fc:	de 01       	movw	r26, r28
    12fe:	11 96       	adiw	r26, 0x01	; 1
    1300:	01 90       	ld	r0, Z+
    1302:	0d 92       	st	X+, r0
    1304:	8a 95       	dec	r24
    1306:	e1 f7       	brne	.-8      	; 0x1300 <main+0x3e>
	
	// Wenn Datei nicht existiert
	//if (FALSE == ffileExsists(file_name))
	//{
		ffopen(file_name, 'c'); //Datei existiert nicht, also anlegen
    1308:	63 e6       	ldi	r22, 0x63	; 99
    130a:	ce 01       	movw	r24, r28
    130c:	0e 96       	adiw	r24, 0x0e	; 14
    130e:	9b dd       	rcall	.-1226   	; 0xe46 <ffopen>
		// Schreibt String auf Karte.
		// Nur richtige Strings koennen mit ffwrites geschrieben werden.
		ffwrites (str);
    1310:	ce 01       	movw	r24, r28
    1312:	01 96       	adiw	r24, 0x01	; 1
    1314:	c5 df       	rcall	.-118    	; 0x12a0 <ffwrites>
		
		// Neue Zeile in der Datei.
		// Schreibt Zeilenumbruch in die Text Datei.
		ffwrite ('\n');
    1316:	8a e0       	ldi	r24, 0x0A	; 10
    1318:	11 df       	rcall	.-478    	; 0x113c <ffwrite>
		// Für MS-Windows Terminal '\r' anhängen.
		ffwrite ('\r');
    131a:	8d e0       	ldi	r24, 0x0D	; 13
    131c:	0f df       	rcall	.-482    	; 0x113c <ffwrite>
		
		// Schließt Datei.
		ffclose();
    131e:	91 de       	rcall	.-734    	; 0x1042 <ffclose>
	//}
	
	// Datei existiert, also anhaengen !
	//if (TRUE == ffileExsists(file_name))
	//{
		ffopen (file_name, 'c');
    1320:	63 e6       	ldi	r22, 0x63	; 99
    1322:	ce 01       	movw	r24, r28
    1324:	0e 96       	adiw	r24, 0x0e	; 14
    1326:	8f dd       	rcall	.-1250   	; 0xe46 <ffopen>
		// Spult bis zum Dateiende vor um anzuhaengen.
		// Geht auch ohne Option MMC_OVER_WRITE
		ffseek (file.length);
    1328:	60 91 43 03 	lds	r22, 0x0343
    132c:	70 91 44 03 	lds	r23, 0x0344
    1330:	80 91 45 03 	lds	r24, 0x0345
    1334:	90 91 46 03 	lds	r25, 0x0346
    1338:	8f de       	rcall	.-738    	; 0x1058 <ffseek>
		
		// Schreibt String.
		ffwrites(str);
    133a:	ce 01       	movw	r24, r28
    133c:	01 96       	adiw	r24, 0x01	; 1
    133e:	b0 df       	rcall	.-160    	; 0x12a0 <ffwrites>
		
		// Neue Zeile in der Datei.
		// Schreibt Zeilenumbruch in die Textdatei.
		ffwrite ('\n');
    1340:	8a e0       	ldi	r24, 0x0A	; 10
    1342:	fc de       	rcall	.-520    	; 0x113c <ffwrite>
		// Für MS-Windows Terminal '\r' anhängen.
		ffwrite ('\r');
    1344:	8d e0       	ldi	r24, 0x0D	; 13
    1346:	fa de       	rcall	.-524    	; 0x113c <ffwrite>
		
		// Schließt Datei.
		ffclose();
    1348:	7c de       	rcall	.-776    	; 0x1042 <ffclose>
		ffclose();
	}*/
	
    while (1) 
    {
    }
    134a:	ff cf       	rjmp	.-2      	; 0x134a <main+0x88>
}
    134c:	8f ef       	ldi	r24, 0xFF	; 255
    134e:	9f ef       	ldi	r25, 0xFF	; 255
    1350:	66 96       	adiw	r28, 0x16	; 22
    1352:	0f b6       	in	r0, 0x3f	; 63
    1354:	f8 94       	cli
    1356:	de bf       	out	0x3e, r29	; 62
    1358:	0f be       	out	0x3f, r0	; 63
    135a:	cd bf       	out	0x3d, r28	; 61
    135c:	df 91       	pop	r29
    135e:	cf 91       	pop	r28
    1360:	08 95       	ret

00001362 <spi_write_byte>:
		uint8_t a;
	#endif

	// mmc/sd in hardware spi
	#if (MMC_SOFT_SPI==FALSE)
		SPDR = byte;    						//Sendet ein Byte
    1362:	8e bd       	out	0x2e, r24	; 46
		loop_until_bit_is_set(SPSR,SPIF);
    1364:	0d b4       	in	r0, 0x2d	; 45
    1366:	07 fe       	sbrs	r0, 7
    1368:	fd cf       	rjmp	.-6      	; 0x1364 <spi_write_byte+0x2>
			MMC_Write |= (1<<SPI_Clock); 		//setzt Clock Impuls wieder auf (High)
			MMC_Write &= ~(1<<SPI_Clock);		//erzeugt ein Clock Impuls (LOW)
		}
		MMC_Write |= (1<<SPI_MOSI);				//setzt Output wieder auf High
	#endif
}
    136a:	08 95       	ret

0000136c <spi_read_byte>:
// *****************************************************************************
static uint8_t spi_read_byte(void){
	
	// mmc/sd in hardware spi
	#if (MMC_SOFT_SPI==FALSE)
	  SPDR = 0xff;
    136c:	8f ef       	ldi	r24, 0xFF	; 255
    136e:	8e bd       	out	0x2e, r24	; 46
	  loop_until_bit_is_set(SPSR,SPIF);
    1370:	0d b4       	in	r0, 0x2d	; 45
    1372:	07 fe       	sbrs	r0, 7
    1374:	fd cf       	rjmp	.-6      	; 0x1370 <spi_read_byte+0x4>
	  return (SPDR);
    1376:	8e b5       	in	r24, 0x2e	; 46
			}
			MMC_Write &=~(1<<SPI_Clock); 				//erzeugt ein Clock Impuls (Low)
		}
		return (Byte);
	#endif
}
    1378:	08 95       	ret

0000137a <mmc_disable>:
}

// **********************************************************************************************************************************
static void mmc_disable(){

   MMC_CS_HIGH;   
    137a:	2c 9a       	sbi	0x05, 4	; 5
   spi_read_byte();
    137c:	f7 cf       	rjmp	.-18     	; 0x136c <spi_read_byte>
    137e:	08 95       	ret

00001380 <mmc_wait_ready>:
#endif

// **********************************************************************************************************************************
// wartet darauf, dass die mmc karte in idle geht
// **********************************************************************************************************************************
static uint8_t mmc_wait_ready (void){
    1380:	cf 93       	push	r28
    1382:	df 93       	push	r29
    1384:	1f 92       	push	r1
    1386:	cd b7       	in	r28, 0x3d	; 61
    1388:	de b7       	in	r29, 0x3e	; 62

	volatile uint8_t TimingDelay = 50;
    138a:	82 e3       	ldi	r24, 0x32	; 50
    138c:	89 83       	std	Y+1, r24	; 0x01

	do{
		if(	 spi_read_byte() == 0xFF ) return TRUE;
    138e:	ee df       	rcall	.-36     	; 0x136c <spi_read_byte>
    1390:	8f 3f       	cpi	r24, 0xFF	; 255
    1392:	21 f0       	breq	.+8      	; 0x139c <mmc_wait_ready+0x1c>
	}while ( TimingDelay );
    1394:	89 81       	ldd	r24, Y+1	; 0x01
    1396:	81 11       	cpse	r24, r1
    1398:	fa cf       	rjmp	.-12     	; 0x138e <mmc_wait_ready+0xe>
    139a:	01 c0       	rjmp	.+2      	; 0x139e <mmc_wait_ready+0x1e>
static uint8_t mmc_wait_ready (void){

	volatile uint8_t TimingDelay = 50;

	do{
		if(	 spi_read_byte() == 0xFF ) return TRUE;
    139c:	81 e0       	ldi	r24, 0x01	; 1
	}while ( TimingDelay );

	return FALSE;
}
    139e:	0f 90       	pop	r0
    13a0:	df 91       	pop	r29
    13a2:	cf 91       	pop	r28
    13a4:	08 95       	ret

000013a6 <mmc_send_cmd>:

	return TRUE;
}

// **********************************************************************************************************************************
static uint8_t mmc_send_cmd (	uint8_t cmd,	uint32_t arg){
    13a6:	ff 92       	push	r15
    13a8:	0f 93       	push	r16
    13aa:	1f 93       	push	r17
    13ac:	cf 93       	push	r28
    13ae:	df 93       	push	r29
    13b0:	c8 2f       	mov	r28, r24
    13b2:	d4 2f       	mov	r29, r20
    13b4:	15 2f       	mov	r17, r21
    13b6:	06 2f       	mov	r16, r22
    13b8:	f7 2e       	mov	r15, r23
	
	uint8_t n, res;
	// Select the card and wait for ready 
	mmc_disable();
    13ba:	df df       	rcall	.-66     	; 0x137a <mmc_disable>


// **********************************************************************************************************************************
static uint8_t mmc_enable(){
      
   MMC_CS_LOW;
    13bc:	2c 98       	cbi	0x05, 4	; 5
   if( !mmc_wait_ready() ){
    13be:	e0 df       	rcall	.-64     	; 0x1380 <mmc_wait_ready>
    13c0:	81 11       	cpse	r24, r1
    13c2:	11 c0       	rjmp	.+34     	; 0x13e6 <mmc_send_cmd+0x40>
   	  mmc_disable();
    13c4:	da df       	rcall	.-76     	; 0x137a <mmc_disable>
	
	uint8_t n, res;
	// Select the card and wait for ready 
	mmc_disable();
	if ( FALSE == mmc_enable() ){
		return 0xFF;
    13c6:	8f ef       	ldi	r24, 0xFF	; 255
    13c8:	22 c0       	rjmp	.+68     	; 0x140e <mmc_send_cmd+0x68>
	spi_write_byte( (uint8_t)(arg >> 16) );	// Argument[23..16]
	spi_write_byte( (uint8_t)(arg >> 8) );	// Argument[15..8]
	spi_write_byte( (uint8_t)arg );			// Argument[7..0]
	n = 0x01;										// Dummy CRC + Stop 
	if (cmd == CMD0) n = 0x95;						// Valid CRC for CMD0(0) 
	if (cmd == CMD8) n = 0x87;						// Valid CRC for CMD8(0x1AA) 
    13ca:	c8 30       	cpi	r28, 0x08	; 8
    13cc:	d1 f0       	breq	.+52     	; 0x1402 <mmc_send_cmd+0x5c>
	spi_write_byte(n);
    13ce:	81 e0       	ldi	r24, 0x01	; 1
    13d0:	c8 df       	rcall	.-112    	; 0x1362 <spi_write_byte>

	// Receive command response 
	if (cmd == CMD12) spi_read_byte();				// Skip a stuff byte when stop reading 
    13d2:	cc 30       	cpi	r28, 0x0C	; 12
    13d4:	09 f4       	brne	.+2      	; 0x13d8 <mmc_send_cmd+0x32>
    13d6:	ca df       	rcall	.-108    	; 0x136c <spi_read_byte>

	return TRUE;
}

// **********************************************************************************************************************************
static uint8_t mmc_send_cmd (	uint8_t cmd,	uint32_t arg){
    13d8:	ca e0       	ldi	r28, 0x0A	; 10

	// Receive command response 
	if (cmd == CMD12) spi_read_byte();				// Skip a stuff byte when stop reading 
	n = 10;											// Wait for a valid response in timeout of 10 attempts 
	do
		res = spi_read_byte();
    13da:	c8 df       	rcall	.-112    	; 0x136c <spi_read_byte>
	while ( (res & 0x80) && --n );
    13dc:	88 23       	and	r24, r24
    13de:	bc f4       	brge	.+46     	; 0x140e <mmc_send_cmd+0x68>
    13e0:	c1 50       	subi	r28, 0x01	; 1
    13e2:	d9 f7       	brne	.-10     	; 0x13da <mmc_send_cmd+0x34>
    13e4:	14 c0       	rjmp	.+40     	; 0x140e <mmc_send_cmd+0x68>
	mmc_disable();
	if ( FALSE == mmc_enable() ){
		return 0xFF;
	}
	// Send command packet 
	spi_write_byte(0x40 | cmd);						// Start + Command index 
    13e6:	8c 2f       	mov	r24, r28
    13e8:	80 64       	ori	r24, 0x40	; 64
    13ea:	bb df       	rcall	.-138    	; 0x1362 <spi_write_byte>
	spi_write_byte( (uint8_t)(arg >> 24) );	// Argument[31..24]
    13ec:	8f 2d       	mov	r24, r15
    13ee:	b9 df       	rcall	.-142    	; 0x1362 <spi_write_byte>
	spi_write_byte( (uint8_t)(arg >> 16) );	// Argument[23..16]
    13f0:	80 2f       	mov	r24, r16
    13f2:	b7 df       	rcall	.-146    	; 0x1362 <spi_write_byte>
	spi_write_byte( (uint8_t)(arg >> 8) );	// Argument[15..8]
    13f4:	81 2f       	mov	r24, r17
    13f6:	b5 df       	rcall	.-150    	; 0x1362 <spi_write_byte>
	spi_write_byte( (uint8_t)arg );			// Argument[7..0]
    13f8:	8d 2f       	mov	r24, r29
    13fa:	b3 df       	rcall	.-154    	; 0x1362 <spi_write_byte>
	n = 0x01;										// Dummy CRC + Stop 
	if (cmd == CMD0) n = 0x95;						// Valid CRC for CMD0(0) 
    13fc:	cc 23       	and	r28, r28
    13fe:	21 f0       	breq	.+8      	; 0x1408 <mmc_send_cmd+0x62>
    1400:	e4 cf       	rjmp	.-56     	; 0x13ca <mmc_send_cmd+0x24>
	if (cmd == CMD8) n = 0x87;						// Valid CRC for CMD8(0x1AA) 
	spi_write_byte(n);
    1402:	87 e8       	ldi	r24, 0x87	; 135
    1404:	ae df       	rcall	.-164    	; 0x1362 <spi_write_byte>
    1406:	e8 cf       	rjmp	.-48     	; 0x13d8 <mmc_send_cmd+0x32>
    1408:	85 e9       	ldi	r24, 0x95	; 149
    140a:	ab df       	rcall	.-170    	; 0x1362 <spi_write_byte>
    140c:	e5 cf       	rjmp	.-54     	; 0x13d8 <mmc_send_cmd+0x32>
	do
		res = spi_read_byte();
	while ( (res & 0x80) && --n );

	return res;										// Return with the response value 
}
    140e:	df 91       	pop	r29
    1410:	cf 91       	pop	r28
    1412:	1f 91       	pop	r17
    1414:	0f 91       	pop	r16
    1416:	ff 90       	pop	r15
    1418:	08 95       	ret

0000141a <mmc_init>:




// **********************************************************************************************************************************
uint8_t mmc_init (void){
    141a:	cf 92       	push	r12
    141c:	df 92       	push	r13
    141e:	ef 92       	push	r14
    1420:	ff 92       	push	r15
    1422:	0f 93       	push	r16
    1424:	1f 93       	push	r17
    1426:	cf 93       	push	r28
    1428:	df 93       	push	r29
    142a:	00 d0       	rcall	.+0      	; 0x142c <mmc_init+0x12>
    142c:	00 d0       	rcall	.+0      	; 0x142e <mmc_init+0x14>
    142e:	1f 92       	push	r1
    1430:	cd b7       	in	r28, 0x3d	; 61
    1432:	de b7       	in	r29, 0x3e	; 62

// *****************************************************************************
static void spi_init(void){
 	
	// port configuration der mmc/sd/sdhc karte
	MMC_Direction_REG &=~(1<<SPI_MISO);         // miso auf input
    1434:	26 98       	cbi	0x04, 6	; 4
	MMC_Direction_REG |= (1<<SPI_Clock);      	// clock auf output
    1436:	27 9a       	sbi	0x04, 7	; 4
	MMC_Direction_REG |= (1<<SPI_MOSI);         // mosi auf output
    1438:	25 9a       	sbi	0x04, 5	; 4
	MMC_Direction_REG |= (1<<SPI_SS);			// chip select auf output
    143a:	24 9a       	sbi	0x04, 4	; 4

	// hardware spi: bus clock = idle low, spi clock / 128 , spi master mode
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0)|(1<<SPR1);
    143c:	83 e5       	ldi	r24, 0x53	; 83
    143e:	8c bd       	out	0x2c, r24	; 44

	MMC_Write |= (1<<SPI_SS);       	// chip selet auf high, karte anwaehlen
    1440:	2c 9a       	sbi	0x05, 4	; 5

	uint8_t cmd, ty, ocr[4];
	uint16_t n, j;
	volatile uint8_t TimingDelay;
	spi_init();
	mmc_disable();
    1442:	9b df       	rcall	.-202    	; 0x137a <mmc_disable>
    1444:	04 e6       	ldi	r16, 0x64	; 100
    1446:	10 e0       	ldi	r17, 0x00	; 0

	for (n = 100; n; n--) spi_read_byte();    					// 80+ dummy clocks
    1448:	91 df       	rcall	.-222    	; 0x136c <spi_read_byte>
    144a:	01 50       	subi	r16, 0x01	; 1
    144c:	11 09       	sbc	r17, r1
    144e:	e1 f7       	brne	.-8      	; 0x1448 <mmc_init+0x2e>
    1450:	04 e6       	ldi	r16, 0x64	; 100
    1452:	10 e0       	ldi	r17, 0x00	; 0

	ty = 0;
	j=100;
	do {
		if (mmc_send_cmd(CMD0, 0) == 1) {      					// Enter Idle state
    1454:	40 e0       	ldi	r20, 0x00	; 0
    1456:	50 e0       	ldi	r21, 0x00	; 0
    1458:	ba 01       	movw	r22, r20
    145a:	80 e0       	ldi	r24, 0x00	; 0
    145c:	a4 df       	rcall	.-184    	; 0x13a6 <mmc_send_cmd>
    145e:	81 30       	cpi	r24, 0x01	; 1
    1460:	09 f0       	breq	.+2      	; 0x1464 <mmc_init+0x4a>
    1462:	76 c0       	rjmp	.+236    	; 0x1550 <mmc_init+0x136>
			j=0;
			TimingDelay = 100;            						// Initialization timeout of 1000 msec
    1464:	84 e6       	ldi	r24, 0x64	; 100
    1466:	8d 83       	std	Y+5, r24	; 0x05

			if (mmc_send_cmd(CMD8, 0x1AA) == 1) {  				// SDv2?
    1468:	4a ea       	ldi	r20, 0xAA	; 170
    146a:	51 e0       	ldi	r21, 0x01	; 1
    146c:	60 e0       	ldi	r22, 0x00	; 0
    146e:	70 e0       	ldi	r23, 0x00	; 0
    1470:	88 e0       	ldi	r24, 0x08	; 8
    1472:	99 df       	rcall	.-206    	; 0x13a6 <mmc_send_cmd>
    1474:	81 30       	cpi	r24, 0x01	; 1
    1476:	09 f0       	breq	.+2      	; 0x147a <mmc_init+0x60>
    1478:	41 c0       	rjmp	.+130    	; 0x14fc <mmc_init+0xe2>
    147a:	ce 01       	movw	r24, r28
    147c:	01 96       	adiw	r24, 0x01	; 1
    147e:	6c 01       	movw	r12, r24
    1480:	7e 01       	movw	r14, r28
    1482:	95 e0       	ldi	r25, 0x05	; 5
    1484:	e9 0e       	add	r14, r25
    1486:	f1 1c       	adc	r15, r1
    1488:	86 01       	movw	r16, r12
				for (n = 0; n < 4; n++){
					ocr[n] = spi_read_byte();    				// Get trailing return value of R7 resp
    148a:	70 df       	rcall	.-288    	; 0x136c <spi_read_byte>
    148c:	f8 01       	movw	r30, r16
    148e:	81 93       	st	Z+, r24
    1490:	8f 01       	movw	r16, r30
		if (mmc_send_cmd(CMD0, 0) == 1) {      					// Enter Idle state
			j=0;
			TimingDelay = 100;            						// Initialization timeout of 1000 msec

			if (mmc_send_cmd(CMD8, 0x1AA) == 1) {  				// SDv2?
				for (n = 0; n < 4; n++){
    1492:	ee 15       	cp	r30, r14
    1494:	ff 05       	cpc	r31, r15
    1496:	c9 f7       	brne	.-14     	; 0x148a <mmc_init+0x70>
					ocr[n] = spi_read_byte();    				// Get trailing return value of R7 resp
				}
				if (ocr[2] == 0x01 && ocr[3] == 0xAA) {         // The card can work at vdd range of 2.7-3.6V
    1498:	8b 81       	ldd	r24, Y+3	; 0x03
    149a:	81 30       	cpi	r24, 0x01	; 1
    149c:	09 f0       	breq	.+2      	; 0x14a0 <mmc_init+0x86>
    149e:	45 c0       	rjmp	.+138    	; 0x152a <mmc_init+0x110>
    14a0:	8c 81       	ldd	r24, Y+4	; 0x04
    14a2:	8a 3a       	cpi	r24, 0xAA	; 170
    14a4:	79 f0       	breq	.+30     	; 0x14c4 <mmc_init+0xaa>
    14a6:	00 e0       	ldi	r16, 0x00	; 0
    14a8:	41 c0       	rjmp	.+130    	; 0x152c <mmc_init+0x112>
					while (TimingDelay) {  						// Wait for leaving idle state (ACMD41 with HCS bit)
						mmc_send_cmd(CMD55, 0);
    14aa:	40 e0       	ldi	r20, 0x00	; 0
    14ac:	50 e0       	ldi	r21, 0x00	; 0
    14ae:	ba 01       	movw	r22, r20
    14b0:	87 e3       	ldi	r24, 0x37	; 55
    14b2:	79 df       	rcall	.-270    	; 0x13a6 <mmc_send_cmd>
						if(!mmc_send_cmd(ACMD41, 1UL << 30))
    14b4:	40 e0       	ldi	r20, 0x00	; 0
    14b6:	50 e0       	ldi	r21, 0x00	; 0
    14b8:	60 e0       	ldi	r22, 0x00	; 0
    14ba:	70 e4       	ldi	r23, 0x40	; 64
    14bc:	89 e2       	ldi	r24, 0x29	; 41
    14be:	73 df       	rcall	.-282    	; 0x13a6 <mmc_send_cmd>
    14c0:	88 23       	and	r24, r24
    14c2:	b9 f0       	breq	.+46     	; 0x14f2 <mmc_init+0xd8>
			if (mmc_send_cmd(CMD8, 0x1AA) == 1) {  				// SDv2?
				for (n = 0; n < 4; n++){
					ocr[n] = spi_read_byte();    				// Get trailing return value of R7 resp
				}
				if (ocr[2] == 0x01 && ocr[3] == 0xAA) {         // The card can work at vdd range of 2.7-3.6V
					while (TimingDelay) {  						// Wait for leaving idle state (ACMD41 with HCS bit)
    14c4:	8d 81       	ldd	r24, Y+5	; 0x05
    14c6:	81 11       	cpse	r24, r1
    14c8:	f0 cf       	rjmp	.-32     	; 0x14aa <mmc_init+0x90>
    14ca:	13 c0       	rjmp	.+38     	; 0x14f2 <mmc_init+0xd8>
						if(!mmc_send_cmd(ACMD41, 1UL << 30))
							break;
					}

					while(TimingDelay) {
						if (mmc_send_cmd(CMD58, 0) == 0x00) {    // Check CCS bit in the OCR
    14cc:	40 e0       	ldi	r20, 0x00	; 0
    14ce:	50 e0       	ldi	r21, 0x00	; 0
    14d0:	ba 01       	movw	r22, r20
    14d2:	8a e3       	ldi	r24, 0x3A	; 58
    14d4:	68 df       	rcall	.-304    	; 0x13a6 <mmc_send_cmd>
    14d6:	81 11       	cpse	r24, r1
    14d8:	0c c0       	rjmp	.+24     	; 0x14f2 <mmc_init+0xd8>
							for (n = 0; n < 4; n++){
								ocr[n] = spi_read_byte();
    14da:	48 df       	rcall	.-368    	; 0x136c <spi_read_byte>
    14dc:	f6 01       	movw	r30, r12
    14de:	81 93       	st	Z+, r24
    14e0:	6f 01       	movw	r12, r30
							break;
					}

					while(TimingDelay) {
						if (mmc_send_cmd(CMD58, 0) == 0x00) {    // Check CCS bit in the OCR
							for (n = 0; n < 4; n++){
    14e2:	ee 15       	cp	r30, r14
    14e4:	ff 05       	cpc	r31, r15
    14e6:	c9 f7       	brne	.-14     	; 0x14da <mmc_init+0xc0>
								ocr[n] = spi_read_byte();
							}
							ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;  // SDv2
    14e8:	89 81       	ldd	r24, Y+1	; 0x01
    14ea:	86 fd       	sbrc	r24, 6
    14ec:	2b c0       	rjmp	.+86     	; 0x1544 <mmc_init+0x12a>
    14ee:	04 e0       	ldi	r16, 0x04	; 4
    14f0:	1d c0       	rjmp	.+58     	; 0x152c <mmc_init+0x112>
						mmc_send_cmd(CMD55, 0);
						if(!mmc_send_cmd(ACMD41, 1UL << 30))
							break;
					}

					while(TimingDelay) {
    14f2:	8d 81       	ldd	r24, Y+5	; 0x05
    14f4:	81 11       	cpse	r24, r1
    14f6:	ea cf       	rjmp	.-44     	; 0x14cc <mmc_init+0xb2>
    14f8:	00 e0       	ldi	r16, 0x00	; 0
    14fa:	18 c0       	rjmp	.+48     	; 0x152c <mmc_init+0x112>
							break;
						}
					}
				}
			} else {        									// SDv1 or MMCv3
				if (mmc_send_cmd(ACMD41, 0) <= 1)   {
    14fc:	40 e0       	ldi	r20, 0x00	; 0
    14fe:	50 e0       	ldi	r21, 0x00	; 0
    1500:	ba 01       	movw	r22, r20
    1502:	89 e2       	ldi	r24, 0x29	; 41
    1504:	50 df       	rcall	.-352    	; 0x13a6 <mmc_send_cmd>
    1506:	82 30       	cpi	r24, 0x02	; 2
    1508:	18 f0       	brcs	.+6      	; 0x1510 <mmc_init+0xf6>
					ty = CT_SD1;
					cmd = ACMD41;  								// SDv1
				} else {
					ty = CT_MMC;
    150a:	01 e0       	ldi	r16, 0x01	; 1
					cmd = CMD1;    								// MMCv3
    150c:	11 e0       	ldi	r17, 0x01	; 1
    150e:	02 c0       	rjmp	.+4      	; 0x1514 <mmc_init+0xfa>
						}
					}
				}
			} else {        									// SDv1 or MMCv3
				if (mmc_send_cmd(ACMD41, 0) <= 1)   {
					ty = CT_SD1;
    1510:	02 e0       	ldi	r16, 0x02	; 2
					cmd = ACMD41;  								// SDv1
    1512:	19 e2       	ldi	r17, 0x29	; 41
				} else {
					ty = CT_MMC;
					cmd = CMD1;    								// MMCv3
				}
				while (TimingDelay && mmc_send_cmd(cmd, 0));    // Wait for leaving idle state
    1514:	9d 81       	ldd	r25, Y+5	; 0x05
    1516:	99 23       	and	r25, r25
    1518:	49 f0       	breq	.+18     	; 0x152c <mmc_init+0x112>
    151a:	40 e0       	ldi	r20, 0x00	; 0
    151c:	50 e0       	ldi	r21, 0x00	; 0
    151e:	ba 01       	movw	r22, r20
    1520:	81 2f       	mov	r24, r17
    1522:	41 df       	rcall	.-382    	; 0x13a6 <mmc_send_cmd>
    1524:	81 11       	cpse	r24, r1
    1526:	f6 cf       	rjmp	.-20     	; 0x1514 <mmc_init+0xfa>
    1528:	01 c0       	rjmp	.+2      	; 0x152c <mmc_init+0x112>
    152a:	00 e0       	ldi	r16, 0x00	; 0
			}
			if(ty != (CT_SD2 | CT_BLOCK)) {
				while(TimingDelay && (mmc_send_cmd(CMD16, 512) != 0));
    152c:	8d 81       	ldd	r24, Y+5	; 0x05
    152e:	88 23       	and	r24, r24
    1530:	51 f0       	breq	.+20     	; 0x1546 <mmc_init+0x12c>
    1532:	40 e0       	ldi	r20, 0x00	; 0
    1534:	52 e0       	ldi	r21, 0x02	; 2
    1536:	60 e0       	ldi	r22, 0x00	; 0
    1538:	70 e0       	ldi	r23, 0x00	; 0
    153a:	80 e1       	ldi	r24, 0x10	; 16
    153c:	34 df       	rcall	.-408    	; 0x13a6 <mmc_send_cmd>
    153e:	81 11       	cpse	r24, r1
    1540:	f5 cf       	rjmp	.-22     	; 0x152c <mmc_init+0x112>
    1542:	01 c0       	rjmp	.+2      	; 0x1546 <mmc_init+0x12c>
					while(TimingDelay) {
						if (mmc_send_cmd(CMD58, 0) == 0x00) {    // Check CCS bit in the OCR
							for (n = 0; n < 4; n++){
								ocr[n] = spi_read_byte();
							}
							ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;  // SDv2
    1544:	0c e0       	ldi	r16, 0x0C	; 12
				while (TimingDelay && mmc_send_cmd(cmd, 0));    // Wait for leaving idle state
			}
			if(ty != (CT_SD2 | CT_BLOCK)) {
				while(TimingDelay && (mmc_send_cmd(CMD16, 512) != 0));
			}
			if(!TimingDelay) ty = 0;
    1546:	8d 81       	ldd	r24, Y+5	; 0x05
    1548:	81 11       	cpse	r24, r1
    154a:	07 c0       	rjmp	.+14     	; 0x155a <mmc_init+0x140>
    154c:	00 e0       	ldi	r16, 0x00	; 0
    154e:	05 c0       	rjmp	.+10     	; 0x155a <mmc_init+0x140>
    1550:	01 50       	subi	r16, 0x01	; 1
    1552:	11 09       	sbc	r17, r1
		} else { j--; }
	}while(j>0);
    1554:	09 f0       	breq	.+2      	; 0x1558 <mmc_init+0x13e>
    1556:	7e cf       	rjmp	.-260    	; 0x1454 <mmc_init+0x3a>
    1558:	00 e0       	ldi	r16, 0x00	; 0

	fat.card_type = ty;
    155a:	0f 2e       	mov	r0, r31
    155c:	f7 e1       	ldi	r31, 0x17	; 23
    155e:	ef 2e       	mov	r14, r31
    1560:	f1 e0       	ldi	r31, 0x01	; 1
    1562:	ff 2e       	mov	r15, r31
    1564:	f0 2d       	mov	r31, r0
    1566:	f7 01       	movw	r30, r14
    1568:	07 8b       	std	Z+23, r16	; 0x17
	mmc_disable();
    156a:	07 df       	rcall	.-498    	; 0x137a <mmc_disable>

	if( fat.card_type == 0 ){
    156c:	f7 01       	movw	r30, r14
    156e:	87 89       	ldd	r24, Z+23	; 0x17
    1570:	88 23       	and	r24, r24
    1572:	39 f0       	breq	.+14     	; 0x1582 <mmc_init+0x168>
#if (MMC_MAX_SPEED==TRUE)
// *****************************************************************************
static void spi_maxSpeed(){
	
	//SPI Bus auf max Geschwindigkeit
	SPCR &= ~((1<<SPR0) | (1<<SPR1));
    1574:	8c b5       	in	r24, 0x2c	; 44
    1576:	8c 7f       	andi	r24, 0xFC	; 252
    1578:	8c bd       	out	0x2c, r24	; 44
	SPSR |= (1<<SPI2X);
    157a:	8d b5       	in	r24, 0x2d	; 45
    157c:	81 60       	ori	r24, 0x01	; 1
    157e:	8d bd       	out	0x2d, r24	; 45
	}
	#if (MMC_MAX_SPEED==TRUE)
		spi_maxSpeed();
	#endif

	return TRUE;
    1580:	81 e0       	ldi	r24, 0x01	; 1
}
    1582:	0f 90       	pop	r0
    1584:	0f 90       	pop	r0
    1586:	0f 90       	pop	r0
    1588:	0f 90       	pop	r0
    158a:	0f 90       	pop	r0
    158c:	df 91       	pop	r29
    158e:	cf 91       	pop	r28
    1590:	1f 91       	pop	r17
    1592:	0f 91       	pop	r16
    1594:	ff 90       	pop	r15
    1596:	ef 90       	pop	r14
    1598:	df 90       	pop	r13
    159a:	cf 90       	pop	r12
    159c:	08 95       	ret

0000159e <mmc_write_sector>:


// **********************************************************************************************************************************
// Routine zum schreiben eines Blocks(512Byte) auf die MMC/SD-Karte
// **********************************************************************************************************************************
uint8_t mmc_write_sector (uint32_t addr,uint8_t *buffer){
    159e:	ff 92       	push	r15
    15a0:	0f 93       	push	r16
    15a2:	1f 93       	push	r17
    15a4:	cf 93       	push	r28
    15a6:	df 93       	push	r29
    15a8:	8a 01       	movw	r16, r20

	uint8_t resp;
	uint8_t retrys;
	uint16_t count;
   	
	if ( !(fat.card_type & CT_BLOCK) ){
    15aa:	20 91 2e 01 	lds	r18, 0x012E
    15ae:	23 fd       	sbrc	r18, 3
    15b0:	09 c0       	rjmp	.+18     	; 0x15c4 <mmc_write_sector+0x26>
		addr *= 512;				// Convert to byte address if needed 
    15b2:	05 2e       	mov	r0, r21
    15b4:	59 e0       	ldi	r21, 0x09	; 9
    15b6:	66 0f       	add	r22, r22
    15b8:	77 1f       	adc	r23, r23
    15ba:	88 1f       	adc	r24, r24
    15bc:	99 1f       	adc	r25, r25
    15be:	5a 95       	dec	r21
    15c0:	d1 f7       	brne	.-12     	; 0x15b6 <mmc_write_sector+0x18>
    15c2:	50 2d       	mov	r21, r0
	}
	
	if ( mmc_send_cmd(CMD24, addr) != 0){ 	// enables card		
    15c4:	ab 01       	movw	r20, r22
    15c6:	bc 01       	movw	r22, r24
    15c8:	88 e1       	ldi	r24, 0x18	; 24
    15ca:	ed de       	rcall	.-550    	; 0x13a6 <mmc_send_cmd>
    15cc:	f8 2e       	mov	r15, r24
    15ce:	81 11       	cpse	r24, r1
    15d0:	1e c0       	rjmp	.+60     	; 0x160e <mmc_write_sector+0x70>
		return FALSE;
	}

	if ( FALSE == mmc_wait_ready() ){		
    15d2:	d6 de       	rcall	.-596    	; 0x1380 <mmc_wait_ready>
    15d4:	88 23       	and	r24, r24
    15d6:	f1 f0       	breq	.+60     	; 0x1614 <mmc_write_sector+0x76>
		return FALSE;
	}

	spi_write_byte(0xFE);			// Xmit data token 
    15d8:	8e ef       	ldi	r24, 0xFE	; 254
    15da:	c3 de       	rcall	.-634    	; 0x1362 <spi_write_byte>
    15dc:	e8 01       	movw	r28, r16
    15de:	1e 5f       	subi	r17, 0xFE	; 254
	
	count = 512;
	do {							// Xmit the 512 byte data block to MMC 
		spi_write_byte(*buffer++);		
    15e0:	89 91       	ld	r24, Y+
    15e2:	bf de       	rcall	.-642    	; 0x1362 <spi_write_byte>
	} while (--count);
    15e4:	c0 17       	cp	r28, r16
    15e6:	d1 07       	cpc	r29, r17
    15e8:	d9 f7       	brne	.-10     	; 0x15e0 <mmc_write_sector+0x42>
	
	spi_write_byte(0xFF);			// CRC (Dummy) 
    15ea:	8f ef       	ldi	r24, 0xFF	; 255
    15ec:	ba de       	rcall	.-652    	; 0x1362 <spi_write_byte>
	spi_write_byte(0xFF);
    15ee:	8f ef       	ldi	r24, 0xFF	; 255
    15f0:	b8 de       	rcall	.-656    	; 0x1362 <spi_write_byte>
	
	retrys = 20;			
    15f2:	c4 e1       	ldi	r28, 0x14	; 20
	do{
		resp = spi_read_byte();		// Reveive data response, 20 retrys if not acepted
    15f4:	bb de       	rcall	.-650    	; 0x136c <spi_read_byte>
	}while( (resp & 0x1F) != 0x05 && --retrys);
    15f6:	8f 71       	andi	r24, 0x1F	; 31
    15f8:	85 30       	cpi	r24, 0x05	; 5
    15fa:	21 f0       	breq	.+8      	; 0x1604 <mmc_write_sector+0x66>
    15fc:	c1 50       	subi	r28, 0x01	; 1
    15fe:	d1 f7       	brne	.-12     	; 0x15f4 <mmc_write_sector+0x56>
	
	if ( retrys == 0){				// If not accepted, return with error 		
		return FALSE;
    1600:	8f 2d       	mov	r24, r15
    1602:	08 c0       	rjmp	.+16     	; 0x1614 <mmc_write_sector+0x76>
	retrys = 20;			
	do{
		resp = spi_read_byte();		// Reveive data response, 20 retrys if not acepted
	}while( (resp & 0x1F) != 0x05 && --retrys);
	
	if ( retrys == 0){				// If not accepted, return with error 		
    1604:	cc 23       	and	r28, r28
    1606:	29 f0       	breq	.+10     	; 0x1612 <mmc_write_sector+0x74>
		return FALSE;
	}
	
	mmc_disable();
    1608:	b8 de       	rcall	.-656    	; 0x137a <mmc_disable>

	return TRUE;
    160a:	81 e0       	ldi	r24, 0x01	; 1
    160c:	03 c0       	rjmp	.+6      	; 0x1614 <mmc_write_sector+0x76>
	if ( !(fat.card_type & CT_BLOCK) ){
		addr *= 512;				// Convert to byte address if needed 
	}
	
	if ( mmc_send_cmd(CMD24, addr) != 0){ 	// enables card		
		return FALSE;
    160e:	80 e0       	ldi	r24, 0x00	; 0
    1610:	01 c0       	rjmp	.+2      	; 0x1614 <mmc_write_sector+0x76>
	do{
		resp = spi_read_byte();		// Reveive data response, 20 retrys if not acepted
	}while( (resp & 0x1F) != 0x05 && --retrys);
	
	if ( retrys == 0){				// If not accepted, return with error 		
		return FALSE;
    1612:	8f 2d       	mov	r24, r15
	}
	
	mmc_disable();

	return TRUE;
}
    1614:	df 91       	pop	r29
    1616:	cf 91       	pop	r28
    1618:	1f 91       	pop	r17
    161a:	0f 91       	pop	r16
    161c:	ff 90       	pop	r15
    161e:	08 95       	ret

00001620 <mmc_read_sector>:


// **********************************************************************************************************************************
// Routine zum lesen eines Blocks(512Byte) von der MMC/SD-Karte
// **********************************************************************************************************************************
uint8_t mmc_read_sector (uint32_t addr,uint8_t *buffer){
    1620:	ef 92       	push	r14
    1622:	ff 92       	push	r15
    1624:	0f 93       	push	r16
    1626:	1f 93       	push	r17
    1628:	cf 93       	push	r28
    162a:	df 93       	push	r29
    162c:	1f 92       	push	r1
    162e:	cd b7       	in	r28, 0x3d	; 61
    1630:	de b7       	in	r29, 0x3e	; 62
    1632:	7a 01       	movw	r14, r20

	uint8_t token;
	uint16_t count;
	
	if ( !(fat.card_type & CT_BLOCK) ) addr *= 512;	// Convert to byte address if needed
    1634:	20 91 2e 01 	lds	r18, 0x012E
    1638:	23 fd       	sbrc	r18, 3
    163a:	09 c0       	rjmp	.+18     	; 0x164e <mmc_read_sector+0x2e>
    163c:	05 2e       	mov	r0, r21
    163e:	59 e0       	ldi	r21, 0x09	; 9
    1640:	66 0f       	add	r22, r22
    1642:	77 1f       	adc	r23, r23
    1644:	88 1f       	adc	r24, r24
    1646:	99 1f       	adc	r25, r25
    1648:	5a 95       	dec	r21
    164a:	d1 f7       	brne	.-12     	; 0x1640 <mmc_read_sector+0x20>
    164c:	50 2d       	mov	r21, r0

	if ( mmc_send_cmd(CMD17, addr) != 0 ){
    164e:	ab 01       	movw	r20, r22
    1650:	bc 01       	movw	r22, r24
    1652:	81 e1       	ldi	r24, 0x11	; 17
    1654:	a8 de       	rcall	.-688    	; 0x13a6 <mmc_send_cmd>
    1656:	18 2f       	mov	r17, r24
    1658:	81 11       	cpse	r24, r1
    165a:	1a c0       	rjmp	.+52     	; 0x1690 <mmc_read_sector+0x70>
		return FALSE;	
	}

	volatile uint8_t TimingDelay = 20;
    165c:	84 e1       	ldi	r24, 0x14	; 20
    165e:	89 83       	std	Y+1, r24	; 0x01
	do {							// Wait for data packet in timeout of 200ms 
		token = spi_read_byte();
    1660:	85 de       	rcall	.-758    	; 0x136c <spi_read_byte>
	} while ( (token == 0xFF) && TimingDelay );
    1662:	8f 3f       	cpi	r24, 0xFF	; 255
    1664:	21 f4       	brne	.+8      	; 0x166e <mmc_read_sector+0x4e>
    1666:	89 81       	ldd	r24, Y+1	; 0x01
    1668:	81 11       	cpse	r24, r1
    166a:	fa cf       	rjmp	.-12     	; 0x1660 <mmc_read_sector+0x40>
    166c:	14 c0       	rjmp	.+40     	; 0x1696 <mmc_read_sector+0x76>
	
	if(token != 0xFE){
    166e:	8e 3f       	cpi	r24, 0xFE	; 254
    1670:	89 f4       	brne	.+34     	; 0x1694 <mmc_read_sector+0x74>
    1672:	87 01       	movw	r16, r14
    1674:	8e ef       	ldi	r24, 0xFE	; 254
    1676:	f8 1a       	sub	r15, r24
		return FALSE;				// If not valid data token, retutn with error 
	}

	count = 512;
	do {							// Receive the data block into buffer 
		*buffer++ = spi_read_byte();
    1678:	79 de       	rcall	.-782    	; 0x136c <spi_read_byte>
    167a:	f8 01       	movw	r30, r16
    167c:	81 93       	st	Z+, r24
    167e:	8f 01       	movw	r16, r30
	} while (--count);
    1680:	ee 15       	cp	r30, r14
    1682:	ff 05       	cpc	r31, r15
    1684:	c9 f7       	brne	.-14     	; 0x1678 <mmc_read_sector+0x58>

	spi_read_byte();				// Discard CRC 
    1686:	72 de       	rcall	.-796    	; 0x136c <spi_read_byte>
	spi_read_byte();
    1688:	71 de       	rcall	.-798    	; 0x136c <spi_read_byte>

	mmc_disable();
    168a:	77 de       	rcall	.-786    	; 0x137a <mmc_disable>

	return TRUE;					// Return with success 
    168c:	81 e0       	ldi	r24, 0x01	; 1
    168e:	03 c0       	rjmp	.+6      	; 0x1696 <mmc_read_sector+0x76>
	uint16_t count;
	
	if ( !(fat.card_type & CT_BLOCK) ) addr *= 512;	// Convert to byte address if needed

	if ( mmc_send_cmd(CMD17, addr) != 0 ){
		return FALSE;	
    1690:	80 e0       	ldi	r24, 0x00	; 0
    1692:	01 c0       	rjmp	.+2      	; 0x1696 <mmc_read_sector+0x76>
	do {							// Wait for data packet in timeout of 200ms 
		token = spi_read_byte();
	} while ( (token == 0xFF) && TimingDelay );
	
	if(token != 0xFE){
		return FALSE;				// If not valid data token, retutn with error 
    1694:	81 2f       	mov	r24, r17
	spi_read_byte();

	mmc_disable();

	return TRUE;					// Return with success 
}
    1696:	0f 90       	pop	r0
    1698:	df 91       	pop	r29
    169a:	cf 91       	pop	r28
    169c:	1f 91       	pop	r17
    169e:	0f 91       	pop	r16
    16a0:	ff 90       	pop	r15
    16a2:	ef 90       	pop	r14
    16a4:	08 95       	ret

000016a6 <__udivmodsi4>:
    16a6:	a1 e2       	ldi	r26, 0x21	; 33
    16a8:	1a 2e       	mov	r1, r26
    16aa:	aa 1b       	sub	r26, r26
    16ac:	bb 1b       	sub	r27, r27
    16ae:	fd 01       	movw	r30, r26
    16b0:	0d c0       	rjmp	.+26     	; 0x16cc <__udivmodsi4_ep>

000016b2 <__udivmodsi4_loop>:
    16b2:	aa 1f       	adc	r26, r26
    16b4:	bb 1f       	adc	r27, r27
    16b6:	ee 1f       	adc	r30, r30
    16b8:	ff 1f       	adc	r31, r31
    16ba:	a2 17       	cp	r26, r18
    16bc:	b3 07       	cpc	r27, r19
    16be:	e4 07       	cpc	r30, r20
    16c0:	f5 07       	cpc	r31, r21
    16c2:	20 f0       	brcs	.+8      	; 0x16cc <__udivmodsi4_ep>
    16c4:	a2 1b       	sub	r26, r18
    16c6:	b3 0b       	sbc	r27, r19
    16c8:	e4 0b       	sbc	r30, r20
    16ca:	f5 0b       	sbc	r31, r21

000016cc <__udivmodsi4_ep>:
    16cc:	66 1f       	adc	r22, r22
    16ce:	77 1f       	adc	r23, r23
    16d0:	88 1f       	adc	r24, r24
    16d2:	99 1f       	adc	r25, r25
    16d4:	1a 94       	dec	r1
    16d6:	69 f7       	brne	.-38     	; 0x16b2 <__udivmodsi4_loop>
    16d8:	60 95       	com	r22
    16da:	70 95       	com	r23
    16dc:	80 95       	com	r24
    16de:	90 95       	com	r25
    16e0:	9b 01       	movw	r18, r22
    16e2:	ac 01       	movw	r20, r24
    16e4:	bd 01       	movw	r22, r26
    16e6:	cf 01       	movw	r24, r30
    16e8:	08 95       	ret

000016ea <__muluhisi3>:
    16ea:	09 d0       	rcall	.+18     	; 0x16fe <__umulhisi3>
    16ec:	a5 9f       	mul	r26, r21
    16ee:	90 0d       	add	r25, r0
    16f0:	b4 9f       	mul	r27, r20
    16f2:	90 0d       	add	r25, r0
    16f4:	a4 9f       	mul	r26, r20
    16f6:	80 0d       	add	r24, r0
    16f8:	91 1d       	adc	r25, r1
    16fa:	11 24       	eor	r1, r1
    16fc:	08 95       	ret

000016fe <__umulhisi3>:
    16fe:	a2 9f       	mul	r26, r18
    1700:	b0 01       	movw	r22, r0
    1702:	b3 9f       	mul	r27, r19
    1704:	c0 01       	movw	r24, r0
    1706:	a3 9f       	mul	r26, r19
    1708:	70 0d       	add	r23, r0
    170a:	81 1d       	adc	r24, r1
    170c:	11 24       	eor	r1, r1
    170e:	91 1d       	adc	r25, r1
    1710:	b2 9f       	mul	r27, r18
    1712:	70 0d       	add	r23, r0
    1714:	81 1d       	adc	r24, r1
    1716:	11 24       	eor	r1, r1
    1718:	91 1d       	adc	r25, r1
    171a:	08 95       	ret

0000171c <toupper>:
    171c:	91 11       	cpse	r25, r1
    171e:	08 95       	ret
    1720:	81 56       	subi	r24, 0x61	; 97
    1722:	8a 51       	subi	r24, 0x1A	; 26
    1724:	08 f4       	brcc	.+2      	; 0x1728 <toupper+0xc>
    1726:	80 52       	subi	r24, 0x20	; 32
    1728:	85 58       	subi	r24, 0x85	; 133
    172a:	08 95       	ret

0000172c <_exit>:
    172c:	f8 94       	cli

0000172e <__stop_program>:
    172e:	ff cf       	rjmp	.-2      	; 0x172e <__stop_program>
