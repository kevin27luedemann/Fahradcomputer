
SD_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000098  00800100  000047f4  00004888  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000047f4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000409  00800198  00800198  00004920  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00004920  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000497c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000360  00000000  00000000  000049bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000089a0  00000000  00000000  00004d1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000dd0  00000000  00000000  0000d6bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003da8  00000000  00000000  0000e48c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000012ac  00000000  00000000  00012234  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000e9d  00000000  00000000  000134e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00009e7b  00000000  00000000  0001437d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003c0  00000000  00000000  0001e1f8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	69 c1       	rjmp	.+722    	; 0x2d4 <__dtors_end>
       2:	00 00       	nop
       4:	91 c1       	rjmp	.+802    	; 0x328 <__bad_interrupt>
       6:	00 00       	nop
       8:	8f c1       	rjmp	.+798    	; 0x328 <__bad_interrupt>
       a:	00 00       	nop
       c:	8d c1       	rjmp	.+794    	; 0x328 <__bad_interrupt>
       e:	00 00       	nop
      10:	8b c1       	rjmp	.+790    	; 0x328 <__bad_interrupt>
      12:	00 00       	nop
      14:	89 c1       	rjmp	.+786    	; 0x328 <__bad_interrupt>
      16:	00 00       	nop
      18:	87 c1       	rjmp	.+782    	; 0x328 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	85 c1       	rjmp	.+778    	; 0x328 <__bad_interrupt>
      1e:	00 00       	nop
      20:	83 c1       	rjmp	.+774    	; 0x328 <__bad_interrupt>
      22:	00 00       	nop
      24:	81 c1       	rjmp	.+770    	; 0x328 <__bad_interrupt>
      26:	00 00       	nop
      28:	7f c1       	rjmp	.+766    	; 0x328 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	7d c1       	rjmp	.+762    	; 0x328 <__bad_interrupt>
      2e:	00 00       	nop
      30:	7b c1       	rjmp	.+758    	; 0x328 <__bad_interrupt>
      32:	00 00       	nop
      34:	79 c1       	rjmp	.+754    	; 0x328 <__bad_interrupt>
      36:	00 00       	nop
      38:	77 c1       	rjmp	.+750    	; 0x328 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	75 c1       	rjmp	.+746    	; 0x328 <__bad_interrupt>
      3e:	00 00       	nop
      40:	0c 94 58 1e 	jmp	0x3cb0	; 0x3cb0 <__vector_16>
      44:	71 c1       	rjmp	.+738    	; 0x328 <__bad_interrupt>
      46:	00 00       	nop
      48:	6f c1       	rjmp	.+734    	; 0x328 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	6d c1       	rjmp	.+730    	; 0x328 <__bad_interrupt>
      4e:	00 00       	nop
      50:	6b c1       	rjmp	.+726    	; 0x328 <__bad_interrupt>
      52:	00 00       	nop
      54:	69 c1       	rjmp	.+722    	; 0x328 <__bad_interrupt>
      56:	00 00       	nop
      58:	67 c1       	rjmp	.+718    	; 0x328 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	65 c1       	rjmp	.+714    	; 0x328 <__bad_interrupt>
      5e:	00 00       	nop
      60:	63 c1       	rjmp	.+710    	; 0x328 <__bad_interrupt>
      62:	00 00       	nop
      64:	61 c1       	rjmp	.+706    	; 0x328 <__bad_interrupt>
      66:	00 00       	nop
      68:	5f c1       	rjmp	.+702    	; 0x328 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	5d c1       	rjmp	.+698    	; 0x328 <__bad_interrupt>
      6e:	00 00       	nop
      70:	5b c1       	rjmp	.+694    	; 0x328 <__bad_interrupt>
      72:	00 00       	nop
      74:	59 c1       	rjmp	.+690    	; 0x328 <__bad_interrupt>
      76:	00 00       	nop
      78:	57 c1       	rjmp	.+686    	; 0x328 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	55 c1       	rjmp	.+682    	; 0x328 <__bad_interrupt>
      7e:	00 00       	nop
      80:	53 c1       	rjmp	.+678    	; 0x328 <__bad_interrupt>
      82:	00 00       	nop
      84:	51 c1       	rjmp	.+674    	; 0x328 <__bad_interrupt>
      86:	00 00       	nop
      88:	4f c1       	rjmp	.+670    	; 0x328 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	2d 04       	cpc	r2, r13
      8e:	34 04       	cpc	r3, r4
      90:	81 05       	cpc	r24, r1
      92:	a4 04       	cpc	r10, r4
      94:	81 05       	cpc	r24, r1
      96:	81 05       	cpc	r24, r1
      98:	81 05       	cpc	r24, r1
      9a:	79 05       	cpc	r23, r9
      9c:	81 05       	cpc	r24, r1
      9e:	81 05       	cpc	r24, r1
      a0:	81 05       	cpc	r24, r1
      a2:	81 05       	cpc	r24, r1
      a4:	81 05       	cpc	r24, r1
      a6:	81 05       	cpc	r24, r1
      a8:	81 05       	cpc	r24, r1
      aa:	81 05       	cpc	r24, r1
      ac:	81 05       	cpc	r24, r1
      ae:	81 05       	cpc	r24, r1
      b0:	81 05       	cpc	r24, r1
      b2:	81 05       	cpc	r24, r1
      b4:	81 05       	cpc	r24, r1
      b6:	81 05       	cpc	r24, r1
      b8:	81 05       	cpc	r24, r1
      ba:	81 05       	cpc	r24, r1
      bc:	81 05       	cpc	r24, r1
      be:	81 05       	cpc	r24, r1
      c0:	81 05       	cpc	r24, r1
      c2:	81 05       	cpc	r24, r1
      c4:	81 05       	cpc	r24, r1
      c6:	81 05       	cpc	r24, r1
      c8:	81 05       	cpc	r24, r1
      ca:	81 05       	cpc	r24, r1
      cc:	81 05       	cpc	r24, r1
      ce:	81 05       	cpc	r24, r1
      d0:	81 05       	cpc	r24, r1
      d2:	81 05       	cpc	r24, r1
      d4:	81 05       	cpc	r24, r1
      d6:	81 05       	cpc	r24, r1
      d8:	81 05       	cpc	r24, r1
      da:	81 05       	cpc	r24, r1
      dc:	81 05       	cpc	r24, r1
      de:	81 05       	cpc	r24, r1
      e0:	81 05       	cpc	r24, r1
      e2:	81 05       	cpc	r24, r1
      e4:	81 05       	cpc	r24, r1
      e6:	81 05       	cpc	r24, r1
      e8:	81 05       	cpc	r24, r1
      ea:	81 05       	cpc	r24, r1
      ec:	81 05       	cpc	r24, r1
      ee:	81 05       	cpc	r24, r1
      f0:	2a 05       	cpc	r18, r10
      f2:	30 05       	cpc	r19, r0
      f4:	41 05       	cpc	r20, r1
      f6:	52 05       	cpc	r21, r2
      f8:	67 05       	cpc	r22, r7

000000fa <__trampolines_end>:
      fa:	00 00       	nop
      fc:	5f 00       	.word	0x005f	; ????
      fe:	00 00       	nop
     100:	07 00       	.word	0x0007	; ????
     102:	07 00       	.word	0x0007	; ????
     104:	14 7f       	andi	r17, 0xF4	; 244
     106:	14 7f       	andi	r17, 0xF4	; 244
     108:	14 24       	eor	r1, r4
     10a:	2a 7f       	andi	r18, 0xFA	; 250
     10c:	2a 12       	cpse	r2, r26
     10e:	23 13       	cpse	r18, r19
     110:	08 64       	ori	r16, 0x48	; 72
     112:	62 36       	cpi	r22, 0x62	; 98
     114:	49 55       	subi	r20, 0x59	; 89
     116:	22 50       	subi	r18, 0x02	; 2
     118:	00 05       	cpc	r16, r0
     11a:	03 00       	.word	0x0003	; ????
     11c:	00 00       	nop
     11e:	1c 22       	and	r1, r28
     120:	41 00       	.word	0x0041	; ????
     122:	00 41       	sbci	r16, 0x10	; 16
     124:	22 1c       	adc	r2, r2
     126:	00 14       	cp	r0, r0
     128:	08 3e       	cpi	r16, 0xE8	; 232
     12a:	08 14       	cp	r0, r8
     12c:	08 08       	sbc	r0, r8
     12e:	3e 08       	sbc	r3, r14
     130:	08 00       	.word	0x0008	; ????
     132:	50 30       	cpi	r21, 0x00	; 0
     134:	00 00       	nop
     136:	08 08       	sbc	r0, r8
     138:	08 08       	sbc	r0, r8
     13a:	08 00       	.word	0x0008	; ????
     13c:	60 60       	ori	r22, 0x00	; 0
     13e:	00 00       	nop
     140:	20 10       	cpse	r2, r0
     142:	08 04       	cpc	r0, r8
     144:	02 3e       	cpi	r16, 0xE2	; 226
     146:	51 49       	sbci	r21, 0x91	; 145
     148:	45 3e       	cpi	r20, 0xE5	; 229
     14a:	00 42       	sbci	r16, 0x20	; 32
     14c:	7f 40       	sbci	r23, 0x0F	; 15
     14e:	00 42       	sbci	r16, 0x20	; 32
     150:	61 51       	subi	r22, 0x11	; 17
     152:	49 46       	sbci	r20, 0x69	; 105
     154:	21 41       	sbci	r18, 0x11	; 17
     156:	45 4b       	sbci	r20, 0xB5	; 181
     158:	31 18       	sub	r3, r1
     15a:	14 12       	cpse	r1, r20
     15c:	7f 10       	cpse	r7, r15
     15e:	27 45       	sbci	r18, 0x57	; 87
     160:	45 45       	sbci	r20, 0x55	; 85
     162:	39 3c       	cpi	r19, 0xC9	; 201
     164:	4a 49       	sbci	r20, 0x9A	; 154
     166:	49 30       	cpi	r20, 0x09	; 9
     168:	01 71       	andi	r16, 0x11	; 17
     16a:	09 05       	cpc	r16, r9
     16c:	03 36       	cpi	r16, 0x63	; 99
     16e:	49 49       	sbci	r20, 0x99	; 153
     170:	49 36       	cpi	r20, 0x69	; 105
     172:	06 49       	sbci	r16, 0x96	; 150
     174:	49 29       	or	r20, r9
     176:	1e 00       	.word	0x001e	; ????
     178:	36 36       	cpi	r19, 0x66	; 102
     17a:	00 00       	nop
     17c:	00 56       	subi	r16, 0x60	; 96
     17e:	36 00       	.word	0x0036	; ????
     180:	00 08       	sbc	r0, r0
     182:	14 22       	and	r1, r20
     184:	41 00       	.word	0x0041	; ????
     186:	14 14       	cp	r1, r4
     188:	14 14       	cp	r1, r4
     18a:	14 00       	.word	0x0014	; ????
     18c:	41 22       	and	r4, r17
     18e:	14 08       	sbc	r1, r4
     190:	02 01       	movw	r0, r4
     192:	51 09       	sbc	r21, r1
     194:	06 32       	cpi	r16, 0x26	; 38
     196:	49 79       	andi	r20, 0x99	; 153
     198:	41 3e       	cpi	r20, 0xE1	; 225
     19a:	7e 11       	cpse	r23, r14
     19c:	11 11       	cpse	r17, r1
     19e:	7e 7f       	andi	r23, 0xFE	; 254
     1a0:	49 49       	sbci	r20, 0x99	; 153
     1a2:	49 36       	cpi	r20, 0x69	; 105
     1a4:	3e 41       	sbci	r19, 0x1E	; 30
     1a6:	41 41       	sbci	r20, 0x11	; 17
     1a8:	22 7f       	andi	r18, 0xF2	; 242
     1aa:	41 41       	sbci	r20, 0x11	; 17
     1ac:	22 1c       	adc	r2, r2
     1ae:	7f 49       	sbci	r23, 0x9F	; 159
     1b0:	49 49       	sbci	r20, 0x99	; 153
     1b2:	41 7f       	andi	r20, 0xF1	; 241
     1b4:	09 09       	sbc	r16, r9
     1b6:	09 01       	movw	r0, r18
     1b8:	3e 41       	sbci	r19, 0x1E	; 30
     1ba:	49 49       	sbci	r20, 0x99	; 153
     1bc:	7a 7f       	andi	r23, 0xFA	; 250
     1be:	08 08       	sbc	r0, r8
     1c0:	08 7f       	andi	r16, 0xF8	; 248
     1c2:	00 41       	sbci	r16, 0x10	; 16
     1c4:	7f 41       	sbci	r23, 0x1F	; 31
     1c6:	00 20       	and	r0, r0
     1c8:	40 41       	sbci	r20, 0x10	; 16
     1ca:	3f 01       	movw	r6, r30
     1cc:	7f 08       	sbc	r7, r15
     1ce:	14 22       	and	r1, r20
     1d0:	41 7f       	andi	r20, 0xF1	; 241
     1d2:	40 40       	sbci	r20, 0x00	; 0
     1d4:	40 40       	sbci	r20, 0x00	; 0
     1d6:	7f 02       	muls	r23, r31
     1d8:	0c 02       	muls	r16, r28
     1da:	7f 7f       	andi	r23, 0xFF	; 255
     1dc:	04 08       	sbc	r0, r4
     1de:	10 7f       	andi	r17, 0xF0	; 240
     1e0:	3e 41       	sbci	r19, 0x1E	; 30
     1e2:	41 41       	sbci	r20, 0x11	; 17
     1e4:	3e 7f       	andi	r19, 0xFE	; 254
     1e6:	09 09       	sbc	r16, r9
     1e8:	09 06       	cpc	r0, r25
     1ea:	3e 41       	sbci	r19, 0x1E	; 30
     1ec:	51 21       	and	r21, r1
     1ee:	5e 7f       	andi	r21, 0xFE	; 254
     1f0:	09 19       	sub	r16, r9
     1f2:	29 46       	sbci	r18, 0x69	; 105
     1f4:	46 49       	sbci	r20, 0x96	; 150
     1f6:	49 49       	sbci	r20, 0x99	; 153
     1f8:	31 01       	movw	r6, r2
     1fa:	01 7f       	andi	r16, 0xF1	; 241
     1fc:	01 01       	movw	r0, r2
     1fe:	3f 40       	sbci	r19, 0x0F	; 15
     200:	40 40       	sbci	r20, 0x00	; 0
     202:	3f 1f       	adc	r19, r31
     204:	20 40       	sbci	r18, 0x00	; 0
     206:	20 1f       	adc	r18, r16
     208:	3f 40       	sbci	r19, 0x0F	; 15
     20a:	38 40       	sbci	r19, 0x08	; 8
     20c:	3f 63       	ori	r19, 0x3F	; 63
     20e:	14 08       	sbc	r1, r4
     210:	14 63       	ori	r17, 0x34	; 52
     212:	07 08       	sbc	r0, r7
     214:	70 08       	sbc	r7, r0
     216:	07 61       	ori	r16, 0x17	; 23
     218:	51 49       	sbci	r21, 0x91	; 145
     21a:	45 43       	sbci	r20, 0x35	; 53
     21c:	00 7f       	andi	r16, 0xF0	; 240
     21e:	41 41       	sbci	r20, 0x11	; 17
     220:	00 02       	muls	r16, r16
     222:	04 08       	sbc	r0, r4
     224:	10 20       	and	r1, r0
     226:	00 41       	sbci	r16, 0x10	; 16
     228:	41 7f       	andi	r20, 0xF1	; 241
     22a:	00 04       	cpc	r0, r0
     22c:	02 01       	movw	r0, r4
     22e:	02 04       	cpc	r0, r2
     230:	40 40       	sbci	r20, 0x00	; 0
     232:	40 40       	sbci	r20, 0x00	; 0
     234:	40 00       	.word	0x0040	; ????
     236:	01 02       	muls	r16, r17
     238:	04 00       	.word	0x0004	; ????
     23a:	20 54       	subi	r18, 0x40	; 64
     23c:	54 54       	subi	r21, 0x44	; 68
     23e:	78 7f       	andi	r23, 0xF8	; 248
     240:	48 44       	sbci	r20, 0x48	; 72
     242:	44 38       	cpi	r20, 0x84	; 132
     244:	38 44       	sbci	r19, 0x48	; 72
     246:	44 44       	sbci	r20, 0x44	; 68
     248:	20 38       	cpi	r18, 0x80	; 128
     24a:	44 44       	sbci	r20, 0x44	; 68
     24c:	48 7f       	andi	r20, 0xF8	; 248
     24e:	38 54       	subi	r19, 0x48	; 72
     250:	54 54       	subi	r21, 0x44	; 68
     252:	18 08       	sbc	r1, r8
     254:	7e 09       	sbc	r23, r14
     256:	01 02       	muls	r16, r17
     258:	0c 52       	subi	r16, 0x2C	; 44
     25a:	52 52       	subi	r21, 0x22	; 34
     25c:	3e 7f       	andi	r19, 0xFE	; 254
     25e:	08 04       	cpc	r0, r8
     260:	04 78       	andi	r16, 0x84	; 132
     262:	00 44       	sbci	r16, 0x40	; 64
     264:	7d 40       	sbci	r23, 0x0D	; 13
     266:	00 20       	and	r0, r0
     268:	40 44       	sbci	r20, 0x40	; 64
     26a:	3d 00       	.word	0x003d	; ????
     26c:	7f 10       	cpse	r7, r15
     26e:	28 44       	sbci	r18, 0x48	; 72
     270:	00 00       	nop
     272:	41 7f       	andi	r20, 0xF1	; 241
     274:	40 00       	.word	0x0040	; ????
     276:	7c 04       	cpc	r7, r12
     278:	18 04       	cpc	r1, r8
     27a:	78 7c       	andi	r23, 0xC8	; 200
     27c:	08 04       	cpc	r0, r8
     27e:	04 78       	andi	r16, 0x84	; 132
     280:	38 44       	sbci	r19, 0x48	; 72
     282:	44 44       	sbci	r20, 0x44	; 68
     284:	38 7c       	andi	r19, 0xC8	; 200
     286:	14 14       	cp	r1, r4
     288:	14 08       	sbc	r1, r4
     28a:	08 14       	cp	r0, r8
     28c:	14 18       	sub	r1, r4
     28e:	7c 7c       	andi	r23, 0xCC	; 204
     290:	08 04       	cpc	r0, r8
     292:	04 08       	sbc	r0, r4
     294:	48 54       	subi	r20, 0x48	; 72
     296:	54 54       	subi	r21, 0x44	; 68
     298:	20 04       	cpc	r2, r0
     29a:	3f 44       	sbci	r19, 0x4F	; 79
     29c:	40 20       	and	r4, r0
     29e:	3c 40       	sbci	r19, 0x0C	; 12
     2a0:	40 20       	and	r4, r0
     2a2:	7c 1c       	adc	r7, r12
     2a4:	20 40       	sbci	r18, 0x00	; 0
     2a6:	20 1c       	adc	r2, r0
     2a8:	3c 40       	sbci	r19, 0x0C	; 12
     2aa:	30 40       	sbci	r19, 0x00	; 0
     2ac:	3c 44       	sbci	r19, 0x4C	; 76
     2ae:	28 10       	cpse	r2, r8
     2b0:	28 44       	sbci	r18, 0x48	; 72
     2b2:	0c 50       	subi	r16, 0x0C	; 12
     2b4:	50 50       	subi	r21, 0x00	; 0
     2b6:	3c 44       	sbci	r19, 0x4C	; 76
     2b8:	64 54       	subi	r22, 0x44	; 68
     2ba:	4c 44       	sbci	r20, 0x4C	; 76
     2bc:	00 08       	sbc	r0, r0
     2be:	36 41       	sbci	r19, 0x16	; 22
     2c0:	00 00       	nop
     2c2:	00 7f       	andi	r16, 0xF0	; 240
     2c4:	00 00       	nop
     2c6:	00 41       	sbci	r16, 0x10	; 16
     2c8:	36 08       	sbc	r3, r6
     2ca:	00 10       	cpse	r0, r0
     2cc:	08 08       	sbc	r0, r8
     2ce:	10 08       	sbc	r1, r0

000002d0 <__ctors_start>:
     2d0:	d7 20       	and	r13, r7

000002d2 <__ctors_end>:
     2d2:	dc 20       	and	r13, r12

000002d4 <__dtors_end>:
     2d4:	11 24       	eor	r1, r1
     2d6:	1f be       	out	0x3f, r1	; 63
     2d8:	cf ef       	ldi	r28, 0xFF	; 255
     2da:	d0 e4       	ldi	r29, 0x40	; 64
     2dc:	de bf       	out	0x3e, r29	; 62
     2de:	cd bf       	out	0x3d, r28	; 61

000002e0 <__do_copy_data>:
     2e0:	11 e0       	ldi	r17, 0x01	; 1
     2e2:	a0 e0       	ldi	r26, 0x00	; 0
     2e4:	b1 e0       	ldi	r27, 0x01	; 1
     2e6:	e4 ef       	ldi	r30, 0xF4	; 244
     2e8:	f7 e4       	ldi	r31, 0x47	; 71
     2ea:	00 e0       	ldi	r16, 0x00	; 0
     2ec:	0b bf       	out	0x3b, r16	; 59
     2ee:	02 c0       	rjmp	.+4      	; 0x2f4 <__do_copy_data+0x14>
     2f0:	07 90       	elpm	r0, Z+
     2f2:	0d 92       	st	X+, r0
     2f4:	a8 39       	cpi	r26, 0x98	; 152
     2f6:	b1 07       	cpc	r27, r17
     2f8:	d9 f7       	brne	.-10     	; 0x2f0 <__do_copy_data+0x10>

000002fa <__do_clear_bss>:
     2fa:	25 e0       	ldi	r18, 0x05	; 5
     2fc:	a8 e9       	ldi	r26, 0x98	; 152
     2fe:	b1 e0       	ldi	r27, 0x01	; 1
     300:	01 c0       	rjmp	.+2      	; 0x304 <.do_clear_bss_start>

00000302 <.do_clear_bss_loop>:
     302:	1d 92       	st	X+, r1

00000304 <.do_clear_bss_start>:
     304:	a1 3a       	cpi	r26, 0xA1	; 161
     306:	b2 07       	cpc	r27, r18
     308:	e1 f7       	brne	.-8      	; 0x302 <.do_clear_bss_loop>

0000030a <__do_global_ctors>:
     30a:	11 e0       	ldi	r17, 0x01	; 1
     30c:	c9 e6       	ldi	r28, 0x69	; 105
     30e:	d1 e0       	ldi	r29, 0x01	; 1
     310:	04 c0       	rjmp	.+8      	; 0x31a <__do_global_ctors+0x10>
     312:	21 97       	sbiw	r28, 0x01	; 1
     314:	fe 01       	movw	r30, r28
     316:	0e 94 03 21 	call	0x4206	; 0x4206 <__tablejump2__>
     31a:	c8 36       	cpi	r28, 0x68	; 104
     31c:	d1 07       	cpc	r29, r17
     31e:	c9 f7       	brne	.-14     	; 0x312 <__do_global_ctors+0x8>
     320:	0e 94 85 1e 	call	0x3d0a	; 0x3d0a <main>
     324:	0c 94 ee 23 	jmp	0x47dc	; 0x47dc <__do_global_dtors>

00000328 <__bad_interrupt>:
     328:	6b ce       	rjmp	.-810    	; 0x0 <__vectors>

0000032a <power_off>:
}

static
void power_off (void)
{
	SPCR = 0;				/* Disable SPI function */
     32a:	1c bc       	out	0x2c, r1	; 44

	DDRB  &= ~((1<<PORTB7) | (1<<PORTB5) | (1<<PORTB4));	/* Set SCK/MOSI/CS as hi-z, INS#/WP as pull-up */
     32c:	84 b1       	in	r24, 0x04	; 4
     32e:	8f 74       	andi	r24, 0x4F	; 79
     330:	84 b9       	out	0x04, r24	; 4
     332:	08 95       	ret

00000334 <xchg_spi>:
static
BYTE xchg_spi (		/* Returns received data */
BYTE dat		/* Data to be sent */
)
{
	SPDR = dat;
     334:	8e bd       	out	0x2e, r24	; 46
	loop_until_bit_is_set(SPSR, SPIF);
     336:	0d b4       	in	r0, 0x2d	; 45
     338:	07 fe       	sbrs	r0, 7
     33a:	fd cf       	rjmp	.-6      	; 0x336 <xchg_spi+0x2>
	return SPDR;
     33c:	8e b5       	in	r24, 0x2e	; 46
}
     33e:	08 95       	ret

00000340 <deselect>:
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();		/* Set CS# high */
     340:	2c 9a       	sbi	0x05, 4	; 5
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
     342:	8f ef       	ldi	r24, 0xFF	; 255
     344:	f7 cf       	rjmp	.-18     	; 0x334 <xchg_spi>
     346:	08 95       	ret

00000348 <select>:
/*-----------------------------------------------------------------------*/

static
int select (void)	/* 1:Successful, 0:Timeout */
{
	CS_LOW();		/* Set CS# low */
     348:	2c 98       	cbi	0x05, 4	; 5
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
     34a:	8f ef       	ldi	r24, 0xFF	; 255
     34c:	f3 df       	rcall	.-26     	; 0x334 <xchg_spi>
)
{
	BYTE d;


	Timer2 = wt / 10;
     34e:	82 e3       	ldi	r24, 0x32	; 50
     350:	80 93 99 01 	sts	0x0199, r24
	do
	d = xchg_spi(0xFF);
     354:	8f ef       	ldi	r24, 0xFF	; 255
     356:	ee df       	rcall	.-36     	; 0x334 <xchg_spi>
	while (d != 0xFF && Timer2);
     358:	8f 3f       	cpi	r24, 0xFF	; 255
     35a:	41 f0       	breq	.+16     	; 0x36c <select+0x24>
     35c:	80 91 99 01 	lds	r24, 0x0199
     360:	81 11       	cpse	r24, r1
     362:	f8 cf       	rjmp	.-16     	; 0x354 <select+0xc>
{
	CS_LOW();		/* Set CS# low */
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
	if (wait_ready(500)) return 1;	/* Wait for card ready */

	deselect();
     364:	ed df       	rcall	.-38     	; 0x340 <deselect>
	return 0;	/* Timeout */
     366:	80 e0       	ldi	r24, 0x00	; 0
     368:	90 e0       	ldi	r25, 0x00	; 0
     36a:	08 95       	ret
static
int select (void)	/* 1:Successful, 0:Timeout */
{
	CS_LOW();		/* Set CS# low */
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
	if (wait_ready(500)) return 1;	/* Wait for card ready */
     36c:	81 e0       	ldi	r24, 0x01	; 1
     36e:	90 e0       	ldi	r25, 0x00	; 0

	deselect();
	return 0;	/* Timeout */
}
     370:	08 95       	ret

00000372 <rcvr_datablock>:
static
int rcvr_datablock (
BYTE *buff,			/* Data buffer to store received data */
UINT btr			/* Byte count (must be multiple of 4) */
)
{
     372:	0f 93       	push	r16
     374:	1f 93       	push	r17
     376:	cf 93       	push	r28
     378:	df 93       	push	r29
     37a:	ec 01       	movw	r28, r24
     37c:	8b 01       	movw	r16, r22
	BYTE token;


	Timer1 = 20;
     37e:	84 e1       	ldi	r24, 0x14	; 20
     380:	80 93 9a 01 	sts	0x019A, r24
	do {							/* Wait for data packet in timeout of 200ms */
		token = xchg_spi(0xFF);
     384:	8f ef       	ldi	r24, 0xFF	; 255
     386:	d6 df       	rcall	.-84     	; 0x334 <xchg_spi>
	} while ((token == 0xFF) && Timer1);
     388:	8f 3f       	cpi	r24, 0xFF	; 255
     38a:	39 f4       	brne	.+14     	; 0x39a <rcvr_datablock+0x28>
     38c:	90 91 9a 01 	lds	r25, 0x019A
     390:	91 11       	cpse	r25, r1
     392:	f8 cf       	rjmp	.-16     	; 0x384 <rcvr_datablock+0x12>
	if (token != 0xFE) return 0;	/* If not valid data token, retutn with error */
     394:	80 e0       	ldi	r24, 0x00	; 0
     396:	90 e0       	ldi	r25, 0x00	; 0
     398:	1e c0       	rjmp	.+60     	; 0x3d6 <rcvr_datablock+0x64>
     39a:	8e 3f       	cpi	r24, 0xFE	; 254
     39c:	d1 f4       	brne	.+52     	; 0x3d2 <rcvr_datablock+0x60>
BYTE *p,	/* Data buffer */
UINT cnt	/* Size of data block (must be multiple of 2) */
)
{
	do {
		SPDR = 0xFF; loop_until_bit_is_set(SPSR,SPIF); *p++ = SPDR;
     39e:	8f ef       	ldi	r24, 0xFF	; 255
     3a0:	8e bd       	out	0x2e, r24	; 46
     3a2:	0d b4       	in	r0, 0x2d	; 45
     3a4:	07 fe       	sbrs	r0, 7
     3a6:	fd cf       	rjmp	.-6      	; 0x3a2 <rcvr_datablock+0x30>
     3a8:	9e b5       	in	r25, 0x2e	; 46
     3aa:	98 83       	st	Y, r25
		SPDR = 0xFF; loop_until_bit_is_set(SPSR,SPIF); *p++ = SPDR;
     3ac:	8e bd       	out	0x2e, r24	; 46
     3ae:	0d b4       	in	r0, 0x2d	; 45
     3b0:	07 fe       	sbrs	r0, 7
     3b2:	fd cf       	rjmp	.-6      	; 0x3ae <rcvr_datablock+0x3c>
     3b4:	22 96       	adiw	r28, 0x02	; 2
     3b6:	9e b5       	in	r25, 0x2e	; 46
     3b8:	fe 01       	movw	r30, r28
     3ba:	31 97       	sbiw	r30, 0x01	; 1
     3bc:	90 83       	st	Z, r25
	} while (cnt -= 2);
     3be:	02 50       	subi	r16, 0x02	; 2
     3c0:	11 09       	sbc	r17, r1
     3c2:	71 f7       	brne	.-36     	; 0x3a0 <rcvr_datablock+0x2e>
		token = xchg_spi(0xFF);
	} while ((token == 0xFF) && Timer1);
	if (token != 0xFE) return 0;	/* If not valid data token, retutn with error */

	rcvr_spi_multi(buff, btr);		/* Receive the data block into buffer */
	xchg_spi(0xFF);					/* Discard CRC */
     3c4:	8f ef       	ldi	r24, 0xFF	; 255
     3c6:	b6 df       	rcall	.-148    	; 0x334 <xchg_spi>
	xchg_spi(0xFF);
     3c8:	8f ef       	ldi	r24, 0xFF	; 255
     3ca:	b4 df       	rcall	.-152    	; 0x334 <xchg_spi>

	return 1;						/* Return with success */
     3cc:	81 e0       	ldi	r24, 0x01	; 1
     3ce:	90 e0       	ldi	r25, 0x00	; 0
     3d0:	02 c0       	rjmp	.+4      	; 0x3d6 <rcvr_datablock+0x64>

	Timer1 = 20;
	do {							/* Wait for data packet in timeout of 200ms */
		token = xchg_spi(0xFF);
	} while ((token == 0xFF) && Timer1);
	if (token != 0xFE) return 0;	/* If not valid data token, retutn with error */
     3d2:	80 e0       	ldi	r24, 0x00	; 0
     3d4:	90 e0       	ldi	r25, 0x00	; 0
	rcvr_spi_multi(buff, btr);		/* Receive the data block into buffer */
	xchg_spi(0xFF);					/* Discard CRC */
	xchg_spi(0xFF);

	return 1;						/* Return with success */
}
     3d6:	df 91       	pop	r29
     3d8:	cf 91       	pop	r28
     3da:	1f 91       	pop	r17
     3dc:	0f 91       	pop	r16
     3de:	08 95       	ret

000003e0 <send_cmd>:
static
BYTE send_cmd (		/* Returns R1 resp (bit7==1:Send failed) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
     3e0:	ff 92       	push	r15
     3e2:	0f 93       	push	r16
     3e4:	1f 93       	push	r17
     3e6:	cf 93       	push	r28
     3e8:	df 93       	push	r29
     3ea:	c8 2f       	mov	r28, r24
     3ec:	d4 2f       	mov	r29, r20
     3ee:	15 2f       	mov	r17, r21
     3f0:	06 2f       	mov	r16, r22
     3f2:	f7 2e       	mov	r15, r23
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
     3f4:	88 23       	and	r24, r24
     3f6:	4c f4       	brge	.+18     	; 0x40a <send_cmd+0x2a>
		cmd &= 0x7F;
		res = send_cmd(CMD55, 0);
     3f8:	40 e0       	ldi	r20, 0x00	; 0
     3fa:	50 e0       	ldi	r21, 0x00	; 0
     3fc:	ba 01       	movw	r22, r20
     3fe:	87 e3       	ldi	r24, 0x37	; 55
     400:	ef df       	rcall	.-34     	; 0x3e0 <send_cmd>
		if (res > 1) return res;
     402:	82 30       	cpi	r24, 0x02	; 2
     404:	08 f0       	brcs	.+2      	; 0x408 <send_cmd+0x28>
     406:	3c c0       	rjmp	.+120    	; 0x480 <send_cmd+0xa0>
{
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
		cmd &= 0x7F;
     408:	cf 77       	andi	r28, 0x7F	; 127
		res = send_cmd(CMD55, 0);
		if (res > 1) return res;
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
     40a:	cc 30       	cpi	r28, 0x0C	; 12
     40c:	f1 f0       	breq	.+60     	; 0x44a <send_cmd+0x6a>
		deselect();
     40e:	98 df       	rcall	.-208    	; 0x340 <deselect>
		if (!select()) return 0xFF;
     410:	9b df       	rcall	.-202    	; 0x348 <select>
     412:	89 2b       	or	r24, r25
     414:	c1 f0       	breq	.+48     	; 0x446 <send_cmd+0x66>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + Command index */
     416:	8c 2f       	mov	r24, r28
     418:	80 64       	ori	r24, 0x40	; 64
     41a:	8c df       	rcall	.-232    	; 0x334 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
     41c:	8f 2d       	mov	r24, r15
     41e:	8a df       	rcall	.-236    	; 0x334 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
     420:	80 2f       	mov	r24, r16
     422:	88 df       	rcall	.-240    	; 0x334 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
     424:	81 2f       	mov	r24, r17
     426:	86 df       	rcall	.-244    	; 0x334 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
     428:	8d 2f       	mov	r24, r29
     42a:	84 df       	rcall	.-248    	; 0x334 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) + Stop */
     42c:	cc 23       	and	r28, r28
     42e:	29 f1       	breq	.+74     	; 0x47a <send_cmd+0x9a>
     430:	21 c0       	rjmp	.+66     	; 0x474 <send_cmd+0x94>
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) Stop */
	xchg_spi(n);

	/* Receive command response */
	if (cmd == CMD12) xchg_spi(0xFF);		/* Skip a stuff byte when stop reading */
     432:	8f ef       	ldi	r24, 0xFF	; 255
     434:	7f df       	rcall	.-258    	; 0x334 <xchg_spi>
static
BYTE send_cmd (		/* Returns R1 resp (bit7==1:Send failed) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
     436:	ca e0       	ldi	r28, 0x0A	; 10

	/* Receive command response */
	if (cmd == CMD12) xchg_spi(0xFF);		/* Skip a stuff byte when stop reading */
	n = 10;								/* Wait for a valid response in timeout of 10 attempts */
	do
		res = xchg_spi(0xFF);
     438:	8f ef       	ldi	r24, 0xFF	; 255
     43a:	7c df       	rcall	.-264    	; 0x334 <xchg_spi>
	while ((res & 0x80) && --n);
     43c:	88 23       	and	r24, r24
     43e:	04 f5       	brge	.+64     	; 0x480 <send_cmd+0xa0>
     440:	c1 50       	subi	r28, 0x01	; 1
     442:	d1 f7       	brne	.-12     	; 0x438 <send_cmd+0x58>
     444:	1d c0       	rjmp	.+58     	; 0x480 <send_cmd+0xa0>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
		deselect();
		if (!select()) return 0xFF;
     446:	8f ef       	ldi	r24, 0xFF	; 255
     448:	1b c0       	rjmp	.+54     	; 0x480 <send_cmd+0xa0>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + Command index */
     44a:	8c e4       	ldi	r24, 0x4C	; 76
     44c:	73 df       	rcall	.-282    	; 0x334 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
     44e:	8f 2d       	mov	r24, r15
     450:	71 df       	rcall	.-286    	; 0x334 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
     452:	80 2f       	mov	r24, r16
     454:	6f df       	rcall	.-290    	; 0x334 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
     456:	81 2f       	mov	r24, r17
     458:	6d df       	rcall	.-294    	; 0x334 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
     45a:	8d 2f       	mov	r24, r29
     45c:	6b df       	rcall	.-298    	; 0x334 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) + Stop */
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) Stop */
	xchg_spi(n);
     45e:	81 e0       	ldi	r24, 0x01	; 1
     460:	69 df       	rcall	.-302    	; 0x334 <xchg_spi>

	/* Receive command response */
	if (cmd == CMD12) xchg_spi(0xFF);		/* Skip a stuff byte when stop reading */
     462:	cc 30       	cpi	r28, 0x0C	; 12
     464:	31 f3       	breq	.-52     	; 0x432 <send_cmd+0x52>
     466:	e7 cf       	rjmp	.-50     	; 0x436 <send_cmd+0x56>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) + Stop */
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) Stop */
	xchg_spi(n);
     468:	87 e8       	ldi	r24, 0x87	; 135
     46a:	64 df       	rcall	.-312    	; 0x334 <xchg_spi>
     46c:	e4 cf       	rjmp	.-56     	; 0x436 <send_cmd+0x56>
     46e:	81 e0       	ldi	r24, 0x01	; 1
     470:	61 df       	rcall	.-318    	; 0x334 <xchg_spi>
     472:	e1 cf       	rjmp	.-62     	; 0x436 <send_cmd+0x56>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) + Stop */
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) Stop */
     474:	c8 30       	cpi	r28, 0x08	; 8
     476:	c1 f3       	breq	.-16     	; 0x468 <send_cmd+0x88>
     478:	fa cf       	rjmp	.-12     	; 0x46e <send_cmd+0x8e>
	xchg_spi(n);
     47a:	85 e9       	ldi	r24, 0x95	; 149
     47c:	5b df       	rcall	.-330    	; 0x334 <xchg_spi>
     47e:	db cf       	rjmp	.-74     	; 0x436 <send_cmd+0x56>
	do
		res = xchg_spi(0xFF);
	while ((res & 0x80) && --n);

	return res;			/* Return with the response value */
}
     480:	df 91       	pop	r29
     482:	cf 91       	pop	r28
     484:	1f 91       	pop	r17
     486:	0f 91       	pop	r16
     488:	ff 90       	pop	r15
     48a:	08 95       	ret

0000048c <xmit_datablock>:
static
int xmit_datablock (
const BYTE *buff,	/* 512 byte data block to be transmitted */
BYTE token			/* Data/Stop token */
)
{
     48c:	1f 93       	push	r17
     48e:	cf 93       	push	r28
     490:	df 93       	push	r29
     492:	ec 01       	movw	r28, r24
     494:	16 2f       	mov	r17, r22
)
{
	BYTE d;


	Timer2 = wt / 10;
     496:	92 e3       	ldi	r25, 0x32	; 50
     498:	90 93 99 01 	sts	0x0199, r25
	do
	d = xchg_spi(0xFF);
     49c:	8f ef       	ldi	r24, 0xFF	; 255
     49e:	4a df       	rcall	.-364    	; 0x334 <xchg_spi>
	while (d != 0xFF && Timer2);
     4a0:	8f 3f       	cpi	r24, 0xFF	; 255
     4a2:	31 f0       	breq	.+12     	; 0x4b0 <xmit_datablock+0x24>
     4a4:	90 91 99 01 	lds	r25, 0x0199
     4a8:	91 11       	cpse	r25, r1
     4aa:	f8 cf       	rjmp	.-16     	; 0x49c <xmit_datablock+0x10>
)
{
	BYTE resp;


	if (!wait_ready(500)) return 0;
     4ac:	80 e0       	ldi	r24, 0x00	; 0
     4ae:	26 c0       	rjmp	.+76     	; 0x4fc <xmit_datablock+0x70>

	xchg_spi(token);					/* Xmit data token */
     4b0:	81 2f       	mov	r24, r17
     4b2:	40 df       	rcall	.-384    	; 0x334 <xchg_spi>
	if (token != 0xFD) {	/* Is data token */
     4b4:	1d 3f       	cpi	r17, 0xFD	; 253
     4b6:	01 f1       	breq	.+64     	; 0x4f8 <xmit_datablock+0x6c>
     4b8:	9e 01       	movw	r18, r28
     4ba:	3e 5f       	subi	r19, 0xFE	; 254
const BYTE *p,	/* Data block to be sent */
UINT cnt		/* Size of data block (must be multiple of 2) */
)
{
	do {
		SPDR = *p++; loop_until_bit_is_set(SPSR,SPIF);
     4bc:	88 81       	ld	r24, Y
     4be:	8e bd       	out	0x2e, r24	; 46
     4c0:	0d b4       	in	r0, 0x2d	; 45
     4c2:	07 fe       	sbrs	r0, 7
     4c4:	fd cf       	rjmp	.-6      	; 0x4c0 <xmit_datablock+0x34>
     4c6:	22 96       	adiw	r28, 0x02	; 2
     4c8:	fe 01       	movw	r30, r28
     4ca:	31 97       	sbiw	r30, 0x01	; 1
		SPDR = *p++; loop_until_bit_is_set(SPSR,SPIF);
     4cc:	80 81       	ld	r24, Z
     4ce:	8e bd       	out	0x2e, r24	; 46
     4d0:	0d b4       	in	r0, 0x2d	; 45
     4d2:	07 fe       	sbrs	r0, 7
     4d4:	fd cf       	rjmp	.-6      	; 0x4d0 <xmit_datablock+0x44>
	} while (cnt -= 2);
     4d6:	c2 17       	cp	r28, r18
     4d8:	d3 07       	cpc	r29, r19
     4da:	81 f7       	brne	.-32     	; 0x4bc <xmit_datablock+0x30>
	if (!wait_ready(500)) return 0;

	xchg_spi(token);					/* Xmit data token */
	if (token != 0xFD) {	/* Is data token */
		xmit_spi_multi(buff, 512);		/* Xmit the data block to the MMC */
		xchg_spi(0xFF);					/* CRC (Dummy) */
     4dc:	8f ef       	ldi	r24, 0xFF	; 255
     4de:	2a df       	rcall	.-428    	; 0x334 <xchg_spi>
		xchg_spi(0xFF);
     4e0:	8f ef       	ldi	r24, 0xFF	; 255
     4e2:	28 df       	rcall	.-432    	; 0x334 <xchg_spi>
		resp = xchg_spi(0xFF);			/* Reveive data response */
     4e4:	8f ef       	ldi	r24, 0xFF	; 255
     4e6:	26 df       	rcall	.-436    	; 0x334 <xchg_spi>
		if ((resp & 0x1F) != 0x05)		/* If not accepted, return with error */
     4e8:	28 2f       	mov	r18, r24
     4ea:	2f 71       	andi	r18, 0x1F	; 31
     4ec:	81 e0       	ldi	r24, 0x01	; 1
     4ee:	90 e0       	ldi	r25, 0x00	; 0
     4f0:	25 30       	cpi	r18, 0x05	; 5
     4f2:	21 f0       	breq	.+8      	; 0x4fc <xmit_datablock+0x70>
     4f4:	80 e0       	ldi	r24, 0x00	; 0
     4f6:	02 c0       	rjmp	.+4      	; 0x4fc <xmit_datablock+0x70>
		return 0;
	}

	return 1;
     4f8:	81 e0       	ldi	r24, 0x01	; 1
     4fa:	90 e0       	ldi	r25, 0x00	; 0
}
     4fc:	df 91       	pop	r29
     4fe:	cf 91       	pop	r28
     500:	1f 91       	pop	r17
     502:	08 95       	ret

00000504 <disk_initialize>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
	BYTE pdrv		/* Physical drive nmuber (0) */
)
{
     504:	cf 92       	push	r12
     506:	df 92       	push	r13
     508:	ef 92       	push	r14
     50a:	ff 92       	push	r15
     50c:	0f 93       	push	r16
     50e:	1f 93       	push	r17
     510:	cf 93       	push	r28
     512:	df 93       	push	r29
     514:	00 d0       	rcall	.+0      	; 0x516 <disk_initialize+0x12>
     516:	00 d0       	rcall	.+0      	; 0x518 <disk_initialize+0x14>
     518:	cd b7       	in	r28, 0x3d	; 61
     51a:	de b7       	in	r29, 0x3e	; 62
	BYTE n, cmd, ty, ocr[4];


	if (pdrv) return STA_NOINIT;		/* Supports only single drive */
     51c:	81 11       	cpse	r24, r1
     51e:	9c c0       	rjmp	.+312    	; 0x658 <disk_initialize+0x154>
	power_off();						/* Turn off the socket power to reset the card */
     520:	04 df       	rcall	.-504    	; 0x32a <power_off>
	if (Stat & (1<<STA_NODISK)) return 5;// Stat;	/* No card in the socket */
     522:	80 91 00 01 	lds	r24, 0x0100
     526:	82 fd       	sbrc	r24, 2
     528:	99 c0       	rjmp	.+306    	; 0x65c <disk_initialize+0x158>
/* is nothing to do in these functions and chk_power always returns 1.   */

static
void power_on (void)
{
	PORTB |= (1<<PORTB7) | (1<<PORTB5) | (1<<PORTB4);	/* Configure SCK/MOSI/CS as output */
     52a:	85 b1       	in	r24, 0x05	; 5
     52c:	80 6b       	ori	r24, 0xB0	; 176
     52e:	85 b9       	out	0x05, r24	; 5
	DDRB  |= (1<<PORTB7) | (1<<PORTB5) | (1<<PORTB4);
     530:	84 b1       	in	r24, 0x04	; 4
     532:	80 6b       	ori	r24, 0xB0	; 176
     534:	84 b9       	out	0x04, r24	; 4

	SPCR = 0x52;			/* Enable SPI function in mode 0 */
     536:	82 e5       	ldi	r24, 0x52	; 82
     538:	8c bd       	out	0x2c, r24	; 44
	SPSR = 0x01;			/* SPI 2x mode */
     53a:	91 e0       	ldi	r25, 0x01	; 1
     53c:	9d bd       	out	0x2d, r25	; 45

	if (pdrv) return STA_NOINIT;		/* Supports only single drive */
	power_off();						/* Turn off the socket power to reset the card */
	if (Stat & (1<<STA_NODISK)) return 5;// Stat;	/* No card in the socket */
	power_on();							/* Turn on the socket power */
	FCLK_SLOW();
     53e:	8c bd       	out	0x2c, r24	; 44
     540:	1a e0       	ldi	r17, 0x0A	; 10
	for (n = 10; n; n--) xchg_spi(0xFF);	/* 80 dummy clocks */
     542:	8f ef       	ldi	r24, 0xFF	; 255
     544:	f7 de       	rcall	.-530    	; 0x334 <xchg_spi>
     546:	11 50       	subi	r17, 0x01	; 1
     548:	e1 f7       	brne	.-8      	; 0x542 <disk_initialize+0x3e>

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
     54a:	40 e0       	ldi	r20, 0x00	; 0
     54c:	50 e0       	ldi	r21, 0x00	; 0
     54e:	ba 01       	movw	r22, r20
     550:	80 e0       	ldi	r24, 0x00	; 0
     552:	46 df       	rcall	.-372    	; 0x3e0 <send_cmd>
     554:	81 30       	cpi	r24, 0x01	; 1
     556:	09 f0       	breq	.+2      	; 0x55a <disk_initialize+0x56>
     558:	88 c0       	rjmp	.+272    	; 0x66a <disk_initialize+0x166>
		Timer1 = 100;						/* Initialization timeout of 1000 msec */
     55a:	84 e6       	ldi	r24, 0x64	; 100
     55c:	80 93 9a 01 	sts	0x019A, r24
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
     560:	4a ea       	ldi	r20, 0xAA	; 170
     562:	51 e0       	ldi	r21, 0x01	; 1
     564:	60 e0       	ldi	r22, 0x00	; 0
     566:	70 e0       	ldi	r23, 0x00	; 0
     568:	88 e0       	ldi	r24, 0x08	; 8
     56a:	3a df       	rcall	.-396    	; 0x3e0 <send_cmd>
     56c:	81 30       	cpi	r24, 0x01	; 1
     56e:	09 f0       	breq	.+2      	; 0x572 <disk_initialize+0x6e>
     570:	3f c0       	rjmp	.+126    	; 0x5f0 <disk_initialize+0xec>
     572:	ce 01       	movw	r24, r28
     574:	01 96       	adiw	r24, 0x01	; 1
     576:	6c 01       	movw	r12, r24
     578:	7e 01       	movw	r14, r28
     57a:	95 e0       	ldi	r25, 0x05	; 5
     57c:	e9 0e       	add	r14, r25
     57e:	f1 1c       	adc	r15, r1
     580:	86 01       	movw	r16, r12
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);		/* Get trailing return value of R7 resp */
     582:	8f ef       	ldi	r24, 0xFF	; 255
     584:	d7 de       	rcall	.-594    	; 0x334 <xchg_spi>
     586:	f8 01       	movw	r30, r16
     588:	81 93       	st	Z+, r24
     58a:	8f 01       	movw	r16, r30
     58c:	ee 15       	cp	r30, r14
     58e:	ff 05       	cpc	r31, r15
     590:	c1 f7       	brne	.-16     	; 0x582 <disk_initialize+0x7e>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
     592:	8b 81       	ldd	r24, Y+3	; 0x03
     594:	81 30       	cpi	r24, 0x01	; 1
     596:	09 f0       	breq	.+2      	; 0x59a <disk_initialize+0x96>
     598:	68 c0       	rjmp	.+208    	; 0x66a <disk_initialize+0x166>
     59a:	8c 81       	ldd	r24, Y+4	; 0x04
     59c:	8a 3a       	cpi	r24, 0xAA	; 170
     59e:	09 f0       	breq	.+2      	; 0x5a2 <disk_initialize+0x9e>
     5a0:	64 c0       	rjmp	.+200    	; 0x66a <disk_initialize+0x166>
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
     5a2:	80 91 9a 01 	lds	r24, 0x019A
     5a6:	88 23       	and	r24, r24
     5a8:	41 f0       	breq	.+16     	; 0x5ba <disk_initialize+0xb6>
     5aa:	40 e0       	ldi	r20, 0x00	; 0
     5ac:	50 e0       	ldi	r21, 0x00	; 0
     5ae:	60 e0       	ldi	r22, 0x00	; 0
     5b0:	70 e4       	ldi	r23, 0x40	; 64
     5b2:	89 ea       	ldi	r24, 0xA9	; 169
     5b4:	15 df       	rcall	.-470    	; 0x3e0 <send_cmd>
     5b6:	81 11       	cpse	r24, r1
     5b8:	f4 cf       	rjmp	.-24     	; 0x5a2 <disk_initialize+0x9e>
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
     5ba:	80 91 9a 01 	lds	r24, 0x019A
     5be:	88 23       	and	r24, r24
     5c0:	09 f4       	brne	.+2      	; 0x5c4 <disk_initialize+0xc0>
     5c2:	53 c0       	rjmp	.+166    	; 0x66a <disk_initialize+0x166>
     5c4:	40 e0       	ldi	r20, 0x00	; 0
     5c6:	50 e0       	ldi	r21, 0x00	; 0
     5c8:	ba 01       	movw	r22, r20
     5ca:	8a e3       	ldi	r24, 0x3A	; 58
     5cc:	09 df       	rcall	.-494    	; 0x3e0 <send_cmd>
     5ce:	81 11       	cpse	r24, r1
     5d0:	4c c0       	rjmp	.+152    	; 0x66a <disk_initialize+0x166>
     5d2:	76 01       	movw	r14, r12
     5d4:	14 e0       	ldi	r17, 0x04	; 4
     5d6:	1c 0d       	add	r17, r12
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
     5d8:	8f ef       	ldi	r24, 0xFF	; 255
     5da:	ac de       	rcall	.-680    	; 0x334 <xchg_spi>
     5dc:	f7 01       	movw	r30, r14
     5de:	81 93       	st	Z+, r24
     5e0:	7f 01       	movw	r14, r30
     5e2:	1e 13       	cpse	r17, r30
     5e4:	f9 cf       	rjmp	.-14     	; 0x5d8 <disk_initialize+0xd4>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
     5e6:	89 81       	ldd	r24, Y+1	; 0x01
     5e8:	86 fd       	sbrc	r24, 6
     5ea:	3a c0       	rjmp	.+116    	; 0x660 <disk_initialize+0x15c>
     5ec:	84 e0       	ldi	r24, 0x04	; 4
     5ee:	39 c0       	rjmp	.+114    	; 0x662 <disk_initialize+0x15e>
				}
			}
		} else {							/* SDv1 or MMCv3 */
			if (send_cmd(ACMD41, 0) <= 1) 	{
     5f0:	40 e0       	ldi	r20, 0x00	; 0
     5f2:	50 e0       	ldi	r21, 0x00	; 0
     5f4:	ba 01       	movw	r22, r20
     5f6:	89 ea       	ldi	r24, 0xA9	; 169
     5f8:	f3 de       	rcall	.-538    	; 0x3e0 <send_cmd>
     5fa:	82 30       	cpi	r24, 0x02	; 2
     5fc:	18 f0       	brcs	.+6      	; 0x604 <disk_initialize+0x100>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
     5fe:	01 e0       	ldi	r16, 0x01	; 1
     600:	11 e0       	ldi	r17, 0x01	; 1
     602:	02 c0       	rjmp	.+4      	; 0x608 <disk_initialize+0x104>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
				}
			}
		} else {							/* SDv1 or MMCv3 */
			if (send_cmd(ACMD41, 0) <= 1) 	{
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
     604:	02 e0       	ldi	r16, 0x02	; 2
     606:	19 ea       	ldi	r17, 0xA9	; 169
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
			}
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
     608:	90 91 9a 01 	lds	r25, 0x019A
     60c:	99 23       	and	r25, r25
     60e:	39 f0       	breq	.+14     	; 0x61e <disk_initialize+0x11a>
     610:	40 e0       	ldi	r20, 0x00	; 0
     612:	50 e0       	ldi	r21, 0x00	; 0
     614:	ba 01       	movw	r22, r20
     616:	81 2f       	mov	r24, r17
     618:	e3 de       	rcall	.-570    	; 0x3e0 <send_cmd>
     61a:	81 11       	cpse	r24, r1
     61c:	f5 cf       	rjmp	.-22     	; 0x608 <disk_initialize+0x104>
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
     61e:	80 91 9a 01 	lds	r24, 0x019A
     622:	88 23       	and	r24, r24
     624:	11 f1       	breq	.+68     	; 0x66a <disk_initialize+0x166>
     626:	40 e0       	ldi	r20, 0x00	; 0
     628:	52 e0       	ldi	r21, 0x02	; 2
     62a:	60 e0       	ldi	r22, 0x00	; 0
     62c:	70 e0       	ldi	r23, 0x00	; 0
     62e:	80 e1       	ldi	r24, 0x10	; 16
     630:	d7 de       	rcall	.-594    	; 0x3e0 <send_cmd>
     632:	81 11       	cpse	r24, r1
     634:	1a c0       	rjmp	.+52     	; 0x66a <disk_initialize+0x166>
				ty = 0;
		}
	}
	CardType = ty;
     636:	00 93 98 01 	sts	0x0198, r16
	deselect();
     63a:	82 de       	rcall	.-764    	; 0x340 <deselect>

	if (ty) {			/* Initialization succeded */
     63c:	00 23       	and	r16, r16
     63e:	41 f0       	breq	.+16     	; 0x650 <disk_initialize+0x14c>
		Stat &= ~STA_NOINIT;		/* Clear STA_NOINIT */
     640:	80 91 00 01 	lds	r24, 0x0100
     644:	8e 7f       	andi	r24, 0xFE	; 254
     646:	80 93 00 01 	sts	0x0100, r24
		FCLK_FAST();
     64a:	80 e5       	ldi	r24, 0x50	; 80
     64c:	8c bd       	out	0x2c, r24	; 44
     64e:	01 c0       	rjmp	.+2      	; 0x652 <disk_initialize+0x14e>
	} else {			/* Initialization failed */
		power_off();
     650:	6c de       	rcall	.-808    	; 0x32a <power_off>
	}

	return Stat;
     652:	80 91 00 01 	lds	r24, 0x0100
     656:	0d c0       	rjmp	.+26     	; 0x672 <disk_initialize+0x16e>
)
{
	BYTE n, cmd, ty, ocr[4];


	if (pdrv) return STA_NOINIT;		/* Supports only single drive */
     658:	81 e0       	ldi	r24, 0x01	; 1
     65a:	0b c0       	rjmp	.+22     	; 0x672 <disk_initialize+0x16e>
	power_off();						/* Turn off the socket power to reset the card */
	if (Stat & (1<<STA_NODISK)) return 5;// Stat;	/* No card in the socket */
     65c:	85 e0       	ldi	r24, 0x05	; 5
     65e:	09 c0       	rjmp	.+18     	; 0x672 <disk_initialize+0x16e>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);		/* Get trailing return value of R7 resp */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
     660:	8c e0       	ldi	r24, 0x0C	; 12
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
				ty = 0;
		}
	}
	CardType = ty;
     662:	80 93 98 01 	sts	0x0198, r24
	deselect();
     666:	6c de       	rcall	.-808    	; 0x340 <deselect>
     668:	eb cf       	rjmp	.-42     	; 0x640 <disk_initialize+0x13c>
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
				ty = 0;
		}
	}
	CardType = ty;
     66a:	10 92 98 01 	sts	0x0198, r1
	deselect();
     66e:	68 de       	rcall	.-816    	; 0x340 <deselect>
     670:	ef cf       	rjmp	.-34     	; 0x650 <disk_initialize+0x14c>
	} else {			/* Initialization failed */
		power_off();
	}

	return Stat;
}
     672:	0f 90       	pop	r0
     674:	0f 90       	pop	r0
     676:	0f 90       	pop	r0
     678:	0f 90       	pop	r0
     67a:	df 91       	pop	r29
     67c:	cf 91       	pop	r28
     67e:	1f 91       	pop	r17
     680:	0f 91       	pop	r16
     682:	ff 90       	pop	r15
     684:	ef 90       	pop	r14
     686:	df 90       	pop	r13
     688:	cf 90       	pop	r12
     68a:	08 95       	ret

0000068c <disk_status>:

DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber (0) */
)
{
	if (pdrv) return STA_NOINIT;	/* Supports only single drive */
     68c:	81 11       	cpse	r24, r1
     68e:	03 c0       	rjmp	.+6      	; 0x696 <disk_status+0xa>
	return Stat;
     690:	80 91 00 01 	lds	r24, 0x0100
     694:	08 95       	ret

DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber (0) */
)
{
	if (pdrv) return STA_NOINIT;	/* Supports only single drive */
     696:	81 e0       	ldi	r24, 0x01	; 1
	return Stat;
}
     698:	08 95       	ret

0000069a <disk_read>:
	BYTE pdrv,			/* Physical drive nmuber (0) */
	BYTE *buff,			/* Pointer to the data buffer to store read data */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
     69a:	ff 92       	push	r15
     69c:	0f 93       	push	r16
     69e:	1f 93       	push	r17
     6a0:	cf 93       	push	r28
     6a2:	df 93       	push	r29
     6a4:	eb 01       	movw	r28, r22
	BYTE cmd;


	if (pdrv || !count) return RES_PARERR;
     6a6:	81 11       	cpse	r24, r1
     6a8:	3f c0       	rjmp	.+126    	; 0x728 <disk_read+0x8e>
     6aa:	01 15       	cp	r16, r1
     6ac:	11 05       	cpc	r17, r1
     6ae:	09 f4       	brne	.+2      	; 0x6b2 <disk_read+0x18>
     6b0:	3d c0       	rjmp	.+122    	; 0x72c <disk_read+0x92>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
     6b2:	80 91 00 01 	lds	r24, 0x0100
     6b6:	80 fd       	sbrc	r24, 0
     6b8:	3b c0       	rjmp	.+118    	; 0x730 <disk_read+0x96>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
     6ba:	80 91 98 01 	lds	r24, 0x0198
     6be:	83 fd       	sbrc	r24, 3
     6c0:	09 c0       	rjmp	.+18     	; 0x6d4 <disk_read+0x3a>
     6c2:	01 2e       	mov	r0, r17
     6c4:	19 e0       	ldi	r17, 0x09	; 9
     6c6:	22 0f       	add	r18, r18
     6c8:	33 1f       	adc	r19, r19
     6ca:	44 1f       	adc	r20, r20
     6cc:	55 1f       	adc	r21, r21
     6ce:	1a 95       	dec	r17
     6d0:	d1 f7       	brne	.-12     	; 0x6c6 <disk_read+0x2c>
     6d2:	10 2d       	mov	r17, r0

	cmd = count > 1 ? CMD18 : CMD17;			/*  READ_MULTIPLE_BLOCK : READ_SINGLE_BLOCK */
     6d4:	02 30       	cpi	r16, 0x02	; 2
     6d6:	11 05       	cpc	r17, r1
     6d8:	28 f4       	brcc	.+10     	; 0x6e4 <disk_read+0x4a>
     6da:	0f 2e       	mov	r0, r31
     6dc:	f1 e1       	ldi	r31, 0x11	; 17
     6de:	ff 2e       	mov	r15, r31
     6e0:	f0 2d       	mov	r31, r0
     6e2:	04 c0       	rjmp	.+8      	; 0x6ec <disk_read+0x52>
     6e4:	0f 2e       	mov	r0, r31
     6e6:	f2 e1       	ldi	r31, 0x12	; 18
     6e8:	ff 2e       	mov	r15, r31
     6ea:	f0 2d       	mov	r31, r0
	if (send_cmd(cmd, sector) == 0) {
     6ec:	ba 01       	movw	r22, r20
     6ee:	a9 01       	movw	r20, r18
     6f0:	8f 2d       	mov	r24, r15
     6f2:	76 de       	rcall	.-788    	; 0x3e0 <send_cmd>
     6f4:	81 11       	cpse	r24, r1
     6f6:	12 c0       	rjmp	.+36     	; 0x71c <disk_read+0x82>
		do {
			if (!rcvr_datablock(buff, 512)) break;
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	72 e0       	ldi	r23, 0x02	; 2
     6fc:	ce 01       	movw	r24, r28
     6fe:	39 de       	rcall	.-910    	; 0x372 <rcvr_datablock>
     700:	89 2b       	or	r24, r25
     702:	21 f0       	breq	.+8      	; 0x70c <disk_read+0x72>
			buff += 512;
     704:	de 5f       	subi	r29, 0xFE	; 254
		} while (--count);
     706:	01 50       	subi	r16, 0x01	; 1
     708:	11 09       	sbc	r17, r1
     70a:	b1 f7       	brne	.-20     	; 0x6f8 <disk_read+0x5e>
		if (cmd == CMD18) send_cmd(CMD12, 0);	/* STOP_TRANSMISSION */
     70c:	82 e1       	ldi	r24, 0x12	; 18
     70e:	f8 12       	cpse	r15, r24
     710:	05 c0       	rjmp	.+10     	; 0x71c <disk_read+0x82>
     712:	40 e0       	ldi	r20, 0x00	; 0
     714:	50 e0       	ldi	r21, 0x00	; 0
     716:	ba 01       	movw	r22, r20
     718:	8c e0       	ldi	r24, 0x0C	; 12
     71a:	62 de       	rcall	.-828    	; 0x3e0 <send_cmd>
	}
	deselect();
     71c:	11 de       	rcall	.-990    	; 0x340 <deselect>

	return count ? RES_ERROR : RES_OK;
     71e:	81 e0       	ldi	r24, 0x01	; 1
     720:	01 2b       	or	r16, r17
     722:	39 f4       	brne	.+14     	; 0x732 <disk_read+0x98>
     724:	80 e0       	ldi	r24, 0x00	; 0
     726:	05 c0       	rjmp	.+10     	; 0x732 <disk_read+0x98>
)
{
	BYTE cmd;


	if (pdrv || !count) return RES_PARERR;
     728:	84 e0       	ldi	r24, 0x04	; 4
     72a:	03 c0       	rjmp	.+6      	; 0x732 <disk_read+0x98>
     72c:	84 e0       	ldi	r24, 0x04	; 4
     72e:	01 c0       	rjmp	.+2      	; 0x732 <disk_read+0x98>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
     730:	83 e0       	ldi	r24, 0x03	; 3
		if (cmd == CMD18) send_cmd(CMD12, 0);	/* STOP_TRANSMISSION */
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
}
     732:	df 91       	pop	r29
     734:	cf 91       	pop	r28
     736:	1f 91       	pop	r17
     738:	0f 91       	pop	r16
     73a:	ff 90       	pop	r15
     73c:	08 95       	ret

0000073e <disk_write>:
	BYTE pdrv,			/* Physical drive nmuber (0) */
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
     73e:	cf 92       	push	r12
     740:	df 92       	push	r13
     742:	ef 92       	push	r14
     744:	ff 92       	push	r15
     746:	0f 93       	push	r16
     748:	1f 93       	push	r17
     74a:	cf 93       	push	r28
     74c:	df 93       	push	r29
     74e:	eb 01       	movw	r28, r22
     750:	69 01       	movw	r12, r18
     752:	7a 01       	movw	r14, r20
	if (pdrv || !count) return RES_PARERR;
     754:	81 11       	cpse	r24, r1
     756:	51 c0       	rjmp	.+162    	; 0x7fa <disk_write+0xbc>
     758:	01 15       	cp	r16, r1
     75a:	11 05       	cpc	r17, r1
     75c:	09 f4       	brne	.+2      	; 0x760 <disk_write+0x22>
     75e:	4f c0       	rjmp	.+158    	; 0x7fe <disk_write+0xc0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
     760:	80 91 00 01 	lds	r24, 0x0100
     764:	80 fd       	sbrc	r24, 0
     766:	4d c0       	rjmp	.+154    	; 0x802 <disk_write+0xc4>
	if (Stat & STA_PROTECT) return RES_WRPRT;
     768:	80 91 00 01 	lds	r24, 0x0100
     76c:	82 fd       	sbrc	r24, 2
     76e:	4b c0       	rjmp	.+150    	; 0x806 <disk_write+0xc8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
     770:	80 91 98 01 	lds	r24, 0x0198
     774:	83 fd       	sbrc	r24, 3
     776:	09 c0       	rjmp	.+18     	; 0x78a <disk_write+0x4c>
     778:	0b 2e       	mov	r0, r27
     77a:	b9 e0       	ldi	r27, 0x09	; 9
     77c:	cc 0c       	add	r12, r12
     77e:	dd 1c       	adc	r13, r13
     780:	ee 1c       	adc	r14, r14
     782:	ff 1c       	adc	r15, r15
     784:	ba 95       	dec	r27
     786:	d1 f7       	brne	.-12     	; 0x77c <disk_write+0x3e>
     788:	b0 2d       	mov	r27, r0

	if (count == 1) {	/* Single block write */
     78a:	01 30       	cpi	r16, 0x01	; 1
     78c:	11 05       	cpc	r17, r1
     78e:	89 f4       	brne	.+34     	; 0x7b2 <disk_write+0x74>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
     790:	b7 01       	movw	r22, r14
     792:	a6 01       	movw	r20, r12
     794:	88 e1       	ldi	r24, 0x18	; 24
     796:	24 de       	rcall	.-952    	; 0x3e0 <send_cmd>
     798:	81 11       	cpse	r24, r1
     79a:	29 c0       	rjmp	.+82     	; 0x7ee <disk_write+0xb0>
			&& xmit_datablock(buff, 0xFE))
     79c:	6e ef       	ldi	r22, 0xFE	; 254
     79e:	ce 01       	movw	r24, r28
     7a0:	75 de       	rcall	.-790    	; 0x48c <xmit_datablock>
     7a2:	31 e0       	ldi	r19, 0x01	; 1
     7a4:	20 e0       	ldi	r18, 0x00	; 0
     7a6:	89 2b       	or	r24, r25
     7a8:	09 f0       	breq	.+2      	; 0x7ac <disk_write+0x6e>
     7aa:	30 e0       	ldi	r19, 0x00	; 0
     7ac:	03 2f       	mov	r16, r19
     7ae:	12 2f       	mov	r17, r18
     7b0:	1e c0       	rjmp	.+60     	; 0x7ee <disk_write+0xb0>
			count = 0;
	}
	else {				/* Multiple block write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
     7b2:	86 70       	andi	r24, 0x06	; 6
     7b4:	29 f0       	breq	.+10     	; 0x7c0 <disk_write+0x82>
     7b6:	a8 01       	movw	r20, r16
     7b8:	60 e0       	ldi	r22, 0x00	; 0
     7ba:	70 e0       	ldi	r23, 0x00	; 0
     7bc:	87 e9       	ldi	r24, 0x97	; 151
     7be:	10 de       	rcall	.-992    	; 0x3e0 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
     7c0:	b7 01       	movw	r22, r14
     7c2:	a6 01       	movw	r20, r12
     7c4:	89 e1       	ldi	r24, 0x19	; 25
     7c6:	0c de       	rcall	.-1000   	; 0x3e0 <send_cmd>
     7c8:	81 11       	cpse	r24, r1
     7ca:	11 c0       	rjmp	.+34     	; 0x7ee <disk_write+0xb0>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
     7cc:	6c ef       	ldi	r22, 0xFC	; 252
     7ce:	ce 01       	movw	r24, r28
     7d0:	5d de       	rcall	.-838    	; 0x48c <xmit_datablock>
     7d2:	89 2b       	or	r24, r25
     7d4:	21 f0       	breq	.+8      	; 0x7de <disk_write+0xa0>
				buff += 512;
     7d6:	de 5f       	subi	r29, 0xFE	; 254
			} while (--count);
     7d8:	01 50       	subi	r16, 0x01	; 1
     7da:	11 09       	sbc	r17, r1
     7dc:	b9 f7       	brne	.-18     	; 0x7cc <disk_write+0x8e>
			if (!xmit_datablock(0, 0xFD))	/* STOP_TRAN token */
     7de:	6d ef       	ldi	r22, 0xFD	; 253
     7e0:	80 e0       	ldi	r24, 0x00	; 0
     7e2:	90 e0       	ldi	r25, 0x00	; 0
     7e4:	53 de       	rcall	.-858    	; 0x48c <xmit_datablock>
     7e6:	89 2b       	or	r24, r25
     7e8:	11 f4       	brne	.+4      	; 0x7ee <disk_write+0xb0>
				count = 1;
     7ea:	01 e0       	ldi	r16, 0x01	; 1
     7ec:	10 e0       	ldi	r17, 0x00	; 0
		}
	}
	deselect();
     7ee:	a8 dd       	rcall	.-1200   	; 0x340 <deselect>

	return count ? RES_ERROR : RES_OK;
     7f0:	81 e0       	ldi	r24, 0x01	; 1
     7f2:	01 2b       	or	r16, r17
     7f4:	49 f4       	brne	.+18     	; 0x808 <disk_write+0xca>
     7f6:	80 e0       	ldi	r24, 0x00	; 0
     7f8:	07 c0       	rjmp	.+14     	; 0x808 <disk_write+0xca>
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
	if (pdrv || !count) return RES_PARERR;
     7fa:	84 e0       	ldi	r24, 0x04	; 4
     7fc:	05 c0       	rjmp	.+10     	; 0x808 <disk_write+0xca>
     7fe:	84 e0       	ldi	r24, 0x04	; 4
     800:	03 c0       	rjmp	.+6      	; 0x808 <disk_write+0xca>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
     802:	83 e0       	ldi	r24, 0x03	; 3
     804:	01 c0       	rjmp	.+2      	; 0x808 <disk_write+0xca>
	if (Stat & STA_PROTECT) return RES_WRPRT;
     806:	82 e0       	ldi	r24, 0x02	; 2
		}
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
}
     808:	df 91       	pop	r29
     80a:	cf 91       	pop	r28
     80c:	1f 91       	pop	r17
     80e:	0f 91       	pop	r16
     810:	ff 90       	pop	r15
     812:	ef 90       	pop	r14
     814:	df 90       	pop	r13
     816:	cf 90       	pop	r12
     818:	08 95       	ret

0000081a <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
     81a:	ef 92       	push	r14
     81c:	ff 92       	push	r15
     81e:	0f 93       	push	r16
     820:	1f 93       	push	r17
     822:	cf 93       	push	r28
     824:	df 93       	push	r29
     826:	cd b7       	in	r28, 0x3d	; 61
     828:	de b7       	in	r29, 0x3e	; 62
     82a:	60 97       	sbiw	r28, 0x10	; 16
     82c:	0f b6       	in	r0, 0x3f	; 63
     82e:	f8 94       	cli
     830:	de bf       	out	0x3e, r29	; 62
     832:	0f be       	out	0x3f, r0	; 63
     834:	cd bf       	out	0x3d, r28	; 61
	DRESULT res;
	BYTE n, csd[16], *ptr = buff;
	DWORD csize;


	if (pdrv) return RES_PARERR;
     836:	81 11       	cpse	r24, r1
     838:	7c c1       	rjmp	.+760    	; 0xb32 <disk_ioctl+0x318>

	res = RES_ERROR;

	if (Stat & STA_NOINIT) return RES_NOTRDY;
     83a:	80 91 00 01 	lds	r24, 0x0100
     83e:	80 fd       	sbrc	r24, 0
     840:	7a c1       	rjmp	.+756    	; 0xb36 <disk_ioctl+0x31c>
     842:	7a 01       	movw	r14, r20

	switch (cmd) {
     844:	06 2f       	mov	r16, r22
     846:	10 e0       	ldi	r17, 0x00	; 0
     848:	07 33       	cpi	r16, 0x37	; 55
     84a:	11 05       	cpc	r17, r1
     84c:	08 f0       	brcs	.+2      	; 0x850 <disk_ioctl+0x36>
     84e:	59 c1       	rjmp	.+690    	; 0xb02 <disk_ioctl+0x2e8>
     850:	f8 01       	movw	r30, r16
     852:	ea 5b       	subi	r30, 0xBA	; 186
     854:	ff 4f       	sbci	r31, 0xFF	; 255
     856:	0c 94 03 21 	jmp	0x4206	; 0x4206 <__tablejump2__>
	case CTRL_SYNC :		/* Make sure that no pending write process. Do not remove this or written sector might not left updated. */
		if (select()) res = RES_OK;
     85a:	76 dd       	rcall	.-1300   	; 0x348 <select>
     85c:	11 e0       	ldi	r17, 0x01	; 1
     85e:	89 2b       	or	r24, r25
     860:	09 f4       	brne	.+2      	; 0x864 <disk_ioctl+0x4a>
     862:	64 c1       	rjmp	.+712    	; 0xb2c <disk_ioctl+0x312>
     864:	10 e0       	ldi	r17, 0x00	; 0
     866:	62 c1       	rjmp	.+708    	; 0xb2c <disk_ioctl+0x312>
		break;

	case GET_SECTOR_COUNT :	/* Get number of sectors on the disk (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
     868:	40 e0       	ldi	r20, 0x00	; 0
     86a:	50 e0       	ldi	r21, 0x00	; 0
     86c:	ba 01       	movw	r22, r20
     86e:	89 e0       	ldi	r24, 0x09	; 9
     870:	b7 dd       	rcall	.-1170   	; 0x3e0 <send_cmd>
     872:	81 11       	cpse	r24, r1
     874:	48 c1       	rjmp	.+656    	; 0xb06 <disk_ioctl+0x2ec>
     876:	60 e1       	ldi	r22, 0x10	; 16
     878:	70 e0       	ldi	r23, 0x00	; 0
     87a:	ce 01       	movw	r24, r28
     87c:	01 96       	adiw	r24, 0x01	; 1
     87e:	79 dd       	rcall	.-1294   	; 0x372 <rcvr_datablock>
     880:	89 2b       	or	r24, r25
     882:	09 f4       	brne	.+2      	; 0x886 <disk_ioctl+0x6c>
     884:	42 c1       	rjmp	.+644    	; 0xb0a <disk_ioctl+0x2f0>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
     886:	89 81       	ldd	r24, Y+1	; 0x01
     888:	82 95       	swap	r24
     88a:	86 95       	lsr	r24
     88c:	86 95       	lsr	r24
     88e:	83 70       	andi	r24, 0x03	; 3
     890:	81 30       	cpi	r24, 0x01	; 1
     892:	31 f5       	brne	.+76     	; 0x8e0 <disk_ioctl+0xc6>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
     894:	88 85       	ldd	r24, Y+8	; 0x08
     896:	8f 73       	andi	r24, 0x3F	; 63
     898:	90 e0       	ldi	r25, 0x00	; 0
     89a:	a0 e0       	ldi	r26, 0x00	; 0
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	dc 01       	movw	r26, r24
     8a0:	99 27       	eor	r25, r25
     8a2:	88 27       	eor	r24, r24
     8a4:	01 96       	adiw	r24, 0x01	; 1
     8a6:	a1 1d       	adc	r26, r1
     8a8:	b1 1d       	adc	r27, r1
     8aa:	29 85       	ldd	r18, Y+9	; 0x09
     8ac:	30 e0       	ldi	r19, 0x00	; 0
     8ae:	32 2f       	mov	r19, r18
     8b0:	22 27       	eor	r18, r18
     8b2:	4a 85       	ldd	r20, Y+10	; 0x0a
     8b4:	24 0f       	add	r18, r20
     8b6:	31 1d       	adc	r19, r1
     8b8:	82 0f       	add	r24, r18
     8ba:	93 1f       	adc	r25, r19
     8bc:	a1 1d       	adc	r26, r1
     8be:	b1 1d       	adc	r27, r1
				*(DWORD*)buff = csize << 10;
     8c0:	07 2e       	mov	r0, r23
     8c2:	7a e0       	ldi	r23, 0x0A	; 10
     8c4:	88 0f       	add	r24, r24
     8c6:	99 1f       	adc	r25, r25
     8c8:	aa 1f       	adc	r26, r26
     8ca:	bb 1f       	adc	r27, r27
     8cc:	7a 95       	dec	r23
     8ce:	d1 f7       	brne	.-12     	; 0x8c4 <disk_ioctl+0xaa>
     8d0:	70 2d       	mov	r23, r0
     8d2:	f7 01       	movw	r30, r14
     8d4:	80 83       	st	Z, r24
     8d6:	91 83       	std	Z+1, r25	; 0x01
     8d8:	a2 83       	std	Z+2, r26	; 0x02
     8da:	b3 83       	std	Z+3, r27	; 0x03
			} else {					/* SDC ver 1.XX or MMC*/
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
				*(DWORD*)buff = csize << (n - 9);
			}
			res = RES_OK;
     8dc:	10 e0       	ldi	r17, 0x00	; 0
     8de:	26 c1       	rjmp	.+588    	; 0xb2c <disk_ioctl+0x312>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
				*(DWORD*)buff = csize << 10;
			} else {					/* SDC ver 1.XX or MMC*/
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
     8e0:	89 85       	ldd	r24, Y+9	; 0x09
     8e2:	82 95       	swap	r24
     8e4:	86 95       	lsr	r24
     8e6:	86 95       	lsr	r24
     8e8:	83 70       	andi	r24, 0x03	; 3
     8ea:	28 85       	ldd	r18, Y+8	; 0x08
     8ec:	90 e0       	ldi	r25, 0x00	; 0
     8ee:	f4 e0       	ldi	r31, 0x04	; 4
     8f0:	2f 9f       	mul	r18, r31
     8f2:	80 0d       	add	r24, r0
     8f4:	91 1d       	adc	r25, r1
     8f6:	11 24       	eor	r1, r1
     8f8:	9c 01       	movw	r18, r24
     8fa:	2f 5f       	subi	r18, 0xFF	; 255
     8fc:	3f 4f       	sbci	r19, 0xFF	; 255
     8fe:	8f 81       	ldd	r24, Y+7	; 0x07
     900:	83 70       	andi	r24, 0x03	; 3
     902:	90 e0       	ldi	r25, 0x00	; 0
     904:	98 2f       	mov	r25, r24
     906:	88 27       	eor	r24, r24
     908:	99 0f       	add	r25, r25
     90a:	99 0f       	add	r25, r25
     90c:	82 0f       	add	r24, r18
     90e:	93 1f       	adc	r25, r19
     910:	a0 e0       	ldi	r26, 0x00	; 0
     912:	b0 e0       	ldi	r27, 0x00	; 0
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
				*(DWORD*)buff = csize << 10;
			} else {					/* SDC ver 1.XX or MMC*/
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
     914:	3e 81       	ldd	r19, Y+6	; 0x06
     916:	3f 70       	andi	r19, 0x0F	; 15
     918:	2b 85       	ldd	r18, Y+11	; 0x0b
     91a:	22 1f       	adc	r18, r18
     91c:	22 27       	eor	r18, r18
     91e:	22 1f       	adc	r18, r18
     920:	32 0f       	add	r19, r18
     922:	2a 85       	ldd	r18, Y+10	; 0x0a
     924:	23 70       	andi	r18, 0x03	; 3
     926:	22 0f       	add	r18, r18
     928:	23 0f       	add	r18, r19
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
				*(DWORD*)buff = csize << (n - 9);
     92a:	27 50       	subi	r18, 0x07	; 7
     92c:	04 c0       	rjmp	.+8      	; 0x936 <disk_ioctl+0x11c>
     92e:	88 0f       	add	r24, r24
     930:	99 1f       	adc	r25, r25
     932:	aa 1f       	adc	r26, r26
     934:	bb 1f       	adc	r27, r27
     936:	2a 95       	dec	r18
     938:	d2 f7       	brpl	.-12     	; 0x92e <disk_ioctl+0x114>
     93a:	f7 01       	movw	r30, r14
     93c:	80 83       	st	Z, r24
     93e:	91 83       	std	Z+1, r25	; 0x01
     940:	a2 83       	std	Z+2, r26	; 0x02
     942:	b3 83       	std	Z+3, r27	; 0x03
			}
			res = RES_OK;
     944:	10 e0       	ldi	r17, 0x00	; 0
     946:	f2 c0       	rjmp	.+484    	; 0xb2c <disk_ioctl+0x312>
		}
		break;

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDv2? */
     948:	10 91 98 01 	lds	r17, 0x0198
     94c:	12 ff       	sbrs	r17, 2
     94e:	2a c0       	rjmp	.+84     	; 0x9a4 <disk_ioctl+0x18a>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
     950:	40 e0       	ldi	r20, 0x00	; 0
     952:	50 e0       	ldi	r21, 0x00	; 0
     954:	ba 01       	movw	r22, r20
     956:	8d e8       	ldi	r24, 0x8D	; 141
     958:	43 dd       	rcall	.-1402   	; 0x3e0 <send_cmd>
     95a:	81 11       	cpse	r24, r1
     95c:	d8 c0       	rjmp	.+432    	; 0xb0e <disk_ioctl+0x2f4>
				xchg_spi(0xFF);
     95e:	8f ef       	ldi	r24, 0xFF	; 255
     960:	e9 dc       	rcall	.-1582   	; 0x334 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
     962:	60 e1       	ldi	r22, 0x10	; 16
     964:	70 e0       	ldi	r23, 0x00	; 0
     966:	ce 01       	movw	r24, r28
     968:	01 96       	adiw	r24, 0x01	; 1
     96a:	03 dd       	rcall	.-1530   	; 0x372 <rcvr_datablock>
     96c:	89 2b       	or	r24, r25
     96e:	09 f4       	brne	.+2      	; 0x972 <disk_ioctl+0x158>
     970:	d0 c0       	rjmp	.+416    	; 0xb12 <disk_ioctl+0x2f8>
     972:	10 e3       	ldi	r17, 0x30	; 48
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
     974:	8f ef       	ldi	r24, 0xFF	; 255
     976:	de dc       	rcall	.-1604   	; 0x334 <xchg_spi>
     978:	11 50       	subi	r17, 0x01	; 1
     97a:	e1 f7       	brne	.-8      	; 0x974 <disk_ioctl+0x15a>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
     97c:	2b 85       	ldd	r18, Y+11	; 0x0b
     97e:	22 95       	swap	r18
     980:	2f 70       	andi	r18, 0x0F	; 15
     982:	80 e1       	ldi	r24, 0x10	; 16
     984:	90 e0       	ldi	r25, 0x00	; 0
     986:	a0 e0       	ldi	r26, 0x00	; 0
     988:	b0 e0       	ldi	r27, 0x00	; 0
     98a:	04 c0       	rjmp	.+8      	; 0x994 <disk_ioctl+0x17a>
     98c:	88 0f       	add	r24, r24
     98e:	99 1f       	adc	r25, r25
     990:	aa 1f       	adc	r26, r26
     992:	bb 1f       	adc	r27, r27
     994:	2a 95       	dec	r18
     996:	d2 f7       	brpl	.-12     	; 0x98c <disk_ioctl+0x172>
     998:	f7 01       	movw	r30, r14
     99a:	80 83       	st	Z, r24
     99c:	91 83       	std	Z+1, r25	; 0x01
     99e:	a2 83       	std	Z+2, r26	; 0x02
     9a0:	b3 83       	std	Z+3, r27	; 0x03
     9a2:	c4 c0       	rjmp	.+392    	; 0xb2c <disk_ioctl+0x312>
					res = RES_OK;
				}
			}
		} else {					/* SDv1 or MMCv3 */
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
     9a4:	40 e0       	ldi	r20, 0x00	; 0
     9a6:	50 e0       	ldi	r21, 0x00	; 0
     9a8:	ba 01       	movw	r22, r20
     9aa:	89 e0       	ldi	r24, 0x09	; 9
     9ac:	19 dd       	rcall	.-1486   	; 0x3e0 <send_cmd>
     9ae:	81 11       	cpse	r24, r1
     9b0:	b2 c0       	rjmp	.+356    	; 0xb16 <disk_ioctl+0x2fc>
     9b2:	60 e1       	ldi	r22, 0x10	; 16
     9b4:	70 e0       	ldi	r23, 0x00	; 0
     9b6:	ce 01       	movw	r24, r28
     9b8:	01 96       	adiw	r24, 0x01	; 1
     9ba:	db dc       	rcall	.-1610   	; 0x372 <rcvr_datablock>
     9bc:	89 2b       	or	r24, r25
     9be:	09 f4       	brne	.+2      	; 0x9c2 <disk_ioctl+0x1a8>
     9c0:	ac c0       	rjmp	.+344    	; 0xb1a <disk_ioctl+0x300>
				if (CardType & CT_SD1) {	/* SDv1 */
     9c2:	11 ff       	sbrs	r17, 1
     9c4:	20 c0       	rjmp	.+64     	; 0xa06 <disk_ioctl+0x1ec>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
     9c6:	8c 85       	ldd	r24, Y+12	; 0x0c
     9c8:	88 1f       	adc	r24, r24
     9ca:	88 27       	eor	r24, r24
     9cc:	88 1f       	adc	r24, r24
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	01 96       	adiw	r24, 0x01	; 1
     9d2:	2b 85       	ldd	r18, Y+11	; 0x0b
     9d4:	2f 73       	andi	r18, 0x3F	; 63
     9d6:	82 0f       	add	r24, r18
     9d8:	91 1d       	adc	r25, r1
     9da:	82 0f       	add	r24, r18
     9dc:	91 1d       	adc	r25, r1
     9de:	2e 85       	ldd	r18, Y+14	; 0x0e
     9e0:	22 95       	swap	r18
     9e2:	26 95       	lsr	r18
     9e4:	26 95       	lsr	r18
     9e6:	23 70       	andi	r18, 0x03	; 3
     9e8:	21 50       	subi	r18, 0x01	; 1
     9ea:	02 c0       	rjmp	.+4      	; 0x9f0 <disk_ioctl+0x1d6>
     9ec:	88 0f       	add	r24, r24
     9ee:	99 1f       	adc	r25, r25
     9f0:	2a 95       	dec	r18
     9f2:	e2 f7       	brpl	.-8      	; 0x9ec <disk_ioctl+0x1d2>
     9f4:	a0 e0       	ldi	r26, 0x00	; 0
     9f6:	b0 e0       	ldi	r27, 0x00	; 0
     9f8:	f7 01       	movw	r30, r14
     9fa:	80 83       	st	Z, r24
     9fc:	91 83       	std	Z+1, r25	; 0x01
     9fe:	a2 83       	std	Z+2, r26	; 0x02
     a00:	b3 83       	std	Z+3, r27	; 0x03
				} else {					/* MMCv3 */
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
     a02:	10 e0       	ldi	r17, 0x00	; 0
     a04:	93 c0       	rjmp	.+294    	; 0xb2c <disk_ioctl+0x312>
		} else {					/* SDv1 or MMCv3 */
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
				if (CardType & CT_SD1) {	/* SDv1 */
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
				} else {					/* MMCv3 */
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
     a06:	8c 85       	ldd	r24, Y+12	; 0x0c
     a08:	28 2f       	mov	r18, r24
     a0a:	23 70       	andi	r18, 0x03	; 3
     a0c:	82 95       	swap	r24
     a0e:	86 95       	lsr	r24
     a10:	87 70       	andi	r24, 0x07	; 7
     a12:	90 e0       	ldi	r25, 0x00	; 0
     a14:	f8 e0       	ldi	r31, 0x08	; 8
     a16:	2f 9f       	mul	r18, r31
     a18:	80 0d       	add	r24, r0
     a1a:	91 1d       	adc	r25, r1
     a1c:	11 24       	eor	r1, r1
     a1e:	01 96       	adiw	r24, 0x01	; 1
     a20:	2b 85       	ldd	r18, Y+11	; 0x0b
     a22:	2c 77       	andi	r18, 0x7C	; 124
     a24:	30 e0       	ldi	r19, 0x00	; 0
     a26:	35 95       	asr	r19
     a28:	27 95       	ror	r18
     a2a:	35 95       	asr	r19
     a2c:	27 95       	ror	r18
     a2e:	2f 5f       	subi	r18, 0xFF	; 255
     a30:	3f 4f       	sbci	r19, 0xFF	; 255
     a32:	82 9f       	mul	r24, r18
     a34:	a0 01       	movw	r20, r0
     a36:	83 9f       	mul	r24, r19
     a38:	50 0d       	add	r21, r0
     a3a:	92 9f       	mul	r25, r18
     a3c:	50 0d       	add	r21, r0
     a3e:	11 24       	eor	r1, r1
     a40:	ca 01       	movw	r24, r20
     a42:	a0 e0       	ldi	r26, 0x00	; 0
     a44:	b0 e0       	ldi	r27, 0x00	; 0
     a46:	f7 01       	movw	r30, r14
     a48:	80 83       	st	Z, r24
     a4a:	91 83       	std	Z+1, r25	; 0x01
     a4c:	a2 83       	std	Z+2, r26	; 0x02
     a4e:	b3 83       	std	Z+3, r27	; 0x03
				}
				res = RES_OK;
     a50:	10 e0       	ldi	r17, 0x00	; 0
     a52:	6c c0       	rjmp	.+216    	; 0xb2c <disk_ioctl+0x312>
		break;

	/* Following commands are never used by FatFs module */

	case MMC_GET_TYPE :		/* Get card type flags (1 byte) */
		*ptr = CardType;
     a54:	80 91 98 01 	lds	r24, 0x0198
     a58:	fa 01       	movw	r30, r20
     a5a:	80 83       	st	Z, r24
		res = RES_OK;
     a5c:	10 e0       	ldi	r17, 0x00	; 0
		break;
     a5e:	66 c0       	rjmp	.+204    	; 0xb2c <disk_ioctl+0x312>

	case MMC_GET_CSD :		/* Receive CSD as a data block (16 bytes) */
		if (send_cmd(CMD9, 0) == 0		/* READ_CSD */
     a60:	40 e0       	ldi	r20, 0x00	; 0
     a62:	50 e0       	ldi	r21, 0x00	; 0
     a64:	ba 01       	movw	r22, r20
     a66:	89 e0       	ldi	r24, 0x09	; 9
     a68:	bb dc       	rcall	.-1674   	; 0x3e0 <send_cmd>
     a6a:	81 11       	cpse	r24, r1
     a6c:	58 c0       	rjmp	.+176    	; 0xb1e <disk_ioctl+0x304>
			&& rcvr_datablock(ptr, 16))
     a6e:	60 e1       	ldi	r22, 0x10	; 16
     a70:	70 e0       	ldi	r23, 0x00	; 0
     a72:	c7 01       	movw	r24, r14
     a74:	7e dc       	rcall	.-1796   	; 0x372 <rcvr_datablock>
     a76:	11 e0       	ldi	r17, 0x01	; 1
     a78:	89 2b       	or	r24, r25
     a7a:	09 f4       	brne	.+2      	; 0xa7e <disk_ioctl+0x264>
     a7c:	57 c0       	rjmp	.+174    	; 0xb2c <disk_ioctl+0x312>
     a7e:	10 e0       	ldi	r17, 0x00	; 0
     a80:	55 c0       	rjmp	.+170    	; 0xb2c <disk_ioctl+0x312>
			res = RES_OK;
		break;

	case MMC_GET_CID :		/* Receive CID as a data block (16 bytes) */
		if (send_cmd(CMD10, 0) == 0		/* READ_CID */
     a82:	40 e0       	ldi	r20, 0x00	; 0
     a84:	50 e0       	ldi	r21, 0x00	; 0
     a86:	ba 01       	movw	r22, r20
     a88:	8a e0       	ldi	r24, 0x0A	; 10
     a8a:	aa dc       	rcall	.-1708   	; 0x3e0 <send_cmd>
     a8c:	81 11       	cpse	r24, r1
     a8e:	49 c0       	rjmp	.+146    	; 0xb22 <disk_ioctl+0x308>
			&& rcvr_datablock(ptr, 16))
     a90:	60 e1       	ldi	r22, 0x10	; 16
     a92:	70 e0       	ldi	r23, 0x00	; 0
     a94:	c7 01       	movw	r24, r14
     a96:	6d dc       	rcall	.-1830   	; 0x372 <rcvr_datablock>
     a98:	11 e0       	ldi	r17, 0x01	; 1
     a9a:	89 2b       	or	r24, r25
     a9c:	09 f4       	brne	.+2      	; 0xaa0 <disk_ioctl+0x286>
     a9e:	46 c0       	rjmp	.+140    	; 0xb2c <disk_ioctl+0x312>
     aa0:	10 e0       	ldi	r17, 0x00	; 0
     aa2:	44 c0       	rjmp	.+136    	; 0xb2c <disk_ioctl+0x312>
			res = RES_OK;
		break;

	case MMC_GET_OCR :		/* Receive OCR as an R3 resp (4 bytes) */
		if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
     aa4:	40 e0       	ldi	r20, 0x00	; 0
     aa6:	50 e0       	ldi	r21, 0x00	; 0
     aa8:	ba 01       	movw	r22, r20
     aaa:	8a e3       	ldi	r24, 0x3A	; 58
     aac:	99 dc       	rcall	.-1742   	; 0x3e0 <send_cmd>
     aae:	81 11       	cpse	r24, r1
     ab0:	3a c0       	rjmp	.+116    	; 0xb26 <disk_ioctl+0x30c>
     ab2:	87 01       	movw	r16, r14
     ab4:	f4 e0       	ldi	r31, 0x04	; 4
     ab6:	ef 0e       	add	r14, r31
     ab8:	f1 1c       	adc	r15, r1
			for (n = 4; n; n--) *ptr++ = xchg_spi(0xFF);
     aba:	8f ef       	ldi	r24, 0xFF	; 255
     abc:	3b dc       	rcall	.-1930   	; 0x334 <xchg_spi>
     abe:	f8 01       	movw	r30, r16
     ac0:	81 93       	st	Z+, r24
     ac2:	8f 01       	movw	r16, r30
     ac4:	ee 15       	cp	r30, r14
     ac6:	ff 05       	cpc	r31, r15
     ac8:	c1 f7       	brne	.-16     	; 0xaba <disk_ioctl+0x2a0>
			res = RES_OK;
     aca:	10 e0       	ldi	r17, 0x00	; 0
     acc:	2f c0       	rjmp	.+94     	; 0xb2c <disk_ioctl+0x312>
		}
		break;

	case MMC_GET_SDSTAT :	/* Receive SD statsu as a data block (64 bytes) */
		if (send_cmd(ACMD13, 0) == 0) {	/* SD_STATUS */
     ace:	40 e0       	ldi	r20, 0x00	; 0
     ad0:	50 e0       	ldi	r21, 0x00	; 0
     ad2:	ba 01       	movw	r22, r20
     ad4:	8d e8       	ldi	r24, 0x8D	; 141
     ad6:	84 dc       	rcall	.-1784   	; 0x3e0 <send_cmd>
     ad8:	81 11       	cpse	r24, r1
     ada:	27 c0       	rjmp	.+78     	; 0xb2a <disk_ioctl+0x310>
			xchg_spi(0xFF);
     adc:	8f ef       	ldi	r24, 0xFF	; 255
     ade:	2a dc       	rcall	.-1964   	; 0x334 <xchg_spi>
			if (rcvr_datablock(ptr, 64))
     ae0:	60 e4       	ldi	r22, 0x40	; 64
     ae2:	70 e0       	ldi	r23, 0x00	; 0
     ae4:	c7 01       	movw	r24, r14
     ae6:	45 dc       	rcall	.-1910   	; 0x372 <rcvr_datablock>
     ae8:	11 e0       	ldi	r17, 0x01	; 1
     aea:	89 2b       	or	r24, r25
     aec:	f9 f0       	breq	.+62     	; 0xb2c <disk_ioctl+0x312>
     aee:	10 e0       	ldi	r17, 0x00	; 0
     af0:	1d c0       	rjmp	.+58     	; 0xb2c <disk_ioctl+0x312>
				res = RES_OK;
		}
		break;

	case CTRL_POWER_OFF :	/* Power off */
		power_off();
     af2:	1b dc       	rcall	.-1994   	; 0x32a <power_off>
		Stat |= STA_NOINIT;
     af4:	80 91 00 01 	lds	r24, 0x0100
     af8:	81 60       	ori	r24, 0x01	; 1
     afa:	80 93 00 01 	sts	0x0100, r24
		res = RES_OK;
     afe:	10 e0       	ldi	r17, 0x00	; 0
		break;
     b00:	15 c0       	rjmp	.+42     	; 0xb2c <disk_ioctl+0x312>

	default:
		res = RES_PARERR;
     b02:	14 e0       	ldi	r17, 0x04	; 4
     b04:	13 c0       	rjmp	.+38     	; 0xb2c <disk_ioctl+0x312>
	DWORD csize;


	if (pdrv) return RES_PARERR;

	res = RES_ERROR;
     b06:	11 e0       	ldi	r17, 0x01	; 1
     b08:	11 c0       	rjmp	.+34     	; 0xb2c <disk_ioctl+0x312>
     b0a:	11 e0       	ldi	r17, 0x01	; 1
     b0c:	0f c0       	rjmp	.+30     	; 0xb2c <disk_ioctl+0x312>
     b0e:	11 e0       	ldi	r17, 0x01	; 1
     b10:	0d c0       	rjmp	.+26     	; 0xb2c <disk_ioctl+0x312>
     b12:	11 e0       	ldi	r17, 0x01	; 1
     b14:	0b c0       	rjmp	.+22     	; 0xb2c <disk_ioctl+0x312>
     b16:	11 e0       	ldi	r17, 0x01	; 1
     b18:	09 c0       	rjmp	.+18     	; 0xb2c <disk_ioctl+0x312>
     b1a:	11 e0       	ldi	r17, 0x01	; 1
     b1c:	07 c0       	rjmp	.+14     	; 0xb2c <disk_ioctl+0x312>
     b1e:	11 e0       	ldi	r17, 0x01	; 1
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <disk_ioctl+0x312>
     b22:	11 e0       	ldi	r17, 0x01	; 1
     b24:	03 c0       	rjmp	.+6      	; 0xb2c <disk_ioctl+0x312>
     b26:	11 e0       	ldi	r17, 0x01	; 1
     b28:	01 c0       	rjmp	.+2      	; 0xb2c <disk_ioctl+0x312>
     b2a:	11 e0       	ldi	r17, 0x01	; 1

	default:
		res = RES_PARERR;
	}

	deselect();
     b2c:	09 dc       	rcall	.-2030   	; 0x340 <deselect>

	return res;
     b2e:	81 2f       	mov	r24, r17
     b30:	03 c0       	rjmp	.+6      	; 0xb38 <disk_ioctl+0x31e>
	DRESULT res;
	BYTE n, csd[16], *ptr = buff;
	DWORD csize;


	if (pdrv) return RES_PARERR;
     b32:	84 e0       	ldi	r24, 0x04	; 4
     b34:	01 c0       	rjmp	.+2      	; 0xb38 <disk_ioctl+0x31e>

	res = RES_ERROR;

	if (Stat & STA_NOINIT) return RES_NOTRDY;
     b36:	83 e0       	ldi	r24, 0x03	; 3
	}

	deselect();

	return res;
}
     b38:	60 96       	adiw	r28, 0x10	; 16
     b3a:	0f b6       	in	r0, 0x3f	; 63
     b3c:	f8 94       	cli
     b3e:	de bf       	out	0x3e, r29	; 62
     b40:	0f be       	out	0x3f, r0	; 63
     b42:	cd bf       	out	0x3d, r28	; 61
     b44:	df 91       	pop	r29
     b46:	cf 91       	pop	r28
     b48:	1f 91       	pop	r17
     b4a:	0f 91       	pop	r16
     b4c:	ff 90       	pop	r15
     b4e:	ef 90       	pop	r14
     b50:	08 95       	ret

00000b52 <disk_timerproc>:
void disk_timerproc (void)
{
	BYTE n, s;


	n = Timer1;				/* 100Hz decrement timer */
     b52:	80 91 9a 01 	lds	r24, 0x019A
	if (n) Timer1 = --n;
     b56:	88 23       	and	r24, r24
     b58:	19 f0       	breq	.+6      	; 0xb60 <disk_timerproc+0xe>
     b5a:	81 50       	subi	r24, 0x01	; 1
     b5c:	80 93 9a 01 	sts	0x019A, r24
	n = Timer2;
     b60:	80 91 99 01 	lds	r24, 0x0199
	if (n) Timer2 = --n;
     b64:	88 23       	and	r24, r24
     b66:	19 f0       	breq	.+6      	; 0xb6e <disk_timerproc+0x1c>
     b68:	81 50       	subi	r24, 0x01	; 1
     b6a:	80 93 99 01 	sts	0x0199, r24
	
	s = Stat;
     b6e:	80 91 00 01 	lds	r24, 0x0100
	
	if (MMC_CD)				/* Card inserted */
     b72:	1c 99       	sbic	0x03, 4	; 3
     b74:	02 c0       	rjmp	.+4      	; 0xb7a <disk_timerproc+0x28>
		s &= ~STA_NODISK;
     b76:	8d 7f       	andi	r24, 0xFD	; 253
     b78:	01 c0       	rjmp	.+2      	; 0xb7c <disk_timerproc+0x2a>
	else					/* Socket empty */
		s |= (STA_NODISK | STA_NOINIT);
     b7a:	83 60       	ori	r24, 0x03	; 3

	Stat = s;				/* Update MMC status */
     b7c:	80 93 00 01 	sts	0x0100, r24
     b80:	08 95       	ret

00000b82 <_ZN7DisplayD1Ev>:
	uint8_t sx = basecenter_x-middlelength*cos(rotationangle-M_PI_2);
	uint8_t sy = basecenter_y+middlelength*sin(rotationangle-M_PI_2);
	draw_line(sx,sy,lengtharm,baseangle+rotationangle);
	//draw right arm
	draw_line(sx,sy,lengtharm,-baseangle+rotationangle-M_PI);
}
     b82:	9c 5f       	subi	r25, 0xFC	; 252
     b84:	0c 94 3f 1e 	jmp	0x3c7e	; 0x3c7e <_ZN3I2CD1Ev>
     b88:	08 95       	ret

00000b8a <_ZN7Display10clearFrameEv>:
     b8a:	fc 01       	movw	r30, r24
     b8c:	9c 5f       	subi	r25, 0xFC	; 252
     b8e:	11 92       	st	Z+, r1
     b90:	e8 17       	cp	r30, r24
     b92:	f9 07       	cpc	r31, r25
     b94:	e1 f7       	brne	.-8      	; 0xb8e <_ZN7Display10clearFrameEv+0x4>
     b96:	08 95       	ret

00000b98 <_ZN7Display15ssd1306_commandEh>:
     b98:	1f 93       	push	r17
     b9a:	cf 93       	push	r28
     b9c:	df 93       	push	r29
     b9e:	16 2f       	mov	r17, r22
     ba0:	ec 01       	movw	r28, r24
     ba2:	dc 5f       	subi	r29, 0xFC	; 252
     ba4:	ce 01       	movw	r24, r28
     ba6:	0e 94 40 1e 	call	0x3c80	; 0x3c80 <_ZN3I2C9twi_startEv>
     baa:	68 e7       	ldi	r22, 0x78	; 120
     bac:	ce 01       	movw	r24, r28
     bae:	0e 94 48 1e 	call	0x3c90	; 0x3c90 <_ZN3I2C9twi_writeEh>
     bb2:	60 e0       	ldi	r22, 0x00	; 0
     bb4:	ce 01       	movw	r24, r28
     bb6:	0e 94 48 1e 	call	0x3c90	; 0x3c90 <_ZN3I2C9twi_writeEh>
     bba:	61 2f       	mov	r22, r17
     bbc:	ce 01       	movw	r24, r28
     bbe:	0e 94 48 1e 	call	0x3c90	; 0x3c90 <_ZN3I2C9twi_writeEh>
     bc2:	ce 01       	movw	r24, r28
     bc4:	0e 94 44 1e 	call	0x3c88	; 0x3c88 <_ZN3I2C8twi_stopEv>
     bc8:	df 91       	pop	r29
     bca:	cf 91       	pop	r28
     bcc:	1f 91       	pop	r17
     bce:	08 95       	ret

00000bd0 <_ZN7Display17InitializeDisplayEv>:
     bd0:	cf 93       	push	r28
     bd2:	df 93       	push	r29
     bd4:	ec 01       	movw	r28, r24
     bd6:	6e ea       	ldi	r22, 0xAE	; 174
     bd8:	df df       	rcall	.-66     	; 0xb98 <_ZN7Display15ssd1306_commandEh>
     bda:	65 ed       	ldi	r22, 0xD5	; 213
     bdc:	ce 01       	movw	r24, r28
     bde:	dc df       	rcall	.-72     	; 0xb98 <_ZN7Display15ssd1306_commandEh>
     be0:	60 e8       	ldi	r22, 0x80	; 128
     be2:	ce 01       	movw	r24, r28
     be4:	d9 df       	rcall	.-78     	; 0xb98 <_ZN7Display15ssd1306_commandEh>
     be6:	68 ea       	ldi	r22, 0xA8	; 168
     be8:	ce 01       	movw	r24, r28
     bea:	d6 df       	rcall	.-84     	; 0xb98 <_ZN7Display15ssd1306_commandEh>
     bec:	6f e3       	ldi	r22, 0x3F	; 63
     bee:	ce 01       	movw	r24, r28
     bf0:	d3 df       	rcall	.-90     	; 0xb98 <_ZN7Display15ssd1306_commandEh>
     bf2:	63 ed       	ldi	r22, 0xD3	; 211
     bf4:	ce 01       	movw	r24, r28
     bf6:	d0 df       	rcall	.-96     	; 0xb98 <_ZN7Display15ssd1306_commandEh>
     bf8:	60 e0       	ldi	r22, 0x00	; 0
     bfa:	ce 01       	movw	r24, r28
     bfc:	cd df       	rcall	.-102    	; 0xb98 <_ZN7Display15ssd1306_commandEh>
     bfe:	60 e4       	ldi	r22, 0x40	; 64
     c00:	ce 01       	movw	r24, r28
     c02:	ca df       	rcall	.-108    	; 0xb98 <_ZN7Display15ssd1306_commandEh>
     c04:	6d e8       	ldi	r22, 0x8D	; 141
     c06:	ce 01       	movw	r24, r28
     c08:	c7 df       	rcall	.-114    	; 0xb98 <_ZN7Display15ssd1306_commandEh>
     c0a:	64 e1       	ldi	r22, 0x14	; 20
     c0c:	ce 01       	movw	r24, r28
     c0e:	c4 df       	rcall	.-120    	; 0xb98 <_ZN7Display15ssd1306_commandEh>
     c10:	60 e2       	ldi	r22, 0x20	; 32
     c12:	ce 01       	movw	r24, r28
     c14:	c1 df       	rcall	.-126    	; 0xb98 <_ZN7Display15ssd1306_commandEh>
     c16:	60 e0       	ldi	r22, 0x00	; 0
     c18:	ce 01       	movw	r24, r28
     c1a:	be df       	rcall	.-132    	; 0xb98 <_ZN7Display15ssd1306_commandEh>
     c1c:	61 ea       	ldi	r22, 0xA1	; 161
     c1e:	ce 01       	movw	r24, r28
     c20:	bb df       	rcall	.-138    	; 0xb98 <_ZN7Display15ssd1306_commandEh>
     c22:	68 ec       	ldi	r22, 0xC8	; 200
     c24:	ce 01       	movw	r24, r28
     c26:	b8 df       	rcall	.-144    	; 0xb98 <_ZN7Display15ssd1306_commandEh>
     c28:	6a ed       	ldi	r22, 0xDA	; 218
     c2a:	ce 01       	movw	r24, r28
     c2c:	b5 df       	rcall	.-150    	; 0xb98 <_ZN7Display15ssd1306_commandEh>
     c2e:	62 e1       	ldi	r22, 0x12	; 18
     c30:	ce 01       	movw	r24, r28
     c32:	b2 df       	rcall	.-156    	; 0xb98 <_ZN7Display15ssd1306_commandEh>
     c34:	61 e8       	ldi	r22, 0x81	; 129
     c36:	ce 01       	movw	r24, r28
     c38:	af df       	rcall	.-162    	; 0xb98 <_ZN7Display15ssd1306_commandEh>
     c3a:	6f ec       	ldi	r22, 0xCF	; 207
     c3c:	ce 01       	movw	r24, r28
     c3e:	ac df       	rcall	.-168    	; 0xb98 <_ZN7Display15ssd1306_commandEh>
     c40:	69 ed       	ldi	r22, 0xD9	; 217
     c42:	ce 01       	movw	r24, r28
     c44:	a9 df       	rcall	.-174    	; 0xb98 <_ZN7Display15ssd1306_commandEh>
     c46:	61 ef       	ldi	r22, 0xF1	; 241
     c48:	ce 01       	movw	r24, r28
     c4a:	a6 df       	rcall	.-180    	; 0xb98 <_ZN7Display15ssd1306_commandEh>
     c4c:	6b ed       	ldi	r22, 0xDB	; 219
     c4e:	ce 01       	movw	r24, r28
     c50:	a3 df       	rcall	.-186    	; 0xb98 <_ZN7Display15ssd1306_commandEh>
     c52:	60 e4       	ldi	r22, 0x40	; 64
     c54:	ce 01       	movw	r24, r28
     c56:	a0 df       	rcall	.-192    	; 0xb98 <_ZN7Display15ssd1306_commandEh>
     c58:	64 ea       	ldi	r22, 0xA4	; 164
     c5a:	ce 01       	movw	r24, r28
     c5c:	9d df       	rcall	.-198    	; 0xb98 <_ZN7Display15ssd1306_commandEh>
     c5e:	66 ea       	ldi	r22, 0xA6	; 166
     c60:	ce 01       	movw	r24, r28
     c62:	9a df       	rcall	.-204    	; 0xb98 <_ZN7Display15ssd1306_commandEh>
     c64:	6f ea       	ldi	r22, 0xAF	; 175
     c66:	ce 01       	movw	r24, r28
     c68:	97 df       	rcall	.-210    	; 0xb98 <_ZN7Display15ssd1306_commandEh>
     c6a:	df 91       	pop	r29
     c6c:	cf 91       	pop	r28
     c6e:	08 95       	ret

00000c70 <_ZN7DisplayC1Ev>:
     c70:	cf 93       	push	r28
     c72:	df 93       	push	r29
     c74:	ec 01       	movw	r28, r24
     c76:	9c 5f       	subi	r25, 0xFC	; 252
     c78:	0e 94 3b 1e 	call	0x3c76	; 0x3c76 <_ZN3I2CC1Ev>
     c7c:	ce 01       	movw	r24, r28
     c7e:	a8 df       	rcall	.-176    	; 0xbd0 <_ZN7Display17InitializeDisplayEv>
     c80:	ce 01       	movw	r24, r28
     c82:	83 df       	rcall	.-250    	; 0xb8a <_ZN7Display10clearFrameEv>
     c84:	df 91       	pop	r29
     c86:	cf 91       	pop	r28
     c88:	08 95       	ret

00000c8a <_ZN7Display9sendFrameEv>:
     c8a:	ef 92       	push	r14
     c8c:	ff 92       	push	r15
     c8e:	0f 93       	push	r16
     c90:	1f 93       	push	r17
     c92:	cf 93       	push	r28
     c94:	df 93       	push	r29
     c96:	ec 01       	movw	r28, r24
     c98:	61 e2       	ldi	r22, 0x21	; 33
     c9a:	7e df       	rcall	.-260    	; 0xb98 <_ZN7Display15ssd1306_commandEh>
     c9c:	60 e0       	ldi	r22, 0x00	; 0
     c9e:	ce 01       	movw	r24, r28
     ca0:	7b df       	rcall	.-266    	; 0xb98 <_ZN7Display15ssd1306_commandEh>
     ca2:	6f e7       	ldi	r22, 0x7F	; 127
     ca4:	ce 01       	movw	r24, r28
     ca6:	78 df       	rcall	.-272    	; 0xb98 <_ZN7Display15ssd1306_commandEh>
     ca8:	62 e2       	ldi	r22, 0x22	; 34
     caa:	ce 01       	movw	r24, r28
     cac:	75 df       	rcall	.-278    	; 0xb98 <_ZN7Display15ssd1306_commandEh>
     cae:	60 e0       	ldi	r22, 0x00	; 0
     cb0:	ce 01       	movw	r24, r28
     cb2:	72 df       	rcall	.-284    	; 0xb98 <_ZN7Display15ssd1306_commandEh>
     cb4:	67 e0       	ldi	r22, 0x07	; 7
     cb6:	ce 01       	movw	r24, r28
     cb8:	6f df       	rcall	.-290    	; 0xb98 <_ZN7Display15ssd1306_commandEh>
     cba:	8e 01       	movw	r16, r28
     cbc:	1c 5f       	subi	r17, 0xFC	; 252
     cbe:	c8 01       	movw	r24, r16
     cc0:	0e 94 40 1e 	call	0x3c80	; 0x3c80 <_ZN3I2C9twi_startEv>
     cc4:	68 e7       	ldi	r22, 0x78	; 120
     cc6:	c8 01       	movw	r24, r16
     cc8:	0e 94 48 1e 	call	0x3c90	; 0x3c90 <_ZN3I2C9twi_writeEh>
     ccc:	60 e4       	ldi	r22, 0x40	; 64
     cce:	c8 01       	movw	r24, r16
     cd0:	0e 94 48 1e 	call	0x3c90	; 0x3c90 <_ZN3I2C9twi_writeEh>
     cd4:	78 01       	movw	r14, r16
     cd6:	69 91       	ld	r22, Y+
     cd8:	c8 01       	movw	r24, r16
     cda:	0e 94 48 1e 	call	0x3c90	; 0x3c90 <_ZN3I2C9twi_writeEh>
     cde:	ce 15       	cp	r28, r14
     ce0:	df 05       	cpc	r29, r15
     ce2:	c9 f7       	brne	.-14     	; 0xcd6 <_ZN7Display9sendFrameEv+0x4c>
     ce4:	c8 01       	movw	r24, r16
     ce6:	0e 94 44 1e 	call	0x3c88	; 0x3c88 <_ZN3I2C8twi_stopEv>
     cea:	df 91       	pop	r29
     cec:	cf 91       	pop	r28
     cee:	1f 91       	pop	r17
     cf0:	0f 91       	pop	r16
     cf2:	ff 90       	pop	r15
     cf4:	ef 90       	pop	r14
     cf6:	08 95       	ret

00000cf8 <_ZN7Display9draw_ASCIEhhh>:

void Display::draw_ASCI(uint8_t sym,uint8_t x, uint8_t y){
     cf8:	0f 93       	push	r16
     cfa:	1f 93       	push	r17
     cfc:	cf 93       	push	r28
     cfe:	df 93       	push	r29
	if(sym!=' ' && sym>=33){
     d00:	61 32       	cpi	r22, 0x21	; 33
     d02:	08 f4       	brcc	.+2      	; 0xd06 <_ZN7Display9draw_ASCIEhhh+0xe>
     d04:	3e c0       	rjmp	.+124    	; 0xd82 <_ZN7Display9draw_ASCIEhhh+0x8a>
		sym-=33;
		uint16_t symbol;
		for(uint8_t i = 0; i < 5; i++){
			symbol = pgm_read_byte(&font5x8[sym][i]);
			symbol = symbol << y%8;
			Displayframe[x+(y/8)*SSD1306_WIDTH+i] |=(uint8_t) (symbol & 0x00FF);
     d06:	a4 2f       	mov	r26, r20
     d08:	b0 e0       	ldi	r27, 0x00	; 0
     d0a:	02 2f       	mov	r16, r18
     d0c:	06 95       	lsr	r16
     d0e:	06 95       	lsr	r16
     d10:	06 95       	lsr	r16
     d12:	30 e8       	ldi	r19, 0x80	; 128
     d14:	03 9f       	mul	r16, r19
     d16:	80 01       	movw	r16, r0
     d18:	11 24       	eor	r1, r1
	draw_line(sx,sy,lengtharm,-baseangle+rotationangle-M_PI);
}

void Display::draw_ASCI(uint8_t sym,uint8_t x, uint8_t y){
	if(sym!=' ' && sym>=33){
		sym-=33;
     d1a:	61 52       	subi	r22, 0x21	; 33
     d1c:	70 e0       	ldi	r23, 0x00	; 0
     d1e:	fb 01       	movw	r30, r22
     d20:	ee 0f       	add	r30, r30
     d22:	ff 1f       	adc	r31, r31
     d24:	ee 0f       	add	r30, r30
     d26:	ff 1f       	adc	r31, r31
     d28:	e6 0f       	add	r30, r22
     d2a:	f7 1f       	adc	r31, r23
     d2c:	e6 50       	subi	r30, 0x06	; 6
     d2e:	ff 4f       	sbci	r31, 0xFF	; 255
		uint16_t symbol;
		for(uint8_t i = 0; i < 5; i++){
			symbol = pgm_read_byte(&font5x8[sym][i]);
			symbol = symbol << y%8;
			Displayframe[x+(y/8)*SSD1306_WIDTH+i] |=(uint8_t) (symbol & 0x00FF);
     d30:	ad 01       	movw	r20, r26
     d32:	40 0f       	add	r20, r16
     d34:	51 1f       	adc	r21, r17
     d36:	ec 01       	movw	r28, r24
     d38:	c4 0f       	add	r28, r20
     d3a:	d5 1f       	adc	r29, r21
			if(((symbol&0xFF00)>>8)==0){
				Displayframe[x+(y/8+1)*SSD1306_WIDTH+i] |= 0;
			}
			else {
				Displayframe[x+(y/8+1)*SSD1306_WIDTH+i] |= (uint8_t) ((symbol & 0xFF00)>>8);
     d3c:	00 58       	subi	r16, 0x80	; 128
     d3e:	1f 4f       	sbci	r17, 0xFF	; 255
     d40:	a0 0f       	add	r26, r16
     d42:	b1 1f       	adc	r27, r17
     d44:	a8 0f       	add	r26, r24
     d46:	b9 1f       	adc	r27, r25
     d48:	4b 5f       	subi	r20, 0xFB	; 251
     d4a:	5f 4f       	sbci	r21, 0xFF	; 255
     d4c:	48 0f       	add	r20, r24
     d4e:	59 1f       	adc	r21, r25
	if(sym!=' ' && sym>=33){
		sym-=33;
		uint16_t symbol;
		for(uint8_t i = 0; i < 5; i++){
			symbol = pgm_read_byte(&font5x8[sym][i]);
			symbol = symbol << y%8;
     d50:	27 70       	andi	r18, 0x07	; 7
void Display::draw_ASCI(uint8_t sym,uint8_t x, uint8_t y){
	if(sym!=' ' && sym>=33){
		sym-=33;
		uint16_t symbol;
		for(uint8_t i = 0; i < 5; i++){
			symbol = pgm_read_byte(&font5x8[sym][i]);
     d52:	64 91       	lpm	r22, Z
     d54:	70 e0       	ldi	r23, 0x00	; 0
			symbol = symbol << y%8;
     d56:	02 2e       	mov	r0, r18
     d58:	02 c0       	rjmp	.+4      	; 0xd5e <_ZN7Display9draw_ASCIEhhh+0x66>
     d5a:	66 0f       	add	r22, r22
     d5c:	77 1f       	adc	r23, r23
     d5e:	0a 94       	dec	r0
     d60:	e2 f7       	brpl	.-8      	; 0xd5a <_ZN7Display9draw_ASCIEhhh+0x62>
			Displayframe[x+(y/8)*SSD1306_WIDTH+i] |=(uint8_t) (symbol & 0x00FF);
     d62:	98 81       	ld	r25, Y
     d64:	96 2b       	or	r25, r22
     d66:	99 93       	st	Y+, r25
			if(((symbol&0xFF00)>>8)==0){
     d68:	67 2f       	mov	r22, r23
     d6a:	77 27       	eor	r23, r23
     d6c:	61 15       	cp	r22, r1
     d6e:	71 05       	cpc	r23, r1
     d70:	19 f0       	breq	.+6      	; 0xd78 <_ZN7Display9draw_ASCIEhhh+0x80>
				Displayframe[x+(y/8+1)*SSD1306_WIDTH+i] |= 0;
			}
			else {
				Displayframe[x+(y/8+1)*SSD1306_WIDTH+i] |= (uint8_t) ((symbol & 0xFF00)>>8);
     d72:	8c 91       	ld	r24, X
     d74:	68 2b       	or	r22, r24
     d76:	6c 93       	st	X, r22
     d78:	31 96       	adiw	r30, 0x01	; 1
     d7a:	11 96       	adiw	r26, 0x01	; 1

void Display::draw_ASCI(uint8_t sym,uint8_t x, uint8_t y){
	if(sym!=' ' && sym>=33){
		sym-=33;
		uint16_t symbol;
		for(uint8_t i = 0; i < 5; i++){
     d7c:	c4 17       	cp	r28, r20
     d7e:	d5 07       	cpc	r29, r21
     d80:	41 f7       	brne	.-48     	; 0xd52 <_ZN7Display9draw_ASCIEhhh+0x5a>
	else{
		for(uint8_t i = 0; i < 7; i++){
			Displayframe[x+(y/8)*SSD1306_WIDTH+i] |= 0;
		}
	}
}
     d82:	df 91       	pop	r29
     d84:	cf 91       	pop	r28
     d86:	1f 91       	pop	r17
     d88:	0f 91       	pop	r16
     d8a:	08 95       	ret

00000d8c <mem_cpy>:
			}
		}
	}

	LEAVE_FF(dj.fs, res);
}
     d8c:	41 15       	cp	r20, r1
     d8e:	51 05       	cpc	r21, r1
     d90:	51 f0       	breq	.+20     	; 0xda6 <mem_cpy+0x1a>
     d92:	a6 2f       	mov	r26, r22
     d94:	b7 2f       	mov	r27, r23
     d96:	fc 01       	movw	r30, r24
     d98:	48 0f       	add	r20, r24
     d9a:	59 1f       	adc	r21, r25
     d9c:	9d 91       	ld	r25, X+
     d9e:	91 93       	st	Z+, r25
     da0:	e4 17       	cp	r30, r20
     da2:	f5 07       	cpc	r31, r21
     da4:	d9 f7       	brne	.-10     	; 0xd9c <mem_cpy+0x10>
     da6:	08 95       	ret

00000da8 <mem_set>:
     da8:	41 15       	cp	r20, r1
     daa:	51 05       	cpc	r21, r1
     dac:	39 f0       	breq	.+14     	; 0xdbc <mem_set+0x14>
     dae:	fc 01       	movw	r30, r24
     db0:	84 0f       	add	r24, r20
     db2:	95 1f       	adc	r25, r21
     db4:	61 93       	st	Z+, r22
     db6:	e8 17       	cp	r30, r24
     db8:	f9 07       	cpc	r31, r25
     dba:	e1 f7       	brne	.-8      	; 0xdb4 <mem_set+0xc>
     dbc:	08 95       	ret

00000dbe <ld_clust>:
     dbe:	0f 93       	push	r16
     dc0:	1f 93       	push	r17
     dc2:	dc 01       	movw	r26, r24
     dc4:	fb 01       	movw	r30, r22
     dc6:	93 8d       	ldd	r25, Z+27	; 0x1b
     dc8:	69 2f       	mov	r22, r25
     dca:	70 e0       	ldi	r23, 0x00	; 0
     dcc:	76 2f       	mov	r23, r22
     dce:	66 27       	eor	r22, r22
     dd0:	82 8d       	ldd	r24, Z+26	; 0x1a
     dd2:	68 2b       	or	r22, r24
     dd4:	80 e0       	ldi	r24, 0x00	; 0
     dd6:	90 e0       	ldi	r25, 0x00	; 0
     dd8:	2c 91       	ld	r18, X
     dda:	23 30       	cpi	r18, 0x03	; 3
     ddc:	79 f4       	brne	.+30     	; 0xdfc <ld_clust+0x3e>
     dde:	05 89       	ldd	r16, Z+21	; 0x15
     de0:	10 e0       	ldi	r17, 0x00	; 0
     de2:	10 2f       	mov	r17, r16
     de4:	00 27       	eor	r16, r16
     de6:	24 89       	ldd	r18, Z+20	; 0x14
     de8:	02 2b       	or	r16, r18
     dea:	20 e0       	ldi	r18, 0x00	; 0
     dec:	30 e0       	ldi	r19, 0x00	; 0
     dee:	98 01       	movw	r18, r16
     df0:	11 27       	eor	r17, r17
     df2:	00 27       	eor	r16, r16
     df4:	60 2b       	or	r22, r16
     df6:	71 2b       	or	r23, r17
     df8:	82 2b       	or	r24, r18
     dfa:	93 2b       	or	r25, r19
     dfc:	1f 91       	pop	r17
     dfe:	0f 91       	pop	r16
     e00:	08 95       	ret

00000e02 <get_ldnumber>:
     e02:	cf 93       	push	r28
     e04:	df 93       	push	r29
     e06:	ec 01       	movw	r28, r24
     e08:	a8 81       	ld	r26, Y
     e0a:	b9 81       	ldd	r27, Y+1	; 0x01
     e0c:	10 97       	sbiw	r26, 0x00	; 0
     e0e:	f9 f0       	breq	.+62     	; 0xe4e <get_ldnumber+0x4c>
     e10:	4c 91       	ld	r20, X
     e12:	41 32       	cpi	r20, 0x21	; 33
     e14:	58 f0       	brcs	.+22     	; 0xe2c <get_ldnumber+0x2a>
     e16:	4a 33       	cpi	r20, 0x3A	; 58
     e18:	31 f1       	breq	.+76     	; 0xe66 <get_ldnumber+0x64>
     e1a:	fd 01       	movw	r30, r26
     e1c:	31 96       	adiw	r30, 0x01	; 1
     e1e:	9f 01       	movw	r18, r30
     e20:	91 91       	ld	r25, Z+
     e22:	91 32       	cpi	r25, 0x21	; 33
     e24:	28 f0       	brcs	.+10     	; 0xe30 <get_ldnumber+0x2e>
     e26:	9a 33       	cpi	r25, 0x3A	; 58
     e28:	d1 f7       	brne	.-12     	; 0xe1e <get_ldnumber+0x1c>
     e2a:	04 c0       	rjmp	.+8      	; 0xe34 <get_ldnumber+0x32>
     e2c:	94 2f       	mov	r25, r20
     e2e:	9d 01       	movw	r18, r26
     e30:	9a 33       	cpi	r25, 0x3A	; 58
     e32:	81 f4       	brne	.+32     	; 0xe54 <get_ldnumber+0x52>
     e34:	cd 01       	movw	r24, r26
     e36:	01 96       	adiw	r24, 0x01	; 1
     e38:	28 17       	cp	r18, r24
     e3a:	39 07       	cpc	r19, r25
     e3c:	71 f4       	brne	.+28     	; 0xe5a <get_ldnumber+0x58>
     e3e:	40 33       	cpi	r20, 0x30	; 48
     e40:	79 f4       	brne	.+30     	; 0xe60 <get_ldnumber+0x5e>
     e42:	12 96       	adiw	r26, 0x02	; 2
     e44:	b9 83       	std	Y+1, r27	; 0x01
     e46:	a8 83       	st	Y, r26
     e48:	80 e0       	ldi	r24, 0x00	; 0
     e4a:	90 e0       	ldi	r25, 0x00	; 0
     e4c:	0e c0       	rjmp	.+28     	; 0xe6a <get_ldnumber+0x68>
     e4e:	8f ef       	ldi	r24, 0xFF	; 255
     e50:	9f ef       	ldi	r25, 0xFF	; 255
     e52:	0b c0       	rjmp	.+22     	; 0xe6a <get_ldnumber+0x68>
     e54:	80 e0       	ldi	r24, 0x00	; 0
     e56:	90 e0       	ldi	r25, 0x00	; 0
     e58:	08 c0       	rjmp	.+16     	; 0xe6a <get_ldnumber+0x68>
     e5a:	8f ef       	ldi	r24, 0xFF	; 255
     e5c:	9f ef       	ldi	r25, 0xFF	; 255
     e5e:	05 c0       	rjmp	.+10     	; 0xe6a <get_ldnumber+0x68>
     e60:	8f ef       	ldi	r24, 0xFF	; 255
     e62:	9f ef       	ldi	r25, 0xFF	; 255
     e64:	02 c0       	rjmp	.+4      	; 0xe6a <get_ldnumber+0x68>
     e66:	9d 01       	movw	r18, r26
     e68:	e5 cf       	rjmp	.-54     	; 0xe34 <get_ldnumber+0x32>
     e6a:	df 91       	pop	r29
     e6c:	cf 91       	pop	r28
     e6e:	08 95       	ret

00000e70 <sync_window>:
     e70:	8f 92       	push	r8
     e72:	9f 92       	push	r9
     e74:	af 92       	push	r10
     e76:	bf 92       	push	r11
     e78:	cf 92       	push	r12
     e7a:	df 92       	push	r13
     e7c:	ef 92       	push	r14
     e7e:	ff 92       	push	r15
     e80:	0f 93       	push	r16
     e82:	1f 93       	push	r17
     e84:	cf 93       	push	r28
     e86:	df 93       	push	r29
     e88:	fc 01       	movw	r30, r24
     e8a:	24 81       	ldd	r18, Z+4	; 0x04
     e8c:	22 23       	and	r18, r18
     e8e:	09 f4       	brne	.+2      	; 0xe92 <sync_window+0x22>
     e90:	44 c0       	rjmp	.+136    	; 0xf1a <sync_window+0xaa>
     e92:	ec 01       	movw	r28, r24
     e94:	c2 a4       	ldd	r12, Z+42	; 0x2a
     e96:	d3 a4       	ldd	r13, Z+43	; 0x2b
     e98:	e4 a4       	ldd	r14, Z+44	; 0x2c
     e9a:	f5 a4       	ldd	r15, Z+45	; 0x2d
     e9c:	5c 01       	movw	r10, r24
     e9e:	fe e2       	ldi	r31, 0x2E	; 46
     ea0:	af 0e       	add	r10, r31
     ea2:	b1 1c       	adc	r11, r1
     ea4:	01 e0       	ldi	r16, 0x01	; 1
     ea6:	10 e0       	ldi	r17, 0x00	; 0
     ea8:	a7 01       	movw	r20, r14
     eaa:	96 01       	movw	r18, r12
     eac:	b5 01       	movw	r22, r10
     eae:	89 81       	ldd	r24, Y+1	; 0x01
     eb0:	46 dc       	rcall	.-1908   	; 0x73e <disk_write>
     eb2:	81 11       	cpse	r24, r1
     eb4:	34 c0       	rjmp	.+104    	; 0xf1e <sync_window+0xae>
     eb6:	1c 82       	std	Y+4, r1	; 0x04
     eb8:	8e 8d       	ldd	r24, Y+30	; 0x1e
     eba:	9f 8d       	ldd	r25, Y+31	; 0x1f
     ebc:	a8 a1       	ldd	r26, Y+32	; 0x20
     ebe:	b9 a1       	ldd	r27, Y+33	; 0x21
     ec0:	b7 01       	movw	r22, r14
     ec2:	a6 01       	movw	r20, r12
     ec4:	48 1b       	sub	r20, r24
     ec6:	59 0b       	sbc	r21, r25
     ec8:	6a 0b       	sbc	r22, r26
     eca:	7b 0b       	sbc	r23, r27
     ecc:	8e 89       	ldd	r24, Y+22	; 0x16
     ece:	9f 89       	ldd	r25, Y+23	; 0x17
     ed0:	a8 8d       	ldd	r26, Y+24	; 0x18
     ed2:	b9 8d       	ldd	r27, Y+25	; 0x19
     ed4:	48 17       	cp	r20, r24
     ed6:	59 07       	cpc	r21, r25
     ed8:	6a 07       	cpc	r22, r26
     eda:	7b 07       	cpc	r23, r27
     edc:	10 f5       	brcc	.+68     	; 0xf22 <sync_window+0xb2>
     ede:	8b 80       	ldd	r8, Y+3	; 0x03
     ee0:	91 2c       	mov	r9, r1
     ee2:	82 e0       	ldi	r24, 0x02	; 2
     ee4:	88 16       	cp	r8, r24
     ee6:	91 04       	cpc	r9, r1
     ee8:	f0 f0       	brcs	.+60     	; 0xf26 <sync_window+0xb6>
     eea:	8e 89       	ldd	r24, Y+22	; 0x16
     eec:	9f 89       	ldd	r25, Y+23	; 0x17
     eee:	a8 8d       	ldd	r26, Y+24	; 0x18
     ef0:	b9 8d       	ldd	r27, Y+25	; 0x19
     ef2:	c8 0e       	add	r12, r24
     ef4:	d9 1e       	adc	r13, r25
     ef6:	ea 1e       	adc	r14, r26
     ef8:	fb 1e       	adc	r15, r27
     efa:	01 e0       	ldi	r16, 0x01	; 1
     efc:	10 e0       	ldi	r17, 0x00	; 0
     efe:	a7 01       	movw	r20, r14
     f00:	96 01       	movw	r18, r12
     f02:	b5 01       	movw	r22, r10
     f04:	89 81       	ldd	r24, Y+1	; 0x01
     f06:	1b dc       	rcall	.-1994   	; 0x73e <disk_write>
     f08:	e1 e0       	ldi	r30, 0x01	; 1
     f0a:	8e 1a       	sub	r8, r30
     f0c:	91 08       	sbc	r9, r1
     f0e:	f1 e0       	ldi	r31, 0x01	; 1
     f10:	8f 16       	cp	r8, r31
     f12:	91 04       	cpc	r9, r1
     f14:	51 f7       	brne	.-44     	; 0xeea <sync_window+0x7a>
     f16:	80 e0       	ldi	r24, 0x00	; 0
     f18:	07 c0       	rjmp	.+14     	; 0xf28 <sync_window+0xb8>
     f1a:	80 e0       	ldi	r24, 0x00	; 0
     f1c:	05 c0       	rjmp	.+10     	; 0xf28 <sync_window+0xb8>
     f1e:	81 e0       	ldi	r24, 0x01	; 1
     f20:	03 c0       	rjmp	.+6      	; 0xf28 <sync_window+0xb8>
     f22:	80 e0       	ldi	r24, 0x00	; 0
     f24:	01 c0       	rjmp	.+2      	; 0xf28 <sync_window+0xb8>
     f26:	80 e0       	ldi	r24, 0x00	; 0
     f28:	df 91       	pop	r29
     f2a:	cf 91       	pop	r28
     f2c:	1f 91       	pop	r17
     f2e:	0f 91       	pop	r16
     f30:	ff 90       	pop	r15
     f32:	ef 90       	pop	r14
     f34:	df 90       	pop	r13
     f36:	cf 90       	pop	r12
     f38:	bf 90       	pop	r11
     f3a:	af 90       	pop	r10
     f3c:	9f 90       	pop	r9
     f3e:	8f 90       	pop	r8
     f40:	08 95       	ret

00000f42 <move_window>:
     f42:	8f 92       	push	r8
     f44:	9f 92       	push	r9
     f46:	af 92       	push	r10
     f48:	bf 92       	push	r11
     f4a:	ff 92       	push	r15
     f4c:	0f 93       	push	r16
     f4e:	1f 93       	push	r17
     f50:	cf 93       	push	r28
     f52:	df 93       	push	r29
     f54:	ec 01       	movw	r28, r24
     f56:	4a 01       	movw	r8, r20
     f58:	5b 01       	movw	r10, r22
     f5a:	8a a5       	ldd	r24, Y+42	; 0x2a
     f5c:	9b a5       	ldd	r25, Y+43	; 0x2b
     f5e:	ac a5       	ldd	r26, Y+44	; 0x2c
     f60:	bd a5       	ldd	r27, Y+45	; 0x2d
     f62:	84 17       	cp	r24, r20
     f64:	95 07       	cpc	r25, r21
     f66:	a6 07       	cpc	r26, r22
     f68:	b7 07       	cpc	r27, r23
     f6a:	d9 f0       	breq	.+54     	; 0xfa2 <move_window+0x60>
     f6c:	ce 01       	movw	r24, r28
     f6e:	80 df       	rcall	.-256    	; 0xe70 <sync_window>
     f70:	f8 2e       	mov	r15, r24
     f72:	81 11       	cpse	r24, r1
     f74:	17 c0       	rjmp	.+46     	; 0xfa4 <move_window+0x62>
     f76:	01 e0       	ldi	r16, 0x01	; 1
     f78:	10 e0       	ldi	r17, 0x00	; 0
     f7a:	a5 01       	movw	r20, r10
     f7c:	94 01       	movw	r18, r8
     f7e:	be 01       	movw	r22, r28
     f80:	62 5d       	subi	r22, 0xD2	; 210
     f82:	7f 4f       	sbci	r23, 0xFF	; 255
     f84:	89 81       	ldd	r24, Y+1	; 0x01
     f86:	89 db       	rcall	.-2286   	; 0x69a <disk_read>
     f88:	88 23       	and	r24, r24
     f8a:	31 f0       	breq	.+12     	; 0xf98 <move_window+0x56>
     f8c:	ff 24       	eor	r15, r15
     f8e:	f3 94       	inc	r15
     f90:	88 24       	eor	r8, r8
     f92:	8a 94       	dec	r8
     f94:	98 2c       	mov	r9, r8
     f96:	54 01       	movw	r10, r8
     f98:	8a a6       	std	Y+42, r8	; 0x2a
     f9a:	9b a6       	std	Y+43, r9	; 0x2b
     f9c:	ac a6       	std	Y+44, r10	; 0x2c
     f9e:	bd a6       	std	Y+45, r11	; 0x2d
     fa0:	01 c0       	rjmp	.+2      	; 0xfa4 <move_window+0x62>
     fa2:	f1 2c       	mov	r15, r1
     fa4:	8f 2d       	mov	r24, r15
     fa6:	df 91       	pop	r29
     fa8:	cf 91       	pop	r28
     faa:	1f 91       	pop	r17
     fac:	0f 91       	pop	r16
     fae:	ff 90       	pop	r15
     fb0:	bf 90       	pop	r11
     fb2:	af 90       	pop	r10
     fb4:	9f 90       	pop	r9
     fb6:	8f 90       	pop	r8
     fb8:	08 95       	ret

00000fba <check_fs>:
     fba:	cf 93       	push	r28
     fbc:	df 93       	push	r29
     fbe:	ec 01       	movw	r28, r24
     fc0:	1c 82       	std	Y+4, r1	; 0x04
     fc2:	8f ef       	ldi	r24, 0xFF	; 255
     fc4:	9f ef       	ldi	r25, 0xFF	; 255
     fc6:	dc 01       	movw	r26, r24
     fc8:	8a a7       	std	Y+42, r24	; 0x2a
     fca:	9b a7       	std	Y+43, r25	; 0x2b
     fcc:	ac a7       	std	Y+44, r26	; 0x2c
     fce:	bd a7       	std	Y+45, r27	; 0x2d
     fd0:	ce 01       	movw	r24, r28
     fd2:	b7 df       	rcall	.-146    	; 0xf42 <move_window>
     fd4:	81 11       	cpse	r24, r1
     fd6:	51 c0       	rjmp	.+162    	; 0x107a <check_fs+0xc0>
     fd8:	fe 01       	movw	r30, r28
     fda:	e3 5d       	subi	r30, 0xD3	; 211
     fdc:	fd 4f       	sbci	r31, 0xFD	; 253
     fde:	80 81       	ld	r24, Z
     fe0:	90 e0       	ldi	r25, 0x00	; 0
     fe2:	98 2f       	mov	r25, r24
     fe4:	88 27       	eor	r24, r24
     fe6:	31 97       	sbiw	r30, 0x01	; 1
     fe8:	20 81       	ld	r18, Z
     fea:	82 2b       	or	r24, r18
     fec:	85 35       	cpi	r24, 0x55	; 85
     fee:	9a 4a       	sbci	r25, 0xAA	; 170
     ff0:	09 f0       	breq	.+2      	; 0xff4 <check_fs+0x3a>
     ff2:	45 c0       	rjmp	.+138    	; 0x107e <check_fs+0xc4>
     ff4:	e5 5c       	subi	r30, 0xC5	; 197
     ff6:	f1 40       	sbci	r31, 0x01	; 1
     ff8:	20 81       	ld	r18, Z
     ffa:	31 97       	sbiw	r30, 0x01	; 1
     ffc:	80 81       	ld	r24, Z
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	a0 e0       	ldi	r26, 0x00	; 0
    1002:	b0 e0       	ldi	r27, 0x00	; 0
    1004:	dc 01       	movw	r26, r24
    1006:	99 27       	eor	r25, r25
    1008:	88 27       	eor	r24, r24
    100a:	b2 2b       	or	r27, r18
    100c:	32 97       	sbiw	r30, 0x02	; 2
    100e:	20 81       	ld	r18, Z
    1010:	82 2b       	or	r24, r18
    1012:	31 96       	adiw	r30, 0x01	; 1
    1014:	40 81       	ld	r20, Z
    1016:	50 e0       	ldi	r21, 0x00	; 0
    1018:	54 2f       	mov	r21, r20
    101a:	44 27       	eor	r20, r20
    101c:	60 e0       	ldi	r22, 0x00	; 0
    101e:	70 e0       	ldi	r23, 0x00	; 0
    1020:	84 2b       	or	r24, r20
    1022:	95 2b       	or	r25, r21
    1024:	a6 2b       	or	r26, r22
    1026:	b7 2b       	or	r27, r23
    1028:	bb 27       	eor	r27, r27
    102a:	86 34       	cpi	r24, 0x46	; 70
    102c:	91 44       	sbci	r25, 0x41	; 65
    102e:	a4 45       	sbci	r26, 0x54	; 84
    1030:	b1 05       	cpc	r27, r1
    1032:	39 f1       	breq	.+78     	; 0x1082 <check_fs+0xc8>
    1034:	7e 96       	adiw	r30, 0x1e	; 30
    1036:	80 81       	ld	r24, Z
    1038:	31 97       	sbiw	r30, 0x01	; 1
    103a:	40 81       	ld	r20, Z
    103c:	50 e0       	ldi	r21, 0x00	; 0
    103e:	60 e0       	ldi	r22, 0x00	; 0
    1040:	70 e0       	ldi	r23, 0x00	; 0
    1042:	ba 01       	movw	r22, r20
    1044:	55 27       	eor	r21, r21
    1046:	44 27       	eor	r20, r20
    1048:	78 2b       	or	r23, r24
    104a:	32 97       	sbiw	r30, 0x02	; 2
    104c:	80 81       	ld	r24, Z
    104e:	48 2b       	or	r20, r24
    1050:	cf 57       	subi	r28, 0x7F	; 127
    1052:	df 4f       	sbci	r29, 0xFF	; 255
    1054:	88 81       	ld	r24, Y
    1056:	90 e0       	ldi	r25, 0x00	; 0
    1058:	98 2f       	mov	r25, r24
    105a:	88 27       	eor	r24, r24
    105c:	a0 e0       	ldi	r26, 0x00	; 0
    105e:	b0 e0       	ldi	r27, 0x00	; 0
    1060:	48 2b       	or	r20, r24
    1062:	59 2b       	or	r21, r25
    1064:	6a 2b       	or	r22, r26
    1066:	7b 2b       	or	r23, r27
    1068:	77 27       	eor	r23, r23
    106a:	81 e0       	ldi	r24, 0x01	; 1
    106c:	46 34       	cpi	r20, 0x46	; 70
    106e:	51 44       	sbci	r21, 0x41	; 65
    1070:	64 45       	sbci	r22, 0x54	; 84
    1072:	71 05       	cpc	r23, r1
    1074:	39 f4       	brne	.+14     	; 0x1084 <check_fs+0xca>
    1076:	80 e0       	ldi	r24, 0x00	; 0
    1078:	05 c0       	rjmp	.+10     	; 0x1084 <check_fs+0xca>
    107a:	83 e0       	ldi	r24, 0x03	; 3
    107c:	03 c0       	rjmp	.+6      	; 0x1084 <check_fs+0xca>
    107e:	82 e0       	ldi	r24, 0x02	; 2
    1080:	01 c0       	rjmp	.+2      	; 0x1084 <check_fs+0xca>
    1082:	80 e0       	ldi	r24, 0x00	; 0
    1084:	df 91       	pop	r29
    1086:	cf 91       	pop	r28
    1088:	08 95       	ret

0000108a <validate>:
    108a:	00 97       	sbiw	r24, 0x00	; 0
    108c:	c1 f0       	breq	.+48     	; 0x10be <validate+0x34>
    108e:	dc 01       	movw	r26, r24
    1090:	ed 91       	ld	r30, X+
    1092:	fc 91       	ld	r31, X
    1094:	11 97       	sbiw	r26, 0x01	; 1
    1096:	30 97       	sbiw	r30, 0x00	; 0
    1098:	a1 f0       	breq	.+40     	; 0x10c2 <validate+0x38>
    109a:	20 81       	ld	r18, Z
    109c:	22 23       	and	r18, r18
    109e:	99 f0       	breq	.+38     	; 0x10c6 <validate+0x3c>
    10a0:	26 81       	ldd	r18, Z+6	; 0x06
    10a2:	37 81       	ldd	r19, Z+7	; 0x07
    10a4:	12 96       	adiw	r26, 0x02	; 2
    10a6:	8d 91       	ld	r24, X+
    10a8:	9c 91       	ld	r25, X
    10aa:	13 97       	sbiw	r26, 0x03	; 3
    10ac:	28 17       	cp	r18, r24
    10ae:	39 07       	cpc	r19, r25
    10b0:	61 f4       	brne	.+24     	; 0x10ca <validate+0x40>
    10b2:	81 81       	ldd	r24, Z+1	; 0x01
    10b4:	eb da       	rcall	.-2602   	; 0x68c <disk_status>
    10b6:	80 ff       	sbrs	r24, 0
    10b8:	0a c0       	rjmp	.+20     	; 0x10ce <validate+0x44>
    10ba:	89 e0       	ldi	r24, 0x09	; 9
    10bc:	08 95       	ret
    10be:	89 e0       	ldi	r24, 0x09	; 9
    10c0:	08 95       	ret
    10c2:	89 e0       	ldi	r24, 0x09	; 9
    10c4:	08 95       	ret
    10c6:	89 e0       	ldi	r24, 0x09	; 9
    10c8:	08 95       	ret
    10ca:	89 e0       	ldi	r24, 0x09	; 9
    10cc:	08 95       	ret
    10ce:	80 e0       	ldi	r24, 0x00	; 0
    10d0:	08 95       	ret

000010d2 <find_volume>:
    10d2:	2f 92       	push	r2
    10d4:	3f 92       	push	r3
    10d6:	4f 92       	push	r4
    10d8:	5f 92       	push	r5
    10da:	6f 92       	push	r6
    10dc:	7f 92       	push	r7
    10de:	8f 92       	push	r8
    10e0:	9f 92       	push	r9
    10e2:	af 92       	push	r10
    10e4:	bf 92       	push	r11
    10e6:	cf 92       	push	r12
    10e8:	df 92       	push	r13
    10ea:	ef 92       	push	r14
    10ec:	ff 92       	push	r15
    10ee:	0f 93       	push	r16
    10f0:	1f 93       	push	r17
    10f2:	cf 93       	push	r28
    10f4:	df 93       	push	r29
    10f6:	cd b7       	in	r28, 0x3d	; 61
    10f8:	de b7       	in	r29, 0x3e	; 62
    10fa:	6d 97       	sbiw	r28, 0x1d	; 29
    10fc:	0f b6       	in	r0, 0x3f	; 63
    10fe:	f8 94       	cli
    1100:	de bf       	out	0x3e, r29	; 62
    1102:	0f be       	out	0x3f, r0	; 63
    1104:	cd bf       	out	0x3d, r28	; 61
    1106:	6c 01       	movw	r12, r24
    1108:	cb 01       	movw	r24, r22
    110a:	b4 2e       	mov	r11, r20
    110c:	d6 01       	movw	r26, r12
    110e:	1d 92       	st	X+, r1
    1110:	1c 92       	st	X, r1
    1112:	77 de       	rcall	.-786    	; 0xe02 <get_ldnumber>
    1114:	7c 01       	movw	r14, r24
    1116:	99 23       	and	r25, r25
    1118:	0c f4       	brge	.+2      	; 0x111c <find_volume+0x4a>
    111a:	d7 c2       	rjmp	.+1454   	; 0x16ca <find_volume+0x5f8>
    111c:	fc 01       	movw	r30, r24
    111e:	ee 0f       	add	r30, r30
    1120:	ff 1f       	adc	r31, r31
    1122:	e3 56       	subi	r30, 0x63	; 99
    1124:	fe 4f       	sbci	r31, 0xFE	; 254
    1126:	00 81       	ld	r16, Z
    1128:	11 81       	ldd	r17, Z+1	; 0x01
    112a:	01 15       	cp	r16, r1
    112c:	11 05       	cpc	r17, r1
    112e:	09 f4       	brne	.+2      	; 0x1132 <find_volume+0x60>
    1130:	ce c2       	rjmp	.+1436   	; 0x16ce <find_volume+0x5fc>
    1132:	f6 01       	movw	r30, r12
    1134:	11 83       	std	Z+1, r17	; 0x01
    1136:	00 83       	st	Z, r16
    1138:	d8 01       	movw	r26, r16
    113a:	8c 91       	ld	r24, X
    113c:	88 23       	and	r24, r24
    113e:	61 f0       	breq	.+24     	; 0x1158 <find_volume+0x86>
    1140:	11 96       	adiw	r26, 0x01	; 1
    1142:	8c 91       	ld	r24, X
    1144:	a3 da       	rcall	.-2746   	; 0x68c <disk_status>
    1146:	80 fd       	sbrc	r24, 0
    1148:	07 c0       	rjmp	.+14     	; 0x1158 <find_volume+0x86>
    114a:	bb 20       	and	r11, r11
    114c:	09 f4       	brne	.+2      	; 0x1150 <find_volume+0x7e>
    114e:	c1 c2       	rjmp	.+1410   	; 0x16d2 <find_volume+0x600>
    1150:	82 ff       	sbrs	r24, 2
    1152:	c1 c2       	rjmp	.+1410   	; 0x16d6 <find_volume+0x604>
    1154:	8a e0       	ldi	r24, 0x0A	; 10
    1156:	66 c3       	rjmp	.+1740   	; 0x1824 <find_volume+0x752>
    1158:	f8 01       	movw	r30, r16
    115a:	10 82       	st	Z, r1
    115c:	e1 82       	std	Z+1, r14	; 0x01
    115e:	8e 2d       	mov	r24, r14
    1160:	d1 d9       	rcall	.-3166   	; 0x504 <disk_initialize>
    1162:	80 fd       	sbrc	r24, 0
    1164:	ba c2       	rjmp	.+1396   	; 0x16da <find_volume+0x608>
    1166:	bb 20       	and	r11, r11
    1168:	09 f4       	brne	.+2      	; 0x116c <find_volume+0x9a>
    116a:	d7 c2       	rjmp	.+1454   	; 0x171a <find_volume+0x648>
    116c:	82 fd       	sbrc	r24, 2
    116e:	b7 c2       	rjmp	.+1390   	; 0x16de <find_volume+0x60c>
    1170:	d4 c2       	rjmp	.+1448   	; 0x171a <find_volume+0x648>
    1172:	df 01       	movw	r26, r30
    1174:	17 97       	sbiw	r26, 0x07	; 7
    1176:	8c 91       	ld	r24, X
    1178:	88 23       	and	r24, r24
    117a:	b9 f0       	breq	.+46     	; 0x11aa <find_volume+0xd8>
    117c:	14 96       	adiw	r26, 0x04	; 4
    117e:	cc 90       	ld	r12, X
    1180:	80 81       	ld	r24, Z
    1182:	d1 2c       	mov	r13, r1
    1184:	e1 2c       	mov	r14, r1
    1186:	f1 2c       	mov	r15, r1
    1188:	f8 2a       	or	r15, r24
    118a:	12 96       	adiw	r26, 0x02	; 2
    118c:	8c 91       	ld	r24, X
    118e:	e8 2a       	or	r14, r24
    1190:	11 97       	sbiw	r26, 0x01	; 1
    1192:	ac 91       	ld	r26, X
    1194:	b0 e0       	ldi	r27, 0x00	; 0
    1196:	ba 2f       	mov	r27, r26
    1198:	aa 27       	eor	r26, r26
    119a:	cd 01       	movw	r24, r26
    119c:	a0 e0       	ldi	r26, 0x00	; 0
    119e:	b0 e0       	ldi	r27, 0x00	; 0
    11a0:	c8 2a       	or	r12, r24
    11a2:	d9 2a       	or	r13, r25
    11a4:	ea 2a       	or	r14, r26
    11a6:	fb 2a       	or	r15, r27
    11a8:	04 c0       	rjmp	.+8      	; 0x11b2 <find_volume+0xe0>
    11aa:	c8 2c       	mov	r12, r8
    11ac:	d9 2c       	mov	r13, r9
    11ae:	e7 2e       	mov	r14, r23
    11b0:	f6 2e       	mov	r15, r22
    11b2:	d9 01       	movw	r26, r18
    11b4:	cd 92       	st	X+, r12
    11b6:	dd 92       	st	X+, r13
    11b8:	ed 92       	st	X+, r14
    11ba:	fd 92       	st	X+, r15
    11bc:	9d 01       	movw	r18, r26
    11be:	70 96       	adiw	r30, 0x10	; 16
    11c0:	e4 17       	cp	r30, r20
    11c2:	f5 07       	cpc	r31, r21
    11c4:	b1 f6       	brne	.-84     	; 0x1172 <find_volume+0xa0>
    11c6:	4e 01       	movw	r8, r28
    11c8:	b1 e1       	ldi	r27, 0x11	; 17
    11ca:	8b 0e       	add	r8, r27
    11cc:	91 1c       	adc	r9, r1
    11ce:	68 94       	set
    11d0:	77 24       	eor	r7, r7
    11d2:	71 f8       	bld	r7, 1
    11d4:	f5 01       	movw	r30, r10
    11d6:	c1 90       	ld	r12, Z+
    11d8:	d1 90       	ld	r13, Z+
    11da:	e1 90       	ld	r14, Z+
    11dc:	f1 90       	ld	r15, Z+
    11de:	5f 01       	movw	r10, r30
    11e0:	c1 14       	cp	r12, r1
    11e2:	d1 04       	cpc	r13, r1
    11e4:	e1 04       	cpc	r14, r1
    11e6:	f1 04       	cpc	r15, r1
    11e8:	39 f0       	breq	.+14     	; 0x11f8 <find_volume+0x126>
    11ea:	b7 01       	movw	r22, r14
    11ec:	a6 01       	movw	r20, r12
    11ee:	c8 01       	movw	r24, r16
    11f0:	e4 de       	rcall	.-568    	; 0xfba <check_fs>
    11f2:	81 11       	cpse	r24, r1
    11f4:	02 c0       	rjmp	.+4      	; 0x11fa <find_volume+0x128>
    11f6:	0d c0       	rjmp	.+26     	; 0x1212 <find_volume+0x140>
    11f8:	87 2d       	mov	r24, r7
    11fa:	a8 14       	cp	r10, r8
    11fc:	b9 04       	cpc	r11, r9
    11fe:	51 f7       	brne	.-44     	; 0x11d4 <find_volume+0x102>
    1200:	03 c0       	rjmp	.+6      	; 0x1208 <find_volume+0x136>
    1202:	c1 2c       	mov	r12, r1
    1204:	d1 2c       	mov	r13, r1
    1206:	76 01       	movw	r14, r12
    1208:	83 30       	cpi	r24, 0x03	; 3
    120a:	09 f4       	brne	.+2      	; 0x120e <find_volume+0x13c>
    120c:	6a c2       	rjmp	.+1236   	; 0x16e2 <find_volume+0x610>
    120e:	81 11       	cpse	r24, r1
    1210:	6a c2       	rjmp	.+1236   	; 0x16e6 <find_volume+0x614>
    1212:	d8 01       	movw	r26, r16
    1214:	da 96       	adiw	r26, 0x3a	; 58
    1216:	8c 91       	ld	r24, X
    1218:	da 97       	sbiw	r26, 0x3a	; 58
    121a:	90 e0       	ldi	r25, 0x00	; 0
    121c:	98 2f       	mov	r25, r24
    121e:	88 27       	eor	r24, r24
    1220:	d9 96       	adiw	r26, 0x39	; 57
    1222:	2c 91       	ld	r18, X
    1224:	82 2b       	or	r24, r18
    1226:	81 15       	cp	r24, r1
    1228:	94 40       	sbci	r25, 0x04	; 4
    122a:	09 f0       	breq	.+2      	; 0x122e <find_volume+0x15c>
    122c:	5e c2       	rjmp	.+1212   	; 0x16ea <find_volume+0x618>
    122e:	f8 01       	movw	r30, r16
    1230:	eb 5b       	subi	r30, 0xBB	; 187
    1232:	ff 4f       	sbci	r31, 0xFF	; 255
    1234:	80 80       	ld	r8, Z
    1236:	91 2c       	mov	r9, r1
    1238:	98 2c       	mov	r9, r8
    123a:	88 24       	eor	r8, r8
    123c:	31 97       	sbiw	r30, 0x01	; 1
    123e:	80 81       	ld	r24, Z
    1240:	88 2a       	or	r8, r24
    1242:	a1 2c       	mov	r10, r1
    1244:	b1 2c       	mov	r11, r1
    1246:	81 14       	cp	r8, r1
    1248:	91 04       	cpc	r9, r1
    124a:	a1 04       	cpc	r10, r1
    124c:	b1 04       	cpc	r11, r1
    124e:	e9 f4       	brne	.+58     	; 0x128a <find_volume+0x1b8>
    1250:	71 96       	adiw	r30, 0x11	; 17
    1252:	80 81       	ld	r24, Z
    1254:	31 97       	sbiw	r30, 0x01	; 1
    1256:	80 80       	ld	r8, Z
    1258:	91 2c       	mov	r9, r1
    125a:	a1 2c       	mov	r10, r1
    125c:	b1 2c       	mov	r11, r1
    125e:	54 01       	movw	r10, r8
    1260:	99 24       	eor	r9, r9
    1262:	88 24       	eor	r8, r8
    1264:	b8 2a       	or	r11, r24
    1266:	32 97       	sbiw	r30, 0x02	; 2
    1268:	80 81       	ld	r24, Z
    126a:	a5 01       	movw	r20, r10
    126c:	94 01       	movw	r18, r8
    126e:	28 2b       	or	r18, r24
    1270:	da 01       	movw	r26, r20
    1272:	c9 01       	movw	r24, r18
    1274:	31 96       	adiw	r30, 0x01	; 1
    1276:	80 80       	ld	r8, Z
    1278:	91 2c       	mov	r9, r1
    127a:	98 2c       	mov	r9, r8
    127c:	88 24       	eor	r8, r8
    127e:	a1 2c       	mov	r10, r1
    1280:	b1 2c       	mov	r11, r1
    1282:	88 2a       	or	r8, r24
    1284:	99 2a       	or	r9, r25
    1286:	aa 2a       	or	r10, r26
    1288:	bb 2a       	or	r11, r27
    128a:	d8 01       	movw	r26, r16
    128c:	56 96       	adiw	r26, 0x16	; 22
    128e:	8d 92       	st	X+, r8
    1290:	9d 92       	st	X+, r9
    1292:	ad 92       	st	X+, r10
    1294:	bc 92       	st	X, r11
    1296:	59 97       	sbiw	r26, 0x19	; 25
    1298:	de 96       	adiw	r26, 0x3e	; 62
    129a:	ac 91       	ld	r26, X
    129c:	f8 01       	movw	r30, r16
    129e:	a3 83       	std	Z+3, r26	; 0x03
    12a0:	8f ef       	ldi	r24, 0xFF	; 255
    12a2:	8a 0f       	add	r24, r26
    12a4:	82 30       	cpi	r24, 0x02	; 2
    12a6:	08 f0       	brcs	.+2      	; 0x12aa <find_volume+0x1d8>
    12a8:	22 c2       	rjmp	.+1092   	; 0x16ee <find_volume+0x61c>
    12aa:	f3 ad       	ldd	r31, Z+59	; 0x3b
    12ac:	f9 8b       	std	Y+17, r31	; 0x11
    12ae:	2f 2f       	mov	r18, r31
    12b0:	f8 01       	movw	r30, r16
    12b2:	22 83       	std	Z+2, r18	; 0x02
    12b4:	22 23       	and	r18, r18
    12b6:	09 f4       	brne	.+2      	; 0x12ba <find_volume+0x1e8>
    12b8:	1c c2       	rjmp	.+1080   	; 0x16f2 <find_volume+0x620>
    12ba:	82 2f       	mov	r24, r18
    12bc:	90 e0       	ldi	r25, 0x00	; 0
    12be:	9c 01       	movw	r18, r24
    12c0:	21 50       	subi	r18, 0x01	; 1
    12c2:	31 09       	sbc	r19, r1
    12c4:	82 23       	and	r24, r18
    12c6:	93 23       	and	r25, r19
    12c8:	89 2b       	or	r24, r25
    12ca:	09 f0       	breq	.+2      	; 0x12ce <find_volume+0x1fc>
    12cc:	14 c2       	rjmp	.+1064   	; 0x16f6 <find_volume+0x624>
    12ce:	e0 5c       	subi	r30, 0xC0	; 192
    12d0:	ff 4f       	sbci	r31, 0xFF	; 255
    12d2:	80 81       	ld	r24, Z
    12d4:	90 e0       	ldi	r25, 0x00	; 0
    12d6:	98 2f       	mov	r25, r24
    12d8:	88 27       	eor	r24, r24
    12da:	f8 01       	movw	r30, r16
    12dc:	27 ad       	ldd	r18, Z+63	; 0x3f
    12de:	1c 01       	movw	r2, r24
    12e0:	22 2a       	or	r2, r18
    12e2:	31 86       	std	Z+9, r3	; 0x09
    12e4:	20 86       	std	Z+8, r2	; 0x08
    12e6:	c1 01       	movw	r24, r2
    12e8:	8f 71       	andi	r24, 0x1F	; 31
    12ea:	99 27       	eor	r25, r25
    12ec:	89 2b       	or	r24, r25
    12ee:	09 f0       	breq	.+2      	; 0x12f2 <find_volume+0x220>
    12f0:	04 c2       	rjmp	.+1032   	; 0x16fa <find_volume+0x628>
    12f2:	ee 5b       	subi	r30, 0xBE	; 190
    12f4:	ff 4f       	sbci	r31, 0xFF	; 255
    12f6:	40 80       	ld	r4, Z
    12f8:	51 2c       	mov	r5, r1
    12fa:	54 2c       	mov	r5, r4
    12fc:	44 24       	eor	r4, r4
    12fe:	31 97       	sbiw	r30, 0x01	; 1
    1300:	80 81       	ld	r24, Z
    1302:	48 2a       	or	r4, r24
    1304:	61 2c       	mov	r6, r1
    1306:	71 2c       	mov	r7, r1
    1308:	41 14       	cp	r4, r1
    130a:	51 04       	cpc	r5, r1
    130c:	61 04       	cpc	r6, r1
    130e:	71 04       	cpc	r7, r1
    1310:	d1 f4       	brne	.+52     	; 0x1346 <find_volume+0x274>
    1312:	70 96       	adiw	r30, 0x10	; 16
    1314:	80 81       	ld	r24, Z
    1316:	31 97       	sbiw	r30, 0x01	; 1
    1318:	40 80       	ld	r4, Z
    131a:	51 2c       	mov	r5, r1
    131c:	61 2c       	mov	r6, r1
    131e:	71 2c       	mov	r7, r1
    1320:	32 01       	movw	r6, r4
    1322:	55 24       	eor	r5, r5
    1324:	44 24       	eor	r4, r4
    1326:	78 2a       	or	r7, r24
    1328:	32 97       	sbiw	r30, 0x02	; 2
    132a:	80 81       	ld	r24, Z
    132c:	48 2a       	or	r4, r24
    132e:	31 96       	adiw	r30, 0x01	; 1
    1330:	80 81       	ld	r24, Z
    1332:	90 e0       	ldi	r25, 0x00	; 0
    1334:	98 2f       	mov	r25, r24
    1336:	88 27       	eor	r24, r24
    1338:	ac 01       	movw	r20, r24
    133a:	60 e0       	ldi	r22, 0x00	; 0
    133c:	70 e0       	ldi	r23, 0x00	; 0
    133e:	44 2a       	or	r4, r20
    1340:	55 2a       	or	r5, r21
    1342:	66 2a       	or	r6, r22
    1344:	77 2a       	or	r7, r23
    1346:	f8 01       	movw	r30, r16
    1348:	85 ad       	ldd	r24, Z+61	; 0x3d
    134a:	e8 2f       	mov	r30, r24
    134c:	f0 e0       	ldi	r31, 0x00	; 0
    134e:	3e 2f       	mov	r19, r30
    1350:	22 27       	eor	r18, r18
    1352:	f8 01       	movw	r30, r16
    1354:	84 ad       	ldd	r24, Z+60	; 0x3c
    1356:	f9 01       	movw	r30, r18
    1358:	e8 2b       	or	r30, r24
    135a:	30 97       	sbiw	r30, 0x00	; 0
    135c:	09 f4       	brne	.+2      	; 0x1360 <find_volume+0x28e>
    135e:	cf c1       	rjmp	.+926    	; 0x16fe <find_volume+0x62c>
    1360:	b0 e0       	ldi	r27, 0x00	; 0
    1362:	a5 01       	movw	r20, r10
    1364:	94 01       	movw	r18, r8
    1366:	0e 94 0c 21 	call	0x4218	; 0x4218 <__muluhisi3>
    136a:	6a 8f       	std	Y+26, r22	; 0x1a
    136c:	7b 8f       	std	Y+27, r23	; 0x1b
    136e:	8c 8f       	std	Y+28, r24	; 0x1c
    1370:	9d 8f       	std	Y+29, r25	; 0x1d
    1372:	9f 01       	movw	r18, r30
    1374:	40 e0       	ldi	r20, 0x00	; 0
    1376:	50 e0       	ldi	r21, 0x00	; 0
    1378:	2e 8b       	std	Y+22, r18	; 0x16
    137a:	3f 8b       	std	Y+23, r19	; 0x17
    137c:	48 8f       	std	Y+24, r20	; 0x18
    137e:	59 8f       	std	Y+25, r21	; 0x19
    1380:	c1 01       	movw	r24, r2
    1382:	96 95       	lsr	r25
    1384:	87 95       	ror	r24
    1386:	92 95       	swap	r25
    1388:	82 95       	swap	r24
    138a:	8f 70       	andi	r24, 0x0F	; 15
    138c:	89 27       	eor	r24, r25
    138e:	9f 70       	andi	r25, 0x0F	; 15
    1390:	89 27       	eor	r24, r25
    1392:	28 0f       	add	r18, r24
    1394:	39 1f       	adc	r19, r25
    1396:	41 1d       	adc	r20, r1
    1398:	51 1d       	adc	r21, r1
    139a:	da 01       	movw	r26, r20
    139c:	c9 01       	movw	r24, r18
    139e:	2a 8d       	ldd	r18, Y+26	; 0x1a
    13a0:	3b 8d       	ldd	r19, Y+27	; 0x1b
    13a2:	4c 8d       	ldd	r20, Y+28	; 0x1c
    13a4:	5d 8d       	ldd	r21, Y+29	; 0x1d
    13a6:	28 0f       	add	r18, r24
    13a8:	39 1f       	adc	r19, r25
    13aa:	4a 1f       	adc	r20, r26
    13ac:	5b 1f       	adc	r21, r27
    13ae:	2a 8b       	std	Y+18, r18	; 0x12
    13b0:	3b 8b       	std	Y+19, r19	; 0x13
    13b2:	4c 8b       	std	Y+20, r20	; 0x14
    13b4:	5d 8b       	std	Y+21, r21	; 0x15
    13b6:	42 16       	cp	r4, r18
    13b8:	53 06       	cpc	r5, r19
    13ba:	64 06       	cpc	r6, r20
    13bc:	75 06       	cpc	r7, r21
    13be:	08 f4       	brcc	.+2      	; 0x13c2 <find_volume+0x2f0>
    13c0:	a0 c1       	rjmp	.+832    	; 0x1702 <find_volume+0x630>
    13c2:	c3 01       	movw	r24, r6
    13c4:	b2 01       	movw	r22, r4
    13c6:	62 1b       	sub	r22, r18
    13c8:	73 0b       	sbc	r23, r19
    13ca:	84 0b       	sbc	r24, r20
    13cc:	95 0b       	sbc	r25, r21
    13ce:	e9 89       	ldd	r30, Y+17	; 0x11
    13d0:	2e 2f       	mov	r18, r30
    13d2:	30 e0       	ldi	r19, 0x00	; 0
    13d4:	40 e0       	ldi	r20, 0x00	; 0
    13d6:	50 e0       	ldi	r21, 0x00	; 0
    13d8:	0e 94 e1 20 	call	0x41c2	; 0x41c2 <__udivmodsi4>
    13dc:	da 01       	movw	r26, r20
    13de:	c9 01       	movw	r24, r18
    13e0:	21 15       	cp	r18, r1
    13e2:	31 05       	cpc	r19, r1
    13e4:	41 05       	cpc	r20, r1
    13e6:	51 05       	cpc	r21, r1
    13e8:	09 f4       	brne	.+2      	; 0x13ec <find_volume+0x31a>
    13ea:	8d c1       	rjmp	.+794    	; 0x1706 <find_volume+0x634>
    13ec:	26 3f       	cpi	r18, 0xF6	; 246
    13ee:	ff e0       	ldi	r31, 0x0F	; 15
    13f0:	3f 07       	cpc	r19, r31
    13f2:	41 05       	cpc	r20, r1
    13f4:	51 05       	cpc	r21, r1
    13f6:	18 f0       	brcs	.+6      	; 0x13fe <find_volume+0x32c>
    13f8:	e2 e0       	ldi	r30, 0x02	; 2
    13fa:	e9 8b       	std	Y+17, r30	; 0x11
    13fc:	02 c0       	rjmp	.+4      	; 0x1402 <find_volume+0x330>
    13fe:	f1 e0       	ldi	r31, 0x01	; 1
    1400:	f9 8b       	std	Y+17, r31	; 0x11
    1402:	86 3f       	cpi	r24, 0xF6	; 246
    1404:	9f 4f       	sbci	r25, 0xFF	; 255
    1406:	a1 05       	cpc	r26, r1
    1408:	b1 05       	cpc	r27, r1
    140a:	08 f0       	brcs	.+2      	; 0x140e <find_volume+0x33c>
    140c:	9d c1       	rjmp	.+826    	; 0x1748 <find_volume+0x676>
    140e:	29 01       	movw	r4, r18
    1410:	3a 01       	movw	r6, r20
    1412:	82 e0       	ldi	r24, 0x02	; 2
    1414:	48 0e       	add	r4, r24
    1416:	51 1c       	adc	r5, r1
    1418:	61 1c       	adc	r6, r1
    141a:	71 1c       	adc	r7, r1
    141c:	d8 01       	movw	r26, r16
    141e:	52 96       	adiw	r26, 0x12	; 18
    1420:	4d 92       	st	X+, r4
    1422:	5d 92       	st	X+, r5
    1424:	6d 92       	st	X+, r6
    1426:	7c 92       	st	X, r7
    1428:	55 97       	sbiw	r26, 0x15	; 21
    142a:	f8 01       	movw	r30, r16
    142c:	c2 8e       	std	Z+26, r12	; 0x1a
    142e:	d3 8e       	std	Z+27, r13	; 0x1b
    1430:	e4 8e       	std	Z+28, r14	; 0x1c
    1432:	f5 8e       	std	Z+29, r15	; 0x1d
    1434:	8e 89       	ldd	r24, Y+22	; 0x16
    1436:	9f 89       	ldd	r25, Y+23	; 0x17
    1438:	a8 8d       	ldd	r26, Y+24	; 0x18
    143a:	b9 8d       	ldd	r27, Y+25	; 0x19
    143c:	8c 0d       	add	r24, r12
    143e:	9d 1d       	adc	r25, r13
    1440:	ae 1d       	adc	r26, r14
    1442:	bf 1d       	adc	r27, r15
    1444:	86 8f       	std	Z+30, r24	; 0x1e
    1446:	97 8f       	std	Z+31, r25	; 0x1f
    1448:	a0 a3       	std	Z+32, r26	; 0x20
    144a:	b1 a3       	std	Z+33, r27	; 0x21
    144c:	4a 89       	ldd	r20, Y+18	; 0x12
    144e:	5b 89       	ldd	r21, Y+19	; 0x13
    1450:	6c 89       	ldd	r22, Y+20	; 0x14
    1452:	7d 89       	ldd	r23, Y+21	; 0x15
    1454:	4c 0d       	add	r20, r12
    1456:	5d 1d       	adc	r21, r13
    1458:	6e 1d       	adc	r22, r14
    145a:	7f 1d       	adc	r23, r15
    145c:	46 a3       	std	Z+38, r20	; 0x26
    145e:	57 a3       	std	Z+39, r21	; 0x27
    1460:	60 a7       	std	Z+40, r22	; 0x28
    1462:	71 a7       	std	Z+41, r23	; 0x29
    1464:	f9 89       	ldd	r31, Y+17	; 0x11
    1466:	f3 30       	cpi	r31, 0x03	; 3
    1468:	09 f0       	breq	.+2      	; 0x146c <find_volume+0x39a>
    146a:	44 c0       	rjmp	.+136    	; 0x14f4 <find_volume+0x422>
    146c:	23 28       	or	r2, r3
    146e:	09 f0       	breq	.+2      	; 0x1472 <find_volume+0x3a0>
    1470:	4c c1       	rjmp	.+664    	; 0x170a <find_volume+0x638>
    1472:	f8 01       	movw	r30, r16
    1474:	e3 5a       	subi	r30, 0xA3	; 163
    1476:	ff 4f       	sbci	r31, 0xFF	; 255
    1478:	20 81       	ld	r18, Z
    147a:	31 97       	sbiw	r30, 0x01	; 1
    147c:	80 81       	ld	r24, Z
    147e:	90 e0       	ldi	r25, 0x00	; 0
    1480:	a0 e0       	ldi	r26, 0x00	; 0
    1482:	b0 e0       	ldi	r27, 0x00	; 0
    1484:	dc 01       	movw	r26, r24
    1486:	99 27       	eor	r25, r25
    1488:	88 27       	eor	r24, r24
    148a:	b2 2b       	or	r27, r18
    148c:	32 97       	sbiw	r30, 0x02	; 2
    148e:	20 81       	ld	r18, Z
    1490:	ac 01       	movw	r20, r24
    1492:	bd 01       	movw	r22, r26
    1494:	42 2b       	or	r20, r18
    1496:	31 96       	adiw	r30, 0x01	; 1
    1498:	80 81       	ld	r24, Z
    149a:	28 2f       	mov	r18, r24
    149c:	30 e0       	ldi	r19, 0x00	; 0
    149e:	92 2f       	mov	r25, r18
    14a0:	88 27       	eor	r24, r24
    14a2:	a0 e0       	ldi	r26, 0x00	; 0
    14a4:	b0 e0       	ldi	r27, 0x00	; 0
    14a6:	84 2b       	or	r24, r20
    14a8:	95 2b       	or	r25, r21
    14aa:	a6 2b       	or	r26, r22
    14ac:	b7 2b       	or	r27, r23
    14ae:	f8 01       	movw	r30, r16
    14b0:	82 a3       	std	Z+34, r24	; 0x22
    14b2:	93 a3       	std	Z+35, r25	; 0x23
    14b4:	a4 a3       	std	Z+36, r26	; 0x24
    14b6:	b5 a3       	std	Z+37, r27	; 0x25
    14b8:	44 0c       	add	r4, r4
    14ba:	55 1c       	adc	r5, r5
    14bc:	66 1c       	adc	r6, r6
    14be:	77 1c       	adc	r7, r7
    14c0:	44 0c       	add	r4, r4
    14c2:	55 1c       	adc	r5, r5
    14c4:	66 1c       	adc	r6, r6
    14c6:	77 1c       	adc	r7, r7
    14c8:	ff ef       	ldi	r31, 0xFF	; 255
    14ca:	4f 0e       	add	r4, r31
    14cc:	f3 e0       	ldi	r31, 0x03	; 3
    14ce:	5f 1e       	adc	r5, r31
    14d0:	61 1c       	adc	r6, r1
    14d2:	71 1c       	adc	r7, r1
    14d4:	03 2e       	mov	r0, r19
    14d6:	3a e0       	ldi	r19, 0x0A	; 10
    14d8:	76 94       	lsr	r7
    14da:	67 94       	ror	r6
    14dc:	57 94       	ror	r5
    14de:	47 94       	ror	r4
    14e0:	3a 95       	dec	r19
    14e2:	d1 f7       	brne	.-12     	; 0x14d8 <find_volume+0x406>
    14e4:	30 2d       	mov	r19, r0
    14e6:	84 14       	cp	r8, r4
    14e8:	95 04       	cpc	r9, r5
    14ea:	a6 04       	cpc	r10, r6
    14ec:	b7 04       	cpc	r11, r7
    14ee:	08 f4       	brcc	.+2      	; 0x14f2 <find_volume+0x420>
    14f0:	0e c1       	rjmp	.+540    	; 0x170e <find_volume+0x63c>
    14f2:	56 c1       	rjmp	.+684    	; 0x17a0 <find_volume+0x6ce>
    14f4:	23 28       	or	r2, r3
    14f6:	09 f4       	brne	.+2      	; 0x14fa <find_volume+0x428>
    14f8:	0c c1       	rjmp	.+536    	; 0x1712 <find_volume+0x640>
    14fa:	2a 8d       	ldd	r18, Y+26	; 0x1a
    14fc:	3b 8d       	ldd	r19, Y+27	; 0x1b
    14fe:	4c 8d       	ldd	r20, Y+28	; 0x1c
    1500:	5d 8d       	ldd	r21, Y+29	; 0x1d
    1502:	82 0f       	add	r24, r18
    1504:	93 1f       	adc	r25, r19
    1506:	a4 1f       	adc	r26, r20
    1508:	b5 1f       	adc	r27, r21
    150a:	f8 01       	movw	r30, r16
    150c:	82 a3       	std	Z+34, r24	; 0x22
    150e:	93 a3       	std	Z+35, r25	; 0x23
    1510:	a4 a3       	std	Z+36, r26	; 0x24
    1512:	b5 a3       	std	Z+37, r27	; 0x25
    1514:	f9 89       	ldd	r31, Y+17	; 0x11
    1516:	f2 30       	cpi	r31, 0x02	; 2
    1518:	29 f4       	brne	.+10     	; 0x1524 <find_volume+0x452>
    151a:	44 0c       	add	r4, r4
    151c:	55 1c       	adc	r5, r5
    151e:	66 1c       	adc	r6, r6
    1520:	77 1c       	adc	r7, r7
    1522:	6a c1       	rjmp	.+724    	; 0x17f8 <find_volume+0x726>
    1524:	a3 e0       	ldi	r26, 0x03	; 3
    1526:	b0 e0       	ldi	r27, 0x00	; 0
    1528:	a3 01       	movw	r20, r6
    152a:	92 01       	movw	r18, r4
    152c:	0e 94 0c 21 	call	0x4218	; 0x4218 <__muluhisi3>
    1530:	dc 01       	movw	r26, r24
    1532:	cb 01       	movw	r24, r22
    1534:	b6 95       	lsr	r27
    1536:	a7 95       	ror	r26
    1538:	97 95       	ror	r25
    153a:	87 95       	ror	r24
    153c:	21 e0       	ldi	r18, 0x01	; 1
    153e:	42 22       	and	r4, r18
    1540:	55 24       	eor	r5, r5
    1542:	66 24       	eor	r6, r6
    1544:	77 24       	eor	r7, r7
    1546:	48 0e       	add	r4, r24
    1548:	59 1e       	adc	r5, r25
    154a:	6a 1e       	adc	r6, r26
    154c:	7b 1e       	adc	r7, r27
    154e:	54 c1       	rjmp	.+680    	; 0x17f8 <find_volume+0x726>
    1550:	b7 01       	movw	r22, r14
    1552:	a6 01       	movw	r20, r12
    1554:	4f 5f       	subi	r20, 0xFF	; 255
    1556:	5f 4f       	sbci	r21, 0xFF	; 255
    1558:	6f 4f       	sbci	r22, 0xFF	; 255
    155a:	7f 4f       	sbci	r23, 0xFF	; 255
    155c:	c8 01       	movw	r24, r16
    155e:	f1 dc       	rcall	.-1566   	; 0xf42 <move_window>
    1560:	81 11       	cpse	r24, r1
    1562:	96 c0       	rjmp	.+300    	; 0x1690 <find_volume+0x5be>
    1564:	d8 01       	movw	r26, r16
    1566:	15 96       	adiw	r26, 0x05	; 5
    1568:	1c 92       	st	X, r1
    156a:	f8 01       	movw	r30, r16
    156c:	e3 5d       	subi	r30, 0xD3	; 211
    156e:	fd 4f       	sbci	r31, 0xFD	; 253
    1570:	80 81       	ld	r24, Z
    1572:	90 e0       	ldi	r25, 0x00	; 0
    1574:	98 2f       	mov	r25, r24
    1576:	88 27       	eor	r24, r24
    1578:	31 97       	sbiw	r30, 0x01	; 1
    157a:	20 81       	ld	r18, Z
    157c:	82 2b       	or	r24, r18
    157e:	85 35       	cpi	r24, 0x55	; 85
    1580:	9a 4a       	sbci	r25, 0xAA	; 170
    1582:	09 f0       	breq	.+2      	; 0x1586 <find_volume+0x4b4>
    1584:	88 c0       	rjmp	.+272    	; 0x1696 <find_volume+0x5c4>
    1586:	f8 01       	movw	r30, r16
    1588:	21 a9       	ldd	r18, Z+49	; 0x31
    158a:	80 a9       	ldd	r24, Z+48	; 0x30
    158c:	90 e0       	ldi	r25, 0x00	; 0
    158e:	a0 e0       	ldi	r26, 0x00	; 0
    1590:	b0 e0       	ldi	r27, 0x00	; 0
    1592:	dc 01       	movw	r26, r24
    1594:	99 27       	eor	r25, r25
    1596:	88 27       	eor	r24, r24
    1598:	b2 2b       	or	r27, r18
    159a:	26 a5       	ldd	r18, Z+46	; 0x2e
    159c:	ac 01       	movw	r20, r24
    159e:	bd 01       	movw	r22, r26
    15a0:	42 2b       	or	r20, r18
    15a2:	27 a5       	ldd	r18, Z+47	; 0x2f
    15a4:	30 e0       	ldi	r19, 0x00	; 0
    15a6:	92 2f       	mov	r25, r18
    15a8:	88 27       	eor	r24, r24
    15aa:	a0 e0       	ldi	r26, 0x00	; 0
    15ac:	b0 e0       	ldi	r27, 0x00	; 0
    15ae:	84 2b       	or	r24, r20
    15b0:	95 2b       	or	r25, r21
    15b2:	a6 2b       	or	r26, r22
    15b4:	b7 2b       	or	r27, r23
    15b6:	82 35       	cpi	r24, 0x52	; 82
    15b8:	92 45       	sbci	r25, 0x52	; 82
    15ba:	a1 46       	sbci	r26, 0x61	; 97
    15bc:	b1 44       	sbci	r27, 0x41	; 65
    15be:	09 f0       	breq	.+2      	; 0x15c2 <find_volume+0x4f0>
    15c0:	6d c0       	rjmp	.+218    	; 0x169c <find_volume+0x5ca>
    15c2:	f8 01       	movw	r30, r16
    15c4:	eb 5e       	subi	r30, 0xEB	; 235
    15c6:	fd 4f       	sbci	r31, 0xFD	; 253
    15c8:	20 81       	ld	r18, Z
    15ca:	31 97       	sbiw	r30, 0x01	; 1
    15cc:	80 81       	ld	r24, Z
    15ce:	90 e0       	ldi	r25, 0x00	; 0
    15d0:	a0 e0       	ldi	r26, 0x00	; 0
    15d2:	b0 e0       	ldi	r27, 0x00	; 0
    15d4:	dc 01       	movw	r26, r24
    15d6:	99 27       	eor	r25, r25
    15d8:	88 27       	eor	r24, r24
    15da:	b2 2b       	or	r27, r18
    15dc:	32 97       	sbiw	r30, 0x02	; 2
    15de:	20 81       	ld	r18, Z
    15e0:	ac 01       	movw	r20, r24
    15e2:	bd 01       	movw	r22, r26
    15e4:	42 2b       	or	r20, r18
    15e6:	31 96       	adiw	r30, 0x01	; 1
    15e8:	20 81       	ld	r18, Z
    15ea:	30 e0       	ldi	r19, 0x00	; 0
    15ec:	92 2f       	mov	r25, r18
    15ee:	88 27       	eor	r24, r24
    15f0:	a0 e0       	ldi	r26, 0x00	; 0
    15f2:	b0 e0       	ldi	r27, 0x00	; 0
    15f4:	84 2b       	or	r24, r20
    15f6:	95 2b       	or	r25, r21
    15f8:	a6 2b       	or	r26, r22
    15fa:	b7 2b       	or	r27, r23
    15fc:	82 37       	cpi	r24, 0x72	; 114
    15fe:	92 47       	sbci	r25, 0x72	; 114
    1600:	a1 44       	sbci	r26, 0x41	; 65
    1602:	b1 46       	sbci	r27, 0x61	; 97
    1604:	09 f0       	breq	.+2      	; 0x1608 <find_volume+0x536>
    1606:	4d c0       	rjmp	.+154    	; 0x16a2 <find_volume+0x5d0>
    1608:	36 96       	adiw	r30, 0x06	; 6
    160a:	20 81       	ld	r18, Z
    160c:	31 97       	sbiw	r30, 0x01	; 1
    160e:	80 81       	ld	r24, Z
    1610:	90 e0       	ldi	r25, 0x00	; 0
    1612:	a0 e0       	ldi	r26, 0x00	; 0
    1614:	b0 e0       	ldi	r27, 0x00	; 0
    1616:	dc 01       	movw	r26, r24
    1618:	99 27       	eor	r25, r25
    161a:	88 27       	eor	r24, r24
    161c:	b2 2b       	or	r27, r18
    161e:	32 97       	sbiw	r30, 0x02	; 2
    1620:	20 81       	ld	r18, Z
    1622:	ac 01       	movw	r20, r24
    1624:	bd 01       	movw	r22, r26
    1626:	42 2b       	or	r20, r18
    1628:	31 96       	adiw	r30, 0x01	; 1
    162a:	20 81       	ld	r18, Z
    162c:	30 e0       	ldi	r19, 0x00	; 0
    162e:	92 2f       	mov	r25, r18
    1630:	88 27       	eor	r24, r24
    1632:	a0 e0       	ldi	r26, 0x00	; 0
    1634:	b0 e0       	ldi	r27, 0x00	; 0
    1636:	84 2b       	or	r24, r20
    1638:	95 2b       	or	r25, r21
    163a:	a6 2b       	or	r26, r22
    163c:	b7 2b       	or	r27, r23
    163e:	f8 01       	movw	r30, r16
    1640:	86 87       	std	Z+14, r24	; 0x0e
    1642:	97 87       	std	Z+15, r25	; 0x0f
    1644:	a0 8b       	std	Z+16, r26	; 0x10
    1646:	b1 8b       	std	Z+17, r27	; 0x11
    1648:	e3 5e       	subi	r30, 0xE3	; 227
    164a:	fd 4f       	sbci	r31, 0xFD	; 253
    164c:	20 81       	ld	r18, Z
    164e:	31 97       	sbiw	r30, 0x01	; 1
    1650:	80 81       	ld	r24, Z
    1652:	90 e0       	ldi	r25, 0x00	; 0
    1654:	a0 e0       	ldi	r26, 0x00	; 0
    1656:	b0 e0       	ldi	r27, 0x00	; 0
    1658:	dc 01       	movw	r26, r24
    165a:	99 27       	eor	r25, r25
    165c:	88 27       	eor	r24, r24
    165e:	b2 2b       	or	r27, r18
    1660:	32 97       	sbiw	r30, 0x02	; 2
    1662:	20 81       	ld	r18, Z
    1664:	ac 01       	movw	r20, r24
    1666:	bd 01       	movw	r22, r26
    1668:	42 2b       	or	r20, r18
    166a:	31 96       	adiw	r30, 0x01	; 1
    166c:	20 81       	ld	r18, Z
    166e:	30 e0       	ldi	r19, 0x00	; 0
    1670:	92 2f       	mov	r25, r18
    1672:	88 27       	eor	r24, r24
    1674:	a0 e0       	ldi	r26, 0x00	; 0
    1676:	b0 e0       	ldi	r27, 0x00	; 0
    1678:	84 2b       	or	r24, r20
    167a:	95 2b       	or	r25, r21
    167c:	a6 2b       	or	r26, r22
    167e:	b7 2b       	or	r27, r23
    1680:	f8 01       	movw	r30, r16
    1682:	82 87       	std	Z+10, r24	; 0x0a
    1684:	93 87       	std	Z+11, r25	; 0x0b
    1686:	a4 87       	std	Z+12, r26	; 0x0c
    1688:	b5 87       	std	Z+13, r27	; 0x0d
    168a:	f3 e0       	ldi	r31, 0x03	; 3
    168c:	f9 8b       	std	Y+17, r31	; 0x11
    168e:	0b c0       	rjmp	.+22     	; 0x16a6 <find_volume+0x5d4>
    1690:	e3 e0       	ldi	r30, 0x03	; 3
    1692:	e9 8b       	std	Y+17, r30	; 0x11
    1694:	08 c0       	rjmp	.+16     	; 0x16a6 <find_volume+0x5d4>
    1696:	f3 e0       	ldi	r31, 0x03	; 3
    1698:	f9 8b       	std	Y+17, r31	; 0x11
    169a:	05 c0       	rjmp	.+10     	; 0x16a6 <find_volume+0x5d4>
    169c:	e3 e0       	ldi	r30, 0x03	; 3
    169e:	e9 8b       	std	Y+17, r30	; 0x11
    16a0:	02 c0       	rjmp	.+4      	; 0x16a6 <find_volume+0x5d4>
    16a2:	f3 e0       	ldi	r31, 0x03	; 3
    16a4:	f9 8b       	std	Y+17, r31	; 0x11
    16a6:	e9 89       	ldd	r30, Y+17	; 0x11
    16a8:	d8 01       	movw	r26, r16
    16aa:	ec 93       	st	X, r30
    16ac:	80 91 9b 01 	lds	r24, 0x019B
    16b0:	90 91 9c 01 	lds	r25, 0x019C
    16b4:	01 96       	adiw	r24, 0x01	; 1
    16b6:	90 93 9c 01 	sts	0x019C, r25
    16ba:	80 93 9b 01 	sts	0x019B, r24
    16be:	17 96       	adiw	r26, 0x07	; 7
    16c0:	9c 93       	st	X, r25
    16c2:	8e 93       	st	-X, r24
    16c4:	16 97       	sbiw	r26, 0x06	; 6
    16c6:	80 e0       	ldi	r24, 0x00	; 0
    16c8:	ad c0       	rjmp	.+346    	; 0x1824 <find_volume+0x752>
    16ca:	8b e0       	ldi	r24, 0x0B	; 11
    16cc:	ab c0       	rjmp	.+342    	; 0x1824 <find_volume+0x752>
    16ce:	8c e0       	ldi	r24, 0x0C	; 12
    16d0:	a9 c0       	rjmp	.+338    	; 0x1824 <find_volume+0x752>
    16d2:	80 e0       	ldi	r24, 0x00	; 0
    16d4:	a7 c0       	rjmp	.+334    	; 0x1824 <find_volume+0x752>
    16d6:	80 e0       	ldi	r24, 0x00	; 0
    16d8:	a5 c0       	rjmp	.+330    	; 0x1824 <find_volume+0x752>
    16da:	83 e0       	ldi	r24, 0x03	; 3
    16dc:	a3 c0       	rjmp	.+326    	; 0x1824 <find_volume+0x752>
    16de:	8a e0       	ldi	r24, 0x0A	; 10
    16e0:	a1 c0       	rjmp	.+322    	; 0x1824 <find_volume+0x752>
    16e2:	81 e0       	ldi	r24, 0x01	; 1
    16e4:	9f c0       	rjmp	.+318    	; 0x1824 <find_volume+0x752>
    16e6:	8d e0       	ldi	r24, 0x0D	; 13
    16e8:	9d c0       	rjmp	.+314    	; 0x1824 <find_volume+0x752>
    16ea:	8d e0       	ldi	r24, 0x0D	; 13
    16ec:	9b c0       	rjmp	.+310    	; 0x1824 <find_volume+0x752>
    16ee:	8d e0       	ldi	r24, 0x0D	; 13
    16f0:	99 c0       	rjmp	.+306    	; 0x1824 <find_volume+0x752>
    16f2:	8d e0       	ldi	r24, 0x0D	; 13
    16f4:	97 c0       	rjmp	.+302    	; 0x1824 <find_volume+0x752>
    16f6:	8d e0       	ldi	r24, 0x0D	; 13
    16f8:	95 c0       	rjmp	.+298    	; 0x1824 <find_volume+0x752>
    16fa:	8d e0       	ldi	r24, 0x0D	; 13
    16fc:	93 c0       	rjmp	.+294    	; 0x1824 <find_volume+0x752>
    16fe:	8d e0       	ldi	r24, 0x0D	; 13
    1700:	91 c0       	rjmp	.+290    	; 0x1824 <find_volume+0x752>
    1702:	8d e0       	ldi	r24, 0x0D	; 13
    1704:	8f c0       	rjmp	.+286    	; 0x1824 <find_volume+0x752>
    1706:	8d e0       	ldi	r24, 0x0D	; 13
    1708:	8d c0       	rjmp	.+282    	; 0x1824 <find_volume+0x752>
    170a:	8d e0       	ldi	r24, 0x0D	; 13
    170c:	8b c0       	rjmp	.+278    	; 0x1824 <find_volume+0x752>
    170e:	8d e0       	ldi	r24, 0x0D	; 13
    1710:	89 c0       	rjmp	.+274    	; 0x1824 <find_volume+0x752>
    1712:	8d e0       	ldi	r24, 0x0D	; 13
    1714:	87 c0       	rjmp	.+270    	; 0x1824 <find_volume+0x752>
    1716:	8d e0       	ldi	r24, 0x0D	; 13
    1718:	85 c0       	rjmp	.+266    	; 0x1824 <find_volume+0x752>
    171a:	40 e0       	ldi	r20, 0x00	; 0
    171c:	50 e0       	ldi	r21, 0x00	; 0
    171e:	ba 01       	movw	r22, r20
    1720:	c8 01       	movw	r24, r16
    1722:	4b dc       	rcall	.-1898   	; 0xfba <check_fs>
    1724:	81 30       	cpi	r24, 0x01	; 1
    1726:	09 f0       	breq	.+2      	; 0x172a <find_volume+0x658>
    1728:	6c cd       	rjmp	.-1320   	; 0x1202 <find_volume+0x130>
    172a:	9e 01       	movw	r18, r28
    172c:	2f 5f       	subi	r18, 0xFF	; 255
    172e:	3f 4f       	sbci	r19, 0xFF	; 255
    1730:	59 01       	movw	r10, r18
    1732:	f8 01       	movw	r30, r16
    1734:	e9 50       	subi	r30, 0x09	; 9
    1736:	fe 4f       	sbci	r31, 0xFE	; 254
    1738:	a8 01       	movw	r20, r16
    173a:	49 5c       	subi	r20, 0xC9	; 201
    173c:	5d 4f       	sbci	r21, 0xFD	; 253
    173e:	81 2c       	mov	r8, r1
    1740:	91 2c       	mov	r9, r1
    1742:	70 e0       	ldi	r23, 0x00	; 0
    1744:	60 e0       	ldi	r22, 0x00	; 0
    1746:	15 cd       	rjmp	.-1494   	; 0x1172 <find_volume+0xa0>
    1748:	29 01       	movw	r4, r18
    174a:	3a 01       	movw	r6, r20
    174c:	62 e0       	ldi	r22, 0x02	; 2
    174e:	46 0e       	add	r4, r22
    1750:	51 1c       	adc	r5, r1
    1752:	61 1c       	adc	r6, r1
    1754:	71 1c       	adc	r7, r1
    1756:	d8 01       	movw	r26, r16
    1758:	52 96       	adiw	r26, 0x12	; 18
    175a:	4d 92       	st	X+, r4
    175c:	5d 92       	st	X+, r5
    175e:	6d 92       	st	X+, r6
    1760:	7c 92       	st	X, r7
    1762:	55 97       	sbiw	r26, 0x15	; 21
    1764:	f8 01       	movw	r30, r16
    1766:	c2 8e       	std	Z+26, r12	; 0x1a
    1768:	d3 8e       	std	Z+27, r13	; 0x1b
    176a:	e4 8e       	std	Z+28, r14	; 0x1c
    176c:	f5 8e       	std	Z+29, r15	; 0x1d
    176e:	8e 89       	ldd	r24, Y+22	; 0x16
    1770:	9f 89       	ldd	r25, Y+23	; 0x17
    1772:	a8 8d       	ldd	r26, Y+24	; 0x18
    1774:	b9 8d       	ldd	r27, Y+25	; 0x19
    1776:	8c 0d       	add	r24, r12
    1778:	9d 1d       	adc	r25, r13
    177a:	ae 1d       	adc	r26, r14
    177c:	bf 1d       	adc	r27, r15
    177e:	86 8f       	std	Z+30, r24	; 0x1e
    1780:	97 8f       	std	Z+31, r25	; 0x1f
    1782:	a0 a3       	std	Z+32, r26	; 0x20
    1784:	b1 a3       	std	Z+33, r27	; 0x21
    1786:	8a 89       	ldd	r24, Y+18	; 0x12
    1788:	9b 89       	ldd	r25, Y+19	; 0x13
    178a:	ac 89       	ldd	r26, Y+20	; 0x14
    178c:	bd 89       	ldd	r27, Y+21	; 0x15
    178e:	8c 0d       	add	r24, r12
    1790:	9d 1d       	adc	r25, r13
    1792:	ae 1d       	adc	r26, r14
    1794:	bf 1d       	adc	r27, r15
    1796:	86 a3       	std	Z+38, r24	; 0x26
    1798:	97 a3       	std	Z+39, r25	; 0x27
    179a:	a0 a7       	std	Z+40, r26	; 0x28
    179c:	b1 a7       	std	Z+41, r27	; 0x29
    179e:	66 ce       	rjmp	.-820    	; 0x146c <find_volume+0x39a>
    17a0:	8f ef       	ldi	r24, 0xFF	; 255
    17a2:	9f ef       	ldi	r25, 0xFF	; 255
    17a4:	dc 01       	movw	r26, r24
    17a6:	f8 01       	movw	r30, r16
    17a8:	86 87       	std	Z+14, r24	; 0x0e
    17aa:	97 87       	std	Z+15, r25	; 0x0f
    17ac:	a0 8b       	std	Z+16, r26	; 0x10
    17ae:	b1 8b       	std	Z+17, r27	; 0x11
    17b0:	82 87       	std	Z+10, r24	; 0x0a
    17b2:	93 87       	std	Z+11, r25	; 0x0b
    17b4:	a4 87       	std	Z+12, r26	; 0x0c
    17b6:	b5 87       	std	Z+13, r27	; 0x0d
    17b8:	80 e8       	ldi	r24, 0x80	; 128
    17ba:	85 83       	std	Z+5, r24	; 0x05
    17bc:	e1 5a       	subi	r30, 0xA1	; 161
    17be:	ff 4f       	sbci	r31, 0xFF	; 255
    17c0:	80 81       	ld	r24, Z
    17c2:	90 e0       	ldi	r25, 0x00	; 0
    17c4:	98 2f       	mov	r25, r24
    17c6:	88 27       	eor	r24, r24
    17c8:	31 97       	sbiw	r30, 0x01	; 1
    17ca:	20 81       	ld	r18, Z
    17cc:	82 2b       	or	r24, r18
    17ce:	01 97       	sbiw	r24, 0x01	; 1
    17d0:	09 f4       	brne	.+2      	; 0x17d4 <find_volume+0x702>
    17d2:	be ce       	rjmp	.-644    	; 0x1550 <find_volume+0x47e>
    17d4:	f3 e0       	ldi	r31, 0x03	; 3
    17d6:	f9 8b       	std	Y+17, r31	; 0x11
    17d8:	66 cf       	rjmp	.-308    	; 0x16a6 <find_volume+0x5d4>
    17da:	8f ef       	ldi	r24, 0xFF	; 255
    17dc:	9f ef       	ldi	r25, 0xFF	; 255
    17de:	dc 01       	movw	r26, r24
    17e0:	f8 01       	movw	r30, r16
    17e2:	86 87       	std	Z+14, r24	; 0x0e
    17e4:	97 87       	std	Z+15, r25	; 0x0f
    17e6:	a0 8b       	std	Z+16, r26	; 0x10
    17e8:	b1 8b       	std	Z+17, r27	; 0x11
    17ea:	82 87       	std	Z+10, r24	; 0x0a
    17ec:	93 87       	std	Z+11, r25	; 0x0b
    17ee:	a4 87       	std	Z+12, r26	; 0x0c
    17f0:	b5 87       	std	Z+13, r27	; 0x0d
    17f2:	80 e8       	ldi	r24, 0x80	; 128
    17f4:	85 83       	std	Z+5, r24	; 0x05
    17f6:	57 cf       	rjmp	.-338    	; 0x16a6 <find_volume+0x5d4>
    17f8:	ff ef       	ldi	r31, 0xFF	; 255
    17fa:	4f 0e       	add	r4, r31
    17fc:	f3 e0       	ldi	r31, 0x03	; 3
    17fe:	5f 1e       	adc	r5, r31
    1800:	61 1c       	adc	r6, r1
    1802:	71 1c       	adc	r7, r1
    1804:	03 2e       	mov	r0, r19
    1806:	3a e0       	ldi	r19, 0x0A	; 10
    1808:	76 94       	lsr	r7
    180a:	67 94       	ror	r6
    180c:	57 94       	ror	r5
    180e:	47 94       	ror	r4
    1810:	3a 95       	dec	r19
    1812:	d1 f7       	brne	.-12     	; 0x1808 <find_volume+0x736>
    1814:	30 2d       	mov	r19, r0
    1816:	84 14       	cp	r8, r4
    1818:	95 04       	cpc	r9, r5
    181a:	a6 04       	cpc	r10, r6
    181c:	b7 04       	cpc	r11, r7
    181e:	08 f4       	brcc	.+2      	; 0x1822 <find_volume+0x750>
    1820:	7a cf       	rjmp	.-268    	; 0x1716 <find_volume+0x644>
    1822:	db cf       	rjmp	.-74     	; 0x17da <find_volume+0x708>
    1824:	6d 96       	adiw	r28, 0x1d	; 29
    1826:	0f b6       	in	r0, 0x3f	; 63
    1828:	f8 94       	cli
    182a:	de bf       	out	0x3e, r29	; 62
    182c:	0f be       	out	0x3f, r0	; 63
    182e:	cd bf       	out	0x3d, r28	; 61
    1830:	df 91       	pop	r29
    1832:	cf 91       	pop	r28
    1834:	1f 91       	pop	r17
    1836:	0f 91       	pop	r16
    1838:	ff 90       	pop	r15
    183a:	ef 90       	pop	r14
    183c:	df 90       	pop	r13
    183e:	cf 90       	pop	r12
    1840:	bf 90       	pop	r11
    1842:	af 90       	pop	r10
    1844:	9f 90       	pop	r9
    1846:	8f 90       	pop	r8
    1848:	7f 90       	pop	r7
    184a:	6f 90       	pop	r6
    184c:	5f 90       	pop	r5
    184e:	4f 90       	pop	r4
    1850:	3f 90       	pop	r3
    1852:	2f 90       	pop	r2
    1854:	08 95       	ret

00001856 <sync_fs>:
    1856:	ef 92       	push	r14
    1858:	ff 92       	push	r15
    185a:	0f 93       	push	r16
    185c:	1f 93       	push	r17
    185e:	cf 93       	push	r28
    1860:	df 93       	push	r29
    1862:	ec 01       	movw	r28, r24
    1864:	05 db       	rcall	.-2550   	; 0xe70 <sync_window>
    1866:	98 2f       	mov	r25, r24
    1868:	81 11       	cpse	r24, r1
    186a:	61 c0       	rjmp	.+194    	; 0x192e <sync_fs+0xd8>
    186c:	88 81       	ld	r24, Y
    186e:	83 30       	cpi	r24, 0x03	; 3
    1870:	09 f0       	breq	.+2      	; 0x1874 <sync_fs+0x1e>
    1872:	53 c0       	rjmp	.+166    	; 0x191a <sync_fs+0xc4>
    1874:	8d 81       	ldd	r24, Y+5	; 0x05
    1876:	81 30       	cpi	r24, 0x01	; 1
    1878:	09 f0       	breq	.+2      	; 0x187c <sync_fs+0x26>
    187a:	4f c0       	rjmp	.+158    	; 0x191a <sync_fs+0xc4>
    187c:	40 e0       	ldi	r20, 0x00	; 0
    187e:	54 e0       	ldi	r21, 0x04	; 4
    1880:	60 e0       	ldi	r22, 0x00	; 0
    1882:	70 e0       	ldi	r23, 0x00	; 0
    1884:	7e 01       	movw	r14, r28
    1886:	8e e2       	ldi	r24, 0x2E	; 46
    1888:	e8 0e       	add	r14, r24
    188a:	f1 1c       	adc	r15, r1
    188c:	c7 01       	movw	r24, r14
    188e:	8c da       	rcall	.-2792   	; 0xda8 <mem_set>
    1890:	85 e5       	ldi	r24, 0x55	; 85
    1892:	fe 01       	movw	r30, r28
    1894:	e4 5d       	subi	r30, 0xD4	; 212
    1896:	fd 4f       	sbci	r31, 0xFD	; 253
    1898:	80 83       	st	Z, r24
    189a:	8a ea       	ldi	r24, 0xAA	; 170
    189c:	31 96       	adiw	r30, 0x01	; 1
    189e:	80 83       	st	Z, r24
    18a0:	82 e5       	ldi	r24, 0x52	; 82
    18a2:	8e a7       	std	Y+46, r24	; 0x2e
    18a4:	8f a7       	std	Y+47, r24	; 0x2f
    18a6:	81 e6       	ldi	r24, 0x61	; 97
    18a8:	88 ab       	std	Y+48, r24	; 0x30
    18aa:	91 e4       	ldi	r25, 0x41	; 65
    18ac:	99 ab       	std	Y+49, r25	; 0x31
    18ae:	22 e7       	ldi	r18, 0x72	; 114
    18b0:	7b 97       	sbiw	r30, 0x1b	; 27
    18b2:	20 83       	st	Z, r18
    18b4:	31 96       	adiw	r30, 0x01	; 1
    18b6:	20 83       	st	Z, r18
    18b8:	31 96       	adiw	r30, 0x01	; 1
    18ba:	90 83       	st	Z, r25
    18bc:	31 96       	adiw	r30, 0x01	; 1
    18be:	80 83       	st	Z, r24
    18c0:	3e 85       	ldd	r19, Y+14	; 0x0e
    18c2:	2f 85       	ldd	r18, Y+15	; 0x0f
    18c4:	98 89       	ldd	r25, Y+16	; 0x10
    18c6:	89 89       	ldd	r24, Y+17	; 0x11
    18c8:	31 96       	adiw	r30, 0x01	; 1
    18ca:	30 83       	st	Z, r19
    18cc:	31 96       	adiw	r30, 0x01	; 1
    18ce:	20 83       	st	Z, r18
    18d0:	31 96       	adiw	r30, 0x01	; 1
    18d2:	90 83       	st	Z, r25
    18d4:	31 96       	adiw	r30, 0x01	; 1
    18d6:	80 83       	st	Z, r24
    18d8:	3a 85       	ldd	r19, Y+10	; 0x0a
    18da:	2b 85       	ldd	r18, Y+11	; 0x0b
    18dc:	9c 85       	ldd	r25, Y+12	; 0x0c
    18de:	8d 85       	ldd	r24, Y+13	; 0x0d
    18e0:	31 96       	adiw	r30, 0x01	; 1
    18e2:	30 83       	st	Z, r19
    18e4:	31 96       	adiw	r30, 0x01	; 1
    18e6:	20 83       	st	Z, r18
    18e8:	31 96       	adiw	r30, 0x01	; 1
    18ea:	90 83       	st	Z, r25
    18ec:	31 96       	adiw	r30, 0x01	; 1
    18ee:	80 83       	st	Z, r24
    18f0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    18f2:	9b 8d       	ldd	r25, Y+27	; 0x1b
    18f4:	ac 8d       	ldd	r26, Y+28	; 0x1c
    18f6:	bd 8d       	ldd	r27, Y+29	; 0x1d
    18f8:	9c 01       	movw	r18, r24
    18fa:	ad 01       	movw	r20, r26
    18fc:	2f 5f       	subi	r18, 0xFF	; 255
    18fe:	3f 4f       	sbci	r19, 0xFF	; 255
    1900:	4f 4f       	sbci	r20, 0xFF	; 255
    1902:	5f 4f       	sbci	r21, 0xFF	; 255
    1904:	2a a7       	std	Y+42, r18	; 0x2a
    1906:	3b a7       	std	Y+43, r19	; 0x2b
    1908:	4c a7       	std	Y+44, r20	; 0x2c
    190a:	5d a7       	std	Y+45, r21	; 0x2d
    190c:	01 e0       	ldi	r16, 0x01	; 1
    190e:	10 e0       	ldi	r17, 0x00	; 0
    1910:	b7 01       	movw	r22, r14
    1912:	89 81       	ldd	r24, Y+1	; 0x01
    1914:	0e 94 9f 03 	call	0x73e	; 0x73e <disk_write>
    1918:	1d 82       	std	Y+5, r1	; 0x05
    191a:	40 e0       	ldi	r20, 0x00	; 0
    191c:	50 e0       	ldi	r21, 0x00	; 0
    191e:	60 e0       	ldi	r22, 0x00	; 0
    1920:	89 81       	ldd	r24, Y+1	; 0x01
    1922:	0e 94 0d 04 	call	0x81a	; 0x81a <disk_ioctl>
    1926:	91 e0       	ldi	r25, 0x01	; 1
    1928:	81 11       	cpse	r24, r1
    192a:	01 c0       	rjmp	.+2      	; 0x192e <sync_fs+0xd8>
    192c:	90 e0       	ldi	r25, 0x00	; 0
    192e:	89 2f       	mov	r24, r25
    1930:	df 91       	pop	r29
    1932:	cf 91       	pop	r28
    1934:	1f 91       	pop	r17
    1936:	0f 91       	pop	r16
    1938:	ff 90       	pop	r15
    193a:	ef 90       	pop	r14
    193c:	08 95       	ret

0000193e <clust2sect>:
    193e:	cf 92       	push	r12
    1940:	df 92       	push	r13
    1942:	ef 92       	push	r14
    1944:	ff 92       	push	r15
    1946:	fc 01       	movw	r30, r24
    1948:	9a 01       	movw	r18, r20
    194a:	ab 01       	movw	r20, r22
    194c:	22 50       	subi	r18, 0x02	; 2
    194e:	31 09       	sbc	r19, r1
    1950:	41 09       	sbc	r20, r1
    1952:	51 09       	sbc	r21, r1
    1954:	c2 88       	ldd	r12, Z+18	; 0x12
    1956:	d3 88       	ldd	r13, Z+19	; 0x13
    1958:	e4 88       	ldd	r14, Z+20	; 0x14
    195a:	f5 88       	ldd	r15, Z+21	; 0x15
    195c:	82 e0       	ldi	r24, 0x02	; 2
    195e:	c8 1a       	sub	r12, r24
    1960:	d1 08       	sbc	r13, r1
    1962:	e1 08       	sbc	r14, r1
    1964:	f1 08       	sbc	r15, r1
    1966:	2c 15       	cp	r18, r12
    1968:	3d 05       	cpc	r19, r13
    196a:	4e 05       	cpc	r20, r14
    196c:	5f 05       	cpc	r21, r15
    196e:	68 f4       	brcc	.+26     	; 0x198a <clust2sect+0x4c>
    1970:	a2 81       	ldd	r26, Z+2	; 0x02
    1972:	b0 e0       	ldi	r27, 0x00	; 0
    1974:	0e 94 0c 21 	call	0x4218	; 0x4218 <__muluhisi3>
    1978:	c6 a0       	ldd	r12, Z+38	; 0x26
    197a:	d7 a0       	ldd	r13, Z+39	; 0x27
    197c:	e0 a4       	ldd	r14, Z+40	; 0x28
    197e:	f1 a4       	ldd	r15, Z+41	; 0x29
    1980:	6c 0d       	add	r22, r12
    1982:	7d 1d       	adc	r23, r13
    1984:	8e 1d       	adc	r24, r14
    1986:	9f 1d       	adc	r25, r15
    1988:	03 c0       	rjmp	.+6      	; 0x1990 <clust2sect+0x52>
    198a:	60 e0       	ldi	r22, 0x00	; 0
    198c:	70 e0       	ldi	r23, 0x00	; 0
    198e:	cb 01       	movw	r24, r22
    1990:	ff 90       	pop	r15
    1992:	ef 90       	pop	r14
    1994:	df 90       	pop	r13
    1996:	cf 90       	pop	r12
    1998:	08 95       	ret

0000199a <get_fat>:
    199a:	af 92       	push	r10
    199c:	bf 92       	push	r11
    199e:	cf 92       	push	r12
    19a0:	df 92       	push	r13
    19a2:	ef 92       	push	r14
    19a4:	ff 92       	push	r15
    19a6:	0f 93       	push	r16
    19a8:	1f 93       	push	r17
    19aa:	cf 93       	push	r28
    19ac:	df 93       	push	r29
    19ae:	ec 01       	movw	r28, r24
    19b0:	6a 01       	movw	r12, r20
    19b2:	7b 01       	movw	r14, r22
    19b4:	42 30       	cpi	r20, 0x02	; 2
    19b6:	51 05       	cpc	r21, r1
    19b8:	61 05       	cpc	r22, r1
    19ba:	71 05       	cpc	r23, r1
    19bc:	08 f4       	brcc	.+2      	; 0x19c0 <get_fat+0x26>
    19be:	c6 c0       	rjmp	.+396    	; 0x1b4c <get_fat+0x1b2>
    19c0:	8a 89       	ldd	r24, Y+18	; 0x12
    19c2:	9b 89       	ldd	r25, Y+19	; 0x13
    19c4:	ac 89       	ldd	r26, Y+20	; 0x14
    19c6:	bd 89       	ldd	r27, Y+21	; 0x15
    19c8:	48 17       	cp	r20, r24
    19ca:	59 07       	cpc	r21, r25
    19cc:	6a 07       	cpc	r22, r26
    19ce:	7b 07       	cpc	r23, r27
    19d0:	08 f0       	brcs	.+2      	; 0x19d4 <get_fat+0x3a>
    19d2:	c1 c0       	rjmp	.+386    	; 0x1b56 <get_fat+0x1bc>
    19d4:	88 81       	ld	r24, Y
    19d6:	82 30       	cpi	r24, 0x02	; 2
    19d8:	09 f4       	brne	.+2      	; 0x19dc <get_fat+0x42>
    19da:	4d c0       	rjmp	.+154    	; 0x1a76 <get_fat+0xdc>
    19dc:	83 30       	cpi	r24, 0x03	; 3
    19de:	09 f4       	brne	.+2      	; 0x19e2 <get_fat+0x48>
    19e0:	73 c0       	rjmp	.+230    	; 0x1ac8 <get_fat+0x12e>
    19e2:	81 30       	cpi	r24, 0x01	; 1
    19e4:	09 f0       	breq	.+2      	; 0x19e8 <get_fat+0x4e>
    19e6:	bc c0       	rjmp	.+376    	; 0x1b60 <get_fat+0x1c6>
    19e8:	8a 01       	movw	r16, r20
    19ea:	16 95       	lsr	r17
    19ec:	07 95       	ror	r16
    19ee:	04 0f       	add	r16, r20
    19f0:	15 1f       	adc	r17, r21
    19f2:	c8 01       	movw	r24, r16
    19f4:	89 2f       	mov	r24, r25
    19f6:	99 27       	eor	r25, r25
    19f8:	86 95       	lsr	r24
    19fa:	86 95       	lsr	r24
    19fc:	4e 8d       	ldd	r20, Y+30	; 0x1e
    19fe:	5f 8d       	ldd	r21, Y+31	; 0x1f
    1a00:	68 a1       	ldd	r22, Y+32	; 0x20
    1a02:	79 a1       	ldd	r23, Y+33	; 0x21
    1a04:	48 0f       	add	r20, r24
    1a06:	59 1f       	adc	r21, r25
    1a08:	61 1d       	adc	r22, r1
    1a0a:	71 1d       	adc	r23, r1
    1a0c:	ce 01       	movw	r24, r28
    1a0e:	99 da       	rcall	.-2766   	; 0xf42 <move_window>
    1a10:	81 11       	cpse	r24, r1
    1a12:	ab c0       	rjmp	.+342    	; 0x1b6a <get_fat+0x1d0>
    1a14:	58 01       	movw	r10, r16
    1a16:	8f ef       	ldi	r24, 0xFF	; 255
    1a18:	a8 1a       	sub	r10, r24
    1a1a:	b8 0a       	sbc	r11, r24
    1a1c:	13 70       	andi	r17, 0x03	; 3
    1a1e:	fe 01       	movw	r30, r28
    1a20:	e0 0f       	add	r30, r16
    1a22:	f1 1f       	adc	r31, r17
    1a24:	16 a5       	ldd	r17, Z+46	; 0x2e
    1a26:	c5 01       	movw	r24, r10
    1a28:	89 2f       	mov	r24, r25
    1a2a:	99 27       	eor	r25, r25
    1a2c:	86 95       	lsr	r24
    1a2e:	86 95       	lsr	r24
    1a30:	4e 8d       	ldd	r20, Y+30	; 0x1e
    1a32:	5f 8d       	ldd	r21, Y+31	; 0x1f
    1a34:	68 a1       	ldd	r22, Y+32	; 0x20
    1a36:	79 a1       	ldd	r23, Y+33	; 0x21
    1a38:	48 0f       	add	r20, r24
    1a3a:	59 1f       	adc	r21, r25
    1a3c:	61 1d       	adc	r22, r1
    1a3e:	71 1d       	adc	r23, r1
    1a40:	ce 01       	movw	r24, r28
    1a42:	7f da       	rcall	.-2818   	; 0xf42 <move_window>
    1a44:	81 11       	cpse	r24, r1
    1a46:	95 c0       	rjmp	.+298    	; 0x1b72 <get_fat+0x1d8>
    1a48:	83 e0       	ldi	r24, 0x03	; 3
    1a4a:	b8 22       	and	r11, r24
    1a4c:	ca 0d       	add	r28, r10
    1a4e:	db 1d       	adc	r29, r11
    1a50:	8e a5       	ldd	r24, Y+46	; 0x2e
    1a52:	61 2f       	mov	r22, r17
    1a54:	70 e0       	ldi	r23, 0x00	; 0
    1a56:	78 2b       	or	r23, r24
    1a58:	c0 fe       	sbrs	r12, 0
    1a5a:	09 c0       	rjmp	.+18     	; 0x1a6e <get_fat+0xd4>
    1a5c:	72 95       	swap	r23
    1a5e:	62 95       	swap	r22
    1a60:	6f 70       	andi	r22, 0x0F	; 15
    1a62:	67 27       	eor	r22, r23
    1a64:	7f 70       	andi	r23, 0x0F	; 15
    1a66:	67 27       	eor	r22, r23
    1a68:	80 e0       	ldi	r24, 0x00	; 0
    1a6a:	90 e0       	ldi	r25, 0x00	; 0
    1a6c:	8d c0       	rjmp	.+282    	; 0x1b88 <get_fat+0x1ee>
    1a6e:	7f 70       	andi	r23, 0x0F	; 15
    1a70:	80 e0       	ldi	r24, 0x00	; 0
    1a72:	90 e0       	ldi	r25, 0x00	; 0
    1a74:	89 c0       	rjmp	.+274    	; 0x1b88 <get_fat+0x1ee>
    1a76:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1a78:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1a7a:	a8 a1       	ldd	r26, Y+32	; 0x20
    1a7c:	b9 a1       	ldd	r27, Y+33	; 0x21
    1a7e:	03 2e       	mov	r0, r19
    1a80:	39 e0       	ldi	r19, 0x09	; 9
    1a82:	76 95       	lsr	r23
    1a84:	67 95       	ror	r22
    1a86:	57 95       	ror	r21
    1a88:	47 95       	ror	r20
    1a8a:	3a 95       	dec	r19
    1a8c:	d1 f7       	brne	.-12     	; 0x1a82 <get_fat+0xe8>
    1a8e:	30 2d       	mov	r19, r0
    1a90:	48 0f       	add	r20, r24
    1a92:	59 1f       	adc	r21, r25
    1a94:	6a 1f       	adc	r22, r26
    1a96:	7b 1f       	adc	r23, r27
    1a98:	ce 01       	movw	r24, r28
    1a9a:	53 da       	rcall	.-2906   	; 0xf42 <move_window>
    1a9c:	81 11       	cpse	r24, r1
    1a9e:	6d c0       	rjmp	.+218    	; 0x1b7a <get_fat+0x1e0>
    1aa0:	cc 0c       	add	r12, r12
    1aa2:	dd 1c       	adc	r13, r13
    1aa4:	ee 1c       	adc	r14, r14
    1aa6:	ff 1c       	adc	r15, r15
    1aa8:	e8 94       	clt
    1aaa:	c0 f8       	bld	r12, 0
    1aac:	83 e0       	ldi	r24, 0x03	; 3
    1aae:	d8 22       	and	r13, r24
    1ab0:	ee 24       	eor	r14, r14
    1ab2:	ff 24       	eor	r15, r15
    1ab4:	fe 01       	movw	r30, r28
    1ab6:	ec 0d       	add	r30, r12
    1ab8:	fd 1d       	adc	r31, r13
    1aba:	66 a5       	ldd	r22, Z+46	; 0x2e
    1abc:	87 a5       	ldd	r24, Z+47	; 0x2f
    1abe:	70 e0       	ldi	r23, 0x00	; 0
    1ac0:	78 2b       	or	r23, r24
    1ac2:	80 e0       	ldi	r24, 0x00	; 0
    1ac4:	90 e0       	ldi	r25, 0x00	; 0
    1ac6:	60 c0       	rjmp	.+192    	; 0x1b88 <get_fat+0x1ee>
    1ac8:	45 2f       	mov	r20, r21
    1aca:	56 2f       	mov	r21, r22
    1acc:	67 2f       	mov	r22, r23
    1ace:	77 27       	eor	r23, r23
    1ad0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1ad2:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1ad4:	a8 a1       	ldd	r26, Y+32	; 0x20
    1ad6:	b9 a1       	ldd	r27, Y+33	; 0x21
    1ad8:	48 0f       	add	r20, r24
    1ada:	59 1f       	adc	r21, r25
    1adc:	6a 1f       	adc	r22, r26
    1ade:	7b 1f       	adc	r23, r27
    1ae0:	ce 01       	movw	r24, r28
    1ae2:	2f da       	rcall	.-2978   	; 0xf42 <move_window>
    1ae4:	81 11       	cpse	r24, r1
    1ae6:	4d c0       	rjmp	.+154    	; 0x1b82 <get_fat+0x1e8>
    1ae8:	cc 0c       	add	r12, r12
    1aea:	dd 1c       	adc	r13, r13
    1aec:	ee 1c       	adc	r14, r14
    1aee:	ff 1c       	adc	r15, r15
    1af0:	cc 0c       	add	r12, r12
    1af2:	dd 1c       	adc	r13, r13
    1af4:	ee 1c       	adc	r14, r14
    1af6:	ff 1c       	adc	r15, r15
    1af8:	8c ef       	ldi	r24, 0xFC	; 252
    1afa:	c8 22       	and	r12, r24
    1afc:	83 e0       	ldi	r24, 0x03	; 3
    1afe:	d8 22       	and	r13, r24
    1b00:	ee 24       	eor	r14, r14
    1b02:	ff 24       	eor	r15, r15
    1b04:	f6 01       	movw	r30, r12
    1b06:	be 96       	adiw	r30, 0x2e	; 46
    1b08:	ec 0f       	add	r30, r28
    1b0a:	fd 1f       	adc	r31, r29
    1b0c:	22 81       	ldd	r18, Z+2	; 0x02
    1b0e:	63 81       	ldd	r22, Z+3	; 0x03
    1b10:	86 2f       	mov	r24, r22
    1b12:	90 e0       	ldi	r25, 0x00	; 0
    1b14:	a0 e0       	ldi	r26, 0x00	; 0
    1b16:	b0 e0       	ldi	r27, 0x00	; 0
    1b18:	b8 2f       	mov	r27, r24
    1b1a:	aa 27       	eor	r26, r26
    1b1c:	99 27       	eor	r25, r25
    1b1e:	88 27       	eor	r24, r24
    1b20:	ac 01       	movw	r20, r24
    1b22:	bd 01       	movw	r22, r26
    1b24:	62 2b       	or	r22, r18
    1b26:	81 81       	ldd	r24, Z+1	; 0x01
    1b28:	90 e0       	ldi	r25, 0x00	; 0
    1b2a:	98 2f       	mov	r25, r24
    1b2c:	88 27       	eor	r24, r24
    1b2e:	a0 e0       	ldi	r26, 0x00	; 0
    1b30:	b0 e0       	ldi	r27, 0x00	; 0
    1b32:	84 2b       	or	r24, r20
    1b34:	95 2b       	or	r25, r21
    1b36:	a6 2b       	or	r26, r22
    1b38:	b7 2b       	or	r27, r23
    1b3a:	fe 01       	movw	r30, r28
    1b3c:	ec 0d       	add	r30, r12
    1b3e:	fd 1d       	adc	r31, r13
    1b40:	26 a5       	ldd	r18, Z+46	; 0x2e
    1b42:	82 2b       	or	r24, r18
    1b44:	bc 01       	movw	r22, r24
    1b46:	cd 01       	movw	r24, r26
    1b48:	9f 70       	andi	r25, 0x0F	; 15
    1b4a:	1e c0       	rjmp	.+60     	; 0x1b88 <get_fat+0x1ee>
    1b4c:	61 e0       	ldi	r22, 0x01	; 1
    1b4e:	70 e0       	ldi	r23, 0x00	; 0
    1b50:	80 e0       	ldi	r24, 0x00	; 0
    1b52:	90 e0       	ldi	r25, 0x00	; 0
    1b54:	19 c0       	rjmp	.+50     	; 0x1b88 <get_fat+0x1ee>
    1b56:	61 e0       	ldi	r22, 0x01	; 1
    1b58:	70 e0       	ldi	r23, 0x00	; 0
    1b5a:	80 e0       	ldi	r24, 0x00	; 0
    1b5c:	90 e0       	ldi	r25, 0x00	; 0
    1b5e:	14 c0       	rjmp	.+40     	; 0x1b88 <get_fat+0x1ee>
    1b60:	61 e0       	ldi	r22, 0x01	; 1
    1b62:	70 e0       	ldi	r23, 0x00	; 0
    1b64:	80 e0       	ldi	r24, 0x00	; 0
    1b66:	90 e0       	ldi	r25, 0x00	; 0
    1b68:	0f c0       	rjmp	.+30     	; 0x1b88 <get_fat+0x1ee>
    1b6a:	6f ef       	ldi	r22, 0xFF	; 255
    1b6c:	7f ef       	ldi	r23, 0xFF	; 255
    1b6e:	cb 01       	movw	r24, r22
    1b70:	0b c0       	rjmp	.+22     	; 0x1b88 <get_fat+0x1ee>
    1b72:	6f ef       	ldi	r22, 0xFF	; 255
    1b74:	7f ef       	ldi	r23, 0xFF	; 255
    1b76:	cb 01       	movw	r24, r22
    1b78:	07 c0       	rjmp	.+14     	; 0x1b88 <get_fat+0x1ee>
    1b7a:	6f ef       	ldi	r22, 0xFF	; 255
    1b7c:	7f ef       	ldi	r23, 0xFF	; 255
    1b7e:	cb 01       	movw	r24, r22
    1b80:	03 c0       	rjmp	.+6      	; 0x1b88 <get_fat+0x1ee>
    1b82:	6f ef       	ldi	r22, 0xFF	; 255
    1b84:	7f ef       	ldi	r23, 0xFF	; 255
    1b86:	cb 01       	movw	r24, r22
    1b88:	df 91       	pop	r29
    1b8a:	cf 91       	pop	r28
    1b8c:	1f 91       	pop	r17
    1b8e:	0f 91       	pop	r16
    1b90:	ff 90       	pop	r15
    1b92:	ef 90       	pop	r14
    1b94:	df 90       	pop	r13
    1b96:	cf 90       	pop	r12
    1b98:	bf 90       	pop	r11
    1b9a:	af 90       	pop	r10
    1b9c:	08 95       	ret

00001b9e <dir_sdi>:
    1b9e:	af 92       	push	r10
    1ba0:	bf 92       	push	r11
    1ba2:	cf 92       	push	r12
    1ba4:	df 92       	push	r13
    1ba6:	ef 92       	push	r14
    1ba8:	ff 92       	push	r15
    1baa:	0f 93       	push	r16
    1bac:	1f 93       	push	r17
    1bae:	cf 93       	push	r28
    1bb0:	df 93       	push	r29
    1bb2:	ec 01       	movw	r28, r24
    1bb4:	8b 01       	movw	r16, r22
    1bb6:	7d 83       	std	Y+5, r23	; 0x05
    1bb8:	6c 83       	std	Y+4, r22	; 0x04
    1bba:	ce 80       	ldd	r12, Y+6	; 0x06
    1bbc:	df 80       	ldd	r13, Y+7	; 0x07
    1bbe:	e8 84       	ldd	r14, Y+8	; 0x08
    1bc0:	f9 84       	ldd	r15, Y+9	; 0x09
    1bc2:	81 e0       	ldi	r24, 0x01	; 1
    1bc4:	c8 16       	cp	r12, r24
    1bc6:	d1 04       	cpc	r13, r1
    1bc8:	e1 04       	cpc	r14, r1
    1bca:	f1 04       	cpc	r15, r1
    1bcc:	09 f4       	brne	.+2      	; 0x1bd0 <dir_sdi+0x32>
    1bce:	8c c0       	rjmp	.+280    	; 0x1ce8 <dir_sdi+0x14a>
    1bd0:	e8 81       	ld	r30, Y
    1bd2:	f9 81       	ldd	r31, Y+1	; 0x01
    1bd4:	82 89       	ldd	r24, Z+18	; 0x12
    1bd6:	93 89       	ldd	r25, Z+19	; 0x13
    1bd8:	a4 89       	ldd	r26, Z+20	; 0x14
    1bda:	b5 89       	ldd	r27, Z+21	; 0x15
    1bdc:	c8 16       	cp	r12, r24
    1bde:	d9 06       	cpc	r13, r25
    1be0:	ea 06       	cpc	r14, r26
    1be2:	fb 06       	cpc	r15, r27
    1be4:	08 f0       	brcs	.+2      	; 0x1be8 <dir_sdi+0x4a>
    1be6:	82 c0       	rjmp	.+260    	; 0x1cec <dir_sdi+0x14e>
    1be8:	c1 14       	cp	r12, r1
    1bea:	d1 04       	cpc	r13, r1
    1bec:	e1 04       	cpc	r14, r1
    1bee:	f1 04       	cpc	r15, r1
    1bf0:	c1 f4       	brne	.+48     	; 0x1c22 <dir_sdi+0x84>
    1bf2:	80 81       	ld	r24, Z
    1bf4:	83 30       	cpi	r24, 0x03	; 3
    1bf6:	41 f4       	brne	.+16     	; 0x1c08 <dir_sdi+0x6a>
    1bf8:	82 a1       	ldd	r24, Z+34	; 0x22
    1bfa:	93 a1       	ldd	r25, Z+35	; 0x23
    1bfc:	a4 a1       	ldd	r26, Z+36	; 0x24
    1bfe:	b5 a1       	ldd	r27, Z+37	; 0x25
    1c00:	00 97       	sbiw	r24, 0x00	; 0
    1c02:	a1 05       	cpc	r26, r1
    1c04:	b1 05       	cpc	r27, r1
    1c06:	59 f4       	brne	.+22     	; 0x1c1e <dir_sdi+0x80>
    1c08:	80 85       	ldd	r24, Z+8	; 0x08
    1c0a:	91 85       	ldd	r25, Z+9	; 0x09
    1c0c:	08 17       	cp	r16, r24
    1c0e:	19 07       	cpc	r17, r25
    1c10:	08 f0       	brcs	.+2      	; 0x1c14 <dir_sdi+0x76>
    1c12:	6e c0       	rjmp	.+220    	; 0x1cf0 <dir_sdi+0x152>
    1c14:	62 a1       	ldd	r22, Z+34	; 0x22
    1c16:	73 a1       	ldd	r23, Z+35	; 0x23
    1c18:	84 a1       	ldd	r24, Z+36	; 0x24
    1c1a:	95 a1       	ldd	r25, Z+37	; 0x25
    1c1c:	35 c0       	rjmp	.+106    	; 0x1c88 <dir_sdi+0xea>
    1c1e:	6c 01       	movw	r12, r24
    1c20:	7d 01       	movw	r14, r26
    1c22:	a2 80       	ldd	r10, Z+2	; 0x02
    1c24:	80 e2       	ldi	r24, 0x20	; 32
    1c26:	a8 9e       	mul	r10, r24
    1c28:	50 01       	movw	r10, r0
    1c2a:	11 24       	eor	r1, r1
    1c2c:	0a 15       	cp	r16, r10
    1c2e:	1b 05       	cpc	r17, r11
    1c30:	30 f1       	brcs	.+76     	; 0x1c7e <dir_sdi+0xe0>
    1c32:	b7 01       	movw	r22, r14
    1c34:	a6 01       	movw	r20, r12
    1c36:	88 81       	ld	r24, Y
    1c38:	99 81       	ldd	r25, Y+1	; 0x01
    1c3a:	af de       	rcall	.-674    	; 0x199a <get_fat>
    1c3c:	6b 01       	movw	r12, r22
    1c3e:	7c 01       	movw	r14, r24
    1c40:	8f ef       	ldi	r24, 0xFF	; 255
    1c42:	c8 16       	cp	r12, r24
    1c44:	d8 06       	cpc	r13, r24
    1c46:	e8 06       	cpc	r14, r24
    1c48:	f8 06       	cpc	r15, r24
    1c4a:	09 f4       	brne	.+2      	; 0x1c4e <dir_sdi+0xb0>
    1c4c:	53 c0       	rjmp	.+166    	; 0x1cf4 <dir_sdi+0x156>
    1c4e:	82 e0       	ldi	r24, 0x02	; 2
    1c50:	c8 16       	cp	r12, r24
    1c52:	d1 04       	cpc	r13, r1
    1c54:	e1 04       	cpc	r14, r1
    1c56:	f1 04       	cpc	r15, r1
    1c58:	08 f4       	brcc	.+2      	; 0x1c5c <dir_sdi+0xbe>
    1c5a:	4e c0       	rjmp	.+156    	; 0x1cf8 <dir_sdi+0x15a>
    1c5c:	e8 81       	ld	r30, Y
    1c5e:	f9 81       	ldd	r31, Y+1	; 0x01
    1c60:	82 89       	ldd	r24, Z+18	; 0x12
    1c62:	93 89       	ldd	r25, Z+19	; 0x13
    1c64:	a4 89       	ldd	r26, Z+20	; 0x14
    1c66:	b5 89       	ldd	r27, Z+21	; 0x15
    1c68:	c8 16       	cp	r12, r24
    1c6a:	d9 06       	cpc	r13, r25
    1c6c:	ea 06       	cpc	r14, r26
    1c6e:	fb 06       	cpc	r15, r27
    1c70:	08 f0       	brcs	.+2      	; 0x1c74 <dir_sdi+0xd6>
    1c72:	44 c0       	rjmp	.+136    	; 0x1cfc <dir_sdi+0x15e>
    1c74:	0a 19       	sub	r16, r10
    1c76:	1b 09       	sbc	r17, r11
    1c78:	0a 15       	cp	r16, r10
    1c7a:	1b 05       	cpc	r17, r11
    1c7c:	d0 f6       	brcc	.-76     	; 0x1c32 <dir_sdi+0x94>
    1c7e:	b7 01       	movw	r22, r14
    1c80:	a6 01       	movw	r20, r12
    1c82:	88 81       	ld	r24, Y
    1c84:	99 81       	ldd	r25, Y+1	; 0x01
    1c86:	5b de       	rcall	.-842    	; 0x193e <clust2sect>
    1c88:	ca 86       	std	Y+10, r12	; 0x0a
    1c8a:	db 86       	std	Y+11, r13	; 0x0b
    1c8c:	ec 86       	std	Y+12, r14	; 0x0c
    1c8e:	fd 86       	std	Y+13, r15	; 0x0d
    1c90:	61 15       	cp	r22, r1
    1c92:	71 05       	cpc	r23, r1
    1c94:	81 05       	cpc	r24, r1
    1c96:	91 05       	cpc	r25, r1
    1c98:	99 f1       	breq	.+102    	; 0x1d00 <dir_sdi+0x162>
    1c9a:	98 01       	movw	r18, r16
    1c9c:	36 95       	lsr	r19
    1c9e:	27 95       	ror	r18
    1ca0:	32 95       	swap	r19
    1ca2:	22 95       	swap	r18
    1ca4:	2f 70       	andi	r18, 0x0F	; 15
    1ca6:	23 27       	eor	r18, r19
    1ca8:	3f 70       	andi	r19, 0x0F	; 15
    1caa:	23 27       	eor	r18, r19
    1cac:	dc 01       	movw	r26, r24
    1cae:	cb 01       	movw	r24, r22
    1cb0:	82 0f       	add	r24, r18
    1cb2:	93 1f       	adc	r25, r19
    1cb4:	a1 1d       	adc	r26, r1
    1cb6:	b1 1d       	adc	r27, r1
    1cb8:	8e 87       	std	Y+14, r24	; 0x0e
    1cba:	9f 87       	std	Y+15, r25	; 0x0f
    1cbc:	a8 8b       	std	Y+16, r26	; 0x10
    1cbe:	b9 8b       	std	Y+17, r27	; 0x11
    1cc0:	0f 71       	andi	r16, 0x1F	; 31
    1cc2:	11 27       	eor	r17, r17
    1cc4:	00 0f       	add	r16, r16
    1cc6:	11 1f       	adc	r17, r17
    1cc8:	02 95       	swap	r16
    1cca:	12 95       	swap	r17
    1ccc:	10 7f       	andi	r17, 0xF0	; 240
    1cce:	10 27       	eor	r17, r16
    1cd0:	00 7f       	andi	r16, 0xF0	; 240
    1cd2:	10 27       	eor	r17, r16
    1cd4:	02 5d       	subi	r16, 0xD2	; 210
    1cd6:	1f 4f       	sbci	r17, 0xFF	; 255
    1cd8:	88 81       	ld	r24, Y
    1cda:	99 81       	ldd	r25, Y+1	; 0x01
    1cdc:	80 0f       	add	r24, r16
    1cde:	91 1f       	adc	r25, r17
    1ce0:	9b 8b       	std	Y+19, r25	; 0x13
    1ce2:	8a 8b       	std	Y+18, r24	; 0x12
    1ce4:	80 e0       	ldi	r24, 0x00	; 0
    1ce6:	0d c0       	rjmp	.+26     	; 0x1d02 <dir_sdi+0x164>
    1ce8:	82 e0       	ldi	r24, 0x02	; 2
    1cea:	0b c0       	rjmp	.+22     	; 0x1d02 <dir_sdi+0x164>
    1cec:	82 e0       	ldi	r24, 0x02	; 2
    1cee:	09 c0       	rjmp	.+18     	; 0x1d02 <dir_sdi+0x164>
    1cf0:	82 e0       	ldi	r24, 0x02	; 2
    1cf2:	07 c0       	rjmp	.+14     	; 0x1d02 <dir_sdi+0x164>
    1cf4:	81 e0       	ldi	r24, 0x01	; 1
    1cf6:	05 c0       	rjmp	.+10     	; 0x1d02 <dir_sdi+0x164>
    1cf8:	82 e0       	ldi	r24, 0x02	; 2
    1cfa:	03 c0       	rjmp	.+6      	; 0x1d02 <dir_sdi+0x164>
    1cfc:	82 e0       	ldi	r24, 0x02	; 2
    1cfe:	01 c0       	rjmp	.+2      	; 0x1d02 <dir_sdi+0x164>
    1d00:	82 e0       	ldi	r24, 0x02	; 2
    1d02:	df 91       	pop	r29
    1d04:	cf 91       	pop	r28
    1d06:	1f 91       	pop	r17
    1d08:	0f 91       	pop	r16
    1d0a:	ff 90       	pop	r15
    1d0c:	ef 90       	pop	r14
    1d0e:	df 90       	pop	r13
    1d10:	cf 90       	pop	r12
    1d12:	bf 90       	pop	r11
    1d14:	af 90       	pop	r10
    1d16:	08 95       	ret

00001d18 <put_fat>:
    1d18:	4f 92       	push	r4
    1d1a:	5f 92       	push	r5
    1d1c:	6f 92       	push	r6
    1d1e:	7f 92       	push	r7
    1d20:	8f 92       	push	r8
    1d22:	9f 92       	push	r9
    1d24:	af 92       	push	r10
    1d26:	bf 92       	push	r11
    1d28:	cf 92       	push	r12
    1d2a:	df 92       	push	r13
    1d2c:	ef 92       	push	r14
    1d2e:	ff 92       	push	r15
    1d30:	0f 93       	push	r16
    1d32:	1f 93       	push	r17
    1d34:	cf 93       	push	r28
    1d36:	df 93       	push	r29
    1d38:	ec 01       	movw	r28, r24
    1d3a:	6a 01       	movw	r12, r20
    1d3c:	7b 01       	movw	r14, r22
    1d3e:	28 01       	movw	r4, r16
    1d40:	39 01       	movw	r6, r18
    1d42:	42 30       	cpi	r20, 0x02	; 2
    1d44:	51 05       	cpc	r21, r1
    1d46:	61 05       	cpc	r22, r1
    1d48:	71 05       	cpc	r23, r1
    1d4a:	08 f4       	brcc	.+2      	; 0x1d4e <put_fat+0x36>
    1d4c:	dc c0       	rjmp	.+440    	; 0x1f06 <put_fat+0x1ee>
    1d4e:	8a 89       	ldd	r24, Y+18	; 0x12
    1d50:	9b 89       	ldd	r25, Y+19	; 0x13
    1d52:	ac 89       	ldd	r26, Y+20	; 0x14
    1d54:	bd 89       	ldd	r27, Y+21	; 0x15
    1d56:	48 17       	cp	r20, r24
    1d58:	59 07       	cpc	r21, r25
    1d5a:	6a 07       	cpc	r22, r26
    1d5c:	7b 07       	cpc	r23, r27
    1d5e:	08 f0       	brcs	.+2      	; 0x1d62 <put_fat+0x4a>
    1d60:	d4 c0       	rjmp	.+424    	; 0x1f0a <put_fat+0x1f2>
    1d62:	88 81       	ld	r24, Y
    1d64:	82 30       	cpi	r24, 0x02	; 2
    1d66:	09 f4       	brne	.+2      	; 0x1d6a <put_fat+0x52>
    1d68:	65 c0       	rjmp	.+202    	; 0x1e34 <put_fat+0x11c>
    1d6a:	83 30       	cpi	r24, 0x03	; 3
    1d6c:	09 f4       	brne	.+2      	; 0x1d70 <put_fat+0x58>
    1d6e:	8d c0       	rjmp	.+282    	; 0x1e8a <put_fat+0x172>
    1d70:	81 30       	cpi	r24, 0x01	; 1
    1d72:	09 f0       	breq	.+2      	; 0x1d76 <put_fat+0x5e>
    1d74:	cc c0       	rjmp	.+408    	; 0x1f0e <put_fat+0x1f6>
    1d76:	5a 01       	movw	r10, r20
    1d78:	b6 94       	lsr	r11
    1d7a:	a7 94       	ror	r10
    1d7c:	a4 0e       	add	r10, r20
    1d7e:	b5 1e       	adc	r11, r21
    1d80:	c5 01       	movw	r24, r10
    1d82:	89 2f       	mov	r24, r25
    1d84:	99 27       	eor	r25, r25
    1d86:	86 95       	lsr	r24
    1d88:	86 95       	lsr	r24
    1d8a:	4e 8d       	ldd	r20, Y+30	; 0x1e
    1d8c:	5f 8d       	ldd	r21, Y+31	; 0x1f
    1d8e:	68 a1       	ldd	r22, Y+32	; 0x20
    1d90:	79 a1       	ldd	r23, Y+33	; 0x21
    1d92:	48 0f       	add	r20, r24
    1d94:	59 1f       	adc	r21, r25
    1d96:	61 1d       	adc	r22, r1
    1d98:	71 1d       	adc	r23, r1
    1d9a:	ce 01       	movw	r24, r28
    1d9c:	d2 d8       	rcall	.-3676   	; 0xf42 <move_window>
    1d9e:	18 2f       	mov	r17, r24
    1da0:	81 11       	cpse	r24, r1
    1da2:	d3 c0       	rjmp	.+422    	; 0x1f4a <put_fat+0x232>
    1da4:	45 01       	movw	r8, r10
    1da6:	8f ef       	ldi	r24, 0xFF	; 255
    1da8:	88 1a       	sub	r8, r24
    1daa:	98 0a       	sbc	r9, r24
    1dac:	a3 e0       	ldi	r26, 0x03	; 3
    1dae:	ba 22       	and	r11, r26
    1db0:	c0 fe       	sbrs	r12, 0
    1db2:	21 c0       	rjmp	.+66     	; 0x1df6 <put_fat+0xde>
    1db4:	fe 01       	movw	r30, r28
    1db6:	ea 0d       	add	r30, r10
    1db8:	fb 1d       	adc	r31, r11
    1dba:	86 a5       	ldd	r24, Z+46	; 0x2e
    1dbc:	28 2f       	mov	r18, r24
    1dbe:	2f 70       	andi	r18, 0x0F	; 15
    1dc0:	b0 e1       	ldi	r27, 0x10	; 16
    1dc2:	4b 9e       	mul	r4, r27
    1dc4:	c0 01       	movw	r24, r0
    1dc6:	11 24       	eor	r1, r1
    1dc8:	82 2b       	or	r24, r18
    1dca:	86 a7       	std	Z+46, r24	; 0x2e
    1dcc:	81 e0       	ldi	r24, 0x01	; 1
    1dce:	8c 83       	std	Y+4, r24	; 0x04
    1dd0:	4e 8d       	ldd	r20, Y+30	; 0x1e
    1dd2:	5f 8d       	ldd	r21, Y+31	; 0x1f
    1dd4:	68 a1       	ldd	r22, Y+32	; 0x20
    1dd6:	79 a1       	ldd	r23, Y+33	; 0x21
    1dd8:	c4 01       	movw	r24, r8
    1dda:	89 2f       	mov	r24, r25
    1ddc:	99 27       	eor	r25, r25
    1dde:	86 95       	lsr	r24
    1de0:	86 95       	lsr	r24
    1de2:	48 0f       	add	r20, r24
    1de4:	59 1f       	adc	r21, r25
    1de6:	61 1d       	adc	r22, r1
    1de8:	71 1d       	adc	r23, r1
    1dea:	ce 01       	movw	r24, r28
    1dec:	aa d8       	rcall	.-3756   	; 0xf42 <move_window>
    1dee:	88 23       	and	r24, r24
    1df0:	09 f4       	brne	.+2      	; 0x1df4 <put_fat+0xdc>
    1df2:	93 c0       	rjmp	.+294    	; 0x1f1a <put_fat+0x202>
    1df4:	8e c0       	rjmp	.+284    	; 0x1f12 <put_fat+0x1fa>
    1df6:	fe 01       	movw	r30, r28
    1df8:	ea 0d       	add	r30, r10
    1dfa:	fb 1d       	adc	r31, r11
    1dfc:	46 a6       	std	Z+46, r4	; 0x2e
    1dfe:	81 e0       	ldi	r24, 0x01	; 1
    1e00:	8c 83       	std	Y+4, r24	; 0x04
    1e02:	4e 8d       	ldd	r20, Y+30	; 0x1e
    1e04:	5f 8d       	ldd	r21, Y+31	; 0x1f
    1e06:	68 a1       	ldd	r22, Y+32	; 0x20
    1e08:	79 a1       	ldd	r23, Y+33	; 0x21
    1e0a:	c4 01       	movw	r24, r8
    1e0c:	89 2f       	mov	r24, r25
    1e0e:	99 27       	eor	r25, r25
    1e10:	86 95       	lsr	r24
    1e12:	86 95       	lsr	r24
    1e14:	48 0f       	add	r20, r24
    1e16:	59 1f       	adc	r21, r25
    1e18:	61 1d       	adc	r22, r1
    1e1a:	71 1d       	adc	r23, r1
    1e1c:	ce 01       	movw	r24, r28
    1e1e:	91 d8       	rcall	.-3806   	; 0xf42 <move_window>
    1e20:	88 23       	and	r24, r24
    1e22:	09 f4       	brne	.+2      	; 0x1e26 <put_fat+0x10e>
    1e24:	85 c0       	rjmp	.+266    	; 0x1f30 <put_fat+0x218>
    1e26:	77 c0       	rjmp	.+238    	; 0x1f16 <put_fat+0x1fe>
    1e28:	ec 0f       	add	r30, r28
    1e2a:	fd 1f       	adc	r31, r29
    1e2c:	46 a6       	std	Z+46, r4	; 0x2e
    1e2e:	81 e0       	ldi	r24, 0x01	; 1
    1e30:	8c 83       	std	Y+4, r24	; 0x04
    1e32:	8b c0       	rjmp	.+278    	; 0x1f4a <put_fat+0x232>
    1e34:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1e36:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1e38:	a8 a1       	ldd	r26, Y+32	; 0x20
    1e3a:	b9 a1       	ldd	r27, Y+33	; 0x21
    1e3c:	03 2e       	mov	r0, r19
    1e3e:	39 e0       	ldi	r19, 0x09	; 9
    1e40:	76 95       	lsr	r23
    1e42:	67 95       	ror	r22
    1e44:	57 95       	ror	r21
    1e46:	47 95       	ror	r20
    1e48:	3a 95       	dec	r19
    1e4a:	d1 f7       	brne	.-12     	; 0x1e40 <put_fat+0x128>
    1e4c:	30 2d       	mov	r19, r0
    1e4e:	48 0f       	add	r20, r24
    1e50:	59 1f       	adc	r21, r25
    1e52:	6a 1f       	adc	r22, r26
    1e54:	7b 1f       	adc	r23, r27
    1e56:	ce 01       	movw	r24, r28
    1e58:	74 d8       	rcall	.-3864   	; 0xf42 <move_window>
    1e5a:	18 2f       	mov	r17, r24
    1e5c:	81 11       	cpse	r24, r1
    1e5e:	75 c0       	rjmp	.+234    	; 0x1f4a <put_fat+0x232>
    1e60:	cc 0c       	add	r12, r12
    1e62:	dd 1c       	adc	r13, r13
    1e64:	ee 1c       	adc	r14, r14
    1e66:	ff 1c       	adc	r15, r15
    1e68:	e8 94       	clt
    1e6a:	c0 f8       	bld	r12, 0
    1e6c:	33 e0       	ldi	r19, 0x03	; 3
    1e6e:	d3 22       	and	r13, r19
    1e70:	ee 24       	eor	r14, r14
    1e72:	ff 24       	eor	r15, r15
    1e74:	fe 01       	movw	r30, r28
    1e76:	ec 0d       	add	r30, r12
    1e78:	fd 1d       	adc	r31, r13
    1e7a:	46 a6       	std	Z+46, r4	; 0x2e
    1e7c:	fe 01       	movw	r30, r28
    1e7e:	ec 0d       	add	r30, r12
    1e80:	fd 1d       	adc	r31, r13
    1e82:	57 a6       	std	Z+47, r5	; 0x2f
    1e84:	81 e0       	ldi	r24, 0x01	; 1
    1e86:	8c 83       	std	Y+4, r24	; 0x04
    1e88:	60 c0       	rjmp	.+192    	; 0x1f4a <put_fat+0x232>
    1e8a:	45 2f       	mov	r20, r21
    1e8c:	56 2f       	mov	r21, r22
    1e8e:	67 2f       	mov	r22, r23
    1e90:	77 27       	eor	r23, r23
    1e92:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1e94:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1e96:	a8 a1       	ldd	r26, Y+32	; 0x20
    1e98:	b9 a1       	ldd	r27, Y+33	; 0x21
    1e9a:	48 0f       	add	r20, r24
    1e9c:	59 1f       	adc	r21, r25
    1e9e:	6a 1f       	adc	r22, r26
    1ea0:	7b 1f       	adc	r23, r27
    1ea2:	ce 01       	movw	r24, r28
    1ea4:	4e d8       	rcall	.-3940   	; 0xf42 <move_window>
    1ea6:	18 2f       	mov	r17, r24
    1ea8:	81 11       	cpse	r24, r1
    1eaa:	4f c0       	rjmp	.+158    	; 0x1f4a <put_fat+0x232>
    1eac:	cc 0c       	add	r12, r12
    1eae:	dd 1c       	adc	r13, r13
    1eb0:	ee 1c       	adc	r14, r14
    1eb2:	ff 1c       	adc	r15, r15
    1eb4:	cc 0c       	add	r12, r12
    1eb6:	dd 1c       	adc	r13, r13
    1eb8:	ee 1c       	adc	r14, r14
    1eba:	ff 1c       	adc	r15, r15
    1ebc:	8c ef       	ldi	r24, 0xFC	; 252
    1ebe:	c8 22       	and	r12, r24
    1ec0:	83 e0       	ldi	r24, 0x03	; 3
    1ec2:	d8 22       	and	r13, r24
    1ec4:	ee 24       	eor	r14, r14
    1ec6:	ff 24       	eor	r15, r15
    1ec8:	f6 01       	movw	r30, r12
    1eca:	be 96       	adiw	r30, 0x2e	; 46
    1ecc:	ec 0f       	add	r30, r28
    1ece:	fd 1f       	adc	r31, r29
    1ed0:	83 81       	ldd	r24, Z+3	; 0x03
    1ed2:	90 e0       	ldi	r25, 0x00	; 0
    1ed4:	a0 e0       	ldi	r26, 0x00	; 0
    1ed6:	b0 e0       	ldi	r27, 0x00	; 0
    1ed8:	b8 2f       	mov	r27, r24
    1eda:	aa 27       	eor	r26, r26
    1edc:	99 27       	eor	r25, r25
    1ede:	88 27       	eor	r24, r24
    1ee0:	cc 0e       	add	r12, r28
    1ee2:	dd 1e       	adc	r13, r29
    1ee4:	88 27       	eor	r24, r24
    1ee6:	99 27       	eor	r25, r25
    1ee8:	aa 27       	eor	r26, r26
    1eea:	b0 7f       	andi	r27, 0xF0	; 240
    1eec:	48 2a       	or	r4, r24
    1eee:	59 2a       	or	r5, r25
    1ef0:	6a 2a       	or	r6, r26
    1ef2:	7b 2a       	or	r7, r27
    1ef4:	d6 01       	movw	r26, r12
    1ef6:	9e 96       	adiw	r26, 0x2e	; 46
    1ef8:	4c 92       	st	X, r4
    1efa:	51 82       	std	Z+1, r5	; 0x01
    1efc:	62 82       	std	Z+2, r6	; 0x02
    1efe:	73 82       	std	Z+3, r7	; 0x03
    1f00:	81 e0       	ldi	r24, 0x01	; 1
    1f02:	8c 83       	std	Y+4, r24	; 0x04
    1f04:	22 c0       	rjmp	.+68     	; 0x1f4a <put_fat+0x232>
    1f06:	12 e0       	ldi	r17, 0x02	; 2
    1f08:	20 c0       	rjmp	.+64     	; 0x1f4a <put_fat+0x232>
    1f0a:	12 e0       	ldi	r17, 0x02	; 2
    1f0c:	1e c0       	rjmp	.+60     	; 0x1f4a <put_fat+0x232>
    1f0e:	12 e0       	ldi	r17, 0x02	; 2
    1f10:	1c c0       	rjmp	.+56     	; 0x1f4a <put_fat+0x232>
    1f12:	18 2f       	mov	r17, r24
    1f14:	1a c0       	rjmp	.+52     	; 0x1f4a <put_fat+0x232>
    1f16:	18 2f       	mov	r17, r24
    1f18:	18 c0       	rjmp	.+48     	; 0x1f4a <put_fat+0x232>
    1f1a:	f4 01       	movw	r30, r8
    1f1c:	f3 70       	andi	r31, 0x03	; 3
    1f1e:	68 94       	set
    1f20:	13 f8       	bld	r1, 3
    1f22:	76 94       	lsr	r7
    1f24:	67 94       	ror	r6
    1f26:	57 94       	ror	r5
    1f28:	47 94       	ror	r4
    1f2a:	16 94       	lsr	r1
    1f2c:	d1 f7       	brne	.-12     	; 0x1f22 <put_fat+0x20a>
    1f2e:	7c cf       	rjmp	.-264    	; 0x1e28 <put_fat+0x110>
    1f30:	f4 01       	movw	r30, r8
    1f32:	f3 70       	andi	r31, 0x03	; 3
    1f34:	de 01       	movw	r26, r28
    1f36:	ae 0f       	add	r26, r30
    1f38:	bf 1f       	adc	r27, r31
    1f3a:	9e 96       	adiw	r26, 0x2e	; 46
    1f3c:	9c 91       	ld	r25, X
    1f3e:	90 7f       	andi	r25, 0xF0	; 240
    1f40:	85 2d       	mov	r24, r5
    1f42:	8f 70       	andi	r24, 0x0F	; 15
    1f44:	49 2e       	mov	r4, r25
    1f46:	48 2a       	or	r4, r24
    1f48:	6f cf       	rjmp	.-290    	; 0x1e28 <put_fat+0x110>
    1f4a:	81 2f       	mov	r24, r17
    1f4c:	df 91       	pop	r29
    1f4e:	cf 91       	pop	r28
    1f50:	1f 91       	pop	r17
    1f52:	0f 91       	pop	r16
    1f54:	ff 90       	pop	r15
    1f56:	ef 90       	pop	r14
    1f58:	df 90       	pop	r13
    1f5a:	cf 90       	pop	r12
    1f5c:	bf 90       	pop	r11
    1f5e:	af 90       	pop	r10
    1f60:	9f 90       	pop	r9
    1f62:	8f 90       	pop	r8
    1f64:	7f 90       	pop	r7
    1f66:	6f 90       	pop	r6
    1f68:	5f 90       	pop	r5
    1f6a:	4f 90       	pop	r4
    1f6c:	08 95       	ret

00001f6e <create_chain>:
    1f6e:	2f 92       	push	r2
    1f70:	3f 92       	push	r3
    1f72:	4f 92       	push	r4
    1f74:	5f 92       	push	r5
    1f76:	6f 92       	push	r6
    1f78:	7f 92       	push	r7
    1f7a:	8f 92       	push	r8
    1f7c:	9f 92       	push	r9
    1f7e:	af 92       	push	r10
    1f80:	bf 92       	push	r11
    1f82:	cf 92       	push	r12
    1f84:	df 92       	push	r13
    1f86:	ef 92       	push	r14
    1f88:	ff 92       	push	r15
    1f8a:	0f 93       	push	r16
    1f8c:	1f 93       	push	r17
    1f8e:	cf 93       	push	r28
    1f90:	df 93       	push	r29
    1f92:	ec 01       	movw	r28, r24
    1f94:	2a 01       	movw	r4, r20
    1f96:	3b 01       	movw	r6, r22
    1f98:	41 15       	cp	r20, r1
    1f9a:	51 05       	cpc	r21, r1
    1f9c:	61 05       	cpc	r22, r1
    1f9e:	71 05       	cpc	r23, r1
    1fa0:	b9 f4       	brne	.+46     	; 0x1fd0 <create_chain+0x62>
    1fa2:	8a 84       	ldd	r8, Y+10	; 0x0a
    1fa4:	9b 84       	ldd	r9, Y+11	; 0x0b
    1fa6:	ac 84       	ldd	r10, Y+12	; 0x0c
    1fa8:	bd 84       	ldd	r11, Y+13	; 0x0d
    1faa:	81 14       	cp	r8, r1
    1fac:	91 04       	cpc	r9, r1
    1fae:	a1 04       	cpc	r10, r1
    1fb0:	b1 04       	cpc	r11, r1
    1fb2:	59 f1       	breq	.+86     	; 0x200a <create_chain+0x9c>
    1fb4:	8a 89       	ldd	r24, Y+18	; 0x12
    1fb6:	9b 89       	ldd	r25, Y+19	; 0x13
    1fb8:	ac 89       	ldd	r26, Y+20	; 0x14
    1fba:	bd 89       	ldd	r27, Y+21	; 0x15
    1fbc:	88 16       	cp	r8, r24
    1fbe:	99 06       	cpc	r9, r25
    1fc0:	aa 06       	cpc	r10, r26
    1fc2:	bb 06       	cpc	r11, r27
    1fc4:	30 f1       	brcs	.+76     	; 0x2012 <create_chain+0xa4>
    1fc6:	81 2c       	mov	r8, r1
    1fc8:	91 2c       	mov	r9, r1
    1fca:	54 01       	movw	r10, r8
    1fcc:	83 94       	inc	r8
    1fce:	21 c0       	rjmp	.+66     	; 0x2012 <create_chain+0xa4>
    1fd0:	e4 dc       	rcall	.-1592   	; 0x199a <get_fat>
    1fd2:	6b 01       	movw	r12, r22
    1fd4:	7c 01       	movw	r14, r24
    1fd6:	62 30       	cpi	r22, 0x02	; 2
    1fd8:	71 05       	cpc	r23, r1
    1fda:	81 05       	cpc	r24, r1
    1fdc:	91 05       	cpc	r25, r1
    1fde:	08 f4       	brcc	.+2      	; 0x1fe2 <create_chain+0x74>
    1fe0:	96 c0       	rjmp	.+300    	; 0x210e <create_chain+0x1a0>
    1fe2:	8f ef       	ldi	r24, 0xFF	; 255
    1fe4:	c8 16       	cp	r12, r24
    1fe6:	d8 06       	cpc	r13, r24
    1fe8:	e8 06       	cpc	r14, r24
    1fea:	f8 06       	cpc	r15, r24
    1fec:	09 f4       	brne	.+2      	; 0x1ff0 <create_chain+0x82>
    1fee:	94 c0       	rjmp	.+296    	; 0x2118 <create_chain+0x1aa>
    1ff0:	8a 89       	ldd	r24, Y+18	; 0x12
    1ff2:	9b 89       	ldd	r25, Y+19	; 0x13
    1ff4:	ac 89       	ldd	r26, Y+20	; 0x14
    1ff6:	bd 89       	ldd	r27, Y+21	; 0x15
    1ff8:	c8 16       	cp	r12, r24
    1ffa:	d9 06       	cpc	r13, r25
    1ffc:	ea 06       	cpc	r14, r26
    1ffe:	fb 06       	cpc	r15, r27
    2000:	08 f4       	brcc	.+2      	; 0x2004 <create_chain+0x96>
    2002:	8f c0       	rjmp	.+286    	; 0x2122 <create_chain+0x1b4>
    2004:	53 01       	movw	r10, r6
    2006:	42 01       	movw	r8, r4
    2008:	04 c0       	rjmp	.+8      	; 0x2012 <create_chain+0xa4>
    200a:	81 2c       	mov	r8, r1
    200c:	91 2c       	mov	r9, r1
    200e:	54 01       	movw	r10, r8
    2010:	83 94       	inc	r8
    2012:	75 01       	movw	r14, r10
    2014:	64 01       	movw	r12, r8
    2016:	68 94       	set
    2018:	22 24       	eor	r2, r2
    201a:	21 f8       	bld	r2, 1
    201c:	31 2c       	mov	r3, r1
    201e:	00 e0       	ldi	r16, 0x00	; 0
    2020:	10 e0       	ldi	r17, 0x00	; 0
    2022:	2f ef       	ldi	r18, 0xFF	; 255
    2024:	c2 1a       	sub	r12, r18
    2026:	d2 0a       	sbc	r13, r18
    2028:	e2 0a       	sbc	r14, r18
    202a:	f2 0a       	sbc	r15, r18
    202c:	8a 89       	ldd	r24, Y+18	; 0x12
    202e:	9b 89       	ldd	r25, Y+19	; 0x13
    2030:	ac 89       	ldd	r26, Y+20	; 0x14
    2032:	bd 89       	ldd	r27, Y+21	; 0x15
    2034:	c8 16       	cp	r12, r24
    2036:	d9 06       	cpc	r13, r25
    2038:	ea 06       	cpc	r14, r26
    203a:	fb 06       	cpc	r15, r27
    203c:	58 f0       	brcs	.+22     	; 0x2054 <create_chain+0xe6>
    203e:	82 e0       	ldi	r24, 0x02	; 2
    2040:	88 16       	cp	r8, r24
    2042:	91 04       	cpc	r9, r1
    2044:	a1 04       	cpc	r10, r1
    2046:	b1 04       	cpc	r11, r1
    2048:	08 f4       	brcc	.+2      	; 0x204c <create_chain+0xde>
    204a:	70 c0       	rjmp	.+224    	; 0x212c <create_chain+0x1be>
    204c:	c2 2c       	mov	r12, r2
    204e:	d3 2c       	mov	r13, r3
    2050:	e0 2e       	mov	r14, r16
    2052:	f1 2e       	mov	r15, r17
    2054:	b7 01       	movw	r22, r14
    2056:	a6 01       	movw	r20, r12
    2058:	ce 01       	movw	r24, r28
    205a:	9f dc       	rcall	.-1730   	; 0x199a <get_fat>
    205c:	61 15       	cp	r22, r1
    205e:	71 05       	cpc	r23, r1
    2060:	81 05       	cpc	r24, r1
    2062:	91 05       	cpc	r25, r1
    2064:	99 f0       	breq	.+38     	; 0x208c <create_chain+0x11e>
    2066:	6f 3f       	cpi	r22, 0xFF	; 255
    2068:	2f ef       	ldi	r18, 0xFF	; 255
    206a:	72 07       	cpc	r23, r18
    206c:	82 07       	cpc	r24, r18
    206e:	92 07       	cpc	r25, r18
    2070:	09 f4       	brne	.+2      	; 0x2074 <create_chain+0x106>
    2072:	61 c0       	rjmp	.+194    	; 0x2136 <create_chain+0x1c8>
    2074:	61 30       	cpi	r22, 0x01	; 1
    2076:	71 05       	cpc	r23, r1
    2078:	81 05       	cpc	r24, r1
    207a:	91 05       	cpc	r25, r1
    207c:	09 f4       	brne	.+2      	; 0x2080 <create_chain+0x112>
    207e:	60 c0       	rjmp	.+192    	; 0x2140 <create_chain+0x1d2>
    2080:	c8 14       	cp	r12, r8
    2082:	d9 04       	cpc	r13, r9
    2084:	ea 04       	cpc	r14, r10
    2086:	fb 04       	cpc	r15, r11
    2088:	61 f6       	brne	.-104    	; 0x2022 <create_chain+0xb4>
    208a:	5f c0       	rjmp	.+190    	; 0x214a <create_chain+0x1dc>
    208c:	8c 2c       	mov	r8, r12
    208e:	9d 2c       	mov	r9, r13
    2090:	ae 2c       	mov	r10, r14
    2092:	bf 2c       	mov	r11, r15
    2094:	0f ef       	ldi	r16, 0xFF	; 255
    2096:	1f ef       	ldi	r17, 0xFF	; 255
    2098:	2f ef       	ldi	r18, 0xFF	; 255
    209a:	3f e0       	ldi	r19, 0x0F	; 15
    209c:	b7 01       	movw	r22, r14
    209e:	a6 01       	movw	r20, r12
    20a0:	ce 01       	movw	r24, r28
    20a2:	3a de       	rcall	.-908    	; 0x1d18 <put_fat>
    20a4:	81 11       	cpse	r24, r1
    20a6:	2c c0       	rjmp	.+88     	; 0x2100 <create_chain+0x192>
    20a8:	41 14       	cp	r4, r1
    20aa:	51 04       	cpc	r5, r1
    20ac:	61 04       	cpc	r6, r1
    20ae:	71 04       	cpc	r7, r1
    20b0:	51 f0       	breq	.+20     	; 0x20c6 <create_chain+0x158>
    20b2:	0c 2d       	mov	r16, r12
    20b4:	1d 2d       	mov	r17, r13
    20b6:	2e 2d       	mov	r18, r14
    20b8:	3f 2d       	mov	r19, r15
    20ba:	b3 01       	movw	r22, r6
    20bc:	a2 01       	movw	r20, r4
    20be:	ce 01       	movw	r24, r28
    20c0:	2b de       	rcall	.-938    	; 0x1d18 <put_fat>
    20c2:	81 11       	cpse	r24, r1
    20c4:	1d c0       	rjmp	.+58     	; 0x2100 <create_chain+0x192>
    20c6:	8a 86       	std	Y+10, r8	; 0x0a
    20c8:	9b 86       	std	Y+11, r9	; 0x0b
    20ca:	ac 86       	std	Y+12, r10	; 0x0c
    20cc:	bd 86       	std	Y+13, r11	; 0x0d
    20ce:	8e 85       	ldd	r24, Y+14	; 0x0e
    20d0:	9f 85       	ldd	r25, Y+15	; 0x0f
    20d2:	a8 89       	ldd	r26, Y+16	; 0x10
    20d4:	b9 89       	ldd	r27, Y+17	; 0x11
    20d6:	8f 3f       	cpi	r24, 0xFF	; 255
    20d8:	2f ef       	ldi	r18, 0xFF	; 255
    20da:	92 07       	cpc	r25, r18
    20dc:	a2 07       	cpc	r26, r18
    20de:	b2 07       	cpc	r27, r18
    20e0:	c9 f1       	breq	.+114    	; 0x2154 <create_chain+0x1e6>
    20e2:	01 97       	sbiw	r24, 0x01	; 1
    20e4:	a1 09       	sbc	r26, r1
    20e6:	b1 09       	sbc	r27, r1
    20e8:	8e 87       	std	Y+14, r24	; 0x0e
    20ea:	9f 87       	std	Y+15, r25	; 0x0f
    20ec:	a8 8b       	std	Y+16, r26	; 0x10
    20ee:	b9 8b       	std	Y+17, r27	; 0x11
    20f0:	8d 81       	ldd	r24, Y+5	; 0x05
    20f2:	81 60       	ori	r24, 0x01	; 1
    20f4:	8d 83       	std	Y+5, r24	; 0x05
    20f6:	6c 2d       	mov	r22, r12
    20f8:	7d 2d       	mov	r23, r13
    20fa:	8e 2d       	mov	r24, r14
    20fc:	9f 2d       	mov	r25, r15
    20fe:	33 c0       	rjmp	.+102    	; 0x2166 <create_chain+0x1f8>
    2100:	81 30       	cpi	r24, 0x01	; 1
    2102:	69 f1       	breq	.+90     	; 0x215e <create_chain+0x1f0>
    2104:	61 e0       	ldi	r22, 0x01	; 1
    2106:	70 e0       	ldi	r23, 0x00	; 0
    2108:	80 e0       	ldi	r24, 0x00	; 0
    210a:	90 e0       	ldi	r25, 0x00	; 0
    210c:	2c c0       	rjmp	.+88     	; 0x2166 <create_chain+0x1f8>
    210e:	61 e0       	ldi	r22, 0x01	; 1
    2110:	70 e0       	ldi	r23, 0x00	; 0
    2112:	80 e0       	ldi	r24, 0x00	; 0
    2114:	90 e0       	ldi	r25, 0x00	; 0
    2116:	27 c0       	rjmp	.+78     	; 0x2166 <create_chain+0x1f8>
    2118:	6f ef       	ldi	r22, 0xFF	; 255
    211a:	7f ef       	ldi	r23, 0xFF	; 255
    211c:	8f ef       	ldi	r24, 0xFF	; 255
    211e:	9f ef       	ldi	r25, 0xFF	; 255
    2120:	22 c0       	rjmp	.+68     	; 0x2166 <create_chain+0x1f8>
    2122:	6c 2d       	mov	r22, r12
    2124:	7d 2d       	mov	r23, r13
    2126:	8e 2d       	mov	r24, r14
    2128:	9f 2d       	mov	r25, r15
    212a:	1d c0       	rjmp	.+58     	; 0x2166 <create_chain+0x1f8>
    212c:	60 e0       	ldi	r22, 0x00	; 0
    212e:	70 e0       	ldi	r23, 0x00	; 0
    2130:	80 e0       	ldi	r24, 0x00	; 0
    2132:	90 e0       	ldi	r25, 0x00	; 0
    2134:	18 c0       	rjmp	.+48     	; 0x2166 <create_chain+0x1f8>
    2136:	6f ef       	ldi	r22, 0xFF	; 255
    2138:	7f ef       	ldi	r23, 0xFF	; 255
    213a:	8f ef       	ldi	r24, 0xFF	; 255
    213c:	9f ef       	ldi	r25, 0xFF	; 255
    213e:	13 c0       	rjmp	.+38     	; 0x2166 <create_chain+0x1f8>
    2140:	61 e0       	ldi	r22, 0x01	; 1
    2142:	70 e0       	ldi	r23, 0x00	; 0
    2144:	80 e0       	ldi	r24, 0x00	; 0
    2146:	90 e0       	ldi	r25, 0x00	; 0
    2148:	0e c0       	rjmp	.+28     	; 0x2166 <create_chain+0x1f8>
    214a:	60 e0       	ldi	r22, 0x00	; 0
    214c:	70 e0       	ldi	r23, 0x00	; 0
    214e:	80 e0       	ldi	r24, 0x00	; 0
    2150:	90 e0       	ldi	r25, 0x00	; 0
    2152:	09 c0       	rjmp	.+18     	; 0x2166 <create_chain+0x1f8>
    2154:	6c 2d       	mov	r22, r12
    2156:	7d 2d       	mov	r23, r13
    2158:	8e 2d       	mov	r24, r14
    215a:	9f 2d       	mov	r25, r15
    215c:	04 c0       	rjmp	.+8      	; 0x2166 <create_chain+0x1f8>
    215e:	6f ef       	ldi	r22, 0xFF	; 255
    2160:	7f ef       	ldi	r23, 0xFF	; 255
    2162:	8f ef       	ldi	r24, 0xFF	; 255
    2164:	9f ef       	ldi	r25, 0xFF	; 255
    2166:	df 91       	pop	r29
    2168:	cf 91       	pop	r28
    216a:	1f 91       	pop	r17
    216c:	0f 91       	pop	r16
    216e:	ff 90       	pop	r15
    2170:	ef 90       	pop	r14
    2172:	df 90       	pop	r13
    2174:	cf 90       	pop	r12
    2176:	bf 90       	pop	r11
    2178:	af 90       	pop	r10
    217a:	9f 90       	pop	r9
    217c:	8f 90       	pop	r8
    217e:	7f 90       	pop	r7
    2180:	6f 90       	pop	r6
    2182:	5f 90       	pop	r5
    2184:	4f 90       	pop	r4
    2186:	3f 90       	pop	r3
    2188:	2f 90       	pop	r2
    218a:	08 95       	ret

0000218c <dir_next>:
    218c:	7f 92       	push	r7
    218e:	8f 92       	push	r8
    2190:	9f 92       	push	r9
    2192:	af 92       	push	r10
    2194:	bf 92       	push	r11
    2196:	cf 92       	push	r12
    2198:	df 92       	push	r13
    219a:	ef 92       	push	r14
    219c:	ff 92       	push	r15
    219e:	0f 93       	push	r16
    21a0:	1f 93       	push	r17
    21a2:	cf 93       	push	r28
    21a4:	df 93       	push	r29
    21a6:	dc 01       	movw	r26, r24
    21a8:	14 96       	adiw	r26, 0x04	; 4
    21aa:	cd 91       	ld	r28, X+
    21ac:	dc 91       	ld	r29, X
    21ae:	15 97       	sbiw	r26, 0x05	; 5
    21b0:	21 96       	adiw	r28, 0x01	; 1
    21b2:	09 f4       	brne	.+2      	; 0x21b6 <dir_next+0x2a>
    21b4:	04 c1       	rjmp	.+520    	; 0x23be <dir_next+0x232>
    21b6:	1e 96       	adiw	r26, 0x0e	; 14
    21b8:	8d 90       	ld	r8, X+
    21ba:	9d 90       	ld	r9, X+
    21bc:	ad 90       	ld	r10, X+
    21be:	bc 90       	ld	r11, X
    21c0:	51 97       	sbiw	r26, 0x11	; 17
    21c2:	81 14       	cp	r8, r1
    21c4:	91 04       	cpc	r9, r1
    21c6:	a1 04       	cpc	r10, r1
    21c8:	b1 04       	cpc	r11, r1
    21ca:	09 f4       	brne	.+2      	; 0x21ce <dir_next+0x42>
    21cc:	fa c0       	rjmp	.+500    	; 0x23c2 <dir_next+0x236>
    21ce:	7b 01       	movw	r14, r22
    21d0:	8c 01       	movw	r16, r24
    21d2:	6e 01       	movw	r12, r28
    21d4:	bf e1       	ldi	r27, 0x1F	; 31
    21d6:	cb 22       	and	r12, r27
    21d8:	dd 24       	eor	r13, r13
    21da:	c1 14       	cp	r12, r1
    21dc:	d1 04       	cpc	r13, r1
    21de:	09 f0       	breq	.+2      	; 0x21e2 <dir_next+0x56>
    21e0:	d2 c0       	rjmp	.+420    	; 0x2386 <dir_next+0x1fa>
    21e2:	ef ef       	ldi	r30, 0xFF	; 255
    21e4:	8e 1a       	sub	r8, r30
    21e6:	9e 0a       	sbc	r9, r30
    21e8:	ae 0a       	sbc	r10, r30
    21ea:	be 0a       	sbc	r11, r30
    21ec:	dc 01       	movw	r26, r24
    21ee:	1e 96       	adiw	r26, 0x0e	; 14
    21f0:	8d 92       	st	X+, r8
    21f2:	9d 92       	st	X+, r9
    21f4:	ad 92       	st	X+, r10
    21f6:	bc 92       	st	X, r11
    21f8:	51 97       	sbiw	r26, 0x11	; 17
    21fa:	1a 96       	adiw	r26, 0x0a	; 10
    21fc:	4d 91       	ld	r20, X+
    21fe:	5d 91       	ld	r21, X+
    2200:	6d 91       	ld	r22, X+
    2202:	7c 91       	ld	r23, X
    2204:	1d 97       	sbiw	r26, 0x0d	; 13
    2206:	41 15       	cp	r20, r1
    2208:	51 05       	cpc	r21, r1
    220a:	61 05       	cpc	r22, r1
    220c:	71 05       	cpc	r23, r1
    220e:	49 f4       	brne	.+18     	; 0x2222 <dir_next+0x96>
    2210:	ed 91       	ld	r30, X+
    2212:	fc 91       	ld	r31, X
    2214:	80 85       	ldd	r24, Z+8	; 0x08
    2216:	91 85       	ldd	r25, Z+9	; 0x09
    2218:	c8 17       	cp	r28, r24
    221a:	d9 07       	cpc	r29, r25
    221c:	08 f0       	brcs	.+2      	; 0x2220 <dir_next+0x94>
    221e:	d3 c0       	rjmp	.+422    	; 0x23c6 <dir_next+0x23a>
    2220:	b2 c0       	rjmp	.+356    	; 0x2386 <dir_next+0x1fa>
    2222:	dc 01       	movw	r26, r24
    2224:	ed 91       	ld	r30, X+
    2226:	fc 91       	ld	r31, X
    2228:	22 81       	ldd	r18, Z+2	; 0x02
    222a:	30 e0       	ldi	r19, 0x00	; 0
    222c:	21 50       	subi	r18, 0x01	; 1
    222e:	31 09       	sbc	r19, r1
    2230:	ce 01       	movw	r24, r28
    2232:	96 95       	lsr	r25
    2234:	87 95       	ror	r24
    2236:	92 95       	swap	r25
    2238:	82 95       	swap	r24
    223a:	8f 70       	andi	r24, 0x0F	; 15
    223c:	89 27       	eor	r24, r25
    223e:	9f 70       	andi	r25, 0x0F	; 15
    2240:	89 27       	eor	r24, r25
    2242:	28 23       	and	r18, r24
    2244:	39 23       	and	r19, r25
    2246:	23 2b       	or	r18, r19
    2248:	09 f0       	breq	.+2      	; 0x224c <dir_next+0xc0>
    224a:	9d c0       	rjmp	.+314    	; 0x2386 <dir_next+0x1fa>
    224c:	cf 01       	movw	r24, r30
    224e:	a5 db       	rcall	.-2230   	; 0x199a <get_fat>
    2250:	4b 01       	movw	r8, r22
    2252:	5c 01       	movw	r10, r24
    2254:	62 30       	cpi	r22, 0x02	; 2
    2256:	71 05       	cpc	r23, r1
    2258:	81 05       	cpc	r24, r1
    225a:	91 05       	cpc	r25, r1
    225c:	08 f4       	brcc	.+2      	; 0x2260 <dir_next+0xd4>
    225e:	b5 c0       	rjmp	.+362    	; 0x23ca <dir_next+0x23e>
    2260:	6f 3f       	cpi	r22, 0xFF	; 255
    2262:	7f 4f       	sbci	r23, 0xFF	; 255
    2264:	8f 4f       	sbci	r24, 0xFF	; 255
    2266:	9f 4f       	sbci	r25, 0xFF	; 255
    2268:	09 f4       	brne	.+2      	; 0x226c <dir_next+0xe0>
    226a:	b1 c0       	rjmp	.+354    	; 0x23ce <dir_next+0x242>
    226c:	d8 01       	movw	r26, r16
    226e:	ed 91       	ld	r30, X+
    2270:	fc 91       	ld	r31, X
    2272:	82 89       	ldd	r24, Z+18	; 0x12
    2274:	93 89       	ldd	r25, Z+19	; 0x13
    2276:	a4 89       	ldd	r26, Z+20	; 0x14
    2278:	b5 89       	ldd	r27, Z+21	; 0x15
    227a:	88 16       	cp	r8, r24
    227c:	99 06       	cpc	r9, r25
    227e:	aa 06       	cpc	r10, r26
    2280:	bb 06       	cpc	r11, r27
    2282:	08 f4       	brcc	.+2      	; 0x2286 <dir_next+0xfa>
    2284:	6f c0       	rjmp	.+222    	; 0x2364 <dir_next+0x1d8>
    2286:	ef 28       	or	r14, r15
    2288:	09 f4       	brne	.+2      	; 0x228c <dir_next+0x100>
    228a:	a3 c0       	rjmp	.+326    	; 0x23d2 <dir_next+0x246>
    228c:	d8 01       	movw	r26, r16
    228e:	1a 96       	adiw	r26, 0x0a	; 10
    2290:	4d 91       	ld	r20, X+
    2292:	5d 91       	ld	r21, X+
    2294:	6d 91       	ld	r22, X+
    2296:	7c 91       	ld	r23, X
    2298:	1d 97       	sbiw	r26, 0x0d	; 13
    229a:	cf 01       	movw	r24, r30
    229c:	68 de       	rcall	.-816    	; 0x1f6e <create_chain>
    229e:	4b 01       	movw	r8, r22
    22a0:	5c 01       	movw	r10, r24
    22a2:	61 15       	cp	r22, r1
    22a4:	71 05       	cpc	r23, r1
    22a6:	81 05       	cpc	r24, r1
    22a8:	91 05       	cpc	r25, r1
    22aa:	09 f4       	brne	.+2      	; 0x22ae <dir_next+0x122>
    22ac:	94 c0       	rjmp	.+296    	; 0x23d6 <dir_next+0x24a>
    22ae:	61 30       	cpi	r22, 0x01	; 1
    22b0:	71 05       	cpc	r23, r1
    22b2:	81 05       	cpc	r24, r1
    22b4:	91 05       	cpc	r25, r1
    22b6:	09 f4       	brne	.+2      	; 0x22ba <dir_next+0x12e>
    22b8:	90 c0       	rjmp	.+288    	; 0x23da <dir_next+0x24e>
    22ba:	6f 3f       	cpi	r22, 0xFF	; 255
    22bc:	7f 4f       	sbci	r23, 0xFF	; 255
    22be:	8f 4f       	sbci	r24, 0xFF	; 255
    22c0:	9f 4f       	sbci	r25, 0xFF	; 255
    22c2:	09 f4       	brne	.+2      	; 0x22c6 <dir_next+0x13a>
    22c4:	8c c0       	rjmp	.+280    	; 0x23de <dir_next+0x252>
    22c6:	d8 01       	movw	r26, r16
    22c8:	8d 91       	ld	r24, X+
    22ca:	9c 91       	ld	r25, X
    22cc:	0e 94 38 07 	call	0xe70	; 0xe70 <sync_window>
    22d0:	81 11       	cpse	r24, r1
    22d2:	87 c0       	rjmp	.+270    	; 0x23e2 <dir_next+0x256>
    22d4:	f8 01       	movw	r30, r16
    22d6:	80 81       	ld	r24, Z
    22d8:	91 81       	ldd	r25, Z+1	; 0x01
    22da:	40 e0       	ldi	r20, 0x00	; 0
    22dc:	54 e0       	ldi	r21, 0x04	; 4
    22de:	60 e0       	ldi	r22, 0x00	; 0
    22e0:	70 e0       	ldi	r23, 0x00	; 0
    22e2:	8e 96       	adiw	r24, 0x2e	; 46
    22e4:	0e 94 d4 06 	call	0xda8	; 0xda8 <mem_set>
    22e8:	d8 01       	movw	r26, r16
    22ea:	ed 90       	ld	r14, X+
    22ec:	fc 90       	ld	r15, X
    22ee:	b5 01       	movw	r22, r10
    22f0:	a4 01       	movw	r20, r8
    22f2:	c7 01       	movw	r24, r14
    22f4:	24 db       	rcall	.-2488   	; 0x193e <clust2sect>
    22f6:	f7 01       	movw	r30, r14
    22f8:	62 a7       	std	Z+42, r22	; 0x2a
    22fa:	73 a7       	std	Z+43, r23	; 0x2b
    22fc:	84 a7       	std	Z+44, r24	; 0x2c
    22fe:	95 a7       	std	Z+45, r25	; 0x2d
    2300:	e1 2c       	mov	r14, r1
    2302:	f1 2c       	mov	r15, r1
    2304:	77 24       	eor	r7, r7
    2306:	73 94       	inc	r7
    2308:	19 c0       	rjmp	.+50     	; 0x233c <dir_next+0x1b0>
    230a:	74 82       	std	Z+4, r7	; 0x04
    230c:	d8 01       	movw	r26, r16
    230e:	8d 91       	ld	r24, X+
    2310:	9c 91       	ld	r25, X
    2312:	0e 94 38 07 	call	0xe70	; 0xe70 <sync_window>
    2316:	81 11       	cpse	r24, r1
    2318:	66 c0       	rjmp	.+204    	; 0x23e6 <dir_next+0x25a>
    231a:	d8 01       	movw	r26, r16
    231c:	ed 91       	ld	r30, X+
    231e:	fc 91       	ld	r31, X
    2320:	82 a5       	ldd	r24, Z+42	; 0x2a
    2322:	93 a5       	ldd	r25, Z+43	; 0x2b
    2324:	a4 a5       	ldd	r26, Z+44	; 0x2c
    2326:	b5 a5       	ldd	r27, Z+45	; 0x2d
    2328:	01 96       	adiw	r24, 0x01	; 1
    232a:	a1 1d       	adc	r26, r1
    232c:	b1 1d       	adc	r27, r1
    232e:	82 a7       	std	Z+42, r24	; 0x2a
    2330:	93 a7       	std	Z+43, r25	; 0x2b
    2332:	a4 a7       	std	Z+44, r26	; 0x2c
    2334:	b5 a7       	std	Z+45, r27	; 0x2d
    2336:	bf ef       	ldi	r27, 0xFF	; 255
    2338:	eb 1a       	sub	r14, r27
    233a:	fb 0a       	sbc	r15, r27
    233c:	d8 01       	movw	r26, r16
    233e:	ed 91       	ld	r30, X+
    2340:	fc 91       	ld	r31, X
    2342:	82 81       	ldd	r24, Z+2	; 0x02
    2344:	90 e0       	ldi	r25, 0x00	; 0
    2346:	e8 16       	cp	r14, r24
    2348:	f9 06       	cpc	r15, r25
    234a:	f8 f2       	brcs	.-66     	; 0x230a <dir_next+0x17e>
    234c:	82 a5       	ldd	r24, Z+42	; 0x2a
    234e:	93 a5       	ldd	r25, Z+43	; 0x2b
    2350:	a4 a5       	ldd	r26, Z+44	; 0x2c
    2352:	b5 a5       	ldd	r27, Z+45	; 0x2d
    2354:	8e 19       	sub	r24, r14
    2356:	9f 09       	sbc	r25, r15
    2358:	a1 09       	sbc	r26, r1
    235a:	b1 09       	sbc	r27, r1
    235c:	82 a7       	std	Z+42, r24	; 0x2a
    235e:	93 a7       	std	Z+43, r25	; 0x2b
    2360:	a4 a7       	std	Z+44, r26	; 0x2c
    2362:	b5 a7       	std	Z+45, r27	; 0x2d
    2364:	f8 01       	movw	r30, r16
    2366:	82 86       	std	Z+10, r8	; 0x0a
    2368:	93 86       	std	Z+11, r9	; 0x0b
    236a:	a4 86       	std	Z+12, r10	; 0x0c
    236c:	b5 86       	std	Z+13, r11	; 0x0d
    236e:	b5 01       	movw	r22, r10
    2370:	a4 01       	movw	r20, r8
    2372:	80 81       	ld	r24, Z
    2374:	91 81       	ldd	r25, Z+1	; 0x01
    2376:	e3 da       	rcall	.-2618   	; 0x193e <clust2sect>
    2378:	d8 01       	movw	r26, r16
    237a:	1e 96       	adiw	r26, 0x0e	; 14
    237c:	6d 93       	st	X+, r22
    237e:	7d 93       	st	X+, r23
    2380:	8d 93       	st	X+, r24
    2382:	9c 93       	st	X, r25
    2384:	51 97       	sbiw	r26, 0x11	; 17
    2386:	f8 01       	movw	r30, r16
    2388:	d5 83       	std	Z+5, r29	; 0x05
    238a:	c4 83       	std	Z+4, r28	; 0x04
    238c:	cc 0c       	add	r12, r12
    238e:	dd 1c       	adc	r13, r13
    2390:	cc 0c       	add	r12, r12
    2392:	dd 1c       	adc	r13, r13
    2394:	cc 0c       	add	r12, r12
    2396:	dd 1c       	adc	r13, r13
    2398:	cc 0c       	add	r12, r12
    239a:	dd 1c       	adc	r13, r13
    239c:	cc 0c       	add	r12, r12
    239e:	dd 1c       	adc	r13, r13
    23a0:	fe e2       	ldi	r31, 0x2E	; 46
    23a2:	cf 0e       	add	r12, r31
    23a4:	d1 1c       	adc	r13, r1
    23a6:	d8 01       	movw	r26, r16
    23a8:	8d 91       	ld	r24, X+
    23aa:	9c 91       	ld	r25, X
    23ac:	11 97       	sbiw	r26, 0x01	; 1
    23ae:	c8 0e       	add	r12, r24
    23b0:	d9 1e       	adc	r13, r25
    23b2:	53 96       	adiw	r26, 0x13	; 19
    23b4:	dc 92       	st	X, r13
    23b6:	ce 92       	st	-X, r12
    23b8:	52 97       	sbiw	r26, 0x12	; 18
    23ba:	80 e0       	ldi	r24, 0x00	; 0
    23bc:	15 c0       	rjmp	.+42     	; 0x23e8 <dir_next+0x25c>
    23be:	84 e0       	ldi	r24, 0x04	; 4
    23c0:	13 c0       	rjmp	.+38     	; 0x23e8 <dir_next+0x25c>
    23c2:	84 e0       	ldi	r24, 0x04	; 4
    23c4:	11 c0       	rjmp	.+34     	; 0x23e8 <dir_next+0x25c>
    23c6:	84 e0       	ldi	r24, 0x04	; 4
    23c8:	0f c0       	rjmp	.+30     	; 0x23e8 <dir_next+0x25c>
    23ca:	82 e0       	ldi	r24, 0x02	; 2
    23cc:	0d c0       	rjmp	.+26     	; 0x23e8 <dir_next+0x25c>
    23ce:	81 e0       	ldi	r24, 0x01	; 1
    23d0:	0b c0       	rjmp	.+22     	; 0x23e8 <dir_next+0x25c>
    23d2:	84 e0       	ldi	r24, 0x04	; 4
    23d4:	09 c0       	rjmp	.+18     	; 0x23e8 <dir_next+0x25c>
    23d6:	87 e0       	ldi	r24, 0x07	; 7
    23d8:	07 c0       	rjmp	.+14     	; 0x23e8 <dir_next+0x25c>
    23da:	82 e0       	ldi	r24, 0x02	; 2
    23dc:	05 c0       	rjmp	.+10     	; 0x23e8 <dir_next+0x25c>
    23de:	81 e0       	ldi	r24, 0x01	; 1
    23e0:	03 c0       	rjmp	.+6      	; 0x23e8 <dir_next+0x25c>
    23e2:	81 e0       	ldi	r24, 0x01	; 1
    23e4:	01 c0       	rjmp	.+2      	; 0x23e8 <dir_next+0x25c>
    23e6:	81 e0       	ldi	r24, 0x01	; 1
    23e8:	df 91       	pop	r29
    23ea:	cf 91       	pop	r28
    23ec:	1f 91       	pop	r17
    23ee:	0f 91       	pop	r16
    23f0:	ff 90       	pop	r15
    23f2:	ef 90       	pop	r14
    23f4:	df 90       	pop	r13
    23f6:	cf 90       	pop	r12
    23f8:	bf 90       	pop	r11
    23fa:	af 90       	pop	r10
    23fc:	9f 90       	pop	r9
    23fe:	8f 90       	pop	r8
    2400:	7f 90       	pop	r7
    2402:	08 95       	ret

00002404 <follow_path>:
    2404:	2f 92       	push	r2
    2406:	3f 92       	push	r3
    2408:	4f 92       	push	r4
    240a:	5f 92       	push	r5
    240c:	6f 92       	push	r6
    240e:	7f 92       	push	r7
    2410:	8f 92       	push	r8
    2412:	9f 92       	push	r9
    2414:	af 92       	push	r10
    2416:	bf 92       	push	r11
    2418:	cf 92       	push	r12
    241a:	df 92       	push	r13
    241c:	ef 92       	push	r14
    241e:	ff 92       	push	r15
    2420:	0f 93       	push	r16
    2422:	1f 93       	push	r17
    2424:	cf 93       	push	r28
    2426:	df 93       	push	r29
    2428:	00 d0       	rcall	.+0      	; 0x242a <follow_path+0x26>
    242a:	00 d0       	rcall	.+0      	; 0x242c <follow_path+0x28>
    242c:	00 d0       	rcall	.+0      	; 0x242e <follow_path+0x2a>
    242e:	cd b7       	in	r28, 0x3d	; 61
    2430:	de b7       	in	r29, 0x3e	; 62
    2432:	7c 01       	movw	r14, r24
    2434:	8b 01       	movw	r16, r22
    2436:	db 01       	movw	r26, r22
    2438:	8c 91       	ld	r24, X
    243a:	8f 32       	cpi	r24, 0x2F	; 47
    243c:	11 f0       	breq	.+4      	; 0x2442 <follow_path+0x3e>
    243e:	8c 35       	cpi	r24, 0x5C	; 92
    2440:	11 f4       	brne	.+4      	; 0x2446 <follow_path+0x42>
    2442:	0f 5f       	subi	r16, 0xFF	; 255
    2444:	1f 4f       	sbci	r17, 0xFF	; 255
    2446:	f7 01       	movw	r30, r14
    2448:	16 82       	std	Z+6, r1	; 0x06
    244a:	17 82       	std	Z+7, r1	; 0x07
    244c:	10 86       	std	Z+8, r1	; 0x08
    244e:	11 86       	std	Z+9, r1	; 0x09
    2450:	d8 01       	movw	r26, r16
    2452:	8c 91       	ld	r24, X
    2454:	80 32       	cpi	r24, 0x20	; 32
    2456:	40 f4       	brcc	.+16     	; 0x2468 <follow_path+0x64>
    2458:	60 e0       	ldi	r22, 0x00	; 0
    245a:	70 e0       	ldi	r23, 0x00	; 0
    245c:	c7 01       	movw	r24, r14
    245e:	9f db       	rcall	.-2242   	; 0x1b9e <dir_sdi>
    2460:	f7 01       	movw	r30, r14
    2462:	13 8a       	std	Z+19, r1	; 0x13
    2464:	12 8a       	std	Z+18, r1	; 0x12
    2466:	1c c1       	rjmp	.+568    	; 0x26a0 <follow_path+0x29c>
    2468:	0f 2e       	mov	r0, r31
    246a:	fb e0       	ldi	r31, 0x0B	; 11
    246c:	8f 2e       	mov	r8, r31
    246e:	f0 2d       	mov	r31, r0
    2470:	31 2c       	mov	r3, r1
    2472:	b1 2c       	mov	r11, r1
    2474:	a1 2c       	mov	r10, r1
    2476:	68 94       	set
    2478:	99 24       	eor	r9, r9
    247a:	93 f8       	bld	r9, 3
    247c:	51 2c       	mov	r5, r1
    247e:	71 2c       	mov	r7, r1
    2480:	29 2c       	mov	r2, r9
    2482:	5a 82       	std	Y+2, r5	; 0x02
    2484:	8b 82       	std	Y+3, r8	; 0x03
    2486:	3c 82       	std	Y+4, r3	; 0x04
    2488:	0f 2e       	mov	r0, r31
    248a:	f5 e0       	ldi	r31, 0x05	; 5
    248c:	4f 2e       	mov	r4, r31
    248e:	f0 2d       	mov	r31, r0
    2490:	fe 82       	std	Y+6, r15	; 0x06
    2492:	ed 82       	std	Y+5, r14	; 0x05
    2494:	79 82       	std	Y+1, r7	; 0x01
    2496:	f8 01       	movw	r30, r16
    2498:	2d 81       	ldd	r18, Y+5	; 0x05
    249a:	3e 81       	ldd	r19, Y+6	; 0x06
    249c:	8f 01       	movw	r16, r30
    249e:	81 91       	ld	r24, Z+
    24a0:	8f 32       	cpi	r24, 0x2F	; 47
    24a2:	e1 f3       	breq	.-8      	; 0x249c <follow_path+0x98>
    24a4:	8c 35       	cpi	r24, 0x5C	; 92
    24a6:	d1 f3       	breq	.-12     	; 0x249c <follow_path+0x98>
    24a8:	3e 83       	std	Y+6, r19	; 0x06
    24aa:	2d 83       	std	Y+5, r18	; 0x05
    24ac:	d9 01       	movw	r26, r18
    24ae:	54 96       	adiw	r26, 0x14	; 20
    24b0:	ed 90       	ld	r14, X+
    24b2:	fc 90       	ld	r15, X
    24b4:	55 97       	sbiw	r26, 0x15	; 21
    24b6:	48 2d       	mov	r20, r8
    24b8:	53 2d       	mov	r21, r3
    24ba:	60 e2       	ldi	r22, 0x20	; 32
    24bc:	70 e0       	ldi	r23, 0x00	; 0
    24be:	c7 01       	movw	r24, r14
    24c0:	0e 94 d4 06 	call	0xda8	; 0xda8 <mem_set>
    24c4:	d8 01       	movw	r26, r16
    24c6:	4b 2d       	mov	r20, r11
    24c8:	5a 2d       	mov	r21, r10
    24ca:	2b 2d       	mov	r18, r11
    24cc:	3a 2d       	mov	r19, r10
    24ce:	69 2c       	mov	r6, r9
    24d0:	75 2c       	mov	r7, r5
    24d2:	c9 80       	ldd	r12, Y+1	; 0x01
    24d4:	7c 2d       	mov	r23, r12
    24d6:	6a 01       	movw	r12, r20
    24d8:	2f 5f       	subi	r18, 0xFF	; 255
    24da:	3f 4f       	sbci	r19, 0xFF	; 255
    24dc:	6d 91       	ld	r22, X+
    24de:	61 32       	cpi	r22, 0x21	; 33
    24e0:	08 f4       	brcc	.+2      	; 0x24e4 <follow_path+0xe0>
    24e2:	c1 c0       	rjmp	.+386    	; 0x2666 <follow_path+0x262>
    24e4:	6f 32       	cpi	r22, 0x2F	; 47
    24e6:	09 f4       	brne	.+2      	; 0x24ea <follow_path+0xe6>
    24e8:	c4 c0       	rjmp	.+392    	; 0x2672 <follow_path+0x26e>
    24ea:	6c 35       	cpi	r22, 0x5C	; 92
    24ec:	09 f4       	brne	.+2      	; 0x24f0 <follow_path+0xec>
    24ee:	c1 c0       	rjmp	.+386    	; 0x2672 <follow_path+0x26e>
    24f0:	6e 32       	cpi	r22, 0x2E	; 46
    24f2:	09 f4       	brne	.+2      	; 0x24f6 <follow_path+0xf2>
    24f4:	ac c0       	rjmp	.+344    	; 0x264e <follow_path+0x24a>
    24f6:	c6 14       	cp	r12, r6
    24f8:	d7 04       	cpc	r13, r7
    24fa:	08 f0       	brcs	.+2      	; 0x24fe <follow_path+0xfa>
    24fc:	9a c0       	rjmp	.+308    	; 0x2632 <follow_path+0x22e>
    24fe:	07 c0       	rjmp	.+14     	; 0x250e <follow_path+0x10a>
    2500:	77 0f       	add	r23, r23
    2502:	77 0f       	add	r23, r23
    2504:	c2 2c       	mov	r12, r2
    2506:	da 80       	ldd	r13, Y+2	; 0x02
    2508:	6b 80       	ldd	r6, Y+3	; 0x03
    250a:	7c 80       	ldd	r7, Y+4	; 0x04
    250c:	e5 cf       	rjmp	.-54     	; 0x24d8 <follow_path+0xd4>
    250e:	66 23       	and	r22, r22
    2510:	0c f4       	brge	.+2      	; 0x2514 <follow_path+0x110>
    2512:	91 c0       	rjmp	.+290    	; 0x2636 <follow_path+0x232>
    2514:	46 2f       	mov	r20, r22
    2516:	50 e0       	ldi	r21, 0x00	; 0
    2518:	42 32       	cpi	r20, 0x22	; 34
    251a:	51 05       	cpc	r21, r1
    251c:	09 f4       	brne	.+2      	; 0x2520 <follow_path+0x11c>
    251e:	8d c0       	rjmp	.+282    	; 0x263a <follow_path+0x236>
    2520:	e2 e0       	ldi	r30, 0x02	; 2
    2522:	f1 e0       	ldi	r31, 0x01	; 1
    2524:	81 91       	ld	r24, Z+
    2526:	88 23       	and	r24, r24
    2528:	09 f4       	brne	.+2      	; 0x252c <follow_path+0x128>
    252a:	97 c0       	rjmp	.+302    	; 0x265a <follow_path+0x256>
    252c:	90 e0       	ldi	r25, 0x00	; 0
    252e:	48 17       	cp	r20, r24
    2530:	59 07       	cpc	r21, r25
    2532:	c1 f7       	brne	.-16     	; 0x2524 <follow_path+0x120>
    2534:	86 e0       	ldi	r24, 0x06	; 6
    2536:	b4 c0       	rjmp	.+360    	; 0x26a0 <follow_path+0x29c>
    2538:	72 60       	ori	r23, 0x02	; 2
    253a:	06 c0       	rjmp	.+12     	; 0x2548 <follow_path+0x144>
    253c:	8f e9       	ldi	r24, 0x9F	; 159
    253e:	86 0f       	add	r24, r22
    2540:	8a 31       	cpi	r24, 0x1A	; 26
    2542:	10 f4       	brcc	.+4      	; 0x2548 <follow_path+0x144>
    2544:	71 60       	ori	r23, 0x01	; 1
    2546:	60 52       	subi	r22, 0x20	; 32
    2548:	f7 01       	movw	r30, r14
    254a:	ec 0d       	add	r30, r12
    254c:	fd 1d       	adc	r31, r13
    254e:	60 83       	st	Z, r22
    2550:	f6 01       	movw	r30, r12
    2552:	31 96       	adiw	r30, 0x01	; 1
    2554:	6f 01       	movw	r12, r30
    2556:	c0 cf       	rjmp	.-128    	; 0x24d8 <follow_path+0xd4>
    2558:	45 2b       	or	r20, r21
    255a:	09 f4       	brne	.+2      	; 0x255e <follow_path+0x15a>
    255c:	70 c0       	rjmp	.+224    	; 0x263e <follow_path+0x23a>
    255e:	d7 01       	movw	r26, r14
    2560:	9c 91       	ld	r25, X
    2562:	95 3e       	cpi	r25, 0xE5	; 229
    2564:	09 f4       	brne	.+2      	; 0x2568 <follow_path+0x164>
    2566:	4c 92       	st	X, r4
    2568:	b8 e0       	ldi	r27, 0x08	; 8
    256a:	6b 16       	cp	r6, r27
    256c:	71 04       	cpc	r7, r1
    256e:	11 f4       	brne	.+4      	; 0x2574 <follow_path+0x170>
    2570:	cc 0c       	add	r12, r12
    2572:	cc 0c       	add	r12, r12
    2574:	9c 2d       	mov	r25, r12
    2576:	93 70       	andi	r25, 0x03	; 3
    2578:	91 30       	cpi	r25, 0x01	; 1
    257a:	09 f4       	brne	.+2      	; 0x257e <follow_path+0x17a>
    257c:	80 61       	ori	r24, 0x10	; 16
    257e:	9c 2d       	mov	r25, r12
    2580:	9c 70       	andi	r25, 0x0C	; 12
    2582:	94 30       	cpi	r25, 0x04	; 4
    2584:	09 f4       	brne	.+2      	; 0x2588 <follow_path+0x184>
    2586:	88 60       	ori	r24, 0x08	; 8
    2588:	f7 01       	movw	r30, r14
    258a:	83 87       	std	Z+11, r24	; 0x0b
    258c:	6b 2d       	mov	r22, r11
    258e:	7a 2d       	mov	r23, r10
    2590:	8d 81       	ldd	r24, Y+5	; 0x05
    2592:	9e 81       	ldd	r25, Y+6	; 0x06
    2594:	04 db       	rcall	.-2552   	; 0x1b9e <dir_sdi>
    2596:	81 11       	cpse	r24, r1
    2598:	72 c0       	rjmp	.+228    	; 0x267e <follow_path+0x27a>
    259a:	ed 80       	ldd	r14, Y+5	; 0x05
    259c:	fe 80       	ldd	r15, Y+6	; 0x06
    259e:	d7 01       	movw	r26, r14
    25a0:	1e 96       	adiw	r26, 0x0e	; 14
    25a2:	4d 91       	ld	r20, X+
    25a4:	5d 91       	ld	r21, X+
    25a6:	6d 91       	ld	r22, X+
    25a8:	7c 91       	ld	r23, X
    25aa:	51 97       	sbiw	r26, 0x11	; 17
    25ac:	8d 91       	ld	r24, X+
    25ae:	9c 91       	ld	r25, X
    25b0:	0e 94 a1 07 	call	0xf42	; 0xf42 <move_window>
    25b4:	81 11       	cpse	r24, r1
    25b6:	65 c0       	rjmp	.+202    	; 0x2682 <follow_path+0x27e>
    25b8:	f7 01       	movw	r30, r14
    25ba:	62 89       	ldd	r22, Z+18	; 0x12
    25bc:	73 89       	ldd	r23, Z+19	; 0x13
    25be:	db 01       	movw	r26, r22
    25c0:	9c 91       	ld	r25, X
    25c2:	99 23       	and	r25, r25
    25c4:	e9 f0       	breq	.+58     	; 0x2600 <follow_path+0x1fc>
    25c6:	1b 96       	adiw	r26, 0x0b	; 11
    25c8:	9c 91       	ld	r25, X
    25ca:	93 fd       	sbrc	r25, 3
    25cc:	12 c0       	rjmp	.+36     	; 0x25f2 <follow_path+0x1ee>
    25ce:	44 89       	ldd	r20, Z+20	; 0x14
    25d0:	55 89       	ldd	r21, Z+21	; 0x15
    25d2:	fb 01       	movw	r30, r22
    25d4:	da 01       	movw	r26, r20
    25d6:	9b 01       	movw	r18, r22
    25d8:	25 5f       	subi	r18, 0xF5	; 245
    25da:	3f 4f       	sbci	r19, 0xFF	; 255
    25dc:	67 01       	movw	r12, r14
    25de:	04 c0       	rjmp	.+8      	; 0x25e8 <follow_path+0x1e4>
    25e0:	e2 17       	cp	r30, r18
    25e2:	f3 07       	cpc	r31, r19
    25e4:	09 f4       	brne	.+2      	; 0x25e8 <follow_path+0x1e4>
    25e6:	56 c0       	rjmp	.+172    	; 0x2694 <follow_path+0x290>
    25e8:	f1 90       	ld	r15, Z+
    25ea:	9d 91       	ld	r25, X+
    25ec:	f9 16       	cp	r15, r25
    25ee:	c1 f3       	breq	.-16     	; 0x25e0 <follow_path+0x1dc>
    25f0:	76 01       	movw	r14, r12
    25f2:	6b 2d       	mov	r22, r11
    25f4:	7a 2d       	mov	r23, r10
    25f6:	c7 01       	movw	r24, r14
    25f8:	c9 dd       	rcall	.-1134   	; 0x218c <dir_next>
    25fa:	88 23       	and	r24, r24
    25fc:	81 f2       	breq	.-96     	; 0x259e <follow_path+0x19a>
    25fe:	41 c0       	rjmp	.+130    	; 0x2682 <follow_path+0x27e>
    2600:	04 88       	ldd	r0, Z+20	; 0x14
    2602:	f5 89       	ldd	r31, Z+21	; 0x15
    2604:	e0 2d       	mov	r30, r0
    2606:	93 85       	ldd	r25, Z+11	; 0x0b
    2608:	92 fd       	sbrc	r25, 2
    260a:	1b c0       	rjmp	.+54     	; 0x2642 <follow_path+0x23e>
    260c:	85 e0       	ldi	r24, 0x05	; 5
    260e:	48 c0       	rjmp	.+144    	; 0x26a0 <follow_path+0x29c>
    2610:	fb 01       	movw	r30, r22
    2612:	83 85       	ldd	r24, Z+11	; 0x0b
    2614:	84 ff       	sbrs	r24, 4
    2616:	17 c0       	rjmp	.+46     	; 0x2646 <follow_path+0x242>
    2618:	ad 81       	ldd	r26, Y+5	; 0x05
    261a:	be 81       	ldd	r27, Y+6	; 0x06
    261c:	8d 91       	ld	r24, X+
    261e:	9c 91       	ld	r25, X
    2620:	0e 94 df 06 	call	0xdbe	; 0xdbe <ld_clust>
    2624:	ed 81       	ldd	r30, Y+5	; 0x05
    2626:	fe 81       	ldd	r31, Y+6	; 0x06
    2628:	66 83       	std	Z+6, r22	; 0x06
    262a:	77 83       	std	Z+7, r23	; 0x07
    262c:	80 87       	std	Z+8, r24	; 0x08
    262e:	91 87       	std	Z+9, r25	; 0x09
    2630:	32 cf       	rjmp	.-412    	; 0x2496 <follow_path+0x92>
    2632:	86 e0       	ldi	r24, 0x06	; 6
    2634:	35 c0       	rjmp	.+106    	; 0x26a0 <follow_path+0x29c>
    2636:	86 e0       	ldi	r24, 0x06	; 6
    2638:	33 c0       	rjmp	.+102    	; 0x26a0 <follow_path+0x29c>
    263a:	86 e0       	ldi	r24, 0x06	; 6
    263c:	31 c0       	rjmp	.+98     	; 0x26a0 <follow_path+0x29c>
    263e:	86 e0       	ldi	r24, 0x06	; 6
    2640:	2f c0       	rjmp	.+94     	; 0x26a0 <follow_path+0x29c>
    2642:	84 e0       	ldi	r24, 0x04	; 4
    2644:	2d c0       	rjmp	.+90     	; 0x26a0 <follow_path+0x29c>
    2646:	85 e0       	ldi	r24, 0x05	; 5
    2648:	2b c0       	rjmp	.+86     	; 0x26a0 <follow_path+0x29c>
    264a:	86 e0       	ldi	r24, 0x06	; 6
    264c:	29 c0       	rjmp	.+82     	; 0x26a0 <follow_path+0x29c>
    264e:	f8 e0       	ldi	r31, 0x08	; 8
    2650:	6f 16       	cp	r6, r31
    2652:	71 04       	cpc	r7, r1
    2654:	09 f4       	brne	.+2      	; 0x2658 <follow_path+0x254>
    2656:	54 cf       	rjmp	.-344    	; 0x2500 <follow_path+0xfc>
    2658:	f8 cf       	rjmp	.-16     	; 0x264a <follow_path+0x246>
    265a:	8f eb       	ldi	r24, 0xBF	; 191
    265c:	86 0f       	add	r24, r22
    265e:	8a 31       	cpi	r24, 0x1A	; 26
    2660:	08 f4       	brcc	.+2      	; 0x2664 <follow_path+0x260>
    2662:	6a cf       	rjmp	.-300    	; 0x2538 <follow_path+0x134>
    2664:	6b cf       	rjmp	.-298    	; 0x253c <follow_path+0x138>
    2666:	a6 01       	movw	r20, r12
    2668:	c7 2e       	mov	r12, r23
    266a:	02 0f       	add	r16, r18
    266c:	13 1f       	adc	r17, r19
    266e:	84 e0       	ldi	r24, 0x04	; 4
    2670:	73 cf       	rjmp	.-282    	; 0x2558 <follow_path+0x154>
    2672:	a6 01       	movw	r20, r12
    2674:	c7 2e       	mov	r12, r23
    2676:	02 0f       	add	r16, r18
    2678:	13 1f       	adc	r17, r19
    267a:	89 81       	ldd	r24, Y+1	; 0x01
    267c:	6d cf       	rjmp	.-294    	; 0x2558 <follow_path+0x154>
    267e:	ed 80       	ldd	r14, Y+5	; 0x05
    2680:	fe 80       	ldd	r15, Y+6	; 0x06
    2682:	d7 01       	movw	r26, r14
    2684:	54 96       	adiw	r26, 0x14	; 20
    2686:	ed 91       	ld	r30, X+
    2688:	fc 91       	ld	r31, X
    268a:	55 97       	sbiw	r26, 0x15	; 21
    268c:	93 85       	ldd	r25, Z+11	; 0x0b
    268e:	84 30       	cpi	r24, 0x04	; 4
    2690:	39 f4       	brne	.+14     	; 0x26a0 <follow_path+0x29c>
    2692:	ba cf       	rjmp	.-140    	; 0x2608 <follow_path+0x204>
    2694:	de 82       	std	Y+6, r13	; 0x06
    2696:	cd 82       	std	Y+5, r12	; 0x05
    2698:	fa 01       	movw	r30, r20
    269a:	93 85       	ldd	r25, Z+11	; 0x0b
    269c:	92 ff       	sbrs	r25, 2
    269e:	b8 cf       	rjmp	.-144    	; 0x2610 <follow_path+0x20c>
    26a0:	26 96       	adiw	r28, 0x06	; 6
    26a2:	0f b6       	in	r0, 0x3f	; 63
    26a4:	f8 94       	cli
    26a6:	de bf       	out	0x3e, r29	; 62
    26a8:	0f be       	out	0x3f, r0	; 63
    26aa:	cd bf       	out	0x3d, r28	; 61
    26ac:	df 91       	pop	r29
    26ae:	cf 91       	pop	r28
    26b0:	1f 91       	pop	r17
    26b2:	0f 91       	pop	r16
    26b4:	ff 90       	pop	r15
    26b6:	ef 90       	pop	r14
    26b8:	df 90       	pop	r13
    26ba:	cf 90       	pop	r12
    26bc:	bf 90       	pop	r11
    26be:	af 90       	pop	r10
    26c0:	9f 90       	pop	r9
    26c2:	8f 90       	pop	r8
    26c4:	7f 90       	pop	r7
    26c6:	6f 90       	pop	r6
    26c8:	5f 90       	pop	r5
    26ca:	4f 90       	pop	r4
    26cc:	3f 90       	pop	r3
    26ce:	2f 90       	pop	r2
    26d0:	08 95       	ret

000026d2 <dir_alloc>:
    26d2:	cf 92       	push	r12
    26d4:	df 92       	push	r13
    26d6:	ef 92       	push	r14
    26d8:	ff 92       	push	r15
    26da:	0f 93       	push	r16
    26dc:	1f 93       	push	r17
    26de:	cf 93       	push	r28
    26e0:	df 93       	push	r29
    26e2:	ec 01       	movw	r28, r24
    26e4:	7b 01       	movw	r14, r22
    26e6:	60 e0       	ldi	r22, 0x00	; 0
    26e8:	70 e0       	ldi	r23, 0x00	; 0
    26ea:	59 da       	rcall	.-2894   	; 0x1b9e <dir_sdi>
    26ec:	81 11       	cpse	r24, r1
    26ee:	23 c0       	rjmp	.+70     	; 0x2736 <dir_alloc+0x64>
    26f0:	00 e0       	ldi	r16, 0x00	; 0
    26f2:	10 e0       	ldi	r17, 0x00	; 0
    26f4:	c1 2c       	mov	r12, r1
    26f6:	d1 2c       	mov	r13, r1
    26f8:	4e 85       	ldd	r20, Y+14	; 0x0e
    26fa:	5f 85       	ldd	r21, Y+15	; 0x0f
    26fc:	68 89       	ldd	r22, Y+16	; 0x10
    26fe:	79 89       	ldd	r23, Y+17	; 0x11
    2700:	88 81       	ld	r24, Y
    2702:	99 81       	ldd	r25, Y+1	; 0x01
    2704:	0e 94 a1 07 	call	0xf42	; 0xf42 <move_window>
    2708:	81 11       	cpse	r24, r1
    270a:	15 c0       	rjmp	.+42     	; 0x2736 <dir_alloc+0x64>
    270c:	ea 89       	ldd	r30, Y+18	; 0x12
    270e:	fb 89       	ldd	r31, Y+19	; 0x13
    2710:	90 81       	ld	r25, Z
    2712:	95 3e       	cpi	r25, 0xE5	; 229
    2714:	11 f0       	breq	.+4      	; 0x271a <dir_alloc+0x48>
    2716:	91 11       	cpse	r25, r1
    2718:	06 c0       	rjmp	.+12     	; 0x2726 <dir_alloc+0x54>
    271a:	0f 5f       	subi	r16, 0xFF	; 255
    271c:	1f 4f       	sbci	r17, 0xFF	; 255
    271e:	0e 15       	cp	r16, r14
    2720:	1f 05       	cpc	r17, r15
    2722:	19 f4       	brne	.+6      	; 0x272a <dir_alloc+0x58>
    2724:	0b c0       	rjmp	.+22     	; 0x273c <dir_alloc+0x6a>
    2726:	0c 2d       	mov	r16, r12
    2728:	1d 2d       	mov	r17, r13
    272a:	61 e0       	ldi	r22, 0x01	; 1
    272c:	70 e0       	ldi	r23, 0x00	; 0
    272e:	ce 01       	movw	r24, r28
    2730:	2d dd       	rcall	.-1446   	; 0x218c <dir_next>
    2732:	88 23       	and	r24, r24
    2734:	09 f3       	breq	.-62     	; 0x26f8 <dir_alloc+0x26>
    2736:	84 30       	cpi	r24, 0x04	; 4
    2738:	09 f4       	brne	.+2      	; 0x273c <dir_alloc+0x6a>
    273a:	87 e0       	ldi	r24, 0x07	; 7
    273c:	df 91       	pop	r29
    273e:	cf 91       	pop	r28
    2740:	1f 91       	pop	r17
    2742:	0f 91       	pop	r16
    2744:	ff 90       	pop	r15
    2746:	ef 90       	pop	r14
    2748:	df 90       	pop	r13
    274a:	cf 90       	pop	r12
    274c:	08 95       	ret

0000274e <dir_register>:
    274e:	0f 93       	push	r16
    2750:	1f 93       	push	r17
    2752:	cf 93       	push	r28
    2754:	8c 01       	movw	r16, r24
    2756:	61 e0       	ldi	r22, 0x01	; 1
    2758:	70 e0       	ldi	r23, 0x00	; 0
    275a:	bb df       	rcall	.-138    	; 0x26d2 <dir_alloc>
    275c:	c8 2f       	mov	r28, r24
    275e:	81 11       	cpse	r24, r1
    2760:	29 c0       	rjmp	.+82     	; 0x27b4 <dir_register+0x66>
    2762:	d8 01       	movw	r26, r16
    2764:	1e 96       	adiw	r26, 0x0e	; 14
    2766:	4d 91       	ld	r20, X+
    2768:	5d 91       	ld	r21, X+
    276a:	6d 91       	ld	r22, X+
    276c:	7c 91       	ld	r23, X
    276e:	51 97       	sbiw	r26, 0x11	; 17
    2770:	8d 91       	ld	r24, X+
    2772:	9c 91       	ld	r25, X
    2774:	0e 94 a1 07 	call	0xf42	; 0xf42 <move_window>
    2778:	c8 2f       	mov	r28, r24
    277a:	81 11       	cpse	r24, r1
    277c:	1b c0       	rjmp	.+54     	; 0x27b4 <dir_register+0x66>
    277e:	40 e2       	ldi	r20, 0x20	; 32
    2780:	50 e0       	ldi	r21, 0x00	; 0
    2782:	60 e0       	ldi	r22, 0x00	; 0
    2784:	70 e0       	ldi	r23, 0x00	; 0
    2786:	f8 01       	movw	r30, r16
    2788:	82 89       	ldd	r24, Z+18	; 0x12
    278a:	93 89       	ldd	r25, Z+19	; 0x13
    278c:	0e 94 d4 06 	call	0xda8	; 0xda8 <mem_set>
    2790:	d8 01       	movw	r26, r16
    2792:	54 96       	adiw	r26, 0x14	; 20
    2794:	6d 91       	ld	r22, X+
    2796:	7c 91       	ld	r23, X
    2798:	55 97       	sbiw	r26, 0x15	; 21
    279a:	4b e0       	ldi	r20, 0x0B	; 11
    279c:	50 e0       	ldi	r21, 0x00	; 0
    279e:	52 96       	adiw	r26, 0x12	; 18
    27a0:	8d 91       	ld	r24, X+
    27a2:	9c 91       	ld	r25, X
    27a4:	53 97       	sbiw	r26, 0x13	; 19
    27a6:	0e 94 c6 06 	call	0xd8c	; 0xd8c <mem_cpy>
    27aa:	d8 01       	movw	r26, r16
    27ac:	ed 91       	ld	r30, X+
    27ae:	fc 91       	ld	r31, X
    27b0:	81 e0       	ldi	r24, 0x01	; 1
    27b2:	84 83       	std	Z+4, r24	; 0x04
    27b4:	8c 2f       	mov	r24, r28
    27b6:	cf 91       	pop	r28
    27b8:	1f 91       	pop	r17
    27ba:	0f 91       	pop	r16
    27bc:	08 95       	ret

000027be <dir_read>:
    27be:	cf 92       	push	r12
    27c0:	df 92       	push	r13
    27c2:	ef 92       	push	r14
    27c4:	ff 92       	push	r15
    27c6:	0f 93       	push	r16
    27c8:	1f 93       	push	r17
    27ca:	cf 93       	push	r28
    27cc:	df 93       	push	r29
    27ce:	ec 01       	movw	r28, r24
    27d0:	8b 01       	movw	r16, r22
    27d2:	94 e0       	ldi	r25, 0x04	; 4
    27d4:	cc 24       	eor	r12, r12
    27d6:	c3 94       	inc	r12
    27d8:	d1 2c       	mov	r13, r1
    27da:	e1 2c       	mov	r14, r1
    27dc:	f1 2c       	mov	r15, r1
    27de:	24 c0       	rjmp	.+72     	; 0x2828 <dir_read+0x6a>
    27e0:	88 81       	ld	r24, Y
    27e2:	99 81       	ldd	r25, Y+1	; 0x01
    27e4:	0e 94 a1 07 	call	0xf42	; 0xf42 <move_window>
    27e8:	81 11       	cpse	r24, r1
    27ea:	2a c0       	rjmp	.+84     	; 0x2840 <dir_read+0x82>
    27ec:	ea 89       	ldd	r30, Y+18	; 0x12
    27ee:	fb 89       	ldd	r31, Y+19	; 0x13
    27f0:	20 81       	ld	r18, Z
    27f2:	22 23       	and	r18, r18
    27f4:	51 f1       	breq	.+84     	; 0x284a <dir_read+0x8c>
    27f6:	93 85       	ldd	r25, Z+11	; 0x0b
    27f8:	25 3e       	cpi	r18, 0xE5	; 229
    27fa:	79 f0       	breq	.+30     	; 0x281a <dir_read+0x5c>
    27fc:	2e 32       	cpi	r18, 0x2E	; 46
    27fe:	69 f0       	breq	.+26     	; 0x281a <dir_read+0x5c>
    2800:	9f 73       	andi	r25, 0x3F	; 63
    2802:	9f 30       	cpi	r25, 0x0F	; 15
    2804:	51 f0       	breq	.+20     	; 0x281a <dir_read+0x5c>
    2806:	9f 71       	andi	r25, 0x1F	; 31
    2808:	2c 2d       	mov	r18, r12
    280a:	3d 2d       	mov	r19, r13
    280c:	98 30       	cpi	r25, 0x08	; 8
    280e:	11 f0       	breq	.+4      	; 0x2814 <dir_read+0x56>
    2810:	2e 2d       	mov	r18, r14
    2812:	3f 2d       	mov	r19, r15
    2814:	20 17       	cp	r18, r16
    2816:	31 07       	cpc	r19, r17
    2818:	d9 f0       	breq	.+54     	; 0x2850 <dir_read+0x92>
    281a:	6e 2d       	mov	r22, r14
    281c:	7f 2d       	mov	r23, r15
    281e:	ce 01       	movw	r24, r28
    2820:	b5 dc       	rcall	.-1686   	; 0x218c <dir_next>
    2822:	98 2f       	mov	r25, r24
    2824:	81 11       	cpse	r24, r1
    2826:	13 c0       	rjmp	.+38     	; 0x284e <dir_read+0x90>
    2828:	4e 85       	ldd	r20, Y+14	; 0x0e
    282a:	5f 85       	ldd	r21, Y+15	; 0x0f
    282c:	68 89       	ldd	r22, Y+16	; 0x10
    282e:	79 89       	ldd	r23, Y+17	; 0x11
    2830:	41 15       	cp	r20, r1
    2832:	51 05       	cpc	r21, r1
    2834:	61 05       	cpc	r22, r1
    2836:	71 05       	cpc	r23, r1
    2838:	99 f6       	brne	.-90     	; 0x27e0 <dir_read+0x22>
    283a:	89 2f       	mov	r24, r25
    283c:	99 23       	and	r25, r25
    283e:	41 f0       	breq	.+16     	; 0x2850 <dir_read+0x92>
    2840:	1e 86       	std	Y+14, r1	; 0x0e
    2842:	1f 86       	std	Y+15, r1	; 0x0f
    2844:	18 8a       	std	Y+16, r1	; 0x10
    2846:	19 8a       	std	Y+17, r1	; 0x11
    2848:	03 c0       	rjmp	.+6      	; 0x2850 <dir_read+0x92>
    284a:	84 e0       	ldi	r24, 0x04	; 4
    284c:	f9 cf       	rjmp	.-14     	; 0x2840 <dir_read+0x82>
    284e:	f8 cf       	rjmp	.-16     	; 0x2840 <dir_read+0x82>
    2850:	df 91       	pop	r29
    2852:	cf 91       	pop	r28
    2854:	1f 91       	pop	r17
    2856:	0f 91       	pop	r16
    2858:	ff 90       	pop	r15
    285a:	ef 90       	pop	r14
    285c:	df 90       	pop	r13
    285e:	cf 90       	pop	r12
    2860:	08 95       	ret

00002862 <remove_chain>:
    2862:	8f 92       	push	r8
    2864:	9f 92       	push	r9
    2866:	af 92       	push	r10
    2868:	bf 92       	push	r11
    286a:	cf 92       	push	r12
    286c:	df 92       	push	r13
    286e:	ef 92       	push	r14
    2870:	ff 92       	push	r15
    2872:	0f 93       	push	r16
    2874:	1f 93       	push	r17
    2876:	cf 93       	push	r28
    2878:	df 93       	push	r29
    287a:	ec 01       	movw	r28, r24
    287c:	6a 01       	movw	r12, r20
    287e:	7b 01       	movw	r14, r22
    2880:	42 30       	cpi	r20, 0x02	; 2
    2882:	51 05       	cpc	r21, r1
    2884:	61 05       	cpc	r22, r1
    2886:	71 05       	cpc	r23, r1
    2888:	08 f4       	brcc	.+2      	; 0x288c <remove_chain+0x2a>
    288a:	4c c0       	rjmp	.+152    	; 0x2924 <remove_chain+0xc2>
    288c:	8a 89       	ldd	r24, Y+18	; 0x12
    288e:	9b 89       	ldd	r25, Y+19	; 0x13
    2890:	ac 89       	ldd	r26, Y+20	; 0x14
    2892:	bd 89       	ldd	r27, Y+21	; 0x15
    2894:	48 17       	cp	r20, r24
    2896:	59 07       	cpc	r21, r25
    2898:	6a 07       	cpc	r22, r26
    289a:	7b 07       	cpc	r23, r27
    289c:	08 f0       	brcs	.+2      	; 0x28a0 <remove_chain+0x3e>
    289e:	44 c0       	rjmp	.+136    	; 0x2928 <remove_chain+0xc6>
    28a0:	35 c0       	rjmp	.+106    	; 0x290c <remove_chain+0xaa>
    28a2:	b7 01       	movw	r22, r14
    28a4:	a6 01       	movw	r20, r12
    28a6:	ce 01       	movw	r24, r28
    28a8:	78 d8       	rcall	.-3856   	; 0x199a <get_fat>
    28aa:	4b 01       	movw	r8, r22
    28ac:	5c 01       	movw	r10, r24
    28ae:	67 2b       	or	r22, r23
    28b0:	68 2b       	or	r22, r24
    28b2:	69 2b       	or	r22, r25
    28b4:	d9 f1       	breq	.+118    	; 0x292c <remove_chain+0xca>
    28b6:	81 e0       	ldi	r24, 0x01	; 1
    28b8:	88 16       	cp	r8, r24
    28ba:	91 04       	cpc	r9, r1
    28bc:	a1 04       	cpc	r10, r1
    28be:	b1 04       	cpc	r11, r1
    28c0:	b9 f1       	breq	.+110    	; 0x2930 <remove_chain+0xce>
    28c2:	2f ef       	ldi	r18, 0xFF	; 255
    28c4:	82 16       	cp	r8, r18
    28c6:	92 06       	cpc	r9, r18
    28c8:	a2 06       	cpc	r10, r18
    28ca:	b2 06       	cpc	r11, r18
    28cc:	99 f1       	breq	.+102    	; 0x2934 <remove_chain+0xd2>
    28ce:	00 e0       	ldi	r16, 0x00	; 0
    28d0:	10 e0       	ldi	r17, 0x00	; 0
    28d2:	98 01       	movw	r18, r16
    28d4:	b7 01       	movw	r22, r14
    28d6:	a6 01       	movw	r20, r12
    28d8:	ce 01       	movw	r24, r28
    28da:	1e da       	rcall	.-3012   	; 0x1d18 <put_fat>
    28dc:	81 11       	cpse	r24, r1
    28de:	2b c0       	rjmp	.+86     	; 0x2936 <remove_chain+0xd4>
    28e0:	8e 85       	ldd	r24, Y+14	; 0x0e
    28e2:	9f 85       	ldd	r25, Y+15	; 0x0f
    28e4:	a8 89       	ldd	r26, Y+16	; 0x10
    28e6:	b9 89       	ldd	r27, Y+17	; 0x11
    28e8:	8f 3f       	cpi	r24, 0xFF	; 255
    28ea:	2f ef       	ldi	r18, 0xFF	; 255
    28ec:	92 07       	cpc	r25, r18
    28ee:	a2 07       	cpc	r26, r18
    28f0:	b2 07       	cpc	r27, r18
    28f2:	51 f0       	breq	.+20     	; 0x2908 <remove_chain+0xa6>
    28f4:	01 96       	adiw	r24, 0x01	; 1
    28f6:	a1 1d       	adc	r26, r1
    28f8:	b1 1d       	adc	r27, r1
    28fa:	8e 87       	std	Y+14, r24	; 0x0e
    28fc:	9f 87       	std	Y+15, r25	; 0x0f
    28fe:	a8 8b       	std	Y+16, r26	; 0x10
    2900:	b9 8b       	std	Y+17, r27	; 0x11
    2902:	8d 81       	ldd	r24, Y+5	; 0x05
    2904:	81 60       	ori	r24, 0x01	; 1
    2906:	8d 83       	std	Y+5, r24	; 0x05
    2908:	75 01       	movw	r14, r10
    290a:	64 01       	movw	r12, r8
    290c:	8a 89       	ldd	r24, Y+18	; 0x12
    290e:	9b 89       	ldd	r25, Y+19	; 0x13
    2910:	ac 89       	ldd	r26, Y+20	; 0x14
    2912:	bd 89       	ldd	r27, Y+21	; 0x15
    2914:	c8 16       	cp	r12, r24
    2916:	d9 06       	cpc	r13, r25
    2918:	ea 06       	cpc	r14, r26
    291a:	fb 06       	cpc	r15, r27
    291c:	08 f4       	brcc	.+2      	; 0x2920 <remove_chain+0xbe>
    291e:	c1 cf       	rjmp	.-126    	; 0x28a2 <remove_chain+0x40>
    2920:	80 e0       	ldi	r24, 0x00	; 0
    2922:	09 c0       	rjmp	.+18     	; 0x2936 <remove_chain+0xd4>
    2924:	82 e0       	ldi	r24, 0x02	; 2
    2926:	07 c0       	rjmp	.+14     	; 0x2936 <remove_chain+0xd4>
    2928:	82 e0       	ldi	r24, 0x02	; 2
    292a:	05 c0       	rjmp	.+10     	; 0x2936 <remove_chain+0xd4>
    292c:	80 e0       	ldi	r24, 0x00	; 0
    292e:	03 c0       	rjmp	.+6      	; 0x2936 <remove_chain+0xd4>
    2930:	82 e0       	ldi	r24, 0x02	; 2
    2932:	01 c0       	rjmp	.+2      	; 0x2936 <remove_chain+0xd4>
    2934:	81 e0       	ldi	r24, 0x01	; 1
    2936:	df 91       	pop	r29
    2938:	cf 91       	pop	r28
    293a:	1f 91       	pop	r17
    293c:	0f 91       	pop	r16
    293e:	ff 90       	pop	r15
    2940:	ef 90       	pop	r14
    2942:	df 90       	pop	r13
    2944:	cf 90       	pop	r12
    2946:	bf 90       	pop	r11
    2948:	af 90       	pop	r10
    294a:	9f 90       	pop	r9
    294c:	8f 90       	pop	r8
    294e:	08 95       	ret

00002950 <f_mount>:
    2950:	1f 93       	push	r17
    2952:	cf 93       	push	r28
    2954:	df 93       	push	r29
    2956:	00 d0       	rcall	.+0      	; 0x2958 <f_mount+0x8>
    2958:	00 d0       	rcall	.+0      	; 0x295a <f_mount+0xa>
    295a:	00 d0       	rcall	.+0      	; 0x295c <f_mount+0xc>
    295c:	cd b7       	in	r28, 0x3d	; 61
    295e:	de b7       	in	r29, 0x3e	; 62
    2960:	9c 83       	std	Y+4, r25	; 0x04
    2962:	8b 83       	std	Y+3, r24	; 0x03
    2964:	7e 83       	std	Y+6, r23	; 0x06
    2966:	6d 83       	std	Y+5, r22	; 0x05
    2968:	14 2f       	mov	r17, r20
    296a:	7a 83       	std	Y+2, r23	; 0x02
    296c:	69 83       	std	Y+1, r22	; 0x01
    296e:	ce 01       	movw	r24, r28
    2970:	01 96       	adiw	r24, 0x01	; 1
    2972:	0e 94 01 07 	call	0xe02	; 0xe02 <get_ldnumber>
    2976:	99 23       	and	r25, r25
    2978:	34 f1       	brlt	.+76     	; 0x29c6 <f_mount+0x76>
    297a:	fc 01       	movw	r30, r24
    297c:	ee 0f       	add	r30, r30
    297e:	ff 1f       	adc	r31, r31
    2980:	e3 56       	subi	r30, 0x63	; 99
    2982:	fe 4f       	sbci	r31, 0xFE	; 254
    2984:	01 90       	ld	r0, Z+
    2986:	f0 81       	ld	r31, Z
    2988:	e0 2d       	mov	r30, r0
    298a:	30 97       	sbiw	r30, 0x00	; 0
    298c:	09 f0       	breq	.+2      	; 0x2990 <f_mount+0x40>
    298e:	10 82       	st	Z, r1
    2990:	eb 81       	ldd	r30, Y+3	; 0x03
    2992:	fc 81       	ldd	r31, Y+4	; 0x04
    2994:	30 97       	sbiw	r30, 0x00	; 0
    2996:	e9 f0       	breq	.+58     	; 0x29d2 <f_mount+0x82>
    2998:	10 82       	st	Z, r1
    299a:	2b 81       	ldd	r18, Y+3	; 0x03
    299c:	3c 81       	ldd	r19, Y+4	; 0x04
    299e:	88 0f       	add	r24, r24
    29a0:	99 1f       	adc	r25, r25
    29a2:	fc 01       	movw	r30, r24
    29a4:	e3 56       	subi	r30, 0x63	; 99
    29a6:	fe 4f       	sbci	r31, 0xFE	; 254
    29a8:	31 83       	std	Z+1, r19	; 0x01
    29aa:	20 83       	st	Z, r18
    29ac:	23 2b       	or	r18, r19
    29ae:	69 f0       	breq	.+26     	; 0x29ca <f_mount+0x7a>
    29b0:	11 30       	cpi	r17, 0x01	; 1
    29b2:	69 f4       	brne	.+26     	; 0x29ce <f_mount+0x7e>
    29b4:	40 e0       	ldi	r20, 0x00	; 0
    29b6:	be 01       	movw	r22, r28
    29b8:	6b 5f       	subi	r22, 0xFB	; 251
    29ba:	7f 4f       	sbci	r23, 0xFF	; 255
    29bc:	ce 01       	movw	r24, r28
    29be:	03 96       	adiw	r24, 0x03	; 3
    29c0:	0e 94 69 08 	call	0x10d2	; 0x10d2 <find_volume>
    29c4:	0e c0       	rjmp	.+28     	; 0x29e2 <f_mount+0x92>
    29c6:	8b e0       	ldi	r24, 0x0B	; 11
    29c8:	0c c0       	rjmp	.+24     	; 0x29e2 <f_mount+0x92>
    29ca:	80 e0       	ldi	r24, 0x00	; 0
    29cc:	0a c0       	rjmp	.+20     	; 0x29e2 <f_mount+0x92>
    29ce:	80 e0       	ldi	r24, 0x00	; 0
    29d0:	08 c0       	rjmp	.+16     	; 0x29e2 <f_mount+0x92>
    29d2:	88 0f       	add	r24, r24
    29d4:	99 1f       	adc	r25, r25
    29d6:	fc 01       	movw	r30, r24
    29d8:	e3 56       	subi	r30, 0x63	; 99
    29da:	fe 4f       	sbci	r31, 0xFE	; 254
    29dc:	11 82       	std	Z+1, r1	; 0x01
    29de:	10 82       	st	Z, r1
    29e0:	80 e0       	ldi	r24, 0x00	; 0
    29e2:	26 96       	adiw	r28, 0x06	; 6
    29e4:	0f b6       	in	r0, 0x3f	; 63
    29e6:	f8 94       	cli
    29e8:	de bf       	out	0x3e, r29	; 62
    29ea:	0f be       	out	0x3f, r0	; 63
    29ec:	cd bf       	out	0x3d, r28	; 61
    29ee:	df 91       	pop	r29
    29f0:	cf 91       	pop	r28
    29f2:	1f 91       	pop	r17
    29f4:	08 95       	ret

000029f6 <f_open>:
    29f6:	3f 92       	push	r3
    29f8:	4f 92       	push	r4
    29fa:	5f 92       	push	r5
    29fc:	6f 92       	push	r6
    29fe:	7f 92       	push	r7
    2a00:	8f 92       	push	r8
    2a02:	9f 92       	push	r9
    2a04:	af 92       	push	r10
    2a06:	bf 92       	push	r11
    2a08:	cf 92       	push	r12
    2a0a:	df 92       	push	r13
    2a0c:	ef 92       	push	r14
    2a0e:	ff 92       	push	r15
    2a10:	0f 93       	push	r16
    2a12:	1f 93       	push	r17
    2a14:	cf 93       	push	r28
    2a16:	df 93       	push	r29
    2a18:	cd b7       	in	r28, 0x3d	; 61
    2a1a:	de b7       	in	r29, 0x3e	; 62
    2a1c:	a4 97       	sbiw	r28, 0x24	; 36
    2a1e:	0f b6       	in	r0, 0x3f	; 63
    2a20:	f8 94       	cli
    2a22:	de bf       	out	0x3e, r29	; 62
    2a24:	0f be       	out	0x3f, r0	; 63
    2a26:	cd bf       	out	0x3d, r28	; 61
    2a28:	7c a3       	std	Y+36, r23	; 0x24
    2a2a:	6b a3       	std	Y+35, r22	; 0x23
    2a2c:	00 97       	sbiw	r24, 0x00	; 0
    2a2e:	09 f4       	brne	.+2      	; 0x2a32 <f_open+0x3c>
    2a30:	cd c0       	rjmp	.+410    	; 0x2bcc <f_open+0x1d6>
    2a32:	d4 2e       	mov	r13, r20
    2a34:	8c 01       	movw	r16, r24
    2a36:	fc 01       	movw	r30, r24
    2a38:	11 82       	std	Z+1, r1	; 0x01
    2a3a:	10 82       	st	Z, r1
    2a3c:	4e 71       	andi	r20, 0x1E	; 30
    2a3e:	be 01       	movw	r22, r28
    2a40:	6d 5d       	subi	r22, 0xDD	; 221
    2a42:	7f 4f       	sbci	r23, 0xFF	; 255
    2a44:	ce 01       	movw	r24, r28
    2a46:	01 96       	adiw	r24, 0x01	; 1
    2a48:	0e 94 69 08 	call	0x10d2	; 0x10d2 <find_volume>
    2a4c:	81 11       	cpse	r24, r1
    2a4e:	e8 c0       	rjmp	.+464    	; 0x2c20 <f_open+0x22a>
    2a50:	fd 2d       	mov	r31, r13
    2a52:	ff 71       	andi	r31, 0x1F	; 31
    2a54:	3f 2e       	mov	r3, r31
    2a56:	ce 01       	movw	r24, r28
    2a58:	47 96       	adiw	r24, 0x17	; 23
    2a5a:	9e 8b       	std	Y+22, r25	; 0x16
    2a5c:	8d 8b       	std	Y+21, r24	; 0x15
    2a5e:	6b a1       	ldd	r22, Y+35	; 0x23
    2a60:	7c a1       	ldd	r23, Y+36	; 0x24
    2a62:	46 97       	sbiw	r24, 0x16	; 22
    2a64:	cf dc       	rcall	.-1634   	; 0x2404 <follow_path>
    2a66:	eb 88       	ldd	r14, Y+19	; 0x13
    2a68:	fc 88       	ldd	r15, Y+20	; 0x14
    2a6a:	81 11       	cpse	r24, r1
    2a6c:	b1 c0       	rjmp	.+354    	; 0x2bd0 <f_open+0x1da>
    2a6e:	e1 14       	cp	r14, r1
    2a70:	f1 04       	cpc	r15, r1
    2a72:	09 f0       	breq	.+2      	; 0x2a76 <f_open+0x80>
    2a74:	b7 c0       	rjmp	.+366    	; 0x2be4 <f_open+0x1ee>
    2a76:	b1 c0       	rjmp	.+354    	; 0x2bda <f_open+0x1e4>
    2a78:	84 30       	cpi	r24, 0x04	; 4
    2a7a:	09 f0       	breq	.+2      	; 0x2a7e <f_open+0x88>
    2a7c:	c3 c0       	rjmp	.+390    	; 0x2c04 <f_open+0x20e>
    2a7e:	ce 01       	movw	r24, r28
    2a80:	01 96       	adiw	r24, 0x01	; 1
    2a82:	65 de       	rcall	.-822    	; 0x274e <dir_register>
    2a84:	23 2d       	mov	r18, r3
    2a86:	28 60       	ori	r18, 0x08	; 8
    2a88:	32 2e       	mov	r3, r18
    2a8a:	eb 88       	ldd	r14, Y+19	; 0x13
    2a8c:	fc 88       	ldd	r15, Y+20	; 0x14
    2a8e:	88 23       	and	r24, r24
    2a90:	41 f0       	breq	.+16     	; 0x2aa2 <f_open+0xac>
    2a92:	b0 c0       	rjmp	.+352    	; 0x2bf4 <f_open+0x1fe>
    2a94:	f7 01       	movw	r30, r14
    2a96:	83 85       	ldd	r24, Z+11	; 0x0b
    2a98:	81 71       	andi	r24, 0x11	; 17
    2a9a:	09 f0       	breq	.+2      	; 0x2a9e <f_open+0xa8>
    2a9c:	be c0       	rjmp	.+380    	; 0x2c1a <f_open+0x224>
    2a9e:	d2 fc       	sbrc	r13, 2
    2aa0:	be c0       	rjmp	.+380    	; 0x2c1e <f_open+0x228>
    2aa2:	33 fe       	sbrs	r3, 3
    2aa4:	ab c0       	rjmp	.+342    	; 0x2bfc <f_open+0x206>
    2aa6:	f7 01       	movw	r30, r14
    2aa8:	16 86       	std	Z+14, r1	; 0x0e
    2aaa:	17 86       	std	Z+15, r1	; 0x0f
    2aac:	91 e2       	ldi	r25, 0x21	; 33
    2aae:	90 8b       	std	Z+16, r25	; 0x10
    2ab0:	86 e4       	ldi	r24, 0x46	; 70
    2ab2:	81 8b       	std	Z+17, r24	; 0x11
    2ab4:	16 8a       	std	Z+22, r1	; 0x16
    2ab6:	17 8a       	std	Z+23, r1	; 0x17
    2ab8:	90 8f       	std	Z+24, r25	; 0x18
    2aba:	81 8f       	std	Z+25, r24	; 0x19
    2abc:	13 86       	std	Z+11, r1	; 0x0b
    2abe:	14 8e       	std	Z+28, r1	; 0x1c
    2ac0:	15 8e       	std	Z+29, r1	; 0x1d
    2ac2:	16 8e       	std	Z+30, r1	; 0x1e
    2ac4:	17 8e       	std	Z+31, r1	; 0x1f
    2ac6:	c9 80       	ldd	r12, Y+1	; 0x01
    2ac8:	da 80       	ldd	r13, Y+2	; 0x02
    2aca:	b7 01       	movw	r22, r14
    2acc:	c6 01       	movw	r24, r12
    2ace:	0e 94 df 06 	call	0xdbe	; 0xdbe <ld_clust>
    2ad2:	2b 01       	movw	r4, r22
    2ad4:	3c 01       	movw	r6, r24
    2ad6:	f7 01       	movw	r30, r14
    2ad8:	12 8e       	std	Z+26, r1	; 0x1a
    2ada:	13 8e       	std	Z+27, r1	; 0x1b
    2adc:	14 8a       	std	Z+20, r1	; 0x14
    2ade:	15 8a       	std	Z+21, r1	; 0x15
    2ae0:	81 e0       	ldi	r24, 0x01	; 1
    2ae2:	f6 01       	movw	r30, r12
    2ae4:	84 83       	std	Z+4, r24	; 0x04
    2ae6:	41 14       	cp	r4, r1
    2ae8:	51 04       	cpc	r5, r1
    2aea:	61 04       	cpc	r6, r1
    2aec:	71 04       	cpc	r7, r1
    2aee:	09 f4       	brne	.+2      	; 0x2af2 <f_open+0xfc>
    2af0:	85 c0       	rjmp	.+266    	; 0x2bfc <f_open+0x206>
    2af2:	82 a4       	ldd	r8, Z+42	; 0x2a
    2af4:	93 a4       	ldd	r9, Z+43	; 0x2b
    2af6:	a4 a4       	ldd	r10, Z+44	; 0x2c
    2af8:	b5 a4       	ldd	r11, Z+45	; 0x2d
    2afa:	b3 01       	movw	r22, r6
    2afc:	a2 01       	movw	r20, r4
    2afe:	c6 01       	movw	r24, r12
    2b00:	b0 de       	rcall	.-672    	; 0x2862 <remove_chain>
    2b02:	81 11       	cpse	r24, r1
    2b04:	77 c0       	rjmp	.+238    	; 0x2bf4 <f_open+0x1fe>
    2b06:	89 81       	ldd	r24, Y+1	; 0x01
    2b08:	9a 81       	ldd	r25, Y+2	; 0x02
    2b0a:	f1 e0       	ldi	r31, 0x01	; 1
    2b0c:	4f 1a       	sub	r4, r31
    2b0e:	51 08       	sbc	r5, r1
    2b10:	61 08       	sbc	r6, r1
    2b12:	71 08       	sbc	r7, r1
    2b14:	fc 01       	movw	r30, r24
    2b16:	42 86       	std	Z+10, r4	; 0x0a
    2b18:	53 86       	std	Z+11, r5	; 0x0b
    2b1a:	64 86       	std	Z+12, r6	; 0x0c
    2b1c:	75 86       	std	Z+13, r7	; 0x0d
    2b1e:	b5 01       	movw	r22, r10
    2b20:	a4 01       	movw	r20, r8
    2b22:	0e 94 a1 07 	call	0xf42	; 0xf42 <move_window>
    2b26:	88 23       	and	r24, r24
    2b28:	31 f0       	breq	.+12     	; 0x2b36 <f_open+0x140>
    2b2a:	7a c0       	rjmp	.+244    	; 0x2c20 <f_open+0x22a>
    2b2c:	d1 fe       	sbrs	r13, 1
    2b2e:	66 c0       	rjmp	.+204    	; 0x2bfc <f_open+0x206>
    2b30:	80 fd       	sbrc	r24, 0
    2b32:	5d c0       	rjmp	.+186    	; 0x2bee <f_open+0x1f8>
    2b34:	63 c0       	rjmp	.+198    	; 0x2bfc <f_open+0x206>
    2b36:	f3 2d       	mov	r31, r3
    2b38:	f0 62       	ori	r31, 0x20	; 32
    2b3a:	3f 2e       	mov	r3, r31
    2b3c:	e9 81       	ldd	r30, Y+1	; 0x01
    2b3e:	fa 81       	ldd	r31, Y+2	; 0x02
    2b40:	82 a5       	ldd	r24, Z+42	; 0x2a
    2b42:	93 a5       	ldd	r25, Z+43	; 0x2b
    2b44:	a4 a5       	ldd	r26, Z+44	; 0x2c
    2b46:	b5 a5       	ldd	r27, Z+45	; 0x2d
    2b48:	f8 01       	movw	r30, r16
    2b4a:	82 8f       	std	Z+26, r24	; 0x1a
    2b4c:	93 8f       	std	Z+27, r25	; 0x1b
    2b4e:	a4 8f       	std	Z+28, r26	; 0x1c
    2b50:	b5 8f       	std	Z+29, r27	; 0x1d
    2b52:	f7 8e       	std	Z+31, r15	; 0x1f
    2b54:	e6 8e       	std	Z+30, r14	; 0x1e
    2b56:	f8 01       	movw	r30, r16
    2b58:	34 82       	std	Z+4, r3	; 0x04
    2b5a:	15 82       	std	Z+5, r1	; 0x05
    2b5c:	c9 80       	ldd	r12, Y+1	; 0x01
    2b5e:	da 80       	ldd	r13, Y+2	; 0x02
    2b60:	b7 01       	movw	r22, r14
    2b62:	c6 01       	movw	r24, r12
    2b64:	0e 94 df 06 	call	0xdbe	; 0xdbe <ld_clust>
    2b68:	f8 01       	movw	r30, r16
    2b6a:	66 87       	std	Z+14, r22	; 0x0e
    2b6c:	77 87       	std	Z+15, r23	; 0x0f
    2b6e:	80 8b       	std	Z+16, r24	; 0x10
    2b70:	91 8b       	std	Z+17, r25	; 0x11
    2b72:	f7 01       	movw	r30, r14
    2b74:	27 8d       	ldd	r18, Z+31	; 0x1f
    2b76:	86 8d       	ldd	r24, Z+30	; 0x1e
    2b78:	90 e0       	ldi	r25, 0x00	; 0
    2b7a:	a0 e0       	ldi	r26, 0x00	; 0
    2b7c:	b0 e0       	ldi	r27, 0x00	; 0
    2b7e:	dc 01       	movw	r26, r24
    2b80:	99 27       	eor	r25, r25
    2b82:	88 27       	eor	r24, r24
    2b84:	b2 2b       	or	r27, r18
    2b86:	24 8d       	ldd	r18, Z+28	; 0x1c
    2b88:	82 2b       	or	r24, r18
    2b8a:	45 8d       	ldd	r20, Z+29	; 0x1d
    2b8c:	50 e0       	ldi	r21, 0x00	; 0
    2b8e:	54 2f       	mov	r21, r20
    2b90:	44 27       	eor	r20, r20
    2b92:	60 e0       	ldi	r22, 0x00	; 0
    2b94:	70 e0       	ldi	r23, 0x00	; 0
    2b96:	84 2b       	or	r24, r20
    2b98:	95 2b       	or	r25, r21
    2b9a:	a6 2b       	or	r26, r22
    2b9c:	b7 2b       	or	r27, r23
    2b9e:	f8 01       	movw	r30, r16
    2ba0:	82 87       	std	Z+10, r24	; 0x0a
    2ba2:	93 87       	std	Z+11, r25	; 0x0b
    2ba4:	a4 87       	std	Z+12, r26	; 0x0c
    2ba6:	b5 87       	std	Z+13, r27	; 0x0d
    2ba8:	16 82       	std	Z+6, r1	; 0x06
    2baa:	17 82       	std	Z+7, r1	; 0x07
    2bac:	10 86       	std	Z+8, r1	; 0x08
    2bae:	11 86       	std	Z+9, r1	; 0x09
    2bb0:	16 8a       	std	Z+22, r1	; 0x16
    2bb2:	17 8a       	std	Z+23, r1	; 0x17
    2bb4:	10 8e       	std	Z+24, r1	; 0x18
    2bb6:	11 8e       	std	Z+25, r1	; 0x19
    2bb8:	d1 82       	std	Z+1, r13	; 0x01
    2bba:	c0 82       	st	Z, r12
    2bbc:	f6 01       	movw	r30, r12
    2bbe:	86 81       	ldd	r24, Z+6	; 0x06
    2bc0:	97 81       	ldd	r25, Z+7	; 0x07
    2bc2:	f8 01       	movw	r30, r16
    2bc4:	93 83       	std	Z+3, r25	; 0x03
    2bc6:	82 83       	std	Z+2, r24	; 0x02
    2bc8:	80 e0       	ldi	r24, 0x00	; 0
    2bca:	2a c0       	rjmp	.+84     	; 0x2c20 <f_open+0x22a>
    2bcc:	89 e0       	ldi	r24, 0x09	; 9
    2bce:	28 c0       	rjmp	.+80     	; 0x2c20 <f_open+0x22a>
    2bd0:	4d 2d       	mov	r20, r13
    2bd2:	4c 71       	andi	r20, 0x1C	; 28
    2bd4:	09 f0       	breq	.+2      	; 0x2bd8 <f_open+0x1e2>
    2bd6:	50 cf       	rjmp	.-352    	; 0x2a78 <f_open+0x82>
    2bd8:	0d c0       	rjmp	.+26     	; 0x2bf4 <f_open+0x1fe>
    2bda:	4d 2d       	mov	r20, r13
    2bdc:	4c 71       	andi	r20, 0x1C	; 28
    2bde:	89 f4       	brne	.+34     	; 0x2c02 <f_open+0x20c>
    2be0:	86 e0       	ldi	r24, 0x06	; 6
    2be2:	08 c0       	rjmp	.+16     	; 0x2bf4 <f_open+0x1fe>
    2be4:	8d 2d       	mov	r24, r13
    2be6:	8c 71       	andi	r24, 0x1C	; 28
    2be8:	09 f0       	breq	.+2      	; 0x2bec <f_open+0x1f6>
    2bea:	54 cf       	rjmp	.-344    	; 0x2a94 <f_open+0x9e>
    2bec:	11 c0       	rjmp	.+34     	; 0x2c10 <f_open+0x21a>
    2bee:	87 e0       	ldi	r24, 0x07	; 7
    2bf0:	01 c0       	rjmp	.+2      	; 0x2bf4 <f_open+0x1fe>
    2bf2:	84 e0       	ldi	r24, 0x04	; 4
    2bf4:	88 23       	and	r24, r24
    2bf6:	09 f4       	brne	.+2      	; 0x2bfa <f_open+0x204>
    2bf8:	ae cf       	rjmp	.-164    	; 0x2b56 <f_open+0x160>
    2bfa:	12 c0       	rjmp	.+36     	; 0x2c20 <f_open+0x22a>
    2bfc:	33 fc       	sbrc	r3, 3
    2bfe:	9b cf       	rjmp	.-202    	; 0x2b36 <f_open+0x140>
    2c00:	9d cf       	rjmp	.-198    	; 0x2b3c <f_open+0x146>
    2c02:	86 e0       	ldi	r24, 0x06	; 6
    2c04:	f3 2d       	mov	r31, r3
    2c06:	f8 60       	ori	r31, 0x08	; 8
    2c08:	3f 2e       	mov	r3, r31
    2c0a:	eb 88       	ldd	r14, Y+19	; 0x13
    2c0c:	fc 88       	ldd	r15, Y+20	; 0x14
    2c0e:	f2 cf       	rjmp	.-28     	; 0x2bf4 <f_open+0x1fe>
    2c10:	f7 01       	movw	r30, r14
    2c12:	83 85       	ldd	r24, Z+11	; 0x0b
    2c14:	84 fd       	sbrc	r24, 4
    2c16:	ed cf       	rjmp	.-38     	; 0x2bf2 <f_open+0x1fc>
    2c18:	89 cf       	rjmp	.-238    	; 0x2b2c <f_open+0x136>
    2c1a:	87 e0       	ldi	r24, 0x07	; 7
    2c1c:	01 c0       	rjmp	.+2      	; 0x2c20 <f_open+0x22a>
    2c1e:	88 e0       	ldi	r24, 0x08	; 8
    2c20:	a4 96       	adiw	r28, 0x24	; 36
    2c22:	0f b6       	in	r0, 0x3f	; 63
    2c24:	f8 94       	cli
    2c26:	de bf       	out	0x3e, r29	; 62
    2c28:	0f be       	out	0x3f, r0	; 63
    2c2a:	cd bf       	out	0x3d, r28	; 61
    2c2c:	df 91       	pop	r29
    2c2e:	cf 91       	pop	r28
    2c30:	1f 91       	pop	r17
    2c32:	0f 91       	pop	r16
    2c34:	ff 90       	pop	r15
    2c36:	ef 90       	pop	r14
    2c38:	df 90       	pop	r13
    2c3a:	cf 90       	pop	r12
    2c3c:	bf 90       	pop	r11
    2c3e:	af 90       	pop	r10
    2c40:	9f 90       	pop	r9
    2c42:	8f 90       	pop	r8
    2c44:	7f 90       	pop	r7
    2c46:	6f 90       	pop	r6
    2c48:	5f 90       	pop	r5
    2c4a:	4f 90       	pop	r4
    2c4c:	3f 90       	pop	r3
    2c4e:	08 95       	ret

00002c50 <f_write>:
    2c50:	3f 92       	push	r3
    2c52:	4f 92       	push	r4
    2c54:	5f 92       	push	r5
    2c56:	6f 92       	push	r6
    2c58:	7f 92       	push	r7
    2c5a:	8f 92       	push	r8
    2c5c:	9f 92       	push	r9
    2c5e:	af 92       	push	r10
    2c60:	bf 92       	push	r11
    2c62:	cf 92       	push	r12
    2c64:	df 92       	push	r13
    2c66:	ef 92       	push	r14
    2c68:	ff 92       	push	r15
    2c6a:	0f 93       	push	r16
    2c6c:	1f 93       	push	r17
    2c6e:	cf 93       	push	r28
    2c70:	df 93       	push	r29
    2c72:	00 d0       	rcall	.+0      	; 0x2c74 <f_write+0x24>
    2c74:	00 d0       	rcall	.+0      	; 0x2c76 <f_write+0x26>
    2c76:	00 d0       	rcall	.+0      	; 0x2c78 <f_write+0x28>
    2c78:	cd b7       	in	r28, 0x3d	; 61
    2c7a:	de b7       	in	r29, 0x3e	; 62
    2c7c:	9e 83       	std	Y+6, r25	; 0x06
    2c7e:	8d 83       	std	Y+5, r24	; 0x05
    2c80:	4b 01       	movw	r8, r22
    2c82:	6a 01       	movw	r12, r20
    2c84:	59 01       	movw	r10, r18
    2c86:	d9 01       	movw	r26, r18
    2c88:	1d 92       	st	X+, r1
    2c8a:	1c 92       	st	X, r1
    2c8c:	0e 94 45 08 	call	0x108a	; 0x108a <validate>
    2c90:	81 11       	cpse	r24, r1
    2c92:	c3 c1       	rjmp	.+902    	; 0x301a <f_write+0x3ca>
    2c94:	ed 81       	ldd	r30, Y+5	; 0x05
    2c96:	fe 81       	ldd	r31, Y+6	; 0x06
    2c98:	85 81       	ldd	r24, Z+5	; 0x05
    2c9a:	81 11       	cpse	r24, r1
    2c9c:	be c1       	rjmp	.+892    	; 0x301a <f_write+0x3ca>
    2c9e:	84 81       	ldd	r24, Z+4	; 0x04
    2ca0:	81 ff       	sbrs	r24, 1
    2ca2:	ba c1       	rjmp	.+884    	; 0x3018 <f_write+0x3c8>
    2ca4:	86 81       	ldd	r24, Z+6	; 0x06
    2ca6:	97 81       	ldd	r25, Z+7	; 0x07
    2ca8:	a0 85       	ldd	r26, Z+8	; 0x08
    2caa:	b1 85       	ldd	r27, Z+9	; 0x09
    2cac:	ac 01       	movw	r20, r24
    2cae:	bd 01       	movw	r22, r26
    2cb0:	4c 0d       	add	r20, r12
    2cb2:	5d 1d       	adc	r21, r13
    2cb4:	61 1d       	adc	r22, r1
    2cb6:	71 1d       	adc	r23, r1
    2cb8:	48 17       	cp	r20, r24
    2cba:	59 07       	cpc	r21, r25
    2cbc:	6a 07       	cpc	r22, r26
    2cbe:	7b 07       	cpc	r23, r27
    2cc0:	08 f4       	brcc	.+2      	; 0x2cc4 <f_write+0x74>
    2cc2:	8d c1       	rjmp	.+794    	; 0x2fde <f_write+0x38e>
    2cc4:	c1 14       	cp	r12, r1
    2cc6:	d1 04       	cpc	r13, r1
    2cc8:	09 f4       	brne	.+2      	; 0x2ccc <f_write+0x7c>
    2cca:	89 c1       	rjmp	.+786    	; 0x2fde <f_write+0x38e>
    2ccc:	b0 96       	adiw	r30, 0x20	; 32
    2cce:	fc 83       	std	Y+4, r31	; 0x04
    2cd0:	eb 83       	std	Y+3, r30	; 0x03
    2cd2:	ed 81       	ldd	r30, Y+5	; 0x05
    2cd4:	fe 81       	ldd	r31, Y+6	; 0x06
    2cd6:	86 81       	ldd	r24, Z+6	; 0x06
    2cd8:	97 81       	ldd	r25, Z+7	; 0x07
    2cda:	a0 85       	ldd	r26, Z+8	; 0x08
    2cdc:	b1 85       	ldd	r27, Z+9	; 0x09
    2cde:	ac 01       	movw	r20, r24
    2ce0:	bd 01       	movw	r22, r26
    2ce2:	53 70       	andi	r21, 0x03	; 3
    2ce4:	66 27       	eor	r22, r22
    2ce6:	77 27       	eor	r23, r23
    2ce8:	45 2b       	or	r20, r21
    2cea:	46 2b       	or	r20, r22
    2cec:	47 2b       	or	r20, r23
    2cee:	09 f0       	breq	.+2      	; 0x2cf2 <f_write+0xa2>
    2cf0:	35 c1       	rjmp	.+618    	; 0x2f5c <f_write+0x30c>
    2cf2:	e0 80       	ld	r14, Z
    2cf4:	f1 80       	ldd	r15, Z+1	; 0x01
    2cf6:	f7 01       	movw	r30, r14
    2cf8:	22 81       	ldd	r18, Z+2	; 0x02
    2cfa:	21 50       	subi	r18, 0x01	; 1
    2cfc:	ac 01       	movw	r20, r24
    2cfe:	bd 01       	movw	r22, r26
    2d00:	03 2e       	mov	r0, r19
    2d02:	3a e0       	ldi	r19, 0x0A	; 10
    2d04:	76 95       	lsr	r23
    2d06:	67 95       	ror	r22
    2d08:	57 95       	ror	r21
    2d0a:	47 95       	ror	r20
    2d0c:	3a 95       	dec	r19
    2d0e:	d1 f7       	brne	.-12     	; 0x2d04 <f_write+0xb4>
    2d10:	30 2d       	mov	r19, r0
    2d12:	32 2e       	mov	r3, r18
    2d14:	34 22       	and	r3, r20
    2d16:	09 f0       	breq	.+2      	; 0x2d1a <f_write+0xca>
    2d18:	52 c0       	rjmp	.+164    	; 0x2dbe <f_write+0x16e>
    2d1a:	89 2b       	or	r24, r25
    2d1c:	8a 2b       	or	r24, r26
    2d1e:	8b 2b       	or	r24, r27
    2d20:	99 f4       	brne	.+38     	; 0x2d48 <f_write+0xf8>
    2d22:	ad 81       	ldd	r26, Y+5	; 0x05
    2d24:	be 81       	ldd	r27, Y+6	; 0x06
    2d26:	1e 96       	adiw	r26, 0x0e	; 14
    2d28:	6d 91       	ld	r22, X+
    2d2a:	7d 91       	ld	r23, X+
    2d2c:	8d 91       	ld	r24, X+
    2d2e:	9c 91       	ld	r25, X
    2d30:	51 97       	sbiw	r26, 0x11	; 17
    2d32:	61 15       	cp	r22, r1
    2d34:	71 05       	cpc	r23, r1
    2d36:	81 05       	cpc	r24, r1
    2d38:	91 05       	cpc	r25, r1
    2d3a:	a1 f4       	brne	.+40     	; 0x2d64 <f_write+0x114>
    2d3c:	40 e0       	ldi	r20, 0x00	; 0
    2d3e:	50 e0       	ldi	r21, 0x00	; 0
    2d40:	ba 01       	movw	r22, r20
    2d42:	c7 01       	movw	r24, r14
    2d44:	14 d9       	rcall	.-3544   	; 0x1f6e <create_chain>
    2d46:	08 c0       	rjmp	.+16     	; 0x2d58 <f_write+0x108>
    2d48:	ed 81       	ldd	r30, Y+5	; 0x05
    2d4a:	fe 81       	ldd	r31, Y+6	; 0x06
    2d4c:	42 89       	ldd	r20, Z+18	; 0x12
    2d4e:	53 89       	ldd	r21, Z+19	; 0x13
    2d50:	64 89       	ldd	r22, Z+20	; 0x14
    2d52:	75 89       	ldd	r23, Z+21	; 0x15
    2d54:	c7 01       	movw	r24, r14
    2d56:	0b d9       	rcall	.-3562   	; 0x1f6e <create_chain>
    2d58:	61 15       	cp	r22, r1
    2d5a:	71 05       	cpc	r23, r1
    2d5c:	81 05       	cpc	r24, r1
    2d5e:	91 05       	cpc	r25, r1
    2d60:	09 f4       	brne	.+2      	; 0x2d64 <f_write+0x114>
    2d62:	3d c1       	rjmp	.+634    	; 0x2fde <f_write+0x38e>
    2d64:	61 30       	cpi	r22, 0x01	; 1
    2d66:	71 05       	cpc	r23, r1
    2d68:	81 05       	cpc	r24, r1
    2d6a:	91 05       	cpc	r25, r1
    2d6c:	31 f4       	brne	.+12     	; 0x2d7a <f_write+0x12a>
    2d6e:	82 e0       	ldi	r24, 0x02	; 2
    2d70:	ad 81       	ldd	r26, Y+5	; 0x05
    2d72:	be 81       	ldd	r27, Y+6	; 0x06
    2d74:	15 96       	adiw	r26, 0x05	; 5
    2d76:	8c 93       	st	X, r24
    2d78:	50 c1       	rjmp	.+672    	; 0x301a <f_write+0x3ca>
    2d7a:	6f 3f       	cpi	r22, 0xFF	; 255
    2d7c:	bf ef       	ldi	r27, 0xFF	; 255
    2d7e:	7b 07       	cpc	r23, r27
    2d80:	8b 07       	cpc	r24, r27
    2d82:	9b 07       	cpc	r25, r27
    2d84:	29 f4       	brne	.+10     	; 0x2d90 <f_write+0x140>
    2d86:	81 e0       	ldi	r24, 0x01	; 1
    2d88:	ed 81       	ldd	r30, Y+5	; 0x05
    2d8a:	fe 81       	ldd	r31, Y+6	; 0x06
    2d8c:	85 83       	std	Z+5, r24	; 0x05
    2d8e:	45 c1       	rjmp	.+650    	; 0x301a <f_write+0x3ca>
    2d90:	ad 81       	ldd	r26, Y+5	; 0x05
    2d92:	be 81       	ldd	r27, Y+6	; 0x06
    2d94:	52 96       	adiw	r26, 0x12	; 18
    2d96:	6d 93       	st	X+, r22
    2d98:	7d 93       	st	X+, r23
    2d9a:	8d 93       	st	X+, r24
    2d9c:	9c 93       	st	X, r25
    2d9e:	55 97       	sbiw	r26, 0x15	; 21
    2da0:	1e 96       	adiw	r26, 0x0e	; 14
    2da2:	4d 90       	ld	r4, X+
    2da4:	5d 90       	ld	r5, X+
    2da6:	6d 90       	ld	r6, X+
    2da8:	7c 90       	ld	r7, X
    2daa:	51 97       	sbiw	r26, 0x11	; 17
    2dac:	45 28       	or	r4, r5
    2dae:	46 28       	or	r4, r6
    2db0:	47 28       	or	r4, r7
    2db2:	29 f4       	brne	.+10     	; 0x2dbe <f_write+0x16e>
    2db4:	fd 01       	movw	r30, r26
    2db6:	66 87       	std	Z+14, r22	; 0x0e
    2db8:	77 87       	std	Z+15, r23	; 0x0f
    2dba:	80 8b       	std	Z+16, r24	; 0x10
    2dbc:	91 8b       	std	Z+17, r25	; 0x11
    2dbe:	ad 81       	ldd	r26, Y+5	; 0x05
    2dc0:	be 81       	ldd	r27, Y+6	; 0x06
    2dc2:	14 96       	adiw	r26, 0x04	; 4
    2dc4:	8c 91       	ld	r24, X
    2dc6:	14 97       	sbiw	r26, 0x04	; 4
    2dc8:	86 ff       	sbrs	r24, 6
    2dca:	1e c0       	rjmp	.+60     	; 0x2e08 <f_write+0x1b8>
    2dcc:	56 96       	adiw	r26, 0x16	; 22
    2dce:	2d 91       	ld	r18, X+
    2dd0:	3d 91       	ld	r19, X+
    2dd2:	4d 91       	ld	r20, X+
    2dd4:	5c 91       	ld	r21, X
    2dd6:	59 97       	sbiw	r26, 0x19	; 25
    2dd8:	ed 91       	ld	r30, X+
    2dda:	fc 91       	ld	r31, X
    2ddc:	01 e0       	ldi	r16, 0x01	; 1
    2dde:	10 e0       	ldi	r17, 0x00	; 0
    2de0:	6b 81       	ldd	r22, Y+3	; 0x03
    2de2:	7c 81       	ldd	r23, Y+4	; 0x04
    2de4:	81 81       	ldd	r24, Z+1	; 0x01
    2de6:	0e 94 9f 03 	call	0x73e	; 0x73e <disk_write>
    2dea:	88 23       	and	r24, r24
    2dec:	29 f0       	breq	.+10     	; 0x2df8 <f_write+0x1a8>
    2dee:	81 e0       	ldi	r24, 0x01	; 1
    2df0:	ed 81       	ldd	r30, Y+5	; 0x05
    2df2:	fe 81       	ldd	r31, Y+6	; 0x06
    2df4:	85 83       	std	Z+5, r24	; 0x05
    2df6:	11 c1       	rjmp	.+546    	; 0x301a <f_write+0x3ca>
    2df8:	ad 81       	ldd	r26, Y+5	; 0x05
    2dfa:	be 81       	ldd	r27, Y+6	; 0x06
    2dfc:	14 96       	adiw	r26, 0x04	; 4
    2dfe:	8c 91       	ld	r24, X
    2e00:	14 97       	sbiw	r26, 0x04	; 4
    2e02:	8f 7b       	andi	r24, 0xBF	; 191
    2e04:	14 96       	adiw	r26, 0x04	; 4
    2e06:	8c 93       	st	X, r24
    2e08:	ed 81       	ldd	r30, Y+5	; 0x05
    2e0a:	fe 81       	ldd	r31, Y+6	; 0x06
    2e0c:	01 90       	ld	r0, Z+
    2e0e:	f0 81       	ld	r31, Z
    2e10:	e0 2d       	mov	r30, r0
    2e12:	fa 83       	std	Y+2, r31	; 0x02
    2e14:	e9 83       	std	Y+1, r30	; 0x01
    2e16:	ad 81       	ldd	r26, Y+5	; 0x05
    2e18:	be 81       	ldd	r27, Y+6	; 0x06
    2e1a:	52 96       	adiw	r26, 0x12	; 18
    2e1c:	4d 91       	ld	r20, X+
    2e1e:	5d 91       	ld	r21, X+
    2e20:	6d 91       	ld	r22, X+
    2e22:	7c 91       	ld	r23, X
    2e24:	55 97       	sbiw	r26, 0x15	; 21
    2e26:	cf 01       	movw	r24, r30
    2e28:	0e 94 9f 0c 	call	0x193e	; 0x193e <clust2sect>
    2e2c:	61 15       	cp	r22, r1
    2e2e:	71 05       	cpc	r23, r1
    2e30:	81 05       	cpc	r24, r1
    2e32:	91 05       	cpc	r25, r1
    2e34:	29 f4       	brne	.+10     	; 0x2e40 <f_write+0x1f0>
    2e36:	82 e0       	ldi	r24, 0x02	; 2
    2e38:	ed 81       	ldd	r30, Y+5	; 0x05
    2e3a:	fe 81       	ldd	r31, Y+6	; 0x06
    2e3c:	85 83       	std	Z+5, r24	; 0x05
    2e3e:	ed c0       	rjmp	.+474    	; 0x301a <f_write+0x3ca>
    2e40:	2b 01       	movw	r4, r22
    2e42:	3c 01       	movw	r6, r24
    2e44:	43 0c       	add	r4, r3
    2e46:	51 1c       	adc	r5, r1
    2e48:	61 1c       	adc	r6, r1
    2e4a:	71 1c       	adc	r7, r1
    2e4c:	76 01       	movw	r14, r12
    2e4e:	ef 2c       	mov	r14, r15
    2e50:	ff 24       	eor	r15, r15
    2e52:	e6 94       	lsr	r14
    2e54:	e6 94       	lsr	r14
    2e56:	e1 14       	cp	r14, r1
    2e58:	f1 04       	cpc	r15, r1
    2e5a:	09 f4       	brne	.+2      	; 0x2e5e <f_write+0x20e>
    2e5c:	4c c0       	rjmp	.+152    	; 0x2ef6 <f_write+0x2a6>
    2e5e:	a9 81       	ldd	r26, Y+1	; 0x01
    2e60:	ba 81       	ldd	r27, Y+2	; 0x02
    2e62:	12 96       	adiw	r26, 0x02	; 2
    2e64:	4c 91       	ld	r20, X
    2e66:	24 2f       	mov	r18, r20
    2e68:	30 e0       	ldi	r19, 0x00	; 0
    2e6a:	c7 01       	movw	r24, r14
    2e6c:	83 0d       	add	r24, r3
    2e6e:	91 1d       	adc	r25, r1
    2e70:	28 17       	cp	r18, r24
    2e72:	39 07       	cpc	r19, r25
    2e74:	18 f4       	brcc	.+6      	; 0x2e7c <f_write+0x22c>
    2e76:	79 01       	movw	r14, r18
    2e78:	e3 18       	sub	r14, r3
    2e7a:	f1 08       	sbc	r15, r1
    2e7c:	87 01       	movw	r16, r14
    2e7e:	a3 01       	movw	r20, r6
    2e80:	92 01       	movw	r18, r4
    2e82:	b4 01       	movw	r22, r8
    2e84:	e9 81       	ldd	r30, Y+1	; 0x01
    2e86:	fa 81       	ldd	r31, Y+2	; 0x02
    2e88:	81 81       	ldd	r24, Z+1	; 0x01
    2e8a:	0e 94 9f 03 	call	0x73e	; 0x73e <disk_write>
    2e8e:	88 23       	and	r24, r24
    2e90:	31 f0       	breq	.+12     	; 0x2e9e <f_write+0x24e>
    2e92:	81 e0       	ldi	r24, 0x01	; 1
    2e94:	ad 81       	ldd	r26, Y+5	; 0x05
    2e96:	be 81       	ldd	r27, Y+6	; 0x06
    2e98:	15 96       	adiw	r26, 0x05	; 5
    2e9a:	8c 93       	st	X, r24
    2e9c:	be c0       	rjmp	.+380    	; 0x301a <f_write+0x3ca>
    2e9e:	ed 81       	ldd	r30, Y+5	; 0x05
    2ea0:	fe 81       	ldd	r31, Y+6	; 0x06
    2ea2:	86 89       	ldd	r24, Z+22	; 0x16
    2ea4:	97 89       	ldd	r25, Z+23	; 0x17
    2ea6:	a0 8d       	ldd	r26, Z+24	; 0x18
    2ea8:	b1 8d       	ldd	r27, Z+25	; 0x19
    2eaa:	84 19       	sub	r24, r4
    2eac:	95 09       	sbc	r25, r5
    2eae:	a6 09       	sbc	r26, r6
    2eb0:	b7 09       	sbc	r27, r7
    2eb2:	a7 01       	movw	r20, r14
    2eb4:	60 e0       	ldi	r22, 0x00	; 0
    2eb6:	70 e0       	ldi	r23, 0x00	; 0
    2eb8:	84 17       	cp	r24, r20
    2eba:	95 07       	cpc	r25, r21
    2ebc:	a6 07       	cpc	r26, r22
    2ebe:	b7 07       	cpc	r27, r23
    2ec0:	a8 f4       	brcc	.+42     	; 0x2eec <f_write+0x29c>
    2ec2:	98 2f       	mov	r25, r24
    2ec4:	88 27       	eor	r24, r24
    2ec6:	99 0f       	add	r25, r25
    2ec8:	99 0f       	add	r25, r25
    2eca:	b4 01       	movw	r22, r8
    2ecc:	68 0f       	add	r22, r24
    2ece:	79 1f       	adc	r23, r25
    2ed0:	40 e0       	ldi	r20, 0x00	; 0
    2ed2:	54 e0       	ldi	r21, 0x04	; 4
    2ed4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ed6:	9c 81       	ldd	r25, Y+4	; 0x04
    2ed8:	0e 94 c6 06 	call	0xd8c	; 0xd8c <mem_cpy>
    2edc:	ad 81       	ldd	r26, Y+5	; 0x05
    2ede:	be 81       	ldd	r27, Y+6	; 0x06
    2ee0:	14 96       	adiw	r26, 0x04	; 4
    2ee2:	8c 91       	ld	r24, X
    2ee4:	14 97       	sbiw	r26, 0x04	; 4
    2ee6:	8f 7b       	andi	r24, 0xBF	; 191
    2ee8:	14 96       	adiw	r26, 0x04	; 4
    2eea:	8c 93       	st	X, r24
    2eec:	fe 2c       	mov	r15, r14
    2eee:	ee 24       	eor	r14, r14
    2ef0:	ff 0c       	add	r15, r15
    2ef2:	ff 0c       	add	r15, r15
    2ef4:	58 c0       	rjmp	.+176    	; 0x2fa6 <f_write+0x356>
    2ef6:	ed 81       	ldd	r30, Y+5	; 0x05
    2ef8:	fe 81       	ldd	r31, Y+6	; 0x06
    2efa:	86 89       	ldd	r24, Z+22	; 0x16
    2efc:	97 89       	ldd	r25, Z+23	; 0x17
    2efe:	a0 8d       	ldd	r26, Z+24	; 0x18
    2f00:	b1 8d       	ldd	r27, Z+25	; 0x19
    2f02:	84 15       	cp	r24, r4
    2f04:	95 05       	cpc	r25, r5
    2f06:	a6 05       	cpc	r26, r6
    2f08:	b7 05       	cpc	r27, r7
    2f0a:	01 f1       	breq	.+64     	; 0x2f4c <f_write+0x2fc>
    2f0c:	46 81       	ldd	r20, Z+6	; 0x06
    2f0e:	57 81       	ldd	r21, Z+7	; 0x07
    2f10:	60 85       	ldd	r22, Z+8	; 0x08
    2f12:	71 85       	ldd	r23, Z+9	; 0x09
    2f14:	82 85       	ldd	r24, Z+10	; 0x0a
    2f16:	93 85       	ldd	r25, Z+11	; 0x0b
    2f18:	a4 85       	ldd	r26, Z+12	; 0x0c
    2f1a:	b5 85       	ldd	r27, Z+13	; 0x0d
    2f1c:	48 17       	cp	r20, r24
    2f1e:	59 07       	cpc	r21, r25
    2f20:	6a 07       	cpc	r22, r26
    2f22:	7b 07       	cpc	r23, r27
    2f24:	98 f4       	brcc	.+38     	; 0x2f4c <f_write+0x2fc>
    2f26:	01 e0       	ldi	r16, 0x01	; 1
    2f28:	10 e0       	ldi	r17, 0x00	; 0
    2f2a:	a3 01       	movw	r20, r6
    2f2c:	92 01       	movw	r18, r4
    2f2e:	6b 81       	ldd	r22, Y+3	; 0x03
    2f30:	7c 81       	ldd	r23, Y+4	; 0x04
    2f32:	a9 81       	ldd	r26, Y+1	; 0x01
    2f34:	ba 81       	ldd	r27, Y+2	; 0x02
    2f36:	11 96       	adiw	r26, 0x01	; 1
    2f38:	8c 91       	ld	r24, X
    2f3a:	0e 94 4d 03 	call	0x69a	; 0x69a <disk_read>
    2f3e:	88 23       	and	r24, r24
    2f40:	29 f0       	breq	.+10     	; 0x2f4c <f_write+0x2fc>
    2f42:	81 e0       	ldi	r24, 0x01	; 1
    2f44:	ed 81       	ldd	r30, Y+5	; 0x05
    2f46:	fe 81       	ldd	r31, Y+6	; 0x06
    2f48:	85 83       	std	Z+5, r24	; 0x05
    2f4a:	67 c0       	rjmp	.+206    	; 0x301a <f_write+0x3ca>
    2f4c:	ad 81       	ldd	r26, Y+5	; 0x05
    2f4e:	be 81       	ldd	r27, Y+6	; 0x06
    2f50:	56 96       	adiw	r26, 0x16	; 22
    2f52:	4d 92       	st	X+, r4
    2f54:	5d 92       	st	X+, r5
    2f56:	6d 92       	st	X+, r6
    2f58:	7c 92       	st	X, r7
    2f5a:	59 97       	sbiw	r26, 0x19	; 25
    2f5c:	ed 81       	ldd	r30, Y+5	; 0x05
    2f5e:	fe 81       	ldd	r31, Y+6	; 0x06
    2f60:	86 81       	ldd	r24, Z+6	; 0x06
    2f62:	97 81       	ldd	r25, Z+7	; 0x07
    2f64:	a0 85       	ldd	r26, Z+8	; 0x08
    2f66:	b1 85       	ldd	r27, Z+9	; 0x09
    2f68:	ac 01       	movw	r20, r24
    2f6a:	53 70       	andi	r21, 0x03	; 3
    2f6c:	20 e0       	ldi	r18, 0x00	; 0
    2f6e:	34 e0       	ldi	r19, 0x04	; 4
    2f70:	24 1b       	sub	r18, r20
    2f72:	35 0b       	sbc	r19, r21
    2f74:	76 01       	movw	r14, r12
    2f76:	2c 15       	cp	r18, r12
    2f78:	3d 05       	cpc	r19, r13
    2f7a:	08 f4       	brcc	.+2      	; 0x2f7e <f_write+0x32e>
    2f7c:	79 01       	movw	r14, r18
    2f7e:	93 70       	andi	r25, 0x03	; 3
    2f80:	aa 27       	eor	r26, r26
    2f82:	bb 27       	eor	r27, r27
    2f84:	80 96       	adiw	r24, 0x20	; 32
    2f86:	a7 01       	movw	r20, r14
    2f88:	b4 01       	movw	r22, r8
    2f8a:	2d 81       	ldd	r18, Y+5	; 0x05
    2f8c:	3e 81       	ldd	r19, Y+6	; 0x06
    2f8e:	82 0f       	add	r24, r18
    2f90:	93 1f       	adc	r25, r19
    2f92:	0e 94 c6 06 	call	0xd8c	; 0xd8c <mem_cpy>
    2f96:	ad 81       	ldd	r26, Y+5	; 0x05
    2f98:	be 81       	ldd	r27, Y+6	; 0x06
    2f9a:	14 96       	adiw	r26, 0x04	; 4
    2f9c:	8c 91       	ld	r24, X
    2f9e:	14 97       	sbiw	r26, 0x04	; 4
    2fa0:	80 64       	ori	r24, 0x40	; 64
    2fa2:	14 96       	adiw	r26, 0x04	; 4
    2fa4:	8c 93       	st	X, r24
    2fa6:	8e 0c       	add	r8, r14
    2fa8:	9f 1c       	adc	r9, r15
    2faa:	ed 81       	ldd	r30, Y+5	; 0x05
    2fac:	fe 81       	ldd	r31, Y+6	; 0x06
    2fae:	86 81       	ldd	r24, Z+6	; 0x06
    2fb0:	97 81       	ldd	r25, Z+7	; 0x07
    2fb2:	a0 85       	ldd	r26, Z+8	; 0x08
    2fb4:	b1 85       	ldd	r27, Z+9	; 0x09
    2fb6:	8e 0d       	add	r24, r14
    2fb8:	9f 1d       	adc	r25, r15
    2fba:	a1 1d       	adc	r26, r1
    2fbc:	b1 1d       	adc	r27, r1
    2fbe:	86 83       	std	Z+6, r24	; 0x06
    2fc0:	97 83       	std	Z+7, r25	; 0x07
    2fc2:	a0 87       	std	Z+8, r26	; 0x08
    2fc4:	b1 87       	std	Z+9, r27	; 0x09
    2fc6:	d5 01       	movw	r26, r10
    2fc8:	8d 91       	ld	r24, X+
    2fca:	9c 91       	ld	r25, X
    2fcc:	11 97       	sbiw	r26, 0x01	; 1
    2fce:	8e 0d       	add	r24, r14
    2fd0:	9f 1d       	adc	r25, r15
    2fd2:	8d 93       	st	X+, r24
    2fd4:	9c 93       	st	X, r25
    2fd6:	ce 18       	sub	r12, r14
    2fd8:	df 08       	sbc	r13, r15
    2fda:	09 f0       	breq	.+2      	; 0x2fde <f_write+0x38e>
    2fdc:	7a ce       	rjmp	.-780    	; 0x2cd2 <f_write+0x82>
    2fde:	ed 81       	ldd	r30, Y+5	; 0x05
    2fe0:	fe 81       	ldd	r31, Y+6	; 0x06
    2fe2:	86 81       	ldd	r24, Z+6	; 0x06
    2fe4:	97 81       	ldd	r25, Z+7	; 0x07
    2fe6:	a0 85       	ldd	r26, Z+8	; 0x08
    2fe8:	b1 85       	ldd	r27, Z+9	; 0x09
    2fea:	42 85       	ldd	r20, Z+10	; 0x0a
    2fec:	53 85       	ldd	r21, Z+11	; 0x0b
    2fee:	64 85       	ldd	r22, Z+12	; 0x0c
    2ff0:	75 85       	ldd	r23, Z+13	; 0x0d
    2ff2:	48 17       	cp	r20, r24
    2ff4:	59 07       	cpc	r21, r25
    2ff6:	6a 07       	cpc	r22, r26
    2ff8:	7b 07       	cpc	r23, r27
    2ffa:	20 f4       	brcc	.+8      	; 0x3004 <f_write+0x3b4>
    2ffc:	82 87       	std	Z+10, r24	; 0x0a
    2ffe:	93 87       	std	Z+11, r25	; 0x0b
    3000:	a4 87       	std	Z+12, r26	; 0x0c
    3002:	b5 87       	std	Z+13, r27	; 0x0d
    3004:	ad 81       	ldd	r26, Y+5	; 0x05
    3006:	be 81       	ldd	r27, Y+6	; 0x06
    3008:	14 96       	adiw	r26, 0x04	; 4
    300a:	8c 91       	ld	r24, X
    300c:	14 97       	sbiw	r26, 0x04	; 4
    300e:	80 62       	ori	r24, 0x20	; 32
    3010:	14 96       	adiw	r26, 0x04	; 4
    3012:	8c 93       	st	X, r24
    3014:	80 e0       	ldi	r24, 0x00	; 0
    3016:	01 c0       	rjmp	.+2      	; 0x301a <f_write+0x3ca>
    3018:	87 e0       	ldi	r24, 0x07	; 7
    301a:	26 96       	adiw	r28, 0x06	; 6
    301c:	0f b6       	in	r0, 0x3f	; 63
    301e:	f8 94       	cli
    3020:	de bf       	out	0x3e, r29	; 62
    3022:	0f be       	out	0x3f, r0	; 63
    3024:	cd bf       	out	0x3d, r28	; 61
    3026:	df 91       	pop	r29
    3028:	cf 91       	pop	r28
    302a:	1f 91       	pop	r17
    302c:	0f 91       	pop	r16
    302e:	ff 90       	pop	r15
    3030:	ef 90       	pop	r14
    3032:	df 90       	pop	r13
    3034:	cf 90       	pop	r12
    3036:	bf 90       	pop	r11
    3038:	af 90       	pop	r10
    303a:	9f 90       	pop	r9
    303c:	8f 90       	pop	r8
    303e:	7f 90       	pop	r7
    3040:	6f 90       	pop	r6
    3042:	5f 90       	pop	r5
    3044:	4f 90       	pop	r4
    3046:	3f 90       	pop	r3
    3048:	08 95       	ret

0000304a <f_sync>:
    304a:	0f 93       	push	r16
    304c:	1f 93       	push	r17
    304e:	cf 93       	push	r28
    3050:	df 93       	push	r29
    3052:	ec 01       	movw	r28, r24
    3054:	0e 94 45 08 	call	0x108a	; 0x108a <validate>
    3058:	81 11       	cpse	r24, r1
    305a:	51 c0       	rjmp	.+162    	; 0x30fe <f_sync+0xb4>
    305c:	8c 81       	ldd	r24, Y+4	; 0x04
    305e:	85 ff       	sbrs	r24, 5
    3060:	4b c0       	rjmp	.+150    	; 0x30f8 <f_sync+0xae>
    3062:	86 ff       	sbrs	r24, 6
    3064:	13 c0       	rjmp	.+38     	; 0x308c <f_sync+0x42>
    3066:	2e 89       	ldd	r18, Y+22	; 0x16
    3068:	3f 89       	ldd	r19, Y+23	; 0x17
    306a:	48 8d       	ldd	r20, Y+24	; 0x18
    306c:	59 8d       	ldd	r21, Y+25	; 0x19
    306e:	e8 81       	ld	r30, Y
    3070:	f9 81       	ldd	r31, Y+1	; 0x01
    3072:	01 e0       	ldi	r16, 0x01	; 1
    3074:	10 e0       	ldi	r17, 0x00	; 0
    3076:	be 01       	movw	r22, r28
    3078:	60 5e       	subi	r22, 0xE0	; 224
    307a:	7f 4f       	sbci	r23, 0xFF	; 255
    307c:	81 81       	ldd	r24, Z+1	; 0x01
    307e:	0e 94 9f 03 	call	0x73e	; 0x73e <disk_write>
    3082:	81 11       	cpse	r24, r1
    3084:	3b c0       	rjmp	.+118    	; 0x30fc <f_sync+0xb2>
    3086:	8c 81       	ldd	r24, Y+4	; 0x04
    3088:	8f 7b       	andi	r24, 0xBF	; 191
    308a:	8c 83       	std	Y+4, r24	; 0x04
    308c:	4a 8d       	ldd	r20, Y+26	; 0x1a
    308e:	5b 8d       	ldd	r21, Y+27	; 0x1b
    3090:	6c 8d       	ldd	r22, Y+28	; 0x1c
    3092:	7d 8d       	ldd	r23, Y+29	; 0x1d
    3094:	88 81       	ld	r24, Y
    3096:	99 81       	ldd	r25, Y+1	; 0x01
    3098:	0e 94 a1 07 	call	0xf42	; 0xf42 <move_window>
    309c:	81 11       	cpse	r24, r1
    309e:	2f c0       	rjmp	.+94     	; 0x30fe <f_sync+0xb4>
    30a0:	ee 8d       	ldd	r30, Y+30	; 0x1e
    30a2:	ff 8d       	ldd	r31, Y+31	; 0x1f
    30a4:	83 85       	ldd	r24, Z+11	; 0x0b
    30a6:	80 62       	ori	r24, 0x20	; 32
    30a8:	83 87       	std	Z+11, r24	; 0x0b
    30aa:	8a 85       	ldd	r24, Y+10	; 0x0a
    30ac:	84 8f       	std	Z+28, r24	; 0x1c
    30ae:	8b 85       	ldd	r24, Y+11	; 0x0b
    30b0:	85 8f       	std	Z+29, r24	; 0x1d
    30b2:	8c 85       	ldd	r24, Y+12	; 0x0c
    30b4:	86 8f       	std	Z+30, r24	; 0x1e
    30b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    30b8:	87 8f       	std	Z+31, r24	; 0x1f
    30ba:	8e 85       	ldd	r24, Y+14	; 0x0e
    30bc:	9f 85       	ldd	r25, Y+15	; 0x0f
    30be:	a8 89       	ldd	r26, Y+16	; 0x10
    30c0:	b9 89       	ldd	r27, Y+17	; 0x11
    30c2:	82 8f       	std	Z+26, r24	; 0x1a
    30c4:	93 8f       	std	Z+27, r25	; 0x1b
    30c6:	cd 01       	movw	r24, r26
    30c8:	aa 27       	eor	r26, r26
    30ca:	bb 27       	eor	r27, r27
    30cc:	84 8b       	std	Z+20, r24	; 0x14
    30ce:	95 8b       	std	Z+21, r25	; 0x15
    30d0:	16 8a       	std	Z+22, r1	; 0x16
    30d2:	17 8a       	std	Z+23, r1	; 0x17
    30d4:	81 e2       	ldi	r24, 0x21	; 33
    30d6:	80 8f       	std	Z+24, r24	; 0x18
    30d8:	86 e4       	ldi	r24, 0x46	; 70
    30da:	81 8f       	std	Z+25, r24	; 0x19
    30dc:	12 8a       	std	Z+18, r1	; 0x12
    30de:	13 8a       	std	Z+19, r1	; 0x13
    30e0:	8c 81       	ldd	r24, Y+4	; 0x04
    30e2:	8f 7d       	andi	r24, 0xDF	; 223
    30e4:	8c 83       	std	Y+4, r24	; 0x04
    30e6:	e8 81       	ld	r30, Y
    30e8:	f9 81       	ldd	r31, Y+1	; 0x01
    30ea:	81 e0       	ldi	r24, 0x01	; 1
    30ec:	84 83       	std	Z+4, r24	; 0x04
    30ee:	88 81       	ld	r24, Y
    30f0:	99 81       	ldd	r25, Y+1	; 0x01
    30f2:	0e 94 2b 0c 	call	0x1856	; 0x1856 <sync_fs>
    30f6:	03 c0       	rjmp	.+6      	; 0x30fe <f_sync+0xb4>
    30f8:	80 e0       	ldi	r24, 0x00	; 0
    30fa:	01 c0       	rjmp	.+2      	; 0x30fe <f_sync+0xb4>
    30fc:	81 e0       	ldi	r24, 0x01	; 1
    30fe:	df 91       	pop	r29
    3100:	cf 91       	pop	r28
    3102:	1f 91       	pop	r17
    3104:	0f 91       	pop	r16
    3106:	08 95       	ret

00003108 <f_close>:
    3108:	cf 93       	push	r28
    310a:	df 93       	push	r29
    310c:	ec 01       	movw	r28, r24
    310e:	9d df       	rcall	.-198    	; 0x304a <f_sync>
    3110:	81 11       	cpse	r24, r1
    3112:	07 c0       	rjmp	.+14     	; 0x3122 <f_close+0x1a>
    3114:	ce 01       	movw	r24, r28
    3116:	0e 94 45 08 	call	0x108a	; 0x108a <validate>
    311a:	81 11       	cpse	r24, r1
    311c:	02 c0       	rjmp	.+4      	; 0x3122 <f_close+0x1a>
    311e:	19 82       	std	Y+1, r1	; 0x01
    3120:	18 82       	st	Y, r1
    3122:	df 91       	pop	r29
    3124:	cf 91       	pop	r28
    3126:	08 95       	ret

00003128 <f_getlabel>:
    3128:	cf 92       	push	r12
    312a:	df 92       	push	r13
    312c:	ef 92       	push	r14
    312e:	ff 92       	push	r15
    3130:	1f 93       	push	r17
    3132:	cf 93       	push	r28
    3134:	df 93       	push	r29
    3136:	cd b7       	in	r28, 0x3d	; 61
    3138:	de b7       	in	r29, 0x3e	; 62
    313a:	68 97       	sbiw	r28, 0x18	; 24
    313c:	0f b6       	in	r0, 0x3f	; 63
    313e:	f8 94       	cli
    3140:	de bf       	out	0x3e, r29	; 62
    3142:	0f be       	out	0x3f, r0	; 63
    3144:	cd bf       	out	0x3d, r28	; 61
    3146:	98 8f       	std	Y+24, r25	; 0x18
    3148:	8f 8b       	std	Y+23, r24	; 0x17
    314a:	6b 01       	movw	r12, r22
    314c:	7a 01       	movw	r14, r20
    314e:	40 e0       	ldi	r20, 0x00	; 0
    3150:	be 01       	movw	r22, r28
    3152:	69 5e       	subi	r22, 0xE9	; 233
    3154:	7f 4f       	sbci	r23, 0xFF	; 255
    3156:	ce 01       	movw	r24, r28
    3158:	01 96       	adiw	r24, 0x01	; 1
    315a:	0e 94 69 08 	call	0x10d2	; 0x10d2 <find_volume>
    315e:	18 2f       	mov	r17, r24
    3160:	81 11       	cpse	r24, r1
    3162:	66 c0       	rjmp	.+204    	; 0x3230 <f_getlabel+0x108>
    3164:	c1 14       	cp	r12, r1
    3166:	d1 04       	cpc	r13, r1
    3168:	41 f1       	breq	.+80     	; 0x31ba <f_getlabel+0x92>
    316a:	1f 82       	std	Y+7, r1	; 0x07
    316c:	18 86       	std	Y+8, r1	; 0x08
    316e:	19 86       	std	Y+9, r1	; 0x09
    3170:	1a 86       	std	Y+10, r1	; 0x0a
    3172:	60 e0       	ldi	r22, 0x00	; 0
    3174:	70 e0       	ldi	r23, 0x00	; 0
    3176:	ce 01       	movw	r24, r28
    3178:	01 96       	adiw	r24, 0x01	; 1
    317a:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <dir_sdi>
    317e:	81 11       	cpse	r24, r1
    3180:	56 c0       	rjmp	.+172    	; 0x322e <f_getlabel+0x106>
    3182:	61 e0       	ldi	r22, 0x01	; 1
    3184:	70 e0       	ldi	r23, 0x00	; 0
    3186:	ce 01       	movw	r24, r28
    3188:	01 96       	adiw	r24, 0x01	; 1
    318a:	19 db       	rcall	.-2510   	; 0x27be <dir_read>
    318c:	81 11       	cpse	r24, r1
    318e:	4b c0       	rjmp	.+150    	; 0x3226 <f_getlabel+0xfe>
    3190:	6b 89       	ldd	r22, Y+19	; 0x13
    3192:	7c 89       	ldd	r23, Y+20	; 0x14
    3194:	4b e0       	ldi	r20, 0x0B	; 11
    3196:	50 e0       	ldi	r21, 0x00	; 0
    3198:	c6 01       	movw	r24, r12
    319a:	0e 94 c6 06 	call	0xd8c	; 0xd8c <mem_cpy>
    319e:	f6 01       	movw	r30, r12
    31a0:	13 86       	std	Z+11, r1	; 0x0b
    31a2:	3b 96       	adiw	r30, 0x0b	; 11
    31a4:	04 c0       	rjmp	.+8      	; 0x31ae <f_getlabel+0x86>
    31a6:	10 82       	st	Z, r1
    31a8:	ec 15       	cp	r30, r12
    31aa:	fd 05       	cpc	r31, r13
    31ac:	31 f0       	breq	.+12     	; 0x31ba <f_getlabel+0x92>
    31ae:	82 91       	ld	r24, -Z
    31b0:	80 32       	cpi	r24, 0x20	; 32
    31b2:	c9 f3       	breq	.-14     	; 0x31a6 <f_getlabel+0x7e>
    31b4:	02 c0       	rjmp	.+4      	; 0x31ba <f_getlabel+0x92>
    31b6:	f6 01       	movw	r30, r12
    31b8:	10 82       	st	Z, r1
    31ba:	e1 14       	cp	r14, r1
    31bc:	f1 04       	cpc	r15, r1
    31be:	c1 f1       	breq	.+112    	; 0x3230 <f_getlabel+0x108>
    31c0:	89 81       	ldd	r24, Y+1	; 0x01
    31c2:	9a 81       	ldd	r25, Y+2	; 0x02
    31c4:	fc 01       	movw	r30, r24
    31c6:	42 8d       	ldd	r20, Z+26	; 0x1a
    31c8:	53 8d       	ldd	r21, Z+27	; 0x1b
    31ca:	64 8d       	ldd	r22, Z+28	; 0x1c
    31cc:	75 8d       	ldd	r23, Z+29	; 0x1d
    31ce:	0e 94 a1 07 	call	0xf42	; 0xf42 <move_window>
    31d2:	18 2f       	mov	r17, r24
    31d4:	81 11       	cpse	r24, r1
    31d6:	2c c0       	rjmp	.+88     	; 0x3230 <f_getlabel+0x108>
    31d8:	e9 81       	ldd	r30, Y+1	; 0x01
    31da:	fa 81       	ldd	r31, Y+2	; 0x02
    31dc:	80 81       	ld	r24, Z
    31de:	83 30       	cpi	r24, 0x03	; 3
    31e0:	19 f0       	breq	.+6      	; 0x31e8 <f_getlabel+0xc0>
    31e2:	87 e2       	ldi	r24, 0x27	; 39
    31e4:	90 e0       	ldi	r25, 0x00	; 0
    31e6:	02 c0       	rjmp	.+4      	; 0x31ec <f_getlabel+0xc4>
    31e8:	83 e4       	ldi	r24, 0x43	; 67
    31ea:	90 e0       	ldi	r25, 0x00	; 0
    31ec:	e8 0f       	add	r30, r24
    31ee:	f9 1f       	adc	r31, r25
    31f0:	21 a9       	ldd	r18, Z+49	; 0x31
    31f2:	80 a9       	ldd	r24, Z+48	; 0x30
    31f4:	90 e0       	ldi	r25, 0x00	; 0
    31f6:	a0 e0       	ldi	r26, 0x00	; 0
    31f8:	b0 e0       	ldi	r27, 0x00	; 0
    31fa:	dc 01       	movw	r26, r24
    31fc:	99 27       	eor	r25, r25
    31fe:	88 27       	eor	r24, r24
    3200:	b2 2b       	or	r27, r18
    3202:	26 a5       	ldd	r18, Z+46	; 0x2e
    3204:	82 2b       	or	r24, r18
    3206:	47 a5       	ldd	r20, Z+47	; 0x2f
    3208:	50 e0       	ldi	r21, 0x00	; 0
    320a:	54 2f       	mov	r21, r20
    320c:	44 27       	eor	r20, r20
    320e:	60 e0       	ldi	r22, 0x00	; 0
    3210:	70 e0       	ldi	r23, 0x00	; 0
    3212:	84 2b       	or	r24, r20
    3214:	95 2b       	or	r25, r21
    3216:	a6 2b       	or	r26, r22
    3218:	b7 2b       	or	r27, r23
    321a:	f7 01       	movw	r30, r14
    321c:	80 83       	st	Z, r24
    321e:	91 83       	std	Z+1, r25	; 0x01
    3220:	a2 83       	std	Z+2, r26	; 0x02
    3222:	b3 83       	std	Z+3, r27	; 0x03
    3224:	05 c0       	rjmp	.+10     	; 0x3230 <f_getlabel+0x108>
    3226:	84 30       	cpi	r24, 0x04	; 4
    3228:	31 f2       	breq	.-116    	; 0x31b6 <f_getlabel+0x8e>
    322a:	18 2f       	mov	r17, r24
    322c:	01 c0       	rjmp	.+2      	; 0x3230 <f_getlabel+0x108>
    322e:	18 2f       	mov	r17, r24
    3230:	81 2f       	mov	r24, r17
    3232:	68 96       	adiw	r28, 0x18	; 24
    3234:	0f b6       	in	r0, 0x3f	; 63
    3236:	f8 94       	cli
    3238:	de bf       	out	0x3e, r29	; 62
    323a:	0f be       	out	0x3f, r0	; 63
    323c:	cd bf       	out	0x3d, r28	; 61
    323e:	df 91       	pop	r29
    3240:	cf 91       	pop	r28
    3242:	1f 91       	pop	r17
    3244:	ff 90       	pop	r15
    3246:	ef 90       	pop	r14
    3248:	df 90       	pop	r13
    324a:	cf 90       	pop	r12
    324c:	08 95       	ret

0000324e <f_mkfs>:
FRESULT f_mkfs (
	const TCHAR* path,	/* Logical drive number */
	BYTE sfd,			/* Partitioning rule 0:FDISK, 1:SFD */
	UINT au				/* Size of allocation unit in unit of byte or sector */
)
{
    324e:	2f 92       	push	r2
    3250:	3f 92       	push	r3
    3252:	4f 92       	push	r4
    3254:	5f 92       	push	r5
    3256:	6f 92       	push	r6
    3258:	7f 92       	push	r7
    325a:	8f 92       	push	r8
    325c:	9f 92       	push	r9
    325e:	af 92       	push	r10
    3260:	bf 92       	push	r11
    3262:	cf 92       	push	r12
    3264:	df 92       	push	r13
    3266:	ef 92       	push	r14
    3268:	ff 92       	push	r15
    326a:	0f 93       	push	r16
    326c:	1f 93       	push	r17
    326e:	cf 93       	push	r28
    3270:	df 93       	push	r29
    3272:	cd b7       	in	r28, 0x3d	; 61
    3274:	de b7       	in	r29, 0x3e	; 62
    3276:	a8 97       	sbiw	r28, 0x28	; 40
    3278:	0f b6       	in	r0, 0x3f	; 63
    327a:	f8 94       	cli
    327c:	de bf       	out	0x3e, r29	; 62
    327e:	0f be       	out	0x3f, r0	; 63
    3280:	cd bf       	out	0x3d, r28	; 61
    3282:	9a 87       	std	Y+10, r25	; 0x0a
    3284:	89 87       	std	Y+9, r24	; 0x09
    3286:	16 2f       	mov	r17, r22
    3288:	5a 01       	movw	r10, r20
	DWORD eb[2];
#endif


	/* Check mounted drive and clear work area */
	if (sfd > 1) return FR_INVALID_PARAMETER;
    328a:	62 30       	cpi	r22, 0x02	; 2
    328c:	08 f0       	brcs	.+2      	; 0x3290 <f_mkfs+0x42>
    328e:	4d c4       	rjmp	.+2202   	; 0x3b2a <f_mkfs+0x8dc>
	vol = get_ldnumber(&path);
    3290:	ce 01       	movw	r24, r28
    3292:	09 96       	adiw	r24, 0x09	; 9
    3294:	0e 94 01 07 	call	0xe02	; 0xe02 <get_ldnumber>
    3298:	7c 01       	movw	r14, r24
	if (vol < 0) return FR_INVALID_DRIVE;
    329a:	99 23       	and	r25, r25
    329c:	0c f4       	brge	.+2      	; 0x32a0 <f_mkfs+0x52>
    329e:	47 c4       	rjmp	.+2190   	; 0x3b2e <f_mkfs+0x8e0>
	fs = FatFs[vol];
    32a0:	fc 01       	movw	r30, r24
    32a2:	ee 0f       	add	r30, r30
    32a4:	ff 1f       	adc	r31, r31
    32a6:	e3 56       	subi	r30, 0x63	; 99
    32a8:	fe 4f       	sbci	r31, 0xFE	; 254
    32aa:	c0 80       	ld	r12, Z
    32ac:	d1 80       	ldd	r13, Z+1	; 0x01
	if (!fs) return FR_NOT_ENABLED;
    32ae:	c1 14       	cp	r12, r1
    32b0:	d1 04       	cpc	r13, r1
    32b2:	09 f4       	brne	.+2      	; 0x32b6 <f_mkfs+0x68>
    32b4:	3e c4       	rjmp	.+2172   	; 0x3b32 <f_mkfs+0x8e4>
	fs->fs_type = 0;
    32b6:	d6 01       	movw	r26, r12
    32b8:	1c 92       	st	X, r1
	pdrv = LD2PD(vol);	/* Physical drive */
    32ba:	8f 87       	std	Y+15, r24	; 0x0f
	part = LD2PT(vol);	/* Partition (0:auto detect, 1-4:get from partition table)*/

	/* Get disk statics */
	stat = disk_initialize(pdrv);
    32bc:	0e 94 82 02 	call	0x504	; 0x504 <disk_initialize>
	if (stat & STA_NOINIT) return FR_NOT_READY;
    32c0:	80 fd       	sbrc	r24, 0
    32c2:	39 c4       	rjmp	.+2162   	; 0x3b36 <f_mkfs+0x8e8>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
    32c4:	82 fd       	sbrc	r24, 2
    32c6:	39 c4       	rjmp	.+2162   	; 0x3b3a <f_mkfs+0x8ec>
		if (!tbl[4]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = LD_DWORD(tbl + 8);	/* Volume start sector */
		n_vol = LD_DWORD(tbl + 12);	/* Volume size */
	} else {
		/* Create a partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &n_vol) != RES_OK || n_vol < 128)
    32c8:	ae 01       	movw	r20, r28
    32ca:	4b 5f       	subi	r20, 0xFB	; 251
    32cc:	5f 4f       	sbci	r21, 0xFF	; 255
    32ce:	61 e0       	ldi	r22, 0x01	; 1
    32d0:	8e 2d       	mov	r24, r14
    32d2:	0e 94 0d 04 	call	0x81a	; 0x81a <disk_ioctl>
    32d6:	81 11       	cpse	r24, r1
    32d8:	32 c4       	rjmp	.+2148   	; 0x3b3e <f_mkfs+0x8f0>
    32da:	4d 80       	ldd	r4, Y+5	; 0x05
    32dc:	5e 80       	ldd	r5, Y+6	; 0x06
    32de:	6f 80       	ldd	r6, Y+7	; 0x07
    32e0:	78 84       	ldd	r7, Y+8	; 0x08
    32e2:	b0 e8       	ldi	r27, 0x80	; 128
    32e4:	4b 16       	cp	r4, r27
    32e6:	51 04       	cpc	r5, r1
    32e8:	61 04       	cpc	r6, r1
    32ea:	71 04       	cpc	r7, r1
    32ec:	08 f4       	brcc	.+2      	; 0x32f0 <f_mkfs+0xa2>
    32ee:	29 c4       	rjmp	.+2130   	; 0x3b42 <f_mkfs+0x8f4>
			return FR_DISK_ERR;
		b_vol = (sfd) ? 0 : 63;		/* Volume start sector */
    32f0:	11 11       	cpse	r17, r1
    32f2:	09 c0       	rjmp	.+18     	; 0x3306 <f_mkfs+0xb8>
    32f4:	2f e3       	ldi	r18, 0x3F	; 63
    32f6:	30 e0       	ldi	r19, 0x00	; 0
    32f8:	40 e0       	ldi	r20, 0x00	; 0
    32fa:	50 e0       	ldi	r21, 0x00	; 0
    32fc:	2c 8b       	std	Y+20, r18	; 0x14
    32fe:	3d 8b       	std	Y+21, r19	; 0x15
    3300:	4e 8b       	std	Y+22, r20	; 0x16
    3302:	5f 8b       	std	Y+23, r21	; 0x17
    3304:	04 c0       	rjmp	.+8      	; 0x330e <f_mkfs+0xc0>
    3306:	1c 8a       	std	Y+20, r1	; 0x14
    3308:	1d 8a       	std	Y+21, r1	; 0x15
    330a:	1e 8a       	std	Y+22, r1	; 0x16
    330c:	1f 8a       	std	Y+23, r1	; 0x17
		n_vol -= b_vol;				/* Volume size */
    330e:	d3 01       	movw	r26, r6
    3310:	c2 01       	movw	r24, r4
    3312:	2c 89       	ldd	r18, Y+20	; 0x14
    3314:	3d 89       	ldd	r19, Y+21	; 0x15
    3316:	4e 89       	ldd	r20, Y+22	; 0x16
    3318:	5f 89       	ldd	r21, Y+23	; 0x17
    331a:	82 1b       	sub	r24, r18
    331c:	93 0b       	sbc	r25, r19
    331e:	a4 0b       	sbc	r26, r20
    3320:	b5 0b       	sbc	r27, r21
    3322:	8b 87       	std	Y+11, r24	; 0x0b
    3324:	9c 87       	std	Y+12, r25	; 0x0c
    3326:	ad 87       	std	Y+13, r26	; 0x0d
    3328:	be 87       	std	Y+14, r27	; 0x0e
    332a:	8d 83       	std	Y+5, r24	; 0x05
    332c:	9e 83       	std	Y+6, r25	; 0x06
    332e:	af 83       	std	Y+7, r26	; 0x07
    3330:	b8 87       	std	Y+8, r27	; 0x08
	}

	if (au & (au - 1)) au = 0;
    3332:	c5 01       	movw	r24, r10
    3334:	01 97       	sbiw	r24, 0x01	; 1
    3336:	8a 21       	and	r24, r10
    3338:	9b 21       	and	r25, r11
    333a:	89 2b       	or	r24, r25
    333c:	21 f4       	brne	.+8      	; 0x3346 <f_mkfs+0xf8>
	if (!au) {						/* AU auto selection */
    333e:	a1 14       	cp	r10, r1
    3340:	b1 04       	cpc	r11, r1
    3342:	09 f0       	breq	.+2      	; 0x3346 <f_mkfs+0xf8>
    3344:	12 c4       	rjmp	.+2084   	; 0x3b6a <f_mkfs+0x91c>
		vs = n_vol / (2000 / (SS(fs) / 512));
    3346:	6b 85       	ldd	r22, Y+11	; 0x0b
    3348:	7c 85       	ldd	r23, Y+12	; 0x0c
    334a:	8d 85       	ldd	r24, Y+13	; 0x0d
    334c:	9e 85       	ldd	r25, Y+14	; 0x0e
    334e:	28 ee       	ldi	r18, 0xE8	; 232
    3350:	33 e0       	ldi	r19, 0x03	; 3
    3352:	40 e0       	ldi	r20, 0x00	; 0
    3354:	50 e0       	ldi	r21, 0x00	; 0
    3356:	35 d7       	rcall	.+3690   	; 0x41c2 <__udivmodsi4>
		for (i = 0; vs < vst[i]; i++) ;
    3358:	21 15       	cp	r18, r1
    335a:	64 e0       	ldi	r22, 0x04	; 4
    335c:	36 07       	cpc	r19, r22
    335e:	41 05       	cpc	r20, r1
    3360:	51 05       	cpc	r21, r1
    3362:	98 f4       	brcc	.+38     	; 0x338a <f_mkfs+0x13c>
    3364:	ec e6       	ldi	r30, 0x6C	; 108
    3366:	f1 e0       	ldi	r31, 0x01	; 1
    3368:	80 e0       	ldi	r24, 0x00	; 0
    336a:	90 e0       	ldi	r25, 0x00	; 0
    336c:	49 01       	movw	r8, r18
    336e:	5a 01       	movw	r10, r20
    3370:	a1 2f       	mov	r26, r17
    3372:	01 96       	adiw	r24, 0x01	; 1
    3374:	41 91       	ld	r20, Z+
    3376:	51 91       	ld	r21, Z+
    3378:	60 e0       	ldi	r22, 0x00	; 0
    337a:	70 e0       	ldi	r23, 0x00	; 0
    337c:	84 16       	cp	r8, r20
    337e:	95 06       	cpc	r9, r21
    3380:	a6 06       	cpc	r10, r22
    3382:	b7 06       	cpc	r11, r23
    3384:	b0 f3       	brcs	.-20     	; 0x3372 <f_mkfs+0x124>
    3386:	1a 2f       	mov	r17, r26
    3388:	02 c0       	rjmp	.+4      	; 0x338e <f_mkfs+0x140>
    338a:	80 e0       	ldi	r24, 0x00	; 0
    338c:	90 e0       	ldi	r25, 0x00	; 0
		au = cst[i];
    338e:	88 0f       	add	r24, r24
    3390:	99 1f       	adc	r25, r25
    3392:	fc 01       	movw	r30, r24
    3394:	ec 5a       	subi	r30, 0xAC	; 172
    3396:	fe 4f       	sbci	r31, 0xFE	; 254
    3398:	a0 80       	ld	r10, Z
    339a:	b1 80       	ldd	r11, Z+1	; 0x01
	}
	if (au >= _MIN_SS) au /= SS(fs);	/* Number of sectors per cluster */
    339c:	a1 14       	cp	r10, r1
    339e:	84 e0       	ldi	r24, 0x04	; 4
    33a0:	b8 06       	cpc	r11, r24
    33a2:	28 f0       	brcs	.+10     	; 0x33ae <f_mkfs+0x160>
    33a4:	8b 2d       	mov	r24, r11
    33a6:	86 95       	lsr	r24
    33a8:	86 95       	lsr	r24
    33aa:	a8 2e       	mov	r10, r24
    33ac:	b1 2c       	mov	r11, r1
	if (!au) au = 1;
    33ae:	a1 14       	cp	r10, r1
    33b0:	b1 04       	cpc	r11, r1
    33b2:	19 f4       	brne	.+6      	; 0x33ba <f_mkfs+0x16c>
    33b4:	aa 24       	eor	r10, r10
    33b6:	a3 94       	inc	r10
    33b8:	b1 2c       	mov	r11, r1
    33ba:	15 01       	movw	r2, r10
    33bc:	91 e8       	ldi	r25, 0x81	; 129
    33be:	a9 16       	cp	r10, r25
    33c0:	b1 04       	cpc	r11, r1
    33c2:	20 f0       	brcs	.+8      	; 0x33cc <f_mkfs+0x17e>
    33c4:	68 94       	set
    33c6:	22 24       	eor	r2, r2
    33c8:	27 f8       	bld	r2, 7
    33ca:	31 2c       	mov	r3, r1
	if (au > 128) au = 128;

	/* Pre-compute number of clusters and FAT sub-type */
	n_clst = n_vol / au;
    33cc:	91 01       	movw	r18, r2
    33ce:	40 e0       	ldi	r20, 0x00	; 0
    33d0:	50 e0       	ldi	r21, 0x00	; 0
    33d2:	28 8f       	std	Y+24, r18	; 0x18
    33d4:	39 8f       	std	Y+25, r19	; 0x19
    33d6:	4a 8f       	std	Y+26, r20	; 0x1a
    33d8:	5b 8f       	std	Y+27, r21	; 0x1b
    33da:	6b 85       	ldd	r22, Y+11	; 0x0b
    33dc:	7c 85       	ldd	r23, Y+12	; 0x0c
    33de:	8d 85       	ldd	r24, Y+13	; 0x0d
    33e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    33e2:	ef d6       	rcall	.+3550   	; 0x41c2 <__udivmodsi4>
	fmt = FS_FAT12;
	if (n_clst >= MIN_FAT16) fmt = FS_FAT16;
    33e4:	26 3f       	cpi	r18, 0xF6	; 246
    33e6:	6f e0       	ldi	r22, 0x0F	; 15
    33e8:	36 07       	cpc	r19, r22
    33ea:	41 05       	cpc	r20, r1
    33ec:	51 05       	cpc	r21, r1
    33ee:	08 f0       	brcs	.+2      	; 0x33f2 <f_mkfs+0x1a4>
    33f0:	e7 c3       	rjmp	.+1998   	; 0x3bc0 <f_mkfs+0x972>
    33f2:	d3 c3       	rjmp	.+1958   	; 0x3b9a <f_mkfs+0x94c>
		n_fat = ((n_clst * 4) + 8 + SS(fs) - 1) / SS(fs);
		n_rsv = 32;
		n_dir = 0;
	} else {
		n_fat = (fmt == FS_FAT12) ? (n_clst * 3 + 1) / 2 + 3 : (n_clst * 2) + 4;
		n_fat = (n_fat + SS(fs) - 1) / SS(fs);
    33f4:	81 50       	subi	r24, 0x01	; 1
    33f6:	9c 4f       	sbci	r25, 0xFC	; 252
    33f8:	af 4f       	sbci	r26, 0xFF	; 255
    33fa:	bf 4f       	sbci	r27, 0xFF	; 255
    33fc:	2c 01       	movw	r4, r24
    33fe:	3d 01       	movw	r6, r26
    3400:	03 2e       	mov	r0, r19
    3402:	3a e0       	ldi	r19, 0x0A	; 10
    3404:	76 94       	lsr	r7
    3406:	67 94       	ror	r6
    3408:	57 94       	ror	r5
    340a:	47 94       	ror	r4
    340c:	3a 95       	dec	r19
    340e:	d1 f7       	brne	.-12     	; 0x3404 <f_mkfs+0x1b6>
    3410:	30 2d       	mov	r19, r0
		n_rsv = 1;
		n_dir = (DWORD)N_ROOTDIR * SZ_DIRE / SS(fs);
    3412:	80 e1       	ldi	r24, 0x10	; 16
    3414:	90 e0       	ldi	r25, 0x00	; 0
    3416:	a0 e0       	ldi	r26, 0x00	; 0
    3418:	b0 e0       	ldi	r27, 0x00	; 0
    341a:	8d 8f       	std	Y+29, r24	; 0x1d
    341c:	9e 8f       	std	Y+30, r25	; 0x1e
    341e:	af 8f       	std	Y+31, r26	; 0x1f
    3420:	b8 a3       	std	Y+32, r27	; 0x20
		n_rsv = 32;
		n_dir = 0;
	} else {
		n_fat = (fmt == FS_FAT12) ? (n_clst * 3 + 1) / 2 + 3 : (n_clst * 2) + 4;
		n_fat = (n_fat + SS(fs) - 1) / SS(fs);
		n_rsv = 1;
    3422:	81 2c       	mov	r8, r1
    3424:	91 2c       	mov	r9, r1
    3426:	54 01       	movw	r10, r8
    3428:	83 94       	inc	r8
		n_dir = (DWORD)N_ROOTDIR * SZ_DIRE / SS(fs);
	}
	b_fat = b_vol + n_rsv;				/* FAT area start sector */
    342a:	2c 89       	ldd	r18, Y+20	; 0x14
    342c:	3d 89       	ldd	r19, Y+21	; 0x15
    342e:	4e 89       	ldd	r20, Y+22	; 0x16
    3430:	5f 89       	ldd	r21, Y+23	; 0x17
    3432:	28 0d       	add	r18, r8
    3434:	39 1d       	adc	r19, r9
    3436:	4a 1d       	adc	r20, r10
    3438:	5b 1d       	adc	r21, r11
    343a:	29 a3       	std	Y+33, r18	; 0x21
    343c:	3a a3       	std	Y+34, r19	; 0x22
    343e:	4b a3       	std	Y+35, r20	; 0x23
    3440:	5c a3       	std	Y+36, r21	; 0x24
    3442:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3444:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3446:	af 8d       	ldd	r26, Y+31	; 0x1f
    3448:	b8 a1       	ldd	r27, Y+32	; 0x20
    344a:	84 0d       	add	r24, r4
    344c:	95 1d       	adc	r25, r5
    344e:	a6 1d       	adc	r26, r6
    3450:	b7 1d       	adc	r27, r7
	b_dir = b_fat + n_fat * N_FATS;		/* Directory area start sector */
	b_data = b_dir + n_dir;				/* Data area start sector */
    3452:	28 0f       	add	r18, r24
    3454:	39 1f       	adc	r19, r25
    3456:	4a 1f       	adc	r20, r26
    3458:	5b 1f       	adc	r21, r27
    345a:	28 8b       	std	Y+16, r18	; 0x10
    345c:	39 8b       	std	Y+17, r19	; 0x11
    345e:	4a 8b       	std	Y+18, r20	; 0x12
    3460:	5b 8b       	std	Y+19, r21	; 0x13
    3462:	88 8d       	ldd	r24, Y+24	; 0x18
    3464:	99 8d       	ldd	r25, Y+25	; 0x19
    3466:	aa 8d       	ldd	r26, Y+26	; 0x1a
    3468:	bb 8d       	ldd	r27, Y+27	; 0x1b
    346a:	2c 89       	ldd	r18, Y+20	; 0x14
    346c:	3d 89       	ldd	r19, Y+21	; 0x15
    346e:	4e 89       	ldd	r20, Y+22	; 0x16
    3470:	5f 89       	ldd	r21, Y+23	; 0x17
    3472:	82 1b       	sub	r24, r18
    3474:	93 0b       	sbc	r25, r19
    3476:	a4 0b       	sbc	r26, r20
    3478:	b5 0b       	sbc	r27, r21
	if (n_vol < b_data + au - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
    347a:	28 89       	ldd	r18, Y+16	; 0x10
    347c:	39 89       	ldd	r19, Y+17	; 0x11
    347e:	4a 89       	ldd	r20, Y+18	; 0x12
    3480:	5b 89       	ldd	r21, Y+19	; 0x13
    3482:	82 0f       	add	r24, r18
    3484:	93 1f       	adc	r25, r19
    3486:	a4 1f       	adc	r26, r20
    3488:	b5 1f       	adc	r27, r21
    348a:	2b 85       	ldd	r18, Y+11	; 0x0b
    348c:	3c 85       	ldd	r19, Y+12	; 0x0c
    348e:	4d 85       	ldd	r20, Y+13	; 0x0d
    3490:	5e 85       	ldd	r21, Y+14	; 0x0e
    3492:	28 17       	cp	r18, r24
    3494:	39 07       	cpc	r19, r25
    3496:	4a 07       	cpc	r20, r26
    3498:	5b 07       	cpc	r21, r27
    349a:	08 f4       	brcc	.+2      	; 0x349e <f_mkfs+0x250>
    349c:	54 c3       	rjmp	.+1704   	; 0x3b46 <f_mkfs+0x8f8>

	/* Align data start sector to erase block boundary (for flash memory media) */
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &n) != RES_OK || !n || n > 32768) n = 1;
    349e:	ae 01       	movw	r20, r28
    34a0:	4f 5f       	subi	r20, 0xFF	; 255
    34a2:	5f 4f       	sbci	r21, 0xFF	; 255
    34a4:	63 e0       	ldi	r22, 0x03	; 3
    34a6:	8e 2d       	mov	r24, r14
    34a8:	0e 94 0d 04 	call	0x81a	; 0x81a <disk_ioctl>
    34ac:	81 11       	cpse	r24, r1
    34ae:	0c c0       	rjmp	.+24     	; 0x34c8 <f_mkfs+0x27a>
    34b0:	89 81       	ldd	r24, Y+1	; 0x01
    34b2:	9a 81       	ldd	r25, Y+2	; 0x02
    34b4:	ab 81       	ldd	r26, Y+3	; 0x03
    34b6:	bc 81       	ldd	r27, Y+4	; 0x04
    34b8:	01 97       	sbiw	r24, 0x01	; 1
    34ba:	a1 09       	sbc	r26, r1
    34bc:	b1 09       	sbc	r27, r1
    34be:	81 15       	cp	r24, r1
    34c0:	90 48       	sbci	r25, 0x80	; 128
    34c2:	a1 05       	cpc	r26, r1
    34c4:	b1 05       	cpc	r27, r1
    34c6:	40 f0       	brcs	.+16     	; 0x34d8 <f_mkfs+0x28a>
    34c8:	81 e0       	ldi	r24, 0x01	; 1
    34ca:	90 e0       	ldi	r25, 0x00	; 0
    34cc:	a0 e0       	ldi	r26, 0x00	; 0
    34ce:	b0 e0       	ldi	r27, 0x00	; 0
    34d0:	89 83       	std	Y+1, r24	; 0x01
    34d2:	9a 83       	std	Y+2, r25	; 0x02
    34d4:	ab 83       	std	Y+3, r26	; 0x03
    34d6:	bc 83       	std	Y+4, r27	; 0x04
	n = (b_data + n - 1) & ~(n - 1);	/* Next nearest erase block from current data start */
    34d8:	89 81       	ldd	r24, Y+1	; 0x01
    34da:	9a 81       	ldd	r25, Y+2	; 0x02
    34dc:	ab 81       	ldd	r26, Y+3	; 0x03
    34de:	bc 81       	ldd	r27, Y+4	; 0x04
    34e0:	8d a3       	std	Y+37, r24	; 0x25
    34e2:	9e a3       	std	Y+38, r25	; 0x26
    34e4:	af a3       	std	Y+39, r26	; 0x27
    34e6:	b8 a7       	std	Y+40, r27	; 0x28
    34e8:	01 97       	sbiw	r24, 0x01	; 1
    34ea:	a1 09       	sbc	r26, r1
    34ec:	b1 09       	sbc	r27, r1
    34ee:	28 89       	ldd	r18, Y+16	; 0x10
    34f0:	39 89       	ldd	r19, Y+17	; 0x11
    34f2:	4a 89       	ldd	r20, Y+18	; 0x12
    34f4:	5b 89       	ldd	r21, Y+19	; 0x13
    34f6:	28 0f       	add	r18, r24
    34f8:	39 1f       	adc	r19, r25
    34fa:	4a 1f       	adc	r20, r26
    34fc:	5b 1f       	adc	r21, r27
    34fe:	8d a1       	ldd	r24, Y+37	; 0x25
    3500:	9e a1       	ldd	r25, Y+38	; 0x26
    3502:	af a1       	ldd	r26, Y+39	; 0x27
    3504:	b8 a5       	ldd	r27, Y+40	; 0x28
    3506:	b0 95       	com	r27
    3508:	a0 95       	com	r26
    350a:	90 95       	com	r25
    350c:	81 95       	neg	r24
    350e:	9f 4f       	sbci	r25, 0xFF	; 255
    3510:	af 4f       	sbci	r26, 0xFF	; 255
    3512:	bf 4f       	sbci	r27, 0xFF	; 255
    3514:	82 23       	and	r24, r18
    3516:	93 23       	and	r25, r19
    3518:	a4 23       	and	r26, r20
    351a:	b5 23       	and	r27, r21
	n = (n - b_data) / N_FATS;
    351c:	28 89       	ldd	r18, Y+16	; 0x10
    351e:	39 89       	ldd	r19, Y+17	; 0x11
    3520:	4a 89       	ldd	r20, Y+18	; 0x12
    3522:	5b 89       	ldd	r21, Y+19	; 0x13
    3524:	82 1b       	sub	r24, r18
    3526:	93 0b       	sbc	r25, r19
    3528:	a4 0b       	sbc	r26, r20
    352a:	b5 0b       	sbc	r27, r21
    352c:	89 83       	std	Y+1, r24	; 0x01
    352e:	9a 83       	std	Y+2, r25	; 0x02
    3530:	ab 83       	std	Y+3, r26	; 0x03
    3532:	bc 83       	std	Y+4, r27	; 0x04
	if (fmt == FS_FAT32) {		/* FAT32: Move FAT offset */
    3534:	3c 8d       	ldd	r19, Y+28	; 0x1c
    3536:	33 30       	cpi	r19, 0x03	; 3
    3538:	b9 f5       	brne	.+110    	; 0x35a8 <f_mkfs+0x35a>
		n_rsv += n;
    353a:	88 0e       	add	r8, r24
    353c:	99 1e       	adc	r9, r25
    353e:	aa 1e       	adc	r10, r26
    3540:	bb 1e       	adc	r11, r27
		b_fat += n;
    3542:	29 a1       	ldd	r18, Y+33	; 0x21
    3544:	3a a1       	ldd	r19, Y+34	; 0x22
    3546:	4b a1       	ldd	r20, Y+35	; 0x23
    3548:	5c a1       	ldd	r21, Y+36	; 0x24
    354a:	28 0f       	add	r18, r24
    354c:	39 1f       	adc	r19, r25
    354e:	4a 1f       	adc	r20, r26
    3550:	5b 1f       	adc	r21, r27
    3552:	29 a3       	std	Y+33, r18	; 0x21
    3554:	3a a3       	std	Y+34, r19	; 0x22
    3556:	4b a3       	std	Y+35, r20	; 0x23
    3558:	5c a3       	std	Y+36, r21	; 0x24
	} else {					/* FAT12/16: Expand FAT size */
		n_fat += n;
	}

	/* Determine number of clusters and final check of validity of the FAT sub-type */
	n_clst = (n_vol - n_rsv - n_fat * N_FATS - n_dir) / au;
    355a:	8d 81       	ldd	r24, Y+5	; 0x05
    355c:	9e 81       	ldd	r25, Y+6	; 0x06
    355e:	af 81       	ldd	r26, Y+7	; 0x07
    3560:	b8 85       	ldd	r27, Y+8	; 0x08
    3562:	88 19       	sub	r24, r8
    3564:	99 09       	sbc	r25, r9
    3566:	aa 09       	sbc	r26, r10
    3568:	bb 09       	sbc	r27, r11
    356a:	84 19       	sub	r24, r4
    356c:	95 09       	sbc	r25, r5
    356e:	a6 09       	sbc	r26, r6
    3570:	b7 09       	sbc	r27, r7
    3572:	bc 01       	movw	r22, r24
    3574:	cd 01       	movw	r24, r26
    3576:	2d 8d       	ldd	r18, Y+29	; 0x1d
    3578:	3e 8d       	ldd	r19, Y+30	; 0x1e
    357a:	4f 8d       	ldd	r20, Y+31	; 0x1f
    357c:	58 a1       	ldd	r21, Y+32	; 0x20
    357e:	62 1b       	sub	r22, r18
    3580:	73 0b       	sbc	r23, r19
    3582:	84 0b       	sbc	r24, r20
    3584:	95 0b       	sbc	r25, r21
    3586:	28 8d       	ldd	r18, Y+24	; 0x18
    3588:	39 8d       	ldd	r19, Y+25	; 0x19
    358a:	4a 8d       	ldd	r20, Y+26	; 0x1a
    358c:	5b 8d       	ldd	r21, Y+27	; 0x1b
    358e:	19 d6       	rcall	.+3122   	; 0x41c2 <__udivmodsi4>
    3590:	28 8f       	std	Y+24, r18	; 0x18
    3592:	39 8f       	std	Y+25, r19	; 0x19
    3594:	4a 8f       	std	Y+26, r20	; 0x1a
    3596:	5b 8f       	std	Y+27, r21	; 0x1b
	if (   (fmt == FS_FAT16 && n_clst < MIN_FAT16)
		|| (fmt == FS_FAT32 && n_clst < MIN_FAT32))
    3598:	26 3f       	cpi	r18, 0xF6	; 246
    359a:	3f 4f       	sbci	r19, 0xFF	; 255
    359c:	41 05       	cpc	r20, r1
    359e:	51 05       	cpc	r21, r1
    35a0:	08 f4       	brcc	.+2      	; 0x35a4 <f_mkfs+0x356>
    35a2:	d3 c2       	rjmp	.+1446   	; 0x3b4a <f_mkfs+0x8fc>
		return FR_MKFS_ABORTED;

	/* Determine system ID in the partition table */
	if (fmt == FS_FAT32) {
		sys = 0x0C;		/* FAT32X */
    35a4:	0c e0       	ldi	r16, 0x0C	; 12
    35a6:	50 c0       	rjmp	.+160    	; 0x3648 <f_mkfs+0x3fa>
	n = (n - b_data) / N_FATS;
	if (fmt == FS_FAT32) {		/* FAT32: Move FAT offset */
		n_rsv += n;
		b_fat += n;
	} else {					/* FAT12/16: Expand FAT size */
		n_fat += n;
    35a8:	48 0e       	add	r4, r24
    35aa:	59 1e       	adc	r5, r25
    35ac:	6a 1e       	adc	r6, r26
    35ae:	7b 1e       	adc	r7, r27
	}

	/* Determine number of clusters and final check of validity of the FAT sub-type */
	n_clst = (n_vol - n_rsv - n_fat * N_FATS - n_dir) / au;
    35b0:	8d 81       	ldd	r24, Y+5	; 0x05
    35b2:	9e 81       	ldd	r25, Y+6	; 0x06
    35b4:	af 81       	ldd	r26, Y+7	; 0x07
    35b6:	b8 85       	ldd	r27, Y+8	; 0x08
    35b8:	8b 87       	std	Y+11, r24	; 0x0b
    35ba:	9c 87       	std	Y+12, r25	; 0x0c
    35bc:	ad 87       	std	Y+13, r26	; 0x0d
    35be:	be 87       	std	Y+14, r27	; 0x0e
    35c0:	88 19       	sub	r24, r8
    35c2:	99 09       	sbc	r25, r9
    35c4:	aa 09       	sbc	r26, r10
    35c6:	bb 09       	sbc	r27, r11
    35c8:	84 19       	sub	r24, r4
    35ca:	95 09       	sbc	r25, r5
    35cc:	a6 09       	sbc	r26, r6
    35ce:	b7 09       	sbc	r27, r7
    35d0:	bc 01       	movw	r22, r24
    35d2:	cd 01       	movw	r24, r26
    35d4:	2d 8d       	ldd	r18, Y+29	; 0x1d
    35d6:	3e 8d       	ldd	r19, Y+30	; 0x1e
    35d8:	4f 8d       	ldd	r20, Y+31	; 0x1f
    35da:	58 a1       	ldd	r21, Y+32	; 0x20
    35dc:	62 1b       	sub	r22, r18
    35de:	73 0b       	sbc	r23, r19
    35e0:	84 0b       	sbc	r24, r20
    35e2:	95 0b       	sbc	r25, r21
    35e4:	28 8d       	ldd	r18, Y+24	; 0x18
    35e6:	39 8d       	ldd	r19, Y+25	; 0x19
    35e8:	4a 8d       	ldd	r20, Y+26	; 0x1a
    35ea:	5b 8d       	ldd	r21, Y+27	; 0x1b
    35ec:	ea d5       	rcall	.+3028   	; 0x41c2 <__udivmodsi4>
    35ee:	28 8f       	std	Y+24, r18	; 0x18
    35f0:	39 8f       	std	Y+25, r19	; 0x19
    35f2:	4a 8f       	std	Y+26, r20	; 0x1a
    35f4:	5b 8f       	std	Y+27, r21	; 0x1b
	if (   (fmt == FS_FAT16 && n_clst < MIN_FAT16)
    35f6:	3c 8d       	ldd	r19, Y+28	; 0x1c
    35f8:	32 30       	cpi	r19, 0x02	; 2
    35fa:	59 f4       	brne	.+22     	; 0x3612 <f_mkfs+0x3c4>
    35fc:	88 8d       	ldd	r24, Y+24	; 0x18
    35fe:	99 8d       	ldd	r25, Y+25	; 0x19
    3600:	aa 8d       	ldd	r26, Y+26	; 0x1a
    3602:	bb 8d       	ldd	r27, Y+27	; 0x1b
    3604:	86 3f       	cpi	r24, 0xF6	; 246
    3606:	9f 40       	sbci	r25, 0x0F	; 15
    3608:	a1 05       	cpc	r26, r1
    360a:	b1 05       	cpc	r27, r1
    360c:	08 f4       	brcc	.+2      	; 0x3610 <f_mkfs+0x3c2>
    360e:	9f c2       	rjmp	.+1342   	; 0x3b4e <f_mkfs+0x900>
    3610:	0e c0       	rjmp	.+28     	; 0x362e <f_mkfs+0x3e0>

	/* Determine system ID in the partition table */
	if (fmt == FS_FAT32) {
		sys = 0x0C;		/* FAT32X */
	} else {
		if (fmt == FS_FAT12 && n_vol < 0x10000) {
    3612:	fc 8d       	ldd	r31, Y+28	; 0x1c
    3614:	f1 30       	cpi	r31, 0x01	; 1
    3616:	59 f4       	brne	.+22     	; 0x362e <f_mkfs+0x3e0>
    3618:	2b 85       	ldd	r18, Y+11	; 0x0b
    361a:	3c 85       	ldd	r19, Y+12	; 0x0c
    361c:	4d 85       	ldd	r20, Y+13	; 0x0d
    361e:	5e 85       	ldd	r21, Y+14	; 0x0e
    3620:	21 15       	cp	r18, r1
    3622:	31 05       	cpc	r19, r1
    3624:	41 40       	sbci	r20, 0x01	; 1
    3626:	51 05       	cpc	r21, r1
    3628:	60 f0       	brcs	.+24     	; 0x3642 <f_mkfs+0x3f4>
			sys = 0x01;	/* FAT12(<65536) */
		} else {
			sys = (n_vol < 0x10000) ? 0x04 : 0x06;	/* FAT16(<65536) : FAT12/16(>=65536) */
    362a:	06 e0       	ldi	r16, 0x06	; 6
    362c:	0d c0       	rjmp	.+26     	; 0x3648 <f_mkfs+0x3fa>
    362e:	8b 85       	ldd	r24, Y+11	; 0x0b
    3630:	9c 85       	ldd	r25, Y+12	; 0x0c
    3632:	ad 85       	ldd	r26, Y+13	; 0x0d
    3634:	be 85       	ldd	r27, Y+14	; 0x0e
    3636:	00 97       	sbiw	r24, 0x00	; 0
    3638:	a1 40       	sbci	r26, 0x01	; 1
    363a:	b1 05       	cpc	r27, r1
    363c:	20 f0       	brcs	.+8      	; 0x3646 <f_mkfs+0x3f8>
    363e:	06 e0       	ldi	r16, 0x06	; 6
    3640:	03 c0       	rjmp	.+6      	; 0x3648 <f_mkfs+0x3fa>
	/* Determine system ID in the partition table */
	if (fmt == FS_FAT32) {
		sys = 0x0C;		/* FAT32X */
	} else {
		if (fmt == FS_FAT12 && n_vol < 0x10000) {
			sys = 0x01;	/* FAT12(<65536) */
    3642:	01 e0       	ldi	r16, 0x01	; 1
    3644:	01 c0       	rjmp	.+2      	; 0x3648 <f_mkfs+0x3fa>
		} else {
			sys = (n_vol < 0x10000) ? 0x04 : 0x06;	/* FAT16(<65536) : FAT12/16(>=65536) */
    3646:	04 e0       	ldi	r16, 0x04	; 4
		tbl[4] = sys;
		if (disk_write(pdrv, fs->win, 0, 1) != RES_OK)	/* Write it to teh MBR */
			return FR_DISK_ERR;
		md = 0xF8;
	} else {
		if (sfd) {	/* No partition table (SFD) */
    3648:	11 11       	cpse	r17, r1
    364a:	72 c0       	rjmp	.+228    	; 0x3730 <f_mkfs+0x4e2>
			md = 0xF0;
		} else {	/* Create partition table (FDISK) */
			mem_set(fs->win, 0, SS(fs));
    364c:	40 e0       	ldi	r20, 0x00	; 0
    364e:	54 e0       	ldi	r21, 0x04	; 4
    3650:	60 e0       	ldi	r22, 0x00	; 0
    3652:	70 e0       	ldi	r23, 0x00	; 0
    3654:	96 01       	movw	r18, r12
    3656:	22 5d       	subi	r18, 0xD2	; 210
    3658:	3f 4f       	sbci	r19, 0xFF	; 255
    365a:	39 8b       	std	Y+17, r19	; 0x11
    365c:	28 8b       	std	Y+16, r18	; 0x10
    365e:	c9 01       	movw	r24, r18
    3660:	0e 94 d4 06 	call	0xda8	; 0xda8 <mem_set>
			tbl = fs->win + MBR_Table;	/* Create partition table for single partition in the drive */
			tbl[1] = 1;						/* Partition start head */
    3664:	81 e0       	ldi	r24, 0x01	; 1
    3666:	f6 01       	movw	r30, r12
    3668:	e3 51       	subi	r30, 0x13	; 19
    366a:	fe 4f       	sbci	r31, 0xFE	; 254
    366c:	80 83       	st	Z, r24
			tbl[2] = 1;						/* Partition start sector */
    366e:	31 96       	adiw	r30, 0x01	; 1
    3670:	80 83       	st	Z, r24
			tbl[3] = 0;						/* Partition start cylinder */
    3672:	31 96       	adiw	r30, 0x01	; 1
    3674:	10 82       	st	Z, r1
			tbl[4] = sys;					/* System type */
    3676:	31 96       	adiw	r30, 0x01	; 1
    3678:	00 83       	st	Z, r16
			tbl[5] = 254;					/* Partition end head */
    367a:	8e ef       	ldi	r24, 0xFE	; 254
    367c:	31 96       	adiw	r30, 0x01	; 1
    367e:	80 83       	st	Z, r24
			n = (b_vol + n_vol) / 63 / 255;
    3680:	8d 81       	ldd	r24, Y+5	; 0x05
    3682:	9e 81       	ldd	r25, Y+6	; 0x06
    3684:	af 81       	ldd	r26, Y+7	; 0x07
    3686:	b8 85       	ldd	r27, Y+8	; 0x08
    3688:	8b 87       	std	Y+11, r24	; 0x0b
    368a:	9c 87       	std	Y+12, r25	; 0x0c
    368c:	ad 87       	std	Y+13, r26	; 0x0d
    368e:	be 87       	std	Y+14, r27	; 0x0e
    3690:	6c 89       	ldd	r22, Y+20	; 0x14
    3692:	7d 89       	ldd	r23, Y+21	; 0x15
    3694:	8e 89       	ldd	r24, Y+22	; 0x16
    3696:	9f 89       	ldd	r25, Y+23	; 0x17
    3698:	2b 85       	ldd	r18, Y+11	; 0x0b
    369a:	3c 85       	ldd	r19, Y+12	; 0x0c
    369c:	4d 85       	ldd	r20, Y+13	; 0x0d
    369e:	5e 85       	ldd	r21, Y+14	; 0x0e
    36a0:	62 0f       	add	r22, r18
    36a2:	73 1f       	adc	r23, r19
    36a4:	84 1f       	adc	r24, r20
    36a6:	95 1f       	adc	r25, r21
    36a8:	21 ec       	ldi	r18, 0xC1	; 193
    36aa:	3e e3       	ldi	r19, 0x3E	; 62
    36ac:	40 e0       	ldi	r20, 0x00	; 0
    36ae:	50 e0       	ldi	r21, 0x00	; 0
    36b0:	88 d5       	rcall	.+2832   	; 0x41c2 <__udivmodsi4>
    36b2:	29 83       	std	Y+1, r18	; 0x01
    36b4:	3a 83       	std	Y+2, r19	; 0x02
    36b6:	4b 83       	std	Y+3, r20	; 0x03
    36b8:	5c 83       	std	Y+4, r21	; 0x04
			tbl[6] = (BYTE)(n >> 2 | 63);	/* Partition end sector */
    36ba:	f6 01       	movw	r30, r12
    36bc:	ee 50       	subi	r30, 0x0E	; 14
    36be:	fe 4f       	sbci	r31, 0xFE	; 254
    36c0:	da 01       	movw	r26, r20
    36c2:	c9 01       	movw	r24, r18
    36c4:	b6 95       	lsr	r27
    36c6:	a7 95       	ror	r26
    36c8:	97 95       	ror	r25
    36ca:	87 95       	ror	r24
    36cc:	b6 95       	lsr	r27
    36ce:	a7 95       	ror	r26
    36d0:	97 95       	ror	r25
    36d2:	87 95       	ror	r24
    36d4:	8f 63       	ori	r24, 0x3F	; 63
    36d6:	80 83       	st	Z, r24
			tbl[7] = (BYTE)n;				/* End cylinder */
    36d8:	31 96       	adiw	r30, 0x01	; 1
    36da:	20 83       	st	Z, r18
			ST_DWORD(tbl + 8, 63);			/* Partition start in LBA */
    36dc:	8f e3       	ldi	r24, 0x3F	; 63
    36de:	31 96       	adiw	r30, 0x01	; 1
    36e0:	80 83       	st	Z, r24
    36e2:	31 96       	adiw	r30, 0x01	; 1
    36e4:	10 82       	st	Z, r1
    36e6:	31 96       	adiw	r30, 0x01	; 1
    36e8:	10 82       	st	Z, r1
    36ea:	31 96       	adiw	r30, 0x01	; 1
    36ec:	10 82       	st	Z, r1
			ST_DWORD(tbl + 12, n_vol);		/* Partition size in LBA */
    36ee:	31 96       	adiw	r30, 0x01	; 1
    36f0:	3b 85       	ldd	r19, Y+11	; 0x0b
    36f2:	30 83       	st	Z, r19
    36f4:	31 96       	adiw	r30, 0x01	; 1
    36f6:	4c 85       	ldd	r20, Y+12	; 0x0c
    36f8:	40 83       	st	Z, r20
    36fa:	31 96       	adiw	r30, 0x01	; 1
    36fc:	5d 85       	ldd	r21, Y+13	; 0x0d
    36fe:	50 83       	st	Z, r21
    3700:	31 96       	adiw	r30, 0x01	; 1
    3702:	6e 85       	ldd	r22, Y+14	; 0x0e
    3704:	60 83       	st	Z, r22
			ST_WORD(fs->win + BS_55AA, 0xAA55);	/* MBR signature */
    3706:	85 e5       	ldi	r24, 0x55	; 85
    3708:	f1 96       	adiw	r30, 0x31	; 49
    370a:	80 83       	st	Z, r24
    370c:	8a ea       	ldi	r24, 0xAA	; 170
    370e:	31 96       	adiw	r30, 0x01	; 1
    3710:	80 83       	st	Z, r24
			if (disk_write(pdrv, fs->win, 0, 1) != RES_OK)	/* Write it to the MBR */
    3712:	01 e0       	ldi	r16, 0x01	; 1
    3714:	10 e0       	ldi	r17, 0x00	; 0
    3716:	20 e0       	ldi	r18, 0x00	; 0
    3718:	30 e0       	ldi	r19, 0x00	; 0
    371a:	a9 01       	movw	r20, r18
    371c:	68 89       	ldd	r22, Y+16	; 0x10
    371e:	79 89       	ldd	r23, Y+17	; 0x11
    3720:	8e 2d       	mov	r24, r14
    3722:	0e 94 9f 03 	call	0x73e	; 0x73e <disk_write>
    3726:	81 11       	cpse	r24, r1
    3728:	14 c2       	rjmp	.+1064   	; 0x3b52 <f_mkfs+0x904>
				return FR_DISK_ERR;
			md = 0xF8;
    372a:	88 ef       	ldi	r24, 0xF8	; 248
    372c:	88 8b       	std	Y+16, r24	; 0x10
    372e:	02 c0       	rjmp	.+4      	; 0x3734 <f_mkfs+0x4e6>
		if (disk_write(pdrv, fs->win, 0, 1) != RES_OK)	/* Write it to teh MBR */
			return FR_DISK_ERR;
		md = 0xF8;
	} else {
		if (sfd) {	/* No partition table (SFD) */
			md = 0xF0;
    3730:	90 ef       	ldi	r25, 0xF0	; 240
    3732:	98 8b       	std	Y+16, r25	; 0x10
			md = 0xF8;
		}
	}

	/* Create BPB in the VBR */
	tbl = fs->win;							/* Clear sector */
    3734:	d6 01       	movw	r26, r12
    3736:	9e 96       	adiw	r26, 0x2e	; 46
    3738:	bc 87       	std	Y+12, r27	; 0x0c
    373a:	ab 87       	std	Y+11, r26	; 0x0b
	mem_set(tbl, 0, SS(fs));
    373c:	40 e0       	ldi	r20, 0x00	; 0
    373e:	54 e0       	ldi	r21, 0x04	; 4
    3740:	60 e0       	ldi	r22, 0x00	; 0
    3742:	70 e0       	ldi	r23, 0x00	; 0
    3744:	cd 01       	movw	r24, r26
    3746:	0e 94 d4 06 	call	0xda8	; 0xda8 <mem_set>
	mem_cpy(tbl, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code, OEM name */
    374a:	4b e0       	ldi	r20, 0x0B	; 11
    374c:	50 e0       	ldi	r21, 0x00	; 0
    374e:	60 e2       	ldi	r22, 0x20	; 32
    3750:	71 e0       	ldi	r23, 0x01	; 1
    3752:	8b 85       	ldd	r24, Y+11	; 0x0b
    3754:	9c 85       	ldd	r25, Y+12	; 0x0c
    3756:	0e 94 c6 06 	call	0xd8c	; 0xd8c <mem_cpy>
	i = SS(fs);								/* Sector size */
	ST_WORD(tbl + BPB_BytsPerSec, i);
    375a:	f6 01       	movw	r30, r12
    375c:	11 ae       	std	Z+57, r1	; 0x39
    375e:	84 e0       	ldi	r24, 0x04	; 4
    3760:	82 af       	std	Z+58, r24	; 0x3a
	tbl[BPB_SecPerClus] = (BYTE)au;			/* Sectors per cluster */
    3762:	23 ae       	std	Z+59, r2	; 0x3b
	ST_WORD(tbl + BPB_RsvdSecCnt, n_rsv);	/* Reserved sectors */
    3764:	84 ae       	std	Z+60, r8	; 0x3c
    3766:	95 ae       	std	Z+61, r9	; 0x3d
	tbl[BPB_NumFATs] = N_FATS;				/* Number of FATs */
    3768:	81 e0       	ldi	r24, 0x01	; 1
    376a:	86 af       	std	Z+62, r24	; 0x3e
	i = (fmt == FS_FAT32) ? 0 : N_ROOTDIR;	/* Number of root directory entries */
    376c:	fc 8d       	ldd	r31, Y+28	; 0x1c
    376e:	f3 30       	cpi	r31, 0x03	; 3
    3770:	11 f0       	breq	.+4      	; 0x3776 <f_mkfs+0x528>
    3772:	82 e0       	ldi	r24, 0x02	; 2
    3774:	01 c0       	rjmp	.+2      	; 0x3778 <f_mkfs+0x52a>
    3776:	80 e0       	ldi	r24, 0x00	; 0
	ST_WORD(tbl + BPB_RootEntCnt, i);
    3778:	d6 01       	movw	r26, r12
    377a:	df 96       	adiw	r26, 0x3f	; 63
    377c:	1c 92       	st	X, r1
    377e:	f6 01       	movw	r30, r12
    3780:	e0 5c       	subi	r30, 0xC0	; 192
    3782:	ff 4f       	sbci	r31, 0xFF	; 255
    3784:	80 83       	st	Z, r24
	if (n_vol < 0x10000) {					/* Number of total sectors */
    3786:	8d 81       	ldd	r24, Y+5	; 0x05
    3788:	9e 81       	ldd	r25, Y+6	; 0x06
    378a:	af 81       	ldd	r26, Y+7	; 0x07
    378c:	b8 85       	ldd	r27, Y+8	; 0x08
    378e:	00 97       	sbiw	r24, 0x00	; 0
    3790:	e1 e0       	ldi	r30, 0x01	; 1
    3792:	ae 07       	cpc	r26, r30
    3794:	b1 05       	cpc	r27, r1
    3796:	38 f4       	brcc	.+14     	; 0x37a6 <f_mkfs+0x558>
		ST_WORD(tbl + BPB_TotSec16, n_vol);
    3798:	f6 01       	movw	r30, r12
    379a:	ef 5b       	subi	r30, 0xBF	; 191
    379c:	ff 4f       	sbci	r31, 0xFF	; 255
    379e:	80 83       	st	Z, r24
    37a0:	31 96       	adiw	r30, 0x01	; 1
    37a2:	90 83       	st	Z, r25
    37a4:	0a c0       	rjmp	.+20     	; 0x37ba <f_mkfs+0x56c>
	} else {
		ST_DWORD(tbl + BPB_TotSec32, n_vol);
    37a6:	f6 01       	movw	r30, r12
    37a8:	e2 5b       	subi	r30, 0xB2	; 178
    37aa:	ff 4f       	sbci	r31, 0xFF	; 255
    37ac:	80 83       	st	Z, r24
    37ae:	31 96       	adiw	r30, 0x01	; 1
    37b0:	90 83       	st	Z, r25
    37b2:	31 96       	adiw	r30, 0x01	; 1
    37b4:	a0 83       	st	Z, r26
    37b6:	31 96       	adiw	r30, 0x01	; 1
    37b8:	b0 83       	st	Z, r27
	}
	tbl[BPB_Media] = md;					/* Media descriptor */
    37ba:	f6 01       	movw	r30, r12
    37bc:	ed 5b       	subi	r30, 0xBD	; 189
    37be:	ff 4f       	sbci	r31, 0xFF	; 255
    37c0:	28 89       	ldd	r18, Y+16	; 0x10
    37c2:	20 83       	st	Z, r18
	ST_WORD(tbl + BPB_SecPerTrk, 63);		/* Number of sectors per track */
    37c4:	8f e3       	ldi	r24, 0x3F	; 63
    37c6:	33 96       	adiw	r30, 0x03	; 3
    37c8:	80 83       	st	Z, r24
    37ca:	31 96       	adiw	r30, 0x01	; 1
    37cc:	10 82       	st	Z, r1
	ST_WORD(tbl + BPB_NumHeads, 255);		/* Number of heads */
    37ce:	8f ef       	ldi	r24, 0xFF	; 255
    37d0:	31 96       	adiw	r30, 0x01	; 1
    37d2:	80 83       	st	Z, r24
    37d4:	31 96       	adiw	r30, 0x01	; 1
    37d6:	10 82       	st	Z, r1
	ST_DWORD(tbl + BPB_HiddSec, b_vol);		/* Hidden sectors */
    37d8:	31 96       	adiw	r30, 0x01	; 1
    37da:	3c 89       	ldd	r19, Y+20	; 0x14
    37dc:	30 83       	st	Z, r19
    37de:	31 96       	adiw	r30, 0x01	; 1
    37e0:	10 82       	st	Z, r1
    37e2:	31 96       	adiw	r30, 0x01	; 1
    37e4:	10 82       	st	Z, r1
    37e6:	31 96       	adiw	r30, 0x01	; 1
    37e8:	10 82       	st	Z, r1
	n = GET_FATTIME();						/* Use current time as VSN */
    37ea:	80 e0       	ldi	r24, 0x00	; 0
    37ec:	90 e0       	ldi	r25, 0x00	; 0
    37ee:	a1 e2       	ldi	r26, 0x21	; 33
    37f0:	b6 e4       	ldi	r27, 0x46	; 70
    37f2:	89 83       	std	Y+1, r24	; 0x01
    37f4:	9a 83       	std	Y+2, r25	; 0x02
    37f6:	ab 83       	std	Y+3, r26	; 0x03
    37f8:	bc 83       	std	Y+4, r27	; 0x04
	if (fmt == FS_FAT32) {
    37fa:	4c 8d       	ldd	r20, Y+28	; 0x1c
    37fc:	43 30       	cpi	r20, 0x03	; 3
    37fe:	09 f0       	breq	.+2      	; 0x3802 <f_mkfs+0x5b4>
    3800:	4a c0       	rjmp	.+148    	; 0x3896 <f_mkfs+0x648>
		ST_DWORD(tbl + BS_VolID32, n);		/* VSN */
    3802:	b4 96       	adiw	r30, 0x24	; 36
    3804:	10 82       	st	Z, r1
    3806:	31 96       	adiw	r30, 0x01	; 1
    3808:	10 82       	st	Z, r1
    380a:	81 e2       	ldi	r24, 0x21	; 33
    380c:	31 96       	adiw	r30, 0x01	; 1
    380e:	80 83       	st	Z, r24
    3810:	86 e4       	ldi	r24, 0x46	; 70
    3812:	31 96       	adiw	r30, 0x01	; 1
    3814:	80 83       	st	Z, r24
		ST_DWORD(tbl + BPB_FATSz32, n_fat);	/* Number of sectors per FAT */
    3816:	b2 97       	sbiw	r30, 0x22	; 34
    3818:	40 82       	st	Z, r4
    381a:	31 96       	adiw	r30, 0x01	; 1
    381c:	50 82       	st	Z, r5
    381e:	31 96       	adiw	r30, 0x01	; 1
    3820:	60 82       	st	Z, r6
    3822:	31 96       	adiw	r30, 0x01	; 1
    3824:	70 82       	st	Z, r7
		ST_DWORD(tbl + BPB_RootClus, 2);	/* Root directory start cluster (2) */
    3826:	82 e0       	ldi	r24, 0x02	; 2
    3828:	35 96       	adiw	r30, 0x05	; 5
    382a:	80 83       	st	Z, r24
    382c:	31 96       	adiw	r30, 0x01	; 1
    382e:	10 82       	st	Z, r1
    3830:	31 96       	adiw	r30, 0x01	; 1
    3832:	10 82       	st	Z, r1
    3834:	31 96       	adiw	r30, 0x01	; 1
    3836:	10 82       	st	Z, r1
		ST_WORD(tbl + BPB_FSInfo, 1);		/* FSINFO record offset (VBR + 1) */
    3838:	81 e0       	ldi	r24, 0x01	; 1
    383a:	31 96       	adiw	r30, 0x01	; 1
    383c:	80 83       	st	Z, r24
    383e:	31 96       	adiw	r30, 0x01	; 1
    3840:	10 82       	st	Z, r1
		ST_WORD(tbl + BPB_BkBootSec, 6);	/* Backup boot record offset (VBR + 6) */
    3842:	86 e0       	ldi	r24, 0x06	; 6
    3844:	31 96       	adiw	r30, 0x01	; 1
    3846:	80 83       	st	Z, r24
    3848:	31 96       	adiw	r30, 0x01	; 1
    384a:	10 82       	st	Z, r1
		tbl[BS_DrvNum32] = 0x80;			/* Drive number */
    384c:	80 e8       	ldi	r24, 0x80	; 128
    384e:	3d 96       	adiw	r30, 0x0d	; 13
    3850:	80 83       	st	Z, r24
		tbl[BS_BootSig32] = 0x29;			/* Extended boot signature */
    3852:	89 e2       	ldi	r24, 0x29	; 41
    3854:	32 96       	adiw	r30, 0x02	; 2
    3856:	80 83       	st	Z, r24
		mem_cpy(tbl + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
    3858:	43 e1       	ldi	r20, 0x13	; 19
    385a:	50 e0       	ldi	r21, 0x00	; 0
    385c:	6c e2       	ldi	r22, 0x2C	; 44
    385e:	71 e0       	ldi	r23, 0x01	; 1
    3860:	c6 01       	movw	r24, r12
    3862:	8b 58       	subi	r24, 0x8B	; 139
    3864:	9f 4f       	sbci	r25, 0xFF	; 255
    3866:	0e 94 c6 06 	call	0xd8c	; 0xd8c <mem_cpy>
		ST_WORD(tbl + BPB_FATSz16, n_fat);	/* Number of sectors per FAT */
		tbl[BS_DrvNum] = 0x80;				/* Drive number */
		tbl[BS_BootSig] = 0x29;				/* Extended boot signature */
		mem_cpy(tbl + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
	}
	ST_WORD(tbl + BS_55AA, 0xAA55);			/* Signature (Offset is fixed here regardless of sector size) */
    386a:	85 e5       	ldi	r24, 0x55	; 85
    386c:	f6 01       	movw	r30, r12
    386e:	e4 5d       	subi	r30, 0xD4	; 212
    3870:	fd 4f       	sbci	r31, 0xFD	; 253
    3872:	80 83       	st	Z, r24
    3874:	8a ea       	ldi	r24, 0xAA	; 170
    3876:	31 96       	adiw	r30, 0x01	; 1
    3878:	80 83       	st	Z, r24
	if (disk_write(pdrv, tbl, b_vol, 1) != RES_OK)	/* Write it to the VBR sector */
    387a:	01 e0       	ldi	r16, 0x01	; 1
    387c:	10 e0       	ldi	r17, 0x00	; 0
    387e:	2c 89       	ldd	r18, Y+20	; 0x14
    3880:	3d 89       	ldd	r19, Y+21	; 0x15
    3882:	4e 89       	ldd	r20, Y+22	; 0x16
    3884:	5f 89       	ldd	r21, Y+23	; 0x17
    3886:	6b 85       	ldd	r22, Y+11	; 0x0b
    3888:	7c 85       	ldd	r23, Y+12	; 0x0c
    388a:	8e 2d       	mov	r24, r14
    388c:	0e 94 9f 03 	call	0x73e	; 0x73e <disk_write>
    3890:	88 23       	and	r24, r24
    3892:	b9 f1       	breq	.+110    	; 0x3902 <f_mkfs+0x6b4>
    3894:	60 c1       	rjmp	.+704    	; 0x3b56 <f_mkfs+0x908>
		ST_WORD(tbl + BPB_BkBootSec, 6);	/* Backup boot record offset (VBR + 6) */
		tbl[BS_DrvNum32] = 0x80;			/* Drive number */
		tbl[BS_BootSig32] = 0x29;			/* Extended boot signature */
		mem_cpy(tbl + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
	} else {
		ST_DWORD(tbl + BS_VolID, n);		/* VSN */
    3896:	f6 01       	movw	r30, r12
    3898:	eb 5a       	subi	r30, 0xAB	; 171
    389a:	ff 4f       	sbci	r31, 0xFF	; 255
    389c:	10 82       	st	Z, r1
    389e:	31 96       	adiw	r30, 0x01	; 1
    38a0:	10 82       	st	Z, r1
    38a2:	81 e2       	ldi	r24, 0x21	; 33
    38a4:	31 96       	adiw	r30, 0x01	; 1
    38a6:	80 83       	st	Z, r24
    38a8:	86 e4       	ldi	r24, 0x46	; 70
    38aa:	31 96       	adiw	r30, 0x01	; 1
    38ac:	80 83       	st	Z, r24
		ST_WORD(tbl + BPB_FATSz16, n_fat);	/* Number of sectors per FAT */
    38ae:	74 97       	sbiw	r30, 0x14	; 20
    38b0:	40 82       	st	Z, r4
    38b2:	31 96       	adiw	r30, 0x01	; 1
    38b4:	50 82       	st	Z, r5
		tbl[BS_DrvNum] = 0x80;				/* Drive number */
    38b6:	80 e8       	ldi	r24, 0x80	; 128
    38b8:	3d 96       	adiw	r30, 0x0d	; 13
    38ba:	80 83       	st	Z, r24
		tbl[BS_BootSig] = 0x29;				/* Extended boot signature */
    38bc:	89 e2       	ldi	r24, 0x29	; 41
    38be:	32 96       	adiw	r30, 0x02	; 2
    38c0:	80 83       	st	Z, r24
		mem_cpy(tbl + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
    38c2:	43 e1       	ldi	r20, 0x13	; 19
    38c4:	50 e0       	ldi	r21, 0x00	; 0
    38c6:	60 e4       	ldi	r22, 0x40	; 64
    38c8:	71 e0       	ldi	r23, 0x01	; 1
    38ca:	c6 01       	movw	r24, r12
    38cc:	87 5a       	subi	r24, 0xA7	; 167
    38ce:	9f 4f       	sbci	r25, 0xFF	; 255
    38d0:	0e 94 c6 06 	call	0xd8c	; 0xd8c <mem_cpy>
	}
	ST_WORD(tbl + BS_55AA, 0xAA55);			/* Signature (Offset is fixed here regardless of sector size) */
    38d4:	85 e5       	ldi	r24, 0x55	; 85
    38d6:	f6 01       	movw	r30, r12
    38d8:	e4 5d       	subi	r30, 0xD4	; 212
    38da:	fd 4f       	sbci	r31, 0xFD	; 253
    38dc:	80 83       	st	Z, r24
    38de:	8a ea       	ldi	r24, 0xAA	; 170
    38e0:	31 96       	adiw	r30, 0x01	; 1
    38e2:	80 83       	st	Z, r24
	if (disk_write(pdrv, tbl, b_vol, 1) != RES_OK)	/* Write it to the VBR sector */
    38e4:	01 e0       	ldi	r16, 0x01	; 1
    38e6:	10 e0       	ldi	r17, 0x00	; 0
    38e8:	2c 89       	ldd	r18, Y+20	; 0x14
    38ea:	3d 89       	ldd	r19, Y+21	; 0x15
    38ec:	4e 89       	ldd	r20, Y+22	; 0x16
    38ee:	5f 89       	ldd	r21, Y+23	; 0x17
    38f0:	6b 85       	ldd	r22, Y+11	; 0x0b
    38f2:	7c 85       	ldd	r23, Y+12	; 0x0c
    38f4:	8e 2d       	mov	r24, r14
    38f6:	0e 94 9f 03 	call	0x73e	; 0x73e <disk_write>
    38fa:	88 23       	and	r24, r24
    38fc:	09 f4       	brne	.+2      	; 0x3900 <f_mkfs+0x6b2>
    38fe:	8b c1       	rjmp	.+790    	; 0x3c16 <f_mkfs+0x9c8>
    3900:	2c c1       	rjmp	.+600    	; 0x3b5a <f_mkfs+0x90c>
		return FR_DISK_ERR;
	if (fmt == FS_FAT32)					/* Write it to the backup VBR if needed (VBR + 6) */
		disk_write(pdrv, tbl, b_vol + 6, 1);
    3902:	01 e0       	ldi	r16, 0x01	; 1
    3904:	10 e0       	ldi	r17, 0x00	; 0
    3906:	2c 89       	ldd	r18, Y+20	; 0x14
    3908:	3d 89       	ldd	r19, Y+21	; 0x15
    390a:	4e 89       	ldd	r20, Y+22	; 0x16
    390c:	5f 89       	ldd	r21, Y+23	; 0x17
    390e:	2a 5f       	subi	r18, 0xFA	; 250
    3910:	3f 4f       	sbci	r19, 0xFF	; 255
    3912:	4f 4f       	sbci	r20, 0xFF	; 255
    3914:	5f 4f       	sbci	r21, 0xFF	; 255
    3916:	6b 85       	ldd	r22, Y+11	; 0x0b
    3918:	7c 85       	ldd	r23, Y+12	; 0x0c
    391a:	8e 2d       	mov	r24, r14
    391c:	0e 94 9f 03 	call	0x73e	; 0x73e <disk_write>

	/* Initialize FAT area */
	wsect = b_fat;
	for (i = 0; i < N_FATS; i++) {		/* Initialize each FAT copy */
		mem_set(tbl, 0, SS(fs));			/* 1st sector of the FAT  */
    3920:	40 e0       	ldi	r20, 0x00	; 0
    3922:	54 e0       	ldi	r21, 0x04	; 4
    3924:	60 e0       	ldi	r22, 0x00	; 0
    3926:	70 e0       	ldi	r23, 0x00	; 0
    3928:	8b 85       	ldd	r24, Y+11	; 0x0b
    392a:	9c 85       	ldd	r25, Y+12	; 0x0c
    392c:	0e 94 d4 06 	call	0xda8	; 0xda8 <mem_set>
		n = md;								/* Media descriptor byte */
    3930:	58 89       	ldd	r21, Y+16	; 0x10
    3932:	85 2f       	mov	r24, r21
    3934:	90 e0       	ldi	r25, 0x00	; 0
    3936:	a0 e0       	ldi	r26, 0x00	; 0
    3938:	b0 e0       	ldi	r27, 0x00	; 0
		if (fmt != FS_FAT32) {
			n |= (fmt == FS_FAT12) ? 0x00FFFF00 : 0xFFFFFF00;
			ST_DWORD(tbl + 0, n);			/* Reserve cluster #0-1 (FAT12/16) */
		} else {
			n |= 0xFFFFFF00;
    393a:	9f 6f       	ori	r25, 0xFF	; 255
    393c:	af 6f       	ori	r26, 0xFF	; 255
    393e:	bf 6f       	ori	r27, 0xFF	; 255
    3940:	89 83       	std	Y+1, r24	; 0x01
    3942:	9a 83       	std	Y+2, r25	; 0x02
    3944:	ab 83       	std	Y+3, r26	; 0x03
    3946:	bc 83       	std	Y+4, r27	; 0x04
			ST_DWORD(tbl + 0, n);			/* Reserve cluster #0-1 (FAT32) */
    3948:	f6 01       	movw	r30, r12
    394a:	86 a7       	std	Z+46, r24	; 0x2e
    394c:	8f ef       	ldi	r24, 0xFF	; 255
    394e:	87 a7       	std	Z+47, r24	; 0x2f
    3950:	80 ab       	std	Z+48, r24	; 0x30
    3952:	81 ab       	std	Z+49, r24	; 0x31
			ST_DWORD(tbl + 4, 0xFFFFFFFF);
    3954:	82 ab       	std	Z+50, r24	; 0x32
    3956:	83 ab       	std	Z+51, r24	; 0x33
    3958:	84 ab       	std	Z+52, r24	; 0x34
    395a:	85 ab       	std	Z+53, r24	; 0x35
			ST_DWORD(tbl + 8, 0x0FFFFFFF);	/* Reserve cluster #2 for root directory */
    395c:	86 ab       	std	Z+54, r24	; 0x36
    395e:	87 ab       	std	Z+55, r24	; 0x37
    3960:	80 af       	std	Z+56, r24	; 0x38
    3962:	8f e0       	ldi	r24, 0x0F	; 15
    3964:	81 af       	std	Z+57, r24	; 0x39
    3966:	12 c0       	rjmp	.+36     	; 0x398c <f_mkfs+0x73e>
	wsect = b_fat;
	for (i = 0; i < N_FATS; i++) {		/* Initialize each FAT copy */
		mem_set(tbl, 0, SS(fs));			/* 1st sector of the FAT  */
		n = md;								/* Media descriptor byte */
		if (fmt != FS_FAT32) {
			n |= (fmt == FS_FAT12) ? 0x00FFFF00 : 0xFFFFFF00;
    3968:	40 e0       	ldi	r20, 0x00	; 0
    396a:	5f ef       	ldi	r21, 0xFF	; 255
    396c:	6f ef       	ldi	r22, 0xFF	; 255
    396e:	70 e0       	ldi	r23, 0x00	; 0
    3970:	84 2b       	or	r24, r20
    3972:	95 2b       	or	r25, r21
    3974:	a6 2b       	or	r26, r22
    3976:	b7 2b       	or	r27, r23
    3978:	89 83       	std	Y+1, r24	; 0x01
    397a:	9a 83       	std	Y+2, r25	; 0x02
    397c:	ab 83       	std	Y+3, r26	; 0x03
    397e:	bc 83       	std	Y+4, r27	; 0x04
			ST_DWORD(tbl + 0, n);			/* Reserve cluster #0-1 (FAT12/16) */
    3980:	f6 01       	movw	r30, r12
    3982:	86 a7       	std	Z+46, r24	; 0x2e
    3984:	2f ef       	ldi	r18, 0xFF	; 255
    3986:	27 a7       	std	Z+47, r18	; 0x2f
    3988:	20 ab       	std	Z+48, r18	; 0x30
    398a:	b1 ab       	std	Z+49, r27	; 0x31
			n |= 0xFFFFFF00;
			ST_DWORD(tbl + 0, n);			/* Reserve cluster #0-1 (FAT32) */
			ST_DWORD(tbl + 4, 0xFFFFFFFF);
			ST_DWORD(tbl + 8, 0x0FFFFFFF);	/* Reserve cluster #2 for root directory */
		}
		if (disk_write(pdrv, tbl, wsect++, 1) != RES_OK)
    398c:	89 a0       	ldd	r8, Y+33	; 0x21
    398e:	9a a0       	ldd	r9, Y+34	; 0x22
    3990:	ab a0       	ldd	r10, Y+35	; 0x23
    3992:	bc a0       	ldd	r11, Y+36	; 0x24
    3994:	ff ef       	ldi	r31, 0xFF	; 255
    3996:	8f 1a       	sub	r8, r31
    3998:	9f 0a       	sbc	r9, r31
    399a:	af 0a       	sbc	r10, r31
    399c:	bf 0a       	sbc	r11, r31
    399e:	01 e0       	ldi	r16, 0x01	; 1
    39a0:	10 e0       	ldi	r17, 0x00	; 0
    39a2:	29 a1       	ldd	r18, Y+33	; 0x21
    39a4:	3a a1       	ldd	r19, Y+34	; 0x22
    39a6:	4b a1       	ldd	r20, Y+35	; 0x23
    39a8:	5c a1       	ldd	r21, Y+36	; 0x24
    39aa:	6b 85       	ldd	r22, Y+11	; 0x0b
    39ac:	7c 85       	ldd	r23, Y+12	; 0x0c
    39ae:	8e 2d       	mov	r24, r14
    39b0:	0e 94 9f 03 	call	0x73e	; 0x73e <disk_write>
    39b4:	81 11       	cpse	r24, r1
    39b6:	d3 c0       	rjmp	.+422    	; 0x3b5e <f_mkfs+0x910>
			return FR_DISK_ERR;
		mem_set(tbl, 0, SS(fs));			/* Fill following FAT entries with zero */
    39b8:	40 e0       	ldi	r20, 0x00	; 0
    39ba:	54 e0       	ldi	r21, 0x04	; 4
    39bc:	60 e0       	ldi	r22, 0x00	; 0
    39be:	70 e0       	ldi	r23, 0x00	; 0
    39c0:	8b 85       	ldd	r24, Y+11	; 0x0b
    39c2:	9c 85       	ldd	r25, Y+12	; 0x0c
    39c4:	0e 94 d4 06 	call	0xda8	; 0xda8 <mem_set>
		for (n = 1; n < n_fat; n++) {		/* This loop may take a time on FAT32 volume due to many single sector writes */
    39c8:	81 e0       	ldi	r24, 0x01	; 1
    39ca:	90 e0       	ldi	r25, 0x00	; 0
    39cc:	a0 e0       	ldi	r26, 0x00	; 0
    39ce:	b0 e0       	ldi	r27, 0x00	; 0
    39d0:	89 83       	std	Y+1, r24	; 0x01
    39d2:	9a 83       	std	Y+2, r25	; 0x02
    39d4:	ab 83       	std	Y+3, r26	; 0x03
    39d6:	bc 83       	std	Y+4, r27	; 0x04
    39d8:	a5 01       	movw	r20, r10
    39da:	94 01       	movw	r18, r8
    39dc:	53 01       	movw	r10, r6
    39de:	42 01       	movw	r8, r4
    39e0:	1d c0       	rjmp	.+58     	; 0x3a1c <f_mkfs+0x7ce>
			if (disk_write(pdrv, tbl, wsect++, 1) != RES_OK)
    39e2:	29 01       	movw	r4, r18
    39e4:	3a 01       	movw	r6, r20
    39e6:	6f ef       	ldi	r22, 0xFF	; 255
    39e8:	46 1a       	sub	r4, r22
    39ea:	56 0a       	sbc	r5, r22
    39ec:	66 0a       	sbc	r6, r22
    39ee:	76 0a       	sbc	r7, r22
    39f0:	01 e0       	ldi	r16, 0x01	; 1
    39f2:	10 e0       	ldi	r17, 0x00	; 0
    39f4:	6b 85       	ldd	r22, Y+11	; 0x0b
    39f6:	7c 85       	ldd	r23, Y+12	; 0x0c
    39f8:	8f 85       	ldd	r24, Y+15	; 0x0f
    39fa:	0e 94 9f 03 	call	0x73e	; 0x73e <disk_write>
    39fe:	81 11       	cpse	r24, r1
    3a00:	b0 c0       	rjmp	.+352    	; 0x3b62 <f_mkfs+0x914>
			ST_DWORD(tbl + 8, 0x0FFFFFFF);	/* Reserve cluster #2 for root directory */
		}
		if (disk_write(pdrv, tbl, wsect++, 1) != RES_OK)
			return FR_DISK_ERR;
		mem_set(tbl, 0, SS(fs));			/* Fill following FAT entries with zero */
		for (n = 1; n < n_fat; n++) {		/* This loop may take a time on FAT32 volume due to many single sector writes */
    3a02:	89 81       	ldd	r24, Y+1	; 0x01
    3a04:	9a 81       	ldd	r25, Y+2	; 0x02
    3a06:	ab 81       	ldd	r26, Y+3	; 0x03
    3a08:	bc 81       	ldd	r27, Y+4	; 0x04
    3a0a:	01 96       	adiw	r24, 0x01	; 1
    3a0c:	a1 1d       	adc	r26, r1
    3a0e:	b1 1d       	adc	r27, r1
    3a10:	89 83       	std	Y+1, r24	; 0x01
    3a12:	9a 83       	std	Y+2, r25	; 0x02
    3a14:	ab 83       	std	Y+3, r26	; 0x03
    3a16:	bc 83       	std	Y+4, r27	; 0x04
			if (disk_write(pdrv, tbl, wsect++, 1) != RES_OK)
    3a18:	a3 01       	movw	r20, r6
    3a1a:	92 01       	movw	r18, r4
			ST_DWORD(tbl + 8, 0x0FFFFFFF);	/* Reserve cluster #2 for root directory */
		}
		if (disk_write(pdrv, tbl, wsect++, 1) != RES_OK)
			return FR_DISK_ERR;
		mem_set(tbl, 0, SS(fs));			/* Fill following FAT entries with zero */
		for (n = 1; n < n_fat; n++) {		/* This loop may take a time on FAT32 volume due to many single sector writes */
    3a1c:	89 81       	ldd	r24, Y+1	; 0x01
    3a1e:	9a 81       	ldd	r25, Y+2	; 0x02
    3a20:	ab 81       	ldd	r26, Y+3	; 0x03
    3a22:	bc 81       	ldd	r27, Y+4	; 0x04
    3a24:	88 15       	cp	r24, r8
    3a26:	99 05       	cpc	r25, r9
    3a28:	aa 05       	cpc	r26, r10
    3a2a:	bb 05       	cpc	r27, r11
    3a2c:	d0 f2       	brcs	.-76     	; 0x39e2 <f_mkfs+0x794>
				return FR_DISK_ERR;
		}
	}

	/* Initialize root directory */
	i = (fmt == FS_FAT32) ? au : (UINT)n_dir;
    3a2e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3a30:	83 30       	cpi	r24, 0x03	; 3
    3a32:	19 f0       	breq	.+6      	; 0x3a3a <f_mkfs+0x7ec>
    3a34:	2d 8c       	ldd	r2, Y+29	; 0x1d
    3a36:	3e 8c       	ldd	r3, Y+30	; 0x1e
    3a38:	00 c0       	rjmp	.+0      	; 0x3a3a <f_mkfs+0x7ec>
	do {
		if (disk_write(pdrv, tbl, wsect++, 1) != RES_OK)
    3a3a:	29 01       	movw	r4, r18
    3a3c:	3a 01       	movw	r6, r20
    3a3e:	9f ef       	ldi	r25, 0xFF	; 255
    3a40:	49 1a       	sub	r4, r25
    3a42:	59 0a       	sbc	r5, r25
    3a44:	69 0a       	sbc	r6, r25
    3a46:	79 0a       	sbc	r7, r25
    3a48:	01 e0       	ldi	r16, 0x01	; 1
    3a4a:	10 e0       	ldi	r17, 0x00	; 0
    3a4c:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a4e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a50:	8f 85       	ldd	r24, Y+15	; 0x0f
    3a52:	0e 94 9f 03 	call	0x73e	; 0x73e <disk_write>
    3a56:	81 11       	cpse	r24, r1
    3a58:	86 c0       	rjmp	.+268    	; 0x3b66 <f_mkfs+0x918>
			return FR_DISK_ERR;
	} while (--i);
    3a5a:	a1 e0       	ldi	r26, 0x01	; 1
    3a5c:	2a 1a       	sub	r2, r26
    3a5e:	31 08       	sbc	r3, r1
	}

	/* Initialize root directory */
	i = (fmt == FS_FAT32) ? au : (UINT)n_dir;
	do {
		if (disk_write(pdrv, tbl, wsect++, 1) != RES_OK)
    3a60:	a3 01       	movw	r20, r6
    3a62:	92 01       	movw	r18, r4
			return FR_DISK_ERR;
	} while (--i);
    3a64:	51 f7       	brne	.-44     	; 0x3a3a <f_mkfs+0x7ec>
		disk_ioctl(pdrv, CTRL_TRIM, eb);
	}
#endif

	/* Create FSINFO if needed */
	if (fmt == FS_FAT32) {
    3a66:	bc 8d       	ldd	r27, Y+28	; 0x1c
    3a68:	b3 30       	cpi	r27, 0x03	; 3
    3a6a:	09 f0       	breq	.+2      	; 0x3a6e <f_mkfs+0x820>
    3a6c:	53 c0       	rjmp	.+166    	; 0x3b14 <f_mkfs+0x8c6>
		ST_DWORD(tbl + FSI_LeadSig, 0x41615252);
    3a6e:	82 e5       	ldi	r24, 0x52	; 82
    3a70:	f6 01       	movw	r30, r12
    3a72:	86 a7       	std	Z+46, r24	; 0x2e
    3a74:	87 a7       	std	Z+47, r24	; 0x2f
    3a76:	81 e6       	ldi	r24, 0x61	; 97
    3a78:	80 ab       	std	Z+48, r24	; 0x30
    3a7a:	91 e4       	ldi	r25, 0x41	; 65
    3a7c:	91 ab       	std	Z+49, r25	; 0x31
		ST_DWORD(tbl + FSI_StrucSig, 0x61417272);
    3a7e:	ee 5e       	subi	r30, 0xEE	; 238
    3a80:	fd 4f       	sbci	r31, 0xFD	; 253
    3a82:	22 e7       	ldi	r18, 0x72	; 114
    3a84:	20 83       	st	Z, r18
    3a86:	31 96       	adiw	r30, 0x01	; 1
    3a88:	20 83       	st	Z, r18
    3a8a:	31 96       	adiw	r30, 0x01	; 1
    3a8c:	90 83       	st	Z, r25
    3a8e:	31 96       	adiw	r30, 0x01	; 1
    3a90:	80 83       	st	Z, r24
		ST_DWORD(tbl + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
    3a92:	31 96       	adiw	r30, 0x01	; 1
    3a94:	88 8d       	ldd	r24, Y+24	; 0x18
    3a96:	81 50       	subi	r24, 0x01	; 1
    3a98:	80 83       	st	Z, r24
    3a9a:	31 96       	adiw	r30, 0x01	; 1
    3a9c:	88 8d       	ldd	r24, Y+24	; 0x18
    3a9e:	99 8d       	ldd	r25, Y+25	; 0x19
    3aa0:	01 97       	sbiw	r24, 0x01	; 1
    3aa2:	90 83       	st	Z, r25
    3aa4:	48 8c       	ldd	r4, Y+24	; 0x18
    3aa6:	59 8c       	ldd	r5, Y+25	; 0x19
    3aa8:	6a 8c       	ldd	r6, Y+26	; 0x1a
    3aaa:	7b 8c       	ldd	r7, Y+27	; 0x1b
    3aac:	f1 e0       	ldi	r31, 0x01	; 1
    3aae:	4f 1a       	sub	r4, r31
    3ab0:	51 08       	sbc	r5, r1
    3ab2:	61 08       	sbc	r6, r1
    3ab4:	71 08       	sbc	r7, r1
    3ab6:	f6 01       	movw	r30, r12
    3ab8:	e8 5e       	subi	r30, 0xE8	; 232
    3aba:	fd 4f       	sbci	r31, 0xFD	; 253
    3abc:	60 82       	st	Z, r6
    3abe:	31 96       	adiw	r30, 0x01	; 1
    3ac0:	70 82       	st	Z, r7
		ST_DWORD(tbl + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
    3ac2:	31 96       	adiw	r30, 0x01	; 1
    3ac4:	82 e0       	ldi	r24, 0x02	; 2
    3ac6:	80 83       	st	Z, r24
    3ac8:	31 96       	adiw	r30, 0x01	; 1
    3aca:	10 82       	st	Z, r1
    3acc:	31 96       	adiw	r30, 0x01	; 1
    3ace:	10 82       	st	Z, r1
    3ad0:	31 96       	adiw	r30, 0x01	; 1
    3ad2:	10 82       	st	Z, r1
		ST_WORD(tbl + BS_55AA, 0xAA55);
    3ad4:	3f 96       	adiw	r30, 0x0f	; 15
    3ad6:	85 e5       	ldi	r24, 0x55	; 85
    3ad8:	80 83       	st	Z, r24
    3ada:	31 96       	adiw	r30, 0x01	; 1
    3adc:	8a ea       	ldi	r24, 0xAA	; 170
    3ade:	80 83       	st	Z, r24
		disk_write(pdrv, tbl, b_vol + 1, 1);	/* Write original (VBR + 1) */
    3ae0:	2c 89       	ldd	r18, Y+20	; 0x14
    3ae2:	3d 89       	ldd	r19, Y+21	; 0x15
    3ae4:	4e 89       	ldd	r20, Y+22	; 0x16
    3ae6:	5f 89       	ldd	r21, Y+23	; 0x17
    3ae8:	2f 5f       	subi	r18, 0xFF	; 255
    3aea:	3f 4f       	sbci	r19, 0xFF	; 255
    3aec:	4f 4f       	sbci	r20, 0xFF	; 255
    3aee:	5f 4f       	sbci	r21, 0xFF	; 255
    3af0:	6b 85       	ldd	r22, Y+11	; 0x0b
    3af2:	7c 85       	ldd	r23, Y+12	; 0x0c
    3af4:	8e 2d       	mov	r24, r14
    3af6:	0e 94 9f 03 	call	0x73e	; 0x73e <disk_write>
		disk_write(pdrv, tbl, b_vol + 7, 1);	/* Write backup (VBR + 7) */
    3afa:	2c 89       	ldd	r18, Y+20	; 0x14
    3afc:	3d 89       	ldd	r19, Y+21	; 0x15
    3afe:	4e 89       	ldd	r20, Y+22	; 0x16
    3b00:	5f 89       	ldd	r21, Y+23	; 0x17
    3b02:	29 5f       	subi	r18, 0xF9	; 249
    3b04:	3f 4f       	sbci	r19, 0xFF	; 255
    3b06:	4f 4f       	sbci	r20, 0xFF	; 255
    3b08:	5f 4f       	sbci	r21, 0xFF	; 255
    3b0a:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b0c:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b0e:	8e 2d       	mov	r24, r14
    3b10:	0e 94 9f 03 	call	0x73e	; 0x73e <disk_write>
	}

	return (disk_ioctl(pdrv, CTRL_SYNC, 0) == RES_OK) ? FR_OK : FR_DISK_ERR;
    3b14:	40 e0       	ldi	r20, 0x00	; 0
    3b16:	50 e0       	ldi	r21, 0x00	; 0
    3b18:	60 e0       	ldi	r22, 0x00	; 0
    3b1a:	8e 2d       	mov	r24, r14
    3b1c:	0e 94 0d 04 	call	0x81a	; 0x81a <disk_ioctl>
    3b20:	91 e0       	ldi	r25, 0x01	; 1
    3b22:	81 11       	cpse	r24, r1
    3b24:	8e c0       	rjmp	.+284    	; 0x3c42 <f_mkfs+0x9f4>
    3b26:	90 e0       	ldi	r25, 0x00	; 0
    3b28:	8c c0       	rjmp	.+280    	; 0x3c42 <f_mkfs+0x9f4>
	DWORD eb[2];
#endif


	/* Check mounted drive and clear work area */
	if (sfd > 1) return FR_INVALID_PARAMETER;
    3b2a:	93 e1       	ldi	r25, 0x13	; 19
    3b2c:	8a c0       	rjmp	.+276    	; 0x3c42 <f_mkfs+0x9f4>
	vol = get_ldnumber(&path);
	if (vol < 0) return FR_INVALID_DRIVE;
    3b2e:	9b e0       	ldi	r25, 0x0B	; 11
    3b30:	88 c0       	rjmp	.+272    	; 0x3c42 <f_mkfs+0x9f4>
	fs = FatFs[vol];
	if (!fs) return FR_NOT_ENABLED;
    3b32:	9c e0       	ldi	r25, 0x0C	; 12
    3b34:	86 c0       	rjmp	.+268    	; 0x3c42 <f_mkfs+0x9f4>
	pdrv = LD2PD(vol);	/* Physical drive */
	part = LD2PT(vol);	/* Partition (0:auto detect, 1-4:get from partition table)*/

	/* Get disk statics */
	stat = disk_initialize(pdrv);
	if (stat & STA_NOINIT) return FR_NOT_READY;
    3b36:	93 e0       	ldi	r25, 0x03	; 3
    3b38:	84 c0       	rjmp	.+264    	; 0x3c42 <f_mkfs+0x9f4>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
    3b3a:	9a e0       	ldi	r25, 0x0A	; 10
    3b3c:	82 c0       	rjmp	.+260    	; 0x3c42 <f_mkfs+0x9f4>
		b_vol = LD_DWORD(tbl + 8);	/* Volume start sector */
		n_vol = LD_DWORD(tbl + 12);	/* Volume size */
	} else {
		/* Create a partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &n_vol) != RES_OK || n_vol < 128)
			return FR_DISK_ERR;
    3b3e:	91 e0       	ldi	r25, 0x01	; 1
    3b40:	80 c0       	rjmp	.+256    	; 0x3c42 <f_mkfs+0x9f4>
    3b42:	91 e0       	ldi	r25, 0x01	; 1
    3b44:	7e c0       	rjmp	.+252    	; 0x3c42 <f_mkfs+0x9f4>
		n_dir = (DWORD)N_ROOTDIR * SZ_DIRE / SS(fs);
	}
	b_fat = b_vol + n_rsv;				/* FAT area start sector */
	b_dir = b_fat + n_fat * N_FATS;		/* Directory area start sector */
	b_data = b_dir + n_dir;				/* Data area start sector */
	if (n_vol < b_data + au - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
    3b46:	9e e0       	ldi	r25, 0x0E	; 14
    3b48:	7c c0       	rjmp	.+248    	; 0x3c42 <f_mkfs+0x9f4>

	/* Determine number of clusters and final check of validity of the FAT sub-type */
	n_clst = (n_vol - n_rsv - n_fat * N_FATS - n_dir) / au;
	if (   (fmt == FS_FAT16 && n_clst < MIN_FAT16)
		|| (fmt == FS_FAT32 && n_clst < MIN_FAT32))
		return FR_MKFS_ABORTED;
    3b4a:	9e e0       	ldi	r25, 0x0E	; 14
    3b4c:	7a c0       	rjmp	.+244    	; 0x3c42 <f_mkfs+0x9f4>
    3b4e:	9e e0       	ldi	r25, 0x0E	; 14
    3b50:	78 c0       	rjmp	.+240    	; 0x3c42 <f_mkfs+0x9f4>
			tbl[7] = (BYTE)n;				/* End cylinder */
			ST_DWORD(tbl + 8, 63);			/* Partition start in LBA */
			ST_DWORD(tbl + 12, n_vol);		/* Partition size in LBA */
			ST_WORD(fs->win + BS_55AA, 0xAA55);	/* MBR signature */
			if (disk_write(pdrv, fs->win, 0, 1) != RES_OK)	/* Write it to the MBR */
				return FR_DISK_ERR;
    3b52:	91 e0       	ldi	r25, 0x01	; 1
    3b54:	76 c0       	rjmp	.+236    	; 0x3c42 <f_mkfs+0x9f4>
		tbl[BS_BootSig] = 0x29;				/* Extended boot signature */
		mem_cpy(tbl + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
	}
	ST_WORD(tbl + BS_55AA, 0xAA55);			/* Signature (Offset is fixed here regardless of sector size) */
	if (disk_write(pdrv, tbl, b_vol, 1) != RES_OK)	/* Write it to the VBR sector */
		return FR_DISK_ERR;
    3b56:	91 e0       	ldi	r25, 0x01	; 1
    3b58:	74 c0       	rjmp	.+232    	; 0x3c42 <f_mkfs+0x9f4>
    3b5a:	91 e0       	ldi	r25, 0x01	; 1
    3b5c:	72 c0       	rjmp	.+228    	; 0x3c42 <f_mkfs+0x9f4>
			ST_DWORD(tbl + 0, n);			/* Reserve cluster #0-1 (FAT32) */
			ST_DWORD(tbl + 4, 0xFFFFFFFF);
			ST_DWORD(tbl + 8, 0x0FFFFFFF);	/* Reserve cluster #2 for root directory */
		}
		if (disk_write(pdrv, tbl, wsect++, 1) != RES_OK)
			return FR_DISK_ERR;
    3b5e:	91 e0       	ldi	r25, 0x01	; 1
    3b60:	70 c0       	rjmp	.+224    	; 0x3c42 <f_mkfs+0x9f4>
		mem_set(tbl, 0, SS(fs));			/* Fill following FAT entries with zero */
		for (n = 1; n < n_fat; n++) {		/* This loop may take a time on FAT32 volume due to many single sector writes */
			if (disk_write(pdrv, tbl, wsect++, 1) != RES_OK)
				return FR_DISK_ERR;
    3b62:	91 e0       	ldi	r25, 0x01	; 1
    3b64:	6e c0       	rjmp	.+220    	; 0x3c42 <f_mkfs+0x9f4>

	/* Initialize root directory */
	i = (fmt == FS_FAT32) ? au : (UINT)n_dir;
	do {
		if (disk_write(pdrv, tbl, wsect++, 1) != RES_OK)
			return FR_DISK_ERR;
    3b66:	91 e0       	ldi	r25, 0x01	; 1
    3b68:	6c c0       	rjmp	.+216    	; 0x3c42 <f_mkfs+0x9f4>
	if (!au) {						/* AU auto selection */
		vs = n_vol / (2000 / (SS(fs) / 512));
		for (i = 0; vs < vst[i]; i++) ;
		au = cst[i];
	}
	if (au >= _MIN_SS) au /= SS(fs);	/* Number of sectors per cluster */
    3b6a:	a1 14       	cp	r10, r1
    3b6c:	24 e0       	ldi	r18, 0x04	; 4
    3b6e:	b2 06       	cpc	r11, r18
    3b70:	08 f0       	brcs	.+2      	; 0x3b74 <f_mkfs+0x926>
    3b72:	18 cc       	rjmp	.-2000   	; 0x33a4 <f_mkfs+0x156>
    3b74:	22 cc       	rjmp	.-1980   	; 0x33ba <f_mkfs+0x16c>
	if (fmt == FS_FAT32) {
		n_fat = ((n_clst * 4) + 8 + SS(fs) - 1) / SS(fs);
		n_rsv = 32;
		n_dir = 0;
	} else {
		n_fat = (fmt == FS_FAT12) ? (n_clst * 3 + 1) / 2 + 3 : (n_clst * 2) + 4;
    3b76:	a3 e0       	ldi	r26, 0x03	; 3
    3b78:	b0 e0       	ldi	r27, 0x00	; 0
    3b7a:	4e d3       	rcall	.+1692   	; 0x4218 <__muluhisi3>
    3b7c:	dc 01       	movw	r26, r24
    3b7e:	cb 01       	movw	r24, r22
    3b80:	01 96       	adiw	r24, 0x01	; 1
    3b82:	a1 1d       	adc	r26, r1
    3b84:	b1 1d       	adc	r27, r1
    3b86:	b6 95       	lsr	r27
    3b88:	a7 95       	ror	r26
    3b8a:	97 95       	ror	r25
    3b8c:	87 95       	ror	r24
    3b8e:	03 96       	adiw	r24, 0x03	; 3
    3b90:	a1 1d       	adc	r26, r1
    3b92:	b1 1d       	adc	r27, r1
	if (!au) au = 1;
	if (au > 128) au = 128;

	/* Pre-compute number of clusters and FAT sub-type */
	n_clst = n_vol / au;
	fmt = FS_FAT12;
    3b94:	31 e0       	ldi	r19, 0x01	; 1
    3b96:	3c 8f       	std	Y+28, r19	; 0x1c
    3b98:	2d cc       	rjmp	.-1958   	; 0x33f4 <f_mkfs+0x1a6>
	if (n_clst >= MIN_FAT16) fmt = FS_FAT16;
	if (n_clst >= MIN_FAT32) fmt = FS_FAT32;
    3b9a:	26 3f       	cpi	r18, 0xF6	; 246
    3b9c:	6f ef       	ldi	r22, 0xFF	; 255
    3b9e:	36 07       	cpc	r19, r22
    3ba0:	41 05       	cpc	r20, r1
    3ba2:	51 05       	cpc	r21, r1
    3ba4:	98 f4       	brcc	.+38     	; 0x3bcc <f_mkfs+0x97e>
    3ba6:	e7 cf       	rjmp	.-50     	; 0x3b76 <f_mkfs+0x928>
	if (fmt == FS_FAT32) {
		n_fat = ((n_clst * 4) + 8 + SS(fs) - 1) / SS(fs);
		n_rsv = 32;
		n_dir = 0;
	} else {
		n_fat = (fmt == FS_FAT12) ? (n_clst * 3 + 1) / 2 + 3 : (n_clst * 2) + 4;
    3ba8:	da 01       	movw	r26, r20
    3baa:	c9 01       	movw	r24, r18
    3bac:	02 96       	adiw	r24, 0x02	; 2
    3bae:	a1 1d       	adc	r26, r1
    3bb0:	b1 1d       	adc	r27, r1
    3bb2:	88 0f       	add	r24, r24
    3bb4:	99 1f       	adc	r25, r25
    3bb6:	aa 1f       	adc	r26, r26
    3bb8:	bb 1f       	adc	r27, r27
	if (au > 128) au = 128;

	/* Pre-compute number of clusters and FAT sub-type */
	n_clst = n_vol / au;
	fmt = FS_FAT12;
	if (n_clst >= MIN_FAT16) fmt = FS_FAT16;
    3bba:	e2 e0       	ldi	r30, 0x02	; 2
    3bbc:	ec 8f       	std	Y+28, r30	; 0x1c
    3bbe:	1a cc       	rjmp	.-1996   	; 0x33f4 <f_mkfs+0x1a6>
	if (n_clst >= MIN_FAT32) fmt = FS_FAT32;
    3bc0:	26 3f       	cpi	r18, 0xF6	; 246
    3bc2:	ff ef       	ldi	r31, 0xFF	; 255
    3bc4:	3f 07       	cpc	r19, r31
    3bc6:	41 05       	cpc	r20, r1
    3bc8:	51 05       	cpc	r21, r1
    3bca:	70 f3       	brcs	.-36     	; 0x3ba8 <f_mkfs+0x95a>

	/* Determine offset and size of FAT structure */
	if (fmt == FS_FAT32) {
		n_fat = ((n_clst * 4) + 8 + SS(fs) - 1) / SS(fs);
    3bcc:	da 01       	movw	r26, r20
    3bce:	c9 01       	movw	r24, r18
    3bd0:	88 0f       	add	r24, r24
    3bd2:	99 1f       	adc	r25, r25
    3bd4:	aa 1f       	adc	r26, r26
    3bd6:	bb 1f       	adc	r27, r27
    3bd8:	88 0f       	add	r24, r24
    3bda:	99 1f       	adc	r25, r25
    3bdc:	aa 1f       	adc	r26, r26
    3bde:	bb 1f       	adc	r27, r27
    3be0:	89 5f       	subi	r24, 0xF9	; 249
    3be2:	9b 4f       	sbci	r25, 0xFB	; 251
    3be4:	af 4f       	sbci	r26, 0xFF	; 255
    3be6:	bf 4f       	sbci	r27, 0xFF	; 255
    3be8:	2c 01       	movw	r4, r24
    3bea:	3d 01       	movw	r6, r26
    3bec:	03 2e       	mov	r0, r19
    3bee:	3a e0       	ldi	r19, 0x0A	; 10
    3bf0:	76 94       	lsr	r7
    3bf2:	67 94       	ror	r6
    3bf4:	57 94       	ror	r5
    3bf6:	47 94       	ror	r4
    3bf8:	3a 95       	dec	r19
    3bfa:	d1 f7       	brne	.-12     	; 0x3bf0 <f_mkfs+0x9a2>
    3bfc:	30 2d       	mov	r19, r0
    3bfe:	23 e0       	ldi	r18, 0x03	; 3
    3c00:	2c 8f       	std	Y+28, r18	; 0x1c
		n_rsv = 32;
		n_dir = 0;
    3c02:	1d 8e       	std	Y+29, r1	; 0x1d
    3c04:	1e 8e       	std	Y+30, r1	; 0x1e
    3c06:	1f 8e       	std	Y+31, r1	; 0x1f
    3c08:	18 a2       	std	Y+32, r1	; 0x20
	if (n_clst >= MIN_FAT32) fmt = FS_FAT32;

	/* Determine offset and size of FAT structure */
	if (fmt == FS_FAT32) {
		n_fat = ((n_clst * 4) + 8 + SS(fs) - 1) / SS(fs);
		n_rsv = 32;
    3c0a:	81 2c       	mov	r8, r1
    3c0c:	91 2c       	mov	r9, r1
    3c0e:	54 01       	movw	r10, r8
    3c10:	68 94       	set
    3c12:	85 f8       	bld	r8, 5
    3c14:	0a cc       	rjmp	.-2028   	; 0x342a <f_mkfs+0x1dc>
		disk_write(pdrv, tbl, b_vol + 6, 1);

	/* Initialize FAT area */
	wsect = b_fat;
	for (i = 0; i < N_FATS; i++) {		/* Initialize each FAT copy */
		mem_set(tbl, 0, SS(fs));			/* 1st sector of the FAT  */
    3c16:	40 e0       	ldi	r20, 0x00	; 0
    3c18:	54 e0       	ldi	r21, 0x04	; 4
    3c1a:	60 e0       	ldi	r22, 0x00	; 0
    3c1c:	70 e0       	ldi	r23, 0x00	; 0
    3c1e:	8b 85       	ldd	r24, Y+11	; 0x0b
    3c20:	9c 85       	ldd	r25, Y+12	; 0x0c
    3c22:	0e 94 d4 06 	call	0xda8	; 0xda8 <mem_set>
		n = md;								/* Media descriptor byte */
    3c26:	38 89       	ldd	r19, Y+16	; 0x10
    3c28:	83 2f       	mov	r24, r19
    3c2a:	90 e0       	ldi	r25, 0x00	; 0
    3c2c:	a0 e0       	ldi	r26, 0x00	; 0
    3c2e:	b0 e0       	ldi	r27, 0x00	; 0
		if (fmt != FS_FAT32) {
			n |= (fmt == FS_FAT12) ? 0x00FFFF00 : 0xFFFFFF00;
    3c30:	4c 8d       	ldd	r20, Y+28	; 0x1c
    3c32:	41 30       	cpi	r20, 0x01	; 1
    3c34:	09 f4       	brne	.+2      	; 0x3c38 <f_mkfs+0x9ea>
    3c36:	98 ce       	rjmp	.-720    	; 0x3968 <f_mkfs+0x71a>
    3c38:	40 e0       	ldi	r20, 0x00	; 0
    3c3a:	5f ef       	ldi	r21, 0xFF	; 255
    3c3c:	6f ef       	ldi	r22, 0xFF	; 255
    3c3e:	7f ef       	ldi	r23, 0xFF	; 255
    3c40:	97 ce       	rjmp	.-722    	; 0x3970 <f_mkfs+0x722>
		disk_write(pdrv, tbl, b_vol + 1, 1);	/* Write original (VBR + 1) */
		disk_write(pdrv, tbl, b_vol + 7, 1);	/* Write backup (VBR + 7) */
	}

	return (disk_ioctl(pdrv, CTRL_SYNC, 0) == RES_OK) ? FR_OK : FR_DISK_ERR;
}
    3c42:	89 2f       	mov	r24, r25
    3c44:	a8 96       	adiw	r28, 0x28	; 40
    3c46:	0f b6       	in	r0, 0x3f	; 63
    3c48:	f8 94       	cli
    3c4a:	de bf       	out	0x3e, r29	; 62
    3c4c:	0f be       	out	0x3f, r0	; 63
    3c4e:	cd bf       	out	0x3d, r28	; 61
    3c50:	df 91       	pop	r29
    3c52:	cf 91       	pop	r28
    3c54:	1f 91       	pop	r17
    3c56:	0f 91       	pop	r16
    3c58:	ff 90       	pop	r15
    3c5a:	ef 90       	pop	r14
    3c5c:	df 90       	pop	r13
    3c5e:	cf 90       	pop	r12
    3c60:	bf 90       	pop	r11
    3c62:	af 90       	pop	r10
    3c64:	9f 90       	pop	r9
    3c66:	8f 90       	pop	r8
    3c68:	7f 90       	pop	r7
    3c6a:	6f 90       	pop	r6
    3c6c:	5f 90       	pop	r5
    3c6e:	4f 90       	pop	r4
    3c70:	3f 90       	pop	r3
    3c72:	2f 90       	pop	r2
    3c74:	08 95       	ret

00003c76 <_ZN3I2CC1Ev>:
void I2C::twi_ack(){
	TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);
}
void I2C::twi_nack(){
	TWCR = (1<<TWINT) | (1<<TWEN);
	TWCR &= ~(1<<TWEA);
    3c76:	82 e0       	ldi	r24, 0x02	; 2
    3c78:	80 93 b8 00 	sts	0x00B8, r24
    3c7c:	08 95       	ret

00003c7e <_ZN3I2CD1Ev>:
    3c7e:	08 95       	ret

00003c80 <_ZN3I2C9twi_startEv>:
    3c80:	84 ea       	ldi	r24, 0xA4	; 164
    3c82:	80 93 bc 00 	sts	0x00BC, r24
    3c86:	08 95       	ret

00003c88 <_ZN3I2C8twi_stopEv>:
    3c88:	84 e9       	ldi	r24, 0x94	; 148
    3c8a:	80 93 bc 00 	sts	0x00BC, r24
    3c8e:	08 95       	ret

00003c90 <_ZN3I2C9twi_writeEh>:
}

void I2C::twi_write(uint8_t data){
	while(!(TWCR & (1<<TWINT)));
    3c90:	ec eb       	ldi	r30, 0xBC	; 188
    3c92:	f0 e0       	ldi	r31, 0x00	; 0
    3c94:	80 81       	ld	r24, Z
    3c96:	88 23       	and	r24, r24
    3c98:	ec f7       	brge	.-6      	; 0x3c94 <_ZN3I2C9twi_writeEh+0x4>
	TWDR = data;
    3c9a:	60 93 bb 00 	sts	0x00BB, r22
	TWCR = (1<<TWINT) | (1<<TWEN);
    3c9e:	84 e8       	ldi	r24, 0x84	; 132
    3ca0:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));
    3ca4:	ec eb       	ldi	r30, 0xBC	; 188
    3ca6:	f0 e0       	ldi	r31, 0x00	; 0
    3ca8:	80 81       	ld	r24, Z
    3caa:	88 23       	and	r24, r24
    3cac:	ec f7       	brge	.-6      	; 0x3ca8 <_ZN3I2C9twi_writeEh+0x18>
}
    3cae:	08 95       	ret

00003cb0 <__vector_16>:

#include "Display.h"
Display oled;

volatile uint8_t Timerstat;
ISR(TIMER0_COMPA_vect){
    3cb0:	1f 92       	push	r1
    3cb2:	0f 92       	push	r0
    3cb4:	0f b6       	in	r0, 0x3f	; 63
    3cb6:	0f 92       	push	r0
    3cb8:	11 24       	eor	r1, r1
    3cba:	0b b6       	in	r0, 0x3b	; 59
    3cbc:	0f 92       	push	r0
    3cbe:	2f 93       	push	r18
    3cc0:	3f 93       	push	r19
    3cc2:	4f 93       	push	r20
    3cc4:	5f 93       	push	r21
    3cc6:	6f 93       	push	r22
    3cc8:	7f 93       	push	r23
    3cca:	8f 93       	push	r24
    3ccc:	9f 93       	push	r25
    3cce:	af 93       	push	r26
    3cd0:	bf 93       	push	r27
    3cd2:	ef 93       	push	r30
    3cd4:	ff 93       	push	r31
	Timerstat++;
    3cd6:	80 91 9f 01 	lds	r24, 0x019F
    3cda:	8f 5f       	subi	r24, 0xFF	; 255
    3cdc:	80 93 9f 01 	sts	0x019F, r24
	disk_timerproc();	//Timer der SD Karte
    3ce0:	0e 94 a9 05 	call	0xb52	; 0xb52 <disk_timerproc>
}
    3ce4:	ff 91       	pop	r31
    3ce6:	ef 91       	pop	r30
    3ce8:	bf 91       	pop	r27
    3cea:	af 91       	pop	r26
    3cec:	9f 91       	pop	r25
    3cee:	8f 91       	pop	r24
    3cf0:	7f 91       	pop	r23
    3cf2:	6f 91       	pop	r22
    3cf4:	5f 91       	pop	r21
    3cf6:	4f 91       	pop	r20
    3cf8:	3f 91       	pop	r19
    3cfa:	2f 91       	pop	r18
    3cfc:	0f 90       	pop	r0
    3cfe:	0b be       	out	0x3b, r0	; 59
    3d00:	0f 90       	pop	r0
    3d02:	0f be       	out	0x3f, r0	; 63
    3d04:	0f 90       	pop	r0
    3d06:	1f 90       	pop	r1
    3d08:	18 95       	reti

00003d0a <main>:


int main(void)
{
    3d0a:	cf 93       	push	r28
    3d0c:	df 93       	push	r29
    3d0e:	cd b7       	in	r28, 0x3d	; 61
    3d10:	de b7       	in	r29, 0x3e	; 62
    3d12:	c0 57       	subi	r28, 0x70	; 112
    3d14:	d8 40       	sbci	r29, 0x08	; 8
    3d16:	0f b6       	in	r0, 0x3f	; 63
    3d18:	f8 94       	cli
    3d1a:	de bf       	out	0x3e, r29	; 62
    3d1c:	0f be       	out	0x3f, r0	; 63
    3d1e:	cd bf       	out	0x3d, r28	; 61
	char buffer[20];
	uint8_t buffersize;
	Timerstat = 0;
    3d20:	10 92 9f 01 	sts	0x019F, r1
	int status;
	//init Timer
	TCCR0A	 = (1<<WGM01);		//Timer im ctc Mide
    3d24:	82 e0       	ldi	r24, 0x02	; 2
    3d26:	84 bd       	out	0x24, r24	; 36
	OCR0A	 = 38;		//ctc counter ende
    3d28:	86 e2       	ldi	r24, 0x26	; 38
    3d2a:	87 bd       	out	0x27, r24	; 39
	TIMSK0	|= (1<<OCIE0A);
    3d2c:	ee e6       	ldi	r30, 0x6E	; 110
    3d2e:	f0 e0       	ldi	r31, 0x00	; 0
    3d30:	80 81       	ld	r24, Z
    3d32:	82 60       	ori	r24, 0x02	; 2
    3d34:	80 83       	st	Z, r24
	TCCR0B	|= (1<<CS02) | (1<<CS00);	//presc=1024
    3d36:	85 b5       	in	r24, 0x25	; 37
    3d38:	85 60       	ori	r24, 0x05	; 5
    3d3a:	85 bd       	out	0x25, r24	; 37
	sei();
    3d3c:	78 94       	sei
	oled.clearFrame();
    3d3e:	80 ea       	ldi	r24, 0xA0	; 160
    3d40:	91 e0       	ldi	r25, 0x01	; 1
    3d42:	0e 94 c5 05 	call	0xb8a	; 0xb8a <_ZN7Display10clearFrameEv>
	oled.sendFrame();
    3d46:	80 ea       	ldi	r24, 0xA0	; 160
    3d48:	91 e0       	ldi	r25, 0x01	; 1
    3d4a:	0e 94 45 06 	call	0xc8a	; 0xc8a <_ZN7Display9sendFrameEv>
    3d4e:	14 e1       	ldi	r17, 0x14	; 20
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3d50:	2f ef       	ldi	r18, 0xFF	; 255
    3d52:	30 e7       	ldi	r19, 0x70	; 112
    3d54:	82 e0       	ldi	r24, 0x02	; 2
    3d56:	21 50       	subi	r18, 0x01	; 1
    3d58:	30 40       	sbci	r19, 0x00	; 0
    3d5a:	80 40       	sbci	r24, 0x00	; 0
    3d5c:	e1 f7       	brne	.-8      	; 0x3d56 <main+0x4c>
    3d5e:	00 c0       	rjmp	.+0      	; 0x3d60 <main+0x56>
    3d60:	00 00       	nop
    3d62:	11 50       	subi	r17, 0x01	; 1
	
	for (uint8_t i = 0; i<20; i++)
    3d64:	a9 f7       	brne	.-22     	; 0x3d50 <main+0x46>
	{
		_delay_ms(100);
	}

	oled.draw_ASCI('1',1*charsize,0*charhighte);
    3d66:	20 e0       	ldi	r18, 0x00	; 0
    3d68:	46 e0       	ldi	r20, 0x06	; 6
    3d6a:	61 e3       	ldi	r22, 0x31	; 49
    3d6c:	80 ea       	ldi	r24, 0xA0	; 160
    3d6e:	91 e0       	ldi	r25, 0x01	; 1
    3d70:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <_ZN7Display9draw_ASCIEhhh>
	oled.sendFrame();
    3d74:	80 ea       	ldi	r24, 0xA0	; 160
    3d76:	91 e0       	ldi	r25, 0x01	; 1
    3d78:	0e 94 45 06 	call	0xc8a	; 0xc8a <_ZN7Display9sendFrameEv>
	
	FATFS FATFS_Obj;
	oled.draw_ASCI('2',2*charsize,0*charhighte);
    3d7c:	20 e0       	ldi	r18, 0x00	; 0
    3d7e:	4c e0       	ldi	r20, 0x0C	; 12
    3d80:	62 e3       	ldi	r22, 0x32	; 50
    3d82:	80 ea       	ldi	r24, 0xA0	; 160
    3d84:	91 e0       	ldi	r25, 0x01	; 1
    3d86:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <_ZN7Display9draw_ASCIEhhh>
	oled.sendFrame();
    3d8a:	80 ea       	ldi	r24, 0xA0	; 160
    3d8c:	91 e0       	ldi	r25, 0x01	; 1
    3d8e:	0e 94 45 06 	call	0xc8a	; 0xc8a <_ZN7Display9sendFrameEv>
	
	status = disk_initialize(0);
    3d92:	80 e0       	ldi	r24, 0x00	; 0
    3d94:	0e 94 82 02 	call	0x504	; 0x504 <disk_initialize>
	buffersize=sprintf(buffer,"%i",status);
    3d98:	1f 92       	push	r1
    3d9a:	8f 93       	push	r24
    3d9c:	84 e9       	ldi	r24, 0x94	; 148
    3d9e:	91 e0       	ldi	r25, 0x01	; 1
    3da0:	9f 93       	push	r25
    3da2:	8f 93       	push	r24
    3da4:	ce 01       	movw	r24, r28
    3da6:	81 5b       	subi	r24, 0xB1	; 177
    3da8:	97 4f       	sbci	r25, 0xF7	; 247
    3daa:	9f 93       	push	r25
    3dac:	8f 93       	push	r24
    3dae:	4d d2       	rcall	.+1178   	; 0x424a <sprintf>
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize+70,1*charhighte);}
    3db0:	0f 90       	pop	r0
    3db2:	0f 90       	pop	r0
    3db4:	0f 90       	pop	r0
    3db6:	0f 90       	pop	r0
    3db8:	0f 90       	pop	r0
    3dba:	0f 90       	pop	r0
    3dbc:	88 23       	and	r24, r24
    3dbe:	e1 f0       	breq	.+56     	; 0x3df8 <main+0xee>
    3dc0:	6e 01       	movw	r12, r28
    3dc2:	91 eb       	ldi	r25, 0xB1	; 177
    3dc4:	c9 1a       	sub	r12, r25
    3dc6:	97 ef       	ldi	r25, 0xF7	; 247
    3dc8:	d9 0a       	sbc	r13, r25
    3dca:	ee 24       	eor	r14, r14
    3dcc:	ea 94       	dec	r14
    3dce:	e8 0e       	add	r14, r24
    3dd0:	f1 2c       	mov	r15, r1
    3dd2:	ef ef       	ldi	r30, 0xFF	; 255
    3dd4:	ee 1a       	sub	r14, r30
    3dd6:	fe 0a       	sbc	r15, r30
    3dd8:	ec 0c       	add	r14, r12
    3dda:	fd 1c       	adc	r15, r13
    3ddc:	06 e4       	ldi	r16, 0x46	; 70
    3dde:	f6 01       	movw	r30, r12
    3de0:	61 91       	ld	r22, Z+
    3de2:	6f 01       	movw	r12, r30
    3de4:	28 e0       	ldi	r18, 0x08	; 8
    3de6:	40 2f       	mov	r20, r16
    3de8:	80 ea       	ldi	r24, 0xA0	; 160
    3dea:	91 e0       	ldi	r25, 0x01	; 1
    3dec:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <_ZN7Display9draw_ASCIEhhh>
    3df0:	0a 5f       	subi	r16, 0xFA	; 250
    3df2:	ce 14       	cp	r12, r14
    3df4:	df 04       	cpc	r13, r15
    3df6:	99 f7       	brne	.-26     	; 0x3dde <main+0xd4>
	oled.draw_ASCI('3',3*charsize,0*charhighte);
    3df8:	20 e0       	ldi	r18, 0x00	; 0
    3dfa:	42 e1       	ldi	r20, 0x12	; 18
    3dfc:	63 e3       	ldi	r22, 0x33	; 51
    3dfe:	80 ea       	ldi	r24, 0xA0	; 160
    3e00:	91 e0       	ldi	r25, 0x01	; 1
    3e02:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <_ZN7Display9draw_ASCIEhhh>
	oled.sendFrame();
    3e06:	80 ea       	ldi	r24, 0xA0	; 160
    3e08:	91 e0       	ldi	r25, 0x01	; 1
    3e0a:	0e 94 45 06 	call	0xc8a	; 0xc8a <_ZN7Display9sendFrameEv>
	
	char str[12];

	/* Get volume label of the default drive */
	status = f_getlabel("/", str, 0);
    3e0e:	40 e0       	ldi	r20, 0x00	; 0
    3e10:	50 e0       	ldi	r21, 0x00	; 0
    3e12:	be 01       	movw	r22, r28
    3e14:	6d 59       	subi	r22, 0x9D	; 157
    3e16:	77 4f       	sbci	r23, 0xF7	; 247
    3e18:	81 e8       	ldi	r24, 0x81	; 129
    3e1a:	91 e0       	ldi	r25, 0x01	; 1
    3e1c:	85 d9       	rcall	.-3318   	; 0x3128 <f_getlabel>
    3e1e:	d8 2e       	mov	r13, r24
    3e20:	9e 01       	movw	r18, r28
    3e22:	2d 59       	subi	r18, 0x9D	; 157
    3e24:	37 4f       	sbci	r19, 0xF7	; 247
    3e26:	79 01       	movw	r14, r18
    3e28:	02 e3       	ldi	r16, 0x32	; 50
	for(uint8_t i=0;i<12;i++){oled.draw_ASCI(str[i],i*charsize+50,4*charhighte);}
    3e2a:	f7 01       	movw	r30, r14
    3e2c:	61 91       	ld	r22, Z+
    3e2e:	7f 01       	movw	r14, r30
    3e30:	20 e2       	ldi	r18, 0x20	; 32
    3e32:	40 2f       	mov	r20, r16
    3e34:	80 ea       	ldi	r24, 0xA0	; 160
    3e36:	91 e0       	ldi	r25, 0x01	; 1
    3e38:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <_ZN7Display9draw_ASCIEhhh>
    3e3c:	0a 5f       	subi	r16, 0xFA	; 250
    3e3e:	0a 37       	cpi	r16, 0x7A	; 122
    3e40:	a1 f7       	brne	.-24     	; 0x3e2a <main+0x120>
	buffersize=sprintf(buffer,"%i",status);
    3e42:	1f 92       	push	r1
    3e44:	df 92       	push	r13
    3e46:	84 e9       	ldi	r24, 0x94	; 148
    3e48:	91 e0       	ldi	r25, 0x01	; 1
    3e4a:	9f 93       	push	r25
    3e4c:	8f 93       	push	r24
    3e4e:	ce 01       	movw	r24, r28
    3e50:	81 5b       	subi	r24, 0xB1	; 177
    3e52:	97 4f       	sbci	r25, 0xF7	; 247
    3e54:	9f 93       	push	r25
    3e56:	8f 93       	push	r24
    3e58:	f8 d1       	rcall	.+1008   	; 0x424a <sprintf>
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize+70,5*charhighte);}
    3e5a:	0f 90       	pop	r0
    3e5c:	0f 90       	pop	r0
    3e5e:	0f 90       	pop	r0
    3e60:	0f 90       	pop	r0
    3e62:	0f 90       	pop	r0
    3e64:	0f 90       	pop	r0
    3e66:	88 23       	and	r24, r24
    3e68:	e1 f0       	breq	.+56     	; 0x3ea2 <main+0x198>
    3e6a:	6e 01       	movw	r12, r28
    3e6c:	f1 eb       	ldi	r31, 0xB1	; 177
    3e6e:	cf 1a       	sub	r12, r31
    3e70:	f7 ef       	ldi	r31, 0xF7	; 247
    3e72:	df 0a       	sbc	r13, r31
    3e74:	ee 24       	eor	r14, r14
    3e76:	ea 94       	dec	r14
    3e78:	e8 0e       	add	r14, r24
    3e7a:	f1 2c       	mov	r15, r1
    3e7c:	2f ef       	ldi	r18, 0xFF	; 255
    3e7e:	e2 1a       	sub	r14, r18
    3e80:	f2 0a       	sbc	r15, r18
    3e82:	ec 0c       	add	r14, r12
    3e84:	fd 1c       	adc	r15, r13
    3e86:	06 e4       	ldi	r16, 0x46	; 70
    3e88:	f6 01       	movw	r30, r12
    3e8a:	61 91       	ld	r22, Z+
    3e8c:	6f 01       	movw	r12, r30
    3e8e:	28 e2       	ldi	r18, 0x28	; 40
    3e90:	40 2f       	mov	r20, r16
    3e92:	80 ea       	ldi	r24, 0xA0	; 160
    3e94:	91 e0       	ldi	r25, 0x01	; 1
    3e96:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <_ZN7Display9draw_ASCIEhhh>
    3e9a:	0a 5f       	subi	r16, 0xFA	; 250
    3e9c:	ce 14       	cp	r12, r14
    3e9e:	df 04       	cpc	r13, r15
    3ea0:	99 f7       	brne	.-26     	; 0x3e88 <main+0x17e>
	
	status = f_mkfs("0/", 0, 0);
    3ea2:	40 e0       	ldi	r20, 0x00	; 0
    3ea4:	50 e0       	ldi	r21, 0x00	; 0
    3ea6:	60 e0       	ldi	r22, 0x00	; 0
    3ea8:	80 e8       	ldi	r24, 0x80	; 128
    3eaa:	91 e0       	ldi	r25, 0x01	; 1
    3eac:	d0 d9       	rcall	.-3168   	; 0x324e <f_mkfs>
    3eae:	08 2f       	mov	r16, r24
	oled.draw_ASCI('0',0*charsize,0*charhighte);
    3eb0:	20 e0       	ldi	r18, 0x00	; 0
    3eb2:	40 e0       	ldi	r20, 0x00	; 0
    3eb4:	60 e3       	ldi	r22, 0x30	; 48
    3eb6:	80 ea       	ldi	r24, 0xA0	; 160
    3eb8:	91 e0       	ldi	r25, 0x01	; 1
    3eba:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <_ZN7Display9draw_ASCIEhhh>
	buffersize=sprintf(buffer,"%i",status);
    3ebe:	1f 92       	push	r1
    3ec0:	0f 93       	push	r16
    3ec2:	84 e9       	ldi	r24, 0x94	; 148
    3ec4:	91 e0       	ldi	r25, 0x01	; 1
    3ec6:	9f 93       	push	r25
    3ec8:	8f 93       	push	r24
    3eca:	ce 01       	movw	r24, r28
    3ecc:	81 5b       	subi	r24, 0xB1	; 177
    3ece:	97 4f       	sbci	r25, 0xF7	; 247
    3ed0:	9f 93       	push	r25
    3ed2:	8f 93       	push	r24
    3ed4:	ba d1       	rcall	.+884    	; 0x424a <sprintf>
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,5*charhighte);}
    3ed6:	0f 90       	pop	r0
    3ed8:	0f 90       	pop	r0
    3eda:	0f 90       	pop	r0
    3edc:	0f 90       	pop	r0
    3ede:	0f 90       	pop	r0
    3ee0:	0f 90       	pop	r0
    3ee2:	88 23       	and	r24, r24
    3ee4:	e1 f0       	breq	.+56     	; 0x3f1e <main+0x214>
    3ee6:	6e 01       	movw	r12, r28
    3ee8:	f1 eb       	ldi	r31, 0xB1	; 177
    3eea:	cf 1a       	sub	r12, r31
    3eec:	f7 ef       	ldi	r31, 0xF7	; 247
    3eee:	df 0a       	sbc	r13, r31
    3ef0:	ee 24       	eor	r14, r14
    3ef2:	ea 94       	dec	r14
    3ef4:	e8 0e       	add	r14, r24
    3ef6:	f1 2c       	mov	r15, r1
    3ef8:	2f ef       	ldi	r18, 0xFF	; 255
    3efa:	e2 1a       	sub	r14, r18
    3efc:	f2 0a       	sbc	r15, r18
    3efe:	ec 0c       	add	r14, r12
    3f00:	fd 1c       	adc	r15, r13
    3f02:	01 2f       	mov	r16, r17
    3f04:	f6 01       	movw	r30, r12
    3f06:	61 91       	ld	r22, Z+
    3f08:	6f 01       	movw	r12, r30
    3f0a:	28 e2       	ldi	r18, 0x28	; 40
    3f0c:	40 2f       	mov	r20, r16
    3f0e:	80 ea       	ldi	r24, 0xA0	; 160
    3f10:	91 e0       	ldi	r25, 0x01	; 1
    3f12:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <_ZN7Display9draw_ASCIEhhh>
    3f16:	0a 5f       	subi	r16, 0xFA	; 250
    3f18:	ce 14       	cp	r12, r14
    3f1a:	df 04       	cpc	r13, r15
    3f1c:	99 f7       	brne	.-26     	; 0x3f04 <main+0x1fa>
	oled.sendFrame();
    3f1e:	80 ea       	ldi	r24, 0xA0	; 160
    3f20:	91 e0       	ldi	r25, 0x01	; 1
    3f22:	0e 94 45 06 	call	0xc8a	; 0xc8a <_ZN7Display9sendFrameEv>
	
	status = f_mount(&FATFS_Obj,"",0) != 0;
    3f26:	40 e0       	ldi	r20, 0x00	; 0
    3f28:	63 e5       	ldi	r22, 0x53	; 83
    3f2a:	71 e0       	ldi	r23, 0x01	; 1
    3f2c:	ce 01       	movw	r24, r28
    3f2e:	01 96       	adiw	r24, 0x01	; 1
    3f30:	0e 94 a8 14 	call	0x2950	; 0x2950 <f_mount>
    3f34:	91 e0       	ldi	r25, 0x01	; 1
    3f36:	20 e0       	ldi	r18, 0x00	; 0
    3f38:	81 11       	cpse	r24, r1
    3f3a:	01 c0       	rjmp	.+2      	; 0x3f3e <main+0x234>
    3f3c:	90 e0       	ldi	r25, 0x00	; 0
	buffersize=sprintf(buffer,"%i",status);
    3f3e:	2f 93       	push	r18
    3f40:	9f 93       	push	r25
    3f42:	84 e9       	ldi	r24, 0x94	; 148
    3f44:	91 e0       	ldi	r25, 0x01	; 1
    3f46:	9f 93       	push	r25
    3f48:	8f 93       	push	r24
    3f4a:	ce 01       	movw	r24, r28
    3f4c:	81 5b       	subi	r24, 0xB1	; 177
    3f4e:	97 4f       	sbci	r25, 0xF7	; 247
    3f50:	9f 93       	push	r25
    3f52:	8f 93       	push	r24
    3f54:	7a d1       	rcall	.+756    	; 0x424a <sprintf>
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize+70,2*charhighte);}
    3f56:	0f 90       	pop	r0
    3f58:	0f 90       	pop	r0
    3f5a:	0f 90       	pop	r0
    3f5c:	0f 90       	pop	r0
    3f5e:	0f 90       	pop	r0
    3f60:	0f 90       	pop	r0
    3f62:	88 23       	and	r24, r24
    3f64:	e1 f0       	breq	.+56     	; 0x3f9e <main+0x294>
    3f66:	6e 01       	movw	r12, r28
    3f68:	f1 eb       	ldi	r31, 0xB1	; 177
    3f6a:	cf 1a       	sub	r12, r31
    3f6c:	f7 ef       	ldi	r31, 0xF7	; 247
    3f6e:	df 0a       	sbc	r13, r31
    3f70:	ee 24       	eor	r14, r14
    3f72:	ea 94       	dec	r14
    3f74:	e8 0e       	add	r14, r24
    3f76:	f1 2c       	mov	r15, r1
    3f78:	2f ef       	ldi	r18, 0xFF	; 255
    3f7a:	e2 1a       	sub	r14, r18
    3f7c:	f2 0a       	sbc	r15, r18
    3f7e:	ec 0c       	add	r14, r12
    3f80:	fd 1c       	adc	r15, r13
    3f82:	06 e4       	ldi	r16, 0x46	; 70
    3f84:	f6 01       	movw	r30, r12
    3f86:	61 91       	ld	r22, Z+
    3f88:	6f 01       	movw	r12, r30
    3f8a:	20 e1       	ldi	r18, 0x10	; 16
    3f8c:	40 2f       	mov	r20, r16
    3f8e:	80 ea       	ldi	r24, 0xA0	; 160
    3f90:	91 e0       	ldi	r25, 0x01	; 1
    3f92:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <_ZN7Display9draw_ASCIEhhh>
    3f96:	0a 5f       	subi	r16, 0xFA	; 250
    3f98:	ce 14       	cp	r12, r14
    3f9a:	df 04       	cpc	r13, r15
    3f9c:	99 f7       	brne	.-26     	; 0x3f84 <main+0x27a>
	oled.draw_ASCI('4',4*charsize,0*charhighte);
    3f9e:	20 e0       	ldi	r18, 0x00	; 0
    3fa0:	48 e1       	ldi	r20, 0x18	; 24
    3fa2:	64 e3       	ldi	r22, 0x34	; 52
    3fa4:	80 ea       	ldi	r24, 0xA0	; 160
    3fa6:	91 e0       	ldi	r25, 0x01	; 1
    3fa8:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <_ZN7Display9draw_ASCIEhhh>
	oled.sendFrame();
    3fac:	80 ea       	ldi	r24, 0xA0	; 160
    3fae:	91 e0       	ldi	r25, 0x01	; 1
    3fb0:	0e 94 45 06 	call	0xc8a	; 0xc8a <_ZN7Display9sendFrameEv>
	
	FIL fil_obj;
	oled.draw_ASCI('5',5*charsize,0*charhighte);
    3fb4:	20 e0       	ldi	r18, 0x00	; 0
    3fb6:	4e e1       	ldi	r20, 0x1E	; 30
    3fb8:	65 e3       	ldi	r22, 0x35	; 53
    3fba:	80 ea       	ldi	r24, 0xA0	; 160
    3fbc:	91 e0       	ldi	r25, 0x01	; 1
    3fbe:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <_ZN7Display9draw_ASCIEhhh>
	oled.sendFrame();
    3fc2:	80 ea       	ldi	r24, 0xA0	; 160
    3fc4:	91 e0       	ldi	r25, 0x01	; 1
    3fc6:	0e 94 45 06 	call	0xc8a	; 0xc8a <_ZN7Display9sendFrameEv>
	
	status = f_open(&fil_obj, "foo.txt", FA_CREATE_NEW | FA_WRITE);
    3fca:	46 e0       	ldi	r20, 0x06	; 6
    3fcc:	63 e8       	ldi	r22, 0x83	; 131
    3fce:	71 e0       	ldi	r23, 0x01	; 1
    3fd0:	ce 01       	movw	r24, r28
    3fd2:	81 5d       	subi	r24, 0xD1	; 209
    3fd4:	9b 4f       	sbci	r25, 0xFB	; 251
    3fd6:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <f_open>
	buffersize=sprintf(buffer,"%i",status);
    3fda:	1f 92       	push	r1
    3fdc:	8f 93       	push	r24
    3fde:	84 e9       	ldi	r24, 0x94	; 148
    3fe0:	91 e0       	ldi	r25, 0x01	; 1
    3fe2:	9f 93       	push	r25
    3fe4:	8f 93       	push	r24
    3fe6:	ce 01       	movw	r24, r28
    3fe8:	81 5b       	subi	r24, 0xB1	; 177
    3fea:	97 4f       	sbci	r25, 0xF7	; 247
    3fec:	9f 93       	push	r25
    3fee:	8f 93       	push	r24
    3ff0:	2c d1       	rcall	.+600    	; 0x424a <sprintf>
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,1*charhighte);}
    3ff2:	0f 90       	pop	r0
    3ff4:	0f 90       	pop	r0
    3ff6:	0f 90       	pop	r0
    3ff8:	0f 90       	pop	r0
    3ffa:	0f 90       	pop	r0
    3ffc:	0f 90       	pop	r0
    3ffe:	88 23       	and	r24, r24
    4000:	e1 f0       	breq	.+56     	; 0x403a <main+0x330>
    4002:	6e 01       	movw	r12, r28
    4004:	f1 eb       	ldi	r31, 0xB1	; 177
    4006:	cf 1a       	sub	r12, r31
    4008:	f7 ef       	ldi	r31, 0xF7	; 247
    400a:	df 0a       	sbc	r13, r31
    400c:	ee 24       	eor	r14, r14
    400e:	ea 94       	dec	r14
    4010:	e8 0e       	add	r14, r24
    4012:	f1 2c       	mov	r15, r1
    4014:	2f ef       	ldi	r18, 0xFF	; 255
    4016:	e2 1a       	sub	r14, r18
    4018:	f2 0a       	sbc	r15, r18
    401a:	ec 0c       	add	r14, r12
    401c:	fd 1c       	adc	r15, r13
    401e:	01 2f       	mov	r16, r17
    4020:	f6 01       	movw	r30, r12
    4022:	61 91       	ld	r22, Z+
    4024:	6f 01       	movw	r12, r30
    4026:	28 e0       	ldi	r18, 0x08	; 8
    4028:	40 2f       	mov	r20, r16
    402a:	80 ea       	ldi	r24, 0xA0	; 160
    402c:	91 e0       	ldi	r25, 0x01	; 1
    402e:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <_ZN7Display9draw_ASCIEhhh>
    4032:	0a 5f       	subi	r16, 0xFA	; 250
    4034:	ce 14       	cp	r12, r14
    4036:	df 04       	cpc	r13, r15
    4038:	99 f7       	brne	.-26     	; 0x4020 <main+0x316>
	oled.draw_ASCI('6',6*charsize,0*charhighte);
    403a:	20 e0       	ldi	r18, 0x00	; 0
    403c:	44 e2       	ldi	r20, 0x24	; 36
    403e:	66 e3       	ldi	r22, 0x36	; 54
    4040:	80 ea       	ldi	r24, 0xA0	; 160
    4042:	91 e0       	ldi	r25, 0x01	; 1
    4044:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <_ZN7Display9draw_ASCIEhhh>
	oled.sendFrame();
    4048:	80 ea       	ldi	r24, 0xA0	; 160
    404a:	91 e0       	ldi	r25, 0x01	; 1
    404c:	0e 94 45 06 	call	0xc8a	; 0xc8a <_ZN7Display9sendFrameEv>
	
	//status = f_printf(&fil_obj, "test text %u", 1);
	UINT number = 0;
    4050:	c1 59       	subi	r28, 0x91	; 145
    4052:	d7 4f       	sbci	r29, 0xF7	; 247
    4054:	19 82       	std	Y+1, r1	; 0x01
    4056:	18 82       	st	Y, r1
    4058:	cf 56       	subi	r28, 0x6F	; 111
    405a:	d8 40       	sbci	r29, 0x08	; 8
	status = f_write(&fil_obj,"Hallo",5,&number);
    405c:	9e 01       	movw	r18, r28
    405e:	21 59       	subi	r18, 0x91	; 145
    4060:	37 4f       	sbci	r19, 0xF7	; 247
    4062:	45 e0       	ldi	r20, 0x05	; 5
    4064:	50 e0       	ldi	r21, 0x00	; 0
    4066:	6b e8       	ldi	r22, 0x8B	; 139
    4068:	71 e0       	ldi	r23, 0x01	; 1
    406a:	ce 01       	movw	r24, r28
    406c:	81 5d       	subi	r24, 0xD1	; 209
    406e:	9b 4f       	sbci	r25, 0xFB	; 251
    4070:	0e 94 28 16 	call	0x2c50	; 0x2c50 <f_write>
    4074:	08 2f       	mov	r16, r24
	oled.draw_ASCI('7',7*charsize,0*charhighte);
    4076:	20 e0       	ldi	r18, 0x00	; 0
    4078:	4a e2       	ldi	r20, 0x2A	; 42
    407a:	67 e3       	ldi	r22, 0x37	; 55
    407c:	80 ea       	ldi	r24, 0xA0	; 160
    407e:	91 e0       	ldi	r25, 0x01	; 1
    4080:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <_ZN7Display9draw_ASCIEhhh>
	buffersize=sprintf(buffer,"%i:%i",status,number);
    4084:	c0 59       	subi	r28, 0x90	; 144
    4086:	d7 4f       	sbci	r29, 0xF7	; 247
    4088:	88 81       	ld	r24, Y
    408a:	c0 57       	subi	r28, 0x70	; 112
    408c:	d8 40       	sbci	r29, 0x08	; 8
    408e:	8f 93       	push	r24
    4090:	c1 59       	subi	r28, 0x91	; 145
    4092:	d7 4f       	sbci	r29, 0xF7	; 247
    4094:	88 81       	ld	r24, Y
    4096:	cf 56       	subi	r28, 0x6F	; 111
    4098:	d8 40       	sbci	r29, 0x08	; 8
    409a:	8f 93       	push	r24
    409c:	1f 92       	push	r1
    409e:	0f 93       	push	r16
    40a0:	81 e9       	ldi	r24, 0x91	; 145
    40a2:	91 e0       	ldi	r25, 0x01	; 1
    40a4:	9f 93       	push	r25
    40a6:	8f 93       	push	r24
    40a8:	ce 01       	movw	r24, r28
    40aa:	81 5b       	subi	r24, 0xB1	; 177
    40ac:	97 4f       	sbci	r25, 0xF7	; 247
    40ae:	9f 93       	push	r25
    40b0:	8f 93       	push	r24
    40b2:	cb d0       	rcall	.+406    	; 0x424a <sprintf>
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,2*charhighte);}
    40b4:	0f b6       	in	r0, 0x3f	; 63
    40b6:	f8 94       	cli
    40b8:	de bf       	out	0x3e, r29	; 62
    40ba:	0f be       	out	0x3f, r0	; 63
    40bc:	cd bf       	out	0x3d, r28	; 61
    40be:	88 23       	and	r24, r24
    40c0:	e1 f0       	breq	.+56     	; 0x40fa <main+0x3f0>
    40c2:	6e 01       	movw	r12, r28
    40c4:	31 eb       	ldi	r19, 0xB1	; 177
    40c6:	c3 1a       	sub	r12, r19
    40c8:	37 ef       	ldi	r19, 0xF7	; 247
    40ca:	d3 0a       	sbc	r13, r19
    40cc:	ee 24       	eor	r14, r14
    40ce:	ea 94       	dec	r14
    40d0:	e8 0e       	add	r14, r24
    40d2:	f1 2c       	mov	r15, r1
    40d4:	8f ef       	ldi	r24, 0xFF	; 255
    40d6:	e8 1a       	sub	r14, r24
    40d8:	f8 0a       	sbc	r15, r24
    40da:	ec 0c       	add	r14, r12
    40dc:	fd 1c       	adc	r15, r13
    40de:	01 2f       	mov	r16, r17
    40e0:	f6 01       	movw	r30, r12
    40e2:	61 91       	ld	r22, Z+
    40e4:	6f 01       	movw	r12, r30
    40e6:	20 e1       	ldi	r18, 0x10	; 16
    40e8:	40 2f       	mov	r20, r16
    40ea:	80 ea       	ldi	r24, 0xA0	; 160
    40ec:	91 e0       	ldi	r25, 0x01	; 1
    40ee:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <_ZN7Display9draw_ASCIEhhh>
    40f2:	0a 5f       	subi	r16, 0xFA	; 250
    40f4:	ce 14       	cp	r12, r14
    40f6:	df 04       	cpc	r13, r15
    40f8:	99 f7       	brne	.-26     	; 0x40e0 <main+0x3d6>
	oled.sendFrame();
    40fa:	80 ea       	ldi	r24, 0xA0	; 160
    40fc:	91 e0       	ldi	r25, 0x01	; 1
    40fe:	0e 94 45 06 	call	0xc8a	; 0xc8a <_ZN7Display9sendFrameEv>
	
	status = f_close(&fil_obj);
    4102:	ce 01       	movw	r24, r28
    4104:	81 5d       	subi	r24, 0xD1	; 209
    4106:	9b 4f       	sbci	r25, 0xFB	; 251
    4108:	0e 94 84 18 	call	0x3108	; 0x3108 <f_close>
    410c:	08 2f       	mov	r16, r24
	oled.draw_ASCI('8',8*charsize,0*charhighte);
    410e:	20 e0       	ldi	r18, 0x00	; 0
    4110:	40 e3       	ldi	r20, 0x30	; 48
    4112:	68 e3       	ldi	r22, 0x38	; 56
    4114:	80 ea       	ldi	r24, 0xA0	; 160
    4116:	91 e0       	ldi	r25, 0x01	; 1
    4118:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <_ZN7Display9draw_ASCIEhhh>
	buffersize=sprintf(buffer,"%i:%i",status,Timerstat);
    411c:	80 91 9f 01 	lds	r24, 0x019F
    4120:	1f 92       	push	r1
    4122:	8f 93       	push	r24
    4124:	1f 92       	push	r1
    4126:	0f 93       	push	r16
    4128:	81 e9       	ldi	r24, 0x91	; 145
    412a:	91 e0       	ldi	r25, 0x01	; 1
    412c:	9f 93       	push	r25
    412e:	8f 93       	push	r24
    4130:	ce 01       	movw	r24, r28
    4132:	81 5b       	subi	r24, 0xB1	; 177
    4134:	97 4f       	sbci	r25, 0xF7	; 247
    4136:	9f 93       	push	r25
    4138:	8f 93       	push	r24
    413a:	87 d0       	rcall	.+270    	; 0x424a <sprintf>
	for(uint8_t i=0;i<buffersize;i++){oled.draw_ASCI(buffer[i],i*charsize,3*charhighte);}
    413c:	0f b6       	in	r0, 0x3f	; 63
    413e:	f8 94       	cli
    4140:	de bf       	out	0x3e, r29	; 62
    4142:	0f be       	out	0x3f, r0	; 63
    4144:	cd bf       	out	0x3d, r28	; 61
    4146:	88 23       	and	r24, r24
    4148:	d9 f0       	breq	.+54     	; 0x4180 <__stack+0x81>
    414a:	6e 01       	movw	r12, r28
    414c:	31 eb       	ldi	r19, 0xB1	; 177
    414e:	c3 1a       	sub	r12, r19
    4150:	37 ef       	ldi	r19, 0xF7	; 247
    4152:	d3 0a       	sbc	r13, r19
    4154:	ee 24       	eor	r14, r14
    4156:	ea 94       	dec	r14
    4158:	e8 0e       	add	r14, r24
    415a:	f1 2c       	mov	r15, r1
    415c:	8f ef       	ldi	r24, 0xFF	; 255
    415e:	e8 1a       	sub	r14, r24
    4160:	f8 0a       	sbc	r15, r24
    4162:	ec 0c       	add	r14, r12
    4164:	fd 1c       	adc	r15, r13
    4166:	f6 01       	movw	r30, r12
    4168:	61 91       	ld	r22, Z+
    416a:	6f 01       	movw	r12, r30
    416c:	28 e1       	ldi	r18, 0x18	; 24
    416e:	41 2f       	mov	r20, r17
    4170:	80 ea       	ldi	r24, 0xA0	; 160
    4172:	91 e0       	ldi	r25, 0x01	; 1
    4174:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <_ZN7Display9draw_ASCIEhhh>
    4178:	1a 5f       	subi	r17, 0xFA	; 250
    417a:	ce 14       	cp	r12, r14
    417c:	df 04       	cpc	r13, r15
    417e:	99 f7       	brne	.-26     	; 0x4166 <__stack+0x67>
	oled.sendFrame();
    4180:	80 ea       	ldi	r24, 0xA0	; 160
    4182:	91 e0       	ldi	r25, 0x01	; 1
    4184:	0e 94 45 06 	call	0xc8a	; 0xc8a <_ZN7Display9sendFrameEv>
    
	f_mount(0,"",0);
    4188:	40 e0       	ldi	r20, 0x00	; 0
    418a:	63 e5       	ldi	r22, 0x53	; 83
    418c:	71 e0       	ldi	r23, 0x01	; 1
    418e:	80 e0       	ldi	r24, 0x00	; 0
    4190:	90 e0       	ldi	r25, 0x00	; 0
    4192:	0e 94 a8 14 	call	0x2950	; 0x2950 <f_mount>
	oled.draw_ASCI('9',9*charsize,0*charhighte);
    4196:	20 e0       	ldi	r18, 0x00	; 0
    4198:	46 e3       	ldi	r20, 0x36	; 54
    419a:	69 e3       	ldi	r22, 0x39	; 57
    419c:	80 ea       	ldi	r24, 0xA0	; 160
    419e:	91 e0       	ldi	r25, 0x01	; 1
    41a0:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <_ZN7Display9draw_ASCIEhhh>
	oled.sendFrame();
    41a4:	80 ea       	ldi	r24, 0xA0	; 160
    41a6:	91 e0       	ldi	r25, 0x01	; 1
    41a8:	0e 94 45 06 	call	0xc8a	; 0xc8a <_ZN7Display9sendFrameEv>
	
	
    while (1) 
    {
    }
    41ac:	ff cf       	rjmp	.-2      	; 0x41ac <__stack+0xad>

000041ae <_GLOBAL__sub_I_oled>:
	#include "diskio.h"	
	#include "ff.h"
};

#include "Display.h"
Display oled;
    41ae:	80 ea       	ldi	r24, 0xA0	; 160
    41b0:	91 e0       	ldi	r25, 0x01	; 1
    41b2:	0c 94 38 06 	jmp	0xc70	; 0xc70 <_ZN7DisplayC1Ev>
    41b6:	08 95       	ret

000041b8 <_GLOBAL__sub_D_oled>:
    41b8:	80 ea       	ldi	r24, 0xA0	; 160
    41ba:	91 e0       	ldi	r25, 0x01	; 1
    41bc:	0c 94 c1 05 	jmp	0xb82	; 0xb82 <_ZN7DisplayD1Ev>
    41c0:	08 95       	ret

000041c2 <__udivmodsi4>:
    41c2:	a1 e2       	ldi	r26, 0x21	; 33
    41c4:	1a 2e       	mov	r1, r26
    41c6:	aa 1b       	sub	r26, r26
    41c8:	bb 1b       	sub	r27, r27
    41ca:	fd 01       	movw	r30, r26
    41cc:	0d c0       	rjmp	.+26     	; 0x41e8 <__udivmodsi4_ep>

000041ce <__udivmodsi4_loop>:
    41ce:	aa 1f       	adc	r26, r26
    41d0:	bb 1f       	adc	r27, r27
    41d2:	ee 1f       	adc	r30, r30
    41d4:	ff 1f       	adc	r31, r31
    41d6:	a2 17       	cp	r26, r18
    41d8:	b3 07       	cpc	r27, r19
    41da:	e4 07       	cpc	r30, r20
    41dc:	f5 07       	cpc	r31, r21
    41de:	20 f0       	brcs	.+8      	; 0x41e8 <__udivmodsi4_ep>
    41e0:	a2 1b       	sub	r26, r18
    41e2:	b3 0b       	sbc	r27, r19
    41e4:	e4 0b       	sbc	r30, r20
    41e6:	f5 0b       	sbc	r31, r21

000041e8 <__udivmodsi4_ep>:
    41e8:	66 1f       	adc	r22, r22
    41ea:	77 1f       	adc	r23, r23
    41ec:	88 1f       	adc	r24, r24
    41ee:	99 1f       	adc	r25, r25
    41f0:	1a 94       	dec	r1
    41f2:	69 f7       	brne	.-38     	; 0x41ce <__udivmodsi4_loop>
    41f4:	60 95       	com	r22
    41f6:	70 95       	com	r23
    41f8:	80 95       	com	r24
    41fa:	90 95       	com	r25
    41fc:	9b 01       	movw	r18, r22
    41fe:	ac 01       	movw	r20, r24
    4200:	bd 01       	movw	r22, r26
    4202:	cf 01       	movw	r24, r30
    4204:	08 95       	ret

00004206 <__tablejump2__>:
    4206:	ee 0f       	add	r30, r30
    4208:	ff 1f       	adc	r31, r31
    420a:	00 24       	eor	r0, r0
    420c:	00 1c       	adc	r0, r0
    420e:	0b be       	out	0x3b, r0	; 59
    4210:	07 90       	elpm	r0, Z+
    4212:	f6 91       	elpm	r31, Z
    4214:	e0 2d       	mov	r30, r0
    4216:	09 94       	ijmp

00004218 <__muluhisi3>:
    4218:	09 d0       	rcall	.+18     	; 0x422c <__umulhisi3>
    421a:	a5 9f       	mul	r26, r21
    421c:	90 0d       	add	r25, r0
    421e:	b4 9f       	mul	r27, r20
    4220:	90 0d       	add	r25, r0
    4222:	a4 9f       	mul	r26, r20
    4224:	80 0d       	add	r24, r0
    4226:	91 1d       	adc	r25, r1
    4228:	11 24       	eor	r1, r1
    422a:	08 95       	ret

0000422c <__umulhisi3>:
    422c:	a2 9f       	mul	r26, r18
    422e:	b0 01       	movw	r22, r0
    4230:	b3 9f       	mul	r27, r19
    4232:	c0 01       	movw	r24, r0
    4234:	a3 9f       	mul	r26, r19
    4236:	70 0d       	add	r23, r0
    4238:	81 1d       	adc	r24, r1
    423a:	11 24       	eor	r1, r1
    423c:	91 1d       	adc	r25, r1
    423e:	b2 9f       	mul	r27, r18
    4240:	70 0d       	add	r23, r0
    4242:	81 1d       	adc	r24, r1
    4244:	11 24       	eor	r1, r1
    4246:	91 1d       	adc	r25, r1
    4248:	08 95       	ret

0000424a <sprintf>:
    424a:	0f 93       	push	r16
    424c:	1f 93       	push	r17
    424e:	cf 93       	push	r28
    4250:	df 93       	push	r29
    4252:	cd b7       	in	r28, 0x3d	; 61
    4254:	de b7       	in	r29, 0x3e	; 62
    4256:	2e 97       	sbiw	r28, 0x0e	; 14
    4258:	0f b6       	in	r0, 0x3f	; 63
    425a:	f8 94       	cli
    425c:	de bf       	out	0x3e, r29	; 62
    425e:	0f be       	out	0x3f, r0	; 63
    4260:	cd bf       	out	0x3d, r28	; 61
    4262:	0d 89       	ldd	r16, Y+21	; 0x15
    4264:	1e 89       	ldd	r17, Y+22	; 0x16
    4266:	86 e0       	ldi	r24, 0x06	; 6
    4268:	8c 83       	std	Y+4, r24	; 0x04
    426a:	1a 83       	std	Y+2, r17	; 0x02
    426c:	09 83       	std	Y+1, r16	; 0x01
    426e:	8f ef       	ldi	r24, 0xFF	; 255
    4270:	9f e7       	ldi	r25, 0x7F	; 127
    4272:	9e 83       	std	Y+6, r25	; 0x06
    4274:	8d 83       	std	Y+5, r24	; 0x05
    4276:	ae 01       	movw	r20, r28
    4278:	47 5e       	subi	r20, 0xE7	; 231
    427a:	5f 4f       	sbci	r21, 0xFF	; 255
    427c:	6f 89       	ldd	r22, Y+23	; 0x17
    427e:	78 8d       	ldd	r23, Y+24	; 0x18
    4280:	ce 01       	movw	r24, r28
    4282:	01 96       	adiw	r24, 0x01	; 1
    4284:	11 d0       	rcall	.+34     	; 0x42a8 <vfprintf>
    4286:	2f 81       	ldd	r18, Y+7	; 0x07
    4288:	38 85       	ldd	r19, Y+8	; 0x08
    428a:	f8 01       	movw	r30, r16
    428c:	e2 0f       	add	r30, r18
    428e:	f3 1f       	adc	r31, r19
    4290:	10 82       	st	Z, r1
    4292:	2e 96       	adiw	r28, 0x0e	; 14
    4294:	0f b6       	in	r0, 0x3f	; 63
    4296:	f8 94       	cli
    4298:	de bf       	out	0x3e, r29	; 62
    429a:	0f be       	out	0x3f, r0	; 63
    429c:	cd bf       	out	0x3d, r28	; 61
    429e:	df 91       	pop	r29
    42a0:	cf 91       	pop	r28
    42a2:	1f 91       	pop	r17
    42a4:	0f 91       	pop	r16
    42a6:	08 95       	ret

000042a8 <vfprintf>:
    42a8:	2f 92       	push	r2
    42aa:	3f 92       	push	r3
    42ac:	4f 92       	push	r4
    42ae:	5f 92       	push	r5
    42b0:	6f 92       	push	r6
    42b2:	7f 92       	push	r7
    42b4:	8f 92       	push	r8
    42b6:	9f 92       	push	r9
    42b8:	af 92       	push	r10
    42ba:	bf 92       	push	r11
    42bc:	cf 92       	push	r12
    42be:	df 92       	push	r13
    42c0:	ef 92       	push	r14
    42c2:	ff 92       	push	r15
    42c4:	0f 93       	push	r16
    42c6:	1f 93       	push	r17
    42c8:	cf 93       	push	r28
    42ca:	df 93       	push	r29
    42cc:	cd b7       	in	r28, 0x3d	; 61
    42ce:	de b7       	in	r29, 0x3e	; 62
    42d0:	2c 97       	sbiw	r28, 0x0c	; 12
    42d2:	0f b6       	in	r0, 0x3f	; 63
    42d4:	f8 94       	cli
    42d6:	de bf       	out	0x3e, r29	; 62
    42d8:	0f be       	out	0x3f, r0	; 63
    42da:	cd bf       	out	0x3d, r28	; 61
    42dc:	7c 01       	movw	r14, r24
    42de:	6b 01       	movw	r12, r22
    42e0:	8a 01       	movw	r16, r20
    42e2:	fc 01       	movw	r30, r24
    42e4:	17 82       	std	Z+7, r1	; 0x07
    42e6:	16 82       	std	Z+6, r1	; 0x06
    42e8:	83 81       	ldd	r24, Z+3	; 0x03
    42ea:	81 ff       	sbrs	r24, 1
    42ec:	b0 c1       	rjmp	.+864    	; 0x464e <vfprintf+0x3a6>
    42ee:	ce 01       	movw	r24, r28
    42f0:	01 96       	adiw	r24, 0x01	; 1
    42f2:	4c 01       	movw	r8, r24
    42f4:	f7 01       	movw	r30, r14
    42f6:	93 81       	ldd	r25, Z+3	; 0x03
    42f8:	f6 01       	movw	r30, r12
    42fa:	93 fd       	sbrc	r25, 3
    42fc:	85 91       	lpm	r24, Z+
    42fe:	93 ff       	sbrs	r25, 3
    4300:	81 91       	ld	r24, Z+
    4302:	6f 01       	movw	r12, r30
    4304:	88 23       	and	r24, r24
    4306:	09 f4       	brne	.+2      	; 0x430a <vfprintf+0x62>
    4308:	9e c1       	rjmp	.+828    	; 0x4646 <vfprintf+0x39e>
    430a:	85 32       	cpi	r24, 0x25	; 37
    430c:	39 f4       	brne	.+14     	; 0x431c <vfprintf+0x74>
    430e:	93 fd       	sbrc	r25, 3
    4310:	85 91       	lpm	r24, Z+
    4312:	93 ff       	sbrs	r25, 3
    4314:	81 91       	ld	r24, Z+
    4316:	6f 01       	movw	r12, r30
    4318:	85 32       	cpi	r24, 0x25	; 37
    431a:	21 f4       	brne	.+8      	; 0x4324 <vfprintf+0x7c>
    431c:	b7 01       	movw	r22, r14
    431e:	90 e0       	ldi	r25, 0x00	; 0
    4320:	c7 d1       	rcall	.+910    	; 0x46b0 <fputc>
    4322:	e8 cf       	rjmp	.-48     	; 0x42f4 <vfprintf+0x4c>
    4324:	51 2c       	mov	r5, r1
    4326:	31 2c       	mov	r3, r1
    4328:	20 e0       	ldi	r18, 0x00	; 0
    432a:	20 32       	cpi	r18, 0x20	; 32
    432c:	a0 f4       	brcc	.+40     	; 0x4356 <vfprintf+0xae>
    432e:	8b 32       	cpi	r24, 0x2B	; 43
    4330:	69 f0       	breq	.+26     	; 0x434c <vfprintf+0xa4>
    4332:	30 f4       	brcc	.+12     	; 0x4340 <vfprintf+0x98>
    4334:	80 32       	cpi	r24, 0x20	; 32
    4336:	59 f0       	breq	.+22     	; 0x434e <vfprintf+0xa6>
    4338:	83 32       	cpi	r24, 0x23	; 35
    433a:	69 f4       	brne	.+26     	; 0x4356 <vfprintf+0xae>
    433c:	20 61       	ori	r18, 0x10	; 16
    433e:	2c c0       	rjmp	.+88     	; 0x4398 <vfprintf+0xf0>
    4340:	8d 32       	cpi	r24, 0x2D	; 45
    4342:	39 f0       	breq	.+14     	; 0x4352 <vfprintf+0xaa>
    4344:	80 33       	cpi	r24, 0x30	; 48
    4346:	39 f4       	brne	.+14     	; 0x4356 <vfprintf+0xae>
    4348:	21 60       	ori	r18, 0x01	; 1
    434a:	26 c0       	rjmp	.+76     	; 0x4398 <vfprintf+0xf0>
    434c:	22 60       	ori	r18, 0x02	; 2
    434e:	24 60       	ori	r18, 0x04	; 4
    4350:	23 c0       	rjmp	.+70     	; 0x4398 <vfprintf+0xf0>
    4352:	28 60       	ori	r18, 0x08	; 8
    4354:	21 c0       	rjmp	.+66     	; 0x4398 <vfprintf+0xf0>
    4356:	27 fd       	sbrc	r18, 7
    4358:	27 c0       	rjmp	.+78     	; 0x43a8 <vfprintf+0x100>
    435a:	30 ed       	ldi	r19, 0xD0	; 208
    435c:	38 0f       	add	r19, r24
    435e:	3a 30       	cpi	r19, 0x0A	; 10
    4360:	78 f4       	brcc	.+30     	; 0x4380 <vfprintf+0xd8>
    4362:	26 ff       	sbrs	r18, 6
    4364:	06 c0       	rjmp	.+12     	; 0x4372 <vfprintf+0xca>
    4366:	fa e0       	ldi	r31, 0x0A	; 10
    4368:	5f 9e       	mul	r5, r31
    436a:	30 0d       	add	r19, r0
    436c:	11 24       	eor	r1, r1
    436e:	53 2e       	mov	r5, r19
    4370:	13 c0       	rjmp	.+38     	; 0x4398 <vfprintf+0xf0>
    4372:	8a e0       	ldi	r24, 0x0A	; 10
    4374:	38 9e       	mul	r3, r24
    4376:	30 0d       	add	r19, r0
    4378:	11 24       	eor	r1, r1
    437a:	33 2e       	mov	r3, r19
    437c:	20 62       	ori	r18, 0x20	; 32
    437e:	0c c0       	rjmp	.+24     	; 0x4398 <vfprintf+0xf0>
    4380:	8e 32       	cpi	r24, 0x2E	; 46
    4382:	21 f4       	brne	.+8      	; 0x438c <vfprintf+0xe4>
    4384:	26 fd       	sbrc	r18, 6
    4386:	5f c1       	rjmp	.+702    	; 0x4646 <vfprintf+0x39e>
    4388:	20 64       	ori	r18, 0x40	; 64
    438a:	06 c0       	rjmp	.+12     	; 0x4398 <vfprintf+0xf0>
    438c:	8c 36       	cpi	r24, 0x6C	; 108
    438e:	11 f4       	brne	.+4      	; 0x4394 <vfprintf+0xec>
    4390:	20 68       	ori	r18, 0x80	; 128
    4392:	02 c0       	rjmp	.+4      	; 0x4398 <vfprintf+0xf0>
    4394:	88 36       	cpi	r24, 0x68	; 104
    4396:	41 f4       	brne	.+16     	; 0x43a8 <vfprintf+0x100>
    4398:	f6 01       	movw	r30, r12
    439a:	93 fd       	sbrc	r25, 3
    439c:	85 91       	lpm	r24, Z+
    439e:	93 ff       	sbrs	r25, 3
    43a0:	81 91       	ld	r24, Z+
    43a2:	6f 01       	movw	r12, r30
    43a4:	81 11       	cpse	r24, r1
    43a6:	c1 cf       	rjmp	.-126    	; 0x432a <vfprintf+0x82>
    43a8:	98 2f       	mov	r25, r24
    43aa:	9f 7d       	andi	r25, 0xDF	; 223
    43ac:	95 54       	subi	r25, 0x45	; 69
    43ae:	93 30       	cpi	r25, 0x03	; 3
    43b0:	28 f4       	brcc	.+10     	; 0x43bc <vfprintf+0x114>
    43b2:	0c 5f       	subi	r16, 0xFC	; 252
    43b4:	1f 4f       	sbci	r17, 0xFF	; 255
    43b6:	ff e3       	ldi	r31, 0x3F	; 63
    43b8:	f9 83       	std	Y+1, r31	; 0x01
    43ba:	0d c0       	rjmp	.+26     	; 0x43d6 <vfprintf+0x12e>
    43bc:	83 36       	cpi	r24, 0x63	; 99
    43be:	31 f0       	breq	.+12     	; 0x43cc <vfprintf+0x124>
    43c0:	83 37       	cpi	r24, 0x73	; 115
    43c2:	71 f0       	breq	.+28     	; 0x43e0 <vfprintf+0x138>
    43c4:	83 35       	cpi	r24, 0x53	; 83
    43c6:	09 f0       	breq	.+2      	; 0x43ca <vfprintf+0x122>
    43c8:	57 c0       	rjmp	.+174    	; 0x4478 <vfprintf+0x1d0>
    43ca:	21 c0       	rjmp	.+66     	; 0x440e <vfprintf+0x166>
    43cc:	f8 01       	movw	r30, r16
    43ce:	80 81       	ld	r24, Z
    43d0:	89 83       	std	Y+1, r24	; 0x01
    43d2:	0e 5f       	subi	r16, 0xFE	; 254
    43d4:	1f 4f       	sbci	r17, 0xFF	; 255
    43d6:	44 24       	eor	r4, r4
    43d8:	43 94       	inc	r4
    43da:	51 2c       	mov	r5, r1
    43dc:	54 01       	movw	r10, r8
    43de:	14 c0       	rjmp	.+40     	; 0x4408 <vfprintf+0x160>
    43e0:	38 01       	movw	r6, r16
    43e2:	f2 e0       	ldi	r31, 0x02	; 2
    43e4:	6f 0e       	add	r6, r31
    43e6:	71 1c       	adc	r7, r1
    43e8:	f8 01       	movw	r30, r16
    43ea:	a0 80       	ld	r10, Z
    43ec:	b1 80       	ldd	r11, Z+1	; 0x01
    43ee:	26 ff       	sbrs	r18, 6
    43f0:	03 c0       	rjmp	.+6      	; 0x43f8 <vfprintf+0x150>
    43f2:	65 2d       	mov	r22, r5
    43f4:	70 e0       	ldi	r23, 0x00	; 0
    43f6:	02 c0       	rjmp	.+4      	; 0x43fc <vfprintf+0x154>
    43f8:	6f ef       	ldi	r22, 0xFF	; 255
    43fa:	7f ef       	ldi	r23, 0xFF	; 255
    43fc:	c5 01       	movw	r24, r10
    43fe:	2c 87       	std	Y+12, r18	; 0x0c
    4400:	4c d1       	rcall	.+664    	; 0x469a <strnlen>
    4402:	2c 01       	movw	r4, r24
    4404:	83 01       	movw	r16, r6
    4406:	2c 85       	ldd	r18, Y+12	; 0x0c
    4408:	2f 77       	andi	r18, 0x7F	; 127
    440a:	22 2e       	mov	r2, r18
    440c:	16 c0       	rjmp	.+44     	; 0x443a <vfprintf+0x192>
    440e:	38 01       	movw	r6, r16
    4410:	f2 e0       	ldi	r31, 0x02	; 2
    4412:	6f 0e       	add	r6, r31
    4414:	71 1c       	adc	r7, r1
    4416:	f8 01       	movw	r30, r16
    4418:	a0 80       	ld	r10, Z
    441a:	b1 80       	ldd	r11, Z+1	; 0x01
    441c:	26 ff       	sbrs	r18, 6
    441e:	03 c0       	rjmp	.+6      	; 0x4426 <vfprintf+0x17e>
    4420:	65 2d       	mov	r22, r5
    4422:	70 e0       	ldi	r23, 0x00	; 0
    4424:	02 c0       	rjmp	.+4      	; 0x442a <vfprintf+0x182>
    4426:	6f ef       	ldi	r22, 0xFF	; 255
    4428:	7f ef       	ldi	r23, 0xFF	; 255
    442a:	c5 01       	movw	r24, r10
    442c:	2c 87       	std	Y+12, r18	; 0x0c
    442e:	2a d1       	rcall	.+596    	; 0x4684 <strnlen_P>
    4430:	2c 01       	movw	r4, r24
    4432:	2c 85       	ldd	r18, Y+12	; 0x0c
    4434:	20 68       	ori	r18, 0x80	; 128
    4436:	22 2e       	mov	r2, r18
    4438:	83 01       	movw	r16, r6
    443a:	23 fc       	sbrc	r2, 3
    443c:	19 c0       	rjmp	.+50     	; 0x4470 <vfprintf+0x1c8>
    443e:	83 2d       	mov	r24, r3
    4440:	90 e0       	ldi	r25, 0x00	; 0
    4442:	48 16       	cp	r4, r24
    4444:	59 06       	cpc	r5, r25
    4446:	a0 f4       	brcc	.+40     	; 0x4470 <vfprintf+0x1c8>
    4448:	b7 01       	movw	r22, r14
    444a:	80 e2       	ldi	r24, 0x20	; 32
    444c:	90 e0       	ldi	r25, 0x00	; 0
    444e:	30 d1       	rcall	.+608    	; 0x46b0 <fputc>
    4450:	3a 94       	dec	r3
    4452:	f5 cf       	rjmp	.-22     	; 0x443e <vfprintf+0x196>
    4454:	f5 01       	movw	r30, r10
    4456:	27 fc       	sbrc	r2, 7
    4458:	85 91       	lpm	r24, Z+
    445a:	27 fe       	sbrs	r2, 7
    445c:	81 91       	ld	r24, Z+
    445e:	5f 01       	movw	r10, r30
    4460:	b7 01       	movw	r22, r14
    4462:	90 e0       	ldi	r25, 0x00	; 0
    4464:	25 d1       	rcall	.+586    	; 0x46b0 <fputc>
    4466:	31 10       	cpse	r3, r1
    4468:	3a 94       	dec	r3
    446a:	f1 e0       	ldi	r31, 0x01	; 1
    446c:	4f 1a       	sub	r4, r31
    446e:	51 08       	sbc	r5, r1
    4470:	41 14       	cp	r4, r1
    4472:	51 04       	cpc	r5, r1
    4474:	79 f7       	brne	.-34     	; 0x4454 <vfprintf+0x1ac>
    4476:	de c0       	rjmp	.+444    	; 0x4634 <vfprintf+0x38c>
    4478:	84 36       	cpi	r24, 0x64	; 100
    447a:	11 f0       	breq	.+4      	; 0x4480 <vfprintf+0x1d8>
    447c:	89 36       	cpi	r24, 0x69	; 105
    447e:	31 f5       	brne	.+76     	; 0x44cc <vfprintf+0x224>
    4480:	f8 01       	movw	r30, r16
    4482:	27 ff       	sbrs	r18, 7
    4484:	07 c0       	rjmp	.+14     	; 0x4494 <vfprintf+0x1ec>
    4486:	60 81       	ld	r22, Z
    4488:	71 81       	ldd	r23, Z+1	; 0x01
    448a:	82 81       	ldd	r24, Z+2	; 0x02
    448c:	93 81       	ldd	r25, Z+3	; 0x03
    448e:	0c 5f       	subi	r16, 0xFC	; 252
    4490:	1f 4f       	sbci	r17, 0xFF	; 255
    4492:	08 c0       	rjmp	.+16     	; 0x44a4 <vfprintf+0x1fc>
    4494:	60 81       	ld	r22, Z
    4496:	71 81       	ldd	r23, Z+1	; 0x01
    4498:	07 2e       	mov	r0, r23
    449a:	00 0c       	add	r0, r0
    449c:	88 0b       	sbc	r24, r24
    449e:	99 0b       	sbc	r25, r25
    44a0:	0e 5f       	subi	r16, 0xFE	; 254
    44a2:	1f 4f       	sbci	r17, 0xFF	; 255
    44a4:	2f 76       	andi	r18, 0x6F	; 111
    44a6:	72 2e       	mov	r7, r18
    44a8:	97 ff       	sbrs	r25, 7
    44aa:	09 c0       	rjmp	.+18     	; 0x44be <vfprintf+0x216>
    44ac:	90 95       	com	r25
    44ae:	80 95       	com	r24
    44b0:	70 95       	com	r23
    44b2:	61 95       	neg	r22
    44b4:	7f 4f       	sbci	r23, 0xFF	; 255
    44b6:	8f 4f       	sbci	r24, 0xFF	; 255
    44b8:	9f 4f       	sbci	r25, 0xFF	; 255
    44ba:	20 68       	ori	r18, 0x80	; 128
    44bc:	72 2e       	mov	r7, r18
    44be:	2a e0       	ldi	r18, 0x0A	; 10
    44c0:	30 e0       	ldi	r19, 0x00	; 0
    44c2:	a4 01       	movw	r20, r8
    44c4:	2d d1       	rcall	.+602    	; 0x4720 <__ultoa_invert>
    44c6:	a8 2e       	mov	r10, r24
    44c8:	a8 18       	sub	r10, r8
    44ca:	43 c0       	rjmp	.+134    	; 0x4552 <vfprintf+0x2aa>
    44cc:	85 37       	cpi	r24, 0x75	; 117
    44ce:	29 f4       	brne	.+10     	; 0x44da <vfprintf+0x232>
    44d0:	2f 7e       	andi	r18, 0xEF	; 239
    44d2:	b2 2e       	mov	r11, r18
    44d4:	2a e0       	ldi	r18, 0x0A	; 10
    44d6:	30 e0       	ldi	r19, 0x00	; 0
    44d8:	25 c0       	rjmp	.+74     	; 0x4524 <vfprintf+0x27c>
    44da:	f2 2f       	mov	r31, r18
    44dc:	f9 7f       	andi	r31, 0xF9	; 249
    44de:	bf 2e       	mov	r11, r31
    44e0:	8f 36       	cpi	r24, 0x6F	; 111
    44e2:	c1 f0       	breq	.+48     	; 0x4514 <vfprintf+0x26c>
    44e4:	18 f4       	brcc	.+6      	; 0x44ec <vfprintf+0x244>
    44e6:	88 35       	cpi	r24, 0x58	; 88
    44e8:	79 f0       	breq	.+30     	; 0x4508 <vfprintf+0x260>
    44ea:	ad c0       	rjmp	.+346    	; 0x4646 <vfprintf+0x39e>
    44ec:	80 37       	cpi	r24, 0x70	; 112
    44ee:	19 f0       	breq	.+6      	; 0x44f6 <vfprintf+0x24e>
    44f0:	88 37       	cpi	r24, 0x78	; 120
    44f2:	21 f0       	breq	.+8      	; 0x44fc <vfprintf+0x254>
    44f4:	a8 c0       	rjmp	.+336    	; 0x4646 <vfprintf+0x39e>
    44f6:	2f 2f       	mov	r18, r31
    44f8:	20 61       	ori	r18, 0x10	; 16
    44fa:	b2 2e       	mov	r11, r18
    44fc:	b4 fe       	sbrs	r11, 4
    44fe:	0d c0       	rjmp	.+26     	; 0x451a <vfprintf+0x272>
    4500:	8b 2d       	mov	r24, r11
    4502:	84 60       	ori	r24, 0x04	; 4
    4504:	b8 2e       	mov	r11, r24
    4506:	09 c0       	rjmp	.+18     	; 0x451a <vfprintf+0x272>
    4508:	24 ff       	sbrs	r18, 4
    450a:	0a c0       	rjmp	.+20     	; 0x4520 <vfprintf+0x278>
    450c:	9f 2f       	mov	r25, r31
    450e:	96 60       	ori	r25, 0x06	; 6
    4510:	b9 2e       	mov	r11, r25
    4512:	06 c0       	rjmp	.+12     	; 0x4520 <vfprintf+0x278>
    4514:	28 e0       	ldi	r18, 0x08	; 8
    4516:	30 e0       	ldi	r19, 0x00	; 0
    4518:	05 c0       	rjmp	.+10     	; 0x4524 <vfprintf+0x27c>
    451a:	20 e1       	ldi	r18, 0x10	; 16
    451c:	30 e0       	ldi	r19, 0x00	; 0
    451e:	02 c0       	rjmp	.+4      	; 0x4524 <vfprintf+0x27c>
    4520:	20 e1       	ldi	r18, 0x10	; 16
    4522:	32 e0       	ldi	r19, 0x02	; 2
    4524:	f8 01       	movw	r30, r16
    4526:	b7 fe       	sbrs	r11, 7
    4528:	07 c0       	rjmp	.+14     	; 0x4538 <vfprintf+0x290>
    452a:	60 81       	ld	r22, Z
    452c:	71 81       	ldd	r23, Z+1	; 0x01
    452e:	82 81       	ldd	r24, Z+2	; 0x02
    4530:	93 81       	ldd	r25, Z+3	; 0x03
    4532:	0c 5f       	subi	r16, 0xFC	; 252
    4534:	1f 4f       	sbci	r17, 0xFF	; 255
    4536:	06 c0       	rjmp	.+12     	; 0x4544 <vfprintf+0x29c>
    4538:	60 81       	ld	r22, Z
    453a:	71 81       	ldd	r23, Z+1	; 0x01
    453c:	80 e0       	ldi	r24, 0x00	; 0
    453e:	90 e0       	ldi	r25, 0x00	; 0
    4540:	0e 5f       	subi	r16, 0xFE	; 254
    4542:	1f 4f       	sbci	r17, 0xFF	; 255
    4544:	a4 01       	movw	r20, r8
    4546:	ec d0       	rcall	.+472    	; 0x4720 <__ultoa_invert>
    4548:	a8 2e       	mov	r10, r24
    454a:	a8 18       	sub	r10, r8
    454c:	fb 2d       	mov	r31, r11
    454e:	ff 77       	andi	r31, 0x7F	; 127
    4550:	7f 2e       	mov	r7, r31
    4552:	76 fe       	sbrs	r7, 6
    4554:	0b c0       	rjmp	.+22     	; 0x456c <vfprintf+0x2c4>
    4556:	37 2d       	mov	r19, r7
    4558:	3e 7f       	andi	r19, 0xFE	; 254
    455a:	a5 14       	cp	r10, r5
    455c:	50 f4       	brcc	.+20     	; 0x4572 <vfprintf+0x2ca>
    455e:	74 fe       	sbrs	r7, 4
    4560:	0a c0       	rjmp	.+20     	; 0x4576 <vfprintf+0x2ce>
    4562:	72 fc       	sbrc	r7, 2
    4564:	08 c0       	rjmp	.+16     	; 0x4576 <vfprintf+0x2ce>
    4566:	37 2d       	mov	r19, r7
    4568:	3e 7e       	andi	r19, 0xEE	; 238
    456a:	05 c0       	rjmp	.+10     	; 0x4576 <vfprintf+0x2ce>
    456c:	ba 2c       	mov	r11, r10
    456e:	37 2d       	mov	r19, r7
    4570:	03 c0       	rjmp	.+6      	; 0x4578 <vfprintf+0x2d0>
    4572:	ba 2c       	mov	r11, r10
    4574:	01 c0       	rjmp	.+2      	; 0x4578 <vfprintf+0x2d0>
    4576:	b5 2c       	mov	r11, r5
    4578:	34 ff       	sbrs	r19, 4
    457a:	0d c0       	rjmp	.+26     	; 0x4596 <vfprintf+0x2ee>
    457c:	fe 01       	movw	r30, r28
    457e:	ea 0d       	add	r30, r10
    4580:	f1 1d       	adc	r31, r1
    4582:	80 81       	ld	r24, Z
    4584:	80 33       	cpi	r24, 0x30	; 48
    4586:	11 f4       	brne	.+4      	; 0x458c <vfprintf+0x2e4>
    4588:	39 7e       	andi	r19, 0xE9	; 233
    458a:	09 c0       	rjmp	.+18     	; 0x459e <vfprintf+0x2f6>
    458c:	32 ff       	sbrs	r19, 2
    458e:	06 c0       	rjmp	.+12     	; 0x459c <vfprintf+0x2f4>
    4590:	b3 94       	inc	r11
    4592:	b3 94       	inc	r11
    4594:	04 c0       	rjmp	.+8      	; 0x459e <vfprintf+0x2f6>
    4596:	83 2f       	mov	r24, r19
    4598:	86 78       	andi	r24, 0x86	; 134
    459a:	09 f0       	breq	.+2      	; 0x459e <vfprintf+0x2f6>
    459c:	b3 94       	inc	r11
    459e:	33 fd       	sbrc	r19, 3
    45a0:	12 c0       	rjmp	.+36     	; 0x45c6 <vfprintf+0x31e>
    45a2:	30 ff       	sbrs	r19, 0
    45a4:	06 c0       	rjmp	.+12     	; 0x45b2 <vfprintf+0x30a>
    45a6:	5a 2c       	mov	r5, r10
    45a8:	b3 14       	cp	r11, r3
    45aa:	18 f4       	brcc	.+6      	; 0x45b2 <vfprintf+0x30a>
    45ac:	53 0c       	add	r5, r3
    45ae:	5b 18       	sub	r5, r11
    45b0:	b3 2c       	mov	r11, r3
    45b2:	b3 14       	cp	r11, r3
    45b4:	60 f4       	brcc	.+24     	; 0x45ce <vfprintf+0x326>
    45b6:	b7 01       	movw	r22, r14
    45b8:	80 e2       	ldi	r24, 0x20	; 32
    45ba:	90 e0       	ldi	r25, 0x00	; 0
    45bc:	3c 87       	std	Y+12, r19	; 0x0c
    45be:	78 d0       	rcall	.+240    	; 0x46b0 <fputc>
    45c0:	b3 94       	inc	r11
    45c2:	3c 85       	ldd	r19, Y+12	; 0x0c
    45c4:	f6 cf       	rjmp	.-20     	; 0x45b2 <vfprintf+0x30a>
    45c6:	b3 14       	cp	r11, r3
    45c8:	10 f4       	brcc	.+4      	; 0x45ce <vfprintf+0x326>
    45ca:	3b 18       	sub	r3, r11
    45cc:	01 c0       	rjmp	.+2      	; 0x45d0 <vfprintf+0x328>
    45ce:	31 2c       	mov	r3, r1
    45d0:	34 ff       	sbrs	r19, 4
    45d2:	11 c0       	rjmp	.+34     	; 0x45f6 <vfprintf+0x34e>
    45d4:	b7 01       	movw	r22, r14
    45d6:	80 e3       	ldi	r24, 0x30	; 48
    45d8:	90 e0       	ldi	r25, 0x00	; 0
    45da:	3c 87       	std	Y+12, r19	; 0x0c
    45dc:	69 d0       	rcall	.+210    	; 0x46b0 <fputc>
    45de:	3c 85       	ldd	r19, Y+12	; 0x0c
    45e0:	32 ff       	sbrs	r19, 2
    45e2:	16 c0       	rjmp	.+44     	; 0x4610 <vfprintf+0x368>
    45e4:	31 fd       	sbrc	r19, 1
    45e6:	03 c0       	rjmp	.+6      	; 0x45ee <vfprintf+0x346>
    45e8:	88 e7       	ldi	r24, 0x78	; 120
    45ea:	90 e0       	ldi	r25, 0x00	; 0
    45ec:	02 c0       	rjmp	.+4      	; 0x45f2 <vfprintf+0x34a>
    45ee:	88 e5       	ldi	r24, 0x58	; 88
    45f0:	90 e0       	ldi	r25, 0x00	; 0
    45f2:	b7 01       	movw	r22, r14
    45f4:	0c c0       	rjmp	.+24     	; 0x460e <vfprintf+0x366>
    45f6:	83 2f       	mov	r24, r19
    45f8:	86 78       	andi	r24, 0x86	; 134
    45fa:	51 f0       	breq	.+20     	; 0x4610 <vfprintf+0x368>
    45fc:	31 ff       	sbrs	r19, 1
    45fe:	02 c0       	rjmp	.+4      	; 0x4604 <vfprintf+0x35c>
    4600:	8b e2       	ldi	r24, 0x2B	; 43
    4602:	01 c0       	rjmp	.+2      	; 0x4606 <vfprintf+0x35e>
    4604:	80 e2       	ldi	r24, 0x20	; 32
    4606:	37 fd       	sbrc	r19, 7
    4608:	8d e2       	ldi	r24, 0x2D	; 45
    460a:	b7 01       	movw	r22, r14
    460c:	90 e0       	ldi	r25, 0x00	; 0
    460e:	50 d0       	rcall	.+160    	; 0x46b0 <fputc>
    4610:	a5 14       	cp	r10, r5
    4612:	30 f4       	brcc	.+12     	; 0x4620 <vfprintf+0x378>
    4614:	b7 01       	movw	r22, r14
    4616:	80 e3       	ldi	r24, 0x30	; 48
    4618:	90 e0       	ldi	r25, 0x00	; 0
    461a:	4a d0       	rcall	.+148    	; 0x46b0 <fputc>
    461c:	5a 94       	dec	r5
    461e:	f8 cf       	rjmp	.-16     	; 0x4610 <vfprintf+0x368>
    4620:	aa 94       	dec	r10
    4622:	f4 01       	movw	r30, r8
    4624:	ea 0d       	add	r30, r10
    4626:	f1 1d       	adc	r31, r1
    4628:	80 81       	ld	r24, Z
    462a:	b7 01       	movw	r22, r14
    462c:	90 e0       	ldi	r25, 0x00	; 0
    462e:	40 d0       	rcall	.+128    	; 0x46b0 <fputc>
    4630:	a1 10       	cpse	r10, r1
    4632:	f6 cf       	rjmp	.-20     	; 0x4620 <vfprintf+0x378>
    4634:	33 20       	and	r3, r3
    4636:	09 f4       	brne	.+2      	; 0x463a <vfprintf+0x392>
    4638:	5d ce       	rjmp	.-838    	; 0x42f4 <vfprintf+0x4c>
    463a:	b7 01       	movw	r22, r14
    463c:	80 e2       	ldi	r24, 0x20	; 32
    463e:	90 e0       	ldi	r25, 0x00	; 0
    4640:	37 d0       	rcall	.+110    	; 0x46b0 <fputc>
    4642:	3a 94       	dec	r3
    4644:	f7 cf       	rjmp	.-18     	; 0x4634 <vfprintf+0x38c>
    4646:	f7 01       	movw	r30, r14
    4648:	86 81       	ldd	r24, Z+6	; 0x06
    464a:	97 81       	ldd	r25, Z+7	; 0x07
    464c:	02 c0       	rjmp	.+4      	; 0x4652 <vfprintf+0x3aa>
    464e:	8f ef       	ldi	r24, 0xFF	; 255
    4650:	9f ef       	ldi	r25, 0xFF	; 255
    4652:	2c 96       	adiw	r28, 0x0c	; 12
    4654:	0f b6       	in	r0, 0x3f	; 63
    4656:	f8 94       	cli
    4658:	de bf       	out	0x3e, r29	; 62
    465a:	0f be       	out	0x3f, r0	; 63
    465c:	cd bf       	out	0x3d, r28	; 61
    465e:	df 91       	pop	r29
    4660:	cf 91       	pop	r28
    4662:	1f 91       	pop	r17
    4664:	0f 91       	pop	r16
    4666:	ff 90       	pop	r15
    4668:	ef 90       	pop	r14
    466a:	df 90       	pop	r13
    466c:	cf 90       	pop	r12
    466e:	bf 90       	pop	r11
    4670:	af 90       	pop	r10
    4672:	9f 90       	pop	r9
    4674:	8f 90       	pop	r8
    4676:	7f 90       	pop	r7
    4678:	6f 90       	pop	r6
    467a:	5f 90       	pop	r5
    467c:	4f 90       	pop	r4
    467e:	3f 90       	pop	r3
    4680:	2f 90       	pop	r2
    4682:	08 95       	ret

00004684 <strnlen_P>:
    4684:	fc 01       	movw	r30, r24
    4686:	05 90       	lpm	r0, Z+
    4688:	61 50       	subi	r22, 0x01	; 1
    468a:	70 40       	sbci	r23, 0x00	; 0
    468c:	01 10       	cpse	r0, r1
    468e:	d8 f7       	brcc	.-10     	; 0x4686 <strnlen_P+0x2>
    4690:	80 95       	com	r24
    4692:	90 95       	com	r25
    4694:	8e 0f       	add	r24, r30
    4696:	9f 1f       	adc	r25, r31
    4698:	08 95       	ret

0000469a <strnlen>:
    469a:	fc 01       	movw	r30, r24
    469c:	61 50       	subi	r22, 0x01	; 1
    469e:	70 40       	sbci	r23, 0x00	; 0
    46a0:	01 90       	ld	r0, Z+
    46a2:	01 10       	cpse	r0, r1
    46a4:	d8 f7       	brcc	.-10     	; 0x469c <strnlen+0x2>
    46a6:	80 95       	com	r24
    46a8:	90 95       	com	r25
    46aa:	8e 0f       	add	r24, r30
    46ac:	9f 1f       	adc	r25, r31
    46ae:	08 95       	ret

000046b0 <fputc>:
    46b0:	0f 93       	push	r16
    46b2:	1f 93       	push	r17
    46b4:	cf 93       	push	r28
    46b6:	df 93       	push	r29
    46b8:	fb 01       	movw	r30, r22
    46ba:	23 81       	ldd	r18, Z+3	; 0x03
    46bc:	21 fd       	sbrc	r18, 1
    46be:	03 c0       	rjmp	.+6      	; 0x46c6 <fputc+0x16>
    46c0:	8f ef       	ldi	r24, 0xFF	; 255
    46c2:	9f ef       	ldi	r25, 0xFF	; 255
    46c4:	28 c0       	rjmp	.+80     	; 0x4716 <fputc+0x66>
    46c6:	22 ff       	sbrs	r18, 2
    46c8:	16 c0       	rjmp	.+44     	; 0x46f6 <fputc+0x46>
    46ca:	46 81       	ldd	r20, Z+6	; 0x06
    46cc:	57 81       	ldd	r21, Z+7	; 0x07
    46ce:	24 81       	ldd	r18, Z+4	; 0x04
    46d0:	35 81       	ldd	r19, Z+5	; 0x05
    46d2:	42 17       	cp	r20, r18
    46d4:	53 07       	cpc	r21, r19
    46d6:	44 f4       	brge	.+16     	; 0x46e8 <fputc+0x38>
    46d8:	a0 81       	ld	r26, Z
    46da:	b1 81       	ldd	r27, Z+1	; 0x01
    46dc:	9d 01       	movw	r18, r26
    46de:	2f 5f       	subi	r18, 0xFF	; 255
    46e0:	3f 4f       	sbci	r19, 0xFF	; 255
    46e2:	31 83       	std	Z+1, r19	; 0x01
    46e4:	20 83       	st	Z, r18
    46e6:	8c 93       	st	X, r24
    46e8:	26 81       	ldd	r18, Z+6	; 0x06
    46ea:	37 81       	ldd	r19, Z+7	; 0x07
    46ec:	2f 5f       	subi	r18, 0xFF	; 255
    46ee:	3f 4f       	sbci	r19, 0xFF	; 255
    46f0:	37 83       	std	Z+7, r19	; 0x07
    46f2:	26 83       	std	Z+6, r18	; 0x06
    46f4:	10 c0       	rjmp	.+32     	; 0x4716 <fputc+0x66>
    46f6:	eb 01       	movw	r28, r22
    46f8:	09 2f       	mov	r16, r25
    46fa:	18 2f       	mov	r17, r24
    46fc:	00 84       	ldd	r0, Z+8	; 0x08
    46fe:	f1 85       	ldd	r31, Z+9	; 0x09
    4700:	e0 2d       	mov	r30, r0
    4702:	09 95       	icall
    4704:	89 2b       	or	r24, r25
    4706:	e1 f6       	brne	.-72     	; 0x46c0 <fputc+0x10>
    4708:	8e 81       	ldd	r24, Y+6	; 0x06
    470a:	9f 81       	ldd	r25, Y+7	; 0x07
    470c:	01 96       	adiw	r24, 0x01	; 1
    470e:	9f 83       	std	Y+7, r25	; 0x07
    4710:	8e 83       	std	Y+6, r24	; 0x06
    4712:	81 2f       	mov	r24, r17
    4714:	90 2f       	mov	r25, r16
    4716:	df 91       	pop	r29
    4718:	cf 91       	pop	r28
    471a:	1f 91       	pop	r17
    471c:	0f 91       	pop	r16
    471e:	08 95       	ret

00004720 <__ultoa_invert>:
    4720:	fa 01       	movw	r30, r20
    4722:	aa 27       	eor	r26, r26
    4724:	28 30       	cpi	r18, 0x08	; 8
    4726:	51 f1       	breq	.+84     	; 0x477c <__ultoa_invert+0x5c>
    4728:	20 31       	cpi	r18, 0x10	; 16
    472a:	81 f1       	breq	.+96     	; 0x478c <__ultoa_invert+0x6c>
    472c:	e8 94       	clt
    472e:	6f 93       	push	r22
    4730:	6e 7f       	andi	r22, 0xFE	; 254
    4732:	6e 5f       	subi	r22, 0xFE	; 254
    4734:	7f 4f       	sbci	r23, 0xFF	; 255
    4736:	8f 4f       	sbci	r24, 0xFF	; 255
    4738:	9f 4f       	sbci	r25, 0xFF	; 255
    473a:	af 4f       	sbci	r26, 0xFF	; 255
    473c:	b1 e0       	ldi	r27, 0x01	; 1
    473e:	3e d0       	rcall	.+124    	; 0x47bc <__ultoa_invert+0x9c>
    4740:	b4 e0       	ldi	r27, 0x04	; 4
    4742:	3c d0       	rcall	.+120    	; 0x47bc <__ultoa_invert+0x9c>
    4744:	67 0f       	add	r22, r23
    4746:	78 1f       	adc	r23, r24
    4748:	89 1f       	adc	r24, r25
    474a:	9a 1f       	adc	r25, r26
    474c:	a1 1d       	adc	r26, r1
    474e:	68 0f       	add	r22, r24
    4750:	79 1f       	adc	r23, r25
    4752:	8a 1f       	adc	r24, r26
    4754:	91 1d       	adc	r25, r1
    4756:	a1 1d       	adc	r26, r1
    4758:	6a 0f       	add	r22, r26
    475a:	71 1d       	adc	r23, r1
    475c:	81 1d       	adc	r24, r1
    475e:	91 1d       	adc	r25, r1
    4760:	a1 1d       	adc	r26, r1
    4762:	20 d0       	rcall	.+64     	; 0x47a4 <__ultoa_invert+0x84>
    4764:	09 f4       	brne	.+2      	; 0x4768 <__ultoa_invert+0x48>
    4766:	68 94       	set
    4768:	3f 91       	pop	r19
    476a:	2a e0       	ldi	r18, 0x0A	; 10
    476c:	26 9f       	mul	r18, r22
    476e:	11 24       	eor	r1, r1
    4770:	30 19       	sub	r19, r0
    4772:	30 5d       	subi	r19, 0xD0	; 208
    4774:	31 93       	st	Z+, r19
    4776:	de f6       	brtc	.-74     	; 0x472e <__ultoa_invert+0xe>
    4778:	cf 01       	movw	r24, r30
    477a:	08 95       	ret
    477c:	46 2f       	mov	r20, r22
    477e:	47 70       	andi	r20, 0x07	; 7
    4780:	40 5d       	subi	r20, 0xD0	; 208
    4782:	41 93       	st	Z+, r20
    4784:	b3 e0       	ldi	r27, 0x03	; 3
    4786:	0f d0       	rcall	.+30     	; 0x47a6 <__ultoa_invert+0x86>
    4788:	c9 f7       	brne	.-14     	; 0x477c <__ultoa_invert+0x5c>
    478a:	f6 cf       	rjmp	.-20     	; 0x4778 <__ultoa_invert+0x58>
    478c:	46 2f       	mov	r20, r22
    478e:	4f 70       	andi	r20, 0x0F	; 15
    4790:	40 5d       	subi	r20, 0xD0	; 208
    4792:	4a 33       	cpi	r20, 0x3A	; 58
    4794:	18 f0       	brcs	.+6      	; 0x479c <__ultoa_invert+0x7c>
    4796:	49 5d       	subi	r20, 0xD9	; 217
    4798:	31 fd       	sbrc	r19, 1
    479a:	40 52       	subi	r20, 0x20	; 32
    479c:	41 93       	st	Z+, r20
    479e:	02 d0       	rcall	.+4      	; 0x47a4 <__ultoa_invert+0x84>
    47a0:	a9 f7       	brne	.-22     	; 0x478c <__ultoa_invert+0x6c>
    47a2:	ea cf       	rjmp	.-44     	; 0x4778 <__ultoa_invert+0x58>
    47a4:	b4 e0       	ldi	r27, 0x04	; 4
    47a6:	a6 95       	lsr	r26
    47a8:	97 95       	ror	r25
    47aa:	87 95       	ror	r24
    47ac:	77 95       	ror	r23
    47ae:	67 95       	ror	r22
    47b0:	ba 95       	dec	r27
    47b2:	c9 f7       	brne	.-14     	; 0x47a6 <__ultoa_invert+0x86>
    47b4:	00 97       	sbiw	r24, 0x00	; 0
    47b6:	61 05       	cpc	r22, r1
    47b8:	71 05       	cpc	r23, r1
    47ba:	08 95       	ret
    47bc:	9b 01       	movw	r18, r22
    47be:	ac 01       	movw	r20, r24
    47c0:	0a 2e       	mov	r0, r26
    47c2:	06 94       	lsr	r0
    47c4:	57 95       	ror	r21
    47c6:	47 95       	ror	r20
    47c8:	37 95       	ror	r19
    47ca:	27 95       	ror	r18
    47cc:	ba 95       	dec	r27
    47ce:	c9 f7       	brne	.-14     	; 0x47c2 <__ultoa_invert+0xa2>
    47d0:	62 0f       	add	r22, r18
    47d2:	73 1f       	adc	r23, r19
    47d4:	84 1f       	adc	r24, r20
    47d6:	95 1f       	adc	r25, r21
    47d8:	a0 1d       	adc	r26, r0
    47da:	08 95       	ret

000047dc <__do_global_dtors>:
    47dc:	11 e0       	ldi	r17, 0x01	; 1
    47de:	c9 e6       	ldi	r28, 0x69	; 105
    47e0:	d1 e0       	ldi	r29, 0x01	; 1
    47e2:	03 c0       	rjmp	.+6      	; 0x47ea <__do_global_dtors+0xe>
    47e4:	fe 01       	movw	r30, r28
    47e6:	0f dd       	rcall	.-1506   	; 0x4206 <__tablejump2__>
    47e8:	21 96       	adiw	r28, 0x01	; 1
    47ea:	ca 36       	cpi	r28, 0x6A	; 106
    47ec:	d1 07       	cpc	r29, r17
    47ee:	d1 f7       	brne	.-12     	; 0x47e4 <__do_global_dtors+0x8>
    47f0:	f8 94       	cli

000047f2 <__stop_program>:
    47f2:	ff cf       	rjmp	.-2      	; 0x47f2 <__stop_program>
