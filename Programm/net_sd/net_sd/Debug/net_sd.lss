
net_sd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  00001416  000014aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001416  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000023d  00800116  00800116  000014c0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000014c0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000014f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a0  00000000  00000000  00001530  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000021d4  00000000  00000000  000016d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008e6  00000000  00000000  000038a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001368  00000000  00000000  0000418a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000844  00000000  00000000  000054f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000071b  00000000  00000000  00005d38  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000296d  00000000  00000000  00006453  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000178  00000000  00000000  00008dc0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	62 c0       	rjmp	.+196    	; 0xca <__bad_interrupt>
       6:	00 00       	nop
       8:	60 c0       	rjmp	.+192    	; 0xca <__bad_interrupt>
       a:	00 00       	nop
       c:	5e c0       	rjmp	.+188    	; 0xca <__bad_interrupt>
       e:	00 00       	nop
      10:	5c c0       	rjmp	.+184    	; 0xca <__bad_interrupt>
      12:	00 00       	nop
      14:	5a c0       	rjmp	.+180    	; 0xca <__bad_interrupt>
      16:	00 00       	nop
      18:	58 c0       	rjmp	.+176    	; 0xca <__bad_interrupt>
      1a:	00 00       	nop
      1c:	56 c0       	rjmp	.+172    	; 0xca <__bad_interrupt>
      1e:	00 00       	nop
      20:	54 c0       	rjmp	.+168    	; 0xca <__bad_interrupt>
      22:	00 00       	nop
      24:	52 c0       	rjmp	.+164    	; 0xca <__bad_interrupt>
      26:	00 00       	nop
      28:	50 c0       	rjmp	.+160    	; 0xca <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4e c0       	rjmp	.+156    	; 0xca <__bad_interrupt>
      2e:	00 00       	nop
      30:	4c c0       	rjmp	.+152    	; 0xca <__bad_interrupt>
      32:	00 00       	nop
      34:	4a c0       	rjmp	.+148    	; 0xca <__bad_interrupt>
      36:	00 00       	nop
      38:	48 c0       	rjmp	.+144    	; 0xca <__bad_interrupt>
      3a:	00 00       	nop
      3c:	46 c0       	rjmp	.+140    	; 0xca <__bad_interrupt>
      3e:	00 00       	nop
      40:	44 c0       	rjmp	.+136    	; 0xca <__bad_interrupt>
      42:	00 00       	nop
      44:	42 c0       	rjmp	.+132    	; 0xca <__bad_interrupt>
      46:	00 00       	nop
      48:	40 c0       	rjmp	.+128    	; 0xca <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3e c0       	rjmp	.+124    	; 0xca <__bad_interrupt>
      4e:	00 00       	nop
      50:	3c c0       	rjmp	.+120    	; 0xca <__bad_interrupt>
      52:	00 00       	nop
      54:	3a c0       	rjmp	.+116    	; 0xca <__bad_interrupt>
      56:	00 00       	nop
      58:	38 c0       	rjmp	.+112    	; 0xca <__bad_interrupt>
      5a:	00 00       	nop
      5c:	36 c0       	rjmp	.+108    	; 0xca <__bad_interrupt>
      5e:	00 00       	nop
      60:	34 c0       	rjmp	.+104    	; 0xca <__bad_interrupt>
      62:	00 00       	nop
      64:	32 c0       	rjmp	.+100    	; 0xca <__bad_interrupt>
      66:	00 00       	nop
      68:	30 c0       	rjmp	.+96     	; 0xca <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2e c0       	rjmp	.+92     	; 0xca <__bad_interrupt>
      6e:	00 00       	nop
      70:	2c c0       	rjmp	.+88     	; 0xca <__bad_interrupt>
      72:	00 00       	nop
      74:	2a c0       	rjmp	.+84     	; 0xca <__bad_interrupt>
      76:	00 00       	nop
      78:	28 c0       	rjmp	.+80     	; 0xca <__bad_interrupt>
      7a:	00 00       	nop
      7c:	26 c0       	rjmp	.+76     	; 0xca <__bad_interrupt>
      7e:	00 00       	nop
      80:	24 c0       	rjmp	.+72     	; 0xca <__bad_interrupt>
      82:	00 00       	nop
      84:	22 c0       	rjmp	.+68     	; 0xca <__bad_interrupt>
      86:	00 00       	nop
      88:	20 c0       	rjmp	.+64     	; 0xca <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e4       	ldi	r29, 0x40	; 64
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e6 e1       	ldi	r30, 0x16	; 22
      a0:	f4 e1       	ldi	r31, 0x14	; 20
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a6 31       	cpi	r26, 0x16	; 22
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	23 e0       	ldi	r18, 0x03	; 3
      b4:	a6 e1       	ldi	r26, 0x16	; 22
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a3 35       	cpi	r26, 0x53	; 83
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 ad 08 	call	0x115a	; 0x115a <main>
      c6:	0c 94 09 0a 	jmp	0x1412	; 0x1412 <_exit>

000000ca <__bad_interrupt>:
      ca:	9a cf       	rjmp	.-204    	; 0x0 <__vectors>

000000cc <fat_writeSector>:
// schreibt sektor nummer:sec auf die karte (puffer fat.sector) !!
// setzt bufferFlag=0 da puffer nicht dirty sein kann nach schreiben !
//***************************************************************************************************************
uint8_t fat_writeSector(uint32_t sec){
 
	fat.bufferDirty = FALSE;						// buffer kann nicht dirty sein weil wird geschrieben
      cc:	10 92 1c 01 	sts	0x011C, r1
	//printf("\nw_Sec = %lu",sec);
	return (mmc_write_sector(sec,fat.sector));		// schreiben von sektor puffer
      d0:	40 e3       	ldi	r20, 0x30	; 48
      d2:	51 e0       	ldi	r21, 0x01	; 1
      d4:	0c 94 4b 09 	jmp	0x1296	; 0x1296 <mmc_write_sector>
}
      d8:	08 95       	ret

000000da <fat_loadSector>:
//***************************************************************************************************************
// laed sektor:sec auf puffer:sector zum bearbeiten im ram !
// setzt currentSectorNr auf richtigen wert (also den sektor der gepuffert ist). es wird geprueft
// ob der gepufferte sektor ge√§ndert wurde, wenn ja muss erst geschrieben werden, um diese daten nicht zu verlieren !
//***************************************************************************************************************
uint8_t fat_loadSector(uint32_t sec){
      da:	cf 92       	push	r12
      dc:	df 92       	push	r13
      de:	ef 92       	push	r14
      e0:	ff 92       	push	r15
      e2:	0f 93       	push	r16
      e4:	1f 93       	push	r17
      e6:	cf 93       	push	r28
      e8:	df 93       	push	r29
	
	if( sec != file.currentSectorNr){			// nachladen noetig
      ea:	00 91 40 03 	lds	r16, 0x0340
      ee:	10 91 41 03 	lds	r17, 0x0341
      f2:	20 91 42 03 	lds	r18, 0x0342
      f6:	30 91 43 03 	lds	r19, 0x0343
      fa:	06 17       	cp	r16, r22
      fc:	17 07       	cpc	r17, r23
      fe:	28 07       	cpc	r18, r24
     100:	39 07       	cpc	r19, r25
     102:	31 f1       	breq	.+76     	; 0x150 <fat_loadSector+0x76>
     104:	6b 01       	movw	r12, r22
     106:	7c 01       	movw	r14, r24
		#if (MMC_WRITE==TRUE)
			if( fat.bufferDirty == TRUE ) {
     108:	80 91 1c 01 	lds	r24, 0x011C
     10c:	81 30       	cpi	r24, 0x01	; 1
     10e:	41 f4       	brne	.+16     	; 0x120 <fat_loadSector+0x46>
				fat.bufferDirty = FALSE;		// buffer kann nicht dirty sein weil wird geschrieben
     110:	10 92 1c 01 	sts	0x011C, r1
				mmc_write_sector( file.currentSectorNr,fat.sector );			// schreiben von sektor puffer
     114:	40 e3       	ldi	r20, 0x30	; 48
     116:	51 e0       	ldi	r21, 0x01	; 1
     118:	c9 01       	movw	r24, r18
     11a:	b8 01       	movw	r22, r16
     11c:	0e 94 4b 09 	call	0x1296	; 0x1296 <mmc_write_sector>
			}
		#endif
		fat.lastSector = file.currentSectorNr;	// den alten sektor sichern
     120:	ca e3       	ldi	r28, 0x3A	; 58
     122:	d3 e0       	ldi	r29, 0x03	; 3
     124:	8e 81       	ldd	r24, Y+6	; 0x06
     126:	9f 81       	ldd	r25, Y+7	; 0x07
     128:	a8 85       	ldd	r26, Y+8	; 0x08
     12a:	b9 85       	ldd	r27, Y+9	; 0x09
     12c:	80 93 18 01 	sts	0x0118, r24
     130:	90 93 19 01 	sts	0x0119, r25
     134:	a0 93 1a 01 	sts	0x011A, r26
     138:	b0 93 1b 01 	sts	0x011B, r27
		mmc_read_sector( sec,fat.sector );		// neuen sektor laden
     13c:	40 e3       	ldi	r20, 0x30	; 48
     13e:	51 e0       	ldi	r21, 0x01	; 1
     140:	c7 01       	movw	r24, r14
     142:	b6 01       	movw	r22, r12
     144:	0e 94 8c 09 	call	0x1318	; 0x1318 <mmc_read_sector>
		file.currentSectorNr = sec;				// aktualisiert sektor nummer (nummer des gepufferten sektors)
     148:	ce 82       	std	Y+6, r12	; 0x06
     14a:	df 82       	std	Y+7, r13	; 0x07
     14c:	e8 86       	std	Y+8, r14	; 0x08
     14e:	f9 86       	std	Y+9, r15	; 0x09
		return TRUE;
	}	
		
	else return TRUE;							// alles ok, daten sind schon da (sec==fat.currentSectorNr)

}
     150:	81 e0       	ldi	r24, 0x01	; 1
     152:	df 91       	pop	r29
     154:	cf 91       	pop	r28
     156:	1f 91       	pop	r17
     158:	0f 91       	pop	r16
     15a:	ff 90       	pop	r15
     15c:	ef 90       	pop	r14
     15e:	df 90       	pop	r13
     160:	cf 90       	pop	r12
     162:	08 95       	ret

00000164 <fat_getFreeRowsOfCluster>:
#endif

// ***************************************************************************************************************
// durchsucht cluster nach freiem platz fuer die anzahl rows.
// ***************************************************************************************************************
static uint8_t fat_getFreeRowsOfCluster(uint32_t secStart, uint8_t rows){
     164:	9f 92       	push	r9
     166:	af 92       	push	r10
     168:	bf 92       	push	r11
     16a:	cf 92       	push	r12
     16c:	df 92       	push	r13
     16e:	ef 92       	push	r14
     170:	ff 92       	push	r15
     172:	0f 93       	push	r16
     174:	1f 93       	push	r17
     176:	cf 93       	push	r28
     178:	df 93       	push	r29
     17a:	6b 01       	movw	r12, r22
     17c:	7c 01       	movw	r14, r24
     17e:	c4 2f       	mov	r28, r20
	uint16_t row;			// offset auf reihen anfang

	// variable muss statisch sein, wenn die anzahl der freien reihen die gesucht werden auf 2 cluster aufgeteilt sind !
	static uint8_t match = 0;

	sectors = 0;
     180:	b1 2c       	mov	r11, r1
	do{
		fat_loadSector( secStart + sectors );
		row = 0;
     182:	91 2c       	mov	r9, r1
     184:	a1 2c       	mov	r10, r1
					match = 0;
					return TRUE;
				}
			}
			else {								// kein freier eintrag, wenn bis hier nicht schon genuegend, dann sinds zuwenige
				match = 0;
     186:	d0 e0       	ldi	r29, 0x00	; 0
			}
		}while( (row+=32) < 512 );				// geht durch reihen/zeilen eines sektors
	}while( ++sectors < fat.secPerClust );		// geht die sektoren des clusters durch (moeglicherweise auch nur 1. sektor).
     188:	08 e1       	ldi	r16, 0x18	; 24
     18a:	11 e0       	ldi	r17, 0x01	; 1
	// variable muss statisch sein, wenn die anzahl der freien reihen die gesucht werden auf 2 cluster aufgeteilt sind !
	static uint8_t match = 0;

	sectors = 0;
	do{
		fat_loadSector( secStart + sectors );
     18c:	c7 01       	movw	r24, r14
     18e:	b6 01       	movw	r22, r12
     190:	6b 0d       	add	r22, r11
     192:	71 1d       	adc	r23, r1
     194:	81 1d       	adc	r24, r1
     196:	91 1d       	adc	r25, r1
     198:	a0 df       	rcall	.-192    	; 0xda <fat_loadSector>
     19a:	30 91 16 01 	lds	r19, 0x0116
		row = 0;
     19e:	89 2d       	mov	r24, r9
     1a0:	9a 2d       	mov	r25, r10
     1a2:	fc 01       	movw	r30, r24
     1a4:	e8 5e       	subi	r30, 0xE8	; 232
     1a6:	fe 4f       	sbci	r31, 0xFE	; 254
		do{
			if( fat.sector[row]==0x00 || fat.sector[row]==0xE5 ){ 	// prueft auf freihen eintrag (leer oder geloescht gefunden?).
     1a8:	20 8d       	ldd	r18, Z+24	; 0x18
     1aa:	22 23       	and	r18, r18
     1ac:	11 f0       	breq	.+4      	; 0x1b2 <fat_getFreeRowsOfCluster+0x4e>
     1ae:	25 3e       	cpi	r18, 0xE5	; 229
     1b0:	89 f4       	brne	.+34     	; 0x1d4 <fat_getFreeRowsOfCluster+0x70>
				match += 1;
     1b2:	3f 5f       	subi	r19, 0xFF	; 255
				if( match == rows ){								// fertig hier, noetige anzahl gefunden!
     1b4:	3c 13       	cpse	r19, r28
     1b6:	0f c0       	rjmp	.+30     	; 0x1d6 <fat_getFreeRowsOfCluster+0x72>
					file.row = row>>5; 								// byteoffset umrechnen zu reihe
     1b8:	96 95       	lsr	r25
     1ba:	87 95       	ror	r24
     1bc:	92 95       	swap	r25
     1be:	82 95       	swap	r24
     1c0:	8f 70       	andi	r24, 0x0F	; 15
     1c2:	89 27       	eor	r24, r25
     1c4:	9f 70       	andi	r25, 0x0F	; 15
     1c6:	89 27       	eor	r24, r25
     1c8:	80 93 4a 03 	sts	0x034A, r24
					match = 0;
     1cc:	10 92 16 01 	sts	0x0116, r1
					return TRUE;
     1d0:	81 e0       	ldi	r24, 0x01	; 1
     1d2:	0e c0       	rjmp	.+28     	; 0x1f0 <fat_getFreeRowsOfCluster+0x8c>
				}
			}
			else {								// kein freier eintrag, wenn bis hier nicht schon genuegend, dann sinds zuwenige
				match = 0;
     1d4:	3d 2f       	mov	r19, r29
			}
		}while( (row+=32) < 512 );				// geht durch reihen/zeilen eines sektors
     1d6:	80 96       	adiw	r24, 0x20	; 32
     1d8:	81 15       	cp	r24, r1
     1da:	22 e0       	ldi	r18, 0x02	; 2
     1dc:	92 07       	cpc	r25, r18
     1de:	09 f7       	brne	.-62     	; 0x1a2 <fat_getFreeRowsOfCluster+0x3e>
     1e0:	30 93 16 01 	sts	0x0116, r19
	}while( ++sectors < fat.secPerClust );		// geht die sektoren des clusters durch (moeglicherweise auch nur 1. sektor).
     1e4:	b3 94       	inc	r11
     1e6:	f8 01       	movw	r30, r16
     1e8:	85 89       	ldd	r24, Z+21	; 0x15
     1ea:	b8 16       	cp	r11, r24
     1ec:	78 f2       	brcs	.-98     	; 0x18c <fat_getFreeRowsOfCluster+0x28>

	return FALSE;
     1ee:	80 e0       	ldi	r24, 0x00	; 0
}
     1f0:	df 91       	pop	r29
     1f2:	cf 91       	pop	r28
     1f4:	1f 91       	pop	r17
     1f6:	0f 91       	pop	r16
     1f8:	ff 90       	pop	r15
     1fa:	ef 90       	pop	r14
     1fc:	df 90       	pop	r13
     1fe:	cf 90       	pop	r12
     200:	bf 90       	pop	r11
     202:	af 90       	pop	r10
     204:	9f 90       	pop	r9
     206:	08 95       	ret

00000208 <fat_clustToSec>:


// ***************************************************************************************************************
// umrechnung cluster auf 1.sektor des clusters (m√∂glicherweise mehrere sektoren/cluster) !
// ***************************************************************************************************************
uint32_t fat_clustToSec(uint32_t clust){
     208:	0f 93       	push	r16
     20a:	1f 93       	push	r17

	return fat.dataDirSec + ( (clust - 2) * fat.secPerClust );		// errechnet den 1. sektor der sektoren des clusters
     20c:	9b 01       	movw	r18, r22
     20e:	ac 01       	movw	r20, r24
     210:	22 50       	subi	r18, 0x02	; 2
     212:	31 09       	sbc	r19, r1
     214:	41 09       	sbc	r20, r1
     216:	51 09       	sbc	r21, r1
     218:	e8 e1       	ldi	r30, 0x18	; 24
     21a:	f1 e0       	ldi	r31, 0x01	; 1
     21c:	a5 89       	ldd	r26, Z+21	; 0x15
     21e:	b0 e0       	ldi	r27, 0x00	; 0
     220:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <__muluhisi3>
     224:	05 85       	ldd	r16, Z+13	; 0x0d
     226:	16 85       	ldd	r17, Z+14	; 0x0e
     228:	27 85       	ldd	r18, Z+15	; 0x0f
     22a:	30 89       	ldd	r19, Z+16	; 0x10
     22c:	60 0f       	add	r22, r16
     22e:	71 1f       	adc	r23, r17
     230:	82 1f       	adc	r24, r18
     232:	93 1f       	adc	r25, r19
}
     234:	1f 91       	pop	r17
     236:	0f 91       	pop	r16
     238:	08 95       	ret

0000023a <fat_secToClust>:


// ***************************************************************************************************************
// umrechnung sektor auf cluster (nicht die position im cluster selber!!)
// ***************************************************************************************************************
uint32_t fat_secToClust(uint32_t sec){
     23a:	0f 93       	push	r16
     23c:	1f 93       	push	r17

  return ( (sec - fat.dataDirSec) / fat.secPerClust ) + 2;			// umkerhrfunktion von fat_clustToSec
     23e:	e8 e1       	ldi	r30, 0x18	; 24
     240:	f1 e0       	ldi	r31, 0x01	; 1
     242:	05 85       	ldd	r16, Z+13	; 0x0d
     244:	16 85       	ldd	r17, Z+14	; 0x0e
     246:	27 85       	ldd	r18, Z+15	; 0x0f
     248:	30 89       	ldd	r19, Z+16	; 0x10
     24a:	60 1b       	sub	r22, r16
     24c:	71 0b       	sbc	r23, r17
     24e:	82 0b       	sbc	r24, r18
     250:	93 0b       	sbc	r25, r19
     252:	25 89       	ldd	r18, Z+21	; 0x15
     254:	30 e0       	ldi	r19, 0x00	; 0
     256:	40 e0       	ldi	r20, 0x00	; 0
     258:	50 e0       	ldi	r21, 0x00	; 0
     25a:	0e 94 c6 09 	call	0x138c	; 0x138c <__udivmodsi4>
     25e:	ca 01       	movw	r24, r20
     260:	b9 01       	movw	r22, r18
     262:	6e 5f       	subi	r22, 0xFE	; 254
     264:	7f 4f       	sbci	r23, 0xFF	; 255
     266:	8f 4f       	sbci	r24, 0xFF	; 255
     268:	9f 4f       	sbci	r25, 0xFF	; 255
}
     26a:	1f 91       	pop	r17
     26c:	0f 91       	pop	r16
     26e:	08 95       	ret

00000270 <fat_loadRowOfSector>:

//***************************************************************************************************************
// laed die reihe:row des gepufferten sektors auf das struct:file. dort stehen dann
// alle wichgigen daten wie: 1.cluster,l√§nge bei dateien, name des eintrags, reihen nummer (im sektor), attribut use...
//***************************************************************************************************************
void fat_loadRowOfSector(uint16_t row){
     270:	0f 93       	push	r16
     272:	1f 93       	push	r17

		file.firstCluster=*(uint16_t*)vsector;	// high word von first.cluster (20,2)
		file.firstCluster=file.firstCluster<<16;
		
		vsector=&fat.sector[row+26];
		file.firstCluster|=*(uint16_t*)vsector;	// low word von first.cluster (26,2)
     274:	ea e3       	ldi	r30, 0x3A	; 58
     276:	f3 e0       	ldi	r31, 0x03	; 3
	#if (MMC_ENDIANNESS_LITTLE==TRUE)
		void *vsector;									// void-pointer, damit man schoen umbiegen kann :)

		vsector=&fat.sector[row+20];					// row ist byteoffset einer reihe

		file.firstCluster=*(uint16_t*)vsector;	// high word von first.cluster (20,2)
     278:	dc 01       	movw	r26, r24
     27a:	ac 5b       	subi	r26, 0xBC	; 188
     27c:	be 4f       	sbci	r27, 0xFE	; 254
     27e:	4d 91       	ld	r20, X+
     280:	5c 91       	ld	r21, X
     282:	60 e0       	ldi	r22, 0x00	; 0
     284:	70 e0       	ldi	r23, 0x00	; 0
		file.firstCluster=file.firstCluster<<16;
     286:	ba 01       	movw	r22, r20
     288:	55 27       	eor	r21, r21
     28a:	44 27       	eor	r20, r20
		
		vsector=&fat.sector[row+26];
		file.firstCluster|=*(uint16_t*)vsector;	// low word von first.cluster (26,2)
     28c:	dc 01       	movw	r26, r24
     28e:	a6 5b       	subi	r26, 0xB6	; 182
     290:	be 4f       	sbci	r27, 0xFE	; 254
     292:	0d 91       	ld	r16, X+
     294:	1c 91       	ld	r17, X
     296:	20 e0       	ldi	r18, 0x00	; 0
     298:	30 e0       	ldi	r19, 0x00	; 0
     29a:	40 2b       	or	r20, r16
     29c:	51 2b       	or	r21, r17
     29e:	62 2b       	or	r22, r18
     2a0:	73 2b       	or	r23, r19
     2a2:	41 8b       	std	Z+17, r20	; 0x11
     2a4:	52 8b       	std	Z+18, r21	; 0x12
     2a6:	63 8b       	std	Z+19, r22	; 0x13
     2a8:	74 8b       	std	Z+20, r23	; 0x14
		
		vsector=&fat.sector[row+28];
		file.length=*(uint32_t*)vsector;		// 4 byte von file.length (28,4)
     2aa:	dc 01       	movw	r26, r24
     2ac:	a4 5b       	subi	r26, 0xB4	; 180
     2ae:	be 4f       	sbci	r27, 0xFE	; 254
     2b0:	8d 91       	ld	r24, X+
     2b2:	9d 91       	ld	r25, X+
     2b4:	0d 90       	ld	r0, X+
     2b6:	bc 91       	ld	r27, X
     2b8:	a0 2d       	mov	r26, r0
     2ba:	82 87       	std	Z+10, r24	; 0x0a
     2bc:	93 87       	std	Z+11, r25	; 0x0b
     2be:	a4 87       	std	Z+12, r26	; 0x0c
     2c0:	b5 87       	std	Z+13, r27	; 0x0d
		psector+=7;
		file.firstCluster = file.firstCluster | *psector--;	// 27
		file.firstCluster <<= 8;
		file.firstCluster = file.firstCluster | *psector;	// 26
	#endif
}
     2c2:	1f 91       	pop	r17
     2c4:	0f 91       	pop	r16
     2c6:	08 95       	ret

000002c8 <fat_loadFileDataFromCluster>:
//***************************************************************************************************************
// geht reihen weise durch sektoren des clusters mit dem startsektor:sec, und sucht nach der datei mit dem
// namen:name. es werden die einzelnen sektoren nachgeladen auf puffer:sector vor dem bearbeiten.
// wird die datei in dem cluster gefunden ist return 0 , sonst return1.
//***************************************************************************************************************
static uint8_t fat_loadFileDataFromCluster(uint32_t sec ,  uint8_t name []){
     2c8:	2f 92       	push	r2
     2ca:	3f 92       	push	r3
     2cc:	4f 92       	push	r4
     2ce:	5f 92       	push	r5
     2d0:	6f 92       	push	r6
     2d2:	7f 92       	push	r7
     2d4:	8f 92       	push	r8
     2d6:	9f 92       	push	r9
     2d8:	af 92       	push	r10
     2da:	bf 92       	push	r11
     2dc:	cf 92       	push	r12
     2de:	df 92       	push	r13
     2e0:	ef 92       	push	r14
     2e2:	ff 92       	push	r15
     2e4:	0f 93       	push	r16
     2e6:	1f 93       	push	r17
     2e8:	cf 93       	push	r28
     2ea:	df 93       	push	r29
     2ec:	2b 01       	movw	r4, r22
     2ee:	3c 01       	movw	r6, r24
     2f0:	5a 01       	movw	r10, r20
  uint16_t rows;		// um durch zeilen nummern zu zaehlen
  uint8_t sectors;		// um durch sektoren zu zaehlen
  uint8_t i;			// zaehler fuer datei namen vergleich
  uint8_t j;

  sectors = 0;
     2f2:	31 2c       	mov	r3, r1
  do{										// sektoren des clusters pruefen
	rows = 0;								// neuer sektor, dann reihen von 0 an.
     2f4:	21 2c       	mov	r2, r1
     2f6:	81 2c       	mov	r8, r1
	mmc_read_sector( sec+sectors , fat.sector );	// laed den sektor sec auf den puffer fat.sector
     2f8:	40 e3       	ldi	r20, 0x30	; 48
     2fa:	51 e0       	ldi	r21, 0x01	; 1
     2fc:	73 01       	movw	r14, r6
     2fe:	62 01       	movw	r12, r4
     300:	c3 0c       	add	r12, r3
     302:	d1 1c       	adc	r13, r1
     304:	e1 1c       	adc	r14, r1
     306:	f1 1c       	adc	r15, r1
     308:	c7 01       	movw	r24, r14
     30a:	b6 01       	movw	r22, r12
     30c:	0e 94 8c 09 	call	0x1318	; 0x1318 <mmc_read_sector>
	file.currentSectorNr = sec + sectors;	// setzen des aktuellen sektors
     310:	c0 92 40 03 	sts	0x0340, r12
     314:	d0 92 41 03 	sts	0x0341, r13
     318:	e0 92 42 03 	sts	0x0342, r14
     31c:	f0 92 43 03 	sts	0x0343, r15
     320:	0b e3       	ldi	r16, 0x3B	; 59
     322:	11 e0       	ldi	r17, 0x01	; 1
  uint8_t i;			// zaehler fuer datei namen vergleich
  uint8_t j;

  sectors = 0;
  do{										// sektoren des clusters pruefen
	rows = 0;								// neuer sektor, dann reihen von 0 an.
     324:	e2 2c       	mov	r14, r2
     326:	f1 2c       	mov	r15, r1
     328:	f8 01       	movw	r30, r16
     32a:	3b 97       	sbiw	r30, 0x0b	; 11
	mmc_read_sector( sec+sectors , fat.sector );	// laed den sektor sec auf den puffer fat.sector
	file.currentSectorNr = sec + sectors;	// setzen des aktuellen sektors
	do{										// reihen des sektors pruefen

		if( fat.sector[rows] == 0 ){		// wenn man auf erste 0 stoesst muesste der rest auch leer sein!
     32c:	80 81       	ld	r24, Z
     32e:	88 23       	and	r24, r24
     330:	09 f4       	brne	.+2      	; 0x334 <fat_loadFileDataFromCluster+0x6c>
     332:	59 c0       	rjmp	.+178    	; 0x3e6 <fat_loadFileDataFromCluster+0x11e>
			return FALSE;
			}
		// normaler eintrag, ordner oder datei.
		if( (fat.sector[rows+11] == 0x10 || fat.sector[rows+11] == 0x20) && fat.sector[rows] != 0xE5 ){
     334:	f8 01       	movw	r30, r16
     336:	90 81       	ld	r25, Z
     338:	90 31       	cpi	r25, 0x10	; 16
     33a:	19 f0       	breq	.+6      	; 0x342 <fat_loadFileDataFromCluster+0x7a>
     33c:	90 32       	cpi	r25, 0x20	; 32
     33e:	09 f0       	breq	.+2      	; 0x342 <fat_loadFileDataFromCluster+0x7a>
     340:	41 c0       	rjmp	.+130    	; 0x3c4 <fat_loadFileDataFromCluster+0xfc>
     342:	85 3e       	cpi	r24, 0xE5	; 229
     344:	09 f4       	brne	.+2      	; 0x348 <fat_loadFileDataFromCluster+0x80>
     346:	3e c0       	rjmp	.+124    	; 0x3c4 <fat_loadFileDataFromCluster+0xfc>
     348:	98 2c       	mov	r9, r8
     34a:	c8 2d       	mov	r28, r8
			// vergleich von sfn dateinamen
			i = 0; j = 0;
			do{					
				if( fat.sector[rows+i] == 0x20 ){ 		// ueberspringen von leerzeichen auf der karte
     34c:	c7 01       	movw	r24, r14
     34e:	88 5e       	subi	r24, 0xE8	; 232
     350:	9e 4f       	sbci	r25, 0xFE	; 254
     352:	6c 01       	movw	r12, r24
     354:	f6 01       	movw	r30, r12
     356:	ec 0f       	add	r30, r28
     358:	f1 1d       	adc	r31, r1
     35a:	d0 8d       	ldd	r29, Z+24	; 0x18
     35c:	d0 32       	cpi	r29, 0x20	; 32
     35e:	11 f4       	brne	.+4      	; 0x364 <fat_loadFileDataFromCluster+0x9c>
					i++; continue;
     360:	cf 5f       	subi	r28, 0xFF	; 255
     362:	14 c0       	rjmp	.+40     	; 0x38c <fat_loadFileDataFromCluster+0xc4>
				}
				if( name[j] == '.' ){ 					// ueberspringen von punkt im dateinamen
     364:	f5 01       	movw	r30, r10
     366:	e9 0d       	add	r30, r9
     368:	f1 1d       	adc	r31, r1
     36a:	80 81       	ld	r24, Z
     36c:	8e 32       	cpi	r24, 0x2E	; 46
     36e:	21 f4       	brne	.+8      	; 0x378 <fat_loadFileDataFromCluster+0xb0>
					if( i <= 7) break;
     370:	c8 30       	cpi	r28, 0x08	; 8
     372:	70 f0       	brcs	.+28     	; 0x390 <fat_loadFileDataFromCluster+0xc8>
					j++; continue;
     374:	93 94       	inc	r9
     376:	0a c0       	rjmp	.+20     	; 0x38c <fat_loadFileDataFromCluster+0xc4>
				}
				if( fat.sector[rows+i] != toupper(name[j]) )	break;
     378:	90 e0       	ldi	r25, 0x00	; 0
     37a:	0e 94 01 0a 	call	0x1402	; 0x1402 <toupper>
     37e:	2d 2f       	mov	r18, r29
     380:	30 e0       	ldi	r19, 0x00	; 0
     382:	28 17       	cp	r18, r24
     384:	39 07       	cpc	r19, r25
     386:	21 f4       	brne	.+8      	; 0x390 <fat_loadFileDataFromCluster+0xc8>
				j++;i++;
     388:	93 94       	inc	r9
     38a:	cf 5f       	subi	r28, 0xFF	; 255
			}while(i<11);
     38c:	cb 30       	cpi	r28, 0x0B	; 11
     38e:	10 f3       	brcs	.-60     	; 0x354 <fat_loadFileDataFromCluster+0x8c>
			// datei gefunden
			if( i == 11 ){
     390:	cb 30       	cpi	r28, 0x0B	; 11
     392:	c1 f4       	brne	.+48     	; 0x3c4 <fat_loadFileDataFromCluster+0xfc>
				file.row = rows>>5;								// zeile sichern.
     394:	ca e3       	ldi	r28, 0x3A	; 58
     396:	d3 e0       	ldi	r29, 0x03	; 3
     398:	c7 01       	movw	r24, r14
     39a:	96 95       	lsr	r25
     39c:	87 95       	ror	r24
     39e:	92 95       	swap	r25
     3a0:	82 95       	swap	r24
     3a2:	8f 70       	andi	r24, 0x0F	; 15
     3a4:	89 27       	eor	r24, r25
     3a6:	9f 70       	andi	r25, 0x0F	; 15
     3a8:	89 27       	eor	r24, r25
     3aa:	88 8b       	std	Y+16, r24	; 0x10
				fat_loadRowOfSector(rows);						// datei infos auf struct laden
     3ac:	c7 01       	movw	r24, r14
     3ae:	60 df       	rcall	.-320    	; 0x270 <fat_loadRowOfSector>
				file.entrySector = file.currentSectorNr;		   	// sektor in dem die datei infos stehen sichern
     3b0:	8e 81       	ldd	r24, Y+6	; 0x06
     3b2:	9f 81       	ldd	r25, Y+7	; 0x07
     3b4:	a8 85       	ldd	r26, Y+8	; 0x08
     3b6:	b9 85       	ldd	r27, Y+9	; 0x09
     3b8:	8d 8b       	std	Y+21, r24	; 0x15
     3ba:	9e 8b       	std	Y+22, r25	; 0x16
     3bc:	af 8b       	std	Y+23, r26	; 0x17
     3be:	b8 8f       	std	Y+24, r27	; 0x18
		  		return TRUE;
     3c0:	81 e0       	ldi	r24, 0x01	; 1
     3c2:	11 c0       	rjmp	.+34     	; 0x3e6 <fat_loadFileDataFromCluster+0x11e>
		  	}																			// ist lfn eintrag, jetzt pruefen...
		}


		}while( (rows+=32) < 512 );			// springt immer auf zeilenanfang eines 32 byte eintrags im sektor
     3c4:	90 e2       	ldi	r25, 0x20	; 32
     3c6:	e9 0e       	add	r14, r25
     3c8:	f1 1c       	adc	r15, r1
     3ca:	00 5e       	subi	r16, 0xE0	; 224
     3cc:	1f 4f       	sbci	r17, 0xFF	; 255
     3ce:	e1 14       	cp	r14, r1
     3d0:	e2 e0       	ldi	r30, 0x02	; 2
     3d2:	fe 06       	cpc	r15, r30
     3d4:	09 f0       	breq	.+2      	; 0x3d8 <fat_loadFileDataFromCluster+0x110>
     3d6:	a8 cf       	rjmp	.-176    	; 0x328 <fat_loadFileDataFromCluster+0x60>
	}while(++sectors<fat.secPerClust);		// geht durch sektoren des clusters
     3d8:	33 94       	inc	r3
     3da:	80 91 2d 01 	lds	r24, 0x012D
     3de:	38 16       	cp	r3, r24
     3e0:	08 f4       	brcc	.+2      	; 0x3e4 <fat_loadFileDataFromCluster+0x11c>
     3e2:	8a cf       	rjmp	.-236    	; 0x2f8 <fat_loadFileDataFromCluster+0x30>

	return FALSE;							// fehler (datei nicht gefunden, oder fehler beim lesen)
     3e4:	80 e0       	ldi	r24, 0x00	; 0
}
     3e6:	df 91       	pop	r29
     3e8:	cf 91       	pop	r28
     3ea:	1f 91       	pop	r17
     3ec:	0f 91       	pop	r16
     3ee:	ff 90       	pop	r15
     3f0:	ef 90       	pop	r14
     3f2:	df 90       	pop	r13
     3f4:	cf 90       	pop	r12
     3f6:	bf 90       	pop	r11
     3f8:	af 90       	pop	r10
     3fa:	9f 90       	pop	r9
     3fc:	8f 90       	pop	r8
     3fe:	7f 90       	pop	r7
     400:	6f 90       	pop	r6
     402:	5f 90       	pop	r5
     404:	4f 90       	pop	r4
     406:	3f 90       	pop	r3
     408:	2f 90       	pop	r2
     40a:	08 95       	ret

0000040c <fat_makeSfnDataEntry>:
//***************************************************************************************************************
// erstellt 32 byte eintrag einer datei, oder verzeichnisses im puffer:sector.
// erstellt eintrag in reihe:row, mit namen:name usw... !!
// muss noch auf die karte geschrieben werden ! nicht optimiert auf geschwindigkeit.
//***************************************************************************************************************
void fat_makeSfnDataEntry(uint8_t name [],uint8_t attrib,uint32_t cluster,uint32_t length){
     40c:	2f 92       	push	r2
     40e:	3f 92       	push	r3
     410:	5f 92       	push	r5
     412:	6f 92       	push	r6
     414:	7f 92       	push	r7
     416:	8f 92       	push	r8
     418:	9f 92       	push	r9
     41a:	af 92       	push	r10
     41c:	bf 92       	push	r11
     41e:	cf 92       	push	r12
     420:	df 92       	push	r13
     422:	ef 92       	push	r14
     424:	ff 92       	push	r15
     426:	0f 93       	push	r16
     428:	1f 93       	push	r17
     42a:	cf 93       	push	r28
     42c:	df 93       	push	r29
     42e:	00 d0       	rcall	.+0      	; 0x430 <fat_makeSfnDataEntry+0x24>
     430:	00 d0       	rcall	.+0      	; 0x432 <fat_makeSfnDataEntry+0x26>
     432:	cd b7       	in	r28, 0x3d	; 61
     434:	de b7       	in	r29, 0x3e	; 62
     436:	9c 83       	std	Y+4, r25	; 0x04
     438:	8b 83       	std	Y+3, r24	; 0x03
     43a:	56 2e       	mov	r5, r22
     43c:	49 01       	movw	r8, r18
     43e:	5a 01       	movw	r10, r20
     440:	67 01       	movw	r12, r14
     442:	78 01       	movw	r14, r16

	uint8_t i,j; 		// byte zaehler in reihe von sektor (32byte eintrag)
	void *vsector; 				// void zeiger auf sektor, um beliebig casten zu k√∂nnen
	uint16_t row;		// reihe in dem sektor

	fat.bufferDirty = TRUE; 	// puffer beschrieben, also neue daten darin(vor lesen muss geschrieben werden)
     444:	81 e0       	ldi	r24, 0x01	; 1
     446:	80 93 1c 01 	sts	0x011C, r24
	row = file.row;
     44a:	00 91 4a 03 	lds	r16, 0x034A
	row = row<<5;				// multipliziert mit 32 um immer auf zeilen anfang zu kommen (zeile 0=0,zeile 1=32,zeile 2=62 ... zeile 15=480)
     44e:	80 e2       	ldi	r24, 0x20	; 32
     450:	08 9f       	mul	r16, r24
     452:	80 01       	movw	r16, r0
     454:	11 24       	eor	r1, r1
	vsector =& fat.sector[row];	// anfangs adresse holen ab der stelle auf sector geschrieben werden soll
     456:	d8 01       	movw	r26, r16
     458:	a0 5d       	subi	r26, 0xD0	; 208
     45a:	be 4f       	sbci	r27, 0xFE	; 254
     45c:	ba 83       	std	Y+2, r27	; 0x02
     45e:	a9 83       	std	Y+1, r26	; 0x01
     460:	fd 01       	movw	r30, r26
     462:	cd 01       	movw	r24, r26
     464:	45 96       	adiw	r24, 0x15	; 21

	#if (MMC_TIME_STAMP==FALSE)
		// alle felder nullen...
		i = 20;
		do{
			*(uint8_t*)vsector++ = 0x00;
     466:	11 92       	st	Z+, r1
		}while( i-- );
     468:	e8 17       	cp	r30, r24
     46a:	f9 07       	cpc	r31, r25
     46c:	e1 f7       	brne	.-8      	; 0x466 <fat_makeSfnDataEntry+0x5a>
     46e:	69 80       	ldd	r6, Y+1	; 0x01
     470:	7a 80       	ldd	r7, Y+2	; 0x02
     472:	31 2c       	mov	r3, r1
     474:	10 e0       	ldi	r17, 0x00	; 0

	// namen schreiben (0,10)
	i=0; j=0;
	do{

		*(uint8_t*)vsector = 0x20;
     476:	68 94       	set
     478:	22 24       	eor	r2, r2
     47a:	25 f8       	bld	r2, 5
     47c:	f3 01       	movw	r30, r6
     47e:	20 82       	st	Z, r2

		if( i < 8 && name[j] != '.'){
     480:	18 30       	cpi	r17, 0x08	; 8
     482:	98 f5       	brcc	.+102    	; 0x4ea <fat_makeSfnDataEntry+0xde>
     484:	eb 81       	ldd	r30, Y+3	; 0x03
     486:	fc 81       	ldd	r31, Y+4	; 0x04
     488:	e3 0d       	add	r30, r3
     48a:	f1 1d       	adc	r31, r1
     48c:	80 81       	ld	r24, Z
     48e:	8e 32       	cpi	r24, 0x2E	; 46
     490:	79 f1       	breq	.+94     	; 0x4f0 <fat_makeSfnDataEntry+0xe4>
			*(uint8_t*)vsector = toupper(name[j]);
     492:	90 e0       	ldi	r25, 0x00	; 0
     494:	b6 d7       	rcall	.+3948   	; 0x1402 <toupper>
     496:	d3 01       	movw	r26, r6
     498:	8c 93       	st	X, r24
			j++;
     49a:	33 94       	inc	r3
     49c:	29 c0       	rjmp	.+82     	; 0x4f0 <fat_makeSfnDataEntry+0xe4>
		}

		j = ( i==8 ) ? j+1 : j;
     49e:	33 94       	inc	r3

		if( i >= 8 && name[j] != '\0'){
     4a0:	eb 81       	ldd	r30, Y+3	; 0x03
     4a2:	fc 81       	ldd	r31, Y+4	; 0x04
     4a4:	e3 0d       	add	r30, r3
     4a6:	f1 1d       	adc	r31, r1
     4a8:	80 81       	ld	r24, Z
     4aa:	88 23       	and	r24, r24
     4ac:	29 f0       	breq	.+10     	; 0x4b8 <fat_makeSfnDataEntry+0xac>
			*(uint8_t*)vsector = toupper(name[j]);
     4ae:	90 e0       	ldi	r25, 0x00	; 0
     4b0:	a8 d7       	rcall	.+3920   	; 0x1402 <toupper>
     4b2:	f3 01       	movw	r30, r6
     4b4:	80 83       	st	Z, r24
			j++;
     4b6:	33 94       	inc	r3
		}
		vsector++;
     4b8:	ff ef       	ldi	r31, 0xFF	; 255
     4ba:	6f 1a       	sub	r6, r31
     4bc:	7f 0a       	sbc	r7, r31
	}while( ++i < 11);
     4be:	1f 5f       	subi	r17, 0xFF	; 255
     4c0:	1b 30       	cpi	r17, 0x0B	; 11
     4c2:	e1 f6       	brne	.-72     	; 0x47c <fat_makeSfnDataEntry+0x70>

	// attrib schreiben (11,1)
	*(uint8_t*)vsector = attrib;
     4c4:	a9 81       	ldd	r26, Y+1	; 0x01
     4c6:	ba 81       	ldd	r27, Y+2	; 0x02
     4c8:	1b 96       	adiw	r26, 0x0b	; 11
     4ca:	5c 92       	st	X, r5
     4cc:	1b 97       	sbiw	r26, 0x0b	; 11
		*(uint32_t*)vsector=length;
	#else
		vsector+=8;

		// low word	von cluster (20,2)
		*(uint16_t*)vsector=(cluster&0xffff0000)>>16;
     4ce:	55 96       	adiw	r26, 0x15	; 21
     4d0:	bc 92       	st	X, r11
     4d2:	ae 92       	st	-X, r10
     4d4:	54 97       	sbiw	r26, 0x14	; 20
		vsector+=6;

		// high word von cluster (26,2)
		*(uint16_t*)vsector=(cluster&0x0000ffff);
     4d6:	5b 96       	adiw	r26, 0x1b	; 27
     4d8:	9c 92       	st	X, r9
     4da:	8e 92       	st	-X, r8
     4dc:	5a 97       	sbiw	r26, 0x1a	; 26
		vsector+=2;

		// laenge (28,4)
		*(uint32_t*)vsector=length;
     4de:	fd 01       	movw	r30, r26
     4e0:	c4 8e       	std	Z+28, r12	; 0x1c
     4e2:	d5 8e       	std	Z+29, r13	; 0x1d
     4e4:	e6 8e       	std	Z+30, r14	; 0x1e
     4e6:	f7 8e       	std	Z+31, r15	; 0x1f
     4e8:	06 c0       	rjmp	.+12     	; 0x4f6 <fat_makeSfnDataEntry+0xea>
		if( i < 8 && name[j] != '.'){
			*(uint8_t*)vsector = toupper(name[j]);
			j++;
		}

		j = ( i==8 ) ? j+1 : j;
     4ea:	18 30       	cpi	r17, 0x08	; 8
     4ec:	c9 f6       	brne	.-78     	; 0x4a0 <fat_makeSfnDataEntry+0x94>
     4ee:	d7 cf       	rjmp	.-82     	; 0x49e <fat_makeSfnDataEntry+0x92>
     4f0:	18 30       	cpi	r17, 0x08	; 8
     4f2:	11 f7       	brne	.-60     	; 0x4b8 <fat_makeSfnDataEntry+0xac>
     4f4:	d4 cf       	rjmp	.-88     	; 0x49e <fat_makeSfnDataEntry+0x92>
		vsector+=2;

		// laenge (28,4)
		*(uint32_t*)vsector=length;
	#endif
}
     4f6:	0f 90       	pop	r0
     4f8:	0f 90       	pop	r0
     4fa:	0f 90       	pop	r0
     4fc:	0f 90       	pop	r0
     4fe:	df 91       	pop	r29
     500:	cf 91       	pop	r28
     502:	1f 91       	pop	r17
     504:	0f 91       	pop	r16
     506:	ff 90       	pop	r15
     508:	ef 90       	pop	r14
     50a:	df 90       	pop	r13
     50c:	cf 90       	pop	r12
     50e:	bf 90       	pop	r11
     510:	af 90       	pop	r10
     512:	9f 90       	pop	r9
     514:	8f 90       	pop	r8
     516:	7f 90       	pop	r7
     518:	6f 90       	pop	r6
     51a:	5f 90       	pop	r5
     51c:	3f 90       	pop	r3
     51e:	2f 90       	pop	r2
     520:	08 95       	ret

00000522 <fat_getNextCluster>:
//***************************************************************************************************************
// sucht folge Cluster aus der fat !
// erster daten cluster = 2, ende einer cluster chain 0xFFFF (fat16) oder 0xFFFFFFF (fat32),
// stelle des clusters in der fat, hat als wert, den n√§chsten cluster. (1:1 gemapt)!
//***************************************************************************************************************
uint32_t fat_getNextCluster(uint32_t oneCluster){
     522:	cf 92       	push	r12
     524:	df 92       	push	r13
     526:	ef 92       	push	r14
     528:	ff 92       	push	r15
     52a:	0f 93       	push	r16
     52c:	1f 93       	push	r17
	#else
		uint8_t *bytesOfSec;
	#endif

	// FAT 16
	if(fat.fatType==16){
     52e:	20 91 2e 01 	lds	r18, 0x012E
     532:	20 31       	cpi	r18, 0x10	; 16
     534:	81 f5       	brne	.+96     	; 0x596 <fat_getNextCluster+0x74>
		oneCluster = oneCluster << 1;
     536:	6b 01       	movw	r12, r22
     538:	7c 01       	movw	r14, r24
     53a:	cc 0c       	add	r12, r12
     53c:	dd 1c       	adc	r13, r13
     53e:	ee 1c       	adc	r14, r14
     540:	ff 1c       	adc	r15, r15
		sector = fat.fatSec + (oneCluster >> 9);
     542:	b7 01       	movw	r22, r14
     544:	a6 01       	movw	r20, r12
     546:	03 2e       	mov	r0, r19
     548:	39 e0       	ldi	r19, 0x09	; 9
     54a:	76 95       	lsr	r23
     54c:	67 95       	ror	r22
     54e:	57 95       	ror	r21
     550:	47 95       	ror	r20
     552:	3a 95       	dec	r19
     554:	d1 f7       	brne	.-12     	; 0x54a <fat_getNextCluster+0x28>
     556:	30 2d       	mov	r19, r0
     558:	80 91 29 01 	lds	r24, 0x0129
     55c:	90 91 2a 01 	lds	r25, 0x012A
     560:	a0 91 2b 01 	lds	r26, 0x012B
     564:	b0 91 2c 01 	lds	r27, 0x012C
     568:	8a 01       	movw	r16, r20
     56a:	9b 01       	movw	r18, r22
     56c:	08 0f       	add	r16, r24
     56e:	19 1f       	adc	r17, r25
     570:	2a 1f       	adc	r18, r26
     572:	3b 1f       	adc	r19, r27
     574:	c9 01       	movw	r24, r18
     576:	b8 01       	movw	r22, r16
		fat_loadSector(sector);
     578:	b0 dd       	rcall	.-1184   	; 0xda <fat_loadSector>
		bytesOfSec =& fat.sector[oneCluster % 512];
     57a:	11 e0       	ldi	r17, 0x01	; 1
     57c:	d1 22       	and	r13, r17
     57e:	ee 24       	eor	r14, r14
     580:	ff 24       	eor	r15, r15
     582:	c6 01       	movw	r24, r12
     584:	48 96       	adiw	r24, 0x18	; 24

		#if (MMC_ENDIANNESS_LITTLE==TRUE)
			return *(uint16_t*)bytesOfSec;
     586:	fc 01       	movw	r30, r24
     588:	e8 5e       	subi	r30, 0xE8	; 232
     58a:	fe 4f       	sbci	r31, 0xFE	; 254
     58c:	60 81       	ld	r22, Z
     58e:	71 81       	ldd	r23, Z+1	; 0x01
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	33 c0       	rjmp	.+102    	; 0x5fc <fat_getNextCluster+0xda>
			return sector;
		#endif
	}
	// FAT 32
	else{
		oneCluster = oneCluster << 2;
     596:	6b 01       	movw	r12, r22
     598:	7c 01       	movw	r14, r24
     59a:	cc 0c       	add	r12, r12
     59c:	dd 1c       	adc	r13, r13
     59e:	ee 1c       	adc	r14, r14
     5a0:	ff 1c       	adc	r15, r15
     5a2:	cc 0c       	add	r12, r12
     5a4:	dd 1c       	adc	r13, r13
     5a6:	ee 1c       	adc	r14, r14
     5a8:	ff 1c       	adc	r15, r15
		sector = fat.fatSec + (oneCluster >> 9);
     5aa:	b7 01       	movw	r22, r14
     5ac:	a6 01       	movw	r20, r12
     5ae:	03 2e       	mov	r0, r19
     5b0:	39 e0       	ldi	r19, 0x09	; 9
     5b2:	76 95       	lsr	r23
     5b4:	67 95       	ror	r22
     5b6:	57 95       	ror	r21
     5b8:	47 95       	ror	r20
     5ba:	3a 95       	dec	r19
     5bc:	d1 f7       	brne	.-12     	; 0x5b2 <fat_getNextCluster+0x90>
     5be:	30 2d       	mov	r19, r0
     5c0:	80 91 29 01 	lds	r24, 0x0129
     5c4:	90 91 2a 01 	lds	r25, 0x012A
     5c8:	a0 91 2b 01 	lds	r26, 0x012B
     5cc:	b0 91 2c 01 	lds	r27, 0x012C
     5d0:	8a 01       	movw	r16, r20
     5d2:	9b 01       	movw	r18, r22
     5d4:	08 0f       	add	r16, r24
     5d6:	19 1f       	adc	r17, r25
     5d8:	2a 1f       	adc	r18, r26
     5da:	3b 1f       	adc	r19, r27
     5dc:	c9 01       	movw	r24, r18
     5de:	b8 01       	movw	r22, r16
		fat_loadSector(sector);
     5e0:	7c dd       	rcall	.-1288   	; 0xda <fat_loadSector>
		bytesOfSec =& fat.sector[oneCluster % 512];
     5e2:	11 e0       	ldi	r17, 0x01	; 1
     5e4:	d1 22       	and	r13, r17
     5e6:	ee 24       	eor	r14, r14
     5e8:	ff 24       	eor	r15, r15
     5ea:	c6 01       	movw	r24, r12
     5ec:	48 96       	adiw	r24, 0x18	; 24

		#if (MMC_ENDIANNESS_LITTLE==TRUE)
			return *(uint32_t*)bytesOfSec;
     5ee:	fc 01       	movw	r30, r24
     5f0:	e8 5e       	subi	r30, 0xE8	; 232
     5f2:	fe 4f       	sbci	r31, 0xFE	; 254
     5f4:	60 81       	ld	r22, Z
     5f6:	71 81       	ldd	r23, Z+1	; 0x01
     5f8:	82 81       	ldd	r24, Z+2	; 0x02
     5fa:	93 81       	ldd	r25, Z+3	; 0x03
			sector |= *bytesOfSec;
			return sector;
		#endif
	}

}
     5fc:	1f 91       	pop	r17
     5fe:	0f 91       	pop	r16
     600:	ff 90       	pop	r15
     602:	ef 90       	pop	r14
     604:	df 90       	pop	r13
     606:	cf 90       	pop	r12
     608:	08 95       	ret

0000060a <fat_loadFileDataFromDir>:
//***************************************************************************************************************
// wenn dir == 0 dann wird das root direktory durchsucht, wenn nicht wird der ordner cluster-chain gefolgt, um
// die datei zu finden. es wird das komplette directory in dem man sich befindet durchsucht.
// bei fat16 wird der rootDir berreich durchsucht, bei fat32 die cluster chain des rootDir.
//***************************************************************************************************************
uint8_t fat_loadFileDataFromDir( uint8_t name []){
     60a:	cf 92       	push	r12
     60c:	df 92       	push	r13
     60e:	ef 92       	push	r14
     610:	ff 92       	push	r15
     612:	0f 93       	push	r16
     614:	1f 93       	push	r17
     616:	cf 93       	push	r28
     618:	df 93       	push	r29
     61a:	8c 01       	movw	r16, r24

	uint8_t	 	sectors;	// variable um durch root-dir sektoren zu zaehlen bei fat16
	uint32_t 	clusters;	// variable um durch cluster des verzeichnisses zu gehen

	// root-dir fat16 nach eintrag durchsuchen. es bleiben noch 3 moeglichkeiten: nicht root-dir fat16, nicht root-dir fat32 und root-dir fat32
	if(fat.dir==0 && fat.fatType==16){
     61c:	c0 90 1d 01 	lds	r12, 0x011D
     620:	d0 90 1e 01 	lds	r13, 0x011E
     624:	e0 90 1f 01 	lds	r14, 0x011F
     628:	f0 90 20 01 	lds	r15, 0x0120
     62c:	c1 14       	cp	r12, r1
     62e:	d1 04       	cpc	r13, r1
     630:	e1 04       	cpc	r14, r1
     632:	f1 04       	cpc	r15, r1
     634:	21 f5       	brne	.+72     	; 0x67e <fat_loadFileDataFromDir+0x74>
     636:	80 91 2e 01 	lds	r24, 0x012E
     63a:	80 31       	cpi	r24, 0x10	; 16
     63c:	c1 f4       	brne	.+48     	; 0x66e <fat_loadFileDataFromDir+0x64>
     63e:	f1 2c       	mov	r15, r1
		sectors = 0;
		do{
			// eintrag gefunden?
			if(TRUE==fat_loadFileDataFromCluster( fat.rootDir+sectors , name)) return TRUE;
     640:	c8 e1       	ldi	r28, 0x18	; 24
     642:	d1 e0       	ldi	r29, 0x01	; 1
     644:	89 85       	ldd	r24, Y+9	; 0x09
     646:	9a 85       	ldd	r25, Y+10	; 0x0a
     648:	ab 85       	ldd	r26, Y+11	; 0x0b
     64a:	bc 85       	ldd	r27, Y+12	; 0x0c
     64c:	bc 01       	movw	r22, r24
     64e:	cd 01       	movw	r24, r26
     650:	6f 0d       	add	r22, r15
     652:	71 1d       	adc	r23, r1
     654:	81 1d       	adc	r24, r1
     656:	91 1d       	adc	r25, r1
     658:	a8 01       	movw	r20, r16
     65a:	36 de       	rcall	.-916    	; 0x2c8 <fat_loadFileDataFromCluster>
     65c:	81 30       	cpi	r24, 0x01	; 1
     65e:	b1 f1       	breq	.+108    	; 0x6cc <fat_loadFileDataFromDir+0xc2>
			sectors += fat.secPerClust;
     660:	8d 89       	ldd	r24, Y+21	; 0x15
     662:	f8 0e       	add	r15, r24
		}while( sectors < (uint8_t)32 );
     664:	8f e1       	ldi	r24, 0x1F	; 31
     666:	8f 15       	cp	r24, r15
     668:	68 f7       	brcc	.-38     	; 0x644 <fat_loadFileDataFromDir+0x3a>
			if(TRUE==fat_loadFileDataFromCluster( fat_clustToSec(clusters) , name)) return TRUE;		 // daten der datei auf struct:file. datei gefunden (umrechnung auf absoluten sektor)
			clusters = fat_getNextCluster(clusters);									// liest naechsten cluster des dir-eintrags (unterverzeichniss groe√üer 16 eintr√§ge)
		}
	}

	return FALSE;																// datei/verzeichniss nicht gefunden
     66a:	80 e0       	ldi	r24, 0x00	; 0
     66c:	2f c0       	rjmp	.+94     	; 0x6cc <fat_loadFileDataFromDir+0xc2>
	}

	// root-dir fat32 oder nicht root-dir fat32/16, nach eintrag durchsuchen
	else {
		// bestimmen ab welchem cluster nach eintrag gesucht werden soll
		clusters = fat.dir==0?fat.rootDir:fat.dir;
     66e:	c0 90 21 01 	lds	r12, 0x0121
     672:	d0 90 22 01 	lds	r13, 0x0122
     676:	e0 90 23 01 	lds	r14, 0x0123
     67a:	f0 90 24 01 	lds	r15, 0x0124

		// durch cluster des verzeichnisses gehen und ueberpruefen ob eintrag vorhanden
		while(!((clusters>=0x0ffffff8&&fat.fatType==32)||(clusters>=0xfff8&&fat.fatType==16))){// prueft ob weitere sektoren zum lesen da sind (fat32||fat16)
     67e:	c8 e1       	ldi	r28, 0x18	; 24
     680:	d1 e0       	ldi	r29, 0x01	; 1
     682:	0c c0       	rjmp	.+24     	; 0x69c <fat_loadFileDataFromDir+0x92>
			if(TRUE==fat_loadFileDataFromCluster( fat_clustToSec(clusters) , name)) return TRUE;		 // daten der datei auf struct:file. datei gefunden (umrechnung auf absoluten sektor)
     684:	c7 01       	movw	r24, r14
     686:	b6 01       	movw	r22, r12
     688:	bf dd       	rcall	.-1154   	; 0x208 <fat_clustToSec>
     68a:	a8 01       	movw	r20, r16
     68c:	1d de       	rcall	.-966    	; 0x2c8 <fat_loadFileDataFromCluster>
     68e:	81 30       	cpi	r24, 0x01	; 1
     690:	e9 f0       	breq	.+58     	; 0x6cc <fat_loadFileDataFromDir+0xc2>
			clusters = fat_getNextCluster(clusters);									// liest naechsten cluster des dir-eintrags (unterverzeichniss groe√üer 16 eintr√§ge)
     692:	c7 01       	movw	r24, r14
     694:	b6 01       	movw	r22, r12
     696:	45 df       	rcall	.-374    	; 0x522 <fat_getNextCluster>
     698:	6b 01       	movw	r12, r22
     69a:	7c 01       	movw	r14, r24
	else {
		// bestimmen ab welchem cluster nach eintrag gesucht werden soll
		clusters = fat.dir==0?fat.rootDir:fat.dir;

		// durch cluster des verzeichnisses gehen und ueberpruefen ob eintrag vorhanden
		while(!((clusters>=0x0ffffff8&&fat.fatType==32)||(clusters>=0xfff8&&fat.fatType==16))){// prueft ob weitere sektoren zum lesen da sind (fat32||fat16)
     69c:	88 ef       	ldi	r24, 0xF8	; 248
     69e:	c8 16       	cp	r12, r24
     6a0:	8f ef       	ldi	r24, 0xFF	; 255
     6a2:	d8 06       	cpc	r13, r24
     6a4:	e8 06       	cpc	r14, r24
     6a6:	8f e0       	ldi	r24, 0x0F	; 15
     6a8:	f8 06       	cpc	r15, r24
     6aa:	18 f0       	brcs	.+6      	; 0x6b2 <fat_loadFileDataFromDir+0xa8>
     6ac:	8e 89       	ldd	r24, Y+22	; 0x16
     6ae:	80 32       	cpi	r24, 0x20	; 32
     6b0:	61 f0       	breq	.+24     	; 0x6ca <fat_loadFileDataFromDir+0xc0>
     6b2:	88 ef       	ldi	r24, 0xF8	; 248
     6b4:	c8 16       	cp	r12, r24
     6b6:	8f ef       	ldi	r24, 0xFF	; 255
     6b8:	d8 06       	cpc	r13, r24
     6ba:	e1 04       	cpc	r14, r1
     6bc:	f1 04       	cpc	r15, r1
     6be:	10 f3       	brcs	.-60     	; 0x684 <fat_loadFileDataFromDir+0x7a>
     6c0:	8e 89       	ldd	r24, Y+22	; 0x16
     6c2:	80 31       	cpi	r24, 0x10	; 16
     6c4:	f9 f6       	brne	.-66     	; 0x684 <fat_loadFileDataFromDir+0x7a>
			if(TRUE==fat_loadFileDataFromCluster( fat_clustToSec(clusters) , name)) return TRUE;		 // daten der datei auf struct:file. datei gefunden (umrechnung auf absoluten sektor)
			clusters = fat_getNextCluster(clusters);									// liest naechsten cluster des dir-eintrags (unterverzeichniss groe√üer 16 eintr√§ge)
		}
	}

	return FALSE;																// datei/verzeichniss nicht gefunden
     6c6:	80 e0       	ldi	r24, 0x00	; 0
     6c8:	01 c0       	rjmp	.+2      	; 0x6cc <fat_loadFileDataFromDir+0xc2>
     6ca:	80 e0       	ldi	r24, 0x00	; 0
}
     6cc:	df 91       	pop	r29
     6ce:	cf 91       	pop	r28
     6d0:	1f 91       	pop	r17
     6d2:	0f 91       	pop	r16
     6d4:	ff 90       	pop	r15
     6d6:	ef 90       	pop	r14
     6d8:	df 90       	pop	r13
     6da:	cf 90       	pop	r12
     6dc:	08 95       	ret

000006de <fat_getFatChainClustersInRow>:
// sucht verkettete cluster einer datei, die in einer reihe liegen. worst case: nur ein cluster.
// sieht in der fat ab dem cluster offsetCluster nach. sucht die anzahl von MAX_CLUSTERS_IN_ROW,
// am stueck,falls m√∂glich. prueft ob der cluster neben offsetCluster dazu geh√∂rt...
// setzt dann fat.endSectors und fat.startSectors. das -1 weil z.b. [95,98] = {95,96,97,98} = 4 sektoren
//***************************************************************************************************************
void fat_getFatChainClustersInRow( uint32_t offsetCluster){
     6de:	2f 92       	push	r2
     6e0:	3f 92       	push	r3
     6e2:	4f 92       	push	r4
     6e4:	5f 92       	push	r5
     6e6:	6f 92       	push	r6
     6e8:	7f 92       	push	r7
     6ea:	8f 92       	push	r8
     6ec:	9f 92       	push	r9
     6ee:	af 92       	push	r10
     6f0:	bf 92       	push	r11
     6f2:	cf 92       	push	r12
     6f4:	df 92       	push	r13
     6f6:	ef 92       	push	r14
     6f8:	ff 92       	push	r15
     6fa:	0f 93       	push	r16
     6fc:	1f 93       	push	r17
     6fe:	cf 93       	push	r28
     700:	df 93       	push	r29
     702:	2b 01       	movw	r4, r22
     704:	3c 01       	movw	r6, r24

	uint16_t cnt = 0;

	chain.startSectors = fat_clustToSec(offsetCluster);		// setzen des 1. sektors der datei
     706:	80 dd       	rcall	.-1280   	; 0x208 <fat_clustToSec>
     708:	e0 e3       	ldi	r30, 0x30	; 48
     70a:	f3 e0       	ldi	r31, 0x03	; 3
     70c:	60 83       	st	Z, r22
     70e:	71 83       	std	Z+1, r23	; 0x01
     710:	82 83       	std	Z+2, r24	; 0x02
     712:	93 83       	std	Z+3, r25	; 0x03
	chain.cntSecs = fat.secPerClust;
     714:	80 91 2d 01 	lds	r24, 0x012D
     718:	90 e0       	ldi	r25, 0x00	; 0
     71a:	95 83       	std	Z+5, r25	; 0x05
     71c:	84 83       	std	Z+4, r24	; 0x04
     71e:	73 01       	movw	r14, r6
     720:	62 01       	movw	r12, r4
// am stueck,falls m√∂glich. prueft ob der cluster neben offsetCluster dazu geh√∂rt...
// setzt dann fat.endSectors und fat.startSectors. das -1 weil z.b. [95,98] = {95,96,97,98} = 4 sektoren
//***************************************************************************************************************
void fat_getFatChainClustersInRow( uint32_t offsetCluster){

	uint16_t cnt = 0;
     722:	00 e0       	ldi	r16, 0x00	; 0
     724:	10 e0       	ldi	r17, 0x00	; 0
	chain.startSectors = fat_clustToSec(offsetCluster);		// setzen des 1. sektors der datei
	chain.cntSecs = fat.secPerClust;

	while( cnt<MMC_MAX_CLUSTERS_IN_ROW ){
		if( (offsetCluster+cnt+1)==fat_getNextCluster(offsetCluster+cnt) )		// zaehlen der zusammenhaengenden sektoren
			chain.cntSecs += fat.secPerClust;
     726:	ef 01       	movw	r28, r30
     728:	0f 2e       	mov	r0, r31
     72a:	f8 e1       	ldi	r31, 0x18	; 24
     72c:	2f 2e       	mov	r2, r31
     72e:	f1 e0       	ldi	r31, 0x01	; 1
     730:	3f 2e       	mov	r3, r31
     732:	f0 2d       	mov	r31, r0

	chain.startSectors = fat_clustToSec(offsetCluster);		// setzen des 1. sektors der datei
	chain.cntSecs = fat.secPerClust;

	while( cnt<MMC_MAX_CLUSTERS_IN_ROW ){
		if( (offsetCluster+cnt+1)==fat_getNextCluster(offsetCluster+cnt) )		// zaehlen der zusammenhaengenden sektoren
     734:	46 01       	movw	r8, r12
     736:	57 01       	movw	r10, r14
     738:	8f ef       	ldi	r24, 0xFF	; 255
     73a:	88 1a       	sub	r8, r24
     73c:	98 0a       	sbc	r9, r24
     73e:	a8 0a       	sbc	r10, r24
     740:	b8 0a       	sbc	r11, r24
     742:	c7 01       	movw	r24, r14
     744:	b6 01       	movw	r22, r12
     746:	ed de       	rcall	.-550    	; 0x522 <fat_getNextCluster>
     748:	86 16       	cp	r8, r22
     74a:	97 06       	cpc	r9, r23
     74c:	a8 06       	cpc	r10, r24
     74e:	b9 06       	cpc	r11, r25
     750:	89 f4       	brne	.+34     	; 0x774 <fat_getFatChainClustersInRow+0x96>
			chain.cntSecs += fat.secPerClust;
     752:	f1 01       	movw	r30, r2
     754:	25 89       	ldd	r18, Z+21	; 0x15
     756:	8c 81       	ldd	r24, Y+4	; 0x04
     758:	9d 81       	ldd	r25, Y+5	; 0x05
     75a:	82 0f       	add	r24, r18
     75c:	91 1d       	adc	r25, r1
     75e:	9d 83       	std	Y+5, r25	; 0x05
     760:	8c 83       	std	Y+4, r24	; 0x04
		else {
			chain.lastCluster = offsetCluster+cnt;	// hier landet man, wenn es nicht MAX_CLUSTERS_IN_ROW am stueck gibt, also vorher ein nicht passender cluster gefunden wurde.
			return;
		}
		cnt+=1;
     762:	0f 5f       	subi	r16, 0xFF	; 255
     764:	1f 4f       	sbci	r17, 0xFF	; 255
     766:	75 01       	movw	r14, r10
     768:	64 01       	movw	r12, r8
	uint16_t cnt = 0;

	chain.startSectors = fat_clustToSec(offsetCluster);		// setzen des 1. sektors der datei
	chain.cntSecs = fat.secPerClust;

	while( cnt<MMC_MAX_CLUSTERS_IN_ROW ){
     76a:	01 15       	cp	r16, r1
     76c:	f1 e0       	ldi	r31, 0x01	; 1
     76e:	1f 07       	cpc	r17, r31
     770:	09 f7       	brne	.-62     	; 0x734 <fat_getFatChainClustersInRow+0x56>
     772:	09 c0       	rjmp	.+18     	; 0x786 <fat_getFatChainClustersInRow+0xa8>
		if( (offsetCluster+cnt+1)==fat_getNextCluster(offsetCluster+cnt) )		// zaehlen der zusammenhaengenden sektoren
			chain.cntSecs += fat.secPerClust;
		else {
			chain.lastCluster = offsetCluster+cnt;	// hier landet man, wenn es nicht MAX_CLUSTERS_IN_ROW am stueck gibt, also vorher ein nicht passender cluster gefunden wurde.
     774:	c0 92 36 03 	sts	0x0336, r12
     778:	d0 92 37 03 	sts	0x0337, r13
     77c:	e0 92 38 03 	sts	0x0338, r14
     780:	f0 92 39 03 	sts	0x0339, r15
			return;
     784:	0c c0       	rjmp	.+24     	; 0x79e <fat_getFatChainClustersInRow+0xc0>
		}
		cnt+=1;
	}

	chain.lastCluster = offsetCluster+cnt;			// hier landet man, wenn MAX_CLUSTERS_IN_ROW gefunden wurden
     786:	8f ef       	ldi	r24, 0xFF	; 255
     788:	58 1a       	sub	r5, r24
     78a:	68 0a       	sbc	r6, r24
     78c:	78 0a       	sbc	r7, r24
     78e:	40 92 36 03 	sts	0x0336, r4
     792:	50 92 37 03 	sts	0x0337, r5
     796:	60 92 38 03 	sts	0x0338, r6
     79a:	70 92 39 03 	sts	0x0339, r7
}
     79e:	df 91       	pop	r29
     7a0:	cf 91       	pop	r28
     7a2:	1f 91       	pop	r17
     7a4:	0f 91       	pop	r16
     7a6:	ff 90       	pop	r15
     7a8:	ef 90       	pop	r14
     7aa:	df 90       	pop	r13
     7ac:	cf 90       	pop	r12
     7ae:	bf 90       	pop	r11
     7b0:	af 90       	pop	r10
     7b2:	9f 90       	pop	r9
     7b4:	8f 90       	pop	r8
     7b6:	7f 90       	pop	r7
     7b8:	6f 90       	pop	r6
     7ba:	5f 90       	pop	r5
     7bc:	4f 90       	pop	r4
     7be:	3f 90       	pop	r3
     7c0:	2f 90       	pop	r2
     7c2:	08 95       	ret

000007c4 <fat_getFreeClustersInRow>:
//***************************************************************************************************************
// sucht freie zusammenhaengende cluster aus der fat. maximal MAX_CLUSTERS_IN_ROW am stueck.
// erst wir der erste frei cluster gesucht, ab offsetCluster(iklusive) und dann wird geschaut, ob der
// daneben auch frei ist. setzt dann fat.endSectors und chain.startSectors. das -1 weil z.b. [95,98] = {95,96,97,98} = 4 sektoren
//***************************************************************************************************************
void fat_getFreeClustersInRow(uint32_t offsetCluster){
     7c4:	8f 92       	push	r8
     7c6:	9f 92       	push	r9
     7c8:	af 92       	push	r10
     7ca:	bf 92       	push	r11
     7cc:	cf 92       	push	r12
     7ce:	df 92       	push	r13
     7d0:	ef 92       	push	r14
     7d2:	ff 92       	push	r15
     7d4:	0f 93       	push	r16
     7d6:	1f 93       	push	r17
     7d8:	cf 93       	push	r28
     7da:	df 93       	push	r29
     7dc:	4b 01       	movw	r8, r22
     7de:	5c 01       	movw	r10, r24

	uint16_t cnt=1; 							// variable fuer anzahl der zu suchenden cluster

	while(fat_getNextCluster(offsetCluster)){		// suche des 1. freien clusters
     7e0:	05 c0       	rjmp	.+10     	; 0x7ec <fat_getFreeClustersInRow+0x28>
		offsetCluster++;
     7e2:	8f ef       	ldi	r24, 0xFF	; 255
     7e4:	88 1a       	sub	r8, r24
     7e6:	98 0a       	sbc	r9, r24
     7e8:	a8 0a       	sbc	r10, r24
     7ea:	b8 0a       	sbc	r11, r24
//***************************************************************************************************************
void fat_getFreeClustersInRow(uint32_t offsetCluster){

	uint16_t cnt=1; 							// variable fuer anzahl der zu suchenden cluster

	while(fat_getNextCluster(offsetCluster)){		// suche des 1. freien clusters
     7ec:	c5 01       	movw	r24, r10
     7ee:	b4 01       	movw	r22, r8
     7f0:	98 de       	rcall	.-720    	; 0x522 <fat_getNextCluster>
     7f2:	67 2b       	or	r22, r23
     7f4:	68 2b       	or	r22, r24
     7f6:	69 2b       	or	r22, r25
     7f8:	a1 f7       	brne	.-24     	; 0x7e2 <fat_getFreeClustersInRow+0x1e>
		offsetCluster++;
	}

	chain.startSectors = fat_clustToSec(offsetCluster);	// setzen des startsektors der freien sektoren (umrechnen von cluster zu sektoren)
     7fa:	c5 01       	movw	r24, r10
     7fc:	b4 01       	movw	r22, r8
     7fe:	04 dd       	rcall	.-1528   	; 0x208 <fat_clustToSec>
     800:	e0 e3       	ldi	r30, 0x30	; 48
     802:	f3 e0       	ldi	r31, 0x03	; 3
     804:	60 83       	st	Z, r22
     806:	71 83       	std	Z+1, r23	; 0x01
     808:	82 83       	std	Z+2, r24	; 0x02
     80a:	93 83       	std	Z+3, r25	; 0x03
	chain.cntSecs = fat.secPerClust;					// da schonmal mindestens einer gefunden wurde kann hier auch schon cntSecs damit gesetzt werden
     80c:	80 91 2d 01 	lds	r24, 0x012D
     810:	90 e0       	ldi	r25, 0x00	; 0
     812:	95 83       	std	Z+5, r25	; 0x05
     814:	84 83       	std	Z+4, r24	; 0x04
     816:	75 01       	movw	r14, r10
     818:	64 01       	movw	r12, r8
     81a:	ef ef       	ldi	r30, 0xFF	; 255
     81c:	ce 1a       	sub	r12, r30
     81e:	de 0a       	sbc	r13, r30
     820:	ee 0a       	sbc	r14, r30
     822:	fe 0a       	sbc	r15, r30
     824:	ff ef       	ldi	r31, 0xFF	; 255
     826:	9f 1a       	sub	r9, r31
     828:	af 0a       	sbc	r10, r31
     82a:	bf 0a       	sbc	r11, r31

	do{													// suche der naechsten freien
		if(0==fat_getNextCluster(offsetCluster+cnt) )	// zaehlen der zusammenh√§ngenden sektoren
			chain.cntSecs += fat.secPerClust;
     82c:	c0 e3       	ldi	r28, 0x30	; 48
     82e:	d3 e0       	ldi	r29, 0x03	; 3
     830:	08 e1       	ldi	r16, 0x18	; 24
     832:	11 e0       	ldi	r17, 0x01	; 1

	chain.startSectors = fat_clustToSec(offsetCluster);	// setzen des startsektors der freien sektoren (umrechnen von cluster zu sektoren)
	chain.cntSecs = fat.secPerClust;					// da schonmal mindestens einer gefunden wurde kann hier auch schon cntSecs damit gesetzt werden

	do{													// suche der naechsten freien
		if(0==fat_getNextCluster(offsetCluster+cnt) )	// zaehlen der zusammenh√§ngenden sektoren
     834:	c7 01       	movw	r24, r14
     836:	b6 01       	movw	r22, r12
     838:	74 de       	rcall	.-792    	; 0x522 <fat_getNextCluster>
     83a:	67 2b       	or	r22, r23
     83c:	68 2b       	or	r22, r24
     83e:	69 2b       	or	r22, r25
     840:	91 f4       	brne	.+36     	; 0x866 <fat_getFreeClustersInRow+0xa2>
			chain.cntSecs += fat.secPerClust;
     842:	f8 01       	movw	r30, r16
     844:	25 89       	ldd	r18, Z+21	; 0x15
     846:	8c 81       	ldd	r24, Y+4	; 0x04
     848:	9d 81       	ldd	r25, Y+5	; 0x05
     84a:	82 0f       	add	r24, r18
     84c:	91 1d       	adc	r25, r1
     84e:	9d 83       	std	Y+5, r25	; 0x05
     850:	8c 83       	std	Y+4, r24	; 0x04
     852:	ff ef       	ldi	r31, 0xFF	; 255
     854:	cf 1a       	sub	r12, r31
     856:	df 0a       	sbc	r13, r31
     858:	ef 0a       	sbc	r14, r31
     85a:	ff 0a       	sbc	r15, r31
		else{
			return;									// cluster daneben ist nicht frei
		}
		cnt++;
	}while( cnt<MMC_MAX_CLUSTERS_IN_ROW );			// wenn man hier raus rasselt, gibt es mehr freie zusammenhaengende als MAX_CLUSTERS_IN_ROW
     85c:	c8 14       	cp	r12, r8
     85e:	d9 04       	cpc	r13, r9
     860:	ea 04       	cpc	r14, r10
     862:	fb 04       	cpc	r15, r11
     864:	39 f7       	brne	.-50     	; 0x834 <fat_getFreeClustersInRow+0x70>


}
     866:	df 91       	pop	r29
     868:	cf 91       	pop	r28
     86a:	1f 91       	pop	r17
     86c:	0f 91       	pop	r16
     86e:	ff 90       	pop	r15
     870:	ef 90       	pop	r14
     872:	df 90       	pop	r13
     874:	cf 90       	pop	r12
     876:	bf 90       	pop	r11
     878:	af 90       	pop	r10
     87a:	9f 90       	pop	r9
     87c:	8f 90       	pop	r8
     87e:	08 95       	ret

00000880 <fat_setCluster>:
// setzt den cluster inhalt. errechnet den sektor der fat in dem cluster ist, errechnet das low byte von
// cluster und setzt dann byteweise den inhalt:content.
// prueft ob buffer dirty (zu setztender cluster nicht in jetzt gepuffertem).
// pruefung erfolgt in fat_loadSector, dann wird alter vorher geschrieben, sonst gehen dort daten verloren !!
//***************************************************************************************************************
void fat_setCluster( uint32_t cluster, uint32_t content){
     880:	8f 92       	push	r8
     882:	9f 92       	push	r9
     884:	af 92       	push	r10
     886:	bf 92       	push	r11
     888:	cf 92       	push	r12
     88a:	df 92       	push	r13
     88c:	ef 92       	push	r14
     88e:	ff 92       	push	r15
     890:	0f 93       	push	r16
     892:	1f 93       	push	r17
     894:	49 01       	movw	r8, r18
     896:	5a 01       	movw	r10, r20
	#else
		uint8_t *bytesOfSec;
	#endif

	// FAT 16
	if(fat.fatType==16){
     898:	20 91 2e 01 	lds	r18, 0x012E
     89c:	20 31       	cpi	r18, 0x10	; 16
     89e:	71 f5       	brne	.+92     	; 0x8fc <fat_setCluster+0x7c>
		cluster = cluster << 1;
     8a0:	6b 01       	movw	r12, r22
     8a2:	7c 01       	movw	r14, r24
     8a4:	cc 0c       	add	r12, r12
     8a6:	dd 1c       	adc	r13, r13
     8a8:	ee 1c       	adc	r14, r14
     8aa:	ff 1c       	adc	r15, r15
		sector = fat.fatSec + (cluster >> 9);
     8ac:	b7 01       	movw	r22, r14
     8ae:	a6 01       	movw	r20, r12
     8b0:	03 2e       	mov	r0, r19
     8b2:	39 e0       	ldi	r19, 0x09	; 9
     8b4:	76 95       	lsr	r23
     8b6:	67 95       	ror	r22
     8b8:	57 95       	ror	r21
     8ba:	47 95       	ror	r20
     8bc:	3a 95       	dec	r19
     8be:	d1 f7       	brne	.-12     	; 0x8b4 <fat_setCluster+0x34>
     8c0:	30 2d       	mov	r19, r0
     8c2:	80 91 29 01 	lds	r24, 0x0129
     8c6:	90 91 2a 01 	lds	r25, 0x012A
     8ca:	a0 91 2b 01 	lds	r26, 0x012B
     8ce:	b0 91 2c 01 	lds	r27, 0x012C
     8d2:	8a 01       	movw	r16, r20
     8d4:	9b 01       	movw	r18, r22
     8d6:	08 0f       	add	r16, r24
     8d8:	19 1f       	adc	r17, r25
     8da:	2a 1f       	adc	r18, r26
     8dc:	3b 1f       	adc	r19, r27
     8de:	c9 01       	movw	r24, r18
     8e0:	b8 01       	movw	r22, r16
		fat_loadSector(sector);
     8e2:	fb db       	rcall	.-2058   	; 0xda <fat_loadSector>
		bytesOfSec =& fat.sector[cluster % 512];
     8e4:	11 e0       	ldi	r17, 0x01	; 1
     8e6:	d1 22       	and	r13, r17
     8e8:	ee 24       	eor	r14, r14
     8ea:	ff 24       	eor	r15, r15
     8ec:	c6 01       	movw	r24, r12
     8ee:	48 96       	adiw	r24, 0x18	; 24

		#if (MMC_ENDIANNESS_LITTLE==TRUE)
			*(uint16_t*)bytesOfSec = content;
     8f0:	fc 01       	movw	r30, r24
     8f2:	e8 5e       	subi	r30, 0xE8	; 232
     8f4:	fe 4f       	sbci	r31, 0xFE	; 254
     8f6:	91 82       	std	Z+1, r9	; 0x01
     8f8:	80 82       	st	Z, r8
     8fa:	33 c0       	rjmp	.+102    	; 0x962 <fat_setCluster+0xe2>
			*bytesOfSec = content >> 8;
		#endif
	}
	// FAT 32
	else{
		cluster = cluster << 2;
     8fc:	6b 01       	movw	r12, r22
     8fe:	7c 01       	movw	r14, r24
     900:	cc 0c       	add	r12, r12
     902:	dd 1c       	adc	r13, r13
     904:	ee 1c       	adc	r14, r14
     906:	ff 1c       	adc	r15, r15
     908:	cc 0c       	add	r12, r12
     90a:	dd 1c       	adc	r13, r13
     90c:	ee 1c       	adc	r14, r14
     90e:	ff 1c       	adc	r15, r15
		sector = fat.fatSec + (cluster >> 9);
     910:	b7 01       	movw	r22, r14
     912:	a6 01       	movw	r20, r12
     914:	03 2e       	mov	r0, r19
     916:	39 e0       	ldi	r19, 0x09	; 9
     918:	76 95       	lsr	r23
     91a:	67 95       	ror	r22
     91c:	57 95       	ror	r21
     91e:	47 95       	ror	r20
     920:	3a 95       	dec	r19
     922:	d1 f7       	brne	.-12     	; 0x918 <fat_setCluster+0x98>
     924:	30 2d       	mov	r19, r0
     926:	80 91 29 01 	lds	r24, 0x0129
     92a:	90 91 2a 01 	lds	r25, 0x012A
     92e:	a0 91 2b 01 	lds	r26, 0x012B
     932:	b0 91 2c 01 	lds	r27, 0x012C
     936:	8a 01       	movw	r16, r20
     938:	9b 01       	movw	r18, r22
     93a:	08 0f       	add	r16, r24
     93c:	19 1f       	adc	r17, r25
     93e:	2a 1f       	adc	r18, r26
     940:	3b 1f       	adc	r19, r27
     942:	c9 01       	movw	r24, r18
     944:	b8 01       	movw	r22, r16
		fat_loadSector(sector);
     946:	c9 db       	rcall	.-2158   	; 0xda <fat_loadSector>
		bytesOfSec =& fat.sector[cluster % 512];
     948:	11 e0       	ldi	r17, 0x01	; 1
     94a:	d1 22       	and	r13, r17
     94c:	ee 24       	eor	r14, r14
     94e:	ff 24       	eor	r15, r15
     950:	c6 01       	movw	r24, r12
     952:	48 96       	adiw	r24, 0x18	; 24

		#if (MMC_ENDIANNESS_LITTLE==TRUE)
			*(uint32_t*)bytesOfSec = content;
     954:	fc 01       	movw	r30, r24
     956:	e8 5e       	subi	r30, 0xE8	; 232
     958:	fe 4f       	sbci	r31, 0xFE	; 254
     95a:	80 82       	st	Z, r8
     95c:	91 82       	std	Z+1, r9	; 0x01
     95e:	a2 82       	std	Z+2, r10	; 0x02
     960:	b3 82       	std	Z+3, r11	; 0x03
			*bytesOfSec++ = content >> 16;
			*bytesOfSec = content >> 24;
		#endif
	}

	fat.bufferDirty = TRUE;						// zeigt an, dass im aktuellen sector geschrieben wurde
     962:	81 e0       	ldi	r24, 0x01	; 1
     964:	80 93 1c 01 	sts	0x011C, r24
}
     968:	1f 91       	pop	r17
     96a:	0f 91       	pop	r16
     96c:	ff 90       	pop	r15
     96e:	ef 90       	pop	r14
     970:	df 90       	pop	r13
     972:	cf 90       	pop	r12
     974:	bf 90       	pop	r11
     976:	af 90       	pop	r10
     978:	9f 90       	pop	r9
     97a:	8f 90       	pop	r8
     97c:	08 95       	ret

0000097e <fat_makeFileEntry>:
// macht den datei eintrag im jetzigen verzeichniss (fat.dir).
// file.row enthaelt die reihen nummer des leeren eintrags, der vorher gesucht wurde, auf puffer:sector ist der gewuenschte
// sektor gepuffert. fuer fat16 im root dir muss andere funktion genutzt werden, als fat_getFreeRowOfDir (durchsucht nur dirs).
// fat.rootDir enth√§lt bei fat32 den start cluster des directory, bei fat16 den 1. sektor des rootDir bereichs!
//***************************************************************************************************************
void fat_makeFileEntry( uint8_t name [],uint8_t attrib){
     97e:	2f 92       	push	r2
     980:	3f 92       	push	r3
     982:	4f 92       	push	r4
     984:	5f 92       	push	r5
     986:	7f 92       	push	r7
     988:	8f 92       	push	r8
     98a:	9f 92       	push	r9
     98c:	af 92       	push	r10
     98e:	bf 92       	push	r11
     990:	cf 92       	push	r12
     992:	df 92       	push	r13
     994:	ef 92       	push	r14
     996:	ff 92       	push	r15
     998:	0f 93       	push	r16
     99a:	1f 93       	push	r17
     99c:	cf 93       	push	r28
     99e:	df 93       	push	r29
     9a0:	00 d0       	rcall	.+0      	; 0x9a2 <fat_makeFileEntry+0x24>
     9a2:	cd b7       	in	r28, 0x3d	; 61
     9a4:	de b7       	in	r29, 0x3e	; 62
     9a6:	9a 83       	std	Y+2, r25	; 0x02
     9a8:	89 83       	std	Y+1, r24	; 0x01
     9aa:	76 2e       	mov	r7, r22
		// berechnung wieviele reihen fuer den eintrag, also die lfn und den sfn, benoetigt werden.
		need_rows = (name_length % 13 == 0) ? name_length/13 + 1 : name_length/13  + 2;
	#endif

	// bestimmen in welchem cluster nach freien eintraegen gesucht werden soll
	dir = (fat.dir==0) ? fat.rootDir : fat.dir;
     9ac:	c0 90 1d 01 	lds	r12, 0x011D
     9b0:	d0 90 1e 01 	lds	r13, 0x011E
     9b4:	e0 90 1f 01 	lds	r14, 0x011F
     9b8:	f0 90 20 01 	lds	r15, 0x0120
     9bc:	c1 14       	cp	r12, r1
     9be:	d1 04       	cpc	r13, r1
     9c0:	e1 04       	cpc	r14, r1
     9c2:	f1 04       	cpc	r15, r1
     9c4:	49 f4       	brne	.+18     	; 0x9d8 <fat_makeFileEntry+0x5a>
     9c6:	e8 e1       	ldi	r30, 0x18	; 24
     9c8:	f1 e0       	ldi	r31, 0x01	; 1
     9ca:	c1 84       	ldd	r12, Z+9	; 0x09
     9cc:	d2 84       	ldd	r13, Z+10	; 0x0a
     9ce:	e3 84       	ldd	r14, Z+11	; 0x0b
     9d0:	f4 84       	ldd	r15, Z+12	; 0x0c

	// nach leeren eintraegen im root-dir suchen, nur wenn fat16
	if( fat.fatType == 16 && fat.dir == 0){
     9d2:	86 89       	ldd	r24, Z+22	; 0x16
     9d4:	80 31       	cpi	r24, 0x10	; 16
     9d6:	49 f0       	breq	.+18     	; 0x9ea <fat_makeFileEntry+0x6c>
	// verzeichnis durchsuchen und pruefen ob genuegend platz fuer anzahl der benoetigten reihen ist.
	do{
		if( TRUE == fat_getFreeRowsOfCluster( fat_clustToSec(dir), rows ) ){ 			// freien platz gefunden!!
			return;
		}
		lastSector = file.currentSectorNr;
     9d8:	0f 2e       	mov	r0, r31
     9da:	fa e3       	ldi	r31, 0x3A	; 58
     9dc:	4f 2e       	mov	r4, r31
     9de:	f3 e0       	ldi	r31, 0x03	; 3
     9e0:	5f 2e       	mov	r5, r31
     9e2:	f0 2d       	mov	r31, r0
		lastCluster = dir;
		dir = fat_getNextCluster(dir);													// dir ist parameter der funktion und der startcluster des ordners/dirs
	}while( !((dir>=0x0ffffff8&&fat.fatType==32)||(dir>=0xfff8&&fat.fatType==16)) );	// geht durch ganzes dir
     9e4:	08 e1       	ldi	r16, 0x18	; 24
     9e6:	11 e0       	ldi	r17, 0x01	; 1
     9e8:	1d c0       	rjmp	.+58     	; 0xa24 <fat_makeFileEntry+0xa6>

	// bestimmen in welchem cluster nach freien eintraegen gesucht werden soll
	dir = (fat.dir==0) ? fat.rootDir : fat.dir;

	// nach leeren eintraegen im root-dir suchen, nur wenn fat16
	if( fat.fatType == 16 && fat.dir == 0){
     9ea:	10 e0       	ldi	r17, 0x00	; 0
			#if (MMC_LFN_SUPPORT==TRUE)
				if(TRUE==fat_getFreeRowsOfCluster( dir + sectors,need_rows) )break;	// freien eintrag im fat16 root dir gefunden?
			#else
				if(TRUE==fat_getFreeRowsOfCluster( dir + sectors,1) )break;		// freien eintrag im fat16 root dir gefunden?
			#endif
			sectors += fat.secPerClust;
     9ec:	0f 2e       	mov	r0, r31
     9ee:	f8 e1       	ldi	r31, 0x18	; 24
     9f0:	af 2e       	mov	r10, r31
     9f2:	f1 e0       	ldi	r31, 0x01	; 1
     9f4:	bf 2e       	mov	r11, r31
     9f6:	f0 2d       	mov	r31, r0
		sectors = 0;
		do{
			#if (MMC_LFN_SUPPORT==TRUE)
				if(TRUE==fat_getFreeRowsOfCluster( dir + sectors,need_rows) )break;	// freien eintrag im fat16 root dir gefunden?
			#else
				if(TRUE==fat_getFreeRowsOfCluster( dir + sectors,1) )break;		// freien eintrag im fat16 root dir gefunden?
     9f8:	41 e0       	ldi	r20, 0x01	; 1
     9fa:	c7 01       	movw	r24, r14
     9fc:	b6 01       	movw	r22, r12
     9fe:	61 0f       	add	r22, r17
     a00:	71 1d       	adc	r23, r1
     a02:	81 1d       	adc	r24, r1
     a04:	91 1d       	adc	r25, r1
     a06:	ae db       	rcall	.-2212   	; 0x164 <fat_getFreeRowsOfCluster>
     a08:	81 30       	cpi	r24, 0x01	; 1
     a0a:	09 f4       	brne	.+2      	; 0xa0e <fat_makeFileEntry+0x90>
     a0c:	b2 c0       	rjmp	.+356    	; 0xb72 <fat_makeFileEntry+0x1f4>
			#endif
			sectors += fat.secPerClust;
     a0e:	f5 01       	movw	r30, r10
     a10:	85 89       	ldd	r24, Z+21	; 0x15
     a12:	18 0f       	add	r17, r24
		}while( sectors < (uint8_t)32  );
     a14:	10 32       	cpi	r17, 0x20	; 32
     a16:	80 f3       	brcs	.-32     	; 0x9f8 <fat_makeFileEntry+0x7a>
     a18:	ac c0       	rjmp	.+344    	; 0xb72 <fat_makeFileEntry+0x1f4>
			return;
		}
		lastSector = file.currentSectorNr;
		lastCluster = dir;
		dir = fat_getNextCluster(dir);													// dir ist parameter der funktion und der startcluster des ordners/dirs
	}while( !((dir>=0x0ffffff8&&fat.fatType==32)||(dir>=0xfff8&&fat.fatType==16)) );	// geht durch ganzes dir
     a1a:	6b 01       	movw	r12, r22
     a1c:	7c 01       	movw	r14, r24
     a1e:	02 c0       	rjmp	.+4      	; 0xa24 <fat_makeFileEntry+0xa6>
     a20:	6b 01       	movw	r12, r22
     a22:	7c 01       	movw	r14, r24
	uint32_t lastCluster;
	uint32_t lastSector;

	// verzeichnis durchsuchen und pruefen ob genuegend platz fuer anzahl der benoetigten reihen ist.
	do{
		if( TRUE == fat_getFreeRowsOfCluster( fat_clustToSec(dir), rows ) ){ 			// freien platz gefunden!!
     a24:	c7 01       	movw	r24, r14
     a26:	b6 01       	movw	r22, r12
     a28:	ef db       	rcall	.-2082   	; 0x208 <fat_clustToSec>
     a2a:	41 e0       	ldi	r20, 0x01	; 1
     a2c:	9b db       	rcall	.-2250   	; 0x164 <fat_getFreeRowsOfCluster>
     a2e:	81 30       	cpi	r24, 0x01	; 1
     a30:	09 f4       	brne	.+2      	; 0xa34 <fat_makeFileEntry+0xb6>
     a32:	9f c0       	rjmp	.+318    	; 0xb72 <fat_makeFileEntry+0x1f4>
			return;
		}
		lastSector = file.currentSectorNr;
     a34:	f2 01       	movw	r30, r4
     a36:	86 80       	ldd	r8, Z+6	; 0x06
     a38:	97 80       	ldd	r9, Z+7	; 0x07
     a3a:	a0 84       	ldd	r10, Z+8	; 0x08
     a3c:	b1 84       	ldd	r11, Z+9	; 0x09
		lastCluster = dir;
		dir = fat_getNextCluster(dir);													// dir ist parameter der funktion und der startcluster des ordners/dirs
     a3e:	c7 01       	movw	r24, r14
     a40:	b6 01       	movw	r22, r12
     a42:	6f dd       	rcall	.-1314   	; 0x522 <fat_getNextCluster>
	}while( !((dir>=0x0ffffff8&&fat.fatType==32)||(dir>=0xfff8&&fat.fatType==16)) );	// geht durch ganzes dir
     a44:	68 3f       	cpi	r22, 0xF8	; 248
     a46:	ff ef       	ldi	r31, 0xFF	; 255
     a48:	7f 07       	cpc	r23, r31
     a4a:	8f 07       	cpc	r24, r31
     a4c:	ff e0       	ldi	r31, 0x0F	; 15
     a4e:	9f 07       	cpc	r25, r31
     a50:	20 f0       	brcs	.+8      	; 0xa5a <fat_makeFileEntry+0xdc>
     a52:	f8 01       	movw	r30, r16
     a54:	26 89       	ldd	r18, Z+22	; 0x16
     a56:	20 32       	cpi	r18, 0x20	; 32
     a58:	51 f0       	breq	.+20     	; 0xa6e <fat_makeFileEntry+0xf0>
     a5a:	68 3f       	cpi	r22, 0xF8	; 248
     a5c:	ff ef       	ldi	r31, 0xFF	; 255
     a5e:	7f 07       	cpc	r23, r31
     a60:	81 05       	cpc	r24, r1
     a62:	91 05       	cpc	r25, r1
     a64:	d0 f2       	brcs	.-76     	; 0xa1a <fat_makeFileEntry+0x9c>
     a66:	f8 01       	movw	r30, r16
     a68:	26 89       	ldd	r18, Z+22	; 0x16
     a6a:	20 31       	cpi	r18, 0x10	; 16
     a6c:	c9 f6       	brne	.-78     	; 0xa20 <fat_makeFileEntry+0xa2>

	uint32_t newCluster;
	uint16_t j;
	uint8_t i;

	newCluster = fat_secToClust(chain.startSectors);
     a6e:	60 91 30 03 	lds	r22, 0x0330
     a72:	70 91 31 03 	lds	r23, 0x0331
     a76:	80 91 32 03 	lds	r24, 0x0332
     a7a:	90 91 33 03 	lds	r25, 0x0333
     a7e:	dd db       	rcall	.-2118   	; 0x23a <fat_secToClust>
     a80:	1b 01       	movw	r2, r22
     a82:	2c 01       	movw	r4, r24

	// verketten des dirs mit dem neuen cluster (fat bereich)
	fat_setCluster(lastClusterOfDir,newCluster);
     a84:	9b 01       	movw	r18, r22
     a86:	ac 01       	movw	r20, r24
     a88:	c7 01       	movw	r24, r14
     a8a:	b6 01       	movw	r22, r12
     a8c:	f9 de       	rcall	.-526    	; 0x880 <fat_setCluster>
	fat_setCluster(newCluster,0x0fffffff);
     a8e:	2f ef       	ldi	r18, 0xFF	; 255
     a90:	3f ef       	ldi	r19, 0xFF	; 255
     a92:	4f ef       	ldi	r20, 0xFF	; 255
     a94:	5f e0       	ldi	r21, 0x0F	; 15
     a96:	c2 01       	movw	r24, r4
     a98:	b1 01       	movw	r22, r2
     a9a:	f2 de       	rcall	.-540    	; 0x880 <fat_setCluster>
	mmc_write_sector(file.currentSectorNr,fat.sector);
     a9c:	60 91 40 03 	lds	r22, 0x0340
     aa0:	70 91 41 03 	lds	r23, 0x0341
     aa4:	80 91 42 03 	lds	r24, 0x0342
     aa8:	90 91 43 03 	lds	r25, 0x0343
     aac:	40 e3       	ldi	r20, 0x30	; 48
     aae:	51 e0       	ldi	r21, 0x01	; 1
     ab0:	f2 d3       	rcall	.+2020   	; 0x1296 <mmc_write_sector>
     ab2:	e0 e3       	ldi	r30, 0x30	; 48
     ab4:	f3 e0       	ldi	r31, 0x03	; 3
     ab6:	80 e3       	ldi	r24, 0x30	; 48
     ab8:	91 e0       	ldi	r25, 0x01	; 1

	// bereitet puffer so auf, dass die einzelnen sektoren des neuen clusters mit 0x00 initialisiert werden koennen.
	j = 511;
	do{
		fat.sector[j]=0x00;
     aba:	12 92       	st	-Z, r1
	}while(j--);
     abc:	e8 17       	cp	r30, r24
     abe:	f9 07       	cpc	r31, r25
     ac0:	e1 f7       	brne	.-8      	; 0xaba <fat_makeFileEntry+0x13c>
     ac2:	51 2c       	mov	r5, r1

	// jetzt sektoren des neuen clusters mit vorbereitetem puffer beschreiben (daten bereich)
	i = 0;
	do{
		fat_writeSector(chain.startSectors + i );		// nullen des clusters
     ac4:	0f 2e       	mov	r0, r31
     ac6:	f0 e3       	ldi	r31, 0x30	; 48
     ac8:	2f 2e       	mov	r2, r31
     aca:	f3 e0       	ldi	r31, 0x03	; 3
     acc:	3f 2e       	mov	r3, r31
     ace:	f0 2d       	mov	r31, r0
	}while( i++ < fat.secPerClust);					// bis cluster komplett genullt wurde.
     ad0:	08 e1       	ldi	r16, 0x18	; 24
     ad2:	11 e0       	ldi	r17, 0x01	; 1
     ad4:	01 c0       	rjmp	.+2      	; 0xad8 <fat_makeFileEntry+0x15a>
     ad6:	59 2e       	mov	r5, r25
	}while(j--);

	// jetzt sektoren des neuen clusters mit vorbereitetem puffer beschreiben (daten bereich)
	i = 0;
	do{
		fat_writeSector(chain.startSectors + i );		// nullen des clusters
     ad8:	f1 01       	movw	r30, r2
     ada:	80 81       	ld	r24, Z
     adc:	91 81       	ldd	r25, Z+1	; 0x01
     ade:	a2 81       	ldd	r26, Z+2	; 0x02
     ae0:	b3 81       	ldd	r27, Z+3	; 0x03
     ae2:	bc 01       	movw	r22, r24
     ae4:	cd 01       	movw	r24, r26
     ae6:	65 0d       	add	r22, r5
     ae8:	71 1d       	adc	r23, r1
     aea:	81 1d       	adc	r24, r1
     aec:	91 1d       	adc	r25, r1
     aee:	ee da       	rcall	.-2596   	; 0xcc <fat_writeSector>
	}while( i++ < fat.secPerClust);					// bis cluster komplett genullt wurde.
     af0:	91 e0       	ldi	r25, 0x01	; 1
     af2:	95 0d       	add	r25, r5
     af4:	f8 01       	movw	r30, r16
     af6:	85 89       	ldd	r24, Z+21	; 0x15
     af8:	58 16       	cp	r5, r24
     afa:	68 f3       	brcs	.-38     	; 0xad6 <fat_makeFileEntry+0x158>

	// auf ersten sektor des clusters setzen
	file.currentSectorNr = chain.startSectors;
     afc:	00 e3       	ldi	r16, 0x30	; 48
     afe:	13 e0       	ldi	r17, 0x03	; 3
     b00:	f8 01       	movw	r30, r16
     b02:	20 80       	ld	r2, Z
     b04:	31 80       	ldd	r3, Z+1	; 0x01
     b06:	42 80       	ldd	r4, Z+2	; 0x02
     b08:	53 80       	ldd	r5, Z+3	; 0x03
     b0a:	20 92 40 03 	sts	0x0340, r2
     b0e:	30 92 41 03 	sts	0x0341, r3
     b12:	40 92 42 03 	sts	0x0342, r4
     b16:	50 92 43 03 	sts	0x0343, r5


	// hier verzeichnis durchsucht und nicht genuegend platz gefunden, jetzt platzt schaffen. es wird ein neuer cluster zu dem dir verkettet und dieser aufbereitet!

	fat_addClusterToDir(lastCluster);
	chain.lastCluster = fat_secToClust(lastSector);
     b1a:	c5 01       	movw	r24, r10
     b1c:	b4 01       	movw	r22, r8
     b1e:	8d db       	rcall	.-2278   	; 0x23a <fat_secToClust>
     b20:	f8 01       	movw	r30, r16
     b22:	66 83       	std	Z+6, r22	; 0x06
     b24:	77 83       	std	Z+7, r23	; 0x07
     b26:	80 87       	std	Z+8, r24	; 0x08
     b28:	91 87       	std	Z+9, r25	; 0x09
	fat_getFreeRowsOfCluster( file.currentSectorNr, rows );
     b2a:	41 e0       	ldi	r20, 0x01	; 1
     b2c:	c2 01       	movw	r24, r4
     b2e:	b1 01       	movw	r22, r2
     b30:	19 db       	rcall	.-2510   	; 0x164 <fat_getFreeRowsOfCluster>

	// pruefen ob mehr als ein cluster am stueck frei ist/war. wenn nicht, muessen neue freie fuer das beschreiben der datei gesucht werden, da ja gerade einer zum dir verkettet wurde
	if( chain.cntSecs>fat.secPerClust ){
     b32:	f8 01       	movw	r30, r16
     b34:	84 81       	ldd	r24, Z+4	; 0x04
     b36:	95 81       	ldd	r25, Z+5	; 0x05
     b38:	40 91 2d 01 	lds	r20, 0x012D
     b3c:	24 2f       	mov	r18, r20
     b3e:	30 e0       	ldi	r19, 0x00	; 0
     b40:	28 17       	cp	r18, r24
     b42:	39 07       	cpc	r19, r25
     b44:	98 f4       	brcc	.+38     	; 0xb6c <fat_makeFileEntry+0x1ee>
		chain.startSectors += fat.secPerClust;
     b46:	c0 80       	ld	r12, Z
     b48:	d1 80       	ldd	r13, Z+1	; 0x01
     b4a:	e2 80       	ldd	r14, Z+2	; 0x02
     b4c:	f3 80       	ldd	r15, Z+3	; 0x03
     b4e:	46 01       	movw	r8, r12
     b50:	57 01       	movw	r10, r14
     b52:	84 0e       	add	r8, r20
     b54:	91 1c       	adc	r9, r1
     b56:	a1 1c       	adc	r10, r1
     b58:	b1 1c       	adc	r11, r1
     b5a:	80 82       	st	Z, r8
     b5c:	91 82       	std	Z+1, r9	; 0x01
     b5e:	a2 82       	std	Z+2, r10	; 0x02
     b60:	b3 82       	std	Z+3, r11	; 0x03
		chain.cntSecs -= fat.secPerClust;
     b62:	82 1b       	sub	r24, r18
     b64:	93 0b       	sbc	r25, r19
     b66:	95 83       	std	Z+5, r25	; 0x05
     b68:	84 83       	std	Z+4, r24	; 0x04
     b6a:	03 c0       	rjmp	.+6      	; 0xb72 <fat_makeFileEntry+0x1f4>
	}
	else{
		fat_getFreeClustersInRow( lastCluster );
     b6c:	c7 01       	movw	r24, r14
     b6e:	b6 01       	movw	r22, r12
     b70:	29 de       	rcall	.-942    	; 0x7c4 <fat_getFreeClustersInRow>
	#else
		else fat_getFreeRowsOfDir(dir,1);
	#endif

	// setzten der noetigen werte der datei !
	file.entrySector = file.currentSectorNr;							// sichern des sektors in dem der sfn dateieintrag steht.
     b72:	0f 2e       	mov	r0, r31
     b74:	fa e3       	ldi	r31, 0x3A	; 58
     b76:	af 2e       	mov	r10, r31
     b78:	f3 e0       	ldi	r31, 0x03	; 3
     b7a:	bf 2e       	mov	r11, r31
     b7c:	f0 2d       	mov	r31, r0
     b7e:	f5 01       	movw	r30, r10
     b80:	86 81       	ldd	r24, Z+6	; 0x06
     b82:	97 81       	ldd	r25, Z+7	; 0x07
     b84:	a0 85       	ldd	r26, Z+8	; 0x08
     b86:	b1 85       	ldd	r27, Z+9	; 0x09
     b88:	85 8b       	std	Z+21, r24	; 0x15
     b8a:	96 8b       	std	Z+22, r25	; 0x16
     b8c:	a7 8b       	std	Z+23, r26	; 0x17
     b8e:	b0 8f       	std	Z+24, r27	; 0x18
	file.firstCluster = fat_secToClust(chain.startSectors);
     b90:	0f 2e       	mov	r0, r31
     b92:	f0 e3       	ldi	r31, 0x30	; 48
     b94:	cf 2e       	mov	r12, r31
     b96:	f3 e0       	ldi	r31, 0x03	; 3
     b98:	df 2e       	mov	r13, r31
     b9a:	f0 2d       	mov	r31, r0
     b9c:	f6 01       	movw	r30, r12
     b9e:	60 81       	ld	r22, Z
     ba0:	71 81       	ldd	r23, Z+1	; 0x01
     ba2:	82 81       	ldd	r24, Z+2	; 0x02
     ba4:	93 81       	ldd	r25, Z+3	; 0x03
     ba6:	49 db       	rcall	.-2414   	; 0x23a <fat_secToClust>
     ba8:	9b 01       	movw	r18, r22
     baa:	ac 01       	movw	r20, r24
     bac:	f5 01       	movw	r30, r10
     bae:	61 8b       	std	Z+17, r22	; 0x11
     bb0:	72 8b       	std	Z+18, r23	; 0x12
     bb2:	83 8b       	std	Z+19, r24	; 0x13
     bb4:	94 8b       	std	Z+20, r25	; 0x14
	chain.lastCluster = file.firstCluster;
     bb6:	f6 01       	movw	r30, r12
     bb8:	66 83       	std	Z+6, r22	; 0x06
     bba:	77 83       	std	Z+7, r23	; 0x07
     bbc:	80 87       	std	Z+8, r24	; 0x08
     bbe:	91 87       	std	Z+9, r25	; 0x09
	file.length = 0;
     bc0:	f5 01       	movw	r30, r10
     bc2:	12 86       	std	Z+10, r1	; 0x0a
     bc4:	13 86       	std	Z+11, r1	; 0x0b
     bc6:	14 86       	std	Z+12, r1	; 0x0c
     bc8:	15 86       	std	Z+13, r1	; 0x0d

	// eintraege machen. sfn = short file name, lfn = long file name
	fat_makeSfnDataEntry(name,attrib,file.firstCluster,0);
     bca:	e1 2c       	mov	r14, r1
     bcc:	f1 2c       	mov	r15, r1
     bce:	87 01       	movw	r16, r14
     bd0:	67 2d       	mov	r22, r7
     bd2:	89 81       	ldd	r24, Y+1	; 0x01
     bd4:	9a 81       	ldd	r25, Y+2	; 0x02
     bd6:	1a dc       	rcall	.-1996   	; 0x40c <fat_makeSfnDataEntry>
	#if (MMC_LFN_SUPPORT==FALSE)
		mmc_write_sector(file.currentSectorNr,fat.sector);			// wenn nur sfn eintrag, dann jetzt hier sektor mit sfn eintrag schreiben...
     bd8:	f5 01       	movw	r30, r10
     bda:	66 81       	ldd	r22, Z+6	; 0x06
     bdc:	77 81       	ldd	r23, Z+7	; 0x07
     bde:	80 85       	ldd	r24, Z+8	; 0x08
     be0:	91 85       	ldd	r25, Z+9	; 0x09
     be2:	40 e3       	ldi	r20, 0x30	; 48
     be4:	51 e0       	ldi	r21, 0x01	; 1
     be6:	57 d3       	rcall	.+1710   	; 0x1296 <mmc_write_sector>
	#else
		fat_makeLfnDataEntrys( name,need_rows-1);
	#endif

	// setzten des daten sektors der datei, damit jetzt darauf geschrieben werden kann
	file.currentSectorNr = chain.startSectors;
     be8:	f6 01       	movw	r30, r12
     bea:	80 81       	ld	r24, Z
     bec:	91 81       	ldd	r25, Z+1	; 0x01
     bee:	a2 81       	ldd	r26, Z+2	; 0x02
     bf0:	b3 81       	ldd	r27, Z+3	; 0x03
     bf2:	f5 01       	movw	r30, r10
     bf4:	86 83       	std	Z+6, r24	; 0x06
     bf6:	97 83       	std	Z+7, r25	; 0x07
     bf8:	a0 87       	std	Z+8, r26	; 0x08
     bfa:	b1 87       	std	Z+9, r27	; 0x09
}
     bfc:	0f 90       	pop	r0
     bfe:	0f 90       	pop	r0
     c00:	df 91       	pop	r29
     c02:	cf 91       	pop	r28
     c04:	1f 91       	pop	r17
     c06:	0f 91       	pop	r16
     c08:	ff 90       	pop	r15
     c0a:	ef 90       	pop	r14
     c0c:	df 90       	pop	r13
     c0e:	cf 90       	pop	r12
     c10:	bf 90       	pop	r11
     c12:	af 90       	pop	r10
     c14:	9f 90       	pop	r9
     c16:	8f 90       	pop	r8
     c18:	7f 90       	pop	r7
     c1a:	5f 90       	pop	r5
     c1c:	4f 90       	pop	r4
     c1e:	3f 90       	pop	r3
     c20:	2f 90       	pop	r2
     c22:	08 95       	ret

00000c24 <fat_setClusterChain>:
//***************************************************************************************************************
// verkettet ab startCluster bis einschlie√ülich endClu
// es ist wegen der fragmentierung der fat n√∂tig, sich den letzten bekannten cluster zu merken, 
// damit man bei weiteren cluster in einer reihe die alten cluster noch dazu verketten kann (so sind luecken im verketten m√∂glich).
//***************************************************************************************************************
void fat_setClusterChain(uint32_t startCluster, uint32_t endCluster){
     c24:	4f 92       	push	r4
     c26:	5f 92       	push	r5
     c28:	6f 92       	push	r6
     c2a:	7f 92       	push	r7
     c2c:	8f 92       	push	r8
     c2e:	9f 92       	push	r9
     c30:	af 92       	push	r10
     c32:	bf 92       	push	r11
     c34:	cf 92       	push	r12
     c36:	df 92       	push	r13
     c38:	ef 92       	push	r14
     c3a:	ff 92       	push	r15
     c3c:	6b 01       	movw	r12, r22
     c3e:	7c 01       	movw	r14, r24
     c40:	29 01       	movw	r4, r18
     c42:	3a 01       	movw	r6, r20

  fat_setCluster( chain.lastCluster ,startCluster );	// ende der chain setzen, bzw verketten der ketten
     c44:	60 91 36 03 	lds	r22, 0x0336
     c48:	70 91 37 03 	lds	r23, 0x0337
     c4c:	80 91 38 03 	lds	r24, 0x0338
     c50:	90 91 39 03 	lds	r25, 0x0339
     c54:	a7 01       	movw	r20, r14
     c56:	96 01       	movw	r18, r12
     c58:	13 de       	rcall	.-986    	; 0x880 <fat_setCluster>
  
  while( startCluster != endCluster ){
     c5a:	c4 14       	cp	r12, r4
     c5c:	d5 04       	cpc	r13, r5
     c5e:	e6 04       	cpc	r14, r6
     c60:	f7 04       	cpc	r15, r7
     c62:	99 f0       	breq	.+38     	; 0xc8a <fat_setClusterChain+0x66>
	 startCluster++;
     c64:	46 01       	movw	r8, r12
     c66:	57 01       	movw	r10, r14
     c68:	8f ef       	ldi	r24, 0xFF	; 255
     c6a:	88 1a       	sub	r8, r24
     c6c:	98 0a       	sbc	r9, r24
     c6e:	a8 0a       	sbc	r10, r24
     c70:	b8 0a       	sbc	r11, r24
	 fat_setCluster( startCluster-1 ,startCluster );// verketten der cluster der neuen kette
     c72:	a5 01       	movw	r20, r10
     c74:	94 01       	movw	r18, r8
     c76:	c7 01       	movw	r24, r14
     c78:	b6 01       	movw	r22, r12
     c7a:	02 de       	rcall	.-1020   	; 0x880 <fat_setCluster>
void fat_setClusterChain(uint32_t startCluster, uint32_t endCluster){

  fat_setCluster( chain.lastCluster ,startCluster );	// ende der chain setzen, bzw verketten der ketten
  
  while( startCluster != endCluster ){
	 startCluster++;
     c7c:	75 01       	movw	r14, r10
     c7e:	64 01       	movw	r12, r8
//***************************************************************************************************************
void fat_setClusterChain(uint32_t startCluster, uint32_t endCluster){

  fat_setCluster( chain.lastCluster ,startCluster );	// ende der chain setzen, bzw verketten der ketten
  
  while( startCluster != endCluster ){
     c80:	48 14       	cp	r4, r8
     c82:	59 04       	cpc	r5, r9
     c84:	6a 04       	cpc	r6, r10
     c86:	7b 04       	cpc	r7, r11
     c88:	69 f7       	brne	.-38     	; 0xc64 <fat_setClusterChain+0x40>
	 startCluster++;
	 fat_setCluster( startCluster-1 ,startCluster );// verketten der cluster der neuen kette
	 }
	 
  fat_setCluster( startCluster,0xfffffff );			// ende der chain setzen
     c8a:	2f ef       	ldi	r18, 0xFF	; 255
     c8c:	3f ef       	ldi	r19, 0xFF	; 255
     c8e:	4f ef       	ldi	r20, 0xFF	; 255
     c90:	5f e0       	ldi	r21, 0x0F	; 15
     c92:	c3 01       	movw	r24, r6
     c94:	b2 01       	movw	r22, r4
     c96:	f4 dd       	rcall	.-1048   	; 0x880 <fat_setCluster>
  chain.lastCluster = endCluster;					// ende cluster der kette updaten
     c98:	40 92 36 03 	sts	0x0336, r4
     c9c:	50 92 37 03 	sts	0x0337, r5
     ca0:	60 92 38 03 	sts	0x0338, r6
     ca4:	70 92 39 03 	sts	0x0339, r7
  fat.bufferDirty = FALSE;
     ca8:	10 92 1c 01 	sts	0x011C, r1
  mmc_write_sector (file.currentSectorNr,fat.sector);
     cac:	60 91 40 03 	lds	r22, 0x0340
     cb0:	70 91 41 03 	lds	r23, 0x0341
     cb4:	80 91 42 03 	lds	r24, 0x0342
     cb8:	90 91 43 03 	lds	r25, 0x0343
     cbc:	40 e3       	ldi	r20, 0x30	; 48
     cbe:	51 e0       	ldi	r21, 0x01	; 1
     cc0:	ea d2       	rcall	.+1492   	; 0x1296 <mmc_write_sector>
}
     cc2:	ff 90       	pop	r15
     cc4:	ef 90       	pop	r14
     cc6:	df 90       	pop	r13
     cc8:	cf 90       	pop	r12
     cca:	bf 90       	pop	r11
     ccc:	af 90       	pop	r10
     cce:	9f 90       	pop	r9
     cd0:	8f 90       	pop	r8
     cd2:	7f 90       	pop	r7
     cd4:	6f 90       	pop	r6
     cd6:	5f 90       	pop	r5
     cd8:	4f 90       	pop	r4
     cda:	08 95       	ret

00000cdc <ffileExsists>:
		#else
			fat_loadSector(file.currentSectorNr+1);				//2.) die bekannten in einer reihe reichen noch.(nur alle 512 bytes)
		#endif
	}
	return fat.sector[file.cntOfBytes++];
}
     cdc:	96 cc       	rjmp	.-1748   	; 0x60a <fat_loadFileDataFromDir>
     cde:	08 95       	ret

00000ce0 <ffopen>:
     ce0:	0f 93       	push	r16
     ce2:	1f 93       	push	r17
     ce4:	cf 93       	push	r28
     ce6:	df 93       	push	r29
     ce8:	ec 01       	movw	r28, r24
     cea:	16 2f       	mov	r17, r22
     cec:	8e dc       	rcall	.-1764   	; 0x60a <fat_loadFileDataFromDir>
     cee:	81 30       	cpi	r24, 0x01	; 1
     cf0:	c1 f4       	brne	.+48     	; 0xd22 <ffopen+0x42>
     cf2:	12 37       	cpi	r17, 0x72	; 114
     cf4:	51 f5       	brne	.+84     	; 0xd4a <ffopen+0x6a>
     cf6:	0a e3       	ldi	r16, 0x3A	; 58
     cf8:	13 e0       	ldi	r17, 0x03	; 3
     cfa:	f8 01       	movw	r30, r16
     cfc:	61 89       	ldd	r22, Z+17	; 0x11
     cfe:	72 89       	ldd	r23, Z+18	; 0x12
     d00:	83 89       	ldd	r24, Z+19	; 0x13
     d02:	94 89       	ldd	r25, Z+20	; 0x14
     d04:	ec dc       	rcall	.-1576   	; 0x6de <fat_getFatChainClustersInRow>
     d06:	f8 01       	movw	r30, r16
     d08:	d7 87       	std	Z+15, r29	; 0x0f
     d0a:	c6 87       	std	Z+14, r28	; 0x0e
     d0c:	60 91 30 03 	lds	r22, 0x0330
     d10:	70 91 31 03 	lds	r23, 0x0331
     d14:	80 91 32 03 	lds	r24, 0x0332
     d18:	90 91 33 03 	lds	r25, 0x0333
     d1c:	de d9       	rcall	.-3140   	; 0xda <fat_loadSector>
     d1e:	80 e0       	ldi	r24, 0x00	; 0
     d20:	19 c0       	rjmp	.+50     	; 0xd54 <ffopen+0x74>
     d22:	81 11       	cpse	r24, r1
     d24:	14 c0       	rjmp	.+40     	; 0xd4e <ffopen+0x6e>
     d26:	13 36       	cpi	r17, 0x63	; 99
     d28:	a1 f4       	brne	.+40     	; 0xd52 <ffopen+0x72>
     d2a:	d0 93 49 03 	sts	0x0349, r29
     d2e:	c0 93 48 03 	sts	0x0348, r28
     d32:	62 e0       	ldi	r22, 0x02	; 2
     d34:	70 e0       	ldi	r23, 0x00	; 0
     d36:	80 e0       	ldi	r24, 0x00	; 0
     d38:	90 e0       	ldi	r25, 0x00	; 0
     d3a:	44 dd       	rcall	.-1400   	; 0x7c4 <fat_getFreeClustersInRow>
     d3c:	60 e2       	ldi	r22, 0x20	; 32
     d3e:	ce 01       	movw	r24, r28
     d40:	1e de       	rcall	.-964    	; 0x97e <fat_makeFileEntry>
     d42:	81 e0       	ldi	r24, 0x01	; 1
     d44:	80 93 1c 01 	sts	0x011C, r24
     d48:	05 c0       	rjmp	.+10     	; 0xd54 <ffopen+0x74>
     d4a:	82 e0       	ldi	r24, 0x02	; 2
     d4c:	03 c0       	rjmp	.+6      	; 0xd54 <ffopen+0x74>
     d4e:	82 e0       	ldi	r24, 0x02	; 2
     d50:	01 c0       	rjmp	.+2      	; 0xd54 <ffopen+0x74>
     d52:	82 e0       	ldi	r24, 0x02	; 2
     d54:	df 91       	pop	r29
     d56:	cf 91       	pop	r28
     d58:	1f 91       	pop	r17
     d5a:	0f 91       	pop	r16
     d5c:	08 95       	ret

00000d5e <fflushFileData>:
     d5e:	4f 92       	push	r4
     d60:	5f 92       	push	r5
     d62:	6f 92       	push	r6
     d64:	7f 92       	push	r7
     d66:	8f 92       	push	r8
     d68:	9f 92       	push	r9
     d6a:	af 92       	push	r10
     d6c:	bf 92       	push	r11
     d6e:	cf 92       	push	r12
     d70:	df 92       	push	r13
     d72:	ef 92       	push	r14
     d74:	ff 92       	push	r15
     d76:	0f 93       	push	r16
     d78:	1f 93       	push	r17
     d7a:	cf 93       	push	r28
     d7c:	df 93       	push	r29
     d7e:	aa e3       	ldi	r26, 0x3A	; 58
     d80:	b3 e0       	ldi	r27, 0x03	; 3
     d82:	ed 91       	ld	r30, X+
     d84:	fc 91       	ld	r31, X
     d86:	11 97       	sbiw	r26, 0x01	; 1
     d88:	12 96       	adiw	r26, 0x02	; 2
     d8a:	cd 90       	ld	r12, X+
     d8c:	dd 90       	ld	r13, X+
     d8e:	ed 90       	ld	r14, X+
     d90:	fc 90       	ld	r15, X
     d92:	15 97       	sbiw	r26, 0x05	; 5
     d94:	ce 0e       	add	r12, r30
     d96:	df 1e       	adc	r13, r31
     d98:	e1 1c       	adc	r14, r1
     d9a:	f1 1c       	adc	r15, r1
     d9c:	1a 96       	adiw	r26, 0x0a	; 10
     d9e:	8d 91       	ld	r24, X+
     da0:	9d 91       	ld	r25, X+
     da2:	0d 90       	ld	r0, X+
     da4:	bc 91       	ld	r27, X
     da6:	a0 2d       	mov	r26, r0
     da8:	8c 15       	cp	r24, r12
     daa:	9d 05       	cpc	r25, r13
     dac:	ae 05       	cpc	r26, r14
     dae:	bf 05       	cpc	r27, r15
     db0:	08 f0       	brcs	.+2      	; 0xdb4 <fflushFileData+0x56>
     db2:	5a c0       	rjmp	.+180    	; 0xe68 <fflushFileData+0x10a>
     db4:	80 90 40 03 	lds	r8, 0x0340
     db8:	90 90 41 03 	lds	r9, 0x0341
     dbc:	a0 90 42 03 	lds	r10, 0x0342
     dc0:	b0 90 43 03 	lds	r11, 0x0343
     dc4:	30 97       	sbiw	r30, 0x00	; 0
     dc6:	09 f0       	breq	.+2      	; 0xdca <fflushFileData+0x6c>
     dc8:	59 c0       	rjmp	.+178    	; 0xe7c <fflushFileData+0x11e>
     dca:	62 c0       	rjmp	.+196    	; 0xe90 <fflushFileData+0x132>
     dcc:	11 92       	st	Z+, r1
     dce:	e8 17       	cp	r30, r24
     dd0:	f9 07       	cpc	r31, r25
     dd2:	e1 f7       	brne	.-8      	; 0xdcc <fflushFileData+0x6e>
     dd4:	81 e0       	ldi	r24, 0x01	; 1
     dd6:	80 93 1c 01 	sts	0x011C, r24
     dda:	10 c0       	rjmp	.+32     	; 0xdfc <fflushFileData+0x9e>
     ddc:	2e da       	rcall	.-2980   	; 0x23a <fat_secToClust>
     dde:	2b 01       	movw	r4, r22
     de0:	3c 01       	movw	r6, r24
     de2:	60 91 30 03 	lds	r22, 0x0330
     de6:	70 91 31 03 	lds	r23, 0x0331
     dea:	80 91 32 03 	lds	r24, 0x0332
     dee:	90 91 33 03 	lds	r25, 0x0333
     df2:	23 da       	rcall	.-3002   	; 0x23a <fat_secToClust>
     df4:	a3 01       	movw	r20, r6
     df6:	92 01       	movw	r18, r4
     df8:	15 df       	rcall	.-470    	; 0xc24 <fat_setClusterChain>
     dfa:	11 c0       	rjmp	.+34     	; 0xe1e <fflushFileData+0xc0>
     dfc:	c5 01       	movw	r24, r10
     dfe:	b4 01       	movw	r22, r8
     e00:	1c da       	rcall	.-3016   	; 0x23a <fat_secToClust>
     e02:	2b 01       	movw	r4, r22
     e04:	3c 01       	movw	r6, r24
     e06:	60 91 30 03 	lds	r22, 0x0330
     e0a:	70 91 31 03 	lds	r23, 0x0331
     e0e:	80 91 32 03 	lds	r24, 0x0332
     e12:	90 91 33 03 	lds	r25, 0x0333
     e16:	11 da       	rcall	.-3038   	; 0x23a <fat_secToClust>
     e18:	a3 01       	movw	r20, r6
     e1a:	92 01       	movw	r18, r4
     e1c:	03 df       	rcall	.-506    	; 0xc24 <fat_setClusterChain>
     e1e:	ca e3       	ldi	r28, 0x3A	; 58
     e20:	d3 e0       	ldi	r29, 0x03	; 3
     e22:	6d 89       	ldd	r22, Y+21	; 0x15
     e24:	7e 89       	ldd	r23, Y+22	; 0x16
     e26:	8f 89       	ldd	r24, Y+23	; 0x17
     e28:	98 8d       	ldd	r25, Y+24	; 0x18
     e2a:	57 d9       	rcall	.-3410   	; 0xda <fat_loadSector>
     e2c:	e8 89       	ldd	r30, Y+16	; 0x10
     e2e:	80 e2       	ldi	r24, 0x20	; 32
     e30:	e8 9f       	mul	r30, r24
     e32:	f0 01       	movw	r30, r0
     e34:	11 24       	eor	r1, r1
     e36:	e4 5b       	subi	r30, 0xB4	; 180
     e38:	fe 4f       	sbci	r31, 0xFE	; 254
     e3a:	c0 82       	st	Z, r12
     e3c:	d1 82       	std	Z+1, r13	; 0x01
     e3e:	e2 82       	std	Z+2, r14	; 0x02
     e40:	f3 82       	std	Z+3, r15	; 0x03
     e42:	ca 86       	std	Y+10, r12	; 0x0a
     e44:	db 86       	std	Y+11, r13	; 0x0b
     e46:	ec 86       	std	Y+12, r14	; 0x0c
     e48:	fd 86       	std	Y+13, r15	; 0x0d
     e4a:	80 92 30 03 	sts	0x0330, r8
     e4e:	90 92 31 03 	sts	0x0331, r9
     e52:	a0 92 32 03 	sts	0x0332, r10
     e56:	b0 92 33 03 	sts	0x0333, r11
     e5a:	81 e0       	ldi	r24, 0x01	; 1
     e5c:	80 93 1c 01 	sts	0x011C, r24
     e60:	c5 01       	movw	r24, r10
     e62:	b4 01       	movw	r22, r8
     e64:	3a d9       	rcall	.-3468   	; 0xda <fat_loadSector>
     e66:	29 c0       	rjmp	.+82     	; 0xeba <fflushFileData+0x15c>
     e68:	60 91 40 03 	lds	r22, 0x0340
     e6c:	70 91 41 03 	lds	r23, 0x0341
     e70:	80 91 42 03 	lds	r24, 0x0342
     e74:	90 91 43 03 	lds	r25, 0x0343
     e78:	29 d9       	rcall	.-3502   	; 0xcc <fat_writeSector>
     e7a:	1f c0       	rjmp	.+62     	; 0xeba <fflushFileData+0x15c>
     e7c:	e1 15       	cp	r30, r1
     e7e:	82 e0       	ldi	r24, 0x02	; 2
     e80:	f8 07       	cpc	r31, r24
     e82:	08 f0       	brcs	.+2      	; 0xe86 <fflushFileData+0x128>
     e84:	bb cf       	rjmp	.-138    	; 0xdfc <fflushFileData+0x9e>
     e86:	e0 5d       	subi	r30, 0xD0	; 208
     e88:	fe 4f       	sbci	r31, 0xFE	; 254
     e8a:	80 e3       	ldi	r24, 0x30	; 48
     e8c:	93 e0       	ldi	r25, 0x03	; 3
     e8e:	9e cf       	rjmp	.-196    	; 0xdcc <fflushFileData+0x6e>
     e90:	c5 01       	movw	r24, r10
     e92:	b4 01       	movw	r22, r8
     e94:	61 50       	subi	r22, 0x01	; 1
     e96:	71 09       	sbc	r23, r1
     e98:	81 09       	sbc	r24, r1
     e9a:	91 09       	sbc	r25, r1
     e9c:	00 91 30 03 	lds	r16, 0x0330
     ea0:	10 91 31 03 	lds	r17, 0x0331
     ea4:	20 91 32 03 	lds	r18, 0x0332
     ea8:	30 91 33 03 	lds	r19, 0x0333
     eac:	60 17       	cp	r22, r16
     eae:	71 07       	cpc	r23, r17
     eb0:	82 07       	cpc	r24, r18
     eb2:	93 07       	cpc	r25, r19
     eb4:	08 f4       	brcc	.+2      	; 0xeb8 <fflushFileData+0x15a>
     eb6:	b3 cf       	rjmp	.-154    	; 0xe1e <fflushFileData+0xc0>
     eb8:	91 cf       	rjmp	.-222    	; 0xddc <fflushFileData+0x7e>
     eba:	df 91       	pop	r29
     ebc:	cf 91       	pop	r28
     ebe:	1f 91       	pop	r17
     ec0:	0f 91       	pop	r16
     ec2:	ff 90       	pop	r15
     ec4:	ef 90       	pop	r14
     ec6:	df 90       	pop	r13
     ec8:	cf 90       	pop	r12
     eca:	bf 90       	pop	r11
     ecc:	af 90       	pop	r10
     ece:	9f 90       	pop	r9
     ed0:	8f 90       	pop	r8
     ed2:	7f 90       	pop	r7
     ed4:	6f 90       	pop	r6
     ed6:	5f 90       	pop	r5
     ed8:	4f 90       	pop	r4
     eda:	08 95       	ret

00000edc <ffclose>:
     edc:	40 df       	rcall	.-384    	; 0xd5e <fflushFileData>
     ede:	ea e3       	ldi	r30, 0x3A	; 58
     ee0:	f3 e0       	ldi	r31, 0x03	; 3
     ee2:	11 82       	std	Z+1, r1	; 0x01
     ee4:	10 82       	st	Z, r1
     ee6:	12 82       	std	Z+2, r1	; 0x02
     ee8:	13 82       	std	Z+3, r1	; 0x03
     eea:	14 82       	std	Z+4, r1	; 0x04
     eec:	15 82       	std	Z+5, r1	; 0x05
     eee:	81 e0       	ldi	r24, 0x01	; 1
     ef0:	08 95       	ret

00000ef2 <ffseek>:
     ef2:	8f 92       	push	r8
     ef4:	9f 92       	push	r9
     ef6:	af 92       	push	r10
     ef8:	bf 92       	push	r11
     efa:	cf 92       	push	r12
     efc:	df 92       	push	r13
     efe:	ef 92       	push	r14
     f00:	ff 92       	push	r15
     f02:	0f 93       	push	r16
     f04:	1f 93       	push	r17
     f06:	cf 93       	push	r28
     f08:	df 93       	push	r29
     f0a:	4b 01       	movw	r8, r22
     f0c:	5c 01       	movw	r10, r24
     f0e:	27 df       	rcall	.-434    	; 0xd5e <fflushFileData>
     f10:	ca e3       	ldi	r28, 0x3A	; 58
     f12:	d3 e0       	ldi	r29, 0x03	; 3
     f14:	69 89       	ldd	r22, Y+17	; 0x11
     f16:	7a 89       	ldd	r23, Y+18	; 0x12
     f18:	8b 89       	ldd	r24, Y+19	; 0x13
     f1a:	9c 89       	ldd	r25, Y+20	; 0x14
     f1c:	e0 db       	rcall	.-2112   	; 0x6de <fat_getFatChainClustersInRow>
     f1e:	40 91 30 03 	lds	r20, 0x0330
     f22:	50 91 31 03 	lds	r21, 0x0331
     f26:	60 91 32 03 	lds	r22, 0x0332
     f2a:	70 91 33 03 	lds	r23, 0x0333
     f2e:	1a 82       	std	Y+2, r1	; 0x02
     f30:	1b 82       	std	Y+3, r1	; 0x03
     f32:	1c 82       	std	Y+4, r1	; 0x04
     f34:	1d 82       	std	Y+5, r1	; 0x05
     f36:	81 14       	cp	r8, r1
     f38:	82 e0       	ldi	r24, 0x02	; 2
     f3a:	98 06       	cpc	r9, r24
     f3c:	a1 04       	cpc	r10, r1
     f3e:	b1 04       	cpc	r11, r1
     f40:	a8 f1       	brcs	.+106    	; 0xfac <ffseek+0xba>
     f42:	75 01       	movw	r14, r10
     f44:	64 01       	movw	r12, r8
     f46:	8e 01       	movw	r16, r28
     f48:	c0 e3       	ldi	r28, 0x30	; 48
     f4a:	d3 e0       	ldi	r29, 0x03	; 3
     f4c:	e2 e0       	ldi	r30, 0x02	; 2
     f4e:	de 1a       	sub	r13, r30
     f50:	e1 08       	sbc	r14, r1
     f52:	f1 08       	sbc	r15, r1
     f54:	f8 01       	movw	r30, r16
     f56:	82 81       	ldd	r24, Z+2	; 0x02
     f58:	93 81       	ldd	r25, Z+3	; 0x03
     f5a:	a4 81       	ldd	r26, Z+4	; 0x04
     f5c:	b5 81       	ldd	r27, Z+5	; 0x05
     f5e:	9e 5f       	subi	r25, 0xFE	; 254
     f60:	af 4f       	sbci	r26, 0xFF	; 255
     f62:	bf 4f       	sbci	r27, 0xFF	; 255
     f64:	82 83       	std	Z+2, r24	; 0x02
     f66:	93 83       	std	Z+3, r25	; 0x03
     f68:	a4 83       	std	Z+4, r26	; 0x04
     f6a:	b5 83       	std	Z+5, r27	; 0x05
     f6c:	8c 81       	ldd	r24, Y+4	; 0x04
     f6e:	9d 81       	ldd	r25, Y+5	; 0x05
     f70:	01 97       	sbiw	r24, 0x01	; 1
     f72:	9d 83       	std	Y+5, r25	; 0x05
     f74:	8c 83       	std	Y+4, r24	; 0x04
     f76:	89 2b       	or	r24, r25
     f78:	29 f0       	breq	.+10     	; 0xf84 <ffseek+0x92>
     f7a:	4f 5f       	subi	r20, 0xFF	; 255
     f7c:	5f 4f       	sbci	r21, 0xFF	; 255
     f7e:	6f 4f       	sbci	r22, 0xFF	; 255
     f80:	7f 4f       	sbci	r23, 0xFF	; 255
     f82:	0a c0       	rjmp	.+20     	; 0xf98 <ffseek+0xa6>
     f84:	6e 81       	ldd	r22, Y+6	; 0x06
     f86:	7f 81       	ldd	r23, Y+7	; 0x07
     f88:	88 85       	ldd	r24, Y+8	; 0x08
     f8a:	99 85       	ldd	r25, Y+9	; 0x09
     f8c:	ca da       	rcall	.-2668   	; 0x522 <fat_getNextCluster>
     f8e:	a7 db       	rcall	.-2226   	; 0x6de <fat_getFatChainClustersInRow>
     f90:	48 81       	ld	r20, Y
     f92:	59 81       	ldd	r21, Y+1	; 0x01
     f94:	6a 81       	ldd	r22, Y+2	; 0x02
     f96:	7b 81       	ldd	r23, Y+3	; 0x03
     f98:	c1 14       	cp	r12, r1
     f9a:	f2 e0       	ldi	r31, 0x02	; 2
     f9c:	df 06       	cpc	r13, r31
     f9e:	e1 04       	cpc	r14, r1
     fa0:	f1 04       	cpc	r15, r1
     fa2:	a0 f6       	brcc	.-88     	; 0xf4c <ffseek+0x5a>
     fa4:	81 e0       	ldi	r24, 0x01	; 1
     fa6:	98 22       	and	r9, r24
     fa8:	aa 24       	eor	r10, r10
     faa:	bb 24       	eor	r11, r11
     fac:	cb 01       	movw	r24, r22
     fae:	ba 01       	movw	r22, r20
     fb0:	94 d8       	rcall	.-3800   	; 0xda <fat_loadSector>
     fb2:	90 92 3b 03 	sts	0x033B, r9
     fb6:	80 92 3a 03 	sts	0x033A, r8
     fba:	df 91       	pop	r29
     fbc:	cf 91       	pop	r28
     fbe:	1f 91       	pop	r17
     fc0:	0f 91       	pop	r16
     fc2:	ff 90       	pop	r15
     fc4:	ef 90       	pop	r14
     fc6:	df 90       	pop	r13
     fc8:	cf 90       	pop	r12
     fca:	bf 90       	pop	r11
     fcc:	af 90       	pop	r10
     fce:	9f 90       	pop	r9
     fd0:	8f 90       	pop	r8
     fd2:	08 95       	ret

00000fd4 <ffwrite>:
// sektoren bekannt sein(datenmenge zu gross), werden die alten verkettet und neue gesucht. es ist noetig sich den letzten bekannten einer
// kette zu merken -> file.lastCluster, um auch nicht zusammenhaengende cluster verketten zu koennen (fat_setClusterChain macht das)!
// es ist beim ueberschreiben noetig, die schon beschriebenen sektoren der datei zu laden, damit man die richtigen daten
// hat. das ist bloed, weil so ein daten overhead von 50% entsteht. da lesen aber schneller als schreiben geht, verliert man nicht 50% an geschwindigkeit.
//*******************************************************************************************************************************
void ffwrite( uint8_t c){
     fd4:	cf 92       	push	r12
     fd6:	df 92       	push	r13
     fd8:	ef 92       	push	r14
     fda:	ff 92       	push	r15
     fdc:	0f 93       	push	r16
     fde:	1f 93       	push	r17
     fe0:	cf 93       	push	r28
     fe2:	df 93       	push	r29

	fat.sector[ file.cntOfBytes++ ]=c;							// schreiben des chars auf den puffer sector und zaehler erhoehen (pre-increment)
     fe4:	ea e3       	ldi	r30, 0x3A	; 58
     fe6:	f3 e0       	ldi	r31, 0x03	; 3
     fe8:	20 81       	ld	r18, Z
     fea:	31 81       	ldd	r19, Z+1	; 0x01
     fec:	a9 01       	movw	r20, r18
     fee:	4f 5f       	subi	r20, 0xFF	; 255
     ff0:	5f 4f       	sbci	r21, 0xFF	; 255
     ff2:	51 83       	std	Z+1, r21	; 0x01
     ff4:	40 83       	st	Z, r20
     ff6:	f9 01       	movw	r30, r18
     ff8:	e8 5e       	subi	r30, 0xE8	; 232
     ffa:	fe 4f       	sbci	r31, 0xFE	; 254
     ffc:	80 8f       	std	Z+24, r24	; 0x18

	if( file.cntOfBytes==512 ){									/** SEKTOR VOLL ( 3 moeglichkeiten ab hier !) **/
     ffe:	41 15       	cp	r20, r1
    1000:	52 40       	sbci	r21, 0x02	; 2
    1002:	09 f0       	breq	.+2      	; 0x1006 <ffwrite+0x32>
    1004:	90 c0       	rjmp	.+288    	; 0x1126 <ffwrite+0x152>

		file.cntOfBytes = 0;	  									// ruecksetzen des sektor byte zaehlers.
    1006:	ca e3       	ldi	r28, 0x3A	; 58
    1008:	d3 e0       	ldi	r29, 0x03	; 3
    100a:	19 82       	std	Y+1, r1	; 0x01
    100c:	18 82       	st	Y, r1
		file.seek += 512;											// position in der datei erhoehen, weil grade 512 bytes geschrieben.
    100e:	8a 81       	ldd	r24, Y+2	; 0x02
    1010:	9b 81       	ldd	r25, Y+3	; 0x03
    1012:	ac 81       	ldd	r26, Y+4	; 0x04
    1014:	bd 81       	ldd	r27, Y+5	; 0x05
    1016:	9e 5f       	subi	r25, 0xFE	; 254
    1018:	af 4f       	sbci	r26, 0xFF	; 255
    101a:	bf 4f       	sbci	r27, 0xFF	; 255
    101c:	8a 83       	std	Y+2, r24	; 0x02
    101e:	9b 83       	std	Y+3, r25	; 0x03
    1020:	ac 83       	std	Y+4, r26	; 0x04
    1022:	bd 83       	std	Y+5, r27	; 0x05
		mmc_write_sector( file.currentSectorNr,fat.sector );	/** 1.) vollen sektor auf karte schreiben, es sind noch freie sektoren bekannt**/
    1024:	6e 81       	ldd	r22, Y+6	; 0x06
    1026:	7f 81       	ldd	r23, Y+7	; 0x07
    1028:	88 85       	ldd	r24, Y+8	; 0x08
    102a:	99 85       	ldd	r25, Y+9	; 0x09
    102c:	40 e3       	ldi	r20, 0x30	; 48
    102e:	51 e0       	ldi	r21, 0x01	; 1
    1030:	32 d1       	rcall	.+612    	; 0x1296 <mmc_write_sector>
		file.currentSectorNr +=1;									// naechsten sektor zum beschreiben.
    1032:	4e 81       	ldd	r20, Y+6	; 0x06
    1034:	5f 81       	ldd	r21, Y+7	; 0x07
    1036:	68 85       	ldd	r22, Y+8	; 0x08
    1038:	79 85       	ldd	r23, Y+9	; 0x09
    103a:	db 01       	movw	r26, r22
    103c:	ca 01       	movw	r24, r20
    103e:	01 96       	adiw	r24, 0x01	; 1
    1040:	a1 1d       	adc	r26, r1
    1042:	b1 1d       	adc	r27, r1
    1044:	8e 83       	std	Y+6, r24	; 0x06
    1046:	9f 83       	std	Y+7, r25	; 0x07
    1048:	a8 87       	std	Y+8, r26	; 0x08
    104a:	b9 87       	std	Y+9, r27	; 0x09
		chain.cntSecs -=1;											// einen freien sektor zum beschreiben weniger.
    104c:	e0 e3       	ldi	r30, 0x30	; 48
    104e:	f3 e0       	ldi	r31, 0x03	; 3
    1050:	84 81       	ldd	r24, Z+4	; 0x04
    1052:	95 81       	ldd	r25, Z+5	; 0x05
    1054:	01 97       	sbiw	r24, 0x01	; 1
    1056:	95 83       	std	Z+5, r25	; 0x05
    1058:	84 83       	std	Z+4, r24	; 0x04

		if( chain.cntSecs==0 ){										// ende der bekannten in einer reihe erreicht (freie oder verkettete)
    105a:	89 2b       	or	r24, r25
    105c:	09 f0       	breq	.+2      	; 0x1060 <ffwrite+0x8c>
    105e:	49 c0       	rjmp	.+146    	; 0x10f2 <ffwrite+0x11e>
			if( file.seek > file.length ){						/** 2.) ausserhalb der datei, jetzt ist es noetig die beschriebenen cluster zu verketten und neue freie zu suchen	**/
    1060:	0a 81       	ldd	r16, Y+2	; 0x02
    1062:	1b 81       	ldd	r17, Y+3	; 0x03
    1064:	2c 81       	ldd	r18, Y+4	; 0x04
    1066:	3d 81       	ldd	r19, Y+5	; 0x05
    1068:	8a 85       	ldd	r24, Y+10	; 0x0a
    106a:	9b 85       	ldd	r25, Y+11	; 0x0b
    106c:	ac 85       	ldd	r26, Y+12	; 0x0c
    106e:	bd 85       	ldd	r27, Y+13	; 0x0d
    1070:	80 17       	cp	r24, r16
    1072:	91 07       	cpc	r25, r17
    1074:	a2 07       	cpc	r26, r18
    1076:	b3 07       	cpc	r27, r19
    1078:	40 f5       	brcc	.+80     	; 0x10ca <ffwrite+0xf6>
				fat.bufferDirty = FALSE;							// damit nicht durch z.b. fat_getNextCluster nochmal dieser sektor gescchrieben wird, siehe fat_loadSector
    107a:	08 e1       	ldi	r16, 0x18	; 24
    107c:	11 e0       	ldi	r17, 0x01	; 1
    107e:	f8 01       	movw	r30, r16
    1080:	14 82       	std	Z+4, r1	; 0x04
				fat_setClusterChain( fat_secToClust(chain.startSectors) , fat_secToClust(file.currentSectorNr-1) );	// verketten der beschriebenen.
    1082:	cb 01       	movw	r24, r22
    1084:	ba 01       	movw	r22, r20
    1086:	d9 d8       	rcall	.-3662   	; 0x23a <fat_secToClust>
    1088:	6b 01       	movw	r12, r22
    108a:	7c 01       	movw	r14, r24
    108c:	c0 e3       	ldi	r28, 0x30	; 48
    108e:	d3 e0       	ldi	r29, 0x03	; 3
    1090:	68 81       	ld	r22, Y
    1092:	79 81       	ldd	r23, Y+1	; 0x01
    1094:	8a 81       	ldd	r24, Y+2	; 0x02
    1096:	9b 81       	ldd	r25, Y+3	; 0x03
    1098:	d0 d8       	rcall	.-3680   	; 0x23a <fat_secToClust>
    109a:	a7 01       	movw	r20, r14
    109c:	96 01       	movw	r18, r12
    109e:	c2 dd       	rcall	.-1148   	; 0xc24 <fat_setClusterChain>
				fat_getFreeClustersInRow( chain.lastCluster );		// neue leere sektoren benoetigt, also suchen.
    10a0:	6e 81       	ldd	r22, Y+6	; 0x06
    10a2:	7f 81       	ldd	r23, Y+7	; 0x07
    10a4:	88 85       	ldd	r24, Y+8	; 0x08
    10a6:	99 85       	ldd	r25, Y+9	; 0x09
    10a8:	8d db       	rcall	.-2278   	; 0x7c4 <fat_getFreeClustersInRow>
				file.currentSectorNr = chain.startSectors;				// setzen des 1. sektors der neuen reihe zum schreiben.
    10aa:	88 81       	ld	r24, Y
    10ac:	99 81       	ldd	r25, Y+1	; 0x01
    10ae:	aa 81       	ldd	r26, Y+2	; 0x02
    10b0:	bb 81       	ldd	r27, Y+3	; 0x03
    10b2:	80 93 40 03 	sts	0x0340, r24
    10b6:	90 93 41 03 	sts	0x0341, r25
    10ba:	a0 93 42 03 	sts	0x0342, r26
    10be:	b0 93 43 03 	sts	0x0343, r27
				fat.bufferDirty = TRUE;
    10c2:	81 e0       	ldi	r24, 0x01	; 1
    10c4:	f8 01       	movw	r30, r16
    10c6:	84 83       	std	Z+4, r24	; 0x04
    10c8:	14 c0       	rjmp	.+40     	; 0x10f2 <ffwrite+0x11e>
			}
			else {												/** 3.) noch innerhalb der datei, aber es muessen neue verkettete cluster gesucht werden, zum ueberschreiben **/
				fat_getFatChainClustersInRow( fat_getNextCluster(chain.lastCluster) );		// noch innerhalb der datei, deshlab verkettete suchen.
    10ca:	c0 e3       	ldi	r28, 0x30	; 48
    10cc:	d3 e0       	ldi	r29, 0x03	; 3
    10ce:	6e 81       	ldd	r22, Y+6	; 0x06
    10d0:	7f 81       	ldd	r23, Y+7	; 0x07
    10d2:	88 85       	ldd	r24, Y+8	; 0x08
    10d4:	99 85       	ldd	r25, Y+9	; 0x09
    10d6:	25 da       	rcall	.-2998   	; 0x522 <fat_getNextCluster>
    10d8:	02 db       	rcall	.-2556   	; 0x6de <fat_getFatChainClustersInRow>
				file.currentSectorNr = chain.startSectors;				// setzen des 1. sektors der neuen reihe zum schreiben.
    10da:	88 81       	ld	r24, Y
    10dc:	99 81       	ldd	r25, Y+1	; 0x01
    10de:	aa 81       	ldd	r26, Y+2	; 0x02
    10e0:	bb 81       	ldd	r27, Y+3	; 0x03
    10e2:	80 93 40 03 	sts	0x0340, r24
    10e6:	90 93 41 03 	sts	0x0341, r25
    10ea:	a0 93 42 03 	sts	0x0342, r26
    10ee:	b0 93 43 03 	sts	0x0343, r27
			}
		}

		if( file.seek <= file.length ){
    10f2:	ea e3       	ldi	r30, 0x3A	; 58
    10f4:	f3 e0       	ldi	r31, 0x03	; 3
    10f6:	42 81       	ldd	r20, Z+2	; 0x02
    10f8:	53 81       	ldd	r21, Z+3	; 0x03
    10fa:	64 81       	ldd	r22, Z+4	; 0x04
    10fc:	75 81       	ldd	r23, Z+5	; 0x05
    10fe:	82 85       	ldd	r24, Z+10	; 0x0a
    1100:	93 85       	ldd	r25, Z+11	; 0x0b
    1102:	a4 85       	ldd	r26, Z+12	; 0x0c
    1104:	b5 85       	ldd	r27, Z+13	; 0x0d
    1106:	84 17       	cp	r24, r20
    1108:	95 07       	cpc	r25, r21
    110a:	a6 07       	cpc	r26, r22
    110c:	b7 07       	cpc	r27, r23
    110e:	58 f0       	brcs	.+22     	; 0x1126 <ffwrite+0x152>
			mmc_read_sector(file.currentSectorNr,fat.sector);		// wegen ueberschreiben, muss der zu beschreibende sektor geladen werden (zustand 3)...
    1110:	60 91 40 03 	lds	r22, 0x0340
    1114:	70 91 41 03 	lds	r23, 0x0341
    1118:	80 91 42 03 	lds	r24, 0x0342
    111c:	90 91 43 03 	lds	r25, 0x0343
    1120:	40 e3       	ldi	r20, 0x30	; 48
    1122:	51 e0       	ldi	r21, 0x01	; 1
    1124:	f9 d0       	rcall	.+498    	; 0x1318 <mmc_read_sector>
		}
	}
}
    1126:	df 91       	pop	r29
    1128:	cf 91       	pop	r28
    112a:	1f 91       	pop	r17
    112c:	0f 91       	pop	r16
    112e:	ff 90       	pop	r15
    1130:	ef 90       	pop	r14
    1132:	df 90       	pop	r13
    1134:	cf 90       	pop	r12
    1136:	08 95       	ret

00001138 <ffwrites>:
// *******************************************************************************************************************************
// schreibt string auf karte, siehe ffwrite()
// ein string sind zeichen, '\0' bzw. 0x00 bzw dezimal 0 wird als string ende gewertet !!
// wenn sonderzeichen auf die karte sollen, lieber ffwrite benutzen!
// *******************************************************************************************************************************
void ffwrites( uint8_t *s ){
    1138:	cf 93       	push	r28
    113a:	df 93       	push	r29
    113c:	ec 01       	movw	r28, r24
    while (*s){
    113e:	88 81       	ld	r24, Y
    1140:	88 23       	and	r24, r24
    1142:	29 f0       	breq	.+10     	; 0x114e <ffwrites+0x16>
    1144:	21 96       	adiw	r28, 0x01	; 1
    	ffwrite(*s++);
    1146:	46 df       	rcall	.-372    	; 0xfd4 <ffwrite>
// schreibt string auf karte, siehe ffwrite()
// ein string sind zeichen, '\0' bzw. 0x00 bzw dezimal 0 wird als string ende gewertet !!
// wenn sonderzeichen auf die karte sollen, lieber ffwrite benutzen!
// *******************************************************************************************************************************
void ffwrites( uint8_t *s ){
    while (*s){
    1148:	89 91       	ld	r24, Y+
    114a:	81 11       	cpse	r24, r1
    114c:	fc cf       	rjmp	.-8      	; 0x1146 <ffwrites+0xe>
    	ffwrite(*s++);
    }
    fat.bufferDirty = TRUE;
    114e:	81 e0       	ldi	r24, 0x01	; 1
    1150:	80 93 1c 01 	sts	0x011C, r24
  }
    1154:	df 91       	pop	r29
    1156:	cf 91       	pop	r28
    1158:	08 95       	ret

0000115a <main>:
	#include "file.h"
	#include "fat.h"
};

int main(void)
{
    115a:	cf 93       	push	r28
    115c:	df 93       	push	r29
    115e:	cd b7       	in	r28, 0x3d	; 61
    1160:	de b7       	in	r29, 0x3e	; 62
    1162:	66 97       	sbiw	r28, 0x16	; 22
    1164:	0f b6       	in	r0, 0x3f	; 63
    1166:	f8 94       	cli
    1168:	de bf       	out	0x3e, r29	; 62
    116a:	0f be       	out	0x3f, r0	; 63
    116c:	cd bf       	out	0x3d, r28	; 61
	
	// Dateinamen muessen in diesem Format sein
	// Man beachte die Gr√∂√üe des Arrays und die Gro√übuchstaben!
	unsigned char file_name[] = "test.txt";
    116e:	89 e0       	ldi	r24, 0x09	; 9
    1170:	e0 e0       	ldi	r30, 0x00	; 0
    1172:	f1 e0       	ldi	r31, 0x01	; 1
    1174:	de 01       	movw	r26, r28
    1176:	1e 96       	adiw	r26, 0x0e	; 14
    1178:	01 90       	ld	r0, Z+
    117a:	0d 92       	st	X+, r0
    117c:	8a 95       	dec	r24
    117e:	e1 f7       	brne	.-8      	; 0x1178 <main+0x1e>
	
	// String zum in die Datei schreiben.
	uint8_t str[] = "Hallo Datei!";
    1180:	8d e0       	ldi	r24, 0x0D	; 13
    1182:	e9 e0       	ldi	r30, 0x09	; 9
    1184:	f1 e0       	ldi	r31, 0x01	; 1
    1186:	de 01       	movw	r26, r28
    1188:	11 96       	adiw	r26, 0x01	; 1
    118a:	01 90       	ld	r0, Z+
    118c:	0d 92       	st	X+, r0
    118e:	8a 95       	dec	r24
    1190:	e1 f7       	brne	.-8      	; 0x118a <main+0x30>
	
	// Wenn Datei nicht existiert
	if (false == ffileExsists(file_name))
    1192:	ce 01       	movw	r24, r28
    1194:	0e 96       	adiw	r24, 0x0e	; 14
    1196:	a2 dd       	rcall	.-1212   	; 0xcdc <ffileExsists>
    1198:	81 11       	cpse	r24, r1
    119a:	0c c0       	rjmp	.+24     	; 0x11b4 <main+0x5a>
	{
		ffopen(file_name, 'c'); //Datei existiert nicht, also anlegen
    119c:	63 e6       	ldi	r22, 0x63	; 99
    119e:	ce 01       	movw	r24, r28
    11a0:	0e 96       	adiw	r24, 0x0e	; 14
    11a2:	9e dd       	rcall	.-1220   	; 0xce0 <ffopen>
		// Schreibt String auf Karte.
		// Nur richtige Strings koennen mit ffwrites geschrieben werden.
		ffwrites (str);
    11a4:	ce 01       	movw	r24, r28
    11a6:	01 96       	adiw	r24, 0x01	; 1
    11a8:	c7 df       	rcall	.-114    	; 0x1138 <ffwrites>
		
		// Neue Zeile in der Datei.
		// Schreibt Zeilenumbruch in die Text Datei.
		ffwrite ('\n');
    11aa:	8a e0       	ldi	r24, 0x0A	; 10
    11ac:	13 df       	rcall	.-474    	; 0xfd4 <ffwrite>
		// F√ºr MS-Windows Terminal '\r' anh√§ngen.
		ffwrite ('\r');
    11ae:	8d e0       	ldi	r24, 0x0D	; 13
    11b0:	11 df       	rcall	.-478    	; 0xfd4 <ffwrite>
		
		// Schlie√üt Datei.
		ffclose();
    11b2:	94 de       	rcall	.-728    	; 0xedc <ffclose>
	}
	
	// Datei existiert, also anhaengen !
	if (true == ffileExsists(file_name))
    11b4:	ce 01       	movw	r24, r28
    11b6:	0e 96       	adiw	r24, 0x0e	; 14
    11b8:	91 dd       	rcall	.-1246   	; 0xcdc <ffileExsists>
    11ba:	81 30       	cpi	r24, 0x01	; 1
    11bc:	a9 f4       	brne	.+42     	; 0x11e8 <main+0x8e>
	{
		ffopen (file_name, 'c');
    11be:	63 e6       	ldi	r22, 0x63	; 99
    11c0:	ce 01       	movw	r24, r28
    11c2:	0e 96       	adiw	r24, 0x0e	; 14
    11c4:	8d dd       	rcall	.-1254   	; 0xce0 <ffopen>
		// Spult bis zum Dateiende vor um anzuhaengen.
		// Geht auch ohne Option MMC_OVER_WRITE
		ffseek (file.length);
    11c6:	60 91 44 03 	lds	r22, 0x0344
    11ca:	70 91 45 03 	lds	r23, 0x0345
    11ce:	80 91 46 03 	lds	r24, 0x0346
    11d2:	90 91 47 03 	lds	r25, 0x0347
    11d6:	8d de       	rcall	.-742    	; 0xef2 <ffseek>
		
		// Schreibt String.
		ffwrites(str);
    11d8:	ce 01       	movw	r24, r28
    11da:	01 96       	adiw	r24, 0x01	; 1
    11dc:	ad df       	rcall	.-166    	; 0x1138 <ffwrites>
		
		// Neue Zeile in der Datei.
		// Schreibt Zeilenumbruch in die Textdatei.
		ffwrite ('\n');
    11de:	8a e0       	ldi	r24, 0x0A	; 10
    11e0:	f9 de       	rcall	.-526    	; 0xfd4 <ffwrite>
		// F√ºr MS-Windows Terminal '\r' anh√§ngen.
		ffwrite ('\r');
    11e2:	8d e0       	ldi	r24, 0x0D	; 13
    11e4:	f7 de       	rcall	.-530    	; 0xfd4 <ffwrite>
		
		// Schlie√üt Datei.
		ffclose();
    11e6:	7a de       	rcall	.-780    	; 0xedc <ffclose>
	}

   
    while (1) 
    {
    }
    11e8:	ff cf       	rjmp	.-2      	; 0x11e8 <main+0x8e>

000011ea <spi_write_byte>:
	#if (MMC_MAX_SPEED==TRUE)
		spi_maxSpeed();
	#endif

	return TRUE;
}
    11ea:	8e bd       	out	0x2e, r24	; 46
    11ec:	0d b4       	in	r0, 0x2d	; 45
    11ee:	07 fe       	sbrs	r0, 7
    11f0:	fd cf       	rjmp	.-6      	; 0x11ec <spi_write_byte+0x2>
    11f2:	08 95       	ret

000011f4 <spi_read_byte>:
    11f4:	8f ef       	ldi	r24, 0xFF	; 255
    11f6:	8e bd       	out	0x2e, r24	; 46
    11f8:	0d b4       	in	r0, 0x2d	; 45
    11fa:	07 fe       	sbrs	r0, 7
    11fc:	fd cf       	rjmp	.-6      	; 0x11f8 <spi_read_byte+0x4>
    11fe:	8e b5       	in	r24, 0x2e	; 46
    1200:	08 95       	ret

00001202 <mmc_disable>:
    1202:	2c 9a       	sbi	0x05, 4	; 5
    1204:	f7 cf       	rjmp	.-18     	; 0x11f4 <spi_read_byte>
    1206:	08 95       	ret

00001208 <mmc_wait_ready>:
    1208:	82 e3       	ldi	r24, 0x32	; 50
    120a:	80 93 17 01 	sts	0x0117, r24
    120e:	f2 df       	rcall	.-28     	; 0x11f4 <spi_read_byte>
    1210:	8f 3f       	cpi	r24, 0xFF	; 255
    1212:	29 f0       	breq	.+10     	; 0x121e <mmc_wait_ready+0x16>
    1214:	80 91 17 01 	lds	r24, 0x0117
    1218:	81 11       	cpse	r24, r1
    121a:	f9 cf       	rjmp	.-14     	; 0x120e <mmc_wait_ready+0x6>
    121c:	08 95       	ret
    121e:	81 e0       	ldi	r24, 0x01	; 1
    1220:	08 95       	ret

00001222 <mmc_send_cmd>:
    1222:	ff 92       	push	r15
    1224:	0f 93       	push	r16
    1226:	1f 93       	push	r17
    1228:	cf 93       	push	r28
    122a:	df 93       	push	r29
    122c:	c8 2f       	mov	r28, r24
    122e:	d4 2f       	mov	r29, r20
    1230:	15 2f       	mov	r17, r21
    1232:	06 2f       	mov	r16, r22
    1234:	f7 2e       	mov	r15, r23
    1236:	e5 df       	rcall	.-54     	; 0x1202 <mmc_disable>
    1238:	2c 98       	cbi	0x05, 4	; 5
    123a:	e6 df       	rcall	.-52     	; 0x1208 <mmc_wait_ready>
    123c:	81 11       	cpse	r24, r1
    123e:	11 c0       	rjmp	.+34     	; 0x1262 <mmc_send_cmd+0x40>
    1240:	e0 df       	rcall	.-64     	; 0x1202 <mmc_disable>
    1242:	8f ef       	ldi	r24, 0xFF	; 255
    1244:	22 c0       	rjmp	.+68     	; 0x128a <mmc_send_cmd+0x68>
    1246:	c8 30       	cpi	r28, 0x08	; 8
    1248:	d1 f0       	breq	.+52     	; 0x127e <mmc_send_cmd+0x5c>
    124a:	81 e0       	ldi	r24, 0x01	; 1
    124c:	ce df       	rcall	.-100    	; 0x11ea <spi_write_byte>
    124e:	cc 30       	cpi	r28, 0x0C	; 12
    1250:	09 f4       	brne	.+2      	; 0x1254 <mmc_send_cmd+0x32>
    1252:	d0 df       	rcall	.-96     	; 0x11f4 <spi_read_byte>
    1254:	ca e0       	ldi	r28, 0x0A	; 10
    1256:	ce df       	rcall	.-100    	; 0x11f4 <spi_read_byte>
    1258:	88 23       	and	r24, r24
    125a:	bc f4       	brge	.+46     	; 0x128a <mmc_send_cmd+0x68>
    125c:	c1 50       	subi	r28, 0x01	; 1
    125e:	d9 f7       	brne	.-10     	; 0x1256 <mmc_send_cmd+0x34>
    1260:	14 c0       	rjmp	.+40     	; 0x128a <mmc_send_cmd+0x68>
    1262:	8c 2f       	mov	r24, r28
    1264:	80 64       	ori	r24, 0x40	; 64
    1266:	c1 df       	rcall	.-126    	; 0x11ea <spi_write_byte>
    1268:	8f 2d       	mov	r24, r15
    126a:	bf df       	rcall	.-130    	; 0x11ea <spi_write_byte>
    126c:	80 2f       	mov	r24, r16
    126e:	bd df       	rcall	.-134    	; 0x11ea <spi_write_byte>
    1270:	81 2f       	mov	r24, r17
    1272:	bb df       	rcall	.-138    	; 0x11ea <spi_write_byte>
    1274:	8d 2f       	mov	r24, r29
    1276:	b9 df       	rcall	.-142    	; 0x11ea <spi_write_byte>
    1278:	cc 23       	and	r28, r28
    127a:	21 f0       	breq	.+8      	; 0x1284 <mmc_send_cmd+0x62>
    127c:	e4 cf       	rjmp	.-56     	; 0x1246 <mmc_send_cmd+0x24>
    127e:	87 e8       	ldi	r24, 0x87	; 135
    1280:	b4 df       	rcall	.-152    	; 0x11ea <spi_write_byte>
    1282:	e8 cf       	rjmp	.-48     	; 0x1254 <mmc_send_cmd+0x32>
    1284:	85 e9       	ldi	r24, 0x95	; 149
    1286:	b1 df       	rcall	.-158    	; 0x11ea <spi_write_byte>
    1288:	e5 cf       	rjmp	.-54     	; 0x1254 <mmc_send_cmd+0x32>
    128a:	df 91       	pop	r29
    128c:	cf 91       	pop	r28
    128e:	1f 91       	pop	r17
    1290:	0f 91       	pop	r16
    1292:	ff 90       	pop	r15
    1294:	08 95       	ret

00001296 <mmc_write_sector>:


// **********************************************************************************************************************************
// Routine zum schreiben eines Blocks(512Byte) auf die MMC/SD-Karte
// **********************************************************************************************************************************
uint8_t mmc_write_sector (uint32_t addr,uint8_t *buffer){
    1296:	ff 92       	push	r15
    1298:	0f 93       	push	r16
    129a:	1f 93       	push	r17
    129c:	cf 93       	push	r28
    129e:	df 93       	push	r29
    12a0:	8a 01       	movw	r16, r20

	uint8_t resp;
	uint8_t retrys;
	uint16_t count;
   	
	if ( !(fat.card_type & CT_BLOCK) ){
    12a2:	20 91 2f 01 	lds	r18, 0x012F
    12a6:	23 fd       	sbrc	r18, 3
    12a8:	09 c0       	rjmp	.+18     	; 0x12bc <mmc_write_sector+0x26>
		addr *= 512;				// Convert to byte address if needed 
    12aa:	05 2e       	mov	r0, r21
    12ac:	59 e0       	ldi	r21, 0x09	; 9
    12ae:	66 0f       	add	r22, r22
    12b0:	77 1f       	adc	r23, r23
    12b2:	88 1f       	adc	r24, r24
    12b4:	99 1f       	adc	r25, r25
    12b6:	5a 95       	dec	r21
    12b8:	d1 f7       	brne	.-12     	; 0x12ae <mmc_write_sector+0x18>
    12ba:	50 2d       	mov	r21, r0
	}
	
	if ( mmc_send_cmd(CMD24, addr) != 0){ 	// enables card		
    12bc:	ab 01       	movw	r20, r22
    12be:	bc 01       	movw	r22, r24
    12c0:	88 e1       	ldi	r24, 0x18	; 24
    12c2:	af df       	rcall	.-162    	; 0x1222 <mmc_send_cmd>
    12c4:	f8 2e       	mov	r15, r24
    12c6:	81 11       	cpse	r24, r1
    12c8:	1e c0       	rjmp	.+60     	; 0x1306 <mmc_write_sector+0x70>
		return FALSE;
	}

	if ( FALSE == mmc_wait_ready() ){		
    12ca:	9e df       	rcall	.-196    	; 0x1208 <mmc_wait_ready>
    12cc:	88 23       	and	r24, r24
    12ce:	f1 f0       	breq	.+60     	; 0x130c <mmc_write_sector+0x76>
		return FALSE;
	}

	spi_write_byte(0xFE);			// Xmit data token 
    12d0:	8e ef       	ldi	r24, 0xFE	; 254
    12d2:	8b df       	rcall	.-234    	; 0x11ea <spi_write_byte>
    12d4:	e8 01       	movw	r28, r16
    12d6:	1e 5f       	subi	r17, 0xFE	; 254
	
	count = 512;
	do {							// Xmit the 512 byte data block to MMC 
		spi_write_byte(*buffer++);		
    12d8:	89 91       	ld	r24, Y+
    12da:	87 df       	rcall	.-242    	; 0x11ea <spi_write_byte>
	} while (--count);
    12dc:	c0 17       	cp	r28, r16
    12de:	d1 07       	cpc	r29, r17
    12e0:	d9 f7       	brne	.-10     	; 0x12d8 <mmc_write_sector+0x42>
	
	spi_write_byte(0xFF);			// CRC (Dummy) 
    12e2:	8f ef       	ldi	r24, 0xFF	; 255
    12e4:	82 df       	rcall	.-252    	; 0x11ea <spi_write_byte>
	spi_write_byte(0xFF);
    12e6:	8f ef       	ldi	r24, 0xFF	; 255
    12e8:	80 df       	rcall	.-256    	; 0x11ea <spi_write_byte>
	
	retrys = 20;			
    12ea:	c4 e1       	ldi	r28, 0x14	; 20
	do{
		resp = spi_read_byte();		// Reveive data response, 20 retrys if not acepted
    12ec:	83 df       	rcall	.-250    	; 0x11f4 <spi_read_byte>
	}while( (resp & 0x1F) != 0x05 && --retrys);
    12ee:	8f 71       	andi	r24, 0x1F	; 31
    12f0:	85 30       	cpi	r24, 0x05	; 5
    12f2:	21 f0       	breq	.+8      	; 0x12fc <mmc_write_sector+0x66>
    12f4:	c1 50       	subi	r28, 0x01	; 1
    12f6:	d1 f7       	brne	.-12     	; 0x12ec <mmc_write_sector+0x56>
	
	if ( retrys == 0){				// If not accepted, return with error 		
		return FALSE;
    12f8:	8f 2d       	mov	r24, r15
    12fa:	08 c0       	rjmp	.+16     	; 0x130c <mmc_write_sector+0x76>
	retrys = 20;			
	do{
		resp = spi_read_byte();		// Reveive data response, 20 retrys if not acepted
	}while( (resp & 0x1F) != 0x05 && --retrys);
	
	if ( retrys == 0){				// If not accepted, return with error 		
    12fc:	cc 23       	and	r28, r28
    12fe:	29 f0       	breq	.+10     	; 0x130a <mmc_write_sector+0x74>
		return FALSE;
	}
	
	mmc_disable();
    1300:	80 df       	rcall	.-256    	; 0x1202 <mmc_disable>

	return TRUE;
    1302:	81 e0       	ldi	r24, 0x01	; 1
    1304:	03 c0       	rjmp	.+6      	; 0x130c <mmc_write_sector+0x76>
	if ( !(fat.card_type & CT_BLOCK) ){
		addr *= 512;				// Convert to byte address if needed 
	}
	
	if ( mmc_send_cmd(CMD24, addr) != 0){ 	// enables card		
		return FALSE;
    1306:	80 e0       	ldi	r24, 0x00	; 0
    1308:	01 c0       	rjmp	.+2      	; 0x130c <mmc_write_sector+0x76>
	do{
		resp = spi_read_byte();		// Reveive data response, 20 retrys if not acepted
	}while( (resp & 0x1F) != 0x05 && --retrys);
	
	if ( retrys == 0){				// If not accepted, return with error 		
		return FALSE;
    130a:	8f 2d       	mov	r24, r15
	}
	
	mmc_disable();

	return TRUE;
}
    130c:	df 91       	pop	r29
    130e:	cf 91       	pop	r28
    1310:	1f 91       	pop	r17
    1312:	0f 91       	pop	r16
    1314:	ff 90       	pop	r15
    1316:	08 95       	ret

00001318 <mmc_read_sector>:


// **********************************************************************************************************************************
// Routine zum lesen eines Blocks(512Byte) von der MMC/SD-Karte
// **********************************************************************************************************************************
uint8_t mmc_read_sector (uint32_t addr,uint8_t *buffer){
    1318:	0f 93       	push	r16
    131a:	1f 93       	push	r17
    131c:	cf 93       	push	r28
    131e:	df 93       	push	r29
    1320:	8a 01       	movw	r16, r20

	uint8_t token;
	uint16_t count;
	
	if ( !(fat.card_type & CT_BLOCK) ) addr *= 512;	// Convert to byte address if needed
    1322:	20 91 2f 01 	lds	r18, 0x012F
    1326:	23 fd       	sbrc	r18, 3
    1328:	09 c0       	rjmp	.+18     	; 0x133c <mmc_read_sector+0x24>
    132a:	05 2e       	mov	r0, r21
    132c:	59 e0       	ldi	r21, 0x09	; 9
    132e:	66 0f       	add	r22, r22
    1330:	77 1f       	adc	r23, r23
    1332:	88 1f       	adc	r24, r24
    1334:	99 1f       	adc	r25, r25
    1336:	5a 95       	dec	r21
    1338:	d1 f7       	brne	.-12     	; 0x132e <mmc_read_sector+0x16>
    133a:	50 2d       	mov	r21, r0

	if ( mmc_send_cmd(CMD17, addr) != 0 ){
    133c:	ab 01       	movw	r20, r22
    133e:	bc 01       	movw	r22, r24
    1340:	81 e1       	ldi	r24, 0x11	; 17
    1342:	6f df       	rcall	.-290    	; 0x1222 <mmc_send_cmd>
    1344:	c8 2f       	mov	r28, r24
    1346:	81 11       	cpse	r24, r1
    1348:	19 c0       	rjmp	.+50     	; 0x137c <mmc_read_sector+0x64>
		return FALSE;	
	}

	TimingDelay = 20;
    134a:	84 e1       	ldi	r24, 0x14	; 20
    134c:	80 93 17 01 	sts	0x0117, r24
	do {							// Wait for data packet in timeout of 200ms 
		token = spi_read_byte();
    1350:	51 df       	rcall	.-350    	; 0x11f4 <spi_read_byte>
	} while ( (token == 0xFF) && TimingDelay );
    1352:	8f 3f       	cpi	r24, 0xFF	; 255
    1354:	29 f4       	brne	.+10     	; 0x1360 <mmc_read_sector+0x48>
    1356:	80 91 17 01 	lds	r24, 0x0117
    135a:	81 11       	cpse	r24, r1
    135c:	f9 cf       	rjmp	.-14     	; 0x1350 <mmc_read_sector+0x38>
    135e:	11 c0       	rjmp	.+34     	; 0x1382 <mmc_read_sector+0x6a>
	
	if(token != 0xFE){
    1360:	8e 3f       	cpi	r24, 0xFE	; 254
    1362:	71 f4       	brne	.+28     	; 0x1380 <mmc_read_sector+0x68>
    1364:	e8 01       	movw	r28, r16
    1366:	1e 5f       	subi	r17, 0xFE	; 254
		return FALSE;				// If not valid data token, retutn with error 
	}

	count = 512;
	do {							// Receive the data block into buffer 
		*buffer++ = spi_read_byte();
    1368:	45 df       	rcall	.-374    	; 0x11f4 <spi_read_byte>
    136a:	89 93       	st	Y+, r24
	} while (--count);
    136c:	c0 17       	cp	r28, r16
    136e:	d1 07       	cpc	r29, r17
    1370:	d9 f7       	brne	.-10     	; 0x1368 <mmc_read_sector+0x50>

	spi_read_byte();				// Discard CRC 
    1372:	40 df       	rcall	.-384    	; 0x11f4 <spi_read_byte>
	spi_read_byte();
    1374:	3f df       	rcall	.-386    	; 0x11f4 <spi_read_byte>

	mmc_disable();
    1376:	45 df       	rcall	.-374    	; 0x1202 <mmc_disable>

	return TRUE;					// Return with success 
    1378:	81 e0       	ldi	r24, 0x01	; 1
    137a:	03 c0       	rjmp	.+6      	; 0x1382 <mmc_read_sector+0x6a>
	uint16_t count;
	
	if ( !(fat.card_type & CT_BLOCK) ) addr *= 512;	// Convert to byte address if needed

	if ( mmc_send_cmd(CMD17, addr) != 0 ){
		return FALSE;	
    137c:	80 e0       	ldi	r24, 0x00	; 0
    137e:	01 c0       	rjmp	.+2      	; 0x1382 <mmc_read_sector+0x6a>
	do {							// Wait for data packet in timeout of 200ms 
		token = spi_read_byte();
	} while ( (token == 0xFF) && TimingDelay );
	
	if(token != 0xFE){
		return FALSE;				// If not valid data token, retutn with error 
    1380:	8c 2f       	mov	r24, r28
	spi_read_byte();

	mmc_disable();

	return TRUE;					// Return with success 
}
    1382:	df 91       	pop	r29
    1384:	cf 91       	pop	r28
    1386:	1f 91       	pop	r17
    1388:	0f 91       	pop	r16
    138a:	08 95       	ret

0000138c <__udivmodsi4>:
    138c:	a1 e2       	ldi	r26, 0x21	; 33
    138e:	1a 2e       	mov	r1, r26
    1390:	aa 1b       	sub	r26, r26
    1392:	bb 1b       	sub	r27, r27
    1394:	fd 01       	movw	r30, r26
    1396:	0d c0       	rjmp	.+26     	; 0x13b2 <__udivmodsi4_ep>

00001398 <__udivmodsi4_loop>:
    1398:	aa 1f       	adc	r26, r26
    139a:	bb 1f       	adc	r27, r27
    139c:	ee 1f       	adc	r30, r30
    139e:	ff 1f       	adc	r31, r31
    13a0:	a2 17       	cp	r26, r18
    13a2:	b3 07       	cpc	r27, r19
    13a4:	e4 07       	cpc	r30, r20
    13a6:	f5 07       	cpc	r31, r21
    13a8:	20 f0       	brcs	.+8      	; 0x13b2 <__udivmodsi4_ep>
    13aa:	a2 1b       	sub	r26, r18
    13ac:	b3 0b       	sbc	r27, r19
    13ae:	e4 0b       	sbc	r30, r20
    13b0:	f5 0b       	sbc	r31, r21

000013b2 <__udivmodsi4_ep>:
    13b2:	66 1f       	adc	r22, r22
    13b4:	77 1f       	adc	r23, r23
    13b6:	88 1f       	adc	r24, r24
    13b8:	99 1f       	adc	r25, r25
    13ba:	1a 94       	dec	r1
    13bc:	69 f7       	brne	.-38     	; 0x1398 <__udivmodsi4_loop>
    13be:	60 95       	com	r22
    13c0:	70 95       	com	r23
    13c2:	80 95       	com	r24
    13c4:	90 95       	com	r25
    13c6:	9b 01       	movw	r18, r22
    13c8:	ac 01       	movw	r20, r24
    13ca:	bd 01       	movw	r22, r26
    13cc:	cf 01       	movw	r24, r30
    13ce:	08 95       	ret

000013d0 <__muluhisi3>:
    13d0:	09 d0       	rcall	.+18     	; 0x13e4 <__umulhisi3>
    13d2:	a5 9f       	mul	r26, r21
    13d4:	90 0d       	add	r25, r0
    13d6:	b4 9f       	mul	r27, r20
    13d8:	90 0d       	add	r25, r0
    13da:	a4 9f       	mul	r26, r20
    13dc:	80 0d       	add	r24, r0
    13de:	91 1d       	adc	r25, r1
    13e0:	11 24       	eor	r1, r1
    13e2:	08 95       	ret

000013e4 <__umulhisi3>:
    13e4:	a2 9f       	mul	r26, r18
    13e6:	b0 01       	movw	r22, r0
    13e8:	b3 9f       	mul	r27, r19
    13ea:	c0 01       	movw	r24, r0
    13ec:	a3 9f       	mul	r26, r19
    13ee:	70 0d       	add	r23, r0
    13f0:	81 1d       	adc	r24, r1
    13f2:	11 24       	eor	r1, r1
    13f4:	91 1d       	adc	r25, r1
    13f6:	b2 9f       	mul	r27, r18
    13f8:	70 0d       	add	r23, r0
    13fa:	81 1d       	adc	r24, r1
    13fc:	11 24       	eor	r1, r1
    13fe:	91 1d       	adc	r25, r1
    1400:	08 95       	ret

00001402 <toupper>:
    1402:	91 11       	cpse	r25, r1
    1404:	08 95       	ret
    1406:	81 56       	subi	r24, 0x61	; 97
    1408:	8a 51       	subi	r24, 0x1A	; 26
    140a:	08 f4       	brcc	.+2      	; 0x140e <toupper+0xc>
    140c:	80 52       	subi	r24, 0x20	; 32
    140e:	85 58       	subi	r24, 0x85	; 133
    1410:	08 95       	ret

00001412 <_exit>:
    1412:	f8 94       	cli

00001414 <__stop_program>:
    1414:	ff cf       	rjmp	.-2      	; 0x1414 <__stop_program>
