
FWCP_MK3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000029a  00800100  00008a40  00008ad4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00008a40  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000009e8  0080039a  0080039a  00008d6e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00008d6e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00008dcc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000528  00000000  00000000  00008e0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000cb1d  00000000  00000000  00009334  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001d68  00000000  00000000  00015e51  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000055e1  00000000  00000000  00017bb9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000186c  00000000  00000000  0001d19c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001903  00000000  00000000  0001ea08  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000c6ab  00000000  00000000  0002030b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000668  00000000  00000000  0002c9b6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	58 c3       	rjmp	.+1712   	; 0x6b2 <__dtors_end>
       2:	00 00       	nop
       4:	80 c3       	rjmp	.+1792   	; 0x706 <__bad_interrupt>
       6:	00 00       	nop
       8:	7e c3       	rjmp	.+1788   	; 0x706 <__bad_interrupt>
       a:	00 00       	nop
       c:	7c c3       	rjmp	.+1784   	; 0x706 <__bad_interrupt>
       e:	00 00       	nop
      10:	7a c3       	rjmp	.+1780   	; 0x706 <__bad_interrupt>
      12:	00 00       	nop
      14:	78 c3       	rjmp	.+1776   	; 0x706 <__bad_interrupt>
      16:	00 00       	nop
      18:	76 c3       	rjmp	.+1772   	; 0x706 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	74 c3       	rjmp	.+1768   	; 0x706 <__bad_interrupt>
      1e:	00 00       	nop
      20:	72 c3       	rjmp	.+1764   	; 0x706 <__bad_interrupt>
      22:	00 00       	nop
      24:	70 c3       	rjmp	.+1760   	; 0x706 <__bad_interrupt>
      26:	00 00       	nop
      28:	6e c3       	rjmp	.+1756   	; 0x706 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	0c 94 24 28 	jmp	0x5048	; 0x5048 <__vector_11>
      30:	6a c3       	rjmp	.+1748   	; 0x706 <__bad_interrupt>
      32:	00 00       	nop
      34:	0c 94 40 28 	jmp	0x5080	; 0x5080 <__vector_13>
      38:	66 c3       	rjmp	.+1740   	; 0x706 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	64 c3       	rjmp	.+1736   	; 0x706 <__bad_interrupt>
      3e:	00 00       	nop
      40:	0c 94 fc 27 	jmp	0x4ff8	; 0x4ff8 <__vector_16>
      44:	60 c3       	rjmp	.+1728   	; 0x706 <__bad_interrupt>
      46:	00 00       	nop
      48:	5e c3       	rjmp	.+1724   	; 0x706 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	5c c3       	rjmp	.+1720   	; 0x706 <__bad_interrupt>
      4e:	00 00       	nop
      50:	0c 94 51 28 	jmp	0x50a2	; 0x50a2 <__vector_20>
      54:	58 c3       	rjmp	.+1712   	; 0x706 <__bad_interrupt>
      56:	00 00       	nop
      58:	56 c3       	rjmp	.+1708   	; 0x706 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	54 c3       	rjmp	.+1704   	; 0x706 <__bad_interrupt>
      5e:	00 00       	nop
      60:	52 c3       	rjmp	.+1700   	; 0x706 <__bad_interrupt>
      62:	00 00       	nop
      64:	50 c3       	rjmp	.+1696   	; 0x706 <__bad_interrupt>
      66:	00 00       	nop
      68:	4e c3       	rjmp	.+1692   	; 0x706 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	4c c3       	rjmp	.+1688   	; 0x706 <__bad_interrupt>
      6e:	00 00       	nop
      70:	4a c3       	rjmp	.+1684   	; 0x706 <__bad_interrupt>
      72:	00 00       	nop
      74:	48 c3       	rjmp	.+1680   	; 0x706 <__bad_interrupt>
      76:	00 00       	nop
      78:	46 c3       	rjmp	.+1676   	; 0x706 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	44 c3       	rjmp	.+1672   	; 0x706 <__bad_interrupt>
      7e:	00 00       	nop
      80:	42 c3       	rjmp	.+1668   	; 0x706 <__bad_interrupt>
      82:	00 00       	nop
      84:	40 c3       	rjmp	.+1664   	; 0x706 <__bad_interrupt>
      86:	00 00       	nop
      88:	3e c3       	rjmp	.+1660   	; 0x706 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	1e 06       	cpc	r1, r30
      8e:	25 06       	cpc	r2, r21
      90:	72 07       	cpc	r23, r18
      92:	95 06       	cpc	r9, r21
      94:	72 07       	cpc	r23, r18
      96:	72 07       	cpc	r23, r18
      98:	72 07       	cpc	r23, r18
      9a:	6a 07       	cpc	r22, r26
      9c:	72 07       	cpc	r23, r18
      9e:	72 07       	cpc	r23, r18
      a0:	72 07       	cpc	r23, r18
      a2:	72 07       	cpc	r23, r18
      a4:	72 07       	cpc	r23, r18
      a6:	72 07       	cpc	r23, r18
      a8:	72 07       	cpc	r23, r18
      aa:	72 07       	cpc	r23, r18
      ac:	72 07       	cpc	r23, r18
      ae:	72 07       	cpc	r23, r18
      b0:	72 07       	cpc	r23, r18
      b2:	72 07       	cpc	r23, r18
      b4:	72 07       	cpc	r23, r18
      b6:	72 07       	cpc	r23, r18
      b8:	72 07       	cpc	r23, r18
      ba:	72 07       	cpc	r23, r18
      bc:	72 07       	cpc	r23, r18
      be:	72 07       	cpc	r23, r18
      c0:	72 07       	cpc	r23, r18
      c2:	72 07       	cpc	r23, r18
      c4:	72 07       	cpc	r23, r18
      c6:	72 07       	cpc	r23, r18
      c8:	72 07       	cpc	r23, r18
      ca:	72 07       	cpc	r23, r18
      cc:	72 07       	cpc	r23, r18
      ce:	72 07       	cpc	r23, r18
      d0:	72 07       	cpc	r23, r18
      d2:	72 07       	cpc	r23, r18
      d4:	72 07       	cpc	r23, r18
      d6:	72 07       	cpc	r23, r18
      d8:	72 07       	cpc	r23, r18
      da:	72 07       	cpc	r23, r18
      dc:	72 07       	cpc	r23, r18
      de:	72 07       	cpc	r23, r18
      e0:	72 07       	cpc	r23, r18
      e2:	72 07       	cpc	r23, r18
      e4:	72 07       	cpc	r23, r18
      e6:	72 07       	cpc	r23, r18
      e8:	72 07       	cpc	r23, r18
      ea:	72 07       	cpc	r23, r18
      ec:	72 07       	cpc	r23, r18
      ee:	72 07       	cpc	r23, r18
      f0:	1b 07       	cpc	r17, r27
      f2:	21 07       	cpc	r18, r17
      f4:	32 07       	cpc	r19, r18
      f6:	43 07       	cpc	r20, r19
      f8:	58 07       	cpc	r21, r24
      fa:	9b 1f       	adc	r25, r27
      fc:	6e 1e       	adc	r6, r30
      fe:	7d 1e       	adc	r7, r29
     100:	78 1e       	adc	r7, r24
     102:	78 1e       	adc	r7, r24
     104:	78 1e       	adc	r7, r24
     106:	78 1e       	adc	r7, r24
     108:	78 1e       	adc	r7, r24
     10a:	78 1e       	adc	r7, r24
     10c:	78 1e       	adc	r7, r24
     10e:	78 1e       	adc	r7, r24
     110:	78 1e       	adc	r7, r24
     112:	78 1e       	adc	r7, r24
     114:	a9 1f       	adc	r26, r25
     116:	78 1e       	adc	r7, r24
     118:	78 1e       	adc	r7, r24
     11a:	78 1e       	adc	r7, r24
     11c:	24 1e       	adc	r2, r20
     11e:	78 1e       	adc	r7, r24
     120:	7d 1e       	adc	r7, r29
     122:	78 1e       	adc	r7, r24
     124:	78 1e       	adc	r7, r24
     126:	6c 1f       	adc	r22, r28
     128:	e9 20       	and	r14, r9
     12a:	eb 20       	and	r14, r11
     12c:	eb 20       	and	r14, r11
     12e:	eb 20       	and	r14, r11
     130:	eb 20       	and	r14, r11
     132:	eb 20       	and	r14, r11
     134:	eb 20       	and	r14, r11
     136:	e7 20       	and	r14, r7
     138:	eb 20       	and	r14, r11
     13a:	eb 20       	and	r14, r11
     13c:	eb 20       	and	r14, r11
     13e:	eb 20       	and	r14, r11
     140:	eb 20       	and	r14, r11
     142:	ee 20       	and	r14, r14
     144:	ed 20       	and	r14, r13
     146:	d7 20       	and	r13, r7
     148:	d9 20       	and	r13, r9
     14a:	db 20       	and	r13, r11
     14c:	dd 20       	and	r13, r13
     14e:	df 20       	and	r13, r15
     150:	e1 20       	and	r14, r1
     152:	e3 20       	and	r14, r3
     154:	e5 20       	and	r14, r5
     156:	a3 2b       	or	r26, r19
     158:	b3 2b       	or	r27, r19
     15a:	b3 2b       	or	r27, r19
     15c:	b3 2b       	or	r27, r19
     15e:	b3 2b       	or	r27, r19
     160:	b3 2b       	or	r27, r19
     162:	b3 2b       	or	r27, r19
     164:	b3 2b       	or	r27, r19
     166:	b3 2b       	or	r27, r19
     168:	b3 2b       	or	r27, r19
     16a:	b3 2b       	or	r27, r19
     16c:	b3 2b       	or	r27, r19
     16e:	b3 2b       	or	r27, r19
     170:	b3 2b       	or	r27, r19
     172:	b3 2b       	or	r27, r19
     174:	b3 2b       	or	r27, r19
     176:	b3 2b       	or	r27, r19
     178:	b3 2b       	or	r27, r19
     17a:	b3 2b       	or	r27, r19
     17c:	b3 2b       	or	r27, r19
     17e:	b3 2b       	or	r27, r19
     180:	b3 2b       	or	r27, r19
     182:	b3 2b       	or	r27, r19
     184:	b3 2b       	or	r27, r19
     186:	b3 2b       	or	r27, r19
     188:	b3 2b       	or	r27, r19
     18a:	b3 2b       	or	r27, r19
     18c:	b3 2b       	or	r27, r19
     18e:	b3 2b       	or	r27, r19
     190:	b3 2b       	or	r27, r19
     192:	b3 2b       	or	r27, r19
     194:	b3 2b       	or	r27, r19
     196:	b3 2b       	or	r27, r19
     198:	b3 2b       	or	r27, r19
     19a:	b3 2b       	or	r27, r19
     19c:	b3 2b       	or	r27, r19
     19e:	b3 2b       	or	r27, r19
     1a0:	b3 2b       	or	r27, r19
     1a2:	b3 2b       	or	r27, r19
     1a4:	b3 2b       	or	r27, r19
     1a6:	b3 2b       	or	r27, r19
     1a8:	b3 2b       	or	r27, r19
     1aa:	b3 2b       	or	r27, r19
     1ac:	b3 2b       	or	r27, r19
     1ae:	b3 2b       	or	r27, r19
     1b0:	b3 2b       	or	r27, r19
     1b2:	b3 2b       	or	r27, r19
     1b4:	b3 2b       	or	r27, r19
     1b6:	b3 2b       	or	r27, r19
     1b8:	b3 2b       	or	r27, r19
     1ba:	b3 2b       	or	r27, r19
     1bc:	b3 2b       	or	r27, r19
     1be:	7f 2b       	or	r23, r31
     1c0:	b3 2b       	or	r27, r19
     1c2:	b3 2b       	or	r27, r19
     1c4:	b3 2b       	or	r27, r19
     1c6:	b3 2b       	or	r27, r19
     1c8:	b3 2b       	or	r27, r19
     1ca:	b3 2b       	or	r27, r19
     1cc:	b3 2b       	or	r27, r19
     1ce:	4c 2b       	or	r20, r28
     1d0:	48 2b       	or	r20, r24
     1d2:	b3 2b       	or	r27, r19
     1d4:	6c 2b       	or	r22, r28
     1d6:	b3 2b       	or	r27, r19
     1d8:	b3 2b       	or	r27, r19
     1da:	59 2b       	or	r21, r25
     1dc:	b3 2b       	or	r27, r19
     1de:	b3 2b       	or	r27, r19
     1e0:	94 2b       	or	r25, r20
     1e2:	d3 33       	cpi	r29, 0x33	; 51
     1e4:	f9 33       	cpi	r31, 0x39	; 57
     1e6:	20 34       	cpi	r18, 0x40	; 64
     1e8:	48 34       	cpi	r20, 0x48	; 72
     1ea:	6f 34       	cpi	r22, 0x4F	; 79
     1ec:	99 34       	cpi	r25, 0x49	; 73
     1ee:	c2 34       	cpi	r28, 0x42	; 66
     1f0:	ec 34       	cpi	r30, 0x4C	; 76
     1f2:	63 35       	cpi	r22, 0x53	; 83
     1f4:	8d 35       	cpi	r24, 0x5D	; 93
     1f6:	05 a8       	ldd	r0, Z+53	; 0x35
     1f8:	4c cd       	rjmp	.-1384   	; 0xfffffc92 <__eeprom_end+0xff7efc92>
     1fa:	b2 d4       	rcall	.+2404   	; 0xb60 <disk_write+0x40>
     1fc:	4e b9       	out	0x0e, r20	; 14
     1fe:	38 36       	cpi	r19, 0x68	; 104
     200:	a9 02       	muls	r26, r25
     202:	0c 50       	subi	r16, 0x0C	; 12
     204:	b9 91       	ld	r27, Y+
     206:	86 88       	ldd	r8, Z+22	; 0x16
     208:	08 3c       	cpi	r16, 0xC8	; 200
     20a:	a6 aa       	std	Z+54, r10	; 0x36
     20c:	aa 2a       	or	r10, r26
     20e:	be 00       	.word	0x00be	; ????
     210:	00 00       	nop
     212:	80 3f       	cpi	r24, 0xF0	; 240
     214:	07 63       	ori	r16, 0x37	; 55
     216:	42 36       	cpi	r20, 0x62	; 98
     218:	b7 9b       	sbis	0x16, 7	; 22
     21a:	d8 a7       	std	Y+40, r29	; 0x28
     21c:	1a 39       	cpi	r17, 0x9A	; 154
     21e:	68 56       	subi	r22, 0x68	; 104
     220:	18 ae       	std	Y+56, r1	; 0x38
     222:	ba ab       	std	Y+50, r27	; 0x32
     224:	55 8c       	ldd	r5, Z+29	; 0x1d
     226:	1d 3c       	cpi	r17, 0xCD	; 205
     228:	b7 cc       	rjmp	.-1682   	; 0xfffffb98 <__eeprom_end+0xff7efb98>
     22a:	57 63       	ori	r21, 0x37	; 55
     22c:	bd 6d       	ori	r27, 0xDD	; 221
     22e:	ed fd       	.word	0xfded	; ????
     230:	75 3e       	cpi	r23, 0xE5	; 229
     232:	f6 17       	cp	r31, r22
     234:	72 31       	cpi	r23, 0x12	; 18
     236:	bf 00       	.word	0x00bf	; ????
     238:	00 00       	nop
     23a:	80 3f       	cpi	r24, 0xF0	; 240
     23c:	08 00       	.word	0x0008	; ????
     23e:	00 00       	nop
     240:	be 92       	st	-X, r11
     242:	24 49       	sbci	r18, 0x94	; 148
     244:	12 3e       	cpi	r17, 0xE2	; 226
     246:	ab aa       	std	Y+51, r10	; 0x33
     248:	aa 2a       	or	r10, r26
     24a:	be cd       	rjmp	.-1156   	; 0xfffffdc8 <__eeprom_end+0xff7efdc8>
     24c:	cc cc       	rjmp	.-1640   	; 0xfffffbe6 <__eeprom_end+0xff7efbe6>
     24e:	4c 3e       	cpi	r20, 0xEC	; 236
     250:	00 00       	nop
     252:	00 80       	ld	r0, Z
     254:	be ab       	std	Y+54, r27	; 0x36
     256:	aa aa       	std	Y+50, r10	; 0x32
     258:	aa 3e       	cpi	r26, 0xEA	; 234
     25a:	00 00       	nop
     25c:	00 00       	nop
     25e:	bf 00       	.word	0x00bf	; ????
     260:	00 00       	nop
     262:	80 3f       	cpi	r24, 0xF0	; 240
     264:	00 00       	nop
     266:	00 00       	nop
     268:	00 08       	sbc	r0, r0
     26a:	41 78       	andi	r20, 0x81	; 129
     26c:	d3 bb       	out	0x13, r29	; 19
     26e:	43 87       	std	Z+11, r20	; 0x0b
     270:	d1 13       	cpse	r29, r17
     272:	3d 19       	sub	r19, r13
     274:	0e 3c       	cpi	r16, 0xCE	; 206
     276:	c3 bd       	out	0x23, r28	; 35
     278:	42 82       	std	Z+2, r4	; 0x02
     27a:	ad 2b       	or	r26, r29
     27c:	3e 68       	ori	r19, 0x8E	; 142
     27e:	ec 82       	std	Y+4, r14	; 0x04
     280:	76 be       	out	0x36, r7	; 54
     282:	d9 8f       	std	Y+25, r29	; 0x19
     284:	e1 a9       	ldd	r30, Z+49	; 0x31
     286:	3e 4c       	sbci	r19, 0xCE	; 206
     288:	80 ef       	ldi	r24, 0xF0	; 240
     28a:	ff be       	out	0x3f, r15	; 63
     28c:	01 c4       	rjmp	.+2050   	; 0xa90 <disk_read+0x14>
     28e:	ff 7f       	andi	r31, 0xFF	; 255
     290:	3f 00       	.word	0x003f	; ????
     292:	00 00       	nop
	...

00000296 <__trampolines_end>:
     296:	00 e0       	ldi	r16, 0x00	; 0
     298:	f8 fc       	.word	0xfcf8	; ????
     29a:	fe 1e       	adc	r15, r30
     29c:	07 07       	cpc	r16, r23
     29e:	07 07       	cpc	r16, r23
     2a0:	1e fe       	.word	0xfe1e	; ????
     2a2:	fc f8       	.word	0xf8fc	; ????
     2a4:	f0 00       	.word	0x00f0	; ????
     2a6:	00 07       	cpc	r16, r16
     2a8:	0f 3f       	cpi	r16, 0xFF	; 255
     2aa:	3f 7c       	andi	r19, 0xCF	; 207
     2ac:	70 70       	andi	r23, 0x00	; 0
     2ae:	70 70       	andi	r23, 0x00	; 0
     2b0:	7c 3f       	cpi	r23, 0xFC	; 252
     2b2:	1f 1f       	adc	r17, r31
     2b4:	07 00       	.word	0x0007	; ????
     2b6:	00 00       	nop
     2b8:	00 06       	cpc	r0, r16
     2ba:	07 07       	cpc	r16, r23
     2bc:	ff ff       	.word	0xffff	; ????
     2be:	ff ff       	.word	0xffff	; ????
	...
     2cc:	7f 7f       	andi	r23, 0xFF	; 255
     2ce:	7f 7f       	andi	r23, 0xFF	; 255
     2d0:	00 00       	nop
     2d2:	00 00       	nop
     2d4:	00 00       	nop
     2d6:	00 38       	cpi	r16, 0x80	; 128
     2d8:	3c 3e       	cpi	r19, 0xEC	; 236
     2da:	3e 0f       	add	r19, r30
     2dc:	07 07       	cpc	r16, r23
     2de:	07 cf       	rjmp	.-498    	; 0xee <__SREG__+0xaf>
     2e0:	ff fe       	.word	0xfeff	; ????
     2e2:	fe 38       	cpi	r31, 0x8E	; 142
     2e4:	00 00       	nop
     2e6:	00 40       	sbci	r16, 0x00	; 0
     2e8:	40 60       	ori	r20, 0x00	; 0
     2ea:	70 78       	andi	r23, 0x80	; 128
     2ec:	7c 7e       	andi	r23, 0xEC	; 236
     2ee:	7f 77       	andi	r23, 0x7F	; 127
     2f0:	73 71       	andi	r23, 0x13	; 19
     2f2:	70 70       	andi	r23, 0x00	; 0
     2f4:	00 00       	nop
     2f6:	00 18       	sub	r0, r0
     2f8:	1c 1e       	adc	r1, r28
     2fa:	1e 0f       	add	r17, r30
     2fc:	c7 c7       	rjmp	.+3982   	; 0x128c <_ZN7Display16draw_number16x16Ehhh+0x50>
     2fe:	e7 ff       	sbrs	r30, 7
     300:	fe be       	out	0x3e, r15	; 62
     302:	9c 00       	.word	0x009c	; ????
     304:	00 00       	nop
     306:	00 0c       	add	r0, r0
     308:	1c 3c       	cpi	r17, 0xCC	; 204
     30a:	3c 78       	andi	r19, 0x8C	; 140
     30c:	70 70       	andi	r23, 0x00	; 0
     30e:	70 79       	andi	r23, 0x90	; 144
     310:	7f 3f       	cpi	r23, 0xFF	; 255
     312:	1f 0f       	add	r17, r31
     314:	00 00       	nop
     316:	00 00       	nop
     318:	80 c0       	rjmp	.+256    	; 0x41a <_ZL7font5x8+0x44>
     31a:	e0 70       	andi	r30, 0x00	; 0
     31c:	38 1c       	adc	r3, r8
     31e:	1e ff       	.word	0xff1e	; ????
     320:	ff ff       	.word	0xffff	; ????
     322:	ff 00       	.word	0x00ff	; ????
     324:	00 00       	nop
     326:	06 07       	cpc	r16, r22
     328:	07 07       	cpc	r16, r23
     32a:	06 06       	cpc	r0, r22
     32c:	06 06       	cpc	r0, r22
     32e:	06 7f       	andi	r16, 0xF6	; 246
     330:	7f 7f       	andi	r23, 0xFF	; 255
     332:	7f 06       	cpc	r7, r31
     334:	06 00       	.word	0x0006	; ????
     336:	00 00       	nop
     338:	00 00       	nop
     33a:	f0 ff       	sbrs	r31, 0
     33c:	ff ff       	.word	0xffff	; ????
     33e:	e7 e7       	ldi	r30, 0x77	; 119
     340:	e7 e7       	ldi	r30, 0x77	; 119
     342:	c7 87       	std	Z+15, r28	; 0x0f
     344:	00 00       	nop
     346:	00 00       	nop
     348:	38 78       	andi	r19, 0x88	; 136
     34a:	71 70       	andi	r23, 0x01	; 1
     34c:	70 70       	andi	r23, 0x00	; 0
     34e:	70 70       	andi	r23, 0x00	; 0
     350:	39 3f       	cpi	r19, 0xF9	; 249
     352:	3f 1f       	adc	r19, r31
     354:	0f 00       	.word	0x000f	; ????
     356:	00 80       	ld	r0, Z
     358:	e0 f0       	brcs	.+56     	; 0x392 <__trampolines_end+0xfc>
     35a:	f8 fc       	.word	0xfcf8	; ????
     35c:	7f 7f       	andi	r23, 0xFF	; 255
     35e:	6f 67       	ori	r22, 0x7F	; 127
     360:	e1 e1       	ldi	r30, 0x11	; 17
     362:	c0 80       	ld	r12, Z
     364:	00 00       	nop
     366:	00 0f       	add	r16, r16
     368:	1f 3f       	cpi	r17, 0xFF	; 255
     36a:	3f 78       	andi	r19, 0x8F	; 143
     36c:	70 70       	andi	r23, 0x00	; 0
     36e:	70 70       	andi	r23, 0x00	; 0
     370:	78 3f       	cpi	r23, 0xF8	; 248
     372:	3f 1f       	adc	r19, r31
     374:	0f 00       	.word	0x000f	; ????
     376:	00 07       	cpc	r16, r16
     378:	07 07       	cpc	r16, r23
     37a:	07 07       	cpc	r16, r23
     37c:	c7 e7       	ldi	r28, 0x77	; 119
     37e:	f7 ff       	sbrs	r31, 7
     380:	7f 3f       	cpi	r23, 0xFF	; 255
     382:	1f 07       	cpc	r17, r31
     384:	03 01       	movw	r0, r6
     386:	00 20       	and	r0, r0
     388:	38 7c       	andi	r19, 0xC8	; 200
     38a:	7e 3f       	cpi	r23, 0xFE	; 254
     38c:	0f 07       	cpc	r16, r31
     38e:	03 00       	.word	0x0003	; ????
	...
     398:	00 1c       	adc	r0, r0
     39a:	be fe       	.word	0xfebe	; ????
     39c:	ff e7       	ldi	r31, 0x7F	; 127
     39e:	c3 c3       	rjmp	.+1926   	; 0xb26 <disk_write+0x6>
     3a0:	e7 ff       	sbrs	r30, 7
     3a2:	fe be       	out	0x3e, r15	; 62
     3a4:	1c 00       	.word	0x001c	; ????
     3a6:	00 00       	nop
     3a8:	0e 3f       	cpi	r16, 0xFE	; 254
     3aa:	3f 7f       	andi	r19, 0xFF	; 255
     3ac:	71 60       	ori	r23, 0x01	; 1
     3ae:	60 60       	ori	r22, 0x00	; 0
     3b0:	71 7f       	andi	r23, 0xF1	; 241
     3b2:	3f 3f       	cpi	r19, 0xFF	; 255
     3b4:	0f 00       	.word	0x000f	; ????
     3b6:	00 78       	andi	r16, 0x80	; 128
     3b8:	fc fe       	.word	0xfefc	; ????
     3ba:	fe 8f       	std	Y+30, r31	; 0x1e
     3bc:	07 07       	cpc	r16, r23
     3be:	07 07       	cpc	r16, r23
     3c0:	8f fe       	.word	0xfe8f	; ????
     3c2:	fe fc       	.word	0xfcfe	; ????
     3c4:	f8 00       	.word	0x00f8	; ????
     3c6:	00 00       	nop
     3c8:	00 01       	movw	r0, r0
     3ca:	43 43       	sbci	r20, 0x33	; 51
     3cc:	73 7b       	andi	r23, 0xB3	; 179
     3ce:	7f 7f       	andi	r23, 0xFF	; 255
     3d0:	1f 0f       	add	r17, r31
     3d2:	07 03       	mulsu	r16, r23
	...

000003d6 <_ZL7font5x8>:
     3d6:	00 00 5f 00 00 00 07 00 07 00 14 7f 14 7f 14 24     .._............$
     3e6:	2a 7f 2a 12 23 13 08 64 62 36 49 55 22 50 00 05     *.*.#..db6IU"P..
     3f6:	03 00 00 00 1c 22 41 00 00 41 22 1c 00 14 08 3e     ....."A..A"....>
     406:	08 14 08 08 3e 08 08 00 50 30 00 00 08 08 08 08     ....>...P0......
     416:	08 00 60 60 00 00 20 10 08 04 02 3e 51 49 45 3e     ..``.. ....>QIE>
     426:	00 42 7f 40 00 42 61 51 49 46 21 41 45 4b 31 18     .B.@.BaQIF!AEK1.
     436:	14 12 7f 10 27 45 45 45 39 3c 4a 49 49 30 01 71     ....'EEE9<JII0.q
     446:	09 05 03 36 49 49 49 36 06 49 49 29 1e 00 36 36     ...6III6.II)..66
     456:	00 00 00 56 36 00 00 08 14 22 41 00 14 14 14 14     ...V6...."A.....
     466:	14 00 41 22 14 08 02 01 51 09 06 32 49 79 41 3e     ..A"....Q..2IyA>
     476:	7e 11 11 11 7e 7f 49 49 49 36 3e 41 41 41 22 7f     ~...~.III6>AAA".
     486:	41 41 22 1c 7f 49 49 49 41 7f 09 09 09 01 3e 41     AA"..IIIA.....>A
     496:	49 49 7a 7f 08 08 08 7f 00 41 7f 41 00 20 40 41     IIz......A.A. @A
     4a6:	3f 01 7f 08 14 22 41 7f 40 40 40 40 7f 02 0c 02     ?...."A.@@@@....
     4b6:	7f 7f 04 08 10 7f 3e 41 41 41 3e 7f 09 09 09 06     ......>AAA>.....
     4c6:	3e 41 51 21 5e 7f 09 19 29 46 46 49 49 49 31 01     >AQ!^...)FFIII1.
     4d6:	01 7f 01 01 3f 40 40 40 3f 1f 20 40 20 1f 3f 40     ....?@@@?. @ .?@
     4e6:	38 40 3f 63 14 08 14 63 07 08 70 08 07 61 51 49     8@?c...c..p..aQI
     4f6:	45 43 00 7f 41 41 00 02 04 08 10 20 00 41 41 7f     EC..AA..... .AA.
     506:	00 04 02 01 02 04 40 40 40 40 40 00 01 02 04 00     ......@@@@@.....
     516:	20 54 54 54 78 7f 48 44 44 38 38 44 44 44 20 38      TTTx.HDD88DDD 8
     526:	44 44 48 7f 38 54 54 54 18 08 7e 09 01 02 0c 52     DDH.8TTT..~....R
     536:	52 52 3e 7f 08 04 04 78 00 44 7d 40 00 20 40 44     RR>....x.D}@. @D
     546:	3d 00 7f 10 28 44 00 00 41 7f 40 00 7c 04 18 04     =...(D..A.@.|...
     556:	78 7c 08 04 04 78 38 44 44 44 38 7c 14 14 14 08     x|...x8DDD8|....
     566:	08 14 14 18 7c 7c 08 04 04 08 48 54 54 54 20 04     ....||....HTTT .
     576:	3f 44 40 20 3c 40 40 20 7c 1c 20 40 20 1c 3c 40     ?D@ <@@ |. @ .<@
     586:	30 40 3c 44 28 10 28 44 0c 50 50 50 3c 44 64 54     0@<D(.(D.PPP<DdT
     596:	4c 44 00 08 36 41 00 00 00 7f 00 00 00 41 36 08     LD..6A.......A6.
     5a6:	00 10 08 08 10 08                                   ......

000005ac <__c.2179>:
     5ac:	6e 61 6e 00                                         nan.

000005b0 <__c.2177>:
     5b0:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     5c0:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     5d0:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     5e0:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     5f0:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     600:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     610:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     620:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     630:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     640:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     650:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     660:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     670:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     680:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     690:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     6a0:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

000006ae <__ctors_start>:
     6ae:	21 38       	cpi	r18, 0x81	; 129

000006b0 <__ctors_end>:
     6b0:	40 38       	cpi	r20, 0x80	; 128

000006b2 <__dtors_end>:
     6b2:	11 24       	eor	r1, r1
     6b4:	1f be       	out	0x3f, r1	; 63
     6b6:	cf ef       	ldi	r28, 0xFF	; 255
     6b8:	d0 e4       	ldi	r29, 0x40	; 64
     6ba:	de bf       	out	0x3e, r29	; 62
     6bc:	cd bf       	out	0x3d, r28	; 61

000006be <__do_copy_data>:
     6be:	13 e0       	ldi	r17, 0x03	; 3
     6c0:	a0 e0       	ldi	r26, 0x00	; 0
     6c2:	b1 e0       	ldi	r27, 0x01	; 1
     6c4:	e0 e4       	ldi	r30, 0x40	; 64
     6c6:	fa e8       	ldi	r31, 0x8A	; 138
     6c8:	00 e0       	ldi	r16, 0x00	; 0
     6ca:	0b bf       	out	0x3b, r16	; 59
     6cc:	02 c0       	rjmp	.+4      	; 0x6d2 <__do_copy_data+0x14>
     6ce:	07 90       	elpm	r0, Z+
     6d0:	0d 92       	st	X+, r0
     6d2:	aa 39       	cpi	r26, 0x9A	; 154
     6d4:	b1 07       	cpc	r27, r17
     6d6:	d9 f7       	brne	.-10     	; 0x6ce <__do_copy_data+0x10>

000006d8 <__do_clear_bss>:
     6d8:	2d e0       	ldi	r18, 0x0D	; 13
     6da:	aa e9       	ldi	r26, 0x9A	; 154
     6dc:	b3 e0       	ldi	r27, 0x03	; 3
     6de:	01 c0       	rjmp	.+2      	; 0x6e2 <.do_clear_bss_start>

000006e0 <.do_clear_bss_loop>:
     6e0:	1d 92       	st	X+, r1

000006e2 <.do_clear_bss_start>:
     6e2:	a2 38       	cpi	r26, 0x82	; 130
     6e4:	b2 07       	cpc	r27, r18
     6e6:	e1 f7       	brne	.-8      	; 0x6e0 <.do_clear_bss_loop>

000006e8 <__do_global_ctors>:
     6e8:	13 e0       	ldi	r17, 0x03	; 3
     6ea:	c8 e5       	ldi	r28, 0x58	; 88
     6ec:	d3 e0       	ldi	r29, 0x03	; 3
     6ee:	04 c0       	rjmp	.+8      	; 0x6f8 <__do_global_ctors+0x10>
     6f0:	21 97       	sbiw	r28, 0x01	; 1
     6f2:	fe 01       	movw	r30, r28
     6f4:	0e 94 12 42 	call	0x8424	; 0x8424 <__tablejump2__>
     6f8:	c7 35       	cpi	r28, 0x57	; 87
     6fa:	d1 07       	cpc	r29, r17
     6fc:	c9 f7       	brne	.-14     	; 0x6f0 <__do_global_ctors+0x8>
     6fe:	0e 94 47 31 	call	0x628e	; 0x628e <main>
     702:	0c 94 14 45 	jmp	0x8a28	; 0x8a28 <__do_global_dtors>

00000706 <__bad_interrupt>:
     706:	7c cc       	rjmp	.-1800   	; 0x0 <__vectors>

00000708 <power_off>:
}

static
void power_off (void)
{
	SPCR = 0;				/* Disable SPI function */
     708:	1c bc       	out	0x2c, r1	; 44

	DDRB  &= ~((1<<PORTB7) | (1<<PORTB5));// | (1<<PORTB4));	/* Set SCK/MOSI/CS as hi-z, INS#/WP as pull-up */
     70a:	84 b1       	in	r24, 0x04	; 4
     70c:	8f 75       	andi	r24, 0x5F	; 95
     70e:	84 b9       	out	0x04, r24	; 4
	CS_HIGH();
     710:	2c 9a       	sbi	0x05, 4	; 5
     712:	08 95       	ret

00000714 <xchg_spi>:
static
BYTE xchg_spi (		/* Returns received data */
BYTE dat		/* Data to be sent */
)
{
	SPDR = dat;
     714:	8e bd       	out	0x2e, r24	; 46
	loop_until_bit_is_set(SPSR, SPIF);
     716:	0d b4       	in	r0, 0x2d	; 45
     718:	07 fe       	sbrs	r0, 7
     71a:	fd cf       	rjmp	.-6      	; 0x716 <xchg_spi+0x2>
	return SPDR;
     71c:	8e b5       	in	r24, 0x2e	; 46
}
     71e:	08 95       	ret

00000720 <deselect>:
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();		/* Set CS# high */
     720:	2c 9a       	sbi	0x05, 4	; 5
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
     722:	8f ef       	ldi	r24, 0xFF	; 255
     724:	f7 cf       	rjmp	.-18     	; 0x714 <xchg_spi>
     726:	08 95       	ret

00000728 <select>:
/*-----------------------------------------------------------------------*/

static
int select (void)	/* 1:Successful, 0:Timeout */
{
	CS_LOW();		/* Set CS# low */
     728:	2c 98       	cbi	0x05, 4	; 5
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
     72a:	8f ef       	ldi	r24, 0xFF	; 255
     72c:	f3 df       	rcall	.-26     	; 0x714 <xchg_spi>
)
{
	BYTE d;


	Timer2 = wt / 10;
     72e:	82 e3       	ldi	r24, 0x32	; 50
     730:	80 93 9b 03 	sts	0x039B, r24
	do{
		d = xchg_spi(0xFF);
     734:	8f ef       	ldi	r24, 0xFF	; 255
     736:	ee df       	rcall	.-36     	; 0x714 <xchg_spi>
	}while (d != 0xFF && Timer2);
     738:	8f 3f       	cpi	r24, 0xFF	; 255
     73a:	41 f0       	breq	.+16     	; 0x74c <select+0x24>
     73c:	80 91 9b 03 	lds	r24, 0x039B
     740:	81 11       	cpse	r24, r1
     742:	f8 cf       	rjmp	.-16     	; 0x734 <select+0xc>
{
	CS_LOW();		/* Set CS# low */
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
	if (wait_ready(500)) return 1;	/* Wait for card ready */

	deselect();
     744:	ed df       	rcall	.-38     	; 0x720 <deselect>
	return 0;	/* Timeout */
     746:	80 e0       	ldi	r24, 0x00	; 0
     748:	90 e0       	ldi	r25, 0x00	; 0
     74a:	08 95       	ret
static
int select (void)	/* 1:Successful, 0:Timeout */
{
	CS_LOW();		/* Set CS# low */
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
	if (wait_ready(500)) return 1;	/* Wait for card ready */
     74c:	81 e0       	ldi	r24, 0x01	; 1
     74e:	90 e0       	ldi	r25, 0x00	; 0

	deselect();
	return 0;	/* Timeout */
}
     750:	08 95       	ret

00000752 <rcvr_datablock>:
static
int rcvr_datablock (
BYTE *buff,			/* Data buffer to store received data */
UINT btr			/* Byte count (must be multiple of 4) */
)
{
     752:	0f 93       	push	r16
     754:	1f 93       	push	r17
     756:	cf 93       	push	r28
     758:	df 93       	push	r29
     75a:	ec 01       	movw	r28, r24
     75c:	8b 01       	movw	r16, r22
	BYTE token;


	Timer1 = 20;
     75e:	84 e1       	ldi	r24, 0x14	; 20
     760:	80 93 9c 03 	sts	0x039C, r24
	do {							/* Wait for data packet in timeout of 200ms */
		token = xchg_spi(0xFF);
     764:	8f ef       	ldi	r24, 0xFF	; 255
     766:	d6 df       	rcall	.-84     	; 0x714 <xchg_spi>
	} while ((token == 0xFF) && Timer1);
     768:	8f 3f       	cpi	r24, 0xFF	; 255
     76a:	39 f4       	brne	.+14     	; 0x77a <rcvr_datablock+0x28>
     76c:	90 91 9c 03 	lds	r25, 0x039C
     770:	91 11       	cpse	r25, r1
     772:	f8 cf       	rjmp	.-16     	; 0x764 <rcvr_datablock+0x12>
	if (token != 0xFE) return 0;	/* If not valid data token, return with error */
     774:	80 e0       	ldi	r24, 0x00	; 0
     776:	90 e0       	ldi	r25, 0x00	; 0
     778:	20 c0       	rjmp	.+64     	; 0x7ba <rcvr_datablock+0x68>
     77a:	8e 3f       	cpi	r24, 0xFE	; 254
     77c:	e1 f4       	brne	.+56     	; 0x7b6 <rcvr_datablock+0x64>
void rcvr_spi_multi (
BYTE *p,	/* Data buffer */
UINT cnt	/* Size of data block (must be multiple of 2) */
)
{
	cli();
     77e:	f8 94       	cli
	do {
		SPDR = 0xFF; loop_until_bit_is_set(SPSR,SPIF); *p++ = SPDR;
     780:	8f ef       	ldi	r24, 0xFF	; 255
     782:	8e bd       	out	0x2e, r24	; 46
     784:	0d b4       	in	r0, 0x2d	; 45
     786:	07 fe       	sbrs	r0, 7
     788:	fd cf       	rjmp	.-6      	; 0x784 <rcvr_datablock+0x32>
     78a:	9e b5       	in	r25, 0x2e	; 46
     78c:	98 83       	st	Y, r25
		SPDR = 0xFF; loop_until_bit_is_set(SPSR,SPIF); *p++ = SPDR;
     78e:	8e bd       	out	0x2e, r24	; 46
     790:	0d b4       	in	r0, 0x2d	; 45
     792:	07 fe       	sbrs	r0, 7
     794:	fd cf       	rjmp	.-6      	; 0x790 <rcvr_datablock+0x3e>
     796:	22 96       	adiw	r28, 0x02	; 2
     798:	9e b5       	in	r25, 0x2e	; 46
     79a:	fe 01       	movw	r30, r28
     79c:	31 97       	sbiw	r30, 0x01	; 1
     79e:	90 83       	st	Z, r25
	} while (cnt -= 2);
     7a0:	02 50       	subi	r16, 0x02	; 2
     7a2:	11 09       	sbc	r17, r1
     7a4:	71 f7       	brne	.-36     	; 0x782 <rcvr_datablock+0x30>
	sei();
     7a6:	78 94       	sei
		token = xchg_spi(0xFF);
	} while ((token == 0xFF) && Timer1);
	if (token != 0xFE) return 0;	/* If not valid data token, return with error */

	rcvr_spi_multi(buff, btr);		/* Receive the data block into buffer */
	xchg_spi(0xFF);					/* Discard CRC */
     7a8:	8f ef       	ldi	r24, 0xFF	; 255
     7aa:	b4 df       	rcall	.-152    	; 0x714 <xchg_spi>
	xchg_spi(0xFF);
     7ac:	8f ef       	ldi	r24, 0xFF	; 255
     7ae:	b2 df       	rcall	.-156    	; 0x714 <xchg_spi>

	return 1;						/* Return with success */
     7b0:	81 e0       	ldi	r24, 0x01	; 1
     7b2:	90 e0       	ldi	r25, 0x00	; 0
     7b4:	02 c0       	rjmp	.+4      	; 0x7ba <rcvr_datablock+0x68>

	Timer1 = 20;
	do {							/* Wait for data packet in timeout of 200ms */
		token = xchg_spi(0xFF);
	} while ((token == 0xFF) && Timer1);
	if (token != 0xFE) return 0;	/* If not valid data token, return with error */
     7b6:	80 e0       	ldi	r24, 0x00	; 0
     7b8:	90 e0       	ldi	r25, 0x00	; 0
	rcvr_spi_multi(buff, btr);		/* Receive the data block into buffer */
	xchg_spi(0xFF);					/* Discard CRC */
	xchg_spi(0xFF);

	return 1;						/* Return with success */
}
     7ba:	df 91       	pop	r29
     7bc:	cf 91       	pop	r28
     7be:	1f 91       	pop	r17
     7c0:	0f 91       	pop	r16
     7c2:	08 95       	ret

000007c4 <send_cmd>:
static
BYTE send_cmd (		/* Returns R1 resp (bit7==1:Send failed) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
     7c4:	ff 92       	push	r15
     7c6:	0f 93       	push	r16
     7c8:	1f 93       	push	r17
     7ca:	cf 93       	push	r28
     7cc:	df 93       	push	r29
     7ce:	c8 2f       	mov	r28, r24
     7d0:	d4 2f       	mov	r29, r20
     7d2:	15 2f       	mov	r17, r21
     7d4:	06 2f       	mov	r16, r22
     7d6:	f7 2e       	mov	r15, r23
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
     7d8:	88 23       	and	r24, r24
     7da:	4c f4       	brge	.+18     	; 0x7ee <send_cmd+0x2a>
		cmd &= 0x7F;
		res = send_cmd(CMD55, 0);
     7dc:	40 e0       	ldi	r20, 0x00	; 0
     7de:	50 e0       	ldi	r21, 0x00	; 0
     7e0:	ba 01       	movw	r22, r20
     7e2:	87 e3       	ldi	r24, 0x37	; 55
     7e4:	ef df       	rcall	.-34     	; 0x7c4 <send_cmd>
		if (res > 1) return res;
     7e6:	82 30       	cpi	r24, 0x02	; 2
     7e8:	08 f0       	brcs	.+2      	; 0x7ec <send_cmd+0x28>
     7ea:	3c c0       	rjmp	.+120    	; 0x864 <send_cmd+0xa0>
{
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
		cmd &= 0x7F;
     7ec:	cf 77       	andi	r28, 0x7F	; 127
		res = send_cmd(CMD55, 0);
		if (res > 1) return res;
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
     7ee:	cc 30       	cpi	r28, 0x0C	; 12
     7f0:	f1 f0       	breq	.+60     	; 0x82e <send_cmd+0x6a>
		deselect();
     7f2:	96 df       	rcall	.-212    	; 0x720 <deselect>
		if (!select()) return 0xFF;
     7f4:	99 df       	rcall	.-206    	; 0x728 <select>
     7f6:	89 2b       	or	r24, r25
     7f8:	c1 f0       	breq	.+48     	; 0x82a <send_cmd+0x66>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + Command index */
     7fa:	8c 2f       	mov	r24, r28
     7fc:	80 64       	ori	r24, 0x40	; 64
     7fe:	8a df       	rcall	.-236    	; 0x714 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
     800:	8f 2d       	mov	r24, r15
     802:	88 df       	rcall	.-240    	; 0x714 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
     804:	80 2f       	mov	r24, r16
     806:	86 df       	rcall	.-244    	; 0x714 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
     808:	81 2f       	mov	r24, r17
     80a:	84 df       	rcall	.-248    	; 0x714 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
     80c:	8d 2f       	mov	r24, r29
     80e:	82 df       	rcall	.-252    	; 0x714 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) + Stop */
     810:	cc 23       	and	r28, r28
     812:	29 f1       	breq	.+74     	; 0x85e <send_cmd+0x9a>
     814:	21 c0       	rjmp	.+66     	; 0x858 <send_cmd+0x94>
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) Stop */
	xchg_spi(n);

	/* Receive command response */
	if (cmd == CMD12) xchg_spi(0xFF);		/* Skip a stuff byte when stop reading */
     816:	8f ef       	ldi	r24, 0xFF	; 255
     818:	7d df       	rcall	.-262    	; 0x714 <xchg_spi>
static
BYTE send_cmd (		/* Returns R1 resp (bit7==1:Send failed) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
     81a:	ca e0       	ldi	r28, 0x0A	; 10

	/* Receive command response */
	if (cmd == CMD12) xchg_spi(0xFF);		/* Skip a stuff byte when stop reading */
	n = 10;								/* Wait for a valid response in timeout of 10 attempts */
	do
		res = xchg_spi(0xFF);
     81c:	8f ef       	ldi	r24, 0xFF	; 255
     81e:	7a df       	rcall	.-268    	; 0x714 <xchg_spi>
	while ((res & 0x80) && --n);
     820:	88 23       	and	r24, r24
     822:	04 f5       	brge	.+64     	; 0x864 <send_cmd+0xa0>
     824:	c1 50       	subi	r28, 0x01	; 1
     826:	d1 f7       	brne	.-12     	; 0x81c <send_cmd+0x58>
     828:	1d c0       	rjmp	.+58     	; 0x864 <send_cmd+0xa0>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
		deselect();
		if (!select()) return 0xFF;
     82a:	8f ef       	ldi	r24, 0xFF	; 255
     82c:	1b c0       	rjmp	.+54     	; 0x864 <send_cmd+0xa0>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + Command index */
     82e:	8c e4       	ldi	r24, 0x4C	; 76
     830:	71 df       	rcall	.-286    	; 0x714 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
     832:	8f 2d       	mov	r24, r15
     834:	6f df       	rcall	.-290    	; 0x714 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
     836:	80 2f       	mov	r24, r16
     838:	6d df       	rcall	.-294    	; 0x714 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
     83a:	81 2f       	mov	r24, r17
     83c:	6b df       	rcall	.-298    	; 0x714 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
     83e:	8d 2f       	mov	r24, r29
     840:	69 df       	rcall	.-302    	; 0x714 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) + Stop */
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) Stop */
	xchg_spi(n);
     842:	81 e0       	ldi	r24, 0x01	; 1
     844:	67 df       	rcall	.-306    	; 0x714 <xchg_spi>

	/* Receive command response */
	if (cmd == CMD12) xchg_spi(0xFF);		/* Skip a stuff byte when stop reading */
     846:	cc 30       	cpi	r28, 0x0C	; 12
     848:	31 f3       	breq	.-52     	; 0x816 <send_cmd+0x52>
     84a:	e7 cf       	rjmp	.-50     	; 0x81a <send_cmd+0x56>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) + Stop */
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) Stop */
	xchg_spi(n);
     84c:	87 e8       	ldi	r24, 0x87	; 135
     84e:	62 df       	rcall	.-316    	; 0x714 <xchg_spi>
     850:	e4 cf       	rjmp	.-56     	; 0x81a <send_cmd+0x56>
     852:	81 e0       	ldi	r24, 0x01	; 1
     854:	5f df       	rcall	.-322    	; 0x714 <xchg_spi>
     856:	e1 cf       	rjmp	.-62     	; 0x81a <send_cmd+0x56>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) + Stop */
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) Stop */
     858:	c8 30       	cpi	r28, 0x08	; 8
     85a:	c1 f3       	breq	.-16     	; 0x84c <send_cmd+0x88>
     85c:	fa cf       	rjmp	.-12     	; 0x852 <send_cmd+0x8e>
	xchg_spi(n);
     85e:	85 e9       	ldi	r24, 0x95	; 149
     860:	59 df       	rcall	.-334    	; 0x714 <xchg_spi>
     862:	db cf       	rjmp	.-74     	; 0x81a <send_cmd+0x56>
	do
		res = xchg_spi(0xFF);
	while ((res & 0x80) && --n);

	return res;			/* Return with the response value */
}
     864:	df 91       	pop	r29
     866:	cf 91       	pop	r28
     868:	1f 91       	pop	r17
     86a:	0f 91       	pop	r16
     86c:	ff 90       	pop	r15
     86e:	08 95       	ret

00000870 <xmit_datablock>:
static
int xmit_datablock (
const BYTE *buff,	/* 512 byte data block to be transmitted */
BYTE token			/* Data/Stop token */
)
{
     870:	1f 93       	push	r17
     872:	cf 93       	push	r28
     874:	df 93       	push	r29
     876:	ec 01       	movw	r28, r24
     878:	16 2f       	mov	r17, r22
)
{
	BYTE d;


	Timer2 = wt / 10;
     87a:	92 e3       	ldi	r25, 0x32	; 50
     87c:	90 93 9b 03 	sts	0x039B, r25
	do{
		d = xchg_spi(0xFF);
     880:	8f ef       	ldi	r24, 0xFF	; 255
     882:	48 df       	rcall	.-368    	; 0x714 <xchg_spi>
	}while (d != 0xFF && Timer2);
     884:	8f 3f       	cpi	r24, 0xFF	; 255
     886:	31 f0       	breq	.+12     	; 0x894 <xmit_datablock+0x24>
     888:	90 91 9b 03 	lds	r25, 0x039B
     88c:	91 11       	cpse	r25, r1
     88e:	f8 cf       	rjmp	.-16     	; 0x880 <xmit_datablock+0x10>
)
{
	BYTE resp;


	if (!wait_ready(500)) return 0;
     890:	80 e0       	ldi	r24, 0x00	; 0
     892:	28 c0       	rjmp	.+80     	; 0x8e4 <xmit_datablock+0x74>

	xchg_spi(token);					/* Xmit data token */
     894:	81 2f       	mov	r24, r17
     896:	3e df       	rcall	.-388    	; 0x714 <xchg_spi>
	if (token != 0xFD) {	/* Is data token */
     898:	1d 3f       	cpi	r17, 0xFD	; 253
     89a:	11 f1       	breq	.+68     	; 0x8e0 <xmit_datablock+0x70>
void xmit_spi_multi (
const BYTE *p,	/* Data block to be sent */
UINT cnt		/* Size of data block (must be multiple of 2) */
)
{
	cli();
     89c:	f8 94       	cli
     89e:	9e 01       	movw	r18, r28
     8a0:	3e 5f       	subi	r19, 0xFE	; 254
	do {
		SPDR = *p++; loop_until_bit_is_set(SPSR,SPIF);
     8a2:	88 81       	ld	r24, Y
     8a4:	8e bd       	out	0x2e, r24	; 46
     8a6:	0d b4       	in	r0, 0x2d	; 45
     8a8:	07 fe       	sbrs	r0, 7
     8aa:	fd cf       	rjmp	.-6      	; 0x8a6 <xmit_datablock+0x36>
     8ac:	22 96       	adiw	r28, 0x02	; 2
     8ae:	fe 01       	movw	r30, r28
     8b0:	31 97       	sbiw	r30, 0x01	; 1
		SPDR = *p++; loop_until_bit_is_set(SPSR,SPIF);
     8b2:	80 81       	ld	r24, Z
     8b4:	8e bd       	out	0x2e, r24	; 46
     8b6:	0d b4       	in	r0, 0x2d	; 45
     8b8:	07 fe       	sbrs	r0, 7
     8ba:	fd cf       	rjmp	.-6      	; 0x8b6 <xmit_datablock+0x46>
	} while (cnt -= 2);
     8bc:	2c 17       	cp	r18, r28
     8be:	3d 07       	cpc	r19, r29
     8c0:	81 f7       	brne	.-32     	; 0x8a2 <xmit_datablock+0x32>
	sei();
     8c2:	78 94       	sei
	if (!wait_ready(500)) return 0;

	xchg_spi(token);					/* Xmit data token */
	if (token != 0xFD) {	/* Is data token */
		xmit_spi_multi(buff, CLUSTERSIZE);		/* Xmit the data block to the MMC */
		xchg_spi(0xFF);					/* CRC (Dummy) */
     8c4:	8f ef       	ldi	r24, 0xFF	; 255
     8c6:	26 df       	rcall	.-436    	; 0x714 <xchg_spi>
		xchg_spi(0xFF);
     8c8:	8f ef       	ldi	r24, 0xFF	; 255
     8ca:	24 df       	rcall	.-440    	; 0x714 <xchg_spi>
		resp = xchg_spi(0xFF);			/* Reveive data response */
     8cc:	8f ef       	ldi	r24, 0xFF	; 255
     8ce:	22 df       	rcall	.-444    	; 0x714 <xchg_spi>
		if ((resp & 0x1F) != 0x05)		/* If not accepted, return with error */
     8d0:	28 2f       	mov	r18, r24
     8d2:	2f 71       	andi	r18, 0x1F	; 31
     8d4:	81 e0       	ldi	r24, 0x01	; 1
     8d6:	90 e0       	ldi	r25, 0x00	; 0
     8d8:	25 30       	cpi	r18, 0x05	; 5
     8da:	21 f0       	breq	.+8      	; 0x8e4 <xmit_datablock+0x74>
     8dc:	80 e0       	ldi	r24, 0x00	; 0
     8de:	02 c0       	rjmp	.+4      	; 0x8e4 <xmit_datablock+0x74>
		return 0;
	}

	return 1;
     8e0:	81 e0       	ldi	r24, 0x01	; 1
     8e2:	90 e0       	ldi	r25, 0x00	; 0
}
     8e4:	df 91       	pop	r29
     8e6:	cf 91       	pop	r28
     8e8:	1f 91       	pop	r17
     8ea:	08 95       	ret

000008ec <disk_initialize>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
	BYTE pdrv		/* Physical drive number (0) */
)
{
     8ec:	cf 92       	push	r12
     8ee:	df 92       	push	r13
     8f0:	ef 92       	push	r14
     8f2:	ff 92       	push	r15
     8f4:	0f 93       	push	r16
     8f6:	1f 93       	push	r17
     8f8:	cf 93       	push	r28
     8fa:	df 93       	push	r29
     8fc:	00 d0       	rcall	.+0      	; 0x8fe <disk_initialize+0x12>
     8fe:	00 d0       	rcall	.+0      	; 0x900 <disk_initialize+0x14>
     900:	cd b7       	in	r28, 0x3d	; 61
     902:	de b7       	in	r29, 0x3e	; 62
	BYTE n, cmd, ty, ocr[4];


	if (pdrv) return STA_NOINIT;		/* Supports only single drive */
     904:	81 11       	cpse	r24, r1
     906:	9b c0       	rjmp	.+310    	; 0xa3e <disk_initialize+0x152>
	power_off();						/* Turn off the socket power to reset the card */
     908:	ff de       	rcall	.-514    	; 0x708 <power_off>
	if (Stat & (1<<STA_NODISK)) return Stat;	/* No card in the socket */
     90a:	80 91 06 01 	lds	r24, 0x0106
     90e:	82 ff       	sbrs	r24, 2
     910:	03 c0       	rjmp	.+6      	; 0x918 <disk_initialize+0x2c>
     912:	80 91 06 01 	lds	r24, 0x0106
     916:	9e c0       	rjmp	.+316    	; 0xa54 <disk_initialize+0x168>

static
void power_on (void)
{
	//PORTB |= (1<<PORTB7) | (1<<PORTB5) | (1<<PORTB4);	/* Configure SCK/MOSI/CS as output */
	DDRB |= (1<<PORTB7) | (1<<PORTB5) | (1<<PORTB4);
     918:	84 b1       	in	r24, 0x04	; 4
     91a:	80 6b       	ori	r24, 0xB0	; 176
     91c:	84 b9       	out	0x04, r24	; 4
	DDRB &= ~(1<<PORTB6);
     91e:	26 98       	cbi	0x04, 6	; 4
	CS_HIGH();
     920:	2c 9a       	sbi	0x05, 4	; 5

	SPSR = 0x01;			/* SPI 2x mode */
     922:	81 e0       	ldi	r24, 0x01	; 1
     924:	8d bd       	out	0x2d, r24	; 45
	SPCR = 0x52;			/* Enable SPI function in mode 0 */
     926:	82 e5       	ldi	r24, 0x52	; 82
     928:	8c bd       	out	0x2c, r24	; 44
     92a:	1a e0       	ldi	r17, 0x0A	; 10
	if (pdrv) return STA_NOINIT;		/* Supports only single drive */
	power_off();						/* Turn off the socket power to reset the card */
	if (Stat & (1<<STA_NODISK)) return Stat;	/* No card in the socket */
	power_on();							/* Turn on the socket power */
//	FCLK_SLOW();
	for (n = 10; n; n--) xchg_spi(0xFF);	/* 80 dummy clocks */
     92c:	8f ef       	ldi	r24, 0xFF	; 255
     92e:	f2 de       	rcall	.-540    	; 0x714 <xchg_spi>
     930:	11 50       	subi	r17, 0x01	; 1
     932:	e1 f7       	brne	.-8      	; 0x92c <disk_initialize+0x40>

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
     934:	40 e0       	ldi	r20, 0x00	; 0
     936:	50 e0       	ldi	r21, 0x00	; 0
     938:	ba 01       	movw	r22, r20
     93a:	80 e0       	ldi	r24, 0x00	; 0
     93c:	43 df       	rcall	.-378    	; 0x7c4 <send_cmd>
     93e:	81 30       	cpi	r24, 0x01	; 1
     940:	09 f0       	breq	.+2      	; 0x944 <disk_initialize+0x58>
     942:	84 c0       	rjmp	.+264    	; 0xa4c <disk_initialize+0x160>
		Timer1 = 100;						/* Initialization timeout of 1000 msec */
     944:	84 e6       	ldi	r24, 0x64	; 100
     946:	80 93 9c 03 	sts	0x039C, r24
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
     94a:	4a ea       	ldi	r20, 0xAA	; 170
     94c:	51 e0       	ldi	r21, 0x01	; 1
     94e:	60 e0       	ldi	r22, 0x00	; 0
     950:	70 e0       	ldi	r23, 0x00	; 0
     952:	88 e0       	ldi	r24, 0x08	; 8
     954:	37 df       	rcall	.-402    	; 0x7c4 <send_cmd>
     956:	81 30       	cpi	r24, 0x01	; 1
     958:	09 f0       	breq	.+2      	; 0x95c <disk_initialize+0x70>
     95a:	3f c0       	rjmp	.+126    	; 0x9da <disk_initialize+0xee>
     95c:	ce 01       	movw	r24, r28
     95e:	01 96       	adiw	r24, 0x01	; 1
     960:	6c 01       	movw	r12, r24
     962:	7e 01       	movw	r14, r28
     964:	95 e0       	ldi	r25, 0x05	; 5
     966:	e9 0e       	add	r14, r25
     968:	f1 1c       	adc	r15, r1
     96a:	86 01       	movw	r16, r12
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);		/* Get trailing return value of R7 resp */
     96c:	8f ef       	ldi	r24, 0xFF	; 255
     96e:	d2 de       	rcall	.-604    	; 0x714 <xchg_spi>
     970:	f8 01       	movw	r30, r16
     972:	81 93       	st	Z+, r24
     974:	8f 01       	movw	r16, r30
     976:	ee 15       	cp	r30, r14
     978:	ff 05       	cpc	r31, r15
     97a:	c1 f7       	brne	.-16     	; 0x96c <disk_initialize+0x80>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
     97c:	8b 81       	ldd	r24, Y+3	; 0x03
     97e:	81 30       	cpi	r24, 0x01	; 1
     980:	09 f0       	breq	.+2      	; 0x984 <disk_initialize+0x98>
     982:	64 c0       	rjmp	.+200    	; 0xa4c <disk_initialize+0x160>
     984:	8c 81       	ldd	r24, Y+4	; 0x04
     986:	8a 3a       	cpi	r24, 0xAA	; 170
     988:	09 f0       	breq	.+2      	; 0x98c <disk_initialize+0xa0>
     98a:	60 c0       	rjmp	.+192    	; 0xa4c <disk_initialize+0x160>
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
     98c:	80 91 9c 03 	lds	r24, 0x039C
     990:	88 23       	and	r24, r24
     992:	41 f0       	breq	.+16     	; 0x9a4 <disk_initialize+0xb8>
     994:	40 e0       	ldi	r20, 0x00	; 0
     996:	50 e0       	ldi	r21, 0x00	; 0
     998:	60 e0       	ldi	r22, 0x00	; 0
     99a:	70 e4       	ldi	r23, 0x40	; 64
     99c:	89 ea       	ldi	r24, 0xA9	; 169
     99e:	12 df       	rcall	.-476    	; 0x7c4 <send_cmd>
     9a0:	81 11       	cpse	r24, r1
     9a2:	f4 cf       	rjmp	.-24     	; 0x98c <disk_initialize+0xa0>
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
     9a4:	80 91 9c 03 	lds	r24, 0x039C
     9a8:	88 23       	and	r24, r24
     9aa:	09 f4       	brne	.+2      	; 0x9ae <disk_initialize+0xc2>
     9ac:	4f c0       	rjmp	.+158    	; 0xa4c <disk_initialize+0x160>
     9ae:	40 e0       	ldi	r20, 0x00	; 0
     9b0:	50 e0       	ldi	r21, 0x00	; 0
     9b2:	ba 01       	movw	r22, r20
     9b4:	8a e3       	ldi	r24, 0x3A	; 58
     9b6:	06 df       	rcall	.-500    	; 0x7c4 <send_cmd>
     9b8:	81 11       	cpse	r24, r1
     9ba:	48 c0       	rjmp	.+144    	; 0xa4c <disk_initialize+0x160>
     9bc:	76 01       	movw	r14, r12
     9be:	14 e0       	ldi	r17, 0x04	; 4
     9c0:	1c 0d       	add	r17, r12
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
     9c2:	8f ef       	ldi	r24, 0xFF	; 255
     9c4:	a7 de       	rcall	.-690    	; 0x714 <xchg_spi>
     9c6:	f7 01       	movw	r30, r14
     9c8:	81 93       	st	Z+, r24
     9ca:	7f 01       	movw	r14, r30
     9cc:	1e 13       	cpse	r17, r30
     9ce:	f9 cf       	rjmp	.-14     	; 0x9c2 <disk_initialize+0xd6>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
     9d0:	89 81       	ldd	r24, Y+1	; 0x01
     9d2:	86 fd       	sbrc	r24, 6
     9d4:	36 c0       	rjmp	.+108    	; 0xa42 <disk_initialize+0x156>
     9d6:	84 e0       	ldi	r24, 0x04	; 4
     9d8:	35 c0       	rjmp	.+106    	; 0xa44 <disk_initialize+0x158>
				}
			}
		} else {							/* SDv1 or MMCv3 */
			if (send_cmd(ACMD41, 0) <= 1) 	{
     9da:	40 e0       	ldi	r20, 0x00	; 0
     9dc:	50 e0       	ldi	r21, 0x00	; 0
     9de:	ba 01       	movw	r22, r20
     9e0:	89 ea       	ldi	r24, 0xA9	; 169
     9e2:	f0 de       	rcall	.-544    	; 0x7c4 <send_cmd>
     9e4:	82 30       	cpi	r24, 0x02	; 2
     9e6:	18 f0       	brcs	.+6      	; 0x9ee <disk_initialize+0x102>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
     9e8:	01 e0       	ldi	r16, 0x01	; 1
     9ea:	11 e0       	ldi	r17, 0x01	; 1
     9ec:	02 c0       	rjmp	.+4      	; 0x9f2 <disk_initialize+0x106>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
				}
			}
		} else {							/* SDv1 or MMCv3 */
			if (send_cmd(ACMD41, 0) <= 1) 	{
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
     9ee:	02 e0       	ldi	r16, 0x02	; 2
     9f0:	19 ea       	ldi	r17, 0xA9	; 169
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
			}
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
     9f2:	90 91 9c 03 	lds	r25, 0x039C
     9f6:	99 23       	and	r25, r25
     9f8:	39 f0       	breq	.+14     	; 0xa08 <disk_initialize+0x11c>
     9fa:	40 e0       	ldi	r20, 0x00	; 0
     9fc:	50 e0       	ldi	r21, 0x00	; 0
     9fe:	ba 01       	movw	r22, r20
     a00:	81 2f       	mov	r24, r17
     a02:	e0 de       	rcall	.-576    	; 0x7c4 <send_cmd>
     a04:	81 11       	cpse	r24, r1
     a06:	f5 cf       	rjmp	.-22     	; 0x9f2 <disk_initialize+0x106>
			if (!Timer1 || send_cmd(CMD16, CLUSTERSIZE) != 0)	/* Set R/W block length to 512 */
     a08:	80 91 9c 03 	lds	r24, 0x039C
     a0c:	88 23       	and	r24, r24
     a0e:	f1 f0       	breq	.+60     	; 0xa4c <disk_initialize+0x160>
     a10:	40 e0       	ldi	r20, 0x00	; 0
     a12:	52 e0       	ldi	r21, 0x02	; 2
     a14:	60 e0       	ldi	r22, 0x00	; 0
     a16:	70 e0       	ldi	r23, 0x00	; 0
     a18:	80 e1       	ldi	r24, 0x10	; 16
     a1a:	d4 de       	rcall	.-600    	; 0x7c4 <send_cmd>
     a1c:	81 11       	cpse	r24, r1
     a1e:	16 c0       	rjmp	.+44     	; 0xa4c <disk_initialize+0x160>
				ty = 0;
		}
	}
	CardType = ty;
     a20:	00 93 9a 03 	sts	0x039A, r16
	deselect();
     a24:	7d de       	rcall	.-774    	; 0x720 <deselect>

	if (ty) {			/* Initialization succeded */
     a26:	00 23       	and	r16, r16
     a28:	31 f0       	breq	.+12     	; 0xa36 <disk_initialize+0x14a>
		Stat &= ~STA_NOINIT;		/* Clear STA_NOINIT */
     a2a:	80 91 06 01 	lds	r24, 0x0106
     a2e:	8e 7f       	andi	r24, 0xFE	; 254
     a30:	80 93 06 01 	sts	0x0106, r24
     a34:	01 c0       	rjmp	.+2      	; 0xa38 <disk_initialize+0x14c>
//		FCLK_FAST();
	} else {			/* Initialization failed */
		power_off();
     a36:	68 de       	rcall	.-816    	; 0x708 <power_off>
	}

	return Stat;
     a38:	80 91 06 01 	lds	r24, 0x0106
     a3c:	0b c0       	rjmp	.+22     	; 0xa54 <disk_initialize+0x168>
)
{
	BYTE n, cmd, ty, ocr[4];


	if (pdrv) return STA_NOINIT;		/* Supports only single drive */
     a3e:	81 e0       	ldi	r24, 0x01	; 1
     a40:	09 c0       	rjmp	.+18     	; 0xa54 <disk_initialize+0x168>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);		/* Get trailing return value of R7 resp */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
     a42:	8c e0       	ldi	r24, 0x0C	; 12
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
			if (!Timer1 || send_cmd(CMD16, CLUSTERSIZE) != 0)	/* Set R/W block length to 512 */
				ty = 0;
		}
	}
	CardType = ty;
     a44:	80 93 9a 03 	sts	0x039A, r24
	deselect();
     a48:	6b de       	rcall	.-810    	; 0x720 <deselect>
     a4a:	ef cf       	rjmp	.-34     	; 0xa2a <disk_initialize+0x13e>
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
			if (!Timer1 || send_cmd(CMD16, CLUSTERSIZE) != 0)	/* Set R/W block length to 512 */
				ty = 0;
		}
	}
	CardType = ty;
     a4c:	10 92 9a 03 	sts	0x039A, r1
	deselect();
     a50:	67 de       	rcall	.-818    	; 0x720 <deselect>
     a52:	f1 cf       	rjmp	.-30     	; 0xa36 <disk_initialize+0x14a>
	} else {			/* Initialization failed */
		power_off();
	}

	return Stat;
}
     a54:	0f 90       	pop	r0
     a56:	0f 90       	pop	r0
     a58:	0f 90       	pop	r0
     a5a:	0f 90       	pop	r0
     a5c:	df 91       	pop	r29
     a5e:	cf 91       	pop	r28
     a60:	1f 91       	pop	r17
     a62:	0f 91       	pop	r16
     a64:	ff 90       	pop	r15
     a66:	ef 90       	pop	r14
     a68:	df 90       	pop	r13
     a6a:	cf 90       	pop	r12
     a6c:	08 95       	ret

00000a6e <disk_status>:

DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber (0) */
)
{
	if (pdrv) return STA_NOINIT;	/* Supports only single drive */
     a6e:	81 11       	cpse	r24, r1
     a70:	03 c0       	rjmp	.+6      	; 0xa78 <disk_status+0xa>
	return Stat;
     a72:	80 91 06 01 	lds	r24, 0x0106
     a76:	08 95       	ret

DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber (0) */
)
{
	if (pdrv) return STA_NOINIT;	/* Supports only single drive */
     a78:	81 e0       	ldi	r24, 0x01	; 1
	return Stat;
}
     a7a:	08 95       	ret

00000a7c <disk_read>:
	BYTE pdrv,			/* Physical drive nmuber (0) */
	BYTE *buff,			/* Pointer to the data buffer to store read data */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
     a7c:	ff 92       	push	r15
     a7e:	0f 93       	push	r16
     a80:	1f 93       	push	r17
     a82:	cf 93       	push	r28
     a84:	df 93       	push	r29
     a86:	eb 01       	movw	r28, r22
	BYTE cmd;


	if (pdrv || !count) return RES_PARERR;
     a88:	81 11       	cpse	r24, r1
     a8a:	3f c0       	rjmp	.+126    	; 0xb0a <disk_read+0x8e>
     a8c:	01 15       	cp	r16, r1
     a8e:	11 05       	cpc	r17, r1
     a90:	09 f4       	brne	.+2      	; 0xa94 <disk_read+0x18>
     a92:	3d c0       	rjmp	.+122    	; 0xb0e <disk_read+0x92>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
     a94:	80 91 06 01 	lds	r24, 0x0106
     a98:	80 fd       	sbrc	r24, 0
     a9a:	3b c0       	rjmp	.+118    	; 0xb12 <disk_read+0x96>

	if (!(CardType & CT_BLOCK)) sector *= CLUSTERSIZE;	/* Convert to byte address if needed */
     a9c:	80 91 9a 03 	lds	r24, 0x039A
     aa0:	83 fd       	sbrc	r24, 3
     aa2:	09 c0       	rjmp	.+18     	; 0xab6 <disk_read+0x3a>
     aa4:	01 2e       	mov	r0, r17
     aa6:	19 e0       	ldi	r17, 0x09	; 9
     aa8:	22 0f       	add	r18, r18
     aaa:	33 1f       	adc	r19, r19
     aac:	44 1f       	adc	r20, r20
     aae:	55 1f       	adc	r21, r21
     ab0:	1a 95       	dec	r17
     ab2:	d1 f7       	brne	.-12     	; 0xaa8 <disk_read+0x2c>
     ab4:	10 2d       	mov	r17, r0

	cmd = count > 1 ? CMD18 : CMD17;			/*  READ_MULTIPLE_BLOCK : READ_SINGLE_BLOCK */
     ab6:	02 30       	cpi	r16, 0x02	; 2
     ab8:	11 05       	cpc	r17, r1
     aba:	28 f4       	brcc	.+10     	; 0xac6 <disk_read+0x4a>
     abc:	0f 2e       	mov	r0, r31
     abe:	f1 e1       	ldi	r31, 0x11	; 17
     ac0:	ff 2e       	mov	r15, r31
     ac2:	f0 2d       	mov	r31, r0
     ac4:	04 c0       	rjmp	.+8      	; 0xace <disk_read+0x52>
     ac6:	0f 2e       	mov	r0, r31
     ac8:	f2 e1       	ldi	r31, 0x12	; 18
     aca:	ff 2e       	mov	r15, r31
     acc:	f0 2d       	mov	r31, r0
	if (send_cmd(cmd, sector) == 0) {
     ace:	ba 01       	movw	r22, r20
     ad0:	a9 01       	movw	r20, r18
     ad2:	8f 2d       	mov	r24, r15
     ad4:	77 de       	rcall	.-786    	; 0x7c4 <send_cmd>
     ad6:	81 11       	cpse	r24, r1
     ad8:	12 c0       	rjmp	.+36     	; 0xafe <disk_read+0x82>
		do {
			if (!rcvr_datablock(buff, CLUSTERSIZE)) break;
     ada:	60 e0       	ldi	r22, 0x00	; 0
     adc:	72 e0       	ldi	r23, 0x02	; 2
     ade:	ce 01       	movw	r24, r28
     ae0:	38 de       	rcall	.-912    	; 0x752 <rcvr_datablock>
     ae2:	89 2b       	or	r24, r25
     ae4:	21 f0       	breq	.+8      	; 0xaee <disk_read+0x72>
			buff += CLUSTERSIZE;
     ae6:	de 5f       	subi	r29, 0xFE	; 254
		} while (--count);
     ae8:	01 50       	subi	r16, 0x01	; 1
     aea:	11 09       	sbc	r17, r1
     aec:	b1 f7       	brne	.-20     	; 0xada <disk_read+0x5e>
		if (cmd == CMD18) send_cmd(CMD12, 0);	/* STOP_TRANSMISSION */
     aee:	82 e1       	ldi	r24, 0x12	; 18
     af0:	f8 12       	cpse	r15, r24
     af2:	05 c0       	rjmp	.+10     	; 0xafe <disk_read+0x82>
     af4:	40 e0       	ldi	r20, 0x00	; 0
     af6:	50 e0       	ldi	r21, 0x00	; 0
     af8:	ba 01       	movw	r22, r20
     afa:	8c e0       	ldi	r24, 0x0C	; 12
     afc:	63 de       	rcall	.-826    	; 0x7c4 <send_cmd>
	}
	deselect();
     afe:	10 de       	rcall	.-992    	; 0x720 <deselect>

	return count ? RES_ERROR : RES_OK;
     b00:	81 e0       	ldi	r24, 0x01	; 1
     b02:	01 2b       	or	r16, r17
     b04:	39 f4       	brne	.+14     	; 0xb14 <disk_read+0x98>
     b06:	80 e0       	ldi	r24, 0x00	; 0
     b08:	05 c0       	rjmp	.+10     	; 0xb14 <disk_read+0x98>
)
{
	BYTE cmd;


	if (pdrv || !count) return RES_PARERR;
     b0a:	84 e0       	ldi	r24, 0x04	; 4
     b0c:	03 c0       	rjmp	.+6      	; 0xb14 <disk_read+0x98>
     b0e:	84 e0       	ldi	r24, 0x04	; 4
     b10:	01 c0       	rjmp	.+2      	; 0xb14 <disk_read+0x98>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
     b12:	83 e0       	ldi	r24, 0x03	; 3
		if (cmd == CMD18) send_cmd(CMD12, 0);	/* STOP_TRANSMISSION */
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
}
     b14:	df 91       	pop	r29
     b16:	cf 91       	pop	r28
     b18:	1f 91       	pop	r17
     b1a:	0f 91       	pop	r16
     b1c:	ff 90       	pop	r15
     b1e:	08 95       	ret

00000b20 <disk_write>:
	BYTE pdrv,			/* Physical drive nmuber (0) */
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
     b20:	cf 92       	push	r12
     b22:	df 92       	push	r13
     b24:	ef 92       	push	r14
     b26:	ff 92       	push	r15
     b28:	0f 93       	push	r16
     b2a:	1f 93       	push	r17
     b2c:	cf 93       	push	r28
     b2e:	df 93       	push	r29
     b30:	eb 01       	movw	r28, r22
     b32:	69 01       	movw	r12, r18
     b34:	7a 01       	movw	r14, r20
	if (pdrv || !count) return RES_PARERR;
     b36:	81 11       	cpse	r24, r1
     b38:	51 c0       	rjmp	.+162    	; 0xbdc <disk_write+0xbc>
     b3a:	01 15       	cp	r16, r1
     b3c:	11 05       	cpc	r17, r1
     b3e:	09 f4       	brne	.+2      	; 0xb42 <disk_write+0x22>
     b40:	4f c0       	rjmp	.+158    	; 0xbe0 <disk_write+0xc0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
     b42:	80 91 06 01 	lds	r24, 0x0106
     b46:	80 fd       	sbrc	r24, 0
     b48:	4d c0       	rjmp	.+154    	; 0xbe4 <disk_write+0xc4>
	if (Stat & STA_PROTECT) return RES_WRPRT;
     b4a:	80 91 06 01 	lds	r24, 0x0106
     b4e:	82 fd       	sbrc	r24, 2
     b50:	4b c0       	rjmp	.+150    	; 0xbe8 <disk_write+0xc8>

	if (!(CardType & CT_BLOCK)) sector *= CLUSTERSIZE;	/* Convert to byte address if needed */
     b52:	80 91 9a 03 	lds	r24, 0x039A
     b56:	83 fd       	sbrc	r24, 3
     b58:	09 c0       	rjmp	.+18     	; 0xb6c <disk_write+0x4c>
     b5a:	0b 2e       	mov	r0, r27
     b5c:	b9 e0       	ldi	r27, 0x09	; 9
     b5e:	cc 0c       	add	r12, r12
     b60:	dd 1c       	adc	r13, r13
     b62:	ee 1c       	adc	r14, r14
     b64:	ff 1c       	adc	r15, r15
     b66:	ba 95       	dec	r27
     b68:	d1 f7       	brne	.-12     	; 0xb5e <disk_write+0x3e>
     b6a:	b0 2d       	mov	r27, r0

	if (count == 1) {	/* Single block write */
     b6c:	01 30       	cpi	r16, 0x01	; 1
     b6e:	11 05       	cpc	r17, r1
     b70:	89 f4       	brne	.+34     	; 0xb94 <disk_write+0x74>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
     b72:	b7 01       	movw	r22, r14
     b74:	a6 01       	movw	r20, r12
     b76:	88 e1       	ldi	r24, 0x18	; 24
     b78:	25 de       	rcall	.-950    	; 0x7c4 <send_cmd>
     b7a:	81 11       	cpse	r24, r1
     b7c:	29 c0       	rjmp	.+82     	; 0xbd0 <disk_write+0xb0>
			&& xmit_datablock(buff, 0xFE))
     b7e:	6e ef       	ldi	r22, 0xFE	; 254
     b80:	ce 01       	movw	r24, r28
     b82:	76 de       	rcall	.-788    	; 0x870 <xmit_datablock>
     b84:	31 e0       	ldi	r19, 0x01	; 1
     b86:	20 e0       	ldi	r18, 0x00	; 0
     b88:	89 2b       	or	r24, r25
     b8a:	09 f0       	breq	.+2      	; 0xb8e <disk_write+0x6e>
     b8c:	30 e0       	ldi	r19, 0x00	; 0
     b8e:	03 2f       	mov	r16, r19
     b90:	12 2f       	mov	r17, r18
     b92:	1e c0       	rjmp	.+60     	; 0xbd0 <disk_write+0xb0>
			count = 0;
	}
	else {				/* Multiple block write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
     b94:	86 70       	andi	r24, 0x06	; 6
     b96:	29 f0       	breq	.+10     	; 0xba2 <disk_write+0x82>
     b98:	a8 01       	movw	r20, r16
     b9a:	60 e0       	ldi	r22, 0x00	; 0
     b9c:	70 e0       	ldi	r23, 0x00	; 0
     b9e:	87 e9       	ldi	r24, 0x97	; 151
     ba0:	11 de       	rcall	.-990    	; 0x7c4 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
     ba2:	b7 01       	movw	r22, r14
     ba4:	a6 01       	movw	r20, r12
     ba6:	89 e1       	ldi	r24, 0x19	; 25
     ba8:	0d de       	rcall	.-998    	; 0x7c4 <send_cmd>
     baa:	81 11       	cpse	r24, r1
     bac:	11 c0       	rjmp	.+34     	; 0xbd0 <disk_write+0xb0>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
     bae:	6c ef       	ldi	r22, 0xFC	; 252
     bb0:	ce 01       	movw	r24, r28
     bb2:	5e de       	rcall	.-836    	; 0x870 <xmit_datablock>
     bb4:	89 2b       	or	r24, r25
     bb6:	21 f0       	breq	.+8      	; 0xbc0 <disk_write+0xa0>
				buff += CLUSTERSIZE;
     bb8:	de 5f       	subi	r29, 0xFE	; 254
			} while (--count);
     bba:	01 50       	subi	r16, 0x01	; 1
     bbc:	11 09       	sbc	r17, r1
     bbe:	b9 f7       	brne	.-18     	; 0xbae <disk_write+0x8e>
			if (!xmit_datablock(0, 0xFD))	/* STOP_TRAN token */
     bc0:	6d ef       	ldi	r22, 0xFD	; 253
     bc2:	80 e0       	ldi	r24, 0x00	; 0
     bc4:	90 e0       	ldi	r25, 0x00	; 0
     bc6:	54 de       	rcall	.-856    	; 0x870 <xmit_datablock>
     bc8:	89 2b       	or	r24, r25
     bca:	11 f4       	brne	.+4      	; 0xbd0 <disk_write+0xb0>
				count = 1;
     bcc:	01 e0       	ldi	r16, 0x01	; 1
     bce:	10 e0       	ldi	r17, 0x00	; 0
		}
	}
	deselect();
     bd0:	a7 dd       	rcall	.-1202   	; 0x720 <deselect>

	return count ? RES_ERROR : RES_OK;
     bd2:	81 e0       	ldi	r24, 0x01	; 1
     bd4:	01 2b       	or	r16, r17
     bd6:	49 f4       	brne	.+18     	; 0xbea <disk_write+0xca>
     bd8:	80 e0       	ldi	r24, 0x00	; 0
     bda:	07 c0       	rjmp	.+14     	; 0xbea <disk_write+0xca>
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
	if (pdrv || !count) return RES_PARERR;
     bdc:	84 e0       	ldi	r24, 0x04	; 4
     bde:	05 c0       	rjmp	.+10     	; 0xbea <disk_write+0xca>
     be0:	84 e0       	ldi	r24, 0x04	; 4
     be2:	03 c0       	rjmp	.+6      	; 0xbea <disk_write+0xca>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
     be4:	83 e0       	ldi	r24, 0x03	; 3
     be6:	01 c0       	rjmp	.+2      	; 0xbea <disk_write+0xca>
	if (Stat & STA_PROTECT) return RES_WRPRT;
     be8:	82 e0       	ldi	r24, 0x02	; 2
		}
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
}
     bea:	df 91       	pop	r29
     bec:	cf 91       	pop	r28
     bee:	1f 91       	pop	r17
     bf0:	0f 91       	pop	r16
     bf2:	ff 90       	pop	r15
     bf4:	ef 90       	pop	r14
     bf6:	df 90       	pop	r13
     bf8:	cf 90       	pop	r12
     bfa:	08 95       	ret

00000bfc <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
     bfc:	ef 92       	push	r14
     bfe:	ff 92       	push	r15
     c00:	0f 93       	push	r16
     c02:	1f 93       	push	r17
     c04:	cf 93       	push	r28
     c06:	df 93       	push	r29
     c08:	cd b7       	in	r28, 0x3d	; 61
     c0a:	de b7       	in	r29, 0x3e	; 62
     c0c:	60 97       	sbiw	r28, 0x10	; 16
     c0e:	0f b6       	in	r0, 0x3f	; 63
     c10:	f8 94       	cli
     c12:	de bf       	out	0x3e, r29	; 62
     c14:	0f be       	out	0x3f, r0	; 63
     c16:	cd bf       	out	0x3d, r28	; 61
	DRESULT res;
	BYTE n, csd[16], *ptr = buff;
	DWORD csize;


	if (pdrv) return RES_PARERR;
     c18:	81 11       	cpse	r24, r1
     c1a:	7c c1       	rjmp	.+760    	; 0xf14 <disk_ioctl+0x318>

	res = RES_ERROR;

	if (Stat & STA_NOINIT) return RES_NOTRDY;
     c1c:	80 91 06 01 	lds	r24, 0x0106
     c20:	80 fd       	sbrc	r24, 0
     c22:	7a c1       	rjmp	.+756    	; 0xf18 <disk_ioctl+0x31c>
     c24:	7a 01       	movw	r14, r20

	switch (cmd) {
     c26:	06 2f       	mov	r16, r22
     c28:	10 e0       	ldi	r17, 0x00	; 0
     c2a:	07 33       	cpi	r16, 0x37	; 55
     c2c:	11 05       	cpc	r17, r1
     c2e:	08 f0       	brcs	.+2      	; 0xc32 <disk_ioctl+0x36>
     c30:	59 c1       	rjmp	.+690    	; 0xee4 <disk_ioctl+0x2e8>
     c32:	f8 01       	movw	r30, r16
     c34:	ea 5b       	subi	r30, 0xBA	; 186
     c36:	ff 4f       	sbci	r31, 0xFF	; 255
     c38:	0c 94 12 42 	jmp	0x8424	; 0x8424 <__tablejump2__>
	case CTRL_SYNC :		/* Make sure that no pending write process. Do not remove this or written sector might not left updated. */
		if (select()) res = RES_OK;
     c3c:	75 dd       	rcall	.-1302   	; 0x728 <select>
     c3e:	11 e0       	ldi	r17, 0x01	; 1
     c40:	89 2b       	or	r24, r25
     c42:	09 f4       	brne	.+2      	; 0xc46 <disk_ioctl+0x4a>
     c44:	64 c1       	rjmp	.+712    	; 0xf0e <disk_ioctl+0x312>
     c46:	10 e0       	ldi	r17, 0x00	; 0
     c48:	62 c1       	rjmp	.+708    	; 0xf0e <disk_ioctl+0x312>
		break;

	case GET_SECTOR_COUNT :	/* Get number of sectors on the disk (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
     c4a:	40 e0       	ldi	r20, 0x00	; 0
     c4c:	50 e0       	ldi	r21, 0x00	; 0
     c4e:	ba 01       	movw	r22, r20
     c50:	89 e0       	ldi	r24, 0x09	; 9
     c52:	b8 dd       	rcall	.-1168   	; 0x7c4 <send_cmd>
     c54:	81 11       	cpse	r24, r1
     c56:	48 c1       	rjmp	.+656    	; 0xee8 <disk_ioctl+0x2ec>
     c58:	60 e1       	ldi	r22, 0x10	; 16
     c5a:	70 e0       	ldi	r23, 0x00	; 0
     c5c:	ce 01       	movw	r24, r28
     c5e:	01 96       	adiw	r24, 0x01	; 1
     c60:	78 dd       	rcall	.-1296   	; 0x752 <rcvr_datablock>
     c62:	89 2b       	or	r24, r25
     c64:	09 f4       	brne	.+2      	; 0xc68 <disk_ioctl+0x6c>
     c66:	42 c1       	rjmp	.+644    	; 0xeec <disk_ioctl+0x2f0>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
     c68:	89 81       	ldd	r24, Y+1	; 0x01
     c6a:	82 95       	swap	r24
     c6c:	86 95       	lsr	r24
     c6e:	86 95       	lsr	r24
     c70:	83 70       	andi	r24, 0x03	; 3
     c72:	81 30       	cpi	r24, 0x01	; 1
     c74:	31 f5       	brne	.+76     	; 0xcc2 <disk_ioctl+0xc6>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
     c76:	88 85       	ldd	r24, Y+8	; 0x08
     c78:	8f 73       	andi	r24, 0x3F	; 63
     c7a:	90 e0       	ldi	r25, 0x00	; 0
     c7c:	a0 e0       	ldi	r26, 0x00	; 0
     c7e:	b0 e0       	ldi	r27, 0x00	; 0
     c80:	dc 01       	movw	r26, r24
     c82:	99 27       	eor	r25, r25
     c84:	88 27       	eor	r24, r24
     c86:	01 96       	adiw	r24, 0x01	; 1
     c88:	a1 1d       	adc	r26, r1
     c8a:	b1 1d       	adc	r27, r1
     c8c:	29 85       	ldd	r18, Y+9	; 0x09
     c8e:	30 e0       	ldi	r19, 0x00	; 0
     c90:	32 2f       	mov	r19, r18
     c92:	22 27       	eor	r18, r18
     c94:	4a 85       	ldd	r20, Y+10	; 0x0a
     c96:	24 0f       	add	r18, r20
     c98:	31 1d       	adc	r19, r1
     c9a:	82 0f       	add	r24, r18
     c9c:	93 1f       	adc	r25, r19
     c9e:	a1 1d       	adc	r26, r1
     ca0:	b1 1d       	adc	r27, r1
				*(DWORD*)buff = csize << 10;
     ca2:	07 2e       	mov	r0, r23
     ca4:	7a e0       	ldi	r23, 0x0A	; 10
     ca6:	88 0f       	add	r24, r24
     ca8:	99 1f       	adc	r25, r25
     caa:	aa 1f       	adc	r26, r26
     cac:	bb 1f       	adc	r27, r27
     cae:	7a 95       	dec	r23
     cb0:	d1 f7       	brne	.-12     	; 0xca6 <disk_ioctl+0xaa>
     cb2:	70 2d       	mov	r23, r0
     cb4:	f7 01       	movw	r30, r14
     cb6:	80 83       	st	Z, r24
     cb8:	91 83       	std	Z+1, r25	; 0x01
     cba:	a2 83       	std	Z+2, r26	; 0x02
     cbc:	b3 83       	std	Z+3, r27	; 0x03
			} else {					/* SDC ver 1.XX or MMC*/
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
				*(DWORD*)buff = csize << (n - 9);
			}
			res = RES_OK;
     cbe:	10 e0       	ldi	r17, 0x00	; 0
     cc0:	26 c1       	rjmp	.+588    	; 0xf0e <disk_ioctl+0x312>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
				*(DWORD*)buff = csize << 10;
			} else {					/* SDC ver 1.XX or MMC*/
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
     cc2:	89 85       	ldd	r24, Y+9	; 0x09
     cc4:	82 95       	swap	r24
     cc6:	86 95       	lsr	r24
     cc8:	86 95       	lsr	r24
     cca:	83 70       	andi	r24, 0x03	; 3
     ccc:	28 85       	ldd	r18, Y+8	; 0x08
     cce:	90 e0       	ldi	r25, 0x00	; 0
     cd0:	f4 e0       	ldi	r31, 0x04	; 4
     cd2:	2f 9f       	mul	r18, r31
     cd4:	80 0d       	add	r24, r0
     cd6:	91 1d       	adc	r25, r1
     cd8:	11 24       	eor	r1, r1
     cda:	9c 01       	movw	r18, r24
     cdc:	2f 5f       	subi	r18, 0xFF	; 255
     cde:	3f 4f       	sbci	r19, 0xFF	; 255
     ce0:	8f 81       	ldd	r24, Y+7	; 0x07
     ce2:	83 70       	andi	r24, 0x03	; 3
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	98 2f       	mov	r25, r24
     ce8:	88 27       	eor	r24, r24
     cea:	99 0f       	add	r25, r25
     cec:	99 0f       	add	r25, r25
     cee:	82 0f       	add	r24, r18
     cf0:	93 1f       	adc	r25, r19
     cf2:	a0 e0       	ldi	r26, 0x00	; 0
     cf4:	b0 e0       	ldi	r27, 0x00	; 0
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
				*(DWORD*)buff = csize << 10;
			} else {					/* SDC ver 1.XX or MMC*/
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
     cf6:	3e 81       	ldd	r19, Y+6	; 0x06
     cf8:	3f 70       	andi	r19, 0x0F	; 15
     cfa:	2b 85       	ldd	r18, Y+11	; 0x0b
     cfc:	22 1f       	adc	r18, r18
     cfe:	22 27       	eor	r18, r18
     d00:	22 1f       	adc	r18, r18
     d02:	32 0f       	add	r19, r18
     d04:	2a 85       	ldd	r18, Y+10	; 0x0a
     d06:	23 70       	andi	r18, 0x03	; 3
     d08:	22 0f       	add	r18, r18
     d0a:	23 0f       	add	r18, r19
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
				*(DWORD*)buff = csize << (n - 9);
     d0c:	27 50       	subi	r18, 0x07	; 7
     d0e:	04 c0       	rjmp	.+8      	; 0xd18 <disk_ioctl+0x11c>
     d10:	88 0f       	add	r24, r24
     d12:	99 1f       	adc	r25, r25
     d14:	aa 1f       	adc	r26, r26
     d16:	bb 1f       	adc	r27, r27
     d18:	2a 95       	dec	r18
     d1a:	d2 f7       	brpl	.-12     	; 0xd10 <disk_ioctl+0x114>
     d1c:	f7 01       	movw	r30, r14
     d1e:	80 83       	st	Z, r24
     d20:	91 83       	std	Z+1, r25	; 0x01
     d22:	a2 83       	std	Z+2, r26	; 0x02
     d24:	b3 83       	std	Z+3, r27	; 0x03
			}
			res = RES_OK;
     d26:	10 e0       	ldi	r17, 0x00	; 0
     d28:	f2 c0       	rjmp	.+484    	; 0xf0e <disk_ioctl+0x312>
		}
		break;

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDv2? */
     d2a:	10 91 9a 03 	lds	r17, 0x039A
     d2e:	12 ff       	sbrs	r17, 2
     d30:	2a c0       	rjmp	.+84     	; 0xd86 <disk_ioctl+0x18a>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
     d32:	40 e0       	ldi	r20, 0x00	; 0
     d34:	50 e0       	ldi	r21, 0x00	; 0
     d36:	ba 01       	movw	r22, r20
     d38:	8d e8       	ldi	r24, 0x8D	; 141
     d3a:	44 dd       	rcall	.-1400   	; 0x7c4 <send_cmd>
     d3c:	81 11       	cpse	r24, r1
     d3e:	d8 c0       	rjmp	.+432    	; 0xef0 <disk_ioctl+0x2f4>
				xchg_spi(0xFF);
     d40:	8f ef       	ldi	r24, 0xFF	; 255
     d42:	e8 dc       	rcall	.-1584   	; 0x714 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
     d44:	60 e1       	ldi	r22, 0x10	; 16
     d46:	70 e0       	ldi	r23, 0x00	; 0
     d48:	ce 01       	movw	r24, r28
     d4a:	01 96       	adiw	r24, 0x01	; 1
     d4c:	02 dd       	rcall	.-1532   	; 0x752 <rcvr_datablock>
     d4e:	89 2b       	or	r24, r25
     d50:	09 f4       	brne	.+2      	; 0xd54 <disk_ioctl+0x158>
     d52:	d0 c0       	rjmp	.+416    	; 0xef4 <disk_ioctl+0x2f8>
     d54:	10 e3       	ldi	r17, 0x30	; 48
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
     d56:	8f ef       	ldi	r24, 0xFF	; 255
     d58:	dd dc       	rcall	.-1606   	; 0x714 <xchg_spi>
     d5a:	11 50       	subi	r17, 0x01	; 1
     d5c:	e1 f7       	brne	.-8      	; 0xd56 <disk_ioctl+0x15a>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
     d5e:	2b 85       	ldd	r18, Y+11	; 0x0b
     d60:	22 95       	swap	r18
     d62:	2f 70       	andi	r18, 0x0F	; 15
     d64:	80 e1       	ldi	r24, 0x10	; 16
     d66:	90 e0       	ldi	r25, 0x00	; 0
     d68:	a0 e0       	ldi	r26, 0x00	; 0
     d6a:	b0 e0       	ldi	r27, 0x00	; 0
     d6c:	04 c0       	rjmp	.+8      	; 0xd76 <disk_ioctl+0x17a>
     d6e:	88 0f       	add	r24, r24
     d70:	99 1f       	adc	r25, r25
     d72:	aa 1f       	adc	r26, r26
     d74:	bb 1f       	adc	r27, r27
     d76:	2a 95       	dec	r18
     d78:	d2 f7       	brpl	.-12     	; 0xd6e <disk_ioctl+0x172>
     d7a:	f7 01       	movw	r30, r14
     d7c:	80 83       	st	Z, r24
     d7e:	91 83       	std	Z+1, r25	; 0x01
     d80:	a2 83       	std	Z+2, r26	; 0x02
     d82:	b3 83       	std	Z+3, r27	; 0x03
     d84:	c4 c0       	rjmp	.+392    	; 0xf0e <disk_ioctl+0x312>
					res = RES_OK;
				}
			}
		} else {					/* SDv1 or MMCv3 */
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
     d86:	40 e0       	ldi	r20, 0x00	; 0
     d88:	50 e0       	ldi	r21, 0x00	; 0
     d8a:	ba 01       	movw	r22, r20
     d8c:	89 e0       	ldi	r24, 0x09	; 9
     d8e:	1a dd       	rcall	.-1484   	; 0x7c4 <send_cmd>
     d90:	81 11       	cpse	r24, r1
     d92:	b2 c0       	rjmp	.+356    	; 0xef8 <disk_ioctl+0x2fc>
     d94:	60 e1       	ldi	r22, 0x10	; 16
     d96:	70 e0       	ldi	r23, 0x00	; 0
     d98:	ce 01       	movw	r24, r28
     d9a:	01 96       	adiw	r24, 0x01	; 1
     d9c:	da dc       	rcall	.-1612   	; 0x752 <rcvr_datablock>
     d9e:	89 2b       	or	r24, r25
     da0:	09 f4       	brne	.+2      	; 0xda4 <disk_ioctl+0x1a8>
     da2:	ac c0       	rjmp	.+344    	; 0xefc <disk_ioctl+0x300>
				if (CardType & CT_SD1) {	/* SDv1 */
     da4:	11 ff       	sbrs	r17, 1
     da6:	20 c0       	rjmp	.+64     	; 0xde8 <disk_ioctl+0x1ec>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
     da8:	8c 85       	ldd	r24, Y+12	; 0x0c
     daa:	88 1f       	adc	r24, r24
     dac:	88 27       	eor	r24, r24
     dae:	88 1f       	adc	r24, r24
     db0:	90 e0       	ldi	r25, 0x00	; 0
     db2:	01 96       	adiw	r24, 0x01	; 1
     db4:	2b 85       	ldd	r18, Y+11	; 0x0b
     db6:	2f 73       	andi	r18, 0x3F	; 63
     db8:	82 0f       	add	r24, r18
     dba:	91 1d       	adc	r25, r1
     dbc:	82 0f       	add	r24, r18
     dbe:	91 1d       	adc	r25, r1
     dc0:	2e 85       	ldd	r18, Y+14	; 0x0e
     dc2:	22 95       	swap	r18
     dc4:	26 95       	lsr	r18
     dc6:	26 95       	lsr	r18
     dc8:	23 70       	andi	r18, 0x03	; 3
     dca:	21 50       	subi	r18, 0x01	; 1
     dcc:	02 c0       	rjmp	.+4      	; 0xdd2 <disk_ioctl+0x1d6>
     dce:	88 0f       	add	r24, r24
     dd0:	99 1f       	adc	r25, r25
     dd2:	2a 95       	dec	r18
     dd4:	e2 f7       	brpl	.-8      	; 0xdce <disk_ioctl+0x1d2>
     dd6:	a0 e0       	ldi	r26, 0x00	; 0
     dd8:	b0 e0       	ldi	r27, 0x00	; 0
     dda:	f7 01       	movw	r30, r14
     ddc:	80 83       	st	Z, r24
     dde:	91 83       	std	Z+1, r25	; 0x01
     de0:	a2 83       	std	Z+2, r26	; 0x02
     de2:	b3 83       	std	Z+3, r27	; 0x03
				} else {					/* MMCv3 */
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
     de4:	10 e0       	ldi	r17, 0x00	; 0
     de6:	93 c0       	rjmp	.+294    	; 0xf0e <disk_ioctl+0x312>
		} else {					/* SDv1 or MMCv3 */
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
				if (CardType & CT_SD1) {	/* SDv1 */
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
				} else {					/* MMCv3 */
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
     de8:	8c 85       	ldd	r24, Y+12	; 0x0c
     dea:	28 2f       	mov	r18, r24
     dec:	23 70       	andi	r18, 0x03	; 3
     dee:	82 95       	swap	r24
     df0:	86 95       	lsr	r24
     df2:	87 70       	andi	r24, 0x07	; 7
     df4:	90 e0       	ldi	r25, 0x00	; 0
     df6:	f8 e0       	ldi	r31, 0x08	; 8
     df8:	2f 9f       	mul	r18, r31
     dfa:	80 0d       	add	r24, r0
     dfc:	91 1d       	adc	r25, r1
     dfe:	11 24       	eor	r1, r1
     e00:	01 96       	adiw	r24, 0x01	; 1
     e02:	2b 85       	ldd	r18, Y+11	; 0x0b
     e04:	2c 77       	andi	r18, 0x7C	; 124
     e06:	30 e0       	ldi	r19, 0x00	; 0
     e08:	35 95       	asr	r19
     e0a:	27 95       	ror	r18
     e0c:	35 95       	asr	r19
     e0e:	27 95       	ror	r18
     e10:	2f 5f       	subi	r18, 0xFF	; 255
     e12:	3f 4f       	sbci	r19, 0xFF	; 255
     e14:	82 9f       	mul	r24, r18
     e16:	a0 01       	movw	r20, r0
     e18:	83 9f       	mul	r24, r19
     e1a:	50 0d       	add	r21, r0
     e1c:	92 9f       	mul	r25, r18
     e1e:	50 0d       	add	r21, r0
     e20:	11 24       	eor	r1, r1
     e22:	ca 01       	movw	r24, r20
     e24:	a0 e0       	ldi	r26, 0x00	; 0
     e26:	b0 e0       	ldi	r27, 0x00	; 0
     e28:	f7 01       	movw	r30, r14
     e2a:	80 83       	st	Z, r24
     e2c:	91 83       	std	Z+1, r25	; 0x01
     e2e:	a2 83       	std	Z+2, r26	; 0x02
     e30:	b3 83       	std	Z+3, r27	; 0x03
				}
				res = RES_OK;
     e32:	10 e0       	ldi	r17, 0x00	; 0
     e34:	6c c0       	rjmp	.+216    	; 0xf0e <disk_ioctl+0x312>
		break;

	/* Following commands are never used by FatFs module */

	case MMC_GET_TYPE :		/* Get card type flags (1 byte) */
		*ptr = CardType;
     e36:	80 91 9a 03 	lds	r24, 0x039A
     e3a:	fa 01       	movw	r30, r20
     e3c:	80 83       	st	Z, r24
		res = RES_OK;
     e3e:	10 e0       	ldi	r17, 0x00	; 0
		break;
     e40:	66 c0       	rjmp	.+204    	; 0xf0e <disk_ioctl+0x312>

	case MMC_GET_CSD :		/* Receive CSD as a data block (16 bytes) */
		if (send_cmd(CMD9, 0) == 0		/* READ_CSD */
     e42:	40 e0       	ldi	r20, 0x00	; 0
     e44:	50 e0       	ldi	r21, 0x00	; 0
     e46:	ba 01       	movw	r22, r20
     e48:	89 e0       	ldi	r24, 0x09	; 9
     e4a:	bc dc       	rcall	.-1672   	; 0x7c4 <send_cmd>
     e4c:	81 11       	cpse	r24, r1
     e4e:	58 c0       	rjmp	.+176    	; 0xf00 <disk_ioctl+0x304>
			&& rcvr_datablock(ptr, 16))
     e50:	60 e1       	ldi	r22, 0x10	; 16
     e52:	70 e0       	ldi	r23, 0x00	; 0
     e54:	c7 01       	movw	r24, r14
     e56:	7d dc       	rcall	.-1798   	; 0x752 <rcvr_datablock>
     e58:	11 e0       	ldi	r17, 0x01	; 1
     e5a:	89 2b       	or	r24, r25
     e5c:	09 f4       	brne	.+2      	; 0xe60 <disk_ioctl+0x264>
     e5e:	57 c0       	rjmp	.+174    	; 0xf0e <disk_ioctl+0x312>
     e60:	10 e0       	ldi	r17, 0x00	; 0
     e62:	55 c0       	rjmp	.+170    	; 0xf0e <disk_ioctl+0x312>
			res = RES_OK;
		break;

	case MMC_GET_CID :		/* Receive CID as a data block (16 bytes) */
		if (send_cmd(CMD10, 0) == 0		/* READ_CID */
     e64:	40 e0       	ldi	r20, 0x00	; 0
     e66:	50 e0       	ldi	r21, 0x00	; 0
     e68:	ba 01       	movw	r22, r20
     e6a:	8a e0       	ldi	r24, 0x0A	; 10
     e6c:	ab dc       	rcall	.-1706   	; 0x7c4 <send_cmd>
     e6e:	81 11       	cpse	r24, r1
     e70:	49 c0       	rjmp	.+146    	; 0xf04 <disk_ioctl+0x308>
			&& rcvr_datablock(ptr, 16))
     e72:	60 e1       	ldi	r22, 0x10	; 16
     e74:	70 e0       	ldi	r23, 0x00	; 0
     e76:	c7 01       	movw	r24, r14
     e78:	6c dc       	rcall	.-1832   	; 0x752 <rcvr_datablock>
     e7a:	11 e0       	ldi	r17, 0x01	; 1
     e7c:	89 2b       	or	r24, r25
     e7e:	09 f4       	brne	.+2      	; 0xe82 <disk_ioctl+0x286>
     e80:	46 c0       	rjmp	.+140    	; 0xf0e <disk_ioctl+0x312>
     e82:	10 e0       	ldi	r17, 0x00	; 0
     e84:	44 c0       	rjmp	.+136    	; 0xf0e <disk_ioctl+0x312>
			res = RES_OK;
		break;

	case MMC_GET_OCR :		/* Receive OCR as an R3 resp (4 bytes) */
		if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
     e86:	40 e0       	ldi	r20, 0x00	; 0
     e88:	50 e0       	ldi	r21, 0x00	; 0
     e8a:	ba 01       	movw	r22, r20
     e8c:	8a e3       	ldi	r24, 0x3A	; 58
     e8e:	9a dc       	rcall	.-1740   	; 0x7c4 <send_cmd>
     e90:	81 11       	cpse	r24, r1
     e92:	3a c0       	rjmp	.+116    	; 0xf08 <disk_ioctl+0x30c>
     e94:	87 01       	movw	r16, r14
     e96:	f4 e0       	ldi	r31, 0x04	; 4
     e98:	ef 0e       	add	r14, r31
     e9a:	f1 1c       	adc	r15, r1
			for (n = 4; n; n--) *ptr++ = xchg_spi(0xFF);
     e9c:	8f ef       	ldi	r24, 0xFF	; 255
     e9e:	3a dc       	rcall	.-1932   	; 0x714 <xchg_spi>
     ea0:	f8 01       	movw	r30, r16
     ea2:	81 93       	st	Z+, r24
     ea4:	8f 01       	movw	r16, r30
     ea6:	ee 15       	cp	r30, r14
     ea8:	ff 05       	cpc	r31, r15
     eaa:	c1 f7       	brne	.-16     	; 0xe9c <disk_ioctl+0x2a0>
			res = RES_OK;
     eac:	10 e0       	ldi	r17, 0x00	; 0
     eae:	2f c0       	rjmp	.+94     	; 0xf0e <disk_ioctl+0x312>
		}
		break;

	case MMC_GET_SDSTAT :	/* Receive SD statsu as a data block (64 bytes) */
		if (send_cmd(ACMD13, 0) == 0) {	/* SD_STATUS */
     eb0:	40 e0       	ldi	r20, 0x00	; 0
     eb2:	50 e0       	ldi	r21, 0x00	; 0
     eb4:	ba 01       	movw	r22, r20
     eb6:	8d e8       	ldi	r24, 0x8D	; 141
     eb8:	85 dc       	rcall	.-1782   	; 0x7c4 <send_cmd>
     eba:	81 11       	cpse	r24, r1
     ebc:	27 c0       	rjmp	.+78     	; 0xf0c <disk_ioctl+0x310>
			xchg_spi(0xFF);
     ebe:	8f ef       	ldi	r24, 0xFF	; 255
     ec0:	29 dc       	rcall	.-1966   	; 0x714 <xchg_spi>
			if (rcvr_datablock(ptr, 64))
     ec2:	60 e4       	ldi	r22, 0x40	; 64
     ec4:	70 e0       	ldi	r23, 0x00	; 0
     ec6:	c7 01       	movw	r24, r14
     ec8:	44 dc       	rcall	.-1912   	; 0x752 <rcvr_datablock>
     eca:	11 e0       	ldi	r17, 0x01	; 1
     ecc:	89 2b       	or	r24, r25
     ece:	f9 f0       	breq	.+62     	; 0xf0e <disk_ioctl+0x312>
     ed0:	10 e0       	ldi	r17, 0x00	; 0
     ed2:	1d c0       	rjmp	.+58     	; 0xf0e <disk_ioctl+0x312>
				res = RES_OK;
		}
		break;

	case CTRL_POWER_OFF :	/* Power off */
		power_off();
     ed4:	19 dc       	rcall	.-1998   	; 0x708 <power_off>
		Stat |= STA_NOINIT;
     ed6:	80 91 06 01 	lds	r24, 0x0106
     eda:	81 60       	ori	r24, 0x01	; 1
     edc:	80 93 06 01 	sts	0x0106, r24
		res = RES_OK;
     ee0:	10 e0       	ldi	r17, 0x00	; 0
		break;
     ee2:	15 c0       	rjmp	.+42     	; 0xf0e <disk_ioctl+0x312>

	default:
		res = RES_PARERR;
     ee4:	14 e0       	ldi	r17, 0x04	; 4
     ee6:	13 c0       	rjmp	.+38     	; 0xf0e <disk_ioctl+0x312>
	DWORD csize;


	if (pdrv) return RES_PARERR;

	res = RES_ERROR;
     ee8:	11 e0       	ldi	r17, 0x01	; 1
     eea:	11 c0       	rjmp	.+34     	; 0xf0e <disk_ioctl+0x312>
     eec:	11 e0       	ldi	r17, 0x01	; 1
     eee:	0f c0       	rjmp	.+30     	; 0xf0e <disk_ioctl+0x312>
     ef0:	11 e0       	ldi	r17, 0x01	; 1
     ef2:	0d c0       	rjmp	.+26     	; 0xf0e <disk_ioctl+0x312>
     ef4:	11 e0       	ldi	r17, 0x01	; 1
     ef6:	0b c0       	rjmp	.+22     	; 0xf0e <disk_ioctl+0x312>
     ef8:	11 e0       	ldi	r17, 0x01	; 1
     efa:	09 c0       	rjmp	.+18     	; 0xf0e <disk_ioctl+0x312>
     efc:	11 e0       	ldi	r17, 0x01	; 1
     efe:	07 c0       	rjmp	.+14     	; 0xf0e <disk_ioctl+0x312>
     f00:	11 e0       	ldi	r17, 0x01	; 1
     f02:	05 c0       	rjmp	.+10     	; 0xf0e <disk_ioctl+0x312>
     f04:	11 e0       	ldi	r17, 0x01	; 1
     f06:	03 c0       	rjmp	.+6      	; 0xf0e <disk_ioctl+0x312>
     f08:	11 e0       	ldi	r17, 0x01	; 1
     f0a:	01 c0       	rjmp	.+2      	; 0xf0e <disk_ioctl+0x312>
     f0c:	11 e0       	ldi	r17, 0x01	; 1

	default:
		res = RES_PARERR;
	}

	deselect();
     f0e:	08 dc       	rcall	.-2032   	; 0x720 <deselect>

	return res;
     f10:	81 2f       	mov	r24, r17
     f12:	03 c0       	rjmp	.+6      	; 0xf1a <disk_ioctl+0x31e>
	DRESULT res;
	BYTE n, csd[16], *ptr = buff;
	DWORD csize;


	if (pdrv) return RES_PARERR;
     f14:	84 e0       	ldi	r24, 0x04	; 4
     f16:	01 c0       	rjmp	.+2      	; 0xf1a <disk_ioctl+0x31e>

	res = RES_ERROR;

	if (Stat & STA_NOINIT) return RES_NOTRDY;
     f18:	83 e0       	ldi	r24, 0x03	; 3
	}

	deselect();

	return res;
}
     f1a:	60 96       	adiw	r28, 0x10	; 16
     f1c:	0f b6       	in	r0, 0x3f	; 63
     f1e:	f8 94       	cli
     f20:	de bf       	out	0x3e, r29	; 62
     f22:	0f be       	out	0x3f, r0	; 63
     f24:	cd bf       	out	0x3d, r28	; 61
     f26:	df 91       	pop	r29
     f28:	cf 91       	pop	r28
     f2a:	1f 91       	pop	r17
     f2c:	0f 91       	pop	r16
     f2e:	ff 90       	pop	r15
     f30:	ef 90       	pop	r14
     f32:	08 95       	ret

00000f34 <disk_timerproc>:
void disk_timerproc (void)
{
	BYTE n, s;


	n = Timer1;				/* 100Hz decrement timer */
     f34:	80 91 9c 03 	lds	r24, 0x039C
	if (n) Timer1 = --n;
     f38:	88 23       	and	r24, r24
     f3a:	19 f0       	breq	.+6      	; 0xf42 <disk_timerproc+0xe>
     f3c:	81 50       	subi	r24, 0x01	; 1
     f3e:	80 93 9c 03 	sts	0x039C, r24
	n = Timer2;
     f42:	80 91 9b 03 	lds	r24, 0x039B
	if (n) Timer2 = --n;
     f46:	88 23       	and	r24, r24
     f48:	19 f0       	breq	.+6      	; 0xf50 <disk_timerproc+0x1c>
     f4a:	81 50       	subi	r24, 0x01	; 1
     f4c:	80 93 9b 03 	sts	0x039B, r24
	
	s = Stat;
     f50:	80 91 06 01 	lds	r24, 0x0106
//	if (MMC_CD)				/* Card inserted */
//		s &= ~STA_NODISK;
//	else					/* Socket empty */
//		s |= (STA_NODISK | STA_NOINIT);

	Stat = s;				/* Update MMC status */
     f54:	80 93 06 01 	sts	0x0106, r24
     f58:	08 95       	ret

00000f5a <_ZN7DisplayD1Ev>:
	else{
		for(uint8_t i = 0; i < 7; i++){
			Displayframe[x+(y/8)*SSD1306_WIDTH+i] |= 0;
		}
	}
}
     f5a:	9c 5f       	subi	r25, 0xFC	; 252
     f5c:	0c 94 cb 1f 	jmp	0x3f96	; 0x3f96 <_ZN3I2CD1Ev>
     f60:	08 95       	ret

00000f62 <_ZN7Display10clearFrameEv>:
     f62:	fc 01       	movw	r30, r24
     f64:	9c 5f       	subi	r25, 0xFC	; 252
     f66:	11 92       	st	Z+, r1
     f68:	e8 17       	cp	r30, r24
     f6a:	f9 07       	cpc	r31, r25
     f6c:	e1 f7       	brne	.-8      	; 0xf66 <_ZN7Display10clearFrameEv+0x4>
     f6e:	08 95       	ret

00000f70 <_ZN7Display15ssd1306_commandEh>:
     f70:	1f 93       	push	r17
     f72:	cf 93       	push	r28
     f74:	df 93       	push	r29
     f76:	16 2f       	mov	r17, r22
     f78:	ec 01       	movw	r28, r24
     f7a:	dc 5f       	subi	r29, 0xFC	; 252
     f7c:	ce 01       	movw	r24, r28
     f7e:	0e 94 cc 1f 	call	0x3f98	; 0x3f98 <_ZN3I2C9twi_startEv>
     f82:	68 e7       	ldi	r22, 0x78	; 120
     f84:	ce 01       	movw	r24, r28
     f86:	0e 94 d4 1f 	call	0x3fa8	; 0x3fa8 <_ZN3I2C9twi_writeEh>
     f8a:	60 e0       	ldi	r22, 0x00	; 0
     f8c:	ce 01       	movw	r24, r28
     f8e:	0e 94 d4 1f 	call	0x3fa8	; 0x3fa8 <_ZN3I2C9twi_writeEh>
     f92:	61 2f       	mov	r22, r17
     f94:	ce 01       	movw	r24, r28
     f96:	0e 94 d4 1f 	call	0x3fa8	; 0x3fa8 <_ZN3I2C9twi_writeEh>
     f9a:	ce 01       	movw	r24, r28
     f9c:	0e 94 d0 1f 	call	0x3fa0	; 0x3fa0 <_ZN3I2C8twi_stopEv>
     fa0:	df 91       	pop	r29
     fa2:	cf 91       	pop	r28
     fa4:	1f 91       	pop	r17
     fa6:	08 95       	ret

00000fa8 <_ZN7Display17InitializeDisplayEv>:
     fa8:	cf 93       	push	r28
     faa:	df 93       	push	r29
     fac:	ec 01       	movw	r28, r24
     fae:	6e ea       	ldi	r22, 0xAE	; 174
     fb0:	df df       	rcall	.-66     	; 0xf70 <_ZN7Display15ssd1306_commandEh>
     fb2:	65 ed       	ldi	r22, 0xD5	; 213
     fb4:	ce 01       	movw	r24, r28
     fb6:	dc df       	rcall	.-72     	; 0xf70 <_ZN7Display15ssd1306_commandEh>
     fb8:	60 e8       	ldi	r22, 0x80	; 128
     fba:	ce 01       	movw	r24, r28
     fbc:	d9 df       	rcall	.-78     	; 0xf70 <_ZN7Display15ssd1306_commandEh>
     fbe:	68 ea       	ldi	r22, 0xA8	; 168
     fc0:	ce 01       	movw	r24, r28
     fc2:	d6 df       	rcall	.-84     	; 0xf70 <_ZN7Display15ssd1306_commandEh>
     fc4:	6f e3       	ldi	r22, 0x3F	; 63
     fc6:	ce 01       	movw	r24, r28
     fc8:	d3 df       	rcall	.-90     	; 0xf70 <_ZN7Display15ssd1306_commandEh>
     fca:	63 ed       	ldi	r22, 0xD3	; 211
     fcc:	ce 01       	movw	r24, r28
     fce:	d0 df       	rcall	.-96     	; 0xf70 <_ZN7Display15ssd1306_commandEh>
     fd0:	60 e0       	ldi	r22, 0x00	; 0
     fd2:	ce 01       	movw	r24, r28
     fd4:	cd df       	rcall	.-102    	; 0xf70 <_ZN7Display15ssd1306_commandEh>
     fd6:	60 e4       	ldi	r22, 0x40	; 64
     fd8:	ce 01       	movw	r24, r28
     fda:	ca df       	rcall	.-108    	; 0xf70 <_ZN7Display15ssd1306_commandEh>
     fdc:	6d e8       	ldi	r22, 0x8D	; 141
     fde:	ce 01       	movw	r24, r28
     fe0:	c7 df       	rcall	.-114    	; 0xf70 <_ZN7Display15ssd1306_commandEh>
     fe2:	64 e1       	ldi	r22, 0x14	; 20
     fe4:	ce 01       	movw	r24, r28
     fe6:	c4 df       	rcall	.-120    	; 0xf70 <_ZN7Display15ssd1306_commandEh>
     fe8:	60 e2       	ldi	r22, 0x20	; 32
     fea:	ce 01       	movw	r24, r28
     fec:	c1 df       	rcall	.-126    	; 0xf70 <_ZN7Display15ssd1306_commandEh>
     fee:	60 e0       	ldi	r22, 0x00	; 0
     ff0:	ce 01       	movw	r24, r28
     ff2:	be df       	rcall	.-132    	; 0xf70 <_ZN7Display15ssd1306_commandEh>
     ff4:	61 ea       	ldi	r22, 0xA1	; 161
     ff6:	ce 01       	movw	r24, r28
     ff8:	bb df       	rcall	.-138    	; 0xf70 <_ZN7Display15ssd1306_commandEh>
     ffa:	68 ec       	ldi	r22, 0xC8	; 200
     ffc:	ce 01       	movw	r24, r28
     ffe:	b8 df       	rcall	.-144    	; 0xf70 <_ZN7Display15ssd1306_commandEh>
    1000:	6a ed       	ldi	r22, 0xDA	; 218
    1002:	ce 01       	movw	r24, r28
    1004:	b5 df       	rcall	.-150    	; 0xf70 <_ZN7Display15ssd1306_commandEh>
    1006:	62 e1       	ldi	r22, 0x12	; 18
    1008:	ce 01       	movw	r24, r28
    100a:	b2 df       	rcall	.-156    	; 0xf70 <_ZN7Display15ssd1306_commandEh>
    100c:	61 e8       	ldi	r22, 0x81	; 129
    100e:	ce 01       	movw	r24, r28
    1010:	af df       	rcall	.-162    	; 0xf70 <_ZN7Display15ssd1306_commandEh>
    1012:	6f ec       	ldi	r22, 0xCF	; 207
    1014:	ce 01       	movw	r24, r28
    1016:	ac df       	rcall	.-168    	; 0xf70 <_ZN7Display15ssd1306_commandEh>
    1018:	69 ed       	ldi	r22, 0xD9	; 217
    101a:	ce 01       	movw	r24, r28
    101c:	a9 df       	rcall	.-174    	; 0xf70 <_ZN7Display15ssd1306_commandEh>
    101e:	61 ef       	ldi	r22, 0xF1	; 241
    1020:	ce 01       	movw	r24, r28
    1022:	a6 df       	rcall	.-180    	; 0xf70 <_ZN7Display15ssd1306_commandEh>
    1024:	6b ed       	ldi	r22, 0xDB	; 219
    1026:	ce 01       	movw	r24, r28
    1028:	a3 df       	rcall	.-186    	; 0xf70 <_ZN7Display15ssd1306_commandEh>
    102a:	60 e4       	ldi	r22, 0x40	; 64
    102c:	ce 01       	movw	r24, r28
    102e:	a0 df       	rcall	.-192    	; 0xf70 <_ZN7Display15ssd1306_commandEh>
    1030:	64 ea       	ldi	r22, 0xA4	; 164
    1032:	ce 01       	movw	r24, r28
    1034:	9d df       	rcall	.-198    	; 0xf70 <_ZN7Display15ssd1306_commandEh>
    1036:	66 ea       	ldi	r22, 0xA6	; 166
    1038:	ce 01       	movw	r24, r28
    103a:	9a df       	rcall	.-204    	; 0xf70 <_ZN7Display15ssd1306_commandEh>
    103c:	6f ea       	ldi	r22, 0xAF	; 175
    103e:	ce 01       	movw	r24, r28
    1040:	97 df       	rcall	.-210    	; 0xf70 <_ZN7Display15ssd1306_commandEh>
    1042:	df 91       	pop	r29
    1044:	cf 91       	pop	r28
    1046:	08 95       	ret

00001048 <_ZN7DisplayC1Ev>:
    1048:	cf 93       	push	r28
    104a:	df 93       	push	r29
    104c:	ec 01       	movw	r28, r24
    104e:	9c 5f       	subi	r25, 0xFC	; 252
    1050:	0e 94 c7 1f 	call	0x3f8e	; 0x3f8e <_ZN3I2CC1Ev>
    1054:	ce 01       	movw	r24, r28
    1056:	a8 df       	rcall	.-176    	; 0xfa8 <_ZN7Display17InitializeDisplayEv>
    1058:	ce 01       	movw	r24, r28
    105a:	83 df       	rcall	.-250    	; 0xf62 <_ZN7Display10clearFrameEv>
    105c:	df 91       	pop	r29
    105e:	cf 91       	pop	r28
    1060:	08 95       	ret

00001062 <_ZN7Display9sendFrameEv>:
    1062:	ef 92       	push	r14
    1064:	ff 92       	push	r15
    1066:	0f 93       	push	r16
    1068:	1f 93       	push	r17
    106a:	cf 93       	push	r28
    106c:	df 93       	push	r29
    106e:	ec 01       	movw	r28, r24
    1070:	61 e2       	ldi	r22, 0x21	; 33
    1072:	7e df       	rcall	.-260    	; 0xf70 <_ZN7Display15ssd1306_commandEh>
    1074:	60 e0       	ldi	r22, 0x00	; 0
    1076:	ce 01       	movw	r24, r28
    1078:	7b df       	rcall	.-266    	; 0xf70 <_ZN7Display15ssd1306_commandEh>
    107a:	6f e7       	ldi	r22, 0x7F	; 127
    107c:	ce 01       	movw	r24, r28
    107e:	78 df       	rcall	.-272    	; 0xf70 <_ZN7Display15ssd1306_commandEh>
    1080:	62 e2       	ldi	r22, 0x22	; 34
    1082:	ce 01       	movw	r24, r28
    1084:	75 df       	rcall	.-278    	; 0xf70 <_ZN7Display15ssd1306_commandEh>
    1086:	60 e0       	ldi	r22, 0x00	; 0
    1088:	ce 01       	movw	r24, r28
    108a:	72 df       	rcall	.-284    	; 0xf70 <_ZN7Display15ssd1306_commandEh>
    108c:	67 e0       	ldi	r22, 0x07	; 7
    108e:	ce 01       	movw	r24, r28
    1090:	6f df       	rcall	.-290    	; 0xf70 <_ZN7Display15ssd1306_commandEh>
    1092:	8e 01       	movw	r16, r28
    1094:	1c 5f       	subi	r17, 0xFC	; 252
    1096:	c8 01       	movw	r24, r16
    1098:	0e 94 cc 1f 	call	0x3f98	; 0x3f98 <_ZN3I2C9twi_startEv>
    109c:	68 e7       	ldi	r22, 0x78	; 120
    109e:	c8 01       	movw	r24, r16
    10a0:	0e 94 d4 1f 	call	0x3fa8	; 0x3fa8 <_ZN3I2C9twi_writeEh>
    10a4:	60 e4       	ldi	r22, 0x40	; 64
    10a6:	c8 01       	movw	r24, r16
    10a8:	0e 94 d4 1f 	call	0x3fa8	; 0x3fa8 <_ZN3I2C9twi_writeEh>
    10ac:	78 01       	movw	r14, r16
    10ae:	69 91       	ld	r22, Y+
    10b0:	c8 01       	movw	r24, r16
    10b2:	0e 94 d4 1f 	call	0x3fa8	; 0x3fa8 <_ZN3I2C9twi_writeEh>
    10b6:	ce 15       	cp	r28, r14
    10b8:	df 05       	cpc	r29, r15
    10ba:	c9 f7       	brne	.-14     	; 0x10ae <_ZN7Display9sendFrameEv+0x4c>
    10bc:	c8 01       	movw	r24, r16
    10be:	0e 94 d0 1f 	call	0x3fa0	; 0x3fa0 <_ZN3I2C8twi_stopEv>
    10c2:	df 91       	pop	r29
    10c4:	cf 91       	pop	r28
    10c6:	1f 91       	pop	r17
    10c8:	0f 91       	pop	r16
    10ca:	ff 90       	pop	r15
    10cc:	ef 90       	pop	r14
    10ce:	08 95       	ret

000010d0 <_ZN7Display9drawPixelEhhh>:
    10d0:	66 23       	and	r22, r22
    10d2:	ac f1       	brlt	.+106    	; 0x113e <_ZN7Display9drawPixelEhhh+0x6e>
    10d4:	40 34       	cpi	r20, 0x40	; 64
    10d6:	98 f5       	brcc	.+102    	; 0x113e <_ZN7Display9drawPixelEhhh+0x6e>
    10d8:	21 11       	cpse	r18, r1
    10da:	19 c0       	rjmp	.+50     	; 0x110e <_ZN7Display9drawPixelEhhh+0x3e>
    10dc:	24 2f       	mov	r18, r20
    10de:	26 95       	lsr	r18
    10e0:	26 95       	lsr	r18
    10e2:	26 95       	lsr	r18
    10e4:	50 e8       	ldi	r21, 0x80	; 128
    10e6:	25 9f       	mul	r18, r21
    10e8:	90 01       	movw	r18, r0
    10ea:	11 24       	eor	r1, r1
    10ec:	26 0f       	add	r18, r22
    10ee:	31 1d       	adc	r19, r1
    10f0:	fc 01       	movw	r30, r24
    10f2:	e2 0f       	add	r30, r18
    10f4:	f3 1f       	adc	r31, r19
    10f6:	47 70       	andi	r20, 0x07	; 7
    10f8:	81 e0       	ldi	r24, 0x01	; 1
    10fa:	90 e0       	ldi	r25, 0x00	; 0
    10fc:	02 c0       	rjmp	.+4      	; 0x1102 <_ZN7Display9drawPixelEhhh+0x32>
    10fe:	88 0f       	add	r24, r24
    1100:	99 1f       	adc	r25, r25
    1102:	4a 95       	dec	r20
    1104:	e2 f7       	brpl	.-8      	; 0x10fe <_ZN7Display9drawPixelEhhh+0x2e>
    1106:	90 81       	ld	r25, Z
    1108:	89 2b       	or	r24, r25
    110a:	80 83       	st	Z, r24
    110c:	08 95       	ret
    110e:	24 2f       	mov	r18, r20
    1110:	26 95       	lsr	r18
    1112:	26 95       	lsr	r18
    1114:	26 95       	lsr	r18
    1116:	30 e8       	ldi	r19, 0x80	; 128
    1118:	23 9f       	mul	r18, r19
    111a:	f0 01       	movw	r30, r0
    111c:	11 24       	eor	r1, r1
    111e:	e6 0f       	add	r30, r22
    1120:	f1 1d       	adc	r31, r1
    1122:	e8 0f       	add	r30, r24
    1124:	f9 1f       	adc	r31, r25
    1126:	47 70       	andi	r20, 0x07	; 7
    1128:	81 e0       	ldi	r24, 0x01	; 1
    112a:	90 e0       	ldi	r25, 0x00	; 0
    112c:	02 c0       	rjmp	.+4      	; 0x1132 <_ZN7Display9drawPixelEhhh+0x62>
    112e:	88 0f       	add	r24, r24
    1130:	99 1f       	adc	r25, r25
    1132:	4a 95       	dec	r20
    1134:	e2 f7       	brpl	.-8      	; 0x112e <_ZN7Display9drawPixelEhhh+0x5e>
    1136:	80 95       	com	r24
    1138:	90 81       	ld	r25, Z
    113a:	89 23       	and	r24, r25
    113c:	80 83       	st	Z, r24
    113e:	08 95       	ret

00001140 <_ZN7Display9drawVLineEhhh>:
    1140:	ff 92       	push	r15
    1142:	0f 93       	push	r16
    1144:	1f 93       	push	r17
    1146:	cf 93       	push	r28
    1148:	df 93       	push	r29
    114a:	22 23       	and	r18, r18
    114c:	69 f0       	breq	.+26     	; 0x1168 <_ZN7Display9drawVLineEhhh+0x28>
    114e:	c4 2f       	mov	r28, r20
    1150:	f6 2e       	mov	r15, r22
    1152:	8c 01       	movw	r16, r24
    1154:	d2 2f       	mov	r29, r18
    1156:	d4 0f       	add	r29, r20
    1158:	20 e0       	ldi	r18, 0x00	; 0
    115a:	4c 2f       	mov	r20, r28
    115c:	6f 2d       	mov	r22, r15
    115e:	c8 01       	movw	r24, r16
    1160:	b7 df       	rcall	.-146    	; 0x10d0 <_ZN7Display9drawPixelEhhh>
    1162:	cf 5f       	subi	r28, 0xFF	; 255
    1164:	cd 13       	cpse	r28, r29
    1166:	f8 cf       	rjmp	.-16     	; 0x1158 <_ZN7Display9drawVLineEhhh+0x18>
    1168:	df 91       	pop	r29
    116a:	cf 91       	pop	r28
    116c:	1f 91       	pop	r17
    116e:	0f 91       	pop	r16
    1170:	ff 90       	pop	r15
    1172:	08 95       	ret

00001174 <_ZN7Display9drawHLineEhhh>:
    1174:	ff 92       	push	r15
    1176:	0f 93       	push	r16
    1178:	1f 93       	push	r17
    117a:	cf 93       	push	r28
    117c:	df 93       	push	r29
    117e:	22 23       	and	r18, r18
    1180:	69 f0       	breq	.+26     	; 0x119c <_ZN7Display9drawHLineEhhh+0x28>
    1182:	f4 2e       	mov	r15, r20
    1184:	c6 2f       	mov	r28, r22
    1186:	8c 01       	movw	r16, r24
    1188:	d2 2f       	mov	r29, r18
    118a:	d6 0f       	add	r29, r22
    118c:	20 e0       	ldi	r18, 0x00	; 0
    118e:	4f 2d       	mov	r20, r15
    1190:	6c 2f       	mov	r22, r28
    1192:	c8 01       	movw	r24, r16
    1194:	9d df       	rcall	.-198    	; 0x10d0 <_ZN7Display9drawPixelEhhh>
    1196:	cf 5f       	subi	r28, 0xFF	; 255
    1198:	cd 13       	cpse	r28, r29
    119a:	f8 cf       	rjmp	.-16     	; 0x118c <_ZN7Display9drawHLineEhhh+0x18>
    119c:	df 91       	pop	r29
    119e:	cf 91       	pop	r28
    11a0:	1f 91       	pop	r17
    11a2:	0f 91       	pop	r16
    11a4:	ff 90       	pop	r15
    11a6:	08 95       	ret

000011a8 <_ZN7Display9draw_ASCIEhhh>:
    11a8:	0f 93       	push	r16
    11aa:	1f 93       	push	r17
    11ac:	cf 93       	push	r28
    11ae:	df 93       	push	r29
    11b0:	61 32       	cpi	r22, 0x21	; 33
    11b2:	08 f4       	brcc	.+2      	; 0x11b6 <_ZN7Display9draw_ASCIEhhh+0xe>
    11b4:	3e c0       	rjmp	.+124    	; 0x1232 <_ZN7Display9draw_ASCIEhhh+0x8a>
    11b6:	a4 2f       	mov	r26, r20
    11b8:	b0 e0       	ldi	r27, 0x00	; 0
    11ba:	02 2f       	mov	r16, r18
    11bc:	06 95       	lsr	r16
    11be:	06 95       	lsr	r16
    11c0:	06 95       	lsr	r16
    11c2:	30 e8       	ldi	r19, 0x80	; 128
    11c4:	03 9f       	mul	r16, r19
    11c6:	80 01       	movw	r16, r0
    11c8:	11 24       	eor	r1, r1
    11ca:	61 52       	subi	r22, 0x21	; 33
    11cc:	70 e0       	ldi	r23, 0x00	; 0
    11ce:	fb 01       	movw	r30, r22
    11d0:	ee 0f       	add	r30, r30
    11d2:	ff 1f       	adc	r31, r31
    11d4:	ee 0f       	add	r30, r30
    11d6:	ff 1f       	adc	r31, r31
    11d8:	e6 0f       	add	r30, r22
    11da:	f7 1f       	adc	r31, r23
    11dc:	ea 52       	subi	r30, 0x2A	; 42
    11de:	fc 4f       	sbci	r31, 0xFC	; 252
    11e0:	ad 01       	movw	r20, r26
    11e2:	40 0f       	add	r20, r16
    11e4:	51 1f       	adc	r21, r17
    11e6:	ec 01       	movw	r28, r24
    11e8:	c4 0f       	add	r28, r20
    11ea:	d5 1f       	adc	r29, r21
    11ec:	00 58       	subi	r16, 0x80	; 128
    11ee:	1f 4f       	sbci	r17, 0xFF	; 255
    11f0:	a0 0f       	add	r26, r16
    11f2:	b1 1f       	adc	r27, r17
    11f4:	a8 0f       	add	r26, r24
    11f6:	b9 1f       	adc	r27, r25
    11f8:	4b 5f       	subi	r20, 0xFB	; 251
    11fa:	5f 4f       	sbci	r21, 0xFF	; 255
    11fc:	48 0f       	add	r20, r24
    11fe:	59 1f       	adc	r21, r25
    1200:	27 70       	andi	r18, 0x07	; 7
    1202:	64 91       	lpm	r22, Z
    1204:	70 e0       	ldi	r23, 0x00	; 0
    1206:	02 2e       	mov	r0, r18
    1208:	02 c0       	rjmp	.+4      	; 0x120e <_ZN7Display9draw_ASCIEhhh+0x66>
    120a:	66 0f       	add	r22, r22
    120c:	77 1f       	adc	r23, r23
    120e:	0a 94       	dec	r0
    1210:	e2 f7       	brpl	.-8      	; 0x120a <_ZN7Display9draw_ASCIEhhh+0x62>
    1212:	98 81       	ld	r25, Y
    1214:	96 2b       	or	r25, r22
    1216:	99 93       	st	Y+, r25
    1218:	67 2f       	mov	r22, r23
    121a:	77 27       	eor	r23, r23
    121c:	61 15       	cp	r22, r1
    121e:	71 05       	cpc	r23, r1
    1220:	19 f0       	breq	.+6      	; 0x1228 <_ZN7Display9draw_ASCIEhhh+0x80>
    1222:	8c 91       	ld	r24, X
    1224:	68 2b       	or	r22, r24
    1226:	6c 93       	st	X, r22
    1228:	31 96       	adiw	r30, 0x01	; 1
    122a:	11 96       	adiw	r26, 0x01	; 1
    122c:	c4 17       	cp	r28, r20
    122e:	d5 07       	cpc	r29, r21
    1230:	41 f7       	brne	.-48     	; 0x1202 <_ZN7Display9draw_ASCIEhhh+0x5a>
    1232:	df 91       	pop	r29
    1234:	cf 91       	pop	r28
    1236:	1f 91       	pop	r17
    1238:	0f 91       	pop	r16
    123a:	08 95       	ret

0000123c <_ZN7Display16draw_number16x16Ehhh>:
    123c:	cf 92       	push	r12
    123e:	df 92       	push	r13
    1240:	ef 92       	push	r14
    1242:	ff 92       	push	r15
    1244:	0f 93       	push	r16
    1246:	1f 93       	push	r17
    1248:	cf 93       	push	r28
    124a:	df 93       	push	r29
    124c:	6a 30       	cpi	r22, 0x0A	; 10
    124e:	08 f0       	brcs	.+2      	; 0x1252 <_ZN7Display16draw_number16x16Ehhh+0x16>
    1250:	66 c0       	rjmp	.+204    	; 0x131e <_ZN7Display16draw_number16x16Ehhh+0xe2>
    1252:	50 e0       	ldi	r21, 0x00	; 0
    1254:	02 2f       	mov	r16, r18
    1256:	06 95       	lsr	r16
    1258:	06 95       	lsr	r16
    125a:	06 95       	lsr	r16
    125c:	10 e0       	ldi	r17, 0x00	; 0
    125e:	d8 01       	movw	r26, r16
    1260:	b6 95       	lsr	r27
    1262:	ba 2f       	mov	r27, r26
    1264:	aa 27       	eor	r26, r26
    1266:	b7 95       	ror	r27
    1268:	a7 95       	ror	r26
    126a:	0f 5f       	subi	r16, 0xFF	; 255
    126c:	1f 4f       	sbci	r17, 0xFF	; 255
    126e:	16 95       	lsr	r17
    1270:	10 2f       	mov	r17, r16
    1272:	00 27       	eor	r16, r16
    1274:	17 95       	ror	r17
    1276:	07 95       	ror	r16
    1278:	7d 01       	movw	r14, r26
    127a:	30 e8       	ldi	r19, 0x80	; 128
    127c:	e3 0e       	add	r14, r19
    127e:	f1 1c       	adc	r15, r1
    1280:	e4 0e       	add	r14, r20
    1282:	f5 1e       	adc	r15, r21
    1284:	e8 0e       	add	r14, r24
    1286:	f9 1e       	adc	r15, r25
    1288:	ea 01       	movw	r28, r20
    128a:	c0 0f       	add	r28, r16
    128c:	d1 1f       	adc	r29, r17
    128e:	60 97       	sbiw	r28, 0x10	; 16
    1290:	c8 0f       	add	r28, r24
    1292:	d9 1f       	adc	r29, r25
    1294:	04 0f       	add	r16, r20
    1296:	15 1f       	adc	r17, r21
    1298:	00 59       	subi	r16, 0x90	; 144
    129a:	1f 4f       	sbci	r17, 0xFF	; 255
    129c:	08 0f       	add	r16, r24
    129e:	19 1f       	adc	r17, r25
    12a0:	a4 0f       	add	r26, r20
    12a2:	b5 1f       	adc	r27, r21
    12a4:	a8 0f       	add	r26, r24
    12a6:	b9 1f       	adc	r27, r25
    12a8:	80 e2       	ldi	r24, 0x20	; 32
    12aa:	68 9f       	mul	r22, r24
    12ac:	b0 01       	movw	r22, r0
    12ae:	11 24       	eor	r1, r1
    12b0:	40 e0       	ldi	r20, 0x00	; 0
    12b2:	50 e0       	ldi	r21, 0x00	; 0
    12b4:	27 70       	andi	r18, 0x07	; 7
    12b6:	fa 01       	movw	r30, r20
    12b8:	e6 0f       	add	r30, r22
    12ba:	f7 1f       	adc	r31, r23
    12bc:	ea 56       	subi	r30, 0x6A	; 106
    12be:	fd 4f       	sbci	r31, 0xFD	; 253
    12c0:	e4 91       	lpm	r30, Z
    12c2:	f0 e0       	ldi	r31, 0x00	; 0
    12c4:	02 2e       	mov	r0, r18
    12c6:	02 c0       	rjmp	.+4      	; 0x12cc <_ZN7Display16draw_number16x16Ehhh+0x90>
    12c8:	ee 0f       	add	r30, r30
    12ca:	ff 1f       	adc	r31, r31
    12cc:	0a 94       	dec	r0
    12ce:	e2 f7       	brpl	.-8      	; 0x12c8 <_ZN7Display16draw_number16x16Ehhh+0x8c>
    12d0:	40 31       	cpi	r20, 0x10	; 16
    12d2:	68 f4       	brcc	.+26     	; 0x12ee <_ZN7Display16draw_number16x16Ehhh+0xb2>
    12d4:	8c 91       	ld	r24, X
    12d6:	8e 2b       	or	r24, r30
    12d8:	8c 93       	st	X, r24
    12da:	cf 2e       	mov	r12, r31
    12dc:	dd 24       	eor	r13, r13
    12de:	c1 14       	cp	r12, r1
    12e0:	d1 04       	cpc	r13, r1
    12e2:	89 f0       	breq	.+34     	; 0x1306 <_ZN7Display16draw_number16x16Ehhh+0xca>
    12e4:	f7 01       	movw	r30, r14
    12e6:	80 81       	ld	r24, Z
    12e8:	8c 29       	or	r24, r12
    12ea:	80 83       	st	Z, r24
    12ec:	0c c0       	rjmp	.+24     	; 0x1306 <_ZN7Display16draw_number16x16Ehhh+0xca>
    12ee:	88 81       	ld	r24, Y
    12f0:	8e 2b       	or	r24, r30
    12f2:	88 83       	st	Y, r24
    12f4:	cf 2e       	mov	r12, r31
    12f6:	dd 24       	eor	r13, r13
    12f8:	c1 14       	cp	r12, r1
    12fa:	d1 04       	cpc	r13, r1
    12fc:	21 f0       	breq	.+8      	; 0x1306 <_ZN7Display16draw_number16x16Ehhh+0xca>
    12fe:	f8 01       	movw	r30, r16
    1300:	80 81       	ld	r24, Z
    1302:	8c 29       	or	r24, r12
    1304:	80 83       	st	Z, r24
    1306:	4f 5f       	subi	r20, 0xFF	; 255
    1308:	5f 4f       	sbci	r21, 0xFF	; 255
    130a:	ff ef       	ldi	r31, 0xFF	; 255
    130c:	ef 1a       	sub	r14, r31
    130e:	ff 0a       	sbc	r15, r31
    1310:	21 96       	adiw	r28, 0x01	; 1
    1312:	0f 5f       	subi	r16, 0xFF	; 255
    1314:	1f 4f       	sbci	r17, 0xFF	; 255
    1316:	11 96       	adiw	r26, 0x01	; 1
    1318:	40 32       	cpi	r20, 0x20	; 32
    131a:	51 05       	cpc	r21, r1
    131c:	61 f6       	brne	.-104    	; 0x12b6 <_ZN7Display16draw_number16x16Ehhh+0x7a>
    131e:	df 91       	pop	r29
    1320:	cf 91       	pop	r28
    1322:	1f 91       	pop	r17
    1324:	0f 91       	pop	r16
    1326:	ff 90       	pop	r15
    1328:	ef 90       	pop	r14
    132a:	df 90       	pop	r13
    132c:	cf 90       	pop	r12
    132e:	08 95       	ret

00001330 <_ZN7Display6analogEhhhh>:

void Display::analog(uint8_t stunde, uint8_t minute, uint8_t sekunde, uint8_t sekanzeige){
    1330:	2f 92       	push	r2
    1332:	3f 92       	push	r3
    1334:	4f 92       	push	r4
    1336:	5f 92       	push	r5
    1338:	6f 92       	push	r6
    133a:	7f 92       	push	r7
    133c:	8f 92       	push	r8
    133e:	9f 92       	push	r9
    1340:	af 92       	push	r10
    1342:	bf 92       	push	r11
    1344:	cf 92       	push	r12
    1346:	df 92       	push	r13
    1348:	ef 92       	push	r14
    134a:	ff 92       	push	r15
    134c:	0f 93       	push	r16
    134e:	1f 93       	push	r17
    1350:	cf 93       	push	r28
    1352:	df 93       	push	r29
    1354:	cd b7       	in	r28, 0x3d	; 61
    1356:	de b7       	in	r29, 0x3e	; 62
    1358:	27 97       	sbiw	r28, 0x07	; 7
    135a:	0f b6       	in	r0, 0x3f	; 63
    135c:	f8 94       	cli
    135e:	de bf       	out	0x3e, r29	; 62
    1360:	0f be       	out	0x3f, r0	; 63
    1362:	cd bf       	out	0x3d, r28	; 61
    1364:	9f 83       	std	Y+7, r25	; 0x07
    1366:	8e 83       	std	Y+6, r24	; 0x06
    1368:	6d 83       	std	Y+5, r22	; 0x05
    136a:	34 2e       	mov	r3, r20
	uint8_t Px=32-1;
	uint8_t Py=32-1;
	uint8_t x=0,y=0;
	float winkel=0;
	
	if (sekanzeige)
    136c:	00 23       	and	r16, r16
    136e:	09 f4       	brne	.+2      	; 0x1372 <_ZN7Display6analogEhhhh+0x42>
    1370:	26 c1       	rjmp	.+588    	; 0x15be <_ZN7Display6analogEhhhh+0x28e>
	{
		//Berechnen des Sekundenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(sekunde*6.0)*M_PI/180.0-M_PI/2.0;
    1372:	62 2f       	mov	r22, r18
    1374:	70 e0       	ldi	r23, 0x00	; 0
    1376:	80 e0       	ldi	r24, 0x00	; 0
    1378:	90 e0       	ldi	r25, 0x00	; 0
    137a:	0e 94 9c 3b 	call	0x7738	; 0x7738 <__floatsisf>
    137e:	20 e0       	ldi	r18, 0x00	; 0
    1380:	30 e0       	ldi	r19, 0x00	; 0
    1382:	40 ec       	ldi	r20, 0xC0	; 192
    1384:	50 e4       	ldi	r21, 0x40	; 64
    1386:	0e 94 b5 3c 	call	0x796a	; 0x796a <__mulsf3>
    138a:	2b ed       	ldi	r18, 0xDB	; 219
    138c:	3f e0       	ldi	r19, 0x0F	; 15
    138e:	49 e4       	ldi	r20, 0x49	; 73
    1390:	50 e4       	ldi	r21, 0x40	; 64
    1392:	0e 94 b5 3c 	call	0x796a	; 0x796a <__mulsf3>
    1396:	20 e0       	ldi	r18, 0x00	; 0
    1398:	30 e0       	ldi	r19, 0x00	; 0
    139a:	44 e3       	ldi	r20, 0x34	; 52
    139c:	53 e4       	ldi	r21, 0x43	; 67
    139e:	0e 94 01 3b 	call	0x7602	; 0x7602 <__divsf3>
    13a2:	2b ed       	ldi	r18, 0xDB	; 219
    13a4:	3f e0       	ldi	r19, 0x0F	; 15
    13a6:	49 ec       	ldi	r20, 0xC9	; 201
    13a8:	5f e3       	ldi	r21, 0x3F	; 63
    13aa:	0e 94 99 3a 	call	0x7532	; 0x7532 <__subsf3>
    13ae:	6b 01       	movw	r12, r22
    13b0:	7c 01       	movw	r14, r24
			x=(uint8_t) i*cos(winkel)+Px;
    13b2:	0e 94 fe 3a 	call	0x75fc	; 0x75fc <cos>
    13b6:	4b 01       	movw	r8, r22
    13b8:	5c 01       	movw	r10, r24
			y=(uint8_t) i*sin(winkel)+Py;
    13ba:	c7 01       	movw	r24, r14
    13bc:	b6 01       	movw	r22, r12
    13be:	0e 94 64 3d 	call	0x7ac8	; 0x7ac8 <sin>
    13c2:	2b 01       	movw	r4, r22
    13c4:	3c 01       	movw	r6, r24
    13c6:	00 e0       	ldi	r16, 0x00	; 0
    13c8:	10 e0       	ldi	r17, 0x00	; 0
	if (sekanzeige)
	{
		//Berechnen des Sekundenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(sekunde*6.0)*M_PI/180.0-M_PI/2.0;
			x=(uint8_t) i*cos(winkel)+Px;
    13ca:	b8 01       	movw	r22, r16
    13cc:	01 2e       	mov	r0, r17
    13ce:	00 0c       	add	r0, r0
    13d0:	88 0b       	sbc	r24, r24
    13d2:	99 0b       	sbc	r25, r25
    13d4:	0e 94 9c 3b 	call	0x7738	; 0x7738 <__floatsisf>
    13d8:	6b 01       	movw	r12, r22
    13da:	7c 01       	movw	r14, r24
			y=(uint8_t) i*sin(winkel)+Py;
    13dc:	a3 01       	movw	r20, r6
    13de:	92 01       	movw	r18, r4
    13e0:	0e 94 b5 3c 	call	0x796a	; 0x796a <__mulsf3>
    13e4:	20 e0       	ldi	r18, 0x00	; 0
    13e6:	30 e0       	ldi	r19, 0x00	; 0
    13e8:	48 ef       	ldi	r20, 0xF8	; 248
    13ea:	51 e4       	ldi	r21, 0x41	; 65
    13ec:	0e 94 9a 3a 	call	0x7534	; 0x7534 <__addsf3>
    13f0:	0e 94 6e 3b 	call	0x76dc	; 0x76dc <__fixunssfsi>
    13f4:	26 2e       	mov	r2, r22
	if (sekanzeige)
	{
		//Berechnen des Sekundenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(sekunde*6.0)*M_PI/180.0-M_PI/2.0;
			x=(uint8_t) i*cos(winkel)+Px;
    13f6:	a5 01       	movw	r20, r10
    13f8:	94 01       	movw	r18, r8
    13fa:	c7 01       	movw	r24, r14
    13fc:	b6 01       	movw	r22, r12
    13fe:	0e 94 b5 3c 	call	0x796a	; 0x796a <__mulsf3>
    1402:	20 e0       	ldi	r18, 0x00	; 0
    1404:	30 e0       	ldi	r19, 0x00	; 0
    1406:	48 ef       	ldi	r20, 0xF8	; 248
    1408:	51 e4       	ldi	r21, 0x41	; 65
    140a:	0e 94 9a 3a 	call	0x7534	; 0x7534 <__addsf3>
    140e:	0e 94 6e 3b 	call	0x76dc	; 0x76dc <__fixunssfsi>
			y=(uint8_t) i*sin(winkel)+Py;

			drawPixel(x,y,0);
    1412:	20 e0       	ldi	r18, 0x00	; 0
    1414:	42 2d       	mov	r20, r2
    1416:	8e 81       	ldd	r24, Y+6	; 0x06
    1418:	9f 81       	ldd	r25, Y+7	; 0x07
    141a:	5a de       	rcall	.-844    	; 0x10d0 <_ZN7Display9drawPixelEhhh>
    141c:	0f 5f       	subi	r16, 0xFF	; 255
    141e:	1f 4f       	sbci	r17, 0xFF	; 255
	float winkel=0;
	
	if (sekanzeige)
	{
		//Berechnen des Sekundenzeigers
		for(uint8_t i=0;i<r;i++){
    1420:	09 31       	cpi	r16, 0x19	; 25
    1422:	11 05       	cpc	r17, r1
    1424:	91 f6       	brne	.-92     	; 0x13ca <_ZN7Display6analogEhhhh+0x9a>
		}

		r=21;
		//Berechnen des Minutenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(minute*6.0)*M_PI/180.0-M_PI/2.0;
    1426:	63 2d       	mov	r22, r3
    1428:	70 e0       	ldi	r23, 0x00	; 0
    142a:	80 e0       	ldi	r24, 0x00	; 0
    142c:	90 e0       	ldi	r25, 0x00	; 0
    142e:	0e 94 9c 3b 	call	0x7738	; 0x7738 <__floatsisf>
    1432:	69 83       	std	Y+1, r22	; 0x01
    1434:	7a 83       	std	Y+2, r23	; 0x02
    1436:	8b 83       	std	Y+3, r24	; 0x03
    1438:	9c 83       	std	Y+4, r25	; 0x04
    143a:	20 e0       	ldi	r18, 0x00	; 0
    143c:	30 e0       	ldi	r19, 0x00	; 0
    143e:	40 ec       	ldi	r20, 0xC0	; 192
    1440:	50 e4       	ldi	r21, 0x40	; 64
    1442:	0e 94 b5 3c 	call	0x796a	; 0x796a <__mulsf3>
    1446:	2b ed       	ldi	r18, 0xDB	; 219
    1448:	3f e0       	ldi	r19, 0x0F	; 15
    144a:	49 e4       	ldi	r20, 0x49	; 73
    144c:	50 e4       	ldi	r21, 0x40	; 64
    144e:	0e 94 b5 3c 	call	0x796a	; 0x796a <__mulsf3>
    1452:	20 e0       	ldi	r18, 0x00	; 0
    1454:	30 e0       	ldi	r19, 0x00	; 0
    1456:	44 e3       	ldi	r20, 0x34	; 52
    1458:	53 e4       	ldi	r21, 0x43	; 67
    145a:	0e 94 01 3b 	call	0x7602	; 0x7602 <__divsf3>
    145e:	2b ed       	ldi	r18, 0xDB	; 219
    1460:	3f e0       	ldi	r19, 0x0F	; 15
    1462:	49 ec       	ldi	r20, 0xC9	; 201
    1464:	5f e3       	ldi	r21, 0x3F	; 63
    1466:	0e 94 99 3a 	call	0x7532	; 0x7532 <__subsf3>
    146a:	6b 01       	movw	r12, r22
    146c:	7c 01       	movw	r14, r24
			x=(uint8_t) i*cos(winkel)+Px;
    146e:	0e 94 fe 3a 	call	0x75fc	; 0x75fc <cos>
    1472:	2b 01       	movw	r4, r22
    1474:	3c 01       	movw	r6, r24
			y=(uint8_t) i*sin(winkel)+Py;
    1476:	c7 01       	movw	r24, r14
    1478:	b6 01       	movw	r22, r12
    147a:	0e 94 64 3d 	call	0x7ac8	; 0x7ac8 <sin>
    147e:	4b 01       	movw	r8, r22
    1480:	5c 01       	movw	r10, r24
    1482:	00 e0       	ldi	r16, 0x00	; 0
    1484:	10 e0       	ldi	r17, 0x00	; 0

		r=21;
		//Berechnen des Minutenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(minute*6.0)*M_PI/180.0-M_PI/2.0;
			x=(uint8_t) i*cos(winkel)+Px;
    1486:	b8 01       	movw	r22, r16
    1488:	01 2e       	mov	r0, r17
    148a:	00 0c       	add	r0, r0
    148c:	88 0b       	sbc	r24, r24
    148e:	99 0b       	sbc	r25, r25
    1490:	0e 94 9c 3b 	call	0x7738	; 0x7738 <__floatsisf>
    1494:	6b 01       	movw	r12, r22
    1496:	7c 01       	movw	r14, r24
			y=(uint8_t) i*sin(winkel)+Py;
    1498:	a5 01       	movw	r20, r10
    149a:	94 01       	movw	r18, r8
    149c:	0e 94 b5 3c 	call	0x796a	; 0x796a <__mulsf3>
    14a0:	20 e0       	ldi	r18, 0x00	; 0
    14a2:	30 e0       	ldi	r19, 0x00	; 0
    14a4:	48 ef       	ldi	r20, 0xF8	; 248
    14a6:	51 e4       	ldi	r21, 0x41	; 65
    14a8:	0e 94 9a 3a 	call	0x7534	; 0x7534 <__addsf3>
    14ac:	0e 94 6e 3b 	call	0x76dc	; 0x76dc <__fixunssfsi>
    14b0:	36 2e       	mov	r3, r22

		r=21;
		//Berechnen des Minutenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(minute*6.0)*M_PI/180.0-M_PI/2.0;
			x=(uint8_t) i*cos(winkel)+Px;
    14b2:	a3 01       	movw	r20, r6
    14b4:	92 01       	movw	r18, r4
    14b6:	c7 01       	movw	r24, r14
    14b8:	b6 01       	movw	r22, r12
    14ba:	0e 94 b5 3c 	call	0x796a	; 0x796a <__mulsf3>
    14be:	20 e0       	ldi	r18, 0x00	; 0
    14c0:	30 e0       	ldi	r19, 0x00	; 0
    14c2:	48 ef       	ldi	r20, 0xF8	; 248
    14c4:	51 e4       	ldi	r21, 0x41	; 65
    14c6:	0e 94 9a 3a 	call	0x7534	; 0x7534 <__addsf3>
    14ca:	0e 94 6e 3b 	call	0x76dc	; 0x76dc <__fixunssfsi>
			y=(uint8_t) i*sin(winkel)+Py;

			drawPixel(x,y,0);
    14ce:	20 e0       	ldi	r18, 0x00	; 0
    14d0:	43 2d       	mov	r20, r3
    14d2:	8e 81       	ldd	r24, Y+6	; 0x06
    14d4:	9f 81       	ldd	r25, Y+7	; 0x07
    14d6:	fc dd       	rcall	.-1032   	; 0x10d0 <_ZN7Display9drawPixelEhhh>
    14d8:	0f 5f       	subi	r16, 0xFF	; 255
    14da:	1f 4f       	sbci	r17, 0xFF	; 255
			drawPixel(x,y,0);
		}

		r=21;
		//Berechnen des Minutenzeigers
		for(uint8_t i=0;i<r;i++){
    14dc:	05 31       	cpi	r16, 0x15	; 21
    14de:	11 05       	cpc	r17, r1
    14e0:	91 f6       	brne	.-92     	; 0x1486 <_ZN7Display6analogEhhhh+0x156>
		}

		r=13;
		//Berechnen des Stundenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(stunde*30.0+minute/2.0)*M_PI/180.0-M_PI/2.0;
    14e2:	2d 81       	ldd	r18, Y+5	; 0x05
    14e4:	62 2f       	mov	r22, r18
    14e6:	70 e0       	ldi	r23, 0x00	; 0
    14e8:	80 e0       	ldi	r24, 0x00	; 0
    14ea:	90 e0       	ldi	r25, 0x00	; 0
    14ec:	0e 94 9c 3b 	call	0x7738	; 0x7738 <__floatsisf>
    14f0:	20 e0       	ldi	r18, 0x00	; 0
    14f2:	30 e0       	ldi	r19, 0x00	; 0
    14f4:	40 ef       	ldi	r20, 0xF0	; 240
    14f6:	51 e4       	ldi	r21, 0x41	; 65
    14f8:	0e 94 b5 3c 	call	0x796a	; 0x796a <__mulsf3>
    14fc:	6b 01       	movw	r12, r22
    14fe:	7c 01       	movw	r14, r24
    1500:	20 e0       	ldi	r18, 0x00	; 0
    1502:	30 e0       	ldi	r19, 0x00	; 0
    1504:	40 e0       	ldi	r20, 0x00	; 0
    1506:	5f e3       	ldi	r21, 0x3F	; 63
    1508:	69 81       	ldd	r22, Y+1	; 0x01
    150a:	7a 81       	ldd	r23, Y+2	; 0x02
    150c:	8b 81       	ldd	r24, Y+3	; 0x03
    150e:	9c 81       	ldd	r25, Y+4	; 0x04
    1510:	0e 94 b5 3c 	call	0x796a	; 0x796a <__mulsf3>
    1514:	9b 01       	movw	r18, r22
    1516:	ac 01       	movw	r20, r24
    1518:	c7 01       	movw	r24, r14
    151a:	b6 01       	movw	r22, r12
    151c:	0e 94 9a 3a 	call	0x7534	; 0x7534 <__addsf3>
    1520:	2b ed       	ldi	r18, 0xDB	; 219
    1522:	3f e0       	ldi	r19, 0x0F	; 15
    1524:	49 e4       	ldi	r20, 0x49	; 73
    1526:	50 e4       	ldi	r21, 0x40	; 64
    1528:	0e 94 b5 3c 	call	0x796a	; 0x796a <__mulsf3>
    152c:	20 e0       	ldi	r18, 0x00	; 0
    152e:	30 e0       	ldi	r19, 0x00	; 0
    1530:	44 e3       	ldi	r20, 0x34	; 52
    1532:	53 e4       	ldi	r21, 0x43	; 67
    1534:	0e 94 01 3b 	call	0x7602	; 0x7602 <__divsf3>
    1538:	2b ed       	ldi	r18, 0xDB	; 219
    153a:	3f e0       	ldi	r19, 0x0F	; 15
    153c:	49 ec       	ldi	r20, 0xC9	; 201
    153e:	5f e3       	ldi	r21, 0x3F	; 63
    1540:	0e 94 99 3a 	call	0x7532	; 0x7532 <__subsf3>
    1544:	6b 01       	movw	r12, r22
    1546:	7c 01       	movw	r14, r24
			x= (uint8_t) i*cos(winkel) +Px;
    1548:	0e 94 fe 3a 	call	0x75fc	; 0x75fc <cos>
    154c:	4b 01       	movw	r8, r22
    154e:	5c 01       	movw	r10, r24
			y= (uint8_t) i*sin(winkel) +Py;
    1550:	c7 01       	movw	r24, r14
    1552:	b6 01       	movw	r22, r12
    1554:	0e 94 64 3d 	call	0x7ac8	; 0x7ac8 <sin>
    1558:	2b 01       	movw	r4, r22
    155a:	3c 01       	movw	r6, r24
    155c:	00 e0       	ldi	r16, 0x00	; 0
    155e:	10 e0       	ldi	r17, 0x00	; 0

		r=13;
		//Berechnen des Stundenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(stunde*30.0+minute/2.0)*M_PI/180.0-M_PI/2.0;
			x= (uint8_t) i*cos(winkel) +Px;
    1560:	b8 01       	movw	r22, r16
    1562:	01 2e       	mov	r0, r17
    1564:	00 0c       	add	r0, r0
    1566:	88 0b       	sbc	r24, r24
    1568:	99 0b       	sbc	r25, r25
    156a:	0e 94 9c 3b 	call	0x7738	; 0x7738 <__floatsisf>
    156e:	6b 01       	movw	r12, r22
    1570:	7c 01       	movw	r14, r24
			y= (uint8_t) i*sin(winkel) +Py;
    1572:	a3 01       	movw	r20, r6
    1574:	92 01       	movw	r18, r4
    1576:	0e 94 b5 3c 	call	0x796a	; 0x796a <__mulsf3>
    157a:	20 e0       	ldi	r18, 0x00	; 0
    157c:	30 e0       	ldi	r19, 0x00	; 0
    157e:	48 ef       	ldi	r20, 0xF8	; 248
    1580:	51 e4       	ldi	r21, 0x41	; 65
    1582:	0e 94 9a 3a 	call	0x7534	; 0x7534 <__addsf3>
    1586:	0e 94 6e 3b 	call	0x76dc	; 0x76dc <__fixunssfsi>
    158a:	36 2e       	mov	r3, r22

		r=13;
		//Berechnen des Stundenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(stunde*30.0+minute/2.0)*M_PI/180.0-M_PI/2.0;
			x= (uint8_t) i*cos(winkel) +Px;
    158c:	a5 01       	movw	r20, r10
    158e:	94 01       	movw	r18, r8
    1590:	c7 01       	movw	r24, r14
    1592:	b6 01       	movw	r22, r12
    1594:	0e 94 b5 3c 	call	0x796a	; 0x796a <__mulsf3>
    1598:	20 e0       	ldi	r18, 0x00	; 0
    159a:	30 e0       	ldi	r19, 0x00	; 0
    159c:	48 ef       	ldi	r20, 0xF8	; 248
    159e:	51 e4       	ldi	r21, 0x41	; 65
    15a0:	0e 94 9a 3a 	call	0x7534	; 0x7534 <__addsf3>
    15a4:	0e 94 6e 3b 	call	0x76dc	; 0x76dc <__fixunssfsi>
			y= (uint8_t) i*sin(winkel) +Py;

			drawPixel(x,y,0);
    15a8:	20 e0       	ldi	r18, 0x00	; 0
    15aa:	43 2d       	mov	r20, r3
    15ac:	8e 81       	ldd	r24, Y+6	; 0x06
    15ae:	9f 81       	ldd	r25, Y+7	; 0x07
    15b0:	8f dd       	rcall	.-1250   	; 0x10d0 <_ZN7Display9drawPixelEhhh>
    15b2:	0f 5f       	subi	r16, 0xFF	; 255
    15b4:	1f 4f       	sbci	r17, 0xFF	; 255
			drawPixel(x,y,0);
		}

		r=13;
		//Berechnen des Stundenzeigers
		for(uint8_t i=0;i<r;i++){
    15b6:	0d 30       	cpi	r16, 0x0D	; 13
    15b8:	11 05       	cpc	r17, r1
    15ba:	91 f6       	brne	.-92     	; 0x1560 <_ZN7Display6analogEhhhh+0x230>
    15bc:	cb c0       	rjmp	.+406    	; 0x1754 <_ZN7Display6analogEhhhh+0x424>
	}
	else{
		r=25;
		//Berechnen des Minutenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(minute*6.0)*M_PI/180.0-M_PI/2.0;
    15be:	64 2f       	mov	r22, r20
    15c0:	70 e0       	ldi	r23, 0x00	; 0
    15c2:	80 e0       	ldi	r24, 0x00	; 0
    15c4:	90 e0       	ldi	r25, 0x00	; 0
    15c6:	0e 94 9c 3b 	call	0x7738	; 0x7738 <__floatsisf>
    15ca:	69 83       	std	Y+1, r22	; 0x01
    15cc:	7a 83       	std	Y+2, r23	; 0x02
    15ce:	8b 83       	std	Y+3, r24	; 0x03
    15d0:	9c 83       	std	Y+4, r25	; 0x04
    15d2:	20 e0       	ldi	r18, 0x00	; 0
    15d4:	30 e0       	ldi	r19, 0x00	; 0
    15d6:	40 ec       	ldi	r20, 0xC0	; 192
    15d8:	50 e4       	ldi	r21, 0x40	; 64
    15da:	0e 94 b5 3c 	call	0x796a	; 0x796a <__mulsf3>
    15de:	2b ed       	ldi	r18, 0xDB	; 219
    15e0:	3f e0       	ldi	r19, 0x0F	; 15
    15e2:	49 e4       	ldi	r20, 0x49	; 73
    15e4:	50 e4       	ldi	r21, 0x40	; 64
    15e6:	0e 94 b5 3c 	call	0x796a	; 0x796a <__mulsf3>
    15ea:	20 e0       	ldi	r18, 0x00	; 0
    15ec:	30 e0       	ldi	r19, 0x00	; 0
    15ee:	44 e3       	ldi	r20, 0x34	; 52
    15f0:	53 e4       	ldi	r21, 0x43	; 67
    15f2:	0e 94 01 3b 	call	0x7602	; 0x7602 <__divsf3>
    15f6:	2b ed       	ldi	r18, 0xDB	; 219
    15f8:	3f e0       	ldi	r19, 0x0F	; 15
    15fa:	49 ec       	ldi	r20, 0xC9	; 201
    15fc:	5f e3       	ldi	r21, 0x3F	; 63
    15fe:	0e 94 99 3a 	call	0x7532	; 0x7532 <__subsf3>
    1602:	6b 01       	movw	r12, r22
    1604:	7c 01       	movw	r14, r24
			x=(uint8_t) i*cos(winkel)+Px;
    1606:	0e 94 fe 3a 	call	0x75fc	; 0x75fc <cos>
    160a:	2b 01       	movw	r4, r22
    160c:	3c 01       	movw	r6, r24
			y=(uint8_t) i*sin(winkel)+Py;
    160e:	c7 01       	movw	r24, r14
    1610:	b6 01       	movw	r22, r12
    1612:	0e 94 64 3d 	call	0x7ac8	; 0x7ac8 <sin>
    1616:	4b 01       	movw	r8, r22
    1618:	5c 01       	movw	r10, r24
    161a:	00 e0       	ldi	r16, 0x00	; 0
    161c:	10 e0       	ldi	r17, 0x00	; 0
	else{
		r=25;
		//Berechnen des Minutenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(minute*6.0)*M_PI/180.0-M_PI/2.0;
			x=(uint8_t) i*cos(winkel)+Px;
    161e:	b8 01       	movw	r22, r16
    1620:	01 2e       	mov	r0, r17
    1622:	00 0c       	add	r0, r0
    1624:	88 0b       	sbc	r24, r24
    1626:	99 0b       	sbc	r25, r25
    1628:	0e 94 9c 3b 	call	0x7738	; 0x7738 <__floatsisf>
    162c:	6b 01       	movw	r12, r22
    162e:	7c 01       	movw	r14, r24
			y=(uint8_t) i*sin(winkel)+Py;
    1630:	a5 01       	movw	r20, r10
    1632:	94 01       	movw	r18, r8
    1634:	0e 94 b5 3c 	call	0x796a	; 0x796a <__mulsf3>
    1638:	20 e0       	ldi	r18, 0x00	; 0
    163a:	30 e0       	ldi	r19, 0x00	; 0
    163c:	48 ef       	ldi	r20, 0xF8	; 248
    163e:	51 e4       	ldi	r21, 0x41	; 65
    1640:	0e 94 9a 3a 	call	0x7534	; 0x7534 <__addsf3>
    1644:	0e 94 6e 3b 	call	0x76dc	; 0x76dc <__fixunssfsi>
    1648:	36 2e       	mov	r3, r22
	else{
		r=25;
		//Berechnen des Minutenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(minute*6.0)*M_PI/180.0-M_PI/2.0;
			x=(uint8_t) i*cos(winkel)+Px;
    164a:	a3 01       	movw	r20, r6
    164c:	92 01       	movw	r18, r4
    164e:	c7 01       	movw	r24, r14
    1650:	b6 01       	movw	r22, r12
    1652:	0e 94 b5 3c 	call	0x796a	; 0x796a <__mulsf3>
    1656:	20 e0       	ldi	r18, 0x00	; 0
    1658:	30 e0       	ldi	r19, 0x00	; 0
    165a:	48 ef       	ldi	r20, 0xF8	; 248
    165c:	51 e4       	ldi	r21, 0x41	; 65
    165e:	0e 94 9a 3a 	call	0x7534	; 0x7534 <__addsf3>
    1662:	0e 94 6e 3b 	call	0x76dc	; 0x76dc <__fixunssfsi>
			y=(uint8_t) i*sin(winkel)+Py;

			drawPixel(x,y,0);
    1666:	20 e0       	ldi	r18, 0x00	; 0
    1668:	43 2d       	mov	r20, r3
    166a:	8e 81       	ldd	r24, Y+6	; 0x06
    166c:	9f 81       	ldd	r25, Y+7	; 0x07
    166e:	30 dd       	rcall	.-1440   	; 0x10d0 <_ZN7Display9drawPixelEhhh>
    1670:	0f 5f       	subi	r16, 0xFF	; 255
    1672:	1f 4f       	sbci	r17, 0xFF	; 255
		}
	}
	else{
		r=25;
		//Berechnen des Minutenzeigers
		for(uint8_t i=0;i<r;i++){
    1674:	09 31       	cpi	r16, 0x19	; 25
    1676:	11 05       	cpc	r17, r1
    1678:	91 f6       	brne	.-92     	; 0x161e <_ZN7Display6analogEhhhh+0x2ee>
		}

		r=17;
		//Berechnen des Stundenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(stunde*30.0+minute/2.0)*M_PI/180.0-M_PI/2.0;
    167a:	ed 81       	ldd	r30, Y+5	; 0x05
    167c:	6e 2f       	mov	r22, r30
    167e:	70 e0       	ldi	r23, 0x00	; 0
    1680:	80 e0       	ldi	r24, 0x00	; 0
    1682:	90 e0       	ldi	r25, 0x00	; 0
    1684:	0e 94 9c 3b 	call	0x7738	; 0x7738 <__floatsisf>
    1688:	20 e0       	ldi	r18, 0x00	; 0
    168a:	30 e0       	ldi	r19, 0x00	; 0
    168c:	40 ef       	ldi	r20, 0xF0	; 240
    168e:	51 e4       	ldi	r21, 0x41	; 65
    1690:	0e 94 b5 3c 	call	0x796a	; 0x796a <__mulsf3>
    1694:	6b 01       	movw	r12, r22
    1696:	7c 01       	movw	r14, r24
    1698:	20 e0       	ldi	r18, 0x00	; 0
    169a:	30 e0       	ldi	r19, 0x00	; 0
    169c:	40 e0       	ldi	r20, 0x00	; 0
    169e:	5f e3       	ldi	r21, 0x3F	; 63
    16a0:	69 81       	ldd	r22, Y+1	; 0x01
    16a2:	7a 81       	ldd	r23, Y+2	; 0x02
    16a4:	8b 81       	ldd	r24, Y+3	; 0x03
    16a6:	9c 81       	ldd	r25, Y+4	; 0x04
    16a8:	0e 94 b5 3c 	call	0x796a	; 0x796a <__mulsf3>
    16ac:	9b 01       	movw	r18, r22
    16ae:	ac 01       	movw	r20, r24
    16b0:	c7 01       	movw	r24, r14
    16b2:	b6 01       	movw	r22, r12
    16b4:	0e 94 9a 3a 	call	0x7534	; 0x7534 <__addsf3>
    16b8:	2b ed       	ldi	r18, 0xDB	; 219
    16ba:	3f e0       	ldi	r19, 0x0F	; 15
    16bc:	49 e4       	ldi	r20, 0x49	; 73
    16be:	50 e4       	ldi	r21, 0x40	; 64
    16c0:	0e 94 b5 3c 	call	0x796a	; 0x796a <__mulsf3>
    16c4:	20 e0       	ldi	r18, 0x00	; 0
    16c6:	30 e0       	ldi	r19, 0x00	; 0
    16c8:	44 e3       	ldi	r20, 0x34	; 52
    16ca:	53 e4       	ldi	r21, 0x43	; 67
    16cc:	0e 94 01 3b 	call	0x7602	; 0x7602 <__divsf3>
    16d0:	2b ed       	ldi	r18, 0xDB	; 219
    16d2:	3f e0       	ldi	r19, 0x0F	; 15
    16d4:	49 ec       	ldi	r20, 0xC9	; 201
    16d6:	5f e3       	ldi	r21, 0x3F	; 63
    16d8:	0e 94 99 3a 	call	0x7532	; 0x7532 <__subsf3>
    16dc:	6b 01       	movw	r12, r22
    16de:	7c 01       	movw	r14, r24
			x= (uint8_t) i*cos(winkel) +Px;
    16e0:	0e 94 fe 3a 	call	0x75fc	; 0x75fc <cos>
    16e4:	4b 01       	movw	r8, r22
    16e6:	5c 01       	movw	r10, r24
			y= (uint8_t) i*sin(winkel) +Py;
    16e8:	c7 01       	movw	r24, r14
    16ea:	b6 01       	movw	r22, r12
    16ec:	0e 94 64 3d 	call	0x7ac8	; 0x7ac8 <sin>
    16f0:	2b 01       	movw	r4, r22
    16f2:	3c 01       	movw	r6, r24
    16f4:	00 e0       	ldi	r16, 0x00	; 0
    16f6:	10 e0       	ldi	r17, 0x00	; 0

		r=17;
		//Berechnen des Stundenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(stunde*30.0+minute/2.0)*M_PI/180.0-M_PI/2.0;
			x= (uint8_t) i*cos(winkel) +Px;
    16f8:	b8 01       	movw	r22, r16
    16fa:	01 2e       	mov	r0, r17
    16fc:	00 0c       	add	r0, r0
    16fe:	88 0b       	sbc	r24, r24
    1700:	99 0b       	sbc	r25, r25
    1702:	0e 94 9c 3b 	call	0x7738	; 0x7738 <__floatsisf>
    1706:	6b 01       	movw	r12, r22
    1708:	7c 01       	movw	r14, r24
			y= (uint8_t) i*sin(winkel) +Py;
    170a:	a3 01       	movw	r20, r6
    170c:	92 01       	movw	r18, r4
    170e:	0e 94 b5 3c 	call	0x796a	; 0x796a <__mulsf3>
    1712:	20 e0       	ldi	r18, 0x00	; 0
    1714:	30 e0       	ldi	r19, 0x00	; 0
    1716:	48 ef       	ldi	r20, 0xF8	; 248
    1718:	51 e4       	ldi	r21, 0x41	; 65
    171a:	0e 94 9a 3a 	call	0x7534	; 0x7534 <__addsf3>
    171e:	0e 94 6e 3b 	call	0x76dc	; 0x76dc <__fixunssfsi>
    1722:	36 2e       	mov	r3, r22

		r=17;
		//Berechnen des Stundenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(stunde*30.0+minute/2.0)*M_PI/180.0-M_PI/2.0;
			x= (uint8_t) i*cos(winkel) +Px;
    1724:	a5 01       	movw	r20, r10
    1726:	94 01       	movw	r18, r8
    1728:	c7 01       	movw	r24, r14
    172a:	b6 01       	movw	r22, r12
    172c:	0e 94 b5 3c 	call	0x796a	; 0x796a <__mulsf3>
    1730:	20 e0       	ldi	r18, 0x00	; 0
    1732:	30 e0       	ldi	r19, 0x00	; 0
    1734:	48 ef       	ldi	r20, 0xF8	; 248
    1736:	51 e4       	ldi	r21, 0x41	; 65
    1738:	0e 94 9a 3a 	call	0x7534	; 0x7534 <__addsf3>
    173c:	0e 94 6e 3b 	call	0x76dc	; 0x76dc <__fixunssfsi>
			y= (uint8_t) i*sin(winkel) +Py;

			drawPixel(x,y,0);
    1740:	20 e0       	ldi	r18, 0x00	; 0
    1742:	43 2d       	mov	r20, r3
    1744:	8e 81       	ldd	r24, Y+6	; 0x06
    1746:	9f 81       	ldd	r25, Y+7	; 0x07
    1748:	c3 dc       	rcall	.-1658   	; 0x10d0 <_ZN7Display9drawPixelEhhh>
    174a:	0f 5f       	subi	r16, 0xFF	; 255
    174c:	1f 4f       	sbci	r17, 0xFF	; 255
			drawPixel(x,y,0);
		}

		r=17;
		//Berechnen des Stundenzeigers
		for(uint8_t i=0;i<r;i++){
    174e:	01 31       	cpi	r16, 0x11	; 17
    1750:	11 05       	cpc	r17, r1
    1752:	91 f6       	brne	.-92     	; 0x16f8 <_ZN7Display6analogEhhhh+0x3c8>
		}
	}
	

	//Anzeige der Zahlen
	draw_ASCI('1',32-charsize,0);
    1754:	20 e0       	ldi	r18, 0x00	; 0
    1756:	4a e1       	ldi	r20, 0x1A	; 26
    1758:	61 e3       	ldi	r22, 0x31	; 49
    175a:	8e 81       	ldd	r24, Y+6	; 0x06
    175c:	9f 81       	ldd	r25, Y+7	; 0x07
    175e:	24 dd       	rcall	.-1464   	; 0x11a8 <_ZN7Display9draw_ASCIEhhh>
	draw_ASCI('2',32,0);
    1760:	20 e0       	ldi	r18, 0x00	; 0
    1762:	40 e2       	ldi	r20, 0x20	; 32
    1764:	62 e3       	ldi	r22, 0x32	; 50
    1766:	8e 81       	ldd	r24, Y+6	; 0x06
    1768:	9f 81       	ldd	r25, Y+7	; 0x07
    176a:	1e dd       	rcall	.-1476   	; 0x11a8 <_ZN7Display9draw_ASCIEhhh>
	draw_ASCI('3',64-charsize,4*charhighte-charhighte/2);
    176c:	2c e1       	ldi	r18, 0x1C	; 28
    176e:	4a e3       	ldi	r20, 0x3A	; 58
    1770:	63 e3       	ldi	r22, 0x33	; 51
    1772:	8e 81       	ldd	r24, Y+6	; 0x06
    1774:	9f 81       	ldd	r25, Y+7	; 0x07
    1776:	18 dd       	rcall	.-1488   	; 0x11a8 <_ZN7Display9draw_ASCIEhhh>
	draw_ASCI('6',32-charsize/2,7*charhighte);
    1778:	28 e3       	ldi	r18, 0x38	; 56
    177a:	4d e1       	ldi	r20, 0x1D	; 29
    177c:	66 e3       	ldi	r22, 0x36	; 54
    177e:	8e 81       	ldd	r24, Y+6	; 0x06
    1780:	9f 81       	ldd	r25, Y+7	; 0x07
    1782:	12 dd       	rcall	.-1500   	; 0x11a8 <_ZN7Display9draw_ASCIEhhh>
	draw_ASCI('9',0,4*charhighte-charhighte/2);
    1784:	2c e1       	ldi	r18, 0x1C	; 28
    1786:	40 e0       	ldi	r20, 0x00	; 0
    1788:	69 e3       	ldi	r22, 0x39	; 57
    178a:	8e 81       	ldd	r24, Y+6	; 0x06
    178c:	9f 81       	ldd	r25, Y+7	; 0x07
    178e:	0c dd       	rcall	.-1512   	; 0x11a8 <_ZN7Display9draw_ASCIEhhh>

	//anzeige des Rings fuer die Restlichen Stunden Zahlen
	//1
	drawPixel(26*cos((30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
    1790:	20 e0       	ldi	r18, 0x00	; 0
    1792:	48 e0       	ldi	r20, 0x08	; 8
    1794:	6c e2       	ldi	r22, 0x2C	; 44
    1796:	8e 81       	ldd	r24, Y+6	; 0x06
    1798:	9f 81       	ldd	r25, Y+7	; 0x07
    179a:	9a dc       	rcall	.-1740   	; 0x10d0 <_ZN7Display9drawPixelEhhh>
	//2
	drawPixel(26*cos((2*30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((2*30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
    179c:	20 e0       	ldi	r18, 0x00	; 0
    179e:	42 e1       	ldi	r20, 0x12	; 18
    17a0:	65 e3       	ldi	r22, 0x35	; 53
    17a2:	8e 81       	ldd	r24, Y+6	; 0x06
    17a4:	9f 81       	ldd	r25, Y+7	; 0x07
    17a6:	94 dc       	rcall	.-1752   	; 0x10d0 <_ZN7Display9drawPixelEhhh>
	//4
	drawPixel(26*cos((4*30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((4*30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
    17a8:	20 e0       	ldi	r18, 0x00	; 0
    17aa:	4c e2       	ldi	r20, 0x2C	; 44
    17ac:	65 e3       	ldi	r22, 0x35	; 53
    17ae:	8e 81       	ldd	r24, Y+6	; 0x06
    17b0:	9f 81       	ldd	r25, Y+7	; 0x07
    17b2:	8e dc       	rcall	.-1764   	; 0x10d0 <_ZN7Display9drawPixelEhhh>
	//5
	drawPixel(26*cos((5*30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((5*30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
    17b4:	20 e0       	ldi	r18, 0x00	; 0
    17b6:	45 e3       	ldi	r20, 0x35	; 53
    17b8:	6b e2       	ldi	r22, 0x2B	; 43
    17ba:	8e 81       	ldd	r24, Y+6	; 0x06
    17bc:	9f 81       	ldd	r25, Y+7	; 0x07
    17be:	88 dc       	rcall	.-1776   	; 0x10d0 <_ZN7Display9drawPixelEhhh>
	//7
	drawPixel(26*cos((7*30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((7*30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
    17c0:	20 e0       	ldi	r18, 0x00	; 0
    17c2:	45 e3       	ldi	r20, 0x35	; 53
    17c4:	61 e1       	ldi	r22, 0x11	; 17
    17c6:	8e 81       	ldd	r24, Y+6	; 0x06
    17c8:	9f 81       	ldd	r25, Y+7	; 0x07
    17ca:	82 dc       	rcall	.-1788   	; 0x10d0 <_ZN7Display9drawPixelEhhh>
	//8
	drawPixel(26*cos((8*30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((8*30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
    17cc:	20 e0       	ldi	r18, 0x00	; 0
    17ce:	4c e2       	ldi	r20, 0x2C	; 44
    17d0:	68 e0       	ldi	r22, 0x08	; 8
    17d2:	8e 81       	ldd	r24, Y+6	; 0x06
    17d4:	9f 81       	ldd	r25, Y+7	; 0x07
    17d6:	7c dc       	rcall	.-1800   	; 0x10d0 <_ZN7Display9drawPixelEhhh>
	//10
	drawPixel(26*cos((10*30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((10*30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
    17d8:	20 e0       	ldi	r18, 0x00	; 0
    17da:	41 e1       	ldi	r20, 0x11	; 17
    17dc:	68 e0       	ldi	r22, 0x08	; 8
    17de:	8e 81       	ldd	r24, Y+6	; 0x06
    17e0:	9f 81       	ldd	r25, Y+7	; 0x07
    17e2:	76 dc       	rcall	.-1812   	; 0x10d0 <_ZN7Display9drawPixelEhhh>
	//11
	drawPixel(26*cos((11*30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((11*30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
    17e4:	20 e0       	ldi	r18, 0x00	; 0
    17e6:	48 e0       	ldi	r20, 0x08	; 8
    17e8:	62 e1       	ldi	r22, 0x12	; 18
    17ea:	8e 81       	ldd	r24, Y+6	; 0x06
    17ec:	9f 81       	ldd	r25, Y+7	; 0x07
    17ee:	70 dc       	rcall	.-1824   	; 0x10d0 <_ZN7Display9drawPixelEhhh>
}
    17f0:	27 96       	adiw	r28, 0x07	; 7
    17f2:	0f b6       	in	r0, 0x3f	; 63
    17f4:	f8 94       	cli
    17f6:	de bf       	out	0x3e, r29	; 62
    17f8:	0f be       	out	0x3f, r0	; 63
    17fa:	cd bf       	out	0x3d, r28	; 61
    17fc:	df 91       	pop	r29
    17fe:	cf 91       	pop	r28
    1800:	1f 91       	pop	r17
    1802:	0f 91       	pop	r16
    1804:	ff 90       	pop	r15
    1806:	ef 90       	pop	r14
    1808:	df 90       	pop	r13
    180a:	cf 90       	pop	r12
    180c:	bf 90       	pop	r11
    180e:	af 90       	pop	r10
    1810:	9f 90       	pop	r9
    1812:	8f 90       	pop	r8
    1814:	7f 90       	pop	r7
    1816:	6f 90       	pop	r6
    1818:	5f 90       	pop	r5
    181a:	4f 90       	pop	r4
    181c:	3f 90       	pop	r3
    181e:	2f 90       	pop	r2
    1820:	08 95       	ret

00001822 <mem_cpy>:

	if (   pb.idx >= 0		/* Flush buffered characters to the file */
		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
		&& (UINT)pb.idx == nw) return pb.nchr;
	return EOF;
}
    1822:	41 15       	cp	r20, r1
    1824:	51 05       	cpc	r21, r1
    1826:	51 f0       	breq	.+20     	; 0x183c <mem_cpy+0x1a>
    1828:	a6 2f       	mov	r26, r22
    182a:	b7 2f       	mov	r27, r23
    182c:	fc 01       	movw	r30, r24
    182e:	48 0f       	add	r20, r24
    1830:	59 1f       	adc	r21, r25
    1832:	9d 91       	ld	r25, X+
    1834:	91 93       	st	Z+, r25
    1836:	e4 17       	cp	r30, r20
    1838:	f5 07       	cpc	r31, r21
    183a:	d9 f7       	brne	.-10     	; 0x1832 <mem_cpy+0x10>
    183c:	08 95       	ret

0000183e <ld_clust>:
    183e:	0f 93       	push	r16
    1840:	1f 93       	push	r17
    1842:	dc 01       	movw	r26, r24
    1844:	fb 01       	movw	r30, r22
    1846:	93 8d       	ldd	r25, Z+27	; 0x1b
    1848:	69 2f       	mov	r22, r25
    184a:	70 e0       	ldi	r23, 0x00	; 0
    184c:	76 2f       	mov	r23, r22
    184e:	66 27       	eor	r22, r22
    1850:	82 8d       	ldd	r24, Z+26	; 0x1a
    1852:	68 2b       	or	r22, r24
    1854:	80 e0       	ldi	r24, 0x00	; 0
    1856:	90 e0       	ldi	r25, 0x00	; 0
    1858:	2c 91       	ld	r18, X
    185a:	23 30       	cpi	r18, 0x03	; 3
    185c:	79 f4       	brne	.+30     	; 0x187c <ld_clust+0x3e>
    185e:	05 89       	ldd	r16, Z+21	; 0x15
    1860:	10 e0       	ldi	r17, 0x00	; 0
    1862:	10 2f       	mov	r17, r16
    1864:	00 27       	eor	r16, r16
    1866:	24 89       	ldd	r18, Z+20	; 0x14
    1868:	02 2b       	or	r16, r18
    186a:	20 e0       	ldi	r18, 0x00	; 0
    186c:	30 e0       	ldi	r19, 0x00	; 0
    186e:	98 01       	movw	r18, r16
    1870:	11 27       	eor	r17, r17
    1872:	00 27       	eor	r16, r16
    1874:	60 2b       	or	r22, r16
    1876:	71 2b       	or	r23, r17
    1878:	82 2b       	or	r24, r18
    187a:	93 2b       	or	r25, r19
    187c:	1f 91       	pop	r17
    187e:	0f 91       	pop	r16
    1880:	08 95       	ret

00001882 <get_ldnumber>:
    1882:	cf 93       	push	r28
    1884:	df 93       	push	r29
    1886:	ec 01       	movw	r28, r24
    1888:	a8 81       	ld	r26, Y
    188a:	b9 81       	ldd	r27, Y+1	; 0x01
    188c:	10 97       	sbiw	r26, 0x00	; 0
    188e:	f9 f0       	breq	.+62     	; 0x18ce <get_ldnumber+0x4c>
    1890:	4c 91       	ld	r20, X
    1892:	41 32       	cpi	r20, 0x21	; 33
    1894:	58 f0       	brcs	.+22     	; 0x18ac <get_ldnumber+0x2a>
    1896:	4a 33       	cpi	r20, 0x3A	; 58
    1898:	31 f1       	breq	.+76     	; 0x18e6 <get_ldnumber+0x64>
    189a:	fd 01       	movw	r30, r26
    189c:	31 96       	adiw	r30, 0x01	; 1
    189e:	9f 01       	movw	r18, r30
    18a0:	91 91       	ld	r25, Z+
    18a2:	91 32       	cpi	r25, 0x21	; 33
    18a4:	28 f0       	brcs	.+10     	; 0x18b0 <get_ldnumber+0x2e>
    18a6:	9a 33       	cpi	r25, 0x3A	; 58
    18a8:	d1 f7       	brne	.-12     	; 0x189e <get_ldnumber+0x1c>
    18aa:	04 c0       	rjmp	.+8      	; 0x18b4 <get_ldnumber+0x32>
    18ac:	94 2f       	mov	r25, r20
    18ae:	9d 01       	movw	r18, r26
    18b0:	9a 33       	cpi	r25, 0x3A	; 58
    18b2:	81 f4       	brne	.+32     	; 0x18d4 <get_ldnumber+0x52>
    18b4:	cd 01       	movw	r24, r26
    18b6:	01 96       	adiw	r24, 0x01	; 1
    18b8:	28 17       	cp	r18, r24
    18ba:	39 07       	cpc	r19, r25
    18bc:	71 f4       	brne	.+28     	; 0x18da <get_ldnumber+0x58>
    18be:	40 33       	cpi	r20, 0x30	; 48
    18c0:	79 f4       	brne	.+30     	; 0x18e0 <get_ldnumber+0x5e>
    18c2:	12 96       	adiw	r26, 0x02	; 2
    18c4:	b9 83       	std	Y+1, r27	; 0x01
    18c6:	a8 83       	st	Y, r26
    18c8:	80 e0       	ldi	r24, 0x00	; 0
    18ca:	90 e0       	ldi	r25, 0x00	; 0
    18cc:	0e c0       	rjmp	.+28     	; 0x18ea <get_ldnumber+0x68>
    18ce:	8f ef       	ldi	r24, 0xFF	; 255
    18d0:	9f ef       	ldi	r25, 0xFF	; 255
    18d2:	0b c0       	rjmp	.+22     	; 0x18ea <get_ldnumber+0x68>
    18d4:	80 e0       	ldi	r24, 0x00	; 0
    18d6:	90 e0       	ldi	r25, 0x00	; 0
    18d8:	08 c0       	rjmp	.+16     	; 0x18ea <get_ldnumber+0x68>
    18da:	8f ef       	ldi	r24, 0xFF	; 255
    18dc:	9f ef       	ldi	r25, 0xFF	; 255
    18de:	05 c0       	rjmp	.+10     	; 0x18ea <get_ldnumber+0x68>
    18e0:	8f ef       	ldi	r24, 0xFF	; 255
    18e2:	9f ef       	ldi	r25, 0xFF	; 255
    18e4:	02 c0       	rjmp	.+4      	; 0x18ea <get_ldnumber+0x68>
    18e6:	9d 01       	movw	r18, r26
    18e8:	e5 cf       	rjmp	.-54     	; 0x18b4 <get_ldnumber+0x32>
    18ea:	df 91       	pop	r29
    18ec:	cf 91       	pop	r28
    18ee:	08 95       	ret

000018f0 <sync_window>:
    18f0:	8f 92       	push	r8
    18f2:	9f 92       	push	r9
    18f4:	af 92       	push	r10
    18f6:	bf 92       	push	r11
    18f8:	cf 92       	push	r12
    18fa:	df 92       	push	r13
    18fc:	ef 92       	push	r14
    18fe:	ff 92       	push	r15
    1900:	0f 93       	push	r16
    1902:	1f 93       	push	r17
    1904:	cf 93       	push	r28
    1906:	df 93       	push	r29
    1908:	fc 01       	movw	r30, r24
    190a:	24 81       	ldd	r18, Z+4	; 0x04
    190c:	22 23       	and	r18, r18
    190e:	09 f4       	brne	.+2      	; 0x1912 <sync_window+0x22>
    1910:	44 c0       	rjmp	.+136    	; 0x199a <sync_window+0xaa>
    1912:	ec 01       	movw	r28, r24
    1914:	c2 a4       	ldd	r12, Z+42	; 0x2a
    1916:	d3 a4       	ldd	r13, Z+43	; 0x2b
    1918:	e4 a4       	ldd	r14, Z+44	; 0x2c
    191a:	f5 a4       	ldd	r15, Z+45	; 0x2d
    191c:	5c 01       	movw	r10, r24
    191e:	fe e2       	ldi	r31, 0x2E	; 46
    1920:	af 0e       	add	r10, r31
    1922:	b1 1c       	adc	r11, r1
    1924:	01 e0       	ldi	r16, 0x01	; 1
    1926:	10 e0       	ldi	r17, 0x00	; 0
    1928:	a7 01       	movw	r20, r14
    192a:	96 01       	movw	r18, r12
    192c:	b5 01       	movw	r22, r10
    192e:	89 81       	ldd	r24, Y+1	; 0x01
    1930:	f7 d8       	rcall	.-3602   	; 0xb20 <disk_write>
    1932:	81 11       	cpse	r24, r1
    1934:	34 c0       	rjmp	.+104    	; 0x199e <sync_window+0xae>
    1936:	1c 82       	std	Y+4, r1	; 0x04
    1938:	8e 8d       	ldd	r24, Y+30	; 0x1e
    193a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    193c:	a8 a1       	ldd	r26, Y+32	; 0x20
    193e:	b9 a1       	ldd	r27, Y+33	; 0x21
    1940:	b7 01       	movw	r22, r14
    1942:	a6 01       	movw	r20, r12
    1944:	48 1b       	sub	r20, r24
    1946:	59 0b       	sbc	r21, r25
    1948:	6a 0b       	sbc	r22, r26
    194a:	7b 0b       	sbc	r23, r27
    194c:	8e 89       	ldd	r24, Y+22	; 0x16
    194e:	9f 89       	ldd	r25, Y+23	; 0x17
    1950:	a8 8d       	ldd	r26, Y+24	; 0x18
    1952:	b9 8d       	ldd	r27, Y+25	; 0x19
    1954:	48 17       	cp	r20, r24
    1956:	59 07       	cpc	r21, r25
    1958:	6a 07       	cpc	r22, r26
    195a:	7b 07       	cpc	r23, r27
    195c:	10 f5       	brcc	.+68     	; 0x19a2 <sync_window+0xb2>
    195e:	8b 80       	ldd	r8, Y+3	; 0x03
    1960:	91 2c       	mov	r9, r1
    1962:	82 e0       	ldi	r24, 0x02	; 2
    1964:	88 16       	cp	r8, r24
    1966:	91 04       	cpc	r9, r1
    1968:	f0 f0       	brcs	.+60     	; 0x19a6 <sync_window+0xb6>
    196a:	8e 89       	ldd	r24, Y+22	; 0x16
    196c:	9f 89       	ldd	r25, Y+23	; 0x17
    196e:	a8 8d       	ldd	r26, Y+24	; 0x18
    1970:	b9 8d       	ldd	r27, Y+25	; 0x19
    1972:	c8 0e       	add	r12, r24
    1974:	d9 1e       	adc	r13, r25
    1976:	ea 1e       	adc	r14, r26
    1978:	fb 1e       	adc	r15, r27
    197a:	01 e0       	ldi	r16, 0x01	; 1
    197c:	10 e0       	ldi	r17, 0x00	; 0
    197e:	a7 01       	movw	r20, r14
    1980:	96 01       	movw	r18, r12
    1982:	b5 01       	movw	r22, r10
    1984:	89 81       	ldd	r24, Y+1	; 0x01
    1986:	cc d8       	rcall	.-3688   	; 0xb20 <disk_write>
    1988:	e1 e0       	ldi	r30, 0x01	; 1
    198a:	8e 1a       	sub	r8, r30
    198c:	91 08       	sbc	r9, r1
    198e:	f1 e0       	ldi	r31, 0x01	; 1
    1990:	8f 16       	cp	r8, r31
    1992:	91 04       	cpc	r9, r1
    1994:	51 f7       	brne	.-44     	; 0x196a <sync_window+0x7a>
    1996:	80 e0       	ldi	r24, 0x00	; 0
    1998:	07 c0       	rjmp	.+14     	; 0x19a8 <sync_window+0xb8>
    199a:	80 e0       	ldi	r24, 0x00	; 0
    199c:	05 c0       	rjmp	.+10     	; 0x19a8 <sync_window+0xb8>
    199e:	81 e0       	ldi	r24, 0x01	; 1
    19a0:	03 c0       	rjmp	.+6      	; 0x19a8 <sync_window+0xb8>
    19a2:	80 e0       	ldi	r24, 0x00	; 0
    19a4:	01 c0       	rjmp	.+2      	; 0x19a8 <sync_window+0xb8>
    19a6:	80 e0       	ldi	r24, 0x00	; 0
    19a8:	df 91       	pop	r29
    19aa:	cf 91       	pop	r28
    19ac:	1f 91       	pop	r17
    19ae:	0f 91       	pop	r16
    19b0:	ff 90       	pop	r15
    19b2:	ef 90       	pop	r14
    19b4:	df 90       	pop	r13
    19b6:	cf 90       	pop	r12
    19b8:	bf 90       	pop	r11
    19ba:	af 90       	pop	r10
    19bc:	9f 90       	pop	r9
    19be:	8f 90       	pop	r8
    19c0:	08 95       	ret

000019c2 <move_window>:
    19c2:	8f 92       	push	r8
    19c4:	9f 92       	push	r9
    19c6:	af 92       	push	r10
    19c8:	bf 92       	push	r11
    19ca:	ff 92       	push	r15
    19cc:	0f 93       	push	r16
    19ce:	1f 93       	push	r17
    19d0:	cf 93       	push	r28
    19d2:	df 93       	push	r29
    19d4:	ec 01       	movw	r28, r24
    19d6:	4a 01       	movw	r8, r20
    19d8:	5b 01       	movw	r10, r22
    19da:	8a a5       	ldd	r24, Y+42	; 0x2a
    19dc:	9b a5       	ldd	r25, Y+43	; 0x2b
    19de:	ac a5       	ldd	r26, Y+44	; 0x2c
    19e0:	bd a5       	ldd	r27, Y+45	; 0x2d
    19e2:	84 17       	cp	r24, r20
    19e4:	95 07       	cpc	r25, r21
    19e6:	a6 07       	cpc	r26, r22
    19e8:	b7 07       	cpc	r27, r23
    19ea:	d9 f0       	breq	.+54     	; 0x1a22 <move_window+0x60>
    19ec:	ce 01       	movw	r24, r28
    19ee:	80 df       	rcall	.-256    	; 0x18f0 <sync_window>
    19f0:	f8 2e       	mov	r15, r24
    19f2:	81 11       	cpse	r24, r1
    19f4:	17 c0       	rjmp	.+46     	; 0x1a24 <move_window+0x62>
    19f6:	01 e0       	ldi	r16, 0x01	; 1
    19f8:	10 e0       	ldi	r17, 0x00	; 0
    19fa:	a5 01       	movw	r20, r10
    19fc:	94 01       	movw	r18, r8
    19fe:	be 01       	movw	r22, r28
    1a00:	62 5d       	subi	r22, 0xD2	; 210
    1a02:	7f 4f       	sbci	r23, 0xFF	; 255
    1a04:	89 81       	ldd	r24, Y+1	; 0x01
    1a06:	3a d8       	rcall	.-3980   	; 0xa7c <disk_read>
    1a08:	88 23       	and	r24, r24
    1a0a:	31 f0       	breq	.+12     	; 0x1a18 <move_window+0x56>
    1a0c:	ff 24       	eor	r15, r15
    1a0e:	f3 94       	inc	r15
    1a10:	88 24       	eor	r8, r8
    1a12:	8a 94       	dec	r8
    1a14:	98 2c       	mov	r9, r8
    1a16:	54 01       	movw	r10, r8
    1a18:	8a a6       	std	Y+42, r8	; 0x2a
    1a1a:	9b a6       	std	Y+43, r9	; 0x2b
    1a1c:	ac a6       	std	Y+44, r10	; 0x2c
    1a1e:	bd a6       	std	Y+45, r11	; 0x2d
    1a20:	01 c0       	rjmp	.+2      	; 0x1a24 <move_window+0x62>
    1a22:	f1 2c       	mov	r15, r1
    1a24:	8f 2d       	mov	r24, r15
    1a26:	df 91       	pop	r29
    1a28:	cf 91       	pop	r28
    1a2a:	1f 91       	pop	r17
    1a2c:	0f 91       	pop	r16
    1a2e:	ff 90       	pop	r15
    1a30:	bf 90       	pop	r11
    1a32:	af 90       	pop	r10
    1a34:	9f 90       	pop	r9
    1a36:	8f 90       	pop	r8
    1a38:	08 95       	ret

00001a3a <check_fs>:
    1a3a:	cf 93       	push	r28
    1a3c:	df 93       	push	r29
    1a3e:	ec 01       	movw	r28, r24
    1a40:	1c 82       	std	Y+4, r1	; 0x04
    1a42:	8f ef       	ldi	r24, 0xFF	; 255
    1a44:	9f ef       	ldi	r25, 0xFF	; 255
    1a46:	dc 01       	movw	r26, r24
    1a48:	8a a7       	std	Y+42, r24	; 0x2a
    1a4a:	9b a7       	std	Y+43, r25	; 0x2b
    1a4c:	ac a7       	std	Y+44, r26	; 0x2c
    1a4e:	bd a7       	std	Y+45, r27	; 0x2d
    1a50:	ce 01       	movw	r24, r28
    1a52:	b7 df       	rcall	.-146    	; 0x19c2 <move_window>
    1a54:	81 11       	cpse	r24, r1
    1a56:	51 c0       	rjmp	.+162    	; 0x1afa <check_fs+0xc0>
    1a58:	fe 01       	movw	r30, r28
    1a5a:	e3 5d       	subi	r30, 0xD3	; 211
    1a5c:	fd 4f       	sbci	r31, 0xFD	; 253
    1a5e:	80 81       	ld	r24, Z
    1a60:	90 e0       	ldi	r25, 0x00	; 0
    1a62:	98 2f       	mov	r25, r24
    1a64:	88 27       	eor	r24, r24
    1a66:	31 97       	sbiw	r30, 0x01	; 1
    1a68:	20 81       	ld	r18, Z
    1a6a:	82 2b       	or	r24, r18
    1a6c:	85 35       	cpi	r24, 0x55	; 85
    1a6e:	9a 4a       	sbci	r25, 0xAA	; 170
    1a70:	09 f0       	breq	.+2      	; 0x1a74 <check_fs+0x3a>
    1a72:	45 c0       	rjmp	.+138    	; 0x1afe <check_fs+0xc4>
    1a74:	e5 5c       	subi	r30, 0xC5	; 197
    1a76:	f1 40       	sbci	r31, 0x01	; 1
    1a78:	20 81       	ld	r18, Z
    1a7a:	31 97       	sbiw	r30, 0x01	; 1
    1a7c:	80 81       	ld	r24, Z
    1a7e:	90 e0       	ldi	r25, 0x00	; 0
    1a80:	a0 e0       	ldi	r26, 0x00	; 0
    1a82:	b0 e0       	ldi	r27, 0x00	; 0
    1a84:	dc 01       	movw	r26, r24
    1a86:	99 27       	eor	r25, r25
    1a88:	88 27       	eor	r24, r24
    1a8a:	b2 2b       	or	r27, r18
    1a8c:	32 97       	sbiw	r30, 0x02	; 2
    1a8e:	20 81       	ld	r18, Z
    1a90:	82 2b       	or	r24, r18
    1a92:	31 96       	adiw	r30, 0x01	; 1
    1a94:	40 81       	ld	r20, Z
    1a96:	50 e0       	ldi	r21, 0x00	; 0
    1a98:	54 2f       	mov	r21, r20
    1a9a:	44 27       	eor	r20, r20
    1a9c:	60 e0       	ldi	r22, 0x00	; 0
    1a9e:	70 e0       	ldi	r23, 0x00	; 0
    1aa0:	84 2b       	or	r24, r20
    1aa2:	95 2b       	or	r25, r21
    1aa4:	a6 2b       	or	r26, r22
    1aa6:	b7 2b       	or	r27, r23
    1aa8:	bb 27       	eor	r27, r27
    1aaa:	86 34       	cpi	r24, 0x46	; 70
    1aac:	91 44       	sbci	r25, 0x41	; 65
    1aae:	a4 45       	sbci	r26, 0x54	; 84
    1ab0:	b1 05       	cpc	r27, r1
    1ab2:	39 f1       	breq	.+78     	; 0x1b02 <check_fs+0xc8>
    1ab4:	7e 96       	adiw	r30, 0x1e	; 30
    1ab6:	80 81       	ld	r24, Z
    1ab8:	31 97       	sbiw	r30, 0x01	; 1
    1aba:	40 81       	ld	r20, Z
    1abc:	50 e0       	ldi	r21, 0x00	; 0
    1abe:	60 e0       	ldi	r22, 0x00	; 0
    1ac0:	70 e0       	ldi	r23, 0x00	; 0
    1ac2:	ba 01       	movw	r22, r20
    1ac4:	55 27       	eor	r21, r21
    1ac6:	44 27       	eor	r20, r20
    1ac8:	78 2b       	or	r23, r24
    1aca:	32 97       	sbiw	r30, 0x02	; 2
    1acc:	80 81       	ld	r24, Z
    1ace:	48 2b       	or	r20, r24
    1ad0:	cf 57       	subi	r28, 0x7F	; 127
    1ad2:	df 4f       	sbci	r29, 0xFF	; 255
    1ad4:	88 81       	ld	r24, Y
    1ad6:	90 e0       	ldi	r25, 0x00	; 0
    1ad8:	98 2f       	mov	r25, r24
    1ada:	88 27       	eor	r24, r24
    1adc:	a0 e0       	ldi	r26, 0x00	; 0
    1ade:	b0 e0       	ldi	r27, 0x00	; 0
    1ae0:	48 2b       	or	r20, r24
    1ae2:	59 2b       	or	r21, r25
    1ae4:	6a 2b       	or	r22, r26
    1ae6:	7b 2b       	or	r23, r27
    1ae8:	77 27       	eor	r23, r23
    1aea:	81 e0       	ldi	r24, 0x01	; 1
    1aec:	46 34       	cpi	r20, 0x46	; 70
    1aee:	51 44       	sbci	r21, 0x41	; 65
    1af0:	64 45       	sbci	r22, 0x54	; 84
    1af2:	71 05       	cpc	r23, r1
    1af4:	39 f4       	brne	.+14     	; 0x1b04 <check_fs+0xca>
    1af6:	80 e0       	ldi	r24, 0x00	; 0
    1af8:	05 c0       	rjmp	.+10     	; 0x1b04 <check_fs+0xca>
    1afa:	83 e0       	ldi	r24, 0x03	; 3
    1afc:	03 c0       	rjmp	.+6      	; 0x1b04 <check_fs+0xca>
    1afe:	82 e0       	ldi	r24, 0x02	; 2
    1b00:	01 c0       	rjmp	.+2      	; 0x1b04 <check_fs+0xca>
    1b02:	80 e0       	ldi	r24, 0x00	; 0
    1b04:	df 91       	pop	r29
    1b06:	cf 91       	pop	r28
    1b08:	08 95       	ret

00001b0a <validate>:
    1b0a:	00 97       	sbiw	r24, 0x00	; 0
    1b0c:	c9 f0       	breq	.+50     	; 0x1b40 <validate+0x36>
    1b0e:	dc 01       	movw	r26, r24
    1b10:	ed 91       	ld	r30, X+
    1b12:	fc 91       	ld	r31, X
    1b14:	11 97       	sbiw	r26, 0x01	; 1
    1b16:	30 97       	sbiw	r30, 0x00	; 0
    1b18:	a9 f0       	breq	.+42     	; 0x1b44 <validate+0x3a>
    1b1a:	20 81       	ld	r18, Z
    1b1c:	22 23       	and	r18, r18
    1b1e:	a1 f0       	breq	.+40     	; 0x1b48 <validate+0x3e>
    1b20:	26 81       	ldd	r18, Z+6	; 0x06
    1b22:	37 81       	ldd	r19, Z+7	; 0x07
    1b24:	12 96       	adiw	r26, 0x02	; 2
    1b26:	8d 91       	ld	r24, X+
    1b28:	9c 91       	ld	r25, X
    1b2a:	13 97       	sbiw	r26, 0x03	; 3
    1b2c:	28 17       	cp	r18, r24
    1b2e:	39 07       	cpc	r19, r25
    1b30:	69 f4       	brne	.+26     	; 0x1b4c <validate+0x42>
    1b32:	81 81       	ldd	r24, Z+1	; 0x01
    1b34:	0e 94 37 05 	call	0xa6e	; 0xa6e <disk_status>
    1b38:	80 ff       	sbrs	r24, 0
    1b3a:	0a c0       	rjmp	.+20     	; 0x1b50 <validate+0x46>
    1b3c:	89 e0       	ldi	r24, 0x09	; 9
    1b3e:	08 95       	ret
    1b40:	89 e0       	ldi	r24, 0x09	; 9
    1b42:	08 95       	ret
    1b44:	89 e0       	ldi	r24, 0x09	; 9
    1b46:	08 95       	ret
    1b48:	89 e0       	ldi	r24, 0x09	; 9
    1b4a:	08 95       	ret
    1b4c:	89 e0       	ldi	r24, 0x09	; 9
    1b4e:	08 95       	ret
    1b50:	80 e0       	ldi	r24, 0x00	; 0
    1b52:	08 95       	ret

00001b54 <find_volume>:
    1b54:	2f 92       	push	r2
    1b56:	3f 92       	push	r3
    1b58:	4f 92       	push	r4
    1b5a:	5f 92       	push	r5
    1b5c:	6f 92       	push	r6
    1b5e:	7f 92       	push	r7
    1b60:	8f 92       	push	r8
    1b62:	9f 92       	push	r9
    1b64:	af 92       	push	r10
    1b66:	bf 92       	push	r11
    1b68:	cf 92       	push	r12
    1b6a:	df 92       	push	r13
    1b6c:	ef 92       	push	r14
    1b6e:	ff 92       	push	r15
    1b70:	0f 93       	push	r16
    1b72:	1f 93       	push	r17
    1b74:	cf 93       	push	r28
    1b76:	df 93       	push	r29
    1b78:	cd b7       	in	r28, 0x3d	; 61
    1b7a:	de b7       	in	r29, 0x3e	; 62
    1b7c:	6d 97       	sbiw	r28, 0x1d	; 29
    1b7e:	0f b6       	in	r0, 0x3f	; 63
    1b80:	f8 94       	cli
    1b82:	de bf       	out	0x3e, r29	; 62
    1b84:	0f be       	out	0x3f, r0	; 63
    1b86:	cd bf       	out	0x3d, r28	; 61
    1b88:	6c 01       	movw	r12, r24
    1b8a:	cb 01       	movw	r24, r22
    1b8c:	b4 2e       	mov	r11, r20
    1b8e:	d6 01       	movw	r26, r12
    1b90:	1d 92       	st	X+, r1
    1b92:	1c 92       	st	X, r1
    1b94:	76 de       	rcall	.-788    	; 0x1882 <get_ldnumber>
    1b96:	7c 01       	movw	r14, r24
    1b98:	99 23       	and	r25, r25
    1b9a:	0c f4       	brge	.+2      	; 0x1b9e <find_volume+0x4a>
    1b9c:	d7 c2       	rjmp	.+1454   	; 0x214c <find_volume+0x5f8>
    1b9e:	fc 01       	movw	r30, r24
    1ba0:	ee 0f       	add	r30, r30
    1ba2:	ff 1f       	adc	r31, r31
    1ba4:	e1 56       	subi	r30, 0x61	; 97
    1ba6:	fc 4f       	sbci	r31, 0xFC	; 252
    1ba8:	00 81       	ld	r16, Z
    1baa:	11 81       	ldd	r17, Z+1	; 0x01
    1bac:	01 15       	cp	r16, r1
    1bae:	11 05       	cpc	r17, r1
    1bb0:	09 f4       	brne	.+2      	; 0x1bb4 <find_volume+0x60>
    1bb2:	ce c2       	rjmp	.+1436   	; 0x2150 <find_volume+0x5fc>
    1bb4:	f6 01       	movw	r30, r12
    1bb6:	11 83       	std	Z+1, r17	; 0x01
    1bb8:	00 83       	st	Z, r16
    1bba:	d8 01       	movw	r26, r16
    1bbc:	8c 91       	ld	r24, X
    1bbe:	88 23       	and	r24, r24
    1bc0:	69 f0       	breq	.+26     	; 0x1bdc <find_volume+0x88>
    1bc2:	11 96       	adiw	r26, 0x01	; 1
    1bc4:	8c 91       	ld	r24, X
    1bc6:	0e 94 37 05 	call	0xa6e	; 0xa6e <disk_status>
    1bca:	80 fd       	sbrc	r24, 0
    1bcc:	07 c0       	rjmp	.+14     	; 0x1bdc <find_volume+0x88>
    1bce:	bb 20       	and	r11, r11
    1bd0:	09 f4       	brne	.+2      	; 0x1bd4 <find_volume+0x80>
    1bd2:	c0 c2       	rjmp	.+1408   	; 0x2154 <find_volume+0x600>
    1bd4:	82 ff       	sbrs	r24, 2
    1bd6:	c0 c2       	rjmp	.+1408   	; 0x2158 <find_volume+0x604>
    1bd8:	8a e0       	ldi	r24, 0x0A	; 10
    1bda:	65 c3       	rjmp	.+1738   	; 0x22a6 <find_volume+0x752>
    1bdc:	f8 01       	movw	r30, r16
    1bde:	10 82       	st	Z, r1
    1be0:	e1 82       	std	Z+1, r14	; 0x01
    1be2:	8e 2d       	mov	r24, r14
    1be4:	0e 94 76 04 	call	0x8ec	; 0x8ec <disk_initialize>
    1be8:	80 fd       	sbrc	r24, 0
    1bea:	b8 c2       	rjmp	.+1392   	; 0x215c <find_volume+0x608>
    1bec:	bb 20       	and	r11, r11
    1bee:	09 f4       	brne	.+2      	; 0x1bf2 <find_volume+0x9e>
    1bf0:	d5 c2       	rjmp	.+1450   	; 0x219c <find_volume+0x648>
    1bf2:	82 fd       	sbrc	r24, 2
    1bf4:	b5 c2       	rjmp	.+1386   	; 0x2160 <find_volume+0x60c>
    1bf6:	d2 c2       	rjmp	.+1444   	; 0x219c <find_volume+0x648>
    1bf8:	df 01       	movw	r26, r30
    1bfa:	17 97       	sbiw	r26, 0x07	; 7
    1bfc:	8c 91       	ld	r24, X
    1bfe:	88 23       	and	r24, r24
    1c00:	b9 f0       	breq	.+46     	; 0x1c30 <find_volume+0xdc>
    1c02:	14 96       	adiw	r26, 0x04	; 4
    1c04:	cc 90       	ld	r12, X
    1c06:	80 81       	ld	r24, Z
    1c08:	d1 2c       	mov	r13, r1
    1c0a:	e1 2c       	mov	r14, r1
    1c0c:	f1 2c       	mov	r15, r1
    1c0e:	f8 2a       	or	r15, r24
    1c10:	12 96       	adiw	r26, 0x02	; 2
    1c12:	8c 91       	ld	r24, X
    1c14:	e8 2a       	or	r14, r24
    1c16:	11 97       	sbiw	r26, 0x01	; 1
    1c18:	ac 91       	ld	r26, X
    1c1a:	b0 e0       	ldi	r27, 0x00	; 0
    1c1c:	ba 2f       	mov	r27, r26
    1c1e:	aa 27       	eor	r26, r26
    1c20:	cd 01       	movw	r24, r26
    1c22:	a0 e0       	ldi	r26, 0x00	; 0
    1c24:	b0 e0       	ldi	r27, 0x00	; 0
    1c26:	c8 2a       	or	r12, r24
    1c28:	d9 2a       	or	r13, r25
    1c2a:	ea 2a       	or	r14, r26
    1c2c:	fb 2a       	or	r15, r27
    1c2e:	04 c0       	rjmp	.+8      	; 0x1c38 <find_volume+0xe4>
    1c30:	c8 2c       	mov	r12, r8
    1c32:	d9 2c       	mov	r13, r9
    1c34:	e7 2e       	mov	r14, r23
    1c36:	f6 2e       	mov	r15, r22
    1c38:	d9 01       	movw	r26, r18
    1c3a:	cd 92       	st	X+, r12
    1c3c:	dd 92       	st	X+, r13
    1c3e:	ed 92       	st	X+, r14
    1c40:	fd 92       	st	X+, r15
    1c42:	9d 01       	movw	r18, r26
    1c44:	70 96       	adiw	r30, 0x10	; 16
    1c46:	e4 17       	cp	r30, r20
    1c48:	f5 07       	cpc	r31, r21
    1c4a:	b1 f6       	brne	.-84     	; 0x1bf8 <find_volume+0xa4>
    1c4c:	4e 01       	movw	r8, r28
    1c4e:	b1 e1       	ldi	r27, 0x11	; 17
    1c50:	8b 0e       	add	r8, r27
    1c52:	91 1c       	adc	r9, r1
    1c54:	68 94       	set
    1c56:	77 24       	eor	r7, r7
    1c58:	71 f8       	bld	r7, 1
    1c5a:	f5 01       	movw	r30, r10
    1c5c:	c1 90       	ld	r12, Z+
    1c5e:	d1 90       	ld	r13, Z+
    1c60:	e1 90       	ld	r14, Z+
    1c62:	f1 90       	ld	r15, Z+
    1c64:	5f 01       	movw	r10, r30
    1c66:	c1 14       	cp	r12, r1
    1c68:	d1 04       	cpc	r13, r1
    1c6a:	e1 04       	cpc	r14, r1
    1c6c:	f1 04       	cpc	r15, r1
    1c6e:	39 f0       	breq	.+14     	; 0x1c7e <find_volume+0x12a>
    1c70:	b7 01       	movw	r22, r14
    1c72:	a6 01       	movw	r20, r12
    1c74:	c8 01       	movw	r24, r16
    1c76:	e1 de       	rcall	.-574    	; 0x1a3a <check_fs>
    1c78:	81 11       	cpse	r24, r1
    1c7a:	02 c0       	rjmp	.+4      	; 0x1c80 <find_volume+0x12c>
    1c7c:	0d c0       	rjmp	.+26     	; 0x1c98 <find_volume+0x144>
    1c7e:	87 2d       	mov	r24, r7
    1c80:	a8 14       	cp	r10, r8
    1c82:	b9 04       	cpc	r11, r9
    1c84:	51 f7       	brne	.-44     	; 0x1c5a <find_volume+0x106>
    1c86:	03 c0       	rjmp	.+6      	; 0x1c8e <find_volume+0x13a>
    1c88:	c1 2c       	mov	r12, r1
    1c8a:	d1 2c       	mov	r13, r1
    1c8c:	76 01       	movw	r14, r12
    1c8e:	83 30       	cpi	r24, 0x03	; 3
    1c90:	09 f4       	brne	.+2      	; 0x1c94 <find_volume+0x140>
    1c92:	68 c2       	rjmp	.+1232   	; 0x2164 <find_volume+0x610>
    1c94:	81 11       	cpse	r24, r1
    1c96:	68 c2       	rjmp	.+1232   	; 0x2168 <find_volume+0x614>
    1c98:	d8 01       	movw	r26, r16
    1c9a:	da 96       	adiw	r26, 0x3a	; 58
    1c9c:	8c 91       	ld	r24, X
    1c9e:	da 97       	sbiw	r26, 0x3a	; 58
    1ca0:	90 e0       	ldi	r25, 0x00	; 0
    1ca2:	98 2f       	mov	r25, r24
    1ca4:	88 27       	eor	r24, r24
    1ca6:	d9 96       	adiw	r26, 0x39	; 57
    1ca8:	2c 91       	ld	r18, X
    1caa:	82 2b       	or	r24, r18
    1cac:	81 15       	cp	r24, r1
    1cae:	92 40       	sbci	r25, 0x02	; 2
    1cb0:	09 f0       	breq	.+2      	; 0x1cb4 <find_volume+0x160>
    1cb2:	5c c2       	rjmp	.+1208   	; 0x216c <find_volume+0x618>
    1cb4:	f8 01       	movw	r30, r16
    1cb6:	eb 5b       	subi	r30, 0xBB	; 187
    1cb8:	ff 4f       	sbci	r31, 0xFF	; 255
    1cba:	80 80       	ld	r8, Z
    1cbc:	91 2c       	mov	r9, r1
    1cbe:	98 2c       	mov	r9, r8
    1cc0:	88 24       	eor	r8, r8
    1cc2:	31 97       	sbiw	r30, 0x01	; 1
    1cc4:	80 81       	ld	r24, Z
    1cc6:	88 2a       	or	r8, r24
    1cc8:	a1 2c       	mov	r10, r1
    1cca:	b1 2c       	mov	r11, r1
    1ccc:	81 14       	cp	r8, r1
    1cce:	91 04       	cpc	r9, r1
    1cd0:	a1 04       	cpc	r10, r1
    1cd2:	b1 04       	cpc	r11, r1
    1cd4:	e9 f4       	brne	.+58     	; 0x1d10 <find_volume+0x1bc>
    1cd6:	71 96       	adiw	r30, 0x11	; 17
    1cd8:	80 81       	ld	r24, Z
    1cda:	31 97       	sbiw	r30, 0x01	; 1
    1cdc:	80 80       	ld	r8, Z
    1cde:	91 2c       	mov	r9, r1
    1ce0:	a1 2c       	mov	r10, r1
    1ce2:	b1 2c       	mov	r11, r1
    1ce4:	54 01       	movw	r10, r8
    1ce6:	99 24       	eor	r9, r9
    1ce8:	88 24       	eor	r8, r8
    1cea:	b8 2a       	or	r11, r24
    1cec:	32 97       	sbiw	r30, 0x02	; 2
    1cee:	80 81       	ld	r24, Z
    1cf0:	a5 01       	movw	r20, r10
    1cf2:	94 01       	movw	r18, r8
    1cf4:	28 2b       	or	r18, r24
    1cf6:	da 01       	movw	r26, r20
    1cf8:	c9 01       	movw	r24, r18
    1cfa:	31 96       	adiw	r30, 0x01	; 1
    1cfc:	80 80       	ld	r8, Z
    1cfe:	91 2c       	mov	r9, r1
    1d00:	98 2c       	mov	r9, r8
    1d02:	88 24       	eor	r8, r8
    1d04:	a1 2c       	mov	r10, r1
    1d06:	b1 2c       	mov	r11, r1
    1d08:	88 2a       	or	r8, r24
    1d0a:	99 2a       	or	r9, r25
    1d0c:	aa 2a       	or	r10, r26
    1d0e:	bb 2a       	or	r11, r27
    1d10:	d8 01       	movw	r26, r16
    1d12:	56 96       	adiw	r26, 0x16	; 22
    1d14:	8d 92       	st	X+, r8
    1d16:	9d 92       	st	X+, r9
    1d18:	ad 92       	st	X+, r10
    1d1a:	bc 92       	st	X, r11
    1d1c:	59 97       	sbiw	r26, 0x19	; 25
    1d1e:	de 96       	adiw	r26, 0x3e	; 62
    1d20:	ac 91       	ld	r26, X
    1d22:	f8 01       	movw	r30, r16
    1d24:	a3 83       	std	Z+3, r26	; 0x03
    1d26:	8f ef       	ldi	r24, 0xFF	; 255
    1d28:	8a 0f       	add	r24, r26
    1d2a:	82 30       	cpi	r24, 0x02	; 2
    1d2c:	08 f0       	brcs	.+2      	; 0x1d30 <find_volume+0x1dc>
    1d2e:	20 c2       	rjmp	.+1088   	; 0x2170 <find_volume+0x61c>
    1d30:	f3 ad       	ldd	r31, Z+59	; 0x3b
    1d32:	f9 8b       	std	Y+17, r31	; 0x11
    1d34:	2f 2f       	mov	r18, r31
    1d36:	f8 01       	movw	r30, r16
    1d38:	22 83       	std	Z+2, r18	; 0x02
    1d3a:	22 23       	and	r18, r18
    1d3c:	09 f4       	brne	.+2      	; 0x1d40 <find_volume+0x1ec>
    1d3e:	1a c2       	rjmp	.+1076   	; 0x2174 <find_volume+0x620>
    1d40:	82 2f       	mov	r24, r18
    1d42:	90 e0       	ldi	r25, 0x00	; 0
    1d44:	9c 01       	movw	r18, r24
    1d46:	21 50       	subi	r18, 0x01	; 1
    1d48:	31 09       	sbc	r19, r1
    1d4a:	82 23       	and	r24, r18
    1d4c:	93 23       	and	r25, r19
    1d4e:	89 2b       	or	r24, r25
    1d50:	09 f0       	breq	.+2      	; 0x1d54 <find_volume+0x200>
    1d52:	12 c2       	rjmp	.+1060   	; 0x2178 <find_volume+0x624>
    1d54:	e0 5c       	subi	r30, 0xC0	; 192
    1d56:	ff 4f       	sbci	r31, 0xFF	; 255
    1d58:	80 81       	ld	r24, Z
    1d5a:	90 e0       	ldi	r25, 0x00	; 0
    1d5c:	98 2f       	mov	r25, r24
    1d5e:	88 27       	eor	r24, r24
    1d60:	f8 01       	movw	r30, r16
    1d62:	27 ad       	ldd	r18, Z+63	; 0x3f
    1d64:	1c 01       	movw	r2, r24
    1d66:	22 2a       	or	r2, r18
    1d68:	31 86       	std	Z+9, r3	; 0x09
    1d6a:	20 86       	std	Z+8, r2	; 0x08
    1d6c:	c1 01       	movw	r24, r2
    1d6e:	8f 70       	andi	r24, 0x0F	; 15
    1d70:	99 27       	eor	r25, r25
    1d72:	89 2b       	or	r24, r25
    1d74:	09 f0       	breq	.+2      	; 0x1d78 <find_volume+0x224>
    1d76:	02 c2       	rjmp	.+1028   	; 0x217c <find_volume+0x628>
    1d78:	ee 5b       	subi	r30, 0xBE	; 190
    1d7a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d7c:	40 80       	ld	r4, Z
    1d7e:	51 2c       	mov	r5, r1
    1d80:	54 2c       	mov	r5, r4
    1d82:	44 24       	eor	r4, r4
    1d84:	31 97       	sbiw	r30, 0x01	; 1
    1d86:	80 81       	ld	r24, Z
    1d88:	48 2a       	or	r4, r24
    1d8a:	61 2c       	mov	r6, r1
    1d8c:	71 2c       	mov	r7, r1
    1d8e:	41 14       	cp	r4, r1
    1d90:	51 04       	cpc	r5, r1
    1d92:	61 04       	cpc	r6, r1
    1d94:	71 04       	cpc	r7, r1
    1d96:	d1 f4       	brne	.+52     	; 0x1dcc <find_volume+0x278>
    1d98:	70 96       	adiw	r30, 0x10	; 16
    1d9a:	80 81       	ld	r24, Z
    1d9c:	31 97       	sbiw	r30, 0x01	; 1
    1d9e:	40 80       	ld	r4, Z
    1da0:	51 2c       	mov	r5, r1
    1da2:	61 2c       	mov	r6, r1
    1da4:	71 2c       	mov	r7, r1
    1da6:	32 01       	movw	r6, r4
    1da8:	55 24       	eor	r5, r5
    1daa:	44 24       	eor	r4, r4
    1dac:	78 2a       	or	r7, r24
    1dae:	32 97       	sbiw	r30, 0x02	; 2
    1db0:	80 81       	ld	r24, Z
    1db2:	48 2a       	or	r4, r24
    1db4:	31 96       	adiw	r30, 0x01	; 1
    1db6:	80 81       	ld	r24, Z
    1db8:	90 e0       	ldi	r25, 0x00	; 0
    1dba:	98 2f       	mov	r25, r24
    1dbc:	88 27       	eor	r24, r24
    1dbe:	ac 01       	movw	r20, r24
    1dc0:	60 e0       	ldi	r22, 0x00	; 0
    1dc2:	70 e0       	ldi	r23, 0x00	; 0
    1dc4:	44 2a       	or	r4, r20
    1dc6:	55 2a       	or	r5, r21
    1dc8:	66 2a       	or	r6, r22
    1dca:	77 2a       	or	r7, r23
    1dcc:	f8 01       	movw	r30, r16
    1dce:	85 ad       	ldd	r24, Z+61	; 0x3d
    1dd0:	e8 2f       	mov	r30, r24
    1dd2:	f0 e0       	ldi	r31, 0x00	; 0
    1dd4:	3e 2f       	mov	r19, r30
    1dd6:	22 27       	eor	r18, r18
    1dd8:	f8 01       	movw	r30, r16
    1dda:	84 ad       	ldd	r24, Z+60	; 0x3c
    1ddc:	f9 01       	movw	r30, r18
    1dde:	e8 2b       	or	r30, r24
    1de0:	30 97       	sbiw	r30, 0x00	; 0
    1de2:	09 f4       	brne	.+2      	; 0x1de6 <find_volume+0x292>
    1de4:	cd c1       	rjmp	.+922    	; 0x2180 <find_volume+0x62c>
    1de6:	b0 e0       	ldi	r27, 0x00	; 0
    1de8:	a5 01       	movw	r20, r10
    1dea:	94 01       	movw	r18, r8
    1dec:	0e 94 2a 42 	call	0x8454	; 0x8454 <__muluhisi3>
    1df0:	6a 8f       	std	Y+26, r22	; 0x1a
    1df2:	7b 8f       	std	Y+27, r23	; 0x1b
    1df4:	8c 8f       	std	Y+28, r24	; 0x1c
    1df6:	9d 8f       	std	Y+29, r25	; 0x1d
    1df8:	9f 01       	movw	r18, r30
    1dfa:	40 e0       	ldi	r20, 0x00	; 0
    1dfc:	50 e0       	ldi	r21, 0x00	; 0
    1dfe:	2e 8b       	std	Y+22, r18	; 0x16
    1e00:	3f 8b       	std	Y+23, r19	; 0x17
    1e02:	48 8f       	std	Y+24, r20	; 0x18
    1e04:	59 8f       	std	Y+25, r21	; 0x19
    1e06:	c1 01       	movw	r24, r2
    1e08:	92 95       	swap	r25
    1e0a:	82 95       	swap	r24
    1e0c:	8f 70       	andi	r24, 0x0F	; 15
    1e0e:	89 27       	eor	r24, r25
    1e10:	9f 70       	andi	r25, 0x0F	; 15
    1e12:	89 27       	eor	r24, r25
    1e14:	28 0f       	add	r18, r24
    1e16:	39 1f       	adc	r19, r25
    1e18:	41 1d       	adc	r20, r1
    1e1a:	51 1d       	adc	r21, r1
    1e1c:	da 01       	movw	r26, r20
    1e1e:	c9 01       	movw	r24, r18
    1e20:	2a 8d       	ldd	r18, Y+26	; 0x1a
    1e22:	3b 8d       	ldd	r19, Y+27	; 0x1b
    1e24:	4c 8d       	ldd	r20, Y+28	; 0x1c
    1e26:	5d 8d       	ldd	r21, Y+29	; 0x1d
    1e28:	28 0f       	add	r18, r24
    1e2a:	39 1f       	adc	r19, r25
    1e2c:	4a 1f       	adc	r20, r26
    1e2e:	5b 1f       	adc	r21, r27
    1e30:	2a 8b       	std	Y+18, r18	; 0x12
    1e32:	3b 8b       	std	Y+19, r19	; 0x13
    1e34:	4c 8b       	std	Y+20, r20	; 0x14
    1e36:	5d 8b       	std	Y+21, r21	; 0x15
    1e38:	42 16       	cp	r4, r18
    1e3a:	53 06       	cpc	r5, r19
    1e3c:	64 06       	cpc	r6, r20
    1e3e:	75 06       	cpc	r7, r21
    1e40:	08 f4       	brcc	.+2      	; 0x1e44 <find_volume+0x2f0>
    1e42:	a0 c1       	rjmp	.+832    	; 0x2184 <find_volume+0x630>
    1e44:	c3 01       	movw	r24, r6
    1e46:	b2 01       	movw	r22, r4
    1e48:	62 1b       	sub	r22, r18
    1e4a:	73 0b       	sbc	r23, r19
    1e4c:	84 0b       	sbc	r24, r20
    1e4e:	95 0b       	sbc	r25, r21
    1e50:	e9 89       	ldd	r30, Y+17	; 0x11
    1e52:	2e 2f       	mov	r18, r30
    1e54:	30 e0       	ldi	r19, 0x00	; 0
    1e56:	40 e0       	ldi	r20, 0x00	; 0
    1e58:	50 e0       	ldi	r21, 0x00	; 0
    1e5a:	0e 94 f0 41 	call	0x83e0	; 0x83e0 <__udivmodsi4>
    1e5e:	da 01       	movw	r26, r20
    1e60:	c9 01       	movw	r24, r18
    1e62:	21 15       	cp	r18, r1
    1e64:	31 05       	cpc	r19, r1
    1e66:	41 05       	cpc	r20, r1
    1e68:	51 05       	cpc	r21, r1
    1e6a:	09 f4       	brne	.+2      	; 0x1e6e <find_volume+0x31a>
    1e6c:	8d c1       	rjmp	.+794    	; 0x2188 <find_volume+0x634>
    1e6e:	26 3f       	cpi	r18, 0xF6	; 246
    1e70:	ff e0       	ldi	r31, 0x0F	; 15
    1e72:	3f 07       	cpc	r19, r31
    1e74:	41 05       	cpc	r20, r1
    1e76:	51 05       	cpc	r21, r1
    1e78:	18 f0       	brcs	.+6      	; 0x1e80 <find_volume+0x32c>
    1e7a:	e2 e0       	ldi	r30, 0x02	; 2
    1e7c:	e9 8b       	std	Y+17, r30	; 0x11
    1e7e:	02 c0       	rjmp	.+4      	; 0x1e84 <find_volume+0x330>
    1e80:	f1 e0       	ldi	r31, 0x01	; 1
    1e82:	f9 8b       	std	Y+17, r31	; 0x11
    1e84:	86 3f       	cpi	r24, 0xF6	; 246
    1e86:	9f 4f       	sbci	r25, 0xFF	; 255
    1e88:	a1 05       	cpc	r26, r1
    1e8a:	b1 05       	cpc	r27, r1
    1e8c:	08 f0       	brcs	.+2      	; 0x1e90 <find_volume+0x33c>
    1e8e:	9d c1       	rjmp	.+826    	; 0x21ca <find_volume+0x676>
    1e90:	29 01       	movw	r4, r18
    1e92:	3a 01       	movw	r6, r20
    1e94:	82 e0       	ldi	r24, 0x02	; 2
    1e96:	48 0e       	add	r4, r24
    1e98:	51 1c       	adc	r5, r1
    1e9a:	61 1c       	adc	r6, r1
    1e9c:	71 1c       	adc	r7, r1
    1e9e:	d8 01       	movw	r26, r16
    1ea0:	52 96       	adiw	r26, 0x12	; 18
    1ea2:	4d 92       	st	X+, r4
    1ea4:	5d 92       	st	X+, r5
    1ea6:	6d 92       	st	X+, r6
    1ea8:	7c 92       	st	X, r7
    1eaa:	55 97       	sbiw	r26, 0x15	; 21
    1eac:	f8 01       	movw	r30, r16
    1eae:	c2 8e       	std	Z+26, r12	; 0x1a
    1eb0:	d3 8e       	std	Z+27, r13	; 0x1b
    1eb2:	e4 8e       	std	Z+28, r14	; 0x1c
    1eb4:	f5 8e       	std	Z+29, r15	; 0x1d
    1eb6:	8e 89       	ldd	r24, Y+22	; 0x16
    1eb8:	9f 89       	ldd	r25, Y+23	; 0x17
    1eba:	a8 8d       	ldd	r26, Y+24	; 0x18
    1ebc:	b9 8d       	ldd	r27, Y+25	; 0x19
    1ebe:	8c 0d       	add	r24, r12
    1ec0:	9d 1d       	adc	r25, r13
    1ec2:	ae 1d       	adc	r26, r14
    1ec4:	bf 1d       	adc	r27, r15
    1ec6:	86 8f       	std	Z+30, r24	; 0x1e
    1ec8:	97 8f       	std	Z+31, r25	; 0x1f
    1eca:	a0 a3       	std	Z+32, r26	; 0x20
    1ecc:	b1 a3       	std	Z+33, r27	; 0x21
    1ece:	4a 89       	ldd	r20, Y+18	; 0x12
    1ed0:	5b 89       	ldd	r21, Y+19	; 0x13
    1ed2:	6c 89       	ldd	r22, Y+20	; 0x14
    1ed4:	7d 89       	ldd	r23, Y+21	; 0x15
    1ed6:	4c 0d       	add	r20, r12
    1ed8:	5d 1d       	adc	r21, r13
    1eda:	6e 1d       	adc	r22, r14
    1edc:	7f 1d       	adc	r23, r15
    1ede:	46 a3       	std	Z+38, r20	; 0x26
    1ee0:	57 a3       	std	Z+39, r21	; 0x27
    1ee2:	60 a7       	std	Z+40, r22	; 0x28
    1ee4:	71 a7       	std	Z+41, r23	; 0x29
    1ee6:	f9 89       	ldd	r31, Y+17	; 0x11
    1ee8:	f3 30       	cpi	r31, 0x03	; 3
    1eea:	09 f0       	breq	.+2      	; 0x1eee <find_volume+0x39a>
    1eec:	44 c0       	rjmp	.+136    	; 0x1f76 <find_volume+0x422>
    1eee:	23 28       	or	r2, r3
    1ef0:	09 f0       	breq	.+2      	; 0x1ef4 <find_volume+0x3a0>
    1ef2:	4c c1       	rjmp	.+664    	; 0x218c <find_volume+0x638>
    1ef4:	f8 01       	movw	r30, r16
    1ef6:	e3 5a       	subi	r30, 0xA3	; 163
    1ef8:	ff 4f       	sbci	r31, 0xFF	; 255
    1efa:	20 81       	ld	r18, Z
    1efc:	31 97       	sbiw	r30, 0x01	; 1
    1efe:	80 81       	ld	r24, Z
    1f00:	90 e0       	ldi	r25, 0x00	; 0
    1f02:	a0 e0       	ldi	r26, 0x00	; 0
    1f04:	b0 e0       	ldi	r27, 0x00	; 0
    1f06:	dc 01       	movw	r26, r24
    1f08:	99 27       	eor	r25, r25
    1f0a:	88 27       	eor	r24, r24
    1f0c:	b2 2b       	or	r27, r18
    1f0e:	32 97       	sbiw	r30, 0x02	; 2
    1f10:	20 81       	ld	r18, Z
    1f12:	ac 01       	movw	r20, r24
    1f14:	bd 01       	movw	r22, r26
    1f16:	42 2b       	or	r20, r18
    1f18:	31 96       	adiw	r30, 0x01	; 1
    1f1a:	80 81       	ld	r24, Z
    1f1c:	28 2f       	mov	r18, r24
    1f1e:	30 e0       	ldi	r19, 0x00	; 0
    1f20:	92 2f       	mov	r25, r18
    1f22:	88 27       	eor	r24, r24
    1f24:	a0 e0       	ldi	r26, 0x00	; 0
    1f26:	b0 e0       	ldi	r27, 0x00	; 0
    1f28:	84 2b       	or	r24, r20
    1f2a:	95 2b       	or	r25, r21
    1f2c:	a6 2b       	or	r26, r22
    1f2e:	b7 2b       	or	r27, r23
    1f30:	f8 01       	movw	r30, r16
    1f32:	82 a3       	std	Z+34, r24	; 0x22
    1f34:	93 a3       	std	Z+35, r25	; 0x23
    1f36:	a4 a3       	std	Z+36, r26	; 0x24
    1f38:	b5 a3       	std	Z+37, r27	; 0x25
    1f3a:	44 0c       	add	r4, r4
    1f3c:	55 1c       	adc	r5, r5
    1f3e:	66 1c       	adc	r6, r6
    1f40:	77 1c       	adc	r7, r7
    1f42:	44 0c       	add	r4, r4
    1f44:	55 1c       	adc	r5, r5
    1f46:	66 1c       	adc	r6, r6
    1f48:	77 1c       	adc	r7, r7
    1f4a:	ff ef       	ldi	r31, 0xFF	; 255
    1f4c:	4f 0e       	add	r4, r31
    1f4e:	f1 e0       	ldi	r31, 0x01	; 1
    1f50:	5f 1e       	adc	r5, r31
    1f52:	61 1c       	adc	r6, r1
    1f54:	71 1c       	adc	r7, r1
    1f56:	03 2e       	mov	r0, r19
    1f58:	39 e0       	ldi	r19, 0x09	; 9
    1f5a:	76 94       	lsr	r7
    1f5c:	67 94       	ror	r6
    1f5e:	57 94       	ror	r5
    1f60:	47 94       	ror	r4
    1f62:	3a 95       	dec	r19
    1f64:	d1 f7       	brne	.-12     	; 0x1f5a <find_volume+0x406>
    1f66:	30 2d       	mov	r19, r0
    1f68:	84 14       	cp	r8, r4
    1f6a:	95 04       	cpc	r9, r5
    1f6c:	a6 04       	cpc	r10, r6
    1f6e:	b7 04       	cpc	r11, r7
    1f70:	08 f4       	brcc	.+2      	; 0x1f74 <find_volume+0x420>
    1f72:	0e c1       	rjmp	.+540    	; 0x2190 <find_volume+0x63c>
    1f74:	56 c1       	rjmp	.+684    	; 0x2222 <find_volume+0x6ce>
    1f76:	23 28       	or	r2, r3
    1f78:	09 f4       	brne	.+2      	; 0x1f7c <find_volume+0x428>
    1f7a:	0c c1       	rjmp	.+536    	; 0x2194 <find_volume+0x640>
    1f7c:	2a 8d       	ldd	r18, Y+26	; 0x1a
    1f7e:	3b 8d       	ldd	r19, Y+27	; 0x1b
    1f80:	4c 8d       	ldd	r20, Y+28	; 0x1c
    1f82:	5d 8d       	ldd	r21, Y+29	; 0x1d
    1f84:	82 0f       	add	r24, r18
    1f86:	93 1f       	adc	r25, r19
    1f88:	a4 1f       	adc	r26, r20
    1f8a:	b5 1f       	adc	r27, r21
    1f8c:	f8 01       	movw	r30, r16
    1f8e:	82 a3       	std	Z+34, r24	; 0x22
    1f90:	93 a3       	std	Z+35, r25	; 0x23
    1f92:	a4 a3       	std	Z+36, r26	; 0x24
    1f94:	b5 a3       	std	Z+37, r27	; 0x25
    1f96:	f9 89       	ldd	r31, Y+17	; 0x11
    1f98:	f2 30       	cpi	r31, 0x02	; 2
    1f9a:	29 f4       	brne	.+10     	; 0x1fa6 <find_volume+0x452>
    1f9c:	44 0c       	add	r4, r4
    1f9e:	55 1c       	adc	r5, r5
    1fa0:	66 1c       	adc	r6, r6
    1fa2:	77 1c       	adc	r7, r7
    1fa4:	6a c1       	rjmp	.+724    	; 0x227a <find_volume+0x726>
    1fa6:	a3 e0       	ldi	r26, 0x03	; 3
    1fa8:	b0 e0       	ldi	r27, 0x00	; 0
    1faa:	a3 01       	movw	r20, r6
    1fac:	92 01       	movw	r18, r4
    1fae:	0e 94 2a 42 	call	0x8454	; 0x8454 <__muluhisi3>
    1fb2:	dc 01       	movw	r26, r24
    1fb4:	cb 01       	movw	r24, r22
    1fb6:	b6 95       	lsr	r27
    1fb8:	a7 95       	ror	r26
    1fba:	97 95       	ror	r25
    1fbc:	87 95       	ror	r24
    1fbe:	21 e0       	ldi	r18, 0x01	; 1
    1fc0:	42 22       	and	r4, r18
    1fc2:	55 24       	eor	r5, r5
    1fc4:	66 24       	eor	r6, r6
    1fc6:	77 24       	eor	r7, r7
    1fc8:	48 0e       	add	r4, r24
    1fca:	59 1e       	adc	r5, r25
    1fcc:	6a 1e       	adc	r6, r26
    1fce:	7b 1e       	adc	r7, r27
    1fd0:	54 c1       	rjmp	.+680    	; 0x227a <find_volume+0x726>
    1fd2:	b7 01       	movw	r22, r14
    1fd4:	a6 01       	movw	r20, r12
    1fd6:	4f 5f       	subi	r20, 0xFF	; 255
    1fd8:	5f 4f       	sbci	r21, 0xFF	; 255
    1fda:	6f 4f       	sbci	r22, 0xFF	; 255
    1fdc:	7f 4f       	sbci	r23, 0xFF	; 255
    1fde:	c8 01       	movw	r24, r16
    1fe0:	f0 dc       	rcall	.-1568   	; 0x19c2 <move_window>
    1fe2:	81 11       	cpse	r24, r1
    1fe4:	96 c0       	rjmp	.+300    	; 0x2112 <find_volume+0x5be>
    1fe6:	d8 01       	movw	r26, r16
    1fe8:	15 96       	adiw	r26, 0x05	; 5
    1fea:	1c 92       	st	X, r1
    1fec:	f8 01       	movw	r30, r16
    1fee:	e3 5d       	subi	r30, 0xD3	; 211
    1ff0:	fd 4f       	sbci	r31, 0xFD	; 253
    1ff2:	80 81       	ld	r24, Z
    1ff4:	90 e0       	ldi	r25, 0x00	; 0
    1ff6:	98 2f       	mov	r25, r24
    1ff8:	88 27       	eor	r24, r24
    1ffa:	31 97       	sbiw	r30, 0x01	; 1
    1ffc:	20 81       	ld	r18, Z
    1ffe:	82 2b       	or	r24, r18
    2000:	85 35       	cpi	r24, 0x55	; 85
    2002:	9a 4a       	sbci	r25, 0xAA	; 170
    2004:	09 f0       	breq	.+2      	; 0x2008 <find_volume+0x4b4>
    2006:	88 c0       	rjmp	.+272    	; 0x2118 <find_volume+0x5c4>
    2008:	f8 01       	movw	r30, r16
    200a:	21 a9       	ldd	r18, Z+49	; 0x31
    200c:	80 a9       	ldd	r24, Z+48	; 0x30
    200e:	90 e0       	ldi	r25, 0x00	; 0
    2010:	a0 e0       	ldi	r26, 0x00	; 0
    2012:	b0 e0       	ldi	r27, 0x00	; 0
    2014:	dc 01       	movw	r26, r24
    2016:	99 27       	eor	r25, r25
    2018:	88 27       	eor	r24, r24
    201a:	b2 2b       	or	r27, r18
    201c:	26 a5       	ldd	r18, Z+46	; 0x2e
    201e:	ac 01       	movw	r20, r24
    2020:	bd 01       	movw	r22, r26
    2022:	42 2b       	or	r20, r18
    2024:	27 a5       	ldd	r18, Z+47	; 0x2f
    2026:	30 e0       	ldi	r19, 0x00	; 0
    2028:	92 2f       	mov	r25, r18
    202a:	88 27       	eor	r24, r24
    202c:	a0 e0       	ldi	r26, 0x00	; 0
    202e:	b0 e0       	ldi	r27, 0x00	; 0
    2030:	84 2b       	or	r24, r20
    2032:	95 2b       	or	r25, r21
    2034:	a6 2b       	or	r26, r22
    2036:	b7 2b       	or	r27, r23
    2038:	82 35       	cpi	r24, 0x52	; 82
    203a:	92 45       	sbci	r25, 0x52	; 82
    203c:	a1 46       	sbci	r26, 0x61	; 97
    203e:	b1 44       	sbci	r27, 0x41	; 65
    2040:	09 f0       	breq	.+2      	; 0x2044 <find_volume+0x4f0>
    2042:	6d c0       	rjmp	.+218    	; 0x211e <find_volume+0x5ca>
    2044:	f8 01       	movw	r30, r16
    2046:	eb 5e       	subi	r30, 0xEB	; 235
    2048:	fd 4f       	sbci	r31, 0xFD	; 253
    204a:	20 81       	ld	r18, Z
    204c:	31 97       	sbiw	r30, 0x01	; 1
    204e:	80 81       	ld	r24, Z
    2050:	90 e0       	ldi	r25, 0x00	; 0
    2052:	a0 e0       	ldi	r26, 0x00	; 0
    2054:	b0 e0       	ldi	r27, 0x00	; 0
    2056:	dc 01       	movw	r26, r24
    2058:	99 27       	eor	r25, r25
    205a:	88 27       	eor	r24, r24
    205c:	b2 2b       	or	r27, r18
    205e:	32 97       	sbiw	r30, 0x02	; 2
    2060:	20 81       	ld	r18, Z
    2062:	ac 01       	movw	r20, r24
    2064:	bd 01       	movw	r22, r26
    2066:	42 2b       	or	r20, r18
    2068:	31 96       	adiw	r30, 0x01	; 1
    206a:	20 81       	ld	r18, Z
    206c:	30 e0       	ldi	r19, 0x00	; 0
    206e:	92 2f       	mov	r25, r18
    2070:	88 27       	eor	r24, r24
    2072:	a0 e0       	ldi	r26, 0x00	; 0
    2074:	b0 e0       	ldi	r27, 0x00	; 0
    2076:	84 2b       	or	r24, r20
    2078:	95 2b       	or	r25, r21
    207a:	a6 2b       	or	r26, r22
    207c:	b7 2b       	or	r27, r23
    207e:	82 37       	cpi	r24, 0x72	; 114
    2080:	92 47       	sbci	r25, 0x72	; 114
    2082:	a1 44       	sbci	r26, 0x41	; 65
    2084:	b1 46       	sbci	r27, 0x61	; 97
    2086:	09 f0       	breq	.+2      	; 0x208a <find_volume+0x536>
    2088:	4d c0       	rjmp	.+154    	; 0x2124 <find_volume+0x5d0>
    208a:	36 96       	adiw	r30, 0x06	; 6
    208c:	20 81       	ld	r18, Z
    208e:	31 97       	sbiw	r30, 0x01	; 1
    2090:	80 81       	ld	r24, Z
    2092:	90 e0       	ldi	r25, 0x00	; 0
    2094:	a0 e0       	ldi	r26, 0x00	; 0
    2096:	b0 e0       	ldi	r27, 0x00	; 0
    2098:	dc 01       	movw	r26, r24
    209a:	99 27       	eor	r25, r25
    209c:	88 27       	eor	r24, r24
    209e:	b2 2b       	or	r27, r18
    20a0:	32 97       	sbiw	r30, 0x02	; 2
    20a2:	20 81       	ld	r18, Z
    20a4:	ac 01       	movw	r20, r24
    20a6:	bd 01       	movw	r22, r26
    20a8:	42 2b       	or	r20, r18
    20aa:	31 96       	adiw	r30, 0x01	; 1
    20ac:	20 81       	ld	r18, Z
    20ae:	30 e0       	ldi	r19, 0x00	; 0
    20b0:	92 2f       	mov	r25, r18
    20b2:	88 27       	eor	r24, r24
    20b4:	a0 e0       	ldi	r26, 0x00	; 0
    20b6:	b0 e0       	ldi	r27, 0x00	; 0
    20b8:	84 2b       	or	r24, r20
    20ba:	95 2b       	or	r25, r21
    20bc:	a6 2b       	or	r26, r22
    20be:	b7 2b       	or	r27, r23
    20c0:	f8 01       	movw	r30, r16
    20c2:	86 87       	std	Z+14, r24	; 0x0e
    20c4:	97 87       	std	Z+15, r25	; 0x0f
    20c6:	a0 8b       	std	Z+16, r26	; 0x10
    20c8:	b1 8b       	std	Z+17, r27	; 0x11
    20ca:	e3 5e       	subi	r30, 0xE3	; 227
    20cc:	fd 4f       	sbci	r31, 0xFD	; 253
    20ce:	20 81       	ld	r18, Z
    20d0:	31 97       	sbiw	r30, 0x01	; 1
    20d2:	80 81       	ld	r24, Z
    20d4:	90 e0       	ldi	r25, 0x00	; 0
    20d6:	a0 e0       	ldi	r26, 0x00	; 0
    20d8:	b0 e0       	ldi	r27, 0x00	; 0
    20da:	dc 01       	movw	r26, r24
    20dc:	99 27       	eor	r25, r25
    20de:	88 27       	eor	r24, r24
    20e0:	b2 2b       	or	r27, r18
    20e2:	32 97       	sbiw	r30, 0x02	; 2
    20e4:	20 81       	ld	r18, Z
    20e6:	ac 01       	movw	r20, r24
    20e8:	bd 01       	movw	r22, r26
    20ea:	42 2b       	or	r20, r18
    20ec:	31 96       	adiw	r30, 0x01	; 1
    20ee:	20 81       	ld	r18, Z
    20f0:	30 e0       	ldi	r19, 0x00	; 0
    20f2:	92 2f       	mov	r25, r18
    20f4:	88 27       	eor	r24, r24
    20f6:	a0 e0       	ldi	r26, 0x00	; 0
    20f8:	b0 e0       	ldi	r27, 0x00	; 0
    20fa:	84 2b       	or	r24, r20
    20fc:	95 2b       	or	r25, r21
    20fe:	a6 2b       	or	r26, r22
    2100:	b7 2b       	or	r27, r23
    2102:	f8 01       	movw	r30, r16
    2104:	82 87       	std	Z+10, r24	; 0x0a
    2106:	93 87       	std	Z+11, r25	; 0x0b
    2108:	a4 87       	std	Z+12, r26	; 0x0c
    210a:	b5 87       	std	Z+13, r27	; 0x0d
    210c:	f3 e0       	ldi	r31, 0x03	; 3
    210e:	f9 8b       	std	Y+17, r31	; 0x11
    2110:	0b c0       	rjmp	.+22     	; 0x2128 <find_volume+0x5d4>
    2112:	e3 e0       	ldi	r30, 0x03	; 3
    2114:	e9 8b       	std	Y+17, r30	; 0x11
    2116:	08 c0       	rjmp	.+16     	; 0x2128 <find_volume+0x5d4>
    2118:	f3 e0       	ldi	r31, 0x03	; 3
    211a:	f9 8b       	std	Y+17, r31	; 0x11
    211c:	05 c0       	rjmp	.+10     	; 0x2128 <find_volume+0x5d4>
    211e:	e3 e0       	ldi	r30, 0x03	; 3
    2120:	e9 8b       	std	Y+17, r30	; 0x11
    2122:	02 c0       	rjmp	.+4      	; 0x2128 <find_volume+0x5d4>
    2124:	f3 e0       	ldi	r31, 0x03	; 3
    2126:	f9 8b       	std	Y+17, r31	; 0x11
    2128:	e9 89       	ldd	r30, Y+17	; 0x11
    212a:	d8 01       	movw	r26, r16
    212c:	ec 93       	st	X, r30
    212e:	80 91 9d 03 	lds	r24, 0x039D
    2132:	90 91 9e 03 	lds	r25, 0x039E
    2136:	01 96       	adiw	r24, 0x01	; 1
    2138:	90 93 9e 03 	sts	0x039E, r25
    213c:	80 93 9d 03 	sts	0x039D, r24
    2140:	17 96       	adiw	r26, 0x07	; 7
    2142:	9c 93       	st	X, r25
    2144:	8e 93       	st	-X, r24
    2146:	16 97       	sbiw	r26, 0x06	; 6
    2148:	80 e0       	ldi	r24, 0x00	; 0
    214a:	ad c0       	rjmp	.+346    	; 0x22a6 <find_volume+0x752>
    214c:	8b e0       	ldi	r24, 0x0B	; 11
    214e:	ab c0       	rjmp	.+342    	; 0x22a6 <find_volume+0x752>
    2150:	8c e0       	ldi	r24, 0x0C	; 12
    2152:	a9 c0       	rjmp	.+338    	; 0x22a6 <find_volume+0x752>
    2154:	80 e0       	ldi	r24, 0x00	; 0
    2156:	a7 c0       	rjmp	.+334    	; 0x22a6 <find_volume+0x752>
    2158:	80 e0       	ldi	r24, 0x00	; 0
    215a:	a5 c0       	rjmp	.+330    	; 0x22a6 <find_volume+0x752>
    215c:	83 e0       	ldi	r24, 0x03	; 3
    215e:	a3 c0       	rjmp	.+326    	; 0x22a6 <find_volume+0x752>
    2160:	8a e0       	ldi	r24, 0x0A	; 10
    2162:	a1 c0       	rjmp	.+322    	; 0x22a6 <find_volume+0x752>
    2164:	81 e0       	ldi	r24, 0x01	; 1
    2166:	9f c0       	rjmp	.+318    	; 0x22a6 <find_volume+0x752>
    2168:	8d e0       	ldi	r24, 0x0D	; 13
    216a:	9d c0       	rjmp	.+314    	; 0x22a6 <find_volume+0x752>
    216c:	8d e0       	ldi	r24, 0x0D	; 13
    216e:	9b c0       	rjmp	.+310    	; 0x22a6 <find_volume+0x752>
    2170:	8d e0       	ldi	r24, 0x0D	; 13
    2172:	99 c0       	rjmp	.+306    	; 0x22a6 <find_volume+0x752>
    2174:	8d e0       	ldi	r24, 0x0D	; 13
    2176:	97 c0       	rjmp	.+302    	; 0x22a6 <find_volume+0x752>
    2178:	8d e0       	ldi	r24, 0x0D	; 13
    217a:	95 c0       	rjmp	.+298    	; 0x22a6 <find_volume+0x752>
    217c:	8d e0       	ldi	r24, 0x0D	; 13
    217e:	93 c0       	rjmp	.+294    	; 0x22a6 <find_volume+0x752>
    2180:	8d e0       	ldi	r24, 0x0D	; 13
    2182:	91 c0       	rjmp	.+290    	; 0x22a6 <find_volume+0x752>
    2184:	8d e0       	ldi	r24, 0x0D	; 13
    2186:	8f c0       	rjmp	.+286    	; 0x22a6 <find_volume+0x752>
    2188:	8d e0       	ldi	r24, 0x0D	; 13
    218a:	8d c0       	rjmp	.+282    	; 0x22a6 <find_volume+0x752>
    218c:	8d e0       	ldi	r24, 0x0D	; 13
    218e:	8b c0       	rjmp	.+278    	; 0x22a6 <find_volume+0x752>
    2190:	8d e0       	ldi	r24, 0x0D	; 13
    2192:	89 c0       	rjmp	.+274    	; 0x22a6 <find_volume+0x752>
    2194:	8d e0       	ldi	r24, 0x0D	; 13
    2196:	87 c0       	rjmp	.+270    	; 0x22a6 <find_volume+0x752>
    2198:	8d e0       	ldi	r24, 0x0D	; 13
    219a:	85 c0       	rjmp	.+266    	; 0x22a6 <find_volume+0x752>
    219c:	40 e0       	ldi	r20, 0x00	; 0
    219e:	50 e0       	ldi	r21, 0x00	; 0
    21a0:	ba 01       	movw	r22, r20
    21a2:	c8 01       	movw	r24, r16
    21a4:	4a dc       	rcall	.-1900   	; 0x1a3a <check_fs>
    21a6:	81 30       	cpi	r24, 0x01	; 1
    21a8:	09 f0       	breq	.+2      	; 0x21ac <find_volume+0x658>
    21aa:	6e cd       	rjmp	.-1316   	; 0x1c88 <find_volume+0x134>
    21ac:	9e 01       	movw	r18, r28
    21ae:	2f 5f       	subi	r18, 0xFF	; 255
    21b0:	3f 4f       	sbci	r19, 0xFF	; 255
    21b2:	59 01       	movw	r10, r18
    21b4:	f8 01       	movw	r30, r16
    21b6:	e9 50       	subi	r30, 0x09	; 9
    21b8:	fe 4f       	sbci	r31, 0xFE	; 254
    21ba:	a8 01       	movw	r20, r16
    21bc:	49 5c       	subi	r20, 0xC9	; 201
    21be:	5d 4f       	sbci	r21, 0xFD	; 253
    21c0:	81 2c       	mov	r8, r1
    21c2:	91 2c       	mov	r9, r1
    21c4:	70 e0       	ldi	r23, 0x00	; 0
    21c6:	60 e0       	ldi	r22, 0x00	; 0
    21c8:	17 cd       	rjmp	.-1490   	; 0x1bf8 <find_volume+0xa4>
    21ca:	29 01       	movw	r4, r18
    21cc:	3a 01       	movw	r6, r20
    21ce:	62 e0       	ldi	r22, 0x02	; 2
    21d0:	46 0e       	add	r4, r22
    21d2:	51 1c       	adc	r5, r1
    21d4:	61 1c       	adc	r6, r1
    21d6:	71 1c       	adc	r7, r1
    21d8:	d8 01       	movw	r26, r16
    21da:	52 96       	adiw	r26, 0x12	; 18
    21dc:	4d 92       	st	X+, r4
    21de:	5d 92       	st	X+, r5
    21e0:	6d 92       	st	X+, r6
    21e2:	7c 92       	st	X, r7
    21e4:	55 97       	sbiw	r26, 0x15	; 21
    21e6:	f8 01       	movw	r30, r16
    21e8:	c2 8e       	std	Z+26, r12	; 0x1a
    21ea:	d3 8e       	std	Z+27, r13	; 0x1b
    21ec:	e4 8e       	std	Z+28, r14	; 0x1c
    21ee:	f5 8e       	std	Z+29, r15	; 0x1d
    21f0:	8e 89       	ldd	r24, Y+22	; 0x16
    21f2:	9f 89       	ldd	r25, Y+23	; 0x17
    21f4:	a8 8d       	ldd	r26, Y+24	; 0x18
    21f6:	b9 8d       	ldd	r27, Y+25	; 0x19
    21f8:	8c 0d       	add	r24, r12
    21fa:	9d 1d       	adc	r25, r13
    21fc:	ae 1d       	adc	r26, r14
    21fe:	bf 1d       	adc	r27, r15
    2200:	86 8f       	std	Z+30, r24	; 0x1e
    2202:	97 8f       	std	Z+31, r25	; 0x1f
    2204:	a0 a3       	std	Z+32, r26	; 0x20
    2206:	b1 a3       	std	Z+33, r27	; 0x21
    2208:	8a 89       	ldd	r24, Y+18	; 0x12
    220a:	9b 89       	ldd	r25, Y+19	; 0x13
    220c:	ac 89       	ldd	r26, Y+20	; 0x14
    220e:	bd 89       	ldd	r27, Y+21	; 0x15
    2210:	8c 0d       	add	r24, r12
    2212:	9d 1d       	adc	r25, r13
    2214:	ae 1d       	adc	r26, r14
    2216:	bf 1d       	adc	r27, r15
    2218:	86 a3       	std	Z+38, r24	; 0x26
    221a:	97 a3       	std	Z+39, r25	; 0x27
    221c:	a0 a7       	std	Z+40, r26	; 0x28
    221e:	b1 a7       	std	Z+41, r27	; 0x29
    2220:	66 ce       	rjmp	.-820    	; 0x1eee <find_volume+0x39a>
    2222:	8f ef       	ldi	r24, 0xFF	; 255
    2224:	9f ef       	ldi	r25, 0xFF	; 255
    2226:	dc 01       	movw	r26, r24
    2228:	f8 01       	movw	r30, r16
    222a:	86 87       	std	Z+14, r24	; 0x0e
    222c:	97 87       	std	Z+15, r25	; 0x0f
    222e:	a0 8b       	std	Z+16, r26	; 0x10
    2230:	b1 8b       	std	Z+17, r27	; 0x11
    2232:	82 87       	std	Z+10, r24	; 0x0a
    2234:	93 87       	std	Z+11, r25	; 0x0b
    2236:	a4 87       	std	Z+12, r26	; 0x0c
    2238:	b5 87       	std	Z+13, r27	; 0x0d
    223a:	80 e8       	ldi	r24, 0x80	; 128
    223c:	85 83       	std	Z+5, r24	; 0x05
    223e:	e1 5a       	subi	r30, 0xA1	; 161
    2240:	ff 4f       	sbci	r31, 0xFF	; 255
    2242:	80 81       	ld	r24, Z
    2244:	90 e0       	ldi	r25, 0x00	; 0
    2246:	98 2f       	mov	r25, r24
    2248:	88 27       	eor	r24, r24
    224a:	31 97       	sbiw	r30, 0x01	; 1
    224c:	20 81       	ld	r18, Z
    224e:	82 2b       	or	r24, r18
    2250:	01 97       	sbiw	r24, 0x01	; 1
    2252:	09 f4       	brne	.+2      	; 0x2256 <find_volume+0x702>
    2254:	be ce       	rjmp	.-644    	; 0x1fd2 <find_volume+0x47e>
    2256:	f3 e0       	ldi	r31, 0x03	; 3
    2258:	f9 8b       	std	Y+17, r31	; 0x11
    225a:	66 cf       	rjmp	.-308    	; 0x2128 <find_volume+0x5d4>
    225c:	8f ef       	ldi	r24, 0xFF	; 255
    225e:	9f ef       	ldi	r25, 0xFF	; 255
    2260:	dc 01       	movw	r26, r24
    2262:	f8 01       	movw	r30, r16
    2264:	86 87       	std	Z+14, r24	; 0x0e
    2266:	97 87       	std	Z+15, r25	; 0x0f
    2268:	a0 8b       	std	Z+16, r26	; 0x10
    226a:	b1 8b       	std	Z+17, r27	; 0x11
    226c:	82 87       	std	Z+10, r24	; 0x0a
    226e:	93 87       	std	Z+11, r25	; 0x0b
    2270:	a4 87       	std	Z+12, r26	; 0x0c
    2272:	b5 87       	std	Z+13, r27	; 0x0d
    2274:	80 e8       	ldi	r24, 0x80	; 128
    2276:	85 83       	std	Z+5, r24	; 0x05
    2278:	57 cf       	rjmp	.-338    	; 0x2128 <find_volume+0x5d4>
    227a:	ff ef       	ldi	r31, 0xFF	; 255
    227c:	4f 0e       	add	r4, r31
    227e:	f1 e0       	ldi	r31, 0x01	; 1
    2280:	5f 1e       	adc	r5, r31
    2282:	61 1c       	adc	r6, r1
    2284:	71 1c       	adc	r7, r1
    2286:	03 2e       	mov	r0, r19
    2288:	39 e0       	ldi	r19, 0x09	; 9
    228a:	76 94       	lsr	r7
    228c:	67 94       	ror	r6
    228e:	57 94       	ror	r5
    2290:	47 94       	ror	r4
    2292:	3a 95       	dec	r19
    2294:	d1 f7       	brne	.-12     	; 0x228a <find_volume+0x736>
    2296:	30 2d       	mov	r19, r0
    2298:	84 14       	cp	r8, r4
    229a:	95 04       	cpc	r9, r5
    229c:	a6 04       	cpc	r10, r6
    229e:	b7 04       	cpc	r11, r7
    22a0:	08 f4       	brcc	.+2      	; 0x22a4 <find_volume+0x750>
    22a2:	7a cf       	rjmp	.-268    	; 0x2198 <find_volume+0x644>
    22a4:	db cf       	rjmp	.-74     	; 0x225c <find_volume+0x708>
    22a6:	6d 96       	adiw	r28, 0x1d	; 29
    22a8:	0f b6       	in	r0, 0x3f	; 63
    22aa:	f8 94       	cli
    22ac:	de bf       	out	0x3e, r29	; 62
    22ae:	0f be       	out	0x3f, r0	; 63
    22b0:	cd bf       	out	0x3d, r28	; 61
    22b2:	df 91       	pop	r29
    22b4:	cf 91       	pop	r28
    22b6:	1f 91       	pop	r17
    22b8:	0f 91       	pop	r16
    22ba:	ff 90       	pop	r15
    22bc:	ef 90       	pop	r14
    22be:	df 90       	pop	r13
    22c0:	cf 90       	pop	r12
    22c2:	bf 90       	pop	r11
    22c4:	af 90       	pop	r10
    22c6:	9f 90       	pop	r9
    22c8:	8f 90       	pop	r8
    22ca:	7f 90       	pop	r7
    22cc:	6f 90       	pop	r6
    22ce:	5f 90       	pop	r5
    22d0:	4f 90       	pop	r4
    22d2:	3f 90       	pop	r3
    22d4:	2f 90       	pop	r2
    22d6:	08 95       	ret

000022d8 <clust2sect>:
    22d8:	cf 92       	push	r12
    22da:	df 92       	push	r13
    22dc:	ef 92       	push	r14
    22de:	ff 92       	push	r15
    22e0:	fc 01       	movw	r30, r24
    22e2:	9a 01       	movw	r18, r20
    22e4:	ab 01       	movw	r20, r22
    22e6:	22 50       	subi	r18, 0x02	; 2
    22e8:	31 09       	sbc	r19, r1
    22ea:	41 09       	sbc	r20, r1
    22ec:	51 09       	sbc	r21, r1
    22ee:	c2 88       	ldd	r12, Z+18	; 0x12
    22f0:	d3 88       	ldd	r13, Z+19	; 0x13
    22f2:	e4 88       	ldd	r14, Z+20	; 0x14
    22f4:	f5 88       	ldd	r15, Z+21	; 0x15
    22f6:	82 e0       	ldi	r24, 0x02	; 2
    22f8:	c8 1a       	sub	r12, r24
    22fa:	d1 08       	sbc	r13, r1
    22fc:	e1 08       	sbc	r14, r1
    22fe:	f1 08       	sbc	r15, r1
    2300:	2c 15       	cp	r18, r12
    2302:	3d 05       	cpc	r19, r13
    2304:	4e 05       	cpc	r20, r14
    2306:	5f 05       	cpc	r21, r15
    2308:	68 f4       	brcc	.+26     	; 0x2324 <clust2sect+0x4c>
    230a:	a2 81       	ldd	r26, Z+2	; 0x02
    230c:	b0 e0       	ldi	r27, 0x00	; 0
    230e:	0e 94 2a 42 	call	0x8454	; 0x8454 <__muluhisi3>
    2312:	c6 a0       	ldd	r12, Z+38	; 0x26
    2314:	d7 a0       	ldd	r13, Z+39	; 0x27
    2316:	e0 a4       	ldd	r14, Z+40	; 0x28
    2318:	f1 a4       	ldd	r15, Z+41	; 0x29
    231a:	6c 0d       	add	r22, r12
    231c:	7d 1d       	adc	r23, r13
    231e:	8e 1d       	adc	r24, r14
    2320:	9f 1d       	adc	r25, r15
    2322:	03 c0       	rjmp	.+6      	; 0x232a <clust2sect+0x52>
    2324:	60 e0       	ldi	r22, 0x00	; 0
    2326:	70 e0       	ldi	r23, 0x00	; 0
    2328:	cb 01       	movw	r24, r22
    232a:	ff 90       	pop	r15
    232c:	ef 90       	pop	r14
    232e:	df 90       	pop	r13
    2330:	cf 90       	pop	r12
    2332:	08 95       	ret

00002334 <get_fat>:
    2334:	af 92       	push	r10
    2336:	bf 92       	push	r11
    2338:	cf 92       	push	r12
    233a:	df 92       	push	r13
    233c:	ef 92       	push	r14
    233e:	ff 92       	push	r15
    2340:	0f 93       	push	r16
    2342:	1f 93       	push	r17
    2344:	cf 93       	push	r28
    2346:	df 93       	push	r29
    2348:	ec 01       	movw	r28, r24
    234a:	6a 01       	movw	r12, r20
    234c:	7b 01       	movw	r14, r22
    234e:	42 30       	cpi	r20, 0x02	; 2
    2350:	51 05       	cpc	r21, r1
    2352:	61 05       	cpc	r22, r1
    2354:	71 05       	cpc	r23, r1
    2356:	08 f4       	brcc	.+2      	; 0x235a <get_fat+0x26>
    2358:	c3 c0       	rjmp	.+390    	; 0x24e0 <get_fat+0x1ac>
    235a:	8a 89       	ldd	r24, Y+18	; 0x12
    235c:	9b 89       	ldd	r25, Y+19	; 0x13
    235e:	ac 89       	ldd	r26, Y+20	; 0x14
    2360:	bd 89       	ldd	r27, Y+21	; 0x15
    2362:	48 17       	cp	r20, r24
    2364:	59 07       	cpc	r21, r25
    2366:	6a 07       	cpc	r22, r26
    2368:	7b 07       	cpc	r23, r27
    236a:	08 f0       	brcs	.+2      	; 0x236e <get_fat+0x3a>
    236c:	be c0       	rjmp	.+380    	; 0x24ea <get_fat+0x1b6>
    236e:	88 81       	ld	r24, Y
    2370:	82 30       	cpi	r24, 0x02	; 2
    2372:	09 f4       	brne	.+2      	; 0x2376 <get_fat+0x42>
    2374:	4b c0       	rjmp	.+150    	; 0x240c <get_fat+0xd8>
    2376:	83 30       	cpi	r24, 0x03	; 3
    2378:	09 f4       	brne	.+2      	; 0x237c <get_fat+0x48>
    237a:	6c c0       	rjmp	.+216    	; 0x2454 <get_fat+0x120>
    237c:	81 30       	cpi	r24, 0x01	; 1
    237e:	09 f0       	breq	.+2      	; 0x2382 <get_fat+0x4e>
    2380:	b9 c0       	rjmp	.+370    	; 0x24f4 <get_fat+0x1c0>
    2382:	8a 01       	movw	r16, r20
    2384:	16 95       	lsr	r17
    2386:	07 95       	ror	r16
    2388:	04 0f       	add	r16, r20
    238a:	15 1f       	adc	r17, r21
    238c:	c8 01       	movw	r24, r16
    238e:	89 2f       	mov	r24, r25
    2390:	99 27       	eor	r25, r25
    2392:	86 95       	lsr	r24
    2394:	4e 8d       	ldd	r20, Y+30	; 0x1e
    2396:	5f 8d       	ldd	r21, Y+31	; 0x1f
    2398:	68 a1       	ldd	r22, Y+32	; 0x20
    239a:	79 a1       	ldd	r23, Y+33	; 0x21
    239c:	48 0f       	add	r20, r24
    239e:	59 1f       	adc	r21, r25
    23a0:	61 1d       	adc	r22, r1
    23a2:	71 1d       	adc	r23, r1
    23a4:	ce 01       	movw	r24, r28
    23a6:	0d db       	rcall	.-2534   	; 0x19c2 <move_window>
    23a8:	81 11       	cpse	r24, r1
    23aa:	a9 c0       	rjmp	.+338    	; 0x24fe <get_fat+0x1ca>
    23ac:	58 01       	movw	r10, r16
    23ae:	8f ef       	ldi	r24, 0xFF	; 255
    23b0:	a8 1a       	sub	r10, r24
    23b2:	b8 0a       	sbc	r11, r24
    23b4:	11 70       	andi	r17, 0x01	; 1
    23b6:	fe 01       	movw	r30, r28
    23b8:	e0 0f       	add	r30, r16
    23ba:	f1 1f       	adc	r31, r17
    23bc:	16 a5       	ldd	r17, Z+46	; 0x2e
    23be:	c5 01       	movw	r24, r10
    23c0:	89 2f       	mov	r24, r25
    23c2:	99 27       	eor	r25, r25
    23c4:	86 95       	lsr	r24
    23c6:	4e 8d       	ldd	r20, Y+30	; 0x1e
    23c8:	5f 8d       	ldd	r21, Y+31	; 0x1f
    23ca:	68 a1       	ldd	r22, Y+32	; 0x20
    23cc:	79 a1       	ldd	r23, Y+33	; 0x21
    23ce:	48 0f       	add	r20, r24
    23d0:	59 1f       	adc	r21, r25
    23d2:	61 1d       	adc	r22, r1
    23d4:	71 1d       	adc	r23, r1
    23d6:	ce 01       	movw	r24, r28
    23d8:	f4 da       	rcall	.-2584   	; 0x19c2 <move_window>
    23da:	81 11       	cpse	r24, r1
    23dc:	94 c0       	rjmp	.+296    	; 0x2506 <get_fat+0x1d2>
    23de:	81 e0       	ldi	r24, 0x01	; 1
    23e0:	b8 22       	and	r11, r24
    23e2:	ca 0d       	add	r28, r10
    23e4:	db 1d       	adc	r29, r11
    23e6:	8e a5       	ldd	r24, Y+46	; 0x2e
    23e8:	61 2f       	mov	r22, r17
    23ea:	70 e0       	ldi	r23, 0x00	; 0
    23ec:	78 2b       	or	r23, r24
    23ee:	c0 fe       	sbrs	r12, 0
    23f0:	09 c0       	rjmp	.+18     	; 0x2404 <get_fat+0xd0>
    23f2:	72 95       	swap	r23
    23f4:	62 95       	swap	r22
    23f6:	6f 70       	andi	r22, 0x0F	; 15
    23f8:	67 27       	eor	r22, r23
    23fa:	7f 70       	andi	r23, 0x0F	; 15
    23fc:	67 27       	eor	r22, r23
    23fe:	80 e0       	ldi	r24, 0x00	; 0
    2400:	90 e0       	ldi	r25, 0x00	; 0
    2402:	8c c0       	rjmp	.+280    	; 0x251c <get_fat+0x1e8>
    2404:	7f 70       	andi	r23, 0x0F	; 15
    2406:	80 e0       	ldi	r24, 0x00	; 0
    2408:	90 e0       	ldi	r25, 0x00	; 0
    240a:	88 c0       	rjmp	.+272    	; 0x251c <get_fat+0x1e8>
    240c:	45 2f       	mov	r20, r21
    240e:	56 2f       	mov	r21, r22
    2410:	67 2f       	mov	r22, r23
    2412:	77 27       	eor	r23, r23
    2414:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2416:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2418:	a8 a1       	ldd	r26, Y+32	; 0x20
    241a:	b9 a1       	ldd	r27, Y+33	; 0x21
    241c:	48 0f       	add	r20, r24
    241e:	59 1f       	adc	r21, r25
    2420:	6a 1f       	adc	r22, r26
    2422:	7b 1f       	adc	r23, r27
    2424:	ce 01       	movw	r24, r28
    2426:	cd da       	rcall	.-2662   	; 0x19c2 <move_window>
    2428:	81 11       	cpse	r24, r1
    242a:	71 c0       	rjmp	.+226    	; 0x250e <get_fat+0x1da>
    242c:	cc 0c       	add	r12, r12
    242e:	dd 1c       	adc	r13, r13
    2430:	ee 1c       	adc	r14, r14
    2432:	ff 1c       	adc	r15, r15
    2434:	e8 94       	clt
    2436:	c0 f8       	bld	r12, 0
    2438:	81 e0       	ldi	r24, 0x01	; 1
    243a:	d8 22       	and	r13, r24
    243c:	ee 24       	eor	r14, r14
    243e:	ff 24       	eor	r15, r15
    2440:	fe 01       	movw	r30, r28
    2442:	ec 0d       	add	r30, r12
    2444:	fd 1d       	adc	r31, r13
    2446:	66 a5       	ldd	r22, Z+46	; 0x2e
    2448:	87 a5       	ldd	r24, Z+47	; 0x2f
    244a:	70 e0       	ldi	r23, 0x00	; 0
    244c:	78 2b       	or	r23, r24
    244e:	80 e0       	ldi	r24, 0x00	; 0
    2450:	90 e0       	ldi	r25, 0x00	; 0
    2452:	64 c0       	rjmp	.+200    	; 0x251c <get_fat+0x1e8>
    2454:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2456:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2458:	a8 a1       	ldd	r26, Y+32	; 0x20
    245a:	b9 a1       	ldd	r27, Y+33	; 0x21
    245c:	68 94       	set
    245e:	16 f8       	bld	r1, 6
    2460:	76 95       	lsr	r23
    2462:	67 95       	ror	r22
    2464:	57 95       	ror	r21
    2466:	47 95       	ror	r20
    2468:	16 94       	lsr	r1
    246a:	d1 f7       	brne	.-12     	; 0x2460 <get_fat+0x12c>
    246c:	48 0f       	add	r20, r24
    246e:	59 1f       	adc	r21, r25
    2470:	6a 1f       	adc	r22, r26
    2472:	7b 1f       	adc	r23, r27
    2474:	ce 01       	movw	r24, r28
    2476:	a5 da       	rcall	.-2742   	; 0x19c2 <move_window>
    2478:	81 11       	cpse	r24, r1
    247a:	4d c0       	rjmp	.+154    	; 0x2516 <get_fat+0x1e2>
    247c:	cc 0c       	add	r12, r12
    247e:	dd 1c       	adc	r13, r13
    2480:	ee 1c       	adc	r14, r14
    2482:	ff 1c       	adc	r15, r15
    2484:	cc 0c       	add	r12, r12
    2486:	dd 1c       	adc	r13, r13
    2488:	ee 1c       	adc	r14, r14
    248a:	ff 1c       	adc	r15, r15
    248c:	8c ef       	ldi	r24, 0xFC	; 252
    248e:	c8 22       	and	r12, r24
    2490:	81 e0       	ldi	r24, 0x01	; 1
    2492:	d8 22       	and	r13, r24
    2494:	ee 24       	eor	r14, r14
    2496:	ff 24       	eor	r15, r15
    2498:	f6 01       	movw	r30, r12
    249a:	be 96       	adiw	r30, 0x2e	; 46
    249c:	ec 0f       	add	r30, r28
    249e:	fd 1f       	adc	r31, r29
    24a0:	22 81       	ldd	r18, Z+2	; 0x02
    24a2:	63 81       	ldd	r22, Z+3	; 0x03
    24a4:	86 2f       	mov	r24, r22
    24a6:	90 e0       	ldi	r25, 0x00	; 0
    24a8:	a0 e0       	ldi	r26, 0x00	; 0
    24aa:	b0 e0       	ldi	r27, 0x00	; 0
    24ac:	b8 2f       	mov	r27, r24
    24ae:	aa 27       	eor	r26, r26
    24b0:	99 27       	eor	r25, r25
    24b2:	88 27       	eor	r24, r24
    24b4:	ac 01       	movw	r20, r24
    24b6:	bd 01       	movw	r22, r26
    24b8:	62 2b       	or	r22, r18
    24ba:	81 81       	ldd	r24, Z+1	; 0x01
    24bc:	90 e0       	ldi	r25, 0x00	; 0
    24be:	98 2f       	mov	r25, r24
    24c0:	88 27       	eor	r24, r24
    24c2:	a0 e0       	ldi	r26, 0x00	; 0
    24c4:	b0 e0       	ldi	r27, 0x00	; 0
    24c6:	84 2b       	or	r24, r20
    24c8:	95 2b       	or	r25, r21
    24ca:	a6 2b       	or	r26, r22
    24cc:	b7 2b       	or	r27, r23
    24ce:	fe 01       	movw	r30, r28
    24d0:	ec 0d       	add	r30, r12
    24d2:	fd 1d       	adc	r31, r13
    24d4:	26 a5       	ldd	r18, Z+46	; 0x2e
    24d6:	82 2b       	or	r24, r18
    24d8:	bc 01       	movw	r22, r24
    24da:	cd 01       	movw	r24, r26
    24dc:	9f 70       	andi	r25, 0x0F	; 15
    24de:	1e c0       	rjmp	.+60     	; 0x251c <get_fat+0x1e8>
    24e0:	61 e0       	ldi	r22, 0x01	; 1
    24e2:	70 e0       	ldi	r23, 0x00	; 0
    24e4:	80 e0       	ldi	r24, 0x00	; 0
    24e6:	90 e0       	ldi	r25, 0x00	; 0
    24e8:	19 c0       	rjmp	.+50     	; 0x251c <get_fat+0x1e8>
    24ea:	61 e0       	ldi	r22, 0x01	; 1
    24ec:	70 e0       	ldi	r23, 0x00	; 0
    24ee:	80 e0       	ldi	r24, 0x00	; 0
    24f0:	90 e0       	ldi	r25, 0x00	; 0
    24f2:	14 c0       	rjmp	.+40     	; 0x251c <get_fat+0x1e8>
    24f4:	61 e0       	ldi	r22, 0x01	; 1
    24f6:	70 e0       	ldi	r23, 0x00	; 0
    24f8:	80 e0       	ldi	r24, 0x00	; 0
    24fa:	90 e0       	ldi	r25, 0x00	; 0
    24fc:	0f c0       	rjmp	.+30     	; 0x251c <get_fat+0x1e8>
    24fe:	6f ef       	ldi	r22, 0xFF	; 255
    2500:	7f ef       	ldi	r23, 0xFF	; 255
    2502:	cb 01       	movw	r24, r22
    2504:	0b c0       	rjmp	.+22     	; 0x251c <get_fat+0x1e8>
    2506:	6f ef       	ldi	r22, 0xFF	; 255
    2508:	7f ef       	ldi	r23, 0xFF	; 255
    250a:	cb 01       	movw	r24, r22
    250c:	07 c0       	rjmp	.+14     	; 0x251c <get_fat+0x1e8>
    250e:	6f ef       	ldi	r22, 0xFF	; 255
    2510:	7f ef       	ldi	r23, 0xFF	; 255
    2512:	cb 01       	movw	r24, r22
    2514:	03 c0       	rjmp	.+6      	; 0x251c <get_fat+0x1e8>
    2516:	6f ef       	ldi	r22, 0xFF	; 255
    2518:	7f ef       	ldi	r23, 0xFF	; 255
    251a:	cb 01       	movw	r24, r22
    251c:	df 91       	pop	r29
    251e:	cf 91       	pop	r28
    2520:	1f 91       	pop	r17
    2522:	0f 91       	pop	r16
    2524:	ff 90       	pop	r15
    2526:	ef 90       	pop	r14
    2528:	df 90       	pop	r13
    252a:	cf 90       	pop	r12
    252c:	bf 90       	pop	r11
    252e:	af 90       	pop	r10
    2530:	08 95       	ret

00002532 <dir_sdi>:
    2532:	af 92       	push	r10
    2534:	bf 92       	push	r11
    2536:	cf 92       	push	r12
    2538:	df 92       	push	r13
    253a:	ef 92       	push	r14
    253c:	ff 92       	push	r15
    253e:	0f 93       	push	r16
    2540:	1f 93       	push	r17
    2542:	cf 93       	push	r28
    2544:	df 93       	push	r29
    2546:	ec 01       	movw	r28, r24
    2548:	8b 01       	movw	r16, r22
    254a:	7d 83       	std	Y+5, r23	; 0x05
    254c:	6c 83       	std	Y+4, r22	; 0x04
    254e:	ce 80       	ldd	r12, Y+6	; 0x06
    2550:	df 80       	ldd	r13, Y+7	; 0x07
    2552:	e8 84       	ldd	r14, Y+8	; 0x08
    2554:	f9 84       	ldd	r15, Y+9	; 0x09
    2556:	81 e0       	ldi	r24, 0x01	; 1
    2558:	c8 16       	cp	r12, r24
    255a:	d1 04       	cpc	r13, r1
    255c:	e1 04       	cpc	r14, r1
    255e:	f1 04       	cpc	r15, r1
    2560:	09 f4       	brne	.+2      	; 0x2564 <dir_sdi+0x32>
    2562:	8a c0       	rjmp	.+276    	; 0x2678 <dir_sdi+0x146>
    2564:	e8 81       	ld	r30, Y
    2566:	f9 81       	ldd	r31, Y+1	; 0x01
    2568:	82 89       	ldd	r24, Z+18	; 0x12
    256a:	93 89       	ldd	r25, Z+19	; 0x13
    256c:	a4 89       	ldd	r26, Z+20	; 0x14
    256e:	b5 89       	ldd	r27, Z+21	; 0x15
    2570:	c8 16       	cp	r12, r24
    2572:	d9 06       	cpc	r13, r25
    2574:	ea 06       	cpc	r14, r26
    2576:	fb 06       	cpc	r15, r27
    2578:	08 f0       	brcs	.+2      	; 0x257c <dir_sdi+0x4a>
    257a:	80 c0       	rjmp	.+256    	; 0x267c <dir_sdi+0x14a>
    257c:	c1 14       	cp	r12, r1
    257e:	d1 04       	cpc	r13, r1
    2580:	e1 04       	cpc	r14, r1
    2582:	f1 04       	cpc	r15, r1
    2584:	c1 f4       	brne	.+48     	; 0x25b6 <dir_sdi+0x84>
    2586:	80 81       	ld	r24, Z
    2588:	83 30       	cpi	r24, 0x03	; 3
    258a:	41 f4       	brne	.+16     	; 0x259c <dir_sdi+0x6a>
    258c:	82 a1       	ldd	r24, Z+34	; 0x22
    258e:	93 a1       	ldd	r25, Z+35	; 0x23
    2590:	a4 a1       	ldd	r26, Z+36	; 0x24
    2592:	b5 a1       	ldd	r27, Z+37	; 0x25
    2594:	00 97       	sbiw	r24, 0x00	; 0
    2596:	a1 05       	cpc	r26, r1
    2598:	b1 05       	cpc	r27, r1
    259a:	59 f4       	brne	.+22     	; 0x25b2 <dir_sdi+0x80>
    259c:	80 85       	ldd	r24, Z+8	; 0x08
    259e:	91 85       	ldd	r25, Z+9	; 0x09
    25a0:	08 17       	cp	r16, r24
    25a2:	19 07       	cpc	r17, r25
    25a4:	08 f0       	brcs	.+2      	; 0x25a8 <dir_sdi+0x76>
    25a6:	6c c0       	rjmp	.+216    	; 0x2680 <dir_sdi+0x14e>
    25a8:	62 a1       	ldd	r22, Z+34	; 0x22
    25aa:	73 a1       	ldd	r23, Z+35	; 0x23
    25ac:	84 a1       	ldd	r24, Z+36	; 0x24
    25ae:	95 a1       	ldd	r25, Z+37	; 0x25
    25b0:	35 c0       	rjmp	.+106    	; 0x261c <dir_sdi+0xea>
    25b2:	6c 01       	movw	r12, r24
    25b4:	7d 01       	movw	r14, r26
    25b6:	a2 80       	ldd	r10, Z+2	; 0x02
    25b8:	80 e1       	ldi	r24, 0x10	; 16
    25ba:	a8 9e       	mul	r10, r24
    25bc:	50 01       	movw	r10, r0
    25be:	11 24       	eor	r1, r1
    25c0:	0a 15       	cp	r16, r10
    25c2:	1b 05       	cpc	r17, r11
    25c4:	30 f1       	brcs	.+76     	; 0x2612 <dir_sdi+0xe0>
    25c6:	b7 01       	movw	r22, r14
    25c8:	a6 01       	movw	r20, r12
    25ca:	88 81       	ld	r24, Y
    25cc:	99 81       	ldd	r25, Y+1	; 0x01
    25ce:	b2 de       	rcall	.-668    	; 0x2334 <get_fat>
    25d0:	6b 01       	movw	r12, r22
    25d2:	7c 01       	movw	r14, r24
    25d4:	8f ef       	ldi	r24, 0xFF	; 255
    25d6:	c8 16       	cp	r12, r24
    25d8:	d8 06       	cpc	r13, r24
    25da:	e8 06       	cpc	r14, r24
    25dc:	f8 06       	cpc	r15, r24
    25de:	09 f4       	brne	.+2      	; 0x25e2 <dir_sdi+0xb0>
    25e0:	51 c0       	rjmp	.+162    	; 0x2684 <dir_sdi+0x152>
    25e2:	82 e0       	ldi	r24, 0x02	; 2
    25e4:	c8 16       	cp	r12, r24
    25e6:	d1 04       	cpc	r13, r1
    25e8:	e1 04       	cpc	r14, r1
    25ea:	f1 04       	cpc	r15, r1
    25ec:	08 f4       	brcc	.+2      	; 0x25f0 <dir_sdi+0xbe>
    25ee:	4c c0       	rjmp	.+152    	; 0x2688 <dir_sdi+0x156>
    25f0:	e8 81       	ld	r30, Y
    25f2:	f9 81       	ldd	r31, Y+1	; 0x01
    25f4:	82 89       	ldd	r24, Z+18	; 0x12
    25f6:	93 89       	ldd	r25, Z+19	; 0x13
    25f8:	a4 89       	ldd	r26, Z+20	; 0x14
    25fa:	b5 89       	ldd	r27, Z+21	; 0x15
    25fc:	c8 16       	cp	r12, r24
    25fe:	d9 06       	cpc	r13, r25
    2600:	ea 06       	cpc	r14, r26
    2602:	fb 06       	cpc	r15, r27
    2604:	08 f0       	brcs	.+2      	; 0x2608 <dir_sdi+0xd6>
    2606:	42 c0       	rjmp	.+132    	; 0x268c <dir_sdi+0x15a>
    2608:	0a 19       	sub	r16, r10
    260a:	1b 09       	sbc	r17, r11
    260c:	0a 15       	cp	r16, r10
    260e:	1b 05       	cpc	r17, r11
    2610:	d0 f6       	brcc	.-76     	; 0x25c6 <dir_sdi+0x94>
    2612:	b7 01       	movw	r22, r14
    2614:	a6 01       	movw	r20, r12
    2616:	88 81       	ld	r24, Y
    2618:	99 81       	ldd	r25, Y+1	; 0x01
    261a:	5e de       	rcall	.-836    	; 0x22d8 <clust2sect>
    261c:	ca 86       	std	Y+10, r12	; 0x0a
    261e:	db 86       	std	Y+11, r13	; 0x0b
    2620:	ec 86       	std	Y+12, r14	; 0x0c
    2622:	fd 86       	std	Y+13, r15	; 0x0d
    2624:	61 15       	cp	r22, r1
    2626:	71 05       	cpc	r23, r1
    2628:	81 05       	cpc	r24, r1
    262a:	91 05       	cpc	r25, r1
    262c:	89 f1       	breq	.+98     	; 0x2690 <dir_sdi+0x15e>
    262e:	98 01       	movw	r18, r16
    2630:	32 95       	swap	r19
    2632:	22 95       	swap	r18
    2634:	2f 70       	andi	r18, 0x0F	; 15
    2636:	23 27       	eor	r18, r19
    2638:	3f 70       	andi	r19, 0x0F	; 15
    263a:	23 27       	eor	r18, r19
    263c:	dc 01       	movw	r26, r24
    263e:	cb 01       	movw	r24, r22
    2640:	82 0f       	add	r24, r18
    2642:	93 1f       	adc	r25, r19
    2644:	a1 1d       	adc	r26, r1
    2646:	b1 1d       	adc	r27, r1
    2648:	8e 87       	std	Y+14, r24	; 0x0e
    264a:	9f 87       	std	Y+15, r25	; 0x0f
    264c:	a8 8b       	std	Y+16, r26	; 0x10
    264e:	b9 8b       	std	Y+17, r27	; 0x11
    2650:	0f 70       	andi	r16, 0x0F	; 15
    2652:	11 27       	eor	r17, r17
    2654:	00 0f       	add	r16, r16
    2656:	11 1f       	adc	r17, r17
    2658:	02 95       	swap	r16
    265a:	12 95       	swap	r17
    265c:	10 7f       	andi	r17, 0xF0	; 240
    265e:	10 27       	eor	r17, r16
    2660:	00 7f       	andi	r16, 0xF0	; 240
    2662:	10 27       	eor	r17, r16
    2664:	02 5d       	subi	r16, 0xD2	; 210
    2666:	1f 4f       	sbci	r17, 0xFF	; 255
    2668:	88 81       	ld	r24, Y
    266a:	99 81       	ldd	r25, Y+1	; 0x01
    266c:	80 0f       	add	r24, r16
    266e:	91 1f       	adc	r25, r17
    2670:	9b 8b       	std	Y+19, r25	; 0x13
    2672:	8a 8b       	std	Y+18, r24	; 0x12
    2674:	80 e0       	ldi	r24, 0x00	; 0
    2676:	0d c0       	rjmp	.+26     	; 0x2692 <dir_sdi+0x160>
    2678:	82 e0       	ldi	r24, 0x02	; 2
    267a:	0b c0       	rjmp	.+22     	; 0x2692 <dir_sdi+0x160>
    267c:	82 e0       	ldi	r24, 0x02	; 2
    267e:	09 c0       	rjmp	.+18     	; 0x2692 <dir_sdi+0x160>
    2680:	82 e0       	ldi	r24, 0x02	; 2
    2682:	07 c0       	rjmp	.+14     	; 0x2692 <dir_sdi+0x160>
    2684:	81 e0       	ldi	r24, 0x01	; 1
    2686:	05 c0       	rjmp	.+10     	; 0x2692 <dir_sdi+0x160>
    2688:	82 e0       	ldi	r24, 0x02	; 2
    268a:	03 c0       	rjmp	.+6      	; 0x2692 <dir_sdi+0x160>
    268c:	82 e0       	ldi	r24, 0x02	; 2
    268e:	01 c0       	rjmp	.+2      	; 0x2692 <dir_sdi+0x160>
    2690:	82 e0       	ldi	r24, 0x02	; 2
    2692:	df 91       	pop	r29
    2694:	cf 91       	pop	r28
    2696:	1f 91       	pop	r17
    2698:	0f 91       	pop	r16
    269a:	ff 90       	pop	r15
    269c:	ef 90       	pop	r14
    269e:	df 90       	pop	r13
    26a0:	cf 90       	pop	r12
    26a2:	bf 90       	pop	r11
    26a4:	af 90       	pop	r10
    26a6:	08 95       	ret

000026a8 <put_fat>:
    26a8:	4f 92       	push	r4
    26aa:	5f 92       	push	r5
    26ac:	6f 92       	push	r6
    26ae:	7f 92       	push	r7
    26b0:	8f 92       	push	r8
    26b2:	9f 92       	push	r9
    26b4:	af 92       	push	r10
    26b6:	bf 92       	push	r11
    26b8:	cf 92       	push	r12
    26ba:	df 92       	push	r13
    26bc:	ef 92       	push	r14
    26be:	ff 92       	push	r15
    26c0:	0f 93       	push	r16
    26c2:	1f 93       	push	r17
    26c4:	cf 93       	push	r28
    26c6:	df 93       	push	r29
    26c8:	ec 01       	movw	r28, r24
    26ca:	6a 01       	movw	r12, r20
    26cc:	7b 01       	movw	r14, r22
    26ce:	28 01       	movw	r4, r16
    26d0:	39 01       	movw	r6, r18
    26d2:	42 30       	cpi	r20, 0x02	; 2
    26d4:	51 05       	cpc	r21, r1
    26d6:	61 05       	cpc	r22, r1
    26d8:	71 05       	cpc	r23, r1
    26da:	08 f4       	brcc	.+2      	; 0x26de <put_fat+0x36>
    26dc:	d8 c0       	rjmp	.+432    	; 0x288e <put_fat+0x1e6>
    26de:	8a 89       	ldd	r24, Y+18	; 0x12
    26e0:	9b 89       	ldd	r25, Y+19	; 0x13
    26e2:	ac 89       	ldd	r26, Y+20	; 0x14
    26e4:	bd 89       	ldd	r27, Y+21	; 0x15
    26e6:	48 17       	cp	r20, r24
    26e8:	59 07       	cpc	r21, r25
    26ea:	6a 07       	cpc	r22, r26
    26ec:	7b 07       	cpc	r23, r27
    26ee:	08 f0       	brcs	.+2      	; 0x26f2 <put_fat+0x4a>
    26f0:	d0 c0       	rjmp	.+416    	; 0x2892 <put_fat+0x1ea>
    26f2:	88 81       	ld	r24, Y
    26f4:	82 30       	cpi	r24, 0x02	; 2
    26f6:	09 f4       	brne	.+2      	; 0x26fa <put_fat+0x52>
    26f8:	62 c0       	rjmp	.+196    	; 0x27be <put_fat+0x116>
    26fa:	83 30       	cpi	r24, 0x03	; 3
    26fc:	09 f4       	brne	.+2      	; 0x2700 <put_fat+0x58>
    26fe:	85 c0       	rjmp	.+266    	; 0x280a <put_fat+0x162>
    2700:	81 30       	cpi	r24, 0x01	; 1
    2702:	09 f0       	breq	.+2      	; 0x2706 <put_fat+0x5e>
    2704:	c8 c0       	rjmp	.+400    	; 0x2896 <put_fat+0x1ee>
    2706:	5a 01       	movw	r10, r20
    2708:	b6 94       	lsr	r11
    270a:	a7 94       	ror	r10
    270c:	a4 0e       	add	r10, r20
    270e:	b5 1e       	adc	r11, r21
    2710:	c5 01       	movw	r24, r10
    2712:	89 2f       	mov	r24, r25
    2714:	99 27       	eor	r25, r25
    2716:	86 95       	lsr	r24
    2718:	4e 8d       	ldd	r20, Y+30	; 0x1e
    271a:	5f 8d       	ldd	r21, Y+31	; 0x1f
    271c:	68 a1       	ldd	r22, Y+32	; 0x20
    271e:	79 a1       	ldd	r23, Y+33	; 0x21
    2720:	48 0f       	add	r20, r24
    2722:	59 1f       	adc	r21, r25
    2724:	61 1d       	adc	r22, r1
    2726:	71 1d       	adc	r23, r1
    2728:	ce 01       	movw	r24, r28
    272a:	4b d9       	rcall	.-3434   	; 0x19c2 <move_window>
    272c:	18 2f       	mov	r17, r24
    272e:	81 11       	cpse	r24, r1
    2730:	d0 c0       	rjmp	.+416    	; 0x28d2 <put_fat+0x22a>
    2732:	45 01       	movw	r8, r10
    2734:	8f ef       	ldi	r24, 0xFF	; 255
    2736:	88 1a       	sub	r8, r24
    2738:	98 0a       	sbc	r9, r24
    273a:	a1 e0       	ldi	r26, 0x01	; 1
    273c:	ba 22       	and	r11, r26
    273e:	c0 fe       	sbrs	r12, 0
    2740:	20 c0       	rjmp	.+64     	; 0x2782 <put_fat+0xda>
    2742:	fe 01       	movw	r30, r28
    2744:	ea 0d       	add	r30, r10
    2746:	fb 1d       	adc	r31, r11
    2748:	86 a5       	ldd	r24, Z+46	; 0x2e
    274a:	28 2f       	mov	r18, r24
    274c:	2f 70       	andi	r18, 0x0F	; 15
    274e:	b0 e1       	ldi	r27, 0x10	; 16
    2750:	4b 9e       	mul	r4, r27
    2752:	c0 01       	movw	r24, r0
    2754:	11 24       	eor	r1, r1
    2756:	82 2b       	or	r24, r18
    2758:	86 a7       	std	Z+46, r24	; 0x2e
    275a:	81 e0       	ldi	r24, 0x01	; 1
    275c:	8c 83       	std	Y+4, r24	; 0x04
    275e:	4e 8d       	ldd	r20, Y+30	; 0x1e
    2760:	5f 8d       	ldd	r21, Y+31	; 0x1f
    2762:	68 a1       	ldd	r22, Y+32	; 0x20
    2764:	79 a1       	ldd	r23, Y+33	; 0x21
    2766:	c4 01       	movw	r24, r8
    2768:	89 2f       	mov	r24, r25
    276a:	99 27       	eor	r25, r25
    276c:	86 95       	lsr	r24
    276e:	48 0f       	add	r20, r24
    2770:	59 1f       	adc	r21, r25
    2772:	61 1d       	adc	r22, r1
    2774:	71 1d       	adc	r23, r1
    2776:	ce 01       	movw	r24, r28
    2778:	24 d9       	rcall	.-3512   	; 0x19c2 <move_window>
    277a:	88 23       	and	r24, r24
    277c:	09 f4       	brne	.+2      	; 0x2780 <put_fat+0xd8>
    277e:	91 c0       	rjmp	.+290    	; 0x28a2 <put_fat+0x1fa>
    2780:	8c c0       	rjmp	.+280    	; 0x289a <put_fat+0x1f2>
    2782:	fe 01       	movw	r30, r28
    2784:	ea 0d       	add	r30, r10
    2786:	fb 1d       	adc	r31, r11
    2788:	46 a6       	std	Z+46, r4	; 0x2e
    278a:	81 e0       	ldi	r24, 0x01	; 1
    278c:	8c 83       	std	Y+4, r24	; 0x04
    278e:	4e 8d       	ldd	r20, Y+30	; 0x1e
    2790:	5f 8d       	ldd	r21, Y+31	; 0x1f
    2792:	68 a1       	ldd	r22, Y+32	; 0x20
    2794:	79 a1       	ldd	r23, Y+33	; 0x21
    2796:	c4 01       	movw	r24, r8
    2798:	89 2f       	mov	r24, r25
    279a:	99 27       	eor	r25, r25
    279c:	86 95       	lsr	r24
    279e:	48 0f       	add	r20, r24
    27a0:	59 1f       	adc	r21, r25
    27a2:	61 1d       	adc	r22, r1
    27a4:	71 1d       	adc	r23, r1
    27a6:	ce 01       	movw	r24, r28
    27a8:	0c d9       	rcall	.-3560   	; 0x19c2 <move_window>
    27aa:	88 23       	and	r24, r24
    27ac:	09 f4       	brne	.+2      	; 0x27b0 <put_fat+0x108>
    27ae:	84 c0       	rjmp	.+264    	; 0x28b8 <put_fat+0x210>
    27b0:	76 c0       	rjmp	.+236    	; 0x289e <put_fat+0x1f6>
    27b2:	ec 0f       	add	r30, r28
    27b4:	fd 1f       	adc	r31, r29
    27b6:	46 a6       	std	Z+46, r4	; 0x2e
    27b8:	81 e0       	ldi	r24, 0x01	; 1
    27ba:	8c 83       	std	Y+4, r24	; 0x04
    27bc:	8a c0       	rjmp	.+276    	; 0x28d2 <put_fat+0x22a>
    27be:	45 2f       	mov	r20, r21
    27c0:	56 2f       	mov	r21, r22
    27c2:	67 2f       	mov	r22, r23
    27c4:	77 27       	eor	r23, r23
    27c6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    27c8:	9f 8d       	ldd	r25, Y+31	; 0x1f
    27ca:	a8 a1       	ldd	r26, Y+32	; 0x20
    27cc:	b9 a1       	ldd	r27, Y+33	; 0x21
    27ce:	48 0f       	add	r20, r24
    27d0:	59 1f       	adc	r21, r25
    27d2:	6a 1f       	adc	r22, r26
    27d4:	7b 1f       	adc	r23, r27
    27d6:	ce 01       	movw	r24, r28
    27d8:	f4 d8       	rcall	.-3608   	; 0x19c2 <move_window>
    27da:	18 2f       	mov	r17, r24
    27dc:	81 11       	cpse	r24, r1
    27de:	79 c0       	rjmp	.+242    	; 0x28d2 <put_fat+0x22a>
    27e0:	cc 0c       	add	r12, r12
    27e2:	dd 1c       	adc	r13, r13
    27e4:	ee 1c       	adc	r14, r14
    27e6:	ff 1c       	adc	r15, r15
    27e8:	e8 94       	clt
    27ea:	c0 f8       	bld	r12, 0
    27ec:	31 e0       	ldi	r19, 0x01	; 1
    27ee:	d3 22       	and	r13, r19
    27f0:	ee 24       	eor	r14, r14
    27f2:	ff 24       	eor	r15, r15
    27f4:	fe 01       	movw	r30, r28
    27f6:	ec 0d       	add	r30, r12
    27f8:	fd 1d       	adc	r31, r13
    27fa:	46 a6       	std	Z+46, r4	; 0x2e
    27fc:	fe 01       	movw	r30, r28
    27fe:	ec 0d       	add	r30, r12
    2800:	fd 1d       	adc	r31, r13
    2802:	57 a6       	std	Z+47, r5	; 0x2f
    2804:	81 e0       	ldi	r24, 0x01	; 1
    2806:	8c 83       	std	Y+4, r24	; 0x04
    2808:	64 c0       	rjmp	.+200    	; 0x28d2 <put_fat+0x22a>
    280a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    280c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    280e:	a8 a1       	ldd	r26, Y+32	; 0x20
    2810:	b9 a1       	ldd	r27, Y+33	; 0x21
    2812:	68 94       	set
    2814:	16 f8       	bld	r1, 6
    2816:	76 95       	lsr	r23
    2818:	67 95       	ror	r22
    281a:	57 95       	ror	r21
    281c:	47 95       	ror	r20
    281e:	16 94       	lsr	r1
    2820:	d1 f7       	brne	.-12     	; 0x2816 <put_fat+0x16e>
    2822:	48 0f       	add	r20, r24
    2824:	59 1f       	adc	r21, r25
    2826:	6a 1f       	adc	r22, r26
    2828:	7b 1f       	adc	r23, r27
    282a:	ce 01       	movw	r24, r28
    282c:	ca d8       	rcall	.-3692   	; 0x19c2 <move_window>
    282e:	18 2f       	mov	r17, r24
    2830:	81 11       	cpse	r24, r1
    2832:	4f c0       	rjmp	.+158    	; 0x28d2 <put_fat+0x22a>
    2834:	cc 0c       	add	r12, r12
    2836:	dd 1c       	adc	r13, r13
    2838:	ee 1c       	adc	r14, r14
    283a:	ff 1c       	adc	r15, r15
    283c:	cc 0c       	add	r12, r12
    283e:	dd 1c       	adc	r13, r13
    2840:	ee 1c       	adc	r14, r14
    2842:	ff 1c       	adc	r15, r15
    2844:	8c ef       	ldi	r24, 0xFC	; 252
    2846:	c8 22       	and	r12, r24
    2848:	81 e0       	ldi	r24, 0x01	; 1
    284a:	d8 22       	and	r13, r24
    284c:	ee 24       	eor	r14, r14
    284e:	ff 24       	eor	r15, r15
    2850:	f6 01       	movw	r30, r12
    2852:	be 96       	adiw	r30, 0x2e	; 46
    2854:	ec 0f       	add	r30, r28
    2856:	fd 1f       	adc	r31, r29
    2858:	83 81       	ldd	r24, Z+3	; 0x03
    285a:	90 e0       	ldi	r25, 0x00	; 0
    285c:	a0 e0       	ldi	r26, 0x00	; 0
    285e:	b0 e0       	ldi	r27, 0x00	; 0
    2860:	b8 2f       	mov	r27, r24
    2862:	aa 27       	eor	r26, r26
    2864:	99 27       	eor	r25, r25
    2866:	88 27       	eor	r24, r24
    2868:	cc 0e       	add	r12, r28
    286a:	dd 1e       	adc	r13, r29
    286c:	88 27       	eor	r24, r24
    286e:	99 27       	eor	r25, r25
    2870:	aa 27       	eor	r26, r26
    2872:	b0 7f       	andi	r27, 0xF0	; 240
    2874:	48 2a       	or	r4, r24
    2876:	59 2a       	or	r5, r25
    2878:	6a 2a       	or	r6, r26
    287a:	7b 2a       	or	r7, r27
    287c:	d6 01       	movw	r26, r12
    287e:	9e 96       	adiw	r26, 0x2e	; 46
    2880:	4c 92       	st	X, r4
    2882:	51 82       	std	Z+1, r5	; 0x01
    2884:	62 82       	std	Z+2, r6	; 0x02
    2886:	73 82       	std	Z+3, r7	; 0x03
    2888:	81 e0       	ldi	r24, 0x01	; 1
    288a:	8c 83       	std	Y+4, r24	; 0x04
    288c:	22 c0       	rjmp	.+68     	; 0x28d2 <put_fat+0x22a>
    288e:	12 e0       	ldi	r17, 0x02	; 2
    2890:	20 c0       	rjmp	.+64     	; 0x28d2 <put_fat+0x22a>
    2892:	12 e0       	ldi	r17, 0x02	; 2
    2894:	1e c0       	rjmp	.+60     	; 0x28d2 <put_fat+0x22a>
    2896:	12 e0       	ldi	r17, 0x02	; 2
    2898:	1c c0       	rjmp	.+56     	; 0x28d2 <put_fat+0x22a>
    289a:	18 2f       	mov	r17, r24
    289c:	1a c0       	rjmp	.+52     	; 0x28d2 <put_fat+0x22a>
    289e:	18 2f       	mov	r17, r24
    28a0:	18 c0       	rjmp	.+48     	; 0x28d2 <put_fat+0x22a>
    28a2:	f4 01       	movw	r30, r8
    28a4:	f1 70       	andi	r31, 0x01	; 1
    28a6:	68 94       	set
    28a8:	13 f8       	bld	r1, 3
    28aa:	76 94       	lsr	r7
    28ac:	67 94       	ror	r6
    28ae:	57 94       	ror	r5
    28b0:	47 94       	ror	r4
    28b2:	16 94       	lsr	r1
    28b4:	d1 f7       	brne	.-12     	; 0x28aa <put_fat+0x202>
    28b6:	7d cf       	rjmp	.-262    	; 0x27b2 <put_fat+0x10a>
    28b8:	f4 01       	movw	r30, r8
    28ba:	f1 70       	andi	r31, 0x01	; 1
    28bc:	de 01       	movw	r26, r28
    28be:	ae 0f       	add	r26, r30
    28c0:	bf 1f       	adc	r27, r31
    28c2:	9e 96       	adiw	r26, 0x2e	; 46
    28c4:	9c 91       	ld	r25, X
    28c6:	90 7f       	andi	r25, 0xF0	; 240
    28c8:	85 2d       	mov	r24, r5
    28ca:	8f 70       	andi	r24, 0x0F	; 15
    28cc:	49 2e       	mov	r4, r25
    28ce:	48 2a       	or	r4, r24
    28d0:	70 cf       	rjmp	.-288    	; 0x27b2 <put_fat+0x10a>
    28d2:	81 2f       	mov	r24, r17
    28d4:	df 91       	pop	r29
    28d6:	cf 91       	pop	r28
    28d8:	1f 91       	pop	r17
    28da:	0f 91       	pop	r16
    28dc:	ff 90       	pop	r15
    28de:	ef 90       	pop	r14
    28e0:	df 90       	pop	r13
    28e2:	cf 90       	pop	r12
    28e4:	bf 90       	pop	r11
    28e6:	af 90       	pop	r10
    28e8:	9f 90       	pop	r9
    28ea:	8f 90       	pop	r8
    28ec:	7f 90       	pop	r7
    28ee:	6f 90       	pop	r6
    28f0:	5f 90       	pop	r5
    28f2:	4f 90       	pop	r4
    28f4:	08 95       	ret

000028f6 <create_chain>:
    28f6:	2f 92       	push	r2
    28f8:	3f 92       	push	r3
    28fa:	4f 92       	push	r4
    28fc:	5f 92       	push	r5
    28fe:	6f 92       	push	r6
    2900:	7f 92       	push	r7
    2902:	8f 92       	push	r8
    2904:	9f 92       	push	r9
    2906:	af 92       	push	r10
    2908:	bf 92       	push	r11
    290a:	cf 92       	push	r12
    290c:	df 92       	push	r13
    290e:	ef 92       	push	r14
    2910:	ff 92       	push	r15
    2912:	0f 93       	push	r16
    2914:	1f 93       	push	r17
    2916:	cf 93       	push	r28
    2918:	df 93       	push	r29
    291a:	ec 01       	movw	r28, r24
    291c:	2a 01       	movw	r4, r20
    291e:	3b 01       	movw	r6, r22
    2920:	41 15       	cp	r20, r1
    2922:	51 05       	cpc	r21, r1
    2924:	61 05       	cpc	r22, r1
    2926:	71 05       	cpc	r23, r1
    2928:	b9 f4       	brne	.+46     	; 0x2958 <create_chain+0x62>
    292a:	8a 84       	ldd	r8, Y+10	; 0x0a
    292c:	9b 84       	ldd	r9, Y+11	; 0x0b
    292e:	ac 84       	ldd	r10, Y+12	; 0x0c
    2930:	bd 84       	ldd	r11, Y+13	; 0x0d
    2932:	81 14       	cp	r8, r1
    2934:	91 04       	cpc	r9, r1
    2936:	a1 04       	cpc	r10, r1
    2938:	b1 04       	cpc	r11, r1
    293a:	59 f1       	breq	.+86     	; 0x2992 <create_chain+0x9c>
    293c:	8a 89       	ldd	r24, Y+18	; 0x12
    293e:	9b 89       	ldd	r25, Y+19	; 0x13
    2940:	ac 89       	ldd	r26, Y+20	; 0x14
    2942:	bd 89       	ldd	r27, Y+21	; 0x15
    2944:	88 16       	cp	r8, r24
    2946:	99 06       	cpc	r9, r25
    2948:	aa 06       	cpc	r10, r26
    294a:	bb 06       	cpc	r11, r27
    294c:	30 f1       	brcs	.+76     	; 0x299a <create_chain+0xa4>
    294e:	81 2c       	mov	r8, r1
    2950:	91 2c       	mov	r9, r1
    2952:	54 01       	movw	r10, r8
    2954:	83 94       	inc	r8
    2956:	21 c0       	rjmp	.+66     	; 0x299a <create_chain+0xa4>
    2958:	ed dc       	rcall	.-1574   	; 0x2334 <get_fat>
    295a:	6b 01       	movw	r12, r22
    295c:	7c 01       	movw	r14, r24
    295e:	62 30       	cpi	r22, 0x02	; 2
    2960:	71 05       	cpc	r23, r1
    2962:	81 05       	cpc	r24, r1
    2964:	91 05       	cpc	r25, r1
    2966:	08 f4       	brcc	.+2      	; 0x296a <create_chain+0x74>
    2968:	96 c0       	rjmp	.+300    	; 0x2a96 <create_chain+0x1a0>
    296a:	8f ef       	ldi	r24, 0xFF	; 255
    296c:	c8 16       	cp	r12, r24
    296e:	d8 06       	cpc	r13, r24
    2970:	e8 06       	cpc	r14, r24
    2972:	f8 06       	cpc	r15, r24
    2974:	09 f4       	brne	.+2      	; 0x2978 <create_chain+0x82>
    2976:	94 c0       	rjmp	.+296    	; 0x2aa0 <create_chain+0x1aa>
    2978:	8a 89       	ldd	r24, Y+18	; 0x12
    297a:	9b 89       	ldd	r25, Y+19	; 0x13
    297c:	ac 89       	ldd	r26, Y+20	; 0x14
    297e:	bd 89       	ldd	r27, Y+21	; 0x15
    2980:	c8 16       	cp	r12, r24
    2982:	d9 06       	cpc	r13, r25
    2984:	ea 06       	cpc	r14, r26
    2986:	fb 06       	cpc	r15, r27
    2988:	08 f4       	brcc	.+2      	; 0x298c <create_chain+0x96>
    298a:	8f c0       	rjmp	.+286    	; 0x2aaa <create_chain+0x1b4>
    298c:	53 01       	movw	r10, r6
    298e:	42 01       	movw	r8, r4
    2990:	04 c0       	rjmp	.+8      	; 0x299a <create_chain+0xa4>
    2992:	81 2c       	mov	r8, r1
    2994:	91 2c       	mov	r9, r1
    2996:	54 01       	movw	r10, r8
    2998:	83 94       	inc	r8
    299a:	75 01       	movw	r14, r10
    299c:	64 01       	movw	r12, r8
    299e:	68 94       	set
    29a0:	22 24       	eor	r2, r2
    29a2:	21 f8       	bld	r2, 1
    29a4:	31 2c       	mov	r3, r1
    29a6:	00 e0       	ldi	r16, 0x00	; 0
    29a8:	10 e0       	ldi	r17, 0x00	; 0
    29aa:	2f ef       	ldi	r18, 0xFF	; 255
    29ac:	c2 1a       	sub	r12, r18
    29ae:	d2 0a       	sbc	r13, r18
    29b0:	e2 0a       	sbc	r14, r18
    29b2:	f2 0a       	sbc	r15, r18
    29b4:	8a 89       	ldd	r24, Y+18	; 0x12
    29b6:	9b 89       	ldd	r25, Y+19	; 0x13
    29b8:	ac 89       	ldd	r26, Y+20	; 0x14
    29ba:	bd 89       	ldd	r27, Y+21	; 0x15
    29bc:	c8 16       	cp	r12, r24
    29be:	d9 06       	cpc	r13, r25
    29c0:	ea 06       	cpc	r14, r26
    29c2:	fb 06       	cpc	r15, r27
    29c4:	58 f0       	brcs	.+22     	; 0x29dc <create_chain+0xe6>
    29c6:	82 e0       	ldi	r24, 0x02	; 2
    29c8:	88 16       	cp	r8, r24
    29ca:	91 04       	cpc	r9, r1
    29cc:	a1 04       	cpc	r10, r1
    29ce:	b1 04       	cpc	r11, r1
    29d0:	08 f4       	brcc	.+2      	; 0x29d4 <create_chain+0xde>
    29d2:	70 c0       	rjmp	.+224    	; 0x2ab4 <create_chain+0x1be>
    29d4:	c2 2c       	mov	r12, r2
    29d6:	d3 2c       	mov	r13, r3
    29d8:	e0 2e       	mov	r14, r16
    29da:	f1 2e       	mov	r15, r17
    29dc:	b7 01       	movw	r22, r14
    29de:	a6 01       	movw	r20, r12
    29e0:	ce 01       	movw	r24, r28
    29e2:	a8 dc       	rcall	.-1712   	; 0x2334 <get_fat>
    29e4:	61 15       	cp	r22, r1
    29e6:	71 05       	cpc	r23, r1
    29e8:	81 05       	cpc	r24, r1
    29ea:	91 05       	cpc	r25, r1
    29ec:	99 f0       	breq	.+38     	; 0x2a14 <create_chain+0x11e>
    29ee:	6f 3f       	cpi	r22, 0xFF	; 255
    29f0:	2f ef       	ldi	r18, 0xFF	; 255
    29f2:	72 07       	cpc	r23, r18
    29f4:	82 07       	cpc	r24, r18
    29f6:	92 07       	cpc	r25, r18
    29f8:	09 f4       	brne	.+2      	; 0x29fc <create_chain+0x106>
    29fa:	61 c0       	rjmp	.+194    	; 0x2abe <create_chain+0x1c8>
    29fc:	61 30       	cpi	r22, 0x01	; 1
    29fe:	71 05       	cpc	r23, r1
    2a00:	81 05       	cpc	r24, r1
    2a02:	91 05       	cpc	r25, r1
    2a04:	09 f4       	brne	.+2      	; 0x2a08 <create_chain+0x112>
    2a06:	60 c0       	rjmp	.+192    	; 0x2ac8 <create_chain+0x1d2>
    2a08:	c8 14       	cp	r12, r8
    2a0a:	d9 04       	cpc	r13, r9
    2a0c:	ea 04       	cpc	r14, r10
    2a0e:	fb 04       	cpc	r15, r11
    2a10:	61 f6       	brne	.-104    	; 0x29aa <create_chain+0xb4>
    2a12:	5f c0       	rjmp	.+190    	; 0x2ad2 <create_chain+0x1dc>
    2a14:	8c 2c       	mov	r8, r12
    2a16:	9d 2c       	mov	r9, r13
    2a18:	ae 2c       	mov	r10, r14
    2a1a:	bf 2c       	mov	r11, r15
    2a1c:	0f ef       	ldi	r16, 0xFF	; 255
    2a1e:	1f ef       	ldi	r17, 0xFF	; 255
    2a20:	2f ef       	ldi	r18, 0xFF	; 255
    2a22:	3f e0       	ldi	r19, 0x0F	; 15
    2a24:	b7 01       	movw	r22, r14
    2a26:	a6 01       	movw	r20, r12
    2a28:	ce 01       	movw	r24, r28
    2a2a:	3e de       	rcall	.-900    	; 0x26a8 <put_fat>
    2a2c:	81 11       	cpse	r24, r1
    2a2e:	2c c0       	rjmp	.+88     	; 0x2a88 <create_chain+0x192>
    2a30:	41 14       	cp	r4, r1
    2a32:	51 04       	cpc	r5, r1
    2a34:	61 04       	cpc	r6, r1
    2a36:	71 04       	cpc	r7, r1
    2a38:	51 f0       	breq	.+20     	; 0x2a4e <create_chain+0x158>
    2a3a:	0c 2d       	mov	r16, r12
    2a3c:	1d 2d       	mov	r17, r13
    2a3e:	2e 2d       	mov	r18, r14
    2a40:	3f 2d       	mov	r19, r15
    2a42:	b3 01       	movw	r22, r6
    2a44:	a2 01       	movw	r20, r4
    2a46:	ce 01       	movw	r24, r28
    2a48:	2f de       	rcall	.-930    	; 0x26a8 <put_fat>
    2a4a:	81 11       	cpse	r24, r1
    2a4c:	1d c0       	rjmp	.+58     	; 0x2a88 <create_chain+0x192>
    2a4e:	8a 86       	std	Y+10, r8	; 0x0a
    2a50:	9b 86       	std	Y+11, r9	; 0x0b
    2a52:	ac 86       	std	Y+12, r10	; 0x0c
    2a54:	bd 86       	std	Y+13, r11	; 0x0d
    2a56:	8e 85       	ldd	r24, Y+14	; 0x0e
    2a58:	9f 85       	ldd	r25, Y+15	; 0x0f
    2a5a:	a8 89       	ldd	r26, Y+16	; 0x10
    2a5c:	b9 89       	ldd	r27, Y+17	; 0x11
    2a5e:	8f 3f       	cpi	r24, 0xFF	; 255
    2a60:	2f ef       	ldi	r18, 0xFF	; 255
    2a62:	92 07       	cpc	r25, r18
    2a64:	a2 07       	cpc	r26, r18
    2a66:	b2 07       	cpc	r27, r18
    2a68:	c9 f1       	breq	.+114    	; 0x2adc <create_chain+0x1e6>
    2a6a:	01 97       	sbiw	r24, 0x01	; 1
    2a6c:	a1 09       	sbc	r26, r1
    2a6e:	b1 09       	sbc	r27, r1
    2a70:	8e 87       	std	Y+14, r24	; 0x0e
    2a72:	9f 87       	std	Y+15, r25	; 0x0f
    2a74:	a8 8b       	std	Y+16, r26	; 0x10
    2a76:	b9 8b       	std	Y+17, r27	; 0x11
    2a78:	8d 81       	ldd	r24, Y+5	; 0x05
    2a7a:	81 60       	ori	r24, 0x01	; 1
    2a7c:	8d 83       	std	Y+5, r24	; 0x05
    2a7e:	6c 2d       	mov	r22, r12
    2a80:	7d 2d       	mov	r23, r13
    2a82:	8e 2d       	mov	r24, r14
    2a84:	9f 2d       	mov	r25, r15
    2a86:	33 c0       	rjmp	.+102    	; 0x2aee <create_chain+0x1f8>
    2a88:	81 30       	cpi	r24, 0x01	; 1
    2a8a:	69 f1       	breq	.+90     	; 0x2ae6 <create_chain+0x1f0>
    2a8c:	61 e0       	ldi	r22, 0x01	; 1
    2a8e:	70 e0       	ldi	r23, 0x00	; 0
    2a90:	80 e0       	ldi	r24, 0x00	; 0
    2a92:	90 e0       	ldi	r25, 0x00	; 0
    2a94:	2c c0       	rjmp	.+88     	; 0x2aee <create_chain+0x1f8>
    2a96:	61 e0       	ldi	r22, 0x01	; 1
    2a98:	70 e0       	ldi	r23, 0x00	; 0
    2a9a:	80 e0       	ldi	r24, 0x00	; 0
    2a9c:	90 e0       	ldi	r25, 0x00	; 0
    2a9e:	27 c0       	rjmp	.+78     	; 0x2aee <create_chain+0x1f8>
    2aa0:	6f ef       	ldi	r22, 0xFF	; 255
    2aa2:	7f ef       	ldi	r23, 0xFF	; 255
    2aa4:	8f ef       	ldi	r24, 0xFF	; 255
    2aa6:	9f ef       	ldi	r25, 0xFF	; 255
    2aa8:	22 c0       	rjmp	.+68     	; 0x2aee <create_chain+0x1f8>
    2aaa:	6c 2d       	mov	r22, r12
    2aac:	7d 2d       	mov	r23, r13
    2aae:	8e 2d       	mov	r24, r14
    2ab0:	9f 2d       	mov	r25, r15
    2ab2:	1d c0       	rjmp	.+58     	; 0x2aee <create_chain+0x1f8>
    2ab4:	60 e0       	ldi	r22, 0x00	; 0
    2ab6:	70 e0       	ldi	r23, 0x00	; 0
    2ab8:	80 e0       	ldi	r24, 0x00	; 0
    2aba:	90 e0       	ldi	r25, 0x00	; 0
    2abc:	18 c0       	rjmp	.+48     	; 0x2aee <create_chain+0x1f8>
    2abe:	6f ef       	ldi	r22, 0xFF	; 255
    2ac0:	7f ef       	ldi	r23, 0xFF	; 255
    2ac2:	8f ef       	ldi	r24, 0xFF	; 255
    2ac4:	9f ef       	ldi	r25, 0xFF	; 255
    2ac6:	13 c0       	rjmp	.+38     	; 0x2aee <create_chain+0x1f8>
    2ac8:	61 e0       	ldi	r22, 0x01	; 1
    2aca:	70 e0       	ldi	r23, 0x00	; 0
    2acc:	80 e0       	ldi	r24, 0x00	; 0
    2ace:	90 e0       	ldi	r25, 0x00	; 0
    2ad0:	0e c0       	rjmp	.+28     	; 0x2aee <create_chain+0x1f8>
    2ad2:	60 e0       	ldi	r22, 0x00	; 0
    2ad4:	70 e0       	ldi	r23, 0x00	; 0
    2ad6:	80 e0       	ldi	r24, 0x00	; 0
    2ad8:	90 e0       	ldi	r25, 0x00	; 0
    2ada:	09 c0       	rjmp	.+18     	; 0x2aee <create_chain+0x1f8>
    2adc:	6c 2d       	mov	r22, r12
    2ade:	7d 2d       	mov	r23, r13
    2ae0:	8e 2d       	mov	r24, r14
    2ae2:	9f 2d       	mov	r25, r15
    2ae4:	04 c0       	rjmp	.+8      	; 0x2aee <create_chain+0x1f8>
    2ae6:	6f ef       	ldi	r22, 0xFF	; 255
    2ae8:	7f ef       	ldi	r23, 0xFF	; 255
    2aea:	8f ef       	ldi	r24, 0xFF	; 255
    2aec:	9f ef       	ldi	r25, 0xFF	; 255
    2aee:	df 91       	pop	r29
    2af0:	cf 91       	pop	r28
    2af2:	1f 91       	pop	r17
    2af4:	0f 91       	pop	r16
    2af6:	ff 90       	pop	r15
    2af8:	ef 90       	pop	r14
    2afa:	df 90       	pop	r13
    2afc:	cf 90       	pop	r12
    2afe:	bf 90       	pop	r11
    2b00:	af 90       	pop	r10
    2b02:	9f 90       	pop	r9
    2b04:	8f 90       	pop	r8
    2b06:	7f 90       	pop	r7
    2b08:	6f 90       	pop	r6
    2b0a:	5f 90       	pop	r5
    2b0c:	4f 90       	pop	r4
    2b0e:	3f 90       	pop	r3
    2b10:	2f 90       	pop	r2
    2b12:	08 95       	ret

00002b14 <dir_next>:
    2b14:	7f 92       	push	r7
    2b16:	8f 92       	push	r8
    2b18:	9f 92       	push	r9
    2b1a:	af 92       	push	r10
    2b1c:	bf 92       	push	r11
    2b1e:	cf 92       	push	r12
    2b20:	df 92       	push	r13
    2b22:	ef 92       	push	r14
    2b24:	ff 92       	push	r15
    2b26:	0f 93       	push	r16
    2b28:	1f 93       	push	r17
    2b2a:	cf 93       	push	r28
    2b2c:	df 93       	push	r29
    2b2e:	dc 01       	movw	r26, r24
    2b30:	14 96       	adiw	r26, 0x04	; 4
    2b32:	cd 91       	ld	r28, X+
    2b34:	dc 91       	ld	r29, X
    2b36:	15 97       	sbiw	r26, 0x05	; 5
    2b38:	21 96       	adiw	r28, 0x01	; 1
    2b3a:	09 f4       	brne	.+2      	; 0x2b3e <dir_next+0x2a>
    2b3c:	03 c1       	rjmp	.+518    	; 0x2d44 <dir_next+0x230>
    2b3e:	1e 96       	adiw	r26, 0x0e	; 14
    2b40:	8d 90       	ld	r8, X+
    2b42:	9d 90       	ld	r9, X+
    2b44:	ad 90       	ld	r10, X+
    2b46:	bc 90       	ld	r11, X
    2b48:	51 97       	sbiw	r26, 0x11	; 17
    2b4a:	81 14       	cp	r8, r1
    2b4c:	91 04       	cpc	r9, r1
    2b4e:	a1 04       	cpc	r10, r1
    2b50:	b1 04       	cpc	r11, r1
    2b52:	09 f4       	brne	.+2      	; 0x2b56 <dir_next+0x42>
    2b54:	f9 c0       	rjmp	.+498    	; 0x2d48 <dir_next+0x234>
    2b56:	7b 01       	movw	r14, r22
    2b58:	8c 01       	movw	r16, r24
    2b5a:	6e 01       	movw	r12, r28
    2b5c:	bf e0       	ldi	r27, 0x0F	; 15
    2b5e:	cb 22       	and	r12, r27
    2b60:	dd 24       	eor	r13, r13
    2b62:	c1 14       	cp	r12, r1
    2b64:	d1 04       	cpc	r13, r1
    2b66:	09 f0       	breq	.+2      	; 0x2b6a <dir_next+0x56>
    2b68:	d1 c0       	rjmp	.+418    	; 0x2d0c <dir_next+0x1f8>
    2b6a:	ef ef       	ldi	r30, 0xFF	; 255
    2b6c:	8e 1a       	sub	r8, r30
    2b6e:	9e 0a       	sbc	r9, r30
    2b70:	ae 0a       	sbc	r10, r30
    2b72:	be 0a       	sbc	r11, r30
    2b74:	dc 01       	movw	r26, r24
    2b76:	1e 96       	adiw	r26, 0x0e	; 14
    2b78:	8d 92       	st	X+, r8
    2b7a:	9d 92       	st	X+, r9
    2b7c:	ad 92       	st	X+, r10
    2b7e:	bc 92       	st	X, r11
    2b80:	51 97       	sbiw	r26, 0x11	; 17
    2b82:	1a 96       	adiw	r26, 0x0a	; 10
    2b84:	4d 91       	ld	r20, X+
    2b86:	5d 91       	ld	r21, X+
    2b88:	6d 91       	ld	r22, X+
    2b8a:	7c 91       	ld	r23, X
    2b8c:	1d 97       	sbiw	r26, 0x0d	; 13
    2b8e:	41 15       	cp	r20, r1
    2b90:	51 05       	cpc	r21, r1
    2b92:	61 05       	cpc	r22, r1
    2b94:	71 05       	cpc	r23, r1
    2b96:	49 f4       	brne	.+18     	; 0x2baa <dir_next+0x96>
    2b98:	ed 91       	ld	r30, X+
    2b9a:	fc 91       	ld	r31, X
    2b9c:	80 85       	ldd	r24, Z+8	; 0x08
    2b9e:	91 85       	ldd	r25, Z+9	; 0x09
    2ba0:	c8 17       	cp	r28, r24
    2ba2:	d9 07       	cpc	r29, r25
    2ba4:	08 f0       	brcs	.+2      	; 0x2ba8 <dir_next+0x94>
    2ba6:	d2 c0       	rjmp	.+420    	; 0x2d4c <dir_next+0x238>
    2ba8:	b1 c0       	rjmp	.+354    	; 0x2d0c <dir_next+0x1f8>
    2baa:	dc 01       	movw	r26, r24
    2bac:	ed 91       	ld	r30, X+
    2bae:	fc 91       	ld	r31, X
    2bb0:	22 81       	ldd	r18, Z+2	; 0x02
    2bb2:	30 e0       	ldi	r19, 0x00	; 0
    2bb4:	21 50       	subi	r18, 0x01	; 1
    2bb6:	31 09       	sbc	r19, r1
    2bb8:	ce 01       	movw	r24, r28
    2bba:	92 95       	swap	r25
    2bbc:	82 95       	swap	r24
    2bbe:	8f 70       	andi	r24, 0x0F	; 15
    2bc0:	89 27       	eor	r24, r25
    2bc2:	9f 70       	andi	r25, 0x0F	; 15
    2bc4:	89 27       	eor	r24, r25
    2bc6:	28 23       	and	r18, r24
    2bc8:	39 23       	and	r19, r25
    2bca:	23 2b       	or	r18, r19
    2bcc:	09 f0       	breq	.+2      	; 0x2bd0 <dir_next+0xbc>
    2bce:	9e c0       	rjmp	.+316    	; 0x2d0c <dir_next+0x1f8>
    2bd0:	cf 01       	movw	r24, r30
    2bd2:	b0 db       	rcall	.-2208   	; 0x2334 <get_fat>
    2bd4:	4b 01       	movw	r8, r22
    2bd6:	5c 01       	movw	r10, r24
    2bd8:	62 30       	cpi	r22, 0x02	; 2
    2bda:	71 05       	cpc	r23, r1
    2bdc:	81 05       	cpc	r24, r1
    2bde:	91 05       	cpc	r25, r1
    2be0:	08 f4       	brcc	.+2      	; 0x2be4 <dir_next+0xd0>
    2be2:	b6 c0       	rjmp	.+364    	; 0x2d50 <dir_next+0x23c>
    2be4:	6f 3f       	cpi	r22, 0xFF	; 255
    2be6:	7f 4f       	sbci	r23, 0xFF	; 255
    2be8:	8f 4f       	sbci	r24, 0xFF	; 255
    2bea:	9f 4f       	sbci	r25, 0xFF	; 255
    2bec:	09 f4       	brne	.+2      	; 0x2bf0 <dir_next+0xdc>
    2bee:	b2 c0       	rjmp	.+356    	; 0x2d54 <dir_next+0x240>
    2bf0:	d8 01       	movw	r26, r16
    2bf2:	ed 91       	ld	r30, X+
    2bf4:	fc 91       	ld	r31, X
    2bf6:	82 89       	ldd	r24, Z+18	; 0x12
    2bf8:	93 89       	ldd	r25, Z+19	; 0x13
    2bfa:	a4 89       	ldd	r26, Z+20	; 0x14
    2bfc:	b5 89       	ldd	r27, Z+21	; 0x15
    2bfe:	88 16       	cp	r8, r24
    2c00:	99 06       	cpc	r9, r25
    2c02:	aa 06       	cpc	r10, r26
    2c04:	bb 06       	cpc	r11, r27
    2c06:	08 f4       	brcc	.+2      	; 0x2c0a <dir_next+0xf6>
    2c08:	70 c0       	rjmp	.+224    	; 0x2cea <dir_next+0x1d6>
    2c0a:	ef 28       	or	r14, r15
    2c0c:	09 f4       	brne	.+2      	; 0x2c10 <dir_next+0xfc>
    2c0e:	a4 c0       	rjmp	.+328    	; 0x2d58 <dir_next+0x244>
    2c10:	d8 01       	movw	r26, r16
    2c12:	1a 96       	adiw	r26, 0x0a	; 10
    2c14:	4d 91       	ld	r20, X+
    2c16:	5d 91       	ld	r21, X+
    2c18:	6d 91       	ld	r22, X+
    2c1a:	7c 91       	ld	r23, X
    2c1c:	1d 97       	sbiw	r26, 0x0d	; 13
    2c1e:	cf 01       	movw	r24, r30
    2c20:	6a de       	rcall	.-812    	; 0x28f6 <create_chain>
    2c22:	4b 01       	movw	r8, r22
    2c24:	5c 01       	movw	r10, r24
    2c26:	61 15       	cp	r22, r1
    2c28:	71 05       	cpc	r23, r1
    2c2a:	81 05       	cpc	r24, r1
    2c2c:	91 05       	cpc	r25, r1
    2c2e:	09 f4       	brne	.+2      	; 0x2c32 <dir_next+0x11e>
    2c30:	95 c0       	rjmp	.+298    	; 0x2d5c <dir_next+0x248>
    2c32:	61 30       	cpi	r22, 0x01	; 1
    2c34:	71 05       	cpc	r23, r1
    2c36:	81 05       	cpc	r24, r1
    2c38:	91 05       	cpc	r25, r1
    2c3a:	09 f4       	brne	.+2      	; 0x2c3e <dir_next+0x12a>
    2c3c:	91 c0       	rjmp	.+290    	; 0x2d60 <dir_next+0x24c>
    2c3e:	6f 3f       	cpi	r22, 0xFF	; 255
    2c40:	7f 4f       	sbci	r23, 0xFF	; 255
    2c42:	8f 4f       	sbci	r24, 0xFF	; 255
    2c44:	9f 4f       	sbci	r25, 0xFF	; 255
    2c46:	09 f4       	brne	.+2      	; 0x2c4a <dir_next+0x136>
    2c48:	8d c0       	rjmp	.+282    	; 0x2d64 <dir_next+0x250>
    2c4a:	d8 01       	movw	r26, r16
    2c4c:	8d 91       	ld	r24, X+
    2c4e:	9c 91       	ld	r25, X
    2c50:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <sync_window>
    2c54:	81 11       	cpse	r24, r1
    2c56:	88 c0       	rjmp	.+272    	; 0x2d68 <dir_next+0x254>
    2c58:	f8 01       	movw	r30, r16
    2c5a:	80 81       	ld	r24, Z
    2c5c:	91 81       	ldd	r25, Z+1	; 0x01
    2c5e:	fc 01       	movw	r30, r24
    2c60:	be 96       	adiw	r30, 0x2e	; 46
    2c62:	82 5d       	subi	r24, 0xD2	; 210
    2c64:	9d 4f       	sbci	r25, 0xFD	; 253
    2c66:	11 92       	st	Z+, r1
    2c68:	e8 17       	cp	r30, r24
    2c6a:	f9 07       	cpc	r31, r25
    2c6c:	e1 f7       	brne	.-8      	; 0x2c66 <dir_next+0x152>
    2c6e:	d8 01       	movw	r26, r16
    2c70:	ed 90       	ld	r14, X+
    2c72:	fc 90       	ld	r15, X
    2c74:	b5 01       	movw	r22, r10
    2c76:	a4 01       	movw	r20, r8
    2c78:	c7 01       	movw	r24, r14
    2c7a:	2e db       	rcall	.-2468   	; 0x22d8 <clust2sect>
    2c7c:	f7 01       	movw	r30, r14
    2c7e:	62 a7       	std	Z+42, r22	; 0x2a
    2c80:	73 a7       	std	Z+43, r23	; 0x2b
    2c82:	84 a7       	std	Z+44, r24	; 0x2c
    2c84:	95 a7       	std	Z+45, r25	; 0x2d
    2c86:	e1 2c       	mov	r14, r1
    2c88:	f1 2c       	mov	r15, r1
    2c8a:	77 24       	eor	r7, r7
    2c8c:	73 94       	inc	r7
    2c8e:	19 c0       	rjmp	.+50     	; 0x2cc2 <dir_next+0x1ae>
    2c90:	74 82       	std	Z+4, r7	; 0x04
    2c92:	d8 01       	movw	r26, r16
    2c94:	8d 91       	ld	r24, X+
    2c96:	9c 91       	ld	r25, X
    2c98:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <sync_window>
    2c9c:	81 11       	cpse	r24, r1
    2c9e:	66 c0       	rjmp	.+204    	; 0x2d6c <dir_next+0x258>
    2ca0:	d8 01       	movw	r26, r16
    2ca2:	ed 91       	ld	r30, X+
    2ca4:	fc 91       	ld	r31, X
    2ca6:	82 a5       	ldd	r24, Z+42	; 0x2a
    2ca8:	93 a5       	ldd	r25, Z+43	; 0x2b
    2caa:	a4 a5       	ldd	r26, Z+44	; 0x2c
    2cac:	b5 a5       	ldd	r27, Z+45	; 0x2d
    2cae:	01 96       	adiw	r24, 0x01	; 1
    2cb0:	a1 1d       	adc	r26, r1
    2cb2:	b1 1d       	adc	r27, r1
    2cb4:	82 a7       	std	Z+42, r24	; 0x2a
    2cb6:	93 a7       	std	Z+43, r25	; 0x2b
    2cb8:	a4 a7       	std	Z+44, r26	; 0x2c
    2cba:	b5 a7       	std	Z+45, r27	; 0x2d
    2cbc:	bf ef       	ldi	r27, 0xFF	; 255
    2cbe:	eb 1a       	sub	r14, r27
    2cc0:	fb 0a       	sbc	r15, r27
    2cc2:	d8 01       	movw	r26, r16
    2cc4:	ed 91       	ld	r30, X+
    2cc6:	fc 91       	ld	r31, X
    2cc8:	82 81       	ldd	r24, Z+2	; 0x02
    2cca:	90 e0       	ldi	r25, 0x00	; 0
    2ccc:	e8 16       	cp	r14, r24
    2cce:	f9 06       	cpc	r15, r25
    2cd0:	f8 f2       	brcs	.-66     	; 0x2c90 <dir_next+0x17c>
    2cd2:	82 a5       	ldd	r24, Z+42	; 0x2a
    2cd4:	93 a5       	ldd	r25, Z+43	; 0x2b
    2cd6:	a4 a5       	ldd	r26, Z+44	; 0x2c
    2cd8:	b5 a5       	ldd	r27, Z+45	; 0x2d
    2cda:	8e 19       	sub	r24, r14
    2cdc:	9f 09       	sbc	r25, r15
    2cde:	a1 09       	sbc	r26, r1
    2ce0:	b1 09       	sbc	r27, r1
    2ce2:	82 a7       	std	Z+42, r24	; 0x2a
    2ce4:	93 a7       	std	Z+43, r25	; 0x2b
    2ce6:	a4 a7       	std	Z+44, r26	; 0x2c
    2ce8:	b5 a7       	std	Z+45, r27	; 0x2d
    2cea:	f8 01       	movw	r30, r16
    2cec:	82 86       	std	Z+10, r8	; 0x0a
    2cee:	93 86       	std	Z+11, r9	; 0x0b
    2cf0:	a4 86       	std	Z+12, r10	; 0x0c
    2cf2:	b5 86       	std	Z+13, r11	; 0x0d
    2cf4:	b5 01       	movw	r22, r10
    2cf6:	a4 01       	movw	r20, r8
    2cf8:	80 81       	ld	r24, Z
    2cfa:	91 81       	ldd	r25, Z+1	; 0x01
    2cfc:	ed da       	rcall	.-2598   	; 0x22d8 <clust2sect>
    2cfe:	d8 01       	movw	r26, r16
    2d00:	1e 96       	adiw	r26, 0x0e	; 14
    2d02:	6d 93       	st	X+, r22
    2d04:	7d 93       	st	X+, r23
    2d06:	8d 93       	st	X+, r24
    2d08:	9c 93       	st	X, r25
    2d0a:	51 97       	sbiw	r26, 0x11	; 17
    2d0c:	f8 01       	movw	r30, r16
    2d0e:	d5 83       	std	Z+5, r29	; 0x05
    2d10:	c4 83       	std	Z+4, r28	; 0x04
    2d12:	cc 0c       	add	r12, r12
    2d14:	dd 1c       	adc	r13, r13
    2d16:	cc 0c       	add	r12, r12
    2d18:	dd 1c       	adc	r13, r13
    2d1a:	cc 0c       	add	r12, r12
    2d1c:	dd 1c       	adc	r13, r13
    2d1e:	cc 0c       	add	r12, r12
    2d20:	dd 1c       	adc	r13, r13
    2d22:	cc 0c       	add	r12, r12
    2d24:	dd 1c       	adc	r13, r13
    2d26:	fe e2       	ldi	r31, 0x2E	; 46
    2d28:	cf 0e       	add	r12, r31
    2d2a:	d1 1c       	adc	r13, r1
    2d2c:	d8 01       	movw	r26, r16
    2d2e:	8d 91       	ld	r24, X+
    2d30:	9c 91       	ld	r25, X
    2d32:	11 97       	sbiw	r26, 0x01	; 1
    2d34:	c8 0e       	add	r12, r24
    2d36:	d9 1e       	adc	r13, r25
    2d38:	53 96       	adiw	r26, 0x13	; 19
    2d3a:	dc 92       	st	X, r13
    2d3c:	ce 92       	st	-X, r12
    2d3e:	52 97       	sbiw	r26, 0x12	; 18
    2d40:	80 e0       	ldi	r24, 0x00	; 0
    2d42:	15 c0       	rjmp	.+42     	; 0x2d6e <dir_next+0x25a>
    2d44:	84 e0       	ldi	r24, 0x04	; 4
    2d46:	13 c0       	rjmp	.+38     	; 0x2d6e <dir_next+0x25a>
    2d48:	84 e0       	ldi	r24, 0x04	; 4
    2d4a:	11 c0       	rjmp	.+34     	; 0x2d6e <dir_next+0x25a>
    2d4c:	84 e0       	ldi	r24, 0x04	; 4
    2d4e:	0f c0       	rjmp	.+30     	; 0x2d6e <dir_next+0x25a>
    2d50:	82 e0       	ldi	r24, 0x02	; 2
    2d52:	0d c0       	rjmp	.+26     	; 0x2d6e <dir_next+0x25a>
    2d54:	81 e0       	ldi	r24, 0x01	; 1
    2d56:	0b c0       	rjmp	.+22     	; 0x2d6e <dir_next+0x25a>
    2d58:	84 e0       	ldi	r24, 0x04	; 4
    2d5a:	09 c0       	rjmp	.+18     	; 0x2d6e <dir_next+0x25a>
    2d5c:	87 e0       	ldi	r24, 0x07	; 7
    2d5e:	07 c0       	rjmp	.+14     	; 0x2d6e <dir_next+0x25a>
    2d60:	82 e0       	ldi	r24, 0x02	; 2
    2d62:	05 c0       	rjmp	.+10     	; 0x2d6e <dir_next+0x25a>
    2d64:	81 e0       	ldi	r24, 0x01	; 1
    2d66:	03 c0       	rjmp	.+6      	; 0x2d6e <dir_next+0x25a>
    2d68:	81 e0       	ldi	r24, 0x01	; 1
    2d6a:	01 c0       	rjmp	.+2      	; 0x2d6e <dir_next+0x25a>
    2d6c:	81 e0       	ldi	r24, 0x01	; 1
    2d6e:	df 91       	pop	r29
    2d70:	cf 91       	pop	r28
    2d72:	1f 91       	pop	r17
    2d74:	0f 91       	pop	r16
    2d76:	ff 90       	pop	r15
    2d78:	ef 90       	pop	r14
    2d7a:	df 90       	pop	r13
    2d7c:	cf 90       	pop	r12
    2d7e:	bf 90       	pop	r11
    2d80:	af 90       	pop	r10
    2d82:	9f 90       	pop	r9
    2d84:	8f 90       	pop	r8
    2d86:	7f 90       	pop	r7
    2d88:	08 95       	ret

00002d8a <f_mount>:
    2d8a:	1f 93       	push	r17
    2d8c:	cf 93       	push	r28
    2d8e:	df 93       	push	r29
    2d90:	00 d0       	rcall	.+0      	; 0x2d92 <f_mount+0x8>
    2d92:	00 d0       	rcall	.+0      	; 0x2d94 <f_mount+0xa>
    2d94:	00 d0       	rcall	.+0      	; 0x2d96 <f_mount+0xc>
    2d96:	cd b7       	in	r28, 0x3d	; 61
    2d98:	de b7       	in	r29, 0x3e	; 62
    2d9a:	9c 83       	std	Y+4, r25	; 0x04
    2d9c:	8b 83       	std	Y+3, r24	; 0x03
    2d9e:	7e 83       	std	Y+6, r23	; 0x06
    2da0:	6d 83       	std	Y+5, r22	; 0x05
    2da2:	14 2f       	mov	r17, r20
    2da4:	7a 83       	std	Y+2, r23	; 0x02
    2da6:	69 83       	std	Y+1, r22	; 0x01
    2da8:	ce 01       	movw	r24, r28
    2daa:	01 96       	adiw	r24, 0x01	; 1
    2dac:	0e 94 41 0c 	call	0x1882	; 0x1882 <get_ldnumber>
    2db0:	99 23       	and	r25, r25
    2db2:	34 f1       	brlt	.+76     	; 0x2e00 <f_mount+0x76>
    2db4:	fc 01       	movw	r30, r24
    2db6:	ee 0f       	add	r30, r30
    2db8:	ff 1f       	adc	r31, r31
    2dba:	e1 56       	subi	r30, 0x61	; 97
    2dbc:	fc 4f       	sbci	r31, 0xFC	; 252
    2dbe:	01 90       	ld	r0, Z+
    2dc0:	f0 81       	ld	r31, Z
    2dc2:	e0 2d       	mov	r30, r0
    2dc4:	30 97       	sbiw	r30, 0x00	; 0
    2dc6:	09 f0       	breq	.+2      	; 0x2dca <f_mount+0x40>
    2dc8:	10 82       	st	Z, r1
    2dca:	eb 81       	ldd	r30, Y+3	; 0x03
    2dcc:	fc 81       	ldd	r31, Y+4	; 0x04
    2dce:	30 97       	sbiw	r30, 0x00	; 0
    2dd0:	e9 f0       	breq	.+58     	; 0x2e0c <f_mount+0x82>
    2dd2:	10 82       	st	Z, r1
    2dd4:	2b 81       	ldd	r18, Y+3	; 0x03
    2dd6:	3c 81       	ldd	r19, Y+4	; 0x04
    2dd8:	88 0f       	add	r24, r24
    2dda:	99 1f       	adc	r25, r25
    2ddc:	fc 01       	movw	r30, r24
    2dde:	e1 56       	subi	r30, 0x61	; 97
    2de0:	fc 4f       	sbci	r31, 0xFC	; 252
    2de2:	31 83       	std	Z+1, r19	; 0x01
    2de4:	20 83       	st	Z, r18
    2de6:	23 2b       	or	r18, r19
    2de8:	69 f0       	breq	.+26     	; 0x2e04 <f_mount+0x7a>
    2dea:	11 30       	cpi	r17, 0x01	; 1
    2dec:	69 f4       	brne	.+26     	; 0x2e08 <f_mount+0x7e>
    2dee:	40 e0       	ldi	r20, 0x00	; 0
    2df0:	be 01       	movw	r22, r28
    2df2:	6b 5f       	subi	r22, 0xFB	; 251
    2df4:	7f 4f       	sbci	r23, 0xFF	; 255
    2df6:	ce 01       	movw	r24, r28
    2df8:	03 96       	adiw	r24, 0x03	; 3
    2dfa:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <find_volume>
    2dfe:	0e c0       	rjmp	.+28     	; 0x2e1c <f_mount+0x92>
    2e00:	8b e0       	ldi	r24, 0x0B	; 11
    2e02:	0c c0       	rjmp	.+24     	; 0x2e1c <f_mount+0x92>
    2e04:	80 e0       	ldi	r24, 0x00	; 0
    2e06:	0a c0       	rjmp	.+20     	; 0x2e1c <f_mount+0x92>
    2e08:	80 e0       	ldi	r24, 0x00	; 0
    2e0a:	08 c0       	rjmp	.+16     	; 0x2e1c <f_mount+0x92>
    2e0c:	88 0f       	add	r24, r24
    2e0e:	99 1f       	adc	r25, r25
    2e10:	fc 01       	movw	r30, r24
    2e12:	e1 56       	subi	r30, 0x61	; 97
    2e14:	fc 4f       	sbci	r31, 0xFC	; 252
    2e16:	11 82       	std	Z+1, r1	; 0x01
    2e18:	10 82       	st	Z, r1
    2e1a:	80 e0       	ldi	r24, 0x00	; 0
    2e1c:	26 96       	adiw	r28, 0x06	; 6
    2e1e:	0f b6       	in	r0, 0x3f	; 63
    2e20:	f8 94       	cli
    2e22:	de bf       	out	0x3e, r29	; 62
    2e24:	0f be       	out	0x3f, r0	; 63
    2e26:	cd bf       	out	0x3d, r28	; 61
    2e28:	df 91       	pop	r29
    2e2a:	cf 91       	pop	r28
    2e2c:	1f 91       	pop	r17
    2e2e:	08 95       	ret

00002e30 <f_open>:
    2e30:	2f 92       	push	r2
    2e32:	3f 92       	push	r3
    2e34:	4f 92       	push	r4
    2e36:	5f 92       	push	r5
    2e38:	6f 92       	push	r6
    2e3a:	7f 92       	push	r7
    2e3c:	8f 92       	push	r8
    2e3e:	9f 92       	push	r9
    2e40:	af 92       	push	r10
    2e42:	bf 92       	push	r11
    2e44:	cf 92       	push	r12
    2e46:	df 92       	push	r13
    2e48:	ef 92       	push	r14
    2e4a:	ff 92       	push	r15
    2e4c:	0f 93       	push	r16
    2e4e:	1f 93       	push	r17
    2e50:	cf 93       	push	r28
    2e52:	df 93       	push	r29
    2e54:	cd b7       	in	r28, 0x3d	; 61
    2e56:	de b7       	in	r29, 0x3e	; 62
    2e58:	ae 97       	sbiw	r28, 0x2e	; 46
    2e5a:	0f b6       	in	r0, 0x3f	; 63
    2e5c:	f8 94       	cli
    2e5e:	de bf       	out	0x3e, r29	; 62
    2e60:	0f be       	out	0x3f, r0	; 63
    2e62:	cd bf       	out	0x3d, r28	; 61
    2e64:	7c a3       	std	Y+36, r23	; 0x24
    2e66:	6b a3       	std	Y+35, r22	; 0x23
    2e68:	00 97       	sbiw	r24, 0x00	; 0
    2e6a:	09 f4       	brne	.+2      	; 0x2e6e <f_open+0x3e>
    2e6c:	83 c2       	rjmp	.+1286   	; 0x3374 <f_open+0x544>
    2e6e:	4d a3       	std	Y+37, r20	; 0x25
    2e70:	1c 01       	movw	r2, r24
    2e72:	dc 01       	movw	r26, r24
    2e74:	1d 92       	st	X+, r1
    2e76:	1c 92       	st	X, r1
    2e78:	4e 71       	andi	r20, 0x1E	; 30
    2e7a:	be 01       	movw	r22, r28
    2e7c:	6d 5d       	subi	r22, 0xDD	; 221
    2e7e:	7f 4f       	sbci	r23, 0xFF	; 255
    2e80:	ce 01       	movw	r24, r28
    2e82:	01 96       	adiw	r24, 0x01	; 1
    2e84:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <find_volume>
    2e88:	81 11       	cpse	r24, r1
    2e8a:	03 c3       	rjmp	.+1542   	; 0x3492 <f_open+0x662>
    2e8c:	ce 01       	movw	r24, r28
    2e8e:	47 96       	adiw	r24, 0x17	; 23
    2e90:	9e 8b       	std	Y+22, r25	; 0x16
    2e92:	8d 8b       	std	Y+21, r24	; 0x15
    2e94:	cb a0       	ldd	r12, Y+35	; 0x23
    2e96:	dc a0       	ldd	r13, Y+36	; 0x24
    2e98:	f6 01       	movw	r30, r12
    2e9a:	80 81       	ld	r24, Z
    2e9c:	8f 32       	cpi	r24, 0x2F	; 47
    2e9e:	11 f0       	breq	.+4      	; 0x2ea4 <f_open+0x74>
    2ea0:	8c 35       	cpi	r24, 0x5C	; 92
    2ea2:	19 f4       	brne	.+6      	; 0x2eaa <f_open+0x7a>
    2ea4:	ff ef       	ldi	r31, 0xFF	; 255
    2ea6:	cf 1a       	sub	r12, r31
    2ea8:	df 0a       	sbc	r13, r31
    2eaa:	2d a1       	ldd	r18, Y+37	; 0x25
    2eac:	2f 71       	andi	r18, 0x1F	; 31
    2eae:	29 a7       	std	Y+41, r18	; 0x29
    2eb0:	1f 82       	std	Y+7, r1	; 0x07
    2eb2:	18 86       	std	Y+8, r1	; 0x08
    2eb4:	19 86       	std	Y+9, r1	; 0x09
    2eb6:	1a 86       	std	Y+10, r1	; 0x0a
    2eb8:	d6 01       	movw	r26, r12
    2eba:	8c 91       	ld	r24, X
    2ebc:	80 32       	cpi	r24, 0x20	; 32
    2ebe:	68 f4       	brcc	.+26     	; 0x2eda <f_open+0xaa>
    2ec0:	60 e0       	ldi	r22, 0x00	; 0
    2ec2:	70 e0       	ldi	r23, 0x00	; 0
    2ec4:	ce 01       	movw	r24, r28
    2ec6:	01 96       	adiw	r24, 0x01	; 1
    2ec8:	34 db       	rcall	.-2456   	; 0x2532 <dir_sdi>
    2eca:	1c 8a       	std	Y+20, r1	; 0x14
    2ecc:	1b 8a       	std	Y+19, r1	; 0x13
    2ece:	e1 2c       	mov	r14, r1
    2ed0:	f1 2c       	mov	r15, r1
    2ed2:	88 23       	and	r24, r24
    2ed4:	09 f4       	brne	.+2      	; 0x2ed8 <f_open+0xa8>
    2ed6:	91 c2       	rjmp	.+1314   	; 0x33fa <f_open+0x5ca>
    2ed8:	87 c2       	rjmp	.+1294   	; 0x33e8 <f_open+0x5b8>
    2eda:	68 94       	set
    2edc:	bb 24       	eor	r11, r11
    2ede:	b5 f8       	bld	r11, 5
    2ee0:	a1 2c       	mov	r10, r1
    2ee2:	71 2c       	mov	r7, r1
    2ee4:	68 94       	set
    2ee6:	66 24       	eor	r6, r6
    2ee8:	63 f8       	bld	r6, 3
    2eea:	51 2c       	mov	r5, r1
    2eec:	41 2c       	mov	r4, r1
    2eee:	6a a6       	std	Y+42, r6	; 0x2a
    2ef0:	5e a6       	std	Y+46, r5	; 0x2e
    2ef2:	f6 01       	movw	r30, r12
    2ef4:	af 01       	movw	r20, r30
    2ef6:	81 91       	ld	r24, Z+
    2ef8:	8f 32       	cpi	r24, 0x2F	; 47
    2efa:	e1 f3       	breq	.-8      	; 0x2ef4 <f_open+0xc4>
    2efc:	8c 35       	cpi	r24, 0x5C	; 92
    2efe:	d1 f3       	breq	.-12     	; 0x2ef4 <f_open+0xc4>
    2f00:	0d 89       	ldd	r16, Y+21	; 0x15
    2f02:	1e 89       	ldd	r17, Y+22	; 0x16
    2f04:	f8 01       	movw	r30, r16
    2f06:	c8 01       	movw	r24, r16
    2f08:	0b 96       	adiw	r24, 0x0b	; 11
    2f0a:	b1 92       	st	Z+, r11
    2f0c:	e8 17       	cp	r30, r24
    2f0e:	f9 07       	cpc	r31, r25
    2f10:	e1 f7       	brne	.-8      	; 0x2f0a <f_open+0xda>
    2f12:	6a 01       	movw	r12, r20
    2f14:	ea 2c       	mov	r14, r10
    2f16:	f7 2c       	mov	r15, r7
    2f18:	8a 2d       	mov	r24, r10
    2f1a:	97 2d       	mov	r25, r7
    2f1c:	86 2c       	mov	r8, r6
    2f1e:	95 2c       	mov	r9, r5
    2f20:	74 2d       	mov	r23, r4
    2f22:	da 01       	movw	r26, r20
    2f24:	01 96       	adiw	r24, 0x01	; 1
    2f26:	6d 91       	ld	r22, X+
    2f28:	61 32       	cpi	r22, 0x21	; 33
    2f2a:	08 f4       	brcc	.+2      	; 0x2f2e <f_open+0xfe>
    2f2c:	3c c2       	rjmp	.+1144   	; 0x33a6 <f_open+0x576>
    2f2e:	6f 32       	cpi	r22, 0x2F	; 47
    2f30:	09 f4       	brne	.+2      	; 0x2f34 <f_open+0x104>
    2f32:	3e c2       	rjmp	.+1148   	; 0x33b0 <f_open+0x580>
    2f34:	6c 35       	cpi	r22, 0x5C	; 92
    2f36:	09 f4       	brne	.+2      	; 0x2f3a <f_open+0x10a>
    2f38:	3b c2       	rjmp	.+1142   	; 0x33b0 <f_open+0x580>
    2f3a:	6e 32       	cpi	r22, 0x2E	; 46
    2f3c:	09 f4       	brne	.+2      	; 0x2f40 <f_open+0x110>
    2f3e:	1c c2       	rjmp	.+1080   	; 0x3378 <f_open+0x548>
    2f40:	e8 14       	cp	r14, r8
    2f42:	f9 04       	cpc	r15, r9
    2f44:	08 f0       	brcs	.+2      	; 0x2f48 <f_open+0x118>
    2f46:	79 c2       	rjmp	.+1266   	; 0x343a <f_open+0x60a>
    2f48:	0a c0       	rjmp	.+20     	; 0x2f5e <f_open+0x12e>
    2f4a:	77 0f       	add	r23, r23
    2f4c:	77 0f       	add	r23, r23
    2f4e:	ea a4       	ldd	r14, Y+42	; 0x2a
    2f50:	fe a4       	ldd	r15, Y+46	; 0x2e
    2f52:	0f 2e       	mov	r0, r31
    2f54:	fb e0       	ldi	r31, 0x0B	; 11
    2f56:	8f 2e       	mov	r8, r31
    2f58:	f0 2d       	mov	r31, r0
    2f5a:	91 2c       	mov	r9, r1
    2f5c:	e3 cf       	rjmp	.-58     	; 0x2f24 <f_open+0xf4>
    2f5e:	66 23       	and	r22, r22
    2f60:	0c f0       	brlt	.+2      	; 0x2f64 <f_open+0x134>
    2f62:	10 c2       	rjmp	.+1056   	; 0x3384 <f_open+0x554>
    2f64:	73 60       	ori	r23, 0x03	; 3
    2f66:	e6 2f       	mov	r30, r22
    2f68:	f0 e0       	ldi	r31, 0x00	; 0
    2f6a:	ea 56       	subi	r30, 0x6A	; 106
    2f6c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f6e:	60 81       	ld	r22, Z
    2f70:	09 c2       	rjmp	.+1042   	; 0x3384 <f_open+0x554>
    2f72:	81 91       	ld	r24, Z+
    2f74:	88 23       	and	r24, r24
    2f76:	09 f4       	brne	.+2      	; 0x2f7a <f_open+0x14a>
    2f78:	0f c2       	rjmp	.+1054   	; 0x3398 <f_open+0x568>
    2f7a:	90 e0       	ldi	r25, 0x00	; 0
    2f7c:	48 17       	cp	r20, r24
    2f7e:	59 07       	cpc	r21, r25
    2f80:	c1 f7       	brne	.-16     	; 0x2f72 <f_open+0x142>
    2f82:	86 e0       	ldi	r24, 0x06	; 6
    2f84:	77 c2       	rjmp	.+1262   	; 0x3474 <f_open+0x644>
    2f86:	72 60       	ori	r23, 0x02	; 2
    2f88:	06 c0       	rjmp	.+12     	; 0x2f96 <f_open+0x166>
    2f8a:	2f e9       	ldi	r18, 0x9F	; 159
    2f8c:	26 0f       	add	r18, r22
    2f8e:	2a 31       	cpi	r18, 0x1A	; 26
    2f90:	10 f4       	brcc	.+4      	; 0x2f96 <f_open+0x166>
    2f92:	71 60       	ori	r23, 0x01	; 1
    2f94:	60 52       	subi	r22, 0x20	; 32
    2f96:	f8 01       	movw	r30, r16
    2f98:	ee 0d       	add	r30, r14
    2f9a:	ff 1d       	adc	r31, r15
    2f9c:	60 83       	st	Z, r22
    2f9e:	f7 01       	movw	r30, r14
    2fa0:	31 96       	adiw	r30, 0x01	; 1
    2fa2:	7f 01       	movw	r14, r30
    2fa4:	bf cf       	rjmp	.-130    	; 0x2f24 <f_open+0xf4>
    2fa6:	ef 28       	or	r14, r15
    2fa8:	09 f4       	brne	.+2      	; 0x2fac <f_open+0x17c>
    2faa:	47 c2       	rjmp	.+1166   	; 0x343a <f_open+0x60a>
    2fac:	d8 01       	movw	r26, r16
    2fae:	2c 91       	ld	r18, X
    2fb0:	25 3e       	cpi	r18, 0xE5	; 229
    2fb2:	11 f4       	brne	.+4      	; 0x2fb8 <f_open+0x188>
    2fb4:	e5 e0       	ldi	r30, 0x05	; 5
    2fb6:	ec 93       	st	X, r30
    2fb8:	f8 e0       	ldi	r31, 0x08	; 8
    2fba:	8f 16       	cp	r8, r31
    2fbc:	91 04       	cpc	r9, r1
    2fbe:	19 f4       	brne	.+6      	; 0x2fc6 <f_open+0x196>
    2fc0:	79 2f       	mov	r23, r25
    2fc2:	77 0f       	add	r23, r23
    2fc4:	77 0f       	add	r23, r23
    2fc6:	97 2f       	mov	r25, r23
    2fc8:	93 70       	andi	r25, 0x03	; 3
    2fca:	91 30       	cpi	r25, 0x01	; 1
    2fcc:	09 f4       	brne	.+2      	; 0x2fd0 <f_open+0x1a0>
    2fce:	80 61       	ori	r24, 0x10	; 16
    2fd0:	97 2f       	mov	r25, r23
    2fd2:	9c 70       	andi	r25, 0x0C	; 12
    2fd4:	94 30       	cpi	r25, 0x04	; 4
    2fd6:	09 f4       	brne	.+2      	; 0x2fda <f_open+0x1aa>
    2fd8:	88 60       	ori	r24, 0x08	; 8
    2fda:	d8 01       	movw	r26, r16
    2fdc:	1b 96       	adiw	r26, 0x0b	; 11
    2fde:	8c 93       	st	X, r24
    2fe0:	6a 2d       	mov	r22, r10
    2fe2:	77 2d       	mov	r23, r7
    2fe4:	ce 01       	movw	r24, r28
    2fe6:	01 96       	adiw	r24, 0x01	; 1
    2fe8:	a4 da       	rcall	.-2744   	; 0x2532 <dir_sdi>
    2fea:	81 11       	cpse	r24, r1
    2fec:	ec c1       	rjmp	.+984    	; 0x33c6 <f_open+0x596>
    2fee:	4f 85       	ldd	r20, Y+15	; 0x0f
    2ff0:	58 89       	ldd	r21, Y+16	; 0x10
    2ff2:	69 89       	ldd	r22, Y+17	; 0x11
    2ff4:	7a 89       	ldd	r23, Y+18	; 0x12
    2ff6:	89 81       	ldd	r24, Y+1	; 0x01
    2ff8:	9a 81       	ldd	r25, Y+2	; 0x02
    2ffa:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <move_window>
    2ffe:	81 11       	cpse	r24, r1
    3000:	e2 c1       	rjmp	.+964    	; 0x33c6 <f_open+0x596>
    3002:	6b 89       	ldd	r22, Y+19	; 0x13
    3004:	7c 89       	ldd	r23, Y+20	; 0x14
    3006:	fb 01       	movw	r30, r22
    3008:	80 81       	ld	r24, Z
    300a:	88 23       	and	r24, r24
    300c:	d1 f0       	breq	.+52     	; 0x3042 <f_open+0x212>
    300e:	83 85       	ldd	r24, Z+11	; 0x0b
    3010:	83 fd       	sbrc	r24, 3
    3012:	0f c0       	rjmp	.+30     	; 0x3032 <f_open+0x202>
    3014:	4d 89       	ldd	r20, Y+21	; 0x15
    3016:	5e 89       	ldd	r21, Y+22	; 0x16
    3018:	da 01       	movw	r26, r20
    301a:	9b 01       	movw	r18, r22
    301c:	25 5f       	subi	r18, 0xF5	; 245
    301e:	3f 4f       	sbci	r19, 0xFF	; 255
    3020:	04 c0       	rjmp	.+8      	; 0x302a <f_open+0x1fa>
    3022:	e2 17       	cp	r30, r18
    3024:	f3 07       	cpc	r31, r19
    3026:	09 f4       	brne	.+2      	; 0x302a <f_open+0x1fa>
    3028:	c8 c1       	rjmp	.+912    	; 0x33ba <f_open+0x58a>
    302a:	91 91       	ld	r25, Z+
    302c:	8d 91       	ld	r24, X+
    302e:	98 17       	cp	r25, r24
    3030:	c1 f3       	breq	.-16     	; 0x3022 <f_open+0x1f2>
    3032:	6a 2d       	mov	r22, r10
    3034:	77 2d       	mov	r23, r7
    3036:	ce 01       	movw	r24, r28
    3038:	01 96       	adiw	r24, 0x01	; 1
    303a:	6c dd       	rcall	.-1320   	; 0x2b14 <dir_next>
    303c:	88 23       	and	r24, r24
    303e:	b9 f2       	breq	.-82     	; 0x2fee <f_open+0x1be>
    3040:	c2 c1       	rjmp	.+900    	; 0x33c6 <f_open+0x596>
    3042:	ed 89       	ldd	r30, Y+21	; 0x15
    3044:	fe 89       	ldd	r31, Y+22	; 0x16
    3046:	93 85       	ldd	r25, Z+11	; 0x0b
    3048:	92 fd       	sbrc	r25, 2
    304a:	0d c2       	rjmp	.+1050   	; 0x3466 <f_open+0x636>
    304c:	85 e0       	ldi	r24, 0x05	; 5
    304e:	12 c2       	rjmp	.+1060   	; 0x3474 <f_open+0x644>
    3050:	db 01       	movw	r26, r22
    3052:	1b 96       	adiw	r26, 0x0b	; 11
    3054:	8c 91       	ld	r24, X
    3056:	84 ff       	sbrs	r24, 4
    3058:	08 c2       	rjmp	.+1040   	; 0x346a <f_open+0x63a>
    305a:	89 81       	ldd	r24, Y+1	; 0x01
    305c:	9a 81       	ldd	r25, Y+2	; 0x02
    305e:	0e 94 1f 0c 	call	0x183e	; 0x183e <ld_clust>
    3062:	6f 83       	std	Y+7, r22	; 0x07
    3064:	78 87       	std	Y+8, r23	; 0x08
    3066:	89 87       	std	Y+9, r24	; 0x09
    3068:	9a 87       	std	Y+10, r25	; 0x0a
    306a:	43 cf       	rjmp	.-378    	; 0x2ef2 <f_open+0xc2>
    306c:	81 11       	cpse	r24, r1
    306e:	ef c1       	rjmp	.+990    	; 0x344e <f_open+0x61e>
    3070:	44 c0       	rjmp	.+136    	; 0x30fa <f_open+0x2ca>
    3072:	60 e0       	ldi	r22, 0x00	; 0
    3074:	70 e0       	ldi	r23, 0x00	; 0
    3076:	ce 01       	movw	r24, r28
    3078:	01 96       	adiw	r24, 0x01	; 1
    307a:	5b da       	rcall	.-2890   	; 0x2532 <dir_sdi>
    307c:	81 11       	cpse	r24, r1
    307e:	06 c2       	rjmp	.+1036   	; 0x348c <f_open+0x65c>
    3080:	4f 85       	ldd	r20, Y+15	; 0x0f
    3082:	58 89       	ldd	r21, Y+16	; 0x10
    3084:	69 89       	ldd	r22, Y+17	; 0x11
    3086:	7a 89       	ldd	r23, Y+18	; 0x12
    3088:	89 81       	ldd	r24, Y+1	; 0x01
    308a:	9a 81       	ldd	r25, Y+2	; 0x02
    308c:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <move_window>
    3090:	81 11       	cpse	r24, r1
    3092:	fc c1       	rjmp	.+1016   	; 0x348c <f_open+0x65c>
    3094:	eb 89       	ldd	r30, Y+19	; 0x13
    3096:	fc 89       	ldd	r31, Y+20	; 0x14
    3098:	80 81       	ld	r24, Z
    309a:	85 3e       	cpi	r24, 0xE5	; 229
    309c:	51 f0       	breq	.+20     	; 0x30b2 <f_open+0x282>
    309e:	88 23       	and	r24, r24
    30a0:	41 f0       	breq	.+16     	; 0x30b2 <f_open+0x282>
    30a2:	61 e0       	ldi	r22, 0x01	; 1
    30a4:	70 e0       	ldi	r23, 0x00	; 0
    30a6:	ce 01       	movw	r24, r28
    30a8:	01 96       	adiw	r24, 0x01	; 1
    30aa:	34 dd       	rcall	.-1432   	; 0x2b14 <dir_next>
    30ac:	88 23       	and	r24, r24
    30ae:	41 f3       	breq	.-48     	; 0x3080 <f_open+0x250>
    30b0:	ed c1       	rjmp	.+986    	; 0x348c <f_open+0x65c>
    30b2:	4f 85       	ldd	r20, Y+15	; 0x0f
    30b4:	58 89       	ldd	r21, Y+16	; 0x10
    30b6:	69 89       	ldd	r22, Y+17	; 0x11
    30b8:	7a 89       	ldd	r23, Y+18	; 0x12
    30ba:	89 81       	ldd	r24, Y+1	; 0x01
    30bc:	9a 81       	ldd	r25, Y+2	; 0x02
    30be:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <move_window>
    30c2:	81 11       	cpse	r24, r1
    30c4:	ca c1       	rjmp	.+916    	; 0x345a <f_open+0x62a>
    30c6:	eb 89       	ldd	r30, Y+19	; 0x13
    30c8:	fc 89       	ldd	r31, Y+20	; 0x14
    30ca:	cf 01       	movw	r24, r30
    30cc:	80 96       	adiw	r24, 0x20	; 32
    30ce:	11 92       	st	Z+, r1
    30d0:	e8 17       	cp	r30, r24
    30d2:	f9 07       	cpc	r31, r25
    30d4:	e1 f7       	brne	.-8      	; 0x30ce <f_open+0x29e>
    30d6:	6d 89       	ldd	r22, Y+21	; 0x15
    30d8:	7e 89       	ldd	r23, Y+22	; 0x16
    30da:	4b e0       	ldi	r20, 0x0B	; 11
    30dc:	50 e0       	ldi	r21, 0x00	; 0
    30de:	8b 89       	ldd	r24, Y+19	; 0x13
    30e0:	9c 89       	ldd	r25, Y+20	; 0x14
    30e2:	0e 94 11 0c 	call	0x1822	; 0x1822 <mem_cpy>
    30e6:	e9 81       	ldd	r30, Y+1	; 0x01
    30e8:	fa 81       	ldd	r31, Y+2	; 0x02
    30ea:	81 e0       	ldi	r24, 0x01	; 1
    30ec:	84 83       	std	Z+4, r24	; 0x04
    30ee:	b9 a5       	ldd	r27, Y+41	; 0x29
    30f0:	b8 60       	ori	r27, 0x08	; 8
    30f2:	b9 a7       	std	Y+41, r27	; 0x29
    30f4:	eb 88       	ldd	r14, Y+19	; 0x13
    30f6:	fc 88       	ldd	r15, Y+20	; 0x14
    30f8:	08 c0       	rjmp	.+16     	; 0x310a <f_open+0x2da>
    30fa:	f7 01       	movw	r30, r14
    30fc:	83 85       	ldd	r24, Z+11	; 0x0b
    30fe:	81 71       	andi	r24, 0x11	; 17
    3100:	09 f0       	breq	.+2      	; 0x3104 <f_open+0x2d4>
    3102:	82 c1       	rjmp	.+772    	; 0x3408 <f_open+0x5d8>
    3104:	fd a1       	ldd	r31, Y+37	; 0x25
    3106:	f2 fd       	sbrc	r31, 2
    3108:	81 c1       	rjmp	.+770    	; 0x340c <f_open+0x5dc>
    310a:	29 a5       	ldd	r18, Y+41	; 0x29
    310c:	23 ff       	sbrs	r18, 3
    310e:	db c0       	rjmp	.+438    	; 0x32c6 <f_open+0x496>
    3110:	0e 94 6d 29 	call	0x52da	; 0x52da <get_fattime>
    3114:	d7 01       	movw	r26, r14
    3116:	1e 96       	adiw	r26, 0x0e	; 14
    3118:	6c 93       	st	X, r22
    311a:	1e 97       	sbiw	r26, 0x0e	; 14
    311c:	47 2f       	mov	r20, r23
    311e:	55 27       	eor	r21, r21
    3120:	1f 96       	adiw	r26, 0x0f	; 15
    3122:	4c 93       	st	X, r20
    3124:	1f 97       	sbiw	r26, 0x0f	; 15
    3126:	4c 01       	movw	r8, r24
    3128:	aa 24       	eor	r10, r10
    312a:	bb 24       	eor	r11, r11
    312c:	50 96       	adiw	r26, 0x10	; 16
    312e:	8c 92       	st	X, r8
    3130:	50 97       	sbiw	r26, 0x10	; 16
    3132:	09 2f       	mov	r16, r25
    3134:	11 27       	eor	r17, r17
    3136:	22 27       	eor	r18, r18
    3138:	33 27       	eor	r19, r19
    313a:	51 96       	adiw	r26, 0x11	; 17
    313c:	0c 93       	st	X, r16
    313e:	51 97       	sbiw	r26, 0x11	; 17
    3140:	56 96       	adiw	r26, 0x16	; 22
    3142:	6c 93       	st	X, r22
    3144:	56 97       	sbiw	r26, 0x16	; 22
    3146:	57 96       	adiw	r26, 0x17	; 23
    3148:	4c 93       	st	X, r20
    314a:	57 97       	sbiw	r26, 0x17	; 23
    314c:	58 96       	adiw	r26, 0x18	; 24
    314e:	8c 92       	st	X, r8
    3150:	58 97       	sbiw	r26, 0x18	; 24
    3152:	59 96       	adiw	r26, 0x19	; 25
    3154:	0c 93       	st	X, r16
    3156:	59 97       	sbiw	r26, 0x19	; 25
    3158:	1b 96       	adiw	r26, 0x0b	; 11
    315a:	1c 92       	st	X, r1
    315c:	1b 97       	sbiw	r26, 0x0b	; 11
    315e:	5c 96       	adiw	r26, 0x1c	; 28
    3160:	1c 92       	st	X, r1
    3162:	5c 97       	sbiw	r26, 0x1c	; 28
    3164:	5d 96       	adiw	r26, 0x1d	; 29
    3166:	1c 92       	st	X, r1
    3168:	5d 97       	sbiw	r26, 0x1d	; 29
    316a:	5e 96       	adiw	r26, 0x1e	; 30
    316c:	1c 92       	st	X, r1
    316e:	5e 97       	sbiw	r26, 0x1e	; 30
    3170:	5f 96       	adiw	r26, 0x1f	; 31
    3172:	1c 92       	st	X, r1
    3174:	c9 80       	ldd	r12, Y+1	; 0x01
    3176:	da 80       	ldd	r13, Y+2	; 0x02
    3178:	b7 01       	movw	r22, r14
    317a:	c6 01       	movw	r24, r12
    317c:	0e 94 1f 0c 	call	0x183e	; 0x183e <ld_clust>
    3180:	4b 01       	movw	r8, r22
    3182:	5c 01       	movw	r10, r24
    3184:	f7 01       	movw	r30, r14
    3186:	12 8e       	std	Z+26, r1	; 0x1a
    3188:	13 8e       	std	Z+27, r1	; 0x1b
    318a:	14 8a       	std	Z+20, r1	; 0x14
    318c:	15 8a       	std	Z+21, r1	; 0x15
    318e:	81 e0       	ldi	r24, 0x01	; 1
    3190:	d6 01       	movw	r26, r12
    3192:	14 96       	adiw	r26, 0x04	; 4
    3194:	8c 93       	st	X, r24
    3196:	14 97       	sbiw	r26, 0x04	; 4
    3198:	81 14       	cp	r8, r1
    319a:	91 04       	cpc	r9, r1
    319c:	a1 04       	cpc	r10, r1
    319e:	b1 04       	cpc	r11, r1
    31a0:	09 f4       	brne	.+2      	; 0x31a4 <f_open+0x374>
    31a2:	91 c0       	rjmp	.+290    	; 0x32c6 <f_open+0x496>
    31a4:	9a 96       	adiw	r26, 0x2a	; 42
    31a6:	2d 91       	ld	r18, X+
    31a8:	3d 91       	ld	r19, X+
    31aa:	4d 91       	ld	r20, X+
    31ac:	5c 91       	ld	r21, X
    31ae:	9d 97       	sbiw	r26, 0x2d	; 45
    31b0:	2a a7       	std	Y+42, r18	; 0x2a
    31b2:	3b a7       	std	Y+43, r19	; 0x2b
    31b4:	4c a7       	std	Y+44, r20	; 0x2c
    31b6:	5d a7       	std	Y+45, r21	; 0x2d
    31b8:	b2 e0       	ldi	r27, 0x02	; 2
    31ba:	8b 16       	cp	r8, r27
    31bc:	91 04       	cpc	r9, r1
    31be:	a1 04       	cpc	r10, r1
    31c0:	b1 04       	cpc	r11, r1
    31c2:	08 f4       	brcc	.+2      	; 0x31c6 <f_open+0x396>
    31c4:	28 c1       	rjmp	.+592    	; 0x3416 <f_open+0x5e6>
    31c6:	f6 01       	movw	r30, r12
    31c8:	82 89       	ldd	r24, Z+18	; 0x12
    31ca:	93 89       	ldd	r25, Z+19	; 0x13
    31cc:	a4 89       	ldd	r26, Z+20	; 0x14
    31ce:	b5 89       	ldd	r27, Z+21	; 0x15
    31d0:	88 16       	cp	r8, r24
    31d2:	99 06       	cpc	r9, r25
    31d4:	aa 06       	cpc	r10, r26
    31d6:	bb 06       	cpc	r11, r27
    31d8:	08 f0       	brcs	.+2      	; 0x31dc <f_open+0x3ac>
    31da:	1f c1       	rjmp	.+574    	; 0x341a <f_open+0x5ea>
    31dc:	8d a2       	std	Y+37, r8	; 0x25
    31de:	9e a2       	std	Y+38, r9	; 0x26
    31e0:	af a2       	std	Y+39, r10	; 0x27
    31e2:	b8 a6       	std	Y+40, r11	; 0x28
    31e4:	3f c0       	rjmp	.+126    	; 0x3264 <f_open+0x434>
    31e6:	4d a1       	ldd	r20, Y+37	; 0x25
    31e8:	5e a1       	ldd	r21, Y+38	; 0x26
    31ea:	6f a1       	ldd	r22, Y+39	; 0x27
    31ec:	78 a5       	ldd	r23, Y+40	; 0x28
    31ee:	c6 01       	movw	r24, r12
    31f0:	a1 d8       	rcall	.-3774   	; 0x2334 <get_fat>
    31f2:	2b 01       	movw	r4, r22
    31f4:	3c 01       	movw	r6, r24
    31f6:	61 15       	cp	r22, r1
    31f8:	71 05       	cpc	r23, r1
    31fa:	81 05       	cpc	r24, r1
    31fc:	91 05       	cpc	r25, r1
    31fe:	09 f4       	brne	.+2      	; 0x3202 <f_open+0x3d2>
    3200:	40 c0       	rjmp	.+128    	; 0x3282 <f_open+0x452>
    3202:	61 30       	cpi	r22, 0x01	; 1
    3204:	71 05       	cpc	r23, r1
    3206:	81 05       	cpc	r24, r1
    3208:	91 05       	cpc	r25, r1
    320a:	09 f4       	brne	.+2      	; 0x320e <f_open+0x3de>
    320c:	08 c1       	rjmp	.+528    	; 0x341e <f_open+0x5ee>
    320e:	6f 3f       	cpi	r22, 0xFF	; 255
    3210:	7f 4f       	sbci	r23, 0xFF	; 255
    3212:	8f 4f       	sbci	r24, 0xFF	; 255
    3214:	9f 4f       	sbci	r25, 0xFF	; 255
    3216:	09 f4       	brne	.+2      	; 0x321a <f_open+0x3ea>
    3218:	04 c1       	rjmp	.+520    	; 0x3422 <f_open+0x5f2>
    321a:	00 e0       	ldi	r16, 0x00	; 0
    321c:	10 e0       	ldi	r17, 0x00	; 0
    321e:	98 01       	movw	r18, r16
    3220:	4d a1       	ldd	r20, Y+37	; 0x25
    3222:	5e a1       	ldd	r21, Y+38	; 0x26
    3224:	6f a1       	ldd	r22, Y+39	; 0x27
    3226:	78 a5       	ldd	r23, Y+40	; 0x28
    3228:	c6 01       	movw	r24, r12
    322a:	3e da       	rcall	.-2948   	; 0x26a8 <put_fat>
    322c:	81 11       	cpse	r24, r1
    322e:	fa c0       	rjmp	.+500    	; 0x3424 <f_open+0x5f4>
    3230:	f6 01       	movw	r30, r12
    3232:	86 85       	ldd	r24, Z+14	; 0x0e
    3234:	97 85       	ldd	r25, Z+15	; 0x0f
    3236:	a0 89       	ldd	r26, Z+16	; 0x10
    3238:	b1 89       	ldd	r27, Z+17	; 0x11
    323a:	8f 3f       	cpi	r24, 0xFF	; 255
    323c:	ff ef       	ldi	r31, 0xFF	; 255
    323e:	9f 07       	cpc	r25, r31
    3240:	af 07       	cpc	r26, r31
    3242:	bf 07       	cpc	r27, r31
    3244:	59 f0       	breq	.+22     	; 0x325c <f_open+0x42c>
    3246:	01 96       	adiw	r24, 0x01	; 1
    3248:	a1 1d       	adc	r26, r1
    324a:	b1 1d       	adc	r27, r1
    324c:	f6 01       	movw	r30, r12
    324e:	86 87       	std	Z+14, r24	; 0x0e
    3250:	97 87       	std	Z+15, r25	; 0x0f
    3252:	a0 8b       	std	Z+16, r26	; 0x10
    3254:	b1 8b       	std	Z+17, r27	; 0x11
    3256:	85 81       	ldd	r24, Z+5	; 0x05
    3258:	81 60       	ori	r24, 0x01	; 1
    325a:	85 83       	std	Z+5, r24	; 0x05
    325c:	4d a2       	std	Y+37, r4	; 0x25
    325e:	5e a2       	std	Y+38, r5	; 0x26
    3260:	6f a2       	std	Y+39, r6	; 0x27
    3262:	78 a6       	std	Y+40, r7	; 0x28
    3264:	f6 01       	movw	r30, r12
    3266:	82 89       	ldd	r24, Z+18	; 0x12
    3268:	93 89       	ldd	r25, Z+19	; 0x13
    326a:	a4 89       	ldd	r26, Z+20	; 0x14
    326c:	b5 89       	ldd	r27, Z+21	; 0x15
    326e:	2d a1       	ldd	r18, Y+37	; 0x25
    3270:	3e a1       	ldd	r19, Y+38	; 0x26
    3272:	4f a1       	ldd	r20, Y+39	; 0x27
    3274:	58 a5       	ldd	r21, Y+40	; 0x28
    3276:	28 17       	cp	r18, r24
    3278:	39 07       	cpc	r19, r25
    327a:	4a 07       	cpc	r20, r26
    327c:	5b 07       	cpc	r21, r27
    327e:	08 f4       	brcc	.+2      	; 0x3282 <f_open+0x452>
    3280:	b2 cf       	rjmp	.-156    	; 0x31e6 <f_open+0x3b6>
    3282:	89 81       	ldd	r24, Y+1	; 0x01
    3284:	9a 81       	ldd	r25, Y+2	; 0x02
    3286:	31 e0       	ldi	r19, 0x01	; 1
    3288:	83 1a       	sub	r8, r19
    328a:	91 08       	sbc	r9, r1
    328c:	a1 08       	sbc	r10, r1
    328e:	b1 08       	sbc	r11, r1
    3290:	dc 01       	movw	r26, r24
    3292:	1a 96       	adiw	r26, 0x0a	; 10
    3294:	8d 92       	st	X+, r8
    3296:	9d 92       	st	X+, r9
    3298:	ad 92       	st	X+, r10
    329a:	bc 92       	st	X, r11
    329c:	1d 97       	sbiw	r26, 0x0d	; 13
    329e:	4a a5       	ldd	r20, Y+42	; 0x2a
    32a0:	5b a5       	ldd	r21, Y+43	; 0x2b
    32a2:	6c a5       	ldd	r22, Y+44	; 0x2c
    32a4:	7d a5       	ldd	r23, Y+45	; 0x2d
    32a6:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <move_window>
    32aa:	88 23       	and	r24, r24
    32ac:	79 f0       	breq	.+30     	; 0x32cc <f_open+0x49c>
    32ae:	f1 c0       	rjmp	.+482    	; 0x3492 <f_open+0x662>
    32b0:	81 11       	cpse	r24, r1
    32b2:	bf c0       	rjmp	.+382    	; 0x3432 <f_open+0x602>
    32b4:	f7 01       	movw	r30, r14
    32b6:	83 85       	ldd	r24, Z+11	; 0x0b
    32b8:	84 fd       	sbrc	r24, 4
    32ba:	b8 c0       	rjmp	.+368    	; 0x342c <f_open+0x5fc>
    32bc:	fd a1       	ldd	r31, Y+37	; 0x25
    32be:	f1 ff       	sbrs	r31, 1
    32c0:	02 c0       	rjmp	.+4      	; 0x32c6 <f_open+0x496>
    32c2:	80 fd       	sbrc	r24, 0
    32c4:	b5 c0       	rjmp	.+362    	; 0x3430 <f_open+0x600>
    32c6:	29 a5       	ldd	r18, Y+41	; 0x29
    32c8:	23 ff       	sbrs	r18, 3
    32ca:	03 c0       	rjmp	.+6      	; 0x32d2 <f_open+0x4a2>
    32cc:	39 a5       	ldd	r19, Y+41	; 0x29
    32ce:	30 62       	ori	r19, 0x20	; 32
    32d0:	39 a7       	std	Y+41, r19	; 0x29
    32d2:	e9 81       	ldd	r30, Y+1	; 0x01
    32d4:	fa 81       	ldd	r31, Y+2	; 0x02
    32d6:	82 a5       	ldd	r24, Z+42	; 0x2a
    32d8:	93 a5       	ldd	r25, Z+43	; 0x2b
    32da:	a4 a5       	ldd	r26, Z+44	; 0x2c
    32dc:	b5 a5       	ldd	r27, Z+45	; 0x2d
    32de:	f1 01       	movw	r30, r2
    32e0:	82 8f       	std	Z+26, r24	; 0x1a
    32e2:	93 8f       	std	Z+27, r25	; 0x1b
    32e4:	a4 8f       	std	Z+28, r26	; 0x1c
    32e6:	b5 8f       	std	Z+29, r27	; 0x1d
    32e8:	f7 8e       	std	Z+31, r15	; 0x1f
    32ea:	e6 8e       	std	Z+30, r14	; 0x1e
    32ec:	e9 a5       	ldd	r30, Y+41	; 0x29
    32ee:	d1 01       	movw	r26, r2
    32f0:	14 96       	adiw	r26, 0x04	; 4
    32f2:	ec 93       	st	X, r30
    32f4:	14 97       	sbiw	r26, 0x04	; 4
    32f6:	15 96       	adiw	r26, 0x05	; 5
    32f8:	1c 92       	st	X, r1
    32fa:	09 81       	ldd	r16, Y+1	; 0x01
    32fc:	1a 81       	ldd	r17, Y+2	; 0x02
    32fe:	b7 01       	movw	r22, r14
    3300:	c8 01       	movw	r24, r16
    3302:	0e 94 1f 0c 	call	0x183e	; 0x183e <ld_clust>
    3306:	d1 01       	movw	r26, r2
    3308:	1e 96       	adiw	r26, 0x0e	; 14
    330a:	6d 93       	st	X+, r22
    330c:	7d 93       	st	X+, r23
    330e:	8d 93       	st	X+, r24
    3310:	9c 93       	st	X, r25
    3312:	51 97       	sbiw	r26, 0x11	; 17
    3314:	f7 01       	movw	r30, r14
    3316:	27 8d       	ldd	r18, Z+31	; 0x1f
    3318:	86 8d       	ldd	r24, Z+30	; 0x1e
    331a:	90 e0       	ldi	r25, 0x00	; 0
    331c:	a0 e0       	ldi	r26, 0x00	; 0
    331e:	b0 e0       	ldi	r27, 0x00	; 0
    3320:	dc 01       	movw	r26, r24
    3322:	99 27       	eor	r25, r25
    3324:	88 27       	eor	r24, r24
    3326:	b2 2b       	or	r27, r18
    3328:	24 8d       	ldd	r18, Z+28	; 0x1c
    332a:	ac 01       	movw	r20, r24
    332c:	bd 01       	movw	r22, r26
    332e:	42 2b       	or	r20, r18
    3330:	25 8d       	ldd	r18, Z+29	; 0x1d
    3332:	30 e0       	ldi	r19, 0x00	; 0
    3334:	92 2f       	mov	r25, r18
    3336:	88 27       	eor	r24, r24
    3338:	a0 e0       	ldi	r26, 0x00	; 0
    333a:	b0 e0       	ldi	r27, 0x00	; 0
    333c:	84 2b       	or	r24, r20
    333e:	95 2b       	or	r25, r21
    3340:	a6 2b       	or	r26, r22
    3342:	b7 2b       	or	r27, r23
    3344:	f1 01       	movw	r30, r2
    3346:	82 87       	std	Z+10, r24	; 0x0a
    3348:	93 87       	std	Z+11, r25	; 0x0b
    334a:	a4 87       	std	Z+12, r26	; 0x0c
    334c:	b5 87       	std	Z+13, r27	; 0x0d
    334e:	16 82       	std	Z+6, r1	; 0x06
    3350:	17 82       	std	Z+7, r1	; 0x07
    3352:	10 86       	std	Z+8, r1	; 0x08
    3354:	11 86       	std	Z+9, r1	; 0x09
    3356:	16 8a       	std	Z+22, r1	; 0x16
    3358:	17 8a       	std	Z+23, r1	; 0x17
    335a:	10 8e       	std	Z+24, r1	; 0x18
    335c:	11 8e       	std	Z+25, r1	; 0x19
    335e:	11 83       	std	Z+1, r17	; 0x01
    3360:	00 83       	st	Z, r16
    3362:	d8 01       	movw	r26, r16
    3364:	16 96       	adiw	r26, 0x06	; 6
    3366:	8d 91       	ld	r24, X+
    3368:	9c 91       	ld	r25, X
    336a:	17 97       	sbiw	r26, 0x07	; 7
    336c:	93 83       	std	Z+3, r25	; 0x03
    336e:	82 83       	std	Z+2, r24	; 0x02
    3370:	80 e0       	ldi	r24, 0x00	; 0
    3372:	8f c0       	rjmp	.+286    	; 0x3492 <f_open+0x662>
    3374:	89 e0       	ldi	r24, 0x09	; 9
    3376:	8d c0       	rjmp	.+282    	; 0x3492 <f_open+0x662>
    3378:	e8 e0       	ldi	r30, 0x08	; 8
    337a:	8e 16       	cp	r8, r30
    337c:	91 04       	cpc	r9, r1
    337e:	09 f4       	brne	.+2      	; 0x3382 <f_open+0x552>
    3380:	e4 cd       	rjmp	.-1080   	; 0x2f4a <f_open+0x11a>
    3382:	75 c0       	rjmp	.+234    	; 0x346e <f_open+0x63e>
    3384:	46 2f       	mov	r20, r22
    3386:	50 e0       	ldi	r21, 0x00	; 0
    3388:	42 32       	cpi	r20, 0x22	; 34
    338a:	51 05       	cpc	r21, r1
    338c:	09 f4       	brne	.+2      	; 0x3390 <f_open+0x560>
    338e:	71 c0       	rjmp	.+226    	; 0x3472 <f_open+0x642>
    3390:	e8 e0       	ldi	r30, 0x08	; 8
    3392:	f1 e0       	ldi	r31, 0x01	; 1
    3394:	9c 01       	movw	r18, r24
    3396:	ed cd       	rjmp	.-1062   	; 0x2f72 <f_open+0x142>
    3398:	c9 01       	movw	r24, r18
    339a:	2f eb       	ldi	r18, 0xBF	; 191
    339c:	26 0f       	add	r18, r22
    339e:	2a 31       	cpi	r18, 0x1A	; 26
    33a0:	08 f4       	brcc	.+2      	; 0x33a4 <f_open+0x574>
    33a2:	f1 cd       	rjmp	.-1054   	; 0x2f86 <f_open+0x156>
    33a4:	f2 cd       	rjmp	.-1052   	; 0x2f8a <f_open+0x15a>
    33a6:	c8 0e       	add	r12, r24
    33a8:	d9 1e       	adc	r13, r25
    33aa:	97 2f       	mov	r25, r23
    33ac:	84 e0       	ldi	r24, 0x04	; 4
    33ae:	fb cd       	rjmp	.-1034   	; 0x2fa6 <f_open+0x176>
    33b0:	c8 0e       	add	r12, r24
    33b2:	d9 1e       	adc	r13, r25
    33b4:	97 2f       	mov	r25, r23
    33b6:	84 2d       	mov	r24, r4
    33b8:	f6 cd       	rjmp	.-1044   	; 0x2fa6 <f_open+0x176>
    33ba:	da 01       	movw	r26, r20
    33bc:	1b 96       	adiw	r26, 0x0b	; 11
    33be:	8c 91       	ld	r24, X
    33c0:	82 ff       	sbrs	r24, 2
    33c2:	46 ce       	rjmp	.-884    	; 0x3050 <f_open+0x220>
    33c4:	0d c0       	rjmp	.+26     	; 0x33e0 <f_open+0x5b0>
    33c6:	ed 89       	ldd	r30, Y+21	; 0x15
    33c8:	fe 89       	ldd	r31, Y+22	; 0x16
    33ca:	93 85       	ldd	r25, Z+11	; 0x0b
    33cc:	84 30       	cpi	r24, 0x04	; 4
    33ce:	09 f4       	brne	.+2      	; 0x33d2 <f_open+0x5a2>
    33d0:	3b ce       	rjmp	.-906    	; 0x3048 <f_open+0x218>
    33d2:	eb 88       	ldd	r14, Y+19	; 0x13
    33d4:	fc 88       	ldd	r15, Y+20	; 0x14
    33d6:	9d a1       	ldd	r25, Y+37	; 0x25
    33d8:	9c 71       	andi	r25, 0x1C	; 28
    33da:	09 f0       	breq	.+2      	; 0x33de <f_open+0x5ae>
    33dc:	47 ce       	rjmp	.-882    	; 0x306c <f_open+0x23c>
    33de:	68 cf       	rjmp	.-304    	; 0x32b0 <f_open+0x480>
    33e0:	7b 01       	movw	r14, r22
    33e2:	67 2b       	or	r22, r23
    33e4:	29 f4       	brne	.+10     	; 0x33f0 <f_open+0x5c0>
    33e6:	09 c0       	rjmp	.+18     	; 0x33fa <f_open+0x5ca>
    33e8:	0d a1       	ldd	r16, Y+37	; 0x25
    33ea:	0c 71       	andi	r16, 0x1C	; 28
    33ec:	81 f5       	brne	.+96     	; 0x344e <f_open+0x61e>
    33ee:	21 c0       	rjmp	.+66     	; 0x3432 <f_open+0x602>
    33f0:	8d a1       	ldd	r24, Y+37	; 0x25
    33f2:	8c 71       	andi	r24, 0x1C	; 28
    33f4:	09 f0       	breq	.+2      	; 0x33f8 <f_open+0x5c8>
    33f6:	81 ce       	rjmp	.-766    	; 0x30fa <f_open+0x2ca>
    33f8:	5d cf       	rjmp	.-326    	; 0x32b4 <f_open+0x484>
    33fa:	0d a1       	ldd	r16, Y+37	; 0x25
    33fc:	0c 71       	andi	r16, 0x1C	; 28
    33fe:	51 f5       	brne	.+84     	; 0x3454 <f_open+0x624>
    3400:	e1 2c       	mov	r14, r1
    3402:	f1 2c       	mov	r15, r1
    3404:	86 e0       	ldi	r24, 0x06	; 6
    3406:	15 c0       	rjmp	.+42     	; 0x3432 <f_open+0x602>
    3408:	87 e0       	ldi	r24, 0x07	; 7
    340a:	01 c0       	rjmp	.+2      	; 0x340e <f_open+0x5de>
    340c:	88 e0       	ldi	r24, 0x08	; 8
    340e:	88 23       	and	r24, r24
    3410:	09 f4       	brne	.+2      	; 0x3414 <f_open+0x5e4>
    3412:	59 cf       	rjmp	.-334    	; 0x32c6 <f_open+0x496>
    3414:	3e c0       	rjmp	.+124    	; 0x3492 <f_open+0x662>
    3416:	82 e0       	ldi	r24, 0x02	; 2
    3418:	05 c0       	rjmp	.+10     	; 0x3424 <f_open+0x5f4>
    341a:	82 e0       	ldi	r24, 0x02	; 2
    341c:	03 c0       	rjmp	.+6      	; 0x3424 <f_open+0x5f4>
    341e:	82 e0       	ldi	r24, 0x02	; 2
    3420:	01 c0       	rjmp	.+2      	; 0x3424 <f_open+0x5f4>
    3422:	81 e0       	ldi	r24, 0x01	; 1
    3424:	88 23       	and	r24, r24
    3426:	09 f4       	brne	.+2      	; 0x342a <f_open+0x5fa>
    3428:	51 cf       	rjmp	.-350    	; 0x32cc <f_open+0x49c>
    342a:	33 c0       	rjmp	.+102    	; 0x3492 <f_open+0x662>
    342c:	84 e0       	ldi	r24, 0x04	; 4
    342e:	01 c0       	rjmp	.+2      	; 0x3432 <f_open+0x602>
    3430:	87 e0       	ldi	r24, 0x07	; 7
    3432:	88 23       	and	r24, r24
    3434:	09 f4       	brne	.+2      	; 0x3438 <f_open+0x608>
    3436:	5a cf       	rjmp	.-332    	; 0x32ec <f_open+0x4bc>
    3438:	2c c0       	rjmp	.+88     	; 0x3492 <f_open+0x662>
    343a:	eb 88       	ldd	r14, Y+19	; 0x13
    343c:	fc 88       	ldd	r15, Y+20	; 0x14
    343e:	86 e0       	ldi	r24, 0x06	; 6
    3440:	d3 cf       	rjmp	.-90     	; 0x33e8 <f_open+0x5b8>
    3442:	b9 a5       	ldd	r27, Y+41	; 0x29
    3444:	b8 60       	ori	r27, 0x08	; 8
    3446:	b9 a7       	std	Y+41, r27	; 0x29
    3448:	eb 88       	ldd	r14, Y+19	; 0x13
    344a:	fc 88       	ldd	r15, Y+20	; 0x14
    344c:	f2 cf       	rjmp	.-28     	; 0x3432 <f_open+0x602>
    344e:	84 30       	cpi	r24, 0x04	; 4
    3450:	c1 f7       	brne	.-16     	; 0x3442 <f_open+0x612>
    3452:	0f ce       	rjmp	.-994    	; 0x3072 <f_open+0x242>
    3454:	86 e0       	ldi	r24, 0x06	; 6
    3456:	01 c0       	rjmp	.+2      	; 0x345a <f_open+0x62a>
    3458:	87 e0       	ldi	r24, 0x07	; 7
    345a:	e9 a5       	ldd	r30, Y+41	; 0x29
    345c:	e8 60       	ori	r30, 0x08	; 8
    345e:	e9 a7       	std	Y+41, r30	; 0x29
    3460:	eb 88       	ldd	r14, Y+19	; 0x13
    3462:	fc 88       	ldd	r15, Y+20	; 0x14
    3464:	e6 cf       	rjmp	.-52     	; 0x3432 <f_open+0x602>
    3466:	84 e0       	ldi	r24, 0x04	; 4
    3468:	05 c0       	rjmp	.+10     	; 0x3474 <f_open+0x644>
    346a:	85 e0       	ldi	r24, 0x05	; 5
    346c:	03 c0       	rjmp	.+6      	; 0x3474 <f_open+0x644>
    346e:	86 e0       	ldi	r24, 0x06	; 6
    3470:	01 c0       	rjmp	.+2      	; 0x3474 <f_open+0x644>
    3472:	86 e0       	ldi	r24, 0x06	; 6
    3474:	eb 88       	ldd	r14, Y+19	; 0x13
    3476:	fc 88       	ldd	r15, Y+20	; 0x14
    3478:	9d a1       	ldd	r25, Y+37	; 0x25
    347a:	9c 71       	andi	r25, 0x1C	; 28
    347c:	41 f7       	brne	.-48     	; 0x344e <f_open+0x61e>
    347e:	18 cf       	rjmp	.-464    	; 0x32b0 <f_open+0x480>
    3480:	f9 a5       	ldd	r31, Y+41	; 0x29
    3482:	f8 60       	ori	r31, 0x08	; 8
    3484:	f9 a7       	std	Y+41, r31	; 0x29
    3486:	eb 88       	ldd	r14, Y+19	; 0x13
    3488:	fc 88       	ldd	r15, Y+20	; 0x14
    348a:	d3 cf       	rjmp	.-90     	; 0x3432 <f_open+0x602>
    348c:	84 30       	cpi	r24, 0x04	; 4
    348e:	21 f3       	breq	.-56     	; 0x3458 <f_open+0x628>
    3490:	f7 cf       	rjmp	.-18     	; 0x3480 <f_open+0x650>
    3492:	ae 96       	adiw	r28, 0x2e	; 46
    3494:	0f b6       	in	r0, 0x3f	; 63
    3496:	f8 94       	cli
    3498:	de bf       	out	0x3e, r29	; 62
    349a:	0f be       	out	0x3f, r0	; 63
    349c:	cd bf       	out	0x3d, r28	; 61
    349e:	df 91       	pop	r29
    34a0:	cf 91       	pop	r28
    34a2:	1f 91       	pop	r17
    34a4:	0f 91       	pop	r16
    34a6:	ff 90       	pop	r15
    34a8:	ef 90       	pop	r14
    34aa:	df 90       	pop	r13
    34ac:	cf 90       	pop	r12
    34ae:	bf 90       	pop	r11
    34b0:	af 90       	pop	r10
    34b2:	9f 90       	pop	r9
    34b4:	8f 90       	pop	r8
    34b6:	7f 90       	pop	r7
    34b8:	6f 90       	pop	r6
    34ba:	5f 90       	pop	r5
    34bc:	4f 90       	pop	r4
    34be:	3f 90       	pop	r3
    34c0:	2f 90       	pop	r2
    34c2:	08 95       	ret

000034c4 <f_write>:
    34c4:	3f 92       	push	r3
    34c6:	4f 92       	push	r4
    34c8:	5f 92       	push	r5
    34ca:	6f 92       	push	r6
    34cc:	7f 92       	push	r7
    34ce:	8f 92       	push	r8
    34d0:	9f 92       	push	r9
    34d2:	af 92       	push	r10
    34d4:	bf 92       	push	r11
    34d6:	cf 92       	push	r12
    34d8:	df 92       	push	r13
    34da:	ef 92       	push	r14
    34dc:	ff 92       	push	r15
    34de:	0f 93       	push	r16
    34e0:	1f 93       	push	r17
    34e2:	cf 93       	push	r28
    34e4:	df 93       	push	r29
    34e6:	00 d0       	rcall	.+0      	; 0x34e8 <f_write+0x24>
    34e8:	00 d0       	rcall	.+0      	; 0x34ea <f_write+0x26>
    34ea:	00 d0       	rcall	.+0      	; 0x34ec <f_write+0x28>
    34ec:	cd b7       	in	r28, 0x3d	; 61
    34ee:	de b7       	in	r29, 0x3e	; 62
    34f0:	9e 83       	std	Y+6, r25	; 0x06
    34f2:	8d 83       	std	Y+5, r24	; 0x05
    34f4:	4b 01       	movw	r8, r22
    34f6:	6a 01       	movw	r12, r20
    34f8:	59 01       	movw	r10, r18
    34fa:	d9 01       	movw	r26, r18
    34fc:	1d 92       	st	X+, r1
    34fe:	1c 92       	st	X, r1
    3500:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <validate>
    3504:	81 11       	cpse	r24, r1
    3506:	c0 c1       	rjmp	.+896    	; 0x3888 <f_write+0x3c4>
    3508:	ed 81       	ldd	r30, Y+5	; 0x05
    350a:	fe 81       	ldd	r31, Y+6	; 0x06
    350c:	85 81       	ldd	r24, Z+5	; 0x05
    350e:	81 11       	cpse	r24, r1
    3510:	bb c1       	rjmp	.+886    	; 0x3888 <f_write+0x3c4>
    3512:	84 81       	ldd	r24, Z+4	; 0x04
    3514:	81 ff       	sbrs	r24, 1
    3516:	b7 c1       	rjmp	.+878    	; 0x3886 <f_write+0x3c2>
    3518:	86 81       	ldd	r24, Z+6	; 0x06
    351a:	97 81       	ldd	r25, Z+7	; 0x07
    351c:	a0 85       	ldd	r26, Z+8	; 0x08
    351e:	b1 85       	ldd	r27, Z+9	; 0x09
    3520:	ac 01       	movw	r20, r24
    3522:	bd 01       	movw	r22, r26
    3524:	4c 0d       	add	r20, r12
    3526:	5d 1d       	adc	r21, r13
    3528:	61 1d       	adc	r22, r1
    352a:	71 1d       	adc	r23, r1
    352c:	48 17       	cp	r20, r24
    352e:	59 07       	cpc	r21, r25
    3530:	6a 07       	cpc	r22, r26
    3532:	7b 07       	cpc	r23, r27
    3534:	08 f4       	brcc	.+2      	; 0x3538 <f_write+0x74>
    3536:	8a c1       	rjmp	.+788    	; 0x384c <f_write+0x388>
    3538:	c1 14       	cp	r12, r1
    353a:	d1 04       	cpc	r13, r1
    353c:	09 f4       	brne	.+2      	; 0x3540 <f_write+0x7c>
    353e:	86 c1       	rjmp	.+780    	; 0x384c <f_write+0x388>
    3540:	b0 96       	adiw	r30, 0x20	; 32
    3542:	fc 83       	std	Y+4, r31	; 0x04
    3544:	eb 83       	std	Y+3, r30	; 0x03
    3546:	ed 81       	ldd	r30, Y+5	; 0x05
    3548:	fe 81       	ldd	r31, Y+6	; 0x06
    354a:	86 81       	ldd	r24, Z+6	; 0x06
    354c:	97 81       	ldd	r25, Z+7	; 0x07
    354e:	a0 85       	ldd	r26, Z+8	; 0x08
    3550:	b1 85       	ldd	r27, Z+9	; 0x09
    3552:	ac 01       	movw	r20, r24
    3554:	bd 01       	movw	r22, r26
    3556:	51 70       	andi	r21, 0x01	; 1
    3558:	66 27       	eor	r22, r22
    355a:	77 27       	eor	r23, r23
    355c:	45 2b       	or	r20, r21
    355e:	46 2b       	or	r20, r22
    3560:	47 2b       	or	r20, r23
    3562:	09 f0       	breq	.+2      	; 0x3566 <f_write+0xa2>
    3564:	32 c1       	rjmp	.+612    	; 0x37ca <f_write+0x306>
    3566:	e0 80       	ld	r14, Z
    3568:	f1 80       	ldd	r15, Z+1	; 0x01
    356a:	f7 01       	movw	r30, r14
    356c:	22 81       	ldd	r18, Z+2	; 0x02
    356e:	21 50       	subi	r18, 0x01	; 1
    3570:	ac 01       	movw	r20, r24
    3572:	bd 01       	movw	r22, r26
    3574:	03 2e       	mov	r0, r19
    3576:	39 e0       	ldi	r19, 0x09	; 9
    3578:	76 95       	lsr	r23
    357a:	67 95       	ror	r22
    357c:	57 95       	ror	r21
    357e:	47 95       	ror	r20
    3580:	3a 95       	dec	r19
    3582:	d1 f7       	brne	.-12     	; 0x3578 <f_write+0xb4>
    3584:	30 2d       	mov	r19, r0
    3586:	32 2e       	mov	r3, r18
    3588:	34 22       	and	r3, r20
    358a:	09 f0       	breq	.+2      	; 0x358e <f_write+0xca>
    358c:	52 c0       	rjmp	.+164    	; 0x3632 <f_write+0x16e>
    358e:	89 2b       	or	r24, r25
    3590:	8a 2b       	or	r24, r26
    3592:	8b 2b       	or	r24, r27
    3594:	99 f4       	brne	.+38     	; 0x35bc <f_write+0xf8>
    3596:	ad 81       	ldd	r26, Y+5	; 0x05
    3598:	be 81       	ldd	r27, Y+6	; 0x06
    359a:	1e 96       	adiw	r26, 0x0e	; 14
    359c:	6d 91       	ld	r22, X+
    359e:	7d 91       	ld	r23, X+
    35a0:	8d 91       	ld	r24, X+
    35a2:	9c 91       	ld	r25, X
    35a4:	51 97       	sbiw	r26, 0x11	; 17
    35a6:	61 15       	cp	r22, r1
    35a8:	71 05       	cpc	r23, r1
    35aa:	81 05       	cpc	r24, r1
    35ac:	91 05       	cpc	r25, r1
    35ae:	a1 f4       	brne	.+40     	; 0x35d8 <f_write+0x114>
    35b0:	40 e0       	ldi	r20, 0x00	; 0
    35b2:	50 e0       	ldi	r21, 0x00	; 0
    35b4:	ba 01       	movw	r22, r20
    35b6:	c7 01       	movw	r24, r14
    35b8:	9e d9       	rcall	.-3268   	; 0x28f6 <create_chain>
    35ba:	08 c0       	rjmp	.+16     	; 0x35cc <f_write+0x108>
    35bc:	ed 81       	ldd	r30, Y+5	; 0x05
    35be:	fe 81       	ldd	r31, Y+6	; 0x06
    35c0:	42 89       	ldd	r20, Z+18	; 0x12
    35c2:	53 89       	ldd	r21, Z+19	; 0x13
    35c4:	64 89       	ldd	r22, Z+20	; 0x14
    35c6:	75 89       	ldd	r23, Z+21	; 0x15
    35c8:	c7 01       	movw	r24, r14
    35ca:	95 d9       	rcall	.-3286   	; 0x28f6 <create_chain>
    35cc:	61 15       	cp	r22, r1
    35ce:	71 05       	cpc	r23, r1
    35d0:	81 05       	cpc	r24, r1
    35d2:	91 05       	cpc	r25, r1
    35d4:	09 f4       	brne	.+2      	; 0x35d8 <f_write+0x114>
    35d6:	3a c1       	rjmp	.+628    	; 0x384c <f_write+0x388>
    35d8:	61 30       	cpi	r22, 0x01	; 1
    35da:	71 05       	cpc	r23, r1
    35dc:	81 05       	cpc	r24, r1
    35de:	91 05       	cpc	r25, r1
    35e0:	31 f4       	brne	.+12     	; 0x35ee <f_write+0x12a>
    35e2:	82 e0       	ldi	r24, 0x02	; 2
    35e4:	ad 81       	ldd	r26, Y+5	; 0x05
    35e6:	be 81       	ldd	r27, Y+6	; 0x06
    35e8:	15 96       	adiw	r26, 0x05	; 5
    35ea:	8c 93       	st	X, r24
    35ec:	4d c1       	rjmp	.+666    	; 0x3888 <f_write+0x3c4>
    35ee:	6f 3f       	cpi	r22, 0xFF	; 255
    35f0:	bf ef       	ldi	r27, 0xFF	; 255
    35f2:	7b 07       	cpc	r23, r27
    35f4:	8b 07       	cpc	r24, r27
    35f6:	9b 07       	cpc	r25, r27
    35f8:	29 f4       	brne	.+10     	; 0x3604 <f_write+0x140>
    35fa:	81 e0       	ldi	r24, 0x01	; 1
    35fc:	ed 81       	ldd	r30, Y+5	; 0x05
    35fe:	fe 81       	ldd	r31, Y+6	; 0x06
    3600:	85 83       	std	Z+5, r24	; 0x05
    3602:	42 c1       	rjmp	.+644    	; 0x3888 <f_write+0x3c4>
    3604:	ad 81       	ldd	r26, Y+5	; 0x05
    3606:	be 81       	ldd	r27, Y+6	; 0x06
    3608:	52 96       	adiw	r26, 0x12	; 18
    360a:	6d 93       	st	X+, r22
    360c:	7d 93       	st	X+, r23
    360e:	8d 93       	st	X+, r24
    3610:	9c 93       	st	X, r25
    3612:	55 97       	sbiw	r26, 0x15	; 21
    3614:	1e 96       	adiw	r26, 0x0e	; 14
    3616:	4d 90       	ld	r4, X+
    3618:	5d 90       	ld	r5, X+
    361a:	6d 90       	ld	r6, X+
    361c:	7c 90       	ld	r7, X
    361e:	51 97       	sbiw	r26, 0x11	; 17
    3620:	45 28       	or	r4, r5
    3622:	46 28       	or	r4, r6
    3624:	47 28       	or	r4, r7
    3626:	29 f4       	brne	.+10     	; 0x3632 <f_write+0x16e>
    3628:	fd 01       	movw	r30, r26
    362a:	66 87       	std	Z+14, r22	; 0x0e
    362c:	77 87       	std	Z+15, r23	; 0x0f
    362e:	80 8b       	std	Z+16, r24	; 0x10
    3630:	91 8b       	std	Z+17, r25	; 0x11
    3632:	ad 81       	ldd	r26, Y+5	; 0x05
    3634:	be 81       	ldd	r27, Y+6	; 0x06
    3636:	14 96       	adiw	r26, 0x04	; 4
    3638:	8c 91       	ld	r24, X
    363a:	14 97       	sbiw	r26, 0x04	; 4
    363c:	86 ff       	sbrs	r24, 6
    363e:	1e c0       	rjmp	.+60     	; 0x367c <f_write+0x1b8>
    3640:	56 96       	adiw	r26, 0x16	; 22
    3642:	2d 91       	ld	r18, X+
    3644:	3d 91       	ld	r19, X+
    3646:	4d 91       	ld	r20, X+
    3648:	5c 91       	ld	r21, X
    364a:	59 97       	sbiw	r26, 0x19	; 25
    364c:	ed 91       	ld	r30, X+
    364e:	fc 91       	ld	r31, X
    3650:	01 e0       	ldi	r16, 0x01	; 1
    3652:	10 e0       	ldi	r17, 0x00	; 0
    3654:	6b 81       	ldd	r22, Y+3	; 0x03
    3656:	7c 81       	ldd	r23, Y+4	; 0x04
    3658:	81 81       	ldd	r24, Z+1	; 0x01
    365a:	0e 94 90 05 	call	0xb20	; 0xb20 <disk_write>
    365e:	88 23       	and	r24, r24
    3660:	29 f0       	breq	.+10     	; 0x366c <f_write+0x1a8>
    3662:	81 e0       	ldi	r24, 0x01	; 1
    3664:	ed 81       	ldd	r30, Y+5	; 0x05
    3666:	fe 81       	ldd	r31, Y+6	; 0x06
    3668:	85 83       	std	Z+5, r24	; 0x05
    366a:	0e c1       	rjmp	.+540    	; 0x3888 <f_write+0x3c4>
    366c:	ad 81       	ldd	r26, Y+5	; 0x05
    366e:	be 81       	ldd	r27, Y+6	; 0x06
    3670:	14 96       	adiw	r26, 0x04	; 4
    3672:	8c 91       	ld	r24, X
    3674:	14 97       	sbiw	r26, 0x04	; 4
    3676:	8f 7b       	andi	r24, 0xBF	; 191
    3678:	14 96       	adiw	r26, 0x04	; 4
    367a:	8c 93       	st	X, r24
    367c:	ed 81       	ldd	r30, Y+5	; 0x05
    367e:	fe 81       	ldd	r31, Y+6	; 0x06
    3680:	01 90       	ld	r0, Z+
    3682:	f0 81       	ld	r31, Z
    3684:	e0 2d       	mov	r30, r0
    3686:	fa 83       	std	Y+2, r31	; 0x02
    3688:	e9 83       	std	Y+1, r30	; 0x01
    368a:	ad 81       	ldd	r26, Y+5	; 0x05
    368c:	be 81       	ldd	r27, Y+6	; 0x06
    368e:	52 96       	adiw	r26, 0x12	; 18
    3690:	4d 91       	ld	r20, X+
    3692:	5d 91       	ld	r21, X+
    3694:	6d 91       	ld	r22, X+
    3696:	7c 91       	ld	r23, X
    3698:	55 97       	sbiw	r26, 0x15	; 21
    369a:	cf 01       	movw	r24, r30
    369c:	0e 94 6c 11 	call	0x22d8	; 0x22d8 <clust2sect>
    36a0:	61 15       	cp	r22, r1
    36a2:	71 05       	cpc	r23, r1
    36a4:	81 05       	cpc	r24, r1
    36a6:	91 05       	cpc	r25, r1
    36a8:	29 f4       	brne	.+10     	; 0x36b4 <f_write+0x1f0>
    36aa:	82 e0       	ldi	r24, 0x02	; 2
    36ac:	ed 81       	ldd	r30, Y+5	; 0x05
    36ae:	fe 81       	ldd	r31, Y+6	; 0x06
    36b0:	85 83       	std	Z+5, r24	; 0x05
    36b2:	ea c0       	rjmp	.+468    	; 0x3888 <f_write+0x3c4>
    36b4:	2b 01       	movw	r4, r22
    36b6:	3c 01       	movw	r6, r24
    36b8:	43 0c       	add	r4, r3
    36ba:	51 1c       	adc	r5, r1
    36bc:	61 1c       	adc	r6, r1
    36be:	71 1c       	adc	r7, r1
    36c0:	76 01       	movw	r14, r12
    36c2:	ef 2c       	mov	r14, r15
    36c4:	ff 24       	eor	r15, r15
    36c6:	e6 94       	lsr	r14
    36c8:	e1 14       	cp	r14, r1
    36ca:	f1 04       	cpc	r15, r1
    36cc:	09 f4       	brne	.+2      	; 0x36d0 <f_write+0x20c>
    36ce:	4a c0       	rjmp	.+148    	; 0x3764 <f_write+0x2a0>
    36d0:	a9 81       	ldd	r26, Y+1	; 0x01
    36d2:	ba 81       	ldd	r27, Y+2	; 0x02
    36d4:	12 96       	adiw	r26, 0x02	; 2
    36d6:	4c 91       	ld	r20, X
    36d8:	24 2f       	mov	r18, r20
    36da:	30 e0       	ldi	r19, 0x00	; 0
    36dc:	c7 01       	movw	r24, r14
    36de:	83 0d       	add	r24, r3
    36e0:	91 1d       	adc	r25, r1
    36e2:	28 17       	cp	r18, r24
    36e4:	39 07       	cpc	r19, r25
    36e6:	18 f4       	brcc	.+6      	; 0x36ee <f_write+0x22a>
    36e8:	79 01       	movw	r14, r18
    36ea:	e3 18       	sub	r14, r3
    36ec:	f1 08       	sbc	r15, r1
    36ee:	87 01       	movw	r16, r14
    36f0:	a3 01       	movw	r20, r6
    36f2:	92 01       	movw	r18, r4
    36f4:	b4 01       	movw	r22, r8
    36f6:	e9 81       	ldd	r30, Y+1	; 0x01
    36f8:	fa 81       	ldd	r31, Y+2	; 0x02
    36fa:	81 81       	ldd	r24, Z+1	; 0x01
    36fc:	0e 94 90 05 	call	0xb20	; 0xb20 <disk_write>
    3700:	88 23       	and	r24, r24
    3702:	31 f0       	breq	.+12     	; 0x3710 <f_write+0x24c>
    3704:	81 e0       	ldi	r24, 0x01	; 1
    3706:	ad 81       	ldd	r26, Y+5	; 0x05
    3708:	be 81       	ldd	r27, Y+6	; 0x06
    370a:	15 96       	adiw	r26, 0x05	; 5
    370c:	8c 93       	st	X, r24
    370e:	bc c0       	rjmp	.+376    	; 0x3888 <f_write+0x3c4>
    3710:	ed 81       	ldd	r30, Y+5	; 0x05
    3712:	fe 81       	ldd	r31, Y+6	; 0x06
    3714:	86 89       	ldd	r24, Z+22	; 0x16
    3716:	97 89       	ldd	r25, Z+23	; 0x17
    3718:	a0 8d       	ldd	r26, Z+24	; 0x18
    371a:	b1 8d       	ldd	r27, Z+25	; 0x19
    371c:	84 19       	sub	r24, r4
    371e:	95 09       	sbc	r25, r5
    3720:	a6 09       	sbc	r26, r6
    3722:	b7 09       	sbc	r27, r7
    3724:	a7 01       	movw	r20, r14
    3726:	60 e0       	ldi	r22, 0x00	; 0
    3728:	70 e0       	ldi	r23, 0x00	; 0
    372a:	84 17       	cp	r24, r20
    372c:	95 07       	cpc	r25, r21
    372e:	a6 07       	cpc	r26, r22
    3730:	b7 07       	cpc	r27, r23
    3732:	a0 f4       	brcc	.+40     	; 0x375c <f_write+0x298>
    3734:	98 2f       	mov	r25, r24
    3736:	88 27       	eor	r24, r24
    3738:	99 0f       	add	r25, r25
    373a:	b4 01       	movw	r22, r8
    373c:	68 0f       	add	r22, r24
    373e:	79 1f       	adc	r23, r25
    3740:	40 e0       	ldi	r20, 0x00	; 0
    3742:	52 e0       	ldi	r21, 0x02	; 2
    3744:	8b 81       	ldd	r24, Y+3	; 0x03
    3746:	9c 81       	ldd	r25, Y+4	; 0x04
    3748:	0e 94 11 0c 	call	0x1822	; 0x1822 <mem_cpy>
    374c:	ad 81       	ldd	r26, Y+5	; 0x05
    374e:	be 81       	ldd	r27, Y+6	; 0x06
    3750:	14 96       	adiw	r26, 0x04	; 4
    3752:	8c 91       	ld	r24, X
    3754:	14 97       	sbiw	r26, 0x04	; 4
    3756:	8f 7b       	andi	r24, 0xBF	; 191
    3758:	14 96       	adiw	r26, 0x04	; 4
    375a:	8c 93       	st	X, r24
    375c:	fe 2c       	mov	r15, r14
    375e:	ee 24       	eor	r14, r14
    3760:	ff 0c       	add	r15, r15
    3762:	58 c0       	rjmp	.+176    	; 0x3814 <f_write+0x350>
    3764:	ed 81       	ldd	r30, Y+5	; 0x05
    3766:	fe 81       	ldd	r31, Y+6	; 0x06
    3768:	86 89       	ldd	r24, Z+22	; 0x16
    376a:	97 89       	ldd	r25, Z+23	; 0x17
    376c:	a0 8d       	ldd	r26, Z+24	; 0x18
    376e:	b1 8d       	ldd	r27, Z+25	; 0x19
    3770:	84 15       	cp	r24, r4
    3772:	95 05       	cpc	r25, r5
    3774:	a6 05       	cpc	r26, r6
    3776:	b7 05       	cpc	r27, r7
    3778:	01 f1       	breq	.+64     	; 0x37ba <f_write+0x2f6>
    377a:	46 81       	ldd	r20, Z+6	; 0x06
    377c:	57 81       	ldd	r21, Z+7	; 0x07
    377e:	60 85       	ldd	r22, Z+8	; 0x08
    3780:	71 85       	ldd	r23, Z+9	; 0x09
    3782:	82 85       	ldd	r24, Z+10	; 0x0a
    3784:	93 85       	ldd	r25, Z+11	; 0x0b
    3786:	a4 85       	ldd	r26, Z+12	; 0x0c
    3788:	b5 85       	ldd	r27, Z+13	; 0x0d
    378a:	48 17       	cp	r20, r24
    378c:	59 07       	cpc	r21, r25
    378e:	6a 07       	cpc	r22, r26
    3790:	7b 07       	cpc	r23, r27
    3792:	98 f4       	brcc	.+38     	; 0x37ba <f_write+0x2f6>
    3794:	01 e0       	ldi	r16, 0x01	; 1
    3796:	10 e0       	ldi	r17, 0x00	; 0
    3798:	a3 01       	movw	r20, r6
    379a:	92 01       	movw	r18, r4
    379c:	6b 81       	ldd	r22, Y+3	; 0x03
    379e:	7c 81       	ldd	r23, Y+4	; 0x04
    37a0:	a9 81       	ldd	r26, Y+1	; 0x01
    37a2:	ba 81       	ldd	r27, Y+2	; 0x02
    37a4:	11 96       	adiw	r26, 0x01	; 1
    37a6:	8c 91       	ld	r24, X
    37a8:	0e 94 3e 05 	call	0xa7c	; 0xa7c <disk_read>
    37ac:	88 23       	and	r24, r24
    37ae:	29 f0       	breq	.+10     	; 0x37ba <f_write+0x2f6>
    37b0:	81 e0       	ldi	r24, 0x01	; 1
    37b2:	ed 81       	ldd	r30, Y+5	; 0x05
    37b4:	fe 81       	ldd	r31, Y+6	; 0x06
    37b6:	85 83       	std	Z+5, r24	; 0x05
    37b8:	67 c0       	rjmp	.+206    	; 0x3888 <f_write+0x3c4>
    37ba:	ad 81       	ldd	r26, Y+5	; 0x05
    37bc:	be 81       	ldd	r27, Y+6	; 0x06
    37be:	56 96       	adiw	r26, 0x16	; 22
    37c0:	4d 92       	st	X+, r4
    37c2:	5d 92       	st	X+, r5
    37c4:	6d 92       	st	X+, r6
    37c6:	7c 92       	st	X, r7
    37c8:	59 97       	sbiw	r26, 0x19	; 25
    37ca:	ed 81       	ldd	r30, Y+5	; 0x05
    37cc:	fe 81       	ldd	r31, Y+6	; 0x06
    37ce:	86 81       	ldd	r24, Z+6	; 0x06
    37d0:	97 81       	ldd	r25, Z+7	; 0x07
    37d2:	a0 85       	ldd	r26, Z+8	; 0x08
    37d4:	b1 85       	ldd	r27, Z+9	; 0x09
    37d6:	ac 01       	movw	r20, r24
    37d8:	51 70       	andi	r21, 0x01	; 1
    37da:	20 e0       	ldi	r18, 0x00	; 0
    37dc:	32 e0       	ldi	r19, 0x02	; 2
    37de:	24 1b       	sub	r18, r20
    37e0:	35 0b       	sbc	r19, r21
    37e2:	76 01       	movw	r14, r12
    37e4:	2c 15       	cp	r18, r12
    37e6:	3d 05       	cpc	r19, r13
    37e8:	08 f4       	brcc	.+2      	; 0x37ec <f_write+0x328>
    37ea:	79 01       	movw	r14, r18
    37ec:	91 70       	andi	r25, 0x01	; 1
    37ee:	aa 27       	eor	r26, r26
    37f0:	bb 27       	eor	r27, r27
    37f2:	80 96       	adiw	r24, 0x20	; 32
    37f4:	a7 01       	movw	r20, r14
    37f6:	b4 01       	movw	r22, r8
    37f8:	2d 81       	ldd	r18, Y+5	; 0x05
    37fa:	3e 81       	ldd	r19, Y+6	; 0x06
    37fc:	82 0f       	add	r24, r18
    37fe:	93 1f       	adc	r25, r19
    3800:	0e 94 11 0c 	call	0x1822	; 0x1822 <mem_cpy>
    3804:	ad 81       	ldd	r26, Y+5	; 0x05
    3806:	be 81       	ldd	r27, Y+6	; 0x06
    3808:	14 96       	adiw	r26, 0x04	; 4
    380a:	8c 91       	ld	r24, X
    380c:	14 97       	sbiw	r26, 0x04	; 4
    380e:	80 64       	ori	r24, 0x40	; 64
    3810:	14 96       	adiw	r26, 0x04	; 4
    3812:	8c 93       	st	X, r24
    3814:	8e 0c       	add	r8, r14
    3816:	9f 1c       	adc	r9, r15
    3818:	ed 81       	ldd	r30, Y+5	; 0x05
    381a:	fe 81       	ldd	r31, Y+6	; 0x06
    381c:	86 81       	ldd	r24, Z+6	; 0x06
    381e:	97 81       	ldd	r25, Z+7	; 0x07
    3820:	a0 85       	ldd	r26, Z+8	; 0x08
    3822:	b1 85       	ldd	r27, Z+9	; 0x09
    3824:	8e 0d       	add	r24, r14
    3826:	9f 1d       	adc	r25, r15
    3828:	a1 1d       	adc	r26, r1
    382a:	b1 1d       	adc	r27, r1
    382c:	86 83       	std	Z+6, r24	; 0x06
    382e:	97 83       	std	Z+7, r25	; 0x07
    3830:	a0 87       	std	Z+8, r26	; 0x08
    3832:	b1 87       	std	Z+9, r27	; 0x09
    3834:	d5 01       	movw	r26, r10
    3836:	8d 91       	ld	r24, X+
    3838:	9c 91       	ld	r25, X
    383a:	11 97       	sbiw	r26, 0x01	; 1
    383c:	8e 0d       	add	r24, r14
    383e:	9f 1d       	adc	r25, r15
    3840:	8d 93       	st	X+, r24
    3842:	9c 93       	st	X, r25
    3844:	ce 18       	sub	r12, r14
    3846:	df 08       	sbc	r13, r15
    3848:	09 f0       	breq	.+2      	; 0x384c <f_write+0x388>
    384a:	7d ce       	rjmp	.-774    	; 0x3546 <f_write+0x82>
    384c:	ed 81       	ldd	r30, Y+5	; 0x05
    384e:	fe 81       	ldd	r31, Y+6	; 0x06
    3850:	86 81       	ldd	r24, Z+6	; 0x06
    3852:	97 81       	ldd	r25, Z+7	; 0x07
    3854:	a0 85       	ldd	r26, Z+8	; 0x08
    3856:	b1 85       	ldd	r27, Z+9	; 0x09
    3858:	42 85       	ldd	r20, Z+10	; 0x0a
    385a:	53 85       	ldd	r21, Z+11	; 0x0b
    385c:	64 85       	ldd	r22, Z+12	; 0x0c
    385e:	75 85       	ldd	r23, Z+13	; 0x0d
    3860:	48 17       	cp	r20, r24
    3862:	59 07       	cpc	r21, r25
    3864:	6a 07       	cpc	r22, r26
    3866:	7b 07       	cpc	r23, r27
    3868:	20 f4       	brcc	.+8      	; 0x3872 <f_write+0x3ae>
    386a:	82 87       	std	Z+10, r24	; 0x0a
    386c:	93 87       	std	Z+11, r25	; 0x0b
    386e:	a4 87       	std	Z+12, r26	; 0x0c
    3870:	b5 87       	std	Z+13, r27	; 0x0d
    3872:	ad 81       	ldd	r26, Y+5	; 0x05
    3874:	be 81       	ldd	r27, Y+6	; 0x06
    3876:	14 96       	adiw	r26, 0x04	; 4
    3878:	8c 91       	ld	r24, X
    387a:	14 97       	sbiw	r26, 0x04	; 4
    387c:	80 62       	ori	r24, 0x20	; 32
    387e:	14 96       	adiw	r26, 0x04	; 4
    3880:	8c 93       	st	X, r24
    3882:	80 e0       	ldi	r24, 0x00	; 0
    3884:	01 c0       	rjmp	.+2      	; 0x3888 <f_write+0x3c4>
    3886:	87 e0       	ldi	r24, 0x07	; 7
    3888:	26 96       	adiw	r28, 0x06	; 6
    388a:	0f b6       	in	r0, 0x3f	; 63
    388c:	f8 94       	cli
    388e:	de bf       	out	0x3e, r29	; 62
    3890:	0f be       	out	0x3f, r0	; 63
    3892:	cd bf       	out	0x3d, r28	; 61
    3894:	df 91       	pop	r29
    3896:	cf 91       	pop	r28
    3898:	1f 91       	pop	r17
    389a:	0f 91       	pop	r16
    389c:	ff 90       	pop	r15
    389e:	ef 90       	pop	r14
    38a0:	df 90       	pop	r13
    38a2:	cf 90       	pop	r12
    38a4:	bf 90       	pop	r11
    38a6:	af 90       	pop	r10
    38a8:	9f 90       	pop	r9
    38aa:	8f 90       	pop	r8
    38ac:	7f 90       	pop	r7
    38ae:	6f 90       	pop	r6
    38b0:	5f 90       	pop	r5
    38b2:	4f 90       	pop	r4
    38b4:	3f 90       	pop	r3
    38b6:	08 95       	ret

000038b8 <putc_bfd>:
    38b8:	ef 92       	push	r14
    38ba:	ff 92       	push	r15
    38bc:	0f 93       	push	r16
    38be:	1f 93       	push	r17
    38c0:	cf 93       	push	r28
    38c2:	df 93       	push	r29
    38c4:	00 d0       	rcall	.+0      	; 0x38c6 <putc_bfd+0xe>
    38c6:	cd b7       	in	r28, 0x3d	; 61
    38c8:	de b7       	in	r29, 0x3e	; 62
    38ca:	fc 01       	movw	r30, r24
    38cc:	22 81       	ldd	r18, Z+2	; 0x02
    38ce:	33 81       	ldd	r19, Z+3	; 0x03
    38d0:	33 23       	and	r19, r19
    38d2:	6c f1       	brlt	.+90     	; 0x392e <putc_bfd+0x76>
    38d4:	8c 01       	movw	r16, r24
    38d6:	79 01       	movw	r14, r18
    38d8:	ff ef       	ldi	r31, 0xFF	; 255
    38da:	ef 1a       	sub	r14, r31
    38dc:	ff 0a       	sbc	r15, r31
    38de:	fc 01       	movw	r30, r24
    38e0:	e2 0f       	add	r30, r18
    38e2:	f3 1f       	adc	r31, r19
    38e4:	66 83       	std	Z+6, r22	; 0x06
    38e6:	8d e3       	ldi	r24, 0x3D	; 61
    38e8:	e8 16       	cp	r14, r24
    38ea:	f1 04       	cpc	r15, r1
    38ec:	c4 f0       	brlt	.+48     	; 0x391e <putc_bfd+0x66>
    38ee:	9e 01       	movw	r18, r28
    38f0:	2f 5f       	subi	r18, 0xFF	; 255
    38f2:	3f 4f       	sbci	r19, 0xFF	; 255
    38f4:	a7 01       	movw	r20, r14
    38f6:	b8 01       	movw	r22, r16
    38f8:	6a 5f       	subi	r22, 0xFA	; 250
    38fa:	7f 4f       	sbci	r23, 0xFF	; 255
    38fc:	f8 01       	movw	r30, r16
    38fe:	80 81       	ld	r24, Z
    3900:	91 81       	ldd	r25, Z+1	; 0x01
    3902:	e0 dd       	rcall	.-1088   	; 0x34c4 <f_write>
    3904:	81 e0       	ldi	r24, 0x01	; 1
    3906:	90 e0       	ldi	r25, 0x00	; 0
    3908:	29 81       	ldd	r18, Y+1	; 0x01
    390a:	3a 81       	ldd	r19, Y+2	; 0x02
    390c:	e2 16       	cp	r14, r18
    390e:	f3 06       	cpc	r15, r19
    3910:	11 f4       	brne	.+4      	; 0x3916 <putc_bfd+0x5e>
    3912:	80 e0       	ldi	r24, 0x00	; 0
    3914:	90 e0       	ldi	r25, 0x00	; 0
    3916:	ee 24       	eor	r14, r14
    3918:	ff 24       	eor	r15, r15
    391a:	e8 1a       	sub	r14, r24
    391c:	f9 0a       	sbc	r15, r25
    391e:	f8 01       	movw	r30, r16
    3920:	f3 82       	std	Z+3, r15	; 0x03
    3922:	e2 82       	std	Z+2, r14	; 0x02
    3924:	84 81       	ldd	r24, Z+4	; 0x04
    3926:	95 81       	ldd	r25, Z+5	; 0x05
    3928:	01 96       	adiw	r24, 0x01	; 1
    392a:	95 83       	std	Z+5, r25	; 0x05
    392c:	84 83       	std	Z+4, r24	; 0x04
    392e:	0f 90       	pop	r0
    3930:	0f 90       	pop	r0
    3932:	df 91       	pop	r29
    3934:	cf 91       	pop	r28
    3936:	1f 91       	pop	r17
    3938:	0f 91       	pop	r16
    393a:	ff 90       	pop	r15
    393c:	ef 90       	pop	r14
    393e:	08 95       	ret

00003940 <f_sync>:
    3940:	0f 93       	push	r16
    3942:	1f 93       	push	r17
    3944:	cf 93       	push	r28
    3946:	df 93       	push	r29
    3948:	ec 01       	movw	r28, r24
    394a:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <validate>
    394e:	81 11       	cpse	r24, r1
    3950:	b5 c0       	rjmp	.+362    	; 0x3abc <f_sync+0x17c>
    3952:	8c 81       	ldd	r24, Y+4	; 0x04
    3954:	85 ff       	sbrs	r24, 5
    3956:	b4 c0       	rjmp	.+360    	; 0x3ac0 <f_sync+0x180>
    3958:	86 ff       	sbrs	r24, 6
    395a:	13 c0       	rjmp	.+38     	; 0x3982 <f_sync+0x42>
    395c:	2e 89       	ldd	r18, Y+22	; 0x16
    395e:	3f 89       	ldd	r19, Y+23	; 0x17
    3960:	48 8d       	ldd	r20, Y+24	; 0x18
    3962:	59 8d       	ldd	r21, Y+25	; 0x19
    3964:	e8 81       	ld	r30, Y
    3966:	f9 81       	ldd	r31, Y+1	; 0x01
    3968:	01 e0       	ldi	r16, 0x01	; 1
    396a:	10 e0       	ldi	r17, 0x00	; 0
    396c:	be 01       	movw	r22, r28
    396e:	60 5e       	subi	r22, 0xE0	; 224
    3970:	7f 4f       	sbci	r23, 0xFF	; 255
    3972:	81 81       	ldd	r24, Z+1	; 0x01
    3974:	0e 94 90 05 	call	0xb20	; 0xb20 <disk_write>
    3978:	81 11       	cpse	r24, r1
    397a:	a4 c0       	rjmp	.+328    	; 0x3ac4 <f_sync+0x184>
    397c:	8c 81       	ldd	r24, Y+4	; 0x04
    397e:	8f 7b       	andi	r24, 0xBF	; 191
    3980:	8c 83       	std	Y+4, r24	; 0x04
    3982:	4a 8d       	ldd	r20, Y+26	; 0x1a
    3984:	5b 8d       	ldd	r21, Y+27	; 0x1b
    3986:	6c 8d       	ldd	r22, Y+28	; 0x1c
    3988:	7d 8d       	ldd	r23, Y+29	; 0x1d
    398a:	88 81       	ld	r24, Y
    398c:	99 81       	ldd	r25, Y+1	; 0x01
    398e:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <move_window>
    3992:	81 11       	cpse	r24, r1
    3994:	99 c0       	rjmp	.+306    	; 0x3ac8 <f_sync+0x188>
    3996:	0e 8d       	ldd	r16, Y+30	; 0x1e
    3998:	1f 8d       	ldd	r17, Y+31	; 0x1f
    399a:	f8 01       	movw	r30, r16
    399c:	83 85       	ldd	r24, Z+11	; 0x0b
    399e:	80 62       	ori	r24, 0x20	; 32
    39a0:	83 87       	std	Z+11, r24	; 0x0b
    39a2:	8a 85       	ldd	r24, Y+10	; 0x0a
    39a4:	84 8f       	std	Z+28, r24	; 0x1c
    39a6:	8b 85       	ldd	r24, Y+11	; 0x0b
    39a8:	85 8f       	std	Z+29, r24	; 0x1d
    39aa:	8c 85       	ldd	r24, Y+12	; 0x0c
    39ac:	86 8f       	std	Z+30, r24	; 0x1e
    39ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    39b0:	87 8f       	std	Z+31, r24	; 0x1f
    39b2:	8e 85       	ldd	r24, Y+14	; 0x0e
    39b4:	9f 85       	ldd	r25, Y+15	; 0x0f
    39b6:	a8 89       	ldd	r26, Y+16	; 0x10
    39b8:	b9 89       	ldd	r27, Y+17	; 0x11
    39ba:	82 8f       	std	Z+26, r24	; 0x1a
    39bc:	93 8f       	std	Z+27, r25	; 0x1b
    39be:	cd 01       	movw	r24, r26
    39c0:	aa 27       	eor	r26, r26
    39c2:	bb 27       	eor	r27, r27
    39c4:	84 8b       	std	Z+20, r24	; 0x14
    39c6:	95 8b       	std	Z+21, r25	; 0x15
    39c8:	0e 94 6d 29 	call	0x52da	; 0x52da <get_fattime>
    39cc:	f8 01       	movw	r30, r16
    39ce:	66 8b       	std	Z+22, r22	; 0x16
    39d0:	77 8b       	std	Z+23, r23	; 0x17
    39d2:	80 8f       	std	Z+24, r24	; 0x18
    39d4:	91 8f       	std	Z+25, r25	; 0x19
    39d6:	12 8a       	std	Z+18, r1	; 0x12
    39d8:	13 8a       	std	Z+19, r1	; 0x13
    39da:	8c 81       	ldd	r24, Y+4	; 0x04
    39dc:	8f 7d       	andi	r24, 0xDF	; 223
    39de:	8c 83       	std	Y+4, r24	; 0x04
    39e0:	e8 81       	ld	r30, Y
    39e2:	f9 81       	ldd	r31, Y+1	; 0x01
    39e4:	81 e0       	ldi	r24, 0x01	; 1
    39e6:	84 83       	std	Z+4, r24	; 0x04
    39e8:	09 90       	ld	r0, Y+
    39ea:	d8 81       	ld	r29, Y
    39ec:	c0 2d       	mov	r28, r0
    39ee:	ce 01       	movw	r24, r28
    39f0:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <sync_window>
    39f4:	81 11       	cpse	r24, r1
    39f6:	6a c0       	rjmp	.+212    	; 0x3acc <f_sync+0x18c>
    39f8:	88 81       	ld	r24, Y
    39fa:	83 30       	cpi	r24, 0x03	; 3
    39fc:	09 f0       	breq	.+2      	; 0x3a00 <f_sync+0xc0>
    39fe:	53 c0       	rjmp	.+166    	; 0x3aa6 <f_sync+0x166>
    3a00:	8d 81       	ldd	r24, Y+5	; 0x05
    3a02:	81 30       	cpi	r24, 0x01	; 1
    3a04:	09 f0       	breq	.+2      	; 0x3a08 <f_sync+0xc8>
    3a06:	4f c0       	rjmp	.+158    	; 0x3aa6 <f_sync+0x166>
    3a08:	be 01       	movw	r22, r28
    3a0a:	62 5d       	subi	r22, 0xD2	; 210
    3a0c:	7f 4f       	sbci	r23, 0xFF	; 255
    3a0e:	fb 01       	movw	r30, r22
    3a10:	ce 01       	movw	r24, r28
    3a12:	82 5d       	subi	r24, 0xD2	; 210
    3a14:	9d 4f       	sbci	r25, 0xFD	; 253
    3a16:	11 92       	st	Z+, r1
    3a18:	e8 17       	cp	r30, r24
    3a1a:	f9 07       	cpc	r31, r25
    3a1c:	e1 f7       	brne	.-8      	; 0x3a16 <f_sync+0xd6>
    3a1e:	85 e5       	ldi	r24, 0x55	; 85
    3a20:	fe 01       	movw	r30, r28
    3a22:	e4 5d       	subi	r30, 0xD4	; 212
    3a24:	fd 4f       	sbci	r31, 0xFD	; 253
    3a26:	80 83       	st	Z, r24
    3a28:	8a ea       	ldi	r24, 0xAA	; 170
    3a2a:	31 96       	adiw	r30, 0x01	; 1
    3a2c:	80 83       	st	Z, r24
    3a2e:	82 e5       	ldi	r24, 0x52	; 82
    3a30:	8e a7       	std	Y+46, r24	; 0x2e
    3a32:	8f a7       	std	Y+47, r24	; 0x2f
    3a34:	81 e6       	ldi	r24, 0x61	; 97
    3a36:	88 ab       	std	Y+48, r24	; 0x30
    3a38:	91 e4       	ldi	r25, 0x41	; 65
    3a3a:	99 ab       	std	Y+49, r25	; 0x31
    3a3c:	22 e7       	ldi	r18, 0x72	; 114
    3a3e:	7b 97       	sbiw	r30, 0x1b	; 27
    3a40:	20 83       	st	Z, r18
    3a42:	31 96       	adiw	r30, 0x01	; 1
    3a44:	20 83       	st	Z, r18
    3a46:	31 96       	adiw	r30, 0x01	; 1
    3a48:	90 83       	st	Z, r25
    3a4a:	31 96       	adiw	r30, 0x01	; 1
    3a4c:	80 83       	st	Z, r24
    3a4e:	3e 85       	ldd	r19, Y+14	; 0x0e
    3a50:	2f 85       	ldd	r18, Y+15	; 0x0f
    3a52:	98 89       	ldd	r25, Y+16	; 0x10
    3a54:	89 89       	ldd	r24, Y+17	; 0x11
    3a56:	31 96       	adiw	r30, 0x01	; 1
    3a58:	30 83       	st	Z, r19
    3a5a:	31 96       	adiw	r30, 0x01	; 1
    3a5c:	20 83       	st	Z, r18
    3a5e:	31 96       	adiw	r30, 0x01	; 1
    3a60:	90 83       	st	Z, r25
    3a62:	31 96       	adiw	r30, 0x01	; 1
    3a64:	80 83       	st	Z, r24
    3a66:	3a 85       	ldd	r19, Y+10	; 0x0a
    3a68:	2b 85       	ldd	r18, Y+11	; 0x0b
    3a6a:	9c 85       	ldd	r25, Y+12	; 0x0c
    3a6c:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a6e:	31 96       	adiw	r30, 0x01	; 1
    3a70:	30 83       	st	Z, r19
    3a72:	31 96       	adiw	r30, 0x01	; 1
    3a74:	20 83       	st	Z, r18
    3a76:	31 96       	adiw	r30, 0x01	; 1
    3a78:	90 83       	st	Z, r25
    3a7a:	31 96       	adiw	r30, 0x01	; 1
    3a7c:	80 83       	st	Z, r24
    3a7e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3a80:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3a82:	ac 8d       	ldd	r26, Y+28	; 0x1c
    3a84:	bd 8d       	ldd	r27, Y+29	; 0x1d
    3a86:	9c 01       	movw	r18, r24
    3a88:	ad 01       	movw	r20, r26
    3a8a:	2f 5f       	subi	r18, 0xFF	; 255
    3a8c:	3f 4f       	sbci	r19, 0xFF	; 255
    3a8e:	4f 4f       	sbci	r20, 0xFF	; 255
    3a90:	5f 4f       	sbci	r21, 0xFF	; 255
    3a92:	2a a7       	std	Y+42, r18	; 0x2a
    3a94:	3b a7       	std	Y+43, r19	; 0x2b
    3a96:	4c a7       	std	Y+44, r20	; 0x2c
    3a98:	5d a7       	std	Y+45, r21	; 0x2d
    3a9a:	01 e0       	ldi	r16, 0x01	; 1
    3a9c:	10 e0       	ldi	r17, 0x00	; 0
    3a9e:	89 81       	ldd	r24, Y+1	; 0x01
    3aa0:	0e 94 90 05 	call	0xb20	; 0xb20 <disk_write>
    3aa4:	1d 82       	std	Y+5, r1	; 0x05
    3aa6:	40 e0       	ldi	r20, 0x00	; 0
    3aa8:	50 e0       	ldi	r21, 0x00	; 0
    3aaa:	60 e0       	ldi	r22, 0x00	; 0
    3aac:	89 81       	ldd	r24, Y+1	; 0x01
    3aae:	0e 94 fe 05 	call	0xbfc	; 0xbfc <disk_ioctl>
    3ab2:	91 e0       	ldi	r25, 0x01	; 1
    3ab4:	81 11       	cpse	r24, r1
    3ab6:	0b c0       	rjmp	.+22     	; 0x3ace <f_sync+0x18e>
    3ab8:	90 e0       	ldi	r25, 0x00	; 0
    3aba:	09 c0       	rjmp	.+18     	; 0x3ace <f_sync+0x18e>
    3abc:	98 2f       	mov	r25, r24
    3abe:	07 c0       	rjmp	.+14     	; 0x3ace <f_sync+0x18e>
    3ac0:	90 e0       	ldi	r25, 0x00	; 0
    3ac2:	05 c0       	rjmp	.+10     	; 0x3ace <f_sync+0x18e>
    3ac4:	91 e0       	ldi	r25, 0x01	; 1
    3ac6:	03 c0       	rjmp	.+6      	; 0x3ace <f_sync+0x18e>
    3ac8:	98 2f       	mov	r25, r24
    3aca:	01 c0       	rjmp	.+2      	; 0x3ace <f_sync+0x18e>
    3acc:	98 2f       	mov	r25, r24
    3ace:	89 2f       	mov	r24, r25
    3ad0:	df 91       	pop	r29
    3ad2:	cf 91       	pop	r28
    3ad4:	1f 91       	pop	r17
    3ad6:	0f 91       	pop	r16
    3ad8:	08 95       	ret

00003ada <f_close>:
    3ada:	cf 93       	push	r28
    3adc:	df 93       	push	r29
    3ade:	ec 01       	movw	r28, r24
    3ae0:	2f df       	rcall	.-418    	; 0x3940 <f_sync>
    3ae2:	81 11       	cpse	r24, r1
    3ae4:	07 c0       	rjmp	.+14     	; 0x3af4 <f_close+0x1a>
    3ae6:	ce 01       	movw	r24, r28
    3ae8:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <validate>
    3aec:	81 11       	cpse	r24, r1
    3aee:	02 c0       	rjmp	.+4      	; 0x3af4 <f_close+0x1a>
    3af0:	19 82       	std	Y+1, r1	; 0x01
    3af2:	18 82       	st	Y, r1
    3af4:	df 91       	pop	r29
    3af6:	cf 91       	pop	r28
    3af8:	08 95       	ret

00003afa <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
    3afa:	2f 92       	push	r2
    3afc:	3f 92       	push	r3
    3afe:	4f 92       	push	r4
    3b00:	5f 92       	push	r5
    3b02:	6f 92       	push	r6
    3b04:	7f 92       	push	r7
    3b06:	8f 92       	push	r8
    3b08:	9f 92       	push	r9
    3b0a:	af 92       	push	r10
    3b0c:	bf 92       	push	r11
    3b0e:	cf 92       	push	r12
    3b10:	df 92       	push	r13
    3b12:	ef 92       	push	r14
    3b14:	ff 92       	push	r15
    3b16:	0f 93       	push	r16
    3b18:	1f 93       	push	r17
    3b1a:	cf 93       	push	r28
    3b1c:	df 93       	push	r29
    3b1e:	cd b7       	in	r28, 0x3d	; 61
    3b20:	de b7       	in	r29, 0x3e	; 62
    3b22:	cc 55       	subi	r28, 0x5C	; 92
    3b24:	d1 09       	sbc	r29, r1
    3b26:	0f b6       	in	r0, 0x3f	; 63
    3b28:	f8 94       	cli
    3b2a:	de bf       	out	0x3e, r29	; 62
    3b2c:	0f be       	out	0x3f, r0	; 63
    3b2e:	cd bf       	out	0x3d, r28	; 61
    3b30:	e5 96       	adiw	r28, 0x35	; 53
    3b32:	ee ac       	ldd	r14, Y+62	; 0x3e
    3b34:	ff ac       	ldd	r15, Y+63	; 0x3f
    3b36:	e5 97       	sbiw	r28, 0x35	; 53
	DWORD v;
	TCHAR c, d, s[16], *p;
	putbuff pb;


	pb.fp = fp;				/* Initialize output buffer */
    3b38:	e3 96       	adiw	r28, 0x33	; 51
    3b3a:	8e ad       	ldd	r24, Y+62	; 0x3e
    3b3c:	9f ad       	ldd	r25, Y+63	; 0x3f
    3b3e:	e3 97       	sbiw	r28, 0x33	; 51
    3b40:	9c 8b       	std	Y+20, r25	; 0x14
    3b42:	8b 8b       	std	Y+19, r24	; 0x13
	pb.nchr = pb.idx = 0;
    3b44:	1e 8a       	std	Y+22, r1	; 0x16
    3b46:	1d 8a       	std	Y+21, r1	; 0x15
    3b48:	18 8e       	std	Y+24, r1	; 0x18
    3b4a:	1f 8a       	std	Y+23, r1	; 0x17

	va_start(arp, fmt);
    3b4c:	2e 01       	movw	r4, r28
    3b4e:	25 e7       	ldi	r18, 0x75	; 117
    3b50:	42 0e       	add	r4, r18
    3b52:	51 1c       	adc	r5, r1
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
		if (d == 'D' && (v & 0x80000000)) {
			v = 0 - v;
			f |= 8;
		}
		i = 0;
    3b54:	21 2c       	mov	r2, r1
		do {
			d = (TCHAR)(v % r); v /= r;
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
    3b56:	0f 2e       	mov	r0, r31
    3b58:	f7 e0       	ldi	r31, 0x07	; 7
    3b5a:	3f 2e       	mov	r3, r31
    3b5c:	f0 2d       	mov	r31, r0
	pb.nchr = pb.idx = 0;

	va_start(arp, fmt);

	for (;;) {
		c = *fmt++;
    3b5e:	d7 01       	movw	r26, r14
    3b60:	6c 91       	ld	r22, X
		if (c == 0) break;			/* End of string */
    3b62:	66 23       	and	r22, r22
    3b64:	09 f4       	brne	.+2      	; 0x3b68 <f_printf+0x6e>
    3b66:	8e c1       	rjmp	.+796    	; 0x3e84 <f_printf+0x38a>
		if (c != '%') {				/* Non escape character */
    3b68:	65 32       	cpi	r22, 0x25	; 37
    3b6a:	39 f0       	breq	.+14     	; 0x3b7a <f_printf+0x80>
	pb.nchr = pb.idx = 0;

	va_start(arp, fmt);

	for (;;) {
		c = *fmt++;
    3b6c:	bf ef       	ldi	r27, 0xFF	; 255
    3b6e:	eb 1a       	sub	r14, r27
    3b70:	fb 0a       	sbc	r15, r27
		if (c == 0) break;			/* End of string */
		if (c != '%') {				/* Non escape character */
			putc_bfd(&pb, c);
    3b72:	ce 01       	movw	r24, r28
    3b74:	43 96       	adiw	r24, 0x13	; 19
    3b76:	a0 de       	rcall	.-704    	; 0x38b8 <putc_bfd>
			continue;
    3b78:	f2 cf       	rjmp	.-28     	; 0x3b5e <f_printf+0x64>
		}
		w = f = 0;
		c = *fmt++;
    3b7a:	f7 01       	movw	r30, r14
    3b7c:	d1 80       	ldd	r13, Z+1	; 0x01
		if (c == '0') {				/* Flag: '0' padding */
    3b7e:	f0 e3       	ldi	r31, 0x30	; 48
    3b80:	df 12       	cpse	r13, r31
    3b82:	09 c0       	rjmp	.+18     	; 0x3b96 <f_printf+0x9c>
			f = 1; c = *fmt++;
    3b84:	d7 01       	movw	r26, r14
    3b86:	12 96       	adiw	r26, 0x02	; 2
    3b88:	dc 90       	ld	r13, X
    3b8a:	f7 01       	movw	r30, r14
    3b8c:	33 96       	adiw	r30, 0x03	; 3
    3b8e:	7f 01       	movw	r14, r30
    3b90:	77 24       	eor	r7, r7
    3b92:	73 94       	inc	r7
    3b94:	11 c0       	rjmp	.+34     	; 0x3bb8 <f_printf+0xbe>
		} else {
			if (c == '-') {			/* Flag: left justified */
    3b96:	fd e2       	ldi	r31, 0x2D	; 45
    3b98:	df 16       	cp	r13, r31
    3b9a:	29 f0       	breq	.+10     	; 0x3ba6 <f_printf+0xac>
		if (c != '%') {				/* Non escape character */
			putc_bfd(&pb, c);
			continue;
		}
		w = f = 0;
		c = *fmt++;
    3b9c:	22 e0       	ldi	r18, 0x02	; 2
    3b9e:	e2 0e       	add	r14, r18
    3ba0:	f1 1c       	adc	r15, r1
		if (c == 0) break;			/* End of string */
		if (c != '%') {				/* Non escape character */
			putc_bfd(&pb, c);
			continue;
		}
		w = f = 0;
    3ba2:	71 2c       	mov	r7, r1
    3ba4:	09 c0       	rjmp	.+18     	; 0x3bb8 <f_printf+0xbe>
		c = *fmt++;
		if (c == '0') {				/* Flag: '0' padding */
			f = 1; c = *fmt++;
		} else {
			if (c == '-') {			/* Flag: left justified */
				f = 2; c = *fmt++;
    3ba6:	d7 01       	movw	r26, r14
    3ba8:	12 96       	adiw	r26, 0x02	; 2
    3baa:	dc 90       	ld	r13, X
    3bac:	f7 01       	movw	r30, r14
    3bae:	33 96       	adiw	r30, 0x03	; 3
    3bb0:	7f 01       	movw	r14, r30
    3bb2:	68 94       	set
    3bb4:	77 24       	eor	r7, r7
    3bb6:	71 f8       	bld	r7, 1
			}
		}
		while (IsDigit(c)) {		/* Precision */
    3bb8:	80 ed       	ldi	r24, 0xD0	; 208
    3bba:	8d 0d       	add	r24, r13
    3bbc:	8a 30       	cpi	r24, 0x0A	; 10
    3bbe:	f0 f4       	brcc	.+60     	; 0x3bfc <f_printf+0x102>
    3bc0:	02 2d       	mov	r16, r2
    3bc2:	10 e0       	ldi	r17, 0x00	; 0
    3bc4:	8d 2d       	mov	r24, r13
			w = w * 10 + c - '0';
    3bc6:	98 01       	movw	r18, r16
    3bc8:	22 0f       	add	r18, r18
    3bca:	33 1f       	adc	r19, r19
    3bcc:	00 0f       	add	r16, r16
    3bce:	11 1f       	adc	r17, r17
    3bd0:	00 0f       	add	r16, r16
    3bd2:	11 1f       	adc	r17, r17
    3bd4:	00 0f       	add	r16, r16
    3bd6:	11 1f       	adc	r17, r17
    3bd8:	02 0f       	add	r16, r18
    3bda:	13 1f       	adc	r17, r19
    3bdc:	08 0f       	add	r16, r24
    3bde:	11 1d       	adc	r17, r1
    3be0:	00 53       	subi	r16, 0x30	; 48
    3be2:	11 09       	sbc	r17, r1
			c = *fmt++;
    3be4:	ff ef       	ldi	r31, 0xFF	; 255
    3be6:	ef 1a       	sub	r14, r31
    3be8:	ff 0a       	sbc	r15, r31
    3bea:	f7 01       	movw	r30, r14
    3bec:	31 97       	sbiw	r30, 0x01	; 1
    3bee:	80 81       	ld	r24, Z
		} else {
			if (c == '-') {			/* Flag: left justified */
				f = 2; c = *fmt++;
			}
		}
		while (IsDigit(c)) {		/* Precision */
    3bf0:	90 ed       	ldi	r25, 0xD0	; 208
    3bf2:	98 0f       	add	r25, r24
    3bf4:	9a 30       	cpi	r25, 0x0A	; 10
    3bf6:	38 f3       	brcs	.-50     	; 0x3bc6 <f_printf+0xcc>
    3bf8:	d8 2e       	mov	r13, r24
    3bfa:	02 c0       	rjmp	.+4      	; 0x3c00 <f_printf+0x106>
    3bfc:	02 2d       	mov	r16, r2
    3bfe:	10 e0       	ldi	r17, 0x00	; 0
			w = w * 10 + c - '0';
			c = *fmt++;
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
    3c00:	8d 2d       	mov	r24, r13
    3c02:	8f 7d       	andi	r24, 0xDF	; 223
    3c04:	8c 34       	cpi	r24, 0x4C	; 76
    3c06:	41 f4       	brne	.+16     	; 0x3c18 <f_printf+0x11e>
			f |= 4; c = *fmt++;
    3c08:	27 2d       	mov	r18, r7
    3c0a:	24 60       	ori	r18, 0x04	; 4
    3c0c:	72 2e       	mov	r7, r18
    3c0e:	d7 01       	movw	r26, r14
    3c10:	dc 90       	ld	r13, X
    3c12:	f7 01       	movw	r30, r14
    3c14:	31 96       	adiw	r30, 0x01	; 1
    3c16:	7f 01       	movw	r14, r30
		}
		if (!c) break;
    3c18:	dd 20       	and	r13, r13
    3c1a:	09 f4       	brne	.+2      	; 0x3c1e <f_printf+0x124>
    3c1c:	33 c1       	rjmp	.+614    	; 0x3e84 <f_printf+0x38a>
		d = c;
		if (IsLower(d)) d -= 0x20;
    3c1e:	8f e9       	ldi	r24, 0x9F	; 159
    3c20:	8d 0d       	add	r24, r13
    3c22:	8a 31       	cpi	r24, 0x1A	; 26
    3c24:	18 f4       	brcc	.+6      	; 0x3c2c <f_printf+0x132>
    3c26:	30 ee       	ldi	r19, 0xE0	; 224
    3c28:	3d 0d       	add	r19, r13
    3c2a:	01 c0       	rjmp	.+2      	; 0x3c2e <f_printf+0x134>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
			f |= 4; c = *fmt++;
		}
		if (!c) break;
		d = c;
    3c2c:	3d 2d       	mov	r19, r13
		if (IsLower(d)) d -= 0x20;
		switch (d) {				/* Type is... */
    3c2e:	83 2f       	mov	r24, r19
    3c30:	90 e0       	ldi	r25, 0x00	; 0
    3c32:	fc 01       	movw	r30, r24
    3c34:	e2 54       	subi	r30, 0x42	; 66
    3c36:	f1 09       	sbc	r31, r1
    3c38:	e7 31       	cpi	r30, 0x17	; 23
    3c3a:	f1 05       	cpc	r31, r1
    3c3c:	08 f0       	brcs	.+2      	; 0x3c40 <f_printf+0x146>
    3c3e:	58 c0       	rjmp	.+176    	; 0x3cf0 <f_printf+0x1f6>
    3c40:	e3 58       	subi	r30, 0x83	; 131
    3c42:	ff 4f       	sbci	r31, 0xFF	; 255
    3c44:	0c 94 12 42 	jmp	0x8424	; 0x8424 <__tablejump2__>
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
    3c48:	f2 01       	movw	r30, r4
    3c4a:	a0 80       	ld	r10, Z
    3c4c:	b1 80       	ldd	r11, Z+1	; 0x01
    3c4e:	f2 e0       	ldi	r31, 0x02	; 2
    3c50:	4f 0e       	add	r4, r31
    3c52:	51 1c       	adc	r5, r1
			for (j = 0; p[j]; j++) ;
    3c54:	d5 01       	movw	r26, r10
    3c56:	6c 91       	ld	r22, X
    3c58:	66 23       	and	r22, r22
    3c5a:	09 f4       	brne	.+2      	; 0x3c5e <f_printf+0x164>
    3c5c:	38 c1       	rjmp	.+624    	; 0x3ece <f_printf+0x3d4>
    3c5e:	f5 01       	movw	r30, r10
    3c60:	31 96       	adiw	r30, 0x01	; 1
    3c62:	c2 2c       	mov	r12, r2
    3c64:	d1 2c       	mov	r13, r1
    3c66:	bf ef       	ldi	r27, 0xFF	; 255
    3c68:	cb 1a       	sub	r12, r27
    3c6a:	db 0a       	sbc	r13, r27
    3c6c:	81 91       	ld	r24, Z+
    3c6e:	81 11       	cpse	r24, r1
    3c70:	fa cf       	rjmp	.-12     	; 0x3c66 <f_printf+0x16c>
    3c72:	2a c1       	rjmp	.+596    	; 0x3ec8 <f_printf+0x3ce>
    3c74:	c2 2c       	mov	r12, r2
    3c76:	d1 2c       	mov	r13, r1
			if (!(f & 2)) {
				while (j++ < w) putc_bfd(&pb, ' ');
    3c78:	66 24       	eor	r6, r6
    3c7a:	63 94       	inc	r6
    3c7c:	71 2c       	mov	r7, r1
    3c7e:	46 01       	movw	r8, r12
    3c80:	60 e2       	ldi	r22, 0x20	; 32
    3c82:	ce 01       	movw	r24, r28
    3c84:	43 96       	adiw	r24, 0x13	; 19
    3c86:	18 de       	rcall	.-976    	; 0x38b8 <putc_bfd>
    3c88:	ef ef       	ldi	r30, 0xFF	; 255
    3c8a:	8e 1a       	sub	r8, r30
    3c8c:	9e 0a       	sbc	r9, r30
    3c8e:	80 16       	cp	r8, r16
    3c90:	91 06       	cpc	r9, r17
    3c92:	b0 f3       	brcs	.-20     	; 0x3c80 <f_printf+0x186>
    3c94:	93 01       	movw	r18, r6
    3c96:	2c 19       	sub	r18, r12
    3c98:	3d 09       	sbc	r19, r13
    3c9a:	69 01       	movw	r12, r18
    3c9c:	c0 0e       	add	r12, r16
    3c9e:	d1 1e       	adc	r13, r17
			}
			while (*p) putc_bfd(&pb, *p++);
    3ca0:	d5 01       	movw	r26, r10
    3ca2:	6c 91       	ld	r22, X
    3ca4:	66 23       	and	r22, r22
    3ca6:	59 f0       	breq	.+22     	; 0x3cbe <f_printf+0x1c4>
    3ca8:	bf ef       	ldi	r27, 0xFF	; 255
    3caa:	ab 1a       	sub	r10, r27
    3cac:	bb 0a       	sbc	r11, r27
    3cae:	ce 01       	movw	r24, r28
    3cb0:	43 96       	adiw	r24, 0x13	; 19
    3cb2:	02 de       	rcall	.-1020   	; 0x38b8 <putc_bfd>
    3cb4:	f5 01       	movw	r30, r10
    3cb6:	61 91       	ld	r22, Z+
    3cb8:	5f 01       	movw	r10, r30
    3cba:	61 11       	cpse	r22, r1
    3cbc:	f8 cf       	rjmp	.-16     	; 0x3cae <f_printf+0x1b4>
			while (j++ < w) putc_bfd(&pb, ' ');
    3cbe:	c0 16       	cp	r12, r16
    3cc0:	d1 06       	cpc	r13, r17
    3cc2:	08 f0       	brcs	.+2      	; 0x3cc6 <f_printf+0x1cc>
    3cc4:	4c cf       	rjmp	.-360    	; 0x3b5e <f_printf+0x64>
    3cc6:	60 e2       	ldi	r22, 0x20	; 32
    3cc8:	ce 01       	movw	r24, r28
    3cca:	43 96       	adiw	r24, 0x13	; 19
    3ccc:	f5 dd       	rcall	.-1046   	; 0x38b8 <putc_bfd>
    3cce:	ff ef       	ldi	r31, 0xFF	; 255
    3cd0:	cf 1a       	sub	r12, r31
    3cd2:	df 0a       	sbc	r13, r31
    3cd4:	c0 16       	cp	r12, r16
    3cd6:	d1 06       	cpc	r13, r17
    3cd8:	b0 f3       	brcs	.-20     	; 0x3cc6 <f_printf+0x1cc>
    3cda:	41 cf       	rjmp	.-382    	; 0x3b5e <f_printf+0x64>
			continue;
		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
    3cdc:	82 01       	movw	r16, r4
    3cde:	0e 5f       	subi	r16, 0xFE	; 254
    3ce0:	1f 4f       	sbci	r17, 0xFF	; 255
    3ce2:	d2 01       	movw	r26, r4
    3ce4:	6c 91       	ld	r22, X
    3ce6:	ce 01       	movw	r24, r28
    3ce8:	43 96       	adiw	r24, 0x13	; 19
    3cea:	e6 dd       	rcall	.-1076   	; 0x38b8 <putc_bfd>
    3cec:	28 01       	movw	r4, r16
    3cee:	37 cf       	rjmp	.-402    	; 0x3b5e <f_printf+0x64>
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
		case 'X' :					/* Hexdecimal */
			r = 16; break;
		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
    3cf0:	6d 2d       	mov	r22, r13
    3cf2:	ce 01       	movw	r24, r28
    3cf4:	43 96       	adiw	r24, 0x13	; 19
    3cf6:	e0 dd       	rcall	.-1088   	; 0x38b8 <putc_bfd>
    3cf8:	32 cf       	rjmp	.-412    	; 0x3b5e <f_printf+0x64>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
    3cfa:	72 fe       	sbrs	r7, 2
    3cfc:	0e c0       	rjmp	.+28     	; 0x3d1a <f_printf+0x220>
			r = 2; break;
		case 'O' :					/* Octal */
			r = 8; break;
		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
    3cfe:	aa e0       	ldi	r26, 0x0A	; 10
    3d00:	01 c0       	rjmp	.+2      	; 0x3d04 <f_printf+0x20a>
		case 'X' :					/* Hexdecimal */
			r = 16; break;
    3d02:	a0 e1       	ldi	r26, 0x10	; 16
		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
    3d04:	f2 01       	movw	r30, r4
    3d06:	60 81       	ld	r22, Z
    3d08:	71 81       	ldd	r23, Z+1	; 0x01
    3d0a:	82 81       	ldd	r24, Z+2	; 0x02
    3d0c:	93 81       	ldd	r25, Z+3	; 0x03
    3d0e:	b4 e0       	ldi	r27, 0x04	; 4
    3d10:	4b 0e       	add	r4, r27
    3d12:	51 1c       	adc	r5, r1
		if (d == 'D' && (v & 0x80000000)) {
    3d14:	34 34       	cpi	r19, 0x44	; 68
    3d16:	31 f5       	brne	.+76     	; 0x3d64 <f_printf+0x26a>
    3d18:	19 c0       	rjmp	.+50     	; 0x3d4c <f_printf+0x252>
			r = 2; break;
		case 'O' :					/* Octal */
			r = 8; break;
		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
    3d1a:	aa e0       	ldi	r26, 0x0A	; 10
		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
    3d1c:	34 34       	cpi	r19, 0x44	; 68
    3d1e:	61 f4       	brne	.+24     	; 0x3d38 <f_printf+0x23e>
    3d20:	f2 01       	movw	r30, r4
    3d22:	60 81       	ld	r22, Z
    3d24:	71 81       	ldd	r23, Z+1	; 0x01
    3d26:	07 2e       	mov	r0, r23
    3d28:	00 0c       	add	r0, r0
    3d2a:	88 0b       	sbc	r24, r24
    3d2c:	99 0b       	sbc	r25, r25
    3d2e:	92 01       	movw	r18, r4
    3d30:	2e 5f       	subi	r18, 0xFE	; 254
    3d32:	3f 4f       	sbci	r19, 0xFF	; 255
    3d34:	29 01       	movw	r4, r18
    3d36:	0a c0       	rjmp	.+20     	; 0x3d4c <f_printf+0x252>
    3d38:	f2 01       	movw	r30, r4
    3d3a:	60 81       	ld	r22, Z
    3d3c:	71 81       	ldd	r23, Z+1	; 0x01
    3d3e:	80 e0       	ldi	r24, 0x00	; 0
    3d40:	90 e0       	ldi	r25, 0x00	; 0
    3d42:	92 01       	movw	r18, r4
    3d44:	2e 5f       	subi	r18, 0xFE	; 254
    3d46:	3f 4f       	sbci	r19, 0xFF	; 255
    3d48:	29 01       	movw	r4, r18
    3d4a:	0c c0       	rjmp	.+24     	; 0x3d64 <f_printf+0x26a>
		if (d == 'D' && (v & 0x80000000)) {
    3d4c:	99 23       	and	r25, r25
    3d4e:	54 f4       	brge	.+20     	; 0x3d64 <f_printf+0x26a>
			v = 0 - v;
    3d50:	90 95       	com	r25
    3d52:	80 95       	com	r24
    3d54:	70 95       	com	r23
    3d56:	61 95       	neg	r22
    3d58:	7f 4f       	sbci	r23, 0xFF	; 255
    3d5a:	8f 4f       	sbci	r24, 0xFF	; 255
    3d5c:	9f 4f       	sbci	r25, 0xFF	; 255
			f |= 8;
    3d5e:	37 2d       	mov	r19, r7
    3d60:	38 60       	ori	r19, 0x08	; 8
    3d62:	73 2e       	mov	r7, r19
    3d64:	ae 01       	movw	r20, r28
    3d66:	4d 5f       	subi	r20, 0xFD	; 253
    3d68:	5f 4f       	sbci	r21, 0xFF	; 255
    3d6a:	5a 01       	movw	r10, r20
		}
		i = 0;
    3d6c:	82 2c       	mov	r8, r2
    3d6e:	91 2c       	mov	r9, r1
		do {
			d = (TCHAR)(v % r); v /= r;
    3d70:	2a 2f       	mov	r18, r26
    3d72:	30 e0       	ldi	r19, 0x00	; 0
    3d74:	40 e0       	ldi	r20, 0x00	; 0
    3d76:	50 e0       	ldi	r21, 0x00	; 0
    3d78:	6d 96       	adiw	r28, 0x1d	; 29
    3d7a:	2c af       	std	Y+60, r18	; 0x3c
    3d7c:	3d af       	std	Y+61, r19	; 0x3d
    3d7e:	4e af       	std	Y+62, r20	; 0x3e
    3d80:	5f af       	std	Y+63, r21	; 0x3f
    3d82:	6d 97       	sbiw	r28, 0x1d	; 29
    3d84:	97 01       	movw	r18, r14
    3d86:	78 01       	movw	r14, r16
    3d88:	1d 2d       	mov	r17, r13
    3d8a:	69 01       	movw	r12, r18
    3d8c:	6d 96       	adiw	r28, 0x1d	; 29
    3d8e:	2c ad       	ldd	r18, Y+60	; 0x3c
    3d90:	3d ad       	ldd	r19, Y+61	; 0x3d
    3d92:	4e ad       	ldd	r20, Y+62	; 0x3e
    3d94:	5f ad       	ldd	r21, Y+63	; 0x3f
    3d96:	6d 97       	sbiw	r28, 0x1d	; 29
    3d98:	0e 94 f0 41 	call	0x83e0	; 0x83e0 <__udivmodsi4>
    3d9c:	f6 2f       	mov	r31, r22
    3d9e:	e6 2f       	mov	r30, r22
    3da0:	62 2f       	mov	r22, r18
    3da2:	73 2f       	mov	r23, r19
    3da4:	84 2f       	mov	r24, r20
    3da6:	95 2f       	mov	r25, r21
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
    3da8:	fa 30       	cpi	r31, 0x0A	; 10
    3daa:	30 f0       	brcs	.+12     	; 0x3db8 <f_printf+0x2be>
    3dac:	18 37       	cpi	r17, 0x78	; 120
    3dae:	11 f0       	breq	.+4      	; 0x3db4 <f_printf+0x2ba>
    3db0:	e3 2d       	mov	r30, r3
    3db2:	01 c0       	rjmp	.+2      	; 0x3db6 <f_printf+0x2bc>
    3db4:	e7 e2       	ldi	r30, 0x27	; 39
    3db6:	ef 0f       	add	r30, r31
			s[i++] = d + '0';
    3db8:	3f ef       	ldi	r19, 0xFF	; 255
    3dba:	83 1a       	sub	r8, r19
    3dbc:	93 0a       	sbc	r9, r19
    3dbe:	e0 5d       	subi	r30, 0xD0	; 208
    3dc0:	d5 01       	movw	r26, r10
    3dc2:	ed 93       	st	X+, r30
    3dc4:	5d 01       	movw	r10, r26
		} while (v && i < sizeof s / sizeof s[0]);
    3dc6:	61 15       	cp	r22, r1
    3dc8:	71 05       	cpc	r23, r1
    3dca:	81 05       	cpc	r24, r1
    3dcc:	91 05       	cpc	r25, r1
    3dce:	21 f0       	breq	.+8      	; 0x3dd8 <f_printf+0x2de>
    3dd0:	b0 e1       	ldi	r27, 0x10	; 16
    3dd2:	8b 16       	cp	r8, r27
    3dd4:	91 04       	cpc	r9, r1
    3dd6:	d1 f6       	brne	.-76     	; 0x3d8c <f_printf+0x292>
    3dd8:	87 01       	movw	r16, r14
    3dda:	76 01       	movw	r14, r12
		if (f & 8) s[i++] = '-';
    3ddc:	73 fe       	sbrs	r7, 3
    3dde:	0c c0       	rjmp	.+24     	; 0x3df8 <f_printf+0x2fe>
    3de0:	e3 e0       	ldi	r30, 0x03	; 3
    3de2:	f0 e0       	ldi	r31, 0x00	; 0
    3de4:	ec 0f       	add	r30, r28
    3de6:	fd 1f       	adc	r31, r29
    3de8:	e8 0d       	add	r30, r8
    3dea:	f9 1d       	adc	r31, r9
    3dec:	2d e2       	ldi	r18, 0x2D	; 45
    3dee:	20 83       	st	Z, r18
    3df0:	a4 01       	movw	r20, r8
    3df2:	4f 5f       	subi	r20, 0xFF	; 255
    3df4:	5f 4f       	sbci	r21, 0xFF	; 255
    3df6:	4a 01       	movw	r8, r20
		j = i; d = (f & 1) ? '0' : ' ';
    3df8:	70 fc       	sbrc	r7, 0
    3dfa:	04 c0       	rjmp	.+8      	; 0x3e04 <f_printf+0x30a>
    3dfc:	68 94       	set
    3dfe:	66 24       	eor	r6, r6
    3e00:	65 f8       	bld	r6, 5
    3e02:	04 c0       	rjmp	.+8      	; 0x3e0c <f_printf+0x312>
    3e04:	0f 2e       	mov	r0, r31
    3e06:	f0 e3       	ldi	r31, 0x30	; 48
    3e08:	6f 2e       	mov	r6, r31
    3e0a:	f0 2d       	mov	r31, r0
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
    3e0c:	71 fc       	sbrc	r7, 1
    3e0e:	15 c0       	rjmp	.+42     	; 0x3e3a <f_printf+0x340>
    3e10:	64 01       	movw	r12, r8
    3e12:	5f ef       	ldi	r21, 0xFF	; 255
    3e14:	c5 1a       	sub	r12, r21
    3e16:	d5 0a       	sbc	r13, r21
    3e18:	80 16       	cp	r8, r16
    3e1a:	91 06       	cpc	r9, r17
    3e1c:	08 f4       	brcc	.+2      	; 0x3e20 <f_printf+0x326>
    3e1e:	65 c0       	rjmp	.+202    	; 0x3eea <f_printf+0x3f0>
    3e20:	0d c0       	rjmp	.+26     	; 0x3e3c <f_printf+0x342>
    3e22:	8f ef       	ldi	r24, 0xFF	; 255
    3e24:	c8 1a       	sub	r12, r24
    3e26:	d8 0a       	sbc	r13, r24
    3e28:	c0 16       	cp	r12, r16
    3e2a:	d1 06       	cpc	r13, r17
    3e2c:	08 f4       	brcc	.+2      	; 0x3e30 <f_printf+0x336>
    3e2e:	58 c0       	rjmp	.+176    	; 0x3ee0 <f_printf+0x3e6>
    3e30:	68 01       	movw	r12, r16
    3e32:	9f ef       	ldi	r25, 0xFF	; 255
    3e34:	c9 1a       	sub	r12, r25
    3e36:	d9 0a       	sbc	r13, r25
    3e38:	01 c0       	rjmp	.+2      	; 0x3e3c <f_printf+0x342>
			d = (TCHAR)(v % r); v /= r;
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
			s[i++] = d + '0';
		} while (v && i < sizeof s / sizeof s[0]);
		if (f & 8) s[i++] = '-';
		j = i; d = (f & 1) ? '0' : ' ';
    3e3a:	64 01       	movw	r12, r8
    3e3c:	0f 2e       	mov	r0, r31
    3e3e:	f3 e0       	ldi	r31, 0x03	; 3
    3e40:	af 2e       	mov	r10, r31
    3e42:	b1 2c       	mov	r11, r1
    3e44:	f0 2d       	mov	r31, r0
    3e46:	ac 0e       	add	r10, r28
    3e48:	bd 1e       	adc	r11, r29
    3e4a:	a8 0c       	add	r10, r8
    3e4c:	b9 1c       	adc	r11, r9
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
		do putc_bfd(&pb, s[--i]); while (i);
    3e4e:	a1 e0       	ldi	r26, 0x01	; 1
    3e50:	8a 1a       	sub	r8, r26
    3e52:	91 08       	sbc	r9, r1
    3e54:	f5 01       	movw	r30, r10
    3e56:	62 91       	ld	r22, -Z
    3e58:	5f 01       	movw	r10, r30
    3e5a:	ce 01       	movw	r24, r28
    3e5c:	43 96       	adiw	r24, 0x13	; 19
    3e5e:	2c dd       	rcall	.-1448   	; 0x38b8 <putc_bfd>
    3e60:	81 14       	cp	r8, r1
    3e62:	91 04       	cpc	r9, r1
    3e64:	a1 f7       	brne	.-24     	; 0x3e4e <f_printf+0x354>
		while (j++ < w) putc_bfd(&pb, d);
    3e66:	c0 16       	cp	r12, r16
    3e68:	d1 06       	cpc	r13, r17
    3e6a:	08 f0       	brcs	.+2      	; 0x3e6e <f_printf+0x374>
    3e6c:	78 ce       	rjmp	.-784    	; 0x3b5e <f_printf+0x64>
    3e6e:	66 2d       	mov	r22, r6
    3e70:	ce 01       	movw	r24, r28
    3e72:	43 96       	adiw	r24, 0x13	; 19
    3e74:	21 dd       	rcall	.-1470   	; 0x38b8 <putc_bfd>
    3e76:	ff ef       	ldi	r31, 0xFF	; 255
    3e78:	cf 1a       	sub	r12, r31
    3e7a:	df 0a       	sbc	r13, r31
    3e7c:	c0 16       	cp	r12, r16
    3e7e:	d1 06       	cpc	r13, r17
    3e80:	b0 f3       	brcs	.-20     	; 0x3e6e <f_printf+0x374>
    3e82:	6d ce       	rjmp	.-806    	; 0x3b5e <f_printf+0x64>
	}

	va_end(arp);

	if (   pb.idx >= 0		/* Flush buffered characters to the file */
    3e84:	4d 89       	ldd	r20, Y+21	; 0x15
    3e86:	5e 89       	ldd	r21, Y+22	; 0x16
    3e88:	55 23       	and	r21, r21
    3e8a:	ac f0       	brlt	.+42     	; 0x3eb6 <f_printf+0x3bc>
		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
    3e8c:	9e 01       	movw	r18, r28
    3e8e:	2f 5f       	subi	r18, 0xFF	; 255
    3e90:	3f 4f       	sbci	r19, 0xFF	; 255
    3e92:	be 01       	movw	r22, r28
    3e94:	67 5e       	subi	r22, 0xE7	; 231
    3e96:	7f 4f       	sbci	r23, 0xFF	; 255
    3e98:	8b 89       	ldd	r24, Y+19	; 0x13
    3e9a:	9c 89       	ldd	r25, Y+20	; 0x14
    3e9c:	13 db       	rcall	.-2522   	; 0x34c4 <f_write>
    3e9e:	81 11       	cpse	r24, r1
    3ea0:	0d c0       	rjmp	.+26     	; 0x3ebc <f_printf+0x3c2>
		&& (UINT)pb.idx == nw) return pb.nchr;
    3ea2:	2d 89       	ldd	r18, Y+21	; 0x15
    3ea4:	3e 89       	ldd	r19, Y+22	; 0x16
    3ea6:	89 81       	ldd	r24, Y+1	; 0x01
    3ea8:	9a 81       	ldd	r25, Y+2	; 0x02
    3eaa:	28 17       	cp	r18, r24
    3eac:	39 07       	cpc	r19, r25
    3eae:	49 f4       	brne	.+18     	; 0x3ec2 <f_printf+0x3c8>
    3eb0:	8f 89       	ldd	r24, Y+23	; 0x17
    3eb2:	98 8d       	ldd	r25, Y+24	; 0x18
    3eb4:	52 c0       	rjmp	.+164    	; 0x3f5a <f_printf+0x460>
	return EOF;
    3eb6:	8f ef       	ldi	r24, 0xFF	; 255
    3eb8:	9f ef       	ldi	r25, 0xFF	; 255
    3eba:	4f c0       	rjmp	.+158    	; 0x3f5a <f_printf+0x460>
    3ebc:	8f ef       	ldi	r24, 0xFF	; 255
    3ebe:	9f ef       	ldi	r25, 0xFF	; 255
    3ec0:	4c c0       	rjmp	.+152    	; 0x3f5a <f_printf+0x460>
    3ec2:	8f ef       	ldi	r24, 0xFF	; 255
    3ec4:	9f ef       	ldi	r25, 0xFF	; 255
    3ec6:	49 c0       	rjmp	.+146    	; 0x3f5a <f_printf+0x460>
		if (IsLower(d)) d -= 0x20;
		switch (d) {				/* Type is... */
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
			for (j = 0; p[j]; j++) ;
			if (!(f & 2)) {
    3ec8:	71 fe       	sbrs	r7, 1
    3eca:	19 c0       	rjmp	.+50     	; 0x3efe <f_printf+0x404>
    3ecc:	ed ce       	rjmp	.-550    	; 0x3ca8 <f_printf+0x1ae>
    3ece:	71 fe       	sbrs	r7, 1
    3ed0:	1f c0       	rjmp	.+62     	; 0x3f10 <f_printf+0x416>
		d = c;
		if (IsLower(d)) d -= 0x20;
		switch (d) {				/* Type is... */
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
			for (j = 0; p[j]; j++) ;
    3ed2:	c2 2c       	mov	r12, r2
    3ed4:	d1 2c       	mov	r13, r1
    3ed6:	f3 ce       	rjmp	.-538    	; 0x3cbe <f_printf+0x1c4>
		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
    3ed8:	72 fc       	sbrc	r7, 2
    3eda:	13 cf       	rjmp	.-474    	; 0x3d02 <f_printf+0x208>
			r = 8; break;
		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
		case 'X' :					/* Hexdecimal */
			r = 16; break;
    3edc:	a0 e1       	ldi	r26, 0x10	; 16
    3ede:	2c cf       	rjmp	.-424    	; 0x3d38 <f_printf+0x23e>
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
			s[i++] = d + '0';
		} while (v && i < sizeof s / sizeof s[0]);
		if (f & 8) s[i++] = '-';
		j = i; d = (f & 1) ? '0' : ' ';
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
    3ee0:	66 2d       	mov	r22, r6
    3ee2:	ce 01       	movw	r24, r28
    3ee4:	43 96       	adiw	r24, 0x13	; 19
    3ee6:	e8 dc       	rcall	.-1584   	; 0x38b8 <putc_bfd>
    3ee8:	9c cf       	rjmp	.-200    	; 0x3e22 <f_printf+0x328>
    3eea:	66 2d       	mov	r22, r6
    3eec:	ce 01       	movw	r24, r28
    3eee:	43 96       	adiw	r24, 0x13	; 19
    3ef0:	e3 dc       	rcall	.-1594   	; 0x38b8 <putc_bfd>
    3ef2:	64 01       	movw	r12, r8
    3ef4:	96 cf       	rjmp	.-212    	; 0x3e22 <f_printf+0x328>
			p = va_arg(arp, TCHAR*);
			for (j = 0; p[j]; j++) ;
			if (!(f & 2)) {
				while (j++ < w) putc_bfd(&pb, ' ');
			}
			while (*p) putc_bfd(&pb, *p++);
    3ef6:	d5 01       	movw	r26, r10
    3ef8:	6c 91       	ld	r22, X
		switch (d) {				/* Type is... */
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
			for (j = 0; p[j]; j++) ;
			if (!(f & 2)) {
				while (j++ < w) putc_bfd(&pb, ' ');
    3efa:	63 01       	movw	r12, r6
    3efc:	d5 ce       	rjmp	.-598    	; 0x3ca8 <f_printf+0x1ae>
    3efe:	36 01       	movw	r6, r12
    3f00:	bf ef       	ldi	r27, 0xFF	; 255
    3f02:	6b 1a       	sub	r6, r27
    3f04:	7b 0a       	sbc	r7, r27
    3f06:	c0 16       	cp	r12, r16
    3f08:	d1 06       	cpc	r13, r17
    3f0a:	08 f4       	brcc	.+2      	; 0x3f0e <f_printf+0x414>
    3f0c:	b8 ce       	rjmp	.-656    	; 0x3c7e <f_printf+0x184>
    3f0e:	f3 cf       	rjmp	.-26     	; 0x3ef6 <f_printf+0x3fc>
    3f10:	01 15       	cp	r16, r1
    3f12:	11 05       	cpc	r17, r1
    3f14:	09 f0       	breq	.+2      	; 0x3f18 <f_printf+0x41e>
    3f16:	ae ce       	rjmp	.-676    	; 0x3c74 <f_printf+0x17a>
    3f18:	cc 24       	eor	r12, r12
    3f1a:	c3 94       	inc	r12
    3f1c:	d1 2c       	mov	r13, r1
    3f1e:	cf ce       	rjmp	.-610    	; 0x3cbe <f_printf+0x1c4>
		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
    3f20:	f2 01       	movw	r30, r4
    3f22:	60 81       	ld	r22, Z
    3f24:	71 81       	ldd	r23, Z+1	; 0x01
    3f26:	82 81       	ldd	r24, Z+2	; 0x02
    3f28:	93 81       	ldd	r25, Z+3	; 0x03
    3f2a:	92 01       	movw	r18, r4
    3f2c:	2c 5f       	subi	r18, 0xFC	; 252
    3f2e:	3f 4f       	sbci	r19, 0xFF	; 255
    3f30:	29 01       	movw	r4, r18
			while (j++ < w) putc_bfd(&pb, ' ');
			continue;
		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
		case 'B' :					/* Binary */
			r = 2; break;
    3f32:	a2 e0       	ldi	r26, 0x02	; 2
    3f34:	17 cf       	rjmp	.-466    	; 0x3d64 <f_printf+0x26a>
		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
    3f36:	72 fc       	sbrc	r7, 2
    3f38:	f3 cf       	rjmp	.-26     	; 0x3f20 <f_printf+0x426>
			while (j++ < w) putc_bfd(&pb, ' ');
			continue;
		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
		case 'B' :					/* Binary */
			r = 2; break;
    3f3a:	a2 e0       	ldi	r26, 0x02	; 2
    3f3c:	ef ce       	rjmp	.-546    	; 0x3d1c <f_printf+0x222>
		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
    3f3e:	d2 01       	movw	r26, r4
    3f40:	6d 91       	ld	r22, X+
    3f42:	7d 91       	ld	r23, X+
    3f44:	8d 91       	ld	r24, X+
    3f46:	9c 91       	ld	r25, X
    3f48:	f2 01       	movw	r30, r4
    3f4a:	34 96       	adiw	r30, 0x04	; 4
    3f4c:	2f 01       	movw	r4, r30
		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
		case 'B' :					/* Binary */
			r = 2; break;
		case 'O' :					/* Octal */
			r = 8; break;
    3f4e:	a8 e0       	ldi	r26, 0x08	; 8
    3f50:	09 cf       	rjmp	.-494    	; 0x3d64 <f_printf+0x26a>
		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
    3f52:	72 fc       	sbrc	r7, 2
    3f54:	f4 cf       	rjmp	.-24     	; 0x3f3e <f_printf+0x444>
		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
		case 'B' :					/* Binary */
			r = 2; break;
		case 'O' :					/* Octal */
			r = 8; break;
    3f56:	a8 e0       	ldi	r26, 0x08	; 8
    3f58:	ef ce       	rjmp	.-546    	; 0x3d38 <f_printf+0x23e>

	if (   pb.idx >= 0		/* Flush buffered characters to the file */
		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
		&& (UINT)pb.idx == nw) return pb.nchr;
	return EOF;
}
    3f5a:	c4 5a       	subi	r28, 0xA4	; 164
    3f5c:	df 4f       	sbci	r29, 0xFF	; 255
    3f5e:	0f b6       	in	r0, 0x3f	; 63
    3f60:	f8 94       	cli
    3f62:	de bf       	out	0x3e, r29	; 62
    3f64:	0f be       	out	0x3f, r0	; 63
    3f66:	cd bf       	out	0x3d, r28	; 61
    3f68:	df 91       	pop	r29
    3f6a:	cf 91       	pop	r28
    3f6c:	1f 91       	pop	r17
    3f6e:	0f 91       	pop	r16
    3f70:	ff 90       	pop	r15
    3f72:	ef 90       	pop	r14
    3f74:	df 90       	pop	r13
    3f76:	cf 90       	pop	r12
    3f78:	bf 90       	pop	r11
    3f7a:	af 90       	pop	r10
    3f7c:	9f 90       	pop	r9
    3f7e:	8f 90       	pop	r8
    3f80:	7f 90       	pop	r7
    3f82:	6f 90       	pop	r6
    3f84:	5f 90       	pop	r5
    3f86:	4f 90       	pop	r4
    3f88:	3f 90       	pop	r3
    3f8a:	2f 90       	pop	r2
    3f8c:	08 95       	ret

00003f8e <_ZN3I2CC1Ev>:
void I2C::twi_ack(){
	TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);
}
void I2C::twi_nack(){
	TWCR = (1<<TWINT) | (1<<TWEN);
	TWCR &= ~(1<<TWEA);
    3f8e:	82 e0       	ldi	r24, 0x02	; 2
    3f90:	80 93 b8 00 	sts	0x00B8, r24
    3f94:	08 95       	ret

00003f96 <_ZN3I2CD1Ev>:
    3f96:	08 95       	ret

00003f98 <_ZN3I2C9twi_startEv>:
    3f98:	84 ea       	ldi	r24, 0xA4	; 164
    3f9a:	80 93 bc 00 	sts	0x00BC, r24
    3f9e:	08 95       	ret

00003fa0 <_ZN3I2C8twi_stopEv>:
    3fa0:	84 e9       	ldi	r24, 0x94	; 148
    3fa2:	80 93 bc 00 	sts	0x00BC, r24
    3fa6:	08 95       	ret

00003fa8 <_ZN3I2C9twi_writeEh>:
}

void I2C::twi_write(uint8_t data){
	while(!(TWCR & (1<<TWINT)));
    3fa8:	ec eb       	ldi	r30, 0xBC	; 188
    3faa:	f0 e0       	ldi	r31, 0x00	; 0
    3fac:	80 81       	ld	r24, Z
    3fae:	88 23       	and	r24, r24
    3fb0:	ec f7       	brge	.-6      	; 0x3fac <_ZN3I2C9twi_writeEh+0x4>
	TWDR = data;
    3fb2:	60 93 bb 00 	sts	0x00BB, r22
	TWCR = (1<<TWINT) | (1<<TWEN);
    3fb6:	84 e8       	ldi	r24, 0x84	; 132
    3fb8:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));
    3fbc:	ec eb       	ldi	r30, 0xBC	; 188
    3fbe:	f0 e0       	ldi	r31, 0x00	; 0
    3fc0:	80 81       	ld	r24, Z
    3fc2:	88 23       	and	r24, r24
    3fc4:	ec f7       	brge	.-6      	; 0x3fc0 <_ZN3I2C9twi_writeEh+0x18>
}
    3fc6:	08 95       	ret

00003fc8 <_ZN9InterfaceC1Ev>:
		default:
		abfrage = 0;
		break;
	}
	return abfrage;
}
    3fc8:	2a b1       	in	r18, 0x0a	; 10
    3fca:	20 66       	ori	r18, 0x60	; 96
    3fcc:	2a b9       	out	0x0a, r18	; 10
    3fce:	28 b1       	in	r18, 0x08	; 8
    3fd0:	23 7f       	andi	r18, 0xF3	; 243
    3fd2:	28 b9       	out	0x08, r18	; 8
    3fd4:	27 b1       	in	r18, 0x07	; 7
    3fd6:	2c 60       	ori	r18, 0x0C	; 12
    3fd8:	27 b9       	out	0x07, r18	; 7
    3fda:	2a b1       	in	r18, 0x0a	; 10
    3fdc:	23 7e       	andi	r18, 0xE3	; 227
    3fde:	2a b9       	out	0x0a, r18	; 10
    3fe0:	fc 01       	movw	r30, r24
    3fe2:	0c 96       	adiw	r24, 0x0c	; 12
    3fe4:	11 92       	st	Z+, r1
    3fe6:	e8 17       	cp	r30, r24
    3fe8:	f9 07       	cpc	r31, r25
    3fea:	e1 f7       	brne	.-8      	; 0x3fe4 <_ZN9InterfaceC1Ev+0x1c>
    3fec:	08 95       	ret

00003fee <_ZN9InterfaceD1Ev>:
    3fee:	08 95       	ret

00003ff0 <_ZN9Interface7paradebEPVhhPh>:
    3ff0:	fb 01       	movw	r30, r22
    3ff2:	80 81       	ld	r24, Z
    3ff4:	90 e0       	ldi	r25, 0x00	; 0
    3ff6:	04 2e       	mov	r0, r20
    3ff8:	02 c0       	rjmp	.+4      	; 0x3ffe <_ZN9Interface7paradebEPVhhPh+0xe>
    3ffa:	95 95       	asr	r25
    3ffc:	87 95       	ror	r24
    3ffe:	0a 94       	dec	r0
    4000:	e2 f7       	brpl	.-8      	; 0x3ffa <_ZN9Interface7paradebEPVhhPh+0xa>
    4002:	80 ff       	sbrs	r24, 0
    4004:	05 c0       	rjmp	.+10     	; 0x4010 <_ZN9Interface7paradebEPVhhPh+0x20>
    4006:	81 e0       	ldi	r24, 0x01	; 1
    4008:	f9 01       	movw	r30, r18
    400a:	80 83       	st	Z, r24
    400c:	80 e0       	ldi	r24, 0x00	; 0
    400e:	08 95       	ret
    4010:	f9 01       	movw	r30, r18
    4012:	80 81       	ld	r24, Z
    4014:	81 30       	cpi	r24, 0x01	; 1
    4016:	71 f4       	brne	.+28     	; 0x4034 <_ZN9Interface7paradebEPVhhPh+0x44>
    4018:	fb 01       	movw	r30, r22
    401a:	60 81       	ld	r22, Z
    401c:	70 e0       	ldi	r23, 0x00	; 0
    401e:	fb 01       	movw	r30, r22
    4020:	02 c0       	rjmp	.+4      	; 0x4026 <_ZN9Interface7paradebEPVhhPh+0x36>
    4022:	f5 95       	asr	r31
    4024:	e7 95       	ror	r30
    4026:	4a 95       	dec	r20
    4028:	e2 f7       	brpl	.-8      	; 0x4022 <_ZN9Interface7paradebEPVhhPh+0x32>
    402a:	e0 fd       	sbrc	r30, 0
    402c:	03 c0       	rjmp	.+6      	; 0x4034 <_ZN9Interface7paradebEPVhhPh+0x44>
    402e:	f9 01       	movw	r30, r18
    4030:	10 82       	st	Z, r1
    4032:	08 95       	ret
    4034:	f9 01       	movw	r30, r18
    4036:	10 82       	st	Z, r1
    4038:	80 e0       	ldi	r24, 0x00	; 0
    403a:	08 95       	ret

0000403c <_ZN9Interface6TasterEv>:

uint8_t Interface::Taster(){
    403c:	1f 93       	push	r17
    403e:	cf 93       	push	r28
    4040:	df 93       	push	r29
    4042:	ec 01       	movw	r28, r24
	uint8_t taste = ' ';
	
	//erste Zeile
	PORTC |= (1<<PORTC3);
    4044:	43 9a       	sbi	0x08, 3	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    4046:	82 e0       	ldi	r24, 0x02	; 2
    4048:	8a 95       	dec	r24
    404a:	f1 f7       	brne	.-4      	; 0x4048 <_ZN9Interface6TasterEv+0xc>
    404c:	00 c0       	rjmp	.+0      	; 0x404e <_ZN9Interface6TasterEv+0x12>
	_delay_us(1);
	if(paradeb(&PIND,PIND4,&stat[2])){//debounce(&PIND,PIND4)){
    404e:	9e 01       	movw	r18, r28
    4050:	2e 5f       	subi	r18, 0xFE	; 254
    4052:	3f 4f       	sbci	r19, 0xFF	; 255
    4054:	44 e0       	ldi	r20, 0x04	; 4
    4056:	69 e2       	ldi	r22, 0x29	; 41
    4058:	70 e0       	ldi	r23, 0x00	; 0
    405a:	ce 01       	movw	r24, r28
    405c:	c9 df       	rcall	.-110    	; 0x3ff0 <_ZN9Interface7paradebEPVhhPh>
    405e:	81 11       	cpse	r24, r1
    4060:	14 c0       	rjmp	.+40     	; 0x408a <_ZN9Interface6TasterEv+0x4e>
		taste = '3';
	}
	else if (paradeb(&PIND,PIND3,&stat[1]))//debounce(&PIND,PIND3))
    4062:	9e 01       	movw	r18, r28
    4064:	2f 5f       	subi	r18, 0xFF	; 255
    4066:	3f 4f       	sbci	r19, 0xFF	; 255
    4068:	43 e0       	ldi	r20, 0x03	; 3
    406a:	69 e2       	ldi	r22, 0x29	; 41
    406c:	70 e0       	ldi	r23, 0x00	; 0
    406e:	ce 01       	movw	r24, r28
    4070:	bf df       	rcall	.-130    	; 0x3ff0 <_ZN9Interface7paradebEPVhhPh>
    4072:	81 11       	cpse	r24, r1
    4074:	0c c0       	rjmp	.+24     	; 0x408e <_ZN9Interface6TasterEv+0x52>
	{
		taste = '2';
	}
	else if (paradeb(&PIND,PIND2,&stat[0]))//debounce(&PIND,PIND2))
    4076:	9e 01       	movw	r18, r28
    4078:	42 e0       	ldi	r20, 0x02	; 2
    407a:	69 e2       	ldi	r22, 0x29	; 41
    407c:	70 e0       	ldi	r23, 0x00	; 0
    407e:	ce 01       	movw	r24, r28
    4080:	b7 df       	rcall	.-146    	; 0x3ff0 <_ZN9Interface7paradebEPVhhPh>
    4082:	88 23       	and	r24, r24
    4084:	31 f0       	breq	.+12     	; 0x4092 <_ZN9Interface6TasterEv+0x56>
	{
		taste = '1';
    4086:	11 e3       	ldi	r17, 0x31	; 49
    4088:	05 c0       	rjmp	.+10     	; 0x4094 <_ZN9Interface6TasterEv+0x58>
	
	//erste Zeile
	PORTC |= (1<<PORTC3);
	_delay_us(1);
	if(paradeb(&PIND,PIND4,&stat[2])){//debounce(&PIND,PIND4)){
		taste = '3';
    408a:	13 e3       	ldi	r17, 0x33	; 51
    408c:	03 c0       	rjmp	.+6      	; 0x4094 <_ZN9Interface6TasterEv+0x58>
	}
	else if (paradeb(&PIND,PIND3,&stat[1]))//debounce(&PIND,PIND3))
	{
		taste = '2';
    408e:	12 e3       	ldi	r17, 0x32	; 50
    4090:	01 c0       	rjmp	.+2      	; 0x4094 <_ZN9Interface6TasterEv+0x58>
	}
	return abfrage;
}

uint8_t Interface::Taster(){
	uint8_t taste = ' ';
    4092:	10 e2       	ldi	r17, 0x20	; 32
	}
	else if (paradeb(&PIND,PIND2,&stat[0]))//debounce(&PIND,PIND2))
	{
		taste = '1';
	}
	PORTC &= ~(1<<PORTC3);
    4094:	43 98       	cbi	0x08, 3	; 8
	
	//zweite Zeile
	PORTC |= (1<<PORTC2);
    4096:	42 9a       	sbi	0x08, 2	; 8
    4098:	82 e0       	ldi	r24, 0x02	; 2
    409a:	8a 95       	dec	r24
    409c:	f1 f7       	brne	.-4      	; 0x409a <_ZN9Interface6TasterEv+0x5e>
    409e:	00 c0       	rjmp	.+0      	; 0x40a0 <_ZN9Interface6TasterEv+0x64>
	_delay_us(1);
	if(paradeb(&PIND,PIND4,&stat[5])){//debounce(&PIND,PIND4)){
    40a0:	9e 01       	movw	r18, r28
    40a2:	2b 5f       	subi	r18, 0xFB	; 251
    40a4:	3f 4f       	sbci	r19, 0xFF	; 255
    40a6:	44 e0       	ldi	r20, 0x04	; 4
    40a8:	69 e2       	ldi	r22, 0x29	; 41
    40aa:	70 e0       	ldi	r23, 0x00	; 0
    40ac:	ce 01       	movw	r24, r28
    40ae:	a0 df       	rcall	.-192    	; 0x3ff0 <_ZN9Interface7paradebEPVhhPh>
    40b0:	81 11       	cpse	r24, r1
    40b2:	16 c0       	rjmp	.+44     	; 0x40e0 <_ZN9Interface6TasterEv+0xa4>
		taste = '6';
	}
	else if (paradeb(&PIND,PIND3,&stat[4]))//debounce(&PIND,PIND3))
    40b4:	9e 01       	movw	r18, r28
    40b6:	2c 5f       	subi	r18, 0xFC	; 252
    40b8:	3f 4f       	sbci	r19, 0xFF	; 255
    40ba:	43 e0       	ldi	r20, 0x03	; 3
    40bc:	69 e2       	ldi	r22, 0x29	; 41
    40be:	70 e0       	ldi	r23, 0x00	; 0
    40c0:	ce 01       	movw	r24, r28
    40c2:	96 df       	rcall	.-212    	; 0x3ff0 <_ZN9Interface7paradebEPVhhPh>
    40c4:	81 11       	cpse	r24, r1
    40c6:	0e c0       	rjmp	.+28     	; 0x40e4 <_ZN9Interface6TasterEv+0xa8>
	{
		taste = '5';
	}
	else if (paradeb(&PIND,PIND2,&stat[3]))//debounce(&PIND,PIND2))
    40c8:	9e 01       	movw	r18, r28
    40ca:	2d 5f       	subi	r18, 0xFD	; 253
    40cc:	3f 4f       	sbci	r19, 0xFF	; 255
    40ce:	42 e0       	ldi	r20, 0x02	; 2
    40d0:	69 e2       	ldi	r22, 0x29	; 41
    40d2:	70 e0       	ldi	r23, 0x00	; 0
    40d4:	ce 01       	movw	r24, r28
    40d6:	8c df       	rcall	.-232    	; 0x3ff0 <_ZN9Interface7paradebEPVhhPh>
    40d8:	88 23       	and	r24, r24
    40da:	29 f0       	breq	.+10     	; 0x40e6 <_ZN9Interface6TasterEv+0xaa>
	{
		taste = '4';
    40dc:	14 e3       	ldi	r17, 0x34	; 52
    40de:	03 c0       	rjmp	.+6      	; 0x40e6 <_ZN9Interface6TasterEv+0xaa>
	
	//zweite Zeile
	PORTC |= (1<<PORTC2);
	_delay_us(1);
	if(paradeb(&PIND,PIND4,&stat[5])){//debounce(&PIND,PIND4)){
		taste = '6';
    40e0:	16 e3       	ldi	r17, 0x36	; 54
    40e2:	01 c0       	rjmp	.+2      	; 0x40e6 <_ZN9Interface6TasterEv+0xaa>
	}
	else if (paradeb(&PIND,PIND3,&stat[4]))//debounce(&PIND,PIND3))
	{
		taste = '5';
    40e4:	15 e3       	ldi	r17, 0x35	; 53
	}
	else if (paradeb(&PIND,PIND2,&stat[3]))//debounce(&PIND,PIND2))
	{
		taste = '4';
	}
	PORTC &= ~(1<<PORTC2);
    40e6:	42 98       	cbi	0x08, 2	; 8
	
	//dritte Zeile
	PORTD |= (1<<PORTD6);
    40e8:	5e 9a       	sbi	0x0b, 6	; 11
    40ea:	82 e0       	ldi	r24, 0x02	; 2
    40ec:	8a 95       	dec	r24
    40ee:	f1 f7       	brne	.-4      	; 0x40ec <_ZN9Interface6TasterEv+0xb0>
    40f0:	00 c0       	rjmp	.+0      	; 0x40f2 <_ZN9Interface6TasterEv+0xb6>
	_delay_us(1);
	if(paradeb(&PIND,PIND4,&stat[8])){//debounce(&PIND,PIND4)){
    40f2:	9e 01       	movw	r18, r28
    40f4:	28 5f       	subi	r18, 0xF8	; 248
    40f6:	3f 4f       	sbci	r19, 0xFF	; 255
    40f8:	44 e0       	ldi	r20, 0x04	; 4
    40fa:	69 e2       	ldi	r22, 0x29	; 41
    40fc:	70 e0       	ldi	r23, 0x00	; 0
    40fe:	ce 01       	movw	r24, r28
    4100:	77 df       	rcall	.-274    	; 0x3ff0 <_ZN9Interface7paradebEPVhhPh>
    4102:	81 11       	cpse	r24, r1
    4104:	16 c0       	rjmp	.+44     	; 0x4132 <__stack+0x33>
		taste = '9';
	}
	else if (paradeb(&PIND,PIND3,&stat[7]))//debounce(&PIND,PIND3))
    4106:	9e 01       	movw	r18, r28
    4108:	29 5f       	subi	r18, 0xF9	; 249
    410a:	3f 4f       	sbci	r19, 0xFF	; 255
    410c:	43 e0       	ldi	r20, 0x03	; 3
    410e:	69 e2       	ldi	r22, 0x29	; 41
    4110:	70 e0       	ldi	r23, 0x00	; 0
    4112:	ce 01       	movw	r24, r28
    4114:	6d df       	rcall	.-294    	; 0x3ff0 <_ZN9Interface7paradebEPVhhPh>
    4116:	81 11       	cpse	r24, r1
    4118:	0e c0       	rjmp	.+28     	; 0x4136 <__stack+0x37>
	{
		taste = '8';
	}
	else if (paradeb(&PIND,PIND2,&stat[6]))//debounce(&PIND,PIND2))
    411a:	9e 01       	movw	r18, r28
    411c:	2a 5f       	subi	r18, 0xFA	; 250
    411e:	3f 4f       	sbci	r19, 0xFF	; 255
    4120:	42 e0       	ldi	r20, 0x02	; 2
    4122:	69 e2       	ldi	r22, 0x29	; 41
    4124:	70 e0       	ldi	r23, 0x00	; 0
    4126:	ce 01       	movw	r24, r28
    4128:	63 df       	rcall	.-314    	; 0x3ff0 <_ZN9Interface7paradebEPVhhPh>
    412a:	88 23       	and	r24, r24
    412c:	29 f0       	breq	.+10     	; 0x4138 <__stack+0x39>
	{
		taste = '7';
    412e:	17 e3       	ldi	r17, 0x37	; 55
    4130:	03 c0       	rjmp	.+6      	; 0x4138 <__stack+0x39>
	
	//dritte Zeile
	PORTD |= (1<<PORTD6);
	_delay_us(1);
	if(paradeb(&PIND,PIND4,&stat[8])){//debounce(&PIND,PIND4)){
		taste = '9';
    4132:	19 e3       	ldi	r17, 0x39	; 57
    4134:	01 c0       	rjmp	.+2      	; 0x4138 <__stack+0x39>
	}
	else if (paradeb(&PIND,PIND3,&stat[7]))//debounce(&PIND,PIND3))
	{
		taste = '8';
    4136:	18 e3       	ldi	r17, 0x38	; 56
	}
	else if (paradeb(&PIND,PIND2,&stat[6]))//debounce(&PIND,PIND2))
	{
		taste = '7';
	}
	PORTD &= ~(1<<PORTD6);
    4138:	5e 98       	cbi	0x0b, 6	; 11
	
	//vierte Zeile
	PORTD |= (1<<PORTD5);
    413a:	5d 9a       	sbi	0x0b, 5	; 11
    413c:	82 e0       	ldi	r24, 0x02	; 2
    413e:	8a 95       	dec	r24
    4140:	f1 f7       	brne	.-4      	; 0x413e <__stack+0x3f>
    4142:	00 c0       	rjmp	.+0      	; 0x4144 <__stack+0x45>
	_delay_us(1);
	if(paradeb(&PIND,PIND4,&stat[11])){//debounce(&PIND,PIND4)){
    4144:	9e 01       	movw	r18, r28
    4146:	25 5f       	subi	r18, 0xF5	; 245
    4148:	3f 4f       	sbci	r19, 0xFF	; 255
    414a:	44 e0       	ldi	r20, 0x04	; 4
    414c:	69 e2       	ldi	r22, 0x29	; 41
    414e:	70 e0       	ldi	r23, 0x00	; 0
    4150:	ce 01       	movw	r24, r28
    4152:	4e df       	rcall	.-356    	; 0x3ff0 <_ZN9Interface7paradebEPVhhPh>
    4154:	81 11       	cpse	r24, r1
    4156:	16 c0       	rjmp	.+44     	; 0x4184 <__stack+0x85>
		taste = '#';
	}
	else if (paradeb(&PIND,PIND3,&stat[10]))//debounce(&PIND,PIND3))
    4158:	9e 01       	movw	r18, r28
    415a:	26 5f       	subi	r18, 0xF6	; 246
    415c:	3f 4f       	sbci	r19, 0xFF	; 255
    415e:	43 e0       	ldi	r20, 0x03	; 3
    4160:	69 e2       	ldi	r22, 0x29	; 41
    4162:	70 e0       	ldi	r23, 0x00	; 0
    4164:	ce 01       	movw	r24, r28
    4166:	44 df       	rcall	.-376    	; 0x3ff0 <_ZN9Interface7paradebEPVhhPh>
    4168:	81 11       	cpse	r24, r1
    416a:	0e c0       	rjmp	.+28     	; 0x4188 <__stack+0x89>
	{
		taste = '0';
	}
	else if (paradeb(&PIND,PIND2,&stat[9]))//debounce(&PIND,PIND2))
    416c:	9e 01       	movw	r18, r28
    416e:	27 5f       	subi	r18, 0xF7	; 247
    4170:	3f 4f       	sbci	r19, 0xFF	; 255
    4172:	42 e0       	ldi	r20, 0x02	; 2
    4174:	69 e2       	ldi	r22, 0x29	; 41
    4176:	70 e0       	ldi	r23, 0x00	; 0
    4178:	ce 01       	movw	r24, r28
    417a:	3a df       	rcall	.-396    	; 0x3ff0 <_ZN9Interface7paradebEPVhhPh>
    417c:	88 23       	and	r24, r24
    417e:	29 f0       	breq	.+10     	; 0x418a <__stack+0x8b>
	{
		taste = '*';
    4180:	1a e2       	ldi	r17, 0x2A	; 42
    4182:	03 c0       	rjmp	.+6      	; 0x418a <__stack+0x8b>
	
	//vierte Zeile
	PORTD |= (1<<PORTD5);
	_delay_us(1);
	if(paradeb(&PIND,PIND4,&stat[11])){//debounce(&PIND,PIND4)){
		taste = '#';
    4184:	13 e2       	ldi	r17, 0x23	; 35
    4186:	01 c0       	rjmp	.+2      	; 0x418a <__stack+0x8b>
	}
	else if (paradeb(&PIND,PIND3,&stat[10]))//debounce(&PIND,PIND3))
	{
		taste = '0';
    4188:	10 e3       	ldi	r17, 0x30	; 48
	}
	else if (paradeb(&PIND,PIND2,&stat[9]))//debounce(&PIND,PIND2))
	{
		taste = '*';
	}
	PORTD &= ~(1<<PORTD5);
    418a:	5d 98       	cbi	0x0b, 5	; 11
	
	return taste;
}
    418c:	81 2f       	mov	r24, r17
    418e:	df 91       	pop	r29
    4190:	cf 91       	pop	r28
    4192:	1f 91       	pop	r17
    4194:	08 95       	ret

00004196 <_ZN9Interface7unifiedEv>:

uint8_t Interface::unified(){
	switch (Taster())
    4196:	52 df       	rcall	.-348    	; 0x403c <_ZN9Interface6TasterEv>
    4198:	48 2f       	mov	r20, r24
    419a:	50 e0       	ldi	r21, 0x00	; 0
    419c:	fa 01       	movw	r30, r20
    419e:	b3 97       	sbiw	r30, 0x23	; 35
    41a0:	e7 31       	cpi	r30, 0x17	; 23
    41a2:	f1 05       	cpc	r31, r1
    41a4:	c0 f4       	brcc	.+48     	; 0x41d6 <_ZN9Interface7unifiedEv+0x40>
    41a6:	ec 56       	subi	r30, 0x6C	; 108
    41a8:	ff 4f       	sbci	r31, 0xFF	; 255
    41aa:	0c 94 12 42 	jmp	0x8424	; 0x8424 <__tablejump2__>
	{
	case '1':
		return 'B';
		break;
	case '2':
		return 'u';
    41ae:	85 e7       	ldi	r24, 0x75	; 117
    41b0:	08 95       	ret
		break;
	case '3':
		return 'A';
    41b2:	81 e4       	ldi	r24, 0x41	; 65
    41b4:	08 95       	ret
		break;
	case '4':
		return 'l';
    41b6:	8c e6       	ldi	r24, 0x6C	; 108
    41b8:	08 95       	ret
		break;
	case '5':
		return 'o';
    41ba:	8f e6       	ldi	r24, 0x6F	; 111
    41bc:	08 95       	ret
		break;
	case '6':
		return 'r';
    41be:	82 e7       	ldi	r24, 0x72	; 114
    41c0:	08 95       	ret
		break;
	case '7':
		return 'Y';
    41c2:	89 e5       	ldi	r24, 0x59	; 89
    41c4:	08 95       	ret
		break;
	case '8':
		return 'd';
    41c6:	84 e6       	ldi	r24, 0x64	; 100
    41c8:	08 95       	ret
		break;
	case '9':
		return 'X';
    41ca:	88 e5       	ldi	r24, 0x58	; 88
    41cc:	08 95       	ret
		break;
	case '*':
		return 'e';
    41ce:	85 e6       	ldi	r24, 0x65	; 101
    41d0:	08 95       	ret
		break;
	case '0':
		return '0';
		break;
	case '#':
		return 'm';
    41d2:	8d e6       	ldi	r24, 0x6D	; 109
    41d4:	08 95       	ret
		break;
	default:
		return ' ';
    41d6:	80 e2       	ldi	r24, 0x20	; 32
    41d8:	08 95       	ret

uint8_t Interface::unified(){
	switch (Taster())
	{
	case '1':
		return 'B';
    41da:	82 e4       	ldi	r24, 0x42	; 66
		break;
	default:
		return ' ';
		break;
	}
}
    41dc:	08 95       	ret

000041de <_ZN9Interface17ZahlenausTastaturEv>:

uint8_t Interface::ZahlenausTastatur(){
    41de:	cf 93       	push	r28
    41e0:	df 93       	push	r29
    41e2:	ec 01       	movw	r28, r24
	while(true){
		uint8_t taste = Taster();
    41e4:	ce 01       	movw	r24, r28
    41e6:	2a df       	rcall	.-428    	; 0x403c <_ZN9Interface6TasterEv>
		if(taste>='0' && taste<='9'){
    41e8:	80 53       	subi	r24, 0x30	; 48
    41ea:	8a 30       	cpi	r24, 0x0A	; 10
    41ec:	d8 f7       	brcc	.-10     	; 0x41e4 <_ZN9Interface17ZahlenausTastaturEv+0x6>
			return taste - '0';
		}
	}
}
    41ee:	df 91       	pop	r29
    41f0:	cf 91       	pop	r28
    41f2:	08 95       	ret

000041f4 <_ZN7LSM303DD1Ev>:
	//FIFO Bypass Mode
	ACCBypassmode();
}

void LSM303D::ACCStreammode(){
	LSM303_command(FIFO_CTRL,(1<<FM1));
    41f4:	46 96       	adiw	r24, 0x16	; 22
    41f6:	cf ce       	rjmp	.-610    	; 0x3f96 <_ZN3I2CD1Ev>
    41f8:	08 95       	ret

000041fa <_ZN7LSM303D14LSM303_commandEhh>:
    41fa:	0f 93       	push	r16
    41fc:	1f 93       	push	r17
    41fe:	cf 93       	push	r28
    4200:	df 93       	push	r29
    4202:	06 2f       	mov	r16, r22
    4204:	14 2f       	mov	r17, r20
    4206:	ec 01       	movw	r28, r24
    4208:	66 96       	adiw	r28, 0x16	; 22
    420a:	ce 01       	movw	r24, r28
    420c:	c5 de       	rcall	.-630    	; 0x3f98 <_ZN3I2C9twi_startEv>
    420e:	6a e3       	ldi	r22, 0x3A	; 58
    4210:	ce 01       	movw	r24, r28
    4212:	ca de       	rcall	.-620    	; 0x3fa8 <_ZN3I2C9twi_writeEh>
    4214:	60 2f       	mov	r22, r16
    4216:	ce 01       	movw	r24, r28
    4218:	c7 de       	rcall	.-626    	; 0x3fa8 <_ZN3I2C9twi_writeEh>
    421a:	61 2f       	mov	r22, r17
    421c:	ce 01       	movw	r24, r28
    421e:	c4 de       	rcall	.-632    	; 0x3fa8 <_ZN3I2C9twi_writeEh>
    4220:	ce 01       	movw	r24, r28
    4222:	be de       	rcall	.-644    	; 0x3fa0 <_ZN3I2C8twi_stopEv>
    4224:	df 91       	pop	r29
    4226:	cf 91       	pop	r28
    4228:	1f 91       	pop	r17
    422a:	0f 91       	pop	r16
    422c:	08 95       	ret

0000422e <_ZN7LSM303D13ACCBypassmodeEv>:
}

void LSM303D::ACCBypassmode(){
	LSM303_command(FIFO_CTRL,0x00);
    422e:	40 e0       	ldi	r20, 0x00	; 0
    4230:	6e e2       	ldi	r22, 0x2E	; 46
    4232:	e3 cf       	rjmp	.-58     	; 0x41fa <_ZN7LSM303D14LSM303_commandEhh>
    4234:	08 95       	ret

00004236 <_ZN7LSM303D9acce_initEv>:
// default destructor
LSM303D::~LSM303D()
{
} //~LSM303D

void LSM303D::acce_init(){
    4236:	cf 93       	push	r28
    4238:	df 93       	push	r29
    423a:	ec 01       	movw	r28, r24
	//ACC Activ und 25Hz ohne Block dataread
	LSM303_command(CTRL1,(1<<AXEN)|(1<<AYEN)|(1<<AZEN)|(1<<AODR2));
    423c:	47 e4       	ldi	r20, 0x47	; 71
    423e:	60 e2       	ldi	r22, 0x20	; 32
    4240:	dc df       	rcall	.-72     	; 0x41fa <_ZN7LSM303D14LSM303_commandEhh>
	
	//ACC fuer +-2g
	LSM303_command(CTRL2,0x00);
    4242:	40 e0       	ldi	r20, 0x00	; 0
    4244:	61 e2       	ldi	r22, 0x21	; 33
    4246:	ce 01       	movw	r24, r28
    4248:	d8 df       	rcall	.-80     	; 0x41fa <_ZN7LSM303D14LSM303_commandEhh>
	
	//Temperatursensor an
	LSM303_command(CTRL5,(1<<TEMP_EN));
    424a:	40 e8       	ldi	r20, 0x80	; 128
    424c:	64 e2       	ldi	r22, 0x24	; 36
    424e:	ce 01       	movw	r24, r28
    4250:	d4 df       	rcall	.-88     	; 0x41fa <_ZN7LSM303D14LSM303_commandEhh>
	
	//FIFO Bypass Mode
	ACCBypassmode();
    4252:	ce 01       	movw	r24, r28
    4254:	ec df       	rcall	.-40     	; 0x422e <_ZN7LSM303D13ACCBypassmodeEv>
}
    4256:	df 91       	pop	r29
    4258:	cf 91       	pop	r28
    425a:	08 95       	ret

0000425c <_ZN7LSM303DC1Ev>:


#include "LSM303D.h"

// default constructor
LSM303D::LSM303D()
    425c:	cf 93       	push	r28
    425e:	df 93       	push	r29
    4260:	ec 01       	movw	r28, r24
    4262:	46 96       	adiw	r24, 0x16	; 22
    4264:	94 de       	rcall	.-728    	; 0x3f8e <_ZN3I2CC1Ev>
{
	//Variablen initialisieren
	Tempera=0;
    4266:	1f 82       	std	Y+7, r1	; 0x07
    4268:	1e 82       	std	Y+6, r1	; 0x06
	roll=0.0;
    426a:	18 86       	std	Y+8, r1	; 0x08
    426c:	19 86       	std	Y+9, r1	; 0x09
    426e:	1a 86       	std	Y+10, r1	; 0x0a
    4270:	1b 86       	std	Y+11, r1	; 0x0b
	pitch=0.0;
    4272:	1c 86       	std	Y+12, r1	; 0x0c
    4274:	1d 86       	std	Y+13, r1	; 0x0d
    4276:	1e 86       	std	Y+14, r1	; 0x0e
    4278:	1f 86       	std	Y+15, r1	; 0x0f
	Schrittzaehler=0;
    427a:	19 8a       	std	Y+17, r1	; 0x11
    427c:	18 8a       	std	Y+16, r1	; 0x10
	gravity=0;
    427e:	1a 8a       	std	Y+18, r1	; 0x12
    4280:	1b 8a       	std	Y+19, r1	; 0x13
    4282:	1c 8a       	std	Y+20, r1	; 0x14
    4284:	1d 8a       	std	Y+21, r1	; 0x15
	higher=0;
    4286:	de 01       	movw	r26, r28
    4288:	a1 52       	subi	r26, 0x21	; 33
    428a:	bf 4f       	sbci	r27, 0xFF	; 255
    428c:	1d 92       	st	X+, r1
    428e:	1d 92       	st	X+, r1
    4290:	1d 92       	st	X+, r1
    4292:	1c 92       	st	X, r1
    4294:	13 97       	sbiw	r26, 0x03	; 3
	lower=0;
    4296:	fe 01       	movw	r30, r28
    4298:	ed 51       	subi	r30, 0x1D	; 29
    429a:	ff 4f       	sbci	r31, 0xFF	; 255
    429c:	10 82       	st	Z, r1
    429e:	11 82       	std	Z+1, r1	; 0x01
    42a0:	12 82       	std	Z+2, r1	; 0x02
    42a2:	13 82       	std	Z+3, r1	; 0x03
	threschold=27;	//aus Erfahrung
    42a4:	34 96       	adiw	r30, 0x04	; 4
    42a6:	8b e1       	ldi	r24, 0x1B	; 27
    42a8:	90 e0       	ldi	r25, 0x00	; 0
    42aa:	91 83       	std	Z+1, r25	; 0x01
    42ac:	80 83       	st	Z, r24
	for (uint8_t i=0;i<3;i++)
	{
		achsen_A[i]=0;
    42ae:	19 82       	std	Y+1, r1	; 0x01
    42b0:	18 82       	st	Y, r1
    42b2:	1b 82       	std	Y+3, r1	; 0x03
    42b4:	1a 82       	std	Y+2, r1	; 0x02
    42b6:	1d 82       	std	Y+5, r1	; 0x05
    42b8:	1c 82       	std	Y+4, r1	; 0x04
    42ba:	e0 5d       	subi	r30, 0xD0	; 208
    42bc:	f1 09       	sbc	r31, r1
    42be:	9d 01       	movw	r18, r26
	}
	for (uint8_t i=0;i<50;i++)
	{
		Daten[i]=0;
    42c0:	11 92       	st	Z+, r1
    42c2:	11 92       	st	Z+, r1
    42c4:	11 92       	st	Z+, r1
    42c6:	11 92       	st	Z+, r1
	threschold=27;	//aus Erfahrung
	for (uint8_t i=0;i<3;i++)
	{
		achsen_A[i]=0;
	}
	for (uint8_t i=0;i<50;i++)
    42c8:	e2 17       	cp	r30, r18
    42ca:	f3 07       	cpc	r31, r19
    42cc:	c9 f7       	brne	.-14     	; 0x42c0 <_ZN7LSM303DC1Ev+0x64>
	{
		Daten[i]=0;
	}
	
	//ACC init
	acce_init();
    42ce:	ce 01       	movw	r24, r28
    42d0:	b2 df       	rcall	.-156    	; 0x4236 <_ZN7LSM303D9acce_initEv>
} //LSM303D
    42d2:	df 91       	pop	r29
    42d4:	cf 91       	pop	r28
    42d6:	08 95       	ret

000042d8 <_ZN7monitor11tastendruckEPh>:
	for (uint8_t i = 0; i < nsamples; ++i ) {
		sum += ADC_Read( channel );
	}
	
	return (uint16_t)( sum / nsamples );
}
    42d8:	80 e0       	ldi	r24, 0x00	; 0
    42da:	08 95       	ret

000042dc <_ZN3uhr11tastendruckEPh>:
    42dc:	fc 01       	movw	r30, r24
    42de:	db 01       	movw	r26, r22
    42e0:	9c 91       	ld	r25, X
    42e2:	95 36       	cpi	r25, 0x65	; 101
    42e4:	39 f4       	brne	.+14     	; 0x42f4 <_ZN3uhr11tastendruckEPh+0x18>
    42e6:	81 a5       	ldd	r24, Z+41	; 0x29
    42e8:	81 30       	cpi	r24, 0x01	; 1
    42ea:	11 f4       	brne	.+4      	; 0x42f0 <_ZN3uhr11tastendruckEPh+0x14>
    42ec:	11 a6       	std	Z+41, r1	; 0x29
    42ee:	02 c0       	rjmp	.+4      	; 0x42f4 <_ZN3uhr11tastendruckEPh+0x18>
    42f0:	81 e0       	ldi	r24, 0x01	; 1
    42f2:	81 a7       	std	Z+41, r24	; 0x29
    42f4:	80 e0       	ldi	r24, 0x00	; 0
    42f6:	08 95       	ret

000042f8 <_ZN13einstellungen11tastendruckEPh>:
    42f8:	80 e0       	ldi	r24, 0x00	; 0
    42fa:	08 95       	ret

000042fc <_ZN5menue11tastendruckEPh>:
    42fc:	80 e0       	ldi	r24, 0x00	; 0
    42fe:	08 95       	ret

00004300 <_ZN9offscreen4drawEv>:
    4300:	cf 93       	push	r28
    4302:	df 93       	push	r29
    4304:	ec 01       	movw	r28, r24
    4306:	8f 89       	ldd	r24, Y+23	; 0x17
    4308:	98 8d       	ldd	r25, Y+24	; 0x18
    430a:	0e 94 b1 07 	call	0xf62	; 0xf62 <_ZN7Display10clearFrameEv>
    430e:	8f 89       	ldd	r24, Y+23	; 0x17
    4310:	98 8d       	ldd	r25, Y+24	; 0x18
    4312:	0e 94 31 08 	call	0x1062	; 0x1062 <_ZN7Display9sendFrameEv>
    4316:	df 91       	pop	r29
    4318:	cf 91       	pop	r28
    431a:	08 95       	ret

0000431c <_ZN9wilkommen4drawEv>:
    431c:	ef 92       	push	r14
    431e:	ff 92       	push	r15
    4320:	0f 93       	push	r16
    4322:	1f 93       	push	r17
    4324:	cf 93       	push	r28
    4326:	df 93       	push	r29
    4328:	ec 01       	movw	r28, r24
    432a:	8f 89       	ldd	r24, Y+23	; 0x17
    432c:	98 8d       	ldd	r25, Y+24	; 0x18
    432e:	0e 94 b1 07 	call	0xf62	; 0xf62 <_ZN7Display10clearFrameEv>
    4332:	7e 01       	movw	r14, r28
    4334:	22 e0       	ldi	r18, 0x02	; 2
    4336:	e2 0e       	add	r14, r18
    4338:	f1 1c       	adc	r15, r1
    433a:	8f e0       	ldi	r24, 0x0F	; 15
    433c:	e6 e9       	ldi	r30, 0x96	; 150
    433e:	f1 e0       	ldi	r31, 0x01	; 1
    4340:	d7 01       	movw	r26, r14
    4342:	01 90       	ld	r0, Z+
    4344:	0d 92       	st	X+, r0
    4346:	8a 95       	dec	r24
    4348:	e1 f7       	brne	.-8      	; 0x4342 <_ZN9wilkommen4drawEv+0x26>
    434a:	8e e0       	ldi	r24, 0x0E	; 14
    434c:	8e 8b       	std	Y+22, r24	; 0x16
    434e:	00 e0       	ldi	r16, 0x00	; 0
    4350:	10 e0       	ldi	r17, 0x00	; 0
    4352:	fe 01       	movw	r30, r28
    4354:	e1 0f       	add	r30, r17
    4356:	f1 1d       	adc	r31, r1
    4358:	20 e0       	ldi	r18, 0x00	; 0
    435a:	40 2f       	mov	r20, r16
    435c:	62 81       	ldd	r22, Z+2	; 0x02
    435e:	8f 89       	ldd	r24, Y+23	; 0x17
    4360:	98 8d       	ldd	r25, Y+24	; 0x18
    4362:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <_ZN7Display9draw_ASCIEhhh>
    4366:	1f 5f       	subi	r17, 0xFF	; 255
    4368:	0a 5f       	subi	r16, 0xFA	; 250
    436a:	8e 89       	ldd	r24, Y+22	; 0x16
    436c:	18 17       	cp	r17, r24
    436e:	88 f3       	brcs	.-30     	; 0x4352 <_ZN9wilkommen4drawEv+0x36>
    4370:	8f e0       	ldi	r24, 0x0F	; 15
    4372:	e5 ea       	ldi	r30, 0xA5	; 165
    4374:	f1 e0       	ldi	r31, 0x01	; 1
    4376:	d7 01       	movw	r26, r14
    4378:	01 90       	ld	r0, Z+
    437a:	0d 92       	st	X+, r0
    437c:	8a 95       	dec	r24
    437e:	e1 f7       	brne	.-8      	; 0x4378 <_ZN9wilkommen4drawEv+0x5c>
    4380:	8e e0       	ldi	r24, 0x0E	; 14
    4382:	8e 8b       	std	Y+22, r24	; 0x16
    4384:	00 e0       	ldi	r16, 0x00	; 0
    4386:	10 e0       	ldi	r17, 0x00	; 0
    4388:	fe 01       	movw	r30, r28
    438a:	e1 0f       	add	r30, r17
    438c:	f1 1d       	adc	r31, r1
    438e:	28 e0       	ldi	r18, 0x08	; 8
    4390:	40 2f       	mov	r20, r16
    4392:	62 81       	ldd	r22, Z+2	; 0x02
    4394:	8f 89       	ldd	r24, Y+23	; 0x17
    4396:	98 8d       	ldd	r25, Y+24	; 0x18
    4398:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <_ZN7Display9draw_ASCIEhhh>
    439c:	1f 5f       	subi	r17, 0xFF	; 255
    439e:	0a 5f       	subi	r16, 0xFA	; 250
    43a0:	8e 89       	ldd	r24, Y+22	; 0x16
    43a2:	18 17       	cp	r17, r24
    43a4:	88 f3       	brcs	.-30     	; 0x4388 <_ZN9wilkommen4drawEv+0x6c>
    43a6:	80 e4       	ldi	r24, 0x40	; 64
    43a8:	8f 93       	push	r24
    43aa:	81 e4       	ldi	r24, 0x41	; 65
    43ac:	8f 93       	push	r24
    43ae:	8b ee       	ldi	r24, 0xEB	; 235
    43b0:	8f 93       	push	r24
    43b2:	85 e8       	ldi	r24, 0x85	; 133
    43b4:	8f 93       	push	r24
    43b6:	84 eb       	ldi	r24, 0xB4	; 180
    43b8:	91 e0       	ldi	r25, 0x01	; 1
    43ba:	9f 93       	push	r25
    43bc:	8f 93       	push	r24
    43be:	ff 92       	push	r15
    43c0:	ef 92       	push	r14
    43c2:	0e 94 87 44 	call	0x890e	; 0x890e <sprintf>
    43c6:	8e 8b       	std	Y+22, r24	; 0x16
    43c8:	2d b7       	in	r18, 0x3d	; 61
    43ca:	3e b7       	in	r19, 0x3e	; 62
    43cc:	28 5f       	subi	r18, 0xF8	; 248
    43ce:	3f 4f       	sbci	r19, 0xFF	; 255
    43d0:	0f b6       	in	r0, 0x3f	; 63
    43d2:	f8 94       	cli
    43d4:	3e bf       	out	0x3e, r19	; 62
    43d6:	0f be       	out	0x3f, r0	; 63
    43d8:	2d bf       	out	0x3d, r18	; 61
    43da:	88 23       	and	r24, r24
    43dc:	89 f0       	breq	.+34     	; 0x4400 <_ZN9wilkommen4drawEv+0xe4>
    43de:	00 e0       	ldi	r16, 0x00	; 0
    43e0:	10 e0       	ldi	r17, 0x00	; 0
    43e2:	fe 01       	movw	r30, r28
    43e4:	e1 0f       	add	r30, r17
    43e6:	f1 1d       	adc	r31, r1
    43e8:	20 e2       	ldi	r18, 0x20	; 32
    43ea:	40 2f       	mov	r20, r16
    43ec:	62 81       	ldd	r22, Z+2	; 0x02
    43ee:	8f 89       	ldd	r24, Y+23	; 0x17
    43f0:	98 8d       	ldd	r25, Y+24	; 0x18
    43f2:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <_ZN7Display9draw_ASCIEhhh>
    43f6:	1f 5f       	subi	r17, 0xFF	; 255
    43f8:	0a 5f       	subi	r16, 0xFA	; 250
    43fa:	8e 89       	ldd	r24, Y+22	; 0x16
    43fc:	18 17       	cp	r17, r24
    43fe:	88 f3       	brcs	.-30     	; 0x43e2 <_ZN9wilkommen4drawEv+0xc6>
    4400:	8f 89       	ldd	r24, Y+23	; 0x17
    4402:	98 8d       	ldd	r25, Y+24	; 0x18
    4404:	0e 94 31 08 	call	0x1062	; 0x1062 <_ZN7Display9sendFrameEv>
    4408:	df 91       	pop	r29
    440a:	cf 91       	pop	r28
    440c:	1f 91       	pop	r17
    440e:	0f 91       	pop	r16
    4410:	ff 90       	pop	r15
    4412:	ef 90       	pop	r14
    4414:	08 95       	ret

00004416 <_Z8ADC_Readh>:
    4416:	ec e7       	ldi	r30, 0x7C	; 124
    4418:	f0 e0       	ldi	r31, 0x00	; 0
    441a:	90 81       	ld	r25, Z
    441c:	8f 71       	andi	r24, 0x1F	; 31
    441e:	90 7e       	andi	r25, 0xE0	; 224
    4420:	89 2b       	or	r24, r25
    4422:	80 83       	st	Z, r24
    4424:	ea e7       	ldi	r30, 0x7A	; 122
    4426:	f0 e0       	ldi	r31, 0x00	; 0
    4428:	80 81       	ld	r24, Z
    442a:	80 64       	ori	r24, 0x40	; 64
    442c:	80 83       	st	Z, r24
    442e:	80 81       	ld	r24, Z
    4430:	86 fd       	sbrc	r24, 6
    4432:	fd cf       	rjmp	.-6      	; 0x442e <_Z8ADC_Readh+0x18>
    4434:	80 91 78 00 	lds	r24, 0x0078
    4438:	90 91 79 00 	lds	r25, 0x0079
    443c:	08 95       	ret

0000443e <_Z14Batteriestatusv>:

#ifndef BATMIN
#define BATMIN 3.0
#endif

int8_t Batteriestatus(){
    443e:	cf 92       	push	r12
    4440:	df 92       	push	r13
    4442:	ef 92       	push	r14
    4444:	ff 92       	push	r15
	uint16_t ADCwert=ADC_Read(0);
    4446:	80 e0       	ldi	r24, 0x00	; 0
    4448:	e6 df       	rcall	.-52     	; 0x4416 <_Z8ADC_Readh>
	batterie = (ADCwert/1023.0)*3.29*SPANNUNGSTEILER;
    444a:	bc 01       	movw	r22, r24
    444c:	80 e0       	ldi	r24, 0x00	; 0
    444e:	90 e0       	ldi	r25, 0x00	; 0
    4450:	0e 94 9a 3b 	call	0x7734	; 0x7734 <__floatunsisf>
    4454:	20 e0       	ldi	r18, 0x00	; 0
    4456:	30 ec       	ldi	r19, 0xC0	; 192
    4458:	4f e7       	ldi	r20, 0x7F	; 127
    445a:	54 e4       	ldi	r21, 0x44	; 68
    445c:	0e 94 01 3b 	call	0x7602	; 0x7602 <__divsf3>
    4460:	2c e5       	ldi	r18, 0x5C	; 92
    4462:	3f e8       	ldi	r19, 0x8F	; 143
    4464:	42 e5       	ldi	r20, 0x52	; 82
    4466:	50 e4       	ldi	r21, 0x40	; 64
    4468:	0e 94 b5 3c 	call	0x796a	; 0x796a <__mulsf3>
    446c:	2d e0       	ldi	r18, 0x0D	; 13
    446e:	31 e7       	ldi	r19, 0x71	; 113
    4470:	40 e0       	ldi	r20, 0x00	; 0
    4472:	50 e4       	ldi	r21, 0x40	; 64
    4474:	0e 94 b5 3c 	call	0x796a	; 0x796a <__mulsf3>
    4478:	60 93 65 08 	sts	0x0865, r22
    447c:	70 93 66 08 	sts	0x0866, r23
    4480:	80 93 67 08 	sts	0x0867, r24
    4484:	90 93 68 08 	sts	0x0868, r25
	float stat = ((batterie-BATMIN)/(4.2-BATMIN)*100);
    4488:	26 e6       	ldi	r18, 0x66	; 102
    448a:	36 e6       	ldi	r19, 0x66	; 102
    448c:	46 e6       	ldi	r20, 0x66	; 102
    448e:	50 e4       	ldi	r21, 0x40	; 64
    4490:	0e 94 99 3a 	call	0x7532	; 0x7532 <__subsf3>
    4494:	28 e9       	ldi	r18, 0x98	; 152
    4496:	39 e9       	ldi	r19, 0x99	; 153
    4498:	49 e1       	ldi	r20, 0x19	; 25
    449a:	5f e3       	ldi	r21, 0x3F	; 63
    449c:	0e 94 01 3b 	call	0x7602	; 0x7602 <__divsf3>
    44a0:	20 e0       	ldi	r18, 0x00	; 0
    44a2:	30 e0       	ldi	r19, 0x00	; 0
    44a4:	48 ec       	ldi	r20, 0xC8	; 200
    44a6:	52 e4       	ldi	r21, 0x42	; 66
    44a8:	0e 94 b5 3c 	call	0x796a	; 0x796a <__mulsf3>
    44ac:	6b 01       	movw	r12, r22
    44ae:	7c 01       	movw	r14, r24
	uint8_t temp =(uint8_t) (stat*10);
    44b0:	20 e0       	ldi	r18, 0x00	; 0
    44b2:	30 e0       	ldi	r19, 0x00	; 0
    44b4:	40 e2       	ldi	r20, 0x20	; 32
    44b6:	51 e4       	ldi	r21, 0x41	; 65
    44b8:	0e 94 b5 3c 	call	0x796a	; 0x796a <__mulsf3>
    44bc:	0e 94 6e 3b 	call	0x76dc	; 0x76dc <__fixunssfsi>
	if (temp%10>=5)
    44c0:	8d ec       	ldi	r24, 0xCD	; 205
    44c2:	68 9f       	mul	r22, r24
    44c4:	81 2d       	mov	r24, r1
    44c6:	11 24       	eor	r1, r1
    44c8:	86 95       	lsr	r24
    44ca:	86 95       	lsr	r24
    44cc:	86 95       	lsr	r24
    44ce:	88 0f       	add	r24, r24
    44d0:	28 2f       	mov	r18, r24
    44d2:	22 0f       	add	r18, r18
    44d4:	22 0f       	add	r18, r18
    44d6:	82 0f       	add	r24, r18
    44d8:	96 2f       	mov	r25, r22
    44da:	98 1b       	sub	r25, r24
    44dc:	95 30       	cpi	r25, 0x05	; 5
    44de:	70 f0       	brcs	.+28     	; 0x44fc <_Z14Batteriestatusv+0xbe>
	{
		stat = (uint8_t)stat+1;
    44e0:	c7 01       	movw	r24, r14
    44e2:	b6 01       	movw	r22, r12
    44e4:	0e 94 6e 3b 	call	0x76dc	; 0x76dc <__fixunssfsi>
    44e8:	70 e0       	ldi	r23, 0x00	; 0
    44ea:	6f 5f       	subi	r22, 0xFF	; 255
    44ec:	7f 4f       	sbci	r23, 0xFF	; 255
    44ee:	07 2e       	mov	r0, r23
    44f0:	00 0c       	add	r0, r0
    44f2:	88 0b       	sbc	r24, r24
    44f4:	99 0b       	sbc	r25, r25
    44f6:	0e 94 9c 3b 	call	0x7738	; 0x7738 <__floatsisf>
    44fa:	09 c0       	rjmp	.+18     	; 0x450e <_Z14Batteriestatusv+0xd0>
	}
	else
	{
		stat = (uint8_t)stat;
    44fc:	c7 01       	movw	r24, r14
    44fe:	b6 01       	movw	r22, r12
    4500:	0e 94 6e 3b 	call	0x76dc	; 0x76dc <__fixunssfsi>
    4504:	70 e0       	ldi	r23, 0x00	; 0
    4506:	80 e0       	ldi	r24, 0x00	; 0
    4508:	90 e0       	ldi	r25, 0x00	; 0
    450a:	0e 94 9a 3b 	call	0x7734	; 0x7734 <__floatunsisf>
	}
	return stat;
    450e:	0e 94 69 3b 	call	0x76d2	; 0x76d2 <__fixsfsi>
    4512:	86 2f       	mov	r24, r22
}
    4514:	ff 90       	pop	r15
    4516:	ef 90       	pop	r14
    4518:	df 90       	pop	r13
    451a:	cf 90       	pop	r12
    451c:	08 95       	ret

0000451e <_ZN5menue4drawEv>:
	
	uint8_t tastendruck(uint8_t *tast){
		return 0;
	}

	void draw(){
    451e:	cf 92       	push	r12
    4520:	df 92       	push	r13
    4522:	ef 92       	push	r14
    4524:	ff 92       	push	r15
    4526:	0f 93       	push	r16
    4528:	1f 93       	push	r17
    452a:	cf 93       	push	r28
    452c:	df 93       	push	r29
    452e:	ec 01       	movw	r28, r24
		return 0;
	}
	
	//drawfunktion
	virtual void draw(){
		oled->clearFrame();
    4530:	8f 89       	ldd	r24, Y+23	; 0x17
    4532:	98 8d       	ldd	r25, Y+24	; 0x18
    4534:	0e 94 b1 07 	call	0xf62	; 0xf62 <_ZN7Display10clearFrameEv>
    4538:	10 e0       	ldi	r17, 0x00	; 0
    453a:	e1 2c       	mov	r14, r1
    453c:	f1 2c       	mov	r15, r1
	}
	
	//draw header and overload it
	void header(){
		for(uint8_t i=0;i<8;i++){
			oled->draw_ASCI(rtc->msg_uhr[i],i*charsize,0);
    453e:	e9 8d       	ldd	r30, Y+25	; 0x19
    4540:	fa 8d       	ldd	r31, Y+26	; 0x1a
    4542:	ee 0d       	add	r30, r14
    4544:	ff 1d       	adc	r31, r15
    4546:	20 e0       	ldi	r18, 0x00	; 0
    4548:	41 2f       	mov	r20, r17
    454a:	60 81       	ld	r22, Z
    454c:	8f 89       	ldd	r24, Y+23	; 0x17
    454e:	98 8d       	ldd	r25, Y+24	; 0x18
    4550:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <_ZN7Display9draw_ASCIEhhh>
    4554:	8f ef       	ldi	r24, 0xFF	; 255
    4556:	e8 1a       	sub	r14, r24
    4558:	f8 0a       	sbc	r15, r24
    455a:	1a 5f       	subi	r17, 0xFA	; 250
		return &name[0];
	}
	
	//draw header and overload it
	void header(){
		for(uint8_t i=0;i<8;i++){
    455c:	10 33       	cpi	r17, 0x30	; 48
    455e:	79 f7       	brne	.-34     	; 0x453e <_ZN5menue4drawEv+0x20>
			oled->draw_ASCI(rtc->msg_uhr[i],i*charsize,0);
		}
		buffersize=sprintf(buffer,"Bat: %i%%",Batteriestatus());
    4560:	6e df       	rcall	.-292    	; 0x443e <_Z14Batteriestatusv>
    4562:	7e 01       	movw	r14, r28
    4564:	92 e0       	ldi	r25, 0x02	; 2
    4566:	e9 0e       	add	r14, r25
    4568:	f1 1c       	adc	r15, r1
    456a:	28 2f       	mov	r18, r24
    456c:	08 2e       	mov	r0, r24
    456e:	00 0c       	add	r0, r0
    4570:	33 0b       	sbc	r19, r19
    4572:	3f 93       	push	r19
    4574:	8f 93       	push	r24
    4576:	82 ec       	ldi	r24, 0xC2	; 194
    4578:	91 e0       	ldi	r25, 0x01	; 1
    457a:	9f 93       	push	r25
    457c:	8f 93       	push	r24
    457e:	ff 92       	push	r15
    4580:	ef 92       	push	r14
    4582:	0e 94 87 44 	call	0x890e	; 0x890e <sprintf>
    4586:	8e 8b       	std	Y+22, r24	; 0x16
		for(uint8_t i=((SSD1306_WIDTH/charsize)-buffersize);i<(SSD1306_WIDTH/charsize);i++){
    4588:	15 e1       	ldi	r17, 0x15	; 21
    458a:	18 1b       	sub	r17, r24
    458c:	0f 90       	pop	r0
    458e:	0f 90       	pop	r0
    4590:	0f 90       	pop	r0
    4592:	0f 90       	pop	r0
    4594:	0f 90       	pop	r0
    4596:	0f 90       	pop	r0
    4598:	15 31       	cpi	r17, 0x15	; 21
    459a:	08 f0       	brcs	.+2      	; 0x459e <_ZN5menue4drawEv+0x80>
    459c:	bf c0       	rjmp	.+382    	; 0x471c <_ZN5menue4drawEv+0x1fe>
    459e:	01 2f       	mov	r16, r17
    45a0:	00 0f       	add	r16, r16
    45a2:	01 0f       	add	r16, r17
    45a4:	00 0f       	add	r16, r16
			oled->draw_ASCI(buffer[i-((SSD1306_WIDTH/charsize)-buffersize)],i*charsize,0);
    45a6:	8e 89       	ldd	r24, Y+22	; 0x16
    45a8:	fe 01       	movw	r30, r28
    45aa:	e1 0f       	add	r30, r17
    45ac:	f1 1d       	adc	r31, r1
    45ae:	e8 0f       	add	r30, r24
    45b0:	f1 1d       	adc	r31, r1
    45b2:	73 97       	sbiw	r30, 0x13	; 19
    45b4:	20 e0       	ldi	r18, 0x00	; 0
    45b6:	40 2f       	mov	r20, r16
    45b8:	60 81       	ld	r22, Z
    45ba:	8f 89       	ldd	r24, Y+23	; 0x17
    45bc:	98 8d       	ldd	r25, Y+24	; 0x18
    45be:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <_ZN7Display9draw_ASCIEhhh>
	void header(){
		for(uint8_t i=0;i<8;i++){
			oled->draw_ASCI(rtc->msg_uhr[i],i*charsize,0);
		}
		buffersize=sprintf(buffer,"Bat: %i%%",Batteriestatus());
		for(uint8_t i=((SSD1306_WIDTH/charsize)-buffersize);i<(SSD1306_WIDTH/charsize);i++){
    45c2:	1f 5f       	subi	r17, 0xFF	; 255
    45c4:	0a 5f       	subi	r16, 0xFA	; 250
    45c6:	15 31       	cpi	r17, 0x15	; 21
    45c8:	71 f7       	brne	.-36     	; 0x45a6 <_ZN5menue4drawEv+0x88>
    45ca:	a8 c0       	rjmp	.+336    	; 0x471c <_ZN5menue4drawEv+0x1fe>
	}
	
	//draw bottom and overload it
	void bottom(){
		for(uint8_t i=0;i<8;i++){
			oled->draw_ASCI(rtc->msg_dat[i],i*charsize+(SSD1306_WIDTH-bitsderrtc*charsize),7*charhighte);
    45cc:	e9 8d       	ldd	r30, Y+25	; 0x19
    45ce:	fa 8d       	ldd	r31, Y+26	; 0x1a
    45d0:	ec 0d       	add	r30, r12
    45d2:	fd 1d       	adc	r31, r13
    45d4:	28 e3       	ldi	r18, 0x38	; 56
    45d6:	41 2f       	mov	r20, r17
    45d8:	60 85       	ldd	r22, Z+8	; 0x08
    45da:	8f 89       	ldd	r24, Y+23	; 0x17
    45dc:	98 8d       	ldd	r25, Y+24	; 0x18
    45de:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <_ZN7Display9draw_ASCIEhhh>
    45e2:	8f ef       	ldi	r24, 0xFF	; 255
    45e4:	c8 1a       	sub	r12, r24
    45e6:	d8 0a       	sbc	r13, r24
    45e8:	1a 5f       	subi	r17, 0xFA	; 250
		}
	}
	
	//draw bottom and overload it
	void bottom(){
		for(uint8_t i=0;i<8;i++){
    45ea:	10 38       	cpi	r17, 0x80	; 128
    45ec:	79 f7       	brne	.-34     	; 0x45cc <_ZN5menue4drawEv+0xae>
	void draw(){
		monitor::draw();
		header();
		bottom();
		//menueeintrag zeichnen
		buffersize=sprintf(buffer,"Uhr");
    45ee:	85 e5       	ldi	r24, 0x55	; 85
    45f0:	98 e6       	ldi	r25, 0x68	; 104
    45f2:	a2 e7       	ldi	r26, 0x72	; 114
    45f4:	b0 e0       	ldi	r27, 0x00	; 0
    45f6:	8a 83       	std	Y+2, r24	; 0x02
    45f8:	9b 83       	std	Y+3, r25	; 0x03
    45fa:	ac 83       	std	Y+4, r26	; 0x04
    45fc:	bd 83       	std	Y+5, r27	; 0x05
    45fe:	83 e0       	ldi	r24, 0x03	; 3
    4600:	8e 8b       	std	Y+22, r24	; 0x16
    4602:	0c e0       	ldi	r16, 0x0C	; 12
    4604:	10 e0       	ldi	r17, 0x00	; 0
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+2*charsize,2*charhighte);}
    4606:	fe 01       	movw	r30, r28
    4608:	e1 0f       	add	r30, r17
    460a:	f1 1d       	adc	r31, r1
    460c:	20 e1       	ldi	r18, 0x10	; 16
    460e:	40 2f       	mov	r20, r16
    4610:	62 81       	ldd	r22, Z+2	; 0x02
    4612:	8f 89       	ldd	r24, Y+23	; 0x17
    4614:	98 8d       	ldd	r25, Y+24	; 0x18
    4616:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <_ZN7Display9draw_ASCIEhhh>
    461a:	1f 5f       	subi	r17, 0xFF	; 255
    461c:	0a 5f       	subi	r16, 0xFA	; 250
    461e:	8e 89       	ldd	r24, Y+22	; 0x16
    4620:	18 17       	cp	r17, r24
    4622:	88 f3       	brcs	.-30     	; 0x4606 <_ZN5menue4drawEv+0xe8>
		buffersize=sprintf(buffer,"Tacho");
    4624:	86 e0       	ldi	r24, 0x06	; 6
    4626:	ec ec       	ldi	r30, 0xCC	; 204
    4628:	f1 e0       	ldi	r31, 0x01	; 1
    462a:	d7 01       	movw	r26, r14
    462c:	01 90       	ld	r0, Z+
    462e:	0d 92       	st	X+, r0
    4630:	8a 95       	dec	r24
    4632:	e1 f7       	brne	.-8      	; 0x462c <_ZN5menue4drawEv+0x10e>
    4634:	85 e0       	ldi	r24, 0x05	; 5
    4636:	8e 8b       	std	Y+22, r24	; 0x16
    4638:	0c e0       	ldi	r16, 0x0C	; 12
    463a:	10 e0       	ldi	r17, 0x00	; 0
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+2*charsize,3*charhighte);}
    463c:	fe 01       	movw	r30, r28
    463e:	e1 0f       	add	r30, r17
    4640:	f1 1d       	adc	r31, r1
    4642:	28 e1       	ldi	r18, 0x18	; 24
    4644:	40 2f       	mov	r20, r16
    4646:	62 81       	ldd	r22, Z+2	; 0x02
    4648:	8f 89       	ldd	r24, Y+23	; 0x17
    464a:	98 8d       	ldd	r25, Y+24	; 0x18
    464c:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <_ZN7Display9draw_ASCIEhhh>
    4650:	1f 5f       	subi	r17, 0xFF	; 255
    4652:	0a 5f       	subi	r16, 0xFA	; 250
    4654:	8e 89       	ldd	r24, Y+22	; 0x16
    4656:	18 17       	cp	r17, r24
    4658:	88 f3       	brcs	.-30     	; 0x463c <_ZN5menue4drawEv+0x11e>
		buffersize=sprintf(buffer,"Wandern");
    465a:	88 e0       	ldi	r24, 0x08	; 8
    465c:	e2 ed       	ldi	r30, 0xD2	; 210
    465e:	f1 e0       	ldi	r31, 0x01	; 1
    4660:	d7 01       	movw	r26, r14
    4662:	01 90       	ld	r0, Z+
    4664:	0d 92       	st	X+, r0
    4666:	8a 95       	dec	r24
    4668:	e1 f7       	brne	.-8      	; 0x4662 <_ZN5menue4drawEv+0x144>
    466a:	87 e0       	ldi	r24, 0x07	; 7
    466c:	8e 8b       	std	Y+22, r24	; 0x16
    466e:	0c e0       	ldi	r16, 0x0C	; 12
    4670:	10 e0       	ldi	r17, 0x00	; 0
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+2*charsize,4*charhighte);}
    4672:	fe 01       	movw	r30, r28
    4674:	e1 0f       	add	r30, r17
    4676:	f1 1d       	adc	r31, r1
    4678:	20 e2       	ldi	r18, 0x20	; 32
    467a:	40 2f       	mov	r20, r16
    467c:	62 81       	ldd	r22, Z+2	; 0x02
    467e:	8f 89       	ldd	r24, Y+23	; 0x17
    4680:	98 8d       	ldd	r25, Y+24	; 0x18
    4682:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <_ZN7Display9draw_ASCIEhhh>
    4686:	1f 5f       	subi	r17, 0xFF	; 255
    4688:	0a 5f       	subi	r16, 0xFA	; 250
    468a:	8e 89       	ldd	r24, Y+22	; 0x16
    468c:	18 17       	cp	r17, r24
    468e:	88 f3       	brcs	.-30     	; 0x4672 <_ZN5menue4drawEv+0x154>
		buffersize=sprintf(buffer,"Einstellungen");
    4690:	8e e0       	ldi	r24, 0x0E	; 14
    4692:	ea ed       	ldi	r30, 0xDA	; 218
    4694:	f1 e0       	ldi	r31, 0x01	; 1
    4696:	d7 01       	movw	r26, r14
    4698:	01 90       	ld	r0, Z+
    469a:	0d 92       	st	X+, r0
    469c:	8a 95       	dec	r24
    469e:	e1 f7       	brne	.-8      	; 0x4698 <_ZN5menue4drawEv+0x17a>
    46a0:	8d e0       	ldi	r24, 0x0D	; 13
    46a2:	8e 8b       	std	Y+22, r24	; 0x16
    46a4:	0c e0       	ldi	r16, 0x0C	; 12
    46a6:	10 e0       	ldi	r17, 0x00	; 0
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+2*charsize,5*charhighte);}
    46a8:	fe 01       	movw	r30, r28
    46aa:	e1 0f       	add	r30, r17
    46ac:	f1 1d       	adc	r31, r1
    46ae:	28 e2       	ldi	r18, 0x28	; 40
    46b0:	40 2f       	mov	r20, r16
    46b2:	62 81       	ldd	r22, Z+2	; 0x02
    46b4:	8f 89       	ldd	r24, Y+23	; 0x17
    46b6:	98 8d       	ldd	r25, Y+24	; 0x18
    46b8:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <_ZN7Display9draw_ASCIEhhh>
    46bc:	1f 5f       	subi	r17, 0xFF	; 255
    46be:	0a 5f       	subi	r16, 0xFA	; 250
    46c0:	8e 89       	ldd	r24, Y+22	; 0x16
    46c2:	18 17       	cp	r17, r24
    46c4:	88 f3       	brcs	.-30     	; 0x46a8 <_ZN5menue4drawEv+0x18a>
		buffersize=sprintf(buffer,"Display aus");
    46c6:	8c e0       	ldi	r24, 0x0C	; 12
    46c8:	e8 ee       	ldi	r30, 0xE8	; 232
    46ca:	f1 e0       	ldi	r31, 0x01	; 1
    46cc:	d7 01       	movw	r26, r14
    46ce:	01 90       	ld	r0, Z+
    46d0:	0d 92       	st	X+, r0
    46d2:	8a 95       	dec	r24
    46d4:	e1 f7       	brne	.-8      	; 0x46ce <_ZN5menue4drawEv+0x1b0>
    46d6:	8b e0       	ldi	r24, 0x0B	; 11
    46d8:	8e 8b       	std	Y+22, r24	; 0x16
    46da:	0c e0       	ldi	r16, 0x0C	; 12
    46dc:	10 e0       	ldi	r17, 0x00	; 0
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+2*charsize,6*charhighte);}
    46de:	fe 01       	movw	r30, r28
    46e0:	e1 0f       	add	r30, r17
    46e2:	f1 1d       	adc	r31, r1
    46e4:	20 e3       	ldi	r18, 0x30	; 48
    46e6:	40 2f       	mov	r20, r16
    46e8:	62 81       	ldd	r22, Z+2	; 0x02
    46ea:	8f 89       	ldd	r24, Y+23	; 0x17
    46ec:	98 8d       	ldd	r25, Y+24	; 0x18
    46ee:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <_ZN7Display9draw_ASCIEhhh>
    46f2:	1f 5f       	subi	r17, 0xFF	; 255
    46f4:	0a 5f       	subi	r16, 0xFA	; 250
    46f6:	8e 89       	ldd	r24, Y+22	; 0x16
    46f8:	18 17       	cp	r17, r24
    46fa:	88 f3       	brcs	.-30     	; 0x46de <_ZN5menue4drawEv+0x1c0>
		oled->draw_ASCI('>',0*charsize,(posy+2)*charhighte);
    46fc:	2d a1       	ldd	r18, Y+37	; 0x25
    46fe:	22 0f       	add	r18, r18
    4700:	22 0f       	add	r18, r18
    4702:	22 0f       	add	r18, r18
    4704:	20 5f       	subi	r18, 0xF0	; 240
    4706:	40 e0       	ldi	r20, 0x00	; 0
    4708:	6e e3       	ldi	r22, 0x3E	; 62
    470a:	8f 89       	ldd	r24, Y+23	; 0x17
    470c:	98 8d       	ldd	r25, Y+24	; 0x18
    470e:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <_ZN7Display9draw_ASCIEhhh>
		oled->clearFrame();
	}

	//send the frame to the display
	void send(){
		oled->sendFrame();	
    4712:	8f 89       	ldd	r24, Y+23	; 0x17
    4714:	98 8d       	ldd	r25, Y+24	; 0x18
    4716:	0e 94 31 08 	call	0x1062	; 0x1062 <_ZN7Display9sendFrameEv>
    471a:	04 c0       	rjmp	.+8      	; 0x4724 <_ZN5menue4drawEv+0x206>
		return 0;
	}
	
	//drawfunktion
	virtual void draw(){
		oled->clearFrame();
    471c:	10 e5       	ldi	r17, 0x50	; 80
    471e:	c1 2c       	mov	r12, r1
    4720:	d1 2c       	mov	r13, r1
    4722:	54 cf       	rjmp	.-344    	; 0x45cc <_ZN5menue4drawEv+0xae>
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+2*charsize,5*charhighte);}
		buffersize=sprintf(buffer,"Display aus");
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+2*charsize,6*charhighte);}
		oled->draw_ASCI('>',0*charsize,(posy+2)*charhighte);
		send();
	}
    4724:	df 91       	pop	r29
    4726:	cf 91       	pop	r28
    4728:	1f 91       	pop	r17
    472a:	0f 91       	pop	r16
    472c:	ff 90       	pop	r15
    472e:	ef 90       	pop	r14
    4730:	df 90       	pop	r13
    4732:	cf 90       	pop	r12
    4734:	08 95       	ret

00004736 <_ZN5tacho4drawEv>:
		}
		return 0;
	}

	//Anzeige schalten
	void draw(){
    4736:	af 92       	push	r10
    4738:	bf 92       	push	r11
    473a:	cf 92       	push	r12
    473c:	df 92       	push	r13
    473e:	ef 92       	push	r14
    4740:	ff 92       	push	r15
    4742:	0f 93       	push	r16
    4744:	1f 93       	push	r17
    4746:	cf 93       	push	r28
    4748:	df 93       	push	r29
    474a:	ec 01       	movw	r28, r24
		return 0;
	}
	
	//drawfunktion
	virtual void draw(){
		oled->clearFrame();
    474c:	8f 89       	ldd	r24, Y+23	; 0x17
    474e:	98 8d       	ldd	r25, Y+24	; 0x18
    4750:	0e 94 b1 07 	call	0xf62	; 0xf62 <_ZN7Display10clearFrameEv>
				for(uint8_t i=((SSD1306_WIDTH/charsize)-buffersize);i<(SSD1306_WIDTH/charsize);i++){
					oled->draw_ASCI(buffer[i-((SSD1306_WIDTH/charsize)-buffersize)],i*charsize,0);
				}
				break;
			case 2:	//standard Header fuer fast alle Pages
				buffersize=sprintf(buffer,"Bat.: %i%%",Batteriestatus());
    4754:	74 de       	rcall	.-792    	; 0x443e <_Z14Batteriestatusv>
    4756:	5e 01       	movw	r10, r28
    4758:	22 e0       	ldi	r18, 0x02	; 2
    475a:	a2 0e       	add	r10, r18
    475c:	b1 1c       	adc	r11, r1
    475e:	28 2f       	mov	r18, r24
    4760:	08 2e       	mov	r0, r24
    4762:	00 0c       	add	r0, r0
    4764:	33 0b       	sbc	r19, r19
    4766:	3f 93       	push	r19
    4768:	8f 93       	push	r24
    476a:	84 ef       	ldi	r24, 0xF4	; 244
    476c:	91 e0       	ldi	r25, 0x01	; 1
    476e:	9f 93       	push	r25
    4770:	8f 93       	push	r24
    4772:	bf 92       	push	r11
    4774:	af 92       	push	r10
    4776:	0e 94 87 44 	call	0x890e	; 0x890e <sprintf>
    477a:	8e 8b       	std	Y+22, r24	; 0x16
				for(uint8_t i=((SSD1306_WIDTH/charsize)-buffersize);i<(SSD1306_WIDTH/charsize);i++){
    477c:	95 e1       	ldi	r25, 0x15	; 21
    477e:	09 2f       	mov	r16, r25
    4780:	08 1b       	sub	r16, r24
    4782:	0f 90       	pop	r0
    4784:	0f 90       	pop	r0
    4786:	0f 90       	pop	r0
    4788:	0f 90       	pop	r0
    478a:	0f 90       	pop	r0
    478c:	0f 90       	pop	r0
    478e:	05 31       	cpi	r16, 0x15	; 21
    4790:	08 f0       	brcs	.+2      	; 0x4794 <_ZN5tacho4drawEv+0x5e>
    4792:	d4 c1       	rjmp	.+936    	; 0x4b3c <_ZN5tacho4drawEv+0x406>
    4794:	e0 2e       	mov	r14, r16
    4796:	ee 0c       	add	r14, r14
    4798:	e0 0e       	add	r14, r16
    479a:	1e 2d       	mov	r17, r14
    479c:	11 0f       	add	r17, r17
					oled->draw_ASCI(buffer[i-((SSD1306_WIDTH/charsize)-buffersize)],i*charsize,0);
    479e:	8e 89       	ldd	r24, Y+22	; 0x16
    47a0:	fe 01       	movw	r30, r28
    47a2:	e0 0f       	add	r30, r16
    47a4:	f1 1d       	adc	r31, r1
    47a6:	e8 0f       	add	r30, r24
    47a8:	f1 1d       	adc	r31, r1
    47aa:	73 97       	sbiw	r30, 0x13	; 19
    47ac:	20 e0       	ldi	r18, 0x00	; 0
    47ae:	41 2f       	mov	r20, r17
    47b0:	60 81       	ld	r22, Z
    47b2:	8f 89       	ldd	r24, Y+23	; 0x17
    47b4:	98 8d       	ldd	r25, Y+24	; 0x18
    47b6:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <_ZN7Display9draw_ASCIEhhh>
					oled->draw_ASCI(buffer[i-((SSD1306_WIDTH/charsize)-buffersize)],i*charsize,0);
				}
				break;
			case 2:	//standard Header fuer fast alle Pages
				buffersize=sprintf(buffer,"Bat.: %i%%",Batteriestatus());
				for(uint8_t i=((SSD1306_WIDTH/charsize)-buffersize);i<(SSD1306_WIDTH/charsize);i++){
    47ba:	0f 5f       	subi	r16, 0xFF	; 255
    47bc:	1a 5f       	subi	r17, 0xFA	; 250
    47be:	05 31       	cpi	r16, 0x15	; 21
    47c0:	71 f7       	brne	.-36     	; 0x479e <_ZN5tacho4drawEv+0x68>
    47c2:	bc c1       	rjmp	.+888    	; 0x4b3c <_ZN5tacho4drawEv+0x406>
	}
	
	//draw bottom and overload it
	void bottom(){
		for(uint8_t i=0;i<8;i++){
			oled->draw_ASCI(rtc->msg_dat[i],i*charsize+(SSD1306_WIDTH-bitsderrtc*charsize),7*charhighte);
    47c4:	e9 8d       	ldd	r30, Y+25	; 0x19
    47c6:	fa 8d       	ldd	r31, Y+26	; 0x1a
    47c8:	ec 0d       	add	r30, r12
    47ca:	fd 1d       	adc	r31, r13
    47cc:	28 e3       	ldi	r18, 0x38	; 56
    47ce:	41 2f       	mov	r20, r17
    47d0:	60 85       	ldd	r22, Z+8	; 0x08
    47d2:	8f 89       	ldd	r24, Y+23	; 0x17
    47d4:	98 8d       	ldd	r25, Y+24	; 0x18
    47d6:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <_ZN7Display9draw_ASCIEhhh>
    47da:	3f ef       	ldi	r19, 0xFF	; 255
    47dc:	c3 1a       	sub	r12, r19
    47de:	d3 0a       	sbc	r13, r19
    47e0:	1a 5f       	subi	r17, 0xFA	; 250
		}
	}
	
	//draw bottom and overload it
	void bottom(){
		for(uint8_t i=0;i<8;i++){
    47e2:	10 38       	cpi	r17, 0x80	; 128
    47e4:	79 f7       	brne	.-34     	; 0x47c4 <_ZN5tacho4drawEv+0x8e>
		monitor::draw();
		header(2);
		bottom();

		//Rahmen zeichnen
		oled->drawHLine(0,SSD1306_HEIGHT-9,SSD1306_WIDTH);
    47e6:	20 e8       	ldi	r18, 0x80	; 128
    47e8:	47 e3       	ldi	r20, 0x37	; 55
    47ea:	60 e0       	ldi	r22, 0x00	; 0
    47ec:	8f 89       	ldd	r24, Y+23	; 0x17
    47ee:	98 8d       	ldd	r25, Y+24	; 0x18
    47f0:	0e 94 ba 08 	call	0x1174	; 0x1174 <_ZN7Display9drawHLineEhhh>
		oled->drawHLine(0,numbersmalhight-1,SSD1306_WIDTH/2+5);
    47f4:	25 e4       	ldi	r18, 0x45	; 69
    47f6:	4f e0       	ldi	r20, 0x0F	; 15
    47f8:	60 e0       	ldi	r22, 0x00	; 0
    47fa:	8f 89       	ldd	r24, Y+23	; 0x17
    47fc:	98 8d       	ldd	r25, Y+24	; 0x18
    47fe:	0e 94 ba 08 	call	0x1174	; 0x1174 <_ZN7Display9drawHLineEhhh>
		oled->drawHLine(SSD1306_WIDTH/2+5,charhighte-1,SSD1306_WIDTH/2-5);
    4802:	2b e3       	ldi	r18, 0x3B	; 59
    4804:	47 e0       	ldi	r20, 0x07	; 7
    4806:	65 e4       	ldi	r22, 0x45	; 69
    4808:	8f 89       	ldd	r24, Y+23	; 0x17
    480a:	98 8d       	ldd	r25, Y+24	; 0x18
    480c:	0e 94 ba 08 	call	0x1174	; 0x1174 <_ZN7Display9drawHLineEhhh>
		oled->drawVLine(SSD1306_WIDTH/2+5,0,numbersmalhight);
    4810:	20 e1       	ldi	r18, 0x10	; 16
    4812:	40 e0       	ldi	r20, 0x00	; 0
    4814:	65 e4       	ldi	r22, 0x45	; 69
    4816:	8f 89       	ldd	r24, Y+23	; 0x17
    4818:	98 8d       	ldd	r25, Y+24	; 0x18
    481a:	0e 94 a0 08 	call	0x1140	; 0x1140 <_ZN7Display9drawVLineEhhh>
		oled->drawHLine(SSD1306_WIDTH-4*numbersmalsize-1,5*charhighte-1,4*numbersmalsize+1);
    481e:	21 e4       	ldi	r18, 0x41	; 65
    4820:	47 e2       	ldi	r20, 0x27	; 39
    4822:	6f e3       	ldi	r22, 0x3F	; 63
    4824:	8f 89       	ldd	r24, Y+23	; 0x17
    4826:	98 8d       	ldd	r25, Y+24	; 0x18
    4828:	0e 94 ba 08 	call	0x1174	; 0x1174 <_ZN7Display9drawHLineEhhh>
		oled->drawVLine(SSD1306_WIDTH-4*numbersmalsize-1,numbersmalhight,SSD1306_HEIGHT-numbersmalhight);
    482c:	20 e3       	ldi	r18, 0x30	; 48
    482e:	40 e1       	ldi	r20, 0x10	; 16
    4830:	6f e3       	ldi	r22, 0x3F	; 63
    4832:	8f 89       	ldd	r24, Y+23	; 0x17
    4834:	98 8d       	ldd	r25, Y+24	; 0x18
    4836:	0e 94 a0 08 	call	0x1140	; 0x1140 <_ZN7Display9drawVLineEhhh>
		oled->drawHLine(SSD1306_WIDTH-4*numbersmalsize-1,3*charhighte,4*numbersmalsize+1);
    483a:	21 e4       	ldi	r18, 0x41	; 65
    483c:	48 e1       	ldi	r20, 0x18	; 24
    483e:	6f e3       	ldi	r22, 0x3F	; 63
    4840:	8f 89       	ldd	r24, Y+23	; 0x17
    4842:	98 8d       	ldd	r25, Y+24	; 0x18
    4844:	0e 94 ba 08 	call	0x1174	; 0x1174 <_ZN7Display9drawHLineEhhh>

		//lesbare Uhr
		oled->draw_number16x16(rtc->msg_uhr[0]-'0',0*numbersmalsize,0*charhighte);
    4848:	e9 8d       	ldd	r30, Y+25	; 0x19
    484a:	fa 8d       	ldd	r31, Y+26	; 0x1a
    484c:	60 81       	ld	r22, Z
    484e:	60 53       	subi	r22, 0x30	; 48
    4850:	20 e0       	ldi	r18, 0x00	; 0
    4852:	40 e0       	ldi	r20, 0x00	; 0
    4854:	8f 89       	ldd	r24, Y+23	; 0x17
    4856:	98 8d       	ldd	r25, Y+24	; 0x18
    4858:	0e 94 1e 09 	call	0x123c	; 0x123c <_ZN7Display16draw_number16x16Ehhh>
		oled->draw_number16x16(rtc->msg_uhr[1]-'0',1*numbersmalsize,0*charhighte);
    485c:	e9 8d       	ldd	r30, Y+25	; 0x19
    485e:	fa 8d       	ldd	r31, Y+26	; 0x1a
    4860:	61 81       	ldd	r22, Z+1	; 0x01
    4862:	60 53       	subi	r22, 0x30	; 48
    4864:	20 e0       	ldi	r18, 0x00	; 0
    4866:	40 e1       	ldi	r20, 0x10	; 16
    4868:	8f 89       	ldd	r24, Y+23	; 0x17
    486a:	98 8d       	ldd	r25, Y+24	; 0x18
    486c:	0e 94 1e 09 	call	0x123c	; 0x123c <_ZN7Display16draw_number16x16Ehhh>
		oled->draw_number16x16(rtc->msg_uhr[3]-'0',2.33*numbersmalsize,0*charhighte);
    4870:	e9 8d       	ldd	r30, Y+25	; 0x19
    4872:	fa 8d       	ldd	r31, Y+26	; 0x1a
    4874:	63 81       	ldd	r22, Z+3	; 0x03
    4876:	60 53       	subi	r22, 0x30	; 48
    4878:	20 e0       	ldi	r18, 0x00	; 0
    487a:	45 e2       	ldi	r20, 0x25	; 37
    487c:	8f 89       	ldd	r24, Y+23	; 0x17
    487e:	98 8d       	ldd	r25, Y+24	; 0x18
    4880:	0e 94 1e 09 	call	0x123c	; 0x123c <_ZN7Display16draw_number16x16Ehhh>
		oled->draw_number16x16(rtc->msg_uhr[4]-'0',3.33*numbersmalsize,0*charhighte);
    4884:	e9 8d       	ldd	r30, Y+25	; 0x19
    4886:	fa 8d       	ldd	r31, Y+26	; 0x1a
    4888:	64 81       	ldd	r22, Z+4	; 0x04
    488a:	60 53       	subi	r22, 0x30	; 48
    488c:	20 e0       	ldi	r18, 0x00	; 0
    488e:	45 e3       	ldi	r20, 0x35	; 53
    4890:	8f 89       	ldd	r24, Y+23	; 0x17
    4892:	98 8d       	ldd	r25, Y+24	; 0x18
    4894:	0e 94 1e 09 	call	0x123c	; 0x123c <_ZN7Display16draw_number16x16Ehhh>

		//Ausgabe der Geschwidigkeit
		buffersize=sprintf(buffer,"%3.1f",geschw);
    4898:	80 91 fe 07 	lds	r24, 0x07FE
    489c:	8f 93       	push	r24
    489e:	80 91 fd 07 	lds	r24, 0x07FD
    48a2:	8f 93       	push	r24
    48a4:	80 91 fc 07 	lds	r24, 0x07FC
    48a8:	8f 93       	push	r24
    48aa:	80 91 fb 07 	lds	r24, 0x07FB
    48ae:	8f 93       	push	r24
    48b0:	8f ef       	ldi	r24, 0xFF	; 255
    48b2:	91 e0       	ldi	r25, 0x01	; 1
    48b4:	9f 93       	push	r25
    48b6:	8f 93       	push	r24
    48b8:	bf 92       	push	r11
    48ba:	af 92       	push	r10
    48bc:	0e 94 87 44 	call	0x890e	; 0x890e <sprintf>
    48c0:	8e 8b       	std	Y+22, r24	; 0x16
		for(uint8_t i=((SSD1306_WIDTH/numbersmalsize)-buffersize);i<((SSD1306_WIDTH/numbersmalsize));i++){
    48c2:	98 e0       	ldi	r25, 0x08	; 8
    48c4:	09 2f       	mov	r16, r25
    48c6:	08 1b       	sub	r16, r24
    48c8:	8d b7       	in	r24, 0x3d	; 61
    48ca:	9e b7       	in	r25, 0x3e	; 62
    48cc:	08 96       	adiw	r24, 0x08	; 8
    48ce:	0f b6       	in	r0, 0x3f	; 63
    48d0:	f8 94       	cli
    48d2:	9e bf       	out	0x3e, r25	; 62
    48d4:	0f be       	out	0x3f, r0	; 63
    48d6:	8d bf       	out	0x3d, r24	; 61
    48d8:	08 30       	cpi	r16, 0x08	; 8
    48da:	f8 f4       	brcc	.+62     	; 0x491a <_ZN5tacho4drawEv+0x1e4>
    48dc:	10 2f       	mov	r17, r16
    48de:	12 95       	swap	r17
    48e0:	10 7f       	andi	r17, 0xF0	; 240
			if(buffer[i-((SSD1306_WIDTH/numbersmalsize)-buffersize)]=='.'){
    48e2:	8e 89       	ldd	r24, Y+22	; 0x16
    48e4:	fe 01       	movw	r30, r28
    48e6:	e0 0f       	add	r30, r16
    48e8:	f1 1d       	adc	r31, r1
    48ea:	e8 0f       	add	r30, r24
    48ec:	f1 1d       	adc	r31, r1
    48ee:	36 97       	sbiw	r30, 0x06	; 6
    48f0:	60 81       	ld	r22, Z
    48f2:	6e 32       	cpi	r22, 0x2E	; 46
    48f4:	39 f4       	brne	.+14     	; 0x4904 <_ZN5tacho4drawEv+0x1ce>
				oled->draw_ASCI(buffer[i-((SSD1306_WIDTH/numbersmalsize)-buffersize)],i*numbersmalsize,4*charhighte);
    48f6:	20 e2       	ldi	r18, 0x20	; 32
    48f8:	41 2f       	mov	r20, r17
    48fa:	8f 89       	ldd	r24, Y+23	; 0x17
    48fc:	98 8d       	ldd	r25, Y+24	; 0x18
    48fe:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <_ZN7Display9draw_ASCIEhhh>
    4902:	07 c0       	rjmp	.+14     	; 0x4912 <_ZN5tacho4drawEv+0x1dc>
			}
			else{
				oled->draw_number16x16(buffer[i-((SSD1306_WIDTH/numbersmalsize)-buffersize)]-'0',i*numbersmalsize,3*charhighte);
    4904:	60 53       	subi	r22, 0x30	; 48
    4906:	28 e1       	ldi	r18, 0x18	; 24
    4908:	41 2f       	mov	r20, r17
    490a:	8f 89       	ldd	r24, Y+23	; 0x17
    490c:	98 8d       	ldd	r25, Y+24	; 0x18
    490e:	0e 94 1e 09 	call	0x123c	; 0x123c <_ZN7Display16draw_number16x16Ehhh>
		oled->draw_number16x16(rtc->msg_uhr[3]-'0',2.33*numbersmalsize,0*charhighte);
		oled->draw_number16x16(rtc->msg_uhr[4]-'0',3.33*numbersmalsize,0*charhighte);

		//Ausgabe der Geschwidigkeit
		buffersize=sprintf(buffer,"%3.1f",geschw);
		for(uint8_t i=((SSD1306_WIDTH/numbersmalsize)-buffersize);i<((SSD1306_WIDTH/numbersmalsize));i++){
    4912:	0f 5f       	subi	r16, 0xFF	; 255
    4914:	10 5f       	subi	r17, 0xF0	; 240
    4916:	08 30       	cpi	r16, 0x08	; 8
    4918:	21 f7       	brne	.-56     	; 0x48e2 <_ZN5tacho4drawEv+0x1ac>
		//Nadel erst, wenn Kompass implementiert
		//Anzeige der Richtung als Alternative
		//anzeige_kleinenadel(31,31+8,angle);

		//anzeige der gesammtstrecke
		buffersize=sprintf(buffer,"%.3fkm",strecke/1000);
    491a:	20 e0       	ldi	r18, 0x00	; 0
    491c:	30 e0       	ldi	r19, 0x00	; 0
    491e:	4a e7       	ldi	r20, 0x7A	; 122
    4920:	54 e4       	ldi	r21, 0x44	; 68
    4922:	60 91 f7 07 	lds	r22, 0x07F7
    4926:	70 91 f8 07 	lds	r23, 0x07F8
    492a:	80 91 f9 07 	lds	r24, 0x07F9
    492e:	90 91 fa 07 	lds	r25, 0x07FA
    4932:	0e 94 01 3b 	call	0x7602	; 0x7602 <__divsf3>
    4936:	9f 93       	push	r25
    4938:	8f 93       	push	r24
    493a:	7f 93       	push	r23
    493c:	6f 93       	push	r22
    493e:	85 e0       	ldi	r24, 0x05	; 5
    4940:	92 e0       	ldi	r25, 0x02	; 2
    4942:	9f 93       	push	r25
    4944:	8f 93       	push	r24
    4946:	bf 92       	push	r11
    4948:	af 92       	push	r10
    494a:	0e 94 87 44 	call	0x890e	; 0x890e <sprintf>
    494e:	8e 8b       	std	Y+22, r24	; 0x16
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+70,2*charhighte);}
    4950:	2d b7       	in	r18, 0x3d	; 61
    4952:	3e b7       	in	r19, 0x3e	; 62
    4954:	28 5f       	subi	r18, 0xF8	; 248
    4956:	3f 4f       	sbci	r19, 0xFF	; 255
    4958:	0f b6       	in	r0, 0x3f	; 63
    495a:	f8 94       	cli
    495c:	3e bf       	out	0x3e, r19	; 62
    495e:	0f be       	out	0x3f, r0	; 63
    4960:	2d bf       	out	0x3d, r18	; 61
    4962:	88 23       	and	r24, r24
    4964:	89 f0       	breq	.+34     	; 0x4988 <_ZN5tacho4drawEv+0x252>
    4966:	16 e4       	ldi	r17, 0x46	; 70
    4968:	f1 2c       	mov	r15, r1
    496a:	fe 01       	movw	r30, r28
    496c:	ef 0d       	add	r30, r15
    496e:	f1 1d       	adc	r31, r1
    4970:	20 e1       	ldi	r18, 0x10	; 16
    4972:	41 2f       	mov	r20, r17
    4974:	62 81       	ldd	r22, Z+2	; 0x02
    4976:	8f 89       	ldd	r24, Y+23	; 0x17
    4978:	98 8d       	ldd	r25, Y+24	; 0x18
    497a:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <_ZN7Display9draw_ASCIEhhh>
    497e:	f3 94       	inc	r15
    4980:	1a 5f       	subi	r17, 0xFA	; 250
    4982:	8e 89       	ldd	r24, Y+22	; 0x16
    4984:	f8 16       	cp	r15, r24
    4986:	88 f3       	brcs	.-30     	; 0x496a <_ZN5tacho4drawEv+0x234>

		//anzeige der max geschwindigkeit
		buffersize=sprintf(buffer,"%.1fkm/h",maxgeschw);
    4988:	80 91 f6 07 	lds	r24, 0x07F6
    498c:	8f 93       	push	r24
    498e:	80 91 f5 07 	lds	r24, 0x07F5
    4992:	8f 93       	push	r24
    4994:	80 91 f4 07 	lds	r24, 0x07F4
    4998:	8f 93       	push	r24
    499a:	80 91 f3 07 	lds	r24, 0x07F3
    499e:	8f 93       	push	r24
    49a0:	8c e0       	ldi	r24, 0x0C	; 12
    49a2:	92 e0       	ldi	r25, 0x02	; 2
    49a4:	9f 93       	push	r25
    49a6:	8f 93       	push	r24
    49a8:	bf 92       	push	r11
    49aa:	af 92       	push	r10
    49ac:	0e 94 87 44 	call	0x890e	; 0x890e <sprintf>
    49b0:	8e 8b       	std	Y+22, r24	; 0x16
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+70,5*charhighte);}
    49b2:	2d b7       	in	r18, 0x3d	; 61
    49b4:	3e b7       	in	r19, 0x3e	; 62
    49b6:	28 5f       	subi	r18, 0xF8	; 248
    49b8:	3f 4f       	sbci	r19, 0xFF	; 255
    49ba:	0f b6       	in	r0, 0x3f	; 63
    49bc:	f8 94       	cli
    49be:	3e bf       	out	0x3e, r19	; 62
    49c0:	0f be       	out	0x3f, r0	; 63
    49c2:	2d bf       	out	0x3d, r18	; 61
    49c4:	88 23       	and	r24, r24
    49c6:	89 f0       	breq	.+34     	; 0x49ea <_ZN5tacho4drawEv+0x2b4>
    49c8:	16 e4       	ldi	r17, 0x46	; 70
    49ca:	f1 2c       	mov	r15, r1
    49cc:	fe 01       	movw	r30, r28
    49ce:	ef 0d       	add	r30, r15
    49d0:	f1 1d       	adc	r31, r1
    49d2:	28 e2       	ldi	r18, 0x28	; 40
    49d4:	41 2f       	mov	r20, r17
    49d6:	62 81       	ldd	r22, Z+2	; 0x02
    49d8:	8f 89       	ldd	r24, Y+23	; 0x17
    49da:	98 8d       	ldd	r25, Y+24	; 0x18
    49dc:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <_ZN7Display9draw_ASCIEhhh>
    49e0:	f3 94       	inc	r15
    49e2:	1a 5f       	subi	r17, 0xFA	; 250
    49e4:	8e 89       	ldd	r24, Y+22	; 0x16
    49e6:	f8 16       	cp	r15, r24
    49e8:	88 f3       	brcs	.-30     	; 0x49cc <_ZN5tacho4drawEv+0x296>

		//anzeige der Fahrtzeit
		buffersize=sprintf(buffer,"%02i:%02i:%02i",uint8_t(Fahrtzeit/3600),uint8_t(Fahrtzeit/60),uint8_t(Fahrtzeit%60));
    49ea:	c0 90 ef 07 	lds	r12, 0x07EF
    49ee:	d0 90 f0 07 	lds	r13, 0x07F0
    49f2:	e0 90 f1 07 	lds	r14, 0x07F1
    49f6:	f0 90 f2 07 	lds	r15, 0x07F2
    49fa:	c7 01       	movw	r24, r14
    49fc:	b6 01       	movw	r22, r12
    49fe:	2c e3       	ldi	r18, 0x3C	; 60
    4a00:	30 e0       	ldi	r19, 0x00	; 0
    4a02:	40 e0       	ldi	r20, 0x00	; 0
    4a04:	50 e0       	ldi	r21, 0x00	; 0
    4a06:	0e 94 f0 41 	call	0x83e0	; 0x83e0 <__udivmodsi4>
    4a0a:	1f 92       	push	r1
    4a0c:	6f 93       	push	r22
    4a0e:	1f 92       	push	r1
    4a10:	2f 93       	push	r18
    4a12:	c7 01       	movw	r24, r14
    4a14:	b6 01       	movw	r22, r12
    4a16:	20 e1       	ldi	r18, 0x10	; 16
    4a18:	3e e0       	ldi	r19, 0x0E	; 14
    4a1a:	40 e0       	ldi	r20, 0x00	; 0
    4a1c:	50 e0       	ldi	r21, 0x00	; 0
    4a1e:	0e 94 f0 41 	call	0x83e0	; 0x83e0 <__udivmodsi4>
    4a22:	1f 92       	push	r1
    4a24:	2f 93       	push	r18
    4a26:	85 e1       	ldi	r24, 0x15	; 21
    4a28:	92 e0       	ldi	r25, 0x02	; 2
    4a2a:	9f 93       	push	r25
    4a2c:	8f 93       	push	r24
    4a2e:	bf 92       	push	r11
    4a30:	af 92       	push	r10
    4a32:	0e 94 87 44 	call	0x890e	; 0x890e <sprintf>
    4a36:	8e 8b       	std	Y+22, r24	; 0x16
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+70,6*charhighte);}
    4a38:	2d b7       	in	r18, 0x3d	; 61
    4a3a:	3e b7       	in	r19, 0x3e	; 62
    4a3c:	26 5f       	subi	r18, 0xF6	; 246
    4a3e:	3f 4f       	sbci	r19, 0xFF	; 255
    4a40:	0f b6       	in	r0, 0x3f	; 63
    4a42:	f8 94       	cli
    4a44:	3e bf       	out	0x3e, r19	; 62
    4a46:	0f be       	out	0x3f, r0	; 63
    4a48:	2d bf       	out	0x3d, r18	; 61
    4a4a:	88 23       	and	r24, r24
    4a4c:	89 f0       	breq	.+34     	; 0x4a70 <_ZN5tacho4drawEv+0x33a>
    4a4e:	16 e4       	ldi	r17, 0x46	; 70
    4a50:	f1 2c       	mov	r15, r1
    4a52:	fe 01       	movw	r30, r28
    4a54:	ef 0d       	add	r30, r15
    4a56:	f1 1d       	adc	r31, r1
    4a58:	20 e3       	ldi	r18, 0x30	; 48
    4a5a:	41 2f       	mov	r20, r17
    4a5c:	62 81       	ldd	r22, Z+2	; 0x02
    4a5e:	8f 89       	ldd	r24, Y+23	; 0x17
    4a60:	98 8d       	ldd	r25, Y+24	; 0x18
    4a62:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <_ZN7Display9draw_ASCIEhhh>
    4a66:	f3 94       	inc	r15
    4a68:	1a 5f       	subi	r17, 0xFA	; 250
    4a6a:	8e 89       	ldd	r24, Y+22	; 0x16
    4a6c:	f8 16       	cp	r15, r24
    4a6e:	88 f3       	brcs	.-30     	; 0x4a52 <_ZN5tacho4drawEv+0x31c>
		
		//anzeige der durschschnittsgeschw
		if (Fahrtzeit==0)
    4a70:	60 91 ef 07 	lds	r22, 0x07EF
    4a74:	70 91 f0 07 	lds	r23, 0x07F0
    4a78:	80 91 f1 07 	lds	r24, 0x07F1
    4a7c:	90 91 f2 07 	lds	r25, 0x07F2
    4a80:	61 15       	cp	r22, r1
    4a82:	71 05       	cpc	r23, r1
    4a84:	81 05       	cpc	r24, r1
    4a86:	91 05       	cpc	r25, r1
    4a88:	b1 f4       	brne	.+44     	; 0x4ab6 <_ZN5tacho4drawEv+0x380>
		{
			buffersize=sprintf(buffer,"%.1fkm/h",0.0);
    4a8a:	1f 92       	push	r1
    4a8c:	1f 92       	push	r1
    4a8e:	1f 92       	push	r1
    4a90:	1f 92       	push	r1
    4a92:	8c e0       	ldi	r24, 0x0C	; 12
    4a94:	92 e0       	ldi	r25, 0x02	; 2
    4a96:	9f 93       	push	r25
    4a98:	8f 93       	push	r24
    4a9a:	bf 92       	push	r11
    4a9c:	af 92       	push	r10
    4a9e:	0e 94 87 44 	call	0x890e	; 0x890e <sprintf>
    4aa2:	8e 8b       	std	Y+22, r24	; 0x16
    4aa4:	8d b7       	in	r24, 0x3d	; 61
    4aa6:	9e b7       	in	r25, 0x3e	; 62
    4aa8:	08 96       	adiw	r24, 0x08	; 8
    4aaa:	0f b6       	in	r0, 0x3f	; 63
    4aac:	f8 94       	cli
    4aae:	9e bf       	out	0x3e, r25	; 62
    4ab0:	0f be       	out	0x3f, r0	; 63
    4ab2:	8d bf       	out	0x3d, r24	; 61
    4ab4:	2a c0       	rjmp	.+84     	; 0x4b0a <_ZN5tacho4drawEv+0x3d4>
		}
		else {
			buffersize=sprintf(buffer,"%.1fkm/h",(strecke/Fahrtzeit)*3.6);
    4ab6:	0e 94 9a 3b 	call	0x7734	; 0x7734 <__floatunsisf>
    4aba:	9b 01       	movw	r18, r22
    4abc:	ac 01       	movw	r20, r24
    4abe:	60 91 f7 07 	lds	r22, 0x07F7
    4ac2:	70 91 f8 07 	lds	r23, 0x07F8
    4ac6:	80 91 f9 07 	lds	r24, 0x07F9
    4aca:	90 91 fa 07 	lds	r25, 0x07FA
    4ace:	0e 94 01 3b 	call	0x7602	; 0x7602 <__divsf3>
    4ad2:	26 e6       	ldi	r18, 0x66	; 102
    4ad4:	36 e6       	ldi	r19, 0x66	; 102
    4ad6:	46 e6       	ldi	r20, 0x66	; 102
    4ad8:	50 e4       	ldi	r21, 0x40	; 64
    4ada:	0e 94 b5 3c 	call	0x796a	; 0x796a <__mulsf3>
    4ade:	9f 93       	push	r25
    4ae0:	8f 93       	push	r24
    4ae2:	7f 93       	push	r23
    4ae4:	6f 93       	push	r22
    4ae6:	8c e0       	ldi	r24, 0x0C	; 12
    4ae8:	92 e0       	ldi	r25, 0x02	; 2
    4aea:	9f 93       	push	r25
    4aec:	8f 93       	push	r24
    4aee:	bf 92       	push	r11
    4af0:	af 92       	push	r10
    4af2:	0e 94 87 44 	call	0x890e	; 0x890e <sprintf>
    4af6:	8e 8b       	std	Y+22, r24	; 0x16
    4af8:	2d b7       	in	r18, 0x3d	; 61
    4afa:	3e b7       	in	r19, 0x3e	; 62
    4afc:	28 5f       	subi	r18, 0xF8	; 248
    4afe:	3f 4f       	sbci	r19, 0xFF	; 255
    4b00:	0f b6       	in	r0, 0x3f	; 63
    4b02:	f8 94       	cli
    4b04:	3e bf       	out	0x3e, r19	; 62
    4b06:	0f be       	out	0x3f, r0	; 63
    4b08:	2d bf       	out	0x3d, r18	; 61
		}
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+75,1*charhighte);}
    4b0a:	8e 89       	ldd	r24, Y+22	; 0x16
    4b0c:	88 23       	and	r24, r24
    4b0e:	89 f0       	breq	.+34     	; 0x4b32 <_ZN5tacho4drawEv+0x3fc>
    4b10:	0b e4       	ldi	r16, 0x4B	; 75
    4b12:	10 e0       	ldi	r17, 0x00	; 0
    4b14:	fe 01       	movw	r30, r28
    4b16:	e1 0f       	add	r30, r17
    4b18:	f1 1d       	adc	r31, r1
    4b1a:	28 e0       	ldi	r18, 0x08	; 8
    4b1c:	40 2f       	mov	r20, r16
    4b1e:	62 81       	ldd	r22, Z+2	; 0x02
    4b20:	8f 89       	ldd	r24, Y+23	; 0x17
    4b22:	98 8d       	ldd	r25, Y+24	; 0x18
    4b24:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <_ZN7Display9draw_ASCIEhhh>
    4b28:	1f 5f       	subi	r17, 0xFF	; 255
    4b2a:	0a 5f       	subi	r16, 0xFA	; 250
    4b2c:	8e 89       	ldd	r24, Y+22	; 0x16
    4b2e:	18 17       	cp	r17, r24
    4b30:	88 f3       	brcs	.-30     	; 0x4b14 <_ZN5tacho4drawEv+0x3de>
		oled->clearFrame();
	}

	//send the frame to the display
	void send(){
		oled->sendFrame();	
    4b32:	8f 89       	ldd	r24, Y+23	; 0x17
    4b34:	98 8d       	ldd	r25, Y+24	; 0x18
    4b36:	0e 94 31 08 	call	0x1062	; 0x1062 <_ZN7Display9sendFrameEv>
    4b3a:	04 c0       	rjmp	.+8      	; 0x4b44 <_ZN5tacho4drawEv+0x40e>
		}
		return 0;
	}

	//Anzeige schalten
	void draw(){
    4b3c:	10 e5       	ldi	r17, 0x50	; 80
    4b3e:	c1 2c       	mov	r12, r1
    4b40:	d1 2c       	mov	r13, r1
    4b42:	40 ce       	rjmp	.-896    	; 0x47c4 <_ZN5tacho4drawEv+0x8e>
			buffersize=sprintf(buffer,"%.1fkm/h",(strecke/Fahrtzeit)*3.6);
		}
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+75,1*charhighte);}

		send();
	}
    4b44:	df 91       	pop	r29
    4b46:	cf 91       	pop	r28
    4b48:	1f 91       	pop	r17
    4b4a:	0f 91       	pop	r16
    4b4c:	ff 90       	pop	r15
    4b4e:	ef 90       	pop	r14
    4b50:	df 90       	pop	r13
    4b52:	cf 90       	pop	r12
    4b54:	bf 90       	pop	r11
    4b56:	af 90       	pop	r10
    4b58:	08 95       	ret

00004b5a <_ZN3uhr4drawEv>:
		}
	return 0;
	}

	//anzeige vorbereiten
	void draw()
    4b5a:	ef 92       	push	r14
    4b5c:	ff 92       	push	r15
    4b5e:	0f 93       	push	r16
    4b60:	1f 93       	push	r17
    4b62:	cf 93       	push	r28
    4b64:	df 93       	push	r29
    4b66:	ec 01       	movw	r28, r24
		return 0;
	}
	
	//drawfunktion
	virtual void draw(){
		oled->clearFrame();
    4b68:	8f 89       	ldd	r24, Y+23	; 0x17
    4b6a:	98 8d       	ldd	r25, Y+24	; 0x18
    4b6c:	0e 94 b1 07 	call	0xf62	; 0xf62 <_ZN7Display10clearFrameEv>
    4b70:	11 e4       	ldi	r17, 0x41	; 65
    4b72:	e1 2c       	mov	r14, r1
    4b74:	f1 2c       	mov	r15, r1
				for(uint8_t i=((SSD1306_WIDTH/charsize)-buffersize);i<(SSD1306_WIDTH/charsize);i++){
					oled->draw_ASCI(buffer[i-((SSD1306_WIDTH/charsize)-buffersize)],i*charsize,0);
				}
				break;
			case 1:	//standard Header fuer fast alle Pages
				for(uint8_t i=0;i<(bitsderrtc-3);i++){oled->draw_ASCI(rtc->msg_uhr[i],65+i*charsize,0*charhighte);}
    4b76:	e9 8d       	ldd	r30, Y+25	; 0x19
    4b78:	fa 8d       	ldd	r31, Y+26	; 0x1a
    4b7a:	ee 0d       	add	r30, r14
    4b7c:	ff 1d       	adc	r31, r15
    4b7e:	20 e0       	ldi	r18, 0x00	; 0
    4b80:	41 2f       	mov	r20, r17
    4b82:	60 81       	ld	r22, Z
    4b84:	8f 89       	ldd	r24, Y+23	; 0x17
    4b86:	98 8d       	ldd	r25, Y+24	; 0x18
    4b88:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <_ZN7Display9draw_ASCIEhhh>
    4b8c:	8f ef       	ldi	r24, 0xFF	; 255
    4b8e:	e8 1a       	sub	r14, r24
    4b90:	f8 0a       	sbc	r15, r24
    4b92:	1a 5f       	subi	r17, 0xFA	; 250
    4b94:	1f 35       	cpi	r17, 0x5F	; 95
    4b96:	79 f7       	brne	.-34     	; 0x4b76 <_ZN3uhr4drawEv+0x1c>
				buffersize=sprintf(buffer,"%i%%",Batteriestatus());
    4b98:	52 dc       	rcall	.-1884   	; 0x443e <_Z14Batteriestatusv>
    4b9a:	28 2f       	mov	r18, r24
    4b9c:	08 2e       	mov	r0, r24
    4b9e:	00 0c       	add	r0, r0
    4ba0:	33 0b       	sbc	r19, r19
    4ba2:	3f 93       	push	r19
    4ba4:	8f 93       	push	r24
    4ba6:	8a ef       	ldi	r24, 0xFA	; 250
    4ba8:	91 e0       	ldi	r25, 0x01	; 1
    4baa:	9f 93       	push	r25
    4bac:	8f 93       	push	r24
    4bae:	ce 01       	movw	r24, r28
    4bb0:	02 96       	adiw	r24, 0x02	; 2
    4bb2:	9f 93       	push	r25
    4bb4:	8f 93       	push	r24
    4bb6:	0e 94 87 44 	call	0x890e	; 0x890e <sprintf>
    4bba:	8e 8b       	std	Y+22, r24	; 0x16
				for(uint8_t i=((SSD1306_WIDTH/charsize)-buffersize);i<(SSD1306_WIDTH/charsize);i++){
    4bbc:	15 e1       	ldi	r17, 0x15	; 21
    4bbe:	18 1b       	sub	r17, r24
    4bc0:	0f 90       	pop	r0
    4bc2:	0f 90       	pop	r0
    4bc4:	0f 90       	pop	r0
    4bc6:	0f 90       	pop	r0
    4bc8:	0f 90       	pop	r0
    4bca:	0f 90       	pop	r0
    4bcc:	15 31       	cpi	r17, 0x15	; 21
    4bce:	08 f0       	brcs	.+2      	; 0x4bd2 <_ZN3uhr4drawEv+0x78>
    4bd0:	5f c0       	rjmp	.+190    	; 0x4c90 <_ZN3uhr4drawEv+0x136>
    4bd2:	01 2f       	mov	r16, r17
    4bd4:	00 0f       	add	r16, r16
    4bd6:	01 0f       	add	r16, r17
    4bd8:	00 0f       	add	r16, r16
					oled->draw_ASCI(buffer[i-((SSD1306_WIDTH/charsize)-buffersize)],i*charsize,0);
    4bda:	8e 89       	ldd	r24, Y+22	; 0x16
    4bdc:	fe 01       	movw	r30, r28
    4bde:	e1 0f       	add	r30, r17
    4be0:	f1 1d       	adc	r31, r1
    4be2:	e8 0f       	add	r30, r24
    4be4:	f1 1d       	adc	r31, r1
    4be6:	73 97       	sbiw	r30, 0x13	; 19
    4be8:	20 e0       	ldi	r18, 0x00	; 0
    4bea:	40 2f       	mov	r20, r16
    4bec:	60 81       	ld	r22, Z
    4bee:	8f 89       	ldd	r24, Y+23	; 0x17
    4bf0:	98 8d       	ldd	r25, Y+24	; 0x18
    4bf2:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <_ZN7Display9draw_ASCIEhhh>
				}
				break;
			case 1:	//standard Header fuer fast alle Pages
				for(uint8_t i=0;i<(bitsderrtc-3);i++){oled->draw_ASCI(rtc->msg_uhr[i],65+i*charsize,0*charhighte);}
				buffersize=sprintf(buffer,"%i%%",Batteriestatus());
				for(uint8_t i=((SSD1306_WIDTH/charsize)-buffersize);i<(SSD1306_WIDTH/charsize);i++){
    4bf6:	1f 5f       	subi	r17, 0xFF	; 255
    4bf8:	0a 5f       	subi	r16, 0xFA	; 250
    4bfa:	15 31       	cpi	r17, 0x15	; 21
    4bfc:	71 f7       	brne	.-36     	; 0x4bda <_ZN3uhr4drawEv+0x80>
    4bfe:	48 c0       	rjmp	.+144    	; 0x4c90 <_ZN3uhr4drawEv+0x136>
				for(uint8_t i=0;i<8;i++){
					oled->draw_ASCI(rtc->msg_dat[i],5+i*charsize,7*charhighte);
				}
				break;
			case 2:
				for(uint8_t i=0;i<bitsderrtc;i++){oled->draw_ASCI(rtc->msg_dat[i],65+i*charsize,7*charhighte);}
    4c00:	e9 8d       	ldd	r30, Y+25	; 0x19
    4c02:	fa 8d       	ldd	r31, Y+26	; 0x1a
    4c04:	ee 0d       	add	r30, r14
    4c06:	ff 1d       	adc	r31, r15
    4c08:	28 e3       	ldi	r18, 0x38	; 56
    4c0a:	41 2f       	mov	r20, r17
    4c0c:	60 85       	ldd	r22, Z+8	; 0x08
    4c0e:	8f 89       	ldd	r24, Y+23	; 0x17
    4c10:	98 8d       	ldd	r25, Y+24	; 0x18
    4c12:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <_ZN7Display9draw_ASCIEhhh>
    4c16:	8f ef       	ldi	r24, 0xFF	; 255
    4c18:	e8 1a       	sub	r14, r24
    4c1a:	f8 0a       	sbc	r15, r24
    4c1c:	1a 5f       	subi	r17, 0xFA	; 250
    4c1e:	11 37       	cpi	r17, 0x71	; 113
    4c20:	79 f7       	brne	.-34     	; 0x4c00 <_ZN3uhr4drawEv+0xa6>
	{
		monitor::draw();
		header(1);
		bottom(2);

		oled->analog(rtc->Stunden,rtc->Minuten,rtc->Sekunden,Zeiger);
    4c22:	e9 8d       	ldd	r30, Y+25	; 0x19
    4c24:	fa 8d       	ldd	r31, Y+26	; 0x1a
    4c26:	09 a5       	ldd	r16, Y+41	; 0x29
    4c28:	22 89       	ldd	r18, Z+18	; 0x12
    4c2a:	41 89       	ldd	r20, Z+17	; 0x11
    4c2c:	60 89       	ldd	r22, Z+16	; 0x10
    4c2e:	8f 89       	ldd	r24, Y+23	; 0x17
    4c30:	98 8d       	ldd	r25, Y+24	; 0x18
    4c32:	0e 94 98 09 	call	0x1330	; 0x1330 <_ZN7Display6analogEhhhh>
		//draw large number
		oled->draw_number16x16(rtc->msg_uhr[0]-'0',70,1.66*charhighte);
    4c36:	e9 8d       	ldd	r30, Y+25	; 0x19
    4c38:	fa 8d       	ldd	r31, Y+26	; 0x1a
    4c3a:	60 81       	ld	r22, Z
    4c3c:	60 53       	subi	r22, 0x30	; 48
    4c3e:	2d e0       	ldi	r18, 0x0D	; 13
    4c40:	46 e4       	ldi	r20, 0x46	; 70
    4c42:	8f 89       	ldd	r24, Y+23	; 0x17
    4c44:	98 8d       	ldd	r25, Y+24	; 0x18
    4c46:	0e 94 1e 09 	call	0x123c	; 0x123c <_ZN7Display16draw_number16x16Ehhh>
		oled->draw_number16x16(rtc->msg_uhr[1]-'0',70+numbersmalsize,1.66*charhighte);
    4c4a:	e9 8d       	ldd	r30, Y+25	; 0x19
    4c4c:	fa 8d       	ldd	r31, Y+26	; 0x1a
    4c4e:	61 81       	ldd	r22, Z+1	; 0x01
    4c50:	60 53       	subi	r22, 0x30	; 48
    4c52:	2d e0       	ldi	r18, 0x0D	; 13
    4c54:	46 e5       	ldi	r20, 0x56	; 86
    4c56:	8f 89       	ldd	r24, Y+23	; 0x17
    4c58:	98 8d       	ldd	r25, Y+24	; 0x18
    4c5a:	0e 94 1e 09 	call	0x123c	; 0x123c <_ZN7Display16draw_number16x16Ehhh>
		oled->draw_number16x16(rtc->msg_uhr[3]-'0',70,2.33*charhighte+numbersmalhight);
    4c5e:	e9 8d       	ldd	r30, Y+25	; 0x19
    4c60:	fa 8d       	ldd	r31, Y+26	; 0x1a
    4c62:	63 81       	ldd	r22, Z+3	; 0x03
    4c64:	60 53       	subi	r22, 0x30	; 48
    4c66:	22 e2       	ldi	r18, 0x22	; 34
    4c68:	46 e4       	ldi	r20, 0x46	; 70
    4c6a:	8f 89       	ldd	r24, Y+23	; 0x17
    4c6c:	98 8d       	ldd	r25, Y+24	; 0x18
    4c6e:	0e 94 1e 09 	call	0x123c	; 0x123c <_ZN7Display16draw_number16x16Ehhh>
		oled->draw_number16x16(rtc->msg_uhr[4]-'0',70+numbersmalsize,2.33*charhighte+numbersmalhight);
    4c72:	e9 8d       	ldd	r30, Y+25	; 0x19
    4c74:	fa 8d       	ldd	r31, Y+26	; 0x1a
    4c76:	64 81       	ldd	r22, Z+4	; 0x04
    4c78:	60 53       	subi	r22, 0x30	; 48
    4c7a:	22 e2       	ldi	r18, 0x22	; 34
    4c7c:	46 e5       	ldi	r20, 0x56	; 86
    4c7e:	8f 89       	ldd	r24, Y+23	; 0x17
    4c80:	98 8d       	ldd	r25, Y+24	; 0x18
    4c82:	0e 94 1e 09 	call	0x123c	; 0x123c <_ZN7Display16draw_number16x16Ehhh>
		oled->clearFrame();
	}

	//send the frame to the display
	void send(){
		oled->sendFrame();	
    4c86:	8f 89       	ldd	r24, Y+23	; 0x17
    4c88:	98 8d       	ldd	r25, Y+24	; 0x18
    4c8a:	0e 94 31 08 	call	0x1062	; 0x1062 <_ZN7Display9sendFrameEv>
    4c8e:	04 c0       	rjmp	.+8      	; 0x4c98 <_ZN3uhr4drawEv+0x13e>
		return 0;
	}
	
	//drawfunktion
	virtual void draw(){
		oled->clearFrame();
    4c90:	11 e4       	ldi	r17, 0x41	; 65
    4c92:	e1 2c       	mov	r14, r1
    4c94:	f1 2c       	mov	r15, r1
    4c96:	b4 cf       	rjmp	.-152    	; 0x4c00 <_ZN3uhr4drawEv+0xa6>
		oled->draw_number16x16(rtc->msg_uhr[1]-'0',70+numbersmalsize,1.66*charhighte);
		oled->draw_number16x16(rtc->msg_uhr[3]-'0',70,2.33*charhighte+numbersmalhight);
		oled->draw_number16x16(rtc->msg_uhr[4]-'0',70+numbersmalsize,2.33*charhighte+numbersmalhight);

		send();
	}
    4c98:	df 91       	pop	r29
    4c9a:	cf 91       	pop	r28
    4c9c:	1f 91       	pop	r17
    4c9e:	0f 91       	pop	r16
    4ca0:	ff 90       	pop	r15
    4ca2:	ef 90       	pop	r14
    4ca4:	08 95       	ret

00004ca6 <_ZN7wandern4drawEv>:
			EEPROM_Write(EEJAHR,rtc->Jahr);
		}
		return 0;
	}
	
	void draw(){
    4ca6:	cf 92       	push	r12
    4ca8:	df 92       	push	r13
    4caa:	ef 92       	push	r14
    4cac:	ff 92       	push	r15
    4cae:	0f 93       	push	r16
    4cb0:	1f 93       	push	r17
    4cb2:	cf 93       	push	r28
    4cb4:	df 93       	push	r29
    4cb6:	ec 01       	movw	r28, r24
		return 0;
	}
	
	//drawfunktion
	virtual void draw(){
		oled->clearFrame();
    4cb8:	8f 89       	ldd	r24, Y+23	; 0x17
    4cba:	98 8d       	ldd	r25, Y+24	; 0x18
    4cbc:	0e 94 b1 07 	call	0xf62	; 0xf62 <_ZN7Display10clearFrameEv>
    4cc0:	10 e0       	ldi	r17, 0x00	; 0
    4cc2:	e1 2c       	mov	r14, r1
    4cc4:	f1 2c       	mov	r15, r1
	}
	
	//draw header and overload it
	void header(){
		for(uint8_t i=0;i<8;i++){
			oled->draw_ASCI(rtc->msg_uhr[i],i*charsize,0);
    4cc6:	e9 8d       	ldd	r30, Y+25	; 0x19
    4cc8:	fa 8d       	ldd	r31, Y+26	; 0x1a
    4cca:	ee 0d       	add	r30, r14
    4ccc:	ff 1d       	adc	r31, r15
    4cce:	20 e0       	ldi	r18, 0x00	; 0
    4cd0:	41 2f       	mov	r20, r17
    4cd2:	60 81       	ld	r22, Z
    4cd4:	8f 89       	ldd	r24, Y+23	; 0x17
    4cd6:	98 8d       	ldd	r25, Y+24	; 0x18
    4cd8:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <_ZN7Display9draw_ASCIEhhh>
    4cdc:	2f ef       	ldi	r18, 0xFF	; 255
    4cde:	e2 1a       	sub	r14, r18
    4ce0:	f2 0a       	sbc	r15, r18
    4ce2:	1a 5f       	subi	r17, 0xFA	; 250
		return &name[0];
	}
	
	//draw header and overload it
	void header(){
		for(uint8_t i=0;i<8;i++){
    4ce4:	10 33       	cpi	r17, 0x30	; 48
    4ce6:	79 f7       	brne	.-34     	; 0x4cc6 <_ZN7wandern4drawEv+0x20>
			oled->draw_ASCI(rtc->msg_uhr[i],i*charsize,0);
		}
		buffersize=sprintf(buffer,"Bat: %i%%",Batteriestatus());
    4ce8:	aa db       	rcall	.-2220   	; 0x443e <_Z14Batteriestatusv>
    4cea:	7e 01       	movw	r14, r28
    4cec:	32 e0       	ldi	r19, 0x02	; 2
    4cee:	e3 0e       	add	r14, r19
    4cf0:	f1 1c       	adc	r15, r1
    4cf2:	28 2f       	mov	r18, r24
    4cf4:	08 2e       	mov	r0, r24
    4cf6:	00 0c       	add	r0, r0
    4cf8:	33 0b       	sbc	r19, r19
    4cfa:	3f 93       	push	r19
    4cfc:	8f 93       	push	r24
    4cfe:	82 ec       	ldi	r24, 0xC2	; 194
    4d00:	91 e0       	ldi	r25, 0x01	; 1
    4d02:	9f 93       	push	r25
    4d04:	8f 93       	push	r24
    4d06:	ff 92       	push	r15
    4d08:	ef 92       	push	r14
    4d0a:	0e 94 87 44 	call	0x890e	; 0x890e <sprintf>
    4d0e:	8e 8b       	std	Y+22, r24	; 0x16
		for(uint8_t i=((SSD1306_WIDTH/charsize)-buffersize);i<(SSD1306_WIDTH/charsize);i++){
    4d10:	15 e1       	ldi	r17, 0x15	; 21
    4d12:	18 1b       	sub	r17, r24
    4d14:	0f 90       	pop	r0
    4d16:	0f 90       	pop	r0
    4d18:	0f 90       	pop	r0
    4d1a:	0f 90       	pop	r0
    4d1c:	0f 90       	pop	r0
    4d1e:	0f 90       	pop	r0
    4d20:	15 31       	cpi	r17, 0x15	; 21
    4d22:	08 f0       	brcs	.+2      	; 0x4d26 <_ZN7wandern4drawEv+0x80>
    4d24:	fd c0       	rjmp	.+506    	; 0x4f20 <_ZN7wandern4drawEv+0x27a>
    4d26:	01 2f       	mov	r16, r17
    4d28:	00 0f       	add	r16, r16
    4d2a:	01 0f       	add	r16, r17
    4d2c:	00 0f       	add	r16, r16
			oled->draw_ASCI(buffer[i-((SSD1306_WIDTH/charsize)-buffersize)],i*charsize,0);
    4d2e:	8e 89       	ldd	r24, Y+22	; 0x16
    4d30:	fe 01       	movw	r30, r28
    4d32:	e1 0f       	add	r30, r17
    4d34:	f1 1d       	adc	r31, r1
    4d36:	e8 0f       	add	r30, r24
    4d38:	f1 1d       	adc	r31, r1
    4d3a:	73 97       	sbiw	r30, 0x13	; 19
    4d3c:	20 e0       	ldi	r18, 0x00	; 0
    4d3e:	40 2f       	mov	r20, r16
    4d40:	60 81       	ld	r22, Z
    4d42:	8f 89       	ldd	r24, Y+23	; 0x17
    4d44:	98 8d       	ldd	r25, Y+24	; 0x18
    4d46:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <_ZN7Display9draw_ASCIEhhh>
	void header(){
		for(uint8_t i=0;i<8;i++){
			oled->draw_ASCI(rtc->msg_uhr[i],i*charsize,0);
		}
		buffersize=sprintf(buffer,"Bat: %i%%",Batteriestatus());
		for(uint8_t i=((SSD1306_WIDTH/charsize)-buffersize);i<(SSD1306_WIDTH/charsize);i++){
    4d4a:	1f 5f       	subi	r17, 0xFF	; 255
    4d4c:	0a 5f       	subi	r16, 0xFA	; 250
    4d4e:	15 31       	cpi	r17, 0x15	; 21
    4d50:	71 f7       	brne	.-36     	; 0x4d2e <_ZN7wandern4drawEv+0x88>
    4d52:	e6 c0       	rjmp	.+460    	; 0x4f20 <_ZN7wandern4drawEv+0x27a>
	}
	
	//draw bottom and overload it
	void bottom(){
		for(uint8_t i=0;i<8;i++){
			oled->draw_ASCI(rtc->msg_dat[i],i*charsize+(SSD1306_WIDTH-bitsderrtc*charsize),7*charhighte);
    4d54:	e9 8d       	ldd	r30, Y+25	; 0x19
    4d56:	fa 8d       	ldd	r31, Y+26	; 0x1a
    4d58:	ec 0d       	add	r30, r12
    4d5a:	fd 1d       	adc	r31, r13
    4d5c:	28 e3       	ldi	r18, 0x38	; 56
    4d5e:	41 2f       	mov	r20, r17
    4d60:	60 85       	ldd	r22, Z+8	; 0x08
    4d62:	8f 89       	ldd	r24, Y+23	; 0x17
    4d64:	98 8d       	ldd	r25, Y+24	; 0x18
    4d66:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <_ZN7Display9draw_ASCIEhhh>
    4d6a:	8f ef       	ldi	r24, 0xFF	; 255
    4d6c:	c8 1a       	sub	r12, r24
    4d6e:	d8 0a       	sbc	r13, r24
    4d70:	1a 5f       	subi	r17, 0xFA	; 250
		}
	}
	
	//draw bottom and overload it
	void bottom(){
		for(uint8_t i=0;i<8;i++){
    4d72:	10 38       	cpi	r17, 0x80	; 128
    4d74:	79 f7       	brne	.-34     	; 0x4d54 <_ZN7wandern4drawEv+0xae>
		buffersize=sprintf(buffer,"Data: %c%c%c%c%c",gpsdata[0],gpsdata[1],gpsdata[2],gpsdata[3],gpsdata[4]);
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize,3*charhighte);}
		*/
		
		//Latitude
		buffersize=sprintf(buffer,"Lat: %.7f",lat);
    4d76:	80 91 10 08 	lds	r24, 0x0810
    4d7a:	8f 93       	push	r24
    4d7c:	80 91 0f 08 	lds	r24, 0x080F
    4d80:	8f 93       	push	r24
    4d82:	80 91 0e 08 	lds	r24, 0x080E
    4d86:	8f 93       	push	r24
    4d88:	80 91 0d 08 	lds	r24, 0x080D
    4d8c:	8f 93       	push	r24
    4d8e:	84 e2       	ldi	r24, 0x24	; 36
    4d90:	92 e0       	ldi	r25, 0x02	; 2
    4d92:	9f 93       	push	r25
    4d94:	8f 93       	push	r24
    4d96:	ff 92       	push	r15
    4d98:	ef 92       	push	r14
    4d9a:	0e 94 87 44 	call	0x890e	; 0x890e <sprintf>
    4d9e:	8e 8b       	std	Y+22, r24	; 0x16
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize,2*charhighte);}
    4da0:	2d b7       	in	r18, 0x3d	; 61
    4da2:	3e b7       	in	r19, 0x3e	; 62
    4da4:	28 5f       	subi	r18, 0xF8	; 248
    4da6:	3f 4f       	sbci	r19, 0xFF	; 255
    4da8:	0f b6       	in	r0, 0x3f	; 63
    4daa:	f8 94       	cli
    4dac:	3e bf       	out	0x3e, r19	; 62
    4dae:	0f be       	out	0x3f, r0	; 63
    4db0:	2d bf       	out	0x3d, r18	; 61
    4db2:	88 23       	and	r24, r24
    4db4:	89 f0       	breq	.+34     	; 0x4dd8 <_ZN7wandern4drawEv+0x132>
    4db6:	00 e0       	ldi	r16, 0x00	; 0
    4db8:	10 e0       	ldi	r17, 0x00	; 0
    4dba:	fe 01       	movw	r30, r28
    4dbc:	e1 0f       	add	r30, r17
    4dbe:	f1 1d       	adc	r31, r1
    4dc0:	20 e1       	ldi	r18, 0x10	; 16
    4dc2:	40 2f       	mov	r20, r16
    4dc4:	62 81       	ldd	r22, Z+2	; 0x02
    4dc6:	8f 89       	ldd	r24, Y+23	; 0x17
    4dc8:	98 8d       	ldd	r25, Y+24	; 0x18
    4dca:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <_ZN7Display9draw_ASCIEhhh>
    4dce:	1f 5f       	subi	r17, 0xFF	; 255
    4dd0:	0a 5f       	subi	r16, 0xFA	; 250
    4dd2:	8e 89       	ldd	r24, Y+22	; 0x16
    4dd4:	18 17       	cp	r17, r24
    4dd6:	88 f3       	brcs	.-30     	; 0x4dba <_ZN7wandern4drawEv+0x114>
			
		//Longitude
		buffersize=sprintf(buffer,"Lon: %.7f",lon);
    4dd8:	80 91 0c 08 	lds	r24, 0x080C
    4ddc:	8f 93       	push	r24
    4dde:	80 91 0b 08 	lds	r24, 0x080B
    4de2:	8f 93       	push	r24
    4de4:	80 91 0a 08 	lds	r24, 0x080A
    4de8:	8f 93       	push	r24
    4dea:	80 91 09 08 	lds	r24, 0x0809
    4dee:	8f 93       	push	r24
    4df0:	8e e2       	ldi	r24, 0x2E	; 46
    4df2:	92 e0       	ldi	r25, 0x02	; 2
    4df4:	9f 93       	push	r25
    4df6:	8f 93       	push	r24
    4df8:	ff 92       	push	r15
    4dfa:	ef 92       	push	r14
    4dfc:	0e 94 87 44 	call	0x890e	; 0x890e <sprintf>
    4e00:	8e 8b       	std	Y+22, r24	; 0x16
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize,3*charhighte);}
    4e02:	2d b7       	in	r18, 0x3d	; 61
    4e04:	3e b7       	in	r19, 0x3e	; 62
    4e06:	28 5f       	subi	r18, 0xF8	; 248
    4e08:	3f 4f       	sbci	r19, 0xFF	; 255
    4e0a:	0f b6       	in	r0, 0x3f	; 63
    4e0c:	f8 94       	cli
    4e0e:	3e bf       	out	0x3e, r19	; 62
    4e10:	0f be       	out	0x3f, r0	; 63
    4e12:	2d bf       	out	0x3d, r18	; 61
    4e14:	88 23       	and	r24, r24
    4e16:	89 f0       	breq	.+34     	; 0x4e3a <_ZN7wandern4drawEv+0x194>
    4e18:	00 e0       	ldi	r16, 0x00	; 0
    4e1a:	10 e0       	ldi	r17, 0x00	; 0
    4e1c:	fe 01       	movw	r30, r28
    4e1e:	e1 0f       	add	r30, r17
    4e20:	f1 1d       	adc	r31, r1
    4e22:	28 e1       	ldi	r18, 0x18	; 24
    4e24:	40 2f       	mov	r20, r16
    4e26:	62 81       	ldd	r22, Z+2	; 0x02
    4e28:	8f 89       	ldd	r24, Y+23	; 0x17
    4e2a:	98 8d       	ldd	r25, Y+24	; 0x18
    4e2c:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <_ZN7Display9draw_ASCIEhhh>
    4e30:	1f 5f       	subi	r17, 0xFF	; 255
    4e32:	0a 5f       	subi	r16, 0xFA	; 250
    4e34:	8e 89       	ldd	r24, Y+22	; 0x16
    4e36:	18 17       	cp	r17, r24
    4e38:	88 f3       	brcs	.-30     	; 0x4e1c <_ZN7wandern4drawEv+0x176>
			
		//Speed
		buffersize=sprintf(buffer,"Spe: %.4f",gpsspeed);
    4e3a:	80 91 08 08 	lds	r24, 0x0808
    4e3e:	8f 93       	push	r24
    4e40:	80 91 07 08 	lds	r24, 0x0807
    4e44:	8f 93       	push	r24
    4e46:	80 91 06 08 	lds	r24, 0x0806
    4e4a:	8f 93       	push	r24
    4e4c:	80 91 05 08 	lds	r24, 0x0805
    4e50:	8f 93       	push	r24
    4e52:	88 e3       	ldi	r24, 0x38	; 56
    4e54:	92 e0       	ldi	r25, 0x02	; 2
    4e56:	9f 93       	push	r25
    4e58:	8f 93       	push	r24
    4e5a:	ff 92       	push	r15
    4e5c:	ef 92       	push	r14
    4e5e:	0e 94 87 44 	call	0x890e	; 0x890e <sprintf>
    4e62:	8e 8b       	std	Y+22, r24	; 0x16
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize,4*charhighte);}
    4e64:	2d b7       	in	r18, 0x3d	; 61
    4e66:	3e b7       	in	r19, 0x3e	; 62
    4e68:	28 5f       	subi	r18, 0xF8	; 248
    4e6a:	3f 4f       	sbci	r19, 0xFF	; 255
    4e6c:	0f b6       	in	r0, 0x3f	; 63
    4e6e:	f8 94       	cli
    4e70:	3e bf       	out	0x3e, r19	; 62
    4e72:	0f be       	out	0x3f, r0	; 63
    4e74:	2d bf       	out	0x3d, r18	; 61
    4e76:	88 23       	and	r24, r24
    4e78:	89 f0       	breq	.+34     	; 0x4e9c <_ZN7wandern4drawEv+0x1f6>
    4e7a:	00 e0       	ldi	r16, 0x00	; 0
    4e7c:	10 e0       	ldi	r17, 0x00	; 0
    4e7e:	fe 01       	movw	r30, r28
    4e80:	e1 0f       	add	r30, r17
    4e82:	f1 1d       	adc	r31, r1
    4e84:	20 e2       	ldi	r18, 0x20	; 32
    4e86:	40 2f       	mov	r20, r16
    4e88:	62 81       	ldd	r22, Z+2	; 0x02
    4e8a:	8f 89       	ldd	r24, Y+23	; 0x17
    4e8c:	98 8d       	ldd	r25, Y+24	; 0x18
    4e8e:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <_ZN7Display9draw_ASCIEhhh>
    4e92:	1f 5f       	subi	r17, 0xFF	; 255
    4e94:	0a 5f       	subi	r16, 0xFA	; 250
    4e96:	8e 89       	ldd	r24, Y+22	; 0x16
    4e98:	18 17       	cp	r17, r24
    4e9a:	88 f3       	brcs	.-30     	; 0x4e7e <_ZN7wandern4drawEv+0x1d8>
		/*
		for(uint8_t i=18;i<35;i++){oled->draw_ASCI(gpsdata[i],(i-18)*charsize,4*charhighte);}
			*/
		//gpstime
		buffersize=sprintf(buffer,"%02i:%02i:%02i %02i.%02i.%02i",gpsstunde,gpsminute,gpssekunde,gpsTag,gpsMonat,gpsJahr);
    4e9c:	80 91 ff 07 	lds	r24, 0x07FF
    4ea0:	1f 92       	push	r1
    4ea2:	8f 93       	push	r24
    4ea4:	80 91 00 08 	lds	r24, 0x0800
    4ea8:	1f 92       	push	r1
    4eaa:	8f 93       	push	r24
    4eac:	80 91 01 08 	lds	r24, 0x0801
    4eb0:	1f 92       	push	r1
    4eb2:	8f 93       	push	r24
    4eb4:	80 91 02 08 	lds	r24, 0x0802
    4eb8:	1f 92       	push	r1
    4eba:	8f 93       	push	r24
    4ebc:	80 91 03 08 	lds	r24, 0x0803
    4ec0:	1f 92       	push	r1
    4ec2:	8f 93       	push	r24
    4ec4:	80 91 04 08 	lds	r24, 0x0804
    4ec8:	1f 92       	push	r1
    4eca:	8f 93       	push	r24
    4ecc:	82 e4       	ldi	r24, 0x42	; 66
    4ece:	92 e0       	ldi	r25, 0x02	; 2
    4ed0:	9f 93       	push	r25
    4ed2:	8f 93       	push	r24
    4ed4:	ff 92       	push	r15
    4ed6:	ef 92       	push	r14
    4ed8:	0e 94 87 44 	call	0x890e	; 0x890e <sprintf>
    4edc:	8e 8b       	std	Y+22, r24	; 0x16
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize,5*charhighte);}
    4ede:	2d b7       	in	r18, 0x3d	; 61
    4ee0:	3e b7       	in	r19, 0x3e	; 62
    4ee2:	20 5f       	subi	r18, 0xF0	; 240
    4ee4:	3f 4f       	sbci	r19, 0xFF	; 255
    4ee6:	0f b6       	in	r0, 0x3f	; 63
    4ee8:	f8 94       	cli
    4eea:	3e bf       	out	0x3e, r19	; 62
    4eec:	0f be       	out	0x3f, r0	; 63
    4eee:	2d bf       	out	0x3d, r18	; 61
    4ef0:	88 23       	and	r24, r24
    4ef2:	89 f0       	breq	.+34     	; 0x4f16 <_ZN7wandern4drawEv+0x270>
    4ef4:	00 e0       	ldi	r16, 0x00	; 0
    4ef6:	10 e0       	ldi	r17, 0x00	; 0
    4ef8:	fe 01       	movw	r30, r28
    4efa:	e1 0f       	add	r30, r17
    4efc:	f1 1d       	adc	r31, r1
    4efe:	28 e2       	ldi	r18, 0x28	; 40
    4f00:	40 2f       	mov	r20, r16
    4f02:	62 81       	ldd	r22, Z+2	; 0x02
    4f04:	8f 89       	ldd	r24, Y+23	; 0x17
    4f06:	98 8d       	ldd	r25, Y+24	; 0x18
    4f08:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <_ZN7Display9draw_ASCIEhhh>
    4f0c:	1f 5f       	subi	r17, 0xFF	; 255
    4f0e:	0a 5f       	subi	r16, 0xFA	; 250
    4f10:	8e 89       	ldd	r24, Y+22	; 0x16
    4f12:	18 17       	cp	r17, r24
    4f14:	88 f3       	brcs	.-30     	; 0x4ef8 <_ZN7wandern4drawEv+0x252>
		oled->clearFrame();
	}

	//send the frame to the display
	void send(){
		oled->sendFrame();	
    4f16:	8f 89       	ldd	r24, Y+23	; 0x17
    4f18:	98 8d       	ldd	r25, Y+24	; 0x18
    4f1a:	0e 94 31 08 	call	0x1062	; 0x1062 <_ZN7Display9sendFrameEv>
    4f1e:	04 c0       	rjmp	.+8      	; 0x4f28 <_ZN7wandern4drawEv+0x282>
		return 0;
	}
	
	//drawfunktion
	virtual void draw(){
		oled->clearFrame();
    4f20:	10 e5       	ldi	r17, 0x50	; 80
    4f22:	c1 2c       	mov	r12, r1
    4f24:	d1 2c       	mov	r13, r1
    4f26:	16 cf       	rjmp	.-468    	; 0x4d54 <_ZN7wandern4drawEv+0xae>
		//gpstime
		buffersize=sprintf(buffer,"%02i:%02i:%02i %02i.%02i.%02i",gpsstunde,gpsminute,gpssekunde,gpsTag,gpsMonat,gpsJahr);
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize,5*charhighte);}
		
		send();	
	}
    4f28:	df 91       	pop	r29
    4f2a:	cf 91       	pop	r28
    4f2c:	1f 91       	pop	r17
    4f2e:	0f 91       	pop	r16
    4f30:	ff 90       	pop	r15
    4f32:	ef 90       	pop	r14
    4f34:	df 90       	pop	r13
    4f36:	cf 90       	pop	r12
    4f38:	08 95       	ret

00004f3a <_Z12EEPROM_Writejh>:

#ifndef EEPROM_H_
#define EEPROM_H_

void EEPROM_Write(uint16_t adresse, uint8_t data){
	cli();	//zur sicherheit interrupts ausschalten
    4f3a:	f8 94       	cli
	while(EECR&(1<<EEPE));
    4f3c:	f9 99       	sbic	0x1f, 1	; 31
    4f3e:	fe cf       	rjmp	.-4      	; 0x4f3c <_Z12EEPROM_Writejh+0x2>
	
	//schreibe adresse und data
	EEAR = adresse;
    4f40:	92 bd       	out	0x22, r25	; 34
    4f42:	81 bd       	out	0x21, r24	; 33
	EEDR = data;
    4f44:	60 bd       	out	0x20, r22	; 32
	//fuehre schreiben aus
	EECR |= (1<<EEMPE);
    4f46:	fa 9a       	sbi	0x1f, 2	; 31
	EECR |= (1<<EEPE);
    4f48:	f9 9a       	sbi	0x1f, 1	; 31
	
	sei();
    4f4a:	78 94       	sei
    4f4c:	08 95       	ret

00004f4e <_ZN7wandern11tastendruckEPh>:
				name[i] = ' ';
			}
		}
	}
	
	uint8_t tastendruck(uint8_t *tast){
    4f4e:	cf 93       	push	r28
    4f50:	df 93       	push	r29
    4f52:	ec 01       	movw	r28, r24
		if (*tast=='e')
    4f54:	fb 01       	movw	r30, r22
    4f56:	90 81       	ld	r25, Z
    4f58:	95 36       	cpi	r25, 0x65	; 101
    4f5a:	09 f0       	breq	.+2      	; 0x4f5e <_ZN7wandern11tastendruckEPh+0x10>
    4f5c:	40 c0       	rjmp	.+128    	; 0x4fde <_ZN7wandern11tastendruckEPh+0x90>
		{
			rtc->Stunden	= gpsstunde;
    4f5e:	e9 8d       	ldd	r30, Y+25	; 0x19
    4f60:	fa 8d       	ldd	r31, Y+26	; 0x1a
    4f62:	80 91 04 08 	lds	r24, 0x0804
    4f66:	80 8b       	std	Z+16, r24	; 0x10
			rtc->Minuten	= gpsminute;
    4f68:	e9 8d       	ldd	r30, Y+25	; 0x19
    4f6a:	fa 8d       	ldd	r31, Y+26	; 0x1a
    4f6c:	80 91 03 08 	lds	r24, 0x0803
    4f70:	81 8b       	std	Z+17, r24	; 0x11
			rtc->Sekunden	= gpssekunde;
    4f72:	e9 8d       	ldd	r30, Y+25	; 0x19
    4f74:	fa 8d       	ldd	r31, Y+26	; 0x1a
    4f76:	80 91 02 08 	lds	r24, 0x0802
    4f7a:	82 8b       	std	Z+18, r24	; 0x12
			
			rtc->Tag		= gpsTag;
    4f7c:	e9 8d       	ldd	r30, Y+25	; 0x19
    4f7e:	fa 8d       	ldd	r31, Y+26	; 0x1a
    4f80:	80 91 01 08 	lds	r24, 0x0801
    4f84:	84 8b       	std	Z+20, r24	; 0x14
			rtc->Monat		= gpsMonat;
    4f86:	e9 8d       	ldd	r30, Y+25	; 0x19
    4f88:	fa 8d       	ldd	r31, Y+26	; 0x1a
    4f8a:	80 91 00 08 	lds	r24, 0x0800
    4f8e:	86 8b       	std	Z+22, r24	; 0x16
			rtc->Jahr		= gpsJahr;
    4f90:	e9 8d       	ldd	r30, Y+25	; 0x19
    4f92:	fa 8d       	ldd	r31, Y+26	; 0x1a
    4f94:	80 91 ff 07 	lds	r24, 0x07FF
    4f98:	87 8b       	std	Z+23, r24	; 0x17
			rtc->ausgabedatumneu();
    4f9a:	89 8d       	ldd	r24, Y+25	; 0x19
    4f9c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    4f9e:	0e 94 98 39 	call	0x7330	; 0x7330 <_ZN3RTC15ausgabedatumneuEv>
			//speichern der neuen Zeit im EEPROM
			EEPROM_Write(EEMINUTEN,rtc->Minuten);
    4fa2:	e9 8d       	ldd	r30, Y+25	; 0x19
    4fa4:	fa 8d       	ldd	r31, Y+26	; 0x1a
    4fa6:	61 89       	ldd	r22, Z+17	; 0x11
    4fa8:	80 e0       	ldi	r24, 0x00	; 0
    4faa:	90 e0       	ldi	r25, 0x00	; 0
    4fac:	c6 df       	rcall	.-116    	; 0x4f3a <_Z12EEPROM_Writejh>
			EEPROM_Write(EESTUNDEN,rtc->Stunden);
    4fae:	e9 8d       	ldd	r30, Y+25	; 0x19
    4fb0:	fa 8d       	ldd	r31, Y+26	; 0x1a
    4fb2:	60 89       	ldd	r22, Z+16	; 0x10
    4fb4:	81 e0       	ldi	r24, 0x01	; 1
    4fb6:	90 e0       	ldi	r25, 0x00	; 0
    4fb8:	c0 df       	rcall	.-128    	; 0x4f3a <_Z12EEPROM_Writejh>
			EEPROM_Write(EETAGE,rtc->Tag);
    4fba:	e9 8d       	ldd	r30, Y+25	; 0x19
    4fbc:	fa 8d       	ldd	r31, Y+26	; 0x1a
    4fbe:	64 89       	ldd	r22, Z+20	; 0x14
    4fc0:	82 e0       	ldi	r24, 0x02	; 2
    4fc2:	90 e0       	ldi	r25, 0x00	; 0
    4fc4:	ba df       	rcall	.-140    	; 0x4f3a <_Z12EEPROM_Writejh>
			EEPROM_Write(EEMONAT,rtc->Monat);
    4fc6:	e9 8d       	ldd	r30, Y+25	; 0x19
    4fc8:	fa 8d       	ldd	r31, Y+26	; 0x1a
    4fca:	66 89       	ldd	r22, Z+22	; 0x16
    4fcc:	83 e0       	ldi	r24, 0x03	; 3
    4fce:	90 e0       	ldi	r25, 0x00	; 0
    4fd0:	b4 df       	rcall	.-152    	; 0x4f3a <_Z12EEPROM_Writejh>
			EEPROM_Write(EEJAHR,rtc->Jahr);
    4fd2:	e9 8d       	ldd	r30, Y+25	; 0x19
    4fd4:	fa 8d       	ldd	r31, Y+26	; 0x1a
    4fd6:	67 89       	ldd	r22, Z+23	; 0x17
    4fd8:	84 e0       	ldi	r24, 0x04	; 4
    4fda:	90 e0       	ldi	r25, 0x00	; 0
    4fdc:	ae df       	rcall	.-164    	; 0x4f3a <_Z12EEPROM_Writejh>
		}
		return 0;
	}
    4fde:	80 e0       	ldi	r24, 0x00	; 0
    4fe0:	df 91       	pop	r29
    4fe2:	cf 91       	pop	r28
    4fe4:	08 95       	ret

00004fe6 <_Z11EEPROM_Readj>:
}

uint8_t EEPROM_Read(uint16_t adresse){
	cli();	//zur sicherheit interrupts ausschalten
    4fe6:	f8 94       	cli
	while(EECR&(1<<EEPE));
    4fe8:	f9 99       	sbic	0x1f, 1	; 31
    4fea:	fe cf       	rjmp	.-4      	; 0x4fe8 <_Z11EEPROM_Readj+0x2>
	
	//schreibe adresse
	EEAR = adresse;
    4fec:	92 bd       	out	0x22, r25	; 34
    4fee:	81 bd       	out	0x21, r24	; 33
	//fuehre lesen aus
	EECR |= (1<<EERE);
    4ff0:	f8 9a       	sbi	0x1f, 0	; 31
	
	sei();
    4ff2:	78 94       	sei
	return EEDR;
    4ff4:	80 b5       	in	r24, 0x20	; 32
}
    4ff6:	08 95       	ret

00004ff8 <__vector_16>:

//schlechte variante der Uhreinstellung
void uhreinstellen();

//SD karten Timer
ISR(TIMER0_COMPA_vect){
    4ff8:	1f 92       	push	r1
    4ffa:	0f 92       	push	r0
    4ffc:	0f b6       	in	r0, 0x3f	; 63
    4ffe:	0f 92       	push	r0
    5000:	11 24       	eor	r1, r1
    5002:	0b b6       	in	r0, 0x3b	; 59
    5004:	0f 92       	push	r0
    5006:	2f 93       	push	r18
    5008:	3f 93       	push	r19
    500a:	4f 93       	push	r20
    500c:	5f 93       	push	r21
    500e:	6f 93       	push	r22
    5010:	7f 93       	push	r23
    5012:	8f 93       	push	r24
    5014:	9f 93       	push	r25
    5016:	af 93       	push	r26
    5018:	bf 93       	push	r27
    501a:	ef 93       	push	r30
    501c:	ff 93       	push	r31
	disk_timerproc();	//Timer der SD Karte
    501e:	0e 94 9a 07 	call	0xf34	; 0xf34 <disk_timerproc>
}
    5022:	ff 91       	pop	r31
    5024:	ef 91       	pop	r30
    5026:	bf 91       	pop	r27
    5028:	af 91       	pop	r26
    502a:	9f 91       	pop	r25
    502c:	8f 91       	pop	r24
    502e:	7f 91       	pop	r23
    5030:	6f 91       	pop	r22
    5032:	5f 91       	pop	r21
    5034:	4f 91       	pop	r20
    5036:	3f 91       	pop	r19
    5038:	2f 91       	pop	r18
    503a:	0f 90       	pop	r0
    503c:	0b be       	out	0x3b, r0	; 59
    503e:	0f 90       	pop	r0
    5040:	0f be       	out	0x3f, r0	; 63
    5042:	0f 90       	pop	r0
    5044:	1f 90       	pop	r1
    5046:	18 95       	reti

00005048 <__vector_11>:

ISR(TIMER2_OVF_vect){	//Vektor fuer die RTC
    5048:	1f 92       	push	r1
    504a:	0f 92       	push	r0
    504c:	0f b6       	in	r0, 0x3f	; 63
    504e:	0f 92       	push	r0
    5050:	11 24       	eor	r1, r1
    5052:	0b b6       	in	r0, 0x3b	; 59
    5054:	0f 92       	push	r0
    5056:	8f 93       	push	r24
    5058:	ef 93       	push	r30
    505a:	ff 93       	push	r31
	//TCNT2=TIMER2RTCTIME;
	rtc.Sekunden++;
    505c:	ef e5       	ldi	r30, 0x5F	; 95
    505e:	fd e0       	ldi	r31, 0x0D	; 13
    5060:	82 89       	ldd	r24, Z+18	; 0x12
    5062:	8f 5f       	subi	r24, 0xFF	; 255
    5064:	82 8b       	std	Z+18, r24	; 0x12
	rtc.interupts|= (1<<sekundeninterupt);
    5066:	80 8d       	ldd	r24, Z+24	; 0x18
    5068:	82 60       	ori	r24, 0x02	; 2
    506a:	80 8f       	std	Z+24, r24	; 0x18
}
    506c:	ff 91       	pop	r31
    506e:	ef 91       	pop	r30
    5070:	8f 91       	pop	r24
    5072:	0f 90       	pop	r0
    5074:	0b be       	out	0x3b, r0	; 59
    5076:	0f 90       	pop	r0
    5078:	0f be       	out	0x3f, r0	; 63
    507a:	0f 90       	pop	r0
    507c:	1f 90       	pop	r1
    507e:	18 95       	reti

00005080 <__vector_13>:

ISR(TIMER1_COMPA_vect){
    5080:	1f 92       	push	r1
    5082:	0f 92       	push	r0
    5084:	0f b6       	in	r0, 0x3f	; 63
    5086:	0f 92       	push	r0
    5088:	11 24       	eor	r1, r1
    508a:	8f 93       	push	r24
	statusreg |= (1<<updaterate);
    508c:	80 91 5d 08 	lds	r24, 0x085D
    5090:	81 60       	ori	r24, 0x01	; 1
    5092:	80 93 5d 08 	sts	0x085D, r24
}
    5096:	8f 91       	pop	r24
    5098:	0f 90       	pop	r0
    509a:	0f be       	out	0x3f, r0	; 63
    509c:	0f 90       	pop	r0
    509e:	1f 90       	pop	r1
    50a0:	18 95       	reti

000050a2 <__vector_20>:
uint8_t gpssekunde;
uint8_t gpsTag;
uint8_t gpsMonat;
uint8_t gpsJahr;

ISR(USART0_RX_vect){
    50a2:	1f 92       	push	r1
    50a4:	0f 92       	push	r0
    50a6:	0f b6       	in	r0, 0x3f	; 63
    50a8:	0f 92       	push	r0
    50aa:	11 24       	eor	r1, r1
    50ac:	0b b6       	in	r0, 0x3b	; 59
    50ae:	0f 92       	push	r0
    50b0:	2f 93       	push	r18
    50b2:	8f 93       	push	r24
    50b4:	9f 93       	push	r25
    50b6:	ef 93       	push	r30
    50b8:	ff 93       	push	r31
	uint8_t temp = UDR0;
    50ba:	20 91 c6 00 	lds	r18, 0x00C6
	if (temp == '$' && !(gpsstatus&(1<<complete)) && !(gpsstatus&(1<<completenotvalid)))
    50be:	24 32       	cpi	r18, 0x24	; 36
    50c0:	51 f4       	brne	.+20     	; 0x50d6 <__vector_20+0x34>
    50c2:	80 91 5a 08 	lds	r24, 0x085A
    50c6:	98 2f       	mov	r25, r24
    50c8:	9c 70       	andi	r25, 0x0C	; 12
    50ca:	29 f4       	brne	.+10     	; 0x50d6 <__vector_20+0x34>
	{
		gpscounter = 0;
    50cc:	10 92 11 08 	sts	0x0811, r1
		gpsstatus |= (1<<message);
    50d0:	81 60       	ori	r24, 0x01	; 1
    50d2:	80 93 5a 08 	sts	0x085A, r24
	}
	if ((gpsstatus&(1<<message)))
    50d6:	90 91 5a 08 	lds	r25, 0x085A
    50da:	90 ff       	sbrs	r25, 0
    50dc:	3c c0       	rjmp	.+120    	; 0x5156 <__vector_20+0xb4>
	{
		gpsdata[gpscounter] = temp;
    50de:	80 91 11 08 	lds	r24, 0x0811
    50e2:	e8 2f       	mov	r30, r24
    50e4:	f0 e0       	ldi	r31, 0x00	; 0
    50e6:	ee 5e       	subi	r30, 0xEE	; 238
    50e8:	f7 4f       	sbci	r31, 0xF7	; 247
    50ea:	20 83       	st	Z, r18
		gpscounter++;
    50ec:	8f 5f       	subi	r24, 0xFF	; 255
    50ee:	80 93 11 08 	sts	0x0811, r24
		if (gpscounter>72)
    50f2:	89 34       	cpi	r24, 0x49	; 73
    50f4:	20 f0       	brcs	.+8      	; 0x50fe <__vector_20+0x5c>
		{
			gpsstatus &= ~(1<<message);
    50f6:	9e 7f       	andi	r25, 0xFE	; 254
    50f8:	90 93 5a 08 	sts	0x085A, r25
    50fc:	2c c0       	rjmp	.+88     	; 0x5156 <__vector_20+0xb4>
		}
		else if (gpscounter==19)
    50fe:	83 31       	cpi	r24, 0x13	; 19
    5100:	c9 f4       	brne	.+50     	; 0x5134 <__vector_20+0x92>
		{
			if (gpsdata[4]=='M' && gpsdata[5]=='C')
    5102:	80 91 16 08 	lds	r24, 0x0816
    5106:	8d 34       	cpi	r24, 0x4D	; 77
    5108:	89 f4       	brne	.+34     	; 0x512c <__vector_20+0x8a>
    510a:	80 91 17 08 	lds	r24, 0x0817
    510e:	83 34       	cpi	r24, 0x43	; 67
    5110:	69 f4       	brne	.+26     	; 0x512c <__vector_20+0x8a>
			{
				if (gpsdata[18]!='A')
    5112:	80 91 24 08 	lds	r24, 0x0824
    5116:	81 34       	cpi	r24, 0x41	; 65
    5118:	29 f0       	breq	.+10     	; 0x5124 <__vector_20+0x82>
				{
					gpsstatus &= ~((1<<valid));
    511a:	9d 7f       	andi	r25, 0xFD	; 253
					gpsstatus |= (1<<notvalidgetdate);
    511c:	90 61       	ori	r25, 0x10	; 16
    511e:	90 93 5a 08 	sts	0x085A, r25
    5122:	19 c0       	rjmp	.+50     	; 0x5156 <__vector_20+0xb4>
				}
				else{
					gpsstatus |= (1<<valid);
    5124:	92 60       	ori	r25, 0x02	; 2
    5126:	90 93 5a 08 	sts	0x085A, r25
    512a:	15 c0       	rjmp	.+42     	; 0x5156 <__vector_20+0xb4>
				}
			}
			else{
				gpsstatus &= ~(1<<valid);
				gpsstatus &= ~(1<<message);
    512c:	9c 7f       	andi	r25, 0xFC	; 252
    512e:	90 93 5a 08 	sts	0x085A, r25
    5132:	11 c0       	rjmp	.+34     	; 0x5156 <__vector_20+0xb4>
			}
		}
		else if (gpscounter == 42 && (gpsstatus&(1<<notvalidgetdate)))
    5134:	8a 32       	cpi	r24, 0x2A	; 42
    5136:	39 f4       	brne	.+14     	; 0x5146 <__vector_20+0xa4>
    5138:	94 ff       	sbrs	r25, 4
    513a:	0d c0       	rjmp	.+26     	; 0x5156 <__vector_20+0xb4>
		{
			gpsstatus |= (1<<completenotvalid);
			gpsstatus &= ~((1<<message) | (1<<notvalidgetdate));
    513c:	9e 7e       	andi	r25, 0xEE	; 238
    513e:	98 60       	ori	r25, 0x08	; 8
    5140:	90 93 5a 08 	sts	0x085A, r25
    5144:	08 c0       	rjmp	.+16     	; 0x5156 <__vector_20+0xb4>
		}
		else if (gpscounter == 70 && (gpsstatus&(1<<valid)))
    5146:	86 34       	cpi	r24, 0x46	; 70
    5148:	31 f4       	brne	.+12     	; 0x5156 <__vector_20+0xb4>
    514a:	91 ff       	sbrs	r25, 1
    514c:	04 c0       	rjmp	.+8      	; 0x5156 <__vector_20+0xb4>
		{
			gpsstatus |= (1<<complete);
			gpsstatus &= ~((1<<message) | (1<<valid));
    514e:	9c 7f       	andi	r25, 0xFC	; 252
    5150:	94 60       	ori	r25, 0x04	; 4
    5152:	90 93 5a 08 	sts	0x085A, r25
		}
	}
}
    5156:	ff 91       	pop	r31
    5158:	ef 91       	pop	r30
    515a:	9f 91       	pop	r25
    515c:	8f 91       	pop	r24
    515e:	2f 91       	pop	r18
    5160:	0f 90       	pop	r0
    5162:	0b be       	out	0x3b, r0	; 59
    5164:	0f 90       	pop	r0
    5166:	0f be       	out	0x3f, r0	; 63
    5168:	0f 90       	pop	r0
    516a:	1f 90       	pop	r1
    516c:	18 95       	reti

0000516e <_Z6nullenv>:
double geschw;
double strecke;
double maxgeschw;
uint32_t Fahrtzeit;
void nullen(){
	geschw = 0;
    516e:	10 92 fb 07 	sts	0x07FB, r1
    5172:	10 92 fc 07 	sts	0x07FC, r1
    5176:	10 92 fd 07 	sts	0x07FD, r1
    517a:	10 92 fe 07 	sts	0x07FE, r1
	strecke = 0;
    517e:	10 92 f7 07 	sts	0x07F7, r1
    5182:	10 92 f8 07 	sts	0x07F8, r1
    5186:	10 92 f9 07 	sts	0x07F9, r1
    518a:	10 92 fa 07 	sts	0x07FA, r1
	maxgeschw = 0;
    518e:	10 92 f3 07 	sts	0x07F3, r1
    5192:	10 92 f4 07 	sts	0x07F4, r1
    5196:	10 92 f5 07 	sts	0x07F5, r1
    519a:	10 92 f6 07 	sts	0x07F6, r1
	Fahrtzeit = 0;
    519e:	10 92 ef 07 	sts	0x07EF, r1
    51a2:	10 92 f0 07 	sts	0x07F0, r1
    51a6:	10 92 f1 07 	sts	0x07F1, r1
    51aa:	10 92 f2 07 	sts	0x07F2, r1
    51ae:	08 95       	ret

000051b0 <_ZN5tacho11tastendruckEPh>:
		nullen();
	}

	//Tasterhandler
	uint8_t tastendruck(uint8_t *tast){
		if (*tast=='e')
    51b0:	fb 01       	movw	r30, r22
    51b2:	80 81       	ld	r24, Z
    51b4:	85 36       	cpi	r24, 0x65	; 101
    51b6:	09 f4       	brne	.+2      	; 0x51ba <_ZN5tacho11tastendruckEPh+0xa>
		{
			nullen();
    51b8:	da df       	rcall	.-76     	; 0x516e <_Z6nullenv>
		}
		return 0;
	}
    51ba:	80 e0       	ldi	r24, 0x00	; 0
    51bc:	08 95       	ret

000051be <_Z13reed_debouncePVhh>:
}
uint8_t reed_debounce(volatile uint8_t *port, uint8_t pin)
{
	if ( (*port & (1 << pin)) )
    51be:	fc 01       	movw	r30, r24
    51c0:	20 81       	ld	r18, Z
    51c2:	30 e0       	ldi	r19, 0x00	; 0
    51c4:	06 2e       	mov	r0, r22
    51c6:	02 c0       	rjmp	.+4      	; 0x51cc <_Z13reed_debouncePVhh+0xe>
    51c8:	35 95       	asr	r19
    51ca:	27 95       	ror	r18
    51cc:	0a 94       	dec	r0
    51ce:	e2 f7       	brpl	.-8      	; 0x51c8 <_Z13reed_debouncePVhh+0xa>
    51d0:	20 ff       	sbrs	r18, 0
    51d2:	16 c0       	rjmp	.+44     	; 0x5200 <_Z13reed_debouncePVhh+0x42>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    51d4:	ef e0       	ldi	r30, 0x0F	; 15
    51d6:	f7 e2       	ldi	r31, 0x27	; 39
    51d8:	31 97       	sbiw	r30, 0x01	; 1
    51da:	f1 f7       	brne	.-4      	; 0x51d8 <_Z13reed_debouncePVhh+0x1a>
    51dc:	00 c0       	rjmp	.+0      	; 0x51de <_Z13reed_debouncePVhh+0x20>
    51de:	00 00       	nop
	{
		/* Pin wurde auf Masse gezogen, ms warten   */
		_delay_ms(REEDMS);
		if ( !(*port & (1 << pin)) )
    51e0:	fc 01       	movw	r30, r24
    51e2:	80 81       	ld	r24, Z
    51e4:	90 e0       	ldi	r25, 0x00	; 0
    51e6:	02 c0       	rjmp	.+4      	; 0x51ec <_Z13reed_debouncePVhh+0x2e>
    51e8:	95 95       	asr	r25
    51ea:	87 95       	ror	r24
    51ec:	6a 95       	dec	r22
    51ee:	e2 f7       	brpl	.-8      	; 0x51e8 <_Z13reed_debouncePVhh+0x2a>
    51f0:	80 fd       	sbrc	r24, 0
    51f2:	08 c0       	rjmp	.+16     	; 0x5204 <_Z13reed_debouncePVhh+0x46>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    51f4:	f2 e0       	ldi	r31, 0x02	; 2
    51f6:	fa 95       	dec	r31
    51f8:	f1 f7       	brne	.-4      	; 0x51f6 <_Z13reed_debouncePVhh+0x38>
    51fa:	00 c0       	rjmp	.+0      	; 0x51fc <_Z13reed_debouncePVhh+0x3e>
		{
			/* Anwender Zeit zum Loslassen des Tasters geben */
			_delay_us(1);
			return 1;
    51fc:	81 e0       	ldi	r24, 0x01	; 1
    51fe:	08 95       	ret
		}
	}
	return 0;
    5200:	80 e0       	ldi	r24, 0x00	; 0
    5202:	08 95       	ret
    5204:	80 e0       	ldi	r24, 0x00	; 0
}
    5206:	08 95       	ret

00005208 <_Z15geschwindigkeitf>:
//Berechnung der Geschwindigkeit
void geschwindigkeit(float durch){
    5208:	cf 92       	push	r12
    520a:	df 92       	push	r13
    520c:	ef 92       	push	r14
    520e:	ff 92       	push	r15
    5210:	cf 93       	push	r28
    5212:	df 93       	push	r29
	//Einholen der Daten und ruecksetzen
	uint16_t zaehlungen = TCNT1;
    5214:	e4 e8       	ldi	r30, 0x84	; 132
    5216:	f0 e0       	ldi	r31, 0x00	; 0
    5218:	c0 81       	ld	r28, Z
    521a:	d1 81       	ldd	r29, Z+1	; 0x01
	TCNT1 = 0;
    521c:	11 82       	std	Z+1, r1	; 0x01
    521e:	10 82       	st	Z, r1
	//Berechnung
	double temp = geschw;
	double umlaufzeit = (REEDMS/1000.0+(zaehlungen/zaehlungenprozeiteinheit)*zeitproachtzaehlungen);
	geschw = (durch)*M_PI*3.6;
    5220:	2b ed       	ldi	r18, 0xDB	; 219
    5222:	3f e0       	ldi	r19, 0x0F	; 15
    5224:	49 e4       	ldi	r20, 0x49	; 73
    5226:	50 e4       	ldi	r21, 0x40	; 64
    5228:	0e 94 b5 3c 	call	0x796a	; 0x796a <__mulsf3>
    522c:	26 e6       	ldi	r18, 0x66	; 102
    522e:	36 e6       	ldi	r19, 0x66	; 102
    5230:	46 e6       	ldi	r20, 0x66	; 102
    5232:	50 e4       	ldi	r21, 0x40	; 64
    5234:	0e 94 b5 3c 	call	0x796a	; 0x796a <__mulsf3>
    5238:	6b 01       	movw	r12, r22
    523a:	7c 01       	movw	r14, r24
	//Einholen der Daten und ruecksetzen
	uint16_t zaehlungen = TCNT1;
	TCNT1 = 0;
	//Berechnung
	double temp = geschw;
	double umlaufzeit = (REEDMS/1000.0+(zaehlungen/zaehlungenprozeiteinheit)*zeitproachtzaehlungen);
    523c:	be 01       	movw	r22, r28
    523e:	80 e0       	ldi	r24, 0x00	; 0
    5240:	90 e0       	ldi	r25, 0x00	; 0
    5242:	0e 94 9a 3b 	call	0x7734	; 0x7734 <__floatunsisf>
    5246:	20 e0       	ldi	r18, 0x00	; 0
    5248:	30 e0       	ldi	r19, 0x00	; 0
    524a:	40 e0       	ldi	r20, 0x00	; 0
    524c:	5e e3       	ldi	r21, 0x3E	; 62
    524e:	0e 94 b5 3c 	call	0x796a	; 0x796a <__mulsf3>
    5252:	2d eb       	ldi	r18, 0xBD	; 189
    5254:	37 e3       	ldi	r19, 0x37	; 55
    5256:	46 e8       	ldi	r20, 0x86	; 134
    5258:	5a e3       	ldi	r21, 0x3A	; 58
    525a:	0e 94 b5 3c 	call	0x796a	; 0x796a <__mulsf3>
    525e:	2a e0       	ldi	r18, 0x0A	; 10
    5260:	37 ed       	ldi	r19, 0xD7	; 215
    5262:	43 ea       	ldi	r20, 0xA3	; 163
    5264:	5b e3       	ldi	r21, 0x3B	; 59
    5266:	0e 94 9a 3a 	call	0x7534	; 0x7534 <__addsf3>
    526a:	9b 01       	movw	r18, r22
    526c:	ac 01       	movw	r20, r24
	geschw = (durch)*M_PI*3.6;
	geschw /= umlaufzeit;
    526e:	c7 01       	movw	r24, r14
    5270:	b6 01       	movw	r22, r12
    5272:	0e 94 01 3b 	call	0x7602	; 0x7602 <__divsf3>
	//Mittelwert aus der letzten Messung zum Fehler minimieren
	geschw += temp;
    5276:	20 91 fb 07 	lds	r18, 0x07FB
    527a:	30 91 fc 07 	lds	r19, 0x07FC
    527e:	40 91 fd 07 	lds	r20, 0x07FD
    5282:	50 91 fe 07 	lds	r21, 0x07FE
    5286:	0e 94 9a 3a 	call	0x7534	; 0x7534 <__addsf3>
	geschw /= 2.0;
    528a:	20 e0       	ldi	r18, 0x00	; 0
    528c:	30 e0       	ldi	r19, 0x00	; 0
    528e:	40 e0       	ldi	r20, 0x00	; 0
    5290:	5f e3       	ldi	r21, 0x3F	; 63
    5292:	0e 94 b5 3c 	call	0x796a	; 0x796a <__mulsf3>
    5296:	6b 01       	movw	r12, r22
    5298:	7c 01       	movw	r14, r24
	if (geschw >=160)
    529a:	20 e0       	ldi	r18, 0x00	; 0
    529c:	30 e0       	ldi	r19, 0x00	; 0
    529e:	40 e2       	ldi	r20, 0x20	; 32
    52a0:	53 e4       	ldi	r21, 0x43	; 67
    52a2:	0e 94 aa 3c 	call	0x7954	; 0x7954 <__gesf2>
    52a6:	88 23       	and	r24, r24
    52a8:	4c f4       	brge	.+18     	; 0x52bc <_Z15geschwindigkeitf+0xb4>
	double umlaufzeit = (REEDMS/1000.0+(zaehlungen/zaehlungenprozeiteinheit)*zeitproachtzaehlungen);
	geschw = (durch)*M_PI*3.6;
	geschw /= umlaufzeit;
	//Mittelwert aus der letzten Messung zum Fehler minimieren
	geschw += temp;
	geschw /= 2.0;
    52aa:	c0 92 fb 07 	sts	0x07FB, r12
    52ae:	d0 92 fc 07 	sts	0x07FC, r13
    52b2:	e0 92 fd 07 	sts	0x07FD, r14
    52b6:	f0 92 fe 07 	sts	0x07FE, r15
    52ba:	08 c0       	rjmp	.+16     	; 0x52cc <_Z15geschwindigkeitf+0xc4>
	if (geschw >=160)
	{
		geschw=0;
    52bc:	10 92 fb 07 	sts	0x07FB, r1
    52c0:	10 92 fc 07 	sts	0x07FC, r1
    52c4:	10 92 fd 07 	sts	0x07FD, r1
    52c8:	10 92 fe 07 	sts	0x07FE, r1
	}
}
    52cc:	df 91       	pop	r29
    52ce:	cf 91       	pop	r28
    52d0:	ff 90       	pop	r15
    52d2:	ef 90       	pop	r14
    52d4:	df 90       	pop	r13
    52d6:	cf 90       	pop	r12
    52d8:	08 95       	ret

000052da <get_fattime>:

FATFS FATFS_Obj;
FIL logger;

DWORD get_fattime (void)
{
    52da:	0f 93       	push	r16
    52dc:	1f 93       	push	r17
	/* Pack date and time into a DWORD variable */
	return	  ((DWORD)((2000+rtc.Jahr) - 1980) << 25)
	| ((DWORD)rtc.Monat << 21)
	| ((DWORD)rtc.Tag << 16)
    52de:	ef e5       	ldi	r30, 0x5F	; 95
    52e0:	fd e0       	ldi	r31, 0x0D	; 13
    52e2:	24 89       	ldd	r18, Z+20	; 0x14

DWORD get_fattime (void)
{
	/* Pack date and time into a DWORD variable */
	return	  ((DWORD)((2000+rtc.Jahr) - 1980) << 25)
	| ((DWORD)rtc.Monat << 21)
    52e4:	86 89       	ldd	r24, Z+22	; 0x16
    52e6:	90 e0       	ldi	r25, 0x00	; 0
    52e8:	a0 e0       	ldi	r26, 0x00	; 0
    52ea:	b0 e0       	ldi	r27, 0x00	; 0
    52ec:	07 2e       	mov	r0, r23
    52ee:	75 e1       	ldi	r23, 0x15	; 21
    52f0:	88 0f       	add	r24, r24
    52f2:	99 1f       	adc	r25, r25
    52f4:	aa 1f       	adc	r26, r26
    52f6:	bb 1f       	adc	r27, r27
    52f8:	7a 95       	dec	r23
    52fa:	d1 f7       	brne	.-12     	; 0x52f0 <get_fattime+0x16>
    52fc:	70 2d       	mov	r23, r0
    52fe:	a2 2b       	or	r26, r18
	| ((DWORD)rtc.Tag << 16)
	| ((DWORD)rtc.Stunden << 11)
    5300:	40 89       	ldd	r20, Z+16	; 0x10
    5302:	50 e0       	ldi	r21, 0x00	; 0
    5304:	60 e0       	ldi	r22, 0x00	; 0
    5306:	70 e0       	ldi	r23, 0x00	; 0
    5308:	03 2e       	mov	r0, r19
    530a:	3b e0       	ldi	r19, 0x0B	; 11
    530c:	44 0f       	add	r20, r20
    530e:	55 1f       	adc	r21, r21
    5310:	66 1f       	adc	r22, r22
    5312:	77 1f       	adc	r23, r23
    5314:	3a 95       	dec	r19
    5316:	d1 f7       	brne	.-12     	; 0x530c <get_fattime+0x32>
    5318:	30 2d       	mov	r19, r0
    531a:	84 2b       	or	r24, r20
    531c:	95 2b       	or	r25, r21
    531e:	a6 2b       	or	r26, r22
    5320:	b7 2b       	or	r27, r23
	| ((DWORD)rtc.Minuten << 5)
    5322:	41 89       	ldd	r20, Z+17	; 0x11
    5324:	50 e0       	ldi	r21, 0x00	; 0
    5326:	60 e0       	ldi	r22, 0x00	; 0
    5328:	70 e0       	ldi	r23, 0x00	; 0
    532a:	44 0f       	add	r20, r20
    532c:	55 1f       	adc	r21, r21
    532e:	66 1f       	adc	r22, r22
    5330:	77 1f       	adc	r23, r23
    5332:	44 0f       	add	r20, r20
    5334:	55 1f       	adc	r21, r21
    5336:	66 1f       	adc	r22, r22
    5338:	77 1f       	adc	r23, r23
    533a:	44 0f       	add	r20, r20
    533c:	55 1f       	adc	r21, r21
    533e:	66 1f       	adc	r22, r22
    5340:	77 1f       	adc	r23, r23
    5342:	44 0f       	add	r20, r20
    5344:	55 1f       	adc	r21, r21
    5346:	66 1f       	adc	r22, r22
    5348:	77 1f       	adc	r23, r23
    534a:	44 0f       	add	r20, r20
    534c:	55 1f       	adc	r21, r21
    534e:	66 1f       	adc	r22, r22
    5350:	77 1f       	adc	r23, r23
    5352:	84 2b       	or	r24, r20
    5354:	95 2b       	or	r25, r21
    5356:	a6 2b       	or	r26, r22
    5358:	b7 2b       	or	r27, r23
	| ((DWORD)rtc.Sekunden >> 1);
    535a:	42 89       	ldd	r20, Z+18	; 0x12
    535c:	50 e0       	ldi	r21, 0x00	; 0
    535e:	60 e0       	ldi	r22, 0x00	; 0
    5360:	70 e0       	ldi	r23, 0x00	; 0
    5362:	76 95       	lsr	r23
    5364:	67 95       	ror	r22
    5366:	57 95       	ror	r21
    5368:	47 95       	ror	r20
    536a:	48 2b       	or	r20, r24
    536c:	59 2b       	or	r21, r25
    536e:	6a 2b       	or	r22, r26
    5370:	7b 2b       	or	r23, r27
FIL logger;

DWORD get_fattime (void)
{
	/* Pack date and time into a DWORD variable */
	return	  ((DWORD)((2000+rtc.Jahr) - 1980) << 25)
    5372:	87 89       	ldd	r24, Z+23	; 0x17
    5374:	90 e0       	ldi	r25, 0x00	; 0
    5376:	44 96       	adiw	r24, 0x14	; 20
    5378:	09 2e       	mov	r0, r25
    537a:	00 0c       	add	r0, r0
    537c:	aa 0b       	sbc	r26, r26
    537e:	bb 0b       	sbc	r27, r27
    5380:	07 2e       	mov	r0, r23
    5382:	79 e1       	ldi	r23, 0x19	; 25
    5384:	88 0f       	add	r24, r24
    5386:	99 1f       	adc	r25, r25
    5388:	aa 1f       	adc	r26, r26
    538a:	bb 1f       	adc	r27, r27
    538c:	7a 95       	dec	r23
    538e:	d1 f7       	brne	.-12     	; 0x5384 <get_fattime+0xaa>
    5390:	70 2d       	mov	r23, r0
	| ((DWORD)rtc.Monat << 21)
	| ((DWORD)rtc.Tag << 16)
	| ((DWORD)rtc.Stunden << 11)
	| ((DWORD)rtc.Minuten << 5)
	| ((DWORD)rtc.Sekunden >> 1);
    5392:	8a 01       	movw	r16, r20
    5394:	9b 01       	movw	r18, r22
    5396:	08 2b       	or	r16, r24
    5398:	19 2b       	or	r17, r25
    539a:	2a 2b       	or	r18, r26
    539c:	3b 2b       	or	r19, r27
    539e:	c9 01       	movw	r24, r18
    53a0:	b8 01       	movw	r22, r16
}
    53a2:	1f 91       	pop	r17
    53a4:	0f 91       	pop	r16
    53a6:	08 95       	ret

000053a8 <_Z15initialisierungv>:
		maininterupthandler(Folien[position],Tastatur.unified());
		gpshandler();
    }
}

void initialisierung(){	
    53a8:	ff 92       	push	r15
    53aa:	0f 93       	push	r16
    53ac:	1f 93       	push	r17
    53ae:	cf 93       	push	r28
    53b0:	df 93       	push	r29
    53b2:	cd b7       	in	r28, 0x3d	; 61
    53b4:	de b7       	in	r29, 0x3e	; 62
    53b6:	a9 97       	sbiw	r28, 0x29	; 41
    53b8:	0f b6       	in	r0, 0x3f	; 63
    53ba:	f8 94       	cli
    53bc:	de bf       	out	0x3e, r29	; 62
    53be:	0f be       	out	0x3f, r0	; 63
    53c0:	cd bf       	out	0x3d, r28	; 61
	//nullen der Flagregister
	anzeige=0;
    53c2:	10 92 5e 08 	sts	0x085E, r1
	statusreg=0;
    53c6:	10 92 5d 08 	sts	0x085D, r1
	position=0;
    53ca:	10 92 5c 08 	sts	0x085C, r1
	FPS=0;
    53ce:	10 92 5b 08 	sts	0x085B, r1
	
	//initialisieren des Zaehler fuer die Winkelgeschw sowie den Timer
	TCNT1 = 0;
    53d2:	10 92 85 00 	sts	0x0085, r1
    53d6:	10 92 84 00 	sts	0x0084, r1
	TIMSK1 = 0;
    53da:	10 92 6f 00 	sts	0x006F, r1
	TCCR1B = ((1<<CS12) | (1<<CS10));
    53de:	85 e0       	ldi	r24, 0x05	; 5
    53e0:	80 93 81 00 	sts	0x0081, r24
	
	//Eingang fuer den Reedkontak schalten mit internem Pullup
	DDRA |= ((1<<PORTA6));
    53e4:	0e 9a       	sbi	0x01, 6	; 1
	PORTA |= (1<<PORTA6);
    53e6:	16 9a       	sbi	0x02, 6	; 2
	
	//ADC Initialisieren auf CH0
	ADMUX = (1<<REFS0);
    53e8:	80 e4       	ldi	r24, 0x40	; 64
    53ea:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA = (1<<ADPS1) | (1<<ADPS0);
    53ee:	ea e7       	ldi	r30, 0x7A	; 122
    53f0:	f0 e0       	ldi	r31, 0x00	; 0
    53f2:	83 e0       	ldi	r24, 0x03	; 3
    53f4:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADEN);
    53f6:	80 81       	ld	r24, Z
    53f8:	80 68       	ori	r24, 0x80	; 128
    53fa:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);
    53fc:	80 81       	ld	r24, Z
    53fe:	80 64       	ori	r24, 0x40	; 64
    5400:	80 83       	st	Z, r24
	while (ADCSRA & (1<<ADSC) ) {}
    5402:	80 81       	ld	r24, Z
    5404:	18 2f       	mov	r17, r24
    5406:	10 74       	andi	r17, 0x40	; 64
    5408:	86 fd       	sbrc	r24, 6
    540a:	fb cf       	rjmp	.-10     	; 0x5402 <_Z15initialisierungv+0x5a>
	(void) ADCW;
    540c:	80 91 78 00 	lds	r24, 0x0078
    5410:	90 91 79 00 	lds	r25, 0x0079
	
	//USART initalisieren, aktivieren erst spaeter
	PIND &= ~((1<<PIND1) | (1<<PIND2));
    5414:	89 b1       	in	r24, 0x09	; 9
    5416:	89 7f       	andi	r24, 0xF9	; 249
    5418:	89 b9       	out	0x09, r24	; 9
	DDRD &= ~((1<<PIND1) | (1<<PIND2));
    541a:	8a b1       	in	r24, 0x0a	; 10
    541c:	89 7f       	andi	r24, 0xF9	; 249
    541e:	8a b9       	out	0x0a, r24	; 10
	UBRR0H = 0;
    5420:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = 51;							//9600 Baud
    5424:	83 e3       	ldi	r24, 0x33	; 51
    5426:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0C = (1<<UCSZ00) | (1<<UCSZ01);	// 8Bit Frame
    542a:	86 e0       	ldi	r24, 0x06	; 6
    542c:	80 93 c2 00 	sts	0x00C2, r24
	UCSR0B = (1<<RXCIE0);
    5430:	80 e8       	ldi	r24, 0x80	; 128
    5432:	80 93 c1 00 	sts	0x00C1, r24
	gpscounter = 0;
    5436:	10 92 11 08 	sts	0x0811, r1
	gpsstatus = (1<<fix);
    543a:	80 93 5a 08 	sts	0x085A, r24
	lat = 0;
    543e:	10 92 0d 08 	sts	0x080D, r1
    5442:	10 92 0e 08 	sts	0x080E, r1
    5446:	10 92 0f 08 	sts	0x080F, r1
    544a:	10 92 10 08 	sts	0x0810, r1
	lon = 0;
    544e:	10 92 09 08 	sts	0x0809, r1
    5452:	10 92 0a 08 	sts	0x080A, r1
    5456:	10 92 0b 08 	sts	0x080B, r1
    545a:	10 92 0c 08 	sts	0x080C, r1
	gpsspeed = 0;
    545e:	10 92 05 08 	sts	0x0805, r1
    5462:	10 92 06 08 	sts	0x0806, r1
    5466:	10 92 07 08 	sts	0x0807, r1
    546a:	10 92 08 08 	sts	0x0808, r1
	gpsstunde = 0;
    546e:	10 92 04 08 	sts	0x0804, r1
	gpsminute = 0;
    5472:	10 92 03 08 	sts	0x0803, r1
	gpssekunde = 0;
    5476:	10 92 02 08 	sts	0x0802, r1
	gpsTag = 0;
    547a:	10 92 01 08 	sts	0x0801, r1
	gpsMonat = 0;
    547e:	10 92 00 08 	sts	0x0800, r1
	gpsJahr = 0;
    5482:	10 92 ff 07 	sts	0x07FF, r1
		uint8_t posx;
		uint8_t maxentries;
		uint8_t maxentriesx;
	monitor(Display *ol, RTC *rt)
	{
		buffersize = 0;
    5486:	1f 8a       	std	Y+23, r1	; 0x17
		oled = ol;
    5488:	8e e5       	ldi	r24, 0x5E	; 94
    548a:	99 e0       	ldi	r25, 0x09	; 9
    548c:	99 8f       	std	Y+25, r25	; 0x19
    548e:	88 8f       	std	Y+24, r24	; 0x18
		rtc = rt;
    5490:	8f e5       	ldi	r24, 0x5F	; 95
    5492:	9d e0       	ldi	r25, 0x0D	; 13
    5494:	9b 8f       	std	Y+27, r25	; 0x1b
    5496:	8a 8f       	std	Y+26, r24	; 0x1a
		posy=0;
    5498:	1e a2       	std	Y+38, r1	; 0x26
		posx=0;
    549a:	1f a2       	std	Y+39, r1	; 0x27
		maxentriesx = 1;
    549c:	81 e0       	ldi	r24, 0x01	; 1
    549e:	89 a7       	std	Y+41, r24	; 0x29
class wilkommen: public monitor
{
	private:
	
	public:
	wilkommen(Display *ol, RTC *rt):monitor(ol,rt)
    54a0:	85 e8       	ldi	r24, 0x85	; 133
    54a2:	93 e0       	ldi	r25, 0x03	; 3
    54a4:	9a 83       	std	Y+2, r25	; 0x02
    54a6:	89 83       	std	Y+1, r24	; 0x01
	{

	}
	
	void draw(){
		oled->clearFrame();
    54a8:	8e e5       	ldi	r24, 0x5E	; 94
    54aa:	99 e0       	ldi	r25, 0x09	; 9
    54ac:	0e 94 b1 07 	call	0xf62	; 0xf62 <_ZN7Display10clearFrameEv>
		
		buffersize=sprintf(buffer,"Fahradcomputer");
    54b0:	8f e0       	ldi	r24, 0x0F	; 15
    54b2:	e6 e9       	ldi	r30, 0x96	; 150
    54b4:	f1 e0       	ldi	r31, 0x01	; 1
    54b6:	de 01       	movw	r26, r28
    54b8:	13 96       	adiw	r26, 0x03	; 3
    54ba:	01 90       	ld	r0, Z+
    54bc:	0d 92       	st	X+, r0
    54be:	8a 95       	dec	r24
    54c0:	e1 f7       	brne	.-8      	; 0x54ba <_Z15initialisierungv+0x112>
    54c2:	8e e0       	ldi	r24, 0x0E	; 14
    54c4:	8f 8b       	std	Y+23, r24	; 0x17
    54c6:	f1 2e       	mov	r15, r17
    54c8:	00 e0       	ldi	r16, 0x00	; 0
		for(uint8_t i=0; i < buffersize;i++){
			oled->draw_ASCI(buffer[i],i*charsize,0);
    54ca:	e3 e0       	ldi	r30, 0x03	; 3
    54cc:	f0 e0       	ldi	r31, 0x00	; 0
    54ce:	ec 0f       	add	r30, r28
    54d0:	fd 1f       	adc	r31, r29
    54d2:	e0 0f       	add	r30, r16
    54d4:	f1 1d       	adc	r31, r1
    54d6:	20 e0       	ldi	r18, 0x00	; 0
    54d8:	4f 2d       	mov	r20, r15
    54da:	60 81       	ld	r22, Z
    54dc:	88 8d       	ldd	r24, Y+24	; 0x18
    54de:	99 8d       	ldd	r25, Y+25	; 0x19
    54e0:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <_ZN7Display9draw_ASCIEhhh>
	
	void draw(){
		oled->clearFrame();
		
		buffersize=sprintf(buffer,"Fahradcomputer");
		for(uint8_t i=0; i < buffersize;i++){
    54e4:	0f 5f       	subi	r16, 0xFF	; 255
    54e6:	26 e0       	ldi	r18, 0x06	; 6
    54e8:	f2 0e       	add	r15, r18
    54ea:	8f 89       	ldd	r24, Y+23	; 0x17
    54ec:	08 17       	cp	r16, r24
    54ee:	68 f3       	brcs	.-38     	; 0x54ca <_Z15initialisierungv+0x122>
			oled->draw_ASCI(buffer[i],i*charsize,0);
		}
		buffersize=sprintf(buffer,"--------------");
    54f0:	8f e0       	ldi	r24, 0x0F	; 15
    54f2:	e5 ea       	ldi	r30, 0xA5	; 165
    54f4:	f1 e0       	ldi	r31, 0x01	; 1
    54f6:	de 01       	movw	r26, r28
    54f8:	13 96       	adiw	r26, 0x03	; 3
    54fa:	01 90       	ld	r0, Z+
    54fc:	0d 92       	st	X+, r0
    54fe:	8a 95       	dec	r24
    5500:	e1 f7       	brne	.-8      	; 0x54fa <_Z15initialisierungv+0x152>
    5502:	8e e0       	ldi	r24, 0x0E	; 14
    5504:	8f 8b       	std	Y+23, r24	; 0x17
    5506:	f1 2e       	mov	r15, r17
    5508:	00 e0       	ldi	r16, 0x00	; 0
		for(uint8_t i=0; i < buffersize;i++){
			oled->draw_ASCI(buffer[i],i*charsize,8);
    550a:	e3 e0       	ldi	r30, 0x03	; 3
    550c:	f0 e0       	ldi	r31, 0x00	; 0
    550e:	ec 0f       	add	r30, r28
    5510:	fd 1f       	adc	r31, r29
    5512:	e0 0f       	add	r30, r16
    5514:	f1 1d       	adc	r31, r1
    5516:	28 e0       	ldi	r18, 0x08	; 8
    5518:	4f 2d       	mov	r20, r15
    551a:	60 81       	ld	r22, Z
    551c:	88 8d       	ldd	r24, Y+24	; 0x18
    551e:	99 8d       	ldd	r25, Y+25	; 0x19
    5520:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <_ZN7Display9draw_ASCIEhhh>
		buffersize=sprintf(buffer,"Fahradcomputer");
		for(uint8_t i=0; i < buffersize;i++){
			oled->draw_ASCI(buffer[i],i*charsize,0);
		}
		buffersize=sprintf(buffer,"--------------");
		for(uint8_t i=0; i < buffersize;i++){
    5524:	0f 5f       	subi	r16, 0xFF	; 255
    5526:	36 e0       	ldi	r19, 0x06	; 6
    5528:	f3 0e       	add	r15, r19
    552a:	8f 89       	ldd	r24, Y+23	; 0x17
    552c:	08 17       	cp	r16, r24
    552e:	68 f3       	brcs	.-38     	; 0x550a <_Z15initialisierungv+0x162>
			oled->draw_ASCI(buffer[i],i*charsize,8);
		}
		buffersize=sprintf(buffer,"Version: %.2f",(double)VERSIONSNUMMER);
    5530:	80 e4       	ldi	r24, 0x40	; 64
    5532:	8f 93       	push	r24
    5534:	81 e4       	ldi	r24, 0x41	; 65
    5536:	8f 93       	push	r24
    5538:	8b ee       	ldi	r24, 0xEB	; 235
    553a:	8f 93       	push	r24
    553c:	85 e8       	ldi	r24, 0x85	; 133
    553e:	8f 93       	push	r24
    5540:	84 eb       	ldi	r24, 0xB4	; 180
    5542:	91 e0       	ldi	r25, 0x01	; 1
    5544:	9f 93       	push	r25
    5546:	8f 93       	push	r24
    5548:	ce 01       	movw	r24, r28
    554a:	03 96       	adiw	r24, 0x03	; 3
    554c:	9f 93       	push	r25
    554e:	8f 93       	push	r24
    5550:	0e 94 87 44 	call	0x890e	; 0x890e <sprintf>
    5554:	8f 8b       	std	Y+23, r24	; 0x17
		for(uint8_t i=0; i < buffersize;i++){
    5556:	0f b6       	in	r0, 0x3f	; 63
    5558:	f8 94       	cli
    555a:	de bf       	out	0x3e, r29	; 62
    555c:	0f be       	out	0x3f, r0	; 63
    555e:	cd bf       	out	0x3d, r28	; 61
    5560:	88 23       	and	r24, r24
    5562:	99 f0       	breq	.+38     	; 0x558a <_Z15initialisierungv+0x1e2>
    5564:	00 e0       	ldi	r16, 0x00	; 0
			oled->draw_ASCI(buffer[i],i*charsize,32);
    5566:	e3 e0       	ldi	r30, 0x03	; 3
    5568:	f0 e0       	ldi	r31, 0x00	; 0
    556a:	ec 0f       	add	r30, r28
    556c:	fd 1f       	adc	r31, r29
    556e:	e0 0f       	add	r30, r16
    5570:	f1 1d       	adc	r31, r1
    5572:	20 e2       	ldi	r18, 0x20	; 32
    5574:	41 2f       	mov	r20, r17
    5576:	60 81       	ld	r22, Z
    5578:	88 8d       	ldd	r24, Y+24	; 0x18
    557a:	99 8d       	ldd	r25, Y+25	; 0x19
    557c:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <_ZN7Display9draw_ASCIEhhh>
		buffersize=sprintf(buffer,"--------------");
		for(uint8_t i=0; i < buffersize;i++){
			oled->draw_ASCI(buffer[i],i*charsize,8);
		}
		buffersize=sprintf(buffer,"Version: %.2f",(double)VERSIONSNUMMER);
		for(uint8_t i=0; i < buffersize;i++){
    5580:	0f 5f       	subi	r16, 0xFF	; 255
    5582:	1a 5f       	subi	r17, 0xFA	; 250
    5584:	8f 89       	ldd	r24, Y+23	; 0x17
    5586:	08 17       	cp	r16, r24
    5588:	70 f3       	brcs	.-36     	; 0x5566 <_Z15initialisierungv+0x1be>
		oled->clearFrame();
	}

	//send the frame to the display
	void send(){
		oled->sendFrame();	
    558a:	88 8d       	ldd	r24, Y+24	; 0x18
    558c:	99 8d       	ldd	r25, Y+25	; 0x19
    558e:	0e 94 31 08 	call	0x1062	; 0x1062 <_ZN7Display9sendFrameEv>
    5592:	8a e0       	ldi	r24, 0x0A	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    5594:	ff e7       	ldi	r31, 0x7F	; 127
    5596:	28 e3       	ldi	r18, 0x38	; 56
    5598:	31 e0       	ldi	r19, 0x01	; 1
    559a:	f1 50       	subi	r31, 0x01	; 1
    559c:	20 40       	sbci	r18, 0x00	; 0
    559e:	30 40       	sbci	r19, 0x00	; 0
    55a0:	e1 f7       	brne	.-8      	; 0x559a <_Z15initialisierungv+0x1f2>
    55a2:	00 c0       	rjmp	.+0      	; 0x55a4 <_Z15initialisierungv+0x1fc>
    55a4:	00 00       	nop
    55a6:	9f e7       	ldi	r25, 0x7F	; 127
    55a8:	e8 e3       	ldi	r30, 0x38	; 56
    55aa:	f1 e0       	ldi	r31, 0x01	; 1
    55ac:	91 50       	subi	r25, 0x01	; 1
    55ae:	e0 40       	sbci	r30, 0x00	; 0
    55b0:	f0 40       	sbci	r31, 0x00	; 0
    55b2:	e1 f7       	brne	.-8      	; 0x55ac <_Z15initialisierungv+0x204>
    55b4:	00 c0       	rjmp	.+0      	; 0x55b6 <_Z15initialisierungv+0x20e>
    55b6:	00 00       	nop
    55b8:	81 50       	subi	r24, 0x01	; 1
	
	//Wilkommensanzeige
	wilkommen wil(&oled,&rtc);
	wil.draw();
	for (uint8_t i=0; i<10;i++)
    55ba:	61 f7       	brne	.-40     	; 0x5594 <_Z15initialisierungv+0x1ec>
		_delay_ms(50);
		_delay_ms(50);
	}

	//letzten Zeitpunkt holen und RTC starten
	rtc.Sekunden= 0;
    55bc:	0f e5       	ldi	r16, 0x5F	; 95
    55be:	1d e0       	ldi	r17, 0x0D	; 13
    55c0:	f8 01       	movw	r30, r16
    55c2:	12 8a       	std	Z+18, r1	; 0x12
	rtc.Minuten	= EEPROM_Read(EEMINUTEN);
    55c4:	80 e0       	ldi	r24, 0x00	; 0
    55c6:	90 e0       	ldi	r25, 0x00	; 0
    55c8:	0e dd       	rcall	.-1508   	; 0x4fe6 <_Z11EEPROM_Readj>
    55ca:	f8 01       	movw	r30, r16
    55cc:	81 8b       	std	Z+17, r24	; 0x11
	rtc.Stunden	= EEPROM_Read(EESTUNDEN);
    55ce:	81 e0       	ldi	r24, 0x01	; 1
    55d0:	90 e0       	ldi	r25, 0x00	; 0
    55d2:	09 dd       	rcall	.-1518   	; 0x4fe6 <_Z11EEPROM_Readj>
    55d4:	f8 01       	movw	r30, r16
    55d6:	80 8b       	std	Z+16, r24	; 0x10
	rtc.Tag		= EEPROM_Read(EETAGE);
    55d8:	82 e0       	ldi	r24, 0x02	; 2
    55da:	90 e0       	ldi	r25, 0x00	; 0
    55dc:	04 dd       	rcall	.-1528   	; 0x4fe6 <_Z11EEPROM_Readj>
    55de:	f8 01       	movw	r30, r16
    55e0:	84 8b       	std	Z+20, r24	; 0x14
	rtc.Monat	= EEPROM_Read(EEMONAT);
    55e2:	83 e0       	ldi	r24, 0x03	; 3
    55e4:	90 e0       	ldi	r25, 0x00	; 0
    55e6:	ff dc       	rcall	.-1538   	; 0x4fe6 <_Z11EEPROM_Readj>
    55e8:	f8 01       	movw	r30, r16
    55ea:	86 8b       	std	Z+22, r24	; 0x16
	rtc.Jahr	= EEPROM_Read(EEJAHR);
    55ec:	84 e0       	ldi	r24, 0x04	; 4
    55ee:	90 e0       	ldi	r25, 0x00	; 0
    55f0:	fa dc       	rcall	.-1548   	; 0x4fe6 <_Z11EEPROM_Readj>
    55f2:	f8 01       	movw	r30, r16
    55f4:	87 8b       	std	Z+23, r24	; 0x17
	rtc.ausgabedatumneu();
    55f6:	c8 01       	movw	r24, r16
    55f8:	0e 94 98 39 	call	0x7330	; 0x7330 <_ZN3RTC15ausgabedatumneuEv>
	rtc.RTCstart();
    55fc:	c8 01       	movw	r24, r16
    55fe:	0e 94 79 3a 	call	0x74f2	; 0x74f2 <_ZN3RTC8RTCstartEv>
	
	//AD deaktivieren zum stromsparen
	ACSR |= (1<<ACD);
    5602:	80 b7       	in	r24, 0x30	; 48
    5604:	80 68       	ori	r24, 0x80	; 128
    5606:	80 bf       	out	0x30, r24	; 48
	
	//USART aktivieren jetzt nur hier zum testen
	UCSR0B |= (1<<RXEN0);
    5608:	e1 ec       	ldi	r30, 0xC1	; 193
    560a:	f0 e0       	ldi	r31, 0x00	; 0
    560c:	80 81       	ld	r24, Z
    560e:	80 61       	ori	r24, 0x10	; 16
    5610:	80 83       	st	Z, r24
	
	//SD Karten timer init
	TCCR0A	 = (1<<WGM01);		//Timer im ctc Mode
    5612:	82 e0       	ldi	r24, 0x02	; 2
    5614:	84 bd       	out	0x24, r24	; 36
	OCR0A	 = 38;		//ctc counter ende
    5616:	86 e2       	ldi	r24, 0x26	; 38
    5618:	87 bd       	out	0x27, r24	; 39
	TIMSK0	|= (1<<OCIE0A);
    561a:	ee e6       	ldi	r30, 0x6E	; 110
    561c:	f0 e0       	ldi	r31, 0x00	; 0
    561e:	80 81       	ld	r24, Z
    5620:	82 60       	ori	r24, 0x02	; 2
    5622:	80 83       	st	Z, r24
	TCCR0B	|= (1<<CS02) | (1<<CS00);	//presc=1024
    5624:	85 b5       	in	r24, 0x25	; 37
    5626:	85 60       	ori	r24, 0x05	; 5
    5628:	85 bd       	out	0x25, r24	; 37
	sei();
    562a:	78 94       	sei
}
    562c:	a9 96       	adiw	r28, 0x29	; 41
    562e:	0f b6       	in	r0, 0x3f	; 63
    5630:	f8 94       	cli
    5632:	de bf       	out	0x3e, r29	; 62
    5634:	0f be       	out	0x3f, r0	; 63
    5636:	cd bf       	out	0x3d, r28	; 61
    5638:	df 91       	pop	r29
    563a:	cf 91       	pop	r28
    563c:	1f 91       	pop	r17
    563e:	0f 91       	pop	r16
    5640:	ff 90       	pop	r15
    5642:	08 95       	ret

00005644 <_Z19maininterupthandlerP7monitorh>:

void maininterupthandler(monitor *mon, uint8_t taste){
    5644:	cf 92       	push	r12
    5646:	df 92       	push	r13
    5648:	ef 92       	push	r14
    564a:	ff 92       	push	r15
    564c:	0f 93       	push	r16
    564e:	1f 93       	push	r17
    5650:	cf 93       	push	r28
    5652:	df 93       	push	r29
    5654:	cd b7       	in	r28, 0x3d	; 61
    5656:	de b7       	in	r29, 0x3e	; 62
    5658:	2d 97       	sbiw	r28, 0x0d	; 13
    565a:	0f b6       	in	r0, 0x3f	; 63
    565c:	f8 94       	cli
    565e:	de bf       	out	0x3e, r29	; 62
    5660:	0f be       	out	0x3f, r0	; 63
    5662:	cd bf       	out	0x3d, r28	; 61
    5664:	8c 01       	movw	r16, r24
    5666:	6d 87       	std	Y+13, r22	; 0x0d
	if (taste!=' ')
    5668:	60 32       	cpi	r22, 0x20	; 32
    566a:	09 f4       	brne	.+2      	; 0x566e <_Z19maininterupthandlerP7monitorh+0x2a>
    566c:	87 c0       	rjmp	.+270    	; 0x577c <_Z19maininterupthandlerP7monitorh+0x138>
	{
		anzeige |= (1<<refreshdisplay);
    566e:	80 91 5e 08 	lds	r24, 0x085E
    5672:	81 60       	ori	r24, 0x01	; 1
    5674:	80 93 5e 08 	sts	0x085E, r24
		switch (taste)							//Tastendruck ueberpruefen
    5678:	46 2f       	mov	r20, r22
    567a:	50 e0       	ldi	r21, 0x00	; 0
    567c:	fa 01       	movw	r30, r20
    567e:	f0 97       	sbiw	r30, 0x30	; 48
    5680:	e6 34       	cpi	r30, 0x46	; 70
    5682:	f1 05       	cpc	r31, r1
    5684:	08 f0       	brcs	.+2      	; 0x5688 <_Z19maininterupthandlerP7monitorh+0x44>
    5686:	6f c0       	rjmp	.+222    	; 0x5766 <_Z19maininterupthandlerP7monitorh+0x122>
    5688:	e5 55       	subi	r30, 0x55	; 85
    568a:	ff 4f       	sbci	r31, 0xFF	; 255
    568c:	0c 94 12 42 	jmp	0x8424	; 0x8424 <__tablejump2__>
		{
			case 'm':
				position = numberofpages;
    5690:	85 e0       	ldi	r24, 0x05	; 5
    5692:	80 93 5c 08 	sts	0x085C, r24
				break;
    5696:	22 c1       	rjmp	.+580    	; 0x58dc <_Z19maininterupthandlerP7monitorh+0x298>
			case 'l':
				if (mon->posx==0)
    5698:	d8 01       	movw	r26, r16
    569a:	96 96       	adiw	r26, 0x26	; 38
    569c:	8c 91       	ld	r24, X
    569e:	81 11       	cpse	r24, r1
    56a0:	04 c0       	rjmp	.+8      	; 0x56aa <_Z19maininterupthandlerP7monitorh+0x66>
				{
					position = numberofpages;
    56a2:	85 e0       	ldi	r24, 0x05	; 5
    56a4:	80 93 5c 08 	sts	0x085C, r24
    56a8:	19 c1       	rjmp	.+562    	; 0x58dc <_Z19maininterupthandlerP7monitorh+0x298>
				}
				else{
					mon->posx--;
    56aa:	81 50       	subi	r24, 0x01	; 1
    56ac:	f8 01       	movw	r30, r16
    56ae:	86 a3       	std	Z+38, r24	; 0x26
    56b0:	65 c0       	rjmp	.+202    	; 0x577c <_Z19maininterupthandlerP7monitorh+0x138>
				}
				break;
			case 'r':
				if (position==numberofpages)
    56b2:	80 91 5c 08 	lds	r24, 0x085C
    56b6:	85 30       	cpi	r24, 0x05	; 5
    56b8:	31 f4       	brne	.+12     	; 0x56c6 <_Z19maininterupthandlerP7monitorh+0x82>
				{
					position=mon->posy;
    56ba:	d8 01       	movw	r26, r16
    56bc:	95 96       	adiw	r26, 0x25	; 37
    56be:	8c 91       	ld	r24, X
    56c0:	80 93 5c 08 	sts	0x085C, r24
    56c4:	5b c0       	rjmp	.+182    	; 0x577c <_Z19maininterupthandlerP7monitorh+0x138>
				}
				else if (!(mon->posx >= mon->maxentriesx))
    56c6:	f8 01       	movw	r30, r16
    56c8:	86 a1       	ldd	r24, Z+38	; 0x26
    56ca:	90 a5       	ldd	r25, Z+40	; 0x28
    56cc:	89 17       	cp	r24, r25
    56ce:	08 f0       	brcs	.+2      	; 0x56d2 <_Z19maininterupthandlerP7monitorh+0x8e>
    56d0:	55 c0       	rjmp	.+170    	; 0x577c <_Z19maininterupthandlerP7monitorh+0x138>
				{
					mon->posx++;
    56d2:	8f 5f       	subi	r24, 0xFF	; 255
    56d4:	86 a3       	std	Z+38, r24	; 0x26
    56d6:	52 c0       	rjmp	.+164    	; 0x577c <_Z19maininterupthandlerP7monitorh+0x138>
				}
				break;
				case 'o':
					if (position==numberofpages)
    56d8:	80 91 5c 08 	lds	r24, 0x085C
    56dc:	85 30       	cpi	r24, 0x05	; 5
    56de:	31 f4       	brne	.+12     	; 0x56ec <_Z19maininterupthandlerP7monitorh+0xa8>
					{
						position=mon->posy;
    56e0:	d8 01       	movw	r26, r16
    56e2:	95 96       	adiw	r26, 0x25	; 37
    56e4:	8c 91       	ld	r24, X
    56e6:	80 93 5c 08 	sts	0x085C, r24
    56ea:	48 c0       	rjmp	.+144    	; 0x577c <_Z19maininterupthandlerP7monitorh+0x138>
					}
					else if (!(mon->posx >= mon->maxentriesx))
    56ec:	f8 01       	movw	r30, r16
    56ee:	86 a1       	ldd	r24, Z+38	; 0x26
    56f0:	90 a5       	ldd	r25, Z+40	; 0x28
    56f2:	89 17       	cp	r24, r25
    56f4:	08 f0       	brcs	.+2      	; 0x56f8 <_Z19maininterupthandlerP7monitorh+0xb4>
    56f6:	42 c0       	rjmp	.+132    	; 0x577c <_Z19maininterupthandlerP7monitorh+0x138>
					{
						mon->posx++;
    56f8:	8f 5f       	subi	r24, 0xFF	; 255
    56fa:	86 a3       	std	Z+38, r24	; 0x26
    56fc:	3f c0       	rjmp	.+126    	; 0x577c <_Z19maininterupthandlerP7monitorh+0x138>
					}
					break;
			case 'd':
				if (!(mon->posy >= mon->maxentries-1))
    56fe:	d8 01       	movw	r26, r16
    5700:	95 96       	adiw	r26, 0x25	; 37
    5702:	2c 91       	ld	r18, X
    5704:	95 97       	sbiw	r26, 0x25	; 37
    5706:	42 2f       	mov	r20, r18
    5708:	50 e0       	ldi	r21, 0x00	; 0
    570a:	97 96       	adiw	r26, 0x27	; 39
    570c:	8c 91       	ld	r24, X
    570e:	97 97       	sbiw	r26, 0x27	; 39
    5710:	90 e0       	ldi	r25, 0x00	; 0
    5712:	01 97       	sbiw	r24, 0x01	; 1
    5714:	48 17       	cp	r20, r24
    5716:	59 07       	cpc	r21, r25
    5718:	24 f4       	brge	.+8      	; 0x5722 <_Z19maininterupthandlerP7monitorh+0xde>
				{
					mon->posy++;
    571a:	2f 5f       	subi	r18, 0xFF	; 255
    571c:	95 96       	adiw	r26, 0x25	; 37
    571e:	2c 93       	st	X, r18
    5720:	2d c0       	rjmp	.+90     	; 0x577c <_Z19maininterupthandlerP7monitorh+0x138>
				}
				else{
					mon->posy = 0;
    5722:	f8 01       	movw	r30, r16
    5724:	15 a2       	std	Z+37, r1	; 0x25
    5726:	2a c0       	rjmp	.+84     	; 0x577c <_Z19maininterupthandlerP7monitorh+0x138>
				}
				break;
			case 'u':
				if (!(mon->posy == 0))
    5728:	d8 01       	movw	r26, r16
    572a:	95 96       	adiw	r26, 0x25	; 37
    572c:	8c 91       	ld	r24, X
    572e:	95 97       	sbiw	r26, 0x25	; 37
    5730:	88 23       	and	r24, r24
    5732:	21 f0       	breq	.+8      	; 0x573c <_Z19maininterupthandlerP7monitorh+0xf8>
				{
					mon->posy--;
    5734:	81 50       	subi	r24, 0x01	; 1
    5736:	95 96       	adiw	r26, 0x25	; 37
    5738:	8c 93       	st	X, r24
    573a:	20 c0       	rjmp	.+64     	; 0x577c <_Z19maininterupthandlerP7monitorh+0x138>
				}
				else{
					mon->posy=mon->maxentries-1;
    573c:	f8 01       	movw	r30, r16
    573e:	87 a1       	ldd	r24, Z+39	; 0x27
    5740:	81 50       	subi	r24, 0x01	; 1
    5742:	85 a3       	std	Z+37, r24	; 0x25
    5744:	1b c0       	rjmp	.+54     	; 0x577c <_Z19maininterupthandlerP7monitorh+0x138>
				}
				break;
			case '0':
				//Licht an/aus
				if (LED.ison())
    5746:	83 e6       	ldi	r24, 0x63	; 99
    5748:	98 e0       	ldi	r25, 0x08	; 8
    574a:	0e 94 d1 38 	call	0x71a2	; 0x71a2 <_ZN6Output4isonEv>
    574e:	88 23       	and	r24, r24
    5750:	29 f0       	breq	.+10     	; 0x575c <_Z19maininterupthandlerP7monitorh+0x118>
				{
					LED.off();
    5752:	83 e6       	ldi	r24, 0x63	; 99
    5754:	98 e0       	ldi	r25, 0x08	; 8
    5756:	0e 94 0c 39 	call	0x7218	; 0x7218 <_ZN6Output3offEv>
    575a:	10 c0       	rjmp	.+32     	; 0x577c <_Z19maininterupthandlerP7monitorh+0x138>
				}
				else{
					LED.on();
    575c:	83 e6       	ldi	r24, 0x63	; 99
    575e:	98 e0       	ldi	r25, 0x08	; 8
    5760:	0e 94 94 38 	call	0x7128	; 0x7128 <_ZN6Output2onEv>
    5764:	0b c0       	rjmp	.+22     	; 0x577c <_Z19maininterupthandlerP7monitorh+0x138>
				}
				break;
			default:
				//alle anderen Tasten werden an den jeweiligen Handler weiter gegeben
				mon->tastendruck(&taste);
    5766:	d8 01       	movw	r26, r16
    5768:	ed 91       	ld	r30, X+
    576a:	fc 91       	ld	r31, X
    576c:	01 90       	ld	r0, Z+
    576e:	f0 81       	ld	r31, Z
    5770:	e0 2d       	mov	r30, r0
    5772:	be 01       	movw	r22, r28
    5774:	63 5f       	subi	r22, 0xF3	; 243
    5776:	7f 4f       	sbci	r23, 0xFF	; 255
    5778:	c8 01       	movw	r24, r16
    577a:	09 95       	icall
				break;
		}
	}
	
	if (position==1)							//Berechnung der Geschwindigkeit fuer Tacho
    577c:	80 91 5c 08 	lds	r24, 0x085C
    5780:	81 30       	cpi	r24, 0x01	; 1
    5782:	09 f5       	brne	.+66     	; 0x57c6 <_Z19maininterupthandlerP7monitorh+0x182>
	{
		//debounce Funktion fuer den Reedswitch
		if (reed_debounce(&PINA,PINA7))
    5784:	67 e0       	ldi	r22, 0x07	; 7
    5786:	80 e2       	ldi	r24, 0x20	; 32
    5788:	90 e0       	ldi	r25, 0x00	; 0
    578a:	19 dd       	rcall	.-1486   	; 0x51be <_Z13reed_debouncePVhh>
    578c:	88 23       	and	r24, r24
    578e:	31 f0       	breq	.+12     	; 0x579c <_Z19maininterupthandlerP7monitorh+0x158>
		{
			//Durchmesser ist 28 Zoll
			geschwindigkeit(28.0*2.54/100.0);
    5790:	63 e3       	ldi	r22, 0x33	; 51
    5792:	71 e1       	ldi	r23, 0x11	; 17
    5794:	86 e3       	ldi	r24, 0x36	; 54
    5796:	9f e3       	ldi	r25, 0x3F	; 63
    5798:	37 dd       	rcall	.-1426   	; 0x5208 <_Z15geschwindigkeitf>
    579a:	a0 c0       	rjmp	.+320    	; 0x58dc <_Z19maininterupthandlerP7monitorh+0x298>
		}
		//Hier mit werden geschwindigkeiten, die kleiner als 2.6km/h betragen gefiltert
		//Somit wird die letzte Geschwindigkeit nach 3 Sekunden geloescht
		//Das ist noch nicht die beste Variante
		else if (TCNT1>23437)
    579c:	80 91 84 00 	lds	r24, 0x0084
    57a0:	90 91 85 00 	lds	r25, 0x0085
    57a4:	8e 38       	cpi	r24, 0x8E	; 142
    57a6:	9b 45       	sbci	r25, 0x5B	; 91
    57a8:	08 f4       	brcc	.+2      	; 0x57ac <_Z19maininterupthandlerP7monitorh+0x168>
    57aa:	98 c0       	rjmp	.+304    	; 0x58dc <_Z19maininterupthandlerP7monitorh+0x298>
		{
			TCNT1=0;
    57ac:	10 92 85 00 	sts	0x0085, r1
    57b0:	10 92 84 00 	sts	0x0084, r1
			geschw=0;
    57b4:	10 92 fb 07 	sts	0x07FB, r1
    57b8:	10 92 fc 07 	sts	0x07FC, r1
    57bc:	10 92 fd 07 	sts	0x07FD, r1
    57c0:	10 92 fe 07 	sts	0x07FE, r1
    57c4:	8b c0       	rjmp	.+278    	; 0x58dc <_Z19maininterupthandlerP7monitorh+0x298>
		}
	}
	else if (position==3)
    57c6:	83 30       	cpi	r24, 0x03	; 3
    57c8:	09 f0       	breq	.+2      	; 0x57cc <_Z19maininterupthandlerP7monitorh+0x188>
    57ca:	88 c0       	rjmp	.+272    	; 0x58dc <_Z19maininterupthandlerP7monitorh+0x298>
	{
		if (mon->posy==3 && mon->posx==1)
    57cc:	f8 01       	movw	r30, r16
    57ce:	85 a1       	ldd	r24, Z+37	; 0x25
    57d0:	83 30       	cpi	r24, 0x03	; 3
    57d2:	91 f5       	brne	.+100    	; 0x5838 <_Z19maininterupthandlerP7monitorh+0x1f4>
    57d4:	86 a1       	ldd	r24, Z+38	; 0x26
    57d6:	81 30       	cpi	r24, 0x01	; 1
    57d8:	09 f0       	breq	.+2      	; 0x57dc <_Z19maininterupthandlerP7monitorh+0x198>
    57da:	80 c0       	rjmp	.+256    	; 0x58dc <_Z19maininterupthandlerP7monitorh+0x298>
		{
			if (!(statusreg&(1<<mounttingstat)))
    57dc:	80 91 5d 08 	lds	r24, 0x085D
    57e0:	81 fd       	sbrc	r24, 1
    57e2:	14 c0       	rjmp	.+40     	; 0x580c <_Z19maininterupthandlerP7monitorh+0x1c8>
			{
				//mounting sd Karte
				if (disk_initialize(0) == 0)
    57e4:	80 e0       	ldi	r24, 0x00	; 0
    57e6:	0e 94 76 04 	call	0x8ec	; 0x8ec <disk_initialize>
    57ea:	81 11       	cpse	r24, r1
    57ec:	1d c0       	rjmp	.+58     	; 0x5828 <_Z19maininterupthandlerP7monitorh+0x1e4>
				{
					if (f_mount(&FATFS_Obj,"",0) == 0)
    57ee:	40 e0       	ldi	r20, 0x00	; 0
    57f0:	68 e8       	ldi	r22, 0x88	; 136
    57f2:	72 e0       	ldi	r23, 0x02	; 2
    57f4:	81 ec       	ldi	r24, 0xC1	; 193
    57f6:	95 e0       	ldi	r25, 0x05	; 5
    57f8:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <f_mount>
    57fc:	81 11       	cpse	r24, r1
    57fe:	14 c0       	rjmp	.+40     	; 0x5828 <_Z19maininterupthandlerP7monitorh+0x1e4>
					{
						statusreg |= (1<<mounttingstat);
    5800:	80 91 5d 08 	lds	r24, 0x085D
    5804:	82 60       	ori	r24, 0x02	; 2
    5806:	80 93 5d 08 	sts	0x085D, r24
    580a:	0e c0       	rjmp	.+28     	; 0x5828 <_Z19maininterupthandlerP7monitorh+0x1e4>
					}
				}
			}
			else if (!(statusreg&(1<<loggingstat)))
    580c:	82 fd       	sbrc	r24, 2
    580e:	0c c0       	rjmp	.+24     	; 0x5828 <_Z19maininterupthandlerP7monitorh+0x1e4>
			{
				f_mount(0,"",0);
    5810:	40 e0       	ldi	r20, 0x00	; 0
    5812:	68 e8       	ldi	r22, 0x88	; 136
    5814:	72 e0       	ldi	r23, 0x02	; 2
    5816:	80 e0       	ldi	r24, 0x00	; 0
    5818:	90 e0       	ldi	r25, 0x00	; 0
    581a:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <f_mount>
				statusreg &= ~(1<<mounttingstat);
    581e:	80 91 5d 08 	lds	r24, 0x085D
    5822:	8d 7f       	andi	r24, 0xFD	; 253
    5824:	80 93 5d 08 	sts	0x085D, r24
			}
			mon->posx--;
    5828:	d8 01       	movw	r26, r16
    582a:	96 96       	adiw	r26, 0x26	; 38
    582c:	8c 91       	ld	r24, X
    582e:	96 97       	sbiw	r26, 0x26	; 38
    5830:	81 50       	subi	r24, 0x01	; 1
    5832:	96 96       	adiw	r26, 0x26	; 38
    5834:	8c 93       	st	X, r24
    5836:	52 c0       	rjmp	.+164    	; 0x58dc <_Z19maininterupthandlerP7monitorh+0x298>
		}
		else if (mon->posy==4 && mon->posx==1)
    5838:	84 30       	cpi	r24, 0x04	; 4
    583a:	09 f0       	breq	.+2      	; 0x583e <_Z19maininterupthandlerP7monitorh+0x1fa>
    583c:	4f c0       	rjmp	.+158    	; 0x58dc <_Z19maininterupthandlerP7monitorh+0x298>
    583e:	f8 01       	movw	r30, r16
    5840:	86 a1       	ldd	r24, Z+38	; 0x26
    5842:	81 30       	cpi	r24, 0x01	; 1
    5844:	09 f0       	breq	.+2      	; 0x5848 <_Z19maininterupthandlerP7monitorh+0x204>
    5846:	4a c0       	rjmp	.+148    	; 0x58dc <_Z19maininterupthandlerP7monitorh+0x298>
		{
			if (!(statusreg&(1<<loggingstat)) && (statusreg&(1<<mounttingstat)) )
    5848:	80 91 5d 08 	lds	r24, 0x085D
    584c:	82 fd       	sbrc	r24, 2
    584e:	32 c0       	rjmp	.+100    	; 0x58b4 <_Z19maininterupthandlerP7monitorh+0x270>
    5850:	81 ff       	sbrs	r24, 1
    5852:	30 c0       	rjmp	.+96     	; 0x58b4 <_Z19maininterupthandlerP7monitorh+0x270>
			{
				if (disk_status(0) == 0)
    5854:	80 e0       	ldi	r24, 0x00	; 0
    5856:	0e 94 37 05 	call	0xa6e	; 0xa6e <disk_status>
    585a:	81 11       	cpse	r24, r1
    585c:	25 c0       	rjmp	.+74     	; 0x58a8 <_Z19maininterupthandlerP7monitorh+0x264>
				{
					char name[12];
					sprintf(name,"%02u%02u%02u%02u.txt",rtc.Monat,rtc.Tag,rtc.Stunden,rtc.Minuten);
    585e:	ef e5       	ldi	r30, 0x5F	; 95
    5860:	fd e0       	ldi	r31, 0x0D	; 13
    5862:	81 89       	ldd	r24, Z+17	; 0x11
    5864:	1f 92       	push	r1
    5866:	8f 93       	push	r24
    5868:	80 89       	ldd	r24, Z+16	; 0x10
    586a:	1f 92       	push	r1
    586c:	8f 93       	push	r24
    586e:	84 89       	ldd	r24, Z+20	; 0x14
    5870:	1f 92       	push	r1
    5872:	8f 93       	push	r24
    5874:	86 89       	ldd	r24, Z+22	; 0x16
    5876:	1f 92       	push	r1
    5878:	8f 93       	push	r24
    587a:	80 e6       	ldi	r24, 0x60	; 96
    587c:	92 e0       	ldi	r25, 0x02	; 2
    587e:	9f 93       	push	r25
    5880:	8f 93       	push	r24
    5882:	9e 01       	movw	r18, r28
    5884:	2f 5f       	subi	r18, 0xFF	; 255
    5886:	3f 4f       	sbci	r19, 0xFF	; 255
    5888:	79 01       	movw	r14, r18
    588a:	3f 93       	push	r19
    588c:	2f 93       	push	r18
    588e:	0e 94 87 44 	call	0x890e	; 0x890e <sprintf>
					f_open(&logger, name, FA_OPEN_ALWAYS | FA_WRITE);
    5892:	42 e1       	ldi	r20, 0x12	; 18
    5894:	b7 01       	movw	r22, r14
    5896:	81 ea       	ldi	r24, 0xA1	; 161
    5898:	93 e0       	ldi	r25, 0x03	; 3
    589a:	0e 94 18 17 	call	0x2e30	; 0x2e30 <f_open>
    589e:	0f b6       	in	r0, 0x3f	; 63
    58a0:	f8 94       	cli
    58a2:	de bf       	out	0x3e, r29	; 62
    58a4:	0f be       	out	0x3f, r0	; 63
    58a6:	cd bf       	out	0x3d, r28	; 61
				}
				
				statusreg |= (1<<loggingstat);
    58a8:	80 91 5d 08 	lds	r24, 0x085D
    58ac:	84 60       	ori	r24, 0x04	; 4
    58ae:	80 93 5d 08 	sts	0x085D, r24
    58b2:	0d c0       	rjmp	.+26     	; 0x58ce <_Z19maininterupthandlerP7monitorh+0x28a>
			}
			else{
				f_sync(&logger);
    58b4:	81 ea       	ldi	r24, 0xA1	; 161
    58b6:	93 e0       	ldi	r25, 0x03	; 3
    58b8:	0e 94 a0 1c 	call	0x3940	; 0x3940 <f_sync>
				f_close(&logger);
    58bc:	81 ea       	ldi	r24, 0xA1	; 161
    58be:	93 e0       	ldi	r25, 0x03	; 3
    58c0:	0e 94 6d 1d 	call	0x3ada	; 0x3ada <f_close>
				statusreg &= ~(1<<loggingstat);
    58c4:	80 91 5d 08 	lds	r24, 0x085D
    58c8:	8b 7f       	andi	r24, 0xFB	; 251
    58ca:	80 93 5d 08 	sts	0x085D, r24
			}
			mon->posx--;
    58ce:	d8 01       	movw	r26, r16
    58d0:	96 96       	adiw	r26, 0x26	; 38
    58d2:	8c 91       	ld	r24, X
    58d4:	96 97       	sbiw	r26, 0x26	; 38
    58d6:	81 50       	subi	r24, 0x01	; 1
    58d8:	96 96       	adiw	r26, 0x26	; 38
    58da:	8c 93       	st	X, r24
	if (statusreg&(1<<updaterate))				//24 FPS fuer schnelle anzeigen
	{
		//anzeige &= (1<<refreshdisplay);
	}
	
	if ((rtc.interupts&(1<<sekundeninterupt)))	//Sekunden
    58dc:	80 91 77 0d 	lds	r24, 0x0D77
    58e0:	81 ff       	sbrs	r24, 1
    58e2:	ee c0       	rjmp	.+476    	; 0x5ac0 <_Z19maininterupthandlerP7monitorh+0x47c>
	{
		rtc.zeit();
    58e4:	8f e5       	ldi	r24, 0x5F	; 95
    58e6:	9d e0       	ldi	r25, 0x0D	; 13
    58e8:	0e 94 3e 3a 	call	0x747c	; 0x747c <_ZN3RTC4zeitEv>
		if (position==1)
    58ec:	80 91 5c 08 	lds	r24, 0x085C
    58f0:	81 30       	cpi	r24, 0x01	; 1
    58f2:	09 f0       	breq	.+2      	; 0x58f6 <_Z19maininterupthandlerP7monitorh+0x2b2>
    58f4:	57 c0       	rjmp	.+174    	; 0x59a4 <_Z19maininterupthandlerP7monitorh+0x360>
		{
			if (geschw>maxgeschw)
    58f6:	c0 90 fb 07 	lds	r12, 0x07FB
    58fa:	d0 90 fc 07 	lds	r13, 0x07FC
    58fe:	e0 90 fd 07 	lds	r14, 0x07FD
    5902:	f0 90 fe 07 	lds	r15, 0x07FE
    5906:	20 91 f3 07 	lds	r18, 0x07F3
    590a:	30 91 f4 07 	lds	r19, 0x07F4
    590e:	40 91 f5 07 	lds	r20, 0x07F5
    5912:	50 91 f6 07 	lds	r21, 0x07F6
    5916:	c7 01       	movw	r24, r14
    5918:	b6 01       	movw	r22, r12
    591a:	0e 94 aa 3c 	call	0x7954	; 0x7954 <__gesf2>
    591e:	18 16       	cp	r1, r24
    5920:	44 f4       	brge	.+16     	; 0x5932 <_Z19maininterupthandlerP7monitorh+0x2ee>
			{
				maxgeschw=geschw;
    5922:	c0 92 f3 07 	sts	0x07F3, r12
    5926:	d0 92 f4 07 	sts	0x07F4, r13
    592a:	e0 92 f5 07 	sts	0x07F5, r14
    592e:	f0 92 f6 07 	sts	0x07F6, r15
			}
			if (geschw >= 1.0)
    5932:	20 e0       	ldi	r18, 0x00	; 0
    5934:	30 e0       	ldi	r19, 0x00	; 0
    5936:	40 e8       	ldi	r20, 0x80	; 128
    5938:	5f e3       	ldi	r21, 0x3F	; 63
    593a:	c7 01       	movw	r24, r14
    593c:	b6 01       	movw	r22, r12
    593e:	0e 94 aa 3c 	call	0x7954	; 0x7954 <__gesf2>
    5942:	88 23       	and	r24, r24
    5944:	9c f0       	brlt	.+38     	; 0x596c <_Z19maininterupthandlerP7monitorh+0x328>
			{
				Fahrtzeit++;
    5946:	80 91 ef 07 	lds	r24, 0x07EF
    594a:	90 91 f0 07 	lds	r25, 0x07F0
    594e:	a0 91 f1 07 	lds	r26, 0x07F1
    5952:	b0 91 f2 07 	lds	r27, 0x07F2
    5956:	01 96       	adiw	r24, 0x01	; 1
    5958:	a1 1d       	adc	r26, r1
    595a:	b1 1d       	adc	r27, r1
    595c:	80 93 ef 07 	sts	0x07EF, r24
    5960:	90 93 f0 07 	sts	0x07F0, r25
    5964:	a0 93 f1 07 	sts	0x07F1, r26
    5968:	b0 93 f2 07 	sts	0x07F2, r27
			}
			strecke+=geschw/3.6;
    596c:	26 e6       	ldi	r18, 0x66	; 102
    596e:	36 e6       	ldi	r19, 0x66	; 102
    5970:	46 e6       	ldi	r20, 0x66	; 102
    5972:	50 e4       	ldi	r21, 0x40	; 64
    5974:	c7 01       	movw	r24, r14
    5976:	b6 01       	movw	r22, r12
    5978:	0e 94 01 3b 	call	0x7602	; 0x7602 <__divsf3>
    597c:	9b 01       	movw	r18, r22
    597e:	ac 01       	movw	r20, r24
    5980:	60 91 f7 07 	lds	r22, 0x07F7
    5984:	70 91 f8 07 	lds	r23, 0x07F8
    5988:	80 91 f9 07 	lds	r24, 0x07F9
    598c:	90 91 fa 07 	lds	r25, 0x07FA
    5990:	0e 94 9a 3a 	call	0x7534	; 0x7534 <__addsf3>
    5994:	60 93 f7 07 	sts	0x07F7, r22
    5998:	70 93 f8 07 	sts	0x07F8, r23
    599c:	80 93 f9 07 	sts	0x07F9, r24
    59a0:	90 93 fa 07 	sts	0x07FA, r25
    59a4:	80 91 5d 08 	lds	r24, 0x085D
    59a8:	86 70       	andi	r24, 0x06	; 6
		}
		
		if ((statusreg&(1<<mounttingstat)) && (statusreg&(1<<loggingstat)))
    59aa:	86 30       	cpi	r24, 0x06	; 6
    59ac:	09 f0       	breq	.+2      	; 0x59b0 <_Z19maininterupthandlerP7monitorh+0x36c>
    59ae:	7e c0       	rjmp	.+252    	; 0x5aac <_Z19maininterupthandlerP7monitorh+0x468>
		{
			uint16_t Sekundenges = rtc.Stunden*3600;
    59b0:	0f 2e       	mov	r0, r31
    59b2:	ff e5       	ldi	r31, 0x5F	; 95
    59b4:	cf 2e       	mov	r12, r31
    59b6:	fd e0       	ldi	r31, 0x0D	; 13
    59b8:	df 2e       	mov	r13, r31
    59ba:	f0 2d       	mov	r31, r0
    59bc:	f6 01       	movw	r30, r12
    59be:	40 89       	ldd	r20, Z+16	; 0x10
    59c0:	20 e1       	ldi	r18, 0x10	; 16
    59c2:	3e e0       	ldi	r19, 0x0E	; 14
    59c4:	42 9f       	mul	r20, r18
    59c6:	c0 01       	movw	r24, r0
    59c8:	43 9f       	mul	r20, r19
    59ca:	90 0d       	add	r25, r0
    59cc:	11 24       	eor	r1, r1
			Sekundenges += rtc.Minuten*60;
    59ce:	21 89       	ldd	r18, Z+17	; 0x11
    59d0:	7c 01       	movw	r14, r24
    59d2:	fc e3       	ldi	r31, 0x3C	; 60
    59d4:	2f 9f       	mul	r18, r31
    59d6:	e0 0c       	add	r14, r0
    59d8:	f1 1c       	adc	r15, r1
    59da:	11 24       	eor	r1, r1
			Sekundenges += rtc.Sekunden;
			f_printf(&logger,"%u\t%ld\t%ld\t%ld\t%ld\n",(uint16_t)Sekundenges,(int32_t)(lon*100000),(int32_t)(lat*100000),(int32_t)(gpsspeed*100),(int32_t)(geschw*100));
    59dc:	20 e0       	ldi	r18, 0x00	; 0
    59de:	30 e0       	ldi	r19, 0x00	; 0
    59e0:	48 ec       	ldi	r20, 0xC8	; 200
    59e2:	52 e4       	ldi	r21, 0x42	; 66
    59e4:	60 91 fb 07 	lds	r22, 0x07FB
    59e8:	70 91 fc 07 	lds	r23, 0x07FC
    59ec:	80 91 fd 07 	lds	r24, 0x07FD
    59f0:	90 91 fe 07 	lds	r25, 0x07FE
    59f4:	0e 94 b5 3c 	call	0x796a	; 0x796a <__mulsf3>
    59f8:	0e 94 69 3b 	call	0x76d2	; 0x76d2 <__fixsfsi>
    59fc:	9f 93       	push	r25
    59fe:	8f 93       	push	r24
    5a00:	7f 93       	push	r23
    5a02:	6f 93       	push	r22
    5a04:	20 e0       	ldi	r18, 0x00	; 0
    5a06:	30 e0       	ldi	r19, 0x00	; 0
    5a08:	48 ec       	ldi	r20, 0xC8	; 200
    5a0a:	52 e4       	ldi	r21, 0x42	; 66
    5a0c:	60 91 05 08 	lds	r22, 0x0805
    5a10:	70 91 06 08 	lds	r23, 0x0806
    5a14:	80 91 07 08 	lds	r24, 0x0807
    5a18:	90 91 08 08 	lds	r25, 0x0808
    5a1c:	0e 94 b5 3c 	call	0x796a	; 0x796a <__mulsf3>
    5a20:	0e 94 69 3b 	call	0x76d2	; 0x76d2 <__fixsfsi>
    5a24:	9f 93       	push	r25
    5a26:	8f 93       	push	r24
    5a28:	7f 93       	push	r23
    5a2a:	6f 93       	push	r22
    5a2c:	20 e0       	ldi	r18, 0x00	; 0
    5a2e:	30 e5       	ldi	r19, 0x50	; 80
    5a30:	43 ec       	ldi	r20, 0xC3	; 195
    5a32:	57 e4       	ldi	r21, 0x47	; 71
    5a34:	60 91 0d 08 	lds	r22, 0x080D
    5a38:	70 91 0e 08 	lds	r23, 0x080E
    5a3c:	80 91 0f 08 	lds	r24, 0x080F
    5a40:	90 91 10 08 	lds	r25, 0x0810
    5a44:	0e 94 b5 3c 	call	0x796a	; 0x796a <__mulsf3>
    5a48:	0e 94 69 3b 	call	0x76d2	; 0x76d2 <__fixsfsi>
    5a4c:	9f 93       	push	r25
    5a4e:	8f 93       	push	r24
    5a50:	7f 93       	push	r23
    5a52:	6f 93       	push	r22
    5a54:	20 e0       	ldi	r18, 0x00	; 0
    5a56:	30 e5       	ldi	r19, 0x50	; 80
    5a58:	43 ec       	ldi	r20, 0xC3	; 195
    5a5a:	57 e4       	ldi	r21, 0x47	; 71
    5a5c:	60 91 09 08 	lds	r22, 0x0809
    5a60:	70 91 0a 08 	lds	r23, 0x080A
    5a64:	80 91 0b 08 	lds	r24, 0x080B
    5a68:	90 91 0c 08 	lds	r25, 0x080C
    5a6c:	0e 94 b5 3c 	call	0x796a	; 0x796a <__mulsf3>
    5a70:	0e 94 69 3b 	call	0x76d2	; 0x76d2 <__fixsfsi>
    5a74:	9f 93       	push	r25
    5a76:	8f 93       	push	r24
    5a78:	7f 93       	push	r23
    5a7a:	6f 93       	push	r22
		
		if ((statusreg&(1<<mounttingstat)) && (statusreg&(1<<loggingstat)))
		{
			uint16_t Sekundenges = rtc.Stunden*3600;
			Sekundenges += rtc.Minuten*60;
			Sekundenges += rtc.Sekunden;
    5a7c:	d6 01       	movw	r26, r12
    5a7e:	52 96       	adiw	r26, 0x12	; 18
    5a80:	8c 91       	ld	r24, X
    5a82:	f7 01       	movw	r30, r14
    5a84:	e8 0f       	add	r30, r24
    5a86:	f1 1d       	adc	r31, r1
    5a88:	cf 01       	movw	r24, r30
			f_printf(&logger,"%u\t%ld\t%ld\t%ld\t%ld\n",(uint16_t)Sekundenges,(int32_t)(lon*100000),(int32_t)(lat*100000),(int32_t)(gpsspeed*100),(int32_t)(geschw*100));
    5a8a:	9f 93       	push	r25
    5a8c:	ef 93       	push	r30
    5a8e:	85 e7       	ldi	r24, 0x75	; 117
    5a90:	92 e0       	ldi	r25, 0x02	; 2
    5a92:	9f 93       	push	r25
    5a94:	8f 93       	push	r24
    5a96:	81 ea       	ldi	r24, 0xA1	; 161
    5a98:	93 e0       	ldi	r25, 0x03	; 3
    5a9a:	9f 93       	push	r25
    5a9c:	8f 93       	push	r24
    5a9e:	0e 94 7d 1d 	call	0x3afa	; 0x3afa <f_printf>
    5aa2:	0f b6       	in	r0, 0x3f	; 63
    5aa4:	f8 94       	cli
    5aa6:	de bf       	out	0x3e, r29	; 62
    5aa8:	0f be       	out	0x3f, r0	; 63
    5aaa:	cd bf       	out	0x3d, r28	; 61
		}
		
		anzeige |= (1<<refreshdisplay);
    5aac:	80 91 5e 08 	lds	r24, 0x085E
    5ab0:	81 60       	ori	r24, 0x01	; 1
    5ab2:	80 93 5e 08 	sts	0x085E, r24
		rtc.interupts &= ~(1<<sekundeninterupt);
    5ab6:	ef e5       	ldi	r30, 0x5F	; 95
    5ab8:	fd e0       	ldi	r31, 0x0D	; 13
    5aba:	80 8d       	ldd	r24, Z+24	; 0x18
    5abc:	8d 7f       	andi	r24, 0xFD	; 253
    5abe:	80 8f       	std	Z+24, r24	; 0x18
	}
	if ((rtc.interupts&(1<<minuteninterupt)))		//Minuten
    5ac0:	80 91 77 0d 	lds	r24, 0x0D77
    5ac4:	82 ff       	sbrs	r24, 2
    5ac6:	13 c0       	rjmp	.+38     	; 0x5aee <_Z19maininterupthandlerP7monitorh+0x4aa>
    5ac8:	80 91 5d 08 	lds	r24, 0x085D
    5acc:	86 70       	andi	r24, 0x06	; 6
	{
		if ((statusreg&(1<<mounttingstat)) && (statusreg&(1<<loggingstat)))
    5ace:	86 30       	cpi	r24, 0x06	; 6
    5ad0:	21 f4       	brne	.+8      	; 0x5ada <_Z19maininterupthandlerP7monitorh+0x496>
		{
			f_sync(&logger);
    5ad2:	81 ea       	ldi	r24, 0xA1	; 161
    5ad4:	93 e0       	ldi	r25, 0x03	; 3
    5ad6:	0e 94 a0 1c 	call	0x3940	; 0x3940 <f_sync>
		}
		anzeige |= (1<<refreshdisplay);
    5ada:	80 91 5e 08 	lds	r24, 0x085E
    5ade:	81 60       	ori	r24, 0x01	; 1
    5ae0:	80 93 5e 08 	sts	0x085E, r24
		rtc.interupts &= ~(1<<minuteninterupt);
    5ae4:	ef e5       	ldi	r30, 0x5F	; 95
    5ae6:	fd e0       	ldi	r31, 0x0D	; 13
    5ae8:	80 8d       	ldd	r24, Z+24	; 0x18
    5aea:	8b 7f       	andi	r24, 0xFB	; 251
    5aec:	80 8f       	std	Z+24, r24	; 0x18
	}
	
	if ((anzeige&(1<<refreshdisplay)))			//Anzeige aktualieseren
    5aee:	80 91 5e 08 	lds	r24, 0x085E
    5af2:	80 ff       	sbrs	r24, 0
    5af4:	0d c0       	rjmp	.+26     	; 0x5b10 <_Z19maininterupthandlerP7monitorh+0x4cc>
	{
		//Hier aktuelle seite neu ausgeben
		mon->draw();
    5af6:	d8 01       	movw	r26, r16
    5af8:	ed 91       	ld	r30, X+
    5afa:	fc 91       	ld	r31, X
    5afc:	02 80       	ldd	r0, Z+2	; 0x02
    5afe:	f3 81       	ldd	r31, Z+3	; 0x03
    5b00:	e0 2d       	mov	r30, r0
    5b02:	c8 01       	movw	r24, r16
    5b04:	09 95       	icall
		anzeige &= ~(1<<refreshdisplay);
    5b06:	80 91 5e 08 	lds	r24, 0x085E
    5b0a:	8e 7f       	andi	r24, 0xFE	; 254
    5b0c:	80 93 5e 08 	sts	0x085E, r24
		{
			anzeige |= (1<<blinkflag) | (1<<refreshdisplay);
			rtc.interupts &= ~(1<<Weckerein);
		}
	}*/
}
    5b10:	2d 96       	adiw	r28, 0x0d	; 13
    5b12:	0f b6       	in	r0, 0x3f	; 63
    5b14:	f8 94       	cli
    5b16:	de bf       	out	0x3e, r29	; 62
    5b18:	0f be       	out	0x3f, r0	; 63
    5b1a:	cd bf       	out	0x3d, r28	; 61
    5b1c:	df 91       	pop	r29
    5b1e:	cf 91       	pop	r28
    5b20:	1f 91       	pop	r17
    5b22:	0f 91       	pop	r16
    5b24:	ff 90       	pop	r15
    5b26:	ef 90       	pop	r14
    5b28:	df 90       	pop	r13
    5b2a:	cf 90       	pop	r12
    5b2c:	08 95       	ret

00005b2e <_Z10gpshandlerv>:

void gpshandler(){
    5b2e:	4f 92       	push	r4
    5b30:	5f 92       	push	r5
    5b32:	6f 92       	push	r6
    5b34:	7f 92       	push	r7
    5b36:	8f 92       	push	r8
    5b38:	9f 92       	push	r9
    5b3a:	af 92       	push	r10
    5b3c:	bf 92       	push	r11
    5b3e:	ef 92       	push	r14
    5b40:	ff 92       	push	r15
    5b42:	0f 93       	push	r16
    5b44:	1f 93       	push	r17
    5b46:	cf 93       	push	r28
    5b48:	df 93       	push	r29
    5b4a:	00 d0       	rcall	.+0      	; 0x5b4c <_Z10gpshandlerv+0x1e>
    5b4c:	00 d0       	rcall	.+0      	; 0x5b4e <_Z10gpshandlerv+0x20>
    5b4e:	cd b7       	in	r28, 0x3d	; 61
    5b50:	de b7       	in	r29, 0x3e	; 62
	if ((gpsstatus&(1<<complete)) && (gpsstatus&(1<<fix)))
    5b52:	e0 90 5a 08 	lds	r14, 0x085A
    5b56:	e2 fe       	sbrs	r14, 2
    5b58:	e3 c2       	rjmp	.+1478   	; 0x6120 <_Z10gpshandlerv+0x5f2>
    5b5a:	ee 20       	and	r14, r14
    5b5c:	0c f0       	brlt	.+2      	; 0x5b60 <_Z10gpshandlerv+0x32>
    5b5e:	84 c3       	rjmp	.+1800   	; 0x6268 <_Z10gpshandlerv+0x73a>
	{
		//brechnung von Latitutde, Longitude, Zeit und Datum
		//Zeit
		gpsstunde =		(gpsdata[7] - '0')*10;
		gpsstunde +=	(gpsdata[8] - '0');
    5b60:	02 e1       	ldi	r16, 0x12	; 18
    5b62:	18 e0       	ldi	r17, 0x08	; 8
    5b64:	f8 01       	movw	r30, r16
    5b66:	80 85       	ldd	r24, Z+8	; 0x08
    5b68:	21 ed       	ldi	r18, 0xD1	; 209
    5b6a:	28 0f       	add	r18, r24
void gpshandler(){
	if ((gpsstatus&(1<<complete)) && (gpsstatus&(1<<fix)))
	{
		//brechnung von Latitutde, Longitude, Zeit und Datum
		//Zeit
		gpsstunde =		(gpsdata[7] - '0')*10;
    5b6c:	87 81       	ldd	r24, Z+7	; 0x07
    5b6e:	88 0f       	add	r24, r24
    5b70:	80 56       	subi	r24, 0x60	; 96
    5b72:	98 2f       	mov	r25, r24
    5b74:	99 0f       	add	r25, r25
    5b76:	99 0f       	add	r25, r25
    5b78:	89 0f       	add	r24, r25
		gpsstunde +=	(gpsdata[8] - '0');
		gpsstunde += GMT;
    5b7a:	82 0f       	add	r24, r18
    5b7c:	80 93 04 08 	sts	0x0804, r24
    5b80:	82 85       	ldd	r24, Z+10	; 0x0a
    5b82:	20 ed       	ldi	r18, 0xD0	; 208
    5b84:	28 0f       	add	r18, r24
		gpsminute =		(gpsdata[9] - '0')*10;
    5b86:	81 85       	ldd	r24, Z+9	; 0x09
    5b88:	88 0f       	add	r24, r24
    5b8a:	80 56       	subi	r24, 0x60	; 96
    5b8c:	98 2f       	mov	r25, r24
    5b8e:	99 0f       	add	r25, r25
    5b90:	99 0f       	add	r25, r25
    5b92:	89 0f       	add	r24, r25
		gpsminute +=	(gpsdata[10] - '0');
    5b94:	82 0f       	add	r24, r18
    5b96:	80 93 03 08 	sts	0x0803, r24
    5b9a:	84 85       	ldd	r24, Z+12	; 0x0c
    5b9c:	20 ed       	ldi	r18, 0xD0	; 208
    5b9e:	28 0f       	add	r18, r24
		gpssekunde =	(gpsdata[11] - '0')*10;
    5ba0:	83 85       	ldd	r24, Z+11	; 0x0b
    5ba2:	88 0f       	add	r24, r24
    5ba4:	80 56       	subi	r24, 0x60	; 96
    5ba6:	98 2f       	mov	r25, r24
    5ba8:	99 0f       	add	r25, r25
    5baa:	99 0f       	add	r25, r25
    5bac:	89 0f       	add	r24, r25
		gpssekunde +=	(gpsdata[12] - '0');
    5bae:	82 0f       	add	r24, r18
    5bb0:	80 93 02 08 	sts	0x0802, r24
		
		//Latitude
		lat =	(gpsdata[20] - '0')*10;
		lat +=	(gpsdata[21] - '0');
		float latmin =	(gpsdata[22] - '0')*10;
    5bb4:	86 89       	ldd	r24, Z+22	; 0x16
    5bb6:	90 e0       	ldi	r25, 0x00	; 0
    5bb8:	c0 97       	sbiw	r24, 0x30	; 48
    5bba:	bc 01       	movw	r22, r24
    5bbc:	66 0f       	add	r22, r22
    5bbe:	77 1f       	adc	r23, r23
    5bc0:	88 0f       	add	r24, r24
    5bc2:	99 1f       	adc	r25, r25
    5bc4:	88 0f       	add	r24, r24
    5bc6:	99 1f       	adc	r25, r25
    5bc8:	88 0f       	add	r24, r24
    5bca:	99 1f       	adc	r25, r25
    5bcc:	68 0f       	add	r22, r24
    5bce:	79 1f       	adc	r23, r25
    5bd0:	07 2e       	mov	r0, r23
    5bd2:	00 0c       	add	r0, r0
    5bd4:	88 0b       	sbc	r24, r24
    5bd6:	99 0b       	sbc	r25, r25
    5bd8:	0e 94 9c 3b 	call	0x7738	; 0x7738 <__floatsisf>
    5bdc:	4b 01       	movw	r8, r22
    5bde:	5c 01       	movw	r10, r24
		latmin +=		(gpsdata[23] - '0');
    5be0:	f8 01       	movw	r30, r16
    5be2:	87 89       	ldd	r24, Z+23	; 0x17
    5be4:	90 e0       	ldi	r25, 0x00	; 0
    5be6:	c0 97       	sbiw	r24, 0x30	; 48
    5be8:	bc 01       	movw	r22, r24
    5bea:	99 0f       	add	r25, r25
    5bec:	88 0b       	sbc	r24, r24
    5bee:	99 0b       	sbc	r25, r25
    5bf0:	0e 94 9c 3b 	call	0x7738	; 0x7738 <__floatsisf>
    5bf4:	a5 01       	movw	r20, r10
    5bf6:	94 01       	movw	r18, r8
    5bf8:	0e 94 9a 3a 	call	0x7534	; 0x7534 <__addsf3>
    5bfc:	4b 01       	movw	r8, r22
    5bfe:	5c 01       	movw	r10, r24
		latmin +=		(gpsdata[25] - '0')/10.0;
    5c00:	f8 01       	movw	r30, r16
    5c02:	81 8d       	ldd	r24, Z+25	; 0x19
    5c04:	90 e0       	ldi	r25, 0x00	; 0
    5c06:	c0 97       	sbiw	r24, 0x30	; 48
    5c08:	bc 01       	movw	r22, r24
    5c0a:	99 0f       	add	r25, r25
    5c0c:	88 0b       	sbc	r24, r24
    5c0e:	99 0b       	sbc	r25, r25
    5c10:	0e 94 9c 3b 	call	0x7738	; 0x7738 <__floatsisf>
    5c14:	20 e0       	ldi	r18, 0x00	; 0
    5c16:	30 e0       	ldi	r19, 0x00	; 0
    5c18:	40 e2       	ldi	r20, 0x20	; 32
    5c1a:	51 e4       	ldi	r21, 0x41	; 65
    5c1c:	0e 94 01 3b 	call	0x7602	; 0x7602 <__divsf3>
    5c20:	a5 01       	movw	r20, r10
    5c22:	94 01       	movw	r18, r8
    5c24:	0e 94 9a 3a 	call	0x7534	; 0x7534 <__addsf3>
    5c28:	4b 01       	movw	r8, r22
    5c2a:	5c 01       	movw	r10, r24
		latmin +=		(gpsdata[26] - '0')/100.0;
    5c2c:	f8 01       	movw	r30, r16
    5c2e:	82 8d       	ldd	r24, Z+26	; 0x1a
    5c30:	90 e0       	ldi	r25, 0x00	; 0
    5c32:	c0 97       	sbiw	r24, 0x30	; 48
    5c34:	bc 01       	movw	r22, r24
    5c36:	99 0f       	add	r25, r25
    5c38:	88 0b       	sbc	r24, r24
    5c3a:	99 0b       	sbc	r25, r25
    5c3c:	0e 94 9c 3b 	call	0x7738	; 0x7738 <__floatsisf>
    5c40:	20 e0       	ldi	r18, 0x00	; 0
    5c42:	30 e0       	ldi	r19, 0x00	; 0
    5c44:	48 ec       	ldi	r20, 0xC8	; 200
    5c46:	52 e4       	ldi	r21, 0x42	; 66
    5c48:	0e 94 01 3b 	call	0x7602	; 0x7602 <__divsf3>
    5c4c:	a5 01       	movw	r20, r10
    5c4e:	94 01       	movw	r18, r8
    5c50:	0e 94 9a 3a 	call	0x7534	; 0x7534 <__addsf3>
    5c54:	4b 01       	movw	r8, r22
    5c56:	5c 01       	movw	r10, r24
		latmin +=		(gpsdata[27] - '0')/1000.0;
    5c58:	f8 01       	movw	r30, r16
    5c5a:	83 8d       	ldd	r24, Z+27	; 0x1b
    5c5c:	90 e0       	ldi	r25, 0x00	; 0
    5c5e:	c0 97       	sbiw	r24, 0x30	; 48
    5c60:	bc 01       	movw	r22, r24
    5c62:	99 0f       	add	r25, r25
    5c64:	88 0b       	sbc	r24, r24
    5c66:	99 0b       	sbc	r25, r25
    5c68:	0e 94 9c 3b 	call	0x7738	; 0x7738 <__floatsisf>
    5c6c:	20 e0       	ldi	r18, 0x00	; 0
    5c6e:	30 e0       	ldi	r19, 0x00	; 0
    5c70:	4a e7       	ldi	r20, 0x7A	; 122
    5c72:	54 e4       	ldi	r21, 0x44	; 68
    5c74:	0e 94 01 3b 	call	0x7602	; 0x7602 <__divsf3>
    5c78:	a5 01       	movw	r20, r10
    5c7a:	94 01       	movw	r18, r8
    5c7c:	0e 94 9a 3a 	call	0x7534	; 0x7534 <__addsf3>
    5c80:	4b 01       	movw	r8, r22
    5c82:	5c 01       	movw	r10, r24
		gpsminute +=	(gpsdata[10] - '0');
		gpssekunde =	(gpsdata[11] - '0')*10;
		gpssekunde +=	(gpsdata[12] - '0');
		
		//Latitude
		lat =	(gpsdata[20] - '0')*10;
    5c84:	f8 01       	movw	r30, r16
    5c86:	44 89       	ldd	r20, Z+20	; 0x14
    5c88:	50 e0       	ldi	r21, 0x00	; 0
    5c8a:	40 53       	subi	r20, 0x30	; 48
    5c8c:	51 09       	sbc	r21, r1
    5c8e:	ca 01       	movw	r24, r20
    5c90:	88 0f       	add	r24, r24
    5c92:	99 1f       	adc	r25, r25
    5c94:	44 0f       	add	r20, r20
    5c96:	55 1f       	adc	r21, r21
    5c98:	44 0f       	add	r20, r20
    5c9a:	55 1f       	adc	r21, r21
    5c9c:	44 0f       	add	r20, r20
    5c9e:	55 1f       	adc	r21, r21
    5ca0:	84 0f       	add	r24, r20
    5ca2:	95 1f       	adc	r25, r21
    5ca4:	bc 01       	movw	r22, r24
    5ca6:	99 0f       	add	r25, r25
    5ca8:	88 0b       	sbc	r24, r24
    5caa:	99 0b       	sbc	r25, r25
    5cac:	0e 94 9c 3b 	call	0x7738	; 0x7738 <__floatsisf>
    5cb0:	2b 01       	movw	r4, r22
    5cb2:	3c 01       	movw	r6, r24
		lat +=	(gpsdata[21] - '0');
    5cb4:	f8 01       	movw	r30, r16
    5cb6:	85 89       	ldd	r24, Z+21	; 0x15
    5cb8:	90 e0       	ldi	r25, 0x00	; 0
    5cba:	c0 97       	sbiw	r24, 0x30	; 48
    5cbc:	bc 01       	movw	r22, r24
    5cbe:	99 0f       	add	r25, r25
    5cc0:	88 0b       	sbc	r24, r24
    5cc2:	99 0b       	sbc	r25, r25
    5cc4:	0e 94 9c 3b 	call	0x7738	; 0x7738 <__floatsisf>
    5cc8:	9b 01       	movw	r18, r22
    5cca:	ac 01       	movw	r20, r24
    5ccc:	c3 01       	movw	r24, r6
    5cce:	b2 01       	movw	r22, r4
    5cd0:	0e 94 9a 3a 	call	0x7534	; 0x7534 <__addsf3>
    5cd4:	2b 01       	movw	r4, r22
    5cd6:	3c 01       	movw	r6, r24
		float latmin =	(gpsdata[22] - '0')*10;
		latmin +=		(gpsdata[23] - '0');
		latmin +=		(gpsdata[25] - '0')/10.0;
		latmin +=		(gpsdata[26] - '0')/100.0;
		latmin +=		(gpsdata[27] - '0')/1000.0;
		latmin +=		(gpsdata[28] - '0')/10000.0;
    5cd8:	f8 01       	movw	r30, r16
    5cda:	84 8d       	ldd	r24, Z+28	; 0x1c
    5cdc:	90 e0       	ldi	r25, 0x00	; 0
    5cde:	c0 97       	sbiw	r24, 0x30	; 48
    5ce0:	bc 01       	movw	r22, r24
    5ce2:	99 0f       	add	r25, r25
    5ce4:	88 0b       	sbc	r24, r24
    5ce6:	99 0b       	sbc	r25, r25
    5ce8:	0e 94 9c 3b 	call	0x7738	; 0x7738 <__floatsisf>
    5cec:	20 e0       	ldi	r18, 0x00	; 0
    5cee:	30 e4       	ldi	r19, 0x40	; 64
    5cf0:	4c e1       	ldi	r20, 0x1C	; 28
    5cf2:	56 e4       	ldi	r21, 0x46	; 70
    5cf4:	0e 94 01 3b 	call	0x7602	; 0x7602 <__divsf3>
    5cf8:	a5 01       	movw	r20, r10
    5cfa:	94 01       	movw	r18, r8
    5cfc:	0e 94 9a 3a 	call	0x7534	; 0x7534 <__addsf3>
		lat +=	latmin/60.0;
    5d00:	20 e0       	ldi	r18, 0x00	; 0
    5d02:	30 e0       	ldi	r19, 0x00	; 0
    5d04:	40 e7       	ldi	r20, 0x70	; 112
    5d06:	52 e4       	ldi	r21, 0x42	; 66
    5d08:	0e 94 01 3b 	call	0x7602	; 0x7602 <__divsf3>
    5d0c:	9b 01       	movw	r18, r22
    5d0e:	ac 01       	movw	r20, r24
    5d10:	c3 01       	movw	r24, r6
    5d12:	b2 01       	movw	r22, r4
    5d14:	0e 94 9a 3a 	call	0x7534	; 0x7534 <__addsf3>
    5d18:	60 93 0d 08 	sts	0x080D, r22
    5d1c:	70 93 0e 08 	sts	0x080E, r23
    5d20:	80 93 0f 08 	sts	0x080F, r24
    5d24:	90 93 10 08 	sts	0x0810, r25
		if (gpsdata[30] != 'N')
    5d28:	f8 01       	movw	r30, r16
    5d2a:	26 8d       	ldd	r18, Z+30	; 0x1e
    5d2c:	2e 34       	cpi	r18, 0x4E	; 78
    5d2e:	59 f0       	breq	.+22     	; 0x5d46 <_Z10gpshandlerv+0x218>
		{
			lat *= -1;
    5d30:	dc 01       	movw	r26, r24
    5d32:	cb 01       	movw	r24, r22
    5d34:	b0 58       	subi	r27, 0x80	; 128
    5d36:	80 93 0d 08 	sts	0x080D, r24
    5d3a:	90 93 0e 08 	sts	0x080E, r25
    5d3e:	a0 93 0f 08 	sts	0x080F, r26
    5d42:	b0 93 10 08 	sts	0x0810, r27
		
		//Longitude
		lon =	(gpsdata[32] - '0')*100;
		lon +=	(gpsdata[33] - '0')*10;
		lon +=	(gpsdata[34] - '0');
		float lonmin =	(gpsdata[35] - '0')*10;
    5d46:	02 e1       	ldi	r16, 0x12	; 18
    5d48:	18 e0       	ldi	r17, 0x08	; 8
    5d4a:	f8 01       	movw	r30, r16
    5d4c:	83 a1       	ldd	r24, Z+35	; 0x23
    5d4e:	90 e0       	ldi	r25, 0x00	; 0
    5d50:	c0 97       	sbiw	r24, 0x30	; 48
    5d52:	bc 01       	movw	r22, r24
    5d54:	66 0f       	add	r22, r22
    5d56:	77 1f       	adc	r23, r23
    5d58:	88 0f       	add	r24, r24
    5d5a:	99 1f       	adc	r25, r25
    5d5c:	88 0f       	add	r24, r24
    5d5e:	99 1f       	adc	r25, r25
    5d60:	88 0f       	add	r24, r24
    5d62:	99 1f       	adc	r25, r25
    5d64:	68 0f       	add	r22, r24
    5d66:	79 1f       	adc	r23, r25
    5d68:	07 2e       	mov	r0, r23
    5d6a:	00 0c       	add	r0, r0
    5d6c:	88 0b       	sbc	r24, r24
    5d6e:	99 0b       	sbc	r25, r25
    5d70:	0e 94 9c 3b 	call	0x7738	; 0x7738 <__floatsisf>
    5d74:	4b 01       	movw	r8, r22
    5d76:	5c 01       	movw	r10, r24
		lonmin +=		(gpsdata[36] - '0');
    5d78:	f8 01       	movw	r30, r16
    5d7a:	84 a1       	ldd	r24, Z+36	; 0x24
    5d7c:	90 e0       	ldi	r25, 0x00	; 0
    5d7e:	c0 97       	sbiw	r24, 0x30	; 48
    5d80:	bc 01       	movw	r22, r24
    5d82:	99 0f       	add	r25, r25
    5d84:	88 0b       	sbc	r24, r24
    5d86:	99 0b       	sbc	r25, r25
    5d88:	0e 94 9c 3b 	call	0x7738	; 0x7738 <__floatsisf>
    5d8c:	a5 01       	movw	r20, r10
    5d8e:	94 01       	movw	r18, r8
    5d90:	0e 94 9a 3a 	call	0x7534	; 0x7534 <__addsf3>
    5d94:	4b 01       	movw	r8, r22
    5d96:	5c 01       	movw	r10, r24
		lonmin +=		(gpsdata[38] - '0')/10.0;
    5d98:	f8 01       	movw	r30, r16
    5d9a:	86 a1       	ldd	r24, Z+38	; 0x26
    5d9c:	90 e0       	ldi	r25, 0x00	; 0
    5d9e:	c0 97       	sbiw	r24, 0x30	; 48
    5da0:	bc 01       	movw	r22, r24
    5da2:	99 0f       	add	r25, r25
    5da4:	88 0b       	sbc	r24, r24
    5da6:	99 0b       	sbc	r25, r25
    5da8:	0e 94 9c 3b 	call	0x7738	; 0x7738 <__floatsisf>
    5dac:	20 e0       	ldi	r18, 0x00	; 0
    5dae:	30 e0       	ldi	r19, 0x00	; 0
    5db0:	40 e2       	ldi	r20, 0x20	; 32
    5db2:	51 e4       	ldi	r21, 0x41	; 65
    5db4:	0e 94 01 3b 	call	0x7602	; 0x7602 <__divsf3>
    5db8:	a5 01       	movw	r20, r10
    5dba:	94 01       	movw	r18, r8
    5dbc:	0e 94 9a 3a 	call	0x7534	; 0x7534 <__addsf3>
    5dc0:	4b 01       	movw	r8, r22
    5dc2:	5c 01       	movw	r10, r24
		lonmin +=		(gpsdata[39] - '0')/100.0;
    5dc4:	f8 01       	movw	r30, r16
    5dc6:	87 a1       	ldd	r24, Z+39	; 0x27
    5dc8:	90 e0       	ldi	r25, 0x00	; 0
    5dca:	c0 97       	sbiw	r24, 0x30	; 48
    5dcc:	bc 01       	movw	r22, r24
    5dce:	99 0f       	add	r25, r25
    5dd0:	88 0b       	sbc	r24, r24
    5dd2:	99 0b       	sbc	r25, r25
    5dd4:	0e 94 9c 3b 	call	0x7738	; 0x7738 <__floatsisf>
    5dd8:	20 e0       	ldi	r18, 0x00	; 0
    5dda:	30 e0       	ldi	r19, 0x00	; 0
    5ddc:	48 ec       	ldi	r20, 0xC8	; 200
    5dde:	52 e4       	ldi	r21, 0x42	; 66
    5de0:	0e 94 01 3b 	call	0x7602	; 0x7602 <__divsf3>
    5de4:	a5 01       	movw	r20, r10
    5de6:	94 01       	movw	r18, r8
    5de8:	0e 94 9a 3a 	call	0x7534	; 0x7534 <__addsf3>
    5dec:	4b 01       	movw	r8, r22
    5dee:	5c 01       	movw	r10, r24
		lonmin +=		(gpsdata[40] - '0')/1000.0;
    5df0:	f8 01       	movw	r30, r16
    5df2:	80 a5       	ldd	r24, Z+40	; 0x28
    5df4:	90 e0       	ldi	r25, 0x00	; 0
    5df6:	c0 97       	sbiw	r24, 0x30	; 48
    5df8:	bc 01       	movw	r22, r24
    5dfa:	99 0f       	add	r25, r25
    5dfc:	88 0b       	sbc	r24, r24
    5dfe:	99 0b       	sbc	r25, r25
    5e00:	0e 94 9c 3b 	call	0x7738	; 0x7738 <__floatsisf>
    5e04:	20 e0       	ldi	r18, 0x00	; 0
    5e06:	30 e0       	ldi	r19, 0x00	; 0
    5e08:	4a e7       	ldi	r20, 0x7A	; 122
    5e0a:	54 e4       	ldi	r21, 0x44	; 68
    5e0c:	0e 94 01 3b 	call	0x7602	; 0x7602 <__divsf3>
    5e10:	a5 01       	movw	r20, r10
    5e12:	94 01       	movw	r18, r8
    5e14:	0e 94 9a 3a 	call	0x7534	; 0x7534 <__addsf3>
    5e18:	4b 01       	movw	r8, r22
    5e1a:	5c 01       	movw	r10, r24
		{
			lat *= -1;
		}
		
		//Longitude
		lon =	(gpsdata[32] - '0')*100;
    5e1c:	f8 01       	movw	r30, r16
    5e1e:	80 a1       	ldd	r24, Z+32	; 0x20
    5e20:	90 e0       	ldi	r25, 0x00	; 0
    5e22:	c0 97       	sbiw	r24, 0x30	; 48
    5e24:	24 e6       	ldi	r18, 0x64	; 100
    5e26:	28 9f       	mul	r18, r24
    5e28:	b0 01       	movw	r22, r0
    5e2a:	29 9f       	mul	r18, r25
    5e2c:	70 0d       	add	r23, r0
    5e2e:	11 24       	eor	r1, r1
    5e30:	07 2e       	mov	r0, r23
    5e32:	00 0c       	add	r0, r0
    5e34:	88 0b       	sbc	r24, r24
    5e36:	99 0b       	sbc	r25, r25
    5e38:	0e 94 9c 3b 	call	0x7738	; 0x7738 <__floatsisf>
    5e3c:	2b 01       	movw	r4, r22
    5e3e:	3c 01       	movw	r6, r24
		lon +=	(gpsdata[33] - '0')*10;
    5e40:	f8 01       	movw	r30, r16
    5e42:	21 a1       	ldd	r18, Z+33	; 0x21
    5e44:	30 e0       	ldi	r19, 0x00	; 0
    5e46:	20 53       	subi	r18, 0x30	; 48
    5e48:	31 09       	sbc	r19, r1
    5e4a:	c9 01       	movw	r24, r18
    5e4c:	88 0f       	add	r24, r24
    5e4e:	99 1f       	adc	r25, r25
    5e50:	22 0f       	add	r18, r18
    5e52:	33 1f       	adc	r19, r19
    5e54:	22 0f       	add	r18, r18
    5e56:	33 1f       	adc	r19, r19
    5e58:	22 0f       	add	r18, r18
    5e5a:	33 1f       	adc	r19, r19
    5e5c:	82 0f       	add	r24, r18
    5e5e:	93 1f       	adc	r25, r19
    5e60:	bc 01       	movw	r22, r24
    5e62:	99 0f       	add	r25, r25
    5e64:	88 0b       	sbc	r24, r24
    5e66:	99 0b       	sbc	r25, r25
    5e68:	0e 94 9c 3b 	call	0x7738	; 0x7738 <__floatsisf>
    5e6c:	9b 01       	movw	r18, r22
    5e6e:	ac 01       	movw	r20, r24
    5e70:	c3 01       	movw	r24, r6
    5e72:	b2 01       	movw	r22, r4
    5e74:	0e 94 9a 3a 	call	0x7534	; 0x7534 <__addsf3>
    5e78:	2b 01       	movw	r4, r22
    5e7a:	3c 01       	movw	r6, r24
		lon +=	(gpsdata[34] - '0');
    5e7c:	f8 01       	movw	r30, r16
    5e7e:	82 a1       	ldd	r24, Z+34	; 0x22
    5e80:	90 e0       	ldi	r25, 0x00	; 0
    5e82:	c0 97       	sbiw	r24, 0x30	; 48
    5e84:	bc 01       	movw	r22, r24
    5e86:	99 0f       	add	r25, r25
    5e88:	88 0b       	sbc	r24, r24
    5e8a:	99 0b       	sbc	r25, r25
    5e8c:	0e 94 9c 3b 	call	0x7738	; 0x7738 <__floatsisf>
    5e90:	9b 01       	movw	r18, r22
    5e92:	ac 01       	movw	r20, r24
    5e94:	c3 01       	movw	r24, r6
    5e96:	b2 01       	movw	r22, r4
    5e98:	0e 94 9a 3a 	call	0x7534	; 0x7534 <__addsf3>
    5e9c:	2b 01       	movw	r4, r22
    5e9e:	3c 01       	movw	r6, r24
		float lonmin =	(gpsdata[35] - '0')*10;
		lonmin +=		(gpsdata[36] - '0');
		lonmin +=		(gpsdata[38] - '0')/10.0;
		lonmin +=		(gpsdata[39] - '0')/100.0;
		lonmin +=		(gpsdata[40] - '0')/1000.0;
		lonmin +=		(gpsdata[41] - '0')/10000.0;
    5ea0:	f8 01       	movw	r30, r16
    5ea2:	81 a5       	ldd	r24, Z+41	; 0x29
    5ea4:	90 e0       	ldi	r25, 0x00	; 0
    5ea6:	c0 97       	sbiw	r24, 0x30	; 48
    5ea8:	bc 01       	movw	r22, r24
    5eaa:	99 0f       	add	r25, r25
    5eac:	88 0b       	sbc	r24, r24
    5eae:	99 0b       	sbc	r25, r25
    5eb0:	0e 94 9c 3b 	call	0x7738	; 0x7738 <__floatsisf>
    5eb4:	20 e0       	ldi	r18, 0x00	; 0
    5eb6:	30 e4       	ldi	r19, 0x40	; 64
    5eb8:	4c e1       	ldi	r20, 0x1C	; 28
    5eba:	56 e4       	ldi	r21, 0x46	; 70
    5ebc:	0e 94 01 3b 	call	0x7602	; 0x7602 <__divsf3>
    5ec0:	a5 01       	movw	r20, r10
    5ec2:	94 01       	movw	r18, r8
    5ec4:	0e 94 9a 3a 	call	0x7534	; 0x7534 <__addsf3>
		lon +=			lonmin/60.0;
    5ec8:	20 e0       	ldi	r18, 0x00	; 0
    5eca:	30 e0       	ldi	r19, 0x00	; 0
    5ecc:	40 e7       	ldi	r20, 0x70	; 112
    5ece:	52 e4       	ldi	r21, 0x42	; 66
    5ed0:	0e 94 01 3b 	call	0x7602	; 0x7602 <__divsf3>
    5ed4:	9b 01       	movw	r18, r22
    5ed6:	ac 01       	movw	r20, r24
    5ed8:	c3 01       	movw	r24, r6
    5eda:	b2 01       	movw	r22, r4
    5edc:	0e 94 9a 3a 	call	0x7534	; 0x7534 <__addsf3>
    5ee0:	60 93 09 08 	sts	0x0809, r22
    5ee4:	70 93 0a 08 	sts	0x080A, r23
    5ee8:	80 93 0b 08 	sts	0x080B, r24
    5eec:	90 93 0c 08 	sts	0x080C, r25
		if (gpsdata[43] != 'E')
    5ef0:	f8 01       	movw	r30, r16
    5ef2:	23 a5       	ldd	r18, Z+43	; 0x2b
    5ef4:	25 34       	cpi	r18, 0x45	; 69
    5ef6:	59 f0       	breq	.+22     	; 0x5f0e <_Z10gpshandlerv+0x3e0>
		{
			lon *= -1;
    5ef8:	dc 01       	movw	r26, r24
    5efa:	cb 01       	movw	r24, r22
    5efc:	b0 58       	subi	r27, 0x80	; 128
    5efe:	80 93 09 08 	sts	0x0809, r24
    5f02:	90 93 0a 08 	sts	0x080A, r25
    5f06:	a0 93 0b 08 	sts	0x080B, r26
    5f0a:	b0 93 0c 08 	sts	0x080C, r27
		}
		//Speed 
		volatile uint8_t counter = 45;
    5f0e:	8d e2       	ldi	r24, 0x2D	; 45
    5f10:	8c 83       	std	Y+4, r24	; 0x04
		uint8_t weiter = true;
		while (weiter)
		{
			if (gpsdata[counter]=='.')
    5f12:	ec 81       	ldd	r30, Y+4	; 0x04
    5f14:	f0 e0       	ldi	r31, 0x00	; 0
    5f16:	ee 5e       	subi	r30, 0xEE	; 238
    5f18:	f7 4f       	sbci	r31, 0xF7	; 247
    5f1a:	80 81       	ld	r24, Z
    5f1c:	8e 32       	cpi	r24, 0x2E	; 46
    5f1e:	91 f4       	brne	.+36     	; 0x5f44 <_Z10gpshandlerv+0x416>
			{
				weiter=false;
				counter--;
    5f20:	8c 81       	ldd	r24, Y+4	; 0x04
    5f22:	81 50       	subi	r24, 0x01	; 1
    5f24:	8c 83       	std	Y+4, r24	; 0x04
			}
			counter++;
    5f26:	8c 81       	ldd	r24, Y+4	; 0x04
    5f28:	8f 5f       	subi	r24, 0xFF	; 255
    5f2a:	8c 83       	std	Y+4, r24	; 0x04
		}
		
		gpsspeed = 0;
    5f2c:	10 92 05 08 	sts	0x0805, r1
    5f30:	10 92 06 08 	sts	0x0806, r1
    5f34:	10 92 07 08 	sts	0x0807, r1
    5f38:	10 92 08 08 	sts	0x0808, r1
		for(uint8_t i=45;i<counter;i++){
    5f3c:	8c 81       	ldd	r24, Y+4	; 0x04
    5f3e:	8e 32       	cpi	r24, 0x2E	; 46
    5f40:	28 f4       	brcc	.+10     	; 0x5f4c <_Z10gpshandlerv+0x41e>
    5f42:	47 c0       	rjmp	.+142    	; 0x5fd2 <_Z10gpshandlerv+0x4a4>
			if (gpsdata[counter]=='.')
			{
				weiter=false;
				counter--;
			}
			counter++;
    5f44:	8c 81       	ldd	r24, Y+4	; 0x04
    5f46:	8f 5f       	subi	r24, 0xFF	; 255
    5f48:	8c 83       	std	Y+4, r24	; 0x04
    5f4a:	e3 cf       	rjmp	.-58     	; 0x5f12 <_Z10gpshandlerv+0x3e4>
		}
		
		gpsspeed = 0;
		for(uint8_t i=45;i<counter;i++){
    5f4c:	81 2c       	mov	r8, r1
    5f4e:	91 2c       	mov	r9, r1
    5f50:	54 01       	movw	r10, r8
    5f52:	0f 2e       	mov	r0, r31
    5f54:	fd e2       	ldi	r31, 0x2D	; 45
    5f56:	ff 2e       	mov	r15, r31
    5f58:	f0 2d       	mov	r31, r0
			gpsspeed += (gpsdata[i]-'0')*pow(10,(counter-i-1));
    5f5a:	0f 2d       	mov	r16, r15
    5f5c:	10 e0       	ldi	r17, 0x00	; 0
    5f5e:	8c 81       	ldd	r24, Y+4	; 0x04
    5f60:	90 e0       	ldi	r25, 0x00	; 0
    5f62:	80 1b       	sub	r24, r16
    5f64:	91 0b       	sbc	r25, r17
    5f66:	01 97       	sbiw	r24, 0x01	; 1
    5f68:	bc 01       	movw	r22, r24
    5f6a:	99 0f       	add	r25, r25
    5f6c:	88 0b       	sbc	r24, r24
    5f6e:	99 0b       	sbc	r25, r25
    5f70:	0e 94 9c 3b 	call	0x7738	; 0x7738 <__floatsisf>
    5f74:	9b 01       	movw	r18, r22
    5f76:	ac 01       	movw	r20, r24
    5f78:	60 e0       	ldi	r22, 0x00	; 0
    5f7a:	70 e0       	ldi	r23, 0x00	; 0
    5f7c:	80 e2       	ldi	r24, 0x20	; 32
    5f7e:	91 e4       	ldi	r25, 0x41	; 65
    5f80:	0e 94 18 3d 	call	0x7a30	; 0x7a30 <pow>
    5f84:	2b 01       	movw	r4, r22
    5f86:	3c 01       	movw	r6, r24
    5f88:	f8 01       	movw	r30, r16
    5f8a:	ee 5e       	subi	r30, 0xEE	; 238
    5f8c:	f7 4f       	sbci	r31, 0xF7	; 247
    5f8e:	60 81       	ld	r22, Z
    5f90:	70 e0       	ldi	r23, 0x00	; 0
    5f92:	60 53       	subi	r22, 0x30	; 48
    5f94:	71 09       	sbc	r23, r1
    5f96:	07 2e       	mov	r0, r23
    5f98:	00 0c       	add	r0, r0
    5f9a:	88 0b       	sbc	r24, r24
    5f9c:	99 0b       	sbc	r25, r25
    5f9e:	0e 94 9c 3b 	call	0x7738	; 0x7738 <__floatsisf>
    5fa2:	a3 01       	movw	r20, r6
    5fa4:	92 01       	movw	r18, r4
    5fa6:	0e 94 b5 3c 	call	0x796a	; 0x796a <__mulsf3>
    5faa:	9b 01       	movw	r18, r22
    5fac:	ac 01       	movw	r20, r24
    5fae:	c5 01       	movw	r24, r10
    5fb0:	b4 01       	movw	r22, r8
    5fb2:	0e 94 9a 3a 	call	0x7534	; 0x7534 <__addsf3>
    5fb6:	4b 01       	movw	r8, r22
    5fb8:	5c 01       	movw	r10, r24
			}
			counter++;
		}
		
		gpsspeed = 0;
		for(uint8_t i=45;i<counter;i++){
    5fba:	f3 94       	inc	r15
    5fbc:	8c 81       	ldd	r24, Y+4	; 0x04
    5fbe:	f8 16       	cp	r15, r24
    5fc0:	60 f2       	brcs	.-104    	; 0x5f5a <_Z10gpshandlerv+0x42c>
    5fc2:	80 92 05 08 	sts	0x0805, r8
    5fc6:	90 92 06 08 	sts	0x0806, r9
    5fca:	a0 92 07 08 	sts	0x0807, r10
    5fce:	b0 92 08 08 	sts	0x0808, r11
			gpsspeed += (gpsdata[i]-'0')*pow(10,(counter-i-1));
		}
		gpsspeed += (gpsdata[counter+1]-'0')*0.1;
    5fd2:	ec 81       	ldd	r30, Y+4	; 0x04
		gpsspeed += (gpsdata[counter+2]-'0')*0.01;
    5fd4:	1c 81       	ldd	r17, Y+4	; 0x04
		
		gpsspeed = 0;
		for(uint8_t i=45;i<counter;i++){
			gpsspeed += (gpsdata[i]-'0')*pow(10,(counter-i-1));
		}
		gpsspeed += (gpsdata[counter+1]-'0')*0.1;
    5fd6:	f0 e0       	ldi	r31, 0x00	; 0
    5fd8:	ee 5e       	subi	r30, 0xEE	; 238
    5fda:	f7 4f       	sbci	r31, 0xF7	; 247
    5fdc:	61 81       	ldd	r22, Z+1	; 0x01
    5fde:	70 e0       	ldi	r23, 0x00	; 0
    5fe0:	60 53       	subi	r22, 0x30	; 48
    5fe2:	71 09       	sbc	r23, r1
    5fe4:	07 2e       	mov	r0, r23
    5fe6:	00 0c       	add	r0, r0
    5fe8:	88 0b       	sbc	r24, r24
    5fea:	99 0b       	sbc	r25, r25
    5fec:	0e 94 9c 3b 	call	0x7738	; 0x7738 <__floatsisf>
    5ff0:	2d ec       	ldi	r18, 0xCD	; 205
    5ff2:	3c ec       	ldi	r19, 0xCC	; 204
    5ff4:	4c ec       	ldi	r20, 0xCC	; 204
    5ff6:	5d e3       	ldi	r21, 0x3D	; 61
    5ff8:	0e 94 b5 3c 	call	0x796a	; 0x796a <__mulsf3>
    5ffc:	20 91 05 08 	lds	r18, 0x0805
    6000:	30 91 06 08 	lds	r19, 0x0806
    6004:	40 91 07 08 	lds	r20, 0x0807
    6008:	50 91 08 08 	lds	r21, 0x0808
    600c:	0e 94 9a 3a 	call	0x7534	; 0x7534 <__addsf3>
    6010:	4b 01       	movw	r8, r22
    6012:	5c 01       	movw	r10, r24
		gpsspeed += (gpsdata[counter+2]-'0')*0.01;
    6014:	e1 2f       	mov	r30, r17
    6016:	f0 e0       	ldi	r31, 0x00	; 0
    6018:	ee 5e       	subi	r30, 0xEE	; 238
    601a:	f7 4f       	sbci	r31, 0xF7	; 247
    601c:	82 81       	ldd	r24, Z+2	; 0x02
    601e:	90 e0       	ldi	r25, 0x00	; 0
    6020:	c0 97       	sbiw	r24, 0x30	; 48
    6022:	bc 01       	movw	r22, r24
    6024:	99 0f       	add	r25, r25
    6026:	88 0b       	sbc	r24, r24
    6028:	99 0b       	sbc	r25, r25
    602a:	0e 94 9c 3b 	call	0x7738	; 0x7738 <__floatsisf>
    602e:	2a e0       	ldi	r18, 0x0A	; 10
    6030:	37 ed       	ldi	r19, 0xD7	; 215
    6032:	43 e2       	ldi	r20, 0x23	; 35
    6034:	5c e3       	ldi	r21, 0x3C	; 60
    6036:	0e 94 b5 3c 	call	0x796a	; 0x796a <__mulsf3>
    603a:	9b 01       	movw	r18, r22
    603c:	ac 01       	movw	r20, r24
    603e:	c5 01       	movw	r24, r10
    6040:	b4 01       	movw	r22, r8
    6042:	0e 94 9a 3a 	call	0x7534	; 0x7534 <__addsf3>
		//umrechnen knoten in kmh
		gpsspeed *= 1.852;
    6046:	26 e5       	ldi	r18, 0x56	; 86
    6048:	3e e0       	ldi	r19, 0x0E	; 14
    604a:	4d ee       	ldi	r20, 0xED	; 237
    604c:	5f e3       	ldi	r21, 0x3F	; 63
    604e:	0e 94 b5 3c 	call	0x796a	; 0x796a <__mulsf3>
    6052:	60 93 05 08 	sts	0x0805, r22
    6056:	70 93 06 08 	sts	0x0806, r23
    605a:	80 93 07 08 	sts	0x0807, r24
    605e:	90 93 08 08 	sts	0x0808, r25
		
		//date
		counter =19;
    6062:	83 e1       	ldi	r24, 0x13	; 19
    6064:	8c 83       	std	Y+4, r24	; 0x04
		volatile uint8_t nichterreicht = 0;
    6066:	1b 82       	std	Y+3, r1	; 0x03
		
		while (nichterreicht < 7)
    6068:	8b 81       	ldd	r24, Y+3	; 0x03
    606a:	87 30       	cpi	r24, 0x07	; 7
    606c:	80 f4       	brcc	.+32     	; 0x608e <_Z10gpshandlerv+0x560>
		{
			if (gpsdata[counter] == ',')
    606e:	ec 81       	ldd	r30, Y+4	; 0x04
    6070:	f0 e0       	ldi	r31, 0x00	; 0
    6072:	ee 5e       	subi	r30, 0xEE	; 238
    6074:	f7 4f       	sbci	r31, 0xF7	; 247
    6076:	80 81       	ld	r24, Z
    6078:	8c 32       	cpi	r24, 0x2C	; 44
    607a:	19 f4       	brne	.+6      	; 0x6082 <_Z10gpshandlerv+0x554>
			{
				nichterreicht++;
    607c:	8b 81       	ldd	r24, Y+3	; 0x03
    607e:	8f 5f       	subi	r24, 0xFF	; 255
    6080:	8b 83       	std	Y+3, r24	; 0x03
			}
			counter++;
    6082:	8c 81       	ldd	r24, Y+4	; 0x04
    6084:	8f 5f       	subi	r24, 0xFF	; 255
    6086:	8c 83       	std	Y+4, r24	; 0x04
		
		//date
		counter =19;
		volatile uint8_t nichterreicht = 0;
		
		while (nichterreicht < 7)
    6088:	8b 81       	ldd	r24, Y+3	; 0x03
    608a:	87 30       	cpi	r24, 0x07	; 7
    608c:	80 f3       	brcs	.-32     	; 0x606e <_Z10gpshandlerv+0x540>
			}
			counter++;
		}
		
		//Datum
		gpsTag =	(gpsdata[counter+0] - '0')*10;
    608e:	ac 81       	ldd	r26, Y+4	; 0x04
		gpsTag +=	(gpsdata[counter+1] - '0');
    6090:	ec 81       	ldd	r30, Y+4	; 0x04
			}
			counter++;
		}
		
		//Datum
		gpsTag =	(gpsdata[counter+0] - '0')*10;
    6092:	b0 e0       	ldi	r27, 0x00	; 0
    6094:	ae 5e       	subi	r26, 0xEE	; 238
    6096:	b7 4f       	sbci	r27, 0xF7	; 247
    6098:	8c 91       	ld	r24, X
    609a:	88 0f       	add	r24, r24
    609c:	80 56       	subi	r24, 0x60	; 96
    609e:	28 2f       	mov	r18, r24
    60a0:	22 0f       	add	r18, r18
    60a2:	22 0f       	add	r18, r18
    60a4:	28 0f       	add	r18, r24
		gpsTag +=	(gpsdata[counter+1] - '0');
    60a6:	f0 e0       	ldi	r31, 0x00	; 0
    60a8:	ee 5e       	subi	r30, 0xEE	; 238
    60aa:	f7 4f       	sbci	r31, 0xF7	; 247
    60ac:	81 81       	ldd	r24, Z+1	; 0x01
    60ae:	90 e0       	ldi	r25, 0x00	; 0
    60b0:	c0 97       	sbiw	r24, 0x30	; 48
    60b2:	82 0f       	add	r24, r18
    60b4:	91 1d       	adc	r25, r1
    60b6:	80 93 01 08 	sts	0x0801, r24
		gpsMonat =	(gpsdata[counter+2] - '0')*10;
    60ba:	ac 81       	ldd	r26, Y+4	; 0x04
		gpsMonat +=	(gpsdata[counter+3] - '0');
    60bc:	ec 81       	ldd	r30, Y+4	; 0x04
		}
		
		//Datum
		gpsTag =	(gpsdata[counter+0] - '0')*10;
		gpsTag +=	(gpsdata[counter+1] - '0');
		gpsMonat =	(gpsdata[counter+2] - '0')*10;
    60be:	b0 e0       	ldi	r27, 0x00	; 0
    60c0:	ae 5e       	subi	r26, 0xEE	; 238
    60c2:	b7 4f       	sbci	r27, 0xF7	; 247
    60c4:	12 96       	adiw	r26, 0x02	; 2
    60c6:	8c 91       	ld	r24, X
    60c8:	88 0f       	add	r24, r24
    60ca:	80 56       	subi	r24, 0x60	; 96
    60cc:	28 2f       	mov	r18, r24
    60ce:	22 0f       	add	r18, r18
    60d0:	22 0f       	add	r18, r18
    60d2:	28 0f       	add	r18, r24
		gpsMonat +=	(gpsdata[counter+3] - '0');
    60d4:	f0 e0       	ldi	r31, 0x00	; 0
    60d6:	ee 5e       	subi	r30, 0xEE	; 238
    60d8:	f7 4f       	sbci	r31, 0xF7	; 247
    60da:	83 81       	ldd	r24, Z+3	; 0x03
    60dc:	90 e0       	ldi	r25, 0x00	; 0
    60de:	c0 97       	sbiw	r24, 0x30	; 48
    60e0:	82 0f       	add	r24, r18
    60e2:	91 1d       	adc	r25, r1
    60e4:	80 93 00 08 	sts	0x0800, r24
		gpsJahr =	(gpsdata[counter+4] - '0')*10;
    60e8:	ac 81       	ldd	r26, Y+4	; 0x04
		gpsJahr +=	(gpsdata[counter+5] - '0');
    60ea:	ec 81       	ldd	r30, Y+4	; 0x04
		//Datum
		gpsTag =	(gpsdata[counter+0] - '0')*10;
		gpsTag +=	(gpsdata[counter+1] - '0');
		gpsMonat =	(gpsdata[counter+2] - '0')*10;
		gpsMonat +=	(gpsdata[counter+3] - '0');
		gpsJahr =	(gpsdata[counter+4] - '0')*10;
    60ec:	b0 e0       	ldi	r27, 0x00	; 0
    60ee:	ae 5e       	subi	r26, 0xEE	; 238
    60f0:	b7 4f       	sbci	r27, 0xF7	; 247
    60f2:	14 96       	adiw	r26, 0x04	; 4
    60f4:	8c 91       	ld	r24, X
    60f6:	88 0f       	add	r24, r24
    60f8:	80 56       	subi	r24, 0x60	; 96
    60fa:	28 2f       	mov	r18, r24
    60fc:	22 0f       	add	r18, r18
    60fe:	22 0f       	add	r18, r18
    6100:	28 0f       	add	r18, r24
		gpsJahr +=	(gpsdata[counter+5] - '0');
    6102:	f0 e0       	ldi	r31, 0x00	; 0
    6104:	ee 5e       	subi	r30, 0xEE	; 238
    6106:	f7 4f       	sbci	r31, 0xF7	; 247
    6108:	85 81       	ldd	r24, Z+5	; 0x05
    610a:	90 e0       	ldi	r25, 0x00	; 0
    610c:	c0 97       	sbiw	r24, 0x30	; 48
    610e:	82 0f       	add	r24, r18
    6110:	91 1d       	adc	r25, r1
    6112:	80 93 ff 07 	sts	0x07FF, r24
		
		gpsstatus &= ~(1<<complete);
    6116:	8e 2d       	mov	r24, r14
    6118:	8b 7f       	andi	r24, 0xFB	; 251
    611a:	80 93 5a 08 	sts	0x085A, r24
    611e:	a4 c0       	rjmp	.+328    	; 0x6268 <_Z10gpshandlerv+0x73a>
	}
	else if ((gpsstatus&(1<<completenotvalid))  && (gpsstatus&(1<<fix)))
    6120:	e3 fe       	sbrs	r14, 3
    6122:	a2 c0       	rjmp	.+324    	; 0x6268 <_Z10gpshandlerv+0x73a>
    6124:	ee 20       	and	r14, r14
    6126:	0c f0       	brlt	.+2      	; 0x612a <_Z10gpshandlerv+0x5fc>
    6128:	9f c0       	rjmp	.+318    	; 0x6268 <_Z10gpshandlerv+0x73a>
	{
		//Andere Daten vernichten
		lat = 0;
    612a:	10 92 0d 08 	sts	0x080D, r1
    612e:	10 92 0e 08 	sts	0x080E, r1
    6132:	10 92 0f 08 	sts	0x080F, r1
    6136:	10 92 10 08 	sts	0x0810, r1
		lon = 0;
    613a:	10 92 09 08 	sts	0x0809, r1
    613e:	10 92 0a 08 	sts	0x080A, r1
    6142:	10 92 0b 08 	sts	0x080B, r1
    6146:	10 92 0c 08 	sts	0x080C, r1
		gpsspeed = 0;
    614a:	10 92 05 08 	sts	0x0805, r1
    614e:	10 92 06 08 	sts	0x0806, r1
    6152:	10 92 07 08 	sts	0x0807, r1
    6156:	10 92 08 08 	sts	0x0808, r1
		//Zeit
		gpsstunde =		(gpsdata[7] - '0')*10;
		gpsstunde +=	(gpsdata[8] - '0');
    615a:	e2 e1       	ldi	r30, 0x12	; 18
    615c:	f8 e0       	ldi	r31, 0x08	; 8
    615e:	80 85       	ldd	r24, Z+8	; 0x08
    6160:	21 ed       	ldi	r18, 0xD1	; 209
    6162:	28 0f       	add	r18, r24
		//Andere Daten vernichten
		lat = 0;
		lon = 0;
		gpsspeed = 0;
		//Zeit
		gpsstunde =		(gpsdata[7] - '0')*10;
    6164:	87 81       	ldd	r24, Z+7	; 0x07
    6166:	88 0f       	add	r24, r24
    6168:	80 56       	subi	r24, 0x60	; 96
    616a:	98 2f       	mov	r25, r24
    616c:	99 0f       	add	r25, r25
    616e:	99 0f       	add	r25, r25
    6170:	89 0f       	add	r24, r25
		gpsstunde +=	(gpsdata[8] - '0');
		gpsstunde += GMT;
    6172:	82 0f       	add	r24, r18
    6174:	80 93 04 08 	sts	0x0804, r24
    6178:	82 85       	ldd	r24, Z+10	; 0x0a
    617a:	20 ed       	ldi	r18, 0xD0	; 208
    617c:	28 0f       	add	r18, r24
		gpsminute =		(gpsdata[9] - '0')*10;
    617e:	81 85       	ldd	r24, Z+9	; 0x09
    6180:	88 0f       	add	r24, r24
    6182:	80 56       	subi	r24, 0x60	; 96
    6184:	98 2f       	mov	r25, r24
    6186:	99 0f       	add	r25, r25
    6188:	99 0f       	add	r25, r25
    618a:	89 0f       	add	r24, r25
		gpsminute +=	(gpsdata[10] - '0');
    618c:	82 0f       	add	r24, r18
    618e:	80 93 03 08 	sts	0x0803, r24
    6192:	84 85       	ldd	r24, Z+12	; 0x0c
    6194:	20 ed       	ldi	r18, 0xD0	; 208
    6196:	28 0f       	add	r18, r24
		gpssekunde =	(gpsdata[11] - '0')*10;
    6198:	83 85       	ldd	r24, Z+11	; 0x0b
    619a:	88 0f       	add	r24, r24
    619c:	80 56       	subi	r24, 0x60	; 96
    619e:	98 2f       	mov	r25, r24
    61a0:	99 0f       	add	r25, r25
    61a2:	99 0f       	add	r25, r25
    61a4:	89 0f       	add	r24, r25
		gpssekunde +=	(gpsdata[12] - '0');
    61a6:	82 0f       	add	r24, r18
    61a8:	80 93 02 08 	sts	0x0802, r24
		
		volatile uint8_t counter = 19;
    61ac:	83 e1       	ldi	r24, 0x13	; 19
    61ae:	8a 83       	std	Y+2, r24	; 0x02
		volatile uint8_t nichterreicht = 0;
    61b0:	19 82       	std	Y+1, r1	; 0x01
		
		while (nichterreicht < 7)
    61b2:	89 81       	ldd	r24, Y+1	; 0x01
    61b4:	87 30       	cpi	r24, 0x07	; 7
    61b6:	80 f4       	brcc	.+32     	; 0x61d8 <_Z10gpshandlerv+0x6aa>
		{
			if (gpsdata[counter] == ',')
    61b8:	ea 81       	ldd	r30, Y+2	; 0x02
    61ba:	f0 e0       	ldi	r31, 0x00	; 0
    61bc:	ee 5e       	subi	r30, 0xEE	; 238
    61be:	f7 4f       	sbci	r31, 0xF7	; 247
    61c0:	80 81       	ld	r24, Z
    61c2:	8c 32       	cpi	r24, 0x2C	; 44
    61c4:	19 f4       	brne	.+6      	; 0x61cc <_Z10gpshandlerv+0x69e>
			{
				nichterreicht++;
    61c6:	89 81       	ldd	r24, Y+1	; 0x01
    61c8:	8f 5f       	subi	r24, 0xFF	; 255
    61ca:	89 83       	std	Y+1, r24	; 0x01
			}
			counter++;
    61cc:	8a 81       	ldd	r24, Y+2	; 0x02
    61ce:	8f 5f       	subi	r24, 0xFF	; 255
    61d0:	8a 83       	std	Y+2, r24	; 0x02
		gpssekunde +=	(gpsdata[12] - '0');
		
		volatile uint8_t counter = 19;
		volatile uint8_t nichterreicht = 0;
		
		while (nichterreicht < 7)
    61d2:	89 81       	ldd	r24, Y+1	; 0x01
    61d4:	87 30       	cpi	r24, 0x07	; 7
    61d6:	80 f3       	brcs	.-32     	; 0x61b8 <_Z10gpshandlerv+0x68a>
			}
			counter++;
		}
		
		//Datum
		gpsTag =	(gpsdata[counter+0] - '0')*10;
    61d8:	aa 81       	ldd	r26, Y+2	; 0x02
		gpsTag +=	(gpsdata[counter+1] - '0');
    61da:	ea 81       	ldd	r30, Y+2	; 0x02
			}
			counter++;
		}
		
		//Datum
		gpsTag =	(gpsdata[counter+0] - '0')*10;
    61dc:	b0 e0       	ldi	r27, 0x00	; 0
    61de:	ae 5e       	subi	r26, 0xEE	; 238
    61e0:	b7 4f       	sbci	r27, 0xF7	; 247
    61e2:	8c 91       	ld	r24, X
    61e4:	88 0f       	add	r24, r24
    61e6:	80 56       	subi	r24, 0x60	; 96
    61e8:	28 2f       	mov	r18, r24
    61ea:	22 0f       	add	r18, r18
    61ec:	22 0f       	add	r18, r18
    61ee:	28 0f       	add	r18, r24
		gpsTag +=	(gpsdata[counter+1] - '0');
    61f0:	f0 e0       	ldi	r31, 0x00	; 0
    61f2:	ee 5e       	subi	r30, 0xEE	; 238
    61f4:	f7 4f       	sbci	r31, 0xF7	; 247
    61f6:	81 81       	ldd	r24, Z+1	; 0x01
    61f8:	90 e0       	ldi	r25, 0x00	; 0
    61fa:	c0 97       	sbiw	r24, 0x30	; 48
    61fc:	82 0f       	add	r24, r18
    61fe:	91 1d       	adc	r25, r1
    6200:	80 93 01 08 	sts	0x0801, r24
		gpsMonat =	(gpsdata[counter+2] - '0')*10;
    6204:	aa 81       	ldd	r26, Y+2	; 0x02
		gpsMonat +=	(gpsdata[counter+3] - '0');
    6206:	ea 81       	ldd	r30, Y+2	; 0x02
		}
		
		//Datum
		gpsTag =	(gpsdata[counter+0] - '0')*10;
		gpsTag +=	(gpsdata[counter+1] - '0');
		gpsMonat =	(gpsdata[counter+2] - '0')*10;
    6208:	b0 e0       	ldi	r27, 0x00	; 0
    620a:	ae 5e       	subi	r26, 0xEE	; 238
    620c:	b7 4f       	sbci	r27, 0xF7	; 247
    620e:	12 96       	adiw	r26, 0x02	; 2
    6210:	8c 91       	ld	r24, X
    6212:	88 0f       	add	r24, r24
    6214:	80 56       	subi	r24, 0x60	; 96
    6216:	28 2f       	mov	r18, r24
    6218:	22 0f       	add	r18, r18
    621a:	22 0f       	add	r18, r18
    621c:	28 0f       	add	r18, r24
		gpsMonat +=	(gpsdata[counter+3] - '0');
    621e:	f0 e0       	ldi	r31, 0x00	; 0
    6220:	ee 5e       	subi	r30, 0xEE	; 238
    6222:	f7 4f       	sbci	r31, 0xF7	; 247
    6224:	83 81       	ldd	r24, Z+3	; 0x03
    6226:	90 e0       	ldi	r25, 0x00	; 0
    6228:	c0 97       	sbiw	r24, 0x30	; 48
    622a:	82 0f       	add	r24, r18
    622c:	91 1d       	adc	r25, r1
    622e:	80 93 00 08 	sts	0x0800, r24
		gpsJahr =	(gpsdata[counter+4] - '0')*10;
    6232:	aa 81       	ldd	r26, Y+2	; 0x02
		gpsJahr +=	(gpsdata[counter+5] - '0');
    6234:	ea 81       	ldd	r30, Y+2	; 0x02
		//Datum
		gpsTag =	(gpsdata[counter+0] - '0')*10;
		gpsTag +=	(gpsdata[counter+1] - '0');
		gpsMonat =	(gpsdata[counter+2] - '0')*10;
		gpsMonat +=	(gpsdata[counter+3] - '0');
		gpsJahr =	(gpsdata[counter+4] - '0')*10;
    6236:	b0 e0       	ldi	r27, 0x00	; 0
    6238:	ae 5e       	subi	r26, 0xEE	; 238
    623a:	b7 4f       	sbci	r27, 0xF7	; 247
    623c:	14 96       	adiw	r26, 0x04	; 4
    623e:	8c 91       	ld	r24, X
    6240:	88 0f       	add	r24, r24
    6242:	80 56       	subi	r24, 0x60	; 96
    6244:	28 2f       	mov	r18, r24
    6246:	22 0f       	add	r18, r18
    6248:	22 0f       	add	r18, r18
    624a:	28 0f       	add	r18, r24
		gpsJahr +=	(gpsdata[counter+5] - '0');
    624c:	f0 e0       	ldi	r31, 0x00	; 0
    624e:	ee 5e       	subi	r30, 0xEE	; 238
    6250:	f7 4f       	sbci	r31, 0xF7	; 247
    6252:	85 81       	ldd	r24, Z+5	; 0x05
    6254:	90 e0       	ldi	r25, 0x00	; 0
    6256:	c0 97       	sbiw	r24, 0x30	; 48
    6258:	82 0f       	add	r24, r18
    625a:	91 1d       	adc	r25, r1
    625c:	80 93 ff 07 	sts	0x07FF, r24
		
		gpsstatus &= ~(1<<completenotvalid);
    6260:	8e 2d       	mov	r24, r14
    6262:	87 7f       	andi	r24, 0xF7	; 247
    6264:	80 93 5a 08 	sts	0x085A, r24
	}
	//fix status pruefen, wenn implementiert
}
    6268:	0f 90       	pop	r0
    626a:	0f 90       	pop	r0
    626c:	0f 90       	pop	r0
    626e:	0f 90       	pop	r0
    6270:	df 91       	pop	r29
    6272:	cf 91       	pop	r28
    6274:	1f 91       	pop	r17
    6276:	0f 91       	pop	r16
    6278:	ff 90       	pop	r15
    627a:	ef 90       	pop	r14
    627c:	bf 90       	pop	r11
    627e:	af 90       	pop	r10
    6280:	9f 90       	pop	r9
    6282:	8f 90       	pop	r8
    6284:	7f 90       	pop	r7
    6286:	6f 90       	pop	r6
    6288:	5f 90       	pop	r5
    628a:	4f 90       	pop	r4
    628c:	08 95       	ret

0000628e <main>:
	| ((DWORD)rtc.Minuten << 5)
	| ((DWORD)rtc.Sekunden >> 1);
}

int main(void)
{
    628e:	cf 93       	push	r28
    6290:	df 93       	push	r29
    6292:	cd b7       	in	r28, 0x3d	; 61
    6294:	de b7       	in	r29, 0x3e	; 62
    6296:	65 97       	sbiw	r28, 0x15	; 21
    6298:	0f b6       	in	r0, 0x3f	; 63
    629a:	f8 94       	cli
    629c:	de bf       	out	0x3e, r29	; 62
    629e:	0f be       	out	0x3f, r0	; 63
    62a0:	cd bf       	out	0x3d, r28	; 61
    initialisierung();
    62a2:	82 d8       	rcall	.-3836   	; 0x53a8 <_Z15initialisierungv>
#include <avr/interrupt.h>

//define new and delete operator
void * operator new(size_t size)
{
	return malloc(size);
    62a4:	8a e2       	ldi	r24, 0x2A	; 42
    62a6:	90 e0       	ldi	r25, 0x00	; 0
    62a8:	0e 94 34 42 	call	0x8468	; 0x8468 <malloc>
    62ac:	fc 01       	movw	r30, r24
		uint8_t posx;
		uint8_t maxentries;
		uint8_t maxentriesx;
	monitor(Display *ol, RTC *rt)
	{
		buffersize = 0;
    62ae:	16 8a       	std	Z+22, r1	; 0x16
		oled = ol;
    62b0:	8e e5       	ldi	r24, 0x5E	; 94
    62b2:	99 e0       	ldi	r25, 0x09	; 9
    62b4:	90 8f       	std	Z+24, r25	; 0x18
    62b6:	87 8b       	std	Z+23, r24	; 0x17
		rtc = rt;
    62b8:	8f e5       	ldi	r24, 0x5F	; 95
    62ba:	9d e0       	ldi	r25, 0x0D	; 13
    62bc:	92 8f       	std	Z+26, r25	; 0x1a
    62be:	81 8f       	std	Z+25, r24	; 0x19
		posy=0;
    62c0:	15 a2       	std	Z+37, r1	; 0x25
		posx=0;
    62c2:	16 a2       	std	Z+38, r1	; 0x26
		maxentriesx = 1;
    62c4:	81 e0       	ldi	r24, 0x01	; 1
    62c6:	80 a7       	std	Z+40, r24	; 0x28
class uhr:public monitor
{
	private:
	uint8_t Zeiger;
	public:
	uhr(Display *ol, RTC *rt):monitor(ol,rt)
    62c8:	85 e6       	ldi	r24, 0x65	; 101
    62ca:	93 e0       	ldi	r25, 0x03	; 3
    62cc:	91 83       	std	Z+1, r25	; 0x01
    62ce:	80 83       	st	Z, r24
	{
		char na[] = "Uhr";
    62d0:	85 e5       	ldi	r24, 0x55	; 85
    62d2:	98 e6       	ldi	r25, 0x68	; 104
    62d4:	a2 e7       	ldi	r26, 0x72	; 114
    62d6:	b0 e0       	ldi	r27, 0x00	; 0
    62d8:	89 83       	std	Y+1, r24	; 0x01
    62da:	9a 83       	std	Y+2, r25	; 0x02
    62dc:	ab 83       	std	Y+3, r26	; 0x03
    62de:	bc 83       	std	Y+4, r27	; 0x04
    62e0:	9e 01       	movw	r18, r28
    62e2:	2f 5f       	subi	r18, 0xFF	; 255
    62e4:	3f 4f       	sbci	r19, 0xFF	; 255
    62e6:	cf 01       	movw	r24, r30
    62e8:	4b 96       	adiw	r24, 0x1b	; 27
    62ea:	be 01       	movw	r22, r28
    62ec:	65 5f       	subi	r22, 0xF5	; 245
    62ee:	7f 4f       	sbci	r23, 0xFF	; 255
    62f0:	89 01       	movw	r16, r18
			{
				name[i] = na[i];
			}
			else
			{
				name[i] = ' ';
    62f2:	40 e2       	ldi	r20, 0x20	; 32
    62f4:	50 2f       	mov	r21, r16
    62f6:	52 1b       	sub	r21, r18
	public:
	uhr(Display *ol, RTC *rt):monitor(ol,rt)
	{
		char na[] = "Uhr";
		for(uint8_t i =0; i< namesize;i++){
			if (i<sizeof(na))
    62f8:	54 30       	cpi	r21, 0x04	; 4
    62fa:	28 f4       	brcc	.+10     	; 0x6306 <main+0x78>
			{
				name[i] = na[i];
    62fc:	d8 01       	movw	r26, r16
    62fe:	5c 91       	ld	r21, X
    6300:	dc 01       	movw	r26, r24
    6302:	5c 93       	st	X, r21
    6304:	02 c0       	rjmp	.+4      	; 0x630a <main+0x7c>
			}
			else
			{
				name[i] = ' ';
    6306:	dc 01       	movw	r26, r24
    6308:	4c 93       	st	X, r20
    630a:	0f 5f       	subi	r16, 0xFF	; 255
    630c:	1f 4f       	sbci	r17, 0xFF	; 255
    630e:	01 96       	adiw	r24, 0x01	; 1
	uint8_t Zeiger;
	public:
	uhr(Display *ol, RTC *rt):monitor(ol,rt)
	{
		char na[] = "Uhr";
		for(uint8_t i =0; i< namesize;i++){
    6310:	06 17       	cp	r16, r22
    6312:	17 07       	cpc	r17, r23
    6314:	79 f7       	brne	.-34     	; 0x62f4 <main+0x66>
			else
			{
				name[i] = ' ';
			}
		}
		Zeiger = 0;
    6316:	11 a6       	std	Z+41, r1	; 0x29
		maxentries = 3;
    6318:	83 e0       	ldi	r24, 0x03	; 3
    631a:	87 a3       	std	Z+39, r24	; 0x27
		new tacho(&oled,&rtc),
		new wandern(&oled,&rtc),
		new einstellungen(&oled,&rtc),
		new offscreen(&oled,&rtc),
		new menue(&oled,&rtc)
	};
    631c:	fa 83       	std	Y+2, r31	; 0x02
    631e:	e9 83       	std	Y+1, r30	; 0x01
#include <avr/interrupt.h>

//define new and delete operator
void * operator new(size_t size)
{
	return malloc(size);
    6320:	89 e2       	ldi	r24, 0x29	; 41
    6322:	90 e0       	ldi	r25, 0x00	; 0
    6324:	0e 94 34 42 	call	0x8468	; 0x8468 <malloc>
    6328:	8c 01       	movw	r16, r24
		uint8_t posx;
		uint8_t maxentries;
		uint8_t maxentriesx;
	monitor(Display *ol, RTC *rt)
	{
		buffersize = 0;
    632a:	fc 01       	movw	r30, r24
    632c:	16 8a       	std	Z+22, r1	; 0x16
		oled = ol;
    632e:	8e e5       	ldi	r24, 0x5E	; 94
    6330:	99 e0       	ldi	r25, 0x09	; 9
    6332:	90 8f       	std	Z+24, r25	; 0x18
    6334:	87 8b       	std	Z+23, r24	; 0x17
		rtc = rt;
    6336:	8f e5       	ldi	r24, 0x5F	; 95
    6338:	9d e0       	ldi	r25, 0x0D	; 13
    633a:	92 8f       	std	Z+26, r25	; 0x1a
    633c:	81 8f       	std	Z+25, r24	; 0x19
		posy=0;
    633e:	15 a2       	std	Z+37, r1	; 0x25
		posx=0;
    6340:	16 a2       	std	Z+38, r1	; 0x26
		maxentriesx = 1;
    6342:	81 e0       	ldi	r24, 0x01	; 1
    6344:	80 a7       	std	Z+40, r24	; 0x28
class tacho: public monitor
{
	private:
		
	public:
	tacho(Display *ol,RTC *rtc):monitor(ol,rtc)
    6346:	8d e6       	ldi	r24, 0x6D	; 109
    6348:	93 e0       	ldi	r25, 0x03	; 3
    634a:	91 83       	std	Z+1, r25	; 0x01
    634c:	80 83       	st	Z, r24
	{
		char na[] = "Tacho";
    634e:	86 e0       	ldi	r24, 0x06	; 6
    6350:	ec ec       	ldi	r30, 0xCC	; 204
    6352:	f1 e0       	ldi	r31, 0x01	; 1
    6354:	de 01       	movw	r26, r28
    6356:	1d 96       	adiw	r26, 0x0d	; 13
    6358:	01 90       	ld	r0, Z+
    635a:	0d 92       	st	X+, r0
    635c:	8a 95       	dec	r24
    635e:	e1 f7       	brne	.-8      	; 0x6358 <main+0xca>
    6360:	ce 01       	movw	r24, r28
    6362:	0d 96       	adiw	r24, 0x0d	; 13
    6364:	d8 01       	movw	r26, r16
    6366:	5b 96       	adiw	r26, 0x1b	; 27
    6368:	ae 01       	movw	r20, r28
    636a:	49 5e       	subi	r20, 0xE9	; 233
    636c:	5f 4f       	sbci	r21, 0xFF	; 255
    636e:	fc 01       	movw	r30, r24
			{
				name[i] = na[i];
			}
			else
			{
				name[i] = ' ';
    6370:	20 e2       	ldi	r18, 0x20	; 32
    6372:	3e 2f       	mov	r19, r30
    6374:	38 1b       	sub	r19, r24
	public:
	tacho(Display *ol,RTC *rtc):monitor(ol,rtc)
	{
		char na[] = "Tacho";
		for(uint8_t i =0; i< namesize;i++){
			if (i<sizeof(na))
    6376:	36 30       	cpi	r19, 0x06	; 6
    6378:	18 f4       	brcc	.+6      	; 0x6380 <main+0xf2>
			{
				name[i] = na[i];
    637a:	30 81       	ld	r19, Z
    637c:	3c 93       	st	X, r19
    637e:	01 c0       	rjmp	.+2      	; 0x6382 <main+0xf4>
			}
			else
			{
				name[i] = ' ';
    6380:	2c 93       	st	X, r18
    6382:	31 96       	adiw	r30, 0x01	; 1
    6384:	11 96       	adiw	r26, 0x01	; 1
		
	public:
	tacho(Display *ol,RTC *rtc):monitor(ol,rtc)
	{
		char na[] = "Tacho";
		for(uint8_t i =0; i< namesize;i++){
    6386:	e4 17       	cp	r30, r20
    6388:	f5 07       	cpc	r31, r21
    638a:	99 f7       	brne	.-26     	; 0x6372 <main+0xe4>
			else
			{
				name[i] = ' ';
			}
		}
		nullen();
    638c:	0e 94 b7 28 	call	0x516e	; 0x516e <_Z6nullenv>
		new tacho(&oled,&rtc),
		new wandern(&oled,&rtc),
		new einstellungen(&oled,&rtc),
		new offscreen(&oled,&rtc),
		new menue(&oled,&rtc)
	};
    6390:	1c 83       	std	Y+4, r17	; 0x04
    6392:	0b 83       	std	Y+3, r16	; 0x03
#include <avr/interrupt.h>

//define new and delete operator
void * operator new(size_t size)
{
	return malloc(size);
    6394:	89 e2       	ldi	r24, 0x29	; 41
    6396:	90 e0       	ldi	r25, 0x00	; 0
    6398:	0e 94 34 42 	call	0x8468	; 0x8468 <malloc>
		uint8_t posx;
		uint8_t maxentries;
		uint8_t maxentriesx;
	monitor(Display *ol, RTC *rt)
	{
		buffersize = 0;
    639c:	dc 01       	movw	r26, r24
    639e:	56 96       	adiw	r26, 0x16	; 22
    63a0:	1c 92       	st	X, r1
    63a2:	56 97       	sbiw	r26, 0x16	; 22
		oled = ol;
    63a4:	2e e5       	ldi	r18, 0x5E	; 94
    63a6:	39 e0       	ldi	r19, 0x09	; 9
    63a8:	58 96       	adiw	r26, 0x18	; 24
    63aa:	3c 93       	st	X, r19
    63ac:	2e 93       	st	-X, r18
    63ae:	57 97       	sbiw	r26, 0x17	; 23
		rtc = rt;
    63b0:	2f e5       	ldi	r18, 0x5F	; 95
    63b2:	3d e0       	ldi	r19, 0x0D	; 13
    63b4:	5a 96       	adiw	r26, 0x1a	; 26
    63b6:	3c 93       	st	X, r19
    63b8:	2e 93       	st	-X, r18
    63ba:	59 97       	sbiw	r26, 0x19	; 25
		posy=0;
    63bc:	95 96       	adiw	r26, 0x25	; 37
    63be:	1c 92       	st	X, r1
    63c0:	95 97       	sbiw	r26, 0x25	; 37
		posx=0;
    63c2:	96 96       	adiw	r26, 0x26	; 38
    63c4:	1c 92       	st	X, r1
    63c6:	96 97       	sbiw	r26, 0x26	; 38
		maxentriesx = 1;
    63c8:	21 e0       	ldi	r18, 0x01	; 1
    63ca:	98 96       	adiw	r26, 0x28	; 40
    63cc:	2c 93       	st	X, r18
    63ce:	98 97       	sbiw	r26, 0x28	; 40
class wandern: public monitor
{
	private:
	
	public:	
	wandern(Display *ol,RTC *rtc):monitor(ol,rtc)
    63d0:	25 e7       	ldi	r18, 0x75	; 117
    63d2:	33 e0       	ldi	r19, 0x03	; 3
    63d4:	2d 93       	st	X+, r18
    63d6:	3c 93       	st	X, r19
	{
		char na[] = "Wandern";
    63d8:	28 e0       	ldi	r18, 0x08	; 8
    63da:	e2 ed       	ldi	r30, 0xD2	; 210
    63dc:	f1 e0       	ldi	r31, 0x01	; 1
    63de:	de 01       	movw	r26, r28
    63e0:	1d 96       	adiw	r26, 0x0d	; 13
    63e2:	01 90       	ld	r0, Z+
    63e4:	0d 92       	st	X+, r0
    63e6:	2a 95       	dec	r18
    63e8:	e1 f7       	brne	.-8      	; 0x63e2 <main+0x154>
    63ea:	9e 01       	movw	r18, r28
    63ec:	23 5f       	subi	r18, 0xF3	; 243
    63ee:	3f 4f       	sbci	r19, 0xFF	; 255
    63f0:	dc 01       	movw	r26, r24
    63f2:	5b 96       	adiw	r26, 0x1b	; 27
    63f4:	be 01       	movw	r22, r28
    63f6:	69 5e       	subi	r22, 0xE9	; 233
    63f8:	7f 4f       	sbci	r23, 0xFF	; 255
    63fa:	f9 01       	movw	r30, r18
			{
				name[i] = na[i];
			}
			else
			{
				name[i] = ' ';
    63fc:	40 e2       	ldi	r20, 0x20	; 32
    63fe:	5e 2f       	mov	r21, r30
    6400:	52 1b       	sub	r21, r18
	public:	
	wandern(Display *ol,RTC *rtc):monitor(ol,rtc)
	{
		char na[] = "Wandern";
		for(uint8_t i =0; i< namesize;i++){
			if (i<sizeof(na))
    6402:	58 30       	cpi	r21, 0x08	; 8
    6404:	18 f4       	brcc	.+6      	; 0x640c <main+0x17e>
			{
				name[i] = na[i];
    6406:	50 81       	ld	r21, Z
    6408:	5c 93       	st	X, r21
    640a:	01 c0       	rjmp	.+2      	; 0x640e <main+0x180>
			}
			else
			{
				name[i] = ' ';
    640c:	4c 93       	st	X, r20
    640e:	31 96       	adiw	r30, 0x01	; 1
    6410:	11 96       	adiw	r26, 0x01	; 1
	
	public:	
	wandern(Display *ol,RTC *rtc):monitor(ol,rtc)
	{
		char na[] = "Wandern";
		for(uint8_t i =0; i< namesize;i++){
    6412:	e6 17       	cp	r30, r22
    6414:	f7 07       	cpc	r31, r23
    6416:	99 f7       	brne	.-26     	; 0x63fe <main+0x170>
		new tacho(&oled,&rtc),
		new wandern(&oled,&rtc),
		new einstellungen(&oled,&rtc),
		new offscreen(&oled,&rtc),
		new menue(&oled,&rtc)
	};
    6418:	9e 83       	std	Y+6, r25	; 0x06
    641a:	8d 83       	std	Y+5, r24	; 0x05
#include <avr/interrupt.h>

//define new and delete operator
void * operator new(size_t size)
{
	return malloc(size);
    641c:	89 e2       	ldi	r24, 0x29	; 41
    641e:	90 e0       	ldi	r25, 0x00	; 0
    6420:	0e 94 34 42 	call	0x8468	; 0x8468 <malloc>
		uint8_t posx;
		uint8_t maxentries;
		uint8_t maxentriesx;
	monitor(Display *ol, RTC *rt)
	{
		buffersize = 0;
    6424:	fc 01       	movw	r30, r24
    6426:	16 8a       	std	Z+22, r1	; 0x16
		oled = ol;
    6428:	2e e5       	ldi	r18, 0x5E	; 94
    642a:	39 e0       	ldi	r19, 0x09	; 9
    642c:	30 8f       	std	Z+24, r19	; 0x18
    642e:	27 8b       	std	Z+23, r18	; 0x17
		rtc = rt;
    6430:	2f e5       	ldi	r18, 0x5F	; 95
    6432:	3d e0       	ldi	r19, 0x0D	; 13
    6434:	32 8f       	std	Z+26, r19	; 0x1a
    6436:	21 8f       	std	Z+25, r18	; 0x19
		posy=0;
    6438:	15 a2       	std	Z+37, r1	; 0x25
		posx=0;
    643a:	16 a2       	std	Z+38, r1	; 0x26
		maxentriesx = 1;
    643c:	21 e0       	ldi	r18, 0x01	; 1
    643e:	20 a7       	std	Z+40, r18	; 0x28

class einstellungen: public monitor
{
	private:
	public:
	einstellungen(Display *ol,RTC *rt): monitor(ol,rt)
    6440:	2d e7       	ldi	r18, 0x7D	; 125
    6442:	33 e0       	ldi	r19, 0x03	; 3
    6444:	31 83       	std	Z+1, r19	; 0x01
    6446:	20 83       	st	Z, r18
	{
		char na[] = "Settings";
    6448:	29 e0       	ldi	r18, 0x09	; 9
    644a:	e9 e8       	ldi	r30, 0x89	; 137
    644c:	f2 e0       	ldi	r31, 0x02	; 2
    644e:	de 01       	movw	r26, r28
    6450:	1d 96       	adiw	r26, 0x0d	; 13
    6452:	01 90       	ld	r0, Z+
    6454:	0d 92       	st	X+, r0
    6456:	2a 95       	dec	r18
    6458:	e1 f7       	brne	.-8      	; 0x6452 <main+0x1c4>
    645a:	9e 01       	movw	r18, r28
    645c:	23 5f       	subi	r18, 0xF3	; 243
    645e:	3f 4f       	sbci	r19, 0xFF	; 255
    6460:	dc 01       	movw	r26, r24
    6462:	5b 96       	adiw	r26, 0x1b	; 27
    6464:	be 01       	movw	r22, r28
    6466:	69 5e       	subi	r22, 0xE9	; 233
    6468:	7f 4f       	sbci	r23, 0xFF	; 255
    646a:	f9 01       	movw	r30, r18
			{
				name[i] = na[i];
			}
			else
			{
				name[i] = ' ';
    646c:	40 e2       	ldi	r20, 0x20	; 32
    646e:	5e 2f       	mov	r21, r30
    6470:	52 1b       	sub	r21, r18
	public:
	einstellungen(Display *ol,RTC *rt): monitor(ol,rt)
	{
		char na[] = "Settings";
		for(uint8_t i =0; i< namesize;i++){
			if (i<sizeof(na))
    6472:	59 30       	cpi	r21, 0x09	; 9
    6474:	18 f4       	brcc	.+6      	; 0x647c <main+0x1ee>
			{
				name[i] = na[i];
    6476:	50 81       	ld	r21, Z
    6478:	5c 93       	st	X, r21
    647a:	01 c0       	rjmp	.+2      	; 0x647e <main+0x1f0>
			}
			else
			{
				name[i] = ' ';
    647c:	4c 93       	st	X, r20
    647e:	31 96       	adiw	r30, 0x01	; 1
    6480:	11 96       	adiw	r26, 0x01	; 1
	private:
	public:
	einstellungen(Display *ol,RTC *rt): monitor(ol,rt)
	{
		char na[] = "Settings";
		for(uint8_t i =0; i< namesize;i++){
    6482:	e6 17       	cp	r30, r22
    6484:	f7 07       	cpc	r31, r23
    6486:	99 f7       	brne	.-26     	; 0x646e <main+0x1e0>
			else
			{
				name[i] = ' ';
			}
		}
		maxentries = 5;
    6488:	25 e0       	ldi	r18, 0x05	; 5
    648a:	dc 01       	movw	r26, r24
    648c:	97 96       	adiw	r26, 0x27	; 39
    648e:	2c 93       	st	X, r18
		new tacho(&oled,&rtc),
		new wandern(&oled,&rtc),
		new einstellungen(&oled,&rtc),
		new offscreen(&oled,&rtc),
		new menue(&oled,&rtc)
	};
    6490:	98 87       	std	Y+8, r25	; 0x08
    6492:	8f 83       	std	Y+7, r24	; 0x07
#include <avr/interrupt.h>

//define new and delete operator
void * operator new(size_t size)
{
	return malloc(size);
    6494:	89 e2       	ldi	r24, 0x29	; 41
    6496:	90 e0       	ldi	r25, 0x00	; 0
    6498:	0e 94 34 42 	call	0x8468	; 0x8468 <malloc>
    649c:	fc 01       	movw	r30, r24
		uint8_t posx;
		uint8_t maxentries;
		uint8_t maxentriesx;
	monitor(Display *ol, RTC *rt)
	{
		buffersize = 0;
    649e:	16 8a       	std	Z+22, r1	; 0x16
		oled = ol;
    64a0:	0f 2e       	mov	r0, r31
    64a2:	fe e5       	ldi	r31, 0x5E	; 94
    64a4:	cf 2e       	mov	r12, r31
    64a6:	f9 e0       	ldi	r31, 0x09	; 9
    64a8:	df 2e       	mov	r13, r31
    64aa:	f0 2d       	mov	r31, r0
    64ac:	d0 8e       	std	Z+24, r13	; 0x18
    64ae:	c7 8a       	std	Z+23, r12	; 0x17
		rtc = rt;
    64b0:	0f 2e       	mov	r0, r31
    64b2:	ff e5       	ldi	r31, 0x5F	; 95
    64b4:	ef 2e       	mov	r14, r31
    64b6:	fd e0       	ldi	r31, 0x0D	; 13
    64b8:	ff 2e       	mov	r15, r31
    64ba:	f0 2d       	mov	r31, r0
    64bc:	f2 8e       	std	Z+26, r15	; 0x1a
    64be:	e1 8e       	std	Z+25, r14	; 0x19
		posy=0;
    64c0:	15 a2       	std	Z+37, r1	; 0x25
		posx=0;
    64c2:	16 a2       	std	Z+38, r1	; 0x26
		maxentriesx = 1;
    64c4:	11 e0       	ldi	r17, 0x01	; 1
    64c6:	10 a7       	std	Z+40, r17	; 0x28
class offscreen: public monitor
{
	private:
	
	public:
	offscreen(Display *ol, RTC *rt):monitor(ol,rt){
    64c8:	85 e9       	ldi	r24, 0x95	; 149
    64ca:	93 e0       	ldi	r25, 0x03	; 3
    64cc:	91 83       	std	Z+1, r25	; 0x01
    64ce:	80 83       	st	Z, r24
		new tacho(&oled,&rtc),
		new wandern(&oled,&rtc),
		new einstellungen(&oled,&rtc),
		new offscreen(&oled,&rtc),
		new menue(&oled,&rtc)
	};
    64d0:	fa 87       	std	Y+10, r31	; 0x0a
    64d2:	e9 87       	std	Y+9, r30	; 0x09
#include <avr/interrupt.h>

//define new and delete operator
void * operator new(size_t size)
{
	return malloc(size);
    64d4:	89 e2       	ldi	r24, 0x29	; 41
    64d6:	90 e0       	ldi	r25, 0x00	; 0
    64d8:	0e 94 34 42 	call	0x8468	; 0x8468 <malloc>
		uint8_t posx;
		uint8_t maxentries;
		uint8_t maxentriesx;
	monitor(Display *ol, RTC *rt)
	{
		buffersize = 0;
    64dc:	fc 01       	movw	r30, r24
    64de:	16 8a       	std	Z+22, r1	; 0x16
		oled = ol;
    64e0:	d0 8e       	std	Z+24, r13	; 0x18
    64e2:	c7 8a       	std	Z+23, r12	; 0x17
		rtc = rt;
    64e4:	f2 8e       	std	Z+26, r15	; 0x1a
    64e6:	e1 8e       	std	Z+25, r14	; 0x19
		posy=0;
    64e8:	15 a2       	std	Z+37, r1	; 0x25
		posx=0;
    64ea:	16 a2       	std	Z+38, r1	; 0x26
		maxentriesx = 1;
    64ec:	10 a7       	std	Z+40, r17	; 0x28

class menue: public monitor
{
	private:
	public:
	menue(Display *ol, RTC *rt):monitor(ol,rt)
    64ee:	2d e8       	ldi	r18, 0x8D	; 141
    64f0:	33 e0       	ldi	r19, 0x03	; 3
    64f2:	31 83       	std	Z+1, r19	; 0x01
    64f4:	20 83       	st	Z, r18
	{
		char na[] = "Menue";
    64f6:	26 e0       	ldi	r18, 0x06	; 6
    64f8:	e2 e9       	ldi	r30, 0x92	; 146
    64fa:	f2 e0       	ldi	r31, 0x02	; 2
    64fc:	de 01       	movw	r26, r28
    64fe:	1d 96       	adiw	r26, 0x0d	; 13
    6500:	01 90       	ld	r0, Z+
    6502:	0d 92       	st	X+, r0
    6504:	2a 95       	dec	r18
    6506:	e1 f7       	brne	.-8      	; 0x6500 <main+0x272>
    6508:	9e 01       	movw	r18, r28
    650a:	23 5f       	subi	r18, 0xF3	; 243
    650c:	3f 4f       	sbci	r19, 0xFF	; 255
    650e:	dc 01       	movw	r26, r24
    6510:	5b 96       	adiw	r26, 0x1b	; 27
    6512:	be 01       	movw	r22, r28
    6514:	69 5e       	subi	r22, 0xE9	; 233
    6516:	7f 4f       	sbci	r23, 0xFF	; 255
    6518:	f9 01       	movw	r30, r18
			{
				name[i] = na[i];
			}
			else
			{
				name[i] = ' ';
    651a:	40 e2       	ldi	r20, 0x20	; 32
    651c:	5e 2f       	mov	r21, r30
    651e:	52 1b       	sub	r21, r18
	public:
	menue(Display *ol, RTC *rt):monitor(ol,rt)
	{
		char na[] = "Menue";
		for(uint8_t i =0; i< namesize;i++)
			if (i<sizeof(na))
    6520:	56 30       	cpi	r21, 0x06	; 6
    6522:	18 f4       	brcc	.+6      	; 0x652a <main+0x29c>
			{
				name[i] = na[i];
    6524:	50 81       	ld	r21, Z
    6526:	5c 93       	st	X, r21
    6528:	01 c0       	rjmp	.+2      	; 0x652c <main+0x29e>
			}
			else
			{
				name[i] = ' ';
    652a:	4c 93       	st	X, r20
    652c:	31 96       	adiw	r30, 0x01	; 1
    652e:	11 96       	adiw	r26, 0x01	; 1
	private:
	public:
	menue(Display *ol, RTC *rt):monitor(ol,rt)
	{
		char na[] = "Menue";
		for(uint8_t i =0; i< namesize;i++)
    6530:	e6 17       	cp	r30, r22
    6532:	f7 07       	cpc	r31, r23
    6534:	99 f7       	brne	.-26     	; 0x651c <main+0x28e>
			}
			else
			{
				name[i] = ' ';
			}
			maxentriesx = 0;
    6536:	dc 01       	movw	r26, r24
    6538:	98 96       	adiw	r26, 0x28	; 40
    653a:	1c 92       	st	X, r1
    653c:	98 97       	sbiw	r26, 0x28	; 40
			maxentries = numberofpages;
    653e:	25 e0       	ldi	r18, 0x05	; 5
    6540:	97 96       	adiw	r26, 0x27	; 39
    6542:	2c 93       	st	X, r18
		new tacho(&oled,&rtc),
		new wandern(&oled,&rtc),
		new einstellungen(&oled,&rtc),
		new offscreen(&oled,&rtc),
		new menue(&oled,&rtc)
	};
    6544:	9c 87       	std	Y+12, r25	; 0x0c
    6546:	8b 87       	std	Y+11, r24	; 0x0b
	
	while (1) 
    {
		maininterupthandler(Folien[position],Tastatur.unified());
    6548:	82 e5       	ldi	r24, 0x52	; 82
    654a:	99 e0       	ldi	r25, 0x09	; 9
    654c:	0e 94 cb 20 	call	0x4196	; 0x4196 <_ZN9Interface7unifiedEv>
    6550:	e0 91 5c 08 	lds	r30, 0x085C
    6554:	f0 e0       	ldi	r31, 0x00	; 0
    6556:	ee 0f       	add	r30, r30
    6558:	ff 1f       	adc	r31, r31
    655a:	21 e0       	ldi	r18, 0x01	; 1
    655c:	30 e0       	ldi	r19, 0x00	; 0
    655e:	2c 0f       	add	r18, r28
    6560:	3d 1f       	adc	r19, r29
    6562:	e2 0f       	add	r30, r18
    6564:	f3 1f       	adc	r31, r19
    6566:	68 2f       	mov	r22, r24
    6568:	80 81       	ld	r24, Z
    656a:	91 81       	ldd	r25, Z+1	; 0x01
    656c:	6b d8       	rcall	.-3882   	; 0x5644 <_Z19maininterupthandlerP7monitorh>
		gpshandler();
    656e:	df da       	rcall	.-2626   	; 0x5b2e <_Z10gpshandlerv>
    }
    6570:	eb cf       	rjmp	.-42     	; 0x6548 <main+0x2ba>

00006572 <_Z13uhreinstellenv>:
		gpsstatus &= ~(1<<completenotvalid);
	}
	//fix status pruefen, wenn implementiert
}

void uhreinstellen(){
    6572:	2f 92       	push	r2
    6574:	3f 92       	push	r3
    6576:	4f 92       	push	r4
    6578:	5f 92       	push	r5
    657a:	6f 92       	push	r6
    657c:	7f 92       	push	r7
    657e:	8f 92       	push	r8
    6580:	9f 92       	push	r9
    6582:	af 92       	push	r10
    6584:	bf 92       	push	r11
    6586:	cf 92       	push	r12
    6588:	df 92       	push	r13
    658a:	ef 92       	push	r14
    658c:	ff 92       	push	r15
    658e:	0f 93       	push	r16
    6590:	1f 93       	push	r17
    6592:	cf 93       	push	r28
    6594:	df 93       	push	r29
    6596:	cd b7       	in	r28, 0x3d	; 61
    6598:	de b7       	in	r29, 0x3e	; 62
    659a:	66 97       	sbiw	r28, 0x16	; 22
    659c:	0f b6       	in	r0, 0x3f	; 63
    659e:	f8 94       	cli
    65a0:	de bf       	out	0x3e, r29	; 62
    65a2:	0f be       	out	0x3f, r0	; 63
    65a4:	cd bf       	out	0x3d, r28	; 61
	rtc.RTCstop();
    65a6:	8f e5       	ldi	r24, 0x5F	; 95
    65a8:	9d e0       	ldi	r25, 0x0D	; 13
    65aa:	bd d7       	rcall	.+3962   	; 0x7526 <_ZN3RTC7RTCstopEv>
	
	oled.clearFrame();
    65ac:	8e e5       	ldi	r24, 0x5E	; 94
    65ae:	99 e0       	ldi	r25, 0x09	; 9
    65b0:	0e 94 b1 07 	call	0xf62	; 0xf62 <_ZN7Display10clearFrameEv>
	char buffer[20];
	uint8_t buffersize;
	uint8_t pos=0;
    65b4:	91 2c       	mov	r9, r1
	while(pos<11){
		buffersize=sprintf(buffer,"Uhreinstellung");
    65b6:	0f 2e       	mov	r0, r31
    65b8:	ff e0       	ldi	r31, 0x0F	; 15
    65ba:	7f 2e       	mov	r7, r31
    65bc:	f0 2d       	mov	r31, r0
    65be:	ce 01       	movw	r24, r28
    65c0:	01 96       	adiw	r24, 0x01	; 1
    65c2:	2c 01       	movw	r4, r24
    65c4:	f1 2c       	mov	r15, r1
		for(uint8_t i = 0; i<buffersize;i++){
			oled.draw_ASCI(buffer[i],charsize*i,0);
		}
		buffersize=sprintf(buffer,"--------------");
    65c6:	8d 8b       	std	Y+21, r24	; 0x15
    65c8:	5e 8a       	std	Y+22, r5	; 0x16
		for(uint8_t i = 0; i<buffersize;i++){
			oled.draw_ASCI(buffer[i],charsize*i,8);
		}
		buffer[0]=rtc.Stunden/10;
    65ca:	0f 2e       	mov	r0, r31
    65cc:	ff e5       	ldi	r31, 0x5F	; 95
    65ce:	cf 2e       	mov	r12, r31
    65d0:	fd e0       	ldi	r31, 0x0D	; 13
    65d2:	df 2e       	mov	r13, r31
    65d4:	f0 2d       	mov	r31, r0
    65d6:	0f 2e       	mov	r0, r31
    65d8:	fd ec       	ldi	r31, 0xCD	; 205
    65da:	8f 2e       	mov	r8, r31
    65dc:	f0 2d       	mov	r31, r0
		buffer[1]=rtc.Stunden%10;
		buffer[2]=':';
		buffer[3]=rtc.Minuten/10;
		buffer[4]=rtc.Minuten%10;
		buffer[5]=' ';
    65de:	68 94       	set
    65e0:	ee 24       	eor	r14, r14
    65e2:	e5 f8       	bld	r14, 5
		buffer[6]=rtc.Tag/10;
		buffer[7]=rtc.Tag%10;
		buffer[8]='.';
    65e4:	0f 2e       	mov	r0, r31
    65e6:	fe e2       	ldi	r31, 0x2E	; 46
    65e8:	6f 2e       	mov	r6, r31
    65ea:	f0 2d       	mov	r31, r0
	oled.clearFrame();
	char buffer[20];
	uint8_t buffersize;
	uint8_t pos=0;
	while(pos<11){
		buffersize=sprintf(buffer,"Uhreinstellung");
    65ec:	e8 e9       	ldi	r30, 0x98	; 152
    65ee:	f2 e0       	ldi	r31, 0x02	; 2
    65f0:	d2 01       	movw	r26, r4
    65f2:	87 2d       	mov	r24, r7
    65f4:	01 90       	ld	r0, Z+
    65f6:	0d 92       	st	X+, r0
    65f8:	8a 95       	dec	r24
    65fa:	e1 f7       	brne	.-8      	; 0x65f4 <_Z13uhreinstellenv+0x82>
    65fc:	52 01       	movw	r10, r4
    65fe:	12 01       	movw	r2, r4
    6600:	1f 2d       	mov	r17, r15
		for(uint8_t i = 0; i<buffersize;i++){
			oled.draw_ASCI(buffer[i],charsize*i,0);
    6602:	f1 01       	movw	r30, r2
    6604:	61 91       	ld	r22, Z+
    6606:	1f 01       	movw	r2, r30
    6608:	2f 2d       	mov	r18, r15
    660a:	41 2f       	mov	r20, r17
    660c:	8e e5       	ldi	r24, 0x5E	; 94
    660e:	99 e0       	ldi	r25, 0x09	; 9
    6610:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <_ZN7Display9draw_ASCIEhhh>
    6614:	1a 5f       	subi	r17, 0xFA	; 250
	char buffer[20];
	uint8_t buffersize;
	uint8_t pos=0;
	while(pos<11){
		buffersize=sprintf(buffer,"Uhreinstellung");
		for(uint8_t i = 0; i<buffersize;i++){
    6616:	14 35       	cpi	r17, 0x54	; 84
    6618:	a1 f7       	brne	.-24     	; 0x6602 <_Z13uhreinstellenv+0x90>
			oled.draw_ASCI(buffer[i],charsize*i,0);
		}
		buffersize=sprintf(buffer,"--------------");
    661a:	e5 ea       	ldi	r30, 0xA5	; 165
    661c:	f1 e0       	ldi	r31, 0x01	; 1
    661e:	d2 01       	movw	r26, r4
    6620:	87 2d       	mov	r24, r7
    6622:	01 90       	ld	r0, Z+
    6624:	0d 92       	st	X+, r0
    6626:	8a 95       	dec	r24
    6628:	e1 f7       	brne	.-8      	; 0x6622 <_Z13uhreinstellenv+0xb0>
    662a:	2d 88       	ldd	r2, Y+21	; 0x15
    662c:	3e 88       	ldd	r3, Y+22	; 0x16
    662e:	1f 2d       	mov	r17, r15
		for(uint8_t i = 0; i<buffersize;i++){
			oled.draw_ASCI(buffer[i],charsize*i,8);
    6630:	f1 01       	movw	r30, r2
    6632:	61 91       	ld	r22, Z+
    6634:	1f 01       	movw	r2, r30
    6636:	28 e0       	ldi	r18, 0x08	; 8
    6638:	41 2f       	mov	r20, r17
    663a:	8e e5       	ldi	r24, 0x5E	; 94
    663c:	99 e0       	ldi	r25, 0x09	; 9
    663e:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <_ZN7Display9draw_ASCIEhhh>
    6642:	1a 5f       	subi	r17, 0xFA	; 250
		buffersize=sprintf(buffer,"Uhreinstellung");
		for(uint8_t i = 0; i<buffersize;i++){
			oled.draw_ASCI(buffer[i],charsize*i,0);
		}
		buffersize=sprintf(buffer,"--------------");
		for(uint8_t i = 0; i<buffersize;i++){
    6644:	14 35       	cpi	r17, 0x54	; 84
    6646:	a1 f7       	brne	.-24     	; 0x6630 <_Z13uhreinstellenv+0xbe>
			oled.draw_ASCI(buffer[i],charsize*i,8);
		}
		buffer[0]=rtc.Stunden/10;
    6648:	f6 01       	movw	r30, r12
    664a:	90 89       	ldd	r25, Z+16	; 0x10
    664c:	98 9d       	mul	r25, r8
    664e:	81 2d       	mov	r24, r1
    6650:	11 24       	eor	r1, r1
    6652:	86 95       	lsr	r24
    6654:	86 95       	lsr	r24
    6656:	86 95       	lsr	r24
    6658:	89 83       	std	Y+1, r24	; 0x01
		buffer[1]=rtc.Stunden%10;
    665a:	88 0f       	add	r24, r24
    665c:	28 2f       	mov	r18, r24
    665e:	22 0f       	add	r18, r18
    6660:	22 0f       	add	r18, r18
    6662:	82 0f       	add	r24, r18
    6664:	98 1b       	sub	r25, r24
    6666:	9a 83       	std	Y+2, r25	; 0x02
		buffer[2]=':';
    6668:	fa e3       	ldi	r31, 0x3A	; 58
    666a:	fb 83       	std	Y+3, r31	; 0x03
		buffer[3]=rtc.Minuten/10;
    666c:	f6 01       	movw	r30, r12
    666e:	91 89       	ldd	r25, Z+17	; 0x11
    6670:	98 9d       	mul	r25, r8
    6672:	81 2d       	mov	r24, r1
    6674:	11 24       	eor	r1, r1
    6676:	86 95       	lsr	r24
    6678:	86 95       	lsr	r24
    667a:	86 95       	lsr	r24
    667c:	8c 83       	std	Y+4, r24	; 0x04
		buffer[4]=rtc.Minuten%10;
    667e:	88 0f       	add	r24, r24
    6680:	28 2f       	mov	r18, r24
    6682:	22 0f       	add	r18, r18
    6684:	22 0f       	add	r18, r18
    6686:	82 0f       	add	r24, r18
    6688:	98 1b       	sub	r25, r24
    668a:	9d 83       	std	Y+5, r25	; 0x05
		buffer[5]=' ';
    668c:	ee 82       	std	Y+6, r14	; 0x06
		buffer[6]=rtc.Tag/10;
    668e:	94 89       	ldd	r25, Z+20	; 0x14
    6690:	98 9d       	mul	r25, r8
    6692:	81 2d       	mov	r24, r1
    6694:	11 24       	eor	r1, r1
    6696:	86 95       	lsr	r24
    6698:	86 95       	lsr	r24
    669a:	86 95       	lsr	r24
    669c:	8f 83       	std	Y+7, r24	; 0x07
		buffer[7]=rtc.Tag%10;
    669e:	88 0f       	add	r24, r24
    66a0:	28 2f       	mov	r18, r24
    66a2:	22 0f       	add	r18, r18
    66a4:	22 0f       	add	r18, r18
    66a6:	82 0f       	add	r24, r18
    66a8:	98 1b       	sub	r25, r24
    66aa:	98 87       	std	Y+8, r25	; 0x08
		buffer[8]='.';
    66ac:	69 86       	std	Y+9, r6	; 0x09
		buffer[9]=rtc.Monat/10;
    66ae:	96 89       	ldd	r25, Z+22	; 0x16
    66b0:	98 9d       	mul	r25, r8
    66b2:	81 2d       	mov	r24, r1
    66b4:	11 24       	eor	r1, r1
    66b6:	86 95       	lsr	r24
    66b8:	86 95       	lsr	r24
    66ba:	86 95       	lsr	r24
    66bc:	8a 87       	std	Y+10, r24	; 0x0a
		buffer[10]=rtc.Monat%10;
    66be:	88 0f       	add	r24, r24
    66c0:	28 2f       	mov	r18, r24
    66c2:	22 0f       	add	r18, r18
    66c4:	22 0f       	add	r18, r18
    66c6:	82 0f       	add	r24, r18
    66c8:	98 1b       	sub	r25, r24
    66ca:	9b 87       	std	Y+11, r25	; 0x0b
		buffer[11]='.';
    66cc:	6c 86       	std	Y+12, r6	; 0x0c
		buffer[12]=rtc.Jahr/10;
    66ce:	97 89       	ldd	r25, Z+23	; 0x17
    66d0:	98 9d       	mul	r25, r8
    66d2:	81 2d       	mov	r24, r1
    66d4:	11 24       	eor	r1, r1
    66d6:	86 95       	lsr	r24
    66d8:	86 95       	lsr	r24
    66da:	86 95       	lsr	r24
    66dc:	8d 87       	std	Y+13, r24	; 0x0d
		buffer[13]=rtc.Jahr%10;
    66de:	88 0f       	add	r24, r24
    66e0:	28 2f       	mov	r18, r24
    66e2:	22 0f       	add	r18, r18
    66e4:	22 0f       	add	r18, r18
    66e6:	82 0f       	add	r24, r18
    66e8:	98 1b       	sub	r25, r24
    66ea:	9e 87       	std	Y+14, r25	; 0x0e
    66ec:	0d 89       	ldd	r16, Y+21	; 0x15
    66ee:	1e 89       	ldd	r17, Y+22	; 0x16
    66f0:	2f 2c       	mov	r2, r15
    66f2:	33 24       	eor	r3, r3
    66f4:	33 94       	inc	r3
    66f6:	05 c0       	rjmp	.+10     	; 0x6702 <_Z13uhreinstellenv+0x190>
    66f8:	33 94       	inc	r3
    66fa:	0f 5f       	subi	r16, 0xFF	; 255
    66fc:	1f 4f       	sbci	r17, 0xFF	; 255
    66fe:	f0 e1       	ldi	r31, 0x10	; 16
    6700:	2f 0e       	add	r2, r31
		buffersize=14;
		for(uint8_t i = 0; i<5;i++){
			if(i!=2){
    6702:	83 e0       	ldi	r24, 0x03	; 3
    6704:	38 16       	cp	r3, r24
    6706:	61 f0       	breq	.+24     	; 0x6720 <_Z13uhreinstellenv+0x1ae>
				oled.draw_number16x16(buffer[i],i*numbersmalsize,2*charhighte);
    6708:	20 e1       	ldi	r18, 0x10	; 16
    670a:	42 2d       	mov	r20, r2
    670c:	f8 01       	movw	r30, r16
    670e:	60 81       	ld	r22, Z
    6710:	8e e5       	ldi	r24, 0x5E	; 94
    6712:	99 e0       	ldi	r25, 0x09	; 9
    6714:	0e 94 1e 09 	call	0x123c	; 0x123c <_ZN7Display16draw_number16x16Ehhh>
		buffer[10]=rtc.Monat%10;
		buffer[11]='.';
		buffer[12]=rtc.Jahr/10;
		buffer[13]=rtc.Jahr%10;
		buffersize=14;
		for(uint8_t i = 0; i<5;i++){
    6718:	f4 e0       	ldi	r31, 0x04	; 4
    671a:	f3 15       	cp	r31, r3
    671c:	68 f7       	brcc	.-38     	; 0x66f8 <_Z13uhreinstellenv+0x186>
    671e:	08 c0       	rjmp	.+16     	; 0x6730 <_Z13uhreinstellenv+0x1be>
			if(i!=2){
				oled.draw_number16x16(buffer[i],i*numbersmalsize,2*charhighte);
			}
			else {
				oled.draw_ASCI(buffer[i],i*numbersmalsize+numbersmalsize/2,2*charhighte+charhighte/2);
    6720:	24 e1       	ldi	r18, 0x14	; 20
    6722:	48 e2       	ldi	r20, 0x28	; 40
    6724:	6b 81       	ldd	r22, Y+3	; 0x03
    6726:	8e e5       	ldi	r24, 0x5E	; 94
    6728:	99 e0       	ldi	r25, 0x09	; 9
    672a:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <_ZN7Display9draw_ASCIEhhh>
    672e:	e4 cf       	rjmp	.-56     	; 0x66f8 <_Z13uhreinstellenv+0x186>
    6730:	8e 01       	movw	r16, r28
    6732:	09 5f       	subi	r16, 0xF9	; 249
    6734:	1f 4f       	sbci	r17, 0xFF	; 255
		buffer[10]=rtc.Monat%10;
		buffer[11]='.';
		buffer[12]=rtc.Jahr/10;
		buffer[13]=rtc.Jahr%10;
		buffersize=14;
		for(uint8_t i = 0; i<5;i++){
    6736:	2f 2c       	mov	r2, r15
    6738:	0f 2e       	mov	r0, r31
    673a:	f6 e0       	ldi	r31, 0x06	; 6
    673c:	3f 2e       	mov	r3, r31
    673e:	f0 2d       	mov	r31, r0
			else {
				oled.draw_ASCI(buffer[i],i*numbersmalsize+numbersmalsize/2,2*charhighte+charhighte/2);
			}
		}
		for(uint8_t i = 6; i<buffersize;i++){
			if(i!=8 && i!=11){
    6740:	88 e0       	ldi	r24, 0x08	; 8
    6742:	38 16       	cp	r3, r24
    6744:	61 f0       	breq	.+24     	; 0x675e <_Z13uhreinstellenv+0x1ec>
    6746:	9b e0       	ldi	r25, 0x0B	; 11
    6748:	39 16       	cp	r3, r25
    674a:	49 f0       	breq	.+18     	; 0x675e <_Z13uhreinstellenv+0x1ec>
				oled.draw_number16x16(buffer[i],i*numbersmalsize-6*numbersmalsize,4*charhighte);
    674c:	2e 2d       	mov	r18, r14
    674e:	42 2d       	mov	r20, r2
    6750:	f8 01       	movw	r30, r16
    6752:	60 81       	ld	r22, Z
    6754:	8e e5       	ldi	r24, 0x5E	; 94
    6756:	99 e0       	ldi	r25, 0x09	; 9
    6758:	0e 94 1e 09 	call	0x123c	; 0x123c <_ZN7Display16draw_number16x16Ehhh>
    675c:	09 c0       	rjmp	.+18     	; 0x6770 <_Z13uhreinstellenv+0x1fe>
			}
			else {
				oled.draw_ASCI(buffer[i],i*numbersmalsize+numbersmalsize/2-6*numbersmalsize,5*charhighte);
    675e:	28 e2       	ldi	r18, 0x28	; 40
    6760:	48 e0       	ldi	r20, 0x08	; 8
    6762:	42 0d       	add	r20, r2
    6764:	f8 01       	movw	r30, r16
    6766:	60 81       	ld	r22, Z
    6768:	8e e5       	ldi	r24, 0x5E	; 94
    676a:	99 e0       	ldi	r25, 0x09	; 9
    676c:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <_ZN7Display9draw_ASCIEhhh>
			}
			else {
				oled.draw_ASCI(buffer[i],i*numbersmalsize+numbersmalsize/2,2*charhighte+charhighte/2);
			}
		}
		for(uint8_t i = 6; i<buffersize;i++){
    6770:	33 94       	inc	r3
    6772:	0f 5f       	subi	r16, 0xFF	; 255
    6774:	1f 4f       	sbci	r17, 0xFF	; 255
    6776:	f0 e1       	ldi	r31, 0x10	; 16
    6778:	2f 0e       	add	r2, r31
    677a:	8e e0       	ldi	r24, 0x0E	; 14
    677c:	38 12       	cpse	r3, r24
    677e:	e0 cf       	rjmp	.-64     	; 0x6740 <_Z13uhreinstellenv+0x1ce>
			else {
				oled.draw_ASCI(buffer[i],i*numbersmalsize+numbersmalsize/2-6*numbersmalsize,5*charhighte);
			}
		}

		oled.sendFrame();
    6780:	8e e5       	ldi	r24, 0x5E	; 94
    6782:	99 e0       	ldi	r25, 0x09	; 9
    6784:	0e 94 31 08 	call	0x1062	; 0x1062 <_ZN7Display9sendFrameEv>
		oled.clearFrame();
    6788:	8e e5       	ldi	r24, 0x5E	; 94
    678a:	99 e0       	ldi	r25, 0x09	; 9
    678c:	0e 94 b1 07 	call	0xf62	; 0xf62 <_ZN7Display10clearFrameEv>
		switch (pos) {
    6790:	89 2d       	mov	r24, r9
    6792:	90 e0       	ldi	r25, 0x00	; 0
    6794:	8a 30       	cpi	r24, 0x0A	; 10
    6796:	91 05       	cpc	r25, r1
    6798:	08 f0       	brcs	.+2      	; 0x679c <_Z13uhreinstellenv+0x22a>
    679a:	2c c2       	rjmp	.+1112   	; 0x6bf4 <_Z13uhreinstellenv+0x682>
    679c:	fc 01       	movw	r30, r24
    679e:	ef 50       	subi	r30, 0x0F	; 15
    67a0:	ff 4f       	sbci	r31, 0xFF	; 255
    67a2:	0c 94 12 42 	jmp	0x8424	; 0x8424 <__tablejump2__>
			case 0:
			rtc.Stunden=Tastatur.ZahlenausTastatur()*10;
    67a6:	82 e5       	ldi	r24, 0x52	; 82
    67a8:	99 e0       	ldi	r25, 0x09	; 9
    67aa:	0e 94 ef 20 	call	0x41de	; 0x41de <_ZN9Interface17ZahlenausTastaturEv>
    67ae:	88 0f       	add	r24, r24
    67b0:	98 2f       	mov	r25, r24
    67b2:	99 0f       	add	r25, r25
    67b4:	99 0f       	add	r25, r25
    67b6:	89 0f       	add	r24, r25
			if(rtc.Stunden>=24){
    67b8:	88 31       	cpi	r24, 0x18	; 24
    67ba:	08 f4       	brcc	.+2      	; 0x67be <_Z13uhreinstellenv+0x24c>
    67bc:	57 c2       	rjmp	.+1198   	; 0x6c6c <_Z13uhreinstellenv+0x6fa>
				rtc.Stunden=0;
    67be:	f6 01       	movw	r30, r12
    67c0:	10 8a       	std	Z+16, r1	; 0x10
				pos=-1;
				buffersize=sprintf(buffer,"Stunden falsch");
    67c2:	e7 ea       	ldi	r30, 0xA7	; 167
    67c4:	f2 e0       	ldi	r31, 0x02	; 2
    67c6:	d2 01       	movw	r26, r4
    67c8:	87 2d       	mov	r24, r7
    67ca:	01 90       	ld	r0, Z+
    67cc:	0d 92       	st	X+, r0
    67ce:	8a 95       	dec	r24
    67d0:	e1 f7       	brne	.-8      	; 0x67ca <_Z13uhreinstellenv+0x258>
    67d2:	1f 2d       	mov	r17, r15
				for(uint8_t i = 0; i<buffersize;i++){
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
    67d4:	f5 01       	movw	r30, r10
    67d6:	61 91       	ld	r22, Z+
    67d8:	5f 01       	movw	r10, r30
    67da:	28 e3       	ldi	r18, 0x38	; 56
    67dc:	41 2f       	mov	r20, r17
    67de:	8e e5       	ldi	r24, 0x5E	; 94
    67e0:	99 e0       	ldi	r25, 0x09	; 9
    67e2:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <_ZN7Display9draw_ASCIEhhh>
    67e6:	1a 5f       	subi	r17, 0xFA	; 250
			rtc.Stunden=Tastatur.ZahlenausTastatur()*10;
			if(rtc.Stunden>=24){
				rtc.Stunden=0;
				pos=-1;
				buffersize=sprintf(buffer,"Stunden falsch");
				for(uint8_t i = 0; i<buffersize;i++){
    67e8:	14 35       	cpi	r17, 0x54	; 84
    67ea:	a1 f7       	brne	.-24     	; 0x67d4 <_Z13uhreinstellenv+0x262>
		switch (pos) {
			case 0:
			rtc.Stunden=Tastatur.ZahlenausTastatur()*10;
			if(rtc.Stunden>=24){
				rtc.Stunden=0;
				pos=-1;
    67ec:	99 24       	eor	r9, r9
    67ee:	9a 94       	dec	r9
    67f0:	3f c2       	rjmp	.+1150   	; 0x6c70 <_Z13uhreinstellenv+0x6fe>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 1:
			rtc.Stunden+=Tastatur.ZahlenausTastatur();
    67f2:	82 e5       	ldi	r24, 0x52	; 82
    67f4:	99 e0       	ldi	r25, 0x09	; 9
    67f6:	0e 94 ef 20 	call	0x41de	; 0x41de <_ZN9Interface17ZahlenausTastaturEv>
    67fa:	f6 01       	movw	r30, r12
    67fc:	20 89       	ldd	r18, Z+16	; 0x10
    67fe:	90 e0       	ldi	r25, 0x00	; 0
    6800:	82 0f       	add	r24, r18
    6802:	91 1d       	adc	r25, r1
			if(rtc.Stunden>=24){
    6804:	88 31       	cpi	r24, 0x18	; 24
    6806:	10 f4       	brcc	.+4      	; 0x680c <_Z13uhreinstellenv+0x29a>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 1:
			rtc.Stunden+=Tastatur.ZahlenausTastatur();
    6808:	80 8b       	std	Z+16, r24	; 0x10
    680a:	32 c2       	rjmp	.+1124   	; 0x6c70 <_Z13uhreinstellenv+0x6fe>
			if(rtc.Stunden>=24){
				rtc.Stunden=0;
    680c:	f6 01       	movw	r30, r12
    680e:	10 8a       	std	Z+16, r1	; 0x10
				pos=-1;
				buffersize=sprintf(buffer,"Stunden falsch");
    6810:	e7 ea       	ldi	r30, 0xA7	; 167
    6812:	f2 e0       	ldi	r31, 0x02	; 2
    6814:	d2 01       	movw	r26, r4
    6816:	87 2d       	mov	r24, r7
    6818:	01 90       	ld	r0, Z+
    681a:	0d 92       	st	X+, r0
    681c:	8a 95       	dec	r24
    681e:	e1 f7       	brne	.-8      	; 0x6818 <_Z13uhreinstellenv+0x2a6>
    6820:	1f 2d       	mov	r17, r15
				for(uint8_t i = 0; i<buffersize;i++){
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
    6822:	f5 01       	movw	r30, r10
    6824:	61 91       	ld	r22, Z+
    6826:	5f 01       	movw	r10, r30
    6828:	28 e3       	ldi	r18, 0x38	; 56
    682a:	41 2f       	mov	r20, r17
    682c:	8e e5       	ldi	r24, 0x5E	; 94
    682e:	99 e0       	ldi	r25, 0x09	; 9
    6830:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <_ZN7Display9draw_ASCIEhhh>
    6834:	1a 5f       	subi	r17, 0xFA	; 250
			rtc.Stunden+=Tastatur.ZahlenausTastatur();
			if(rtc.Stunden>=24){
				rtc.Stunden=0;
				pos=-1;
				buffersize=sprintf(buffer,"Stunden falsch");
				for(uint8_t i = 0; i<buffersize;i++){
    6836:	14 35       	cpi	r17, 0x54	; 84
    6838:	a1 f7       	brne	.-24     	; 0x6822 <_Z13uhreinstellenv+0x2b0>
			break;
			case 1:
			rtc.Stunden+=Tastatur.ZahlenausTastatur();
			if(rtc.Stunden>=24){
				rtc.Stunden=0;
				pos=-1;
    683a:	99 24       	eor	r9, r9
    683c:	9a 94       	dec	r9
    683e:	18 c2       	rjmp	.+1072   	; 0x6c70 <_Z13uhreinstellenv+0x6fe>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 2:
			rtc.Minuten=Tastatur.ZahlenausTastatur()*10;
    6840:	82 e5       	ldi	r24, 0x52	; 82
    6842:	99 e0       	ldi	r25, 0x09	; 9
    6844:	0e 94 ef 20 	call	0x41de	; 0x41de <_ZN9Interface17ZahlenausTastaturEv>
    6848:	88 0f       	add	r24, r24
    684a:	98 2f       	mov	r25, r24
    684c:	99 0f       	add	r25, r25
    684e:	99 0f       	add	r25, r25
    6850:	89 0f       	add	r24, r25
			if(rtc.Minuten>=60){
    6852:	8c 33       	cpi	r24, 0x3C	; 60
    6854:	18 f4       	brcc	.+6      	; 0x685c <_Z13uhreinstellenv+0x2ea>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 2:
			rtc.Minuten=Tastatur.ZahlenausTastatur()*10;
    6856:	f6 01       	movw	r30, r12
    6858:	81 8b       	std	Z+17, r24	; 0x11
    685a:	0a c2       	rjmp	.+1044   	; 0x6c70 <_Z13uhreinstellenv+0x6fe>
			if(rtc.Minuten>=60){
				rtc.Minuten=0;
    685c:	f6 01       	movw	r30, r12
    685e:	11 8a       	std	Z+17, r1	; 0x11
				pos=1;
				buffersize=sprintf(buffer,"Minuten falsch");
    6860:	e6 eb       	ldi	r30, 0xB6	; 182
    6862:	f2 e0       	ldi	r31, 0x02	; 2
    6864:	d2 01       	movw	r26, r4
    6866:	87 2d       	mov	r24, r7
    6868:	01 90       	ld	r0, Z+
    686a:	0d 92       	st	X+, r0
    686c:	8a 95       	dec	r24
    686e:	e1 f7       	brne	.-8      	; 0x6868 <_Z13uhreinstellenv+0x2f6>
    6870:	1f 2d       	mov	r17, r15
				for(uint8_t i = 0; i<buffersize;i++){
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
    6872:	f5 01       	movw	r30, r10
    6874:	61 91       	ld	r22, Z+
    6876:	5f 01       	movw	r10, r30
    6878:	28 e3       	ldi	r18, 0x38	; 56
    687a:	41 2f       	mov	r20, r17
    687c:	8e e5       	ldi	r24, 0x5E	; 94
    687e:	99 e0       	ldi	r25, 0x09	; 9
    6880:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <_ZN7Display9draw_ASCIEhhh>
    6884:	1a 5f       	subi	r17, 0xFA	; 250
			rtc.Minuten=Tastatur.ZahlenausTastatur()*10;
			if(rtc.Minuten>=60){
				rtc.Minuten=0;
				pos=1;
				buffersize=sprintf(buffer,"Minuten falsch");
				for(uint8_t i = 0; i<buffersize;i++){
    6886:	14 35       	cpi	r17, 0x54	; 84
    6888:	a1 f7       	brne	.-24     	; 0x6872 <_Z13uhreinstellenv+0x300>
			break;
			case 2:
			rtc.Minuten=Tastatur.ZahlenausTastatur()*10;
			if(rtc.Minuten>=60){
				rtc.Minuten=0;
				pos=1;
    688a:	99 24       	eor	r9, r9
    688c:	93 94       	inc	r9
    688e:	f0 c1       	rjmp	.+992    	; 0x6c70 <_Z13uhreinstellenv+0x6fe>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 3:
			rtc.Minuten+=Tastatur.ZahlenausTastatur();
    6890:	82 e5       	ldi	r24, 0x52	; 82
    6892:	99 e0       	ldi	r25, 0x09	; 9
    6894:	0e 94 ef 20 	call	0x41de	; 0x41de <_ZN9Interface17ZahlenausTastaturEv>
    6898:	f6 01       	movw	r30, r12
    689a:	21 89       	ldd	r18, Z+17	; 0x11
    689c:	90 e0       	ldi	r25, 0x00	; 0
    689e:	82 0f       	add	r24, r18
    68a0:	91 1d       	adc	r25, r1
			if(rtc.Minuten>=60){
    68a2:	8c 33       	cpi	r24, 0x3C	; 60
    68a4:	10 f4       	brcc	.+4      	; 0x68aa <_Z13uhreinstellenv+0x338>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 3:
			rtc.Minuten+=Tastatur.ZahlenausTastatur();
    68a6:	81 8b       	std	Z+17, r24	; 0x11
    68a8:	e3 c1       	rjmp	.+966    	; 0x6c70 <_Z13uhreinstellenv+0x6fe>
			if(rtc.Minuten>=60){
				rtc.Minuten=0;
    68aa:	f6 01       	movw	r30, r12
    68ac:	11 8a       	std	Z+17, r1	; 0x11
				pos=1;
				buffersize=sprintf(buffer,"Minuten falsch");
    68ae:	e6 eb       	ldi	r30, 0xB6	; 182
    68b0:	f2 e0       	ldi	r31, 0x02	; 2
    68b2:	d2 01       	movw	r26, r4
    68b4:	87 2d       	mov	r24, r7
    68b6:	01 90       	ld	r0, Z+
    68b8:	0d 92       	st	X+, r0
    68ba:	8a 95       	dec	r24
    68bc:	e1 f7       	brne	.-8      	; 0x68b6 <_Z13uhreinstellenv+0x344>
    68be:	1f 2d       	mov	r17, r15
				for(uint8_t i = 0; i<buffersize;i++){
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
    68c0:	f5 01       	movw	r30, r10
    68c2:	61 91       	ld	r22, Z+
    68c4:	5f 01       	movw	r10, r30
    68c6:	28 e3       	ldi	r18, 0x38	; 56
    68c8:	41 2f       	mov	r20, r17
    68ca:	8e e5       	ldi	r24, 0x5E	; 94
    68cc:	99 e0       	ldi	r25, 0x09	; 9
    68ce:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <_ZN7Display9draw_ASCIEhhh>
    68d2:	1a 5f       	subi	r17, 0xFA	; 250
			rtc.Minuten+=Tastatur.ZahlenausTastatur();
			if(rtc.Minuten>=60){
				rtc.Minuten=0;
				pos=1;
				buffersize=sprintf(buffer,"Minuten falsch");
				for(uint8_t i = 0; i<buffersize;i++){
    68d4:	14 35       	cpi	r17, 0x54	; 84
    68d6:	a1 f7       	brne	.-24     	; 0x68c0 <_Z13uhreinstellenv+0x34e>
			break;
			case 3:
			rtc.Minuten+=Tastatur.ZahlenausTastatur();
			if(rtc.Minuten>=60){
				rtc.Minuten=0;
				pos=1;
    68d8:	99 24       	eor	r9, r9
    68da:	93 94       	inc	r9
    68dc:	c9 c1       	rjmp	.+914    	; 0x6c70 <_Z13uhreinstellenv+0x6fe>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 4:
			rtc.Tag=Tastatur.ZahlenausTastatur()*10;
    68de:	82 e5       	ldi	r24, 0x52	; 82
    68e0:	99 e0       	ldi	r25, 0x09	; 9
    68e2:	0e 94 ef 20 	call	0x41de	; 0x41de <_ZN9Interface17ZahlenausTastaturEv>
    68e6:	88 0f       	add	r24, r24
    68e8:	98 2f       	mov	r25, r24
    68ea:	99 0f       	add	r25, r25
    68ec:	99 0f       	add	r25, r25
    68ee:	89 0f       	add	r24, r25
			if(rtc.Tag>=32){
    68f0:	80 32       	cpi	r24, 0x20	; 32
    68f2:	18 f4       	brcc	.+6      	; 0x68fa <_Z13uhreinstellenv+0x388>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 4:
			rtc.Tag=Tastatur.ZahlenausTastatur()*10;
    68f4:	f6 01       	movw	r30, r12
    68f6:	84 8b       	std	Z+20, r24	; 0x14
    68f8:	bb c1       	rjmp	.+886    	; 0x6c70 <_Z13uhreinstellenv+0x6fe>
			if(rtc.Tag>=32){
				rtc.Tag=0;
    68fa:	f6 01       	movw	r30, r12
    68fc:	14 8a       	std	Z+20, r1	; 0x14
				pos=3;
				buffersize=sprintf(buffer,"Tag falsch");
    68fe:	8b e0       	ldi	r24, 0x0B	; 11
    6900:	e5 ec       	ldi	r30, 0xC5	; 197
    6902:	f2 e0       	ldi	r31, 0x02	; 2
    6904:	d2 01       	movw	r26, r4
    6906:	01 90       	ld	r0, Z+
    6908:	0d 92       	st	X+, r0
    690a:	8a 95       	dec	r24
    690c:	e1 f7       	brne	.-8      	; 0x6906 <_Z13uhreinstellenv+0x394>
    690e:	1f 2d       	mov	r17, r15
				for(uint8_t i = 0; i<buffersize;i++){
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
    6910:	f5 01       	movw	r30, r10
    6912:	61 91       	ld	r22, Z+
    6914:	5f 01       	movw	r10, r30
    6916:	28 e3       	ldi	r18, 0x38	; 56
    6918:	41 2f       	mov	r20, r17
    691a:	8e e5       	ldi	r24, 0x5E	; 94
    691c:	99 e0       	ldi	r25, 0x09	; 9
    691e:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <_ZN7Display9draw_ASCIEhhh>
    6922:	1a 5f       	subi	r17, 0xFA	; 250
			rtc.Tag=Tastatur.ZahlenausTastatur()*10;
			if(rtc.Tag>=32){
				rtc.Tag=0;
				pos=3;
				buffersize=sprintf(buffer,"Tag falsch");
				for(uint8_t i = 0; i<buffersize;i++){
    6924:	1c 33       	cpi	r17, 0x3C	; 60
    6926:	a1 f7       	brne	.-24     	; 0x6910 <_Z13uhreinstellenv+0x39e>
			break;
			case 4:
			rtc.Tag=Tastatur.ZahlenausTastatur()*10;
			if(rtc.Tag>=32){
				rtc.Tag=0;
				pos=3;
    6928:	0f 2e       	mov	r0, r31
    692a:	f3 e0       	ldi	r31, 0x03	; 3
    692c:	9f 2e       	mov	r9, r31
    692e:	f0 2d       	mov	r31, r0
    6930:	9f c1       	rjmp	.+830    	; 0x6c70 <_Z13uhreinstellenv+0x6fe>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 5:
			rtc.Tag+=Tastatur.ZahlenausTastatur();
    6932:	82 e5       	ldi	r24, 0x52	; 82
    6934:	99 e0       	ldi	r25, 0x09	; 9
    6936:	0e 94 ef 20 	call	0x41de	; 0x41de <_ZN9Interface17ZahlenausTastaturEv>
    693a:	f6 01       	movw	r30, r12
    693c:	24 89       	ldd	r18, Z+20	; 0x14
    693e:	90 e0       	ldi	r25, 0x00	; 0
    6940:	82 0f       	add	r24, r18
    6942:	91 1d       	adc	r25, r1
			if(rtc.Tag>=32){
    6944:	80 32       	cpi	r24, 0x20	; 32
    6946:	10 f4       	brcc	.+4      	; 0x694c <_Z13uhreinstellenv+0x3da>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 5:
			rtc.Tag+=Tastatur.ZahlenausTastatur();
    6948:	84 8b       	std	Z+20, r24	; 0x14
    694a:	92 c1       	rjmp	.+804    	; 0x6c70 <_Z13uhreinstellenv+0x6fe>
			if(rtc.Tag>=32){
				rtc.Tag=0;
    694c:	f6 01       	movw	r30, r12
    694e:	14 8a       	std	Z+20, r1	; 0x14
				pos=3;
				buffersize=sprintf(buffer,"Tag falsch");
    6950:	8b e0       	ldi	r24, 0x0B	; 11
    6952:	e5 ec       	ldi	r30, 0xC5	; 197
    6954:	f2 e0       	ldi	r31, 0x02	; 2
    6956:	d2 01       	movw	r26, r4
    6958:	01 90       	ld	r0, Z+
    695a:	0d 92       	st	X+, r0
    695c:	8a 95       	dec	r24
    695e:	e1 f7       	brne	.-8      	; 0x6958 <_Z13uhreinstellenv+0x3e6>
    6960:	1f 2d       	mov	r17, r15
				for(uint8_t i = 0; i<buffersize;i++){
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
    6962:	f5 01       	movw	r30, r10
    6964:	61 91       	ld	r22, Z+
    6966:	5f 01       	movw	r10, r30
    6968:	28 e3       	ldi	r18, 0x38	; 56
    696a:	41 2f       	mov	r20, r17
    696c:	8e e5       	ldi	r24, 0x5E	; 94
    696e:	99 e0       	ldi	r25, 0x09	; 9
    6970:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <_ZN7Display9draw_ASCIEhhh>
    6974:	1a 5f       	subi	r17, 0xFA	; 250
			rtc.Tag+=Tastatur.ZahlenausTastatur();
			if(rtc.Tag>=32){
				rtc.Tag=0;
				pos=3;
				buffersize=sprintf(buffer,"Tag falsch");
				for(uint8_t i = 0; i<buffersize;i++){
    6976:	1c 33       	cpi	r17, 0x3C	; 60
    6978:	a1 f7       	brne	.-24     	; 0x6962 <_Z13uhreinstellenv+0x3f0>
			break;
			case 5:
			rtc.Tag+=Tastatur.ZahlenausTastatur();
			if(rtc.Tag>=32){
				rtc.Tag=0;
				pos=3;
    697a:	0f 2e       	mov	r0, r31
    697c:	f3 e0       	ldi	r31, 0x03	; 3
    697e:	9f 2e       	mov	r9, r31
    6980:	f0 2d       	mov	r31, r0
    6982:	76 c1       	rjmp	.+748    	; 0x6c70 <_Z13uhreinstellenv+0x6fe>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 6:
			rtc.Monat=Tastatur.ZahlenausTastatur()*10;
    6984:	82 e5       	ldi	r24, 0x52	; 82
    6986:	99 e0       	ldi	r25, 0x09	; 9
    6988:	0e 94 ef 20 	call	0x41de	; 0x41de <_ZN9Interface17ZahlenausTastaturEv>
    698c:	88 0f       	add	r24, r24
    698e:	98 2f       	mov	r25, r24
    6990:	99 0f       	add	r25, r25
    6992:	99 0f       	add	r25, r25
    6994:	89 0f       	add	r24, r25
			if(rtc.Monat>=13){
    6996:	8d 30       	cpi	r24, 0x0D	; 13
    6998:	18 f4       	brcc	.+6      	; 0x69a0 <_Z13uhreinstellenv+0x42e>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 6:
			rtc.Monat=Tastatur.ZahlenausTastatur()*10;
    699a:	f6 01       	movw	r30, r12
    699c:	86 8b       	std	Z+22, r24	; 0x16
    699e:	68 c1       	rjmp	.+720    	; 0x6c70 <_Z13uhreinstellenv+0x6fe>
			if(rtc.Monat>=13){
				rtc.Monat=0;
    69a0:	f6 01       	movw	r30, r12
    69a2:	16 8a       	std	Z+22, r1	; 0x16
				pos=5;
				buffersize=sprintf(buffer,"Monat falsch");
    69a4:	8d e0       	ldi	r24, 0x0D	; 13
    69a6:	e0 ed       	ldi	r30, 0xD0	; 208
    69a8:	f2 e0       	ldi	r31, 0x02	; 2
    69aa:	d2 01       	movw	r26, r4
    69ac:	01 90       	ld	r0, Z+
    69ae:	0d 92       	st	X+, r0
    69b0:	8a 95       	dec	r24
    69b2:	e1 f7       	brne	.-8      	; 0x69ac <_Z13uhreinstellenv+0x43a>
    69b4:	1f 2d       	mov	r17, r15
				for(uint8_t i = 0; i<buffersize;i++){
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
    69b6:	f5 01       	movw	r30, r10
    69b8:	61 91       	ld	r22, Z+
    69ba:	5f 01       	movw	r10, r30
    69bc:	28 e3       	ldi	r18, 0x38	; 56
    69be:	41 2f       	mov	r20, r17
    69c0:	8e e5       	ldi	r24, 0x5E	; 94
    69c2:	99 e0       	ldi	r25, 0x09	; 9
    69c4:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <_ZN7Display9draw_ASCIEhhh>
    69c8:	1a 5f       	subi	r17, 0xFA	; 250
			rtc.Monat=Tastatur.ZahlenausTastatur()*10;
			if(rtc.Monat>=13){
				rtc.Monat=0;
				pos=5;
				buffersize=sprintf(buffer,"Monat falsch");
				for(uint8_t i = 0; i<buffersize;i++){
    69ca:	18 34       	cpi	r17, 0x48	; 72
    69cc:	a1 f7       	brne	.-24     	; 0x69b6 <_Z13uhreinstellenv+0x444>
			break;
			case 6:
			rtc.Monat=Tastatur.ZahlenausTastatur()*10;
			if(rtc.Monat>=13){
				rtc.Monat=0;
				pos=5;
    69ce:	0f 2e       	mov	r0, r31
    69d0:	f5 e0       	ldi	r31, 0x05	; 5
    69d2:	9f 2e       	mov	r9, r31
    69d4:	f0 2d       	mov	r31, r0
    69d6:	4c c1       	rjmp	.+664    	; 0x6c70 <_Z13uhreinstellenv+0x6fe>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 7:
			rtc.Monat+=Tastatur.ZahlenausTastatur();
    69d8:	82 e5       	ldi	r24, 0x52	; 82
    69da:	99 e0       	ldi	r25, 0x09	; 9
    69dc:	0e 94 ef 20 	call	0x41de	; 0x41de <_ZN9Interface17ZahlenausTastaturEv>
    69e0:	f6 01       	movw	r30, r12
    69e2:	26 89       	ldd	r18, Z+22	; 0x16
    69e4:	90 e0       	ldi	r25, 0x00	; 0
    69e6:	82 0f       	add	r24, r18
    69e8:	91 1d       	adc	r25, r1
			if(rtc.Monat>=13){
    69ea:	8d 30       	cpi	r24, 0x0D	; 13
    69ec:	10 f4       	brcc	.+4      	; 0x69f2 <_Z13uhreinstellenv+0x480>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 7:
			rtc.Monat+=Tastatur.ZahlenausTastatur();
    69ee:	86 8b       	std	Z+22, r24	; 0x16
    69f0:	1d c0       	rjmp	.+58     	; 0x6a2c <_Z13uhreinstellenv+0x4ba>
			if(rtc.Monat>=13){
				rtc.Monat=0;
    69f2:	f6 01       	movw	r30, r12
    69f4:	16 8a       	std	Z+22, r1	; 0x16
				pos=5;
				buffersize=sprintf(buffer,"Monat falsch");
    69f6:	8d e0       	ldi	r24, 0x0D	; 13
    69f8:	e0 ed       	ldi	r30, 0xD0	; 208
    69fa:	f2 e0       	ldi	r31, 0x02	; 2
    69fc:	d2 01       	movw	r26, r4
    69fe:	01 90       	ld	r0, Z+
    6a00:	0d 92       	st	X+, r0
    6a02:	8a 95       	dec	r24
    6a04:	e1 f7       	brne	.-8      	; 0x69fe <_Z13uhreinstellenv+0x48c>
    6a06:	2d 88       	ldd	r2, Y+21	; 0x15
    6a08:	3e 88       	ldd	r3, Y+22	; 0x16
    6a0a:	1f 2d       	mov	r17, r15
				for(uint8_t i = 0; i<buffersize;i++){
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
    6a0c:	f1 01       	movw	r30, r2
    6a0e:	61 91       	ld	r22, Z+
    6a10:	1f 01       	movw	r2, r30
    6a12:	28 e3       	ldi	r18, 0x38	; 56
    6a14:	41 2f       	mov	r20, r17
    6a16:	8e e5       	ldi	r24, 0x5E	; 94
    6a18:	99 e0       	ldi	r25, 0x09	; 9
    6a1a:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <_ZN7Display9draw_ASCIEhhh>
    6a1e:	1a 5f       	subi	r17, 0xFA	; 250
			rtc.Monat+=Tastatur.ZahlenausTastatur();
			if(rtc.Monat>=13){
				rtc.Monat=0;
				pos=5;
				buffersize=sprintf(buffer,"Monat falsch");
				for(uint8_t i = 0; i<buffersize;i++){
    6a20:	18 34       	cpi	r17, 0x48	; 72
    6a22:	a1 f7       	brne	.-24     	; 0x6a0c <_Z13uhreinstellenv+0x49a>
			break;
			case 7:
			rtc.Monat+=Tastatur.ZahlenausTastatur();
			if(rtc.Monat>=13){
				rtc.Monat=0;
				pos=5;
    6a24:	0f 2e       	mov	r0, r31
    6a26:	f5 e0       	ldi	r31, 0x05	; 5
    6a28:	9f 2e       	mov	r9, r31
    6a2a:	f0 2d       	mov	r31, r0
				buffersize=sprintf(buffer,"Monat falsch");
				for(uint8_t i = 0; i<buffersize;i++){
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			if(rtc.Monat==4||rtc.Monat==6||rtc.Monat==9||rtc.Monat==11){
    6a2c:	f6 01       	movw	r30, r12
    6a2e:	96 89       	ldd	r25, Z+22	; 0x16
    6a30:	89 2f       	mov	r24, r25
    6a32:	8d 7f       	andi	r24, 0xFD	; 253
    6a34:	84 30       	cpi	r24, 0x04	; 4
    6a36:	11 f0       	breq	.+4      	; 0x6a3c <_Z13uhreinstellenv+0x4ca>
    6a38:	89 30       	cpi	r24, 0x09	; 9
    6a3a:	09 f5       	brne	.+66     	; 0x6a7e <_Z13uhreinstellenv+0x50c>
				if(rtc.Tag>=31){
    6a3c:	f6 01       	movw	r30, r12
    6a3e:	84 89       	ldd	r24, Z+20	; 0x14
    6a40:	8f 31       	cpi	r24, 0x1F	; 31
    6a42:	08 f4       	brcc	.+2      	; 0x6a46 <_Z13uhreinstellenv+0x4d4>
    6a44:	d8 c0       	rjmp	.+432    	; 0x6bf6 <_Z13uhreinstellenv+0x684>
					rtc.Tag=0;
    6a46:	14 8a       	std	Z+20, r1	; 0x14
					rtc.Monat=0;
    6a48:	16 8a       	std	Z+22, r1	; 0x16
					pos=3;
					buffersize=sprintf(buffer,"Tag falsch");
    6a4a:	8b e0       	ldi	r24, 0x0B	; 11
    6a4c:	e5 ec       	ldi	r30, 0xC5	; 197
    6a4e:	f2 e0       	ldi	r31, 0x02	; 2
    6a50:	d2 01       	movw	r26, r4
    6a52:	01 90       	ld	r0, Z+
    6a54:	0d 92       	st	X+, r0
    6a56:	8a 95       	dec	r24
    6a58:	e1 f7       	brne	.-8      	; 0x6a52 <_Z13uhreinstellenv+0x4e0>
    6a5a:	1f 2d       	mov	r17, r15
					for(uint8_t i = 0; i<buffersize;i++){
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
    6a5c:	f5 01       	movw	r30, r10
    6a5e:	61 91       	ld	r22, Z+
    6a60:	5f 01       	movw	r10, r30
    6a62:	28 e3       	ldi	r18, 0x38	; 56
    6a64:	41 2f       	mov	r20, r17
    6a66:	8e e5       	ldi	r24, 0x5E	; 94
    6a68:	99 e0       	ldi	r25, 0x09	; 9
    6a6a:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <_ZN7Display9draw_ASCIEhhh>
    6a6e:	1a 5f       	subi	r17, 0xFA	; 250
				if(rtc.Tag>=31){
					rtc.Tag=0;
					rtc.Monat=0;
					pos=3;
					buffersize=sprintf(buffer,"Tag falsch");
					for(uint8_t i = 0; i<buffersize;i++){
    6a70:	1c 33       	cpi	r17, 0x3C	; 60
    6a72:	a1 f7       	brne	.-24     	; 0x6a5c <_Z13uhreinstellenv+0x4ea>
			}
			if(rtc.Monat==4||rtc.Monat==6||rtc.Monat==9||rtc.Monat==11){
				if(rtc.Tag>=31){
					rtc.Tag=0;
					rtc.Monat=0;
					pos=3;
    6a74:	0f 2e       	mov	r0, r31
    6a76:	f3 e0       	ldi	r31, 0x03	; 3
    6a78:	9f 2e       	mov	r9, r31
    6a7a:	f0 2d       	mov	r31, r0
    6a7c:	f9 c0       	rjmp	.+498    	; 0x6c70 <_Z13uhreinstellenv+0x6fe>
					for(uint8_t i = 0; i<buffersize;i++){
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
			}
			else if(rtc.Monat==2){
    6a7e:	92 30       	cpi	r25, 0x02	; 2
    6a80:	09 f0       	breq	.+2      	; 0x6a84 <_Z13uhreinstellenv+0x512>
    6a82:	b9 c0       	rjmp	.+370    	; 0x6bf6 <_Z13uhreinstellenv+0x684>
				if(rtc.Tag>=30){
    6a84:	f6 01       	movw	r30, r12
    6a86:	84 89       	ldd	r24, Z+20	; 0x14
    6a88:	8e 31       	cpi	r24, 0x1E	; 30
    6a8a:	08 f4       	brcc	.+2      	; 0x6a8e <_Z13uhreinstellenv+0x51c>
    6a8c:	b4 c0       	rjmp	.+360    	; 0x6bf6 <_Z13uhreinstellenv+0x684>
					rtc.Tag=0;
    6a8e:	14 8a       	std	Z+20, r1	; 0x14
					rtc.Monat=0;
    6a90:	16 8a       	std	Z+22, r1	; 0x16
					pos=3;
					buffersize=sprintf(buffer,"Tag falsch");
    6a92:	8b e0       	ldi	r24, 0x0B	; 11
    6a94:	e5 ec       	ldi	r30, 0xC5	; 197
    6a96:	f2 e0       	ldi	r31, 0x02	; 2
    6a98:	d2 01       	movw	r26, r4
    6a9a:	01 90       	ld	r0, Z+
    6a9c:	0d 92       	st	X+, r0
    6a9e:	8a 95       	dec	r24
    6aa0:	e1 f7       	brne	.-8      	; 0x6a9a <_Z13uhreinstellenv+0x528>
    6aa2:	1f 2d       	mov	r17, r15
					for(uint8_t i = 0; i<buffersize;i++){
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
    6aa4:	f5 01       	movw	r30, r10
    6aa6:	61 91       	ld	r22, Z+
    6aa8:	5f 01       	movw	r10, r30
    6aaa:	28 e3       	ldi	r18, 0x38	; 56
    6aac:	41 2f       	mov	r20, r17
    6aae:	8e e5       	ldi	r24, 0x5E	; 94
    6ab0:	99 e0       	ldi	r25, 0x09	; 9
    6ab2:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <_ZN7Display9draw_ASCIEhhh>
    6ab6:	1a 5f       	subi	r17, 0xFA	; 250
				if(rtc.Tag>=30){
					rtc.Tag=0;
					rtc.Monat=0;
					pos=3;
					buffersize=sprintf(buffer,"Tag falsch");
					for(uint8_t i = 0; i<buffersize;i++){
    6ab8:	1c 33       	cpi	r17, 0x3C	; 60
    6aba:	a1 f7       	brne	.-24     	; 0x6aa4 <_Z13uhreinstellenv+0x532>
			}
			else if(rtc.Monat==2){
				if(rtc.Tag>=30){
					rtc.Tag=0;
					rtc.Monat=0;
					pos=3;
    6abc:	0f 2e       	mov	r0, r31
    6abe:	f3 e0       	ldi	r31, 0x03	; 3
    6ac0:	9f 2e       	mov	r9, r31
    6ac2:	f0 2d       	mov	r31, r0
    6ac4:	d5 c0       	rjmp	.+426    	; 0x6c70 <_Z13uhreinstellenv+0x6fe>
					}
				}
			}
			break;
			case 8:
			rtc.Jahr=Tastatur.ZahlenausTastatur()*10;
    6ac6:	82 e5       	ldi	r24, 0x52	; 82
    6ac8:	99 e0       	ldi	r25, 0x09	; 9
    6aca:	0e 94 ef 20 	call	0x41de	; 0x41de <_ZN9Interface17ZahlenausTastaturEv>
    6ace:	88 0f       	add	r24, r24
    6ad0:	98 2f       	mov	r25, r24
    6ad2:	99 0f       	add	r25, r25
    6ad4:	99 0f       	add	r25, r25
    6ad6:	89 0f       	add	r24, r25
			if(rtc.Jahr>=50){
    6ad8:	82 33       	cpi	r24, 0x32	; 50
    6ada:	18 f4       	brcc	.+6      	; 0x6ae2 <_Z13uhreinstellenv+0x570>
					}
				}
			}
			break;
			case 8:
			rtc.Jahr=Tastatur.ZahlenausTastatur()*10;
    6adc:	f6 01       	movw	r30, r12
    6ade:	87 8b       	std	Z+23, r24	; 0x17
    6ae0:	c7 c0       	rjmp	.+398    	; 0x6c70 <_Z13uhreinstellenv+0x6fe>
			if(rtc.Jahr>=50){
				rtc.Jahr=0;
    6ae2:	f6 01       	movw	r30, r12
    6ae4:	17 8a       	std	Z+23, r1	; 0x17
				pos=7;
				buffersize=sprintf(buffer,"Jahr falsch");
    6ae6:	8c e0       	ldi	r24, 0x0C	; 12
    6ae8:	ed ed       	ldi	r30, 0xDD	; 221
    6aea:	f2 e0       	ldi	r31, 0x02	; 2
    6aec:	d2 01       	movw	r26, r4
    6aee:	01 90       	ld	r0, Z+
    6af0:	0d 92       	st	X+, r0
    6af2:	8a 95       	dec	r24
    6af4:	e1 f7       	brne	.-8      	; 0x6aee <_Z13uhreinstellenv+0x57c>
    6af6:	1f 2d       	mov	r17, r15
				for(uint8_t i = 0; i<buffersize;i++){
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
    6af8:	f5 01       	movw	r30, r10
    6afa:	61 91       	ld	r22, Z+
    6afc:	5f 01       	movw	r10, r30
    6afe:	28 e3       	ldi	r18, 0x38	; 56
    6b00:	41 2f       	mov	r20, r17
    6b02:	8e e5       	ldi	r24, 0x5E	; 94
    6b04:	99 e0       	ldi	r25, 0x09	; 9
    6b06:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <_ZN7Display9draw_ASCIEhhh>
    6b0a:	1a 5f       	subi	r17, 0xFA	; 250
			rtc.Jahr=Tastatur.ZahlenausTastatur()*10;
			if(rtc.Jahr>=50){
				rtc.Jahr=0;
				pos=7;
				buffersize=sprintf(buffer,"Jahr falsch");
				for(uint8_t i = 0; i<buffersize;i++){
    6b0c:	12 34       	cpi	r17, 0x42	; 66
    6b0e:	a1 f7       	brne	.-24     	; 0x6af8 <_Z13uhreinstellenv+0x586>
			break;
			case 8:
			rtc.Jahr=Tastatur.ZahlenausTastatur()*10;
			if(rtc.Jahr>=50){
				rtc.Jahr=0;
				pos=7;
    6b10:	0f 2e       	mov	r0, r31
    6b12:	f7 e0       	ldi	r31, 0x07	; 7
    6b14:	9f 2e       	mov	r9, r31
    6b16:	f0 2d       	mov	r31, r0
    6b18:	ab c0       	rjmp	.+342    	; 0x6c70 <_Z13uhreinstellenv+0x6fe>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 9:
			rtc.Jahr+=Tastatur.ZahlenausTastatur();
    6b1a:	82 e5       	ldi	r24, 0x52	; 82
    6b1c:	99 e0       	ldi	r25, 0x09	; 9
    6b1e:	0e 94 ef 20 	call	0x41de	; 0x41de <_ZN9Interface17ZahlenausTastaturEv>
    6b22:	f6 01       	movw	r30, r12
    6b24:	27 89       	ldd	r18, Z+23	; 0x17
    6b26:	90 e0       	ldi	r25, 0x00	; 0
    6b28:	82 0f       	add	r24, r18
    6b2a:	91 1d       	adc	r25, r1
			if(rtc.Jahr>=50){
    6b2c:	82 33       	cpi	r24, 0x32	; 50
    6b2e:	08 f4       	brcc	.+2      	; 0x6b32 <_Z13uhreinstellenv+0x5c0>
    6b30:	96 c0       	rjmp	.+300    	; 0x6c5e <_Z13uhreinstellenv+0x6ec>
				rtc.Jahr=0;
    6b32:	17 8a       	std	Z+23, r1	; 0x17
				pos=7;
				buffersize=sprintf(buffer,"Jahr falsch");
    6b34:	8c e0       	ldi	r24, 0x0C	; 12
    6b36:	ed ed       	ldi	r30, 0xDD	; 221
    6b38:	f2 e0       	ldi	r31, 0x02	; 2
    6b3a:	d2 01       	movw	r26, r4
    6b3c:	01 90       	ld	r0, Z+
    6b3e:	0d 92       	st	X+, r0
    6b40:	8a 95       	dec	r24
    6b42:	e1 f7       	brne	.-8      	; 0x6b3c <_Z13uhreinstellenv+0x5ca>
    6b44:	2d 88       	ldd	r2, Y+21	; 0x15
    6b46:	3e 88       	ldd	r3, Y+22	; 0x16
    6b48:	1f 2d       	mov	r17, r15
				for(uint8_t i = 0; i<buffersize;i++){
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
    6b4a:	f1 01       	movw	r30, r2
    6b4c:	61 91       	ld	r22, Z+
    6b4e:	1f 01       	movw	r2, r30
    6b50:	28 e3       	ldi	r18, 0x38	; 56
    6b52:	41 2f       	mov	r20, r17
    6b54:	8e e5       	ldi	r24, 0x5E	; 94
    6b56:	99 e0       	ldi	r25, 0x09	; 9
    6b58:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <_ZN7Display9draw_ASCIEhhh>
    6b5c:	1a 5f       	subi	r17, 0xFA	; 250
			rtc.Jahr+=Tastatur.ZahlenausTastatur();
			if(rtc.Jahr>=50){
				rtc.Jahr=0;
				pos=7;
				buffersize=sprintf(buffer,"Jahr falsch");
				for(uint8_t i = 0; i<buffersize;i++){
    6b5e:	12 34       	cpi	r17, 0x42	; 66
    6b60:	a1 f7       	brne	.-24     	; 0x6b4a <_Z13uhreinstellenv+0x5d8>
			break;
			case 9:
			rtc.Jahr+=Tastatur.ZahlenausTastatur();
			if(rtc.Jahr>=50){
				rtc.Jahr=0;
				pos=7;
    6b62:	0f 2e       	mov	r0, r31
    6b64:	f7 e0       	ldi	r31, 0x07	; 7
    6b66:	9f 2e       	mov	r9, r31
    6b68:	f0 2d       	mov	r31, r0
    6b6a:	7b c0       	rjmp	.+246    	; 0x6c62 <_Z13uhreinstellenv+0x6f0>
				for(uint8_t i = 0; i<buffersize;i++){
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			if(rtc.Monat==2){
				if(rtc.Jahr%4==0){
    6b6c:	f6 01       	movw	r30, r12
    6b6e:	17 89       	ldd	r17, Z+23	; 0x17
    6b70:	13 70       	andi	r17, 0x03	; 3
    6b72:	f9 f4       	brne	.+62     	; 0x6bb2 <_Z13uhreinstellenv+0x640>
					if (rtc.Tag>=30)
    6b74:	84 89       	ldd	r24, Z+20	; 0x14
    6b76:	8e 31       	cpi	r24, 0x1E	; 30
    6b78:	f0 f1       	brcs	.+124    	; 0x6bf6 <_Z13uhreinstellenv+0x684>
					{
						rtc.Tag=0;
    6b7a:	14 8a       	std	Z+20, r1	; 0x14
						rtc.Monat=0;
    6b7c:	16 8a       	std	Z+22, r1	; 0x16
						rtc.Jahr=0;
    6b7e:	17 8a       	std	Z+23, r1	; 0x17
						pos=3;
						buffersize=sprintf(buffer,"Tag falsch");
    6b80:	8b e0       	ldi	r24, 0x0B	; 11
    6b82:	e5 ec       	ldi	r30, 0xC5	; 197
    6b84:	f2 e0       	ldi	r31, 0x02	; 2
    6b86:	d2 01       	movw	r26, r4
    6b88:	01 90       	ld	r0, Z+
    6b8a:	0d 92       	st	X+, r0
    6b8c:	8a 95       	dec	r24
    6b8e:	e1 f7       	brne	.-8      	; 0x6b88 <_Z13uhreinstellenv+0x616>
						for(uint8_t i = 0; i<buffersize;i++){
							oled.draw_ASCI(buffer[i],charsize*i,7*8);
    6b90:	f5 01       	movw	r30, r10
    6b92:	61 91       	ld	r22, Z+
    6b94:	5f 01       	movw	r10, r30
    6b96:	28 e3       	ldi	r18, 0x38	; 56
    6b98:	41 2f       	mov	r20, r17
    6b9a:	8e e5       	ldi	r24, 0x5E	; 94
    6b9c:	99 e0       	ldi	r25, 0x09	; 9
    6b9e:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <_ZN7Display9draw_ASCIEhhh>
    6ba2:	1a 5f       	subi	r17, 0xFA	; 250
						rtc.Tag=0;
						rtc.Monat=0;
						rtc.Jahr=0;
						pos=3;
						buffersize=sprintf(buffer,"Tag falsch");
						for(uint8_t i = 0; i<buffersize;i++){
    6ba4:	1c 33       	cpi	r17, 0x3C	; 60
    6ba6:	a1 f7       	brne	.-24     	; 0x6b90 <_Z13uhreinstellenv+0x61e>
					if (rtc.Tag>=30)
					{
						rtc.Tag=0;
						rtc.Monat=0;
						rtc.Jahr=0;
						pos=3;
    6ba8:	0f 2e       	mov	r0, r31
    6baa:	f3 e0       	ldi	r31, 0x03	; 3
    6bac:	9f 2e       	mov	r9, r31
    6bae:	f0 2d       	mov	r31, r0
    6bb0:	5f c0       	rjmp	.+190    	; 0x6c70 <_Z13uhreinstellenv+0x6fe>
							oled.draw_ASCI(buffer[i],charsize*i,7*8);
						}
					}
				}
				else{
					if(rtc.Tag>=29){
    6bb2:	f6 01       	movw	r30, r12
    6bb4:	84 89       	ldd	r24, Z+20	; 0x14
    6bb6:	8d 31       	cpi	r24, 0x1D	; 29
    6bb8:	f0 f0       	brcs	.+60     	; 0x6bf6 <_Z13uhreinstellenv+0x684>
						rtc.Tag=0;
    6bba:	14 8a       	std	Z+20, r1	; 0x14
						rtc.Monat=0;
    6bbc:	16 8a       	std	Z+22, r1	; 0x16
						rtc.Jahr=0;
    6bbe:	17 8a       	std	Z+23, r1	; 0x17
						pos=3;
						buffersize=sprintf(buffer,"Tag falsch");
    6bc0:	8b e0       	ldi	r24, 0x0B	; 11
    6bc2:	e5 ec       	ldi	r30, 0xC5	; 197
    6bc4:	f2 e0       	ldi	r31, 0x02	; 2
    6bc6:	d2 01       	movw	r26, r4
    6bc8:	01 90       	ld	r0, Z+
    6bca:	0d 92       	st	X+, r0
    6bcc:	8a 95       	dec	r24
    6bce:	e1 f7       	brne	.-8      	; 0x6bc8 <_Z13uhreinstellenv+0x656>
    6bd0:	1f 2d       	mov	r17, r15
						for(uint8_t i = 0; i<buffersize;i++){
							oled.draw_ASCI(buffer[i],charsize*i,7*8);
    6bd2:	f5 01       	movw	r30, r10
    6bd4:	61 91       	ld	r22, Z+
    6bd6:	5f 01       	movw	r10, r30
    6bd8:	28 e3       	ldi	r18, 0x38	; 56
    6bda:	41 2f       	mov	r20, r17
    6bdc:	8e e5       	ldi	r24, 0x5E	; 94
    6bde:	99 e0       	ldi	r25, 0x09	; 9
    6be0:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <_ZN7Display9draw_ASCIEhhh>
    6be4:	1a 5f       	subi	r17, 0xFA	; 250
						rtc.Tag=0;
						rtc.Monat=0;
						rtc.Jahr=0;
						pos=3;
						buffersize=sprintf(buffer,"Tag falsch");
						for(uint8_t i = 0; i<buffersize;i++){
    6be6:	1c 33       	cpi	r17, 0x3C	; 60
    6be8:	a1 f7       	brne	.-24     	; 0x6bd2 <_Z13uhreinstellenv+0x660>
				else{
					if(rtc.Tag>=29){
						rtc.Tag=0;
						rtc.Monat=0;
						rtc.Jahr=0;
						pos=3;
    6bea:	0f 2e       	mov	r0, r31
    6bec:	f3 e0       	ldi	r31, 0x03	; 3
    6bee:	9f 2e       	mov	r9, r31
    6bf0:	f0 2d       	mov	r31, r0
    6bf2:	3e c0       	rjmp	.+124    	; 0x6c70 <_Z13uhreinstellenv+0x6fe>
					}
				}
			}
			break;
			default:
			pos++;
    6bf4:	93 94       	inc	r9
			break;
		}
		pos++;
    6bf6:	93 94       	inc	r9
	
	oled.clearFrame();
	char buffer[20];
	uint8_t buffersize;
	uint8_t pos=0;
	while(pos<11){
    6bf8:	fa e0       	ldi	r31, 0x0A	; 10
    6bfa:	f9 15       	cp	r31, r9
    6bfc:	08 f0       	brcs	.+2      	; 0x6c00 <_Z13uhreinstellenv+0x68e>
    6bfe:	f6 cc       	rjmp	.-1556   	; 0x65ec <_Z13uhreinstellenv+0x7a>
			break;
		}
		pos++;
	}
	
	rtc.Sekunden		= 0;
    6c00:	0f e5       	ldi	r16, 0x5F	; 95
    6c02:	1d e0       	ldi	r17, 0x0D	; 13
    6c04:	f8 01       	movw	r30, r16
    6c06:	12 8a       	std	Z+18, r1	; 0x12
	rtc.HundSekunden	= 0;
    6c08:	13 8a       	std	Z+19, r1	; 0x13
	//speichern der neuen Zeit im EEPROM
	EEPROM_Write(EEMINUTEN,rtc.Minuten);
    6c0a:	61 89       	ldd	r22, Z+17	; 0x11
    6c0c:	80 e0       	ldi	r24, 0x00	; 0
    6c0e:	90 e0       	ldi	r25, 0x00	; 0
    6c10:	0e 94 9d 27 	call	0x4f3a	; 0x4f3a <_Z12EEPROM_Writejh>
	EEPROM_Write(EESTUNDEN,rtc.Stunden);
    6c14:	f8 01       	movw	r30, r16
    6c16:	60 89       	ldd	r22, Z+16	; 0x10
    6c18:	81 e0       	ldi	r24, 0x01	; 1
    6c1a:	90 e0       	ldi	r25, 0x00	; 0
    6c1c:	0e 94 9d 27 	call	0x4f3a	; 0x4f3a <_Z12EEPROM_Writejh>
	EEPROM_Write(EETAGE,rtc.Tag);
    6c20:	f8 01       	movw	r30, r16
    6c22:	64 89       	ldd	r22, Z+20	; 0x14
    6c24:	82 e0       	ldi	r24, 0x02	; 2
    6c26:	90 e0       	ldi	r25, 0x00	; 0
    6c28:	0e 94 9d 27 	call	0x4f3a	; 0x4f3a <_Z12EEPROM_Writejh>
	EEPROM_Write(EEMONAT,rtc.Monat);
    6c2c:	f8 01       	movw	r30, r16
    6c2e:	66 89       	ldd	r22, Z+22	; 0x16
    6c30:	83 e0       	ldi	r24, 0x03	; 3
    6c32:	90 e0       	ldi	r25, 0x00	; 0
    6c34:	0e 94 9d 27 	call	0x4f3a	; 0x4f3a <_Z12EEPROM_Writejh>
	EEPROM_Write(EEJAHR,rtc.Jahr);
    6c38:	f8 01       	movw	r30, r16
    6c3a:	67 89       	ldd	r22, Z+23	; 0x17
    6c3c:	84 e0       	ldi	r24, 0x04	; 4
    6c3e:	90 e0       	ldi	r25, 0x00	; 0
    6c40:	0e 94 9d 27 	call	0x4f3a	; 0x4f3a <_Z12EEPROM_Writejh>
	
	oled.clearFrame();
    6c44:	8e e5       	ldi	r24, 0x5E	; 94
    6c46:	99 e0       	ldi	r25, 0x09	; 9
    6c48:	0e 94 b1 07 	call	0xf62	; 0xf62 <_ZN7Display10clearFrameEv>
	rtc.ausgabedatumneu();
    6c4c:	c8 01       	movw	r24, r16
    6c4e:	70 d3       	rcall	.+1760   	; 0x7330 <_ZN3RTC15ausgabedatumneuEv>
	rtc.ausgabezeitneu();
    6c50:	c8 01       	movw	r24, r16
    6c52:	35 d3       	rcall	.+1642   	; 0x72be <_ZN3RTC14ausgabezeitneuEv>
	rtc.RTCstart();
    6c54:	c8 01       	movw	r24, r16
    6c56:	4d d4       	rcall	.+2202   	; 0x74f2 <_ZN3RTC8RTCstartEv>
    6c58:	0d c0       	rjmp	.+26     	; 0x6c74 <_Z13uhreinstellenv+0x702>
			break;
			default:
			pos++;
			break;
		}
		pos++;
    6c5a:	93 94       	inc	r9
    6c5c:	c7 cc       	rjmp	.-1650   	; 0x65ec <_Z13uhreinstellenv+0x7a>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 9:
			rtc.Jahr+=Tastatur.ZahlenausTastatur();
    6c5e:	f6 01       	movw	r30, r12
    6c60:	87 8b       	std	Z+23, r24	; 0x17
				buffersize=sprintf(buffer,"Jahr falsch");
				for(uint8_t i = 0; i<buffersize;i++){
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			if(rtc.Monat==2){
    6c62:	f6 01       	movw	r30, r12
    6c64:	86 89       	ldd	r24, Z+22	; 0x16
    6c66:	82 30       	cpi	r24, 0x02	; 2
    6c68:	c1 f7       	brne	.-16     	; 0x6c5a <_Z13uhreinstellenv+0x6e8>
    6c6a:	80 cf       	rjmp	.-256    	; 0x6b6c <_Z13uhreinstellenv+0x5fa>

		oled.sendFrame();
		oled.clearFrame();
		switch (pos) {
			case 0:
			rtc.Stunden=Tastatur.ZahlenausTastatur()*10;
    6c6c:	f6 01       	movw	r30, r12
    6c6e:	80 8b       	std	Z+16, r24	; 0x10
			break;
			default:
			pos++;
			break;
		}
		pos++;
    6c70:	93 94       	inc	r9
    6c72:	bc cc       	rjmp	.-1672   	; 0x65ec <_Z13uhreinstellenv+0x7a>
	
	oled.clearFrame();
	rtc.ausgabedatumneu();
	rtc.ausgabezeitneu();
	rtc.RTCstart();
}
    6c74:	66 96       	adiw	r28, 0x16	; 22
    6c76:	0f b6       	in	r0, 0x3f	; 63
    6c78:	f8 94       	cli
    6c7a:	de bf       	out	0x3e, r29	; 62
    6c7c:	0f be       	out	0x3f, r0	; 63
    6c7e:	cd bf       	out	0x3d, r28	; 61
    6c80:	df 91       	pop	r29
    6c82:	cf 91       	pop	r28
    6c84:	1f 91       	pop	r17
    6c86:	0f 91       	pop	r16
    6c88:	ff 90       	pop	r15
    6c8a:	ef 90       	pop	r14
    6c8c:	df 90       	pop	r13
    6c8e:	cf 90       	pop	r12
    6c90:	bf 90       	pop	r11
    6c92:	af 90       	pop	r10
    6c94:	9f 90       	pop	r9
    6c96:	8f 90       	pop	r8
    6c98:	7f 90       	pop	r7
    6c9a:	6f 90       	pop	r6
    6c9c:	5f 90       	pop	r5
    6c9e:	4f 90       	pop	r4
    6ca0:	3f 90       	pop	r3
    6ca2:	2f 90       	pop	r2
    6ca4:	08 95       	ret

00006ca6 <_ZN13einstellungen4drawEv>:
	uint8_t tastendruck(uint8_t *tast){
		return 0;
	}
	
	//anzeige erstellen
	void draw(){
    6ca6:	cf 92       	push	r12
    6ca8:	df 92       	push	r13
    6caa:	ef 92       	push	r14
    6cac:	ff 92       	push	r15
    6cae:	0f 93       	push	r16
    6cb0:	1f 93       	push	r17
    6cb2:	cf 93       	push	r28
    6cb4:	df 93       	push	r29
    6cb6:	ec 01       	movw	r28, r24
		return 0;
	}
	
	//drawfunktion
	virtual void draw(){
		oled->clearFrame();
    6cb8:	8f 89       	ldd	r24, Y+23	; 0x17
    6cba:	98 8d       	ldd	r25, Y+24	; 0x18
    6cbc:	0e 94 b1 07 	call	0xf62	; 0xf62 <_ZN7Display10clearFrameEv>
    6cc0:	10 e0       	ldi	r17, 0x00	; 0
    6cc2:	e1 2c       	mov	r14, r1
    6cc4:	f1 2c       	mov	r15, r1
	}
	
	//draw header and overload it
	void header(){
		for(uint8_t i=0;i<8;i++){
			oled->draw_ASCI(rtc->msg_uhr[i],i*charsize,0);
    6cc6:	e9 8d       	ldd	r30, Y+25	; 0x19
    6cc8:	fa 8d       	ldd	r31, Y+26	; 0x1a
    6cca:	ee 0d       	add	r30, r14
    6ccc:	ff 1d       	adc	r31, r15
    6cce:	20 e0       	ldi	r18, 0x00	; 0
    6cd0:	41 2f       	mov	r20, r17
    6cd2:	60 81       	ld	r22, Z
    6cd4:	8f 89       	ldd	r24, Y+23	; 0x17
    6cd6:	98 8d       	ldd	r25, Y+24	; 0x18
    6cd8:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <_ZN7Display9draw_ASCIEhhh>
    6cdc:	2f ef       	ldi	r18, 0xFF	; 255
    6cde:	e2 1a       	sub	r14, r18
    6ce0:	f2 0a       	sbc	r15, r18
    6ce2:	1a 5f       	subi	r17, 0xFA	; 250
		return &name[0];
	}
	
	//draw header and overload it
	void header(){
		for(uint8_t i=0;i<8;i++){
    6ce4:	10 33       	cpi	r17, 0x30	; 48
    6ce6:	79 f7       	brne	.-34     	; 0x6cc6 <_ZN13einstellungen4drawEv+0x20>
			oled->draw_ASCI(rtc->msg_uhr[i],i*charsize,0);
		}
		buffersize=sprintf(buffer,"Bat: %i%%",Batteriestatus());
    6ce8:	0e 94 1f 22 	call	0x443e	; 0x443e <_Z14Batteriestatusv>
    6cec:	7e 01       	movw	r14, r28
    6cee:	32 e0       	ldi	r19, 0x02	; 2
    6cf0:	e3 0e       	add	r14, r19
    6cf2:	f1 1c       	adc	r15, r1
    6cf4:	28 2f       	mov	r18, r24
    6cf6:	08 2e       	mov	r0, r24
    6cf8:	00 0c       	add	r0, r0
    6cfa:	33 0b       	sbc	r19, r19
    6cfc:	3f 93       	push	r19
    6cfe:	8f 93       	push	r24
    6d00:	82 ec       	ldi	r24, 0xC2	; 194
    6d02:	91 e0       	ldi	r25, 0x01	; 1
    6d04:	9f 93       	push	r25
    6d06:	8f 93       	push	r24
    6d08:	ff 92       	push	r15
    6d0a:	ef 92       	push	r14
    6d0c:	0e 94 87 44 	call	0x890e	; 0x890e <sprintf>
    6d10:	8e 8b       	std	Y+22, r24	; 0x16
		for(uint8_t i=((SSD1306_WIDTH/charsize)-buffersize);i<(SSD1306_WIDTH/charsize);i++){
    6d12:	15 e1       	ldi	r17, 0x15	; 21
    6d14:	18 1b       	sub	r17, r24
    6d16:	0f 90       	pop	r0
    6d18:	0f 90       	pop	r0
    6d1a:	0f 90       	pop	r0
    6d1c:	0f 90       	pop	r0
    6d1e:	0f 90       	pop	r0
    6d20:	0f 90       	pop	r0
    6d22:	15 31       	cpi	r17, 0x15	; 21
    6d24:	08 f0       	brcs	.+2      	; 0x6d28 <_ZN13einstellungen4drawEv+0x82>
    6d26:	80 c1       	rjmp	.+768    	; 0x7028 <_ZN13einstellungen4drawEv+0x382>
    6d28:	01 2f       	mov	r16, r17
    6d2a:	00 0f       	add	r16, r16
    6d2c:	01 0f       	add	r16, r17
    6d2e:	00 0f       	add	r16, r16
			oled->draw_ASCI(buffer[i-((SSD1306_WIDTH/charsize)-buffersize)],i*charsize,0);
    6d30:	8e 89       	ldd	r24, Y+22	; 0x16
    6d32:	fe 01       	movw	r30, r28
    6d34:	e1 0f       	add	r30, r17
    6d36:	f1 1d       	adc	r31, r1
    6d38:	e8 0f       	add	r30, r24
    6d3a:	f1 1d       	adc	r31, r1
    6d3c:	73 97       	sbiw	r30, 0x13	; 19
    6d3e:	20 e0       	ldi	r18, 0x00	; 0
    6d40:	40 2f       	mov	r20, r16
    6d42:	60 81       	ld	r22, Z
    6d44:	8f 89       	ldd	r24, Y+23	; 0x17
    6d46:	98 8d       	ldd	r25, Y+24	; 0x18
    6d48:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <_ZN7Display9draw_ASCIEhhh>
	void header(){
		for(uint8_t i=0;i<8;i++){
			oled->draw_ASCI(rtc->msg_uhr[i],i*charsize,0);
		}
		buffersize=sprintf(buffer,"Bat: %i%%",Batteriestatus());
		for(uint8_t i=((SSD1306_WIDTH/charsize)-buffersize);i<(SSD1306_WIDTH/charsize);i++){
    6d4c:	1f 5f       	subi	r17, 0xFF	; 255
    6d4e:	0a 5f       	subi	r16, 0xFA	; 250
    6d50:	15 31       	cpi	r17, 0x15	; 21
    6d52:	71 f7       	brne	.-36     	; 0x6d30 <_ZN13einstellungen4drawEv+0x8a>
    6d54:	69 c1       	rjmp	.+722    	; 0x7028 <_ZN13einstellungen4drawEv+0x382>
	}
	
	//draw bottom and overload it
	void bottom(){
		for(uint8_t i=0;i<8;i++){
			oled->draw_ASCI(rtc->msg_dat[i],i*charsize+(SSD1306_WIDTH-bitsderrtc*charsize),7*charhighte);
    6d56:	e9 8d       	ldd	r30, Y+25	; 0x19
    6d58:	fa 8d       	ldd	r31, Y+26	; 0x1a
    6d5a:	ec 0d       	add	r30, r12
    6d5c:	fd 1d       	adc	r31, r13
    6d5e:	28 e3       	ldi	r18, 0x38	; 56
    6d60:	41 2f       	mov	r20, r17
    6d62:	60 85       	ldd	r22, Z+8	; 0x08
    6d64:	8f 89       	ldd	r24, Y+23	; 0x17
    6d66:	98 8d       	ldd	r25, Y+24	; 0x18
    6d68:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <_ZN7Display9draw_ASCIEhhh>
    6d6c:	8f ef       	ldi	r24, 0xFF	; 255
    6d6e:	c8 1a       	sub	r12, r24
    6d70:	d8 0a       	sbc	r13, r24
    6d72:	1a 5f       	subi	r17, 0xFA	; 250
		}
	}
	
	//draw bottom and overload it
	void bottom(){
		for(uint8_t i=0;i<8;i++){
    6d74:	10 38       	cpi	r17, 0x80	; 128
    6d76:	79 f7       	brne	.-34     	; 0x6d56 <_ZN13einstellungen4drawEv+0xb0>
	//anzeige erstellen
	void draw(){
		monitor::draw();
		header();
		bottom();
		if (posx==0)
    6d78:	8e a1       	ldd	r24, Y+38	; 0x26
    6d7a:	81 11       	cpse	r24, r1
    6d7c:	ae c0       	rjmp	.+348    	; 0x6eda <_ZN13einstellungen4drawEv+0x234>
		{
			buffersize=sprintf(buffer,"Zeit einstellen");
    6d7e:	80 e1       	ldi	r24, 0x10	; 16
    6d80:	e9 ee       	ldi	r30, 0xE9	; 233
    6d82:	f2 e0       	ldi	r31, 0x02	; 2
    6d84:	d7 01       	movw	r26, r14
    6d86:	01 90       	ld	r0, Z+
    6d88:	0d 92       	st	X+, r0
    6d8a:	8a 95       	dec	r24
    6d8c:	e1 f7       	brne	.-8      	; 0x6d86 <_ZN13einstellungen4drawEv+0xe0>
    6d8e:	8f e0       	ldi	r24, 0x0F	; 15
    6d90:	8e 8b       	std	Y+22, r24	; 0x16
    6d92:	0c e0       	ldi	r16, 0x0C	; 12
    6d94:	10 e0       	ldi	r17, 0x00	; 0
			for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+2*charsize,2*charhighte);}
    6d96:	fe 01       	movw	r30, r28
    6d98:	e1 0f       	add	r30, r17
    6d9a:	f1 1d       	adc	r31, r1
    6d9c:	20 e1       	ldi	r18, 0x10	; 16
    6d9e:	40 2f       	mov	r20, r16
    6da0:	62 81       	ldd	r22, Z+2	; 0x02
    6da2:	8f 89       	ldd	r24, Y+23	; 0x17
    6da4:	98 8d       	ldd	r25, Y+24	; 0x18
    6da6:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <_ZN7Display9draw_ASCIEhhh>
    6daa:	1f 5f       	subi	r17, 0xFF	; 255
    6dac:	0a 5f       	subi	r16, 0xFA	; 250
    6dae:	8e 89       	ldd	r24, Y+22	; 0x16
    6db0:	18 17       	cp	r17, r24
    6db2:	88 f3       	brcs	.-30     	; 0x6d96 <_ZN13einstellungen4drawEv+0xf0>
			buffersize=sprintf(buffer,"g bestimmen");
    6db4:	8c e0       	ldi	r24, 0x0C	; 12
    6db6:	e9 ef       	ldi	r30, 0xF9	; 249
    6db8:	f2 e0       	ldi	r31, 0x02	; 2
    6dba:	d7 01       	movw	r26, r14
    6dbc:	01 90       	ld	r0, Z+
    6dbe:	0d 92       	st	X+, r0
    6dc0:	8a 95       	dec	r24
    6dc2:	e1 f7       	brne	.-8      	; 0x6dbc <_ZN13einstellungen4drawEv+0x116>
    6dc4:	8b e0       	ldi	r24, 0x0B	; 11
    6dc6:	8e 8b       	std	Y+22, r24	; 0x16
    6dc8:	0c e0       	ldi	r16, 0x0C	; 12
    6dca:	10 e0       	ldi	r17, 0x00	; 0
			for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+2*charsize,3*charhighte);}
    6dcc:	fe 01       	movw	r30, r28
    6dce:	e1 0f       	add	r30, r17
    6dd0:	f1 1d       	adc	r31, r1
    6dd2:	28 e1       	ldi	r18, 0x18	; 24
    6dd4:	40 2f       	mov	r20, r16
    6dd6:	62 81       	ldd	r22, Z+2	; 0x02
    6dd8:	8f 89       	ldd	r24, Y+23	; 0x17
    6dda:	98 8d       	ldd	r25, Y+24	; 0x18
    6ddc:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <_ZN7Display9draw_ASCIEhhh>
    6de0:	1f 5f       	subi	r17, 0xFF	; 255
    6de2:	0a 5f       	subi	r16, 0xFA	; 250
    6de4:	8e 89       	ldd	r24, Y+22	; 0x16
    6de6:	18 17       	cp	r17, r24
    6de8:	88 f3       	brcs	.-30     	; 0x6dcc <_ZN13einstellungen4drawEv+0x126>
			buffersize=sprintf(buffer,"Versionsnummer");
    6dea:	8f e0       	ldi	r24, 0x0F	; 15
    6dec:	e5 e0       	ldi	r30, 0x05	; 5
    6dee:	f3 e0       	ldi	r31, 0x03	; 3
    6df0:	d7 01       	movw	r26, r14
    6df2:	01 90       	ld	r0, Z+
    6df4:	0d 92       	st	X+, r0
    6df6:	8a 95       	dec	r24
    6df8:	e1 f7       	brne	.-8      	; 0x6df2 <_ZN13einstellungen4drawEv+0x14c>
    6dfa:	8e e0       	ldi	r24, 0x0E	; 14
    6dfc:	8e 8b       	std	Y+22, r24	; 0x16
    6dfe:	0c e0       	ldi	r16, 0x0C	; 12
    6e00:	10 e0       	ldi	r17, 0x00	; 0
			for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+2*charsize,4*charhighte);}
    6e02:	fe 01       	movw	r30, r28
    6e04:	e1 0f       	add	r30, r17
    6e06:	f1 1d       	adc	r31, r1
    6e08:	20 e2       	ldi	r18, 0x20	; 32
    6e0a:	40 2f       	mov	r20, r16
    6e0c:	62 81       	ldd	r22, Z+2	; 0x02
    6e0e:	8f 89       	ldd	r24, Y+23	; 0x17
    6e10:	98 8d       	ldd	r25, Y+24	; 0x18
    6e12:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <_ZN7Display9draw_ASCIEhhh>
    6e16:	1f 5f       	subi	r17, 0xFF	; 255
    6e18:	0a 5f       	subi	r16, 0xFA	; 250
    6e1a:	8e 89       	ldd	r24, Y+22	; 0x16
    6e1c:	18 17       	cp	r17, r24
    6e1e:	88 f3       	brcs	.-30     	; 0x6e02 <_ZN13einstellungen4drawEv+0x15c>
			buffersize=sprintf(buffer,"Mount SD: %u", (bool)(statusreg&(1<<mounttingstat)));
    6e20:	80 91 5d 08 	lds	r24, 0x085D
    6e24:	86 95       	lsr	r24
    6e26:	81 70       	andi	r24, 0x01	; 1
    6e28:	1f 92       	push	r1
    6e2a:	8f 93       	push	r24
    6e2c:	84 e1       	ldi	r24, 0x14	; 20
    6e2e:	93 e0       	ldi	r25, 0x03	; 3
    6e30:	9f 93       	push	r25
    6e32:	8f 93       	push	r24
    6e34:	ff 92       	push	r15
    6e36:	ef 92       	push	r14
    6e38:	0e 94 87 44 	call	0x890e	; 0x890e <sprintf>
    6e3c:	8e 8b       	std	Y+22, r24	; 0x16
			for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+2*charsize,5*charhighte);}
    6e3e:	0f 90       	pop	r0
    6e40:	0f 90       	pop	r0
    6e42:	0f 90       	pop	r0
    6e44:	0f 90       	pop	r0
    6e46:	0f 90       	pop	r0
    6e48:	0f 90       	pop	r0
    6e4a:	88 23       	and	r24, r24
    6e4c:	89 f0       	breq	.+34     	; 0x6e70 <_ZN13einstellungen4drawEv+0x1ca>
    6e4e:	0c e0       	ldi	r16, 0x0C	; 12
    6e50:	10 e0       	ldi	r17, 0x00	; 0
    6e52:	fe 01       	movw	r30, r28
    6e54:	e1 0f       	add	r30, r17
    6e56:	f1 1d       	adc	r31, r1
    6e58:	28 e2       	ldi	r18, 0x28	; 40
    6e5a:	40 2f       	mov	r20, r16
    6e5c:	62 81       	ldd	r22, Z+2	; 0x02
    6e5e:	8f 89       	ldd	r24, Y+23	; 0x17
    6e60:	98 8d       	ldd	r25, Y+24	; 0x18
    6e62:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <_ZN7Display9draw_ASCIEhhh>
    6e66:	1f 5f       	subi	r17, 0xFF	; 255
    6e68:	0a 5f       	subi	r16, 0xFA	; 250
    6e6a:	8e 89       	ldd	r24, Y+22	; 0x16
    6e6c:	18 17       	cp	r17, r24
    6e6e:	88 f3       	brcs	.-30     	; 0x6e52 <_ZN13einstellungen4drawEv+0x1ac>
			buffersize=sprintf(buffer,"Logging:  %u", (bool)(statusreg&(1<<loggingstat)));
    6e70:	80 91 5d 08 	lds	r24, 0x085D
    6e74:	82 fb       	bst	r24, 2
    6e76:	88 27       	eor	r24, r24
    6e78:	80 f9       	bld	r24, 0
    6e7a:	1f 92       	push	r1
    6e7c:	8f 93       	push	r24
    6e7e:	81 e2       	ldi	r24, 0x21	; 33
    6e80:	93 e0       	ldi	r25, 0x03	; 3
    6e82:	9f 93       	push	r25
    6e84:	8f 93       	push	r24
    6e86:	ff 92       	push	r15
    6e88:	ef 92       	push	r14
    6e8a:	0e 94 87 44 	call	0x890e	; 0x890e <sprintf>
    6e8e:	8e 8b       	std	Y+22, r24	; 0x16
			for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+2*charsize,6*charhighte);}
    6e90:	0f 90       	pop	r0
    6e92:	0f 90       	pop	r0
    6e94:	0f 90       	pop	r0
    6e96:	0f 90       	pop	r0
    6e98:	0f 90       	pop	r0
    6e9a:	0f 90       	pop	r0
    6e9c:	88 23       	and	r24, r24
    6e9e:	89 f0       	breq	.+34     	; 0x6ec2 <_ZN13einstellungen4drawEv+0x21c>
    6ea0:	0c e0       	ldi	r16, 0x0C	; 12
    6ea2:	10 e0       	ldi	r17, 0x00	; 0
    6ea4:	fe 01       	movw	r30, r28
    6ea6:	e1 0f       	add	r30, r17
    6ea8:	f1 1d       	adc	r31, r1
    6eaa:	20 e3       	ldi	r18, 0x30	; 48
    6eac:	40 2f       	mov	r20, r16
    6eae:	62 81       	ldd	r22, Z+2	; 0x02
    6eb0:	8f 89       	ldd	r24, Y+23	; 0x17
    6eb2:	98 8d       	ldd	r25, Y+24	; 0x18
    6eb4:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <_ZN7Display9draw_ASCIEhhh>
    6eb8:	1f 5f       	subi	r17, 0xFF	; 255
    6eba:	0a 5f       	subi	r16, 0xFA	; 250
    6ebc:	8e 89       	ldd	r24, Y+22	; 0x16
    6ebe:	18 17       	cp	r17, r24
    6ec0:	88 f3       	brcs	.-30     	; 0x6ea4 <_ZN13einstellungen4drawEv+0x1fe>
			oled->draw_ASCI('>',0*charsize,(posy+2)*charhighte);
    6ec2:	2d a1       	ldd	r18, Y+37	; 0x25
    6ec4:	22 0f       	add	r18, r18
    6ec6:	22 0f       	add	r18, r18
    6ec8:	22 0f       	add	r18, r18
    6eca:	20 5f       	subi	r18, 0xF0	; 240
    6ecc:	40 e0       	ldi	r20, 0x00	; 0
    6ece:	6e e3       	ldi	r22, 0x3E	; 62
    6ed0:	8f 89       	ldd	r24, Y+23	; 0x17
    6ed2:	98 8d       	ldd	r25, Y+24	; 0x18
    6ed4:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <_ZN7Display9draw_ASCIEhhh>
    6ed8:	a2 c0       	rjmp	.+324    	; 0x701e <_ZN13einstellungen4drawEv+0x378>
		}
		else if (posy==0 && posx==1)
    6eda:	9d a1       	ldd	r25, Y+37	; 0x25
    6edc:	91 11       	cpse	r25, r1
    6ede:	06 c0       	rjmp	.+12     	; 0x6eec <_ZN13einstellungen4drawEv+0x246>
    6ee0:	81 30       	cpi	r24, 0x01	; 1
    6ee2:	09 f0       	breq	.+2      	; 0x6ee6 <_ZN13einstellungen4drawEv+0x240>
    6ee4:	9c c0       	rjmp	.+312    	; 0x701e <_ZN13einstellungen4drawEv+0x378>
		{
			//Uhreinstellung machen
			//noch etwas bloed, aber mit eigener Funktion
			uhreinstellen();
    6ee6:	45 db       	rcall	.-2422   	; 0x6572 <_Z13uhreinstellenv>
			posx=0;
    6ee8:	1e a2       	std	Y+38, r1	; 0x26
    6eea:	99 c0       	rjmp	.+306    	; 0x701e <_ZN13einstellungen4drawEv+0x378>
		}
		else if (posy==1 && posx==1)
    6eec:	91 30       	cpi	r25, 0x01	; 1
    6eee:	09 f0       	breq	.+2      	; 0x6ef2 <_ZN13einstellungen4drawEv+0x24c>
    6ef0:	60 c0       	rjmp	.+192    	; 0x6fb2 <_ZN13einstellungen4drawEv+0x30c>
    6ef2:	81 30       	cpi	r24, 0x01	; 1
    6ef4:	09 f0       	breq	.+2      	; 0x6ef8 <_ZN13einstellungen4drawEv+0x252>
    6ef6:	93 c0       	rjmp	.+294    	; 0x701e <_ZN13einstellungen4drawEv+0x378>
		{
			//g bestimmen einbauen
			buffersize=sprintf(buffer,"Geraet nicht bewegen");
    6ef8:	85 e1       	ldi	r24, 0x15	; 21
    6efa:	ee e2       	ldi	r30, 0x2E	; 46
    6efc:	f3 e0       	ldi	r31, 0x03	; 3
    6efe:	d7 01       	movw	r26, r14
    6f00:	01 90       	ld	r0, Z+
    6f02:	0d 92       	st	X+, r0
    6f04:	8a 95       	dec	r24
    6f06:	e1 f7       	brne	.-8      	; 0x6f00 <_ZN13einstellungen4drawEv+0x25a>
    6f08:	84 e1       	ldi	r24, 0x14	; 20
    6f0a:	8e 8b       	std	Y+22, r24	; 0x16
    6f0c:	00 e0       	ldi	r16, 0x00	; 0
    6f0e:	10 e0       	ldi	r17, 0x00	; 0
			for (uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize,2*charhighte);}
    6f10:	fe 01       	movw	r30, r28
    6f12:	e1 0f       	add	r30, r17
    6f14:	f1 1d       	adc	r31, r1
    6f16:	20 e1       	ldi	r18, 0x10	; 16
    6f18:	40 2f       	mov	r20, r16
    6f1a:	62 81       	ldd	r22, Z+2	; 0x02
    6f1c:	8f 89       	ldd	r24, Y+23	; 0x17
    6f1e:	98 8d       	ldd	r25, Y+24	; 0x18
    6f20:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <_ZN7Display9draw_ASCIEhhh>
    6f24:	1f 5f       	subi	r17, 0xFF	; 255
    6f26:	0a 5f       	subi	r16, 0xFA	; 250
    6f28:	8e 89       	ldd	r24, Y+22	; 0x16
    6f2a:	18 17       	cp	r17, r24
    6f2c:	88 f3       	brcs	.-30     	; 0x6f10 <_ZN13einstellungen4drawEv+0x26a>
			buffersize=sprintf(buffer,"* fuer start");
    6f2e:	8d e0       	ldi	r24, 0x0D	; 13
    6f30:	e3 e4       	ldi	r30, 0x43	; 67
    6f32:	f3 e0       	ldi	r31, 0x03	; 3
    6f34:	d7 01       	movw	r26, r14
    6f36:	01 90       	ld	r0, Z+
    6f38:	0d 92       	st	X+, r0
    6f3a:	8a 95       	dec	r24
    6f3c:	e1 f7       	brne	.-8      	; 0x6f36 <_ZN13einstellungen4drawEv+0x290>
    6f3e:	8c e0       	ldi	r24, 0x0C	; 12
    6f40:	8e 8b       	std	Y+22, r24	; 0x16
    6f42:	00 e0       	ldi	r16, 0x00	; 0
    6f44:	10 e0       	ldi	r17, 0x00	; 0
			for (uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize,3*charhighte);}
    6f46:	fe 01       	movw	r30, r28
    6f48:	e1 0f       	add	r30, r17
    6f4a:	f1 1d       	adc	r31, r1
    6f4c:	28 e1       	ldi	r18, 0x18	; 24
    6f4e:	40 2f       	mov	r20, r16
    6f50:	62 81       	ldd	r22, Z+2	; 0x02
    6f52:	8f 89       	ldd	r24, Y+23	; 0x17
    6f54:	98 8d       	ldd	r25, Y+24	; 0x18
    6f56:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <_ZN7Display9draw_ASCIEhhh>
    6f5a:	1f 5f       	subi	r17, 0xFF	; 255
    6f5c:	0a 5f       	subi	r16, 0xFA	; 250
    6f5e:	8e 89       	ldd	r24, Y+22	; 0x16
    6f60:	18 17       	cp	r17, r24
    6f62:	88 f3       	brcs	.-30     	; 0x6f46 <_ZN13einstellungen4drawEv+0x2a0>
			if (5<6&&5>0)
			{
				buffersize=sprintf(buffer,"Noch %i Sekunden",5);
    6f64:	1f 92       	push	r1
    6f66:	85 e0       	ldi	r24, 0x05	; 5
    6f68:	8f 93       	push	r24
    6f6a:	80 e5       	ldi	r24, 0x50	; 80
    6f6c:	93 e0       	ldi	r25, 0x03	; 3
    6f6e:	9f 93       	push	r25
    6f70:	8f 93       	push	r24
    6f72:	ff 92       	push	r15
    6f74:	ef 92       	push	r14
    6f76:	0e 94 87 44 	call	0x890e	; 0x890e <sprintf>
    6f7a:	8e 8b       	std	Y+22, r24	; 0x16
				for (uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize,5*charhighte);}
    6f7c:	0f 90       	pop	r0
    6f7e:	0f 90       	pop	r0
    6f80:	0f 90       	pop	r0
    6f82:	0f 90       	pop	r0
    6f84:	0f 90       	pop	r0
    6f86:	0f 90       	pop	r0
    6f88:	88 23       	and	r24, r24
    6f8a:	09 f4       	brne	.+2      	; 0x6f8e <_ZN13einstellungen4drawEv+0x2e8>
    6f8c:	48 c0       	rjmp	.+144    	; 0x701e <_ZN13einstellungen4drawEv+0x378>
    6f8e:	00 e0       	ldi	r16, 0x00	; 0
    6f90:	10 e0       	ldi	r17, 0x00	; 0
    6f92:	fe 01       	movw	r30, r28
    6f94:	e1 0f       	add	r30, r17
    6f96:	f1 1d       	adc	r31, r1
    6f98:	28 e2       	ldi	r18, 0x28	; 40
    6f9a:	40 2f       	mov	r20, r16
    6f9c:	62 81       	ldd	r22, Z+2	; 0x02
    6f9e:	8f 89       	ldd	r24, Y+23	; 0x17
    6fa0:	98 8d       	ldd	r25, Y+24	; 0x18
    6fa2:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <_ZN7Display9draw_ASCIEhhh>
    6fa6:	1f 5f       	subi	r17, 0xFF	; 255
    6fa8:	0a 5f       	subi	r16, 0xFA	; 250
    6faa:	8e 89       	ldd	r24, Y+22	; 0x16
    6fac:	18 17       	cp	r17, r24
    6fae:	88 f3       	brcs	.-30     	; 0x6f92 <_ZN13einstellungen4drawEv+0x2ec>
    6fb0:	36 c0       	rjmp	.+108    	; 0x701e <_ZN13einstellungen4drawEv+0x378>
			else if (5==0)
			{
				posx--;
			}
		}
		else if (posy==2 && posx==1)
    6fb2:	92 30       	cpi	r25, 0x02	; 2
    6fb4:	a1 f5       	brne	.+104    	; 0x701e <_ZN13einstellungen4drawEv+0x378>
    6fb6:	81 30       	cpi	r24, 0x01	; 1
    6fb8:	91 f5       	brne	.+100    	; 0x701e <_ZN13einstellungen4drawEv+0x378>
		{
			buffersize=sprintf(buffer,"Version: %.2f",(double)VERSIONSNUMMER);
    6fba:	80 e4       	ldi	r24, 0x40	; 64
    6fbc:	8f 93       	push	r24
    6fbe:	81 e4       	ldi	r24, 0x41	; 65
    6fc0:	8f 93       	push	r24
    6fc2:	8b ee       	ldi	r24, 0xEB	; 235
    6fc4:	8f 93       	push	r24
    6fc6:	85 e8       	ldi	r24, 0x85	; 133
    6fc8:	8f 93       	push	r24
    6fca:	84 eb       	ldi	r24, 0xB4	; 180
    6fcc:	91 e0       	ldi	r25, 0x01	; 1
    6fce:	9f 93       	push	r25
    6fd0:	8f 93       	push	r24
    6fd2:	ff 92       	push	r15
    6fd4:	ef 92       	push	r14
    6fd6:	0e 94 87 44 	call	0x890e	; 0x890e <sprintf>
    6fda:	8e 8b       	std	Y+22, r24	; 0x16
			for(uint8_t i=0; i < buffersize;i++){
    6fdc:	2d b7       	in	r18, 0x3d	; 61
    6fde:	3e b7       	in	r19, 0x3e	; 62
    6fe0:	28 5f       	subi	r18, 0xF8	; 248
    6fe2:	3f 4f       	sbci	r19, 0xFF	; 255
    6fe4:	0f b6       	in	r0, 0x3f	; 63
    6fe6:	f8 94       	cli
    6fe8:	3e bf       	out	0x3e, r19	; 62
    6fea:	0f be       	out	0x3f, r0	; 63
    6fec:	2d bf       	out	0x3d, r18	; 61
    6fee:	88 23       	and	r24, r24
    6ff0:	b1 f0       	breq	.+44     	; 0x701e <_ZN13einstellungen4drawEv+0x378>
    6ff2:	10 e0       	ldi	r17, 0x00	; 0
				oled->draw_ASCI(buffer[i],(i+2)*charsize,3.5*charhighte);
    6ff4:	21 2f       	mov	r18, r17
    6ff6:	30 e0       	ldi	r19, 0x00	; 0
    6ff8:	c9 01       	movw	r24, r18
    6ffa:	02 96       	adiw	r24, 0x02	; 2
    6ffc:	48 2f       	mov	r20, r24
    6ffe:	44 0f       	add	r20, r20
    7000:	48 0f       	add	r20, r24
    7002:	44 0f       	add	r20, r20
    7004:	fe 01       	movw	r30, r28
    7006:	e2 0f       	add	r30, r18
    7008:	f3 1f       	adc	r31, r19
    700a:	2c e1       	ldi	r18, 0x1C	; 28
    700c:	62 81       	ldd	r22, Z+2	; 0x02
    700e:	8f 89       	ldd	r24, Y+23	; 0x17
    7010:	98 8d       	ldd	r25, Y+24	; 0x18
    7012:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <_ZN7Display9draw_ASCIEhhh>
			}
		}
		else if (posy==2 && posx==1)
		{
			buffersize=sprintf(buffer,"Version: %.2f",(double)VERSIONSNUMMER);
			for(uint8_t i=0; i < buffersize;i++){
    7016:	1f 5f       	subi	r17, 0xFF	; 255
    7018:	8e 89       	ldd	r24, Y+22	; 0x16
    701a:	18 17       	cp	r17, r24
    701c:	58 f3       	brcs	.-42     	; 0x6ff4 <_ZN13einstellungen4drawEv+0x34e>
		oled->clearFrame();
	}

	//send the frame to the display
	void send(){
		oled->sendFrame();	
    701e:	8f 89       	ldd	r24, Y+23	; 0x17
    7020:	98 8d       	ldd	r25, Y+24	; 0x18
    7022:	0e 94 31 08 	call	0x1062	; 0x1062 <_ZN7Display9sendFrameEv>
    7026:	04 c0       	rjmp	.+8      	; 0x7030 <_ZN13einstellungen4drawEv+0x38a>
		return 0;
	}
	
	//drawfunktion
	virtual void draw(){
		oled->clearFrame();
    7028:	10 e5       	ldi	r17, 0x50	; 80
    702a:	c1 2c       	mov	r12, r1
    702c:	d1 2c       	mov	r13, r1
    702e:	93 ce       	rjmp	.-730    	; 0x6d56 <_ZN13einstellungen4drawEv+0xb0>
				oled->draw_ASCI(buffer[i],(i+2)*charsize,3.5*charhighte);

			}
		}
		send();	
	}
    7030:	df 91       	pop	r29
    7032:	cf 91       	pop	r28
    7034:	1f 91       	pop	r17
    7036:	0f 91       	pop	r16
    7038:	ff 90       	pop	r15
    703a:	ef 90       	pop	r14
    703c:	df 90       	pop	r13
    703e:	cf 90       	pop	r12
    7040:	08 95       	ret

00007042 <_GLOBAL__sub_I__Znwj>:
{
	free(ptr);
}

#include "RTC.h"
RTC rtc;
    7042:	8f e5       	ldi	r24, 0x5F	; 95
    7044:	9d e0       	ldi	r25, 0x0D	; 13
    7046:	ad d1       	rcall	.+858    	; 0x73a2 <_ZN3RTCC1Ev>

#include "Display.h"
Display oled;
    7048:	8e e5       	ldi	r24, 0x5E	; 94
    704a:	99 e0       	ldi	r25, 0x09	; 9
    704c:	0e 94 24 08 	call	0x1048	; 0x1048 <_ZN7DisplayC1Ev>

#include "Interface.h"
Interface Tastatur;
    7050:	82 e5       	ldi	r24, 0x52	; 82
    7052:	99 e0       	ldi	r25, 0x09	; 9
    7054:	0e 94 e4 1f 	call	0x3fc8	; 0x3fc8 <_ZN9InterfaceC1Ev>
//nicht mehr verwendet
//#include "SOUND.h"
//SOUND Lautsprecher;

#include "LSM303D.h"
LSM303D Accelerometer;
    7058:	89 e6       	ldi	r24, 0x69	; 105
    705a:	98 e0       	ldi	r25, 0x08	; 8
    705c:	0e 94 2e 21 	call	0x425c	; 0x425c <_ZN7LSM303DC1Ev>
//Kompass kompass;

#include "ADC.h"

#include "Output.h"
Output LED('B',PORTB1);
    7060:	41 e0       	ldi	r20, 0x01	; 1
    7062:	62 e4       	ldi	r22, 0x42	; 66
    7064:	83 e6       	ldi	r24, 0x63	; 99
    7066:	98 e0       	ldi	r25, 0x08	; 8
    7068:	24 d0       	rcall	.+72     	; 0x70b2 <_ZN6OutputC1Ehh>
Output Vibrationsmotor('B',PORTB2);
    706a:	42 e0       	ldi	r20, 0x02	; 2
    706c:	62 e4       	ldi	r22, 0x42	; 66
    706e:	81 e6       	ldi	r24, 0x61	; 97
    7070:	98 e0       	ldi	r25, 0x08	; 8
    7072:	1f d0       	rcall	.+62     	; 0x70b2 <_ZN6OutputC1Ehh>
Output IRLED('D',PORTD7);
    7074:	47 e0       	ldi	r20, 0x07	; 7
    7076:	64 e4       	ldi	r22, 0x44	; 68
    7078:	8f e5       	ldi	r24, 0x5F	; 95
    707a:	98 e0       	ldi	r25, 0x08	; 8
    707c:	1a c0       	rjmp	.+52     	; 0x70b2 <_ZN6OutputC1Ehh>
    707e:	08 95       	ret

00007080 <_GLOBAL__sub_D__Znwj>:
    7080:	8f e5       	ldi	r24, 0x5F	; 95
    7082:	98 e0       	ldi	r25, 0x08	; 8
    7084:	50 d0       	rcall	.+160    	; 0x7126 <_ZN6OutputD1Ev>

#include "ADC.h"

#include "Output.h"
Output LED('B',PORTB1);
Output Vibrationsmotor('B',PORTB2);
    7086:	81 e6       	ldi	r24, 0x61	; 97
    7088:	98 e0       	ldi	r25, 0x08	; 8
    708a:	4d d0       	rcall	.+154    	; 0x7126 <_ZN6OutputD1Ev>
//Kompass kompass;

#include "ADC.h"

#include "Output.h"
Output LED('B',PORTB1);
    708c:	83 e6       	ldi	r24, 0x63	; 99
    708e:	98 e0       	ldi	r25, 0x08	; 8
    7090:	4a d0       	rcall	.+148    	; 0x7126 <_ZN6OutputD1Ev>
//nicht mehr verwendet
//#include "SOUND.h"
//SOUND Lautsprecher;

#include "LSM303D.h"
LSM303D Accelerometer;
    7092:	89 e6       	ldi	r24, 0x69	; 105
    7094:	98 e0       	ldi	r25, 0x08	; 8
    7096:	0e 94 fa 20 	call	0x41f4	; 0x41f4 <_ZN7LSM303DD1Ev>

#include "Display.h"
Display oled;

#include "Interface.h"
Interface Tastatur;
    709a:	82 e5       	ldi	r24, 0x52	; 82
    709c:	99 e0       	ldi	r25, 0x09	; 9
    709e:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <_ZN9InterfaceD1Ev>

#include "RTC.h"
RTC rtc;

#include "Display.h"
Display oled;
    70a2:	8e e5       	ldi	r24, 0x5E	; 94
    70a4:	99 e0       	ldi	r25, 0x09	; 9
    70a6:	0e 94 ad 07 	call	0xf5a	; 0xf5a <_ZN7DisplayD1Ev>
{
	free(ptr);
}

#include "RTC.h"
RTC rtc;
    70aa:	8f e5       	ldi	r24, 0x5F	; 95
    70ac:	9d e0       	ldi	r25, 0x0D	; 13
    70ae:	f5 c0       	rjmp	.+490    	; 0x729a <_ZN3RTCD1Ev>
    70b0:	08 95       	ret

000070b2 <_ZN6OutputC1Ehh>:
#include "Output.h"

// default constructor
Output::Output(uint8_t Portpraefix, uint8_t Pinnumber)
{
	Pin=Pinnumber;
    70b2:	fc 01       	movw	r30, r24
    70b4:	41 83       	std	Z+1, r20	; 0x01
	Port=Portpraefix;
    70b6:	60 83       	st	Z, r22
	switch (Portpraefix)
    70b8:	62 34       	cpi	r22, 0x42	; 66
    70ba:	a1 f0       	breq	.+40     	; 0x70e4 <_ZN6OutputC1Ehh+0x32>
    70bc:	18 f4       	brcc	.+6      	; 0x70c4 <_ZN6OutputC1Ehh+0x12>
    70be:	61 34       	cpi	r22, 0x41	; 65
    70c0:	31 f0       	breq	.+12     	; 0x70ce <_ZN6OutputC1Ehh+0x1c>
    70c2:	08 95       	ret
    70c4:	63 34       	cpi	r22, 0x43	; 67
    70c6:	c9 f0       	breq	.+50     	; 0x70fa <_ZN6OutputC1Ehh+0x48>
    70c8:	64 34       	cpi	r22, 0x44	; 68
    70ca:	11 f1       	breq	.+68     	; 0x7110 <_ZN6OutputC1Ehh+0x5e>
    70cc:	08 95       	ret
	{
		case 'A':
			DDRA |= (1<<Pin);
    70ce:	21 b1       	in	r18, 0x01	; 1
    70d0:	81 e0       	ldi	r24, 0x01	; 1
    70d2:	90 e0       	ldi	r25, 0x00	; 0
    70d4:	02 c0       	rjmp	.+4      	; 0x70da <_ZN6OutputC1Ehh+0x28>
    70d6:	88 0f       	add	r24, r24
    70d8:	99 1f       	adc	r25, r25
    70da:	4a 95       	dec	r20
    70dc:	e2 f7       	brpl	.-8      	; 0x70d6 <_ZN6OutputC1Ehh+0x24>
    70de:	82 2b       	or	r24, r18
    70e0:	81 b9       	out	0x01, r24	; 1
			break;
    70e2:	08 95       	ret
		case 'B':
			DDRB |= (1<<Pin);
    70e4:	24 b1       	in	r18, 0x04	; 4
    70e6:	81 e0       	ldi	r24, 0x01	; 1
    70e8:	90 e0       	ldi	r25, 0x00	; 0
    70ea:	02 c0       	rjmp	.+4      	; 0x70f0 <_ZN6OutputC1Ehh+0x3e>
    70ec:	88 0f       	add	r24, r24
    70ee:	99 1f       	adc	r25, r25
    70f0:	4a 95       	dec	r20
    70f2:	e2 f7       	brpl	.-8      	; 0x70ec <_ZN6OutputC1Ehh+0x3a>
    70f4:	82 2b       	or	r24, r18
    70f6:	84 b9       	out	0x04, r24	; 4
			break;
    70f8:	08 95       	ret
		case 'C':
			DDRC |= (1<<Pin);
    70fa:	27 b1       	in	r18, 0x07	; 7
    70fc:	81 e0       	ldi	r24, 0x01	; 1
    70fe:	90 e0       	ldi	r25, 0x00	; 0
    7100:	02 c0       	rjmp	.+4      	; 0x7106 <_ZN6OutputC1Ehh+0x54>
    7102:	88 0f       	add	r24, r24
    7104:	99 1f       	adc	r25, r25
    7106:	4a 95       	dec	r20
    7108:	e2 f7       	brpl	.-8      	; 0x7102 <_ZN6OutputC1Ehh+0x50>
    710a:	82 2b       	or	r24, r18
    710c:	87 b9       	out	0x07, r24	; 7
			break;
    710e:	08 95       	ret
		case 'D':
			DDRD |= (1<<Pin);
    7110:	2a b1       	in	r18, 0x0a	; 10
    7112:	81 e0       	ldi	r24, 0x01	; 1
    7114:	90 e0       	ldi	r25, 0x00	; 0
    7116:	02 c0       	rjmp	.+4      	; 0x711c <_ZN6OutputC1Ehh+0x6a>
    7118:	88 0f       	add	r24, r24
    711a:	99 1f       	adc	r25, r25
    711c:	4a 95       	dec	r20
    711e:	e2 f7       	brpl	.-8      	; 0x7118 <_ZN6OutputC1Ehh+0x66>
    7120:	82 2b       	or	r24, r18
    7122:	8a b9       	out	0x0a, r24	; 10
    7124:	08 95       	ret

00007126 <_ZN6OutputD1Ev>:
			break;
	}
} //Output

// default destructor
Output::~Output()
    7126:	08 95       	ret

00007128 <_ZN6Output2onEv>:
{
} //~Output

void Output::on(){
    7128:	fc 01       	movw	r30, r24
	switch (Port)
    712a:	90 81       	ld	r25, Z
    712c:	92 34       	cpi	r25, 0x42	; 66
    712e:	a9 f0       	breq	.+42     	; 0x715a <_ZN6Output2onEv+0x32>
    7130:	18 f4       	brcc	.+6      	; 0x7138 <_ZN6Output2onEv+0x10>
    7132:	91 34       	cpi	r25, 0x41	; 65
    7134:	31 f0       	breq	.+12     	; 0x7142 <_ZN6Output2onEv+0x1a>
    7136:	08 95       	ret
    7138:	93 34       	cpi	r25, 0x43	; 67
    713a:	d9 f0       	breq	.+54     	; 0x7172 <_ZN6Output2onEv+0x4a>
    713c:	94 34       	cpi	r25, 0x44	; 68
    713e:	29 f1       	breq	.+74     	; 0x718a <_ZN6Output2onEv+0x62>
    7140:	08 95       	ret
	{
		case 'A':
			PORTA |= (1<<Pin);
    7142:	22 b1       	in	r18, 0x02	; 2
    7144:	81 e0       	ldi	r24, 0x01	; 1
    7146:	90 e0       	ldi	r25, 0x00	; 0
    7148:	01 80       	ldd	r0, Z+1	; 0x01
    714a:	02 c0       	rjmp	.+4      	; 0x7150 <_ZN6Output2onEv+0x28>
    714c:	88 0f       	add	r24, r24
    714e:	99 1f       	adc	r25, r25
    7150:	0a 94       	dec	r0
    7152:	e2 f7       	brpl	.-8      	; 0x714c <_ZN6Output2onEv+0x24>
    7154:	82 2b       	or	r24, r18
    7156:	82 b9       	out	0x02, r24	; 2
			break;
    7158:	08 95       	ret
		case 'B':
			PORTB |= (1<<Pin);
    715a:	25 b1       	in	r18, 0x05	; 5
    715c:	81 e0       	ldi	r24, 0x01	; 1
    715e:	90 e0       	ldi	r25, 0x00	; 0
    7160:	01 80       	ldd	r0, Z+1	; 0x01
    7162:	02 c0       	rjmp	.+4      	; 0x7168 <_ZN6Output2onEv+0x40>
    7164:	88 0f       	add	r24, r24
    7166:	99 1f       	adc	r25, r25
    7168:	0a 94       	dec	r0
    716a:	e2 f7       	brpl	.-8      	; 0x7164 <_ZN6Output2onEv+0x3c>
    716c:	82 2b       	or	r24, r18
    716e:	85 b9       	out	0x05, r24	; 5
			break;
    7170:	08 95       	ret
		case 'C':
			PORTC |= (1<<Pin);
    7172:	28 b1       	in	r18, 0x08	; 8
    7174:	81 e0       	ldi	r24, 0x01	; 1
    7176:	90 e0       	ldi	r25, 0x00	; 0
    7178:	01 80       	ldd	r0, Z+1	; 0x01
    717a:	02 c0       	rjmp	.+4      	; 0x7180 <_ZN6Output2onEv+0x58>
    717c:	88 0f       	add	r24, r24
    717e:	99 1f       	adc	r25, r25
    7180:	0a 94       	dec	r0
    7182:	e2 f7       	brpl	.-8      	; 0x717c <_ZN6Output2onEv+0x54>
    7184:	82 2b       	or	r24, r18
    7186:	88 b9       	out	0x08, r24	; 8
			break;
    7188:	08 95       	ret
		case 'D':
			PORTD |= (1<<Pin);
    718a:	2b b1       	in	r18, 0x0b	; 11
    718c:	81 e0       	ldi	r24, 0x01	; 1
    718e:	90 e0       	ldi	r25, 0x00	; 0
    7190:	01 80       	ldd	r0, Z+1	; 0x01
    7192:	02 c0       	rjmp	.+4      	; 0x7198 <_ZN6Output2onEv+0x70>
    7194:	88 0f       	add	r24, r24
    7196:	99 1f       	adc	r25, r25
    7198:	0a 94       	dec	r0
    719a:	e2 f7       	brpl	.-8      	; 0x7194 <_ZN6Output2onEv+0x6c>
    719c:	82 2b       	or	r24, r18
    719e:	8b b9       	out	0x0b, r24	; 11
    71a0:	08 95       	ret

000071a2 <_ZN6Output4isonEv>:
		default:
			break;
	}
}

uint8_t Output::ison(){
    71a2:	fc 01       	movw	r30, r24
	uint8_t returnparam=0;
	switch (Port)
    71a4:	90 81       	ld	r25, Z
    71a6:	92 34       	cpi	r25, 0x42	; 66
    71a8:	a1 f0       	breq	.+40     	; 0x71d2 <_ZN6Output4isonEv+0x30>
    71aa:	18 f4       	brcc	.+6      	; 0x71b2 <_ZN6Output4isonEv+0x10>
    71ac:	91 34       	cpi	r25, 0x41	; 65
    71ae:	31 f0       	breq	.+12     	; 0x71bc <_ZN6Output4isonEv+0x1a>
    71b0:	31 c0       	rjmp	.+98     	; 0x7214 <_ZN6Output4isonEv+0x72>
    71b2:	93 34       	cpi	r25, 0x43	; 67
    71b4:	c9 f0       	breq	.+50     	; 0x71e8 <_ZN6Output4isonEv+0x46>
    71b6:	94 34       	cpi	r25, 0x44	; 68
    71b8:	11 f1       	breq	.+68     	; 0x71fe <_ZN6Output4isonEv+0x5c>
    71ba:	2c c0       	rjmp	.+88     	; 0x7214 <_ZN6Output4isonEv+0x72>
	{
		case 'A':
			if ((PORTA&(1<<Pin)))
    71bc:	22 b1       	in	r18, 0x02	; 2
    71be:	30 e0       	ldi	r19, 0x00	; 0
    71c0:	c9 01       	movw	r24, r18
    71c2:	01 80       	ldd	r0, Z+1	; 0x01
    71c4:	02 c0       	rjmp	.+4      	; 0x71ca <_ZN6Output4isonEv+0x28>
    71c6:	95 95       	asr	r25
    71c8:	87 95       	ror	r24
    71ca:	0a 94       	dec	r0
    71cc:	e2 f7       	brpl	.-8      	; 0x71c6 <_ZN6Output4isonEv+0x24>
    71ce:	81 70       	andi	r24, 0x01	; 1
    71d0:	08 95       	ret
			{
				returnparam = 1;
			}
			break;
		case 'B':
			if ((PORTB&(1<<Pin)))
    71d2:	25 b1       	in	r18, 0x05	; 5
    71d4:	30 e0       	ldi	r19, 0x00	; 0
    71d6:	c9 01       	movw	r24, r18
    71d8:	01 80       	ldd	r0, Z+1	; 0x01
    71da:	02 c0       	rjmp	.+4      	; 0x71e0 <_ZN6Output4isonEv+0x3e>
    71dc:	95 95       	asr	r25
    71de:	87 95       	ror	r24
    71e0:	0a 94       	dec	r0
    71e2:	e2 f7       	brpl	.-8      	; 0x71dc <_ZN6Output4isonEv+0x3a>
    71e4:	81 70       	andi	r24, 0x01	; 1
    71e6:	08 95       	ret
			{
				returnparam = 1;
			}
			break;
		case 'C':
			if ((PORTC&(1<<Pin)))
    71e8:	28 b1       	in	r18, 0x08	; 8
    71ea:	30 e0       	ldi	r19, 0x00	; 0
    71ec:	c9 01       	movw	r24, r18
    71ee:	01 80       	ldd	r0, Z+1	; 0x01
    71f0:	02 c0       	rjmp	.+4      	; 0x71f6 <_ZN6Output4isonEv+0x54>
    71f2:	95 95       	asr	r25
    71f4:	87 95       	ror	r24
    71f6:	0a 94       	dec	r0
    71f8:	e2 f7       	brpl	.-8      	; 0x71f2 <_ZN6Output4isonEv+0x50>
    71fa:	81 70       	andi	r24, 0x01	; 1
    71fc:	08 95       	ret
			{
				returnparam = 1;
			}
			break;
		case 'D':
			if ((PORTD&(1<<Pin)))
    71fe:	2b b1       	in	r18, 0x0b	; 11
    7200:	30 e0       	ldi	r19, 0x00	; 0
    7202:	c9 01       	movw	r24, r18
    7204:	01 80       	ldd	r0, Z+1	; 0x01
    7206:	02 c0       	rjmp	.+4      	; 0x720c <_ZN6Output4isonEv+0x6a>
    7208:	95 95       	asr	r25
    720a:	87 95       	ror	r24
    720c:	0a 94       	dec	r0
    720e:	e2 f7       	brpl	.-8      	; 0x7208 <_ZN6Output4isonEv+0x66>
    7210:	81 70       	andi	r24, 0x01	; 1
    7212:	08 95       	ret
			{
				returnparam = 1;
			}
			break;
		default:
		returnparam = 2;
    7214:	82 e0       	ldi	r24, 0x02	; 2
			break;
	}
	return returnparam;
}
    7216:	08 95       	ret

00007218 <_ZN6Output3offEv>:

void Output::off(){
    7218:	fc 01       	movw	r30, r24
	switch (Port)
    721a:	90 81       	ld	r25, Z
    721c:	92 34       	cpi	r25, 0x42	; 66
    721e:	b1 f0       	breq	.+44     	; 0x724c <_ZN6Output3offEv+0x34>
    7220:	18 f4       	brcc	.+6      	; 0x7228 <_ZN6Output3offEv+0x10>
    7222:	91 34       	cpi	r25, 0x41	; 65
    7224:	31 f0       	breq	.+12     	; 0x7232 <_ZN6Output3offEv+0x1a>
    7226:	08 95       	ret
    7228:	93 34       	cpi	r25, 0x43	; 67
    722a:	e9 f0       	breq	.+58     	; 0x7266 <_ZN6Output3offEv+0x4e>
    722c:	94 34       	cpi	r25, 0x44	; 68
    722e:	41 f1       	breq	.+80     	; 0x7280 <_ZN6Output3offEv+0x68>
    7230:	08 95       	ret
	{
		case 'A':
			PORTA &= ~(1<<Pin);
    7232:	22 b1       	in	r18, 0x02	; 2
    7234:	81 e0       	ldi	r24, 0x01	; 1
    7236:	90 e0       	ldi	r25, 0x00	; 0
    7238:	01 80       	ldd	r0, Z+1	; 0x01
    723a:	02 c0       	rjmp	.+4      	; 0x7240 <_ZN6Output3offEv+0x28>
    723c:	88 0f       	add	r24, r24
    723e:	99 1f       	adc	r25, r25
    7240:	0a 94       	dec	r0
    7242:	e2 f7       	brpl	.-8      	; 0x723c <_ZN6Output3offEv+0x24>
    7244:	80 95       	com	r24
    7246:	82 23       	and	r24, r18
    7248:	82 b9       	out	0x02, r24	; 2
			break;
    724a:	08 95       	ret
		case 'B':
			PORTB &= ~(1<<Pin);
    724c:	25 b1       	in	r18, 0x05	; 5
    724e:	81 e0       	ldi	r24, 0x01	; 1
    7250:	90 e0       	ldi	r25, 0x00	; 0
    7252:	01 80       	ldd	r0, Z+1	; 0x01
    7254:	02 c0       	rjmp	.+4      	; 0x725a <_ZN6Output3offEv+0x42>
    7256:	88 0f       	add	r24, r24
    7258:	99 1f       	adc	r25, r25
    725a:	0a 94       	dec	r0
    725c:	e2 f7       	brpl	.-8      	; 0x7256 <_ZN6Output3offEv+0x3e>
    725e:	80 95       	com	r24
    7260:	82 23       	and	r24, r18
    7262:	85 b9       	out	0x05, r24	; 5
			break;
    7264:	08 95       	ret
		case 'C':
			PORTC &= ~(1<<Pin);
    7266:	28 b1       	in	r18, 0x08	; 8
    7268:	81 e0       	ldi	r24, 0x01	; 1
    726a:	90 e0       	ldi	r25, 0x00	; 0
    726c:	01 80       	ldd	r0, Z+1	; 0x01
    726e:	02 c0       	rjmp	.+4      	; 0x7274 <_ZN6Output3offEv+0x5c>
    7270:	88 0f       	add	r24, r24
    7272:	99 1f       	adc	r25, r25
    7274:	0a 94       	dec	r0
    7276:	e2 f7       	brpl	.-8      	; 0x7270 <_ZN6Output3offEv+0x58>
    7278:	80 95       	com	r24
    727a:	82 23       	and	r24, r18
    727c:	88 b9       	out	0x08, r24	; 8
			break;
    727e:	08 95       	ret
		case 'D':
			PORTD &= ~(1<<Pin);
    7280:	2b b1       	in	r18, 0x0b	; 11
    7282:	81 e0       	ldi	r24, 0x01	; 1
    7284:	90 e0       	ldi	r25, 0x00	; 0
    7286:	01 80       	ldd	r0, Z+1	; 0x01
    7288:	02 c0       	rjmp	.+4      	; 0x728e <_ZN6Output3offEv+0x76>
    728a:	88 0f       	add	r24, r24
    728c:	99 1f       	adc	r25, r25
    728e:	0a 94       	dec	r0
    7290:	e2 f7       	brpl	.-8      	; 0x728a <_ZN6Output3offEv+0x72>
    7292:	80 95       	com	r24
    7294:	82 23       	and	r24, r18
    7296:	8b b9       	out	0x0b, r24	; 11
    7298:	08 95       	ret

0000729a <_ZN3RTCD1Ev>:
	Tag=7;
	Monat=9;
	Jahr=15;
	ausgabedatumneu();
	ausgabezeitneu();
}
    729a:	08 95       	ret

0000729c <_ZN3RTC6WeckerEv>:
    729c:	fc 01       	movw	r30, r24
    729e:	80 8d       	ldd	r24, Z+24	; 0x18
    72a0:	83 ff       	sbrs	r24, 3
    72a2:	0c c0       	rjmp	.+24     	; 0x72bc <_ZN3RTC6WeckerEv+0x20>
    72a4:	84 fd       	sbrc	r24, 4
    72a6:	0a c0       	rjmp	.+20     	; 0x72bc <_ZN3RTC6WeckerEv+0x20>
    72a8:	22 8d       	ldd	r18, Z+26	; 0x1a
    72aa:	90 89       	ldd	r25, Z+16	; 0x10
    72ac:	29 13       	cpse	r18, r25
    72ae:	06 c0       	rjmp	.+12     	; 0x72bc <_ZN3RTC6WeckerEv+0x20>
    72b0:	21 8d       	ldd	r18, Z+25	; 0x19
    72b2:	91 89       	ldd	r25, Z+17	; 0x11
    72b4:	29 13       	cpse	r18, r25
    72b6:	02 c0       	rjmp	.+4      	; 0x72bc <_ZN3RTC6WeckerEv+0x20>
    72b8:	80 61       	ori	r24, 0x10	; 16
    72ba:	80 8f       	std	Z+24, r24	; 0x18
    72bc:	08 95       	ret

000072be <_ZN3RTC14ausgabezeitneuEv>:
    72be:	fc 01       	movw	r30, r24
    72c0:	20 89       	ldd	r18, Z+16	; 0x10
    72c2:	9d ec       	ldi	r25, 0xCD	; 205
    72c4:	29 9f       	mul	r18, r25
    72c6:	81 2d       	mov	r24, r1
    72c8:	11 24       	eor	r1, r1
    72ca:	86 95       	lsr	r24
    72cc:	86 95       	lsr	r24
    72ce:	86 95       	lsr	r24
    72d0:	30 e3       	ldi	r19, 0x30	; 48
    72d2:	38 0f       	add	r19, r24
    72d4:	30 83       	st	Z, r19
    72d6:	88 0f       	add	r24, r24
    72d8:	38 2f       	mov	r19, r24
    72da:	33 0f       	add	r19, r19
    72dc:	33 0f       	add	r19, r19
    72de:	83 0f       	add	r24, r19
    72e0:	28 1b       	sub	r18, r24
    72e2:	20 5d       	subi	r18, 0xD0	; 208
    72e4:	21 83       	std	Z+1, r18	; 0x01
    72e6:	21 89       	ldd	r18, Z+17	; 0x11
    72e8:	29 9f       	mul	r18, r25
    72ea:	81 2d       	mov	r24, r1
    72ec:	11 24       	eor	r1, r1
    72ee:	86 95       	lsr	r24
    72f0:	86 95       	lsr	r24
    72f2:	86 95       	lsr	r24
    72f4:	30 e3       	ldi	r19, 0x30	; 48
    72f6:	38 0f       	add	r19, r24
    72f8:	33 83       	std	Z+3, r19	; 0x03
    72fa:	88 0f       	add	r24, r24
    72fc:	38 2f       	mov	r19, r24
    72fe:	33 0f       	add	r19, r19
    7300:	33 0f       	add	r19, r19
    7302:	83 0f       	add	r24, r19
    7304:	28 1b       	sub	r18, r24
    7306:	20 5d       	subi	r18, 0xD0	; 208
    7308:	24 83       	std	Z+4, r18	; 0x04
    730a:	82 89       	ldd	r24, Z+18	; 0x12
    730c:	89 9f       	mul	r24, r25
    730e:	91 2d       	mov	r25, r1
    7310:	11 24       	eor	r1, r1
    7312:	96 95       	lsr	r25
    7314:	96 95       	lsr	r25
    7316:	96 95       	lsr	r25
    7318:	20 e3       	ldi	r18, 0x30	; 48
    731a:	29 0f       	add	r18, r25
    731c:	26 83       	std	Z+6, r18	; 0x06
    731e:	99 0f       	add	r25, r25
    7320:	29 2f       	mov	r18, r25
    7322:	22 0f       	add	r18, r18
    7324:	22 0f       	add	r18, r18
    7326:	92 0f       	add	r25, r18
    7328:	89 1b       	sub	r24, r25
    732a:	80 5d       	subi	r24, 0xD0	; 208
    732c:	87 83       	std	Z+7, r24	; 0x07
    732e:	08 95       	ret

00007330 <_ZN3RTC15ausgabedatumneuEv>:
    7330:	fc 01       	movw	r30, r24
    7332:	24 89       	ldd	r18, Z+20	; 0x14
    7334:	9d ec       	ldi	r25, 0xCD	; 205
    7336:	29 9f       	mul	r18, r25
    7338:	81 2d       	mov	r24, r1
    733a:	11 24       	eor	r1, r1
    733c:	86 95       	lsr	r24
    733e:	86 95       	lsr	r24
    7340:	86 95       	lsr	r24
    7342:	30 e3       	ldi	r19, 0x30	; 48
    7344:	38 0f       	add	r19, r24
    7346:	30 87       	std	Z+8, r19	; 0x08
    7348:	88 0f       	add	r24, r24
    734a:	38 2f       	mov	r19, r24
    734c:	33 0f       	add	r19, r19
    734e:	33 0f       	add	r19, r19
    7350:	83 0f       	add	r24, r19
    7352:	28 1b       	sub	r18, r24
    7354:	20 5d       	subi	r18, 0xD0	; 208
    7356:	21 87       	std	Z+9, r18	; 0x09
    7358:	26 89       	ldd	r18, Z+22	; 0x16
    735a:	29 9f       	mul	r18, r25
    735c:	81 2d       	mov	r24, r1
    735e:	11 24       	eor	r1, r1
    7360:	86 95       	lsr	r24
    7362:	86 95       	lsr	r24
    7364:	86 95       	lsr	r24
    7366:	30 e3       	ldi	r19, 0x30	; 48
    7368:	38 0f       	add	r19, r24
    736a:	33 87       	std	Z+11, r19	; 0x0b
    736c:	88 0f       	add	r24, r24
    736e:	38 2f       	mov	r19, r24
    7370:	33 0f       	add	r19, r19
    7372:	33 0f       	add	r19, r19
    7374:	83 0f       	add	r24, r19
    7376:	28 1b       	sub	r18, r24
    7378:	20 5d       	subi	r18, 0xD0	; 208
    737a:	24 87       	std	Z+12, r18	; 0x0c
    737c:	87 89       	ldd	r24, Z+23	; 0x17
    737e:	89 9f       	mul	r24, r25
    7380:	91 2d       	mov	r25, r1
    7382:	11 24       	eor	r1, r1
    7384:	96 95       	lsr	r25
    7386:	96 95       	lsr	r25
    7388:	96 95       	lsr	r25
    738a:	20 e3       	ldi	r18, 0x30	; 48
    738c:	29 0f       	add	r18, r25
    738e:	26 87       	std	Z+14, r18	; 0x0e
    7390:	99 0f       	add	r25, r25
    7392:	29 2f       	mov	r18, r25
    7394:	22 0f       	add	r18, r18
    7396:	22 0f       	add	r18, r18
    7398:	92 0f       	add	r25, r18
    739a:	89 1b       	sub	r24, r25
    739c:	80 5d       	subi	r24, 0xD0	; 208
    739e:	87 87       	std	Z+15, r24	; 0x0f
    73a0:	08 95       	ret

000073a2 <_ZN3RTCC1Ev>:
    73a2:	cf 93       	push	r28
    73a4:	df 93       	push	r29
    73a6:	ec 01       	movw	r28, r24
    73a8:	1a 8a       	std	Y+18, r1	; 0x12
    73aa:	1b 8a       	std	Y+19, r1	; 0x13
    73ac:	19 8a       	std	Y+17, r1	; 0x11
    73ae:	18 8a       	std	Y+16, r1	; 0x10
    73b0:	1c 8a       	std	Y+20, r1	; 0x14
    73b2:	1e 8a       	std	Y+22, r1	; 0x16
    73b4:	1f 8a       	std	Y+23, r1	; 0x17
    73b6:	1d 8a       	std	Y+21, r1	; 0x15
    73b8:	88 e2       	ldi	r24, 0x28	; 40
    73ba:	89 8f       	std	Y+25, r24	; 0x19
    73bc:	8a e0       	ldi	r24, 0x0A	; 10
    73be:	8a 8f       	std	Y+26, r24	; 0x1a
    73c0:	1c 8e       	std	Y+28, r1	; 0x1c
    73c2:	1b 8e       	std	Y+27, r1	; 0x1b
    73c4:	1e 8e       	std	Y+30, r1	; 0x1e
    73c6:	1d 8e       	std	Y+29, r1	; 0x1d
    73c8:	fe 01       	movw	r30, r28
    73ca:	ce 01       	movw	r24, r28
    73cc:	08 96       	adiw	r24, 0x08	; 8
    73ce:	dc 01       	movw	r26, r24
    73d0:	11 92       	st	Z+, r1
    73d2:	1d 92       	st	X+, r1
    73d4:	e8 17       	cp	r30, r24
    73d6:	f9 07       	cpc	r31, r25
    73d8:	d9 f7       	brne	.-10     	; 0x73d0 <_ZN3RTCC1Ev+0x2e>
    73da:	8a e3       	ldi	r24, 0x3A	; 58
    73dc:	8a 83       	std	Y+2, r24	; 0x02
    73de:	8d 83       	std	Y+5, r24	; 0x05
    73e0:	8e e2       	ldi	r24, 0x2E	; 46
    73e2:	8a 87       	std	Y+10, r24	; 0x0a
    73e4:	8d 87       	std	Y+13, r24	; 0x0d
    73e6:	ce 01       	movw	r24, r28
    73e8:	6a df       	rcall	.-300    	; 0x72be <_ZN3RTC14ausgabezeitneuEv>
    73ea:	ce 01       	movw	r24, r28
    73ec:	a1 df       	rcall	.-190    	; 0x7330 <_ZN3RTC15ausgabedatumneuEv>
    73ee:	df 91       	pop	r29
    73f0:	cf 91       	pop	r28
    73f2:	08 95       	ret

000073f4 <_ZN3RTC8kalenderEv>:
    73f4:	fc 01       	movw	r30, r24
    73f6:	26 89       	ldd	r18, Z+22	; 0x16
    73f8:	32 2f       	mov	r19, r18
    73fa:	3d 7f       	andi	r19, 0xFD	; 253
    73fc:	34 30       	cpi	r19, 0x04	; 4
    73fe:	11 f0       	breq	.+4      	; 0x7404 <_ZN3RTC8kalenderEv+0x10>
    7400:	39 30       	cpi	r19, 0x09	; 9
    7402:	91 f4       	brne	.+36     	; 0x7428 <_ZN3RTC8kalenderEv+0x34>
    7404:	fc 01       	movw	r30, r24
    7406:	34 89       	ldd	r19, Z+20	; 0x14
    7408:	3f 31       	cpi	r19, 0x1F	; 31
    740a:	b0 f1       	brcs	.+108    	; 0x7478 <_ZN3RTC8kalenderEv+0x84>
    740c:	31 e0       	ldi	r19, 0x01	; 1
    740e:	34 8b       	std	Z+20, r19	; 0x14
    7410:	2f 5f       	subi	r18, 0xFF	; 255
    7412:	2d 30       	cpi	r18, 0x0D	; 13
    7414:	10 f4       	brcc	.+4      	; 0x741a <_ZN3RTC8kalenderEv+0x26>
    7416:	26 8b       	std	Z+22, r18	; 0x16
    7418:	2f c0       	rjmp	.+94     	; 0x7478 <_ZN3RTC8kalenderEv+0x84>
    741a:	21 e0       	ldi	r18, 0x01	; 1
    741c:	fc 01       	movw	r30, r24
    741e:	26 8b       	std	Z+22, r18	; 0x16
    7420:	27 89       	ldd	r18, Z+23	; 0x17
    7422:	2f 5f       	subi	r18, 0xFF	; 255
    7424:	27 8b       	std	Z+23, r18	; 0x17
    7426:	28 c0       	rjmp	.+80     	; 0x7478 <_ZN3RTC8kalenderEv+0x84>
    7428:	22 30       	cpi	r18, 0x02	; 2
    742a:	a9 f4       	brne	.+42     	; 0x7456 <_ZN3RTC8kalenderEv+0x62>
    742c:	fc 01       	movw	r30, r24
    742e:	27 89       	ldd	r18, Z+23	; 0x17
    7430:	23 70       	andi	r18, 0x03	; 3
    7432:	41 f4       	brne	.+16     	; 0x7444 <_ZN3RTC8kalenderEv+0x50>
    7434:	24 89       	ldd	r18, Z+20	; 0x14
    7436:	2e 31       	cpi	r18, 0x1E	; 30
    7438:	f8 f0       	brcs	.+62     	; 0x7478 <_ZN3RTC8kalenderEv+0x84>
    743a:	21 e0       	ldi	r18, 0x01	; 1
    743c:	24 8b       	std	Z+20, r18	; 0x14
    743e:	23 e0       	ldi	r18, 0x03	; 3
    7440:	26 8b       	std	Z+22, r18	; 0x16
    7442:	1a c0       	rjmp	.+52     	; 0x7478 <_ZN3RTC8kalenderEv+0x84>
    7444:	fc 01       	movw	r30, r24
    7446:	24 89       	ldd	r18, Z+20	; 0x14
    7448:	2d 31       	cpi	r18, 0x1D	; 29
    744a:	b0 f0       	brcs	.+44     	; 0x7478 <_ZN3RTC8kalenderEv+0x84>
    744c:	21 e0       	ldi	r18, 0x01	; 1
    744e:	24 8b       	std	Z+20, r18	; 0x14
    7450:	23 e0       	ldi	r18, 0x03	; 3
    7452:	26 8b       	std	Z+22, r18	; 0x16
    7454:	11 c0       	rjmp	.+34     	; 0x7478 <_ZN3RTC8kalenderEv+0x84>
    7456:	fc 01       	movw	r30, r24
    7458:	34 89       	ldd	r19, Z+20	; 0x14
    745a:	30 32       	cpi	r19, 0x20	; 32
    745c:	68 f0       	brcs	.+26     	; 0x7478 <_ZN3RTC8kalenderEv+0x84>
    745e:	31 e0       	ldi	r19, 0x01	; 1
    7460:	34 8b       	std	Z+20, r19	; 0x14
    7462:	2f 5f       	subi	r18, 0xFF	; 255
    7464:	2d 30       	cpi	r18, 0x0D	; 13
    7466:	10 f4       	brcc	.+4      	; 0x746c <_ZN3RTC8kalenderEv+0x78>
    7468:	26 8b       	std	Z+22, r18	; 0x16
    746a:	06 c0       	rjmp	.+12     	; 0x7478 <_ZN3RTC8kalenderEv+0x84>
    746c:	21 e0       	ldi	r18, 0x01	; 1
    746e:	fc 01       	movw	r30, r24
    7470:	26 8b       	std	Z+22, r18	; 0x16
    7472:	27 89       	ldd	r18, Z+23	; 0x17
    7474:	2f 5f       	subi	r18, 0xFF	; 255
    7476:	27 8b       	std	Z+23, r18	; 0x17
    7478:	5b cf       	rjmp	.-330    	; 0x7330 <_ZN3RTC15ausgabedatumneuEv>
    747a:	08 95       	ret

0000747c <_ZN3RTC4zeitEv>:
    747c:	cf 93       	push	r28
    747e:	df 93       	push	r29
    7480:	ec 01       	movw	r28, r24
    7482:	8a 89       	ldd	r24, Y+18	; 0x12
    7484:	8c 53       	subi	r24, 0x3C	; 60
    7486:	8d 38       	cpi	r24, 0x8D	; 141
    7488:	c0 f4       	brcc	.+48     	; 0x74ba <_ZN3RTC4zeitEv+0x3e>
    748a:	1a 8a       	std	Y+18, r1	; 0x12
    748c:	89 89       	ldd	r24, Y+17	; 0x11
    748e:	8f 5f       	subi	r24, 0xFF	; 255
    7490:	89 8b       	std	Y+17, r24	; 0x11
    7492:	98 8d       	ldd	r25, Y+24	; 0x18
    7494:	94 60       	ori	r25, 0x04	; 4
    7496:	98 8f       	std	Y+24, r25	; 0x18
    7498:	8c 33       	cpi	r24, 0x3C	; 60
    749a:	68 f0       	brcs	.+26     	; 0x74b6 <_ZN3RTC4zeitEv+0x3a>
    749c:	19 8a       	std	Y+17, r1	; 0x11
    749e:	88 89       	ldd	r24, Y+16	; 0x10
    74a0:	8f 5f       	subi	r24, 0xFF	; 255
    74a2:	88 31       	cpi	r24, 0x18	; 24
    74a4:	10 f4       	brcc	.+4      	; 0x74aa <_ZN3RTC4zeitEv+0x2e>
    74a6:	88 8b       	std	Y+16, r24	; 0x10
    74a8:	06 c0       	rjmp	.+12     	; 0x74b6 <_ZN3RTC4zeitEv+0x3a>
    74aa:	18 8a       	std	Y+16, r1	; 0x10
    74ac:	8c 89       	ldd	r24, Y+20	; 0x14
    74ae:	8f 5f       	subi	r24, 0xFF	; 255
    74b0:	8c 8b       	std	Y+20, r24	; 0x14
    74b2:	ce 01       	movw	r24, r28
    74b4:	9f df       	rcall	.-194    	; 0x73f4 <_ZN3RTC8kalenderEv>
    74b6:	ce 01       	movw	r24, r28
    74b8:	f1 de       	rcall	.-542    	; 0x729c <_ZN3RTC6WeckerEv>
    74ba:	ce 01       	movw	r24, r28
    74bc:	00 df       	rcall	.-512    	; 0x72be <_ZN3RTC14ausgabezeitneuEv>
    74be:	88 8d       	ldd	r24, Y+24	; 0x18
    74c0:	85 ff       	sbrs	r24, 5
    74c2:	0b c0       	rjmp	.+22     	; 0x74da <_ZN3RTC4zeitEv+0x5e>
    74c4:	2b 8d       	ldd	r18, Y+27	; 0x1b
    74c6:	3c 8d       	ldd	r19, Y+28	; 0x1c
    74c8:	21 50       	subi	r18, 0x01	; 1
    74ca:	31 09       	sbc	r19, r1
    74cc:	3c 8f       	std	Y+28, r19	; 0x1c
    74ce:	2b 8f       	std	Y+27, r18	; 0x1b
    74d0:	23 2b       	or	r18, r19
    74d2:	19 f4       	brne	.+6      	; 0x74da <_ZN3RTC4zeitEv+0x5e>
    74d4:	8f 7d       	andi	r24, 0xDF	; 223
    74d6:	81 60       	ori	r24, 0x01	; 1
    74d8:	88 8f       	std	Y+24, r24	; 0x18
    74da:	88 8d       	ldd	r24, Y+24	; 0x18
    74dc:	86 ff       	sbrs	r24, 6
    74de:	05 c0       	rjmp	.+10     	; 0x74ea <_ZN3RTC4zeitEv+0x6e>
    74e0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    74e2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    74e4:	01 96       	adiw	r24, 0x01	; 1
    74e6:	9e 8f       	std	Y+30, r25	; 0x1e
    74e8:	8d 8f       	std	Y+29, r24	; 0x1d
    74ea:	80 e0       	ldi	r24, 0x00	; 0
    74ec:	df 91       	pop	r29
    74ee:	cf 91       	pop	r28
    74f0:	08 95       	ret

000074f2 <_ZN3RTC8RTCstartEv>:

void RTC::RTCstart(){
    74f2:	fc 01       	movw	r30, r24
	//Einstellungen des Ausgabebuffers
	msg_uhr[0]='0';
    74f4:	80 e3       	ldi	r24, 0x30	; 48
    74f6:	80 83       	st	Z, r24
	msg_uhr[1]='0';
    74f8:	81 83       	std	Z+1, r24	; 0x01
	msg_uhr[2]=':';
    74fa:	9a e3       	ldi	r25, 0x3A	; 58
    74fc:	92 83       	std	Z+2, r25	; 0x02
	msg_uhr[3]='0';
    74fe:	83 83       	std	Z+3, r24	; 0x03
	msg_uhr[4]='0';
    7500:	84 83       	std	Z+4, r24	; 0x04
	msg_uhr[5]=':';
    7502:	95 83       	std	Z+5, r25	; 0x05
	msg_uhr[6]='0';
    7504:	86 83       	std	Z+6, r24	; 0x06
	msg_uhr[7]='0';
    7506:	87 83       	std	Z+7, r24	; 0x07
	interupts = 0;
    7508:	10 8e       	std	Z+24, r1	; 0x18
	//Timer2 als 1ms Timer fuer die RTC
	//asynchron mit 32.768 kHz 
	TCNT2 = TIMER2RTCTIME;
    750a:	10 92 b2 00 	sts	0x00B2, r1
	ASSR |= (1<<AS2);
    750e:	e6 eb       	ldi	r30, 0xB6	; 182
    7510:	f0 e0       	ldi	r31, 0x00	; 0
    7512:	80 81       	ld	r24, Z
    7514:	80 62       	ori	r24, 0x20	; 32
    7516:	80 83       	st	Z, r24
	TIMSK2 = (1<<TOIE2);
    7518:	81 e0       	ldi	r24, 0x01	; 1
    751a:	80 93 70 00 	sts	0x0070, r24
	TCCR2B = (1<<CS22) | (1<<CS20);		//Vorteiler 256
    751e:	85 e0       	ldi	r24, 0x05	; 5
    7520:	80 93 b1 00 	sts	0x00B1, r24
    7524:	08 95       	ret

00007526 <_ZN3RTC7RTCstopEv>:
}

void RTC::RTCstop(){
	TCCR2B &= ~((1<<CS22) | (1<<CS21));
    7526:	e1 eb       	ldi	r30, 0xB1	; 177
    7528:	f0 e0       	ldi	r31, 0x00	; 0
    752a:	80 81       	ld	r24, Z
    752c:	89 7f       	andi	r24, 0xF9	; 249
    752e:	80 83       	st	Z, r24
    7530:	08 95       	ret

00007532 <__subsf3>:
    7532:	50 58       	subi	r21, 0x80	; 128

00007534 <__addsf3>:
    7534:	bb 27       	eor	r27, r27
    7536:	aa 27       	eor	r26, r26
    7538:	0e d0       	rcall	.+28     	; 0x7556 <__addsf3x>
    753a:	c1 c1       	rjmp	.+898    	; 0x78be <__fp_round>
    753c:	8a d1       	rcall	.+788    	; 0x7852 <__fp_pscA>
    753e:	30 f0       	brcs	.+12     	; 0x754c <__addsf3+0x18>
    7540:	8f d1       	rcall	.+798    	; 0x7860 <__fp_pscB>
    7542:	20 f0       	brcs	.+8      	; 0x754c <__addsf3+0x18>
    7544:	31 f4       	brne	.+12     	; 0x7552 <__addsf3+0x1e>
    7546:	9f 3f       	cpi	r25, 0xFF	; 255
    7548:	11 f4       	brne	.+4      	; 0x754e <__addsf3+0x1a>
    754a:	1e f4       	brtc	.+6      	; 0x7552 <__addsf3+0x1e>
    754c:	5a c1       	rjmp	.+692    	; 0x7802 <__fp_nan>
    754e:	0e f4       	brtc	.+2      	; 0x7552 <__addsf3+0x1e>
    7550:	e0 95       	com	r30
    7552:	e7 fb       	bst	r30, 7
    7554:	50 c1       	rjmp	.+672    	; 0x77f6 <__fp_inf>

00007556 <__addsf3x>:
    7556:	e9 2f       	mov	r30, r25
    7558:	d4 d1       	rcall	.+936    	; 0x7902 <__fp_split3>
    755a:	80 f3       	brcs	.-32     	; 0x753c <__addsf3+0x8>
    755c:	ba 17       	cp	r27, r26
    755e:	62 07       	cpc	r22, r18
    7560:	73 07       	cpc	r23, r19
    7562:	84 07       	cpc	r24, r20
    7564:	95 07       	cpc	r25, r21
    7566:	18 f0       	brcs	.+6      	; 0x756e <__addsf3x+0x18>
    7568:	71 f4       	brne	.+28     	; 0x7586 <__addsf3x+0x30>
    756a:	9e f5       	brtc	.+102    	; 0x75d2 <__addsf3x+0x7c>
    756c:	ec c1       	rjmp	.+984    	; 0x7946 <__fp_zero>
    756e:	0e f4       	brtc	.+2      	; 0x7572 <__addsf3x+0x1c>
    7570:	e0 95       	com	r30
    7572:	0b 2e       	mov	r0, r27
    7574:	ba 2f       	mov	r27, r26
    7576:	a0 2d       	mov	r26, r0
    7578:	0b 01       	movw	r0, r22
    757a:	b9 01       	movw	r22, r18
    757c:	90 01       	movw	r18, r0
    757e:	0c 01       	movw	r0, r24
    7580:	ca 01       	movw	r24, r20
    7582:	a0 01       	movw	r20, r0
    7584:	11 24       	eor	r1, r1
    7586:	ff 27       	eor	r31, r31
    7588:	59 1b       	sub	r21, r25
    758a:	99 f0       	breq	.+38     	; 0x75b2 <__addsf3x+0x5c>
    758c:	59 3f       	cpi	r21, 0xF9	; 249
    758e:	50 f4       	brcc	.+20     	; 0x75a4 <__addsf3x+0x4e>
    7590:	50 3e       	cpi	r21, 0xE0	; 224
    7592:	68 f1       	brcs	.+90     	; 0x75ee <__addsf3x+0x98>
    7594:	1a 16       	cp	r1, r26
    7596:	f0 40       	sbci	r31, 0x00	; 0
    7598:	a2 2f       	mov	r26, r18
    759a:	23 2f       	mov	r18, r19
    759c:	34 2f       	mov	r19, r20
    759e:	44 27       	eor	r20, r20
    75a0:	58 5f       	subi	r21, 0xF8	; 248
    75a2:	f3 cf       	rjmp	.-26     	; 0x758a <__addsf3x+0x34>
    75a4:	46 95       	lsr	r20
    75a6:	37 95       	ror	r19
    75a8:	27 95       	ror	r18
    75aa:	a7 95       	ror	r26
    75ac:	f0 40       	sbci	r31, 0x00	; 0
    75ae:	53 95       	inc	r21
    75b0:	c9 f7       	brne	.-14     	; 0x75a4 <__addsf3x+0x4e>
    75b2:	7e f4       	brtc	.+30     	; 0x75d2 <__addsf3x+0x7c>
    75b4:	1f 16       	cp	r1, r31
    75b6:	ba 0b       	sbc	r27, r26
    75b8:	62 0b       	sbc	r22, r18
    75ba:	73 0b       	sbc	r23, r19
    75bc:	84 0b       	sbc	r24, r20
    75be:	ba f0       	brmi	.+46     	; 0x75ee <__addsf3x+0x98>
    75c0:	91 50       	subi	r25, 0x01	; 1
    75c2:	a1 f0       	breq	.+40     	; 0x75ec <__addsf3x+0x96>
    75c4:	ff 0f       	add	r31, r31
    75c6:	bb 1f       	adc	r27, r27
    75c8:	66 1f       	adc	r22, r22
    75ca:	77 1f       	adc	r23, r23
    75cc:	88 1f       	adc	r24, r24
    75ce:	c2 f7       	brpl	.-16     	; 0x75c0 <__addsf3x+0x6a>
    75d0:	0e c0       	rjmp	.+28     	; 0x75ee <__addsf3x+0x98>
    75d2:	ba 0f       	add	r27, r26
    75d4:	62 1f       	adc	r22, r18
    75d6:	73 1f       	adc	r23, r19
    75d8:	84 1f       	adc	r24, r20
    75da:	48 f4       	brcc	.+18     	; 0x75ee <__addsf3x+0x98>
    75dc:	87 95       	ror	r24
    75de:	77 95       	ror	r23
    75e0:	67 95       	ror	r22
    75e2:	b7 95       	ror	r27
    75e4:	f7 95       	ror	r31
    75e6:	9e 3f       	cpi	r25, 0xFE	; 254
    75e8:	08 f0       	brcs	.+2      	; 0x75ec <__addsf3x+0x96>
    75ea:	b3 cf       	rjmp	.-154    	; 0x7552 <__addsf3+0x1e>
    75ec:	93 95       	inc	r25
    75ee:	88 0f       	add	r24, r24
    75f0:	08 f0       	brcs	.+2      	; 0x75f4 <__addsf3x+0x9e>
    75f2:	99 27       	eor	r25, r25
    75f4:	ee 0f       	add	r30, r30
    75f6:	97 95       	ror	r25
    75f8:	87 95       	ror	r24
    75fa:	08 95       	ret

000075fc <cos>:
    75fc:	39 d1       	rcall	.+626    	; 0x7870 <__fp_rempio2>
    75fe:	e3 95       	inc	r30
    7600:	6f c1       	rjmp	.+734    	; 0x78e0 <__fp_sinus>

00007602 <__divsf3>:
    7602:	0c d0       	rcall	.+24     	; 0x761c <__divsf3x>
    7604:	5c c1       	rjmp	.+696    	; 0x78be <__fp_round>
    7606:	2c d1       	rcall	.+600    	; 0x7860 <__fp_pscB>
    7608:	40 f0       	brcs	.+16     	; 0x761a <__divsf3+0x18>
    760a:	23 d1       	rcall	.+582    	; 0x7852 <__fp_pscA>
    760c:	30 f0       	brcs	.+12     	; 0x761a <__divsf3+0x18>
    760e:	21 f4       	brne	.+8      	; 0x7618 <__divsf3+0x16>
    7610:	5f 3f       	cpi	r21, 0xFF	; 255
    7612:	19 f0       	breq	.+6      	; 0x761a <__divsf3+0x18>
    7614:	f0 c0       	rjmp	.+480    	; 0x77f6 <__fp_inf>
    7616:	51 11       	cpse	r21, r1
    7618:	97 c1       	rjmp	.+814    	; 0x7948 <__fp_szero>
    761a:	f3 c0       	rjmp	.+486    	; 0x7802 <__fp_nan>

0000761c <__divsf3x>:
    761c:	72 d1       	rcall	.+740    	; 0x7902 <__fp_split3>
    761e:	98 f3       	brcs	.-26     	; 0x7606 <__divsf3+0x4>

00007620 <__divsf3_pse>:
    7620:	99 23       	and	r25, r25
    7622:	c9 f3       	breq	.-14     	; 0x7616 <__divsf3+0x14>
    7624:	55 23       	and	r21, r21
    7626:	b1 f3       	breq	.-20     	; 0x7614 <__divsf3+0x12>
    7628:	95 1b       	sub	r25, r21
    762a:	55 0b       	sbc	r21, r21
    762c:	bb 27       	eor	r27, r27
    762e:	aa 27       	eor	r26, r26
    7630:	62 17       	cp	r22, r18
    7632:	73 07       	cpc	r23, r19
    7634:	84 07       	cpc	r24, r20
    7636:	38 f0       	brcs	.+14     	; 0x7646 <__divsf3_pse+0x26>
    7638:	9f 5f       	subi	r25, 0xFF	; 255
    763a:	5f 4f       	sbci	r21, 0xFF	; 255
    763c:	22 0f       	add	r18, r18
    763e:	33 1f       	adc	r19, r19
    7640:	44 1f       	adc	r20, r20
    7642:	aa 1f       	adc	r26, r26
    7644:	a9 f3       	breq	.-22     	; 0x7630 <__divsf3_pse+0x10>
    7646:	33 d0       	rcall	.+102    	; 0x76ae <__divsf3_pse+0x8e>
    7648:	0e 2e       	mov	r0, r30
    764a:	3a f0       	brmi	.+14     	; 0x765a <__divsf3_pse+0x3a>
    764c:	e0 e8       	ldi	r30, 0x80	; 128
    764e:	30 d0       	rcall	.+96     	; 0x76b0 <__divsf3_pse+0x90>
    7650:	91 50       	subi	r25, 0x01	; 1
    7652:	50 40       	sbci	r21, 0x00	; 0
    7654:	e6 95       	lsr	r30
    7656:	00 1c       	adc	r0, r0
    7658:	ca f7       	brpl	.-14     	; 0x764c <__divsf3_pse+0x2c>
    765a:	29 d0       	rcall	.+82     	; 0x76ae <__divsf3_pse+0x8e>
    765c:	fe 2f       	mov	r31, r30
    765e:	27 d0       	rcall	.+78     	; 0x76ae <__divsf3_pse+0x8e>
    7660:	66 0f       	add	r22, r22
    7662:	77 1f       	adc	r23, r23
    7664:	88 1f       	adc	r24, r24
    7666:	bb 1f       	adc	r27, r27
    7668:	26 17       	cp	r18, r22
    766a:	37 07       	cpc	r19, r23
    766c:	48 07       	cpc	r20, r24
    766e:	ab 07       	cpc	r26, r27
    7670:	b0 e8       	ldi	r27, 0x80	; 128
    7672:	09 f0       	breq	.+2      	; 0x7676 <__divsf3_pse+0x56>
    7674:	bb 0b       	sbc	r27, r27
    7676:	80 2d       	mov	r24, r0
    7678:	bf 01       	movw	r22, r30
    767a:	ff 27       	eor	r31, r31
    767c:	93 58       	subi	r25, 0x83	; 131
    767e:	5f 4f       	sbci	r21, 0xFF	; 255
    7680:	2a f0       	brmi	.+10     	; 0x768c <__divsf3_pse+0x6c>
    7682:	9e 3f       	cpi	r25, 0xFE	; 254
    7684:	51 05       	cpc	r21, r1
    7686:	68 f0       	brcs	.+26     	; 0x76a2 <__divsf3_pse+0x82>
    7688:	b6 c0       	rjmp	.+364    	; 0x77f6 <__fp_inf>
    768a:	5e c1       	rjmp	.+700    	; 0x7948 <__fp_szero>
    768c:	5f 3f       	cpi	r21, 0xFF	; 255
    768e:	ec f3       	brlt	.-6      	; 0x768a <__divsf3_pse+0x6a>
    7690:	98 3e       	cpi	r25, 0xE8	; 232
    7692:	dc f3       	brlt	.-10     	; 0x768a <__divsf3_pse+0x6a>
    7694:	86 95       	lsr	r24
    7696:	77 95       	ror	r23
    7698:	67 95       	ror	r22
    769a:	b7 95       	ror	r27
    769c:	f7 95       	ror	r31
    769e:	9f 5f       	subi	r25, 0xFF	; 255
    76a0:	c9 f7       	brne	.-14     	; 0x7694 <__divsf3_pse+0x74>
    76a2:	88 0f       	add	r24, r24
    76a4:	91 1d       	adc	r25, r1
    76a6:	96 95       	lsr	r25
    76a8:	87 95       	ror	r24
    76aa:	97 f9       	bld	r25, 7
    76ac:	08 95       	ret
    76ae:	e1 e0       	ldi	r30, 0x01	; 1
    76b0:	66 0f       	add	r22, r22
    76b2:	77 1f       	adc	r23, r23
    76b4:	88 1f       	adc	r24, r24
    76b6:	bb 1f       	adc	r27, r27
    76b8:	62 17       	cp	r22, r18
    76ba:	73 07       	cpc	r23, r19
    76bc:	84 07       	cpc	r24, r20
    76be:	ba 07       	cpc	r27, r26
    76c0:	20 f0       	brcs	.+8      	; 0x76ca <__divsf3_pse+0xaa>
    76c2:	62 1b       	sub	r22, r18
    76c4:	73 0b       	sbc	r23, r19
    76c6:	84 0b       	sbc	r24, r20
    76c8:	ba 0b       	sbc	r27, r26
    76ca:	ee 1f       	adc	r30, r30
    76cc:	88 f7       	brcc	.-30     	; 0x76b0 <__divsf3_pse+0x90>
    76ce:	e0 95       	com	r30
    76d0:	08 95       	ret

000076d2 <__fixsfsi>:
    76d2:	04 d0       	rcall	.+8      	; 0x76dc <__fixunssfsi>
    76d4:	68 94       	set
    76d6:	b1 11       	cpse	r27, r1
    76d8:	37 c1       	rjmp	.+622    	; 0x7948 <__fp_szero>
    76da:	08 95       	ret

000076dc <__fixunssfsi>:
    76dc:	1a d1       	rcall	.+564    	; 0x7912 <__fp_splitA>
    76de:	88 f0       	brcs	.+34     	; 0x7702 <__fixunssfsi+0x26>
    76e0:	9f 57       	subi	r25, 0x7F	; 127
    76e2:	90 f0       	brcs	.+36     	; 0x7708 <__fixunssfsi+0x2c>
    76e4:	b9 2f       	mov	r27, r25
    76e6:	99 27       	eor	r25, r25
    76e8:	b7 51       	subi	r27, 0x17	; 23
    76ea:	a0 f0       	brcs	.+40     	; 0x7714 <__fixunssfsi+0x38>
    76ec:	d1 f0       	breq	.+52     	; 0x7722 <__fixunssfsi+0x46>
    76ee:	66 0f       	add	r22, r22
    76f0:	77 1f       	adc	r23, r23
    76f2:	88 1f       	adc	r24, r24
    76f4:	99 1f       	adc	r25, r25
    76f6:	1a f0       	brmi	.+6      	; 0x76fe <__fixunssfsi+0x22>
    76f8:	ba 95       	dec	r27
    76fa:	c9 f7       	brne	.-14     	; 0x76ee <__fixunssfsi+0x12>
    76fc:	12 c0       	rjmp	.+36     	; 0x7722 <__fixunssfsi+0x46>
    76fe:	b1 30       	cpi	r27, 0x01	; 1
    7700:	81 f0       	breq	.+32     	; 0x7722 <__fixunssfsi+0x46>
    7702:	21 d1       	rcall	.+578    	; 0x7946 <__fp_zero>
    7704:	b1 e0       	ldi	r27, 0x01	; 1
    7706:	08 95       	ret
    7708:	1e c1       	rjmp	.+572    	; 0x7946 <__fp_zero>
    770a:	67 2f       	mov	r22, r23
    770c:	78 2f       	mov	r23, r24
    770e:	88 27       	eor	r24, r24
    7710:	b8 5f       	subi	r27, 0xF8	; 248
    7712:	39 f0       	breq	.+14     	; 0x7722 <__fixunssfsi+0x46>
    7714:	b9 3f       	cpi	r27, 0xF9	; 249
    7716:	cc f3       	brlt	.-14     	; 0x770a <__fixunssfsi+0x2e>
    7718:	86 95       	lsr	r24
    771a:	77 95       	ror	r23
    771c:	67 95       	ror	r22
    771e:	b3 95       	inc	r27
    7720:	d9 f7       	brne	.-10     	; 0x7718 <__fixunssfsi+0x3c>
    7722:	3e f4       	brtc	.+14     	; 0x7732 <__fixunssfsi+0x56>
    7724:	90 95       	com	r25
    7726:	80 95       	com	r24
    7728:	70 95       	com	r23
    772a:	61 95       	neg	r22
    772c:	7f 4f       	sbci	r23, 0xFF	; 255
    772e:	8f 4f       	sbci	r24, 0xFF	; 255
    7730:	9f 4f       	sbci	r25, 0xFF	; 255
    7732:	08 95       	ret

00007734 <__floatunsisf>:
    7734:	e8 94       	clt
    7736:	09 c0       	rjmp	.+18     	; 0x774a <__floatsisf+0x12>

00007738 <__floatsisf>:
    7738:	97 fb       	bst	r25, 7
    773a:	3e f4       	brtc	.+14     	; 0x774a <__floatsisf+0x12>
    773c:	90 95       	com	r25
    773e:	80 95       	com	r24
    7740:	70 95       	com	r23
    7742:	61 95       	neg	r22
    7744:	7f 4f       	sbci	r23, 0xFF	; 255
    7746:	8f 4f       	sbci	r24, 0xFF	; 255
    7748:	9f 4f       	sbci	r25, 0xFF	; 255
    774a:	99 23       	and	r25, r25
    774c:	a9 f0       	breq	.+42     	; 0x7778 <__floatsisf+0x40>
    774e:	f9 2f       	mov	r31, r25
    7750:	96 e9       	ldi	r25, 0x96	; 150
    7752:	bb 27       	eor	r27, r27
    7754:	93 95       	inc	r25
    7756:	f6 95       	lsr	r31
    7758:	87 95       	ror	r24
    775a:	77 95       	ror	r23
    775c:	67 95       	ror	r22
    775e:	b7 95       	ror	r27
    7760:	f1 11       	cpse	r31, r1
    7762:	f8 cf       	rjmp	.-16     	; 0x7754 <__floatsisf+0x1c>
    7764:	fa f4       	brpl	.+62     	; 0x77a4 <__floatsisf+0x6c>
    7766:	bb 0f       	add	r27, r27
    7768:	11 f4       	brne	.+4      	; 0x776e <__floatsisf+0x36>
    776a:	60 ff       	sbrs	r22, 0
    776c:	1b c0       	rjmp	.+54     	; 0x77a4 <__floatsisf+0x6c>
    776e:	6f 5f       	subi	r22, 0xFF	; 255
    7770:	7f 4f       	sbci	r23, 0xFF	; 255
    7772:	8f 4f       	sbci	r24, 0xFF	; 255
    7774:	9f 4f       	sbci	r25, 0xFF	; 255
    7776:	16 c0       	rjmp	.+44     	; 0x77a4 <__floatsisf+0x6c>
    7778:	88 23       	and	r24, r24
    777a:	11 f0       	breq	.+4      	; 0x7780 <__floatsisf+0x48>
    777c:	96 e9       	ldi	r25, 0x96	; 150
    777e:	11 c0       	rjmp	.+34     	; 0x77a2 <__floatsisf+0x6a>
    7780:	77 23       	and	r23, r23
    7782:	21 f0       	breq	.+8      	; 0x778c <__floatsisf+0x54>
    7784:	9e e8       	ldi	r25, 0x8E	; 142
    7786:	87 2f       	mov	r24, r23
    7788:	76 2f       	mov	r23, r22
    778a:	05 c0       	rjmp	.+10     	; 0x7796 <__floatsisf+0x5e>
    778c:	66 23       	and	r22, r22
    778e:	71 f0       	breq	.+28     	; 0x77ac <__floatsisf+0x74>
    7790:	96 e8       	ldi	r25, 0x86	; 134
    7792:	86 2f       	mov	r24, r22
    7794:	70 e0       	ldi	r23, 0x00	; 0
    7796:	60 e0       	ldi	r22, 0x00	; 0
    7798:	2a f0       	brmi	.+10     	; 0x77a4 <__floatsisf+0x6c>
    779a:	9a 95       	dec	r25
    779c:	66 0f       	add	r22, r22
    779e:	77 1f       	adc	r23, r23
    77a0:	88 1f       	adc	r24, r24
    77a2:	da f7       	brpl	.-10     	; 0x779a <__floatsisf+0x62>
    77a4:	88 0f       	add	r24, r24
    77a6:	96 95       	lsr	r25
    77a8:	87 95       	ror	r24
    77aa:	97 f9       	bld	r25, 7
    77ac:	08 95       	ret

000077ae <__fp_cmp>:
    77ae:	99 0f       	add	r25, r25
    77b0:	00 08       	sbc	r0, r0
    77b2:	55 0f       	add	r21, r21
    77b4:	aa 0b       	sbc	r26, r26
    77b6:	e0 e8       	ldi	r30, 0x80	; 128
    77b8:	fe ef       	ldi	r31, 0xFE	; 254
    77ba:	16 16       	cp	r1, r22
    77bc:	17 06       	cpc	r1, r23
    77be:	e8 07       	cpc	r30, r24
    77c0:	f9 07       	cpc	r31, r25
    77c2:	c0 f0       	brcs	.+48     	; 0x77f4 <__fp_cmp+0x46>
    77c4:	12 16       	cp	r1, r18
    77c6:	13 06       	cpc	r1, r19
    77c8:	e4 07       	cpc	r30, r20
    77ca:	f5 07       	cpc	r31, r21
    77cc:	98 f0       	brcs	.+38     	; 0x77f4 <__fp_cmp+0x46>
    77ce:	62 1b       	sub	r22, r18
    77d0:	73 0b       	sbc	r23, r19
    77d2:	84 0b       	sbc	r24, r20
    77d4:	95 0b       	sbc	r25, r21
    77d6:	39 f4       	brne	.+14     	; 0x77e6 <__fp_cmp+0x38>
    77d8:	0a 26       	eor	r0, r26
    77da:	61 f0       	breq	.+24     	; 0x77f4 <__fp_cmp+0x46>
    77dc:	23 2b       	or	r18, r19
    77de:	24 2b       	or	r18, r20
    77e0:	25 2b       	or	r18, r21
    77e2:	21 f4       	brne	.+8      	; 0x77ec <__fp_cmp+0x3e>
    77e4:	08 95       	ret
    77e6:	0a 26       	eor	r0, r26
    77e8:	09 f4       	brne	.+2      	; 0x77ec <__fp_cmp+0x3e>
    77ea:	a1 40       	sbci	r26, 0x01	; 1
    77ec:	a6 95       	lsr	r26
    77ee:	8f ef       	ldi	r24, 0xFF	; 255
    77f0:	81 1d       	adc	r24, r1
    77f2:	81 1d       	adc	r24, r1
    77f4:	08 95       	ret

000077f6 <__fp_inf>:
    77f6:	97 f9       	bld	r25, 7
    77f8:	9f 67       	ori	r25, 0x7F	; 127
    77fa:	80 e8       	ldi	r24, 0x80	; 128
    77fc:	70 e0       	ldi	r23, 0x00	; 0
    77fe:	60 e0       	ldi	r22, 0x00	; 0
    7800:	08 95       	ret

00007802 <__fp_nan>:
    7802:	9f ef       	ldi	r25, 0xFF	; 255
    7804:	80 ec       	ldi	r24, 0xC0	; 192
    7806:	08 95       	ret

00007808 <__fp_powser>:
    7808:	df 93       	push	r29
    780a:	cf 93       	push	r28
    780c:	1f 93       	push	r17
    780e:	0f 93       	push	r16
    7810:	ff 92       	push	r15
    7812:	ef 92       	push	r14
    7814:	df 92       	push	r13
    7816:	7b 01       	movw	r14, r22
    7818:	8c 01       	movw	r16, r24
    781a:	68 94       	set
    781c:	05 c0       	rjmp	.+10     	; 0x7828 <__fp_powser+0x20>
    781e:	da 2e       	mov	r13, r26
    7820:	ef 01       	movw	r28, r30
    7822:	af d0       	rcall	.+350    	; 0x7982 <__mulsf3x>
    7824:	fe 01       	movw	r30, r28
    7826:	e8 94       	clt
    7828:	a5 91       	lpm	r26, Z+
    782a:	25 91       	lpm	r18, Z+
    782c:	35 91       	lpm	r19, Z+
    782e:	45 91       	lpm	r20, Z+
    7830:	55 91       	lpm	r21, Z+
    7832:	ae f3       	brts	.-22     	; 0x781e <__fp_powser+0x16>
    7834:	ef 01       	movw	r28, r30
    7836:	8f de       	rcall	.-738    	; 0x7556 <__addsf3x>
    7838:	fe 01       	movw	r30, r28
    783a:	97 01       	movw	r18, r14
    783c:	a8 01       	movw	r20, r16
    783e:	da 94       	dec	r13
    7840:	79 f7       	brne	.-34     	; 0x7820 <__fp_powser+0x18>
    7842:	df 90       	pop	r13
    7844:	ef 90       	pop	r14
    7846:	ff 90       	pop	r15
    7848:	0f 91       	pop	r16
    784a:	1f 91       	pop	r17
    784c:	cf 91       	pop	r28
    784e:	df 91       	pop	r29
    7850:	08 95       	ret

00007852 <__fp_pscA>:
    7852:	00 24       	eor	r0, r0
    7854:	0a 94       	dec	r0
    7856:	16 16       	cp	r1, r22
    7858:	17 06       	cpc	r1, r23
    785a:	18 06       	cpc	r1, r24
    785c:	09 06       	cpc	r0, r25
    785e:	08 95       	ret

00007860 <__fp_pscB>:
    7860:	00 24       	eor	r0, r0
    7862:	0a 94       	dec	r0
    7864:	12 16       	cp	r1, r18
    7866:	13 06       	cpc	r1, r19
    7868:	14 06       	cpc	r1, r20
    786a:	05 06       	cpc	r0, r21
    786c:	08 95       	ret
    786e:	c9 cf       	rjmp	.-110    	; 0x7802 <__fp_nan>

00007870 <__fp_rempio2>:
    7870:	50 d0       	rcall	.+160    	; 0x7912 <__fp_splitA>
    7872:	e8 f3       	brcs	.-6      	; 0x786e <__fp_pscB+0xe>
    7874:	e8 94       	clt
    7876:	e0 e0       	ldi	r30, 0x00	; 0
    7878:	bb 27       	eor	r27, r27
    787a:	9f 57       	subi	r25, 0x7F	; 127
    787c:	f0 f0       	brcs	.+60     	; 0x78ba <__fp_rempio2+0x4a>
    787e:	2a ed       	ldi	r18, 0xDA	; 218
    7880:	3f e0       	ldi	r19, 0x0F	; 15
    7882:	49 ec       	ldi	r20, 0xC9	; 201
    7884:	06 c0       	rjmp	.+12     	; 0x7892 <__fp_rempio2+0x22>
    7886:	ee 0f       	add	r30, r30
    7888:	bb 0f       	add	r27, r27
    788a:	66 1f       	adc	r22, r22
    788c:	77 1f       	adc	r23, r23
    788e:	88 1f       	adc	r24, r24
    7890:	28 f0       	brcs	.+10     	; 0x789c <__fp_rempio2+0x2c>
    7892:	b2 3a       	cpi	r27, 0xA2	; 162
    7894:	62 07       	cpc	r22, r18
    7896:	73 07       	cpc	r23, r19
    7898:	84 07       	cpc	r24, r20
    789a:	28 f0       	brcs	.+10     	; 0x78a6 <__fp_rempio2+0x36>
    789c:	b2 5a       	subi	r27, 0xA2	; 162
    789e:	62 0b       	sbc	r22, r18
    78a0:	73 0b       	sbc	r23, r19
    78a2:	84 0b       	sbc	r24, r20
    78a4:	e3 95       	inc	r30
    78a6:	9a 95       	dec	r25
    78a8:	72 f7       	brpl	.-36     	; 0x7886 <__fp_rempio2+0x16>
    78aa:	80 38       	cpi	r24, 0x80	; 128
    78ac:	30 f4       	brcc	.+12     	; 0x78ba <__fp_rempio2+0x4a>
    78ae:	9a 95       	dec	r25
    78b0:	bb 0f       	add	r27, r27
    78b2:	66 1f       	adc	r22, r22
    78b4:	77 1f       	adc	r23, r23
    78b6:	88 1f       	adc	r24, r24
    78b8:	d2 f7       	brpl	.-12     	; 0x78ae <__fp_rempio2+0x3e>
    78ba:	90 48       	sbci	r25, 0x80	; 128
    78bc:	3e c1       	rjmp	.+636    	; 0x7b3a <__fp_mpack_finite>

000078be <__fp_round>:
    78be:	09 2e       	mov	r0, r25
    78c0:	03 94       	inc	r0
    78c2:	00 0c       	add	r0, r0
    78c4:	11 f4       	brne	.+4      	; 0x78ca <__fp_round+0xc>
    78c6:	88 23       	and	r24, r24
    78c8:	52 f0       	brmi	.+20     	; 0x78de <__fp_round+0x20>
    78ca:	bb 0f       	add	r27, r27
    78cc:	40 f4       	brcc	.+16     	; 0x78de <__fp_round+0x20>
    78ce:	bf 2b       	or	r27, r31
    78d0:	11 f4       	brne	.+4      	; 0x78d6 <__fp_round+0x18>
    78d2:	60 ff       	sbrs	r22, 0
    78d4:	04 c0       	rjmp	.+8      	; 0x78de <__fp_round+0x20>
    78d6:	6f 5f       	subi	r22, 0xFF	; 255
    78d8:	7f 4f       	sbci	r23, 0xFF	; 255
    78da:	8f 4f       	sbci	r24, 0xFF	; 255
    78dc:	9f 4f       	sbci	r25, 0xFF	; 255
    78de:	08 95       	ret

000078e0 <__fp_sinus>:
    78e0:	ef 93       	push	r30
    78e2:	e0 ff       	sbrs	r30, 0
    78e4:	06 c0       	rjmp	.+12     	; 0x78f2 <__fp_sinus+0x12>
    78e6:	a2 ea       	ldi	r26, 0xA2	; 162
    78e8:	2a ed       	ldi	r18, 0xDA	; 218
    78ea:	3f e0       	ldi	r19, 0x0F	; 15
    78ec:	49 ec       	ldi	r20, 0xC9	; 201
    78ee:	5f eb       	ldi	r21, 0xBF	; 191
    78f0:	32 de       	rcall	.-924    	; 0x7556 <__addsf3x>
    78f2:	e5 df       	rcall	.-54     	; 0x78be <__fp_round>
    78f4:	0f 90       	pop	r0
    78f6:	03 94       	inc	r0
    78f8:	01 fc       	sbrc	r0, 1
    78fa:	90 58       	subi	r25, 0x80	; 128
    78fc:	e6 ef       	ldi	r30, 0xF6	; 246
    78fe:	f1 e0       	ldi	r31, 0x01	; 1
    7900:	28 c1       	rjmp	.+592    	; 0x7b52 <__fp_powsodd>

00007902 <__fp_split3>:
    7902:	57 fd       	sbrc	r21, 7
    7904:	90 58       	subi	r25, 0x80	; 128
    7906:	44 0f       	add	r20, r20
    7908:	55 1f       	adc	r21, r21
    790a:	59 f0       	breq	.+22     	; 0x7922 <__fp_splitA+0x10>
    790c:	5f 3f       	cpi	r21, 0xFF	; 255
    790e:	71 f0       	breq	.+28     	; 0x792c <__fp_splitA+0x1a>
    7910:	47 95       	ror	r20

00007912 <__fp_splitA>:
    7912:	88 0f       	add	r24, r24
    7914:	97 fb       	bst	r25, 7
    7916:	99 1f       	adc	r25, r25
    7918:	61 f0       	breq	.+24     	; 0x7932 <__fp_splitA+0x20>
    791a:	9f 3f       	cpi	r25, 0xFF	; 255
    791c:	79 f0       	breq	.+30     	; 0x793c <__fp_splitA+0x2a>
    791e:	87 95       	ror	r24
    7920:	08 95       	ret
    7922:	12 16       	cp	r1, r18
    7924:	13 06       	cpc	r1, r19
    7926:	14 06       	cpc	r1, r20
    7928:	55 1f       	adc	r21, r21
    792a:	f2 cf       	rjmp	.-28     	; 0x7910 <__fp_split3+0xe>
    792c:	46 95       	lsr	r20
    792e:	f1 df       	rcall	.-30     	; 0x7912 <__fp_splitA>
    7930:	08 c0       	rjmp	.+16     	; 0x7942 <__fp_splitA+0x30>
    7932:	16 16       	cp	r1, r22
    7934:	17 06       	cpc	r1, r23
    7936:	18 06       	cpc	r1, r24
    7938:	99 1f       	adc	r25, r25
    793a:	f1 cf       	rjmp	.-30     	; 0x791e <__fp_splitA+0xc>
    793c:	86 95       	lsr	r24
    793e:	71 05       	cpc	r23, r1
    7940:	61 05       	cpc	r22, r1
    7942:	08 94       	sec
    7944:	08 95       	ret

00007946 <__fp_zero>:
    7946:	e8 94       	clt

00007948 <__fp_szero>:
    7948:	bb 27       	eor	r27, r27
    794a:	66 27       	eor	r22, r22
    794c:	77 27       	eor	r23, r23
    794e:	cb 01       	movw	r24, r22
    7950:	97 f9       	bld	r25, 7
    7952:	08 95       	ret

00007954 <__gesf2>:
    7954:	2c df       	rcall	.-424    	; 0x77ae <__fp_cmp>
    7956:	08 f4       	brcc	.+2      	; 0x795a <__gesf2+0x6>
    7958:	8f ef       	ldi	r24, 0xFF	; 255
    795a:	08 95       	ret

0000795c <inverse>:
    795c:	9b 01       	movw	r18, r22
    795e:	ac 01       	movw	r20, r24
    7960:	60 e0       	ldi	r22, 0x00	; 0
    7962:	70 e0       	ldi	r23, 0x00	; 0
    7964:	80 e8       	ldi	r24, 0x80	; 128
    7966:	9f e3       	ldi	r25, 0x3F	; 63
    7968:	4c ce       	rjmp	.-872    	; 0x7602 <__divsf3>

0000796a <__mulsf3>:
    796a:	0b d0       	rcall	.+22     	; 0x7982 <__mulsf3x>
    796c:	a8 cf       	rjmp	.-176    	; 0x78be <__fp_round>
    796e:	71 df       	rcall	.-286    	; 0x7852 <__fp_pscA>
    7970:	28 f0       	brcs	.+10     	; 0x797c <__mulsf3+0x12>
    7972:	76 df       	rcall	.-276    	; 0x7860 <__fp_pscB>
    7974:	18 f0       	brcs	.+6      	; 0x797c <__mulsf3+0x12>
    7976:	95 23       	and	r25, r21
    7978:	09 f0       	breq	.+2      	; 0x797c <__mulsf3+0x12>
    797a:	3d cf       	rjmp	.-390    	; 0x77f6 <__fp_inf>
    797c:	42 cf       	rjmp	.-380    	; 0x7802 <__fp_nan>
    797e:	11 24       	eor	r1, r1
    7980:	e3 cf       	rjmp	.-58     	; 0x7948 <__fp_szero>

00007982 <__mulsf3x>:
    7982:	bf df       	rcall	.-130    	; 0x7902 <__fp_split3>
    7984:	a0 f3       	brcs	.-24     	; 0x796e <__mulsf3+0x4>

00007986 <__mulsf3_pse>:
    7986:	95 9f       	mul	r25, r21
    7988:	d1 f3       	breq	.-12     	; 0x797e <__mulsf3+0x14>
    798a:	95 0f       	add	r25, r21
    798c:	50 e0       	ldi	r21, 0x00	; 0
    798e:	55 1f       	adc	r21, r21
    7990:	62 9f       	mul	r22, r18
    7992:	f0 01       	movw	r30, r0
    7994:	72 9f       	mul	r23, r18
    7996:	bb 27       	eor	r27, r27
    7998:	f0 0d       	add	r31, r0
    799a:	b1 1d       	adc	r27, r1
    799c:	63 9f       	mul	r22, r19
    799e:	aa 27       	eor	r26, r26
    79a0:	f0 0d       	add	r31, r0
    79a2:	b1 1d       	adc	r27, r1
    79a4:	aa 1f       	adc	r26, r26
    79a6:	64 9f       	mul	r22, r20
    79a8:	66 27       	eor	r22, r22
    79aa:	b0 0d       	add	r27, r0
    79ac:	a1 1d       	adc	r26, r1
    79ae:	66 1f       	adc	r22, r22
    79b0:	82 9f       	mul	r24, r18
    79b2:	22 27       	eor	r18, r18
    79b4:	b0 0d       	add	r27, r0
    79b6:	a1 1d       	adc	r26, r1
    79b8:	62 1f       	adc	r22, r18
    79ba:	73 9f       	mul	r23, r19
    79bc:	b0 0d       	add	r27, r0
    79be:	a1 1d       	adc	r26, r1
    79c0:	62 1f       	adc	r22, r18
    79c2:	83 9f       	mul	r24, r19
    79c4:	a0 0d       	add	r26, r0
    79c6:	61 1d       	adc	r22, r1
    79c8:	22 1f       	adc	r18, r18
    79ca:	74 9f       	mul	r23, r20
    79cc:	33 27       	eor	r19, r19
    79ce:	a0 0d       	add	r26, r0
    79d0:	61 1d       	adc	r22, r1
    79d2:	23 1f       	adc	r18, r19
    79d4:	84 9f       	mul	r24, r20
    79d6:	60 0d       	add	r22, r0
    79d8:	21 1d       	adc	r18, r1
    79da:	82 2f       	mov	r24, r18
    79dc:	76 2f       	mov	r23, r22
    79de:	6a 2f       	mov	r22, r26
    79e0:	11 24       	eor	r1, r1
    79e2:	9f 57       	subi	r25, 0x7F	; 127
    79e4:	50 40       	sbci	r21, 0x00	; 0
    79e6:	8a f0       	brmi	.+34     	; 0x7a0a <__mulsf3_pse+0x84>
    79e8:	e1 f0       	breq	.+56     	; 0x7a22 <__mulsf3_pse+0x9c>
    79ea:	88 23       	and	r24, r24
    79ec:	4a f0       	brmi	.+18     	; 0x7a00 <__mulsf3_pse+0x7a>
    79ee:	ee 0f       	add	r30, r30
    79f0:	ff 1f       	adc	r31, r31
    79f2:	bb 1f       	adc	r27, r27
    79f4:	66 1f       	adc	r22, r22
    79f6:	77 1f       	adc	r23, r23
    79f8:	88 1f       	adc	r24, r24
    79fa:	91 50       	subi	r25, 0x01	; 1
    79fc:	50 40       	sbci	r21, 0x00	; 0
    79fe:	a9 f7       	brne	.-22     	; 0x79ea <__mulsf3_pse+0x64>
    7a00:	9e 3f       	cpi	r25, 0xFE	; 254
    7a02:	51 05       	cpc	r21, r1
    7a04:	70 f0       	brcs	.+28     	; 0x7a22 <__mulsf3_pse+0x9c>
    7a06:	f7 ce       	rjmp	.-530    	; 0x77f6 <__fp_inf>
    7a08:	9f cf       	rjmp	.-194    	; 0x7948 <__fp_szero>
    7a0a:	5f 3f       	cpi	r21, 0xFF	; 255
    7a0c:	ec f3       	brlt	.-6      	; 0x7a08 <__mulsf3_pse+0x82>
    7a0e:	98 3e       	cpi	r25, 0xE8	; 232
    7a10:	dc f3       	brlt	.-10     	; 0x7a08 <__mulsf3_pse+0x82>
    7a12:	86 95       	lsr	r24
    7a14:	77 95       	ror	r23
    7a16:	67 95       	ror	r22
    7a18:	b7 95       	ror	r27
    7a1a:	f7 95       	ror	r31
    7a1c:	e7 95       	ror	r30
    7a1e:	9f 5f       	subi	r25, 0xFF	; 255
    7a20:	c1 f7       	brne	.-16     	; 0x7a12 <__mulsf3_pse+0x8c>
    7a22:	fe 2b       	or	r31, r30
    7a24:	88 0f       	add	r24, r24
    7a26:	91 1d       	adc	r25, r1
    7a28:	96 95       	lsr	r25
    7a2a:	87 95       	ror	r24
    7a2c:	97 f9       	bld	r25, 7
    7a2e:	08 95       	ret

00007a30 <pow>:
    7a30:	fa 01       	movw	r30, r20
    7a32:	ee 0f       	add	r30, r30
    7a34:	ff 1f       	adc	r31, r31
    7a36:	30 96       	adiw	r30, 0x00	; 0
    7a38:	21 05       	cpc	r18, r1
    7a3a:	31 05       	cpc	r19, r1
    7a3c:	99 f1       	breq	.+102    	; 0x7aa4 <pow+0x74>
    7a3e:	61 15       	cp	r22, r1
    7a40:	71 05       	cpc	r23, r1
    7a42:	61 f4       	brne	.+24     	; 0x7a5c <pow+0x2c>
    7a44:	80 38       	cpi	r24, 0x80	; 128
    7a46:	bf e3       	ldi	r27, 0x3F	; 63
    7a48:	9b 07       	cpc	r25, r27
    7a4a:	49 f1       	breq	.+82     	; 0x7a9e <pow+0x6e>
    7a4c:	68 94       	set
    7a4e:	90 38       	cpi	r25, 0x80	; 128
    7a50:	81 05       	cpc	r24, r1
    7a52:	61 f0       	breq	.+24     	; 0x7a6c <pow+0x3c>
    7a54:	80 38       	cpi	r24, 0x80	; 128
    7a56:	bf ef       	ldi	r27, 0xFF	; 255
    7a58:	9b 07       	cpc	r25, r27
    7a5a:	41 f0       	breq	.+16     	; 0x7a6c <pow+0x3c>
    7a5c:	99 23       	and	r25, r25
    7a5e:	42 f5       	brpl	.+80     	; 0x7ab0 <pow+0x80>
    7a60:	ff 3f       	cpi	r31, 0xFF	; 255
    7a62:	e1 05       	cpc	r30, r1
    7a64:	31 05       	cpc	r19, r1
    7a66:	21 05       	cpc	r18, r1
    7a68:	11 f1       	breq	.+68     	; 0x7aae <pow+0x7e>
    7a6a:	e8 94       	clt
    7a6c:	08 94       	sec
    7a6e:	e7 95       	ror	r30
    7a70:	d9 01       	movw	r26, r18
    7a72:	aa 23       	and	r26, r26
    7a74:	29 f4       	brne	.+10     	; 0x7a80 <pow+0x50>
    7a76:	ab 2f       	mov	r26, r27
    7a78:	be 2f       	mov	r27, r30
    7a7a:	f8 5f       	subi	r31, 0xF8	; 248
    7a7c:	d0 f3       	brcs	.-12     	; 0x7a72 <pow+0x42>
    7a7e:	10 c0       	rjmp	.+32     	; 0x7aa0 <pow+0x70>
    7a80:	ff 5f       	subi	r31, 0xFF	; 255
    7a82:	70 f4       	brcc	.+28     	; 0x7aa0 <pow+0x70>
    7a84:	a6 95       	lsr	r26
    7a86:	e0 f7       	brcc	.-8      	; 0x7a80 <pow+0x50>
    7a88:	f7 39       	cpi	r31, 0x97	; 151
    7a8a:	50 f0       	brcs	.+20     	; 0x7aa0 <pow+0x70>
    7a8c:	19 f0       	breq	.+6      	; 0x7a94 <pow+0x64>
    7a8e:	ff 3a       	cpi	r31, 0xAF	; 175
    7a90:	38 f4       	brcc	.+14     	; 0x7aa0 <pow+0x70>
    7a92:	9f 77       	andi	r25, 0x7F	; 127
    7a94:	9f 93       	push	r25
    7a96:	0c d0       	rcall	.+24     	; 0x7ab0 <pow+0x80>
    7a98:	0f 90       	pop	r0
    7a9a:	07 fc       	sbrc	r0, 7
    7a9c:	90 58       	subi	r25, 0x80	; 128
    7a9e:	08 95       	ret
    7aa0:	3e f0       	brts	.+14     	; 0x7ab0 <pow+0x80>
    7aa2:	af ce       	rjmp	.-674    	; 0x7802 <__fp_nan>
    7aa4:	60 e0       	ldi	r22, 0x00	; 0
    7aa6:	70 e0       	ldi	r23, 0x00	; 0
    7aa8:	80 e8       	ldi	r24, 0x80	; 128
    7aaa:	9f e3       	ldi	r25, 0x3F	; 63
    7aac:	08 95       	ret
    7aae:	4f e7       	ldi	r20, 0x7F	; 127
    7ab0:	9f 77       	andi	r25, 0x7F	; 127
    7ab2:	5f 93       	push	r21
    7ab4:	4f 93       	push	r20
    7ab6:	3f 93       	push	r19
    7ab8:	2f 93       	push	r18
    7aba:	97 d0       	rcall	.+302    	; 0x7bea <log>
    7abc:	2f 91       	pop	r18
    7abe:	3f 91       	pop	r19
    7ac0:	4f 91       	pop	r20
    7ac2:	5f 91       	pop	r21
    7ac4:	52 df       	rcall	.-348    	; 0x796a <__mulsf3>
    7ac6:	0b c0       	rjmp	.+22     	; 0x7ade <exp>

00007ac8 <sin>:
    7ac8:	9f 93       	push	r25
    7aca:	d2 de       	rcall	.-604    	; 0x7870 <__fp_rempio2>
    7acc:	0f 90       	pop	r0
    7ace:	07 fc       	sbrc	r0, 7
    7ad0:	ee 5f       	subi	r30, 0xFE	; 254
    7ad2:	06 cf       	rjmp	.-500    	; 0x78e0 <__fp_sinus>
    7ad4:	19 f4       	brne	.+6      	; 0x7adc <sin+0x14>
    7ad6:	0e f0       	brts	.+2      	; 0x7ada <sin+0x12>
    7ad8:	8e ce       	rjmp	.-740    	; 0x77f6 <__fp_inf>
    7ada:	35 cf       	rjmp	.-406    	; 0x7946 <__fp_zero>
    7adc:	92 ce       	rjmp	.-732    	; 0x7802 <__fp_nan>

00007ade <exp>:
    7ade:	19 df       	rcall	.-462    	; 0x7912 <__fp_splitA>
    7ae0:	c8 f3       	brcs	.-14     	; 0x7ad4 <sin+0xc>
    7ae2:	96 38       	cpi	r25, 0x86	; 134
    7ae4:	c0 f7       	brcc	.-16     	; 0x7ad6 <sin+0xe>
    7ae6:	07 f8       	bld	r0, 7
    7ae8:	0f 92       	push	r0
    7aea:	e8 94       	clt
    7aec:	2b e3       	ldi	r18, 0x3B	; 59
    7aee:	3a ea       	ldi	r19, 0xAA	; 170
    7af0:	48 eb       	ldi	r20, 0xB8	; 184
    7af2:	5f e7       	ldi	r21, 0x7F	; 127
    7af4:	48 df       	rcall	.-368    	; 0x7986 <__mulsf3_pse>
    7af6:	0f 92       	push	r0
    7af8:	0f 92       	push	r0
    7afa:	0f 92       	push	r0
    7afc:	4d b7       	in	r20, 0x3d	; 61
    7afe:	5e b7       	in	r21, 0x3e	; 62
    7b00:	0f 92       	push	r0
    7b02:	b3 d0       	rcall	.+358    	; 0x7c6a <modf>
    7b04:	e4 e1       	ldi	r30, 0x14	; 20
    7b06:	f2 e0       	ldi	r31, 0x02	; 2
    7b08:	7f de       	rcall	.-770    	; 0x7808 <__fp_powser>
    7b0a:	4f 91       	pop	r20
    7b0c:	5f 91       	pop	r21
    7b0e:	ef 91       	pop	r30
    7b10:	ff 91       	pop	r31
    7b12:	e5 95       	asr	r30
    7b14:	ee 1f       	adc	r30, r30
    7b16:	ff 1f       	adc	r31, r31
    7b18:	49 f0       	breq	.+18     	; 0x7b2c <exp+0x4e>
    7b1a:	fe 57       	subi	r31, 0x7E	; 126
    7b1c:	e0 68       	ori	r30, 0x80	; 128
    7b1e:	44 27       	eor	r20, r20
    7b20:	ee 0f       	add	r30, r30
    7b22:	44 1f       	adc	r20, r20
    7b24:	fa 95       	dec	r31
    7b26:	e1 f7       	brne	.-8      	; 0x7b20 <exp+0x42>
    7b28:	41 95       	neg	r20
    7b2a:	55 0b       	sbc	r21, r21
    7b2c:	25 d0       	rcall	.+74     	; 0x7b78 <ldexp>
    7b2e:	0f 90       	pop	r0
    7b30:	07 fe       	sbrs	r0, 7
    7b32:	14 cf       	rjmp	.-472    	; 0x795c <inverse>
    7b34:	08 95       	ret

00007b36 <__fp_mpack>:
    7b36:	9f 3f       	cpi	r25, 0xFF	; 255
    7b38:	31 f0       	breq	.+12     	; 0x7b46 <__fp_mpack_finite+0xc>

00007b3a <__fp_mpack_finite>:
    7b3a:	91 50       	subi	r25, 0x01	; 1
    7b3c:	20 f4       	brcc	.+8      	; 0x7b46 <__fp_mpack_finite+0xc>
    7b3e:	87 95       	ror	r24
    7b40:	77 95       	ror	r23
    7b42:	67 95       	ror	r22
    7b44:	b7 95       	ror	r27
    7b46:	88 0f       	add	r24, r24
    7b48:	91 1d       	adc	r25, r1
    7b4a:	96 95       	lsr	r25
    7b4c:	87 95       	ror	r24
    7b4e:	97 f9       	bld	r25, 7
    7b50:	08 95       	ret

00007b52 <__fp_powsodd>:
    7b52:	9f 93       	push	r25
    7b54:	8f 93       	push	r24
    7b56:	7f 93       	push	r23
    7b58:	6f 93       	push	r22
    7b5a:	ff 93       	push	r31
    7b5c:	ef 93       	push	r30
    7b5e:	9b 01       	movw	r18, r22
    7b60:	ac 01       	movw	r20, r24
    7b62:	03 df       	rcall	.-506    	; 0x796a <__mulsf3>
    7b64:	ef 91       	pop	r30
    7b66:	ff 91       	pop	r31
    7b68:	4f de       	rcall	.-866    	; 0x7808 <__fp_powser>
    7b6a:	2f 91       	pop	r18
    7b6c:	3f 91       	pop	r19
    7b6e:	4f 91       	pop	r20
    7b70:	5f 91       	pop	r21
    7b72:	fb ce       	rjmp	.-522    	; 0x796a <__mulsf3>
    7b74:	40 ce       	rjmp	.-896    	; 0x77f6 <__fp_inf>
    7b76:	df cf       	rjmp	.-66     	; 0x7b36 <__fp_mpack>

00007b78 <ldexp>:
    7b78:	cc de       	rcall	.-616    	; 0x7912 <__fp_splitA>
    7b7a:	e8 f3       	brcs	.-6      	; 0x7b76 <__fp_powsodd+0x24>
    7b7c:	99 23       	and	r25, r25
    7b7e:	d9 f3       	breq	.-10     	; 0x7b76 <__fp_powsodd+0x24>
    7b80:	94 0f       	add	r25, r20
    7b82:	51 1d       	adc	r21, r1
    7b84:	bb f3       	brvs	.-18     	; 0x7b74 <__fp_powsodd+0x22>
    7b86:	91 50       	subi	r25, 0x01	; 1
    7b88:	50 40       	sbci	r21, 0x00	; 0
    7b8a:	94 f0       	brlt	.+36     	; 0x7bb0 <ldexp+0x38>
    7b8c:	59 f0       	breq	.+22     	; 0x7ba4 <ldexp+0x2c>
    7b8e:	88 23       	and	r24, r24
    7b90:	32 f0       	brmi	.+12     	; 0x7b9e <ldexp+0x26>
    7b92:	66 0f       	add	r22, r22
    7b94:	77 1f       	adc	r23, r23
    7b96:	88 1f       	adc	r24, r24
    7b98:	91 50       	subi	r25, 0x01	; 1
    7b9a:	50 40       	sbci	r21, 0x00	; 0
    7b9c:	c1 f7       	brne	.-16     	; 0x7b8e <ldexp+0x16>
    7b9e:	9e 3f       	cpi	r25, 0xFE	; 254
    7ba0:	51 05       	cpc	r21, r1
    7ba2:	44 f7       	brge	.-48     	; 0x7b74 <__fp_powsodd+0x22>
    7ba4:	88 0f       	add	r24, r24
    7ba6:	91 1d       	adc	r25, r1
    7ba8:	96 95       	lsr	r25
    7baa:	87 95       	ror	r24
    7bac:	97 f9       	bld	r25, 7
    7bae:	08 95       	ret
    7bb0:	5f 3f       	cpi	r21, 0xFF	; 255
    7bb2:	ac f0       	brlt	.+42     	; 0x7bde <ldexp+0x66>
    7bb4:	98 3e       	cpi	r25, 0xE8	; 232
    7bb6:	9c f0       	brlt	.+38     	; 0x7bde <ldexp+0x66>
    7bb8:	bb 27       	eor	r27, r27
    7bba:	86 95       	lsr	r24
    7bbc:	77 95       	ror	r23
    7bbe:	67 95       	ror	r22
    7bc0:	b7 95       	ror	r27
    7bc2:	08 f4       	brcc	.+2      	; 0x7bc6 <ldexp+0x4e>
    7bc4:	b1 60       	ori	r27, 0x01	; 1
    7bc6:	93 95       	inc	r25
    7bc8:	c1 f7       	brne	.-16     	; 0x7bba <ldexp+0x42>
    7bca:	bb 0f       	add	r27, r27
    7bcc:	58 f7       	brcc	.-42     	; 0x7ba4 <ldexp+0x2c>
    7bce:	11 f4       	brne	.+4      	; 0x7bd4 <ldexp+0x5c>
    7bd0:	60 ff       	sbrs	r22, 0
    7bd2:	e8 cf       	rjmp	.-48     	; 0x7ba4 <ldexp+0x2c>
    7bd4:	6f 5f       	subi	r22, 0xFF	; 255
    7bd6:	7f 4f       	sbci	r23, 0xFF	; 255
    7bd8:	8f 4f       	sbci	r24, 0xFF	; 255
    7bda:	9f 4f       	sbci	r25, 0xFF	; 255
    7bdc:	e3 cf       	rjmp	.-58     	; 0x7ba4 <ldexp+0x2c>
    7bde:	b4 ce       	rjmp	.-664    	; 0x7948 <__fp_szero>
    7be0:	0e f0       	brts	.+2      	; 0x7be4 <ldexp+0x6c>
    7be2:	a9 cf       	rjmp	.-174    	; 0x7b36 <__fp_mpack>
    7be4:	0e ce       	rjmp	.-996    	; 0x7802 <__fp_nan>
    7be6:	68 94       	set
    7be8:	06 ce       	rjmp	.-1012   	; 0x77f6 <__fp_inf>

00007bea <log>:
    7bea:	93 de       	rcall	.-730    	; 0x7912 <__fp_splitA>
    7bec:	c8 f3       	brcs	.-14     	; 0x7be0 <ldexp+0x68>
    7bee:	99 23       	and	r25, r25
    7bf0:	d1 f3       	breq	.-12     	; 0x7be6 <ldexp+0x6e>
    7bf2:	c6 f3       	brts	.-16     	; 0x7be4 <ldexp+0x6c>
    7bf4:	df 93       	push	r29
    7bf6:	cf 93       	push	r28
    7bf8:	1f 93       	push	r17
    7bfa:	0f 93       	push	r16
    7bfc:	ff 92       	push	r15
    7bfe:	c9 2f       	mov	r28, r25
    7c00:	dd 27       	eor	r29, r29
    7c02:	88 23       	and	r24, r24
    7c04:	2a f0       	brmi	.+10     	; 0x7c10 <log+0x26>
    7c06:	21 97       	sbiw	r28, 0x01	; 1
    7c08:	66 0f       	add	r22, r22
    7c0a:	77 1f       	adc	r23, r23
    7c0c:	88 1f       	adc	r24, r24
    7c0e:	da f7       	brpl	.-10     	; 0x7c06 <log+0x1c>
    7c10:	20 e0       	ldi	r18, 0x00	; 0
    7c12:	30 e0       	ldi	r19, 0x00	; 0
    7c14:	40 e8       	ldi	r20, 0x80	; 128
    7c16:	5f eb       	ldi	r21, 0xBF	; 191
    7c18:	9f e3       	ldi	r25, 0x3F	; 63
    7c1a:	88 39       	cpi	r24, 0x98	; 152
    7c1c:	20 f0       	brcs	.+8      	; 0x7c26 <log+0x3c>
    7c1e:	80 3e       	cpi	r24, 0xE0	; 224
    7c20:	30 f0       	brcs	.+12     	; 0x7c2e <log+0x44>
    7c22:	21 96       	adiw	r28, 0x01	; 1
    7c24:	8f 77       	andi	r24, 0x7F	; 127
    7c26:	86 dc       	rcall	.-1780   	; 0x7534 <__addsf3>
    7c28:	ec e3       	ldi	r30, 0x3C	; 60
    7c2a:	f2 e0       	ldi	r31, 0x02	; 2
    7c2c:	03 c0       	rjmp	.+6      	; 0x7c34 <log+0x4a>
    7c2e:	82 dc       	rcall	.-1788   	; 0x7534 <__addsf3>
    7c30:	e9 e6       	ldi	r30, 0x69	; 105
    7c32:	f2 e0       	ldi	r31, 0x02	; 2
    7c34:	e9 dd       	rcall	.-1070   	; 0x7808 <__fp_powser>
    7c36:	8b 01       	movw	r16, r22
    7c38:	be 01       	movw	r22, r28
    7c3a:	ec 01       	movw	r28, r24
    7c3c:	fb 2e       	mov	r15, r27
    7c3e:	6f 57       	subi	r22, 0x7F	; 127
    7c40:	71 09       	sbc	r23, r1
    7c42:	75 95       	asr	r23
    7c44:	77 1f       	adc	r23, r23
    7c46:	88 0b       	sbc	r24, r24
    7c48:	99 0b       	sbc	r25, r25
    7c4a:	76 dd       	rcall	.-1300   	; 0x7738 <__floatsisf>
    7c4c:	28 e1       	ldi	r18, 0x18	; 24
    7c4e:	32 e7       	ldi	r19, 0x72	; 114
    7c50:	41 e3       	ldi	r20, 0x31	; 49
    7c52:	5f e3       	ldi	r21, 0x3F	; 63
    7c54:	96 de       	rcall	.-724    	; 0x7982 <__mulsf3x>
    7c56:	af 2d       	mov	r26, r15
    7c58:	98 01       	movw	r18, r16
    7c5a:	ae 01       	movw	r20, r28
    7c5c:	ff 90       	pop	r15
    7c5e:	0f 91       	pop	r16
    7c60:	1f 91       	pop	r17
    7c62:	cf 91       	pop	r28
    7c64:	df 91       	pop	r29
    7c66:	77 dc       	rcall	.-1810   	; 0x7556 <__addsf3x>
    7c68:	2a ce       	rjmp	.-940    	; 0x78be <__fp_round>

00007c6a <modf>:
    7c6a:	fa 01       	movw	r30, r20
    7c6c:	dc 01       	movw	r26, r24
    7c6e:	aa 0f       	add	r26, r26
    7c70:	bb 1f       	adc	r27, r27
    7c72:	9b 01       	movw	r18, r22
    7c74:	ac 01       	movw	r20, r24
    7c76:	bf 57       	subi	r27, 0x7F	; 127
    7c78:	28 f4       	brcc	.+10     	; 0x7c84 <modf+0x1a>
    7c7a:	22 27       	eor	r18, r18
    7c7c:	33 27       	eor	r19, r19
    7c7e:	44 27       	eor	r20, r20
    7c80:	50 78       	andi	r21, 0x80	; 128
    7c82:	1f c0       	rjmp	.+62     	; 0x7cc2 <modf+0x58>
    7c84:	b7 51       	subi	r27, 0x17	; 23
    7c86:	88 f4       	brcc	.+34     	; 0x7caa <modf+0x40>
    7c88:	ab 2f       	mov	r26, r27
    7c8a:	00 24       	eor	r0, r0
    7c8c:	46 95       	lsr	r20
    7c8e:	37 95       	ror	r19
    7c90:	27 95       	ror	r18
    7c92:	01 1c       	adc	r0, r1
    7c94:	a3 95       	inc	r26
    7c96:	d2 f3       	brmi	.-12     	; 0x7c8c <modf+0x22>
    7c98:	00 20       	and	r0, r0
    7c9a:	69 f0       	breq	.+26     	; 0x7cb6 <modf+0x4c>
    7c9c:	22 0f       	add	r18, r18
    7c9e:	33 1f       	adc	r19, r19
    7ca0:	44 1f       	adc	r20, r20
    7ca2:	b3 95       	inc	r27
    7ca4:	da f3       	brmi	.-10     	; 0x7c9c <modf+0x32>
    7ca6:	0d d0       	rcall	.+26     	; 0x7cc2 <modf+0x58>
    7ca8:	44 cc       	rjmp	.-1912   	; 0x7532 <__subsf3>
    7caa:	61 30       	cpi	r22, 0x01	; 1
    7cac:	71 05       	cpc	r23, r1
    7cae:	a0 e8       	ldi	r26, 0x80	; 128
    7cb0:	8a 07       	cpc	r24, r26
    7cb2:	b9 46       	sbci	r27, 0x69	; 105
    7cb4:	30 f4       	brcc	.+12     	; 0x7cc2 <modf+0x58>
    7cb6:	9b 01       	movw	r18, r22
    7cb8:	ac 01       	movw	r20, r24
    7cba:	66 27       	eor	r22, r22
    7cbc:	77 27       	eor	r23, r23
    7cbe:	88 27       	eor	r24, r24
    7cc0:	90 78       	andi	r25, 0x80	; 128
    7cc2:	30 96       	adiw	r30, 0x00	; 0
    7cc4:	21 f0       	breq	.+8      	; 0x7cce <modf+0x64>
    7cc6:	20 83       	st	Z, r18
    7cc8:	31 83       	std	Z+1, r19	; 0x01
    7cca:	42 83       	std	Z+2, r20	; 0x02
    7ccc:	53 83       	std	Z+3, r21	; 0x03
    7cce:	08 95       	ret

00007cd0 <vfprintf>:
    7cd0:	2f 92       	push	r2
    7cd2:	3f 92       	push	r3
    7cd4:	4f 92       	push	r4
    7cd6:	5f 92       	push	r5
    7cd8:	6f 92       	push	r6
    7cda:	7f 92       	push	r7
    7cdc:	8f 92       	push	r8
    7cde:	9f 92       	push	r9
    7ce0:	af 92       	push	r10
    7ce2:	bf 92       	push	r11
    7ce4:	cf 92       	push	r12
    7ce6:	df 92       	push	r13
    7ce8:	ef 92       	push	r14
    7cea:	ff 92       	push	r15
    7cec:	0f 93       	push	r16
    7cee:	1f 93       	push	r17
    7cf0:	cf 93       	push	r28
    7cf2:	df 93       	push	r29
    7cf4:	cd b7       	in	r28, 0x3d	; 61
    7cf6:	de b7       	in	r29, 0x3e	; 62
    7cf8:	63 97       	sbiw	r28, 0x13	; 19
    7cfa:	0f b6       	in	r0, 0x3f	; 63
    7cfc:	f8 94       	cli
    7cfe:	de bf       	out	0x3e, r29	; 62
    7d00:	0f be       	out	0x3f, r0	; 63
    7d02:	cd bf       	out	0x3d, r28	; 61
    7d04:	6c 01       	movw	r12, r24
    7d06:	4b 01       	movw	r8, r22
    7d08:	2a 01       	movw	r4, r20
    7d0a:	fc 01       	movw	r30, r24
    7d0c:	17 82       	std	Z+7, r1	; 0x07
    7d0e:	16 82       	std	Z+6, r1	; 0x06
    7d10:	83 81       	ldd	r24, Z+3	; 0x03
    7d12:	81 ff       	sbrs	r24, 1
    7d14:	29 c3       	rjmp	.+1618   	; 0x8368 <vfprintf+0x698>
    7d16:	ae 01       	movw	r20, r28
    7d18:	4f 5f       	subi	r20, 0xFF	; 255
    7d1a:	5f 4f       	sbci	r21, 0xFF	; 255
    7d1c:	3a 01       	movw	r6, r20
    7d1e:	f6 01       	movw	r30, r12
    7d20:	93 81       	ldd	r25, Z+3	; 0x03
    7d22:	f4 01       	movw	r30, r8
    7d24:	93 fd       	sbrc	r25, 3
    7d26:	85 91       	lpm	r24, Z+
    7d28:	93 ff       	sbrs	r25, 3
    7d2a:	81 91       	ld	r24, Z+
    7d2c:	4f 01       	movw	r8, r30
    7d2e:	88 23       	and	r24, r24
    7d30:	09 f4       	brne	.+2      	; 0x7d34 <vfprintf+0x64>
    7d32:	16 c3       	rjmp	.+1580   	; 0x8360 <vfprintf+0x690>
    7d34:	85 32       	cpi	r24, 0x25	; 37
    7d36:	39 f4       	brne	.+14     	; 0x7d46 <vfprintf+0x76>
    7d38:	93 fd       	sbrc	r25, 3
    7d3a:	85 91       	lpm	r24, Z+
    7d3c:	93 ff       	sbrs	r25, 3
    7d3e:	81 91       	ld	r24, Z+
    7d40:	4f 01       	movw	r8, r30
    7d42:	85 32       	cpi	r24, 0x25	; 37
    7d44:	31 f4       	brne	.+12     	; 0x7d52 <vfprintf+0x82>
    7d46:	b6 01       	movw	r22, r12
    7d48:	90 e0       	ldi	r25, 0x00	; 0
    7d4a:	a9 d5       	rcall	.+2898   	; 0x889e <fputc>
    7d4c:	52 01       	movw	r10, r4
    7d4e:	25 01       	movw	r4, r10
    7d50:	e6 cf       	rjmp	.-52     	; 0x7d1e <vfprintf+0x4e>
    7d52:	10 e0       	ldi	r17, 0x00	; 0
    7d54:	f1 2c       	mov	r15, r1
    7d56:	20 e0       	ldi	r18, 0x00	; 0
    7d58:	20 32       	cpi	r18, 0x20	; 32
    7d5a:	a0 f4       	brcc	.+40     	; 0x7d84 <vfprintf+0xb4>
    7d5c:	8b 32       	cpi	r24, 0x2B	; 43
    7d5e:	69 f0       	breq	.+26     	; 0x7d7a <vfprintf+0xaa>
    7d60:	30 f4       	brcc	.+12     	; 0x7d6e <vfprintf+0x9e>
    7d62:	80 32       	cpi	r24, 0x20	; 32
    7d64:	59 f0       	breq	.+22     	; 0x7d7c <vfprintf+0xac>
    7d66:	83 32       	cpi	r24, 0x23	; 35
    7d68:	69 f4       	brne	.+26     	; 0x7d84 <vfprintf+0xb4>
    7d6a:	20 61       	ori	r18, 0x10	; 16
    7d6c:	2c c0       	rjmp	.+88     	; 0x7dc6 <vfprintf+0xf6>
    7d6e:	8d 32       	cpi	r24, 0x2D	; 45
    7d70:	39 f0       	breq	.+14     	; 0x7d80 <vfprintf+0xb0>
    7d72:	80 33       	cpi	r24, 0x30	; 48
    7d74:	39 f4       	brne	.+14     	; 0x7d84 <vfprintf+0xb4>
    7d76:	21 60       	ori	r18, 0x01	; 1
    7d78:	26 c0       	rjmp	.+76     	; 0x7dc6 <vfprintf+0xf6>
    7d7a:	22 60       	ori	r18, 0x02	; 2
    7d7c:	24 60       	ori	r18, 0x04	; 4
    7d7e:	23 c0       	rjmp	.+70     	; 0x7dc6 <vfprintf+0xf6>
    7d80:	28 60       	ori	r18, 0x08	; 8
    7d82:	21 c0       	rjmp	.+66     	; 0x7dc6 <vfprintf+0xf6>
    7d84:	27 fd       	sbrc	r18, 7
    7d86:	27 c0       	rjmp	.+78     	; 0x7dd6 <vfprintf+0x106>
    7d88:	30 ed       	ldi	r19, 0xD0	; 208
    7d8a:	38 0f       	add	r19, r24
    7d8c:	3a 30       	cpi	r19, 0x0A	; 10
    7d8e:	78 f4       	brcc	.+30     	; 0x7dae <vfprintf+0xde>
    7d90:	26 ff       	sbrs	r18, 6
    7d92:	06 c0       	rjmp	.+12     	; 0x7da0 <vfprintf+0xd0>
    7d94:	fa e0       	ldi	r31, 0x0A	; 10
    7d96:	1f 9f       	mul	r17, r31
    7d98:	30 0d       	add	r19, r0
    7d9a:	11 24       	eor	r1, r1
    7d9c:	13 2f       	mov	r17, r19
    7d9e:	13 c0       	rjmp	.+38     	; 0x7dc6 <vfprintf+0xf6>
    7da0:	4a e0       	ldi	r20, 0x0A	; 10
    7da2:	f4 9e       	mul	r15, r20
    7da4:	30 0d       	add	r19, r0
    7da6:	11 24       	eor	r1, r1
    7da8:	f3 2e       	mov	r15, r19
    7daa:	20 62       	ori	r18, 0x20	; 32
    7dac:	0c c0       	rjmp	.+24     	; 0x7dc6 <vfprintf+0xf6>
    7dae:	8e 32       	cpi	r24, 0x2E	; 46
    7db0:	21 f4       	brne	.+8      	; 0x7dba <vfprintf+0xea>
    7db2:	26 fd       	sbrc	r18, 6
    7db4:	d5 c2       	rjmp	.+1450   	; 0x8360 <vfprintf+0x690>
    7db6:	20 64       	ori	r18, 0x40	; 64
    7db8:	06 c0       	rjmp	.+12     	; 0x7dc6 <vfprintf+0xf6>
    7dba:	8c 36       	cpi	r24, 0x6C	; 108
    7dbc:	11 f4       	brne	.+4      	; 0x7dc2 <vfprintf+0xf2>
    7dbe:	20 68       	ori	r18, 0x80	; 128
    7dc0:	02 c0       	rjmp	.+4      	; 0x7dc6 <vfprintf+0xf6>
    7dc2:	88 36       	cpi	r24, 0x68	; 104
    7dc4:	41 f4       	brne	.+16     	; 0x7dd6 <vfprintf+0x106>
    7dc6:	f4 01       	movw	r30, r8
    7dc8:	93 fd       	sbrc	r25, 3
    7dca:	85 91       	lpm	r24, Z+
    7dcc:	93 ff       	sbrs	r25, 3
    7dce:	81 91       	ld	r24, Z+
    7dd0:	4f 01       	movw	r8, r30
    7dd2:	81 11       	cpse	r24, r1
    7dd4:	c1 cf       	rjmp	.-126    	; 0x7d58 <vfprintf+0x88>
    7dd6:	9b eb       	ldi	r25, 0xBB	; 187
    7dd8:	98 0f       	add	r25, r24
    7dda:	93 30       	cpi	r25, 0x03	; 3
    7ddc:	18 f4       	brcc	.+6      	; 0x7de4 <vfprintf+0x114>
    7dde:	20 61       	ori	r18, 0x10	; 16
    7de0:	80 5e       	subi	r24, 0xE0	; 224
    7de2:	06 c0       	rjmp	.+12     	; 0x7df0 <vfprintf+0x120>
    7de4:	9b e9       	ldi	r25, 0x9B	; 155
    7de6:	98 0f       	add	r25, r24
    7de8:	93 30       	cpi	r25, 0x03	; 3
    7dea:	08 f0       	brcs	.+2      	; 0x7dee <vfprintf+0x11e>
    7dec:	64 c1       	rjmp	.+712    	; 0x80b6 <vfprintf+0x3e6>
    7dee:	2f 7e       	andi	r18, 0xEF	; 239
    7df0:	26 ff       	sbrs	r18, 6
    7df2:	16 e0       	ldi	r17, 0x06	; 6
    7df4:	2f 73       	andi	r18, 0x3F	; 63
    7df6:	32 2e       	mov	r3, r18
    7df8:	85 36       	cpi	r24, 0x65	; 101
    7dfa:	19 f4       	brne	.+6      	; 0x7e02 <vfprintf+0x132>
    7dfc:	20 64       	ori	r18, 0x40	; 64
    7dfe:	32 2e       	mov	r3, r18
    7e00:	08 c0       	rjmp	.+16     	; 0x7e12 <vfprintf+0x142>
    7e02:	86 36       	cpi	r24, 0x66	; 102
    7e04:	21 f4       	brne	.+8      	; 0x7e0e <vfprintf+0x13e>
    7e06:	f2 2f       	mov	r31, r18
    7e08:	f0 68       	ori	r31, 0x80	; 128
    7e0a:	3f 2e       	mov	r3, r31
    7e0c:	02 c0       	rjmp	.+4      	; 0x7e12 <vfprintf+0x142>
    7e0e:	11 11       	cpse	r17, r1
    7e10:	11 50       	subi	r17, 0x01	; 1
    7e12:	37 fe       	sbrs	r3, 7
    7e14:	07 c0       	rjmp	.+14     	; 0x7e24 <vfprintf+0x154>
    7e16:	1c 33       	cpi	r17, 0x3C	; 60
    7e18:	50 f4       	brcc	.+20     	; 0x7e2e <vfprintf+0x15e>
    7e1a:	ee 24       	eor	r14, r14
    7e1c:	e3 94       	inc	r14
    7e1e:	e1 0e       	add	r14, r17
    7e20:	27 e0       	ldi	r18, 0x07	; 7
    7e22:	0b c0       	rjmp	.+22     	; 0x7e3a <vfprintf+0x16a>
    7e24:	18 30       	cpi	r17, 0x08	; 8
    7e26:	38 f0       	brcs	.+14     	; 0x7e36 <vfprintf+0x166>
    7e28:	27 e0       	ldi	r18, 0x07	; 7
    7e2a:	17 e0       	ldi	r17, 0x07	; 7
    7e2c:	05 c0       	rjmp	.+10     	; 0x7e38 <vfprintf+0x168>
    7e2e:	27 e0       	ldi	r18, 0x07	; 7
    7e30:	4c e3       	ldi	r20, 0x3C	; 60
    7e32:	e4 2e       	mov	r14, r20
    7e34:	02 c0       	rjmp	.+4      	; 0x7e3a <vfprintf+0x16a>
    7e36:	21 2f       	mov	r18, r17
    7e38:	e1 2c       	mov	r14, r1
    7e3a:	52 01       	movw	r10, r4
    7e3c:	44 e0       	ldi	r20, 0x04	; 4
    7e3e:	a4 0e       	add	r10, r20
    7e40:	b1 1c       	adc	r11, r1
    7e42:	f2 01       	movw	r30, r4
    7e44:	60 81       	ld	r22, Z
    7e46:	71 81       	ldd	r23, Z+1	; 0x01
    7e48:	82 81       	ldd	r24, Z+2	; 0x02
    7e4a:	93 81       	ldd	r25, Z+3	; 0x03
    7e4c:	0e 2d       	mov	r16, r14
    7e4e:	a3 01       	movw	r20, r6
    7e50:	38 d4       	rcall	.+2160   	; 0x86c2 <__ftoa_engine>
    7e52:	2c 01       	movw	r4, r24
    7e54:	09 81       	ldd	r16, Y+1	; 0x01
    7e56:	00 ff       	sbrs	r16, 0
    7e58:	02 c0       	rjmp	.+4      	; 0x7e5e <vfprintf+0x18e>
    7e5a:	03 ff       	sbrs	r16, 3
    7e5c:	07 c0       	rjmp	.+14     	; 0x7e6c <vfprintf+0x19c>
    7e5e:	31 fc       	sbrc	r3, 1
    7e60:	08 c0       	rjmp	.+16     	; 0x7e72 <vfprintf+0x1a2>
    7e62:	32 fe       	sbrs	r3, 2
    7e64:	09 c0       	rjmp	.+18     	; 0x7e78 <vfprintf+0x1a8>
    7e66:	30 e2       	ldi	r19, 0x20	; 32
    7e68:	23 2e       	mov	r2, r19
    7e6a:	07 c0       	rjmp	.+14     	; 0x7e7a <vfprintf+0x1aa>
    7e6c:	2d e2       	ldi	r18, 0x2D	; 45
    7e6e:	22 2e       	mov	r2, r18
    7e70:	04 c0       	rjmp	.+8      	; 0x7e7a <vfprintf+0x1aa>
    7e72:	9b e2       	ldi	r25, 0x2B	; 43
    7e74:	29 2e       	mov	r2, r25
    7e76:	01 c0       	rjmp	.+2      	; 0x7e7a <vfprintf+0x1aa>
    7e78:	21 2c       	mov	r2, r1
    7e7a:	80 2f       	mov	r24, r16
    7e7c:	8c 70       	andi	r24, 0x0C	; 12
    7e7e:	19 f0       	breq	.+6      	; 0x7e86 <vfprintf+0x1b6>
    7e80:	21 10       	cpse	r2, r1
    7e82:	51 c2       	rjmp	.+1186   	; 0x8326 <vfprintf+0x656>
    7e84:	8d c2       	rjmp	.+1306   	; 0x83a0 <vfprintf+0x6d0>
    7e86:	37 fe       	sbrs	r3, 7
    7e88:	0f c0       	rjmp	.+30     	; 0x7ea8 <vfprintf+0x1d8>
    7e8a:	e4 0c       	add	r14, r4
    7e8c:	04 ff       	sbrs	r16, 4
    7e8e:	04 c0       	rjmp	.+8      	; 0x7e98 <vfprintf+0x1c8>
    7e90:	8a 81       	ldd	r24, Y+2	; 0x02
    7e92:	81 33       	cpi	r24, 0x31	; 49
    7e94:	09 f4       	brne	.+2      	; 0x7e98 <vfprintf+0x1c8>
    7e96:	ea 94       	dec	r14
    7e98:	1e 14       	cp	r1, r14
    7e9a:	74 f5       	brge	.+92     	; 0x7ef8 <vfprintf+0x228>
    7e9c:	f8 e0       	ldi	r31, 0x08	; 8
    7e9e:	fe 15       	cp	r31, r14
    7ea0:	78 f5       	brcc	.+94     	; 0x7f00 <vfprintf+0x230>
    7ea2:	88 e0       	ldi	r24, 0x08	; 8
    7ea4:	e8 2e       	mov	r14, r24
    7ea6:	2c c0       	rjmp	.+88     	; 0x7f00 <vfprintf+0x230>
    7ea8:	36 fc       	sbrc	r3, 6
    7eaa:	2a c0       	rjmp	.+84     	; 0x7f00 <vfprintf+0x230>
    7eac:	81 2f       	mov	r24, r17
    7eae:	90 e0       	ldi	r25, 0x00	; 0
    7eb0:	84 15       	cp	r24, r4
    7eb2:	95 05       	cpc	r25, r5
    7eb4:	9c f0       	brlt	.+38     	; 0x7edc <vfprintf+0x20c>
    7eb6:	2c ef       	ldi	r18, 0xFC	; 252
    7eb8:	42 16       	cp	r4, r18
    7eba:	2f ef       	ldi	r18, 0xFF	; 255
    7ebc:	52 06       	cpc	r5, r18
    7ebe:	74 f0       	brlt	.+28     	; 0x7edc <vfprintf+0x20c>
    7ec0:	43 2d       	mov	r20, r3
    7ec2:	40 68       	ori	r20, 0x80	; 128
    7ec4:	34 2e       	mov	r3, r20
    7ec6:	0a c0       	rjmp	.+20     	; 0x7edc <vfprintf+0x20c>
    7ec8:	e2 e0       	ldi	r30, 0x02	; 2
    7eca:	f0 e0       	ldi	r31, 0x00	; 0
    7ecc:	ec 0f       	add	r30, r28
    7ece:	fd 1f       	adc	r31, r29
    7ed0:	e1 0f       	add	r30, r17
    7ed2:	f1 1d       	adc	r31, r1
    7ed4:	80 81       	ld	r24, Z
    7ed6:	80 33       	cpi	r24, 0x30	; 48
    7ed8:	19 f4       	brne	.+6      	; 0x7ee0 <vfprintf+0x210>
    7eda:	11 50       	subi	r17, 0x01	; 1
    7edc:	11 11       	cpse	r17, r1
    7ede:	f4 cf       	rjmp	.-24     	; 0x7ec8 <vfprintf+0x1f8>
    7ee0:	37 fe       	sbrs	r3, 7
    7ee2:	0e c0       	rjmp	.+28     	; 0x7f00 <vfprintf+0x230>
    7ee4:	ee 24       	eor	r14, r14
    7ee6:	e3 94       	inc	r14
    7ee8:	e1 0e       	add	r14, r17
    7eea:	81 2f       	mov	r24, r17
    7eec:	90 e0       	ldi	r25, 0x00	; 0
    7eee:	48 16       	cp	r4, r24
    7ef0:	59 06       	cpc	r5, r25
    7ef2:	2c f4       	brge	.+10     	; 0x7efe <vfprintf+0x22e>
    7ef4:	14 19       	sub	r17, r4
    7ef6:	04 c0       	rjmp	.+8      	; 0x7f00 <vfprintf+0x230>
    7ef8:	ee 24       	eor	r14, r14
    7efa:	e3 94       	inc	r14
    7efc:	01 c0       	rjmp	.+2      	; 0x7f00 <vfprintf+0x230>
    7efe:	10 e0       	ldi	r17, 0x00	; 0
    7f00:	37 fe       	sbrs	r3, 7
    7f02:	06 c0       	rjmp	.+12     	; 0x7f10 <vfprintf+0x240>
    7f04:	14 14       	cp	r1, r4
    7f06:	15 04       	cpc	r1, r5
    7f08:	34 f4       	brge	.+12     	; 0x7f16 <vfprintf+0x246>
    7f0a:	c2 01       	movw	r24, r4
    7f0c:	01 96       	adiw	r24, 0x01	; 1
    7f0e:	05 c0       	rjmp	.+10     	; 0x7f1a <vfprintf+0x24a>
    7f10:	85 e0       	ldi	r24, 0x05	; 5
    7f12:	90 e0       	ldi	r25, 0x00	; 0
    7f14:	02 c0       	rjmp	.+4      	; 0x7f1a <vfprintf+0x24a>
    7f16:	81 e0       	ldi	r24, 0x01	; 1
    7f18:	90 e0       	ldi	r25, 0x00	; 0
    7f1a:	21 10       	cpse	r2, r1
    7f1c:	01 96       	adiw	r24, 0x01	; 1
    7f1e:	11 23       	and	r17, r17
    7f20:	31 f0       	breq	.+12     	; 0x7f2e <vfprintf+0x25e>
    7f22:	21 2f       	mov	r18, r17
    7f24:	30 e0       	ldi	r19, 0x00	; 0
    7f26:	2f 5f       	subi	r18, 0xFF	; 255
    7f28:	3f 4f       	sbci	r19, 0xFF	; 255
    7f2a:	82 0f       	add	r24, r18
    7f2c:	93 1f       	adc	r25, r19
    7f2e:	2f 2d       	mov	r18, r15
    7f30:	30 e0       	ldi	r19, 0x00	; 0
    7f32:	82 17       	cp	r24, r18
    7f34:	93 07       	cpc	r25, r19
    7f36:	14 f4       	brge	.+4      	; 0x7f3c <vfprintf+0x26c>
    7f38:	f8 1a       	sub	r15, r24
    7f3a:	01 c0       	rjmp	.+2      	; 0x7f3e <vfprintf+0x26e>
    7f3c:	f1 2c       	mov	r15, r1
    7f3e:	83 2d       	mov	r24, r3
    7f40:	89 70       	andi	r24, 0x09	; 9
    7f42:	41 f4       	brne	.+16     	; 0x7f54 <vfprintf+0x284>
    7f44:	ff 20       	and	r15, r15
    7f46:	31 f0       	breq	.+12     	; 0x7f54 <vfprintf+0x284>
    7f48:	b6 01       	movw	r22, r12
    7f4a:	80 e2       	ldi	r24, 0x20	; 32
    7f4c:	90 e0       	ldi	r25, 0x00	; 0
    7f4e:	a7 d4       	rcall	.+2382   	; 0x889e <fputc>
    7f50:	fa 94       	dec	r15
    7f52:	f8 cf       	rjmp	.-16     	; 0x7f44 <vfprintf+0x274>
    7f54:	22 20       	and	r2, r2
    7f56:	21 f0       	breq	.+8      	; 0x7f60 <vfprintf+0x290>
    7f58:	b6 01       	movw	r22, r12
    7f5a:	82 2d       	mov	r24, r2
    7f5c:	90 e0       	ldi	r25, 0x00	; 0
    7f5e:	9f d4       	rcall	.+2366   	; 0x889e <fputc>
    7f60:	33 fc       	sbrc	r3, 3
    7f62:	08 c0       	rjmp	.+16     	; 0x7f74 <vfprintf+0x2a4>
    7f64:	ff 20       	and	r15, r15
    7f66:	31 f0       	breq	.+12     	; 0x7f74 <vfprintf+0x2a4>
    7f68:	b6 01       	movw	r22, r12
    7f6a:	80 e3       	ldi	r24, 0x30	; 48
    7f6c:	90 e0       	ldi	r25, 0x00	; 0
    7f6e:	97 d4       	rcall	.+2350   	; 0x889e <fputc>
    7f70:	fa 94       	dec	r15
    7f72:	f8 cf       	rjmp	.-16     	; 0x7f64 <vfprintf+0x294>
    7f74:	37 fe       	sbrs	r3, 7
    7f76:	58 c0       	rjmp	.+176    	; 0x8028 <vfprintf+0x358>
    7f78:	94 2d       	mov	r25, r4
    7f7a:	85 2d       	mov	r24, r5
    7f7c:	57 fe       	sbrs	r5, 7
    7f7e:	02 c0       	rjmp	.+4      	; 0x7f84 <vfprintf+0x2b4>
    7f80:	90 e0       	ldi	r25, 0x00	; 0
    7f82:	80 e0       	ldi	r24, 0x00	; 0
    7f84:	29 2e       	mov	r2, r25
    7f86:	38 2e       	mov	r3, r24
    7f88:	20 e0       	ldi	r18, 0x00	; 0
    7f8a:	30 e0       	ldi	r19, 0x00	; 0
    7f8c:	a2 01       	movw	r20, r4
    7f8e:	4e 19       	sub	r20, r14
    7f90:	51 09       	sbc	r21, r1
    7f92:	5d 87       	std	Y+13, r21	; 0x0d
    7f94:	4c 87       	std	Y+12, r20	; 0x0c
    7f96:	a2 01       	movw	r20, r4
    7f98:	42 19       	sub	r20, r2
    7f9a:	53 09       	sbc	r21, r3
    7f9c:	5f 87       	std	Y+15, r21	; 0x0f
    7f9e:	4e 87       	std	Y+14, r20	; 0x0e
    7fa0:	61 2f       	mov	r22, r17
    7fa2:	70 e0       	ldi	r23, 0x00	; 0
    7fa4:	44 27       	eor	r20, r20
    7fa6:	55 27       	eor	r21, r21
    7fa8:	46 1b       	sub	r20, r22
    7faa:	57 0b       	sbc	r21, r23
    7fac:	59 8b       	std	Y+17, r21	; 0x11
    7fae:	48 8b       	std	Y+16, r20	; 0x10
    7fb0:	5f ef       	ldi	r21, 0xFF	; 255
    7fb2:	25 16       	cp	r2, r21
    7fb4:	35 06       	cpc	r3, r21
    7fb6:	41 f4       	brne	.+16     	; 0x7fc8 <vfprintf+0x2f8>
    7fb8:	b6 01       	movw	r22, r12
    7fba:	8e e2       	ldi	r24, 0x2E	; 46
    7fbc:	90 e0       	ldi	r25, 0x00	; 0
    7fbe:	2a 8b       	std	Y+18, r18	; 0x12
    7fc0:	3b 8b       	std	Y+19, r19	; 0x13
    7fc2:	6d d4       	rcall	.+2266   	; 0x889e <fputc>
    7fc4:	3b 89       	ldd	r19, Y+19	; 0x13
    7fc6:	2a 89       	ldd	r18, Y+18	; 0x12
    7fc8:	42 14       	cp	r4, r2
    7fca:	53 04       	cpc	r5, r3
    7fcc:	6c f0       	brlt	.+26     	; 0x7fe8 <vfprintf+0x318>
    7fce:	4c 85       	ldd	r20, Y+12	; 0x0c
    7fd0:	5d 85       	ldd	r21, Y+13	; 0x0d
    7fd2:	42 15       	cp	r20, r2
    7fd4:	53 05       	cpc	r21, r3
    7fd6:	44 f4       	brge	.+16     	; 0x7fe8 <vfprintf+0x318>
    7fd8:	ee 85       	ldd	r30, Y+14	; 0x0e
    7fda:	ff 85       	ldd	r31, Y+15	; 0x0f
    7fdc:	e2 0f       	add	r30, r18
    7fde:	f3 1f       	adc	r31, r19
    7fe0:	e6 0d       	add	r30, r6
    7fe2:	f7 1d       	adc	r31, r7
    7fe4:	81 81       	ldd	r24, Z+1	; 0x01
    7fe6:	01 c0       	rjmp	.+2      	; 0x7fea <vfprintf+0x31a>
    7fe8:	80 e3       	ldi	r24, 0x30	; 48
    7fea:	51 e0       	ldi	r21, 0x01	; 1
    7fec:	25 1a       	sub	r2, r21
    7fee:	31 08       	sbc	r3, r1
    7ff0:	2f 5f       	subi	r18, 0xFF	; 255
    7ff2:	3f 4f       	sbci	r19, 0xFF	; 255
    7ff4:	48 89       	ldd	r20, Y+16	; 0x10
    7ff6:	59 89       	ldd	r21, Y+17	; 0x11
    7ff8:	24 16       	cp	r2, r20
    7ffa:	35 06       	cpc	r3, r21
    7ffc:	44 f0       	brlt	.+16     	; 0x800e <vfprintf+0x33e>
    7ffe:	b6 01       	movw	r22, r12
    8000:	90 e0       	ldi	r25, 0x00	; 0
    8002:	2a 8b       	std	Y+18, r18	; 0x12
    8004:	3b 8b       	std	Y+19, r19	; 0x13
    8006:	4b d4       	rcall	.+2198   	; 0x889e <fputc>
    8008:	2a 89       	ldd	r18, Y+18	; 0x12
    800a:	3b 89       	ldd	r19, Y+19	; 0x13
    800c:	d1 cf       	rjmp	.-94     	; 0x7fb0 <vfprintf+0x2e0>
    800e:	24 14       	cp	r2, r4
    8010:	35 04       	cpc	r3, r5
    8012:	39 f4       	brne	.+14     	; 0x8022 <vfprintf+0x352>
    8014:	9a 81       	ldd	r25, Y+2	; 0x02
    8016:	96 33       	cpi	r25, 0x36	; 54
    8018:	18 f4       	brcc	.+6      	; 0x8020 <vfprintf+0x350>
    801a:	95 33       	cpi	r25, 0x35	; 53
    801c:	11 f4       	brne	.+4      	; 0x8022 <vfprintf+0x352>
    801e:	04 ff       	sbrs	r16, 4
    8020:	81 e3       	ldi	r24, 0x31	; 49
    8022:	b6 01       	movw	r22, r12
    8024:	90 e0       	ldi	r25, 0x00	; 0
    8026:	45 c0       	rjmp	.+138    	; 0x80b2 <vfprintf+0x3e2>
    8028:	8a 81       	ldd	r24, Y+2	; 0x02
    802a:	81 33       	cpi	r24, 0x31	; 49
    802c:	09 f0       	breq	.+2      	; 0x8030 <vfprintf+0x360>
    802e:	0f 7e       	andi	r16, 0xEF	; 239
    8030:	b6 01       	movw	r22, r12
    8032:	90 e0       	ldi	r25, 0x00	; 0
    8034:	34 d4       	rcall	.+2152   	; 0x889e <fputc>
    8036:	11 11       	cpse	r17, r1
    8038:	05 c0       	rjmp	.+10     	; 0x8044 <vfprintf+0x374>
    803a:	34 fc       	sbrc	r3, 4
    803c:	16 c0       	rjmp	.+44     	; 0x806a <vfprintf+0x39a>
    803e:	85 e6       	ldi	r24, 0x65	; 101
    8040:	90 e0       	ldi	r25, 0x00	; 0
    8042:	15 c0       	rjmp	.+42     	; 0x806e <vfprintf+0x39e>
    8044:	b6 01       	movw	r22, r12
    8046:	8e e2       	ldi	r24, 0x2E	; 46
    8048:	90 e0       	ldi	r25, 0x00	; 0
    804a:	29 d4       	rcall	.+2130   	; 0x889e <fputc>
    804c:	82 e0       	ldi	r24, 0x02	; 2
    804e:	ee 24       	eor	r14, r14
    8050:	e3 94       	inc	r14
    8052:	e8 0e       	add	r14, r24
    8054:	f3 01       	movw	r30, r6
    8056:	e8 0f       	add	r30, r24
    8058:	f1 1d       	adc	r31, r1
    805a:	80 81       	ld	r24, Z
    805c:	b6 01       	movw	r22, r12
    805e:	90 e0       	ldi	r25, 0x00	; 0
    8060:	1e d4       	rcall	.+2108   	; 0x889e <fputc>
    8062:	11 50       	subi	r17, 0x01	; 1
    8064:	8e 2d       	mov	r24, r14
    8066:	99 f7       	brne	.-26     	; 0x804e <vfprintf+0x37e>
    8068:	e8 cf       	rjmp	.-48     	; 0x803a <vfprintf+0x36a>
    806a:	85 e4       	ldi	r24, 0x45	; 69
    806c:	90 e0       	ldi	r25, 0x00	; 0
    806e:	b6 01       	movw	r22, r12
    8070:	16 d4       	rcall	.+2092   	; 0x889e <fputc>
    8072:	57 fc       	sbrc	r5, 7
    8074:	05 c0       	rjmp	.+10     	; 0x8080 <vfprintf+0x3b0>
    8076:	41 14       	cp	r4, r1
    8078:	51 04       	cpc	r5, r1
    807a:	39 f4       	brne	.+14     	; 0x808a <vfprintf+0x3ba>
    807c:	04 ff       	sbrs	r16, 4
    807e:	05 c0       	rjmp	.+10     	; 0x808a <vfprintf+0x3ba>
    8080:	51 94       	neg	r5
    8082:	41 94       	neg	r4
    8084:	51 08       	sbc	r5, r1
    8086:	8d e2       	ldi	r24, 0x2D	; 45
    8088:	01 c0       	rjmp	.+2      	; 0x808c <vfprintf+0x3bc>
    808a:	8b e2       	ldi	r24, 0x2B	; 43
    808c:	b6 01       	movw	r22, r12
    808e:	90 e0       	ldi	r25, 0x00	; 0
    8090:	06 d4       	rcall	.+2060   	; 0x889e <fputc>
    8092:	80 e3       	ldi	r24, 0x30	; 48
    8094:	9a e0       	ldi	r25, 0x0A	; 10
    8096:	49 16       	cp	r4, r25
    8098:	51 04       	cpc	r5, r1
    809a:	2c f0       	brlt	.+10     	; 0x80a6 <vfprintf+0x3d6>
    809c:	8f 5f       	subi	r24, 0xFF	; 255
    809e:	5a e0       	ldi	r21, 0x0A	; 10
    80a0:	45 1a       	sub	r4, r21
    80a2:	51 08       	sbc	r5, r1
    80a4:	f7 cf       	rjmp	.-18     	; 0x8094 <vfprintf+0x3c4>
    80a6:	b6 01       	movw	r22, r12
    80a8:	90 e0       	ldi	r25, 0x00	; 0
    80aa:	f9 d3       	rcall	.+2034   	; 0x889e <fputc>
    80ac:	b6 01       	movw	r22, r12
    80ae:	c2 01       	movw	r24, r4
    80b0:	c0 96       	adiw	r24, 0x30	; 48
    80b2:	f5 d3       	rcall	.+2026   	; 0x889e <fputc>
    80b4:	4c c1       	rjmp	.+664    	; 0x834e <vfprintf+0x67e>
    80b6:	83 36       	cpi	r24, 0x63	; 99
    80b8:	31 f0       	breq	.+12     	; 0x80c6 <vfprintf+0x3f6>
    80ba:	83 37       	cpi	r24, 0x73	; 115
    80bc:	79 f0       	breq	.+30     	; 0x80dc <vfprintf+0x40c>
    80be:	83 35       	cpi	r24, 0x53	; 83
    80c0:	09 f0       	breq	.+2      	; 0x80c4 <vfprintf+0x3f4>
    80c2:	54 c0       	rjmp	.+168    	; 0x816c <vfprintf+0x49c>
    80c4:	20 c0       	rjmp	.+64     	; 0x8106 <vfprintf+0x436>
    80c6:	52 01       	movw	r10, r4
    80c8:	e2 e0       	ldi	r30, 0x02	; 2
    80ca:	ae 0e       	add	r10, r30
    80cc:	b1 1c       	adc	r11, r1
    80ce:	f2 01       	movw	r30, r4
    80d0:	80 81       	ld	r24, Z
    80d2:	89 83       	std	Y+1, r24	; 0x01
    80d4:	01 e0       	ldi	r16, 0x01	; 1
    80d6:	10 e0       	ldi	r17, 0x00	; 0
    80d8:	23 01       	movw	r4, r6
    80da:	13 c0       	rjmp	.+38     	; 0x8102 <vfprintf+0x432>
    80dc:	52 01       	movw	r10, r4
    80de:	f2 e0       	ldi	r31, 0x02	; 2
    80e0:	af 0e       	add	r10, r31
    80e2:	b1 1c       	adc	r11, r1
    80e4:	f2 01       	movw	r30, r4
    80e6:	40 80       	ld	r4, Z
    80e8:	51 80       	ldd	r5, Z+1	; 0x01
    80ea:	26 ff       	sbrs	r18, 6
    80ec:	03 c0       	rjmp	.+6      	; 0x80f4 <vfprintf+0x424>
    80ee:	61 2f       	mov	r22, r17
    80f0:	70 e0       	ldi	r23, 0x00	; 0
    80f2:	02 c0       	rjmp	.+4      	; 0x80f8 <vfprintf+0x428>
    80f4:	6f ef       	ldi	r22, 0xFF	; 255
    80f6:	7f ef       	ldi	r23, 0xFF	; 255
    80f8:	c2 01       	movw	r24, r4
    80fa:	2a 8b       	std	Y+18, r18	; 0x12
    80fc:	c5 d3       	rcall	.+1930   	; 0x8888 <strnlen>
    80fe:	8c 01       	movw	r16, r24
    8100:	2a 89       	ldd	r18, Y+18	; 0x12
    8102:	2f 77       	andi	r18, 0x7F	; 127
    8104:	14 c0       	rjmp	.+40     	; 0x812e <vfprintf+0x45e>
    8106:	52 01       	movw	r10, r4
    8108:	f2 e0       	ldi	r31, 0x02	; 2
    810a:	af 0e       	add	r10, r31
    810c:	b1 1c       	adc	r11, r1
    810e:	f2 01       	movw	r30, r4
    8110:	40 80       	ld	r4, Z
    8112:	51 80       	ldd	r5, Z+1	; 0x01
    8114:	26 ff       	sbrs	r18, 6
    8116:	03 c0       	rjmp	.+6      	; 0x811e <vfprintf+0x44e>
    8118:	61 2f       	mov	r22, r17
    811a:	70 e0       	ldi	r23, 0x00	; 0
    811c:	02 c0       	rjmp	.+4      	; 0x8122 <vfprintf+0x452>
    811e:	6f ef       	ldi	r22, 0xFF	; 255
    8120:	7f ef       	ldi	r23, 0xFF	; 255
    8122:	c2 01       	movw	r24, r4
    8124:	2a 8b       	std	Y+18, r18	; 0x12
    8126:	a5 d3       	rcall	.+1866   	; 0x8872 <strnlen_P>
    8128:	8c 01       	movw	r16, r24
    812a:	2a 89       	ldd	r18, Y+18	; 0x12
    812c:	20 68       	ori	r18, 0x80	; 128
    812e:	32 2e       	mov	r3, r18
    8130:	23 fd       	sbrc	r18, 3
    8132:	18 c0       	rjmp	.+48     	; 0x8164 <vfprintf+0x494>
    8134:	8f 2d       	mov	r24, r15
    8136:	90 e0       	ldi	r25, 0x00	; 0
    8138:	08 17       	cp	r16, r24
    813a:	19 07       	cpc	r17, r25
    813c:	98 f4       	brcc	.+38     	; 0x8164 <vfprintf+0x494>
    813e:	b6 01       	movw	r22, r12
    8140:	80 e2       	ldi	r24, 0x20	; 32
    8142:	90 e0       	ldi	r25, 0x00	; 0
    8144:	ac d3       	rcall	.+1880   	; 0x889e <fputc>
    8146:	fa 94       	dec	r15
    8148:	f5 cf       	rjmp	.-22     	; 0x8134 <vfprintf+0x464>
    814a:	f2 01       	movw	r30, r4
    814c:	37 fc       	sbrc	r3, 7
    814e:	85 91       	lpm	r24, Z+
    8150:	37 fe       	sbrs	r3, 7
    8152:	81 91       	ld	r24, Z+
    8154:	2f 01       	movw	r4, r30
    8156:	b6 01       	movw	r22, r12
    8158:	90 e0       	ldi	r25, 0x00	; 0
    815a:	a1 d3       	rcall	.+1858   	; 0x889e <fputc>
    815c:	f1 10       	cpse	r15, r1
    815e:	fa 94       	dec	r15
    8160:	01 50       	subi	r16, 0x01	; 1
    8162:	11 09       	sbc	r17, r1
    8164:	01 15       	cp	r16, r1
    8166:	11 05       	cpc	r17, r1
    8168:	81 f7       	brne	.-32     	; 0x814a <vfprintf+0x47a>
    816a:	f1 c0       	rjmp	.+482    	; 0x834e <vfprintf+0x67e>
    816c:	84 36       	cpi	r24, 0x64	; 100
    816e:	11 f0       	breq	.+4      	; 0x8174 <vfprintf+0x4a4>
    8170:	89 36       	cpi	r24, 0x69	; 105
    8172:	51 f5       	brne	.+84     	; 0x81c8 <vfprintf+0x4f8>
    8174:	52 01       	movw	r10, r4
    8176:	27 ff       	sbrs	r18, 7
    8178:	09 c0       	rjmp	.+18     	; 0x818c <vfprintf+0x4bc>
    817a:	f4 e0       	ldi	r31, 0x04	; 4
    817c:	af 0e       	add	r10, r31
    817e:	b1 1c       	adc	r11, r1
    8180:	f2 01       	movw	r30, r4
    8182:	60 81       	ld	r22, Z
    8184:	71 81       	ldd	r23, Z+1	; 0x01
    8186:	82 81       	ldd	r24, Z+2	; 0x02
    8188:	93 81       	ldd	r25, Z+3	; 0x03
    818a:	0a c0       	rjmp	.+20     	; 0x81a0 <vfprintf+0x4d0>
    818c:	f2 e0       	ldi	r31, 0x02	; 2
    818e:	af 0e       	add	r10, r31
    8190:	b1 1c       	adc	r11, r1
    8192:	f2 01       	movw	r30, r4
    8194:	60 81       	ld	r22, Z
    8196:	71 81       	ldd	r23, Z+1	; 0x01
    8198:	07 2e       	mov	r0, r23
    819a:	00 0c       	add	r0, r0
    819c:	88 0b       	sbc	r24, r24
    819e:	99 0b       	sbc	r25, r25
    81a0:	2f 76       	andi	r18, 0x6F	; 111
    81a2:	32 2e       	mov	r3, r18
    81a4:	97 ff       	sbrs	r25, 7
    81a6:	09 c0       	rjmp	.+18     	; 0x81ba <vfprintf+0x4ea>
    81a8:	90 95       	com	r25
    81aa:	80 95       	com	r24
    81ac:	70 95       	com	r23
    81ae:	61 95       	neg	r22
    81b0:	7f 4f       	sbci	r23, 0xFF	; 255
    81b2:	8f 4f       	sbci	r24, 0xFF	; 255
    81b4:	9f 4f       	sbci	r25, 0xFF	; 255
    81b6:	20 68       	ori	r18, 0x80	; 128
    81b8:	32 2e       	mov	r3, r18
    81ba:	2a e0       	ldi	r18, 0x0A	; 10
    81bc:	30 e0       	ldi	r19, 0x00	; 0
    81be:	a3 01       	movw	r20, r6
    81c0:	d5 d3       	rcall	.+1962   	; 0x896c <__ultoa_invert>
    81c2:	e8 2e       	mov	r14, r24
    81c4:	e6 18       	sub	r14, r6
    81c6:	3e c0       	rjmp	.+124    	; 0x8244 <vfprintf+0x574>
    81c8:	02 2f       	mov	r16, r18
    81ca:	85 37       	cpi	r24, 0x75	; 117
    81cc:	21 f4       	brne	.+8      	; 0x81d6 <vfprintf+0x506>
    81ce:	0f 7e       	andi	r16, 0xEF	; 239
    81d0:	2a e0       	ldi	r18, 0x0A	; 10
    81d2:	30 e0       	ldi	r19, 0x00	; 0
    81d4:	1d c0       	rjmp	.+58     	; 0x8210 <vfprintf+0x540>
    81d6:	09 7f       	andi	r16, 0xF9	; 249
    81d8:	8f 36       	cpi	r24, 0x6F	; 111
    81da:	91 f0       	breq	.+36     	; 0x8200 <vfprintf+0x530>
    81dc:	18 f4       	brcc	.+6      	; 0x81e4 <vfprintf+0x514>
    81de:	88 35       	cpi	r24, 0x58	; 88
    81e0:	59 f0       	breq	.+22     	; 0x81f8 <vfprintf+0x528>
    81e2:	be c0       	rjmp	.+380    	; 0x8360 <vfprintf+0x690>
    81e4:	80 37       	cpi	r24, 0x70	; 112
    81e6:	19 f0       	breq	.+6      	; 0x81ee <vfprintf+0x51e>
    81e8:	88 37       	cpi	r24, 0x78	; 120
    81ea:	11 f0       	breq	.+4      	; 0x81f0 <vfprintf+0x520>
    81ec:	b9 c0       	rjmp	.+370    	; 0x8360 <vfprintf+0x690>
    81ee:	00 61       	ori	r16, 0x10	; 16
    81f0:	04 ff       	sbrs	r16, 4
    81f2:	09 c0       	rjmp	.+18     	; 0x8206 <vfprintf+0x536>
    81f4:	04 60       	ori	r16, 0x04	; 4
    81f6:	07 c0       	rjmp	.+14     	; 0x8206 <vfprintf+0x536>
    81f8:	24 ff       	sbrs	r18, 4
    81fa:	08 c0       	rjmp	.+16     	; 0x820c <vfprintf+0x53c>
    81fc:	06 60       	ori	r16, 0x06	; 6
    81fe:	06 c0       	rjmp	.+12     	; 0x820c <vfprintf+0x53c>
    8200:	28 e0       	ldi	r18, 0x08	; 8
    8202:	30 e0       	ldi	r19, 0x00	; 0
    8204:	05 c0       	rjmp	.+10     	; 0x8210 <vfprintf+0x540>
    8206:	20 e1       	ldi	r18, 0x10	; 16
    8208:	30 e0       	ldi	r19, 0x00	; 0
    820a:	02 c0       	rjmp	.+4      	; 0x8210 <vfprintf+0x540>
    820c:	20 e1       	ldi	r18, 0x10	; 16
    820e:	32 e0       	ldi	r19, 0x02	; 2
    8210:	52 01       	movw	r10, r4
    8212:	07 ff       	sbrs	r16, 7
    8214:	09 c0       	rjmp	.+18     	; 0x8228 <vfprintf+0x558>
    8216:	f4 e0       	ldi	r31, 0x04	; 4
    8218:	af 0e       	add	r10, r31
    821a:	b1 1c       	adc	r11, r1
    821c:	f2 01       	movw	r30, r4
    821e:	60 81       	ld	r22, Z
    8220:	71 81       	ldd	r23, Z+1	; 0x01
    8222:	82 81       	ldd	r24, Z+2	; 0x02
    8224:	93 81       	ldd	r25, Z+3	; 0x03
    8226:	08 c0       	rjmp	.+16     	; 0x8238 <vfprintf+0x568>
    8228:	f2 e0       	ldi	r31, 0x02	; 2
    822a:	af 0e       	add	r10, r31
    822c:	b1 1c       	adc	r11, r1
    822e:	f2 01       	movw	r30, r4
    8230:	60 81       	ld	r22, Z
    8232:	71 81       	ldd	r23, Z+1	; 0x01
    8234:	80 e0       	ldi	r24, 0x00	; 0
    8236:	90 e0       	ldi	r25, 0x00	; 0
    8238:	a3 01       	movw	r20, r6
    823a:	98 d3       	rcall	.+1840   	; 0x896c <__ultoa_invert>
    823c:	e8 2e       	mov	r14, r24
    823e:	e6 18       	sub	r14, r6
    8240:	0f 77       	andi	r16, 0x7F	; 127
    8242:	30 2e       	mov	r3, r16
    8244:	36 fe       	sbrs	r3, 6
    8246:	0b c0       	rjmp	.+22     	; 0x825e <vfprintf+0x58e>
    8248:	33 2d       	mov	r19, r3
    824a:	3e 7f       	andi	r19, 0xFE	; 254
    824c:	e1 16       	cp	r14, r17
    824e:	50 f4       	brcc	.+20     	; 0x8264 <vfprintf+0x594>
    8250:	34 fe       	sbrs	r3, 4
    8252:	0a c0       	rjmp	.+20     	; 0x8268 <vfprintf+0x598>
    8254:	32 fc       	sbrc	r3, 2
    8256:	08 c0       	rjmp	.+16     	; 0x8268 <vfprintf+0x598>
    8258:	33 2d       	mov	r19, r3
    825a:	3e 7e       	andi	r19, 0xEE	; 238
    825c:	05 c0       	rjmp	.+10     	; 0x8268 <vfprintf+0x598>
    825e:	0e 2d       	mov	r16, r14
    8260:	33 2d       	mov	r19, r3
    8262:	03 c0       	rjmp	.+6      	; 0x826a <vfprintf+0x59a>
    8264:	0e 2d       	mov	r16, r14
    8266:	01 c0       	rjmp	.+2      	; 0x826a <vfprintf+0x59a>
    8268:	01 2f       	mov	r16, r17
    826a:	34 ff       	sbrs	r19, 4
    826c:	0c c0       	rjmp	.+24     	; 0x8286 <vfprintf+0x5b6>
    826e:	fe 01       	movw	r30, r28
    8270:	ee 0d       	add	r30, r14
    8272:	f1 1d       	adc	r31, r1
    8274:	80 81       	ld	r24, Z
    8276:	80 33       	cpi	r24, 0x30	; 48
    8278:	11 f4       	brne	.+4      	; 0x827e <vfprintf+0x5ae>
    827a:	39 7e       	andi	r19, 0xE9	; 233
    827c:	08 c0       	rjmp	.+16     	; 0x828e <vfprintf+0x5be>
    827e:	32 ff       	sbrs	r19, 2
    8280:	05 c0       	rjmp	.+10     	; 0x828c <vfprintf+0x5bc>
    8282:	0e 5f       	subi	r16, 0xFE	; 254
    8284:	04 c0       	rjmp	.+8      	; 0x828e <vfprintf+0x5be>
    8286:	83 2f       	mov	r24, r19
    8288:	86 78       	andi	r24, 0x86	; 134
    828a:	09 f0       	breq	.+2      	; 0x828e <vfprintf+0x5be>
    828c:	0f 5f       	subi	r16, 0xFF	; 255
    828e:	33 fd       	sbrc	r19, 3
    8290:	12 c0       	rjmp	.+36     	; 0x82b6 <vfprintf+0x5e6>
    8292:	30 ff       	sbrs	r19, 0
    8294:	06 c0       	rjmp	.+12     	; 0x82a2 <vfprintf+0x5d2>
    8296:	1e 2d       	mov	r17, r14
    8298:	0f 15       	cp	r16, r15
    829a:	18 f4       	brcc	.+6      	; 0x82a2 <vfprintf+0x5d2>
    829c:	1f 0d       	add	r17, r15
    829e:	10 1b       	sub	r17, r16
    82a0:	0f 2d       	mov	r16, r15
    82a2:	0f 15       	cp	r16, r15
    82a4:	60 f4       	brcc	.+24     	; 0x82be <vfprintf+0x5ee>
    82a6:	b6 01       	movw	r22, r12
    82a8:	80 e2       	ldi	r24, 0x20	; 32
    82aa:	90 e0       	ldi	r25, 0x00	; 0
    82ac:	3b 8b       	std	Y+19, r19	; 0x13
    82ae:	f7 d2       	rcall	.+1518   	; 0x889e <fputc>
    82b0:	0f 5f       	subi	r16, 0xFF	; 255
    82b2:	3b 89       	ldd	r19, Y+19	; 0x13
    82b4:	f6 cf       	rjmp	.-20     	; 0x82a2 <vfprintf+0x5d2>
    82b6:	0f 15       	cp	r16, r15
    82b8:	10 f4       	brcc	.+4      	; 0x82be <vfprintf+0x5ee>
    82ba:	f0 1a       	sub	r15, r16
    82bc:	01 c0       	rjmp	.+2      	; 0x82c0 <vfprintf+0x5f0>
    82be:	f1 2c       	mov	r15, r1
    82c0:	34 ff       	sbrs	r19, 4
    82c2:	11 c0       	rjmp	.+34     	; 0x82e6 <vfprintf+0x616>
    82c4:	b6 01       	movw	r22, r12
    82c6:	80 e3       	ldi	r24, 0x30	; 48
    82c8:	90 e0       	ldi	r25, 0x00	; 0
    82ca:	3b 8b       	std	Y+19, r19	; 0x13
    82cc:	e8 d2       	rcall	.+1488   	; 0x889e <fputc>
    82ce:	3b 89       	ldd	r19, Y+19	; 0x13
    82d0:	32 ff       	sbrs	r19, 2
    82d2:	16 c0       	rjmp	.+44     	; 0x8300 <vfprintf+0x630>
    82d4:	31 fd       	sbrc	r19, 1
    82d6:	03 c0       	rjmp	.+6      	; 0x82de <vfprintf+0x60e>
    82d8:	88 e7       	ldi	r24, 0x78	; 120
    82da:	90 e0       	ldi	r25, 0x00	; 0
    82dc:	02 c0       	rjmp	.+4      	; 0x82e2 <vfprintf+0x612>
    82de:	88 e5       	ldi	r24, 0x58	; 88
    82e0:	90 e0       	ldi	r25, 0x00	; 0
    82e2:	b6 01       	movw	r22, r12
    82e4:	0c c0       	rjmp	.+24     	; 0x82fe <vfprintf+0x62e>
    82e6:	83 2f       	mov	r24, r19
    82e8:	86 78       	andi	r24, 0x86	; 134
    82ea:	51 f0       	breq	.+20     	; 0x8300 <vfprintf+0x630>
    82ec:	31 ff       	sbrs	r19, 1
    82ee:	02 c0       	rjmp	.+4      	; 0x82f4 <vfprintf+0x624>
    82f0:	8b e2       	ldi	r24, 0x2B	; 43
    82f2:	01 c0       	rjmp	.+2      	; 0x82f6 <vfprintf+0x626>
    82f4:	80 e2       	ldi	r24, 0x20	; 32
    82f6:	37 fd       	sbrc	r19, 7
    82f8:	8d e2       	ldi	r24, 0x2D	; 45
    82fa:	b6 01       	movw	r22, r12
    82fc:	90 e0       	ldi	r25, 0x00	; 0
    82fe:	cf d2       	rcall	.+1438   	; 0x889e <fputc>
    8300:	e1 16       	cp	r14, r17
    8302:	30 f4       	brcc	.+12     	; 0x8310 <vfprintf+0x640>
    8304:	b6 01       	movw	r22, r12
    8306:	80 e3       	ldi	r24, 0x30	; 48
    8308:	90 e0       	ldi	r25, 0x00	; 0
    830a:	c9 d2       	rcall	.+1426   	; 0x889e <fputc>
    830c:	11 50       	subi	r17, 0x01	; 1
    830e:	f8 cf       	rjmp	.-16     	; 0x8300 <vfprintf+0x630>
    8310:	ea 94       	dec	r14
    8312:	f3 01       	movw	r30, r6
    8314:	ee 0d       	add	r30, r14
    8316:	f1 1d       	adc	r31, r1
    8318:	80 81       	ld	r24, Z
    831a:	b6 01       	movw	r22, r12
    831c:	90 e0       	ldi	r25, 0x00	; 0
    831e:	bf d2       	rcall	.+1406   	; 0x889e <fputc>
    8320:	e1 10       	cpse	r14, r1
    8322:	f6 cf       	rjmp	.-20     	; 0x8310 <vfprintf+0x640>
    8324:	14 c0       	rjmp	.+40     	; 0x834e <vfprintf+0x67e>
    8326:	f4 e0       	ldi	r31, 0x04	; 4
    8328:	ff 15       	cp	r31, r15
    832a:	48 f5       	brcc	.+82     	; 0x837e <vfprintf+0x6ae>
    832c:	84 e0       	ldi	r24, 0x04	; 4
    832e:	f8 1a       	sub	r15, r24
    8330:	33 fe       	sbrs	r3, 3
    8332:	1d c0       	rjmp	.+58     	; 0x836e <vfprintf+0x69e>
    8334:	21 10       	cpse	r2, r1
    8336:	24 c0       	rjmp	.+72     	; 0x8380 <vfprintf+0x6b0>
    8338:	03 ff       	sbrs	r16, 3
    833a:	27 c0       	rjmp	.+78     	; 0x838a <vfprintf+0x6ba>
    833c:	0c ea       	ldi	r16, 0xAC	; 172
    833e:	15 e0       	ldi	r17, 0x05	; 5
    8340:	f3 2d       	mov	r31, r3
    8342:	f0 71       	andi	r31, 0x10	; 16
    8344:	3f 2e       	mov	r3, r31
    8346:	f8 01       	movw	r30, r16
    8348:	84 91       	lpm	r24, Z
    834a:	81 11       	cpse	r24, r1
    834c:	21 c0       	rjmp	.+66     	; 0x8390 <vfprintf+0x6c0>
    834e:	ff 20       	and	r15, r15
    8350:	09 f4       	brne	.+2      	; 0x8354 <vfprintf+0x684>
    8352:	fd cc       	rjmp	.-1542   	; 0x7d4e <vfprintf+0x7e>
    8354:	b6 01       	movw	r22, r12
    8356:	80 e2       	ldi	r24, 0x20	; 32
    8358:	90 e0       	ldi	r25, 0x00	; 0
    835a:	a1 d2       	rcall	.+1346   	; 0x889e <fputc>
    835c:	fa 94       	dec	r15
    835e:	f7 cf       	rjmp	.-18     	; 0x834e <vfprintf+0x67e>
    8360:	f6 01       	movw	r30, r12
    8362:	86 81       	ldd	r24, Z+6	; 0x06
    8364:	97 81       	ldd	r25, Z+7	; 0x07
    8366:	23 c0       	rjmp	.+70     	; 0x83ae <vfprintf+0x6de>
    8368:	8f ef       	ldi	r24, 0xFF	; 255
    836a:	9f ef       	ldi	r25, 0xFF	; 255
    836c:	20 c0       	rjmp	.+64     	; 0x83ae <vfprintf+0x6de>
    836e:	b6 01       	movw	r22, r12
    8370:	80 e2       	ldi	r24, 0x20	; 32
    8372:	90 e0       	ldi	r25, 0x00	; 0
    8374:	94 d2       	rcall	.+1320   	; 0x889e <fputc>
    8376:	fa 94       	dec	r15
    8378:	f1 10       	cpse	r15, r1
    837a:	f9 cf       	rjmp	.-14     	; 0x836e <vfprintf+0x69e>
    837c:	db cf       	rjmp	.-74     	; 0x8334 <vfprintf+0x664>
    837e:	f1 2c       	mov	r15, r1
    8380:	b6 01       	movw	r22, r12
    8382:	82 2d       	mov	r24, r2
    8384:	90 e0       	ldi	r25, 0x00	; 0
    8386:	8b d2       	rcall	.+1302   	; 0x889e <fputc>
    8388:	d7 cf       	rjmp	.-82     	; 0x8338 <vfprintf+0x668>
    838a:	00 eb       	ldi	r16, 0xB0	; 176
    838c:	15 e0       	ldi	r17, 0x05	; 5
    838e:	d8 cf       	rjmp	.-80     	; 0x8340 <vfprintf+0x670>
    8390:	31 10       	cpse	r3, r1
    8392:	80 52       	subi	r24, 0x20	; 32
    8394:	b6 01       	movw	r22, r12
    8396:	90 e0       	ldi	r25, 0x00	; 0
    8398:	82 d2       	rcall	.+1284   	; 0x889e <fputc>
    839a:	0f 5f       	subi	r16, 0xFF	; 255
    839c:	1f 4f       	sbci	r17, 0xFF	; 255
    839e:	d3 cf       	rjmp	.-90     	; 0x8346 <vfprintf+0x676>
    83a0:	23 e0       	ldi	r18, 0x03	; 3
    83a2:	2f 15       	cp	r18, r15
    83a4:	10 f4       	brcc	.+4      	; 0x83aa <vfprintf+0x6da>
    83a6:	83 e0       	ldi	r24, 0x03	; 3
    83a8:	c2 cf       	rjmp	.-124    	; 0x832e <vfprintf+0x65e>
    83aa:	f1 2c       	mov	r15, r1
    83ac:	c5 cf       	rjmp	.-118    	; 0x8338 <vfprintf+0x668>
    83ae:	63 96       	adiw	r28, 0x13	; 19
    83b0:	0f b6       	in	r0, 0x3f	; 63
    83b2:	f8 94       	cli
    83b4:	de bf       	out	0x3e, r29	; 62
    83b6:	0f be       	out	0x3f, r0	; 63
    83b8:	cd bf       	out	0x3d, r28	; 61
    83ba:	df 91       	pop	r29
    83bc:	cf 91       	pop	r28
    83be:	1f 91       	pop	r17
    83c0:	0f 91       	pop	r16
    83c2:	ff 90       	pop	r15
    83c4:	ef 90       	pop	r14
    83c6:	df 90       	pop	r13
    83c8:	cf 90       	pop	r12
    83ca:	bf 90       	pop	r11
    83cc:	af 90       	pop	r10
    83ce:	9f 90       	pop	r9
    83d0:	8f 90       	pop	r8
    83d2:	7f 90       	pop	r7
    83d4:	6f 90       	pop	r6
    83d6:	5f 90       	pop	r5
    83d8:	4f 90       	pop	r4
    83da:	3f 90       	pop	r3
    83dc:	2f 90       	pop	r2
    83de:	08 95       	ret

000083e0 <__udivmodsi4>:
    83e0:	a1 e2       	ldi	r26, 0x21	; 33
    83e2:	1a 2e       	mov	r1, r26
    83e4:	aa 1b       	sub	r26, r26
    83e6:	bb 1b       	sub	r27, r27
    83e8:	fd 01       	movw	r30, r26
    83ea:	0d c0       	rjmp	.+26     	; 0x8406 <__udivmodsi4_ep>

000083ec <__udivmodsi4_loop>:
    83ec:	aa 1f       	adc	r26, r26
    83ee:	bb 1f       	adc	r27, r27
    83f0:	ee 1f       	adc	r30, r30
    83f2:	ff 1f       	adc	r31, r31
    83f4:	a2 17       	cp	r26, r18
    83f6:	b3 07       	cpc	r27, r19
    83f8:	e4 07       	cpc	r30, r20
    83fa:	f5 07       	cpc	r31, r21
    83fc:	20 f0       	brcs	.+8      	; 0x8406 <__udivmodsi4_ep>
    83fe:	a2 1b       	sub	r26, r18
    8400:	b3 0b       	sbc	r27, r19
    8402:	e4 0b       	sbc	r30, r20
    8404:	f5 0b       	sbc	r31, r21

00008406 <__udivmodsi4_ep>:
    8406:	66 1f       	adc	r22, r22
    8408:	77 1f       	adc	r23, r23
    840a:	88 1f       	adc	r24, r24
    840c:	99 1f       	adc	r25, r25
    840e:	1a 94       	dec	r1
    8410:	69 f7       	brne	.-38     	; 0x83ec <__udivmodsi4_loop>
    8412:	60 95       	com	r22
    8414:	70 95       	com	r23
    8416:	80 95       	com	r24
    8418:	90 95       	com	r25
    841a:	9b 01       	movw	r18, r22
    841c:	ac 01       	movw	r20, r24
    841e:	bd 01       	movw	r22, r26
    8420:	cf 01       	movw	r24, r30
    8422:	08 95       	ret

00008424 <__tablejump2__>:
    8424:	ee 0f       	add	r30, r30
    8426:	ff 1f       	adc	r31, r31
    8428:	00 24       	eor	r0, r0
    842a:	00 1c       	adc	r0, r0
    842c:	0b be       	out	0x3b, r0	; 59
    842e:	07 90       	elpm	r0, Z+
    8430:	f6 91       	elpm	r31, Z
    8432:	e0 2d       	mov	r30, r0
    8434:	09 94       	ijmp

00008436 <__umulhisi3>:
    8436:	a2 9f       	mul	r26, r18
    8438:	b0 01       	movw	r22, r0
    843a:	b3 9f       	mul	r27, r19
    843c:	c0 01       	movw	r24, r0
    843e:	a3 9f       	mul	r26, r19
    8440:	70 0d       	add	r23, r0
    8442:	81 1d       	adc	r24, r1
    8444:	11 24       	eor	r1, r1
    8446:	91 1d       	adc	r25, r1
    8448:	b2 9f       	mul	r27, r18
    844a:	70 0d       	add	r23, r0
    844c:	81 1d       	adc	r24, r1
    844e:	11 24       	eor	r1, r1
    8450:	91 1d       	adc	r25, r1
    8452:	08 95       	ret

00008454 <__muluhisi3>:
    8454:	f0 df       	rcall	.-32     	; 0x8436 <__umulhisi3>
    8456:	a5 9f       	mul	r26, r21
    8458:	90 0d       	add	r25, r0
    845a:	b4 9f       	mul	r27, r20
    845c:	90 0d       	add	r25, r0
    845e:	a4 9f       	mul	r26, r20
    8460:	80 0d       	add	r24, r0
    8462:	91 1d       	adc	r25, r1
    8464:	11 24       	eor	r1, r1
    8466:	08 95       	ret

00008468 <malloc>:
    8468:	cf 93       	push	r28
    846a:	df 93       	push	r29
    846c:	82 30       	cpi	r24, 0x02	; 2
    846e:	91 05       	cpc	r25, r1
    8470:	10 f4       	brcc	.+4      	; 0x8476 <malloc+0xe>
    8472:	82 e0       	ldi	r24, 0x02	; 2
    8474:	90 e0       	ldi	r25, 0x00	; 0
    8476:	e0 91 80 0d 	lds	r30, 0x0D80
    847a:	f0 91 81 0d 	lds	r31, 0x0D81
    847e:	20 e0       	ldi	r18, 0x00	; 0
    8480:	30 e0       	ldi	r19, 0x00	; 0
    8482:	c0 e0       	ldi	r28, 0x00	; 0
    8484:	d0 e0       	ldi	r29, 0x00	; 0
    8486:	30 97       	sbiw	r30, 0x00	; 0
    8488:	11 f1       	breq	.+68     	; 0x84ce <malloc+0x66>
    848a:	40 81       	ld	r20, Z
    848c:	51 81       	ldd	r21, Z+1	; 0x01
    848e:	48 17       	cp	r20, r24
    8490:	59 07       	cpc	r21, r25
    8492:	c0 f0       	brcs	.+48     	; 0x84c4 <malloc+0x5c>
    8494:	48 17       	cp	r20, r24
    8496:	59 07       	cpc	r21, r25
    8498:	61 f4       	brne	.+24     	; 0x84b2 <malloc+0x4a>
    849a:	82 81       	ldd	r24, Z+2	; 0x02
    849c:	93 81       	ldd	r25, Z+3	; 0x03
    849e:	20 97       	sbiw	r28, 0x00	; 0
    84a0:	19 f0       	breq	.+6      	; 0x84a8 <malloc+0x40>
    84a2:	9b 83       	std	Y+3, r25	; 0x03
    84a4:	8a 83       	std	Y+2, r24	; 0x02
    84a6:	2b c0       	rjmp	.+86     	; 0x84fe <malloc+0x96>
    84a8:	90 93 81 0d 	sts	0x0D81, r25
    84ac:	80 93 80 0d 	sts	0x0D80, r24
    84b0:	26 c0       	rjmp	.+76     	; 0x84fe <malloc+0x96>
    84b2:	21 15       	cp	r18, r1
    84b4:	31 05       	cpc	r19, r1
    84b6:	19 f0       	breq	.+6      	; 0x84be <malloc+0x56>
    84b8:	42 17       	cp	r20, r18
    84ba:	53 07       	cpc	r21, r19
    84bc:	18 f4       	brcc	.+6      	; 0x84c4 <malloc+0x5c>
    84be:	9a 01       	movw	r18, r20
    84c0:	be 01       	movw	r22, r28
    84c2:	df 01       	movw	r26, r30
    84c4:	ef 01       	movw	r28, r30
    84c6:	02 80       	ldd	r0, Z+2	; 0x02
    84c8:	f3 81       	ldd	r31, Z+3	; 0x03
    84ca:	e0 2d       	mov	r30, r0
    84cc:	dc cf       	rjmp	.-72     	; 0x8486 <malloc+0x1e>
    84ce:	21 15       	cp	r18, r1
    84d0:	31 05       	cpc	r19, r1
    84d2:	09 f1       	breq	.+66     	; 0x8516 <malloc+0xae>
    84d4:	28 1b       	sub	r18, r24
    84d6:	39 0b       	sbc	r19, r25
    84d8:	24 30       	cpi	r18, 0x04	; 4
    84da:	31 05       	cpc	r19, r1
    84dc:	90 f4       	brcc	.+36     	; 0x8502 <malloc+0x9a>
    84de:	12 96       	adiw	r26, 0x02	; 2
    84e0:	8d 91       	ld	r24, X+
    84e2:	9c 91       	ld	r25, X
    84e4:	13 97       	sbiw	r26, 0x03	; 3
    84e6:	61 15       	cp	r22, r1
    84e8:	71 05       	cpc	r23, r1
    84ea:	21 f0       	breq	.+8      	; 0x84f4 <malloc+0x8c>
    84ec:	fb 01       	movw	r30, r22
    84ee:	93 83       	std	Z+3, r25	; 0x03
    84f0:	82 83       	std	Z+2, r24	; 0x02
    84f2:	04 c0       	rjmp	.+8      	; 0x84fc <malloc+0x94>
    84f4:	90 93 81 0d 	sts	0x0D81, r25
    84f8:	80 93 80 0d 	sts	0x0D80, r24
    84fc:	fd 01       	movw	r30, r26
    84fe:	32 96       	adiw	r30, 0x02	; 2
    8500:	44 c0       	rjmp	.+136    	; 0x858a <malloc+0x122>
    8502:	fd 01       	movw	r30, r26
    8504:	e2 0f       	add	r30, r18
    8506:	f3 1f       	adc	r31, r19
    8508:	81 93       	st	Z+, r24
    850a:	91 93       	st	Z+, r25
    850c:	22 50       	subi	r18, 0x02	; 2
    850e:	31 09       	sbc	r19, r1
    8510:	2d 93       	st	X+, r18
    8512:	3c 93       	st	X, r19
    8514:	3a c0       	rjmp	.+116    	; 0x858a <malloc+0x122>
    8516:	20 91 7e 0d 	lds	r18, 0x0D7E
    851a:	30 91 7f 0d 	lds	r19, 0x0D7F
    851e:	23 2b       	or	r18, r19
    8520:	41 f4       	brne	.+16     	; 0x8532 <malloc+0xca>
    8522:	20 91 02 01 	lds	r18, 0x0102
    8526:	30 91 03 01 	lds	r19, 0x0103
    852a:	30 93 7f 0d 	sts	0x0D7F, r19
    852e:	20 93 7e 0d 	sts	0x0D7E, r18
    8532:	20 91 00 01 	lds	r18, 0x0100
    8536:	30 91 01 01 	lds	r19, 0x0101
    853a:	21 15       	cp	r18, r1
    853c:	31 05       	cpc	r19, r1
    853e:	41 f4       	brne	.+16     	; 0x8550 <malloc+0xe8>
    8540:	2d b7       	in	r18, 0x3d	; 61
    8542:	3e b7       	in	r19, 0x3e	; 62
    8544:	40 91 04 01 	lds	r20, 0x0104
    8548:	50 91 05 01 	lds	r21, 0x0105
    854c:	24 1b       	sub	r18, r20
    854e:	35 0b       	sbc	r19, r21
    8550:	e0 91 7e 0d 	lds	r30, 0x0D7E
    8554:	f0 91 7f 0d 	lds	r31, 0x0D7F
    8558:	e2 17       	cp	r30, r18
    855a:	f3 07       	cpc	r31, r19
    855c:	a0 f4       	brcc	.+40     	; 0x8586 <malloc+0x11e>
    855e:	2e 1b       	sub	r18, r30
    8560:	3f 0b       	sbc	r19, r31
    8562:	28 17       	cp	r18, r24
    8564:	39 07       	cpc	r19, r25
    8566:	78 f0       	brcs	.+30     	; 0x8586 <malloc+0x11e>
    8568:	ac 01       	movw	r20, r24
    856a:	4e 5f       	subi	r20, 0xFE	; 254
    856c:	5f 4f       	sbci	r21, 0xFF	; 255
    856e:	24 17       	cp	r18, r20
    8570:	35 07       	cpc	r19, r21
    8572:	48 f0       	brcs	.+18     	; 0x8586 <malloc+0x11e>
    8574:	4e 0f       	add	r20, r30
    8576:	5f 1f       	adc	r21, r31
    8578:	50 93 7f 0d 	sts	0x0D7F, r21
    857c:	40 93 7e 0d 	sts	0x0D7E, r20
    8580:	81 93       	st	Z+, r24
    8582:	91 93       	st	Z+, r25
    8584:	02 c0       	rjmp	.+4      	; 0x858a <malloc+0x122>
    8586:	e0 e0       	ldi	r30, 0x00	; 0
    8588:	f0 e0       	ldi	r31, 0x00	; 0
    858a:	cf 01       	movw	r24, r30
    858c:	df 91       	pop	r29
    858e:	cf 91       	pop	r28
    8590:	08 95       	ret

00008592 <free>:
    8592:	0f 93       	push	r16
    8594:	1f 93       	push	r17
    8596:	cf 93       	push	r28
    8598:	df 93       	push	r29
    859a:	00 97       	sbiw	r24, 0x00	; 0
    859c:	09 f4       	brne	.+2      	; 0x85a0 <free+0xe>
    859e:	8c c0       	rjmp	.+280    	; 0x86b8 <free+0x126>
    85a0:	fc 01       	movw	r30, r24
    85a2:	32 97       	sbiw	r30, 0x02	; 2
    85a4:	13 82       	std	Z+3, r1	; 0x03
    85a6:	12 82       	std	Z+2, r1	; 0x02
    85a8:	00 91 80 0d 	lds	r16, 0x0D80
    85ac:	10 91 81 0d 	lds	r17, 0x0D81
    85b0:	01 15       	cp	r16, r1
    85b2:	11 05       	cpc	r17, r1
    85b4:	81 f4       	brne	.+32     	; 0x85d6 <free+0x44>
    85b6:	20 81       	ld	r18, Z
    85b8:	31 81       	ldd	r19, Z+1	; 0x01
    85ba:	82 0f       	add	r24, r18
    85bc:	93 1f       	adc	r25, r19
    85be:	20 91 7e 0d 	lds	r18, 0x0D7E
    85c2:	30 91 7f 0d 	lds	r19, 0x0D7F
    85c6:	28 17       	cp	r18, r24
    85c8:	39 07       	cpc	r19, r25
    85ca:	79 f5       	brne	.+94     	; 0x862a <free+0x98>
    85cc:	f0 93 7f 0d 	sts	0x0D7F, r31
    85d0:	e0 93 7e 0d 	sts	0x0D7E, r30
    85d4:	71 c0       	rjmp	.+226    	; 0x86b8 <free+0x126>
    85d6:	d8 01       	movw	r26, r16
    85d8:	40 e0       	ldi	r20, 0x00	; 0
    85da:	50 e0       	ldi	r21, 0x00	; 0
    85dc:	ae 17       	cp	r26, r30
    85de:	bf 07       	cpc	r27, r31
    85e0:	50 f4       	brcc	.+20     	; 0x85f6 <free+0x64>
    85e2:	12 96       	adiw	r26, 0x02	; 2
    85e4:	2d 91       	ld	r18, X+
    85e6:	3c 91       	ld	r19, X
    85e8:	13 97       	sbiw	r26, 0x03	; 3
    85ea:	ad 01       	movw	r20, r26
    85ec:	21 15       	cp	r18, r1
    85ee:	31 05       	cpc	r19, r1
    85f0:	09 f1       	breq	.+66     	; 0x8634 <free+0xa2>
    85f2:	d9 01       	movw	r26, r18
    85f4:	f3 cf       	rjmp	.-26     	; 0x85dc <free+0x4a>
    85f6:	9d 01       	movw	r18, r26
    85f8:	da 01       	movw	r26, r20
    85fa:	33 83       	std	Z+3, r19	; 0x03
    85fc:	22 83       	std	Z+2, r18	; 0x02
    85fe:	60 81       	ld	r22, Z
    8600:	71 81       	ldd	r23, Z+1	; 0x01
    8602:	86 0f       	add	r24, r22
    8604:	97 1f       	adc	r25, r23
    8606:	82 17       	cp	r24, r18
    8608:	93 07       	cpc	r25, r19
    860a:	69 f4       	brne	.+26     	; 0x8626 <free+0x94>
    860c:	ec 01       	movw	r28, r24
    860e:	28 81       	ld	r18, Y
    8610:	39 81       	ldd	r19, Y+1	; 0x01
    8612:	26 0f       	add	r18, r22
    8614:	37 1f       	adc	r19, r23
    8616:	2e 5f       	subi	r18, 0xFE	; 254
    8618:	3f 4f       	sbci	r19, 0xFF	; 255
    861a:	31 83       	std	Z+1, r19	; 0x01
    861c:	20 83       	st	Z, r18
    861e:	8a 81       	ldd	r24, Y+2	; 0x02
    8620:	9b 81       	ldd	r25, Y+3	; 0x03
    8622:	93 83       	std	Z+3, r25	; 0x03
    8624:	82 83       	std	Z+2, r24	; 0x02
    8626:	45 2b       	or	r20, r21
    8628:	29 f4       	brne	.+10     	; 0x8634 <free+0xa2>
    862a:	f0 93 81 0d 	sts	0x0D81, r31
    862e:	e0 93 80 0d 	sts	0x0D80, r30
    8632:	42 c0       	rjmp	.+132    	; 0x86b8 <free+0x126>
    8634:	13 96       	adiw	r26, 0x03	; 3
    8636:	fc 93       	st	X, r31
    8638:	ee 93       	st	-X, r30
    863a:	12 97       	sbiw	r26, 0x02	; 2
    863c:	ed 01       	movw	r28, r26
    863e:	49 91       	ld	r20, Y+
    8640:	59 91       	ld	r21, Y+
    8642:	9e 01       	movw	r18, r28
    8644:	24 0f       	add	r18, r20
    8646:	35 1f       	adc	r19, r21
    8648:	e2 17       	cp	r30, r18
    864a:	f3 07       	cpc	r31, r19
    864c:	71 f4       	brne	.+28     	; 0x866a <free+0xd8>
    864e:	80 81       	ld	r24, Z
    8650:	91 81       	ldd	r25, Z+1	; 0x01
    8652:	84 0f       	add	r24, r20
    8654:	95 1f       	adc	r25, r21
    8656:	02 96       	adiw	r24, 0x02	; 2
    8658:	11 96       	adiw	r26, 0x01	; 1
    865a:	9c 93       	st	X, r25
    865c:	8e 93       	st	-X, r24
    865e:	82 81       	ldd	r24, Z+2	; 0x02
    8660:	93 81       	ldd	r25, Z+3	; 0x03
    8662:	13 96       	adiw	r26, 0x03	; 3
    8664:	9c 93       	st	X, r25
    8666:	8e 93       	st	-X, r24
    8668:	12 97       	sbiw	r26, 0x02	; 2
    866a:	e0 e0       	ldi	r30, 0x00	; 0
    866c:	f0 e0       	ldi	r31, 0x00	; 0
    866e:	d8 01       	movw	r26, r16
    8670:	12 96       	adiw	r26, 0x02	; 2
    8672:	8d 91       	ld	r24, X+
    8674:	9c 91       	ld	r25, X
    8676:	13 97       	sbiw	r26, 0x03	; 3
    8678:	00 97       	sbiw	r24, 0x00	; 0
    867a:	19 f0       	breq	.+6      	; 0x8682 <free+0xf0>
    867c:	f8 01       	movw	r30, r16
    867e:	8c 01       	movw	r16, r24
    8680:	f6 cf       	rjmp	.-20     	; 0x866e <free+0xdc>
    8682:	8d 91       	ld	r24, X+
    8684:	9c 91       	ld	r25, X
    8686:	98 01       	movw	r18, r16
    8688:	2e 5f       	subi	r18, 0xFE	; 254
    868a:	3f 4f       	sbci	r19, 0xFF	; 255
    868c:	82 0f       	add	r24, r18
    868e:	93 1f       	adc	r25, r19
    8690:	20 91 7e 0d 	lds	r18, 0x0D7E
    8694:	30 91 7f 0d 	lds	r19, 0x0D7F
    8698:	28 17       	cp	r18, r24
    869a:	39 07       	cpc	r19, r25
    869c:	69 f4       	brne	.+26     	; 0x86b8 <free+0x126>
    869e:	30 97       	sbiw	r30, 0x00	; 0
    86a0:	29 f4       	brne	.+10     	; 0x86ac <free+0x11a>
    86a2:	10 92 81 0d 	sts	0x0D81, r1
    86a6:	10 92 80 0d 	sts	0x0D80, r1
    86aa:	02 c0       	rjmp	.+4      	; 0x86b0 <free+0x11e>
    86ac:	13 82       	std	Z+3, r1	; 0x03
    86ae:	12 82       	std	Z+2, r1	; 0x02
    86b0:	10 93 7f 0d 	sts	0x0D7F, r17
    86b4:	00 93 7e 0d 	sts	0x0D7E, r16
    86b8:	df 91       	pop	r29
    86ba:	cf 91       	pop	r28
    86bc:	1f 91       	pop	r17
    86be:	0f 91       	pop	r16
    86c0:	08 95       	ret

000086c2 <__ftoa_engine>:
    86c2:	28 30       	cpi	r18, 0x08	; 8
    86c4:	08 f0       	brcs	.+2      	; 0x86c8 <__ftoa_engine+0x6>
    86c6:	27 e0       	ldi	r18, 0x07	; 7
    86c8:	33 27       	eor	r19, r19
    86ca:	da 01       	movw	r26, r20
    86cc:	99 0f       	add	r25, r25
    86ce:	31 1d       	adc	r19, r1
    86d0:	87 fd       	sbrc	r24, 7
    86d2:	91 60       	ori	r25, 0x01	; 1
    86d4:	00 96       	adiw	r24, 0x00	; 0
    86d6:	61 05       	cpc	r22, r1
    86d8:	71 05       	cpc	r23, r1
    86da:	39 f4       	brne	.+14     	; 0x86ea <__ftoa_engine+0x28>
    86dc:	32 60       	ori	r19, 0x02	; 2
    86de:	2e 5f       	subi	r18, 0xFE	; 254
    86e0:	3d 93       	st	X+, r19
    86e2:	30 e3       	ldi	r19, 0x30	; 48
    86e4:	2a 95       	dec	r18
    86e6:	e1 f7       	brne	.-8      	; 0x86e0 <__ftoa_engine+0x1e>
    86e8:	08 95       	ret
    86ea:	9f 3f       	cpi	r25, 0xFF	; 255
    86ec:	30 f0       	brcs	.+12     	; 0x86fa <__ftoa_engine+0x38>
    86ee:	80 38       	cpi	r24, 0x80	; 128
    86f0:	71 05       	cpc	r23, r1
    86f2:	61 05       	cpc	r22, r1
    86f4:	09 f0       	breq	.+2      	; 0x86f8 <__ftoa_engine+0x36>
    86f6:	3c 5f       	subi	r19, 0xFC	; 252
    86f8:	3c 5f       	subi	r19, 0xFC	; 252
    86fa:	3d 93       	st	X+, r19
    86fc:	91 30       	cpi	r25, 0x01	; 1
    86fe:	08 f0       	brcs	.+2      	; 0x8702 <__ftoa_engine+0x40>
    8700:	80 68       	ori	r24, 0x80	; 128
    8702:	91 1d       	adc	r25, r1
    8704:	df 93       	push	r29
    8706:	cf 93       	push	r28
    8708:	1f 93       	push	r17
    870a:	0f 93       	push	r16
    870c:	ff 92       	push	r15
    870e:	ef 92       	push	r14
    8710:	19 2f       	mov	r17, r25
    8712:	98 7f       	andi	r25, 0xF8	; 248
    8714:	96 95       	lsr	r25
    8716:	e9 2f       	mov	r30, r25
    8718:	96 95       	lsr	r25
    871a:	96 95       	lsr	r25
    871c:	e9 0f       	add	r30, r25
    871e:	ff 27       	eor	r31, r31
    8720:	e2 5f       	subi	r30, 0xF2	; 242
    8722:	f9 4f       	sbci	r31, 0xF9	; 249
    8724:	99 27       	eor	r25, r25
    8726:	33 27       	eor	r19, r19
    8728:	ee 24       	eor	r14, r14
    872a:	ff 24       	eor	r15, r15
    872c:	a7 01       	movw	r20, r14
    872e:	e7 01       	movw	r28, r14
    8730:	05 90       	lpm	r0, Z+
    8732:	08 94       	sec
    8734:	07 94       	ror	r0
    8736:	28 f4       	brcc	.+10     	; 0x8742 <__ftoa_engine+0x80>
    8738:	36 0f       	add	r19, r22
    873a:	e7 1e       	adc	r14, r23
    873c:	f8 1e       	adc	r15, r24
    873e:	49 1f       	adc	r20, r25
    8740:	51 1d       	adc	r21, r1
    8742:	66 0f       	add	r22, r22
    8744:	77 1f       	adc	r23, r23
    8746:	88 1f       	adc	r24, r24
    8748:	99 1f       	adc	r25, r25
    874a:	06 94       	lsr	r0
    874c:	a1 f7       	brne	.-24     	; 0x8736 <__ftoa_engine+0x74>
    874e:	05 90       	lpm	r0, Z+
    8750:	07 94       	ror	r0
    8752:	28 f4       	brcc	.+10     	; 0x875e <__ftoa_engine+0x9c>
    8754:	e7 0e       	add	r14, r23
    8756:	f8 1e       	adc	r15, r24
    8758:	49 1f       	adc	r20, r25
    875a:	56 1f       	adc	r21, r22
    875c:	c1 1d       	adc	r28, r1
    875e:	77 0f       	add	r23, r23
    8760:	88 1f       	adc	r24, r24
    8762:	99 1f       	adc	r25, r25
    8764:	66 1f       	adc	r22, r22
    8766:	06 94       	lsr	r0
    8768:	a1 f7       	brne	.-24     	; 0x8752 <__ftoa_engine+0x90>
    876a:	05 90       	lpm	r0, Z+
    876c:	07 94       	ror	r0
    876e:	28 f4       	brcc	.+10     	; 0x877a <__ftoa_engine+0xb8>
    8770:	f8 0e       	add	r15, r24
    8772:	49 1f       	adc	r20, r25
    8774:	56 1f       	adc	r21, r22
    8776:	c7 1f       	adc	r28, r23
    8778:	d1 1d       	adc	r29, r1
    877a:	88 0f       	add	r24, r24
    877c:	99 1f       	adc	r25, r25
    877e:	66 1f       	adc	r22, r22
    8780:	77 1f       	adc	r23, r23
    8782:	06 94       	lsr	r0
    8784:	a1 f7       	brne	.-24     	; 0x876e <__ftoa_engine+0xac>
    8786:	05 90       	lpm	r0, Z+
    8788:	07 94       	ror	r0
    878a:	20 f4       	brcc	.+8      	; 0x8794 <__ftoa_engine+0xd2>
    878c:	49 0f       	add	r20, r25
    878e:	56 1f       	adc	r21, r22
    8790:	c7 1f       	adc	r28, r23
    8792:	d8 1f       	adc	r29, r24
    8794:	99 0f       	add	r25, r25
    8796:	66 1f       	adc	r22, r22
    8798:	77 1f       	adc	r23, r23
    879a:	88 1f       	adc	r24, r24
    879c:	06 94       	lsr	r0
    879e:	a9 f7       	brne	.-22     	; 0x878a <__ftoa_engine+0xc8>
    87a0:	84 91       	lpm	r24, Z
    87a2:	10 95       	com	r17
    87a4:	17 70       	andi	r17, 0x07	; 7
    87a6:	41 f0       	breq	.+16     	; 0x87b8 <__ftoa_engine+0xf6>
    87a8:	d6 95       	lsr	r29
    87aa:	c7 95       	ror	r28
    87ac:	57 95       	ror	r21
    87ae:	47 95       	ror	r20
    87b0:	f7 94       	ror	r15
    87b2:	e7 94       	ror	r14
    87b4:	1a 95       	dec	r17
    87b6:	c1 f7       	brne	.-16     	; 0x87a8 <__ftoa_engine+0xe6>
    87b8:	e4 eb       	ldi	r30, 0xB4	; 180
    87ba:	f5 e0       	ldi	r31, 0x05	; 5
    87bc:	68 94       	set
    87be:	15 90       	lpm	r1, Z+
    87c0:	15 91       	lpm	r17, Z+
    87c2:	35 91       	lpm	r19, Z+
    87c4:	65 91       	lpm	r22, Z+
    87c6:	95 91       	lpm	r25, Z+
    87c8:	05 90       	lpm	r0, Z+
    87ca:	7f e2       	ldi	r23, 0x2F	; 47
    87cc:	73 95       	inc	r23
    87ce:	e1 18       	sub	r14, r1
    87d0:	f1 0a       	sbc	r15, r17
    87d2:	43 0b       	sbc	r20, r19
    87d4:	56 0b       	sbc	r21, r22
    87d6:	c9 0b       	sbc	r28, r25
    87d8:	d0 09       	sbc	r29, r0
    87da:	c0 f7       	brcc	.-16     	; 0x87cc <__ftoa_engine+0x10a>
    87dc:	e1 0c       	add	r14, r1
    87de:	f1 1e       	adc	r15, r17
    87e0:	43 1f       	adc	r20, r19
    87e2:	56 1f       	adc	r21, r22
    87e4:	c9 1f       	adc	r28, r25
    87e6:	d0 1d       	adc	r29, r0
    87e8:	7e f4       	brtc	.+30     	; 0x8808 <__ftoa_engine+0x146>
    87ea:	70 33       	cpi	r23, 0x30	; 48
    87ec:	11 f4       	brne	.+4      	; 0x87f2 <__ftoa_engine+0x130>
    87ee:	8a 95       	dec	r24
    87f0:	e6 cf       	rjmp	.-52     	; 0x87be <__ftoa_engine+0xfc>
    87f2:	e8 94       	clt
    87f4:	01 50       	subi	r16, 0x01	; 1
    87f6:	30 f0       	brcs	.+12     	; 0x8804 <__ftoa_engine+0x142>
    87f8:	08 0f       	add	r16, r24
    87fa:	0a f4       	brpl	.+2      	; 0x87fe <__ftoa_engine+0x13c>
    87fc:	00 27       	eor	r16, r16
    87fe:	02 17       	cp	r16, r18
    8800:	08 f4       	brcc	.+2      	; 0x8804 <__ftoa_engine+0x142>
    8802:	20 2f       	mov	r18, r16
    8804:	23 95       	inc	r18
    8806:	02 2f       	mov	r16, r18
    8808:	7a 33       	cpi	r23, 0x3A	; 58
    880a:	28 f0       	brcs	.+10     	; 0x8816 <__ftoa_engine+0x154>
    880c:	79 e3       	ldi	r23, 0x39	; 57
    880e:	7d 93       	st	X+, r23
    8810:	2a 95       	dec	r18
    8812:	e9 f7       	brne	.-6      	; 0x880e <__ftoa_engine+0x14c>
    8814:	10 c0       	rjmp	.+32     	; 0x8836 <__ftoa_engine+0x174>
    8816:	7d 93       	st	X+, r23
    8818:	2a 95       	dec	r18
    881a:	89 f6       	brne	.-94     	; 0x87be <__ftoa_engine+0xfc>
    881c:	06 94       	lsr	r0
    881e:	97 95       	ror	r25
    8820:	67 95       	ror	r22
    8822:	37 95       	ror	r19
    8824:	17 95       	ror	r17
    8826:	17 94       	ror	r1
    8828:	e1 18       	sub	r14, r1
    882a:	f1 0a       	sbc	r15, r17
    882c:	43 0b       	sbc	r20, r19
    882e:	56 0b       	sbc	r21, r22
    8830:	c9 0b       	sbc	r28, r25
    8832:	d0 09       	sbc	r29, r0
    8834:	98 f0       	brcs	.+38     	; 0x885c <__ftoa_engine+0x19a>
    8836:	23 95       	inc	r18
    8838:	7e 91       	ld	r23, -X
    883a:	73 95       	inc	r23
    883c:	7a 33       	cpi	r23, 0x3A	; 58
    883e:	08 f0       	brcs	.+2      	; 0x8842 <__ftoa_engine+0x180>
    8840:	70 e3       	ldi	r23, 0x30	; 48
    8842:	7c 93       	st	X, r23
    8844:	20 13       	cpse	r18, r16
    8846:	b8 f7       	brcc	.-18     	; 0x8836 <__ftoa_engine+0x174>
    8848:	7e 91       	ld	r23, -X
    884a:	70 61       	ori	r23, 0x10	; 16
    884c:	7d 93       	st	X+, r23
    884e:	30 f0       	brcs	.+12     	; 0x885c <__ftoa_engine+0x19a>
    8850:	83 95       	inc	r24
    8852:	71 e3       	ldi	r23, 0x31	; 49
    8854:	7d 93       	st	X+, r23
    8856:	70 e3       	ldi	r23, 0x30	; 48
    8858:	2a 95       	dec	r18
    885a:	e1 f7       	brne	.-8      	; 0x8854 <__ftoa_engine+0x192>
    885c:	11 24       	eor	r1, r1
    885e:	ef 90       	pop	r14
    8860:	ff 90       	pop	r15
    8862:	0f 91       	pop	r16
    8864:	1f 91       	pop	r17
    8866:	cf 91       	pop	r28
    8868:	df 91       	pop	r29
    886a:	99 27       	eor	r25, r25
    886c:	87 fd       	sbrc	r24, 7
    886e:	90 95       	com	r25
    8870:	08 95       	ret

00008872 <strnlen_P>:
    8872:	fc 01       	movw	r30, r24
    8874:	05 90       	lpm	r0, Z+
    8876:	61 50       	subi	r22, 0x01	; 1
    8878:	70 40       	sbci	r23, 0x00	; 0
    887a:	01 10       	cpse	r0, r1
    887c:	d8 f7       	brcc	.-10     	; 0x8874 <strnlen_P+0x2>
    887e:	80 95       	com	r24
    8880:	90 95       	com	r25
    8882:	8e 0f       	add	r24, r30
    8884:	9f 1f       	adc	r25, r31
    8886:	08 95       	ret

00008888 <strnlen>:
    8888:	fc 01       	movw	r30, r24
    888a:	61 50       	subi	r22, 0x01	; 1
    888c:	70 40       	sbci	r23, 0x00	; 0
    888e:	01 90       	ld	r0, Z+
    8890:	01 10       	cpse	r0, r1
    8892:	d8 f7       	brcc	.-10     	; 0x888a <strnlen+0x2>
    8894:	80 95       	com	r24
    8896:	90 95       	com	r25
    8898:	8e 0f       	add	r24, r30
    889a:	9f 1f       	adc	r25, r31
    889c:	08 95       	ret

0000889e <fputc>:
    889e:	0f 93       	push	r16
    88a0:	1f 93       	push	r17
    88a2:	cf 93       	push	r28
    88a4:	df 93       	push	r29
    88a6:	fb 01       	movw	r30, r22
    88a8:	23 81       	ldd	r18, Z+3	; 0x03
    88aa:	21 fd       	sbrc	r18, 1
    88ac:	03 c0       	rjmp	.+6      	; 0x88b4 <fputc+0x16>
    88ae:	8f ef       	ldi	r24, 0xFF	; 255
    88b0:	9f ef       	ldi	r25, 0xFF	; 255
    88b2:	28 c0       	rjmp	.+80     	; 0x8904 <fputc+0x66>
    88b4:	22 ff       	sbrs	r18, 2
    88b6:	16 c0       	rjmp	.+44     	; 0x88e4 <fputc+0x46>
    88b8:	46 81       	ldd	r20, Z+6	; 0x06
    88ba:	57 81       	ldd	r21, Z+7	; 0x07
    88bc:	24 81       	ldd	r18, Z+4	; 0x04
    88be:	35 81       	ldd	r19, Z+5	; 0x05
    88c0:	42 17       	cp	r20, r18
    88c2:	53 07       	cpc	r21, r19
    88c4:	44 f4       	brge	.+16     	; 0x88d6 <fputc+0x38>
    88c6:	a0 81       	ld	r26, Z
    88c8:	b1 81       	ldd	r27, Z+1	; 0x01
    88ca:	9d 01       	movw	r18, r26
    88cc:	2f 5f       	subi	r18, 0xFF	; 255
    88ce:	3f 4f       	sbci	r19, 0xFF	; 255
    88d0:	31 83       	std	Z+1, r19	; 0x01
    88d2:	20 83       	st	Z, r18
    88d4:	8c 93       	st	X, r24
    88d6:	26 81       	ldd	r18, Z+6	; 0x06
    88d8:	37 81       	ldd	r19, Z+7	; 0x07
    88da:	2f 5f       	subi	r18, 0xFF	; 255
    88dc:	3f 4f       	sbci	r19, 0xFF	; 255
    88de:	37 83       	std	Z+7, r19	; 0x07
    88e0:	26 83       	std	Z+6, r18	; 0x06
    88e2:	10 c0       	rjmp	.+32     	; 0x8904 <fputc+0x66>
    88e4:	eb 01       	movw	r28, r22
    88e6:	09 2f       	mov	r16, r25
    88e8:	18 2f       	mov	r17, r24
    88ea:	00 84       	ldd	r0, Z+8	; 0x08
    88ec:	f1 85       	ldd	r31, Z+9	; 0x09
    88ee:	e0 2d       	mov	r30, r0
    88f0:	09 95       	icall
    88f2:	89 2b       	or	r24, r25
    88f4:	e1 f6       	brne	.-72     	; 0x88ae <fputc+0x10>
    88f6:	8e 81       	ldd	r24, Y+6	; 0x06
    88f8:	9f 81       	ldd	r25, Y+7	; 0x07
    88fa:	01 96       	adiw	r24, 0x01	; 1
    88fc:	9f 83       	std	Y+7, r25	; 0x07
    88fe:	8e 83       	std	Y+6, r24	; 0x06
    8900:	81 2f       	mov	r24, r17
    8902:	90 2f       	mov	r25, r16
    8904:	df 91       	pop	r29
    8906:	cf 91       	pop	r28
    8908:	1f 91       	pop	r17
    890a:	0f 91       	pop	r16
    890c:	08 95       	ret

0000890e <sprintf>:
    890e:	0f 93       	push	r16
    8910:	1f 93       	push	r17
    8912:	cf 93       	push	r28
    8914:	df 93       	push	r29
    8916:	cd b7       	in	r28, 0x3d	; 61
    8918:	de b7       	in	r29, 0x3e	; 62
    891a:	2e 97       	sbiw	r28, 0x0e	; 14
    891c:	0f b6       	in	r0, 0x3f	; 63
    891e:	f8 94       	cli
    8920:	de bf       	out	0x3e, r29	; 62
    8922:	0f be       	out	0x3f, r0	; 63
    8924:	cd bf       	out	0x3d, r28	; 61
    8926:	0d 89       	ldd	r16, Y+21	; 0x15
    8928:	1e 89       	ldd	r17, Y+22	; 0x16
    892a:	86 e0       	ldi	r24, 0x06	; 6
    892c:	8c 83       	std	Y+4, r24	; 0x04
    892e:	1a 83       	std	Y+2, r17	; 0x02
    8930:	09 83       	std	Y+1, r16	; 0x01
    8932:	8f ef       	ldi	r24, 0xFF	; 255
    8934:	9f e7       	ldi	r25, 0x7F	; 127
    8936:	9e 83       	std	Y+6, r25	; 0x06
    8938:	8d 83       	std	Y+5, r24	; 0x05
    893a:	ae 01       	movw	r20, r28
    893c:	47 5e       	subi	r20, 0xE7	; 231
    893e:	5f 4f       	sbci	r21, 0xFF	; 255
    8940:	6f 89       	ldd	r22, Y+23	; 0x17
    8942:	78 8d       	ldd	r23, Y+24	; 0x18
    8944:	ce 01       	movw	r24, r28
    8946:	01 96       	adiw	r24, 0x01	; 1
    8948:	c3 d9       	rcall	.-3194   	; 0x7cd0 <vfprintf>
    894a:	2f 81       	ldd	r18, Y+7	; 0x07
    894c:	38 85       	ldd	r19, Y+8	; 0x08
    894e:	f8 01       	movw	r30, r16
    8950:	e2 0f       	add	r30, r18
    8952:	f3 1f       	adc	r31, r19
    8954:	10 82       	st	Z, r1
    8956:	2e 96       	adiw	r28, 0x0e	; 14
    8958:	0f b6       	in	r0, 0x3f	; 63
    895a:	f8 94       	cli
    895c:	de bf       	out	0x3e, r29	; 62
    895e:	0f be       	out	0x3f, r0	; 63
    8960:	cd bf       	out	0x3d, r28	; 61
    8962:	df 91       	pop	r29
    8964:	cf 91       	pop	r28
    8966:	1f 91       	pop	r17
    8968:	0f 91       	pop	r16
    896a:	08 95       	ret

0000896c <__ultoa_invert>:
    896c:	fa 01       	movw	r30, r20
    896e:	aa 27       	eor	r26, r26
    8970:	28 30       	cpi	r18, 0x08	; 8
    8972:	51 f1       	breq	.+84     	; 0x89c8 <__ultoa_invert+0x5c>
    8974:	20 31       	cpi	r18, 0x10	; 16
    8976:	81 f1       	breq	.+96     	; 0x89d8 <__ultoa_invert+0x6c>
    8978:	e8 94       	clt
    897a:	6f 93       	push	r22
    897c:	6e 7f       	andi	r22, 0xFE	; 254
    897e:	6e 5f       	subi	r22, 0xFE	; 254
    8980:	7f 4f       	sbci	r23, 0xFF	; 255
    8982:	8f 4f       	sbci	r24, 0xFF	; 255
    8984:	9f 4f       	sbci	r25, 0xFF	; 255
    8986:	af 4f       	sbci	r26, 0xFF	; 255
    8988:	b1 e0       	ldi	r27, 0x01	; 1
    898a:	3e d0       	rcall	.+124    	; 0x8a08 <__ultoa_invert+0x9c>
    898c:	b4 e0       	ldi	r27, 0x04	; 4
    898e:	3c d0       	rcall	.+120    	; 0x8a08 <__ultoa_invert+0x9c>
    8990:	67 0f       	add	r22, r23
    8992:	78 1f       	adc	r23, r24
    8994:	89 1f       	adc	r24, r25
    8996:	9a 1f       	adc	r25, r26
    8998:	a1 1d       	adc	r26, r1
    899a:	68 0f       	add	r22, r24
    899c:	79 1f       	adc	r23, r25
    899e:	8a 1f       	adc	r24, r26
    89a0:	91 1d       	adc	r25, r1
    89a2:	a1 1d       	adc	r26, r1
    89a4:	6a 0f       	add	r22, r26
    89a6:	71 1d       	adc	r23, r1
    89a8:	81 1d       	adc	r24, r1
    89aa:	91 1d       	adc	r25, r1
    89ac:	a1 1d       	adc	r26, r1
    89ae:	20 d0       	rcall	.+64     	; 0x89f0 <__ultoa_invert+0x84>
    89b0:	09 f4       	brne	.+2      	; 0x89b4 <__ultoa_invert+0x48>
    89b2:	68 94       	set
    89b4:	3f 91       	pop	r19
    89b6:	2a e0       	ldi	r18, 0x0A	; 10
    89b8:	26 9f       	mul	r18, r22
    89ba:	11 24       	eor	r1, r1
    89bc:	30 19       	sub	r19, r0
    89be:	30 5d       	subi	r19, 0xD0	; 208
    89c0:	31 93       	st	Z+, r19
    89c2:	de f6       	brtc	.-74     	; 0x897a <__ultoa_invert+0xe>
    89c4:	cf 01       	movw	r24, r30
    89c6:	08 95       	ret
    89c8:	46 2f       	mov	r20, r22
    89ca:	47 70       	andi	r20, 0x07	; 7
    89cc:	40 5d       	subi	r20, 0xD0	; 208
    89ce:	41 93       	st	Z+, r20
    89d0:	b3 e0       	ldi	r27, 0x03	; 3
    89d2:	0f d0       	rcall	.+30     	; 0x89f2 <__ultoa_invert+0x86>
    89d4:	c9 f7       	brne	.-14     	; 0x89c8 <__ultoa_invert+0x5c>
    89d6:	f6 cf       	rjmp	.-20     	; 0x89c4 <__ultoa_invert+0x58>
    89d8:	46 2f       	mov	r20, r22
    89da:	4f 70       	andi	r20, 0x0F	; 15
    89dc:	40 5d       	subi	r20, 0xD0	; 208
    89de:	4a 33       	cpi	r20, 0x3A	; 58
    89e0:	18 f0       	brcs	.+6      	; 0x89e8 <__ultoa_invert+0x7c>
    89e2:	49 5d       	subi	r20, 0xD9	; 217
    89e4:	31 fd       	sbrc	r19, 1
    89e6:	40 52       	subi	r20, 0x20	; 32
    89e8:	41 93       	st	Z+, r20
    89ea:	02 d0       	rcall	.+4      	; 0x89f0 <__ultoa_invert+0x84>
    89ec:	a9 f7       	brne	.-22     	; 0x89d8 <__ultoa_invert+0x6c>
    89ee:	ea cf       	rjmp	.-44     	; 0x89c4 <__ultoa_invert+0x58>
    89f0:	b4 e0       	ldi	r27, 0x04	; 4
    89f2:	a6 95       	lsr	r26
    89f4:	97 95       	ror	r25
    89f6:	87 95       	ror	r24
    89f8:	77 95       	ror	r23
    89fa:	67 95       	ror	r22
    89fc:	ba 95       	dec	r27
    89fe:	c9 f7       	brne	.-14     	; 0x89f2 <__ultoa_invert+0x86>
    8a00:	00 97       	sbiw	r24, 0x00	; 0
    8a02:	61 05       	cpc	r22, r1
    8a04:	71 05       	cpc	r23, r1
    8a06:	08 95       	ret
    8a08:	9b 01       	movw	r18, r22
    8a0a:	ac 01       	movw	r20, r24
    8a0c:	0a 2e       	mov	r0, r26
    8a0e:	06 94       	lsr	r0
    8a10:	57 95       	ror	r21
    8a12:	47 95       	ror	r20
    8a14:	37 95       	ror	r19
    8a16:	27 95       	ror	r18
    8a18:	ba 95       	dec	r27
    8a1a:	c9 f7       	brne	.-14     	; 0x8a0e <__ultoa_invert+0xa2>
    8a1c:	62 0f       	add	r22, r18
    8a1e:	73 1f       	adc	r23, r19
    8a20:	84 1f       	adc	r24, r20
    8a22:	95 1f       	adc	r25, r21
    8a24:	a0 1d       	adc	r26, r0
    8a26:	08 95       	ret

00008a28 <__do_global_dtors>:
    8a28:	13 e0       	ldi	r17, 0x03	; 3
    8a2a:	c8 e5       	ldi	r28, 0x58	; 88
    8a2c:	d3 e0       	ldi	r29, 0x03	; 3
    8a2e:	03 c0       	rjmp	.+6      	; 0x8a36 <__do_global_dtors+0xe>
    8a30:	fe 01       	movw	r30, r28
    8a32:	f8 dc       	rcall	.-1552   	; 0x8424 <__tablejump2__>
    8a34:	21 96       	adiw	r28, 0x01	; 1
    8a36:	c9 35       	cpi	r28, 0x59	; 89
    8a38:	d1 07       	cpc	r29, r17
    8a3a:	d1 f7       	brne	.-12     	; 0x8a30 <__do_global_dtors+0x8>
    8a3c:	f8 94       	cli

00008a3e <__stop_program>:
    8a3e:	ff cf       	rjmp	.-2      	; 0x8a3e <__stop_program>
