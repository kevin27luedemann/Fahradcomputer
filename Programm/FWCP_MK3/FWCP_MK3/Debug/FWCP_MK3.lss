
FWCP_MK3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001c6  00800100  000055f6  0000568a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000055f6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000597  008002c6  008002c6  00005850  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00005850  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000058ac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003f0  00000000  00000000  000058ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00009857  00000000  00000000  00005cdc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001937  00000000  00000000  0000f533  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000034bc  00000000  00000000  00010e6a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000fdc  00000000  00000000  00014328  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001383  00000000  00000000  00015304  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00006a52  00000000  00000000  00016687  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000448  00000000  00000000  0001d0d9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0a c3       	rjmp	.+1556   	; 0x616 <__dtors_end>
       2:	00 00       	nop
       4:	32 c3       	rjmp	.+1636   	; 0x66a <__bad_interrupt>
       6:	00 00       	nop
       8:	30 c3       	rjmp	.+1632   	; 0x66a <__bad_interrupt>
       a:	00 00       	nop
       c:	2e c3       	rjmp	.+1628   	; 0x66a <__bad_interrupt>
       e:	00 00       	nop
      10:	2c c3       	rjmp	.+1624   	; 0x66a <__bad_interrupt>
      12:	00 00       	nop
      14:	2a c3       	rjmp	.+1620   	; 0x66a <__bad_interrupt>
      16:	00 00       	nop
      18:	28 c3       	rjmp	.+1616   	; 0x66a <__bad_interrupt>
      1a:	00 00       	nop
      1c:	26 c3       	rjmp	.+1612   	; 0x66a <__bad_interrupt>
      1e:	00 00       	nop
      20:	24 c3       	rjmp	.+1608   	; 0x66a <__bad_interrupt>
      22:	00 00       	nop
      24:	22 c3       	rjmp	.+1604   	; 0x66a <__bad_interrupt>
      26:	00 00       	nop
      28:	20 c3       	rjmp	.+1600   	; 0x66a <__bad_interrupt>
      2a:	00 00       	nop
      2c:	0c 94 a2 0f 	jmp	0x1f44	; 0x1f44 <__vector_11>
      30:	1c c3       	rjmp	.+1592   	; 0x66a <__bad_interrupt>
      32:	00 00       	nop
      34:	0c 94 c5 0f 	jmp	0x1f8a	; 0x1f8a <__vector_13>
      38:	18 c3       	rjmp	.+1584   	; 0x66a <__bad_interrupt>
      3a:	00 00       	nop
      3c:	16 c3       	rjmp	.+1580   	; 0x66a <__bad_interrupt>
      3e:	00 00       	nop
      40:	14 c3       	rjmp	.+1576   	; 0x66a <__bad_interrupt>
      42:	00 00       	nop
      44:	12 c3       	rjmp	.+1572   	; 0x66a <__bad_interrupt>
      46:	00 00       	nop
      48:	10 c3       	rjmp	.+1568   	; 0x66a <__bad_interrupt>
      4a:	00 00       	nop
      4c:	0e c3       	rjmp	.+1564   	; 0x66a <__bad_interrupt>
      4e:	00 00       	nop
      50:	0c 94 d6 0f 	jmp	0x1fac	; 0x1fac <__vector_20>
      54:	0a c3       	rjmp	.+1556   	; 0x66a <__bad_interrupt>
      56:	00 00       	nop
      58:	08 c3       	rjmp	.+1552   	; 0x66a <__bad_interrupt>
      5a:	00 00       	nop
      5c:	06 c3       	rjmp	.+1548   	; 0x66a <__bad_interrupt>
      5e:	00 00       	nop
      60:	04 c3       	rjmp	.+1544   	; 0x66a <__bad_interrupt>
      62:	00 00       	nop
      64:	02 c3       	rjmp	.+1540   	; 0x66a <__bad_interrupt>
      66:	00 00       	nop
      68:	00 c3       	rjmp	.+1536   	; 0x66a <__bad_interrupt>
      6a:	00 00       	nop
      6c:	fe c2       	rjmp	.+1532   	; 0x66a <__bad_interrupt>
      6e:	00 00       	nop
      70:	fc c2       	rjmp	.+1528   	; 0x66a <__bad_interrupt>
      72:	00 00       	nop
      74:	fa c2       	rjmp	.+1524   	; 0x66a <__bad_interrupt>
      76:	00 00       	nop
      78:	f8 c2       	rjmp	.+1520   	; 0x66a <__bad_interrupt>
      7a:	00 00       	nop
      7c:	f6 c2       	rjmp	.+1516   	; 0x66a <__bad_interrupt>
      7e:	00 00       	nop
      80:	f4 c2       	rjmp	.+1512   	; 0x66a <__bad_interrupt>
      82:	00 00       	nop
      84:	f2 c2       	rjmp	.+1508   	; 0x66a <__bad_interrupt>
      86:	00 00       	nop
      88:	f0 c2       	rjmp	.+1504   	; 0x66a <__bad_interrupt>
      8a:	00 00       	nop
      8c:	b0 08       	sbc	r11, r0
      8e:	b2 08       	sbc	r11, r2
      90:	b2 08       	sbc	r11, r2
      92:	b2 08       	sbc	r11, r2
      94:	b2 08       	sbc	r11, r2
      96:	b2 08       	sbc	r11, r2
      98:	b2 08       	sbc	r11, r2
      9a:	ae 08       	sbc	r10, r14
      9c:	b2 08       	sbc	r11, r2
      9e:	b2 08       	sbc	r11, r2
      a0:	b2 08       	sbc	r11, r2
      a2:	b2 08       	sbc	r11, r2
      a4:	b2 08       	sbc	r11, r2
      a6:	b5 08       	sbc	r11, r5
      a8:	b4 08       	sbc	r11, r4
      aa:	9e 08       	sbc	r9, r14
      ac:	a0 08       	sbc	r10, r0
      ae:	a2 08       	sbc	r10, r2
      b0:	a4 08       	sbc	r10, r4
      b2:	a6 08       	sbc	r10, r6
      b4:	a8 08       	sbc	r10, r8
      b6:	aa 08       	sbc	r10, r10
      b8:	ac 08       	sbc	r10, r12
      ba:	b3 12       	cpse	r11, r19
      bc:	c3 12       	cpse	r12, r19
      be:	c3 12       	cpse	r12, r19
      c0:	c3 12       	cpse	r12, r19
      c2:	c3 12       	cpse	r12, r19
      c4:	c3 12       	cpse	r12, r19
      c6:	c3 12       	cpse	r12, r19
      c8:	c3 12       	cpse	r12, r19
      ca:	c3 12       	cpse	r12, r19
      cc:	c3 12       	cpse	r12, r19
      ce:	c3 12       	cpse	r12, r19
      d0:	c3 12       	cpse	r12, r19
      d2:	c3 12       	cpse	r12, r19
      d4:	c3 12       	cpse	r12, r19
      d6:	c3 12       	cpse	r12, r19
      d8:	c3 12       	cpse	r12, r19
      da:	c3 12       	cpse	r12, r19
      dc:	c3 12       	cpse	r12, r19
      de:	c3 12       	cpse	r12, r19
      e0:	c3 12       	cpse	r12, r19
      e2:	c3 12       	cpse	r12, r19
      e4:	c3 12       	cpse	r12, r19
      e6:	c3 12       	cpse	r12, r19
      e8:	c3 12       	cpse	r12, r19
      ea:	c3 12       	cpse	r12, r19
      ec:	c3 12       	cpse	r12, r19
      ee:	c3 12       	cpse	r12, r19
      f0:	c3 12       	cpse	r12, r19
      f2:	c3 12       	cpse	r12, r19
      f4:	c3 12       	cpse	r12, r19
      f6:	c3 12       	cpse	r12, r19
      f8:	c3 12       	cpse	r12, r19
      fa:	c3 12       	cpse	r12, r19
      fc:	c3 12       	cpse	r12, r19
      fe:	c3 12       	cpse	r12, r19
     100:	c3 12       	cpse	r12, r19
     102:	c3 12       	cpse	r12, r19
     104:	c3 12       	cpse	r12, r19
     106:	c3 12       	cpse	r12, r19
     108:	c3 12       	cpse	r12, r19
     10a:	c3 12       	cpse	r12, r19
     10c:	c3 12       	cpse	r12, r19
     10e:	c3 12       	cpse	r12, r19
     110:	c3 12       	cpse	r12, r19
     112:	c3 12       	cpse	r12, r19
     114:	c3 12       	cpse	r12, r19
     116:	c3 12       	cpse	r12, r19
     118:	c3 12       	cpse	r12, r19
     11a:	c3 12       	cpse	r12, r19
     11c:	c3 12       	cpse	r12, r19
     11e:	c3 12       	cpse	r12, r19
     120:	c3 12       	cpse	r12, r19
     122:	8f 12       	cpse	r8, r31
     124:	c3 12       	cpse	r12, r19
     126:	c3 12       	cpse	r12, r19
     128:	c3 12       	cpse	r12, r19
     12a:	c3 12       	cpse	r12, r19
     12c:	c3 12       	cpse	r12, r19
     12e:	c3 12       	cpse	r12, r19
     130:	c3 12       	cpse	r12, r19
     132:	5c 12       	cpse	r5, r28
     134:	58 12       	cpse	r5, r24
     136:	c3 12       	cpse	r12, r19
     138:	7c 12       	cpse	r7, r28
     13a:	c3 12       	cpse	r12, r19
     13c:	c3 12       	cpse	r12, r19
     13e:	69 12       	cpse	r6, r25
     140:	c3 12       	cpse	r12, r19
     142:	c3 12       	cpse	r12, r19
     144:	a4 12       	cpse	r10, r20
     146:	c9 19       	sub	r28, r9
     148:	ef 19       	sub	r30, r15
     14a:	16 1a       	sub	r1, r22
     14c:	3e 1a       	sub	r3, r30
     14e:	65 1a       	sub	r6, r21
     150:	8f 1a       	sub	r8, r31
     152:	b8 1a       	sub	r11, r24
     154:	e2 1a       	sub	r14, r18
     156:	59 1b       	sub	r21, r25
     158:	83 1b       	sub	r24, r19
     15a:	05 a8       	ldd	r0, Z+53	; 0x35
     15c:	4c cd       	rjmp	.-1384   	; 0xfffffbf6 <__eeprom_end+0xff7efbf6>
     15e:	b2 d4       	rcall	.+2404   	; 0xac4 <_ZN7Display6analogEhhhh+0x9a>
     160:	4e b9       	out	0x0e, r20	; 14
     162:	38 36       	cpi	r19, 0x68	; 104
     164:	a9 02       	muls	r26, r25
     166:	0c 50       	subi	r16, 0x0C	; 12
     168:	b9 91       	ld	r27, Y+
     16a:	86 88       	ldd	r8, Z+22	; 0x16
     16c:	08 3c       	cpi	r16, 0xC8	; 200
     16e:	a6 aa       	std	Z+54, r10	; 0x36
     170:	aa 2a       	or	r10, r26
     172:	be 00       	.word	0x00be	; ????
     174:	00 00       	nop
     176:	80 3f       	cpi	r24, 0xF0	; 240
     178:	07 63       	ori	r16, 0x37	; 55
     17a:	42 36       	cpi	r20, 0x62	; 98
     17c:	b7 9b       	sbis	0x16, 7	; 22
     17e:	d8 a7       	std	Y+40, r29	; 0x28
     180:	1a 39       	cpi	r17, 0x9A	; 154
     182:	68 56       	subi	r22, 0x68	; 104
     184:	18 ae       	std	Y+56, r1	; 0x38
     186:	ba ab       	std	Y+50, r27	; 0x32
     188:	55 8c       	ldd	r5, Z+29	; 0x1d
     18a:	1d 3c       	cpi	r17, 0xCD	; 205
     18c:	b7 cc       	rjmp	.-1682   	; 0xfffffafc <__eeprom_end+0xff7efafc>
     18e:	57 63       	ori	r21, 0x37	; 55
     190:	bd 6d       	ori	r27, 0xDD	; 221
     192:	ed fd       	.word	0xfded	; ????
     194:	75 3e       	cpi	r23, 0xE5	; 229
     196:	f6 17       	cp	r31, r22
     198:	72 31       	cpi	r23, 0x12	; 18
     19a:	bf 00       	.word	0x00bf	; ????
     19c:	00 00       	nop
     19e:	80 3f       	cpi	r24, 0xF0	; 240
     1a0:	08 00       	.word	0x0008	; ????
     1a2:	00 00       	nop
     1a4:	be 92       	st	-X, r11
     1a6:	24 49       	sbci	r18, 0x94	; 148
     1a8:	12 3e       	cpi	r17, 0xE2	; 226
     1aa:	ab aa       	std	Y+51, r10	; 0x33
     1ac:	aa 2a       	or	r10, r26
     1ae:	be cd       	rjmp	.-1156   	; 0xfffffd2c <__eeprom_end+0xff7efd2c>
     1b0:	cc cc       	rjmp	.-1640   	; 0xfffffb4a <__eeprom_end+0xff7efb4a>
     1b2:	4c 3e       	cpi	r20, 0xEC	; 236
     1b4:	00 00       	nop
     1b6:	00 80       	ld	r0, Z
     1b8:	be ab       	std	Y+54, r27	; 0x36
     1ba:	aa aa       	std	Y+50, r10	; 0x32
     1bc:	aa 3e       	cpi	r26, 0xEA	; 234
     1be:	00 00       	nop
     1c0:	00 00       	nop
     1c2:	bf 00       	.word	0x00bf	; ????
     1c4:	00 00       	nop
     1c6:	80 3f       	cpi	r24, 0xF0	; 240
     1c8:	00 00       	nop
     1ca:	00 00       	nop
     1cc:	00 08       	sbc	r0, r0
     1ce:	41 78       	andi	r20, 0x81	; 129
     1d0:	d3 bb       	out	0x13, r29	; 19
     1d2:	43 87       	std	Z+11, r20	; 0x0b
     1d4:	d1 13       	cpse	r29, r17
     1d6:	3d 19       	sub	r19, r13
     1d8:	0e 3c       	cpi	r16, 0xCE	; 206
     1da:	c3 bd       	out	0x23, r28	; 35
     1dc:	42 82       	std	Z+2, r4	; 0x02
     1de:	ad 2b       	or	r26, r29
     1e0:	3e 68       	ori	r19, 0x8E	; 142
     1e2:	ec 82       	std	Y+4, r14	; 0x04
     1e4:	76 be       	out	0x36, r7	; 54
     1e6:	d9 8f       	std	Y+25, r29	; 0x19
     1e8:	e1 a9       	ldd	r30, Z+49	; 0x31
     1ea:	3e 4c       	sbci	r19, 0xCE	; 206
     1ec:	80 ef       	ldi	r24, 0xF0	; 240
     1ee:	ff be       	out	0x3f, r15	; 63
     1f0:	01 c4       	rjmp	.+2050   	; 0x9f4 <_ZN7Display16draw_number16x16Ehhh+0xbe>
     1f2:	ff 7f       	andi	r31, 0xFF	; 255
     1f4:	3f 00       	.word	0x003f	; ????
     1f6:	00 00       	nop
	...

000001fa <__trampolines_end>:
     1fa:	00 e0       	ldi	r16, 0x00	; 0
     1fc:	f8 fc       	.word	0xfcf8	; ????
     1fe:	fe 1e       	adc	r15, r30
     200:	07 07       	cpc	r16, r23
     202:	07 07       	cpc	r16, r23
     204:	1e fe       	.word	0xfe1e	; ????
     206:	fc f8       	.word	0xf8fc	; ????
     208:	f0 00       	.word	0x00f0	; ????
     20a:	00 07       	cpc	r16, r16
     20c:	0f 3f       	cpi	r16, 0xFF	; 255
     20e:	3f 7c       	andi	r19, 0xCF	; 207
     210:	70 70       	andi	r23, 0x00	; 0
     212:	70 70       	andi	r23, 0x00	; 0
     214:	7c 3f       	cpi	r23, 0xFC	; 252
     216:	1f 1f       	adc	r17, r31
     218:	07 00       	.word	0x0007	; ????
     21a:	00 00       	nop
     21c:	00 06       	cpc	r0, r16
     21e:	07 07       	cpc	r16, r23
     220:	ff ff       	.word	0xffff	; ????
     222:	ff ff       	.word	0xffff	; ????
	...
     230:	7f 7f       	andi	r23, 0xFF	; 255
     232:	7f 7f       	andi	r23, 0xFF	; 255
     234:	00 00       	nop
     236:	00 00       	nop
     238:	00 00       	nop
     23a:	00 38       	cpi	r16, 0x80	; 128
     23c:	3c 3e       	cpi	r19, 0xEC	; 236
     23e:	3e 0f       	add	r19, r30
     240:	07 07       	cpc	r16, r23
     242:	07 cf       	rjmp	.-498    	; 0x52 <__SREG__+0x13>
     244:	ff fe       	.word	0xfeff	; ????
     246:	fe 38       	cpi	r31, 0x8E	; 142
     248:	00 00       	nop
     24a:	00 40       	sbci	r16, 0x00	; 0
     24c:	40 60       	ori	r20, 0x00	; 0
     24e:	70 78       	andi	r23, 0x80	; 128
     250:	7c 7e       	andi	r23, 0xEC	; 236
     252:	7f 77       	andi	r23, 0x7F	; 127
     254:	73 71       	andi	r23, 0x13	; 19
     256:	70 70       	andi	r23, 0x00	; 0
     258:	00 00       	nop
     25a:	00 18       	sub	r0, r0
     25c:	1c 1e       	adc	r1, r28
     25e:	1e 0f       	add	r17, r30
     260:	c7 c7       	rjmp	.+3982   	; 0x11f0 <_ZN7LSM303DC1Ev+0x6>
     262:	e7 ff       	sbrs	r30, 7
     264:	fe be       	out	0x3e, r15	; 62
     266:	9c 00       	.word	0x009c	; ????
     268:	00 00       	nop
     26a:	00 0c       	add	r0, r0
     26c:	1c 3c       	cpi	r17, 0xCC	; 204
     26e:	3c 78       	andi	r19, 0x8C	; 140
     270:	70 70       	andi	r23, 0x00	; 0
     272:	70 79       	andi	r23, 0x90	; 144
     274:	7f 3f       	cpi	r23, 0xFF	; 255
     276:	1f 0f       	add	r17, r31
     278:	00 00       	nop
     27a:	00 00       	nop
     27c:	80 c0       	rjmp	.+256    	; 0x37e <_ZL7font5x8+0x44>
     27e:	e0 70       	andi	r30, 0x00	; 0
     280:	38 1c       	adc	r3, r8
     282:	1e ff       	.word	0xff1e	; ????
     284:	ff ff       	.word	0xffff	; ????
     286:	ff 00       	.word	0x00ff	; ????
     288:	00 00       	nop
     28a:	06 07       	cpc	r16, r22
     28c:	07 07       	cpc	r16, r23
     28e:	06 06       	cpc	r0, r22
     290:	06 06       	cpc	r0, r22
     292:	06 7f       	andi	r16, 0xF6	; 246
     294:	7f 7f       	andi	r23, 0xFF	; 255
     296:	7f 06       	cpc	r7, r31
     298:	06 00       	.word	0x0006	; ????
     29a:	00 00       	nop
     29c:	00 00       	nop
     29e:	f0 ff       	sbrs	r31, 0
     2a0:	ff ff       	.word	0xffff	; ????
     2a2:	e7 e7       	ldi	r30, 0x77	; 119
     2a4:	e7 e7       	ldi	r30, 0x77	; 119
     2a6:	c7 87       	std	Z+15, r28	; 0x0f
     2a8:	00 00       	nop
     2aa:	00 00       	nop
     2ac:	38 78       	andi	r19, 0x88	; 136
     2ae:	71 70       	andi	r23, 0x01	; 1
     2b0:	70 70       	andi	r23, 0x00	; 0
     2b2:	70 70       	andi	r23, 0x00	; 0
     2b4:	39 3f       	cpi	r19, 0xF9	; 249
     2b6:	3f 1f       	adc	r19, r31
     2b8:	0f 00       	.word	0x000f	; ????
     2ba:	00 80       	ld	r0, Z
     2bc:	e0 f0       	brcs	.+56     	; 0x2f6 <__trampolines_end+0xfc>
     2be:	f8 fc       	.word	0xfcf8	; ????
     2c0:	7f 7f       	andi	r23, 0xFF	; 255
     2c2:	6f 67       	ori	r22, 0x7F	; 127
     2c4:	e1 e1       	ldi	r30, 0x11	; 17
     2c6:	c0 80       	ld	r12, Z
     2c8:	00 00       	nop
     2ca:	00 0f       	add	r16, r16
     2cc:	1f 3f       	cpi	r17, 0xFF	; 255
     2ce:	3f 78       	andi	r19, 0x8F	; 143
     2d0:	70 70       	andi	r23, 0x00	; 0
     2d2:	70 70       	andi	r23, 0x00	; 0
     2d4:	78 3f       	cpi	r23, 0xF8	; 248
     2d6:	3f 1f       	adc	r19, r31
     2d8:	0f 00       	.word	0x000f	; ????
     2da:	00 07       	cpc	r16, r16
     2dc:	07 07       	cpc	r16, r23
     2de:	07 07       	cpc	r16, r23
     2e0:	c7 e7       	ldi	r28, 0x77	; 119
     2e2:	f7 ff       	sbrs	r31, 7
     2e4:	7f 3f       	cpi	r23, 0xFF	; 255
     2e6:	1f 07       	cpc	r17, r31
     2e8:	03 01       	movw	r0, r6
     2ea:	00 20       	and	r0, r0
     2ec:	38 7c       	andi	r19, 0xC8	; 200
     2ee:	7e 3f       	cpi	r23, 0xFE	; 254
     2f0:	0f 07       	cpc	r16, r31
     2f2:	03 00       	.word	0x0003	; ????
	...
     2fc:	00 1c       	adc	r0, r0
     2fe:	be fe       	.word	0xfebe	; ????
     300:	ff e7       	ldi	r31, 0x7F	; 127
     302:	c3 c3       	rjmp	.+1926   	; 0xa8a <_ZN7Display6analogEhhhh+0x60>
     304:	e7 ff       	sbrs	r30, 7
     306:	fe be       	out	0x3e, r15	; 62
     308:	1c 00       	.word	0x001c	; ????
     30a:	00 00       	nop
     30c:	0e 3f       	cpi	r16, 0xFE	; 254
     30e:	3f 7f       	andi	r19, 0xFF	; 255
     310:	71 60       	ori	r23, 0x01	; 1
     312:	60 60       	ori	r22, 0x00	; 0
     314:	71 7f       	andi	r23, 0xF1	; 241
     316:	3f 3f       	cpi	r19, 0xFF	; 255
     318:	0f 00       	.word	0x000f	; ????
     31a:	00 78       	andi	r16, 0x80	; 128
     31c:	fc fe       	.word	0xfefc	; ????
     31e:	fe 8f       	std	Y+30, r31	; 0x1e
     320:	07 07       	cpc	r16, r23
     322:	07 07       	cpc	r16, r23
     324:	8f fe       	.word	0xfe8f	; ????
     326:	fe fc       	.word	0xfcfe	; ????
     328:	f8 00       	.word	0x00f8	; ????
     32a:	00 00       	nop
     32c:	00 01       	movw	r0, r0
     32e:	43 43       	sbci	r20, 0x33	; 51
     330:	73 7b       	andi	r23, 0xB3	; 179
     332:	7f 7f       	andi	r23, 0xFF	; 255
     334:	1f 0f       	add	r17, r31
     336:	07 03       	mulsu	r16, r23
	...

0000033a <_ZL7font5x8>:
     33a:	00 00 5f 00 00 00 07 00 07 00 14 7f 14 7f 14 24     .._............$
     34a:	2a 7f 2a 12 23 13 08 64 62 36 49 55 22 50 00 05     *.*.#..db6IU"P..
     35a:	03 00 00 00 1c 22 41 00 00 41 22 1c 00 14 08 3e     ....."A..A"....>
     36a:	08 14 08 08 3e 08 08 00 50 30 00 00 08 08 08 08     ....>...P0......
     37a:	08 00 60 60 00 00 20 10 08 04 02 3e 51 49 45 3e     ..``.. ....>QIE>
     38a:	00 42 7f 40 00 42 61 51 49 46 21 41 45 4b 31 18     .B.@.BaQIF!AEK1.
     39a:	14 12 7f 10 27 45 45 45 39 3c 4a 49 49 30 01 71     ....'EEE9<JII0.q
     3aa:	09 05 03 36 49 49 49 36 06 49 49 29 1e 00 36 36     ...6III6.II)..66
     3ba:	00 00 00 56 36 00 00 08 14 22 41 00 14 14 14 14     ...V6...."A.....
     3ca:	14 00 41 22 14 08 02 01 51 09 06 32 49 79 41 3e     ..A"....Q..2IyA>
     3da:	7e 11 11 11 7e 7f 49 49 49 36 3e 41 41 41 22 7f     ~...~.III6>AAA".
     3ea:	41 41 22 1c 7f 49 49 49 41 7f 09 09 09 01 3e 41     AA"..IIIA.....>A
     3fa:	49 49 7a 7f 08 08 08 7f 00 41 7f 41 00 20 40 41     IIz......A.A. @A
     40a:	3f 01 7f 08 14 22 41 7f 40 40 40 40 7f 02 0c 02     ?...."A.@@@@....
     41a:	7f 7f 04 08 10 7f 3e 41 41 41 3e 7f 09 09 09 06     ......>AAA>.....
     42a:	3e 41 51 21 5e 7f 09 19 29 46 46 49 49 49 31 01     >AQ!^...)FFIII1.
     43a:	01 7f 01 01 3f 40 40 40 3f 1f 20 40 20 1f 3f 40     ....?@@@?. @ .?@
     44a:	38 40 3f 63 14 08 14 63 07 08 70 08 07 61 51 49     8@?c...c..p..aQI
     45a:	45 43 00 7f 41 41 00 02 04 08 10 20 00 41 41 7f     EC..AA..... .AA.
     46a:	00 04 02 01 02 04 40 40 40 40 40 00 01 02 04 00     ......@@@@@.....
     47a:	20 54 54 54 78 7f 48 44 44 38 38 44 44 44 20 38      TTTx.HDD88DDD 8
     48a:	44 44 48 7f 38 54 54 54 18 08 7e 09 01 02 0c 52     DDH.8TTT..~....R
     49a:	52 52 3e 7f 08 04 04 78 00 44 7d 40 00 20 40 44     RR>....x.D}@. @D
     4aa:	3d 00 7f 10 28 44 00 00 41 7f 40 00 7c 04 18 04     =...(D..A.@.|...
     4ba:	78 7c 08 04 04 78 38 44 44 44 38 7c 14 14 14 08     x|...x8DDD8|....
     4ca:	08 14 14 18 7c 7c 08 04 04 08 48 54 54 54 20 04     ....||....HTTT .
     4da:	3f 44 40 20 3c 40 40 20 7c 1c 20 40 20 1c 3c 40     ?D@ <@@ |. @ .<@
     4ea:	30 40 3c 44 28 10 28 44 0c 50 50 50 3c 44 64 54     0@<D(.(D.PPP<DdT
     4fa:	4c 44 00 08 36 41 00 00 00 7f 00 00 00 41 36 08     LD..6A.......A6.
     50a:	00 10 08 08 10 08                                   ......

00000510 <__c.2179>:
     510:	6e 61 6e 00                                         nan.

00000514 <__c.2177>:
     514:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     524:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     534:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     544:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     554:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     564:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     574:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     584:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     594:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     5a4:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     5b4:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     5c4:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     5d4:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     5e4:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     5f4:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     604:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000612 <__ctors_start>:
     612:	c6 1d       	adc	r28, r6

00000614 <__ctors_end>:
     614:	ed 1d       	adc	r30, r13

00000616 <__dtors_end>:
     616:	11 24       	eor	r1, r1
     618:	1f be       	out	0x3f, r1	; 63
     61a:	cf ef       	ldi	r28, 0xFF	; 255
     61c:	d0 e4       	ldi	r29, 0x40	; 64
     61e:	de bf       	out	0x3e, r29	; 62
     620:	cd bf       	out	0x3d, r28	; 61

00000622 <__do_copy_data>:
     622:	12 e0       	ldi	r17, 0x02	; 2
     624:	a0 e0       	ldi	r26, 0x00	; 0
     626:	b1 e0       	ldi	r27, 0x01	; 1
     628:	e6 ef       	ldi	r30, 0xF6	; 246
     62a:	f5 e5       	ldi	r31, 0x55	; 85
     62c:	00 e0       	ldi	r16, 0x00	; 0
     62e:	0b bf       	out	0x3b, r16	; 59
     630:	02 c0       	rjmp	.+4      	; 0x636 <__do_copy_data+0x14>
     632:	07 90       	elpm	r0, Z+
     634:	0d 92       	st	X+, r0
     636:	a6 3c       	cpi	r26, 0xC6	; 198
     638:	b1 07       	cpc	r27, r17
     63a:	d9 f7       	brne	.-10     	; 0x632 <__do_copy_data+0x10>

0000063c <__do_clear_bss>:
     63c:	28 e0       	ldi	r18, 0x08	; 8
     63e:	a6 ec       	ldi	r26, 0xC6	; 198
     640:	b2 e0       	ldi	r27, 0x02	; 2
     642:	01 c0       	rjmp	.+2      	; 0x646 <.do_clear_bss_start>

00000644 <.do_clear_bss_loop>:
     644:	1d 92       	st	X+, r1

00000646 <.do_clear_bss_start>:
     646:	ad 35       	cpi	r26, 0x5D	; 93
     648:	b2 07       	cpc	r27, r18
     64a:	e1 f7       	brne	.-8      	; 0x644 <.do_clear_bss_loop>

0000064c <__do_global_ctors>:
     64c:	13 e0       	ldi	r17, 0x03	; 3
     64e:	ca e0       	ldi	r28, 0x0A	; 10
     650:	d3 e0       	ldi	r29, 0x03	; 3
     652:	04 c0       	rjmp	.+8      	; 0x65c <__do_global_ctors+0x10>
     654:	21 97       	sbiw	r28, 0x01	; 1
     656:	fe 01       	movw	r30, r28
     658:	0e 94 06 28 	call	0x500c	; 0x500c <__tablejump2__>
     65c:	c9 30       	cpi	r28, 0x09	; 9
     65e:	d1 07       	cpc	r29, r17
     660:	c9 f7       	brne	.-14     	; 0x654 <__do_global_ctors+0x8>
     662:	0e 94 36 17 	call	0x2e6c	; 0x2e6c <main>
     666:	0c 94 ef 2a 	jmp	0x55de	; 0x55de <__do_global_dtors>

0000066a <__bad_interrupt>:
     66a:	ca cc       	rjmp	.-1644   	; 0x0 <__vectors>

0000066c <_ZN7DisplayD1Ev>:
	else{
		for(uint8_t i = 0; i < 7; i++){
			Displayframe[x+(y/8)*SSD1306_WIDTH+i] |= 0;
		}
	}
}
     66c:	9c 5f       	subi	r25, 0xFC	; 252
     66e:	5a c4       	rjmp	.+2228   	; 0xf24 <_ZN3I2CD1Ev>
     670:	08 95       	ret

00000672 <_ZN7Display10clearFrameEv>:
     672:	fc 01       	movw	r30, r24
     674:	9c 5f       	subi	r25, 0xFC	; 252
     676:	11 92       	st	Z+, r1
     678:	e8 17       	cp	r30, r24
     67a:	f9 07       	cpc	r31, r25
     67c:	e1 f7       	brne	.-8      	; 0x676 <_ZN7Display10clearFrameEv+0x4>
     67e:	08 95       	ret

00000680 <_ZN7Display15ssd1306_commandEh>:
     680:	1f 93       	push	r17
     682:	cf 93       	push	r28
     684:	df 93       	push	r29
     686:	16 2f       	mov	r17, r22
     688:	ec 01       	movw	r28, r24
     68a:	dc 5f       	subi	r29, 0xFC	; 252
     68c:	ce 01       	movw	r24, r28
     68e:	4b d4       	rcall	.+2198   	; 0xf26 <_ZN3I2C9twi_startEv>
     690:	68 e7       	ldi	r22, 0x78	; 120
     692:	ce 01       	movw	r24, r28
     694:	50 d4       	rcall	.+2208   	; 0xf36 <_ZN3I2C9twi_writeEh>
     696:	60 e0       	ldi	r22, 0x00	; 0
     698:	ce 01       	movw	r24, r28
     69a:	4d d4       	rcall	.+2202   	; 0xf36 <_ZN3I2C9twi_writeEh>
     69c:	61 2f       	mov	r22, r17
     69e:	ce 01       	movw	r24, r28
     6a0:	4a d4       	rcall	.+2196   	; 0xf36 <_ZN3I2C9twi_writeEh>
     6a2:	ce 01       	movw	r24, r28
     6a4:	44 d4       	rcall	.+2184   	; 0xf2e <_ZN3I2C8twi_stopEv>
     6a6:	df 91       	pop	r29
     6a8:	cf 91       	pop	r28
     6aa:	1f 91       	pop	r17
     6ac:	08 95       	ret

000006ae <_ZN7Display17InitializeDisplayEv>:
     6ae:	cf 93       	push	r28
     6b0:	df 93       	push	r29
     6b2:	ec 01       	movw	r28, r24
     6b4:	6e ea       	ldi	r22, 0xAE	; 174
     6b6:	e4 df       	rcall	.-56     	; 0x680 <_ZN7Display15ssd1306_commandEh>
     6b8:	65 ed       	ldi	r22, 0xD5	; 213
     6ba:	ce 01       	movw	r24, r28
     6bc:	e1 df       	rcall	.-62     	; 0x680 <_ZN7Display15ssd1306_commandEh>
     6be:	60 e8       	ldi	r22, 0x80	; 128
     6c0:	ce 01       	movw	r24, r28
     6c2:	de df       	rcall	.-68     	; 0x680 <_ZN7Display15ssd1306_commandEh>
     6c4:	68 ea       	ldi	r22, 0xA8	; 168
     6c6:	ce 01       	movw	r24, r28
     6c8:	db df       	rcall	.-74     	; 0x680 <_ZN7Display15ssd1306_commandEh>
     6ca:	6f e3       	ldi	r22, 0x3F	; 63
     6cc:	ce 01       	movw	r24, r28
     6ce:	d8 df       	rcall	.-80     	; 0x680 <_ZN7Display15ssd1306_commandEh>
     6d0:	63 ed       	ldi	r22, 0xD3	; 211
     6d2:	ce 01       	movw	r24, r28
     6d4:	d5 df       	rcall	.-86     	; 0x680 <_ZN7Display15ssd1306_commandEh>
     6d6:	60 e0       	ldi	r22, 0x00	; 0
     6d8:	ce 01       	movw	r24, r28
     6da:	d2 df       	rcall	.-92     	; 0x680 <_ZN7Display15ssd1306_commandEh>
     6dc:	60 e4       	ldi	r22, 0x40	; 64
     6de:	ce 01       	movw	r24, r28
     6e0:	cf df       	rcall	.-98     	; 0x680 <_ZN7Display15ssd1306_commandEh>
     6e2:	6d e8       	ldi	r22, 0x8D	; 141
     6e4:	ce 01       	movw	r24, r28
     6e6:	cc df       	rcall	.-104    	; 0x680 <_ZN7Display15ssd1306_commandEh>
     6e8:	64 e1       	ldi	r22, 0x14	; 20
     6ea:	ce 01       	movw	r24, r28
     6ec:	c9 df       	rcall	.-110    	; 0x680 <_ZN7Display15ssd1306_commandEh>
     6ee:	60 e2       	ldi	r22, 0x20	; 32
     6f0:	ce 01       	movw	r24, r28
     6f2:	c6 df       	rcall	.-116    	; 0x680 <_ZN7Display15ssd1306_commandEh>
     6f4:	60 e0       	ldi	r22, 0x00	; 0
     6f6:	ce 01       	movw	r24, r28
     6f8:	c3 df       	rcall	.-122    	; 0x680 <_ZN7Display15ssd1306_commandEh>
     6fa:	61 ea       	ldi	r22, 0xA1	; 161
     6fc:	ce 01       	movw	r24, r28
     6fe:	c0 df       	rcall	.-128    	; 0x680 <_ZN7Display15ssd1306_commandEh>
     700:	68 ec       	ldi	r22, 0xC8	; 200
     702:	ce 01       	movw	r24, r28
     704:	bd df       	rcall	.-134    	; 0x680 <_ZN7Display15ssd1306_commandEh>
     706:	6a ed       	ldi	r22, 0xDA	; 218
     708:	ce 01       	movw	r24, r28
     70a:	ba df       	rcall	.-140    	; 0x680 <_ZN7Display15ssd1306_commandEh>
     70c:	62 e1       	ldi	r22, 0x12	; 18
     70e:	ce 01       	movw	r24, r28
     710:	b7 df       	rcall	.-146    	; 0x680 <_ZN7Display15ssd1306_commandEh>
     712:	61 e8       	ldi	r22, 0x81	; 129
     714:	ce 01       	movw	r24, r28
     716:	b4 df       	rcall	.-152    	; 0x680 <_ZN7Display15ssd1306_commandEh>
     718:	6f ec       	ldi	r22, 0xCF	; 207
     71a:	ce 01       	movw	r24, r28
     71c:	b1 df       	rcall	.-158    	; 0x680 <_ZN7Display15ssd1306_commandEh>
     71e:	69 ed       	ldi	r22, 0xD9	; 217
     720:	ce 01       	movw	r24, r28
     722:	ae df       	rcall	.-164    	; 0x680 <_ZN7Display15ssd1306_commandEh>
     724:	61 ef       	ldi	r22, 0xF1	; 241
     726:	ce 01       	movw	r24, r28
     728:	ab df       	rcall	.-170    	; 0x680 <_ZN7Display15ssd1306_commandEh>
     72a:	6b ed       	ldi	r22, 0xDB	; 219
     72c:	ce 01       	movw	r24, r28
     72e:	a8 df       	rcall	.-176    	; 0x680 <_ZN7Display15ssd1306_commandEh>
     730:	60 e4       	ldi	r22, 0x40	; 64
     732:	ce 01       	movw	r24, r28
     734:	a5 df       	rcall	.-182    	; 0x680 <_ZN7Display15ssd1306_commandEh>
     736:	64 ea       	ldi	r22, 0xA4	; 164
     738:	ce 01       	movw	r24, r28
     73a:	a2 df       	rcall	.-188    	; 0x680 <_ZN7Display15ssd1306_commandEh>
     73c:	66 ea       	ldi	r22, 0xA6	; 166
     73e:	ce 01       	movw	r24, r28
     740:	9f df       	rcall	.-194    	; 0x680 <_ZN7Display15ssd1306_commandEh>
     742:	6f ea       	ldi	r22, 0xAF	; 175
     744:	ce 01       	movw	r24, r28
     746:	9c df       	rcall	.-200    	; 0x680 <_ZN7Display15ssd1306_commandEh>
     748:	df 91       	pop	r29
     74a:	cf 91       	pop	r28
     74c:	08 95       	ret

0000074e <_ZN7DisplayC1Ev>:
     74e:	cf 93       	push	r28
     750:	df 93       	push	r29
     752:	ec 01       	movw	r28, r24
     754:	9c 5f       	subi	r25, 0xFC	; 252
     756:	e2 d3       	rcall	.+1988   	; 0xf1c <_ZN3I2CC1Ev>
     758:	ce 01       	movw	r24, r28
     75a:	a9 df       	rcall	.-174    	; 0x6ae <_ZN7Display17InitializeDisplayEv>
     75c:	ce 01       	movw	r24, r28
     75e:	89 df       	rcall	.-238    	; 0x672 <_ZN7Display10clearFrameEv>
     760:	df 91       	pop	r29
     762:	cf 91       	pop	r28
     764:	08 95       	ret

00000766 <_ZN7Display9sendFrameEv>:
     766:	ef 92       	push	r14
     768:	ff 92       	push	r15
     76a:	0f 93       	push	r16
     76c:	1f 93       	push	r17
     76e:	cf 93       	push	r28
     770:	df 93       	push	r29
     772:	ec 01       	movw	r28, r24
     774:	61 e2       	ldi	r22, 0x21	; 33
     776:	84 df       	rcall	.-248    	; 0x680 <_ZN7Display15ssd1306_commandEh>
     778:	60 e0       	ldi	r22, 0x00	; 0
     77a:	ce 01       	movw	r24, r28
     77c:	81 df       	rcall	.-254    	; 0x680 <_ZN7Display15ssd1306_commandEh>
     77e:	6f e7       	ldi	r22, 0x7F	; 127
     780:	ce 01       	movw	r24, r28
     782:	7e df       	rcall	.-260    	; 0x680 <_ZN7Display15ssd1306_commandEh>
     784:	62 e2       	ldi	r22, 0x22	; 34
     786:	ce 01       	movw	r24, r28
     788:	7b df       	rcall	.-266    	; 0x680 <_ZN7Display15ssd1306_commandEh>
     78a:	60 e0       	ldi	r22, 0x00	; 0
     78c:	ce 01       	movw	r24, r28
     78e:	78 df       	rcall	.-272    	; 0x680 <_ZN7Display15ssd1306_commandEh>
     790:	67 e0       	ldi	r22, 0x07	; 7
     792:	ce 01       	movw	r24, r28
     794:	75 df       	rcall	.-278    	; 0x680 <_ZN7Display15ssd1306_commandEh>
     796:	8e 01       	movw	r16, r28
     798:	1c 5f       	subi	r17, 0xFC	; 252
     79a:	c8 01       	movw	r24, r16
     79c:	c4 d3       	rcall	.+1928   	; 0xf26 <_ZN3I2C9twi_startEv>
     79e:	68 e7       	ldi	r22, 0x78	; 120
     7a0:	c8 01       	movw	r24, r16
     7a2:	c9 d3       	rcall	.+1938   	; 0xf36 <_ZN3I2C9twi_writeEh>
     7a4:	60 e4       	ldi	r22, 0x40	; 64
     7a6:	c8 01       	movw	r24, r16
     7a8:	c6 d3       	rcall	.+1932   	; 0xf36 <_ZN3I2C9twi_writeEh>
     7aa:	78 01       	movw	r14, r16
     7ac:	69 91       	ld	r22, Y+
     7ae:	c8 01       	movw	r24, r16
     7b0:	c2 d3       	rcall	.+1924   	; 0xf36 <_ZN3I2C9twi_writeEh>
     7b2:	ce 15       	cp	r28, r14
     7b4:	df 05       	cpc	r29, r15
     7b6:	d1 f7       	brne	.-12     	; 0x7ac <_ZN7Display9sendFrameEv+0x46>
     7b8:	c8 01       	movw	r24, r16
     7ba:	b9 d3       	rcall	.+1906   	; 0xf2e <_ZN3I2C8twi_stopEv>
     7bc:	df 91       	pop	r29
     7be:	cf 91       	pop	r28
     7c0:	1f 91       	pop	r17
     7c2:	0f 91       	pop	r16
     7c4:	ff 90       	pop	r15
     7c6:	ef 90       	pop	r14
     7c8:	08 95       	ret

000007ca <_ZN7Display9drawPixelEhhh>:
     7ca:	66 23       	and	r22, r22
     7cc:	ac f1       	brlt	.+106    	; 0x838 <_ZN7Display9drawPixelEhhh+0x6e>
     7ce:	40 34       	cpi	r20, 0x40	; 64
     7d0:	98 f5       	brcc	.+102    	; 0x838 <_ZN7Display9drawPixelEhhh+0x6e>
     7d2:	21 11       	cpse	r18, r1
     7d4:	19 c0       	rjmp	.+50     	; 0x808 <_ZN7Display9drawPixelEhhh+0x3e>
     7d6:	24 2f       	mov	r18, r20
     7d8:	26 95       	lsr	r18
     7da:	26 95       	lsr	r18
     7dc:	26 95       	lsr	r18
     7de:	50 e8       	ldi	r21, 0x80	; 128
     7e0:	25 9f       	mul	r18, r21
     7e2:	90 01       	movw	r18, r0
     7e4:	11 24       	eor	r1, r1
     7e6:	26 0f       	add	r18, r22
     7e8:	31 1d       	adc	r19, r1
     7ea:	fc 01       	movw	r30, r24
     7ec:	e2 0f       	add	r30, r18
     7ee:	f3 1f       	adc	r31, r19
     7f0:	47 70       	andi	r20, 0x07	; 7
     7f2:	81 e0       	ldi	r24, 0x01	; 1
     7f4:	90 e0       	ldi	r25, 0x00	; 0
     7f6:	02 c0       	rjmp	.+4      	; 0x7fc <_ZN7Display9drawPixelEhhh+0x32>
     7f8:	88 0f       	add	r24, r24
     7fa:	99 1f       	adc	r25, r25
     7fc:	4a 95       	dec	r20
     7fe:	e2 f7       	brpl	.-8      	; 0x7f8 <_ZN7Display9drawPixelEhhh+0x2e>
     800:	90 81       	ld	r25, Z
     802:	89 2b       	or	r24, r25
     804:	80 83       	st	Z, r24
     806:	08 95       	ret
     808:	24 2f       	mov	r18, r20
     80a:	26 95       	lsr	r18
     80c:	26 95       	lsr	r18
     80e:	26 95       	lsr	r18
     810:	30 e8       	ldi	r19, 0x80	; 128
     812:	23 9f       	mul	r18, r19
     814:	f0 01       	movw	r30, r0
     816:	11 24       	eor	r1, r1
     818:	e6 0f       	add	r30, r22
     81a:	f1 1d       	adc	r31, r1
     81c:	e8 0f       	add	r30, r24
     81e:	f9 1f       	adc	r31, r25
     820:	47 70       	andi	r20, 0x07	; 7
     822:	81 e0       	ldi	r24, 0x01	; 1
     824:	90 e0       	ldi	r25, 0x00	; 0
     826:	02 c0       	rjmp	.+4      	; 0x82c <_ZN7Display9drawPixelEhhh+0x62>
     828:	88 0f       	add	r24, r24
     82a:	99 1f       	adc	r25, r25
     82c:	4a 95       	dec	r20
     82e:	e2 f7       	brpl	.-8      	; 0x828 <_ZN7Display9drawPixelEhhh+0x5e>
     830:	80 95       	com	r24
     832:	90 81       	ld	r25, Z
     834:	89 23       	and	r24, r25
     836:	80 83       	st	Z, r24
     838:	08 95       	ret

0000083a <_ZN7Display9drawVLineEhhh>:
     83a:	ff 92       	push	r15
     83c:	0f 93       	push	r16
     83e:	1f 93       	push	r17
     840:	cf 93       	push	r28
     842:	df 93       	push	r29
     844:	22 23       	and	r18, r18
     846:	69 f0       	breq	.+26     	; 0x862 <_ZN7Display9drawVLineEhhh+0x28>
     848:	c4 2f       	mov	r28, r20
     84a:	f6 2e       	mov	r15, r22
     84c:	8c 01       	movw	r16, r24
     84e:	d2 2f       	mov	r29, r18
     850:	d4 0f       	add	r29, r20
     852:	20 e0       	ldi	r18, 0x00	; 0
     854:	4c 2f       	mov	r20, r28
     856:	6f 2d       	mov	r22, r15
     858:	c8 01       	movw	r24, r16
     85a:	b7 df       	rcall	.-146    	; 0x7ca <_ZN7Display9drawPixelEhhh>
     85c:	cf 5f       	subi	r28, 0xFF	; 255
     85e:	cd 13       	cpse	r28, r29
     860:	f8 cf       	rjmp	.-16     	; 0x852 <_ZN7Display9drawVLineEhhh+0x18>
     862:	df 91       	pop	r29
     864:	cf 91       	pop	r28
     866:	1f 91       	pop	r17
     868:	0f 91       	pop	r16
     86a:	ff 90       	pop	r15
     86c:	08 95       	ret

0000086e <_ZN7Display9drawHLineEhhh>:
     86e:	ff 92       	push	r15
     870:	0f 93       	push	r16
     872:	1f 93       	push	r17
     874:	cf 93       	push	r28
     876:	df 93       	push	r29
     878:	22 23       	and	r18, r18
     87a:	69 f0       	breq	.+26     	; 0x896 <_ZN7Display9drawHLineEhhh+0x28>
     87c:	f4 2e       	mov	r15, r20
     87e:	c6 2f       	mov	r28, r22
     880:	8c 01       	movw	r16, r24
     882:	d2 2f       	mov	r29, r18
     884:	d6 0f       	add	r29, r22
     886:	20 e0       	ldi	r18, 0x00	; 0
     888:	4f 2d       	mov	r20, r15
     88a:	6c 2f       	mov	r22, r28
     88c:	c8 01       	movw	r24, r16
     88e:	9d df       	rcall	.-198    	; 0x7ca <_ZN7Display9drawPixelEhhh>
     890:	cf 5f       	subi	r28, 0xFF	; 255
     892:	cd 13       	cpse	r28, r29
     894:	f8 cf       	rjmp	.-16     	; 0x886 <_ZN7Display9drawHLineEhhh+0x18>
     896:	df 91       	pop	r29
     898:	cf 91       	pop	r28
     89a:	1f 91       	pop	r17
     89c:	0f 91       	pop	r16
     89e:	ff 90       	pop	r15
     8a0:	08 95       	ret

000008a2 <_ZN7Display9draw_ASCIEhhh>:
     8a2:	0f 93       	push	r16
     8a4:	1f 93       	push	r17
     8a6:	cf 93       	push	r28
     8a8:	df 93       	push	r29
     8aa:	61 32       	cpi	r22, 0x21	; 33
     8ac:	08 f4       	brcc	.+2      	; 0x8b0 <_ZN7Display9draw_ASCIEhhh+0xe>
     8ae:	3e c0       	rjmp	.+124    	; 0x92c <_ZN7Display9draw_ASCIEhhh+0x8a>
     8b0:	a4 2f       	mov	r26, r20
     8b2:	b0 e0       	ldi	r27, 0x00	; 0
     8b4:	02 2f       	mov	r16, r18
     8b6:	06 95       	lsr	r16
     8b8:	06 95       	lsr	r16
     8ba:	06 95       	lsr	r16
     8bc:	30 e8       	ldi	r19, 0x80	; 128
     8be:	03 9f       	mul	r16, r19
     8c0:	80 01       	movw	r16, r0
     8c2:	11 24       	eor	r1, r1
     8c4:	61 52       	subi	r22, 0x21	; 33
     8c6:	70 e0       	ldi	r23, 0x00	; 0
     8c8:	fb 01       	movw	r30, r22
     8ca:	ee 0f       	add	r30, r30
     8cc:	ff 1f       	adc	r31, r31
     8ce:	ee 0f       	add	r30, r30
     8d0:	ff 1f       	adc	r31, r31
     8d2:	e6 0f       	add	r30, r22
     8d4:	f7 1f       	adc	r31, r23
     8d6:	e6 5c       	subi	r30, 0xC6	; 198
     8d8:	fc 4f       	sbci	r31, 0xFC	; 252
     8da:	ad 01       	movw	r20, r26
     8dc:	40 0f       	add	r20, r16
     8de:	51 1f       	adc	r21, r17
     8e0:	ec 01       	movw	r28, r24
     8e2:	c4 0f       	add	r28, r20
     8e4:	d5 1f       	adc	r29, r21
     8e6:	00 58       	subi	r16, 0x80	; 128
     8e8:	1f 4f       	sbci	r17, 0xFF	; 255
     8ea:	a0 0f       	add	r26, r16
     8ec:	b1 1f       	adc	r27, r17
     8ee:	a8 0f       	add	r26, r24
     8f0:	b9 1f       	adc	r27, r25
     8f2:	4b 5f       	subi	r20, 0xFB	; 251
     8f4:	5f 4f       	sbci	r21, 0xFF	; 255
     8f6:	48 0f       	add	r20, r24
     8f8:	59 1f       	adc	r21, r25
     8fa:	27 70       	andi	r18, 0x07	; 7
     8fc:	64 91       	lpm	r22, Z
     8fe:	70 e0       	ldi	r23, 0x00	; 0
     900:	02 2e       	mov	r0, r18
     902:	02 c0       	rjmp	.+4      	; 0x908 <_ZN7Display9draw_ASCIEhhh+0x66>
     904:	66 0f       	add	r22, r22
     906:	77 1f       	adc	r23, r23
     908:	0a 94       	dec	r0
     90a:	e2 f7       	brpl	.-8      	; 0x904 <_ZN7Display9draw_ASCIEhhh+0x62>
     90c:	98 81       	ld	r25, Y
     90e:	96 2b       	or	r25, r22
     910:	99 93       	st	Y+, r25
     912:	67 2f       	mov	r22, r23
     914:	77 27       	eor	r23, r23
     916:	61 15       	cp	r22, r1
     918:	71 05       	cpc	r23, r1
     91a:	19 f0       	breq	.+6      	; 0x922 <_ZN7Display9draw_ASCIEhhh+0x80>
     91c:	8c 91       	ld	r24, X
     91e:	68 2b       	or	r22, r24
     920:	6c 93       	st	X, r22
     922:	31 96       	adiw	r30, 0x01	; 1
     924:	11 96       	adiw	r26, 0x01	; 1
     926:	c4 17       	cp	r28, r20
     928:	d5 07       	cpc	r29, r21
     92a:	41 f7       	brne	.-48     	; 0x8fc <_ZN7Display9draw_ASCIEhhh+0x5a>
     92c:	df 91       	pop	r29
     92e:	cf 91       	pop	r28
     930:	1f 91       	pop	r17
     932:	0f 91       	pop	r16
     934:	08 95       	ret

00000936 <_ZN7Display16draw_number16x16Ehhh>:
     936:	cf 92       	push	r12
     938:	df 92       	push	r13
     93a:	ef 92       	push	r14
     93c:	ff 92       	push	r15
     93e:	0f 93       	push	r16
     940:	1f 93       	push	r17
     942:	cf 93       	push	r28
     944:	df 93       	push	r29
     946:	6a 30       	cpi	r22, 0x0A	; 10
     948:	08 f0       	brcs	.+2      	; 0x94c <_ZN7Display16draw_number16x16Ehhh+0x16>
     94a:	66 c0       	rjmp	.+204    	; 0xa18 <_ZN7Display16draw_number16x16Ehhh+0xe2>
     94c:	50 e0       	ldi	r21, 0x00	; 0
     94e:	02 2f       	mov	r16, r18
     950:	06 95       	lsr	r16
     952:	06 95       	lsr	r16
     954:	06 95       	lsr	r16
     956:	10 e0       	ldi	r17, 0x00	; 0
     958:	d8 01       	movw	r26, r16
     95a:	b6 95       	lsr	r27
     95c:	ba 2f       	mov	r27, r26
     95e:	aa 27       	eor	r26, r26
     960:	b7 95       	ror	r27
     962:	a7 95       	ror	r26
     964:	0f 5f       	subi	r16, 0xFF	; 255
     966:	1f 4f       	sbci	r17, 0xFF	; 255
     968:	16 95       	lsr	r17
     96a:	10 2f       	mov	r17, r16
     96c:	00 27       	eor	r16, r16
     96e:	17 95       	ror	r17
     970:	07 95       	ror	r16
     972:	7d 01       	movw	r14, r26
     974:	30 e8       	ldi	r19, 0x80	; 128
     976:	e3 0e       	add	r14, r19
     978:	f1 1c       	adc	r15, r1
     97a:	e4 0e       	add	r14, r20
     97c:	f5 1e       	adc	r15, r21
     97e:	e8 0e       	add	r14, r24
     980:	f9 1e       	adc	r15, r25
     982:	ea 01       	movw	r28, r20
     984:	c0 0f       	add	r28, r16
     986:	d1 1f       	adc	r29, r17
     988:	60 97       	sbiw	r28, 0x10	; 16
     98a:	c8 0f       	add	r28, r24
     98c:	d9 1f       	adc	r29, r25
     98e:	04 0f       	add	r16, r20
     990:	15 1f       	adc	r17, r21
     992:	00 59       	subi	r16, 0x90	; 144
     994:	1f 4f       	sbci	r17, 0xFF	; 255
     996:	08 0f       	add	r16, r24
     998:	19 1f       	adc	r17, r25
     99a:	a4 0f       	add	r26, r20
     99c:	b5 1f       	adc	r27, r21
     99e:	a8 0f       	add	r26, r24
     9a0:	b9 1f       	adc	r27, r25
     9a2:	80 e2       	ldi	r24, 0x20	; 32
     9a4:	68 9f       	mul	r22, r24
     9a6:	b0 01       	movw	r22, r0
     9a8:	11 24       	eor	r1, r1
     9aa:	40 e0       	ldi	r20, 0x00	; 0
     9ac:	50 e0       	ldi	r21, 0x00	; 0
     9ae:	27 70       	andi	r18, 0x07	; 7
     9b0:	fa 01       	movw	r30, r20
     9b2:	e6 0f       	add	r30, r22
     9b4:	f7 1f       	adc	r31, r23
     9b6:	e6 50       	subi	r30, 0x06	; 6
     9b8:	fe 4f       	sbci	r31, 0xFE	; 254
     9ba:	e4 91       	lpm	r30, Z
     9bc:	f0 e0       	ldi	r31, 0x00	; 0
     9be:	02 2e       	mov	r0, r18
     9c0:	02 c0       	rjmp	.+4      	; 0x9c6 <_ZN7Display16draw_number16x16Ehhh+0x90>
     9c2:	ee 0f       	add	r30, r30
     9c4:	ff 1f       	adc	r31, r31
     9c6:	0a 94       	dec	r0
     9c8:	e2 f7       	brpl	.-8      	; 0x9c2 <_ZN7Display16draw_number16x16Ehhh+0x8c>
     9ca:	40 31       	cpi	r20, 0x10	; 16
     9cc:	68 f4       	brcc	.+26     	; 0x9e8 <_ZN7Display16draw_number16x16Ehhh+0xb2>
     9ce:	8c 91       	ld	r24, X
     9d0:	8e 2b       	or	r24, r30
     9d2:	8c 93       	st	X, r24
     9d4:	cf 2e       	mov	r12, r31
     9d6:	dd 24       	eor	r13, r13
     9d8:	c1 14       	cp	r12, r1
     9da:	d1 04       	cpc	r13, r1
     9dc:	89 f0       	breq	.+34     	; 0xa00 <_ZN7Display16draw_number16x16Ehhh+0xca>
     9de:	f7 01       	movw	r30, r14
     9e0:	80 81       	ld	r24, Z
     9e2:	8c 29       	or	r24, r12
     9e4:	80 83       	st	Z, r24
     9e6:	0c c0       	rjmp	.+24     	; 0xa00 <_ZN7Display16draw_number16x16Ehhh+0xca>
     9e8:	88 81       	ld	r24, Y
     9ea:	8e 2b       	or	r24, r30
     9ec:	88 83       	st	Y, r24
     9ee:	cf 2e       	mov	r12, r31
     9f0:	dd 24       	eor	r13, r13
     9f2:	c1 14       	cp	r12, r1
     9f4:	d1 04       	cpc	r13, r1
     9f6:	21 f0       	breq	.+8      	; 0xa00 <_ZN7Display16draw_number16x16Ehhh+0xca>
     9f8:	f8 01       	movw	r30, r16
     9fa:	80 81       	ld	r24, Z
     9fc:	8c 29       	or	r24, r12
     9fe:	80 83       	st	Z, r24
     a00:	4f 5f       	subi	r20, 0xFF	; 255
     a02:	5f 4f       	sbci	r21, 0xFF	; 255
     a04:	ff ef       	ldi	r31, 0xFF	; 255
     a06:	ef 1a       	sub	r14, r31
     a08:	ff 0a       	sbc	r15, r31
     a0a:	21 96       	adiw	r28, 0x01	; 1
     a0c:	0f 5f       	subi	r16, 0xFF	; 255
     a0e:	1f 4f       	sbci	r17, 0xFF	; 255
     a10:	11 96       	adiw	r26, 0x01	; 1
     a12:	40 32       	cpi	r20, 0x20	; 32
     a14:	51 05       	cpc	r21, r1
     a16:	61 f6       	brne	.-104    	; 0x9b0 <_ZN7Display16draw_number16x16Ehhh+0x7a>
     a18:	df 91       	pop	r29
     a1a:	cf 91       	pop	r28
     a1c:	1f 91       	pop	r17
     a1e:	0f 91       	pop	r16
     a20:	ff 90       	pop	r15
     a22:	ef 90       	pop	r14
     a24:	df 90       	pop	r13
     a26:	cf 90       	pop	r12
     a28:	08 95       	ret

00000a2a <_ZN7Display6analogEhhhh>:

void Display::analog(uint8_t stunde, uint8_t minute, uint8_t sekunde, uint8_t sekanzeige){
     a2a:	2f 92       	push	r2
     a2c:	3f 92       	push	r3
     a2e:	4f 92       	push	r4
     a30:	5f 92       	push	r5
     a32:	6f 92       	push	r6
     a34:	7f 92       	push	r7
     a36:	8f 92       	push	r8
     a38:	9f 92       	push	r9
     a3a:	af 92       	push	r10
     a3c:	bf 92       	push	r11
     a3e:	cf 92       	push	r12
     a40:	df 92       	push	r13
     a42:	ef 92       	push	r14
     a44:	ff 92       	push	r15
     a46:	0f 93       	push	r16
     a48:	1f 93       	push	r17
     a4a:	cf 93       	push	r28
     a4c:	df 93       	push	r29
     a4e:	cd b7       	in	r28, 0x3d	; 61
     a50:	de b7       	in	r29, 0x3e	; 62
     a52:	27 97       	sbiw	r28, 0x07	; 7
     a54:	0f b6       	in	r0, 0x3f	; 63
     a56:	f8 94       	cli
     a58:	de bf       	out	0x3e, r29	; 62
     a5a:	0f be       	out	0x3f, r0	; 63
     a5c:	cd bf       	out	0x3d, r28	; 61
     a5e:	9f 83       	std	Y+7, r25	; 0x07
     a60:	8e 83       	std	Y+6, r24	; 0x06
     a62:	6d 83       	std	Y+5, r22	; 0x05
     a64:	34 2e       	mov	r3, r20
	uint8_t Px=32-1;
	uint8_t Py=32-1;
	uint8_t x=0,y=0;
	float winkel=0;
	
	if (sekanzeige)
     a66:	00 23       	and	r16, r16
     a68:	09 f4       	brne	.+2      	; 0xa6c <_ZN7Display6analogEhhhh+0x42>
     a6a:	26 c1       	rjmp	.+588    	; 0xcb8 <_ZN7Display6analogEhhhh+0x28e>
	{
		//Berechnen des Sekundenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(sekunde*6.0)*M_PI/180.0-M_PI/2.0;
     a6c:	62 2f       	mov	r22, r18
     a6e:	70 e0       	ldi	r23, 0x00	; 0
     a70:	80 e0       	ldi	r24, 0x00	; 0
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	0e 94 90 21 	call	0x4320	; 0x4320 <__floatsisf>
     a78:	20 e0       	ldi	r18, 0x00	; 0
     a7a:	30 e0       	ldi	r19, 0x00	; 0
     a7c:	40 ec       	ldi	r20, 0xC0	; 192
     a7e:	50 e4       	ldi	r21, 0x40	; 64
     a80:	0e 94 a9 22 	call	0x4552	; 0x4552 <__mulsf3>
     a84:	2b ed       	ldi	r18, 0xDB	; 219
     a86:	3f e0       	ldi	r19, 0x0F	; 15
     a88:	49 e4       	ldi	r20, 0x49	; 73
     a8a:	50 e4       	ldi	r21, 0x40	; 64
     a8c:	0e 94 a9 22 	call	0x4552	; 0x4552 <__mulsf3>
     a90:	20 e0       	ldi	r18, 0x00	; 0
     a92:	30 e0       	ldi	r19, 0x00	; 0
     a94:	44 e3       	ldi	r20, 0x34	; 52
     a96:	53 e4       	ldi	r21, 0x43	; 67
     a98:	0e 94 f5 20 	call	0x41ea	; 0x41ea <__divsf3>
     a9c:	2b ed       	ldi	r18, 0xDB	; 219
     a9e:	3f e0       	ldi	r19, 0x0F	; 15
     aa0:	49 ec       	ldi	r20, 0xC9	; 201
     aa2:	5f e3       	ldi	r21, 0x3F	; 63
     aa4:	0e 94 8d 20 	call	0x411a	; 0x411a <__subsf3>
     aa8:	6b 01       	movw	r12, r22
     aaa:	7c 01       	movw	r14, r24
			x=(uint8_t) i*cos(winkel)+Px;
     aac:	0e 94 f2 20 	call	0x41e4	; 0x41e4 <cos>
     ab0:	4b 01       	movw	r8, r22
     ab2:	5c 01       	movw	r10, r24
			y=(uint8_t) i*sin(winkel)+Py;
     ab4:	c7 01       	movw	r24, r14
     ab6:	b6 01       	movw	r22, r12
     ab8:	0e 94 58 23 	call	0x46b0	; 0x46b0 <sin>
     abc:	2b 01       	movw	r4, r22
     abe:	3c 01       	movw	r6, r24
     ac0:	00 e0       	ldi	r16, 0x00	; 0
     ac2:	10 e0       	ldi	r17, 0x00	; 0
	if (sekanzeige)
	{
		//Berechnen des Sekundenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(sekunde*6.0)*M_PI/180.0-M_PI/2.0;
			x=(uint8_t) i*cos(winkel)+Px;
     ac4:	b8 01       	movw	r22, r16
     ac6:	01 2e       	mov	r0, r17
     ac8:	00 0c       	add	r0, r0
     aca:	88 0b       	sbc	r24, r24
     acc:	99 0b       	sbc	r25, r25
     ace:	0e 94 90 21 	call	0x4320	; 0x4320 <__floatsisf>
     ad2:	6b 01       	movw	r12, r22
     ad4:	7c 01       	movw	r14, r24
			y=(uint8_t) i*sin(winkel)+Py;
     ad6:	a3 01       	movw	r20, r6
     ad8:	92 01       	movw	r18, r4
     ada:	0e 94 a9 22 	call	0x4552	; 0x4552 <__mulsf3>
     ade:	20 e0       	ldi	r18, 0x00	; 0
     ae0:	30 e0       	ldi	r19, 0x00	; 0
     ae2:	48 ef       	ldi	r20, 0xF8	; 248
     ae4:	51 e4       	ldi	r21, 0x41	; 65
     ae6:	0e 94 8e 20 	call	0x411c	; 0x411c <__addsf3>
     aea:	0e 94 62 21 	call	0x42c4	; 0x42c4 <__fixunssfsi>
     aee:	26 2e       	mov	r2, r22
	if (sekanzeige)
	{
		//Berechnen des Sekundenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(sekunde*6.0)*M_PI/180.0-M_PI/2.0;
			x=(uint8_t) i*cos(winkel)+Px;
     af0:	a5 01       	movw	r20, r10
     af2:	94 01       	movw	r18, r8
     af4:	c7 01       	movw	r24, r14
     af6:	b6 01       	movw	r22, r12
     af8:	0e 94 a9 22 	call	0x4552	; 0x4552 <__mulsf3>
     afc:	20 e0       	ldi	r18, 0x00	; 0
     afe:	30 e0       	ldi	r19, 0x00	; 0
     b00:	48 ef       	ldi	r20, 0xF8	; 248
     b02:	51 e4       	ldi	r21, 0x41	; 65
     b04:	0e 94 8e 20 	call	0x411c	; 0x411c <__addsf3>
     b08:	0e 94 62 21 	call	0x42c4	; 0x42c4 <__fixunssfsi>
			y=(uint8_t) i*sin(winkel)+Py;

			drawPixel(x,y,0);
     b0c:	20 e0       	ldi	r18, 0x00	; 0
     b0e:	42 2d       	mov	r20, r2
     b10:	8e 81       	ldd	r24, Y+6	; 0x06
     b12:	9f 81       	ldd	r25, Y+7	; 0x07
     b14:	5a de       	rcall	.-844    	; 0x7ca <_ZN7Display9drawPixelEhhh>
     b16:	0f 5f       	subi	r16, 0xFF	; 255
     b18:	1f 4f       	sbci	r17, 0xFF	; 255
	float winkel=0;
	
	if (sekanzeige)
	{
		//Berechnen des Sekundenzeigers
		for(uint8_t i=0;i<r;i++){
     b1a:	09 31       	cpi	r16, 0x19	; 25
     b1c:	11 05       	cpc	r17, r1
     b1e:	91 f6       	brne	.-92     	; 0xac4 <_ZN7Display6analogEhhhh+0x9a>
		}

		r=21;
		//Berechnen des Minutenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(minute*6.0)*M_PI/180.0-M_PI/2.0;
     b20:	63 2d       	mov	r22, r3
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	80 e0       	ldi	r24, 0x00	; 0
     b26:	90 e0       	ldi	r25, 0x00	; 0
     b28:	0e 94 90 21 	call	0x4320	; 0x4320 <__floatsisf>
     b2c:	69 83       	std	Y+1, r22	; 0x01
     b2e:	7a 83       	std	Y+2, r23	; 0x02
     b30:	8b 83       	std	Y+3, r24	; 0x03
     b32:	9c 83       	std	Y+4, r25	; 0x04
     b34:	20 e0       	ldi	r18, 0x00	; 0
     b36:	30 e0       	ldi	r19, 0x00	; 0
     b38:	40 ec       	ldi	r20, 0xC0	; 192
     b3a:	50 e4       	ldi	r21, 0x40	; 64
     b3c:	0e 94 a9 22 	call	0x4552	; 0x4552 <__mulsf3>
     b40:	2b ed       	ldi	r18, 0xDB	; 219
     b42:	3f e0       	ldi	r19, 0x0F	; 15
     b44:	49 e4       	ldi	r20, 0x49	; 73
     b46:	50 e4       	ldi	r21, 0x40	; 64
     b48:	0e 94 a9 22 	call	0x4552	; 0x4552 <__mulsf3>
     b4c:	20 e0       	ldi	r18, 0x00	; 0
     b4e:	30 e0       	ldi	r19, 0x00	; 0
     b50:	44 e3       	ldi	r20, 0x34	; 52
     b52:	53 e4       	ldi	r21, 0x43	; 67
     b54:	0e 94 f5 20 	call	0x41ea	; 0x41ea <__divsf3>
     b58:	2b ed       	ldi	r18, 0xDB	; 219
     b5a:	3f e0       	ldi	r19, 0x0F	; 15
     b5c:	49 ec       	ldi	r20, 0xC9	; 201
     b5e:	5f e3       	ldi	r21, 0x3F	; 63
     b60:	0e 94 8d 20 	call	0x411a	; 0x411a <__subsf3>
     b64:	6b 01       	movw	r12, r22
     b66:	7c 01       	movw	r14, r24
			x=(uint8_t) i*cos(winkel)+Px;
     b68:	0e 94 f2 20 	call	0x41e4	; 0x41e4 <cos>
     b6c:	2b 01       	movw	r4, r22
     b6e:	3c 01       	movw	r6, r24
			y=(uint8_t) i*sin(winkel)+Py;
     b70:	c7 01       	movw	r24, r14
     b72:	b6 01       	movw	r22, r12
     b74:	0e 94 58 23 	call	0x46b0	; 0x46b0 <sin>
     b78:	4b 01       	movw	r8, r22
     b7a:	5c 01       	movw	r10, r24
     b7c:	00 e0       	ldi	r16, 0x00	; 0
     b7e:	10 e0       	ldi	r17, 0x00	; 0

		r=21;
		//Berechnen des Minutenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(minute*6.0)*M_PI/180.0-M_PI/2.0;
			x=(uint8_t) i*cos(winkel)+Px;
     b80:	b8 01       	movw	r22, r16
     b82:	01 2e       	mov	r0, r17
     b84:	00 0c       	add	r0, r0
     b86:	88 0b       	sbc	r24, r24
     b88:	99 0b       	sbc	r25, r25
     b8a:	0e 94 90 21 	call	0x4320	; 0x4320 <__floatsisf>
     b8e:	6b 01       	movw	r12, r22
     b90:	7c 01       	movw	r14, r24
			y=(uint8_t) i*sin(winkel)+Py;
     b92:	a5 01       	movw	r20, r10
     b94:	94 01       	movw	r18, r8
     b96:	0e 94 a9 22 	call	0x4552	; 0x4552 <__mulsf3>
     b9a:	20 e0       	ldi	r18, 0x00	; 0
     b9c:	30 e0       	ldi	r19, 0x00	; 0
     b9e:	48 ef       	ldi	r20, 0xF8	; 248
     ba0:	51 e4       	ldi	r21, 0x41	; 65
     ba2:	0e 94 8e 20 	call	0x411c	; 0x411c <__addsf3>
     ba6:	0e 94 62 21 	call	0x42c4	; 0x42c4 <__fixunssfsi>
     baa:	36 2e       	mov	r3, r22

		r=21;
		//Berechnen des Minutenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(minute*6.0)*M_PI/180.0-M_PI/2.0;
			x=(uint8_t) i*cos(winkel)+Px;
     bac:	a3 01       	movw	r20, r6
     bae:	92 01       	movw	r18, r4
     bb0:	c7 01       	movw	r24, r14
     bb2:	b6 01       	movw	r22, r12
     bb4:	0e 94 a9 22 	call	0x4552	; 0x4552 <__mulsf3>
     bb8:	20 e0       	ldi	r18, 0x00	; 0
     bba:	30 e0       	ldi	r19, 0x00	; 0
     bbc:	48 ef       	ldi	r20, 0xF8	; 248
     bbe:	51 e4       	ldi	r21, 0x41	; 65
     bc0:	0e 94 8e 20 	call	0x411c	; 0x411c <__addsf3>
     bc4:	0e 94 62 21 	call	0x42c4	; 0x42c4 <__fixunssfsi>
			y=(uint8_t) i*sin(winkel)+Py;

			drawPixel(x,y,0);
     bc8:	20 e0       	ldi	r18, 0x00	; 0
     bca:	43 2d       	mov	r20, r3
     bcc:	8e 81       	ldd	r24, Y+6	; 0x06
     bce:	9f 81       	ldd	r25, Y+7	; 0x07
     bd0:	fc dd       	rcall	.-1032   	; 0x7ca <_ZN7Display9drawPixelEhhh>
     bd2:	0f 5f       	subi	r16, 0xFF	; 255
     bd4:	1f 4f       	sbci	r17, 0xFF	; 255
			drawPixel(x,y,0);
		}

		r=21;
		//Berechnen des Minutenzeigers
		for(uint8_t i=0;i<r;i++){
     bd6:	05 31       	cpi	r16, 0x15	; 21
     bd8:	11 05       	cpc	r17, r1
     bda:	91 f6       	brne	.-92     	; 0xb80 <_ZN7Display6analogEhhhh+0x156>
		}

		r=13;
		//Berechnen des Stundenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(stunde*30.0+minute/2.0)*M_PI/180.0-M_PI/2.0;
     bdc:	2d 81       	ldd	r18, Y+5	; 0x05
     bde:	62 2f       	mov	r22, r18
     be0:	70 e0       	ldi	r23, 0x00	; 0
     be2:	80 e0       	ldi	r24, 0x00	; 0
     be4:	90 e0       	ldi	r25, 0x00	; 0
     be6:	0e 94 90 21 	call	0x4320	; 0x4320 <__floatsisf>
     bea:	20 e0       	ldi	r18, 0x00	; 0
     bec:	30 e0       	ldi	r19, 0x00	; 0
     bee:	40 ef       	ldi	r20, 0xF0	; 240
     bf0:	51 e4       	ldi	r21, 0x41	; 65
     bf2:	0e 94 a9 22 	call	0x4552	; 0x4552 <__mulsf3>
     bf6:	6b 01       	movw	r12, r22
     bf8:	7c 01       	movw	r14, r24
     bfa:	20 e0       	ldi	r18, 0x00	; 0
     bfc:	30 e0       	ldi	r19, 0x00	; 0
     bfe:	40 e0       	ldi	r20, 0x00	; 0
     c00:	5f e3       	ldi	r21, 0x3F	; 63
     c02:	69 81       	ldd	r22, Y+1	; 0x01
     c04:	7a 81       	ldd	r23, Y+2	; 0x02
     c06:	8b 81       	ldd	r24, Y+3	; 0x03
     c08:	9c 81       	ldd	r25, Y+4	; 0x04
     c0a:	0e 94 a9 22 	call	0x4552	; 0x4552 <__mulsf3>
     c0e:	9b 01       	movw	r18, r22
     c10:	ac 01       	movw	r20, r24
     c12:	c7 01       	movw	r24, r14
     c14:	b6 01       	movw	r22, r12
     c16:	0e 94 8e 20 	call	0x411c	; 0x411c <__addsf3>
     c1a:	2b ed       	ldi	r18, 0xDB	; 219
     c1c:	3f e0       	ldi	r19, 0x0F	; 15
     c1e:	49 e4       	ldi	r20, 0x49	; 73
     c20:	50 e4       	ldi	r21, 0x40	; 64
     c22:	0e 94 a9 22 	call	0x4552	; 0x4552 <__mulsf3>
     c26:	20 e0       	ldi	r18, 0x00	; 0
     c28:	30 e0       	ldi	r19, 0x00	; 0
     c2a:	44 e3       	ldi	r20, 0x34	; 52
     c2c:	53 e4       	ldi	r21, 0x43	; 67
     c2e:	0e 94 f5 20 	call	0x41ea	; 0x41ea <__divsf3>
     c32:	2b ed       	ldi	r18, 0xDB	; 219
     c34:	3f e0       	ldi	r19, 0x0F	; 15
     c36:	49 ec       	ldi	r20, 0xC9	; 201
     c38:	5f e3       	ldi	r21, 0x3F	; 63
     c3a:	0e 94 8d 20 	call	0x411a	; 0x411a <__subsf3>
     c3e:	6b 01       	movw	r12, r22
     c40:	7c 01       	movw	r14, r24
			x= (uint8_t) i*cos(winkel) +Px;
     c42:	0e 94 f2 20 	call	0x41e4	; 0x41e4 <cos>
     c46:	4b 01       	movw	r8, r22
     c48:	5c 01       	movw	r10, r24
			y= (uint8_t) i*sin(winkel) +Py;
     c4a:	c7 01       	movw	r24, r14
     c4c:	b6 01       	movw	r22, r12
     c4e:	0e 94 58 23 	call	0x46b0	; 0x46b0 <sin>
     c52:	2b 01       	movw	r4, r22
     c54:	3c 01       	movw	r6, r24
     c56:	00 e0       	ldi	r16, 0x00	; 0
     c58:	10 e0       	ldi	r17, 0x00	; 0

		r=13;
		//Berechnen des Stundenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(stunde*30.0+minute/2.0)*M_PI/180.0-M_PI/2.0;
			x= (uint8_t) i*cos(winkel) +Px;
     c5a:	b8 01       	movw	r22, r16
     c5c:	01 2e       	mov	r0, r17
     c5e:	00 0c       	add	r0, r0
     c60:	88 0b       	sbc	r24, r24
     c62:	99 0b       	sbc	r25, r25
     c64:	0e 94 90 21 	call	0x4320	; 0x4320 <__floatsisf>
     c68:	6b 01       	movw	r12, r22
     c6a:	7c 01       	movw	r14, r24
			y= (uint8_t) i*sin(winkel) +Py;
     c6c:	a3 01       	movw	r20, r6
     c6e:	92 01       	movw	r18, r4
     c70:	0e 94 a9 22 	call	0x4552	; 0x4552 <__mulsf3>
     c74:	20 e0       	ldi	r18, 0x00	; 0
     c76:	30 e0       	ldi	r19, 0x00	; 0
     c78:	48 ef       	ldi	r20, 0xF8	; 248
     c7a:	51 e4       	ldi	r21, 0x41	; 65
     c7c:	0e 94 8e 20 	call	0x411c	; 0x411c <__addsf3>
     c80:	0e 94 62 21 	call	0x42c4	; 0x42c4 <__fixunssfsi>
     c84:	36 2e       	mov	r3, r22

		r=13;
		//Berechnen des Stundenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(stunde*30.0+minute/2.0)*M_PI/180.0-M_PI/2.0;
			x= (uint8_t) i*cos(winkel) +Px;
     c86:	a5 01       	movw	r20, r10
     c88:	94 01       	movw	r18, r8
     c8a:	c7 01       	movw	r24, r14
     c8c:	b6 01       	movw	r22, r12
     c8e:	0e 94 a9 22 	call	0x4552	; 0x4552 <__mulsf3>
     c92:	20 e0       	ldi	r18, 0x00	; 0
     c94:	30 e0       	ldi	r19, 0x00	; 0
     c96:	48 ef       	ldi	r20, 0xF8	; 248
     c98:	51 e4       	ldi	r21, 0x41	; 65
     c9a:	0e 94 8e 20 	call	0x411c	; 0x411c <__addsf3>
     c9e:	0e 94 62 21 	call	0x42c4	; 0x42c4 <__fixunssfsi>
			y= (uint8_t) i*sin(winkel) +Py;

			drawPixel(x,y,0);
     ca2:	20 e0       	ldi	r18, 0x00	; 0
     ca4:	43 2d       	mov	r20, r3
     ca6:	8e 81       	ldd	r24, Y+6	; 0x06
     ca8:	9f 81       	ldd	r25, Y+7	; 0x07
     caa:	8f dd       	rcall	.-1250   	; 0x7ca <_ZN7Display9drawPixelEhhh>
     cac:	0f 5f       	subi	r16, 0xFF	; 255
     cae:	1f 4f       	sbci	r17, 0xFF	; 255
			drawPixel(x,y,0);
		}

		r=13;
		//Berechnen des Stundenzeigers
		for(uint8_t i=0;i<r;i++){
     cb0:	0d 30       	cpi	r16, 0x0D	; 13
     cb2:	11 05       	cpc	r17, r1
     cb4:	91 f6       	brne	.-92     	; 0xc5a <_ZN7Display6analogEhhhh+0x230>
     cb6:	cb c0       	rjmp	.+406    	; 0xe4e <_ZN7Display6analogEhhhh+0x424>
	}
	else{
		r=25;
		//Berechnen des Minutenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(minute*6.0)*M_PI/180.0-M_PI/2.0;
     cb8:	64 2f       	mov	r22, r20
     cba:	70 e0       	ldi	r23, 0x00	; 0
     cbc:	80 e0       	ldi	r24, 0x00	; 0
     cbe:	90 e0       	ldi	r25, 0x00	; 0
     cc0:	0e 94 90 21 	call	0x4320	; 0x4320 <__floatsisf>
     cc4:	69 83       	std	Y+1, r22	; 0x01
     cc6:	7a 83       	std	Y+2, r23	; 0x02
     cc8:	8b 83       	std	Y+3, r24	; 0x03
     cca:	9c 83       	std	Y+4, r25	; 0x04
     ccc:	20 e0       	ldi	r18, 0x00	; 0
     cce:	30 e0       	ldi	r19, 0x00	; 0
     cd0:	40 ec       	ldi	r20, 0xC0	; 192
     cd2:	50 e4       	ldi	r21, 0x40	; 64
     cd4:	0e 94 a9 22 	call	0x4552	; 0x4552 <__mulsf3>
     cd8:	2b ed       	ldi	r18, 0xDB	; 219
     cda:	3f e0       	ldi	r19, 0x0F	; 15
     cdc:	49 e4       	ldi	r20, 0x49	; 73
     cde:	50 e4       	ldi	r21, 0x40	; 64
     ce0:	0e 94 a9 22 	call	0x4552	; 0x4552 <__mulsf3>
     ce4:	20 e0       	ldi	r18, 0x00	; 0
     ce6:	30 e0       	ldi	r19, 0x00	; 0
     ce8:	44 e3       	ldi	r20, 0x34	; 52
     cea:	53 e4       	ldi	r21, 0x43	; 67
     cec:	0e 94 f5 20 	call	0x41ea	; 0x41ea <__divsf3>
     cf0:	2b ed       	ldi	r18, 0xDB	; 219
     cf2:	3f e0       	ldi	r19, 0x0F	; 15
     cf4:	49 ec       	ldi	r20, 0xC9	; 201
     cf6:	5f e3       	ldi	r21, 0x3F	; 63
     cf8:	0e 94 8d 20 	call	0x411a	; 0x411a <__subsf3>
     cfc:	6b 01       	movw	r12, r22
     cfe:	7c 01       	movw	r14, r24
			x=(uint8_t) i*cos(winkel)+Px;
     d00:	0e 94 f2 20 	call	0x41e4	; 0x41e4 <cos>
     d04:	2b 01       	movw	r4, r22
     d06:	3c 01       	movw	r6, r24
			y=(uint8_t) i*sin(winkel)+Py;
     d08:	c7 01       	movw	r24, r14
     d0a:	b6 01       	movw	r22, r12
     d0c:	0e 94 58 23 	call	0x46b0	; 0x46b0 <sin>
     d10:	4b 01       	movw	r8, r22
     d12:	5c 01       	movw	r10, r24
     d14:	00 e0       	ldi	r16, 0x00	; 0
     d16:	10 e0       	ldi	r17, 0x00	; 0
	else{
		r=25;
		//Berechnen des Minutenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(minute*6.0)*M_PI/180.0-M_PI/2.0;
			x=(uint8_t) i*cos(winkel)+Px;
     d18:	b8 01       	movw	r22, r16
     d1a:	01 2e       	mov	r0, r17
     d1c:	00 0c       	add	r0, r0
     d1e:	88 0b       	sbc	r24, r24
     d20:	99 0b       	sbc	r25, r25
     d22:	0e 94 90 21 	call	0x4320	; 0x4320 <__floatsisf>
     d26:	6b 01       	movw	r12, r22
     d28:	7c 01       	movw	r14, r24
			y=(uint8_t) i*sin(winkel)+Py;
     d2a:	a5 01       	movw	r20, r10
     d2c:	94 01       	movw	r18, r8
     d2e:	0e 94 a9 22 	call	0x4552	; 0x4552 <__mulsf3>
     d32:	20 e0       	ldi	r18, 0x00	; 0
     d34:	30 e0       	ldi	r19, 0x00	; 0
     d36:	48 ef       	ldi	r20, 0xF8	; 248
     d38:	51 e4       	ldi	r21, 0x41	; 65
     d3a:	0e 94 8e 20 	call	0x411c	; 0x411c <__addsf3>
     d3e:	0e 94 62 21 	call	0x42c4	; 0x42c4 <__fixunssfsi>
     d42:	36 2e       	mov	r3, r22
	else{
		r=25;
		//Berechnen des Minutenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(minute*6.0)*M_PI/180.0-M_PI/2.0;
			x=(uint8_t) i*cos(winkel)+Px;
     d44:	a3 01       	movw	r20, r6
     d46:	92 01       	movw	r18, r4
     d48:	c7 01       	movw	r24, r14
     d4a:	b6 01       	movw	r22, r12
     d4c:	0e 94 a9 22 	call	0x4552	; 0x4552 <__mulsf3>
     d50:	20 e0       	ldi	r18, 0x00	; 0
     d52:	30 e0       	ldi	r19, 0x00	; 0
     d54:	48 ef       	ldi	r20, 0xF8	; 248
     d56:	51 e4       	ldi	r21, 0x41	; 65
     d58:	0e 94 8e 20 	call	0x411c	; 0x411c <__addsf3>
     d5c:	0e 94 62 21 	call	0x42c4	; 0x42c4 <__fixunssfsi>
			y=(uint8_t) i*sin(winkel)+Py;

			drawPixel(x,y,0);
     d60:	20 e0       	ldi	r18, 0x00	; 0
     d62:	43 2d       	mov	r20, r3
     d64:	8e 81       	ldd	r24, Y+6	; 0x06
     d66:	9f 81       	ldd	r25, Y+7	; 0x07
     d68:	30 dd       	rcall	.-1440   	; 0x7ca <_ZN7Display9drawPixelEhhh>
     d6a:	0f 5f       	subi	r16, 0xFF	; 255
     d6c:	1f 4f       	sbci	r17, 0xFF	; 255
		}
	}
	else{
		r=25;
		//Berechnen des Minutenzeigers
		for(uint8_t i=0;i<r;i++){
     d6e:	09 31       	cpi	r16, 0x19	; 25
     d70:	11 05       	cpc	r17, r1
     d72:	91 f6       	brne	.-92     	; 0xd18 <_ZN7Display6analogEhhhh+0x2ee>
		}

		r=17;
		//Berechnen des Stundenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(stunde*30.0+minute/2.0)*M_PI/180.0-M_PI/2.0;
     d74:	ed 81       	ldd	r30, Y+5	; 0x05
     d76:	6e 2f       	mov	r22, r30
     d78:	70 e0       	ldi	r23, 0x00	; 0
     d7a:	80 e0       	ldi	r24, 0x00	; 0
     d7c:	90 e0       	ldi	r25, 0x00	; 0
     d7e:	0e 94 90 21 	call	0x4320	; 0x4320 <__floatsisf>
     d82:	20 e0       	ldi	r18, 0x00	; 0
     d84:	30 e0       	ldi	r19, 0x00	; 0
     d86:	40 ef       	ldi	r20, 0xF0	; 240
     d88:	51 e4       	ldi	r21, 0x41	; 65
     d8a:	0e 94 a9 22 	call	0x4552	; 0x4552 <__mulsf3>
     d8e:	6b 01       	movw	r12, r22
     d90:	7c 01       	movw	r14, r24
     d92:	20 e0       	ldi	r18, 0x00	; 0
     d94:	30 e0       	ldi	r19, 0x00	; 0
     d96:	40 e0       	ldi	r20, 0x00	; 0
     d98:	5f e3       	ldi	r21, 0x3F	; 63
     d9a:	69 81       	ldd	r22, Y+1	; 0x01
     d9c:	7a 81       	ldd	r23, Y+2	; 0x02
     d9e:	8b 81       	ldd	r24, Y+3	; 0x03
     da0:	9c 81       	ldd	r25, Y+4	; 0x04
     da2:	0e 94 a9 22 	call	0x4552	; 0x4552 <__mulsf3>
     da6:	9b 01       	movw	r18, r22
     da8:	ac 01       	movw	r20, r24
     daa:	c7 01       	movw	r24, r14
     dac:	b6 01       	movw	r22, r12
     dae:	0e 94 8e 20 	call	0x411c	; 0x411c <__addsf3>
     db2:	2b ed       	ldi	r18, 0xDB	; 219
     db4:	3f e0       	ldi	r19, 0x0F	; 15
     db6:	49 e4       	ldi	r20, 0x49	; 73
     db8:	50 e4       	ldi	r21, 0x40	; 64
     dba:	0e 94 a9 22 	call	0x4552	; 0x4552 <__mulsf3>
     dbe:	20 e0       	ldi	r18, 0x00	; 0
     dc0:	30 e0       	ldi	r19, 0x00	; 0
     dc2:	44 e3       	ldi	r20, 0x34	; 52
     dc4:	53 e4       	ldi	r21, 0x43	; 67
     dc6:	0e 94 f5 20 	call	0x41ea	; 0x41ea <__divsf3>
     dca:	2b ed       	ldi	r18, 0xDB	; 219
     dcc:	3f e0       	ldi	r19, 0x0F	; 15
     dce:	49 ec       	ldi	r20, 0xC9	; 201
     dd0:	5f e3       	ldi	r21, 0x3F	; 63
     dd2:	0e 94 8d 20 	call	0x411a	; 0x411a <__subsf3>
     dd6:	6b 01       	movw	r12, r22
     dd8:	7c 01       	movw	r14, r24
			x= (uint8_t) i*cos(winkel) +Px;
     dda:	0e 94 f2 20 	call	0x41e4	; 0x41e4 <cos>
     dde:	4b 01       	movw	r8, r22
     de0:	5c 01       	movw	r10, r24
			y= (uint8_t) i*sin(winkel) +Py;
     de2:	c7 01       	movw	r24, r14
     de4:	b6 01       	movw	r22, r12
     de6:	0e 94 58 23 	call	0x46b0	; 0x46b0 <sin>
     dea:	2b 01       	movw	r4, r22
     dec:	3c 01       	movw	r6, r24
     dee:	00 e0       	ldi	r16, 0x00	; 0
     df0:	10 e0       	ldi	r17, 0x00	; 0

		r=17;
		//Berechnen des Stundenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(stunde*30.0+minute/2.0)*M_PI/180.0-M_PI/2.0;
			x= (uint8_t) i*cos(winkel) +Px;
     df2:	b8 01       	movw	r22, r16
     df4:	01 2e       	mov	r0, r17
     df6:	00 0c       	add	r0, r0
     df8:	88 0b       	sbc	r24, r24
     dfa:	99 0b       	sbc	r25, r25
     dfc:	0e 94 90 21 	call	0x4320	; 0x4320 <__floatsisf>
     e00:	6b 01       	movw	r12, r22
     e02:	7c 01       	movw	r14, r24
			y= (uint8_t) i*sin(winkel) +Py;
     e04:	a3 01       	movw	r20, r6
     e06:	92 01       	movw	r18, r4
     e08:	0e 94 a9 22 	call	0x4552	; 0x4552 <__mulsf3>
     e0c:	20 e0       	ldi	r18, 0x00	; 0
     e0e:	30 e0       	ldi	r19, 0x00	; 0
     e10:	48 ef       	ldi	r20, 0xF8	; 248
     e12:	51 e4       	ldi	r21, 0x41	; 65
     e14:	0e 94 8e 20 	call	0x411c	; 0x411c <__addsf3>
     e18:	0e 94 62 21 	call	0x42c4	; 0x42c4 <__fixunssfsi>
     e1c:	36 2e       	mov	r3, r22

		r=17;
		//Berechnen des Stundenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(stunde*30.0+minute/2.0)*M_PI/180.0-M_PI/2.0;
			x= (uint8_t) i*cos(winkel) +Px;
     e1e:	a5 01       	movw	r20, r10
     e20:	94 01       	movw	r18, r8
     e22:	c7 01       	movw	r24, r14
     e24:	b6 01       	movw	r22, r12
     e26:	0e 94 a9 22 	call	0x4552	; 0x4552 <__mulsf3>
     e2a:	20 e0       	ldi	r18, 0x00	; 0
     e2c:	30 e0       	ldi	r19, 0x00	; 0
     e2e:	48 ef       	ldi	r20, 0xF8	; 248
     e30:	51 e4       	ldi	r21, 0x41	; 65
     e32:	0e 94 8e 20 	call	0x411c	; 0x411c <__addsf3>
     e36:	0e 94 62 21 	call	0x42c4	; 0x42c4 <__fixunssfsi>
			y= (uint8_t) i*sin(winkel) +Py;

			drawPixel(x,y,0);
     e3a:	20 e0       	ldi	r18, 0x00	; 0
     e3c:	43 2d       	mov	r20, r3
     e3e:	8e 81       	ldd	r24, Y+6	; 0x06
     e40:	9f 81       	ldd	r25, Y+7	; 0x07
     e42:	c3 dc       	rcall	.-1658   	; 0x7ca <_ZN7Display9drawPixelEhhh>
     e44:	0f 5f       	subi	r16, 0xFF	; 255
     e46:	1f 4f       	sbci	r17, 0xFF	; 255
			drawPixel(x,y,0);
		}

		r=17;
		//Berechnen des Stundenzeigers
		for(uint8_t i=0;i<r;i++){
     e48:	01 31       	cpi	r16, 0x11	; 17
     e4a:	11 05       	cpc	r17, r1
     e4c:	91 f6       	brne	.-92     	; 0xdf2 <_ZN7Display6analogEhhhh+0x3c8>
		}
	}
	

	//Anzeige der Zahlen
	draw_ASCI('1',32-charsize,0);
     e4e:	20 e0       	ldi	r18, 0x00	; 0
     e50:	4a e1       	ldi	r20, 0x1A	; 26
     e52:	61 e3       	ldi	r22, 0x31	; 49
     e54:	8e 81       	ldd	r24, Y+6	; 0x06
     e56:	9f 81       	ldd	r25, Y+7	; 0x07
     e58:	24 dd       	rcall	.-1464   	; 0x8a2 <_ZN7Display9draw_ASCIEhhh>
	draw_ASCI('2',32,0);
     e5a:	20 e0       	ldi	r18, 0x00	; 0
     e5c:	40 e2       	ldi	r20, 0x20	; 32
     e5e:	62 e3       	ldi	r22, 0x32	; 50
     e60:	8e 81       	ldd	r24, Y+6	; 0x06
     e62:	9f 81       	ldd	r25, Y+7	; 0x07
     e64:	1e dd       	rcall	.-1476   	; 0x8a2 <_ZN7Display9draw_ASCIEhhh>
	draw_ASCI('3',64-charsize,4*charhighte-charhighte/2);
     e66:	2c e1       	ldi	r18, 0x1C	; 28
     e68:	4a e3       	ldi	r20, 0x3A	; 58
     e6a:	63 e3       	ldi	r22, 0x33	; 51
     e6c:	8e 81       	ldd	r24, Y+6	; 0x06
     e6e:	9f 81       	ldd	r25, Y+7	; 0x07
     e70:	18 dd       	rcall	.-1488   	; 0x8a2 <_ZN7Display9draw_ASCIEhhh>
	draw_ASCI('6',32-charsize/2,7*charhighte);
     e72:	28 e3       	ldi	r18, 0x38	; 56
     e74:	4d e1       	ldi	r20, 0x1D	; 29
     e76:	66 e3       	ldi	r22, 0x36	; 54
     e78:	8e 81       	ldd	r24, Y+6	; 0x06
     e7a:	9f 81       	ldd	r25, Y+7	; 0x07
     e7c:	12 dd       	rcall	.-1500   	; 0x8a2 <_ZN7Display9draw_ASCIEhhh>
	draw_ASCI('9',0,4*charhighte-charhighte/2);
     e7e:	2c e1       	ldi	r18, 0x1C	; 28
     e80:	40 e0       	ldi	r20, 0x00	; 0
     e82:	69 e3       	ldi	r22, 0x39	; 57
     e84:	8e 81       	ldd	r24, Y+6	; 0x06
     e86:	9f 81       	ldd	r25, Y+7	; 0x07
     e88:	0c dd       	rcall	.-1512   	; 0x8a2 <_ZN7Display9draw_ASCIEhhh>

	//anzeige des Rings fuer die Restlichen Stunden Zahlen
	//1
	drawPixel(26*cos((30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
     e8a:	20 e0       	ldi	r18, 0x00	; 0
     e8c:	48 e0       	ldi	r20, 0x08	; 8
     e8e:	6c e2       	ldi	r22, 0x2C	; 44
     e90:	8e 81       	ldd	r24, Y+6	; 0x06
     e92:	9f 81       	ldd	r25, Y+7	; 0x07
     e94:	9a dc       	rcall	.-1740   	; 0x7ca <_ZN7Display9drawPixelEhhh>
	//2
	drawPixel(26*cos((2*30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((2*30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
     e96:	20 e0       	ldi	r18, 0x00	; 0
     e98:	42 e1       	ldi	r20, 0x12	; 18
     e9a:	65 e3       	ldi	r22, 0x35	; 53
     e9c:	8e 81       	ldd	r24, Y+6	; 0x06
     e9e:	9f 81       	ldd	r25, Y+7	; 0x07
     ea0:	94 dc       	rcall	.-1752   	; 0x7ca <_ZN7Display9drawPixelEhhh>
	//4
	drawPixel(26*cos((4*30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((4*30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
     ea2:	20 e0       	ldi	r18, 0x00	; 0
     ea4:	4c e2       	ldi	r20, 0x2C	; 44
     ea6:	65 e3       	ldi	r22, 0x35	; 53
     ea8:	8e 81       	ldd	r24, Y+6	; 0x06
     eaa:	9f 81       	ldd	r25, Y+7	; 0x07
     eac:	8e dc       	rcall	.-1764   	; 0x7ca <_ZN7Display9drawPixelEhhh>
	//5
	drawPixel(26*cos((5*30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((5*30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
     eae:	20 e0       	ldi	r18, 0x00	; 0
     eb0:	45 e3       	ldi	r20, 0x35	; 53
     eb2:	6b e2       	ldi	r22, 0x2B	; 43
     eb4:	8e 81       	ldd	r24, Y+6	; 0x06
     eb6:	9f 81       	ldd	r25, Y+7	; 0x07
     eb8:	88 dc       	rcall	.-1776   	; 0x7ca <_ZN7Display9drawPixelEhhh>
	//7
	drawPixel(26*cos((7*30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((7*30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
     eba:	20 e0       	ldi	r18, 0x00	; 0
     ebc:	45 e3       	ldi	r20, 0x35	; 53
     ebe:	61 e1       	ldi	r22, 0x11	; 17
     ec0:	8e 81       	ldd	r24, Y+6	; 0x06
     ec2:	9f 81       	ldd	r25, Y+7	; 0x07
     ec4:	82 dc       	rcall	.-1788   	; 0x7ca <_ZN7Display9drawPixelEhhh>
	//8
	drawPixel(26*cos((8*30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((8*30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
     ec6:	20 e0       	ldi	r18, 0x00	; 0
     ec8:	4c e2       	ldi	r20, 0x2C	; 44
     eca:	68 e0       	ldi	r22, 0x08	; 8
     ecc:	8e 81       	ldd	r24, Y+6	; 0x06
     ece:	9f 81       	ldd	r25, Y+7	; 0x07
     ed0:	7c dc       	rcall	.-1800   	; 0x7ca <_ZN7Display9drawPixelEhhh>
	//10
	drawPixel(26*cos((10*30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((10*30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
     ed2:	20 e0       	ldi	r18, 0x00	; 0
     ed4:	41 e1       	ldi	r20, 0x11	; 17
     ed6:	68 e0       	ldi	r22, 0x08	; 8
     ed8:	8e 81       	ldd	r24, Y+6	; 0x06
     eda:	9f 81       	ldd	r25, Y+7	; 0x07
     edc:	76 dc       	rcall	.-1812   	; 0x7ca <_ZN7Display9drawPixelEhhh>
	//11
	drawPixel(26*cos((11*30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((11*30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
     ede:	20 e0       	ldi	r18, 0x00	; 0
     ee0:	48 e0       	ldi	r20, 0x08	; 8
     ee2:	62 e1       	ldi	r22, 0x12	; 18
     ee4:	8e 81       	ldd	r24, Y+6	; 0x06
     ee6:	9f 81       	ldd	r25, Y+7	; 0x07
     ee8:	70 dc       	rcall	.-1824   	; 0x7ca <_ZN7Display9drawPixelEhhh>
}
     eea:	27 96       	adiw	r28, 0x07	; 7
     eec:	0f b6       	in	r0, 0x3f	; 63
     eee:	f8 94       	cli
     ef0:	de bf       	out	0x3e, r29	; 62
     ef2:	0f be       	out	0x3f, r0	; 63
     ef4:	cd bf       	out	0x3d, r28	; 61
     ef6:	df 91       	pop	r29
     ef8:	cf 91       	pop	r28
     efa:	1f 91       	pop	r17
     efc:	0f 91       	pop	r16
     efe:	ff 90       	pop	r15
     f00:	ef 90       	pop	r14
     f02:	df 90       	pop	r13
     f04:	cf 90       	pop	r12
     f06:	bf 90       	pop	r11
     f08:	af 90       	pop	r10
     f0a:	9f 90       	pop	r9
     f0c:	8f 90       	pop	r8
     f0e:	7f 90       	pop	r7
     f10:	6f 90       	pop	r6
     f12:	5f 90       	pop	r5
     f14:	4f 90       	pop	r4
     f16:	3f 90       	pop	r3
     f18:	2f 90       	pop	r2
     f1a:	08 95       	ret

00000f1c <_ZN3I2CC1Ev>:
void I2C::twi_ack(){
	TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);
}
void I2C::twi_nack(){
	TWCR = (1<<TWINT) | (1<<TWEN);
	TWCR &= ~(1<<TWEA);
     f1c:	82 e0       	ldi	r24, 0x02	; 2
     f1e:	80 93 b8 00 	sts	0x00B8, r24
     f22:	08 95       	ret

00000f24 <_ZN3I2CD1Ev>:
     f24:	08 95       	ret

00000f26 <_ZN3I2C9twi_startEv>:
     f26:	84 ea       	ldi	r24, 0xA4	; 164
     f28:	80 93 bc 00 	sts	0x00BC, r24
     f2c:	08 95       	ret

00000f2e <_ZN3I2C8twi_stopEv>:
     f2e:	84 e9       	ldi	r24, 0x94	; 148
     f30:	80 93 bc 00 	sts	0x00BC, r24
     f34:	08 95       	ret

00000f36 <_ZN3I2C9twi_writeEh>:
}

void I2C::twi_write(uint8_t data){
	while(!(TWCR & (1<<TWINT)));
     f36:	ec eb       	ldi	r30, 0xBC	; 188
     f38:	f0 e0       	ldi	r31, 0x00	; 0
     f3a:	80 81       	ld	r24, Z
     f3c:	88 23       	and	r24, r24
     f3e:	ec f7       	brge	.-6      	; 0xf3a <_ZN3I2C9twi_writeEh+0x4>
	TWDR = data;
     f40:	60 93 bb 00 	sts	0x00BB, r22
	TWCR = (1<<TWINT) | (1<<TWEN);
     f44:	84 e8       	ldi	r24, 0x84	; 132
     f46:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));
     f4a:	ec eb       	ldi	r30, 0xBC	; 188
     f4c:	f0 e0       	ldi	r31, 0x00	; 0
     f4e:	80 81       	ld	r24, Z
     f50:	88 23       	and	r24, r24
     f52:	ec f7       	brge	.-6      	; 0xf4e <_ZN3I2C9twi_writeEh+0x18>
}
     f54:	08 95       	ret

00000f56 <_ZN9InterfaceC1Ev>:
		default:
		abfrage = 0;
		break;
	}
	return abfrage;
}
     f56:	2a b1       	in	r18, 0x0a	; 10
     f58:	20 66       	ori	r18, 0x60	; 96
     f5a:	2a b9       	out	0x0a, r18	; 10
     f5c:	28 b1       	in	r18, 0x08	; 8
     f5e:	23 7f       	andi	r18, 0xF3	; 243
     f60:	28 b9       	out	0x08, r18	; 8
     f62:	27 b1       	in	r18, 0x07	; 7
     f64:	2c 60       	ori	r18, 0x0C	; 12
     f66:	27 b9       	out	0x07, r18	; 7
     f68:	2a b1       	in	r18, 0x0a	; 10
     f6a:	23 7e       	andi	r18, 0xE3	; 227
     f6c:	2a b9       	out	0x0a, r18	; 10
     f6e:	fc 01       	movw	r30, r24
     f70:	0c 96       	adiw	r24, 0x0c	; 12
     f72:	11 92       	st	Z+, r1
     f74:	e8 17       	cp	r30, r24
     f76:	f9 07       	cpc	r31, r25
     f78:	e1 f7       	brne	.-8      	; 0xf72 <_ZN9InterfaceC1Ev+0x1c>
     f7a:	08 95       	ret

00000f7c <_ZN9InterfaceD1Ev>:
     f7c:	08 95       	ret

00000f7e <_ZN9Interface7paradebEPVhhPh>:
     f7e:	fb 01       	movw	r30, r22
     f80:	80 81       	ld	r24, Z
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	04 2e       	mov	r0, r20
     f86:	02 c0       	rjmp	.+4      	; 0xf8c <_ZN9Interface7paradebEPVhhPh+0xe>
     f88:	95 95       	asr	r25
     f8a:	87 95       	ror	r24
     f8c:	0a 94       	dec	r0
     f8e:	e2 f7       	brpl	.-8      	; 0xf88 <_ZN9Interface7paradebEPVhhPh+0xa>
     f90:	80 ff       	sbrs	r24, 0
     f92:	05 c0       	rjmp	.+10     	; 0xf9e <_ZN9Interface7paradebEPVhhPh+0x20>
     f94:	81 e0       	ldi	r24, 0x01	; 1
     f96:	f9 01       	movw	r30, r18
     f98:	80 83       	st	Z, r24
     f9a:	80 e0       	ldi	r24, 0x00	; 0
     f9c:	08 95       	ret
     f9e:	f9 01       	movw	r30, r18
     fa0:	80 81       	ld	r24, Z
     fa2:	81 30       	cpi	r24, 0x01	; 1
     fa4:	71 f4       	brne	.+28     	; 0xfc2 <_ZN9Interface7paradebEPVhhPh+0x44>
     fa6:	fb 01       	movw	r30, r22
     fa8:	60 81       	ld	r22, Z
     faa:	70 e0       	ldi	r23, 0x00	; 0
     fac:	fb 01       	movw	r30, r22
     fae:	02 c0       	rjmp	.+4      	; 0xfb4 <_ZN9Interface7paradebEPVhhPh+0x36>
     fb0:	f5 95       	asr	r31
     fb2:	e7 95       	ror	r30
     fb4:	4a 95       	dec	r20
     fb6:	e2 f7       	brpl	.-8      	; 0xfb0 <_ZN9Interface7paradebEPVhhPh+0x32>
     fb8:	e0 fd       	sbrc	r30, 0
     fba:	03 c0       	rjmp	.+6      	; 0xfc2 <_ZN9Interface7paradebEPVhhPh+0x44>
     fbc:	f9 01       	movw	r30, r18
     fbe:	10 82       	st	Z, r1
     fc0:	08 95       	ret
     fc2:	f9 01       	movw	r30, r18
     fc4:	10 82       	st	Z, r1
     fc6:	80 e0       	ldi	r24, 0x00	; 0
     fc8:	08 95       	ret

00000fca <_ZN9Interface6TasterEv>:

uint8_t Interface::Taster(){
     fca:	1f 93       	push	r17
     fcc:	cf 93       	push	r28
     fce:	df 93       	push	r29
     fd0:	ec 01       	movw	r28, r24
	uint8_t taste = ' ';
	
	//erste Zeile
	PORTC |= (1<<PORTC3);
     fd2:	43 9a       	sbi	0x08, 3	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     fd4:	82 e0       	ldi	r24, 0x02	; 2
     fd6:	8a 95       	dec	r24
     fd8:	f1 f7       	brne	.-4      	; 0xfd6 <_ZN9Interface6TasterEv+0xc>
     fda:	00 c0       	rjmp	.+0      	; 0xfdc <_ZN9Interface6TasterEv+0x12>
	_delay_us(1);
	if(paradeb(&PIND,PIND4,&stat[2])){//debounce(&PIND,PIND4)){
     fdc:	9e 01       	movw	r18, r28
     fde:	2e 5f       	subi	r18, 0xFE	; 254
     fe0:	3f 4f       	sbci	r19, 0xFF	; 255
     fe2:	44 e0       	ldi	r20, 0x04	; 4
     fe4:	69 e2       	ldi	r22, 0x29	; 41
     fe6:	70 e0       	ldi	r23, 0x00	; 0
     fe8:	ce 01       	movw	r24, r28
     fea:	c9 df       	rcall	.-110    	; 0xf7e <_ZN9Interface7paradebEPVhhPh>
     fec:	81 11       	cpse	r24, r1
     fee:	14 c0       	rjmp	.+40     	; 0x1018 <_ZN9Interface6TasterEv+0x4e>
		taste = '3';
	}
	else if (paradeb(&PIND,PIND3,&stat[1]))//debounce(&PIND,PIND3))
     ff0:	9e 01       	movw	r18, r28
     ff2:	2f 5f       	subi	r18, 0xFF	; 255
     ff4:	3f 4f       	sbci	r19, 0xFF	; 255
     ff6:	43 e0       	ldi	r20, 0x03	; 3
     ff8:	69 e2       	ldi	r22, 0x29	; 41
     ffa:	70 e0       	ldi	r23, 0x00	; 0
     ffc:	ce 01       	movw	r24, r28
     ffe:	bf df       	rcall	.-130    	; 0xf7e <_ZN9Interface7paradebEPVhhPh>
    1000:	81 11       	cpse	r24, r1
    1002:	0c c0       	rjmp	.+24     	; 0x101c <_ZN9Interface6TasterEv+0x52>
	{
		taste = '2';
	}
	else if (paradeb(&PIND,PIND2,&stat[0]))//debounce(&PIND,PIND2))
    1004:	9e 01       	movw	r18, r28
    1006:	42 e0       	ldi	r20, 0x02	; 2
    1008:	69 e2       	ldi	r22, 0x29	; 41
    100a:	70 e0       	ldi	r23, 0x00	; 0
    100c:	ce 01       	movw	r24, r28
    100e:	b7 df       	rcall	.-146    	; 0xf7e <_ZN9Interface7paradebEPVhhPh>
    1010:	88 23       	and	r24, r24
    1012:	31 f0       	breq	.+12     	; 0x1020 <_ZN9Interface6TasterEv+0x56>
	{
		taste = '1';
    1014:	11 e3       	ldi	r17, 0x31	; 49
    1016:	05 c0       	rjmp	.+10     	; 0x1022 <_ZN9Interface6TasterEv+0x58>
	
	//erste Zeile
	PORTC |= (1<<PORTC3);
	_delay_us(1);
	if(paradeb(&PIND,PIND4,&stat[2])){//debounce(&PIND,PIND4)){
		taste = '3';
    1018:	13 e3       	ldi	r17, 0x33	; 51
    101a:	03 c0       	rjmp	.+6      	; 0x1022 <_ZN9Interface6TasterEv+0x58>
	}
	else if (paradeb(&PIND,PIND3,&stat[1]))//debounce(&PIND,PIND3))
	{
		taste = '2';
    101c:	12 e3       	ldi	r17, 0x32	; 50
    101e:	01 c0       	rjmp	.+2      	; 0x1022 <_ZN9Interface6TasterEv+0x58>
	}
	return abfrage;
}

uint8_t Interface::Taster(){
	uint8_t taste = ' ';
    1020:	10 e2       	ldi	r17, 0x20	; 32
	}
	else if (paradeb(&PIND,PIND2,&stat[0]))//debounce(&PIND,PIND2))
	{
		taste = '1';
	}
	PORTC &= ~(1<<PORTC3);
    1022:	43 98       	cbi	0x08, 3	; 8
	
	//zweite Zeile
	PORTC |= (1<<PORTC2);
    1024:	42 9a       	sbi	0x08, 2	; 8
    1026:	82 e0       	ldi	r24, 0x02	; 2
    1028:	8a 95       	dec	r24
    102a:	f1 f7       	brne	.-4      	; 0x1028 <_ZN9Interface6TasterEv+0x5e>
    102c:	00 c0       	rjmp	.+0      	; 0x102e <_ZN9Interface6TasterEv+0x64>
	_delay_us(1);
	if(paradeb(&PIND,PIND4,&stat[5])){//debounce(&PIND,PIND4)){
    102e:	9e 01       	movw	r18, r28
    1030:	2b 5f       	subi	r18, 0xFB	; 251
    1032:	3f 4f       	sbci	r19, 0xFF	; 255
    1034:	44 e0       	ldi	r20, 0x04	; 4
    1036:	69 e2       	ldi	r22, 0x29	; 41
    1038:	70 e0       	ldi	r23, 0x00	; 0
    103a:	ce 01       	movw	r24, r28
    103c:	a0 df       	rcall	.-192    	; 0xf7e <_ZN9Interface7paradebEPVhhPh>
    103e:	81 11       	cpse	r24, r1
    1040:	16 c0       	rjmp	.+44     	; 0x106e <_ZN9Interface6TasterEv+0xa4>
		taste = '6';
	}
	else if (paradeb(&PIND,PIND3,&stat[4]))//debounce(&PIND,PIND3))
    1042:	9e 01       	movw	r18, r28
    1044:	2c 5f       	subi	r18, 0xFC	; 252
    1046:	3f 4f       	sbci	r19, 0xFF	; 255
    1048:	43 e0       	ldi	r20, 0x03	; 3
    104a:	69 e2       	ldi	r22, 0x29	; 41
    104c:	70 e0       	ldi	r23, 0x00	; 0
    104e:	ce 01       	movw	r24, r28
    1050:	96 df       	rcall	.-212    	; 0xf7e <_ZN9Interface7paradebEPVhhPh>
    1052:	81 11       	cpse	r24, r1
    1054:	0e c0       	rjmp	.+28     	; 0x1072 <_ZN9Interface6TasterEv+0xa8>
	{
		taste = '5';
	}
	else if (paradeb(&PIND,PIND2,&stat[3]))//debounce(&PIND,PIND2))
    1056:	9e 01       	movw	r18, r28
    1058:	2d 5f       	subi	r18, 0xFD	; 253
    105a:	3f 4f       	sbci	r19, 0xFF	; 255
    105c:	42 e0       	ldi	r20, 0x02	; 2
    105e:	69 e2       	ldi	r22, 0x29	; 41
    1060:	70 e0       	ldi	r23, 0x00	; 0
    1062:	ce 01       	movw	r24, r28
    1064:	8c df       	rcall	.-232    	; 0xf7e <_ZN9Interface7paradebEPVhhPh>
    1066:	88 23       	and	r24, r24
    1068:	29 f0       	breq	.+10     	; 0x1074 <_ZN9Interface6TasterEv+0xaa>
	{
		taste = '4';
    106a:	14 e3       	ldi	r17, 0x34	; 52
    106c:	03 c0       	rjmp	.+6      	; 0x1074 <_ZN9Interface6TasterEv+0xaa>
	
	//zweite Zeile
	PORTC |= (1<<PORTC2);
	_delay_us(1);
	if(paradeb(&PIND,PIND4,&stat[5])){//debounce(&PIND,PIND4)){
		taste = '6';
    106e:	16 e3       	ldi	r17, 0x36	; 54
    1070:	01 c0       	rjmp	.+2      	; 0x1074 <_ZN9Interface6TasterEv+0xaa>
	}
	else if (paradeb(&PIND,PIND3,&stat[4]))//debounce(&PIND,PIND3))
	{
		taste = '5';
    1072:	15 e3       	ldi	r17, 0x35	; 53
	}
	else if (paradeb(&PIND,PIND2,&stat[3]))//debounce(&PIND,PIND2))
	{
		taste = '4';
	}
	PORTC &= ~(1<<PORTC2);
    1074:	42 98       	cbi	0x08, 2	; 8
	
	//dritte Zeile
	PORTD |= (1<<PORTD6);
    1076:	5e 9a       	sbi	0x0b, 6	; 11
    1078:	82 e0       	ldi	r24, 0x02	; 2
    107a:	8a 95       	dec	r24
    107c:	f1 f7       	brne	.-4      	; 0x107a <_ZN9Interface6TasterEv+0xb0>
    107e:	00 c0       	rjmp	.+0      	; 0x1080 <_ZN9Interface6TasterEv+0xb6>
	_delay_us(1);
	if(paradeb(&PIND,PIND4,&stat[8])){//debounce(&PIND,PIND4)){
    1080:	9e 01       	movw	r18, r28
    1082:	28 5f       	subi	r18, 0xF8	; 248
    1084:	3f 4f       	sbci	r19, 0xFF	; 255
    1086:	44 e0       	ldi	r20, 0x04	; 4
    1088:	69 e2       	ldi	r22, 0x29	; 41
    108a:	70 e0       	ldi	r23, 0x00	; 0
    108c:	ce 01       	movw	r24, r28
    108e:	77 df       	rcall	.-274    	; 0xf7e <_ZN9Interface7paradebEPVhhPh>
    1090:	81 11       	cpse	r24, r1
    1092:	16 c0       	rjmp	.+44     	; 0x10c0 <_ZN9Interface6TasterEv+0xf6>
		taste = '9';
	}
	else if (paradeb(&PIND,PIND3,&stat[7]))//debounce(&PIND,PIND3))
    1094:	9e 01       	movw	r18, r28
    1096:	29 5f       	subi	r18, 0xF9	; 249
    1098:	3f 4f       	sbci	r19, 0xFF	; 255
    109a:	43 e0       	ldi	r20, 0x03	; 3
    109c:	69 e2       	ldi	r22, 0x29	; 41
    109e:	70 e0       	ldi	r23, 0x00	; 0
    10a0:	ce 01       	movw	r24, r28
    10a2:	6d df       	rcall	.-294    	; 0xf7e <_ZN9Interface7paradebEPVhhPh>
    10a4:	81 11       	cpse	r24, r1
    10a6:	0e c0       	rjmp	.+28     	; 0x10c4 <_ZN9Interface6TasterEv+0xfa>
	{
		taste = '8';
	}
	else if (paradeb(&PIND,PIND2,&stat[6]))//debounce(&PIND,PIND2))
    10a8:	9e 01       	movw	r18, r28
    10aa:	2a 5f       	subi	r18, 0xFA	; 250
    10ac:	3f 4f       	sbci	r19, 0xFF	; 255
    10ae:	42 e0       	ldi	r20, 0x02	; 2
    10b0:	69 e2       	ldi	r22, 0x29	; 41
    10b2:	70 e0       	ldi	r23, 0x00	; 0
    10b4:	ce 01       	movw	r24, r28
    10b6:	63 df       	rcall	.-314    	; 0xf7e <_ZN9Interface7paradebEPVhhPh>
    10b8:	88 23       	and	r24, r24
    10ba:	29 f0       	breq	.+10     	; 0x10c6 <_ZN9Interface6TasterEv+0xfc>
	{
		taste = '7';
    10bc:	17 e3       	ldi	r17, 0x37	; 55
    10be:	03 c0       	rjmp	.+6      	; 0x10c6 <_ZN9Interface6TasterEv+0xfc>
	
	//dritte Zeile
	PORTD |= (1<<PORTD6);
	_delay_us(1);
	if(paradeb(&PIND,PIND4,&stat[8])){//debounce(&PIND,PIND4)){
		taste = '9';
    10c0:	19 e3       	ldi	r17, 0x39	; 57
    10c2:	01 c0       	rjmp	.+2      	; 0x10c6 <_ZN9Interface6TasterEv+0xfc>
	}
	else if (paradeb(&PIND,PIND3,&stat[7]))//debounce(&PIND,PIND3))
	{
		taste = '8';
    10c4:	18 e3       	ldi	r17, 0x38	; 56
	}
	else if (paradeb(&PIND,PIND2,&stat[6]))//debounce(&PIND,PIND2))
	{
		taste = '7';
	}
	PORTD &= ~(1<<PORTD6);
    10c6:	5e 98       	cbi	0x0b, 6	; 11
	
	//vierte Zeile
	PORTD |= (1<<PORTD5);
    10c8:	5d 9a       	sbi	0x0b, 5	; 11
    10ca:	82 e0       	ldi	r24, 0x02	; 2
    10cc:	8a 95       	dec	r24
    10ce:	f1 f7       	brne	.-4      	; 0x10cc <_ZN9Interface6TasterEv+0x102>
    10d0:	00 c0       	rjmp	.+0      	; 0x10d2 <_ZN9Interface6TasterEv+0x108>
	_delay_us(1);
	if(paradeb(&PIND,PIND4,&stat[11])){//debounce(&PIND,PIND4)){
    10d2:	9e 01       	movw	r18, r28
    10d4:	25 5f       	subi	r18, 0xF5	; 245
    10d6:	3f 4f       	sbci	r19, 0xFF	; 255
    10d8:	44 e0       	ldi	r20, 0x04	; 4
    10da:	69 e2       	ldi	r22, 0x29	; 41
    10dc:	70 e0       	ldi	r23, 0x00	; 0
    10de:	ce 01       	movw	r24, r28
    10e0:	4e df       	rcall	.-356    	; 0xf7e <_ZN9Interface7paradebEPVhhPh>
    10e2:	81 11       	cpse	r24, r1
    10e4:	16 c0       	rjmp	.+44     	; 0x1112 <_ZN9Interface6TasterEv+0x148>
		taste = '#';
	}
	else if (paradeb(&PIND,PIND3,&stat[10]))//debounce(&PIND,PIND3))
    10e6:	9e 01       	movw	r18, r28
    10e8:	26 5f       	subi	r18, 0xF6	; 246
    10ea:	3f 4f       	sbci	r19, 0xFF	; 255
    10ec:	43 e0       	ldi	r20, 0x03	; 3
    10ee:	69 e2       	ldi	r22, 0x29	; 41
    10f0:	70 e0       	ldi	r23, 0x00	; 0
    10f2:	ce 01       	movw	r24, r28
    10f4:	44 df       	rcall	.-376    	; 0xf7e <_ZN9Interface7paradebEPVhhPh>
    10f6:	81 11       	cpse	r24, r1
    10f8:	0e c0       	rjmp	.+28     	; 0x1116 <_ZN9Interface6TasterEv+0x14c>
	{
		taste = '0';
	}
	else if (paradeb(&PIND,PIND2,&stat[9]))//debounce(&PIND,PIND2))
    10fa:	9e 01       	movw	r18, r28
    10fc:	27 5f       	subi	r18, 0xF7	; 247
    10fe:	3f 4f       	sbci	r19, 0xFF	; 255
    1100:	42 e0       	ldi	r20, 0x02	; 2
    1102:	69 e2       	ldi	r22, 0x29	; 41
    1104:	70 e0       	ldi	r23, 0x00	; 0
    1106:	ce 01       	movw	r24, r28
    1108:	3a df       	rcall	.-396    	; 0xf7e <_ZN9Interface7paradebEPVhhPh>
    110a:	88 23       	and	r24, r24
    110c:	29 f0       	breq	.+10     	; 0x1118 <_ZN9Interface6TasterEv+0x14e>
	{
		taste = '*';
    110e:	1a e2       	ldi	r17, 0x2A	; 42
    1110:	03 c0       	rjmp	.+6      	; 0x1118 <_ZN9Interface6TasterEv+0x14e>
	
	//vierte Zeile
	PORTD |= (1<<PORTD5);
	_delay_us(1);
	if(paradeb(&PIND,PIND4,&stat[11])){//debounce(&PIND,PIND4)){
		taste = '#';
    1112:	13 e2       	ldi	r17, 0x23	; 35
    1114:	01 c0       	rjmp	.+2      	; 0x1118 <_ZN9Interface6TasterEv+0x14e>
	}
	else if (paradeb(&PIND,PIND3,&stat[10]))//debounce(&PIND,PIND3))
	{
		taste = '0';
    1116:	10 e3       	ldi	r17, 0x30	; 48
	}
	else if (paradeb(&PIND,PIND2,&stat[9]))//debounce(&PIND,PIND2))
	{
		taste = '*';
	}
	PORTD &= ~(1<<PORTD5);
    1118:	5d 98       	cbi	0x0b, 5	; 11
	
	return taste;
}
    111a:	81 2f       	mov	r24, r17
    111c:	df 91       	pop	r29
    111e:	cf 91       	pop	r28
    1120:	1f 91       	pop	r17
    1122:	08 95       	ret

00001124 <_ZN9Interface7unifiedEv>:

uint8_t Interface::unified(){
	switch (Taster())
    1124:	52 df       	rcall	.-348    	; 0xfca <_ZN9Interface6TasterEv>
    1126:	48 2f       	mov	r20, r24
    1128:	50 e0       	ldi	r21, 0x00	; 0
    112a:	fa 01       	movw	r30, r20
    112c:	b3 97       	sbiw	r30, 0x23	; 35
    112e:	e7 31       	cpi	r30, 0x17	; 23
    1130:	f1 05       	cpc	r31, r1
    1132:	c0 f4       	brcc	.+48     	; 0x1164 <_ZN9Interface7unifiedEv+0x40>
    1134:	ea 5b       	subi	r30, 0xBA	; 186
    1136:	ff 4f       	sbci	r31, 0xFF	; 255
    1138:	0c 94 06 28 	jmp	0x500c	; 0x500c <__tablejump2__>
	{
	case '1':
		return 'B';
		break;
	case '2':
		return 'u';
    113c:	85 e7       	ldi	r24, 0x75	; 117
    113e:	08 95       	ret
		break;
	case '3':
		return 'A';
    1140:	81 e4       	ldi	r24, 0x41	; 65
    1142:	08 95       	ret
		break;
	case '4':
		return 'l';
    1144:	8c e6       	ldi	r24, 0x6C	; 108
    1146:	08 95       	ret
		break;
	case '5':
		return 'o';
    1148:	8f e6       	ldi	r24, 0x6F	; 111
    114a:	08 95       	ret
		break;
	case '6':
		return 'r';
    114c:	82 e7       	ldi	r24, 0x72	; 114
    114e:	08 95       	ret
		break;
	case '7':
		return 'Y';
    1150:	89 e5       	ldi	r24, 0x59	; 89
    1152:	08 95       	ret
		break;
	case '8':
		return 'd';
    1154:	84 e6       	ldi	r24, 0x64	; 100
    1156:	08 95       	ret
		break;
	case '9':
		return 'X';
    1158:	88 e5       	ldi	r24, 0x58	; 88
    115a:	08 95       	ret
		break;
	case '*':
		return 'e';
    115c:	85 e6       	ldi	r24, 0x65	; 101
    115e:	08 95       	ret
		break;
	case '0':
		return '0';
		break;
	case '#':
		return 'm';
    1160:	8d e6       	ldi	r24, 0x6D	; 109
    1162:	08 95       	ret
		break;
	default:
		return ' ';
    1164:	80 e2       	ldi	r24, 0x20	; 32
    1166:	08 95       	ret

uint8_t Interface::unified(){
	switch (Taster())
	{
	case '1':
		return 'B';
    1168:	82 e4       	ldi	r24, 0x42	; 66
		break;
	default:
		return ' ';
		break;
	}
}
    116a:	08 95       	ret

0000116c <_ZN9Interface17ZahlenausTastaturEv>:

uint8_t Interface::ZahlenausTastatur(){
    116c:	cf 93       	push	r28
    116e:	df 93       	push	r29
    1170:	ec 01       	movw	r28, r24
	while(true){
		uint8_t taste = Taster();
    1172:	ce 01       	movw	r24, r28
    1174:	2a df       	rcall	.-428    	; 0xfca <_ZN9Interface6TasterEv>
		if(taste>='0' && taste<='9'){
    1176:	80 53       	subi	r24, 0x30	; 48
    1178:	8a 30       	cpi	r24, 0x0A	; 10
    117a:	d8 f7       	brcc	.-10     	; 0x1172 <_ZN9Interface17ZahlenausTastaturEv+0x6>
			return taste - '0';
		}
	}
}
    117c:	df 91       	pop	r29
    117e:	cf 91       	pop	r28
    1180:	08 95       	ret

00001182 <_ZN7LSM303DD1Ev>:
	//FIFO Bypass Mode
	ACCBypassmode();
}

void LSM303D::ACCStreammode(){
	LSM303_command(FIFO_CTRL,(1<<FM1));
    1182:	46 96       	adiw	r24, 0x16	; 22
    1184:	cf ce       	rjmp	.-610    	; 0xf24 <_ZN3I2CD1Ev>
    1186:	08 95       	ret

00001188 <_ZN7LSM303D14LSM303_commandEhh>:
    1188:	0f 93       	push	r16
    118a:	1f 93       	push	r17
    118c:	cf 93       	push	r28
    118e:	df 93       	push	r29
    1190:	06 2f       	mov	r16, r22
    1192:	14 2f       	mov	r17, r20
    1194:	ec 01       	movw	r28, r24
    1196:	66 96       	adiw	r28, 0x16	; 22
    1198:	ce 01       	movw	r24, r28
    119a:	c5 de       	rcall	.-630    	; 0xf26 <_ZN3I2C9twi_startEv>
    119c:	6a e3       	ldi	r22, 0x3A	; 58
    119e:	ce 01       	movw	r24, r28
    11a0:	ca de       	rcall	.-620    	; 0xf36 <_ZN3I2C9twi_writeEh>
    11a2:	60 2f       	mov	r22, r16
    11a4:	ce 01       	movw	r24, r28
    11a6:	c7 de       	rcall	.-626    	; 0xf36 <_ZN3I2C9twi_writeEh>
    11a8:	61 2f       	mov	r22, r17
    11aa:	ce 01       	movw	r24, r28
    11ac:	c4 de       	rcall	.-632    	; 0xf36 <_ZN3I2C9twi_writeEh>
    11ae:	ce 01       	movw	r24, r28
    11b0:	be de       	rcall	.-644    	; 0xf2e <_ZN3I2C8twi_stopEv>
    11b2:	df 91       	pop	r29
    11b4:	cf 91       	pop	r28
    11b6:	1f 91       	pop	r17
    11b8:	0f 91       	pop	r16
    11ba:	08 95       	ret

000011bc <_ZN7LSM303D13ACCBypassmodeEv>:
}

void LSM303D::ACCBypassmode(){
	LSM303_command(FIFO_CTRL,0x00);
    11bc:	40 e0       	ldi	r20, 0x00	; 0
    11be:	6e e2       	ldi	r22, 0x2E	; 46
    11c0:	e3 cf       	rjmp	.-58     	; 0x1188 <_ZN7LSM303D14LSM303_commandEhh>
    11c2:	08 95       	ret

000011c4 <_ZN7LSM303D9acce_initEv>:
// default destructor
LSM303D::~LSM303D()
{
} //~LSM303D

void LSM303D::acce_init(){
    11c4:	cf 93       	push	r28
    11c6:	df 93       	push	r29
    11c8:	ec 01       	movw	r28, r24
	//ACC Activ und 25Hz ohne Block dataread
	LSM303_command(CTRL1,(1<<AXEN)|(1<<AYEN)|(1<<AZEN)|(1<<AODR2));
    11ca:	47 e4       	ldi	r20, 0x47	; 71
    11cc:	60 e2       	ldi	r22, 0x20	; 32
    11ce:	dc df       	rcall	.-72     	; 0x1188 <_ZN7LSM303D14LSM303_commandEhh>
	
	//ACC fuer +-2g
	LSM303_command(CTRL2,0x00);
    11d0:	40 e0       	ldi	r20, 0x00	; 0
    11d2:	61 e2       	ldi	r22, 0x21	; 33
    11d4:	ce 01       	movw	r24, r28
    11d6:	d8 df       	rcall	.-80     	; 0x1188 <_ZN7LSM303D14LSM303_commandEhh>
	
	//Temperatursensor an
	LSM303_command(CTRL5,(1<<TEMP_EN));
    11d8:	40 e8       	ldi	r20, 0x80	; 128
    11da:	64 e2       	ldi	r22, 0x24	; 36
    11dc:	ce 01       	movw	r24, r28
    11de:	d4 df       	rcall	.-88     	; 0x1188 <_ZN7LSM303D14LSM303_commandEhh>
	
	//FIFO Bypass Mode
	ACCBypassmode();
    11e0:	ce 01       	movw	r24, r28
    11e2:	ec df       	rcall	.-40     	; 0x11bc <_ZN7LSM303D13ACCBypassmodeEv>
}
    11e4:	df 91       	pop	r29
    11e6:	cf 91       	pop	r28
    11e8:	08 95       	ret

000011ea <_ZN7LSM303DC1Ev>:


#include "LSM303D.h"

// default constructor
LSM303D::LSM303D()
    11ea:	cf 93       	push	r28
    11ec:	df 93       	push	r29
    11ee:	ec 01       	movw	r28, r24
    11f0:	46 96       	adiw	r24, 0x16	; 22
    11f2:	94 de       	rcall	.-728    	; 0xf1c <_ZN3I2CC1Ev>
{
	//Variablen initialisieren
	Tempera=0;
    11f4:	1f 82       	std	Y+7, r1	; 0x07
    11f6:	1e 82       	std	Y+6, r1	; 0x06
	roll=0.0;
    11f8:	18 86       	std	Y+8, r1	; 0x08
    11fa:	19 86       	std	Y+9, r1	; 0x09
    11fc:	1a 86       	std	Y+10, r1	; 0x0a
    11fe:	1b 86       	std	Y+11, r1	; 0x0b
	pitch=0.0;
    1200:	1c 86       	std	Y+12, r1	; 0x0c
    1202:	1d 86       	std	Y+13, r1	; 0x0d
    1204:	1e 86       	std	Y+14, r1	; 0x0e
    1206:	1f 86       	std	Y+15, r1	; 0x0f
	Schrittzaehler=0;
    1208:	19 8a       	std	Y+17, r1	; 0x11
    120a:	18 8a       	std	Y+16, r1	; 0x10
	gravity=0;
    120c:	1a 8a       	std	Y+18, r1	; 0x12
    120e:	1b 8a       	std	Y+19, r1	; 0x13
    1210:	1c 8a       	std	Y+20, r1	; 0x14
    1212:	1d 8a       	std	Y+21, r1	; 0x15
	higher=0;
    1214:	de 01       	movw	r26, r28
    1216:	a1 52       	subi	r26, 0x21	; 33
    1218:	bf 4f       	sbci	r27, 0xFF	; 255
    121a:	1d 92       	st	X+, r1
    121c:	1d 92       	st	X+, r1
    121e:	1d 92       	st	X+, r1
    1220:	1c 92       	st	X, r1
    1222:	13 97       	sbiw	r26, 0x03	; 3
	lower=0;
    1224:	fe 01       	movw	r30, r28
    1226:	ed 51       	subi	r30, 0x1D	; 29
    1228:	ff 4f       	sbci	r31, 0xFF	; 255
    122a:	10 82       	st	Z, r1
    122c:	11 82       	std	Z+1, r1	; 0x01
    122e:	12 82       	std	Z+2, r1	; 0x02
    1230:	13 82       	std	Z+3, r1	; 0x03
	threschold=27;	//aus Erfahrung
    1232:	34 96       	adiw	r30, 0x04	; 4
    1234:	8b e1       	ldi	r24, 0x1B	; 27
    1236:	90 e0       	ldi	r25, 0x00	; 0
    1238:	91 83       	std	Z+1, r25	; 0x01
    123a:	80 83       	st	Z, r24
	for (uint8_t i=0;i<3;i++)
	{
		achsen_A[i]=0;
    123c:	19 82       	std	Y+1, r1	; 0x01
    123e:	18 82       	st	Y, r1
    1240:	1b 82       	std	Y+3, r1	; 0x03
    1242:	1a 82       	std	Y+2, r1	; 0x02
    1244:	1d 82       	std	Y+5, r1	; 0x05
    1246:	1c 82       	std	Y+4, r1	; 0x04
    1248:	e0 5d       	subi	r30, 0xD0	; 208
    124a:	f1 09       	sbc	r31, r1
    124c:	9d 01       	movw	r18, r26
	}
	for (uint8_t i=0;i<50;i++)
	{
		Daten[i]=0;
    124e:	11 92       	st	Z+, r1
    1250:	11 92       	st	Z+, r1
    1252:	11 92       	st	Z+, r1
    1254:	11 92       	st	Z+, r1
	threschold=27;	//aus Erfahrung
	for (uint8_t i=0;i<3;i++)
	{
		achsen_A[i]=0;
	}
	for (uint8_t i=0;i<50;i++)
    1256:	e2 17       	cp	r30, r18
    1258:	f3 07       	cpc	r31, r19
    125a:	c9 f7       	brne	.-14     	; 0x124e <_ZN7LSM303DC1Ev+0x64>
	{
		Daten[i]=0;
	}
	
	//ACC init
	acce_init();
    125c:	ce 01       	movw	r24, r28
    125e:	b2 df       	rcall	.-156    	; 0x11c4 <_ZN7LSM303D9acce_initEv>
} //LSM303D
    1260:	df 91       	pop	r29
    1262:	cf 91       	pop	r28
    1264:	08 95       	ret

00001266 <_ZN7monitor11tastendruckEPh>:
	for (uint8_t i = 0; i < nsamples; ++i ) {
		sum += ADC_Read( channel );
	}
	
	return (uint16_t)( sum / nsamples );
}
    1266:	80 e0       	ldi	r24, 0x00	; 0
    1268:	08 95       	ret

0000126a <_ZN3uhr11tastendruckEPh>:
    126a:	fc 01       	movw	r30, r24
    126c:	db 01       	movw	r26, r22
    126e:	9c 91       	ld	r25, X
    1270:	95 36       	cpi	r25, 0x65	; 101
    1272:	39 f4       	brne	.+14     	; 0x1282 <_ZN3uhr11tastendruckEPh+0x18>
    1274:	81 a5       	ldd	r24, Z+41	; 0x29
    1276:	81 30       	cpi	r24, 0x01	; 1
    1278:	11 f4       	brne	.+4      	; 0x127e <_ZN3uhr11tastendruckEPh+0x14>
    127a:	11 a6       	std	Z+41, r1	; 0x29
    127c:	02 c0       	rjmp	.+4      	; 0x1282 <_ZN3uhr11tastendruckEPh+0x18>
    127e:	81 e0       	ldi	r24, 0x01	; 1
    1280:	81 a7       	std	Z+41, r24	; 0x29
    1282:	80 e0       	ldi	r24, 0x00	; 0
    1284:	08 95       	ret

00001286 <_ZN13einstellungen11tastendruckEPh>:
    1286:	80 e0       	ldi	r24, 0x00	; 0
    1288:	08 95       	ret

0000128a <_ZN5menue11tastendruckEPh>:
    128a:	80 e0       	ldi	r24, 0x00	; 0
    128c:	08 95       	ret

0000128e <_ZN9offscreen4drawEv>:
    128e:	cf 93       	push	r28
    1290:	df 93       	push	r29
    1292:	ec 01       	movw	r28, r24
    1294:	8f 89       	ldd	r24, Y+23	; 0x17
    1296:	98 8d       	ldd	r25, Y+24	; 0x18
    1298:	ec d9       	rcall	.-3112   	; 0x672 <_ZN7Display10clearFrameEv>
    129a:	8f 89       	ldd	r24, Y+23	; 0x17
    129c:	98 8d       	ldd	r25, Y+24	; 0x18
    129e:	63 da       	rcall	.-2874   	; 0x766 <_ZN7Display9sendFrameEv>
    12a0:	df 91       	pop	r29
    12a2:	cf 91       	pop	r28
    12a4:	08 95       	ret

000012a6 <_ZN9wilkommen4drawEv>:
    12a6:	ef 92       	push	r14
    12a8:	ff 92       	push	r15
    12aa:	0f 93       	push	r16
    12ac:	1f 93       	push	r17
    12ae:	cf 93       	push	r28
    12b0:	df 93       	push	r29
    12b2:	ec 01       	movw	r28, r24
    12b4:	8f 89       	ldd	r24, Y+23	; 0x17
    12b6:	98 8d       	ldd	r25, Y+24	; 0x18
    12b8:	dc d9       	rcall	.-3144   	; 0x672 <_ZN7Display10clearFrameEv>
    12ba:	7e 01       	movw	r14, r28
    12bc:	22 e0       	ldi	r18, 0x02	; 2
    12be:	e2 0e       	add	r14, r18
    12c0:	f1 1c       	adc	r15, r1
    12c2:	8f e0       	ldi	r24, 0x0F	; 15
    12c4:	e6 e0       	ldi	r30, 0x06	; 6
    12c6:	f1 e0       	ldi	r31, 0x01	; 1
    12c8:	d7 01       	movw	r26, r14
    12ca:	01 90       	ld	r0, Z+
    12cc:	0d 92       	st	X+, r0
    12ce:	8a 95       	dec	r24
    12d0:	e1 f7       	brne	.-8      	; 0x12ca <_ZN9wilkommen4drawEv+0x24>
    12d2:	8e e0       	ldi	r24, 0x0E	; 14
    12d4:	8e 8b       	std	Y+22, r24	; 0x16
    12d6:	00 e0       	ldi	r16, 0x00	; 0
    12d8:	10 e0       	ldi	r17, 0x00	; 0
    12da:	fe 01       	movw	r30, r28
    12dc:	e1 0f       	add	r30, r17
    12de:	f1 1d       	adc	r31, r1
    12e0:	20 e0       	ldi	r18, 0x00	; 0
    12e2:	40 2f       	mov	r20, r16
    12e4:	62 81       	ldd	r22, Z+2	; 0x02
    12e6:	8f 89       	ldd	r24, Y+23	; 0x17
    12e8:	98 8d       	ldd	r25, Y+24	; 0x18
    12ea:	db da       	rcall	.-2634   	; 0x8a2 <_ZN7Display9draw_ASCIEhhh>
    12ec:	1f 5f       	subi	r17, 0xFF	; 255
    12ee:	0a 5f       	subi	r16, 0xFA	; 250
    12f0:	8e 89       	ldd	r24, Y+22	; 0x16
    12f2:	18 17       	cp	r17, r24
    12f4:	90 f3       	brcs	.-28     	; 0x12da <_ZN9wilkommen4drawEv+0x34>
    12f6:	8f e0       	ldi	r24, 0x0F	; 15
    12f8:	e5 e1       	ldi	r30, 0x15	; 21
    12fa:	f1 e0       	ldi	r31, 0x01	; 1
    12fc:	d7 01       	movw	r26, r14
    12fe:	01 90       	ld	r0, Z+
    1300:	0d 92       	st	X+, r0
    1302:	8a 95       	dec	r24
    1304:	e1 f7       	brne	.-8      	; 0x12fe <_ZN9wilkommen4drawEv+0x58>
    1306:	8e e0       	ldi	r24, 0x0E	; 14
    1308:	8e 8b       	std	Y+22, r24	; 0x16
    130a:	00 e0       	ldi	r16, 0x00	; 0
    130c:	10 e0       	ldi	r17, 0x00	; 0
    130e:	fe 01       	movw	r30, r28
    1310:	e1 0f       	add	r30, r17
    1312:	f1 1d       	adc	r31, r1
    1314:	28 e0       	ldi	r18, 0x08	; 8
    1316:	40 2f       	mov	r20, r16
    1318:	62 81       	ldd	r22, Z+2	; 0x02
    131a:	8f 89       	ldd	r24, Y+23	; 0x17
    131c:	98 8d       	ldd	r25, Y+24	; 0x18
    131e:	c1 da       	rcall	.-2686   	; 0x8a2 <_ZN7Display9draw_ASCIEhhh>
    1320:	1f 5f       	subi	r17, 0xFF	; 255
    1322:	0a 5f       	subi	r16, 0xFA	; 250
    1324:	8e 89       	ldd	r24, Y+22	; 0x16
    1326:	18 17       	cp	r17, r24
    1328:	90 f3       	brcs	.-28     	; 0x130e <_ZN9wilkommen4drawEv+0x68>
    132a:	80 e4       	ldi	r24, 0x40	; 64
    132c:	8f 93       	push	r24
    132e:	81 e4       	ldi	r24, 0x41	; 65
    1330:	8f 93       	push	r24
    1332:	87 e4       	ldi	r24, 0x47	; 71
    1334:	8f 93       	push	r24
    1336:	8e ea       	ldi	r24, 0xAE	; 174
    1338:	8f 93       	push	r24
    133a:	84 e2       	ldi	r24, 0x24	; 36
    133c:	91 e0       	ldi	r25, 0x01	; 1
    133e:	9f 93       	push	r25
    1340:	8f 93       	push	r24
    1342:	ff 92       	push	r15
    1344:	ef 92       	push	r14
    1346:	0e 94 62 2a 	call	0x54c4	; 0x54c4 <sprintf>
    134a:	8e 8b       	std	Y+22, r24	; 0x16
    134c:	2d b7       	in	r18, 0x3d	; 61
    134e:	3e b7       	in	r19, 0x3e	; 62
    1350:	28 5f       	subi	r18, 0xF8	; 248
    1352:	3f 4f       	sbci	r19, 0xFF	; 255
    1354:	0f b6       	in	r0, 0x3f	; 63
    1356:	f8 94       	cli
    1358:	3e bf       	out	0x3e, r19	; 62
    135a:	0f be       	out	0x3f, r0	; 63
    135c:	2d bf       	out	0x3d, r18	; 61
    135e:	88 23       	and	r24, r24
    1360:	81 f0       	breq	.+32     	; 0x1382 <_ZN9wilkommen4drawEv+0xdc>
    1362:	00 e0       	ldi	r16, 0x00	; 0
    1364:	10 e0       	ldi	r17, 0x00	; 0
    1366:	fe 01       	movw	r30, r28
    1368:	e1 0f       	add	r30, r17
    136a:	f1 1d       	adc	r31, r1
    136c:	20 e2       	ldi	r18, 0x20	; 32
    136e:	40 2f       	mov	r20, r16
    1370:	62 81       	ldd	r22, Z+2	; 0x02
    1372:	8f 89       	ldd	r24, Y+23	; 0x17
    1374:	98 8d       	ldd	r25, Y+24	; 0x18
    1376:	95 da       	rcall	.-2774   	; 0x8a2 <_ZN7Display9draw_ASCIEhhh>
    1378:	1f 5f       	subi	r17, 0xFF	; 255
    137a:	0a 5f       	subi	r16, 0xFA	; 250
    137c:	8e 89       	ldd	r24, Y+22	; 0x16
    137e:	18 17       	cp	r17, r24
    1380:	90 f3       	brcs	.-28     	; 0x1366 <_ZN9wilkommen4drawEv+0xc0>
    1382:	8f 89       	ldd	r24, Y+23	; 0x17
    1384:	98 8d       	ldd	r25, Y+24	; 0x18
    1386:	ef d9       	rcall	.-3106   	; 0x766 <_ZN7Display9sendFrameEv>
    1388:	df 91       	pop	r29
    138a:	cf 91       	pop	r28
    138c:	1f 91       	pop	r17
    138e:	0f 91       	pop	r16
    1390:	ff 90       	pop	r15
    1392:	ef 90       	pop	r14
    1394:	08 95       	ret

00001396 <_Z8ADC_Readh>:
    1396:	ec e7       	ldi	r30, 0x7C	; 124
    1398:	f0 e0       	ldi	r31, 0x00	; 0
    139a:	90 81       	ld	r25, Z
    139c:	8f 71       	andi	r24, 0x1F	; 31
    139e:	90 7e       	andi	r25, 0xE0	; 224
    13a0:	89 2b       	or	r24, r25
    13a2:	80 83       	st	Z, r24
    13a4:	ea e7       	ldi	r30, 0x7A	; 122
    13a6:	f0 e0       	ldi	r31, 0x00	; 0
    13a8:	80 81       	ld	r24, Z
    13aa:	80 64       	ori	r24, 0x40	; 64
    13ac:	80 83       	st	Z, r24
    13ae:	80 81       	ld	r24, Z
    13b0:	86 fd       	sbrc	r24, 6
    13b2:	fd cf       	rjmp	.-6      	; 0x13ae <_Z8ADC_Readh+0x18>
    13b4:	80 91 78 00 	lds	r24, 0x0078
    13b8:	90 91 79 00 	lds	r25, 0x0079
    13bc:	08 95       	ret

000013be <_Z14Batteriestatusv>:

#ifndef BATMIN
#define BATMIN 3.0
#endif

int8_t Batteriestatus(){
    13be:	cf 92       	push	r12
    13c0:	df 92       	push	r13
    13c2:	ef 92       	push	r14
    13c4:	ff 92       	push	r15
	uint16_t ADCwert=ADC_Read(0);
    13c6:	80 e0       	ldi	r24, 0x00	; 0
    13c8:	e6 df       	rcall	.-52     	; 0x1396 <_Z8ADC_Readh>
	batterie = (ADCwert/1023.0)*3.29*SPANNUNGSTEILER;
    13ca:	bc 01       	movw	r22, r24
    13cc:	80 e0       	ldi	r24, 0x00	; 0
    13ce:	90 e0       	ldi	r25, 0x00	; 0
    13d0:	0e 94 8e 21 	call	0x431c	; 0x431c <__floatunsisf>
    13d4:	20 e0       	ldi	r18, 0x00	; 0
    13d6:	30 ec       	ldi	r19, 0xC0	; 192
    13d8:	4f e7       	ldi	r20, 0x7F	; 127
    13da:	54 e4       	ldi	r21, 0x44	; 68
    13dc:	0e 94 f5 20 	call	0x41ea	; 0x41ea <__divsf3>
    13e0:	2c e5       	ldi	r18, 0x5C	; 92
    13e2:	3f e8       	ldi	r19, 0x8F	; 143
    13e4:	42 e5       	ldi	r20, 0x52	; 82
    13e6:	50 e4       	ldi	r21, 0x40	; 64
    13e8:	0e 94 a9 22 	call	0x4552	; 0x4552 <__mulsf3>
    13ec:	2d e0       	ldi	r18, 0x0D	; 13
    13ee:	31 e7       	ldi	r19, 0x71	; 113
    13f0:	40 e0       	ldi	r20, 0x00	; 0
    13f2:	50 e4       	ldi	r21, 0x40	; 64
    13f4:	0e 94 a9 22 	call	0x4552	; 0x4552 <__mulsf3>
    13f8:	60 93 3e 03 	sts	0x033E, r22
    13fc:	70 93 3f 03 	sts	0x033F, r23
    1400:	80 93 40 03 	sts	0x0340, r24
    1404:	90 93 41 03 	sts	0x0341, r25
	float stat = ((batterie-BATMIN)/(4.2-BATMIN)*100);
    1408:	26 e6       	ldi	r18, 0x66	; 102
    140a:	36 e6       	ldi	r19, 0x66	; 102
    140c:	46 e6       	ldi	r20, 0x66	; 102
    140e:	50 e4       	ldi	r21, 0x40	; 64
    1410:	0e 94 8d 20 	call	0x411a	; 0x411a <__subsf3>
    1414:	28 e9       	ldi	r18, 0x98	; 152
    1416:	39 e9       	ldi	r19, 0x99	; 153
    1418:	49 e1       	ldi	r20, 0x19	; 25
    141a:	5f e3       	ldi	r21, 0x3F	; 63
    141c:	0e 94 f5 20 	call	0x41ea	; 0x41ea <__divsf3>
    1420:	20 e0       	ldi	r18, 0x00	; 0
    1422:	30 e0       	ldi	r19, 0x00	; 0
    1424:	48 ec       	ldi	r20, 0xC8	; 200
    1426:	52 e4       	ldi	r21, 0x42	; 66
    1428:	0e 94 a9 22 	call	0x4552	; 0x4552 <__mulsf3>
    142c:	6b 01       	movw	r12, r22
    142e:	7c 01       	movw	r14, r24
	uint8_t temp =(uint8_t) (stat*10);
    1430:	20 e0       	ldi	r18, 0x00	; 0
    1432:	30 e0       	ldi	r19, 0x00	; 0
    1434:	40 e2       	ldi	r20, 0x20	; 32
    1436:	51 e4       	ldi	r21, 0x41	; 65
    1438:	0e 94 a9 22 	call	0x4552	; 0x4552 <__mulsf3>
    143c:	0e 94 62 21 	call	0x42c4	; 0x42c4 <__fixunssfsi>
	if (temp%10>=5)
    1440:	8d ec       	ldi	r24, 0xCD	; 205
    1442:	68 9f       	mul	r22, r24
    1444:	81 2d       	mov	r24, r1
    1446:	11 24       	eor	r1, r1
    1448:	86 95       	lsr	r24
    144a:	86 95       	lsr	r24
    144c:	86 95       	lsr	r24
    144e:	88 0f       	add	r24, r24
    1450:	28 2f       	mov	r18, r24
    1452:	22 0f       	add	r18, r18
    1454:	22 0f       	add	r18, r18
    1456:	82 0f       	add	r24, r18
    1458:	96 2f       	mov	r25, r22
    145a:	98 1b       	sub	r25, r24
    145c:	95 30       	cpi	r25, 0x05	; 5
    145e:	70 f0       	brcs	.+28     	; 0x147c <_Z14Batteriestatusv+0xbe>
	{
		stat = (uint8_t)stat+1;
    1460:	c7 01       	movw	r24, r14
    1462:	b6 01       	movw	r22, r12
    1464:	0e 94 62 21 	call	0x42c4	; 0x42c4 <__fixunssfsi>
    1468:	70 e0       	ldi	r23, 0x00	; 0
    146a:	6f 5f       	subi	r22, 0xFF	; 255
    146c:	7f 4f       	sbci	r23, 0xFF	; 255
    146e:	07 2e       	mov	r0, r23
    1470:	00 0c       	add	r0, r0
    1472:	88 0b       	sbc	r24, r24
    1474:	99 0b       	sbc	r25, r25
    1476:	0e 94 90 21 	call	0x4320	; 0x4320 <__floatsisf>
    147a:	09 c0       	rjmp	.+18     	; 0x148e <_Z14Batteriestatusv+0xd0>
	}
	else
	{
		stat = (uint8_t)stat;
    147c:	c7 01       	movw	r24, r14
    147e:	b6 01       	movw	r22, r12
    1480:	0e 94 62 21 	call	0x42c4	; 0x42c4 <__fixunssfsi>
    1484:	70 e0       	ldi	r23, 0x00	; 0
    1486:	80 e0       	ldi	r24, 0x00	; 0
    1488:	90 e0       	ldi	r25, 0x00	; 0
    148a:	0e 94 8e 21 	call	0x431c	; 0x431c <__floatunsisf>
	}
	return stat;
    148e:	0e 94 5d 21 	call	0x42ba	; 0x42ba <__fixsfsi>
    1492:	86 2f       	mov	r24, r22
}
    1494:	ff 90       	pop	r15
    1496:	ef 90       	pop	r14
    1498:	df 90       	pop	r13
    149a:	cf 90       	pop	r12
    149c:	08 95       	ret

0000149e <_ZN5menue4drawEv>:
	
	uint8_t tastendruck(uint8_t *tast){
		return 0;
	}

	void draw(){
    149e:	cf 92       	push	r12
    14a0:	df 92       	push	r13
    14a2:	ef 92       	push	r14
    14a4:	ff 92       	push	r15
    14a6:	0f 93       	push	r16
    14a8:	1f 93       	push	r17
    14aa:	cf 93       	push	r28
    14ac:	df 93       	push	r29
    14ae:	ec 01       	movw	r28, r24
		return 0;
	}
	
	//drawfunktion
	virtual void draw(){
		oled->clearFrame();
    14b0:	8f 89       	ldd	r24, Y+23	; 0x17
    14b2:	98 8d       	ldd	r25, Y+24	; 0x18
    14b4:	de d8       	rcall	.-3652   	; 0x672 <_ZN7Display10clearFrameEv>
    14b6:	10 e0       	ldi	r17, 0x00	; 0
    14b8:	e1 2c       	mov	r14, r1
    14ba:	f1 2c       	mov	r15, r1
	}
	
	//draw header and overload it
	void header(){
		for(uint8_t i=0;i<8;i++){
			oled->draw_ASCI(rtc->msg_uhr[i],i*charsize,0);
    14bc:	e9 8d       	ldd	r30, Y+25	; 0x19
    14be:	fa 8d       	ldd	r31, Y+26	; 0x1a
    14c0:	ee 0d       	add	r30, r14
    14c2:	ff 1d       	adc	r31, r15
    14c4:	20 e0       	ldi	r18, 0x00	; 0
    14c6:	41 2f       	mov	r20, r17
    14c8:	60 81       	ld	r22, Z
    14ca:	8f 89       	ldd	r24, Y+23	; 0x17
    14cc:	98 8d       	ldd	r25, Y+24	; 0x18
    14ce:	e9 d9       	rcall	.-3118   	; 0x8a2 <_ZN7Display9draw_ASCIEhhh>
    14d0:	8f ef       	ldi	r24, 0xFF	; 255
    14d2:	e8 1a       	sub	r14, r24
    14d4:	f8 0a       	sbc	r15, r24
    14d6:	1a 5f       	subi	r17, 0xFA	; 250
		return &name[0];
	}
	
	//draw header and overload it
	void header(){
		for(uint8_t i=0;i<8;i++){
    14d8:	10 33       	cpi	r17, 0x30	; 48
    14da:	81 f7       	brne	.-32     	; 0x14bc <_ZN5menue4drawEv+0x1e>
			oled->draw_ASCI(rtc->msg_uhr[i],i*charsize,0);
		}
		buffersize=sprintf(buffer,"Bat: %i%%",Batteriestatus());
    14dc:	70 df       	rcall	.-288    	; 0x13be <_Z14Batteriestatusv>
    14de:	7e 01       	movw	r14, r28
    14e0:	92 e0       	ldi	r25, 0x02	; 2
    14e2:	e9 0e       	add	r14, r25
    14e4:	f1 1c       	adc	r15, r1
    14e6:	28 2f       	mov	r18, r24
    14e8:	08 2e       	mov	r0, r24
    14ea:	00 0c       	add	r0, r0
    14ec:	33 0b       	sbc	r19, r19
    14ee:	3f 93       	push	r19
    14f0:	8f 93       	push	r24
    14f2:	82 e3       	ldi	r24, 0x32	; 50
    14f4:	91 e0       	ldi	r25, 0x01	; 1
    14f6:	9f 93       	push	r25
    14f8:	8f 93       	push	r24
    14fa:	ff 92       	push	r15
    14fc:	ef 92       	push	r14
    14fe:	0e 94 62 2a 	call	0x54c4	; 0x54c4 <sprintf>
    1502:	8e 8b       	std	Y+22, r24	; 0x16
		for(uint8_t i=((SSD1306_WIDTH/charsize)-buffersize);i<(SSD1306_WIDTH/charsize);i++){
    1504:	15 e1       	ldi	r17, 0x15	; 21
    1506:	18 1b       	sub	r17, r24
    1508:	0f 90       	pop	r0
    150a:	0f 90       	pop	r0
    150c:	0f 90       	pop	r0
    150e:	0f 90       	pop	r0
    1510:	0f 90       	pop	r0
    1512:	0f 90       	pop	r0
    1514:	15 31       	cpi	r17, 0x15	; 21
    1516:	08 f0       	brcs	.+2      	; 0x151a <_ZN5menue4drawEv+0x7c>
    1518:	b6 c0       	rjmp	.+364    	; 0x1686 <_ZN5menue4drawEv+0x1e8>
    151a:	01 2f       	mov	r16, r17
    151c:	00 0f       	add	r16, r16
    151e:	01 0f       	add	r16, r17
    1520:	00 0f       	add	r16, r16
			oled->draw_ASCI(buffer[i-((SSD1306_WIDTH/charsize)-buffersize)],i*charsize,0);
    1522:	8e 89       	ldd	r24, Y+22	; 0x16
    1524:	fe 01       	movw	r30, r28
    1526:	e1 0f       	add	r30, r17
    1528:	f1 1d       	adc	r31, r1
    152a:	e8 0f       	add	r30, r24
    152c:	f1 1d       	adc	r31, r1
    152e:	73 97       	sbiw	r30, 0x13	; 19
    1530:	20 e0       	ldi	r18, 0x00	; 0
    1532:	40 2f       	mov	r20, r16
    1534:	60 81       	ld	r22, Z
    1536:	8f 89       	ldd	r24, Y+23	; 0x17
    1538:	98 8d       	ldd	r25, Y+24	; 0x18
    153a:	b3 d9       	rcall	.-3226   	; 0x8a2 <_ZN7Display9draw_ASCIEhhh>
	void header(){
		for(uint8_t i=0;i<8;i++){
			oled->draw_ASCI(rtc->msg_uhr[i],i*charsize,0);
		}
		buffersize=sprintf(buffer,"Bat: %i%%",Batteriestatus());
		for(uint8_t i=((SSD1306_WIDTH/charsize)-buffersize);i<(SSD1306_WIDTH/charsize);i++){
    153c:	1f 5f       	subi	r17, 0xFF	; 255
    153e:	0a 5f       	subi	r16, 0xFA	; 250
    1540:	15 31       	cpi	r17, 0x15	; 21
    1542:	79 f7       	brne	.-34     	; 0x1522 <_ZN5menue4drawEv+0x84>
    1544:	a0 c0       	rjmp	.+320    	; 0x1686 <_ZN5menue4drawEv+0x1e8>
	}
	
	//draw bottom and overload it
	void bottom(){
		for(uint8_t i=0;i<8;i++){
			oled->draw_ASCI(rtc->msg_dat[i],i*charsize+(SSD1306_WIDTH-bitsderrtc*charsize),7*charhighte);
    1546:	e9 8d       	ldd	r30, Y+25	; 0x19
    1548:	fa 8d       	ldd	r31, Y+26	; 0x1a
    154a:	ec 0d       	add	r30, r12
    154c:	fd 1d       	adc	r31, r13
    154e:	28 e3       	ldi	r18, 0x38	; 56
    1550:	41 2f       	mov	r20, r17
    1552:	60 85       	ldd	r22, Z+8	; 0x08
    1554:	8f 89       	ldd	r24, Y+23	; 0x17
    1556:	98 8d       	ldd	r25, Y+24	; 0x18
    1558:	a4 d9       	rcall	.-3256   	; 0x8a2 <_ZN7Display9draw_ASCIEhhh>
    155a:	8f ef       	ldi	r24, 0xFF	; 255
    155c:	c8 1a       	sub	r12, r24
    155e:	d8 0a       	sbc	r13, r24
    1560:	1a 5f       	subi	r17, 0xFA	; 250
		}
	}
	
	//draw bottom and overload it
	void bottom(){
		for(uint8_t i=0;i<8;i++){
    1562:	10 38       	cpi	r17, 0x80	; 128
    1564:	81 f7       	brne	.-32     	; 0x1546 <_ZN5menue4drawEv+0xa8>
	void draw(){
		monitor::draw();
		header();
		bottom();
		//menueeintrag zeichnen
		buffersize=sprintf(buffer,"Uhr");
    1566:	85 e5       	ldi	r24, 0x55	; 85
    1568:	98 e6       	ldi	r25, 0x68	; 104
    156a:	a2 e7       	ldi	r26, 0x72	; 114
    156c:	b0 e0       	ldi	r27, 0x00	; 0
    156e:	8a 83       	std	Y+2, r24	; 0x02
    1570:	9b 83       	std	Y+3, r25	; 0x03
    1572:	ac 83       	std	Y+4, r26	; 0x04
    1574:	bd 83       	std	Y+5, r27	; 0x05
    1576:	83 e0       	ldi	r24, 0x03	; 3
    1578:	8e 8b       	std	Y+22, r24	; 0x16
    157a:	0c e0       	ldi	r16, 0x0C	; 12
    157c:	10 e0       	ldi	r17, 0x00	; 0
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+2*charsize,2*charhighte);}
    157e:	fe 01       	movw	r30, r28
    1580:	e1 0f       	add	r30, r17
    1582:	f1 1d       	adc	r31, r1
    1584:	20 e1       	ldi	r18, 0x10	; 16
    1586:	40 2f       	mov	r20, r16
    1588:	62 81       	ldd	r22, Z+2	; 0x02
    158a:	8f 89       	ldd	r24, Y+23	; 0x17
    158c:	98 8d       	ldd	r25, Y+24	; 0x18
    158e:	89 d9       	rcall	.-3310   	; 0x8a2 <_ZN7Display9draw_ASCIEhhh>
    1590:	1f 5f       	subi	r17, 0xFF	; 255
    1592:	0a 5f       	subi	r16, 0xFA	; 250
    1594:	8e 89       	ldd	r24, Y+22	; 0x16
    1596:	18 17       	cp	r17, r24
    1598:	90 f3       	brcs	.-28     	; 0x157e <_ZN5menue4drawEv+0xe0>
		buffersize=sprintf(buffer,"Tacho");
    159a:	86 e0       	ldi	r24, 0x06	; 6
    159c:	ec e3       	ldi	r30, 0x3C	; 60
    159e:	f1 e0       	ldi	r31, 0x01	; 1
    15a0:	d7 01       	movw	r26, r14
    15a2:	01 90       	ld	r0, Z+
    15a4:	0d 92       	st	X+, r0
    15a6:	8a 95       	dec	r24
    15a8:	e1 f7       	brne	.-8      	; 0x15a2 <_ZN5menue4drawEv+0x104>
    15aa:	85 e0       	ldi	r24, 0x05	; 5
    15ac:	8e 8b       	std	Y+22, r24	; 0x16
    15ae:	0c e0       	ldi	r16, 0x0C	; 12
    15b0:	10 e0       	ldi	r17, 0x00	; 0
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+2*charsize,3*charhighte);}
    15b2:	fe 01       	movw	r30, r28
    15b4:	e1 0f       	add	r30, r17
    15b6:	f1 1d       	adc	r31, r1
    15b8:	28 e1       	ldi	r18, 0x18	; 24
    15ba:	40 2f       	mov	r20, r16
    15bc:	62 81       	ldd	r22, Z+2	; 0x02
    15be:	8f 89       	ldd	r24, Y+23	; 0x17
    15c0:	98 8d       	ldd	r25, Y+24	; 0x18
    15c2:	6f d9       	rcall	.-3362   	; 0x8a2 <_ZN7Display9draw_ASCIEhhh>
    15c4:	1f 5f       	subi	r17, 0xFF	; 255
    15c6:	0a 5f       	subi	r16, 0xFA	; 250
    15c8:	8e 89       	ldd	r24, Y+22	; 0x16
    15ca:	18 17       	cp	r17, r24
    15cc:	90 f3       	brcs	.-28     	; 0x15b2 <_ZN5menue4drawEv+0x114>
		buffersize=sprintf(buffer,"Wandern");
    15ce:	88 e0       	ldi	r24, 0x08	; 8
    15d0:	e2 e4       	ldi	r30, 0x42	; 66
    15d2:	f1 e0       	ldi	r31, 0x01	; 1
    15d4:	d7 01       	movw	r26, r14
    15d6:	01 90       	ld	r0, Z+
    15d8:	0d 92       	st	X+, r0
    15da:	8a 95       	dec	r24
    15dc:	e1 f7       	brne	.-8      	; 0x15d6 <_ZN5menue4drawEv+0x138>
    15de:	87 e0       	ldi	r24, 0x07	; 7
    15e0:	8e 8b       	std	Y+22, r24	; 0x16
    15e2:	0c e0       	ldi	r16, 0x0C	; 12
    15e4:	10 e0       	ldi	r17, 0x00	; 0
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+2*charsize,4*charhighte);}
    15e6:	fe 01       	movw	r30, r28
    15e8:	e1 0f       	add	r30, r17
    15ea:	f1 1d       	adc	r31, r1
    15ec:	20 e2       	ldi	r18, 0x20	; 32
    15ee:	40 2f       	mov	r20, r16
    15f0:	62 81       	ldd	r22, Z+2	; 0x02
    15f2:	8f 89       	ldd	r24, Y+23	; 0x17
    15f4:	98 8d       	ldd	r25, Y+24	; 0x18
    15f6:	55 d9       	rcall	.-3414   	; 0x8a2 <_ZN7Display9draw_ASCIEhhh>
    15f8:	1f 5f       	subi	r17, 0xFF	; 255
    15fa:	0a 5f       	subi	r16, 0xFA	; 250
    15fc:	8e 89       	ldd	r24, Y+22	; 0x16
    15fe:	18 17       	cp	r17, r24
    1600:	90 f3       	brcs	.-28     	; 0x15e6 <_ZN5menue4drawEv+0x148>
		buffersize=sprintf(buffer,"Einstellungen");
    1602:	8e e0       	ldi	r24, 0x0E	; 14
    1604:	ea e4       	ldi	r30, 0x4A	; 74
    1606:	f1 e0       	ldi	r31, 0x01	; 1
    1608:	d7 01       	movw	r26, r14
    160a:	01 90       	ld	r0, Z+
    160c:	0d 92       	st	X+, r0
    160e:	8a 95       	dec	r24
    1610:	e1 f7       	brne	.-8      	; 0x160a <_ZN5menue4drawEv+0x16c>
    1612:	8d e0       	ldi	r24, 0x0D	; 13
    1614:	8e 8b       	std	Y+22, r24	; 0x16
    1616:	0c e0       	ldi	r16, 0x0C	; 12
    1618:	10 e0       	ldi	r17, 0x00	; 0
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+2*charsize,5*charhighte);}
    161a:	fe 01       	movw	r30, r28
    161c:	e1 0f       	add	r30, r17
    161e:	f1 1d       	adc	r31, r1
    1620:	28 e2       	ldi	r18, 0x28	; 40
    1622:	40 2f       	mov	r20, r16
    1624:	62 81       	ldd	r22, Z+2	; 0x02
    1626:	8f 89       	ldd	r24, Y+23	; 0x17
    1628:	98 8d       	ldd	r25, Y+24	; 0x18
    162a:	3b d9       	rcall	.-3466   	; 0x8a2 <_ZN7Display9draw_ASCIEhhh>
    162c:	1f 5f       	subi	r17, 0xFF	; 255
    162e:	0a 5f       	subi	r16, 0xFA	; 250
    1630:	8e 89       	ldd	r24, Y+22	; 0x16
    1632:	18 17       	cp	r17, r24
    1634:	90 f3       	brcs	.-28     	; 0x161a <_ZN5menue4drawEv+0x17c>
		buffersize=sprintf(buffer,"Display aus");
    1636:	8c e0       	ldi	r24, 0x0C	; 12
    1638:	e8 e5       	ldi	r30, 0x58	; 88
    163a:	f1 e0       	ldi	r31, 0x01	; 1
    163c:	d7 01       	movw	r26, r14
    163e:	01 90       	ld	r0, Z+
    1640:	0d 92       	st	X+, r0
    1642:	8a 95       	dec	r24
    1644:	e1 f7       	brne	.-8      	; 0x163e <_ZN5menue4drawEv+0x1a0>
    1646:	8b e0       	ldi	r24, 0x0B	; 11
    1648:	8e 8b       	std	Y+22, r24	; 0x16
    164a:	0c e0       	ldi	r16, 0x0C	; 12
    164c:	10 e0       	ldi	r17, 0x00	; 0
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+2*charsize,6*charhighte);}
    164e:	fe 01       	movw	r30, r28
    1650:	e1 0f       	add	r30, r17
    1652:	f1 1d       	adc	r31, r1
    1654:	20 e3       	ldi	r18, 0x30	; 48
    1656:	40 2f       	mov	r20, r16
    1658:	62 81       	ldd	r22, Z+2	; 0x02
    165a:	8f 89       	ldd	r24, Y+23	; 0x17
    165c:	98 8d       	ldd	r25, Y+24	; 0x18
    165e:	21 d9       	rcall	.-3518   	; 0x8a2 <_ZN7Display9draw_ASCIEhhh>
    1660:	1f 5f       	subi	r17, 0xFF	; 255
    1662:	0a 5f       	subi	r16, 0xFA	; 250
    1664:	8e 89       	ldd	r24, Y+22	; 0x16
    1666:	18 17       	cp	r17, r24
    1668:	90 f3       	brcs	.-28     	; 0x164e <_ZN5menue4drawEv+0x1b0>
		oled->draw_ASCI('>',0*charsize,(posy+2)*charhighte);
    166a:	2d a1       	ldd	r18, Y+37	; 0x25
    166c:	22 0f       	add	r18, r18
    166e:	22 0f       	add	r18, r18
    1670:	22 0f       	add	r18, r18
    1672:	20 5f       	subi	r18, 0xF0	; 240
    1674:	40 e0       	ldi	r20, 0x00	; 0
    1676:	6e e3       	ldi	r22, 0x3E	; 62
    1678:	8f 89       	ldd	r24, Y+23	; 0x17
    167a:	98 8d       	ldd	r25, Y+24	; 0x18
    167c:	12 d9       	rcall	.-3548   	; 0x8a2 <_ZN7Display9draw_ASCIEhhh>
		oled->clearFrame();
	}

	//send the frame to the display
	void send(){
		oled->sendFrame();	
    167e:	8f 89       	ldd	r24, Y+23	; 0x17
    1680:	98 8d       	ldd	r25, Y+24	; 0x18
    1682:	71 d8       	rcall	.-3870   	; 0x766 <_ZN7Display9sendFrameEv>
    1684:	04 c0       	rjmp	.+8      	; 0x168e <_ZN5menue4drawEv+0x1f0>
		return 0;
	}
	
	//drawfunktion
	virtual void draw(){
		oled->clearFrame();
    1686:	10 e5       	ldi	r17, 0x50	; 80
    1688:	c1 2c       	mov	r12, r1
    168a:	d1 2c       	mov	r13, r1
    168c:	5c cf       	rjmp	.-328    	; 0x1546 <_ZN5menue4drawEv+0xa8>
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+2*charsize,5*charhighte);}
		buffersize=sprintf(buffer,"Display aus");
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+2*charsize,6*charhighte);}
		oled->draw_ASCI('>',0*charsize,(posy+2)*charhighte);
		send();
	}
    168e:	df 91       	pop	r29
    1690:	cf 91       	pop	r28
    1692:	1f 91       	pop	r17
    1694:	0f 91       	pop	r16
    1696:	ff 90       	pop	r15
    1698:	ef 90       	pop	r14
    169a:	df 90       	pop	r13
    169c:	cf 90       	pop	r12
    169e:	08 95       	ret

000016a0 <_ZN5tacho4drawEv>:
		}
		return 0;
	}

	//Anzeige schalten
	void draw(){
    16a0:	af 92       	push	r10
    16a2:	bf 92       	push	r11
    16a4:	cf 92       	push	r12
    16a6:	df 92       	push	r13
    16a8:	ef 92       	push	r14
    16aa:	ff 92       	push	r15
    16ac:	0f 93       	push	r16
    16ae:	1f 93       	push	r17
    16b0:	cf 93       	push	r28
    16b2:	df 93       	push	r29
    16b4:	ec 01       	movw	r28, r24
		return 0;
	}
	
	//drawfunktion
	virtual void draw(){
		oled->clearFrame();
    16b6:	8f 89       	ldd	r24, Y+23	; 0x17
    16b8:	98 8d       	ldd	r25, Y+24	; 0x18
    16ba:	0e 94 39 03 	call	0x672	; 0x672 <_ZN7Display10clearFrameEv>
				for(uint8_t i=((SSD1306_WIDTH/charsize)-buffersize);i<(SSD1306_WIDTH/charsize);i++){
					oled->draw_ASCI(buffer[i-((SSD1306_WIDTH/charsize)-buffersize)],i*charsize,0);
				}
				break;
			case 2:	//standard Header fuer fast alle Pages
				buffersize=sprintf(buffer,"Bat.: %i%%",Batteriestatus());
    16be:	7f de       	rcall	.-770    	; 0x13be <_Z14Batteriestatusv>
    16c0:	5e 01       	movw	r10, r28
    16c2:	22 e0       	ldi	r18, 0x02	; 2
    16c4:	a2 0e       	add	r10, r18
    16c6:	b1 1c       	adc	r11, r1
    16c8:	28 2f       	mov	r18, r24
    16ca:	08 2e       	mov	r0, r24
    16cc:	00 0c       	add	r0, r0
    16ce:	33 0b       	sbc	r19, r19
    16d0:	3f 93       	push	r19
    16d2:	8f 93       	push	r24
    16d4:	84 e6       	ldi	r24, 0x64	; 100
    16d6:	91 e0       	ldi	r25, 0x01	; 1
    16d8:	9f 93       	push	r25
    16da:	8f 93       	push	r24
    16dc:	bf 92       	push	r11
    16de:	af 92       	push	r10
    16e0:	0e 94 62 2a 	call	0x54c4	; 0x54c4 <sprintf>
    16e4:	8e 8b       	std	Y+22, r24	; 0x16
				for(uint8_t i=((SSD1306_WIDTH/charsize)-buffersize);i<(SSD1306_WIDTH/charsize);i++){
    16e6:	95 e1       	ldi	r25, 0x15	; 21
    16e8:	09 2f       	mov	r16, r25
    16ea:	08 1b       	sub	r16, r24
    16ec:	0f 90       	pop	r0
    16ee:	0f 90       	pop	r0
    16f0:	0f 90       	pop	r0
    16f2:	0f 90       	pop	r0
    16f4:	0f 90       	pop	r0
    16f6:	0f 90       	pop	r0
    16f8:	05 31       	cpi	r16, 0x15	; 21
    16fa:	08 f0       	brcs	.+2      	; 0x16fe <_ZN5tacho4drawEv+0x5e>
    16fc:	c5 c1       	rjmp	.+906    	; 0x1a88 <_ZN5tacho4drawEv+0x3e8>
    16fe:	e0 2e       	mov	r14, r16
    1700:	ee 0c       	add	r14, r14
    1702:	e0 0e       	add	r14, r16
    1704:	1e 2d       	mov	r17, r14
    1706:	11 0f       	add	r17, r17
					oled->draw_ASCI(buffer[i-((SSD1306_WIDTH/charsize)-buffersize)],i*charsize,0);
    1708:	8e 89       	ldd	r24, Y+22	; 0x16
    170a:	fe 01       	movw	r30, r28
    170c:	e0 0f       	add	r30, r16
    170e:	f1 1d       	adc	r31, r1
    1710:	e8 0f       	add	r30, r24
    1712:	f1 1d       	adc	r31, r1
    1714:	73 97       	sbiw	r30, 0x13	; 19
    1716:	20 e0       	ldi	r18, 0x00	; 0
    1718:	41 2f       	mov	r20, r17
    171a:	60 81       	ld	r22, Z
    171c:	8f 89       	ldd	r24, Y+23	; 0x17
    171e:	98 8d       	ldd	r25, Y+24	; 0x18
    1720:	c0 d8       	rcall	.-3712   	; 0x8a2 <_ZN7Display9draw_ASCIEhhh>
					oled->draw_ASCI(buffer[i-((SSD1306_WIDTH/charsize)-buffersize)],i*charsize,0);
				}
				break;
			case 2:	//standard Header fuer fast alle Pages
				buffersize=sprintf(buffer,"Bat.: %i%%",Batteriestatus());
				for(uint8_t i=((SSD1306_WIDTH/charsize)-buffersize);i<(SSD1306_WIDTH/charsize);i++){
    1722:	0f 5f       	subi	r16, 0xFF	; 255
    1724:	1a 5f       	subi	r17, 0xFA	; 250
    1726:	05 31       	cpi	r16, 0x15	; 21
    1728:	79 f7       	brne	.-34     	; 0x1708 <_ZN5tacho4drawEv+0x68>
    172a:	ae c1       	rjmp	.+860    	; 0x1a88 <_ZN5tacho4drawEv+0x3e8>
	}
	
	//draw bottom and overload it
	void bottom(){
		for(uint8_t i=0;i<8;i++){
			oled->draw_ASCI(rtc->msg_dat[i],i*charsize+(SSD1306_WIDTH-bitsderrtc*charsize),7*charhighte);
    172c:	e9 8d       	ldd	r30, Y+25	; 0x19
    172e:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1730:	ec 0d       	add	r30, r12
    1732:	fd 1d       	adc	r31, r13
    1734:	28 e3       	ldi	r18, 0x38	; 56
    1736:	41 2f       	mov	r20, r17
    1738:	60 85       	ldd	r22, Z+8	; 0x08
    173a:	8f 89       	ldd	r24, Y+23	; 0x17
    173c:	98 8d       	ldd	r25, Y+24	; 0x18
    173e:	b1 d8       	rcall	.-3742   	; 0x8a2 <_ZN7Display9draw_ASCIEhhh>
    1740:	3f ef       	ldi	r19, 0xFF	; 255
    1742:	c3 1a       	sub	r12, r19
    1744:	d3 0a       	sbc	r13, r19
    1746:	1a 5f       	subi	r17, 0xFA	; 250
		}
	}
	
	//draw bottom and overload it
	void bottom(){
		for(uint8_t i=0;i<8;i++){
    1748:	10 38       	cpi	r17, 0x80	; 128
    174a:	81 f7       	brne	.-32     	; 0x172c <_ZN5tacho4drawEv+0x8c>
		monitor::draw();
		header(2);
		bottom();

		//Rahmen zeichnen
		oled->drawHLine(0,SSD1306_HEIGHT-9,SSD1306_WIDTH);
    174c:	20 e8       	ldi	r18, 0x80	; 128
    174e:	47 e3       	ldi	r20, 0x37	; 55
    1750:	60 e0       	ldi	r22, 0x00	; 0
    1752:	8f 89       	ldd	r24, Y+23	; 0x17
    1754:	98 8d       	ldd	r25, Y+24	; 0x18
    1756:	8b d8       	rcall	.-3818   	; 0x86e <_ZN7Display9drawHLineEhhh>
		oled->drawHLine(0,numbersmalhight-1,SSD1306_WIDTH/2+5);
    1758:	25 e4       	ldi	r18, 0x45	; 69
    175a:	4f e0       	ldi	r20, 0x0F	; 15
    175c:	60 e0       	ldi	r22, 0x00	; 0
    175e:	8f 89       	ldd	r24, Y+23	; 0x17
    1760:	98 8d       	ldd	r25, Y+24	; 0x18
    1762:	85 d8       	rcall	.-3830   	; 0x86e <_ZN7Display9drawHLineEhhh>
		oled->drawHLine(SSD1306_WIDTH/2+5,charhighte-1,SSD1306_WIDTH/2-5);
    1764:	2b e3       	ldi	r18, 0x3B	; 59
    1766:	47 e0       	ldi	r20, 0x07	; 7
    1768:	65 e4       	ldi	r22, 0x45	; 69
    176a:	8f 89       	ldd	r24, Y+23	; 0x17
    176c:	98 8d       	ldd	r25, Y+24	; 0x18
    176e:	7f d8       	rcall	.-3842   	; 0x86e <_ZN7Display9drawHLineEhhh>
		oled->drawVLine(SSD1306_WIDTH/2+5,0,numbersmalhight);
    1770:	20 e1       	ldi	r18, 0x10	; 16
    1772:	40 e0       	ldi	r20, 0x00	; 0
    1774:	65 e4       	ldi	r22, 0x45	; 69
    1776:	8f 89       	ldd	r24, Y+23	; 0x17
    1778:	98 8d       	ldd	r25, Y+24	; 0x18
    177a:	5f d8       	rcall	.-3906   	; 0x83a <_ZN7Display9drawVLineEhhh>
		oled->drawHLine(SSD1306_WIDTH-4*numbersmalsize-1,5*charhighte-1,4*numbersmalsize+1);
    177c:	21 e4       	ldi	r18, 0x41	; 65
    177e:	47 e2       	ldi	r20, 0x27	; 39
    1780:	6f e3       	ldi	r22, 0x3F	; 63
    1782:	8f 89       	ldd	r24, Y+23	; 0x17
    1784:	98 8d       	ldd	r25, Y+24	; 0x18
    1786:	73 d8       	rcall	.-3866   	; 0x86e <_ZN7Display9drawHLineEhhh>
		oled->drawVLine(SSD1306_WIDTH-4*numbersmalsize-1,numbersmalhight,SSD1306_HEIGHT-numbersmalhight);
    1788:	20 e3       	ldi	r18, 0x30	; 48
    178a:	40 e1       	ldi	r20, 0x10	; 16
    178c:	6f e3       	ldi	r22, 0x3F	; 63
    178e:	8f 89       	ldd	r24, Y+23	; 0x17
    1790:	98 8d       	ldd	r25, Y+24	; 0x18
    1792:	53 d8       	rcall	.-3930   	; 0x83a <_ZN7Display9drawVLineEhhh>
		oled->drawHLine(SSD1306_WIDTH-4*numbersmalsize-1,3*charhighte,4*numbersmalsize+1);
    1794:	21 e4       	ldi	r18, 0x41	; 65
    1796:	48 e1       	ldi	r20, 0x18	; 24
    1798:	6f e3       	ldi	r22, 0x3F	; 63
    179a:	8f 89       	ldd	r24, Y+23	; 0x17
    179c:	98 8d       	ldd	r25, Y+24	; 0x18
    179e:	67 d8       	rcall	.-3890   	; 0x86e <_ZN7Display9drawHLineEhhh>

		//lesbare Uhr
		oled->draw_number16x16(rtc->msg_uhr[0]-'0',0*numbersmalsize,0*charhighte);
    17a0:	e9 8d       	ldd	r30, Y+25	; 0x19
    17a2:	fa 8d       	ldd	r31, Y+26	; 0x1a
    17a4:	60 81       	ld	r22, Z
    17a6:	60 53       	subi	r22, 0x30	; 48
    17a8:	20 e0       	ldi	r18, 0x00	; 0
    17aa:	40 e0       	ldi	r20, 0x00	; 0
    17ac:	8f 89       	ldd	r24, Y+23	; 0x17
    17ae:	98 8d       	ldd	r25, Y+24	; 0x18
    17b0:	c2 d8       	rcall	.-3708   	; 0x936 <_ZN7Display16draw_number16x16Ehhh>
		oled->draw_number16x16(rtc->msg_uhr[1]-'0',1*numbersmalsize,0*charhighte);
    17b2:	e9 8d       	ldd	r30, Y+25	; 0x19
    17b4:	fa 8d       	ldd	r31, Y+26	; 0x1a
    17b6:	61 81       	ldd	r22, Z+1	; 0x01
    17b8:	60 53       	subi	r22, 0x30	; 48
    17ba:	20 e0       	ldi	r18, 0x00	; 0
    17bc:	40 e1       	ldi	r20, 0x10	; 16
    17be:	8f 89       	ldd	r24, Y+23	; 0x17
    17c0:	98 8d       	ldd	r25, Y+24	; 0x18
    17c2:	b9 d8       	rcall	.-3726   	; 0x936 <_ZN7Display16draw_number16x16Ehhh>
		oled->draw_number16x16(rtc->msg_uhr[3]-'0',2.33*numbersmalsize,0*charhighte);
    17c4:	e9 8d       	ldd	r30, Y+25	; 0x19
    17c6:	fa 8d       	ldd	r31, Y+26	; 0x1a
    17c8:	63 81       	ldd	r22, Z+3	; 0x03
    17ca:	60 53       	subi	r22, 0x30	; 48
    17cc:	20 e0       	ldi	r18, 0x00	; 0
    17ce:	45 e2       	ldi	r20, 0x25	; 37
    17d0:	8f 89       	ldd	r24, Y+23	; 0x17
    17d2:	98 8d       	ldd	r25, Y+24	; 0x18
    17d4:	b0 d8       	rcall	.-3744   	; 0x936 <_ZN7Display16draw_number16x16Ehhh>
		oled->draw_number16x16(rtc->msg_uhr[4]-'0',3.33*numbersmalsize,0*charhighte);
    17d6:	e9 8d       	ldd	r30, Y+25	; 0x19
    17d8:	fa 8d       	ldd	r31, Y+26	; 0x1a
    17da:	64 81       	ldd	r22, Z+4	; 0x04
    17dc:	60 53       	subi	r22, 0x30	; 48
    17de:	20 e0       	ldi	r18, 0x00	; 0
    17e0:	45 e3       	ldi	r20, 0x35	; 53
    17e2:	8f 89       	ldd	r24, Y+23	; 0x17
    17e4:	98 8d       	ldd	r25, Y+24	; 0x18
    17e6:	a7 d8       	rcall	.-3762   	; 0x936 <_ZN7Display16draw_number16x16Ehhh>

		//Ausgabe der Geschwidigkeit
		buffersize=sprintf(buffer,"%3.1f",geschw);
    17e8:	80 91 d5 02 	lds	r24, 0x02D5
    17ec:	8f 93       	push	r24
    17ee:	80 91 d4 02 	lds	r24, 0x02D4
    17f2:	8f 93       	push	r24
    17f4:	80 91 d3 02 	lds	r24, 0x02D3
    17f8:	8f 93       	push	r24
    17fa:	80 91 d2 02 	lds	r24, 0x02D2
    17fe:	8f 93       	push	r24
    1800:	8f e6       	ldi	r24, 0x6F	; 111
    1802:	91 e0       	ldi	r25, 0x01	; 1
    1804:	9f 93       	push	r25
    1806:	8f 93       	push	r24
    1808:	bf 92       	push	r11
    180a:	af 92       	push	r10
    180c:	0e 94 62 2a 	call	0x54c4	; 0x54c4 <sprintf>
    1810:	8e 8b       	std	Y+22, r24	; 0x16
		for(uint8_t i=((SSD1306_WIDTH/numbersmalsize)-buffersize);i<((SSD1306_WIDTH/numbersmalsize));i++){
    1812:	98 e0       	ldi	r25, 0x08	; 8
    1814:	09 2f       	mov	r16, r25
    1816:	08 1b       	sub	r16, r24
    1818:	8d b7       	in	r24, 0x3d	; 61
    181a:	9e b7       	in	r25, 0x3e	; 62
    181c:	08 96       	adiw	r24, 0x08	; 8
    181e:	0f b6       	in	r0, 0x3f	; 63
    1820:	f8 94       	cli
    1822:	9e bf       	out	0x3e, r25	; 62
    1824:	0f be       	out	0x3f, r0	; 63
    1826:	8d bf       	out	0x3d, r24	; 61
    1828:	08 30       	cpi	r16, 0x08	; 8
    182a:	e8 f4       	brcc	.+58     	; 0x1866 <_ZN5tacho4drawEv+0x1c6>
    182c:	10 2f       	mov	r17, r16
    182e:	12 95       	swap	r17
    1830:	10 7f       	andi	r17, 0xF0	; 240
			if(buffer[i-((SSD1306_WIDTH/numbersmalsize)-buffersize)]=='.'){
    1832:	8e 89       	ldd	r24, Y+22	; 0x16
    1834:	fe 01       	movw	r30, r28
    1836:	e0 0f       	add	r30, r16
    1838:	f1 1d       	adc	r31, r1
    183a:	e8 0f       	add	r30, r24
    183c:	f1 1d       	adc	r31, r1
    183e:	36 97       	sbiw	r30, 0x06	; 6
    1840:	60 81       	ld	r22, Z
    1842:	6e 32       	cpi	r22, 0x2E	; 46
    1844:	31 f4       	brne	.+12     	; 0x1852 <_ZN5tacho4drawEv+0x1b2>
				oled->draw_ASCI(buffer[i-((SSD1306_WIDTH/numbersmalsize)-buffersize)],i*numbersmalsize,4*charhighte);
    1846:	20 e2       	ldi	r18, 0x20	; 32
    1848:	41 2f       	mov	r20, r17
    184a:	8f 89       	ldd	r24, Y+23	; 0x17
    184c:	98 8d       	ldd	r25, Y+24	; 0x18
    184e:	29 d8       	rcall	.-4014   	; 0x8a2 <_ZN7Display9draw_ASCIEhhh>
    1850:	06 c0       	rjmp	.+12     	; 0x185e <_ZN5tacho4drawEv+0x1be>
			}
			else{
				oled->draw_number16x16(buffer[i-((SSD1306_WIDTH/numbersmalsize)-buffersize)]-'0',i*numbersmalsize,3*charhighte);
    1852:	60 53       	subi	r22, 0x30	; 48
    1854:	28 e1       	ldi	r18, 0x18	; 24
    1856:	41 2f       	mov	r20, r17
    1858:	8f 89       	ldd	r24, Y+23	; 0x17
    185a:	98 8d       	ldd	r25, Y+24	; 0x18
    185c:	6c d8       	rcall	.-3880   	; 0x936 <_ZN7Display16draw_number16x16Ehhh>
		oled->draw_number16x16(rtc->msg_uhr[3]-'0',2.33*numbersmalsize,0*charhighte);
		oled->draw_number16x16(rtc->msg_uhr[4]-'0',3.33*numbersmalsize,0*charhighte);

		//Ausgabe der Geschwidigkeit
		buffersize=sprintf(buffer,"%3.1f",geschw);
		for(uint8_t i=((SSD1306_WIDTH/numbersmalsize)-buffersize);i<((SSD1306_WIDTH/numbersmalsize));i++){
    185e:	0f 5f       	subi	r16, 0xFF	; 255
    1860:	10 5f       	subi	r17, 0xF0	; 240
    1862:	08 30       	cpi	r16, 0x08	; 8
    1864:	31 f7       	brne	.-52     	; 0x1832 <_ZN5tacho4drawEv+0x192>
		//Nadel erst, wenn Kompass implementiert
		//Anzeige der Richtung als Alternative
		//anzeige_kleinenadel(31,31+8,angle);

		//anzeige der gesammtstrecke
		buffersize=sprintf(buffer,"%.3fkm",strecke/1000);
    1866:	20 e0       	ldi	r18, 0x00	; 0
    1868:	30 e0       	ldi	r19, 0x00	; 0
    186a:	4a e7       	ldi	r20, 0x7A	; 122
    186c:	54 e4       	ldi	r21, 0x44	; 68
    186e:	60 91 ce 02 	lds	r22, 0x02CE
    1872:	70 91 cf 02 	lds	r23, 0x02CF
    1876:	80 91 d0 02 	lds	r24, 0x02D0
    187a:	90 91 d1 02 	lds	r25, 0x02D1
    187e:	0e 94 f5 20 	call	0x41ea	; 0x41ea <__divsf3>
    1882:	9f 93       	push	r25
    1884:	8f 93       	push	r24
    1886:	7f 93       	push	r23
    1888:	6f 93       	push	r22
    188a:	85 e7       	ldi	r24, 0x75	; 117
    188c:	91 e0       	ldi	r25, 0x01	; 1
    188e:	9f 93       	push	r25
    1890:	8f 93       	push	r24
    1892:	bf 92       	push	r11
    1894:	af 92       	push	r10
    1896:	0e 94 62 2a 	call	0x54c4	; 0x54c4 <sprintf>
    189a:	8e 8b       	std	Y+22, r24	; 0x16
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+70,2*charhighte);}
    189c:	2d b7       	in	r18, 0x3d	; 61
    189e:	3e b7       	in	r19, 0x3e	; 62
    18a0:	28 5f       	subi	r18, 0xF8	; 248
    18a2:	3f 4f       	sbci	r19, 0xFF	; 255
    18a4:	0f b6       	in	r0, 0x3f	; 63
    18a6:	f8 94       	cli
    18a8:	3e bf       	out	0x3e, r19	; 62
    18aa:	0f be       	out	0x3f, r0	; 63
    18ac:	2d bf       	out	0x3d, r18	; 61
    18ae:	88 23       	and	r24, r24
    18b0:	89 f0       	breq	.+34     	; 0x18d4 <_ZN5tacho4drawEv+0x234>
    18b2:	16 e4       	ldi	r17, 0x46	; 70
    18b4:	f1 2c       	mov	r15, r1
    18b6:	fe 01       	movw	r30, r28
    18b8:	ef 0d       	add	r30, r15
    18ba:	f1 1d       	adc	r31, r1
    18bc:	20 e1       	ldi	r18, 0x10	; 16
    18be:	41 2f       	mov	r20, r17
    18c0:	62 81       	ldd	r22, Z+2	; 0x02
    18c2:	8f 89       	ldd	r24, Y+23	; 0x17
    18c4:	98 8d       	ldd	r25, Y+24	; 0x18
    18c6:	0e 94 51 04 	call	0x8a2	; 0x8a2 <_ZN7Display9draw_ASCIEhhh>
    18ca:	f3 94       	inc	r15
    18cc:	1a 5f       	subi	r17, 0xFA	; 250
    18ce:	8e 89       	ldd	r24, Y+22	; 0x16
    18d0:	f8 16       	cp	r15, r24
    18d2:	88 f3       	brcs	.-30     	; 0x18b6 <_ZN5tacho4drawEv+0x216>

		//anzeige der max geschwindigkeit
		buffersize=sprintf(buffer,"%.1fkm/h",maxgeschw);
    18d4:	80 91 cd 02 	lds	r24, 0x02CD
    18d8:	8f 93       	push	r24
    18da:	80 91 cc 02 	lds	r24, 0x02CC
    18de:	8f 93       	push	r24
    18e0:	80 91 cb 02 	lds	r24, 0x02CB
    18e4:	8f 93       	push	r24
    18e6:	80 91 ca 02 	lds	r24, 0x02CA
    18ea:	8f 93       	push	r24
    18ec:	8c e7       	ldi	r24, 0x7C	; 124
    18ee:	91 e0       	ldi	r25, 0x01	; 1
    18f0:	9f 93       	push	r25
    18f2:	8f 93       	push	r24
    18f4:	bf 92       	push	r11
    18f6:	af 92       	push	r10
    18f8:	0e 94 62 2a 	call	0x54c4	; 0x54c4 <sprintf>
    18fc:	8e 8b       	std	Y+22, r24	; 0x16
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+70,5*charhighte);}
    18fe:	2d b7       	in	r18, 0x3d	; 61
    1900:	3e b7       	in	r19, 0x3e	; 62
    1902:	28 5f       	subi	r18, 0xF8	; 248
    1904:	3f 4f       	sbci	r19, 0xFF	; 255
    1906:	0f b6       	in	r0, 0x3f	; 63
    1908:	f8 94       	cli
    190a:	3e bf       	out	0x3e, r19	; 62
    190c:	0f be       	out	0x3f, r0	; 63
    190e:	2d bf       	out	0x3d, r18	; 61
    1910:	88 23       	and	r24, r24
    1912:	89 f0       	breq	.+34     	; 0x1936 <_ZN5tacho4drawEv+0x296>
    1914:	16 e4       	ldi	r17, 0x46	; 70
    1916:	f1 2c       	mov	r15, r1
    1918:	fe 01       	movw	r30, r28
    191a:	ef 0d       	add	r30, r15
    191c:	f1 1d       	adc	r31, r1
    191e:	28 e2       	ldi	r18, 0x28	; 40
    1920:	41 2f       	mov	r20, r17
    1922:	62 81       	ldd	r22, Z+2	; 0x02
    1924:	8f 89       	ldd	r24, Y+23	; 0x17
    1926:	98 8d       	ldd	r25, Y+24	; 0x18
    1928:	0e 94 51 04 	call	0x8a2	; 0x8a2 <_ZN7Display9draw_ASCIEhhh>
    192c:	f3 94       	inc	r15
    192e:	1a 5f       	subi	r17, 0xFA	; 250
    1930:	8e 89       	ldd	r24, Y+22	; 0x16
    1932:	f8 16       	cp	r15, r24
    1934:	88 f3       	brcs	.-30     	; 0x1918 <_ZN5tacho4drawEv+0x278>

		//anzeige der Fahrtzeit
		buffersize=sprintf(buffer,"%02i:%02i:%02i",uint8_t(Fahrtzeit/3600),uint8_t(Fahrtzeit/60),uint8_t(Fahrtzeit%60));
    1936:	c0 90 c6 02 	lds	r12, 0x02C6
    193a:	d0 90 c7 02 	lds	r13, 0x02C7
    193e:	e0 90 c8 02 	lds	r14, 0x02C8
    1942:	f0 90 c9 02 	lds	r15, 0x02C9
    1946:	c7 01       	movw	r24, r14
    1948:	b6 01       	movw	r22, r12
    194a:	2c e3       	ldi	r18, 0x3C	; 60
    194c:	30 e0       	ldi	r19, 0x00	; 0
    194e:	40 e0       	ldi	r20, 0x00	; 0
    1950:	50 e0       	ldi	r21, 0x00	; 0
    1952:	0e 94 e4 27 	call	0x4fc8	; 0x4fc8 <__udivmodsi4>
    1956:	1f 92       	push	r1
    1958:	6f 93       	push	r22
    195a:	1f 92       	push	r1
    195c:	2f 93       	push	r18
    195e:	c7 01       	movw	r24, r14
    1960:	b6 01       	movw	r22, r12
    1962:	20 e1       	ldi	r18, 0x10	; 16
    1964:	3e e0       	ldi	r19, 0x0E	; 14
    1966:	40 e0       	ldi	r20, 0x00	; 0
    1968:	50 e0       	ldi	r21, 0x00	; 0
    196a:	0e 94 e4 27 	call	0x4fc8	; 0x4fc8 <__udivmodsi4>
    196e:	1f 92       	push	r1
    1970:	2f 93       	push	r18
    1972:	85 e8       	ldi	r24, 0x85	; 133
    1974:	91 e0       	ldi	r25, 0x01	; 1
    1976:	9f 93       	push	r25
    1978:	8f 93       	push	r24
    197a:	bf 92       	push	r11
    197c:	af 92       	push	r10
    197e:	0e 94 62 2a 	call	0x54c4	; 0x54c4 <sprintf>
    1982:	8e 8b       	std	Y+22, r24	; 0x16
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+70,6*charhighte);}
    1984:	2d b7       	in	r18, 0x3d	; 61
    1986:	3e b7       	in	r19, 0x3e	; 62
    1988:	26 5f       	subi	r18, 0xF6	; 246
    198a:	3f 4f       	sbci	r19, 0xFF	; 255
    198c:	0f b6       	in	r0, 0x3f	; 63
    198e:	f8 94       	cli
    1990:	3e bf       	out	0x3e, r19	; 62
    1992:	0f be       	out	0x3f, r0	; 63
    1994:	2d bf       	out	0x3d, r18	; 61
    1996:	88 23       	and	r24, r24
    1998:	89 f0       	breq	.+34     	; 0x19bc <_ZN5tacho4drawEv+0x31c>
    199a:	16 e4       	ldi	r17, 0x46	; 70
    199c:	f1 2c       	mov	r15, r1
    199e:	fe 01       	movw	r30, r28
    19a0:	ef 0d       	add	r30, r15
    19a2:	f1 1d       	adc	r31, r1
    19a4:	20 e3       	ldi	r18, 0x30	; 48
    19a6:	41 2f       	mov	r20, r17
    19a8:	62 81       	ldd	r22, Z+2	; 0x02
    19aa:	8f 89       	ldd	r24, Y+23	; 0x17
    19ac:	98 8d       	ldd	r25, Y+24	; 0x18
    19ae:	0e 94 51 04 	call	0x8a2	; 0x8a2 <_ZN7Display9draw_ASCIEhhh>
    19b2:	f3 94       	inc	r15
    19b4:	1a 5f       	subi	r17, 0xFA	; 250
    19b6:	8e 89       	ldd	r24, Y+22	; 0x16
    19b8:	f8 16       	cp	r15, r24
    19ba:	88 f3       	brcs	.-30     	; 0x199e <_ZN5tacho4drawEv+0x2fe>
		
		//anzeige der durschschnittsgeschw
		if (Fahrtzeit==0)
    19bc:	60 91 c6 02 	lds	r22, 0x02C6
    19c0:	70 91 c7 02 	lds	r23, 0x02C7
    19c4:	80 91 c8 02 	lds	r24, 0x02C8
    19c8:	90 91 c9 02 	lds	r25, 0x02C9
    19cc:	61 15       	cp	r22, r1
    19ce:	71 05       	cpc	r23, r1
    19d0:	81 05       	cpc	r24, r1
    19d2:	91 05       	cpc	r25, r1
    19d4:	b1 f4       	brne	.+44     	; 0x1a02 <_ZN5tacho4drawEv+0x362>
		{
			buffersize=sprintf(buffer,"%.1fkm/h",0.0);
    19d6:	1f 92       	push	r1
    19d8:	1f 92       	push	r1
    19da:	1f 92       	push	r1
    19dc:	1f 92       	push	r1
    19de:	8c e7       	ldi	r24, 0x7C	; 124
    19e0:	91 e0       	ldi	r25, 0x01	; 1
    19e2:	9f 93       	push	r25
    19e4:	8f 93       	push	r24
    19e6:	bf 92       	push	r11
    19e8:	af 92       	push	r10
    19ea:	0e 94 62 2a 	call	0x54c4	; 0x54c4 <sprintf>
    19ee:	8e 8b       	std	Y+22, r24	; 0x16
    19f0:	8d b7       	in	r24, 0x3d	; 61
    19f2:	9e b7       	in	r25, 0x3e	; 62
    19f4:	08 96       	adiw	r24, 0x08	; 8
    19f6:	0f b6       	in	r0, 0x3f	; 63
    19f8:	f8 94       	cli
    19fa:	9e bf       	out	0x3e, r25	; 62
    19fc:	0f be       	out	0x3f, r0	; 63
    19fe:	8d bf       	out	0x3d, r24	; 61
    1a00:	2a c0       	rjmp	.+84     	; 0x1a56 <_ZN5tacho4drawEv+0x3b6>
		}
		else {
			buffersize=sprintf(buffer,"%.1fkm/h",(strecke/Fahrtzeit)*3.6);
    1a02:	0e 94 8e 21 	call	0x431c	; 0x431c <__floatunsisf>
    1a06:	9b 01       	movw	r18, r22
    1a08:	ac 01       	movw	r20, r24
    1a0a:	60 91 ce 02 	lds	r22, 0x02CE
    1a0e:	70 91 cf 02 	lds	r23, 0x02CF
    1a12:	80 91 d0 02 	lds	r24, 0x02D0
    1a16:	90 91 d1 02 	lds	r25, 0x02D1
    1a1a:	0e 94 f5 20 	call	0x41ea	; 0x41ea <__divsf3>
    1a1e:	26 e6       	ldi	r18, 0x66	; 102
    1a20:	36 e6       	ldi	r19, 0x66	; 102
    1a22:	46 e6       	ldi	r20, 0x66	; 102
    1a24:	50 e4       	ldi	r21, 0x40	; 64
    1a26:	0e 94 a9 22 	call	0x4552	; 0x4552 <__mulsf3>
    1a2a:	9f 93       	push	r25
    1a2c:	8f 93       	push	r24
    1a2e:	7f 93       	push	r23
    1a30:	6f 93       	push	r22
    1a32:	8c e7       	ldi	r24, 0x7C	; 124
    1a34:	91 e0       	ldi	r25, 0x01	; 1
    1a36:	9f 93       	push	r25
    1a38:	8f 93       	push	r24
    1a3a:	bf 92       	push	r11
    1a3c:	af 92       	push	r10
    1a3e:	0e 94 62 2a 	call	0x54c4	; 0x54c4 <sprintf>
    1a42:	8e 8b       	std	Y+22, r24	; 0x16
    1a44:	2d b7       	in	r18, 0x3d	; 61
    1a46:	3e b7       	in	r19, 0x3e	; 62
    1a48:	28 5f       	subi	r18, 0xF8	; 248
    1a4a:	3f 4f       	sbci	r19, 0xFF	; 255
    1a4c:	0f b6       	in	r0, 0x3f	; 63
    1a4e:	f8 94       	cli
    1a50:	3e bf       	out	0x3e, r19	; 62
    1a52:	0f be       	out	0x3f, r0	; 63
    1a54:	2d bf       	out	0x3d, r18	; 61
		}
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+75,1*charhighte);}
    1a56:	8e 89       	ldd	r24, Y+22	; 0x16
    1a58:	88 23       	and	r24, r24
    1a5a:	89 f0       	breq	.+34     	; 0x1a7e <_ZN5tacho4drawEv+0x3de>
    1a5c:	0b e4       	ldi	r16, 0x4B	; 75
    1a5e:	10 e0       	ldi	r17, 0x00	; 0
    1a60:	fe 01       	movw	r30, r28
    1a62:	e1 0f       	add	r30, r17
    1a64:	f1 1d       	adc	r31, r1
    1a66:	28 e0       	ldi	r18, 0x08	; 8
    1a68:	40 2f       	mov	r20, r16
    1a6a:	62 81       	ldd	r22, Z+2	; 0x02
    1a6c:	8f 89       	ldd	r24, Y+23	; 0x17
    1a6e:	98 8d       	ldd	r25, Y+24	; 0x18
    1a70:	0e 94 51 04 	call	0x8a2	; 0x8a2 <_ZN7Display9draw_ASCIEhhh>
    1a74:	1f 5f       	subi	r17, 0xFF	; 255
    1a76:	0a 5f       	subi	r16, 0xFA	; 250
    1a78:	8e 89       	ldd	r24, Y+22	; 0x16
    1a7a:	18 17       	cp	r17, r24
    1a7c:	88 f3       	brcs	.-30     	; 0x1a60 <_ZN5tacho4drawEv+0x3c0>
		oled->clearFrame();
	}

	//send the frame to the display
	void send(){
		oled->sendFrame();	
    1a7e:	8f 89       	ldd	r24, Y+23	; 0x17
    1a80:	98 8d       	ldd	r25, Y+24	; 0x18
    1a82:	0e 94 b3 03 	call	0x766	; 0x766 <_ZN7Display9sendFrameEv>
    1a86:	04 c0       	rjmp	.+8      	; 0x1a90 <_ZN5tacho4drawEv+0x3f0>
		}
		return 0;
	}

	//Anzeige schalten
	void draw(){
    1a88:	10 e5       	ldi	r17, 0x50	; 80
    1a8a:	c1 2c       	mov	r12, r1
    1a8c:	d1 2c       	mov	r13, r1
    1a8e:	4e ce       	rjmp	.-868    	; 0x172c <_ZN5tacho4drawEv+0x8c>
			buffersize=sprintf(buffer,"%.1fkm/h",(strecke/Fahrtzeit)*3.6);
		}
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+75,1*charhighte);}

		send();
	}
    1a90:	df 91       	pop	r29
    1a92:	cf 91       	pop	r28
    1a94:	1f 91       	pop	r17
    1a96:	0f 91       	pop	r16
    1a98:	ff 90       	pop	r15
    1a9a:	ef 90       	pop	r14
    1a9c:	df 90       	pop	r13
    1a9e:	cf 90       	pop	r12
    1aa0:	bf 90       	pop	r11
    1aa2:	af 90       	pop	r10
    1aa4:	08 95       	ret

00001aa6 <_ZN3uhr4drawEv>:
		}
	return 0;
	}

	//anzeige vorbereiten
	void draw()
    1aa6:	ef 92       	push	r14
    1aa8:	ff 92       	push	r15
    1aaa:	0f 93       	push	r16
    1aac:	1f 93       	push	r17
    1aae:	cf 93       	push	r28
    1ab0:	df 93       	push	r29
    1ab2:	ec 01       	movw	r28, r24
		return 0;
	}
	
	//drawfunktion
	virtual void draw(){
		oled->clearFrame();
    1ab4:	8f 89       	ldd	r24, Y+23	; 0x17
    1ab6:	98 8d       	ldd	r25, Y+24	; 0x18
    1ab8:	0e 94 39 03 	call	0x672	; 0x672 <_ZN7Display10clearFrameEv>
    1abc:	11 e4       	ldi	r17, 0x41	; 65
    1abe:	e1 2c       	mov	r14, r1
    1ac0:	f1 2c       	mov	r15, r1
				for(uint8_t i=((SSD1306_WIDTH/charsize)-buffersize);i<(SSD1306_WIDTH/charsize);i++){
					oled->draw_ASCI(buffer[i-((SSD1306_WIDTH/charsize)-buffersize)],i*charsize,0);
				}
				break;
			case 1:	//standard Header fuer fast alle Pages
				for(uint8_t i=0;i<(bitsderrtc-3);i++){oled->draw_ASCI(rtc->msg_uhr[i],65+i*charsize,0*charhighte);}
    1ac2:	e9 8d       	ldd	r30, Y+25	; 0x19
    1ac4:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1ac6:	ee 0d       	add	r30, r14
    1ac8:	ff 1d       	adc	r31, r15
    1aca:	20 e0       	ldi	r18, 0x00	; 0
    1acc:	41 2f       	mov	r20, r17
    1ace:	60 81       	ld	r22, Z
    1ad0:	8f 89       	ldd	r24, Y+23	; 0x17
    1ad2:	98 8d       	ldd	r25, Y+24	; 0x18
    1ad4:	0e 94 51 04 	call	0x8a2	; 0x8a2 <_ZN7Display9draw_ASCIEhhh>
    1ad8:	8f ef       	ldi	r24, 0xFF	; 255
    1ada:	e8 1a       	sub	r14, r24
    1adc:	f8 0a       	sbc	r15, r24
    1ade:	1a 5f       	subi	r17, 0xFA	; 250
    1ae0:	1f 35       	cpi	r17, 0x5F	; 95
    1ae2:	79 f7       	brne	.-34     	; 0x1ac2 <_ZN3uhr4drawEv+0x1c>
				buffersize=sprintf(buffer,"%i%%",Batteriestatus());
    1ae4:	6c dc       	rcall	.-1832   	; 0x13be <_Z14Batteriestatusv>
    1ae6:	28 2f       	mov	r18, r24
    1ae8:	08 2e       	mov	r0, r24
    1aea:	00 0c       	add	r0, r0
    1aec:	33 0b       	sbc	r19, r19
    1aee:	3f 93       	push	r19
    1af0:	8f 93       	push	r24
    1af2:	8a e6       	ldi	r24, 0x6A	; 106
    1af4:	91 e0       	ldi	r25, 0x01	; 1
    1af6:	9f 93       	push	r25
    1af8:	8f 93       	push	r24
    1afa:	ce 01       	movw	r24, r28
    1afc:	02 96       	adiw	r24, 0x02	; 2
    1afe:	9f 93       	push	r25
    1b00:	8f 93       	push	r24
    1b02:	0e 94 62 2a 	call	0x54c4	; 0x54c4 <sprintf>
    1b06:	8e 8b       	std	Y+22, r24	; 0x16
				for(uint8_t i=((SSD1306_WIDTH/charsize)-buffersize);i<(SSD1306_WIDTH/charsize);i++){
    1b08:	15 e1       	ldi	r17, 0x15	; 21
    1b0a:	18 1b       	sub	r17, r24
    1b0c:	0f 90       	pop	r0
    1b0e:	0f 90       	pop	r0
    1b10:	0f 90       	pop	r0
    1b12:	0f 90       	pop	r0
    1b14:	0f 90       	pop	r0
    1b16:	0f 90       	pop	r0
    1b18:	15 31       	cpi	r17, 0x15	; 21
    1b1a:	08 f0       	brcs	.+2      	; 0x1b1e <_ZN3uhr4drawEv+0x78>
    1b1c:	5f c0       	rjmp	.+190    	; 0x1bdc <_ZN3uhr4drawEv+0x136>
    1b1e:	01 2f       	mov	r16, r17
    1b20:	00 0f       	add	r16, r16
    1b22:	01 0f       	add	r16, r17
    1b24:	00 0f       	add	r16, r16
					oled->draw_ASCI(buffer[i-((SSD1306_WIDTH/charsize)-buffersize)],i*charsize,0);
    1b26:	8e 89       	ldd	r24, Y+22	; 0x16
    1b28:	fe 01       	movw	r30, r28
    1b2a:	e1 0f       	add	r30, r17
    1b2c:	f1 1d       	adc	r31, r1
    1b2e:	e8 0f       	add	r30, r24
    1b30:	f1 1d       	adc	r31, r1
    1b32:	73 97       	sbiw	r30, 0x13	; 19
    1b34:	20 e0       	ldi	r18, 0x00	; 0
    1b36:	40 2f       	mov	r20, r16
    1b38:	60 81       	ld	r22, Z
    1b3a:	8f 89       	ldd	r24, Y+23	; 0x17
    1b3c:	98 8d       	ldd	r25, Y+24	; 0x18
    1b3e:	0e 94 51 04 	call	0x8a2	; 0x8a2 <_ZN7Display9draw_ASCIEhhh>
				}
				break;
			case 1:	//standard Header fuer fast alle Pages
				for(uint8_t i=0;i<(bitsderrtc-3);i++){oled->draw_ASCI(rtc->msg_uhr[i],65+i*charsize,0*charhighte);}
				buffersize=sprintf(buffer,"%i%%",Batteriestatus());
				for(uint8_t i=((SSD1306_WIDTH/charsize)-buffersize);i<(SSD1306_WIDTH/charsize);i++){
    1b42:	1f 5f       	subi	r17, 0xFF	; 255
    1b44:	0a 5f       	subi	r16, 0xFA	; 250
    1b46:	15 31       	cpi	r17, 0x15	; 21
    1b48:	71 f7       	brne	.-36     	; 0x1b26 <_ZN3uhr4drawEv+0x80>
    1b4a:	48 c0       	rjmp	.+144    	; 0x1bdc <_ZN3uhr4drawEv+0x136>
				for(uint8_t i=0;i<8;i++){
					oled->draw_ASCI(rtc->msg_dat[i],5+i*charsize,7*charhighte);
				}
				break;
			case 2:
				for(uint8_t i=0;i<bitsderrtc;i++){oled->draw_ASCI(rtc->msg_dat[i],65+i*charsize,7*charhighte);}
    1b4c:	e9 8d       	ldd	r30, Y+25	; 0x19
    1b4e:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1b50:	ee 0d       	add	r30, r14
    1b52:	ff 1d       	adc	r31, r15
    1b54:	28 e3       	ldi	r18, 0x38	; 56
    1b56:	41 2f       	mov	r20, r17
    1b58:	60 85       	ldd	r22, Z+8	; 0x08
    1b5a:	8f 89       	ldd	r24, Y+23	; 0x17
    1b5c:	98 8d       	ldd	r25, Y+24	; 0x18
    1b5e:	0e 94 51 04 	call	0x8a2	; 0x8a2 <_ZN7Display9draw_ASCIEhhh>
    1b62:	8f ef       	ldi	r24, 0xFF	; 255
    1b64:	e8 1a       	sub	r14, r24
    1b66:	f8 0a       	sbc	r15, r24
    1b68:	1a 5f       	subi	r17, 0xFA	; 250
    1b6a:	11 37       	cpi	r17, 0x71	; 113
    1b6c:	79 f7       	brne	.-34     	; 0x1b4c <_ZN3uhr4drawEv+0xa6>
	{
		monitor::draw();
		header(1);
		bottom(2);

		oled->analog(rtc->Stunden,rtc->Minuten,rtc->Sekunden,Zeiger);
    1b6e:	e9 8d       	ldd	r30, Y+25	; 0x19
    1b70:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1b72:	09 a5       	ldd	r16, Y+41	; 0x29
    1b74:	22 89       	ldd	r18, Z+18	; 0x12
    1b76:	41 89       	ldd	r20, Z+17	; 0x11
    1b78:	60 89       	ldd	r22, Z+16	; 0x10
    1b7a:	8f 89       	ldd	r24, Y+23	; 0x17
    1b7c:	98 8d       	ldd	r25, Y+24	; 0x18
    1b7e:	0e 94 15 05 	call	0xa2a	; 0xa2a <_ZN7Display6analogEhhhh>
		//draw large number
		oled->draw_number16x16(rtc->msg_uhr[0]-'0',70,1.66*charhighte);
    1b82:	e9 8d       	ldd	r30, Y+25	; 0x19
    1b84:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1b86:	60 81       	ld	r22, Z
    1b88:	60 53       	subi	r22, 0x30	; 48
    1b8a:	2d e0       	ldi	r18, 0x0D	; 13
    1b8c:	46 e4       	ldi	r20, 0x46	; 70
    1b8e:	8f 89       	ldd	r24, Y+23	; 0x17
    1b90:	98 8d       	ldd	r25, Y+24	; 0x18
    1b92:	0e 94 9b 04 	call	0x936	; 0x936 <_ZN7Display16draw_number16x16Ehhh>
		oled->draw_number16x16(rtc->msg_uhr[1]-'0',70+numbersmalsize,1.66*charhighte);
    1b96:	e9 8d       	ldd	r30, Y+25	; 0x19
    1b98:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1b9a:	61 81       	ldd	r22, Z+1	; 0x01
    1b9c:	60 53       	subi	r22, 0x30	; 48
    1b9e:	2d e0       	ldi	r18, 0x0D	; 13
    1ba0:	46 e5       	ldi	r20, 0x56	; 86
    1ba2:	8f 89       	ldd	r24, Y+23	; 0x17
    1ba4:	98 8d       	ldd	r25, Y+24	; 0x18
    1ba6:	0e 94 9b 04 	call	0x936	; 0x936 <_ZN7Display16draw_number16x16Ehhh>
		oled->draw_number16x16(rtc->msg_uhr[3]-'0',70,2.33*charhighte+numbersmalhight);
    1baa:	e9 8d       	ldd	r30, Y+25	; 0x19
    1bac:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1bae:	63 81       	ldd	r22, Z+3	; 0x03
    1bb0:	60 53       	subi	r22, 0x30	; 48
    1bb2:	22 e2       	ldi	r18, 0x22	; 34
    1bb4:	46 e4       	ldi	r20, 0x46	; 70
    1bb6:	8f 89       	ldd	r24, Y+23	; 0x17
    1bb8:	98 8d       	ldd	r25, Y+24	; 0x18
    1bba:	0e 94 9b 04 	call	0x936	; 0x936 <_ZN7Display16draw_number16x16Ehhh>
		oled->draw_number16x16(rtc->msg_uhr[4]-'0',70+numbersmalsize,2.33*charhighte+numbersmalhight);
    1bbe:	e9 8d       	ldd	r30, Y+25	; 0x19
    1bc0:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1bc2:	64 81       	ldd	r22, Z+4	; 0x04
    1bc4:	60 53       	subi	r22, 0x30	; 48
    1bc6:	22 e2       	ldi	r18, 0x22	; 34
    1bc8:	46 e5       	ldi	r20, 0x56	; 86
    1bca:	8f 89       	ldd	r24, Y+23	; 0x17
    1bcc:	98 8d       	ldd	r25, Y+24	; 0x18
    1bce:	0e 94 9b 04 	call	0x936	; 0x936 <_ZN7Display16draw_number16x16Ehhh>
		oled->clearFrame();
	}

	//send the frame to the display
	void send(){
		oled->sendFrame();	
    1bd2:	8f 89       	ldd	r24, Y+23	; 0x17
    1bd4:	98 8d       	ldd	r25, Y+24	; 0x18
    1bd6:	0e 94 b3 03 	call	0x766	; 0x766 <_ZN7Display9sendFrameEv>
    1bda:	04 c0       	rjmp	.+8      	; 0x1be4 <_ZN3uhr4drawEv+0x13e>
		return 0;
	}
	
	//drawfunktion
	virtual void draw(){
		oled->clearFrame();
    1bdc:	11 e4       	ldi	r17, 0x41	; 65
    1bde:	e1 2c       	mov	r14, r1
    1be0:	f1 2c       	mov	r15, r1
    1be2:	b4 cf       	rjmp	.-152    	; 0x1b4c <_ZN3uhr4drawEv+0xa6>
		oled->draw_number16x16(rtc->msg_uhr[1]-'0',70+numbersmalsize,1.66*charhighte);
		oled->draw_number16x16(rtc->msg_uhr[3]-'0',70,2.33*charhighte+numbersmalhight);
		oled->draw_number16x16(rtc->msg_uhr[4]-'0',70+numbersmalsize,2.33*charhighte+numbersmalhight);

		send();
	}
    1be4:	df 91       	pop	r29
    1be6:	cf 91       	pop	r28
    1be8:	1f 91       	pop	r17
    1bea:	0f 91       	pop	r16
    1bec:	ff 90       	pop	r15
    1bee:	ef 90       	pop	r14
    1bf0:	08 95       	ret

00001bf2 <_ZN7wandern4drawEv>:
			EEPROM_Write(EEJAHR,rtc->Jahr);
		}
		return 0;
	}
	
	void draw(){
    1bf2:	cf 92       	push	r12
    1bf4:	df 92       	push	r13
    1bf6:	ef 92       	push	r14
    1bf8:	ff 92       	push	r15
    1bfa:	0f 93       	push	r16
    1bfc:	1f 93       	push	r17
    1bfe:	cf 93       	push	r28
    1c00:	df 93       	push	r29
    1c02:	ec 01       	movw	r28, r24
		return 0;
	}
	
	//drawfunktion
	virtual void draw(){
		oled->clearFrame();
    1c04:	8f 89       	ldd	r24, Y+23	; 0x17
    1c06:	98 8d       	ldd	r25, Y+24	; 0x18
    1c08:	0e 94 39 03 	call	0x672	; 0x672 <_ZN7Display10clearFrameEv>
    1c0c:	10 e0       	ldi	r17, 0x00	; 0
    1c0e:	e1 2c       	mov	r14, r1
    1c10:	f1 2c       	mov	r15, r1
	}
	
	//draw header and overload it
	void header(){
		for(uint8_t i=0;i<8;i++){
			oled->draw_ASCI(rtc->msg_uhr[i],i*charsize,0);
    1c12:	e9 8d       	ldd	r30, Y+25	; 0x19
    1c14:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1c16:	ee 0d       	add	r30, r14
    1c18:	ff 1d       	adc	r31, r15
    1c1a:	20 e0       	ldi	r18, 0x00	; 0
    1c1c:	41 2f       	mov	r20, r17
    1c1e:	60 81       	ld	r22, Z
    1c20:	8f 89       	ldd	r24, Y+23	; 0x17
    1c22:	98 8d       	ldd	r25, Y+24	; 0x18
    1c24:	0e 94 51 04 	call	0x8a2	; 0x8a2 <_ZN7Display9draw_ASCIEhhh>
    1c28:	2f ef       	ldi	r18, 0xFF	; 255
    1c2a:	e2 1a       	sub	r14, r18
    1c2c:	f2 0a       	sbc	r15, r18
    1c2e:	1a 5f       	subi	r17, 0xFA	; 250
		return &name[0];
	}
	
	//draw header and overload it
	void header(){
		for(uint8_t i=0;i<8;i++){
    1c30:	10 33       	cpi	r17, 0x30	; 48
    1c32:	79 f7       	brne	.-34     	; 0x1c12 <_ZN7wandern4drawEv+0x20>
			oled->draw_ASCI(rtc->msg_uhr[i],i*charsize,0);
		}
		buffersize=sprintf(buffer,"Bat: %i%%",Batteriestatus());
    1c34:	c4 db       	rcall	.-2168   	; 0x13be <_Z14Batteriestatusv>
    1c36:	7e 01       	movw	r14, r28
    1c38:	32 e0       	ldi	r19, 0x02	; 2
    1c3a:	e3 0e       	add	r14, r19
    1c3c:	f1 1c       	adc	r15, r1
    1c3e:	28 2f       	mov	r18, r24
    1c40:	08 2e       	mov	r0, r24
    1c42:	00 0c       	add	r0, r0
    1c44:	33 0b       	sbc	r19, r19
    1c46:	3f 93       	push	r19
    1c48:	8f 93       	push	r24
    1c4a:	82 e3       	ldi	r24, 0x32	; 50
    1c4c:	91 e0       	ldi	r25, 0x01	; 1
    1c4e:	9f 93       	push	r25
    1c50:	8f 93       	push	r24
    1c52:	ff 92       	push	r15
    1c54:	ef 92       	push	r14
    1c56:	0e 94 62 2a 	call	0x54c4	; 0x54c4 <sprintf>
    1c5a:	8e 8b       	std	Y+22, r24	; 0x16
		for(uint8_t i=((SSD1306_WIDTH/charsize)-buffersize);i<(SSD1306_WIDTH/charsize);i++){
    1c5c:	15 e1       	ldi	r17, 0x15	; 21
    1c5e:	18 1b       	sub	r17, r24
    1c60:	0f 90       	pop	r0
    1c62:	0f 90       	pop	r0
    1c64:	0f 90       	pop	r0
    1c66:	0f 90       	pop	r0
    1c68:	0f 90       	pop	r0
    1c6a:	0f 90       	pop	r0
    1c6c:	15 31       	cpi	r17, 0x15	; 21
    1c6e:	08 f0       	brcs	.+2      	; 0x1c72 <_ZN7wandern4drawEv+0x80>
    1c70:	fd c0       	rjmp	.+506    	; 0x1e6c <_ZN7wandern4drawEv+0x27a>
    1c72:	01 2f       	mov	r16, r17
    1c74:	00 0f       	add	r16, r16
    1c76:	01 0f       	add	r16, r17
    1c78:	00 0f       	add	r16, r16
			oled->draw_ASCI(buffer[i-((SSD1306_WIDTH/charsize)-buffersize)],i*charsize,0);
    1c7a:	8e 89       	ldd	r24, Y+22	; 0x16
    1c7c:	fe 01       	movw	r30, r28
    1c7e:	e1 0f       	add	r30, r17
    1c80:	f1 1d       	adc	r31, r1
    1c82:	e8 0f       	add	r30, r24
    1c84:	f1 1d       	adc	r31, r1
    1c86:	73 97       	sbiw	r30, 0x13	; 19
    1c88:	20 e0       	ldi	r18, 0x00	; 0
    1c8a:	40 2f       	mov	r20, r16
    1c8c:	60 81       	ld	r22, Z
    1c8e:	8f 89       	ldd	r24, Y+23	; 0x17
    1c90:	98 8d       	ldd	r25, Y+24	; 0x18
    1c92:	0e 94 51 04 	call	0x8a2	; 0x8a2 <_ZN7Display9draw_ASCIEhhh>
	void header(){
		for(uint8_t i=0;i<8;i++){
			oled->draw_ASCI(rtc->msg_uhr[i],i*charsize,0);
		}
		buffersize=sprintf(buffer,"Bat: %i%%",Batteriestatus());
		for(uint8_t i=((SSD1306_WIDTH/charsize)-buffersize);i<(SSD1306_WIDTH/charsize);i++){
    1c96:	1f 5f       	subi	r17, 0xFF	; 255
    1c98:	0a 5f       	subi	r16, 0xFA	; 250
    1c9a:	15 31       	cpi	r17, 0x15	; 21
    1c9c:	71 f7       	brne	.-36     	; 0x1c7a <_ZN7wandern4drawEv+0x88>
    1c9e:	e6 c0       	rjmp	.+460    	; 0x1e6c <_ZN7wandern4drawEv+0x27a>
	}
	
	//draw bottom and overload it
	void bottom(){
		for(uint8_t i=0;i<8;i++){
			oled->draw_ASCI(rtc->msg_dat[i],i*charsize+(SSD1306_WIDTH-bitsderrtc*charsize),7*charhighte);
    1ca0:	e9 8d       	ldd	r30, Y+25	; 0x19
    1ca2:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1ca4:	ec 0d       	add	r30, r12
    1ca6:	fd 1d       	adc	r31, r13
    1ca8:	28 e3       	ldi	r18, 0x38	; 56
    1caa:	41 2f       	mov	r20, r17
    1cac:	60 85       	ldd	r22, Z+8	; 0x08
    1cae:	8f 89       	ldd	r24, Y+23	; 0x17
    1cb0:	98 8d       	ldd	r25, Y+24	; 0x18
    1cb2:	0e 94 51 04 	call	0x8a2	; 0x8a2 <_ZN7Display9draw_ASCIEhhh>
    1cb6:	8f ef       	ldi	r24, 0xFF	; 255
    1cb8:	c8 1a       	sub	r12, r24
    1cba:	d8 0a       	sbc	r13, r24
    1cbc:	1a 5f       	subi	r17, 0xFA	; 250
		}
	}
	
	//draw bottom and overload it
	void bottom(){
		for(uint8_t i=0;i<8;i++){
    1cbe:	10 38       	cpi	r17, 0x80	; 128
    1cc0:	79 f7       	brne	.-34     	; 0x1ca0 <_ZN7wandern4drawEv+0xae>
		buffersize=sprintf(buffer,"Data: %c%c%c%c%c",gpsdata[0],gpsdata[1],gpsdata[2],gpsdata[3],gpsdata[4]);
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize,3*charhighte);}
		*/
		
		//Latitude
		buffersize=sprintf(buffer,"Lat: %.7f",lat);
    1cc2:	80 91 e7 02 	lds	r24, 0x02E7
    1cc6:	8f 93       	push	r24
    1cc8:	80 91 e6 02 	lds	r24, 0x02E6
    1ccc:	8f 93       	push	r24
    1cce:	80 91 e5 02 	lds	r24, 0x02E5
    1cd2:	8f 93       	push	r24
    1cd4:	80 91 e4 02 	lds	r24, 0x02E4
    1cd8:	8f 93       	push	r24
    1cda:	84 e9       	ldi	r24, 0x94	; 148
    1cdc:	91 e0       	ldi	r25, 0x01	; 1
    1cde:	9f 93       	push	r25
    1ce0:	8f 93       	push	r24
    1ce2:	ff 92       	push	r15
    1ce4:	ef 92       	push	r14
    1ce6:	0e 94 62 2a 	call	0x54c4	; 0x54c4 <sprintf>
    1cea:	8e 8b       	std	Y+22, r24	; 0x16
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize,2*charhighte);}
    1cec:	2d b7       	in	r18, 0x3d	; 61
    1cee:	3e b7       	in	r19, 0x3e	; 62
    1cf0:	28 5f       	subi	r18, 0xF8	; 248
    1cf2:	3f 4f       	sbci	r19, 0xFF	; 255
    1cf4:	0f b6       	in	r0, 0x3f	; 63
    1cf6:	f8 94       	cli
    1cf8:	3e bf       	out	0x3e, r19	; 62
    1cfa:	0f be       	out	0x3f, r0	; 63
    1cfc:	2d bf       	out	0x3d, r18	; 61
    1cfe:	88 23       	and	r24, r24
    1d00:	89 f0       	breq	.+34     	; 0x1d24 <_ZN7wandern4drawEv+0x132>
    1d02:	00 e0       	ldi	r16, 0x00	; 0
    1d04:	10 e0       	ldi	r17, 0x00	; 0
    1d06:	fe 01       	movw	r30, r28
    1d08:	e1 0f       	add	r30, r17
    1d0a:	f1 1d       	adc	r31, r1
    1d0c:	20 e1       	ldi	r18, 0x10	; 16
    1d0e:	40 2f       	mov	r20, r16
    1d10:	62 81       	ldd	r22, Z+2	; 0x02
    1d12:	8f 89       	ldd	r24, Y+23	; 0x17
    1d14:	98 8d       	ldd	r25, Y+24	; 0x18
    1d16:	0e 94 51 04 	call	0x8a2	; 0x8a2 <_ZN7Display9draw_ASCIEhhh>
    1d1a:	1f 5f       	subi	r17, 0xFF	; 255
    1d1c:	0a 5f       	subi	r16, 0xFA	; 250
    1d1e:	8e 89       	ldd	r24, Y+22	; 0x16
    1d20:	18 17       	cp	r17, r24
    1d22:	88 f3       	brcs	.-30     	; 0x1d06 <_ZN7wandern4drawEv+0x114>
			
		//Longitude
		buffersize=sprintf(buffer,"Lon: %.7f",lon);
    1d24:	80 91 e3 02 	lds	r24, 0x02E3
    1d28:	8f 93       	push	r24
    1d2a:	80 91 e2 02 	lds	r24, 0x02E2
    1d2e:	8f 93       	push	r24
    1d30:	80 91 e1 02 	lds	r24, 0x02E1
    1d34:	8f 93       	push	r24
    1d36:	80 91 e0 02 	lds	r24, 0x02E0
    1d3a:	8f 93       	push	r24
    1d3c:	8e e9       	ldi	r24, 0x9E	; 158
    1d3e:	91 e0       	ldi	r25, 0x01	; 1
    1d40:	9f 93       	push	r25
    1d42:	8f 93       	push	r24
    1d44:	ff 92       	push	r15
    1d46:	ef 92       	push	r14
    1d48:	0e 94 62 2a 	call	0x54c4	; 0x54c4 <sprintf>
    1d4c:	8e 8b       	std	Y+22, r24	; 0x16
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize,3*charhighte);}
    1d4e:	2d b7       	in	r18, 0x3d	; 61
    1d50:	3e b7       	in	r19, 0x3e	; 62
    1d52:	28 5f       	subi	r18, 0xF8	; 248
    1d54:	3f 4f       	sbci	r19, 0xFF	; 255
    1d56:	0f b6       	in	r0, 0x3f	; 63
    1d58:	f8 94       	cli
    1d5a:	3e bf       	out	0x3e, r19	; 62
    1d5c:	0f be       	out	0x3f, r0	; 63
    1d5e:	2d bf       	out	0x3d, r18	; 61
    1d60:	88 23       	and	r24, r24
    1d62:	89 f0       	breq	.+34     	; 0x1d86 <_ZN7wandern4drawEv+0x194>
    1d64:	00 e0       	ldi	r16, 0x00	; 0
    1d66:	10 e0       	ldi	r17, 0x00	; 0
    1d68:	fe 01       	movw	r30, r28
    1d6a:	e1 0f       	add	r30, r17
    1d6c:	f1 1d       	adc	r31, r1
    1d6e:	28 e1       	ldi	r18, 0x18	; 24
    1d70:	40 2f       	mov	r20, r16
    1d72:	62 81       	ldd	r22, Z+2	; 0x02
    1d74:	8f 89       	ldd	r24, Y+23	; 0x17
    1d76:	98 8d       	ldd	r25, Y+24	; 0x18
    1d78:	0e 94 51 04 	call	0x8a2	; 0x8a2 <_ZN7Display9draw_ASCIEhhh>
    1d7c:	1f 5f       	subi	r17, 0xFF	; 255
    1d7e:	0a 5f       	subi	r16, 0xFA	; 250
    1d80:	8e 89       	ldd	r24, Y+22	; 0x16
    1d82:	18 17       	cp	r17, r24
    1d84:	88 f3       	brcs	.-30     	; 0x1d68 <_ZN7wandern4drawEv+0x176>
			
		//Speed
		buffersize=sprintf(buffer,"Spe: %.4f",gpsspeed);
    1d86:	80 91 df 02 	lds	r24, 0x02DF
    1d8a:	8f 93       	push	r24
    1d8c:	80 91 de 02 	lds	r24, 0x02DE
    1d90:	8f 93       	push	r24
    1d92:	80 91 dd 02 	lds	r24, 0x02DD
    1d96:	8f 93       	push	r24
    1d98:	80 91 dc 02 	lds	r24, 0x02DC
    1d9c:	8f 93       	push	r24
    1d9e:	88 ea       	ldi	r24, 0xA8	; 168
    1da0:	91 e0       	ldi	r25, 0x01	; 1
    1da2:	9f 93       	push	r25
    1da4:	8f 93       	push	r24
    1da6:	ff 92       	push	r15
    1da8:	ef 92       	push	r14
    1daa:	0e 94 62 2a 	call	0x54c4	; 0x54c4 <sprintf>
    1dae:	8e 8b       	std	Y+22, r24	; 0x16
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize,4*charhighte);}
    1db0:	2d b7       	in	r18, 0x3d	; 61
    1db2:	3e b7       	in	r19, 0x3e	; 62
    1db4:	28 5f       	subi	r18, 0xF8	; 248
    1db6:	3f 4f       	sbci	r19, 0xFF	; 255
    1db8:	0f b6       	in	r0, 0x3f	; 63
    1dba:	f8 94       	cli
    1dbc:	3e bf       	out	0x3e, r19	; 62
    1dbe:	0f be       	out	0x3f, r0	; 63
    1dc0:	2d bf       	out	0x3d, r18	; 61
    1dc2:	88 23       	and	r24, r24
    1dc4:	89 f0       	breq	.+34     	; 0x1de8 <_ZN7wandern4drawEv+0x1f6>
    1dc6:	00 e0       	ldi	r16, 0x00	; 0
    1dc8:	10 e0       	ldi	r17, 0x00	; 0
    1dca:	fe 01       	movw	r30, r28
    1dcc:	e1 0f       	add	r30, r17
    1dce:	f1 1d       	adc	r31, r1
    1dd0:	20 e2       	ldi	r18, 0x20	; 32
    1dd2:	40 2f       	mov	r20, r16
    1dd4:	62 81       	ldd	r22, Z+2	; 0x02
    1dd6:	8f 89       	ldd	r24, Y+23	; 0x17
    1dd8:	98 8d       	ldd	r25, Y+24	; 0x18
    1dda:	0e 94 51 04 	call	0x8a2	; 0x8a2 <_ZN7Display9draw_ASCIEhhh>
    1dde:	1f 5f       	subi	r17, 0xFF	; 255
    1de0:	0a 5f       	subi	r16, 0xFA	; 250
    1de2:	8e 89       	ldd	r24, Y+22	; 0x16
    1de4:	18 17       	cp	r17, r24
    1de6:	88 f3       	brcs	.-30     	; 0x1dca <_ZN7wandern4drawEv+0x1d8>
		/*
		for(uint8_t i=18;i<35;i++){oled->draw_ASCI(gpsdata[i],(i-18)*charsize,4*charhighte);}
			*/
		//gpstime
		buffersize=sprintf(buffer,"%02i:%02i:%02i %02i.%02i.%02i",gpsstunde,gpsminute,gpssekunde,gpsTag,gpsMonat,gpsJahr);
    1de8:	80 91 d6 02 	lds	r24, 0x02D6
    1dec:	1f 92       	push	r1
    1dee:	8f 93       	push	r24
    1df0:	80 91 d7 02 	lds	r24, 0x02D7
    1df4:	1f 92       	push	r1
    1df6:	8f 93       	push	r24
    1df8:	80 91 d8 02 	lds	r24, 0x02D8
    1dfc:	1f 92       	push	r1
    1dfe:	8f 93       	push	r24
    1e00:	80 91 d9 02 	lds	r24, 0x02D9
    1e04:	1f 92       	push	r1
    1e06:	8f 93       	push	r24
    1e08:	80 91 da 02 	lds	r24, 0x02DA
    1e0c:	1f 92       	push	r1
    1e0e:	8f 93       	push	r24
    1e10:	80 91 db 02 	lds	r24, 0x02DB
    1e14:	1f 92       	push	r1
    1e16:	8f 93       	push	r24
    1e18:	82 eb       	ldi	r24, 0xB2	; 178
    1e1a:	91 e0       	ldi	r25, 0x01	; 1
    1e1c:	9f 93       	push	r25
    1e1e:	8f 93       	push	r24
    1e20:	ff 92       	push	r15
    1e22:	ef 92       	push	r14
    1e24:	0e 94 62 2a 	call	0x54c4	; 0x54c4 <sprintf>
    1e28:	8e 8b       	std	Y+22, r24	; 0x16
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize,5*charhighte);}
    1e2a:	2d b7       	in	r18, 0x3d	; 61
    1e2c:	3e b7       	in	r19, 0x3e	; 62
    1e2e:	20 5f       	subi	r18, 0xF0	; 240
    1e30:	3f 4f       	sbci	r19, 0xFF	; 255
    1e32:	0f b6       	in	r0, 0x3f	; 63
    1e34:	f8 94       	cli
    1e36:	3e bf       	out	0x3e, r19	; 62
    1e38:	0f be       	out	0x3f, r0	; 63
    1e3a:	2d bf       	out	0x3d, r18	; 61
    1e3c:	88 23       	and	r24, r24
    1e3e:	89 f0       	breq	.+34     	; 0x1e62 <_ZN7wandern4drawEv+0x270>
    1e40:	00 e0       	ldi	r16, 0x00	; 0
    1e42:	10 e0       	ldi	r17, 0x00	; 0
    1e44:	fe 01       	movw	r30, r28
    1e46:	e1 0f       	add	r30, r17
    1e48:	f1 1d       	adc	r31, r1
    1e4a:	28 e2       	ldi	r18, 0x28	; 40
    1e4c:	40 2f       	mov	r20, r16
    1e4e:	62 81       	ldd	r22, Z+2	; 0x02
    1e50:	8f 89       	ldd	r24, Y+23	; 0x17
    1e52:	98 8d       	ldd	r25, Y+24	; 0x18
    1e54:	0e 94 51 04 	call	0x8a2	; 0x8a2 <_ZN7Display9draw_ASCIEhhh>
    1e58:	1f 5f       	subi	r17, 0xFF	; 255
    1e5a:	0a 5f       	subi	r16, 0xFA	; 250
    1e5c:	8e 89       	ldd	r24, Y+22	; 0x16
    1e5e:	18 17       	cp	r17, r24
    1e60:	88 f3       	brcs	.-30     	; 0x1e44 <_ZN7wandern4drawEv+0x252>
		oled->clearFrame();
	}

	//send the frame to the display
	void send(){
		oled->sendFrame();	
    1e62:	8f 89       	ldd	r24, Y+23	; 0x17
    1e64:	98 8d       	ldd	r25, Y+24	; 0x18
    1e66:	0e 94 b3 03 	call	0x766	; 0x766 <_ZN7Display9sendFrameEv>
    1e6a:	04 c0       	rjmp	.+8      	; 0x1e74 <_ZN7wandern4drawEv+0x282>
		return 0;
	}
	
	//drawfunktion
	virtual void draw(){
		oled->clearFrame();
    1e6c:	10 e5       	ldi	r17, 0x50	; 80
    1e6e:	c1 2c       	mov	r12, r1
    1e70:	d1 2c       	mov	r13, r1
    1e72:	16 cf       	rjmp	.-468    	; 0x1ca0 <_ZN7wandern4drawEv+0xae>
		//gpstime
		buffersize=sprintf(buffer,"%02i:%02i:%02i %02i.%02i.%02i",gpsstunde,gpsminute,gpssekunde,gpsTag,gpsMonat,gpsJahr);
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize,5*charhighte);}
		
		send();	
	}
    1e74:	df 91       	pop	r29
    1e76:	cf 91       	pop	r28
    1e78:	1f 91       	pop	r17
    1e7a:	0f 91       	pop	r16
    1e7c:	ff 90       	pop	r15
    1e7e:	ef 90       	pop	r14
    1e80:	df 90       	pop	r13
    1e82:	cf 90       	pop	r12
    1e84:	08 95       	ret

00001e86 <_Z12EEPROM_Writejh>:

#ifndef EEPROM_H_
#define EEPROM_H_

void EEPROM_Write(uint16_t adresse, uint8_t data){
	cli();	//zur sicherheit interrupts ausschalten
    1e86:	f8 94       	cli
	while(EECR&(1<<EEPE));
    1e88:	f9 99       	sbic	0x1f, 1	; 31
    1e8a:	fe cf       	rjmp	.-4      	; 0x1e88 <_Z12EEPROM_Writejh+0x2>
	
	//schreibe adresse und data
	EEAR = adresse;
    1e8c:	92 bd       	out	0x22, r25	; 34
    1e8e:	81 bd       	out	0x21, r24	; 33
	EEDR = data;
    1e90:	60 bd       	out	0x20, r22	; 32
	//fuehre schreiben aus
	EECR |= (1<<EEMPE);
    1e92:	fa 9a       	sbi	0x1f, 2	; 31
	EECR |= (1<<EEPE);
    1e94:	f9 9a       	sbi	0x1f, 1	; 31
	
	sei();
    1e96:	78 94       	sei
    1e98:	08 95       	ret

00001e9a <_ZN7wandern11tastendruckEPh>:
				name[i] = ' ';
			}
		}
	}
	
	uint8_t tastendruck(uint8_t *tast){
    1e9a:	cf 93       	push	r28
    1e9c:	df 93       	push	r29
    1e9e:	ec 01       	movw	r28, r24
		if (*tast=='e')
    1ea0:	fb 01       	movw	r30, r22
    1ea2:	90 81       	ld	r25, Z
    1ea4:	95 36       	cpi	r25, 0x65	; 101
    1ea6:	09 f0       	breq	.+2      	; 0x1eaa <_ZN7wandern11tastendruckEPh+0x10>
    1ea8:	40 c0       	rjmp	.+128    	; 0x1f2a <_ZN7wandern11tastendruckEPh+0x90>
		{
			rtc->Stunden	= gpsstunde;
    1eaa:	e9 8d       	ldd	r30, Y+25	; 0x19
    1eac:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1eae:	80 91 db 02 	lds	r24, 0x02DB
    1eb2:	80 8b       	std	Z+16, r24	; 0x10
			rtc->Minuten	= gpsminute;
    1eb4:	e9 8d       	ldd	r30, Y+25	; 0x19
    1eb6:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1eb8:	80 91 da 02 	lds	r24, 0x02DA
    1ebc:	81 8b       	std	Z+17, r24	; 0x11
			rtc->Sekunden	= gpssekunde;
    1ebe:	e9 8d       	ldd	r30, Y+25	; 0x19
    1ec0:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1ec2:	80 91 d9 02 	lds	r24, 0x02D9
    1ec6:	82 8b       	std	Z+18, r24	; 0x12
			
			rtc->Tag		= gpsTag;
    1ec8:	e9 8d       	ldd	r30, Y+25	; 0x19
    1eca:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1ecc:	80 91 d8 02 	lds	r24, 0x02D8
    1ed0:	84 8b       	std	Z+20, r24	; 0x14
			rtc->Monat		= gpsMonat;
    1ed2:	e9 8d       	ldd	r30, Y+25	; 0x19
    1ed4:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1ed6:	80 91 d7 02 	lds	r24, 0x02D7
    1eda:	86 8b       	std	Z+22, r24	; 0x16
			rtc->Jahr		= gpsJahr;
    1edc:	e9 8d       	ldd	r30, Y+25	; 0x19
    1ede:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1ee0:	80 91 d6 02 	lds	r24, 0x02D6
    1ee4:	87 8b       	std	Z+23, r24	; 0x17
			rtc->ausgabedatumneu();
    1ee6:	89 8d       	ldd	r24, Y+25	; 0x19
    1ee8:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1eea:	0e 94 4b 1f 	call	0x3e96	; 0x3e96 <_ZN3RTC15ausgabedatumneuEv>
			//speichern der neuen Zeit im EEPROM
			EEPROM_Write(EEMINUTEN,rtc->Minuten);
    1eee:	e9 8d       	ldd	r30, Y+25	; 0x19
    1ef0:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1ef2:	61 89       	ldd	r22, Z+17	; 0x11
    1ef4:	80 e0       	ldi	r24, 0x00	; 0
    1ef6:	90 e0       	ldi	r25, 0x00	; 0
    1ef8:	c6 df       	rcall	.-116    	; 0x1e86 <_Z12EEPROM_Writejh>
			EEPROM_Write(EESTUNDEN,rtc->Stunden);
    1efa:	e9 8d       	ldd	r30, Y+25	; 0x19
    1efc:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1efe:	60 89       	ldd	r22, Z+16	; 0x10
    1f00:	81 e0       	ldi	r24, 0x01	; 1
    1f02:	90 e0       	ldi	r25, 0x00	; 0
    1f04:	c0 df       	rcall	.-128    	; 0x1e86 <_Z12EEPROM_Writejh>
			EEPROM_Write(EETAGE,rtc->Tag);
    1f06:	e9 8d       	ldd	r30, Y+25	; 0x19
    1f08:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1f0a:	64 89       	ldd	r22, Z+20	; 0x14
    1f0c:	82 e0       	ldi	r24, 0x02	; 2
    1f0e:	90 e0       	ldi	r25, 0x00	; 0
    1f10:	ba df       	rcall	.-140    	; 0x1e86 <_Z12EEPROM_Writejh>
			EEPROM_Write(EEMONAT,rtc->Monat);
    1f12:	e9 8d       	ldd	r30, Y+25	; 0x19
    1f14:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1f16:	66 89       	ldd	r22, Z+22	; 0x16
    1f18:	83 e0       	ldi	r24, 0x03	; 3
    1f1a:	90 e0       	ldi	r25, 0x00	; 0
    1f1c:	b4 df       	rcall	.-152    	; 0x1e86 <_Z12EEPROM_Writejh>
			EEPROM_Write(EEJAHR,rtc->Jahr);
    1f1e:	e9 8d       	ldd	r30, Y+25	; 0x19
    1f20:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1f22:	67 89       	ldd	r22, Z+23	; 0x17
    1f24:	84 e0       	ldi	r24, 0x04	; 4
    1f26:	90 e0       	ldi	r25, 0x00	; 0
    1f28:	ae df       	rcall	.-164    	; 0x1e86 <_Z12EEPROM_Writejh>
		}
		return 0;
	}
    1f2a:	80 e0       	ldi	r24, 0x00	; 0
    1f2c:	df 91       	pop	r29
    1f2e:	cf 91       	pop	r28
    1f30:	08 95       	ret

00001f32 <_Z11EEPROM_Readj>:
}

uint8_t EEPROM_Read(uint16_t adresse){
	cli();	//zur sicherheit interrupts ausschalten
    1f32:	f8 94       	cli
	while(EECR&(1<<EEPE));
    1f34:	f9 99       	sbic	0x1f, 1	; 31
    1f36:	fe cf       	rjmp	.-4      	; 0x1f34 <_Z11EEPROM_Readj+0x2>
	
	//schreibe adresse
	EEAR = adresse;
    1f38:	92 bd       	out	0x22, r25	; 34
    1f3a:	81 bd       	out	0x21, r24	; 33
	//fuehre lesen aus
	EECR |= (1<<EERE);
    1f3c:	f8 9a       	sbi	0x1f, 0	; 31
	
	sei();
    1f3e:	78 94       	sei
	return EEDR;
    1f40:	80 b5       	in	r24, 0x20	; 32
}
    1f42:	08 95       	ret

00001f44 <__vector_11>:
uint8_t FPS;

//schlechte variante der Uhreinstellung
void uhreinstellen();

ISR(TIMER2_OVF_vect){	//Vektor fuer die RTC
    1f44:	1f 92       	push	r1
    1f46:	0f 92       	push	r0
    1f48:	0f b6       	in	r0, 0x3f	; 63
    1f4a:	0f 92       	push	r0
    1f4c:	11 24       	eor	r1, r1
    1f4e:	0b b6       	in	r0, 0x3b	; 59
    1f50:	0f 92       	push	r0
    1f52:	8f 93       	push	r24
    1f54:	ef 93       	push	r30
    1f56:	ff 93       	push	r31
	//TCNT2=TIMER2RTCTIME;
	rtc.Sekunden++;
    1f58:	ea e3       	ldi	r30, 0x3A	; 58
    1f5a:	f8 e0       	ldi	r31, 0x08	; 8
    1f5c:	82 89       	ldd	r24, Z+18	; 0x12
    1f5e:	8f 5f       	subi	r24, 0xFF	; 255
    1f60:	82 8b       	std	Z+18, r24	; 0x12
	rtc.interupts|= (1<<sekundeninterupt);
    1f62:	80 8d       	ldd	r24, Z+24	; 0x18
    1f64:	82 60       	ori	r24, 0x02	; 2
    1f66:	80 8f       	std	Z+24, r24	; 0x18
	if (statusreg&(1<<powersavemode))
    1f68:	80 91 34 03 	lds	r24, 0x0334
    1f6c:	81 ff       	sbrs	r24, 1
    1f6e:	03 c0       	rjmp	.+6      	; 0x1f76 <__vector_11+0x32>
	{
		SMCR &= ~(1<<SE);
    1f70:	83 b7       	in	r24, 0x33	; 51
    1f72:	8e 7f       	andi	r24, 0xFE	; 254
    1f74:	83 bf       	out	0x33, r24	; 51
	}
}
    1f76:	ff 91       	pop	r31
    1f78:	ef 91       	pop	r30
    1f7a:	8f 91       	pop	r24
    1f7c:	0f 90       	pop	r0
    1f7e:	0b be       	out	0x3b, r0	; 59
    1f80:	0f 90       	pop	r0
    1f82:	0f be       	out	0x3f, r0	; 63
    1f84:	0f 90       	pop	r0
    1f86:	1f 90       	pop	r1
    1f88:	18 95       	reti

00001f8a <__vector_13>:

ISR(TIMER1_COMPA_vect){
    1f8a:	1f 92       	push	r1
    1f8c:	0f 92       	push	r0
    1f8e:	0f b6       	in	r0, 0x3f	; 63
    1f90:	0f 92       	push	r0
    1f92:	11 24       	eor	r1, r1
    1f94:	8f 93       	push	r24
	statusreg |= (1<<updaterate);
    1f96:	80 91 34 03 	lds	r24, 0x0334
    1f9a:	81 60       	ori	r24, 0x01	; 1
    1f9c:	80 93 34 03 	sts	0x0334, r24
}
    1fa0:	8f 91       	pop	r24
    1fa2:	0f 90       	pop	r0
    1fa4:	0f be       	out	0x3f, r0	; 63
    1fa6:	0f 90       	pop	r0
    1fa8:	1f 90       	pop	r1
    1faa:	18 95       	reti

00001fac <__vector_20>:
uint8_t gpssekunde;
uint8_t gpsTag;
uint8_t gpsMonat;
uint8_t gpsJahr;

ISR(USART0_RX_vect){
    1fac:	1f 92       	push	r1
    1fae:	0f 92       	push	r0
    1fb0:	0f b6       	in	r0, 0x3f	; 63
    1fb2:	0f 92       	push	r0
    1fb4:	11 24       	eor	r1, r1
    1fb6:	0b b6       	in	r0, 0x3b	; 59
    1fb8:	0f 92       	push	r0
    1fba:	2f 93       	push	r18
    1fbc:	8f 93       	push	r24
    1fbe:	9f 93       	push	r25
    1fc0:	ef 93       	push	r30
    1fc2:	ff 93       	push	r31
	uint8_t temp = UDR0;
    1fc4:	20 91 c6 00 	lds	r18, 0x00C6
	if (temp == '$' && !(gpsstatus&(1<<complete)) && !(gpsstatus&(1<<completenotvalid)))
    1fc8:	24 32       	cpi	r18, 0x24	; 36
    1fca:	51 f4       	brne	.+20     	; 0x1fe0 <__vector_20+0x34>
    1fcc:	80 91 31 03 	lds	r24, 0x0331
    1fd0:	98 2f       	mov	r25, r24
    1fd2:	9c 70       	andi	r25, 0x0C	; 12
    1fd4:	29 f4       	brne	.+10     	; 0x1fe0 <__vector_20+0x34>
	{
		gpscounter = 0;
    1fd6:	10 92 e8 02 	sts	0x02E8, r1
		gpsstatus |= (1<<message);
    1fda:	81 60       	ori	r24, 0x01	; 1
    1fdc:	80 93 31 03 	sts	0x0331, r24
	}
	if ((gpsstatus&(1<<message)))
    1fe0:	90 91 31 03 	lds	r25, 0x0331
    1fe4:	90 ff       	sbrs	r25, 0
    1fe6:	3c c0       	rjmp	.+120    	; 0x2060 <__vector_20+0xb4>
	{
		gpsdata[gpscounter] = temp;
    1fe8:	80 91 e8 02 	lds	r24, 0x02E8
    1fec:	e8 2f       	mov	r30, r24
    1fee:	f0 e0       	ldi	r31, 0x00	; 0
    1ff0:	e7 51       	subi	r30, 0x17	; 23
    1ff2:	fd 4f       	sbci	r31, 0xFD	; 253
    1ff4:	20 83       	st	Z, r18
		gpscounter++;
    1ff6:	8f 5f       	subi	r24, 0xFF	; 255
    1ff8:	80 93 e8 02 	sts	0x02E8, r24
		if (gpscounter>72)
    1ffc:	89 34       	cpi	r24, 0x49	; 73
    1ffe:	20 f0       	brcs	.+8      	; 0x2008 <__vector_20+0x5c>
		{
			gpsstatus &= ~(1<<message);
    2000:	9e 7f       	andi	r25, 0xFE	; 254
    2002:	90 93 31 03 	sts	0x0331, r25
    2006:	2c c0       	rjmp	.+88     	; 0x2060 <__vector_20+0xb4>
		}
		else if (gpscounter==19)
    2008:	83 31       	cpi	r24, 0x13	; 19
    200a:	c9 f4       	brne	.+50     	; 0x203e <__vector_20+0x92>
		{
			if (gpsdata[4]=='M' && gpsdata[5]=='C')
    200c:	80 91 ed 02 	lds	r24, 0x02ED
    2010:	8d 34       	cpi	r24, 0x4D	; 77
    2012:	89 f4       	brne	.+34     	; 0x2036 <__vector_20+0x8a>
    2014:	80 91 ee 02 	lds	r24, 0x02EE
    2018:	83 34       	cpi	r24, 0x43	; 67
    201a:	69 f4       	brne	.+26     	; 0x2036 <__vector_20+0x8a>
			{
				if (gpsdata[18]!='A')
    201c:	80 91 fb 02 	lds	r24, 0x02FB
    2020:	81 34       	cpi	r24, 0x41	; 65
    2022:	29 f0       	breq	.+10     	; 0x202e <__vector_20+0x82>
				{
					gpsstatus &= ~((1<<valid));
    2024:	9d 7f       	andi	r25, 0xFD	; 253
					gpsstatus |= (1<<notvalidgetdate);
    2026:	90 61       	ori	r25, 0x10	; 16
    2028:	90 93 31 03 	sts	0x0331, r25
    202c:	19 c0       	rjmp	.+50     	; 0x2060 <__vector_20+0xb4>
				}
				else{
					gpsstatus |= (1<<valid);
    202e:	92 60       	ori	r25, 0x02	; 2
    2030:	90 93 31 03 	sts	0x0331, r25
    2034:	15 c0       	rjmp	.+42     	; 0x2060 <__vector_20+0xb4>
				}
			}
			else{
				gpsstatus &= ~(1<<valid);
				gpsstatus &= ~(1<<message);
    2036:	9c 7f       	andi	r25, 0xFC	; 252
    2038:	90 93 31 03 	sts	0x0331, r25
    203c:	11 c0       	rjmp	.+34     	; 0x2060 <__vector_20+0xb4>
			}
		}
		else if (gpscounter == 42 && (gpsstatus&(1<<notvalidgetdate)))
    203e:	8a 32       	cpi	r24, 0x2A	; 42
    2040:	39 f4       	brne	.+14     	; 0x2050 <__vector_20+0xa4>
    2042:	94 ff       	sbrs	r25, 4
    2044:	0d c0       	rjmp	.+26     	; 0x2060 <__vector_20+0xb4>
		{
			gpsstatus |= (1<<completenotvalid);
			gpsstatus &= ~(1<<message);
    2046:	9e 7f       	andi	r25, 0xFE	; 254
    2048:	98 60       	ori	r25, 0x08	; 8
    204a:	90 93 31 03 	sts	0x0331, r25
    204e:	08 c0       	rjmp	.+16     	; 0x2060 <__vector_20+0xb4>
		}
		else if (gpscounter == 70 && (gpsstatus&(1<<valid)))
    2050:	86 34       	cpi	r24, 0x46	; 70
    2052:	31 f4       	brne	.+12     	; 0x2060 <__vector_20+0xb4>
    2054:	91 ff       	sbrs	r25, 1
    2056:	04 c0       	rjmp	.+8      	; 0x2060 <__vector_20+0xb4>
		{
			gpsstatus |= (1<<complete);
			gpsstatus &= ~((1<<message) | (1<<valid));
    2058:	9c 7f       	andi	r25, 0xFC	; 252
    205a:	94 60       	ori	r25, 0x04	; 4
    205c:	90 93 31 03 	sts	0x0331, r25
		}
	}
}
    2060:	ff 91       	pop	r31
    2062:	ef 91       	pop	r30
    2064:	9f 91       	pop	r25
    2066:	8f 91       	pop	r24
    2068:	2f 91       	pop	r18
    206a:	0f 90       	pop	r0
    206c:	0b be       	out	0x3b, r0	; 59
    206e:	0f 90       	pop	r0
    2070:	0f be       	out	0x3f, r0	; 63
    2072:	0f 90       	pop	r0
    2074:	1f 90       	pop	r1
    2076:	18 95       	reti

00002078 <_Z6nullenv>:
double geschw;
double strecke;
double maxgeschw;
uint32_t Fahrtzeit;
void nullen(){
	geschw = 0;
    2078:	10 92 d2 02 	sts	0x02D2, r1
    207c:	10 92 d3 02 	sts	0x02D3, r1
    2080:	10 92 d4 02 	sts	0x02D4, r1
    2084:	10 92 d5 02 	sts	0x02D5, r1
	strecke = 0;
    2088:	10 92 ce 02 	sts	0x02CE, r1
    208c:	10 92 cf 02 	sts	0x02CF, r1
    2090:	10 92 d0 02 	sts	0x02D0, r1
    2094:	10 92 d1 02 	sts	0x02D1, r1
	maxgeschw = 0;
    2098:	10 92 ca 02 	sts	0x02CA, r1
    209c:	10 92 cb 02 	sts	0x02CB, r1
    20a0:	10 92 cc 02 	sts	0x02CC, r1
    20a4:	10 92 cd 02 	sts	0x02CD, r1
	Fahrtzeit = 0;
    20a8:	10 92 c6 02 	sts	0x02C6, r1
    20ac:	10 92 c7 02 	sts	0x02C7, r1
    20b0:	10 92 c8 02 	sts	0x02C8, r1
    20b4:	10 92 c9 02 	sts	0x02C9, r1
    20b8:	08 95       	ret

000020ba <_ZN5tacho11tastendruckEPh>:
		nullen();
	}

	//Tasterhandler
	uint8_t tastendruck(uint8_t *tast){
		if (*tast=='e')
    20ba:	fb 01       	movw	r30, r22
    20bc:	80 81       	ld	r24, Z
    20be:	85 36       	cpi	r24, 0x65	; 101
    20c0:	09 f4       	brne	.+2      	; 0x20c4 <_ZN5tacho11tastendruckEPh+0xa>
		{
			nullen();
    20c2:	da df       	rcall	.-76     	; 0x2078 <_Z6nullenv>
		}
		return 0;
	}
    20c4:	80 e0       	ldi	r24, 0x00	; 0
    20c6:	08 95       	ret

000020c8 <_Z13reed_debouncePVhh>:
}
uint8_t reed_debounce(volatile uint8_t *port, uint8_t pin)
{
	if ( (*port & (1 << pin)) )
    20c8:	fc 01       	movw	r30, r24
    20ca:	20 81       	ld	r18, Z
    20cc:	30 e0       	ldi	r19, 0x00	; 0
    20ce:	06 2e       	mov	r0, r22
    20d0:	02 c0       	rjmp	.+4      	; 0x20d6 <_Z13reed_debouncePVhh+0xe>
    20d2:	35 95       	asr	r19
    20d4:	27 95       	ror	r18
    20d6:	0a 94       	dec	r0
    20d8:	e2 f7       	brpl	.-8      	; 0x20d2 <_Z13reed_debouncePVhh+0xa>
    20da:	20 ff       	sbrs	r18, 0
    20dc:	16 c0       	rjmp	.+44     	; 0x210a <_Z13reed_debouncePVhh+0x42>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    20de:	ef e0       	ldi	r30, 0x0F	; 15
    20e0:	f7 e2       	ldi	r31, 0x27	; 39
    20e2:	31 97       	sbiw	r30, 0x01	; 1
    20e4:	f1 f7       	brne	.-4      	; 0x20e2 <_Z13reed_debouncePVhh+0x1a>
    20e6:	00 c0       	rjmp	.+0      	; 0x20e8 <_Z13reed_debouncePVhh+0x20>
    20e8:	00 00       	nop
	{
		/* Pin wurde auf Masse gezogen, ms warten   */
		_delay_ms(REEDMS);
		if ( !(*port & (1 << pin)) )
    20ea:	fc 01       	movw	r30, r24
    20ec:	80 81       	ld	r24, Z
    20ee:	90 e0       	ldi	r25, 0x00	; 0
    20f0:	02 c0       	rjmp	.+4      	; 0x20f6 <_Z13reed_debouncePVhh+0x2e>
    20f2:	95 95       	asr	r25
    20f4:	87 95       	ror	r24
    20f6:	6a 95       	dec	r22
    20f8:	e2 f7       	brpl	.-8      	; 0x20f2 <_Z13reed_debouncePVhh+0x2a>
    20fa:	80 fd       	sbrc	r24, 0
    20fc:	08 c0       	rjmp	.+16     	; 0x210e <_Z13reed_debouncePVhh+0x46>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    20fe:	f2 e0       	ldi	r31, 0x02	; 2
    2100:	fa 95       	dec	r31
    2102:	f1 f7       	brne	.-4      	; 0x2100 <_Z13reed_debouncePVhh+0x38>
    2104:	00 c0       	rjmp	.+0      	; 0x2106 <_Z13reed_debouncePVhh+0x3e>
		{
			/* Anwender Zeit zum Loslassen des Tasters geben */
			_delay_us(1);
			return 1;
    2106:	81 e0       	ldi	r24, 0x01	; 1
    2108:	08 95       	ret
		}
	}
	return 0;
    210a:	80 e0       	ldi	r24, 0x00	; 0
    210c:	08 95       	ret
    210e:	80 e0       	ldi	r24, 0x00	; 0
}
    2110:	08 95       	ret

00002112 <_Z15geschwindigkeitf>:
//Berechnung der Geschwindigkeit
void geschwindigkeit(float durch){
    2112:	cf 92       	push	r12
    2114:	df 92       	push	r13
    2116:	ef 92       	push	r14
    2118:	ff 92       	push	r15
    211a:	cf 93       	push	r28
    211c:	df 93       	push	r29
	//Einholen der Daten und ruecksetzen
	uint16_t zaehlungen = TCNT1;
    211e:	e4 e8       	ldi	r30, 0x84	; 132
    2120:	f0 e0       	ldi	r31, 0x00	; 0
    2122:	c0 81       	ld	r28, Z
    2124:	d1 81       	ldd	r29, Z+1	; 0x01
	TCNT1 = 0;
    2126:	11 82       	std	Z+1, r1	; 0x01
    2128:	10 82       	st	Z, r1
	//Berechnung
	double temp = geschw;
	double umlaufzeit = (REEDMS/1000.0+(zaehlungen/zaehlungenprozeiteinheit)*zeitproachtzaehlungen);
	geschw = (durch)*M_PI*3.6;
    212a:	2b ed       	ldi	r18, 0xDB	; 219
    212c:	3f e0       	ldi	r19, 0x0F	; 15
    212e:	49 e4       	ldi	r20, 0x49	; 73
    2130:	50 e4       	ldi	r21, 0x40	; 64
    2132:	0e 94 a9 22 	call	0x4552	; 0x4552 <__mulsf3>
    2136:	26 e6       	ldi	r18, 0x66	; 102
    2138:	36 e6       	ldi	r19, 0x66	; 102
    213a:	46 e6       	ldi	r20, 0x66	; 102
    213c:	50 e4       	ldi	r21, 0x40	; 64
    213e:	0e 94 a9 22 	call	0x4552	; 0x4552 <__mulsf3>
    2142:	6b 01       	movw	r12, r22
    2144:	7c 01       	movw	r14, r24
	//Einholen der Daten und ruecksetzen
	uint16_t zaehlungen = TCNT1;
	TCNT1 = 0;
	//Berechnung
	double temp = geschw;
	double umlaufzeit = (REEDMS/1000.0+(zaehlungen/zaehlungenprozeiteinheit)*zeitproachtzaehlungen);
    2146:	be 01       	movw	r22, r28
    2148:	80 e0       	ldi	r24, 0x00	; 0
    214a:	90 e0       	ldi	r25, 0x00	; 0
    214c:	0e 94 8e 21 	call	0x431c	; 0x431c <__floatunsisf>
    2150:	20 e0       	ldi	r18, 0x00	; 0
    2152:	30 e0       	ldi	r19, 0x00	; 0
    2154:	40 e0       	ldi	r20, 0x00	; 0
    2156:	5e e3       	ldi	r21, 0x3E	; 62
    2158:	0e 94 a9 22 	call	0x4552	; 0x4552 <__mulsf3>
    215c:	2d eb       	ldi	r18, 0xBD	; 189
    215e:	37 e3       	ldi	r19, 0x37	; 55
    2160:	46 e8       	ldi	r20, 0x86	; 134
    2162:	5a e3       	ldi	r21, 0x3A	; 58
    2164:	0e 94 a9 22 	call	0x4552	; 0x4552 <__mulsf3>
    2168:	2a e0       	ldi	r18, 0x0A	; 10
    216a:	37 ed       	ldi	r19, 0xD7	; 215
    216c:	43 ea       	ldi	r20, 0xA3	; 163
    216e:	5b e3       	ldi	r21, 0x3B	; 59
    2170:	0e 94 8e 20 	call	0x411c	; 0x411c <__addsf3>
    2174:	9b 01       	movw	r18, r22
    2176:	ac 01       	movw	r20, r24
	geschw = (durch)*M_PI*3.6;
	geschw /= umlaufzeit;
    2178:	c7 01       	movw	r24, r14
    217a:	b6 01       	movw	r22, r12
    217c:	0e 94 f5 20 	call	0x41ea	; 0x41ea <__divsf3>
	//Mittelwert aus der letzten Messung zum Fehler minimieren
	geschw += temp;
    2180:	20 91 d2 02 	lds	r18, 0x02D2
    2184:	30 91 d3 02 	lds	r19, 0x02D3
    2188:	40 91 d4 02 	lds	r20, 0x02D4
    218c:	50 91 d5 02 	lds	r21, 0x02D5
    2190:	0e 94 8e 20 	call	0x411c	; 0x411c <__addsf3>
	geschw /= 2.0;
    2194:	20 e0       	ldi	r18, 0x00	; 0
    2196:	30 e0       	ldi	r19, 0x00	; 0
    2198:	40 e0       	ldi	r20, 0x00	; 0
    219a:	5f e3       	ldi	r21, 0x3F	; 63
    219c:	0e 94 a9 22 	call	0x4552	; 0x4552 <__mulsf3>
    21a0:	6b 01       	movw	r12, r22
    21a2:	7c 01       	movw	r14, r24
	if (geschw >=160)
    21a4:	20 e0       	ldi	r18, 0x00	; 0
    21a6:	30 e0       	ldi	r19, 0x00	; 0
    21a8:	40 e2       	ldi	r20, 0x20	; 32
    21aa:	53 e4       	ldi	r21, 0x43	; 67
    21ac:	0e 94 9e 22 	call	0x453c	; 0x453c <__gesf2>
    21b0:	88 23       	and	r24, r24
    21b2:	4c f4       	brge	.+18     	; 0x21c6 <_Z15geschwindigkeitf+0xb4>
	double umlaufzeit = (REEDMS/1000.0+(zaehlungen/zaehlungenprozeiteinheit)*zeitproachtzaehlungen);
	geschw = (durch)*M_PI*3.6;
	geschw /= umlaufzeit;
	//Mittelwert aus der letzten Messung zum Fehler minimieren
	geschw += temp;
	geschw /= 2.0;
    21b4:	c0 92 d2 02 	sts	0x02D2, r12
    21b8:	d0 92 d3 02 	sts	0x02D3, r13
    21bc:	e0 92 d4 02 	sts	0x02D4, r14
    21c0:	f0 92 d5 02 	sts	0x02D5, r15
    21c4:	08 c0       	rjmp	.+16     	; 0x21d6 <_Z15geschwindigkeitf+0xc4>
	if (geschw >=160)
	{
		geschw=0;
    21c6:	10 92 d2 02 	sts	0x02D2, r1
    21ca:	10 92 d3 02 	sts	0x02D3, r1
    21ce:	10 92 d4 02 	sts	0x02D4, r1
    21d2:	10 92 d5 02 	sts	0x02D5, r1
	}
}
    21d6:	df 91       	pop	r29
    21d8:	cf 91       	pop	r28
    21da:	ff 90       	pop	r15
    21dc:	ef 90       	pop	r14
    21de:	df 90       	pop	r13
    21e0:	cf 90       	pop	r12
    21e2:	08 95       	ret

000021e4 <_Z15initialisierungv>:
			SMCR |= (1<<SE);
		}
    }
}

void initialisierung(){	
    21e4:	ff 92       	push	r15
    21e6:	0f 93       	push	r16
    21e8:	1f 93       	push	r17
    21ea:	cf 93       	push	r28
    21ec:	df 93       	push	r29
    21ee:	cd b7       	in	r28, 0x3d	; 61
    21f0:	de b7       	in	r29, 0x3e	; 62
    21f2:	a9 97       	sbiw	r28, 0x29	; 41
    21f4:	0f b6       	in	r0, 0x3f	; 63
    21f6:	f8 94       	cli
    21f8:	de bf       	out	0x3e, r29	; 62
    21fa:	0f be       	out	0x3f, r0	; 63
    21fc:	cd bf       	out	0x3d, r28	; 61
	//nullen der Flagregister
	anzeige=0;
    21fe:	10 92 35 03 	sts	0x0335, r1
	statusreg=0;
    2202:	10 92 34 03 	sts	0x0334, r1
	position=0;
    2206:	10 92 33 03 	sts	0x0333, r1
	FPS=0;
    220a:	10 92 32 03 	sts	0x0332, r1
	
	//initialisieren des Zaehler fuer die Winkelgeschw sowie den Timer
	TCNT1 = 0;
    220e:	10 92 85 00 	sts	0x0085, r1
    2212:	10 92 84 00 	sts	0x0084, r1
	TIMSK1 = 0;
    2216:	10 92 6f 00 	sts	0x006F, r1
	TCCR1B = ((1<<CS12) | (1<<CS10));
    221a:	85 e0       	ldi	r24, 0x05	; 5
    221c:	80 93 81 00 	sts	0x0081, r24
	
	//Eingang fuer den Reedkontak schalten mit internem Pullup
	DDRA |= ((1<<PORTA6));
    2220:	0e 9a       	sbi	0x01, 6	; 1
	PORTA |= (1<<PORTA6);
    2222:	16 9a       	sbi	0x02, 6	; 2
	
	//ADC Initialisieren auf CH0
	ADMUX = (1<<REFS0);
    2224:	80 e4       	ldi	r24, 0x40	; 64
    2226:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA = (1<<ADPS1) | (1<<ADPS0);
    222a:	ea e7       	ldi	r30, 0x7A	; 122
    222c:	f0 e0       	ldi	r31, 0x00	; 0
    222e:	83 e0       	ldi	r24, 0x03	; 3
    2230:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADEN);
    2232:	80 81       	ld	r24, Z
    2234:	80 68       	ori	r24, 0x80	; 128
    2236:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);
    2238:	80 81       	ld	r24, Z
    223a:	80 64       	ori	r24, 0x40	; 64
    223c:	80 83       	st	Z, r24
	while (ADCSRA & (1<<ADSC) ) {}
    223e:	80 81       	ld	r24, Z
    2240:	18 2f       	mov	r17, r24
    2242:	10 74       	andi	r17, 0x40	; 64
    2244:	86 fd       	sbrc	r24, 6
    2246:	fb cf       	rjmp	.-10     	; 0x223e <_Z15initialisierungv+0x5a>
	(void) ADCW;
    2248:	80 91 78 00 	lds	r24, 0x0078
    224c:	90 91 79 00 	lds	r25, 0x0079
	
	//USART initalisieren, aktivieren erst spaeter
	PIND &= ~((1<<PIND1) | (1<<PIND2));
    2250:	89 b1       	in	r24, 0x09	; 9
    2252:	89 7f       	andi	r24, 0xF9	; 249
    2254:	89 b9       	out	0x09, r24	; 9
	DDRD &= ~((1<<PIND1) | (1<<PIND2));
    2256:	8a b1       	in	r24, 0x0a	; 10
    2258:	89 7f       	andi	r24, 0xF9	; 249
    225a:	8a b9       	out	0x0a, r24	; 10
	UBRR0H = 0;
    225c:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = 51;							//9600 Baud
    2260:	83 e3       	ldi	r24, 0x33	; 51
    2262:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0C = (1<<UCSZ00) | (1<<UCSZ01);	// 8Bit Frame
    2266:	86 e0       	ldi	r24, 0x06	; 6
    2268:	80 93 c2 00 	sts	0x00C2, r24
	UCSR0B = (1<<RXCIE0);
    226c:	80 e8       	ldi	r24, 0x80	; 128
    226e:	80 93 c1 00 	sts	0x00C1, r24
	gpscounter = 0;
    2272:	10 92 e8 02 	sts	0x02E8, r1
	gpsstatus = (1<<fix);
    2276:	80 93 31 03 	sts	0x0331, r24
	lat = 0;
    227a:	10 92 e4 02 	sts	0x02E4, r1
    227e:	10 92 e5 02 	sts	0x02E5, r1
    2282:	10 92 e6 02 	sts	0x02E6, r1
    2286:	10 92 e7 02 	sts	0x02E7, r1
	lon = 0;
    228a:	10 92 e0 02 	sts	0x02E0, r1
    228e:	10 92 e1 02 	sts	0x02E1, r1
    2292:	10 92 e2 02 	sts	0x02E2, r1
    2296:	10 92 e3 02 	sts	0x02E3, r1
	gpsspeed = 0;
    229a:	10 92 dc 02 	sts	0x02DC, r1
    229e:	10 92 dd 02 	sts	0x02DD, r1
    22a2:	10 92 de 02 	sts	0x02DE, r1
    22a6:	10 92 df 02 	sts	0x02DF, r1
	gpsstunde = 0;
    22aa:	10 92 db 02 	sts	0x02DB, r1
	gpsminute = 0;
    22ae:	10 92 da 02 	sts	0x02DA, r1
	gpssekunde = 0;
    22b2:	10 92 d9 02 	sts	0x02D9, r1
	gpsTag = 0;
    22b6:	10 92 d8 02 	sts	0x02D8, r1
	gpsMonat = 0;
    22ba:	10 92 d7 02 	sts	0x02D7, r1
	gpsJahr = 0;
    22be:	10 92 d6 02 	sts	0x02D6, r1
		uint8_t posx;
		uint8_t maxentries;
		uint8_t maxentriesx;
	monitor(Display *ol, RTC *rt)
	{
		buffersize = 0;
    22c2:	1f 8a       	std	Y+23, r1	; 0x17
		oled = ol;
    22c4:	89 e3       	ldi	r24, 0x39	; 57
    22c6:	94 e0       	ldi	r25, 0x04	; 4
    22c8:	99 8f       	std	Y+25, r25	; 0x19
    22ca:	88 8f       	std	Y+24, r24	; 0x18
		rtc = rt;
    22cc:	8a e3       	ldi	r24, 0x3A	; 58
    22ce:	98 e0       	ldi	r25, 0x08	; 8
    22d0:	9b 8f       	std	Y+27, r25	; 0x1b
    22d2:	8a 8f       	std	Y+26, r24	; 0x1a
		posy=0;
    22d4:	1e a2       	std	Y+38, r1	; 0x26
		posx=0;
    22d6:	1f a2       	std	Y+39, r1	; 0x27
		maxentriesx = 1;
    22d8:	81 e0       	ldi	r24, 0x01	; 1
    22da:	89 a7       	std	Y+41, r24	; 0x29
class wilkommen: public monitor
{
	private:
	
	public:
	wilkommen(Display *ol, RTC *rt):monitor(ol,rt)
    22dc:	82 eb       	ldi	r24, 0xB2	; 178
    22de:	92 e0       	ldi	r25, 0x02	; 2
    22e0:	9a 83       	std	Y+2, r25	; 0x02
    22e2:	89 83       	std	Y+1, r24	; 0x01
	{

	}
	
	void draw(){
		oled->clearFrame();
    22e4:	89 e3       	ldi	r24, 0x39	; 57
    22e6:	94 e0       	ldi	r25, 0x04	; 4
    22e8:	0e 94 39 03 	call	0x672	; 0x672 <_ZN7Display10clearFrameEv>
		
		buffersize=sprintf(buffer,"Fahradcomputer");
    22ec:	8f e0       	ldi	r24, 0x0F	; 15
    22ee:	e6 e0       	ldi	r30, 0x06	; 6
    22f0:	f1 e0       	ldi	r31, 0x01	; 1
    22f2:	de 01       	movw	r26, r28
    22f4:	13 96       	adiw	r26, 0x03	; 3
    22f6:	01 90       	ld	r0, Z+
    22f8:	0d 92       	st	X+, r0
    22fa:	8a 95       	dec	r24
    22fc:	e1 f7       	brne	.-8      	; 0x22f6 <_Z15initialisierungv+0x112>
    22fe:	8e e0       	ldi	r24, 0x0E	; 14
    2300:	8f 8b       	std	Y+23, r24	; 0x17
    2302:	f1 2e       	mov	r15, r17
    2304:	00 e0       	ldi	r16, 0x00	; 0
		for(uint8_t i=0; i < buffersize;i++){
			oled->draw_ASCI(buffer[i],i*charsize,0);
    2306:	e3 e0       	ldi	r30, 0x03	; 3
    2308:	f0 e0       	ldi	r31, 0x00	; 0
    230a:	ec 0f       	add	r30, r28
    230c:	fd 1f       	adc	r31, r29
    230e:	e0 0f       	add	r30, r16
    2310:	f1 1d       	adc	r31, r1
    2312:	20 e0       	ldi	r18, 0x00	; 0
    2314:	4f 2d       	mov	r20, r15
    2316:	60 81       	ld	r22, Z
    2318:	88 8d       	ldd	r24, Y+24	; 0x18
    231a:	99 8d       	ldd	r25, Y+25	; 0x19
    231c:	0e 94 51 04 	call	0x8a2	; 0x8a2 <_ZN7Display9draw_ASCIEhhh>
	
	void draw(){
		oled->clearFrame();
		
		buffersize=sprintf(buffer,"Fahradcomputer");
		for(uint8_t i=0; i < buffersize;i++){
    2320:	0f 5f       	subi	r16, 0xFF	; 255
    2322:	26 e0       	ldi	r18, 0x06	; 6
    2324:	f2 0e       	add	r15, r18
    2326:	8f 89       	ldd	r24, Y+23	; 0x17
    2328:	08 17       	cp	r16, r24
    232a:	68 f3       	brcs	.-38     	; 0x2306 <_Z15initialisierungv+0x122>
			oled->draw_ASCI(buffer[i],i*charsize,0);
		}
		buffersize=sprintf(buffer,"--------------");
    232c:	8f e0       	ldi	r24, 0x0F	; 15
    232e:	e5 e1       	ldi	r30, 0x15	; 21
    2330:	f1 e0       	ldi	r31, 0x01	; 1
    2332:	de 01       	movw	r26, r28
    2334:	13 96       	adiw	r26, 0x03	; 3
    2336:	01 90       	ld	r0, Z+
    2338:	0d 92       	st	X+, r0
    233a:	8a 95       	dec	r24
    233c:	e1 f7       	brne	.-8      	; 0x2336 <_Z15initialisierungv+0x152>
    233e:	8e e0       	ldi	r24, 0x0E	; 14
    2340:	8f 8b       	std	Y+23, r24	; 0x17
    2342:	f1 2e       	mov	r15, r17
    2344:	00 e0       	ldi	r16, 0x00	; 0
		for(uint8_t i=0; i < buffersize;i++){
			oled->draw_ASCI(buffer[i],i*charsize,8);
    2346:	e3 e0       	ldi	r30, 0x03	; 3
    2348:	f0 e0       	ldi	r31, 0x00	; 0
    234a:	ec 0f       	add	r30, r28
    234c:	fd 1f       	adc	r31, r29
    234e:	e0 0f       	add	r30, r16
    2350:	f1 1d       	adc	r31, r1
    2352:	28 e0       	ldi	r18, 0x08	; 8
    2354:	4f 2d       	mov	r20, r15
    2356:	60 81       	ld	r22, Z
    2358:	88 8d       	ldd	r24, Y+24	; 0x18
    235a:	99 8d       	ldd	r25, Y+25	; 0x19
    235c:	0e 94 51 04 	call	0x8a2	; 0x8a2 <_ZN7Display9draw_ASCIEhhh>
		buffersize=sprintf(buffer,"Fahradcomputer");
		for(uint8_t i=0; i < buffersize;i++){
			oled->draw_ASCI(buffer[i],i*charsize,0);
		}
		buffersize=sprintf(buffer,"--------------");
		for(uint8_t i=0; i < buffersize;i++){
    2360:	0f 5f       	subi	r16, 0xFF	; 255
    2362:	36 e0       	ldi	r19, 0x06	; 6
    2364:	f3 0e       	add	r15, r19
    2366:	8f 89       	ldd	r24, Y+23	; 0x17
    2368:	08 17       	cp	r16, r24
    236a:	68 f3       	brcs	.-38     	; 0x2346 <_Z15initialisierungv+0x162>
			oled->draw_ASCI(buffer[i],i*charsize,8);
		}
		buffersize=sprintf(buffer,"Version: %.2f",(double)VERSIONSNUMMER);
    236c:	80 e4       	ldi	r24, 0x40	; 64
    236e:	8f 93       	push	r24
    2370:	81 e4       	ldi	r24, 0x41	; 65
    2372:	8f 93       	push	r24
    2374:	87 e4       	ldi	r24, 0x47	; 71
    2376:	8f 93       	push	r24
    2378:	8e ea       	ldi	r24, 0xAE	; 174
    237a:	8f 93       	push	r24
    237c:	84 e2       	ldi	r24, 0x24	; 36
    237e:	91 e0       	ldi	r25, 0x01	; 1
    2380:	9f 93       	push	r25
    2382:	8f 93       	push	r24
    2384:	ce 01       	movw	r24, r28
    2386:	03 96       	adiw	r24, 0x03	; 3
    2388:	9f 93       	push	r25
    238a:	8f 93       	push	r24
    238c:	0e 94 62 2a 	call	0x54c4	; 0x54c4 <sprintf>
    2390:	8f 8b       	std	Y+23, r24	; 0x17
		for(uint8_t i=0; i < buffersize;i++){
    2392:	0f b6       	in	r0, 0x3f	; 63
    2394:	f8 94       	cli
    2396:	de bf       	out	0x3e, r29	; 62
    2398:	0f be       	out	0x3f, r0	; 63
    239a:	cd bf       	out	0x3d, r28	; 61
    239c:	88 23       	and	r24, r24
    239e:	99 f0       	breq	.+38     	; 0x23c6 <_Z15initialisierungv+0x1e2>
    23a0:	00 e0       	ldi	r16, 0x00	; 0
			oled->draw_ASCI(buffer[i],i*charsize,32);
    23a2:	e3 e0       	ldi	r30, 0x03	; 3
    23a4:	f0 e0       	ldi	r31, 0x00	; 0
    23a6:	ec 0f       	add	r30, r28
    23a8:	fd 1f       	adc	r31, r29
    23aa:	e0 0f       	add	r30, r16
    23ac:	f1 1d       	adc	r31, r1
    23ae:	20 e2       	ldi	r18, 0x20	; 32
    23b0:	41 2f       	mov	r20, r17
    23b2:	60 81       	ld	r22, Z
    23b4:	88 8d       	ldd	r24, Y+24	; 0x18
    23b6:	99 8d       	ldd	r25, Y+25	; 0x19
    23b8:	0e 94 51 04 	call	0x8a2	; 0x8a2 <_ZN7Display9draw_ASCIEhhh>
		buffersize=sprintf(buffer,"--------------");
		for(uint8_t i=0; i < buffersize;i++){
			oled->draw_ASCI(buffer[i],i*charsize,8);
		}
		buffersize=sprintf(buffer,"Version: %.2f",(double)VERSIONSNUMMER);
		for(uint8_t i=0; i < buffersize;i++){
    23bc:	0f 5f       	subi	r16, 0xFF	; 255
    23be:	1a 5f       	subi	r17, 0xFA	; 250
    23c0:	8f 89       	ldd	r24, Y+23	; 0x17
    23c2:	08 17       	cp	r16, r24
    23c4:	70 f3       	brcs	.-36     	; 0x23a2 <_Z15initialisierungv+0x1be>
		oled->clearFrame();
	}

	//send the frame to the display
	void send(){
		oled->sendFrame();	
    23c6:	88 8d       	ldd	r24, Y+24	; 0x18
    23c8:	99 8d       	ldd	r25, Y+25	; 0x19
    23ca:	0e 94 b3 03 	call	0x766	; 0x766 <_ZN7Display9sendFrameEv>
    23ce:	8a e0       	ldi	r24, 0x0A	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    23d0:	ff e7       	ldi	r31, 0x7F	; 127
    23d2:	28 e3       	ldi	r18, 0x38	; 56
    23d4:	31 e0       	ldi	r19, 0x01	; 1
    23d6:	f1 50       	subi	r31, 0x01	; 1
    23d8:	20 40       	sbci	r18, 0x00	; 0
    23da:	30 40       	sbci	r19, 0x00	; 0
    23dc:	e1 f7       	brne	.-8      	; 0x23d6 <_Z15initialisierungv+0x1f2>
    23de:	00 c0       	rjmp	.+0      	; 0x23e0 <_Z15initialisierungv+0x1fc>
    23e0:	00 00       	nop
    23e2:	9f e7       	ldi	r25, 0x7F	; 127
    23e4:	e8 e3       	ldi	r30, 0x38	; 56
    23e6:	f1 e0       	ldi	r31, 0x01	; 1
    23e8:	91 50       	subi	r25, 0x01	; 1
    23ea:	e0 40       	sbci	r30, 0x00	; 0
    23ec:	f0 40       	sbci	r31, 0x00	; 0
    23ee:	e1 f7       	brne	.-8      	; 0x23e8 <_Z15initialisierungv+0x204>
    23f0:	00 c0       	rjmp	.+0      	; 0x23f2 <_Z15initialisierungv+0x20e>
    23f2:	00 00       	nop
    23f4:	81 50       	subi	r24, 0x01	; 1
	
	//Wilkommensanzeige
	wilkommen wil(&oled,&rtc);
	wil.draw();
	for (uint8_t i=0; i<10;i++)
    23f6:	61 f7       	brne	.-40     	; 0x23d0 <_Z15initialisierungv+0x1ec>
		_delay_ms(50);
		_delay_ms(50);
	}

	//letzten Zeitpunkt holen und RTC starten
	rtc.Sekunden= 0;
    23f8:	0a e3       	ldi	r16, 0x3A	; 58
    23fa:	18 e0       	ldi	r17, 0x08	; 8
    23fc:	f8 01       	movw	r30, r16
    23fe:	12 8a       	std	Z+18, r1	; 0x12
	rtc.Minuten	= EEPROM_Read(EEMINUTEN);
    2400:	80 e0       	ldi	r24, 0x00	; 0
    2402:	90 e0       	ldi	r25, 0x00	; 0
    2404:	96 dd       	rcall	.-1236   	; 0x1f32 <_Z11EEPROM_Readj>
    2406:	f8 01       	movw	r30, r16
    2408:	81 8b       	std	Z+17, r24	; 0x11
	rtc.Stunden	= EEPROM_Read(EESTUNDEN);
    240a:	81 e0       	ldi	r24, 0x01	; 1
    240c:	90 e0       	ldi	r25, 0x00	; 0
    240e:	91 dd       	rcall	.-1246   	; 0x1f32 <_Z11EEPROM_Readj>
    2410:	f8 01       	movw	r30, r16
    2412:	80 8b       	std	Z+16, r24	; 0x10
	rtc.Tag		= EEPROM_Read(EETAGE);
    2414:	82 e0       	ldi	r24, 0x02	; 2
    2416:	90 e0       	ldi	r25, 0x00	; 0
    2418:	8c dd       	rcall	.-1256   	; 0x1f32 <_Z11EEPROM_Readj>
    241a:	f8 01       	movw	r30, r16
    241c:	84 8b       	std	Z+20, r24	; 0x14
	rtc.Monat	= EEPROM_Read(EEMONAT);
    241e:	83 e0       	ldi	r24, 0x03	; 3
    2420:	90 e0       	ldi	r25, 0x00	; 0
    2422:	87 dd       	rcall	.-1266   	; 0x1f32 <_Z11EEPROM_Readj>
    2424:	f8 01       	movw	r30, r16
    2426:	86 8b       	std	Z+22, r24	; 0x16
	rtc.Jahr	= EEPROM_Read(EEJAHR);
    2428:	84 e0       	ldi	r24, 0x04	; 4
    242a:	90 e0       	ldi	r25, 0x00	; 0
    242c:	82 dd       	rcall	.-1276   	; 0x1f32 <_Z11EEPROM_Readj>
    242e:	f8 01       	movw	r30, r16
    2430:	87 8b       	std	Z+23, r24	; 0x17
	rtc.ausgabedatumneu();
    2432:	c8 01       	movw	r24, r16
    2434:	0e 94 4b 1f 	call	0x3e96	; 0x3e96 <_ZN3RTC15ausgabedatumneuEv>
	rtc.RTCstart();
    2438:	c8 01       	movw	r24, r16
    243a:	0e 94 2c 20 	call	0x4058	; 0x4058 <_ZN3RTC8RTCstartEv>
	
	//Sleepmode Grundeinstelung
	SMCR |= (1<<SM1) | (1<<SM0);
    243e:	83 b7       	in	r24, 0x33	; 51
    2440:	86 60       	ori	r24, 0x06	; 6
    2442:	83 bf       	out	0x33, r24	; 51
	
	//AD deaktivieren zum stromsparen
	ACSR |= (1<<ACD);
    2444:	80 b7       	in	r24, 0x30	; 48
    2446:	80 68       	ori	r24, 0x80	; 128
    2448:	80 bf       	out	0x30, r24	; 48
	
	//USART aktivieren jetzt nur hier zum testen
	UCSR0B |= (1<<RXEN0);
    244a:	e1 ec       	ldi	r30, 0xC1	; 193
    244c:	f0 e0       	ldi	r31, 0x00	; 0
    244e:	80 81       	ld	r24, Z
    2450:	80 61       	ori	r24, 0x10	; 16
    2452:	80 83       	st	Z, r24
	
	sei();
    2454:	78 94       	sei
}
    2456:	a9 96       	adiw	r28, 0x29	; 41
    2458:	0f b6       	in	r0, 0x3f	; 63
    245a:	f8 94       	cli
    245c:	de bf       	out	0x3e, r29	; 62
    245e:	0f be       	out	0x3f, r0	; 63
    2460:	cd bf       	out	0x3d, r28	; 61
    2462:	df 91       	pop	r29
    2464:	cf 91       	pop	r28
    2466:	1f 91       	pop	r17
    2468:	0f 91       	pop	r16
    246a:	ff 90       	pop	r15
    246c:	08 95       	ret

0000246e <_Z19maininterupthandlerP7monitorh>:

void maininterupthandler(monitor *mon, uint8_t taste){
    246e:	cf 92       	push	r12
    2470:	df 92       	push	r13
    2472:	ef 92       	push	r14
    2474:	ff 92       	push	r15
    2476:	0f 93       	push	r16
    2478:	1f 93       	push	r17
    247a:	cf 93       	push	r28
    247c:	df 93       	push	r29
    247e:	1f 92       	push	r1
    2480:	cd b7       	in	r28, 0x3d	; 61
    2482:	de b7       	in	r29, 0x3e	; 62
    2484:	8c 01       	movw	r16, r24
    2486:	69 83       	std	Y+1, r22	; 0x01
	if (taste!=' ')
    2488:	60 32       	cpi	r22, 0x20	; 32
    248a:	09 f4       	brne	.+2      	; 0x248e <_Z19maininterupthandlerP7monitorh+0x20>
    248c:	98 c0       	rjmp	.+304    	; 0x25be <_Z19maininterupthandlerP7monitorh+0x150>
	{
		anzeige |= (1<<refreshdisplay);
    248e:	80 91 35 03 	lds	r24, 0x0335
    2492:	81 60       	ori	r24, 0x01	; 1
    2494:	80 93 35 03 	sts	0x0335, r24
		switch (taste)							//Tastendruck ueberpruefen
    2498:	46 2f       	mov	r20, r22
    249a:	50 e0       	ldi	r21, 0x00	; 0
    249c:	fa 01       	movw	r30, r20
    249e:	f0 97       	sbiw	r30, 0x30	; 48
    24a0:	e6 34       	cpi	r30, 0x46	; 70
    24a2:	f1 05       	cpc	r31, r1
    24a4:	08 f0       	brcs	.+2      	; 0x24a8 <_Z19maininterupthandlerP7monitorh+0x3a>
    24a6:	6f c0       	rjmp	.+222    	; 0x2586 <_Z19maininterupthandlerP7monitorh+0x118>
    24a8:	e3 5a       	subi	r30, 0xA3	; 163
    24aa:	ff 4f       	sbci	r31, 0xFF	; 255
    24ac:	0c 94 06 28 	jmp	0x500c	; 0x500c <__tablejump2__>
		{
			case 'm':
				position = numberofpages;
    24b0:	85 e0       	ldi	r24, 0x05	; 5
    24b2:	80 93 33 03 	sts	0x0333, r24
				break;
    24b6:	78 c0       	rjmp	.+240    	; 0x25a8 <_Z19maininterupthandlerP7monitorh+0x13a>
			case 'l':
				if (mon->posx==0)
    24b8:	d8 01       	movw	r26, r16
    24ba:	96 96       	adiw	r26, 0x26	; 38
    24bc:	8c 91       	ld	r24, X
    24be:	81 11       	cpse	r24, r1
    24c0:	04 c0       	rjmp	.+8      	; 0x24ca <_Z19maininterupthandlerP7monitorh+0x5c>
				{
					position = numberofpages;
    24c2:	85 e0       	ldi	r24, 0x05	; 5
    24c4:	80 93 33 03 	sts	0x0333, r24
    24c8:	6f c0       	rjmp	.+222    	; 0x25a8 <_Z19maininterupthandlerP7monitorh+0x13a>
				}
				else{
					mon->posx--;
    24ca:	81 50       	subi	r24, 0x01	; 1
    24cc:	f8 01       	movw	r30, r16
    24ce:	86 a3       	std	Z+38, r24	; 0x26
    24d0:	65 c0       	rjmp	.+202    	; 0x259c <_Z19maininterupthandlerP7monitorh+0x12e>
				}
				break;
			case 'r':
				if (position==numberofpages)
    24d2:	80 91 33 03 	lds	r24, 0x0333
    24d6:	85 30       	cpi	r24, 0x05	; 5
    24d8:	31 f4       	brne	.+12     	; 0x24e6 <_Z19maininterupthandlerP7monitorh+0x78>
				{
					position=mon->posy;
    24da:	d8 01       	movw	r26, r16
    24dc:	95 96       	adiw	r26, 0x25	; 37
    24de:	8c 91       	ld	r24, X
    24e0:	80 93 33 03 	sts	0x0333, r24
    24e4:	5b c0       	rjmp	.+182    	; 0x259c <_Z19maininterupthandlerP7monitorh+0x12e>
				}
				else if (!(mon->posx >= mon->maxentriesx))
    24e6:	f8 01       	movw	r30, r16
    24e8:	86 a1       	ldd	r24, Z+38	; 0x26
    24ea:	90 a5       	ldd	r25, Z+40	; 0x28
    24ec:	89 17       	cp	r24, r25
    24ee:	08 f0       	brcs	.+2      	; 0x24f2 <_Z19maininterupthandlerP7monitorh+0x84>
    24f0:	15 c1       	rjmp	.+554    	; 0x271c <_Z19maininterupthandlerP7monitorh+0x2ae>
				{
					mon->posx++;
    24f2:	8f 5f       	subi	r24, 0xFF	; 255
    24f4:	86 a3       	std	Z+38, r24	; 0x26
    24f6:	52 c0       	rjmp	.+164    	; 0x259c <_Z19maininterupthandlerP7monitorh+0x12e>
				}
				break;
				case 'o':
					if (position==numberofpages)
    24f8:	80 91 33 03 	lds	r24, 0x0333
    24fc:	85 30       	cpi	r24, 0x05	; 5
    24fe:	31 f4       	brne	.+12     	; 0x250c <_Z19maininterupthandlerP7monitorh+0x9e>
					{
						position=mon->posy;
    2500:	d8 01       	movw	r26, r16
    2502:	95 96       	adiw	r26, 0x25	; 37
    2504:	8c 91       	ld	r24, X
    2506:	80 93 33 03 	sts	0x0333, r24
    250a:	48 c0       	rjmp	.+144    	; 0x259c <_Z19maininterupthandlerP7monitorh+0x12e>
					}
					else if (!(mon->posx >= mon->maxentriesx))
    250c:	f8 01       	movw	r30, r16
    250e:	86 a1       	ldd	r24, Z+38	; 0x26
    2510:	90 a5       	ldd	r25, Z+40	; 0x28
    2512:	89 17       	cp	r24, r25
    2514:	08 f0       	brcs	.+2      	; 0x2518 <_Z19maininterupthandlerP7monitorh+0xaa>
    2516:	02 c1       	rjmp	.+516    	; 0x271c <_Z19maininterupthandlerP7monitorh+0x2ae>
					{
						mon->posx++;
    2518:	8f 5f       	subi	r24, 0xFF	; 255
    251a:	86 a3       	std	Z+38, r24	; 0x26
    251c:	3f c0       	rjmp	.+126    	; 0x259c <_Z19maininterupthandlerP7monitorh+0x12e>
					}
					break;
			case 'd':
				if (!(mon->posy >= mon->maxentries-1))
    251e:	d8 01       	movw	r26, r16
    2520:	95 96       	adiw	r26, 0x25	; 37
    2522:	2c 91       	ld	r18, X
    2524:	95 97       	sbiw	r26, 0x25	; 37
    2526:	42 2f       	mov	r20, r18
    2528:	50 e0       	ldi	r21, 0x00	; 0
    252a:	97 96       	adiw	r26, 0x27	; 39
    252c:	8c 91       	ld	r24, X
    252e:	97 97       	sbiw	r26, 0x27	; 39
    2530:	90 e0       	ldi	r25, 0x00	; 0
    2532:	01 97       	sbiw	r24, 0x01	; 1
    2534:	48 17       	cp	r20, r24
    2536:	59 07       	cpc	r21, r25
    2538:	24 f4       	brge	.+8      	; 0x2542 <_Z19maininterupthandlerP7monitorh+0xd4>
				{
					mon->posy++;
    253a:	2f 5f       	subi	r18, 0xFF	; 255
    253c:	95 96       	adiw	r26, 0x25	; 37
    253e:	2c 93       	st	X, r18
    2540:	2d c0       	rjmp	.+90     	; 0x259c <_Z19maininterupthandlerP7monitorh+0x12e>
				}
				else{
					mon->posy = 0;
    2542:	f8 01       	movw	r30, r16
    2544:	15 a2       	std	Z+37, r1	; 0x25
    2546:	2a c0       	rjmp	.+84     	; 0x259c <_Z19maininterupthandlerP7monitorh+0x12e>
				}
				break;
			case 'u':
				if (!(mon->posy == 0))
    2548:	d8 01       	movw	r26, r16
    254a:	95 96       	adiw	r26, 0x25	; 37
    254c:	8c 91       	ld	r24, X
    254e:	95 97       	sbiw	r26, 0x25	; 37
    2550:	88 23       	and	r24, r24
    2552:	21 f0       	breq	.+8      	; 0x255c <_Z19maininterupthandlerP7monitorh+0xee>
				{
					mon->posy--;
    2554:	81 50       	subi	r24, 0x01	; 1
    2556:	95 96       	adiw	r26, 0x25	; 37
    2558:	8c 93       	st	X, r24
    255a:	20 c0       	rjmp	.+64     	; 0x259c <_Z19maininterupthandlerP7monitorh+0x12e>
				}
				else{
					mon->posy=mon->maxentries-1;
    255c:	f8 01       	movw	r30, r16
    255e:	87 a1       	ldd	r24, Z+39	; 0x27
    2560:	81 50       	subi	r24, 0x01	; 1
    2562:	85 a3       	std	Z+37, r24	; 0x25
    2564:	1b c0       	rjmp	.+54     	; 0x259c <_Z19maininterupthandlerP7monitorh+0x12e>
				}
				break;
			case '0':
				//Licht an/aus
				if (LED.ison())
    2566:	8c e3       	ldi	r24, 0x3C	; 60
    2568:	93 e0       	ldi	r25, 0x03	; 3
    256a:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <_ZN6Output4isonEv>
    256e:	88 23       	and	r24, r24
    2570:	29 f0       	breq	.+10     	; 0x257c <_Z19maininterupthandlerP7monitorh+0x10e>
				{
					LED.off();
    2572:	8c e3       	ldi	r24, 0x3C	; 60
    2574:	93 e0       	ldi	r25, 0x03	; 3
    2576:	0e 94 bf 1e 	call	0x3d7e	; 0x3d7e <_ZN6Output3offEv>
    257a:	10 c0       	rjmp	.+32     	; 0x259c <_Z19maininterupthandlerP7monitorh+0x12e>
				}
				else{
					LED.on();
    257c:	8c e3       	ldi	r24, 0x3C	; 60
    257e:	93 e0       	ldi	r25, 0x03	; 3
    2580:	0e 94 47 1e 	call	0x3c8e	; 0x3c8e <_ZN6Output2onEv>
    2584:	0b c0       	rjmp	.+22     	; 0x259c <_Z19maininterupthandlerP7monitorh+0x12e>
				}
				break;
			default:
				//alle anderen Tasten werden an den jeweiligen Handler weiter gegeben
				mon->tastendruck(&taste);
    2586:	d8 01       	movw	r26, r16
    2588:	ed 91       	ld	r30, X+
    258a:	fc 91       	ld	r31, X
    258c:	01 90       	ld	r0, Z+
    258e:	f0 81       	ld	r31, Z
    2590:	e0 2d       	mov	r30, r0
    2592:	be 01       	movw	r22, r28
    2594:	6f 5f       	subi	r22, 0xFF	; 255
    2596:	7f 4f       	sbci	r23, 0xFF	; 255
    2598:	c8 01       	movw	r24, r16
    259a:	09 95       	icall
				break;
		}
		if (position==0 || position==numberofpages)
    259c:	80 91 33 03 	lds	r24, 0x0333
    25a0:	88 23       	and	r24, r24
    25a2:	11 f0       	breq	.+4      	; 0x25a8 <_Z19maininterupthandlerP7monitorh+0x13a>
    25a4:	85 30       	cpi	r24, 0x05	; 5
    25a6:	31 f4       	brne	.+12     	; 0x25b4 <_Z19maininterupthandlerP7monitorh+0x146>
		{
			statusreg |= (1<<powersavemode);
    25a8:	80 91 34 03 	lds	r24, 0x0334
    25ac:	82 60       	ori	r24, 0x02	; 2
    25ae:	80 93 34 03 	sts	0x0334, r24
    25b2:	05 c0       	rjmp	.+10     	; 0x25be <_Z19maininterupthandlerP7monitorh+0x150>
		}
		else{
			statusreg &= ~(1<<powersavemode);
    25b4:	80 91 34 03 	lds	r24, 0x0334
    25b8:	8d 7f       	andi	r24, 0xFD	; 253
    25ba:	80 93 34 03 	sts	0x0334, r24
		}
	}
	
	if (position==1)							//Berechnung der Geschwindigkeit fuer Tacho
    25be:	80 91 33 03 	lds	r24, 0x0333
    25c2:	81 30       	cpi	r24, 0x01	; 1
    25c4:	f9 f4       	brne	.+62     	; 0x2604 <_Z19maininterupthandlerP7monitorh+0x196>
	{
		//debounce Funktion fuer den Reedswitch
		if (reed_debounce(&PINA,PINA7))
    25c6:	67 e0       	ldi	r22, 0x07	; 7
    25c8:	80 e2       	ldi	r24, 0x20	; 32
    25ca:	90 e0       	ldi	r25, 0x00	; 0
    25cc:	7d dd       	rcall	.-1286   	; 0x20c8 <_Z13reed_debouncePVhh>
    25ce:	88 23       	and	r24, r24
    25d0:	31 f0       	breq	.+12     	; 0x25de <_Z19maininterupthandlerP7monitorh+0x170>
		{
			//Durchmesser ist 28 Zoll
			geschwindigkeit(28.0*2.54/100.0);
    25d2:	63 e3       	ldi	r22, 0x33	; 51
    25d4:	71 e1       	ldi	r23, 0x11	; 17
    25d6:	86 e3       	ldi	r24, 0x36	; 54
    25d8:	9f e3       	ldi	r25, 0x3F	; 63
    25da:	9b dd       	rcall	.-1226   	; 0x2112 <_Z15geschwindigkeitf>
    25dc:	13 c0       	rjmp	.+38     	; 0x2604 <_Z19maininterupthandlerP7monitorh+0x196>
		}
		//Hier mit werden geschwindigkeiten, die kleiner als 2.6km/h betragen gefiltert
		//Somit wird die letzte Geschwindigkeit nach 3 Sekunden geloescht
		//Das ist noch nicht die beste Variante
		else if (TCNT1>23437)
    25de:	80 91 84 00 	lds	r24, 0x0084
    25e2:	90 91 85 00 	lds	r25, 0x0085
    25e6:	8e 38       	cpi	r24, 0x8E	; 142
    25e8:	9b 45       	sbci	r25, 0x5B	; 91
    25ea:	60 f0       	brcs	.+24     	; 0x2604 <_Z19maininterupthandlerP7monitorh+0x196>
		{
			TCNT1=0;
    25ec:	10 92 85 00 	sts	0x0085, r1
    25f0:	10 92 84 00 	sts	0x0084, r1
			geschw=0;
    25f4:	10 92 d2 02 	sts	0x02D2, r1
    25f8:	10 92 d3 02 	sts	0x02D3, r1
    25fc:	10 92 d4 02 	sts	0x02D4, r1
    2600:	10 92 d5 02 	sts	0x02D5, r1
	if (statusreg&(1<<updaterate))				//24 FPS fuer schnelle anzeigen
	{
		//anzeige &= (1<<refreshdisplay);
	}
	
	if ((rtc.interupts&(1<<sekundeninterupt)))	//Sekunden
    2604:	80 91 52 08 	lds	r24, 0x0852
    2608:	81 ff       	sbrs	r24, 1
    260a:	6a c0       	rjmp	.+212    	; 0x26e0 <_Z19maininterupthandlerP7monitorh+0x272>
	{
		rtc.zeit();
    260c:	8a e3       	ldi	r24, 0x3A	; 58
    260e:	98 e0       	ldi	r25, 0x08	; 8
    2610:	0e 94 f1 1f 	call	0x3fe2	; 0x3fe2 <_ZN3RTC4zeitEv>
		if (position==1)
    2614:	80 91 33 03 	lds	r24, 0x0333
    2618:	81 30       	cpi	r24, 0x01	; 1
    261a:	09 f0       	breq	.+2      	; 0x261e <_Z19maininterupthandlerP7monitorh+0x1b0>
    261c:	57 c0       	rjmp	.+174    	; 0x26cc <_Z19maininterupthandlerP7monitorh+0x25e>
		{
			if (geschw>maxgeschw)
    261e:	c0 90 d2 02 	lds	r12, 0x02D2
    2622:	d0 90 d3 02 	lds	r13, 0x02D3
    2626:	e0 90 d4 02 	lds	r14, 0x02D4
    262a:	f0 90 d5 02 	lds	r15, 0x02D5
    262e:	20 91 ca 02 	lds	r18, 0x02CA
    2632:	30 91 cb 02 	lds	r19, 0x02CB
    2636:	40 91 cc 02 	lds	r20, 0x02CC
    263a:	50 91 cd 02 	lds	r21, 0x02CD
    263e:	c7 01       	movw	r24, r14
    2640:	b6 01       	movw	r22, r12
    2642:	0e 94 9e 22 	call	0x453c	; 0x453c <__gesf2>
    2646:	18 16       	cp	r1, r24
    2648:	44 f4       	brge	.+16     	; 0x265a <_Z19maininterupthandlerP7monitorh+0x1ec>
			{
				maxgeschw=geschw;
    264a:	c0 92 ca 02 	sts	0x02CA, r12
    264e:	d0 92 cb 02 	sts	0x02CB, r13
    2652:	e0 92 cc 02 	sts	0x02CC, r14
    2656:	f0 92 cd 02 	sts	0x02CD, r15
			}
			if (geschw >= 1.0)
    265a:	20 e0       	ldi	r18, 0x00	; 0
    265c:	30 e0       	ldi	r19, 0x00	; 0
    265e:	40 e8       	ldi	r20, 0x80	; 128
    2660:	5f e3       	ldi	r21, 0x3F	; 63
    2662:	c7 01       	movw	r24, r14
    2664:	b6 01       	movw	r22, r12
    2666:	0e 94 9e 22 	call	0x453c	; 0x453c <__gesf2>
    266a:	88 23       	and	r24, r24
    266c:	9c f0       	brlt	.+38     	; 0x2694 <_Z19maininterupthandlerP7monitorh+0x226>
			{
				Fahrtzeit++;
    266e:	80 91 c6 02 	lds	r24, 0x02C6
    2672:	90 91 c7 02 	lds	r25, 0x02C7
    2676:	a0 91 c8 02 	lds	r26, 0x02C8
    267a:	b0 91 c9 02 	lds	r27, 0x02C9
    267e:	01 96       	adiw	r24, 0x01	; 1
    2680:	a1 1d       	adc	r26, r1
    2682:	b1 1d       	adc	r27, r1
    2684:	80 93 c6 02 	sts	0x02C6, r24
    2688:	90 93 c7 02 	sts	0x02C7, r25
    268c:	a0 93 c8 02 	sts	0x02C8, r26
    2690:	b0 93 c9 02 	sts	0x02C9, r27
			}
			strecke+=geschw/3.6;
    2694:	26 e6       	ldi	r18, 0x66	; 102
    2696:	36 e6       	ldi	r19, 0x66	; 102
    2698:	46 e6       	ldi	r20, 0x66	; 102
    269a:	50 e4       	ldi	r21, 0x40	; 64
    269c:	c7 01       	movw	r24, r14
    269e:	b6 01       	movw	r22, r12
    26a0:	0e 94 f5 20 	call	0x41ea	; 0x41ea <__divsf3>
    26a4:	9b 01       	movw	r18, r22
    26a6:	ac 01       	movw	r20, r24
    26a8:	60 91 ce 02 	lds	r22, 0x02CE
    26ac:	70 91 cf 02 	lds	r23, 0x02CF
    26b0:	80 91 d0 02 	lds	r24, 0x02D0
    26b4:	90 91 d1 02 	lds	r25, 0x02D1
    26b8:	0e 94 8e 20 	call	0x411c	; 0x411c <__addsf3>
    26bc:	60 93 ce 02 	sts	0x02CE, r22
    26c0:	70 93 cf 02 	sts	0x02CF, r23
    26c4:	80 93 d0 02 	sts	0x02D0, r24
    26c8:	90 93 d1 02 	sts	0x02D1, r25
		}
		
		anzeige |= (1<<refreshdisplay);
    26cc:	80 91 35 03 	lds	r24, 0x0335
    26d0:	81 60       	ori	r24, 0x01	; 1
    26d2:	80 93 35 03 	sts	0x0335, r24
		rtc.interupts &= ~(1<<sekundeninterupt);
    26d6:	ea e3       	ldi	r30, 0x3A	; 58
    26d8:	f8 e0       	ldi	r31, 0x08	; 8
    26da:	80 8d       	ldd	r24, Z+24	; 0x18
    26dc:	8d 7f       	andi	r24, 0xFD	; 253
    26de:	80 8f       	std	Z+24, r24	; 0x18
	}
	if ((rtc.interupts&(1<<minuteninterupt)))		//Minuten
    26e0:	80 91 52 08 	lds	r24, 0x0852
    26e4:	82 ff       	sbrs	r24, 2
    26e6:	08 c0       	rjmp	.+16     	; 0x26f8 <_Z19maininterupthandlerP7monitorh+0x28a>
	{
		anzeige |= (1<<refreshdisplay);
    26e8:	90 91 35 03 	lds	r25, 0x0335
    26ec:	91 60       	ori	r25, 0x01	; 1
    26ee:	90 93 35 03 	sts	0x0335, r25
		rtc.interupts &= ~(1<<minuteninterupt);
    26f2:	8b 7f       	andi	r24, 0xFB	; 251
    26f4:	80 93 52 08 	sts	0x0852, r24
	}
	
	if ((anzeige&(1<<refreshdisplay)))			//Anzeige aktualieseren
    26f8:	80 91 35 03 	lds	r24, 0x0335
    26fc:	80 ff       	sbrs	r24, 0
    26fe:	14 c0       	rjmp	.+40     	; 0x2728 <_Z19maininterupthandlerP7monitorh+0x2ba>
	{
		//Hier aktuelle seite neu ausgeben
		mon->draw();
    2700:	d8 01       	movw	r26, r16
    2702:	ed 91       	ld	r30, X+
    2704:	fc 91       	ld	r31, X
    2706:	02 80       	ldd	r0, Z+2	; 0x02
    2708:	f3 81       	ldd	r31, Z+3	; 0x03
    270a:	e0 2d       	mov	r30, r0
    270c:	c8 01       	movw	r24, r16
    270e:	09 95       	icall
		anzeige &= ~(1<<refreshdisplay);
    2710:	80 91 35 03 	lds	r24, 0x0335
    2714:	8e 7f       	andi	r24, 0xFE	; 254
    2716:	80 93 35 03 	sts	0x0335, r24
    271a:	06 c0       	rjmp	.+12     	; 0x2728 <_Z19maininterupthandlerP7monitorh+0x2ba>
			default:
				//alle anderen Tasten werden an den jeweiligen Handler weiter gegeben
				mon->tastendruck(&taste);
				break;
		}
		if (position==0 || position==numberofpages)
    271c:	80 91 33 03 	lds	r24, 0x0333
    2720:	88 23       	and	r24, r24
    2722:	09 f4       	brne	.+2      	; 0x2726 <_Z19maininterupthandlerP7monitorh+0x2b8>
    2724:	41 cf       	rjmp	.-382    	; 0x25a8 <_Z19maininterupthandlerP7monitorh+0x13a>
    2726:	46 cf       	rjmp	.-372    	; 0x25b4 <_Z19maininterupthandlerP7monitorh+0x146>
		{
			anzeige |= (1<<blinkflag) | (1<<refreshdisplay);
			rtc.interupts &= ~(1<<Weckerein);
		}
	}*/
}
    2728:	0f 90       	pop	r0
    272a:	df 91       	pop	r29
    272c:	cf 91       	pop	r28
    272e:	1f 91       	pop	r17
    2730:	0f 91       	pop	r16
    2732:	ff 90       	pop	r15
    2734:	ef 90       	pop	r14
    2736:	df 90       	pop	r13
    2738:	cf 90       	pop	r12
    273a:	08 95       	ret

0000273c <_Z10gpshandlerv>:

void gpshandler(){
    273c:	4f 92       	push	r4
    273e:	5f 92       	push	r5
    2740:	6f 92       	push	r6
    2742:	7f 92       	push	r7
    2744:	8f 92       	push	r8
    2746:	9f 92       	push	r9
    2748:	af 92       	push	r10
    274a:	bf 92       	push	r11
    274c:	ef 92       	push	r14
    274e:	ff 92       	push	r15
    2750:	0f 93       	push	r16
    2752:	1f 93       	push	r17
    2754:	cf 93       	push	r28
    2756:	df 93       	push	r29
    2758:	00 d0       	rcall	.+0      	; 0x275a <_Z10gpshandlerv+0x1e>
    275a:	00 d0       	rcall	.+0      	; 0x275c <_Z10gpshandlerv+0x20>
    275c:	cd b7       	in	r28, 0x3d	; 61
    275e:	de b7       	in	r29, 0x3e	; 62
	if ((gpsstatus&(1<<complete)) && (gpsstatus&(1<<fix)))
    2760:	e0 90 31 03 	lds	r14, 0x0331
    2764:	e2 fe       	sbrs	r14, 2
    2766:	e3 c2       	rjmp	.+1478   	; 0x2d2e <_Z10gpshandlerv+0x5f2>
    2768:	ee 20       	and	r14, r14
    276a:	0c f0       	brlt	.+2      	; 0x276e <_Z10gpshandlerv+0x32>
    276c:	6c c3       	rjmp	.+1752   	; 0x2e46 <_Z10gpshandlerv+0x70a>
	{
		//brechnung von Latitutde, Longitude, Zeit und Datum
		//Zeit
		gpsstunde =		(gpsdata[7] - '0')*10;
		gpsstunde +=	(gpsdata[8] - '0');
    276e:	09 ee       	ldi	r16, 0xE9	; 233
    2770:	12 e0       	ldi	r17, 0x02	; 2
    2772:	f8 01       	movw	r30, r16
    2774:	80 85       	ldd	r24, Z+8	; 0x08
    2776:	21 ed       	ldi	r18, 0xD1	; 209
    2778:	28 0f       	add	r18, r24
void gpshandler(){
	if ((gpsstatus&(1<<complete)) && (gpsstatus&(1<<fix)))
	{
		//brechnung von Latitutde, Longitude, Zeit und Datum
		//Zeit
		gpsstunde =		(gpsdata[7] - '0')*10;
    277a:	87 81       	ldd	r24, Z+7	; 0x07
    277c:	88 0f       	add	r24, r24
    277e:	80 56       	subi	r24, 0x60	; 96
    2780:	98 2f       	mov	r25, r24
    2782:	99 0f       	add	r25, r25
    2784:	99 0f       	add	r25, r25
    2786:	89 0f       	add	r24, r25
		gpsstunde +=	(gpsdata[8] - '0');
		gpsstunde += GMT;
    2788:	82 0f       	add	r24, r18
    278a:	80 93 db 02 	sts	0x02DB, r24
    278e:	82 85       	ldd	r24, Z+10	; 0x0a
    2790:	20 ed       	ldi	r18, 0xD0	; 208
    2792:	28 0f       	add	r18, r24
		gpsminute =		(gpsdata[9] - '0')*10;
    2794:	81 85       	ldd	r24, Z+9	; 0x09
    2796:	88 0f       	add	r24, r24
    2798:	80 56       	subi	r24, 0x60	; 96
    279a:	98 2f       	mov	r25, r24
    279c:	99 0f       	add	r25, r25
    279e:	99 0f       	add	r25, r25
    27a0:	89 0f       	add	r24, r25
		gpsminute +=	(gpsdata[10] - '0');
    27a2:	82 0f       	add	r24, r18
    27a4:	80 93 da 02 	sts	0x02DA, r24
    27a8:	84 85       	ldd	r24, Z+12	; 0x0c
    27aa:	20 ed       	ldi	r18, 0xD0	; 208
    27ac:	28 0f       	add	r18, r24
		gpssekunde =	(gpsdata[11] - '0')*10;
    27ae:	83 85       	ldd	r24, Z+11	; 0x0b
    27b0:	88 0f       	add	r24, r24
    27b2:	80 56       	subi	r24, 0x60	; 96
    27b4:	98 2f       	mov	r25, r24
    27b6:	99 0f       	add	r25, r25
    27b8:	99 0f       	add	r25, r25
    27ba:	89 0f       	add	r24, r25
		gpssekunde +=	(gpsdata[12] - '0');
    27bc:	82 0f       	add	r24, r18
    27be:	80 93 d9 02 	sts	0x02D9, r24
		
		//Latitude
		lat =	(gpsdata[20] - '0')*10;
		lat +=	(gpsdata[21] - '0');
		float latmin =	(gpsdata[22] - '0')*10;
    27c2:	86 89       	ldd	r24, Z+22	; 0x16
    27c4:	90 e0       	ldi	r25, 0x00	; 0
    27c6:	c0 97       	sbiw	r24, 0x30	; 48
    27c8:	bc 01       	movw	r22, r24
    27ca:	66 0f       	add	r22, r22
    27cc:	77 1f       	adc	r23, r23
    27ce:	88 0f       	add	r24, r24
    27d0:	99 1f       	adc	r25, r25
    27d2:	88 0f       	add	r24, r24
    27d4:	99 1f       	adc	r25, r25
    27d6:	88 0f       	add	r24, r24
    27d8:	99 1f       	adc	r25, r25
    27da:	68 0f       	add	r22, r24
    27dc:	79 1f       	adc	r23, r25
    27de:	07 2e       	mov	r0, r23
    27e0:	00 0c       	add	r0, r0
    27e2:	88 0b       	sbc	r24, r24
    27e4:	99 0b       	sbc	r25, r25
    27e6:	0e 94 90 21 	call	0x4320	; 0x4320 <__floatsisf>
    27ea:	4b 01       	movw	r8, r22
    27ec:	5c 01       	movw	r10, r24
		latmin +=		(gpsdata[23] - '0');
    27ee:	f8 01       	movw	r30, r16
    27f0:	87 89       	ldd	r24, Z+23	; 0x17
    27f2:	90 e0       	ldi	r25, 0x00	; 0
    27f4:	c0 97       	sbiw	r24, 0x30	; 48
    27f6:	bc 01       	movw	r22, r24
    27f8:	99 0f       	add	r25, r25
    27fa:	88 0b       	sbc	r24, r24
    27fc:	99 0b       	sbc	r25, r25
    27fe:	0e 94 90 21 	call	0x4320	; 0x4320 <__floatsisf>
    2802:	a5 01       	movw	r20, r10
    2804:	94 01       	movw	r18, r8
    2806:	0e 94 8e 20 	call	0x411c	; 0x411c <__addsf3>
    280a:	4b 01       	movw	r8, r22
    280c:	5c 01       	movw	r10, r24
		latmin +=		(gpsdata[25] - '0')/10.0;
    280e:	f8 01       	movw	r30, r16
    2810:	81 8d       	ldd	r24, Z+25	; 0x19
    2812:	90 e0       	ldi	r25, 0x00	; 0
    2814:	c0 97       	sbiw	r24, 0x30	; 48
    2816:	bc 01       	movw	r22, r24
    2818:	99 0f       	add	r25, r25
    281a:	88 0b       	sbc	r24, r24
    281c:	99 0b       	sbc	r25, r25
    281e:	0e 94 90 21 	call	0x4320	; 0x4320 <__floatsisf>
    2822:	20 e0       	ldi	r18, 0x00	; 0
    2824:	30 e0       	ldi	r19, 0x00	; 0
    2826:	40 e2       	ldi	r20, 0x20	; 32
    2828:	51 e4       	ldi	r21, 0x41	; 65
    282a:	0e 94 f5 20 	call	0x41ea	; 0x41ea <__divsf3>
    282e:	a5 01       	movw	r20, r10
    2830:	94 01       	movw	r18, r8
    2832:	0e 94 8e 20 	call	0x411c	; 0x411c <__addsf3>
    2836:	4b 01       	movw	r8, r22
    2838:	5c 01       	movw	r10, r24
		latmin +=		(gpsdata[26] - '0')/100.0;
    283a:	f8 01       	movw	r30, r16
    283c:	82 8d       	ldd	r24, Z+26	; 0x1a
    283e:	90 e0       	ldi	r25, 0x00	; 0
    2840:	c0 97       	sbiw	r24, 0x30	; 48
    2842:	bc 01       	movw	r22, r24
    2844:	99 0f       	add	r25, r25
    2846:	88 0b       	sbc	r24, r24
    2848:	99 0b       	sbc	r25, r25
    284a:	0e 94 90 21 	call	0x4320	; 0x4320 <__floatsisf>
    284e:	20 e0       	ldi	r18, 0x00	; 0
    2850:	30 e0       	ldi	r19, 0x00	; 0
    2852:	48 ec       	ldi	r20, 0xC8	; 200
    2854:	52 e4       	ldi	r21, 0x42	; 66
    2856:	0e 94 f5 20 	call	0x41ea	; 0x41ea <__divsf3>
    285a:	a5 01       	movw	r20, r10
    285c:	94 01       	movw	r18, r8
    285e:	0e 94 8e 20 	call	0x411c	; 0x411c <__addsf3>
    2862:	4b 01       	movw	r8, r22
    2864:	5c 01       	movw	r10, r24
		latmin +=		(gpsdata[27] - '0')/1000.0;
    2866:	f8 01       	movw	r30, r16
    2868:	83 8d       	ldd	r24, Z+27	; 0x1b
    286a:	90 e0       	ldi	r25, 0x00	; 0
    286c:	c0 97       	sbiw	r24, 0x30	; 48
    286e:	bc 01       	movw	r22, r24
    2870:	99 0f       	add	r25, r25
    2872:	88 0b       	sbc	r24, r24
    2874:	99 0b       	sbc	r25, r25
    2876:	0e 94 90 21 	call	0x4320	; 0x4320 <__floatsisf>
    287a:	20 e0       	ldi	r18, 0x00	; 0
    287c:	30 e0       	ldi	r19, 0x00	; 0
    287e:	4a e7       	ldi	r20, 0x7A	; 122
    2880:	54 e4       	ldi	r21, 0x44	; 68
    2882:	0e 94 f5 20 	call	0x41ea	; 0x41ea <__divsf3>
    2886:	a5 01       	movw	r20, r10
    2888:	94 01       	movw	r18, r8
    288a:	0e 94 8e 20 	call	0x411c	; 0x411c <__addsf3>
    288e:	4b 01       	movw	r8, r22
    2890:	5c 01       	movw	r10, r24
		gpsminute +=	(gpsdata[10] - '0');
		gpssekunde =	(gpsdata[11] - '0')*10;
		gpssekunde +=	(gpsdata[12] - '0');
		
		//Latitude
		lat =	(gpsdata[20] - '0')*10;
    2892:	f8 01       	movw	r30, r16
    2894:	44 89       	ldd	r20, Z+20	; 0x14
    2896:	50 e0       	ldi	r21, 0x00	; 0
    2898:	40 53       	subi	r20, 0x30	; 48
    289a:	51 09       	sbc	r21, r1
    289c:	ca 01       	movw	r24, r20
    289e:	88 0f       	add	r24, r24
    28a0:	99 1f       	adc	r25, r25
    28a2:	44 0f       	add	r20, r20
    28a4:	55 1f       	adc	r21, r21
    28a6:	44 0f       	add	r20, r20
    28a8:	55 1f       	adc	r21, r21
    28aa:	44 0f       	add	r20, r20
    28ac:	55 1f       	adc	r21, r21
    28ae:	84 0f       	add	r24, r20
    28b0:	95 1f       	adc	r25, r21
    28b2:	bc 01       	movw	r22, r24
    28b4:	99 0f       	add	r25, r25
    28b6:	88 0b       	sbc	r24, r24
    28b8:	99 0b       	sbc	r25, r25
    28ba:	0e 94 90 21 	call	0x4320	; 0x4320 <__floatsisf>
    28be:	2b 01       	movw	r4, r22
    28c0:	3c 01       	movw	r6, r24
		lat +=	(gpsdata[21] - '0');
    28c2:	f8 01       	movw	r30, r16
    28c4:	85 89       	ldd	r24, Z+21	; 0x15
    28c6:	90 e0       	ldi	r25, 0x00	; 0
    28c8:	c0 97       	sbiw	r24, 0x30	; 48
    28ca:	bc 01       	movw	r22, r24
    28cc:	99 0f       	add	r25, r25
    28ce:	88 0b       	sbc	r24, r24
    28d0:	99 0b       	sbc	r25, r25
    28d2:	0e 94 90 21 	call	0x4320	; 0x4320 <__floatsisf>
    28d6:	9b 01       	movw	r18, r22
    28d8:	ac 01       	movw	r20, r24
    28da:	c3 01       	movw	r24, r6
    28dc:	b2 01       	movw	r22, r4
    28de:	0e 94 8e 20 	call	0x411c	; 0x411c <__addsf3>
    28e2:	2b 01       	movw	r4, r22
    28e4:	3c 01       	movw	r6, r24
		float latmin =	(gpsdata[22] - '0')*10;
		latmin +=		(gpsdata[23] - '0');
		latmin +=		(gpsdata[25] - '0')/10.0;
		latmin +=		(gpsdata[26] - '0')/100.0;
		latmin +=		(gpsdata[27] - '0')/1000.0;
		latmin +=		(gpsdata[28] - '0')/10000.0;
    28e6:	f8 01       	movw	r30, r16
    28e8:	84 8d       	ldd	r24, Z+28	; 0x1c
    28ea:	90 e0       	ldi	r25, 0x00	; 0
    28ec:	c0 97       	sbiw	r24, 0x30	; 48
    28ee:	bc 01       	movw	r22, r24
    28f0:	99 0f       	add	r25, r25
    28f2:	88 0b       	sbc	r24, r24
    28f4:	99 0b       	sbc	r25, r25
    28f6:	0e 94 90 21 	call	0x4320	; 0x4320 <__floatsisf>
    28fa:	20 e0       	ldi	r18, 0x00	; 0
    28fc:	30 e4       	ldi	r19, 0x40	; 64
    28fe:	4c e1       	ldi	r20, 0x1C	; 28
    2900:	56 e4       	ldi	r21, 0x46	; 70
    2902:	0e 94 f5 20 	call	0x41ea	; 0x41ea <__divsf3>
    2906:	a5 01       	movw	r20, r10
    2908:	94 01       	movw	r18, r8
    290a:	0e 94 8e 20 	call	0x411c	; 0x411c <__addsf3>
		lat +=	latmin/60.0;
    290e:	20 e0       	ldi	r18, 0x00	; 0
    2910:	30 e0       	ldi	r19, 0x00	; 0
    2912:	40 e7       	ldi	r20, 0x70	; 112
    2914:	52 e4       	ldi	r21, 0x42	; 66
    2916:	0e 94 f5 20 	call	0x41ea	; 0x41ea <__divsf3>
    291a:	9b 01       	movw	r18, r22
    291c:	ac 01       	movw	r20, r24
    291e:	c3 01       	movw	r24, r6
    2920:	b2 01       	movw	r22, r4
    2922:	0e 94 8e 20 	call	0x411c	; 0x411c <__addsf3>
    2926:	60 93 e4 02 	sts	0x02E4, r22
    292a:	70 93 e5 02 	sts	0x02E5, r23
    292e:	80 93 e6 02 	sts	0x02E6, r24
    2932:	90 93 e7 02 	sts	0x02E7, r25
		if (gpsdata[30] != 'N')
    2936:	f8 01       	movw	r30, r16
    2938:	26 8d       	ldd	r18, Z+30	; 0x1e
    293a:	2e 34       	cpi	r18, 0x4E	; 78
    293c:	59 f0       	breq	.+22     	; 0x2954 <_Z10gpshandlerv+0x218>
		{
			lat *= -1;
    293e:	dc 01       	movw	r26, r24
    2940:	cb 01       	movw	r24, r22
    2942:	b0 58       	subi	r27, 0x80	; 128
    2944:	80 93 e4 02 	sts	0x02E4, r24
    2948:	90 93 e5 02 	sts	0x02E5, r25
    294c:	a0 93 e6 02 	sts	0x02E6, r26
    2950:	b0 93 e7 02 	sts	0x02E7, r27
		
		//Longitude
		lon =	(gpsdata[32] - '0')*100;
		lon +=	(gpsdata[33] - '0')*10;
		lon +=	(gpsdata[34] - '0');
		float lonmin =	(gpsdata[35] - '0')*10;
    2954:	09 ee       	ldi	r16, 0xE9	; 233
    2956:	12 e0       	ldi	r17, 0x02	; 2
    2958:	f8 01       	movw	r30, r16
    295a:	83 a1       	ldd	r24, Z+35	; 0x23
    295c:	90 e0       	ldi	r25, 0x00	; 0
    295e:	c0 97       	sbiw	r24, 0x30	; 48
    2960:	bc 01       	movw	r22, r24
    2962:	66 0f       	add	r22, r22
    2964:	77 1f       	adc	r23, r23
    2966:	88 0f       	add	r24, r24
    2968:	99 1f       	adc	r25, r25
    296a:	88 0f       	add	r24, r24
    296c:	99 1f       	adc	r25, r25
    296e:	88 0f       	add	r24, r24
    2970:	99 1f       	adc	r25, r25
    2972:	68 0f       	add	r22, r24
    2974:	79 1f       	adc	r23, r25
    2976:	07 2e       	mov	r0, r23
    2978:	00 0c       	add	r0, r0
    297a:	88 0b       	sbc	r24, r24
    297c:	99 0b       	sbc	r25, r25
    297e:	0e 94 90 21 	call	0x4320	; 0x4320 <__floatsisf>
    2982:	4b 01       	movw	r8, r22
    2984:	5c 01       	movw	r10, r24
		lonmin +=		(gpsdata[36] - '0');
    2986:	f8 01       	movw	r30, r16
    2988:	84 a1       	ldd	r24, Z+36	; 0x24
    298a:	90 e0       	ldi	r25, 0x00	; 0
    298c:	c0 97       	sbiw	r24, 0x30	; 48
    298e:	bc 01       	movw	r22, r24
    2990:	99 0f       	add	r25, r25
    2992:	88 0b       	sbc	r24, r24
    2994:	99 0b       	sbc	r25, r25
    2996:	0e 94 90 21 	call	0x4320	; 0x4320 <__floatsisf>
    299a:	a5 01       	movw	r20, r10
    299c:	94 01       	movw	r18, r8
    299e:	0e 94 8e 20 	call	0x411c	; 0x411c <__addsf3>
    29a2:	4b 01       	movw	r8, r22
    29a4:	5c 01       	movw	r10, r24
		lonmin +=		(gpsdata[38] - '0')/10.0;
    29a6:	f8 01       	movw	r30, r16
    29a8:	86 a1       	ldd	r24, Z+38	; 0x26
    29aa:	90 e0       	ldi	r25, 0x00	; 0
    29ac:	c0 97       	sbiw	r24, 0x30	; 48
    29ae:	bc 01       	movw	r22, r24
    29b0:	99 0f       	add	r25, r25
    29b2:	88 0b       	sbc	r24, r24
    29b4:	99 0b       	sbc	r25, r25
    29b6:	0e 94 90 21 	call	0x4320	; 0x4320 <__floatsisf>
    29ba:	20 e0       	ldi	r18, 0x00	; 0
    29bc:	30 e0       	ldi	r19, 0x00	; 0
    29be:	40 e2       	ldi	r20, 0x20	; 32
    29c0:	51 e4       	ldi	r21, 0x41	; 65
    29c2:	0e 94 f5 20 	call	0x41ea	; 0x41ea <__divsf3>
    29c6:	a5 01       	movw	r20, r10
    29c8:	94 01       	movw	r18, r8
    29ca:	0e 94 8e 20 	call	0x411c	; 0x411c <__addsf3>
    29ce:	4b 01       	movw	r8, r22
    29d0:	5c 01       	movw	r10, r24
		lonmin +=		(gpsdata[39] - '0')/100.0;
    29d2:	f8 01       	movw	r30, r16
    29d4:	87 a1       	ldd	r24, Z+39	; 0x27
    29d6:	90 e0       	ldi	r25, 0x00	; 0
    29d8:	c0 97       	sbiw	r24, 0x30	; 48
    29da:	bc 01       	movw	r22, r24
    29dc:	99 0f       	add	r25, r25
    29de:	88 0b       	sbc	r24, r24
    29e0:	99 0b       	sbc	r25, r25
    29e2:	0e 94 90 21 	call	0x4320	; 0x4320 <__floatsisf>
    29e6:	20 e0       	ldi	r18, 0x00	; 0
    29e8:	30 e0       	ldi	r19, 0x00	; 0
    29ea:	48 ec       	ldi	r20, 0xC8	; 200
    29ec:	52 e4       	ldi	r21, 0x42	; 66
    29ee:	0e 94 f5 20 	call	0x41ea	; 0x41ea <__divsf3>
    29f2:	a5 01       	movw	r20, r10
    29f4:	94 01       	movw	r18, r8
    29f6:	0e 94 8e 20 	call	0x411c	; 0x411c <__addsf3>
    29fa:	4b 01       	movw	r8, r22
    29fc:	5c 01       	movw	r10, r24
		lonmin +=		(gpsdata[40] - '0')/1000.0;
    29fe:	f8 01       	movw	r30, r16
    2a00:	80 a5       	ldd	r24, Z+40	; 0x28
    2a02:	90 e0       	ldi	r25, 0x00	; 0
    2a04:	c0 97       	sbiw	r24, 0x30	; 48
    2a06:	bc 01       	movw	r22, r24
    2a08:	99 0f       	add	r25, r25
    2a0a:	88 0b       	sbc	r24, r24
    2a0c:	99 0b       	sbc	r25, r25
    2a0e:	0e 94 90 21 	call	0x4320	; 0x4320 <__floatsisf>
    2a12:	20 e0       	ldi	r18, 0x00	; 0
    2a14:	30 e0       	ldi	r19, 0x00	; 0
    2a16:	4a e7       	ldi	r20, 0x7A	; 122
    2a18:	54 e4       	ldi	r21, 0x44	; 68
    2a1a:	0e 94 f5 20 	call	0x41ea	; 0x41ea <__divsf3>
    2a1e:	a5 01       	movw	r20, r10
    2a20:	94 01       	movw	r18, r8
    2a22:	0e 94 8e 20 	call	0x411c	; 0x411c <__addsf3>
    2a26:	4b 01       	movw	r8, r22
    2a28:	5c 01       	movw	r10, r24
		{
			lat *= -1;
		}
		
		//Longitude
		lon =	(gpsdata[32] - '0')*100;
    2a2a:	f8 01       	movw	r30, r16
    2a2c:	80 a1       	ldd	r24, Z+32	; 0x20
    2a2e:	90 e0       	ldi	r25, 0x00	; 0
    2a30:	c0 97       	sbiw	r24, 0x30	; 48
    2a32:	24 e6       	ldi	r18, 0x64	; 100
    2a34:	28 9f       	mul	r18, r24
    2a36:	b0 01       	movw	r22, r0
    2a38:	29 9f       	mul	r18, r25
    2a3a:	70 0d       	add	r23, r0
    2a3c:	11 24       	eor	r1, r1
    2a3e:	07 2e       	mov	r0, r23
    2a40:	00 0c       	add	r0, r0
    2a42:	88 0b       	sbc	r24, r24
    2a44:	99 0b       	sbc	r25, r25
    2a46:	0e 94 90 21 	call	0x4320	; 0x4320 <__floatsisf>
    2a4a:	2b 01       	movw	r4, r22
    2a4c:	3c 01       	movw	r6, r24
		lon +=	(gpsdata[33] - '0')*10;
    2a4e:	f8 01       	movw	r30, r16
    2a50:	21 a1       	ldd	r18, Z+33	; 0x21
    2a52:	30 e0       	ldi	r19, 0x00	; 0
    2a54:	20 53       	subi	r18, 0x30	; 48
    2a56:	31 09       	sbc	r19, r1
    2a58:	c9 01       	movw	r24, r18
    2a5a:	88 0f       	add	r24, r24
    2a5c:	99 1f       	adc	r25, r25
    2a5e:	22 0f       	add	r18, r18
    2a60:	33 1f       	adc	r19, r19
    2a62:	22 0f       	add	r18, r18
    2a64:	33 1f       	adc	r19, r19
    2a66:	22 0f       	add	r18, r18
    2a68:	33 1f       	adc	r19, r19
    2a6a:	82 0f       	add	r24, r18
    2a6c:	93 1f       	adc	r25, r19
    2a6e:	bc 01       	movw	r22, r24
    2a70:	99 0f       	add	r25, r25
    2a72:	88 0b       	sbc	r24, r24
    2a74:	99 0b       	sbc	r25, r25
    2a76:	0e 94 90 21 	call	0x4320	; 0x4320 <__floatsisf>
    2a7a:	9b 01       	movw	r18, r22
    2a7c:	ac 01       	movw	r20, r24
    2a7e:	c3 01       	movw	r24, r6
    2a80:	b2 01       	movw	r22, r4
    2a82:	0e 94 8e 20 	call	0x411c	; 0x411c <__addsf3>
    2a86:	2b 01       	movw	r4, r22
    2a88:	3c 01       	movw	r6, r24
		lon +=	(gpsdata[34] - '0');
    2a8a:	f8 01       	movw	r30, r16
    2a8c:	82 a1       	ldd	r24, Z+34	; 0x22
    2a8e:	90 e0       	ldi	r25, 0x00	; 0
    2a90:	c0 97       	sbiw	r24, 0x30	; 48
    2a92:	bc 01       	movw	r22, r24
    2a94:	99 0f       	add	r25, r25
    2a96:	88 0b       	sbc	r24, r24
    2a98:	99 0b       	sbc	r25, r25
    2a9a:	0e 94 90 21 	call	0x4320	; 0x4320 <__floatsisf>
    2a9e:	9b 01       	movw	r18, r22
    2aa0:	ac 01       	movw	r20, r24
    2aa2:	c3 01       	movw	r24, r6
    2aa4:	b2 01       	movw	r22, r4
    2aa6:	0e 94 8e 20 	call	0x411c	; 0x411c <__addsf3>
    2aaa:	2b 01       	movw	r4, r22
    2aac:	3c 01       	movw	r6, r24
		float lonmin =	(gpsdata[35] - '0')*10;
		lonmin +=		(gpsdata[36] - '0');
		lonmin +=		(gpsdata[38] - '0')/10.0;
		lonmin +=		(gpsdata[39] - '0')/100.0;
		lonmin +=		(gpsdata[40] - '0')/1000.0;
		lonmin +=		(gpsdata[41] - '0')/10000.0;
    2aae:	f8 01       	movw	r30, r16
    2ab0:	81 a5       	ldd	r24, Z+41	; 0x29
    2ab2:	90 e0       	ldi	r25, 0x00	; 0
    2ab4:	c0 97       	sbiw	r24, 0x30	; 48
    2ab6:	bc 01       	movw	r22, r24
    2ab8:	99 0f       	add	r25, r25
    2aba:	88 0b       	sbc	r24, r24
    2abc:	99 0b       	sbc	r25, r25
    2abe:	0e 94 90 21 	call	0x4320	; 0x4320 <__floatsisf>
    2ac2:	20 e0       	ldi	r18, 0x00	; 0
    2ac4:	30 e4       	ldi	r19, 0x40	; 64
    2ac6:	4c e1       	ldi	r20, 0x1C	; 28
    2ac8:	56 e4       	ldi	r21, 0x46	; 70
    2aca:	0e 94 f5 20 	call	0x41ea	; 0x41ea <__divsf3>
    2ace:	a5 01       	movw	r20, r10
    2ad0:	94 01       	movw	r18, r8
    2ad2:	0e 94 8e 20 	call	0x411c	; 0x411c <__addsf3>
		lon +=			lonmin/60.0;
    2ad6:	20 e0       	ldi	r18, 0x00	; 0
    2ad8:	30 e0       	ldi	r19, 0x00	; 0
    2ada:	40 e7       	ldi	r20, 0x70	; 112
    2adc:	52 e4       	ldi	r21, 0x42	; 66
    2ade:	0e 94 f5 20 	call	0x41ea	; 0x41ea <__divsf3>
    2ae2:	9b 01       	movw	r18, r22
    2ae4:	ac 01       	movw	r20, r24
    2ae6:	c3 01       	movw	r24, r6
    2ae8:	b2 01       	movw	r22, r4
    2aea:	0e 94 8e 20 	call	0x411c	; 0x411c <__addsf3>
    2aee:	60 93 e0 02 	sts	0x02E0, r22
    2af2:	70 93 e1 02 	sts	0x02E1, r23
    2af6:	80 93 e2 02 	sts	0x02E2, r24
    2afa:	90 93 e3 02 	sts	0x02E3, r25
		if (gpsdata[43] != 'E')
    2afe:	f8 01       	movw	r30, r16
    2b00:	23 a5       	ldd	r18, Z+43	; 0x2b
    2b02:	25 34       	cpi	r18, 0x45	; 69
    2b04:	59 f0       	breq	.+22     	; 0x2b1c <_Z10gpshandlerv+0x3e0>
		{
			lon *= -1;
    2b06:	dc 01       	movw	r26, r24
    2b08:	cb 01       	movw	r24, r22
    2b0a:	b0 58       	subi	r27, 0x80	; 128
    2b0c:	80 93 e0 02 	sts	0x02E0, r24
    2b10:	90 93 e1 02 	sts	0x02E1, r25
    2b14:	a0 93 e2 02 	sts	0x02E2, r26
    2b18:	b0 93 e3 02 	sts	0x02E3, r27
		}
		//Speed 
		volatile uint8_t counter = 45;
    2b1c:	8d e2       	ldi	r24, 0x2D	; 45
    2b1e:	8c 83       	std	Y+4, r24	; 0x04
		uint8_t weiter = true;
		while (weiter)
		{
			if (gpsdata[counter]=='.')
    2b20:	ec 81       	ldd	r30, Y+4	; 0x04
    2b22:	f0 e0       	ldi	r31, 0x00	; 0
    2b24:	e7 51       	subi	r30, 0x17	; 23
    2b26:	fd 4f       	sbci	r31, 0xFD	; 253
    2b28:	80 81       	ld	r24, Z
    2b2a:	8e 32       	cpi	r24, 0x2E	; 46
    2b2c:	91 f4       	brne	.+36     	; 0x2b52 <_Z10gpshandlerv+0x416>
			{
				weiter=false;
				counter--;
    2b2e:	8c 81       	ldd	r24, Y+4	; 0x04
    2b30:	81 50       	subi	r24, 0x01	; 1
    2b32:	8c 83       	std	Y+4, r24	; 0x04
			}
			counter++;
    2b34:	8c 81       	ldd	r24, Y+4	; 0x04
    2b36:	8f 5f       	subi	r24, 0xFF	; 255
    2b38:	8c 83       	std	Y+4, r24	; 0x04
		}
		
		gpsspeed = 0;
    2b3a:	10 92 dc 02 	sts	0x02DC, r1
    2b3e:	10 92 dd 02 	sts	0x02DD, r1
    2b42:	10 92 de 02 	sts	0x02DE, r1
    2b46:	10 92 df 02 	sts	0x02DF, r1
		for(uint8_t i=45;i<counter;i++){
    2b4a:	8c 81       	ldd	r24, Y+4	; 0x04
    2b4c:	8e 32       	cpi	r24, 0x2E	; 46
    2b4e:	28 f4       	brcc	.+10     	; 0x2b5a <_Z10gpshandlerv+0x41e>
    2b50:	47 c0       	rjmp	.+142    	; 0x2be0 <_Z10gpshandlerv+0x4a4>
			if (gpsdata[counter]=='.')
			{
				weiter=false;
				counter--;
			}
			counter++;
    2b52:	8c 81       	ldd	r24, Y+4	; 0x04
    2b54:	8f 5f       	subi	r24, 0xFF	; 255
    2b56:	8c 83       	std	Y+4, r24	; 0x04
    2b58:	e3 cf       	rjmp	.-58     	; 0x2b20 <_Z10gpshandlerv+0x3e4>
		}
		
		gpsspeed = 0;
		for(uint8_t i=45;i<counter;i++){
    2b5a:	81 2c       	mov	r8, r1
    2b5c:	91 2c       	mov	r9, r1
    2b5e:	54 01       	movw	r10, r8
    2b60:	0f 2e       	mov	r0, r31
    2b62:	fd e2       	ldi	r31, 0x2D	; 45
    2b64:	ff 2e       	mov	r15, r31
    2b66:	f0 2d       	mov	r31, r0
			gpsspeed += (gpsdata[i]-'0')*pow(10,(counter-i-1));
    2b68:	0f 2d       	mov	r16, r15
    2b6a:	10 e0       	ldi	r17, 0x00	; 0
    2b6c:	8c 81       	ldd	r24, Y+4	; 0x04
    2b6e:	90 e0       	ldi	r25, 0x00	; 0
    2b70:	80 1b       	sub	r24, r16
    2b72:	91 0b       	sbc	r25, r17
    2b74:	01 97       	sbiw	r24, 0x01	; 1
    2b76:	bc 01       	movw	r22, r24
    2b78:	99 0f       	add	r25, r25
    2b7a:	88 0b       	sbc	r24, r24
    2b7c:	99 0b       	sbc	r25, r25
    2b7e:	0e 94 90 21 	call	0x4320	; 0x4320 <__floatsisf>
    2b82:	9b 01       	movw	r18, r22
    2b84:	ac 01       	movw	r20, r24
    2b86:	60 e0       	ldi	r22, 0x00	; 0
    2b88:	70 e0       	ldi	r23, 0x00	; 0
    2b8a:	80 e2       	ldi	r24, 0x20	; 32
    2b8c:	91 e4       	ldi	r25, 0x41	; 65
    2b8e:	0e 94 0c 23 	call	0x4618	; 0x4618 <pow>
    2b92:	2b 01       	movw	r4, r22
    2b94:	3c 01       	movw	r6, r24
    2b96:	f8 01       	movw	r30, r16
    2b98:	e7 51       	subi	r30, 0x17	; 23
    2b9a:	fd 4f       	sbci	r31, 0xFD	; 253
    2b9c:	60 81       	ld	r22, Z
    2b9e:	70 e0       	ldi	r23, 0x00	; 0
    2ba0:	60 53       	subi	r22, 0x30	; 48
    2ba2:	71 09       	sbc	r23, r1
    2ba4:	07 2e       	mov	r0, r23
    2ba6:	00 0c       	add	r0, r0
    2ba8:	88 0b       	sbc	r24, r24
    2baa:	99 0b       	sbc	r25, r25
    2bac:	0e 94 90 21 	call	0x4320	; 0x4320 <__floatsisf>
    2bb0:	a3 01       	movw	r20, r6
    2bb2:	92 01       	movw	r18, r4
    2bb4:	0e 94 a9 22 	call	0x4552	; 0x4552 <__mulsf3>
    2bb8:	9b 01       	movw	r18, r22
    2bba:	ac 01       	movw	r20, r24
    2bbc:	c5 01       	movw	r24, r10
    2bbe:	b4 01       	movw	r22, r8
    2bc0:	0e 94 8e 20 	call	0x411c	; 0x411c <__addsf3>
    2bc4:	4b 01       	movw	r8, r22
    2bc6:	5c 01       	movw	r10, r24
			}
			counter++;
		}
		
		gpsspeed = 0;
		for(uint8_t i=45;i<counter;i++){
    2bc8:	f3 94       	inc	r15
    2bca:	8c 81       	ldd	r24, Y+4	; 0x04
    2bcc:	f8 16       	cp	r15, r24
    2bce:	60 f2       	brcs	.-104    	; 0x2b68 <_Z10gpshandlerv+0x42c>
    2bd0:	80 92 dc 02 	sts	0x02DC, r8
    2bd4:	90 92 dd 02 	sts	0x02DD, r9
    2bd8:	a0 92 de 02 	sts	0x02DE, r10
    2bdc:	b0 92 df 02 	sts	0x02DF, r11
			gpsspeed += (gpsdata[i]-'0')*pow(10,(counter-i-1));
		}
		gpsspeed += (gpsdata[counter+1]-'0')*0.1;
    2be0:	ec 81       	ldd	r30, Y+4	; 0x04
		gpsspeed += (gpsdata[counter+2]-'0')*0.01;
    2be2:	1c 81       	ldd	r17, Y+4	; 0x04
		
		gpsspeed = 0;
		for(uint8_t i=45;i<counter;i++){
			gpsspeed += (gpsdata[i]-'0')*pow(10,(counter-i-1));
		}
		gpsspeed += (gpsdata[counter+1]-'0')*0.1;
    2be4:	f0 e0       	ldi	r31, 0x00	; 0
    2be6:	e7 51       	subi	r30, 0x17	; 23
    2be8:	fd 4f       	sbci	r31, 0xFD	; 253
    2bea:	61 81       	ldd	r22, Z+1	; 0x01
    2bec:	70 e0       	ldi	r23, 0x00	; 0
    2bee:	60 53       	subi	r22, 0x30	; 48
    2bf0:	71 09       	sbc	r23, r1
    2bf2:	07 2e       	mov	r0, r23
    2bf4:	00 0c       	add	r0, r0
    2bf6:	88 0b       	sbc	r24, r24
    2bf8:	99 0b       	sbc	r25, r25
    2bfa:	0e 94 90 21 	call	0x4320	; 0x4320 <__floatsisf>
    2bfe:	2d ec       	ldi	r18, 0xCD	; 205
    2c00:	3c ec       	ldi	r19, 0xCC	; 204
    2c02:	4c ec       	ldi	r20, 0xCC	; 204
    2c04:	5d e3       	ldi	r21, 0x3D	; 61
    2c06:	0e 94 a9 22 	call	0x4552	; 0x4552 <__mulsf3>
    2c0a:	20 91 dc 02 	lds	r18, 0x02DC
    2c0e:	30 91 dd 02 	lds	r19, 0x02DD
    2c12:	40 91 de 02 	lds	r20, 0x02DE
    2c16:	50 91 df 02 	lds	r21, 0x02DF
    2c1a:	0e 94 8e 20 	call	0x411c	; 0x411c <__addsf3>
    2c1e:	4b 01       	movw	r8, r22
    2c20:	5c 01       	movw	r10, r24
		gpsspeed += (gpsdata[counter+2]-'0')*0.01;
    2c22:	e1 2f       	mov	r30, r17
    2c24:	f0 e0       	ldi	r31, 0x00	; 0
    2c26:	e7 51       	subi	r30, 0x17	; 23
    2c28:	fd 4f       	sbci	r31, 0xFD	; 253
    2c2a:	82 81       	ldd	r24, Z+2	; 0x02
    2c2c:	90 e0       	ldi	r25, 0x00	; 0
    2c2e:	c0 97       	sbiw	r24, 0x30	; 48
    2c30:	bc 01       	movw	r22, r24
    2c32:	99 0f       	add	r25, r25
    2c34:	88 0b       	sbc	r24, r24
    2c36:	99 0b       	sbc	r25, r25
    2c38:	0e 94 90 21 	call	0x4320	; 0x4320 <__floatsisf>
    2c3c:	2a e0       	ldi	r18, 0x0A	; 10
    2c3e:	37 ed       	ldi	r19, 0xD7	; 215
    2c40:	43 e2       	ldi	r20, 0x23	; 35
    2c42:	5c e3       	ldi	r21, 0x3C	; 60
    2c44:	0e 94 a9 22 	call	0x4552	; 0x4552 <__mulsf3>
    2c48:	9b 01       	movw	r18, r22
    2c4a:	ac 01       	movw	r20, r24
    2c4c:	c5 01       	movw	r24, r10
    2c4e:	b4 01       	movw	r22, r8
    2c50:	0e 94 8e 20 	call	0x411c	; 0x411c <__addsf3>
		//umrechnen knoten in kmh
		gpsspeed *= 1.852;
    2c54:	26 e5       	ldi	r18, 0x56	; 86
    2c56:	3e e0       	ldi	r19, 0x0E	; 14
    2c58:	4d ee       	ldi	r20, 0xED	; 237
    2c5a:	5f e3       	ldi	r21, 0x3F	; 63
    2c5c:	0e 94 a9 22 	call	0x4552	; 0x4552 <__mulsf3>
    2c60:	60 93 dc 02 	sts	0x02DC, r22
    2c64:	70 93 dd 02 	sts	0x02DD, r23
    2c68:	80 93 de 02 	sts	0x02DE, r24
    2c6c:	90 93 df 02 	sts	0x02DF, r25
		
		//date
		counter =19;
    2c70:	83 e1       	ldi	r24, 0x13	; 19
    2c72:	8c 83       	std	Y+4, r24	; 0x04
		volatile uint8_t nichterreicht = 0;
    2c74:	1b 82       	std	Y+3, r1	; 0x03
		
		while (nichterreicht < 7)
    2c76:	8b 81       	ldd	r24, Y+3	; 0x03
    2c78:	87 30       	cpi	r24, 0x07	; 7
    2c7a:	80 f4       	brcc	.+32     	; 0x2c9c <_Z10gpshandlerv+0x560>
		{
			if (gpsdata[counter] == ',')
    2c7c:	ec 81       	ldd	r30, Y+4	; 0x04
    2c7e:	f0 e0       	ldi	r31, 0x00	; 0
    2c80:	e7 51       	subi	r30, 0x17	; 23
    2c82:	fd 4f       	sbci	r31, 0xFD	; 253
    2c84:	80 81       	ld	r24, Z
    2c86:	8c 32       	cpi	r24, 0x2C	; 44
    2c88:	19 f4       	brne	.+6      	; 0x2c90 <_Z10gpshandlerv+0x554>
			{
				nichterreicht++;
    2c8a:	8b 81       	ldd	r24, Y+3	; 0x03
    2c8c:	8f 5f       	subi	r24, 0xFF	; 255
    2c8e:	8b 83       	std	Y+3, r24	; 0x03
			}
			counter++;
    2c90:	8c 81       	ldd	r24, Y+4	; 0x04
    2c92:	8f 5f       	subi	r24, 0xFF	; 255
    2c94:	8c 83       	std	Y+4, r24	; 0x04
		
		//date
		counter =19;
		volatile uint8_t nichterreicht = 0;
		
		while (nichterreicht < 7)
    2c96:	8b 81       	ldd	r24, Y+3	; 0x03
    2c98:	87 30       	cpi	r24, 0x07	; 7
    2c9a:	80 f3       	brcs	.-32     	; 0x2c7c <_Z10gpshandlerv+0x540>
			}
			counter++;
		}
		
		//Datum
		gpsTag =	(gpsdata[counter+0] - '0')*10;
    2c9c:	ac 81       	ldd	r26, Y+4	; 0x04
		gpsTag +=	(gpsdata[counter+1] - '0');
    2c9e:	ec 81       	ldd	r30, Y+4	; 0x04
			}
			counter++;
		}
		
		//Datum
		gpsTag =	(gpsdata[counter+0] - '0')*10;
    2ca0:	b0 e0       	ldi	r27, 0x00	; 0
    2ca2:	a7 51       	subi	r26, 0x17	; 23
    2ca4:	bd 4f       	sbci	r27, 0xFD	; 253
    2ca6:	8c 91       	ld	r24, X
    2ca8:	88 0f       	add	r24, r24
    2caa:	80 56       	subi	r24, 0x60	; 96
    2cac:	28 2f       	mov	r18, r24
    2cae:	22 0f       	add	r18, r18
    2cb0:	22 0f       	add	r18, r18
    2cb2:	28 0f       	add	r18, r24
		gpsTag +=	(gpsdata[counter+1] - '0');
    2cb4:	f0 e0       	ldi	r31, 0x00	; 0
    2cb6:	e7 51       	subi	r30, 0x17	; 23
    2cb8:	fd 4f       	sbci	r31, 0xFD	; 253
    2cba:	81 81       	ldd	r24, Z+1	; 0x01
    2cbc:	90 e0       	ldi	r25, 0x00	; 0
    2cbe:	c0 97       	sbiw	r24, 0x30	; 48
    2cc0:	82 0f       	add	r24, r18
    2cc2:	91 1d       	adc	r25, r1
    2cc4:	80 93 d8 02 	sts	0x02D8, r24
		gpsMonat =	(gpsdata[counter+2] - '0')*10;
    2cc8:	ac 81       	ldd	r26, Y+4	; 0x04
		gpsMonat +=	(gpsdata[counter+3] - '0');
    2cca:	ec 81       	ldd	r30, Y+4	; 0x04
		}
		
		//Datum
		gpsTag =	(gpsdata[counter+0] - '0')*10;
		gpsTag +=	(gpsdata[counter+1] - '0');
		gpsMonat =	(gpsdata[counter+2] - '0')*10;
    2ccc:	b0 e0       	ldi	r27, 0x00	; 0
    2cce:	a7 51       	subi	r26, 0x17	; 23
    2cd0:	bd 4f       	sbci	r27, 0xFD	; 253
    2cd2:	12 96       	adiw	r26, 0x02	; 2
    2cd4:	8c 91       	ld	r24, X
    2cd6:	88 0f       	add	r24, r24
    2cd8:	80 56       	subi	r24, 0x60	; 96
    2cda:	28 2f       	mov	r18, r24
    2cdc:	22 0f       	add	r18, r18
    2cde:	22 0f       	add	r18, r18
    2ce0:	28 0f       	add	r18, r24
		gpsMonat +=	(gpsdata[counter+3] - '0');
    2ce2:	f0 e0       	ldi	r31, 0x00	; 0
    2ce4:	e7 51       	subi	r30, 0x17	; 23
    2ce6:	fd 4f       	sbci	r31, 0xFD	; 253
    2ce8:	83 81       	ldd	r24, Z+3	; 0x03
    2cea:	90 e0       	ldi	r25, 0x00	; 0
    2cec:	c0 97       	sbiw	r24, 0x30	; 48
    2cee:	82 0f       	add	r24, r18
    2cf0:	91 1d       	adc	r25, r1
    2cf2:	80 93 d7 02 	sts	0x02D7, r24
		gpsJahr =	(gpsdata[counter+4] - '0')*10;
    2cf6:	ac 81       	ldd	r26, Y+4	; 0x04
		gpsJahr +=	(gpsdata[counter+5] - '0');
    2cf8:	ec 81       	ldd	r30, Y+4	; 0x04
		//Datum
		gpsTag =	(gpsdata[counter+0] - '0')*10;
		gpsTag +=	(gpsdata[counter+1] - '0');
		gpsMonat =	(gpsdata[counter+2] - '0')*10;
		gpsMonat +=	(gpsdata[counter+3] - '0');
		gpsJahr =	(gpsdata[counter+4] - '0')*10;
    2cfa:	b0 e0       	ldi	r27, 0x00	; 0
    2cfc:	a7 51       	subi	r26, 0x17	; 23
    2cfe:	bd 4f       	sbci	r27, 0xFD	; 253
    2d00:	14 96       	adiw	r26, 0x04	; 4
    2d02:	8c 91       	ld	r24, X
    2d04:	88 0f       	add	r24, r24
    2d06:	80 56       	subi	r24, 0x60	; 96
    2d08:	28 2f       	mov	r18, r24
    2d0a:	22 0f       	add	r18, r18
    2d0c:	22 0f       	add	r18, r18
    2d0e:	28 0f       	add	r18, r24
		gpsJahr +=	(gpsdata[counter+5] - '0');
    2d10:	f0 e0       	ldi	r31, 0x00	; 0
    2d12:	e7 51       	subi	r30, 0x17	; 23
    2d14:	fd 4f       	sbci	r31, 0xFD	; 253
    2d16:	85 81       	ldd	r24, Z+5	; 0x05
    2d18:	90 e0       	ldi	r25, 0x00	; 0
    2d1a:	c0 97       	sbiw	r24, 0x30	; 48
    2d1c:	82 0f       	add	r24, r18
    2d1e:	91 1d       	adc	r25, r1
    2d20:	80 93 d6 02 	sts	0x02D6, r24
		
		gpsstatus &= ~(1<<complete);
    2d24:	8e 2d       	mov	r24, r14
    2d26:	8b 7f       	andi	r24, 0xFB	; 251
    2d28:	80 93 31 03 	sts	0x0331, r24
    2d2c:	8c c0       	rjmp	.+280    	; 0x2e46 <_Z10gpshandlerv+0x70a>
	}
	else if ((gpsstatus&(1<<completenotvalid))  && (gpsstatus&(1<<fix)))
    2d2e:	e3 fe       	sbrs	r14, 3
    2d30:	8a c0       	rjmp	.+276    	; 0x2e46 <_Z10gpshandlerv+0x70a>
    2d32:	ee 20       	and	r14, r14
    2d34:	0c f0       	brlt	.+2      	; 0x2d38 <_Z10gpshandlerv+0x5fc>
    2d36:	87 c0       	rjmp	.+270    	; 0x2e46 <_Z10gpshandlerv+0x70a>
	{
		//Zeit
		gpsstunde =		(gpsdata[7] - '0')*10;
		gpsstunde +=	(gpsdata[8] - '0');
    2d38:	e9 ee       	ldi	r30, 0xE9	; 233
    2d3a:	f2 e0       	ldi	r31, 0x02	; 2
    2d3c:	80 85       	ldd	r24, Z+8	; 0x08
    2d3e:	21 ed       	ldi	r18, 0xD1	; 209
    2d40:	28 0f       	add	r18, r24
		gpsstatus &= ~(1<<complete);
	}
	else if ((gpsstatus&(1<<completenotvalid))  && (gpsstatus&(1<<fix)))
	{
		//Zeit
		gpsstunde =		(gpsdata[7] - '0')*10;
    2d42:	87 81       	ldd	r24, Z+7	; 0x07
    2d44:	88 0f       	add	r24, r24
    2d46:	80 56       	subi	r24, 0x60	; 96
    2d48:	98 2f       	mov	r25, r24
    2d4a:	99 0f       	add	r25, r25
    2d4c:	99 0f       	add	r25, r25
    2d4e:	89 0f       	add	r24, r25
		gpsstunde +=	(gpsdata[8] - '0');
		gpsstunde += GMT;
    2d50:	82 0f       	add	r24, r18
    2d52:	80 93 db 02 	sts	0x02DB, r24
    2d56:	82 85       	ldd	r24, Z+10	; 0x0a
    2d58:	20 ed       	ldi	r18, 0xD0	; 208
    2d5a:	28 0f       	add	r18, r24
		gpsminute =		(gpsdata[9] - '0')*10;
    2d5c:	81 85       	ldd	r24, Z+9	; 0x09
    2d5e:	88 0f       	add	r24, r24
    2d60:	80 56       	subi	r24, 0x60	; 96
    2d62:	98 2f       	mov	r25, r24
    2d64:	99 0f       	add	r25, r25
    2d66:	99 0f       	add	r25, r25
    2d68:	89 0f       	add	r24, r25
		gpsminute +=	(gpsdata[10] - '0');
    2d6a:	82 0f       	add	r24, r18
    2d6c:	80 93 da 02 	sts	0x02DA, r24
    2d70:	84 85       	ldd	r24, Z+12	; 0x0c
    2d72:	20 ed       	ldi	r18, 0xD0	; 208
    2d74:	28 0f       	add	r18, r24
		gpssekunde =	(gpsdata[11] - '0')*10;
    2d76:	83 85       	ldd	r24, Z+11	; 0x0b
    2d78:	88 0f       	add	r24, r24
    2d7a:	80 56       	subi	r24, 0x60	; 96
    2d7c:	98 2f       	mov	r25, r24
    2d7e:	99 0f       	add	r25, r25
    2d80:	99 0f       	add	r25, r25
    2d82:	89 0f       	add	r24, r25
		gpssekunde +=	(gpsdata[12] - '0');
    2d84:	82 0f       	add	r24, r18
    2d86:	80 93 d9 02 	sts	0x02D9, r24
		
		volatile uint8_t counter = 19;
    2d8a:	83 e1       	ldi	r24, 0x13	; 19
    2d8c:	8a 83       	std	Y+2, r24	; 0x02
		volatile uint8_t nichterreicht = 0;
    2d8e:	19 82       	std	Y+1, r1	; 0x01
		
		while (nichterreicht < 7)
    2d90:	89 81       	ldd	r24, Y+1	; 0x01
    2d92:	87 30       	cpi	r24, 0x07	; 7
    2d94:	80 f4       	brcc	.+32     	; 0x2db6 <_Z10gpshandlerv+0x67a>
		{
			if (gpsdata[counter] == ',')
    2d96:	ea 81       	ldd	r30, Y+2	; 0x02
    2d98:	f0 e0       	ldi	r31, 0x00	; 0
    2d9a:	e7 51       	subi	r30, 0x17	; 23
    2d9c:	fd 4f       	sbci	r31, 0xFD	; 253
    2d9e:	80 81       	ld	r24, Z
    2da0:	8c 32       	cpi	r24, 0x2C	; 44
    2da2:	19 f4       	brne	.+6      	; 0x2daa <_Z10gpshandlerv+0x66e>
			{
				nichterreicht++;
    2da4:	89 81       	ldd	r24, Y+1	; 0x01
    2da6:	8f 5f       	subi	r24, 0xFF	; 255
    2da8:	89 83       	std	Y+1, r24	; 0x01
			}
			counter++;
    2daa:	8a 81       	ldd	r24, Y+2	; 0x02
    2dac:	8f 5f       	subi	r24, 0xFF	; 255
    2dae:	8a 83       	std	Y+2, r24	; 0x02
		gpssekunde +=	(gpsdata[12] - '0');
		
		volatile uint8_t counter = 19;
		volatile uint8_t nichterreicht = 0;
		
		while (nichterreicht < 7)
    2db0:	89 81       	ldd	r24, Y+1	; 0x01
    2db2:	87 30       	cpi	r24, 0x07	; 7
    2db4:	80 f3       	brcs	.-32     	; 0x2d96 <_Z10gpshandlerv+0x65a>
			}
			counter++;
		}
		
		//Datum
		gpsTag =	(gpsdata[counter+0] - '0')*10;
    2db6:	aa 81       	ldd	r26, Y+2	; 0x02
		gpsTag +=	(gpsdata[counter+1] - '0');
    2db8:	ea 81       	ldd	r30, Y+2	; 0x02
			}
			counter++;
		}
		
		//Datum
		gpsTag =	(gpsdata[counter+0] - '0')*10;
    2dba:	b0 e0       	ldi	r27, 0x00	; 0
    2dbc:	a7 51       	subi	r26, 0x17	; 23
    2dbe:	bd 4f       	sbci	r27, 0xFD	; 253
    2dc0:	8c 91       	ld	r24, X
    2dc2:	88 0f       	add	r24, r24
    2dc4:	80 56       	subi	r24, 0x60	; 96
    2dc6:	28 2f       	mov	r18, r24
    2dc8:	22 0f       	add	r18, r18
    2dca:	22 0f       	add	r18, r18
    2dcc:	28 0f       	add	r18, r24
		gpsTag +=	(gpsdata[counter+1] - '0');
    2dce:	f0 e0       	ldi	r31, 0x00	; 0
    2dd0:	e7 51       	subi	r30, 0x17	; 23
    2dd2:	fd 4f       	sbci	r31, 0xFD	; 253
    2dd4:	81 81       	ldd	r24, Z+1	; 0x01
    2dd6:	90 e0       	ldi	r25, 0x00	; 0
    2dd8:	c0 97       	sbiw	r24, 0x30	; 48
    2dda:	82 0f       	add	r24, r18
    2ddc:	91 1d       	adc	r25, r1
    2dde:	80 93 d8 02 	sts	0x02D8, r24
		gpsMonat =	(gpsdata[counter+2] - '0')*10;
    2de2:	aa 81       	ldd	r26, Y+2	; 0x02
		gpsMonat +=	(gpsdata[counter+3] - '0');
    2de4:	ea 81       	ldd	r30, Y+2	; 0x02
		}
		
		//Datum
		gpsTag =	(gpsdata[counter+0] - '0')*10;
		gpsTag +=	(gpsdata[counter+1] - '0');
		gpsMonat =	(gpsdata[counter+2] - '0')*10;
    2de6:	b0 e0       	ldi	r27, 0x00	; 0
    2de8:	a7 51       	subi	r26, 0x17	; 23
    2dea:	bd 4f       	sbci	r27, 0xFD	; 253
    2dec:	12 96       	adiw	r26, 0x02	; 2
    2dee:	8c 91       	ld	r24, X
    2df0:	88 0f       	add	r24, r24
    2df2:	80 56       	subi	r24, 0x60	; 96
    2df4:	28 2f       	mov	r18, r24
    2df6:	22 0f       	add	r18, r18
    2df8:	22 0f       	add	r18, r18
    2dfa:	28 0f       	add	r18, r24
		gpsMonat +=	(gpsdata[counter+3] - '0');
    2dfc:	f0 e0       	ldi	r31, 0x00	; 0
    2dfe:	e7 51       	subi	r30, 0x17	; 23
    2e00:	fd 4f       	sbci	r31, 0xFD	; 253
    2e02:	83 81       	ldd	r24, Z+3	; 0x03
    2e04:	90 e0       	ldi	r25, 0x00	; 0
    2e06:	c0 97       	sbiw	r24, 0x30	; 48
    2e08:	82 0f       	add	r24, r18
    2e0a:	91 1d       	adc	r25, r1
    2e0c:	80 93 d7 02 	sts	0x02D7, r24
		gpsJahr =	(gpsdata[counter+4] - '0')*10;
    2e10:	aa 81       	ldd	r26, Y+2	; 0x02
		gpsJahr +=	(gpsdata[counter+5] - '0');
    2e12:	ea 81       	ldd	r30, Y+2	; 0x02
		//Datum
		gpsTag =	(gpsdata[counter+0] - '0')*10;
		gpsTag +=	(gpsdata[counter+1] - '0');
		gpsMonat =	(gpsdata[counter+2] - '0')*10;
		gpsMonat +=	(gpsdata[counter+3] - '0');
		gpsJahr =	(gpsdata[counter+4] - '0')*10;
    2e14:	b0 e0       	ldi	r27, 0x00	; 0
    2e16:	a7 51       	subi	r26, 0x17	; 23
    2e18:	bd 4f       	sbci	r27, 0xFD	; 253
    2e1a:	14 96       	adiw	r26, 0x04	; 4
    2e1c:	8c 91       	ld	r24, X
    2e1e:	88 0f       	add	r24, r24
    2e20:	80 56       	subi	r24, 0x60	; 96
    2e22:	28 2f       	mov	r18, r24
    2e24:	22 0f       	add	r18, r18
    2e26:	22 0f       	add	r18, r18
    2e28:	28 0f       	add	r18, r24
		gpsJahr +=	(gpsdata[counter+5] - '0');
    2e2a:	f0 e0       	ldi	r31, 0x00	; 0
    2e2c:	e7 51       	subi	r30, 0x17	; 23
    2e2e:	fd 4f       	sbci	r31, 0xFD	; 253
    2e30:	85 81       	ldd	r24, Z+5	; 0x05
    2e32:	90 e0       	ldi	r25, 0x00	; 0
    2e34:	c0 97       	sbiw	r24, 0x30	; 48
    2e36:	82 0f       	add	r24, r18
    2e38:	91 1d       	adc	r25, r1
    2e3a:	80 93 d6 02 	sts	0x02D6, r24
		
		gpsstatus &= ~(1<<completenotvalid);
    2e3e:	8e 2d       	mov	r24, r14
    2e40:	87 7f       	andi	r24, 0xF7	; 247
    2e42:	80 93 31 03 	sts	0x0331, r24
	}
	//fix status pruefen, wenn implementiert
}
    2e46:	0f 90       	pop	r0
    2e48:	0f 90       	pop	r0
    2e4a:	0f 90       	pop	r0
    2e4c:	0f 90       	pop	r0
    2e4e:	df 91       	pop	r29
    2e50:	cf 91       	pop	r28
    2e52:	1f 91       	pop	r17
    2e54:	0f 91       	pop	r16
    2e56:	ff 90       	pop	r15
    2e58:	ef 90       	pop	r14
    2e5a:	bf 90       	pop	r11
    2e5c:	af 90       	pop	r10
    2e5e:	9f 90       	pop	r9
    2e60:	8f 90       	pop	r8
    2e62:	7f 90       	pop	r7
    2e64:	6f 90       	pop	r6
    2e66:	5f 90       	pop	r5
    2e68:	4f 90       	pop	r4
    2e6a:	08 95       	ret

00002e6c <main>:
void initialisierung();
void maininterupthandler(monitor *mon, uint8_t taste);
void gpshandler();

int main(void)
{
    2e6c:	cf 93       	push	r28
    2e6e:	df 93       	push	r29
    2e70:	cd b7       	in	r28, 0x3d	; 61
    2e72:	de b7       	in	r29, 0x3e	; 62
    2e74:	65 97       	sbiw	r28, 0x15	; 21
    2e76:	0f b6       	in	r0, 0x3f	; 63
    2e78:	f8 94       	cli
    2e7a:	de bf       	out	0x3e, r29	; 62
    2e7c:	0f be       	out	0x3f, r0	; 63
    2e7e:	cd bf       	out	0x3d, r28	; 61
    initialisierung();
    2e80:	b1 d9       	rcall	.-3230   	; 0x21e4 <_Z15initialisierungv>
#include <avr/interrupt.h>

//define new and delete operator
void * operator new(size_t size)
{
	return malloc(size);
    2e82:	8a e2       	ldi	r24, 0x2A	; 42
    2e84:	90 e0       	ldi	r25, 0x00	; 0
    2e86:	0e 94 0f 28 	call	0x501e	; 0x501e <malloc>
    2e8a:	fc 01       	movw	r30, r24
		uint8_t posx;
		uint8_t maxentries;
		uint8_t maxentriesx;
	monitor(Display *ol, RTC *rt)
	{
		buffersize = 0;
    2e8c:	16 8a       	std	Z+22, r1	; 0x16
		oled = ol;
    2e8e:	89 e3       	ldi	r24, 0x39	; 57
    2e90:	94 e0       	ldi	r25, 0x04	; 4
    2e92:	90 8f       	std	Z+24, r25	; 0x18
    2e94:	87 8b       	std	Z+23, r24	; 0x17
		rtc = rt;
    2e96:	8a e3       	ldi	r24, 0x3A	; 58
    2e98:	98 e0       	ldi	r25, 0x08	; 8
    2e9a:	92 8f       	std	Z+26, r25	; 0x1a
    2e9c:	81 8f       	std	Z+25, r24	; 0x19
		posy=0;
    2e9e:	15 a2       	std	Z+37, r1	; 0x25
		posx=0;
    2ea0:	16 a2       	std	Z+38, r1	; 0x26
		maxentriesx = 1;
    2ea2:	81 e0       	ldi	r24, 0x01	; 1
    2ea4:	80 a7       	std	Z+40, r24	; 0x28
class uhr:public monitor
{
	private:
	uint8_t Zeiger;
	public:
	uhr(Display *ol, RTC *rt):monitor(ol,rt)
    2ea6:	82 e9       	ldi	r24, 0x92	; 146
    2ea8:	92 e0       	ldi	r25, 0x02	; 2
    2eaa:	91 83       	std	Z+1, r25	; 0x01
    2eac:	80 83       	st	Z, r24
	{
		char na[] = "Uhr";
    2eae:	85 e5       	ldi	r24, 0x55	; 85
    2eb0:	98 e6       	ldi	r25, 0x68	; 104
    2eb2:	a2 e7       	ldi	r26, 0x72	; 114
    2eb4:	b0 e0       	ldi	r27, 0x00	; 0
    2eb6:	89 83       	std	Y+1, r24	; 0x01
    2eb8:	9a 83       	std	Y+2, r25	; 0x02
    2eba:	ab 83       	std	Y+3, r26	; 0x03
    2ebc:	bc 83       	std	Y+4, r27	; 0x04
    2ebe:	9e 01       	movw	r18, r28
    2ec0:	2f 5f       	subi	r18, 0xFF	; 255
    2ec2:	3f 4f       	sbci	r19, 0xFF	; 255
    2ec4:	cf 01       	movw	r24, r30
    2ec6:	4b 96       	adiw	r24, 0x1b	; 27
    2ec8:	be 01       	movw	r22, r28
    2eca:	65 5f       	subi	r22, 0xF5	; 245
    2ecc:	7f 4f       	sbci	r23, 0xFF	; 255
    2ece:	89 01       	movw	r16, r18
			{
				name[i] = na[i];
			}
			else
			{
				name[i] = ' ';
    2ed0:	40 e2       	ldi	r20, 0x20	; 32
    2ed2:	50 2f       	mov	r21, r16
    2ed4:	52 1b       	sub	r21, r18
	public:
	uhr(Display *ol, RTC *rt):monitor(ol,rt)
	{
		char na[] = "Uhr";
		for(uint8_t i =0; i< namesize;i++){
			if (i<sizeof(na))
    2ed6:	54 30       	cpi	r21, 0x04	; 4
    2ed8:	28 f4       	brcc	.+10     	; 0x2ee4 <main+0x78>
			{
				name[i] = na[i];
    2eda:	d8 01       	movw	r26, r16
    2edc:	5c 91       	ld	r21, X
    2ede:	dc 01       	movw	r26, r24
    2ee0:	5c 93       	st	X, r21
    2ee2:	02 c0       	rjmp	.+4      	; 0x2ee8 <main+0x7c>
			}
			else
			{
				name[i] = ' ';
    2ee4:	dc 01       	movw	r26, r24
    2ee6:	4c 93       	st	X, r20
    2ee8:	0f 5f       	subi	r16, 0xFF	; 255
    2eea:	1f 4f       	sbci	r17, 0xFF	; 255
    2eec:	01 96       	adiw	r24, 0x01	; 1
	uint8_t Zeiger;
	public:
	uhr(Display *ol, RTC *rt):monitor(ol,rt)
	{
		char na[] = "Uhr";
		for(uint8_t i =0; i< namesize;i++){
    2eee:	06 17       	cp	r16, r22
    2ef0:	17 07       	cpc	r17, r23
    2ef2:	79 f7       	brne	.-34     	; 0x2ed2 <main+0x66>
			else
			{
				name[i] = ' ';
			}
		}
		Zeiger = 1;
    2ef4:	ff 24       	eor	r15, r15
    2ef6:	f3 94       	inc	r15
    2ef8:	f1 a6       	std	Z+41, r15	; 0x29
		maxentries = 3;
    2efa:	83 e0       	ldi	r24, 0x03	; 3
    2efc:	87 a3       	std	Z+39, r24	; 0x27
		new tacho(&oled,&rtc),
		new wandern(&oled,&rtc),
		new einstellungen(&oled,&rtc),
		new offscreen(&oled,&rtc),
		new menue(&oled,&rtc)
	};
    2efe:	fa 83       	std	Y+2, r31	; 0x02
    2f00:	e9 83       	std	Y+1, r30	; 0x01
#include <avr/interrupt.h>

//define new and delete operator
void * operator new(size_t size)
{
	return malloc(size);
    2f02:	89 e2       	ldi	r24, 0x29	; 41
    2f04:	90 e0       	ldi	r25, 0x00	; 0
    2f06:	0e 94 0f 28 	call	0x501e	; 0x501e <malloc>
    2f0a:	8c 01       	movw	r16, r24
		uint8_t posx;
		uint8_t maxentries;
		uint8_t maxentriesx;
	monitor(Display *ol, RTC *rt)
	{
		buffersize = 0;
    2f0c:	fc 01       	movw	r30, r24
    2f0e:	16 8a       	std	Z+22, r1	; 0x16
		oled = ol;
    2f10:	89 e3       	ldi	r24, 0x39	; 57
    2f12:	94 e0       	ldi	r25, 0x04	; 4
    2f14:	90 8f       	std	Z+24, r25	; 0x18
    2f16:	87 8b       	std	Z+23, r24	; 0x17
		rtc = rt;
    2f18:	8a e3       	ldi	r24, 0x3A	; 58
    2f1a:	98 e0       	ldi	r25, 0x08	; 8
    2f1c:	92 8f       	std	Z+26, r25	; 0x1a
    2f1e:	81 8f       	std	Z+25, r24	; 0x19
		posy=0;
    2f20:	15 a2       	std	Z+37, r1	; 0x25
		posx=0;
    2f22:	16 a2       	std	Z+38, r1	; 0x26
		maxentriesx = 1;
    2f24:	f0 a6       	std	Z+40, r15	; 0x28
class tacho: public monitor
{
	private:
		
	public:
	tacho(Display *ol,RTC *rtc):monitor(ol,rtc)
    2f26:	8a e9       	ldi	r24, 0x9A	; 154
    2f28:	92 e0       	ldi	r25, 0x02	; 2
    2f2a:	91 83       	std	Z+1, r25	; 0x01
    2f2c:	80 83       	st	Z, r24
	{
		char na[] = "Tacho";
    2f2e:	86 e0       	ldi	r24, 0x06	; 6
    2f30:	ec e3       	ldi	r30, 0x3C	; 60
    2f32:	f1 e0       	ldi	r31, 0x01	; 1
    2f34:	de 01       	movw	r26, r28
    2f36:	1d 96       	adiw	r26, 0x0d	; 13
    2f38:	01 90       	ld	r0, Z+
    2f3a:	0d 92       	st	X+, r0
    2f3c:	8a 95       	dec	r24
    2f3e:	e1 f7       	brne	.-8      	; 0x2f38 <main+0xcc>
    2f40:	ce 01       	movw	r24, r28
    2f42:	0d 96       	adiw	r24, 0x0d	; 13
    2f44:	d8 01       	movw	r26, r16
    2f46:	5b 96       	adiw	r26, 0x1b	; 27
    2f48:	ae 01       	movw	r20, r28
    2f4a:	49 5e       	subi	r20, 0xE9	; 233
    2f4c:	5f 4f       	sbci	r21, 0xFF	; 255
    2f4e:	fc 01       	movw	r30, r24
			{
				name[i] = na[i];
			}
			else
			{
				name[i] = ' ';
    2f50:	20 e2       	ldi	r18, 0x20	; 32
    2f52:	3e 2f       	mov	r19, r30
    2f54:	38 1b       	sub	r19, r24
	public:
	tacho(Display *ol,RTC *rtc):monitor(ol,rtc)
	{
		char na[] = "Tacho";
		for(uint8_t i =0; i< namesize;i++){
			if (i<sizeof(na))
    2f56:	36 30       	cpi	r19, 0x06	; 6
    2f58:	18 f4       	brcc	.+6      	; 0x2f60 <main+0xf4>
			{
				name[i] = na[i];
    2f5a:	30 81       	ld	r19, Z
    2f5c:	3c 93       	st	X, r19
    2f5e:	01 c0       	rjmp	.+2      	; 0x2f62 <main+0xf6>
			}
			else
			{
				name[i] = ' ';
    2f60:	2c 93       	st	X, r18
    2f62:	31 96       	adiw	r30, 0x01	; 1
    2f64:	11 96       	adiw	r26, 0x01	; 1
		
	public:
	tacho(Display *ol,RTC *rtc):monitor(ol,rtc)
	{
		char na[] = "Tacho";
		for(uint8_t i =0; i< namesize;i++){
    2f66:	e4 17       	cp	r30, r20
    2f68:	f5 07       	cpc	r31, r21
    2f6a:	99 f7       	brne	.-26     	; 0x2f52 <main+0xe6>
			else
			{
				name[i] = ' ';
			}
		}
		nullen();
    2f6c:	85 d8       	rcall	.-3830   	; 0x2078 <_Z6nullenv>
		new tacho(&oled,&rtc),
		new wandern(&oled,&rtc),
		new einstellungen(&oled,&rtc),
		new offscreen(&oled,&rtc),
		new menue(&oled,&rtc)
	};
    2f6e:	1c 83       	std	Y+4, r17	; 0x04
    2f70:	0b 83       	std	Y+3, r16	; 0x03
#include <avr/interrupt.h>

//define new and delete operator
void * operator new(size_t size)
{
	return malloc(size);
    2f72:	89 e2       	ldi	r24, 0x29	; 41
    2f74:	90 e0       	ldi	r25, 0x00	; 0
    2f76:	0e 94 0f 28 	call	0x501e	; 0x501e <malloc>
		uint8_t posx;
		uint8_t maxentries;
		uint8_t maxentriesx;
	monitor(Display *ol, RTC *rt)
	{
		buffersize = 0;
    2f7a:	dc 01       	movw	r26, r24
    2f7c:	56 96       	adiw	r26, 0x16	; 22
    2f7e:	1c 92       	st	X, r1
    2f80:	56 97       	sbiw	r26, 0x16	; 22
		oled = ol;
    2f82:	29 e3       	ldi	r18, 0x39	; 57
    2f84:	34 e0       	ldi	r19, 0x04	; 4
    2f86:	58 96       	adiw	r26, 0x18	; 24
    2f88:	3c 93       	st	X, r19
    2f8a:	2e 93       	st	-X, r18
    2f8c:	57 97       	sbiw	r26, 0x17	; 23
		rtc = rt;
    2f8e:	2a e3       	ldi	r18, 0x3A	; 58
    2f90:	38 e0       	ldi	r19, 0x08	; 8
    2f92:	5a 96       	adiw	r26, 0x1a	; 26
    2f94:	3c 93       	st	X, r19
    2f96:	2e 93       	st	-X, r18
    2f98:	59 97       	sbiw	r26, 0x19	; 25
		posy=0;
    2f9a:	95 96       	adiw	r26, 0x25	; 37
    2f9c:	1c 92       	st	X, r1
    2f9e:	95 97       	sbiw	r26, 0x25	; 37
		posx=0;
    2fa0:	96 96       	adiw	r26, 0x26	; 38
    2fa2:	1c 92       	st	X, r1
    2fa4:	96 97       	sbiw	r26, 0x26	; 38
		maxentriesx = 1;
    2fa6:	21 e0       	ldi	r18, 0x01	; 1
    2fa8:	98 96       	adiw	r26, 0x28	; 40
    2faa:	2c 93       	st	X, r18
    2fac:	98 97       	sbiw	r26, 0x28	; 40
class wandern: public monitor
{
	private:
	
	public:	
	wandern(Display *ol,RTC *rtc):monitor(ol,rtc)
    2fae:	22 ea       	ldi	r18, 0xA2	; 162
    2fb0:	32 e0       	ldi	r19, 0x02	; 2
    2fb2:	2d 93       	st	X+, r18
    2fb4:	3c 93       	st	X, r19
	{
		char na[] = "Wandern";
    2fb6:	28 e0       	ldi	r18, 0x08	; 8
    2fb8:	e2 e4       	ldi	r30, 0x42	; 66
    2fba:	f1 e0       	ldi	r31, 0x01	; 1
    2fbc:	de 01       	movw	r26, r28
    2fbe:	1d 96       	adiw	r26, 0x0d	; 13
    2fc0:	01 90       	ld	r0, Z+
    2fc2:	0d 92       	st	X+, r0
    2fc4:	2a 95       	dec	r18
    2fc6:	e1 f7       	brne	.-8      	; 0x2fc0 <main+0x154>
    2fc8:	9e 01       	movw	r18, r28
    2fca:	23 5f       	subi	r18, 0xF3	; 243
    2fcc:	3f 4f       	sbci	r19, 0xFF	; 255
    2fce:	dc 01       	movw	r26, r24
    2fd0:	5b 96       	adiw	r26, 0x1b	; 27
    2fd2:	be 01       	movw	r22, r28
    2fd4:	69 5e       	subi	r22, 0xE9	; 233
    2fd6:	7f 4f       	sbci	r23, 0xFF	; 255
    2fd8:	f9 01       	movw	r30, r18
			{
				name[i] = na[i];
			}
			else
			{
				name[i] = ' ';
    2fda:	40 e2       	ldi	r20, 0x20	; 32
    2fdc:	5e 2f       	mov	r21, r30
    2fde:	52 1b       	sub	r21, r18
	public:	
	wandern(Display *ol,RTC *rtc):monitor(ol,rtc)
	{
		char na[] = "Wandern";
		for(uint8_t i =0; i< namesize;i++){
			if (i<sizeof(na))
    2fe0:	58 30       	cpi	r21, 0x08	; 8
    2fe2:	18 f4       	brcc	.+6      	; 0x2fea <main+0x17e>
			{
				name[i] = na[i];
    2fe4:	50 81       	ld	r21, Z
    2fe6:	5c 93       	st	X, r21
    2fe8:	01 c0       	rjmp	.+2      	; 0x2fec <main+0x180>
			}
			else
			{
				name[i] = ' ';
    2fea:	4c 93       	st	X, r20
    2fec:	31 96       	adiw	r30, 0x01	; 1
    2fee:	11 96       	adiw	r26, 0x01	; 1
	
	public:	
	wandern(Display *ol,RTC *rtc):monitor(ol,rtc)
	{
		char na[] = "Wandern";
		for(uint8_t i =0; i< namesize;i++){
    2ff0:	e6 17       	cp	r30, r22
    2ff2:	f7 07       	cpc	r31, r23
    2ff4:	99 f7       	brne	.-26     	; 0x2fdc <main+0x170>
		new tacho(&oled,&rtc),
		new wandern(&oled,&rtc),
		new einstellungen(&oled,&rtc),
		new offscreen(&oled,&rtc),
		new menue(&oled,&rtc)
	};
    2ff6:	9e 83       	std	Y+6, r25	; 0x06
    2ff8:	8d 83       	std	Y+5, r24	; 0x05
#include <avr/interrupt.h>

//define new and delete operator
void * operator new(size_t size)
{
	return malloc(size);
    2ffa:	89 e2       	ldi	r24, 0x29	; 41
    2ffc:	90 e0       	ldi	r25, 0x00	; 0
    2ffe:	0e 94 0f 28 	call	0x501e	; 0x501e <malloc>
		uint8_t posx;
		uint8_t maxentries;
		uint8_t maxentriesx;
	monitor(Display *ol, RTC *rt)
	{
		buffersize = 0;
    3002:	fc 01       	movw	r30, r24
    3004:	16 8a       	std	Z+22, r1	; 0x16
		oled = ol;
    3006:	29 e3       	ldi	r18, 0x39	; 57
    3008:	34 e0       	ldi	r19, 0x04	; 4
    300a:	30 8f       	std	Z+24, r19	; 0x18
    300c:	27 8b       	std	Z+23, r18	; 0x17
		rtc = rt;
    300e:	2a e3       	ldi	r18, 0x3A	; 58
    3010:	38 e0       	ldi	r19, 0x08	; 8
    3012:	32 8f       	std	Z+26, r19	; 0x1a
    3014:	21 8f       	std	Z+25, r18	; 0x19
		posy=0;
    3016:	15 a2       	std	Z+37, r1	; 0x25
		posx=0;
    3018:	16 a2       	std	Z+38, r1	; 0x26
		maxentriesx = 1;
    301a:	21 e0       	ldi	r18, 0x01	; 1
    301c:	20 a7       	std	Z+40, r18	; 0x28

class einstellungen: public monitor
{
	private:
	public:
	einstellungen(Display *ol,RTC *rt): monitor(ol,rt)
    301e:	2a ea       	ldi	r18, 0xAA	; 170
    3020:	32 e0       	ldi	r19, 0x02	; 2
    3022:	31 83       	std	Z+1, r19	; 0x01
    3024:	20 83       	st	Z, r18
	{
		char na[] = "Settings";
    3026:	29 e0       	ldi	r18, 0x09	; 9
    3028:	e0 ed       	ldi	r30, 0xD0	; 208
    302a:	f1 e0       	ldi	r31, 0x01	; 1
    302c:	de 01       	movw	r26, r28
    302e:	1d 96       	adiw	r26, 0x0d	; 13
    3030:	01 90       	ld	r0, Z+
    3032:	0d 92       	st	X+, r0
    3034:	2a 95       	dec	r18
    3036:	e1 f7       	brne	.-8      	; 0x3030 <main+0x1c4>
    3038:	9e 01       	movw	r18, r28
    303a:	23 5f       	subi	r18, 0xF3	; 243
    303c:	3f 4f       	sbci	r19, 0xFF	; 255
    303e:	dc 01       	movw	r26, r24
    3040:	5b 96       	adiw	r26, 0x1b	; 27
    3042:	be 01       	movw	r22, r28
    3044:	69 5e       	subi	r22, 0xE9	; 233
    3046:	7f 4f       	sbci	r23, 0xFF	; 255
    3048:	f9 01       	movw	r30, r18
			{
				name[i] = na[i];
			}
			else
			{
				name[i] = ' ';
    304a:	40 e2       	ldi	r20, 0x20	; 32
    304c:	5e 2f       	mov	r21, r30
    304e:	52 1b       	sub	r21, r18
	public:
	einstellungen(Display *ol,RTC *rt): monitor(ol,rt)
	{
		char na[] = "Settings";
		for(uint8_t i =0; i< namesize;i++){
			if (i<sizeof(na))
    3050:	59 30       	cpi	r21, 0x09	; 9
    3052:	18 f4       	brcc	.+6      	; 0x305a <main+0x1ee>
			{
				name[i] = na[i];
    3054:	50 81       	ld	r21, Z
    3056:	5c 93       	st	X, r21
    3058:	01 c0       	rjmp	.+2      	; 0x305c <main+0x1f0>
			}
			else
			{
				name[i] = ' ';
    305a:	4c 93       	st	X, r20
    305c:	31 96       	adiw	r30, 0x01	; 1
    305e:	11 96       	adiw	r26, 0x01	; 1
	private:
	public:
	einstellungen(Display *ol,RTC *rt): monitor(ol,rt)
	{
		char na[] = "Settings";
		for(uint8_t i =0; i< namesize;i++){
    3060:	e6 17       	cp	r30, r22
    3062:	f7 07       	cpc	r31, r23
    3064:	99 f7       	brne	.-26     	; 0x304c <main+0x1e0>
			else
			{
				name[i] = ' ';
			}
		}
		maxentries = 3;
    3066:	23 e0       	ldi	r18, 0x03	; 3
    3068:	dc 01       	movw	r26, r24
    306a:	97 96       	adiw	r26, 0x27	; 39
    306c:	2c 93       	st	X, r18
		new tacho(&oled,&rtc),
		new wandern(&oled,&rtc),
		new einstellungen(&oled,&rtc),
		new offscreen(&oled,&rtc),
		new menue(&oled,&rtc)
	};
    306e:	98 87       	std	Y+8, r25	; 0x08
    3070:	8f 83       	std	Y+7, r24	; 0x07
#include <avr/interrupt.h>

//define new and delete operator
void * operator new(size_t size)
{
	return malloc(size);
    3072:	89 e2       	ldi	r24, 0x29	; 41
    3074:	90 e0       	ldi	r25, 0x00	; 0
    3076:	0e 94 0f 28 	call	0x501e	; 0x501e <malloc>
    307a:	fc 01       	movw	r30, r24
		uint8_t posx;
		uint8_t maxentries;
		uint8_t maxentriesx;
	monitor(Display *ol, RTC *rt)
	{
		buffersize = 0;
    307c:	16 8a       	std	Z+22, r1	; 0x16
		oled = ol;
    307e:	0f 2e       	mov	r0, r31
    3080:	f9 e3       	ldi	r31, 0x39	; 57
    3082:	cf 2e       	mov	r12, r31
    3084:	f4 e0       	ldi	r31, 0x04	; 4
    3086:	df 2e       	mov	r13, r31
    3088:	f0 2d       	mov	r31, r0
    308a:	d0 8e       	std	Z+24, r13	; 0x18
    308c:	c7 8a       	std	Z+23, r12	; 0x17
		rtc = rt;
    308e:	0f 2e       	mov	r0, r31
    3090:	fa e3       	ldi	r31, 0x3A	; 58
    3092:	ef 2e       	mov	r14, r31
    3094:	f8 e0       	ldi	r31, 0x08	; 8
    3096:	ff 2e       	mov	r15, r31
    3098:	f0 2d       	mov	r31, r0
    309a:	f2 8e       	std	Z+26, r15	; 0x1a
    309c:	e1 8e       	std	Z+25, r14	; 0x19
		posy=0;
    309e:	15 a2       	std	Z+37, r1	; 0x25
		posx=0;
    30a0:	16 a2       	std	Z+38, r1	; 0x26
		maxentriesx = 1;
    30a2:	11 e0       	ldi	r17, 0x01	; 1
    30a4:	10 a7       	std	Z+40, r17	; 0x28
class offscreen: public monitor
{
	private:
	
	public:
	offscreen(Display *ol, RTC *rt):monitor(ol,rt){
    30a6:	82 ec       	ldi	r24, 0xC2	; 194
    30a8:	92 e0       	ldi	r25, 0x02	; 2
    30aa:	91 83       	std	Z+1, r25	; 0x01
    30ac:	80 83       	st	Z, r24
		new tacho(&oled,&rtc),
		new wandern(&oled,&rtc),
		new einstellungen(&oled,&rtc),
		new offscreen(&oled,&rtc),
		new menue(&oled,&rtc)
	};
    30ae:	fa 87       	std	Y+10, r31	; 0x0a
    30b0:	e9 87       	std	Y+9, r30	; 0x09
#include <avr/interrupt.h>

//define new and delete operator
void * operator new(size_t size)
{
	return malloc(size);
    30b2:	89 e2       	ldi	r24, 0x29	; 41
    30b4:	90 e0       	ldi	r25, 0x00	; 0
    30b6:	0e 94 0f 28 	call	0x501e	; 0x501e <malloc>
		uint8_t posx;
		uint8_t maxentries;
		uint8_t maxentriesx;
	monitor(Display *ol, RTC *rt)
	{
		buffersize = 0;
    30ba:	fc 01       	movw	r30, r24
    30bc:	16 8a       	std	Z+22, r1	; 0x16
		oled = ol;
    30be:	d0 8e       	std	Z+24, r13	; 0x18
    30c0:	c7 8a       	std	Z+23, r12	; 0x17
		rtc = rt;
    30c2:	f2 8e       	std	Z+26, r15	; 0x1a
    30c4:	e1 8e       	std	Z+25, r14	; 0x19
		posy=0;
    30c6:	15 a2       	std	Z+37, r1	; 0x25
		posx=0;
    30c8:	16 a2       	std	Z+38, r1	; 0x26
		maxentriesx = 1;
    30ca:	10 a7       	std	Z+40, r17	; 0x28

class menue: public monitor
{
	private:
	public:
	menue(Display *ol, RTC *rt):monitor(ol,rt)
    30cc:	2a eb       	ldi	r18, 0xBA	; 186
    30ce:	32 e0       	ldi	r19, 0x02	; 2
    30d0:	31 83       	std	Z+1, r19	; 0x01
    30d2:	20 83       	st	Z, r18
	{
		char na[] = "Menue";
    30d4:	26 e0       	ldi	r18, 0x06	; 6
    30d6:	e9 ed       	ldi	r30, 0xD9	; 217
    30d8:	f1 e0       	ldi	r31, 0x01	; 1
    30da:	de 01       	movw	r26, r28
    30dc:	1d 96       	adiw	r26, 0x0d	; 13
    30de:	01 90       	ld	r0, Z+
    30e0:	0d 92       	st	X+, r0
    30e2:	2a 95       	dec	r18
    30e4:	e1 f7       	brne	.-8      	; 0x30de <main+0x272>
    30e6:	9e 01       	movw	r18, r28
    30e8:	23 5f       	subi	r18, 0xF3	; 243
    30ea:	3f 4f       	sbci	r19, 0xFF	; 255
    30ec:	dc 01       	movw	r26, r24
    30ee:	5b 96       	adiw	r26, 0x1b	; 27
    30f0:	be 01       	movw	r22, r28
    30f2:	69 5e       	subi	r22, 0xE9	; 233
    30f4:	7f 4f       	sbci	r23, 0xFF	; 255
    30f6:	f9 01       	movw	r30, r18
			{
				name[i] = na[i];
			}
			else
			{
				name[i] = ' ';
    30f8:	40 e2       	ldi	r20, 0x20	; 32
    30fa:	5e 2f       	mov	r21, r30
    30fc:	52 1b       	sub	r21, r18
	public:
	menue(Display *ol, RTC *rt):monitor(ol,rt)
	{
		char na[] = "Menue";
		for(uint8_t i =0; i< namesize;i++)
			if (i<sizeof(na))
    30fe:	56 30       	cpi	r21, 0x06	; 6
    3100:	18 f4       	brcc	.+6      	; 0x3108 <main+0x29c>
			{
				name[i] = na[i];
    3102:	50 81       	ld	r21, Z
    3104:	5c 93       	st	X, r21
    3106:	01 c0       	rjmp	.+2      	; 0x310a <main+0x29e>
			}
			else
			{
				name[i] = ' ';
    3108:	4c 93       	st	X, r20
    310a:	31 96       	adiw	r30, 0x01	; 1
    310c:	11 96       	adiw	r26, 0x01	; 1
	private:
	public:
	menue(Display *ol, RTC *rt):monitor(ol,rt)
	{
		char na[] = "Menue";
		for(uint8_t i =0; i< namesize;i++)
    310e:	e6 17       	cp	r30, r22
    3110:	f7 07       	cpc	r31, r23
    3112:	99 f7       	brne	.-26     	; 0x30fa <main+0x28e>
			}
			else
			{
				name[i] = ' ';
			}
			maxentriesx = 0;
    3114:	dc 01       	movw	r26, r24
    3116:	98 96       	adiw	r26, 0x28	; 40
    3118:	1c 92       	st	X, r1
    311a:	98 97       	sbiw	r26, 0x28	; 40
			maxentries = numberofpages;
    311c:	25 e0       	ldi	r18, 0x05	; 5
    311e:	97 96       	adiw	r26, 0x27	; 39
    3120:	2c 93       	st	X, r18
		new tacho(&oled,&rtc),
		new wandern(&oled,&rtc),
		new einstellungen(&oled,&rtc),
		new offscreen(&oled,&rtc),
		new menue(&oled,&rtc)
	};
    3122:	9c 87       	std	Y+12, r25	; 0x0c
    3124:	8b 87       	std	Y+11, r24	; 0x0b
	
	

	while (1) 
    {
		maininterupthandler(Folien[position],Tastatur.unified());
    3126:	8d e2       	ldi	r24, 0x2D	; 45
    3128:	94 e0       	ldi	r25, 0x04	; 4
    312a:	0e 94 92 08 	call	0x1124	; 0x1124 <_ZN9Interface7unifiedEv>
    312e:	e0 91 33 03 	lds	r30, 0x0333
    3132:	f0 e0       	ldi	r31, 0x00	; 0
    3134:	ee 0f       	add	r30, r30
    3136:	ff 1f       	adc	r31, r31
    3138:	21 e0       	ldi	r18, 0x01	; 1
    313a:	30 e0       	ldi	r19, 0x00	; 0
    313c:	2c 0f       	add	r18, r28
    313e:	3d 1f       	adc	r19, r29
    3140:	e2 0f       	add	r30, r18
    3142:	f3 1f       	adc	r31, r19
    3144:	68 2f       	mov	r22, r24
    3146:	80 81       	ld	r24, Z
    3148:	91 81       	ldd	r25, Z+1	; 0x01
    314a:	91 d9       	rcall	.-3294   	; 0x246e <_Z19maininterupthandlerP7monitorh>
		gpshandler();
    314c:	f7 da       	rcall	.-2578   	; 0x273c <_Z10gpshandlerv>
		if (statusreg&(1<<powersavemode))
    314e:	80 91 34 03 	lds	r24, 0x0334
    3152:	81 ff       	sbrs	r24, 1
    3154:	e8 cf       	rjmp	.-48     	; 0x3126 <main+0x2ba>
		{
			SMCR |= (1<<SE);
    3156:	83 b7       	in	r24, 0x33	; 51
    3158:	81 60       	ori	r24, 0x01	; 1
    315a:	83 bf       	out	0x33, r24	; 51
    315c:	e4 cf       	rjmp	.-56     	; 0x3126 <main+0x2ba>

0000315e <_Z13uhreinstellenv>:
		gpsstatus &= ~(1<<completenotvalid);
	}
	//fix status pruefen, wenn implementiert
}

void uhreinstellen(){
    315e:	2f 92       	push	r2
    3160:	3f 92       	push	r3
    3162:	4f 92       	push	r4
    3164:	5f 92       	push	r5
    3166:	6f 92       	push	r6
    3168:	7f 92       	push	r7
    316a:	8f 92       	push	r8
    316c:	9f 92       	push	r9
    316e:	af 92       	push	r10
    3170:	bf 92       	push	r11
    3172:	cf 92       	push	r12
    3174:	df 92       	push	r13
    3176:	ef 92       	push	r14
    3178:	ff 92       	push	r15
    317a:	0f 93       	push	r16
    317c:	1f 93       	push	r17
    317e:	cf 93       	push	r28
    3180:	df 93       	push	r29
    3182:	cd b7       	in	r28, 0x3d	; 61
    3184:	de b7       	in	r29, 0x3e	; 62
    3186:	66 97       	sbiw	r28, 0x16	; 22
    3188:	0f b6       	in	r0, 0x3f	; 63
    318a:	f8 94       	cli
    318c:	de bf       	out	0x3e, r29	; 62
    318e:	0f be       	out	0x3f, r0	; 63
    3190:	cd bf       	out	0x3d, r28	; 61
	rtc.RTCstop();
    3192:	8a e3       	ldi	r24, 0x3A	; 58
    3194:	98 e0       	ldi	r25, 0x08	; 8
    3196:	7a d7       	rcall	.+3828   	; 0x408c <_ZN3RTC7RTCstopEv>
	
	oled.clearFrame();
    3198:	89 e3       	ldi	r24, 0x39	; 57
    319a:	94 e0       	ldi	r25, 0x04	; 4
    319c:	0e 94 39 03 	call	0x672	; 0x672 <_ZN7Display10clearFrameEv>
	char buffer[20];
	uint8_t buffersize;
	uint8_t pos=0;
    31a0:	91 2c       	mov	r9, r1
	while(pos<11){
		buffersize=sprintf(buffer,"Uhreinstellung");
    31a2:	0f 2e       	mov	r0, r31
    31a4:	ff e0       	ldi	r31, 0x0F	; 15
    31a6:	7f 2e       	mov	r7, r31
    31a8:	f0 2d       	mov	r31, r0
    31aa:	ce 01       	movw	r24, r28
    31ac:	01 96       	adiw	r24, 0x01	; 1
    31ae:	2c 01       	movw	r4, r24
    31b0:	f1 2c       	mov	r15, r1
		for(uint8_t i = 0; i<buffersize;i++){
			oled.draw_ASCI(buffer[i],charsize*i,0);
		}
		buffersize=sprintf(buffer,"--------------");
    31b2:	8d 8b       	std	Y+21, r24	; 0x15
    31b4:	5e 8a       	std	Y+22, r5	; 0x16
		for(uint8_t i = 0; i<buffersize;i++){
			oled.draw_ASCI(buffer[i],charsize*i,8);
		}
		buffer[0]=rtc.Stunden/10;
    31b6:	0f 2e       	mov	r0, r31
    31b8:	fa e3       	ldi	r31, 0x3A	; 58
    31ba:	cf 2e       	mov	r12, r31
    31bc:	f8 e0       	ldi	r31, 0x08	; 8
    31be:	df 2e       	mov	r13, r31
    31c0:	f0 2d       	mov	r31, r0
    31c2:	0f 2e       	mov	r0, r31
    31c4:	fd ec       	ldi	r31, 0xCD	; 205
    31c6:	8f 2e       	mov	r8, r31
    31c8:	f0 2d       	mov	r31, r0
		buffer[1]=rtc.Stunden%10;
		buffer[2]=':';
		buffer[3]=rtc.Minuten/10;
		buffer[4]=rtc.Minuten%10;
		buffer[5]=' ';
    31ca:	68 94       	set
    31cc:	ee 24       	eor	r14, r14
    31ce:	e5 f8       	bld	r14, 5
		buffer[6]=rtc.Tag/10;
		buffer[7]=rtc.Tag%10;
		buffer[8]='.';
    31d0:	0f 2e       	mov	r0, r31
    31d2:	fe e2       	ldi	r31, 0x2E	; 46
    31d4:	6f 2e       	mov	r6, r31
    31d6:	f0 2d       	mov	r31, r0
	oled.clearFrame();
	char buffer[20];
	uint8_t buffersize;
	uint8_t pos=0;
	while(pos<11){
		buffersize=sprintf(buffer,"Uhreinstellung");
    31d8:	ef ed       	ldi	r30, 0xDF	; 223
    31da:	f1 e0       	ldi	r31, 0x01	; 1
    31dc:	d2 01       	movw	r26, r4
    31de:	87 2d       	mov	r24, r7
    31e0:	01 90       	ld	r0, Z+
    31e2:	0d 92       	st	X+, r0
    31e4:	8a 95       	dec	r24
    31e6:	e1 f7       	brne	.-8      	; 0x31e0 <_Z13uhreinstellenv+0x82>
    31e8:	52 01       	movw	r10, r4
    31ea:	12 01       	movw	r2, r4
    31ec:	1f 2d       	mov	r17, r15
		for(uint8_t i = 0; i<buffersize;i++){
			oled.draw_ASCI(buffer[i],charsize*i,0);
    31ee:	f1 01       	movw	r30, r2
    31f0:	61 91       	ld	r22, Z+
    31f2:	1f 01       	movw	r2, r30
    31f4:	2f 2d       	mov	r18, r15
    31f6:	41 2f       	mov	r20, r17
    31f8:	89 e3       	ldi	r24, 0x39	; 57
    31fa:	94 e0       	ldi	r25, 0x04	; 4
    31fc:	0e 94 51 04 	call	0x8a2	; 0x8a2 <_ZN7Display9draw_ASCIEhhh>
    3200:	1a 5f       	subi	r17, 0xFA	; 250
	char buffer[20];
	uint8_t buffersize;
	uint8_t pos=0;
	while(pos<11){
		buffersize=sprintf(buffer,"Uhreinstellung");
		for(uint8_t i = 0; i<buffersize;i++){
    3202:	14 35       	cpi	r17, 0x54	; 84
    3204:	a1 f7       	brne	.-24     	; 0x31ee <_Z13uhreinstellenv+0x90>
			oled.draw_ASCI(buffer[i],charsize*i,0);
		}
		buffersize=sprintf(buffer,"--------------");
    3206:	e5 e1       	ldi	r30, 0x15	; 21
    3208:	f1 e0       	ldi	r31, 0x01	; 1
    320a:	d2 01       	movw	r26, r4
    320c:	87 2d       	mov	r24, r7
    320e:	01 90       	ld	r0, Z+
    3210:	0d 92       	st	X+, r0
    3212:	8a 95       	dec	r24
    3214:	e1 f7       	brne	.-8      	; 0x320e <_Z13uhreinstellenv+0xb0>
    3216:	2d 88       	ldd	r2, Y+21	; 0x15
    3218:	3e 88       	ldd	r3, Y+22	; 0x16
    321a:	1f 2d       	mov	r17, r15
		for(uint8_t i = 0; i<buffersize;i++){
			oled.draw_ASCI(buffer[i],charsize*i,8);
    321c:	f1 01       	movw	r30, r2
    321e:	61 91       	ld	r22, Z+
    3220:	1f 01       	movw	r2, r30
    3222:	28 e0       	ldi	r18, 0x08	; 8
    3224:	41 2f       	mov	r20, r17
    3226:	89 e3       	ldi	r24, 0x39	; 57
    3228:	94 e0       	ldi	r25, 0x04	; 4
    322a:	0e 94 51 04 	call	0x8a2	; 0x8a2 <_ZN7Display9draw_ASCIEhhh>
    322e:	1a 5f       	subi	r17, 0xFA	; 250
		buffersize=sprintf(buffer,"Uhreinstellung");
		for(uint8_t i = 0; i<buffersize;i++){
			oled.draw_ASCI(buffer[i],charsize*i,0);
		}
		buffersize=sprintf(buffer,"--------------");
		for(uint8_t i = 0; i<buffersize;i++){
    3230:	14 35       	cpi	r17, 0x54	; 84
    3232:	a1 f7       	brne	.-24     	; 0x321c <_Z13uhreinstellenv+0xbe>
			oled.draw_ASCI(buffer[i],charsize*i,8);
		}
		buffer[0]=rtc.Stunden/10;
    3234:	f6 01       	movw	r30, r12
    3236:	90 89       	ldd	r25, Z+16	; 0x10
    3238:	98 9d       	mul	r25, r8
    323a:	81 2d       	mov	r24, r1
    323c:	11 24       	eor	r1, r1
    323e:	86 95       	lsr	r24
    3240:	86 95       	lsr	r24
    3242:	86 95       	lsr	r24
    3244:	89 83       	std	Y+1, r24	; 0x01
		buffer[1]=rtc.Stunden%10;
    3246:	88 0f       	add	r24, r24
    3248:	28 2f       	mov	r18, r24
    324a:	22 0f       	add	r18, r18
    324c:	22 0f       	add	r18, r18
    324e:	82 0f       	add	r24, r18
    3250:	98 1b       	sub	r25, r24
    3252:	9a 83       	std	Y+2, r25	; 0x02
		buffer[2]=':';
    3254:	fa e3       	ldi	r31, 0x3A	; 58
    3256:	fb 83       	std	Y+3, r31	; 0x03
		buffer[3]=rtc.Minuten/10;
    3258:	f6 01       	movw	r30, r12
    325a:	91 89       	ldd	r25, Z+17	; 0x11
    325c:	98 9d       	mul	r25, r8
    325e:	81 2d       	mov	r24, r1
    3260:	11 24       	eor	r1, r1
    3262:	86 95       	lsr	r24
    3264:	86 95       	lsr	r24
    3266:	86 95       	lsr	r24
    3268:	8c 83       	std	Y+4, r24	; 0x04
		buffer[4]=rtc.Minuten%10;
    326a:	88 0f       	add	r24, r24
    326c:	28 2f       	mov	r18, r24
    326e:	22 0f       	add	r18, r18
    3270:	22 0f       	add	r18, r18
    3272:	82 0f       	add	r24, r18
    3274:	98 1b       	sub	r25, r24
    3276:	9d 83       	std	Y+5, r25	; 0x05
		buffer[5]=' ';
    3278:	ee 82       	std	Y+6, r14	; 0x06
		buffer[6]=rtc.Tag/10;
    327a:	94 89       	ldd	r25, Z+20	; 0x14
    327c:	98 9d       	mul	r25, r8
    327e:	81 2d       	mov	r24, r1
    3280:	11 24       	eor	r1, r1
    3282:	86 95       	lsr	r24
    3284:	86 95       	lsr	r24
    3286:	86 95       	lsr	r24
    3288:	8f 83       	std	Y+7, r24	; 0x07
		buffer[7]=rtc.Tag%10;
    328a:	88 0f       	add	r24, r24
    328c:	28 2f       	mov	r18, r24
    328e:	22 0f       	add	r18, r18
    3290:	22 0f       	add	r18, r18
    3292:	82 0f       	add	r24, r18
    3294:	98 1b       	sub	r25, r24
    3296:	98 87       	std	Y+8, r25	; 0x08
		buffer[8]='.';
    3298:	69 86       	std	Y+9, r6	; 0x09
		buffer[9]=rtc.Monat/10;
    329a:	96 89       	ldd	r25, Z+22	; 0x16
    329c:	98 9d       	mul	r25, r8
    329e:	81 2d       	mov	r24, r1
    32a0:	11 24       	eor	r1, r1
    32a2:	86 95       	lsr	r24
    32a4:	86 95       	lsr	r24
    32a6:	86 95       	lsr	r24
    32a8:	8a 87       	std	Y+10, r24	; 0x0a
		buffer[10]=rtc.Monat%10;
    32aa:	88 0f       	add	r24, r24
    32ac:	28 2f       	mov	r18, r24
    32ae:	22 0f       	add	r18, r18
    32b0:	22 0f       	add	r18, r18
    32b2:	82 0f       	add	r24, r18
    32b4:	98 1b       	sub	r25, r24
    32b6:	9b 87       	std	Y+11, r25	; 0x0b
		buffer[11]='.';
    32b8:	6c 86       	std	Y+12, r6	; 0x0c
		buffer[12]=rtc.Jahr/10;
    32ba:	97 89       	ldd	r25, Z+23	; 0x17
    32bc:	98 9d       	mul	r25, r8
    32be:	81 2d       	mov	r24, r1
    32c0:	11 24       	eor	r1, r1
    32c2:	86 95       	lsr	r24
    32c4:	86 95       	lsr	r24
    32c6:	86 95       	lsr	r24
    32c8:	8d 87       	std	Y+13, r24	; 0x0d
		buffer[13]=rtc.Jahr%10;
    32ca:	88 0f       	add	r24, r24
    32cc:	28 2f       	mov	r18, r24
    32ce:	22 0f       	add	r18, r18
    32d0:	22 0f       	add	r18, r18
    32d2:	82 0f       	add	r24, r18
    32d4:	98 1b       	sub	r25, r24
    32d6:	9e 87       	std	Y+14, r25	; 0x0e
    32d8:	0d 89       	ldd	r16, Y+21	; 0x15
    32da:	1e 89       	ldd	r17, Y+22	; 0x16
    32dc:	2f 2c       	mov	r2, r15
    32de:	33 24       	eor	r3, r3
    32e0:	33 94       	inc	r3
    32e2:	05 c0       	rjmp	.+10     	; 0x32ee <_Z13uhreinstellenv+0x190>
    32e4:	33 94       	inc	r3
    32e6:	0f 5f       	subi	r16, 0xFF	; 255
    32e8:	1f 4f       	sbci	r17, 0xFF	; 255
    32ea:	f0 e1       	ldi	r31, 0x10	; 16
    32ec:	2f 0e       	add	r2, r31
		buffersize=14;
		for(uint8_t i = 0; i<5;i++){
			if(i!=2){
    32ee:	83 e0       	ldi	r24, 0x03	; 3
    32f0:	38 16       	cp	r3, r24
    32f2:	61 f0       	breq	.+24     	; 0x330c <_Z13uhreinstellenv+0x1ae>
				oled.draw_number16x16(buffer[i],i*numbersmalsize,2*charhighte);
    32f4:	20 e1       	ldi	r18, 0x10	; 16
    32f6:	42 2d       	mov	r20, r2
    32f8:	f8 01       	movw	r30, r16
    32fa:	60 81       	ld	r22, Z
    32fc:	89 e3       	ldi	r24, 0x39	; 57
    32fe:	94 e0       	ldi	r25, 0x04	; 4
    3300:	0e 94 9b 04 	call	0x936	; 0x936 <_ZN7Display16draw_number16x16Ehhh>
		buffer[10]=rtc.Monat%10;
		buffer[11]='.';
		buffer[12]=rtc.Jahr/10;
		buffer[13]=rtc.Jahr%10;
		buffersize=14;
		for(uint8_t i = 0; i<5;i++){
    3304:	f4 e0       	ldi	r31, 0x04	; 4
    3306:	f3 15       	cp	r31, r3
    3308:	68 f7       	brcc	.-38     	; 0x32e4 <_Z13uhreinstellenv+0x186>
    330a:	08 c0       	rjmp	.+16     	; 0x331c <_Z13uhreinstellenv+0x1be>
			if(i!=2){
				oled.draw_number16x16(buffer[i],i*numbersmalsize,2*charhighte);
			}
			else {
				oled.draw_ASCI(buffer[i],i*numbersmalsize+numbersmalsize/2,2*charhighte+charhighte/2);
    330c:	24 e1       	ldi	r18, 0x14	; 20
    330e:	48 e2       	ldi	r20, 0x28	; 40
    3310:	6b 81       	ldd	r22, Y+3	; 0x03
    3312:	89 e3       	ldi	r24, 0x39	; 57
    3314:	94 e0       	ldi	r25, 0x04	; 4
    3316:	0e 94 51 04 	call	0x8a2	; 0x8a2 <_ZN7Display9draw_ASCIEhhh>
    331a:	e4 cf       	rjmp	.-56     	; 0x32e4 <_Z13uhreinstellenv+0x186>
    331c:	8e 01       	movw	r16, r28
    331e:	09 5f       	subi	r16, 0xF9	; 249
    3320:	1f 4f       	sbci	r17, 0xFF	; 255
		buffer[10]=rtc.Monat%10;
		buffer[11]='.';
		buffer[12]=rtc.Jahr/10;
		buffer[13]=rtc.Jahr%10;
		buffersize=14;
		for(uint8_t i = 0; i<5;i++){
    3322:	2f 2c       	mov	r2, r15
    3324:	0f 2e       	mov	r0, r31
    3326:	f6 e0       	ldi	r31, 0x06	; 6
    3328:	3f 2e       	mov	r3, r31
    332a:	f0 2d       	mov	r31, r0
			else {
				oled.draw_ASCI(buffer[i],i*numbersmalsize+numbersmalsize/2,2*charhighte+charhighte/2);
			}
		}
		for(uint8_t i = 6; i<buffersize;i++){
			if(i!=8 && i!=11){
    332c:	88 e0       	ldi	r24, 0x08	; 8
    332e:	38 16       	cp	r3, r24
    3330:	61 f0       	breq	.+24     	; 0x334a <_Z13uhreinstellenv+0x1ec>
    3332:	9b e0       	ldi	r25, 0x0B	; 11
    3334:	39 16       	cp	r3, r25
    3336:	49 f0       	breq	.+18     	; 0x334a <_Z13uhreinstellenv+0x1ec>
				oled.draw_number16x16(buffer[i],i*numbersmalsize-6*numbersmalsize,4*charhighte);
    3338:	2e 2d       	mov	r18, r14
    333a:	42 2d       	mov	r20, r2
    333c:	f8 01       	movw	r30, r16
    333e:	60 81       	ld	r22, Z
    3340:	89 e3       	ldi	r24, 0x39	; 57
    3342:	94 e0       	ldi	r25, 0x04	; 4
    3344:	0e 94 9b 04 	call	0x936	; 0x936 <_ZN7Display16draw_number16x16Ehhh>
    3348:	09 c0       	rjmp	.+18     	; 0x335c <_Z13uhreinstellenv+0x1fe>
			}
			else {
				oled.draw_ASCI(buffer[i],i*numbersmalsize+numbersmalsize/2-6*numbersmalsize,5*charhighte);
    334a:	28 e2       	ldi	r18, 0x28	; 40
    334c:	48 e0       	ldi	r20, 0x08	; 8
    334e:	42 0d       	add	r20, r2
    3350:	f8 01       	movw	r30, r16
    3352:	60 81       	ld	r22, Z
    3354:	89 e3       	ldi	r24, 0x39	; 57
    3356:	94 e0       	ldi	r25, 0x04	; 4
    3358:	0e 94 51 04 	call	0x8a2	; 0x8a2 <_ZN7Display9draw_ASCIEhhh>
			}
			else {
				oled.draw_ASCI(buffer[i],i*numbersmalsize+numbersmalsize/2,2*charhighte+charhighte/2);
			}
		}
		for(uint8_t i = 6; i<buffersize;i++){
    335c:	33 94       	inc	r3
    335e:	0f 5f       	subi	r16, 0xFF	; 255
    3360:	1f 4f       	sbci	r17, 0xFF	; 255
    3362:	f0 e1       	ldi	r31, 0x10	; 16
    3364:	2f 0e       	add	r2, r31
    3366:	8e e0       	ldi	r24, 0x0E	; 14
    3368:	38 12       	cpse	r3, r24
    336a:	e0 cf       	rjmp	.-64     	; 0x332c <_Z13uhreinstellenv+0x1ce>
			else {
				oled.draw_ASCI(buffer[i],i*numbersmalsize+numbersmalsize/2-6*numbersmalsize,5*charhighte);
			}
		}

		oled.sendFrame();
    336c:	89 e3       	ldi	r24, 0x39	; 57
    336e:	94 e0       	ldi	r25, 0x04	; 4
    3370:	0e 94 b3 03 	call	0x766	; 0x766 <_ZN7Display9sendFrameEv>
		oled.clearFrame();
    3374:	89 e3       	ldi	r24, 0x39	; 57
    3376:	94 e0       	ldi	r25, 0x04	; 4
    3378:	0e 94 39 03 	call	0x672	; 0x672 <_ZN7Display10clearFrameEv>
		switch (pos) {
    337c:	89 2d       	mov	r24, r9
    337e:	90 e0       	ldi	r25, 0x00	; 0
    3380:	8a 30       	cpi	r24, 0x0A	; 10
    3382:	91 05       	cpc	r25, r1
    3384:	08 f0       	brcs	.+2      	; 0x3388 <_Z13uhreinstellenv+0x22a>
    3386:	2c c2       	rjmp	.+1112   	; 0x37e0 <_Z13uhreinstellenv+0x682>
    3388:	fc 01       	movw	r30, r24
    338a:	ed 55       	subi	r30, 0x5D	; 93
    338c:	ff 4f       	sbci	r31, 0xFF	; 255
    338e:	0c 94 06 28 	jmp	0x500c	; 0x500c <__tablejump2__>
			case 0:
			rtc.Stunden=Tastatur.ZahlenausTastatur()*10;
    3392:	8d e2       	ldi	r24, 0x2D	; 45
    3394:	94 e0       	ldi	r25, 0x04	; 4
    3396:	0e 94 b6 08 	call	0x116c	; 0x116c <_ZN9Interface17ZahlenausTastaturEv>
    339a:	88 0f       	add	r24, r24
    339c:	98 2f       	mov	r25, r24
    339e:	99 0f       	add	r25, r25
    33a0:	99 0f       	add	r25, r25
    33a2:	89 0f       	add	r24, r25
			if(rtc.Stunden>=24){
    33a4:	88 31       	cpi	r24, 0x18	; 24
    33a6:	08 f4       	brcc	.+2      	; 0x33aa <_Z13uhreinstellenv+0x24c>
    33a8:	57 c2       	rjmp	.+1198   	; 0x3858 <_Z13uhreinstellenv+0x6fa>
				rtc.Stunden=0;
    33aa:	f6 01       	movw	r30, r12
    33ac:	10 8a       	std	Z+16, r1	; 0x10
				pos=-1;
				buffersize=sprintf(buffer,"Stunden falsch");
    33ae:	ee ee       	ldi	r30, 0xEE	; 238
    33b0:	f1 e0       	ldi	r31, 0x01	; 1
    33b2:	d2 01       	movw	r26, r4
    33b4:	87 2d       	mov	r24, r7
    33b6:	01 90       	ld	r0, Z+
    33b8:	0d 92       	st	X+, r0
    33ba:	8a 95       	dec	r24
    33bc:	e1 f7       	brne	.-8      	; 0x33b6 <_Z13uhreinstellenv+0x258>
    33be:	1f 2d       	mov	r17, r15
				for(uint8_t i = 0; i<buffersize;i++){
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
    33c0:	f5 01       	movw	r30, r10
    33c2:	61 91       	ld	r22, Z+
    33c4:	5f 01       	movw	r10, r30
    33c6:	28 e3       	ldi	r18, 0x38	; 56
    33c8:	41 2f       	mov	r20, r17
    33ca:	89 e3       	ldi	r24, 0x39	; 57
    33cc:	94 e0       	ldi	r25, 0x04	; 4
    33ce:	0e 94 51 04 	call	0x8a2	; 0x8a2 <_ZN7Display9draw_ASCIEhhh>
    33d2:	1a 5f       	subi	r17, 0xFA	; 250
			rtc.Stunden=Tastatur.ZahlenausTastatur()*10;
			if(rtc.Stunden>=24){
				rtc.Stunden=0;
				pos=-1;
				buffersize=sprintf(buffer,"Stunden falsch");
				for(uint8_t i = 0; i<buffersize;i++){
    33d4:	14 35       	cpi	r17, 0x54	; 84
    33d6:	a1 f7       	brne	.-24     	; 0x33c0 <_Z13uhreinstellenv+0x262>
		switch (pos) {
			case 0:
			rtc.Stunden=Tastatur.ZahlenausTastatur()*10;
			if(rtc.Stunden>=24){
				rtc.Stunden=0;
				pos=-1;
    33d8:	99 24       	eor	r9, r9
    33da:	9a 94       	dec	r9
    33dc:	3f c2       	rjmp	.+1150   	; 0x385c <_Z13uhreinstellenv+0x6fe>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 1:
			rtc.Stunden+=Tastatur.ZahlenausTastatur();
    33de:	8d e2       	ldi	r24, 0x2D	; 45
    33e0:	94 e0       	ldi	r25, 0x04	; 4
    33e2:	0e 94 b6 08 	call	0x116c	; 0x116c <_ZN9Interface17ZahlenausTastaturEv>
    33e6:	f6 01       	movw	r30, r12
    33e8:	20 89       	ldd	r18, Z+16	; 0x10
    33ea:	90 e0       	ldi	r25, 0x00	; 0
    33ec:	82 0f       	add	r24, r18
    33ee:	91 1d       	adc	r25, r1
			if(rtc.Stunden>=24){
    33f0:	88 31       	cpi	r24, 0x18	; 24
    33f2:	10 f4       	brcc	.+4      	; 0x33f8 <_Z13uhreinstellenv+0x29a>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 1:
			rtc.Stunden+=Tastatur.ZahlenausTastatur();
    33f4:	80 8b       	std	Z+16, r24	; 0x10
    33f6:	32 c2       	rjmp	.+1124   	; 0x385c <_Z13uhreinstellenv+0x6fe>
			if(rtc.Stunden>=24){
				rtc.Stunden=0;
    33f8:	f6 01       	movw	r30, r12
    33fa:	10 8a       	std	Z+16, r1	; 0x10
				pos=-1;
				buffersize=sprintf(buffer,"Stunden falsch");
    33fc:	ee ee       	ldi	r30, 0xEE	; 238
    33fe:	f1 e0       	ldi	r31, 0x01	; 1
    3400:	d2 01       	movw	r26, r4
    3402:	87 2d       	mov	r24, r7
    3404:	01 90       	ld	r0, Z+
    3406:	0d 92       	st	X+, r0
    3408:	8a 95       	dec	r24
    340a:	e1 f7       	brne	.-8      	; 0x3404 <_Z13uhreinstellenv+0x2a6>
    340c:	1f 2d       	mov	r17, r15
				for(uint8_t i = 0; i<buffersize;i++){
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
    340e:	f5 01       	movw	r30, r10
    3410:	61 91       	ld	r22, Z+
    3412:	5f 01       	movw	r10, r30
    3414:	28 e3       	ldi	r18, 0x38	; 56
    3416:	41 2f       	mov	r20, r17
    3418:	89 e3       	ldi	r24, 0x39	; 57
    341a:	94 e0       	ldi	r25, 0x04	; 4
    341c:	0e 94 51 04 	call	0x8a2	; 0x8a2 <_ZN7Display9draw_ASCIEhhh>
    3420:	1a 5f       	subi	r17, 0xFA	; 250
			rtc.Stunden+=Tastatur.ZahlenausTastatur();
			if(rtc.Stunden>=24){
				rtc.Stunden=0;
				pos=-1;
				buffersize=sprintf(buffer,"Stunden falsch");
				for(uint8_t i = 0; i<buffersize;i++){
    3422:	14 35       	cpi	r17, 0x54	; 84
    3424:	a1 f7       	brne	.-24     	; 0x340e <_Z13uhreinstellenv+0x2b0>
			break;
			case 1:
			rtc.Stunden+=Tastatur.ZahlenausTastatur();
			if(rtc.Stunden>=24){
				rtc.Stunden=0;
				pos=-1;
    3426:	99 24       	eor	r9, r9
    3428:	9a 94       	dec	r9
    342a:	18 c2       	rjmp	.+1072   	; 0x385c <_Z13uhreinstellenv+0x6fe>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 2:
			rtc.Minuten=Tastatur.ZahlenausTastatur()*10;
    342c:	8d e2       	ldi	r24, 0x2D	; 45
    342e:	94 e0       	ldi	r25, 0x04	; 4
    3430:	0e 94 b6 08 	call	0x116c	; 0x116c <_ZN9Interface17ZahlenausTastaturEv>
    3434:	88 0f       	add	r24, r24
    3436:	98 2f       	mov	r25, r24
    3438:	99 0f       	add	r25, r25
    343a:	99 0f       	add	r25, r25
    343c:	89 0f       	add	r24, r25
			if(rtc.Minuten>=60){
    343e:	8c 33       	cpi	r24, 0x3C	; 60
    3440:	18 f4       	brcc	.+6      	; 0x3448 <_Z13uhreinstellenv+0x2ea>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 2:
			rtc.Minuten=Tastatur.ZahlenausTastatur()*10;
    3442:	f6 01       	movw	r30, r12
    3444:	81 8b       	std	Z+17, r24	; 0x11
    3446:	0a c2       	rjmp	.+1044   	; 0x385c <_Z13uhreinstellenv+0x6fe>
			if(rtc.Minuten>=60){
				rtc.Minuten=0;
    3448:	f6 01       	movw	r30, r12
    344a:	11 8a       	std	Z+17, r1	; 0x11
				pos=1;
				buffersize=sprintf(buffer,"Minuten falsch");
    344c:	ed ef       	ldi	r30, 0xFD	; 253
    344e:	f1 e0       	ldi	r31, 0x01	; 1
    3450:	d2 01       	movw	r26, r4
    3452:	87 2d       	mov	r24, r7
    3454:	01 90       	ld	r0, Z+
    3456:	0d 92       	st	X+, r0
    3458:	8a 95       	dec	r24
    345a:	e1 f7       	brne	.-8      	; 0x3454 <_Z13uhreinstellenv+0x2f6>
    345c:	1f 2d       	mov	r17, r15
				for(uint8_t i = 0; i<buffersize;i++){
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
    345e:	f5 01       	movw	r30, r10
    3460:	61 91       	ld	r22, Z+
    3462:	5f 01       	movw	r10, r30
    3464:	28 e3       	ldi	r18, 0x38	; 56
    3466:	41 2f       	mov	r20, r17
    3468:	89 e3       	ldi	r24, 0x39	; 57
    346a:	94 e0       	ldi	r25, 0x04	; 4
    346c:	0e 94 51 04 	call	0x8a2	; 0x8a2 <_ZN7Display9draw_ASCIEhhh>
    3470:	1a 5f       	subi	r17, 0xFA	; 250
			rtc.Minuten=Tastatur.ZahlenausTastatur()*10;
			if(rtc.Minuten>=60){
				rtc.Minuten=0;
				pos=1;
				buffersize=sprintf(buffer,"Minuten falsch");
				for(uint8_t i = 0; i<buffersize;i++){
    3472:	14 35       	cpi	r17, 0x54	; 84
    3474:	a1 f7       	brne	.-24     	; 0x345e <_Z13uhreinstellenv+0x300>
			break;
			case 2:
			rtc.Minuten=Tastatur.ZahlenausTastatur()*10;
			if(rtc.Minuten>=60){
				rtc.Minuten=0;
				pos=1;
    3476:	99 24       	eor	r9, r9
    3478:	93 94       	inc	r9
    347a:	f0 c1       	rjmp	.+992    	; 0x385c <_Z13uhreinstellenv+0x6fe>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 3:
			rtc.Minuten+=Tastatur.ZahlenausTastatur();
    347c:	8d e2       	ldi	r24, 0x2D	; 45
    347e:	94 e0       	ldi	r25, 0x04	; 4
    3480:	0e 94 b6 08 	call	0x116c	; 0x116c <_ZN9Interface17ZahlenausTastaturEv>
    3484:	f6 01       	movw	r30, r12
    3486:	21 89       	ldd	r18, Z+17	; 0x11
    3488:	90 e0       	ldi	r25, 0x00	; 0
    348a:	82 0f       	add	r24, r18
    348c:	91 1d       	adc	r25, r1
			if(rtc.Minuten>=60){
    348e:	8c 33       	cpi	r24, 0x3C	; 60
    3490:	10 f4       	brcc	.+4      	; 0x3496 <_Z13uhreinstellenv+0x338>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 3:
			rtc.Minuten+=Tastatur.ZahlenausTastatur();
    3492:	81 8b       	std	Z+17, r24	; 0x11
    3494:	e3 c1       	rjmp	.+966    	; 0x385c <_Z13uhreinstellenv+0x6fe>
			if(rtc.Minuten>=60){
				rtc.Minuten=0;
    3496:	f6 01       	movw	r30, r12
    3498:	11 8a       	std	Z+17, r1	; 0x11
				pos=1;
				buffersize=sprintf(buffer,"Minuten falsch");
    349a:	ed ef       	ldi	r30, 0xFD	; 253
    349c:	f1 e0       	ldi	r31, 0x01	; 1
    349e:	d2 01       	movw	r26, r4
    34a0:	87 2d       	mov	r24, r7
    34a2:	01 90       	ld	r0, Z+
    34a4:	0d 92       	st	X+, r0
    34a6:	8a 95       	dec	r24
    34a8:	e1 f7       	brne	.-8      	; 0x34a2 <_Z13uhreinstellenv+0x344>
    34aa:	1f 2d       	mov	r17, r15
				for(uint8_t i = 0; i<buffersize;i++){
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
    34ac:	f5 01       	movw	r30, r10
    34ae:	61 91       	ld	r22, Z+
    34b0:	5f 01       	movw	r10, r30
    34b2:	28 e3       	ldi	r18, 0x38	; 56
    34b4:	41 2f       	mov	r20, r17
    34b6:	89 e3       	ldi	r24, 0x39	; 57
    34b8:	94 e0       	ldi	r25, 0x04	; 4
    34ba:	0e 94 51 04 	call	0x8a2	; 0x8a2 <_ZN7Display9draw_ASCIEhhh>
    34be:	1a 5f       	subi	r17, 0xFA	; 250
			rtc.Minuten+=Tastatur.ZahlenausTastatur();
			if(rtc.Minuten>=60){
				rtc.Minuten=0;
				pos=1;
				buffersize=sprintf(buffer,"Minuten falsch");
				for(uint8_t i = 0; i<buffersize;i++){
    34c0:	14 35       	cpi	r17, 0x54	; 84
    34c2:	a1 f7       	brne	.-24     	; 0x34ac <_Z13uhreinstellenv+0x34e>
			break;
			case 3:
			rtc.Minuten+=Tastatur.ZahlenausTastatur();
			if(rtc.Minuten>=60){
				rtc.Minuten=0;
				pos=1;
    34c4:	99 24       	eor	r9, r9
    34c6:	93 94       	inc	r9
    34c8:	c9 c1       	rjmp	.+914    	; 0x385c <_Z13uhreinstellenv+0x6fe>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 4:
			rtc.Tag=Tastatur.ZahlenausTastatur()*10;
    34ca:	8d e2       	ldi	r24, 0x2D	; 45
    34cc:	94 e0       	ldi	r25, 0x04	; 4
    34ce:	0e 94 b6 08 	call	0x116c	; 0x116c <_ZN9Interface17ZahlenausTastaturEv>
    34d2:	88 0f       	add	r24, r24
    34d4:	98 2f       	mov	r25, r24
    34d6:	99 0f       	add	r25, r25
    34d8:	99 0f       	add	r25, r25
    34da:	89 0f       	add	r24, r25
			if(rtc.Tag>=32){
    34dc:	80 32       	cpi	r24, 0x20	; 32
    34de:	18 f4       	brcc	.+6      	; 0x34e6 <_Z13uhreinstellenv+0x388>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 4:
			rtc.Tag=Tastatur.ZahlenausTastatur()*10;
    34e0:	f6 01       	movw	r30, r12
    34e2:	84 8b       	std	Z+20, r24	; 0x14
    34e4:	bb c1       	rjmp	.+886    	; 0x385c <_Z13uhreinstellenv+0x6fe>
			if(rtc.Tag>=32){
				rtc.Tag=0;
    34e6:	f6 01       	movw	r30, r12
    34e8:	14 8a       	std	Z+20, r1	; 0x14
				pos=3;
				buffersize=sprintf(buffer,"Tag falsch");
    34ea:	8b e0       	ldi	r24, 0x0B	; 11
    34ec:	ec e0       	ldi	r30, 0x0C	; 12
    34ee:	f2 e0       	ldi	r31, 0x02	; 2
    34f0:	d2 01       	movw	r26, r4
    34f2:	01 90       	ld	r0, Z+
    34f4:	0d 92       	st	X+, r0
    34f6:	8a 95       	dec	r24
    34f8:	e1 f7       	brne	.-8      	; 0x34f2 <_Z13uhreinstellenv+0x394>
    34fa:	1f 2d       	mov	r17, r15
				for(uint8_t i = 0; i<buffersize;i++){
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
    34fc:	f5 01       	movw	r30, r10
    34fe:	61 91       	ld	r22, Z+
    3500:	5f 01       	movw	r10, r30
    3502:	28 e3       	ldi	r18, 0x38	; 56
    3504:	41 2f       	mov	r20, r17
    3506:	89 e3       	ldi	r24, 0x39	; 57
    3508:	94 e0       	ldi	r25, 0x04	; 4
    350a:	0e 94 51 04 	call	0x8a2	; 0x8a2 <_ZN7Display9draw_ASCIEhhh>
    350e:	1a 5f       	subi	r17, 0xFA	; 250
			rtc.Tag=Tastatur.ZahlenausTastatur()*10;
			if(rtc.Tag>=32){
				rtc.Tag=0;
				pos=3;
				buffersize=sprintf(buffer,"Tag falsch");
				for(uint8_t i = 0; i<buffersize;i++){
    3510:	1c 33       	cpi	r17, 0x3C	; 60
    3512:	a1 f7       	brne	.-24     	; 0x34fc <_Z13uhreinstellenv+0x39e>
			break;
			case 4:
			rtc.Tag=Tastatur.ZahlenausTastatur()*10;
			if(rtc.Tag>=32){
				rtc.Tag=0;
				pos=3;
    3514:	0f 2e       	mov	r0, r31
    3516:	f3 e0       	ldi	r31, 0x03	; 3
    3518:	9f 2e       	mov	r9, r31
    351a:	f0 2d       	mov	r31, r0
    351c:	9f c1       	rjmp	.+830    	; 0x385c <_Z13uhreinstellenv+0x6fe>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 5:
			rtc.Tag+=Tastatur.ZahlenausTastatur();
    351e:	8d e2       	ldi	r24, 0x2D	; 45
    3520:	94 e0       	ldi	r25, 0x04	; 4
    3522:	0e 94 b6 08 	call	0x116c	; 0x116c <_ZN9Interface17ZahlenausTastaturEv>
    3526:	f6 01       	movw	r30, r12
    3528:	24 89       	ldd	r18, Z+20	; 0x14
    352a:	90 e0       	ldi	r25, 0x00	; 0
    352c:	82 0f       	add	r24, r18
    352e:	91 1d       	adc	r25, r1
			if(rtc.Tag>=32){
    3530:	80 32       	cpi	r24, 0x20	; 32
    3532:	10 f4       	brcc	.+4      	; 0x3538 <_Z13uhreinstellenv+0x3da>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 5:
			rtc.Tag+=Tastatur.ZahlenausTastatur();
    3534:	84 8b       	std	Z+20, r24	; 0x14
    3536:	92 c1       	rjmp	.+804    	; 0x385c <_Z13uhreinstellenv+0x6fe>
			if(rtc.Tag>=32){
				rtc.Tag=0;
    3538:	f6 01       	movw	r30, r12
    353a:	14 8a       	std	Z+20, r1	; 0x14
				pos=3;
				buffersize=sprintf(buffer,"Tag falsch");
    353c:	8b e0       	ldi	r24, 0x0B	; 11
    353e:	ec e0       	ldi	r30, 0x0C	; 12
    3540:	f2 e0       	ldi	r31, 0x02	; 2
    3542:	d2 01       	movw	r26, r4
    3544:	01 90       	ld	r0, Z+
    3546:	0d 92       	st	X+, r0
    3548:	8a 95       	dec	r24
    354a:	e1 f7       	brne	.-8      	; 0x3544 <_Z13uhreinstellenv+0x3e6>
    354c:	1f 2d       	mov	r17, r15
				for(uint8_t i = 0; i<buffersize;i++){
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
    354e:	f5 01       	movw	r30, r10
    3550:	61 91       	ld	r22, Z+
    3552:	5f 01       	movw	r10, r30
    3554:	28 e3       	ldi	r18, 0x38	; 56
    3556:	41 2f       	mov	r20, r17
    3558:	89 e3       	ldi	r24, 0x39	; 57
    355a:	94 e0       	ldi	r25, 0x04	; 4
    355c:	0e 94 51 04 	call	0x8a2	; 0x8a2 <_ZN7Display9draw_ASCIEhhh>
    3560:	1a 5f       	subi	r17, 0xFA	; 250
			rtc.Tag+=Tastatur.ZahlenausTastatur();
			if(rtc.Tag>=32){
				rtc.Tag=0;
				pos=3;
				buffersize=sprintf(buffer,"Tag falsch");
				for(uint8_t i = 0; i<buffersize;i++){
    3562:	1c 33       	cpi	r17, 0x3C	; 60
    3564:	a1 f7       	brne	.-24     	; 0x354e <_Z13uhreinstellenv+0x3f0>
			break;
			case 5:
			rtc.Tag+=Tastatur.ZahlenausTastatur();
			if(rtc.Tag>=32){
				rtc.Tag=0;
				pos=3;
    3566:	0f 2e       	mov	r0, r31
    3568:	f3 e0       	ldi	r31, 0x03	; 3
    356a:	9f 2e       	mov	r9, r31
    356c:	f0 2d       	mov	r31, r0
    356e:	76 c1       	rjmp	.+748    	; 0x385c <_Z13uhreinstellenv+0x6fe>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 6:
			rtc.Monat=Tastatur.ZahlenausTastatur()*10;
    3570:	8d e2       	ldi	r24, 0x2D	; 45
    3572:	94 e0       	ldi	r25, 0x04	; 4
    3574:	0e 94 b6 08 	call	0x116c	; 0x116c <_ZN9Interface17ZahlenausTastaturEv>
    3578:	88 0f       	add	r24, r24
    357a:	98 2f       	mov	r25, r24
    357c:	99 0f       	add	r25, r25
    357e:	99 0f       	add	r25, r25
    3580:	89 0f       	add	r24, r25
			if(rtc.Monat>=13){
    3582:	8d 30       	cpi	r24, 0x0D	; 13
    3584:	18 f4       	brcc	.+6      	; 0x358c <_Z13uhreinstellenv+0x42e>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 6:
			rtc.Monat=Tastatur.ZahlenausTastatur()*10;
    3586:	f6 01       	movw	r30, r12
    3588:	86 8b       	std	Z+22, r24	; 0x16
    358a:	68 c1       	rjmp	.+720    	; 0x385c <_Z13uhreinstellenv+0x6fe>
			if(rtc.Monat>=13){
				rtc.Monat=0;
    358c:	f6 01       	movw	r30, r12
    358e:	16 8a       	std	Z+22, r1	; 0x16
				pos=5;
				buffersize=sprintf(buffer,"Monat falsch");
    3590:	8d e0       	ldi	r24, 0x0D	; 13
    3592:	e7 e1       	ldi	r30, 0x17	; 23
    3594:	f2 e0       	ldi	r31, 0x02	; 2
    3596:	d2 01       	movw	r26, r4
    3598:	01 90       	ld	r0, Z+
    359a:	0d 92       	st	X+, r0
    359c:	8a 95       	dec	r24
    359e:	e1 f7       	brne	.-8      	; 0x3598 <_Z13uhreinstellenv+0x43a>
    35a0:	1f 2d       	mov	r17, r15
				for(uint8_t i = 0; i<buffersize;i++){
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
    35a2:	f5 01       	movw	r30, r10
    35a4:	61 91       	ld	r22, Z+
    35a6:	5f 01       	movw	r10, r30
    35a8:	28 e3       	ldi	r18, 0x38	; 56
    35aa:	41 2f       	mov	r20, r17
    35ac:	89 e3       	ldi	r24, 0x39	; 57
    35ae:	94 e0       	ldi	r25, 0x04	; 4
    35b0:	0e 94 51 04 	call	0x8a2	; 0x8a2 <_ZN7Display9draw_ASCIEhhh>
    35b4:	1a 5f       	subi	r17, 0xFA	; 250
			rtc.Monat=Tastatur.ZahlenausTastatur()*10;
			if(rtc.Monat>=13){
				rtc.Monat=0;
				pos=5;
				buffersize=sprintf(buffer,"Monat falsch");
				for(uint8_t i = 0; i<buffersize;i++){
    35b6:	18 34       	cpi	r17, 0x48	; 72
    35b8:	a1 f7       	brne	.-24     	; 0x35a2 <_Z13uhreinstellenv+0x444>
			break;
			case 6:
			rtc.Monat=Tastatur.ZahlenausTastatur()*10;
			if(rtc.Monat>=13){
				rtc.Monat=0;
				pos=5;
    35ba:	0f 2e       	mov	r0, r31
    35bc:	f5 e0       	ldi	r31, 0x05	; 5
    35be:	9f 2e       	mov	r9, r31
    35c0:	f0 2d       	mov	r31, r0
    35c2:	4c c1       	rjmp	.+664    	; 0x385c <_Z13uhreinstellenv+0x6fe>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 7:
			rtc.Monat+=Tastatur.ZahlenausTastatur();
    35c4:	8d e2       	ldi	r24, 0x2D	; 45
    35c6:	94 e0       	ldi	r25, 0x04	; 4
    35c8:	0e 94 b6 08 	call	0x116c	; 0x116c <_ZN9Interface17ZahlenausTastaturEv>
    35cc:	f6 01       	movw	r30, r12
    35ce:	26 89       	ldd	r18, Z+22	; 0x16
    35d0:	90 e0       	ldi	r25, 0x00	; 0
    35d2:	82 0f       	add	r24, r18
    35d4:	91 1d       	adc	r25, r1
			if(rtc.Monat>=13){
    35d6:	8d 30       	cpi	r24, 0x0D	; 13
    35d8:	10 f4       	brcc	.+4      	; 0x35de <_Z13uhreinstellenv+0x480>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 7:
			rtc.Monat+=Tastatur.ZahlenausTastatur();
    35da:	86 8b       	std	Z+22, r24	; 0x16
    35dc:	1d c0       	rjmp	.+58     	; 0x3618 <_Z13uhreinstellenv+0x4ba>
			if(rtc.Monat>=13){
				rtc.Monat=0;
    35de:	f6 01       	movw	r30, r12
    35e0:	16 8a       	std	Z+22, r1	; 0x16
				pos=5;
				buffersize=sprintf(buffer,"Monat falsch");
    35e2:	8d e0       	ldi	r24, 0x0D	; 13
    35e4:	e7 e1       	ldi	r30, 0x17	; 23
    35e6:	f2 e0       	ldi	r31, 0x02	; 2
    35e8:	d2 01       	movw	r26, r4
    35ea:	01 90       	ld	r0, Z+
    35ec:	0d 92       	st	X+, r0
    35ee:	8a 95       	dec	r24
    35f0:	e1 f7       	brne	.-8      	; 0x35ea <_Z13uhreinstellenv+0x48c>
    35f2:	2d 88       	ldd	r2, Y+21	; 0x15
    35f4:	3e 88       	ldd	r3, Y+22	; 0x16
    35f6:	1f 2d       	mov	r17, r15
				for(uint8_t i = 0; i<buffersize;i++){
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
    35f8:	f1 01       	movw	r30, r2
    35fa:	61 91       	ld	r22, Z+
    35fc:	1f 01       	movw	r2, r30
    35fe:	28 e3       	ldi	r18, 0x38	; 56
    3600:	41 2f       	mov	r20, r17
    3602:	89 e3       	ldi	r24, 0x39	; 57
    3604:	94 e0       	ldi	r25, 0x04	; 4
    3606:	0e 94 51 04 	call	0x8a2	; 0x8a2 <_ZN7Display9draw_ASCIEhhh>
    360a:	1a 5f       	subi	r17, 0xFA	; 250
			rtc.Monat+=Tastatur.ZahlenausTastatur();
			if(rtc.Monat>=13){
				rtc.Monat=0;
				pos=5;
				buffersize=sprintf(buffer,"Monat falsch");
				for(uint8_t i = 0; i<buffersize;i++){
    360c:	18 34       	cpi	r17, 0x48	; 72
    360e:	a1 f7       	brne	.-24     	; 0x35f8 <_Z13uhreinstellenv+0x49a>
			break;
			case 7:
			rtc.Monat+=Tastatur.ZahlenausTastatur();
			if(rtc.Monat>=13){
				rtc.Monat=0;
				pos=5;
    3610:	0f 2e       	mov	r0, r31
    3612:	f5 e0       	ldi	r31, 0x05	; 5
    3614:	9f 2e       	mov	r9, r31
    3616:	f0 2d       	mov	r31, r0
				buffersize=sprintf(buffer,"Monat falsch");
				for(uint8_t i = 0; i<buffersize;i++){
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			if(rtc.Monat==4||rtc.Monat==6||rtc.Monat==9||rtc.Monat==11){
    3618:	f6 01       	movw	r30, r12
    361a:	96 89       	ldd	r25, Z+22	; 0x16
    361c:	89 2f       	mov	r24, r25
    361e:	8d 7f       	andi	r24, 0xFD	; 253
    3620:	84 30       	cpi	r24, 0x04	; 4
    3622:	11 f0       	breq	.+4      	; 0x3628 <_Z13uhreinstellenv+0x4ca>
    3624:	89 30       	cpi	r24, 0x09	; 9
    3626:	09 f5       	brne	.+66     	; 0x366a <_Z13uhreinstellenv+0x50c>
				if(rtc.Tag>=31){
    3628:	f6 01       	movw	r30, r12
    362a:	84 89       	ldd	r24, Z+20	; 0x14
    362c:	8f 31       	cpi	r24, 0x1F	; 31
    362e:	08 f4       	brcc	.+2      	; 0x3632 <_Z13uhreinstellenv+0x4d4>
    3630:	d8 c0       	rjmp	.+432    	; 0x37e2 <_Z13uhreinstellenv+0x684>
					rtc.Tag=0;
    3632:	14 8a       	std	Z+20, r1	; 0x14
					rtc.Monat=0;
    3634:	16 8a       	std	Z+22, r1	; 0x16
					pos=3;
					buffersize=sprintf(buffer,"Tag falsch");
    3636:	8b e0       	ldi	r24, 0x0B	; 11
    3638:	ec e0       	ldi	r30, 0x0C	; 12
    363a:	f2 e0       	ldi	r31, 0x02	; 2
    363c:	d2 01       	movw	r26, r4
    363e:	01 90       	ld	r0, Z+
    3640:	0d 92       	st	X+, r0
    3642:	8a 95       	dec	r24
    3644:	e1 f7       	brne	.-8      	; 0x363e <_Z13uhreinstellenv+0x4e0>
    3646:	1f 2d       	mov	r17, r15
					for(uint8_t i = 0; i<buffersize;i++){
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
    3648:	f5 01       	movw	r30, r10
    364a:	61 91       	ld	r22, Z+
    364c:	5f 01       	movw	r10, r30
    364e:	28 e3       	ldi	r18, 0x38	; 56
    3650:	41 2f       	mov	r20, r17
    3652:	89 e3       	ldi	r24, 0x39	; 57
    3654:	94 e0       	ldi	r25, 0x04	; 4
    3656:	0e 94 51 04 	call	0x8a2	; 0x8a2 <_ZN7Display9draw_ASCIEhhh>
    365a:	1a 5f       	subi	r17, 0xFA	; 250
				if(rtc.Tag>=31){
					rtc.Tag=0;
					rtc.Monat=0;
					pos=3;
					buffersize=sprintf(buffer,"Tag falsch");
					for(uint8_t i = 0; i<buffersize;i++){
    365c:	1c 33       	cpi	r17, 0x3C	; 60
    365e:	a1 f7       	brne	.-24     	; 0x3648 <_Z13uhreinstellenv+0x4ea>
			}
			if(rtc.Monat==4||rtc.Monat==6||rtc.Monat==9||rtc.Monat==11){
				if(rtc.Tag>=31){
					rtc.Tag=0;
					rtc.Monat=0;
					pos=3;
    3660:	0f 2e       	mov	r0, r31
    3662:	f3 e0       	ldi	r31, 0x03	; 3
    3664:	9f 2e       	mov	r9, r31
    3666:	f0 2d       	mov	r31, r0
    3668:	f9 c0       	rjmp	.+498    	; 0x385c <_Z13uhreinstellenv+0x6fe>
					for(uint8_t i = 0; i<buffersize;i++){
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
			}
			else if(rtc.Monat==2){
    366a:	92 30       	cpi	r25, 0x02	; 2
    366c:	09 f0       	breq	.+2      	; 0x3670 <_Z13uhreinstellenv+0x512>
    366e:	b9 c0       	rjmp	.+370    	; 0x37e2 <_Z13uhreinstellenv+0x684>
				if(rtc.Tag>=30){
    3670:	f6 01       	movw	r30, r12
    3672:	84 89       	ldd	r24, Z+20	; 0x14
    3674:	8e 31       	cpi	r24, 0x1E	; 30
    3676:	08 f4       	brcc	.+2      	; 0x367a <_Z13uhreinstellenv+0x51c>
    3678:	b4 c0       	rjmp	.+360    	; 0x37e2 <_Z13uhreinstellenv+0x684>
					rtc.Tag=0;
    367a:	14 8a       	std	Z+20, r1	; 0x14
					rtc.Monat=0;
    367c:	16 8a       	std	Z+22, r1	; 0x16
					pos=3;
					buffersize=sprintf(buffer,"Tag falsch");
    367e:	8b e0       	ldi	r24, 0x0B	; 11
    3680:	ec e0       	ldi	r30, 0x0C	; 12
    3682:	f2 e0       	ldi	r31, 0x02	; 2
    3684:	d2 01       	movw	r26, r4
    3686:	01 90       	ld	r0, Z+
    3688:	0d 92       	st	X+, r0
    368a:	8a 95       	dec	r24
    368c:	e1 f7       	brne	.-8      	; 0x3686 <_Z13uhreinstellenv+0x528>
    368e:	1f 2d       	mov	r17, r15
					for(uint8_t i = 0; i<buffersize;i++){
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
    3690:	f5 01       	movw	r30, r10
    3692:	61 91       	ld	r22, Z+
    3694:	5f 01       	movw	r10, r30
    3696:	28 e3       	ldi	r18, 0x38	; 56
    3698:	41 2f       	mov	r20, r17
    369a:	89 e3       	ldi	r24, 0x39	; 57
    369c:	94 e0       	ldi	r25, 0x04	; 4
    369e:	0e 94 51 04 	call	0x8a2	; 0x8a2 <_ZN7Display9draw_ASCIEhhh>
    36a2:	1a 5f       	subi	r17, 0xFA	; 250
				if(rtc.Tag>=30){
					rtc.Tag=0;
					rtc.Monat=0;
					pos=3;
					buffersize=sprintf(buffer,"Tag falsch");
					for(uint8_t i = 0; i<buffersize;i++){
    36a4:	1c 33       	cpi	r17, 0x3C	; 60
    36a6:	a1 f7       	brne	.-24     	; 0x3690 <_Z13uhreinstellenv+0x532>
			}
			else if(rtc.Monat==2){
				if(rtc.Tag>=30){
					rtc.Tag=0;
					rtc.Monat=0;
					pos=3;
    36a8:	0f 2e       	mov	r0, r31
    36aa:	f3 e0       	ldi	r31, 0x03	; 3
    36ac:	9f 2e       	mov	r9, r31
    36ae:	f0 2d       	mov	r31, r0
    36b0:	d5 c0       	rjmp	.+426    	; 0x385c <_Z13uhreinstellenv+0x6fe>
					}
				}
			}
			break;
			case 8:
			rtc.Jahr=Tastatur.ZahlenausTastatur()*10;
    36b2:	8d e2       	ldi	r24, 0x2D	; 45
    36b4:	94 e0       	ldi	r25, 0x04	; 4
    36b6:	0e 94 b6 08 	call	0x116c	; 0x116c <_ZN9Interface17ZahlenausTastaturEv>
    36ba:	88 0f       	add	r24, r24
    36bc:	98 2f       	mov	r25, r24
    36be:	99 0f       	add	r25, r25
    36c0:	99 0f       	add	r25, r25
    36c2:	89 0f       	add	r24, r25
			if(rtc.Jahr>=50){
    36c4:	82 33       	cpi	r24, 0x32	; 50
    36c6:	18 f4       	brcc	.+6      	; 0x36ce <_Z13uhreinstellenv+0x570>
					}
				}
			}
			break;
			case 8:
			rtc.Jahr=Tastatur.ZahlenausTastatur()*10;
    36c8:	f6 01       	movw	r30, r12
    36ca:	87 8b       	std	Z+23, r24	; 0x17
    36cc:	c7 c0       	rjmp	.+398    	; 0x385c <_Z13uhreinstellenv+0x6fe>
			if(rtc.Jahr>=50){
				rtc.Jahr=0;
    36ce:	f6 01       	movw	r30, r12
    36d0:	17 8a       	std	Z+23, r1	; 0x17
				pos=7;
				buffersize=sprintf(buffer,"Jahr falsch");
    36d2:	8c e0       	ldi	r24, 0x0C	; 12
    36d4:	e4 e2       	ldi	r30, 0x24	; 36
    36d6:	f2 e0       	ldi	r31, 0x02	; 2
    36d8:	d2 01       	movw	r26, r4
    36da:	01 90       	ld	r0, Z+
    36dc:	0d 92       	st	X+, r0
    36de:	8a 95       	dec	r24
    36e0:	e1 f7       	brne	.-8      	; 0x36da <_Z13uhreinstellenv+0x57c>
    36e2:	1f 2d       	mov	r17, r15
				for(uint8_t i = 0; i<buffersize;i++){
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
    36e4:	f5 01       	movw	r30, r10
    36e6:	61 91       	ld	r22, Z+
    36e8:	5f 01       	movw	r10, r30
    36ea:	28 e3       	ldi	r18, 0x38	; 56
    36ec:	41 2f       	mov	r20, r17
    36ee:	89 e3       	ldi	r24, 0x39	; 57
    36f0:	94 e0       	ldi	r25, 0x04	; 4
    36f2:	0e 94 51 04 	call	0x8a2	; 0x8a2 <_ZN7Display9draw_ASCIEhhh>
    36f6:	1a 5f       	subi	r17, 0xFA	; 250
			rtc.Jahr=Tastatur.ZahlenausTastatur()*10;
			if(rtc.Jahr>=50){
				rtc.Jahr=0;
				pos=7;
				buffersize=sprintf(buffer,"Jahr falsch");
				for(uint8_t i = 0; i<buffersize;i++){
    36f8:	12 34       	cpi	r17, 0x42	; 66
    36fa:	a1 f7       	brne	.-24     	; 0x36e4 <_Z13uhreinstellenv+0x586>
			break;
			case 8:
			rtc.Jahr=Tastatur.ZahlenausTastatur()*10;
			if(rtc.Jahr>=50){
				rtc.Jahr=0;
				pos=7;
    36fc:	0f 2e       	mov	r0, r31
    36fe:	f7 e0       	ldi	r31, 0x07	; 7
    3700:	9f 2e       	mov	r9, r31
    3702:	f0 2d       	mov	r31, r0
    3704:	ab c0       	rjmp	.+342    	; 0x385c <_Z13uhreinstellenv+0x6fe>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 9:
			rtc.Jahr+=Tastatur.ZahlenausTastatur();
    3706:	8d e2       	ldi	r24, 0x2D	; 45
    3708:	94 e0       	ldi	r25, 0x04	; 4
    370a:	0e 94 b6 08 	call	0x116c	; 0x116c <_ZN9Interface17ZahlenausTastaturEv>
    370e:	f6 01       	movw	r30, r12
    3710:	27 89       	ldd	r18, Z+23	; 0x17
    3712:	90 e0       	ldi	r25, 0x00	; 0
    3714:	82 0f       	add	r24, r18
    3716:	91 1d       	adc	r25, r1
			if(rtc.Jahr>=50){
    3718:	82 33       	cpi	r24, 0x32	; 50
    371a:	08 f4       	brcc	.+2      	; 0x371e <_Z13uhreinstellenv+0x5c0>
    371c:	96 c0       	rjmp	.+300    	; 0x384a <_Z13uhreinstellenv+0x6ec>
				rtc.Jahr=0;
    371e:	17 8a       	std	Z+23, r1	; 0x17
				pos=7;
				buffersize=sprintf(buffer,"Jahr falsch");
    3720:	8c e0       	ldi	r24, 0x0C	; 12
    3722:	e4 e2       	ldi	r30, 0x24	; 36
    3724:	f2 e0       	ldi	r31, 0x02	; 2
    3726:	d2 01       	movw	r26, r4
    3728:	01 90       	ld	r0, Z+
    372a:	0d 92       	st	X+, r0
    372c:	8a 95       	dec	r24
    372e:	e1 f7       	brne	.-8      	; 0x3728 <_Z13uhreinstellenv+0x5ca>
    3730:	2d 88       	ldd	r2, Y+21	; 0x15
    3732:	3e 88       	ldd	r3, Y+22	; 0x16
    3734:	1f 2d       	mov	r17, r15
				for(uint8_t i = 0; i<buffersize;i++){
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
    3736:	f1 01       	movw	r30, r2
    3738:	61 91       	ld	r22, Z+
    373a:	1f 01       	movw	r2, r30
    373c:	28 e3       	ldi	r18, 0x38	; 56
    373e:	41 2f       	mov	r20, r17
    3740:	89 e3       	ldi	r24, 0x39	; 57
    3742:	94 e0       	ldi	r25, 0x04	; 4
    3744:	0e 94 51 04 	call	0x8a2	; 0x8a2 <_ZN7Display9draw_ASCIEhhh>
    3748:	1a 5f       	subi	r17, 0xFA	; 250
			rtc.Jahr+=Tastatur.ZahlenausTastatur();
			if(rtc.Jahr>=50){
				rtc.Jahr=0;
				pos=7;
				buffersize=sprintf(buffer,"Jahr falsch");
				for(uint8_t i = 0; i<buffersize;i++){
    374a:	12 34       	cpi	r17, 0x42	; 66
    374c:	a1 f7       	brne	.-24     	; 0x3736 <_Z13uhreinstellenv+0x5d8>
			break;
			case 9:
			rtc.Jahr+=Tastatur.ZahlenausTastatur();
			if(rtc.Jahr>=50){
				rtc.Jahr=0;
				pos=7;
    374e:	0f 2e       	mov	r0, r31
    3750:	f7 e0       	ldi	r31, 0x07	; 7
    3752:	9f 2e       	mov	r9, r31
    3754:	f0 2d       	mov	r31, r0
    3756:	7b c0       	rjmp	.+246    	; 0x384e <_Z13uhreinstellenv+0x6f0>
				for(uint8_t i = 0; i<buffersize;i++){
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			if(rtc.Monat==2){
				if(rtc.Jahr%4==0){
    3758:	f6 01       	movw	r30, r12
    375a:	17 89       	ldd	r17, Z+23	; 0x17
    375c:	13 70       	andi	r17, 0x03	; 3
    375e:	f9 f4       	brne	.+62     	; 0x379e <_Z13uhreinstellenv+0x640>
					if (rtc.Tag>=30)
    3760:	84 89       	ldd	r24, Z+20	; 0x14
    3762:	8e 31       	cpi	r24, 0x1E	; 30
    3764:	f0 f1       	brcs	.+124    	; 0x37e2 <_Z13uhreinstellenv+0x684>
					{
						rtc.Tag=0;
    3766:	14 8a       	std	Z+20, r1	; 0x14
						rtc.Monat=0;
    3768:	16 8a       	std	Z+22, r1	; 0x16
						rtc.Jahr=0;
    376a:	17 8a       	std	Z+23, r1	; 0x17
						pos=3;
						buffersize=sprintf(buffer,"Tag falsch");
    376c:	8b e0       	ldi	r24, 0x0B	; 11
    376e:	ec e0       	ldi	r30, 0x0C	; 12
    3770:	f2 e0       	ldi	r31, 0x02	; 2
    3772:	d2 01       	movw	r26, r4
    3774:	01 90       	ld	r0, Z+
    3776:	0d 92       	st	X+, r0
    3778:	8a 95       	dec	r24
    377a:	e1 f7       	brne	.-8      	; 0x3774 <_Z13uhreinstellenv+0x616>
						for(uint8_t i = 0; i<buffersize;i++){
							oled.draw_ASCI(buffer[i],charsize*i,7*8);
    377c:	f5 01       	movw	r30, r10
    377e:	61 91       	ld	r22, Z+
    3780:	5f 01       	movw	r10, r30
    3782:	28 e3       	ldi	r18, 0x38	; 56
    3784:	41 2f       	mov	r20, r17
    3786:	89 e3       	ldi	r24, 0x39	; 57
    3788:	94 e0       	ldi	r25, 0x04	; 4
    378a:	0e 94 51 04 	call	0x8a2	; 0x8a2 <_ZN7Display9draw_ASCIEhhh>
    378e:	1a 5f       	subi	r17, 0xFA	; 250
						rtc.Tag=0;
						rtc.Monat=0;
						rtc.Jahr=0;
						pos=3;
						buffersize=sprintf(buffer,"Tag falsch");
						for(uint8_t i = 0; i<buffersize;i++){
    3790:	1c 33       	cpi	r17, 0x3C	; 60
    3792:	a1 f7       	brne	.-24     	; 0x377c <_Z13uhreinstellenv+0x61e>
					if (rtc.Tag>=30)
					{
						rtc.Tag=0;
						rtc.Monat=0;
						rtc.Jahr=0;
						pos=3;
    3794:	0f 2e       	mov	r0, r31
    3796:	f3 e0       	ldi	r31, 0x03	; 3
    3798:	9f 2e       	mov	r9, r31
    379a:	f0 2d       	mov	r31, r0
    379c:	5f c0       	rjmp	.+190    	; 0x385c <_Z13uhreinstellenv+0x6fe>
							oled.draw_ASCI(buffer[i],charsize*i,7*8);
						}
					}
				}
				else{
					if(rtc.Tag>=29){
    379e:	f6 01       	movw	r30, r12
    37a0:	84 89       	ldd	r24, Z+20	; 0x14
    37a2:	8d 31       	cpi	r24, 0x1D	; 29
    37a4:	f0 f0       	brcs	.+60     	; 0x37e2 <_Z13uhreinstellenv+0x684>
						rtc.Tag=0;
    37a6:	14 8a       	std	Z+20, r1	; 0x14
						rtc.Monat=0;
    37a8:	16 8a       	std	Z+22, r1	; 0x16
						rtc.Jahr=0;
    37aa:	17 8a       	std	Z+23, r1	; 0x17
						pos=3;
						buffersize=sprintf(buffer,"Tag falsch");
    37ac:	8b e0       	ldi	r24, 0x0B	; 11
    37ae:	ec e0       	ldi	r30, 0x0C	; 12
    37b0:	f2 e0       	ldi	r31, 0x02	; 2
    37b2:	d2 01       	movw	r26, r4
    37b4:	01 90       	ld	r0, Z+
    37b6:	0d 92       	st	X+, r0
    37b8:	8a 95       	dec	r24
    37ba:	e1 f7       	brne	.-8      	; 0x37b4 <_Z13uhreinstellenv+0x656>
    37bc:	1f 2d       	mov	r17, r15
						for(uint8_t i = 0; i<buffersize;i++){
							oled.draw_ASCI(buffer[i],charsize*i,7*8);
    37be:	f5 01       	movw	r30, r10
    37c0:	61 91       	ld	r22, Z+
    37c2:	5f 01       	movw	r10, r30
    37c4:	28 e3       	ldi	r18, 0x38	; 56
    37c6:	41 2f       	mov	r20, r17
    37c8:	89 e3       	ldi	r24, 0x39	; 57
    37ca:	94 e0       	ldi	r25, 0x04	; 4
    37cc:	0e 94 51 04 	call	0x8a2	; 0x8a2 <_ZN7Display9draw_ASCIEhhh>
    37d0:	1a 5f       	subi	r17, 0xFA	; 250
						rtc.Tag=0;
						rtc.Monat=0;
						rtc.Jahr=0;
						pos=3;
						buffersize=sprintf(buffer,"Tag falsch");
						for(uint8_t i = 0; i<buffersize;i++){
    37d2:	1c 33       	cpi	r17, 0x3C	; 60
    37d4:	a1 f7       	brne	.-24     	; 0x37be <_Z13uhreinstellenv+0x660>
				else{
					if(rtc.Tag>=29){
						rtc.Tag=0;
						rtc.Monat=0;
						rtc.Jahr=0;
						pos=3;
    37d6:	0f 2e       	mov	r0, r31
    37d8:	f3 e0       	ldi	r31, 0x03	; 3
    37da:	9f 2e       	mov	r9, r31
    37dc:	f0 2d       	mov	r31, r0
    37de:	3e c0       	rjmp	.+124    	; 0x385c <_Z13uhreinstellenv+0x6fe>
					}
				}
			}
			break;
			default:
			pos++;
    37e0:	93 94       	inc	r9
			break;
		}
		pos++;
    37e2:	93 94       	inc	r9
	
	oled.clearFrame();
	char buffer[20];
	uint8_t buffersize;
	uint8_t pos=0;
	while(pos<11){
    37e4:	fa e0       	ldi	r31, 0x0A	; 10
    37e6:	f9 15       	cp	r31, r9
    37e8:	08 f0       	brcs	.+2      	; 0x37ec <_Z13uhreinstellenv+0x68e>
    37ea:	f6 cc       	rjmp	.-1556   	; 0x31d8 <_Z13uhreinstellenv+0x7a>
			break;
		}
		pos++;
	}
	
	rtc.Sekunden		= 0;
    37ec:	0a e3       	ldi	r16, 0x3A	; 58
    37ee:	18 e0       	ldi	r17, 0x08	; 8
    37f0:	f8 01       	movw	r30, r16
    37f2:	12 8a       	std	Z+18, r1	; 0x12
	rtc.HundSekunden	= 0;
    37f4:	13 8a       	std	Z+19, r1	; 0x13
	//speichern der neuen Zeit im EEPROM
	EEPROM_Write(EEMINUTEN,rtc.Minuten);
    37f6:	61 89       	ldd	r22, Z+17	; 0x11
    37f8:	80 e0       	ldi	r24, 0x00	; 0
    37fa:	90 e0       	ldi	r25, 0x00	; 0
    37fc:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <_Z12EEPROM_Writejh>
	EEPROM_Write(EESTUNDEN,rtc.Stunden);
    3800:	f8 01       	movw	r30, r16
    3802:	60 89       	ldd	r22, Z+16	; 0x10
    3804:	81 e0       	ldi	r24, 0x01	; 1
    3806:	90 e0       	ldi	r25, 0x00	; 0
    3808:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <_Z12EEPROM_Writejh>
	EEPROM_Write(EETAGE,rtc.Tag);
    380c:	f8 01       	movw	r30, r16
    380e:	64 89       	ldd	r22, Z+20	; 0x14
    3810:	82 e0       	ldi	r24, 0x02	; 2
    3812:	90 e0       	ldi	r25, 0x00	; 0
    3814:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <_Z12EEPROM_Writejh>
	EEPROM_Write(EEMONAT,rtc.Monat);
    3818:	f8 01       	movw	r30, r16
    381a:	66 89       	ldd	r22, Z+22	; 0x16
    381c:	83 e0       	ldi	r24, 0x03	; 3
    381e:	90 e0       	ldi	r25, 0x00	; 0
    3820:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <_Z12EEPROM_Writejh>
	EEPROM_Write(EEJAHR,rtc.Jahr);
    3824:	f8 01       	movw	r30, r16
    3826:	67 89       	ldd	r22, Z+23	; 0x17
    3828:	84 e0       	ldi	r24, 0x04	; 4
    382a:	90 e0       	ldi	r25, 0x00	; 0
    382c:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <_Z12EEPROM_Writejh>
	
	oled.clearFrame();
    3830:	89 e3       	ldi	r24, 0x39	; 57
    3832:	94 e0       	ldi	r25, 0x04	; 4
    3834:	0e 94 39 03 	call	0x672	; 0x672 <_ZN7Display10clearFrameEv>
	rtc.ausgabedatumneu();
    3838:	c8 01       	movw	r24, r16
    383a:	2d d3       	rcall	.+1626   	; 0x3e96 <_ZN3RTC15ausgabedatumneuEv>
	rtc.ausgabezeitneu();
    383c:	c8 01       	movw	r24, r16
    383e:	f2 d2       	rcall	.+1508   	; 0x3e24 <_ZN3RTC14ausgabezeitneuEv>
	rtc.RTCstart();
    3840:	c8 01       	movw	r24, r16
    3842:	0a d4       	rcall	.+2068   	; 0x4058 <_ZN3RTC8RTCstartEv>
    3844:	0d c0       	rjmp	.+26     	; 0x3860 <_Z13uhreinstellenv+0x702>
			break;
			default:
			pos++;
			break;
		}
		pos++;
    3846:	93 94       	inc	r9
    3848:	c7 cc       	rjmp	.-1650   	; 0x31d8 <_Z13uhreinstellenv+0x7a>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 9:
			rtc.Jahr+=Tastatur.ZahlenausTastatur();
    384a:	f6 01       	movw	r30, r12
    384c:	87 8b       	std	Z+23, r24	; 0x17
				buffersize=sprintf(buffer,"Jahr falsch");
				for(uint8_t i = 0; i<buffersize;i++){
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			if(rtc.Monat==2){
    384e:	f6 01       	movw	r30, r12
    3850:	86 89       	ldd	r24, Z+22	; 0x16
    3852:	82 30       	cpi	r24, 0x02	; 2
    3854:	c1 f7       	brne	.-16     	; 0x3846 <_Z13uhreinstellenv+0x6e8>
    3856:	80 cf       	rjmp	.-256    	; 0x3758 <_Z13uhreinstellenv+0x5fa>

		oled.sendFrame();
		oled.clearFrame();
		switch (pos) {
			case 0:
			rtc.Stunden=Tastatur.ZahlenausTastatur()*10;
    3858:	f6 01       	movw	r30, r12
    385a:	80 8b       	std	Z+16, r24	; 0x10
			break;
			default:
			pos++;
			break;
		}
		pos++;
    385c:	93 94       	inc	r9
    385e:	bc cc       	rjmp	.-1672   	; 0x31d8 <_Z13uhreinstellenv+0x7a>
	
	oled.clearFrame();
	rtc.ausgabedatumneu();
	rtc.ausgabezeitneu();
	rtc.RTCstart();
}
    3860:	66 96       	adiw	r28, 0x16	; 22
    3862:	0f b6       	in	r0, 0x3f	; 63
    3864:	f8 94       	cli
    3866:	de bf       	out	0x3e, r29	; 62
    3868:	0f be       	out	0x3f, r0	; 63
    386a:	cd bf       	out	0x3d, r28	; 61
    386c:	df 91       	pop	r29
    386e:	cf 91       	pop	r28
    3870:	1f 91       	pop	r17
    3872:	0f 91       	pop	r16
    3874:	ff 90       	pop	r15
    3876:	ef 90       	pop	r14
    3878:	df 90       	pop	r13
    387a:	cf 90       	pop	r12
    387c:	bf 90       	pop	r11
    387e:	af 90       	pop	r10
    3880:	9f 90       	pop	r9
    3882:	8f 90       	pop	r8
    3884:	7f 90       	pop	r7
    3886:	6f 90       	pop	r6
    3888:	5f 90       	pop	r5
    388a:	4f 90       	pop	r4
    388c:	3f 90       	pop	r3
    388e:	2f 90       	pop	r2
    3890:	08 95       	ret

00003892 <_ZN13einstellungen4drawEv>:
	uint8_t tastendruck(uint8_t *tast){
		return 0;
	}
	
	//anzeige erstellen
	void draw(){
    3892:	cf 92       	push	r12
    3894:	df 92       	push	r13
    3896:	ef 92       	push	r14
    3898:	ff 92       	push	r15
    389a:	0f 93       	push	r16
    389c:	1f 93       	push	r17
    389e:	cf 93       	push	r28
    38a0:	df 93       	push	r29
    38a2:	ec 01       	movw	r28, r24
		return 0;
	}
	
	//drawfunktion
	virtual void draw(){
		oled->clearFrame();
    38a4:	8f 89       	ldd	r24, Y+23	; 0x17
    38a6:	98 8d       	ldd	r25, Y+24	; 0x18
    38a8:	0e 94 39 03 	call	0x672	; 0x672 <_ZN7Display10clearFrameEv>
    38ac:	10 e0       	ldi	r17, 0x00	; 0
    38ae:	e1 2c       	mov	r14, r1
    38b0:	f1 2c       	mov	r15, r1
	}
	
	//draw header and overload it
	void header(){
		for(uint8_t i=0;i<8;i++){
			oled->draw_ASCI(rtc->msg_uhr[i],i*charsize,0);
    38b2:	e9 8d       	ldd	r30, Y+25	; 0x19
    38b4:	fa 8d       	ldd	r31, Y+26	; 0x1a
    38b6:	ee 0d       	add	r30, r14
    38b8:	ff 1d       	adc	r31, r15
    38ba:	20 e0       	ldi	r18, 0x00	; 0
    38bc:	41 2f       	mov	r20, r17
    38be:	60 81       	ld	r22, Z
    38c0:	8f 89       	ldd	r24, Y+23	; 0x17
    38c2:	98 8d       	ldd	r25, Y+24	; 0x18
    38c4:	0e 94 51 04 	call	0x8a2	; 0x8a2 <_ZN7Display9draw_ASCIEhhh>
    38c8:	2f ef       	ldi	r18, 0xFF	; 255
    38ca:	e2 1a       	sub	r14, r18
    38cc:	f2 0a       	sbc	r15, r18
    38ce:	1a 5f       	subi	r17, 0xFA	; 250
		return &name[0];
	}
	
	//draw header and overload it
	void header(){
		for(uint8_t i=0;i<8;i++){
    38d0:	10 33       	cpi	r17, 0x30	; 48
    38d2:	79 f7       	brne	.-34     	; 0x38b2 <_ZN13einstellungen4drawEv+0x20>
			oled->draw_ASCI(rtc->msg_uhr[i],i*charsize,0);
		}
		buffersize=sprintf(buffer,"Bat: %i%%",Batteriestatus());
    38d4:	0e 94 df 09 	call	0x13be	; 0x13be <_Z14Batteriestatusv>
    38d8:	7e 01       	movw	r14, r28
    38da:	32 e0       	ldi	r19, 0x02	; 2
    38dc:	e3 0e       	add	r14, r19
    38de:	f1 1c       	adc	r15, r1
    38e0:	28 2f       	mov	r18, r24
    38e2:	08 2e       	mov	r0, r24
    38e4:	00 0c       	add	r0, r0
    38e6:	33 0b       	sbc	r19, r19
    38e8:	3f 93       	push	r19
    38ea:	8f 93       	push	r24
    38ec:	82 e3       	ldi	r24, 0x32	; 50
    38ee:	91 e0       	ldi	r25, 0x01	; 1
    38f0:	9f 93       	push	r25
    38f2:	8f 93       	push	r24
    38f4:	ff 92       	push	r15
    38f6:	ef 92       	push	r14
    38f8:	0e 94 62 2a 	call	0x54c4	; 0x54c4 <sprintf>
    38fc:	8e 8b       	std	Y+22, r24	; 0x16
		for(uint8_t i=((SSD1306_WIDTH/charsize)-buffersize);i<(SSD1306_WIDTH/charsize);i++){
    38fe:	15 e1       	ldi	r17, 0x15	; 21
    3900:	18 1b       	sub	r17, r24
    3902:	0f 90       	pop	r0
    3904:	0f 90       	pop	r0
    3906:	0f 90       	pop	r0
    3908:	0f 90       	pop	r0
    390a:	0f 90       	pop	r0
    390c:	0f 90       	pop	r0
    390e:	15 31       	cpi	r17, 0x15	; 21
    3910:	08 f0       	brcs	.+2      	; 0x3914 <_ZN13einstellungen4drawEv+0x82>
    3912:	2f c1       	rjmp	.+606    	; 0x3b72 <_ZN13einstellungen4drawEv+0x2e0>
    3914:	01 2f       	mov	r16, r17
    3916:	00 0f       	add	r16, r16
    3918:	01 0f       	add	r16, r17
    391a:	00 0f       	add	r16, r16
			oled->draw_ASCI(buffer[i-((SSD1306_WIDTH/charsize)-buffersize)],i*charsize,0);
    391c:	8e 89       	ldd	r24, Y+22	; 0x16
    391e:	fe 01       	movw	r30, r28
    3920:	e1 0f       	add	r30, r17
    3922:	f1 1d       	adc	r31, r1
    3924:	e8 0f       	add	r30, r24
    3926:	f1 1d       	adc	r31, r1
    3928:	73 97       	sbiw	r30, 0x13	; 19
    392a:	20 e0       	ldi	r18, 0x00	; 0
    392c:	40 2f       	mov	r20, r16
    392e:	60 81       	ld	r22, Z
    3930:	8f 89       	ldd	r24, Y+23	; 0x17
    3932:	98 8d       	ldd	r25, Y+24	; 0x18
    3934:	0e 94 51 04 	call	0x8a2	; 0x8a2 <_ZN7Display9draw_ASCIEhhh>
	void header(){
		for(uint8_t i=0;i<8;i++){
			oled->draw_ASCI(rtc->msg_uhr[i],i*charsize,0);
		}
		buffersize=sprintf(buffer,"Bat: %i%%",Batteriestatus());
		for(uint8_t i=((SSD1306_WIDTH/charsize)-buffersize);i<(SSD1306_WIDTH/charsize);i++){
    3938:	1f 5f       	subi	r17, 0xFF	; 255
    393a:	0a 5f       	subi	r16, 0xFA	; 250
    393c:	15 31       	cpi	r17, 0x15	; 21
    393e:	71 f7       	brne	.-36     	; 0x391c <_ZN13einstellungen4drawEv+0x8a>
    3940:	18 c1       	rjmp	.+560    	; 0x3b72 <_ZN13einstellungen4drawEv+0x2e0>
	}
	
	//draw bottom and overload it
	void bottom(){
		for(uint8_t i=0;i<8;i++){
			oled->draw_ASCI(rtc->msg_dat[i],i*charsize+(SSD1306_WIDTH-bitsderrtc*charsize),7*charhighte);
    3942:	e9 8d       	ldd	r30, Y+25	; 0x19
    3944:	fa 8d       	ldd	r31, Y+26	; 0x1a
    3946:	ec 0d       	add	r30, r12
    3948:	fd 1d       	adc	r31, r13
    394a:	28 e3       	ldi	r18, 0x38	; 56
    394c:	41 2f       	mov	r20, r17
    394e:	60 85       	ldd	r22, Z+8	; 0x08
    3950:	8f 89       	ldd	r24, Y+23	; 0x17
    3952:	98 8d       	ldd	r25, Y+24	; 0x18
    3954:	0e 94 51 04 	call	0x8a2	; 0x8a2 <_ZN7Display9draw_ASCIEhhh>
    3958:	8f ef       	ldi	r24, 0xFF	; 255
    395a:	c8 1a       	sub	r12, r24
    395c:	d8 0a       	sbc	r13, r24
    395e:	1a 5f       	subi	r17, 0xFA	; 250
		}
	}
	
	//draw bottom and overload it
	void bottom(){
		for(uint8_t i=0;i<8;i++){
    3960:	10 38       	cpi	r17, 0x80	; 128
    3962:	79 f7       	brne	.-34     	; 0x3942 <_ZN13einstellungen4drawEv+0xb0>
	//anzeige erstellen
	void draw(){
		monitor::draw();
		header();
		bottom();
		if (posx==0)
    3964:	8e a1       	ldd	r24, Y+38	; 0x26
    3966:	81 11       	cpse	r24, r1
    3968:	5d c0       	rjmp	.+186    	; 0x3a24 <_ZN13einstellungen4drawEv+0x192>
		{
			buffersize=sprintf(buffer,"Zeit einstellen");
    396a:	80 e1       	ldi	r24, 0x10	; 16
    396c:	e0 e3       	ldi	r30, 0x30	; 48
    396e:	f2 e0       	ldi	r31, 0x02	; 2
    3970:	d7 01       	movw	r26, r14
    3972:	01 90       	ld	r0, Z+
    3974:	0d 92       	st	X+, r0
    3976:	8a 95       	dec	r24
    3978:	e1 f7       	brne	.-8      	; 0x3972 <_ZN13einstellungen4drawEv+0xe0>
    397a:	8f e0       	ldi	r24, 0x0F	; 15
    397c:	8e 8b       	std	Y+22, r24	; 0x16
    397e:	0c e0       	ldi	r16, 0x0C	; 12
    3980:	10 e0       	ldi	r17, 0x00	; 0
			for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+2*charsize,2*charhighte);}
    3982:	fe 01       	movw	r30, r28
    3984:	e1 0f       	add	r30, r17
    3986:	f1 1d       	adc	r31, r1
    3988:	20 e1       	ldi	r18, 0x10	; 16
    398a:	40 2f       	mov	r20, r16
    398c:	62 81       	ldd	r22, Z+2	; 0x02
    398e:	8f 89       	ldd	r24, Y+23	; 0x17
    3990:	98 8d       	ldd	r25, Y+24	; 0x18
    3992:	0e 94 51 04 	call	0x8a2	; 0x8a2 <_ZN7Display9draw_ASCIEhhh>
    3996:	1f 5f       	subi	r17, 0xFF	; 255
    3998:	0a 5f       	subi	r16, 0xFA	; 250
    399a:	8e 89       	ldd	r24, Y+22	; 0x16
    399c:	18 17       	cp	r17, r24
    399e:	88 f3       	brcs	.-30     	; 0x3982 <_ZN13einstellungen4drawEv+0xf0>
			buffersize=sprintf(buffer,"g bestimmen");
    39a0:	8c e0       	ldi	r24, 0x0C	; 12
    39a2:	e0 e4       	ldi	r30, 0x40	; 64
    39a4:	f2 e0       	ldi	r31, 0x02	; 2
    39a6:	d7 01       	movw	r26, r14
    39a8:	01 90       	ld	r0, Z+
    39aa:	0d 92       	st	X+, r0
    39ac:	8a 95       	dec	r24
    39ae:	e1 f7       	brne	.-8      	; 0x39a8 <_ZN13einstellungen4drawEv+0x116>
    39b0:	8b e0       	ldi	r24, 0x0B	; 11
    39b2:	8e 8b       	std	Y+22, r24	; 0x16
    39b4:	0c e0       	ldi	r16, 0x0C	; 12
    39b6:	10 e0       	ldi	r17, 0x00	; 0
			for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+2*charsize,3*charhighte);}
    39b8:	fe 01       	movw	r30, r28
    39ba:	e1 0f       	add	r30, r17
    39bc:	f1 1d       	adc	r31, r1
    39be:	28 e1       	ldi	r18, 0x18	; 24
    39c0:	40 2f       	mov	r20, r16
    39c2:	62 81       	ldd	r22, Z+2	; 0x02
    39c4:	8f 89       	ldd	r24, Y+23	; 0x17
    39c6:	98 8d       	ldd	r25, Y+24	; 0x18
    39c8:	0e 94 51 04 	call	0x8a2	; 0x8a2 <_ZN7Display9draw_ASCIEhhh>
    39cc:	1f 5f       	subi	r17, 0xFF	; 255
    39ce:	0a 5f       	subi	r16, 0xFA	; 250
    39d0:	8e 89       	ldd	r24, Y+22	; 0x16
    39d2:	18 17       	cp	r17, r24
    39d4:	88 f3       	brcs	.-30     	; 0x39b8 <_ZN13einstellungen4drawEv+0x126>
			buffersize=sprintf(buffer,"Versionsnummer");
    39d6:	8f e0       	ldi	r24, 0x0F	; 15
    39d8:	ec e4       	ldi	r30, 0x4C	; 76
    39da:	f2 e0       	ldi	r31, 0x02	; 2
    39dc:	d7 01       	movw	r26, r14
    39de:	01 90       	ld	r0, Z+
    39e0:	0d 92       	st	X+, r0
    39e2:	8a 95       	dec	r24
    39e4:	e1 f7       	brne	.-8      	; 0x39de <_ZN13einstellungen4drawEv+0x14c>
    39e6:	8e e0       	ldi	r24, 0x0E	; 14
    39e8:	8e 8b       	std	Y+22, r24	; 0x16
    39ea:	0c e0       	ldi	r16, 0x0C	; 12
    39ec:	10 e0       	ldi	r17, 0x00	; 0
			for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+2*charsize,4*charhighte);}
    39ee:	fe 01       	movw	r30, r28
    39f0:	e1 0f       	add	r30, r17
    39f2:	f1 1d       	adc	r31, r1
    39f4:	20 e2       	ldi	r18, 0x20	; 32
    39f6:	40 2f       	mov	r20, r16
    39f8:	62 81       	ldd	r22, Z+2	; 0x02
    39fa:	8f 89       	ldd	r24, Y+23	; 0x17
    39fc:	98 8d       	ldd	r25, Y+24	; 0x18
    39fe:	0e 94 51 04 	call	0x8a2	; 0x8a2 <_ZN7Display9draw_ASCIEhhh>
    3a02:	1f 5f       	subi	r17, 0xFF	; 255
    3a04:	0a 5f       	subi	r16, 0xFA	; 250
    3a06:	8e 89       	ldd	r24, Y+22	; 0x16
    3a08:	18 17       	cp	r17, r24
    3a0a:	88 f3       	brcs	.-30     	; 0x39ee <_ZN13einstellungen4drawEv+0x15c>
			oled->draw_ASCI('>',0*charsize,(posy+2)*charhighte);
    3a0c:	2d a1       	ldd	r18, Y+37	; 0x25
    3a0e:	22 0f       	add	r18, r18
    3a10:	22 0f       	add	r18, r18
    3a12:	22 0f       	add	r18, r18
    3a14:	20 5f       	subi	r18, 0xF0	; 240
    3a16:	40 e0       	ldi	r20, 0x00	; 0
    3a18:	6e e3       	ldi	r22, 0x3E	; 62
    3a1a:	8f 89       	ldd	r24, Y+23	; 0x17
    3a1c:	98 8d       	ldd	r25, Y+24	; 0x18
    3a1e:	0e 94 51 04 	call	0x8a2	; 0x8a2 <_ZN7Display9draw_ASCIEhhh>
    3a22:	a2 c0       	rjmp	.+324    	; 0x3b68 <_ZN13einstellungen4drawEv+0x2d6>
		}
		else if (posy==0 && posx==1)
    3a24:	9d a1       	ldd	r25, Y+37	; 0x25
    3a26:	91 11       	cpse	r25, r1
    3a28:	06 c0       	rjmp	.+12     	; 0x3a36 <_ZN13einstellungen4drawEv+0x1a4>
    3a2a:	81 30       	cpi	r24, 0x01	; 1
    3a2c:	09 f0       	breq	.+2      	; 0x3a30 <_ZN13einstellungen4drawEv+0x19e>
    3a2e:	9c c0       	rjmp	.+312    	; 0x3b68 <_ZN13einstellungen4drawEv+0x2d6>
		{
			//Uhreinstellung machen
			//noch etwas bloed, aber mit eigener Funktion
			uhreinstellen();
    3a30:	96 db       	rcall	.-2260   	; 0x315e <_Z13uhreinstellenv>
			posx=0;
    3a32:	1e a2       	std	Y+38, r1	; 0x26
    3a34:	99 c0       	rjmp	.+306    	; 0x3b68 <_ZN13einstellungen4drawEv+0x2d6>
		}
		else if (posy==1 && posx==1)
    3a36:	91 30       	cpi	r25, 0x01	; 1
    3a38:	09 f0       	breq	.+2      	; 0x3a3c <_ZN13einstellungen4drawEv+0x1aa>
    3a3a:	60 c0       	rjmp	.+192    	; 0x3afc <_ZN13einstellungen4drawEv+0x26a>
    3a3c:	81 30       	cpi	r24, 0x01	; 1
    3a3e:	09 f0       	breq	.+2      	; 0x3a42 <_ZN13einstellungen4drawEv+0x1b0>
    3a40:	93 c0       	rjmp	.+294    	; 0x3b68 <_ZN13einstellungen4drawEv+0x2d6>
		{
			//g bestimmen einbauen
			buffersize=sprintf(buffer,"Geraet nicht bewegen");
    3a42:	85 e1       	ldi	r24, 0x15	; 21
    3a44:	eb e5       	ldi	r30, 0x5B	; 91
    3a46:	f2 e0       	ldi	r31, 0x02	; 2
    3a48:	d7 01       	movw	r26, r14
    3a4a:	01 90       	ld	r0, Z+
    3a4c:	0d 92       	st	X+, r0
    3a4e:	8a 95       	dec	r24
    3a50:	e1 f7       	brne	.-8      	; 0x3a4a <_ZN13einstellungen4drawEv+0x1b8>
    3a52:	84 e1       	ldi	r24, 0x14	; 20
    3a54:	8e 8b       	std	Y+22, r24	; 0x16
    3a56:	00 e0       	ldi	r16, 0x00	; 0
    3a58:	10 e0       	ldi	r17, 0x00	; 0
			for (uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize,2*charhighte);}
    3a5a:	fe 01       	movw	r30, r28
    3a5c:	e1 0f       	add	r30, r17
    3a5e:	f1 1d       	adc	r31, r1
    3a60:	20 e1       	ldi	r18, 0x10	; 16
    3a62:	40 2f       	mov	r20, r16
    3a64:	62 81       	ldd	r22, Z+2	; 0x02
    3a66:	8f 89       	ldd	r24, Y+23	; 0x17
    3a68:	98 8d       	ldd	r25, Y+24	; 0x18
    3a6a:	0e 94 51 04 	call	0x8a2	; 0x8a2 <_ZN7Display9draw_ASCIEhhh>
    3a6e:	1f 5f       	subi	r17, 0xFF	; 255
    3a70:	0a 5f       	subi	r16, 0xFA	; 250
    3a72:	8e 89       	ldd	r24, Y+22	; 0x16
    3a74:	18 17       	cp	r17, r24
    3a76:	88 f3       	brcs	.-30     	; 0x3a5a <_ZN13einstellungen4drawEv+0x1c8>
			buffersize=sprintf(buffer,"* fuer start");
    3a78:	8d e0       	ldi	r24, 0x0D	; 13
    3a7a:	e0 e7       	ldi	r30, 0x70	; 112
    3a7c:	f2 e0       	ldi	r31, 0x02	; 2
    3a7e:	d7 01       	movw	r26, r14
    3a80:	01 90       	ld	r0, Z+
    3a82:	0d 92       	st	X+, r0
    3a84:	8a 95       	dec	r24
    3a86:	e1 f7       	brne	.-8      	; 0x3a80 <_ZN13einstellungen4drawEv+0x1ee>
    3a88:	8c e0       	ldi	r24, 0x0C	; 12
    3a8a:	8e 8b       	std	Y+22, r24	; 0x16
    3a8c:	00 e0       	ldi	r16, 0x00	; 0
    3a8e:	10 e0       	ldi	r17, 0x00	; 0
			for (uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize,3*charhighte);}
    3a90:	fe 01       	movw	r30, r28
    3a92:	e1 0f       	add	r30, r17
    3a94:	f1 1d       	adc	r31, r1
    3a96:	28 e1       	ldi	r18, 0x18	; 24
    3a98:	40 2f       	mov	r20, r16
    3a9a:	62 81       	ldd	r22, Z+2	; 0x02
    3a9c:	8f 89       	ldd	r24, Y+23	; 0x17
    3a9e:	98 8d       	ldd	r25, Y+24	; 0x18
    3aa0:	0e 94 51 04 	call	0x8a2	; 0x8a2 <_ZN7Display9draw_ASCIEhhh>
    3aa4:	1f 5f       	subi	r17, 0xFF	; 255
    3aa6:	0a 5f       	subi	r16, 0xFA	; 250
    3aa8:	8e 89       	ldd	r24, Y+22	; 0x16
    3aaa:	18 17       	cp	r17, r24
    3aac:	88 f3       	brcs	.-30     	; 0x3a90 <_ZN13einstellungen4drawEv+0x1fe>
			if (5<6&&5>0)
			{
				buffersize=sprintf(buffer,"Noch %i Sekunden",5);
    3aae:	1f 92       	push	r1
    3ab0:	85 e0       	ldi	r24, 0x05	; 5
    3ab2:	8f 93       	push	r24
    3ab4:	8d e7       	ldi	r24, 0x7D	; 125
    3ab6:	92 e0       	ldi	r25, 0x02	; 2
    3ab8:	9f 93       	push	r25
    3aba:	8f 93       	push	r24
    3abc:	ff 92       	push	r15
    3abe:	ef 92       	push	r14
    3ac0:	0e 94 62 2a 	call	0x54c4	; 0x54c4 <sprintf>
    3ac4:	8e 8b       	std	Y+22, r24	; 0x16
				for (uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize,5*charhighte);}
    3ac6:	0f 90       	pop	r0
    3ac8:	0f 90       	pop	r0
    3aca:	0f 90       	pop	r0
    3acc:	0f 90       	pop	r0
    3ace:	0f 90       	pop	r0
    3ad0:	0f 90       	pop	r0
    3ad2:	88 23       	and	r24, r24
    3ad4:	09 f4       	brne	.+2      	; 0x3ad8 <_ZN13einstellungen4drawEv+0x246>
    3ad6:	48 c0       	rjmp	.+144    	; 0x3b68 <_ZN13einstellungen4drawEv+0x2d6>
    3ad8:	00 e0       	ldi	r16, 0x00	; 0
    3ada:	10 e0       	ldi	r17, 0x00	; 0
    3adc:	fe 01       	movw	r30, r28
    3ade:	e1 0f       	add	r30, r17
    3ae0:	f1 1d       	adc	r31, r1
    3ae2:	28 e2       	ldi	r18, 0x28	; 40
    3ae4:	40 2f       	mov	r20, r16
    3ae6:	62 81       	ldd	r22, Z+2	; 0x02
    3ae8:	8f 89       	ldd	r24, Y+23	; 0x17
    3aea:	98 8d       	ldd	r25, Y+24	; 0x18
    3aec:	0e 94 51 04 	call	0x8a2	; 0x8a2 <_ZN7Display9draw_ASCIEhhh>
    3af0:	1f 5f       	subi	r17, 0xFF	; 255
    3af2:	0a 5f       	subi	r16, 0xFA	; 250
    3af4:	8e 89       	ldd	r24, Y+22	; 0x16
    3af6:	18 17       	cp	r17, r24
    3af8:	88 f3       	brcs	.-30     	; 0x3adc <_ZN13einstellungen4drawEv+0x24a>
    3afa:	36 c0       	rjmp	.+108    	; 0x3b68 <_ZN13einstellungen4drawEv+0x2d6>
			else if (5==0)
			{
				posx--;
			}
		}
		else if (posy==2 && posx==1)
    3afc:	92 30       	cpi	r25, 0x02	; 2
    3afe:	a1 f5       	brne	.+104    	; 0x3b68 <_ZN13einstellungen4drawEv+0x2d6>
    3b00:	81 30       	cpi	r24, 0x01	; 1
    3b02:	91 f5       	brne	.+100    	; 0x3b68 <_ZN13einstellungen4drawEv+0x2d6>
		{
			buffersize=sprintf(buffer,"Version: %.2f",(double)VERSIONSNUMMER);
    3b04:	80 e4       	ldi	r24, 0x40	; 64
    3b06:	8f 93       	push	r24
    3b08:	81 e4       	ldi	r24, 0x41	; 65
    3b0a:	8f 93       	push	r24
    3b0c:	87 e4       	ldi	r24, 0x47	; 71
    3b0e:	8f 93       	push	r24
    3b10:	8e ea       	ldi	r24, 0xAE	; 174
    3b12:	8f 93       	push	r24
    3b14:	84 e2       	ldi	r24, 0x24	; 36
    3b16:	91 e0       	ldi	r25, 0x01	; 1
    3b18:	9f 93       	push	r25
    3b1a:	8f 93       	push	r24
    3b1c:	ff 92       	push	r15
    3b1e:	ef 92       	push	r14
    3b20:	0e 94 62 2a 	call	0x54c4	; 0x54c4 <sprintf>
    3b24:	8e 8b       	std	Y+22, r24	; 0x16
			for(uint8_t i=0; i < buffersize;i++){
    3b26:	2d b7       	in	r18, 0x3d	; 61
    3b28:	3e b7       	in	r19, 0x3e	; 62
    3b2a:	28 5f       	subi	r18, 0xF8	; 248
    3b2c:	3f 4f       	sbci	r19, 0xFF	; 255
    3b2e:	0f b6       	in	r0, 0x3f	; 63
    3b30:	f8 94       	cli
    3b32:	3e bf       	out	0x3e, r19	; 62
    3b34:	0f be       	out	0x3f, r0	; 63
    3b36:	2d bf       	out	0x3d, r18	; 61
    3b38:	88 23       	and	r24, r24
    3b3a:	b1 f0       	breq	.+44     	; 0x3b68 <_ZN13einstellungen4drawEv+0x2d6>
    3b3c:	10 e0       	ldi	r17, 0x00	; 0
				oled->draw_ASCI(buffer[i],(i+2)*charsize,3.5*charhighte);
    3b3e:	21 2f       	mov	r18, r17
    3b40:	30 e0       	ldi	r19, 0x00	; 0
    3b42:	c9 01       	movw	r24, r18
    3b44:	02 96       	adiw	r24, 0x02	; 2
    3b46:	48 2f       	mov	r20, r24
    3b48:	44 0f       	add	r20, r20
    3b4a:	48 0f       	add	r20, r24
    3b4c:	44 0f       	add	r20, r20
    3b4e:	fe 01       	movw	r30, r28
    3b50:	e2 0f       	add	r30, r18
    3b52:	f3 1f       	adc	r31, r19
    3b54:	2c e1       	ldi	r18, 0x1C	; 28
    3b56:	62 81       	ldd	r22, Z+2	; 0x02
    3b58:	8f 89       	ldd	r24, Y+23	; 0x17
    3b5a:	98 8d       	ldd	r25, Y+24	; 0x18
    3b5c:	0e 94 51 04 	call	0x8a2	; 0x8a2 <_ZN7Display9draw_ASCIEhhh>
			}
		}
		else if (posy==2 && posx==1)
		{
			buffersize=sprintf(buffer,"Version: %.2f",(double)VERSIONSNUMMER);
			for(uint8_t i=0; i < buffersize;i++){
    3b60:	1f 5f       	subi	r17, 0xFF	; 255
    3b62:	8e 89       	ldd	r24, Y+22	; 0x16
    3b64:	18 17       	cp	r17, r24
    3b66:	58 f3       	brcs	.-42     	; 0x3b3e <_ZN13einstellungen4drawEv+0x2ac>
		oled->clearFrame();
	}

	//send the frame to the display
	void send(){
		oled->sendFrame();	
    3b68:	8f 89       	ldd	r24, Y+23	; 0x17
    3b6a:	98 8d       	ldd	r25, Y+24	; 0x18
    3b6c:	0e 94 b3 03 	call	0x766	; 0x766 <_ZN7Display9sendFrameEv>
    3b70:	04 c0       	rjmp	.+8      	; 0x3b7a <_ZN13einstellungen4drawEv+0x2e8>
		return 0;
	}
	
	//drawfunktion
	virtual void draw(){
		oled->clearFrame();
    3b72:	10 e5       	ldi	r17, 0x50	; 80
    3b74:	c1 2c       	mov	r12, r1
    3b76:	d1 2c       	mov	r13, r1
    3b78:	e4 ce       	rjmp	.-568    	; 0x3942 <_ZN13einstellungen4drawEv+0xb0>
				oled->draw_ASCI(buffer[i],(i+2)*charsize,3.5*charhighte);

			}
		}
		send();	
	}
    3b7a:	df 91       	pop	r29
    3b7c:	cf 91       	pop	r28
    3b7e:	1f 91       	pop	r17
    3b80:	0f 91       	pop	r16
    3b82:	ff 90       	pop	r15
    3b84:	ef 90       	pop	r14
    3b86:	df 90       	pop	r13
    3b88:	cf 90       	pop	r12
    3b8a:	08 95       	ret

00003b8c <_GLOBAL__sub_I__Znwj>:
{
	free(ptr);
}

#include "RTC.h"
RTC rtc;
    3b8c:	8a e3       	ldi	r24, 0x3A	; 58
    3b8e:	98 e0       	ldi	r25, 0x08	; 8
    3b90:	bb d1       	rcall	.+886    	; 0x3f08 <_ZN3RTCC1Ev>

#include "Display.h"
Display oled;
    3b92:	89 e3       	ldi	r24, 0x39	; 57
    3b94:	94 e0       	ldi	r25, 0x04	; 4
    3b96:	0e 94 a7 03 	call	0x74e	; 0x74e <_ZN7DisplayC1Ev>

#include "Interface.h"
Interface Tastatur;
    3b9a:	8d e2       	ldi	r24, 0x2D	; 45
    3b9c:	94 e0       	ldi	r25, 0x04	; 4
    3b9e:	0e 94 ab 07 	call	0xf56	; 0xf56 <_ZN9InterfaceC1Ev>

#include "SOUND.h"
SOUND Lautsprecher;
    3ba2:	8b e2       	ldi	r24, 0x2B	; 43
    3ba4:	94 e0       	ldi	r25, 0x04	; 4
    3ba6:	a2 d2       	rcall	.+1348   	; 0x40ec <_ZN5SOUNDC1Ev>

#include "LSM303D.h"
LSM303D Accelerometer;
    3ba8:	82 e4       	ldi	r24, 0x42	; 66
    3baa:	93 e0       	ldi	r25, 0x03	; 3
    3bac:	0e 94 f5 08 	call	0x11ea	; 0x11ea <_ZN7LSM303DC1Ev>
//Kompass kompass;

#include "ADC.h"

#include "Output.h"
Output LED('B',PORTB1);
    3bb0:	41 e0       	ldi	r20, 0x01	; 1
    3bb2:	62 e4       	ldi	r22, 0x42	; 66
    3bb4:	8c e3       	ldi	r24, 0x3C	; 60
    3bb6:	93 e0       	ldi	r25, 0x03	; 3
    3bb8:	2f d0       	rcall	.+94     	; 0x3c18 <_ZN6OutputC1Ehh>
Output Vibrationsmotor('B',PORTB2);
    3bba:	42 e0       	ldi	r20, 0x02	; 2
    3bbc:	62 e4       	ldi	r22, 0x42	; 66
    3bbe:	8a e3       	ldi	r24, 0x3A	; 58
    3bc0:	93 e0       	ldi	r25, 0x03	; 3
    3bc2:	2a d0       	rcall	.+84     	; 0x3c18 <_ZN6OutputC1Ehh>
Output IRLED('D',PORTD7);
    3bc4:	47 e0       	ldi	r20, 0x07	; 7
    3bc6:	64 e4       	ldi	r22, 0x44	; 68
    3bc8:	88 e3       	ldi	r24, 0x38	; 56
    3bca:	93 e0       	ldi	r25, 0x03	; 3
    3bcc:	25 d0       	rcall	.+74     	; 0x3c18 <_ZN6OutputC1Ehh>
Output Sound('B',PORTB3);
    3bce:	43 e0       	ldi	r20, 0x03	; 3
    3bd0:	62 e4       	ldi	r22, 0x42	; 66
    3bd2:	86 e3       	ldi	r24, 0x36	; 54
    3bd4:	93 e0       	ldi	r25, 0x03	; 3
    3bd6:	20 c0       	rjmp	.+64     	; 0x3c18 <_ZN6OutputC1Ehh>
    3bd8:	08 95       	ret

00003bda <_GLOBAL__sub_D__Znwj>:
    3bda:	86 e3       	ldi	r24, 0x36	; 54
    3bdc:	93 e0       	ldi	r25, 0x03	; 3
    3bde:	56 d0       	rcall	.+172    	; 0x3c8c <_ZN6OutputD1Ev>
#include "ADC.h"

#include "Output.h"
Output LED('B',PORTB1);
Output Vibrationsmotor('B',PORTB2);
Output IRLED('D',PORTD7);
    3be0:	88 e3       	ldi	r24, 0x38	; 56
    3be2:	93 e0       	ldi	r25, 0x03	; 3
    3be4:	53 d0       	rcall	.+166    	; 0x3c8c <_ZN6OutputD1Ev>

#include "ADC.h"

#include "Output.h"
Output LED('B',PORTB1);
Output Vibrationsmotor('B',PORTB2);
    3be6:	8a e3       	ldi	r24, 0x3A	; 58
    3be8:	93 e0       	ldi	r25, 0x03	; 3
    3bea:	50 d0       	rcall	.+160    	; 0x3c8c <_ZN6OutputD1Ev>
//Kompass kompass;

#include "ADC.h"

#include "Output.h"
Output LED('B',PORTB1);
    3bec:	8c e3       	ldi	r24, 0x3C	; 60
    3bee:	93 e0       	ldi	r25, 0x03	; 3
    3bf0:	4d d0       	rcall	.+154    	; 0x3c8c <_ZN6OutputD1Ev>

#include "SOUND.h"
SOUND Lautsprecher;

#include "LSM303D.h"
LSM303D Accelerometer;
    3bf2:	82 e4       	ldi	r24, 0x42	; 66
    3bf4:	93 e0       	ldi	r25, 0x03	; 3
    3bf6:	0e 94 c1 08 	call	0x1182	; 0x1182 <_ZN7LSM303DD1Ev>

#include "Interface.h"
Interface Tastatur;

#include "SOUND.h"
SOUND Lautsprecher;
    3bfa:	8b e2       	ldi	r24, 0x2B	; 43
    3bfc:	94 e0       	ldi	r25, 0x04	; 4
    3bfe:	4c d2       	rcall	.+1176   	; 0x4098 <_ZN5SOUNDD1Ev>

#include "Display.h"
Display oled;

#include "Interface.h"
Interface Tastatur;
    3c00:	8d e2       	ldi	r24, 0x2D	; 45
    3c02:	94 e0       	ldi	r25, 0x04	; 4
    3c04:	0e 94 be 07 	call	0xf7c	; 0xf7c <_ZN9InterfaceD1Ev>

#include "RTC.h"
RTC rtc;

#include "Display.h"
Display oled;
    3c08:	89 e3       	ldi	r24, 0x39	; 57
    3c0a:	94 e0       	ldi	r25, 0x04	; 4
    3c0c:	0e 94 36 03 	call	0x66c	; 0x66c <_ZN7DisplayD1Ev>
{
	free(ptr);
}

#include "RTC.h"
RTC rtc;
    3c10:	8a e3       	ldi	r24, 0x3A	; 58
    3c12:	98 e0       	ldi	r25, 0x08	; 8
    3c14:	f5 c0       	rjmp	.+490    	; 0x3e00 <_ZN3RTCD1Ev>
    3c16:	08 95       	ret

00003c18 <_ZN6OutputC1Ehh>:
#include "Output.h"

// default constructor
Output::Output(uint8_t Portpraefix, uint8_t Pinnumber)
{
	Pin=Pinnumber;
    3c18:	fc 01       	movw	r30, r24
    3c1a:	41 83       	std	Z+1, r20	; 0x01
	Port=Portpraefix;
    3c1c:	60 83       	st	Z, r22
	switch (Portpraefix)
    3c1e:	62 34       	cpi	r22, 0x42	; 66
    3c20:	a1 f0       	breq	.+40     	; 0x3c4a <_ZN6OutputC1Ehh+0x32>
    3c22:	18 f4       	brcc	.+6      	; 0x3c2a <_ZN6OutputC1Ehh+0x12>
    3c24:	61 34       	cpi	r22, 0x41	; 65
    3c26:	31 f0       	breq	.+12     	; 0x3c34 <_ZN6OutputC1Ehh+0x1c>
    3c28:	08 95       	ret
    3c2a:	63 34       	cpi	r22, 0x43	; 67
    3c2c:	c9 f0       	breq	.+50     	; 0x3c60 <_ZN6OutputC1Ehh+0x48>
    3c2e:	64 34       	cpi	r22, 0x44	; 68
    3c30:	11 f1       	breq	.+68     	; 0x3c76 <_ZN6OutputC1Ehh+0x5e>
    3c32:	08 95       	ret
	{
		case 'A':
			DDRA |= (1<<Pin);
    3c34:	21 b1       	in	r18, 0x01	; 1
    3c36:	81 e0       	ldi	r24, 0x01	; 1
    3c38:	90 e0       	ldi	r25, 0x00	; 0
    3c3a:	02 c0       	rjmp	.+4      	; 0x3c40 <_ZN6OutputC1Ehh+0x28>
    3c3c:	88 0f       	add	r24, r24
    3c3e:	99 1f       	adc	r25, r25
    3c40:	4a 95       	dec	r20
    3c42:	e2 f7       	brpl	.-8      	; 0x3c3c <_ZN6OutputC1Ehh+0x24>
    3c44:	82 2b       	or	r24, r18
    3c46:	81 b9       	out	0x01, r24	; 1
			break;
    3c48:	08 95       	ret
		case 'B':
			DDRB |= (1<<Pin);
    3c4a:	24 b1       	in	r18, 0x04	; 4
    3c4c:	81 e0       	ldi	r24, 0x01	; 1
    3c4e:	90 e0       	ldi	r25, 0x00	; 0
    3c50:	02 c0       	rjmp	.+4      	; 0x3c56 <_ZN6OutputC1Ehh+0x3e>
    3c52:	88 0f       	add	r24, r24
    3c54:	99 1f       	adc	r25, r25
    3c56:	4a 95       	dec	r20
    3c58:	e2 f7       	brpl	.-8      	; 0x3c52 <_ZN6OutputC1Ehh+0x3a>
    3c5a:	82 2b       	or	r24, r18
    3c5c:	84 b9       	out	0x04, r24	; 4
			break;
    3c5e:	08 95       	ret
		case 'C':
			DDRC |= (1<<Pin);
    3c60:	27 b1       	in	r18, 0x07	; 7
    3c62:	81 e0       	ldi	r24, 0x01	; 1
    3c64:	90 e0       	ldi	r25, 0x00	; 0
    3c66:	02 c0       	rjmp	.+4      	; 0x3c6c <_ZN6OutputC1Ehh+0x54>
    3c68:	88 0f       	add	r24, r24
    3c6a:	99 1f       	adc	r25, r25
    3c6c:	4a 95       	dec	r20
    3c6e:	e2 f7       	brpl	.-8      	; 0x3c68 <_ZN6OutputC1Ehh+0x50>
    3c70:	82 2b       	or	r24, r18
    3c72:	87 b9       	out	0x07, r24	; 7
			break;
    3c74:	08 95       	ret
		case 'D':
			DDRD |= (1<<Pin);
    3c76:	2a b1       	in	r18, 0x0a	; 10
    3c78:	81 e0       	ldi	r24, 0x01	; 1
    3c7a:	90 e0       	ldi	r25, 0x00	; 0
    3c7c:	02 c0       	rjmp	.+4      	; 0x3c82 <_ZN6OutputC1Ehh+0x6a>
    3c7e:	88 0f       	add	r24, r24
    3c80:	99 1f       	adc	r25, r25
    3c82:	4a 95       	dec	r20
    3c84:	e2 f7       	brpl	.-8      	; 0x3c7e <_ZN6OutputC1Ehh+0x66>
    3c86:	82 2b       	or	r24, r18
    3c88:	8a b9       	out	0x0a, r24	; 10
    3c8a:	08 95       	ret

00003c8c <_ZN6OutputD1Ev>:
			break;
	}
} //Output

// default destructor
Output::~Output()
    3c8c:	08 95       	ret

00003c8e <_ZN6Output2onEv>:
{
} //~Output

void Output::on(){
    3c8e:	fc 01       	movw	r30, r24
	switch (Port)
    3c90:	90 81       	ld	r25, Z
    3c92:	92 34       	cpi	r25, 0x42	; 66
    3c94:	a9 f0       	breq	.+42     	; 0x3cc0 <_ZN6Output2onEv+0x32>
    3c96:	18 f4       	brcc	.+6      	; 0x3c9e <_ZN6Output2onEv+0x10>
    3c98:	91 34       	cpi	r25, 0x41	; 65
    3c9a:	31 f0       	breq	.+12     	; 0x3ca8 <_ZN6Output2onEv+0x1a>
    3c9c:	08 95       	ret
    3c9e:	93 34       	cpi	r25, 0x43	; 67
    3ca0:	d9 f0       	breq	.+54     	; 0x3cd8 <_ZN6Output2onEv+0x4a>
    3ca2:	94 34       	cpi	r25, 0x44	; 68
    3ca4:	29 f1       	breq	.+74     	; 0x3cf0 <_ZN6Output2onEv+0x62>
    3ca6:	08 95       	ret
	{
		case 'A':
			PORTA |= (1<<Pin);
    3ca8:	22 b1       	in	r18, 0x02	; 2
    3caa:	81 e0       	ldi	r24, 0x01	; 1
    3cac:	90 e0       	ldi	r25, 0x00	; 0
    3cae:	01 80       	ldd	r0, Z+1	; 0x01
    3cb0:	02 c0       	rjmp	.+4      	; 0x3cb6 <_ZN6Output2onEv+0x28>
    3cb2:	88 0f       	add	r24, r24
    3cb4:	99 1f       	adc	r25, r25
    3cb6:	0a 94       	dec	r0
    3cb8:	e2 f7       	brpl	.-8      	; 0x3cb2 <_ZN6Output2onEv+0x24>
    3cba:	82 2b       	or	r24, r18
    3cbc:	82 b9       	out	0x02, r24	; 2
			break;
    3cbe:	08 95       	ret
		case 'B':
			PORTB |= (1<<Pin);
    3cc0:	25 b1       	in	r18, 0x05	; 5
    3cc2:	81 e0       	ldi	r24, 0x01	; 1
    3cc4:	90 e0       	ldi	r25, 0x00	; 0
    3cc6:	01 80       	ldd	r0, Z+1	; 0x01
    3cc8:	02 c0       	rjmp	.+4      	; 0x3cce <_ZN6Output2onEv+0x40>
    3cca:	88 0f       	add	r24, r24
    3ccc:	99 1f       	adc	r25, r25
    3cce:	0a 94       	dec	r0
    3cd0:	e2 f7       	brpl	.-8      	; 0x3cca <_ZN6Output2onEv+0x3c>
    3cd2:	82 2b       	or	r24, r18
    3cd4:	85 b9       	out	0x05, r24	; 5
			break;
    3cd6:	08 95       	ret
		case 'C':
			PORTC |= (1<<Pin);
    3cd8:	28 b1       	in	r18, 0x08	; 8
    3cda:	81 e0       	ldi	r24, 0x01	; 1
    3cdc:	90 e0       	ldi	r25, 0x00	; 0
    3cde:	01 80       	ldd	r0, Z+1	; 0x01
    3ce0:	02 c0       	rjmp	.+4      	; 0x3ce6 <_ZN6Output2onEv+0x58>
    3ce2:	88 0f       	add	r24, r24
    3ce4:	99 1f       	adc	r25, r25
    3ce6:	0a 94       	dec	r0
    3ce8:	e2 f7       	brpl	.-8      	; 0x3ce2 <_ZN6Output2onEv+0x54>
    3cea:	82 2b       	or	r24, r18
    3cec:	88 b9       	out	0x08, r24	; 8
			break;
    3cee:	08 95       	ret
		case 'D':
			PORTD |= (1<<Pin);
    3cf0:	2b b1       	in	r18, 0x0b	; 11
    3cf2:	81 e0       	ldi	r24, 0x01	; 1
    3cf4:	90 e0       	ldi	r25, 0x00	; 0
    3cf6:	01 80       	ldd	r0, Z+1	; 0x01
    3cf8:	02 c0       	rjmp	.+4      	; 0x3cfe <_ZN6Output2onEv+0x70>
    3cfa:	88 0f       	add	r24, r24
    3cfc:	99 1f       	adc	r25, r25
    3cfe:	0a 94       	dec	r0
    3d00:	e2 f7       	brpl	.-8      	; 0x3cfa <_ZN6Output2onEv+0x6c>
    3d02:	82 2b       	or	r24, r18
    3d04:	8b b9       	out	0x0b, r24	; 11
    3d06:	08 95       	ret

00003d08 <_ZN6Output4isonEv>:
		default:
			break;
	}
}

uint8_t Output::ison(){
    3d08:	fc 01       	movw	r30, r24
	uint8_t returnparam=0;
	switch (Port)
    3d0a:	90 81       	ld	r25, Z
    3d0c:	92 34       	cpi	r25, 0x42	; 66
    3d0e:	a1 f0       	breq	.+40     	; 0x3d38 <_ZN6Output4isonEv+0x30>
    3d10:	18 f4       	brcc	.+6      	; 0x3d18 <_ZN6Output4isonEv+0x10>
    3d12:	91 34       	cpi	r25, 0x41	; 65
    3d14:	31 f0       	breq	.+12     	; 0x3d22 <_ZN6Output4isonEv+0x1a>
    3d16:	31 c0       	rjmp	.+98     	; 0x3d7a <_ZN6Output4isonEv+0x72>
    3d18:	93 34       	cpi	r25, 0x43	; 67
    3d1a:	c9 f0       	breq	.+50     	; 0x3d4e <_ZN6Output4isonEv+0x46>
    3d1c:	94 34       	cpi	r25, 0x44	; 68
    3d1e:	11 f1       	breq	.+68     	; 0x3d64 <_ZN6Output4isonEv+0x5c>
    3d20:	2c c0       	rjmp	.+88     	; 0x3d7a <_ZN6Output4isonEv+0x72>
	{
		case 'A':
			if ((PORTA&(1<<Pin)))
    3d22:	22 b1       	in	r18, 0x02	; 2
    3d24:	30 e0       	ldi	r19, 0x00	; 0
    3d26:	c9 01       	movw	r24, r18
    3d28:	01 80       	ldd	r0, Z+1	; 0x01
    3d2a:	02 c0       	rjmp	.+4      	; 0x3d30 <_ZN6Output4isonEv+0x28>
    3d2c:	95 95       	asr	r25
    3d2e:	87 95       	ror	r24
    3d30:	0a 94       	dec	r0
    3d32:	e2 f7       	brpl	.-8      	; 0x3d2c <_ZN6Output4isonEv+0x24>
    3d34:	81 70       	andi	r24, 0x01	; 1
    3d36:	08 95       	ret
			{
				returnparam = 1;
			}
			break;
		case 'B':
			if ((PORTB&(1<<Pin)))
    3d38:	25 b1       	in	r18, 0x05	; 5
    3d3a:	30 e0       	ldi	r19, 0x00	; 0
    3d3c:	c9 01       	movw	r24, r18
    3d3e:	01 80       	ldd	r0, Z+1	; 0x01
    3d40:	02 c0       	rjmp	.+4      	; 0x3d46 <_ZN6Output4isonEv+0x3e>
    3d42:	95 95       	asr	r25
    3d44:	87 95       	ror	r24
    3d46:	0a 94       	dec	r0
    3d48:	e2 f7       	brpl	.-8      	; 0x3d42 <_ZN6Output4isonEv+0x3a>
    3d4a:	81 70       	andi	r24, 0x01	; 1
    3d4c:	08 95       	ret
			{
				returnparam = 1;
			}
			break;
		case 'C':
			if ((PORTC&(1<<Pin)))
    3d4e:	28 b1       	in	r18, 0x08	; 8
    3d50:	30 e0       	ldi	r19, 0x00	; 0
    3d52:	c9 01       	movw	r24, r18
    3d54:	01 80       	ldd	r0, Z+1	; 0x01
    3d56:	02 c0       	rjmp	.+4      	; 0x3d5c <_ZN6Output4isonEv+0x54>
    3d58:	95 95       	asr	r25
    3d5a:	87 95       	ror	r24
    3d5c:	0a 94       	dec	r0
    3d5e:	e2 f7       	brpl	.-8      	; 0x3d58 <_ZN6Output4isonEv+0x50>
    3d60:	81 70       	andi	r24, 0x01	; 1
    3d62:	08 95       	ret
			{
				returnparam = 1;
			}
			break;
		case 'D':
			if ((PORTD&(1<<Pin)))
    3d64:	2b b1       	in	r18, 0x0b	; 11
    3d66:	30 e0       	ldi	r19, 0x00	; 0
    3d68:	c9 01       	movw	r24, r18
    3d6a:	01 80       	ldd	r0, Z+1	; 0x01
    3d6c:	02 c0       	rjmp	.+4      	; 0x3d72 <_ZN6Output4isonEv+0x6a>
    3d6e:	95 95       	asr	r25
    3d70:	87 95       	ror	r24
    3d72:	0a 94       	dec	r0
    3d74:	e2 f7       	brpl	.-8      	; 0x3d6e <_ZN6Output4isonEv+0x66>
    3d76:	81 70       	andi	r24, 0x01	; 1
    3d78:	08 95       	ret
			{
				returnparam = 1;
			}
			break;
		default:
		returnparam = 2;
    3d7a:	82 e0       	ldi	r24, 0x02	; 2
			break;
	}
	return returnparam;
}
    3d7c:	08 95       	ret

00003d7e <_ZN6Output3offEv>:

void Output::off(){
    3d7e:	fc 01       	movw	r30, r24
	switch (Port)
    3d80:	90 81       	ld	r25, Z
    3d82:	92 34       	cpi	r25, 0x42	; 66
    3d84:	b1 f0       	breq	.+44     	; 0x3db2 <_ZN6Output3offEv+0x34>
    3d86:	18 f4       	brcc	.+6      	; 0x3d8e <_ZN6Output3offEv+0x10>
    3d88:	91 34       	cpi	r25, 0x41	; 65
    3d8a:	31 f0       	breq	.+12     	; 0x3d98 <_ZN6Output3offEv+0x1a>
    3d8c:	08 95       	ret
    3d8e:	93 34       	cpi	r25, 0x43	; 67
    3d90:	e9 f0       	breq	.+58     	; 0x3dcc <_ZN6Output3offEv+0x4e>
    3d92:	94 34       	cpi	r25, 0x44	; 68
    3d94:	41 f1       	breq	.+80     	; 0x3de6 <_ZN6Output3offEv+0x68>
    3d96:	08 95       	ret
	{
		case 'A':
			PORTA &= ~(1<<Pin);
    3d98:	22 b1       	in	r18, 0x02	; 2
    3d9a:	81 e0       	ldi	r24, 0x01	; 1
    3d9c:	90 e0       	ldi	r25, 0x00	; 0
    3d9e:	01 80       	ldd	r0, Z+1	; 0x01
    3da0:	02 c0       	rjmp	.+4      	; 0x3da6 <_ZN6Output3offEv+0x28>
    3da2:	88 0f       	add	r24, r24
    3da4:	99 1f       	adc	r25, r25
    3da6:	0a 94       	dec	r0
    3da8:	e2 f7       	brpl	.-8      	; 0x3da2 <_ZN6Output3offEv+0x24>
    3daa:	80 95       	com	r24
    3dac:	82 23       	and	r24, r18
    3dae:	82 b9       	out	0x02, r24	; 2
			break;
    3db0:	08 95       	ret
		case 'B':
			PORTB &= ~(1<<Pin);
    3db2:	25 b1       	in	r18, 0x05	; 5
    3db4:	81 e0       	ldi	r24, 0x01	; 1
    3db6:	90 e0       	ldi	r25, 0x00	; 0
    3db8:	01 80       	ldd	r0, Z+1	; 0x01
    3dba:	02 c0       	rjmp	.+4      	; 0x3dc0 <_ZN6Output3offEv+0x42>
    3dbc:	88 0f       	add	r24, r24
    3dbe:	99 1f       	adc	r25, r25
    3dc0:	0a 94       	dec	r0
    3dc2:	e2 f7       	brpl	.-8      	; 0x3dbc <_ZN6Output3offEv+0x3e>
    3dc4:	80 95       	com	r24
    3dc6:	82 23       	and	r24, r18
    3dc8:	85 b9       	out	0x05, r24	; 5
			break;
    3dca:	08 95       	ret
		case 'C':
			PORTC &= ~(1<<Pin);
    3dcc:	28 b1       	in	r18, 0x08	; 8
    3dce:	81 e0       	ldi	r24, 0x01	; 1
    3dd0:	90 e0       	ldi	r25, 0x00	; 0
    3dd2:	01 80       	ldd	r0, Z+1	; 0x01
    3dd4:	02 c0       	rjmp	.+4      	; 0x3dda <_ZN6Output3offEv+0x5c>
    3dd6:	88 0f       	add	r24, r24
    3dd8:	99 1f       	adc	r25, r25
    3dda:	0a 94       	dec	r0
    3ddc:	e2 f7       	brpl	.-8      	; 0x3dd6 <_ZN6Output3offEv+0x58>
    3dde:	80 95       	com	r24
    3de0:	82 23       	and	r24, r18
    3de2:	88 b9       	out	0x08, r24	; 8
			break;
    3de4:	08 95       	ret
		case 'D':
			PORTD &= ~(1<<Pin);
    3de6:	2b b1       	in	r18, 0x0b	; 11
    3de8:	81 e0       	ldi	r24, 0x01	; 1
    3dea:	90 e0       	ldi	r25, 0x00	; 0
    3dec:	01 80       	ldd	r0, Z+1	; 0x01
    3dee:	02 c0       	rjmp	.+4      	; 0x3df4 <_ZN6Output3offEv+0x76>
    3df0:	88 0f       	add	r24, r24
    3df2:	99 1f       	adc	r25, r25
    3df4:	0a 94       	dec	r0
    3df6:	e2 f7       	brpl	.-8      	; 0x3df0 <_ZN6Output3offEv+0x72>
    3df8:	80 95       	com	r24
    3dfa:	82 23       	and	r24, r18
    3dfc:	8b b9       	out	0x0b, r24	; 11
    3dfe:	08 95       	ret

00003e00 <_ZN3RTCD1Ev>:
	Tag=7;
	Monat=9;
	Jahr=15;
	ausgabedatumneu();
	ausgabezeitneu();
}
    3e00:	08 95       	ret

00003e02 <_ZN3RTC6WeckerEv>:
    3e02:	fc 01       	movw	r30, r24
    3e04:	80 8d       	ldd	r24, Z+24	; 0x18
    3e06:	83 ff       	sbrs	r24, 3
    3e08:	0c c0       	rjmp	.+24     	; 0x3e22 <_ZN3RTC6WeckerEv+0x20>
    3e0a:	84 fd       	sbrc	r24, 4
    3e0c:	0a c0       	rjmp	.+20     	; 0x3e22 <_ZN3RTC6WeckerEv+0x20>
    3e0e:	22 8d       	ldd	r18, Z+26	; 0x1a
    3e10:	90 89       	ldd	r25, Z+16	; 0x10
    3e12:	29 13       	cpse	r18, r25
    3e14:	06 c0       	rjmp	.+12     	; 0x3e22 <_ZN3RTC6WeckerEv+0x20>
    3e16:	21 8d       	ldd	r18, Z+25	; 0x19
    3e18:	91 89       	ldd	r25, Z+17	; 0x11
    3e1a:	29 13       	cpse	r18, r25
    3e1c:	02 c0       	rjmp	.+4      	; 0x3e22 <_ZN3RTC6WeckerEv+0x20>
    3e1e:	80 61       	ori	r24, 0x10	; 16
    3e20:	80 8f       	std	Z+24, r24	; 0x18
    3e22:	08 95       	ret

00003e24 <_ZN3RTC14ausgabezeitneuEv>:
    3e24:	fc 01       	movw	r30, r24
    3e26:	20 89       	ldd	r18, Z+16	; 0x10
    3e28:	9d ec       	ldi	r25, 0xCD	; 205
    3e2a:	29 9f       	mul	r18, r25
    3e2c:	81 2d       	mov	r24, r1
    3e2e:	11 24       	eor	r1, r1
    3e30:	86 95       	lsr	r24
    3e32:	86 95       	lsr	r24
    3e34:	86 95       	lsr	r24
    3e36:	30 e3       	ldi	r19, 0x30	; 48
    3e38:	38 0f       	add	r19, r24
    3e3a:	30 83       	st	Z, r19
    3e3c:	88 0f       	add	r24, r24
    3e3e:	38 2f       	mov	r19, r24
    3e40:	33 0f       	add	r19, r19
    3e42:	33 0f       	add	r19, r19
    3e44:	83 0f       	add	r24, r19
    3e46:	28 1b       	sub	r18, r24
    3e48:	20 5d       	subi	r18, 0xD0	; 208
    3e4a:	21 83       	std	Z+1, r18	; 0x01
    3e4c:	21 89       	ldd	r18, Z+17	; 0x11
    3e4e:	29 9f       	mul	r18, r25
    3e50:	81 2d       	mov	r24, r1
    3e52:	11 24       	eor	r1, r1
    3e54:	86 95       	lsr	r24
    3e56:	86 95       	lsr	r24
    3e58:	86 95       	lsr	r24
    3e5a:	30 e3       	ldi	r19, 0x30	; 48
    3e5c:	38 0f       	add	r19, r24
    3e5e:	33 83       	std	Z+3, r19	; 0x03
    3e60:	88 0f       	add	r24, r24
    3e62:	38 2f       	mov	r19, r24
    3e64:	33 0f       	add	r19, r19
    3e66:	33 0f       	add	r19, r19
    3e68:	83 0f       	add	r24, r19
    3e6a:	28 1b       	sub	r18, r24
    3e6c:	20 5d       	subi	r18, 0xD0	; 208
    3e6e:	24 83       	std	Z+4, r18	; 0x04
    3e70:	82 89       	ldd	r24, Z+18	; 0x12
    3e72:	89 9f       	mul	r24, r25
    3e74:	91 2d       	mov	r25, r1
    3e76:	11 24       	eor	r1, r1
    3e78:	96 95       	lsr	r25
    3e7a:	96 95       	lsr	r25
    3e7c:	96 95       	lsr	r25
    3e7e:	20 e3       	ldi	r18, 0x30	; 48
    3e80:	29 0f       	add	r18, r25
    3e82:	26 83       	std	Z+6, r18	; 0x06
    3e84:	99 0f       	add	r25, r25
    3e86:	29 2f       	mov	r18, r25
    3e88:	22 0f       	add	r18, r18
    3e8a:	22 0f       	add	r18, r18
    3e8c:	92 0f       	add	r25, r18
    3e8e:	89 1b       	sub	r24, r25
    3e90:	80 5d       	subi	r24, 0xD0	; 208
    3e92:	87 83       	std	Z+7, r24	; 0x07
    3e94:	08 95       	ret

00003e96 <_ZN3RTC15ausgabedatumneuEv>:
    3e96:	fc 01       	movw	r30, r24
    3e98:	24 89       	ldd	r18, Z+20	; 0x14
    3e9a:	9d ec       	ldi	r25, 0xCD	; 205
    3e9c:	29 9f       	mul	r18, r25
    3e9e:	81 2d       	mov	r24, r1
    3ea0:	11 24       	eor	r1, r1
    3ea2:	86 95       	lsr	r24
    3ea4:	86 95       	lsr	r24
    3ea6:	86 95       	lsr	r24
    3ea8:	30 e3       	ldi	r19, 0x30	; 48
    3eaa:	38 0f       	add	r19, r24
    3eac:	30 87       	std	Z+8, r19	; 0x08
    3eae:	88 0f       	add	r24, r24
    3eb0:	38 2f       	mov	r19, r24
    3eb2:	33 0f       	add	r19, r19
    3eb4:	33 0f       	add	r19, r19
    3eb6:	83 0f       	add	r24, r19
    3eb8:	28 1b       	sub	r18, r24
    3eba:	20 5d       	subi	r18, 0xD0	; 208
    3ebc:	21 87       	std	Z+9, r18	; 0x09
    3ebe:	26 89       	ldd	r18, Z+22	; 0x16
    3ec0:	29 9f       	mul	r18, r25
    3ec2:	81 2d       	mov	r24, r1
    3ec4:	11 24       	eor	r1, r1
    3ec6:	86 95       	lsr	r24
    3ec8:	86 95       	lsr	r24
    3eca:	86 95       	lsr	r24
    3ecc:	30 e3       	ldi	r19, 0x30	; 48
    3ece:	38 0f       	add	r19, r24
    3ed0:	33 87       	std	Z+11, r19	; 0x0b
    3ed2:	88 0f       	add	r24, r24
    3ed4:	38 2f       	mov	r19, r24
    3ed6:	33 0f       	add	r19, r19
    3ed8:	33 0f       	add	r19, r19
    3eda:	83 0f       	add	r24, r19
    3edc:	28 1b       	sub	r18, r24
    3ede:	20 5d       	subi	r18, 0xD0	; 208
    3ee0:	24 87       	std	Z+12, r18	; 0x0c
    3ee2:	87 89       	ldd	r24, Z+23	; 0x17
    3ee4:	89 9f       	mul	r24, r25
    3ee6:	91 2d       	mov	r25, r1
    3ee8:	11 24       	eor	r1, r1
    3eea:	96 95       	lsr	r25
    3eec:	96 95       	lsr	r25
    3eee:	96 95       	lsr	r25
    3ef0:	20 e3       	ldi	r18, 0x30	; 48
    3ef2:	29 0f       	add	r18, r25
    3ef4:	26 87       	std	Z+14, r18	; 0x0e
    3ef6:	99 0f       	add	r25, r25
    3ef8:	29 2f       	mov	r18, r25
    3efa:	22 0f       	add	r18, r18
    3efc:	22 0f       	add	r18, r18
    3efe:	92 0f       	add	r25, r18
    3f00:	89 1b       	sub	r24, r25
    3f02:	80 5d       	subi	r24, 0xD0	; 208
    3f04:	87 87       	std	Z+15, r24	; 0x0f
    3f06:	08 95       	ret

00003f08 <_ZN3RTCC1Ev>:
    3f08:	cf 93       	push	r28
    3f0a:	df 93       	push	r29
    3f0c:	ec 01       	movw	r28, r24
    3f0e:	1a 8a       	std	Y+18, r1	; 0x12
    3f10:	1b 8a       	std	Y+19, r1	; 0x13
    3f12:	19 8a       	std	Y+17, r1	; 0x11
    3f14:	18 8a       	std	Y+16, r1	; 0x10
    3f16:	1c 8a       	std	Y+20, r1	; 0x14
    3f18:	1e 8a       	std	Y+22, r1	; 0x16
    3f1a:	1f 8a       	std	Y+23, r1	; 0x17
    3f1c:	1d 8a       	std	Y+21, r1	; 0x15
    3f1e:	88 e2       	ldi	r24, 0x28	; 40
    3f20:	89 8f       	std	Y+25, r24	; 0x19
    3f22:	8a e0       	ldi	r24, 0x0A	; 10
    3f24:	8a 8f       	std	Y+26, r24	; 0x1a
    3f26:	1c 8e       	std	Y+28, r1	; 0x1c
    3f28:	1b 8e       	std	Y+27, r1	; 0x1b
    3f2a:	1e 8e       	std	Y+30, r1	; 0x1e
    3f2c:	1d 8e       	std	Y+29, r1	; 0x1d
    3f2e:	fe 01       	movw	r30, r28
    3f30:	ce 01       	movw	r24, r28
    3f32:	08 96       	adiw	r24, 0x08	; 8
    3f34:	dc 01       	movw	r26, r24
    3f36:	11 92       	st	Z+, r1
    3f38:	1d 92       	st	X+, r1
    3f3a:	e8 17       	cp	r30, r24
    3f3c:	f9 07       	cpc	r31, r25
    3f3e:	d9 f7       	brne	.-10     	; 0x3f36 <_ZN3RTCC1Ev+0x2e>
    3f40:	8a e3       	ldi	r24, 0x3A	; 58
    3f42:	8a 83       	std	Y+2, r24	; 0x02
    3f44:	8d 83       	std	Y+5, r24	; 0x05
    3f46:	8e e2       	ldi	r24, 0x2E	; 46
    3f48:	8a 87       	std	Y+10, r24	; 0x0a
    3f4a:	8d 87       	std	Y+13, r24	; 0x0d
    3f4c:	ce 01       	movw	r24, r28
    3f4e:	6a df       	rcall	.-300    	; 0x3e24 <_ZN3RTC14ausgabezeitneuEv>
    3f50:	ce 01       	movw	r24, r28
    3f52:	a1 df       	rcall	.-190    	; 0x3e96 <_ZN3RTC15ausgabedatumneuEv>
    3f54:	df 91       	pop	r29
    3f56:	cf 91       	pop	r28
    3f58:	08 95       	ret

00003f5a <_ZN3RTC8kalenderEv>:
    3f5a:	fc 01       	movw	r30, r24
    3f5c:	26 89       	ldd	r18, Z+22	; 0x16
    3f5e:	32 2f       	mov	r19, r18
    3f60:	3d 7f       	andi	r19, 0xFD	; 253
    3f62:	34 30       	cpi	r19, 0x04	; 4
    3f64:	11 f0       	breq	.+4      	; 0x3f6a <_ZN3RTC8kalenderEv+0x10>
    3f66:	39 30       	cpi	r19, 0x09	; 9
    3f68:	91 f4       	brne	.+36     	; 0x3f8e <_ZN3RTC8kalenderEv+0x34>
    3f6a:	fc 01       	movw	r30, r24
    3f6c:	34 89       	ldd	r19, Z+20	; 0x14
    3f6e:	3f 31       	cpi	r19, 0x1F	; 31
    3f70:	b0 f1       	brcs	.+108    	; 0x3fde <_ZN3RTC8kalenderEv+0x84>
    3f72:	31 e0       	ldi	r19, 0x01	; 1
    3f74:	34 8b       	std	Z+20, r19	; 0x14
    3f76:	2f 5f       	subi	r18, 0xFF	; 255
    3f78:	2d 30       	cpi	r18, 0x0D	; 13
    3f7a:	10 f4       	brcc	.+4      	; 0x3f80 <_ZN3RTC8kalenderEv+0x26>
    3f7c:	26 8b       	std	Z+22, r18	; 0x16
    3f7e:	2f c0       	rjmp	.+94     	; 0x3fde <_ZN3RTC8kalenderEv+0x84>
    3f80:	21 e0       	ldi	r18, 0x01	; 1
    3f82:	fc 01       	movw	r30, r24
    3f84:	26 8b       	std	Z+22, r18	; 0x16
    3f86:	27 89       	ldd	r18, Z+23	; 0x17
    3f88:	2f 5f       	subi	r18, 0xFF	; 255
    3f8a:	27 8b       	std	Z+23, r18	; 0x17
    3f8c:	28 c0       	rjmp	.+80     	; 0x3fde <_ZN3RTC8kalenderEv+0x84>
    3f8e:	22 30       	cpi	r18, 0x02	; 2
    3f90:	a9 f4       	brne	.+42     	; 0x3fbc <_ZN3RTC8kalenderEv+0x62>
    3f92:	fc 01       	movw	r30, r24
    3f94:	27 89       	ldd	r18, Z+23	; 0x17
    3f96:	23 70       	andi	r18, 0x03	; 3
    3f98:	41 f4       	brne	.+16     	; 0x3faa <_ZN3RTC8kalenderEv+0x50>
    3f9a:	24 89       	ldd	r18, Z+20	; 0x14
    3f9c:	2e 31       	cpi	r18, 0x1E	; 30
    3f9e:	f8 f0       	brcs	.+62     	; 0x3fde <_ZN3RTC8kalenderEv+0x84>
    3fa0:	21 e0       	ldi	r18, 0x01	; 1
    3fa2:	24 8b       	std	Z+20, r18	; 0x14
    3fa4:	23 e0       	ldi	r18, 0x03	; 3
    3fa6:	26 8b       	std	Z+22, r18	; 0x16
    3fa8:	1a c0       	rjmp	.+52     	; 0x3fde <_ZN3RTC8kalenderEv+0x84>
    3faa:	fc 01       	movw	r30, r24
    3fac:	24 89       	ldd	r18, Z+20	; 0x14
    3fae:	2d 31       	cpi	r18, 0x1D	; 29
    3fb0:	b0 f0       	brcs	.+44     	; 0x3fde <_ZN3RTC8kalenderEv+0x84>
    3fb2:	21 e0       	ldi	r18, 0x01	; 1
    3fb4:	24 8b       	std	Z+20, r18	; 0x14
    3fb6:	23 e0       	ldi	r18, 0x03	; 3
    3fb8:	26 8b       	std	Z+22, r18	; 0x16
    3fba:	11 c0       	rjmp	.+34     	; 0x3fde <_ZN3RTC8kalenderEv+0x84>
    3fbc:	fc 01       	movw	r30, r24
    3fbe:	34 89       	ldd	r19, Z+20	; 0x14
    3fc0:	30 32       	cpi	r19, 0x20	; 32
    3fc2:	68 f0       	brcs	.+26     	; 0x3fde <_ZN3RTC8kalenderEv+0x84>
    3fc4:	31 e0       	ldi	r19, 0x01	; 1
    3fc6:	34 8b       	std	Z+20, r19	; 0x14
    3fc8:	2f 5f       	subi	r18, 0xFF	; 255
    3fca:	2d 30       	cpi	r18, 0x0D	; 13
    3fcc:	10 f4       	brcc	.+4      	; 0x3fd2 <_ZN3RTC8kalenderEv+0x78>
    3fce:	26 8b       	std	Z+22, r18	; 0x16
    3fd0:	06 c0       	rjmp	.+12     	; 0x3fde <_ZN3RTC8kalenderEv+0x84>
    3fd2:	21 e0       	ldi	r18, 0x01	; 1
    3fd4:	fc 01       	movw	r30, r24
    3fd6:	26 8b       	std	Z+22, r18	; 0x16
    3fd8:	27 89       	ldd	r18, Z+23	; 0x17
    3fda:	2f 5f       	subi	r18, 0xFF	; 255
    3fdc:	27 8b       	std	Z+23, r18	; 0x17
    3fde:	5b cf       	rjmp	.-330    	; 0x3e96 <_ZN3RTC15ausgabedatumneuEv>
    3fe0:	08 95       	ret

00003fe2 <_ZN3RTC4zeitEv>:
    3fe2:	cf 93       	push	r28
    3fe4:	df 93       	push	r29
    3fe6:	ec 01       	movw	r28, r24
    3fe8:	8a 89       	ldd	r24, Y+18	; 0x12
    3fea:	8c 53       	subi	r24, 0x3C	; 60
    3fec:	8d 38       	cpi	r24, 0x8D	; 141
    3fee:	c0 f4       	brcc	.+48     	; 0x4020 <_ZN3RTC4zeitEv+0x3e>
    3ff0:	1a 8a       	std	Y+18, r1	; 0x12
    3ff2:	89 89       	ldd	r24, Y+17	; 0x11
    3ff4:	8f 5f       	subi	r24, 0xFF	; 255
    3ff6:	89 8b       	std	Y+17, r24	; 0x11
    3ff8:	98 8d       	ldd	r25, Y+24	; 0x18
    3ffa:	94 60       	ori	r25, 0x04	; 4
    3ffc:	98 8f       	std	Y+24, r25	; 0x18
    3ffe:	8c 33       	cpi	r24, 0x3C	; 60
    4000:	68 f0       	brcs	.+26     	; 0x401c <_ZN3RTC4zeitEv+0x3a>
    4002:	19 8a       	std	Y+17, r1	; 0x11
    4004:	88 89       	ldd	r24, Y+16	; 0x10
    4006:	8f 5f       	subi	r24, 0xFF	; 255
    4008:	88 31       	cpi	r24, 0x18	; 24
    400a:	10 f4       	brcc	.+4      	; 0x4010 <_ZN3RTC4zeitEv+0x2e>
    400c:	88 8b       	std	Y+16, r24	; 0x10
    400e:	06 c0       	rjmp	.+12     	; 0x401c <_ZN3RTC4zeitEv+0x3a>
    4010:	18 8a       	std	Y+16, r1	; 0x10
    4012:	8c 89       	ldd	r24, Y+20	; 0x14
    4014:	8f 5f       	subi	r24, 0xFF	; 255
    4016:	8c 8b       	std	Y+20, r24	; 0x14
    4018:	ce 01       	movw	r24, r28
    401a:	9f df       	rcall	.-194    	; 0x3f5a <_ZN3RTC8kalenderEv>
    401c:	ce 01       	movw	r24, r28
    401e:	f1 de       	rcall	.-542    	; 0x3e02 <_ZN3RTC6WeckerEv>
    4020:	ce 01       	movw	r24, r28
    4022:	00 df       	rcall	.-512    	; 0x3e24 <_ZN3RTC14ausgabezeitneuEv>
    4024:	88 8d       	ldd	r24, Y+24	; 0x18
    4026:	85 ff       	sbrs	r24, 5
    4028:	0b c0       	rjmp	.+22     	; 0x4040 <_ZN3RTC4zeitEv+0x5e>
    402a:	2b 8d       	ldd	r18, Y+27	; 0x1b
    402c:	3c 8d       	ldd	r19, Y+28	; 0x1c
    402e:	21 50       	subi	r18, 0x01	; 1
    4030:	31 09       	sbc	r19, r1
    4032:	3c 8f       	std	Y+28, r19	; 0x1c
    4034:	2b 8f       	std	Y+27, r18	; 0x1b
    4036:	23 2b       	or	r18, r19
    4038:	19 f4       	brne	.+6      	; 0x4040 <_ZN3RTC4zeitEv+0x5e>
    403a:	8f 7d       	andi	r24, 0xDF	; 223
    403c:	81 60       	ori	r24, 0x01	; 1
    403e:	88 8f       	std	Y+24, r24	; 0x18
    4040:	88 8d       	ldd	r24, Y+24	; 0x18
    4042:	86 ff       	sbrs	r24, 6
    4044:	05 c0       	rjmp	.+10     	; 0x4050 <_ZN3RTC4zeitEv+0x6e>
    4046:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4048:	9e 8d       	ldd	r25, Y+30	; 0x1e
    404a:	01 96       	adiw	r24, 0x01	; 1
    404c:	9e 8f       	std	Y+30, r25	; 0x1e
    404e:	8d 8f       	std	Y+29, r24	; 0x1d
    4050:	80 e0       	ldi	r24, 0x00	; 0
    4052:	df 91       	pop	r29
    4054:	cf 91       	pop	r28
    4056:	08 95       	ret

00004058 <_ZN3RTC8RTCstartEv>:

void RTC::RTCstart(){
    4058:	fc 01       	movw	r30, r24
	//Einstellungen des Ausgabebuffers
	msg_uhr[0]='0';
    405a:	80 e3       	ldi	r24, 0x30	; 48
    405c:	80 83       	st	Z, r24
	msg_uhr[1]='0';
    405e:	81 83       	std	Z+1, r24	; 0x01
	msg_uhr[2]=':';
    4060:	9a e3       	ldi	r25, 0x3A	; 58
    4062:	92 83       	std	Z+2, r25	; 0x02
	msg_uhr[3]='0';
    4064:	83 83       	std	Z+3, r24	; 0x03
	msg_uhr[4]='0';
    4066:	84 83       	std	Z+4, r24	; 0x04
	msg_uhr[5]=':';
    4068:	95 83       	std	Z+5, r25	; 0x05
	msg_uhr[6]='0';
    406a:	86 83       	std	Z+6, r24	; 0x06
	msg_uhr[7]='0';
    406c:	87 83       	std	Z+7, r24	; 0x07
	interupts = 0;
    406e:	10 8e       	std	Z+24, r1	; 0x18
	//Timer2 als 1ms Timer fuer die RTC
	//asynchron mit 32.768 kHz 
	TCNT2 = TIMER2RTCTIME;
    4070:	10 92 b2 00 	sts	0x00B2, r1
	ASSR |= (1<<AS2);
    4074:	e6 eb       	ldi	r30, 0xB6	; 182
    4076:	f0 e0       	ldi	r31, 0x00	; 0
    4078:	80 81       	ld	r24, Z
    407a:	80 62       	ori	r24, 0x20	; 32
    407c:	80 83       	st	Z, r24
	TIMSK2 = (1<<TOIE2);
    407e:	81 e0       	ldi	r24, 0x01	; 1
    4080:	80 93 70 00 	sts	0x0070, r24
	TCCR2B = (1<<CS22) | (1<<CS20);		//Vorteiler 256
    4084:	85 e0       	ldi	r24, 0x05	; 5
    4086:	80 93 b1 00 	sts	0x00B1, r24
    408a:	08 95       	ret

0000408c <_ZN3RTC7RTCstopEv>:
}

void RTC::RTCstop(){
	TCCR2B &= ~((1<<CS22) | (1<<CS21));
    408c:	e1 eb       	ldi	r30, 0xB1	; 177
    408e:	f0 e0       	ldi	r31, 0x00	; 0
    4090:	80 81       	ld	r24, Z
    4092:	89 7f       	andi	r24, 0xF9	; 249
    4094:	80 83       	st	Z, r24
    4096:	08 95       	ret

00004098 <_ZN5SOUNDD1Ev>:
	setfrequenci(1000);//1KHz
	off();
} //SOUND

// default destructor
SOUND::~SOUND()
    4098:	08 95       	ret

0000409a <_ZN5SOUND2onEv>:
	TCNT0 = 0;
	on();
}

void SOUND::on(){
	if ((interupts&(1<<Soundactiv)))
    409a:	fc 01       	movw	r30, r24
    409c:	20 81       	ld	r18, Z
    409e:	20 ff       	sbrs	r18, 0
    40a0:	04 c0       	rjmp	.+8      	; 0x40aa <_ZN5SOUND2onEv+0x10>
	{
		TCCR0B |= prescaler;
    40a2:	25 b5       	in	r18, 0x25	; 37
    40a4:	81 81       	ldd	r24, Z+1	; 0x01
    40a6:	82 2b       	or	r24, r18
    40a8:	85 bd       	out	0x25, r24	; 37
    40aa:	08 95       	ret

000040ac <_ZN5SOUND3offEv>:
	}
}

void SOUND::off(){
	TCCR0B &= ~((1<<CS00)|(1<<CS01)|(1<<CS02));
    40ac:	85 b5       	in	r24, 0x25	; 37
    40ae:	88 7f       	andi	r24, 0xF8	; 248
    40b0:	85 bd       	out	0x25, r24	; 37
    40b2:	08 95       	ret

000040b4 <_ZN5SOUND12setfrequenciEj>:
{
} //~SOUND


//WERT = f_CPU/(f*1024)
void SOUND::setfrequenci(uint16_t frequenz){
    40b4:	0f 93       	push	r16
    40b6:	1f 93       	push	r17
    40b8:	cf 93       	push	r28
    40ba:	df 93       	push	r29
    40bc:	8c 01       	movw	r16, r24
    40be:	eb 01       	movw	r28, r22
	off();
    40c0:	f5 df       	rcall	.-22     	; 0x40ac <_ZN5SOUND3offEv>
	float WERT = F_CPU/256.0;
	WERT /= (frequenz);
    40c2:	be 01       	movw	r22, r28
    40c4:	80 e0       	ldi	r24, 0x00	; 0
    40c6:	90 e0       	ldi	r25, 0x00	; 0
    40c8:	29 d1       	rcall	.+594    	; 0x431c <__floatunsisf>
    40ca:	9b 01       	movw	r18, r22
    40cc:	ac 01       	movw	r20, r24
    40ce:	60 e0       	ldi	r22, 0x00	; 0
    40d0:	74 e2       	ldi	r23, 0x24	; 36
    40d2:	84 ef       	ldi	r24, 0xF4	; 244
    40d4:	96 e4       	ldi	r25, 0x46	; 70
    40d6:	89 d0       	rcall	.+274    	; 0x41ea <__divsf3>
	OCR0A = (uint8_t)WERT;
    40d8:	f5 d0       	rcall	.+490    	; 0x42c4 <__fixunssfsi>
    40da:	67 bd       	out	0x27, r22	; 39
	TCNT0 = 0;
    40dc:	16 bc       	out	0x26, r1	; 38
	on();
    40de:	c8 01       	movw	r24, r16
    40e0:	dc df       	rcall	.-72     	; 0x409a <_ZN5SOUND2onEv>
}
    40e2:	df 91       	pop	r29
    40e4:	cf 91       	pop	r28
    40e6:	1f 91       	pop	r17
    40e8:	0f 91       	pop	r16
    40ea:	08 95       	ret

000040ec <_ZN5SOUNDC1Ev>:


#include "SOUND.h"

// default constructor
SOUND::SOUND()
    40ec:	cf 93       	push	r28
    40ee:	df 93       	push	r29
    40f0:	ec 01       	movw	r28, r24
{
	//interuptregister initialisieren
	interupts = 0;
    40f2:	18 82       	st	Y, r1
	PORTB &= ~(1<<PORTB3); //Pullups ausschalten
    40f4:	2b 98       	cbi	0x05, 3	; 5
	DDRB |= (1<<PORTB3); //Ausgang schalten
    40f6:	23 9a       	sbi	0x04, 3	; 4
	//Not inverting PWM, Phase correct
	TCCR0A |= (1<<COM0A0) | (1<<WGM00);
    40f8:	84 b5       	in	r24, 0x24	; 36
    40fa:	81 64       	ori	r24, 0x41	; 65
    40fc:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1<<WGM02);
    40fe:	85 b5       	in	r24, 0x25	; 37
    4100:	88 60       	ori	r24, 0x08	; 8
    4102:	85 bd       	out	0x25, r24	; 37
	fuer	8		1MHz		3.90625KHz
			64		125KHz		488.28Hz
			256		31.25KHz	122.07Hz
			1024	7.8125KHz	30.52Hz
*/
	prescaler = (1<<CS02); //256
    4104:	84 e0       	ldi	r24, 0x04	; 4
    4106:	89 83       	std	Y+1, r24	; 0x01
	setfrequenci(1000);//1KHz
    4108:	68 ee       	ldi	r22, 0xE8	; 232
    410a:	73 e0       	ldi	r23, 0x03	; 3
    410c:	ce 01       	movw	r24, r28
    410e:	d2 df       	rcall	.-92     	; 0x40b4 <_ZN5SOUND12setfrequenciEj>
	off();
    4110:	ce 01       	movw	r24, r28
    4112:	cc df       	rcall	.-104    	; 0x40ac <_ZN5SOUND3offEv>
} //SOUND
    4114:	df 91       	pop	r29
    4116:	cf 91       	pop	r28
    4118:	08 95       	ret

0000411a <__subsf3>:
    411a:	50 58       	subi	r21, 0x80	; 128

0000411c <__addsf3>:
    411c:	bb 27       	eor	r27, r27
    411e:	aa 27       	eor	r26, r26
    4120:	0e d0       	rcall	.+28     	; 0x413e <__addsf3x>
    4122:	c1 c1       	rjmp	.+898    	; 0x44a6 <__fp_round>
    4124:	8a d1       	rcall	.+788    	; 0x443a <__fp_pscA>
    4126:	30 f0       	brcs	.+12     	; 0x4134 <__addsf3+0x18>
    4128:	8f d1       	rcall	.+798    	; 0x4448 <__fp_pscB>
    412a:	20 f0       	brcs	.+8      	; 0x4134 <__addsf3+0x18>
    412c:	31 f4       	brne	.+12     	; 0x413a <__addsf3+0x1e>
    412e:	9f 3f       	cpi	r25, 0xFF	; 255
    4130:	11 f4       	brne	.+4      	; 0x4136 <__addsf3+0x1a>
    4132:	1e f4       	brtc	.+6      	; 0x413a <__addsf3+0x1e>
    4134:	5a c1       	rjmp	.+692    	; 0x43ea <__fp_nan>
    4136:	0e f4       	brtc	.+2      	; 0x413a <__addsf3+0x1e>
    4138:	e0 95       	com	r30
    413a:	e7 fb       	bst	r30, 7
    413c:	50 c1       	rjmp	.+672    	; 0x43de <__fp_inf>

0000413e <__addsf3x>:
    413e:	e9 2f       	mov	r30, r25
    4140:	d4 d1       	rcall	.+936    	; 0x44ea <__fp_split3>
    4142:	80 f3       	brcs	.-32     	; 0x4124 <__addsf3+0x8>
    4144:	ba 17       	cp	r27, r26
    4146:	62 07       	cpc	r22, r18
    4148:	73 07       	cpc	r23, r19
    414a:	84 07       	cpc	r24, r20
    414c:	95 07       	cpc	r25, r21
    414e:	18 f0       	brcs	.+6      	; 0x4156 <__addsf3x+0x18>
    4150:	71 f4       	brne	.+28     	; 0x416e <__addsf3x+0x30>
    4152:	9e f5       	brtc	.+102    	; 0x41ba <__addsf3x+0x7c>
    4154:	ec c1       	rjmp	.+984    	; 0x452e <__fp_zero>
    4156:	0e f4       	brtc	.+2      	; 0x415a <__addsf3x+0x1c>
    4158:	e0 95       	com	r30
    415a:	0b 2e       	mov	r0, r27
    415c:	ba 2f       	mov	r27, r26
    415e:	a0 2d       	mov	r26, r0
    4160:	0b 01       	movw	r0, r22
    4162:	b9 01       	movw	r22, r18
    4164:	90 01       	movw	r18, r0
    4166:	0c 01       	movw	r0, r24
    4168:	ca 01       	movw	r24, r20
    416a:	a0 01       	movw	r20, r0
    416c:	11 24       	eor	r1, r1
    416e:	ff 27       	eor	r31, r31
    4170:	59 1b       	sub	r21, r25
    4172:	99 f0       	breq	.+38     	; 0x419a <__addsf3x+0x5c>
    4174:	59 3f       	cpi	r21, 0xF9	; 249
    4176:	50 f4       	brcc	.+20     	; 0x418c <__addsf3x+0x4e>
    4178:	50 3e       	cpi	r21, 0xE0	; 224
    417a:	68 f1       	brcs	.+90     	; 0x41d6 <__addsf3x+0x98>
    417c:	1a 16       	cp	r1, r26
    417e:	f0 40       	sbci	r31, 0x00	; 0
    4180:	a2 2f       	mov	r26, r18
    4182:	23 2f       	mov	r18, r19
    4184:	34 2f       	mov	r19, r20
    4186:	44 27       	eor	r20, r20
    4188:	58 5f       	subi	r21, 0xF8	; 248
    418a:	f3 cf       	rjmp	.-26     	; 0x4172 <__addsf3x+0x34>
    418c:	46 95       	lsr	r20
    418e:	37 95       	ror	r19
    4190:	27 95       	ror	r18
    4192:	a7 95       	ror	r26
    4194:	f0 40       	sbci	r31, 0x00	; 0
    4196:	53 95       	inc	r21
    4198:	c9 f7       	brne	.-14     	; 0x418c <__addsf3x+0x4e>
    419a:	7e f4       	brtc	.+30     	; 0x41ba <__addsf3x+0x7c>
    419c:	1f 16       	cp	r1, r31
    419e:	ba 0b       	sbc	r27, r26
    41a0:	62 0b       	sbc	r22, r18
    41a2:	73 0b       	sbc	r23, r19
    41a4:	84 0b       	sbc	r24, r20
    41a6:	ba f0       	brmi	.+46     	; 0x41d6 <__addsf3x+0x98>
    41a8:	91 50       	subi	r25, 0x01	; 1
    41aa:	a1 f0       	breq	.+40     	; 0x41d4 <__addsf3x+0x96>
    41ac:	ff 0f       	add	r31, r31
    41ae:	bb 1f       	adc	r27, r27
    41b0:	66 1f       	adc	r22, r22
    41b2:	77 1f       	adc	r23, r23
    41b4:	88 1f       	adc	r24, r24
    41b6:	c2 f7       	brpl	.-16     	; 0x41a8 <__addsf3x+0x6a>
    41b8:	0e c0       	rjmp	.+28     	; 0x41d6 <__addsf3x+0x98>
    41ba:	ba 0f       	add	r27, r26
    41bc:	62 1f       	adc	r22, r18
    41be:	73 1f       	adc	r23, r19
    41c0:	84 1f       	adc	r24, r20
    41c2:	48 f4       	brcc	.+18     	; 0x41d6 <__addsf3x+0x98>
    41c4:	87 95       	ror	r24
    41c6:	77 95       	ror	r23
    41c8:	67 95       	ror	r22
    41ca:	b7 95       	ror	r27
    41cc:	f7 95       	ror	r31
    41ce:	9e 3f       	cpi	r25, 0xFE	; 254
    41d0:	08 f0       	brcs	.+2      	; 0x41d4 <__addsf3x+0x96>
    41d2:	b3 cf       	rjmp	.-154    	; 0x413a <__addsf3+0x1e>
    41d4:	93 95       	inc	r25
    41d6:	88 0f       	add	r24, r24
    41d8:	08 f0       	brcs	.+2      	; 0x41dc <__addsf3x+0x9e>
    41da:	99 27       	eor	r25, r25
    41dc:	ee 0f       	add	r30, r30
    41de:	97 95       	ror	r25
    41e0:	87 95       	ror	r24
    41e2:	08 95       	ret

000041e4 <cos>:
    41e4:	39 d1       	rcall	.+626    	; 0x4458 <__fp_rempio2>
    41e6:	e3 95       	inc	r30
    41e8:	6f c1       	rjmp	.+734    	; 0x44c8 <__fp_sinus>

000041ea <__divsf3>:
    41ea:	0c d0       	rcall	.+24     	; 0x4204 <__divsf3x>
    41ec:	5c c1       	rjmp	.+696    	; 0x44a6 <__fp_round>
    41ee:	2c d1       	rcall	.+600    	; 0x4448 <__fp_pscB>
    41f0:	40 f0       	brcs	.+16     	; 0x4202 <__divsf3+0x18>
    41f2:	23 d1       	rcall	.+582    	; 0x443a <__fp_pscA>
    41f4:	30 f0       	brcs	.+12     	; 0x4202 <__divsf3+0x18>
    41f6:	21 f4       	brne	.+8      	; 0x4200 <__divsf3+0x16>
    41f8:	5f 3f       	cpi	r21, 0xFF	; 255
    41fa:	19 f0       	breq	.+6      	; 0x4202 <__divsf3+0x18>
    41fc:	f0 c0       	rjmp	.+480    	; 0x43de <__fp_inf>
    41fe:	51 11       	cpse	r21, r1
    4200:	97 c1       	rjmp	.+814    	; 0x4530 <__fp_szero>
    4202:	f3 c0       	rjmp	.+486    	; 0x43ea <__fp_nan>

00004204 <__divsf3x>:
    4204:	72 d1       	rcall	.+740    	; 0x44ea <__fp_split3>
    4206:	98 f3       	brcs	.-26     	; 0x41ee <__divsf3+0x4>

00004208 <__divsf3_pse>:
    4208:	99 23       	and	r25, r25
    420a:	c9 f3       	breq	.-14     	; 0x41fe <__divsf3+0x14>
    420c:	55 23       	and	r21, r21
    420e:	b1 f3       	breq	.-20     	; 0x41fc <__divsf3+0x12>
    4210:	95 1b       	sub	r25, r21
    4212:	55 0b       	sbc	r21, r21
    4214:	bb 27       	eor	r27, r27
    4216:	aa 27       	eor	r26, r26
    4218:	62 17       	cp	r22, r18
    421a:	73 07       	cpc	r23, r19
    421c:	84 07       	cpc	r24, r20
    421e:	38 f0       	brcs	.+14     	; 0x422e <__divsf3_pse+0x26>
    4220:	9f 5f       	subi	r25, 0xFF	; 255
    4222:	5f 4f       	sbci	r21, 0xFF	; 255
    4224:	22 0f       	add	r18, r18
    4226:	33 1f       	adc	r19, r19
    4228:	44 1f       	adc	r20, r20
    422a:	aa 1f       	adc	r26, r26
    422c:	a9 f3       	breq	.-22     	; 0x4218 <__divsf3_pse+0x10>
    422e:	33 d0       	rcall	.+102    	; 0x4296 <__divsf3_pse+0x8e>
    4230:	0e 2e       	mov	r0, r30
    4232:	3a f0       	brmi	.+14     	; 0x4242 <__divsf3_pse+0x3a>
    4234:	e0 e8       	ldi	r30, 0x80	; 128
    4236:	30 d0       	rcall	.+96     	; 0x4298 <__divsf3_pse+0x90>
    4238:	91 50       	subi	r25, 0x01	; 1
    423a:	50 40       	sbci	r21, 0x00	; 0
    423c:	e6 95       	lsr	r30
    423e:	00 1c       	adc	r0, r0
    4240:	ca f7       	brpl	.-14     	; 0x4234 <__divsf3_pse+0x2c>
    4242:	29 d0       	rcall	.+82     	; 0x4296 <__divsf3_pse+0x8e>
    4244:	fe 2f       	mov	r31, r30
    4246:	27 d0       	rcall	.+78     	; 0x4296 <__divsf3_pse+0x8e>
    4248:	66 0f       	add	r22, r22
    424a:	77 1f       	adc	r23, r23
    424c:	88 1f       	adc	r24, r24
    424e:	bb 1f       	adc	r27, r27
    4250:	26 17       	cp	r18, r22
    4252:	37 07       	cpc	r19, r23
    4254:	48 07       	cpc	r20, r24
    4256:	ab 07       	cpc	r26, r27
    4258:	b0 e8       	ldi	r27, 0x80	; 128
    425a:	09 f0       	breq	.+2      	; 0x425e <__divsf3_pse+0x56>
    425c:	bb 0b       	sbc	r27, r27
    425e:	80 2d       	mov	r24, r0
    4260:	bf 01       	movw	r22, r30
    4262:	ff 27       	eor	r31, r31
    4264:	93 58       	subi	r25, 0x83	; 131
    4266:	5f 4f       	sbci	r21, 0xFF	; 255
    4268:	2a f0       	brmi	.+10     	; 0x4274 <__divsf3_pse+0x6c>
    426a:	9e 3f       	cpi	r25, 0xFE	; 254
    426c:	51 05       	cpc	r21, r1
    426e:	68 f0       	brcs	.+26     	; 0x428a <__divsf3_pse+0x82>
    4270:	b6 c0       	rjmp	.+364    	; 0x43de <__fp_inf>
    4272:	5e c1       	rjmp	.+700    	; 0x4530 <__fp_szero>
    4274:	5f 3f       	cpi	r21, 0xFF	; 255
    4276:	ec f3       	brlt	.-6      	; 0x4272 <__divsf3_pse+0x6a>
    4278:	98 3e       	cpi	r25, 0xE8	; 232
    427a:	dc f3       	brlt	.-10     	; 0x4272 <__divsf3_pse+0x6a>
    427c:	86 95       	lsr	r24
    427e:	77 95       	ror	r23
    4280:	67 95       	ror	r22
    4282:	b7 95       	ror	r27
    4284:	f7 95       	ror	r31
    4286:	9f 5f       	subi	r25, 0xFF	; 255
    4288:	c9 f7       	brne	.-14     	; 0x427c <__divsf3_pse+0x74>
    428a:	88 0f       	add	r24, r24
    428c:	91 1d       	adc	r25, r1
    428e:	96 95       	lsr	r25
    4290:	87 95       	ror	r24
    4292:	97 f9       	bld	r25, 7
    4294:	08 95       	ret
    4296:	e1 e0       	ldi	r30, 0x01	; 1
    4298:	66 0f       	add	r22, r22
    429a:	77 1f       	adc	r23, r23
    429c:	88 1f       	adc	r24, r24
    429e:	bb 1f       	adc	r27, r27
    42a0:	62 17       	cp	r22, r18
    42a2:	73 07       	cpc	r23, r19
    42a4:	84 07       	cpc	r24, r20
    42a6:	ba 07       	cpc	r27, r26
    42a8:	20 f0       	brcs	.+8      	; 0x42b2 <__divsf3_pse+0xaa>
    42aa:	62 1b       	sub	r22, r18
    42ac:	73 0b       	sbc	r23, r19
    42ae:	84 0b       	sbc	r24, r20
    42b0:	ba 0b       	sbc	r27, r26
    42b2:	ee 1f       	adc	r30, r30
    42b4:	88 f7       	brcc	.-30     	; 0x4298 <__divsf3_pse+0x90>
    42b6:	e0 95       	com	r30
    42b8:	08 95       	ret

000042ba <__fixsfsi>:
    42ba:	04 d0       	rcall	.+8      	; 0x42c4 <__fixunssfsi>
    42bc:	68 94       	set
    42be:	b1 11       	cpse	r27, r1
    42c0:	37 c1       	rjmp	.+622    	; 0x4530 <__fp_szero>
    42c2:	08 95       	ret

000042c4 <__fixunssfsi>:
    42c4:	1a d1       	rcall	.+564    	; 0x44fa <__fp_splitA>
    42c6:	88 f0       	brcs	.+34     	; 0x42ea <__fixunssfsi+0x26>
    42c8:	9f 57       	subi	r25, 0x7F	; 127
    42ca:	90 f0       	brcs	.+36     	; 0x42f0 <__fixunssfsi+0x2c>
    42cc:	b9 2f       	mov	r27, r25
    42ce:	99 27       	eor	r25, r25
    42d0:	b7 51       	subi	r27, 0x17	; 23
    42d2:	a0 f0       	brcs	.+40     	; 0x42fc <__fixunssfsi+0x38>
    42d4:	d1 f0       	breq	.+52     	; 0x430a <__fixunssfsi+0x46>
    42d6:	66 0f       	add	r22, r22
    42d8:	77 1f       	adc	r23, r23
    42da:	88 1f       	adc	r24, r24
    42dc:	99 1f       	adc	r25, r25
    42de:	1a f0       	brmi	.+6      	; 0x42e6 <__fixunssfsi+0x22>
    42e0:	ba 95       	dec	r27
    42e2:	c9 f7       	brne	.-14     	; 0x42d6 <__fixunssfsi+0x12>
    42e4:	12 c0       	rjmp	.+36     	; 0x430a <__fixunssfsi+0x46>
    42e6:	b1 30       	cpi	r27, 0x01	; 1
    42e8:	81 f0       	breq	.+32     	; 0x430a <__fixunssfsi+0x46>
    42ea:	21 d1       	rcall	.+578    	; 0x452e <__fp_zero>
    42ec:	b1 e0       	ldi	r27, 0x01	; 1
    42ee:	08 95       	ret
    42f0:	1e c1       	rjmp	.+572    	; 0x452e <__fp_zero>
    42f2:	67 2f       	mov	r22, r23
    42f4:	78 2f       	mov	r23, r24
    42f6:	88 27       	eor	r24, r24
    42f8:	b8 5f       	subi	r27, 0xF8	; 248
    42fa:	39 f0       	breq	.+14     	; 0x430a <__fixunssfsi+0x46>
    42fc:	b9 3f       	cpi	r27, 0xF9	; 249
    42fe:	cc f3       	brlt	.-14     	; 0x42f2 <__fixunssfsi+0x2e>
    4300:	86 95       	lsr	r24
    4302:	77 95       	ror	r23
    4304:	67 95       	ror	r22
    4306:	b3 95       	inc	r27
    4308:	d9 f7       	brne	.-10     	; 0x4300 <__fixunssfsi+0x3c>
    430a:	3e f4       	brtc	.+14     	; 0x431a <__fixunssfsi+0x56>
    430c:	90 95       	com	r25
    430e:	80 95       	com	r24
    4310:	70 95       	com	r23
    4312:	61 95       	neg	r22
    4314:	7f 4f       	sbci	r23, 0xFF	; 255
    4316:	8f 4f       	sbci	r24, 0xFF	; 255
    4318:	9f 4f       	sbci	r25, 0xFF	; 255
    431a:	08 95       	ret

0000431c <__floatunsisf>:
    431c:	e8 94       	clt
    431e:	09 c0       	rjmp	.+18     	; 0x4332 <__floatsisf+0x12>

00004320 <__floatsisf>:
    4320:	97 fb       	bst	r25, 7
    4322:	3e f4       	brtc	.+14     	; 0x4332 <__floatsisf+0x12>
    4324:	90 95       	com	r25
    4326:	80 95       	com	r24
    4328:	70 95       	com	r23
    432a:	61 95       	neg	r22
    432c:	7f 4f       	sbci	r23, 0xFF	; 255
    432e:	8f 4f       	sbci	r24, 0xFF	; 255
    4330:	9f 4f       	sbci	r25, 0xFF	; 255
    4332:	99 23       	and	r25, r25
    4334:	a9 f0       	breq	.+42     	; 0x4360 <__floatsisf+0x40>
    4336:	f9 2f       	mov	r31, r25
    4338:	96 e9       	ldi	r25, 0x96	; 150
    433a:	bb 27       	eor	r27, r27
    433c:	93 95       	inc	r25
    433e:	f6 95       	lsr	r31
    4340:	87 95       	ror	r24
    4342:	77 95       	ror	r23
    4344:	67 95       	ror	r22
    4346:	b7 95       	ror	r27
    4348:	f1 11       	cpse	r31, r1
    434a:	f8 cf       	rjmp	.-16     	; 0x433c <__floatsisf+0x1c>
    434c:	fa f4       	brpl	.+62     	; 0x438c <__floatsisf+0x6c>
    434e:	bb 0f       	add	r27, r27
    4350:	11 f4       	brne	.+4      	; 0x4356 <__floatsisf+0x36>
    4352:	60 ff       	sbrs	r22, 0
    4354:	1b c0       	rjmp	.+54     	; 0x438c <__floatsisf+0x6c>
    4356:	6f 5f       	subi	r22, 0xFF	; 255
    4358:	7f 4f       	sbci	r23, 0xFF	; 255
    435a:	8f 4f       	sbci	r24, 0xFF	; 255
    435c:	9f 4f       	sbci	r25, 0xFF	; 255
    435e:	16 c0       	rjmp	.+44     	; 0x438c <__floatsisf+0x6c>
    4360:	88 23       	and	r24, r24
    4362:	11 f0       	breq	.+4      	; 0x4368 <__floatsisf+0x48>
    4364:	96 e9       	ldi	r25, 0x96	; 150
    4366:	11 c0       	rjmp	.+34     	; 0x438a <__floatsisf+0x6a>
    4368:	77 23       	and	r23, r23
    436a:	21 f0       	breq	.+8      	; 0x4374 <__floatsisf+0x54>
    436c:	9e e8       	ldi	r25, 0x8E	; 142
    436e:	87 2f       	mov	r24, r23
    4370:	76 2f       	mov	r23, r22
    4372:	05 c0       	rjmp	.+10     	; 0x437e <__floatsisf+0x5e>
    4374:	66 23       	and	r22, r22
    4376:	71 f0       	breq	.+28     	; 0x4394 <__floatsisf+0x74>
    4378:	96 e8       	ldi	r25, 0x86	; 134
    437a:	86 2f       	mov	r24, r22
    437c:	70 e0       	ldi	r23, 0x00	; 0
    437e:	60 e0       	ldi	r22, 0x00	; 0
    4380:	2a f0       	brmi	.+10     	; 0x438c <__floatsisf+0x6c>
    4382:	9a 95       	dec	r25
    4384:	66 0f       	add	r22, r22
    4386:	77 1f       	adc	r23, r23
    4388:	88 1f       	adc	r24, r24
    438a:	da f7       	brpl	.-10     	; 0x4382 <__floatsisf+0x62>
    438c:	88 0f       	add	r24, r24
    438e:	96 95       	lsr	r25
    4390:	87 95       	ror	r24
    4392:	97 f9       	bld	r25, 7
    4394:	08 95       	ret

00004396 <__fp_cmp>:
    4396:	99 0f       	add	r25, r25
    4398:	00 08       	sbc	r0, r0
    439a:	55 0f       	add	r21, r21
    439c:	aa 0b       	sbc	r26, r26
    439e:	e0 e8       	ldi	r30, 0x80	; 128
    43a0:	fe ef       	ldi	r31, 0xFE	; 254
    43a2:	16 16       	cp	r1, r22
    43a4:	17 06       	cpc	r1, r23
    43a6:	e8 07       	cpc	r30, r24
    43a8:	f9 07       	cpc	r31, r25
    43aa:	c0 f0       	brcs	.+48     	; 0x43dc <__fp_cmp+0x46>
    43ac:	12 16       	cp	r1, r18
    43ae:	13 06       	cpc	r1, r19
    43b0:	e4 07       	cpc	r30, r20
    43b2:	f5 07       	cpc	r31, r21
    43b4:	98 f0       	brcs	.+38     	; 0x43dc <__fp_cmp+0x46>
    43b6:	62 1b       	sub	r22, r18
    43b8:	73 0b       	sbc	r23, r19
    43ba:	84 0b       	sbc	r24, r20
    43bc:	95 0b       	sbc	r25, r21
    43be:	39 f4       	brne	.+14     	; 0x43ce <__fp_cmp+0x38>
    43c0:	0a 26       	eor	r0, r26
    43c2:	61 f0       	breq	.+24     	; 0x43dc <__fp_cmp+0x46>
    43c4:	23 2b       	or	r18, r19
    43c6:	24 2b       	or	r18, r20
    43c8:	25 2b       	or	r18, r21
    43ca:	21 f4       	brne	.+8      	; 0x43d4 <__fp_cmp+0x3e>
    43cc:	08 95       	ret
    43ce:	0a 26       	eor	r0, r26
    43d0:	09 f4       	brne	.+2      	; 0x43d4 <__fp_cmp+0x3e>
    43d2:	a1 40       	sbci	r26, 0x01	; 1
    43d4:	a6 95       	lsr	r26
    43d6:	8f ef       	ldi	r24, 0xFF	; 255
    43d8:	81 1d       	adc	r24, r1
    43da:	81 1d       	adc	r24, r1
    43dc:	08 95       	ret

000043de <__fp_inf>:
    43de:	97 f9       	bld	r25, 7
    43e0:	9f 67       	ori	r25, 0x7F	; 127
    43e2:	80 e8       	ldi	r24, 0x80	; 128
    43e4:	70 e0       	ldi	r23, 0x00	; 0
    43e6:	60 e0       	ldi	r22, 0x00	; 0
    43e8:	08 95       	ret

000043ea <__fp_nan>:
    43ea:	9f ef       	ldi	r25, 0xFF	; 255
    43ec:	80 ec       	ldi	r24, 0xC0	; 192
    43ee:	08 95       	ret

000043f0 <__fp_powser>:
    43f0:	df 93       	push	r29
    43f2:	cf 93       	push	r28
    43f4:	1f 93       	push	r17
    43f6:	0f 93       	push	r16
    43f8:	ff 92       	push	r15
    43fa:	ef 92       	push	r14
    43fc:	df 92       	push	r13
    43fe:	7b 01       	movw	r14, r22
    4400:	8c 01       	movw	r16, r24
    4402:	68 94       	set
    4404:	05 c0       	rjmp	.+10     	; 0x4410 <__fp_powser+0x20>
    4406:	da 2e       	mov	r13, r26
    4408:	ef 01       	movw	r28, r30
    440a:	af d0       	rcall	.+350    	; 0x456a <__mulsf3x>
    440c:	fe 01       	movw	r30, r28
    440e:	e8 94       	clt
    4410:	a5 91       	lpm	r26, Z+
    4412:	25 91       	lpm	r18, Z+
    4414:	35 91       	lpm	r19, Z+
    4416:	45 91       	lpm	r20, Z+
    4418:	55 91       	lpm	r21, Z+
    441a:	ae f3       	brts	.-22     	; 0x4406 <__fp_powser+0x16>
    441c:	ef 01       	movw	r28, r30
    441e:	8f de       	rcall	.-738    	; 0x413e <__addsf3x>
    4420:	fe 01       	movw	r30, r28
    4422:	97 01       	movw	r18, r14
    4424:	a8 01       	movw	r20, r16
    4426:	da 94       	dec	r13
    4428:	79 f7       	brne	.-34     	; 0x4408 <__fp_powser+0x18>
    442a:	df 90       	pop	r13
    442c:	ef 90       	pop	r14
    442e:	ff 90       	pop	r15
    4430:	0f 91       	pop	r16
    4432:	1f 91       	pop	r17
    4434:	cf 91       	pop	r28
    4436:	df 91       	pop	r29
    4438:	08 95       	ret

0000443a <__fp_pscA>:
    443a:	00 24       	eor	r0, r0
    443c:	0a 94       	dec	r0
    443e:	16 16       	cp	r1, r22
    4440:	17 06       	cpc	r1, r23
    4442:	18 06       	cpc	r1, r24
    4444:	09 06       	cpc	r0, r25
    4446:	08 95       	ret

00004448 <__fp_pscB>:
    4448:	00 24       	eor	r0, r0
    444a:	0a 94       	dec	r0
    444c:	12 16       	cp	r1, r18
    444e:	13 06       	cpc	r1, r19
    4450:	14 06       	cpc	r1, r20
    4452:	05 06       	cpc	r0, r21
    4454:	08 95       	ret
    4456:	c9 cf       	rjmp	.-110    	; 0x43ea <__fp_nan>

00004458 <__fp_rempio2>:
    4458:	50 d0       	rcall	.+160    	; 0x44fa <__fp_splitA>
    445a:	e8 f3       	brcs	.-6      	; 0x4456 <__fp_pscB+0xe>
    445c:	e8 94       	clt
    445e:	e0 e0       	ldi	r30, 0x00	; 0
    4460:	bb 27       	eor	r27, r27
    4462:	9f 57       	subi	r25, 0x7F	; 127
    4464:	f0 f0       	brcs	.+60     	; 0x44a2 <__fp_rempio2+0x4a>
    4466:	2a ed       	ldi	r18, 0xDA	; 218
    4468:	3f e0       	ldi	r19, 0x0F	; 15
    446a:	49 ec       	ldi	r20, 0xC9	; 201
    446c:	06 c0       	rjmp	.+12     	; 0x447a <__fp_rempio2+0x22>
    446e:	ee 0f       	add	r30, r30
    4470:	bb 0f       	add	r27, r27
    4472:	66 1f       	adc	r22, r22
    4474:	77 1f       	adc	r23, r23
    4476:	88 1f       	adc	r24, r24
    4478:	28 f0       	brcs	.+10     	; 0x4484 <__fp_rempio2+0x2c>
    447a:	b2 3a       	cpi	r27, 0xA2	; 162
    447c:	62 07       	cpc	r22, r18
    447e:	73 07       	cpc	r23, r19
    4480:	84 07       	cpc	r24, r20
    4482:	28 f0       	brcs	.+10     	; 0x448e <__fp_rempio2+0x36>
    4484:	b2 5a       	subi	r27, 0xA2	; 162
    4486:	62 0b       	sbc	r22, r18
    4488:	73 0b       	sbc	r23, r19
    448a:	84 0b       	sbc	r24, r20
    448c:	e3 95       	inc	r30
    448e:	9a 95       	dec	r25
    4490:	72 f7       	brpl	.-36     	; 0x446e <__fp_rempio2+0x16>
    4492:	80 38       	cpi	r24, 0x80	; 128
    4494:	30 f4       	brcc	.+12     	; 0x44a2 <__fp_rempio2+0x4a>
    4496:	9a 95       	dec	r25
    4498:	bb 0f       	add	r27, r27
    449a:	66 1f       	adc	r22, r22
    449c:	77 1f       	adc	r23, r23
    449e:	88 1f       	adc	r24, r24
    44a0:	d2 f7       	brpl	.-12     	; 0x4496 <__fp_rempio2+0x3e>
    44a2:	90 48       	sbci	r25, 0x80	; 128
    44a4:	3e c1       	rjmp	.+636    	; 0x4722 <__fp_mpack_finite>

000044a6 <__fp_round>:
    44a6:	09 2e       	mov	r0, r25
    44a8:	03 94       	inc	r0
    44aa:	00 0c       	add	r0, r0
    44ac:	11 f4       	brne	.+4      	; 0x44b2 <__fp_round+0xc>
    44ae:	88 23       	and	r24, r24
    44b0:	52 f0       	brmi	.+20     	; 0x44c6 <__fp_round+0x20>
    44b2:	bb 0f       	add	r27, r27
    44b4:	40 f4       	brcc	.+16     	; 0x44c6 <__fp_round+0x20>
    44b6:	bf 2b       	or	r27, r31
    44b8:	11 f4       	brne	.+4      	; 0x44be <__fp_round+0x18>
    44ba:	60 ff       	sbrs	r22, 0
    44bc:	04 c0       	rjmp	.+8      	; 0x44c6 <__fp_round+0x20>
    44be:	6f 5f       	subi	r22, 0xFF	; 255
    44c0:	7f 4f       	sbci	r23, 0xFF	; 255
    44c2:	8f 4f       	sbci	r24, 0xFF	; 255
    44c4:	9f 4f       	sbci	r25, 0xFF	; 255
    44c6:	08 95       	ret

000044c8 <__fp_sinus>:
    44c8:	ef 93       	push	r30
    44ca:	e0 ff       	sbrs	r30, 0
    44cc:	06 c0       	rjmp	.+12     	; 0x44da <__fp_sinus+0x12>
    44ce:	a2 ea       	ldi	r26, 0xA2	; 162
    44d0:	2a ed       	ldi	r18, 0xDA	; 218
    44d2:	3f e0       	ldi	r19, 0x0F	; 15
    44d4:	49 ec       	ldi	r20, 0xC9	; 201
    44d6:	5f eb       	ldi	r21, 0xBF	; 191
    44d8:	32 de       	rcall	.-924    	; 0x413e <__addsf3x>
    44da:	e5 df       	rcall	.-54     	; 0x44a6 <__fp_round>
    44dc:	0f 90       	pop	r0
    44de:	03 94       	inc	r0
    44e0:	01 fc       	sbrc	r0, 1
    44e2:	90 58       	subi	r25, 0x80	; 128
    44e4:	ea e5       	ldi	r30, 0x5A	; 90
    44e6:	f1 e0       	ldi	r31, 0x01	; 1
    44e8:	28 c1       	rjmp	.+592    	; 0x473a <__fp_powsodd>

000044ea <__fp_split3>:
    44ea:	57 fd       	sbrc	r21, 7
    44ec:	90 58       	subi	r25, 0x80	; 128
    44ee:	44 0f       	add	r20, r20
    44f0:	55 1f       	adc	r21, r21
    44f2:	59 f0       	breq	.+22     	; 0x450a <__fp_splitA+0x10>
    44f4:	5f 3f       	cpi	r21, 0xFF	; 255
    44f6:	71 f0       	breq	.+28     	; 0x4514 <__fp_splitA+0x1a>
    44f8:	47 95       	ror	r20

000044fa <__fp_splitA>:
    44fa:	88 0f       	add	r24, r24
    44fc:	97 fb       	bst	r25, 7
    44fe:	99 1f       	adc	r25, r25
    4500:	61 f0       	breq	.+24     	; 0x451a <__fp_splitA+0x20>
    4502:	9f 3f       	cpi	r25, 0xFF	; 255
    4504:	79 f0       	breq	.+30     	; 0x4524 <__fp_splitA+0x2a>
    4506:	87 95       	ror	r24
    4508:	08 95       	ret
    450a:	12 16       	cp	r1, r18
    450c:	13 06       	cpc	r1, r19
    450e:	14 06       	cpc	r1, r20
    4510:	55 1f       	adc	r21, r21
    4512:	f2 cf       	rjmp	.-28     	; 0x44f8 <__fp_split3+0xe>
    4514:	46 95       	lsr	r20
    4516:	f1 df       	rcall	.-30     	; 0x44fa <__fp_splitA>
    4518:	08 c0       	rjmp	.+16     	; 0x452a <__fp_splitA+0x30>
    451a:	16 16       	cp	r1, r22
    451c:	17 06       	cpc	r1, r23
    451e:	18 06       	cpc	r1, r24
    4520:	99 1f       	adc	r25, r25
    4522:	f1 cf       	rjmp	.-30     	; 0x4506 <__fp_splitA+0xc>
    4524:	86 95       	lsr	r24
    4526:	71 05       	cpc	r23, r1
    4528:	61 05       	cpc	r22, r1
    452a:	08 94       	sec
    452c:	08 95       	ret

0000452e <__fp_zero>:
    452e:	e8 94       	clt

00004530 <__fp_szero>:
    4530:	bb 27       	eor	r27, r27
    4532:	66 27       	eor	r22, r22
    4534:	77 27       	eor	r23, r23
    4536:	cb 01       	movw	r24, r22
    4538:	97 f9       	bld	r25, 7
    453a:	08 95       	ret

0000453c <__gesf2>:
    453c:	2c df       	rcall	.-424    	; 0x4396 <__fp_cmp>
    453e:	08 f4       	brcc	.+2      	; 0x4542 <__gesf2+0x6>
    4540:	8f ef       	ldi	r24, 0xFF	; 255
    4542:	08 95       	ret

00004544 <inverse>:
    4544:	9b 01       	movw	r18, r22
    4546:	ac 01       	movw	r20, r24
    4548:	60 e0       	ldi	r22, 0x00	; 0
    454a:	70 e0       	ldi	r23, 0x00	; 0
    454c:	80 e8       	ldi	r24, 0x80	; 128
    454e:	9f e3       	ldi	r25, 0x3F	; 63
    4550:	4c ce       	rjmp	.-872    	; 0x41ea <__divsf3>

00004552 <__mulsf3>:
    4552:	0b d0       	rcall	.+22     	; 0x456a <__mulsf3x>
    4554:	a8 cf       	rjmp	.-176    	; 0x44a6 <__fp_round>
    4556:	71 df       	rcall	.-286    	; 0x443a <__fp_pscA>
    4558:	28 f0       	brcs	.+10     	; 0x4564 <__mulsf3+0x12>
    455a:	76 df       	rcall	.-276    	; 0x4448 <__fp_pscB>
    455c:	18 f0       	brcs	.+6      	; 0x4564 <__mulsf3+0x12>
    455e:	95 23       	and	r25, r21
    4560:	09 f0       	breq	.+2      	; 0x4564 <__mulsf3+0x12>
    4562:	3d cf       	rjmp	.-390    	; 0x43de <__fp_inf>
    4564:	42 cf       	rjmp	.-380    	; 0x43ea <__fp_nan>
    4566:	11 24       	eor	r1, r1
    4568:	e3 cf       	rjmp	.-58     	; 0x4530 <__fp_szero>

0000456a <__mulsf3x>:
    456a:	bf df       	rcall	.-130    	; 0x44ea <__fp_split3>
    456c:	a0 f3       	brcs	.-24     	; 0x4556 <__mulsf3+0x4>

0000456e <__mulsf3_pse>:
    456e:	95 9f       	mul	r25, r21
    4570:	d1 f3       	breq	.-12     	; 0x4566 <__mulsf3+0x14>
    4572:	95 0f       	add	r25, r21
    4574:	50 e0       	ldi	r21, 0x00	; 0
    4576:	55 1f       	adc	r21, r21
    4578:	62 9f       	mul	r22, r18
    457a:	f0 01       	movw	r30, r0
    457c:	72 9f       	mul	r23, r18
    457e:	bb 27       	eor	r27, r27
    4580:	f0 0d       	add	r31, r0
    4582:	b1 1d       	adc	r27, r1
    4584:	63 9f       	mul	r22, r19
    4586:	aa 27       	eor	r26, r26
    4588:	f0 0d       	add	r31, r0
    458a:	b1 1d       	adc	r27, r1
    458c:	aa 1f       	adc	r26, r26
    458e:	64 9f       	mul	r22, r20
    4590:	66 27       	eor	r22, r22
    4592:	b0 0d       	add	r27, r0
    4594:	a1 1d       	adc	r26, r1
    4596:	66 1f       	adc	r22, r22
    4598:	82 9f       	mul	r24, r18
    459a:	22 27       	eor	r18, r18
    459c:	b0 0d       	add	r27, r0
    459e:	a1 1d       	adc	r26, r1
    45a0:	62 1f       	adc	r22, r18
    45a2:	73 9f       	mul	r23, r19
    45a4:	b0 0d       	add	r27, r0
    45a6:	a1 1d       	adc	r26, r1
    45a8:	62 1f       	adc	r22, r18
    45aa:	83 9f       	mul	r24, r19
    45ac:	a0 0d       	add	r26, r0
    45ae:	61 1d       	adc	r22, r1
    45b0:	22 1f       	adc	r18, r18
    45b2:	74 9f       	mul	r23, r20
    45b4:	33 27       	eor	r19, r19
    45b6:	a0 0d       	add	r26, r0
    45b8:	61 1d       	adc	r22, r1
    45ba:	23 1f       	adc	r18, r19
    45bc:	84 9f       	mul	r24, r20
    45be:	60 0d       	add	r22, r0
    45c0:	21 1d       	adc	r18, r1
    45c2:	82 2f       	mov	r24, r18
    45c4:	76 2f       	mov	r23, r22
    45c6:	6a 2f       	mov	r22, r26
    45c8:	11 24       	eor	r1, r1
    45ca:	9f 57       	subi	r25, 0x7F	; 127
    45cc:	50 40       	sbci	r21, 0x00	; 0
    45ce:	8a f0       	brmi	.+34     	; 0x45f2 <__mulsf3_pse+0x84>
    45d0:	e1 f0       	breq	.+56     	; 0x460a <__mulsf3_pse+0x9c>
    45d2:	88 23       	and	r24, r24
    45d4:	4a f0       	brmi	.+18     	; 0x45e8 <__mulsf3_pse+0x7a>
    45d6:	ee 0f       	add	r30, r30
    45d8:	ff 1f       	adc	r31, r31
    45da:	bb 1f       	adc	r27, r27
    45dc:	66 1f       	adc	r22, r22
    45de:	77 1f       	adc	r23, r23
    45e0:	88 1f       	adc	r24, r24
    45e2:	91 50       	subi	r25, 0x01	; 1
    45e4:	50 40       	sbci	r21, 0x00	; 0
    45e6:	a9 f7       	brne	.-22     	; 0x45d2 <__mulsf3_pse+0x64>
    45e8:	9e 3f       	cpi	r25, 0xFE	; 254
    45ea:	51 05       	cpc	r21, r1
    45ec:	70 f0       	brcs	.+28     	; 0x460a <__mulsf3_pse+0x9c>
    45ee:	f7 ce       	rjmp	.-530    	; 0x43de <__fp_inf>
    45f0:	9f cf       	rjmp	.-194    	; 0x4530 <__fp_szero>
    45f2:	5f 3f       	cpi	r21, 0xFF	; 255
    45f4:	ec f3       	brlt	.-6      	; 0x45f0 <__mulsf3_pse+0x82>
    45f6:	98 3e       	cpi	r25, 0xE8	; 232
    45f8:	dc f3       	brlt	.-10     	; 0x45f0 <__mulsf3_pse+0x82>
    45fa:	86 95       	lsr	r24
    45fc:	77 95       	ror	r23
    45fe:	67 95       	ror	r22
    4600:	b7 95       	ror	r27
    4602:	f7 95       	ror	r31
    4604:	e7 95       	ror	r30
    4606:	9f 5f       	subi	r25, 0xFF	; 255
    4608:	c1 f7       	brne	.-16     	; 0x45fa <__mulsf3_pse+0x8c>
    460a:	fe 2b       	or	r31, r30
    460c:	88 0f       	add	r24, r24
    460e:	91 1d       	adc	r25, r1
    4610:	96 95       	lsr	r25
    4612:	87 95       	ror	r24
    4614:	97 f9       	bld	r25, 7
    4616:	08 95       	ret

00004618 <pow>:
    4618:	fa 01       	movw	r30, r20
    461a:	ee 0f       	add	r30, r30
    461c:	ff 1f       	adc	r31, r31
    461e:	30 96       	adiw	r30, 0x00	; 0
    4620:	21 05       	cpc	r18, r1
    4622:	31 05       	cpc	r19, r1
    4624:	99 f1       	breq	.+102    	; 0x468c <pow+0x74>
    4626:	61 15       	cp	r22, r1
    4628:	71 05       	cpc	r23, r1
    462a:	61 f4       	brne	.+24     	; 0x4644 <pow+0x2c>
    462c:	80 38       	cpi	r24, 0x80	; 128
    462e:	bf e3       	ldi	r27, 0x3F	; 63
    4630:	9b 07       	cpc	r25, r27
    4632:	49 f1       	breq	.+82     	; 0x4686 <pow+0x6e>
    4634:	68 94       	set
    4636:	90 38       	cpi	r25, 0x80	; 128
    4638:	81 05       	cpc	r24, r1
    463a:	61 f0       	breq	.+24     	; 0x4654 <pow+0x3c>
    463c:	80 38       	cpi	r24, 0x80	; 128
    463e:	bf ef       	ldi	r27, 0xFF	; 255
    4640:	9b 07       	cpc	r25, r27
    4642:	41 f0       	breq	.+16     	; 0x4654 <pow+0x3c>
    4644:	99 23       	and	r25, r25
    4646:	42 f5       	brpl	.+80     	; 0x4698 <pow+0x80>
    4648:	ff 3f       	cpi	r31, 0xFF	; 255
    464a:	e1 05       	cpc	r30, r1
    464c:	31 05       	cpc	r19, r1
    464e:	21 05       	cpc	r18, r1
    4650:	11 f1       	breq	.+68     	; 0x4696 <pow+0x7e>
    4652:	e8 94       	clt
    4654:	08 94       	sec
    4656:	e7 95       	ror	r30
    4658:	d9 01       	movw	r26, r18
    465a:	aa 23       	and	r26, r26
    465c:	29 f4       	brne	.+10     	; 0x4668 <pow+0x50>
    465e:	ab 2f       	mov	r26, r27
    4660:	be 2f       	mov	r27, r30
    4662:	f8 5f       	subi	r31, 0xF8	; 248
    4664:	d0 f3       	brcs	.-12     	; 0x465a <pow+0x42>
    4666:	10 c0       	rjmp	.+32     	; 0x4688 <pow+0x70>
    4668:	ff 5f       	subi	r31, 0xFF	; 255
    466a:	70 f4       	brcc	.+28     	; 0x4688 <pow+0x70>
    466c:	a6 95       	lsr	r26
    466e:	e0 f7       	brcc	.-8      	; 0x4668 <pow+0x50>
    4670:	f7 39       	cpi	r31, 0x97	; 151
    4672:	50 f0       	brcs	.+20     	; 0x4688 <pow+0x70>
    4674:	19 f0       	breq	.+6      	; 0x467c <pow+0x64>
    4676:	ff 3a       	cpi	r31, 0xAF	; 175
    4678:	38 f4       	brcc	.+14     	; 0x4688 <pow+0x70>
    467a:	9f 77       	andi	r25, 0x7F	; 127
    467c:	9f 93       	push	r25
    467e:	0c d0       	rcall	.+24     	; 0x4698 <pow+0x80>
    4680:	0f 90       	pop	r0
    4682:	07 fc       	sbrc	r0, 7
    4684:	90 58       	subi	r25, 0x80	; 128
    4686:	08 95       	ret
    4688:	3e f0       	brts	.+14     	; 0x4698 <pow+0x80>
    468a:	af ce       	rjmp	.-674    	; 0x43ea <__fp_nan>
    468c:	60 e0       	ldi	r22, 0x00	; 0
    468e:	70 e0       	ldi	r23, 0x00	; 0
    4690:	80 e8       	ldi	r24, 0x80	; 128
    4692:	9f e3       	ldi	r25, 0x3F	; 63
    4694:	08 95       	ret
    4696:	4f e7       	ldi	r20, 0x7F	; 127
    4698:	9f 77       	andi	r25, 0x7F	; 127
    469a:	5f 93       	push	r21
    469c:	4f 93       	push	r20
    469e:	3f 93       	push	r19
    46a0:	2f 93       	push	r18
    46a2:	97 d0       	rcall	.+302    	; 0x47d2 <log>
    46a4:	2f 91       	pop	r18
    46a6:	3f 91       	pop	r19
    46a8:	4f 91       	pop	r20
    46aa:	5f 91       	pop	r21
    46ac:	52 df       	rcall	.-348    	; 0x4552 <__mulsf3>
    46ae:	0b c0       	rjmp	.+22     	; 0x46c6 <exp>

000046b0 <sin>:
    46b0:	9f 93       	push	r25
    46b2:	d2 de       	rcall	.-604    	; 0x4458 <__fp_rempio2>
    46b4:	0f 90       	pop	r0
    46b6:	07 fc       	sbrc	r0, 7
    46b8:	ee 5f       	subi	r30, 0xFE	; 254
    46ba:	06 cf       	rjmp	.-500    	; 0x44c8 <__fp_sinus>
    46bc:	19 f4       	brne	.+6      	; 0x46c4 <sin+0x14>
    46be:	0e f0       	brts	.+2      	; 0x46c2 <sin+0x12>
    46c0:	8e ce       	rjmp	.-740    	; 0x43de <__fp_inf>
    46c2:	35 cf       	rjmp	.-406    	; 0x452e <__fp_zero>
    46c4:	92 ce       	rjmp	.-732    	; 0x43ea <__fp_nan>

000046c6 <exp>:
    46c6:	19 df       	rcall	.-462    	; 0x44fa <__fp_splitA>
    46c8:	c8 f3       	brcs	.-14     	; 0x46bc <sin+0xc>
    46ca:	96 38       	cpi	r25, 0x86	; 134
    46cc:	c0 f7       	brcc	.-16     	; 0x46be <sin+0xe>
    46ce:	07 f8       	bld	r0, 7
    46d0:	0f 92       	push	r0
    46d2:	e8 94       	clt
    46d4:	2b e3       	ldi	r18, 0x3B	; 59
    46d6:	3a ea       	ldi	r19, 0xAA	; 170
    46d8:	48 eb       	ldi	r20, 0xB8	; 184
    46da:	5f e7       	ldi	r21, 0x7F	; 127
    46dc:	48 df       	rcall	.-368    	; 0x456e <__mulsf3_pse>
    46de:	0f 92       	push	r0
    46e0:	0f 92       	push	r0
    46e2:	0f 92       	push	r0
    46e4:	4d b7       	in	r20, 0x3d	; 61
    46e6:	5e b7       	in	r21, 0x3e	; 62
    46e8:	0f 92       	push	r0
    46ea:	b3 d0       	rcall	.+358    	; 0x4852 <modf>
    46ec:	e8 e7       	ldi	r30, 0x78	; 120
    46ee:	f1 e0       	ldi	r31, 0x01	; 1
    46f0:	7f de       	rcall	.-770    	; 0x43f0 <__fp_powser>
    46f2:	4f 91       	pop	r20
    46f4:	5f 91       	pop	r21
    46f6:	ef 91       	pop	r30
    46f8:	ff 91       	pop	r31
    46fa:	e5 95       	asr	r30
    46fc:	ee 1f       	adc	r30, r30
    46fe:	ff 1f       	adc	r31, r31
    4700:	49 f0       	breq	.+18     	; 0x4714 <exp+0x4e>
    4702:	fe 57       	subi	r31, 0x7E	; 126
    4704:	e0 68       	ori	r30, 0x80	; 128
    4706:	44 27       	eor	r20, r20
    4708:	ee 0f       	add	r30, r30
    470a:	44 1f       	adc	r20, r20
    470c:	fa 95       	dec	r31
    470e:	e1 f7       	brne	.-8      	; 0x4708 <exp+0x42>
    4710:	41 95       	neg	r20
    4712:	55 0b       	sbc	r21, r21
    4714:	25 d0       	rcall	.+74     	; 0x4760 <ldexp>
    4716:	0f 90       	pop	r0
    4718:	07 fe       	sbrs	r0, 7
    471a:	14 cf       	rjmp	.-472    	; 0x4544 <inverse>
    471c:	08 95       	ret

0000471e <__fp_mpack>:
    471e:	9f 3f       	cpi	r25, 0xFF	; 255
    4720:	31 f0       	breq	.+12     	; 0x472e <__fp_mpack_finite+0xc>

00004722 <__fp_mpack_finite>:
    4722:	91 50       	subi	r25, 0x01	; 1
    4724:	20 f4       	brcc	.+8      	; 0x472e <__fp_mpack_finite+0xc>
    4726:	87 95       	ror	r24
    4728:	77 95       	ror	r23
    472a:	67 95       	ror	r22
    472c:	b7 95       	ror	r27
    472e:	88 0f       	add	r24, r24
    4730:	91 1d       	adc	r25, r1
    4732:	96 95       	lsr	r25
    4734:	87 95       	ror	r24
    4736:	97 f9       	bld	r25, 7
    4738:	08 95       	ret

0000473a <__fp_powsodd>:
    473a:	9f 93       	push	r25
    473c:	8f 93       	push	r24
    473e:	7f 93       	push	r23
    4740:	6f 93       	push	r22
    4742:	ff 93       	push	r31
    4744:	ef 93       	push	r30
    4746:	9b 01       	movw	r18, r22
    4748:	ac 01       	movw	r20, r24
    474a:	03 df       	rcall	.-506    	; 0x4552 <__mulsf3>
    474c:	ef 91       	pop	r30
    474e:	ff 91       	pop	r31
    4750:	4f de       	rcall	.-866    	; 0x43f0 <__fp_powser>
    4752:	2f 91       	pop	r18
    4754:	3f 91       	pop	r19
    4756:	4f 91       	pop	r20
    4758:	5f 91       	pop	r21
    475a:	fb ce       	rjmp	.-522    	; 0x4552 <__mulsf3>
    475c:	40 ce       	rjmp	.-896    	; 0x43de <__fp_inf>
    475e:	df cf       	rjmp	.-66     	; 0x471e <__fp_mpack>

00004760 <ldexp>:
    4760:	cc de       	rcall	.-616    	; 0x44fa <__fp_splitA>
    4762:	e8 f3       	brcs	.-6      	; 0x475e <__fp_powsodd+0x24>
    4764:	99 23       	and	r25, r25
    4766:	d9 f3       	breq	.-10     	; 0x475e <__fp_powsodd+0x24>
    4768:	94 0f       	add	r25, r20
    476a:	51 1d       	adc	r21, r1
    476c:	bb f3       	brvs	.-18     	; 0x475c <__fp_powsodd+0x22>
    476e:	91 50       	subi	r25, 0x01	; 1
    4770:	50 40       	sbci	r21, 0x00	; 0
    4772:	94 f0       	brlt	.+36     	; 0x4798 <ldexp+0x38>
    4774:	59 f0       	breq	.+22     	; 0x478c <ldexp+0x2c>
    4776:	88 23       	and	r24, r24
    4778:	32 f0       	brmi	.+12     	; 0x4786 <ldexp+0x26>
    477a:	66 0f       	add	r22, r22
    477c:	77 1f       	adc	r23, r23
    477e:	88 1f       	adc	r24, r24
    4780:	91 50       	subi	r25, 0x01	; 1
    4782:	50 40       	sbci	r21, 0x00	; 0
    4784:	c1 f7       	brne	.-16     	; 0x4776 <ldexp+0x16>
    4786:	9e 3f       	cpi	r25, 0xFE	; 254
    4788:	51 05       	cpc	r21, r1
    478a:	44 f7       	brge	.-48     	; 0x475c <__fp_powsodd+0x22>
    478c:	88 0f       	add	r24, r24
    478e:	91 1d       	adc	r25, r1
    4790:	96 95       	lsr	r25
    4792:	87 95       	ror	r24
    4794:	97 f9       	bld	r25, 7
    4796:	08 95       	ret
    4798:	5f 3f       	cpi	r21, 0xFF	; 255
    479a:	ac f0       	brlt	.+42     	; 0x47c6 <ldexp+0x66>
    479c:	98 3e       	cpi	r25, 0xE8	; 232
    479e:	9c f0       	brlt	.+38     	; 0x47c6 <ldexp+0x66>
    47a0:	bb 27       	eor	r27, r27
    47a2:	86 95       	lsr	r24
    47a4:	77 95       	ror	r23
    47a6:	67 95       	ror	r22
    47a8:	b7 95       	ror	r27
    47aa:	08 f4       	brcc	.+2      	; 0x47ae <ldexp+0x4e>
    47ac:	b1 60       	ori	r27, 0x01	; 1
    47ae:	93 95       	inc	r25
    47b0:	c1 f7       	brne	.-16     	; 0x47a2 <ldexp+0x42>
    47b2:	bb 0f       	add	r27, r27
    47b4:	58 f7       	brcc	.-42     	; 0x478c <ldexp+0x2c>
    47b6:	11 f4       	brne	.+4      	; 0x47bc <ldexp+0x5c>
    47b8:	60 ff       	sbrs	r22, 0
    47ba:	e8 cf       	rjmp	.-48     	; 0x478c <ldexp+0x2c>
    47bc:	6f 5f       	subi	r22, 0xFF	; 255
    47be:	7f 4f       	sbci	r23, 0xFF	; 255
    47c0:	8f 4f       	sbci	r24, 0xFF	; 255
    47c2:	9f 4f       	sbci	r25, 0xFF	; 255
    47c4:	e3 cf       	rjmp	.-58     	; 0x478c <ldexp+0x2c>
    47c6:	b4 ce       	rjmp	.-664    	; 0x4530 <__fp_szero>
    47c8:	0e f0       	brts	.+2      	; 0x47cc <ldexp+0x6c>
    47ca:	a9 cf       	rjmp	.-174    	; 0x471e <__fp_mpack>
    47cc:	0e ce       	rjmp	.-996    	; 0x43ea <__fp_nan>
    47ce:	68 94       	set
    47d0:	06 ce       	rjmp	.-1012   	; 0x43de <__fp_inf>

000047d2 <log>:
    47d2:	93 de       	rcall	.-730    	; 0x44fa <__fp_splitA>
    47d4:	c8 f3       	brcs	.-14     	; 0x47c8 <ldexp+0x68>
    47d6:	99 23       	and	r25, r25
    47d8:	d1 f3       	breq	.-12     	; 0x47ce <ldexp+0x6e>
    47da:	c6 f3       	brts	.-16     	; 0x47cc <ldexp+0x6c>
    47dc:	df 93       	push	r29
    47de:	cf 93       	push	r28
    47e0:	1f 93       	push	r17
    47e2:	0f 93       	push	r16
    47e4:	ff 92       	push	r15
    47e6:	c9 2f       	mov	r28, r25
    47e8:	dd 27       	eor	r29, r29
    47ea:	88 23       	and	r24, r24
    47ec:	2a f0       	brmi	.+10     	; 0x47f8 <log+0x26>
    47ee:	21 97       	sbiw	r28, 0x01	; 1
    47f0:	66 0f       	add	r22, r22
    47f2:	77 1f       	adc	r23, r23
    47f4:	88 1f       	adc	r24, r24
    47f6:	da f7       	brpl	.-10     	; 0x47ee <log+0x1c>
    47f8:	20 e0       	ldi	r18, 0x00	; 0
    47fa:	30 e0       	ldi	r19, 0x00	; 0
    47fc:	40 e8       	ldi	r20, 0x80	; 128
    47fe:	5f eb       	ldi	r21, 0xBF	; 191
    4800:	9f e3       	ldi	r25, 0x3F	; 63
    4802:	88 39       	cpi	r24, 0x98	; 152
    4804:	20 f0       	brcs	.+8      	; 0x480e <log+0x3c>
    4806:	80 3e       	cpi	r24, 0xE0	; 224
    4808:	30 f0       	brcs	.+12     	; 0x4816 <log+0x44>
    480a:	21 96       	adiw	r28, 0x01	; 1
    480c:	8f 77       	andi	r24, 0x7F	; 127
    480e:	86 dc       	rcall	.-1780   	; 0x411c <__addsf3>
    4810:	e0 ea       	ldi	r30, 0xA0	; 160
    4812:	f1 e0       	ldi	r31, 0x01	; 1
    4814:	03 c0       	rjmp	.+6      	; 0x481c <log+0x4a>
    4816:	82 dc       	rcall	.-1788   	; 0x411c <__addsf3>
    4818:	ed ec       	ldi	r30, 0xCD	; 205
    481a:	f1 e0       	ldi	r31, 0x01	; 1
    481c:	e9 dd       	rcall	.-1070   	; 0x43f0 <__fp_powser>
    481e:	8b 01       	movw	r16, r22
    4820:	be 01       	movw	r22, r28
    4822:	ec 01       	movw	r28, r24
    4824:	fb 2e       	mov	r15, r27
    4826:	6f 57       	subi	r22, 0x7F	; 127
    4828:	71 09       	sbc	r23, r1
    482a:	75 95       	asr	r23
    482c:	77 1f       	adc	r23, r23
    482e:	88 0b       	sbc	r24, r24
    4830:	99 0b       	sbc	r25, r25
    4832:	76 dd       	rcall	.-1300   	; 0x4320 <__floatsisf>
    4834:	28 e1       	ldi	r18, 0x18	; 24
    4836:	32 e7       	ldi	r19, 0x72	; 114
    4838:	41 e3       	ldi	r20, 0x31	; 49
    483a:	5f e3       	ldi	r21, 0x3F	; 63
    483c:	96 de       	rcall	.-724    	; 0x456a <__mulsf3x>
    483e:	af 2d       	mov	r26, r15
    4840:	98 01       	movw	r18, r16
    4842:	ae 01       	movw	r20, r28
    4844:	ff 90       	pop	r15
    4846:	0f 91       	pop	r16
    4848:	1f 91       	pop	r17
    484a:	cf 91       	pop	r28
    484c:	df 91       	pop	r29
    484e:	77 dc       	rcall	.-1810   	; 0x413e <__addsf3x>
    4850:	2a ce       	rjmp	.-940    	; 0x44a6 <__fp_round>

00004852 <modf>:
    4852:	fa 01       	movw	r30, r20
    4854:	dc 01       	movw	r26, r24
    4856:	aa 0f       	add	r26, r26
    4858:	bb 1f       	adc	r27, r27
    485a:	9b 01       	movw	r18, r22
    485c:	ac 01       	movw	r20, r24
    485e:	bf 57       	subi	r27, 0x7F	; 127
    4860:	28 f4       	brcc	.+10     	; 0x486c <modf+0x1a>
    4862:	22 27       	eor	r18, r18
    4864:	33 27       	eor	r19, r19
    4866:	44 27       	eor	r20, r20
    4868:	50 78       	andi	r21, 0x80	; 128
    486a:	1f c0       	rjmp	.+62     	; 0x48aa <modf+0x58>
    486c:	b7 51       	subi	r27, 0x17	; 23
    486e:	88 f4       	brcc	.+34     	; 0x4892 <modf+0x40>
    4870:	ab 2f       	mov	r26, r27
    4872:	00 24       	eor	r0, r0
    4874:	46 95       	lsr	r20
    4876:	37 95       	ror	r19
    4878:	27 95       	ror	r18
    487a:	01 1c       	adc	r0, r1
    487c:	a3 95       	inc	r26
    487e:	d2 f3       	brmi	.-12     	; 0x4874 <modf+0x22>
    4880:	00 20       	and	r0, r0
    4882:	69 f0       	breq	.+26     	; 0x489e <modf+0x4c>
    4884:	22 0f       	add	r18, r18
    4886:	33 1f       	adc	r19, r19
    4888:	44 1f       	adc	r20, r20
    488a:	b3 95       	inc	r27
    488c:	da f3       	brmi	.-10     	; 0x4884 <modf+0x32>
    488e:	0d d0       	rcall	.+26     	; 0x48aa <modf+0x58>
    4890:	44 cc       	rjmp	.-1912   	; 0x411a <__subsf3>
    4892:	61 30       	cpi	r22, 0x01	; 1
    4894:	71 05       	cpc	r23, r1
    4896:	a0 e8       	ldi	r26, 0x80	; 128
    4898:	8a 07       	cpc	r24, r26
    489a:	b9 46       	sbci	r27, 0x69	; 105
    489c:	30 f4       	brcc	.+12     	; 0x48aa <modf+0x58>
    489e:	9b 01       	movw	r18, r22
    48a0:	ac 01       	movw	r20, r24
    48a2:	66 27       	eor	r22, r22
    48a4:	77 27       	eor	r23, r23
    48a6:	88 27       	eor	r24, r24
    48a8:	90 78       	andi	r25, 0x80	; 128
    48aa:	30 96       	adiw	r30, 0x00	; 0
    48ac:	21 f0       	breq	.+8      	; 0x48b6 <modf+0x64>
    48ae:	20 83       	st	Z, r18
    48b0:	31 83       	std	Z+1, r19	; 0x01
    48b2:	42 83       	std	Z+2, r20	; 0x02
    48b4:	53 83       	std	Z+3, r21	; 0x03
    48b6:	08 95       	ret

000048b8 <vfprintf>:
    48b8:	2f 92       	push	r2
    48ba:	3f 92       	push	r3
    48bc:	4f 92       	push	r4
    48be:	5f 92       	push	r5
    48c0:	6f 92       	push	r6
    48c2:	7f 92       	push	r7
    48c4:	8f 92       	push	r8
    48c6:	9f 92       	push	r9
    48c8:	af 92       	push	r10
    48ca:	bf 92       	push	r11
    48cc:	cf 92       	push	r12
    48ce:	df 92       	push	r13
    48d0:	ef 92       	push	r14
    48d2:	ff 92       	push	r15
    48d4:	0f 93       	push	r16
    48d6:	1f 93       	push	r17
    48d8:	cf 93       	push	r28
    48da:	df 93       	push	r29
    48dc:	cd b7       	in	r28, 0x3d	; 61
    48de:	de b7       	in	r29, 0x3e	; 62
    48e0:	63 97       	sbiw	r28, 0x13	; 19
    48e2:	0f b6       	in	r0, 0x3f	; 63
    48e4:	f8 94       	cli
    48e6:	de bf       	out	0x3e, r29	; 62
    48e8:	0f be       	out	0x3f, r0	; 63
    48ea:	cd bf       	out	0x3d, r28	; 61
    48ec:	6c 01       	movw	r12, r24
    48ee:	4b 01       	movw	r8, r22
    48f0:	2a 01       	movw	r4, r20
    48f2:	fc 01       	movw	r30, r24
    48f4:	17 82       	std	Z+7, r1	; 0x07
    48f6:	16 82       	std	Z+6, r1	; 0x06
    48f8:	83 81       	ldd	r24, Z+3	; 0x03
    48fa:	81 ff       	sbrs	r24, 1
    48fc:	29 c3       	rjmp	.+1618   	; 0x4f50 <vfprintf+0x698>
    48fe:	ae 01       	movw	r20, r28
    4900:	4f 5f       	subi	r20, 0xFF	; 255
    4902:	5f 4f       	sbci	r21, 0xFF	; 255
    4904:	3a 01       	movw	r6, r20
    4906:	f6 01       	movw	r30, r12
    4908:	93 81       	ldd	r25, Z+3	; 0x03
    490a:	f4 01       	movw	r30, r8
    490c:	93 fd       	sbrc	r25, 3
    490e:	85 91       	lpm	r24, Z+
    4910:	93 ff       	sbrs	r25, 3
    4912:	81 91       	ld	r24, Z+
    4914:	4f 01       	movw	r8, r30
    4916:	88 23       	and	r24, r24
    4918:	09 f4       	brne	.+2      	; 0x491c <vfprintf+0x64>
    491a:	16 c3       	rjmp	.+1580   	; 0x4f48 <vfprintf+0x690>
    491c:	85 32       	cpi	r24, 0x25	; 37
    491e:	39 f4       	brne	.+14     	; 0x492e <vfprintf+0x76>
    4920:	93 fd       	sbrc	r25, 3
    4922:	85 91       	lpm	r24, Z+
    4924:	93 ff       	sbrs	r25, 3
    4926:	81 91       	ld	r24, Z+
    4928:	4f 01       	movw	r8, r30
    492a:	85 32       	cpi	r24, 0x25	; 37
    492c:	31 f4       	brne	.+12     	; 0x493a <vfprintf+0x82>
    492e:	b6 01       	movw	r22, r12
    4930:	90 e0       	ldi	r25, 0x00	; 0
    4932:	90 d5       	rcall	.+2848   	; 0x5454 <fputc>
    4934:	52 01       	movw	r10, r4
    4936:	25 01       	movw	r4, r10
    4938:	e6 cf       	rjmp	.-52     	; 0x4906 <vfprintf+0x4e>
    493a:	10 e0       	ldi	r17, 0x00	; 0
    493c:	f1 2c       	mov	r15, r1
    493e:	20 e0       	ldi	r18, 0x00	; 0
    4940:	20 32       	cpi	r18, 0x20	; 32
    4942:	a0 f4       	brcc	.+40     	; 0x496c <vfprintf+0xb4>
    4944:	8b 32       	cpi	r24, 0x2B	; 43
    4946:	69 f0       	breq	.+26     	; 0x4962 <vfprintf+0xaa>
    4948:	30 f4       	brcc	.+12     	; 0x4956 <vfprintf+0x9e>
    494a:	80 32       	cpi	r24, 0x20	; 32
    494c:	59 f0       	breq	.+22     	; 0x4964 <vfprintf+0xac>
    494e:	83 32       	cpi	r24, 0x23	; 35
    4950:	69 f4       	brne	.+26     	; 0x496c <vfprintf+0xb4>
    4952:	20 61       	ori	r18, 0x10	; 16
    4954:	2c c0       	rjmp	.+88     	; 0x49ae <vfprintf+0xf6>
    4956:	8d 32       	cpi	r24, 0x2D	; 45
    4958:	39 f0       	breq	.+14     	; 0x4968 <vfprintf+0xb0>
    495a:	80 33       	cpi	r24, 0x30	; 48
    495c:	39 f4       	brne	.+14     	; 0x496c <vfprintf+0xb4>
    495e:	21 60       	ori	r18, 0x01	; 1
    4960:	26 c0       	rjmp	.+76     	; 0x49ae <vfprintf+0xf6>
    4962:	22 60       	ori	r18, 0x02	; 2
    4964:	24 60       	ori	r18, 0x04	; 4
    4966:	23 c0       	rjmp	.+70     	; 0x49ae <vfprintf+0xf6>
    4968:	28 60       	ori	r18, 0x08	; 8
    496a:	21 c0       	rjmp	.+66     	; 0x49ae <vfprintf+0xf6>
    496c:	27 fd       	sbrc	r18, 7
    496e:	27 c0       	rjmp	.+78     	; 0x49be <vfprintf+0x106>
    4970:	30 ed       	ldi	r19, 0xD0	; 208
    4972:	38 0f       	add	r19, r24
    4974:	3a 30       	cpi	r19, 0x0A	; 10
    4976:	78 f4       	brcc	.+30     	; 0x4996 <vfprintf+0xde>
    4978:	26 ff       	sbrs	r18, 6
    497a:	06 c0       	rjmp	.+12     	; 0x4988 <vfprintf+0xd0>
    497c:	fa e0       	ldi	r31, 0x0A	; 10
    497e:	1f 9f       	mul	r17, r31
    4980:	30 0d       	add	r19, r0
    4982:	11 24       	eor	r1, r1
    4984:	13 2f       	mov	r17, r19
    4986:	13 c0       	rjmp	.+38     	; 0x49ae <vfprintf+0xf6>
    4988:	4a e0       	ldi	r20, 0x0A	; 10
    498a:	f4 9e       	mul	r15, r20
    498c:	30 0d       	add	r19, r0
    498e:	11 24       	eor	r1, r1
    4990:	f3 2e       	mov	r15, r19
    4992:	20 62       	ori	r18, 0x20	; 32
    4994:	0c c0       	rjmp	.+24     	; 0x49ae <vfprintf+0xf6>
    4996:	8e 32       	cpi	r24, 0x2E	; 46
    4998:	21 f4       	brne	.+8      	; 0x49a2 <vfprintf+0xea>
    499a:	26 fd       	sbrc	r18, 6
    499c:	d5 c2       	rjmp	.+1450   	; 0x4f48 <vfprintf+0x690>
    499e:	20 64       	ori	r18, 0x40	; 64
    49a0:	06 c0       	rjmp	.+12     	; 0x49ae <vfprintf+0xf6>
    49a2:	8c 36       	cpi	r24, 0x6C	; 108
    49a4:	11 f4       	brne	.+4      	; 0x49aa <vfprintf+0xf2>
    49a6:	20 68       	ori	r18, 0x80	; 128
    49a8:	02 c0       	rjmp	.+4      	; 0x49ae <vfprintf+0xf6>
    49aa:	88 36       	cpi	r24, 0x68	; 104
    49ac:	41 f4       	brne	.+16     	; 0x49be <vfprintf+0x106>
    49ae:	f4 01       	movw	r30, r8
    49b0:	93 fd       	sbrc	r25, 3
    49b2:	85 91       	lpm	r24, Z+
    49b4:	93 ff       	sbrs	r25, 3
    49b6:	81 91       	ld	r24, Z+
    49b8:	4f 01       	movw	r8, r30
    49ba:	81 11       	cpse	r24, r1
    49bc:	c1 cf       	rjmp	.-126    	; 0x4940 <vfprintf+0x88>
    49be:	9b eb       	ldi	r25, 0xBB	; 187
    49c0:	98 0f       	add	r25, r24
    49c2:	93 30       	cpi	r25, 0x03	; 3
    49c4:	18 f4       	brcc	.+6      	; 0x49cc <vfprintf+0x114>
    49c6:	20 61       	ori	r18, 0x10	; 16
    49c8:	80 5e       	subi	r24, 0xE0	; 224
    49ca:	06 c0       	rjmp	.+12     	; 0x49d8 <vfprintf+0x120>
    49cc:	9b e9       	ldi	r25, 0x9B	; 155
    49ce:	98 0f       	add	r25, r24
    49d0:	93 30       	cpi	r25, 0x03	; 3
    49d2:	08 f0       	brcs	.+2      	; 0x49d6 <vfprintf+0x11e>
    49d4:	64 c1       	rjmp	.+712    	; 0x4c9e <vfprintf+0x3e6>
    49d6:	2f 7e       	andi	r18, 0xEF	; 239
    49d8:	26 ff       	sbrs	r18, 6
    49da:	16 e0       	ldi	r17, 0x06	; 6
    49dc:	2f 73       	andi	r18, 0x3F	; 63
    49de:	32 2e       	mov	r3, r18
    49e0:	85 36       	cpi	r24, 0x65	; 101
    49e2:	19 f4       	brne	.+6      	; 0x49ea <vfprintf+0x132>
    49e4:	20 64       	ori	r18, 0x40	; 64
    49e6:	32 2e       	mov	r3, r18
    49e8:	08 c0       	rjmp	.+16     	; 0x49fa <vfprintf+0x142>
    49ea:	86 36       	cpi	r24, 0x66	; 102
    49ec:	21 f4       	brne	.+8      	; 0x49f6 <vfprintf+0x13e>
    49ee:	f2 2f       	mov	r31, r18
    49f0:	f0 68       	ori	r31, 0x80	; 128
    49f2:	3f 2e       	mov	r3, r31
    49f4:	02 c0       	rjmp	.+4      	; 0x49fa <vfprintf+0x142>
    49f6:	11 11       	cpse	r17, r1
    49f8:	11 50       	subi	r17, 0x01	; 1
    49fa:	37 fe       	sbrs	r3, 7
    49fc:	07 c0       	rjmp	.+14     	; 0x4a0c <vfprintf+0x154>
    49fe:	1c 33       	cpi	r17, 0x3C	; 60
    4a00:	50 f4       	brcc	.+20     	; 0x4a16 <vfprintf+0x15e>
    4a02:	ee 24       	eor	r14, r14
    4a04:	e3 94       	inc	r14
    4a06:	e1 0e       	add	r14, r17
    4a08:	27 e0       	ldi	r18, 0x07	; 7
    4a0a:	0b c0       	rjmp	.+22     	; 0x4a22 <vfprintf+0x16a>
    4a0c:	18 30       	cpi	r17, 0x08	; 8
    4a0e:	38 f0       	brcs	.+14     	; 0x4a1e <vfprintf+0x166>
    4a10:	27 e0       	ldi	r18, 0x07	; 7
    4a12:	17 e0       	ldi	r17, 0x07	; 7
    4a14:	05 c0       	rjmp	.+10     	; 0x4a20 <vfprintf+0x168>
    4a16:	27 e0       	ldi	r18, 0x07	; 7
    4a18:	4c e3       	ldi	r20, 0x3C	; 60
    4a1a:	e4 2e       	mov	r14, r20
    4a1c:	02 c0       	rjmp	.+4      	; 0x4a22 <vfprintf+0x16a>
    4a1e:	21 2f       	mov	r18, r17
    4a20:	e1 2c       	mov	r14, r1
    4a22:	52 01       	movw	r10, r4
    4a24:	44 e0       	ldi	r20, 0x04	; 4
    4a26:	a4 0e       	add	r10, r20
    4a28:	b1 1c       	adc	r11, r1
    4a2a:	f2 01       	movw	r30, r4
    4a2c:	60 81       	ld	r22, Z
    4a2e:	71 81       	ldd	r23, Z+1	; 0x01
    4a30:	82 81       	ldd	r24, Z+2	; 0x02
    4a32:	93 81       	ldd	r25, Z+3	; 0x03
    4a34:	0e 2d       	mov	r16, r14
    4a36:	a3 01       	movw	r20, r6
    4a38:	1f d4       	rcall	.+2110   	; 0x5278 <__ftoa_engine>
    4a3a:	2c 01       	movw	r4, r24
    4a3c:	09 81       	ldd	r16, Y+1	; 0x01
    4a3e:	00 ff       	sbrs	r16, 0
    4a40:	02 c0       	rjmp	.+4      	; 0x4a46 <vfprintf+0x18e>
    4a42:	03 ff       	sbrs	r16, 3
    4a44:	07 c0       	rjmp	.+14     	; 0x4a54 <vfprintf+0x19c>
    4a46:	31 fc       	sbrc	r3, 1
    4a48:	08 c0       	rjmp	.+16     	; 0x4a5a <vfprintf+0x1a2>
    4a4a:	32 fe       	sbrs	r3, 2
    4a4c:	09 c0       	rjmp	.+18     	; 0x4a60 <vfprintf+0x1a8>
    4a4e:	30 e2       	ldi	r19, 0x20	; 32
    4a50:	23 2e       	mov	r2, r19
    4a52:	07 c0       	rjmp	.+14     	; 0x4a62 <vfprintf+0x1aa>
    4a54:	2d e2       	ldi	r18, 0x2D	; 45
    4a56:	22 2e       	mov	r2, r18
    4a58:	04 c0       	rjmp	.+8      	; 0x4a62 <vfprintf+0x1aa>
    4a5a:	9b e2       	ldi	r25, 0x2B	; 43
    4a5c:	29 2e       	mov	r2, r25
    4a5e:	01 c0       	rjmp	.+2      	; 0x4a62 <vfprintf+0x1aa>
    4a60:	21 2c       	mov	r2, r1
    4a62:	80 2f       	mov	r24, r16
    4a64:	8c 70       	andi	r24, 0x0C	; 12
    4a66:	19 f0       	breq	.+6      	; 0x4a6e <vfprintf+0x1b6>
    4a68:	21 10       	cpse	r2, r1
    4a6a:	51 c2       	rjmp	.+1186   	; 0x4f0e <vfprintf+0x656>
    4a6c:	8d c2       	rjmp	.+1306   	; 0x4f88 <vfprintf+0x6d0>
    4a6e:	37 fe       	sbrs	r3, 7
    4a70:	0f c0       	rjmp	.+30     	; 0x4a90 <vfprintf+0x1d8>
    4a72:	e4 0c       	add	r14, r4
    4a74:	04 ff       	sbrs	r16, 4
    4a76:	04 c0       	rjmp	.+8      	; 0x4a80 <vfprintf+0x1c8>
    4a78:	8a 81       	ldd	r24, Y+2	; 0x02
    4a7a:	81 33       	cpi	r24, 0x31	; 49
    4a7c:	09 f4       	brne	.+2      	; 0x4a80 <vfprintf+0x1c8>
    4a7e:	ea 94       	dec	r14
    4a80:	1e 14       	cp	r1, r14
    4a82:	74 f5       	brge	.+92     	; 0x4ae0 <vfprintf+0x228>
    4a84:	f8 e0       	ldi	r31, 0x08	; 8
    4a86:	fe 15       	cp	r31, r14
    4a88:	78 f5       	brcc	.+94     	; 0x4ae8 <vfprintf+0x230>
    4a8a:	88 e0       	ldi	r24, 0x08	; 8
    4a8c:	e8 2e       	mov	r14, r24
    4a8e:	2c c0       	rjmp	.+88     	; 0x4ae8 <vfprintf+0x230>
    4a90:	36 fc       	sbrc	r3, 6
    4a92:	2a c0       	rjmp	.+84     	; 0x4ae8 <vfprintf+0x230>
    4a94:	81 2f       	mov	r24, r17
    4a96:	90 e0       	ldi	r25, 0x00	; 0
    4a98:	84 15       	cp	r24, r4
    4a9a:	95 05       	cpc	r25, r5
    4a9c:	9c f0       	brlt	.+38     	; 0x4ac4 <vfprintf+0x20c>
    4a9e:	2c ef       	ldi	r18, 0xFC	; 252
    4aa0:	42 16       	cp	r4, r18
    4aa2:	2f ef       	ldi	r18, 0xFF	; 255
    4aa4:	52 06       	cpc	r5, r18
    4aa6:	74 f0       	brlt	.+28     	; 0x4ac4 <vfprintf+0x20c>
    4aa8:	43 2d       	mov	r20, r3
    4aaa:	40 68       	ori	r20, 0x80	; 128
    4aac:	34 2e       	mov	r3, r20
    4aae:	0a c0       	rjmp	.+20     	; 0x4ac4 <vfprintf+0x20c>
    4ab0:	e2 e0       	ldi	r30, 0x02	; 2
    4ab2:	f0 e0       	ldi	r31, 0x00	; 0
    4ab4:	ec 0f       	add	r30, r28
    4ab6:	fd 1f       	adc	r31, r29
    4ab8:	e1 0f       	add	r30, r17
    4aba:	f1 1d       	adc	r31, r1
    4abc:	80 81       	ld	r24, Z
    4abe:	80 33       	cpi	r24, 0x30	; 48
    4ac0:	19 f4       	brne	.+6      	; 0x4ac8 <vfprintf+0x210>
    4ac2:	11 50       	subi	r17, 0x01	; 1
    4ac4:	11 11       	cpse	r17, r1
    4ac6:	f4 cf       	rjmp	.-24     	; 0x4ab0 <vfprintf+0x1f8>
    4ac8:	37 fe       	sbrs	r3, 7
    4aca:	0e c0       	rjmp	.+28     	; 0x4ae8 <vfprintf+0x230>
    4acc:	ee 24       	eor	r14, r14
    4ace:	e3 94       	inc	r14
    4ad0:	e1 0e       	add	r14, r17
    4ad2:	81 2f       	mov	r24, r17
    4ad4:	90 e0       	ldi	r25, 0x00	; 0
    4ad6:	48 16       	cp	r4, r24
    4ad8:	59 06       	cpc	r5, r25
    4ada:	2c f4       	brge	.+10     	; 0x4ae6 <vfprintf+0x22e>
    4adc:	14 19       	sub	r17, r4
    4ade:	04 c0       	rjmp	.+8      	; 0x4ae8 <vfprintf+0x230>
    4ae0:	ee 24       	eor	r14, r14
    4ae2:	e3 94       	inc	r14
    4ae4:	01 c0       	rjmp	.+2      	; 0x4ae8 <vfprintf+0x230>
    4ae6:	10 e0       	ldi	r17, 0x00	; 0
    4ae8:	37 fe       	sbrs	r3, 7
    4aea:	06 c0       	rjmp	.+12     	; 0x4af8 <vfprintf+0x240>
    4aec:	14 14       	cp	r1, r4
    4aee:	15 04       	cpc	r1, r5
    4af0:	34 f4       	brge	.+12     	; 0x4afe <vfprintf+0x246>
    4af2:	c2 01       	movw	r24, r4
    4af4:	01 96       	adiw	r24, 0x01	; 1
    4af6:	05 c0       	rjmp	.+10     	; 0x4b02 <vfprintf+0x24a>
    4af8:	85 e0       	ldi	r24, 0x05	; 5
    4afa:	90 e0       	ldi	r25, 0x00	; 0
    4afc:	02 c0       	rjmp	.+4      	; 0x4b02 <vfprintf+0x24a>
    4afe:	81 e0       	ldi	r24, 0x01	; 1
    4b00:	90 e0       	ldi	r25, 0x00	; 0
    4b02:	21 10       	cpse	r2, r1
    4b04:	01 96       	adiw	r24, 0x01	; 1
    4b06:	11 23       	and	r17, r17
    4b08:	31 f0       	breq	.+12     	; 0x4b16 <vfprintf+0x25e>
    4b0a:	21 2f       	mov	r18, r17
    4b0c:	30 e0       	ldi	r19, 0x00	; 0
    4b0e:	2f 5f       	subi	r18, 0xFF	; 255
    4b10:	3f 4f       	sbci	r19, 0xFF	; 255
    4b12:	82 0f       	add	r24, r18
    4b14:	93 1f       	adc	r25, r19
    4b16:	2f 2d       	mov	r18, r15
    4b18:	30 e0       	ldi	r19, 0x00	; 0
    4b1a:	82 17       	cp	r24, r18
    4b1c:	93 07       	cpc	r25, r19
    4b1e:	14 f4       	brge	.+4      	; 0x4b24 <vfprintf+0x26c>
    4b20:	f8 1a       	sub	r15, r24
    4b22:	01 c0       	rjmp	.+2      	; 0x4b26 <vfprintf+0x26e>
    4b24:	f1 2c       	mov	r15, r1
    4b26:	83 2d       	mov	r24, r3
    4b28:	89 70       	andi	r24, 0x09	; 9
    4b2a:	41 f4       	brne	.+16     	; 0x4b3c <vfprintf+0x284>
    4b2c:	ff 20       	and	r15, r15
    4b2e:	31 f0       	breq	.+12     	; 0x4b3c <vfprintf+0x284>
    4b30:	b6 01       	movw	r22, r12
    4b32:	80 e2       	ldi	r24, 0x20	; 32
    4b34:	90 e0       	ldi	r25, 0x00	; 0
    4b36:	8e d4       	rcall	.+2332   	; 0x5454 <fputc>
    4b38:	fa 94       	dec	r15
    4b3a:	f8 cf       	rjmp	.-16     	; 0x4b2c <vfprintf+0x274>
    4b3c:	22 20       	and	r2, r2
    4b3e:	21 f0       	breq	.+8      	; 0x4b48 <vfprintf+0x290>
    4b40:	b6 01       	movw	r22, r12
    4b42:	82 2d       	mov	r24, r2
    4b44:	90 e0       	ldi	r25, 0x00	; 0
    4b46:	86 d4       	rcall	.+2316   	; 0x5454 <fputc>
    4b48:	33 fc       	sbrc	r3, 3
    4b4a:	08 c0       	rjmp	.+16     	; 0x4b5c <vfprintf+0x2a4>
    4b4c:	ff 20       	and	r15, r15
    4b4e:	31 f0       	breq	.+12     	; 0x4b5c <vfprintf+0x2a4>
    4b50:	b6 01       	movw	r22, r12
    4b52:	80 e3       	ldi	r24, 0x30	; 48
    4b54:	90 e0       	ldi	r25, 0x00	; 0
    4b56:	7e d4       	rcall	.+2300   	; 0x5454 <fputc>
    4b58:	fa 94       	dec	r15
    4b5a:	f8 cf       	rjmp	.-16     	; 0x4b4c <vfprintf+0x294>
    4b5c:	37 fe       	sbrs	r3, 7
    4b5e:	58 c0       	rjmp	.+176    	; 0x4c10 <vfprintf+0x358>
    4b60:	94 2d       	mov	r25, r4
    4b62:	85 2d       	mov	r24, r5
    4b64:	57 fe       	sbrs	r5, 7
    4b66:	02 c0       	rjmp	.+4      	; 0x4b6c <vfprintf+0x2b4>
    4b68:	90 e0       	ldi	r25, 0x00	; 0
    4b6a:	80 e0       	ldi	r24, 0x00	; 0
    4b6c:	29 2e       	mov	r2, r25
    4b6e:	38 2e       	mov	r3, r24
    4b70:	20 e0       	ldi	r18, 0x00	; 0
    4b72:	30 e0       	ldi	r19, 0x00	; 0
    4b74:	a2 01       	movw	r20, r4
    4b76:	4e 19       	sub	r20, r14
    4b78:	51 09       	sbc	r21, r1
    4b7a:	5d 87       	std	Y+13, r21	; 0x0d
    4b7c:	4c 87       	std	Y+12, r20	; 0x0c
    4b7e:	a2 01       	movw	r20, r4
    4b80:	42 19       	sub	r20, r2
    4b82:	53 09       	sbc	r21, r3
    4b84:	5f 87       	std	Y+15, r21	; 0x0f
    4b86:	4e 87       	std	Y+14, r20	; 0x0e
    4b88:	61 2f       	mov	r22, r17
    4b8a:	70 e0       	ldi	r23, 0x00	; 0
    4b8c:	44 27       	eor	r20, r20
    4b8e:	55 27       	eor	r21, r21
    4b90:	46 1b       	sub	r20, r22
    4b92:	57 0b       	sbc	r21, r23
    4b94:	59 8b       	std	Y+17, r21	; 0x11
    4b96:	48 8b       	std	Y+16, r20	; 0x10
    4b98:	5f ef       	ldi	r21, 0xFF	; 255
    4b9a:	25 16       	cp	r2, r21
    4b9c:	35 06       	cpc	r3, r21
    4b9e:	41 f4       	brne	.+16     	; 0x4bb0 <vfprintf+0x2f8>
    4ba0:	b6 01       	movw	r22, r12
    4ba2:	8e e2       	ldi	r24, 0x2E	; 46
    4ba4:	90 e0       	ldi	r25, 0x00	; 0
    4ba6:	2a 8b       	std	Y+18, r18	; 0x12
    4ba8:	3b 8b       	std	Y+19, r19	; 0x13
    4baa:	54 d4       	rcall	.+2216   	; 0x5454 <fputc>
    4bac:	3b 89       	ldd	r19, Y+19	; 0x13
    4bae:	2a 89       	ldd	r18, Y+18	; 0x12
    4bb0:	42 14       	cp	r4, r2
    4bb2:	53 04       	cpc	r5, r3
    4bb4:	6c f0       	brlt	.+26     	; 0x4bd0 <vfprintf+0x318>
    4bb6:	4c 85       	ldd	r20, Y+12	; 0x0c
    4bb8:	5d 85       	ldd	r21, Y+13	; 0x0d
    4bba:	42 15       	cp	r20, r2
    4bbc:	53 05       	cpc	r21, r3
    4bbe:	44 f4       	brge	.+16     	; 0x4bd0 <vfprintf+0x318>
    4bc0:	ee 85       	ldd	r30, Y+14	; 0x0e
    4bc2:	ff 85       	ldd	r31, Y+15	; 0x0f
    4bc4:	e2 0f       	add	r30, r18
    4bc6:	f3 1f       	adc	r31, r19
    4bc8:	e6 0d       	add	r30, r6
    4bca:	f7 1d       	adc	r31, r7
    4bcc:	81 81       	ldd	r24, Z+1	; 0x01
    4bce:	01 c0       	rjmp	.+2      	; 0x4bd2 <vfprintf+0x31a>
    4bd0:	80 e3       	ldi	r24, 0x30	; 48
    4bd2:	51 e0       	ldi	r21, 0x01	; 1
    4bd4:	25 1a       	sub	r2, r21
    4bd6:	31 08       	sbc	r3, r1
    4bd8:	2f 5f       	subi	r18, 0xFF	; 255
    4bda:	3f 4f       	sbci	r19, 0xFF	; 255
    4bdc:	48 89       	ldd	r20, Y+16	; 0x10
    4bde:	59 89       	ldd	r21, Y+17	; 0x11
    4be0:	24 16       	cp	r2, r20
    4be2:	35 06       	cpc	r3, r21
    4be4:	44 f0       	brlt	.+16     	; 0x4bf6 <vfprintf+0x33e>
    4be6:	b6 01       	movw	r22, r12
    4be8:	90 e0       	ldi	r25, 0x00	; 0
    4bea:	2a 8b       	std	Y+18, r18	; 0x12
    4bec:	3b 8b       	std	Y+19, r19	; 0x13
    4bee:	32 d4       	rcall	.+2148   	; 0x5454 <fputc>
    4bf0:	2a 89       	ldd	r18, Y+18	; 0x12
    4bf2:	3b 89       	ldd	r19, Y+19	; 0x13
    4bf4:	d1 cf       	rjmp	.-94     	; 0x4b98 <vfprintf+0x2e0>
    4bf6:	24 14       	cp	r2, r4
    4bf8:	35 04       	cpc	r3, r5
    4bfa:	39 f4       	brne	.+14     	; 0x4c0a <vfprintf+0x352>
    4bfc:	9a 81       	ldd	r25, Y+2	; 0x02
    4bfe:	96 33       	cpi	r25, 0x36	; 54
    4c00:	18 f4       	brcc	.+6      	; 0x4c08 <vfprintf+0x350>
    4c02:	95 33       	cpi	r25, 0x35	; 53
    4c04:	11 f4       	brne	.+4      	; 0x4c0a <vfprintf+0x352>
    4c06:	04 ff       	sbrs	r16, 4
    4c08:	81 e3       	ldi	r24, 0x31	; 49
    4c0a:	b6 01       	movw	r22, r12
    4c0c:	90 e0       	ldi	r25, 0x00	; 0
    4c0e:	45 c0       	rjmp	.+138    	; 0x4c9a <vfprintf+0x3e2>
    4c10:	8a 81       	ldd	r24, Y+2	; 0x02
    4c12:	81 33       	cpi	r24, 0x31	; 49
    4c14:	09 f0       	breq	.+2      	; 0x4c18 <vfprintf+0x360>
    4c16:	0f 7e       	andi	r16, 0xEF	; 239
    4c18:	b6 01       	movw	r22, r12
    4c1a:	90 e0       	ldi	r25, 0x00	; 0
    4c1c:	1b d4       	rcall	.+2102   	; 0x5454 <fputc>
    4c1e:	11 11       	cpse	r17, r1
    4c20:	05 c0       	rjmp	.+10     	; 0x4c2c <vfprintf+0x374>
    4c22:	34 fc       	sbrc	r3, 4
    4c24:	16 c0       	rjmp	.+44     	; 0x4c52 <vfprintf+0x39a>
    4c26:	85 e6       	ldi	r24, 0x65	; 101
    4c28:	90 e0       	ldi	r25, 0x00	; 0
    4c2a:	15 c0       	rjmp	.+42     	; 0x4c56 <vfprintf+0x39e>
    4c2c:	b6 01       	movw	r22, r12
    4c2e:	8e e2       	ldi	r24, 0x2E	; 46
    4c30:	90 e0       	ldi	r25, 0x00	; 0
    4c32:	10 d4       	rcall	.+2080   	; 0x5454 <fputc>
    4c34:	82 e0       	ldi	r24, 0x02	; 2
    4c36:	ee 24       	eor	r14, r14
    4c38:	e3 94       	inc	r14
    4c3a:	e8 0e       	add	r14, r24
    4c3c:	f3 01       	movw	r30, r6
    4c3e:	e8 0f       	add	r30, r24
    4c40:	f1 1d       	adc	r31, r1
    4c42:	80 81       	ld	r24, Z
    4c44:	b6 01       	movw	r22, r12
    4c46:	90 e0       	ldi	r25, 0x00	; 0
    4c48:	05 d4       	rcall	.+2058   	; 0x5454 <fputc>
    4c4a:	11 50       	subi	r17, 0x01	; 1
    4c4c:	8e 2d       	mov	r24, r14
    4c4e:	99 f7       	brne	.-26     	; 0x4c36 <vfprintf+0x37e>
    4c50:	e8 cf       	rjmp	.-48     	; 0x4c22 <vfprintf+0x36a>
    4c52:	85 e4       	ldi	r24, 0x45	; 69
    4c54:	90 e0       	ldi	r25, 0x00	; 0
    4c56:	b6 01       	movw	r22, r12
    4c58:	fd d3       	rcall	.+2042   	; 0x5454 <fputc>
    4c5a:	57 fc       	sbrc	r5, 7
    4c5c:	05 c0       	rjmp	.+10     	; 0x4c68 <vfprintf+0x3b0>
    4c5e:	41 14       	cp	r4, r1
    4c60:	51 04       	cpc	r5, r1
    4c62:	39 f4       	brne	.+14     	; 0x4c72 <vfprintf+0x3ba>
    4c64:	04 ff       	sbrs	r16, 4
    4c66:	05 c0       	rjmp	.+10     	; 0x4c72 <vfprintf+0x3ba>
    4c68:	51 94       	neg	r5
    4c6a:	41 94       	neg	r4
    4c6c:	51 08       	sbc	r5, r1
    4c6e:	8d e2       	ldi	r24, 0x2D	; 45
    4c70:	01 c0       	rjmp	.+2      	; 0x4c74 <vfprintf+0x3bc>
    4c72:	8b e2       	ldi	r24, 0x2B	; 43
    4c74:	b6 01       	movw	r22, r12
    4c76:	90 e0       	ldi	r25, 0x00	; 0
    4c78:	ed d3       	rcall	.+2010   	; 0x5454 <fputc>
    4c7a:	80 e3       	ldi	r24, 0x30	; 48
    4c7c:	9a e0       	ldi	r25, 0x0A	; 10
    4c7e:	49 16       	cp	r4, r25
    4c80:	51 04       	cpc	r5, r1
    4c82:	2c f0       	brlt	.+10     	; 0x4c8e <vfprintf+0x3d6>
    4c84:	8f 5f       	subi	r24, 0xFF	; 255
    4c86:	5a e0       	ldi	r21, 0x0A	; 10
    4c88:	45 1a       	sub	r4, r21
    4c8a:	51 08       	sbc	r5, r1
    4c8c:	f7 cf       	rjmp	.-18     	; 0x4c7c <vfprintf+0x3c4>
    4c8e:	b6 01       	movw	r22, r12
    4c90:	90 e0       	ldi	r25, 0x00	; 0
    4c92:	e0 d3       	rcall	.+1984   	; 0x5454 <fputc>
    4c94:	b6 01       	movw	r22, r12
    4c96:	c2 01       	movw	r24, r4
    4c98:	c0 96       	adiw	r24, 0x30	; 48
    4c9a:	dc d3       	rcall	.+1976   	; 0x5454 <fputc>
    4c9c:	4c c1       	rjmp	.+664    	; 0x4f36 <vfprintf+0x67e>
    4c9e:	83 36       	cpi	r24, 0x63	; 99
    4ca0:	31 f0       	breq	.+12     	; 0x4cae <vfprintf+0x3f6>
    4ca2:	83 37       	cpi	r24, 0x73	; 115
    4ca4:	79 f0       	breq	.+30     	; 0x4cc4 <vfprintf+0x40c>
    4ca6:	83 35       	cpi	r24, 0x53	; 83
    4ca8:	09 f0       	breq	.+2      	; 0x4cac <vfprintf+0x3f4>
    4caa:	54 c0       	rjmp	.+168    	; 0x4d54 <vfprintf+0x49c>
    4cac:	20 c0       	rjmp	.+64     	; 0x4cee <vfprintf+0x436>
    4cae:	52 01       	movw	r10, r4
    4cb0:	e2 e0       	ldi	r30, 0x02	; 2
    4cb2:	ae 0e       	add	r10, r30
    4cb4:	b1 1c       	adc	r11, r1
    4cb6:	f2 01       	movw	r30, r4
    4cb8:	80 81       	ld	r24, Z
    4cba:	89 83       	std	Y+1, r24	; 0x01
    4cbc:	01 e0       	ldi	r16, 0x01	; 1
    4cbe:	10 e0       	ldi	r17, 0x00	; 0
    4cc0:	23 01       	movw	r4, r6
    4cc2:	13 c0       	rjmp	.+38     	; 0x4cea <vfprintf+0x432>
    4cc4:	52 01       	movw	r10, r4
    4cc6:	f2 e0       	ldi	r31, 0x02	; 2
    4cc8:	af 0e       	add	r10, r31
    4cca:	b1 1c       	adc	r11, r1
    4ccc:	f2 01       	movw	r30, r4
    4cce:	40 80       	ld	r4, Z
    4cd0:	51 80       	ldd	r5, Z+1	; 0x01
    4cd2:	26 ff       	sbrs	r18, 6
    4cd4:	03 c0       	rjmp	.+6      	; 0x4cdc <vfprintf+0x424>
    4cd6:	61 2f       	mov	r22, r17
    4cd8:	70 e0       	ldi	r23, 0x00	; 0
    4cda:	02 c0       	rjmp	.+4      	; 0x4ce0 <vfprintf+0x428>
    4cdc:	6f ef       	ldi	r22, 0xFF	; 255
    4cde:	7f ef       	ldi	r23, 0xFF	; 255
    4ce0:	c2 01       	movw	r24, r4
    4ce2:	2a 8b       	std	Y+18, r18	; 0x12
    4ce4:	ac d3       	rcall	.+1880   	; 0x543e <strnlen>
    4ce6:	8c 01       	movw	r16, r24
    4ce8:	2a 89       	ldd	r18, Y+18	; 0x12
    4cea:	2f 77       	andi	r18, 0x7F	; 127
    4cec:	14 c0       	rjmp	.+40     	; 0x4d16 <vfprintf+0x45e>
    4cee:	52 01       	movw	r10, r4
    4cf0:	f2 e0       	ldi	r31, 0x02	; 2
    4cf2:	af 0e       	add	r10, r31
    4cf4:	b1 1c       	adc	r11, r1
    4cf6:	f2 01       	movw	r30, r4
    4cf8:	40 80       	ld	r4, Z
    4cfa:	51 80       	ldd	r5, Z+1	; 0x01
    4cfc:	26 ff       	sbrs	r18, 6
    4cfe:	03 c0       	rjmp	.+6      	; 0x4d06 <vfprintf+0x44e>
    4d00:	61 2f       	mov	r22, r17
    4d02:	70 e0       	ldi	r23, 0x00	; 0
    4d04:	02 c0       	rjmp	.+4      	; 0x4d0a <vfprintf+0x452>
    4d06:	6f ef       	ldi	r22, 0xFF	; 255
    4d08:	7f ef       	ldi	r23, 0xFF	; 255
    4d0a:	c2 01       	movw	r24, r4
    4d0c:	2a 8b       	std	Y+18, r18	; 0x12
    4d0e:	8c d3       	rcall	.+1816   	; 0x5428 <strnlen_P>
    4d10:	8c 01       	movw	r16, r24
    4d12:	2a 89       	ldd	r18, Y+18	; 0x12
    4d14:	20 68       	ori	r18, 0x80	; 128
    4d16:	32 2e       	mov	r3, r18
    4d18:	23 fd       	sbrc	r18, 3
    4d1a:	18 c0       	rjmp	.+48     	; 0x4d4c <vfprintf+0x494>
    4d1c:	8f 2d       	mov	r24, r15
    4d1e:	90 e0       	ldi	r25, 0x00	; 0
    4d20:	08 17       	cp	r16, r24
    4d22:	19 07       	cpc	r17, r25
    4d24:	98 f4       	brcc	.+38     	; 0x4d4c <vfprintf+0x494>
    4d26:	b6 01       	movw	r22, r12
    4d28:	80 e2       	ldi	r24, 0x20	; 32
    4d2a:	90 e0       	ldi	r25, 0x00	; 0
    4d2c:	93 d3       	rcall	.+1830   	; 0x5454 <fputc>
    4d2e:	fa 94       	dec	r15
    4d30:	f5 cf       	rjmp	.-22     	; 0x4d1c <vfprintf+0x464>
    4d32:	f2 01       	movw	r30, r4
    4d34:	37 fc       	sbrc	r3, 7
    4d36:	85 91       	lpm	r24, Z+
    4d38:	37 fe       	sbrs	r3, 7
    4d3a:	81 91       	ld	r24, Z+
    4d3c:	2f 01       	movw	r4, r30
    4d3e:	b6 01       	movw	r22, r12
    4d40:	90 e0       	ldi	r25, 0x00	; 0
    4d42:	88 d3       	rcall	.+1808   	; 0x5454 <fputc>
    4d44:	f1 10       	cpse	r15, r1
    4d46:	fa 94       	dec	r15
    4d48:	01 50       	subi	r16, 0x01	; 1
    4d4a:	11 09       	sbc	r17, r1
    4d4c:	01 15       	cp	r16, r1
    4d4e:	11 05       	cpc	r17, r1
    4d50:	81 f7       	brne	.-32     	; 0x4d32 <vfprintf+0x47a>
    4d52:	f1 c0       	rjmp	.+482    	; 0x4f36 <vfprintf+0x67e>
    4d54:	84 36       	cpi	r24, 0x64	; 100
    4d56:	11 f0       	breq	.+4      	; 0x4d5c <vfprintf+0x4a4>
    4d58:	89 36       	cpi	r24, 0x69	; 105
    4d5a:	51 f5       	brne	.+84     	; 0x4db0 <vfprintf+0x4f8>
    4d5c:	52 01       	movw	r10, r4
    4d5e:	27 ff       	sbrs	r18, 7
    4d60:	09 c0       	rjmp	.+18     	; 0x4d74 <vfprintf+0x4bc>
    4d62:	f4 e0       	ldi	r31, 0x04	; 4
    4d64:	af 0e       	add	r10, r31
    4d66:	b1 1c       	adc	r11, r1
    4d68:	f2 01       	movw	r30, r4
    4d6a:	60 81       	ld	r22, Z
    4d6c:	71 81       	ldd	r23, Z+1	; 0x01
    4d6e:	82 81       	ldd	r24, Z+2	; 0x02
    4d70:	93 81       	ldd	r25, Z+3	; 0x03
    4d72:	0a c0       	rjmp	.+20     	; 0x4d88 <vfprintf+0x4d0>
    4d74:	f2 e0       	ldi	r31, 0x02	; 2
    4d76:	af 0e       	add	r10, r31
    4d78:	b1 1c       	adc	r11, r1
    4d7a:	f2 01       	movw	r30, r4
    4d7c:	60 81       	ld	r22, Z
    4d7e:	71 81       	ldd	r23, Z+1	; 0x01
    4d80:	07 2e       	mov	r0, r23
    4d82:	00 0c       	add	r0, r0
    4d84:	88 0b       	sbc	r24, r24
    4d86:	99 0b       	sbc	r25, r25
    4d88:	2f 76       	andi	r18, 0x6F	; 111
    4d8a:	32 2e       	mov	r3, r18
    4d8c:	97 ff       	sbrs	r25, 7
    4d8e:	09 c0       	rjmp	.+18     	; 0x4da2 <vfprintf+0x4ea>
    4d90:	90 95       	com	r25
    4d92:	80 95       	com	r24
    4d94:	70 95       	com	r23
    4d96:	61 95       	neg	r22
    4d98:	7f 4f       	sbci	r23, 0xFF	; 255
    4d9a:	8f 4f       	sbci	r24, 0xFF	; 255
    4d9c:	9f 4f       	sbci	r25, 0xFF	; 255
    4d9e:	20 68       	ori	r18, 0x80	; 128
    4da0:	32 2e       	mov	r3, r18
    4da2:	2a e0       	ldi	r18, 0x0A	; 10
    4da4:	30 e0       	ldi	r19, 0x00	; 0
    4da6:	a3 01       	movw	r20, r6
    4da8:	bc d3       	rcall	.+1912   	; 0x5522 <__ultoa_invert>
    4daa:	e8 2e       	mov	r14, r24
    4dac:	e6 18       	sub	r14, r6
    4dae:	3e c0       	rjmp	.+124    	; 0x4e2c <vfprintf+0x574>
    4db0:	02 2f       	mov	r16, r18
    4db2:	85 37       	cpi	r24, 0x75	; 117
    4db4:	21 f4       	brne	.+8      	; 0x4dbe <vfprintf+0x506>
    4db6:	0f 7e       	andi	r16, 0xEF	; 239
    4db8:	2a e0       	ldi	r18, 0x0A	; 10
    4dba:	30 e0       	ldi	r19, 0x00	; 0
    4dbc:	1d c0       	rjmp	.+58     	; 0x4df8 <vfprintf+0x540>
    4dbe:	09 7f       	andi	r16, 0xF9	; 249
    4dc0:	8f 36       	cpi	r24, 0x6F	; 111
    4dc2:	91 f0       	breq	.+36     	; 0x4de8 <vfprintf+0x530>
    4dc4:	18 f4       	brcc	.+6      	; 0x4dcc <vfprintf+0x514>
    4dc6:	88 35       	cpi	r24, 0x58	; 88
    4dc8:	59 f0       	breq	.+22     	; 0x4de0 <vfprintf+0x528>
    4dca:	be c0       	rjmp	.+380    	; 0x4f48 <vfprintf+0x690>
    4dcc:	80 37       	cpi	r24, 0x70	; 112
    4dce:	19 f0       	breq	.+6      	; 0x4dd6 <vfprintf+0x51e>
    4dd0:	88 37       	cpi	r24, 0x78	; 120
    4dd2:	11 f0       	breq	.+4      	; 0x4dd8 <vfprintf+0x520>
    4dd4:	b9 c0       	rjmp	.+370    	; 0x4f48 <vfprintf+0x690>
    4dd6:	00 61       	ori	r16, 0x10	; 16
    4dd8:	04 ff       	sbrs	r16, 4
    4dda:	09 c0       	rjmp	.+18     	; 0x4dee <vfprintf+0x536>
    4ddc:	04 60       	ori	r16, 0x04	; 4
    4dde:	07 c0       	rjmp	.+14     	; 0x4dee <vfprintf+0x536>
    4de0:	24 ff       	sbrs	r18, 4
    4de2:	08 c0       	rjmp	.+16     	; 0x4df4 <vfprintf+0x53c>
    4de4:	06 60       	ori	r16, 0x06	; 6
    4de6:	06 c0       	rjmp	.+12     	; 0x4df4 <vfprintf+0x53c>
    4de8:	28 e0       	ldi	r18, 0x08	; 8
    4dea:	30 e0       	ldi	r19, 0x00	; 0
    4dec:	05 c0       	rjmp	.+10     	; 0x4df8 <vfprintf+0x540>
    4dee:	20 e1       	ldi	r18, 0x10	; 16
    4df0:	30 e0       	ldi	r19, 0x00	; 0
    4df2:	02 c0       	rjmp	.+4      	; 0x4df8 <vfprintf+0x540>
    4df4:	20 e1       	ldi	r18, 0x10	; 16
    4df6:	32 e0       	ldi	r19, 0x02	; 2
    4df8:	52 01       	movw	r10, r4
    4dfa:	07 ff       	sbrs	r16, 7
    4dfc:	09 c0       	rjmp	.+18     	; 0x4e10 <vfprintf+0x558>
    4dfe:	f4 e0       	ldi	r31, 0x04	; 4
    4e00:	af 0e       	add	r10, r31
    4e02:	b1 1c       	adc	r11, r1
    4e04:	f2 01       	movw	r30, r4
    4e06:	60 81       	ld	r22, Z
    4e08:	71 81       	ldd	r23, Z+1	; 0x01
    4e0a:	82 81       	ldd	r24, Z+2	; 0x02
    4e0c:	93 81       	ldd	r25, Z+3	; 0x03
    4e0e:	08 c0       	rjmp	.+16     	; 0x4e20 <vfprintf+0x568>
    4e10:	f2 e0       	ldi	r31, 0x02	; 2
    4e12:	af 0e       	add	r10, r31
    4e14:	b1 1c       	adc	r11, r1
    4e16:	f2 01       	movw	r30, r4
    4e18:	60 81       	ld	r22, Z
    4e1a:	71 81       	ldd	r23, Z+1	; 0x01
    4e1c:	80 e0       	ldi	r24, 0x00	; 0
    4e1e:	90 e0       	ldi	r25, 0x00	; 0
    4e20:	a3 01       	movw	r20, r6
    4e22:	7f d3       	rcall	.+1790   	; 0x5522 <__ultoa_invert>
    4e24:	e8 2e       	mov	r14, r24
    4e26:	e6 18       	sub	r14, r6
    4e28:	0f 77       	andi	r16, 0x7F	; 127
    4e2a:	30 2e       	mov	r3, r16
    4e2c:	36 fe       	sbrs	r3, 6
    4e2e:	0b c0       	rjmp	.+22     	; 0x4e46 <vfprintf+0x58e>
    4e30:	33 2d       	mov	r19, r3
    4e32:	3e 7f       	andi	r19, 0xFE	; 254
    4e34:	e1 16       	cp	r14, r17
    4e36:	50 f4       	brcc	.+20     	; 0x4e4c <vfprintf+0x594>
    4e38:	34 fe       	sbrs	r3, 4
    4e3a:	0a c0       	rjmp	.+20     	; 0x4e50 <vfprintf+0x598>
    4e3c:	32 fc       	sbrc	r3, 2
    4e3e:	08 c0       	rjmp	.+16     	; 0x4e50 <vfprintf+0x598>
    4e40:	33 2d       	mov	r19, r3
    4e42:	3e 7e       	andi	r19, 0xEE	; 238
    4e44:	05 c0       	rjmp	.+10     	; 0x4e50 <vfprintf+0x598>
    4e46:	0e 2d       	mov	r16, r14
    4e48:	33 2d       	mov	r19, r3
    4e4a:	03 c0       	rjmp	.+6      	; 0x4e52 <vfprintf+0x59a>
    4e4c:	0e 2d       	mov	r16, r14
    4e4e:	01 c0       	rjmp	.+2      	; 0x4e52 <vfprintf+0x59a>
    4e50:	01 2f       	mov	r16, r17
    4e52:	34 ff       	sbrs	r19, 4
    4e54:	0c c0       	rjmp	.+24     	; 0x4e6e <vfprintf+0x5b6>
    4e56:	fe 01       	movw	r30, r28
    4e58:	ee 0d       	add	r30, r14
    4e5a:	f1 1d       	adc	r31, r1
    4e5c:	80 81       	ld	r24, Z
    4e5e:	80 33       	cpi	r24, 0x30	; 48
    4e60:	11 f4       	brne	.+4      	; 0x4e66 <vfprintf+0x5ae>
    4e62:	39 7e       	andi	r19, 0xE9	; 233
    4e64:	08 c0       	rjmp	.+16     	; 0x4e76 <vfprintf+0x5be>
    4e66:	32 ff       	sbrs	r19, 2
    4e68:	05 c0       	rjmp	.+10     	; 0x4e74 <vfprintf+0x5bc>
    4e6a:	0e 5f       	subi	r16, 0xFE	; 254
    4e6c:	04 c0       	rjmp	.+8      	; 0x4e76 <vfprintf+0x5be>
    4e6e:	83 2f       	mov	r24, r19
    4e70:	86 78       	andi	r24, 0x86	; 134
    4e72:	09 f0       	breq	.+2      	; 0x4e76 <vfprintf+0x5be>
    4e74:	0f 5f       	subi	r16, 0xFF	; 255
    4e76:	33 fd       	sbrc	r19, 3
    4e78:	12 c0       	rjmp	.+36     	; 0x4e9e <vfprintf+0x5e6>
    4e7a:	30 ff       	sbrs	r19, 0
    4e7c:	06 c0       	rjmp	.+12     	; 0x4e8a <vfprintf+0x5d2>
    4e7e:	1e 2d       	mov	r17, r14
    4e80:	0f 15       	cp	r16, r15
    4e82:	18 f4       	brcc	.+6      	; 0x4e8a <vfprintf+0x5d2>
    4e84:	1f 0d       	add	r17, r15
    4e86:	10 1b       	sub	r17, r16
    4e88:	0f 2d       	mov	r16, r15
    4e8a:	0f 15       	cp	r16, r15
    4e8c:	60 f4       	brcc	.+24     	; 0x4ea6 <vfprintf+0x5ee>
    4e8e:	b6 01       	movw	r22, r12
    4e90:	80 e2       	ldi	r24, 0x20	; 32
    4e92:	90 e0       	ldi	r25, 0x00	; 0
    4e94:	3b 8b       	std	Y+19, r19	; 0x13
    4e96:	de d2       	rcall	.+1468   	; 0x5454 <fputc>
    4e98:	0f 5f       	subi	r16, 0xFF	; 255
    4e9a:	3b 89       	ldd	r19, Y+19	; 0x13
    4e9c:	f6 cf       	rjmp	.-20     	; 0x4e8a <vfprintf+0x5d2>
    4e9e:	0f 15       	cp	r16, r15
    4ea0:	10 f4       	brcc	.+4      	; 0x4ea6 <vfprintf+0x5ee>
    4ea2:	f0 1a       	sub	r15, r16
    4ea4:	01 c0       	rjmp	.+2      	; 0x4ea8 <vfprintf+0x5f0>
    4ea6:	f1 2c       	mov	r15, r1
    4ea8:	34 ff       	sbrs	r19, 4
    4eaa:	11 c0       	rjmp	.+34     	; 0x4ece <vfprintf+0x616>
    4eac:	b6 01       	movw	r22, r12
    4eae:	80 e3       	ldi	r24, 0x30	; 48
    4eb0:	90 e0       	ldi	r25, 0x00	; 0
    4eb2:	3b 8b       	std	Y+19, r19	; 0x13
    4eb4:	cf d2       	rcall	.+1438   	; 0x5454 <fputc>
    4eb6:	3b 89       	ldd	r19, Y+19	; 0x13
    4eb8:	32 ff       	sbrs	r19, 2
    4eba:	16 c0       	rjmp	.+44     	; 0x4ee8 <vfprintf+0x630>
    4ebc:	31 fd       	sbrc	r19, 1
    4ebe:	03 c0       	rjmp	.+6      	; 0x4ec6 <vfprintf+0x60e>
    4ec0:	88 e7       	ldi	r24, 0x78	; 120
    4ec2:	90 e0       	ldi	r25, 0x00	; 0
    4ec4:	02 c0       	rjmp	.+4      	; 0x4eca <vfprintf+0x612>
    4ec6:	88 e5       	ldi	r24, 0x58	; 88
    4ec8:	90 e0       	ldi	r25, 0x00	; 0
    4eca:	b6 01       	movw	r22, r12
    4ecc:	0c c0       	rjmp	.+24     	; 0x4ee6 <vfprintf+0x62e>
    4ece:	83 2f       	mov	r24, r19
    4ed0:	86 78       	andi	r24, 0x86	; 134
    4ed2:	51 f0       	breq	.+20     	; 0x4ee8 <vfprintf+0x630>
    4ed4:	31 ff       	sbrs	r19, 1
    4ed6:	02 c0       	rjmp	.+4      	; 0x4edc <vfprintf+0x624>
    4ed8:	8b e2       	ldi	r24, 0x2B	; 43
    4eda:	01 c0       	rjmp	.+2      	; 0x4ede <vfprintf+0x626>
    4edc:	80 e2       	ldi	r24, 0x20	; 32
    4ede:	37 fd       	sbrc	r19, 7
    4ee0:	8d e2       	ldi	r24, 0x2D	; 45
    4ee2:	b6 01       	movw	r22, r12
    4ee4:	90 e0       	ldi	r25, 0x00	; 0
    4ee6:	b6 d2       	rcall	.+1388   	; 0x5454 <fputc>
    4ee8:	e1 16       	cp	r14, r17
    4eea:	30 f4       	brcc	.+12     	; 0x4ef8 <vfprintf+0x640>
    4eec:	b6 01       	movw	r22, r12
    4eee:	80 e3       	ldi	r24, 0x30	; 48
    4ef0:	90 e0       	ldi	r25, 0x00	; 0
    4ef2:	b0 d2       	rcall	.+1376   	; 0x5454 <fputc>
    4ef4:	11 50       	subi	r17, 0x01	; 1
    4ef6:	f8 cf       	rjmp	.-16     	; 0x4ee8 <vfprintf+0x630>
    4ef8:	ea 94       	dec	r14
    4efa:	f3 01       	movw	r30, r6
    4efc:	ee 0d       	add	r30, r14
    4efe:	f1 1d       	adc	r31, r1
    4f00:	80 81       	ld	r24, Z
    4f02:	b6 01       	movw	r22, r12
    4f04:	90 e0       	ldi	r25, 0x00	; 0
    4f06:	a6 d2       	rcall	.+1356   	; 0x5454 <fputc>
    4f08:	e1 10       	cpse	r14, r1
    4f0a:	f6 cf       	rjmp	.-20     	; 0x4ef8 <vfprintf+0x640>
    4f0c:	14 c0       	rjmp	.+40     	; 0x4f36 <vfprintf+0x67e>
    4f0e:	f4 e0       	ldi	r31, 0x04	; 4
    4f10:	ff 15       	cp	r31, r15
    4f12:	48 f5       	brcc	.+82     	; 0x4f66 <vfprintf+0x6ae>
    4f14:	84 e0       	ldi	r24, 0x04	; 4
    4f16:	f8 1a       	sub	r15, r24
    4f18:	33 fe       	sbrs	r3, 3
    4f1a:	1d c0       	rjmp	.+58     	; 0x4f56 <vfprintf+0x69e>
    4f1c:	21 10       	cpse	r2, r1
    4f1e:	24 c0       	rjmp	.+72     	; 0x4f68 <vfprintf+0x6b0>
    4f20:	03 ff       	sbrs	r16, 3
    4f22:	27 c0       	rjmp	.+78     	; 0x4f72 <vfprintf+0x6ba>
    4f24:	00 e1       	ldi	r16, 0x10	; 16
    4f26:	15 e0       	ldi	r17, 0x05	; 5
    4f28:	f3 2d       	mov	r31, r3
    4f2a:	f0 71       	andi	r31, 0x10	; 16
    4f2c:	3f 2e       	mov	r3, r31
    4f2e:	f8 01       	movw	r30, r16
    4f30:	84 91       	lpm	r24, Z
    4f32:	81 11       	cpse	r24, r1
    4f34:	21 c0       	rjmp	.+66     	; 0x4f78 <vfprintf+0x6c0>
    4f36:	ff 20       	and	r15, r15
    4f38:	09 f4       	brne	.+2      	; 0x4f3c <vfprintf+0x684>
    4f3a:	fd cc       	rjmp	.-1542   	; 0x4936 <vfprintf+0x7e>
    4f3c:	b6 01       	movw	r22, r12
    4f3e:	80 e2       	ldi	r24, 0x20	; 32
    4f40:	90 e0       	ldi	r25, 0x00	; 0
    4f42:	88 d2       	rcall	.+1296   	; 0x5454 <fputc>
    4f44:	fa 94       	dec	r15
    4f46:	f7 cf       	rjmp	.-18     	; 0x4f36 <vfprintf+0x67e>
    4f48:	f6 01       	movw	r30, r12
    4f4a:	86 81       	ldd	r24, Z+6	; 0x06
    4f4c:	97 81       	ldd	r25, Z+7	; 0x07
    4f4e:	23 c0       	rjmp	.+70     	; 0x4f96 <vfprintf+0x6de>
    4f50:	8f ef       	ldi	r24, 0xFF	; 255
    4f52:	9f ef       	ldi	r25, 0xFF	; 255
    4f54:	20 c0       	rjmp	.+64     	; 0x4f96 <vfprintf+0x6de>
    4f56:	b6 01       	movw	r22, r12
    4f58:	80 e2       	ldi	r24, 0x20	; 32
    4f5a:	90 e0       	ldi	r25, 0x00	; 0
    4f5c:	7b d2       	rcall	.+1270   	; 0x5454 <fputc>
    4f5e:	fa 94       	dec	r15
    4f60:	f1 10       	cpse	r15, r1
    4f62:	f9 cf       	rjmp	.-14     	; 0x4f56 <vfprintf+0x69e>
    4f64:	db cf       	rjmp	.-74     	; 0x4f1c <vfprintf+0x664>
    4f66:	f1 2c       	mov	r15, r1
    4f68:	b6 01       	movw	r22, r12
    4f6a:	82 2d       	mov	r24, r2
    4f6c:	90 e0       	ldi	r25, 0x00	; 0
    4f6e:	72 d2       	rcall	.+1252   	; 0x5454 <fputc>
    4f70:	d7 cf       	rjmp	.-82     	; 0x4f20 <vfprintf+0x668>
    4f72:	04 e1       	ldi	r16, 0x14	; 20
    4f74:	15 e0       	ldi	r17, 0x05	; 5
    4f76:	d8 cf       	rjmp	.-80     	; 0x4f28 <vfprintf+0x670>
    4f78:	31 10       	cpse	r3, r1
    4f7a:	80 52       	subi	r24, 0x20	; 32
    4f7c:	b6 01       	movw	r22, r12
    4f7e:	90 e0       	ldi	r25, 0x00	; 0
    4f80:	69 d2       	rcall	.+1234   	; 0x5454 <fputc>
    4f82:	0f 5f       	subi	r16, 0xFF	; 255
    4f84:	1f 4f       	sbci	r17, 0xFF	; 255
    4f86:	d3 cf       	rjmp	.-90     	; 0x4f2e <vfprintf+0x676>
    4f88:	23 e0       	ldi	r18, 0x03	; 3
    4f8a:	2f 15       	cp	r18, r15
    4f8c:	10 f4       	brcc	.+4      	; 0x4f92 <vfprintf+0x6da>
    4f8e:	83 e0       	ldi	r24, 0x03	; 3
    4f90:	c2 cf       	rjmp	.-124    	; 0x4f16 <vfprintf+0x65e>
    4f92:	f1 2c       	mov	r15, r1
    4f94:	c5 cf       	rjmp	.-118    	; 0x4f20 <vfprintf+0x668>
    4f96:	63 96       	adiw	r28, 0x13	; 19
    4f98:	0f b6       	in	r0, 0x3f	; 63
    4f9a:	f8 94       	cli
    4f9c:	de bf       	out	0x3e, r29	; 62
    4f9e:	0f be       	out	0x3f, r0	; 63
    4fa0:	cd bf       	out	0x3d, r28	; 61
    4fa2:	df 91       	pop	r29
    4fa4:	cf 91       	pop	r28
    4fa6:	1f 91       	pop	r17
    4fa8:	0f 91       	pop	r16
    4faa:	ff 90       	pop	r15
    4fac:	ef 90       	pop	r14
    4fae:	df 90       	pop	r13
    4fb0:	cf 90       	pop	r12
    4fb2:	bf 90       	pop	r11
    4fb4:	af 90       	pop	r10
    4fb6:	9f 90       	pop	r9
    4fb8:	8f 90       	pop	r8
    4fba:	7f 90       	pop	r7
    4fbc:	6f 90       	pop	r6
    4fbe:	5f 90       	pop	r5
    4fc0:	4f 90       	pop	r4
    4fc2:	3f 90       	pop	r3
    4fc4:	2f 90       	pop	r2
    4fc6:	08 95       	ret

00004fc8 <__udivmodsi4>:
    4fc8:	a1 e2       	ldi	r26, 0x21	; 33
    4fca:	1a 2e       	mov	r1, r26
    4fcc:	aa 1b       	sub	r26, r26
    4fce:	bb 1b       	sub	r27, r27
    4fd0:	fd 01       	movw	r30, r26
    4fd2:	0d c0       	rjmp	.+26     	; 0x4fee <__udivmodsi4_ep>

00004fd4 <__udivmodsi4_loop>:
    4fd4:	aa 1f       	adc	r26, r26
    4fd6:	bb 1f       	adc	r27, r27
    4fd8:	ee 1f       	adc	r30, r30
    4fda:	ff 1f       	adc	r31, r31
    4fdc:	a2 17       	cp	r26, r18
    4fde:	b3 07       	cpc	r27, r19
    4fe0:	e4 07       	cpc	r30, r20
    4fe2:	f5 07       	cpc	r31, r21
    4fe4:	20 f0       	brcs	.+8      	; 0x4fee <__udivmodsi4_ep>
    4fe6:	a2 1b       	sub	r26, r18
    4fe8:	b3 0b       	sbc	r27, r19
    4fea:	e4 0b       	sbc	r30, r20
    4fec:	f5 0b       	sbc	r31, r21

00004fee <__udivmodsi4_ep>:
    4fee:	66 1f       	adc	r22, r22
    4ff0:	77 1f       	adc	r23, r23
    4ff2:	88 1f       	adc	r24, r24
    4ff4:	99 1f       	adc	r25, r25
    4ff6:	1a 94       	dec	r1
    4ff8:	69 f7       	brne	.-38     	; 0x4fd4 <__udivmodsi4_loop>
    4ffa:	60 95       	com	r22
    4ffc:	70 95       	com	r23
    4ffe:	80 95       	com	r24
    5000:	90 95       	com	r25
    5002:	9b 01       	movw	r18, r22
    5004:	ac 01       	movw	r20, r24
    5006:	bd 01       	movw	r22, r26
    5008:	cf 01       	movw	r24, r30
    500a:	08 95       	ret

0000500c <__tablejump2__>:
    500c:	ee 0f       	add	r30, r30
    500e:	ff 1f       	adc	r31, r31
    5010:	00 24       	eor	r0, r0
    5012:	00 1c       	adc	r0, r0
    5014:	0b be       	out	0x3b, r0	; 59
    5016:	07 90       	elpm	r0, Z+
    5018:	f6 91       	elpm	r31, Z
    501a:	e0 2d       	mov	r30, r0
    501c:	09 94       	ijmp

0000501e <malloc>:
    501e:	cf 93       	push	r28
    5020:	df 93       	push	r29
    5022:	82 30       	cpi	r24, 0x02	; 2
    5024:	91 05       	cpc	r25, r1
    5026:	10 f4       	brcc	.+4      	; 0x502c <malloc+0xe>
    5028:	82 e0       	ldi	r24, 0x02	; 2
    502a:	90 e0       	ldi	r25, 0x00	; 0
    502c:	e0 91 5b 08 	lds	r30, 0x085B
    5030:	f0 91 5c 08 	lds	r31, 0x085C
    5034:	20 e0       	ldi	r18, 0x00	; 0
    5036:	30 e0       	ldi	r19, 0x00	; 0
    5038:	c0 e0       	ldi	r28, 0x00	; 0
    503a:	d0 e0       	ldi	r29, 0x00	; 0
    503c:	30 97       	sbiw	r30, 0x00	; 0
    503e:	11 f1       	breq	.+68     	; 0x5084 <malloc+0x66>
    5040:	40 81       	ld	r20, Z
    5042:	51 81       	ldd	r21, Z+1	; 0x01
    5044:	48 17       	cp	r20, r24
    5046:	59 07       	cpc	r21, r25
    5048:	c0 f0       	brcs	.+48     	; 0x507a <malloc+0x5c>
    504a:	48 17       	cp	r20, r24
    504c:	59 07       	cpc	r21, r25
    504e:	61 f4       	brne	.+24     	; 0x5068 <malloc+0x4a>
    5050:	82 81       	ldd	r24, Z+2	; 0x02
    5052:	93 81       	ldd	r25, Z+3	; 0x03
    5054:	20 97       	sbiw	r28, 0x00	; 0
    5056:	19 f0       	breq	.+6      	; 0x505e <malloc+0x40>
    5058:	9b 83       	std	Y+3, r25	; 0x03
    505a:	8a 83       	std	Y+2, r24	; 0x02
    505c:	2b c0       	rjmp	.+86     	; 0x50b4 <malloc+0x96>
    505e:	90 93 5c 08 	sts	0x085C, r25
    5062:	80 93 5b 08 	sts	0x085B, r24
    5066:	26 c0       	rjmp	.+76     	; 0x50b4 <malloc+0x96>
    5068:	21 15       	cp	r18, r1
    506a:	31 05       	cpc	r19, r1
    506c:	19 f0       	breq	.+6      	; 0x5074 <malloc+0x56>
    506e:	42 17       	cp	r20, r18
    5070:	53 07       	cpc	r21, r19
    5072:	18 f4       	brcc	.+6      	; 0x507a <malloc+0x5c>
    5074:	9a 01       	movw	r18, r20
    5076:	be 01       	movw	r22, r28
    5078:	df 01       	movw	r26, r30
    507a:	ef 01       	movw	r28, r30
    507c:	02 80       	ldd	r0, Z+2	; 0x02
    507e:	f3 81       	ldd	r31, Z+3	; 0x03
    5080:	e0 2d       	mov	r30, r0
    5082:	dc cf       	rjmp	.-72     	; 0x503c <malloc+0x1e>
    5084:	21 15       	cp	r18, r1
    5086:	31 05       	cpc	r19, r1
    5088:	09 f1       	breq	.+66     	; 0x50cc <malloc+0xae>
    508a:	28 1b       	sub	r18, r24
    508c:	39 0b       	sbc	r19, r25
    508e:	24 30       	cpi	r18, 0x04	; 4
    5090:	31 05       	cpc	r19, r1
    5092:	90 f4       	brcc	.+36     	; 0x50b8 <malloc+0x9a>
    5094:	12 96       	adiw	r26, 0x02	; 2
    5096:	8d 91       	ld	r24, X+
    5098:	9c 91       	ld	r25, X
    509a:	13 97       	sbiw	r26, 0x03	; 3
    509c:	61 15       	cp	r22, r1
    509e:	71 05       	cpc	r23, r1
    50a0:	21 f0       	breq	.+8      	; 0x50aa <malloc+0x8c>
    50a2:	fb 01       	movw	r30, r22
    50a4:	93 83       	std	Z+3, r25	; 0x03
    50a6:	82 83       	std	Z+2, r24	; 0x02
    50a8:	04 c0       	rjmp	.+8      	; 0x50b2 <malloc+0x94>
    50aa:	90 93 5c 08 	sts	0x085C, r25
    50ae:	80 93 5b 08 	sts	0x085B, r24
    50b2:	fd 01       	movw	r30, r26
    50b4:	32 96       	adiw	r30, 0x02	; 2
    50b6:	44 c0       	rjmp	.+136    	; 0x5140 <malloc+0x122>
    50b8:	fd 01       	movw	r30, r26
    50ba:	e2 0f       	add	r30, r18
    50bc:	f3 1f       	adc	r31, r19
    50be:	81 93       	st	Z+, r24
    50c0:	91 93       	st	Z+, r25
    50c2:	22 50       	subi	r18, 0x02	; 2
    50c4:	31 09       	sbc	r19, r1
    50c6:	2d 93       	st	X+, r18
    50c8:	3c 93       	st	X, r19
    50ca:	3a c0       	rjmp	.+116    	; 0x5140 <malloc+0x122>
    50cc:	20 91 59 08 	lds	r18, 0x0859
    50d0:	30 91 5a 08 	lds	r19, 0x085A
    50d4:	23 2b       	or	r18, r19
    50d6:	41 f4       	brne	.+16     	; 0x50e8 <malloc+0xca>
    50d8:	20 91 02 01 	lds	r18, 0x0102
    50dc:	30 91 03 01 	lds	r19, 0x0103
    50e0:	30 93 5a 08 	sts	0x085A, r19
    50e4:	20 93 59 08 	sts	0x0859, r18
    50e8:	20 91 00 01 	lds	r18, 0x0100
    50ec:	30 91 01 01 	lds	r19, 0x0101
    50f0:	21 15       	cp	r18, r1
    50f2:	31 05       	cpc	r19, r1
    50f4:	41 f4       	brne	.+16     	; 0x5106 <malloc+0xe8>
    50f6:	2d b7       	in	r18, 0x3d	; 61
    50f8:	3e b7       	in	r19, 0x3e	; 62
    50fa:	40 91 04 01 	lds	r20, 0x0104
    50fe:	50 91 05 01 	lds	r21, 0x0105
    5102:	24 1b       	sub	r18, r20
    5104:	35 0b       	sbc	r19, r21
    5106:	e0 91 59 08 	lds	r30, 0x0859
    510a:	f0 91 5a 08 	lds	r31, 0x085A
    510e:	e2 17       	cp	r30, r18
    5110:	f3 07       	cpc	r31, r19
    5112:	a0 f4       	brcc	.+40     	; 0x513c <malloc+0x11e>
    5114:	2e 1b       	sub	r18, r30
    5116:	3f 0b       	sbc	r19, r31
    5118:	28 17       	cp	r18, r24
    511a:	39 07       	cpc	r19, r25
    511c:	78 f0       	brcs	.+30     	; 0x513c <malloc+0x11e>
    511e:	ac 01       	movw	r20, r24
    5120:	4e 5f       	subi	r20, 0xFE	; 254
    5122:	5f 4f       	sbci	r21, 0xFF	; 255
    5124:	24 17       	cp	r18, r20
    5126:	35 07       	cpc	r19, r21
    5128:	48 f0       	brcs	.+18     	; 0x513c <malloc+0x11e>
    512a:	4e 0f       	add	r20, r30
    512c:	5f 1f       	adc	r21, r31
    512e:	50 93 5a 08 	sts	0x085A, r21
    5132:	40 93 59 08 	sts	0x0859, r20
    5136:	81 93       	st	Z+, r24
    5138:	91 93       	st	Z+, r25
    513a:	02 c0       	rjmp	.+4      	; 0x5140 <malloc+0x122>
    513c:	e0 e0       	ldi	r30, 0x00	; 0
    513e:	f0 e0       	ldi	r31, 0x00	; 0
    5140:	cf 01       	movw	r24, r30
    5142:	df 91       	pop	r29
    5144:	cf 91       	pop	r28
    5146:	08 95       	ret

00005148 <free>:
    5148:	0f 93       	push	r16
    514a:	1f 93       	push	r17
    514c:	cf 93       	push	r28
    514e:	df 93       	push	r29
    5150:	00 97       	sbiw	r24, 0x00	; 0
    5152:	09 f4       	brne	.+2      	; 0x5156 <free+0xe>
    5154:	8c c0       	rjmp	.+280    	; 0x526e <free+0x126>
    5156:	fc 01       	movw	r30, r24
    5158:	32 97       	sbiw	r30, 0x02	; 2
    515a:	13 82       	std	Z+3, r1	; 0x03
    515c:	12 82       	std	Z+2, r1	; 0x02
    515e:	00 91 5b 08 	lds	r16, 0x085B
    5162:	10 91 5c 08 	lds	r17, 0x085C
    5166:	01 15       	cp	r16, r1
    5168:	11 05       	cpc	r17, r1
    516a:	81 f4       	brne	.+32     	; 0x518c <free+0x44>
    516c:	20 81       	ld	r18, Z
    516e:	31 81       	ldd	r19, Z+1	; 0x01
    5170:	82 0f       	add	r24, r18
    5172:	93 1f       	adc	r25, r19
    5174:	20 91 59 08 	lds	r18, 0x0859
    5178:	30 91 5a 08 	lds	r19, 0x085A
    517c:	28 17       	cp	r18, r24
    517e:	39 07       	cpc	r19, r25
    5180:	79 f5       	brne	.+94     	; 0x51e0 <free+0x98>
    5182:	f0 93 5a 08 	sts	0x085A, r31
    5186:	e0 93 59 08 	sts	0x0859, r30
    518a:	71 c0       	rjmp	.+226    	; 0x526e <free+0x126>
    518c:	d8 01       	movw	r26, r16
    518e:	40 e0       	ldi	r20, 0x00	; 0
    5190:	50 e0       	ldi	r21, 0x00	; 0
    5192:	ae 17       	cp	r26, r30
    5194:	bf 07       	cpc	r27, r31
    5196:	50 f4       	brcc	.+20     	; 0x51ac <free+0x64>
    5198:	12 96       	adiw	r26, 0x02	; 2
    519a:	2d 91       	ld	r18, X+
    519c:	3c 91       	ld	r19, X
    519e:	13 97       	sbiw	r26, 0x03	; 3
    51a0:	ad 01       	movw	r20, r26
    51a2:	21 15       	cp	r18, r1
    51a4:	31 05       	cpc	r19, r1
    51a6:	09 f1       	breq	.+66     	; 0x51ea <free+0xa2>
    51a8:	d9 01       	movw	r26, r18
    51aa:	f3 cf       	rjmp	.-26     	; 0x5192 <free+0x4a>
    51ac:	9d 01       	movw	r18, r26
    51ae:	da 01       	movw	r26, r20
    51b0:	33 83       	std	Z+3, r19	; 0x03
    51b2:	22 83       	std	Z+2, r18	; 0x02
    51b4:	60 81       	ld	r22, Z
    51b6:	71 81       	ldd	r23, Z+1	; 0x01
    51b8:	86 0f       	add	r24, r22
    51ba:	97 1f       	adc	r25, r23
    51bc:	82 17       	cp	r24, r18
    51be:	93 07       	cpc	r25, r19
    51c0:	69 f4       	brne	.+26     	; 0x51dc <free+0x94>
    51c2:	ec 01       	movw	r28, r24
    51c4:	28 81       	ld	r18, Y
    51c6:	39 81       	ldd	r19, Y+1	; 0x01
    51c8:	26 0f       	add	r18, r22
    51ca:	37 1f       	adc	r19, r23
    51cc:	2e 5f       	subi	r18, 0xFE	; 254
    51ce:	3f 4f       	sbci	r19, 0xFF	; 255
    51d0:	31 83       	std	Z+1, r19	; 0x01
    51d2:	20 83       	st	Z, r18
    51d4:	8a 81       	ldd	r24, Y+2	; 0x02
    51d6:	9b 81       	ldd	r25, Y+3	; 0x03
    51d8:	93 83       	std	Z+3, r25	; 0x03
    51da:	82 83       	std	Z+2, r24	; 0x02
    51dc:	45 2b       	or	r20, r21
    51de:	29 f4       	brne	.+10     	; 0x51ea <free+0xa2>
    51e0:	f0 93 5c 08 	sts	0x085C, r31
    51e4:	e0 93 5b 08 	sts	0x085B, r30
    51e8:	42 c0       	rjmp	.+132    	; 0x526e <free+0x126>
    51ea:	13 96       	adiw	r26, 0x03	; 3
    51ec:	fc 93       	st	X, r31
    51ee:	ee 93       	st	-X, r30
    51f0:	12 97       	sbiw	r26, 0x02	; 2
    51f2:	ed 01       	movw	r28, r26
    51f4:	49 91       	ld	r20, Y+
    51f6:	59 91       	ld	r21, Y+
    51f8:	9e 01       	movw	r18, r28
    51fa:	24 0f       	add	r18, r20
    51fc:	35 1f       	adc	r19, r21
    51fe:	e2 17       	cp	r30, r18
    5200:	f3 07       	cpc	r31, r19
    5202:	71 f4       	brne	.+28     	; 0x5220 <free+0xd8>
    5204:	80 81       	ld	r24, Z
    5206:	91 81       	ldd	r25, Z+1	; 0x01
    5208:	84 0f       	add	r24, r20
    520a:	95 1f       	adc	r25, r21
    520c:	02 96       	adiw	r24, 0x02	; 2
    520e:	11 96       	adiw	r26, 0x01	; 1
    5210:	9c 93       	st	X, r25
    5212:	8e 93       	st	-X, r24
    5214:	82 81       	ldd	r24, Z+2	; 0x02
    5216:	93 81       	ldd	r25, Z+3	; 0x03
    5218:	13 96       	adiw	r26, 0x03	; 3
    521a:	9c 93       	st	X, r25
    521c:	8e 93       	st	-X, r24
    521e:	12 97       	sbiw	r26, 0x02	; 2
    5220:	e0 e0       	ldi	r30, 0x00	; 0
    5222:	f0 e0       	ldi	r31, 0x00	; 0
    5224:	d8 01       	movw	r26, r16
    5226:	12 96       	adiw	r26, 0x02	; 2
    5228:	8d 91       	ld	r24, X+
    522a:	9c 91       	ld	r25, X
    522c:	13 97       	sbiw	r26, 0x03	; 3
    522e:	00 97       	sbiw	r24, 0x00	; 0
    5230:	19 f0       	breq	.+6      	; 0x5238 <free+0xf0>
    5232:	f8 01       	movw	r30, r16
    5234:	8c 01       	movw	r16, r24
    5236:	f6 cf       	rjmp	.-20     	; 0x5224 <free+0xdc>
    5238:	8d 91       	ld	r24, X+
    523a:	9c 91       	ld	r25, X
    523c:	98 01       	movw	r18, r16
    523e:	2e 5f       	subi	r18, 0xFE	; 254
    5240:	3f 4f       	sbci	r19, 0xFF	; 255
    5242:	82 0f       	add	r24, r18
    5244:	93 1f       	adc	r25, r19
    5246:	20 91 59 08 	lds	r18, 0x0859
    524a:	30 91 5a 08 	lds	r19, 0x085A
    524e:	28 17       	cp	r18, r24
    5250:	39 07       	cpc	r19, r25
    5252:	69 f4       	brne	.+26     	; 0x526e <free+0x126>
    5254:	30 97       	sbiw	r30, 0x00	; 0
    5256:	29 f4       	brne	.+10     	; 0x5262 <free+0x11a>
    5258:	10 92 5c 08 	sts	0x085C, r1
    525c:	10 92 5b 08 	sts	0x085B, r1
    5260:	02 c0       	rjmp	.+4      	; 0x5266 <free+0x11e>
    5262:	13 82       	std	Z+3, r1	; 0x03
    5264:	12 82       	std	Z+2, r1	; 0x02
    5266:	10 93 5a 08 	sts	0x085A, r17
    526a:	00 93 59 08 	sts	0x0859, r16
    526e:	df 91       	pop	r29
    5270:	cf 91       	pop	r28
    5272:	1f 91       	pop	r17
    5274:	0f 91       	pop	r16
    5276:	08 95       	ret

00005278 <__ftoa_engine>:
    5278:	28 30       	cpi	r18, 0x08	; 8
    527a:	08 f0       	brcs	.+2      	; 0x527e <__ftoa_engine+0x6>
    527c:	27 e0       	ldi	r18, 0x07	; 7
    527e:	33 27       	eor	r19, r19
    5280:	da 01       	movw	r26, r20
    5282:	99 0f       	add	r25, r25
    5284:	31 1d       	adc	r19, r1
    5286:	87 fd       	sbrc	r24, 7
    5288:	91 60       	ori	r25, 0x01	; 1
    528a:	00 96       	adiw	r24, 0x00	; 0
    528c:	61 05       	cpc	r22, r1
    528e:	71 05       	cpc	r23, r1
    5290:	39 f4       	brne	.+14     	; 0x52a0 <__ftoa_engine+0x28>
    5292:	32 60       	ori	r19, 0x02	; 2
    5294:	2e 5f       	subi	r18, 0xFE	; 254
    5296:	3d 93       	st	X+, r19
    5298:	30 e3       	ldi	r19, 0x30	; 48
    529a:	2a 95       	dec	r18
    529c:	e1 f7       	brne	.-8      	; 0x5296 <__ftoa_engine+0x1e>
    529e:	08 95       	ret
    52a0:	9f 3f       	cpi	r25, 0xFF	; 255
    52a2:	30 f0       	brcs	.+12     	; 0x52b0 <__ftoa_engine+0x38>
    52a4:	80 38       	cpi	r24, 0x80	; 128
    52a6:	71 05       	cpc	r23, r1
    52a8:	61 05       	cpc	r22, r1
    52aa:	09 f0       	breq	.+2      	; 0x52ae <__ftoa_engine+0x36>
    52ac:	3c 5f       	subi	r19, 0xFC	; 252
    52ae:	3c 5f       	subi	r19, 0xFC	; 252
    52b0:	3d 93       	st	X+, r19
    52b2:	91 30       	cpi	r25, 0x01	; 1
    52b4:	08 f0       	brcs	.+2      	; 0x52b8 <__ftoa_engine+0x40>
    52b6:	80 68       	ori	r24, 0x80	; 128
    52b8:	91 1d       	adc	r25, r1
    52ba:	df 93       	push	r29
    52bc:	cf 93       	push	r28
    52be:	1f 93       	push	r17
    52c0:	0f 93       	push	r16
    52c2:	ff 92       	push	r15
    52c4:	ef 92       	push	r14
    52c6:	19 2f       	mov	r17, r25
    52c8:	98 7f       	andi	r25, 0xF8	; 248
    52ca:	96 95       	lsr	r25
    52cc:	e9 2f       	mov	r30, r25
    52ce:	96 95       	lsr	r25
    52d0:	96 95       	lsr	r25
    52d2:	e9 0f       	add	r30, r25
    52d4:	ff 27       	eor	r31, r31
    52d6:	ee 58       	subi	r30, 0x8E	; 142
    52d8:	fa 4f       	sbci	r31, 0xFA	; 250
    52da:	99 27       	eor	r25, r25
    52dc:	33 27       	eor	r19, r19
    52de:	ee 24       	eor	r14, r14
    52e0:	ff 24       	eor	r15, r15
    52e2:	a7 01       	movw	r20, r14
    52e4:	e7 01       	movw	r28, r14
    52e6:	05 90       	lpm	r0, Z+
    52e8:	08 94       	sec
    52ea:	07 94       	ror	r0
    52ec:	28 f4       	brcc	.+10     	; 0x52f8 <__ftoa_engine+0x80>
    52ee:	36 0f       	add	r19, r22
    52f0:	e7 1e       	adc	r14, r23
    52f2:	f8 1e       	adc	r15, r24
    52f4:	49 1f       	adc	r20, r25
    52f6:	51 1d       	adc	r21, r1
    52f8:	66 0f       	add	r22, r22
    52fa:	77 1f       	adc	r23, r23
    52fc:	88 1f       	adc	r24, r24
    52fe:	99 1f       	adc	r25, r25
    5300:	06 94       	lsr	r0
    5302:	a1 f7       	brne	.-24     	; 0x52ec <__ftoa_engine+0x74>
    5304:	05 90       	lpm	r0, Z+
    5306:	07 94       	ror	r0
    5308:	28 f4       	brcc	.+10     	; 0x5314 <__ftoa_engine+0x9c>
    530a:	e7 0e       	add	r14, r23
    530c:	f8 1e       	adc	r15, r24
    530e:	49 1f       	adc	r20, r25
    5310:	56 1f       	adc	r21, r22
    5312:	c1 1d       	adc	r28, r1
    5314:	77 0f       	add	r23, r23
    5316:	88 1f       	adc	r24, r24
    5318:	99 1f       	adc	r25, r25
    531a:	66 1f       	adc	r22, r22
    531c:	06 94       	lsr	r0
    531e:	a1 f7       	brne	.-24     	; 0x5308 <__ftoa_engine+0x90>
    5320:	05 90       	lpm	r0, Z+
    5322:	07 94       	ror	r0
    5324:	28 f4       	brcc	.+10     	; 0x5330 <__ftoa_engine+0xb8>
    5326:	f8 0e       	add	r15, r24
    5328:	49 1f       	adc	r20, r25
    532a:	56 1f       	adc	r21, r22
    532c:	c7 1f       	adc	r28, r23
    532e:	d1 1d       	adc	r29, r1
    5330:	88 0f       	add	r24, r24
    5332:	99 1f       	adc	r25, r25
    5334:	66 1f       	adc	r22, r22
    5336:	77 1f       	adc	r23, r23
    5338:	06 94       	lsr	r0
    533a:	a1 f7       	brne	.-24     	; 0x5324 <__ftoa_engine+0xac>
    533c:	05 90       	lpm	r0, Z+
    533e:	07 94       	ror	r0
    5340:	20 f4       	brcc	.+8      	; 0x534a <__ftoa_engine+0xd2>
    5342:	49 0f       	add	r20, r25
    5344:	56 1f       	adc	r21, r22
    5346:	c7 1f       	adc	r28, r23
    5348:	d8 1f       	adc	r29, r24
    534a:	99 0f       	add	r25, r25
    534c:	66 1f       	adc	r22, r22
    534e:	77 1f       	adc	r23, r23
    5350:	88 1f       	adc	r24, r24
    5352:	06 94       	lsr	r0
    5354:	a9 f7       	brne	.-22     	; 0x5340 <__ftoa_engine+0xc8>
    5356:	84 91       	lpm	r24, Z
    5358:	10 95       	com	r17
    535a:	17 70       	andi	r17, 0x07	; 7
    535c:	41 f0       	breq	.+16     	; 0x536e <__ftoa_engine+0xf6>
    535e:	d6 95       	lsr	r29
    5360:	c7 95       	ror	r28
    5362:	57 95       	ror	r21
    5364:	47 95       	ror	r20
    5366:	f7 94       	ror	r15
    5368:	e7 94       	ror	r14
    536a:	1a 95       	dec	r17
    536c:	c1 f7       	brne	.-16     	; 0x535e <__ftoa_engine+0xe6>
    536e:	e8 e1       	ldi	r30, 0x18	; 24
    5370:	f5 e0       	ldi	r31, 0x05	; 5
    5372:	68 94       	set
    5374:	15 90       	lpm	r1, Z+
    5376:	15 91       	lpm	r17, Z+
    5378:	35 91       	lpm	r19, Z+
    537a:	65 91       	lpm	r22, Z+
    537c:	95 91       	lpm	r25, Z+
    537e:	05 90       	lpm	r0, Z+
    5380:	7f e2       	ldi	r23, 0x2F	; 47
    5382:	73 95       	inc	r23
    5384:	e1 18       	sub	r14, r1
    5386:	f1 0a       	sbc	r15, r17
    5388:	43 0b       	sbc	r20, r19
    538a:	56 0b       	sbc	r21, r22
    538c:	c9 0b       	sbc	r28, r25
    538e:	d0 09       	sbc	r29, r0
    5390:	c0 f7       	brcc	.-16     	; 0x5382 <__ftoa_engine+0x10a>
    5392:	e1 0c       	add	r14, r1
    5394:	f1 1e       	adc	r15, r17
    5396:	43 1f       	adc	r20, r19
    5398:	56 1f       	adc	r21, r22
    539a:	c9 1f       	adc	r28, r25
    539c:	d0 1d       	adc	r29, r0
    539e:	7e f4       	brtc	.+30     	; 0x53be <__ftoa_engine+0x146>
    53a0:	70 33       	cpi	r23, 0x30	; 48
    53a2:	11 f4       	brne	.+4      	; 0x53a8 <__ftoa_engine+0x130>
    53a4:	8a 95       	dec	r24
    53a6:	e6 cf       	rjmp	.-52     	; 0x5374 <__ftoa_engine+0xfc>
    53a8:	e8 94       	clt
    53aa:	01 50       	subi	r16, 0x01	; 1
    53ac:	30 f0       	brcs	.+12     	; 0x53ba <__ftoa_engine+0x142>
    53ae:	08 0f       	add	r16, r24
    53b0:	0a f4       	brpl	.+2      	; 0x53b4 <__ftoa_engine+0x13c>
    53b2:	00 27       	eor	r16, r16
    53b4:	02 17       	cp	r16, r18
    53b6:	08 f4       	brcc	.+2      	; 0x53ba <__ftoa_engine+0x142>
    53b8:	20 2f       	mov	r18, r16
    53ba:	23 95       	inc	r18
    53bc:	02 2f       	mov	r16, r18
    53be:	7a 33       	cpi	r23, 0x3A	; 58
    53c0:	28 f0       	brcs	.+10     	; 0x53cc <__ftoa_engine+0x154>
    53c2:	79 e3       	ldi	r23, 0x39	; 57
    53c4:	7d 93       	st	X+, r23
    53c6:	2a 95       	dec	r18
    53c8:	e9 f7       	brne	.-6      	; 0x53c4 <__ftoa_engine+0x14c>
    53ca:	10 c0       	rjmp	.+32     	; 0x53ec <__ftoa_engine+0x174>
    53cc:	7d 93       	st	X+, r23
    53ce:	2a 95       	dec	r18
    53d0:	89 f6       	brne	.-94     	; 0x5374 <__ftoa_engine+0xfc>
    53d2:	06 94       	lsr	r0
    53d4:	97 95       	ror	r25
    53d6:	67 95       	ror	r22
    53d8:	37 95       	ror	r19
    53da:	17 95       	ror	r17
    53dc:	17 94       	ror	r1
    53de:	e1 18       	sub	r14, r1
    53e0:	f1 0a       	sbc	r15, r17
    53e2:	43 0b       	sbc	r20, r19
    53e4:	56 0b       	sbc	r21, r22
    53e6:	c9 0b       	sbc	r28, r25
    53e8:	d0 09       	sbc	r29, r0
    53ea:	98 f0       	brcs	.+38     	; 0x5412 <__ftoa_engine+0x19a>
    53ec:	23 95       	inc	r18
    53ee:	7e 91       	ld	r23, -X
    53f0:	73 95       	inc	r23
    53f2:	7a 33       	cpi	r23, 0x3A	; 58
    53f4:	08 f0       	brcs	.+2      	; 0x53f8 <__ftoa_engine+0x180>
    53f6:	70 e3       	ldi	r23, 0x30	; 48
    53f8:	7c 93       	st	X, r23
    53fa:	20 13       	cpse	r18, r16
    53fc:	b8 f7       	brcc	.-18     	; 0x53ec <__ftoa_engine+0x174>
    53fe:	7e 91       	ld	r23, -X
    5400:	70 61       	ori	r23, 0x10	; 16
    5402:	7d 93       	st	X+, r23
    5404:	30 f0       	brcs	.+12     	; 0x5412 <__ftoa_engine+0x19a>
    5406:	83 95       	inc	r24
    5408:	71 e3       	ldi	r23, 0x31	; 49
    540a:	7d 93       	st	X+, r23
    540c:	70 e3       	ldi	r23, 0x30	; 48
    540e:	2a 95       	dec	r18
    5410:	e1 f7       	brne	.-8      	; 0x540a <__ftoa_engine+0x192>
    5412:	11 24       	eor	r1, r1
    5414:	ef 90       	pop	r14
    5416:	ff 90       	pop	r15
    5418:	0f 91       	pop	r16
    541a:	1f 91       	pop	r17
    541c:	cf 91       	pop	r28
    541e:	df 91       	pop	r29
    5420:	99 27       	eor	r25, r25
    5422:	87 fd       	sbrc	r24, 7
    5424:	90 95       	com	r25
    5426:	08 95       	ret

00005428 <strnlen_P>:
    5428:	fc 01       	movw	r30, r24
    542a:	05 90       	lpm	r0, Z+
    542c:	61 50       	subi	r22, 0x01	; 1
    542e:	70 40       	sbci	r23, 0x00	; 0
    5430:	01 10       	cpse	r0, r1
    5432:	d8 f7       	brcc	.-10     	; 0x542a <strnlen_P+0x2>
    5434:	80 95       	com	r24
    5436:	90 95       	com	r25
    5438:	8e 0f       	add	r24, r30
    543a:	9f 1f       	adc	r25, r31
    543c:	08 95       	ret

0000543e <strnlen>:
    543e:	fc 01       	movw	r30, r24
    5440:	61 50       	subi	r22, 0x01	; 1
    5442:	70 40       	sbci	r23, 0x00	; 0
    5444:	01 90       	ld	r0, Z+
    5446:	01 10       	cpse	r0, r1
    5448:	d8 f7       	brcc	.-10     	; 0x5440 <strnlen+0x2>
    544a:	80 95       	com	r24
    544c:	90 95       	com	r25
    544e:	8e 0f       	add	r24, r30
    5450:	9f 1f       	adc	r25, r31
    5452:	08 95       	ret

00005454 <fputc>:
    5454:	0f 93       	push	r16
    5456:	1f 93       	push	r17
    5458:	cf 93       	push	r28
    545a:	df 93       	push	r29
    545c:	fb 01       	movw	r30, r22
    545e:	23 81       	ldd	r18, Z+3	; 0x03
    5460:	21 fd       	sbrc	r18, 1
    5462:	03 c0       	rjmp	.+6      	; 0x546a <fputc+0x16>
    5464:	8f ef       	ldi	r24, 0xFF	; 255
    5466:	9f ef       	ldi	r25, 0xFF	; 255
    5468:	28 c0       	rjmp	.+80     	; 0x54ba <fputc+0x66>
    546a:	22 ff       	sbrs	r18, 2
    546c:	16 c0       	rjmp	.+44     	; 0x549a <fputc+0x46>
    546e:	46 81       	ldd	r20, Z+6	; 0x06
    5470:	57 81       	ldd	r21, Z+7	; 0x07
    5472:	24 81       	ldd	r18, Z+4	; 0x04
    5474:	35 81       	ldd	r19, Z+5	; 0x05
    5476:	42 17       	cp	r20, r18
    5478:	53 07       	cpc	r21, r19
    547a:	44 f4       	brge	.+16     	; 0x548c <fputc+0x38>
    547c:	a0 81       	ld	r26, Z
    547e:	b1 81       	ldd	r27, Z+1	; 0x01
    5480:	9d 01       	movw	r18, r26
    5482:	2f 5f       	subi	r18, 0xFF	; 255
    5484:	3f 4f       	sbci	r19, 0xFF	; 255
    5486:	31 83       	std	Z+1, r19	; 0x01
    5488:	20 83       	st	Z, r18
    548a:	8c 93       	st	X, r24
    548c:	26 81       	ldd	r18, Z+6	; 0x06
    548e:	37 81       	ldd	r19, Z+7	; 0x07
    5490:	2f 5f       	subi	r18, 0xFF	; 255
    5492:	3f 4f       	sbci	r19, 0xFF	; 255
    5494:	37 83       	std	Z+7, r19	; 0x07
    5496:	26 83       	std	Z+6, r18	; 0x06
    5498:	10 c0       	rjmp	.+32     	; 0x54ba <fputc+0x66>
    549a:	eb 01       	movw	r28, r22
    549c:	09 2f       	mov	r16, r25
    549e:	18 2f       	mov	r17, r24
    54a0:	00 84       	ldd	r0, Z+8	; 0x08
    54a2:	f1 85       	ldd	r31, Z+9	; 0x09
    54a4:	e0 2d       	mov	r30, r0
    54a6:	09 95       	icall
    54a8:	89 2b       	or	r24, r25
    54aa:	e1 f6       	brne	.-72     	; 0x5464 <fputc+0x10>
    54ac:	8e 81       	ldd	r24, Y+6	; 0x06
    54ae:	9f 81       	ldd	r25, Y+7	; 0x07
    54b0:	01 96       	adiw	r24, 0x01	; 1
    54b2:	9f 83       	std	Y+7, r25	; 0x07
    54b4:	8e 83       	std	Y+6, r24	; 0x06
    54b6:	81 2f       	mov	r24, r17
    54b8:	90 2f       	mov	r25, r16
    54ba:	df 91       	pop	r29
    54bc:	cf 91       	pop	r28
    54be:	1f 91       	pop	r17
    54c0:	0f 91       	pop	r16
    54c2:	08 95       	ret

000054c4 <sprintf>:
    54c4:	0f 93       	push	r16
    54c6:	1f 93       	push	r17
    54c8:	cf 93       	push	r28
    54ca:	df 93       	push	r29
    54cc:	cd b7       	in	r28, 0x3d	; 61
    54ce:	de b7       	in	r29, 0x3e	; 62
    54d0:	2e 97       	sbiw	r28, 0x0e	; 14
    54d2:	0f b6       	in	r0, 0x3f	; 63
    54d4:	f8 94       	cli
    54d6:	de bf       	out	0x3e, r29	; 62
    54d8:	0f be       	out	0x3f, r0	; 63
    54da:	cd bf       	out	0x3d, r28	; 61
    54dc:	0d 89       	ldd	r16, Y+21	; 0x15
    54de:	1e 89       	ldd	r17, Y+22	; 0x16
    54e0:	86 e0       	ldi	r24, 0x06	; 6
    54e2:	8c 83       	std	Y+4, r24	; 0x04
    54e4:	1a 83       	std	Y+2, r17	; 0x02
    54e6:	09 83       	std	Y+1, r16	; 0x01
    54e8:	8f ef       	ldi	r24, 0xFF	; 255
    54ea:	9f e7       	ldi	r25, 0x7F	; 127
    54ec:	9e 83       	std	Y+6, r25	; 0x06
    54ee:	8d 83       	std	Y+5, r24	; 0x05
    54f0:	ae 01       	movw	r20, r28
    54f2:	47 5e       	subi	r20, 0xE7	; 231
    54f4:	5f 4f       	sbci	r21, 0xFF	; 255
    54f6:	6f 89       	ldd	r22, Y+23	; 0x17
    54f8:	78 8d       	ldd	r23, Y+24	; 0x18
    54fa:	ce 01       	movw	r24, r28
    54fc:	01 96       	adiw	r24, 0x01	; 1
    54fe:	dc d9       	rcall	.-3144   	; 0x48b8 <vfprintf>
    5500:	2f 81       	ldd	r18, Y+7	; 0x07
    5502:	38 85       	ldd	r19, Y+8	; 0x08
    5504:	f8 01       	movw	r30, r16
    5506:	e2 0f       	add	r30, r18
    5508:	f3 1f       	adc	r31, r19
    550a:	10 82       	st	Z, r1
    550c:	2e 96       	adiw	r28, 0x0e	; 14
    550e:	0f b6       	in	r0, 0x3f	; 63
    5510:	f8 94       	cli
    5512:	de bf       	out	0x3e, r29	; 62
    5514:	0f be       	out	0x3f, r0	; 63
    5516:	cd bf       	out	0x3d, r28	; 61
    5518:	df 91       	pop	r29
    551a:	cf 91       	pop	r28
    551c:	1f 91       	pop	r17
    551e:	0f 91       	pop	r16
    5520:	08 95       	ret

00005522 <__ultoa_invert>:
    5522:	fa 01       	movw	r30, r20
    5524:	aa 27       	eor	r26, r26
    5526:	28 30       	cpi	r18, 0x08	; 8
    5528:	51 f1       	breq	.+84     	; 0x557e <__ultoa_invert+0x5c>
    552a:	20 31       	cpi	r18, 0x10	; 16
    552c:	81 f1       	breq	.+96     	; 0x558e <__ultoa_invert+0x6c>
    552e:	e8 94       	clt
    5530:	6f 93       	push	r22
    5532:	6e 7f       	andi	r22, 0xFE	; 254
    5534:	6e 5f       	subi	r22, 0xFE	; 254
    5536:	7f 4f       	sbci	r23, 0xFF	; 255
    5538:	8f 4f       	sbci	r24, 0xFF	; 255
    553a:	9f 4f       	sbci	r25, 0xFF	; 255
    553c:	af 4f       	sbci	r26, 0xFF	; 255
    553e:	b1 e0       	ldi	r27, 0x01	; 1
    5540:	3e d0       	rcall	.+124    	; 0x55be <__ultoa_invert+0x9c>
    5542:	b4 e0       	ldi	r27, 0x04	; 4
    5544:	3c d0       	rcall	.+120    	; 0x55be <__ultoa_invert+0x9c>
    5546:	67 0f       	add	r22, r23
    5548:	78 1f       	adc	r23, r24
    554a:	89 1f       	adc	r24, r25
    554c:	9a 1f       	adc	r25, r26
    554e:	a1 1d       	adc	r26, r1
    5550:	68 0f       	add	r22, r24
    5552:	79 1f       	adc	r23, r25
    5554:	8a 1f       	adc	r24, r26
    5556:	91 1d       	adc	r25, r1
    5558:	a1 1d       	adc	r26, r1
    555a:	6a 0f       	add	r22, r26
    555c:	71 1d       	adc	r23, r1
    555e:	81 1d       	adc	r24, r1
    5560:	91 1d       	adc	r25, r1
    5562:	a1 1d       	adc	r26, r1
    5564:	20 d0       	rcall	.+64     	; 0x55a6 <__ultoa_invert+0x84>
    5566:	09 f4       	brne	.+2      	; 0x556a <__ultoa_invert+0x48>
    5568:	68 94       	set
    556a:	3f 91       	pop	r19
    556c:	2a e0       	ldi	r18, 0x0A	; 10
    556e:	26 9f       	mul	r18, r22
    5570:	11 24       	eor	r1, r1
    5572:	30 19       	sub	r19, r0
    5574:	30 5d       	subi	r19, 0xD0	; 208
    5576:	31 93       	st	Z+, r19
    5578:	de f6       	brtc	.-74     	; 0x5530 <__ultoa_invert+0xe>
    557a:	cf 01       	movw	r24, r30
    557c:	08 95       	ret
    557e:	46 2f       	mov	r20, r22
    5580:	47 70       	andi	r20, 0x07	; 7
    5582:	40 5d       	subi	r20, 0xD0	; 208
    5584:	41 93       	st	Z+, r20
    5586:	b3 e0       	ldi	r27, 0x03	; 3
    5588:	0f d0       	rcall	.+30     	; 0x55a8 <__ultoa_invert+0x86>
    558a:	c9 f7       	brne	.-14     	; 0x557e <__ultoa_invert+0x5c>
    558c:	f6 cf       	rjmp	.-20     	; 0x557a <__ultoa_invert+0x58>
    558e:	46 2f       	mov	r20, r22
    5590:	4f 70       	andi	r20, 0x0F	; 15
    5592:	40 5d       	subi	r20, 0xD0	; 208
    5594:	4a 33       	cpi	r20, 0x3A	; 58
    5596:	18 f0       	brcs	.+6      	; 0x559e <__ultoa_invert+0x7c>
    5598:	49 5d       	subi	r20, 0xD9	; 217
    559a:	31 fd       	sbrc	r19, 1
    559c:	40 52       	subi	r20, 0x20	; 32
    559e:	41 93       	st	Z+, r20
    55a0:	02 d0       	rcall	.+4      	; 0x55a6 <__ultoa_invert+0x84>
    55a2:	a9 f7       	brne	.-22     	; 0x558e <__ultoa_invert+0x6c>
    55a4:	ea cf       	rjmp	.-44     	; 0x557a <__ultoa_invert+0x58>
    55a6:	b4 e0       	ldi	r27, 0x04	; 4
    55a8:	a6 95       	lsr	r26
    55aa:	97 95       	ror	r25
    55ac:	87 95       	ror	r24
    55ae:	77 95       	ror	r23
    55b0:	67 95       	ror	r22
    55b2:	ba 95       	dec	r27
    55b4:	c9 f7       	brne	.-14     	; 0x55a8 <__ultoa_invert+0x86>
    55b6:	00 97       	sbiw	r24, 0x00	; 0
    55b8:	61 05       	cpc	r22, r1
    55ba:	71 05       	cpc	r23, r1
    55bc:	08 95       	ret
    55be:	9b 01       	movw	r18, r22
    55c0:	ac 01       	movw	r20, r24
    55c2:	0a 2e       	mov	r0, r26
    55c4:	06 94       	lsr	r0
    55c6:	57 95       	ror	r21
    55c8:	47 95       	ror	r20
    55ca:	37 95       	ror	r19
    55cc:	27 95       	ror	r18
    55ce:	ba 95       	dec	r27
    55d0:	c9 f7       	brne	.-14     	; 0x55c4 <__ultoa_invert+0xa2>
    55d2:	62 0f       	add	r22, r18
    55d4:	73 1f       	adc	r23, r19
    55d6:	84 1f       	adc	r24, r20
    55d8:	95 1f       	adc	r25, r21
    55da:	a0 1d       	adc	r26, r0
    55dc:	08 95       	ret

000055de <__do_global_dtors>:
    55de:	13 e0       	ldi	r17, 0x03	; 3
    55e0:	ca e0       	ldi	r28, 0x0A	; 10
    55e2:	d3 e0       	ldi	r29, 0x03	; 3
    55e4:	03 c0       	rjmp	.+6      	; 0x55ec <__do_global_dtors+0xe>
    55e6:	fe 01       	movw	r30, r28
    55e8:	11 dd       	rcall	.-1502   	; 0x500c <__tablejump2__>
    55ea:	21 96       	adiw	r28, 0x01	; 1
    55ec:	cb 30       	cpi	r28, 0x0B	; 11
    55ee:	d1 07       	cpc	r29, r17
    55f0:	d1 f7       	brne	.-12     	; 0x55e6 <__do_global_dtors+0x8>
    55f2:	f8 94       	cli

000055f4 <__stop_program>:
    55f4:	ff cf       	rjmp	.-2      	; 0x55f4 <__stop_program>
