
FWCP_MK3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000186  00800100  00004674  00004708  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004674  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000554  00800286  00800286  0000488e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000488e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000048ec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000428  00000000  00000000  0000492c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00009d43  00000000  00000000  00004d54  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001bf6  00000000  00000000  0000ea97  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000332e  00000000  00000000  0001068d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000fb0  00000000  00000000  000139bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001463  00000000  00000000  0001496c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000068bb  00000000  00000000  00015dcf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000458  00000000  00000000  0001c68a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	83 c2       	rjmp	.+1286   	; 0x508 <__dtors_end>
       2:	00 00       	nop
       4:	b7 c2       	rjmp	.+1390   	; 0x574 <__bad_interrupt>
       6:	00 00       	nop
       8:	b5 c2       	rjmp	.+1386   	; 0x574 <__bad_interrupt>
       a:	00 00       	nop
       c:	b3 c2       	rjmp	.+1382   	; 0x574 <__bad_interrupt>
       e:	00 00       	nop
      10:	b1 c2       	rjmp	.+1378   	; 0x574 <__bad_interrupt>
      12:	00 00       	nop
      14:	af c2       	rjmp	.+1374   	; 0x574 <__bad_interrupt>
      16:	00 00       	nop
      18:	ad c2       	rjmp	.+1370   	; 0x574 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	ab c2       	rjmp	.+1366   	; 0x574 <__bad_interrupt>
      1e:	00 00       	nop
      20:	a9 c2       	rjmp	.+1362   	; 0x574 <__bad_interrupt>
      22:	00 00       	nop
      24:	a7 c2       	rjmp	.+1358   	; 0x574 <__bad_interrupt>
      26:	00 00       	nop
      28:	a5 c2       	rjmp	.+1354   	; 0x574 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	0c 94 f9 0d 	jmp	0x1bf2	; 0x1bf2 <__vector_11>
      30:	a1 c2       	rjmp	.+1346   	; 0x574 <__bad_interrupt>
      32:	00 00       	nop
      34:	0c 94 15 0e 	jmp	0x1c2a	; 0x1c2a <__vector_13>
      38:	9d c2       	rjmp	.+1338   	; 0x574 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	9b c2       	rjmp	.+1334   	; 0x574 <__bad_interrupt>
      3e:	00 00       	nop
      40:	99 c2       	rjmp	.+1330   	; 0x574 <__bad_interrupt>
      42:	00 00       	nop
      44:	97 c2       	rjmp	.+1326   	; 0x574 <__bad_interrupt>
      46:	00 00       	nop
      48:	95 c2       	rjmp	.+1322   	; 0x574 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	93 c2       	rjmp	.+1318   	; 0x574 <__bad_interrupt>
      4e:	00 00       	nop
      50:	91 c2       	rjmp	.+1314   	; 0x574 <__bad_interrupt>
      52:	00 00       	nop
      54:	8f c2       	rjmp	.+1310   	; 0x574 <__bad_interrupt>
      56:	00 00       	nop
      58:	8d c2       	rjmp	.+1306   	; 0x574 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	8b c2       	rjmp	.+1302   	; 0x574 <__bad_interrupt>
      5e:	00 00       	nop
      60:	89 c2       	rjmp	.+1298   	; 0x574 <__bad_interrupt>
      62:	00 00       	nop
      64:	87 c2       	rjmp	.+1294   	; 0x574 <__bad_interrupt>
      66:	00 00       	nop
      68:	85 c2       	rjmp	.+1290   	; 0x574 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	83 c2       	rjmp	.+1286   	; 0x574 <__bad_interrupt>
      6e:	00 00       	nop
      70:	81 c2       	rjmp	.+1282   	; 0x574 <__bad_interrupt>
      72:	00 00       	nop
      74:	7f c2       	rjmp	.+1278   	; 0x574 <__bad_interrupt>
      76:	00 00       	nop
      78:	7d c2       	rjmp	.+1274   	; 0x574 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	7b c2       	rjmp	.+1270   	; 0x574 <__bad_interrupt>
      7e:	00 00       	nop
      80:	79 c2       	rjmp	.+1266   	; 0x574 <__bad_interrupt>
      82:	00 00       	nop
      84:	77 c2       	rjmp	.+1262   	; 0x574 <__bad_interrupt>
      86:	00 00       	nop
      88:	75 c2       	rjmp	.+1258   	; 0x574 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	35 08       	sbc	r3, r5
      8e:	37 08       	sbc	r3, r7
      90:	37 08       	sbc	r3, r7
      92:	37 08       	sbc	r3, r7
      94:	37 08       	sbc	r3, r7
      96:	37 08       	sbc	r3, r7
      98:	37 08       	sbc	r3, r7
      9a:	33 08       	sbc	r3, r3
      9c:	37 08       	sbc	r3, r7
      9e:	37 08       	sbc	r3, r7
      a0:	37 08       	sbc	r3, r7
      a2:	37 08       	sbc	r3, r7
      a4:	37 08       	sbc	r3, r7
      a6:	3a 08       	sbc	r3, r10
      a8:	39 08       	sbc	r3, r9
      aa:	23 08       	sbc	r2, r3
      ac:	25 08       	sbc	r2, r5
      ae:	27 08       	sbc	r2, r7
      b0:	29 08       	sbc	r2, r9
      b2:	2b 08       	sbc	r2, r11
      b4:	2d 08       	sbc	r2, r13
      b6:	2f 08       	sbc	r2, r15
      b8:	31 08       	sbc	r3, r1
      ba:	0b 13       	cpse	r16, r27
      bc:	31 13       	cpse	r19, r17
      be:	58 13       	cpse	r21, r24
      c0:	80 13       	cpse	r24, r16
      c2:	a7 13       	cpse	r26, r23
      c4:	d1 13       	cpse	r29, r17
      c6:	fa 13       	cpse	r31, r26
      c8:	24 14       	cp	r2, r4
      ca:	9b 14       	cp	r9, r11
      cc:	c5 14       	cp	r12, r5
      ce:	05 a8       	ldd	r0, Z+53	; 0x35
      d0:	4c cd       	rjmp	.-1384   	; 0xfffffb6a <__eeprom_end+0xff7efb6a>
      d2:	b2 d4       	rcall	.+2404   	; 0xa38 <_ZN7Display6analogEhhhh+0x104>
      d4:	4e b9       	out	0x0e, r20	; 14
      d6:	38 36       	cpi	r19, 0x68	; 104
      d8:	a9 02       	muls	r26, r25
      da:	0c 50       	subi	r16, 0x0C	; 12
      dc:	b9 91       	ld	r27, Y+
      de:	86 88       	ldd	r8, Z+22	; 0x16
      e0:	08 3c       	cpi	r16, 0xC8	; 200
      e2:	a6 aa       	std	Z+54, r10	; 0x36
      e4:	aa 2a       	or	r10, r26
      e6:	be 00       	.word	0x00be	; ????
      e8:	00 00       	nop
      ea:	80 3f       	cpi	r24, 0xF0	; 240

000000ec <__trampolines_end>:
      ec:	00 e0       	ldi	r16, 0x00	; 0
      ee:	f8 fc       	.word	0xfcf8	; ????
      f0:	fe 1e       	adc	r15, r30
      f2:	07 07       	cpc	r16, r23
      f4:	07 07       	cpc	r16, r23
      f6:	1e fe       	.word	0xfe1e	; ????
      f8:	fc f8       	.word	0xf8fc	; ????
      fa:	f0 00       	.word	0x00f0	; ????
      fc:	00 07       	cpc	r16, r16
      fe:	0f 3f       	cpi	r16, 0xFF	; 255
     100:	3f 7c       	andi	r19, 0xCF	; 207
     102:	70 70       	andi	r23, 0x00	; 0
     104:	70 70       	andi	r23, 0x00	; 0
     106:	7c 3f       	cpi	r23, 0xFC	; 252
     108:	1f 1f       	adc	r17, r31
     10a:	07 00       	.word	0x0007	; ????
     10c:	00 00       	nop
     10e:	00 06       	cpc	r0, r16
     110:	07 07       	cpc	r16, r23
     112:	ff ff       	.word	0xffff	; ????
     114:	ff ff       	.word	0xffff	; ????
	...
     122:	7f 7f       	andi	r23, 0xFF	; 255
     124:	7f 7f       	andi	r23, 0xFF	; 255
     126:	00 00       	nop
     128:	00 00       	nop
     12a:	00 00       	nop
     12c:	00 38       	cpi	r16, 0x80	; 128
     12e:	3c 3e       	cpi	r19, 0xEC	; 236
     130:	3e 0f       	add	r19, r30
     132:	07 07       	cpc	r16, r23
     134:	07 cf       	rjmp	.-498    	; 0xffffff44 <__eeprom_end+0xff7eff44>
     136:	ff fe       	.word	0xfeff	; ????
     138:	fe 38       	cpi	r31, 0x8E	; 142
     13a:	00 00       	nop
     13c:	00 40       	sbci	r16, 0x00	; 0
     13e:	40 60       	ori	r20, 0x00	; 0
     140:	70 78       	andi	r23, 0x80	; 128
     142:	7c 7e       	andi	r23, 0xEC	; 236
     144:	7f 77       	andi	r23, 0x7F	; 127
     146:	73 71       	andi	r23, 0x13	; 19
     148:	70 70       	andi	r23, 0x00	; 0
     14a:	00 00       	nop
     14c:	00 18       	sub	r0, r0
     14e:	1c 1e       	adc	r1, r28
     150:	1e 0f       	add	r17, r30
     152:	c7 c7       	rjmp	.+3982   	; 0x10e2 <_ZN7KompassC1Ev+0x1c>
     154:	e7 ff       	sbrs	r30, 7
     156:	fe be       	out	0x3e, r15	; 62
     158:	9c 00       	.word	0x009c	; ????
     15a:	00 00       	nop
     15c:	00 0c       	add	r0, r0
     15e:	1c 3c       	cpi	r17, 0xCC	; 204
     160:	3c 78       	andi	r19, 0x8C	; 140
     162:	70 70       	andi	r23, 0x00	; 0
     164:	70 79       	andi	r23, 0x90	; 144
     166:	7f 3f       	cpi	r23, 0xFF	; 255
     168:	1f 0f       	add	r17, r31
     16a:	00 00       	nop
     16c:	00 00       	nop
     16e:	80 c0       	rjmp	.+256    	; 0x270 <_ZL7font5x8+0x44>
     170:	e0 70       	andi	r30, 0x00	; 0
     172:	38 1c       	adc	r3, r8
     174:	1e ff       	.word	0xff1e	; ????
     176:	ff ff       	.word	0xffff	; ????
     178:	ff 00       	.word	0x00ff	; ????
     17a:	00 00       	nop
     17c:	06 07       	cpc	r16, r22
     17e:	07 07       	cpc	r16, r23
     180:	06 06       	cpc	r0, r22
     182:	06 06       	cpc	r0, r22
     184:	06 7f       	andi	r16, 0xF6	; 246
     186:	7f 7f       	andi	r23, 0xFF	; 255
     188:	7f 06       	cpc	r7, r31
     18a:	06 00       	.word	0x0006	; ????
     18c:	00 00       	nop
     18e:	00 00       	nop
     190:	f0 ff       	sbrs	r31, 0
     192:	ff ff       	.word	0xffff	; ????
     194:	e7 e7       	ldi	r30, 0x77	; 119
     196:	e7 e7       	ldi	r30, 0x77	; 119
     198:	c7 87       	std	Z+15, r28	; 0x0f
     19a:	00 00       	nop
     19c:	00 00       	nop
     19e:	38 78       	andi	r19, 0x88	; 136
     1a0:	71 70       	andi	r23, 0x01	; 1
     1a2:	70 70       	andi	r23, 0x00	; 0
     1a4:	70 70       	andi	r23, 0x00	; 0
     1a6:	39 3f       	cpi	r19, 0xF9	; 249
     1a8:	3f 1f       	adc	r19, r31
     1aa:	0f 00       	.word	0x000f	; ????
     1ac:	00 80       	ld	r0, Z
     1ae:	e0 f0       	brcs	.+56     	; 0x1e8 <__trampolines_end+0xfc>
     1b0:	f8 fc       	.word	0xfcf8	; ????
     1b2:	7f 7f       	andi	r23, 0xFF	; 255
     1b4:	6f 67       	ori	r22, 0x7F	; 127
     1b6:	e1 e1       	ldi	r30, 0x11	; 17
     1b8:	c0 80       	ld	r12, Z
     1ba:	00 00       	nop
     1bc:	00 0f       	add	r16, r16
     1be:	1f 3f       	cpi	r17, 0xFF	; 255
     1c0:	3f 78       	andi	r19, 0x8F	; 143
     1c2:	70 70       	andi	r23, 0x00	; 0
     1c4:	70 70       	andi	r23, 0x00	; 0
     1c6:	78 3f       	cpi	r23, 0xF8	; 248
     1c8:	3f 1f       	adc	r19, r31
     1ca:	0f 00       	.word	0x000f	; ????
     1cc:	00 07       	cpc	r16, r16
     1ce:	07 07       	cpc	r16, r23
     1d0:	07 07       	cpc	r16, r23
     1d2:	c7 e7       	ldi	r28, 0x77	; 119
     1d4:	f7 ff       	sbrs	r31, 7
     1d6:	7f 3f       	cpi	r23, 0xFF	; 255
     1d8:	1f 07       	cpc	r17, r31
     1da:	03 01       	movw	r0, r6
     1dc:	00 20       	and	r0, r0
     1de:	38 7c       	andi	r19, 0xC8	; 200
     1e0:	7e 3f       	cpi	r23, 0xFE	; 254
     1e2:	0f 07       	cpc	r16, r31
     1e4:	03 00       	.word	0x0003	; ????
	...
     1ee:	00 1c       	adc	r0, r0
     1f0:	be fe       	.word	0xfebe	; ????
     1f2:	ff e7       	ldi	r31, 0x7F	; 127
     1f4:	c3 c3       	rjmp	.+1926   	; 0x97c <_ZN7Display6analogEhhhh+0x48>
     1f6:	e7 ff       	sbrs	r30, 7
     1f8:	fe be       	out	0x3e, r15	; 62
     1fa:	1c 00       	.word	0x001c	; ????
     1fc:	00 00       	nop
     1fe:	0e 3f       	cpi	r16, 0xFE	; 254
     200:	3f 7f       	andi	r19, 0xFF	; 255
     202:	71 60       	ori	r23, 0x01	; 1
     204:	60 60       	ori	r22, 0x00	; 0
     206:	71 7f       	andi	r23, 0xF1	; 241
     208:	3f 3f       	cpi	r19, 0xFF	; 255
     20a:	0f 00       	.word	0x000f	; ????
     20c:	00 78       	andi	r16, 0x80	; 128
     20e:	fc fe       	.word	0xfefc	; ????
     210:	fe 8f       	std	Y+30, r31	; 0x1e
     212:	07 07       	cpc	r16, r23
     214:	07 07       	cpc	r16, r23
     216:	8f fe       	.word	0xfe8f	; ????
     218:	fe fc       	.word	0xfcfe	; ????
     21a:	f8 00       	.word	0x00f8	; ????
     21c:	00 00       	nop
     21e:	00 01       	movw	r0, r0
     220:	43 43       	sbci	r20, 0x33	; 51
     222:	73 7b       	andi	r23, 0xB3	; 179
     224:	7f 7f       	andi	r23, 0xFF	; 255
     226:	1f 0f       	add	r17, r31
     228:	07 03       	mulsu	r16, r23
	...

0000022c <_ZL7font5x8>:
     22c:	00 00 5f 00 00 00 07 00 07 00 14 7f 14 7f 14 24     .._............$
     23c:	2a 7f 2a 12 23 13 08 64 62 36 49 55 22 50 00 05     *.*.#..db6IU"P..
     24c:	03 00 00 00 1c 22 41 00 00 41 22 1c 00 14 08 3e     ....."A..A"....>
     25c:	08 14 08 08 3e 08 08 00 50 30 00 00 08 08 08 08     ....>...P0......
     26c:	08 00 60 60 00 00 20 10 08 04 02 3e 51 49 45 3e     ..``.. ....>QIE>
     27c:	00 42 7f 40 00 42 61 51 49 46 21 41 45 4b 31 18     .B.@.BaQIF!AEK1.
     28c:	14 12 7f 10 27 45 45 45 39 3c 4a 49 49 30 01 71     ....'EEE9<JII0.q
     29c:	09 05 03 36 49 49 49 36 06 49 49 29 1e 00 36 36     ...6III6.II)..66
     2ac:	00 00 00 56 36 00 00 08 14 22 41 00 14 14 14 14     ...V6...."A.....
     2bc:	14 00 41 22 14 08 02 01 51 09 06 32 49 79 41 3e     ..A"....Q..2IyA>
     2cc:	7e 11 11 11 7e 7f 49 49 49 36 3e 41 41 41 22 7f     ~...~.III6>AAA".
     2dc:	41 41 22 1c 7f 49 49 49 41 7f 09 09 09 01 3e 41     AA"..IIIA.....>A
     2ec:	49 49 7a 7f 08 08 08 7f 00 41 7f 41 00 20 40 41     IIz......A.A. @A
     2fc:	3f 01 7f 08 14 22 41 7f 40 40 40 40 7f 02 0c 02     ?...."A.@@@@....
     30c:	7f 7f 04 08 10 7f 3e 41 41 41 3e 7f 09 09 09 06     ......>AAA>.....
     31c:	3e 41 51 21 5e 7f 09 19 29 46 46 49 49 49 31 01     >AQ!^...)FFIII1.
     32c:	01 7f 01 01 3f 40 40 40 3f 1f 20 40 20 1f 3f 40     ....?@@@?. @ .?@
     33c:	38 40 3f 63 14 08 14 63 07 08 70 08 07 61 51 49     8@?c...c..p..aQI
     34c:	45 43 00 7f 41 41 00 02 04 08 10 20 00 41 41 7f     EC..AA..... .AA.
     35c:	00 04 02 01 02 04 40 40 40 40 40 00 01 02 04 00     ......@@@@@.....
     36c:	20 54 54 54 78 7f 48 44 44 38 38 44 44 44 20 38      TTTx.HDD88DDD 8
     37c:	44 44 48 7f 38 54 54 54 18 08 7e 09 01 02 0c 52     DDH.8TTT..~....R
     38c:	52 52 3e 7f 08 04 04 78 00 44 7d 40 00 20 40 44     RR>....x.D}@. @D
     39c:	3d 00 7f 10 28 44 00 00 41 7f 40 00 7c 04 18 04     =...(D..A.@.|...
     3ac:	78 7c 08 04 04 78 38 44 44 44 38 7c 14 14 14 08     x|...x8DDD8|....
     3bc:	08 14 14 18 7c 7c 08 04 04 08 48 54 54 54 20 04     ....||....HTTT .
     3cc:	3f 44 40 20 3c 40 40 20 7c 1c 20 40 20 1c 3c 40     ?D@ <@@ |. @ .<@
     3dc:	30 40 3c 44 28 10 28 44 0c 50 50 50 3c 44 64 54     0@<D(.(D.PPP<DdT
     3ec:	4c 44 00 08 36 41 00 00 00 7f 00 00 00 41 36 08     LD..6A.......A6.
     3fc:	00 10 08 08 10 08                                   ......

00000402 <__c.2179>:
     402:	6e 61 6e 00                                         nan.

00000406 <__c.2177>:
     406:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     416:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     426:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     436:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     446:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     456:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     466:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     476:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     486:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     496:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     4a6:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     4b6:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     4c6:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     4d6:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     4e6:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     4f6:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000504 <__ctors_start>:
     504:	2f 17       	cp	r18, r31

00000506 <__ctors_end>:
     506:	5a 17       	cp	r21, r26

00000508 <__dtors_end>:
     508:	11 24       	eor	r1, r1
     50a:	1f be       	out	0x3f, r1	; 63
     50c:	cf ef       	ldi	r28, 0xFF	; 255
     50e:	d0 e4       	ldi	r29, 0x40	; 64
     510:	de bf       	out	0x3e, r29	; 62
     512:	cd bf       	out	0x3d, r28	; 61

00000514 <_Z8wdt_initv>:
	for (uint8_t i = 0; i < nsamples; ++i ) {
		sum += ADC_Read( channel );
	}
	
	return (uint16_t)( sum / nsamples );
}
     514:	14 be       	out	0x34, r1	; 52
     516:	0f b6       	in	r0, 0x3f	; 63
     518:	f8 94       	cli
     51a:	a8 95       	wdr
     51c:	80 91 60 00 	lds	r24, 0x0060
     520:	88 61       	ori	r24, 0x18	; 24
     522:	80 93 60 00 	sts	0x0060, r24
     526:	10 92 60 00 	sts	0x0060, r1
     52a:	0f be       	out	0x3f, r0	; 63

0000052c <__do_copy_data>:
     52c:	12 e0       	ldi	r17, 0x02	; 2
     52e:	a0 e0       	ldi	r26, 0x00	; 0
     530:	b1 e0       	ldi	r27, 0x01	; 1
     532:	e4 e7       	ldi	r30, 0x74	; 116
     534:	f6 e4       	ldi	r31, 0x46	; 70
     536:	00 e0       	ldi	r16, 0x00	; 0
     538:	0b bf       	out	0x3b, r16	; 59
     53a:	02 c0       	rjmp	.+4      	; 0x540 <__do_copy_data+0x14>
     53c:	07 90       	elpm	r0, Z+
     53e:	0d 92       	st	X+, r0
     540:	a6 38       	cpi	r26, 0x86	; 134
     542:	b1 07       	cpc	r27, r17
     544:	d9 f7       	brne	.-10     	; 0x53c <__do_copy_data+0x10>

00000546 <__do_clear_bss>:
     546:	27 e0       	ldi	r18, 0x07	; 7
     548:	a6 e8       	ldi	r26, 0x86	; 134
     54a:	b2 e0       	ldi	r27, 0x02	; 2
     54c:	01 c0       	rjmp	.+2      	; 0x550 <.do_clear_bss_start>

0000054e <.do_clear_bss_loop>:
     54e:	1d 92       	st	X+, r1

00000550 <.do_clear_bss_start>:
     550:	aa 3d       	cpi	r26, 0xDA	; 218
     552:	b2 07       	cpc	r27, r18
     554:	e1 f7       	brne	.-8      	; 0x54e <.do_clear_bss_loop>

00000556 <__do_global_ctors>:
     556:	12 e0       	ldi	r17, 0x02	; 2
     558:	c3 e8       	ldi	r28, 0x83	; 131
     55a:	d2 e0       	ldi	r29, 0x02	; 2
     55c:	04 c0       	rjmp	.+8      	; 0x566 <__do_global_ctors+0x10>
     55e:	21 97       	sbiw	r28, 0x01	; 1
     560:	fe 01       	movw	r30, r28
     562:	0e 94 45 20 	call	0x408a	; 0x408a <__tablejump2__>
     566:	c2 38       	cpi	r28, 0x82	; 130
     568:	d1 07       	cpc	r29, r17
     56a:	c9 f7       	brne	.-14     	; 0x55e <__do_global_ctors+0x8>
     56c:	0e 94 d6 10 	call	0x21ac	; 0x21ac <main>
     570:	0c 94 2e 23 	jmp	0x465c	; 0x465c <__do_global_dtors>

00000574 <__bad_interrupt>:
     574:	45 cd       	rjmp	.-1398   	; 0x0 <__vectors>

00000576 <_ZN7DisplayD1Ev>:
	else{
		for(uint8_t i = 0; i < 7; i++){
			Displayframe[x+(y/8)*SSD1306_WIDTH+i] |= 0;
		}
	}
}
     576:	9c 5f       	subi	r25, 0xFC	; 252
     578:	5a c4       	rjmp	.+2228   	; 0xe2e <_ZN3I2CD1Ev>
     57a:	08 95       	ret

0000057c <_ZN7Display10clearFrameEv>:
     57c:	fc 01       	movw	r30, r24
     57e:	9c 5f       	subi	r25, 0xFC	; 252
     580:	11 92       	st	Z+, r1
     582:	e8 17       	cp	r30, r24
     584:	f9 07       	cpc	r31, r25
     586:	e1 f7       	brne	.-8      	; 0x580 <_ZN7Display10clearFrameEv+0x4>
     588:	08 95       	ret

0000058a <_ZN7Display15ssd1306_commandEh>:
     58a:	1f 93       	push	r17
     58c:	cf 93       	push	r28
     58e:	df 93       	push	r29
     590:	16 2f       	mov	r17, r22
     592:	ec 01       	movw	r28, r24
     594:	dc 5f       	subi	r29, 0xFC	; 252
     596:	ce 01       	movw	r24, r28
     598:	4b d4       	rcall	.+2198   	; 0xe30 <_ZN3I2C9twi_startEv>
     59a:	68 e7       	ldi	r22, 0x78	; 120
     59c:	ce 01       	movw	r24, r28
     59e:	50 d4       	rcall	.+2208   	; 0xe40 <_ZN3I2C9twi_writeEh>
     5a0:	60 e0       	ldi	r22, 0x00	; 0
     5a2:	ce 01       	movw	r24, r28
     5a4:	4d d4       	rcall	.+2202   	; 0xe40 <_ZN3I2C9twi_writeEh>
     5a6:	61 2f       	mov	r22, r17
     5a8:	ce 01       	movw	r24, r28
     5aa:	4a d4       	rcall	.+2196   	; 0xe40 <_ZN3I2C9twi_writeEh>
     5ac:	ce 01       	movw	r24, r28
     5ae:	44 d4       	rcall	.+2184   	; 0xe38 <_ZN3I2C8twi_stopEv>
     5b0:	df 91       	pop	r29
     5b2:	cf 91       	pop	r28
     5b4:	1f 91       	pop	r17
     5b6:	08 95       	ret

000005b8 <_ZN7Display17InitializeDisplayEv>:
     5b8:	cf 93       	push	r28
     5ba:	df 93       	push	r29
     5bc:	ec 01       	movw	r28, r24
     5be:	6e ea       	ldi	r22, 0xAE	; 174
     5c0:	e4 df       	rcall	.-56     	; 0x58a <_ZN7Display15ssd1306_commandEh>
     5c2:	65 ed       	ldi	r22, 0xD5	; 213
     5c4:	ce 01       	movw	r24, r28
     5c6:	e1 df       	rcall	.-62     	; 0x58a <_ZN7Display15ssd1306_commandEh>
     5c8:	60 e8       	ldi	r22, 0x80	; 128
     5ca:	ce 01       	movw	r24, r28
     5cc:	de df       	rcall	.-68     	; 0x58a <_ZN7Display15ssd1306_commandEh>
     5ce:	68 ea       	ldi	r22, 0xA8	; 168
     5d0:	ce 01       	movw	r24, r28
     5d2:	db df       	rcall	.-74     	; 0x58a <_ZN7Display15ssd1306_commandEh>
     5d4:	6f e3       	ldi	r22, 0x3F	; 63
     5d6:	ce 01       	movw	r24, r28
     5d8:	d8 df       	rcall	.-80     	; 0x58a <_ZN7Display15ssd1306_commandEh>
     5da:	63 ed       	ldi	r22, 0xD3	; 211
     5dc:	ce 01       	movw	r24, r28
     5de:	d5 df       	rcall	.-86     	; 0x58a <_ZN7Display15ssd1306_commandEh>
     5e0:	60 e0       	ldi	r22, 0x00	; 0
     5e2:	ce 01       	movw	r24, r28
     5e4:	d2 df       	rcall	.-92     	; 0x58a <_ZN7Display15ssd1306_commandEh>
     5e6:	60 e4       	ldi	r22, 0x40	; 64
     5e8:	ce 01       	movw	r24, r28
     5ea:	cf df       	rcall	.-98     	; 0x58a <_ZN7Display15ssd1306_commandEh>
     5ec:	6d e8       	ldi	r22, 0x8D	; 141
     5ee:	ce 01       	movw	r24, r28
     5f0:	cc df       	rcall	.-104    	; 0x58a <_ZN7Display15ssd1306_commandEh>
     5f2:	64 e1       	ldi	r22, 0x14	; 20
     5f4:	ce 01       	movw	r24, r28
     5f6:	c9 df       	rcall	.-110    	; 0x58a <_ZN7Display15ssd1306_commandEh>
     5f8:	60 e2       	ldi	r22, 0x20	; 32
     5fa:	ce 01       	movw	r24, r28
     5fc:	c6 df       	rcall	.-116    	; 0x58a <_ZN7Display15ssd1306_commandEh>
     5fe:	60 e0       	ldi	r22, 0x00	; 0
     600:	ce 01       	movw	r24, r28
     602:	c3 df       	rcall	.-122    	; 0x58a <_ZN7Display15ssd1306_commandEh>
     604:	61 ea       	ldi	r22, 0xA1	; 161
     606:	ce 01       	movw	r24, r28
     608:	c0 df       	rcall	.-128    	; 0x58a <_ZN7Display15ssd1306_commandEh>
     60a:	68 ec       	ldi	r22, 0xC8	; 200
     60c:	ce 01       	movw	r24, r28
     60e:	bd df       	rcall	.-134    	; 0x58a <_ZN7Display15ssd1306_commandEh>
     610:	6a ed       	ldi	r22, 0xDA	; 218
     612:	ce 01       	movw	r24, r28
     614:	ba df       	rcall	.-140    	; 0x58a <_ZN7Display15ssd1306_commandEh>
     616:	62 e1       	ldi	r22, 0x12	; 18
     618:	ce 01       	movw	r24, r28
     61a:	b7 df       	rcall	.-146    	; 0x58a <_ZN7Display15ssd1306_commandEh>
     61c:	61 e8       	ldi	r22, 0x81	; 129
     61e:	ce 01       	movw	r24, r28
     620:	b4 df       	rcall	.-152    	; 0x58a <_ZN7Display15ssd1306_commandEh>
     622:	6f ec       	ldi	r22, 0xCF	; 207
     624:	ce 01       	movw	r24, r28
     626:	b1 df       	rcall	.-158    	; 0x58a <_ZN7Display15ssd1306_commandEh>
     628:	69 ed       	ldi	r22, 0xD9	; 217
     62a:	ce 01       	movw	r24, r28
     62c:	ae df       	rcall	.-164    	; 0x58a <_ZN7Display15ssd1306_commandEh>
     62e:	61 ef       	ldi	r22, 0xF1	; 241
     630:	ce 01       	movw	r24, r28
     632:	ab df       	rcall	.-170    	; 0x58a <_ZN7Display15ssd1306_commandEh>
     634:	6b ed       	ldi	r22, 0xDB	; 219
     636:	ce 01       	movw	r24, r28
     638:	a8 df       	rcall	.-176    	; 0x58a <_ZN7Display15ssd1306_commandEh>
     63a:	60 e4       	ldi	r22, 0x40	; 64
     63c:	ce 01       	movw	r24, r28
     63e:	a5 df       	rcall	.-182    	; 0x58a <_ZN7Display15ssd1306_commandEh>
     640:	64 ea       	ldi	r22, 0xA4	; 164
     642:	ce 01       	movw	r24, r28
     644:	a2 df       	rcall	.-188    	; 0x58a <_ZN7Display15ssd1306_commandEh>
     646:	66 ea       	ldi	r22, 0xA6	; 166
     648:	ce 01       	movw	r24, r28
     64a:	9f df       	rcall	.-194    	; 0x58a <_ZN7Display15ssd1306_commandEh>
     64c:	6f ea       	ldi	r22, 0xAF	; 175
     64e:	ce 01       	movw	r24, r28
     650:	9c df       	rcall	.-200    	; 0x58a <_ZN7Display15ssd1306_commandEh>
     652:	df 91       	pop	r29
     654:	cf 91       	pop	r28
     656:	08 95       	ret

00000658 <_ZN7DisplayC1Ev>:
     658:	cf 93       	push	r28
     65a:	df 93       	push	r29
     65c:	ec 01       	movw	r28, r24
     65e:	9c 5f       	subi	r25, 0xFC	; 252
     660:	e2 d3       	rcall	.+1988   	; 0xe26 <_ZN3I2CC1Ev>
     662:	ce 01       	movw	r24, r28
     664:	a9 df       	rcall	.-174    	; 0x5b8 <_ZN7Display17InitializeDisplayEv>
     666:	ce 01       	movw	r24, r28
     668:	89 df       	rcall	.-238    	; 0x57c <_ZN7Display10clearFrameEv>
     66a:	df 91       	pop	r29
     66c:	cf 91       	pop	r28
     66e:	08 95       	ret

00000670 <_ZN7Display9sendFrameEv>:
     670:	ef 92       	push	r14
     672:	ff 92       	push	r15
     674:	0f 93       	push	r16
     676:	1f 93       	push	r17
     678:	cf 93       	push	r28
     67a:	df 93       	push	r29
     67c:	ec 01       	movw	r28, r24
     67e:	61 e2       	ldi	r22, 0x21	; 33
     680:	84 df       	rcall	.-248    	; 0x58a <_ZN7Display15ssd1306_commandEh>
     682:	60 e0       	ldi	r22, 0x00	; 0
     684:	ce 01       	movw	r24, r28
     686:	81 df       	rcall	.-254    	; 0x58a <_ZN7Display15ssd1306_commandEh>
     688:	6f e7       	ldi	r22, 0x7F	; 127
     68a:	ce 01       	movw	r24, r28
     68c:	7e df       	rcall	.-260    	; 0x58a <_ZN7Display15ssd1306_commandEh>
     68e:	62 e2       	ldi	r22, 0x22	; 34
     690:	ce 01       	movw	r24, r28
     692:	7b df       	rcall	.-266    	; 0x58a <_ZN7Display15ssd1306_commandEh>
     694:	60 e0       	ldi	r22, 0x00	; 0
     696:	ce 01       	movw	r24, r28
     698:	78 df       	rcall	.-272    	; 0x58a <_ZN7Display15ssd1306_commandEh>
     69a:	67 e0       	ldi	r22, 0x07	; 7
     69c:	ce 01       	movw	r24, r28
     69e:	75 df       	rcall	.-278    	; 0x58a <_ZN7Display15ssd1306_commandEh>
     6a0:	8e 01       	movw	r16, r28
     6a2:	1c 5f       	subi	r17, 0xFC	; 252
     6a4:	c8 01       	movw	r24, r16
     6a6:	c4 d3       	rcall	.+1928   	; 0xe30 <_ZN3I2C9twi_startEv>
     6a8:	68 e7       	ldi	r22, 0x78	; 120
     6aa:	c8 01       	movw	r24, r16
     6ac:	c9 d3       	rcall	.+1938   	; 0xe40 <_ZN3I2C9twi_writeEh>
     6ae:	60 e4       	ldi	r22, 0x40	; 64
     6b0:	c8 01       	movw	r24, r16
     6b2:	c6 d3       	rcall	.+1932   	; 0xe40 <_ZN3I2C9twi_writeEh>
     6b4:	78 01       	movw	r14, r16
     6b6:	69 91       	ld	r22, Y+
     6b8:	c8 01       	movw	r24, r16
     6ba:	c2 d3       	rcall	.+1924   	; 0xe40 <_ZN3I2C9twi_writeEh>
     6bc:	ce 15       	cp	r28, r14
     6be:	df 05       	cpc	r29, r15
     6c0:	d1 f7       	brne	.-12     	; 0x6b6 <_ZN7Display9sendFrameEv+0x46>
     6c2:	c8 01       	movw	r24, r16
     6c4:	b9 d3       	rcall	.+1906   	; 0xe38 <_ZN3I2C8twi_stopEv>
     6c6:	df 91       	pop	r29
     6c8:	cf 91       	pop	r28
     6ca:	1f 91       	pop	r17
     6cc:	0f 91       	pop	r16
     6ce:	ff 90       	pop	r15
     6d0:	ef 90       	pop	r14
     6d2:	08 95       	ret

000006d4 <_ZN7Display9drawPixelEhhh>:
     6d4:	66 23       	and	r22, r22
     6d6:	ac f1       	brlt	.+106    	; 0x742 <_ZN7Display9drawPixelEhhh+0x6e>
     6d8:	40 34       	cpi	r20, 0x40	; 64
     6da:	98 f5       	brcc	.+102    	; 0x742 <_ZN7Display9drawPixelEhhh+0x6e>
     6dc:	21 11       	cpse	r18, r1
     6de:	19 c0       	rjmp	.+50     	; 0x712 <_ZN7Display9drawPixelEhhh+0x3e>
     6e0:	24 2f       	mov	r18, r20
     6e2:	26 95       	lsr	r18
     6e4:	26 95       	lsr	r18
     6e6:	26 95       	lsr	r18
     6e8:	50 e8       	ldi	r21, 0x80	; 128
     6ea:	25 9f       	mul	r18, r21
     6ec:	90 01       	movw	r18, r0
     6ee:	11 24       	eor	r1, r1
     6f0:	26 0f       	add	r18, r22
     6f2:	31 1d       	adc	r19, r1
     6f4:	fc 01       	movw	r30, r24
     6f6:	e2 0f       	add	r30, r18
     6f8:	f3 1f       	adc	r31, r19
     6fa:	47 70       	andi	r20, 0x07	; 7
     6fc:	81 e0       	ldi	r24, 0x01	; 1
     6fe:	90 e0       	ldi	r25, 0x00	; 0
     700:	02 c0       	rjmp	.+4      	; 0x706 <_ZN7Display9drawPixelEhhh+0x32>
     702:	88 0f       	add	r24, r24
     704:	99 1f       	adc	r25, r25
     706:	4a 95       	dec	r20
     708:	e2 f7       	brpl	.-8      	; 0x702 <_ZN7Display9drawPixelEhhh+0x2e>
     70a:	90 81       	ld	r25, Z
     70c:	89 2b       	or	r24, r25
     70e:	80 83       	st	Z, r24
     710:	08 95       	ret
     712:	24 2f       	mov	r18, r20
     714:	26 95       	lsr	r18
     716:	26 95       	lsr	r18
     718:	26 95       	lsr	r18
     71a:	30 e8       	ldi	r19, 0x80	; 128
     71c:	23 9f       	mul	r18, r19
     71e:	f0 01       	movw	r30, r0
     720:	11 24       	eor	r1, r1
     722:	e6 0f       	add	r30, r22
     724:	f1 1d       	adc	r31, r1
     726:	e8 0f       	add	r30, r24
     728:	f9 1f       	adc	r31, r25
     72a:	47 70       	andi	r20, 0x07	; 7
     72c:	81 e0       	ldi	r24, 0x01	; 1
     72e:	90 e0       	ldi	r25, 0x00	; 0
     730:	02 c0       	rjmp	.+4      	; 0x736 <_ZN7Display9drawPixelEhhh+0x62>
     732:	88 0f       	add	r24, r24
     734:	99 1f       	adc	r25, r25
     736:	4a 95       	dec	r20
     738:	e2 f7       	brpl	.-8      	; 0x732 <_ZN7Display9drawPixelEhhh+0x5e>
     73a:	80 95       	com	r24
     73c:	90 81       	ld	r25, Z
     73e:	89 23       	and	r24, r25
     740:	80 83       	st	Z, r24
     742:	08 95       	ret

00000744 <_ZN7Display9drawVLineEhhh>:
     744:	ff 92       	push	r15
     746:	0f 93       	push	r16
     748:	1f 93       	push	r17
     74a:	cf 93       	push	r28
     74c:	df 93       	push	r29
     74e:	22 23       	and	r18, r18
     750:	69 f0       	breq	.+26     	; 0x76c <_ZN7Display9drawVLineEhhh+0x28>
     752:	c4 2f       	mov	r28, r20
     754:	f6 2e       	mov	r15, r22
     756:	8c 01       	movw	r16, r24
     758:	d2 2f       	mov	r29, r18
     75a:	d4 0f       	add	r29, r20
     75c:	20 e0       	ldi	r18, 0x00	; 0
     75e:	4c 2f       	mov	r20, r28
     760:	6f 2d       	mov	r22, r15
     762:	c8 01       	movw	r24, r16
     764:	b7 df       	rcall	.-146    	; 0x6d4 <_ZN7Display9drawPixelEhhh>
     766:	cf 5f       	subi	r28, 0xFF	; 255
     768:	cd 13       	cpse	r28, r29
     76a:	f8 cf       	rjmp	.-16     	; 0x75c <_ZN7Display9drawVLineEhhh+0x18>
     76c:	df 91       	pop	r29
     76e:	cf 91       	pop	r28
     770:	1f 91       	pop	r17
     772:	0f 91       	pop	r16
     774:	ff 90       	pop	r15
     776:	08 95       	ret

00000778 <_ZN7Display9drawHLineEhhh>:
     778:	ff 92       	push	r15
     77a:	0f 93       	push	r16
     77c:	1f 93       	push	r17
     77e:	cf 93       	push	r28
     780:	df 93       	push	r29
     782:	22 23       	and	r18, r18
     784:	69 f0       	breq	.+26     	; 0x7a0 <_ZN7Display9drawHLineEhhh+0x28>
     786:	f4 2e       	mov	r15, r20
     788:	c6 2f       	mov	r28, r22
     78a:	8c 01       	movw	r16, r24
     78c:	d2 2f       	mov	r29, r18
     78e:	d6 0f       	add	r29, r22
     790:	20 e0       	ldi	r18, 0x00	; 0
     792:	4f 2d       	mov	r20, r15
     794:	6c 2f       	mov	r22, r28
     796:	c8 01       	movw	r24, r16
     798:	9d df       	rcall	.-198    	; 0x6d4 <_ZN7Display9drawPixelEhhh>
     79a:	cf 5f       	subi	r28, 0xFF	; 255
     79c:	cd 13       	cpse	r28, r29
     79e:	f8 cf       	rjmp	.-16     	; 0x790 <_ZN7Display9drawHLineEhhh+0x18>
     7a0:	df 91       	pop	r29
     7a2:	cf 91       	pop	r28
     7a4:	1f 91       	pop	r17
     7a6:	0f 91       	pop	r16
     7a8:	ff 90       	pop	r15
     7aa:	08 95       	ret

000007ac <_ZN7Display9draw_ASCIEhhh>:
     7ac:	0f 93       	push	r16
     7ae:	1f 93       	push	r17
     7b0:	cf 93       	push	r28
     7b2:	df 93       	push	r29
     7b4:	61 32       	cpi	r22, 0x21	; 33
     7b6:	08 f4       	brcc	.+2      	; 0x7ba <_ZN7Display9draw_ASCIEhhh+0xe>
     7b8:	3e c0       	rjmp	.+124    	; 0x836 <_ZN7Display9draw_ASCIEhhh+0x8a>
     7ba:	a4 2f       	mov	r26, r20
     7bc:	b0 e0       	ldi	r27, 0x00	; 0
     7be:	02 2f       	mov	r16, r18
     7c0:	06 95       	lsr	r16
     7c2:	06 95       	lsr	r16
     7c4:	06 95       	lsr	r16
     7c6:	30 e8       	ldi	r19, 0x80	; 128
     7c8:	03 9f       	mul	r16, r19
     7ca:	80 01       	movw	r16, r0
     7cc:	11 24       	eor	r1, r1
     7ce:	61 52       	subi	r22, 0x21	; 33
     7d0:	70 e0       	ldi	r23, 0x00	; 0
     7d2:	fb 01       	movw	r30, r22
     7d4:	ee 0f       	add	r30, r30
     7d6:	ff 1f       	adc	r31, r31
     7d8:	ee 0f       	add	r30, r30
     7da:	ff 1f       	adc	r31, r31
     7dc:	e6 0f       	add	r30, r22
     7de:	f7 1f       	adc	r31, r23
     7e0:	e4 5d       	subi	r30, 0xD4	; 212
     7e2:	fd 4f       	sbci	r31, 0xFD	; 253
     7e4:	ad 01       	movw	r20, r26
     7e6:	40 0f       	add	r20, r16
     7e8:	51 1f       	adc	r21, r17
     7ea:	ec 01       	movw	r28, r24
     7ec:	c4 0f       	add	r28, r20
     7ee:	d5 1f       	adc	r29, r21
     7f0:	00 58       	subi	r16, 0x80	; 128
     7f2:	1f 4f       	sbci	r17, 0xFF	; 255
     7f4:	a0 0f       	add	r26, r16
     7f6:	b1 1f       	adc	r27, r17
     7f8:	a8 0f       	add	r26, r24
     7fa:	b9 1f       	adc	r27, r25
     7fc:	4b 5f       	subi	r20, 0xFB	; 251
     7fe:	5f 4f       	sbci	r21, 0xFF	; 255
     800:	48 0f       	add	r20, r24
     802:	59 1f       	adc	r21, r25
     804:	27 70       	andi	r18, 0x07	; 7
     806:	64 91       	lpm	r22, Z
     808:	70 e0       	ldi	r23, 0x00	; 0
     80a:	02 2e       	mov	r0, r18
     80c:	02 c0       	rjmp	.+4      	; 0x812 <_ZN7Display9draw_ASCIEhhh+0x66>
     80e:	66 0f       	add	r22, r22
     810:	77 1f       	adc	r23, r23
     812:	0a 94       	dec	r0
     814:	e2 f7       	brpl	.-8      	; 0x80e <_ZN7Display9draw_ASCIEhhh+0x62>
     816:	98 81       	ld	r25, Y
     818:	96 2b       	or	r25, r22
     81a:	99 93       	st	Y+, r25
     81c:	67 2f       	mov	r22, r23
     81e:	77 27       	eor	r23, r23
     820:	61 15       	cp	r22, r1
     822:	71 05       	cpc	r23, r1
     824:	19 f0       	breq	.+6      	; 0x82c <_ZN7Display9draw_ASCIEhhh+0x80>
     826:	8c 91       	ld	r24, X
     828:	68 2b       	or	r22, r24
     82a:	6c 93       	st	X, r22
     82c:	31 96       	adiw	r30, 0x01	; 1
     82e:	11 96       	adiw	r26, 0x01	; 1
     830:	c4 17       	cp	r28, r20
     832:	d5 07       	cpc	r29, r21
     834:	41 f7       	brne	.-48     	; 0x806 <_ZN7Display9draw_ASCIEhhh+0x5a>
     836:	df 91       	pop	r29
     838:	cf 91       	pop	r28
     83a:	1f 91       	pop	r17
     83c:	0f 91       	pop	r16
     83e:	08 95       	ret

00000840 <_ZN7Display16draw_number16x16Ehhh>:
     840:	cf 92       	push	r12
     842:	df 92       	push	r13
     844:	ef 92       	push	r14
     846:	ff 92       	push	r15
     848:	0f 93       	push	r16
     84a:	1f 93       	push	r17
     84c:	cf 93       	push	r28
     84e:	df 93       	push	r29
     850:	6a 30       	cpi	r22, 0x0A	; 10
     852:	08 f0       	brcs	.+2      	; 0x856 <_ZN7Display16draw_number16x16Ehhh+0x16>
     854:	66 c0       	rjmp	.+204    	; 0x922 <_ZN7Display16draw_number16x16Ehhh+0xe2>
     856:	50 e0       	ldi	r21, 0x00	; 0
     858:	02 2f       	mov	r16, r18
     85a:	06 95       	lsr	r16
     85c:	06 95       	lsr	r16
     85e:	06 95       	lsr	r16
     860:	10 e0       	ldi	r17, 0x00	; 0
     862:	d8 01       	movw	r26, r16
     864:	b6 95       	lsr	r27
     866:	ba 2f       	mov	r27, r26
     868:	aa 27       	eor	r26, r26
     86a:	b7 95       	ror	r27
     86c:	a7 95       	ror	r26
     86e:	0f 5f       	subi	r16, 0xFF	; 255
     870:	1f 4f       	sbci	r17, 0xFF	; 255
     872:	16 95       	lsr	r17
     874:	10 2f       	mov	r17, r16
     876:	00 27       	eor	r16, r16
     878:	17 95       	ror	r17
     87a:	07 95       	ror	r16
     87c:	7d 01       	movw	r14, r26
     87e:	30 e8       	ldi	r19, 0x80	; 128
     880:	e3 0e       	add	r14, r19
     882:	f1 1c       	adc	r15, r1
     884:	e4 0e       	add	r14, r20
     886:	f5 1e       	adc	r15, r21
     888:	e8 0e       	add	r14, r24
     88a:	f9 1e       	adc	r15, r25
     88c:	ea 01       	movw	r28, r20
     88e:	c0 0f       	add	r28, r16
     890:	d1 1f       	adc	r29, r17
     892:	60 97       	sbiw	r28, 0x10	; 16
     894:	c8 0f       	add	r28, r24
     896:	d9 1f       	adc	r29, r25
     898:	04 0f       	add	r16, r20
     89a:	15 1f       	adc	r17, r21
     89c:	00 59       	subi	r16, 0x90	; 144
     89e:	1f 4f       	sbci	r17, 0xFF	; 255
     8a0:	08 0f       	add	r16, r24
     8a2:	19 1f       	adc	r17, r25
     8a4:	a4 0f       	add	r26, r20
     8a6:	b5 1f       	adc	r27, r21
     8a8:	a8 0f       	add	r26, r24
     8aa:	b9 1f       	adc	r27, r25
     8ac:	80 e2       	ldi	r24, 0x20	; 32
     8ae:	68 9f       	mul	r22, r24
     8b0:	b0 01       	movw	r22, r0
     8b2:	11 24       	eor	r1, r1
     8b4:	40 e0       	ldi	r20, 0x00	; 0
     8b6:	50 e0       	ldi	r21, 0x00	; 0
     8b8:	27 70       	andi	r18, 0x07	; 7
     8ba:	fa 01       	movw	r30, r20
     8bc:	e6 0f       	add	r30, r22
     8be:	f7 1f       	adc	r31, r23
     8c0:	e4 51       	subi	r30, 0x14	; 20
     8c2:	ff 4f       	sbci	r31, 0xFF	; 255
     8c4:	e4 91       	lpm	r30, Z
     8c6:	f0 e0       	ldi	r31, 0x00	; 0
     8c8:	02 2e       	mov	r0, r18
     8ca:	02 c0       	rjmp	.+4      	; 0x8d0 <_ZN7Display16draw_number16x16Ehhh+0x90>
     8cc:	ee 0f       	add	r30, r30
     8ce:	ff 1f       	adc	r31, r31
     8d0:	0a 94       	dec	r0
     8d2:	e2 f7       	brpl	.-8      	; 0x8cc <_ZN7Display16draw_number16x16Ehhh+0x8c>
     8d4:	40 31       	cpi	r20, 0x10	; 16
     8d6:	68 f4       	brcc	.+26     	; 0x8f2 <_ZN7Display16draw_number16x16Ehhh+0xb2>
     8d8:	8c 91       	ld	r24, X
     8da:	8e 2b       	or	r24, r30
     8dc:	8c 93       	st	X, r24
     8de:	cf 2e       	mov	r12, r31
     8e0:	dd 24       	eor	r13, r13
     8e2:	c1 14       	cp	r12, r1
     8e4:	d1 04       	cpc	r13, r1
     8e6:	89 f0       	breq	.+34     	; 0x90a <_ZN7Display16draw_number16x16Ehhh+0xca>
     8e8:	f7 01       	movw	r30, r14
     8ea:	80 81       	ld	r24, Z
     8ec:	8c 29       	or	r24, r12
     8ee:	80 83       	st	Z, r24
     8f0:	0c c0       	rjmp	.+24     	; 0x90a <_ZN7Display16draw_number16x16Ehhh+0xca>
     8f2:	88 81       	ld	r24, Y
     8f4:	8e 2b       	or	r24, r30
     8f6:	88 83       	st	Y, r24
     8f8:	cf 2e       	mov	r12, r31
     8fa:	dd 24       	eor	r13, r13
     8fc:	c1 14       	cp	r12, r1
     8fe:	d1 04       	cpc	r13, r1
     900:	21 f0       	breq	.+8      	; 0x90a <_ZN7Display16draw_number16x16Ehhh+0xca>
     902:	f8 01       	movw	r30, r16
     904:	80 81       	ld	r24, Z
     906:	8c 29       	or	r24, r12
     908:	80 83       	st	Z, r24
     90a:	4f 5f       	subi	r20, 0xFF	; 255
     90c:	5f 4f       	sbci	r21, 0xFF	; 255
     90e:	ff ef       	ldi	r31, 0xFF	; 255
     910:	ef 1a       	sub	r14, r31
     912:	ff 0a       	sbc	r15, r31
     914:	21 96       	adiw	r28, 0x01	; 1
     916:	0f 5f       	subi	r16, 0xFF	; 255
     918:	1f 4f       	sbci	r17, 0xFF	; 255
     91a:	11 96       	adiw	r26, 0x01	; 1
     91c:	40 32       	cpi	r20, 0x20	; 32
     91e:	51 05       	cpc	r21, r1
     920:	61 f6       	brne	.-104    	; 0x8ba <_ZN7Display16draw_number16x16Ehhh+0x7a>
     922:	df 91       	pop	r29
     924:	cf 91       	pop	r28
     926:	1f 91       	pop	r17
     928:	0f 91       	pop	r16
     92a:	ff 90       	pop	r15
     92c:	ef 90       	pop	r14
     92e:	df 90       	pop	r13
     930:	cf 90       	pop	r12
     932:	08 95       	ret

00000934 <_ZN7Display6analogEhhhh>:

void Display::analog(uint8_t stunde, uint8_t minute, uint8_t sekunde, uint8_t sekanzeige){
     934:	2f 92       	push	r2
     936:	3f 92       	push	r3
     938:	4f 92       	push	r4
     93a:	5f 92       	push	r5
     93c:	6f 92       	push	r6
     93e:	7f 92       	push	r7
     940:	8f 92       	push	r8
     942:	9f 92       	push	r9
     944:	af 92       	push	r10
     946:	bf 92       	push	r11
     948:	cf 92       	push	r12
     94a:	df 92       	push	r13
     94c:	ef 92       	push	r14
     94e:	ff 92       	push	r15
     950:	0f 93       	push	r16
     952:	1f 93       	push	r17
     954:	cf 93       	push	r28
     956:	df 93       	push	r29
     958:	cd b7       	in	r28, 0x3d	; 61
     95a:	de b7       	in	r29, 0x3e	; 62
     95c:	27 97       	sbiw	r28, 0x07	; 7
     95e:	0f b6       	in	r0, 0x3f	; 63
     960:	f8 94       	cli
     962:	de bf       	out	0x3e, r29	; 62
     964:	0f be       	out	0x3f, r0	; 63
     966:	cd bf       	out	0x3d, r28	; 61
     968:	9f 83       	std	Y+7, r25	; 0x07
     96a:	8e 83       	std	Y+6, r24	; 0x06
     96c:	6d 83       	std	Y+5, r22	; 0x05
     96e:	34 2e       	mov	r3, r20
	uint8_t Px=32-1;
	uint8_t Py=32-1;
	uint8_t x=0,y=0;
	float winkel=0;
	
	if (sekanzeige)
     970:	00 23       	and	r16, r16
     972:	09 f4       	brne	.+2      	; 0x976 <_ZN7Display6analogEhhhh+0x42>
     974:	26 c1       	rjmp	.+588    	; 0xbc2 <_ZN7Display6analogEhhhh+0x28e>
	{
		//Berechnen des Sekundenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(sekunde*6.0)*M_PI/180.0-M_PI/2.0;
     976:	62 2f       	mov	r22, r18
     978:	70 e0       	ldi	r23, 0x00	; 0
     97a:	80 e0       	ldi	r24, 0x00	; 0
     97c:	90 e0       	ldi	r25, 0x00	; 0
     97e:	0e 94 01 1b 	call	0x3602	; 0x3602 <__floatsisf>
     982:	20 e0       	ldi	r18, 0x00	; 0
     984:	30 e0       	ldi	r19, 0x00	; 0
     986:	40 ec       	ldi	r20, 0xC0	; 192
     988:	50 e4       	ldi	r21, 0x40	; 64
     98a:	0e 94 13 1c 	call	0x3826	; 0x3826 <__mulsf3>
     98e:	2b ed       	ldi	r18, 0xDB	; 219
     990:	3f e0       	ldi	r19, 0x0F	; 15
     992:	49 e4       	ldi	r20, 0x49	; 73
     994:	50 e4       	ldi	r21, 0x40	; 64
     996:	0e 94 13 1c 	call	0x3826	; 0x3826 <__mulsf3>
     99a:	20 e0       	ldi	r18, 0x00	; 0
     99c:	30 e0       	ldi	r19, 0x00	; 0
     99e:	44 e3       	ldi	r20, 0x34	; 52
     9a0:	53 e4       	ldi	r21, 0x43	; 67
     9a2:	0e 94 66 1a 	call	0x34cc	; 0x34cc <__divsf3>
     9a6:	2b ed       	ldi	r18, 0xDB	; 219
     9a8:	3f e0       	ldi	r19, 0x0F	; 15
     9aa:	49 ec       	ldi	r20, 0xC9	; 201
     9ac:	5f e3       	ldi	r21, 0x3F	; 63
     9ae:	0e 94 fe 19 	call	0x33fc	; 0x33fc <__subsf3>
     9b2:	6b 01       	movw	r12, r22
     9b4:	7c 01       	movw	r14, r24
			x=(uint8_t) i*cos(winkel)+Px;
     9b6:	0e 94 63 1a 	call	0x34c6	; 0x34c6 <cos>
     9ba:	4b 01       	movw	r8, r22
     9bc:	5c 01       	movw	r10, r24
			y=(uint8_t) i*sin(winkel)+Py;
     9be:	c7 01       	movw	r24, r14
     9c0:	b6 01       	movw	r22, r12
     9c2:	0e 94 76 1c 	call	0x38ec	; 0x38ec <sin>
     9c6:	2b 01       	movw	r4, r22
     9c8:	3c 01       	movw	r6, r24
     9ca:	00 e0       	ldi	r16, 0x00	; 0
     9cc:	10 e0       	ldi	r17, 0x00	; 0
	if (sekanzeige)
	{
		//Berechnen des Sekundenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(sekunde*6.0)*M_PI/180.0-M_PI/2.0;
			x=(uint8_t) i*cos(winkel)+Px;
     9ce:	b8 01       	movw	r22, r16
     9d0:	01 2e       	mov	r0, r17
     9d2:	00 0c       	add	r0, r0
     9d4:	88 0b       	sbc	r24, r24
     9d6:	99 0b       	sbc	r25, r25
     9d8:	0e 94 01 1b 	call	0x3602	; 0x3602 <__floatsisf>
     9dc:	6b 01       	movw	r12, r22
     9de:	7c 01       	movw	r14, r24
			y=(uint8_t) i*sin(winkel)+Py;
     9e0:	a3 01       	movw	r20, r6
     9e2:	92 01       	movw	r18, r4
     9e4:	0e 94 13 1c 	call	0x3826	; 0x3826 <__mulsf3>
     9e8:	20 e0       	ldi	r18, 0x00	; 0
     9ea:	30 e0       	ldi	r19, 0x00	; 0
     9ec:	48 ef       	ldi	r20, 0xF8	; 248
     9ee:	51 e4       	ldi	r21, 0x41	; 65
     9f0:	0e 94 ff 19 	call	0x33fe	; 0x33fe <__addsf3>
     9f4:	0e 94 d3 1a 	call	0x35a6	; 0x35a6 <__fixunssfsi>
     9f8:	26 2e       	mov	r2, r22
	if (sekanzeige)
	{
		//Berechnen des Sekundenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(sekunde*6.0)*M_PI/180.0-M_PI/2.0;
			x=(uint8_t) i*cos(winkel)+Px;
     9fa:	a5 01       	movw	r20, r10
     9fc:	94 01       	movw	r18, r8
     9fe:	c7 01       	movw	r24, r14
     a00:	b6 01       	movw	r22, r12
     a02:	0e 94 13 1c 	call	0x3826	; 0x3826 <__mulsf3>
     a06:	20 e0       	ldi	r18, 0x00	; 0
     a08:	30 e0       	ldi	r19, 0x00	; 0
     a0a:	48 ef       	ldi	r20, 0xF8	; 248
     a0c:	51 e4       	ldi	r21, 0x41	; 65
     a0e:	0e 94 ff 19 	call	0x33fe	; 0x33fe <__addsf3>
     a12:	0e 94 d3 1a 	call	0x35a6	; 0x35a6 <__fixunssfsi>
			y=(uint8_t) i*sin(winkel)+Py;

			drawPixel(x,y,0);
     a16:	20 e0       	ldi	r18, 0x00	; 0
     a18:	42 2d       	mov	r20, r2
     a1a:	8e 81       	ldd	r24, Y+6	; 0x06
     a1c:	9f 81       	ldd	r25, Y+7	; 0x07
     a1e:	5a de       	rcall	.-844    	; 0x6d4 <_ZN7Display9drawPixelEhhh>
     a20:	0f 5f       	subi	r16, 0xFF	; 255
     a22:	1f 4f       	sbci	r17, 0xFF	; 255
	float winkel=0;
	
	if (sekanzeige)
	{
		//Berechnen des Sekundenzeigers
		for(uint8_t i=0;i<r;i++){
     a24:	09 31       	cpi	r16, 0x19	; 25
     a26:	11 05       	cpc	r17, r1
     a28:	91 f6       	brne	.-92     	; 0x9ce <_ZN7Display6analogEhhhh+0x9a>
		}

		r=21;
		//Berechnen des Minutenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(minute*6.0)*M_PI/180.0-M_PI/2.0;
     a2a:	63 2d       	mov	r22, r3
     a2c:	70 e0       	ldi	r23, 0x00	; 0
     a2e:	80 e0       	ldi	r24, 0x00	; 0
     a30:	90 e0       	ldi	r25, 0x00	; 0
     a32:	0e 94 01 1b 	call	0x3602	; 0x3602 <__floatsisf>
     a36:	69 83       	std	Y+1, r22	; 0x01
     a38:	7a 83       	std	Y+2, r23	; 0x02
     a3a:	8b 83       	std	Y+3, r24	; 0x03
     a3c:	9c 83       	std	Y+4, r25	; 0x04
     a3e:	20 e0       	ldi	r18, 0x00	; 0
     a40:	30 e0       	ldi	r19, 0x00	; 0
     a42:	40 ec       	ldi	r20, 0xC0	; 192
     a44:	50 e4       	ldi	r21, 0x40	; 64
     a46:	0e 94 13 1c 	call	0x3826	; 0x3826 <__mulsf3>
     a4a:	2b ed       	ldi	r18, 0xDB	; 219
     a4c:	3f e0       	ldi	r19, 0x0F	; 15
     a4e:	49 e4       	ldi	r20, 0x49	; 73
     a50:	50 e4       	ldi	r21, 0x40	; 64
     a52:	0e 94 13 1c 	call	0x3826	; 0x3826 <__mulsf3>
     a56:	20 e0       	ldi	r18, 0x00	; 0
     a58:	30 e0       	ldi	r19, 0x00	; 0
     a5a:	44 e3       	ldi	r20, 0x34	; 52
     a5c:	53 e4       	ldi	r21, 0x43	; 67
     a5e:	0e 94 66 1a 	call	0x34cc	; 0x34cc <__divsf3>
     a62:	2b ed       	ldi	r18, 0xDB	; 219
     a64:	3f e0       	ldi	r19, 0x0F	; 15
     a66:	49 ec       	ldi	r20, 0xC9	; 201
     a68:	5f e3       	ldi	r21, 0x3F	; 63
     a6a:	0e 94 fe 19 	call	0x33fc	; 0x33fc <__subsf3>
     a6e:	6b 01       	movw	r12, r22
     a70:	7c 01       	movw	r14, r24
			x=(uint8_t) i*cos(winkel)+Px;
     a72:	0e 94 63 1a 	call	0x34c6	; 0x34c6 <cos>
     a76:	2b 01       	movw	r4, r22
     a78:	3c 01       	movw	r6, r24
			y=(uint8_t) i*sin(winkel)+Py;
     a7a:	c7 01       	movw	r24, r14
     a7c:	b6 01       	movw	r22, r12
     a7e:	0e 94 76 1c 	call	0x38ec	; 0x38ec <sin>
     a82:	4b 01       	movw	r8, r22
     a84:	5c 01       	movw	r10, r24
     a86:	00 e0       	ldi	r16, 0x00	; 0
     a88:	10 e0       	ldi	r17, 0x00	; 0

		r=21;
		//Berechnen des Minutenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(minute*6.0)*M_PI/180.0-M_PI/2.0;
			x=(uint8_t) i*cos(winkel)+Px;
     a8a:	b8 01       	movw	r22, r16
     a8c:	01 2e       	mov	r0, r17
     a8e:	00 0c       	add	r0, r0
     a90:	88 0b       	sbc	r24, r24
     a92:	99 0b       	sbc	r25, r25
     a94:	0e 94 01 1b 	call	0x3602	; 0x3602 <__floatsisf>
     a98:	6b 01       	movw	r12, r22
     a9a:	7c 01       	movw	r14, r24
			y=(uint8_t) i*sin(winkel)+Py;
     a9c:	a5 01       	movw	r20, r10
     a9e:	94 01       	movw	r18, r8
     aa0:	0e 94 13 1c 	call	0x3826	; 0x3826 <__mulsf3>
     aa4:	20 e0       	ldi	r18, 0x00	; 0
     aa6:	30 e0       	ldi	r19, 0x00	; 0
     aa8:	48 ef       	ldi	r20, 0xF8	; 248
     aaa:	51 e4       	ldi	r21, 0x41	; 65
     aac:	0e 94 ff 19 	call	0x33fe	; 0x33fe <__addsf3>
     ab0:	0e 94 d3 1a 	call	0x35a6	; 0x35a6 <__fixunssfsi>
     ab4:	36 2e       	mov	r3, r22

		r=21;
		//Berechnen des Minutenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(minute*6.0)*M_PI/180.0-M_PI/2.0;
			x=(uint8_t) i*cos(winkel)+Px;
     ab6:	a3 01       	movw	r20, r6
     ab8:	92 01       	movw	r18, r4
     aba:	c7 01       	movw	r24, r14
     abc:	b6 01       	movw	r22, r12
     abe:	0e 94 13 1c 	call	0x3826	; 0x3826 <__mulsf3>
     ac2:	20 e0       	ldi	r18, 0x00	; 0
     ac4:	30 e0       	ldi	r19, 0x00	; 0
     ac6:	48 ef       	ldi	r20, 0xF8	; 248
     ac8:	51 e4       	ldi	r21, 0x41	; 65
     aca:	0e 94 ff 19 	call	0x33fe	; 0x33fe <__addsf3>
     ace:	0e 94 d3 1a 	call	0x35a6	; 0x35a6 <__fixunssfsi>
			y=(uint8_t) i*sin(winkel)+Py;

			drawPixel(x,y,0);
     ad2:	20 e0       	ldi	r18, 0x00	; 0
     ad4:	43 2d       	mov	r20, r3
     ad6:	8e 81       	ldd	r24, Y+6	; 0x06
     ad8:	9f 81       	ldd	r25, Y+7	; 0x07
     ada:	fc dd       	rcall	.-1032   	; 0x6d4 <_ZN7Display9drawPixelEhhh>
     adc:	0f 5f       	subi	r16, 0xFF	; 255
     ade:	1f 4f       	sbci	r17, 0xFF	; 255
			drawPixel(x,y,0);
		}

		r=21;
		//Berechnen des Minutenzeigers
		for(uint8_t i=0;i<r;i++){
     ae0:	05 31       	cpi	r16, 0x15	; 21
     ae2:	11 05       	cpc	r17, r1
     ae4:	91 f6       	brne	.-92     	; 0xa8a <_ZN7Display6analogEhhhh+0x156>
		}

		r=13;
		//Berechnen des Stundenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(stunde*30.0+minute/2.0)*M_PI/180.0-M_PI/2.0;
     ae6:	2d 81       	ldd	r18, Y+5	; 0x05
     ae8:	62 2f       	mov	r22, r18
     aea:	70 e0       	ldi	r23, 0x00	; 0
     aec:	80 e0       	ldi	r24, 0x00	; 0
     aee:	90 e0       	ldi	r25, 0x00	; 0
     af0:	0e 94 01 1b 	call	0x3602	; 0x3602 <__floatsisf>
     af4:	20 e0       	ldi	r18, 0x00	; 0
     af6:	30 e0       	ldi	r19, 0x00	; 0
     af8:	40 ef       	ldi	r20, 0xF0	; 240
     afa:	51 e4       	ldi	r21, 0x41	; 65
     afc:	0e 94 13 1c 	call	0x3826	; 0x3826 <__mulsf3>
     b00:	6b 01       	movw	r12, r22
     b02:	7c 01       	movw	r14, r24
     b04:	20 e0       	ldi	r18, 0x00	; 0
     b06:	30 e0       	ldi	r19, 0x00	; 0
     b08:	40 e0       	ldi	r20, 0x00	; 0
     b0a:	5f e3       	ldi	r21, 0x3F	; 63
     b0c:	69 81       	ldd	r22, Y+1	; 0x01
     b0e:	7a 81       	ldd	r23, Y+2	; 0x02
     b10:	8b 81       	ldd	r24, Y+3	; 0x03
     b12:	9c 81       	ldd	r25, Y+4	; 0x04
     b14:	0e 94 13 1c 	call	0x3826	; 0x3826 <__mulsf3>
     b18:	9b 01       	movw	r18, r22
     b1a:	ac 01       	movw	r20, r24
     b1c:	c7 01       	movw	r24, r14
     b1e:	b6 01       	movw	r22, r12
     b20:	0e 94 ff 19 	call	0x33fe	; 0x33fe <__addsf3>
     b24:	2b ed       	ldi	r18, 0xDB	; 219
     b26:	3f e0       	ldi	r19, 0x0F	; 15
     b28:	49 e4       	ldi	r20, 0x49	; 73
     b2a:	50 e4       	ldi	r21, 0x40	; 64
     b2c:	0e 94 13 1c 	call	0x3826	; 0x3826 <__mulsf3>
     b30:	20 e0       	ldi	r18, 0x00	; 0
     b32:	30 e0       	ldi	r19, 0x00	; 0
     b34:	44 e3       	ldi	r20, 0x34	; 52
     b36:	53 e4       	ldi	r21, 0x43	; 67
     b38:	0e 94 66 1a 	call	0x34cc	; 0x34cc <__divsf3>
     b3c:	2b ed       	ldi	r18, 0xDB	; 219
     b3e:	3f e0       	ldi	r19, 0x0F	; 15
     b40:	49 ec       	ldi	r20, 0xC9	; 201
     b42:	5f e3       	ldi	r21, 0x3F	; 63
     b44:	0e 94 fe 19 	call	0x33fc	; 0x33fc <__subsf3>
     b48:	6b 01       	movw	r12, r22
     b4a:	7c 01       	movw	r14, r24
			x= (uint8_t) i*cos(winkel) +Px;
     b4c:	0e 94 63 1a 	call	0x34c6	; 0x34c6 <cos>
     b50:	4b 01       	movw	r8, r22
     b52:	5c 01       	movw	r10, r24
			y= (uint8_t) i*sin(winkel) +Py;
     b54:	c7 01       	movw	r24, r14
     b56:	b6 01       	movw	r22, r12
     b58:	0e 94 76 1c 	call	0x38ec	; 0x38ec <sin>
     b5c:	2b 01       	movw	r4, r22
     b5e:	3c 01       	movw	r6, r24
     b60:	00 e0       	ldi	r16, 0x00	; 0
     b62:	10 e0       	ldi	r17, 0x00	; 0

		r=13;
		//Berechnen des Stundenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(stunde*30.0+minute/2.0)*M_PI/180.0-M_PI/2.0;
			x= (uint8_t) i*cos(winkel) +Px;
     b64:	b8 01       	movw	r22, r16
     b66:	01 2e       	mov	r0, r17
     b68:	00 0c       	add	r0, r0
     b6a:	88 0b       	sbc	r24, r24
     b6c:	99 0b       	sbc	r25, r25
     b6e:	0e 94 01 1b 	call	0x3602	; 0x3602 <__floatsisf>
     b72:	6b 01       	movw	r12, r22
     b74:	7c 01       	movw	r14, r24
			y= (uint8_t) i*sin(winkel) +Py;
     b76:	a3 01       	movw	r20, r6
     b78:	92 01       	movw	r18, r4
     b7a:	0e 94 13 1c 	call	0x3826	; 0x3826 <__mulsf3>
     b7e:	20 e0       	ldi	r18, 0x00	; 0
     b80:	30 e0       	ldi	r19, 0x00	; 0
     b82:	48 ef       	ldi	r20, 0xF8	; 248
     b84:	51 e4       	ldi	r21, 0x41	; 65
     b86:	0e 94 ff 19 	call	0x33fe	; 0x33fe <__addsf3>
     b8a:	0e 94 d3 1a 	call	0x35a6	; 0x35a6 <__fixunssfsi>
     b8e:	36 2e       	mov	r3, r22

		r=13;
		//Berechnen des Stundenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(stunde*30.0+minute/2.0)*M_PI/180.0-M_PI/2.0;
			x= (uint8_t) i*cos(winkel) +Px;
     b90:	a5 01       	movw	r20, r10
     b92:	94 01       	movw	r18, r8
     b94:	c7 01       	movw	r24, r14
     b96:	b6 01       	movw	r22, r12
     b98:	0e 94 13 1c 	call	0x3826	; 0x3826 <__mulsf3>
     b9c:	20 e0       	ldi	r18, 0x00	; 0
     b9e:	30 e0       	ldi	r19, 0x00	; 0
     ba0:	48 ef       	ldi	r20, 0xF8	; 248
     ba2:	51 e4       	ldi	r21, 0x41	; 65
     ba4:	0e 94 ff 19 	call	0x33fe	; 0x33fe <__addsf3>
     ba8:	0e 94 d3 1a 	call	0x35a6	; 0x35a6 <__fixunssfsi>
			y= (uint8_t) i*sin(winkel) +Py;

			drawPixel(x,y,0);
     bac:	20 e0       	ldi	r18, 0x00	; 0
     bae:	43 2d       	mov	r20, r3
     bb0:	8e 81       	ldd	r24, Y+6	; 0x06
     bb2:	9f 81       	ldd	r25, Y+7	; 0x07
     bb4:	8f dd       	rcall	.-1250   	; 0x6d4 <_ZN7Display9drawPixelEhhh>
     bb6:	0f 5f       	subi	r16, 0xFF	; 255
     bb8:	1f 4f       	sbci	r17, 0xFF	; 255
			drawPixel(x,y,0);
		}

		r=13;
		//Berechnen des Stundenzeigers
		for(uint8_t i=0;i<r;i++){
     bba:	0d 30       	cpi	r16, 0x0D	; 13
     bbc:	11 05       	cpc	r17, r1
     bbe:	91 f6       	brne	.-92     	; 0xb64 <_ZN7Display6analogEhhhh+0x230>
     bc0:	cb c0       	rjmp	.+406    	; 0xd58 <_ZN7Display6analogEhhhh+0x424>
	}
	else{
		r=25;
		//Berechnen des Minutenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(minute*6.0)*M_PI/180.0-M_PI/2.0;
     bc2:	64 2f       	mov	r22, r20
     bc4:	70 e0       	ldi	r23, 0x00	; 0
     bc6:	80 e0       	ldi	r24, 0x00	; 0
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	0e 94 01 1b 	call	0x3602	; 0x3602 <__floatsisf>
     bce:	69 83       	std	Y+1, r22	; 0x01
     bd0:	7a 83       	std	Y+2, r23	; 0x02
     bd2:	8b 83       	std	Y+3, r24	; 0x03
     bd4:	9c 83       	std	Y+4, r25	; 0x04
     bd6:	20 e0       	ldi	r18, 0x00	; 0
     bd8:	30 e0       	ldi	r19, 0x00	; 0
     bda:	40 ec       	ldi	r20, 0xC0	; 192
     bdc:	50 e4       	ldi	r21, 0x40	; 64
     bde:	0e 94 13 1c 	call	0x3826	; 0x3826 <__mulsf3>
     be2:	2b ed       	ldi	r18, 0xDB	; 219
     be4:	3f e0       	ldi	r19, 0x0F	; 15
     be6:	49 e4       	ldi	r20, 0x49	; 73
     be8:	50 e4       	ldi	r21, 0x40	; 64
     bea:	0e 94 13 1c 	call	0x3826	; 0x3826 <__mulsf3>
     bee:	20 e0       	ldi	r18, 0x00	; 0
     bf0:	30 e0       	ldi	r19, 0x00	; 0
     bf2:	44 e3       	ldi	r20, 0x34	; 52
     bf4:	53 e4       	ldi	r21, 0x43	; 67
     bf6:	0e 94 66 1a 	call	0x34cc	; 0x34cc <__divsf3>
     bfa:	2b ed       	ldi	r18, 0xDB	; 219
     bfc:	3f e0       	ldi	r19, 0x0F	; 15
     bfe:	49 ec       	ldi	r20, 0xC9	; 201
     c00:	5f e3       	ldi	r21, 0x3F	; 63
     c02:	0e 94 fe 19 	call	0x33fc	; 0x33fc <__subsf3>
     c06:	6b 01       	movw	r12, r22
     c08:	7c 01       	movw	r14, r24
			x=(uint8_t) i*cos(winkel)+Px;
     c0a:	0e 94 63 1a 	call	0x34c6	; 0x34c6 <cos>
     c0e:	2b 01       	movw	r4, r22
     c10:	3c 01       	movw	r6, r24
			y=(uint8_t) i*sin(winkel)+Py;
     c12:	c7 01       	movw	r24, r14
     c14:	b6 01       	movw	r22, r12
     c16:	0e 94 76 1c 	call	0x38ec	; 0x38ec <sin>
     c1a:	4b 01       	movw	r8, r22
     c1c:	5c 01       	movw	r10, r24
     c1e:	00 e0       	ldi	r16, 0x00	; 0
     c20:	10 e0       	ldi	r17, 0x00	; 0
	else{
		r=25;
		//Berechnen des Minutenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(minute*6.0)*M_PI/180.0-M_PI/2.0;
			x=(uint8_t) i*cos(winkel)+Px;
     c22:	b8 01       	movw	r22, r16
     c24:	01 2e       	mov	r0, r17
     c26:	00 0c       	add	r0, r0
     c28:	88 0b       	sbc	r24, r24
     c2a:	99 0b       	sbc	r25, r25
     c2c:	0e 94 01 1b 	call	0x3602	; 0x3602 <__floatsisf>
     c30:	6b 01       	movw	r12, r22
     c32:	7c 01       	movw	r14, r24
			y=(uint8_t) i*sin(winkel)+Py;
     c34:	a5 01       	movw	r20, r10
     c36:	94 01       	movw	r18, r8
     c38:	0e 94 13 1c 	call	0x3826	; 0x3826 <__mulsf3>
     c3c:	20 e0       	ldi	r18, 0x00	; 0
     c3e:	30 e0       	ldi	r19, 0x00	; 0
     c40:	48 ef       	ldi	r20, 0xF8	; 248
     c42:	51 e4       	ldi	r21, 0x41	; 65
     c44:	0e 94 ff 19 	call	0x33fe	; 0x33fe <__addsf3>
     c48:	0e 94 d3 1a 	call	0x35a6	; 0x35a6 <__fixunssfsi>
     c4c:	36 2e       	mov	r3, r22
	else{
		r=25;
		//Berechnen des Minutenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(minute*6.0)*M_PI/180.0-M_PI/2.0;
			x=(uint8_t) i*cos(winkel)+Px;
     c4e:	a3 01       	movw	r20, r6
     c50:	92 01       	movw	r18, r4
     c52:	c7 01       	movw	r24, r14
     c54:	b6 01       	movw	r22, r12
     c56:	0e 94 13 1c 	call	0x3826	; 0x3826 <__mulsf3>
     c5a:	20 e0       	ldi	r18, 0x00	; 0
     c5c:	30 e0       	ldi	r19, 0x00	; 0
     c5e:	48 ef       	ldi	r20, 0xF8	; 248
     c60:	51 e4       	ldi	r21, 0x41	; 65
     c62:	0e 94 ff 19 	call	0x33fe	; 0x33fe <__addsf3>
     c66:	0e 94 d3 1a 	call	0x35a6	; 0x35a6 <__fixunssfsi>
			y=(uint8_t) i*sin(winkel)+Py;

			drawPixel(x,y,0);
     c6a:	20 e0       	ldi	r18, 0x00	; 0
     c6c:	43 2d       	mov	r20, r3
     c6e:	8e 81       	ldd	r24, Y+6	; 0x06
     c70:	9f 81       	ldd	r25, Y+7	; 0x07
     c72:	30 dd       	rcall	.-1440   	; 0x6d4 <_ZN7Display9drawPixelEhhh>
     c74:	0f 5f       	subi	r16, 0xFF	; 255
     c76:	1f 4f       	sbci	r17, 0xFF	; 255
		}
	}
	else{
		r=25;
		//Berechnen des Minutenzeigers
		for(uint8_t i=0;i<r;i++){
     c78:	09 31       	cpi	r16, 0x19	; 25
     c7a:	11 05       	cpc	r17, r1
     c7c:	91 f6       	brne	.-92     	; 0xc22 <_ZN7Display6analogEhhhh+0x2ee>
		}

		r=17;
		//Berechnen des Stundenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(stunde*30.0+minute/2.0)*M_PI/180.0-M_PI/2.0;
     c7e:	ed 81       	ldd	r30, Y+5	; 0x05
     c80:	6e 2f       	mov	r22, r30
     c82:	70 e0       	ldi	r23, 0x00	; 0
     c84:	80 e0       	ldi	r24, 0x00	; 0
     c86:	90 e0       	ldi	r25, 0x00	; 0
     c88:	0e 94 01 1b 	call	0x3602	; 0x3602 <__floatsisf>
     c8c:	20 e0       	ldi	r18, 0x00	; 0
     c8e:	30 e0       	ldi	r19, 0x00	; 0
     c90:	40 ef       	ldi	r20, 0xF0	; 240
     c92:	51 e4       	ldi	r21, 0x41	; 65
     c94:	0e 94 13 1c 	call	0x3826	; 0x3826 <__mulsf3>
     c98:	6b 01       	movw	r12, r22
     c9a:	7c 01       	movw	r14, r24
     c9c:	20 e0       	ldi	r18, 0x00	; 0
     c9e:	30 e0       	ldi	r19, 0x00	; 0
     ca0:	40 e0       	ldi	r20, 0x00	; 0
     ca2:	5f e3       	ldi	r21, 0x3F	; 63
     ca4:	69 81       	ldd	r22, Y+1	; 0x01
     ca6:	7a 81       	ldd	r23, Y+2	; 0x02
     ca8:	8b 81       	ldd	r24, Y+3	; 0x03
     caa:	9c 81       	ldd	r25, Y+4	; 0x04
     cac:	0e 94 13 1c 	call	0x3826	; 0x3826 <__mulsf3>
     cb0:	9b 01       	movw	r18, r22
     cb2:	ac 01       	movw	r20, r24
     cb4:	c7 01       	movw	r24, r14
     cb6:	b6 01       	movw	r22, r12
     cb8:	0e 94 ff 19 	call	0x33fe	; 0x33fe <__addsf3>
     cbc:	2b ed       	ldi	r18, 0xDB	; 219
     cbe:	3f e0       	ldi	r19, 0x0F	; 15
     cc0:	49 e4       	ldi	r20, 0x49	; 73
     cc2:	50 e4       	ldi	r21, 0x40	; 64
     cc4:	0e 94 13 1c 	call	0x3826	; 0x3826 <__mulsf3>
     cc8:	20 e0       	ldi	r18, 0x00	; 0
     cca:	30 e0       	ldi	r19, 0x00	; 0
     ccc:	44 e3       	ldi	r20, 0x34	; 52
     cce:	53 e4       	ldi	r21, 0x43	; 67
     cd0:	0e 94 66 1a 	call	0x34cc	; 0x34cc <__divsf3>
     cd4:	2b ed       	ldi	r18, 0xDB	; 219
     cd6:	3f e0       	ldi	r19, 0x0F	; 15
     cd8:	49 ec       	ldi	r20, 0xC9	; 201
     cda:	5f e3       	ldi	r21, 0x3F	; 63
     cdc:	0e 94 fe 19 	call	0x33fc	; 0x33fc <__subsf3>
     ce0:	6b 01       	movw	r12, r22
     ce2:	7c 01       	movw	r14, r24
			x= (uint8_t) i*cos(winkel) +Px;
     ce4:	0e 94 63 1a 	call	0x34c6	; 0x34c6 <cos>
     ce8:	4b 01       	movw	r8, r22
     cea:	5c 01       	movw	r10, r24
			y= (uint8_t) i*sin(winkel) +Py;
     cec:	c7 01       	movw	r24, r14
     cee:	b6 01       	movw	r22, r12
     cf0:	0e 94 76 1c 	call	0x38ec	; 0x38ec <sin>
     cf4:	2b 01       	movw	r4, r22
     cf6:	3c 01       	movw	r6, r24
     cf8:	00 e0       	ldi	r16, 0x00	; 0
     cfa:	10 e0       	ldi	r17, 0x00	; 0

		r=17;
		//Berechnen des Stundenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(stunde*30.0+minute/2.0)*M_PI/180.0-M_PI/2.0;
			x= (uint8_t) i*cos(winkel) +Px;
     cfc:	b8 01       	movw	r22, r16
     cfe:	01 2e       	mov	r0, r17
     d00:	00 0c       	add	r0, r0
     d02:	88 0b       	sbc	r24, r24
     d04:	99 0b       	sbc	r25, r25
     d06:	0e 94 01 1b 	call	0x3602	; 0x3602 <__floatsisf>
     d0a:	6b 01       	movw	r12, r22
     d0c:	7c 01       	movw	r14, r24
			y= (uint8_t) i*sin(winkel) +Py;
     d0e:	a3 01       	movw	r20, r6
     d10:	92 01       	movw	r18, r4
     d12:	0e 94 13 1c 	call	0x3826	; 0x3826 <__mulsf3>
     d16:	20 e0       	ldi	r18, 0x00	; 0
     d18:	30 e0       	ldi	r19, 0x00	; 0
     d1a:	48 ef       	ldi	r20, 0xF8	; 248
     d1c:	51 e4       	ldi	r21, 0x41	; 65
     d1e:	0e 94 ff 19 	call	0x33fe	; 0x33fe <__addsf3>
     d22:	0e 94 d3 1a 	call	0x35a6	; 0x35a6 <__fixunssfsi>
     d26:	36 2e       	mov	r3, r22

		r=17;
		//Berechnen des Stundenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(stunde*30.0+minute/2.0)*M_PI/180.0-M_PI/2.0;
			x= (uint8_t) i*cos(winkel) +Px;
     d28:	a5 01       	movw	r20, r10
     d2a:	94 01       	movw	r18, r8
     d2c:	c7 01       	movw	r24, r14
     d2e:	b6 01       	movw	r22, r12
     d30:	0e 94 13 1c 	call	0x3826	; 0x3826 <__mulsf3>
     d34:	20 e0       	ldi	r18, 0x00	; 0
     d36:	30 e0       	ldi	r19, 0x00	; 0
     d38:	48 ef       	ldi	r20, 0xF8	; 248
     d3a:	51 e4       	ldi	r21, 0x41	; 65
     d3c:	0e 94 ff 19 	call	0x33fe	; 0x33fe <__addsf3>
     d40:	0e 94 d3 1a 	call	0x35a6	; 0x35a6 <__fixunssfsi>
			y= (uint8_t) i*sin(winkel) +Py;

			drawPixel(x,y,0);
     d44:	20 e0       	ldi	r18, 0x00	; 0
     d46:	43 2d       	mov	r20, r3
     d48:	8e 81       	ldd	r24, Y+6	; 0x06
     d4a:	9f 81       	ldd	r25, Y+7	; 0x07
     d4c:	c3 dc       	rcall	.-1658   	; 0x6d4 <_ZN7Display9drawPixelEhhh>
     d4e:	0f 5f       	subi	r16, 0xFF	; 255
     d50:	1f 4f       	sbci	r17, 0xFF	; 255
			drawPixel(x,y,0);
		}

		r=17;
		//Berechnen des Stundenzeigers
		for(uint8_t i=0;i<r;i++){
     d52:	01 31       	cpi	r16, 0x11	; 17
     d54:	11 05       	cpc	r17, r1
     d56:	91 f6       	brne	.-92     	; 0xcfc <_ZN7Display6analogEhhhh+0x3c8>
		}
	}
	

	//Anzeige der Zahlen
	draw_ASCI('1',32-charsize,0);
     d58:	20 e0       	ldi	r18, 0x00	; 0
     d5a:	4a e1       	ldi	r20, 0x1A	; 26
     d5c:	61 e3       	ldi	r22, 0x31	; 49
     d5e:	8e 81       	ldd	r24, Y+6	; 0x06
     d60:	9f 81       	ldd	r25, Y+7	; 0x07
     d62:	24 dd       	rcall	.-1464   	; 0x7ac <_ZN7Display9draw_ASCIEhhh>
	draw_ASCI('2',32,0);
     d64:	20 e0       	ldi	r18, 0x00	; 0
     d66:	40 e2       	ldi	r20, 0x20	; 32
     d68:	62 e3       	ldi	r22, 0x32	; 50
     d6a:	8e 81       	ldd	r24, Y+6	; 0x06
     d6c:	9f 81       	ldd	r25, Y+7	; 0x07
     d6e:	1e dd       	rcall	.-1476   	; 0x7ac <_ZN7Display9draw_ASCIEhhh>
	draw_ASCI('3',64-charsize,4*charhighte-charhighte/2);
     d70:	2c e1       	ldi	r18, 0x1C	; 28
     d72:	4a e3       	ldi	r20, 0x3A	; 58
     d74:	63 e3       	ldi	r22, 0x33	; 51
     d76:	8e 81       	ldd	r24, Y+6	; 0x06
     d78:	9f 81       	ldd	r25, Y+7	; 0x07
     d7a:	18 dd       	rcall	.-1488   	; 0x7ac <_ZN7Display9draw_ASCIEhhh>
	draw_ASCI('6',32-charsize/2,7*charhighte);
     d7c:	28 e3       	ldi	r18, 0x38	; 56
     d7e:	4d e1       	ldi	r20, 0x1D	; 29
     d80:	66 e3       	ldi	r22, 0x36	; 54
     d82:	8e 81       	ldd	r24, Y+6	; 0x06
     d84:	9f 81       	ldd	r25, Y+7	; 0x07
     d86:	12 dd       	rcall	.-1500   	; 0x7ac <_ZN7Display9draw_ASCIEhhh>
	draw_ASCI('9',0,4*charhighte-charhighte/2);
     d88:	2c e1       	ldi	r18, 0x1C	; 28
     d8a:	40 e0       	ldi	r20, 0x00	; 0
     d8c:	69 e3       	ldi	r22, 0x39	; 57
     d8e:	8e 81       	ldd	r24, Y+6	; 0x06
     d90:	9f 81       	ldd	r25, Y+7	; 0x07
     d92:	0c dd       	rcall	.-1512   	; 0x7ac <_ZN7Display9draw_ASCIEhhh>

	//anzeige des Rings fuer die Restlichen Stunden Zahlen
	//1
	drawPixel(26*cos((30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
     d94:	20 e0       	ldi	r18, 0x00	; 0
     d96:	48 e0       	ldi	r20, 0x08	; 8
     d98:	6c e2       	ldi	r22, 0x2C	; 44
     d9a:	8e 81       	ldd	r24, Y+6	; 0x06
     d9c:	9f 81       	ldd	r25, Y+7	; 0x07
     d9e:	9a dc       	rcall	.-1740   	; 0x6d4 <_ZN7Display9drawPixelEhhh>
	//2
	drawPixel(26*cos((2*30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((2*30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
     da0:	20 e0       	ldi	r18, 0x00	; 0
     da2:	42 e1       	ldi	r20, 0x12	; 18
     da4:	65 e3       	ldi	r22, 0x35	; 53
     da6:	8e 81       	ldd	r24, Y+6	; 0x06
     da8:	9f 81       	ldd	r25, Y+7	; 0x07
     daa:	94 dc       	rcall	.-1752   	; 0x6d4 <_ZN7Display9drawPixelEhhh>
	//4
	drawPixel(26*cos((4*30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((4*30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
     dac:	20 e0       	ldi	r18, 0x00	; 0
     dae:	4c e2       	ldi	r20, 0x2C	; 44
     db0:	65 e3       	ldi	r22, 0x35	; 53
     db2:	8e 81       	ldd	r24, Y+6	; 0x06
     db4:	9f 81       	ldd	r25, Y+7	; 0x07
     db6:	8e dc       	rcall	.-1764   	; 0x6d4 <_ZN7Display9drawPixelEhhh>
	//5
	drawPixel(26*cos((5*30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((5*30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
     db8:	20 e0       	ldi	r18, 0x00	; 0
     dba:	45 e3       	ldi	r20, 0x35	; 53
     dbc:	6b e2       	ldi	r22, 0x2B	; 43
     dbe:	8e 81       	ldd	r24, Y+6	; 0x06
     dc0:	9f 81       	ldd	r25, Y+7	; 0x07
     dc2:	88 dc       	rcall	.-1776   	; 0x6d4 <_ZN7Display9drawPixelEhhh>
	//7
	drawPixel(26*cos((7*30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((7*30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
     dc4:	20 e0       	ldi	r18, 0x00	; 0
     dc6:	45 e3       	ldi	r20, 0x35	; 53
     dc8:	61 e1       	ldi	r22, 0x11	; 17
     dca:	8e 81       	ldd	r24, Y+6	; 0x06
     dcc:	9f 81       	ldd	r25, Y+7	; 0x07
     dce:	82 dc       	rcall	.-1788   	; 0x6d4 <_ZN7Display9drawPixelEhhh>
	//8
	drawPixel(26*cos((8*30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((8*30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
     dd0:	20 e0       	ldi	r18, 0x00	; 0
     dd2:	4c e2       	ldi	r20, 0x2C	; 44
     dd4:	68 e0       	ldi	r22, 0x08	; 8
     dd6:	8e 81       	ldd	r24, Y+6	; 0x06
     dd8:	9f 81       	ldd	r25, Y+7	; 0x07
     dda:	7c dc       	rcall	.-1800   	; 0x6d4 <_ZN7Display9drawPixelEhhh>
	//10
	drawPixel(26*cos((10*30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((10*30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
     ddc:	20 e0       	ldi	r18, 0x00	; 0
     dde:	41 e1       	ldi	r20, 0x11	; 17
     de0:	68 e0       	ldi	r22, 0x08	; 8
     de2:	8e 81       	ldd	r24, Y+6	; 0x06
     de4:	9f 81       	ldd	r25, Y+7	; 0x07
     de6:	76 dc       	rcall	.-1812   	; 0x6d4 <_ZN7Display9drawPixelEhhh>
	//11
	drawPixel(26*cos((11*30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((11*30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
     de8:	20 e0       	ldi	r18, 0x00	; 0
     dea:	48 e0       	ldi	r20, 0x08	; 8
     dec:	62 e1       	ldi	r22, 0x12	; 18
     dee:	8e 81       	ldd	r24, Y+6	; 0x06
     df0:	9f 81       	ldd	r25, Y+7	; 0x07
     df2:	70 dc       	rcall	.-1824   	; 0x6d4 <_ZN7Display9drawPixelEhhh>
}
     df4:	27 96       	adiw	r28, 0x07	; 7
     df6:	0f b6       	in	r0, 0x3f	; 63
     df8:	f8 94       	cli
     dfa:	de bf       	out	0x3e, r29	; 62
     dfc:	0f be       	out	0x3f, r0	; 63
     dfe:	cd bf       	out	0x3d, r28	; 61
     e00:	df 91       	pop	r29
     e02:	cf 91       	pop	r28
     e04:	1f 91       	pop	r17
     e06:	0f 91       	pop	r16
     e08:	ff 90       	pop	r15
     e0a:	ef 90       	pop	r14
     e0c:	df 90       	pop	r13
     e0e:	cf 90       	pop	r12
     e10:	bf 90       	pop	r11
     e12:	af 90       	pop	r10
     e14:	9f 90       	pop	r9
     e16:	8f 90       	pop	r8
     e18:	7f 90       	pop	r7
     e1a:	6f 90       	pop	r6
     e1c:	5f 90       	pop	r5
     e1e:	4f 90       	pop	r4
     e20:	3f 90       	pop	r3
     e22:	2f 90       	pop	r2
     e24:	08 95       	ret

00000e26 <_ZN3I2CC1Ev>:
void I2C::twi_ack(){
	TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);
}
void I2C::twi_nack(){
	TWCR = (1<<TWINT) | (1<<TWEN);
	TWCR &= ~(1<<TWEA);
     e26:	82 e0       	ldi	r24, 0x02	; 2
     e28:	80 93 b8 00 	sts	0x00B8, r24
     e2c:	08 95       	ret

00000e2e <_ZN3I2CD1Ev>:
     e2e:	08 95       	ret

00000e30 <_ZN3I2C9twi_startEv>:
     e30:	84 ea       	ldi	r24, 0xA4	; 164
     e32:	80 93 bc 00 	sts	0x00BC, r24
     e36:	08 95       	ret

00000e38 <_ZN3I2C8twi_stopEv>:
     e38:	84 e9       	ldi	r24, 0x94	; 148
     e3a:	80 93 bc 00 	sts	0x00BC, r24
     e3e:	08 95       	ret

00000e40 <_ZN3I2C9twi_writeEh>:
}

void I2C::twi_write(uint8_t data){
	while(!(TWCR & (1<<TWINT)));
     e40:	ec eb       	ldi	r30, 0xBC	; 188
     e42:	f0 e0       	ldi	r31, 0x00	; 0
     e44:	80 81       	ld	r24, Z
     e46:	88 23       	and	r24, r24
     e48:	ec f7       	brge	.-6      	; 0xe44 <_ZN3I2C9twi_writeEh+0x4>
	TWDR = data;
     e4a:	60 93 bb 00 	sts	0x00BB, r22
	TWCR = (1<<TWINT) | (1<<TWEN);
     e4e:	84 e8       	ldi	r24, 0x84	; 132
     e50:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));
     e54:	ec eb       	ldi	r30, 0xBC	; 188
     e56:	f0 e0       	ldi	r31, 0x00	; 0
     e58:	80 81       	ld	r24, Z
     e5a:	88 23       	and	r24, r24
     e5c:	ec f7       	brge	.-6      	; 0xe58 <_ZN3I2C9twi_writeEh+0x18>
}
     e5e:	08 95       	ret

00000e60 <_ZN9InterfaceC1Ev>:
		default:
		abfrage = 0;
		break;
	}
	return abfrage;
}
     e60:	2a b1       	in	r18, 0x0a	; 10
     e62:	20 66       	ori	r18, 0x60	; 96
     e64:	2a b9       	out	0x0a, r18	; 10
     e66:	28 b1       	in	r18, 0x08	; 8
     e68:	23 7f       	andi	r18, 0xF3	; 243
     e6a:	28 b9       	out	0x08, r18	; 8
     e6c:	27 b1       	in	r18, 0x07	; 7
     e6e:	2c 60       	ori	r18, 0x0C	; 12
     e70:	27 b9       	out	0x07, r18	; 7
     e72:	2a b1       	in	r18, 0x0a	; 10
     e74:	23 7e       	andi	r18, 0xE3	; 227
     e76:	2a b9       	out	0x0a, r18	; 10
     e78:	fc 01       	movw	r30, r24
     e7a:	0c 96       	adiw	r24, 0x0c	; 12
     e7c:	11 92       	st	Z+, r1
     e7e:	e8 17       	cp	r30, r24
     e80:	f9 07       	cpc	r31, r25
     e82:	e1 f7       	brne	.-8      	; 0xe7c <_ZN9InterfaceC1Ev+0x1c>
     e84:	08 95       	ret

00000e86 <_ZN9InterfaceD1Ev>:
     e86:	08 95       	ret

00000e88 <_ZN9Interface7paradebEPVhhPh>:
     e88:	fb 01       	movw	r30, r22
     e8a:	80 81       	ld	r24, Z
     e8c:	90 e0       	ldi	r25, 0x00	; 0
     e8e:	04 2e       	mov	r0, r20
     e90:	02 c0       	rjmp	.+4      	; 0xe96 <_ZN9Interface7paradebEPVhhPh+0xe>
     e92:	95 95       	asr	r25
     e94:	87 95       	ror	r24
     e96:	0a 94       	dec	r0
     e98:	e2 f7       	brpl	.-8      	; 0xe92 <_ZN9Interface7paradebEPVhhPh+0xa>
     e9a:	80 ff       	sbrs	r24, 0
     e9c:	05 c0       	rjmp	.+10     	; 0xea8 <_ZN9Interface7paradebEPVhhPh+0x20>
     e9e:	81 e0       	ldi	r24, 0x01	; 1
     ea0:	f9 01       	movw	r30, r18
     ea2:	80 83       	st	Z, r24
     ea4:	80 e0       	ldi	r24, 0x00	; 0
     ea6:	08 95       	ret
     ea8:	f9 01       	movw	r30, r18
     eaa:	80 81       	ld	r24, Z
     eac:	81 30       	cpi	r24, 0x01	; 1
     eae:	71 f4       	brne	.+28     	; 0xecc <_ZN9Interface7paradebEPVhhPh+0x44>
     eb0:	fb 01       	movw	r30, r22
     eb2:	60 81       	ld	r22, Z
     eb4:	70 e0       	ldi	r23, 0x00	; 0
     eb6:	fb 01       	movw	r30, r22
     eb8:	02 c0       	rjmp	.+4      	; 0xebe <_ZN9Interface7paradebEPVhhPh+0x36>
     eba:	f5 95       	asr	r31
     ebc:	e7 95       	ror	r30
     ebe:	4a 95       	dec	r20
     ec0:	e2 f7       	brpl	.-8      	; 0xeba <_ZN9Interface7paradebEPVhhPh+0x32>
     ec2:	e0 fd       	sbrc	r30, 0
     ec4:	03 c0       	rjmp	.+6      	; 0xecc <_ZN9Interface7paradebEPVhhPh+0x44>
     ec6:	f9 01       	movw	r30, r18
     ec8:	10 82       	st	Z, r1
     eca:	08 95       	ret
     ecc:	f9 01       	movw	r30, r18
     ece:	10 82       	st	Z, r1
     ed0:	80 e0       	ldi	r24, 0x00	; 0
     ed2:	08 95       	ret

00000ed4 <_ZN9Interface6TasterEv>:

uint8_t Interface::Taster(){
     ed4:	1f 93       	push	r17
     ed6:	cf 93       	push	r28
     ed8:	df 93       	push	r29
     eda:	ec 01       	movw	r28, r24
	uint8_t taste = ' ';
	
	//erste Zeile
	PORTC |= (1<<PORTC3);
     edc:	43 9a       	sbi	0x08, 3	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     ede:	82 e0       	ldi	r24, 0x02	; 2
     ee0:	8a 95       	dec	r24
     ee2:	f1 f7       	brne	.-4      	; 0xee0 <_ZN9Interface6TasterEv+0xc>
     ee4:	00 c0       	rjmp	.+0      	; 0xee6 <_ZN9Interface6TasterEv+0x12>
	_delay_us(1);
	if(paradeb(&PIND,PIND4,&stat[2])){//debounce(&PIND,PIND4)){
     ee6:	9e 01       	movw	r18, r28
     ee8:	2e 5f       	subi	r18, 0xFE	; 254
     eea:	3f 4f       	sbci	r19, 0xFF	; 255
     eec:	44 e0       	ldi	r20, 0x04	; 4
     eee:	69 e2       	ldi	r22, 0x29	; 41
     ef0:	70 e0       	ldi	r23, 0x00	; 0
     ef2:	ce 01       	movw	r24, r28
     ef4:	c9 df       	rcall	.-110    	; 0xe88 <_ZN9Interface7paradebEPVhhPh>
     ef6:	81 11       	cpse	r24, r1
     ef8:	14 c0       	rjmp	.+40     	; 0xf22 <_ZN9Interface6TasterEv+0x4e>
		taste = '3';
	}
	else if (paradeb(&PIND,PIND3,&stat[1]))//debounce(&PIND,PIND3))
     efa:	9e 01       	movw	r18, r28
     efc:	2f 5f       	subi	r18, 0xFF	; 255
     efe:	3f 4f       	sbci	r19, 0xFF	; 255
     f00:	43 e0       	ldi	r20, 0x03	; 3
     f02:	69 e2       	ldi	r22, 0x29	; 41
     f04:	70 e0       	ldi	r23, 0x00	; 0
     f06:	ce 01       	movw	r24, r28
     f08:	bf df       	rcall	.-130    	; 0xe88 <_ZN9Interface7paradebEPVhhPh>
     f0a:	81 11       	cpse	r24, r1
     f0c:	0c c0       	rjmp	.+24     	; 0xf26 <_ZN9Interface6TasterEv+0x52>
	{
		taste = '2';
	}
	else if (paradeb(&PIND,PIND2,&stat[0]))//debounce(&PIND,PIND2))
     f0e:	9e 01       	movw	r18, r28
     f10:	42 e0       	ldi	r20, 0x02	; 2
     f12:	69 e2       	ldi	r22, 0x29	; 41
     f14:	70 e0       	ldi	r23, 0x00	; 0
     f16:	ce 01       	movw	r24, r28
     f18:	b7 df       	rcall	.-146    	; 0xe88 <_ZN9Interface7paradebEPVhhPh>
     f1a:	88 23       	and	r24, r24
     f1c:	31 f0       	breq	.+12     	; 0xf2a <_ZN9Interface6TasterEv+0x56>
	{
		taste = '1';
     f1e:	11 e3       	ldi	r17, 0x31	; 49
     f20:	05 c0       	rjmp	.+10     	; 0xf2c <_ZN9Interface6TasterEv+0x58>
	
	//erste Zeile
	PORTC |= (1<<PORTC3);
	_delay_us(1);
	if(paradeb(&PIND,PIND4,&stat[2])){//debounce(&PIND,PIND4)){
		taste = '3';
     f22:	13 e3       	ldi	r17, 0x33	; 51
     f24:	03 c0       	rjmp	.+6      	; 0xf2c <_ZN9Interface6TasterEv+0x58>
	}
	else if (paradeb(&PIND,PIND3,&stat[1]))//debounce(&PIND,PIND3))
	{
		taste = '2';
     f26:	12 e3       	ldi	r17, 0x32	; 50
     f28:	01 c0       	rjmp	.+2      	; 0xf2c <_ZN9Interface6TasterEv+0x58>
	}
	return abfrage;
}

uint8_t Interface::Taster(){
	uint8_t taste = ' ';
     f2a:	10 e2       	ldi	r17, 0x20	; 32
	}
	else if (paradeb(&PIND,PIND2,&stat[0]))//debounce(&PIND,PIND2))
	{
		taste = '1';
	}
	PORTC &= ~(1<<PORTC3);
     f2c:	43 98       	cbi	0x08, 3	; 8
	
	//zweite Zeile
	PORTC |= (1<<PORTC2);
     f2e:	42 9a       	sbi	0x08, 2	; 8
     f30:	82 e0       	ldi	r24, 0x02	; 2
     f32:	8a 95       	dec	r24
     f34:	f1 f7       	brne	.-4      	; 0xf32 <_ZN9Interface6TasterEv+0x5e>
     f36:	00 c0       	rjmp	.+0      	; 0xf38 <_ZN9Interface6TasterEv+0x64>
	_delay_us(1);
	if(paradeb(&PIND,PIND4,&stat[5])){//debounce(&PIND,PIND4)){
     f38:	9e 01       	movw	r18, r28
     f3a:	2b 5f       	subi	r18, 0xFB	; 251
     f3c:	3f 4f       	sbci	r19, 0xFF	; 255
     f3e:	44 e0       	ldi	r20, 0x04	; 4
     f40:	69 e2       	ldi	r22, 0x29	; 41
     f42:	70 e0       	ldi	r23, 0x00	; 0
     f44:	ce 01       	movw	r24, r28
     f46:	a0 df       	rcall	.-192    	; 0xe88 <_ZN9Interface7paradebEPVhhPh>
     f48:	81 11       	cpse	r24, r1
     f4a:	16 c0       	rjmp	.+44     	; 0xf78 <_ZN9Interface6TasterEv+0xa4>
		taste = '6';
	}
	else if (paradeb(&PIND,PIND3,&stat[4]))//debounce(&PIND,PIND3))
     f4c:	9e 01       	movw	r18, r28
     f4e:	2c 5f       	subi	r18, 0xFC	; 252
     f50:	3f 4f       	sbci	r19, 0xFF	; 255
     f52:	43 e0       	ldi	r20, 0x03	; 3
     f54:	69 e2       	ldi	r22, 0x29	; 41
     f56:	70 e0       	ldi	r23, 0x00	; 0
     f58:	ce 01       	movw	r24, r28
     f5a:	96 df       	rcall	.-212    	; 0xe88 <_ZN9Interface7paradebEPVhhPh>
     f5c:	81 11       	cpse	r24, r1
     f5e:	0e c0       	rjmp	.+28     	; 0xf7c <_ZN9Interface6TasterEv+0xa8>
	{
		taste = '5';
	}
	else if (paradeb(&PIND,PIND2,&stat[3]))//debounce(&PIND,PIND2))
     f60:	9e 01       	movw	r18, r28
     f62:	2d 5f       	subi	r18, 0xFD	; 253
     f64:	3f 4f       	sbci	r19, 0xFF	; 255
     f66:	42 e0       	ldi	r20, 0x02	; 2
     f68:	69 e2       	ldi	r22, 0x29	; 41
     f6a:	70 e0       	ldi	r23, 0x00	; 0
     f6c:	ce 01       	movw	r24, r28
     f6e:	8c df       	rcall	.-232    	; 0xe88 <_ZN9Interface7paradebEPVhhPh>
     f70:	88 23       	and	r24, r24
     f72:	29 f0       	breq	.+10     	; 0xf7e <_ZN9Interface6TasterEv+0xaa>
	{
		taste = '4';
     f74:	14 e3       	ldi	r17, 0x34	; 52
     f76:	03 c0       	rjmp	.+6      	; 0xf7e <_ZN9Interface6TasterEv+0xaa>
	
	//zweite Zeile
	PORTC |= (1<<PORTC2);
	_delay_us(1);
	if(paradeb(&PIND,PIND4,&stat[5])){//debounce(&PIND,PIND4)){
		taste = '6';
     f78:	16 e3       	ldi	r17, 0x36	; 54
     f7a:	01 c0       	rjmp	.+2      	; 0xf7e <_ZN9Interface6TasterEv+0xaa>
	}
	else if (paradeb(&PIND,PIND3,&stat[4]))//debounce(&PIND,PIND3))
	{
		taste = '5';
     f7c:	15 e3       	ldi	r17, 0x35	; 53
	}
	else if (paradeb(&PIND,PIND2,&stat[3]))//debounce(&PIND,PIND2))
	{
		taste = '4';
	}
	PORTC &= ~(1<<PORTC2);
     f7e:	42 98       	cbi	0x08, 2	; 8
	
	//dritte Zeile
	PORTD |= (1<<PORTD6);
     f80:	5e 9a       	sbi	0x0b, 6	; 11
     f82:	82 e0       	ldi	r24, 0x02	; 2
     f84:	8a 95       	dec	r24
     f86:	f1 f7       	brne	.-4      	; 0xf84 <_ZN9Interface6TasterEv+0xb0>
     f88:	00 c0       	rjmp	.+0      	; 0xf8a <_ZN9Interface6TasterEv+0xb6>
	_delay_us(1);
	if(paradeb(&PIND,PIND4,&stat[8])){//debounce(&PIND,PIND4)){
     f8a:	9e 01       	movw	r18, r28
     f8c:	28 5f       	subi	r18, 0xF8	; 248
     f8e:	3f 4f       	sbci	r19, 0xFF	; 255
     f90:	44 e0       	ldi	r20, 0x04	; 4
     f92:	69 e2       	ldi	r22, 0x29	; 41
     f94:	70 e0       	ldi	r23, 0x00	; 0
     f96:	ce 01       	movw	r24, r28
     f98:	77 df       	rcall	.-274    	; 0xe88 <_ZN9Interface7paradebEPVhhPh>
     f9a:	81 11       	cpse	r24, r1
     f9c:	16 c0       	rjmp	.+44     	; 0xfca <_ZN9Interface6TasterEv+0xf6>
		taste = '9';
	}
	else if (paradeb(&PIND,PIND3,&stat[7]))//debounce(&PIND,PIND3))
     f9e:	9e 01       	movw	r18, r28
     fa0:	29 5f       	subi	r18, 0xF9	; 249
     fa2:	3f 4f       	sbci	r19, 0xFF	; 255
     fa4:	43 e0       	ldi	r20, 0x03	; 3
     fa6:	69 e2       	ldi	r22, 0x29	; 41
     fa8:	70 e0       	ldi	r23, 0x00	; 0
     faa:	ce 01       	movw	r24, r28
     fac:	6d df       	rcall	.-294    	; 0xe88 <_ZN9Interface7paradebEPVhhPh>
     fae:	81 11       	cpse	r24, r1
     fb0:	0e c0       	rjmp	.+28     	; 0xfce <_ZN9Interface6TasterEv+0xfa>
	{
		taste = '8';
	}
	else if (paradeb(&PIND,PIND2,&stat[6]))//debounce(&PIND,PIND2))
     fb2:	9e 01       	movw	r18, r28
     fb4:	2a 5f       	subi	r18, 0xFA	; 250
     fb6:	3f 4f       	sbci	r19, 0xFF	; 255
     fb8:	42 e0       	ldi	r20, 0x02	; 2
     fba:	69 e2       	ldi	r22, 0x29	; 41
     fbc:	70 e0       	ldi	r23, 0x00	; 0
     fbe:	ce 01       	movw	r24, r28
     fc0:	63 df       	rcall	.-314    	; 0xe88 <_ZN9Interface7paradebEPVhhPh>
     fc2:	88 23       	and	r24, r24
     fc4:	29 f0       	breq	.+10     	; 0xfd0 <_ZN9Interface6TasterEv+0xfc>
	{
		taste = '7';
     fc6:	17 e3       	ldi	r17, 0x37	; 55
     fc8:	03 c0       	rjmp	.+6      	; 0xfd0 <_ZN9Interface6TasterEv+0xfc>
	
	//dritte Zeile
	PORTD |= (1<<PORTD6);
	_delay_us(1);
	if(paradeb(&PIND,PIND4,&stat[8])){//debounce(&PIND,PIND4)){
		taste = '9';
     fca:	19 e3       	ldi	r17, 0x39	; 57
     fcc:	01 c0       	rjmp	.+2      	; 0xfd0 <_ZN9Interface6TasterEv+0xfc>
	}
	else if (paradeb(&PIND,PIND3,&stat[7]))//debounce(&PIND,PIND3))
	{
		taste = '8';
     fce:	18 e3       	ldi	r17, 0x38	; 56
	}
	else if (paradeb(&PIND,PIND2,&stat[6]))//debounce(&PIND,PIND2))
	{
		taste = '7';
	}
	PORTD &= ~(1<<PORTD6);
     fd0:	5e 98       	cbi	0x0b, 6	; 11
	
	//vierte Zeile
	PORTD |= (1<<PORTD5);
     fd2:	5d 9a       	sbi	0x0b, 5	; 11
     fd4:	82 e0       	ldi	r24, 0x02	; 2
     fd6:	8a 95       	dec	r24
     fd8:	f1 f7       	brne	.-4      	; 0xfd6 <_ZN9Interface6TasterEv+0x102>
     fda:	00 c0       	rjmp	.+0      	; 0xfdc <_ZN9Interface6TasterEv+0x108>
	_delay_us(1);
	if(paradeb(&PIND,PIND4,&stat[11])){//debounce(&PIND,PIND4)){
     fdc:	9e 01       	movw	r18, r28
     fde:	25 5f       	subi	r18, 0xF5	; 245
     fe0:	3f 4f       	sbci	r19, 0xFF	; 255
     fe2:	44 e0       	ldi	r20, 0x04	; 4
     fe4:	69 e2       	ldi	r22, 0x29	; 41
     fe6:	70 e0       	ldi	r23, 0x00	; 0
     fe8:	ce 01       	movw	r24, r28
     fea:	4e df       	rcall	.-356    	; 0xe88 <_ZN9Interface7paradebEPVhhPh>
     fec:	81 11       	cpse	r24, r1
     fee:	16 c0       	rjmp	.+44     	; 0x101c <_ZN9Interface6TasterEv+0x148>
		taste = '#';
	}
	else if (paradeb(&PIND,PIND3,&stat[10]))//debounce(&PIND,PIND3))
     ff0:	9e 01       	movw	r18, r28
     ff2:	26 5f       	subi	r18, 0xF6	; 246
     ff4:	3f 4f       	sbci	r19, 0xFF	; 255
     ff6:	43 e0       	ldi	r20, 0x03	; 3
     ff8:	69 e2       	ldi	r22, 0x29	; 41
     ffa:	70 e0       	ldi	r23, 0x00	; 0
     ffc:	ce 01       	movw	r24, r28
     ffe:	44 df       	rcall	.-376    	; 0xe88 <_ZN9Interface7paradebEPVhhPh>
    1000:	81 11       	cpse	r24, r1
    1002:	0e c0       	rjmp	.+28     	; 0x1020 <_ZN9Interface6TasterEv+0x14c>
	{
		taste = '0';
	}
	else if (paradeb(&PIND,PIND2,&stat[9]))//debounce(&PIND,PIND2))
    1004:	9e 01       	movw	r18, r28
    1006:	27 5f       	subi	r18, 0xF7	; 247
    1008:	3f 4f       	sbci	r19, 0xFF	; 255
    100a:	42 e0       	ldi	r20, 0x02	; 2
    100c:	69 e2       	ldi	r22, 0x29	; 41
    100e:	70 e0       	ldi	r23, 0x00	; 0
    1010:	ce 01       	movw	r24, r28
    1012:	3a df       	rcall	.-396    	; 0xe88 <_ZN9Interface7paradebEPVhhPh>
    1014:	88 23       	and	r24, r24
    1016:	29 f0       	breq	.+10     	; 0x1022 <_ZN9Interface6TasterEv+0x14e>
	{
		taste = '*';
    1018:	1a e2       	ldi	r17, 0x2A	; 42
    101a:	03 c0       	rjmp	.+6      	; 0x1022 <_ZN9Interface6TasterEv+0x14e>
	
	//vierte Zeile
	PORTD |= (1<<PORTD5);
	_delay_us(1);
	if(paradeb(&PIND,PIND4,&stat[11])){//debounce(&PIND,PIND4)){
		taste = '#';
    101c:	13 e2       	ldi	r17, 0x23	; 35
    101e:	01 c0       	rjmp	.+2      	; 0x1022 <_ZN9Interface6TasterEv+0x14e>
	}
	else if (paradeb(&PIND,PIND3,&stat[10]))//debounce(&PIND,PIND3))
	{
		taste = '0';
    1020:	10 e3       	ldi	r17, 0x30	; 48
	}
	else if (paradeb(&PIND,PIND2,&stat[9]))//debounce(&PIND,PIND2))
	{
		taste = '*';
	}
	PORTD &= ~(1<<PORTD5);
    1022:	5d 98       	cbi	0x0b, 5	; 11
	
	return taste;
}
    1024:	81 2f       	mov	r24, r17
    1026:	df 91       	pop	r29
    1028:	cf 91       	pop	r28
    102a:	1f 91       	pop	r17
    102c:	08 95       	ret

0000102e <_ZN9Interface7unifiedEv>:

uint8_t Interface::unified(){
	switch (Taster())
    102e:	52 df       	rcall	.-348    	; 0xed4 <_ZN9Interface6TasterEv>
    1030:	48 2f       	mov	r20, r24
    1032:	50 e0       	ldi	r21, 0x00	; 0
    1034:	fa 01       	movw	r30, r20
    1036:	b3 97       	sbiw	r30, 0x23	; 35
    1038:	e7 31       	cpi	r30, 0x17	; 23
    103a:	f1 05       	cpc	r31, r1
    103c:	c0 f4       	brcc	.+48     	; 0x106e <_ZN9Interface7unifiedEv+0x40>
    103e:	ea 5b       	subi	r30, 0xBA	; 186
    1040:	ff 4f       	sbci	r31, 0xFF	; 255
    1042:	0c 94 45 20 	jmp	0x408a	; 0x408a <__tablejump2__>
	{
	case '1':
		return 'B';
		break;
	case '2':
		return 'u';
    1046:	85 e7       	ldi	r24, 0x75	; 117
    1048:	08 95       	ret
		break;
	case '3':
		return 'A';
    104a:	81 e4       	ldi	r24, 0x41	; 65
    104c:	08 95       	ret
		break;
	case '4':
		return 'l';
    104e:	8c e6       	ldi	r24, 0x6C	; 108
    1050:	08 95       	ret
		break;
	case '5':
		return 'o';
    1052:	8f e6       	ldi	r24, 0x6F	; 111
    1054:	08 95       	ret
		break;
	case '6':
		return 'r';
    1056:	82 e7       	ldi	r24, 0x72	; 114
    1058:	08 95       	ret
		break;
	case '7':
		return 'Y';
    105a:	89 e5       	ldi	r24, 0x59	; 89
    105c:	08 95       	ret
		break;
	case '8':
		return 'd';
    105e:	84 e6       	ldi	r24, 0x64	; 100
    1060:	08 95       	ret
		break;
	case '9':
		return 'X';
    1062:	88 e5       	ldi	r24, 0x58	; 88
    1064:	08 95       	ret
		break;
	case '*':
		return 'e';
    1066:	85 e6       	ldi	r24, 0x65	; 101
    1068:	08 95       	ret
		break;
	case '0':
		return '0';
		break;
	case '#':
		return 'm';
    106a:	8d e6       	ldi	r24, 0x6D	; 109
    106c:	08 95       	ret
		break;
	default:
		return ' ';
    106e:	80 e2       	ldi	r24, 0x20	; 32
    1070:	08 95       	ret

uint8_t Interface::unified(){
	switch (Taster())
	{
	case '1':
		return 'B';
    1072:	82 e4       	ldi	r24, 0x42	; 66
		break;
	default:
		return ' ';
		break;
	}
}
    1074:	08 95       	ret

00001076 <_ZN9Interface17ZahlenausTastaturEv>:

uint8_t Interface::ZahlenausTastatur(){
    1076:	cf 93       	push	r28
    1078:	df 93       	push	r29
    107a:	ec 01       	movw	r28, r24
	while(true){
		uint8_t taste = Taster();
    107c:	ce 01       	movw	r24, r28
    107e:	2a df       	rcall	.-428    	; 0xed4 <_ZN9Interface6TasterEv>
		if(taste>='0' && taste<='9'){
    1080:	80 53       	subi	r24, 0x30	; 48
    1082:	8a 30       	cpi	r24, 0x0A	; 10
    1084:	d8 f7       	brcc	.-10     	; 0x107c <_ZN9Interface17ZahlenausTastaturEv+0x6>
			return taste - '0';
		}
	}
}
    1086:	df 91       	pop	r29
    1088:	cf 91       	pop	r28
    108a:	08 95       	ret

0000108c <_ZN7KompassD1Ev>:
		offset[i]=0;
	}
} //Kompass

// default destructor
Kompass::~Kompass()
    108c:	06 96       	adiw	r24, 0x06	; 6
    108e:	cf ce       	rjmp	.-610    	; 0xe2e <_ZN3I2CD1Ev>
    1090:	08 95       	ret

00001092 <_ZN7Kompass16HMC5883L_commandEhh>:
{
} //~Kompass

void Kompass::HMC5883L_command(uint8_t adresse, uint8_t command){
    1092:	0f 93       	push	r16
    1094:	1f 93       	push	r17
    1096:	cf 93       	push	r28
    1098:	df 93       	push	r29
    109a:	06 2f       	mov	r16, r22
    109c:	14 2f       	mov	r17, r20
	i2c.twi_start();
    109e:	ec 01       	movw	r28, r24
    10a0:	26 96       	adiw	r28, 0x06	; 6
    10a2:	ce 01       	movw	r24, r28
    10a4:	c5 de       	rcall	.-630    	; 0xe30 <_ZN3I2C9twi_startEv>
	i2c.twi_write(HMCWRITEADRESSE);
    10a6:	6c e3       	ldi	r22, 0x3C	; 60
    10a8:	ce 01       	movw	r24, r28
    10aa:	ca de       	rcall	.-620    	; 0xe40 <_ZN3I2C9twi_writeEh>
	i2c.twi_write(adresse);
    10ac:	60 2f       	mov	r22, r16
    10ae:	ce 01       	movw	r24, r28
    10b0:	c7 de       	rcall	.-626    	; 0xe40 <_ZN3I2C9twi_writeEh>
	i2c.twi_write(command);
    10b2:	61 2f       	mov	r22, r17
    10b4:	ce 01       	movw	r24, r28
    10b6:	c4 de       	rcall	.-632    	; 0xe40 <_ZN3I2C9twi_writeEh>
	i2c.twi_stop();
    10b8:	ce 01       	movw	r24, r28
    10ba:	be de       	rcall	.-644    	; 0xe38 <_ZN3I2C8twi_stopEv>
}
    10bc:	df 91       	pop	r29
    10be:	cf 91       	pop	r28
    10c0:	1f 91       	pop	r17
    10c2:	0f 91       	pop	r16
    10c4:	08 95       	ret

000010c6 <_ZN7KompassC1Ev>:


#include "Kompass.h"

// default constructor
Kompass::Kompass()
    10c6:	cf 93       	push	r28
    10c8:	df 93       	push	r29
    10ca:	ec 01       	movw	r28, r24
    10cc:	06 96       	adiw	r24, 0x06	; 6
    10ce:	ab de       	rcall	.-682    	; 0xe26 <_ZN3I2CC1Ev>
{
	//Config Register A
	HMC5883L_command(0x00, HMCSAMPLES8+HMCDATARATE15+HMCMEASUREMODENORMAL);
    10d0:	40 e7       	ldi	r20, 0x70	; 112
    10d2:	60 e0       	ldi	r22, 0x00	; 0
    10d4:	ce 01       	movw	r24, r28
    10d6:	dd df       	rcall	.-70     	; 0x1092 <_ZN7Kompass16HMC5883L_commandEhh>

	//Config Gain
	HMC5883L_command(0x01, HMCGAIN1090);
    10d8:	40 e2       	ldi	r20, 0x20	; 32
    10da:	61 e0       	ldi	r22, 0x01	; 1
    10dc:	ce 01       	movw	r24, r28
    10de:	d9 df       	rcall	.-78     	; 0x1092 <_ZN7Kompass16HMC5883L_commandEhh>

	//Set Mode auf single
	HMC5883L_command(0x02, HMCSIGLEMODE);
    10e0:	41 e0       	ldi	r20, 0x01	; 1
    10e2:	62 e0       	ldi	r22, 0x02	; 2
    10e4:	ce 01       	movw	r24, r28
    10e6:	d5 df       	rcall	.-86     	; 0x1092 <_ZN7Kompass16HMC5883L_commandEhh>
	//Variablen
	for(uint8_t i=0;i<3;i++){
		achsen[i]=0;
    10e8:	19 82       	std	Y+1, r1	; 0x01
    10ea:	18 82       	st	Y, r1
		offset[i]=0;
    10ec:	18 86       	std	Y+8, r1	; 0x08
    10ee:	1f 82       	std	Y+7, r1	; 0x07

	//Set Mode auf single
	HMC5883L_command(0x02, HMCSIGLEMODE);
	//Variablen
	for(uint8_t i=0;i<3;i++){
		achsen[i]=0;
    10f0:	1b 82       	std	Y+3, r1	; 0x03
    10f2:	1a 82       	std	Y+2, r1	; 0x02
		offset[i]=0;
    10f4:	1a 86       	std	Y+10, r1	; 0x0a
    10f6:	19 86       	std	Y+9, r1	; 0x09

	//Set Mode auf single
	HMC5883L_command(0x02, HMCSIGLEMODE);
	//Variablen
	for(uint8_t i=0;i<3;i++){
		achsen[i]=0;
    10f8:	1d 82       	std	Y+5, r1	; 0x05
    10fa:	1c 82       	std	Y+4, r1	; 0x04
		offset[i]=0;
    10fc:	1c 86       	std	Y+12, r1	; 0x0c
    10fe:	1b 86       	std	Y+11, r1	; 0x0b
	}
} //Kompass
    1100:	df 91       	pop	r29
    1102:	cf 91       	pop	r28
    1104:	08 95       	ret

00001106 <_ZN7LSM303DD1Ev>:
	//FIFO Bypass Mode
	ACCBypassmode();
}

void LSM303D::ACCStreammode(){
	LSM303_command(FIFO_CTRL,(1<<FM1));
    1106:	46 96       	adiw	r24, 0x16	; 22
    1108:	92 ce       	rjmp	.-732    	; 0xe2e <_ZN3I2CD1Ev>
    110a:	08 95       	ret

0000110c <_ZN7LSM303D14LSM303_commandEhh>:
    110c:	0f 93       	push	r16
    110e:	1f 93       	push	r17
    1110:	cf 93       	push	r28
    1112:	df 93       	push	r29
    1114:	06 2f       	mov	r16, r22
    1116:	14 2f       	mov	r17, r20
    1118:	ec 01       	movw	r28, r24
    111a:	66 96       	adiw	r28, 0x16	; 22
    111c:	ce 01       	movw	r24, r28
    111e:	88 de       	rcall	.-752    	; 0xe30 <_ZN3I2C9twi_startEv>
    1120:	6a e3       	ldi	r22, 0x3A	; 58
    1122:	ce 01       	movw	r24, r28
    1124:	8d de       	rcall	.-742    	; 0xe40 <_ZN3I2C9twi_writeEh>
    1126:	60 2f       	mov	r22, r16
    1128:	ce 01       	movw	r24, r28
    112a:	8a de       	rcall	.-748    	; 0xe40 <_ZN3I2C9twi_writeEh>
    112c:	61 2f       	mov	r22, r17
    112e:	ce 01       	movw	r24, r28
    1130:	87 de       	rcall	.-754    	; 0xe40 <_ZN3I2C9twi_writeEh>
    1132:	ce 01       	movw	r24, r28
    1134:	81 de       	rcall	.-766    	; 0xe38 <_ZN3I2C8twi_stopEv>
    1136:	df 91       	pop	r29
    1138:	cf 91       	pop	r28
    113a:	1f 91       	pop	r17
    113c:	0f 91       	pop	r16
    113e:	08 95       	ret

00001140 <_ZN7LSM303D13ACCBypassmodeEv>:
}

void LSM303D::ACCBypassmode(){
	LSM303_command(FIFO_CTRL,0x00);
    1140:	40 e0       	ldi	r20, 0x00	; 0
    1142:	6e e2       	ldi	r22, 0x2E	; 46
    1144:	e3 cf       	rjmp	.-58     	; 0x110c <_ZN7LSM303D14LSM303_commandEhh>
    1146:	08 95       	ret

00001148 <_ZN7LSM303D9acce_initEv>:
// default destructor
LSM303D::~LSM303D()
{
} //~LSM303D

void LSM303D::acce_init(){
    1148:	cf 93       	push	r28
    114a:	df 93       	push	r29
    114c:	ec 01       	movw	r28, r24
	//ACC Activ und 25Hz ohne Block dataread
	LSM303_command(CTRL1,(1<<AXEN)|(1<<AYEN)|(1<<AZEN)|(1<<AODR2));
    114e:	47 e4       	ldi	r20, 0x47	; 71
    1150:	60 e2       	ldi	r22, 0x20	; 32
    1152:	dc df       	rcall	.-72     	; 0x110c <_ZN7LSM303D14LSM303_commandEhh>
	
	//ACC fuer +-2g
	LSM303_command(CTRL2,0x00);
    1154:	40 e0       	ldi	r20, 0x00	; 0
    1156:	61 e2       	ldi	r22, 0x21	; 33
    1158:	ce 01       	movw	r24, r28
    115a:	d8 df       	rcall	.-80     	; 0x110c <_ZN7LSM303D14LSM303_commandEhh>
	
	//Temperatursensor an
	LSM303_command(CTRL5,(1<<TEMP_EN));
    115c:	40 e8       	ldi	r20, 0x80	; 128
    115e:	64 e2       	ldi	r22, 0x24	; 36
    1160:	ce 01       	movw	r24, r28
    1162:	d4 df       	rcall	.-88     	; 0x110c <_ZN7LSM303D14LSM303_commandEhh>
	
	//FIFO Bypass Mode
	ACCBypassmode();
    1164:	ce 01       	movw	r24, r28
    1166:	ec df       	rcall	.-40     	; 0x1140 <_ZN7LSM303D13ACCBypassmodeEv>
}
    1168:	df 91       	pop	r29
    116a:	cf 91       	pop	r28
    116c:	08 95       	ret

0000116e <_ZN7LSM303DC1Ev>:


#include "LSM303D.h"

// default constructor
LSM303D::LSM303D()
    116e:	cf 93       	push	r28
    1170:	df 93       	push	r29
    1172:	ec 01       	movw	r28, r24
    1174:	46 96       	adiw	r24, 0x16	; 22
    1176:	57 de       	rcall	.-850    	; 0xe26 <_ZN3I2CC1Ev>
{
	//Variablen initialisieren
	Tempera=0;
    1178:	1f 82       	std	Y+7, r1	; 0x07
    117a:	1e 82       	std	Y+6, r1	; 0x06
	roll=0.0;
    117c:	18 86       	std	Y+8, r1	; 0x08
    117e:	19 86       	std	Y+9, r1	; 0x09
    1180:	1a 86       	std	Y+10, r1	; 0x0a
    1182:	1b 86       	std	Y+11, r1	; 0x0b
	pitch=0.0;
    1184:	1c 86       	std	Y+12, r1	; 0x0c
    1186:	1d 86       	std	Y+13, r1	; 0x0d
    1188:	1e 86       	std	Y+14, r1	; 0x0e
    118a:	1f 86       	std	Y+15, r1	; 0x0f
	Schrittzaehler=0;
    118c:	19 8a       	std	Y+17, r1	; 0x11
    118e:	18 8a       	std	Y+16, r1	; 0x10
	gravity=0;
    1190:	1a 8a       	std	Y+18, r1	; 0x12
    1192:	1b 8a       	std	Y+19, r1	; 0x13
    1194:	1c 8a       	std	Y+20, r1	; 0x14
    1196:	1d 8a       	std	Y+21, r1	; 0x15
	higher=0;
    1198:	de 01       	movw	r26, r28
    119a:	a1 52       	subi	r26, 0x21	; 33
    119c:	bf 4f       	sbci	r27, 0xFF	; 255
    119e:	1d 92       	st	X+, r1
    11a0:	1d 92       	st	X+, r1
    11a2:	1d 92       	st	X+, r1
    11a4:	1c 92       	st	X, r1
    11a6:	13 97       	sbiw	r26, 0x03	; 3
	lower=0;
    11a8:	fe 01       	movw	r30, r28
    11aa:	ed 51       	subi	r30, 0x1D	; 29
    11ac:	ff 4f       	sbci	r31, 0xFF	; 255
    11ae:	10 82       	st	Z, r1
    11b0:	11 82       	std	Z+1, r1	; 0x01
    11b2:	12 82       	std	Z+2, r1	; 0x02
    11b4:	13 82       	std	Z+3, r1	; 0x03
	threschold=27;	//aus Erfahrung
    11b6:	34 96       	adiw	r30, 0x04	; 4
    11b8:	8b e1       	ldi	r24, 0x1B	; 27
    11ba:	90 e0       	ldi	r25, 0x00	; 0
    11bc:	91 83       	std	Z+1, r25	; 0x01
    11be:	80 83       	st	Z, r24
	for (uint8_t i=0;i<3;i++)
	{
		achsen_A[i]=0;
    11c0:	19 82       	std	Y+1, r1	; 0x01
    11c2:	18 82       	st	Y, r1
    11c4:	1b 82       	std	Y+3, r1	; 0x03
    11c6:	1a 82       	std	Y+2, r1	; 0x02
    11c8:	1d 82       	std	Y+5, r1	; 0x05
    11ca:	1c 82       	std	Y+4, r1	; 0x04
    11cc:	e0 5d       	subi	r30, 0xD0	; 208
    11ce:	f1 09       	sbc	r31, r1
    11d0:	9d 01       	movw	r18, r26
	}
	for (uint8_t i=0;i<50;i++)
	{
		Daten[i]=0;
    11d2:	11 92       	st	Z+, r1
    11d4:	11 92       	st	Z+, r1
    11d6:	11 92       	st	Z+, r1
    11d8:	11 92       	st	Z+, r1
	threschold=27;	//aus Erfahrung
	for (uint8_t i=0;i<3;i++)
	{
		achsen_A[i]=0;
	}
	for (uint8_t i=0;i<50;i++)
    11da:	e2 17       	cp	r30, r18
    11dc:	f3 07       	cpc	r31, r19
    11de:	c9 f7       	brne	.-14     	; 0x11d2 <_ZN7LSM303DC1Ev+0x64>
	{
		Daten[i]=0;
	}
	
	//ACC init
	acce_init();
    11e0:	ce 01       	movw	r24, r28
    11e2:	b2 df       	rcall	.-156    	; 0x1148 <_ZN7LSM303D9acce_initEv>
} //LSM303D
    11e4:	df 91       	pop	r29
    11e6:	cf 91       	pop	r28
    11e8:	08 95       	ret

000011ea <_ZN7monitor11tastendruckEPh>:
    11ea:	80 e0       	ldi	r24, 0x00	; 0
    11ec:	08 95       	ret

000011ee <_ZN3uhr11tastendruckEPh>:
    11ee:	fc 01       	movw	r30, r24
    11f0:	db 01       	movw	r26, r22
    11f2:	9c 91       	ld	r25, X
    11f4:	95 36       	cpi	r25, 0x65	; 101
    11f6:	39 f4       	brne	.+14     	; 0x1206 <_ZN3uhr11tastendruckEPh+0x18>
    11f8:	85 a1       	ldd	r24, Z+37	; 0x25
    11fa:	81 30       	cpi	r24, 0x01	; 1
    11fc:	11 f4       	brne	.+4      	; 0x1202 <_ZN3uhr11tastendruckEPh+0x14>
    11fe:	15 a2       	std	Z+37, r1	; 0x25
    1200:	02 c0       	rjmp	.+4      	; 0x1206 <_ZN3uhr11tastendruckEPh+0x18>
    1202:	81 e0       	ldi	r24, 0x01	; 1
    1204:	85 a3       	std	Z+37, r24	; 0x25
    1206:	80 e0       	ldi	r24, 0x00	; 0
    1208:	08 95       	ret

0000120a <_ZN13einstellungen11tastendruckEPh>:
    120a:	fc 01       	movw	r30, r24
    120c:	db 01       	movw	r26, r22
    120e:	8c 91       	ld	r24, X
    1210:	8f 36       	cpi	r24, 0x6F	; 111
    1212:	11 f0       	breq	.+4      	; 0x1218 <_ZN13einstellungen11tastendruckEPh+0xe>
    1214:	82 37       	cpi	r24, 0x72	; 114
    1216:	21 f4       	brne	.+8      	; 0x1220 <_ZN13einstellungen11tastendruckEPh+0x16>
    1218:	86 a1       	ldd	r24, Z+38	; 0x26
    121a:	8f 5f       	subi	r24, 0xFF	; 255
    121c:	86 a3       	std	Z+38, r24	; 0x26
    121e:	11 c0       	rjmp	.+34     	; 0x1242 <_ZN13einstellungen11tastendruckEPh+0x38>
    1220:	8c 36       	cpi	r24, 0x6C	; 108
    1222:	21 f4       	brne	.+8      	; 0x122c <_ZN13einstellungen11tastendruckEPh+0x22>
    1224:	86 a1       	ldd	r24, Z+38	; 0x26
    1226:	81 50       	subi	r24, 0x01	; 1
    1228:	86 a3       	std	Z+38, r24	; 0x26
    122a:	0b c0       	rjmp	.+22     	; 0x1242 <_ZN13einstellungen11tastendruckEPh+0x38>
    122c:	85 37       	cpi	r24, 0x75	; 117
    122e:	21 f4       	brne	.+8      	; 0x1238 <_ZN13einstellungen11tastendruckEPh+0x2e>
    1230:	85 a1       	ldd	r24, Z+37	; 0x25
    1232:	81 50       	subi	r24, 0x01	; 1
    1234:	85 a3       	std	Z+37, r24	; 0x25
    1236:	05 c0       	rjmp	.+10     	; 0x1242 <_ZN13einstellungen11tastendruckEPh+0x38>
    1238:	84 36       	cpi	r24, 0x64	; 100
    123a:	19 f4       	brne	.+6      	; 0x1242 <_ZN13einstellungen11tastendruckEPh+0x38>
    123c:	85 a1       	ldd	r24, Z+37	; 0x25
    123e:	8f 5f       	subi	r24, 0xFF	; 255
    1240:	85 a3       	std	Z+37, r24	; 0x25
    1242:	86 a1       	ldd	r24, Z+38	; 0x26
    1244:	83 30       	cpi	r24, 0x03	; 3
    1246:	08 f0       	brcs	.+2      	; 0x124a <_ZN13einstellungen11tastendruckEPh+0x40>
    1248:	16 a2       	std	Z+38, r1	; 0x26
    124a:	85 a1       	ldd	r24, Z+37	; 0x25
    124c:	84 30       	cpi	r24, 0x04	; 4
    124e:	08 f0       	brcs	.+2      	; 0x1252 <_ZN13einstellungen11tastendruckEPh+0x48>
    1250:	15 a2       	std	Z+37, r1	; 0x25
    1252:	80 e0       	ldi	r24, 0x00	; 0
    1254:	08 95       	ret

00001256 <_ZN5menue11tastendruckEPh>:
    1256:	fc 01       	movw	r30, r24
    1258:	db 01       	movw	r26, r22
    125a:	8c 91       	ld	r24, X
    125c:	85 37       	cpi	r24, 0x75	; 117
    125e:	21 f4       	brne	.+8      	; 0x1268 <_ZN5menue11tastendruckEPh+0x12>
    1260:	85 a1       	ldd	r24, Z+37	; 0x25
    1262:	81 50       	subi	r24, 0x01	; 1
    1264:	85 a3       	std	Z+37, r24	; 0x25
    1266:	0d c0       	rjmp	.+26     	; 0x1282 <_ZN5menue11tastendruckEPh+0x2c>
    1268:	84 36       	cpi	r24, 0x64	; 100
    126a:	21 f4       	brne	.+8      	; 0x1274 <_ZN5menue11tastendruckEPh+0x1e>
    126c:	85 a1       	ldd	r24, Z+37	; 0x25
    126e:	8f 5f       	subi	r24, 0xFF	; 255
    1270:	85 a3       	std	Z+37, r24	; 0x25
    1272:	07 c0       	rjmp	.+14     	; 0x1282 <_ZN5menue11tastendruckEPh+0x2c>
    1274:	8f 36       	cpi	r24, 0x6F	; 111
    1276:	11 f0       	breq	.+4      	; 0x127c <_ZN5menue11tastendruckEPh+0x26>
    1278:	82 37       	cpi	r24, 0x72	; 114
    127a:	19 f4       	brne	.+6      	; 0x1282 <_ZN5menue11tastendruckEPh+0x2c>
    127c:	85 a1       	ldd	r24, Z+37	; 0x25
    127e:	80 93 97 02 	sts	0x0297, r24
    1282:	85 a1       	ldd	r24, Z+37	; 0x25
    1284:	85 36       	cpi	r24, 0x65	; 101
    1286:	18 f0       	brcs	.+6      	; 0x128e <_ZN5menue11tastendruckEPh+0x38>
    1288:	83 e0       	ldi	r24, 0x03	; 3
    128a:	85 a3       	std	Z+37, r24	; 0x25
    128c:	03 c0       	rjmp	.+6      	; 0x1294 <_ZN5menue11tastendruckEPh+0x3e>
    128e:	84 30       	cpi	r24, 0x04	; 4
    1290:	08 f0       	brcs	.+2      	; 0x1294 <_ZN5menue11tastendruckEPh+0x3e>
    1292:	15 a2       	std	Z+37, r1	; 0x25
    1294:	80 e0       	ldi	r24, 0x00	; 0
    1296:	08 95       	ret

00001298 <_ZN9offscreen4drawEv>:
    1298:	cf 93       	push	r28
    129a:	df 93       	push	r29
    129c:	ec 01       	movw	r28, r24
    129e:	8f 89       	ldd	r24, Y+23	; 0x17
    12a0:	98 8d       	ldd	r25, Y+24	; 0x18
    12a2:	6c d9       	rcall	.-3368   	; 0x57c <_ZN7Display10clearFrameEv>
    12a4:	8f 89       	ldd	r24, Y+23	; 0x17
    12a6:	98 8d       	ldd	r25, Y+24	; 0x18
    12a8:	e3 d9       	rcall	.-3130   	; 0x670 <_ZN7Display9sendFrameEv>
    12aa:	df 91       	pop	r29
    12ac:	cf 91       	pop	r28
    12ae:	08 95       	ret

000012b0 <_ZN9wilkommen4drawEv>:
    12b0:	ef 92       	push	r14
    12b2:	ff 92       	push	r15
    12b4:	0f 93       	push	r16
    12b6:	1f 93       	push	r17
    12b8:	cf 93       	push	r28
    12ba:	df 93       	push	r29
    12bc:	ec 01       	movw	r28, r24
    12be:	8f 89       	ldd	r24, Y+23	; 0x17
    12c0:	98 8d       	ldd	r25, Y+24	; 0x18
    12c2:	5c d9       	rcall	.-3400   	; 0x57c <_ZN7Display10clearFrameEv>
    12c4:	7e 01       	movw	r14, r28
    12c6:	22 e0       	ldi	r18, 0x02	; 2
    12c8:	e2 0e       	add	r14, r18
    12ca:	f1 1c       	adc	r15, r1
    12cc:	8f e0       	ldi	r24, 0x0F	; 15
    12ce:	e6 e0       	ldi	r30, 0x06	; 6
    12d0:	f1 e0       	ldi	r31, 0x01	; 1
    12d2:	d7 01       	movw	r26, r14
    12d4:	01 90       	ld	r0, Z+
    12d6:	0d 92       	st	X+, r0
    12d8:	8a 95       	dec	r24
    12da:	e1 f7       	brne	.-8      	; 0x12d4 <_ZN9wilkommen4drawEv+0x24>
    12dc:	8e e0       	ldi	r24, 0x0E	; 14
    12de:	8e 8b       	std	Y+22, r24	; 0x16
    12e0:	00 e0       	ldi	r16, 0x00	; 0
    12e2:	10 e0       	ldi	r17, 0x00	; 0
    12e4:	fe 01       	movw	r30, r28
    12e6:	e1 0f       	add	r30, r17
    12e8:	f1 1d       	adc	r31, r1
    12ea:	20 e0       	ldi	r18, 0x00	; 0
    12ec:	40 2f       	mov	r20, r16
    12ee:	62 81       	ldd	r22, Z+2	; 0x02
    12f0:	8f 89       	ldd	r24, Y+23	; 0x17
    12f2:	98 8d       	ldd	r25, Y+24	; 0x18
    12f4:	5b da       	rcall	.-2890   	; 0x7ac <_ZN7Display9draw_ASCIEhhh>
    12f6:	1f 5f       	subi	r17, 0xFF	; 255
    12f8:	0a 5f       	subi	r16, 0xFA	; 250
    12fa:	8e 89       	ldd	r24, Y+22	; 0x16
    12fc:	18 17       	cp	r17, r24
    12fe:	90 f3       	brcs	.-28     	; 0x12e4 <_ZN9wilkommen4drawEv+0x34>
    1300:	8f e0       	ldi	r24, 0x0F	; 15
    1302:	e5 e1       	ldi	r30, 0x15	; 21
    1304:	f1 e0       	ldi	r31, 0x01	; 1
    1306:	d7 01       	movw	r26, r14
    1308:	01 90       	ld	r0, Z+
    130a:	0d 92       	st	X+, r0
    130c:	8a 95       	dec	r24
    130e:	e1 f7       	brne	.-8      	; 0x1308 <_ZN9wilkommen4drawEv+0x58>
    1310:	8e e0       	ldi	r24, 0x0E	; 14
    1312:	8e 8b       	std	Y+22, r24	; 0x16
    1314:	00 e0       	ldi	r16, 0x00	; 0
    1316:	10 e0       	ldi	r17, 0x00	; 0
    1318:	fe 01       	movw	r30, r28
    131a:	e1 0f       	add	r30, r17
    131c:	f1 1d       	adc	r31, r1
    131e:	28 e0       	ldi	r18, 0x08	; 8
    1320:	40 2f       	mov	r20, r16
    1322:	62 81       	ldd	r22, Z+2	; 0x02
    1324:	8f 89       	ldd	r24, Y+23	; 0x17
    1326:	98 8d       	ldd	r25, Y+24	; 0x18
    1328:	41 da       	rcall	.-2942   	; 0x7ac <_ZN7Display9draw_ASCIEhhh>
    132a:	1f 5f       	subi	r17, 0xFF	; 255
    132c:	0a 5f       	subi	r16, 0xFA	; 250
    132e:	8e 89       	ldd	r24, Y+22	; 0x16
    1330:	18 17       	cp	r17, r24
    1332:	90 f3       	brcs	.-28     	; 0x1318 <_ZN9wilkommen4drawEv+0x68>
    1334:	80 e4       	ldi	r24, 0x40	; 64
    1336:	8f 93       	push	r24
    1338:	8f 93       	push	r24
    133a:	83 ea       	ldi	r24, 0xA3	; 163
    133c:	8f 93       	push	r24
    133e:	87 ed       	ldi	r24, 0xD7	; 215
    1340:	8f 93       	push	r24
    1342:	84 e2       	ldi	r24, 0x24	; 36
    1344:	91 e0       	ldi	r25, 0x01	; 1
    1346:	9f 93       	push	r25
    1348:	8f 93       	push	r24
    134a:	ff 92       	push	r15
    134c:	ef 92       	push	r14
    134e:	0e 94 a1 22 	call	0x4542	; 0x4542 <sprintf>
    1352:	8e 8b       	std	Y+22, r24	; 0x16
    1354:	2d b7       	in	r18, 0x3d	; 61
    1356:	3e b7       	in	r19, 0x3e	; 62
    1358:	28 5f       	subi	r18, 0xF8	; 248
    135a:	3f 4f       	sbci	r19, 0xFF	; 255
    135c:	0f b6       	in	r0, 0x3f	; 63
    135e:	f8 94       	cli
    1360:	3e bf       	out	0x3e, r19	; 62
    1362:	0f be       	out	0x3f, r0	; 63
    1364:	2d bf       	out	0x3d, r18	; 61
    1366:	88 23       	and	r24, r24
    1368:	81 f0       	breq	.+32     	; 0x138a <_ZN9wilkommen4drawEv+0xda>
    136a:	00 e0       	ldi	r16, 0x00	; 0
    136c:	10 e0       	ldi	r17, 0x00	; 0
    136e:	fe 01       	movw	r30, r28
    1370:	e1 0f       	add	r30, r17
    1372:	f1 1d       	adc	r31, r1
    1374:	20 e2       	ldi	r18, 0x20	; 32
    1376:	40 2f       	mov	r20, r16
    1378:	62 81       	ldd	r22, Z+2	; 0x02
    137a:	8f 89       	ldd	r24, Y+23	; 0x17
    137c:	98 8d       	ldd	r25, Y+24	; 0x18
    137e:	16 da       	rcall	.-3028   	; 0x7ac <_ZN7Display9draw_ASCIEhhh>
    1380:	1f 5f       	subi	r17, 0xFF	; 255
    1382:	0a 5f       	subi	r16, 0xFA	; 250
    1384:	8e 89       	ldd	r24, Y+22	; 0x16
    1386:	18 17       	cp	r17, r24
    1388:	90 f3       	brcs	.-28     	; 0x136e <_ZN9wilkommen4drawEv+0xbe>
    138a:	8f 89       	ldd	r24, Y+23	; 0x17
    138c:	98 8d       	ldd	r25, Y+24	; 0x18
    138e:	70 d9       	rcall	.-3360   	; 0x670 <_ZN7Display9sendFrameEv>
    1390:	df 91       	pop	r29
    1392:	cf 91       	pop	r28
    1394:	1f 91       	pop	r17
    1396:	0f 91       	pop	r16
    1398:	ff 90       	pop	r15
    139a:	ef 90       	pop	r14
    139c:	08 95       	ret

0000139e <_Z8ADC_Readh>:
    139e:	ec e7       	ldi	r30, 0x7C	; 124
    13a0:	f0 e0       	ldi	r31, 0x00	; 0
    13a2:	90 81       	ld	r25, Z
    13a4:	8f 71       	andi	r24, 0x1F	; 31
    13a6:	90 7e       	andi	r25, 0xE0	; 224
    13a8:	89 2b       	or	r24, r25
    13aa:	80 83       	st	Z, r24
    13ac:	ea e7       	ldi	r30, 0x7A	; 122
    13ae:	f0 e0       	ldi	r31, 0x00	; 0
    13b0:	80 81       	ld	r24, Z
    13b2:	80 64       	ori	r24, 0x40	; 64
    13b4:	80 83       	st	Z, r24
    13b6:	80 81       	ld	r24, Z
    13b8:	86 fd       	sbrc	r24, 6
    13ba:	fd cf       	rjmp	.-6      	; 0x13b6 <_Z8ADC_Readh+0x18>
    13bc:	80 91 78 00 	lds	r24, 0x0078
    13c0:	90 91 79 00 	lds	r25, 0x0079
    13c4:	08 95       	ret

000013c6 <_Z14Batteriestatusv>:

#ifndef BATMIN
#define BATMIN 3.0
#endif

int8_t Batteriestatus(){
    13c6:	cf 92       	push	r12
    13c8:	df 92       	push	r13
    13ca:	ef 92       	push	r14
    13cc:	ff 92       	push	r15
	uint16_t ADCwert=ADC_Read(0);
    13ce:	80 e0       	ldi	r24, 0x00	; 0
    13d0:	e6 df       	rcall	.-52     	; 0x139e <_Z8ADC_Readh>
	batterie = (ADCwert/1023.0)*3.29*SPANNUNGSTEILER;
    13d2:	bc 01       	movw	r22, r24
    13d4:	80 e0       	ldi	r24, 0x00	; 0
    13d6:	90 e0       	ldi	r25, 0x00	; 0
    13d8:	0e 94 ff 1a 	call	0x35fe	; 0x35fe <__floatunsisf>
    13dc:	20 e0       	ldi	r18, 0x00	; 0
    13de:	30 ec       	ldi	r19, 0xC0	; 192
    13e0:	4f e7       	ldi	r20, 0x7F	; 127
    13e2:	54 e4       	ldi	r21, 0x44	; 68
    13e4:	0e 94 66 1a 	call	0x34cc	; 0x34cc <__divsf3>
    13e8:	2c e5       	ldi	r18, 0x5C	; 92
    13ea:	3f e8       	ldi	r19, 0x8F	; 143
    13ec:	42 e5       	ldi	r20, 0x52	; 82
    13ee:	50 e4       	ldi	r21, 0x40	; 64
    13f0:	0e 94 13 1c 	call	0x3826	; 0x3826 <__mulsf3>
    13f4:	2d e0       	ldi	r18, 0x0D	; 13
    13f6:	31 e7       	ldi	r19, 0x71	; 113
    13f8:	40 e0       	ldi	r20, 0x00	; 0
    13fa:	50 e4       	ldi	r21, 0x40	; 64
    13fc:	0e 94 13 1c 	call	0x3826	; 0x3826 <__mulsf3>
    1400:	60 93 a2 02 	sts	0x02A2, r22
    1404:	70 93 a3 02 	sts	0x02A3, r23
    1408:	80 93 a4 02 	sts	0x02A4, r24
    140c:	90 93 a5 02 	sts	0x02A5, r25
	float stat = ((batterie-BATMIN)/(4.2-BATMIN)*100);
    1410:	26 e6       	ldi	r18, 0x66	; 102
    1412:	36 e6       	ldi	r19, 0x66	; 102
    1414:	46 e6       	ldi	r20, 0x66	; 102
    1416:	50 e4       	ldi	r21, 0x40	; 64
    1418:	0e 94 fe 19 	call	0x33fc	; 0x33fc <__subsf3>
    141c:	28 e9       	ldi	r18, 0x98	; 152
    141e:	39 e9       	ldi	r19, 0x99	; 153
    1420:	49 e1       	ldi	r20, 0x19	; 25
    1422:	5f e3       	ldi	r21, 0x3F	; 63
    1424:	0e 94 66 1a 	call	0x34cc	; 0x34cc <__divsf3>
    1428:	20 e0       	ldi	r18, 0x00	; 0
    142a:	30 e0       	ldi	r19, 0x00	; 0
    142c:	48 ec       	ldi	r20, 0xC8	; 200
    142e:	52 e4       	ldi	r21, 0x42	; 66
    1430:	0e 94 13 1c 	call	0x3826	; 0x3826 <__mulsf3>
    1434:	6b 01       	movw	r12, r22
    1436:	7c 01       	movw	r14, r24
	uint8_t temp =(uint8_t) (stat*10);
    1438:	20 e0       	ldi	r18, 0x00	; 0
    143a:	30 e0       	ldi	r19, 0x00	; 0
    143c:	40 e2       	ldi	r20, 0x20	; 32
    143e:	51 e4       	ldi	r21, 0x41	; 65
    1440:	0e 94 13 1c 	call	0x3826	; 0x3826 <__mulsf3>
    1444:	0e 94 d3 1a 	call	0x35a6	; 0x35a6 <__fixunssfsi>
	if (temp%10>=5)
    1448:	8d ec       	ldi	r24, 0xCD	; 205
    144a:	68 9f       	mul	r22, r24
    144c:	81 2d       	mov	r24, r1
    144e:	11 24       	eor	r1, r1
    1450:	86 95       	lsr	r24
    1452:	86 95       	lsr	r24
    1454:	86 95       	lsr	r24
    1456:	88 0f       	add	r24, r24
    1458:	28 2f       	mov	r18, r24
    145a:	22 0f       	add	r18, r18
    145c:	22 0f       	add	r18, r18
    145e:	82 0f       	add	r24, r18
    1460:	96 2f       	mov	r25, r22
    1462:	98 1b       	sub	r25, r24
    1464:	95 30       	cpi	r25, 0x05	; 5
    1466:	70 f0       	brcs	.+28     	; 0x1484 <_Z14Batteriestatusv+0xbe>
	{
		stat = (uint8_t)stat+1;
    1468:	c7 01       	movw	r24, r14
    146a:	b6 01       	movw	r22, r12
    146c:	0e 94 d3 1a 	call	0x35a6	; 0x35a6 <__fixunssfsi>
    1470:	70 e0       	ldi	r23, 0x00	; 0
    1472:	6f 5f       	subi	r22, 0xFF	; 255
    1474:	7f 4f       	sbci	r23, 0xFF	; 255
    1476:	07 2e       	mov	r0, r23
    1478:	00 0c       	add	r0, r0
    147a:	88 0b       	sbc	r24, r24
    147c:	99 0b       	sbc	r25, r25
    147e:	0e 94 01 1b 	call	0x3602	; 0x3602 <__floatsisf>
    1482:	09 c0       	rjmp	.+18     	; 0x1496 <_Z14Batteriestatusv+0xd0>
	}
	else
	{
		stat = (uint8_t)stat;
    1484:	c7 01       	movw	r24, r14
    1486:	b6 01       	movw	r22, r12
    1488:	0e 94 d3 1a 	call	0x35a6	; 0x35a6 <__fixunssfsi>
    148c:	70 e0       	ldi	r23, 0x00	; 0
    148e:	80 e0       	ldi	r24, 0x00	; 0
    1490:	90 e0       	ldi	r25, 0x00	; 0
    1492:	0e 94 ff 1a 	call	0x35fe	; 0x35fe <__floatunsisf>
	}
	return stat;
    1496:	0e 94 ce 1a 	call	0x359c	; 0x359c <__fixsfsi>
    149a:	86 2f       	mov	r24, r22
}
    149c:	ff 90       	pop	r15
    149e:	ef 90       	pop	r14
    14a0:	df 90       	pop	r13
    14a2:	cf 90       	pop	r12
    14a4:	08 95       	ret

000014a6 <_ZN5menue4drawEv>:
			pos=0;
		}
		return 0;
	}

	void draw(){
    14a6:	cf 92       	push	r12
    14a8:	df 92       	push	r13
    14aa:	ef 92       	push	r14
    14ac:	ff 92       	push	r15
    14ae:	0f 93       	push	r16
    14b0:	1f 93       	push	r17
    14b2:	cf 93       	push	r28
    14b4:	df 93       	push	r29
    14b6:	ec 01       	movw	r28, r24
		return 0;
	}
	
	//drawfunktion
	virtual void draw(){
		oled->clearFrame();
    14b8:	8f 89       	ldd	r24, Y+23	; 0x17
    14ba:	98 8d       	ldd	r25, Y+24	; 0x18
    14bc:	5f d8       	rcall	.-3906   	; 0x57c <_ZN7Display10clearFrameEv>
    14be:	10 e0       	ldi	r17, 0x00	; 0
    14c0:	e1 2c       	mov	r14, r1
    14c2:	f1 2c       	mov	r15, r1
	}
	
	//draw header and overload it
	void header(){
		for(uint8_t i=0;i<8;i++){
			oled->draw_ASCI(rtc->msg_uhr[i],i*charsize,0);
    14c4:	e9 8d       	ldd	r30, Y+25	; 0x19
    14c6:	fa 8d       	ldd	r31, Y+26	; 0x1a
    14c8:	ee 0d       	add	r30, r14
    14ca:	ff 1d       	adc	r31, r15
    14cc:	20 e0       	ldi	r18, 0x00	; 0
    14ce:	41 2f       	mov	r20, r17
    14d0:	60 81       	ld	r22, Z
    14d2:	8f 89       	ldd	r24, Y+23	; 0x17
    14d4:	98 8d       	ldd	r25, Y+24	; 0x18
    14d6:	6a d9       	rcall	.-3372   	; 0x7ac <_ZN7Display9draw_ASCIEhhh>
    14d8:	8f ef       	ldi	r24, 0xFF	; 255
    14da:	e8 1a       	sub	r14, r24
    14dc:	f8 0a       	sbc	r15, r24
    14de:	1a 5f       	subi	r17, 0xFA	; 250
		return &name[0];
	}
	
	//draw header and overload it
	void header(){
		for(uint8_t i=0;i<8;i++){
    14e0:	10 33       	cpi	r17, 0x30	; 48
    14e2:	81 f7       	brne	.-32     	; 0x14c4 <_ZN5menue4drawEv+0x1e>
			oled->draw_ASCI(rtc->msg_uhr[i],i*charsize,0);
		}
		buffersize=sprintf(buffer,"Bat: %i%%",Batteriestatus());
    14e4:	70 df       	rcall	.-288    	; 0x13c6 <_Z14Batteriestatusv>
    14e6:	7e 01       	movw	r14, r28
    14e8:	92 e0       	ldi	r25, 0x02	; 2
    14ea:	e9 0e       	add	r14, r25
    14ec:	f1 1c       	adc	r15, r1
    14ee:	28 2f       	mov	r18, r24
    14f0:	08 2e       	mov	r0, r24
    14f2:	00 0c       	add	r0, r0
    14f4:	33 0b       	sbc	r19, r19
    14f6:	3f 93       	push	r19
    14f8:	8f 93       	push	r24
    14fa:	82 e3       	ldi	r24, 0x32	; 50
    14fc:	91 e0       	ldi	r25, 0x01	; 1
    14fe:	9f 93       	push	r25
    1500:	8f 93       	push	r24
    1502:	ff 92       	push	r15
    1504:	ef 92       	push	r14
    1506:	0e 94 a1 22 	call	0x4542	; 0x4542 <sprintf>
    150a:	8e 8b       	std	Y+22, r24	; 0x16
		for(uint8_t i=((SSD1306_WIDTH/charsize)-buffersize);i<(SSD1306_WIDTH/charsize);i++){
    150c:	15 e1       	ldi	r17, 0x15	; 21
    150e:	18 1b       	sub	r17, r24
    1510:	0f 90       	pop	r0
    1512:	0f 90       	pop	r0
    1514:	0f 90       	pop	r0
    1516:	0f 90       	pop	r0
    1518:	0f 90       	pop	r0
    151a:	0f 90       	pop	r0
    151c:	15 31       	cpi	r17, 0x15	; 21
    151e:	08 f0       	brcs	.+2      	; 0x1522 <_ZN5menue4drawEv+0x7c>
    1520:	9c c0       	rjmp	.+312    	; 0x165a <_ZN5menue4drawEv+0x1b4>
    1522:	01 2f       	mov	r16, r17
    1524:	00 0f       	add	r16, r16
    1526:	01 0f       	add	r16, r17
    1528:	00 0f       	add	r16, r16
			oled->draw_ASCI(buffer[i-((SSD1306_WIDTH/charsize)-buffersize)],i*charsize,0);
    152a:	8e 89       	ldd	r24, Y+22	; 0x16
    152c:	fe 01       	movw	r30, r28
    152e:	e1 0f       	add	r30, r17
    1530:	f1 1d       	adc	r31, r1
    1532:	e8 0f       	add	r30, r24
    1534:	f1 1d       	adc	r31, r1
    1536:	73 97       	sbiw	r30, 0x13	; 19
    1538:	20 e0       	ldi	r18, 0x00	; 0
    153a:	40 2f       	mov	r20, r16
    153c:	60 81       	ld	r22, Z
    153e:	8f 89       	ldd	r24, Y+23	; 0x17
    1540:	98 8d       	ldd	r25, Y+24	; 0x18
    1542:	34 d9       	rcall	.-3480   	; 0x7ac <_ZN7Display9draw_ASCIEhhh>
	void header(){
		for(uint8_t i=0;i<8;i++){
			oled->draw_ASCI(rtc->msg_uhr[i],i*charsize,0);
		}
		buffersize=sprintf(buffer,"Bat: %i%%",Batteriestatus());
		for(uint8_t i=((SSD1306_WIDTH/charsize)-buffersize);i<(SSD1306_WIDTH/charsize);i++){
    1544:	1f 5f       	subi	r17, 0xFF	; 255
    1546:	0a 5f       	subi	r16, 0xFA	; 250
    1548:	15 31       	cpi	r17, 0x15	; 21
    154a:	79 f7       	brne	.-34     	; 0x152a <_ZN5menue4drawEv+0x84>
    154c:	86 c0       	rjmp	.+268    	; 0x165a <_ZN5menue4drawEv+0x1b4>
	}
	
	//draw bottom and overload it
	void bottom(){
		for(uint8_t i=0;i<8;i++){
			oled->draw_ASCI(rtc->msg_dat[i],i*charsize+(SSD1306_WIDTH-bitsderrtc*charsize),7*charhighte);
    154e:	e9 8d       	ldd	r30, Y+25	; 0x19
    1550:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1552:	ec 0d       	add	r30, r12
    1554:	fd 1d       	adc	r31, r13
    1556:	28 e3       	ldi	r18, 0x38	; 56
    1558:	41 2f       	mov	r20, r17
    155a:	60 85       	ldd	r22, Z+8	; 0x08
    155c:	8f 89       	ldd	r24, Y+23	; 0x17
    155e:	98 8d       	ldd	r25, Y+24	; 0x18
    1560:	25 d9       	rcall	.-3510   	; 0x7ac <_ZN7Display9draw_ASCIEhhh>
    1562:	8f ef       	ldi	r24, 0xFF	; 255
    1564:	c8 1a       	sub	r12, r24
    1566:	d8 0a       	sbc	r13, r24
    1568:	1a 5f       	subi	r17, 0xFA	; 250
		}
	}
	
	//draw bottom and overload it
	void bottom(){
		for(uint8_t i=0;i<8;i++){
    156a:	10 38       	cpi	r17, 0x80	; 128
    156c:	81 f7       	brne	.-32     	; 0x154e <_ZN5menue4drawEv+0xa8>
	void draw(){
		monitor::draw();
		header();
		bottom();
		//menueeintrag zeichnen
		buffersize=sprintf(buffer,"Uhr");
    156e:	85 e5       	ldi	r24, 0x55	; 85
    1570:	98 e6       	ldi	r25, 0x68	; 104
    1572:	a2 e7       	ldi	r26, 0x72	; 114
    1574:	b0 e0       	ldi	r27, 0x00	; 0
    1576:	8a 83       	std	Y+2, r24	; 0x02
    1578:	9b 83       	std	Y+3, r25	; 0x03
    157a:	ac 83       	std	Y+4, r26	; 0x04
    157c:	bd 83       	std	Y+5, r27	; 0x05
    157e:	83 e0       	ldi	r24, 0x03	; 3
    1580:	8e 8b       	std	Y+22, r24	; 0x16
    1582:	0c e0       	ldi	r16, 0x0C	; 12
    1584:	10 e0       	ldi	r17, 0x00	; 0
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+2*charsize,2*charhighte);}
    1586:	fe 01       	movw	r30, r28
    1588:	e1 0f       	add	r30, r17
    158a:	f1 1d       	adc	r31, r1
    158c:	20 e1       	ldi	r18, 0x10	; 16
    158e:	40 2f       	mov	r20, r16
    1590:	62 81       	ldd	r22, Z+2	; 0x02
    1592:	8f 89       	ldd	r24, Y+23	; 0x17
    1594:	98 8d       	ldd	r25, Y+24	; 0x18
    1596:	0a d9       	rcall	.-3564   	; 0x7ac <_ZN7Display9draw_ASCIEhhh>
    1598:	1f 5f       	subi	r17, 0xFF	; 255
    159a:	0a 5f       	subi	r16, 0xFA	; 250
    159c:	8e 89       	ldd	r24, Y+22	; 0x16
    159e:	18 17       	cp	r17, r24
    15a0:	90 f3       	brcs	.-28     	; 0x1586 <_ZN5menue4drawEv+0xe0>
		buffersize=sprintf(buffer,"Tacho");
    15a2:	86 e0       	ldi	r24, 0x06	; 6
    15a4:	ec e3       	ldi	r30, 0x3C	; 60
    15a6:	f1 e0       	ldi	r31, 0x01	; 1
    15a8:	d7 01       	movw	r26, r14
    15aa:	01 90       	ld	r0, Z+
    15ac:	0d 92       	st	X+, r0
    15ae:	8a 95       	dec	r24
    15b0:	e1 f7       	brne	.-8      	; 0x15aa <_ZN5menue4drawEv+0x104>
    15b2:	85 e0       	ldi	r24, 0x05	; 5
    15b4:	8e 8b       	std	Y+22, r24	; 0x16
    15b6:	0c e0       	ldi	r16, 0x0C	; 12
    15b8:	10 e0       	ldi	r17, 0x00	; 0
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+2*charsize,3*charhighte);}
    15ba:	fe 01       	movw	r30, r28
    15bc:	e1 0f       	add	r30, r17
    15be:	f1 1d       	adc	r31, r1
    15c0:	28 e1       	ldi	r18, 0x18	; 24
    15c2:	40 2f       	mov	r20, r16
    15c4:	62 81       	ldd	r22, Z+2	; 0x02
    15c6:	8f 89       	ldd	r24, Y+23	; 0x17
    15c8:	98 8d       	ldd	r25, Y+24	; 0x18
    15ca:	f0 d8       	rcall	.-3616   	; 0x7ac <_ZN7Display9draw_ASCIEhhh>
    15cc:	1f 5f       	subi	r17, 0xFF	; 255
    15ce:	0a 5f       	subi	r16, 0xFA	; 250
    15d0:	8e 89       	ldd	r24, Y+22	; 0x16
    15d2:	18 17       	cp	r17, r24
    15d4:	90 f3       	brcs	.-28     	; 0x15ba <_ZN5menue4drawEv+0x114>
		buffersize=sprintf(buffer,"Einstellungen");
    15d6:	8e e0       	ldi	r24, 0x0E	; 14
    15d8:	e2 e4       	ldi	r30, 0x42	; 66
    15da:	f1 e0       	ldi	r31, 0x01	; 1
    15dc:	d7 01       	movw	r26, r14
    15de:	01 90       	ld	r0, Z+
    15e0:	0d 92       	st	X+, r0
    15e2:	8a 95       	dec	r24
    15e4:	e1 f7       	brne	.-8      	; 0x15de <_ZN5menue4drawEv+0x138>
    15e6:	8d e0       	ldi	r24, 0x0D	; 13
    15e8:	8e 8b       	std	Y+22, r24	; 0x16
    15ea:	0c e0       	ldi	r16, 0x0C	; 12
    15ec:	10 e0       	ldi	r17, 0x00	; 0
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+2*charsize,4*charhighte);}
    15ee:	fe 01       	movw	r30, r28
    15f0:	e1 0f       	add	r30, r17
    15f2:	f1 1d       	adc	r31, r1
    15f4:	20 e2       	ldi	r18, 0x20	; 32
    15f6:	40 2f       	mov	r20, r16
    15f8:	62 81       	ldd	r22, Z+2	; 0x02
    15fa:	8f 89       	ldd	r24, Y+23	; 0x17
    15fc:	98 8d       	ldd	r25, Y+24	; 0x18
    15fe:	d6 d8       	rcall	.-3668   	; 0x7ac <_ZN7Display9draw_ASCIEhhh>
    1600:	1f 5f       	subi	r17, 0xFF	; 255
    1602:	0a 5f       	subi	r16, 0xFA	; 250
    1604:	8e 89       	ldd	r24, Y+22	; 0x16
    1606:	18 17       	cp	r17, r24
    1608:	90 f3       	brcs	.-28     	; 0x15ee <_ZN5menue4drawEv+0x148>
		buffersize=sprintf(buffer,"Display aus");
    160a:	8c e0       	ldi	r24, 0x0C	; 12
    160c:	e0 e5       	ldi	r30, 0x50	; 80
    160e:	f1 e0       	ldi	r31, 0x01	; 1
    1610:	d7 01       	movw	r26, r14
    1612:	01 90       	ld	r0, Z+
    1614:	0d 92       	st	X+, r0
    1616:	8a 95       	dec	r24
    1618:	e1 f7       	brne	.-8      	; 0x1612 <_ZN5menue4drawEv+0x16c>
    161a:	8b e0       	ldi	r24, 0x0B	; 11
    161c:	8e 8b       	std	Y+22, r24	; 0x16
    161e:	0c e0       	ldi	r16, 0x0C	; 12
    1620:	10 e0       	ldi	r17, 0x00	; 0
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+2*charsize,5*charhighte);}
    1622:	fe 01       	movw	r30, r28
    1624:	e1 0f       	add	r30, r17
    1626:	f1 1d       	adc	r31, r1
    1628:	28 e2       	ldi	r18, 0x28	; 40
    162a:	40 2f       	mov	r20, r16
    162c:	62 81       	ldd	r22, Z+2	; 0x02
    162e:	8f 89       	ldd	r24, Y+23	; 0x17
    1630:	98 8d       	ldd	r25, Y+24	; 0x18
    1632:	bc d8       	rcall	.-3720   	; 0x7ac <_ZN7Display9draw_ASCIEhhh>
    1634:	1f 5f       	subi	r17, 0xFF	; 255
    1636:	0a 5f       	subi	r16, 0xFA	; 250
    1638:	8e 89       	ldd	r24, Y+22	; 0x16
    163a:	18 17       	cp	r17, r24
    163c:	90 f3       	brcs	.-28     	; 0x1622 <_ZN5menue4drawEv+0x17c>
		oled->draw_ASCI('>',0*charsize,(pos+2)*charhighte);
    163e:	2d a1       	ldd	r18, Y+37	; 0x25
    1640:	22 0f       	add	r18, r18
    1642:	22 0f       	add	r18, r18
    1644:	22 0f       	add	r18, r18
    1646:	20 5f       	subi	r18, 0xF0	; 240
    1648:	40 e0       	ldi	r20, 0x00	; 0
    164a:	6e e3       	ldi	r22, 0x3E	; 62
    164c:	8f 89       	ldd	r24, Y+23	; 0x17
    164e:	98 8d       	ldd	r25, Y+24	; 0x18
    1650:	ad d8       	rcall	.-3750   	; 0x7ac <_ZN7Display9draw_ASCIEhhh>
		oled->clearFrame();
	}

	//send the frame to the display
	void send(){
		oled->sendFrame();	
    1652:	8f 89       	ldd	r24, Y+23	; 0x17
    1654:	98 8d       	ldd	r25, Y+24	; 0x18
    1656:	0c d8       	rcall	.-4072   	; 0x670 <_ZN7Display9sendFrameEv>
    1658:	04 c0       	rjmp	.+8      	; 0x1662 <_ZN5menue4drawEv+0x1bc>
		return 0;
	}
	
	//drawfunktion
	virtual void draw(){
		oled->clearFrame();
    165a:	10 e5       	ldi	r17, 0x50	; 80
    165c:	c1 2c       	mov	r12, r1
    165e:	d1 2c       	mov	r13, r1
    1660:	76 cf       	rjmp	.-276    	; 0x154e <_ZN5menue4drawEv+0xa8>
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+2*charsize,4*charhighte);}
		buffersize=sprintf(buffer,"Display aus");
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+2*charsize,5*charhighte);}
		oled->draw_ASCI('>',0*charsize,(pos+2)*charhighte);
		send();
	}
    1662:	df 91       	pop	r29
    1664:	cf 91       	pop	r28
    1666:	1f 91       	pop	r17
    1668:	0f 91       	pop	r16
    166a:	ff 90       	pop	r15
    166c:	ef 90       	pop	r14
    166e:	df 90       	pop	r13
    1670:	cf 90       	pop	r12
    1672:	08 95       	ret

00001674 <_ZN5tacho4drawEv>:
		}
		return 0;
	}

	//Anzeige schalten
	void draw(){
    1674:	af 92       	push	r10
    1676:	bf 92       	push	r11
    1678:	cf 92       	push	r12
    167a:	df 92       	push	r13
    167c:	ef 92       	push	r14
    167e:	ff 92       	push	r15
    1680:	0f 93       	push	r16
    1682:	1f 93       	push	r17
    1684:	cf 93       	push	r28
    1686:	df 93       	push	r29
    1688:	ec 01       	movw	r28, r24
		return 0;
	}
	
	//drawfunktion
	virtual void draw(){
		oled->clearFrame();
    168a:	8f 89       	ldd	r24, Y+23	; 0x17
    168c:	98 8d       	ldd	r25, Y+24	; 0x18
    168e:	0e 94 be 02 	call	0x57c	; 0x57c <_ZN7Display10clearFrameEv>
				for(uint8_t i=((SSD1306_WIDTH/charsize)-buffersize);i<(SSD1306_WIDTH/charsize);i++){
					oled->draw_ASCI(buffer[i-((SSD1306_WIDTH/charsize)-buffersize)],i*charsize,0);
				}
				break;
			case 2:	//standard Header fuer fast alle Pages
				buffersize=sprintf(buffer,"Bat.: %i%%",Batteriestatus());
    1692:	99 de       	rcall	.-718    	; 0x13c6 <_Z14Batteriestatusv>
    1694:	5e 01       	movw	r10, r28
    1696:	22 e0       	ldi	r18, 0x02	; 2
    1698:	a2 0e       	add	r10, r18
    169a:	b1 1c       	adc	r11, r1
    169c:	28 2f       	mov	r18, r24
    169e:	08 2e       	mov	r0, r24
    16a0:	00 0c       	add	r0, r0
    16a2:	33 0b       	sbc	r19, r19
    16a4:	3f 93       	push	r19
    16a6:	8f 93       	push	r24
    16a8:	8c e5       	ldi	r24, 0x5C	; 92
    16aa:	91 e0       	ldi	r25, 0x01	; 1
    16ac:	9f 93       	push	r25
    16ae:	8f 93       	push	r24
    16b0:	bf 92       	push	r11
    16b2:	af 92       	push	r10
    16b4:	0e 94 a1 22 	call	0x4542	; 0x4542 <sprintf>
    16b8:	8e 8b       	std	Y+22, r24	; 0x16
				for(uint8_t i=((SSD1306_WIDTH/charsize)-buffersize);i<(SSD1306_WIDTH/charsize);i++){
    16ba:	95 e1       	ldi	r25, 0x15	; 21
    16bc:	09 2f       	mov	r16, r25
    16be:	08 1b       	sub	r16, r24
    16c0:	0f 90       	pop	r0
    16c2:	0f 90       	pop	r0
    16c4:	0f 90       	pop	r0
    16c6:	0f 90       	pop	r0
    16c8:	0f 90       	pop	r0
    16ca:	0f 90       	pop	r0
    16cc:	05 31       	cpi	r16, 0x15	; 21
    16ce:	08 f0       	brcs	.+2      	; 0x16d2 <_ZN5tacho4drawEv+0x5e>
    16d0:	c8 c1       	rjmp	.+912    	; 0x1a62 <_ZN5tacho4drawEv+0x3ee>
    16d2:	e0 2e       	mov	r14, r16
    16d4:	ee 0c       	add	r14, r14
    16d6:	e0 0e       	add	r14, r16
    16d8:	1e 2d       	mov	r17, r14
    16da:	11 0f       	add	r17, r17
					oled->draw_ASCI(buffer[i-((SSD1306_WIDTH/charsize)-buffersize)],i*charsize,0);
    16dc:	8e 89       	ldd	r24, Y+22	; 0x16
    16de:	fe 01       	movw	r30, r28
    16e0:	e0 0f       	add	r30, r16
    16e2:	f1 1d       	adc	r31, r1
    16e4:	e8 0f       	add	r30, r24
    16e6:	f1 1d       	adc	r31, r1
    16e8:	73 97       	sbiw	r30, 0x13	; 19
    16ea:	20 e0       	ldi	r18, 0x00	; 0
    16ec:	41 2f       	mov	r20, r17
    16ee:	60 81       	ld	r22, Z
    16f0:	8f 89       	ldd	r24, Y+23	; 0x17
    16f2:	98 8d       	ldd	r25, Y+24	; 0x18
    16f4:	5b d8       	rcall	.-3914   	; 0x7ac <_ZN7Display9draw_ASCIEhhh>
					oled->draw_ASCI(buffer[i-((SSD1306_WIDTH/charsize)-buffersize)],i*charsize,0);
				}
				break;
			case 2:	//standard Header fuer fast alle Pages
				buffersize=sprintf(buffer,"Bat.: %i%%",Batteriestatus());
				for(uint8_t i=((SSD1306_WIDTH/charsize)-buffersize);i<(SSD1306_WIDTH/charsize);i++){
    16f6:	0f 5f       	subi	r16, 0xFF	; 255
    16f8:	1a 5f       	subi	r17, 0xFA	; 250
    16fa:	05 31       	cpi	r16, 0x15	; 21
    16fc:	79 f7       	brne	.-34     	; 0x16dc <_ZN5tacho4drawEv+0x68>
    16fe:	b1 c1       	rjmp	.+866    	; 0x1a62 <_ZN5tacho4drawEv+0x3ee>
	}
	
	//draw bottom and overload it
	void bottom(){
		for(uint8_t i=0;i<8;i++){
			oled->draw_ASCI(rtc->msg_dat[i],i*charsize+(SSD1306_WIDTH-bitsderrtc*charsize),7*charhighte);
    1700:	e9 8d       	ldd	r30, Y+25	; 0x19
    1702:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1704:	ec 0d       	add	r30, r12
    1706:	fd 1d       	adc	r31, r13
    1708:	28 e3       	ldi	r18, 0x38	; 56
    170a:	41 2f       	mov	r20, r17
    170c:	60 85       	ldd	r22, Z+8	; 0x08
    170e:	8f 89       	ldd	r24, Y+23	; 0x17
    1710:	98 8d       	ldd	r25, Y+24	; 0x18
    1712:	4c d8       	rcall	.-3944   	; 0x7ac <_ZN7Display9draw_ASCIEhhh>
    1714:	3f ef       	ldi	r19, 0xFF	; 255
    1716:	c3 1a       	sub	r12, r19
    1718:	d3 0a       	sbc	r13, r19
    171a:	1a 5f       	subi	r17, 0xFA	; 250
		}
	}
	
	//draw bottom and overload it
	void bottom(){
		for(uint8_t i=0;i<8;i++){
    171c:	10 38       	cpi	r17, 0x80	; 128
    171e:	81 f7       	brne	.-32     	; 0x1700 <_ZN5tacho4drawEv+0x8c>
		monitor::draw();
		header(2);
		bottom();

		//Rahmen zeichnen
		oled->drawHLine(0,SSD1306_HEIGHT-9,SSD1306_WIDTH);
    1720:	20 e8       	ldi	r18, 0x80	; 128
    1722:	47 e3       	ldi	r20, 0x37	; 55
    1724:	60 e0       	ldi	r22, 0x00	; 0
    1726:	8f 89       	ldd	r24, Y+23	; 0x17
    1728:	98 8d       	ldd	r25, Y+24	; 0x18
    172a:	26 d8       	rcall	.-4020   	; 0x778 <_ZN7Display9drawHLineEhhh>
		oled->drawHLine(0,numbersmalhight-1,SSD1306_WIDTH/2+5);
    172c:	25 e4       	ldi	r18, 0x45	; 69
    172e:	4f e0       	ldi	r20, 0x0F	; 15
    1730:	60 e0       	ldi	r22, 0x00	; 0
    1732:	8f 89       	ldd	r24, Y+23	; 0x17
    1734:	98 8d       	ldd	r25, Y+24	; 0x18
    1736:	20 d8       	rcall	.-4032   	; 0x778 <_ZN7Display9drawHLineEhhh>
		oled->drawHLine(SSD1306_WIDTH/2+5,charhighte-1,SSD1306_WIDTH/2-5);
    1738:	2b e3       	ldi	r18, 0x3B	; 59
    173a:	47 e0       	ldi	r20, 0x07	; 7
    173c:	65 e4       	ldi	r22, 0x45	; 69
    173e:	8f 89       	ldd	r24, Y+23	; 0x17
    1740:	98 8d       	ldd	r25, Y+24	; 0x18
    1742:	1a d8       	rcall	.-4044   	; 0x778 <_ZN7Display9drawHLineEhhh>
		oled->drawVLine(SSD1306_WIDTH/2+5,0,numbersmalhight);
    1744:	20 e1       	ldi	r18, 0x10	; 16
    1746:	40 e0       	ldi	r20, 0x00	; 0
    1748:	65 e4       	ldi	r22, 0x45	; 69
    174a:	8f 89       	ldd	r24, Y+23	; 0x17
    174c:	98 8d       	ldd	r25, Y+24	; 0x18
    174e:	0e 94 a2 03 	call	0x744	; 0x744 <_ZN7Display9drawVLineEhhh>
		oled->drawHLine(SSD1306_WIDTH-4*numbersmalsize-1,5*charhighte-1,4*numbersmalsize+1);
    1752:	21 e4       	ldi	r18, 0x41	; 65
    1754:	47 e2       	ldi	r20, 0x27	; 39
    1756:	6f e3       	ldi	r22, 0x3F	; 63
    1758:	8f 89       	ldd	r24, Y+23	; 0x17
    175a:	98 8d       	ldd	r25, Y+24	; 0x18
    175c:	0d d8       	rcall	.-4070   	; 0x778 <_ZN7Display9drawHLineEhhh>
		oled->drawVLine(SSD1306_WIDTH-4*numbersmalsize-1,numbersmalhight,SSD1306_HEIGHT-numbersmalhight);
    175e:	20 e3       	ldi	r18, 0x30	; 48
    1760:	40 e1       	ldi	r20, 0x10	; 16
    1762:	6f e3       	ldi	r22, 0x3F	; 63
    1764:	8f 89       	ldd	r24, Y+23	; 0x17
    1766:	98 8d       	ldd	r25, Y+24	; 0x18
    1768:	0e 94 a2 03 	call	0x744	; 0x744 <_ZN7Display9drawVLineEhhh>
		oled->drawHLine(SSD1306_WIDTH-4*numbersmalsize-1,3*charhighte,4*numbersmalsize+1);
    176c:	21 e4       	ldi	r18, 0x41	; 65
    176e:	48 e1       	ldi	r20, 0x18	; 24
    1770:	6f e3       	ldi	r22, 0x3F	; 63
    1772:	8f 89       	ldd	r24, Y+23	; 0x17
    1774:	98 8d       	ldd	r25, Y+24	; 0x18
    1776:	00 d8       	rcall	.-4096   	; 0x778 <_ZN7Display9drawHLineEhhh>

		//lesbare Uhr
		oled->draw_number16x16(rtc->msg_uhr[0]-'0',0*numbersmalsize,0*charhighte);
    1778:	e9 8d       	ldd	r30, Y+25	; 0x19
    177a:	fa 8d       	ldd	r31, Y+26	; 0x1a
    177c:	60 81       	ld	r22, Z
    177e:	60 53       	subi	r22, 0x30	; 48
    1780:	20 e0       	ldi	r18, 0x00	; 0
    1782:	40 e0       	ldi	r20, 0x00	; 0
    1784:	8f 89       	ldd	r24, Y+23	; 0x17
    1786:	98 8d       	ldd	r25, Y+24	; 0x18
    1788:	5b d8       	rcall	.-3914   	; 0x840 <_ZN7Display16draw_number16x16Ehhh>
		oled->draw_number16x16(rtc->msg_uhr[1]-'0',1*numbersmalsize,0*charhighte);
    178a:	e9 8d       	ldd	r30, Y+25	; 0x19
    178c:	fa 8d       	ldd	r31, Y+26	; 0x1a
    178e:	61 81       	ldd	r22, Z+1	; 0x01
    1790:	60 53       	subi	r22, 0x30	; 48
    1792:	20 e0       	ldi	r18, 0x00	; 0
    1794:	40 e1       	ldi	r20, 0x10	; 16
    1796:	8f 89       	ldd	r24, Y+23	; 0x17
    1798:	98 8d       	ldd	r25, Y+24	; 0x18
    179a:	52 d8       	rcall	.-3932   	; 0x840 <_ZN7Display16draw_number16x16Ehhh>
		oled->draw_number16x16(rtc->msg_uhr[3]-'0',2.33*numbersmalsize,0*charhighte);
    179c:	e9 8d       	ldd	r30, Y+25	; 0x19
    179e:	fa 8d       	ldd	r31, Y+26	; 0x1a
    17a0:	63 81       	ldd	r22, Z+3	; 0x03
    17a2:	60 53       	subi	r22, 0x30	; 48
    17a4:	20 e0       	ldi	r18, 0x00	; 0
    17a6:	45 e2       	ldi	r20, 0x25	; 37
    17a8:	8f 89       	ldd	r24, Y+23	; 0x17
    17aa:	98 8d       	ldd	r25, Y+24	; 0x18
    17ac:	49 d8       	rcall	.-3950   	; 0x840 <_ZN7Display16draw_number16x16Ehhh>
		oled->draw_number16x16(rtc->msg_uhr[4]-'0',3.33*numbersmalsize,0*charhighte);
    17ae:	e9 8d       	ldd	r30, Y+25	; 0x19
    17b0:	fa 8d       	ldd	r31, Y+26	; 0x1a
    17b2:	64 81       	ldd	r22, Z+4	; 0x04
    17b4:	60 53       	subi	r22, 0x30	; 48
    17b6:	20 e0       	ldi	r18, 0x00	; 0
    17b8:	45 e3       	ldi	r20, 0x35	; 53
    17ba:	8f 89       	ldd	r24, Y+23	; 0x17
    17bc:	98 8d       	ldd	r25, Y+24	; 0x18
    17be:	40 d8       	rcall	.-3968   	; 0x840 <_ZN7Display16draw_number16x16Ehhh>

		//Ausgabe der Geschwidigkeit
		buffersize=sprintf(buffer,"%3.1f",geschw);
    17c0:	80 91 95 02 	lds	r24, 0x0295
    17c4:	8f 93       	push	r24
    17c6:	80 91 94 02 	lds	r24, 0x0294
    17ca:	8f 93       	push	r24
    17cc:	80 91 93 02 	lds	r24, 0x0293
    17d0:	8f 93       	push	r24
    17d2:	80 91 92 02 	lds	r24, 0x0292
    17d6:	8f 93       	push	r24
    17d8:	87 e6       	ldi	r24, 0x67	; 103
    17da:	91 e0       	ldi	r25, 0x01	; 1
    17dc:	9f 93       	push	r25
    17de:	8f 93       	push	r24
    17e0:	bf 92       	push	r11
    17e2:	af 92       	push	r10
    17e4:	0e 94 a1 22 	call	0x4542	; 0x4542 <sprintf>
    17e8:	8e 8b       	std	Y+22, r24	; 0x16
		for(uint8_t i=((SSD1306_WIDTH/numbersmalsize)-buffersize);i<((SSD1306_WIDTH/numbersmalsize));i++){
    17ea:	98 e0       	ldi	r25, 0x08	; 8
    17ec:	09 2f       	mov	r16, r25
    17ee:	08 1b       	sub	r16, r24
    17f0:	8d b7       	in	r24, 0x3d	; 61
    17f2:	9e b7       	in	r25, 0x3e	; 62
    17f4:	08 96       	adiw	r24, 0x08	; 8
    17f6:	0f b6       	in	r0, 0x3f	; 63
    17f8:	f8 94       	cli
    17fa:	9e bf       	out	0x3e, r25	; 62
    17fc:	0f be       	out	0x3f, r0	; 63
    17fe:	8d bf       	out	0x3d, r24	; 61
    1800:	08 30       	cpi	r16, 0x08	; 8
    1802:	f0 f4       	brcc	.+60     	; 0x1840 <_ZN5tacho4drawEv+0x1cc>
    1804:	10 2f       	mov	r17, r16
    1806:	12 95       	swap	r17
    1808:	10 7f       	andi	r17, 0xF0	; 240
			if(buffer[i-((SSD1306_WIDTH/numbersmalsize)-buffersize)]=='.'){
    180a:	8e 89       	ldd	r24, Y+22	; 0x16
    180c:	fe 01       	movw	r30, r28
    180e:	e0 0f       	add	r30, r16
    1810:	f1 1d       	adc	r31, r1
    1812:	e8 0f       	add	r30, r24
    1814:	f1 1d       	adc	r31, r1
    1816:	36 97       	sbiw	r30, 0x06	; 6
    1818:	60 81       	ld	r22, Z
    181a:	6e 32       	cpi	r22, 0x2E	; 46
    181c:	39 f4       	brne	.+14     	; 0x182c <_ZN5tacho4drawEv+0x1b8>
				oled->draw_ASCI(buffer[i-((SSD1306_WIDTH/numbersmalsize)-buffersize)],i*numbersmalsize,4*charhighte);
    181e:	20 e2       	ldi	r18, 0x20	; 32
    1820:	41 2f       	mov	r20, r17
    1822:	8f 89       	ldd	r24, Y+23	; 0x17
    1824:	98 8d       	ldd	r25, Y+24	; 0x18
    1826:	0e 94 d6 03 	call	0x7ac	; 0x7ac <_ZN7Display9draw_ASCIEhhh>
    182a:	06 c0       	rjmp	.+12     	; 0x1838 <_ZN5tacho4drawEv+0x1c4>
			}
			else{
				oled->draw_number16x16(buffer[i-((SSD1306_WIDTH/numbersmalsize)-buffersize)]-'0',i*numbersmalsize,3*charhighte);
    182c:	60 53       	subi	r22, 0x30	; 48
    182e:	28 e1       	ldi	r18, 0x18	; 24
    1830:	41 2f       	mov	r20, r17
    1832:	8f 89       	ldd	r24, Y+23	; 0x17
    1834:	98 8d       	ldd	r25, Y+24	; 0x18
    1836:	04 d8       	rcall	.-4088   	; 0x840 <_ZN7Display16draw_number16x16Ehhh>
		oled->draw_number16x16(rtc->msg_uhr[3]-'0',2.33*numbersmalsize,0*charhighte);
		oled->draw_number16x16(rtc->msg_uhr[4]-'0',3.33*numbersmalsize,0*charhighte);

		//Ausgabe der Geschwidigkeit
		buffersize=sprintf(buffer,"%3.1f",geschw);
		for(uint8_t i=((SSD1306_WIDTH/numbersmalsize)-buffersize);i<((SSD1306_WIDTH/numbersmalsize));i++){
    1838:	0f 5f       	subi	r16, 0xFF	; 255
    183a:	10 5f       	subi	r17, 0xF0	; 240
    183c:	08 30       	cpi	r16, 0x08	; 8
    183e:	29 f7       	brne	.-54     	; 0x180a <_ZN5tacho4drawEv+0x196>
		//Nadel erst, wenn Kompass implementiert
		//Anzeige der Richtung als Alternative
		//anzeige_kleinenadel(31,31+8,angle);

		//anzeige der gesammtstrecke
		buffersize=sprintf(buffer,"%.3fkm",strecke/1000);
    1840:	20 e0       	ldi	r18, 0x00	; 0
    1842:	30 e0       	ldi	r19, 0x00	; 0
    1844:	4a e7       	ldi	r20, 0x7A	; 122
    1846:	54 e4       	ldi	r21, 0x44	; 68
    1848:	60 91 8e 02 	lds	r22, 0x028E
    184c:	70 91 8f 02 	lds	r23, 0x028F
    1850:	80 91 90 02 	lds	r24, 0x0290
    1854:	90 91 91 02 	lds	r25, 0x0291
    1858:	0e 94 66 1a 	call	0x34cc	; 0x34cc <__divsf3>
    185c:	9f 93       	push	r25
    185e:	8f 93       	push	r24
    1860:	7f 93       	push	r23
    1862:	6f 93       	push	r22
    1864:	8d e6       	ldi	r24, 0x6D	; 109
    1866:	91 e0       	ldi	r25, 0x01	; 1
    1868:	9f 93       	push	r25
    186a:	8f 93       	push	r24
    186c:	bf 92       	push	r11
    186e:	af 92       	push	r10
    1870:	0e 94 a1 22 	call	0x4542	; 0x4542 <sprintf>
    1874:	8e 8b       	std	Y+22, r24	; 0x16
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+70,2*charhighte);}
    1876:	2d b7       	in	r18, 0x3d	; 61
    1878:	3e b7       	in	r19, 0x3e	; 62
    187a:	28 5f       	subi	r18, 0xF8	; 248
    187c:	3f 4f       	sbci	r19, 0xFF	; 255
    187e:	0f b6       	in	r0, 0x3f	; 63
    1880:	f8 94       	cli
    1882:	3e bf       	out	0x3e, r19	; 62
    1884:	0f be       	out	0x3f, r0	; 63
    1886:	2d bf       	out	0x3d, r18	; 61
    1888:	88 23       	and	r24, r24
    188a:	89 f0       	breq	.+34     	; 0x18ae <_ZN5tacho4drawEv+0x23a>
    188c:	16 e4       	ldi	r17, 0x46	; 70
    188e:	f1 2c       	mov	r15, r1
    1890:	fe 01       	movw	r30, r28
    1892:	ef 0d       	add	r30, r15
    1894:	f1 1d       	adc	r31, r1
    1896:	20 e1       	ldi	r18, 0x10	; 16
    1898:	41 2f       	mov	r20, r17
    189a:	62 81       	ldd	r22, Z+2	; 0x02
    189c:	8f 89       	ldd	r24, Y+23	; 0x17
    189e:	98 8d       	ldd	r25, Y+24	; 0x18
    18a0:	0e 94 d6 03 	call	0x7ac	; 0x7ac <_ZN7Display9draw_ASCIEhhh>
    18a4:	f3 94       	inc	r15
    18a6:	1a 5f       	subi	r17, 0xFA	; 250
    18a8:	8e 89       	ldd	r24, Y+22	; 0x16
    18aa:	f8 16       	cp	r15, r24
    18ac:	88 f3       	brcs	.-30     	; 0x1890 <_ZN5tacho4drawEv+0x21c>

		//anzeige der max geschwindigkeit
		buffersize=sprintf(buffer,"%.1fkm/h",maxgeschw);
    18ae:	80 91 8d 02 	lds	r24, 0x028D
    18b2:	8f 93       	push	r24
    18b4:	80 91 8c 02 	lds	r24, 0x028C
    18b8:	8f 93       	push	r24
    18ba:	80 91 8b 02 	lds	r24, 0x028B
    18be:	8f 93       	push	r24
    18c0:	80 91 8a 02 	lds	r24, 0x028A
    18c4:	8f 93       	push	r24
    18c6:	84 e7       	ldi	r24, 0x74	; 116
    18c8:	91 e0       	ldi	r25, 0x01	; 1
    18ca:	9f 93       	push	r25
    18cc:	8f 93       	push	r24
    18ce:	bf 92       	push	r11
    18d0:	af 92       	push	r10
    18d2:	0e 94 a1 22 	call	0x4542	; 0x4542 <sprintf>
    18d6:	8e 8b       	std	Y+22, r24	; 0x16
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+70,5*charhighte);}
    18d8:	2d b7       	in	r18, 0x3d	; 61
    18da:	3e b7       	in	r19, 0x3e	; 62
    18dc:	28 5f       	subi	r18, 0xF8	; 248
    18de:	3f 4f       	sbci	r19, 0xFF	; 255
    18e0:	0f b6       	in	r0, 0x3f	; 63
    18e2:	f8 94       	cli
    18e4:	3e bf       	out	0x3e, r19	; 62
    18e6:	0f be       	out	0x3f, r0	; 63
    18e8:	2d bf       	out	0x3d, r18	; 61
    18ea:	88 23       	and	r24, r24
    18ec:	89 f0       	breq	.+34     	; 0x1910 <_ZN5tacho4drawEv+0x29c>
    18ee:	16 e4       	ldi	r17, 0x46	; 70
    18f0:	f1 2c       	mov	r15, r1
    18f2:	fe 01       	movw	r30, r28
    18f4:	ef 0d       	add	r30, r15
    18f6:	f1 1d       	adc	r31, r1
    18f8:	28 e2       	ldi	r18, 0x28	; 40
    18fa:	41 2f       	mov	r20, r17
    18fc:	62 81       	ldd	r22, Z+2	; 0x02
    18fe:	8f 89       	ldd	r24, Y+23	; 0x17
    1900:	98 8d       	ldd	r25, Y+24	; 0x18
    1902:	0e 94 d6 03 	call	0x7ac	; 0x7ac <_ZN7Display9draw_ASCIEhhh>
    1906:	f3 94       	inc	r15
    1908:	1a 5f       	subi	r17, 0xFA	; 250
    190a:	8e 89       	ldd	r24, Y+22	; 0x16
    190c:	f8 16       	cp	r15, r24
    190e:	88 f3       	brcs	.-30     	; 0x18f2 <_ZN5tacho4drawEv+0x27e>

		//anzeige der Fahrtzeit
		buffersize=sprintf(buffer,"%02i:%02i:%02i",uint8_t(Fahrtzeit/3600),uint8_t(Fahrtzeit/60),uint8_t(Fahrtzeit%60));
    1910:	c0 90 86 02 	lds	r12, 0x0286
    1914:	d0 90 87 02 	lds	r13, 0x0287
    1918:	e0 90 88 02 	lds	r14, 0x0288
    191c:	f0 90 89 02 	lds	r15, 0x0289
    1920:	c7 01       	movw	r24, r14
    1922:	b6 01       	movw	r22, r12
    1924:	2c e3       	ldi	r18, 0x3C	; 60
    1926:	30 e0       	ldi	r19, 0x00	; 0
    1928:	40 e0       	ldi	r20, 0x00	; 0
    192a:	50 e0       	ldi	r21, 0x00	; 0
    192c:	0e 94 23 20 	call	0x4046	; 0x4046 <__udivmodsi4>
    1930:	1f 92       	push	r1
    1932:	6f 93       	push	r22
    1934:	1f 92       	push	r1
    1936:	2f 93       	push	r18
    1938:	c7 01       	movw	r24, r14
    193a:	b6 01       	movw	r22, r12
    193c:	20 e1       	ldi	r18, 0x10	; 16
    193e:	3e e0       	ldi	r19, 0x0E	; 14
    1940:	40 e0       	ldi	r20, 0x00	; 0
    1942:	50 e0       	ldi	r21, 0x00	; 0
    1944:	0e 94 23 20 	call	0x4046	; 0x4046 <__udivmodsi4>
    1948:	1f 92       	push	r1
    194a:	2f 93       	push	r18
    194c:	8d e7       	ldi	r24, 0x7D	; 125
    194e:	91 e0       	ldi	r25, 0x01	; 1
    1950:	9f 93       	push	r25
    1952:	8f 93       	push	r24
    1954:	bf 92       	push	r11
    1956:	af 92       	push	r10
    1958:	0e 94 a1 22 	call	0x4542	; 0x4542 <sprintf>
    195c:	8e 8b       	std	Y+22, r24	; 0x16
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+70,6*charhighte);}
    195e:	2d b7       	in	r18, 0x3d	; 61
    1960:	3e b7       	in	r19, 0x3e	; 62
    1962:	26 5f       	subi	r18, 0xF6	; 246
    1964:	3f 4f       	sbci	r19, 0xFF	; 255
    1966:	0f b6       	in	r0, 0x3f	; 63
    1968:	f8 94       	cli
    196a:	3e bf       	out	0x3e, r19	; 62
    196c:	0f be       	out	0x3f, r0	; 63
    196e:	2d bf       	out	0x3d, r18	; 61
    1970:	88 23       	and	r24, r24
    1972:	89 f0       	breq	.+34     	; 0x1996 <_ZN5tacho4drawEv+0x322>
    1974:	16 e4       	ldi	r17, 0x46	; 70
    1976:	f1 2c       	mov	r15, r1
    1978:	fe 01       	movw	r30, r28
    197a:	ef 0d       	add	r30, r15
    197c:	f1 1d       	adc	r31, r1
    197e:	20 e3       	ldi	r18, 0x30	; 48
    1980:	41 2f       	mov	r20, r17
    1982:	62 81       	ldd	r22, Z+2	; 0x02
    1984:	8f 89       	ldd	r24, Y+23	; 0x17
    1986:	98 8d       	ldd	r25, Y+24	; 0x18
    1988:	0e 94 d6 03 	call	0x7ac	; 0x7ac <_ZN7Display9draw_ASCIEhhh>
    198c:	f3 94       	inc	r15
    198e:	1a 5f       	subi	r17, 0xFA	; 250
    1990:	8e 89       	ldd	r24, Y+22	; 0x16
    1992:	f8 16       	cp	r15, r24
    1994:	88 f3       	brcs	.-30     	; 0x1978 <_ZN5tacho4drawEv+0x304>
		
		//anzeige der durschschnittsgeschw
		if (Fahrtzeit==0)
    1996:	60 91 86 02 	lds	r22, 0x0286
    199a:	70 91 87 02 	lds	r23, 0x0287
    199e:	80 91 88 02 	lds	r24, 0x0288
    19a2:	90 91 89 02 	lds	r25, 0x0289
    19a6:	61 15       	cp	r22, r1
    19a8:	71 05       	cpc	r23, r1
    19aa:	81 05       	cpc	r24, r1
    19ac:	91 05       	cpc	r25, r1
    19ae:	b1 f4       	brne	.+44     	; 0x19dc <_ZN5tacho4drawEv+0x368>
		{
			buffersize=sprintf(buffer,"%.1fkm/h",0.0);
    19b0:	1f 92       	push	r1
    19b2:	1f 92       	push	r1
    19b4:	1f 92       	push	r1
    19b6:	1f 92       	push	r1
    19b8:	84 e7       	ldi	r24, 0x74	; 116
    19ba:	91 e0       	ldi	r25, 0x01	; 1
    19bc:	9f 93       	push	r25
    19be:	8f 93       	push	r24
    19c0:	bf 92       	push	r11
    19c2:	af 92       	push	r10
    19c4:	0e 94 a1 22 	call	0x4542	; 0x4542 <sprintf>
    19c8:	8e 8b       	std	Y+22, r24	; 0x16
    19ca:	8d b7       	in	r24, 0x3d	; 61
    19cc:	9e b7       	in	r25, 0x3e	; 62
    19ce:	08 96       	adiw	r24, 0x08	; 8
    19d0:	0f b6       	in	r0, 0x3f	; 63
    19d2:	f8 94       	cli
    19d4:	9e bf       	out	0x3e, r25	; 62
    19d6:	0f be       	out	0x3f, r0	; 63
    19d8:	8d bf       	out	0x3d, r24	; 61
    19da:	2a c0       	rjmp	.+84     	; 0x1a30 <_ZN5tacho4drawEv+0x3bc>
		}
		else {
			buffersize=sprintf(buffer,"%.1fkm/h",(strecke/Fahrtzeit)*3.6);
    19dc:	0e 94 ff 1a 	call	0x35fe	; 0x35fe <__floatunsisf>
    19e0:	9b 01       	movw	r18, r22
    19e2:	ac 01       	movw	r20, r24
    19e4:	60 91 8e 02 	lds	r22, 0x028E
    19e8:	70 91 8f 02 	lds	r23, 0x028F
    19ec:	80 91 90 02 	lds	r24, 0x0290
    19f0:	90 91 91 02 	lds	r25, 0x0291
    19f4:	0e 94 66 1a 	call	0x34cc	; 0x34cc <__divsf3>
    19f8:	26 e6       	ldi	r18, 0x66	; 102
    19fa:	36 e6       	ldi	r19, 0x66	; 102
    19fc:	46 e6       	ldi	r20, 0x66	; 102
    19fe:	50 e4       	ldi	r21, 0x40	; 64
    1a00:	0e 94 13 1c 	call	0x3826	; 0x3826 <__mulsf3>
    1a04:	9f 93       	push	r25
    1a06:	8f 93       	push	r24
    1a08:	7f 93       	push	r23
    1a0a:	6f 93       	push	r22
    1a0c:	84 e7       	ldi	r24, 0x74	; 116
    1a0e:	91 e0       	ldi	r25, 0x01	; 1
    1a10:	9f 93       	push	r25
    1a12:	8f 93       	push	r24
    1a14:	bf 92       	push	r11
    1a16:	af 92       	push	r10
    1a18:	0e 94 a1 22 	call	0x4542	; 0x4542 <sprintf>
    1a1c:	8e 8b       	std	Y+22, r24	; 0x16
    1a1e:	2d b7       	in	r18, 0x3d	; 61
    1a20:	3e b7       	in	r19, 0x3e	; 62
    1a22:	28 5f       	subi	r18, 0xF8	; 248
    1a24:	3f 4f       	sbci	r19, 0xFF	; 255
    1a26:	0f b6       	in	r0, 0x3f	; 63
    1a28:	f8 94       	cli
    1a2a:	3e bf       	out	0x3e, r19	; 62
    1a2c:	0f be       	out	0x3f, r0	; 63
    1a2e:	2d bf       	out	0x3d, r18	; 61
		}
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+75,1*charhighte);}
    1a30:	8e 89       	ldd	r24, Y+22	; 0x16
    1a32:	88 23       	and	r24, r24
    1a34:	89 f0       	breq	.+34     	; 0x1a58 <_ZN5tacho4drawEv+0x3e4>
    1a36:	0b e4       	ldi	r16, 0x4B	; 75
    1a38:	10 e0       	ldi	r17, 0x00	; 0
    1a3a:	fe 01       	movw	r30, r28
    1a3c:	e1 0f       	add	r30, r17
    1a3e:	f1 1d       	adc	r31, r1
    1a40:	28 e0       	ldi	r18, 0x08	; 8
    1a42:	40 2f       	mov	r20, r16
    1a44:	62 81       	ldd	r22, Z+2	; 0x02
    1a46:	8f 89       	ldd	r24, Y+23	; 0x17
    1a48:	98 8d       	ldd	r25, Y+24	; 0x18
    1a4a:	0e 94 d6 03 	call	0x7ac	; 0x7ac <_ZN7Display9draw_ASCIEhhh>
    1a4e:	1f 5f       	subi	r17, 0xFF	; 255
    1a50:	0a 5f       	subi	r16, 0xFA	; 250
    1a52:	8e 89       	ldd	r24, Y+22	; 0x16
    1a54:	18 17       	cp	r17, r24
    1a56:	88 f3       	brcs	.-30     	; 0x1a3a <_ZN5tacho4drawEv+0x3c6>
		oled->clearFrame();
	}

	//send the frame to the display
	void send(){
		oled->sendFrame();	
    1a58:	8f 89       	ldd	r24, Y+23	; 0x17
    1a5a:	98 8d       	ldd	r25, Y+24	; 0x18
    1a5c:	0e 94 38 03 	call	0x670	; 0x670 <_ZN7Display9sendFrameEv>
    1a60:	04 c0       	rjmp	.+8      	; 0x1a6a <_ZN5tacho4drawEv+0x3f6>
		}
		return 0;
	}

	//Anzeige schalten
	void draw(){
    1a62:	10 e5       	ldi	r17, 0x50	; 80
    1a64:	c1 2c       	mov	r12, r1
    1a66:	d1 2c       	mov	r13, r1
    1a68:	4b ce       	rjmp	.-874    	; 0x1700 <_ZN5tacho4drawEv+0x8c>
			buffersize=sprintf(buffer,"%.1fkm/h",(strecke/Fahrtzeit)*3.6);
		}
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+75,1*charhighte);}

		send();
	}
    1a6a:	df 91       	pop	r29
    1a6c:	cf 91       	pop	r28
    1a6e:	1f 91       	pop	r17
    1a70:	0f 91       	pop	r16
    1a72:	ff 90       	pop	r15
    1a74:	ef 90       	pop	r14
    1a76:	df 90       	pop	r13
    1a78:	cf 90       	pop	r12
    1a7a:	bf 90       	pop	r11
    1a7c:	af 90       	pop	r10
    1a7e:	08 95       	ret

00001a80 <_ZN3uhr4drawEv>:
		}
	return 0;
	}

	//anzeige vorbereiten
	void draw()
    1a80:	ef 92       	push	r14
    1a82:	ff 92       	push	r15
    1a84:	0f 93       	push	r16
    1a86:	1f 93       	push	r17
    1a88:	cf 93       	push	r28
    1a8a:	df 93       	push	r29
    1a8c:	ec 01       	movw	r28, r24
		return 0;
	}
	
	//drawfunktion
	virtual void draw(){
		oled->clearFrame();
    1a8e:	8f 89       	ldd	r24, Y+23	; 0x17
    1a90:	98 8d       	ldd	r25, Y+24	; 0x18
    1a92:	0e 94 be 02 	call	0x57c	; 0x57c <_ZN7Display10clearFrameEv>
    1a96:	11 e4       	ldi	r17, 0x41	; 65
    1a98:	e1 2c       	mov	r14, r1
    1a9a:	f1 2c       	mov	r15, r1
				for(uint8_t i=((SSD1306_WIDTH/charsize)-buffersize);i<(SSD1306_WIDTH/charsize);i++){
					oled->draw_ASCI(buffer[i-((SSD1306_WIDTH/charsize)-buffersize)],i*charsize,0);
				}
				break;
			case 1:	//standard Header fuer fast alle Pages
				for(uint8_t i=0;i<(bitsderrtc-3);i++){oled->draw_ASCI(rtc->msg_uhr[i],65+i*charsize,0*charhighte);}
    1a9c:	e9 8d       	ldd	r30, Y+25	; 0x19
    1a9e:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1aa0:	ee 0d       	add	r30, r14
    1aa2:	ff 1d       	adc	r31, r15
    1aa4:	20 e0       	ldi	r18, 0x00	; 0
    1aa6:	41 2f       	mov	r20, r17
    1aa8:	60 81       	ld	r22, Z
    1aaa:	8f 89       	ldd	r24, Y+23	; 0x17
    1aac:	98 8d       	ldd	r25, Y+24	; 0x18
    1aae:	0e 94 d6 03 	call	0x7ac	; 0x7ac <_ZN7Display9draw_ASCIEhhh>
    1ab2:	8f ef       	ldi	r24, 0xFF	; 255
    1ab4:	e8 1a       	sub	r14, r24
    1ab6:	f8 0a       	sbc	r15, r24
    1ab8:	1a 5f       	subi	r17, 0xFA	; 250
    1aba:	1f 35       	cpi	r17, 0x5F	; 95
    1abc:	79 f7       	brne	.-34     	; 0x1a9c <_ZN3uhr4drawEv+0x1c>
				buffersize=sprintf(buffer,"%i%%",Batteriestatus());
    1abe:	83 dc       	rcall	.-1786   	; 0x13c6 <_Z14Batteriestatusv>
    1ac0:	28 2f       	mov	r18, r24
    1ac2:	08 2e       	mov	r0, r24
    1ac4:	00 0c       	add	r0, r0
    1ac6:	33 0b       	sbc	r19, r19
    1ac8:	3f 93       	push	r19
    1aca:	8f 93       	push	r24
    1acc:	82 e6       	ldi	r24, 0x62	; 98
    1ace:	91 e0       	ldi	r25, 0x01	; 1
    1ad0:	9f 93       	push	r25
    1ad2:	8f 93       	push	r24
    1ad4:	ce 01       	movw	r24, r28
    1ad6:	02 96       	adiw	r24, 0x02	; 2
    1ad8:	9f 93       	push	r25
    1ada:	8f 93       	push	r24
    1adc:	0e 94 a1 22 	call	0x4542	; 0x4542 <sprintf>
    1ae0:	8e 8b       	std	Y+22, r24	; 0x16
				for(uint8_t i=((SSD1306_WIDTH/charsize)-buffersize);i<(SSD1306_WIDTH/charsize);i++){
    1ae2:	15 e1       	ldi	r17, 0x15	; 21
    1ae4:	18 1b       	sub	r17, r24
    1ae6:	0f 90       	pop	r0
    1ae8:	0f 90       	pop	r0
    1aea:	0f 90       	pop	r0
    1aec:	0f 90       	pop	r0
    1aee:	0f 90       	pop	r0
    1af0:	0f 90       	pop	r0
    1af2:	15 31       	cpi	r17, 0x15	; 21
    1af4:	08 f0       	brcs	.+2      	; 0x1af8 <_ZN3uhr4drawEv+0x78>
    1af6:	5f c0       	rjmp	.+190    	; 0x1bb6 <_ZN3uhr4drawEv+0x136>
    1af8:	01 2f       	mov	r16, r17
    1afa:	00 0f       	add	r16, r16
    1afc:	01 0f       	add	r16, r17
    1afe:	00 0f       	add	r16, r16
					oled->draw_ASCI(buffer[i-((SSD1306_WIDTH/charsize)-buffersize)],i*charsize,0);
    1b00:	8e 89       	ldd	r24, Y+22	; 0x16
    1b02:	fe 01       	movw	r30, r28
    1b04:	e1 0f       	add	r30, r17
    1b06:	f1 1d       	adc	r31, r1
    1b08:	e8 0f       	add	r30, r24
    1b0a:	f1 1d       	adc	r31, r1
    1b0c:	73 97       	sbiw	r30, 0x13	; 19
    1b0e:	20 e0       	ldi	r18, 0x00	; 0
    1b10:	40 2f       	mov	r20, r16
    1b12:	60 81       	ld	r22, Z
    1b14:	8f 89       	ldd	r24, Y+23	; 0x17
    1b16:	98 8d       	ldd	r25, Y+24	; 0x18
    1b18:	0e 94 d6 03 	call	0x7ac	; 0x7ac <_ZN7Display9draw_ASCIEhhh>
				}
				break;
			case 1:	//standard Header fuer fast alle Pages
				for(uint8_t i=0;i<(bitsderrtc-3);i++){oled->draw_ASCI(rtc->msg_uhr[i],65+i*charsize,0*charhighte);}
				buffersize=sprintf(buffer,"%i%%",Batteriestatus());
				for(uint8_t i=((SSD1306_WIDTH/charsize)-buffersize);i<(SSD1306_WIDTH/charsize);i++){
    1b1c:	1f 5f       	subi	r17, 0xFF	; 255
    1b1e:	0a 5f       	subi	r16, 0xFA	; 250
    1b20:	15 31       	cpi	r17, 0x15	; 21
    1b22:	71 f7       	brne	.-36     	; 0x1b00 <_ZN3uhr4drawEv+0x80>
    1b24:	48 c0       	rjmp	.+144    	; 0x1bb6 <_ZN3uhr4drawEv+0x136>
				for(uint8_t i=0;i<8;i++){
					oled->draw_ASCI(rtc->msg_dat[i],5+i*charsize,7*charhighte);
				}
				break;
			case 2:
				for(uint8_t i=0;i<bitsderrtc;i++){oled->draw_ASCI(rtc->msg_dat[i],65+i*charsize,7*charhighte);}
    1b26:	e9 8d       	ldd	r30, Y+25	; 0x19
    1b28:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1b2a:	ee 0d       	add	r30, r14
    1b2c:	ff 1d       	adc	r31, r15
    1b2e:	28 e3       	ldi	r18, 0x38	; 56
    1b30:	41 2f       	mov	r20, r17
    1b32:	60 85       	ldd	r22, Z+8	; 0x08
    1b34:	8f 89       	ldd	r24, Y+23	; 0x17
    1b36:	98 8d       	ldd	r25, Y+24	; 0x18
    1b38:	0e 94 d6 03 	call	0x7ac	; 0x7ac <_ZN7Display9draw_ASCIEhhh>
    1b3c:	8f ef       	ldi	r24, 0xFF	; 255
    1b3e:	e8 1a       	sub	r14, r24
    1b40:	f8 0a       	sbc	r15, r24
    1b42:	1a 5f       	subi	r17, 0xFA	; 250
    1b44:	11 37       	cpi	r17, 0x71	; 113
    1b46:	79 f7       	brne	.-34     	; 0x1b26 <_ZN3uhr4drawEv+0xa6>
	{
		monitor::draw();
		header(1);
		bottom(2);

		oled->analog(rtc->Stunden,rtc->Minuten,rtc->Sekunden,Zeiger);
    1b48:	e9 8d       	ldd	r30, Y+25	; 0x19
    1b4a:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1b4c:	0d a1       	ldd	r16, Y+37	; 0x25
    1b4e:	22 89       	ldd	r18, Z+18	; 0x12
    1b50:	41 89       	ldd	r20, Z+17	; 0x11
    1b52:	60 89       	ldd	r22, Z+16	; 0x10
    1b54:	8f 89       	ldd	r24, Y+23	; 0x17
    1b56:	98 8d       	ldd	r25, Y+24	; 0x18
    1b58:	0e 94 9a 04 	call	0x934	; 0x934 <_ZN7Display6analogEhhhh>
		//draw large number
		oled->draw_number16x16(rtc->msg_uhr[0]-'0',70,1.66*charhighte);
    1b5c:	e9 8d       	ldd	r30, Y+25	; 0x19
    1b5e:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1b60:	60 81       	ld	r22, Z
    1b62:	60 53       	subi	r22, 0x30	; 48
    1b64:	2d e0       	ldi	r18, 0x0D	; 13
    1b66:	46 e4       	ldi	r20, 0x46	; 70
    1b68:	8f 89       	ldd	r24, Y+23	; 0x17
    1b6a:	98 8d       	ldd	r25, Y+24	; 0x18
    1b6c:	0e 94 20 04 	call	0x840	; 0x840 <_ZN7Display16draw_number16x16Ehhh>
		oled->draw_number16x16(rtc->msg_uhr[1]-'0',70+numbersmalsize,1.66*charhighte);
    1b70:	e9 8d       	ldd	r30, Y+25	; 0x19
    1b72:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1b74:	61 81       	ldd	r22, Z+1	; 0x01
    1b76:	60 53       	subi	r22, 0x30	; 48
    1b78:	2d e0       	ldi	r18, 0x0D	; 13
    1b7a:	46 e5       	ldi	r20, 0x56	; 86
    1b7c:	8f 89       	ldd	r24, Y+23	; 0x17
    1b7e:	98 8d       	ldd	r25, Y+24	; 0x18
    1b80:	0e 94 20 04 	call	0x840	; 0x840 <_ZN7Display16draw_number16x16Ehhh>
		oled->draw_number16x16(rtc->msg_uhr[3]-'0',70,2.33*charhighte+numbersmalhight);
    1b84:	e9 8d       	ldd	r30, Y+25	; 0x19
    1b86:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1b88:	63 81       	ldd	r22, Z+3	; 0x03
    1b8a:	60 53       	subi	r22, 0x30	; 48
    1b8c:	22 e2       	ldi	r18, 0x22	; 34
    1b8e:	46 e4       	ldi	r20, 0x46	; 70
    1b90:	8f 89       	ldd	r24, Y+23	; 0x17
    1b92:	98 8d       	ldd	r25, Y+24	; 0x18
    1b94:	0e 94 20 04 	call	0x840	; 0x840 <_ZN7Display16draw_number16x16Ehhh>
		oled->draw_number16x16(rtc->msg_uhr[4]-'0',70+numbersmalsize,2.33*charhighte+numbersmalhight);
    1b98:	e9 8d       	ldd	r30, Y+25	; 0x19
    1b9a:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1b9c:	64 81       	ldd	r22, Z+4	; 0x04
    1b9e:	60 53       	subi	r22, 0x30	; 48
    1ba0:	22 e2       	ldi	r18, 0x22	; 34
    1ba2:	46 e5       	ldi	r20, 0x56	; 86
    1ba4:	8f 89       	ldd	r24, Y+23	; 0x17
    1ba6:	98 8d       	ldd	r25, Y+24	; 0x18
    1ba8:	0e 94 20 04 	call	0x840	; 0x840 <_ZN7Display16draw_number16x16Ehhh>
		oled->clearFrame();
	}

	//send the frame to the display
	void send(){
		oled->sendFrame();	
    1bac:	8f 89       	ldd	r24, Y+23	; 0x17
    1bae:	98 8d       	ldd	r25, Y+24	; 0x18
    1bb0:	0e 94 38 03 	call	0x670	; 0x670 <_ZN7Display9sendFrameEv>
    1bb4:	04 c0       	rjmp	.+8      	; 0x1bbe <_ZN3uhr4drawEv+0x13e>
		return 0;
	}
	
	//drawfunktion
	virtual void draw(){
		oled->clearFrame();
    1bb6:	11 e4       	ldi	r17, 0x41	; 65
    1bb8:	e1 2c       	mov	r14, r1
    1bba:	f1 2c       	mov	r15, r1
    1bbc:	b4 cf       	rjmp	.-152    	; 0x1b26 <_ZN3uhr4drawEv+0xa6>
		oled->draw_number16x16(rtc->msg_uhr[1]-'0',70+numbersmalsize,1.66*charhighte);
		oled->draw_number16x16(rtc->msg_uhr[3]-'0',70,2.33*charhighte+numbersmalhight);
		oled->draw_number16x16(rtc->msg_uhr[4]-'0',70+numbersmalsize,2.33*charhighte+numbersmalhight);

		send();
	}
    1bbe:	df 91       	pop	r29
    1bc0:	cf 91       	pop	r28
    1bc2:	1f 91       	pop	r17
    1bc4:	0f 91       	pop	r16
    1bc6:	ff 90       	pop	r15
    1bc8:	ef 90       	pop	r14
    1bca:	08 95       	ret

00001bcc <_Z12EEPROM_Writejh>:

#ifndef EEPROM_H_
#define EEPROM_H_

void EEPROM_Write(uint16_t adresse, uint8_t data){
	cli();	//zur sicherheit interrupts ausschalten
    1bcc:	f8 94       	cli
	while(EECR&(1<<EEPE));
    1bce:	f9 99       	sbic	0x1f, 1	; 31
    1bd0:	fe cf       	rjmp	.-4      	; 0x1bce <_Z12EEPROM_Writejh+0x2>
	
	//schreibe adresse und data
	EEAR = adresse;
    1bd2:	92 bd       	out	0x22, r25	; 34
    1bd4:	81 bd       	out	0x21, r24	; 33
	EEDR = data;
    1bd6:	60 bd       	out	0x20, r22	; 32
	//fuehre schreiben aus
	EECR |= (1<<EEMPE);
    1bd8:	fa 9a       	sbi	0x1f, 2	; 31
	EECR |= (1<<EEPE);
    1bda:	f9 9a       	sbi	0x1f, 1	; 31
	
	sei();
    1bdc:	78 94       	sei
    1bde:	08 95       	ret

00001be0 <_Z11EEPROM_Readj>:
}

uint8_t EEPROM_Read(uint16_t adresse){
	cli();	//zur sicherheit interrupts ausschalten
    1be0:	f8 94       	cli
	while(EECR&(1<<EEPE));
    1be2:	f9 99       	sbic	0x1f, 1	; 31
    1be4:	fe cf       	rjmp	.-4      	; 0x1be2 <_Z11EEPROM_Readj+0x2>
	
	//schreibe adresse
	EEAR = adresse;
    1be6:	92 bd       	out	0x22, r25	; 34
    1be8:	81 bd       	out	0x21, r24	; 33
	//fuehre lesen aus
	EECR |= (1<<EERE);
    1bea:	f8 9a       	sbi	0x1f, 0	; 31
	
	sei();
    1bec:	78 94       	sei
	return EEDR;
    1bee:	80 b5       	in	r24, 0x20	; 32
}
    1bf0:	08 95       	ret

00001bf2 <__vector_11>:
uint8_t FPS;

//schlechte variante der Uhreinstellung
void uhreinstellen();

ISR(TIMER2_OVF_vect){	//Vektor fuer die RTC
    1bf2:	1f 92       	push	r1
    1bf4:	0f 92       	push	r0
    1bf6:	0f b6       	in	r0, 0x3f	; 63
    1bf8:	0f 92       	push	r0
    1bfa:	11 24       	eor	r1, r1
    1bfc:	0b b6       	in	r0, 0x3b	; 59
    1bfe:	0f 92       	push	r0
    1c00:	8f 93       	push	r24
    1c02:	ef 93       	push	r30
    1c04:	ff 93       	push	r31
	//TCNT2=TIMER2RTCTIME;
	rtc.Sekunden++;
    1c06:	e7 eb       	ldi	r30, 0xB7	; 183
    1c08:	f7 e0       	ldi	r31, 0x07	; 7
    1c0a:	82 89       	ldd	r24, Z+18	; 0x12
    1c0c:	8f 5f       	subi	r24, 0xFF	; 255
    1c0e:	82 8b       	std	Z+18, r24	; 0x12
	rtc.interupts|= (1<<sekundeninterupt);
    1c10:	80 8d       	ldd	r24, Z+24	; 0x18
    1c12:	82 60       	ori	r24, 0x02	; 2
    1c14:	80 8f       	std	Z+24, r24	; 0x18
}
    1c16:	ff 91       	pop	r31
    1c18:	ef 91       	pop	r30
    1c1a:	8f 91       	pop	r24
    1c1c:	0f 90       	pop	r0
    1c1e:	0b be       	out	0x3b, r0	; 59
    1c20:	0f 90       	pop	r0
    1c22:	0f be       	out	0x3f, r0	; 63
    1c24:	0f 90       	pop	r0
    1c26:	1f 90       	pop	r1
    1c28:	18 95       	reti

00001c2a <__vector_13>:

ISR(TIMER1_COMPA_vect){
    1c2a:	1f 92       	push	r1
    1c2c:	0f 92       	push	r0
    1c2e:	0f b6       	in	r0, 0x3f	; 63
    1c30:	0f 92       	push	r0
    1c32:	11 24       	eor	r1, r1
    1c34:	8f 93       	push	r24
	statusreg |= (1<<updaterate);
    1c36:	80 91 98 02 	lds	r24, 0x0298
    1c3a:	81 60       	ori	r24, 0x01	; 1
    1c3c:	80 93 98 02 	sts	0x0298, r24
}
    1c40:	8f 91       	pop	r24
    1c42:	0f 90       	pop	r0
    1c44:	0f be       	out	0x3f, r0	; 63
    1c46:	0f 90       	pop	r0
    1c48:	1f 90       	pop	r1
    1c4a:	18 95       	reti

00001c4c <_Z6nullenv>:
double geschw;
double strecke;
double maxgeschw;
uint32_t Fahrtzeit;
void nullen(){
	geschw = 0;
    1c4c:	10 92 92 02 	sts	0x0292, r1
    1c50:	10 92 93 02 	sts	0x0293, r1
    1c54:	10 92 94 02 	sts	0x0294, r1
    1c58:	10 92 95 02 	sts	0x0295, r1
	strecke = 0;
    1c5c:	10 92 8e 02 	sts	0x028E, r1
    1c60:	10 92 8f 02 	sts	0x028F, r1
    1c64:	10 92 90 02 	sts	0x0290, r1
    1c68:	10 92 91 02 	sts	0x0291, r1
	maxgeschw = 0;
    1c6c:	10 92 8a 02 	sts	0x028A, r1
    1c70:	10 92 8b 02 	sts	0x028B, r1
    1c74:	10 92 8c 02 	sts	0x028C, r1
    1c78:	10 92 8d 02 	sts	0x028D, r1
	Fahrtzeit = 0;
    1c7c:	10 92 86 02 	sts	0x0286, r1
    1c80:	10 92 87 02 	sts	0x0287, r1
    1c84:	10 92 88 02 	sts	0x0288, r1
    1c88:	10 92 89 02 	sts	0x0289, r1
    1c8c:	08 95       	ret

00001c8e <_ZN5tacho11tastendruckEPh>:
		nullen();
	}

	//Tasterhandler
	uint8_t tastendruck(uint8_t *tast){
		if (*tast=='e')
    1c8e:	fb 01       	movw	r30, r22
    1c90:	80 81       	ld	r24, Z
    1c92:	85 36       	cpi	r24, 0x65	; 101
    1c94:	09 f4       	brne	.+2      	; 0x1c98 <_ZN5tacho11tastendruckEPh+0xa>
		{
			nullen();
    1c96:	da df       	rcall	.-76     	; 0x1c4c <_Z6nullenv>
		}
		return 0;
	}
    1c98:	80 e0       	ldi	r24, 0x00	; 0
    1c9a:	08 95       	ret

00001c9c <_Z13reed_debouncePVhh>:
}
uint8_t reed_debounce(volatile uint8_t *port, uint8_t pin)
{
	if ( (*port & (1 << pin)) )
    1c9c:	fc 01       	movw	r30, r24
    1c9e:	20 81       	ld	r18, Z
    1ca0:	30 e0       	ldi	r19, 0x00	; 0
    1ca2:	06 2e       	mov	r0, r22
    1ca4:	02 c0       	rjmp	.+4      	; 0x1caa <_Z13reed_debouncePVhh+0xe>
    1ca6:	35 95       	asr	r19
    1ca8:	27 95       	ror	r18
    1caa:	0a 94       	dec	r0
    1cac:	e2 f7       	brpl	.-8      	; 0x1ca6 <_Z13reed_debouncePVhh+0xa>
    1cae:	20 ff       	sbrs	r18, 0
    1cb0:	16 c0       	rjmp	.+44     	; 0x1cde <_Z13reed_debouncePVhh+0x42>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1cb2:	ef e0       	ldi	r30, 0x0F	; 15
    1cb4:	f7 e2       	ldi	r31, 0x27	; 39
    1cb6:	31 97       	sbiw	r30, 0x01	; 1
    1cb8:	f1 f7       	brne	.-4      	; 0x1cb6 <_Z13reed_debouncePVhh+0x1a>
    1cba:	00 c0       	rjmp	.+0      	; 0x1cbc <_Z13reed_debouncePVhh+0x20>
    1cbc:	00 00       	nop
	{
		/* Pin wurde auf Masse gezogen, ms warten   */
		_delay_ms(REEDMS);
		if ( !(*port & (1 << pin)) )
    1cbe:	fc 01       	movw	r30, r24
    1cc0:	80 81       	ld	r24, Z
    1cc2:	90 e0       	ldi	r25, 0x00	; 0
    1cc4:	02 c0       	rjmp	.+4      	; 0x1cca <_Z13reed_debouncePVhh+0x2e>
    1cc6:	95 95       	asr	r25
    1cc8:	87 95       	ror	r24
    1cca:	6a 95       	dec	r22
    1ccc:	e2 f7       	brpl	.-8      	; 0x1cc6 <_Z13reed_debouncePVhh+0x2a>
    1cce:	80 fd       	sbrc	r24, 0
    1cd0:	08 c0       	rjmp	.+16     	; 0x1ce2 <_Z13reed_debouncePVhh+0x46>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1cd2:	f2 e0       	ldi	r31, 0x02	; 2
    1cd4:	fa 95       	dec	r31
    1cd6:	f1 f7       	brne	.-4      	; 0x1cd4 <_Z13reed_debouncePVhh+0x38>
    1cd8:	00 c0       	rjmp	.+0      	; 0x1cda <_Z13reed_debouncePVhh+0x3e>
		{
			/* Anwender Zeit zum Loslassen des Tasters geben */
			_delay_us(1);
			return 1;
    1cda:	81 e0       	ldi	r24, 0x01	; 1
    1cdc:	08 95       	ret
		}
	}
	return 0;
    1cde:	80 e0       	ldi	r24, 0x00	; 0
    1ce0:	08 95       	ret
    1ce2:	80 e0       	ldi	r24, 0x00	; 0
}
    1ce4:	08 95       	ret

00001ce6 <_Z15geschwindigkeitf>:
//Berechnung der Geschwindigkeit
void geschwindigkeit(float durch){
    1ce6:	cf 92       	push	r12
    1ce8:	df 92       	push	r13
    1cea:	ef 92       	push	r14
    1cec:	ff 92       	push	r15
    1cee:	cf 93       	push	r28
    1cf0:	df 93       	push	r29
	//Einholen der Daten und ruecksetzen
	uint16_t zaehlungen = TCNT1;
    1cf2:	e4 e8       	ldi	r30, 0x84	; 132
    1cf4:	f0 e0       	ldi	r31, 0x00	; 0
    1cf6:	c0 81       	ld	r28, Z
    1cf8:	d1 81       	ldd	r29, Z+1	; 0x01
	TCNT1 = 0;
    1cfa:	11 82       	std	Z+1, r1	; 0x01
    1cfc:	10 82       	st	Z, r1
	//Berechnung
	double temp = geschw;
	double umlaufzeit = (REEDMS/1000.0+(zaehlungen/zaehlungenprozeiteinheit)*zeitproachtzaehlungen);
	geschw = (durch)*M_PI*3.6;
    1cfe:	2b ed       	ldi	r18, 0xDB	; 219
    1d00:	3f e0       	ldi	r19, 0x0F	; 15
    1d02:	49 e4       	ldi	r20, 0x49	; 73
    1d04:	50 e4       	ldi	r21, 0x40	; 64
    1d06:	0e 94 13 1c 	call	0x3826	; 0x3826 <__mulsf3>
    1d0a:	26 e6       	ldi	r18, 0x66	; 102
    1d0c:	36 e6       	ldi	r19, 0x66	; 102
    1d0e:	46 e6       	ldi	r20, 0x66	; 102
    1d10:	50 e4       	ldi	r21, 0x40	; 64
    1d12:	0e 94 13 1c 	call	0x3826	; 0x3826 <__mulsf3>
    1d16:	6b 01       	movw	r12, r22
    1d18:	7c 01       	movw	r14, r24
	//Einholen der Daten und ruecksetzen
	uint16_t zaehlungen = TCNT1;
	TCNT1 = 0;
	//Berechnung
	double temp = geschw;
	double umlaufzeit = (REEDMS/1000.0+(zaehlungen/zaehlungenprozeiteinheit)*zeitproachtzaehlungen);
    1d1a:	be 01       	movw	r22, r28
    1d1c:	80 e0       	ldi	r24, 0x00	; 0
    1d1e:	90 e0       	ldi	r25, 0x00	; 0
    1d20:	0e 94 ff 1a 	call	0x35fe	; 0x35fe <__floatunsisf>
    1d24:	20 e0       	ldi	r18, 0x00	; 0
    1d26:	30 e0       	ldi	r19, 0x00	; 0
    1d28:	40 e0       	ldi	r20, 0x00	; 0
    1d2a:	5e e3       	ldi	r21, 0x3E	; 62
    1d2c:	0e 94 13 1c 	call	0x3826	; 0x3826 <__mulsf3>
    1d30:	2d eb       	ldi	r18, 0xBD	; 189
    1d32:	37 e3       	ldi	r19, 0x37	; 55
    1d34:	46 e8       	ldi	r20, 0x86	; 134
    1d36:	5a e3       	ldi	r21, 0x3A	; 58
    1d38:	0e 94 13 1c 	call	0x3826	; 0x3826 <__mulsf3>
    1d3c:	2a e0       	ldi	r18, 0x0A	; 10
    1d3e:	37 ed       	ldi	r19, 0xD7	; 215
    1d40:	43 ea       	ldi	r20, 0xA3	; 163
    1d42:	5b e3       	ldi	r21, 0x3B	; 59
    1d44:	0e 94 ff 19 	call	0x33fe	; 0x33fe <__addsf3>
    1d48:	9b 01       	movw	r18, r22
    1d4a:	ac 01       	movw	r20, r24
	geschw = (durch)*M_PI*3.6;
	geschw /= umlaufzeit;
    1d4c:	c7 01       	movw	r24, r14
    1d4e:	b6 01       	movw	r22, r12
    1d50:	0e 94 66 1a 	call	0x34cc	; 0x34cc <__divsf3>
	//Mittelwert aus der letzten Messung zum Fehler minimieren
	geschw += temp;
    1d54:	20 91 92 02 	lds	r18, 0x0292
    1d58:	30 91 93 02 	lds	r19, 0x0293
    1d5c:	40 91 94 02 	lds	r20, 0x0294
    1d60:	50 91 95 02 	lds	r21, 0x0295
    1d64:	0e 94 ff 19 	call	0x33fe	; 0x33fe <__addsf3>
	geschw /= 2.0;
    1d68:	20 e0       	ldi	r18, 0x00	; 0
    1d6a:	30 e0       	ldi	r19, 0x00	; 0
    1d6c:	40 e0       	ldi	r20, 0x00	; 0
    1d6e:	5f e3       	ldi	r21, 0x3F	; 63
    1d70:	0e 94 13 1c 	call	0x3826	; 0x3826 <__mulsf3>
    1d74:	6b 01       	movw	r12, r22
    1d76:	7c 01       	movw	r14, r24
	if (geschw >=160)
    1d78:	20 e0       	ldi	r18, 0x00	; 0
    1d7a:	30 e0       	ldi	r19, 0x00	; 0
    1d7c:	40 e2       	ldi	r20, 0x20	; 32
    1d7e:	53 e4       	ldi	r21, 0x43	; 67
    1d80:	0e 94 0f 1c 	call	0x381e	; 0x381e <__gesf2>
    1d84:	88 23       	and	r24, r24
    1d86:	4c f4       	brge	.+18     	; 0x1d9a <_Z15geschwindigkeitf+0xb4>
	double umlaufzeit = (REEDMS/1000.0+(zaehlungen/zaehlungenprozeiteinheit)*zeitproachtzaehlungen);
	geschw = (durch)*M_PI*3.6;
	geschw /= umlaufzeit;
	//Mittelwert aus der letzten Messung zum Fehler minimieren
	geschw += temp;
	geschw /= 2.0;
    1d88:	c0 92 92 02 	sts	0x0292, r12
    1d8c:	d0 92 93 02 	sts	0x0293, r13
    1d90:	e0 92 94 02 	sts	0x0294, r14
    1d94:	f0 92 95 02 	sts	0x0295, r15
    1d98:	08 c0       	rjmp	.+16     	; 0x1daa <_Z15geschwindigkeitf+0xc4>
	if (geschw >=160)
	{
		geschw=0;
    1d9a:	10 92 92 02 	sts	0x0292, r1
    1d9e:	10 92 93 02 	sts	0x0293, r1
    1da2:	10 92 94 02 	sts	0x0294, r1
    1da6:	10 92 95 02 	sts	0x0295, r1
	}
}
    1daa:	df 91       	pop	r29
    1dac:	cf 91       	pop	r28
    1dae:	ff 90       	pop	r15
    1db0:	ef 90       	pop	r14
    1db2:	df 90       	pop	r13
    1db4:	cf 90       	pop	r12
    1db6:	08 95       	ret

00001db8 <_Z15initialisierungv>:
    {
		maininterupthandler(Folien[position],Tastatur.unified());
    }
}

void initialisierung(){
    1db8:	ff 92       	push	r15
    1dba:	0f 93       	push	r16
    1dbc:	1f 93       	push	r17
    1dbe:	cf 93       	push	r28
    1dc0:	df 93       	push	r29
    1dc2:	cd b7       	in	r28, 0x3d	; 61
    1dc4:	de b7       	in	r29, 0x3e	; 62
    1dc6:	a5 97       	sbiw	r28, 0x25	; 37
    1dc8:	0f b6       	in	r0, 0x3f	; 63
    1dca:	f8 94       	cli
    1dcc:	de bf       	out	0x3e, r29	; 62
    1dce:	0f be       	out	0x3f, r0	; 63
    1dd0:	cd bf       	out	0x3d, r28	; 61
	//nullen der Flagregister
	anzeige=0;
    1dd2:	10 92 99 02 	sts	0x0299, r1
	statusreg=0;
    1dd6:	10 92 98 02 	sts	0x0298, r1
	position=0;
    1dda:	10 92 97 02 	sts	0x0297, r1
	FPS=0;
    1dde:	10 92 96 02 	sts	0x0296, r1
	
	//initialisieren des Zaehler fuer die Winkelgeschw sowie den Timer
	TCNT1 = 0;
    1de2:	10 92 85 00 	sts	0x0085, r1
    1de6:	10 92 84 00 	sts	0x0084, r1
	TIMSK1 = 0;
    1dea:	10 92 6f 00 	sts	0x006F, r1
	TCCR1B = ((1<<CS12) | (1<<CS10));
    1dee:	85 e0       	ldi	r24, 0x05	; 5
    1df0:	80 93 81 00 	sts	0x0081, r24
	
	//Eingang fuer den Reedkontak schalten mit internem Pullup
	DDRA |= ((1<<PORTA6));
    1df4:	0e 9a       	sbi	0x01, 6	; 1
	PORTA |= (1<<PORTA6);
    1df6:	16 9a       	sbi	0x02, 6	; 2
	
	//ADC Initialisieren auf CH0
	ADMUX = (1<<REFS0);
    1df8:	80 e4       	ldi	r24, 0x40	; 64
    1dfa:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA = (1<<ADPS1) | (1<<ADPS0);
    1dfe:	ea e7       	ldi	r30, 0x7A	; 122
    1e00:	f0 e0       	ldi	r31, 0x00	; 0
    1e02:	83 e0       	ldi	r24, 0x03	; 3
    1e04:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADEN);
    1e06:	80 81       	ld	r24, Z
    1e08:	80 68       	ori	r24, 0x80	; 128
    1e0a:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);
    1e0c:	80 81       	ld	r24, Z
    1e0e:	80 64       	ori	r24, 0x40	; 64
    1e10:	80 83       	st	Z, r24
	while (ADCSRA & (1<<ADSC) ) {}
    1e12:	80 81       	ld	r24, Z
    1e14:	18 2f       	mov	r17, r24
    1e16:	10 74       	andi	r17, 0x40	; 64
    1e18:	86 fd       	sbrc	r24, 6
    1e1a:	fb cf       	rjmp	.-10     	; 0x1e12 <_Z15initialisierungv+0x5a>
	(void) ADCW;
    1e1c:	80 91 78 00 	lds	r24, 0x0078
    1e20:	90 91 79 00 	lds	r25, 0x0079
		#define namesize 10
		char name[10];
	public:
	monitor(Display *ol, RTC *rt)
	{
		buffersize = 0;
    1e24:	1f 8a       	std	Y+23, r1	; 0x17
		oled = ol;
    1e26:	86 eb       	ldi	r24, 0xB6	; 182
    1e28:	93 e0       	ldi	r25, 0x03	; 3
    1e2a:	99 8f       	std	Y+25, r25	; 0x19
    1e2c:	88 8f       	std	Y+24, r24	; 0x18
		rtc = rt;
    1e2e:	87 eb       	ldi	r24, 0xB7	; 183
    1e30:	97 e0       	ldi	r25, 0x07	; 7
    1e32:	9b 8f       	std	Y+27, r25	; 0x1b
    1e34:	8a 8f       	std	Y+26, r24	; 0x1a
class wilkommen: public monitor
{
	private:
	
	public:
	wilkommen(Display *ol, RTC *rt):monitor(ol,rt)
    1e36:	81 e7       	ldi	r24, 0x71	; 113
    1e38:	92 e0       	ldi	r25, 0x02	; 2
    1e3a:	9a 83       	std	Y+2, r25	; 0x02
    1e3c:	89 83       	std	Y+1, r24	; 0x01
	{

	}
	
	void draw(){
		oled->clearFrame();
    1e3e:	86 eb       	ldi	r24, 0xB6	; 182
    1e40:	93 e0       	ldi	r25, 0x03	; 3
    1e42:	0e 94 be 02 	call	0x57c	; 0x57c <_ZN7Display10clearFrameEv>
		
		buffersize=sprintf(buffer,"Fahradcomputer");
    1e46:	8f e0       	ldi	r24, 0x0F	; 15
    1e48:	e6 e0       	ldi	r30, 0x06	; 6
    1e4a:	f1 e0       	ldi	r31, 0x01	; 1
    1e4c:	de 01       	movw	r26, r28
    1e4e:	13 96       	adiw	r26, 0x03	; 3
    1e50:	01 90       	ld	r0, Z+
    1e52:	0d 92       	st	X+, r0
    1e54:	8a 95       	dec	r24
    1e56:	e1 f7       	brne	.-8      	; 0x1e50 <_Z15initialisierungv+0x98>
    1e58:	8e e0       	ldi	r24, 0x0E	; 14
    1e5a:	8f 8b       	std	Y+23, r24	; 0x17
    1e5c:	f1 2e       	mov	r15, r17
    1e5e:	00 e0       	ldi	r16, 0x00	; 0
		for(uint8_t i=0; i < buffersize;i++){
			oled->draw_ASCI(buffer[i],i*charsize,0);
    1e60:	e3 e0       	ldi	r30, 0x03	; 3
    1e62:	f0 e0       	ldi	r31, 0x00	; 0
    1e64:	ec 0f       	add	r30, r28
    1e66:	fd 1f       	adc	r31, r29
    1e68:	e0 0f       	add	r30, r16
    1e6a:	f1 1d       	adc	r31, r1
    1e6c:	20 e0       	ldi	r18, 0x00	; 0
    1e6e:	4f 2d       	mov	r20, r15
    1e70:	60 81       	ld	r22, Z
    1e72:	88 8d       	ldd	r24, Y+24	; 0x18
    1e74:	99 8d       	ldd	r25, Y+25	; 0x19
    1e76:	0e 94 d6 03 	call	0x7ac	; 0x7ac <_ZN7Display9draw_ASCIEhhh>
	
	void draw(){
		oled->clearFrame();
		
		buffersize=sprintf(buffer,"Fahradcomputer");
		for(uint8_t i=0; i < buffersize;i++){
    1e7a:	0f 5f       	subi	r16, 0xFF	; 255
    1e7c:	26 e0       	ldi	r18, 0x06	; 6
    1e7e:	f2 0e       	add	r15, r18
    1e80:	8f 89       	ldd	r24, Y+23	; 0x17
    1e82:	08 17       	cp	r16, r24
    1e84:	68 f3       	brcs	.-38     	; 0x1e60 <_Z15initialisierungv+0xa8>
			oled->draw_ASCI(buffer[i],i*charsize,0);
		}
		buffersize=sprintf(buffer,"--------------");
    1e86:	8f e0       	ldi	r24, 0x0F	; 15
    1e88:	e5 e1       	ldi	r30, 0x15	; 21
    1e8a:	f1 e0       	ldi	r31, 0x01	; 1
    1e8c:	de 01       	movw	r26, r28
    1e8e:	13 96       	adiw	r26, 0x03	; 3
    1e90:	01 90       	ld	r0, Z+
    1e92:	0d 92       	st	X+, r0
    1e94:	8a 95       	dec	r24
    1e96:	e1 f7       	brne	.-8      	; 0x1e90 <_Z15initialisierungv+0xd8>
    1e98:	8e e0       	ldi	r24, 0x0E	; 14
    1e9a:	8f 8b       	std	Y+23, r24	; 0x17
    1e9c:	f1 2e       	mov	r15, r17
    1e9e:	00 e0       	ldi	r16, 0x00	; 0
		for(uint8_t i=0; i < buffersize;i++){
			oled->draw_ASCI(buffer[i],i*charsize,8);
    1ea0:	e3 e0       	ldi	r30, 0x03	; 3
    1ea2:	f0 e0       	ldi	r31, 0x00	; 0
    1ea4:	ec 0f       	add	r30, r28
    1ea6:	fd 1f       	adc	r31, r29
    1ea8:	e0 0f       	add	r30, r16
    1eaa:	f1 1d       	adc	r31, r1
    1eac:	28 e0       	ldi	r18, 0x08	; 8
    1eae:	4f 2d       	mov	r20, r15
    1eb0:	60 81       	ld	r22, Z
    1eb2:	88 8d       	ldd	r24, Y+24	; 0x18
    1eb4:	99 8d       	ldd	r25, Y+25	; 0x19
    1eb6:	0e 94 d6 03 	call	0x7ac	; 0x7ac <_ZN7Display9draw_ASCIEhhh>
		buffersize=sprintf(buffer,"Fahradcomputer");
		for(uint8_t i=0; i < buffersize;i++){
			oled->draw_ASCI(buffer[i],i*charsize,0);
		}
		buffersize=sprintf(buffer,"--------------");
		for(uint8_t i=0; i < buffersize;i++){
    1eba:	0f 5f       	subi	r16, 0xFF	; 255
    1ebc:	36 e0       	ldi	r19, 0x06	; 6
    1ebe:	f3 0e       	add	r15, r19
    1ec0:	8f 89       	ldd	r24, Y+23	; 0x17
    1ec2:	08 17       	cp	r16, r24
    1ec4:	68 f3       	brcs	.-38     	; 0x1ea0 <_Z15initialisierungv+0xe8>
			oled->draw_ASCI(buffer[i],i*charsize,8);
		}
		buffersize=sprintf(buffer,"Version: %.2f",(double)VERSIONSNUMMER);
    1ec6:	80 e4       	ldi	r24, 0x40	; 64
    1ec8:	8f 93       	push	r24
    1eca:	8f 93       	push	r24
    1ecc:	83 ea       	ldi	r24, 0xA3	; 163
    1ece:	8f 93       	push	r24
    1ed0:	87 ed       	ldi	r24, 0xD7	; 215
    1ed2:	8f 93       	push	r24
    1ed4:	84 e2       	ldi	r24, 0x24	; 36
    1ed6:	91 e0       	ldi	r25, 0x01	; 1
    1ed8:	9f 93       	push	r25
    1eda:	8f 93       	push	r24
    1edc:	ce 01       	movw	r24, r28
    1ede:	03 96       	adiw	r24, 0x03	; 3
    1ee0:	9f 93       	push	r25
    1ee2:	8f 93       	push	r24
    1ee4:	0e 94 a1 22 	call	0x4542	; 0x4542 <sprintf>
    1ee8:	8f 8b       	std	Y+23, r24	; 0x17
		for(uint8_t i=0; i < buffersize;i++){
    1eea:	0f b6       	in	r0, 0x3f	; 63
    1eec:	f8 94       	cli
    1eee:	de bf       	out	0x3e, r29	; 62
    1ef0:	0f be       	out	0x3f, r0	; 63
    1ef2:	cd bf       	out	0x3d, r28	; 61
    1ef4:	88 23       	and	r24, r24
    1ef6:	99 f0       	breq	.+38     	; 0x1f1e <_Z15initialisierungv+0x166>
    1ef8:	00 e0       	ldi	r16, 0x00	; 0
			oled->draw_ASCI(buffer[i],i*charsize,32);
    1efa:	e3 e0       	ldi	r30, 0x03	; 3
    1efc:	f0 e0       	ldi	r31, 0x00	; 0
    1efe:	ec 0f       	add	r30, r28
    1f00:	fd 1f       	adc	r31, r29
    1f02:	e0 0f       	add	r30, r16
    1f04:	f1 1d       	adc	r31, r1
    1f06:	20 e2       	ldi	r18, 0x20	; 32
    1f08:	41 2f       	mov	r20, r17
    1f0a:	60 81       	ld	r22, Z
    1f0c:	88 8d       	ldd	r24, Y+24	; 0x18
    1f0e:	99 8d       	ldd	r25, Y+25	; 0x19
    1f10:	0e 94 d6 03 	call	0x7ac	; 0x7ac <_ZN7Display9draw_ASCIEhhh>
		buffersize=sprintf(buffer,"--------------");
		for(uint8_t i=0; i < buffersize;i++){
			oled->draw_ASCI(buffer[i],i*charsize,8);
		}
		buffersize=sprintf(buffer,"Version: %.2f",(double)VERSIONSNUMMER);
		for(uint8_t i=0; i < buffersize;i++){
    1f14:	0f 5f       	subi	r16, 0xFF	; 255
    1f16:	1a 5f       	subi	r17, 0xFA	; 250
    1f18:	8f 89       	ldd	r24, Y+23	; 0x17
    1f1a:	08 17       	cp	r16, r24
    1f1c:	70 f3       	brcs	.-36     	; 0x1efa <_Z15initialisierungv+0x142>
		oled->clearFrame();
	}

	//send the frame to the display
	void send(){
		oled->sendFrame();	
    1f1e:	88 8d       	ldd	r24, Y+24	; 0x18
    1f20:	99 8d       	ldd	r25, Y+25	; 0x19
    1f22:	0e 94 38 03 	call	0x670	; 0x670 <_ZN7Display9sendFrameEv>
    1f26:	8a e0       	ldi	r24, 0x0A	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1f28:	ff e7       	ldi	r31, 0x7F	; 127
    1f2a:	28 e3       	ldi	r18, 0x38	; 56
    1f2c:	31 e0       	ldi	r19, 0x01	; 1
    1f2e:	f1 50       	subi	r31, 0x01	; 1
    1f30:	20 40       	sbci	r18, 0x00	; 0
    1f32:	30 40       	sbci	r19, 0x00	; 0
    1f34:	e1 f7       	brne	.-8      	; 0x1f2e <_Z15initialisierungv+0x176>
    1f36:	00 c0       	rjmp	.+0      	; 0x1f38 <_Z15initialisierungv+0x180>
    1f38:	00 00       	nop
    1f3a:	9f e7       	ldi	r25, 0x7F	; 127
    1f3c:	e8 e3       	ldi	r30, 0x38	; 56
    1f3e:	f1 e0       	ldi	r31, 0x01	; 1
    1f40:	91 50       	subi	r25, 0x01	; 1
    1f42:	e0 40       	sbci	r30, 0x00	; 0
    1f44:	f0 40       	sbci	r31, 0x00	; 0
    1f46:	e1 f7       	brne	.-8      	; 0x1f40 <_Z15initialisierungv+0x188>
    1f48:	00 c0       	rjmp	.+0      	; 0x1f4a <_Z15initialisierungv+0x192>
    1f4a:	00 00       	nop
    1f4c:	81 50       	subi	r24, 0x01	; 1
	
	//Wilkommensanzeige
	wilkommen wil(&oled,&rtc);
	wil.draw();
	for (uint8_t i=0; i<10;i++)
    1f4e:	61 f7       	brne	.-40     	; 0x1f28 <_Z15initialisierungv+0x170>
		_delay_ms(50);
		_delay_ms(50);
	}

	//letzten Zeitpunkt holen und RTC starten
	rtc.Sekunden= 0;
    1f50:	07 eb       	ldi	r16, 0xB7	; 183
    1f52:	17 e0       	ldi	r17, 0x07	; 7
    1f54:	f8 01       	movw	r30, r16
    1f56:	12 8a       	std	Z+18, r1	; 0x12
	rtc.Minuten	= EEPROM_Read(EEMINUTEN);
    1f58:	80 e0       	ldi	r24, 0x00	; 0
    1f5a:	90 e0       	ldi	r25, 0x00	; 0
    1f5c:	41 de       	rcall	.-894    	; 0x1be0 <_Z11EEPROM_Readj>
    1f5e:	f8 01       	movw	r30, r16
    1f60:	81 8b       	std	Z+17, r24	; 0x11
	rtc.Stunden	= EEPROM_Read(EESTUNDEN);
    1f62:	81 e0       	ldi	r24, 0x01	; 1
    1f64:	90 e0       	ldi	r25, 0x00	; 0
    1f66:	3c de       	rcall	.-904    	; 0x1be0 <_Z11EEPROM_Readj>
    1f68:	f8 01       	movw	r30, r16
    1f6a:	80 8b       	std	Z+16, r24	; 0x10
	rtc.Tag		= EEPROM_Read(EETAGE);
    1f6c:	82 e0       	ldi	r24, 0x02	; 2
    1f6e:	90 e0       	ldi	r25, 0x00	; 0
    1f70:	37 de       	rcall	.-914    	; 0x1be0 <_Z11EEPROM_Readj>
    1f72:	f8 01       	movw	r30, r16
    1f74:	84 8b       	std	Z+20, r24	; 0x14
	rtc.Monat	= EEPROM_Read(EEMONAT);
    1f76:	83 e0       	ldi	r24, 0x03	; 3
    1f78:	90 e0       	ldi	r25, 0x00	; 0
    1f7a:	32 de       	rcall	.-924    	; 0x1be0 <_Z11EEPROM_Readj>
    1f7c:	f8 01       	movw	r30, r16
    1f7e:	86 8b       	std	Z+22, r24	; 0x16
	rtc.Jahr	= EEPROM_Read(EEJAHR);
    1f80:	84 e0       	ldi	r24, 0x04	; 4
    1f82:	90 e0       	ldi	r25, 0x00	; 0
    1f84:	2d de       	rcall	.-934    	; 0x1be0 <_Z11EEPROM_Readj>
    1f86:	f8 01       	movw	r30, r16
    1f88:	87 8b       	std	Z+23, r24	; 0x17
	rtc.ausgabedatumneu();
    1f8a:	c8 01       	movw	r24, r16
    1f8c:	0e 94 bc 18 	call	0x3178	; 0x3178 <_ZN3RTC15ausgabedatumneuEv>
	rtc.RTCstart();
    1f90:	c8 01       	movw	r24, r16
    1f92:	0e 94 9d 19 	call	0x333a	; 0x333a <_ZN3RTC8RTCstartEv>
	sei();
    1f96:	78 94       	sei
}
    1f98:	a5 96       	adiw	r28, 0x25	; 37
    1f9a:	0f b6       	in	r0, 0x3f	; 63
    1f9c:	f8 94       	cli
    1f9e:	de bf       	out	0x3e, r29	; 62
    1fa0:	0f be       	out	0x3f, r0	; 63
    1fa2:	cd bf       	out	0x3d, r28	; 61
    1fa4:	df 91       	pop	r29
    1fa6:	cf 91       	pop	r28
    1fa8:	1f 91       	pop	r17
    1faa:	0f 91       	pop	r16
    1fac:	ff 90       	pop	r15
    1fae:	08 95       	ret

00001fb0 <_Z19maininterupthandlerP7monitorh>:

void maininterupthandler(monitor *mon, uint8_t taste){
    1fb0:	cf 92       	push	r12
    1fb2:	df 92       	push	r13
    1fb4:	ef 92       	push	r14
    1fb6:	ff 92       	push	r15
    1fb8:	0f 93       	push	r16
    1fba:	1f 93       	push	r17
    1fbc:	cf 93       	push	r28
    1fbe:	df 93       	push	r29
    1fc0:	1f 92       	push	r1
    1fc2:	cd b7       	in	r28, 0x3d	; 61
    1fc4:	de b7       	in	r29, 0x3e	; 62
    1fc6:	8c 01       	movw	r16, r24
    1fc8:	69 83       	std	Y+1, r22	; 0x01
	if (taste!=' ')
    1fca:	60 32       	cpi	r22, 0x20	; 32
    1fcc:	b9 f1       	breq	.+110    	; 0x203c <_Z19maininterupthandlerP7monitorh+0x8c>
	{
		switch (taste)							//Tastendruck ueberpruefen
    1fce:	6c 36       	cpi	r22, 0x6C	; 108
    1fd0:	71 f0       	breq	.+28     	; 0x1fee <_Z19maininterupthandlerP7monitorh+0x3e>
    1fd2:	6d 36       	cpi	r22, 0x6D	; 109
    1fd4:	19 f0       	breq	.+6      	; 0x1fdc <_Z19maininterupthandlerP7monitorh+0x2c>
    1fd6:	60 33       	cpi	r22, 0x30	; 48
    1fd8:	09 f5       	brne	.+66     	; 0x201c <_Z19maininterupthandlerP7monitorh+0x6c>
    1fda:	12 c0       	rjmp	.+36     	; 0x2000 <_Z19maininterupthandlerP7monitorh+0x50>
		{
			case 'm':
				//Menue aufrufen
				//abtrakt, da nur 2 Folien
				position = numberofpages;
    1fdc:	84 e0       	ldi	r24, 0x04	; 4
    1fde:	80 93 97 02 	sts	0x0297, r24
				/*
				if (position > numberofpages-1)
				{
					position=0;
				}*/
				anzeige |= (1<<refreshdisplay);
    1fe2:	80 91 99 02 	lds	r24, 0x0299
    1fe6:	81 60       	ori	r24, 0x01	; 1
    1fe8:	80 93 99 02 	sts	0x0299, r24
				break;
    1fec:	27 c0       	rjmp	.+78     	; 0x203c <_Z19maininterupthandlerP7monitorh+0x8c>
			case 'l':
				position = numberofpages;
    1fee:	84 e0       	ldi	r24, 0x04	; 4
    1ff0:	80 93 97 02 	sts	0x0297, r24
				anzeige |= (1<<refreshdisplay);
    1ff4:	80 91 99 02 	lds	r24, 0x0299
    1ff8:	81 60       	ori	r24, 0x01	; 1
    1ffa:	80 93 99 02 	sts	0x0299, r24
				break;
    1ffe:	1e c0       	rjmp	.+60     	; 0x203c <_Z19maininterupthandlerP7monitorh+0x8c>
			case '0':
				//Licht an/aus
				if (LED.ison())
    2000:	80 ea       	ldi	r24, 0xA0	; 160
    2002:	92 e0       	ldi	r25, 0x02	; 2
    2004:	f2 d7       	rcall	.+4068   	; 0x2fea <_ZN6Output4isonEv>
    2006:	88 23       	and	r24, r24
    2008:	29 f0       	breq	.+10     	; 0x2014 <_Z19maininterupthandlerP7monitorh+0x64>
				{
					LED.off();
    200a:	80 ea       	ldi	r24, 0xA0	; 160
    200c:	92 e0       	ldi	r25, 0x02	; 2
    200e:	0e 94 30 18 	call	0x3060	; 0x3060 <_ZN6Output3offEv>
    2012:	14 c0       	rjmp	.+40     	; 0x203c <_Z19maininterupthandlerP7monitorh+0x8c>
				}
				else{
					LED.on();
    2014:	80 ea       	ldi	r24, 0xA0	; 160
    2016:	92 e0       	ldi	r25, 0x02	; 2
    2018:	ab d7       	rcall	.+3926   	; 0x2f70 <_ZN6Output2onEv>
    201a:	10 c0       	rjmp	.+32     	; 0x203c <_Z19maininterupthandlerP7monitorh+0x8c>
				}
				break;
			default:
				//alle anderen Tasten werden an den jeweiligen Handler weiter gegeben
				mon->tastendruck(&taste);
    201c:	d8 01       	movw	r26, r16
    201e:	ed 91       	ld	r30, X+
    2020:	fc 91       	ld	r31, X
    2022:	01 90       	ld	r0, Z+
    2024:	f0 81       	ld	r31, Z
    2026:	e0 2d       	mov	r30, r0
    2028:	be 01       	movw	r22, r28
    202a:	6f 5f       	subi	r22, 0xFF	; 255
    202c:	7f 4f       	sbci	r23, 0xFF	; 255
    202e:	c8 01       	movw	r24, r16
    2030:	09 95       	icall
				anzeige |= (1<<refreshdisplay);
    2032:	80 91 99 02 	lds	r24, 0x0299
    2036:	81 60       	ori	r24, 0x01	; 1
    2038:	80 93 99 02 	sts	0x0299, r24
				break;
		}
	}
	
	if (position==1)							//Berechnung der Geschwindigkeit fuer Tacho
    203c:	80 91 97 02 	lds	r24, 0x0297
    2040:	81 30       	cpi	r24, 0x01	; 1
    2042:	f9 f4       	brne	.+62     	; 0x2082 <_Z19maininterupthandlerP7monitorh+0xd2>
	{
		//debounce Funktion fuer den Reedswitch
		if (reed_debounce(&PINA,PINA7))
    2044:	67 e0       	ldi	r22, 0x07	; 7
    2046:	80 e2       	ldi	r24, 0x20	; 32
    2048:	90 e0       	ldi	r25, 0x00	; 0
    204a:	28 de       	rcall	.-944    	; 0x1c9c <_Z13reed_debouncePVhh>
    204c:	88 23       	and	r24, r24
    204e:	31 f0       	breq	.+12     	; 0x205c <_Z19maininterupthandlerP7monitorh+0xac>
		{
			//Durchmesser ist 28 Zoll
			geschwindigkeit(28.0*2.54/100.0);
    2050:	63 e3       	ldi	r22, 0x33	; 51
    2052:	71 e1       	ldi	r23, 0x11	; 17
    2054:	86 e3       	ldi	r24, 0x36	; 54
    2056:	9f e3       	ldi	r25, 0x3F	; 63
    2058:	46 de       	rcall	.-884    	; 0x1ce6 <_Z15geschwindigkeitf>
    205a:	13 c0       	rjmp	.+38     	; 0x2082 <_Z19maininterupthandlerP7monitorh+0xd2>
		}
		//Hier mit werden geschwindigkeiten, die kleiner als 2.6km/h betragen gefiltert
		//Somit wird die letzte Geschwindigkeit nach 3 Sekunden geloescht
		//Das ist noch nicht die beste Variante
		else if (TCNT1>23437)
    205c:	80 91 84 00 	lds	r24, 0x0084
    2060:	90 91 85 00 	lds	r25, 0x0085
    2064:	8e 38       	cpi	r24, 0x8E	; 142
    2066:	9b 45       	sbci	r25, 0x5B	; 91
    2068:	60 f0       	brcs	.+24     	; 0x2082 <_Z19maininterupthandlerP7monitorh+0xd2>
		{
			TCNT1=0;
    206a:	10 92 85 00 	sts	0x0085, r1
    206e:	10 92 84 00 	sts	0x0084, r1
			geschw=0;
    2072:	10 92 92 02 	sts	0x0292, r1
    2076:	10 92 93 02 	sts	0x0293, r1
    207a:	10 92 94 02 	sts	0x0294, r1
    207e:	10 92 95 02 	sts	0x0295, r1
	if (statusreg&(1<<updaterate))				//24 FPS fuer schnelle anzeigen
	{
		//anzeige &= (1<<refreshdisplay);
	}
	
	if ((rtc.interupts&(1<<sekundeninterupt)))	//Sekunden
    2082:	80 91 cf 07 	lds	r24, 0x07CF
    2086:	81 ff       	sbrs	r24, 1
    2088:	6a c0       	rjmp	.+212    	; 0x215e <_Z19maininterupthandlerP7monitorh+0x1ae>
	{
		rtc.zeit();
    208a:	87 eb       	ldi	r24, 0xB7	; 183
    208c:	97 e0       	ldi	r25, 0x07	; 7
    208e:	0e 94 62 19 	call	0x32c4	; 0x32c4 <_ZN3RTC4zeitEv>
		if (position==1)
    2092:	80 91 97 02 	lds	r24, 0x0297
    2096:	81 30       	cpi	r24, 0x01	; 1
    2098:	09 f0       	breq	.+2      	; 0x209c <_Z19maininterupthandlerP7monitorh+0xec>
    209a:	57 c0       	rjmp	.+174    	; 0x214a <_Z19maininterupthandlerP7monitorh+0x19a>
		{
			if (geschw>maxgeschw)
    209c:	c0 90 92 02 	lds	r12, 0x0292
    20a0:	d0 90 93 02 	lds	r13, 0x0293
    20a4:	e0 90 94 02 	lds	r14, 0x0294
    20a8:	f0 90 95 02 	lds	r15, 0x0295
    20ac:	20 91 8a 02 	lds	r18, 0x028A
    20b0:	30 91 8b 02 	lds	r19, 0x028B
    20b4:	40 91 8c 02 	lds	r20, 0x028C
    20b8:	50 91 8d 02 	lds	r21, 0x028D
    20bc:	c7 01       	movw	r24, r14
    20be:	b6 01       	movw	r22, r12
    20c0:	0e 94 0f 1c 	call	0x381e	; 0x381e <__gesf2>
    20c4:	18 16       	cp	r1, r24
    20c6:	44 f4       	brge	.+16     	; 0x20d8 <_Z19maininterupthandlerP7monitorh+0x128>
			{
				maxgeschw=geschw;
    20c8:	c0 92 8a 02 	sts	0x028A, r12
    20cc:	d0 92 8b 02 	sts	0x028B, r13
    20d0:	e0 92 8c 02 	sts	0x028C, r14
    20d4:	f0 92 8d 02 	sts	0x028D, r15
			}
			if (geschw >= 1.0)
    20d8:	20 e0       	ldi	r18, 0x00	; 0
    20da:	30 e0       	ldi	r19, 0x00	; 0
    20dc:	40 e8       	ldi	r20, 0x80	; 128
    20de:	5f e3       	ldi	r21, 0x3F	; 63
    20e0:	c7 01       	movw	r24, r14
    20e2:	b6 01       	movw	r22, r12
    20e4:	0e 94 0f 1c 	call	0x381e	; 0x381e <__gesf2>
    20e8:	88 23       	and	r24, r24
    20ea:	9c f0       	brlt	.+38     	; 0x2112 <_Z19maininterupthandlerP7monitorh+0x162>
			{
				Fahrtzeit++;
    20ec:	80 91 86 02 	lds	r24, 0x0286
    20f0:	90 91 87 02 	lds	r25, 0x0287
    20f4:	a0 91 88 02 	lds	r26, 0x0288
    20f8:	b0 91 89 02 	lds	r27, 0x0289
    20fc:	01 96       	adiw	r24, 0x01	; 1
    20fe:	a1 1d       	adc	r26, r1
    2100:	b1 1d       	adc	r27, r1
    2102:	80 93 86 02 	sts	0x0286, r24
    2106:	90 93 87 02 	sts	0x0287, r25
    210a:	a0 93 88 02 	sts	0x0288, r26
    210e:	b0 93 89 02 	sts	0x0289, r27
			}
			strecke+=geschw/3.6;
    2112:	26 e6       	ldi	r18, 0x66	; 102
    2114:	36 e6       	ldi	r19, 0x66	; 102
    2116:	46 e6       	ldi	r20, 0x66	; 102
    2118:	50 e4       	ldi	r21, 0x40	; 64
    211a:	c7 01       	movw	r24, r14
    211c:	b6 01       	movw	r22, r12
    211e:	0e 94 66 1a 	call	0x34cc	; 0x34cc <__divsf3>
    2122:	9b 01       	movw	r18, r22
    2124:	ac 01       	movw	r20, r24
    2126:	60 91 8e 02 	lds	r22, 0x028E
    212a:	70 91 8f 02 	lds	r23, 0x028F
    212e:	80 91 90 02 	lds	r24, 0x0290
    2132:	90 91 91 02 	lds	r25, 0x0291
    2136:	0e 94 ff 19 	call	0x33fe	; 0x33fe <__addsf3>
    213a:	60 93 8e 02 	sts	0x028E, r22
    213e:	70 93 8f 02 	sts	0x028F, r23
    2142:	80 93 90 02 	sts	0x0290, r24
    2146:	90 93 91 02 	sts	0x0291, r25
		}
		anzeige |= (1<<refreshdisplay);
    214a:	80 91 99 02 	lds	r24, 0x0299
    214e:	81 60       	ori	r24, 0x01	; 1
    2150:	80 93 99 02 	sts	0x0299, r24
		rtc.interupts &= ~(1<<sekundeninterupt);
    2154:	e7 eb       	ldi	r30, 0xB7	; 183
    2156:	f7 e0       	ldi	r31, 0x07	; 7
    2158:	80 8d       	ldd	r24, Z+24	; 0x18
    215a:	8d 7f       	andi	r24, 0xFD	; 253
    215c:	80 8f       	std	Z+24, r24	; 0x18
	}
	if ((rtc.interupts&(1<<minuteninterupt)))		//Minuten
    215e:	90 91 cf 07 	lds	r25, 0x07CF
    2162:	92 ff       	sbrs	r25, 2
    2164:	08 c0       	rjmp	.+16     	; 0x2176 <_Z19maininterupthandlerP7monitorh+0x1c6>
	{
		anzeige |= (1<<refreshdisplay);
    2166:	80 91 99 02 	lds	r24, 0x0299
    216a:	81 60       	ori	r24, 0x01	; 1
    216c:	80 93 99 02 	sts	0x0299, r24
		rtc.interupts &= ~(1<<minuteninterupt);
    2170:	9b 7f       	andi	r25, 0xFB	; 251
    2172:	90 93 cf 07 	sts	0x07CF, r25
	}
	
	if ((anzeige&(1<<refreshdisplay)))			//Anzeige aktualieseren
    2176:	80 91 99 02 	lds	r24, 0x0299
    217a:	80 ff       	sbrs	r24, 0
    217c:	0d c0       	rjmp	.+26     	; 0x2198 <_Z19maininterupthandlerP7monitorh+0x1e8>
	{
		//Hier aktuelle seite neu ausgeben
		mon->draw();
    217e:	d8 01       	movw	r26, r16
    2180:	ed 91       	ld	r30, X+
    2182:	fc 91       	ld	r31, X
    2184:	02 80       	ldd	r0, Z+2	; 0x02
    2186:	f3 81       	ldd	r31, Z+3	; 0x03
    2188:	e0 2d       	mov	r30, r0
    218a:	c8 01       	movw	r24, r16
    218c:	09 95       	icall
		anzeige &= ~(1<<refreshdisplay);
    218e:	80 91 99 02 	lds	r24, 0x0299
    2192:	8e 7f       	andi	r24, 0xFE	; 254
    2194:	80 93 99 02 	sts	0x0299, r24
		{
			anzeige |= (1<<blinkflag) | (1<<refreshdisplay);
			rtc.interupts &= ~(1<<Weckerein);
		}
	}*/
}
    2198:	0f 90       	pop	r0
    219a:	df 91       	pop	r29
    219c:	cf 91       	pop	r28
    219e:	1f 91       	pop	r17
    21a0:	0f 91       	pop	r16
    21a2:	ff 90       	pop	r15
    21a4:	ef 90       	pop	r14
    21a6:	df 90       	pop	r13
    21a8:	cf 90       	pop	r12
    21aa:	08 95       	ret

000021ac <main>:

void initialisierung();
void maininterupthandler(monitor *mon, uint8_t taste);

int main(void)
{
    21ac:	cf 93       	push	r28
    21ae:	df 93       	push	r29
    21b0:	cd b7       	in	r28, 0x3d	; 61
    21b2:	de b7       	in	r29, 0x3e	; 62
    21b4:	63 97       	sbiw	r28, 0x13	; 19
    21b6:	0f b6       	in	r0, 0x3f	; 63
    21b8:	f8 94       	cli
    21ba:	de bf       	out	0x3e, r29	; 62
    21bc:	0f be       	out	0x3f, r0	; 63
    21be:	cd bf       	out	0x3d, r28	; 61
    initialisierung();
    21c0:	fb dd       	rcall	.-1034   	; 0x1db8 <_Z15initialisierungv>
} while(0)

//define new and delete operator
void * operator new(size_t size)
{
	return malloc(size);
    21c2:	86 e2       	ldi	r24, 0x26	; 38
    21c4:	90 e0       	ldi	r25, 0x00	; 0
    21c6:	0e 94 4e 20 	call	0x409c	; 0x409c <malloc>
    21ca:	fc 01       	movw	r30, r24
		#define namesize 10
		char name[10];
	public:
	monitor(Display *ol, RTC *rt)
	{
		buffersize = 0;
    21cc:	16 8a       	std	Z+22, r1	; 0x16
		oled = ol;
    21ce:	86 eb       	ldi	r24, 0xB6	; 182
    21d0:	93 e0       	ldi	r25, 0x03	; 3
    21d2:	90 8f       	std	Z+24, r25	; 0x18
    21d4:	87 8b       	std	Z+23, r24	; 0x17
		rtc = rt;
    21d6:	87 eb       	ldi	r24, 0xB7	; 183
    21d8:	97 e0       	ldi	r25, 0x07	; 7
    21da:	92 8f       	std	Z+26, r25	; 0x1a
    21dc:	81 8f       	std	Z+25, r24	; 0x19
class uhr:public monitor
{
	private:
	uint8_t Zeiger;
	public:
	uhr(Display *ol, RTC *rt):monitor(ol,rt)
    21de:	89 e5       	ldi	r24, 0x59	; 89
    21e0:	92 e0       	ldi	r25, 0x02	; 2
    21e2:	91 83       	std	Z+1, r25	; 0x01
    21e4:	80 83       	st	Z, r24
	{
		char na[] = "Uhr";
    21e6:	85 e5       	ldi	r24, 0x55	; 85
    21e8:	98 e6       	ldi	r25, 0x68	; 104
    21ea:	a2 e7       	ldi	r26, 0x72	; 114
    21ec:	b0 e0       	ldi	r27, 0x00	; 0
    21ee:	89 83       	std	Y+1, r24	; 0x01
    21f0:	9a 83       	std	Y+2, r25	; 0x02
    21f2:	ab 83       	std	Y+3, r26	; 0x03
    21f4:	bc 83       	std	Y+4, r27	; 0x04
    21f6:	9e 01       	movw	r18, r28
    21f8:	2f 5f       	subi	r18, 0xFF	; 255
    21fa:	3f 4f       	sbci	r19, 0xFF	; 255
    21fc:	cf 01       	movw	r24, r30
    21fe:	4b 96       	adiw	r24, 0x1b	; 27
    2200:	be 01       	movw	r22, r28
    2202:	65 5f       	subi	r22, 0xF5	; 245
    2204:	7f 4f       	sbci	r23, 0xFF	; 255
    2206:	89 01       	movw	r16, r18
			{
				name[i] = na[i];
			}
			else
			{
				name[i] = ' ';
    2208:	40 e2       	ldi	r20, 0x20	; 32
    220a:	50 2f       	mov	r21, r16
    220c:	52 1b       	sub	r21, r18
	public:
	uhr(Display *ol, RTC *rt):monitor(ol,rt)
	{
		char na[] = "Uhr";
		for(uint8_t i =0; i< namesize;i++){
			if (i<sizeof(na))
    220e:	54 30       	cpi	r21, 0x04	; 4
    2210:	28 f4       	brcc	.+10     	; 0x221c <main+0x70>
			{
				name[i] = na[i];
    2212:	d8 01       	movw	r26, r16
    2214:	5c 91       	ld	r21, X
    2216:	dc 01       	movw	r26, r24
    2218:	5c 93       	st	X, r21
    221a:	02 c0       	rjmp	.+4      	; 0x2220 <main+0x74>
			}
			else
			{
				name[i] = ' ';
    221c:	dc 01       	movw	r26, r24
    221e:	4c 93       	st	X, r20
    2220:	0f 5f       	subi	r16, 0xFF	; 255
    2222:	1f 4f       	sbci	r17, 0xFF	; 255
    2224:	01 96       	adiw	r24, 0x01	; 1
	uint8_t Zeiger;
	public:
	uhr(Display *ol, RTC *rt):monitor(ol,rt)
	{
		char na[] = "Uhr";
		for(uint8_t i =0; i< namesize;i++){
    2226:	06 17       	cp	r16, r22
    2228:	17 07       	cpc	r17, r23
    222a:	79 f7       	brne	.-34     	; 0x220a <main+0x5e>
			else
			{
				name[i] = ' ';
			}
		}
		Zeiger = 1;
    222c:	81 e0       	ldi	r24, 0x01	; 1
    222e:	85 a3       	std	Z+37, r24	; 0x25
		new uhr(&oled,&rtc),
		new tacho(&oled,&rtc),
		new einstellungen(&oled,&rtc),
		new offscreen(&oled,&rtc),
		new menue(&oled,&rtc)
	};
    2230:	fa 83       	std	Y+2, r31	; 0x02
    2232:	e9 83       	std	Y+1, r30	; 0x01
} while(0)

//define new and delete operator
void * operator new(size_t size)
{
	return malloc(size);
    2234:	85 e2       	ldi	r24, 0x25	; 37
    2236:	90 e0       	ldi	r25, 0x00	; 0
    2238:	0e 94 4e 20 	call	0x409c	; 0x409c <malloc>
    223c:	8c 01       	movw	r16, r24
		#define namesize 10
		char name[10];
	public:
	monitor(Display *ol, RTC *rt)
	{
		buffersize = 0;
    223e:	fc 01       	movw	r30, r24
    2240:	16 8a       	std	Z+22, r1	; 0x16
		oled = ol;
    2242:	86 eb       	ldi	r24, 0xB6	; 182
    2244:	93 e0       	ldi	r25, 0x03	; 3
    2246:	90 8f       	std	Z+24, r25	; 0x18
    2248:	87 8b       	std	Z+23, r24	; 0x17
		rtc = rt;
    224a:	87 eb       	ldi	r24, 0xB7	; 183
    224c:	97 e0       	ldi	r25, 0x07	; 7
    224e:	92 8f       	std	Z+26, r25	; 0x1a
    2250:	81 8f       	std	Z+25, r24	; 0x19
class tacho: public monitor
{
	private:
		
	public:
	tacho(Display *ol,RTC *rtc):monitor(ol,rtc)
    2252:	81 e6       	ldi	r24, 0x61	; 97
    2254:	92 e0       	ldi	r25, 0x02	; 2
    2256:	91 83       	std	Z+1, r25	; 0x01
    2258:	80 83       	st	Z, r24
	{
		char na[] = "Tacho";
    225a:	86 e0       	ldi	r24, 0x06	; 6
    225c:	ec e3       	ldi	r30, 0x3C	; 60
    225e:	f1 e0       	ldi	r31, 0x01	; 1
    2260:	de 01       	movw	r26, r28
    2262:	1b 96       	adiw	r26, 0x0b	; 11
    2264:	01 90       	ld	r0, Z+
    2266:	0d 92       	st	X+, r0
    2268:	8a 95       	dec	r24
    226a:	e1 f7       	brne	.-8      	; 0x2264 <main+0xb8>
    226c:	ce 01       	movw	r24, r28
    226e:	0b 96       	adiw	r24, 0x0b	; 11
    2270:	d8 01       	movw	r26, r16
    2272:	5b 96       	adiw	r26, 0x1b	; 27
    2274:	ae 01       	movw	r20, r28
    2276:	4b 5e       	subi	r20, 0xEB	; 235
    2278:	5f 4f       	sbci	r21, 0xFF	; 255
    227a:	fc 01       	movw	r30, r24
			{
				name[i] = na[i];
			}
			else
			{
				name[i] = ' ';
    227c:	20 e2       	ldi	r18, 0x20	; 32
    227e:	3e 2f       	mov	r19, r30
    2280:	38 1b       	sub	r19, r24
	public:
	tacho(Display *ol,RTC *rtc):monitor(ol,rtc)
	{
		char na[] = "Tacho";
		for(uint8_t i =0; i< namesize;i++){
			if (i<sizeof(na))
    2282:	36 30       	cpi	r19, 0x06	; 6
    2284:	18 f4       	brcc	.+6      	; 0x228c <main+0xe0>
			{
				name[i] = na[i];
    2286:	30 81       	ld	r19, Z
    2288:	3c 93       	st	X, r19
    228a:	01 c0       	rjmp	.+2      	; 0x228e <main+0xe2>
			}
			else
			{
				name[i] = ' ';
    228c:	2c 93       	st	X, r18
    228e:	31 96       	adiw	r30, 0x01	; 1
    2290:	11 96       	adiw	r26, 0x01	; 1
		
	public:
	tacho(Display *ol,RTC *rtc):monitor(ol,rtc)
	{
		char na[] = "Tacho";
		for(uint8_t i =0; i< namesize;i++){
    2292:	e4 17       	cp	r30, r20
    2294:	f5 07       	cpc	r31, r21
    2296:	99 f7       	brne	.-26     	; 0x227e <main+0xd2>
			else
			{
				name[i] = ' ';
			}
		}
		nullen();
    2298:	d9 dc       	rcall	.-1614   	; 0x1c4c <_Z6nullenv>
		new uhr(&oled,&rtc),
		new tacho(&oled,&rtc),
		new einstellungen(&oled,&rtc),
		new offscreen(&oled,&rtc),
		new menue(&oled,&rtc)
	};
    229a:	1c 83       	std	Y+4, r17	; 0x04
    229c:	0b 83       	std	Y+3, r16	; 0x03
} while(0)

//define new and delete operator
void * operator new(size_t size)
{
	return malloc(size);
    229e:	87 e2       	ldi	r24, 0x27	; 39
    22a0:	90 e0       	ldi	r25, 0x00	; 0
    22a2:	0e 94 4e 20 	call	0x409c	; 0x409c <malloc>
		#define namesize 10
		char name[10];
	public:
	monitor(Display *ol, RTC *rt)
	{
		buffersize = 0;
    22a6:	dc 01       	movw	r26, r24
    22a8:	56 96       	adiw	r26, 0x16	; 22
    22aa:	1c 92       	st	X, r1
    22ac:	56 97       	sbiw	r26, 0x16	; 22
		oled = ol;
    22ae:	26 eb       	ldi	r18, 0xB6	; 182
    22b0:	33 e0       	ldi	r19, 0x03	; 3
    22b2:	58 96       	adiw	r26, 0x18	; 24
    22b4:	3c 93       	st	X, r19
    22b6:	2e 93       	st	-X, r18
    22b8:	57 97       	sbiw	r26, 0x17	; 23
		rtc = rt;
    22ba:	27 eb       	ldi	r18, 0xB7	; 183
    22bc:	37 e0       	ldi	r19, 0x07	; 7
    22be:	5a 96       	adiw	r26, 0x1a	; 26
    22c0:	3c 93       	st	X, r19
    22c2:	2e 93       	st	-X, r18
    22c4:	59 97       	sbiw	r26, 0x19	; 25
	#define maxentries 4
	private:
		uint8_t posy;
		uint8_t posx;
	public:
	einstellungen(Display *ol,RTC *rt): monitor(ol,rt)
    22c6:	29 e6       	ldi	r18, 0x69	; 105
    22c8:	32 e0       	ldi	r19, 0x02	; 2
    22ca:	2d 93       	st	X+, r18
    22cc:	3c 93       	st	X, r19
	{
		char na[] = "Settings";
    22ce:	29 e0       	ldi	r18, 0x09	; 9
    22d0:	ec e8       	ldi	r30, 0x8C	; 140
    22d2:	f1 e0       	ldi	r31, 0x01	; 1
    22d4:	de 01       	movw	r26, r28
    22d6:	1b 96       	adiw	r26, 0x0b	; 11
    22d8:	01 90       	ld	r0, Z+
    22da:	0d 92       	st	X+, r0
    22dc:	2a 95       	dec	r18
    22de:	e1 f7       	brne	.-8      	; 0x22d8 <main+0x12c>
    22e0:	9e 01       	movw	r18, r28
    22e2:	25 5f       	subi	r18, 0xF5	; 245
    22e4:	3f 4f       	sbci	r19, 0xFF	; 255
    22e6:	dc 01       	movw	r26, r24
    22e8:	5b 96       	adiw	r26, 0x1b	; 27
    22ea:	be 01       	movw	r22, r28
    22ec:	6b 5e       	subi	r22, 0xEB	; 235
    22ee:	7f 4f       	sbci	r23, 0xFF	; 255
    22f0:	f9 01       	movw	r30, r18
			{
				name[i] = na[i];
			}
			else
			{
				name[i] = ' ';
    22f2:	40 e2       	ldi	r20, 0x20	; 32
    22f4:	5e 2f       	mov	r21, r30
    22f6:	52 1b       	sub	r21, r18
	public:
	einstellungen(Display *ol,RTC *rt): monitor(ol,rt)
	{
		char na[] = "Settings";
		for(uint8_t i =0; i< namesize;i++){
			if (i<sizeof(na))
    22f8:	59 30       	cpi	r21, 0x09	; 9
    22fa:	18 f4       	brcc	.+6      	; 0x2302 <main+0x156>
			{
				name[i] = na[i];
    22fc:	50 81       	ld	r21, Z
    22fe:	5c 93       	st	X, r21
    2300:	01 c0       	rjmp	.+2      	; 0x2304 <main+0x158>
			}
			else
			{
				name[i] = ' ';
    2302:	4c 93       	st	X, r20
    2304:	31 96       	adiw	r30, 0x01	; 1
    2306:	11 96       	adiw	r26, 0x01	; 1
		uint8_t posx;
	public:
	einstellungen(Display *ol,RTC *rt): monitor(ol,rt)
	{
		char na[] = "Settings";
		for(uint8_t i =0; i< namesize;i++){
    2308:	e6 17       	cp	r30, r22
    230a:	f7 07       	cpc	r31, r23
    230c:	99 f7       	brne	.-26     	; 0x22f4 <main+0x148>
			else
			{
				name[i] = ' ';
			}
		}
		posy=0;
    230e:	fc 01       	movw	r30, r24
    2310:	15 a2       	std	Z+37, r1	; 0x25
		posx=0;
    2312:	16 a2       	std	Z+38, r1	; 0x26
		new uhr(&oled,&rtc),
		new tacho(&oled,&rtc),
		new einstellungen(&oled,&rtc),
		new offscreen(&oled,&rtc),
		new menue(&oled,&rtc)
	};
    2314:	9e 83       	std	Y+6, r25	; 0x06
    2316:	8d 83       	std	Y+5, r24	; 0x05
} while(0)

//define new and delete operator
void * operator new(size_t size)
{
	return malloc(size);
    2318:	85 e2       	ldi	r24, 0x25	; 37
    231a:	90 e0       	ldi	r25, 0x00	; 0
    231c:	0e 94 4e 20 	call	0x409c	; 0x409c <malloc>
    2320:	fc 01       	movw	r30, r24
		#define namesize 10
		char name[10];
	public:
	monitor(Display *ol, RTC *rt)
	{
		buffersize = 0;
    2322:	16 8a       	std	Z+22, r1	; 0x16
		oled = ol;
    2324:	0f 2e       	mov	r0, r31
    2326:	f6 eb       	ldi	r31, 0xB6	; 182
    2328:	ef 2e       	mov	r14, r31
    232a:	f3 e0       	ldi	r31, 0x03	; 3
    232c:	ff 2e       	mov	r15, r31
    232e:	f0 2d       	mov	r31, r0
    2330:	f0 8e       	std	Z+24, r15	; 0x18
    2332:	e7 8a       	std	Z+23, r14	; 0x17
		rtc = rt;
    2334:	07 eb       	ldi	r16, 0xB7	; 183
    2336:	17 e0       	ldi	r17, 0x07	; 7
    2338:	12 8f       	std	Z+26, r17	; 0x1a
    233a:	01 8f       	std	Z+25, r16	; 0x19
class offscreen: public monitor
{
	private:
	
	public:
	offscreen(Display *ol, RTC *rt):monitor(ol,rt){
    233c:	81 e8       	ldi	r24, 0x81	; 129
    233e:	92 e0       	ldi	r25, 0x02	; 2
    2340:	91 83       	std	Z+1, r25	; 0x01
    2342:	80 83       	st	Z, r24
		new uhr(&oled,&rtc),
		new tacho(&oled,&rtc),
		new einstellungen(&oled,&rtc),
		new offscreen(&oled,&rtc),
		new menue(&oled,&rtc)
	};
    2344:	f8 87       	std	Y+8, r31	; 0x08
    2346:	ef 83       	std	Y+7, r30	; 0x07
} while(0)

//define new and delete operator
void * operator new(size_t size)
{
	return malloc(size);
    2348:	86 e2       	ldi	r24, 0x26	; 38
    234a:	90 e0       	ldi	r25, 0x00	; 0
    234c:	0e 94 4e 20 	call	0x409c	; 0x409c <malloc>
		#define namesize 10
		char name[10];
	public:
	monitor(Display *ol, RTC *rt)
	{
		buffersize = 0;
    2350:	dc 01       	movw	r26, r24
    2352:	56 96       	adiw	r26, 0x16	; 22
    2354:	1c 92       	st	X, r1
    2356:	56 97       	sbiw	r26, 0x16	; 22
		oled = ol;
    2358:	58 96       	adiw	r26, 0x18	; 24
    235a:	fc 92       	st	X, r15
    235c:	ee 92       	st	-X, r14
    235e:	57 97       	sbiw	r26, 0x17	; 23
		rtc = rt;
    2360:	5a 96       	adiw	r26, 0x1a	; 26
    2362:	1c 93       	st	X, r17
    2364:	0e 93       	st	-X, r16
    2366:	59 97       	sbiw	r26, 0x19	; 25
class menue: public monitor
{
	private:
		uint8_t pos;
	public:
	menue(Display *ol, RTC *rt):monitor(ol,rt)
    2368:	29 e7       	ldi	r18, 0x79	; 121
    236a:	32 e0       	ldi	r19, 0x02	; 2
    236c:	11 96       	adiw	r26, 0x01	; 1
    236e:	3c 93       	st	X, r19
    2370:	2e 93       	st	-X, r18
	{
		pos = 0;
    2372:	95 96       	adiw	r26, 0x25	; 37
    2374:	1c 92       	st	X, r1
		char na[] = "Menue";
    2376:	26 e0       	ldi	r18, 0x06	; 6
    2378:	e5 e9       	ldi	r30, 0x95	; 149
    237a:	f1 e0       	ldi	r31, 0x01	; 1
    237c:	de 01       	movw	r26, r28
    237e:	1b 96       	adiw	r26, 0x0b	; 11
    2380:	01 90       	ld	r0, Z+
    2382:	0d 92       	st	X+, r0
    2384:	2a 95       	dec	r18
    2386:	e1 f7       	brne	.-8      	; 0x2380 <main+0x1d4>
    2388:	9e 01       	movw	r18, r28
    238a:	25 5f       	subi	r18, 0xF5	; 245
    238c:	3f 4f       	sbci	r19, 0xFF	; 255
    238e:	dc 01       	movw	r26, r24
    2390:	5b 96       	adiw	r26, 0x1b	; 27
    2392:	be 01       	movw	r22, r28
    2394:	6b 5e       	subi	r22, 0xEB	; 235
    2396:	7f 4f       	sbci	r23, 0xFF	; 255
    2398:	f9 01       	movw	r30, r18
			{
				name[i] = na[i];
			}
			else
			{
				name[i] = ' ';
    239a:	40 e2       	ldi	r20, 0x20	; 32
    239c:	5e 2f       	mov	r21, r30
    239e:	52 1b       	sub	r21, r18
	menue(Display *ol, RTC *rt):monitor(ol,rt)
	{
		pos = 0;
		char na[] = "Menue";
		for(uint8_t i =0; i< namesize;i++)
			if (i<sizeof(na))
    23a0:	56 30       	cpi	r21, 0x06	; 6
    23a2:	18 f4       	brcc	.+6      	; 0x23aa <main+0x1fe>
			{
				name[i] = na[i];
    23a4:	50 81       	ld	r21, Z
    23a6:	5c 93       	st	X, r21
    23a8:	01 c0       	rjmp	.+2      	; 0x23ac <main+0x200>
			}
			else
			{
				name[i] = ' ';
    23aa:	4c 93       	st	X, r20
    23ac:	31 96       	adiw	r30, 0x01	; 1
    23ae:	11 96       	adiw	r26, 0x01	; 1
	public:
	menue(Display *ol, RTC *rt):monitor(ol,rt)
	{
		pos = 0;
		char na[] = "Menue";
		for(uint8_t i =0; i< namesize;i++)
    23b0:	e6 17       	cp	r30, r22
    23b2:	f7 07       	cpc	r31, r23
    23b4:	99 f7       	brne	.-26     	; 0x239c <main+0x1f0>
		new uhr(&oled,&rtc),
		new tacho(&oled,&rtc),
		new einstellungen(&oled,&rtc),
		new offscreen(&oled,&rtc),
		new menue(&oled,&rtc)
	};
    23b6:	9a 87       	std	Y+10, r25	; 0x0a
    23b8:	89 87       	std	Y+9, r24	; 0x09


	while (1) 
    {
		maininterupthandler(Folien[position],Tastatur.unified());
    23ba:	8a ea       	ldi	r24, 0xAA	; 170
    23bc:	93 e0       	ldi	r25, 0x03	; 3
    23be:	0e 94 17 08 	call	0x102e	; 0x102e <_ZN9Interface7unifiedEv>
    23c2:	e0 91 97 02 	lds	r30, 0x0297
    23c6:	f0 e0       	ldi	r31, 0x00	; 0
    23c8:	ee 0f       	add	r30, r30
    23ca:	ff 1f       	adc	r31, r31
    23cc:	21 e0       	ldi	r18, 0x01	; 1
    23ce:	30 e0       	ldi	r19, 0x00	; 0
    23d0:	2c 0f       	add	r18, r28
    23d2:	3d 1f       	adc	r19, r29
    23d4:	e2 0f       	add	r30, r18
    23d6:	f3 1f       	adc	r31, r19
    23d8:	68 2f       	mov	r22, r24
    23da:	80 81       	ld	r24, Z
    23dc:	91 81       	ldd	r25, Z+1	; 0x01
    23de:	e8 dd       	rcall	.-1072   	; 0x1fb0 <_Z19maininterupthandlerP7monitorh>
    }
    23e0:	ec cf       	rjmp	.-40     	; 0x23ba <main+0x20e>

000023e2 <_Z13uhreinstellenv>:
			rtc.interupts &= ~(1<<Weckerein);
		}
	}*/
}

void uhreinstellen(){
    23e2:	2f 92       	push	r2
    23e4:	3f 92       	push	r3
    23e6:	4f 92       	push	r4
    23e8:	5f 92       	push	r5
    23ea:	6f 92       	push	r6
    23ec:	7f 92       	push	r7
    23ee:	8f 92       	push	r8
    23f0:	9f 92       	push	r9
    23f2:	af 92       	push	r10
    23f4:	bf 92       	push	r11
    23f6:	cf 92       	push	r12
    23f8:	df 92       	push	r13
    23fa:	ef 92       	push	r14
    23fc:	ff 92       	push	r15
    23fe:	0f 93       	push	r16
    2400:	1f 93       	push	r17
    2402:	cf 93       	push	r28
    2404:	df 93       	push	r29
    2406:	cd b7       	in	r28, 0x3d	; 61
    2408:	de b7       	in	r29, 0x3e	; 62
    240a:	66 97       	sbiw	r28, 0x16	; 22
    240c:	0f b6       	in	r0, 0x3f	; 63
    240e:	f8 94       	cli
    2410:	de bf       	out	0x3e, r29	; 62
    2412:	0f be       	out	0x3f, r0	; 63
    2414:	cd bf       	out	0x3d, r28	; 61
	rtc.RTCstop();
    2416:	87 eb       	ldi	r24, 0xB7	; 183
    2418:	97 e0       	ldi	r25, 0x07	; 7
    241a:	a9 d7       	rcall	.+3922   	; 0x336e <_ZN3RTC7RTCstopEv>
	
	oled.clearFrame();
    241c:	86 eb       	ldi	r24, 0xB6	; 182
    241e:	93 e0       	ldi	r25, 0x03	; 3
    2420:	0e 94 be 02 	call	0x57c	; 0x57c <_ZN7Display10clearFrameEv>
	char buffer[20];
	uint8_t buffersize;
	uint8_t pos=0;
    2424:	91 2c       	mov	r9, r1
	while(pos<11){
		buffersize=sprintf(buffer,"Uhreinstellung");
    2426:	0f 2e       	mov	r0, r31
    2428:	ff e0       	ldi	r31, 0x0F	; 15
    242a:	7f 2e       	mov	r7, r31
    242c:	f0 2d       	mov	r31, r0
    242e:	ce 01       	movw	r24, r28
    2430:	01 96       	adiw	r24, 0x01	; 1
    2432:	2c 01       	movw	r4, r24
    2434:	f1 2c       	mov	r15, r1
		for(uint8_t i = 0; i<buffersize;i++){
			oled.draw_ASCI(buffer[i],charsize*i,0);
		}
		buffersize=sprintf(buffer,"--------------");
    2436:	8d 8b       	std	Y+21, r24	; 0x15
    2438:	5e 8a       	std	Y+22, r5	; 0x16
		for(uint8_t i = 0; i<buffersize;i++){
			oled.draw_ASCI(buffer[i],charsize*i,8);
		}
		buffer[0]=rtc.Stunden/10;
    243a:	0f 2e       	mov	r0, r31
    243c:	f7 eb       	ldi	r31, 0xB7	; 183
    243e:	cf 2e       	mov	r12, r31
    2440:	f7 e0       	ldi	r31, 0x07	; 7
    2442:	df 2e       	mov	r13, r31
    2444:	f0 2d       	mov	r31, r0
    2446:	0f 2e       	mov	r0, r31
    2448:	fd ec       	ldi	r31, 0xCD	; 205
    244a:	8f 2e       	mov	r8, r31
    244c:	f0 2d       	mov	r31, r0
		buffer[1]=rtc.Stunden%10;
		buffer[2]=':';
		buffer[3]=rtc.Minuten/10;
		buffer[4]=rtc.Minuten%10;
		buffer[5]=' ';
    244e:	68 94       	set
    2450:	ee 24       	eor	r14, r14
    2452:	e5 f8       	bld	r14, 5
		buffer[6]=rtc.Tag/10;
		buffer[7]=rtc.Tag%10;
		buffer[8]='.';
    2454:	0f 2e       	mov	r0, r31
    2456:	fe e2       	ldi	r31, 0x2E	; 46
    2458:	6f 2e       	mov	r6, r31
    245a:	f0 2d       	mov	r31, r0
	oled.clearFrame();
	char buffer[20];
	uint8_t buffersize;
	uint8_t pos=0;
	while(pos<11){
		buffersize=sprintf(buffer,"Uhreinstellung");
    245c:	eb e9       	ldi	r30, 0x9B	; 155
    245e:	f1 e0       	ldi	r31, 0x01	; 1
    2460:	d2 01       	movw	r26, r4
    2462:	87 2d       	mov	r24, r7
    2464:	01 90       	ld	r0, Z+
    2466:	0d 92       	st	X+, r0
    2468:	8a 95       	dec	r24
    246a:	e1 f7       	brne	.-8      	; 0x2464 <_Z13uhreinstellenv+0x82>
    246c:	52 01       	movw	r10, r4
    246e:	12 01       	movw	r2, r4
    2470:	1f 2d       	mov	r17, r15
		for(uint8_t i = 0; i<buffersize;i++){
			oled.draw_ASCI(buffer[i],charsize*i,0);
    2472:	f1 01       	movw	r30, r2
    2474:	61 91       	ld	r22, Z+
    2476:	1f 01       	movw	r2, r30
    2478:	2f 2d       	mov	r18, r15
    247a:	41 2f       	mov	r20, r17
    247c:	86 eb       	ldi	r24, 0xB6	; 182
    247e:	93 e0       	ldi	r25, 0x03	; 3
    2480:	0e 94 d6 03 	call	0x7ac	; 0x7ac <_ZN7Display9draw_ASCIEhhh>
    2484:	1a 5f       	subi	r17, 0xFA	; 250
	char buffer[20];
	uint8_t buffersize;
	uint8_t pos=0;
	while(pos<11){
		buffersize=sprintf(buffer,"Uhreinstellung");
		for(uint8_t i = 0; i<buffersize;i++){
    2486:	14 35       	cpi	r17, 0x54	; 84
    2488:	a1 f7       	brne	.-24     	; 0x2472 <_Z13uhreinstellenv+0x90>
			oled.draw_ASCI(buffer[i],charsize*i,0);
		}
		buffersize=sprintf(buffer,"--------------");
    248a:	e5 e1       	ldi	r30, 0x15	; 21
    248c:	f1 e0       	ldi	r31, 0x01	; 1
    248e:	d2 01       	movw	r26, r4
    2490:	87 2d       	mov	r24, r7
    2492:	01 90       	ld	r0, Z+
    2494:	0d 92       	st	X+, r0
    2496:	8a 95       	dec	r24
    2498:	e1 f7       	brne	.-8      	; 0x2492 <_Z13uhreinstellenv+0xb0>
    249a:	2d 88       	ldd	r2, Y+21	; 0x15
    249c:	3e 88       	ldd	r3, Y+22	; 0x16
    249e:	1f 2d       	mov	r17, r15
		for(uint8_t i = 0; i<buffersize;i++){
			oled.draw_ASCI(buffer[i],charsize*i,8);
    24a0:	f1 01       	movw	r30, r2
    24a2:	61 91       	ld	r22, Z+
    24a4:	1f 01       	movw	r2, r30
    24a6:	28 e0       	ldi	r18, 0x08	; 8
    24a8:	41 2f       	mov	r20, r17
    24aa:	86 eb       	ldi	r24, 0xB6	; 182
    24ac:	93 e0       	ldi	r25, 0x03	; 3
    24ae:	0e 94 d6 03 	call	0x7ac	; 0x7ac <_ZN7Display9draw_ASCIEhhh>
    24b2:	1a 5f       	subi	r17, 0xFA	; 250
		buffersize=sprintf(buffer,"Uhreinstellung");
		for(uint8_t i = 0; i<buffersize;i++){
			oled.draw_ASCI(buffer[i],charsize*i,0);
		}
		buffersize=sprintf(buffer,"--------------");
		for(uint8_t i = 0; i<buffersize;i++){
    24b4:	14 35       	cpi	r17, 0x54	; 84
    24b6:	a1 f7       	brne	.-24     	; 0x24a0 <_Z13uhreinstellenv+0xbe>
			oled.draw_ASCI(buffer[i],charsize*i,8);
		}
		buffer[0]=rtc.Stunden/10;
    24b8:	f6 01       	movw	r30, r12
    24ba:	90 89       	ldd	r25, Z+16	; 0x10
    24bc:	98 9d       	mul	r25, r8
    24be:	81 2d       	mov	r24, r1
    24c0:	11 24       	eor	r1, r1
    24c2:	86 95       	lsr	r24
    24c4:	86 95       	lsr	r24
    24c6:	86 95       	lsr	r24
    24c8:	89 83       	std	Y+1, r24	; 0x01
		buffer[1]=rtc.Stunden%10;
    24ca:	88 0f       	add	r24, r24
    24cc:	28 2f       	mov	r18, r24
    24ce:	22 0f       	add	r18, r18
    24d0:	22 0f       	add	r18, r18
    24d2:	82 0f       	add	r24, r18
    24d4:	98 1b       	sub	r25, r24
    24d6:	9a 83       	std	Y+2, r25	; 0x02
		buffer[2]=':';
    24d8:	fa e3       	ldi	r31, 0x3A	; 58
    24da:	fb 83       	std	Y+3, r31	; 0x03
		buffer[3]=rtc.Minuten/10;
    24dc:	f6 01       	movw	r30, r12
    24de:	91 89       	ldd	r25, Z+17	; 0x11
    24e0:	98 9d       	mul	r25, r8
    24e2:	81 2d       	mov	r24, r1
    24e4:	11 24       	eor	r1, r1
    24e6:	86 95       	lsr	r24
    24e8:	86 95       	lsr	r24
    24ea:	86 95       	lsr	r24
    24ec:	8c 83       	std	Y+4, r24	; 0x04
		buffer[4]=rtc.Minuten%10;
    24ee:	88 0f       	add	r24, r24
    24f0:	28 2f       	mov	r18, r24
    24f2:	22 0f       	add	r18, r18
    24f4:	22 0f       	add	r18, r18
    24f6:	82 0f       	add	r24, r18
    24f8:	98 1b       	sub	r25, r24
    24fa:	9d 83       	std	Y+5, r25	; 0x05
		buffer[5]=' ';
    24fc:	ee 82       	std	Y+6, r14	; 0x06
		buffer[6]=rtc.Tag/10;
    24fe:	94 89       	ldd	r25, Z+20	; 0x14
    2500:	98 9d       	mul	r25, r8
    2502:	81 2d       	mov	r24, r1
    2504:	11 24       	eor	r1, r1
    2506:	86 95       	lsr	r24
    2508:	86 95       	lsr	r24
    250a:	86 95       	lsr	r24
    250c:	8f 83       	std	Y+7, r24	; 0x07
		buffer[7]=rtc.Tag%10;
    250e:	88 0f       	add	r24, r24
    2510:	28 2f       	mov	r18, r24
    2512:	22 0f       	add	r18, r18
    2514:	22 0f       	add	r18, r18
    2516:	82 0f       	add	r24, r18
    2518:	98 1b       	sub	r25, r24
    251a:	98 87       	std	Y+8, r25	; 0x08
		buffer[8]='.';
    251c:	69 86       	std	Y+9, r6	; 0x09
		buffer[9]=rtc.Monat/10;
    251e:	96 89       	ldd	r25, Z+22	; 0x16
    2520:	98 9d       	mul	r25, r8
    2522:	81 2d       	mov	r24, r1
    2524:	11 24       	eor	r1, r1
    2526:	86 95       	lsr	r24
    2528:	86 95       	lsr	r24
    252a:	86 95       	lsr	r24
    252c:	8a 87       	std	Y+10, r24	; 0x0a
		buffer[10]=rtc.Monat%10;
    252e:	88 0f       	add	r24, r24
    2530:	28 2f       	mov	r18, r24
    2532:	22 0f       	add	r18, r18
    2534:	22 0f       	add	r18, r18
    2536:	82 0f       	add	r24, r18
    2538:	98 1b       	sub	r25, r24
    253a:	9b 87       	std	Y+11, r25	; 0x0b
		buffer[11]='.';
    253c:	6c 86       	std	Y+12, r6	; 0x0c
		buffer[12]=rtc.Jahr/10;
    253e:	97 89       	ldd	r25, Z+23	; 0x17
    2540:	98 9d       	mul	r25, r8
    2542:	81 2d       	mov	r24, r1
    2544:	11 24       	eor	r1, r1
    2546:	86 95       	lsr	r24
    2548:	86 95       	lsr	r24
    254a:	86 95       	lsr	r24
    254c:	8d 87       	std	Y+13, r24	; 0x0d
		buffer[13]=rtc.Jahr%10;
    254e:	88 0f       	add	r24, r24
    2550:	28 2f       	mov	r18, r24
    2552:	22 0f       	add	r18, r18
    2554:	22 0f       	add	r18, r18
    2556:	82 0f       	add	r24, r18
    2558:	98 1b       	sub	r25, r24
    255a:	9e 87       	std	Y+14, r25	; 0x0e
    255c:	0d 89       	ldd	r16, Y+21	; 0x15
    255e:	1e 89       	ldd	r17, Y+22	; 0x16
    2560:	2f 2c       	mov	r2, r15
    2562:	33 24       	eor	r3, r3
    2564:	33 94       	inc	r3
    2566:	05 c0       	rjmp	.+10     	; 0x2572 <_Z13uhreinstellenv+0x190>
    2568:	33 94       	inc	r3
    256a:	0f 5f       	subi	r16, 0xFF	; 255
    256c:	1f 4f       	sbci	r17, 0xFF	; 255
    256e:	f0 e1       	ldi	r31, 0x10	; 16
    2570:	2f 0e       	add	r2, r31
		buffersize=14;
		for(uint8_t i = 0; i<5;i++){
			if(i!=2){
    2572:	83 e0       	ldi	r24, 0x03	; 3
    2574:	38 16       	cp	r3, r24
    2576:	61 f0       	breq	.+24     	; 0x2590 <_Z13uhreinstellenv+0x1ae>
				oled.draw_number16x16(buffer[i],i*numbersmalsize,2*charhighte);
    2578:	20 e1       	ldi	r18, 0x10	; 16
    257a:	42 2d       	mov	r20, r2
    257c:	f8 01       	movw	r30, r16
    257e:	60 81       	ld	r22, Z
    2580:	86 eb       	ldi	r24, 0xB6	; 182
    2582:	93 e0       	ldi	r25, 0x03	; 3
    2584:	0e 94 20 04 	call	0x840	; 0x840 <_ZN7Display16draw_number16x16Ehhh>
		buffer[10]=rtc.Monat%10;
		buffer[11]='.';
		buffer[12]=rtc.Jahr/10;
		buffer[13]=rtc.Jahr%10;
		buffersize=14;
		for(uint8_t i = 0; i<5;i++){
    2588:	f4 e0       	ldi	r31, 0x04	; 4
    258a:	f3 15       	cp	r31, r3
    258c:	68 f7       	brcc	.-38     	; 0x2568 <_Z13uhreinstellenv+0x186>
    258e:	08 c0       	rjmp	.+16     	; 0x25a0 <_Z13uhreinstellenv+0x1be>
			if(i!=2){
				oled.draw_number16x16(buffer[i],i*numbersmalsize,2*charhighte);
			}
			else {
				oled.draw_ASCI(buffer[i],i*numbersmalsize+numbersmalsize/2,2*charhighte+charhighte/2);
    2590:	24 e1       	ldi	r18, 0x14	; 20
    2592:	48 e2       	ldi	r20, 0x28	; 40
    2594:	6b 81       	ldd	r22, Y+3	; 0x03
    2596:	86 eb       	ldi	r24, 0xB6	; 182
    2598:	93 e0       	ldi	r25, 0x03	; 3
    259a:	0e 94 d6 03 	call	0x7ac	; 0x7ac <_ZN7Display9draw_ASCIEhhh>
    259e:	e4 cf       	rjmp	.-56     	; 0x2568 <_Z13uhreinstellenv+0x186>
    25a0:	8e 01       	movw	r16, r28
    25a2:	09 5f       	subi	r16, 0xF9	; 249
    25a4:	1f 4f       	sbci	r17, 0xFF	; 255
		buffer[10]=rtc.Monat%10;
		buffer[11]='.';
		buffer[12]=rtc.Jahr/10;
		buffer[13]=rtc.Jahr%10;
		buffersize=14;
		for(uint8_t i = 0; i<5;i++){
    25a6:	2f 2c       	mov	r2, r15
    25a8:	0f 2e       	mov	r0, r31
    25aa:	f6 e0       	ldi	r31, 0x06	; 6
    25ac:	3f 2e       	mov	r3, r31
    25ae:	f0 2d       	mov	r31, r0
			else {
				oled.draw_ASCI(buffer[i],i*numbersmalsize+numbersmalsize/2,2*charhighte+charhighte/2);
			}
		}
		for(uint8_t i = 6; i<buffersize;i++){
			if(i!=8 && i!=11){
    25b0:	88 e0       	ldi	r24, 0x08	; 8
    25b2:	38 16       	cp	r3, r24
    25b4:	61 f0       	breq	.+24     	; 0x25ce <_Z13uhreinstellenv+0x1ec>
    25b6:	9b e0       	ldi	r25, 0x0B	; 11
    25b8:	39 16       	cp	r3, r25
    25ba:	49 f0       	breq	.+18     	; 0x25ce <_Z13uhreinstellenv+0x1ec>
				oled.draw_number16x16(buffer[i],i*numbersmalsize-6*numbersmalsize,4*charhighte);
    25bc:	2e 2d       	mov	r18, r14
    25be:	42 2d       	mov	r20, r2
    25c0:	f8 01       	movw	r30, r16
    25c2:	60 81       	ld	r22, Z
    25c4:	86 eb       	ldi	r24, 0xB6	; 182
    25c6:	93 e0       	ldi	r25, 0x03	; 3
    25c8:	0e 94 20 04 	call	0x840	; 0x840 <_ZN7Display16draw_number16x16Ehhh>
    25cc:	09 c0       	rjmp	.+18     	; 0x25e0 <_Z13uhreinstellenv+0x1fe>
			}
			else {
				oled.draw_ASCI(buffer[i],i*numbersmalsize+numbersmalsize/2-6*numbersmalsize,5*charhighte);
    25ce:	28 e2       	ldi	r18, 0x28	; 40
    25d0:	48 e0       	ldi	r20, 0x08	; 8
    25d2:	42 0d       	add	r20, r2
    25d4:	f8 01       	movw	r30, r16
    25d6:	60 81       	ld	r22, Z
    25d8:	86 eb       	ldi	r24, 0xB6	; 182
    25da:	93 e0       	ldi	r25, 0x03	; 3
    25dc:	0e 94 d6 03 	call	0x7ac	; 0x7ac <_ZN7Display9draw_ASCIEhhh>
			}
			else {
				oled.draw_ASCI(buffer[i],i*numbersmalsize+numbersmalsize/2,2*charhighte+charhighte/2);
			}
		}
		for(uint8_t i = 6; i<buffersize;i++){
    25e0:	33 94       	inc	r3
    25e2:	0f 5f       	subi	r16, 0xFF	; 255
    25e4:	1f 4f       	sbci	r17, 0xFF	; 255
    25e6:	f0 e1       	ldi	r31, 0x10	; 16
    25e8:	2f 0e       	add	r2, r31
    25ea:	8e e0       	ldi	r24, 0x0E	; 14
    25ec:	38 12       	cpse	r3, r24
    25ee:	e0 cf       	rjmp	.-64     	; 0x25b0 <_Z13uhreinstellenv+0x1ce>
			else {
				oled.draw_ASCI(buffer[i],i*numbersmalsize+numbersmalsize/2-6*numbersmalsize,5*charhighte);
			}
		}

		oled.sendFrame();
    25f0:	86 eb       	ldi	r24, 0xB6	; 182
    25f2:	93 e0       	ldi	r25, 0x03	; 3
    25f4:	0e 94 38 03 	call	0x670	; 0x670 <_ZN7Display9sendFrameEv>
		oled.clearFrame();
    25f8:	86 eb       	ldi	r24, 0xB6	; 182
    25fa:	93 e0       	ldi	r25, 0x03	; 3
    25fc:	0e 94 be 02 	call	0x57c	; 0x57c <_ZN7Display10clearFrameEv>
		switch (pos) {
    2600:	89 2d       	mov	r24, r9
    2602:	90 e0       	ldi	r25, 0x00	; 0
    2604:	8a 30       	cpi	r24, 0x0A	; 10
    2606:	91 05       	cpc	r25, r1
    2608:	08 f0       	brcs	.+2      	; 0x260c <_Z13uhreinstellenv+0x22a>
    260a:	2c c2       	rjmp	.+1112   	; 0x2a64 <_Z13uhreinstellenv+0x682>
    260c:	fc 01       	movw	r30, r24
    260e:	e3 5a       	subi	r30, 0xA3	; 163
    2610:	ff 4f       	sbci	r31, 0xFF	; 255
    2612:	0c 94 45 20 	jmp	0x408a	; 0x408a <__tablejump2__>
			case 0:
			rtc.Stunden=Tastatur.ZahlenausTastatur()*10;
    2616:	8a ea       	ldi	r24, 0xAA	; 170
    2618:	93 e0       	ldi	r25, 0x03	; 3
    261a:	0e 94 3b 08 	call	0x1076	; 0x1076 <_ZN9Interface17ZahlenausTastaturEv>
    261e:	88 0f       	add	r24, r24
    2620:	98 2f       	mov	r25, r24
    2622:	99 0f       	add	r25, r25
    2624:	99 0f       	add	r25, r25
    2626:	89 0f       	add	r24, r25
			if(rtc.Stunden>=24){
    2628:	88 31       	cpi	r24, 0x18	; 24
    262a:	08 f4       	brcc	.+2      	; 0x262e <_Z13uhreinstellenv+0x24c>
    262c:	52 c2       	rjmp	.+1188   	; 0x2ad2 <_Z13uhreinstellenv+0x6f0>
				rtc.Stunden=0;
    262e:	f6 01       	movw	r30, r12
    2630:	10 8a       	std	Z+16, r1	; 0x10
				pos=-1;
				buffersize=sprintf(buffer,"Stunden falsch");
    2632:	ea ea       	ldi	r30, 0xAA	; 170
    2634:	f1 e0       	ldi	r31, 0x01	; 1
    2636:	d2 01       	movw	r26, r4
    2638:	87 2d       	mov	r24, r7
    263a:	01 90       	ld	r0, Z+
    263c:	0d 92       	st	X+, r0
    263e:	8a 95       	dec	r24
    2640:	e1 f7       	brne	.-8      	; 0x263a <_Z13uhreinstellenv+0x258>
    2642:	1f 2d       	mov	r17, r15
				for(uint8_t i = 0; i<buffersize;i++){
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
    2644:	f5 01       	movw	r30, r10
    2646:	61 91       	ld	r22, Z+
    2648:	5f 01       	movw	r10, r30
    264a:	28 e3       	ldi	r18, 0x38	; 56
    264c:	41 2f       	mov	r20, r17
    264e:	86 eb       	ldi	r24, 0xB6	; 182
    2650:	93 e0       	ldi	r25, 0x03	; 3
    2652:	0e 94 d6 03 	call	0x7ac	; 0x7ac <_ZN7Display9draw_ASCIEhhh>
    2656:	1a 5f       	subi	r17, 0xFA	; 250
			rtc.Stunden=Tastatur.ZahlenausTastatur()*10;
			if(rtc.Stunden>=24){
				rtc.Stunden=0;
				pos=-1;
				buffersize=sprintf(buffer,"Stunden falsch");
				for(uint8_t i = 0; i<buffersize;i++){
    2658:	14 35       	cpi	r17, 0x54	; 84
    265a:	a1 f7       	brne	.-24     	; 0x2644 <_Z13uhreinstellenv+0x262>
		switch (pos) {
			case 0:
			rtc.Stunden=Tastatur.ZahlenausTastatur()*10;
			if(rtc.Stunden>=24){
				rtc.Stunden=0;
				pos=-1;
    265c:	99 24       	eor	r9, r9
    265e:	9a 94       	dec	r9
    2660:	3a c2       	rjmp	.+1140   	; 0x2ad6 <_Z13uhreinstellenv+0x6f4>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 1:
			rtc.Stunden+=Tastatur.ZahlenausTastatur();
    2662:	8a ea       	ldi	r24, 0xAA	; 170
    2664:	93 e0       	ldi	r25, 0x03	; 3
    2666:	0e 94 3b 08 	call	0x1076	; 0x1076 <_ZN9Interface17ZahlenausTastaturEv>
    266a:	f6 01       	movw	r30, r12
    266c:	20 89       	ldd	r18, Z+16	; 0x10
    266e:	90 e0       	ldi	r25, 0x00	; 0
    2670:	82 0f       	add	r24, r18
    2672:	91 1d       	adc	r25, r1
			if(rtc.Stunden>=24){
    2674:	88 31       	cpi	r24, 0x18	; 24
    2676:	10 f4       	brcc	.+4      	; 0x267c <_Z13uhreinstellenv+0x29a>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 1:
			rtc.Stunden+=Tastatur.ZahlenausTastatur();
    2678:	80 8b       	std	Z+16, r24	; 0x10
    267a:	2d c2       	rjmp	.+1114   	; 0x2ad6 <_Z13uhreinstellenv+0x6f4>
			if(rtc.Stunden>=24){
				rtc.Stunden=0;
    267c:	f6 01       	movw	r30, r12
    267e:	10 8a       	std	Z+16, r1	; 0x10
				pos=-1;
				buffersize=sprintf(buffer,"Stunden falsch");
    2680:	ea ea       	ldi	r30, 0xAA	; 170
    2682:	f1 e0       	ldi	r31, 0x01	; 1
    2684:	d2 01       	movw	r26, r4
    2686:	87 2d       	mov	r24, r7
    2688:	01 90       	ld	r0, Z+
    268a:	0d 92       	st	X+, r0
    268c:	8a 95       	dec	r24
    268e:	e1 f7       	brne	.-8      	; 0x2688 <_Z13uhreinstellenv+0x2a6>
    2690:	1f 2d       	mov	r17, r15
				for(uint8_t i = 0; i<buffersize;i++){
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
    2692:	f5 01       	movw	r30, r10
    2694:	61 91       	ld	r22, Z+
    2696:	5f 01       	movw	r10, r30
    2698:	28 e3       	ldi	r18, 0x38	; 56
    269a:	41 2f       	mov	r20, r17
    269c:	86 eb       	ldi	r24, 0xB6	; 182
    269e:	93 e0       	ldi	r25, 0x03	; 3
    26a0:	0e 94 d6 03 	call	0x7ac	; 0x7ac <_ZN7Display9draw_ASCIEhhh>
    26a4:	1a 5f       	subi	r17, 0xFA	; 250
			rtc.Stunden+=Tastatur.ZahlenausTastatur();
			if(rtc.Stunden>=24){
				rtc.Stunden=0;
				pos=-1;
				buffersize=sprintf(buffer,"Stunden falsch");
				for(uint8_t i = 0; i<buffersize;i++){
    26a6:	14 35       	cpi	r17, 0x54	; 84
    26a8:	a1 f7       	brne	.-24     	; 0x2692 <_Z13uhreinstellenv+0x2b0>
			break;
			case 1:
			rtc.Stunden+=Tastatur.ZahlenausTastatur();
			if(rtc.Stunden>=24){
				rtc.Stunden=0;
				pos=-1;
    26aa:	99 24       	eor	r9, r9
    26ac:	9a 94       	dec	r9
    26ae:	13 c2       	rjmp	.+1062   	; 0x2ad6 <_Z13uhreinstellenv+0x6f4>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 2:
			rtc.Minuten=Tastatur.ZahlenausTastatur()*10;
    26b0:	8a ea       	ldi	r24, 0xAA	; 170
    26b2:	93 e0       	ldi	r25, 0x03	; 3
    26b4:	0e 94 3b 08 	call	0x1076	; 0x1076 <_ZN9Interface17ZahlenausTastaturEv>
    26b8:	88 0f       	add	r24, r24
    26ba:	98 2f       	mov	r25, r24
    26bc:	99 0f       	add	r25, r25
    26be:	99 0f       	add	r25, r25
    26c0:	89 0f       	add	r24, r25
			if(rtc.Minuten>=60){
    26c2:	8c 33       	cpi	r24, 0x3C	; 60
    26c4:	18 f4       	brcc	.+6      	; 0x26cc <_Z13uhreinstellenv+0x2ea>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 2:
			rtc.Minuten=Tastatur.ZahlenausTastatur()*10;
    26c6:	f6 01       	movw	r30, r12
    26c8:	81 8b       	std	Z+17, r24	; 0x11
    26ca:	05 c2       	rjmp	.+1034   	; 0x2ad6 <_Z13uhreinstellenv+0x6f4>
			if(rtc.Minuten>=60){
				rtc.Minuten=0;
    26cc:	f6 01       	movw	r30, r12
    26ce:	11 8a       	std	Z+17, r1	; 0x11
				pos=1;
				buffersize=sprintf(buffer,"Minuten falsch");
    26d0:	e9 eb       	ldi	r30, 0xB9	; 185
    26d2:	f1 e0       	ldi	r31, 0x01	; 1
    26d4:	d2 01       	movw	r26, r4
    26d6:	87 2d       	mov	r24, r7
    26d8:	01 90       	ld	r0, Z+
    26da:	0d 92       	st	X+, r0
    26dc:	8a 95       	dec	r24
    26de:	e1 f7       	brne	.-8      	; 0x26d8 <_Z13uhreinstellenv+0x2f6>
    26e0:	1f 2d       	mov	r17, r15
				for(uint8_t i = 0; i<buffersize;i++){
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
    26e2:	f5 01       	movw	r30, r10
    26e4:	61 91       	ld	r22, Z+
    26e6:	5f 01       	movw	r10, r30
    26e8:	28 e3       	ldi	r18, 0x38	; 56
    26ea:	41 2f       	mov	r20, r17
    26ec:	86 eb       	ldi	r24, 0xB6	; 182
    26ee:	93 e0       	ldi	r25, 0x03	; 3
    26f0:	0e 94 d6 03 	call	0x7ac	; 0x7ac <_ZN7Display9draw_ASCIEhhh>
    26f4:	1a 5f       	subi	r17, 0xFA	; 250
			rtc.Minuten=Tastatur.ZahlenausTastatur()*10;
			if(rtc.Minuten>=60){
				rtc.Minuten=0;
				pos=1;
				buffersize=sprintf(buffer,"Minuten falsch");
				for(uint8_t i = 0; i<buffersize;i++){
    26f6:	14 35       	cpi	r17, 0x54	; 84
    26f8:	a1 f7       	brne	.-24     	; 0x26e2 <_Z13uhreinstellenv+0x300>
			break;
			case 2:
			rtc.Minuten=Tastatur.ZahlenausTastatur()*10;
			if(rtc.Minuten>=60){
				rtc.Minuten=0;
				pos=1;
    26fa:	99 24       	eor	r9, r9
    26fc:	93 94       	inc	r9
    26fe:	eb c1       	rjmp	.+982    	; 0x2ad6 <_Z13uhreinstellenv+0x6f4>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 3:
			rtc.Minuten+=Tastatur.ZahlenausTastatur();
    2700:	8a ea       	ldi	r24, 0xAA	; 170
    2702:	93 e0       	ldi	r25, 0x03	; 3
    2704:	0e 94 3b 08 	call	0x1076	; 0x1076 <_ZN9Interface17ZahlenausTastaturEv>
    2708:	f6 01       	movw	r30, r12
    270a:	21 89       	ldd	r18, Z+17	; 0x11
    270c:	90 e0       	ldi	r25, 0x00	; 0
    270e:	82 0f       	add	r24, r18
    2710:	91 1d       	adc	r25, r1
			if(rtc.Minuten>=60){
    2712:	8c 33       	cpi	r24, 0x3C	; 60
    2714:	10 f4       	brcc	.+4      	; 0x271a <_Z13uhreinstellenv+0x338>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 3:
			rtc.Minuten+=Tastatur.ZahlenausTastatur();
    2716:	81 8b       	std	Z+17, r24	; 0x11
    2718:	de c1       	rjmp	.+956    	; 0x2ad6 <_Z13uhreinstellenv+0x6f4>
			if(rtc.Minuten>=60){
				rtc.Minuten=0;
    271a:	f6 01       	movw	r30, r12
    271c:	11 8a       	std	Z+17, r1	; 0x11
				pos=1;
				buffersize=sprintf(buffer,"Minuten falsch");
    271e:	e9 eb       	ldi	r30, 0xB9	; 185
    2720:	f1 e0       	ldi	r31, 0x01	; 1
    2722:	d2 01       	movw	r26, r4
    2724:	87 2d       	mov	r24, r7
    2726:	01 90       	ld	r0, Z+
    2728:	0d 92       	st	X+, r0
    272a:	8a 95       	dec	r24
    272c:	e1 f7       	brne	.-8      	; 0x2726 <_Z13uhreinstellenv+0x344>
    272e:	1f 2d       	mov	r17, r15
				for(uint8_t i = 0; i<buffersize;i++){
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
    2730:	f5 01       	movw	r30, r10
    2732:	61 91       	ld	r22, Z+
    2734:	5f 01       	movw	r10, r30
    2736:	28 e3       	ldi	r18, 0x38	; 56
    2738:	41 2f       	mov	r20, r17
    273a:	86 eb       	ldi	r24, 0xB6	; 182
    273c:	93 e0       	ldi	r25, 0x03	; 3
    273e:	0e 94 d6 03 	call	0x7ac	; 0x7ac <_ZN7Display9draw_ASCIEhhh>
    2742:	1a 5f       	subi	r17, 0xFA	; 250
			rtc.Minuten+=Tastatur.ZahlenausTastatur();
			if(rtc.Minuten>=60){
				rtc.Minuten=0;
				pos=1;
				buffersize=sprintf(buffer,"Minuten falsch");
				for(uint8_t i = 0; i<buffersize;i++){
    2744:	14 35       	cpi	r17, 0x54	; 84
    2746:	a1 f7       	brne	.-24     	; 0x2730 <_Z13uhreinstellenv+0x34e>
			break;
			case 3:
			rtc.Minuten+=Tastatur.ZahlenausTastatur();
			if(rtc.Minuten>=60){
				rtc.Minuten=0;
				pos=1;
    2748:	99 24       	eor	r9, r9
    274a:	93 94       	inc	r9
    274c:	c4 c1       	rjmp	.+904    	; 0x2ad6 <_Z13uhreinstellenv+0x6f4>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 4:
			rtc.Tag=Tastatur.ZahlenausTastatur()*10;
    274e:	8a ea       	ldi	r24, 0xAA	; 170
    2750:	93 e0       	ldi	r25, 0x03	; 3
    2752:	0e 94 3b 08 	call	0x1076	; 0x1076 <_ZN9Interface17ZahlenausTastaturEv>
    2756:	88 0f       	add	r24, r24
    2758:	98 2f       	mov	r25, r24
    275a:	99 0f       	add	r25, r25
    275c:	99 0f       	add	r25, r25
    275e:	89 0f       	add	r24, r25
			if(rtc.Tag>=32){
    2760:	80 32       	cpi	r24, 0x20	; 32
    2762:	18 f4       	brcc	.+6      	; 0x276a <_Z13uhreinstellenv+0x388>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 4:
			rtc.Tag=Tastatur.ZahlenausTastatur()*10;
    2764:	f6 01       	movw	r30, r12
    2766:	84 8b       	std	Z+20, r24	; 0x14
    2768:	b6 c1       	rjmp	.+876    	; 0x2ad6 <_Z13uhreinstellenv+0x6f4>
			if(rtc.Tag>=32){
				rtc.Tag=0;
    276a:	f6 01       	movw	r30, r12
    276c:	14 8a       	std	Z+20, r1	; 0x14
				pos=3;
				buffersize=sprintf(buffer,"Tag falsch");
    276e:	8b e0       	ldi	r24, 0x0B	; 11
    2770:	e8 ec       	ldi	r30, 0xC8	; 200
    2772:	f1 e0       	ldi	r31, 0x01	; 1
    2774:	d2 01       	movw	r26, r4
    2776:	01 90       	ld	r0, Z+
    2778:	0d 92       	st	X+, r0
    277a:	8a 95       	dec	r24
    277c:	e1 f7       	brne	.-8      	; 0x2776 <_Z13uhreinstellenv+0x394>
    277e:	1f 2d       	mov	r17, r15
				for(uint8_t i = 0; i<buffersize;i++){
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
    2780:	f5 01       	movw	r30, r10
    2782:	61 91       	ld	r22, Z+
    2784:	5f 01       	movw	r10, r30
    2786:	28 e3       	ldi	r18, 0x38	; 56
    2788:	41 2f       	mov	r20, r17
    278a:	86 eb       	ldi	r24, 0xB6	; 182
    278c:	93 e0       	ldi	r25, 0x03	; 3
    278e:	0e 94 d6 03 	call	0x7ac	; 0x7ac <_ZN7Display9draw_ASCIEhhh>
    2792:	1a 5f       	subi	r17, 0xFA	; 250
			rtc.Tag=Tastatur.ZahlenausTastatur()*10;
			if(rtc.Tag>=32){
				rtc.Tag=0;
				pos=3;
				buffersize=sprintf(buffer,"Tag falsch");
				for(uint8_t i = 0; i<buffersize;i++){
    2794:	1c 33       	cpi	r17, 0x3C	; 60
    2796:	a1 f7       	brne	.-24     	; 0x2780 <_Z13uhreinstellenv+0x39e>
			break;
			case 4:
			rtc.Tag=Tastatur.ZahlenausTastatur()*10;
			if(rtc.Tag>=32){
				rtc.Tag=0;
				pos=3;
    2798:	0f 2e       	mov	r0, r31
    279a:	f3 e0       	ldi	r31, 0x03	; 3
    279c:	9f 2e       	mov	r9, r31
    279e:	f0 2d       	mov	r31, r0
    27a0:	9a c1       	rjmp	.+820    	; 0x2ad6 <_Z13uhreinstellenv+0x6f4>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 5:
			rtc.Tag+=Tastatur.ZahlenausTastatur();
    27a2:	8a ea       	ldi	r24, 0xAA	; 170
    27a4:	93 e0       	ldi	r25, 0x03	; 3
    27a6:	0e 94 3b 08 	call	0x1076	; 0x1076 <_ZN9Interface17ZahlenausTastaturEv>
    27aa:	f6 01       	movw	r30, r12
    27ac:	24 89       	ldd	r18, Z+20	; 0x14
    27ae:	90 e0       	ldi	r25, 0x00	; 0
    27b0:	82 0f       	add	r24, r18
    27b2:	91 1d       	adc	r25, r1
			if(rtc.Tag>=32){
    27b4:	80 32       	cpi	r24, 0x20	; 32
    27b6:	10 f4       	brcc	.+4      	; 0x27bc <_Z13uhreinstellenv+0x3da>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 5:
			rtc.Tag+=Tastatur.ZahlenausTastatur();
    27b8:	84 8b       	std	Z+20, r24	; 0x14
    27ba:	8d c1       	rjmp	.+794    	; 0x2ad6 <_Z13uhreinstellenv+0x6f4>
			if(rtc.Tag>=32){
				rtc.Tag=0;
    27bc:	f6 01       	movw	r30, r12
    27be:	14 8a       	std	Z+20, r1	; 0x14
				pos=3;
				buffersize=sprintf(buffer,"Tag falsch");
    27c0:	8b e0       	ldi	r24, 0x0B	; 11
    27c2:	e8 ec       	ldi	r30, 0xC8	; 200
    27c4:	f1 e0       	ldi	r31, 0x01	; 1
    27c6:	d2 01       	movw	r26, r4
    27c8:	01 90       	ld	r0, Z+
    27ca:	0d 92       	st	X+, r0
    27cc:	8a 95       	dec	r24
    27ce:	e1 f7       	brne	.-8      	; 0x27c8 <_Z13uhreinstellenv+0x3e6>
    27d0:	1f 2d       	mov	r17, r15
				for(uint8_t i = 0; i<buffersize;i++){
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
    27d2:	f5 01       	movw	r30, r10
    27d4:	61 91       	ld	r22, Z+
    27d6:	5f 01       	movw	r10, r30
    27d8:	28 e3       	ldi	r18, 0x38	; 56
    27da:	41 2f       	mov	r20, r17
    27dc:	86 eb       	ldi	r24, 0xB6	; 182
    27de:	93 e0       	ldi	r25, 0x03	; 3
    27e0:	0e 94 d6 03 	call	0x7ac	; 0x7ac <_ZN7Display9draw_ASCIEhhh>
    27e4:	1a 5f       	subi	r17, 0xFA	; 250
			rtc.Tag+=Tastatur.ZahlenausTastatur();
			if(rtc.Tag>=32){
				rtc.Tag=0;
				pos=3;
				buffersize=sprintf(buffer,"Tag falsch");
				for(uint8_t i = 0; i<buffersize;i++){
    27e6:	1c 33       	cpi	r17, 0x3C	; 60
    27e8:	a1 f7       	brne	.-24     	; 0x27d2 <_Z13uhreinstellenv+0x3f0>
			break;
			case 5:
			rtc.Tag+=Tastatur.ZahlenausTastatur();
			if(rtc.Tag>=32){
				rtc.Tag=0;
				pos=3;
    27ea:	0f 2e       	mov	r0, r31
    27ec:	f3 e0       	ldi	r31, 0x03	; 3
    27ee:	9f 2e       	mov	r9, r31
    27f0:	f0 2d       	mov	r31, r0
    27f2:	71 c1       	rjmp	.+738    	; 0x2ad6 <_Z13uhreinstellenv+0x6f4>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 6:
			rtc.Monat=Tastatur.ZahlenausTastatur()*10;
    27f4:	8a ea       	ldi	r24, 0xAA	; 170
    27f6:	93 e0       	ldi	r25, 0x03	; 3
    27f8:	0e 94 3b 08 	call	0x1076	; 0x1076 <_ZN9Interface17ZahlenausTastaturEv>
    27fc:	88 0f       	add	r24, r24
    27fe:	98 2f       	mov	r25, r24
    2800:	99 0f       	add	r25, r25
    2802:	99 0f       	add	r25, r25
    2804:	89 0f       	add	r24, r25
			if(rtc.Monat>=13){
    2806:	8d 30       	cpi	r24, 0x0D	; 13
    2808:	18 f4       	brcc	.+6      	; 0x2810 <_Z13uhreinstellenv+0x42e>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 6:
			rtc.Monat=Tastatur.ZahlenausTastatur()*10;
    280a:	f6 01       	movw	r30, r12
    280c:	86 8b       	std	Z+22, r24	; 0x16
    280e:	63 c1       	rjmp	.+710    	; 0x2ad6 <_Z13uhreinstellenv+0x6f4>
			if(rtc.Monat>=13){
				rtc.Monat=0;
    2810:	f6 01       	movw	r30, r12
    2812:	16 8a       	std	Z+22, r1	; 0x16
				pos=5;
				buffersize=sprintf(buffer,"Monat falsch");
    2814:	8d e0       	ldi	r24, 0x0D	; 13
    2816:	e3 ed       	ldi	r30, 0xD3	; 211
    2818:	f1 e0       	ldi	r31, 0x01	; 1
    281a:	d2 01       	movw	r26, r4
    281c:	01 90       	ld	r0, Z+
    281e:	0d 92       	st	X+, r0
    2820:	8a 95       	dec	r24
    2822:	e1 f7       	brne	.-8      	; 0x281c <_Z13uhreinstellenv+0x43a>
    2824:	1f 2d       	mov	r17, r15
				for(uint8_t i = 0; i<buffersize;i++){
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
    2826:	f5 01       	movw	r30, r10
    2828:	61 91       	ld	r22, Z+
    282a:	5f 01       	movw	r10, r30
    282c:	28 e3       	ldi	r18, 0x38	; 56
    282e:	41 2f       	mov	r20, r17
    2830:	86 eb       	ldi	r24, 0xB6	; 182
    2832:	93 e0       	ldi	r25, 0x03	; 3
    2834:	0e 94 d6 03 	call	0x7ac	; 0x7ac <_ZN7Display9draw_ASCIEhhh>
    2838:	1a 5f       	subi	r17, 0xFA	; 250
			rtc.Monat=Tastatur.ZahlenausTastatur()*10;
			if(rtc.Monat>=13){
				rtc.Monat=0;
				pos=5;
				buffersize=sprintf(buffer,"Monat falsch");
				for(uint8_t i = 0; i<buffersize;i++){
    283a:	18 34       	cpi	r17, 0x48	; 72
    283c:	a1 f7       	brne	.-24     	; 0x2826 <_Z13uhreinstellenv+0x444>
			break;
			case 6:
			rtc.Monat=Tastatur.ZahlenausTastatur()*10;
			if(rtc.Monat>=13){
				rtc.Monat=0;
				pos=5;
    283e:	0f 2e       	mov	r0, r31
    2840:	f5 e0       	ldi	r31, 0x05	; 5
    2842:	9f 2e       	mov	r9, r31
    2844:	f0 2d       	mov	r31, r0
    2846:	47 c1       	rjmp	.+654    	; 0x2ad6 <_Z13uhreinstellenv+0x6f4>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 7:
			rtc.Monat+=Tastatur.ZahlenausTastatur();
    2848:	8a ea       	ldi	r24, 0xAA	; 170
    284a:	93 e0       	ldi	r25, 0x03	; 3
    284c:	0e 94 3b 08 	call	0x1076	; 0x1076 <_ZN9Interface17ZahlenausTastaturEv>
    2850:	f6 01       	movw	r30, r12
    2852:	26 89       	ldd	r18, Z+22	; 0x16
    2854:	90 e0       	ldi	r25, 0x00	; 0
    2856:	82 0f       	add	r24, r18
    2858:	91 1d       	adc	r25, r1
			if(rtc.Monat>=13){
    285a:	8d 30       	cpi	r24, 0x0D	; 13
    285c:	10 f4       	brcc	.+4      	; 0x2862 <_Z13uhreinstellenv+0x480>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 7:
			rtc.Monat+=Tastatur.ZahlenausTastatur();
    285e:	86 8b       	std	Z+22, r24	; 0x16
    2860:	1d c0       	rjmp	.+58     	; 0x289c <_Z13uhreinstellenv+0x4ba>
			if(rtc.Monat>=13){
				rtc.Monat=0;
    2862:	f6 01       	movw	r30, r12
    2864:	16 8a       	std	Z+22, r1	; 0x16
				pos=5;
				buffersize=sprintf(buffer,"Monat falsch");
    2866:	8d e0       	ldi	r24, 0x0D	; 13
    2868:	e3 ed       	ldi	r30, 0xD3	; 211
    286a:	f1 e0       	ldi	r31, 0x01	; 1
    286c:	d2 01       	movw	r26, r4
    286e:	01 90       	ld	r0, Z+
    2870:	0d 92       	st	X+, r0
    2872:	8a 95       	dec	r24
    2874:	e1 f7       	brne	.-8      	; 0x286e <_Z13uhreinstellenv+0x48c>
    2876:	2d 88       	ldd	r2, Y+21	; 0x15
    2878:	3e 88       	ldd	r3, Y+22	; 0x16
    287a:	1f 2d       	mov	r17, r15
				for(uint8_t i = 0; i<buffersize;i++){
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
    287c:	f1 01       	movw	r30, r2
    287e:	61 91       	ld	r22, Z+
    2880:	1f 01       	movw	r2, r30
    2882:	28 e3       	ldi	r18, 0x38	; 56
    2884:	41 2f       	mov	r20, r17
    2886:	86 eb       	ldi	r24, 0xB6	; 182
    2888:	93 e0       	ldi	r25, 0x03	; 3
    288a:	0e 94 d6 03 	call	0x7ac	; 0x7ac <_ZN7Display9draw_ASCIEhhh>
    288e:	1a 5f       	subi	r17, 0xFA	; 250
			rtc.Monat+=Tastatur.ZahlenausTastatur();
			if(rtc.Monat>=13){
				rtc.Monat=0;
				pos=5;
				buffersize=sprintf(buffer,"Monat falsch");
				for(uint8_t i = 0; i<buffersize;i++){
    2890:	18 34       	cpi	r17, 0x48	; 72
    2892:	a1 f7       	brne	.-24     	; 0x287c <_Z13uhreinstellenv+0x49a>
			break;
			case 7:
			rtc.Monat+=Tastatur.ZahlenausTastatur();
			if(rtc.Monat>=13){
				rtc.Monat=0;
				pos=5;
    2894:	0f 2e       	mov	r0, r31
    2896:	f5 e0       	ldi	r31, 0x05	; 5
    2898:	9f 2e       	mov	r9, r31
    289a:	f0 2d       	mov	r31, r0
				buffersize=sprintf(buffer,"Monat falsch");
				for(uint8_t i = 0; i<buffersize;i++){
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			if(rtc.Monat==4||rtc.Monat==6||rtc.Monat==9||rtc.Monat==11){
    289c:	f6 01       	movw	r30, r12
    289e:	96 89       	ldd	r25, Z+22	; 0x16
    28a0:	89 2f       	mov	r24, r25
    28a2:	8d 7f       	andi	r24, 0xFD	; 253
    28a4:	84 30       	cpi	r24, 0x04	; 4
    28a6:	11 f0       	breq	.+4      	; 0x28ac <_Z13uhreinstellenv+0x4ca>
    28a8:	89 30       	cpi	r24, 0x09	; 9
    28aa:	09 f5       	brne	.+66     	; 0x28ee <_Z13uhreinstellenv+0x50c>
				if(rtc.Tag>=31){
    28ac:	f6 01       	movw	r30, r12
    28ae:	84 89       	ldd	r24, Z+20	; 0x14
    28b0:	8f 31       	cpi	r24, 0x1F	; 31
    28b2:	08 f4       	brcc	.+2      	; 0x28b6 <_Z13uhreinstellenv+0x4d4>
    28b4:	d8 c0       	rjmp	.+432    	; 0x2a66 <_Z13uhreinstellenv+0x684>
					rtc.Tag=0;
    28b6:	14 8a       	std	Z+20, r1	; 0x14
					rtc.Monat=0;
    28b8:	16 8a       	std	Z+22, r1	; 0x16
					pos=3;
					buffersize=sprintf(buffer,"Tag falsch");
    28ba:	8b e0       	ldi	r24, 0x0B	; 11
    28bc:	e8 ec       	ldi	r30, 0xC8	; 200
    28be:	f1 e0       	ldi	r31, 0x01	; 1
    28c0:	d2 01       	movw	r26, r4
    28c2:	01 90       	ld	r0, Z+
    28c4:	0d 92       	st	X+, r0
    28c6:	8a 95       	dec	r24
    28c8:	e1 f7       	brne	.-8      	; 0x28c2 <_Z13uhreinstellenv+0x4e0>
    28ca:	1f 2d       	mov	r17, r15
					for(uint8_t i = 0; i<buffersize;i++){
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
    28cc:	f5 01       	movw	r30, r10
    28ce:	61 91       	ld	r22, Z+
    28d0:	5f 01       	movw	r10, r30
    28d2:	28 e3       	ldi	r18, 0x38	; 56
    28d4:	41 2f       	mov	r20, r17
    28d6:	86 eb       	ldi	r24, 0xB6	; 182
    28d8:	93 e0       	ldi	r25, 0x03	; 3
    28da:	0e 94 d6 03 	call	0x7ac	; 0x7ac <_ZN7Display9draw_ASCIEhhh>
    28de:	1a 5f       	subi	r17, 0xFA	; 250
				if(rtc.Tag>=31){
					rtc.Tag=0;
					rtc.Monat=0;
					pos=3;
					buffersize=sprintf(buffer,"Tag falsch");
					for(uint8_t i = 0; i<buffersize;i++){
    28e0:	1c 33       	cpi	r17, 0x3C	; 60
    28e2:	a1 f7       	brne	.-24     	; 0x28cc <_Z13uhreinstellenv+0x4ea>
			}
			if(rtc.Monat==4||rtc.Monat==6||rtc.Monat==9||rtc.Monat==11){
				if(rtc.Tag>=31){
					rtc.Tag=0;
					rtc.Monat=0;
					pos=3;
    28e4:	0f 2e       	mov	r0, r31
    28e6:	f3 e0       	ldi	r31, 0x03	; 3
    28e8:	9f 2e       	mov	r9, r31
    28ea:	f0 2d       	mov	r31, r0
    28ec:	f4 c0       	rjmp	.+488    	; 0x2ad6 <_Z13uhreinstellenv+0x6f4>
					for(uint8_t i = 0; i<buffersize;i++){
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
			}
			else if(rtc.Monat==2){
    28ee:	92 30       	cpi	r25, 0x02	; 2
    28f0:	09 f0       	breq	.+2      	; 0x28f4 <_Z13uhreinstellenv+0x512>
    28f2:	b9 c0       	rjmp	.+370    	; 0x2a66 <_Z13uhreinstellenv+0x684>
				if(rtc.Tag>=30){
    28f4:	f6 01       	movw	r30, r12
    28f6:	84 89       	ldd	r24, Z+20	; 0x14
    28f8:	8e 31       	cpi	r24, 0x1E	; 30
    28fa:	08 f4       	brcc	.+2      	; 0x28fe <_Z13uhreinstellenv+0x51c>
    28fc:	b4 c0       	rjmp	.+360    	; 0x2a66 <_Z13uhreinstellenv+0x684>
					rtc.Tag=0;
    28fe:	14 8a       	std	Z+20, r1	; 0x14
					rtc.Monat=0;
    2900:	16 8a       	std	Z+22, r1	; 0x16
					pos=3;
					buffersize=sprintf(buffer,"Tag falsch");
    2902:	8b e0       	ldi	r24, 0x0B	; 11
    2904:	e8 ec       	ldi	r30, 0xC8	; 200
    2906:	f1 e0       	ldi	r31, 0x01	; 1
    2908:	d2 01       	movw	r26, r4
    290a:	01 90       	ld	r0, Z+
    290c:	0d 92       	st	X+, r0
    290e:	8a 95       	dec	r24
    2910:	e1 f7       	brne	.-8      	; 0x290a <_Z13uhreinstellenv+0x528>
    2912:	1f 2d       	mov	r17, r15
					for(uint8_t i = 0; i<buffersize;i++){
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
    2914:	f5 01       	movw	r30, r10
    2916:	61 91       	ld	r22, Z+
    2918:	5f 01       	movw	r10, r30
    291a:	28 e3       	ldi	r18, 0x38	; 56
    291c:	41 2f       	mov	r20, r17
    291e:	86 eb       	ldi	r24, 0xB6	; 182
    2920:	93 e0       	ldi	r25, 0x03	; 3
    2922:	0e 94 d6 03 	call	0x7ac	; 0x7ac <_ZN7Display9draw_ASCIEhhh>
    2926:	1a 5f       	subi	r17, 0xFA	; 250
				if(rtc.Tag>=30){
					rtc.Tag=0;
					rtc.Monat=0;
					pos=3;
					buffersize=sprintf(buffer,"Tag falsch");
					for(uint8_t i = 0; i<buffersize;i++){
    2928:	1c 33       	cpi	r17, 0x3C	; 60
    292a:	a1 f7       	brne	.-24     	; 0x2914 <_Z13uhreinstellenv+0x532>
			}
			else if(rtc.Monat==2){
				if(rtc.Tag>=30){
					rtc.Tag=0;
					rtc.Monat=0;
					pos=3;
    292c:	0f 2e       	mov	r0, r31
    292e:	f3 e0       	ldi	r31, 0x03	; 3
    2930:	9f 2e       	mov	r9, r31
    2932:	f0 2d       	mov	r31, r0
    2934:	d0 c0       	rjmp	.+416    	; 0x2ad6 <_Z13uhreinstellenv+0x6f4>
					}
				}
			}
			break;
			case 8:
			rtc.Jahr=Tastatur.ZahlenausTastatur()*10;
    2936:	8a ea       	ldi	r24, 0xAA	; 170
    2938:	93 e0       	ldi	r25, 0x03	; 3
    293a:	0e 94 3b 08 	call	0x1076	; 0x1076 <_ZN9Interface17ZahlenausTastaturEv>
    293e:	88 0f       	add	r24, r24
    2940:	98 2f       	mov	r25, r24
    2942:	99 0f       	add	r25, r25
    2944:	99 0f       	add	r25, r25
    2946:	89 0f       	add	r24, r25
			if(rtc.Jahr>=50){
    2948:	82 33       	cpi	r24, 0x32	; 50
    294a:	18 f4       	brcc	.+6      	; 0x2952 <_Z13uhreinstellenv+0x570>
					}
				}
			}
			break;
			case 8:
			rtc.Jahr=Tastatur.ZahlenausTastatur()*10;
    294c:	f6 01       	movw	r30, r12
    294e:	87 8b       	std	Z+23, r24	; 0x17
    2950:	c2 c0       	rjmp	.+388    	; 0x2ad6 <_Z13uhreinstellenv+0x6f4>
			if(rtc.Jahr>=50){
				rtc.Jahr=0;
    2952:	f6 01       	movw	r30, r12
    2954:	17 8a       	std	Z+23, r1	; 0x17
				pos=7;
				buffersize=sprintf(buffer,"Jahr falsch");
    2956:	8c e0       	ldi	r24, 0x0C	; 12
    2958:	e0 ee       	ldi	r30, 0xE0	; 224
    295a:	f1 e0       	ldi	r31, 0x01	; 1
    295c:	d2 01       	movw	r26, r4
    295e:	01 90       	ld	r0, Z+
    2960:	0d 92       	st	X+, r0
    2962:	8a 95       	dec	r24
    2964:	e1 f7       	brne	.-8      	; 0x295e <_Z13uhreinstellenv+0x57c>
    2966:	1f 2d       	mov	r17, r15
				for(uint8_t i = 0; i<buffersize;i++){
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
    2968:	f5 01       	movw	r30, r10
    296a:	61 91       	ld	r22, Z+
    296c:	5f 01       	movw	r10, r30
    296e:	28 e3       	ldi	r18, 0x38	; 56
    2970:	41 2f       	mov	r20, r17
    2972:	86 eb       	ldi	r24, 0xB6	; 182
    2974:	93 e0       	ldi	r25, 0x03	; 3
    2976:	0e 94 d6 03 	call	0x7ac	; 0x7ac <_ZN7Display9draw_ASCIEhhh>
    297a:	1a 5f       	subi	r17, 0xFA	; 250
			rtc.Jahr=Tastatur.ZahlenausTastatur()*10;
			if(rtc.Jahr>=50){
				rtc.Jahr=0;
				pos=7;
				buffersize=sprintf(buffer,"Jahr falsch");
				for(uint8_t i = 0; i<buffersize;i++){
    297c:	12 34       	cpi	r17, 0x42	; 66
    297e:	a1 f7       	brne	.-24     	; 0x2968 <_Z13uhreinstellenv+0x586>
			break;
			case 8:
			rtc.Jahr=Tastatur.ZahlenausTastatur()*10;
			if(rtc.Jahr>=50){
				rtc.Jahr=0;
				pos=7;
    2980:	0f 2e       	mov	r0, r31
    2982:	f7 e0       	ldi	r31, 0x07	; 7
    2984:	9f 2e       	mov	r9, r31
    2986:	f0 2d       	mov	r31, r0
    2988:	a6 c0       	rjmp	.+332    	; 0x2ad6 <_Z13uhreinstellenv+0x6f4>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 9:
			rtc.Jahr+=Tastatur.ZahlenausTastatur();
    298a:	8a ea       	ldi	r24, 0xAA	; 170
    298c:	93 e0       	ldi	r25, 0x03	; 3
    298e:	0e 94 3b 08 	call	0x1076	; 0x1076 <_ZN9Interface17ZahlenausTastaturEv>
    2992:	f6 01       	movw	r30, r12
    2994:	27 89       	ldd	r18, Z+23	; 0x17
    2996:	90 e0       	ldi	r25, 0x00	; 0
    2998:	82 0f       	add	r24, r18
    299a:	91 1d       	adc	r25, r1
			if(rtc.Jahr>=50){
    299c:	82 33       	cpi	r24, 0x32	; 50
    299e:	08 f4       	brcc	.+2      	; 0x29a2 <_Z13uhreinstellenv+0x5c0>
    29a0:	91 c0       	rjmp	.+290    	; 0x2ac4 <_Z13uhreinstellenv+0x6e2>
				rtc.Jahr=0;
    29a2:	17 8a       	std	Z+23, r1	; 0x17
				pos=7;
				buffersize=sprintf(buffer,"Jahr falsch");
    29a4:	8c e0       	ldi	r24, 0x0C	; 12
    29a6:	e0 ee       	ldi	r30, 0xE0	; 224
    29a8:	f1 e0       	ldi	r31, 0x01	; 1
    29aa:	d2 01       	movw	r26, r4
    29ac:	01 90       	ld	r0, Z+
    29ae:	0d 92       	st	X+, r0
    29b0:	8a 95       	dec	r24
    29b2:	e1 f7       	brne	.-8      	; 0x29ac <_Z13uhreinstellenv+0x5ca>
    29b4:	2d 88       	ldd	r2, Y+21	; 0x15
    29b6:	3e 88       	ldd	r3, Y+22	; 0x16
    29b8:	1f 2d       	mov	r17, r15
				for(uint8_t i = 0; i<buffersize;i++){
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
    29ba:	f1 01       	movw	r30, r2
    29bc:	61 91       	ld	r22, Z+
    29be:	1f 01       	movw	r2, r30
    29c0:	28 e3       	ldi	r18, 0x38	; 56
    29c2:	41 2f       	mov	r20, r17
    29c4:	86 eb       	ldi	r24, 0xB6	; 182
    29c6:	93 e0       	ldi	r25, 0x03	; 3
    29c8:	0e 94 d6 03 	call	0x7ac	; 0x7ac <_ZN7Display9draw_ASCIEhhh>
    29cc:	1a 5f       	subi	r17, 0xFA	; 250
			rtc.Jahr+=Tastatur.ZahlenausTastatur();
			if(rtc.Jahr>=50){
				rtc.Jahr=0;
				pos=7;
				buffersize=sprintf(buffer,"Jahr falsch");
				for(uint8_t i = 0; i<buffersize;i++){
    29ce:	12 34       	cpi	r17, 0x42	; 66
    29d0:	a1 f7       	brne	.-24     	; 0x29ba <_Z13uhreinstellenv+0x5d8>
			break;
			case 9:
			rtc.Jahr+=Tastatur.ZahlenausTastatur();
			if(rtc.Jahr>=50){
				rtc.Jahr=0;
				pos=7;
    29d2:	0f 2e       	mov	r0, r31
    29d4:	f7 e0       	ldi	r31, 0x07	; 7
    29d6:	9f 2e       	mov	r9, r31
    29d8:	f0 2d       	mov	r31, r0
    29da:	76 c0       	rjmp	.+236    	; 0x2ac8 <_Z13uhreinstellenv+0x6e6>
				for(uint8_t i = 0; i<buffersize;i++){
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			if(rtc.Monat==2){
				if(rtc.Jahr%4==0){
    29dc:	f6 01       	movw	r30, r12
    29de:	17 89       	ldd	r17, Z+23	; 0x17
    29e0:	13 70       	andi	r17, 0x03	; 3
    29e2:	f9 f4       	brne	.+62     	; 0x2a22 <_Z13uhreinstellenv+0x640>
					if (rtc.Tag>=30)
    29e4:	84 89       	ldd	r24, Z+20	; 0x14
    29e6:	8e 31       	cpi	r24, 0x1E	; 30
    29e8:	f0 f1       	brcs	.+124    	; 0x2a66 <_Z13uhreinstellenv+0x684>
					{
						rtc.Tag=0;
    29ea:	14 8a       	std	Z+20, r1	; 0x14
						rtc.Monat=0;
    29ec:	16 8a       	std	Z+22, r1	; 0x16
						rtc.Jahr=0;
    29ee:	17 8a       	std	Z+23, r1	; 0x17
						pos=3;
						buffersize=sprintf(buffer,"Tag falsch");
    29f0:	8b e0       	ldi	r24, 0x0B	; 11
    29f2:	e8 ec       	ldi	r30, 0xC8	; 200
    29f4:	f1 e0       	ldi	r31, 0x01	; 1
    29f6:	d2 01       	movw	r26, r4
    29f8:	01 90       	ld	r0, Z+
    29fa:	0d 92       	st	X+, r0
    29fc:	8a 95       	dec	r24
    29fe:	e1 f7       	brne	.-8      	; 0x29f8 <_Z13uhreinstellenv+0x616>
						for(uint8_t i = 0; i<buffersize;i++){
							oled.draw_ASCI(buffer[i],charsize*i,7*8);
    2a00:	f5 01       	movw	r30, r10
    2a02:	61 91       	ld	r22, Z+
    2a04:	5f 01       	movw	r10, r30
    2a06:	28 e3       	ldi	r18, 0x38	; 56
    2a08:	41 2f       	mov	r20, r17
    2a0a:	86 eb       	ldi	r24, 0xB6	; 182
    2a0c:	93 e0       	ldi	r25, 0x03	; 3
    2a0e:	0e 94 d6 03 	call	0x7ac	; 0x7ac <_ZN7Display9draw_ASCIEhhh>
    2a12:	1a 5f       	subi	r17, 0xFA	; 250
						rtc.Tag=0;
						rtc.Monat=0;
						rtc.Jahr=0;
						pos=3;
						buffersize=sprintf(buffer,"Tag falsch");
						for(uint8_t i = 0; i<buffersize;i++){
    2a14:	1c 33       	cpi	r17, 0x3C	; 60
    2a16:	a1 f7       	brne	.-24     	; 0x2a00 <_Z13uhreinstellenv+0x61e>
					if (rtc.Tag>=30)
					{
						rtc.Tag=0;
						rtc.Monat=0;
						rtc.Jahr=0;
						pos=3;
    2a18:	0f 2e       	mov	r0, r31
    2a1a:	f3 e0       	ldi	r31, 0x03	; 3
    2a1c:	9f 2e       	mov	r9, r31
    2a1e:	f0 2d       	mov	r31, r0
    2a20:	5a c0       	rjmp	.+180    	; 0x2ad6 <_Z13uhreinstellenv+0x6f4>
							oled.draw_ASCI(buffer[i],charsize*i,7*8);
						}
					}
				}
				else{
					if(rtc.Tag>=29){
    2a22:	f6 01       	movw	r30, r12
    2a24:	84 89       	ldd	r24, Z+20	; 0x14
    2a26:	8d 31       	cpi	r24, 0x1D	; 29
    2a28:	f0 f0       	brcs	.+60     	; 0x2a66 <_Z13uhreinstellenv+0x684>
						rtc.Tag=0;
    2a2a:	14 8a       	std	Z+20, r1	; 0x14
						rtc.Monat=0;
    2a2c:	16 8a       	std	Z+22, r1	; 0x16
						rtc.Jahr=0;
    2a2e:	17 8a       	std	Z+23, r1	; 0x17
						pos=3;
						buffersize=sprintf(buffer,"Tag falsch");
    2a30:	8b e0       	ldi	r24, 0x0B	; 11
    2a32:	e8 ec       	ldi	r30, 0xC8	; 200
    2a34:	f1 e0       	ldi	r31, 0x01	; 1
    2a36:	d2 01       	movw	r26, r4
    2a38:	01 90       	ld	r0, Z+
    2a3a:	0d 92       	st	X+, r0
    2a3c:	8a 95       	dec	r24
    2a3e:	e1 f7       	brne	.-8      	; 0x2a38 <_Z13uhreinstellenv+0x656>
    2a40:	1f 2d       	mov	r17, r15
						for(uint8_t i = 0; i<buffersize;i++){
							oled.draw_ASCI(buffer[i],charsize*i,7*8);
    2a42:	f5 01       	movw	r30, r10
    2a44:	61 91       	ld	r22, Z+
    2a46:	5f 01       	movw	r10, r30
    2a48:	28 e3       	ldi	r18, 0x38	; 56
    2a4a:	41 2f       	mov	r20, r17
    2a4c:	86 eb       	ldi	r24, 0xB6	; 182
    2a4e:	93 e0       	ldi	r25, 0x03	; 3
    2a50:	0e 94 d6 03 	call	0x7ac	; 0x7ac <_ZN7Display9draw_ASCIEhhh>
    2a54:	1a 5f       	subi	r17, 0xFA	; 250
						rtc.Tag=0;
						rtc.Monat=0;
						rtc.Jahr=0;
						pos=3;
						buffersize=sprintf(buffer,"Tag falsch");
						for(uint8_t i = 0; i<buffersize;i++){
    2a56:	1c 33       	cpi	r17, 0x3C	; 60
    2a58:	a1 f7       	brne	.-24     	; 0x2a42 <_Z13uhreinstellenv+0x660>
				else{
					if(rtc.Tag>=29){
						rtc.Tag=0;
						rtc.Monat=0;
						rtc.Jahr=0;
						pos=3;
    2a5a:	0f 2e       	mov	r0, r31
    2a5c:	f3 e0       	ldi	r31, 0x03	; 3
    2a5e:	9f 2e       	mov	r9, r31
    2a60:	f0 2d       	mov	r31, r0
    2a62:	39 c0       	rjmp	.+114    	; 0x2ad6 <_Z13uhreinstellenv+0x6f4>
					}
				}
			}
			break;
			default:
			pos++;
    2a64:	93 94       	inc	r9
			break;
		}
		pos++;
    2a66:	93 94       	inc	r9
	
	oled.clearFrame();
	char buffer[20];
	uint8_t buffersize;
	uint8_t pos=0;
	while(pos<11){
    2a68:	fa e0       	ldi	r31, 0x0A	; 10
    2a6a:	f9 15       	cp	r31, r9
    2a6c:	08 f0       	brcs	.+2      	; 0x2a70 <_Z13uhreinstellenv+0x68e>
    2a6e:	f6 cc       	rjmp	.-1556   	; 0x245c <_Z13uhreinstellenv+0x7a>
			break;
		}
		pos++;
	}
	
	rtc.Sekunden		= 0;
    2a70:	07 eb       	ldi	r16, 0xB7	; 183
    2a72:	17 e0       	ldi	r17, 0x07	; 7
    2a74:	f8 01       	movw	r30, r16
    2a76:	12 8a       	std	Z+18, r1	; 0x12
	rtc.HundSekunden	= 0;
    2a78:	13 8a       	std	Z+19, r1	; 0x13
	//speichern der neuen Zeit im EEPROM
	EEPROM_Write(EEMINUTEN,rtc.Minuten);
    2a7a:	61 89       	ldd	r22, Z+17	; 0x11
    2a7c:	80 e0       	ldi	r24, 0x00	; 0
    2a7e:	90 e0       	ldi	r25, 0x00	; 0
    2a80:	a5 d8       	rcall	.-3766   	; 0x1bcc <_Z12EEPROM_Writejh>
	EEPROM_Write(EESTUNDEN,rtc.Stunden);
    2a82:	f8 01       	movw	r30, r16
    2a84:	60 89       	ldd	r22, Z+16	; 0x10
    2a86:	81 e0       	ldi	r24, 0x01	; 1
    2a88:	90 e0       	ldi	r25, 0x00	; 0
    2a8a:	a0 d8       	rcall	.-3776   	; 0x1bcc <_Z12EEPROM_Writejh>
	EEPROM_Write(EETAGE,rtc.Tag);
    2a8c:	f8 01       	movw	r30, r16
    2a8e:	64 89       	ldd	r22, Z+20	; 0x14
    2a90:	82 e0       	ldi	r24, 0x02	; 2
    2a92:	90 e0       	ldi	r25, 0x00	; 0
    2a94:	9b d8       	rcall	.-3786   	; 0x1bcc <_Z12EEPROM_Writejh>
	EEPROM_Write(EEMONAT,rtc.Monat);
    2a96:	f8 01       	movw	r30, r16
    2a98:	66 89       	ldd	r22, Z+22	; 0x16
    2a9a:	83 e0       	ldi	r24, 0x03	; 3
    2a9c:	90 e0       	ldi	r25, 0x00	; 0
    2a9e:	96 d8       	rcall	.-3796   	; 0x1bcc <_Z12EEPROM_Writejh>
	EEPROM_Write(EEJAHR,rtc.Jahr);
    2aa0:	f8 01       	movw	r30, r16
    2aa2:	67 89       	ldd	r22, Z+23	; 0x17
    2aa4:	84 e0       	ldi	r24, 0x04	; 4
    2aa6:	90 e0       	ldi	r25, 0x00	; 0
    2aa8:	91 d8       	rcall	.-3806   	; 0x1bcc <_Z12EEPROM_Writejh>
	
	oled.clearFrame();
    2aaa:	86 eb       	ldi	r24, 0xB6	; 182
    2aac:	93 e0       	ldi	r25, 0x03	; 3
    2aae:	0e 94 be 02 	call	0x57c	; 0x57c <_ZN7Display10clearFrameEv>
	rtc.ausgabedatumneu();
    2ab2:	c8 01       	movw	r24, r16
    2ab4:	61 d3       	rcall	.+1730   	; 0x3178 <_ZN3RTC15ausgabedatumneuEv>
	rtc.ausgabezeitneu();
    2ab6:	c8 01       	movw	r24, r16
    2ab8:	26 d3       	rcall	.+1612   	; 0x3106 <_ZN3RTC14ausgabezeitneuEv>
	rtc.RTCstart();
    2aba:	c8 01       	movw	r24, r16
    2abc:	3e d4       	rcall	.+2172   	; 0x333a <_ZN3RTC8RTCstartEv>
    2abe:	0d c0       	rjmp	.+26     	; 0x2ada <_Z13uhreinstellenv+0x6f8>
			break;
			default:
			pos++;
			break;
		}
		pos++;
    2ac0:	93 94       	inc	r9
    2ac2:	cc cc       	rjmp	.-1640   	; 0x245c <_Z13uhreinstellenv+0x7a>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 9:
			rtc.Jahr+=Tastatur.ZahlenausTastatur();
    2ac4:	f6 01       	movw	r30, r12
    2ac6:	87 8b       	std	Z+23, r24	; 0x17
				buffersize=sprintf(buffer,"Jahr falsch");
				for(uint8_t i = 0; i<buffersize;i++){
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			if(rtc.Monat==2){
    2ac8:	f6 01       	movw	r30, r12
    2aca:	86 89       	ldd	r24, Z+22	; 0x16
    2acc:	82 30       	cpi	r24, 0x02	; 2
    2ace:	c1 f7       	brne	.-16     	; 0x2ac0 <_Z13uhreinstellenv+0x6de>
    2ad0:	85 cf       	rjmp	.-246    	; 0x29dc <_Z13uhreinstellenv+0x5fa>

		oled.sendFrame();
		oled.clearFrame();
		switch (pos) {
			case 0:
			rtc.Stunden=Tastatur.ZahlenausTastatur()*10;
    2ad2:	f6 01       	movw	r30, r12
    2ad4:	80 8b       	std	Z+16, r24	; 0x10
			break;
			default:
			pos++;
			break;
		}
		pos++;
    2ad6:	93 94       	inc	r9
    2ad8:	c1 cc       	rjmp	.-1662   	; 0x245c <_Z13uhreinstellenv+0x7a>
	
	oled.clearFrame();
	rtc.ausgabedatumneu();
	rtc.ausgabezeitneu();
	rtc.RTCstart();
}
    2ada:	66 96       	adiw	r28, 0x16	; 22
    2adc:	0f b6       	in	r0, 0x3f	; 63
    2ade:	f8 94       	cli
    2ae0:	de bf       	out	0x3e, r29	; 62
    2ae2:	0f be       	out	0x3f, r0	; 63
    2ae4:	cd bf       	out	0x3d, r28	; 61
    2ae6:	df 91       	pop	r29
    2ae8:	cf 91       	pop	r28
    2aea:	1f 91       	pop	r17
    2aec:	0f 91       	pop	r16
    2aee:	ff 90       	pop	r15
    2af0:	ef 90       	pop	r14
    2af2:	df 90       	pop	r13
    2af4:	cf 90       	pop	r12
    2af6:	bf 90       	pop	r11
    2af8:	af 90       	pop	r10
    2afa:	9f 90       	pop	r9
    2afc:	8f 90       	pop	r8
    2afe:	7f 90       	pop	r7
    2b00:	6f 90       	pop	r6
    2b02:	5f 90       	pop	r5
    2b04:	4f 90       	pop	r4
    2b06:	3f 90       	pop	r3
    2b08:	2f 90       	pop	r2
    2b0a:	08 95       	ret

00002b0c <_ZN13einstellungen4drawEv>:
		}
		return 0;
	}
	
	//anzeige erstellen
	void draw(){
    2b0c:	cf 92       	push	r12
    2b0e:	df 92       	push	r13
    2b10:	ef 92       	push	r14
    2b12:	ff 92       	push	r15
    2b14:	0f 93       	push	r16
    2b16:	1f 93       	push	r17
    2b18:	cf 93       	push	r28
    2b1a:	df 93       	push	r29
    2b1c:	ec 01       	movw	r28, r24
		return 0;
	}
	
	//drawfunktion
	virtual void draw(){
		oled->clearFrame();
    2b1e:	8f 89       	ldd	r24, Y+23	; 0x17
    2b20:	98 8d       	ldd	r25, Y+24	; 0x18
    2b22:	0e 94 be 02 	call	0x57c	; 0x57c <_ZN7Display10clearFrameEv>
    2b26:	10 e0       	ldi	r17, 0x00	; 0
    2b28:	e1 2c       	mov	r14, r1
    2b2a:	f1 2c       	mov	r15, r1
	}
	
	//draw header and overload it
	void header(){
		for(uint8_t i=0;i<8;i++){
			oled->draw_ASCI(rtc->msg_uhr[i],i*charsize,0);
    2b2c:	e9 8d       	ldd	r30, Y+25	; 0x19
    2b2e:	fa 8d       	ldd	r31, Y+26	; 0x1a
    2b30:	ee 0d       	add	r30, r14
    2b32:	ff 1d       	adc	r31, r15
    2b34:	20 e0       	ldi	r18, 0x00	; 0
    2b36:	41 2f       	mov	r20, r17
    2b38:	60 81       	ld	r22, Z
    2b3a:	8f 89       	ldd	r24, Y+23	; 0x17
    2b3c:	98 8d       	ldd	r25, Y+24	; 0x18
    2b3e:	0e 94 d6 03 	call	0x7ac	; 0x7ac <_ZN7Display9draw_ASCIEhhh>
    2b42:	2f ef       	ldi	r18, 0xFF	; 255
    2b44:	e2 1a       	sub	r14, r18
    2b46:	f2 0a       	sbc	r15, r18
    2b48:	1a 5f       	subi	r17, 0xFA	; 250
		return &name[0];
	}
	
	//draw header and overload it
	void header(){
		for(uint8_t i=0;i<8;i++){
    2b4a:	10 33       	cpi	r17, 0x30	; 48
    2b4c:	79 f7       	brne	.-34     	; 0x2b2c <_ZN13einstellungen4drawEv+0x20>
			oled->draw_ASCI(rtc->msg_uhr[i],i*charsize,0);
		}
		buffersize=sprintf(buffer,"Bat: %i%%",Batteriestatus());
    2b4e:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <_Z14Batteriestatusv>
    2b52:	7e 01       	movw	r14, r28
    2b54:	32 e0       	ldi	r19, 0x02	; 2
    2b56:	e3 0e       	add	r14, r19
    2b58:	f1 1c       	adc	r15, r1
    2b5a:	28 2f       	mov	r18, r24
    2b5c:	08 2e       	mov	r0, r24
    2b5e:	00 0c       	add	r0, r0
    2b60:	33 0b       	sbc	r19, r19
    2b62:	3f 93       	push	r19
    2b64:	8f 93       	push	r24
    2b66:	82 e3       	ldi	r24, 0x32	; 50
    2b68:	91 e0       	ldi	r25, 0x01	; 1
    2b6a:	9f 93       	push	r25
    2b6c:	8f 93       	push	r24
    2b6e:	ff 92       	push	r15
    2b70:	ef 92       	push	r14
    2b72:	0e 94 a1 22 	call	0x4542	; 0x4542 <sprintf>
    2b76:	8e 8b       	std	Y+22, r24	; 0x16
		for(uint8_t i=((SSD1306_WIDTH/charsize)-buffersize);i<(SSD1306_WIDTH/charsize);i++){
    2b78:	15 e1       	ldi	r17, 0x15	; 21
    2b7a:	18 1b       	sub	r17, r24
    2b7c:	0f 90       	pop	r0
    2b7e:	0f 90       	pop	r0
    2b80:	0f 90       	pop	r0
    2b82:	0f 90       	pop	r0
    2b84:	0f 90       	pop	r0
    2b86:	0f 90       	pop	r0
    2b88:	15 31       	cpi	r17, 0x15	; 21
    2b8a:	08 f0       	brcs	.+2      	; 0x2b8e <_ZN13einstellungen4drawEv+0x82>
    2b8c:	5b c1       	rjmp	.+694    	; 0x2e44 <_ZN13einstellungen4drawEv+0x338>
    2b8e:	01 2f       	mov	r16, r17
    2b90:	00 0f       	add	r16, r16
    2b92:	01 0f       	add	r16, r17
    2b94:	00 0f       	add	r16, r16
			oled->draw_ASCI(buffer[i-((SSD1306_WIDTH/charsize)-buffersize)],i*charsize,0);
    2b96:	8e 89       	ldd	r24, Y+22	; 0x16
    2b98:	fe 01       	movw	r30, r28
    2b9a:	e1 0f       	add	r30, r17
    2b9c:	f1 1d       	adc	r31, r1
    2b9e:	e8 0f       	add	r30, r24
    2ba0:	f1 1d       	adc	r31, r1
    2ba2:	73 97       	sbiw	r30, 0x13	; 19
    2ba4:	20 e0       	ldi	r18, 0x00	; 0
    2ba6:	40 2f       	mov	r20, r16
    2ba8:	60 81       	ld	r22, Z
    2baa:	8f 89       	ldd	r24, Y+23	; 0x17
    2bac:	98 8d       	ldd	r25, Y+24	; 0x18
    2bae:	0e 94 d6 03 	call	0x7ac	; 0x7ac <_ZN7Display9draw_ASCIEhhh>
	void header(){
		for(uint8_t i=0;i<8;i++){
			oled->draw_ASCI(rtc->msg_uhr[i],i*charsize,0);
		}
		buffersize=sprintf(buffer,"Bat: %i%%",Batteriestatus());
		for(uint8_t i=((SSD1306_WIDTH/charsize)-buffersize);i<(SSD1306_WIDTH/charsize);i++){
    2bb2:	1f 5f       	subi	r17, 0xFF	; 255
    2bb4:	0a 5f       	subi	r16, 0xFA	; 250
    2bb6:	15 31       	cpi	r17, 0x15	; 21
    2bb8:	71 f7       	brne	.-36     	; 0x2b96 <_ZN13einstellungen4drawEv+0x8a>
    2bba:	44 c1       	rjmp	.+648    	; 0x2e44 <_ZN13einstellungen4drawEv+0x338>
	}
	
	//draw bottom and overload it
	void bottom(){
		for(uint8_t i=0;i<8;i++){
			oled->draw_ASCI(rtc->msg_dat[i],i*charsize+(SSD1306_WIDTH-bitsderrtc*charsize),7*charhighte);
    2bbc:	e9 8d       	ldd	r30, Y+25	; 0x19
    2bbe:	fa 8d       	ldd	r31, Y+26	; 0x1a
    2bc0:	ec 0d       	add	r30, r12
    2bc2:	fd 1d       	adc	r31, r13
    2bc4:	28 e3       	ldi	r18, 0x38	; 56
    2bc6:	41 2f       	mov	r20, r17
    2bc8:	60 85       	ldd	r22, Z+8	; 0x08
    2bca:	8f 89       	ldd	r24, Y+23	; 0x17
    2bcc:	98 8d       	ldd	r25, Y+24	; 0x18
    2bce:	0e 94 d6 03 	call	0x7ac	; 0x7ac <_ZN7Display9draw_ASCIEhhh>
    2bd2:	8f ef       	ldi	r24, 0xFF	; 255
    2bd4:	c8 1a       	sub	r12, r24
    2bd6:	d8 0a       	sbc	r13, r24
    2bd8:	1a 5f       	subi	r17, 0xFA	; 250
		}
	}
	
	//draw bottom and overload it
	void bottom(){
		for(uint8_t i=0;i<8;i++){
    2bda:	10 38       	cpi	r17, 0x80	; 128
    2bdc:	79 f7       	brne	.-34     	; 0x2bbc <_ZN13einstellungen4drawEv+0xb0>
	//anzeige erstellen
	void draw(){
		monitor::draw();
		header();
		bottom();
		if (posx==0)
    2bde:	8e a1       	ldd	r24, Y+38	; 0x26
    2be0:	81 11       	cpse	r24, r1
    2be2:	78 c0       	rjmp	.+240    	; 0x2cd4 <_ZN13einstellungen4drawEv+0x1c8>
		{
			buffersize=sprintf(buffer,"Zeit einstellen");
    2be4:	80 e1       	ldi	r24, 0x10	; 16
    2be6:	ec ee       	ldi	r30, 0xEC	; 236
    2be8:	f1 e0       	ldi	r31, 0x01	; 1
    2bea:	d7 01       	movw	r26, r14
    2bec:	01 90       	ld	r0, Z+
    2bee:	0d 92       	st	X+, r0
    2bf0:	8a 95       	dec	r24
    2bf2:	e1 f7       	brne	.-8      	; 0x2bec <_ZN13einstellungen4drawEv+0xe0>
    2bf4:	8f e0       	ldi	r24, 0x0F	; 15
    2bf6:	8e 8b       	std	Y+22, r24	; 0x16
    2bf8:	0c e0       	ldi	r16, 0x0C	; 12
    2bfa:	10 e0       	ldi	r17, 0x00	; 0
			for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+2*charsize,2*charhighte);}
    2bfc:	fe 01       	movw	r30, r28
    2bfe:	e1 0f       	add	r30, r17
    2c00:	f1 1d       	adc	r31, r1
    2c02:	20 e1       	ldi	r18, 0x10	; 16
    2c04:	40 2f       	mov	r20, r16
    2c06:	62 81       	ldd	r22, Z+2	; 0x02
    2c08:	8f 89       	ldd	r24, Y+23	; 0x17
    2c0a:	98 8d       	ldd	r25, Y+24	; 0x18
    2c0c:	0e 94 d6 03 	call	0x7ac	; 0x7ac <_ZN7Display9draw_ASCIEhhh>
    2c10:	1f 5f       	subi	r17, 0xFF	; 255
    2c12:	0a 5f       	subi	r16, 0xFA	; 250
    2c14:	8e 89       	ldd	r24, Y+22	; 0x16
    2c16:	18 17       	cp	r17, r24
    2c18:	88 f3       	brcs	.-30     	; 0x2bfc <_ZN13einstellungen4drawEv+0xf0>
			buffersize=sprintf(buffer,"g bestimmen");
    2c1a:	8c e0       	ldi	r24, 0x0C	; 12
    2c1c:	ec ef       	ldi	r30, 0xFC	; 252
    2c1e:	f1 e0       	ldi	r31, 0x01	; 1
    2c20:	d7 01       	movw	r26, r14
    2c22:	01 90       	ld	r0, Z+
    2c24:	0d 92       	st	X+, r0
    2c26:	8a 95       	dec	r24
    2c28:	e1 f7       	brne	.-8      	; 0x2c22 <_ZN13einstellungen4drawEv+0x116>
    2c2a:	8b e0       	ldi	r24, 0x0B	; 11
    2c2c:	8e 8b       	std	Y+22, r24	; 0x16
    2c2e:	0c e0       	ldi	r16, 0x0C	; 12
    2c30:	10 e0       	ldi	r17, 0x00	; 0
			for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+2*charsize,3*charhighte);}
    2c32:	fe 01       	movw	r30, r28
    2c34:	e1 0f       	add	r30, r17
    2c36:	f1 1d       	adc	r31, r1
    2c38:	28 e1       	ldi	r18, 0x18	; 24
    2c3a:	40 2f       	mov	r20, r16
    2c3c:	62 81       	ldd	r22, Z+2	; 0x02
    2c3e:	8f 89       	ldd	r24, Y+23	; 0x17
    2c40:	98 8d       	ldd	r25, Y+24	; 0x18
    2c42:	0e 94 d6 03 	call	0x7ac	; 0x7ac <_ZN7Display9draw_ASCIEhhh>
    2c46:	1f 5f       	subi	r17, 0xFF	; 255
    2c48:	0a 5f       	subi	r16, 0xFA	; 250
    2c4a:	8e 89       	ldd	r24, Y+22	; 0x16
    2c4c:	18 17       	cp	r17, r24
    2c4e:	88 f3       	brcs	.-30     	; 0x2c32 <_ZN13einstellungen4drawEv+0x126>
			buffersize=sprintf(buffer,"Versionsnummer");
    2c50:	8f e0       	ldi	r24, 0x0F	; 15
    2c52:	e8 e0       	ldi	r30, 0x08	; 8
    2c54:	f2 e0       	ldi	r31, 0x02	; 2
    2c56:	d7 01       	movw	r26, r14
    2c58:	01 90       	ld	r0, Z+
    2c5a:	0d 92       	st	X+, r0
    2c5c:	8a 95       	dec	r24
    2c5e:	e1 f7       	brne	.-8      	; 0x2c58 <_ZN13einstellungen4drawEv+0x14c>
    2c60:	8e e0       	ldi	r24, 0x0E	; 14
    2c62:	8e 8b       	std	Y+22, r24	; 0x16
    2c64:	0c e0       	ldi	r16, 0x0C	; 12
    2c66:	10 e0       	ldi	r17, 0x00	; 0
			for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+2*charsize,4*charhighte);}
    2c68:	fe 01       	movw	r30, r28
    2c6a:	e1 0f       	add	r30, r17
    2c6c:	f1 1d       	adc	r31, r1
    2c6e:	20 e2       	ldi	r18, 0x20	; 32
    2c70:	40 2f       	mov	r20, r16
    2c72:	62 81       	ldd	r22, Z+2	; 0x02
    2c74:	8f 89       	ldd	r24, Y+23	; 0x17
    2c76:	98 8d       	ldd	r25, Y+24	; 0x18
    2c78:	0e 94 d6 03 	call	0x7ac	; 0x7ac <_ZN7Display9draw_ASCIEhhh>
    2c7c:	1f 5f       	subi	r17, 0xFF	; 255
    2c7e:	0a 5f       	subi	r16, 0xFA	; 250
    2c80:	8e 89       	ldd	r24, Y+22	; 0x16
    2c82:	18 17       	cp	r17, r24
    2c84:	88 f3       	brcs	.-30     	; 0x2c68 <_ZN13einstellungen4drawEv+0x15c>
			buffersize=sprintf(buffer,"soft Reset");
    2c86:	8b e0       	ldi	r24, 0x0B	; 11
    2c88:	e7 e1       	ldi	r30, 0x17	; 23
    2c8a:	f2 e0       	ldi	r31, 0x02	; 2
    2c8c:	d7 01       	movw	r26, r14
    2c8e:	01 90       	ld	r0, Z+
    2c90:	0d 92       	st	X+, r0
    2c92:	8a 95       	dec	r24
    2c94:	e1 f7       	brne	.-8      	; 0x2c8e <_ZN13einstellungen4drawEv+0x182>
    2c96:	8a e0       	ldi	r24, 0x0A	; 10
    2c98:	8e 8b       	std	Y+22, r24	; 0x16
    2c9a:	0c e0       	ldi	r16, 0x0C	; 12
    2c9c:	10 e0       	ldi	r17, 0x00	; 0
			for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+2*charsize,5*charhighte);}
    2c9e:	fe 01       	movw	r30, r28
    2ca0:	e1 0f       	add	r30, r17
    2ca2:	f1 1d       	adc	r31, r1
    2ca4:	28 e2       	ldi	r18, 0x28	; 40
    2ca6:	40 2f       	mov	r20, r16
    2ca8:	62 81       	ldd	r22, Z+2	; 0x02
    2caa:	8f 89       	ldd	r24, Y+23	; 0x17
    2cac:	98 8d       	ldd	r25, Y+24	; 0x18
    2cae:	0e 94 d6 03 	call	0x7ac	; 0x7ac <_ZN7Display9draw_ASCIEhhh>
    2cb2:	1f 5f       	subi	r17, 0xFF	; 255
    2cb4:	0a 5f       	subi	r16, 0xFA	; 250
    2cb6:	8e 89       	ldd	r24, Y+22	; 0x16
    2cb8:	18 17       	cp	r17, r24
    2cba:	88 f3       	brcs	.-30     	; 0x2c9e <_ZN13einstellungen4drawEv+0x192>
			oled->draw_ASCI('>',0*charsize,(posy+2)*charhighte);
    2cbc:	2d a1       	ldd	r18, Y+37	; 0x25
    2cbe:	22 0f       	add	r18, r18
    2cc0:	22 0f       	add	r18, r18
    2cc2:	22 0f       	add	r18, r18
    2cc4:	20 5f       	subi	r18, 0xF0	; 240
    2cc6:	40 e0       	ldi	r20, 0x00	; 0
    2cc8:	6e e3       	ldi	r22, 0x3E	; 62
    2cca:	8f 89       	ldd	r24, Y+23	; 0x17
    2ccc:	98 8d       	ldd	r25, Y+24	; 0x18
    2cce:	0e 94 d6 03 	call	0x7ac	; 0x7ac <_ZN7Display9draw_ASCIEhhh>
    2cd2:	b3 c0       	rjmp	.+358    	; 0x2e3a <_ZN13einstellungen4drawEv+0x32e>
		}
		else if (posy==0 && posx==1)
    2cd4:	9d a1       	ldd	r25, Y+37	; 0x25
    2cd6:	91 11       	cpse	r25, r1
    2cd8:	06 c0       	rjmp	.+12     	; 0x2ce6 <_ZN13einstellungen4drawEv+0x1da>
    2cda:	81 30       	cpi	r24, 0x01	; 1
    2cdc:	09 f0       	breq	.+2      	; 0x2ce0 <_ZN13einstellungen4drawEv+0x1d4>
    2cde:	ad c0       	rjmp	.+346    	; 0x2e3a <_ZN13einstellungen4drawEv+0x32e>
		{
			//Uhreinstellung machen
			//noch etwas bloed, aber mit eigener Funktion
			uhreinstellen();
    2ce0:	80 db       	rcall	.-2304   	; 0x23e2 <_Z13uhreinstellenv>
			posx=0;
    2ce2:	1e a2       	std	Y+38, r1	; 0x26
    2ce4:	aa c0       	rjmp	.+340    	; 0x2e3a <_ZN13einstellungen4drawEv+0x32e>
		}
		else if (posy==1 && posx==1)
    2ce6:	91 30       	cpi	r25, 0x01	; 1
    2ce8:	09 f0       	breq	.+2      	; 0x2cec <_ZN13einstellungen4drawEv+0x1e0>
    2cea:	60 c0       	rjmp	.+192    	; 0x2dac <_ZN13einstellungen4drawEv+0x2a0>
    2cec:	81 30       	cpi	r24, 0x01	; 1
    2cee:	09 f0       	breq	.+2      	; 0x2cf2 <_ZN13einstellungen4drawEv+0x1e6>
    2cf0:	a4 c0       	rjmp	.+328    	; 0x2e3a <_ZN13einstellungen4drawEv+0x32e>
		{
			//g bestimmen einbauen
			buffersize=sprintf(buffer,"Geraet nicht bewegen");
    2cf2:	85 e1       	ldi	r24, 0x15	; 21
    2cf4:	e2 e2       	ldi	r30, 0x22	; 34
    2cf6:	f2 e0       	ldi	r31, 0x02	; 2
    2cf8:	d7 01       	movw	r26, r14
    2cfa:	01 90       	ld	r0, Z+
    2cfc:	0d 92       	st	X+, r0
    2cfe:	8a 95       	dec	r24
    2d00:	e1 f7       	brne	.-8      	; 0x2cfa <_ZN13einstellungen4drawEv+0x1ee>
    2d02:	84 e1       	ldi	r24, 0x14	; 20
    2d04:	8e 8b       	std	Y+22, r24	; 0x16
    2d06:	00 e0       	ldi	r16, 0x00	; 0
    2d08:	10 e0       	ldi	r17, 0x00	; 0
			for (uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize,2*charhighte);}
    2d0a:	fe 01       	movw	r30, r28
    2d0c:	e1 0f       	add	r30, r17
    2d0e:	f1 1d       	adc	r31, r1
    2d10:	20 e1       	ldi	r18, 0x10	; 16
    2d12:	40 2f       	mov	r20, r16
    2d14:	62 81       	ldd	r22, Z+2	; 0x02
    2d16:	8f 89       	ldd	r24, Y+23	; 0x17
    2d18:	98 8d       	ldd	r25, Y+24	; 0x18
    2d1a:	0e 94 d6 03 	call	0x7ac	; 0x7ac <_ZN7Display9draw_ASCIEhhh>
    2d1e:	1f 5f       	subi	r17, 0xFF	; 255
    2d20:	0a 5f       	subi	r16, 0xFA	; 250
    2d22:	8e 89       	ldd	r24, Y+22	; 0x16
    2d24:	18 17       	cp	r17, r24
    2d26:	88 f3       	brcs	.-30     	; 0x2d0a <_ZN13einstellungen4drawEv+0x1fe>
			buffersize=sprintf(buffer,"* fuer start");
    2d28:	8d e0       	ldi	r24, 0x0D	; 13
    2d2a:	e7 e3       	ldi	r30, 0x37	; 55
    2d2c:	f2 e0       	ldi	r31, 0x02	; 2
    2d2e:	d7 01       	movw	r26, r14
    2d30:	01 90       	ld	r0, Z+
    2d32:	0d 92       	st	X+, r0
    2d34:	8a 95       	dec	r24
    2d36:	e1 f7       	brne	.-8      	; 0x2d30 <_ZN13einstellungen4drawEv+0x224>
    2d38:	8c e0       	ldi	r24, 0x0C	; 12
    2d3a:	8e 8b       	std	Y+22, r24	; 0x16
    2d3c:	00 e0       	ldi	r16, 0x00	; 0
    2d3e:	10 e0       	ldi	r17, 0x00	; 0
			for (uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize,3*charhighte);}
    2d40:	fe 01       	movw	r30, r28
    2d42:	e1 0f       	add	r30, r17
    2d44:	f1 1d       	adc	r31, r1
    2d46:	28 e1       	ldi	r18, 0x18	; 24
    2d48:	40 2f       	mov	r20, r16
    2d4a:	62 81       	ldd	r22, Z+2	; 0x02
    2d4c:	8f 89       	ldd	r24, Y+23	; 0x17
    2d4e:	98 8d       	ldd	r25, Y+24	; 0x18
    2d50:	0e 94 d6 03 	call	0x7ac	; 0x7ac <_ZN7Display9draw_ASCIEhhh>
    2d54:	1f 5f       	subi	r17, 0xFF	; 255
    2d56:	0a 5f       	subi	r16, 0xFA	; 250
    2d58:	8e 89       	ldd	r24, Y+22	; 0x16
    2d5a:	18 17       	cp	r17, r24
    2d5c:	88 f3       	brcs	.-30     	; 0x2d40 <_ZN13einstellungen4drawEv+0x234>
			if (5<6&&5>0)
			{
				buffersize=sprintf(buffer,"Noch %i Sekunden",5);
    2d5e:	1f 92       	push	r1
    2d60:	85 e0       	ldi	r24, 0x05	; 5
    2d62:	8f 93       	push	r24
    2d64:	84 e4       	ldi	r24, 0x44	; 68
    2d66:	92 e0       	ldi	r25, 0x02	; 2
    2d68:	9f 93       	push	r25
    2d6a:	8f 93       	push	r24
    2d6c:	ff 92       	push	r15
    2d6e:	ef 92       	push	r14
    2d70:	0e 94 a1 22 	call	0x4542	; 0x4542 <sprintf>
    2d74:	8e 8b       	std	Y+22, r24	; 0x16
				for (uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize,5*charhighte);}
    2d76:	0f 90       	pop	r0
    2d78:	0f 90       	pop	r0
    2d7a:	0f 90       	pop	r0
    2d7c:	0f 90       	pop	r0
    2d7e:	0f 90       	pop	r0
    2d80:	0f 90       	pop	r0
    2d82:	88 23       	and	r24, r24
    2d84:	09 f4       	brne	.+2      	; 0x2d88 <_ZN13einstellungen4drawEv+0x27c>
    2d86:	59 c0       	rjmp	.+178    	; 0x2e3a <_ZN13einstellungen4drawEv+0x32e>
    2d88:	00 e0       	ldi	r16, 0x00	; 0
    2d8a:	10 e0       	ldi	r17, 0x00	; 0
    2d8c:	fe 01       	movw	r30, r28
    2d8e:	e1 0f       	add	r30, r17
    2d90:	f1 1d       	adc	r31, r1
    2d92:	28 e2       	ldi	r18, 0x28	; 40
    2d94:	40 2f       	mov	r20, r16
    2d96:	62 81       	ldd	r22, Z+2	; 0x02
    2d98:	8f 89       	ldd	r24, Y+23	; 0x17
    2d9a:	98 8d       	ldd	r25, Y+24	; 0x18
    2d9c:	0e 94 d6 03 	call	0x7ac	; 0x7ac <_ZN7Display9draw_ASCIEhhh>
    2da0:	1f 5f       	subi	r17, 0xFF	; 255
    2da2:	0a 5f       	subi	r16, 0xFA	; 250
    2da4:	8e 89       	ldd	r24, Y+22	; 0x16
    2da6:	18 17       	cp	r17, r24
    2da8:	88 f3       	brcs	.-30     	; 0x2d8c <_ZN13einstellungen4drawEv+0x280>
    2daa:	47 c0       	rjmp	.+142    	; 0x2e3a <_ZN13einstellungen4drawEv+0x32e>
			else if (5==0)
			{
				posx--;
			}
		}
		else if (posy==2 && posx==1)
    2dac:	92 30       	cpi	r25, 0x02	; 2
    2dae:	b1 f5       	brne	.+108    	; 0x2e1c <_ZN13einstellungen4drawEv+0x310>
    2db0:	81 30       	cpi	r24, 0x01	; 1
    2db2:	09 f0       	breq	.+2      	; 0x2db6 <_ZN13einstellungen4drawEv+0x2aa>
    2db4:	42 c0       	rjmp	.+132    	; 0x2e3a <_ZN13einstellungen4drawEv+0x32e>
		{
			buffersize=sprintf(buffer,"Version: %.2f",(double)VERSIONSNUMMER);
    2db6:	80 e4       	ldi	r24, 0x40	; 64
    2db8:	8f 93       	push	r24
    2dba:	8f 93       	push	r24
    2dbc:	83 ea       	ldi	r24, 0xA3	; 163
    2dbe:	8f 93       	push	r24
    2dc0:	87 ed       	ldi	r24, 0xD7	; 215
    2dc2:	8f 93       	push	r24
    2dc4:	84 e2       	ldi	r24, 0x24	; 36
    2dc6:	91 e0       	ldi	r25, 0x01	; 1
    2dc8:	9f 93       	push	r25
    2dca:	8f 93       	push	r24
    2dcc:	ff 92       	push	r15
    2dce:	ef 92       	push	r14
    2dd0:	0e 94 a1 22 	call	0x4542	; 0x4542 <sprintf>
    2dd4:	8e 8b       	std	Y+22, r24	; 0x16
			for(uint8_t i=0; i < buffersize;i++){
    2dd6:	2d b7       	in	r18, 0x3d	; 61
    2dd8:	3e b7       	in	r19, 0x3e	; 62
    2dda:	28 5f       	subi	r18, 0xF8	; 248
    2ddc:	3f 4f       	sbci	r19, 0xFF	; 255
    2dde:	0f b6       	in	r0, 0x3f	; 63
    2de0:	f8 94       	cli
    2de2:	3e bf       	out	0x3e, r19	; 62
    2de4:	0f be       	out	0x3f, r0	; 63
    2de6:	2d bf       	out	0x3d, r18	; 61
    2de8:	88 23       	and	r24, r24
    2dea:	39 f1       	breq	.+78     	; 0x2e3a <_ZN13einstellungen4drawEv+0x32e>
    2dec:	10 e0       	ldi	r17, 0x00	; 0
				oled->draw_ASCI(buffer[i],(i+2)*charsize,3.5*charhighte);
    2dee:	21 2f       	mov	r18, r17
    2df0:	30 e0       	ldi	r19, 0x00	; 0
    2df2:	c9 01       	movw	r24, r18
    2df4:	02 96       	adiw	r24, 0x02	; 2
    2df6:	48 2f       	mov	r20, r24
    2df8:	44 0f       	add	r20, r20
    2dfa:	84 0f       	add	r24, r20
    2dfc:	48 2f       	mov	r20, r24
    2dfe:	44 0f       	add	r20, r20
    2e00:	fe 01       	movw	r30, r28
    2e02:	e2 0f       	add	r30, r18
    2e04:	f3 1f       	adc	r31, r19
    2e06:	2c e1       	ldi	r18, 0x1C	; 28
    2e08:	62 81       	ldd	r22, Z+2	; 0x02
    2e0a:	8f 89       	ldd	r24, Y+23	; 0x17
    2e0c:	98 8d       	ldd	r25, Y+24	; 0x18
    2e0e:	0e 94 d6 03 	call	0x7ac	; 0x7ac <_ZN7Display9draw_ASCIEhhh>
			}
		}
		else if (posy==2 && posx==1)
		{
			buffersize=sprintf(buffer,"Version: %.2f",(double)VERSIONSNUMMER);
			for(uint8_t i=0; i < buffersize;i++){
    2e12:	1f 5f       	subi	r17, 0xFF	; 255
    2e14:	8e 89       	ldd	r24, Y+22	; 0x16
    2e16:	18 17       	cp	r17, r24
    2e18:	50 f3       	brcs	.-44     	; 0x2dee <_ZN13einstellungen4drawEv+0x2e2>
    2e1a:	0f c0       	rjmp	.+30     	; 0x2e3a <_ZN13einstellungen4drawEv+0x32e>
				oled->draw_ASCI(buffer[i],(i+2)*charsize,3.5*charhighte);

			}
		}
		else if (posy==3 && posx==1)
    2e1c:	93 30       	cpi	r25, 0x03	; 3
    2e1e:	69 f4       	brne	.+26     	; 0x2e3a <_ZN13einstellungen4drawEv+0x32e>
    2e20:	81 30       	cpi	r24, 0x01	; 1
    2e22:	59 f4       	brne	.+22     	; 0x2e3a <_ZN13einstellungen4drawEv+0x32e>
				: "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
				"r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
				"r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
						_BV(WDE) | (value & 0x07)) )
				: "r0"
		);
    2e24:	98 e0       	ldi	r25, 0x08	; 8
    2e26:	88 e1       	ldi	r24, 0x18	; 24
    2e28:	0f b6       	in	r0, 0x3f	; 63
    2e2a:	f8 94       	cli
    2e2c:	a8 95       	wdr
    2e2e:	80 93 60 00 	sts	0x0060, r24
    2e32:	0f be       	out	0x3f, r0	; 63
    2e34:	90 93 60 00 	sts	0x0060, r25
    2e38:	ff cf       	rjmp	.-2      	; 0x2e38 <_ZN13einstellungen4drawEv+0x32c>
		oled->clearFrame();
	}

	//send the frame to the display
	void send(){
		oled->sendFrame();	
    2e3a:	8f 89       	ldd	r24, Y+23	; 0x17
    2e3c:	98 8d       	ldd	r25, Y+24	; 0x18
    2e3e:	0e 94 38 03 	call	0x670	; 0x670 <_ZN7Display9sendFrameEv>
    2e42:	04 c0       	rjmp	.+8      	; 0x2e4c <_ZN13einstellungen4drawEv+0x340>
		return 0;
	}
	
	//drawfunktion
	virtual void draw(){
		oled->clearFrame();
    2e44:	10 e5       	ldi	r17, 0x50	; 80
    2e46:	c1 2c       	mov	r12, r1
    2e48:	d1 2c       	mov	r13, r1
    2e4a:	b8 ce       	rjmp	.-656    	; 0x2bbc <_ZN13einstellungen4drawEv+0xb0>
		else if (posy==3 && posx==1)
		{
			soft_reset();
		}
		send();	
	}
    2e4c:	df 91       	pop	r29
    2e4e:	cf 91       	pop	r28
    2e50:	1f 91       	pop	r17
    2e52:	0f 91       	pop	r16
    2e54:	ff 90       	pop	r15
    2e56:	ef 90       	pop	r14
    2e58:	df 90       	pop	r13
    2e5a:	cf 90       	pop	r12
    2e5c:	08 95       	ret

00002e5e <_GLOBAL__sub_I__Z8wdt_initv>:
{
	free(ptr);
}

#include "RTC.h"
RTC rtc;
    2e5e:	87 eb       	ldi	r24, 0xB7	; 183
    2e60:	97 e0       	ldi	r25, 0x07	; 7
    2e62:	c3 d1       	rcall	.+902    	; 0x31ea <_ZN3RTCC1Ev>

#include "Display.h"
Display oled;
    2e64:	86 eb       	ldi	r24, 0xB6	; 182
    2e66:	93 e0       	ldi	r25, 0x03	; 3
    2e68:	0e 94 2c 03 	call	0x658	; 0x658 <_ZN7DisplayC1Ev>

#include "Interface.h"
Interface Tastatur;
    2e6c:	8a ea       	ldi	r24, 0xAA	; 170
    2e6e:	93 e0       	ldi	r25, 0x03	; 3
    2e70:	0e 94 30 07 	call	0xe60	; 0xe60 <_ZN9InterfaceC1Ev>

#include "SOUND.h"
SOUND Lautsprecher;
    2e74:	88 ea       	ldi	r24, 0xA8	; 168
    2e76:	93 e0       	ldi	r25, 0x03	; 3
    2e78:	aa d2       	rcall	.+1364   	; 0x33ce <_ZN5SOUNDC1Ev>

#include "LSM303D.h"
LSM303D Accelerometer;
    2e7a:	8f eb       	ldi	r24, 0xBF	; 191
    2e7c:	92 e0       	ldi	r25, 0x02	; 2
    2e7e:	0e 94 b7 08 	call	0x116e	; 0x116e <_ZN7LSM303DC1Ev>

#include "Kompass.h"
Kompass kompass;
    2e82:	86 ea       	ldi	r24, 0xA6	; 166
    2e84:	92 e0       	ldi	r25, 0x02	; 2
    2e86:	0e 94 63 08 	call	0x10c6	; 0x10c6 <_ZN7KompassC1Ev>

#include "ADC.h"

#include "Output.h"
Output LED('B',PORTB1);
    2e8a:	41 e0       	ldi	r20, 0x01	; 1
    2e8c:	62 e4       	ldi	r22, 0x42	; 66
    2e8e:	80 ea       	ldi	r24, 0xA0	; 160
    2e90:	92 e0       	ldi	r25, 0x02	; 2
    2e92:	33 d0       	rcall	.+102    	; 0x2efa <_ZN6OutputC1Ehh>
Output Vibrationsmotor('B',PORTB2);
    2e94:	42 e0       	ldi	r20, 0x02	; 2
    2e96:	62 e4       	ldi	r22, 0x42	; 66
    2e98:	8e e9       	ldi	r24, 0x9E	; 158
    2e9a:	92 e0       	ldi	r25, 0x02	; 2
    2e9c:	2e d0       	rcall	.+92     	; 0x2efa <_ZN6OutputC1Ehh>
Output IRLED('D',PORTD7);
    2e9e:	47 e0       	ldi	r20, 0x07	; 7
    2ea0:	64 e4       	ldi	r22, 0x44	; 68
    2ea2:	8c e9       	ldi	r24, 0x9C	; 156
    2ea4:	92 e0       	ldi	r25, 0x02	; 2
    2ea6:	29 d0       	rcall	.+82     	; 0x2efa <_ZN6OutputC1Ehh>
Output Sound('B',PORTB3);
    2ea8:	43 e0       	ldi	r20, 0x03	; 3
    2eaa:	62 e4       	ldi	r22, 0x42	; 66
    2eac:	8a e9       	ldi	r24, 0x9A	; 154
    2eae:	92 e0       	ldi	r25, 0x02	; 2
    2eb0:	24 c0       	rjmp	.+72     	; 0x2efa <_ZN6OutputC1Ehh>
    2eb2:	08 95       	ret

00002eb4 <_GLOBAL__sub_D__Z8wdt_initv>:
    2eb4:	8a e9       	ldi	r24, 0x9A	; 154
    2eb6:	92 e0       	ldi	r25, 0x02	; 2
    2eb8:	5a d0       	rcall	.+180    	; 0x2f6e <_ZN6OutputD1Ev>
#include "ADC.h"

#include "Output.h"
Output LED('B',PORTB1);
Output Vibrationsmotor('B',PORTB2);
Output IRLED('D',PORTD7);
    2eba:	8c e9       	ldi	r24, 0x9C	; 156
    2ebc:	92 e0       	ldi	r25, 0x02	; 2
    2ebe:	57 d0       	rcall	.+174    	; 0x2f6e <_ZN6OutputD1Ev>

#include "ADC.h"

#include "Output.h"
Output LED('B',PORTB1);
Output Vibrationsmotor('B',PORTB2);
    2ec0:	8e e9       	ldi	r24, 0x9E	; 158
    2ec2:	92 e0       	ldi	r25, 0x02	; 2
    2ec4:	54 d0       	rcall	.+168    	; 0x2f6e <_ZN6OutputD1Ev>
Kompass kompass;

#include "ADC.h"

#include "Output.h"
Output LED('B',PORTB1);
    2ec6:	80 ea       	ldi	r24, 0xA0	; 160
    2ec8:	92 e0       	ldi	r25, 0x02	; 2
    2eca:	51 d0       	rcall	.+162    	; 0x2f6e <_ZN6OutputD1Ev>

#include "LSM303D.h"
LSM303D Accelerometer;

#include "Kompass.h"
Kompass kompass;
    2ecc:	86 ea       	ldi	r24, 0xA6	; 166
    2ece:	92 e0       	ldi	r25, 0x02	; 2
    2ed0:	0e 94 46 08 	call	0x108c	; 0x108c <_ZN7KompassD1Ev>

#include "SOUND.h"
SOUND Lautsprecher;

#include "LSM303D.h"
LSM303D Accelerometer;
    2ed4:	8f eb       	ldi	r24, 0xBF	; 191
    2ed6:	92 e0       	ldi	r25, 0x02	; 2
    2ed8:	0e 94 83 08 	call	0x1106	; 0x1106 <_ZN7LSM303DD1Ev>

#include "Interface.h"
Interface Tastatur;

#include "SOUND.h"
SOUND Lautsprecher;
    2edc:	88 ea       	ldi	r24, 0xA8	; 168
    2ede:	93 e0       	ldi	r25, 0x03	; 3
    2ee0:	4c d2       	rcall	.+1176   	; 0x337a <_ZN5SOUNDD1Ev>

#include "Display.h"
Display oled;

#include "Interface.h"
Interface Tastatur;
    2ee2:	8a ea       	ldi	r24, 0xAA	; 170
    2ee4:	93 e0       	ldi	r25, 0x03	; 3
    2ee6:	0e 94 43 07 	call	0xe86	; 0xe86 <_ZN9InterfaceD1Ev>

#include "RTC.h"
RTC rtc;

#include "Display.h"
Display oled;
    2eea:	86 eb       	ldi	r24, 0xB6	; 182
    2eec:	93 e0       	ldi	r25, 0x03	; 3
    2eee:	0e 94 bb 02 	call	0x576	; 0x576 <_ZN7DisplayD1Ev>
{
	free(ptr);
}

#include "RTC.h"
RTC rtc;
    2ef2:	87 eb       	ldi	r24, 0xB7	; 183
    2ef4:	97 e0       	ldi	r25, 0x07	; 7
    2ef6:	f5 c0       	rjmp	.+490    	; 0x30e2 <_ZN3RTCD1Ev>
    2ef8:	08 95       	ret

00002efa <_ZN6OutputC1Ehh>:
#include "Output.h"

// default constructor
Output::Output(uint8_t Portpraefix, uint8_t Pinnumber)
{
	Pin=Pinnumber;
    2efa:	fc 01       	movw	r30, r24
    2efc:	41 83       	std	Z+1, r20	; 0x01
	Port=Portpraefix;
    2efe:	60 83       	st	Z, r22
	switch (Portpraefix)
    2f00:	62 34       	cpi	r22, 0x42	; 66
    2f02:	a1 f0       	breq	.+40     	; 0x2f2c <_ZN6OutputC1Ehh+0x32>
    2f04:	18 f4       	brcc	.+6      	; 0x2f0c <_ZN6OutputC1Ehh+0x12>
    2f06:	61 34       	cpi	r22, 0x41	; 65
    2f08:	31 f0       	breq	.+12     	; 0x2f16 <_ZN6OutputC1Ehh+0x1c>
    2f0a:	08 95       	ret
    2f0c:	63 34       	cpi	r22, 0x43	; 67
    2f0e:	c9 f0       	breq	.+50     	; 0x2f42 <_ZN6OutputC1Ehh+0x48>
    2f10:	64 34       	cpi	r22, 0x44	; 68
    2f12:	11 f1       	breq	.+68     	; 0x2f58 <_ZN6OutputC1Ehh+0x5e>
    2f14:	08 95       	ret
	{
		case 'A':
			DDRA |= (1<<Pin);
    2f16:	21 b1       	in	r18, 0x01	; 1
    2f18:	81 e0       	ldi	r24, 0x01	; 1
    2f1a:	90 e0       	ldi	r25, 0x00	; 0
    2f1c:	02 c0       	rjmp	.+4      	; 0x2f22 <_ZN6OutputC1Ehh+0x28>
    2f1e:	88 0f       	add	r24, r24
    2f20:	99 1f       	adc	r25, r25
    2f22:	4a 95       	dec	r20
    2f24:	e2 f7       	brpl	.-8      	; 0x2f1e <_ZN6OutputC1Ehh+0x24>
    2f26:	82 2b       	or	r24, r18
    2f28:	81 b9       	out	0x01, r24	; 1
			break;
    2f2a:	08 95       	ret
		case 'B':
			DDRB |= (1<<Pin);
    2f2c:	24 b1       	in	r18, 0x04	; 4
    2f2e:	81 e0       	ldi	r24, 0x01	; 1
    2f30:	90 e0       	ldi	r25, 0x00	; 0
    2f32:	02 c0       	rjmp	.+4      	; 0x2f38 <_ZN6OutputC1Ehh+0x3e>
    2f34:	88 0f       	add	r24, r24
    2f36:	99 1f       	adc	r25, r25
    2f38:	4a 95       	dec	r20
    2f3a:	e2 f7       	brpl	.-8      	; 0x2f34 <_ZN6OutputC1Ehh+0x3a>
    2f3c:	82 2b       	or	r24, r18
    2f3e:	84 b9       	out	0x04, r24	; 4
			break;
    2f40:	08 95       	ret
		case 'C':
			DDRC |= (1<<Pin);
    2f42:	27 b1       	in	r18, 0x07	; 7
    2f44:	81 e0       	ldi	r24, 0x01	; 1
    2f46:	90 e0       	ldi	r25, 0x00	; 0
    2f48:	02 c0       	rjmp	.+4      	; 0x2f4e <_ZN6OutputC1Ehh+0x54>
    2f4a:	88 0f       	add	r24, r24
    2f4c:	99 1f       	adc	r25, r25
    2f4e:	4a 95       	dec	r20
    2f50:	e2 f7       	brpl	.-8      	; 0x2f4a <_ZN6OutputC1Ehh+0x50>
    2f52:	82 2b       	or	r24, r18
    2f54:	87 b9       	out	0x07, r24	; 7
			break;
    2f56:	08 95       	ret
		case 'D':
			DDRD |= (1<<Pin);
    2f58:	2a b1       	in	r18, 0x0a	; 10
    2f5a:	81 e0       	ldi	r24, 0x01	; 1
    2f5c:	90 e0       	ldi	r25, 0x00	; 0
    2f5e:	02 c0       	rjmp	.+4      	; 0x2f64 <_ZN6OutputC1Ehh+0x6a>
    2f60:	88 0f       	add	r24, r24
    2f62:	99 1f       	adc	r25, r25
    2f64:	4a 95       	dec	r20
    2f66:	e2 f7       	brpl	.-8      	; 0x2f60 <_ZN6OutputC1Ehh+0x66>
    2f68:	82 2b       	or	r24, r18
    2f6a:	8a b9       	out	0x0a, r24	; 10
    2f6c:	08 95       	ret

00002f6e <_ZN6OutputD1Ev>:
			break;
	}
} //Output

// default destructor
Output::~Output()
    2f6e:	08 95       	ret

00002f70 <_ZN6Output2onEv>:
{
} //~Output

void Output::on(){
    2f70:	fc 01       	movw	r30, r24
	switch (Port)
    2f72:	90 81       	ld	r25, Z
    2f74:	92 34       	cpi	r25, 0x42	; 66
    2f76:	a9 f0       	breq	.+42     	; 0x2fa2 <_ZN6Output2onEv+0x32>
    2f78:	18 f4       	brcc	.+6      	; 0x2f80 <_ZN6Output2onEv+0x10>
    2f7a:	91 34       	cpi	r25, 0x41	; 65
    2f7c:	31 f0       	breq	.+12     	; 0x2f8a <_ZN6Output2onEv+0x1a>
    2f7e:	08 95       	ret
    2f80:	93 34       	cpi	r25, 0x43	; 67
    2f82:	d9 f0       	breq	.+54     	; 0x2fba <_ZN6Output2onEv+0x4a>
    2f84:	94 34       	cpi	r25, 0x44	; 68
    2f86:	29 f1       	breq	.+74     	; 0x2fd2 <_ZN6Output2onEv+0x62>
    2f88:	08 95       	ret
	{
		case 'A':
			PORTA |= (1<<Pin);
    2f8a:	22 b1       	in	r18, 0x02	; 2
    2f8c:	81 e0       	ldi	r24, 0x01	; 1
    2f8e:	90 e0       	ldi	r25, 0x00	; 0
    2f90:	01 80       	ldd	r0, Z+1	; 0x01
    2f92:	02 c0       	rjmp	.+4      	; 0x2f98 <_ZN6Output2onEv+0x28>
    2f94:	88 0f       	add	r24, r24
    2f96:	99 1f       	adc	r25, r25
    2f98:	0a 94       	dec	r0
    2f9a:	e2 f7       	brpl	.-8      	; 0x2f94 <_ZN6Output2onEv+0x24>
    2f9c:	82 2b       	or	r24, r18
    2f9e:	82 b9       	out	0x02, r24	; 2
			break;
    2fa0:	08 95       	ret
		case 'B':
			PORTB |= (1<<Pin);
    2fa2:	25 b1       	in	r18, 0x05	; 5
    2fa4:	81 e0       	ldi	r24, 0x01	; 1
    2fa6:	90 e0       	ldi	r25, 0x00	; 0
    2fa8:	01 80       	ldd	r0, Z+1	; 0x01
    2faa:	02 c0       	rjmp	.+4      	; 0x2fb0 <_ZN6Output2onEv+0x40>
    2fac:	88 0f       	add	r24, r24
    2fae:	99 1f       	adc	r25, r25
    2fb0:	0a 94       	dec	r0
    2fb2:	e2 f7       	brpl	.-8      	; 0x2fac <_ZN6Output2onEv+0x3c>
    2fb4:	82 2b       	or	r24, r18
    2fb6:	85 b9       	out	0x05, r24	; 5
			break;
    2fb8:	08 95       	ret
		case 'C':
			PORTC |= (1<<Pin);
    2fba:	28 b1       	in	r18, 0x08	; 8
    2fbc:	81 e0       	ldi	r24, 0x01	; 1
    2fbe:	90 e0       	ldi	r25, 0x00	; 0
    2fc0:	01 80       	ldd	r0, Z+1	; 0x01
    2fc2:	02 c0       	rjmp	.+4      	; 0x2fc8 <_ZN6Output2onEv+0x58>
    2fc4:	88 0f       	add	r24, r24
    2fc6:	99 1f       	adc	r25, r25
    2fc8:	0a 94       	dec	r0
    2fca:	e2 f7       	brpl	.-8      	; 0x2fc4 <_ZN6Output2onEv+0x54>
    2fcc:	82 2b       	or	r24, r18
    2fce:	88 b9       	out	0x08, r24	; 8
			break;
    2fd0:	08 95       	ret
		case 'D':
			PORTD |= (1<<Pin);
    2fd2:	2b b1       	in	r18, 0x0b	; 11
    2fd4:	81 e0       	ldi	r24, 0x01	; 1
    2fd6:	90 e0       	ldi	r25, 0x00	; 0
    2fd8:	01 80       	ldd	r0, Z+1	; 0x01
    2fda:	02 c0       	rjmp	.+4      	; 0x2fe0 <_ZN6Output2onEv+0x70>
    2fdc:	88 0f       	add	r24, r24
    2fde:	99 1f       	adc	r25, r25
    2fe0:	0a 94       	dec	r0
    2fe2:	e2 f7       	brpl	.-8      	; 0x2fdc <_ZN6Output2onEv+0x6c>
    2fe4:	82 2b       	or	r24, r18
    2fe6:	8b b9       	out	0x0b, r24	; 11
    2fe8:	08 95       	ret

00002fea <_ZN6Output4isonEv>:
		default:
			break;
	}
}

uint8_t Output::ison(){
    2fea:	fc 01       	movw	r30, r24
	uint8_t returnparam=0;
	switch (Port)
    2fec:	90 81       	ld	r25, Z
    2fee:	92 34       	cpi	r25, 0x42	; 66
    2ff0:	a1 f0       	breq	.+40     	; 0x301a <_ZN6Output4isonEv+0x30>
    2ff2:	18 f4       	brcc	.+6      	; 0x2ffa <_ZN6Output4isonEv+0x10>
    2ff4:	91 34       	cpi	r25, 0x41	; 65
    2ff6:	31 f0       	breq	.+12     	; 0x3004 <_ZN6Output4isonEv+0x1a>
    2ff8:	31 c0       	rjmp	.+98     	; 0x305c <_ZN6Output4isonEv+0x72>
    2ffa:	93 34       	cpi	r25, 0x43	; 67
    2ffc:	c9 f0       	breq	.+50     	; 0x3030 <_ZN6Output4isonEv+0x46>
    2ffe:	94 34       	cpi	r25, 0x44	; 68
    3000:	11 f1       	breq	.+68     	; 0x3046 <_ZN6Output4isonEv+0x5c>
    3002:	2c c0       	rjmp	.+88     	; 0x305c <_ZN6Output4isonEv+0x72>
	{
		case 'A':
			if ((PORTA&(1<<Pin)))
    3004:	22 b1       	in	r18, 0x02	; 2
    3006:	30 e0       	ldi	r19, 0x00	; 0
    3008:	c9 01       	movw	r24, r18
    300a:	01 80       	ldd	r0, Z+1	; 0x01
    300c:	02 c0       	rjmp	.+4      	; 0x3012 <_ZN6Output4isonEv+0x28>
    300e:	95 95       	asr	r25
    3010:	87 95       	ror	r24
    3012:	0a 94       	dec	r0
    3014:	e2 f7       	brpl	.-8      	; 0x300e <_ZN6Output4isonEv+0x24>
    3016:	81 70       	andi	r24, 0x01	; 1
    3018:	08 95       	ret
			{
				returnparam = 1;
			}
			break;
		case 'B':
			if ((PORTB&(1<<Pin)))
    301a:	25 b1       	in	r18, 0x05	; 5
    301c:	30 e0       	ldi	r19, 0x00	; 0
    301e:	c9 01       	movw	r24, r18
    3020:	01 80       	ldd	r0, Z+1	; 0x01
    3022:	02 c0       	rjmp	.+4      	; 0x3028 <_ZN6Output4isonEv+0x3e>
    3024:	95 95       	asr	r25
    3026:	87 95       	ror	r24
    3028:	0a 94       	dec	r0
    302a:	e2 f7       	brpl	.-8      	; 0x3024 <_ZN6Output4isonEv+0x3a>
    302c:	81 70       	andi	r24, 0x01	; 1
    302e:	08 95       	ret
			{
				returnparam = 1;
			}
			break;
		case 'C':
			if ((PORTC&(1<<Pin)))
    3030:	28 b1       	in	r18, 0x08	; 8
    3032:	30 e0       	ldi	r19, 0x00	; 0
    3034:	c9 01       	movw	r24, r18
    3036:	01 80       	ldd	r0, Z+1	; 0x01
    3038:	02 c0       	rjmp	.+4      	; 0x303e <_ZN6Output4isonEv+0x54>
    303a:	95 95       	asr	r25
    303c:	87 95       	ror	r24
    303e:	0a 94       	dec	r0
    3040:	e2 f7       	brpl	.-8      	; 0x303a <_ZN6Output4isonEv+0x50>
    3042:	81 70       	andi	r24, 0x01	; 1
    3044:	08 95       	ret
			{
				returnparam = 1;
			}
			break;
		case 'D':
			if ((PORTD&(1<<Pin)))
    3046:	2b b1       	in	r18, 0x0b	; 11
    3048:	30 e0       	ldi	r19, 0x00	; 0
    304a:	c9 01       	movw	r24, r18
    304c:	01 80       	ldd	r0, Z+1	; 0x01
    304e:	02 c0       	rjmp	.+4      	; 0x3054 <_ZN6Output4isonEv+0x6a>
    3050:	95 95       	asr	r25
    3052:	87 95       	ror	r24
    3054:	0a 94       	dec	r0
    3056:	e2 f7       	brpl	.-8      	; 0x3050 <_ZN6Output4isonEv+0x66>
    3058:	81 70       	andi	r24, 0x01	; 1
    305a:	08 95       	ret
			{
				returnparam = 1;
			}
			break;
		default:
		returnparam = 2;
    305c:	82 e0       	ldi	r24, 0x02	; 2
			break;
	}
	return returnparam;
}
    305e:	08 95       	ret

00003060 <_ZN6Output3offEv>:

void Output::off(){
    3060:	fc 01       	movw	r30, r24
	switch (Port)
    3062:	90 81       	ld	r25, Z
    3064:	92 34       	cpi	r25, 0x42	; 66
    3066:	b1 f0       	breq	.+44     	; 0x3094 <_ZN6Output3offEv+0x34>
    3068:	18 f4       	brcc	.+6      	; 0x3070 <_ZN6Output3offEv+0x10>
    306a:	91 34       	cpi	r25, 0x41	; 65
    306c:	31 f0       	breq	.+12     	; 0x307a <_ZN6Output3offEv+0x1a>
    306e:	08 95       	ret
    3070:	93 34       	cpi	r25, 0x43	; 67
    3072:	e9 f0       	breq	.+58     	; 0x30ae <_ZN6Output3offEv+0x4e>
    3074:	94 34       	cpi	r25, 0x44	; 68
    3076:	41 f1       	breq	.+80     	; 0x30c8 <_ZN6Output3offEv+0x68>
    3078:	08 95       	ret
	{
		case 'A':
			PORTA &= ~(1<<Pin);
    307a:	22 b1       	in	r18, 0x02	; 2
    307c:	81 e0       	ldi	r24, 0x01	; 1
    307e:	90 e0       	ldi	r25, 0x00	; 0
    3080:	01 80       	ldd	r0, Z+1	; 0x01
    3082:	02 c0       	rjmp	.+4      	; 0x3088 <_ZN6Output3offEv+0x28>
    3084:	88 0f       	add	r24, r24
    3086:	99 1f       	adc	r25, r25
    3088:	0a 94       	dec	r0
    308a:	e2 f7       	brpl	.-8      	; 0x3084 <_ZN6Output3offEv+0x24>
    308c:	80 95       	com	r24
    308e:	82 23       	and	r24, r18
    3090:	82 b9       	out	0x02, r24	; 2
			break;
    3092:	08 95       	ret
		case 'B':
			PORTB &= ~(1<<Pin);
    3094:	25 b1       	in	r18, 0x05	; 5
    3096:	81 e0       	ldi	r24, 0x01	; 1
    3098:	90 e0       	ldi	r25, 0x00	; 0
    309a:	01 80       	ldd	r0, Z+1	; 0x01
    309c:	02 c0       	rjmp	.+4      	; 0x30a2 <_ZN6Output3offEv+0x42>
    309e:	88 0f       	add	r24, r24
    30a0:	99 1f       	adc	r25, r25
    30a2:	0a 94       	dec	r0
    30a4:	e2 f7       	brpl	.-8      	; 0x309e <_ZN6Output3offEv+0x3e>
    30a6:	80 95       	com	r24
    30a8:	82 23       	and	r24, r18
    30aa:	85 b9       	out	0x05, r24	; 5
			break;
    30ac:	08 95       	ret
		case 'C':
			PORTC &= ~(1<<Pin);
    30ae:	28 b1       	in	r18, 0x08	; 8
    30b0:	81 e0       	ldi	r24, 0x01	; 1
    30b2:	90 e0       	ldi	r25, 0x00	; 0
    30b4:	01 80       	ldd	r0, Z+1	; 0x01
    30b6:	02 c0       	rjmp	.+4      	; 0x30bc <_ZN6Output3offEv+0x5c>
    30b8:	88 0f       	add	r24, r24
    30ba:	99 1f       	adc	r25, r25
    30bc:	0a 94       	dec	r0
    30be:	e2 f7       	brpl	.-8      	; 0x30b8 <_ZN6Output3offEv+0x58>
    30c0:	80 95       	com	r24
    30c2:	82 23       	and	r24, r18
    30c4:	88 b9       	out	0x08, r24	; 8
			break;
    30c6:	08 95       	ret
		case 'D':
			PORTD &= ~(1<<Pin);
    30c8:	2b b1       	in	r18, 0x0b	; 11
    30ca:	81 e0       	ldi	r24, 0x01	; 1
    30cc:	90 e0       	ldi	r25, 0x00	; 0
    30ce:	01 80       	ldd	r0, Z+1	; 0x01
    30d0:	02 c0       	rjmp	.+4      	; 0x30d6 <_ZN6Output3offEv+0x76>
    30d2:	88 0f       	add	r24, r24
    30d4:	99 1f       	adc	r25, r25
    30d6:	0a 94       	dec	r0
    30d8:	e2 f7       	brpl	.-8      	; 0x30d2 <_ZN6Output3offEv+0x72>
    30da:	80 95       	com	r24
    30dc:	82 23       	and	r24, r18
    30de:	8b b9       	out	0x0b, r24	; 11
    30e0:	08 95       	ret

000030e2 <_ZN3RTCD1Ev>:
	Tag=7;
	Monat=9;
	Jahr=15;
	ausgabedatumneu();
	ausgabezeitneu();
}
    30e2:	08 95       	ret

000030e4 <_ZN3RTC6WeckerEv>:
    30e4:	fc 01       	movw	r30, r24
    30e6:	80 8d       	ldd	r24, Z+24	; 0x18
    30e8:	83 ff       	sbrs	r24, 3
    30ea:	0c c0       	rjmp	.+24     	; 0x3104 <_ZN3RTC6WeckerEv+0x20>
    30ec:	84 fd       	sbrc	r24, 4
    30ee:	0a c0       	rjmp	.+20     	; 0x3104 <_ZN3RTC6WeckerEv+0x20>
    30f0:	22 8d       	ldd	r18, Z+26	; 0x1a
    30f2:	90 89       	ldd	r25, Z+16	; 0x10
    30f4:	29 13       	cpse	r18, r25
    30f6:	06 c0       	rjmp	.+12     	; 0x3104 <_ZN3RTC6WeckerEv+0x20>
    30f8:	21 8d       	ldd	r18, Z+25	; 0x19
    30fa:	91 89       	ldd	r25, Z+17	; 0x11
    30fc:	29 13       	cpse	r18, r25
    30fe:	02 c0       	rjmp	.+4      	; 0x3104 <_ZN3RTC6WeckerEv+0x20>
    3100:	80 61       	ori	r24, 0x10	; 16
    3102:	80 8f       	std	Z+24, r24	; 0x18
    3104:	08 95       	ret

00003106 <_ZN3RTC14ausgabezeitneuEv>:
    3106:	fc 01       	movw	r30, r24
    3108:	20 89       	ldd	r18, Z+16	; 0x10
    310a:	9d ec       	ldi	r25, 0xCD	; 205
    310c:	29 9f       	mul	r18, r25
    310e:	81 2d       	mov	r24, r1
    3110:	11 24       	eor	r1, r1
    3112:	86 95       	lsr	r24
    3114:	86 95       	lsr	r24
    3116:	86 95       	lsr	r24
    3118:	30 e3       	ldi	r19, 0x30	; 48
    311a:	38 0f       	add	r19, r24
    311c:	30 83       	st	Z, r19
    311e:	88 0f       	add	r24, r24
    3120:	38 2f       	mov	r19, r24
    3122:	33 0f       	add	r19, r19
    3124:	33 0f       	add	r19, r19
    3126:	83 0f       	add	r24, r19
    3128:	28 1b       	sub	r18, r24
    312a:	20 5d       	subi	r18, 0xD0	; 208
    312c:	21 83       	std	Z+1, r18	; 0x01
    312e:	21 89       	ldd	r18, Z+17	; 0x11
    3130:	29 9f       	mul	r18, r25
    3132:	81 2d       	mov	r24, r1
    3134:	11 24       	eor	r1, r1
    3136:	86 95       	lsr	r24
    3138:	86 95       	lsr	r24
    313a:	86 95       	lsr	r24
    313c:	30 e3       	ldi	r19, 0x30	; 48
    313e:	38 0f       	add	r19, r24
    3140:	33 83       	std	Z+3, r19	; 0x03
    3142:	88 0f       	add	r24, r24
    3144:	38 2f       	mov	r19, r24
    3146:	33 0f       	add	r19, r19
    3148:	33 0f       	add	r19, r19
    314a:	83 0f       	add	r24, r19
    314c:	28 1b       	sub	r18, r24
    314e:	20 5d       	subi	r18, 0xD0	; 208
    3150:	24 83       	std	Z+4, r18	; 0x04
    3152:	82 89       	ldd	r24, Z+18	; 0x12
    3154:	89 9f       	mul	r24, r25
    3156:	91 2d       	mov	r25, r1
    3158:	11 24       	eor	r1, r1
    315a:	96 95       	lsr	r25
    315c:	96 95       	lsr	r25
    315e:	96 95       	lsr	r25
    3160:	20 e3       	ldi	r18, 0x30	; 48
    3162:	29 0f       	add	r18, r25
    3164:	26 83       	std	Z+6, r18	; 0x06
    3166:	99 0f       	add	r25, r25
    3168:	29 2f       	mov	r18, r25
    316a:	22 0f       	add	r18, r18
    316c:	22 0f       	add	r18, r18
    316e:	92 0f       	add	r25, r18
    3170:	89 1b       	sub	r24, r25
    3172:	80 5d       	subi	r24, 0xD0	; 208
    3174:	87 83       	std	Z+7, r24	; 0x07
    3176:	08 95       	ret

00003178 <_ZN3RTC15ausgabedatumneuEv>:
    3178:	fc 01       	movw	r30, r24
    317a:	24 89       	ldd	r18, Z+20	; 0x14
    317c:	9d ec       	ldi	r25, 0xCD	; 205
    317e:	29 9f       	mul	r18, r25
    3180:	81 2d       	mov	r24, r1
    3182:	11 24       	eor	r1, r1
    3184:	86 95       	lsr	r24
    3186:	86 95       	lsr	r24
    3188:	86 95       	lsr	r24
    318a:	30 e3       	ldi	r19, 0x30	; 48
    318c:	38 0f       	add	r19, r24
    318e:	30 87       	std	Z+8, r19	; 0x08
    3190:	88 0f       	add	r24, r24
    3192:	38 2f       	mov	r19, r24
    3194:	33 0f       	add	r19, r19
    3196:	33 0f       	add	r19, r19
    3198:	83 0f       	add	r24, r19
    319a:	28 1b       	sub	r18, r24
    319c:	20 5d       	subi	r18, 0xD0	; 208
    319e:	21 87       	std	Z+9, r18	; 0x09
    31a0:	26 89       	ldd	r18, Z+22	; 0x16
    31a2:	29 9f       	mul	r18, r25
    31a4:	81 2d       	mov	r24, r1
    31a6:	11 24       	eor	r1, r1
    31a8:	86 95       	lsr	r24
    31aa:	86 95       	lsr	r24
    31ac:	86 95       	lsr	r24
    31ae:	30 e3       	ldi	r19, 0x30	; 48
    31b0:	38 0f       	add	r19, r24
    31b2:	33 87       	std	Z+11, r19	; 0x0b
    31b4:	88 0f       	add	r24, r24
    31b6:	38 2f       	mov	r19, r24
    31b8:	33 0f       	add	r19, r19
    31ba:	33 0f       	add	r19, r19
    31bc:	83 0f       	add	r24, r19
    31be:	28 1b       	sub	r18, r24
    31c0:	20 5d       	subi	r18, 0xD0	; 208
    31c2:	24 87       	std	Z+12, r18	; 0x0c
    31c4:	87 89       	ldd	r24, Z+23	; 0x17
    31c6:	89 9f       	mul	r24, r25
    31c8:	91 2d       	mov	r25, r1
    31ca:	11 24       	eor	r1, r1
    31cc:	96 95       	lsr	r25
    31ce:	96 95       	lsr	r25
    31d0:	96 95       	lsr	r25
    31d2:	20 e3       	ldi	r18, 0x30	; 48
    31d4:	29 0f       	add	r18, r25
    31d6:	26 87       	std	Z+14, r18	; 0x0e
    31d8:	99 0f       	add	r25, r25
    31da:	29 2f       	mov	r18, r25
    31dc:	22 0f       	add	r18, r18
    31de:	22 0f       	add	r18, r18
    31e0:	92 0f       	add	r25, r18
    31e2:	89 1b       	sub	r24, r25
    31e4:	80 5d       	subi	r24, 0xD0	; 208
    31e6:	87 87       	std	Z+15, r24	; 0x0f
    31e8:	08 95       	ret

000031ea <_ZN3RTCC1Ev>:
    31ea:	cf 93       	push	r28
    31ec:	df 93       	push	r29
    31ee:	ec 01       	movw	r28, r24
    31f0:	1a 8a       	std	Y+18, r1	; 0x12
    31f2:	1b 8a       	std	Y+19, r1	; 0x13
    31f4:	19 8a       	std	Y+17, r1	; 0x11
    31f6:	18 8a       	std	Y+16, r1	; 0x10
    31f8:	1c 8a       	std	Y+20, r1	; 0x14
    31fa:	1e 8a       	std	Y+22, r1	; 0x16
    31fc:	1f 8a       	std	Y+23, r1	; 0x17
    31fe:	1d 8a       	std	Y+21, r1	; 0x15
    3200:	88 e2       	ldi	r24, 0x28	; 40
    3202:	89 8f       	std	Y+25, r24	; 0x19
    3204:	8a e0       	ldi	r24, 0x0A	; 10
    3206:	8a 8f       	std	Y+26, r24	; 0x1a
    3208:	1c 8e       	std	Y+28, r1	; 0x1c
    320a:	1b 8e       	std	Y+27, r1	; 0x1b
    320c:	1e 8e       	std	Y+30, r1	; 0x1e
    320e:	1d 8e       	std	Y+29, r1	; 0x1d
    3210:	fe 01       	movw	r30, r28
    3212:	ce 01       	movw	r24, r28
    3214:	08 96       	adiw	r24, 0x08	; 8
    3216:	dc 01       	movw	r26, r24
    3218:	11 92       	st	Z+, r1
    321a:	1d 92       	st	X+, r1
    321c:	e8 17       	cp	r30, r24
    321e:	f9 07       	cpc	r31, r25
    3220:	d9 f7       	brne	.-10     	; 0x3218 <_ZN3RTCC1Ev+0x2e>
    3222:	8a e3       	ldi	r24, 0x3A	; 58
    3224:	8a 83       	std	Y+2, r24	; 0x02
    3226:	8d 83       	std	Y+5, r24	; 0x05
    3228:	8e e2       	ldi	r24, 0x2E	; 46
    322a:	8a 87       	std	Y+10, r24	; 0x0a
    322c:	8d 87       	std	Y+13, r24	; 0x0d
    322e:	ce 01       	movw	r24, r28
    3230:	6a df       	rcall	.-300    	; 0x3106 <_ZN3RTC14ausgabezeitneuEv>
    3232:	ce 01       	movw	r24, r28
    3234:	a1 df       	rcall	.-190    	; 0x3178 <_ZN3RTC15ausgabedatumneuEv>
    3236:	df 91       	pop	r29
    3238:	cf 91       	pop	r28
    323a:	08 95       	ret

0000323c <_ZN3RTC8kalenderEv>:
    323c:	fc 01       	movw	r30, r24
    323e:	26 89       	ldd	r18, Z+22	; 0x16
    3240:	32 2f       	mov	r19, r18
    3242:	3d 7f       	andi	r19, 0xFD	; 253
    3244:	34 30       	cpi	r19, 0x04	; 4
    3246:	11 f0       	breq	.+4      	; 0x324c <_ZN3RTC8kalenderEv+0x10>
    3248:	39 30       	cpi	r19, 0x09	; 9
    324a:	91 f4       	brne	.+36     	; 0x3270 <_ZN3RTC8kalenderEv+0x34>
    324c:	fc 01       	movw	r30, r24
    324e:	34 89       	ldd	r19, Z+20	; 0x14
    3250:	3f 31       	cpi	r19, 0x1F	; 31
    3252:	b0 f1       	brcs	.+108    	; 0x32c0 <_ZN3RTC8kalenderEv+0x84>
    3254:	31 e0       	ldi	r19, 0x01	; 1
    3256:	34 8b       	std	Z+20, r19	; 0x14
    3258:	2f 5f       	subi	r18, 0xFF	; 255
    325a:	2d 30       	cpi	r18, 0x0D	; 13
    325c:	10 f4       	brcc	.+4      	; 0x3262 <_ZN3RTC8kalenderEv+0x26>
    325e:	26 8b       	std	Z+22, r18	; 0x16
    3260:	2f c0       	rjmp	.+94     	; 0x32c0 <_ZN3RTC8kalenderEv+0x84>
    3262:	21 e0       	ldi	r18, 0x01	; 1
    3264:	fc 01       	movw	r30, r24
    3266:	26 8b       	std	Z+22, r18	; 0x16
    3268:	27 89       	ldd	r18, Z+23	; 0x17
    326a:	2f 5f       	subi	r18, 0xFF	; 255
    326c:	27 8b       	std	Z+23, r18	; 0x17
    326e:	28 c0       	rjmp	.+80     	; 0x32c0 <_ZN3RTC8kalenderEv+0x84>
    3270:	22 30       	cpi	r18, 0x02	; 2
    3272:	a9 f4       	brne	.+42     	; 0x329e <_ZN3RTC8kalenderEv+0x62>
    3274:	fc 01       	movw	r30, r24
    3276:	27 89       	ldd	r18, Z+23	; 0x17
    3278:	23 70       	andi	r18, 0x03	; 3
    327a:	41 f4       	brne	.+16     	; 0x328c <_ZN3RTC8kalenderEv+0x50>
    327c:	24 89       	ldd	r18, Z+20	; 0x14
    327e:	2e 31       	cpi	r18, 0x1E	; 30
    3280:	f8 f0       	brcs	.+62     	; 0x32c0 <_ZN3RTC8kalenderEv+0x84>
    3282:	21 e0       	ldi	r18, 0x01	; 1
    3284:	24 8b       	std	Z+20, r18	; 0x14
    3286:	23 e0       	ldi	r18, 0x03	; 3
    3288:	26 8b       	std	Z+22, r18	; 0x16
    328a:	1a c0       	rjmp	.+52     	; 0x32c0 <_ZN3RTC8kalenderEv+0x84>
    328c:	fc 01       	movw	r30, r24
    328e:	24 89       	ldd	r18, Z+20	; 0x14
    3290:	2d 31       	cpi	r18, 0x1D	; 29
    3292:	b0 f0       	brcs	.+44     	; 0x32c0 <_ZN3RTC8kalenderEv+0x84>
    3294:	21 e0       	ldi	r18, 0x01	; 1
    3296:	24 8b       	std	Z+20, r18	; 0x14
    3298:	23 e0       	ldi	r18, 0x03	; 3
    329a:	26 8b       	std	Z+22, r18	; 0x16
    329c:	11 c0       	rjmp	.+34     	; 0x32c0 <_ZN3RTC8kalenderEv+0x84>
    329e:	fc 01       	movw	r30, r24
    32a0:	34 89       	ldd	r19, Z+20	; 0x14
    32a2:	30 32       	cpi	r19, 0x20	; 32
    32a4:	68 f0       	brcs	.+26     	; 0x32c0 <_ZN3RTC8kalenderEv+0x84>
    32a6:	31 e0       	ldi	r19, 0x01	; 1
    32a8:	34 8b       	std	Z+20, r19	; 0x14
    32aa:	2f 5f       	subi	r18, 0xFF	; 255
    32ac:	2d 30       	cpi	r18, 0x0D	; 13
    32ae:	10 f4       	brcc	.+4      	; 0x32b4 <_ZN3RTC8kalenderEv+0x78>
    32b0:	26 8b       	std	Z+22, r18	; 0x16
    32b2:	06 c0       	rjmp	.+12     	; 0x32c0 <_ZN3RTC8kalenderEv+0x84>
    32b4:	21 e0       	ldi	r18, 0x01	; 1
    32b6:	fc 01       	movw	r30, r24
    32b8:	26 8b       	std	Z+22, r18	; 0x16
    32ba:	27 89       	ldd	r18, Z+23	; 0x17
    32bc:	2f 5f       	subi	r18, 0xFF	; 255
    32be:	27 8b       	std	Z+23, r18	; 0x17
    32c0:	5b cf       	rjmp	.-330    	; 0x3178 <_ZN3RTC15ausgabedatumneuEv>
    32c2:	08 95       	ret

000032c4 <_ZN3RTC4zeitEv>:
    32c4:	cf 93       	push	r28
    32c6:	df 93       	push	r29
    32c8:	ec 01       	movw	r28, r24
    32ca:	8a 89       	ldd	r24, Y+18	; 0x12
    32cc:	8c 53       	subi	r24, 0x3C	; 60
    32ce:	8d 38       	cpi	r24, 0x8D	; 141
    32d0:	c0 f4       	brcc	.+48     	; 0x3302 <_ZN3RTC4zeitEv+0x3e>
    32d2:	1a 8a       	std	Y+18, r1	; 0x12
    32d4:	89 89       	ldd	r24, Y+17	; 0x11
    32d6:	8f 5f       	subi	r24, 0xFF	; 255
    32d8:	89 8b       	std	Y+17, r24	; 0x11
    32da:	98 8d       	ldd	r25, Y+24	; 0x18
    32dc:	94 60       	ori	r25, 0x04	; 4
    32de:	98 8f       	std	Y+24, r25	; 0x18
    32e0:	8c 33       	cpi	r24, 0x3C	; 60
    32e2:	68 f0       	brcs	.+26     	; 0x32fe <_ZN3RTC4zeitEv+0x3a>
    32e4:	19 8a       	std	Y+17, r1	; 0x11
    32e6:	88 89       	ldd	r24, Y+16	; 0x10
    32e8:	8f 5f       	subi	r24, 0xFF	; 255
    32ea:	88 31       	cpi	r24, 0x18	; 24
    32ec:	10 f4       	brcc	.+4      	; 0x32f2 <_ZN3RTC4zeitEv+0x2e>
    32ee:	88 8b       	std	Y+16, r24	; 0x10
    32f0:	06 c0       	rjmp	.+12     	; 0x32fe <_ZN3RTC4zeitEv+0x3a>
    32f2:	18 8a       	std	Y+16, r1	; 0x10
    32f4:	8c 89       	ldd	r24, Y+20	; 0x14
    32f6:	8f 5f       	subi	r24, 0xFF	; 255
    32f8:	8c 8b       	std	Y+20, r24	; 0x14
    32fa:	ce 01       	movw	r24, r28
    32fc:	9f df       	rcall	.-194    	; 0x323c <_ZN3RTC8kalenderEv>
    32fe:	ce 01       	movw	r24, r28
    3300:	f1 de       	rcall	.-542    	; 0x30e4 <_ZN3RTC6WeckerEv>
    3302:	ce 01       	movw	r24, r28
    3304:	00 df       	rcall	.-512    	; 0x3106 <_ZN3RTC14ausgabezeitneuEv>
    3306:	88 8d       	ldd	r24, Y+24	; 0x18
    3308:	85 ff       	sbrs	r24, 5
    330a:	0b c0       	rjmp	.+22     	; 0x3322 <_ZN3RTC4zeitEv+0x5e>
    330c:	2b 8d       	ldd	r18, Y+27	; 0x1b
    330e:	3c 8d       	ldd	r19, Y+28	; 0x1c
    3310:	21 50       	subi	r18, 0x01	; 1
    3312:	31 09       	sbc	r19, r1
    3314:	3c 8f       	std	Y+28, r19	; 0x1c
    3316:	2b 8f       	std	Y+27, r18	; 0x1b
    3318:	23 2b       	or	r18, r19
    331a:	19 f4       	brne	.+6      	; 0x3322 <_ZN3RTC4zeitEv+0x5e>
    331c:	8f 7d       	andi	r24, 0xDF	; 223
    331e:	81 60       	ori	r24, 0x01	; 1
    3320:	88 8f       	std	Y+24, r24	; 0x18
    3322:	88 8d       	ldd	r24, Y+24	; 0x18
    3324:	86 ff       	sbrs	r24, 6
    3326:	05 c0       	rjmp	.+10     	; 0x3332 <_ZN3RTC4zeitEv+0x6e>
    3328:	8d 8d       	ldd	r24, Y+29	; 0x1d
    332a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    332c:	01 96       	adiw	r24, 0x01	; 1
    332e:	9e 8f       	std	Y+30, r25	; 0x1e
    3330:	8d 8f       	std	Y+29, r24	; 0x1d
    3332:	80 e0       	ldi	r24, 0x00	; 0
    3334:	df 91       	pop	r29
    3336:	cf 91       	pop	r28
    3338:	08 95       	ret

0000333a <_ZN3RTC8RTCstartEv>:

void RTC::RTCstart(){
    333a:	fc 01       	movw	r30, r24
	//Einstellungen des Ausgabebuffers
	msg_uhr[0]='0';
    333c:	80 e3       	ldi	r24, 0x30	; 48
    333e:	80 83       	st	Z, r24
	msg_uhr[1]='0';
    3340:	81 83       	std	Z+1, r24	; 0x01
	msg_uhr[2]=':';
    3342:	9a e3       	ldi	r25, 0x3A	; 58
    3344:	92 83       	std	Z+2, r25	; 0x02
	msg_uhr[3]='0';
    3346:	83 83       	std	Z+3, r24	; 0x03
	msg_uhr[4]='0';
    3348:	84 83       	std	Z+4, r24	; 0x04
	msg_uhr[5]=':';
    334a:	95 83       	std	Z+5, r25	; 0x05
	msg_uhr[6]='0';
    334c:	86 83       	std	Z+6, r24	; 0x06
	msg_uhr[7]='0';
    334e:	87 83       	std	Z+7, r24	; 0x07
	interupts = 0;
    3350:	10 8e       	std	Z+24, r1	; 0x18
	//Timer2 als 1ms Timer fuer die RTC
	//asynchron mit 32.768 kHz 
	TCNT2 = TIMER2RTCTIME;
    3352:	10 92 b2 00 	sts	0x00B2, r1
	ASSR |= (1<<AS2);
    3356:	e6 eb       	ldi	r30, 0xB6	; 182
    3358:	f0 e0       	ldi	r31, 0x00	; 0
    335a:	80 81       	ld	r24, Z
    335c:	80 62       	ori	r24, 0x20	; 32
    335e:	80 83       	st	Z, r24
	TIMSK2 = (1<<TOIE2);
    3360:	81 e0       	ldi	r24, 0x01	; 1
    3362:	80 93 70 00 	sts	0x0070, r24
	TCCR2B = (1<<CS22) | (1<<CS20);		//Vorteiler 256
    3366:	85 e0       	ldi	r24, 0x05	; 5
    3368:	80 93 b1 00 	sts	0x00B1, r24
    336c:	08 95       	ret

0000336e <_ZN3RTC7RTCstopEv>:
}

void RTC::RTCstop(){
	TCCR2B &= ~((1<<CS22) | (1<<CS21));
    336e:	e1 eb       	ldi	r30, 0xB1	; 177
    3370:	f0 e0       	ldi	r31, 0x00	; 0
    3372:	80 81       	ld	r24, Z
    3374:	89 7f       	andi	r24, 0xF9	; 249
    3376:	80 83       	st	Z, r24
    3378:	08 95       	ret

0000337a <_ZN5SOUNDD1Ev>:
	setfrequenci(1000);//1KHz
	off();
} //SOUND

// default destructor
SOUND::~SOUND()
    337a:	08 95       	ret

0000337c <_ZN5SOUND2onEv>:
	TCNT0 = 0;
	on();
}

void SOUND::on(){
	if ((interupts&(1<<Soundactiv)))
    337c:	fc 01       	movw	r30, r24
    337e:	20 81       	ld	r18, Z
    3380:	20 ff       	sbrs	r18, 0
    3382:	04 c0       	rjmp	.+8      	; 0x338c <_ZN5SOUND2onEv+0x10>
	{
		TCCR0B |= prescaler;
    3384:	25 b5       	in	r18, 0x25	; 37
    3386:	81 81       	ldd	r24, Z+1	; 0x01
    3388:	82 2b       	or	r24, r18
    338a:	85 bd       	out	0x25, r24	; 37
    338c:	08 95       	ret

0000338e <_ZN5SOUND3offEv>:
	}
}

void SOUND::off(){
	TCCR0B &= ~((1<<CS00)|(1<<CS01)|(1<<CS02));
    338e:	85 b5       	in	r24, 0x25	; 37
    3390:	88 7f       	andi	r24, 0xF8	; 248
    3392:	85 bd       	out	0x25, r24	; 37
    3394:	08 95       	ret

00003396 <_ZN5SOUND12setfrequenciEj>:
{
} //~SOUND


//WERT = f_CPU/(f*1024)
void SOUND::setfrequenci(uint16_t frequenz){
    3396:	0f 93       	push	r16
    3398:	1f 93       	push	r17
    339a:	cf 93       	push	r28
    339c:	df 93       	push	r29
    339e:	8c 01       	movw	r16, r24
    33a0:	eb 01       	movw	r28, r22
	off();
    33a2:	f5 df       	rcall	.-22     	; 0x338e <_ZN5SOUND3offEv>
	float WERT = F_CPU/256.0;
	WERT /= (frequenz);
    33a4:	be 01       	movw	r22, r28
    33a6:	80 e0       	ldi	r24, 0x00	; 0
    33a8:	90 e0       	ldi	r25, 0x00	; 0
    33aa:	29 d1       	rcall	.+594    	; 0x35fe <__floatunsisf>
    33ac:	9b 01       	movw	r18, r22
    33ae:	ac 01       	movw	r20, r24
    33b0:	60 e0       	ldi	r22, 0x00	; 0
    33b2:	74 e2       	ldi	r23, 0x24	; 36
    33b4:	84 ef       	ldi	r24, 0xF4	; 244
    33b6:	96 e4       	ldi	r25, 0x46	; 70
    33b8:	89 d0       	rcall	.+274    	; 0x34cc <__divsf3>
	OCR0A = (uint8_t)WERT;
    33ba:	f5 d0       	rcall	.+490    	; 0x35a6 <__fixunssfsi>
    33bc:	67 bd       	out	0x27, r22	; 39
	TCNT0 = 0;
    33be:	16 bc       	out	0x26, r1	; 38
	on();
    33c0:	c8 01       	movw	r24, r16
    33c2:	dc df       	rcall	.-72     	; 0x337c <_ZN5SOUND2onEv>
}
    33c4:	df 91       	pop	r29
    33c6:	cf 91       	pop	r28
    33c8:	1f 91       	pop	r17
    33ca:	0f 91       	pop	r16
    33cc:	08 95       	ret

000033ce <_ZN5SOUNDC1Ev>:


#include "SOUND.h"

// default constructor
SOUND::SOUND()
    33ce:	cf 93       	push	r28
    33d0:	df 93       	push	r29
    33d2:	ec 01       	movw	r28, r24
{
	//interuptregister initialisieren
	interupts = 0;
    33d4:	18 82       	st	Y, r1
	PORTB &= ~(1<<PORTB3); //Pullups ausschalten
    33d6:	2b 98       	cbi	0x05, 3	; 5
	DDRB |= (1<<PORTB3); //Ausgang schalten
    33d8:	23 9a       	sbi	0x04, 3	; 4
	//Not inverting PWM, Phase correct
	TCCR0A |= (1<<COM0A0) | (1<<WGM00);
    33da:	84 b5       	in	r24, 0x24	; 36
    33dc:	81 64       	ori	r24, 0x41	; 65
    33de:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1<<WGM02);
    33e0:	85 b5       	in	r24, 0x25	; 37
    33e2:	88 60       	ori	r24, 0x08	; 8
    33e4:	85 bd       	out	0x25, r24	; 37
	fuer	8		1MHz		3.90625KHz
			64		125KHz		488.28Hz
			256		31.25KHz	122.07Hz
			1024	7.8125KHz	30.52Hz
*/
	prescaler = (1<<CS02); //256
    33e6:	84 e0       	ldi	r24, 0x04	; 4
    33e8:	89 83       	std	Y+1, r24	; 0x01
	setfrequenci(1000);//1KHz
    33ea:	68 ee       	ldi	r22, 0xE8	; 232
    33ec:	73 e0       	ldi	r23, 0x03	; 3
    33ee:	ce 01       	movw	r24, r28
    33f0:	d2 df       	rcall	.-92     	; 0x3396 <_ZN5SOUND12setfrequenciEj>
	off();
    33f2:	ce 01       	movw	r24, r28
    33f4:	cc df       	rcall	.-104    	; 0x338e <_ZN5SOUND3offEv>
} //SOUND
    33f6:	df 91       	pop	r29
    33f8:	cf 91       	pop	r28
    33fa:	08 95       	ret

000033fc <__subsf3>:
    33fc:	50 58       	subi	r21, 0x80	; 128

000033fe <__addsf3>:
    33fe:	bb 27       	eor	r27, r27
    3400:	aa 27       	eor	r26, r26
    3402:	0e d0       	rcall	.+28     	; 0x3420 <__addsf3x>
    3404:	c1 c1       	rjmp	.+898    	; 0x3788 <__fp_round>
    3406:	8a d1       	rcall	.+788    	; 0x371c <__fp_pscA>
    3408:	30 f0       	brcs	.+12     	; 0x3416 <__addsf3+0x18>
    340a:	8f d1       	rcall	.+798    	; 0x372a <__fp_pscB>
    340c:	20 f0       	brcs	.+8      	; 0x3416 <__addsf3+0x18>
    340e:	31 f4       	brne	.+12     	; 0x341c <__addsf3+0x1e>
    3410:	9f 3f       	cpi	r25, 0xFF	; 255
    3412:	11 f4       	brne	.+4      	; 0x3418 <__addsf3+0x1a>
    3414:	1e f4       	brtc	.+6      	; 0x341c <__addsf3+0x1e>
    3416:	5a c1       	rjmp	.+692    	; 0x36cc <__fp_nan>
    3418:	0e f4       	brtc	.+2      	; 0x341c <__addsf3+0x1e>
    341a:	e0 95       	com	r30
    341c:	e7 fb       	bst	r30, 7
    341e:	50 c1       	rjmp	.+672    	; 0x36c0 <__fp_inf>

00003420 <__addsf3x>:
    3420:	e9 2f       	mov	r30, r25
    3422:	d4 d1       	rcall	.+936    	; 0x37cc <__fp_split3>
    3424:	80 f3       	brcs	.-32     	; 0x3406 <__addsf3+0x8>
    3426:	ba 17       	cp	r27, r26
    3428:	62 07       	cpc	r22, r18
    342a:	73 07       	cpc	r23, r19
    342c:	84 07       	cpc	r24, r20
    342e:	95 07       	cpc	r25, r21
    3430:	18 f0       	brcs	.+6      	; 0x3438 <__addsf3x+0x18>
    3432:	71 f4       	brne	.+28     	; 0x3450 <__addsf3x+0x30>
    3434:	9e f5       	brtc	.+102    	; 0x349c <__addsf3x+0x7c>
    3436:	ec c1       	rjmp	.+984    	; 0x3810 <__fp_zero>
    3438:	0e f4       	brtc	.+2      	; 0x343c <__addsf3x+0x1c>
    343a:	e0 95       	com	r30
    343c:	0b 2e       	mov	r0, r27
    343e:	ba 2f       	mov	r27, r26
    3440:	a0 2d       	mov	r26, r0
    3442:	0b 01       	movw	r0, r22
    3444:	b9 01       	movw	r22, r18
    3446:	90 01       	movw	r18, r0
    3448:	0c 01       	movw	r0, r24
    344a:	ca 01       	movw	r24, r20
    344c:	a0 01       	movw	r20, r0
    344e:	11 24       	eor	r1, r1
    3450:	ff 27       	eor	r31, r31
    3452:	59 1b       	sub	r21, r25
    3454:	99 f0       	breq	.+38     	; 0x347c <__addsf3x+0x5c>
    3456:	59 3f       	cpi	r21, 0xF9	; 249
    3458:	50 f4       	brcc	.+20     	; 0x346e <__addsf3x+0x4e>
    345a:	50 3e       	cpi	r21, 0xE0	; 224
    345c:	68 f1       	brcs	.+90     	; 0x34b8 <__addsf3x+0x98>
    345e:	1a 16       	cp	r1, r26
    3460:	f0 40       	sbci	r31, 0x00	; 0
    3462:	a2 2f       	mov	r26, r18
    3464:	23 2f       	mov	r18, r19
    3466:	34 2f       	mov	r19, r20
    3468:	44 27       	eor	r20, r20
    346a:	58 5f       	subi	r21, 0xF8	; 248
    346c:	f3 cf       	rjmp	.-26     	; 0x3454 <__addsf3x+0x34>
    346e:	46 95       	lsr	r20
    3470:	37 95       	ror	r19
    3472:	27 95       	ror	r18
    3474:	a7 95       	ror	r26
    3476:	f0 40       	sbci	r31, 0x00	; 0
    3478:	53 95       	inc	r21
    347a:	c9 f7       	brne	.-14     	; 0x346e <__addsf3x+0x4e>
    347c:	7e f4       	brtc	.+30     	; 0x349c <__addsf3x+0x7c>
    347e:	1f 16       	cp	r1, r31
    3480:	ba 0b       	sbc	r27, r26
    3482:	62 0b       	sbc	r22, r18
    3484:	73 0b       	sbc	r23, r19
    3486:	84 0b       	sbc	r24, r20
    3488:	ba f0       	brmi	.+46     	; 0x34b8 <__addsf3x+0x98>
    348a:	91 50       	subi	r25, 0x01	; 1
    348c:	a1 f0       	breq	.+40     	; 0x34b6 <__addsf3x+0x96>
    348e:	ff 0f       	add	r31, r31
    3490:	bb 1f       	adc	r27, r27
    3492:	66 1f       	adc	r22, r22
    3494:	77 1f       	adc	r23, r23
    3496:	88 1f       	adc	r24, r24
    3498:	c2 f7       	brpl	.-16     	; 0x348a <__addsf3x+0x6a>
    349a:	0e c0       	rjmp	.+28     	; 0x34b8 <__addsf3x+0x98>
    349c:	ba 0f       	add	r27, r26
    349e:	62 1f       	adc	r22, r18
    34a0:	73 1f       	adc	r23, r19
    34a2:	84 1f       	adc	r24, r20
    34a4:	48 f4       	brcc	.+18     	; 0x34b8 <__addsf3x+0x98>
    34a6:	87 95       	ror	r24
    34a8:	77 95       	ror	r23
    34aa:	67 95       	ror	r22
    34ac:	b7 95       	ror	r27
    34ae:	f7 95       	ror	r31
    34b0:	9e 3f       	cpi	r25, 0xFE	; 254
    34b2:	08 f0       	brcs	.+2      	; 0x34b6 <__addsf3x+0x96>
    34b4:	b3 cf       	rjmp	.-154    	; 0x341c <__addsf3+0x1e>
    34b6:	93 95       	inc	r25
    34b8:	88 0f       	add	r24, r24
    34ba:	08 f0       	brcs	.+2      	; 0x34be <__addsf3x+0x9e>
    34bc:	99 27       	eor	r25, r25
    34be:	ee 0f       	add	r30, r30
    34c0:	97 95       	ror	r25
    34c2:	87 95       	ror	r24
    34c4:	08 95       	ret

000034c6 <cos>:
    34c6:	39 d1       	rcall	.+626    	; 0x373a <__fp_rempio2>
    34c8:	e3 95       	inc	r30
    34ca:	6f c1       	rjmp	.+734    	; 0x37aa <__fp_sinus>

000034cc <__divsf3>:
    34cc:	0c d0       	rcall	.+24     	; 0x34e6 <__divsf3x>
    34ce:	5c c1       	rjmp	.+696    	; 0x3788 <__fp_round>
    34d0:	2c d1       	rcall	.+600    	; 0x372a <__fp_pscB>
    34d2:	40 f0       	brcs	.+16     	; 0x34e4 <__divsf3+0x18>
    34d4:	23 d1       	rcall	.+582    	; 0x371c <__fp_pscA>
    34d6:	30 f0       	brcs	.+12     	; 0x34e4 <__divsf3+0x18>
    34d8:	21 f4       	brne	.+8      	; 0x34e2 <__divsf3+0x16>
    34da:	5f 3f       	cpi	r21, 0xFF	; 255
    34dc:	19 f0       	breq	.+6      	; 0x34e4 <__divsf3+0x18>
    34de:	f0 c0       	rjmp	.+480    	; 0x36c0 <__fp_inf>
    34e0:	51 11       	cpse	r21, r1
    34e2:	97 c1       	rjmp	.+814    	; 0x3812 <__fp_szero>
    34e4:	f3 c0       	rjmp	.+486    	; 0x36cc <__fp_nan>

000034e6 <__divsf3x>:
    34e6:	72 d1       	rcall	.+740    	; 0x37cc <__fp_split3>
    34e8:	98 f3       	brcs	.-26     	; 0x34d0 <__divsf3+0x4>

000034ea <__divsf3_pse>:
    34ea:	99 23       	and	r25, r25
    34ec:	c9 f3       	breq	.-14     	; 0x34e0 <__divsf3+0x14>
    34ee:	55 23       	and	r21, r21
    34f0:	b1 f3       	breq	.-20     	; 0x34de <__divsf3+0x12>
    34f2:	95 1b       	sub	r25, r21
    34f4:	55 0b       	sbc	r21, r21
    34f6:	bb 27       	eor	r27, r27
    34f8:	aa 27       	eor	r26, r26
    34fa:	62 17       	cp	r22, r18
    34fc:	73 07       	cpc	r23, r19
    34fe:	84 07       	cpc	r24, r20
    3500:	38 f0       	brcs	.+14     	; 0x3510 <__divsf3_pse+0x26>
    3502:	9f 5f       	subi	r25, 0xFF	; 255
    3504:	5f 4f       	sbci	r21, 0xFF	; 255
    3506:	22 0f       	add	r18, r18
    3508:	33 1f       	adc	r19, r19
    350a:	44 1f       	adc	r20, r20
    350c:	aa 1f       	adc	r26, r26
    350e:	a9 f3       	breq	.-22     	; 0x34fa <__divsf3_pse+0x10>
    3510:	33 d0       	rcall	.+102    	; 0x3578 <__divsf3_pse+0x8e>
    3512:	0e 2e       	mov	r0, r30
    3514:	3a f0       	brmi	.+14     	; 0x3524 <__divsf3_pse+0x3a>
    3516:	e0 e8       	ldi	r30, 0x80	; 128
    3518:	30 d0       	rcall	.+96     	; 0x357a <__divsf3_pse+0x90>
    351a:	91 50       	subi	r25, 0x01	; 1
    351c:	50 40       	sbci	r21, 0x00	; 0
    351e:	e6 95       	lsr	r30
    3520:	00 1c       	adc	r0, r0
    3522:	ca f7       	brpl	.-14     	; 0x3516 <__divsf3_pse+0x2c>
    3524:	29 d0       	rcall	.+82     	; 0x3578 <__divsf3_pse+0x8e>
    3526:	fe 2f       	mov	r31, r30
    3528:	27 d0       	rcall	.+78     	; 0x3578 <__divsf3_pse+0x8e>
    352a:	66 0f       	add	r22, r22
    352c:	77 1f       	adc	r23, r23
    352e:	88 1f       	adc	r24, r24
    3530:	bb 1f       	adc	r27, r27
    3532:	26 17       	cp	r18, r22
    3534:	37 07       	cpc	r19, r23
    3536:	48 07       	cpc	r20, r24
    3538:	ab 07       	cpc	r26, r27
    353a:	b0 e8       	ldi	r27, 0x80	; 128
    353c:	09 f0       	breq	.+2      	; 0x3540 <__divsf3_pse+0x56>
    353e:	bb 0b       	sbc	r27, r27
    3540:	80 2d       	mov	r24, r0
    3542:	bf 01       	movw	r22, r30
    3544:	ff 27       	eor	r31, r31
    3546:	93 58       	subi	r25, 0x83	; 131
    3548:	5f 4f       	sbci	r21, 0xFF	; 255
    354a:	2a f0       	brmi	.+10     	; 0x3556 <__divsf3_pse+0x6c>
    354c:	9e 3f       	cpi	r25, 0xFE	; 254
    354e:	51 05       	cpc	r21, r1
    3550:	68 f0       	brcs	.+26     	; 0x356c <__divsf3_pse+0x82>
    3552:	b6 c0       	rjmp	.+364    	; 0x36c0 <__fp_inf>
    3554:	5e c1       	rjmp	.+700    	; 0x3812 <__fp_szero>
    3556:	5f 3f       	cpi	r21, 0xFF	; 255
    3558:	ec f3       	brlt	.-6      	; 0x3554 <__divsf3_pse+0x6a>
    355a:	98 3e       	cpi	r25, 0xE8	; 232
    355c:	dc f3       	brlt	.-10     	; 0x3554 <__divsf3_pse+0x6a>
    355e:	86 95       	lsr	r24
    3560:	77 95       	ror	r23
    3562:	67 95       	ror	r22
    3564:	b7 95       	ror	r27
    3566:	f7 95       	ror	r31
    3568:	9f 5f       	subi	r25, 0xFF	; 255
    356a:	c9 f7       	brne	.-14     	; 0x355e <__divsf3_pse+0x74>
    356c:	88 0f       	add	r24, r24
    356e:	91 1d       	adc	r25, r1
    3570:	96 95       	lsr	r25
    3572:	87 95       	ror	r24
    3574:	97 f9       	bld	r25, 7
    3576:	08 95       	ret
    3578:	e1 e0       	ldi	r30, 0x01	; 1
    357a:	66 0f       	add	r22, r22
    357c:	77 1f       	adc	r23, r23
    357e:	88 1f       	adc	r24, r24
    3580:	bb 1f       	adc	r27, r27
    3582:	62 17       	cp	r22, r18
    3584:	73 07       	cpc	r23, r19
    3586:	84 07       	cpc	r24, r20
    3588:	ba 07       	cpc	r27, r26
    358a:	20 f0       	brcs	.+8      	; 0x3594 <__divsf3_pse+0xaa>
    358c:	62 1b       	sub	r22, r18
    358e:	73 0b       	sbc	r23, r19
    3590:	84 0b       	sbc	r24, r20
    3592:	ba 0b       	sbc	r27, r26
    3594:	ee 1f       	adc	r30, r30
    3596:	88 f7       	brcc	.-30     	; 0x357a <__divsf3_pse+0x90>
    3598:	e0 95       	com	r30
    359a:	08 95       	ret

0000359c <__fixsfsi>:
    359c:	04 d0       	rcall	.+8      	; 0x35a6 <__fixunssfsi>
    359e:	68 94       	set
    35a0:	b1 11       	cpse	r27, r1
    35a2:	37 c1       	rjmp	.+622    	; 0x3812 <__fp_szero>
    35a4:	08 95       	ret

000035a6 <__fixunssfsi>:
    35a6:	1a d1       	rcall	.+564    	; 0x37dc <__fp_splitA>
    35a8:	88 f0       	brcs	.+34     	; 0x35cc <__fixunssfsi+0x26>
    35aa:	9f 57       	subi	r25, 0x7F	; 127
    35ac:	90 f0       	brcs	.+36     	; 0x35d2 <__fixunssfsi+0x2c>
    35ae:	b9 2f       	mov	r27, r25
    35b0:	99 27       	eor	r25, r25
    35b2:	b7 51       	subi	r27, 0x17	; 23
    35b4:	a0 f0       	brcs	.+40     	; 0x35de <__fixunssfsi+0x38>
    35b6:	d1 f0       	breq	.+52     	; 0x35ec <__fixunssfsi+0x46>
    35b8:	66 0f       	add	r22, r22
    35ba:	77 1f       	adc	r23, r23
    35bc:	88 1f       	adc	r24, r24
    35be:	99 1f       	adc	r25, r25
    35c0:	1a f0       	brmi	.+6      	; 0x35c8 <__fixunssfsi+0x22>
    35c2:	ba 95       	dec	r27
    35c4:	c9 f7       	brne	.-14     	; 0x35b8 <__fixunssfsi+0x12>
    35c6:	12 c0       	rjmp	.+36     	; 0x35ec <__fixunssfsi+0x46>
    35c8:	b1 30       	cpi	r27, 0x01	; 1
    35ca:	81 f0       	breq	.+32     	; 0x35ec <__fixunssfsi+0x46>
    35cc:	21 d1       	rcall	.+578    	; 0x3810 <__fp_zero>
    35ce:	b1 e0       	ldi	r27, 0x01	; 1
    35d0:	08 95       	ret
    35d2:	1e c1       	rjmp	.+572    	; 0x3810 <__fp_zero>
    35d4:	67 2f       	mov	r22, r23
    35d6:	78 2f       	mov	r23, r24
    35d8:	88 27       	eor	r24, r24
    35da:	b8 5f       	subi	r27, 0xF8	; 248
    35dc:	39 f0       	breq	.+14     	; 0x35ec <__fixunssfsi+0x46>
    35de:	b9 3f       	cpi	r27, 0xF9	; 249
    35e0:	cc f3       	brlt	.-14     	; 0x35d4 <__fixunssfsi+0x2e>
    35e2:	86 95       	lsr	r24
    35e4:	77 95       	ror	r23
    35e6:	67 95       	ror	r22
    35e8:	b3 95       	inc	r27
    35ea:	d9 f7       	brne	.-10     	; 0x35e2 <__fixunssfsi+0x3c>
    35ec:	3e f4       	brtc	.+14     	; 0x35fc <__fixunssfsi+0x56>
    35ee:	90 95       	com	r25
    35f0:	80 95       	com	r24
    35f2:	70 95       	com	r23
    35f4:	61 95       	neg	r22
    35f6:	7f 4f       	sbci	r23, 0xFF	; 255
    35f8:	8f 4f       	sbci	r24, 0xFF	; 255
    35fa:	9f 4f       	sbci	r25, 0xFF	; 255
    35fc:	08 95       	ret

000035fe <__floatunsisf>:
    35fe:	e8 94       	clt
    3600:	09 c0       	rjmp	.+18     	; 0x3614 <__floatsisf+0x12>

00003602 <__floatsisf>:
    3602:	97 fb       	bst	r25, 7
    3604:	3e f4       	brtc	.+14     	; 0x3614 <__floatsisf+0x12>
    3606:	90 95       	com	r25
    3608:	80 95       	com	r24
    360a:	70 95       	com	r23
    360c:	61 95       	neg	r22
    360e:	7f 4f       	sbci	r23, 0xFF	; 255
    3610:	8f 4f       	sbci	r24, 0xFF	; 255
    3612:	9f 4f       	sbci	r25, 0xFF	; 255
    3614:	99 23       	and	r25, r25
    3616:	a9 f0       	breq	.+42     	; 0x3642 <__floatsisf+0x40>
    3618:	f9 2f       	mov	r31, r25
    361a:	96 e9       	ldi	r25, 0x96	; 150
    361c:	bb 27       	eor	r27, r27
    361e:	93 95       	inc	r25
    3620:	f6 95       	lsr	r31
    3622:	87 95       	ror	r24
    3624:	77 95       	ror	r23
    3626:	67 95       	ror	r22
    3628:	b7 95       	ror	r27
    362a:	f1 11       	cpse	r31, r1
    362c:	f8 cf       	rjmp	.-16     	; 0x361e <__floatsisf+0x1c>
    362e:	fa f4       	brpl	.+62     	; 0x366e <__floatsisf+0x6c>
    3630:	bb 0f       	add	r27, r27
    3632:	11 f4       	brne	.+4      	; 0x3638 <__floatsisf+0x36>
    3634:	60 ff       	sbrs	r22, 0
    3636:	1b c0       	rjmp	.+54     	; 0x366e <__floatsisf+0x6c>
    3638:	6f 5f       	subi	r22, 0xFF	; 255
    363a:	7f 4f       	sbci	r23, 0xFF	; 255
    363c:	8f 4f       	sbci	r24, 0xFF	; 255
    363e:	9f 4f       	sbci	r25, 0xFF	; 255
    3640:	16 c0       	rjmp	.+44     	; 0x366e <__floatsisf+0x6c>
    3642:	88 23       	and	r24, r24
    3644:	11 f0       	breq	.+4      	; 0x364a <__floatsisf+0x48>
    3646:	96 e9       	ldi	r25, 0x96	; 150
    3648:	11 c0       	rjmp	.+34     	; 0x366c <__floatsisf+0x6a>
    364a:	77 23       	and	r23, r23
    364c:	21 f0       	breq	.+8      	; 0x3656 <__floatsisf+0x54>
    364e:	9e e8       	ldi	r25, 0x8E	; 142
    3650:	87 2f       	mov	r24, r23
    3652:	76 2f       	mov	r23, r22
    3654:	05 c0       	rjmp	.+10     	; 0x3660 <__floatsisf+0x5e>
    3656:	66 23       	and	r22, r22
    3658:	71 f0       	breq	.+28     	; 0x3676 <__floatsisf+0x74>
    365a:	96 e8       	ldi	r25, 0x86	; 134
    365c:	86 2f       	mov	r24, r22
    365e:	70 e0       	ldi	r23, 0x00	; 0
    3660:	60 e0       	ldi	r22, 0x00	; 0
    3662:	2a f0       	brmi	.+10     	; 0x366e <__floatsisf+0x6c>
    3664:	9a 95       	dec	r25
    3666:	66 0f       	add	r22, r22
    3668:	77 1f       	adc	r23, r23
    366a:	88 1f       	adc	r24, r24
    366c:	da f7       	brpl	.-10     	; 0x3664 <__floatsisf+0x62>
    366e:	88 0f       	add	r24, r24
    3670:	96 95       	lsr	r25
    3672:	87 95       	ror	r24
    3674:	97 f9       	bld	r25, 7
    3676:	08 95       	ret

00003678 <__fp_cmp>:
    3678:	99 0f       	add	r25, r25
    367a:	00 08       	sbc	r0, r0
    367c:	55 0f       	add	r21, r21
    367e:	aa 0b       	sbc	r26, r26
    3680:	e0 e8       	ldi	r30, 0x80	; 128
    3682:	fe ef       	ldi	r31, 0xFE	; 254
    3684:	16 16       	cp	r1, r22
    3686:	17 06       	cpc	r1, r23
    3688:	e8 07       	cpc	r30, r24
    368a:	f9 07       	cpc	r31, r25
    368c:	c0 f0       	brcs	.+48     	; 0x36be <__fp_cmp+0x46>
    368e:	12 16       	cp	r1, r18
    3690:	13 06       	cpc	r1, r19
    3692:	e4 07       	cpc	r30, r20
    3694:	f5 07       	cpc	r31, r21
    3696:	98 f0       	brcs	.+38     	; 0x36be <__fp_cmp+0x46>
    3698:	62 1b       	sub	r22, r18
    369a:	73 0b       	sbc	r23, r19
    369c:	84 0b       	sbc	r24, r20
    369e:	95 0b       	sbc	r25, r21
    36a0:	39 f4       	brne	.+14     	; 0x36b0 <__fp_cmp+0x38>
    36a2:	0a 26       	eor	r0, r26
    36a4:	61 f0       	breq	.+24     	; 0x36be <__fp_cmp+0x46>
    36a6:	23 2b       	or	r18, r19
    36a8:	24 2b       	or	r18, r20
    36aa:	25 2b       	or	r18, r21
    36ac:	21 f4       	brne	.+8      	; 0x36b6 <__fp_cmp+0x3e>
    36ae:	08 95       	ret
    36b0:	0a 26       	eor	r0, r26
    36b2:	09 f4       	brne	.+2      	; 0x36b6 <__fp_cmp+0x3e>
    36b4:	a1 40       	sbci	r26, 0x01	; 1
    36b6:	a6 95       	lsr	r26
    36b8:	8f ef       	ldi	r24, 0xFF	; 255
    36ba:	81 1d       	adc	r24, r1
    36bc:	81 1d       	adc	r24, r1
    36be:	08 95       	ret

000036c0 <__fp_inf>:
    36c0:	97 f9       	bld	r25, 7
    36c2:	9f 67       	ori	r25, 0x7F	; 127
    36c4:	80 e8       	ldi	r24, 0x80	; 128
    36c6:	70 e0       	ldi	r23, 0x00	; 0
    36c8:	60 e0       	ldi	r22, 0x00	; 0
    36ca:	08 95       	ret

000036cc <__fp_nan>:
    36cc:	9f ef       	ldi	r25, 0xFF	; 255
    36ce:	80 ec       	ldi	r24, 0xC0	; 192
    36d0:	08 95       	ret

000036d2 <__fp_powser>:
    36d2:	df 93       	push	r29
    36d4:	cf 93       	push	r28
    36d6:	1f 93       	push	r17
    36d8:	0f 93       	push	r16
    36da:	ff 92       	push	r15
    36dc:	ef 92       	push	r14
    36de:	df 92       	push	r13
    36e0:	7b 01       	movw	r14, r22
    36e2:	8c 01       	movw	r16, r24
    36e4:	68 94       	set
    36e6:	05 c0       	rjmp	.+10     	; 0x36f2 <__fp_powser+0x20>
    36e8:	da 2e       	mov	r13, r26
    36ea:	ef 01       	movw	r28, r30
    36ec:	a8 d0       	rcall	.+336    	; 0x383e <__mulsf3x>
    36ee:	fe 01       	movw	r30, r28
    36f0:	e8 94       	clt
    36f2:	a5 91       	lpm	r26, Z+
    36f4:	25 91       	lpm	r18, Z+
    36f6:	35 91       	lpm	r19, Z+
    36f8:	45 91       	lpm	r20, Z+
    36fa:	55 91       	lpm	r21, Z+
    36fc:	ae f3       	brts	.-22     	; 0x36e8 <__fp_powser+0x16>
    36fe:	ef 01       	movw	r28, r30
    3700:	8f de       	rcall	.-738    	; 0x3420 <__addsf3x>
    3702:	fe 01       	movw	r30, r28
    3704:	97 01       	movw	r18, r14
    3706:	a8 01       	movw	r20, r16
    3708:	da 94       	dec	r13
    370a:	79 f7       	brne	.-34     	; 0x36ea <__fp_powser+0x18>
    370c:	df 90       	pop	r13
    370e:	ef 90       	pop	r14
    3710:	ff 90       	pop	r15
    3712:	0f 91       	pop	r16
    3714:	1f 91       	pop	r17
    3716:	cf 91       	pop	r28
    3718:	df 91       	pop	r29
    371a:	08 95       	ret

0000371c <__fp_pscA>:
    371c:	00 24       	eor	r0, r0
    371e:	0a 94       	dec	r0
    3720:	16 16       	cp	r1, r22
    3722:	17 06       	cpc	r1, r23
    3724:	18 06       	cpc	r1, r24
    3726:	09 06       	cpc	r0, r25
    3728:	08 95       	ret

0000372a <__fp_pscB>:
    372a:	00 24       	eor	r0, r0
    372c:	0a 94       	dec	r0
    372e:	12 16       	cp	r1, r18
    3730:	13 06       	cpc	r1, r19
    3732:	14 06       	cpc	r1, r20
    3734:	05 06       	cpc	r0, r21
    3736:	08 95       	ret
    3738:	c9 cf       	rjmp	.-110    	; 0x36cc <__fp_nan>

0000373a <__fp_rempio2>:
    373a:	50 d0       	rcall	.+160    	; 0x37dc <__fp_splitA>
    373c:	e8 f3       	brcs	.-6      	; 0x3738 <__fp_pscB+0xe>
    373e:	e8 94       	clt
    3740:	e0 e0       	ldi	r30, 0x00	; 0
    3742:	bb 27       	eor	r27, r27
    3744:	9f 57       	subi	r25, 0x7F	; 127
    3746:	f0 f0       	brcs	.+60     	; 0x3784 <__fp_rempio2+0x4a>
    3748:	2a ed       	ldi	r18, 0xDA	; 218
    374a:	3f e0       	ldi	r19, 0x0F	; 15
    374c:	49 ec       	ldi	r20, 0xC9	; 201
    374e:	06 c0       	rjmp	.+12     	; 0x375c <__fp_rempio2+0x22>
    3750:	ee 0f       	add	r30, r30
    3752:	bb 0f       	add	r27, r27
    3754:	66 1f       	adc	r22, r22
    3756:	77 1f       	adc	r23, r23
    3758:	88 1f       	adc	r24, r24
    375a:	28 f0       	brcs	.+10     	; 0x3766 <__fp_rempio2+0x2c>
    375c:	b2 3a       	cpi	r27, 0xA2	; 162
    375e:	62 07       	cpc	r22, r18
    3760:	73 07       	cpc	r23, r19
    3762:	84 07       	cpc	r24, r20
    3764:	28 f0       	brcs	.+10     	; 0x3770 <__fp_rempio2+0x36>
    3766:	b2 5a       	subi	r27, 0xA2	; 162
    3768:	62 0b       	sbc	r22, r18
    376a:	73 0b       	sbc	r23, r19
    376c:	84 0b       	sbc	r24, r20
    376e:	e3 95       	inc	r30
    3770:	9a 95       	dec	r25
    3772:	72 f7       	brpl	.-36     	; 0x3750 <__fp_rempio2+0x16>
    3774:	80 38       	cpi	r24, 0x80	; 128
    3776:	30 f4       	brcc	.+12     	; 0x3784 <__fp_rempio2+0x4a>
    3778:	9a 95       	dec	r25
    377a:	bb 0f       	add	r27, r27
    377c:	66 1f       	adc	r22, r22
    377e:	77 1f       	adc	r23, r23
    3780:	88 1f       	adc	r24, r24
    3782:	d2 f7       	brpl	.-12     	; 0x3778 <__fp_rempio2+0x3e>
    3784:	90 48       	sbci	r25, 0x80	; 128
    3786:	ba c0       	rjmp	.+372    	; 0x38fc <__fp_mpack_finite>

00003788 <__fp_round>:
    3788:	09 2e       	mov	r0, r25
    378a:	03 94       	inc	r0
    378c:	00 0c       	add	r0, r0
    378e:	11 f4       	brne	.+4      	; 0x3794 <__fp_round+0xc>
    3790:	88 23       	and	r24, r24
    3792:	52 f0       	brmi	.+20     	; 0x37a8 <__fp_round+0x20>
    3794:	bb 0f       	add	r27, r27
    3796:	40 f4       	brcc	.+16     	; 0x37a8 <__fp_round+0x20>
    3798:	bf 2b       	or	r27, r31
    379a:	11 f4       	brne	.+4      	; 0x37a0 <__fp_round+0x18>
    379c:	60 ff       	sbrs	r22, 0
    379e:	04 c0       	rjmp	.+8      	; 0x37a8 <__fp_round+0x20>
    37a0:	6f 5f       	subi	r22, 0xFF	; 255
    37a2:	7f 4f       	sbci	r23, 0xFF	; 255
    37a4:	8f 4f       	sbci	r24, 0xFF	; 255
    37a6:	9f 4f       	sbci	r25, 0xFF	; 255
    37a8:	08 95       	ret

000037aa <__fp_sinus>:
    37aa:	ef 93       	push	r30
    37ac:	e0 ff       	sbrs	r30, 0
    37ae:	06 c0       	rjmp	.+12     	; 0x37bc <__fp_sinus+0x12>
    37b0:	a2 ea       	ldi	r26, 0xA2	; 162
    37b2:	2a ed       	ldi	r18, 0xDA	; 218
    37b4:	3f e0       	ldi	r19, 0x0F	; 15
    37b6:	49 ec       	ldi	r20, 0xC9	; 201
    37b8:	5f eb       	ldi	r21, 0xBF	; 191
    37ba:	32 de       	rcall	.-924    	; 0x3420 <__addsf3x>
    37bc:	e5 df       	rcall	.-54     	; 0x3788 <__fp_round>
    37be:	0f 90       	pop	r0
    37c0:	03 94       	inc	r0
    37c2:	01 fc       	sbrc	r0, 1
    37c4:	90 58       	subi	r25, 0x80	; 128
    37c6:	ee ec       	ldi	r30, 0xCE	; 206
    37c8:	f0 e0       	ldi	r31, 0x00	; 0
    37ca:	a4 c0       	rjmp	.+328    	; 0x3914 <__fp_powsodd>

000037cc <__fp_split3>:
    37cc:	57 fd       	sbrc	r21, 7
    37ce:	90 58       	subi	r25, 0x80	; 128
    37d0:	44 0f       	add	r20, r20
    37d2:	55 1f       	adc	r21, r21
    37d4:	59 f0       	breq	.+22     	; 0x37ec <__fp_splitA+0x10>
    37d6:	5f 3f       	cpi	r21, 0xFF	; 255
    37d8:	71 f0       	breq	.+28     	; 0x37f6 <__fp_splitA+0x1a>
    37da:	47 95       	ror	r20

000037dc <__fp_splitA>:
    37dc:	88 0f       	add	r24, r24
    37de:	97 fb       	bst	r25, 7
    37e0:	99 1f       	adc	r25, r25
    37e2:	61 f0       	breq	.+24     	; 0x37fc <__fp_splitA+0x20>
    37e4:	9f 3f       	cpi	r25, 0xFF	; 255
    37e6:	79 f0       	breq	.+30     	; 0x3806 <__fp_splitA+0x2a>
    37e8:	87 95       	ror	r24
    37ea:	08 95       	ret
    37ec:	12 16       	cp	r1, r18
    37ee:	13 06       	cpc	r1, r19
    37f0:	14 06       	cpc	r1, r20
    37f2:	55 1f       	adc	r21, r21
    37f4:	f2 cf       	rjmp	.-28     	; 0x37da <__fp_split3+0xe>
    37f6:	46 95       	lsr	r20
    37f8:	f1 df       	rcall	.-30     	; 0x37dc <__fp_splitA>
    37fa:	08 c0       	rjmp	.+16     	; 0x380c <__fp_splitA+0x30>
    37fc:	16 16       	cp	r1, r22
    37fe:	17 06       	cpc	r1, r23
    3800:	18 06       	cpc	r1, r24
    3802:	99 1f       	adc	r25, r25
    3804:	f1 cf       	rjmp	.-30     	; 0x37e8 <__fp_splitA+0xc>
    3806:	86 95       	lsr	r24
    3808:	71 05       	cpc	r23, r1
    380a:	61 05       	cpc	r22, r1
    380c:	08 94       	sec
    380e:	08 95       	ret

00003810 <__fp_zero>:
    3810:	e8 94       	clt

00003812 <__fp_szero>:
    3812:	bb 27       	eor	r27, r27
    3814:	66 27       	eor	r22, r22
    3816:	77 27       	eor	r23, r23
    3818:	cb 01       	movw	r24, r22
    381a:	97 f9       	bld	r25, 7
    381c:	08 95       	ret

0000381e <__gesf2>:
    381e:	2c df       	rcall	.-424    	; 0x3678 <__fp_cmp>
    3820:	08 f4       	brcc	.+2      	; 0x3824 <__gesf2+0x6>
    3822:	8f ef       	ldi	r24, 0xFF	; 255
    3824:	08 95       	ret

00003826 <__mulsf3>:
    3826:	0b d0       	rcall	.+22     	; 0x383e <__mulsf3x>
    3828:	af cf       	rjmp	.-162    	; 0x3788 <__fp_round>
    382a:	78 df       	rcall	.-272    	; 0x371c <__fp_pscA>
    382c:	28 f0       	brcs	.+10     	; 0x3838 <__mulsf3+0x12>
    382e:	7d df       	rcall	.-262    	; 0x372a <__fp_pscB>
    3830:	18 f0       	brcs	.+6      	; 0x3838 <__mulsf3+0x12>
    3832:	95 23       	and	r25, r21
    3834:	09 f0       	breq	.+2      	; 0x3838 <__mulsf3+0x12>
    3836:	44 cf       	rjmp	.-376    	; 0x36c0 <__fp_inf>
    3838:	49 cf       	rjmp	.-366    	; 0x36cc <__fp_nan>
    383a:	11 24       	eor	r1, r1
    383c:	ea cf       	rjmp	.-44     	; 0x3812 <__fp_szero>

0000383e <__mulsf3x>:
    383e:	c6 df       	rcall	.-116    	; 0x37cc <__fp_split3>
    3840:	a0 f3       	brcs	.-24     	; 0x382a <__mulsf3+0x4>

00003842 <__mulsf3_pse>:
    3842:	95 9f       	mul	r25, r21
    3844:	d1 f3       	breq	.-12     	; 0x383a <__mulsf3+0x14>
    3846:	95 0f       	add	r25, r21
    3848:	50 e0       	ldi	r21, 0x00	; 0
    384a:	55 1f       	adc	r21, r21
    384c:	62 9f       	mul	r22, r18
    384e:	f0 01       	movw	r30, r0
    3850:	72 9f       	mul	r23, r18
    3852:	bb 27       	eor	r27, r27
    3854:	f0 0d       	add	r31, r0
    3856:	b1 1d       	adc	r27, r1
    3858:	63 9f       	mul	r22, r19
    385a:	aa 27       	eor	r26, r26
    385c:	f0 0d       	add	r31, r0
    385e:	b1 1d       	adc	r27, r1
    3860:	aa 1f       	adc	r26, r26
    3862:	64 9f       	mul	r22, r20
    3864:	66 27       	eor	r22, r22
    3866:	b0 0d       	add	r27, r0
    3868:	a1 1d       	adc	r26, r1
    386a:	66 1f       	adc	r22, r22
    386c:	82 9f       	mul	r24, r18
    386e:	22 27       	eor	r18, r18
    3870:	b0 0d       	add	r27, r0
    3872:	a1 1d       	adc	r26, r1
    3874:	62 1f       	adc	r22, r18
    3876:	73 9f       	mul	r23, r19
    3878:	b0 0d       	add	r27, r0
    387a:	a1 1d       	adc	r26, r1
    387c:	62 1f       	adc	r22, r18
    387e:	83 9f       	mul	r24, r19
    3880:	a0 0d       	add	r26, r0
    3882:	61 1d       	adc	r22, r1
    3884:	22 1f       	adc	r18, r18
    3886:	74 9f       	mul	r23, r20
    3888:	33 27       	eor	r19, r19
    388a:	a0 0d       	add	r26, r0
    388c:	61 1d       	adc	r22, r1
    388e:	23 1f       	adc	r18, r19
    3890:	84 9f       	mul	r24, r20
    3892:	60 0d       	add	r22, r0
    3894:	21 1d       	adc	r18, r1
    3896:	82 2f       	mov	r24, r18
    3898:	76 2f       	mov	r23, r22
    389a:	6a 2f       	mov	r22, r26
    389c:	11 24       	eor	r1, r1
    389e:	9f 57       	subi	r25, 0x7F	; 127
    38a0:	50 40       	sbci	r21, 0x00	; 0
    38a2:	8a f0       	brmi	.+34     	; 0x38c6 <__mulsf3_pse+0x84>
    38a4:	e1 f0       	breq	.+56     	; 0x38de <__mulsf3_pse+0x9c>
    38a6:	88 23       	and	r24, r24
    38a8:	4a f0       	brmi	.+18     	; 0x38bc <__mulsf3_pse+0x7a>
    38aa:	ee 0f       	add	r30, r30
    38ac:	ff 1f       	adc	r31, r31
    38ae:	bb 1f       	adc	r27, r27
    38b0:	66 1f       	adc	r22, r22
    38b2:	77 1f       	adc	r23, r23
    38b4:	88 1f       	adc	r24, r24
    38b6:	91 50       	subi	r25, 0x01	; 1
    38b8:	50 40       	sbci	r21, 0x00	; 0
    38ba:	a9 f7       	brne	.-22     	; 0x38a6 <__mulsf3_pse+0x64>
    38bc:	9e 3f       	cpi	r25, 0xFE	; 254
    38be:	51 05       	cpc	r21, r1
    38c0:	70 f0       	brcs	.+28     	; 0x38de <__mulsf3_pse+0x9c>
    38c2:	fe ce       	rjmp	.-516    	; 0x36c0 <__fp_inf>
    38c4:	a6 cf       	rjmp	.-180    	; 0x3812 <__fp_szero>
    38c6:	5f 3f       	cpi	r21, 0xFF	; 255
    38c8:	ec f3       	brlt	.-6      	; 0x38c4 <__mulsf3_pse+0x82>
    38ca:	98 3e       	cpi	r25, 0xE8	; 232
    38cc:	dc f3       	brlt	.-10     	; 0x38c4 <__mulsf3_pse+0x82>
    38ce:	86 95       	lsr	r24
    38d0:	77 95       	ror	r23
    38d2:	67 95       	ror	r22
    38d4:	b7 95       	ror	r27
    38d6:	f7 95       	ror	r31
    38d8:	e7 95       	ror	r30
    38da:	9f 5f       	subi	r25, 0xFF	; 255
    38dc:	c1 f7       	brne	.-16     	; 0x38ce <__mulsf3_pse+0x8c>
    38de:	fe 2b       	or	r31, r30
    38e0:	88 0f       	add	r24, r24
    38e2:	91 1d       	adc	r25, r1
    38e4:	96 95       	lsr	r25
    38e6:	87 95       	ror	r24
    38e8:	97 f9       	bld	r25, 7
    38ea:	08 95       	ret

000038ec <sin>:
    38ec:	9f 93       	push	r25
    38ee:	25 df       	rcall	.-438    	; 0x373a <__fp_rempio2>
    38f0:	0f 90       	pop	r0
    38f2:	07 fc       	sbrc	r0, 7
    38f4:	ee 5f       	subi	r30, 0xFE	; 254
    38f6:	59 cf       	rjmp	.-334    	; 0x37aa <__fp_sinus>

000038f8 <__fp_mpack>:
    38f8:	9f 3f       	cpi	r25, 0xFF	; 255
    38fa:	31 f0       	breq	.+12     	; 0x3908 <__fp_mpack_finite+0xc>

000038fc <__fp_mpack_finite>:
    38fc:	91 50       	subi	r25, 0x01	; 1
    38fe:	20 f4       	brcc	.+8      	; 0x3908 <__fp_mpack_finite+0xc>
    3900:	87 95       	ror	r24
    3902:	77 95       	ror	r23
    3904:	67 95       	ror	r22
    3906:	b7 95       	ror	r27
    3908:	88 0f       	add	r24, r24
    390a:	91 1d       	adc	r25, r1
    390c:	96 95       	lsr	r25
    390e:	87 95       	ror	r24
    3910:	97 f9       	bld	r25, 7
    3912:	08 95       	ret

00003914 <__fp_powsodd>:
    3914:	9f 93       	push	r25
    3916:	8f 93       	push	r24
    3918:	7f 93       	push	r23
    391a:	6f 93       	push	r22
    391c:	ff 93       	push	r31
    391e:	ef 93       	push	r30
    3920:	9b 01       	movw	r18, r22
    3922:	ac 01       	movw	r20, r24
    3924:	80 df       	rcall	.-256    	; 0x3826 <__mulsf3>
    3926:	ef 91       	pop	r30
    3928:	ff 91       	pop	r31
    392a:	d3 de       	rcall	.-602    	; 0x36d2 <__fp_powser>
    392c:	2f 91       	pop	r18
    392e:	3f 91       	pop	r19
    3930:	4f 91       	pop	r20
    3932:	5f 91       	pop	r21
    3934:	78 cf       	rjmp	.-272    	; 0x3826 <__mulsf3>

00003936 <vfprintf>:
    3936:	2f 92       	push	r2
    3938:	3f 92       	push	r3
    393a:	4f 92       	push	r4
    393c:	5f 92       	push	r5
    393e:	6f 92       	push	r6
    3940:	7f 92       	push	r7
    3942:	8f 92       	push	r8
    3944:	9f 92       	push	r9
    3946:	af 92       	push	r10
    3948:	bf 92       	push	r11
    394a:	cf 92       	push	r12
    394c:	df 92       	push	r13
    394e:	ef 92       	push	r14
    3950:	ff 92       	push	r15
    3952:	0f 93       	push	r16
    3954:	1f 93       	push	r17
    3956:	cf 93       	push	r28
    3958:	df 93       	push	r29
    395a:	cd b7       	in	r28, 0x3d	; 61
    395c:	de b7       	in	r29, 0x3e	; 62
    395e:	63 97       	sbiw	r28, 0x13	; 19
    3960:	0f b6       	in	r0, 0x3f	; 63
    3962:	f8 94       	cli
    3964:	de bf       	out	0x3e, r29	; 62
    3966:	0f be       	out	0x3f, r0	; 63
    3968:	cd bf       	out	0x3d, r28	; 61
    396a:	6c 01       	movw	r12, r24
    396c:	4b 01       	movw	r8, r22
    396e:	2a 01       	movw	r4, r20
    3970:	fc 01       	movw	r30, r24
    3972:	17 82       	std	Z+7, r1	; 0x07
    3974:	16 82       	std	Z+6, r1	; 0x06
    3976:	83 81       	ldd	r24, Z+3	; 0x03
    3978:	81 ff       	sbrs	r24, 1
    397a:	29 c3       	rjmp	.+1618   	; 0x3fce <vfprintf+0x698>
    397c:	ae 01       	movw	r20, r28
    397e:	4f 5f       	subi	r20, 0xFF	; 255
    3980:	5f 4f       	sbci	r21, 0xFF	; 255
    3982:	3a 01       	movw	r6, r20
    3984:	f6 01       	movw	r30, r12
    3986:	93 81       	ldd	r25, Z+3	; 0x03
    3988:	f4 01       	movw	r30, r8
    398a:	93 fd       	sbrc	r25, 3
    398c:	85 91       	lpm	r24, Z+
    398e:	93 ff       	sbrs	r25, 3
    3990:	81 91       	ld	r24, Z+
    3992:	4f 01       	movw	r8, r30
    3994:	88 23       	and	r24, r24
    3996:	09 f4       	brne	.+2      	; 0x399a <vfprintf+0x64>
    3998:	16 c3       	rjmp	.+1580   	; 0x3fc6 <vfprintf+0x690>
    399a:	85 32       	cpi	r24, 0x25	; 37
    399c:	39 f4       	brne	.+14     	; 0x39ac <vfprintf+0x76>
    399e:	93 fd       	sbrc	r25, 3
    39a0:	85 91       	lpm	r24, Z+
    39a2:	93 ff       	sbrs	r25, 3
    39a4:	81 91       	ld	r24, Z+
    39a6:	4f 01       	movw	r8, r30
    39a8:	85 32       	cpi	r24, 0x25	; 37
    39aa:	31 f4       	brne	.+12     	; 0x39b8 <vfprintf+0x82>
    39ac:	b6 01       	movw	r22, r12
    39ae:	90 e0       	ldi	r25, 0x00	; 0
    39b0:	90 d5       	rcall	.+2848   	; 0x44d2 <fputc>
    39b2:	52 01       	movw	r10, r4
    39b4:	25 01       	movw	r4, r10
    39b6:	e6 cf       	rjmp	.-52     	; 0x3984 <vfprintf+0x4e>
    39b8:	10 e0       	ldi	r17, 0x00	; 0
    39ba:	f1 2c       	mov	r15, r1
    39bc:	20 e0       	ldi	r18, 0x00	; 0
    39be:	20 32       	cpi	r18, 0x20	; 32
    39c0:	a0 f4       	brcc	.+40     	; 0x39ea <vfprintf+0xb4>
    39c2:	8b 32       	cpi	r24, 0x2B	; 43
    39c4:	69 f0       	breq	.+26     	; 0x39e0 <vfprintf+0xaa>
    39c6:	30 f4       	brcc	.+12     	; 0x39d4 <vfprintf+0x9e>
    39c8:	80 32       	cpi	r24, 0x20	; 32
    39ca:	59 f0       	breq	.+22     	; 0x39e2 <vfprintf+0xac>
    39cc:	83 32       	cpi	r24, 0x23	; 35
    39ce:	69 f4       	brne	.+26     	; 0x39ea <vfprintf+0xb4>
    39d0:	20 61       	ori	r18, 0x10	; 16
    39d2:	2c c0       	rjmp	.+88     	; 0x3a2c <vfprintf+0xf6>
    39d4:	8d 32       	cpi	r24, 0x2D	; 45
    39d6:	39 f0       	breq	.+14     	; 0x39e6 <vfprintf+0xb0>
    39d8:	80 33       	cpi	r24, 0x30	; 48
    39da:	39 f4       	brne	.+14     	; 0x39ea <vfprintf+0xb4>
    39dc:	21 60       	ori	r18, 0x01	; 1
    39de:	26 c0       	rjmp	.+76     	; 0x3a2c <vfprintf+0xf6>
    39e0:	22 60       	ori	r18, 0x02	; 2
    39e2:	24 60       	ori	r18, 0x04	; 4
    39e4:	23 c0       	rjmp	.+70     	; 0x3a2c <vfprintf+0xf6>
    39e6:	28 60       	ori	r18, 0x08	; 8
    39e8:	21 c0       	rjmp	.+66     	; 0x3a2c <vfprintf+0xf6>
    39ea:	27 fd       	sbrc	r18, 7
    39ec:	27 c0       	rjmp	.+78     	; 0x3a3c <vfprintf+0x106>
    39ee:	30 ed       	ldi	r19, 0xD0	; 208
    39f0:	38 0f       	add	r19, r24
    39f2:	3a 30       	cpi	r19, 0x0A	; 10
    39f4:	78 f4       	brcc	.+30     	; 0x3a14 <vfprintf+0xde>
    39f6:	26 ff       	sbrs	r18, 6
    39f8:	06 c0       	rjmp	.+12     	; 0x3a06 <vfprintf+0xd0>
    39fa:	fa e0       	ldi	r31, 0x0A	; 10
    39fc:	1f 9f       	mul	r17, r31
    39fe:	30 0d       	add	r19, r0
    3a00:	11 24       	eor	r1, r1
    3a02:	13 2f       	mov	r17, r19
    3a04:	13 c0       	rjmp	.+38     	; 0x3a2c <vfprintf+0xf6>
    3a06:	4a e0       	ldi	r20, 0x0A	; 10
    3a08:	f4 9e       	mul	r15, r20
    3a0a:	30 0d       	add	r19, r0
    3a0c:	11 24       	eor	r1, r1
    3a0e:	f3 2e       	mov	r15, r19
    3a10:	20 62       	ori	r18, 0x20	; 32
    3a12:	0c c0       	rjmp	.+24     	; 0x3a2c <vfprintf+0xf6>
    3a14:	8e 32       	cpi	r24, 0x2E	; 46
    3a16:	21 f4       	brne	.+8      	; 0x3a20 <vfprintf+0xea>
    3a18:	26 fd       	sbrc	r18, 6
    3a1a:	d5 c2       	rjmp	.+1450   	; 0x3fc6 <vfprintf+0x690>
    3a1c:	20 64       	ori	r18, 0x40	; 64
    3a1e:	06 c0       	rjmp	.+12     	; 0x3a2c <vfprintf+0xf6>
    3a20:	8c 36       	cpi	r24, 0x6C	; 108
    3a22:	11 f4       	brne	.+4      	; 0x3a28 <vfprintf+0xf2>
    3a24:	20 68       	ori	r18, 0x80	; 128
    3a26:	02 c0       	rjmp	.+4      	; 0x3a2c <vfprintf+0xf6>
    3a28:	88 36       	cpi	r24, 0x68	; 104
    3a2a:	41 f4       	brne	.+16     	; 0x3a3c <vfprintf+0x106>
    3a2c:	f4 01       	movw	r30, r8
    3a2e:	93 fd       	sbrc	r25, 3
    3a30:	85 91       	lpm	r24, Z+
    3a32:	93 ff       	sbrs	r25, 3
    3a34:	81 91       	ld	r24, Z+
    3a36:	4f 01       	movw	r8, r30
    3a38:	81 11       	cpse	r24, r1
    3a3a:	c1 cf       	rjmp	.-126    	; 0x39be <vfprintf+0x88>
    3a3c:	9b eb       	ldi	r25, 0xBB	; 187
    3a3e:	98 0f       	add	r25, r24
    3a40:	93 30       	cpi	r25, 0x03	; 3
    3a42:	18 f4       	brcc	.+6      	; 0x3a4a <vfprintf+0x114>
    3a44:	20 61       	ori	r18, 0x10	; 16
    3a46:	80 5e       	subi	r24, 0xE0	; 224
    3a48:	06 c0       	rjmp	.+12     	; 0x3a56 <vfprintf+0x120>
    3a4a:	9b e9       	ldi	r25, 0x9B	; 155
    3a4c:	98 0f       	add	r25, r24
    3a4e:	93 30       	cpi	r25, 0x03	; 3
    3a50:	08 f0       	brcs	.+2      	; 0x3a54 <vfprintf+0x11e>
    3a52:	64 c1       	rjmp	.+712    	; 0x3d1c <vfprintf+0x3e6>
    3a54:	2f 7e       	andi	r18, 0xEF	; 239
    3a56:	26 ff       	sbrs	r18, 6
    3a58:	16 e0       	ldi	r17, 0x06	; 6
    3a5a:	2f 73       	andi	r18, 0x3F	; 63
    3a5c:	32 2e       	mov	r3, r18
    3a5e:	85 36       	cpi	r24, 0x65	; 101
    3a60:	19 f4       	brne	.+6      	; 0x3a68 <vfprintf+0x132>
    3a62:	20 64       	ori	r18, 0x40	; 64
    3a64:	32 2e       	mov	r3, r18
    3a66:	08 c0       	rjmp	.+16     	; 0x3a78 <vfprintf+0x142>
    3a68:	86 36       	cpi	r24, 0x66	; 102
    3a6a:	21 f4       	brne	.+8      	; 0x3a74 <vfprintf+0x13e>
    3a6c:	f2 2f       	mov	r31, r18
    3a6e:	f0 68       	ori	r31, 0x80	; 128
    3a70:	3f 2e       	mov	r3, r31
    3a72:	02 c0       	rjmp	.+4      	; 0x3a78 <vfprintf+0x142>
    3a74:	11 11       	cpse	r17, r1
    3a76:	11 50       	subi	r17, 0x01	; 1
    3a78:	37 fe       	sbrs	r3, 7
    3a7a:	07 c0       	rjmp	.+14     	; 0x3a8a <vfprintf+0x154>
    3a7c:	1c 33       	cpi	r17, 0x3C	; 60
    3a7e:	50 f4       	brcc	.+20     	; 0x3a94 <vfprintf+0x15e>
    3a80:	ee 24       	eor	r14, r14
    3a82:	e3 94       	inc	r14
    3a84:	e1 0e       	add	r14, r17
    3a86:	27 e0       	ldi	r18, 0x07	; 7
    3a88:	0b c0       	rjmp	.+22     	; 0x3aa0 <vfprintf+0x16a>
    3a8a:	18 30       	cpi	r17, 0x08	; 8
    3a8c:	38 f0       	brcs	.+14     	; 0x3a9c <vfprintf+0x166>
    3a8e:	27 e0       	ldi	r18, 0x07	; 7
    3a90:	17 e0       	ldi	r17, 0x07	; 7
    3a92:	05 c0       	rjmp	.+10     	; 0x3a9e <vfprintf+0x168>
    3a94:	27 e0       	ldi	r18, 0x07	; 7
    3a96:	4c e3       	ldi	r20, 0x3C	; 60
    3a98:	e4 2e       	mov	r14, r20
    3a9a:	02 c0       	rjmp	.+4      	; 0x3aa0 <vfprintf+0x16a>
    3a9c:	21 2f       	mov	r18, r17
    3a9e:	e1 2c       	mov	r14, r1
    3aa0:	52 01       	movw	r10, r4
    3aa2:	44 e0       	ldi	r20, 0x04	; 4
    3aa4:	a4 0e       	add	r10, r20
    3aa6:	b1 1c       	adc	r11, r1
    3aa8:	f2 01       	movw	r30, r4
    3aaa:	60 81       	ld	r22, Z
    3aac:	71 81       	ldd	r23, Z+1	; 0x01
    3aae:	82 81       	ldd	r24, Z+2	; 0x02
    3ab0:	93 81       	ldd	r25, Z+3	; 0x03
    3ab2:	0e 2d       	mov	r16, r14
    3ab4:	a3 01       	movw	r20, r6
    3ab6:	1f d4       	rcall	.+2110   	; 0x42f6 <__ftoa_engine>
    3ab8:	2c 01       	movw	r4, r24
    3aba:	09 81       	ldd	r16, Y+1	; 0x01
    3abc:	00 ff       	sbrs	r16, 0
    3abe:	02 c0       	rjmp	.+4      	; 0x3ac4 <vfprintf+0x18e>
    3ac0:	03 ff       	sbrs	r16, 3
    3ac2:	07 c0       	rjmp	.+14     	; 0x3ad2 <vfprintf+0x19c>
    3ac4:	31 fc       	sbrc	r3, 1
    3ac6:	08 c0       	rjmp	.+16     	; 0x3ad8 <vfprintf+0x1a2>
    3ac8:	32 fe       	sbrs	r3, 2
    3aca:	09 c0       	rjmp	.+18     	; 0x3ade <vfprintf+0x1a8>
    3acc:	30 e2       	ldi	r19, 0x20	; 32
    3ace:	23 2e       	mov	r2, r19
    3ad0:	07 c0       	rjmp	.+14     	; 0x3ae0 <vfprintf+0x1aa>
    3ad2:	2d e2       	ldi	r18, 0x2D	; 45
    3ad4:	22 2e       	mov	r2, r18
    3ad6:	04 c0       	rjmp	.+8      	; 0x3ae0 <vfprintf+0x1aa>
    3ad8:	9b e2       	ldi	r25, 0x2B	; 43
    3ada:	29 2e       	mov	r2, r25
    3adc:	01 c0       	rjmp	.+2      	; 0x3ae0 <vfprintf+0x1aa>
    3ade:	21 2c       	mov	r2, r1
    3ae0:	80 2f       	mov	r24, r16
    3ae2:	8c 70       	andi	r24, 0x0C	; 12
    3ae4:	19 f0       	breq	.+6      	; 0x3aec <vfprintf+0x1b6>
    3ae6:	21 10       	cpse	r2, r1
    3ae8:	51 c2       	rjmp	.+1186   	; 0x3f8c <vfprintf+0x656>
    3aea:	8d c2       	rjmp	.+1306   	; 0x4006 <vfprintf+0x6d0>
    3aec:	37 fe       	sbrs	r3, 7
    3aee:	0f c0       	rjmp	.+30     	; 0x3b0e <vfprintf+0x1d8>
    3af0:	e4 0c       	add	r14, r4
    3af2:	04 ff       	sbrs	r16, 4
    3af4:	04 c0       	rjmp	.+8      	; 0x3afe <vfprintf+0x1c8>
    3af6:	8a 81       	ldd	r24, Y+2	; 0x02
    3af8:	81 33       	cpi	r24, 0x31	; 49
    3afa:	09 f4       	brne	.+2      	; 0x3afe <vfprintf+0x1c8>
    3afc:	ea 94       	dec	r14
    3afe:	1e 14       	cp	r1, r14
    3b00:	74 f5       	brge	.+92     	; 0x3b5e <vfprintf+0x228>
    3b02:	f8 e0       	ldi	r31, 0x08	; 8
    3b04:	fe 15       	cp	r31, r14
    3b06:	78 f5       	brcc	.+94     	; 0x3b66 <vfprintf+0x230>
    3b08:	88 e0       	ldi	r24, 0x08	; 8
    3b0a:	e8 2e       	mov	r14, r24
    3b0c:	2c c0       	rjmp	.+88     	; 0x3b66 <vfprintf+0x230>
    3b0e:	36 fc       	sbrc	r3, 6
    3b10:	2a c0       	rjmp	.+84     	; 0x3b66 <vfprintf+0x230>
    3b12:	81 2f       	mov	r24, r17
    3b14:	90 e0       	ldi	r25, 0x00	; 0
    3b16:	84 15       	cp	r24, r4
    3b18:	95 05       	cpc	r25, r5
    3b1a:	9c f0       	brlt	.+38     	; 0x3b42 <vfprintf+0x20c>
    3b1c:	2c ef       	ldi	r18, 0xFC	; 252
    3b1e:	42 16       	cp	r4, r18
    3b20:	2f ef       	ldi	r18, 0xFF	; 255
    3b22:	52 06       	cpc	r5, r18
    3b24:	74 f0       	brlt	.+28     	; 0x3b42 <vfprintf+0x20c>
    3b26:	43 2d       	mov	r20, r3
    3b28:	40 68       	ori	r20, 0x80	; 128
    3b2a:	34 2e       	mov	r3, r20
    3b2c:	0a c0       	rjmp	.+20     	; 0x3b42 <vfprintf+0x20c>
    3b2e:	e2 e0       	ldi	r30, 0x02	; 2
    3b30:	f0 e0       	ldi	r31, 0x00	; 0
    3b32:	ec 0f       	add	r30, r28
    3b34:	fd 1f       	adc	r31, r29
    3b36:	e1 0f       	add	r30, r17
    3b38:	f1 1d       	adc	r31, r1
    3b3a:	80 81       	ld	r24, Z
    3b3c:	80 33       	cpi	r24, 0x30	; 48
    3b3e:	19 f4       	brne	.+6      	; 0x3b46 <vfprintf+0x210>
    3b40:	11 50       	subi	r17, 0x01	; 1
    3b42:	11 11       	cpse	r17, r1
    3b44:	f4 cf       	rjmp	.-24     	; 0x3b2e <vfprintf+0x1f8>
    3b46:	37 fe       	sbrs	r3, 7
    3b48:	0e c0       	rjmp	.+28     	; 0x3b66 <vfprintf+0x230>
    3b4a:	ee 24       	eor	r14, r14
    3b4c:	e3 94       	inc	r14
    3b4e:	e1 0e       	add	r14, r17
    3b50:	81 2f       	mov	r24, r17
    3b52:	90 e0       	ldi	r25, 0x00	; 0
    3b54:	48 16       	cp	r4, r24
    3b56:	59 06       	cpc	r5, r25
    3b58:	2c f4       	brge	.+10     	; 0x3b64 <vfprintf+0x22e>
    3b5a:	14 19       	sub	r17, r4
    3b5c:	04 c0       	rjmp	.+8      	; 0x3b66 <vfprintf+0x230>
    3b5e:	ee 24       	eor	r14, r14
    3b60:	e3 94       	inc	r14
    3b62:	01 c0       	rjmp	.+2      	; 0x3b66 <vfprintf+0x230>
    3b64:	10 e0       	ldi	r17, 0x00	; 0
    3b66:	37 fe       	sbrs	r3, 7
    3b68:	06 c0       	rjmp	.+12     	; 0x3b76 <vfprintf+0x240>
    3b6a:	14 14       	cp	r1, r4
    3b6c:	15 04       	cpc	r1, r5
    3b6e:	34 f4       	brge	.+12     	; 0x3b7c <vfprintf+0x246>
    3b70:	c2 01       	movw	r24, r4
    3b72:	01 96       	adiw	r24, 0x01	; 1
    3b74:	05 c0       	rjmp	.+10     	; 0x3b80 <vfprintf+0x24a>
    3b76:	85 e0       	ldi	r24, 0x05	; 5
    3b78:	90 e0       	ldi	r25, 0x00	; 0
    3b7a:	02 c0       	rjmp	.+4      	; 0x3b80 <vfprintf+0x24a>
    3b7c:	81 e0       	ldi	r24, 0x01	; 1
    3b7e:	90 e0       	ldi	r25, 0x00	; 0
    3b80:	21 10       	cpse	r2, r1
    3b82:	01 96       	adiw	r24, 0x01	; 1
    3b84:	11 23       	and	r17, r17
    3b86:	31 f0       	breq	.+12     	; 0x3b94 <vfprintf+0x25e>
    3b88:	21 2f       	mov	r18, r17
    3b8a:	30 e0       	ldi	r19, 0x00	; 0
    3b8c:	2f 5f       	subi	r18, 0xFF	; 255
    3b8e:	3f 4f       	sbci	r19, 0xFF	; 255
    3b90:	82 0f       	add	r24, r18
    3b92:	93 1f       	adc	r25, r19
    3b94:	2f 2d       	mov	r18, r15
    3b96:	30 e0       	ldi	r19, 0x00	; 0
    3b98:	82 17       	cp	r24, r18
    3b9a:	93 07       	cpc	r25, r19
    3b9c:	14 f4       	brge	.+4      	; 0x3ba2 <vfprintf+0x26c>
    3b9e:	f8 1a       	sub	r15, r24
    3ba0:	01 c0       	rjmp	.+2      	; 0x3ba4 <vfprintf+0x26e>
    3ba2:	f1 2c       	mov	r15, r1
    3ba4:	83 2d       	mov	r24, r3
    3ba6:	89 70       	andi	r24, 0x09	; 9
    3ba8:	41 f4       	brne	.+16     	; 0x3bba <vfprintf+0x284>
    3baa:	ff 20       	and	r15, r15
    3bac:	31 f0       	breq	.+12     	; 0x3bba <vfprintf+0x284>
    3bae:	b6 01       	movw	r22, r12
    3bb0:	80 e2       	ldi	r24, 0x20	; 32
    3bb2:	90 e0       	ldi	r25, 0x00	; 0
    3bb4:	8e d4       	rcall	.+2332   	; 0x44d2 <fputc>
    3bb6:	fa 94       	dec	r15
    3bb8:	f8 cf       	rjmp	.-16     	; 0x3baa <vfprintf+0x274>
    3bba:	22 20       	and	r2, r2
    3bbc:	21 f0       	breq	.+8      	; 0x3bc6 <vfprintf+0x290>
    3bbe:	b6 01       	movw	r22, r12
    3bc0:	82 2d       	mov	r24, r2
    3bc2:	90 e0       	ldi	r25, 0x00	; 0
    3bc4:	86 d4       	rcall	.+2316   	; 0x44d2 <fputc>
    3bc6:	33 fc       	sbrc	r3, 3
    3bc8:	08 c0       	rjmp	.+16     	; 0x3bda <vfprintf+0x2a4>
    3bca:	ff 20       	and	r15, r15
    3bcc:	31 f0       	breq	.+12     	; 0x3bda <vfprintf+0x2a4>
    3bce:	b6 01       	movw	r22, r12
    3bd0:	80 e3       	ldi	r24, 0x30	; 48
    3bd2:	90 e0       	ldi	r25, 0x00	; 0
    3bd4:	7e d4       	rcall	.+2300   	; 0x44d2 <fputc>
    3bd6:	fa 94       	dec	r15
    3bd8:	f8 cf       	rjmp	.-16     	; 0x3bca <vfprintf+0x294>
    3bda:	37 fe       	sbrs	r3, 7
    3bdc:	58 c0       	rjmp	.+176    	; 0x3c8e <vfprintf+0x358>
    3bde:	94 2d       	mov	r25, r4
    3be0:	85 2d       	mov	r24, r5
    3be2:	57 fe       	sbrs	r5, 7
    3be4:	02 c0       	rjmp	.+4      	; 0x3bea <vfprintf+0x2b4>
    3be6:	90 e0       	ldi	r25, 0x00	; 0
    3be8:	80 e0       	ldi	r24, 0x00	; 0
    3bea:	29 2e       	mov	r2, r25
    3bec:	38 2e       	mov	r3, r24
    3bee:	20 e0       	ldi	r18, 0x00	; 0
    3bf0:	30 e0       	ldi	r19, 0x00	; 0
    3bf2:	a2 01       	movw	r20, r4
    3bf4:	4e 19       	sub	r20, r14
    3bf6:	51 09       	sbc	r21, r1
    3bf8:	5d 87       	std	Y+13, r21	; 0x0d
    3bfa:	4c 87       	std	Y+12, r20	; 0x0c
    3bfc:	a2 01       	movw	r20, r4
    3bfe:	42 19       	sub	r20, r2
    3c00:	53 09       	sbc	r21, r3
    3c02:	5f 87       	std	Y+15, r21	; 0x0f
    3c04:	4e 87       	std	Y+14, r20	; 0x0e
    3c06:	61 2f       	mov	r22, r17
    3c08:	70 e0       	ldi	r23, 0x00	; 0
    3c0a:	44 27       	eor	r20, r20
    3c0c:	55 27       	eor	r21, r21
    3c0e:	46 1b       	sub	r20, r22
    3c10:	57 0b       	sbc	r21, r23
    3c12:	59 8b       	std	Y+17, r21	; 0x11
    3c14:	48 8b       	std	Y+16, r20	; 0x10
    3c16:	5f ef       	ldi	r21, 0xFF	; 255
    3c18:	25 16       	cp	r2, r21
    3c1a:	35 06       	cpc	r3, r21
    3c1c:	41 f4       	brne	.+16     	; 0x3c2e <vfprintf+0x2f8>
    3c1e:	b6 01       	movw	r22, r12
    3c20:	8e e2       	ldi	r24, 0x2E	; 46
    3c22:	90 e0       	ldi	r25, 0x00	; 0
    3c24:	2a 8b       	std	Y+18, r18	; 0x12
    3c26:	3b 8b       	std	Y+19, r19	; 0x13
    3c28:	54 d4       	rcall	.+2216   	; 0x44d2 <fputc>
    3c2a:	3b 89       	ldd	r19, Y+19	; 0x13
    3c2c:	2a 89       	ldd	r18, Y+18	; 0x12
    3c2e:	42 14       	cp	r4, r2
    3c30:	53 04       	cpc	r5, r3
    3c32:	6c f0       	brlt	.+26     	; 0x3c4e <vfprintf+0x318>
    3c34:	4c 85       	ldd	r20, Y+12	; 0x0c
    3c36:	5d 85       	ldd	r21, Y+13	; 0x0d
    3c38:	42 15       	cp	r20, r2
    3c3a:	53 05       	cpc	r21, r3
    3c3c:	44 f4       	brge	.+16     	; 0x3c4e <vfprintf+0x318>
    3c3e:	ee 85       	ldd	r30, Y+14	; 0x0e
    3c40:	ff 85       	ldd	r31, Y+15	; 0x0f
    3c42:	e2 0f       	add	r30, r18
    3c44:	f3 1f       	adc	r31, r19
    3c46:	e6 0d       	add	r30, r6
    3c48:	f7 1d       	adc	r31, r7
    3c4a:	81 81       	ldd	r24, Z+1	; 0x01
    3c4c:	01 c0       	rjmp	.+2      	; 0x3c50 <vfprintf+0x31a>
    3c4e:	80 e3       	ldi	r24, 0x30	; 48
    3c50:	51 e0       	ldi	r21, 0x01	; 1
    3c52:	25 1a       	sub	r2, r21
    3c54:	31 08       	sbc	r3, r1
    3c56:	2f 5f       	subi	r18, 0xFF	; 255
    3c58:	3f 4f       	sbci	r19, 0xFF	; 255
    3c5a:	48 89       	ldd	r20, Y+16	; 0x10
    3c5c:	59 89       	ldd	r21, Y+17	; 0x11
    3c5e:	24 16       	cp	r2, r20
    3c60:	35 06       	cpc	r3, r21
    3c62:	44 f0       	brlt	.+16     	; 0x3c74 <vfprintf+0x33e>
    3c64:	b6 01       	movw	r22, r12
    3c66:	90 e0       	ldi	r25, 0x00	; 0
    3c68:	2a 8b       	std	Y+18, r18	; 0x12
    3c6a:	3b 8b       	std	Y+19, r19	; 0x13
    3c6c:	32 d4       	rcall	.+2148   	; 0x44d2 <fputc>
    3c6e:	2a 89       	ldd	r18, Y+18	; 0x12
    3c70:	3b 89       	ldd	r19, Y+19	; 0x13
    3c72:	d1 cf       	rjmp	.-94     	; 0x3c16 <vfprintf+0x2e0>
    3c74:	24 14       	cp	r2, r4
    3c76:	35 04       	cpc	r3, r5
    3c78:	39 f4       	brne	.+14     	; 0x3c88 <vfprintf+0x352>
    3c7a:	9a 81       	ldd	r25, Y+2	; 0x02
    3c7c:	96 33       	cpi	r25, 0x36	; 54
    3c7e:	18 f4       	brcc	.+6      	; 0x3c86 <vfprintf+0x350>
    3c80:	95 33       	cpi	r25, 0x35	; 53
    3c82:	11 f4       	brne	.+4      	; 0x3c88 <vfprintf+0x352>
    3c84:	04 ff       	sbrs	r16, 4
    3c86:	81 e3       	ldi	r24, 0x31	; 49
    3c88:	b6 01       	movw	r22, r12
    3c8a:	90 e0       	ldi	r25, 0x00	; 0
    3c8c:	45 c0       	rjmp	.+138    	; 0x3d18 <vfprintf+0x3e2>
    3c8e:	8a 81       	ldd	r24, Y+2	; 0x02
    3c90:	81 33       	cpi	r24, 0x31	; 49
    3c92:	09 f0       	breq	.+2      	; 0x3c96 <vfprintf+0x360>
    3c94:	0f 7e       	andi	r16, 0xEF	; 239
    3c96:	b6 01       	movw	r22, r12
    3c98:	90 e0       	ldi	r25, 0x00	; 0
    3c9a:	1b d4       	rcall	.+2102   	; 0x44d2 <fputc>
    3c9c:	11 11       	cpse	r17, r1
    3c9e:	05 c0       	rjmp	.+10     	; 0x3caa <vfprintf+0x374>
    3ca0:	34 fc       	sbrc	r3, 4
    3ca2:	16 c0       	rjmp	.+44     	; 0x3cd0 <vfprintf+0x39a>
    3ca4:	85 e6       	ldi	r24, 0x65	; 101
    3ca6:	90 e0       	ldi	r25, 0x00	; 0
    3ca8:	15 c0       	rjmp	.+42     	; 0x3cd4 <vfprintf+0x39e>
    3caa:	b6 01       	movw	r22, r12
    3cac:	8e e2       	ldi	r24, 0x2E	; 46
    3cae:	90 e0       	ldi	r25, 0x00	; 0
    3cb0:	10 d4       	rcall	.+2080   	; 0x44d2 <fputc>
    3cb2:	82 e0       	ldi	r24, 0x02	; 2
    3cb4:	ee 24       	eor	r14, r14
    3cb6:	e3 94       	inc	r14
    3cb8:	e8 0e       	add	r14, r24
    3cba:	f3 01       	movw	r30, r6
    3cbc:	e8 0f       	add	r30, r24
    3cbe:	f1 1d       	adc	r31, r1
    3cc0:	80 81       	ld	r24, Z
    3cc2:	b6 01       	movw	r22, r12
    3cc4:	90 e0       	ldi	r25, 0x00	; 0
    3cc6:	05 d4       	rcall	.+2058   	; 0x44d2 <fputc>
    3cc8:	11 50       	subi	r17, 0x01	; 1
    3cca:	8e 2d       	mov	r24, r14
    3ccc:	99 f7       	brne	.-26     	; 0x3cb4 <vfprintf+0x37e>
    3cce:	e8 cf       	rjmp	.-48     	; 0x3ca0 <vfprintf+0x36a>
    3cd0:	85 e4       	ldi	r24, 0x45	; 69
    3cd2:	90 e0       	ldi	r25, 0x00	; 0
    3cd4:	b6 01       	movw	r22, r12
    3cd6:	fd d3       	rcall	.+2042   	; 0x44d2 <fputc>
    3cd8:	57 fc       	sbrc	r5, 7
    3cda:	05 c0       	rjmp	.+10     	; 0x3ce6 <vfprintf+0x3b0>
    3cdc:	41 14       	cp	r4, r1
    3cde:	51 04       	cpc	r5, r1
    3ce0:	39 f4       	brne	.+14     	; 0x3cf0 <vfprintf+0x3ba>
    3ce2:	04 ff       	sbrs	r16, 4
    3ce4:	05 c0       	rjmp	.+10     	; 0x3cf0 <vfprintf+0x3ba>
    3ce6:	51 94       	neg	r5
    3ce8:	41 94       	neg	r4
    3cea:	51 08       	sbc	r5, r1
    3cec:	8d e2       	ldi	r24, 0x2D	; 45
    3cee:	01 c0       	rjmp	.+2      	; 0x3cf2 <vfprintf+0x3bc>
    3cf0:	8b e2       	ldi	r24, 0x2B	; 43
    3cf2:	b6 01       	movw	r22, r12
    3cf4:	90 e0       	ldi	r25, 0x00	; 0
    3cf6:	ed d3       	rcall	.+2010   	; 0x44d2 <fputc>
    3cf8:	80 e3       	ldi	r24, 0x30	; 48
    3cfa:	9a e0       	ldi	r25, 0x0A	; 10
    3cfc:	49 16       	cp	r4, r25
    3cfe:	51 04       	cpc	r5, r1
    3d00:	2c f0       	brlt	.+10     	; 0x3d0c <vfprintf+0x3d6>
    3d02:	8f 5f       	subi	r24, 0xFF	; 255
    3d04:	5a e0       	ldi	r21, 0x0A	; 10
    3d06:	45 1a       	sub	r4, r21
    3d08:	51 08       	sbc	r5, r1
    3d0a:	f7 cf       	rjmp	.-18     	; 0x3cfa <vfprintf+0x3c4>
    3d0c:	b6 01       	movw	r22, r12
    3d0e:	90 e0       	ldi	r25, 0x00	; 0
    3d10:	e0 d3       	rcall	.+1984   	; 0x44d2 <fputc>
    3d12:	b6 01       	movw	r22, r12
    3d14:	c2 01       	movw	r24, r4
    3d16:	c0 96       	adiw	r24, 0x30	; 48
    3d18:	dc d3       	rcall	.+1976   	; 0x44d2 <fputc>
    3d1a:	4c c1       	rjmp	.+664    	; 0x3fb4 <vfprintf+0x67e>
    3d1c:	83 36       	cpi	r24, 0x63	; 99
    3d1e:	31 f0       	breq	.+12     	; 0x3d2c <vfprintf+0x3f6>
    3d20:	83 37       	cpi	r24, 0x73	; 115
    3d22:	79 f0       	breq	.+30     	; 0x3d42 <vfprintf+0x40c>
    3d24:	83 35       	cpi	r24, 0x53	; 83
    3d26:	09 f0       	breq	.+2      	; 0x3d2a <vfprintf+0x3f4>
    3d28:	54 c0       	rjmp	.+168    	; 0x3dd2 <vfprintf+0x49c>
    3d2a:	20 c0       	rjmp	.+64     	; 0x3d6c <vfprintf+0x436>
    3d2c:	52 01       	movw	r10, r4
    3d2e:	e2 e0       	ldi	r30, 0x02	; 2
    3d30:	ae 0e       	add	r10, r30
    3d32:	b1 1c       	adc	r11, r1
    3d34:	f2 01       	movw	r30, r4
    3d36:	80 81       	ld	r24, Z
    3d38:	89 83       	std	Y+1, r24	; 0x01
    3d3a:	01 e0       	ldi	r16, 0x01	; 1
    3d3c:	10 e0       	ldi	r17, 0x00	; 0
    3d3e:	23 01       	movw	r4, r6
    3d40:	13 c0       	rjmp	.+38     	; 0x3d68 <vfprintf+0x432>
    3d42:	52 01       	movw	r10, r4
    3d44:	f2 e0       	ldi	r31, 0x02	; 2
    3d46:	af 0e       	add	r10, r31
    3d48:	b1 1c       	adc	r11, r1
    3d4a:	f2 01       	movw	r30, r4
    3d4c:	40 80       	ld	r4, Z
    3d4e:	51 80       	ldd	r5, Z+1	; 0x01
    3d50:	26 ff       	sbrs	r18, 6
    3d52:	03 c0       	rjmp	.+6      	; 0x3d5a <vfprintf+0x424>
    3d54:	61 2f       	mov	r22, r17
    3d56:	70 e0       	ldi	r23, 0x00	; 0
    3d58:	02 c0       	rjmp	.+4      	; 0x3d5e <vfprintf+0x428>
    3d5a:	6f ef       	ldi	r22, 0xFF	; 255
    3d5c:	7f ef       	ldi	r23, 0xFF	; 255
    3d5e:	c2 01       	movw	r24, r4
    3d60:	2a 8b       	std	Y+18, r18	; 0x12
    3d62:	ac d3       	rcall	.+1880   	; 0x44bc <strnlen>
    3d64:	8c 01       	movw	r16, r24
    3d66:	2a 89       	ldd	r18, Y+18	; 0x12
    3d68:	2f 77       	andi	r18, 0x7F	; 127
    3d6a:	14 c0       	rjmp	.+40     	; 0x3d94 <vfprintf+0x45e>
    3d6c:	52 01       	movw	r10, r4
    3d6e:	f2 e0       	ldi	r31, 0x02	; 2
    3d70:	af 0e       	add	r10, r31
    3d72:	b1 1c       	adc	r11, r1
    3d74:	f2 01       	movw	r30, r4
    3d76:	40 80       	ld	r4, Z
    3d78:	51 80       	ldd	r5, Z+1	; 0x01
    3d7a:	26 ff       	sbrs	r18, 6
    3d7c:	03 c0       	rjmp	.+6      	; 0x3d84 <vfprintf+0x44e>
    3d7e:	61 2f       	mov	r22, r17
    3d80:	70 e0       	ldi	r23, 0x00	; 0
    3d82:	02 c0       	rjmp	.+4      	; 0x3d88 <vfprintf+0x452>
    3d84:	6f ef       	ldi	r22, 0xFF	; 255
    3d86:	7f ef       	ldi	r23, 0xFF	; 255
    3d88:	c2 01       	movw	r24, r4
    3d8a:	2a 8b       	std	Y+18, r18	; 0x12
    3d8c:	8c d3       	rcall	.+1816   	; 0x44a6 <strnlen_P>
    3d8e:	8c 01       	movw	r16, r24
    3d90:	2a 89       	ldd	r18, Y+18	; 0x12
    3d92:	20 68       	ori	r18, 0x80	; 128
    3d94:	32 2e       	mov	r3, r18
    3d96:	23 fd       	sbrc	r18, 3
    3d98:	18 c0       	rjmp	.+48     	; 0x3dca <vfprintf+0x494>
    3d9a:	8f 2d       	mov	r24, r15
    3d9c:	90 e0       	ldi	r25, 0x00	; 0
    3d9e:	08 17       	cp	r16, r24
    3da0:	19 07       	cpc	r17, r25
    3da2:	98 f4       	brcc	.+38     	; 0x3dca <vfprintf+0x494>
    3da4:	b6 01       	movw	r22, r12
    3da6:	80 e2       	ldi	r24, 0x20	; 32
    3da8:	90 e0       	ldi	r25, 0x00	; 0
    3daa:	93 d3       	rcall	.+1830   	; 0x44d2 <fputc>
    3dac:	fa 94       	dec	r15
    3dae:	f5 cf       	rjmp	.-22     	; 0x3d9a <vfprintf+0x464>
    3db0:	f2 01       	movw	r30, r4
    3db2:	37 fc       	sbrc	r3, 7
    3db4:	85 91       	lpm	r24, Z+
    3db6:	37 fe       	sbrs	r3, 7
    3db8:	81 91       	ld	r24, Z+
    3dba:	2f 01       	movw	r4, r30
    3dbc:	b6 01       	movw	r22, r12
    3dbe:	90 e0       	ldi	r25, 0x00	; 0
    3dc0:	88 d3       	rcall	.+1808   	; 0x44d2 <fputc>
    3dc2:	f1 10       	cpse	r15, r1
    3dc4:	fa 94       	dec	r15
    3dc6:	01 50       	subi	r16, 0x01	; 1
    3dc8:	11 09       	sbc	r17, r1
    3dca:	01 15       	cp	r16, r1
    3dcc:	11 05       	cpc	r17, r1
    3dce:	81 f7       	brne	.-32     	; 0x3db0 <vfprintf+0x47a>
    3dd0:	f1 c0       	rjmp	.+482    	; 0x3fb4 <vfprintf+0x67e>
    3dd2:	84 36       	cpi	r24, 0x64	; 100
    3dd4:	11 f0       	breq	.+4      	; 0x3dda <vfprintf+0x4a4>
    3dd6:	89 36       	cpi	r24, 0x69	; 105
    3dd8:	51 f5       	brne	.+84     	; 0x3e2e <vfprintf+0x4f8>
    3dda:	52 01       	movw	r10, r4
    3ddc:	27 ff       	sbrs	r18, 7
    3dde:	09 c0       	rjmp	.+18     	; 0x3df2 <vfprintf+0x4bc>
    3de0:	f4 e0       	ldi	r31, 0x04	; 4
    3de2:	af 0e       	add	r10, r31
    3de4:	b1 1c       	adc	r11, r1
    3de6:	f2 01       	movw	r30, r4
    3de8:	60 81       	ld	r22, Z
    3dea:	71 81       	ldd	r23, Z+1	; 0x01
    3dec:	82 81       	ldd	r24, Z+2	; 0x02
    3dee:	93 81       	ldd	r25, Z+3	; 0x03
    3df0:	0a c0       	rjmp	.+20     	; 0x3e06 <vfprintf+0x4d0>
    3df2:	f2 e0       	ldi	r31, 0x02	; 2
    3df4:	af 0e       	add	r10, r31
    3df6:	b1 1c       	adc	r11, r1
    3df8:	f2 01       	movw	r30, r4
    3dfa:	60 81       	ld	r22, Z
    3dfc:	71 81       	ldd	r23, Z+1	; 0x01
    3dfe:	07 2e       	mov	r0, r23
    3e00:	00 0c       	add	r0, r0
    3e02:	88 0b       	sbc	r24, r24
    3e04:	99 0b       	sbc	r25, r25
    3e06:	2f 76       	andi	r18, 0x6F	; 111
    3e08:	32 2e       	mov	r3, r18
    3e0a:	97 ff       	sbrs	r25, 7
    3e0c:	09 c0       	rjmp	.+18     	; 0x3e20 <vfprintf+0x4ea>
    3e0e:	90 95       	com	r25
    3e10:	80 95       	com	r24
    3e12:	70 95       	com	r23
    3e14:	61 95       	neg	r22
    3e16:	7f 4f       	sbci	r23, 0xFF	; 255
    3e18:	8f 4f       	sbci	r24, 0xFF	; 255
    3e1a:	9f 4f       	sbci	r25, 0xFF	; 255
    3e1c:	20 68       	ori	r18, 0x80	; 128
    3e1e:	32 2e       	mov	r3, r18
    3e20:	2a e0       	ldi	r18, 0x0A	; 10
    3e22:	30 e0       	ldi	r19, 0x00	; 0
    3e24:	a3 01       	movw	r20, r6
    3e26:	bc d3       	rcall	.+1912   	; 0x45a0 <__ultoa_invert>
    3e28:	e8 2e       	mov	r14, r24
    3e2a:	e6 18       	sub	r14, r6
    3e2c:	3e c0       	rjmp	.+124    	; 0x3eaa <vfprintf+0x574>
    3e2e:	02 2f       	mov	r16, r18
    3e30:	85 37       	cpi	r24, 0x75	; 117
    3e32:	21 f4       	brne	.+8      	; 0x3e3c <vfprintf+0x506>
    3e34:	0f 7e       	andi	r16, 0xEF	; 239
    3e36:	2a e0       	ldi	r18, 0x0A	; 10
    3e38:	30 e0       	ldi	r19, 0x00	; 0
    3e3a:	1d c0       	rjmp	.+58     	; 0x3e76 <vfprintf+0x540>
    3e3c:	09 7f       	andi	r16, 0xF9	; 249
    3e3e:	8f 36       	cpi	r24, 0x6F	; 111
    3e40:	91 f0       	breq	.+36     	; 0x3e66 <vfprintf+0x530>
    3e42:	18 f4       	brcc	.+6      	; 0x3e4a <vfprintf+0x514>
    3e44:	88 35       	cpi	r24, 0x58	; 88
    3e46:	59 f0       	breq	.+22     	; 0x3e5e <vfprintf+0x528>
    3e48:	be c0       	rjmp	.+380    	; 0x3fc6 <vfprintf+0x690>
    3e4a:	80 37       	cpi	r24, 0x70	; 112
    3e4c:	19 f0       	breq	.+6      	; 0x3e54 <vfprintf+0x51e>
    3e4e:	88 37       	cpi	r24, 0x78	; 120
    3e50:	11 f0       	breq	.+4      	; 0x3e56 <vfprintf+0x520>
    3e52:	b9 c0       	rjmp	.+370    	; 0x3fc6 <vfprintf+0x690>
    3e54:	00 61       	ori	r16, 0x10	; 16
    3e56:	04 ff       	sbrs	r16, 4
    3e58:	09 c0       	rjmp	.+18     	; 0x3e6c <vfprintf+0x536>
    3e5a:	04 60       	ori	r16, 0x04	; 4
    3e5c:	07 c0       	rjmp	.+14     	; 0x3e6c <vfprintf+0x536>
    3e5e:	24 ff       	sbrs	r18, 4
    3e60:	08 c0       	rjmp	.+16     	; 0x3e72 <vfprintf+0x53c>
    3e62:	06 60       	ori	r16, 0x06	; 6
    3e64:	06 c0       	rjmp	.+12     	; 0x3e72 <vfprintf+0x53c>
    3e66:	28 e0       	ldi	r18, 0x08	; 8
    3e68:	30 e0       	ldi	r19, 0x00	; 0
    3e6a:	05 c0       	rjmp	.+10     	; 0x3e76 <vfprintf+0x540>
    3e6c:	20 e1       	ldi	r18, 0x10	; 16
    3e6e:	30 e0       	ldi	r19, 0x00	; 0
    3e70:	02 c0       	rjmp	.+4      	; 0x3e76 <vfprintf+0x540>
    3e72:	20 e1       	ldi	r18, 0x10	; 16
    3e74:	32 e0       	ldi	r19, 0x02	; 2
    3e76:	52 01       	movw	r10, r4
    3e78:	07 ff       	sbrs	r16, 7
    3e7a:	09 c0       	rjmp	.+18     	; 0x3e8e <vfprintf+0x558>
    3e7c:	f4 e0       	ldi	r31, 0x04	; 4
    3e7e:	af 0e       	add	r10, r31
    3e80:	b1 1c       	adc	r11, r1
    3e82:	f2 01       	movw	r30, r4
    3e84:	60 81       	ld	r22, Z
    3e86:	71 81       	ldd	r23, Z+1	; 0x01
    3e88:	82 81       	ldd	r24, Z+2	; 0x02
    3e8a:	93 81       	ldd	r25, Z+3	; 0x03
    3e8c:	08 c0       	rjmp	.+16     	; 0x3e9e <vfprintf+0x568>
    3e8e:	f2 e0       	ldi	r31, 0x02	; 2
    3e90:	af 0e       	add	r10, r31
    3e92:	b1 1c       	adc	r11, r1
    3e94:	f2 01       	movw	r30, r4
    3e96:	60 81       	ld	r22, Z
    3e98:	71 81       	ldd	r23, Z+1	; 0x01
    3e9a:	80 e0       	ldi	r24, 0x00	; 0
    3e9c:	90 e0       	ldi	r25, 0x00	; 0
    3e9e:	a3 01       	movw	r20, r6
    3ea0:	7f d3       	rcall	.+1790   	; 0x45a0 <__ultoa_invert>
    3ea2:	e8 2e       	mov	r14, r24
    3ea4:	e6 18       	sub	r14, r6
    3ea6:	0f 77       	andi	r16, 0x7F	; 127
    3ea8:	30 2e       	mov	r3, r16
    3eaa:	36 fe       	sbrs	r3, 6
    3eac:	0b c0       	rjmp	.+22     	; 0x3ec4 <vfprintf+0x58e>
    3eae:	33 2d       	mov	r19, r3
    3eb0:	3e 7f       	andi	r19, 0xFE	; 254
    3eb2:	e1 16       	cp	r14, r17
    3eb4:	50 f4       	brcc	.+20     	; 0x3eca <vfprintf+0x594>
    3eb6:	34 fe       	sbrs	r3, 4
    3eb8:	0a c0       	rjmp	.+20     	; 0x3ece <vfprintf+0x598>
    3eba:	32 fc       	sbrc	r3, 2
    3ebc:	08 c0       	rjmp	.+16     	; 0x3ece <vfprintf+0x598>
    3ebe:	33 2d       	mov	r19, r3
    3ec0:	3e 7e       	andi	r19, 0xEE	; 238
    3ec2:	05 c0       	rjmp	.+10     	; 0x3ece <vfprintf+0x598>
    3ec4:	0e 2d       	mov	r16, r14
    3ec6:	33 2d       	mov	r19, r3
    3ec8:	03 c0       	rjmp	.+6      	; 0x3ed0 <vfprintf+0x59a>
    3eca:	0e 2d       	mov	r16, r14
    3ecc:	01 c0       	rjmp	.+2      	; 0x3ed0 <vfprintf+0x59a>
    3ece:	01 2f       	mov	r16, r17
    3ed0:	34 ff       	sbrs	r19, 4
    3ed2:	0c c0       	rjmp	.+24     	; 0x3eec <vfprintf+0x5b6>
    3ed4:	fe 01       	movw	r30, r28
    3ed6:	ee 0d       	add	r30, r14
    3ed8:	f1 1d       	adc	r31, r1
    3eda:	80 81       	ld	r24, Z
    3edc:	80 33       	cpi	r24, 0x30	; 48
    3ede:	11 f4       	brne	.+4      	; 0x3ee4 <vfprintf+0x5ae>
    3ee0:	39 7e       	andi	r19, 0xE9	; 233
    3ee2:	08 c0       	rjmp	.+16     	; 0x3ef4 <vfprintf+0x5be>
    3ee4:	32 ff       	sbrs	r19, 2
    3ee6:	05 c0       	rjmp	.+10     	; 0x3ef2 <vfprintf+0x5bc>
    3ee8:	0e 5f       	subi	r16, 0xFE	; 254
    3eea:	04 c0       	rjmp	.+8      	; 0x3ef4 <vfprintf+0x5be>
    3eec:	83 2f       	mov	r24, r19
    3eee:	86 78       	andi	r24, 0x86	; 134
    3ef0:	09 f0       	breq	.+2      	; 0x3ef4 <vfprintf+0x5be>
    3ef2:	0f 5f       	subi	r16, 0xFF	; 255
    3ef4:	33 fd       	sbrc	r19, 3
    3ef6:	12 c0       	rjmp	.+36     	; 0x3f1c <vfprintf+0x5e6>
    3ef8:	30 ff       	sbrs	r19, 0
    3efa:	06 c0       	rjmp	.+12     	; 0x3f08 <vfprintf+0x5d2>
    3efc:	1e 2d       	mov	r17, r14
    3efe:	0f 15       	cp	r16, r15
    3f00:	18 f4       	brcc	.+6      	; 0x3f08 <vfprintf+0x5d2>
    3f02:	1f 0d       	add	r17, r15
    3f04:	10 1b       	sub	r17, r16
    3f06:	0f 2d       	mov	r16, r15
    3f08:	0f 15       	cp	r16, r15
    3f0a:	60 f4       	brcc	.+24     	; 0x3f24 <vfprintf+0x5ee>
    3f0c:	b6 01       	movw	r22, r12
    3f0e:	80 e2       	ldi	r24, 0x20	; 32
    3f10:	90 e0       	ldi	r25, 0x00	; 0
    3f12:	3b 8b       	std	Y+19, r19	; 0x13
    3f14:	de d2       	rcall	.+1468   	; 0x44d2 <fputc>
    3f16:	0f 5f       	subi	r16, 0xFF	; 255
    3f18:	3b 89       	ldd	r19, Y+19	; 0x13
    3f1a:	f6 cf       	rjmp	.-20     	; 0x3f08 <vfprintf+0x5d2>
    3f1c:	0f 15       	cp	r16, r15
    3f1e:	10 f4       	brcc	.+4      	; 0x3f24 <vfprintf+0x5ee>
    3f20:	f0 1a       	sub	r15, r16
    3f22:	01 c0       	rjmp	.+2      	; 0x3f26 <vfprintf+0x5f0>
    3f24:	f1 2c       	mov	r15, r1
    3f26:	34 ff       	sbrs	r19, 4
    3f28:	11 c0       	rjmp	.+34     	; 0x3f4c <vfprintf+0x616>
    3f2a:	b6 01       	movw	r22, r12
    3f2c:	80 e3       	ldi	r24, 0x30	; 48
    3f2e:	90 e0       	ldi	r25, 0x00	; 0
    3f30:	3b 8b       	std	Y+19, r19	; 0x13
    3f32:	cf d2       	rcall	.+1438   	; 0x44d2 <fputc>
    3f34:	3b 89       	ldd	r19, Y+19	; 0x13
    3f36:	32 ff       	sbrs	r19, 2
    3f38:	16 c0       	rjmp	.+44     	; 0x3f66 <vfprintf+0x630>
    3f3a:	31 fd       	sbrc	r19, 1
    3f3c:	03 c0       	rjmp	.+6      	; 0x3f44 <vfprintf+0x60e>
    3f3e:	88 e7       	ldi	r24, 0x78	; 120
    3f40:	90 e0       	ldi	r25, 0x00	; 0
    3f42:	02 c0       	rjmp	.+4      	; 0x3f48 <vfprintf+0x612>
    3f44:	88 e5       	ldi	r24, 0x58	; 88
    3f46:	90 e0       	ldi	r25, 0x00	; 0
    3f48:	b6 01       	movw	r22, r12
    3f4a:	0c c0       	rjmp	.+24     	; 0x3f64 <vfprintf+0x62e>
    3f4c:	83 2f       	mov	r24, r19
    3f4e:	86 78       	andi	r24, 0x86	; 134
    3f50:	51 f0       	breq	.+20     	; 0x3f66 <vfprintf+0x630>
    3f52:	31 ff       	sbrs	r19, 1
    3f54:	02 c0       	rjmp	.+4      	; 0x3f5a <vfprintf+0x624>
    3f56:	8b e2       	ldi	r24, 0x2B	; 43
    3f58:	01 c0       	rjmp	.+2      	; 0x3f5c <vfprintf+0x626>
    3f5a:	80 e2       	ldi	r24, 0x20	; 32
    3f5c:	37 fd       	sbrc	r19, 7
    3f5e:	8d e2       	ldi	r24, 0x2D	; 45
    3f60:	b6 01       	movw	r22, r12
    3f62:	90 e0       	ldi	r25, 0x00	; 0
    3f64:	b6 d2       	rcall	.+1388   	; 0x44d2 <fputc>
    3f66:	e1 16       	cp	r14, r17
    3f68:	30 f4       	brcc	.+12     	; 0x3f76 <vfprintf+0x640>
    3f6a:	b6 01       	movw	r22, r12
    3f6c:	80 e3       	ldi	r24, 0x30	; 48
    3f6e:	90 e0       	ldi	r25, 0x00	; 0
    3f70:	b0 d2       	rcall	.+1376   	; 0x44d2 <fputc>
    3f72:	11 50       	subi	r17, 0x01	; 1
    3f74:	f8 cf       	rjmp	.-16     	; 0x3f66 <vfprintf+0x630>
    3f76:	ea 94       	dec	r14
    3f78:	f3 01       	movw	r30, r6
    3f7a:	ee 0d       	add	r30, r14
    3f7c:	f1 1d       	adc	r31, r1
    3f7e:	80 81       	ld	r24, Z
    3f80:	b6 01       	movw	r22, r12
    3f82:	90 e0       	ldi	r25, 0x00	; 0
    3f84:	a6 d2       	rcall	.+1356   	; 0x44d2 <fputc>
    3f86:	e1 10       	cpse	r14, r1
    3f88:	f6 cf       	rjmp	.-20     	; 0x3f76 <vfprintf+0x640>
    3f8a:	14 c0       	rjmp	.+40     	; 0x3fb4 <vfprintf+0x67e>
    3f8c:	f4 e0       	ldi	r31, 0x04	; 4
    3f8e:	ff 15       	cp	r31, r15
    3f90:	48 f5       	brcc	.+82     	; 0x3fe4 <vfprintf+0x6ae>
    3f92:	84 e0       	ldi	r24, 0x04	; 4
    3f94:	f8 1a       	sub	r15, r24
    3f96:	33 fe       	sbrs	r3, 3
    3f98:	1d c0       	rjmp	.+58     	; 0x3fd4 <vfprintf+0x69e>
    3f9a:	21 10       	cpse	r2, r1
    3f9c:	24 c0       	rjmp	.+72     	; 0x3fe6 <vfprintf+0x6b0>
    3f9e:	03 ff       	sbrs	r16, 3
    3fa0:	27 c0       	rjmp	.+78     	; 0x3ff0 <vfprintf+0x6ba>
    3fa2:	02 e0       	ldi	r16, 0x02	; 2
    3fa4:	14 e0       	ldi	r17, 0x04	; 4
    3fa6:	f3 2d       	mov	r31, r3
    3fa8:	f0 71       	andi	r31, 0x10	; 16
    3faa:	3f 2e       	mov	r3, r31
    3fac:	f8 01       	movw	r30, r16
    3fae:	84 91       	lpm	r24, Z
    3fb0:	81 11       	cpse	r24, r1
    3fb2:	21 c0       	rjmp	.+66     	; 0x3ff6 <vfprintf+0x6c0>
    3fb4:	ff 20       	and	r15, r15
    3fb6:	09 f4       	brne	.+2      	; 0x3fba <vfprintf+0x684>
    3fb8:	fd cc       	rjmp	.-1542   	; 0x39b4 <vfprintf+0x7e>
    3fba:	b6 01       	movw	r22, r12
    3fbc:	80 e2       	ldi	r24, 0x20	; 32
    3fbe:	90 e0       	ldi	r25, 0x00	; 0
    3fc0:	88 d2       	rcall	.+1296   	; 0x44d2 <fputc>
    3fc2:	fa 94       	dec	r15
    3fc4:	f7 cf       	rjmp	.-18     	; 0x3fb4 <vfprintf+0x67e>
    3fc6:	f6 01       	movw	r30, r12
    3fc8:	86 81       	ldd	r24, Z+6	; 0x06
    3fca:	97 81       	ldd	r25, Z+7	; 0x07
    3fcc:	23 c0       	rjmp	.+70     	; 0x4014 <vfprintf+0x6de>
    3fce:	8f ef       	ldi	r24, 0xFF	; 255
    3fd0:	9f ef       	ldi	r25, 0xFF	; 255
    3fd2:	20 c0       	rjmp	.+64     	; 0x4014 <vfprintf+0x6de>
    3fd4:	b6 01       	movw	r22, r12
    3fd6:	80 e2       	ldi	r24, 0x20	; 32
    3fd8:	90 e0       	ldi	r25, 0x00	; 0
    3fda:	7b d2       	rcall	.+1270   	; 0x44d2 <fputc>
    3fdc:	fa 94       	dec	r15
    3fde:	f1 10       	cpse	r15, r1
    3fe0:	f9 cf       	rjmp	.-14     	; 0x3fd4 <vfprintf+0x69e>
    3fe2:	db cf       	rjmp	.-74     	; 0x3f9a <vfprintf+0x664>
    3fe4:	f1 2c       	mov	r15, r1
    3fe6:	b6 01       	movw	r22, r12
    3fe8:	82 2d       	mov	r24, r2
    3fea:	90 e0       	ldi	r25, 0x00	; 0
    3fec:	72 d2       	rcall	.+1252   	; 0x44d2 <fputc>
    3fee:	d7 cf       	rjmp	.-82     	; 0x3f9e <vfprintf+0x668>
    3ff0:	06 e0       	ldi	r16, 0x06	; 6
    3ff2:	14 e0       	ldi	r17, 0x04	; 4
    3ff4:	d8 cf       	rjmp	.-80     	; 0x3fa6 <vfprintf+0x670>
    3ff6:	31 10       	cpse	r3, r1
    3ff8:	80 52       	subi	r24, 0x20	; 32
    3ffa:	b6 01       	movw	r22, r12
    3ffc:	90 e0       	ldi	r25, 0x00	; 0
    3ffe:	69 d2       	rcall	.+1234   	; 0x44d2 <fputc>
    4000:	0f 5f       	subi	r16, 0xFF	; 255
    4002:	1f 4f       	sbci	r17, 0xFF	; 255
    4004:	d3 cf       	rjmp	.-90     	; 0x3fac <vfprintf+0x676>
    4006:	23 e0       	ldi	r18, 0x03	; 3
    4008:	2f 15       	cp	r18, r15
    400a:	10 f4       	brcc	.+4      	; 0x4010 <vfprintf+0x6da>
    400c:	83 e0       	ldi	r24, 0x03	; 3
    400e:	c2 cf       	rjmp	.-124    	; 0x3f94 <vfprintf+0x65e>
    4010:	f1 2c       	mov	r15, r1
    4012:	c5 cf       	rjmp	.-118    	; 0x3f9e <vfprintf+0x668>
    4014:	63 96       	adiw	r28, 0x13	; 19
    4016:	0f b6       	in	r0, 0x3f	; 63
    4018:	f8 94       	cli
    401a:	de bf       	out	0x3e, r29	; 62
    401c:	0f be       	out	0x3f, r0	; 63
    401e:	cd bf       	out	0x3d, r28	; 61
    4020:	df 91       	pop	r29
    4022:	cf 91       	pop	r28
    4024:	1f 91       	pop	r17
    4026:	0f 91       	pop	r16
    4028:	ff 90       	pop	r15
    402a:	ef 90       	pop	r14
    402c:	df 90       	pop	r13
    402e:	cf 90       	pop	r12
    4030:	bf 90       	pop	r11
    4032:	af 90       	pop	r10
    4034:	9f 90       	pop	r9
    4036:	8f 90       	pop	r8
    4038:	7f 90       	pop	r7
    403a:	6f 90       	pop	r6
    403c:	5f 90       	pop	r5
    403e:	4f 90       	pop	r4
    4040:	3f 90       	pop	r3
    4042:	2f 90       	pop	r2
    4044:	08 95       	ret

00004046 <__udivmodsi4>:
    4046:	a1 e2       	ldi	r26, 0x21	; 33
    4048:	1a 2e       	mov	r1, r26
    404a:	aa 1b       	sub	r26, r26
    404c:	bb 1b       	sub	r27, r27
    404e:	fd 01       	movw	r30, r26
    4050:	0d c0       	rjmp	.+26     	; 0x406c <__udivmodsi4_ep>

00004052 <__udivmodsi4_loop>:
    4052:	aa 1f       	adc	r26, r26
    4054:	bb 1f       	adc	r27, r27
    4056:	ee 1f       	adc	r30, r30
    4058:	ff 1f       	adc	r31, r31
    405a:	a2 17       	cp	r26, r18
    405c:	b3 07       	cpc	r27, r19
    405e:	e4 07       	cpc	r30, r20
    4060:	f5 07       	cpc	r31, r21
    4062:	20 f0       	brcs	.+8      	; 0x406c <__udivmodsi4_ep>
    4064:	a2 1b       	sub	r26, r18
    4066:	b3 0b       	sbc	r27, r19
    4068:	e4 0b       	sbc	r30, r20
    406a:	f5 0b       	sbc	r31, r21

0000406c <__udivmodsi4_ep>:
    406c:	66 1f       	adc	r22, r22
    406e:	77 1f       	adc	r23, r23
    4070:	88 1f       	adc	r24, r24
    4072:	99 1f       	adc	r25, r25
    4074:	1a 94       	dec	r1
    4076:	69 f7       	brne	.-38     	; 0x4052 <__udivmodsi4_loop>
    4078:	60 95       	com	r22
    407a:	70 95       	com	r23
    407c:	80 95       	com	r24
    407e:	90 95       	com	r25
    4080:	9b 01       	movw	r18, r22
    4082:	ac 01       	movw	r20, r24
    4084:	bd 01       	movw	r22, r26
    4086:	cf 01       	movw	r24, r30
    4088:	08 95       	ret

0000408a <__tablejump2__>:
    408a:	ee 0f       	add	r30, r30
    408c:	ff 1f       	adc	r31, r31
    408e:	00 24       	eor	r0, r0
    4090:	00 1c       	adc	r0, r0
    4092:	0b be       	out	0x3b, r0	; 59
    4094:	07 90       	elpm	r0, Z+
    4096:	f6 91       	elpm	r31, Z
    4098:	e0 2d       	mov	r30, r0
    409a:	09 94       	ijmp

0000409c <malloc>:
    409c:	cf 93       	push	r28
    409e:	df 93       	push	r29
    40a0:	82 30       	cpi	r24, 0x02	; 2
    40a2:	91 05       	cpc	r25, r1
    40a4:	10 f4       	brcc	.+4      	; 0x40aa <malloc+0xe>
    40a6:	82 e0       	ldi	r24, 0x02	; 2
    40a8:	90 e0       	ldi	r25, 0x00	; 0
    40aa:	e0 91 d8 07 	lds	r30, 0x07D8
    40ae:	f0 91 d9 07 	lds	r31, 0x07D9
    40b2:	20 e0       	ldi	r18, 0x00	; 0
    40b4:	30 e0       	ldi	r19, 0x00	; 0
    40b6:	c0 e0       	ldi	r28, 0x00	; 0
    40b8:	d0 e0       	ldi	r29, 0x00	; 0
    40ba:	30 97       	sbiw	r30, 0x00	; 0
    40bc:	11 f1       	breq	.+68     	; 0x4102 <__stack+0x3>
    40be:	40 81       	ld	r20, Z
    40c0:	51 81       	ldd	r21, Z+1	; 0x01
    40c2:	48 17       	cp	r20, r24
    40c4:	59 07       	cpc	r21, r25
    40c6:	c0 f0       	brcs	.+48     	; 0x40f8 <malloc+0x5c>
    40c8:	48 17       	cp	r20, r24
    40ca:	59 07       	cpc	r21, r25
    40cc:	61 f4       	brne	.+24     	; 0x40e6 <malloc+0x4a>
    40ce:	82 81       	ldd	r24, Z+2	; 0x02
    40d0:	93 81       	ldd	r25, Z+3	; 0x03
    40d2:	20 97       	sbiw	r28, 0x00	; 0
    40d4:	19 f0       	breq	.+6      	; 0x40dc <malloc+0x40>
    40d6:	9b 83       	std	Y+3, r25	; 0x03
    40d8:	8a 83       	std	Y+2, r24	; 0x02
    40da:	2b c0       	rjmp	.+86     	; 0x4132 <__stack+0x33>
    40dc:	90 93 d9 07 	sts	0x07D9, r25
    40e0:	80 93 d8 07 	sts	0x07D8, r24
    40e4:	26 c0       	rjmp	.+76     	; 0x4132 <__stack+0x33>
    40e6:	21 15       	cp	r18, r1
    40e8:	31 05       	cpc	r19, r1
    40ea:	19 f0       	breq	.+6      	; 0x40f2 <malloc+0x56>
    40ec:	42 17       	cp	r20, r18
    40ee:	53 07       	cpc	r21, r19
    40f0:	18 f4       	brcc	.+6      	; 0x40f8 <malloc+0x5c>
    40f2:	9a 01       	movw	r18, r20
    40f4:	be 01       	movw	r22, r28
    40f6:	df 01       	movw	r26, r30
    40f8:	ef 01       	movw	r28, r30
    40fa:	02 80       	ldd	r0, Z+2	; 0x02
    40fc:	f3 81       	ldd	r31, Z+3	; 0x03
    40fe:	e0 2d       	mov	r30, r0
    4100:	dc cf       	rjmp	.-72     	; 0x40ba <malloc+0x1e>
    4102:	21 15       	cp	r18, r1
    4104:	31 05       	cpc	r19, r1
    4106:	09 f1       	breq	.+66     	; 0x414a <__stack+0x4b>
    4108:	28 1b       	sub	r18, r24
    410a:	39 0b       	sbc	r19, r25
    410c:	24 30       	cpi	r18, 0x04	; 4
    410e:	31 05       	cpc	r19, r1
    4110:	90 f4       	brcc	.+36     	; 0x4136 <__stack+0x37>
    4112:	12 96       	adiw	r26, 0x02	; 2
    4114:	8d 91       	ld	r24, X+
    4116:	9c 91       	ld	r25, X
    4118:	13 97       	sbiw	r26, 0x03	; 3
    411a:	61 15       	cp	r22, r1
    411c:	71 05       	cpc	r23, r1
    411e:	21 f0       	breq	.+8      	; 0x4128 <__stack+0x29>
    4120:	fb 01       	movw	r30, r22
    4122:	93 83       	std	Z+3, r25	; 0x03
    4124:	82 83       	std	Z+2, r24	; 0x02
    4126:	04 c0       	rjmp	.+8      	; 0x4130 <__stack+0x31>
    4128:	90 93 d9 07 	sts	0x07D9, r25
    412c:	80 93 d8 07 	sts	0x07D8, r24
    4130:	fd 01       	movw	r30, r26
    4132:	32 96       	adiw	r30, 0x02	; 2
    4134:	44 c0       	rjmp	.+136    	; 0x41be <__stack+0xbf>
    4136:	fd 01       	movw	r30, r26
    4138:	e2 0f       	add	r30, r18
    413a:	f3 1f       	adc	r31, r19
    413c:	81 93       	st	Z+, r24
    413e:	91 93       	st	Z+, r25
    4140:	22 50       	subi	r18, 0x02	; 2
    4142:	31 09       	sbc	r19, r1
    4144:	2d 93       	st	X+, r18
    4146:	3c 93       	st	X, r19
    4148:	3a c0       	rjmp	.+116    	; 0x41be <__stack+0xbf>
    414a:	20 91 d6 07 	lds	r18, 0x07D6
    414e:	30 91 d7 07 	lds	r19, 0x07D7
    4152:	23 2b       	or	r18, r19
    4154:	41 f4       	brne	.+16     	; 0x4166 <__stack+0x67>
    4156:	20 91 02 01 	lds	r18, 0x0102
    415a:	30 91 03 01 	lds	r19, 0x0103
    415e:	30 93 d7 07 	sts	0x07D7, r19
    4162:	20 93 d6 07 	sts	0x07D6, r18
    4166:	20 91 00 01 	lds	r18, 0x0100
    416a:	30 91 01 01 	lds	r19, 0x0101
    416e:	21 15       	cp	r18, r1
    4170:	31 05       	cpc	r19, r1
    4172:	41 f4       	brne	.+16     	; 0x4184 <__stack+0x85>
    4174:	2d b7       	in	r18, 0x3d	; 61
    4176:	3e b7       	in	r19, 0x3e	; 62
    4178:	40 91 04 01 	lds	r20, 0x0104
    417c:	50 91 05 01 	lds	r21, 0x0105
    4180:	24 1b       	sub	r18, r20
    4182:	35 0b       	sbc	r19, r21
    4184:	e0 91 d6 07 	lds	r30, 0x07D6
    4188:	f0 91 d7 07 	lds	r31, 0x07D7
    418c:	e2 17       	cp	r30, r18
    418e:	f3 07       	cpc	r31, r19
    4190:	a0 f4       	brcc	.+40     	; 0x41ba <__stack+0xbb>
    4192:	2e 1b       	sub	r18, r30
    4194:	3f 0b       	sbc	r19, r31
    4196:	28 17       	cp	r18, r24
    4198:	39 07       	cpc	r19, r25
    419a:	78 f0       	brcs	.+30     	; 0x41ba <__stack+0xbb>
    419c:	ac 01       	movw	r20, r24
    419e:	4e 5f       	subi	r20, 0xFE	; 254
    41a0:	5f 4f       	sbci	r21, 0xFF	; 255
    41a2:	24 17       	cp	r18, r20
    41a4:	35 07       	cpc	r19, r21
    41a6:	48 f0       	brcs	.+18     	; 0x41ba <__stack+0xbb>
    41a8:	4e 0f       	add	r20, r30
    41aa:	5f 1f       	adc	r21, r31
    41ac:	50 93 d7 07 	sts	0x07D7, r21
    41b0:	40 93 d6 07 	sts	0x07D6, r20
    41b4:	81 93       	st	Z+, r24
    41b6:	91 93       	st	Z+, r25
    41b8:	02 c0       	rjmp	.+4      	; 0x41be <__stack+0xbf>
    41ba:	e0 e0       	ldi	r30, 0x00	; 0
    41bc:	f0 e0       	ldi	r31, 0x00	; 0
    41be:	cf 01       	movw	r24, r30
    41c0:	df 91       	pop	r29
    41c2:	cf 91       	pop	r28
    41c4:	08 95       	ret

000041c6 <free>:
    41c6:	0f 93       	push	r16
    41c8:	1f 93       	push	r17
    41ca:	cf 93       	push	r28
    41cc:	df 93       	push	r29
    41ce:	00 97       	sbiw	r24, 0x00	; 0
    41d0:	09 f4       	brne	.+2      	; 0x41d4 <free+0xe>
    41d2:	8c c0       	rjmp	.+280    	; 0x42ec <free+0x126>
    41d4:	fc 01       	movw	r30, r24
    41d6:	32 97       	sbiw	r30, 0x02	; 2
    41d8:	13 82       	std	Z+3, r1	; 0x03
    41da:	12 82       	std	Z+2, r1	; 0x02
    41dc:	00 91 d8 07 	lds	r16, 0x07D8
    41e0:	10 91 d9 07 	lds	r17, 0x07D9
    41e4:	01 15       	cp	r16, r1
    41e6:	11 05       	cpc	r17, r1
    41e8:	81 f4       	brne	.+32     	; 0x420a <free+0x44>
    41ea:	20 81       	ld	r18, Z
    41ec:	31 81       	ldd	r19, Z+1	; 0x01
    41ee:	82 0f       	add	r24, r18
    41f0:	93 1f       	adc	r25, r19
    41f2:	20 91 d6 07 	lds	r18, 0x07D6
    41f6:	30 91 d7 07 	lds	r19, 0x07D7
    41fa:	28 17       	cp	r18, r24
    41fc:	39 07       	cpc	r19, r25
    41fe:	79 f5       	brne	.+94     	; 0x425e <free+0x98>
    4200:	f0 93 d7 07 	sts	0x07D7, r31
    4204:	e0 93 d6 07 	sts	0x07D6, r30
    4208:	71 c0       	rjmp	.+226    	; 0x42ec <free+0x126>
    420a:	d8 01       	movw	r26, r16
    420c:	40 e0       	ldi	r20, 0x00	; 0
    420e:	50 e0       	ldi	r21, 0x00	; 0
    4210:	ae 17       	cp	r26, r30
    4212:	bf 07       	cpc	r27, r31
    4214:	50 f4       	brcc	.+20     	; 0x422a <free+0x64>
    4216:	12 96       	adiw	r26, 0x02	; 2
    4218:	2d 91       	ld	r18, X+
    421a:	3c 91       	ld	r19, X
    421c:	13 97       	sbiw	r26, 0x03	; 3
    421e:	ad 01       	movw	r20, r26
    4220:	21 15       	cp	r18, r1
    4222:	31 05       	cpc	r19, r1
    4224:	09 f1       	breq	.+66     	; 0x4268 <free+0xa2>
    4226:	d9 01       	movw	r26, r18
    4228:	f3 cf       	rjmp	.-26     	; 0x4210 <free+0x4a>
    422a:	9d 01       	movw	r18, r26
    422c:	da 01       	movw	r26, r20
    422e:	33 83       	std	Z+3, r19	; 0x03
    4230:	22 83       	std	Z+2, r18	; 0x02
    4232:	60 81       	ld	r22, Z
    4234:	71 81       	ldd	r23, Z+1	; 0x01
    4236:	86 0f       	add	r24, r22
    4238:	97 1f       	adc	r25, r23
    423a:	82 17       	cp	r24, r18
    423c:	93 07       	cpc	r25, r19
    423e:	69 f4       	brne	.+26     	; 0x425a <free+0x94>
    4240:	ec 01       	movw	r28, r24
    4242:	28 81       	ld	r18, Y
    4244:	39 81       	ldd	r19, Y+1	; 0x01
    4246:	26 0f       	add	r18, r22
    4248:	37 1f       	adc	r19, r23
    424a:	2e 5f       	subi	r18, 0xFE	; 254
    424c:	3f 4f       	sbci	r19, 0xFF	; 255
    424e:	31 83       	std	Z+1, r19	; 0x01
    4250:	20 83       	st	Z, r18
    4252:	8a 81       	ldd	r24, Y+2	; 0x02
    4254:	9b 81       	ldd	r25, Y+3	; 0x03
    4256:	93 83       	std	Z+3, r25	; 0x03
    4258:	82 83       	std	Z+2, r24	; 0x02
    425a:	45 2b       	or	r20, r21
    425c:	29 f4       	brne	.+10     	; 0x4268 <free+0xa2>
    425e:	f0 93 d9 07 	sts	0x07D9, r31
    4262:	e0 93 d8 07 	sts	0x07D8, r30
    4266:	42 c0       	rjmp	.+132    	; 0x42ec <free+0x126>
    4268:	13 96       	adiw	r26, 0x03	; 3
    426a:	fc 93       	st	X, r31
    426c:	ee 93       	st	-X, r30
    426e:	12 97       	sbiw	r26, 0x02	; 2
    4270:	ed 01       	movw	r28, r26
    4272:	49 91       	ld	r20, Y+
    4274:	59 91       	ld	r21, Y+
    4276:	9e 01       	movw	r18, r28
    4278:	24 0f       	add	r18, r20
    427a:	35 1f       	adc	r19, r21
    427c:	e2 17       	cp	r30, r18
    427e:	f3 07       	cpc	r31, r19
    4280:	71 f4       	brne	.+28     	; 0x429e <free+0xd8>
    4282:	80 81       	ld	r24, Z
    4284:	91 81       	ldd	r25, Z+1	; 0x01
    4286:	84 0f       	add	r24, r20
    4288:	95 1f       	adc	r25, r21
    428a:	02 96       	adiw	r24, 0x02	; 2
    428c:	11 96       	adiw	r26, 0x01	; 1
    428e:	9c 93       	st	X, r25
    4290:	8e 93       	st	-X, r24
    4292:	82 81       	ldd	r24, Z+2	; 0x02
    4294:	93 81       	ldd	r25, Z+3	; 0x03
    4296:	13 96       	adiw	r26, 0x03	; 3
    4298:	9c 93       	st	X, r25
    429a:	8e 93       	st	-X, r24
    429c:	12 97       	sbiw	r26, 0x02	; 2
    429e:	e0 e0       	ldi	r30, 0x00	; 0
    42a0:	f0 e0       	ldi	r31, 0x00	; 0
    42a2:	d8 01       	movw	r26, r16
    42a4:	12 96       	adiw	r26, 0x02	; 2
    42a6:	8d 91       	ld	r24, X+
    42a8:	9c 91       	ld	r25, X
    42aa:	13 97       	sbiw	r26, 0x03	; 3
    42ac:	00 97       	sbiw	r24, 0x00	; 0
    42ae:	19 f0       	breq	.+6      	; 0x42b6 <free+0xf0>
    42b0:	f8 01       	movw	r30, r16
    42b2:	8c 01       	movw	r16, r24
    42b4:	f6 cf       	rjmp	.-20     	; 0x42a2 <free+0xdc>
    42b6:	8d 91       	ld	r24, X+
    42b8:	9c 91       	ld	r25, X
    42ba:	98 01       	movw	r18, r16
    42bc:	2e 5f       	subi	r18, 0xFE	; 254
    42be:	3f 4f       	sbci	r19, 0xFF	; 255
    42c0:	82 0f       	add	r24, r18
    42c2:	93 1f       	adc	r25, r19
    42c4:	20 91 d6 07 	lds	r18, 0x07D6
    42c8:	30 91 d7 07 	lds	r19, 0x07D7
    42cc:	28 17       	cp	r18, r24
    42ce:	39 07       	cpc	r19, r25
    42d0:	69 f4       	brne	.+26     	; 0x42ec <free+0x126>
    42d2:	30 97       	sbiw	r30, 0x00	; 0
    42d4:	29 f4       	brne	.+10     	; 0x42e0 <free+0x11a>
    42d6:	10 92 d9 07 	sts	0x07D9, r1
    42da:	10 92 d8 07 	sts	0x07D8, r1
    42de:	02 c0       	rjmp	.+4      	; 0x42e4 <free+0x11e>
    42e0:	13 82       	std	Z+3, r1	; 0x03
    42e2:	12 82       	std	Z+2, r1	; 0x02
    42e4:	10 93 d7 07 	sts	0x07D7, r17
    42e8:	00 93 d6 07 	sts	0x07D6, r16
    42ec:	df 91       	pop	r29
    42ee:	cf 91       	pop	r28
    42f0:	1f 91       	pop	r17
    42f2:	0f 91       	pop	r16
    42f4:	08 95       	ret

000042f6 <__ftoa_engine>:
    42f6:	28 30       	cpi	r18, 0x08	; 8
    42f8:	08 f0       	brcs	.+2      	; 0x42fc <__ftoa_engine+0x6>
    42fa:	27 e0       	ldi	r18, 0x07	; 7
    42fc:	33 27       	eor	r19, r19
    42fe:	da 01       	movw	r26, r20
    4300:	99 0f       	add	r25, r25
    4302:	31 1d       	adc	r19, r1
    4304:	87 fd       	sbrc	r24, 7
    4306:	91 60       	ori	r25, 0x01	; 1
    4308:	00 96       	adiw	r24, 0x00	; 0
    430a:	61 05       	cpc	r22, r1
    430c:	71 05       	cpc	r23, r1
    430e:	39 f4       	brne	.+14     	; 0x431e <__ftoa_engine+0x28>
    4310:	32 60       	ori	r19, 0x02	; 2
    4312:	2e 5f       	subi	r18, 0xFE	; 254
    4314:	3d 93       	st	X+, r19
    4316:	30 e3       	ldi	r19, 0x30	; 48
    4318:	2a 95       	dec	r18
    431a:	e1 f7       	brne	.-8      	; 0x4314 <__ftoa_engine+0x1e>
    431c:	08 95       	ret
    431e:	9f 3f       	cpi	r25, 0xFF	; 255
    4320:	30 f0       	brcs	.+12     	; 0x432e <__ftoa_engine+0x38>
    4322:	80 38       	cpi	r24, 0x80	; 128
    4324:	71 05       	cpc	r23, r1
    4326:	61 05       	cpc	r22, r1
    4328:	09 f0       	breq	.+2      	; 0x432c <__ftoa_engine+0x36>
    432a:	3c 5f       	subi	r19, 0xFC	; 252
    432c:	3c 5f       	subi	r19, 0xFC	; 252
    432e:	3d 93       	st	X+, r19
    4330:	91 30       	cpi	r25, 0x01	; 1
    4332:	08 f0       	brcs	.+2      	; 0x4336 <__ftoa_engine+0x40>
    4334:	80 68       	ori	r24, 0x80	; 128
    4336:	91 1d       	adc	r25, r1
    4338:	df 93       	push	r29
    433a:	cf 93       	push	r28
    433c:	1f 93       	push	r17
    433e:	0f 93       	push	r16
    4340:	ff 92       	push	r15
    4342:	ef 92       	push	r14
    4344:	19 2f       	mov	r17, r25
    4346:	98 7f       	andi	r25, 0xF8	; 248
    4348:	96 95       	lsr	r25
    434a:	e9 2f       	mov	r30, r25
    434c:	96 95       	lsr	r25
    434e:	96 95       	lsr	r25
    4350:	e9 0f       	add	r30, r25
    4352:	ff 27       	eor	r31, r31
    4354:	ec 59       	subi	r30, 0x9C	; 156
    4356:	fb 4f       	sbci	r31, 0xFB	; 251
    4358:	99 27       	eor	r25, r25
    435a:	33 27       	eor	r19, r19
    435c:	ee 24       	eor	r14, r14
    435e:	ff 24       	eor	r15, r15
    4360:	a7 01       	movw	r20, r14
    4362:	e7 01       	movw	r28, r14
    4364:	05 90       	lpm	r0, Z+
    4366:	08 94       	sec
    4368:	07 94       	ror	r0
    436a:	28 f4       	brcc	.+10     	; 0x4376 <__ftoa_engine+0x80>
    436c:	36 0f       	add	r19, r22
    436e:	e7 1e       	adc	r14, r23
    4370:	f8 1e       	adc	r15, r24
    4372:	49 1f       	adc	r20, r25
    4374:	51 1d       	adc	r21, r1
    4376:	66 0f       	add	r22, r22
    4378:	77 1f       	adc	r23, r23
    437a:	88 1f       	adc	r24, r24
    437c:	99 1f       	adc	r25, r25
    437e:	06 94       	lsr	r0
    4380:	a1 f7       	brne	.-24     	; 0x436a <__ftoa_engine+0x74>
    4382:	05 90       	lpm	r0, Z+
    4384:	07 94       	ror	r0
    4386:	28 f4       	brcc	.+10     	; 0x4392 <__ftoa_engine+0x9c>
    4388:	e7 0e       	add	r14, r23
    438a:	f8 1e       	adc	r15, r24
    438c:	49 1f       	adc	r20, r25
    438e:	56 1f       	adc	r21, r22
    4390:	c1 1d       	adc	r28, r1
    4392:	77 0f       	add	r23, r23
    4394:	88 1f       	adc	r24, r24
    4396:	99 1f       	adc	r25, r25
    4398:	66 1f       	adc	r22, r22
    439a:	06 94       	lsr	r0
    439c:	a1 f7       	brne	.-24     	; 0x4386 <__ftoa_engine+0x90>
    439e:	05 90       	lpm	r0, Z+
    43a0:	07 94       	ror	r0
    43a2:	28 f4       	brcc	.+10     	; 0x43ae <__ftoa_engine+0xb8>
    43a4:	f8 0e       	add	r15, r24
    43a6:	49 1f       	adc	r20, r25
    43a8:	56 1f       	adc	r21, r22
    43aa:	c7 1f       	adc	r28, r23
    43ac:	d1 1d       	adc	r29, r1
    43ae:	88 0f       	add	r24, r24
    43b0:	99 1f       	adc	r25, r25
    43b2:	66 1f       	adc	r22, r22
    43b4:	77 1f       	adc	r23, r23
    43b6:	06 94       	lsr	r0
    43b8:	a1 f7       	brne	.-24     	; 0x43a2 <__ftoa_engine+0xac>
    43ba:	05 90       	lpm	r0, Z+
    43bc:	07 94       	ror	r0
    43be:	20 f4       	brcc	.+8      	; 0x43c8 <__ftoa_engine+0xd2>
    43c0:	49 0f       	add	r20, r25
    43c2:	56 1f       	adc	r21, r22
    43c4:	c7 1f       	adc	r28, r23
    43c6:	d8 1f       	adc	r29, r24
    43c8:	99 0f       	add	r25, r25
    43ca:	66 1f       	adc	r22, r22
    43cc:	77 1f       	adc	r23, r23
    43ce:	88 1f       	adc	r24, r24
    43d0:	06 94       	lsr	r0
    43d2:	a9 f7       	brne	.-22     	; 0x43be <__ftoa_engine+0xc8>
    43d4:	84 91       	lpm	r24, Z
    43d6:	10 95       	com	r17
    43d8:	17 70       	andi	r17, 0x07	; 7
    43da:	41 f0       	breq	.+16     	; 0x43ec <__ftoa_engine+0xf6>
    43dc:	d6 95       	lsr	r29
    43de:	c7 95       	ror	r28
    43e0:	57 95       	ror	r21
    43e2:	47 95       	ror	r20
    43e4:	f7 94       	ror	r15
    43e6:	e7 94       	ror	r14
    43e8:	1a 95       	dec	r17
    43ea:	c1 f7       	brne	.-16     	; 0x43dc <__ftoa_engine+0xe6>
    43ec:	ea e0       	ldi	r30, 0x0A	; 10
    43ee:	f4 e0       	ldi	r31, 0x04	; 4
    43f0:	68 94       	set
    43f2:	15 90       	lpm	r1, Z+
    43f4:	15 91       	lpm	r17, Z+
    43f6:	35 91       	lpm	r19, Z+
    43f8:	65 91       	lpm	r22, Z+
    43fa:	95 91       	lpm	r25, Z+
    43fc:	05 90       	lpm	r0, Z+
    43fe:	7f e2       	ldi	r23, 0x2F	; 47
    4400:	73 95       	inc	r23
    4402:	e1 18       	sub	r14, r1
    4404:	f1 0a       	sbc	r15, r17
    4406:	43 0b       	sbc	r20, r19
    4408:	56 0b       	sbc	r21, r22
    440a:	c9 0b       	sbc	r28, r25
    440c:	d0 09       	sbc	r29, r0
    440e:	c0 f7       	brcc	.-16     	; 0x4400 <__ftoa_engine+0x10a>
    4410:	e1 0c       	add	r14, r1
    4412:	f1 1e       	adc	r15, r17
    4414:	43 1f       	adc	r20, r19
    4416:	56 1f       	adc	r21, r22
    4418:	c9 1f       	adc	r28, r25
    441a:	d0 1d       	adc	r29, r0
    441c:	7e f4       	brtc	.+30     	; 0x443c <__ftoa_engine+0x146>
    441e:	70 33       	cpi	r23, 0x30	; 48
    4420:	11 f4       	brne	.+4      	; 0x4426 <__ftoa_engine+0x130>
    4422:	8a 95       	dec	r24
    4424:	e6 cf       	rjmp	.-52     	; 0x43f2 <__ftoa_engine+0xfc>
    4426:	e8 94       	clt
    4428:	01 50       	subi	r16, 0x01	; 1
    442a:	30 f0       	brcs	.+12     	; 0x4438 <__ftoa_engine+0x142>
    442c:	08 0f       	add	r16, r24
    442e:	0a f4       	brpl	.+2      	; 0x4432 <__ftoa_engine+0x13c>
    4430:	00 27       	eor	r16, r16
    4432:	02 17       	cp	r16, r18
    4434:	08 f4       	brcc	.+2      	; 0x4438 <__ftoa_engine+0x142>
    4436:	20 2f       	mov	r18, r16
    4438:	23 95       	inc	r18
    443a:	02 2f       	mov	r16, r18
    443c:	7a 33       	cpi	r23, 0x3A	; 58
    443e:	28 f0       	brcs	.+10     	; 0x444a <__ftoa_engine+0x154>
    4440:	79 e3       	ldi	r23, 0x39	; 57
    4442:	7d 93       	st	X+, r23
    4444:	2a 95       	dec	r18
    4446:	e9 f7       	brne	.-6      	; 0x4442 <__ftoa_engine+0x14c>
    4448:	10 c0       	rjmp	.+32     	; 0x446a <__ftoa_engine+0x174>
    444a:	7d 93       	st	X+, r23
    444c:	2a 95       	dec	r18
    444e:	89 f6       	brne	.-94     	; 0x43f2 <__ftoa_engine+0xfc>
    4450:	06 94       	lsr	r0
    4452:	97 95       	ror	r25
    4454:	67 95       	ror	r22
    4456:	37 95       	ror	r19
    4458:	17 95       	ror	r17
    445a:	17 94       	ror	r1
    445c:	e1 18       	sub	r14, r1
    445e:	f1 0a       	sbc	r15, r17
    4460:	43 0b       	sbc	r20, r19
    4462:	56 0b       	sbc	r21, r22
    4464:	c9 0b       	sbc	r28, r25
    4466:	d0 09       	sbc	r29, r0
    4468:	98 f0       	brcs	.+38     	; 0x4490 <__ftoa_engine+0x19a>
    446a:	23 95       	inc	r18
    446c:	7e 91       	ld	r23, -X
    446e:	73 95       	inc	r23
    4470:	7a 33       	cpi	r23, 0x3A	; 58
    4472:	08 f0       	brcs	.+2      	; 0x4476 <__ftoa_engine+0x180>
    4474:	70 e3       	ldi	r23, 0x30	; 48
    4476:	7c 93       	st	X, r23
    4478:	20 13       	cpse	r18, r16
    447a:	b8 f7       	brcc	.-18     	; 0x446a <__ftoa_engine+0x174>
    447c:	7e 91       	ld	r23, -X
    447e:	70 61       	ori	r23, 0x10	; 16
    4480:	7d 93       	st	X+, r23
    4482:	30 f0       	brcs	.+12     	; 0x4490 <__ftoa_engine+0x19a>
    4484:	83 95       	inc	r24
    4486:	71 e3       	ldi	r23, 0x31	; 49
    4488:	7d 93       	st	X+, r23
    448a:	70 e3       	ldi	r23, 0x30	; 48
    448c:	2a 95       	dec	r18
    448e:	e1 f7       	brne	.-8      	; 0x4488 <__ftoa_engine+0x192>
    4490:	11 24       	eor	r1, r1
    4492:	ef 90       	pop	r14
    4494:	ff 90       	pop	r15
    4496:	0f 91       	pop	r16
    4498:	1f 91       	pop	r17
    449a:	cf 91       	pop	r28
    449c:	df 91       	pop	r29
    449e:	99 27       	eor	r25, r25
    44a0:	87 fd       	sbrc	r24, 7
    44a2:	90 95       	com	r25
    44a4:	08 95       	ret

000044a6 <strnlen_P>:
    44a6:	fc 01       	movw	r30, r24
    44a8:	05 90       	lpm	r0, Z+
    44aa:	61 50       	subi	r22, 0x01	; 1
    44ac:	70 40       	sbci	r23, 0x00	; 0
    44ae:	01 10       	cpse	r0, r1
    44b0:	d8 f7       	brcc	.-10     	; 0x44a8 <strnlen_P+0x2>
    44b2:	80 95       	com	r24
    44b4:	90 95       	com	r25
    44b6:	8e 0f       	add	r24, r30
    44b8:	9f 1f       	adc	r25, r31
    44ba:	08 95       	ret

000044bc <strnlen>:
    44bc:	fc 01       	movw	r30, r24
    44be:	61 50       	subi	r22, 0x01	; 1
    44c0:	70 40       	sbci	r23, 0x00	; 0
    44c2:	01 90       	ld	r0, Z+
    44c4:	01 10       	cpse	r0, r1
    44c6:	d8 f7       	brcc	.-10     	; 0x44be <strnlen+0x2>
    44c8:	80 95       	com	r24
    44ca:	90 95       	com	r25
    44cc:	8e 0f       	add	r24, r30
    44ce:	9f 1f       	adc	r25, r31
    44d0:	08 95       	ret

000044d2 <fputc>:
    44d2:	0f 93       	push	r16
    44d4:	1f 93       	push	r17
    44d6:	cf 93       	push	r28
    44d8:	df 93       	push	r29
    44da:	fb 01       	movw	r30, r22
    44dc:	23 81       	ldd	r18, Z+3	; 0x03
    44de:	21 fd       	sbrc	r18, 1
    44e0:	03 c0       	rjmp	.+6      	; 0x44e8 <fputc+0x16>
    44e2:	8f ef       	ldi	r24, 0xFF	; 255
    44e4:	9f ef       	ldi	r25, 0xFF	; 255
    44e6:	28 c0       	rjmp	.+80     	; 0x4538 <fputc+0x66>
    44e8:	22 ff       	sbrs	r18, 2
    44ea:	16 c0       	rjmp	.+44     	; 0x4518 <fputc+0x46>
    44ec:	46 81       	ldd	r20, Z+6	; 0x06
    44ee:	57 81       	ldd	r21, Z+7	; 0x07
    44f0:	24 81       	ldd	r18, Z+4	; 0x04
    44f2:	35 81       	ldd	r19, Z+5	; 0x05
    44f4:	42 17       	cp	r20, r18
    44f6:	53 07       	cpc	r21, r19
    44f8:	44 f4       	brge	.+16     	; 0x450a <fputc+0x38>
    44fa:	a0 81       	ld	r26, Z
    44fc:	b1 81       	ldd	r27, Z+1	; 0x01
    44fe:	9d 01       	movw	r18, r26
    4500:	2f 5f       	subi	r18, 0xFF	; 255
    4502:	3f 4f       	sbci	r19, 0xFF	; 255
    4504:	31 83       	std	Z+1, r19	; 0x01
    4506:	20 83       	st	Z, r18
    4508:	8c 93       	st	X, r24
    450a:	26 81       	ldd	r18, Z+6	; 0x06
    450c:	37 81       	ldd	r19, Z+7	; 0x07
    450e:	2f 5f       	subi	r18, 0xFF	; 255
    4510:	3f 4f       	sbci	r19, 0xFF	; 255
    4512:	37 83       	std	Z+7, r19	; 0x07
    4514:	26 83       	std	Z+6, r18	; 0x06
    4516:	10 c0       	rjmp	.+32     	; 0x4538 <fputc+0x66>
    4518:	eb 01       	movw	r28, r22
    451a:	09 2f       	mov	r16, r25
    451c:	18 2f       	mov	r17, r24
    451e:	00 84       	ldd	r0, Z+8	; 0x08
    4520:	f1 85       	ldd	r31, Z+9	; 0x09
    4522:	e0 2d       	mov	r30, r0
    4524:	09 95       	icall
    4526:	89 2b       	or	r24, r25
    4528:	e1 f6       	brne	.-72     	; 0x44e2 <fputc+0x10>
    452a:	8e 81       	ldd	r24, Y+6	; 0x06
    452c:	9f 81       	ldd	r25, Y+7	; 0x07
    452e:	01 96       	adiw	r24, 0x01	; 1
    4530:	9f 83       	std	Y+7, r25	; 0x07
    4532:	8e 83       	std	Y+6, r24	; 0x06
    4534:	81 2f       	mov	r24, r17
    4536:	90 2f       	mov	r25, r16
    4538:	df 91       	pop	r29
    453a:	cf 91       	pop	r28
    453c:	1f 91       	pop	r17
    453e:	0f 91       	pop	r16
    4540:	08 95       	ret

00004542 <sprintf>:
    4542:	0f 93       	push	r16
    4544:	1f 93       	push	r17
    4546:	cf 93       	push	r28
    4548:	df 93       	push	r29
    454a:	cd b7       	in	r28, 0x3d	; 61
    454c:	de b7       	in	r29, 0x3e	; 62
    454e:	2e 97       	sbiw	r28, 0x0e	; 14
    4550:	0f b6       	in	r0, 0x3f	; 63
    4552:	f8 94       	cli
    4554:	de bf       	out	0x3e, r29	; 62
    4556:	0f be       	out	0x3f, r0	; 63
    4558:	cd bf       	out	0x3d, r28	; 61
    455a:	0d 89       	ldd	r16, Y+21	; 0x15
    455c:	1e 89       	ldd	r17, Y+22	; 0x16
    455e:	86 e0       	ldi	r24, 0x06	; 6
    4560:	8c 83       	std	Y+4, r24	; 0x04
    4562:	1a 83       	std	Y+2, r17	; 0x02
    4564:	09 83       	std	Y+1, r16	; 0x01
    4566:	8f ef       	ldi	r24, 0xFF	; 255
    4568:	9f e7       	ldi	r25, 0x7F	; 127
    456a:	9e 83       	std	Y+6, r25	; 0x06
    456c:	8d 83       	std	Y+5, r24	; 0x05
    456e:	ae 01       	movw	r20, r28
    4570:	47 5e       	subi	r20, 0xE7	; 231
    4572:	5f 4f       	sbci	r21, 0xFF	; 255
    4574:	6f 89       	ldd	r22, Y+23	; 0x17
    4576:	78 8d       	ldd	r23, Y+24	; 0x18
    4578:	ce 01       	movw	r24, r28
    457a:	01 96       	adiw	r24, 0x01	; 1
    457c:	dc d9       	rcall	.-3144   	; 0x3936 <vfprintf>
    457e:	2f 81       	ldd	r18, Y+7	; 0x07
    4580:	38 85       	ldd	r19, Y+8	; 0x08
    4582:	f8 01       	movw	r30, r16
    4584:	e2 0f       	add	r30, r18
    4586:	f3 1f       	adc	r31, r19
    4588:	10 82       	st	Z, r1
    458a:	2e 96       	adiw	r28, 0x0e	; 14
    458c:	0f b6       	in	r0, 0x3f	; 63
    458e:	f8 94       	cli
    4590:	de bf       	out	0x3e, r29	; 62
    4592:	0f be       	out	0x3f, r0	; 63
    4594:	cd bf       	out	0x3d, r28	; 61
    4596:	df 91       	pop	r29
    4598:	cf 91       	pop	r28
    459a:	1f 91       	pop	r17
    459c:	0f 91       	pop	r16
    459e:	08 95       	ret

000045a0 <__ultoa_invert>:
    45a0:	fa 01       	movw	r30, r20
    45a2:	aa 27       	eor	r26, r26
    45a4:	28 30       	cpi	r18, 0x08	; 8
    45a6:	51 f1       	breq	.+84     	; 0x45fc <__ultoa_invert+0x5c>
    45a8:	20 31       	cpi	r18, 0x10	; 16
    45aa:	81 f1       	breq	.+96     	; 0x460c <__ultoa_invert+0x6c>
    45ac:	e8 94       	clt
    45ae:	6f 93       	push	r22
    45b0:	6e 7f       	andi	r22, 0xFE	; 254
    45b2:	6e 5f       	subi	r22, 0xFE	; 254
    45b4:	7f 4f       	sbci	r23, 0xFF	; 255
    45b6:	8f 4f       	sbci	r24, 0xFF	; 255
    45b8:	9f 4f       	sbci	r25, 0xFF	; 255
    45ba:	af 4f       	sbci	r26, 0xFF	; 255
    45bc:	b1 e0       	ldi	r27, 0x01	; 1
    45be:	3e d0       	rcall	.+124    	; 0x463c <__ultoa_invert+0x9c>
    45c0:	b4 e0       	ldi	r27, 0x04	; 4
    45c2:	3c d0       	rcall	.+120    	; 0x463c <__ultoa_invert+0x9c>
    45c4:	67 0f       	add	r22, r23
    45c6:	78 1f       	adc	r23, r24
    45c8:	89 1f       	adc	r24, r25
    45ca:	9a 1f       	adc	r25, r26
    45cc:	a1 1d       	adc	r26, r1
    45ce:	68 0f       	add	r22, r24
    45d0:	79 1f       	adc	r23, r25
    45d2:	8a 1f       	adc	r24, r26
    45d4:	91 1d       	adc	r25, r1
    45d6:	a1 1d       	adc	r26, r1
    45d8:	6a 0f       	add	r22, r26
    45da:	71 1d       	adc	r23, r1
    45dc:	81 1d       	adc	r24, r1
    45de:	91 1d       	adc	r25, r1
    45e0:	a1 1d       	adc	r26, r1
    45e2:	20 d0       	rcall	.+64     	; 0x4624 <__ultoa_invert+0x84>
    45e4:	09 f4       	brne	.+2      	; 0x45e8 <__ultoa_invert+0x48>
    45e6:	68 94       	set
    45e8:	3f 91       	pop	r19
    45ea:	2a e0       	ldi	r18, 0x0A	; 10
    45ec:	26 9f       	mul	r18, r22
    45ee:	11 24       	eor	r1, r1
    45f0:	30 19       	sub	r19, r0
    45f2:	30 5d       	subi	r19, 0xD0	; 208
    45f4:	31 93       	st	Z+, r19
    45f6:	de f6       	brtc	.-74     	; 0x45ae <__ultoa_invert+0xe>
    45f8:	cf 01       	movw	r24, r30
    45fa:	08 95       	ret
    45fc:	46 2f       	mov	r20, r22
    45fe:	47 70       	andi	r20, 0x07	; 7
    4600:	40 5d       	subi	r20, 0xD0	; 208
    4602:	41 93       	st	Z+, r20
    4604:	b3 e0       	ldi	r27, 0x03	; 3
    4606:	0f d0       	rcall	.+30     	; 0x4626 <__ultoa_invert+0x86>
    4608:	c9 f7       	brne	.-14     	; 0x45fc <__ultoa_invert+0x5c>
    460a:	f6 cf       	rjmp	.-20     	; 0x45f8 <__ultoa_invert+0x58>
    460c:	46 2f       	mov	r20, r22
    460e:	4f 70       	andi	r20, 0x0F	; 15
    4610:	40 5d       	subi	r20, 0xD0	; 208
    4612:	4a 33       	cpi	r20, 0x3A	; 58
    4614:	18 f0       	brcs	.+6      	; 0x461c <__ultoa_invert+0x7c>
    4616:	49 5d       	subi	r20, 0xD9	; 217
    4618:	31 fd       	sbrc	r19, 1
    461a:	40 52       	subi	r20, 0x20	; 32
    461c:	41 93       	st	Z+, r20
    461e:	02 d0       	rcall	.+4      	; 0x4624 <__ultoa_invert+0x84>
    4620:	a9 f7       	brne	.-22     	; 0x460c <__ultoa_invert+0x6c>
    4622:	ea cf       	rjmp	.-44     	; 0x45f8 <__ultoa_invert+0x58>
    4624:	b4 e0       	ldi	r27, 0x04	; 4
    4626:	a6 95       	lsr	r26
    4628:	97 95       	ror	r25
    462a:	87 95       	ror	r24
    462c:	77 95       	ror	r23
    462e:	67 95       	ror	r22
    4630:	ba 95       	dec	r27
    4632:	c9 f7       	brne	.-14     	; 0x4626 <__ultoa_invert+0x86>
    4634:	00 97       	sbiw	r24, 0x00	; 0
    4636:	61 05       	cpc	r22, r1
    4638:	71 05       	cpc	r23, r1
    463a:	08 95       	ret
    463c:	9b 01       	movw	r18, r22
    463e:	ac 01       	movw	r20, r24
    4640:	0a 2e       	mov	r0, r26
    4642:	06 94       	lsr	r0
    4644:	57 95       	ror	r21
    4646:	47 95       	ror	r20
    4648:	37 95       	ror	r19
    464a:	27 95       	ror	r18
    464c:	ba 95       	dec	r27
    464e:	c9 f7       	brne	.-14     	; 0x4642 <__ultoa_invert+0xa2>
    4650:	62 0f       	add	r22, r18
    4652:	73 1f       	adc	r23, r19
    4654:	84 1f       	adc	r24, r20
    4656:	95 1f       	adc	r25, r21
    4658:	a0 1d       	adc	r26, r0
    465a:	08 95       	ret

0000465c <__do_global_dtors>:
    465c:	12 e0       	ldi	r17, 0x02	; 2
    465e:	c3 e8       	ldi	r28, 0x83	; 131
    4660:	d2 e0       	ldi	r29, 0x02	; 2
    4662:	03 c0       	rjmp	.+6      	; 0x466a <__do_global_dtors+0xe>
    4664:	fe 01       	movw	r30, r28
    4666:	11 dd       	rcall	.-1502   	; 0x408a <__tablejump2__>
    4668:	21 96       	adiw	r28, 0x01	; 1
    466a:	c4 38       	cpi	r28, 0x84	; 132
    466c:	d1 07       	cpc	r29, r17
    466e:	d1 f7       	brne	.-12     	; 0x4664 <__do_global_dtors+0x8>
    4670:	f8 94       	cli

00004672 <__stop_program>:
    4672:	ff cf       	rjmp	.-2      	; 0x4672 <__stop_program>
