
FWCP_MK3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000322  00800100  00009200  00009294  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00009200  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000a13  00800422  00800422  000095b6  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000095b6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00009614  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000588  00000000  00000000  00009654  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000dd25  00000000  00000000  00009bdc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000207c  00000000  00000000  00017901  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00005a17  00000000  00000000  0001997d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001a2c  00000000  00000000  0001f394  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001b7c  00000000  00000000  00020dc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000d46f  00000000  00000000  0002293c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000006b8  00000000  00000000  0002fdab  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	58 c3       	rjmp	.+1712   	; 0x6b2 <__dtors_end>
       2:	00 00       	nop
       4:	80 c3       	rjmp	.+1792   	; 0x706 <__bad_interrupt>
       6:	00 00       	nop
       8:	7e c3       	rjmp	.+1788   	; 0x706 <__bad_interrupt>
       a:	00 00       	nop
       c:	7c c3       	rjmp	.+1784   	; 0x706 <__bad_interrupt>
       e:	00 00       	nop
      10:	7a c3       	rjmp	.+1780   	; 0x706 <__bad_interrupt>
      12:	00 00       	nop
      14:	78 c3       	rjmp	.+1776   	; 0x706 <__bad_interrupt>
      16:	00 00       	nop
      18:	76 c3       	rjmp	.+1772   	; 0x706 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	74 c3       	rjmp	.+1768   	; 0x706 <__bad_interrupt>
      1e:	00 00       	nop
      20:	72 c3       	rjmp	.+1764   	; 0x706 <__bad_interrupt>
      22:	00 00       	nop
      24:	70 c3       	rjmp	.+1760   	; 0x706 <__bad_interrupt>
      26:	00 00       	nop
      28:	6e c3       	rjmp	.+1756   	; 0x706 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	0c 94 61 2b 	jmp	0x56c2	; 0x56c2 <__vector_11>
      30:	6a c3       	rjmp	.+1748   	; 0x706 <__bad_interrupt>
      32:	00 00       	nop
      34:	0c 94 7d 2b 	jmp	0x56fa	; 0x56fa <__vector_13>
      38:	66 c3       	rjmp	.+1740   	; 0x706 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	64 c3       	rjmp	.+1736   	; 0x706 <__bad_interrupt>
      3e:	00 00       	nop
      40:	0c 94 39 2b 	jmp	0x5672	; 0x5672 <__vector_16>
      44:	60 c3       	rjmp	.+1728   	; 0x706 <__bad_interrupt>
      46:	00 00       	nop
      48:	5e c3       	rjmp	.+1724   	; 0x706 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	5c c3       	rjmp	.+1720   	; 0x706 <__bad_interrupt>
      4e:	00 00       	nop
      50:	0c 94 8e 2b 	jmp	0x571c	; 0x571c <__vector_20>
      54:	58 c3       	rjmp	.+1712   	; 0x706 <__bad_interrupt>
      56:	00 00       	nop
      58:	56 c3       	rjmp	.+1708   	; 0x706 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	54 c3       	rjmp	.+1704   	; 0x706 <__bad_interrupt>
      5e:	00 00       	nop
      60:	52 c3       	rjmp	.+1700   	; 0x706 <__bad_interrupt>
      62:	00 00       	nop
      64:	50 c3       	rjmp	.+1696   	; 0x706 <__bad_interrupt>
      66:	00 00       	nop
      68:	4e c3       	rjmp	.+1692   	; 0x706 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	4c c3       	rjmp	.+1688   	; 0x706 <__bad_interrupt>
      6e:	00 00       	nop
      70:	4a c3       	rjmp	.+1684   	; 0x706 <__bad_interrupt>
      72:	00 00       	nop
      74:	48 c3       	rjmp	.+1680   	; 0x706 <__bad_interrupt>
      76:	00 00       	nop
      78:	46 c3       	rjmp	.+1676   	; 0x706 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	44 c3       	rjmp	.+1672   	; 0x706 <__bad_interrupt>
      7e:	00 00       	nop
      80:	42 c3       	rjmp	.+1668   	; 0x706 <__bad_interrupt>
      82:	00 00       	nop
      84:	40 c3       	rjmp	.+1664   	; 0x706 <__bad_interrupt>
      86:	00 00       	nop
      88:	3e c3       	rjmp	.+1660   	; 0x706 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	4a 09       	sbc	r20, r10
      8e:	51 09       	sbc	r21, r1
      90:	9e 0a       	sbc	r9, r30
      92:	c1 09       	sbc	r28, r1
      94:	9e 0a       	sbc	r9, r30
      96:	9e 0a       	sbc	r9, r30
      98:	9e 0a       	sbc	r9, r30
      9a:	96 0a       	sbc	r9, r22
      9c:	9e 0a       	sbc	r9, r30
      9e:	9e 0a       	sbc	r9, r30
      a0:	9e 0a       	sbc	r9, r30
      a2:	9e 0a       	sbc	r9, r30
      a4:	9e 0a       	sbc	r9, r30
      a6:	9e 0a       	sbc	r9, r30
      a8:	9e 0a       	sbc	r9, r30
      aa:	9e 0a       	sbc	r9, r30
      ac:	9e 0a       	sbc	r9, r30
      ae:	9e 0a       	sbc	r9, r30
      b0:	9e 0a       	sbc	r9, r30
      b2:	9e 0a       	sbc	r9, r30
      b4:	9e 0a       	sbc	r9, r30
      b6:	9e 0a       	sbc	r9, r30
      b8:	9e 0a       	sbc	r9, r30
      ba:	9e 0a       	sbc	r9, r30
      bc:	9e 0a       	sbc	r9, r30
      be:	9e 0a       	sbc	r9, r30
      c0:	9e 0a       	sbc	r9, r30
      c2:	9e 0a       	sbc	r9, r30
      c4:	9e 0a       	sbc	r9, r30
      c6:	9e 0a       	sbc	r9, r30
      c8:	9e 0a       	sbc	r9, r30
      ca:	9e 0a       	sbc	r9, r30
      cc:	9e 0a       	sbc	r9, r30
      ce:	9e 0a       	sbc	r9, r30
      d0:	9e 0a       	sbc	r9, r30
      d2:	9e 0a       	sbc	r9, r30
      d4:	9e 0a       	sbc	r9, r30
      d6:	9e 0a       	sbc	r9, r30
      d8:	9e 0a       	sbc	r9, r30
      da:	9e 0a       	sbc	r9, r30
      dc:	9e 0a       	sbc	r9, r30
      de:	9e 0a       	sbc	r9, r30
      e0:	9e 0a       	sbc	r9, r30
      e2:	9e 0a       	sbc	r9, r30
      e4:	9e 0a       	sbc	r9, r30
      e6:	9e 0a       	sbc	r9, r30
      e8:	9e 0a       	sbc	r9, r30
      ea:	9e 0a       	sbc	r9, r30
      ec:	9e 0a       	sbc	r9, r30
      ee:	9e 0a       	sbc	r9, r30
      f0:	47 0a       	sbc	r4, r23
      f2:	4d 0a       	sbc	r4, r29
      f4:	5e 0a       	sbc	r5, r30
      f6:	6f 0a       	sbc	r6, r31
      f8:	84 0a       	sbc	r8, r20
      fa:	c7 22       	and	r12, r23
      fc:	9a 21       	and	r25, r10
      fe:	a9 21       	and	r26, r9
     100:	a4 21       	and	r26, r4
     102:	a4 21       	and	r26, r4
     104:	a4 21       	and	r26, r4
     106:	a4 21       	and	r26, r4
     108:	a4 21       	and	r26, r4
     10a:	a4 21       	and	r26, r4
     10c:	a4 21       	and	r26, r4
     10e:	a4 21       	and	r26, r4
     110:	a4 21       	and	r26, r4
     112:	a4 21       	and	r26, r4
     114:	d5 22       	and	r13, r21
     116:	a4 21       	and	r26, r4
     118:	a4 21       	and	r26, r4
     11a:	a4 21       	and	r26, r4
     11c:	50 21       	and	r21, r0
     11e:	a4 21       	and	r26, r4
     120:	a9 21       	and	r26, r9
     122:	a4 21       	and	r26, r4
     124:	a4 21       	and	r26, r4
     126:	98 22       	and	r9, r24
     128:	26 24       	eor	r2, r6
     12a:	28 24       	eor	r2, r8
     12c:	28 24       	eor	r2, r8
     12e:	28 24       	eor	r2, r8
     130:	28 24       	eor	r2, r8
     132:	28 24       	eor	r2, r8
     134:	28 24       	eor	r2, r8
     136:	24 24       	eor	r2, r4
     138:	28 24       	eor	r2, r8
     13a:	28 24       	eor	r2, r8
     13c:	28 24       	eor	r2, r8
     13e:	28 24       	eor	r2, r8
     140:	28 24       	eor	r2, r8
     142:	2b 24       	eor	r2, r11
     144:	2a 24       	eor	r2, r10
     146:	14 24       	eor	r1, r4
     148:	16 24       	eor	r1, r6
     14a:	18 24       	eor	r1, r8
     14c:	1a 24       	eor	r1, r10
     14e:	1c 24       	eor	r1, r12
     150:	1e 24       	eor	r1, r14
     152:	20 24       	eor	r2, r0
     154:	22 24       	eor	r2, r2
     156:	db 2e       	mov	r13, r27
     158:	eb 2e       	mov	r14, r27
     15a:	eb 2e       	mov	r14, r27
     15c:	eb 2e       	mov	r14, r27
     15e:	eb 2e       	mov	r14, r27
     160:	eb 2e       	mov	r14, r27
     162:	eb 2e       	mov	r14, r27
     164:	eb 2e       	mov	r14, r27
     166:	eb 2e       	mov	r14, r27
     168:	eb 2e       	mov	r14, r27
     16a:	eb 2e       	mov	r14, r27
     16c:	eb 2e       	mov	r14, r27
     16e:	eb 2e       	mov	r14, r27
     170:	eb 2e       	mov	r14, r27
     172:	eb 2e       	mov	r14, r27
     174:	eb 2e       	mov	r14, r27
     176:	eb 2e       	mov	r14, r27
     178:	eb 2e       	mov	r14, r27
     17a:	eb 2e       	mov	r14, r27
     17c:	eb 2e       	mov	r14, r27
     17e:	eb 2e       	mov	r14, r27
     180:	eb 2e       	mov	r14, r27
     182:	eb 2e       	mov	r14, r27
     184:	eb 2e       	mov	r14, r27
     186:	eb 2e       	mov	r14, r27
     188:	eb 2e       	mov	r14, r27
     18a:	eb 2e       	mov	r14, r27
     18c:	eb 2e       	mov	r14, r27
     18e:	eb 2e       	mov	r14, r27
     190:	eb 2e       	mov	r14, r27
     192:	eb 2e       	mov	r14, r27
     194:	eb 2e       	mov	r14, r27
     196:	eb 2e       	mov	r14, r27
     198:	eb 2e       	mov	r14, r27
     19a:	eb 2e       	mov	r14, r27
     19c:	eb 2e       	mov	r14, r27
     19e:	eb 2e       	mov	r14, r27
     1a0:	eb 2e       	mov	r14, r27
     1a2:	eb 2e       	mov	r14, r27
     1a4:	eb 2e       	mov	r14, r27
     1a6:	eb 2e       	mov	r14, r27
     1a8:	eb 2e       	mov	r14, r27
     1aa:	eb 2e       	mov	r14, r27
     1ac:	eb 2e       	mov	r14, r27
     1ae:	eb 2e       	mov	r14, r27
     1b0:	eb 2e       	mov	r14, r27
     1b2:	eb 2e       	mov	r14, r27
     1b4:	eb 2e       	mov	r14, r27
     1b6:	eb 2e       	mov	r14, r27
     1b8:	eb 2e       	mov	r14, r27
     1ba:	eb 2e       	mov	r14, r27
     1bc:	eb 2e       	mov	r14, r27
     1be:	b7 2e       	mov	r11, r23
     1c0:	eb 2e       	mov	r14, r27
     1c2:	eb 2e       	mov	r14, r27
     1c4:	eb 2e       	mov	r14, r27
     1c6:	eb 2e       	mov	r14, r27
     1c8:	eb 2e       	mov	r14, r27
     1ca:	eb 2e       	mov	r14, r27
     1cc:	eb 2e       	mov	r14, r27
     1ce:	7e 2e       	mov	r7, r30
     1d0:	7a 2e       	mov	r7, r26
     1d2:	eb 2e       	mov	r14, r27
     1d4:	a1 2e       	mov	r10, r17
     1d6:	eb 2e       	mov	r14, r27
     1d8:	eb 2e       	mov	r14, r27
     1da:	8b 2e       	mov	r8, r27
     1dc:	eb 2e       	mov	r14, r27
     1de:	eb 2e       	mov	r14, r27
     1e0:	cb 2e       	mov	r12, r27
     1e2:	7a 37       	cpi	r23, 0x7A	; 122
     1e4:	a0 37       	cpi	r26, 0x70	; 112
     1e6:	c7 37       	cpi	r28, 0x77	; 119
     1e8:	ef 37       	cpi	r30, 0x7F	; 127
     1ea:	16 38       	cpi	r17, 0x86	; 134
     1ec:	40 38       	cpi	r20, 0x80	; 128
     1ee:	69 38       	cpi	r22, 0x89	; 137
     1f0:	93 38       	cpi	r25, 0x83	; 131
     1f2:	0a 39       	cpi	r16, 0x9A	; 154
     1f4:	34 39       	cpi	r19, 0x94	; 148
     1f6:	05 a8       	ldd	r0, Z+53	; 0x35
     1f8:	4c cd       	rjmp	.-1384   	; 0xfffffc92 <__eeprom_end+0xff7efc92>
     1fa:	b2 d4       	rcall	.+2404   	; 0xb60 <_ZN6BMP18018bmp180_getpressureEv+0x100>
     1fc:	4e b9       	out	0x0e, r20	; 14
     1fe:	38 36       	cpi	r19, 0x68	; 104
     200:	a9 02       	muls	r26, r25
     202:	0c 50       	subi	r16, 0x0C	; 12
     204:	b9 91       	ld	r27, Y+
     206:	86 88       	ldd	r8, Z+22	; 0x16
     208:	08 3c       	cpi	r16, 0xC8	; 200
     20a:	a6 aa       	std	Z+54, r10	; 0x36
     20c:	aa 2a       	or	r10, r26
     20e:	be 00       	.word	0x00be	; ????
     210:	00 00       	nop
     212:	80 3f       	cpi	r24, 0xF0	; 240
     214:	07 63       	ori	r16, 0x37	; 55
     216:	42 36       	cpi	r20, 0x62	; 98
     218:	b7 9b       	sbis	0x16, 7	; 22
     21a:	d8 a7       	std	Y+40, r29	; 0x28
     21c:	1a 39       	cpi	r17, 0x9A	; 154
     21e:	68 56       	subi	r22, 0x68	; 104
     220:	18 ae       	std	Y+56, r1	; 0x38
     222:	ba ab       	std	Y+50, r27	; 0x32
     224:	55 8c       	ldd	r5, Z+29	; 0x1d
     226:	1d 3c       	cpi	r17, 0xCD	; 205
     228:	b7 cc       	rjmp	.-1682   	; 0xfffffb98 <__eeprom_end+0xff7efb98>
     22a:	57 63       	ori	r21, 0x37	; 55
     22c:	bd 6d       	ori	r27, 0xDD	; 221
     22e:	ed fd       	.word	0xfded	; ????
     230:	75 3e       	cpi	r23, 0xE5	; 229
     232:	f6 17       	cp	r31, r22
     234:	72 31       	cpi	r23, 0x12	; 18
     236:	bf 00       	.word	0x00bf	; ????
     238:	00 00       	nop
     23a:	80 3f       	cpi	r24, 0xF0	; 240
     23c:	08 00       	.word	0x0008	; ????
     23e:	00 00       	nop
     240:	be 92       	st	-X, r11
     242:	24 49       	sbci	r18, 0x94	; 148
     244:	12 3e       	cpi	r17, 0xE2	; 226
     246:	ab aa       	std	Y+51, r10	; 0x33
     248:	aa 2a       	or	r10, r26
     24a:	be cd       	rjmp	.-1156   	; 0xfffffdc8 <__eeprom_end+0xff7efdc8>
     24c:	cc cc       	rjmp	.-1640   	; 0xfffffbe6 <__eeprom_end+0xff7efbe6>
     24e:	4c 3e       	cpi	r20, 0xEC	; 236
     250:	00 00       	nop
     252:	00 80       	ld	r0, Z
     254:	be ab       	std	Y+54, r27	; 0x36
     256:	aa aa       	std	Y+50, r10	; 0x32
     258:	aa 3e       	cpi	r26, 0xEA	; 234
     25a:	00 00       	nop
     25c:	00 00       	nop
     25e:	bf 00       	.word	0x00bf	; ????
     260:	00 00       	nop
     262:	80 3f       	cpi	r24, 0xF0	; 240
     264:	00 00       	nop
     266:	00 00       	nop
     268:	00 08       	sbc	r0, r0
     26a:	41 78       	andi	r20, 0x81	; 129
     26c:	d3 bb       	out	0x13, r29	; 19
     26e:	43 87       	std	Z+11, r20	; 0x0b
     270:	d1 13       	cpse	r29, r17
     272:	3d 19       	sub	r19, r13
     274:	0e 3c       	cpi	r16, 0xCE	; 206
     276:	c3 bd       	out	0x23, r28	; 35
     278:	42 82       	std	Z+2, r4	; 0x02
     27a:	ad 2b       	or	r26, r29
     27c:	3e 68       	ori	r19, 0x8E	; 142
     27e:	ec 82       	std	Y+4, r14	; 0x04
     280:	76 be       	out	0x36, r7	; 54
     282:	d9 8f       	std	Y+25, r29	; 0x19
     284:	e1 a9       	ldd	r30, Z+49	; 0x31
     286:	3e 4c       	sbci	r19, 0xCE	; 206
     288:	80 ef       	ldi	r24, 0xF0	; 240
     28a:	ff be       	out	0x3f, r15	; 63
     28c:	01 c4       	rjmp	.+2050   	; 0xa90 <_ZN6BMP18018bmp180_getpressureEv+0x30>
     28e:	ff 7f       	andi	r31, 0xFF	; 255
     290:	3f 00       	.word	0x003f	; ????
     292:	00 00       	nop
	...

00000296 <__trampolines_end>:
     296:	00 e0       	ldi	r16, 0x00	; 0
     298:	f8 fc       	.word	0xfcf8	; ????
     29a:	fe 1e       	adc	r15, r30
     29c:	07 07       	cpc	r16, r23
     29e:	07 07       	cpc	r16, r23
     2a0:	1e fe       	.word	0xfe1e	; ????
     2a2:	fc f8       	.word	0xf8fc	; ????
     2a4:	f0 00       	.word	0x00f0	; ????
     2a6:	00 07       	cpc	r16, r16
     2a8:	0f 3f       	cpi	r16, 0xFF	; 255
     2aa:	3f 7c       	andi	r19, 0xCF	; 207
     2ac:	70 70       	andi	r23, 0x00	; 0
     2ae:	70 70       	andi	r23, 0x00	; 0
     2b0:	7c 3f       	cpi	r23, 0xFC	; 252
     2b2:	1f 1f       	adc	r17, r31
     2b4:	07 00       	.word	0x0007	; ????
     2b6:	00 00       	nop
     2b8:	00 06       	cpc	r0, r16
     2ba:	07 07       	cpc	r16, r23
     2bc:	ff ff       	.word	0xffff	; ????
     2be:	ff ff       	.word	0xffff	; ????
	...
     2cc:	7f 7f       	andi	r23, 0xFF	; 255
     2ce:	7f 7f       	andi	r23, 0xFF	; 255
     2d0:	00 00       	nop
     2d2:	00 00       	nop
     2d4:	00 00       	nop
     2d6:	00 38       	cpi	r16, 0x80	; 128
     2d8:	3c 3e       	cpi	r19, 0xEC	; 236
     2da:	3e 0f       	add	r19, r30
     2dc:	07 07       	cpc	r16, r23
     2de:	07 cf       	rjmp	.-498    	; 0xee <__SREG__+0xaf>
     2e0:	ff fe       	.word	0xfeff	; ????
     2e2:	fe 38       	cpi	r31, 0x8E	; 142
     2e4:	00 00       	nop
     2e6:	00 40       	sbci	r16, 0x00	; 0
     2e8:	40 60       	ori	r20, 0x00	; 0
     2ea:	70 78       	andi	r23, 0x80	; 128
     2ec:	7c 7e       	andi	r23, 0xEC	; 236
     2ee:	7f 77       	andi	r23, 0x7F	; 127
     2f0:	73 71       	andi	r23, 0x13	; 19
     2f2:	70 70       	andi	r23, 0x00	; 0
     2f4:	00 00       	nop
     2f6:	00 18       	sub	r0, r0
     2f8:	1c 1e       	adc	r1, r28
     2fa:	1e 0f       	add	r17, r30
     2fc:	c7 c7       	rjmp	.+3982   	; 0x128c <disk_ioctl+0x38>
     2fe:	e7 ff       	sbrs	r30, 7
     300:	fe be       	out	0x3e, r15	; 62
     302:	9c 00       	.word	0x009c	; ????
     304:	00 00       	nop
     306:	00 0c       	add	r0, r0
     308:	1c 3c       	cpi	r17, 0xCC	; 204
     30a:	3c 78       	andi	r19, 0x8C	; 140
     30c:	70 70       	andi	r23, 0x00	; 0
     30e:	70 79       	andi	r23, 0x90	; 144
     310:	7f 3f       	cpi	r23, 0xFF	; 255
     312:	1f 0f       	add	r17, r31
     314:	00 00       	nop
     316:	00 00       	nop
     318:	80 c0       	rjmp	.+256    	; 0x41a <_ZL7font5x8+0x44>
     31a:	e0 70       	andi	r30, 0x00	; 0
     31c:	38 1c       	adc	r3, r8
     31e:	1e ff       	.word	0xff1e	; ????
     320:	ff ff       	.word	0xffff	; ????
     322:	ff 00       	.word	0x00ff	; ????
     324:	00 00       	nop
     326:	06 07       	cpc	r16, r22
     328:	07 07       	cpc	r16, r23
     32a:	06 06       	cpc	r0, r22
     32c:	06 06       	cpc	r0, r22
     32e:	06 7f       	andi	r16, 0xF6	; 246
     330:	7f 7f       	andi	r23, 0xFF	; 255
     332:	7f 06       	cpc	r7, r31
     334:	06 00       	.word	0x0006	; ????
     336:	00 00       	nop
     338:	00 00       	nop
     33a:	f0 ff       	sbrs	r31, 0
     33c:	ff ff       	.word	0xffff	; ????
     33e:	e7 e7       	ldi	r30, 0x77	; 119
     340:	e7 e7       	ldi	r30, 0x77	; 119
     342:	c7 87       	std	Z+15, r28	; 0x0f
     344:	00 00       	nop
     346:	00 00       	nop
     348:	38 78       	andi	r19, 0x88	; 136
     34a:	71 70       	andi	r23, 0x01	; 1
     34c:	70 70       	andi	r23, 0x00	; 0
     34e:	70 70       	andi	r23, 0x00	; 0
     350:	39 3f       	cpi	r19, 0xF9	; 249
     352:	3f 1f       	adc	r19, r31
     354:	0f 00       	.word	0x000f	; ????
     356:	00 80       	ld	r0, Z
     358:	e0 f0       	brcs	.+56     	; 0x392 <__trampolines_end+0xfc>
     35a:	f8 fc       	.word	0xfcf8	; ????
     35c:	7f 7f       	andi	r23, 0xFF	; 255
     35e:	6f 67       	ori	r22, 0x7F	; 127
     360:	e1 e1       	ldi	r30, 0x11	; 17
     362:	c0 80       	ld	r12, Z
     364:	00 00       	nop
     366:	00 0f       	add	r16, r16
     368:	1f 3f       	cpi	r17, 0xFF	; 255
     36a:	3f 78       	andi	r19, 0x8F	; 143
     36c:	70 70       	andi	r23, 0x00	; 0
     36e:	70 70       	andi	r23, 0x00	; 0
     370:	78 3f       	cpi	r23, 0xF8	; 248
     372:	3f 1f       	adc	r19, r31
     374:	0f 00       	.word	0x000f	; ????
     376:	00 07       	cpc	r16, r16
     378:	07 07       	cpc	r16, r23
     37a:	07 07       	cpc	r16, r23
     37c:	c7 e7       	ldi	r28, 0x77	; 119
     37e:	f7 ff       	sbrs	r31, 7
     380:	7f 3f       	cpi	r23, 0xFF	; 255
     382:	1f 07       	cpc	r17, r31
     384:	03 01       	movw	r0, r6
     386:	00 20       	and	r0, r0
     388:	38 7c       	andi	r19, 0xC8	; 200
     38a:	7e 3f       	cpi	r23, 0xFE	; 254
     38c:	0f 07       	cpc	r16, r31
     38e:	03 00       	.word	0x0003	; ????
	...
     398:	00 1c       	adc	r0, r0
     39a:	be fe       	.word	0xfebe	; ????
     39c:	ff e7       	ldi	r31, 0x7F	; 127
     39e:	c3 c3       	rjmp	.+1926   	; 0xb26 <_ZN6BMP18018bmp180_getpressureEv+0xc6>
     3a0:	e7 ff       	sbrs	r30, 7
     3a2:	fe be       	out	0x3e, r15	; 62
     3a4:	1c 00       	.word	0x001c	; ????
     3a6:	00 00       	nop
     3a8:	0e 3f       	cpi	r16, 0xFE	; 254
     3aa:	3f 7f       	andi	r19, 0xFF	; 255
     3ac:	71 60       	ori	r23, 0x01	; 1
     3ae:	60 60       	ori	r22, 0x00	; 0
     3b0:	71 7f       	andi	r23, 0xF1	; 241
     3b2:	3f 3f       	cpi	r19, 0xFF	; 255
     3b4:	0f 00       	.word	0x000f	; ????
     3b6:	00 78       	andi	r16, 0x80	; 128
     3b8:	fc fe       	.word	0xfefc	; ????
     3ba:	fe 8f       	std	Y+30, r31	; 0x1e
     3bc:	07 07       	cpc	r16, r23
     3be:	07 07       	cpc	r16, r23
     3c0:	8f fe       	.word	0xfe8f	; ????
     3c2:	fe fc       	.word	0xfcfe	; ????
     3c4:	f8 00       	.word	0x00f8	; ????
     3c6:	00 00       	nop
     3c8:	00 01       	movw	r0, r0
     3ca:	43 43       	sbci	r20, 0x33	; 51
     3cc:	73 7b       	andi	r23, 0xB3	; 179
     3ce:	7f 7f       	andi	r23, 0xFF	; 255
     3d0:	1f 0f       	add	r17, r31
     3d2:	07 03       	mulsu	r16, r23
	...

000003d6 <_ZL7font5x8>:
     3d6:	00 00 5f 00 00 00 07 00 07 00 14 7f 14 7f 14 24     .._............$
     3e6:	2a 7f 2a 12 23 13 08 64 62 36 49 55 22 50 00 05     *.*.#..db6IU"P..
     3f6:	03 00 00 00 1c 22 41 00 00 41 22 1c 00 14 08 3e     ....."A..A"....>
     406:	08 14 08 08 3e 08 08 00 50 30 00 00 08 08 08 08     ....>...P0......
     416:	08 00 60 60 00 00 20 10 08 04 02 3e 51 49 45 3e     ..``.. ....>QIE>
     426:	00 42 7f 40 00 42 61 51 49 46 21 41 45 4b 31 18     .B.@.BaQIF!AEK1.
     436:	14 12 7f 10 27 45 45 45 39 3c 4a 49 49 30 01 71     ....'EEE9<JII0.q
     446:	09 05 03 36 49 49 49 36 06 49 49 29 1e 00 36 36     ...6III6.II)..66
     456:	00 00 00 56 36 00 00 08 14 22 41 00 14 14 14 14     ...V6...."A.....
     466:	14 00 41 22 14 08 02 01 51 09 06 32 49 79 41 3e     ..A"....Q..2IyA>
     476:	7e 11 11 11 7e 7f 49 49 49 36 3e 41 41 41 22 7f     ~...~.III6>AAA".
     486:	41 41 22 1c 7f 49 49 49 41 7f 09 09 09 01 3e 41     AA"..IIIA.....>A
     496:	49 49 7a 7f 08 08 08 7f 00 41 7f 41 00 20 40 41     IIz......A.A. @A
     4a6:	3f 01 7f 08 14 22 41 7f 40 40 40 40 7f 02 0c 02     ?...."A.@@@@....
     4b6:	7f 7f 04 08 10 7f 3e 41 41 41 3e 7f 09 09 09 06     ......>AAA>.....
     4c6:	3e 41 51 21 5e 7f 09 19 29 46 46 49 49 49 31 01     >AQ!^...)FFIII1.
     4d6:	01 7f 01 01 3f 40 40 40 3f 1f 20 40 20 1f 3f 40     ....?@@@?. @ .?@
     4e6:	38 40 3f 63 14 08 14 63 07 08 70 08 07 61 51 49     8@?c...c..p..aQI
     4f6:	45 43 00 7f 41 41 00 02 04 08 10 20 00 41 41 7f     EC..AA..... .AA.
     506:	00 04 02 01 02 04 40 40 40 40 40 00 01 02 04 00     ......@@@@@.....
     516:	20 54 54 54 78 7f 48 44 44 38 38 44 44 44 20 38      TTTx.HDD88DDD 8
     526:	44 44 48 7f 38 54 54 54 18 08 7e 09 01 02 0c 52     DDH.8TTT..~....R
     536:	52 52 3e 7f 08 04 04 78 00 44 7d 40 00 20 40 44     RR>....x.D}@. @D
     546:	3d 00 7f 10 28 44 00 00 41 7f 40 00 7c 04 18 04     =...(D..A.@.|...
     556:	78 7c 08 04 04 78 38 44 44 44 38 7c 14 14 14 08     x|...x8DDD8|....
     566:	08 14 14 18 7c 7c 08 04 04 08 48 54 54 54 20 04     ....||....HTTT .
     576:	3f 44 40 20 3c 40 40 20 7c 1c 20 40 20 1c 3c 40     ?D@ <@@ |. @ .<@
     586:	30 40 3c 44 28 10 28 44 0c 50 50 50 3c 44 64 54     0@<D(.(D.PPP<DdT
     596:	4c 44 00 08 36 41 00 00 00 7f 00 00 00 41 36 08     LD..6A.......A6.
     5a6:	00 10 08 08 10 08                                   ......

000005ac <__c.2179>:
     5ac:	6e 61 6e 00                                         nan.

000005b0 <__c.2177>:
     5b0:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     5c0:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     5d0:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     5e0:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     5f0:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     600:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     610:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     620:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     630:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     640:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     650:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     660:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     670:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     680:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     690:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     6a0:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

000006ae <__ctors_start>:
     6ae:	c8 3b       	cpi	r28, 0xB8	; 184

000006b0 <__ctors_end>:
     6b0:	eb 3b       	cpi	r30, 0xBB	; 187

000006b2 <__dtors_end>:
     6b2:	11 24       	eor	r1, r1
     6b4:	1f be       	out	0x3f, r1	; 63
     6b6:	cf ef       	ldi	r28, 0xFF	; 255
     6b8:	d0 e4       	ldi	r29, 0x40	; 64
     6ba:	de bf       	out	0x3e, r29	; 62
     6bc:	cd bf       	out	0x3d, r28	; 61

000006be <__do_copy_data>:
     6be:	14 e0       	ldi	r17, 0x04	; 4
     6c0:	a0 e0       	ldi	r26, 0x00	; 0
     6c2:	b1 e0       	ldi	r27, 0x01	; 1
     6c4:	e0 e0       	ldi	r30, 0x00	; 0
     6c6:	f2 e9       	ldi	r31, 0x92	; 146
     6c8:	00 e0       	ldi	r16, 0x00	; 0
     6ca:	0b bf       	out	0x3b, r16	; 59
     6cc:	02 c0       	rjmp	.+4      	; 0x6d2 <__do_copy_data+0x14>
     6ce:	07 90       	elpm	r0, Z+
     6d0:	0d 92       	st	X+, r0
     6d2:	a2 32       	cpi	r26, 0x22	; 34
     6d4:	b1 07       	cpc	r27, r17
     6d6:	d9 f7       	brne	.-10     	; 0x6ce <__do_copy_data+0x10>

000006d8 <__do_clear_bss>:
     6d8:	2e e0       	ldi	r18, 0x0E	; 14
     6da:	a2 e2       	ldi	r26, 0x22	; 34
     6dc:	b4 e0       	ldi	r27, 0x04	; 4
     6de:	01 c0       	rjmp	.+2      	; 0x6e2 <.do_clear_bss_start>

000006e0 <.do_clear_bss_loop>:
     6e0:	1d 92       	st	X+, r1

000006e2 <.do_clear_bss_start>:
     6e2:	a5 33       	cpi	r26, 0x35	; 53
     6e4:	b2 07       	cpc	r27, r18
     6e6:	e1 f7       	brne	.-8      	; 0x6e0 <.do_clear_bss_loop>

000006e8 <__do_global_ctors>:
     6e8:	13 e0       	ldi	r17, 0x03	; 3
     6ea:	c8 e5       	ldi	r28, 0x58	; 88
     6ec:	d3 e0       	ldi	r29, 0x03	; 3
     6ee:	04 c0       	rjmp	.+8      	; 0x6f8 <__do_global_ctors+0x10>
     6f0:	21 97       	sbiw	r28, 0x01	; 1
     6f2:	fe 01       	movw	r30, r28
     6f4:	0e 94 ec 45 	call	0x8bd8	; 0x8bd8 <__tablejump2__>
     6f8:	c7 35       	cpi	r28, 0x57	; 87
     6fa:	d1 07       	cpc	r29, r17
     6fc:	c9 f7       	brne	.-14     	; 0x6f0 <__do_global_ctors+0x8>
     6fe:	0e 94 dc 34 	call	0x69b8	; 0x69b8 <main>
     702:	0c 94 f4 48 	jmp	0x91e8	; 0x91e8 <__do_global_dtors>

00000706 <__bad_interrupt>:
     706:	7c cc       	rjmp	.-1800   	; 0x0 <__vectors>

00000708 <_ZN6BMP180D1Ev>:
		{
			buff[i]=i2c.twi_read(0);
		}
	}
	i2c.twi_stop();
}
     708:	8a 96       	adiw	r24, 0x2a	; 42
     70a:	0c 94 f7 22 	jmp	0x45ee	; 0x45ee <_ZN3I2CD1Ev>
     70e:	08 95       	ret

00000710 <_ZN6BMP18015bmp180_writememEhh>:
     710:	0f 93       	push	r16
     712:	1f 93       	push	r17
     714:	cf 93       	push	r28
     716:	df 93       	push	r29
     718:	06 2f       	mov	r16, r22
     71a:	14 2f       	mov	r17, r20
     71c:	ec 01       	movw	r28, r24
     71e:	aa 96       	adiw	r28, 0x2a	; 42
     720:	ce 01       	movw	r24, r28
     722:	0e 94 f8 22 	call	0x45f0	; 0x45f0 <_ZN3I2C9twi_startEv>
     726:	6e ee       	ldi	r22, 0xEE	; 238
     728:	ce 01       	movw	r24, r28
     72a:	0e 94 00 23 	call	0x4600	; 0x4600 <_ZN3I2C9twi_writeEh>
     72e:	60 2f       	mov	r22, r16
     730:	ce 01       	movw	r24, r28
     732:	0e 94 00 23 	call	0x4600	; 0x4600 <_ZN3I2C9twi_writeEh>
     736:	61 2f       	mov	r22, r17
     738:	ce 01       	movw	r24, r28
     73a:	0e 94 00 23 	call	0x4600	; 0x4600 <_ZN3I2C9twi_writeEh>
     73e:	ce 01       	movw	r24, r28
     740:	0e 94 fc 22 	call	0x45f8	; 0x45f8 <_ZN3I2C8twi_stopEv>
     744:	df 91       	pop	r29
     746:	cf 91       	pop	r28
     748:	1f 91       	pop	r17
     74a:	0f 91       	pop	r16
     74c:	08 95       	ret

0000074e <_ZN6BMP18021bmp180_getcalibrationEv>:

void BMP180::bmp180_getcalibration() {
     74e:	0f 93       	push	r16
     750:	1f 93       	push	r17
     752:	cf 93       	push	r28
     754:	df 93       	push	r29
     756:	ec 01       	movw	r28, r24
	i2c.twi_start();
     758:	8c 01       	movw	r16, r24
     75a:	06 5d       	subi	r16, 0xD6	; 214
     75c:	1f 4f       	sbci	r17, 0xFF	; 255
     75e:	c8 01       	movw	r24, r16
     760:	0e 94 f8 22 	call	0x45f0	; 0x45f0 <_ZN3I2C9twi_startEv>
	i2c.twi_write((BMP180_ADDR | I2C_WRITE));
     764:	6e ee       	ldi	r22, 0xEE	; 238
     766:	c8 01       	movw	r24, r16
     768:	0e 94 00 23 	call	0x4600	; 0x4600 <_ZN3I2C9twi_writeEh>
	i2c.twi_write(BMP180_REGAC1);
     76c:	6a ea       	ldi	r22, 0xAA	; 170
     76e:	c8 01       	movw	r24, r16
     770:	0e 94 00 23 	call	0x4600	; 0x4600 <_ZN3I2C9twi_writeEh>
	i2c.twi_start();
     774:	c8 01       	movw	r24, r16
     776:	0e 94 f8 22 	call	0x45f0	; 0x45f0 <_ZN3I2C9twi_startEv>
	i2c.twi_write((BMP180_ADDR | I2C_READ));
     77a:	6f ee       	ldi	r22, 0xEF	; 239
     77c:	c8 01       	movw	r24, r16
     77e:	0e 94 00 23 	call	0x4600	; 0x4600 <_ZN3I2C9twi_writeEh>
	bmp180_regac1 = (i2c.twi_read(1) << 8);
     782:	61 e0       	ldi	r22, 0x01	; 1
     784:	c8 01       	movw	r24, r16
     786:	0e 94 10 23 	call	0x4620	; 0x4620 <_ZN3I2C8twi_readEh>
     78a:	1c 86       	std	Y+12, r1	; 0x0c
     78c:	8d 87       	std	Y+13, r24	; 0x0d
	bmp180_regac1 += (i2c.twi_read(1));
     78e:	61 e0       	ldi	r22, 0x01	; 1
     790:	c8 01       	movw	r24, r16
     792:	0e 94 10 23 	call	0x4620	; 0x4620 <_ZN3I2C8twi_readEh>
     796:	2c 85       	ldd	r18, Y+12	; 0x0c
     798:	3d 85       	ldd	r19, Y+13	; 0x0d
     79a:	28 0f       	add	r18, r24
     79c:	31 1d       	adc	r19, r1
     79e:	3d 87       	std	Y+13, r19	; 0x0d
     7a0:	2c 87       	std	Y+12, r18	; 0x0c
	
	bmp180_regac2 = (i2c.twi_read(1) << 8);
     7a2:	61 e0       	ldi	r22, 0x01	; 1
     7a4:	c8 01       	movw	r24, r16
     7a6:	0e 94 10 23 	call	0x4620	; 0x4620 <_ZN3I2C8twi_readEh>
     7aa:	1e 86       	std	Y+14, r1	; 0x0e
     7ac:	8f 87       	std	Y+15, r24	; 0x0f
	bmp180_regac2 += (i2c.twi_read(1));
     7ae:	61 e0       	ldi	r22, 0x01	; 1
     7b0:	c8 01       	movw	r24, r16
     7b2:	0e 94 10 23 	call	0x4620	; 0x4620 <_ZN3I2C8twi_readEh>
     7b6:	2e 85       	ldd	r18, Y+14	; 0x0e
     7b8:	3f 85       	ldd	r19, Y+15	; 0x0f
     7ba:	28 0f       	add	r18, r24
     7bc:	31 1d       	adc	r19, r1
     7be:	3f 87       	std	Y+15, r19	; 0x0f
     7c0:	2e 87       	std	Y+14, r18	; 0x0e
	
	bmp180_regac3 = (i2c.twi_read(1) << 8);
     7c2:	61 e0       	ldi	r22, 0x01	; 1
     7c4:	c8 01       	movw	r24, r16
     7c6:	0e 94 10 23 	call	0x4620	; 0x4620 <_ZN3I2C8twi_readEh>
     7ca:	18 8a       	std	Y+16, r1	; 0x10
     7cc:	89 8b       	std	Y+17, r24	; 0x11
	bmp180_regac3 += (i2c.twi_read(1));
     7ce:	61 e0       	ldi	r22, 0x01	; 1
     7d0:	c8 01       	movw	r24, r16
     7d2:	0e 94 10 23 	call	0x4620	; 0x4620 <_ZN3I2C8twi_readEh>
     7d6:	28 89       	ldd	r18, Y+16	; 0x10
     7d8:	39 89       	ldd	r19, Y+17	; 0x11
     7da:	28 0f       	add	r18, r24
     7dc:	31 1d       	adc	r19, r1
     7de:	39 8b       	std	Y+17, r19	; 0x11
     7e0:	28 8b       	std	Y+16, r18	; 0x10
	
	bmp180_regac4 = (i2c.twi_read(1) << 8);
     7e2:	61 e0       	ldi	r22, 0x01	; 1
     7e4:	c8 01       	movw	r24, r16
     7e6:	0e 94 10 23 	call	0x4620	; 0x4620 <_ZN3I2C8twi_readEh>
     7ea:	1c 8e       	std	Y+28, r1	; 0x1c
     7ec:	8d 8f       	std	Y+29, r24	; 0x1d
	bmp180_regac4 += (i2c.twi_read(1));
     7ee:	61 e0       	ldi	r22, 0x01	; 1
     7f0:	c8 01       	movw	r24, r16
     7f2:	0e 94 10 23 	call	0x4620	; 0x4620 <_ZN3I2C8twi_readEh>
     7f6:	2c 8d       	ldd	r18, Y+28	; 0x1c
     7f8:	3d 8d       	ldd	r19, Y+29	; 0x1d
     7fa:	28 0f       	add	r18, r24
     7fc:	31 1d       	adc	r19, r1
     7fe:	3d 8f       	std	Y+29, r19	; 0x1d
     800:	2c 8f       	std	Y+28, r18	; 0x1c
	
	bmp180_regac5 = (i2c.twi_read(1) << 8);
     802:	61 e0       	ldi	r22, 0x01	; 1
     804:	c8 01       	movw	r24, r16
     806:	0e 94 10 23 	call	0x4620	; 0x4620 <_ZN3I2C8twi_readEh>
     80a:	1e 8e       	std	Y+30, r1	; 0x1e
     80c:	8f 8f       	std	Y+31, r24	; 0x1f
	bmp180_regac5 += (i2c.twi_read(1));
     80e:	61 e0       	ldi	r22, 0x01	; 1
     810:	c8 01       	movw	r24, r16
     812:	0e 94 10 23 	call	0x4620	; 0x4620 <_ZN3I2C8twi_readEh>
     816:	2e 8d       	ldd	r18, Y+30	; 0x1e
     818:	3f 8d       	ldd	r19, Y+31	; 0x1f
     81a:	28 0f       	add	r18, r24
     81c:	31 1d       	adc	r19, r1
     81e:	3f 8f       	std	Y+31, r19	; 0x1f
     820:	2e 8f       	std	Y+30, r18	; 0x1e
	
	bmp180_regac6 = (i2c.twi_read(1) << 8);
     822:	61 e0       	ldi	r22, 0x01	; 1
     824:	c8 01       	movw	r24, r16
     826:	0e 94 10 23 	call	0x4620	; 0x4620 <_ZN3I2C8twi_readEh>
     82a:	18 a2       	std	Y+32, r1	; 0x20
     82c:	89 a3       	std	Y+33, r24	; 0x21
	bmp180_regac6 += (i2c.twi_read(1));
     82e:	61 e0       	ldi	r22, 0x01	; 1
     830:	c8 01       	movw	r24, r16
     832:	0e 94 10 23 	call	0x4620	; 0x4620 <_ZN3I2C8twi_readEh>
     836:	28 a1       	ldd	r18, Y+32	; 0x20
     838:	39 a1       	ldd	r19, Y+33	; 0x21
     83a:	28 0f       	add	r18, r24
     83c:	31 1d       	adc	r19, r1
     83e:	39 a3       	std	Y+33, r19	; 0x21
     840:	28 a3       	std	Y+32, r18	; 0x20
	
	bmp180_regb1 = (i2c.twi_read(1) << 8);
     842:	61 e0       	ldi	r22, 0x01	; 1
     844:	c8 01       	movw	r24, r16
     846:	0e 94 10 23 	call	0x4620	; 0x4620 <_ZN3I2C8twi_readEh>
     84a:	1a 8a       	std	Y+18, r1	; 0x12
     84c:	8b 8b       	std	Y+19, r24	; 0x13
	bmp180_regb1 += (i2c.twi_read(1));
     84e:	61 e0       	ldi	r22, 0x01	; 1
     850:	c8 01       	movw	r24, r16
     852:	0e 94 10 23 	call	0x4620	; 0x4620 <_ZN3I2C8twi_readEh>
     856:	2a 89       	ldd	r18, Y+18	; 0x12
     858:	3b 89       	ldd	r19, Y+19	; 0x13
     85a:	28 0f       	add	r18, r24
     85c:	31 1d       	adc	r19, r1
     85e:	3b 8b       	std	Y+19, r19	; 0x13
     860:	2a 8b       	std	Y+18, r18	; 0x12
	
	bmp180_regb2 = (i2c.twi_read(1) << 8);
     862:	61 e0       	ldi	r22, 0x01	; 1
     864:	c8 01       	movw	r24, r16
     866:	0e 94 10 23 	call	0x4620	; 0x4620 <_ZN3I2C8twi_readEh>
     86a:	1c 8a       	std	Y+20, r1	; 0x14
     86c:	8d 8b       	std	Y+21, r24	; 0x15
	bmp180_regb2 += (i2c.twi_read(1));
     86e:	61 e0       	ldi	r22, 0x01	; 1
     870:	c8 01       	movw	r24, r16
     872:	0e 94 10 23 	call	0x4620	; 0x4620 <_ZN3I2C8twi_readEh>
     876:	2c 89       	ldd	r18, Y+20	; 0x14
     878:	3d 89       	ldd	r19, Y+21	; 0x15
     87a:	28 0f       	add	r18, r24
     87c:	31 1d       	adc	r19, r1
     87e:	3d 8b       	std	Y+21, r19	; 0x15
     880:	2c 8b       	std	Y+20, r18	; 0x14
	
	bmp180_regmb = (i2c.twi_read(1) << 8);
     882:	61 e0       	ldi	r22, 0x01	; 1
     884:	c8 01       	movw	r24, r16
     886:	0e 94 10 23 	call	0x4620	; 0x4620 <_ZN3I2C8twi_readEh>
     88a:	1e 8a       	std	Y+22, r1	; 0x16
     88c:	8f 8b       	std	Y+23, r24	; 0x17
	bmp180_regmb += (i2c.twi_read(1));
     88e:	61 e0       	ldi	r22, 0x01	; 1
     890:	c8 01       	movw	r24, r16
     892:	0e 94 10 23 	call	0x4620	; 0x4620 <_ZN3I2C8twi_readEh>
     896:	2e 89       	ldd	r18, Y+22	; 0x16
     898:	3f 89       	ldd	r19, Y+23	; 0x17
     89a:	28 0f       	add	r18, r24
     89c:	31 1d       	adc	r19, r1
     89e:	3f 8b       	std	Y+23, r19	; 0x17
     8a0:	2e 8b       	std	Y+22, r18	; 0x16
	
	bmp180_regmc = (i2c.twi_read(1) << 8);
     8a2:	61 e0       	ldi	r22, 0x01	; 1
     8a4:	c8 01       	movw	r24, r16
     8a6:	0e 94 10 23 	call	0x4620	; 0x4620 <_ZN3I2C8twi_readEh>
     8aa:	18 8e       	std	Y+24, r1	; 0x18
     8ac:	89 8f       	std	Y+25, r24	; 0x19
	bmp180_regmc += (i2c.twi_read(1));
     8ae:	61 e0       	ldi	r22, 0x01	; 1
     8b0:	c8 01       	movw	r24, r16
     8b2:	0e 94 10 23 	call	0x4620	; 0x4620 <_ZN3I2C8twi_readEh>
     8b6:	28 8d       	ldd	r18, Y+24	; 0x18
     8b8:	39 8d       	ldd	r19, Y+25	; 0x19
     8ba:	28 0f       	add	r18, r24
     8bc:	31 1d       	adc	r19, r1
     8be:	39 8f       	std	Y+25, r19	; 0x19
     8c0:	28 8f       	std	Y+24, r18	; 0x18
	
	bmp180_regmd = (i2c.twi_read(1) << 8);
     8c2:	61 e0       	ldi	r22, 0x01	; 1
     8c4:	c8 01       	movw	r24, r16
     8c6:	0e 94 10 23 	call	0x4620	; 0x4620 <_ZN3I2C8twi_readEh>
     8ca:	1a 8e       	std	Y+26, r1	; 0x1a
     8cc:	8b 8f       	std	Y+27, r24	; 0x1b
	bmp180_regmd += (i2c.twi_read(0));
     8ce:	60 e0       	ldi	r22, 0x00	; 0
     8d0:	c8 01       	movw	r24, r16
     8d2:	0e 94 10 23 	call	0x4620	; 0x4620 <_ZN3I2C8twi_readEh>
     8d6:	2a 8d       	ldd	r18, Y+26	; 0x1a
     8d8:	3b 8d       	ldd	r19, Y+27	; 0x1b
     8da:	28 0f       	add	r18, r24
     8dc:	31 1d       	adc	r19, r1
     8de:	3b 8f       	std	Y+27, r19	; 0x1b
     8e0:	2a 8f       	std	Y+26, r18	; 0x1a
	
	i2c.twi_stop();
     8e2:	c8 01       	movw	r24, r16
     8e4:	0e 94 fc 22 	call	0x45f8	; 0x45f8 <_ZN3I2C8twi_stopEv>
}
     8e8:	df 91       	pop	r29
     8ea:	cf 91       	pop	r28
     8ec:	1f 91       	pop	r17
     8ee:	0f 91       	pop	r16
     8f0:	08 95       	ret

000008f2 <_ZN6BMP180C1Ev>:


#include "BMP180.h"

// default constructor
BMP180::BMP180()
     8f2:	cf 93       	push	r28
     8f4:	df 93       	push	r29
     8f6:	ec 01       	movw	r28, r24
     8f8:	8a 96       	adiw	r24, 0x2a	; 42
     8fa:	0e 94 f3 22 	call	0x45e6	; 0x45e6 <_ZN3I2CC1Ev>
{
	bmp180_rawtemperature = 0;
     8fe:	1a a2       	std	Y+34, r1	; 0x22
     900:	1b a2       	std	Y+35, r1	; 0x23
     902:	1c a2       	std	Y+36, r1	; 0x24
     904:	1d a2       	std	Y+37, r1	; 0x25
	bmp180_rawpressure = 0;
     906:	1e a2       	std	Y+38, r1	; 0x26
     908:	1f a2       	std	Y+39, r1	; 0x27
     90a:	18 a6       	std	Y+40, r1	; 0x28
     90c:	19 a6       	std	Y+41, r1	; 0x29
	
	bmp180_getcalibration();
     90e:	ce 01       	movw	r24, r28
     910:	1e df       	rcall	.-452    	; 0x74e <_ZN6BMP18021bmp180_getcalibrationEv>
	
} //BMP180
     912:	df 91       	pop	r29
     914:	cf 91       	pop	r28
     916:	08 95       	ret

00000918 <_ZN6BMP18021bmp180_gettemperatureEv>:
void BMP180::bmp180_getaltitude(){
	bmp180_getpressure();
	
}

void BMP180::bmp180_gettemperature(){
     918:	8f 92       	push	r8
     91a:	9f 92       	push	r9
     91c:	af 92       	push	r10
     91e:	bf 92       	push	r11
     920:	cf 92       	push	r12
     922:	df 92       	push	r13
     924:	ef 92       	push	r14
     926:	ff 92       	push	r15
     928:	0f 93       	push	r16
     92a:	1f 93       	push	r17
     92c:	cf 93       	push	r28
     92e:	df 93       	push	r29
     930:	8c 01       	movw	r16, r24
	//uint8_t buff[2] = {0,0};
	int32_t ut,x1,x2;

	//read raw temperature
	bmp180_writemem(BMP180_REGCONTROL, BMP180_REGREADTEMPERATURE);
     932:	4e e2       	ldi	r20, 0x2E	; 46
     934:	64 ef       	ldi	r22, 0xF4	; 244
     936:	ec de       	rcall	.-552    	; 0x710 <_ZN6BMP18015bmp180_writememEhh>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     938:	8f e0       	ldi	r24, 0x0F	; 15
     93a:	97 e2       	ldi	r25, 0x27	; 39
     93c:	01 97       	sbiw	r24, 0x01	; 1
     93e:	f1 f7       	brne	.-4      	; 0x93c <_ZN6BMP18021bmp180_gettemperatureEv+0x24>
     940:	00 c0       	rjmp	.+0      	; 0x942 <_ZN6BMP18021bmp180_gettemperatureEv+0x2a>
     942:	00 00       	nop
	_delay_ms(5); // min. 4.5ms read Temp delay
	//bmp180_readmem(BMP180_REGCONTROLOUTPUT, buff, 2);
	i2c.twi_start();
     944:	e8 01       	movw	r28, r16
     946:	aa 96       	adiw	r28, 0x2a	; 42
     948:	ce 01       	movw	r24, r28
     94a:	0e 94 f8 22 	call	0x45f0	; 0x45f0 <_ZN3I2C9twi_startEv>
	i2c.twi_write((BMP180_ADDR | I2C_WRITE));
     94e:	6e ee       	ldi	r22, 0xEE	; 238
     950:	ce 01       	movw	r24, r28
     952:	0e 94 00 23 	call	0x4600	; 0x4600 <_ZN3I2C9twi_writeEh>
	i2c.twi_write(BMP180_REGCONTROLOUTPUT);
     956:	66 ef       	ldi	r22, 0xF6	; 246
     958:	ce 01       	movw	r24, r28
     95a:	0e 94 00 23 	call	0x4600	; 0x4600 <_ZN3I2C9twi_writeEh>
	i2c.twi_start();
     95e:	ce 01       	movw	r24, r28
     960:	0e 94 f8 22 	call	0x45f0	; 0x45f0 <_ZN3I2C9twi_startEv>
	i2c.twi_write((BMP180_ADDR | I2C_READ));
     964:	6f ee       	ldi	r22, 0xEF	; 239
     966:	ce 01       	movw	r24, r28
     968:	0e 94 00 23 	call	0x4600	; 0x4600 <_ZN3I2C9twi_writeEh>
	ut = (i2c.twi_read(1)<<8);
     96c:	61 e0       	ldi	r22, 0x01	; 1
     96e:	ce 01       	movw	r24, r28
     970:	0e 94 10 23 	call	0x4620	; 0x4620 <_ZN3I2C8twi_readEh>
     974:	c8 2e       	mov	r12, r24
     976:	d1 2c       	mov	r13, r1
     978:	dc 2c       	mov	r13, r12
     97a:	cc 24       	eor	r12, r12
     97c:	0d 2c       	mov	r0, r13
     97e:	00 0c       	add	r0, r0
     980:	ee 08       	sbc	r14, r14
     982:	ff 08       	sbc	r15, r15
	ut += i2c.twi_read(0);
     984:	60 e0       	ldi	r22, 0x00	; 0
     986:	ce 01       	movw	r24, r28
     988:	0e 94 10 23 	call	0x4620	; 0x4620 <_ZN3I2C8twi_readEh>
     98c:	c8 0e       	add	r12, r24
     98e:	d1 1c       	adc	r13, r1
     990:	e1 1c       	adc	r14, r1
     992:	f1 1c       	adc	r15, r1
	i2c.twi_stop();
     994:	ce 01       	movw	r24, r28
     996:	0e 94 fc 22 	call	0x45f8	; 0x45f8 <_ZN3I2C8twi_stopEv>

	//calculate raw temperature
	x1	  = ((ut - bmp180_regac6) * bmp180_regac5);
     99a:	f8 01       	movw	r30, r16
     99c:	80 a1       	ldd	r24, Z+32	; 0x20
     99e:	91 a1       	ldd	r25, Z+33	; 0x21
     9a0:	a7 01       	movw	r20, r14
     9a2:	96 01       	movw	r18, r12
     9a4:	28 1b       	sub	r18, r24
     9a6:	39 0b       	sbc	r19, r25
     9a8:	41 09       	sbc	r20, r1
     9aa:	51 09       	sbc	r21, r1
     9ac:	a6 8d       	ldd	r26, Z+30	; 0x1e
     9ae:	b7 8d       	ldd	r27, Z+31	; 0x1f
     9b0:	0e 94 04 46 	call	0x8c08	; 0x8c08 <__muluhisi3>
	x1	>>= 15;
     9b4:	6b 01       	movw	r12, r22
     9b6:	7c 01       	movw	r14, r24
     9b8:	0b 2e       	mov	r0, r27
     9ba:	bf e0       	ldi	r27, 0x0F	; 15
     9bc:	f5 94       	asr	r15
     9be:	e7 94       	ror	r14
     9c0:	d7 94       	ror	r13
     9c2:	c7 94       	ror	r12
     9c4:	ba 95       	dec	r27
     9c6:	d1 f7       	brne	.-12     	; 0x9bc <_ZN6BMP18021bmp180_gettemperatureEv+0xa4>
     9c8:	b0 2d       	mov	r27, r0
	x2	  = (bmp180_regmc << 11);
     9ca:	80 8d       	ldd	r24, Z+24	; 0x18
     9cc:	60 e0       	ldi	r22, 0x00	; 0
     9ce:	70 e0       	ldi	r23, 0x00	; 0
     9d0:	78 2f       	mov	r23, r24
     9d2:	77 0f       	add	r23, r23
     9d4:	77 0f       	add	r23, r23
     9d6:	77 0f       	add	r23, r23
     9d8:	07 2e       	mov	r0, r23
     9da:	00 0c       	add	r0, r0
     9dc:	88 0b       	sbc	r24, r24
     9de:	99 0b       	sbc	r25, r25
	x2	 /= (x1 + bmp180_regmd);
     9e0:	22 8d       	ldd	r18, Z+26	; 0x1a
     9e2:	33 8d       	ldd	r19, Z+27	; 0x1b
     9e4:	49 01       	movw	r8, r18
     9e6:	33 0f       	add	r19, r19
     9e8:	aa 08       	sbc	r10, r10
     9ea:	bb 08       	sbc	r11, r11
     9ec:	a5 01       	movw	r20, r10
     9ee:	94 01       	movw	r18, r8
     9f0:	2c 0d       	add	r18, r12
     9f2:	3d 1d       	adc	r19, r13
     9f4:	4e 1d       	adc	r20, r14
     9f6:	5f 1d       	adc	r21, r15
     9f8:	0e 94 d0 45 	call	0x8ba0	; 0x8ba0 <__divmodsi4>
	bmp180_rawtemperature = x1 + x2;
     9fc:	d7 01       	movw	r26, r14
     9fe:	c6 01       	movw	r24, r12
     a00:	82 0f       	add	r24, r18
     a02:	93 1f       	adc	r25, r19
     a04:	a4 1f       	adc	r26, r20
     a06:	b5 1f       	adc	r27, r21
     a08:	f8 01       	movw	r30, r16
     a0a:	82 a3       	std	Z+34, r24	; 0x22
     a0c:	93 a3       	std	Z+35, r25	; 0x23
     a0e:	a4 a3       	std	Z+36, r26	; 0x24
     a10:	b5 a3       	std	Z+37, r27	; 0x25
	
	temperature	 = ((bmp180_rawtemperature+8)>>4);
     a12:	08 96       	adiw	r24, 0x08	; 8
     a14:	a1 1d       	adc	r26, r1
     a16:	b1 1d       	adc	r27, r1
     a18:	bc 01       	movw	r22, r24
     a1a:	cd 01       	movw	r24, r26
     a1c:	68 94       	set
     a1e:	13 f8       	bld	r1, 3
     a20:	96 95       	lsr	r25
     a22:	87 95       	ror	r24
     a24:	77 95       	ror	r23
     a26:	67 95       	ror	r22
     a28:	16 94       	lsr	r1
     a2a:	d1 f7       	brne	.-12     	; 0xa20 <_ZN6BMP18021bmp180_gettemperatureEv+0x108>
     a2c:	0e 94 49 3f 	call	0x7e92	; 0x7e92 <__floatunsisf>
	temperature	/= 10.0;
     a30:	20 e0       	ldi	r18, 0x00	; 0
     a32:	30 e0       	ldi	r19, 0x00	; 0
     a34:	40 e2       	ldi	r20, 0x20	; 32
     a36:	51 e4       	ldi	r21, 0x41	; 65
     a38:	0e 94 b0 3e 	call	0x7d60	; 0x7d60 <__divsf3>
     a3c:	f8 01       	movw	r30, r16
     a3e:	64 83       	std	Z+4, r22	; 0x04
     a40:	75 83       	std	Z+5, r23	; 0x05
     a42:	86 83       	std	Z+6, r24	; 0x06
     a44:	97 83       	std	Z+7, r25	; 0x07
}
     a46:	df 91       	pop	r29
     a48:	cf 91       	pop	r28
     a4a:	1f 91       	pop	r17
     a4c:	0f 91       	pop	r16
     a4e:	ff 90       	pop	r15
     a50:	ef 90       	pop	r14
     a52:	df 90       	pop	r13
     a54:	cf 90       	pop	r12
     a56:	bf 90       	pop	r11
     a58:	af 90       	pop	r10
     a5a:	9f 90       	pop	r9
     a5c:	8f 90       	pop	r8
     a5e:	08 95       	ret

00000a60 <_ZN6BMP18018bmp180_getpressureEv>:
	bmp180_regmd += (i2c.twi_read(0));
	
	i2c.twi_stop();
}

void BMP180::bmp180_getpressure(){
     a60:	2f 92       	push	r2
     a62:	3f 92       	push	r3
     a64:	4f 92       	push	r4
     a66:	5f 92       	push	r5
     a68:	6f 92       	push	r6
     a6a:	7f 92       	push	r7
     a6c:	8f 92       	push	r8
     a6e:	9f 92       	push	r9
     a70:	af 92       	push	r10
     a72:	bf 92       	push	r11
     a74:	cf 92       	push	r12
     a76:	df 92       	push	r13
     a78:	ef 92       	push	r14
     a7a:	ff 92       	push	r15
     a7c:	0f 93       	push	r16
     a7e:	1f 93       	push	r17
     a80:	cf 93       	push	r28
     a82:	df 93       	push	r29
     a84:	cd b7       	in	r28, 0x3d	; 61
     a86:	de b7       	in	r29, 0x3e	; 62
     a88:	28 97       	sbiw	r28, 0x08	; 8
     a8a:	0f b6       	in	r0, 0x3f	; 63
     a8c:	f8 94       	cli
     a8e:	de bf       	out	0x3e, r29	; 62
     a90:	0f be       	out	0x3f, r0	; 63
     a92:	cd bf       	out	0x3d, r28	; 61
     a94:	1c 01       	movw	r2, r24
	int32_t up,x1,x2,x3,b3,b6,p;
	uint32_t b4,b7;

	bmp180_gettemperature();
     a96:	40 df       	rcall	.-384    	; 0x918 <_ZN6BMP18021bmp180_gettemperatureEv>

	//read raw pressure
	bmp180_writemem(BMP180_REGCONTROL, BMP180_REGREADPRESSURE+(BMP180_MODE << 6));
     a98:	44 ef       	ldi	r20, 0xF4	; 244
     a9a:	64 ef       	ldi	r22, 0xF4	; 244
     a9c:	c1 01       	movw	r24, r2
     a9e:	38 de       	rcall	.-912    	; 0x710 <_ZN6BMP18015bmp180_writememEhh>
     aa0:	8f e1       	ldi	r24, 0x1F	; 31
     aa2:	9b ec       	ldi	r25, 0xCB	; 203
     aa4:	01 97       	sbiw	r24, 0x01	; 1
     aa6:	f1 f7       	brne	.-4      	; 0xaa4 <_ZN6BMP18018bmp180_getpressureEv+0x44>
     aa8:	00 c0       	rjmp	.+0      	; 0xaaa <_ZN6BMP18018bmp180_getpressureEv+0x4a>
     aaa:	00 00       	nop
	_delay_ms(2 + (3<<BMP180_MODE));
	
	//bmp180_readmem(BMP180_REGCONTROLOUTPUT, buff, 3);
	//up = ((((int32_t)buff[0] <<16) | ((int32_t)buff[1] <<8) | ((int32_t)buff[2])) >> (8-BMP180_MODE)); // uncompensated pressure value
	i2c.twi_start();
     aac:	71 01       	movw	r14, r2
     aae:	9a e2       	ldi	r25, 0x2A	; 42
     ab0:	e9 0e       	add	r14, r25
     ab2:	f1 1c       	adc	r15, r1
     ab4:	c7 01       	movw	r24, r14
     ab6:	0e 94 f8 22 	call	0x45f0	; 0x45f0 <_ZN3I2C9twi_startEv>
	i2c.twi_write((BMP180_ADDR | I2C_WRITE));
     aba:	6e ee       	ldi	r22, 0xEE	; 238
     abc:	c7 01       	movw	r24, r14
     abe:	0e 94 00 23 	call	0x4600	; 0x4600 <_ZN3I2C9twi_writeEh>
	i2c.twi_write(BMP180_REGCONTROLOUTPUT);
     ac2:	66 ef       	ldi	r22, 0xF6	; 246
     ac4:	c7 01       	movw	r24, r14
     ac6:	0e 94 00 23 	call	0x4600	; 0x4600 <_ZN3I2C9twi_writeEh>
	i2c.twi_start();
     aca:	c7 01       	movw	r24, r14
     acc:	0e 94 f8 22 	call	0x45f0	; 0x45f0 <_ZN3I2C9twi_startEv>
	i2c.twi_write((BMP180_ADDR | I2C_READ));
     ad0:	6f ee       	ldi	r22, 0xEF	; 239
     ad2:	c7 01       	movw	r24, r14
     ad4:	0e 94 00 23 	call	0x4600	; 0x4600 <_ZN3I2C9twi_writeEh>
	up  = i2c.twi_read(1) << 16;
     ad8:	61 e0       	ldi	r22, 0x01	; 1
     ada:	c7 01       	movw	r24, r14
     adc:	0e 94 10 23 	call	0x4620	; 0x4620 <_ZN3I2C8twi_readEh>
	up += i2c.twi_read(1) << 8;
     ae0:	61 e0       	ldi	r22, 0x01	; 1
     ae2:	c7 01       	movw	r24, r14
     ae4:	0e 94 10 23 	call	0x4620	; 0x4620 <_ZN3I2C8twi_readEh>
     ae8:	d8 2e       	mov	r13, r24
	up += i2c.twi_read(0);
     aea:	60 e0       	ldi	r22, 0x00	; 0
     aec:	c7 01       	movw	r24, r14
     aee:	0e 94 10 23 	call	0x4620	; 0x4620 <_ZN3I2C8twi_readEh>
	i2c.twi_write((BMP180_ADDR | I2C_WRITE));
	i2c.twi_write(BMP180_REGCONTROLOUTPUT);
	i2c.twi_start();
	i2c.twi_write((BMP180_ADDR | I2C_READ));
	up  = i2c.twi_read(1) << 16;
	up += i2c.twi_read(1) << 8;
     af2:	2d 2d       	mov	r18, r13
     af4:	30 e0       	ldi	r19, 0x00	; 0
     af6:	32 2f       	mov	r19, r18
     af8:	22 27       	eor	r18, r18
     afa:	a9 01       	movw	r20, r18
     afc:	33 0f       	add	r19, r19
     afe:	66 0b       	sbc	r22, r22
     b00:	77 0b       	sbc	r23, r23
	up += i2c.twi_read(0);
     b02:	8a 01       	movw	r16, r20
     b04:	9b 01       	movw	r18, r22
     b06:	08 0f       	add	r16, r24
     b08:	11 1d       	adc	r17, r1
     b0a:	21 1d       	adc	r18, r1
     b0c:	31 1d       	adc	r19, r1
     b0e:	09 83       	std	Y+1, r16	; 0x01
     b10:	1a 83       	std	Y+2, r17	; 0x02
     b12:	2b 83       	std	Y+3, r18	; 0x03
     b14:	3c 83       	std	Y+4, r19	; 0x04
	i2c.twi_stop();
     b16:	c7 01       	movw	r24, r14
     b18:	0e 94 fc 22 	call	0x45f8	; 0x45f8 <_ZN3I2C8twi_stopEv>

	//calculate raw pressure
	b6   = bmp180_rawtemperature - 4000;
     b1c:	f1 01       	movw	r30, r2
     b1e:	c2 a0       	ldd	r12, Z+34	; 0x22
     b20:	d3 a0       	ldd	r13, Z+35	; 0x23
     b22:	e4 a0       	ldd	r14, Z+36	; 0x24
     b24:	f5 a0       	ldd	r15, Z+37	; 0x25
     b26:	f0 ea       	ldi	r31, 0xA0	; 160
     b28:	cf 1a       	sub	r12, r31
     b2a:	ff e0       	ldi	r31, 0x0F	; 15
     b2c:	df 0a       	sbc	r13, r31
     b2e:	e1 08       	sbc	r14, r1
     b30:	f1 08       	sbc	r15, r1
	x1   = (bmp180_regb2* (b6 * b6) >> 12) >> 11;
     b32:	a7 01       	movw	r20, r14
     b34:	96 01       	movw	r18, r12
     b36:	c7 01       	movw	r24, r14
     b38:	b6 01       	movw	r22, r12
     b3a:	0e 94 9f 45 	call	0x8b3e	; 0x8b3e <__mulsi3>
     b3e:	2b 01       	movw	r4, r22
     b40:	3c 01       	movw	r6, r24
	x2 = (bmp180_regac2 * b6) >> 11;
	x3 = x1 + x2;
	b3 = (((((int32_t)bmp180_regac1) * 4 + x3) << BMP180_MODE) + 2) >> 2;
	x1 = (bmp180_regac3 * b6) >> 13;
     b42:	f1 01       	movw	r30, r2
     b44:	a0 89       	ldd	r26, Z+16	; 0x10
     b46:	b1 89       	ldd	r27, Z+17	; 0x11
     b48:	0e 94 0e 46 	call	0x8c1c	; 0x8c1c <__mulshisi3>
     b4c:	4b 01       	movw	r8, r22
     b4e:	5c 01       	movw	r10, r24
     b50:	07 2e       	mov	r0, r23
     b52:	7d e0       	ldi	r23, 0x0D	; 13
     b54:	b5 94       	asr	r11
     b56:	a7 94       	ror	r10
     b58:	97 94       	ror	r9
     b5a:	87 94       	ror	r8
     b5c:	7a 95       	dec	r23
     b5e:	d1 f7       	brne	.-12     	; 0xb54 <_ZN6BMP18018bmp180_getpressureEv+0xf4>
     b60:	70 2d       	mov	r23, r0
	x2 = (bmp180_regb1 * ((b6 * b6) >> 12)) >> 16;
     b62:	a2 89       	ldd	r26, Z+18	; 0x12
     b64:	b3 89       	ldd	r27, Z+19	; 0x13
     b66:	a3 01       	movw	r20, r6
     b68:	92 01       	movw	r18, r4
     b6a:	01 2e       	mov	r0, r17
     b6c:	1c e0       	ldi	r17, 0x0C	; 12
     b6e:	55 95       	asr	r21
     b70:	47 95       	ror	r20
     b72:	37 95       	ror	r19
     b74:	27 95       	ror	r18
     b76:	1a 95       	dec	r17
     b78:	d1 f7       	brne	.-12     	; 0xb6e <_ZN6BMP18018bmp180_getpressureEv+0x10e>
     b7a:	10 2d       	mov	r17, r0
     b7c:	0e 94 0e 46 	call	0x8c1c	; 0x8c1c <__mulshisi3>
     b80:	bb 27       	eor	r27, r27
     b82:	97 fd       	sbrc	r25, 7
     b84:	b0 95       	com	r27
     b86:	ab 2f       	mov	r26, r27
	x3 = ((x1 + x2) + 2) >> 2;
     b88:	88 0d       	add	r24, r8
     b8a:	99 1d       	adc	r25, r9
     b8c:	aa 1d       	adc	r26, r10
     b8e:	bb 1d       	adc	r27, r11
     b90:	02 96       	adiw	r24, 0x02	; 2
     b92:	a1 1d       	adc	r26, r1
     b94:	b1 1d       	adc	r27, r1
     b96:	b5 95       	asr	r27
     b98:	a7 95       	ror	r26
     b9a:	97 95       	ror	r25
     b9c:	87 95       	ror	r24
     b9e:	b5 95       	asr	r27
     ba0:	a7 95       	ror	r26
     ba2:	97 95       	ror	r25
     ba4:	87 95       	ror	r24
	b4 = (bmp180_regac4 * (uint32_t)(x3 + 32768)) >> 15;
     ba6:	9c 01       	movw	r18, r24
     ba8:	ad 01       	movw	r20, r26
     baa:	30 58       	subi	r19, 0x80	; 128
     bac:	4f 4f       	sbci	r20, 0xFF	; 255
     bae:	5f 4f       	sbci	r21, 0xFF	; 255
     bb0:	a4 8d       	ldd	r26, Z+28	; 0x1c
     bb2:	b5 8d       	ldd	r27, Z+29	; 0x1d
     bb4:	0e 94 04 46 	call	0x8c08	; 0x8c08 <__muluhisi3>
     bb8:	8b 01       	movw	r16, r22
     bba:	9c 01       	movw	r18, r24
     bbc:	0f 2e       	mov	r0, r31
     bbe:	ff e0       	ldi	r31, 0x0F	; 15
     bc0:	36 95       	lsr	r19
     bc2:	27 95       	ror	r18
     bc4:	17 95       	ror	r17
     bc6:	07 95       	ror	r16
     bc8:	fa 95       	dec	r31
     bca:	d1 f7       	brne	.-12     	; 0xbc0 <_ZN6BMP18018bmp180_getpressureEv+0x160>
     bcc:	f0 2d       	mov	r31, r0
     bce:	0d 83       	std	Y+5, r16	; 0x05
     bd0:	1e 83       	std	Y+6, r17	; 0x06
     bd2:	2f 83       	std	Y+7, r18	; 0x07
     bd4:	38 87       	std	Y+8, r19	; 0x08
	//calculate raw pressure
	b6   = bmp180_rawtemperature - 4000;
	x1   = (bmp180_regb2* (b6 * b6) >> 12) >> 11;
	x2 = (bmp180_regac2 * b6) >> 11;
	x3 = x1 + x2;
	b3 = (((((int32_t)bmp180_regac1) * 4 + x3) << BMP180_MODE) + 2) >> 2;
     bd6:	84 84       	ldd	r8, Z+12	; 0x0c
     bd8:	95 84       	ldd	r9, Z+13	; 0x0d
     bda:	09 2c       	mov	r0, r9
     bdc:	00 0c       	add	r0, r0
     bde:	aa 08       	sbc	r10, r10
     be0:	bb 08       	sbc	r11, r11
     be2:	88 0c       	add	r8, r8
     be4:	99 1c       	adc	r9, r9
     be6:	aa 1c       	adc	r10, r10
     be8:	bb 1c       	adc	r11, r11
     bea:	88 0c       	add	r8, r8
     bec:	99 1c       	adc	r9, r9
     bee:	aa 1c       	adc	r10, r10
     bf0:	bb 1c       	adc	r11, r11
	up += i2c.twi_read(0);
	i2c.twi_stop();

	//calculate raw pressure
	b6   = bmp180_rawtemperature - 4000;
	x1   = (bmp180_regb2* (b6 * b6) >> 12) >> 11;
     bf2:	a4 89       	ldd	r26, Z+20	; 0x14
     bf4:	b5 89       	ldd	r27, Z+21	; 0x15
     bf6:	a3 01       	movw	r20, r6
     bf8:	92 01       	movw	r18, r4
     bfa:	0e 94 0e 46 	call	0x8c1c	; 0x8c1c <__mulshisi3>
     bfe:	2b 01       	movw	r4, r22
     c00:	3c 01       	movw	r6, r24
     c02:	03 2e       	mov	r0, r19
     c04:	37 e1       	ldi	r19, 0x17	; 23
     c06:	75 94       	asr	r7
     c08:	67 94       	ror	r6
     c0a:	57 94       	ror	r5
     c0c:	47 94       	ror	r4
     c0e:	3a 95       	dec	r19
     c10:	d1 f7       	brne	.-12     	; 0xc06 <_ZN6BMP18018bmp180_getpressureEv+0x1a6>
     c12:	30 2d       	mov	r19, r0
	x2 = (bmp180_regac2 * b6) >> 11;
     c14:	a6 85       	ldd	r26, Z+14	; 0x0e
     c16:	b7 85       	ldd	r27, Z+15	; 0x0f
     c18:	a7 01       	movw	r20, r14
     c1a:	96 01       	movw	r18, r12
     c1c:	0e 94 0e 46 	call	0x8c1c	; 0x8c1c <__mulshisi3>
     c20:	dc 01       	movw	r26, r24
     c22:	cb 01       	movw	r24, r22
     c24:	07 2e       	mov	r0, r23
     c26:	7b e0       	ldi	r23, 0x0B	; 11
     c28:	b5 95       	asr	r27
     c2a:	a7 95       	ror	r26
     c2c:	97 95       	ror	r25
     c2e:	87 95       	ror	r24
     c30:	7a 95       	dec	r23
     c32:	d1 f7       	brne	.-12     	; 0xc28 <_ZN6BMP18018bmp180_getpressureEv+0x1c8>
     c34:	70 2d       	mov	r23, r0
	x3 = x1 + x2;
     c36:	48 0e       	add	r4, r24
     c38:	59 1e       	adc	r5, r25
     c3a:	6a 1e       	adc	r6, r26
     c3c:	7b 1e       	adc	r7, r27
	b3 = (((((int32_t)bmp180_regac1) * 4 + x3) << BMP180_MODE) + 2) >> 2;
     c3e:	84 0c       	add	r8, r4
     c40:	95 1c       	adc	r9, r5
     c42:	a6 1c       	adc	r10, r6
     c44:	b7 1c       	adc	r11, r7
     c46:	88 0c       	add	r8, r8
     c48:	99 1c       	adc	r9, r9
     c4a:	aa 1c       	adc	r10, r10
     c4c:	bb 1c       	adc	r11, r11
	x1 = (bmp180_regac3 * b6) >> 13;
	x2 = (bmp180_regb1 * ((b6 * b6) >> 12)) >> 16;
	x3 = ((x1 + x2) + 2) >> 2;
	b4 = (bmp180_regac4 * (uint32_t)(x3 + 32768)) >> 15;
	b7 = ((uint32_t)up - b3) * (50000 >> BMP180_MODE);
     c4e:	29 81       	ldd	r18, Y+1	; 0x01
     c50:	3a 81       	ldd	r19, Y+2	; 0x02
     c52:	4b 81       	ldd	r20, Y+3	; 0x03
     c54:	5c 81       	ldd	r21, Y+4	; 0x04
     c56:	28 19       	sub	r18, r8
     c58:	39 09       	sbc	r19, r9
     c5a:	4a 09       	sbc	r20, r10
     c5c:	5b 09       	sbc	r21, r11
     c5e:	aa e6       	ldi	r26, 0x6A	; 106
     c60:	b8 e1       	ldi	r27, 0x18	; 24
     c62:	0e 94 04 46 	call	0x8c08	; 0x8c08 <__muluhisi3>
	p = b7 < 0x80000000 ? (b7 << 1) / b4 : (b7 / b4) << 1;
     c66:	99 23       	and	r25, r25
     c68:	6c f0       	brlt	.+26     	; 0xc84 <_ZN6BMP18018bmp180_getpressureEv+0x224>
     c6a:	66 0f       	add	r22, r22
     c6c:	77 1f       	adc	r23, r23
     c6e:	88 1f       	adc	r24, r24
     c70:	99 1f       	adc	r25, r25
     c72:	2d 81       	ldd	r18, Y+5	; 0x05
     c74:	3e 81       	ldd	r19, Y+6	; 0x06
     c76:	4f 81       	ldd	r20, Y+7	; 0x07
     c78:	58 85       	ldd	r21, Y+8	; 0x08
     c7a:	0e 94 ae 45 	call	0x8b5c	; 0x8b5c <__udivmodsi4>
     c7e:	69 01       	movw	r12, r18
     c80:	7a 01       	movw	r14, r20
     c82:	0c c0       	rjmp	.+24     	; 0xc9c <_ZN6BMP18018bmp180_getpressureEv+0x23c>
     c84:	2d 81       	ldd	r18, Y+5	; 0x05
     c86:	3e 81       	ldd	r19, Y+6	; 0x06
     c88:	4f 81       	ldd	r20, Y+7	; 0x07
     c8a:	58 85       	ldd	r21, Y+8	; 0x08
     c8c:	0e 94 ae 45 	call	0x8b5c	; 0x8b5c <__udivmodsi4>
     c90:	69 01       	movw	r12, r18
     c92:	7a 01       	movw	r14, r20
     c94:	cc 0c       	add	r12, r12
     c96:	dd 1c       	adc	r13, r13
     c98:	ee 1c       	adc	r14, r14
     c9a:	ff 1c       	adc	r15, r15
	x1 = (p >> 8) * (p >> 8);
     c9c:	99 27       	eor	r25, r25
     c9e:	f7 fc       	sbrc	r15, 7
     ca0:	9a 95       	dec	r25
     ca2:	8f 2d       	mov	r24, r15
     ca4:	7e 2d       	mov	r23, r14
     ca6:	6d 2d       	mov	r22, r13
     ca8:	9b 01       	movw	r18, r22
     caa:	ac 01       	movw	r20, r24
     cac:	0e 94 9f 45 	call	0x8b3e	; 0x8b3e <__mulsi3>
     cb0:	9b 01       	movw	r18, r22
     cb2:	ac 01       	movw	r20, r24
	x1 = (x1 * 3038) >> 16;
     cb4:	ae ed       	ldi	r26, 0xDE	; 222
     cb6:	bb e0       	ldi	r27, 0x0B	; 11
     cb8:	0e 94 04 46 	call	0x8c08	; 0x8c08 <__muluhisi3>
     cbc:	4c 01       	movw	r8, r24
     cbe:	bb 24       	eor	r11, r11
     cc0:	97 fc       	sbrc	r9, 7
     cc2:	b0 94       	com	r11
     cc4:	ab 2c       	mov	r10, r11
	x2 = (-7357 * p) >> 16;
     cc6:	a3 e4       	ldi	r26, 0x43	; 67
     cc8:	b3 ee       	ldi	r27, 0xE3	; 227
     cca:	a7 01       	movw	r20, r14
     ccc:	96 01       	movw	r18, r12
     cce:	0e 94 10 46 	call	0x8c20	; 0x8c20 <__mulohisi3>
     cd2:	bb 27       	eor	r27, r27
     cd4:	97 fd       	sbrc	r25, 7
     cd6:	b0 95       	com	r27
     cd8:	ab 2f       	mov	r26, r27
	bmp180_rawpressure = p + ((x1 + x2 + 3791) >> 4);
     cda:	88 0d       	add	r24, r8
     cdc:	99 1d       	adc	r25, r9
     cde:	aa 1d       	adc	r26, r10
     ce0:	bb 1d       	adc	r27, r11
     ce2:	81 53       	subi	r24, 0x31	; 49
     ce4:	91 4f       	sbci	r25, 0xF1	; 241
     ce6:	af 4f       	sbci	r26, 0xFF	; 255
     ce8:	bf 4f       	sbci	r27, 0xFF	; 255
     cea:	68 94       	set
     cec:	13 f8       	bld	r1, 3
     cee:	b5 95       	asr	r27
     cf0:	a7 95       	ror	r26
     cf2:	97 95       	ror	r25
     cf4:	87 95       	ror	r24
     cf6:	16 94       	lsr	r1
     cf8:	d1 f7       	brne	.-12     	; 0xcee <_ZN6BMP18018bmp180_getpressureEv+0x28e>
     cfa:	bc 01       	movw	r22, r24
     cfc:	cd 01       	movw	r24, r26
     cfe:	6c 0d       	add	r22, r12
     d00:	7d 1d       	adc	r23, r13
     d02:	8e 1d       	adc	r24, r14
     d04:	9f 1d       	adc	r25, r15
     d06:	f1 01       	movw	r30, r2
     d08:	66 a3       	std	Z+38, r22	; 0x26
     d0a:	77 a3       	std	Z+39, r23	; 0x27
     d0c:	80 a7       	std	Z+40, r24	; 0x28
     d0e:	91 a7       	std	Z+41, r25	; 0x29
	
	pressure = (bmp180_rawpressure+BMP180_UNITPAOFFSET)/100.0;
     d10:	0e 94 49 3f 	call	0x7e92	; 0x7e92 <__floatunsisf>
     d14:	20 e0       	ldi	r18, 0x00	; 0
     d16:	30 e0       	ldi	r19, 0x00	; 0
     d18:	48 ec       	ldi	r20, 0xC8	; 200
     d1a:	52 e4       	ldi	r21, 0x42	; 66
     d1c:	0e 94 b0 3e 	call	0x7d60	; 0x7d60 <__divsf3>
     d20:	f1 01       	movw	r30, r2
     d22:	60 83       	st	Z, r22
     d24:	71 83       	std	Z+1, r23	; 0x01
     d26:	82 83       	std	Z+2, r24	; 0x02
     d28:	93 83       	std	Z+3, r25	; 0x03
	
}
     d2a:	28 96       	adiw	r28, 0x08	; 8
     d2c:	0f b6       	in	r0, 0x3f	; 63
     d2e:	f8 94       	cli
     d30:	de bf       	out	0x3e, r29	; 62
     d32:	0f be       	out	0x3f, r0	; 63
     d34:	cd bf       	out	0x3d, r28	; 61
     d36:	df 91       	pop	r29
     d38:	cf 91       	pop	r28
     d3a:	1f 91       	pop	r17
     d3c:	0f 91       	pop	r16
     d3e:	ff 90       	pop	r15
     d40:	ef 90       	pop	r14
     d42:	df 90       	pop	r13
     d44:	cf 90       	pop	r12
     d46:	bf 90       	pop	r11
     d48:	af 90       	pop	r10
     d4a:	9f 90       	pop	r9
     d4c:	8f 90       	pop	r8
     d4e:	7f 90       	pop	r7
     d50:	6f 90       	pop	r6
     d52:	5f 90       	pop	r5
     d54:	4f 90       	pop	r4
     d56:	3f 90       	pop	r3
     d58:	2f 90       	pop	r2
     d5a:	08 95       	ret

00000d5c <_ZN6BMP18018bmp180_getaltitudeEv>:

void BMP180::bmp180_getaltitude(){
	bmp180_getpressure();
     d5c:	81 ce       	rjmp	.-766    	; 0xa60 <_ZN6BMP18018bmp180_getpressureEv>
     d5e:	08 95       	ret

00000d60 <power_off>:
}

static
void power_off (void)
{
	SPCR = 0;				/* Disable SPI function */
     d60:	1c bc       	out	0x2c, r1	; 44

	DDRB  &= ~((1<<PORTB7) | (1<<PORTB5));// | (1<<PORTB4));	/* Set SCK/MOSI/CS as hi-z, INS#/WP as pull-up */
     d62:	84 b1       	in	r24, 0x04	; 4
     d64:	8f 75       	andi	r24, 0x5F	; 95
     d66:	84 b9       	out	0x04, r24	; 4
	CS_HIGH();
     d68:	2c 9a       	sbi	0x05, 4	; 5
     d6a:	08 95       	ret

00000d6c <xchg_spi>:
static
BYTE xchg_spi (		/* Returns received data */
BYTE dat		/* Data to be sent */
)
{
	SPDR = dat;
     d6c:	8e bd       	out	0x2e, r24	; 46
	loop_until_bit_is_set(SPSR, SPIF);
     d6e:	0d b4       	in	r0, 0x2d	; 45
     d70:	07 fe       	sbrs	r0, 7
     d72:	fd cf       	rjmp	.-6      	; 0xd6e <xchg_spi+0x2>
	return SPDR;
     d74:	8e b5       	in	r24, 0x2e	; 46
}
     d76:	08 95       	ret

00000d78 <deselect>:
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();		/* Set CS# high */
     d78:	2c 9a       	sbi	0x05, 4	; 5
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
     d7a:	8f ef       	ldi	r24, 0xFF	; 255
     d7c:	f7 cf       	rjmp	.-18     	; 0xd6c <xchg_spi>
     d7e:	08 95       	ret

00000d80 <select>:
/*-----------------------------------------------------------------------*/

static
int select (void)	/* 1:Successful, 0:Timeout */
{
	CS_LOW();		/* Set CS# low */
     d80:	2c 98       	cbi	0x05, 4	; 5
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
     d82:	8f ef       	ldi	r24, 0xFF	; 255
     d84:	f3 df       	rcall	.-26     	; 0xd6c <xchg_spi>
)
{
	BYTE d;


	Timer2 = wt / 10;
     d86:	82 e3       	ldi	r24, 0x32	; 50
     d88:	80 93 23 04 	sts	0x0423, r24
	do{
		d = xchg_spi(0xFF);
     d8c:	8f ef       	ldi	r24, 0xFF	; 255
     d8e:	ee df       	rcall	.-36     	; 0xd6c <xchg_spi>
	}while (d != 0xFF && Timer2);
     d90:	8f 3f       	cpi	r24, 0xFF	; 255
     d92:	41 f0       	breq	.+16     	; 0xda4 <select+0x24>
     d94:	80 91 23 04 	lds	r24, 0x0423
     d98:	81 11       	cpse	r24, r1
     d9a:	f8 cf       	rjmp	.-16     	; 0xd8c <select+0xc>
{
	CS_LOW();		/* Set CS# low */
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
	if (wait_ready(500)) return 1;	/* Wait for card ready */

	deselect();
     d9c:	ed df       	rcall	.-38     	; 0xd78 <deselect>
	return 0;	/* Timeout */
     d9e:	80 e0       	ldi	r24, 0x00	; 0
     da0:	90 e0       	ldi	r25, 0x00	; 0
     da2:	08 95       	ret
static
int select (void)	/* 1:Successful, 0:Timeout */
{
	CS_LOW();		/* Set CS# low */
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
	if (wait_ready(500)) return 1;	/* Wait for card ready */
     da4:	81 e0       	ldi	r24, 0x01	; 1
     da6:	90 e0       	ldi	r25, 0x00	; 0

	deselect();
	return 0;	/* Timeout */
}
     da8:	08 95       	ret

00000daa <rcvr_datablock>:
static
int rcvr_datablock (
BYTE *buff,			/* Data buffer to store received data */
UINT btr			/* Byte count (must be multiple of 4) */
)
{
     daa:	0f 93       	push	r16
     dac:	1f 93       	push	r17
     dae:	cf 93       	push	r28
     db0:	df 93       	push	r29
     db2:	ec 01       	movw	r28, r24
     db4:	8b 01       	movw	r16, r22
	BYTE token;


	Timer1 = 20;
     db6:	84 e1       	ldi	r24, 0x14	; 20
     db8:	80 93 24 04 	sts	0x0424, r24
	do {							/* Wait for data packet in timeout of 200ms */
		token = xchg_spi(0xFF);
     dbc:	8f ef       	ldi	r24, 0xFF	; 255
     dbe:	d6 df       	rcall	.-84     	; 0xd6c <xchg_spi>
	} while ((token == 0xFF) && Timer1);
     dc0:	8f 3f       	cpi	r24, 0xFF	; 255
     dc2:	39 f4       	brne	.+14     	; 0xdd2 <rcvr_datablock+0x28>
     dc4:	90 91 24 04 	lds	r25, 0x0424
     dc8:	91 11       	cpse	r25, r1
     dca:	f8 cf       	rjmp	.-16     	; 0xdbc <rcvr_datablock+0x12>
	if (token != 0xFE) return 0;	/* If not valid data token, return with error */
     dcc:	80 e0       	ldi	r24, 0x00	; 0
     dce:	90 e0       	ldi	r25, 0x00	; 0
     dd0:	20 c0       	rjmp	.+64     	; 0xe12 <rcvr_datablock+0x68>
     dd2:	8e 3f       	cpi	r24, 0xFE	; 254
     dd4:	e1 f4       	brne	.+56     	; 0xe0e <rcvr_datablock+0x64>
void rcvr_spi_multi (
BYTE *p,	/* Data buffer */
UINT cnt	/* Size of data block (must be multiple of 2) */
)
{
	cli();
     dd6:	f8 94       	cli
	do {
		SPDR = 0xFF; loop_until_bit_is_set(SPSR,SPIF); *p++ = SPDR;
     dd8:	8f ef       	ldi	r24, 0xFF	; 255
     dda:	8e bd       	out	0x2e, r24	; 46
     ddc:	0d b4       	in	r0, 0x2d	; 45
     dde:	07 fe       	sbrs	r0, 7
     de0:	fd cf       	rjmp	.-6      	; 0xddc <rcvr_datablock+0x32>
     de2:	9e b5       	in	r25, 0x2e	; 46
     de4:	98 83       	st	Y, r25
		SPDR = 0xFF; loop_until_bit_is_set(SPSR,SPIF); *p++ = SPDR;
     de6:	8e bd       	out	0x2e, r24	; 46
     de8:	0d b4       	in	r0, 0x2d	; 45
     dea:	07 fe       	sbrs	r0, 7
     dec:	fd cf       	rjmp	.-6      	; 0xde8 <rcvr_datablock+0x3e>
     dee:	22 96       	adiw	r28, 0x02	; 2
     df0:	9e b5       	in	r25, 0x2e	; 46
     df2:	fe 01       	movw	r30, r28
     df4:	31 97       	sbiw	r30, 0x01	; 1
     df6:	90 83       	st	Z, r25
	} while (cnt -= 2);
     df8:	02 50       	subi	r16, 0x02	; 2
     dfa:	11 09       	sbc	r17, r1
     dfc:	71 f7       	brne	.-36     	; 0xdda <rcvr_datablock+0x30>
	sei();
     dfe:	78 94       	sei
		token = xchg_spi(0xFF);
	} while ((token == 0xFF) && Timer1);
	if (token != 0xFE) return 0;	/* If not valid data token, return with error */

	rcvr_spi_multi(buff, btr);		/* Receive the data block into buffer */
	xchg_spi(0xFF);					/* Discard CRC */
     e00:	8f ef       	ldi	r24, 0xFF	; 255
     e02:	b4 df       	rcall	.-152    	; 0xd6c <xchg_spi>
	xchg_spi(0xFF);
     e04:	8f ef       	ldi	r24, 0xFF	; 255
     e06:	b2 df       	rcall	.-156    	; 0xd6c <xchg_spi>

	return 1;						/* Return with success */
     e08:	81 e0       	ldi	r24, 0x01	; 1
     e0a:	90 e0       	ldi	r25, 0x00	; 0
     e0c:	02 c0       	rjmp	.+4      	; 0xe12 <rcvr_datablock+0x68>

	Timer1 = 20;
	do {							/* Wait for data packet in timeout of 200ms */
		token = xchg_spi(0xFF);
	} while ((token == 0xFF) && Timer1);
	if (token != 0xFE) return 0;	/* If not valid data token, return with error */
     e0e:	80 e0       	ldi	r24, 0x00	; 0
     e10:	90 e0       	ldi	r25, 0x00	; 0
	rcvr_spi_multi(buff, btr);		/* Receive the data block into buffer */
	xchg_spi(0xFF);					/* Discard CRC */
	xchg_spi(0xFF);

	return 1;						/* Return with success */
}
     e12:	df 91       	pop	r29
     e14:	cf 91       	pop	r28
     e16:	1f 91       	pop	r17
     e18:	0f 91       	pop	r16
     e1a:	08 95       	ret

00000e1c <send_cmd>:
static
BYTE send_cmd (		/* Returns R1 resp (bit7==1:Send failed) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
     e1c:	ff 92       	push	r15
     e1e:	0f 93       	push	r16
     e20:	1f 93       	push	r17
     e22:	cf 93       	push	r28
     e24:	df 93       	push	r29
     e26:	c8 2f       	mov	r28, r24
     e28:	d4 2f       	mov	r29, r20
     e2a:	15 2f       	mov	r17, r21
     e2c:	06 2f       	mov	r16, r22
     e2e:	f7 2e       	mov	r15, r23
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
     e30:	88 23       	and	r24, r24
     e32:	4c f4       	brge	.+18     	; 0xe46 <send_cmd+0x2a>
		cmd &= 0x7F;
		res = send_cmd(CMD55, 0);
     e34:	40 e0       	ldi	r20, 0x00	; 0
     e36:	50 e0       	ldi	r21, 0x00	; 0
     e38:	ba 01       	movw	r22, r20
     e3a:	87 e3       	ldi	r24, 0x37	; 55
     e3c:	ef df       	rcall	.-34     	; 0xe1c <send_cmd>
		if (res > 1) return res;
     e3e:	82 30       	cpi	r24, 0x02	; 2
     e40:	08 f0       	brcs	.+2      	; 0xe44 <send_cmd+0x28>
     e42:	3c c0       	rjmp	.+120    	; 0xebc <send_cmd+0xa0>
{
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
		cmd &= 0x7F;
     e44:	cf 77       	andi	r28, 0x7F	; 127
		res = send_cmd(CMD55, 0);
		if (res > 1) return res;
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
     e46:	cc 30       	cpi	r28, 0x0C	; 12
     e48:	f1 f0       	breq	.+60     	; 0xe86 <send_cmd+0x6a>
		deselect();
     e4a:	96 df       	rcall	.-212    	; 0xd78 <deselect>
		if (!select()) return 0xFF;
     e4c:	99 df       	rcall	.-206    	; 0xd80 <select>
     e4e:	89 2b       	or	r24, r25
     e50:	c1 f0       	breq	.+48     	; 0xe82 <send_cmd+0x66>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + Command index */
     e52:	8c 2f       	mov	r24, r28
     e54:	80 64       	ori	r24, 0x40	; 64
     e56:	8a df       	rcall	.-236    	; 0xd6c <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
     e58:	8f 2d       	mov	r24, r15
     e5a:	88 df       	rcall	.-240    	; 0xd6c <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
     e5c:	80 2f       	mov	r24, r16
     e5e:	86 df       	rcall	.-244    	; 0xd6c <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
     e60:	81 2f       	mov	r24, r17
     e62:	84 df       	rcall	.-248    	; 0xd6c <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
     e64:	8d 2f       	mov	r24, r29
     e66:	82 df       	rcall	.-252    	; 0xd6c <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) + Stop */
     e68:	cc 23       	and	r28, r28
     e6a:	29 f1       	breq	.+74     	; 0xeb6 <send_cmd+0x9a>
     e6c:	21 c0       	rjmp	.+66     	; 0xeb0 <send_cmd+0x94>
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) Stop */
	xchg_spi(n);

	/* Receive command response */
	if (cmd == CMD12) xchg_spi(0xFF);		/* Skip a stuff byte when stop reading */
     e6e:	8f ef       	ldi	r24, 0xFF	; 255
     e70:	7d df       	rcall	.-262    	; 0xd6c <xchg_spi>
static
BYTE send_cmd (		/* Returns R1 resp (bit7==1:Send failed) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
     e72:	ca e0       	ldi	r28, 0x0A	; 10

	/* Receive command response */
	if (cmd == CMD12) xchg_spi(0xFF);		/* Skip a stuff byte when stop reading */
	n = 10;								/* Wait for a valid response in timeout of 10 attempts */
	do
		res = xchg_spi(0xFF);
     e74:	8f ef       	ldi	r24, 0xFF	; 255
     e76:	7a df       	rcall	.-268    	; 0xd6c <xchg_spi>
	while ((res & 0x80) && --n);
     e78:	88 23       	and	r24, r24
     e7a:	04 f5       	brge	.+64     	; 0xebc <send_cmd+0xa0>
     e7c:	c1 50       	subi	r28, 0x01	; 1
     e7e:	d1 f7       	brne	.-12     	; 0xe74 <send_cmd+0x58>
     e80:	1d c0       	rjmp	.+58     	; 0xebc <send_cmd+0xa0>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
		deselect();
		if (!select()) return 0xFF;
     e82:	8f ef       	ldi	r24, 0xFF	; 255
     e84:	1b c0       	rjmp	.+54     	; 0xebc <send_cmd+0xa0>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + Command index */
     e86:	8c e4       	ldi	r24, 0x4C	; 76
     e88:	71 df       	rcall	.-286    	; 0xd6c <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
     e8a:	8f 2d       	mov	r24, r15
     e8c:	6f df       	rcall	.-290    	; 0xd6c <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
     e8e:	80 2f       	mov	r24, r16
     e90:	6d df       	rcall	.-294    	; 0xd6c <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
     e92:	81 2f       	mov	r24, r17
     e94:	6b df       	rcall	.-298    	; 0xd6c <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
     e96:	8d 2f       	mov	r24, r29
     e98:	69 df       	rcall	.-302    	; 0xd6c <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) + Stop */
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) Stop */
	xchg_spi(n);
     e9a:	81 e0       	ldi	r24, 0x01	; 1
     e9c:	67 df       	rcall	.-306    	; 0xd6c <xchg_spi>

	/* Receive command response */
	if (cmd == CMD12) xchg_spi(0xFF);		/* Skip a stuff byte when stop reading */
     e9e:	cc 30       	cpi	r28, 0x0C	; 12
     ea0:	31 f3       	breq	.-52     	; 0xe6e <send_cmd+0x52>
     ea2:	e7 cf       	rjmp	.-50     	; 0xe72 <send_cmd+0x56>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) + Stop */
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) Stop */
	xchg_spi(n);
     ea4:	87 e8       	ldi	r24, 0x87	; 135
     ea6:	62 df       	rcall	.-316    	; 0xd6c <xchg_spi>
     ea8:	e4 cf       	rjmp	.-56     	; 0xe72 <send_cmd+0x56>
     eaa:	81 e0       	ldi	r24, 0x01	; 1
     eac:	5f df       	rcall	.-322    	; 0xd6c <xchg_spi>
     eae:	e1 cf       	rjmp	.-62     	; 0xe72 <send_cmd+0x56>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) + Stop */
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) Stop */
     eb0:	c8 30       	cpi	r28, 0x08	; 8
     eb2:	c1 f3       	breq	.-16     	; 0xea4 <send_cmd+0x88>
     eb4:	fa cf       	rjmp	.-12     	; 0xeaa <send_cmd+0x8e>
	xchg_spi(n);
     eb6:	85 e9       	ldi	r24, 0x95	; 149
     eb8:	59 df       	rcall	.-334    	; 0xd6c <xchg_spi>
     eba:	db cf       	rjmp	.-74     	; 0xe72 <send_cmd+0x56>
	do
		res = xchg_spi(0xFF);
	while ((res & 0x80) && --n);

	return res;			/* Return with the response value */
}
     ebc:	df 91       	pop	r29
     ebe:	cf 91       	pop	r28
     ec0:	1f 91       	pop	r17
     ec2:	0f 91       	pop	r16
     ec4:	ff 90       	pop	r15
     ec6:	08 95       	ret

00000ec8 <xmit_datablock>:
static
int xmit_datablock (
const BYTE *buff,	/* 512 byte data block to be transmitted */
BYTE token			/* Data/Stop token */
)
{
     ec8:	1f 93       	push	r17
     eca:	cf 93       	push	r28
     ecc:	df 93       	push	r29
     ece:	ec 01       	movw	r28, r24
     ed0:	16 2f       	mov	r17, r22
)
{
	BYTE d;


	Timer2 = wt / 10;
     ed2:	92 e3       	ldi	r25, 0x32	; 50
     ed4:	90 93 23 04 	sts	0x0423, r25
	do{
		d = xchg_spi(0xFF);
     ed8:	8f ef       	ldi	r24, 0xFF	; 255
     eda:	48 df       	rcall	.-368    	; 0xd6c <xchg_spi>
	}while (d != 0xFF && Timer2);
     edc:	8f 3f       	cpi	r24, 0xFF	; 255
     ede:	31 f0       	breq	.+12     	; 0xeec <xmit_datablock+0x24>
     ee0:	90 91 23 04 	lds	r25, 0x0423
     ee4:	91 11       	cpse	r25, r1
     ee6:	f8 cf       	rjmp	.-16     	; 0xed8 <xmit_datablock+0x10>
)
{
	BYTE resp;


	if (!wait_ready(500)) return 0;
     ee8:	80 e0       	ldi	r24, 0x00	; 0
     eea:	28 c0       	rjmp	.+80     	; 0xf3c <xmit_datablock+0x74>

	xchg_spi(token);					/* Xmit data token */
     eec:	81 2f       	mov	r24, r17
     eee:	3e df       	rcall	.-388    	; 0xd6c <xchg_spi>
	if (token != 0xFD) {	/* Is data token */
     ef0:	1d 3f       	cpi	r17, 0xFD	; 253
     ef2:	11 f1       	breq	.+68     	; 0xf38 <xmit_datablock+0x70>
void xmit_spi_multi (
const BYTE *p,	/* Data block to be sent */
UINT cnt		/* Size of data block (must be multiple of 2) */
)
{
	cli();
     ef4:	f8 94       	cli
     ef6:	9e 01       	movw	r18, r28
     ef8:	3e 5f       	subi	r19, 0xFE	; 254
	do {
		SPDR = *p++; loop_until_bit_is_set(SPSR,SPIF);
     efa:	88 81       	ld	r24, Y
     efc:	8e bd       	out	0x2e, r24	; 46
     efe:	0d b4       	in	r0, 0x2d	; 45
     f00:	07 fe       	sbrs	r0, 7
     f02:	fd cf       	rjmp	.-6      	; 0xefe <xmit_datablock+0x36>
     f04:	22 96       	adiw	r28, 0x02	; 2
     f06:	fe 01       	movw	r30, r28
     f08:	31 97       	sbiw	r30, 0x01	; 1
		SPDR = *p++; loop_until_bit_is_set(SPSR,SPIF);
     f0a:	80 81       	ld	r24, Z
     f0c:	8e bd       	out	0x2e, r24	; 46
     f0e:	0d b4       	in	r0, 0x2d	; 45
     f10:	07 fe       	sbrs	r0, 7
     f12:	fd cf       	rjmp	.-6      	; 0xf0e <xmit_datablock+0x46>
	} while (cnt -= 2);
     f14:	2c 17       	cp	r18, r28
     f16:	3d 07       	cpc	r19, r29
     f18:	81 f7       	brne	.-32     	; 0xefa <xmit_datablock+0x32>
	sei();
     f1a:	78 94       	sei
	if (!wait_ready(500)) return 0;

	xchg_spi(token);					/* Xmit data token */
	if (token != 0xFD) {	/* Is data token */
		xmit_spi_multi(buff, CLUSTERSIZE);		/* Xmit the data block to the MMC */
		xchg_spi(0xFF);					/* CRC (Dummy) */
     f1c:	8f ef       	ldi	r24, 0xFF	; 255
     f1e:	26 df       	rcall	.-436    	; 0xd6c <xchg_spi>
		xchg_spi(0xFF);
     f20:	8f ef       	ldi	r24, 0xFF	; 255
     f22:	24 df       	rcall	.-440    	; 0xd6c <xchg_spi>
		resp = xchg_spi(0xFF);			/* Reveive data response */
     f24:	8f ef       	ldi	r24, 0xFF	; 255
     f26:	22 df       	rcall	.-444    	; 0xd6c <xchg_spi>
		if ((resp & 0x1F) != 0x05)		/* If not accepted, return with error */
     f28:	28 2f       	mov	r18, r24
     f2a:	2f 71       	andi	r18, 0x1F	; 31
     f2c:	81 e0       	ldi	r24, 0x01	; 1
     f2e:	90 e0       	ldi	r25, 0x00	; 0
     f30:	25 30       	cpi	r18, 0x05	; 5
     f32:	21 f0       	breq	.+8      	; 0xf3c <xmit_datablock+0x74>
     f34:	80 e0       	ldi	r24, 0x00	; 0
     f36:	02 c0       	rjmp	.+4      	; 0xf3c <xmit_datablock+0x74>
		return 0;
	}

	return 1;
     f38:	81 e0       	ldi	r24, 0x01	; 1
     f3a:	90 e0       	ldi	r25, 0x00	; 0
}
     f3c:	df 91       	pop	r29
     f3e:	cf 91       	pop	r28
     f40:	1f 91       	pop	r17
     f42:	08 95       	ret

00000f44 <disk_initialize>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
	BYTE pdrv		/* Physical drive number (0) */
)
{
     f44:	cf 92       	push	r12
     f46:	df 92       	push	r13
     f48:	ef 92       	push	r14
     f4a:	ff 92       	push	r15
     f4c:	0f 93       	push	r16
     f4e:	1f 93       	push	r17
     f50:	cf 93       	push	r28
     f52:	df 93       	push	r29
     f54:	00 d0       	rcall	.+0      	; 0xf56 <disk_initialize+0x12>
     f56:	00 d0       	rcall	.+0      	; 0xf58 <disk_initialize+0x14>
     f58:	cd b7       	in	r28, 0x3d	; 61
     f5a:	de b7       	in	r29, 0x3e	; 62
	BYTE n, cmd, ty, ocr[4];


	if (pdrv) return STA_NOINIT;		/* Supports only single drive */
     f5c:	81 11       	cpse	r24, r1
     f5e:	9b c0       	rjmp	.+310    	; 0x1096 <disk_initialize+0x152>
	power_off();						/* Turn off the socket power to reset the card */
     f60:	ff de       	rcall	.-514    	; 0xd60 <power_off>
	if (Stat & (1<<STA_NODISK)) return Stat;	/* No card in the socket */
     f62:	80 91 06 01 	lds	r24, 0x0106
     f66:	82 ff       	sbrs	r24, 2
     f68:	03 c0       	rjmp	.+6      	; 0xf70 <disk_initialize+0x2c>
     f6a:	80 91 06 01 	lds	r24, 0x0106
     f6e:	9e c0       	rjmp	.+316    	; 0x10ac <disk_initialize+0x168>

static
void power_on (void)
{
	//PORTB |= (1<<PORTB7) | (1<<PORTB5) | (1<<PORTB4);	/* Configure SCK/MOSI/CS as output */
	DDRB |= (1<<PORTB7) | (1<<PORTB5) | (1<<PORTB4);
     f70:	84 b1       	in	r24, 0x04	; 4
     f72:	80 6b       	ori	r24, 0xB0	; 176
     f74:	84 b9       	out	0x04, r24	; 4
	DDRB &= ~(1<<PORTB6);
     f76:	26 98       	cbi	0x04, 6	; 4
	CS_HIGH();
     f78:	2c 9a       	sbi	0x05, 4	; 5

	SPSR = 0x01;			/* SPI 2x mode */
     f7a:	81 e0       	ldi	r24, 0x01	; 1
     f7c:	8d bd       	out	0x2d, r24	; 45
	SPCR = 0x52;			/* Enable SPI function in mode 0 */
     f7e:	82 e5       	ldi	r24, 0x52	; 82
     f80:	8c bd       	out	0x2c, r24	; 44
     f82:	1a e0       	ldi	r17, 0x0A	; 10
	if (pdrv) return STA_NOINIT;		/* Supports only single drive */
	power_off();						/* Turn off the socket power to reset the card */
	if (Stat & (1<<STA_NODISK)) return Stat;	/* No card in the socket */
	power_on();							/* Turn on the socket power */
//	FCLK_SLOW();
	for (n = 10; n; n--) xchg_spi(0xFF);	/* 80 dummy clocks */
     f84:	8f ef       	ldi	r24, 0xFF	; 255
     f86:	f2 de       	rcall	.-540    	; 0xd6c <xchg_spi>
     f88:	11 50       	subi	r17, 0x01	; 1
     f8a:	e1 f7       	brne	.-8      	; 0xf84 <disk_initialize+0x40>

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
     f8c:	40 e0       	ldi	r20, 0x00	; 0
     f8e:	50 e0       	ldi	r21, 0x00	; 0
     f90:	ba 01       	movw	r22, r20
     f92:	80 e0       	ldi	r24, 0x00	; 0
     f94:	43 df       	rcall	.-378    	; 0xe1c <send_cmd>
     f96:	81 30       	cpi	r24, 0x01	; 1
     f98:	09 f0       	breq	.+2      	; 0xf9c <disk_initialize+0x58>
     f9a:	84 c0       	rjmp	.+264    	; 0x10a4 <disk_initialize+0x160>
		Timer1 = 100;						/* Initialization timeout of 1000 msec */
     f9c:	84 e6       	ldi	r24, 0x64	; 100
     f9e:	80 93 24 04 	sts	0x0424, r24
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
     fa2:	4a ea       	ldi	r20, 0xAA	; 170
     fa4:	51 e0       	ldi	r21, 0x01	; 1
     fa6:	60 e0       	ldi	r22, 0x00	; 0
     fa8:	70 e0       	ldi	r23, 0x00	; 0
     faa:	88 e0       	ldi	r24, 0x08	; 8
     fac:	37 df       	rcall	.-402    	; 0xe1c <send_cmd>
     fae:	81 30       	cpi	r24, 0x01	; 1
     fb0:	09 f0       	breq	.+2      	; 0xfb4 <disk_initialize+0x70>
     fb2:	3f c0       	rjmp	.+126    	; 0x1032 <disk_initialize+0xee>
     fb4:	ce 01       	movw	r24, r28
     fb6:	01 96       	adiw	r24, 0x01	; 1
     fb8:	6c 01       	movw	r12, r24
     fba:	7e 01       	movw	r14, r28
     fbc:	95 e0       	ldi	r25, 0x05	; 5
     fbe:	e9 0e       	add	r14, r25
     fc0:	f1 1c       	adc	r15, r1
     fc2:	86 01       	movw	r16, r12
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);		/* Get trailing return value of R7 resp */
     fc4:	8f ef       	ldi	r24, 0xFF	; 255
     fc6:	d2 de       	rcall	.-604    	; 0xd6c <xchg_spi>
     fc8:	f8 01       	movw	r30, r16
     fca:	81 93       	st	Z+, r24
     fcc:	8f 01       	movw	r16, r30
     fce:	ee 15       	cp	r30, r14
     fd0:	ff 05       	cpc	r31, r15
     fd2:	c1 f7       	brne	.-16     	; 0xfc4 <disk_initialize+0x80>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
     fd4:	8b 81       	ldd	r24, Y+3	; 0x03
     fd6:	81 30       	cpi	r24, 0x01	; 1
     fd8:	09 f0       	breq	.+2      	; 0xfdc <disk_initialize+0x98>
     fda:	64 c0       	rjmp	.+200    	; 0x10a4 <disk_initialize+0x160>
     fdc:	8c 81       	ldd	r24, Y+4	; 0x04
     fde:	8a 3a       	cpi	r24, 0xAA	; 170
     fe0:	09 f0       	breq	.+2      	; 0xfe4 <disk_initialize+0xa0>
     fe2:	60 c0       	rjmp	.+192    	; 0x10a4 <disk_initialize+0x160>
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
     fe4:	80 91 24 04 	lds	r24, 0x0424
     fe8:	88 23       	and	r24, r24
     fea:	41 f0       	breq	.+16     	; 0xffc <disk_initialize+0xb8>
     fec:	40 e0       	ldi	r20, 0x00	; 0
     fee:	50 e0       	ldi	r21, 0x00	; 0
     ff0:	60 e0       	ldi	r22, 0x00	; 0
     ff2:	70 e4       	ldi	r23, 0x40	; 64
     ff4:	89 ea       	ldi	r24, 0xA9	; 169
     ff6:	12 df       	rcall	.-476    	; 0xe1c <send_cmd>
     ff8:	81 11       	cpse	r24, r1
     ffa:	f4 cf       	rjmp	.-24     	; 0xfe4 <disk_initialize+0xa0>
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
     ffc:	80 91 24 04 	lds	r24, 0x0424
    1000:	88 23       	and	r24, r24
    1002:	09 f4       	brne	.+2      	; 0x1006 <disk_initialize+0xc2>
    1004:	4f c0       	rjmp	.+158    	; 0x10a4 <disk_initialize+0x160>
    1006:	40 e0       	ldi	r20, 0x00	; 0
    1008:	50 e0       	ldi	r21, 0x00	; 0
    100a:	ba 01       	movw	r22, r20
    100c:	8a e3       	ldi	r24, 0x3A	; 58
    100e:	06 df       	rcall	.-500    	; 0xe1c <send_cmd>
    1010:	81 11       	cpse	r24, r1
    1012:	48 c0       	rjmp	.+144    	; 0x10a4 <disk_initialize+0x160>
    1014:	76 01       	movw	r14, r12
    1016:	14 e0       	ldi	r17, 0x04	; 4
    1018:	1c 0d       	add	r17, r12
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
    101a:	8f ef       	ldi	r24, 0xFF	; 255
    101c:	a7 de       	rcall	.-690    	; 0xd6c <xchg_spi>
    101e:	f7 01       	movw	r30, r14
    1020:	81 93       	st	Z+, r24
    1022:	7f 01       	movw	r14, r30
    1024:	1e 13       	cpse	r17, r30
    1026:	f9 cf       	rjmp	.-14     	; 0x101a <disk_initialize+0xd6>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
    1028:	89 81       	ldd	r24, Y+1	; 0x01
    102a:	86 fd       	sbrc	r24, 6
    102c:	36 c0       	rjmp	.+108    	; 0x109a <disk_initialize+0x156>
    102e:	84 e0       	ldi	r24, 0x04	; 4
    1030:	35 c0       	rjmp	.+106    	; 0x109c <disk_initialize+0x158>
				}
			}
		} else {							/* SDv1 or MMCv3 */
			if (send_cmd(ACMD41, 0) <= 1) 	{
    1032:	40 e0       	ldi	r20, 0x00	; 0
    1034:	50 e0       	ldi	r21, 0x00	; 0
    1036:	ba 01       	movw	r22, r20
    1038:	89 ea       	ldi	r24, 0xA9	; 169
    103a:	f0 de       	rcall	.-544    	; 0xe1c <send_cmd>
    103c:	82 30       	cpi	r24, 0x02	; 2
    103e:	18 f0       	brcs	.+6      	; 0x1046 <disk_initialize+0x102>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
    1040:	01 e0       	ldi	r16, 0x01	; 1
    1042:	11 e0       	ldi	r17, 0x01	; 1
    1044:	02 c0       	rjmp	.+4      	; 0x104a <disk_initialize+0x106>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
				}
			}
		} else {							/* SDv1 or MMCv3 */
			if (send_cmd(ACMD41, 0) <= 1) 	{
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
    1046:	02 e0       	ldi	r16, 0x02	; 2
    1048:	19 ea       	ldi	r17, 0xA9	; 169
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
			}
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
    104a:	90 91 24 04 	lds	r25, 0x0424
    104e:	99 23       	and	r25, r25
    1050:	39 f0       	breq	.+14     	; 0x1060 <disk_initialize+0x11c>
    1052:	40 e0       	ldi	r20, 0x00	; 0
    1054:	50 e0       	ldi	r21, 0x00	; 0
    1056:	ba 01       	movw	r22, r20
    1058:	81 2f       	mov	r24, r17
    105a:	e0 de       	rcall	.-576    	; 0xe1c <send_cmd>
    105c:	81 11       	cpse	r24, r1
    105e:	f5 cf       	rjmp	.-22     	; 0x104a <disk_initialize+0x106>
			if (!Timer1 || send_cmd(CMD16, CLUSTERSIZE) != 0)	/* Set R/W block length to 512 */
    1060:	80 91 24 04 	lds	r24, 0x0424
    1064:	88 23       	and	r24, r24
    1066:	f1 f0       	breq	.+60     	; 0x10a4 <disk_initialize+0x160>
    1068:	40 e0       	ldi	r20, 0x00	; 0
    106a:	52 e0       	ldi	r21, 0x02	; 2
    106c:	60 e0       	ldi	r22, 0x00	; 0
    106e:	70 e0       	ldi	r23, 0x00	; 0
    1070:	80 e1       	ldi	r24, 0x10	; 16
    1072:	d4 de       	rcall	.-600    	; 0xe1c <send_cmd>
    1074:	81 11       	cpse	r24, r1
    1076:	16 c0       	rjmp	.+44     	; 0x10a4 <disk_initialize+0x160>
				ty = 0;
		}
	}
	CardType = ty;
    1078:	00 93 22 04 	sts	0x0422, r16
	deselect();
    107c:	7d de       	rcall	.-774    	; 0xd78 <deselect>

	if (ty) {			/* Initialization succeded */
    107e:	00 23       	and	r16, r16
    1080:	31 f0       	breq	.+12     	; 0x108e <disk_initialize+0x14a>
		Stat &= ~STA_NOINIT;		/* Clear STA_NOINIT */
    1082:	80 91 06 01 	lds	r24, 0x0106
    1086:	8e 7f       	andi	r24, 0xFE	; 254
    1088:	80 93 06 01 	sts	0x0106, r24
    108c:	01 c0       	rjmp	.+2      	; 0x1090 <disk_initialize+0x14c>
//		FCLK_FAST();
	} else {			/* Initialization failed */
		power_off();
    108e:	68 de       	rcall	.-816    	; 0xd60 <power_off>
	}

	return Stat;
    1090:	80 91 06 01 	lds	r24, 0x0106
    1094:	0b c0       	rjmp	.+22     	; 0x10ac <disk_initialize+0x168>
)
{
	BYTE n, cmd, ty, ocr[4];


	if (pdrv) return STA_NOINIT;		/* Supports only single drive */
    1096:	81 e0       	ldi	r24, 0x01	; 1
    1098:	09 c0       	rjmp	.+18     	; 0x10ac <disk_initialize+0x168>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);		/* Get trailing return value of R7 resp */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
    109a:	8c e0       	ldi	r24, 0x0C	; 12
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
			if (!Timer1 || send_cmd(CMD16, CLUSTERSIZE) != 0)	/* Set R/W block length to 512 */
				ty = 0;
		}
	}
	CardType = ty;
    109c:	80 93 22 04 	sts	0x0422, r24
	deselect();
    10a0:	6b de       	rcall	.-810    	; 0xd78 <deselect>
    10a2:	ef cf       	rjmp	.-34     	; 0x1082 <disk_initialize+0x13e>
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
			if (!Timer1 || send_cmd(CMD16, CLUSTERSIZE) != 0)	/* Set R/W block length to 512 */
				ty = 0;
		}
	}
	CardType = ty;
    10a4:	10 92 22 04 	sts	0x0422, r1
	deselect();
    10a8:	67 de       	rcall	.-818    	; 0xd78 <deselect>
    10aa:	f1 cf       	rjmp	.-30     	; 0x108e <disk_initialize+0x14a>
	} else {			/* Initialization failed */
		power_off();
	}

	return Stat;
}
    10ac:	0f 90       	pop	r0
    10ae:	0f 90       	pop	r0
    10b0:	0f 90       	pop	r0
    10b2:	0f 90       	pop	r0
    10b4:	df 91       	pop	r29
    10b6:	cf 91       	pop	r28
    10b8:	1f 91       	pop	r17
    10ba:	0f 91       	pop	r16
    10bc:	ff 90       	pop	r15
    10be:	ef 90       	pop	r14
    10c0:	df 90       	pop	r13
    10c2:	cf 90       	pop	r12
    10c4:	08 95       	ret

000010c6 <disk_status>:

DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber (0) */
)
{
	if (pdrv) return STA_NOINIT;	/* Supports only single drive */
    10c6:	81 11       	cpse	r24, r1
    10c8:	03 c0       	rjmp	.+6      	; 0x10d0 <disk_status+0xa>
	return Stat;
    10ca:	80 91 06 01 	lds	r24, 0x0106
    10ce:	08 95       	ret

DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber (0) */
)
{
	if (pdrv) return STA_NOINIT;	/* Supports only single drive */
    10d0:	81 e0       	ldi	r24, 0x01	; 1
	return Stat;
}
    10d2:	08 95       	ret

000010d4 <disk_read>:
	BYTE pdrv,			/* Physical drive nmuber (0) */
	BYTE *buff,			/* Pointer to the data buffer to store read data */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
    10d4:	ff 92       	push	r15
    10d6:	0f 93       	push	r16
    10d8:	1f 93       	push	r17
    10da:	cf 93       	push	r28
    10dc:	df 93       	push	r29
    10de:	eb 01       	movw	r28, r22
	BYTE cmd;


	if (pdrv || !count) return RES_PARERR;
    10e0:	81 11       	cpse	r24, r1
    10e2:	3f c0       	rjmp	.+126    	; 0x1162 <disk_read+0x8e>
    10e4:	01 15       	cp	r16, r1
    10e6:	11 05       	cpc	r17, r1
    10e8:	09 f4       	brne	.+2      	; 0x10ec <disk_read+0x18>
    10ea:	3d c0       	rjmp	.+122    	; 0x1166 <disk_read+0x92>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    10ec:	80 91 06 01 	lds	r24, 0x0106
    10f0:	80 fd       	sbrc	r24, 0
    10f2:	3b c0       	rjmp	.+118    	; 0x116a <disk_read+0x96>

	if (!(CardType & CT_BLOCK)) sector *= CLUSTERSIZE;	/* Convert to byte address if needed */
    10f4:	80 91 22 04 	lds	r24, 0x0422
    10f8:	83 fd       	sbrc	r24, 3
    10fa:	09 c0       	rjmp	.+18     	; 0x110e <disk_read+0x3a>
    10fc:	01 2e       	mov	r0, r17
    10fe:	19 e0       	ldi	r17, 0x09	; 9
    1100:	22 0f       	add	r18, r18
    1102:	33 1f       	adc	r19, r19
    1104:	44 1f       	adc	r20, r20
    1106:	55 1f       	adc	r21, r21
    1108:	1a 95       	dec	r17
    110a:	d1 f7       	brne	.-12     	; 0x1100 <disk_read+0x2c>
    110c:	10 2d       	mov	r17, r0

	cmd = count > 1 ? CMD18 : CMD17;			/*  READ_MULTIPLE_BLOCK : READ_SINGLE_BLOCK */
    110e:	02 30       	cpi	r16, 0x02	; 2
    1110:	11 05       	cpc	r17, r1
    1112:	28 f4       	brcc	.+10     	; 0x111e <disk_read+0x4a>
    1114:	0f 2e       	mov	r0, r31
    1116:	f1 e1       	ldi	r31, 0x11	; 17
    1118:	ff 2e       	mov	r15, r31
    111a:	f0 2d       	mov	r31, r0
    111c:	04 c0       	rjmp	.+8      	; 0x1126 <disk_read+0x52>
    111e:	0f 2e       	mov	r0, r31
    1120:	f2 e1       	ldi	r31, 0x12	; 18
    1122:	ff 2e       	mov	r15, r31
    1124:	f0 2d       	mov	r31, r0
	if (send_cmd(cmd, sector) == 0) {
    1126:	ba 01       	movw	r22, r20
    1128:	a9 01       	movw	r20, r18
    112a:	8f 2d       	mov	r24, r15
    112c:	77 de       	rcall	.-786    	; 0xe1c <send_cmd>
    112e:	81 11       	cpse	r24, r1
    1130:	12 c0       	rjmp	.+36     	; 0x1156 <disk_read+0x82>
		do {
			if (!rcvr_datablock(buff, CLUSTERSIZE)) break;
    1132:	60 e0       	ldi	r22, 0x00	; 0
    1134:	72 e0       	ldi	r23, 0x02	; 2
    1136:	ce 01       	movw	r24, r28
    1138:	38 de       	rcall	.-912    	; 0xdaa <rcvr_datablock>
    113a:	89 2b       	or	r24, r25
    113c:	21 f0       	breq	.+8      	; 0x1146 <disk_read+0x72>
			buff += CLUSTERSIZE;
    113e:	de 5f       	subi	r29, 0xFE	; 254
		} while (--count);
    1140:	01 50       	subi	r16, 0x01	; 1
    1142:	11 09       	sbc	r17, r1
    1144:	b1 f7       	brne	.-20     	; 0x1132 <disk_read+0x5e>
		if (cmd == CMD18) send_cmd(CMD12, 0);	/* STOP_TRANSMISSION */
    1146:	82 e1       	ldi	r24, 0x12	; 18
    1148:	f8 12       	cpse	r15, r24
    114a:	05 c0       	rjmp	.+10     	; 0x1156 <disk_read+0x82>
    114c:	40 e0       	ldi	r20, 0x00	; 0
    114e:	50 e0       	ldi	r21, 0x00	; 0
    1150:	ba 01       	movw	r22, r20
    1152:	8c e0       	ldi	r24, 0x0C	; 12
    1154:	63 de       	rcall	.-826    	; 0xe1c <send_cmd>
	}
	deselect();
    1156:	10 de       	rcall	.-992    	; 0xd78 <deselect>

	return count ? RES_ERROR : RES_OK;
    1158:	81 e0       	ldi	r24, 0x01	; 1
    115a:	01 2b       	or	r16, r17
    115c:	39 f4       	brne	.+14     	; 0x116c <disk_read+0x98>
    115e:	80 e0       	ldi	r24, 0x00	; 0
    1160:	05 c0       	rjmp	.+10     	; 0x116c <disk_read+0x98>
)
{
	BYTE cmd;


	if (pdrv || !count) return RES_PARERR;
    1162:	84 e0       	ldi	r24, 0x04	; 4
    1164:	03 c0       	rjmp	.+6      	; 0x116c <disk_read+0x98>
    1166:	84 e0       	ldi	r24, 0x04	; 4
    1168:	01 c0       	rjmp	.+2      	; 0x116c <disk_read+0x98>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    116a:	83 e0       	ldi	r24, 0x03	; 3
		if (cmd == CMD18) send_cmd(CMD12, 0);	/* STOP_TRANSMISSION */
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
}
    116c:	df 91       	pop	r29
    116e:	cf 91       	pop	r28
    1170:	1f 91       	pop	r17
    1172:	0f 91       	pop	r16
    1174:	ff 90       	pop	r15
    1176:	08 95       	ret

00001178 <disk_write>:
	BYTE pdrv,			/* Physical drive nmuber (0) */
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
    1178:	cf 92       	push	r12
    117a:	df 92       	push	r13
    117c:	ef 92       	push	r14
    117e:	ff 92       	push	r15
    1180:	0f 93       	push	r16
    1182:	1f 93       	push	r17
    1184:	cf 93       	push	r28
    1186:	df 93       	push	r29
    1188:	eb 01       	movw	r28, r22
    118a:	69 01       	movw	r12, r18
    118c:	7a 01       	movw	r14, r20
	if (pdrv || !count) return RES_PARERR;
    118e:	81 11       	cpse	r24, r1
    1190:	51 c0       	rjmp	.+162    	; 0x1234 <disk_write+0xbc>
    1192:	01 15       	cp	r16, r1
    1194:	11 05       	cpc	r17, r1
    1196:	09 f4       	brne	.+2      	; 0x119a <disk_write+0x22>
    1198:	4f c0       	rjmp	.+158    	; 0x1238 <disk_write+0xc0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    119a:	80 91 06 01 	lds	r24, 0x0106
    119e:	80 fd       	sbrc	r24, 0
    11a0:	4d c0       	rjmp	.+154    	; 0x123c <disk_write+0xc4>
	if (Stat & STA_PROTECT) return RES_WRPRT;
    11a2:	80 91 06 01 	lds	r24, 0x0106
    11a6:	82 fd       	sbrc	r24, 2
    11a8:	4b c0       	rjmp	.+150    	; 0x1240 <disk_write+0xc8>

	if (!(CardType & CT_BLOCK)) sector *= CLUSTERSIZE;	/* Convert to byte address if needed */
    11aa:	80 91 22 04 	lds	r24, 0x0422
    11ae:	83 fd       	sbrc	r24, 3
    11b0:	09 c0       	rjmp	.+18     	; 0x11c4 <disk_write+0x4c>
    11b2:	0b 2e       	mov	r0, r27
    11b4:	b9 e0       	ldi	r27, 0x09	; 9
    11b6:	cc 0c       	add	r12, r12
    11b8:	dd 1c       	adc	r13, r13
    11ba:	ee 1c       	adc	r14, r14
    11bc:	ff 1c       	adc	r15, r15
    11be:	ba 95       	dec	r27
    11c0:	d1 f7       	brne	.-12     	; 0x11b6 <disk_write+0x3e>
    11c2:	b0 2d       	mov	r27, r0

	if (count == 1) {	/* Single block write */
    11c4:	01 30       	cpi	r16, 0x01	; 1
    11c6:	11 05       	cpc	r17, r1
    11c8:	89 f4       	brne	.+34     	; 0x11ec <disk_write+0x74>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
    11ca:	b7 01       	movw	r22, r14
    11cc:	a6 01       	movw	r20, r12
    11ce:	88 e1       	ldi	r24, 0x18	; 24
    11d0:	25 de       	rcall	.-950    	; 0xe1c <send_cmd>
    11d2:	81 11       	cpse	r24, r1
    11d4:	29 c0       	rjmp	.+82     	; 0x1228 <disk_write+0xb0>
			&& xmit_datablock(buff, 0xFE))
    11d6:	6e ef       	ldi	r22, 0xFE	; 254
    11d8:	ce 01       	movw	r24, r28
    11da:	76 de       	rcall	.-788    	; 0xec8 <xmit_datablock>
    11dc:	31 e0       	ldi	r19, 0x01	; 1
    11de:	20 e0       	ldi	r18, 0x00	; 0
    11e0:	89 2b       	or	r24, r25
    11e2:	09 f0       	breq	.+2      	; 0x11e6 <disk_write+0x6e>
    11e4:	30 e0       	ldi	r19, 0x00	; 0
    11e6:	03 2f       	mov	r16, r19
    11e8:	12 2f       	mov	r17, r18
    11ea:	1e c0       	rjmp	.+60     	; 0x1228 <disk_write+0xb0>
			count = 0;
	}
	else {				/* Multiple block write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
    11ec:	86 70       	andi	r24, 0x06	; 6
    11ee:	29 f0       	breq	.+10     	; 0x11fa <disk_write+0x82>
    11f0:	a8 01       	movw	r20, r16
    11f2:	60 e0       	ldi	r22, 0x00	; 0
    11f4:	70 e0       	ldi	r23, 0x00	; 0
    11f6:	87 e9       	ldi	r24, 0x97	; 151
    11f8:	11 de       	rcall	.-990    	; 0xe1c <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
    11fa:	b7 01       	movw	r22, r14
    11fc:	a6 01       	movw	r20, r12
    11fe:	89 e1       	ldi	r24, 0x19	; 25
    1200:	0d de       	rcall	.-998    	; 0xe1c <send_cmd>
    1202:	81 11       	cpse	r24, r1
    1204:	11 c0       	rjmp	.+34     	; 0x1228 <disk_write+0xb0>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
    1206:	6c ef       	ldi	r22, 0xFC	; 252
    1208:	ce 01       	movw	r24, r28
    120a:	5e de       	rcall	.-836    	; 0xec8 <xmit_datablock>
    120c:	89 2b       	or	r24, r25
    120e:	21 f0       	breq	.+8      	; 0x1218 <disk_write+0xa0>
				buff += CLUSTERSIZE;
    1210:	de 5f       	subi	r29, 0xFE	; 254
			} while (--count);
    1212:	01 50       	subi	r16, 0x01	; 1
    1214:	11 09       	sbc	r17, r1
    1216:	b9 f7       	brne	.-18     	; 0x1206 <disk_write+0x8e>
			if (!xmit_datablock(0, 0xFD))	/* STOP_TRAN token */
    1218:	6d ef       	ldi	r22, 0xFD	; 253
    121a:	80 e0       	ldi	r24, 0x00	; 0
    121c:	90 e0       	ldi	r25, 0x00	; 0
    121e:	54 de       	rcall	.-856    	; 0xec8 <xmit_datablock>
    1220:	89 2b       	or	r24, r25
    1222:	11 f4       	brne	.+4      	; 0x1228 <disk_write+0xb0>
				count = 1;
    1224:	01 e0       	ldi	r16, 0x01	; 1
    1226:	10 e0       	ldi	r17, 0x00	; 0
		}
	}
	deselect();
    1228:	a7 dd       	rcall	.-1202   	; 0xd78 <deselect>

	return count ? RES_ERROR : RES_OK;
    122a:	81 e0       	ldi	r24, 0x01	; 1
    122c:	01 2b       	or	r16, r17
    122e:	49 f4       	brne	.+18     	; 0x1242 <disk_write+0xca>
    1230:	80 e0       	ldi	r24, 0x00	; 0
    1232:	07 c0       	rjmp	.+14     	; 0x1242 <disk_write+0xca>
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
	if (pdrv || !count) return RES_PARERR;
    1234:	84 e0       	ldi	r24, 0x04	; 4
    1236:	05 c0       	rjmp	.+10     	; 0x1242 <disk_write+0xca>
    1238:	84 e0       	ldi	r24, 0x04	; 4
    123a:	03 c0       	rjmp	.+6      	; 0x1242 <disk_write+0xca>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    123c:	83 e0       	ldi	r24, 0x03	; 3
    123e:	01 c0       	rjmp	.+2      	; 0x1242 <disk_write+0xca>
	if (Stat & STA_PROTECT) return RES_WRPRT;
    1240:	82 e0       	ldi	r24, 0x02	; 2
		}
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
}
    1242:	df 91       	pop	r29
    1244:	cf 91       	pop	r28
    1246:	1f 91       	pop	r17
    1248:	0f 91       	pop	r16
    124a:	ff 90       	pop	r15
    124c:	ef 90       	pop	r14
    124e:	df 90       	pop	r13
    1250:	cf 90       	pop	r12
    1252:	08 95       	ret

00001254 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
    1254:	ef 92       	push	r14
    1256:	ff 92       	push	r15
    1258:	0f 93       	push	r16
    125a:	1f 93       	push	r17
    125c:	cf 93       	push	r28
    125e:	df 93       	push	r29
    1260:	cd b7       	in	r28, 0x3d	; 61
    1262:	de b7       	in	r29, 0x3e	; 62
    1264:	60 97       	sbiw	r28, 0x10	; 16
    1266:	0f b6       	in	r0, 0x3f	; 63
    1268:	f8 94       	cli
    126a:	de bf       	out	0x3e, r29	; 62
    126c:	0f be       	out	0x3f, r0	; 63
    126e:	cd bf       	out	0x3d, r28	; 61
	DRESULT res;
	BYTE n, csd[16], *ptr = buff;
	DWORD csize;


	if (pdrv) return RES_PARERR;
    1270:	81 11       	cpse	r24, r1
    1272:	7c c1       	rjmp	.+760    	; 0x156c <disk_ioctl+0x318>

	res = RES_ERROR;

	if (Stat & STA_NOINIT) return RES_NOTRDY;
    1274:	80 91 06 01 	lds	r24, 0x0106
    1278:	80 fd       	sbrc	r24, 0
    127a:	7a c1       	rjmp	.+756    	; 0x1570 <disk_ioctl+0x31c>
    127c:	7a 01       	movw	r14, r20

	switch (cmd) {
    127e:	06 2f       	mov	r16, r22
    1280:	10 e0       	ldi	r17, 0x00	; 0
    1282:	07 33       	cpi	r16, 0x37	; 55
    1284:	11 05       	cpc	r17, r1
    1286:	08 f0       	brcs	.+2      	; 0x128a <disk_ioctl+0x36>
    1288:	59 c1       	rjmp	.+690    	; 0x153c <disk_ioctl+0x2e8>
    128a:	f8 01       	movw	r30, r16
    128c:	ea 5b       	subi	r30, 0xBA	; 186
    128e:	ff 4f       	sbci	r31, 0xFF	; 255
    1290:	0c 94 ec 45 	jmp	0x8bd8	; 0x8bd8 <__tablejump2__>
	case CTRL_SYNC :		/* Make sure that no pending write process. Do not remove this or written sector might not left updated. */
		if (select()) res = RES_OK;
    1294:	75 dd       	rcall	.-1302   	; 0xd80 <select>
    1296:	11 e0       	ldi	r17, 0x01	; 1
    1298:	89 2b       	or	r24, r25
    129a:	09 f4       	brne	.+2      	; 0x129e <disk_ioctl+0x4a>
    129c:	64 c1       	rjmp	.+712    	; 0x1566 <disk_ioctl+0x312>
    129e:	10 e0       	ldi	r17, 0x00	; 0
    12a0:	62 c1       	rjmp	.+708    	; 0x1566 <disk_ioctl+0x312>
		break;

	case GET_SECTOR_COUNT :	/* Get number of sectors on the disk (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
    12a2:	40 e0       	ldi	r20, 0x00	; 0
    12a4:	50 e0       	ldi	r21, 0x00	; 0
    12a6:	ba 01       	movw	r22, r20
    12a8:	89 e0       	ldi	r24, 0x09	; 9
    12aa:	b8 dd       	rcall	.-1168   	; 0xe1c <send_cmd>
    12ac:	81 11       	cpse	r24, r1
    12ae:	48 c1       	rjmp	.+656    	; 0x1540 <disk_ioctl+0x2ec>
    12b0:	60 e1       	ldi	r22, 0x10	; 16
    12b2:	70 e0       	ldi	r23, 0x00	; 0
    12b4:	ce 01       	movw	r24, r28
    12b6:	01 96       	adiw	r24, 0x01	; 1
    12b8:	78 dd       	rcall	.-1296   	; 0xdaa <rcvr_datablock>
    12ba:	89 2b       	or	r24, r25
    12bc:	09 f4       	brne	.+2      	; 0x12c0 <disk_ioctl+0x6c>
    12be:	42 c1       	rjmp	.+644    	; 0x1544 <disk_ioctl+0x2f0>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
    12c0:	89 81       	ldd	r24, Y+1	; 0x01
    12c2:	82 95       	swap	r24
    12c4:	86 95       	lsr	r24
    12c6:	86 95       	lsr	r24
    12c8:	83 70       	andi	r24, 0x03	; 3
    12ca:	81 30       	cpi	r24, 0x01	; 1
    12cc:	31 f5       	brne	.+76     	; 0x131a <disk_ioctl+0xc6>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
    12ce:	88 85       	ldd	r24, Y+8	; 0x08
    12d0:	8f 73       	andi	r24, 0x3F	; 63
    12d2:	90 e0       	ldi	r25, 0x00	; 0
    12d4:	a0 e0       	ldi	r26, 0x00	; 0
    12d6:	b0 e0       	ldi	r27, 0x00	; 0
    12d8:	dc 01       	movw	r26, r24
    12da:	99 27       	eor	r25, r25
    12dc:	88 27       	eor	r24, r24
    12de:	01 96       	adiw	r24, 0x01	; 1
    12e0:	a1 1d       	adc	r26, r1
    12e2:	b1 1d       	adc	r27, r1
    12e4:	29 85       	ldd	r18, Y+9	; 0x09
    12e6:	30 e0       	ldi	r19, 0x00	; 0
    12e8:	32 2f       	mov	r19, r18
    12ea:	22 27       	eor	r18, r18
    12ec:	4a 85       	ldd	r20, Y+10	; 0x0a
    12ee:	24 0f       	add	r18, r20
    12f0:	31 1d       	adc	r19, r1
    12f2:	82 0f       	add	r24, r18
    12f4:	93 1f       	adc	r25, r19
    12f6:	a1 1d       	adc	r26, r1
    12f8:	b1 1d       	adc	r27, r1
				*(DWORD*)buff = csize << 10;
    12fa:	07 2e       	mov	r0, r23
    12fc:	7a e0       	ldi	r23, 0x0A	; 10
    12fe:	88 0f       	add	r24, r24
    1300:	99 1f       	adc	r25, r25
    1302:	aa 1f       	adc	r26, r26
    1304:	bb 1f       	adc	r27, r27
    1306:	7a 95       	dec	r23
    1308:	d1 f7       	brne	.-12     	; 0x12fe <disk_ioctl+0xaa>
    130a:	70 2d       	mov	r23, r0
    130c:	f7 01       	movw	r30, r14
    130e:	80 83       	st	Z, r24
    1310:	91 83       	std	Z+1, r25	; 0x01
    1312:	a2 83       	std	Z+2, r26	; 0x02
    1314:	b3 83       	std	Z+3, r27	; 0x03
			} else {					/* SDC ver 1.XX or MMC*/
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
				*(DWORD*)buff = csize << (n - 9);
			}
			res = RES_OK;
    1316:	10 e0       	ldi	r17, 0x00	; 0
    1318:	26 c1       	rjmp	.+588    	; 0x1566 <disk_ioctl+0x312>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
				*(DWORD*)buff = csize << 10;
			} else {					/* SDC ver 1.XX or MMC*/
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
    131a:	89 85       	ldd	r24, Y+9	; 0x09
    131c:	82 95       	swap	r24
    131e:	86 95       	lsr	r24
    1320:	86 95       	lsr	r24
    1322:	83 70       	andi	r24, 0x03	; 3
    1324:	28 85       	ldd	r18, Y+8	; 0x08
    1326:	90 e0       	ldi	r25, 0x00	; 0
    1328:	f4 e0       	ldi	r31, 0x04	; 4
    132a:	2f 9f       	mul	r18, r31
    132c:	80 0d       	add	r24, r0
    132e:	91 1d       	adc	r25, r1
    1330:	11 24       	eor	r1, r1
    1332:	9c 01       	movw	r18, r24
    1334:	2f 5f       	subi	r18, 0xFF	; 255
    1336:	3f 4f       	sbci	r19, 0xFF	; 255
    1338:	8f 81       	ldd	r24, Y+7	; 0x07
    133a:	83 70       	andi	r24, 0x03	; 3
    133c:	90 e0       	ldi	r25, 0x00	; 0
    133e:	98 2f       	mov	r25, r24
    1340:	88 27       	eor	r24, r24
    1342:	99 0f       	add	r25, r25
    1344:	99 0f       	add	r25, r25
    1346:	82 0f       	add	r24, r18
    1348:	93 1f       	adc	r25, r19
    134a:	a0 e0       	ldi	r26, 0x00	; 0
    134c:	b0 e0       	ldi	r27, 0x00	; 0
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
				*(DWORD*)buff = csize << 10;
			} else {					/* SDC ver 1.XX or MMC*/
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
    134e:	3e 81       	ldd	r19, Y+6	; 0x06
    1350:	3f 70       	andi	r19, 0x0F	; 15
    1352:	2b 85       	ldd	r18, Y+11	; 0x0b
    1354:	22 1f       	adc	r18, r18
    1356:	22 27       	eor	r18, r18
    1358:	22 1f       	adc	r18, r18
    135a:	32 0f       	add	r19, r18
    135c:	2a 85       	ldd	r18, Y+10	; 0x0a
    135e:	23 70       	andi	r18, 0x03	; 3
    1360:	22 0f       	add	r18, r18
    1362:	23 0f       	add	r18, r19
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
				*(DWORD*)buff = csize << (n - 9);
    1364:	27 50       	subi	r18, 0x07	; 7
    1366:	04 c0       	rjmp	.+8      	; 0x1370 <disk_ioctl+0x11c>
    1368:	88 0f       	add	r24, r24
    136a:	99 1f       	adc	r25, r25
    136c:	aa 1f       	adc	r26, r26
    136e:	bb 1f       	adc	r27, r27
    1370:	2a 95       	dec	r18
    1372:	d2 f7       	brpl	.-12     	; 0x1368 <disk_ioctl+0x114>
    1374:	f7 01       	movw	r30, r14
    1376:	80 83       	st	Z, r24
    1378:	91 83       	std	Z+1, r25	; 0x01
    137a:	a2 83       	std	Z+2, r26	; 0x02
    137c:	b3 83       	std	Z+3, r27	; 0x03
			}
			res = RES_OK;
    137e:	10 e0       	ldi	r17, 0x00	; 0
    1380:	f2 c0       	rjmp	.+484    	; 0x1566 <disk_ioctl+0x312>
		}
		break;

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDv2? */
    1382:	10 91 22 04 	lds	r17, 0x0422
    1386:	12 ff       	sbrs	r17, 2
    1388:	2a c0       	rjmp	.+84     	; 0x13de <disk_ioctl+0x18a>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
    138a:	40 e0       	ldi	r20, 0x00	; 0
    138c:	50 e0       	ldi	r21, 0x00	; 0
    138e:	ba 01       	movw	r22, r20
    1390:	8d e8       	ldi	r24, 0x8D	; 141
    1392:	44 dd       	rcall	.-1400   	; 0xe1c <send_cmd>
    1394:	81 11       	cpse	r24, r1
    1396:	d8 c0       	rjmp	.+432    	; 0x1548 <disk_ioctl+0x2f4>
				xchg_spi(0xFF);
    1398:	8f ef       	ldi	r24, 0xFF	; 255
    139a:	e8 dc       	rcall	.-1584   	; 0xd6c <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
    139c:	60 e1       	ldi	r22, 0x10	; 16
    139e:	70 e0       	ldi	r23, 0x00	; 0
    13a0:	ce 01       	movw	r24, r28
    13a2:	01 96       	adiw	r24, 0x01	; 1
    13a4:	02 dd       	rcall	.-1532   	; 0xdaa <rcvr_datablock>
    13a6:	89 2b       	or	r24, r25
    13a8:	09 f4       	brne	.+2      	; 0x13ac <disk_ioctl+0x158>
    13aa:	d0 c0       	rjmp	.+416    	; 0x154c <disk_ioctl+0x2f8>
    13ac:	10 e3       	ldi	r17, 0x30	; 48
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
    13ae:	8f ef       	ldi	r24, 0xFF	; 255
    13b0:	dd dc       	rcall	.-1606   	; 0xd6c <xchg_spi>
    13b2:	11 50       	subi	r17, 0x01	; 1
    13b4:	e1 f7       	brne	.-8      	; 0x13ae <disk_ioctl+0x15a>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
    13b6:	2b 85       	ldd	r18, Y+11	; 0x0b
    13b8:	22 95       	swap	r18
    13ba:	2f 70       	andi	r18, 0x0F	; 15
    13bc:	80 e1       	ldi	r24, 0x10	; 16
    13be:	90 e0       	ldi	r25, 0x00	; 0
    13c0:	a0 e0       	ldi	r26, 0x00	; 0
    13c2:	b0 e0       	ldi	r27, 0x00	; 0
    13c4:	04 c0       	rjmp	.+8      	; 0x13ce <disk_ioctl+0x17a>
    13c6:	88 0f       	add	r24, r24
    13c8:	99 1f       	adc	r25, r25
    13ca:	aa 1f       	adc	r26, r26
    13cc:	bb 1f       	adc	r27, r27
    13ce:	2a 95       	dec	r18
    13d0:	d2 f7       	brpl	.-12     	; 0x13c6 <disk_ioctl+0x172>
    13d2:	f7 01       	movw	r30, r14
    13d4:	80 83       	st	Z, r24
    13d6:	91 83       	std	Z+1, r25	; 0x01
    13d8:	a2 83       	std	Z+2, r26	; 0x02
    13da:	b3 83       	std	Z+3, r27	; 0x03
    13dc:	c4 c0       	rjmp	.+392    	; 0x1566 <disk_ioctl+0x312>
					res = RES_OK;
				}
			}
		} else {					/* SDv1 or MMCv3 */
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
    13de:	40 e0       	ldi	r20, 0x00	; 0
    13e0:	50 e0       	ldi	r21, 0x00	; 0
    13e2:	ba 01       	movw	r22, r20
    13e4:	89 e0       	ldi	r24, 0x09	; 9
    13e6:	1a dd       	rcall	.-1484   	; 0xe1c <send_cmd>
    13e8:	81 11       	cpse	r24, r1
    13ea:	b2 c0       	rjmp	.+356    	; 0x1550 <disk_ioctl+0x2fc>
    13ec:	60 e1       	ldi	r22, 0x10	; 16
    13ee:	70 e0       	ldi	r23, 0x00	; 0
    13f0:	ce 01       	movw	r24, r28
    13f2:	01 96       	adiw	r24, 0x01	; 1
    13f4:	da dc       	rcall	.-1612   	; 0xdaa <rcvr_datablock>
    13f6:	89 2b       	or	r24, r25
    13f8:	09 f4       	brne	.+2      	; 0x13fc <disk_ioctl+0x1a8>
    13fa:	ac c0       	rjmp	.+344    	; 0x1554 <disk_ioctl+0x300>
				if (CardType & CT_SD1) {	/* SDv1 */
    13fc:	11 ff       	sbrs	r17, 1
    13fe:	20 c0       	rjmp	.+64     	; 0x1440 <disk_ioctl+0x1ec>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
    1400:	8c 85       	ldd	r24, Y+12	; 0x0c
    1402:	88 1f       	adc	r24, r24
    1404:	88 27       	eor	r24, r24
    1406:	88 1f       	adc	r24, r24
    1408:	90 e0       	ldi	r25, 0x00	; 0
    140a:	01 96       	adiw	r24, 0x01	; 1
    140c:	2b 85       	ldd	r18, Y+11	; 0x0b
    140e:	2f 73       	andi	r18, 0x3F	; 63
    1410:	82 0f       	add	r24, r18
    1412:	91 1d       	adc	r25, r1
    1414:	82 0f       	add	r24, r18
    1416:	91 1d       	adc	r25, r1
    1418:	2e 85       	ldd	r18, Y+14	; 0x0e
    141a:	22 95       	swap	r18
    141c:	26 95       	lsr	r18
    141e:	26 95       	lsr	r18
    1420:	23 70       	andi	r18, 0x03	; 3
    1422:	21 50       	subi	r18, 0x01	; 1
    1424:	02 c0       	rjmp	.+4      	; 0x142a <disk_ioctl+0x1d6>
    1426:	88 0f       	add	r24, r24
    1428:	99 1f       	adc	r25, r25
    142a:	2a 95       	dec	r18
    142c:	e2 f7       	brpl	.-8      	; 0x1426 <disk_ioctl+0x1d2>
    142e:	a0 e0       	ldi	r26, 0x00	; 0
    1430:	b0 e0       	ldi	r27, 0x00	; 0
    1432:	f7 01       	movw	r30, r14
    1434:	80 83       	st	Z, r24
    1436:	91 83       	std	Z+1, r25	; 0x01
    1438:	a2 83       	std	Z+2, r26	; 0x02
    143a:	b3 83       	std	Z+3, r27	; 0x03
				} else {					/* MMCv3 */
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
    143c:	10 e0       	ldi	r17, 0x00	; 0
    143e:	93 c0       	rjmp	.+294    	; 0x1566 <disk_ioctl+0x312>
		} else {					/* SDv1 or MMCv3 */
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
				if (CardType & CT_SD1) {	/* SDv1 */
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
				} else {					/* MMCv3 */
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
    1440:	8c 85       	ldd	r24, Y+12	; 0x0c
    1442:	28 2f       	mov	r18, r24
    1444:	23 70       	andi	r18, 0x03	; 3
    1446:	82 95       	swap	r24
    1448:	86 95       	lsr	r24
    144a:	87 70       	andi	r24, 0x07	; 7
    144c:	90 e0       	ldi	r25, 0x00	; 0
    144e:	f8 e0       	ldi	r31, 0x08	; 8
    1450:	2f 9f       	mul	r18, r31
    1452:	80 0d       	add	r24, r0
    1454:	91 1d       	adc	r25, r1
    1456:	11 24       	eor	r1, r1
    1458:	01 96       	adiw	r24, 0x01	; 1
    145a:	2b 85       	ldd	r18, Y+11	; 0x0b
    145c:	2c 77       	andi	r18, 0x7C	; 124
    145e:	30 e0       	ldi	r19, 0x00	; 0
    1460:	35 95       	asr	r19
    1462:	27 95       	ror	r18
    1464:	35 95       	asr	r19
    1466:	27 95       	ror	r18
    1468:	2f 5f       	subi	r18, 0xFF	; 255
    146a:	3f 4f       	sbci	r19, 0xFF	; 255
    146c:	82 9f       	mul	r24, r18
    146e:	a0 01       	movw	r20, r0
    1470:	83 9f       	mul	r24, r19
    1472:	50 0d       	add	r21, r0
    1474:	92 9f       	mul	r25, r18
    1476:	50 0d       	add	r21, r0
    1478:	11 24       	eor	r1, r1
    147a:	ca 01       	movw	r24, r20
    147c:	a0 e0       	ldi	r26, 0x00	; 0
    147e:	b0 e0       	ldi	r27, 0x00	; 0
    1480:	f7 01       	movw	r30, r14
    1482:	80 83       	st	Z, r24
    1484:	91 83       	std	Z+1, r25	; 0x01
    1486:	a2 83       	std	Z+2, r26	; 0x02
    1488:	b3 83       	std	Z+3, r27	; 0x03
				}
				res = RES_OK;
    148a:	10 e0       	ldi	r17, 0x00	; 0
    148c:	6c c0       	rjmp	.+216    	; 0x1566 <disk_ioctl+0x312>
		break;

	/* Following commands are never used by FatFs module */

	case MMC_GET_TYPE :		/* Get card type flags (1 byte) */
		*ptr = CardType;
    148e:	80 91 22 04 	lds	r24, 0x0422
    1492:	fa 01       	movw	r30, r20
    1494:	80 83       	st	Z, r24
		res = RES_OK;
    1496:	10 e0       	ldi	r17, 0x00	; 0
		break;
    1498:	66 c0       	rjmp	.+204    	; 0x1566 <disk_ioctl+0x312>

	case MMC_GET_CSD :		/* Receive CSD as a data block (16 bytes) */
		if (send_cmd(CMD9, 0) == 0		/* READ_CSD */
    149a:	40 e0       	ldi	r20, 0x00	; 0
    149c:	50 e0       	ldi	r21, 0x00	; 0
    149e:	ba 01       	movw	r22, r20
    14a0:	89 e0       	ldi	r24, 0x09	; 9
    14a2:	bc dc       	rcall	.-1672   	; 0xe1c <send_cmd>
    14a4:	81 11       	cpse	r24, r1
    14a6:	58 c0       	rjmp	.+176    	; 0x1558 <disk_ioctl+0x304>
			&& rcvr_datablock(ptr, 16))
    14a8:	60 e1       	ldi	r22, 0x10	; 16
    14aa:	70 e0       	ldi	r23, 0x00	; 0
    14ac:	c7 01       	movw	r24, r14
    14ae:	7d dc       	rcall	.-1798   	; 0xdaa <rcvr_datablock>
    14b0:	11 e0       	ldi	r17, 0x01	; 1
    14b2:	89 2b       	or	r24, r25
    14b4:	09 f4       	brne	.+2      	; 0x14b8 <disk_ioctl+0x264>
    14b6:	57 c0       	rjmp	.+174    	; 0x1566 <disk_ioctl+0x312>
    14b8:	10 e0       	ldi	r17, 0x00	; 0
    14ba:	55 c0       	rjmp	.+170    	; 0x1566 <disk_ioctl+0x312>
			res = RES_OK;
		break;

	case MMC_GET_CID :		/* Receive CID as a data block (16 bytes) */
		if (send_cmd(CMD10, 0) == 0		/* READ_CID */
    14bc:	40 e0       	ldi	r20, 0x00	; 0
    14be:	50 e0       	ldi	r21, 0x00	; 0
    14c0:	ba 01       	movw	r22, r20
    14c2:	8a e0       	ldi	r24, 0x0A	; 10
    14c4:	ab dc       	rcall	.-1706   	; 0xe1c <send_cmd>
    14c6:	81 11       	cpse	r24, r1
    14c8:	49 c0       	rjmp	.+146    	; 0x155c <disk_ioctl+0x308>
			&& rcvr_datablock(ptr, 16))
    14ca:	60 e1       	ldi	r22, 0x10	; 16
    14cc:	70 e0       	ldi	r23, 0x00	; 0
    14ce:	c7 01       	movw	r24, r14
    14d0:	6c dc       	rcall	.-1832   	; 0xdaa <rcvr_datablock>
    14d2:	11 e0       	ldi	r17, 0x01	; 1
    14d4:	89 2b       	or	r24, r25
    14d6:	09 f4       	brne	.+2      	; 0x14da <disk_ioctl+0x286>
    14d8:	46 c0       	rjmp	.+140    	; 0x1566 <disk_ioctl+0x312>
    14da:	10 e0       	ldi	r17, 0x00	; 0
    14dc:	44 c0       	rjmp	.+136    	; 0x1566 <disk_ioctl+0x312>
			res = RES_OK;
		break;

	case MMC_GET_OCR :		/* Receive OCR as an R3 resp (4 bytes) */
		if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
    14de:	40 e0       	ldi	r20, 0x00	; 0
    14e0:	50 e0       	ldi	r21, 0x00	; 0
    14e2:	ba 01       	movw	r22, r20
    14e4:	8a e3       	ldi	r24, 0x3A	; 58
    14e6:	9a dc       	rcall	.-1740   	; 0xe1c <send_cmd>
    14e8:	81 11       	cpse	r24, r1
    14ea:	3a c0       	rjmp	.+116    	; 0x1560 <disk_ioctl+0x30c>
    14ec:	87 01       	movw	r16, r14
    14ee:	f4 e0       	ldi	r31, 0x04	; 4
    14f0:	ef 0e       	add	r14, r31
    14f2:	f1 1c       	adc	r15, r1
			for (n = 4; n; n--) *ptr++ = xchg_spi(0xFF);
    14f4:	8f ef       	ldi	r24, 0xFF	; 255
    14f6:	3a dc       	rcall	.-1932   	; 0xd6c <xchg_spi>
    14f8:	f8 01       	movw	r30, r16
    14fa:	81 93       	st	Z+, r24
    14fc:	8f 01       	movw	r16, r30
    14fe:	ee 15       	cp	r30, r14
    1500:	ff 05       	cpc	r31, r15
    1502:	c1 f7       	brne	.-16     	; 0x14f4 <disk_ioctl+0x2a0>
			res = RES_OK;
    1504:	10 e0       	ldi	r17, 0x00	; 0
    1506:	2f c0       	rjmp	.+94     	; 0x1566 <disk_ioctl+0x312>
		}
		break;

	case MMC_GET_SDSTAT :	/* Receive SD statsu as a data block (64 bytes) */
		if (send_cmd(ACMD13, 0) == 0) {	/* SD_STATUS */
    1508:	40 e0       	ldi	r20, 0x00	; 0
    150a:	50 e0       	ldi	r21, 0x00	; 0
    150c:	ba 01       	movw	r22, r20
    150e:	8d e8       	ldi	r24, 0x8D	; 141
    1510:	85 dc       	rcall	.-1782   	; 0xe1c <send_cmd>
    1512:	81 11       	cpse	r24, r1
    1514:	27 c0       	rjmp	.+78     	; 0x1564 <disk_ioctl+0x310>
			xchg_spi(0xFF);
    1516:	8f ef       	ldi	r24, 0xFF	; 255
    1518:	29 dc       	rcall	.-1966   	; 0xd6c <xchg_spi>
			if (rcvr_datablock(ptr, 64))
    151a:	60 e4       	ldi	r22, 0x40	; 64
    151c:	70 e0       	ldi	r23, 0x00	; 0
    151e:	c7 01       	movw	r24, r14
    1520:	44 dc       	rcall	.-1912   	; 0xdaa <rcvr_datablock>
    1522:	11 e0       	ldi	r17, 0x01	; 1
    1524:	89 2b       	or	r24, r25
    1526:	f9 f0       	breq	.+62     	; 0x1566 <disk_ioctl+0x312>
    1528:	10 e0       	ldi	r17, 0x00	; 0
    152a:	1d c0       	rjmp	.+58     	; 0x1566 <disk_ioctl+0x312>
				res = RES_OK;
		}
		break;

	case CTRL_POWER_OFF :	/* Power off */
		power_off();
    152c:	19 dc       	rcall	.-1998   	; 0xd60 <power_off>
		Stat |= STA_NOINIT;
    152e:	80 91 06 01 	lds	r24, 0x0106
    1532:	81 60       	ori	r24, 0x01	; 1
    1534:	80 93 06 01 	sts	0x0106, r24
		res = RES_OK;
    1538:	10 e0       	ldi	r17, 0x00	; 0
		break;
    153a:	15 c0       	rjmp	.+42     	; 0x1566 <disk_ioctl+0x312>

	default:
		res = RES_PARERR;
    153c:	14 e0       	ldi	r17, 0x04	; 4
    153e:	13 c0       	rjmp	.+38     	; 0x1566 <disk_ioctl+0x312>
	DWORD csize;


	if (pdrv) return RES_PARERR;

	res = RES_ERROR;
    1540:	11 e0       	ldi	r17, 0x01	; 1
    1542:	11 c0       	rjmp	.+34     	; 0x1566 <disk_ioctl+0x312>
    1544:	11 e0       	ldi	r17, 0x01	; 1
    1546:	0f c0       	rjmp	.+30     	; 0x1566 <disk_ioctl+0x312>
    1548:	11 e0       	ldi	r17, 0x01	; 1
    154a:	0d c0       	rjmp	.+26     	; 0x1566 <disk_ioctl+0x312>
    154c:	11 e0       	ldi	r17, 0x01	; 1
    154e:	0b c0       	rjmp	.+22     	; 0x1566 <disk_ioctl+0x312>
    1550:	11 e0       	ldi	r17, 0x01	; 1
    1552:	09 c0       	rjmp	.+18     	; 0x1566 <disk_ioctl+0x312>
    1554:	11 e0       	ldi	r17, 0x01	; 1
    1556:	07 c0       	rjmp	.+14     	; 0x1566 <disk_ioctl+0x312>
    1558:	11 e0       	ldi	r17, 0x01	; 1
    155a:	05 c0       	rjmp	.+10     	; 0x1566 <disk_ioctl+0x312>
    155c:	11 e0       	ldi	r17, 0x01	; 1
    155e:	03 c0       	rjmp	.+6      	; 0x1566 <disk_ioctl+0x312>
    1560:	11 e0       	ldi	r17, 0x01	; 1
    1562:	01 c0       	rjmp	.+2      	; 0x1566 <disk_ioctl+0x312>
    1564:	11 e0       	ldi	r17, 0x01	; 1

	default:
		res = RES_PARERR;
	}

	deselect();
    1566:	08 dc       	rcall	.-2032   	; 0xd78 <deselect>

	return res;
    1568:	81 2f       	mov	r24, r17
    156a:	03 c0       	rjmp	.+6      	; 0x1572 <disk_ioctl+0x31e>
	DRESULT res;
	BYTE n, csd[16], *ptr = buff;
	DWORD csize;


	if (pdrv) return RES_PARERR;
    156c:	84 e0       	ldi	r24, 0x04	; 4
    156e:	01 c0       	rjmp	.+2      	; 0x1572 <disk_ioctl+0x31e>

	res = RES_ERROR;

	if (Stat & STA_NOINIT) return RES_NOTRDY;
    1570:	83 e0       	ldi	r24, 0x03	; 3
	}

	deselect();

	return res;
}
    1572:	60 96       	adiw	r28, 0x10	; 16
    1574:	0f b6       	in	r0, 0x3f	; 63
    1576:	f8 94       	cli
    1578:	de bf       	out	0x3e, r29	; 62
    157a:	0f be       	out	0x3f, r0	; 63
    157c:	cd bf       	out	0x3d, r28	; 61
    157e:	df 91       	pop	r29
    1580:	cf 91       	pop	r28
    1582:	1f 91       	pop	r17
    1584:	0f 91       	pop	r16
    1586:	ff 90       	pop	r15
    1588:	ef 90       	pop	r14
    158a:	08 95       	ret

0000158c <disk_timerproc>:
void disk_timerproc (void)
{
	BYTE n, s;


	n = Timer1;				/* 100Hz decrement timer */
    158c:	80 91 24 04 	lds	r24, 0x0424
	if (n) Timer1 = --n;
    1590:	88 23       	and	r24, r24
    1592:	19 f0       	breq	.+6      	; 0x159a <disk_timerproc+0xe>
    1594:	81 50       	subi	r24, 0x01	; 1
    1596:	80 93 24 04 	sts	0x0424, r24
	n = Timer2;
    159a:	80 91 23 04 	lds	r24, 0x0423
	if (n) Timer2 = --n;
    159e:	88 23       	and	r24, r24
    15a0:	19 f0       	breq	.+6      	; 0x15a8 <disk_timerproc+0x1c>
    15a2:	81 50       	subi	r24, 0x01	; 1
    15a4:	80 93 23 04 	sts	0x0423, r24
	
	s = Stat;
    15a8:	80 91 06 01 	lds	r24, 0x0106
//	if (MMC_CD)				/* Card inserted */
//		s &= ~STA_NODISK;
//	else					/* Socket empty */
//		s |= (STA_NODISK | STA_NOINIT);

	Stat = s;				/* Update MMC status */
    15ac:	80 93 06 01 	sts	0x0106, r24
    15b0:	08 95       	ret

000015b2 <_ZN7DisplayD1Ev>:
	else{
		for(uint8_t i = 0; i < 7; i++){
			Displayframe[x+(y/8)*SSD1306_WIDTH+i] |= 0;
		}
	}
}
    15b2:	9c 5f       	subi	r25, 0xFC	; 252
    15b4:	0c 94 f7 22 	jmp	0x45ee	; 0x45ee <_ZN3I2CD1Ev>
    15b8:	08 95       	ret

000015ba <_ZN7Display10clearFrameEv>:
    15ba:	fc 01       	movw	r30, r24
    15bc:	9c 5f       	subi	r25, 0xFC	; 252
    15be:	11 92       	st	Z+, r1
    15c0:	e8 17       	cp	r30, r24
    15c2:	f9 07       	cpc	r31, r25
    15c4:	e1 f7       	brne	.-8      	; 0x15be <_ZN7Display10clearFrameEv+0x4>
    15c6:	08 95       	ret

000015c8 <_ZN7Display15ssd1306_commandEh>:
    15c8:	1f 93       	push	r17
    15ca:	cf 93       	push	r28
    15cc:	df 93       	push	r29
    15ce:	16 2f       	mov	r17, r22
    15d0:	ec 01       	movw	r28, r24
    15d2:	dc 5f       	subi	r29, 0xFC	; 252
    15d4:	ce 01       	movw	r24, r28
    15d6:	0e 94 f8 22 	call	0x45f0	; 0x45f0 <_ZN3I2C9twi_startEv>
    15da:	68 e7       	ldi	r22, 0x78	; 120
    15dc:	ce 01       	movw	r24, r28
    15de:	0e 94 00 23 	call	0x4600	; 0x4600 <_ZN3I2C9twi_writeEh>
    15e2:	60 e0       	ldi	r22, 0x00	; 0
    15e4:	ce 01       	movw	r24, r28
    15e6:	0e 94 00 23 	call	0x4600	; 0x4600 <_ZN3I2C9twi_writeEh>
    15ea:	61 2f       	mov	r22, r17
    15ec:	ce 01       	movw	r24, r28
    15ee:	0e 94 00 23 	call	0x4600	; 0x4600 <_ZN3I2C9twi_writeEh>
    15f2:	ce 01       	movw	r24, r28
    15f4:	0e 94 fc 22 	call	0x45f8	; 0x45f8 <_ZN3I2C8twi_stopEv>
    15f8:	df 91       	pop	r29
    15fa:	cf 91       	pop	r28
    15fc:	1f 91       	pop	r17
    15fe:	08 95       	ret

00001600 <_ZN7Display17InitializeDisplayEv>:
    1600:	cf 93       	push	r28
    1602:	df 93       	push	r29
    1604:	ec 01       	movw	r28, r24
    1606:	6e ea       	ldi	r22, 0xAE	; 174
    1608:	df df       	rcall	.-66     	; 0x15c8 <_ZN7Display15ssd1306_commandEh>
    160a:	65 ed       	ldi	r22, 0xD5	; 213
    160c:	ce 01       	movw	r24, r28
    160e:	dc df       	rcall	.-72     	; 0x15c8 <_ZN7Display15ssd1306_commandEh>
    1610:	60 e8       	ldi	r22, 0x80	; 128
    1612:	ce 01       	movw	r24, r28
    1614:	d9 df       	rcall	.-78     	; 0x15c8 <_ZN7Display15ssd1306_commandEh>
    1616:	68 ea       	ldi	r22, 0xA8	; 168
    1618:	ce 01       	movw	r24, r28
    161a:	d6 df       	rcall	.-84     	; 0x15c8 <_ZN7Display15ssd1306_commandEh>
    161c:	6f e3       	ldi	r22, 0x3F	; 63
    161e:	ce 01       	movw	r24, r28
    1620:	d3 df       	rcall	.-90     	; 0x15c8 <_ZN7Display15ssd1306_commandEh>
    1622:	63 ed       	ldi	r22, 0xD3	; 211
    1624:	ce 01       	movw	r24, r28
    1626:	d0 df       	rcall	.-96     	; 0x15c8 <_ZN7Display15ssd1306_commandEh>
    1628:	60 e0       	ldi	r22, 0x00	; 0
    162a:	ce 01       	movw	r24, r28
    162c:	cd df       	rcall	.-102    	; 0x15c8 <_ZN7Display15ssd1306_commandEh>
    162e:	60 e4       	ldi	r22, 0x40	; 64
    1630:	ce 01       	movw	r24, r28
    1632:	ca df       	rcall	.-108    	; 0x15c8 <_ZN7Display15ssd1306_commandEh>
    1634:	6d e8       	ldi	r22, 0x8D	; 141
    1636:	ce 01       	movw	r24, r28
    1638:	c7 df       	rcall	.-114    	; 0x15c8 <_ZN7Display15ssd1306_commandEh>
    163a:	64 e1       	ldi	r22, 0x14	; 20
    163c:	ce 01       	movw	r24, r28
    163e:	c4 df       	rcall	.-120    	; 0x15c8 <_ZN7Display15ssd1306_commandEh>
    1640:	60 e2       	ldi	r22, 0x20	; 32
    1642:	ce 01       	movw	r24, r28
    1644:	c1 df       	rcall	.-126    	; 0x15c8 <_ZN7Display15ssd1306_commandEh>
    1646:	60 e0       	ldi	r22, 0x00	; 0
    1648:	ce 01       	movw	r24, r28
    164a:	be df       	rcall	.-132    	; 0x15c8 <_ZN7Display15ssd1306_commandEh>
    164c:	61 ea       	ldi	r22, 0xA1	; 161
    164e:	ce 01       	movw	r24, r28
    1650:	bb df       	rcall	.-138    	; 0x15c8 <_ZN7Display15ssd1306_commandEh>
    1652:	68 ec       	ldi	r22, 0xC8	; 200
    1654:	ce 01       	movw	r24, r28
    1656:	b8 df       	rcall	.-144    	; 0x15c8 <_ZN7Display15ssd1306_commandEh>
    1658:	6a ed       	ldi	r22, 0xDA	; 218
    165a:	ce 01       	movw	r24, r28
    165c:	b5 df       	rcall	.-150    	; 0x15c8 <_ZN7Display15ssd1306_commandEh>
    165e:	62 e1       	ldi	r22, 0x12	; 18
    1660:	ce 01       	movw	r24, r28
    1662:	b2 df       	rcall	.-156    	; 0x15c8 <_ZN7Display15ssd1306_commandEh>
    1664:	61 e8       	ldi	r22, 0x81	; 129
    1666:	ce 01       	movw	r24, r28
    1668:	af df       	rcall	.-162    	; 0x15c8 <_ZN7Display15ssd1306_commandEh>
    166a:	6f ec       	ldi	r22, 0xCF	; 207
    166c:	ce 01       	movw	r24, r28
    166e:	ac df       	rcall	.-168    	; 0x15c8 <_ZN7Display15ssd1306_commandEh>
    1670:	69 ed       	ldi	r22, 0xD9	; 217
    1672:	ce 01       	movw	r24, r28
    1674:	a9 df       	rcall	.-174    	; 0x15c8 <_ZN7Display15ssd1306_commandEh>
    1676:	61 ef       	ldi	r22, 0xF1	; 241
    1678:	ce 01       	movw	r24, r28
    167a:	a6 df       	rcall	.-180    	; 0x15c8 <_ZN7Display15ssd1306_commandEh>
    167c:	6b ed       	ldi	r22, 0xDB	; 219
    167e:	ce 01       	movw	r24, r28
    1680:	a3 df       	rcall	.-186    	; 0x15c8 <_ZN7Display15ssd1306_commandEh>
    1682:	60 e4       	ldi	r22, 0x40	; 64
    1684:	ce 01       	movw	r24, r28
    1686:	a0 df       	rcall	.-192    	; 0x15c8 <_ZN7Display15ssd1306_commandEh>
    1688:	64 ea       	ldi	r22, 0xA4	; 164
    168a:	ce 01       	movw	r24, r28
    168c:	9d df       	rcall	.-198    	; 0x15c8 <_ZN7Display15ssd1306_commandEh>
    168e:	66 ea       	ldi	r22, 0xA6	; 166
    1690:	ce 01       	movw	r24, r28
    1692:	9a df       	rcall	.-204    	; 0x15c8 <_ZN7Display15ssd1306_commandEh>
    1694:	6f ea       	ldi	r22, 0xAF	; 175
    1696:	ce 01       	movw	r24, r28
    1698:	97 df       	rcall	.-210    	; 0x15c8 <_ZN7Display15ssd1306_commandEh>
    169a:	df 91       	pop	r29
    169c:	cf 91       	pop	r28
    169e:	08 95       	ret

000016a0 <_ZN7DisplayC1Ev>:
    16a0:	cf 93       	push	r28
    16a2:	df 93       	push	r29
    16a4:	ec 01       	movw	r28, r24
    16a6:	9c 5f       	subi	r25, 0xFC	; 252
    16a8:	0e 94 f3 22 	call	0x45e6	; 0x45e6 <_ZN3I2CC1Ev>
    16ac:	ce 01       	movw	r24, r28
    16ae:	a8 df       	rcall	.-176    	; 0x1600 <_ZN7Display17InitializeDisplayEv>
    16b0:	ce 01       	movw	r24, r28
    16b2:	83 df       	rcall	.-250    	; 0x15ba <_ZN7Display10clearFrameEv>
    16b4:	df 91       	pop	r29
    16b6:	cf 91       	pop	r28
    16b8:	08 95       	ret

000016ba <_ZN7Display9sendFrameEv>:
    16ba:	ef 92       	push	r14
    16bc:	ff 92       	push	r15
    16be:	0f 93       	push	r16
    16c0:	1f 93       	push	r17
    16c2:	cf 93       	push	r28
    16c4:	df 93       	push	r29
    16c6:	ec 01       	movw	r28, r24
    16c8:	61 e2       	ldi	r22, 0x21	; 33
    16ca:	7e df       	rcall	.-260    	; 0x15c8 <_ZN7Display15ssd1306_commandEh>
    16cc:	60 e0       	ldi	r22, 0x00	; 0
    16ce:	ce 01       	movw	r24, r28
    16d0:	7b df       	rcall	.-266    	; 0x15c8 <_ZN7Display15ssd1306_commandEh>
    16d2:	6f e7       	ldi	r22, 0x7F	; 127
    16d4:	ce 01       	movw	r24, r28
    16d6:	78 df       	rcall	.-272    	; 0x15c8 <_ZN7Display15ssd1306_commandEh>
    16d8:	62 e2       	ldi	r22, 0x22	; 34
    16da:	ce 01       	movw	r24, r28
    16dc:	75 df       	rcall	.-278    	; 0x15c8 <_ZN7Display15ssd1306_commandEh>
    16de:	60 e0       	ldi	r22, 0x00	; 0
    16e0:	ce 01       	movw	r24, r28
    16e2:	72 df       	rcall	.-284    	; 0x15c8 <_ZN7Display15ssd1306_commandEh>
    16e4:	67 e0       	ldi	r22, 0x07	; 7
    16e6:	ce 01       	movw	r24, r28
    16e8:	6f df       	rcall	.-290    	; 0x15c8 <_ZN7Display15ssd1306_commandEh>
    16ea:	8e 01       	movw	r16, r28
    16ec:	1c 5f       	subi	r17, 0xFC	; 252
    16ee:	c8 01       	movw	r24, r16
    16f0:	0e 94 f8 22 	call	0x45f0	; 0x45f0 <_ZN3I2C9twi_startEv>
    16f4:	68 e7       	ldi	r22, 0x78	; 120
    16f6:	c8 01       	movw	r24, r16
    16f8:	0e 94 00 23 	call	0x4600	; 0x4600 <_ZN3I2C9twi_writeEh>
    16fc:	60 e4       	ldi	r22, 0x40	; 64
    16fe:	c8 01       	movw	r24, r16
    1700:	0e 94 00 23 	call	0x4600	; 0x4600 <_ZN3I2C9twi_writeEh>
    1704:	78 01       	movw	r14, r16
    1706:	69 91       	ld	r22, Y+
    1708:	c8 01       	movw	r24, r16
    170a:	0e 94 00 23 	call	0x4600	; 0x4600 <_ZN3I2C9twi_writeEh>
    170e:	ce 15       	cp	r28, r14
    1710:	df 05       	cpc	r29, r15
    1712:	c9 f7       	brne	.-14     	; 0x1706 <_ZN7Display9sendFrameEv+0x4c>
    1714:	c8 01       	movw	r24, r16
    1716:	0e 94 fc 22 	call	0x45f8	; 0x45f8 <_ZN3I2C8twi_stopEv>
    171a:	df 91       	pop	r29
    171c:	cf 91       	pop	r28
    171e:	1f 91       	pop	r17
    1720:	0f 91       	pop	r16
    1722:	ff 90       	pop	r15
    1724:	ef 90       	pop	r14
    1726:	08 95       	ret

00001728 <_ZN7Display9drawPixelEhhh>:
    1728:	66 23       	and	r22, r22
    172a:	ac f1       	brlt	.+106    	; 0x1796 <_ZN7Display9drawPixelEhhh+0x6e>
    172c:	40 34       	cpi	r20, 0x40	; 64
    172e:	98 f5       	brcc	.+102    	; 0x1796 <_ZN7Display9drawPixelEhhh+0x6e>
    1730:	21 11       	cpse	r18, r1
    1732:	19 c0       	rjmp	.+50     	; 0x1766 <_ZN7Display9drawPixelEhhh+0x3e>
    1734:	24 2f       	mov	r18, r20
    1736:	26 95       	lsr	r18
    1738:	26 95       	lsr	r18
    173a:	26 95       	lsr	r18
    173c:	50 e8       	ldi	r21, 0x80	; 128
    173e:	25 9f       	mul	r18, r21
    1740:	90 01       	movw	r18, r0
    1742:	11 24       	eor	r1, r1
    1744:	26 0f       	add	r18, r22
    1746:	31 1d       	adc	r19, r1
    1748:	fc 01       	movw	r30, r24
    174a:	e2 0f       	add	r30, r18
    174c:	f3 1f       	adc	r31, r19
    174e:	47 70       	andi	r20, 0x07	; 7
    1750:	81 e0       	ldi	r24, 0x01	; 1
    1752:	90 e0       	ldi	r25, 0x00	; 0
    1754:	02 c0       	rjmp	.+4      	; 0x175a <_ZN7Display9drawPixelEhhh+0x32>
    1756:	88 0f       	add	r24, r24
    1758:	99 1f       	adc	r25, r25
    175a:	4a 95       	dec	r20
    175c:	e2 f7       	brpl	.-8      	; 0x1756 <_ZN7Display9drawPixelEhhh+0x2e>
    175e:	90 81       	ld	r25, Z
    1760:	89 2b       	or	r24, r25
    1762:	80 83       	st	Z, r24
    1764:	08 95       	ret
    1766:	24 2f       	mov	r18, r20
    1768:	26 95       	lsr	r18
    176a:	26 95       	lsr	r18
    176c:	26 95       	lsr	r18
    176e:	30 e8       	ldi	r19, 0x80	; 128
    1770:	23 9f       	mul	r18, r19
    1772:	f0 01       	movw	r30, r0
    1774:	11 24       	eor	r1, r1
    1776:	e6 0f       	add	r30, r22
    1778:	f1 1d       	adc	r31, r1
    177a:	e8 0f       	add	r30, r24
    177c:	f9 1f       	adc	r31, r25
    177e:	47 70       	andi	r20, 0x07	; 7
    1780:	81 e0       	ldi	r24, 0x01	; 1
    1782:	90 e0       	ldi	r25, 0x00	; 0
    1784:	02 c0       	rjmp	.+4      	; 0x178a <_ZN7Display9drawPixelEhhh+0x62>
    1786:	88 0f       	add	r24, r24
    1788:	99 1f       	adc	r25, r25
    178a:	4a 95       	dec	r20
    178c:	e2 f7       	brpl	.-8      	; 0x1786 <_ZN7Display9drawPixelEhhh+0x5e>
    178e:	80 95       	com	r24
    1790:	90 81       	ld	r25, Z
    1792:	89 23       	and	r24, r25
    1794:	80 83       	st	Z, r24
    1796:	08 95       	ret

00001798 <_ZN7Display9drawVLineEhhh>:
    1798:	ff 92       	push	r15
    179a:	0f 93       	push	r16
    179c:	1f 93       	push	r17
    179e:	cf 93       	push	r28
    17a0:	df 93       	push	r29
    17a2:	22 23       	and	r18, r18
    17a4:	69 f0       	breq	.+26     	; 0x17c0 <_ZN7Display9drawVLineEhhh+0x28>
    17a6:	c4 2f       	mov	r28, r20
    17a8:	f6 2e       	mov	r15, r22
    17aa:	8c 01       	movw	r16, r24
    17ac:	d2 2f       	mov	r29, r18
    17ae:	d4 0f       	add	r29, r20
    17b0:	20 e0       	ldi	r18, 0x00	; 0
    17b2:	4c 2f       	mov	r20, r28
    17b4:	6f 2d       	mov	r22, r15
    17b6:	c8 01       	movw	r24, r16
    17b8:	b7 df       	rcall	.-146    	; 0x1728 <_ZN7Display9drawPixelEhhh>
    17ba:	cf 5f       	subi	r28, 0xFF	; 255
    17bc:	cd 13       	cpse	r28, r29
    17be:	f8 cf       	rjmp	.-16     	; 0x17b0 <_ZN7Display9drawVLineEhhh+0x18>
    17c0:	df 91       	pop	r29
    17c2:	cf 91       	pop	r28
    17c4:	1f 91       	pop	r17
    17c6:	0f 91       	pop	r16
    17c8:	ff 90       	pop	r15
    17ca:	08 95       	ret

000017cc <_ZN7Display9drawHLineEhhh>:
    17cc:	ff 92       	push	r15
    17ce:	0f 93       	push	r16
    17d0:	1f 93       	push	r17
    17d2:	cf 93       	push	r28
    17d4:	df 93       	push	r29
    17d6:	22 23       	and	r18, r18
    17d8:	69 f0       	breq	.+26     	; 0x17f4 <_ZN7Display9drawHLineEhhh+0x28>
    17da:	f4 2e       	mov	r15, r20
    17dc:	c6 2f       	mov	r28, r22
    17de:	8c 01       	movw	r16, r24
    17e0:	d2 2f       	mov	r29, r18
    17e2:	d6 0f       	add	r29, r22
    17e4:	20 e0       	ldi	r18, 0x00	; 0
    17e6:	4f 2d       	mov	r20, r15
    17e8:	6c 2f       	mov	r22, r28
    17ea:	c8 01       	movw	r24, r16
    17ec:	9d df       	rcall	.-198    	; 0x1728 <_ZN7Display9drawPixelEhhh>
    17ee:	cf 5f       	subi	r28, 0xFF	; 255
    17f0:	cd 13       	cpse	r28, r29
    17f2:	f8 cf       	rjmp	.-16     	; 0x17e4 <_ZN7Display9drawHLineEhhh+0x18>
    17f4:	df 91       	pop	r29
    17f6:	cf 91       	pop	r28
    17f8:	1f 91       	pop	r17
    17fa:	0f 91       	pop	r16
    17fc:	ff 90       	pop	r15
    17fe:	08 95       	ret

00001800 <_ZN7Display9draw_ASCIEhhh>:
    1800:	0f 93       	push	r16
    1802:	1f 93       	push	r17
    1804:	cf 93       	push	r28
    1806:	df 93       	push	r29
    1808:	61 32       	cpi	r22, 0x21	; 33
    180a:	08 f4       	brcc	.+2      	; 0x180e <_ZN7Display9draw_ASCIEhhh+0xe>
    180c:	3e c0       	rjmp	.+124    	; 0x188a <_ZN7Display9draw_ASCIEhhh+0x8a>
    180e:	a4 2f       	mov	r26, r20
    1810:	b0 e0       	ldi	r27, 0x00	; 0
    1812:	02 2f       	mov	r16, r18
    1814:	06 95       	lsr	r16
    1816:	06 95       	lsr	r16
    1818:	06 95       	lsr	r16
    181a:	30 e8       	ldi	r19, 0x80	; 128
    181c:	03 9f       	mul	r16, r19
    181e:	80 01       	movw	r16, r0
    1820:	11 24       	eor	r1, r1
    1822:	61 52       	subi	r22, 0x21	; 33
    1824:	70 e0       	ldi	r23, 0x00	; 0
    1826:	fb 01       	movw	r30, r22
    1828:	ee 0f       	add	r30, r30
    182a:	ff 1f       	adc	r31, r31
    182c:	ee 0f       	add	r30, r30
    182e:	ff 1f       	adc	r31, r31
    1830:	e6 0f       	add	r30, r22
    1832:	f7 1f       	adc	r31, r23
    1834:	ea 52       	subi	r30, 0x2A	; 42
    1836:	fc 4f       	sbci	r31, 0xFC	; 252
    1838:	ad 01       	movw	r20, r26
    183a:	40 0f       	add	r20, r16
    183c:	51 1f       	adc	r21, r17
    183e:	ec 01       	movw	r28, r24
    1840:	c4 0f       	add	r28, r20
    1842:	d5 1f       	adc	r29, r21
    1844:	00 58       	subi	r16, 0x80	; 128
    1846:	1f 4f       	sbci	r17, 0xFF	; 255
    1848:	a0 0f       	add	r26, r16
    184a:	b1 1f       	adc	r27, r17
    184c:	a8 0f       	add	r26, r24
    184e:	b9 1f       	adc	r27, r25
    1850:	4b 5f       	subi	r20, 0xFB	; 251
    1852:	5f 4f       	sbci	r21, 0xFF	; 255
    1854:	48 0f       	add	r20, r24
    1856:	59 1f       	adc	r21, r25
    1858:	27 70       	andi	r18, 0x07	; 7
    185a:	64 91       	lpm	r22, Z
    185c:	70 e0       	ldi	r23, 0x00	; 0
    185e:	02 2e       	mov	r0, r18
    1860:	02 c0       	rjmp	.+4      	; 0x1866 <_ZN7Display9draw_ASCIEhhh+0x66>
    1862:	66 0f       	add	r22, r22
    1864:	77 1f       	adc	r23, r23
    1866:	0a 94       	dec	r0
    1868:	e2 f7       	brpl	.-8      	; 0x1862 <_ZN7Display9draw_ASCIEhhh+0x62>
    186a:	98 81       	ld	r25, Y
    186c:	96 2b       	or	r25, r22
    186e:	99 93       	st	Y+, r25
    1870:	67 2f       	mov	r22, r23
    1872:	77 27       	eor	r23, r23
    1874:	61 15       	cp	r22, r1
    1876:	71 05       	cpc	r23, r1
    1878:	19 f0       	breq	.+6      	; 0x1880 <_ZN7Display9draw_ASCIEhhh+0x80>
    187a:	8c 91       	ld	r24, X
    187c:	68 2b       	or	r22, r24
    187e:	6c 93       	st	X, r22
    1880:	31 96       	adiw	r30, 0x01	; 1
    1882:	11 96       	adiw	r26, 0x01	; 1
    1884:	c4 17       	cp	r28, r20
    1886:	d5 07       	cpc	r29, r21
    1888:	41 f7       	brne	.-48     	; 0x185a <_ZN7Display9draw_ASCIEhhh+0x5a>
    188a:	df 91       	pop	r29
    188c:	cf 91       	pop	r28
    188e:	1f 91       	pop	r17
    1890:	0f 91       	pop	r16
    1892:	08 95       	ret

00001894 <_ZN7Display16draw_number16x16Ehhh>:
    1894:	cf 92       	push	r12
    1896:	df 92       	push	r13
    1898:	ef 92       	push	r14
    189a:	ff 92       	push	r15
    189c:	0f 93       	push	r16
    189e:	1f 93       	push	r17
    18a0:	cf 93       	push	r28
    18a2:	df 93       	push	r29
    18a4:	6a 30       	cpi	r22, 0x0A	; 10
    18a6:	08 f0       	brcs	.+2      	; 0x18aa <_ZN7Display16draw_number16x16Ehhh+0x16>
    18a8:	66 c0       	rjmp	.+204    	; 0x1976 <_ZN7Display16draw_number16x16Ehhh+0xe2>
    18aa:	50 e0       	ldi	r21, 0x00	; 0
    18ac:	02 2f       	mov	r16, r18
    18ae:	06 95       	lsr	r16
    18b0:	06 95       	lsr	r16
    18b2:	06 95       	lsr	r16
    18b4:	10 e0       	ldi	r17, 0x00	; 0
    18b6:	d8 01       	movw	r26, r16
    18b8:	b6 95       	lsr	r27
    18ba:	ba 2f       	mov	r27, r26
    18bc:	aa 27       	eor	r26, r26
    18be:	b7 95       	ror	r27
    18c0:	a7 95       	ror	r26
    18c2:	0f 5f       	subi	r16, 0xFF	; 255
    18c4:	1f 4f       	sbci	r17, 0xFF	; 255
    18c6:	16 95       	lsr	r17
    18c8:	10 2f       	mov	r17, r16
    18ca:	00 27       	eor	r16, r16
    18cc:	17 95       	ror	r17
    18ce:	07 95       	ror	r16
    18d0:	7d 01       	movw	r14, r26
    18d2:	30 e8       	ldi	r19, 0x80	; 128
    18d4:	e3 0e       	add	r14, r19
    18d6:	f1 1c       	adc	r15, r1
    18d8:	e4 0e       	add	r14, r20
    18da:	f5 1e       	adc	r15, r21
    18dc:	e8 0e       	add	r14, r24
    18de:	f9 1e       	adc	r15, r25
    18e0:	ea 01       	movw	r28, r20
    18e2:	c0 0f       	add	r28, r16
    18e4:	d1 1f       	adc	r29, r17
    18e6:	60 97       	sbiw	r28, 0x10	; 16
    18e8:	c8 0f       	add	r28, r24
    18ea:	d9 1f       	adc	r29, r25
    18ec:	04 0f       	add	r16, r20
    18ee:	15 1f       	adc	r17, r21
    18f0:	00 59       	subi	r16, 0x90	; 144
    18f2:	1f 4f       	sbci	r17, 0xFF	; 255
    18f4:	08 0f       	add	r16, r24
    18f6:	19 1f       	adc	r17, r25
    18f8:	a4 0f       	add	r26, r20
    18fa:	b5 1f       	adc	r27, r21
    18fc:	a8 0f       	add	r26, r24
    18fe:	b9 1f       	adc	r27, r25
    1900:	80 e2       	ldi	r24, 0x20	; 32
    1902:	68 9f       	mul	r22, r24
    1904:	b0 01       	movw	r22, r0
    1906:	11 24       	eor	r1, r1
    1908:	40 e0       	ldi	r20, 0x00	; 0
    190a:	50 e0       	ldi	r21, 0x00	; 0
    190c:	27 70       	andi	r18, 0x07	; 7
    190e:	fa 01       	movw	r30, r20
    1910:	e6 0f       	add	r30, r22
    1912:	f7 1f       	adc	r31, r23
    1914:	ea 56       	subi	r30, 0x6A	; 106
    1916:	fd 4f       	sbci	r31, 0xFD	; 253
    1918:	e4 91       	lpm	r30, Z
    191a:	f0 e0       	ldi	r31, 0x00	; 0
    191c:	02 2e       	mov	r0, r18
    191e:	02 c0       	rjmp	.+4      	; 0x1924 <_ZN7Display16draw_number16x16Ehhh+0x90>
    1920:	ee 0f       	add	r30, r30
    1922:	ff 1f       	adc	r31, r31
    1924:	0a 94       	dec	r0
    1926:	e2 f7       	brpl	.-8      	; 0x1920 <_ZN7Display16draw_number16x16Ehhh+0x8c>
    1928:	40 31       	cpi	r20, 0x10	; 16
    192a:	68 f4       	brcc	.+26     	; 0x1946 <_ZN7Display16draw_number16x16Ehhh+0xb2>
    192c:	8c 91       	ld	r24, X
    192e:	8e 2b       	or	r24, r30
    1930:	8c 93       	st	X, r24
    1932:	cf 2e       	mov	r12, r31
    1934:	dd 24       	eor	r13, r13
    1936:	c1 14       	cp	r12, r1
    1938:	d1 04       	cpc	r13, r1
    193a:	89 f0       	breq	.+34     	; 0x195e <_ZN7Display16draw_number16x16Ehhh+0xca>
    193c:	f7 01       	movw	r30, r14
    193e:	80 81       	ld	r24, Z
    1940:	8c 29       	or	r24, r12
    1942:	80 83       	st	Z, r24
    1944:	0c c0       	rjmp	.+24     	; 0x195e <_ZN7Display16draw_number16x16Ehhh+0xca>
    1946:	88 81       	ld	r24, Y
    1948:	8e 2b       	or	r24, r30
    194a:	88 83       	st	Y, r24
    194c:	cf 2e       	mov	r12, r31
    194e:	dd 24       	eor	r13, r13
    1950:	c1 14       	cp	r12, r1
    1952:	d1 04       	cpc	r13, r1
    1954:	21 f0       	breq	.+8      	; 0x195e <_ZN7Display16draw_number16x16Ehhh+0xca>
    1956:	f8 01       	movw	r30, r16
    1958:	80 81       	ld	r24, Z
    195a:	8c 29       	or	r24, r12
    195c:	80 83       	st	Z, r24
    195e:	4f 5f       	subi	r20, 0xFF	; 255
    1960:	5f 4f       	sbci	r21, 0xFF	; 255
    1962:	ff ef       	ldi	r31, 0xFF	; 255
    1964:	ef 1a       	sub	r14, r31
    1966:	ff 0a       	sbc	r15, r31
    1968:	21 96       	adiw	r28, 0x01	; 1
    196a:	0f 5f       	subi	r16, 0xFF	; 255
    196c:	1f 4f       	sbci	r17, 0xFF	; 255
    196e:	11 96       	adiw	r26, 0x01	; 1
    1970:	40 32       	cpi	r20, 0x20	; 32
    1972:	51 05       	cpc	r21, r1
    1974:	61 f6       	brne	.-104    	; 0x190e <_ZN7Display16draw_number16x16Ehhh+0x7a>
    1976:	df 91       	pop	r29
    1978:	cf 91       	pop	r28
    197a:	1f 91       	pop	r17
    197c:	0f 91       	pop	r16
    197e:	ff 90       	pop	r15
    1980:	ef 90       	pop	r14
    1982:	df 90       	pop	r13
    1984:	cf 90       	pop	r12
    1986:	08 95       	ret

00001988 <_ZN7Display6analogEhhhh>:

void Display::analog(uint8_t stunde, uint8_t minute, uint8_t sekunde, uint8_t sekanzeige){
    1988:	2f 92       	push	r2
    198a:	3f 92       	push	r3
    198c:	4f 92       	push	r4
    198e:	5f 92       	push	r5
    1990:	6f 92       	push	r6
    1992:	7f 92       	push	r7
    1994:	8f 92       	push	r8
    1996:	9f 92       	push	r9
    1998:	af 92       	push	r10
    199a:	bf 92       	push	r11
    199c:	cf 92       	push	r12
    199e:	df 92       	push	r13
    19a0:	ef 92       	push	r14
    19a2:	ff 92       	push	r15
    19a4:	0f 93       	push	r16
    19a6:	1f 93       	push	r17
    19a8:	cf 93       	push	r28
    19aa:	df 93       	push	r29
    19ac:	cd b7       	in	r28, 0x3d	; 61
    19ae:	de b7       	in	r29, 0x3e	; 62
    19b0:	27 97       	sbiw	r28, 0x07	; 7
    19b2:	0f b6       	in	r0, 0x3f	; 63
    19b4:	f8 94       	cli
    19b6:	de bf       	out	0x3e, r29	; 62
    19b8:	0f be       	out	0x3f, r0	; 63
    19ba:	cd bf       	out	0x3d, r28	; 61
    19bc:	9f 83       	std	Y+7, r25	; 0x07
    19be:	8e 83       	std	Y+6, r24	; 0x06
    19c0:	6d 83       	std	Y+5, r22	; 0x05
    19c2:	34 2e       	mov	r3, r20
	uint8_t Px=32-1;
	uint8_t Py=32-1;
	uint8_t x=0,y=0;
	float winkel=0;
	
	if (sekanzeige)
    19c4:	00 23       	and	r16, r16
    19c6:	09 f4       	brne	.+2      	; 0x19ca <_ZN7Display6analogEhhhh+0x42>
    19c8:	26 c1       	rjmp	.+588    	; 0x1c16 <_ZN7Display6analogEhhhh+0x28e>
	{
		//Berechnen des Sekundenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(sekunde*6.0)*M_PI/180.0-M_PI/2.0;
    19ca:	62 2f       	mov	r22, r18
    19cc:	70 e0       	ldi	r23, 0x00	; 0
    19ce:	80 e0       	ldi	r24, 0x00	; 0
    19d0:	90 e0       	ldi	r25, 0x00	; 0
    19d2:	0e 94 4b 3f 	call	0x7e96	; 0x7e96 <__floatsisf>
    19d6:	20 e0       	ldi	r18, 0x00	; 0
    19d8:	30 e0       	ldi	r19, 0x00	; 0
    19da:	40 ec       	ldi	r20, 0xC0	; 192
    19dc:	50 e4       	ldi	r21, 0x40	; 64
    19de:	0e 94 64 40 	call	0x80c8	; 0x80c8 <__mulsf3>
    19e2:	2b ed       	ldi	r18, 0xDB	; 219
    19e4:	3f e0       	ldi	r19, 0x0F	; 15
    19e6:	49 e4       	ldi	r20, 0x49	; 73
    19e8:	50 e4       	ldi	r21, 0x40	; 64
    19ea:	0e 94 64 40 	call	0x80c8	; 0x80c8 <__mulsf3>
    19ee:	20 e0       	ldi	r18, 0x00	; 0
    19f0:	30 e0       	ldi	r19, 0x00	; 0
    19f2:	44 e3       	ldi	r20, 0x34	; 52
    19f4:	53 e4       	ldi	r21, 0x43	; 67
    19f6:	0e 94 b0 3e 	call	0x7d60	; 0x7d60 <__divsf3>
    19fa:	2b ed       	ldi	r18, 0xDB	; 219
    19fc:	3f e0       	ldi	r19, 0x0F	; 15
    19fe:	49 ec       	ldi	r20, 0xC9	; 201
    1a00:	5f e3       	ldi	r21, 0x3F	; 63
    1a02:	0e 94 48 3e 	call	0x7c90	; 0x7c90 <__subsf3>
    1a06:	6b 01       	movw	r12, r22
    1a08:	7c 01       	movw	r14, r24
			x=(uint8_t) i*cos(winkel)+Px;
    1a0a:	0e 94 ad 3e 	call	0x7d5a	; 0x7d5a <cos>
    1a0e:	4b 01       	movw	r8, r22
    1a10:	5c 01       	movw	r10, r24
			y=(uint8_t) i*sin(winkel)+Py;
    1a12:	c7 01       	movw	r24, r14
    1a14:	b6 01       	movw	r22, r12
    1a16:	0e 94 13 41 	call	0x8226	; 0x8226 <sin>
    1a1a:	2b 01       	movw	r4, r22
    1a1c:	3c 01       	movw	r6, r24
    1a1e:	00 e0       	ldi	r16, 0x00	; 0
    1a20:	10 e0       	ldi	r17, 0x00	; 0
	if (sekanzeige)
	{
		//Berechnen des Sekundenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(sekunde*6.0)*M_PI/180.0-M_PI/2.0;
			x=(uint8_t) i*cos(winkel)+Px;
    1a22:	b8 01       	movw	r22, r16
    1a24:	01 2e       	mov	r0, r17
    1a26:	00 0c       	add	r0, r0
    1a28:	88 0b       	sbc	r24, r24
    1a2a:	99 0b       	sbc	r25, r25
    1a2c:	0e 94 4b 3f 	call	0x7e96	; 0x7e96 <__floatsisf>
    1a30:	6b 01       	movw	r12, r22
    1a32:	7c 01       	movw	r14, r24
			y=(uint8_t) i*sin(winkel)+Py;
    1a34:	a3 01       	movw	r20, r6
    1a36:	92 01       	movw	r18, r4
    1a38:	0e 94 64 40 	call	0x80c8	; 0x80c8 <__mulsf3>
    1a3c:	20 e0       	ldi	r18, 0x00	; 0
    1a3e:	30 e0       	ldi	r19, 0x00	; 0
    1a40:	48 ef       	ldi	r20, 0xF8	; 248
    1a42:	51 e4       	ldi	r21, 0x41	; 65
    1a44:	0e 94 49 3e 	call	0x7c92	; 0x7c92 <__addsf3>
    1a48:	0e 94 1d 3f 	call	0x7e3a	; 0x7e3a <__fixunssfsi>
    1a4c:	26 2e       	mov	r2, r22
	if (sekanzeige)
	{
		//Berechnen des Sekundenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(sekunde*6.0)*M_PI/180.0-M_PI/2.0;
			x=(uint8_t) i*cos(winkel)+Px;
    1a4e:	a5 01       	movw	r20, r10
    1a50:	94 01       	movw	r18, r8
    1a52:	c7 01       	movw	r24, r14
    1a54:	b6 01       	movw	r22, r12
    1a56:	0e 94 64 40 	call	0x80c8	; 0x80c8 <__mulsf3>
    1a5a:	20 e0       	ldi	r18, 0x00	; 0
    1a5c:	30 e0       	ldi	r19, 0x00	; 0
    1a5e:	48 ef       	ldi	r20, 0xF8	; 248
    1a60:	51 e4       	ldi	r21, 0x41	; 65
    1a62:	0e 94 49 3e 	call	0x7c92	; 0x7c92 <__addsf3>
    1a66:	0e 94 1d 3f 	call	0x7e3a	; 0x7e3a <__fixunssfsi>
			y=(uint8_t) i*sin(winkel)+Py;

			drawPixel(x,y,0);
    1a6a:	20 e0       	ldi	r18, 0x00	; 0
    1a6c:	42 2d       	mov	r20, r2
    1a6e:	8e 81       	ldd	r24, Y+6	; 0x06
    1a70:	9f 81       	ldd	r25, Y+7	; 0x07
    1a72:	5a de       	rcall	.-844    	; 0x1728 <_ZN7Display9drawPixelEhhh>
    1a74:	0f 5f       	subi	r16, 0xFF	; 255
    1a76:	1f 4f       	sbci	r17, 0xFF	; 255
	float winkel=0;
	
	if (sekanzeige)
	{
		//Berechnen des Sekundenzeigers
		for(uint8_t i=0;i<r;i++){
    1a78:	09 31       	cpi	r16, 0x19	; 25
    1a7a:	11 05       	cpc	r17, r1
    1a7c:	91 f6       	brne	.-92     	; 0x1a22 <_ZN7Display6analogEhhhh+0x9a>
		}

		r=21;
		//Berechnen des Minutenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(minute*6.0)*M_PI/180.0-M_PI/2.0;
    1a7e:	63 2d       	mov	r22, r3
    1a80:	70 e0       	ldi	r23, 0x00	; 0
    1a82:	80 e0       	ldi	r24, 0x00	; 0
    1a84:	90 e0       	ldi	r25, 0x00	; 0
    1a86:	0e 94 4b 3f 	call	0x7e96	; 0x7e96 <__floatsisf>
    1a8a:	69 83       	std	Y+1, r22	; 0x01
    1a8c:	7a 83       	std	Y+2, r23	; 0x02
    1a8e:	8b 83       	std	Y+3, r24	; 0x03
    1a90:	9c 83       	std	Y+4, r25	; 0x04
    1a92:	20 e0       	ldi	r18, 0x00	; 0
    1a94:	30 e0       	ldi	r19, 0x00	; 0
    1a96:	40 ec       	ldi	r20, 0xC0	; 192
    1a98:	50 e4       	ldi	r21, 0x40	; 64
    1a9a:	0e 94 64 40 	call	0x80c8	; 0x80c8 <__mulsf3>
    1a9e:	2b ed       	ldi	r18, 0xDB	; 219
    1aa0:	3f e0       	ldi	r19, 0x0F	; 15
    1aa2:	49 e4       	ldi	r20, 0x49	; 73
    1aa4:	50 e4       	ldi	r21, 0x40	; 64
    1aa6:	0e 94 64 40 	call	0x80c8	; 0x80c8 <__mulsf3>
    1aaa:	20 e0       	ldi	r18, 0x00	; 0
    1aac:	30 e0       	ldi	r19, 0x00	; 0
    1aae:	44 e3       	ldi	r20, 0x34	; 52
    1ab0:	53 e4       	ldi	r21, 0x43	; 67
    1ab2:	0e 94 b0 3e 	call	0x7d60	; 0x7d60 <__divsf3>
    1ab6:	2b ed       	ldi	r18, 0xDB	; 219
    1ab8:	3f e0       	ldi	r19, 0x0F	; 15
    1aba:	49 ec       	ldi	r20, 0xC9	; 201
    1abc:	5f e3       	ldi	r21, 0x3F	; 63
    1abe:	0e 94 48 3e 	call	0x7c90	; 0x7c90 <__subsf3>
    1ac2:	6b 01       	movw	r12, r22
    1ac4:	7c 01       	movw	r14, r24
			x=(uint8_t) i*cos(winkel)+Px;
    1ac6:	0e 94 ad 3e 	call	0x7d5a	; 0x7d5a <cos>
    1aca:	2b 01       	movw	r4, r22
    1acc:	3c 01       	movw	r6, r24
			y=(uint8_t) i*sin(winkel)+Py;
    1ace:	c7 01       	movw	r24, r14
    1ad0:	b6 01       	movw	r22, r12
    1ad2:	0e 94 13 41 	call	0x8226	; 0x8226 <sin>
    1ad6:	4b 01       	movw	r8, r22
    1ad8:	5c 01       	movw	r10, r24
    1ada:	00 e0       	ldi	r16, 0x00	; 0
    1adc:	10 e0       	ldi	r17, 0x00	; 0

		r=21;
		//Berechnen des Minutenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(minute*6.0)*M_PI/180.0-M_PI/2.0;
			x=(uint8_t) i*cos(winkel)+Px;
    1ade:	b8 01       	movw	r22, r16
    1ae0:	01 2e       	mov	r0, r17
    1ae2:	00 0c       	add	r0, r0
    1ae4:	88 0b       	sbc	r24, r24
    1ae6:	99 0b       	sbc	r25, r25
    1ae8:	0e 94 4b 3f 	call	0x7e96	; 0x7e96 <__floatsisf>
    1aec:	6b 01       	movw	r12, r22
    1aee:	7c 01       	movw	r14, r24
			y=(uint8_t) i*sin(winkel)+Py;
    1af0:	a5 01       	movw	r20, r10
    1af2:	94 01       	movw	r18, r8
    1af4:	0e 94 64 40 	call	0x80c8	; 0x80c8 <__mulsf3>
    1af8:	20 e0       	ldi	r18, 0x00	; 0
    1afa:	30 e0       	ldi	r19, 0x00	; 0
    1afc:	48 ef       	ldi	r20, 0xF8	; 248
    1afe:	51 e4       	ldi	r21, 0x41	; 65
    1b00:	0e 94 49 3e 	call	0x7c92	; 0x7c92 <__addsf3>
    1b04:	0e 94 1d 3f 	call	0x7e3a	; 0x7e3a <__fixunssfsi>
    1b08:	36 2e       	mov	r3, r22

		r=21;
		//Berechnen des Minutenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(minute*6.0)*M_PI/180.0-M_PI/2.0;
			x=(uint8_t) i*cos(winkel)+Px;
    1b0a:	a3 01       	movw	r20, r6
    1b0c:	92 01       	movw	r18, r4
    1b0e:	c7 01       	movw	r24, r14
    1b10:	b6 01       	movw	r22, r12
    1b12:	0e 94 64 40 	call	0x80c8	; 0x80c8 <__mulsf3>
    1b16:	20 e0       	ldi	r18, 0x00	; 0
    1b18:	30 e0       	ldi	r19, 0x00	; 0
    1b1a:	48 ef       	ldi	r20, 0xF8	; 248
    1b1c:	51 e4       	ldi	r21, 0x41	; 65
    1b1e:	0e 94 49 3e 	call	0x7c92	; 0x7c92 <__addsf3>
    1b22:	0e 94 1d 3f 	call	0x7e3a	; 0x7e3a <__fixunssfsi>
			y=(uint8_t) i*sin(winkel)+Py;

			drawPixel(x,y,0);
    1b26:	20 e0       	ldi	r18, 0x00	; 0
    1b28:	43 2d       	mov	r20, r3
    1b2a:	8e 81       	ldd	r24, Y+6	; 0x06
    1b2c:	9f 81       	ldd	r25, Y+7	; 0x07
    1b2e:	fc dd       	rcall	.-1032   	; 0x1728 <_ZN7Display9drawPixelEhhh>
    1b30:	0f 5f       	subi	r16, 0xFF	; 255
    1b32:	1f 4f       	sbci	r17, 0xFF	; 255
			drawPixel(x,y,0);
		}

		r=21;
		//Berechnen des Minutenzeigers
		for(uint8_t i=0;i<r;i++){
    1b34:	05 31       	cpi	r16, 0x15	; 21
    1b36:	11 05       	cpc	r17, r1
    1b38:	91 f6       	brne	.-92     	; 0x1ade <_ZN7Display6analogEhhhh+0x156>
		}

		r=13;
		//Berechnen des Stundenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(stunde*30.0+minute/2.0)*M_PI/180.0-M_PI/2.0;
    1b3a:	2d 81       	ldd	r18, Y+5	; 0x05
    1b3c:	62 2f       	mov	r22, r18
    1b3e:	70 e0       	ldi	r23, 0x00	; 0
    1b40:	80 e0       	ldi	r24, 0x00	; 0
    1b42:	90 e0       	ldi	r25, 0x00	; 0
    1b44:	0e 94 4b 3f 	call	0x7e96	; 0x7e96 <__floatsisf>
    1b48:	20 e0       	ldi	r18, 0x00	; 0
    1b4a:	30 e0       	ldi	r19, 0x00	; 0
    1b4c:	40 ef       	ldi	r20, 0xF0	; 240
    1b4e:	51 e4       	ldi	r21, 0x41	; 65
    1b50:	0e 94 64 40 	call	0x80c8	; 0x80c8 <__mulsf3>
    1b54:	6b 01       	movw	r12, r22
    1b56:	7c 01       	movw	r14, r24
    1b58:	20 e0       	ldi	r18, 0x00	; 0
    1b5a:	30 e0       	ldi	r19, 0x00	; 0
    1b5c:	40 e0       	ldi	r20, 0x00	; 0
    1b5e:	5f e3       	ldi	r21, 0x3F	; 63
    1b60:	69 81       	ldd	r22, Y+1	; 0x01
    1b62:	7a 81       	ldd	r23, Y+2	; 0x02
    1b64:	8b 81       	ldd	r24, Y+3	; 0x03
    1b66:	9c 81       	ldd	r25, Y+4	; 0x04
    1b68:	0e 94 64 40 	call	0x80c8	; 0x80c8 <__mulsf3>
    1b6c:	9b 01       	movw	r18, r22
    1b6e:	ac 01       	movw	r20, r24
    1b70:	c7 01       	movw	r24, r14
    1b72:	b6 01       	movw	r22, r12
    1b74:	0e 94 49 3e 	call	0x7c92	; 0x7c92 <__addsf3>
    1b78:	2b ed       	ldi	r18, 0xDB	; 219
    1b7a:	3f e0       	ldi	r19, 0x0F	; 15
    1b7c:	49 e4       	ldi	r20, 0x49	; 73
    1b7e:	50 e4       	ldi	r21, 0x40	; 64
    1b80:	0e 94 64 40 	call	0x80c8	; 0x80c8 <__mulsf3>
    1b84:	20 e0       	ldi	r18, 0x00	; 0
    1b86:	30 e0       	ldi	r19, 0x00	; 0
    1b88:	44 e3       	ldi	r20, 0x34	; 52
    1b8a:	53 e4       	ldi	r21, 0x43	; 67
    1b8c:	0e 94 b0 3e 	call	0x7d60	; 0x7d60 <__divsf3>
    1b90:	2b ed       	ldi	r18, 0xDB	; 219
    1b92:	3f e0       	ldi	r19, 0x0F	; 15
    1b94:	49 ec       	ldi	r20, 0xC9	; 201
    1b96:	5f e3       	ldi	r21, 0x3F	; 63
    1b98:	0e 94 48 3e 	call	0x7c90	; 0x7c90 <__subsf3>
    1b9c:	6b 01       	movw	r12, r22
    1b9e:	7c 01       	movw	r14, r24
			x= (uint8_t) i*cos(winkel) +Px;
    1ba0:	0e 94 ad 3e 	call	0x7d5a	; 0x7d5a <cos>
    1ba4:	4b 01       	movw	r8, r22
    1ba6:	5c 01       	movw	r10, r24
			y= (uint8_t) i*sin(winkel) +Py;
    1ba8:	c7 01       	movw	r24, r14
    1baa:	b6 01       	movw	r22, r12
    1bac:	0e 94 13 41 	call	0x8226	; 0x8226 <sin>
    1bb0:	2b 01       	movw	r4, r22
    1bb2:	3c 01       	movw	r6, r24
    1bb4:	00 e0       	ldi	r16, 0x00	; 0
    1bb6:	10 e0       	ldi	r17, 0x00	; 0

		r=13;
		//Berechnen des Stundenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(stunde*30.0+minute/2.0)*M_PI/180.0-M_PI/2.0;
			x= (uint8_t) i*cos(winkel) +Px;
    1bb8:	b8 01       	movw	r22, r16
    1bba:	01 2e       	mov	r0, r17
    1bbc:	00 0c       	add	r0, r0
    1bbe:	88 0b       	sbc	r24, r24
    1bc0:	99 0b       	sbc	r25, r25
    1bc2:	0e 94 4b 3f 	call	0x7e96	; 0x7e96 <__floatsisf>
    1bc6:	6b 01       	movw	r12, r22
    1bc8:	7c 01       	movw	r14, r24
			y= (uint8_t) i*sin(winkel) +Py;
    1bca:	a3 01       	movw	r20, r6
    1bcc:	92 01       	movw	r18, r4
    1bce:	0e 94 64 40 	call	0x80c8	; 0x80c8 <__mulsf3>
    1bd2:	20 e0       	ldi	r18, 0x00	; 0
    1bd4:	30 e0       	ldi	r19, 0x00	; 0
    1bd6:	48 ef       	ldi	r20, 0xF8	; 248
    1bd8:	51 e4       	ldi	r21, 0x41	; 65
    1bda:	0e 94 49 3e 	call	0x7c92	; 0x7c92 <__addsf3>
    1bde:	0e 94 1d 3f 	call	0x7e3a	; 0x7e3a <__fixunssfsi>
    1be2:	36 2e       	mov	r3, r22

		r=13;
		//Berechnen des Stundenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(stunde*30.0+minute/2.0)*M_PI/180.0-M_PI/2.0;
			x= (uint8_t) i*cos(winkel) +Px;
    1be4:	a5 01       	movw	r20, r10
    1be6:	94 01       	movw	r18, r8
    1be8:	c7 01       	movw	r24, r14
    1bea:	b6 01       	movw	r22, r12
    1bec:	0e 94 64 40 	call	0x80c8	; 0x80c8 <__mulsf3>
    1bf0:	20 e0       	ldi	r18, 0x00	; 0
    1bf2:	30 e0       	ldi	r19, 0x00	; 0
    1bf4:	48 ef       	ldi	r20, 0xF8	; 248
    1bf6:	51 e4       	ldi	r21, 0x41	; 65
    1bf8:	0e 94 49 3e 	call	0x7c92	; 0x7c92 <__addsf3>
    1bfc:	0e 94 1d 3f 	call	0x7e3a	; 0x7e3a <__fixunssfsi>
			y= (uint8_t) i*sin(winkel) +Py;

			drawPixel(x,y,0);
    1c00:	20 e0       	ldi	r18, 0x00	; 0
    1c02:	43 2d       	mov	r20, r3
    1c04:	8e 81       	ldd	r24, Y+6	; 0x06
    1c06:	9f 81       	ldd	r25, Y+7	; 0x07
    1c08:	8f dd       	rcall	.-1250   	; 0x1728 <_ZN7Display9drawPixelEhhh>
    1c0a:	0f 5f       	subi	r16, 0xFF	; 255
    1c0c:	1f 4f       	sbci	r17, 0xFF	; 255
			drawPixel(x,y,0);
		}

		r=13;
		//Berechnen des Stundenzeigers
		for(uint8_t i=0;i<r;i++){
    1c0e:	0d 30       	cpi	r16, 0x0D	; 13
    1c10:	11 05       	cpc	r17, r1
    1c12:	91 f6       	brne	.-92     	; 0x1bb8 <_ZN7Display6analogEhhhh+0x230>
    1c14:	cb c0       	rjmp	.+406    	; 0x1dac <_ZN7Display6analogEhhhh+0x424>
	}
	else{
		r=25;
		//Berechnen des Minutenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(minute*6.0)*M_PI/180.0-M_PI/2.0;
    1c16:	64 2f       	mov	r22, r20
    1c18:	70 e0       	ldi	r23, 0x00	; 0
    1c1a:	80 e0       	ldi	r24, 0x00	; 0
    1c1c:	90 e0       	ldi	r25, 0x00	; 0
    1c1e:	0e 94 4b 3f 	call	0x7e96	; 0x7e96 <__floatsisf>
    1c22:	69 83       	std	Y+1, r22	; 0x01
    1c24:	7a 83       	std	Y+2, r23	; 0x02
    1c26:	8b 83       	std	Y+3, r24	; 0x03
    1c28:	9c 83       	std	Y+4, r25	; 0x04
    1c2a:	20 e0       	ldi	r18, 0x00	; 0
    1c2c:	30 e0       	ldi	r19, 0x00	; 0
    1c2e:	40 ec       	ldi	r20, 0xC0	; 192
    1c30:	50 e4       	ldi	r21, 0x40	; 64
    1c32:	0e 94 64 40 	call	0x80c8	; 0x80c8 <__mulsf3>
    1c36:	2b ed       	ldi	r18, 0xDB	; 219
    1c38:	3f e0       	ldi	r19, 0x0F	; 15
    1c3a:	49 e4       	ldi	r20, 0x49	; 73
    1c3c:	50 e4       	ldi	r21, 0x40	; 64
    1c3e:	0e 94 64 40 	call	0x80c8	; 0x80c8 <__mulsf3>
    1c42:	20 e0       	ldi	r18, 0x00	; 0
    1c44:	30 e0       	ldi	r19, 0x00	; 0
    1c46:	44 e3       	ldi	r20, 0x34	; 52
    1c48:	53 e4       	ldi	r21, 0x43	; 67
    1c4a:	0e 94 b0 3e 	call	0x7d60	; 0x7d60 <__divsf3>
    1c4e:	2b ed       	ldi	r18, 0xDB	; 219
    1c50:	3f e0       	ldi	r19, 0x0F	; 15
    1c52:	49 ec       	ldi	r20, 0xC9	; 201
    1c54:	5f e3       	ldi	r21, 0x3F	; 63
    1c56:	0e 94 48 3e 	call	0x7c90	; 0x7c90 <__subsf3>
    1c5a:	6b 01       	movw	r12, r22
    1c5c:	7c 01       	movw	r14, r24
			x=(uint8_t) i*cos(winkel)+Px;
    1c5e:	0e 94 ad 3e 	call	0x7d5a	; 0x7d5a <cos>
    1c62:	2b 01       	movw	r4, r22
    1c64:	3c 01       	movw	r6, r24
			y=(uint8_t) i*sin(winkel)+Py;
    1c66:	c7 01       	movw	r24, r14
    1c68:	b6 01       	movw	r22, r12
    1c6a:	0e 94 13 41 	call	0x8226	; 0x8226 <sin>
    1c6e:	4b 01       	movw	r8, r22
    1c70:	5c 01       	movw	r10, r24
    1c72:	00 e0       	ldi	r16, 0x00	; 0
    1c74:	10 e0       	ldi	r17, 0x00	; 0
	else{
		r=25;
		//Berechnen des Minutenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(minute*6.0)*M_PI/180.0-M_PI/2.0;
			x=(uint8_t) i*cos(winkel)+Px;
    1c76:	b8 01       	movw	r22, r16
    1c78:	01 2e       	mov	r0, r17
    1c7a:	00 0c       	add	r0, r0
    1c7c:	88 0b       	sbc	r24, r24
    1c7e:	99 0b       	sbc	r25, r25
    1c80:	0e 94 4b 3f 	call	0x7e96	; 0x7e96 <__floatsisf>
    1c84:	6b 01       	movw	r12, r22
    1c86:	7c 01       	movw	r14, r24
			y=(uint8_t) i*sin(winkel)+Py;
    1c88:	a5 01       	movw	r20, r10
    1c8a:	94 01       	movw	r18, r8
    1c8c:	0e 94 64 40 	call	0x80c8	; 0x80c8 <__mulsf3>
    1c90:	20 e0       	ldi	r18, 0x00	; 0
    1c92:	30 e0       	ldi	r19, 0x00	; 0
    1c94:	48 ef       	ldi	r20, 0xF8	; 248
    1c96:	51 e4       	ldi	r21, 0x41	; 65
    1c98:	0e 94 49 3e 	call	0x7c92	; 0x7c92 <__addsf3>
    1c9c:	0e 94 1d 3f 	call	0x7e3a	; 0x7e3a <__fixunssfsi>
    1ca0:	36 2e       	mov	r3, r22
	else{
		r=25;
		//Berechnen des Minutenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(minute*6.0)*M_PI/180.0-M_PI/2.0;
			x=(uint8_t) i*cos(winkel)+Px;
    1ca2:	a3 01       	movw	r20, r6
    1ca4:	92 01       	movw	r18, r4
    1ca6:	c7 01       	movw	r24, r14
    1ca8:	b6 01       	movw	r22, r12
    1caa:	0e 94 64 40 	call	0x80c8	; 0x80c8 <__mulsf3>
    1cae:	20 e0       	ldi	r18, 0x00	; 0
    1cb0:	30 e0       	ldi	r19, 0x00	; 0
    1cb2:	48 ef       	ldi	r20, 0xF8	; 248
    1cb4:	51 e4       	ldi	r21, 0x41	; 65
    1cb6:	0e 94 49 3e 	call	0x7c92	; 0x7c92 <__addsf3>
    1cba:	0e 94 1d 3f 	call	0x7e3a	; 0x7e3a <__fixunssfsi>
			y=(uint8_t) i*sin(winkel)+Py;

			drawPixel(x,y,0);
    1cbe:	20 e0       	ldi	r18, 0x00	; 0
    1cc0:	43 2d       	mov	r20, r3
    1cc2:	8e 81       	ldd	r24, Y+6	; 0x06
    1cc4:	9f 81       	ldd	r25, Y+7	; 0x07
    1cc6:	30 dd       	rcall	.-1440   	; 0x1728 <_ZN7Display9drawPixelEhhh>
    1cc8:	0f 5f       	subi	r16, 0xFF	; 255
    1cca:	1f 4f       	sbci	r17, 0xFF	; 255
		}
	}
	else{
		r=25;
		//Berechnen des Minutenzeigers
		for(uint8_t i=0;i<r;i++){
    1ccc:	09 31       	cpi	r16, 0x19	; 25
    1cce:	11 05       	cpc	r17, r1
    1cd0:	91 f6       	brne	.-92     	; 0x1c76 <_ZN7Display6analogEhhhh+0x2ee>
		}

		r=17;
		//Berechnen des Stundenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(stunde*30.0+minute/2.0)*M_PI/180.0-M_PI/2.0;
    1cd2:	ed 81       	ldd	r30, Y+5	; 0x05
    1cd4:	6e 2f       	mov	r22, r30
    1cd6:	70 e0       	ldi	r23, 0x00	; 0
    1cd8:	80 e0       	ldi	r24, 0x00	; 0
    1cda:	90 e0       	ldi	r25, 0x00	; 0
    1cdc:	0e 94 4b 3f 	call	0x7e96	; 0x7e96 <__floatsisf>
    1ce0:	20 e0       	ldi	r18, 0x00	; 0
    1ce2:	30 e0       	ldi	r19, 0x00	; 0
    1ce4:	40 ef       	ldi	r20, 0xF0	; 240
    1ce6:	51 e4       	ldi	r21, 0x41	; 65
    1ce8:	0e 94 64 40 	call	0x80c8	; 0x80c8 <__mulsf3>
    1cec:	6b 01       	movw	r12, r22
    1cee:	7c 01       	movw	r14, r24
    1cf0:	20 e0       	ldi	r18, 0x00	; 0
    1cf2:	30 e0       	ldi	r19, 0x00	; 0
    1cf4:	40 e0       	ldi	r20, 0x00	; 0
    1cf6:	5f e3       	ldi	r21, 0x3F	; 63
    1cf8:	69 81       	ldd	r22, Y+1	; 0x01
    1cfa:	7a 81       	ldd	r23, Y+2	; 0x02
    1cfc:	8b 81       	ldd	r24, Y+3	; 0x03
    1cfe:	9c 81       	ldd	r25, Y+4	; 0x04
    1d00:	0e 94 64 40 	call	0x80c8	; 0x80c8 <__mulsf3>
    1d04:	9b 01       	movw	r18, r22
    1d06:	ac 01       	movw	r20, r24
    1d08:	c7 01       	movw	r24, r14
    1d0a:	b6 01       	movw	r22, r12
    1d0c:	0e 94 49 3e 	call	0x7c92	; 0x7c92 <__addsf3>
    1d10:	2b ed       	ldi	r18, 0xDB	; 219
    1d12:	3f e0       	ldi	r19, 0x0F	; 15
    1d14:	49 e4       	ldi	r20, 0x49	; 73
    1d16:	50 e4       	ldi	r21, 0x40	; 64
    1d18:	0e 94 64 40 	call	0x80c8	; 0x80c8 <__mulsf3>
    1d1c:	20 e0       	ldi	r18, 0x00	; 0
    1d1e:	30 e0       	ldi	r19, 0x00	; 0
    1d20:	44 e3       	ldi	r20, 0x34	; 52
    1d22:	53 e4       	ldi	r21, 0x43	; 67
    1d24:	0e 94 b0 3e 	call	0x7d60	; 0x7d60 <__divsf3>
    1d28:	2b ed       	ldi	r18, 0xDB	; 219
    1d2a:	3f e0       	ldi	r19, 0x0F	; 15
    1d2c:	49 ec       	ldi	r20, 0xC9	; 201
    1d2e:	5f e3       	ldi	r21, 0x3F	; 63
    1d30:	0e 94 48 3e 	call	0x7c90	; 0x7c90 <__subsf3>
    1d34:	6b 01       	movw	r12, r22
    1d36:	7c 01       	movw	r14, r24
			x= (uint8_t) i*cos(winkel) +Px;
    1d38:	0e 94 ad 3e 	call	0x7d5a	; 0x7d5a <cos>
    1d3c:	4b 01       	movw	r8, r22
    1d3e:	5c 01       	movw	r10, r24
			y= (uint8_t) i*sin(winkel) +Py;
    1d40:	c7 01       	movw	r24, r14
    1d42:	b6 01       	movw	r22, r12
    1d44:	0e 94 13 41 	call	0x8226	; 0x8226 <sin>
    1d48:	2b 01       	movw	r4, r22
    1d4a:	3c 01       	movw	r6, r24
    1d4c:	00 e0       	ldi	r16, 0x00	; 0
    1d4e:	10 e0       	ldi	r17, 0x00	; 0

		r=17;
		//Berechnen des Stundenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(stunde*30.0+minute/2.0)*M_PI/180.0-M_PI/2.0;
			x= (uint8_t) i*cos(winkel) +Px;
    1d50:	b8 01       	movw	r22, r16
    1d52:	01 2e       	mov	r0, r17
    1d54:	00 0c       	add	r0, r0
    1d56:	88 0b       	sbc	r24, r24
    1d58:	99 0b       	sbc	r25, r25
    1d5a:	0e 94 4b 3f 	call	0x7e96	; 0x7e96 <__floatsisf>
    1d5e:	6b 01       	movw	r12, r22
    1d60:	7c 01       	movw	r14, r24
			y= (uint8_t) i*sin(winkel) +Py;
    1d62:	a3 01       	movw	r20, r6
    1d64:	92 01       	movw	r18, r4
    1d66:	0e 94 64 40 	call	0x80c8	; 0x80c8 <__mulsf3>
    1d6a:	20 e0       	ldi	r18, 0x00	; 0
    1d6c:	30 e0       	ldi	r19, 0x00	; 0
    1d6e:	48 ef       	ldi	r20, 0xF8	; 248
    1d70:	51 e4       	ldi	r21, 0x41	; 65
    1d72:	0e 94 49 3e 	call	0x7c92	; 0x7c92 <__addsf3>
    1d76:	0e 94 1d 3f 	call	0x7e3a	; 0x7e3a <__fixunssfsi>
    1d7a:	36 2e       	mov	r3, r22

		r=17;
		//Berechnen des Stundenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(stunde*30.0+minute/2.0)*M_PI/180.0-M_PI/2.0;
			x= (uint8_t) i*cos(winkel) +Px;
    1d7c:	a5 01       	movw	r20, r10
    1d7e:	94 01       	movw	r18, r8
    1d80:	c7 01       	movw	r24, r14
    1d82:	b6 01       	movw	r22, r12
    1d84:	0e 94 64 40 	call	0x80c8	; 0x80c8 <__mulsf3>
    1d88:	20 e0       	ldi	r18, 0x00	; 0
    1d8a:	30 e0       	ldi	r19, 0x00	; 0
    1d8c:	48 ef       	ldi	r20, 0xF8	; 248
    1d8e:	51 e4       	ldi	r21, 0x41	; 65
    1d90:	0e 94 49 3e 	call	0x7c92	; 0x7c92 <__addsf3>
    1d94:	0e 94 1d 3f 	call	0x7e3a	; 0x7e3a <__fixunssfsi>
			y= (uint8_t) i*sin(winkel) +Py;

			drawPixel(x,y,0);
    1d98:	20 e0       	ldi	r18, 0x00	; 0
    1d9a:	43 2d       	mov	r20, r3
    1d9c:	8e 81       	ldd	r24, Y+6	; 0x06
    1d9e:	9f 81       	ldd	r25, Y+7	; 0x07
    1da0:	c3 dc       	rcall	.-1658   	; 0x1728 <_ZN7Display9drawPixelEhhh>
    1da2:	0f 5f       	subi	r16, 0xFF	; 255
    1da4:	1f 4f       	sbci	r17, 0xFF	; 255
			drawPixel(x,y,0);
		}

		r=17;
		//Berechnen des Stundenzeigers
		for(uint8_t i=0;i<r;i++){
    1da6:	01 31       	cpi	r16, 0x11	; 17
    1da8:	11 05       	cpc	r17, r1
    1daa:	91 f6       	brne	.-92     	; 0x1d50 <_ZN7Display6analogEhhhh+0x3c8>
		}
	}
	

	//Anzeige der Zahlen
	draw_ASCI('1',32-charsize,0);
    1dac:	20 e0       	ldi	r18, 0x00	; 0
    1dae:	4a e1       	ldi	r20, 0x1A	; 26
    1db0:	61 e3       	ldi	r22, 0x31	; 49
    1db2:	8e 81       	ldd	r24, Y+6	; 0x06
    1db4:	9f 81       	ldd	r25, Y+7	; 0x07
    1db6:	24 dd       	rcall	.-1464   	; 0x1800 <_ZN7Display9draw_ASCIEhhh>
	draw_ASCI('2',32,0);
    1db8:	20 e0       	ldi	r18, 0x00	; 0
    1dba:	40 e2       	ldi	r20, 0x20	; 32
    1dbc:	62 e3       	ldi	r22, 0x32	; 50
    1dbe:	8e 81       	ldd	r24, Y+6	; 0x06
    1dc0:	9f 81       	ldd	r25, Y+7	; 0x07
    1dc2:	1e dd       	rcall	.-1476   	; 0x1800 <_ZN7Display9draw_ASCIEhhh>
	draw_ASCI('3',64-charsize,4*charhighte-charhighte/2);
    1dc4:	2c e1       	ldi	r18, 0x1C	; 28
    1dc6:	4a e3       	ldi	r20, 0x3A	; 58
    1dc8:	63 e3       	ldi	r22, 0x33	; 51
    1dca:	8e 81       	ldd	r24, Y+6	; 0x06
    1dcc:	9f 81       	ldd	r25, Y+7	; 0x07
    1dce:	18 dd       	rcall	.-1488   	; 0x1800 <_ZN7Display9draw_ASCIEhhh>
	draw_ASCI('6',32-charsize/2,7*charhighte);
    1dd0:	28 e3       	ldi	r18, 0x38	; 56
    1dd2:	4d e1       	ldi	r20, 0x1D	; 29
    1dd4:	66 e3       	ldi	r22, 0x36	; 54
    1dd6:	8e 81       	ldd	r24, Y+6	; 0x06
    1dd8:	9f 81       	ldd	r25, Y+7	; 0x07
    1dda:	12 dd       	rcall	.-1500   	; 0x1800 <_ZN7Display9draw_ASCIEhhh>
	draw_ASCI('9',0,4*charhighte-charhighte/2);
    1ddc:	2c e1       	ldi	r18, 0x1C	; 28
    1dde:	40 e0       	ldi	r20, 0x00	; 0
    1de0:	69 e3       	ldi	r22, 0x39	; 57
    1de2:	8e 81       	ldd	r24, Y+6	; 0x06
    1de4:	9f 81       	ldd	r25, Y+7	; 0x07
    1de6:	0c dd       	rcall	.-1512   	; 0x1800 <_ZN7Display9draw_ASCIEhhh>

	//anzeige des Rings fuer die Restlichen Stunden Zahlen
	//1
	drawPixel(26*cos((30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
    1de8:	20 e0       	ldi	r18, 0x00	; 0
    1dea:	48 e0       	ldi	r20, 0x08	; 8
    1dec:	6c e2       	ldi	r22, 0x2C	; 44
    1dee:	8e 81       	ldd	r24, Y+6	; 0x06
    1df0:	9f 81       	ldd	r25, Y+7	; 0x07
    1df2:	9a dc       	rcall	.-1740   	; 0x1728 <_ZN7Display9drawPixelEhhh>
	//2
	drawPixel(26*cos((2*30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((2*30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
    1df4:	20 e0       	ldi	r18, 0x00	; 0
    1df6:	42 e1       	ldi	r20, 0x12	; 18
    1df8:	65 e3       	ldi	r22, 0x35	; 53
    1dfa:	8e 81       	ldd	r24, Y+6	; 0x06
    1dfc:	9f 81       	ldd	r25, Y+7	; 0x07
    1dfe:	94 dc       	rcall	.-1752   	; 0x1728 <_ZN7Display9drawPixelEhhh>
	//4
	drawPixel(26*cos((4*30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((4*30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
    1e00:	20 e0       	ldi	r18, 0x00	; 0
    1e02:	4c e2       	ldi	r20, 0x2C	; 44
    1e04:	65 e3       	ldi	r22, 0x35	; 53
    1e06:	8e 81       	ldd	r24, Y+6	; 0x06
    1e08:	9f 81       	ldd	r25, Y+7	; 0x07
    1e0a:	8e dc       	rcall	.-1764   	; 0x1728 <_ZN7Display9drawPixelEhhh>
	//5
	drawPixel(26*cos((5*30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((5*30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
    1e0c:	20 e0       	ldi	r18, 0x00	; 0
    1e0e:	45 e3       	ldi	r20, 0x35	; 53
    1e10:	6b e2       	ldi	r22, 0x2B	; 43
    1e12:	8e 81       	ldd	r24, Y+6	; 0x06
    1e14:	9f 81       	ldd	r25, Y+7	; 0x07
    1e16:	88 dc       	rcall	.-1776   	; 0x1728 <_ZN7Display9drawPixelEhhh>
	//7
	drawPixel(26*cos((7*30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((7*30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
    1e18:	20 e0       	ldi	r18, 0x00	; 0
    1e1a:	45 e3       	ldi	r20, 0x35	; 53
    1e1c:	61 e1       	ldi	r22, 0x11	; 17
    1e1e:	8e 81       	ldd	r24, Y+6	; 0x06
    1e20:	9f 81       	ldd	r25, Y+7	; 0x07
    1e22:	82 dc       	rcall	.-1788   	; 0x1728 <_ZN7Display9drawPixelEhhh>
	//8
	drawPixel(26*cos((8*30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((8*30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
    1e24:	20 e0       	ldi	r18, 0x00	; 0
    1e26:	4c e2       	ldi	r20, 0x2C	; 44
    1e28:	68 e0       	ldi	r22, 0x08	; 8
    1e2a:	8e 81       	ldd	r24, Y+6	; 0x06
    1e2c:	9f 81       	ldd	r25, Y+7	; 0x07
    1e2e:	7c dc       	rcall	.-1800   	; 0x1728 <_ZN7Display9drawPixelEhhh>
	//10
	drawPixel(26*cos((10*30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((10*30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
    1e30:	20 e0       	ldi	r18, 0x00	; 0
    1e32:	41 e1       	ldi	r20, 0x11	; 17
    1e34:	68 e0       	ldi	r22, 0x08	; 8
    1e36:	8e 81       	ldd	r24, Y+6	; 0x06
    1e38:	9f 81       	ldd	r25, Y+7	; 0x07
    1e3a:	76 dc       	rcall	.-1812   	; 0x1728 <_ZN7Display9drawPixelEhhh>
	//11
	drawPixel(26*cos((11*30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((11*30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
    1e3c:	20 e0       	ldi	r18, 0x00	; 0
    1e3e:	48 e0       	ldi	r20, 0x08	; 8
    1e40:	62 e1       	ldi	r22, 0x12	; 18
    1e42:	8e 81       	ldd	r24, Y+6	; 0x06
    1e44:	9f 81       	ldd	r25, Y+7	; 0x07
    1e46:	70 dc       	rcall	.-1824   	; 0x1728 <_ZN7Display9drawPixelEhhh>
}
    1e48:	27 96       	adiw	r28, 0x07	; 7
    1e4a:	0f b6       	in	r0, 0x3f	; 63
    1e4c:	f8 94       	cli
    1e4e:	de bf       	out	0x3e, r29	; 62
    1e50:	0f be       	out	0x3f, r0	; 63
    1e52:	cd bf       	out	0x3d, r28	; 61
    1e54:	df 91       	pop	r29
    1e56:	cf 91       	pop	r28
    1e58:	1f 91       	pop	r17
    1e5a:	0f 91       	pop	r16
    1e5c:	ff 90       	pop	r15
    1e5e:	ef 90       	pop	r14
    1e60:	df 90       	pop	r13
    1e62:	cf 90       	pop	r12
    1e64:	bf 90       	pop	r11
    1e66:	af 90       	pop	r10
    1e68:	9f 90       	pop	r9
    1e6a:	8f 90       	pop	r8
    1e6c:	7f 90       	pop	r7
    1e6e:	6f 90       	pop	r6
    1e70:	5f 90       	pop	r5
    1e72:	4f 90       	pop	r4
    1e74:	3f 90       	pop	r3
    1e76:	2f 90       	pop	r2
    1e78:	08 95       	ret

00001e7a <mem_cpy>:

	if (   pb.idx >= 0		/* Flush buffered characters to the file */
		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
		&& (UINT)pb.idx == nw) return pb.nchr;
	return EOF;
}
    1e7a:	41 15       	cp	r20, r1
    1e7c:	51 05       	cpc	r21, r1
    1e7e:	51 f0       	breq	.+20     	; 0x1e94 <mem_cpy+0x1a>
    1e80:	a6 2f       	mov	r26, r22
    1e82:	b7 2f       	mov	r27, r23
    1e84:	fc 01       	movw	r30, r24
    1e86:	48 0f       	add	r20, r24
    1e88:	59 1f       	adc	r21, r25
    1e8a:	9d 91       	ld	r25, X+
    1e8c:	91 93       	st	Z+, r25
    1e8e:	e4 17       	cp	r30, r20
    1e90:	f5 07       	cpc	r31, r21
    1e92:	d9 f7       	brne	.-10     	; 0x1e8a <mem_cpy+0x10>
    1e94:	08 95       	ret

00001e96 <ld_clust>:
    1e96:	0f 93       	push	r16
    1e98:	1f 93       	push	r17
    1e9a:	dc 01       	movw	r26, r24
    1e9c:	fb 01       	movw	r30, r22
    1e9e:	93 8d       	ldd	r25, Z+27	; 0x1b
    1ea0:	69 2f       	mov	r22, r25
    1ea2:	70 e0       	ldi	r23, 0x00	; 0
    1ea4:	76 2f       	mov	r23, r22
    1ea6:	66 27       	eor	r22, r22
    1ea8:	82 8d       	ldd	r24, Z+26	; 0x1a
    1eaa:	68 2b       	or	r22, r24
    1eac:	80 e0       	ldi	r24, 0x00	; 0
    1eae:	90 e0       	ldi	r25, 0x00	; 0
    1eb0:	2c 91       	ld	r18, X
    1eb2:	23 30       	cpi	r18, 0x03	; 3
    1eb4:	79 f4       	brne	.+30     	; 0x1ed4 <ld_clust+0x3e>
    1eb6:	05 89       	ldd	r16, Z+21	; 0x15
    1eb8:	10 e0       	ldi	r17, 0x00	; 0
    1eba:	10 2f       	mov	r17, r16
    1ebc:	00 27       	eor	r16, r16
    1ebe:	24 89       	ldd	r18, Z+20	; 0x14
    1ec0:	02 2b       	or	r16, r18
    1ec2:	20 e0       	ldi	r18, 0x00	; 0
    1ec4:	30 e0       	ldi	r19, 0x00	; 0
    1ec6:	98 01       	movw	r18, r16
    1ec8:	11 27       	eor	r17, r17
    1eca:	00 27       	eor	r16, r16
    1ecc:	60 2b       	or	r22, r16
    1ece:	71 2b       	or	r23, r17
    1ed0:	82 2b       	or	r24, r18
    1ed2:	93 2b       	or	r25, r19
    1ed4:	1f 91       	pop	r17
    1ed6:	0f 91       	pop	r16
    1ed8:	08 95       	ret

00001eda <get_ldnumber>:
    1eda:	cf 93       	push	r28
    1edc:	df 93       	push	r29
    1ede:	ec 01       	movw	r28, r24
    1ee0:	a8 81       	ld	r26, Y
    1ee2:	b9 81       	ldd	r27, Y+1	; 0x01
    1ee4:	10 97       	sbiw	r26, 0x00	; 0
    1ee6:	f9 f0       	breq	.+62     	; 0x1f26 <get_ldnumber+0x4c>
    1ee8:	4c 91       	ld	r20, X
    1eea:	41 32       	cpi	r20, 0x21	; 33
    1eec:	58 f0       	brcs	.+22     	; 0x1f04 <get_ldnumber+0x2a>
    1eee:	4a 33       	cpi	r20, 0x3A	; 58
    1ef0:	31 f1       	breq	.+76     	; 0x1f3e <get_ldnumber+0x64>
    1ef2:	fd 01       	movw	r30, r26
    1ef4:	31 96       	adiw	r30, 0x01	; 1
    1ef6:	9f 01       	movw	r18, r30
    1ef8:	91 91       	ld	r25, Z+
    1efa:	91 32       	cpi	r25, 0x21	; 33
    1efc:	28 f0       	brcs	.+10     	; 0x1f08 <get_ldnumber+0x2e>
    1efe:	9a 33       	cpi	r25, 0x3A	; 58
    1f00:	d1 f7       	brne	.-12     	; 0x1ef6 <get_ldnumber+0x1c>
    1f02:	04 c0       	rjmp	.+8      	; 0x1f0c <get_ldnumber+0x32>
    1f04:	94 2f       	mov	r25, r20
    1f06:	9d 01       	movw	r18, r26
    1f08:	9a 33       	cpi	r25, 0x3A	; 58
    1f0a:	81 f4       	brne	.+32     	; 0x1f2c <get_ldnumber+0x52>
    1f0c:	cd 01       	movw	r24, r26
    1f0e:	01 96       	adiw	r24, 0x01	; 1
    1f10:	28 17       	cp	r18, r24
    1f12:	39 07       	cpc	r19, r25
    1f14:	71 f4       	brne	.+28     	; 0x1f32 <get_ldnumber+0x58>
    1f16:	40 33       	cpi	r20, 0x30	; 48
    1f18:	79 f4       	brne	.+30     	; 0x1f38 <get_ldnumber+0x5e>
    1f1a:	12 96       	adiw	r26, 0x02	; 2
    1f1c:	b9 83       	std	Y+1, r27	; 0x01
    1f1e:	a8 83       	st	Y, r26
    1f20:	80 e0       	ldi	r24, 0x00	; 0
    1f22:	90 e0       	ldi	r25, 0x00	; 0
    1f24:	0e c0       	rjmp	.+28     	; 0x1f42 <get_ldnumber+0x68>
    1f26:	8f ef       	ldi	r24, 0xFF	; 255
    1f28:	9f ef       	ldi	r25, 0xFF	; 255
    1f2a:	0b c0       	rjmp	.+22     	; 0x1f42 <get_ldnumber+0x68>
    1f2c:	80 e0       	ldi	r24, 0x00	; 0
    1f2e:	90 e0       	ldi	r25, 0x00	; 0
    1f30:	08 c0       	rjmp	.+16     	; 0x1f42 <get_ldnumber+0x68>
    1f32:	8f ef       	ldi	r24, 0xFF	; 255
    1f34:	9f ef       	ldi	r25, 0xFF	; 255
    1f36:	05 c0       	rjmp	.+10     	; 0x1f42 <get_ldnumber+0x68>
    1f38:	8f ef       	ldi	r24, 0xFF	; 255
    1f3a:	9f ef       	ldi	r25, 0xFF	; 255
    1f3c:	02 c0       	rjmp	.+4      	; 0x1f42 <get_ldnumber+0x68>
    1f3e:	9d 01       	movw	r18, r26
    1f40:	e5 cf       	rjmp	.-54     	; 0x1f0c <get_ldnumber+0x32>
    1f42:	df 91       	pop	r29
    1f44:	cf 91       	pop	r28
    1f46:	08 95       	ret

00001f48 <sync_window>:
    1f48:	8f 92       	push	r8
    1f4a:	9f 92       	push	r9
    1f4c:	af 92       	push	r10
    1f4e:	bf 92       	push	r11
    1f50:	cf 92       	push	r12
    1f52:	df 92       	push	r13
    1f54:	ef 92       	push	r14
    1f56:	ff 92       	push	r15
    1f58:	0f 93       	push	r16
    1f5a:	1f 93       	push	r17
    1f5c:	cf 93       	push	r28
    1f5e:	df 93       	push	r29
    1f60:	fc 01       	movw	r30, r24
    1f62:	24 81       	ldd	r18, Z+4	; 0x04
    1f64:	22 23       	and	r18, r18
    1f66:	09 f4       	brne	.+2      	; 0x1f6a <sync_window+0x22>
    1f68:	44 c0       	rjmp	.+136    	; 0x1ff2 <sync_window+0xaa>
    1f6a:	ec 01       	movw	r28, r24
    1f6c:	c2 a4       	ldd	r12, Z+42	; 0x2a
    1f6e:	d3 a4       	ldd	r13, Z+43	; 0x2b
    1f70:	e4 a4       	ldd	r14, Z+44	; 0x2c
    1f72:	f5 a4       	ldd	r15, Z+45	; 0x2d
    1f74:	5c 01       	movw	r10, r24
    1f76:	fe e2       	ldi	r31, 0x2E	; 46
    1f78:	af 0e       	add	r10, r31
    1f7a:	b1 1c       	adc	r11, r1
    1f7c:	01 e0       	ldi	r16, 0x01	; 1
    1f7e:	10 e0       	ldi	r17, 0x00	; 0
    1f80:	a7 01       	movw	r20, r14
    1f82:	96 01       	movw	r18, r12
    1f84:	b5 01       	movw	r22, r10
    1f86:	89 81       	ldd	r24, Y+1	; 0x01
    1f88:	f7 d8       	rcall	.-3602   	; 0x1178 <disk_write>
    1f8a:	81 11       	cpse	r24, r1
    1f8c:	34 c0       	rjmp	.+104    	; 0x1ff6 <sync_window+0xae>
    1f8e:	1c 82       	std	Y+4, r1	; 0x04
    1f90:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1f92:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1f94:	a8 a1       	ldd	r26, Y+32	; 0x20
    1f96:	b9 a1       	ldd	r27, Y+33	; 0x21
    1f98:	b7 01       	movw	r22, r14
    1f9a:	a6 01       	movw	r20, r12
    1f9c:	48 1b       	sub	r20, r24
    1f9e:	59 0b       	sbc	r21, r25
    1fa0:	6a 0b       	sbc	r22, r26
    1fa2:	7b 0b       	sbc	r23, r27
    1fa4:	8e 89       	ldd	r24, Y+22	; 0x16
    1fa6:	9f 89       	ldd	r25, Y+23	; 0x17
    1fa8:	a8 8d       	ldd	r26, Y+24	; 0x18
    1faa:	b9 8d       	ldd	r27, Y+25	; 0x19
    1fac:	48 17       	cp	r20, r24
    1fae:	59 07       	cpc	r21, r25
    1fb0:	6a 07       	cpc	r22, r26
    1fb2:	7b 07       	cpc	r23, r27
    1fb4:	10 f5       	brcc	.+68     	; 0x1ffa <sync_window+0xb2>
    1fb6:	8b 80       	ldd	r8, Y+3	; 0x03
    1fb8:	91 2c       	mov	r9, r1
    1fba:	82 e0       	ldi	r24, 0x02	; 2
    1fbc:	88 16       	cp	r8, r24
    1fbe:	91 04       	cpc	r9, r1
    1fc0:	f0 f0       	brcs	.+60     	; 0x1ffe <sync_window+0xb6>
    1fc2:	8e 89       	ldd	r24, Y+22	; 0x16
    1fc4:	9f 89       	ldd	r25, Y+23	; 0x17
    1fc6:	a8 8d       	ldd	r26, Y+24	; 0x18
    1fc8:	b9 8d       	ldd	r27, Y+25	; 0x19
    1fca:	c8 0e       	add	r12, r24
    1fcc:	d9 1e       	adc	r13, r25
    1fce:	ea 1e       	adc	r14, r26
    1fd0:	fb 1e       	adc	r15, r27
    1fd2:	01 e0       	ldi	r16, 0x01	; 1
    1fd4:	10 e0       	ldi	r17, 0x00	; 0
    1fd6:	a7 01       	movw	r20, r14
    1fd8:	96 01       	movw	r18, r12
    1fda:	b5 01       	movw	r22, r10
    1fdc:	89 81       	ldd	r24, Y+1	; 0x01
    1fde:	cc d8       	rcall	.-3688   	; 0x1178 <disk_write>
    1fe0:	e1 e0       	ldi	r30, 0x01	; 1
    1fe2:	8e 1a       	sub	r8, r30
    1fe4:	91 08       	sbc	r9, r1
    1fe6:	f1 e0       	ldi	r31, 0x01	; 1
    1fe8:	8f 16       	cp	r8, r31
    1fea:	91 04       	cpc	r9, r1
    1fec:	51 f7       	brne	.-44     	; 0x1fc2 <sync_window+0x7a>
    1fee:	80 e0       	ldi	r24, 0x00	; 0
    1ff0:	07 c0       	rjmp	.+14     	; 0x2000 <sync_window+0xb8>
    1ff2:	80 e0       	ldi	r24, 0x00	; 0
    1ff4:	05 c0       	rjmp	.+10     	; 0x2000 <sync_window+0xb8>
    1ff6:	81 e0       	ldi	r24, 0x01	; 1
    1ff8:	03 c0       	rjmp	.+6      	; 0x2000 <sync_window+0xb8>
    1ffa:	80 e0       	ldi	r24, 0x00	; 0
    1ffc:	01 c0       	rjmp	.+2      	; 0x2000 <sync_window+0xb8>
    1ffe:	80 e0       	ldi	r24, 0x00	; 0
    2000:	df 91       	pop	r29
    2002:	cf 91       	pop	r28
    2004:	1f 91       	pop	r17
    2006:	0f 91       	pop	r16
    2008:	ff 90       	pop	r15
    200a:	ef 90       	pop	r14
    200c:	df 90       	pop	r13
    200e:	cf 90       	pop	r12
    2010:	bf 90       	pop	r11
    2012:	af 90       	pop	r10
    2014:	9f 90       	pop	r9
    2016:	8f 90       	pop	r8
    2018:	08 95       	ret

0000201a <move_window>:
    201a:	8f 92       	push	r8
    201c:	9f 92       	push	r9
    201e:	af 92       	push	r10
    2020:	bf 92       	push	r11
    2022:	ff 92       	push	r15
    2024:	0f 93       	push	r16
    2026:	1f 93       	push	r17
    2028:	cf 93       	push	r28
    202a:	df 93       	push	r29
    202c:	ec 01       	movw	r28, r24
    202e:	4a 01       	movw	r8, r20
    2030:	5b 01       	movw	r10, r22
    2032:	8a a5       	ldd	r24, Y+42	; 0x2a
    2034:	9b a5       	ldd	r25, Y+43	; 0x2b
    2036:	ac a5       	ldd	r26, Y+44	; 0x2c
    2038:	bd a5       	ldd	r27, Y+45	; 0x2d
    203a:	84 17       	cp	r24, r20
    203c:	95 07       	cpc	r25, r21
    203e:	a6 07       	cpc	r26, r22
    2040:	b7 07       	cpc	r27, r23
    2042:	d9 f0       	breq	.+54     	; 0x207a <move_window+0x60>
    2044:	ce 01       	movw	r24, r28
    2046:	80 df       	rcall	.-256    	; 0x1f48 <sync_window>
    2048:	f8 2e       	mov	r15, r24
    204a:	81 11       	cpse	r24, r1
    204c:	17 c0       	rjmp	.+46     	; 0x207c <move_window+0x62>
    204e:	01 e0       	ldi	r16, 0x01	; 1
    2050:	10 e0       	ldi	r17, 0x00	; 0
    2052:	a5 01       	movw	r20, r10
    2054:	94 01       	movw	r18, r8
    2056:	be 01       	movw	r22, r28
    2058:	62 5d       	subi	r22, 0xD2	; 210
    205a:	7f 4f       	sbci	r23, 0xFF	; 255
    205c:	89 81       	ldd	r24, Y+1	; 0x01
    205e:	3a d8       	rcall	.-3980   	; 0x10d4 <disk_read>
    2060:	88 23       	and	r24, r24
    2062:	31 f0       	breq	.+12     	; 0x2070 <move_window+0x56>
    2064:	ff 24       	eor	r15, r15
    2066:	f3 94       	inc	r15
    2068:	88 24       	eor	r8, r8
    206a:	8a 94       	dec	r8
    206c:	98 2c       	mov	r9, r8
    206e:	54 01       	movw	r10, r8
    2070:	8a a6       	std	Y+42, r8	; 0x2a
    2072:	9b a6       	std	Y+43, r9	; 0x2b
    2074:	ac a6       	std	Y+44, r10	; 0x2c
    2076:	bd a6       	std	Y+45, r11	; 0x2d
    2078:	01 c0       	rjmp	.+2      	; 0x207c <move_window+0x62>
    207a:	f1 2c       	mov	r15, r1
    207c:	8f 2d       	mov	r24, r15
    207e:	df 91       	pop	r29
    2080:	cf 91       	pop	r28
    2082:	1f 91       	pop	r17
    2084:	0f 91       	pop	r16
    2086:	ff 90       	pop	r15
    2088:	bf 90       	pop	r11
    208a:	af 90       	pop	r10
    208c:	9f 90       	pop	r9
    208e:	8f 90       	pop	r8
    2090:	08 95       	ret

00002092 <check_fs>:
    2092:	cf 93       	push	r28
    2094:	df 93       	push	r29
    2096:	ec 01       	movw	r28, r24
    2098:	1c 82       	std	Y+4, r1	; 0x04
    209a:	8f ef       	ldi	r24, 0xFF	; 255
    209c:	9f ef       	ldi	r25, 0xFF	; 255
    209e:	dc 01       	movw	r26, r24
    20a0:	8a a7       	std	Y+42, r24	; 0x2a
    20a2:	9b a7       	std	Y+43, r25	; 0x2b
    20a4:	ac a7       	std	Y+44, r26	; 0x2c
    20a6:	bd a7       	std	Y+45, r27	; 0x2d
    20a8:	ce 01       	movw	r24, r28
    20aa:	b7 df       	rcall	.-146    	; 0x201a <move_window>
    20ac:	81 11       	cpse	r24, r1
    20ae:	51 c0       	rjmp	.+162    	; 0x2152 <check_fs+0xc0>
    20b0:	fe 01       	movw	r30, r28
    20b2:	e3 5d       	subi	r30, 0xD3	; 211
    20b4:	fd 4f       	sbci	r31, 0xFD	; 253
    20b6:	80 81       	ld	r24, Z
    20b8:	90 e0       	ldi	r25, 0x00	; 0
    20ba:	98 2f       	mov	r25, r24
    20bc:	88 27       	eor	r24, r24
    20be:	31 97       	sbiw	r30, 0x01	; 1
    20c0:	20 81       	ld	r18, Z
    20c2:	82 2b       	or	r24, r18
    20c4:	85 35       	cpi	r24, 0x55	; 85
    20c6:	9a 4a       	sbci	r25, 0xAA	; 170
    20c8:	09 f0       	breq	.+2      	; 0x20cc <check_fs+0x3a>
    20ca:	45 c0       	rjmp	.+138    	; 0x2156 <check_fs+0xc4>
    20cc:	e5 5c       	subi	r30, 0xC5	; 197
    20ce:	f1 40       	sbci	r31, 0x01	; 1
    20d0:	20 81       	ld	r18, Z
    20d2:	31 97       	sbiw	r30, 0x01	; 1
    20d4:	80 81       	ld	r24, Z
    20d6:	90 e0       	ldi	r25, 0x00	; 0
    20d8:	a0 e0       	ldi	r26, 0x00	; 0
    20da:	b0 e0       	ldi	r27, 0x00	; 0
    20dc:	dc 01       	movw	r26, r24
    20de:	99 27       	eor	r25, r25
    20e0:	88 27       	eor	r24, r24
    20e2:	b2 2b       	or	r27, r18
    20e4:	32 97       	sbiw	r30, 0x02	; 2
    20e6:	20 81       	ld	r18, Z
    20e8:	82 2b       	or	r24, r18
    20ea:	31 96       	adiw	r30, 0x01	; 1
    20ec:	40 81       	ld	r20, Z
    20ee:	50 e0       	ldi	r21, 0x00	; 0
    20f0:	54 2f       	mov	r21, r20
    20f2:	44 27       	eor	r20, r20
    20f4:	60 e0       	ldi	r22, 0x00	; 0
    20f6:	70 e0       	ldi	r23, 0x00	; 0
    20f8:	84 2b       	or	r24, r20
    20fa:	95 2b       	or	r25, r21
    20fc:	a6 2b       	or	r26, r22
    20fe:	b7 2b       	or	r27, r23
    2100:	bb 27       	eor	r27, r27
    2102:	86 34       	cpi	r24, 0x46	; 70
    2104:	91 44       	sbci	r25, 0x41	; 65
    2106:	a4 45       	sbci	r26, 0x54	; 84
    2108:	b1 05       	cpc	r27, r1
    210a:	39 f1       	breq	.+78     	; 0x215a <check_fs+0xc8>
    210c:	7e 96       	adiw	r30, 0x1e	; 30
    210e:	80 81       	ld	r24, Z
    2110:	31 97       	sbiw	r30, 0x01	; 1
    2112:	40 81       	ld	r20, Z
    2114:	50 e0       	ldi	r21, 0x00	; 0
    2116:	60 e0       	ldi	r22, 0x00	; 0
    2118:	70 e0       	ldi	r23, 0x00	; 0
    211a:	ba 01       	movw	r22, r20
    211c:	55 27       	eor	r21, r21
    211e:	44 27       	eor	r20, r20
    2120:	78 2b       	or	r23, r24
    2122:	32 97       	sbiw	r30, 0x02	; 2
    2124:	80 81       	ld	r24, Z
    2126:	48 2b       	or	r20, r24
    2128:	cf 57       	subi	r28, 0x7F	; 127
    212a:	df 4f       	sbci	r29, 0xFF	; 255
    212c:	88 81       	ld	r24, Y
    212e:	90 e0       	ldi	r25, 0x00	; 0
    2130:	98 2f       	mov	r25, r24
    2132:	88 27       	eor	r24, r24
    2134:	a0 e0       	ldi	r26, 0x00	; 0
    2136:	b0 e0       	ldi	r27, 0x00	; 0
    2138:	48 2b       	or	r20, r24
    213a:	59 2b       	or	r21, r25
    213c:	6a 2b       	or	r22, r26
    213e:	7b 2b       	or	r23, r27
    2140:	77 27       	eor	r23, r23
    2142:	81 e0       	ldi	r24, 0x01	; 1
    2144:	46 34       	cpi	r20, 0x46	; 70
    2146:	51 44       	sbci	r21, 0x41	; 65
    2148:	64 45       	sbci	r22, 0x54	; 84
    214a:	71 05       	cpc	r23, r1
    214c:	39 f4       	brne	.+14     	; 0x215c <check_fs+0xca>
    214e:	80 e0       	ldi	r24, 0x00	; 0
    2150:	05 c0       	rjmp	.+10     	; 0x215c <check_fs+0xca>
    2152:	83 e0       	ldi	r24, 0x03	; 3
    2154:	03 c0       	rjmp	.+6      	; 0x215c <check_fs+0xca>
    2156:	82 e0       	ldi	r24, 0x02	; 2
    2158:	01 c0       	rjmp	.+2      	; 0x215c <check_fs+0xca>
    215a:	80 e0       	ldi	r24, 0x00	; 0
    215c:	df 91       	pop	r29
    215e:	cf 91       	pop	r28
    2160:	08 95       	ret

00002162 <validate>:
    2162:	00 97       	sbiw	r24, 0x00	; 0
    2164:	c9 f0       	breq	.+50     	; 0x2198 <validate+0x36>
    2166:	dc 01       	movw	r26, r24
    2168:	ed 91       	ld	r30, X+
    216a:	fc 91       	ld	r31, X
    216c:	11 97       	sbiw	r26, 0x01	; 1
    216e:	30 97       	sbiw	r30, 0x00	; 0
    2170:	a9 f0       	breq	.+42     	; 0x219c <validate+0x3a>
    2172:	20 81       	ld	r18, Z
    2174:	22 23       	and	r18, r18
    2176:	a1 f0       	breq	.+40     	; 0x21a0 <validate+0x3e>
    2178:	26 81       	ldd	r18, Z+6	; 0x06
    217a:	37 81       	ldd	r19, Z+7	; 0x07
    217c:	12 96       	adiw	r26, 0x02	; 2
    217e:	8d 91       	ld	r24, X+
    2180:	9c 91       	ld	r25, X
    2182:	13 97       	sbiw	r26, 0x03	; 3
    2184:	28 17       	cp	r18, r24
    2186:	39 07       	cpc	r19, r25
    2188:	69 f4       	brne	.+26     	; 0x21a4 <validate+0x42>
    218a:	81 81       	ldd	r24, Z+1	; 0x01
    218c:	0e 94 63 08 	call	0x10c6	; 0x10c6 <disk_status>
    2190:	80 ff       	sbrs	r24, 0
    2192:	0a c0       	rjmp	.+20     	; 0x21a8 <validate+0x46>
    2194:	89 e0       	ldi	r24, 0x09	; 9
    2196:	08 95       	ret
    2198:	89 e0       	ldi	r24, 0x09	; 9
    219a:	08 95       	ret
    219c:	89 e0       	ldi	r24, 0x09	; 9
    219e:	08 95       	ret
    21a0:	89 e0       	ldi	r24, 0x09	; 9
    21a2:	08 95       	ret
    21a4:	89 e0       	ldi	r24, 0x09	; 9
    21a6:	08 95       	ret
    21a8:	80 e0       	ldi	r24, 0x00	; 0
    21aa:	08 95       	ret

000021ac <find_volume>:
    21ac:	2f 92       	push	r2
    21ae:	3f 92       	push	r3
    21b0:	4f 92       	push	r4
    21b2:	5f 92       	push	r5
    21b4:	6f 92       	push	r6
    21b6:	7f 92       	push	r7
    21b8:	8f 92       	push	r8
    21ba:	9f 92       	push	r9
    21bc:	af 92       	push	r10
    21be:	bf 92       	push	r11
    21c0:	cf 92       	push	r12
    21c2:	df 92       	push	r13
    21c4:	ef 92       	push	r14
    21c6:	ff 92       	push	r15
    21c8:	0f 93       	push	r16
    21ca:	1f 93       	push	r17
    21cc:	cf 93       	push	r28
    21ce:	df 93       	push	r29
    21d0:	cd b7       	in	r28, 0x3d	; 61
    21d2:	de b7       	in	r29, 0x3e	; 62
    21d4:	6d 97       	sbiw	r28, 0x1d	; 29
    21d6:	0f b6       	in	r0, 0x3f	; 63
    21d8:	f8 94       	cli
    21da:	de bf       	out	0x3e, r29	; 62
    21dc:	0f be       	out	0x3f, r0	; 63
    21de:	cd bf       	out	0x3d, r28	; 61
    21e0:	6c 01       	movw	r12, r24
    21e2:	cb 01       	movw	r24, r22
    21e4:	b4 2e       	mov	r11, r20
    21e6:	d6 01       	movw	r26, r12
    21e8:	1d 92       	st	X+, r1
    21ea:	1c 92       	st	X, r1
    21ec:	76 de       	rcall	.-788    	; 0x1eda <get_ldnumber>
    21ee:	7c 01       	movw	r14, r24
    21f0:	99 23       	and	r25, r25
    21f2:	0c f4       	brge	.+2      	; 0x21f6 <find_volume+0x4a>
    21f4:	d7 c2       	rjmp	.+1454   	; 0x27a4 <find_volume+0x5f8>
    21f6:	fc 01       	movw	r30, r24
    21f8:	ee 0f       	add	r30, r30
    21fa:	ff 1f       	adc	r31, r31
    21fc:	e9 5d       	subi	r30, 0xD9	; 217
    21fe:	fb 4f       	sbci	r31, 0xFB	; 251
    2200:	00 81       	ld	r16, Z
    2202:	11 81       	ldd	r17, Z+1	; 0x01
    2204:	01 15       	cp	r16, r1
    2206:	11 05       	cpc	r17, r1
    2208:	09 f4       	brne	.+2      	; 0x220c <find_volume+0x60>
    220a:	ce c2       	rjmp	.+1436   	; 0x27a8 <find_volume+0x5fc>
    220c:	f6 01       	movw	r30, r12
    220e:	11 83       	std	Z+1, r17	; 0x01
    2210:	00 83       	st	Z, r16
    2212:	d8 01       	movw	r26, r16
    2214:	8c 91       	ld	r24, X
    2216:	88 23       	and	r24, r24
    2218:	69 f0       	breq	.+26     	; 0x2234 <find_volume+0x88>
    221a:	11 96       	adiw	r26, 0x01	; 1
    221c:	8c 91       	ld	r24, X
    221e:	0e 94 63 08 	call	0x10c6	; 0x10c6 <disk_status>
    2222:	80 fd       	sbrc	r24, 0
    2224:	07 c0       	rjmp	.+14     	; 0x2234 <find_volume+0x88>
    2226:	bb 20       	and	r11, r11
    2228:	09 f4       	brne	.+2      	; 0x222c <find_volume+0x80>
    222a:	c0 c2       	rjmp	.+1408   	; 0x27ac <find_volume+0x600>
    222c:	82 ff       	sbrs	r24, 2
    222e:	c0 c2       	rjmp	.+1408   	; 0x27b0 <find_volume+0x604>
    2230:	8a e0       	ldi	r24, 0x0A	; 10
    2232:	65 c3       	rjmp	.+1738   	; 0x28fe <find_volume+0x752>
    2234:	f8 01       	movw	r30, r16
    2236:	10 82       	st	Z, r1
    2238:	e1 82       	std	Z+1, r14	; 0x01
    223a:	8e 2d       	mov	r24, r14
    223c:	0e 94 a2 07 	call	0xf44	; 0xf44 <disk_initialize>
    2240:	80 fd       	sbrc	r24, 0
    2242:	b8 c2       	rjmp	.+1392   	; 0x27b4 <find_volume+0x608>
    2244:	bb 20       	and	r11, r11
    2246:	09 f4       	brne	.+2      	; 0x224a <find_volume+0x9e>
    2248:	d5 c2       	rjmp	.+1450   	; 0x27f4 <find_volume+0x648>
    224a:	82 fd       	sbrc	r24, 2
    224c:	b5 c2       	rjmp	.+1386   	; 0x27b8 <find_volume+0x60c>
    224e:	d2 c2       	rjmp	.+1444   	; 0x27f4 <find_volume+0x648>
    2250:	df 01       	movw	r26, r30
    2252:	17 97       	sbiw	r26, 0x07	; 7
    2254:	8c 91       	ld	r24, X
    2256:	88 23       	and	r24, r24
    2258:	b9 f0       	breq	.+46     	; 0x2288 <find_volume+0xdc>
    225a:	14 96       	adiw	r26, 0x04	; 4
    225c:	cc 90       	ld	r12, X
    225e:	80 81       	ld	r24, Z
    2260:	d1 2c       	mov	r13, r1
    2262:	e1 2c       	mov	r14, r1
    2264:	f1 2c       	mov	r15, r1
    2266:	f8 2a       	or	r15, r24
    2268:	12 96       	adiw	r26, 0x02	; 2
    226a:	8c 91       	ld	r24, X
    226c:	e8 2a       	or	r14, r24
    226e:	11 97       	sbiw	r26, 0x01	; 1
    2270:	ac 91       	ld	r26, X
    2272:	b0 e0       	ldi	r27, 0x00	; 0
    2274:	ba 2f       	mov	r27, r26
    2276:	aa 27       	eor	r26, r26
    2278:	cd 01       	movw	r24, r26
    227a:	a0 e0       	ldi	r26, 0x00	; 0
    227c:	b0 e0       	ldi	r27, 0x00	; 0
    227e:	c8 2a       	or	r12, r24
    2280:	d9 2a       	or	r13, r25
    2282:	ea 2a       	or	r14, r26
    2284:	fb 2a       	or	r15, r27
    2286:	04 c0       	rjmp	.+8      	; 0x2290 <find_volume+0xe4>
    2288:	c8 2c       	mov	r12, r8
    228a:	d9 2c       	mov	r13, r9
    228c:	e7 2e       	mov	r14, r23
    228e:	f6 2e       	mov	r15, r22
    2290:	d9 01       	movw	r26, r18
    2292:	cd 92       	st	X+, r12
    2294:	dd 92       	st	X+, r13
    2296:	ed 92       	st	X+, r14
    2298:	fd 92       	st	X+, r15
    229a:	9d 01       	movw	r18, r26
    229c:	70 96       	adiw	r30, 0x10	; 16
    229e:	e4 17       	cp	r30, r20
    22a0:	f5 07       	cpc	r31, r21
    22a2:	b1 f6       	brne	.-84     	; 0x2250 <find_volume+0xa4>
    22a4:	4e 01       	movw	r8, r28
    22a6:	b1 e1       	ldi	r27, 0x11	; 17
    22a8:	8b 0e       	add	r8, r27
    22aa:	91 1c       	adc	r9, r1
    22ac:	68 94       	set
    22ae:	77 24       	eor	r7, r7
    22b0:	71 f8       	bld	r7, 1
    22b2:	f5 01       	movw	r30, r10
    22b4:	c1 90       	ld	r12, Z+
    22b6:	d1 90       	ld	r13, Z+
    22b8:	e1 90       	ld	r14, Z+
    22ba:	f1 90       	ld	r15, Z+
    22bc:	5f 01       	movw	r10, r30
    22be:	c1 14       	cp	r12, r1
    22c0:	d1 04       	cpc	r13, r1
    22c2:	e1 04       	cpc	r14, r1
    22c4:	f1 04       	cpc	r15, r1
    22c6:	39 f0       	breq	.+14     	; 0x22d6 <find_volume+0x12a>
    22c8:	b7 01       	movw	r22, r14
    22ca:	a6 01       	movw	r20, r12
    22cc:	c8 01       	movw	r24, r16
    22ce:	e1 de       	rcall	.-574    	; 0x2092 <check_fs>
    22d0:	81 11       	cpse	r24, r1
    22d2:	02 c0       	rjmp	.+4      	; 0x22d8 <find_volume+0x12c>
    22d4:	0d c0       	rjmp	.+26     	; 0x22f0 <find_volume+0x144>
    22d6:	87 2d       	mov	r24, r7
    22d8:	a8 14       	cp	r10, r8
    22da:	b9 04       	cpc	r11, r9
    22dc:	51 f7       	brne	.-44     	; 0x22b2 <find_volume+0x106>
    22de:	03 c0       	rjmp	.+6      	; 0x22e6 <find_volume+0x13a>
    22e0:	c1 2c       	mov	r12, r1
    22e2:	d1 2c       	mov	r13, r1
    22e4:	76 01       	movw	r14, r12
    22e6:	83 30       	cpi	r24, 0x03	; 3
    22e8:	09 f4       	brne	.+2      	; 0x22ec <find_volume+0x140>
    22ea:	68 c2       	rjmp	.+1232   	; 0x27bc <find_volume+0x610>
    22ec:	81 11       	cpse	r24, r1
    22ee:	68 c2       	rjmp	.+1232   	; 0x27c0 <find_volume+0x614>
    22f0:	d8 01       	movw	r26, r16
    22f2:	da 96       	adiw	r26, 0x3a	; 58
    22f4:	8c 91       	ld	r24, X
    22f6:	da 97       	sbiw	r26, 0x3a	; 58
    22f8:	90 e0       	ldi	r25, 0x00	; 0
    22fa:	98 2f       	mov	r25, r24
    22fc:	88 27       	eor	r24, r24
    22fe:	d9 96       	adiw	r26, 0x39	; 57
    2300:	2c 91       	ld	r18, X
    2302:	82 2b       	or	r24, r18
    2304:	81 15       	cp	r24, r1
    2306:	92 40       	sbci	r25, 0x02	; 2
    2308:	09 f0       	breq	.+2      	; 0x230c <find_volume+0x160>
    230a:	5c c2       	rjmp	.+1208   	; 0x27c4 <find_volume+0x618>
    230c:	f8 01       	movw	r30, r16
    230e:	eb 5b       	subi	r30, 0xBB	; 187
    2310:	ff 4f       	sbci	r31, 0xFF	; 255
    2312:	80 80       	ld	r8, Z
    2314:	91 2c       	mov	r9, r1
    2316:	98 2c       	mov	r9, r8
    2318:	88 24       	eor	r8, r8
    231a:	31 97       	sbiw	r30, 0x01	; 1
    231c:	80 81       	ld	r24, Z
    231e:	88 2a       	or	r8, r24
    2320:	a1 2c       	mov	r10, r1
    2322:	b1 2c       	mov	r11, r1
    2324:	81 14       	cp	r8, r1
    2326:	91 04       	cpc	r9, r1
    2328:	a1 04       	cpc	r10, r1
    232a:	b1 04       	cpc	r11, r1
    232c:	e9 f4       	brne	.+58     	; 0x2368 <find_volume+0x1bc>
    232e:	71 96       	adiw	r30, 0x11	; 17
    2330:	80 81       	ld	r24, Z
    2332:	31 97       	sbiw	r30, 0x01	; 1
    2334:	80 80       	ld	r8, Z
    2336:	91 2c       	mov	r9, r1
    2338:	a1 2c       	mov	r10, r1
    233a:	b1 2c       	mov	r11, r1
    233c:	54 01       	movw	r10, r8
    233e:	99 24       	eor	r9, r9
    2340:	88 24       	eor	r8, r8
    2342:	b8 2a       	or	r11, r24
    2344:	32 97       	sbiw	r30, 0x02	; 2
    2346:	80 81       	ld	r24, Z
    2348:	a5 01       	movw	r20, r10
    234a:	94 01       	movw	r18, r8
    234c:	28 2b       	or	r18, r24
    234e:	da 01       	movw	r26, r20
    2350:	c9 01       	movw	r24, r18
    2352:	31 96       	adiw	r30, 0x01	; 1
    2354:	80 80       	ld	r8, Z
    2356:	91 2c       	mov	r9, r1
    2358:	98 2c       	mov	r9, r8
    235a:	88 24       	eor	r8, r8
    235c:	a1 2c       	mov	r10, r1
    235e:	b1 2c       	mov	r11, r1
    2360:	88 2a       	or	r8, r24
    2362:	99 2a       	or	r9, r25
    2364:	aa 2a       	or	r10, r26
    2366:	bb 2a       	or	r11, r27
    2368:	d8 01       	movw	r26, r16
    236a:	56 96       	adiw	r26, 0x16	; 22
    236c:	8d 92       	st	X+, r8
    236e:	9d 92       	st	X+, r9
    2370:	ad 92       	st	X+, r10
    2372:	bc 92       	st	X, r11
    2374:	59 97       	sbiw	r26, 0x19	; 25
    2376:	de 96       	adiw	r26, 0x3e	; 62
    2378:	ac 91       	ld	r26, X
    237a:	f8 01       	movw	r30, r16
    237c:	a3 83       	std	Z+3, r26	; 0x03
    237e:	8f ef       	ldi	r24, 0xFF	; 255
    2380:	8a 0f       	add	r24, r26
    2382:	82 30       	cpi	r24, 0x02	; 2
    2384:	08 f0       	brcs	.+2      	; 0x2388 <find_volume+0x1dc>
    2386:	20 c2       	rjmp	.+1088   	; 0x27c8 <find_volume+0x61c>
    2388:	f3 ad       	ldd	r31, Z+59	; 0x3b
    238a:	f9 8b       	std	Y+17, r31	; 0x11
    238c:	2f 2f       	mov	r18, r31
    238e:	f8 01       	movw	r30, r16
    2390:	22 83       	std	Z+2, r18	; 0x02
    2392:	22 23       	and	r18, r18
    2394:	09 f4       	brne	.+2      	; 0x2398 <find_volume+0x1ec>
    2396:	1a c2       	rjmp	.+1076   	; 0x27cc <find_volume+0x620>
    2398:	82 2f       	mov	r24, r18
    239a:	90 e0       	ldi	r25, 0x00	; 0
    239c:	9c 01       	movw	r18, r24
    239e:	21 50       	subi	r18, 0x01	; 1
    23a0:	31 09       	sbc	r19, r1
    23a2:	82 23       	and	r24, r18
    23a4:	93 23       	and	r25, r19
    23a6:	89 2b       	or	r24, r25
    23a8:	09 f0       	breq	.+2      	; 0x23ac <find_volume+0x200>
    23aa:	12 c2       	rjmp	.+1060   	; 0x27d0 <find_volume+0x624>
    23ac:	e0 5c       	subi	r30, 0xC0	; 192
    23ae:	ff 4f       	sbci	r31, 0xFF	; 255
    23b0:	80 81       	ld	r24, Z
    23b2:	90 e0       	ldi	r25, 0x00	; 0
    23b4:	98 2f       	mov	r25, r24
    23b6:	88 27       	eor	r24, r24
    23b8:	f8 01       	movw	r30, r16
    23ba:	27 ad       	ldd	r18, Z+63	; 0x3f
    23bc:	1c 01       	movw	r2, r24
    23be:	22 2a       	or	r2, r18
    23c0:	31 86       	std	Z+9, r3	; 0x09
    23c2:	20 86       	std	Z+8, r2	; 0x08
    23c4:	c1 01       	movw	r24, r2
    23c6:	8f 70       	andi	r24, 0x0F	; 15
    23c8:	99 27       	eor	r25, r25
    23ca:	89 2b       	or	r24, r25
    23cc:	09 f0       	breq	.+2      	; 0x23d0 <find_volume+0x224>
    23ce:	02 c2       	rjmp	.+1028   	; 0x27d4 <find_volume+0x628>
    23d0:	ee 5b       	subi	r30, 0xBE	; 190
    23d2:	ff 4f       	sbci	r31, 0xFF	; 255
    23d4:	40 80       	ld	r4, Z
    23d6:	51 2c       	mov	r5, r1
    23d8:	54 2c       	mov	r5, r4
    23da:	44 24       	eor	r4, r4
    23dc:	31 97       	sbiw	r30, 0x01	; 1
    23de:	80 81       	ld	r24, Z
    23e0:	48 2a       	or	r4, r24
    23e2:	61 2c       	mov	r6, r1
    23e4:	71 2c       	mov	r7, r1
    23e6:	41 14       	cp	r4, r1
    23e8:	51 04       	cpc	r5, r1
    23ea:	61 04       	cpc	r6, r1
    23ec:	71 04       	cpc	r7, r1
    23ee:	d1 f4       	brne	.+52     	; 0x2424 <find_volume+0x278>
    23f0:	70 96       	adiw	r30, 0x10	; 16
    23f2:	80 81       	ld	r24, Z
    23f4:	31 97       	sbiw	r30, 0x01	; 1
    23f6:	40 80       	ld	r4, Z
    23f8:	51 2c       	mov	r5, r1
    23fa:	61 2c       	mov	r6, r1
    23fc:	71 2c       	mov	r7, r1
    23fe:	32 01       	movw	r6, r4
    2400:	55 24       	eor	r5, r5
    2402:	44 24       	eor	r4, r4
    2404:	78 2a       	or	r7, r24
    2406:	32 97       	sbiw	r30, 0x02	; 2
    2408:	80 81       	ld	r24, Z
    240a:	48 2a       	or	r4, r24
    240c:	31 96       	adiw	r30, 0x01	; 1
    240e:	80 81       	ld	r24, Z
    2410:	90 e0       	ldi	r25, 0x00	; 0
    2412:	98 2f       	mov	r25, r24
    2414:	88 27       	eor	r24, r24
    2416:	ac 01       	movw	r20, r24
    2418:	60 e0       	ldi	r22, 0x00	; 0
    241a:	70 e0       	ldi	r23, 0x00	; 0
    241c:	44 2a       	or	r4, r20
    241e:	55 2a       	or	r5, r21
    2420:	66 2a       	or	r6, r22
    2422:	77 2a       	or	r7, r23
    2424:	f8 01       	movw	r30, r16
    2426:	85 ad       	ldd	r24, Z+61	; 0x3d
    2428:	e8 2f       	mov	r30, r24
    242a:	f0 e0       	ldi	r31, 0x00	; 0
    242c:	3e 2f       	mov	r19, r30
    242e:	22 27       	eor	r18, r18
    2430:	f8 01       	movw	r30, r16
    2432:	84 ad       	ldd	r24, Z+60	; 0x3c
    2434:	f9 01       	movw	r30, r18
    2436:	e8 2b       	or	r30, r24
    2438:	30 97       	sbiw	r30, 0x00	; 0
    243a:	09 f4       	brne	.+2      	; 0x243e <find_volume+0x292>
    243c:	cd c1       	rjmp	.+922    	; 0x27d8 <find_volume+0x62c>
    243e:	b0 e0       	ldi	r27, 0x00	; 0
    2440:	a5 01       	movw	r20, r10
    2442:	94 01       	movw	r18, r8
    2444:	0e 94 04 46 	call	0x8c08	; 0x8c08 <__muluhisi3>
    2448:	6a 8f       	std	Y+26, r22	; 0x1a
    244a:	7b 8f       	std	Y+27, r23	; 0x1b
    244c:	8c 8f       	std	Y+28, r24	; 0x1c
    244e:	9d 8f       	std	Y+29, r25	; 0x1d
    2450:	9f 01       	movw	r18, r30
    2452:	40 e0       	ldi	r20, 0x00	; 0
    2454:	50 e0       	ldi	r21, 0x00	; 0
    2456:	2e 8b       	std	Y+22, r18	; 0x16
    2458:	3f 8b       	std	Y+23, r19	; 0x17
    245a:	48 8f       	std	Y+24, r20	; 0x18
    245c:	59 8f       	std	Y+25, r21	; 0x19
    245e:	c1 01       	movw	r24, r2
    2460:	92 95       	swap	r25
    2462:	82 95       	swap	r24
    2464:	8f 70       	andi	r24, 0x0F	; 15
    2466:	89 27       	eor	r24, r25
    2468:	9f 70       	andi	r25, 0x0F	; 15
    246a:	89 27       	eor	r24, r25
    246c:	28 0f       	add	r18, r24
    246e:	39 1f       	adc	r19, r25
    2470:	41 1d       	adc	r20, r1
    2472:	51 1d       	adc	r21, r1
    2474:	da 01       	movw	r26, r20
    2476:	c9 01       	movw	r24, r18
    2478:	2a 8d       	ldd	r18, Y+26	; 0x1a
    247a:	3b 8d       	ldd	r19, Y+27	; 0x1b
    247c:	4c 8d       	ldd	r20, Y+28	; 0x1c
    247e:	5d 8d       	ldd	r21, Y+29	; 0x1d
    2480:	28 0f       	add	r18, r24
    2482:	39 1f       	adc	r19, r25
    2484:	4a 1f       	adc	r20, r26
    2486:	5b 1f       	adc	r21, r27
    2488:	2a 8b       	std	Y+18, r18	; 0x12
    248a:	3b 8b       	std	Y+19, r19	; 0x13
    248c:	4c 8b       	std	Y+20, r20	; 0x14
    248e:	5d 8b       	std	Y+21, r21	; 0x15
    2490:	42 16       	cp	r4, r18
    2492:	53 06       	cpc	r5, r19
    2494:	64 06       	cpc	r6, r20
    2496:	75 06       	cpc	r7, r21
    2498:	08 f4       	brcc	.+2      	; 0x249c <find_volume+0x2f0>
    249a:	a0 c1       	rjmp	.+832    	; 0x27dc <find_volume+0x630>
    249c:	c3 01       	movw	r24, r6
    249e:	b2 01       	movw	r22, r4
    24a0:	62 1b       	sub	r22, r18
    24a2:	73 0b       	sbc	r23, r19
    24a4:	84 0b       	sbc	r24, r20
    24a6:	95 0b       	sbc	r25, r21
    24a8:	e9 89       	ldd	r30, Y+17	; 0x11
    24aa:	2e 2f       	mov	r18, r30
    24ac:	30 e0       	ldi	r19, 0x00	; 0
    24ae:	40 e0       	ldi	r20, 0x00	; 0
    24b0:	50 e0       	ldi	r21, 0x00	; 0
    24b2:	0e 94 ae 45 	call	0x8b5c	; 0x8b5c <__udivmodsi4>
    24b6:	da 01       	movw	r26, r20
    24b8:	c9 01       	movw	r24, r18
    24ba:	21 15       	cp	r18, r1
    24bc:	31 05       	cpc	r19, r1
    24be:	41 05       	cpc	r20, r1
    24c0:	51 05       	cpc	r21, r1
    24c2:	09 f4       	brne	.+2      	; 0x24c6 <find_volume+0x31a>
    24c4:	8d c1       	rjmp	.+794    	; 0x27e0 <find_volume+0x634>
    24c6:	26 3f       	cpi	r18, 0xF6	; 246
    24c8:	ff e0       	ldi	r31, 0x0F	; 15
    24ca:	3f 07       	cpc	r19, r31
    24cc:	41 05       	cpc	r20, r1
    24ce:	51 05       	cpc	r21, r1
    24d0:	18 f0       	brcs	.+6      	; 0x24d8 <find_volume+0x32c>
    24d2:	e2 e0       	ldi	r30, 0x02	; 2
    24d4:	e9 8b       	std	Y+17, r30	; 0x11
    24d6:	02 c0       	rjmp	.+4      	; 0x24dc <find_volume+0x330>
    24d8:	f1 e0       	ldi	r31, 0x01	; 1
    24da:	f9 8b       	std	Y+17, r31	; 0x11
    24dc:	86 3f       	cpi	r24, 0xF6	; 246
    24de:	9f 4f       	sbci	r25, 0xFF	; 255
    24e0:	a1 05       	cpc	r26, r1
    24e2:	b1 05       	cpc	r27, r1
    24e4:	08 f0       	brcs	.+2      	; 0x24e8 <find_volume+0x33c>
    24e6:	9d c1       	rjmp	.+826    	; 0x2822 <find_volume+0x676>
    24e8:	29 01       	movw	r4, r18
    24ea:	3a 01       	movw	r6, r20
    24ec:	82 e0       	ldi	r24, 0x02	; 2
    24ee:	48 0e       	add	r4, r24
    24f0:	51 1c       	adc	r5, r1
    24f2:	61 1c       	adc	r6, r1
    24f4:	71 1c       	adc	r7, r1
    24f6:	d8 01       	movw	r26, r16
    24f8:	52 96       	adiw	r26, 0x12	; 18
    24fa:	4d 92       	st	X+, r4
    24fc:	5d 92       	st	X+, r5
    24fe:	6d 92       	st	X+, r6
    2500:	7c 92       	st	X, r7
    2502:	55 97       	sbiw	r26, 0x15	; 21
    2504:	f8 01       	movw	r30, r16
    2506:	c2 8e       	std	Z+26, r12	; 0x1a
    2508:	d3 8e       	std	Z+27, r13	; 0x1b
    250a:	e4 8e       	std	Z+28, r14	; 0x1c
    250c:	f5 8e       	std	Z+29, r15	; 0x1d
    250e:	8e 89       	ldd	r24, Y+22	; 0x16
    2510:	9f 89       	ldd	r25, Y+23	; 0x17
    2512:	a8 8d       	ldd	r26, Y+24	; 0x18
    2514:	b9 8d       	ldd	r27, Y+25	; 0x19
    2516:	8c 0d       	add	r24, r12
    2518:	9d 1d       	adc	r25, r13
    251a:	ae 1d       	adc	r26, r14
    251c:	bf 1d       	adc	r27, r15
    251e:	86 8f       	std	Z+30, r24	; 0x1e
    2520:	97 8f       	std	Z+31, r25	; 0x1f
    2522:	a0 a3       	std	Z+32, r26	; 0x20
    2524:	b1 a3       	std	Z+33, r27	; 0x21
    2526:	4a 89       	ldd	r20, Y+18	; 0x12
    2528:	5b 89       	ldd	r21, Y+19	; 0x13
    252a:	6c 89       	ldd	r22, Y+20	; 0x14
    252c:	7d 89       	ldd	r23, Y+21	; 0x15
    252e:	4c 0d       	add	r20, r12
    2530:	5d 1d       	adc	r21, r13
    2532:	6e 1d       	adc	r22, r14
    2534:	7f 1d       	adc	r23, r15
    2536:	46 a3       	std	Z+38, r20	; 0x26
    2538:	57 a3       	std	Z+39, r21	; 0x27
    253a:	60 a7       	std	Z+40, r22	; 0x28
    253c:	71 a7       	std	Z+41, r23	; 0x29
    253e:	f9 89       	ldd	r31, Y+17	; 0x11
    2540:	f3 30       	cpi	r31, 0x03	; 3
    2542:	09 f0       	breq	.+2      	; 0x2546 <find_volume+0x39a>
    2544:	44 c0       	rjmp	.+136    	; 0x25ce <find_volume+0x422>
    2546:	23 28       	or	r2, r3
    2548:	09 f0       	breq	.+2      	; 0x254c <find_volume+0x3a0>
    254a:	4c c1       	rjmp	.+664    	; 0x27e4 <find_volume+0x638>
    254c:	f8 01       	movw	r30, r16
    254e:	e3 5a       	subi	r30, 0xA3	; 163
    2550:	ff 4f       	sbci	r31, 0xFF	; 255
    2552:	20 81       	ld	r18, Z
    2554:	31 97       	sbiw	r30, 0x01	; 1
    2556:	80 81       	ld	r24, Z
    2558:	90 e0       	ldi	r25, 0x00	; 0
    255a:	a0 e0       	ldi	r26, 0x00	; 0
    255c:	b0 e0       	ldi	r27, 0x00	; 0
    255e:	dc 01       	movw	r26, r24
    2560:	99 27       	eor	r25, r25
    2562:	88 27       	eor	r24, r24
    2564:	b2 2b       	or	r27, r18
    2566:	32 97       	sbiw	r30, 0x02	; 2
    2568:	20 81       	ld	r18, Z
    256a:	ac 01       	movw	r20, r24
    256c:	bd 01       	movw	r22, r26
    256e:	42 2b       	or	r20, r18
    2570:	31 96       	adiw	r30, 0x01	; 1
    2572:	80 81       	ld	r24, Z
    2574:	28 2f       	mov	r18, r24
    2576:	30 e0       	ldi	r19, 0x00	; 0
    2578:	92 2f       	mov	r25, r18
    257a:	88 27       	eor	r24, r24
    257c:	a0 e0       	ldi	r26, 0x00	; 0
    257e:	b0 e0       	ldi	r27, 0x00	; 0
    2580:	84 2b       	or	r24, r20
    2582:	95 2b       	or	r25, r21
    2584:	a6 2b       	or	r26, r22
    2586:	b7 2b       	or	r27, r23
    2588:	f8 01       	movw	r30, r16
    258a:	82 a3       	std	Z+34, r24	; 0x22
    258c:	93 a3       	std	Z+35, r25	; 0x23
    258e:	a4 a3       	std	Z+36, r26	; 0x24
    2590:	b5 a3       	std	Z+37, r27	; 0x25
    2592:	44 0c       	add	r4, r4
    2594:	55 1c       	adc	r5, r5
    2596:	66 1c       	adc	r6, r6
    2598:	77 1c       	adc	r7, r7
    259a:	44 0c       	add	r4, r4
    259c:	55 1c       	adc	r5, r5
    259e:	66 1c       	adc	r6, r6
    25a0:	77 1c       	adc	r7, r7
    25a2:	ff ef       	ldi	r31, 0xFF	; 255
    25a4:	4f 0e       	add	r4, r31
    25a6:	f1 e0       	ldi	r31, 0x01	; 1
    25a8:	5f 1e       	adc	r5, r31
    25aa:	61 1c       	adc	r6, r1
    25ac:	71 1c       	adc	r7, r1
    25ae:	03 2e       	mov	r0, r19
    25b0:	39 e0       	ldi	r19, 0x09	; 9
    25b2:	76 94       	lsr	r7
    25b4:	67 94       	ror	r6
    25b6:	57 94       	ror	r5
    25b8:	47 94       	ror	r4
    25ba:	3a 95       	dec	r19
    25bc:	d1 f7       	brne	.-12     	; 0x25b2 <find_volume+0x406>
    25be:	30 2d       	mov	r19, r0
    25c0:	84 14       	cp	r8, r4
    25c2:	95 04       	cpc	r9, r5
    25c4:	a6 04       	cpc	r10, r6
    25c6:	b7 04       	cpc	r11, r7
    25c8:	08 f4       	brcc	.+2      	; 0x25cc <find_volume+0x420>
    25ca:	0e c1       	rjmp	.+540    	; 0x27e8 <find_volume+0x63c>
    25cc:	56 c1       	rjmp	.+684    	; 0x287a <find_volume+0x6ce>
    25ce:	23 28       	or	r2, r3
    25d0:	09 f4       	brne	.+2      	; 0x25d4 <find_volume+0x428>
    25d2:	0c c1       	rjmp	.+536    	; 0x27ec <find_volume+0x640>
    25d4:	2a 8d       	ldd	r18, Y+26	; 0x1a
    25d6:	3b 8d       	ldd	r19, Y+27	; 0x1b
    25d8:	4c 8d       	ldd	r20, Y+28	; 0x1c
    25da:	5d 8d       	ldd	r21, Y+29	; 0x1d
    25dc:	82 0f       	add	r24, r18
    25de:	93 1f       	adc	r25, r19
    25e0:	a4 1f       	adc	r26, r20
    25e2:	b5 1f       	adc	r27, r21
    25e4:	f8 01       	movw	r30, r16
    25e6:	82 a3       	std	Z+34, r24	; 0x22
    25e8:	93 a3       	std	Z+35, r25	; 0x23
    25ea:	a4 a3       	std	Z+36, r26	; 0x24
    25ec:	b5 a3       	std	Z+37, r27	; 0x25
    25ee:	f9 89       	ldd	r31, Y+17	; 0x11
    25f0:	f2 30       	cpi	r31, 0x02	; 2
    25f2:	29 f4       	brne	.+10     	; 0x25fe <find_volume+0x452>
    25f4:	44 0c       	add	r4, r4
    25f6:	55 1c       	adc	r5, r5
    25f8:	66 1c       	adc	r6, r6
    25fa:	77 1c       	adc	r7, r7
    25fc:	6a c1       	rjmp	.+724    	; 0x28d2 <find_volume+0x726>
    25fe:	a3 e0       	ldi	r26, 0x03	; 3
    2600:	b0 e0       	ldi	r27, 0x00	; 0
    2602:	a3 01       	movw	r20, r6
    2604:	92 01       	movw	r18, r4
    2606:	0e 94 04 46 	call	0x8c08	; 0x8c08 <__muluhisi3>
    260a:	dc 01       	movw	r26, r24
    260c:	cb 01       	movw	r24, r22
    260e:	b6 95       	lsr	r27
    2610:	a7 95       	ror	r26
    2612:	97 95       	ror	r25
    2614:	87 95       	ror	r24
    2616:	21 e0       	ldi	r18, 0x01	; 1
    2618:	42 22       	and	r4, r18
    261a:	55 24       	eor	r5, r5
    261c:	66 24       	eor	r6, r6
    261e:	77 24       	eor	r7, r7
    2620:	48 0e       	add	r4, r24
    2622:	59 1e       	adc	r5, r25
    2624:	6a 1e       	adc	r6, r26
    2626:	7b 1e       	adc	r7, r27
    2628:	54 c1       	rjmp	.+680    	; 0x28d2 <find_volume+0x726>
    262a:	b7 01       	movw	r22, r14
    262c:	a6 01       	movw	r20, r12
    262e:	4f 5f       	subi	r20, 0xFF	; 255
    2630:	5f 4f       	sbci	r21, 0xFF	; 255
    2632:	6f 4f       	sbci	r22, 0xFF	; 255
    2634:	7f 4f       	sbci	r23, 0xFF	; 255
    2636:	c8 01       	movw	r24, r16
    2638:	f0 dc       	rcall	.-1568   	; 0x201a <move_window>
    263a:	81 11       	cpse	r24, r1
    263c:	96 c0       	rjmp	.+300    	; 0x276a <find_volume+0x5be>
    263e:	d8 01       	movw	r26, r16
    2640:	15 96       	adiw	r26, 0x05	; 5
    2642:	1c 92       	st	X, r1
    2644:	f8 01       	movw	r30, r16
    2646:	e3 5d       	subi	r30, 0xD3	; 211
    2648:	fd 4f       	sbci	r31, 0xFD	; 253
    264a:	80 81       	ld	r24, Z
    264c:	90 e0       	ldi	r25, 0x00	; 0
    264e:	98 2f       	mov	r25, r24
    2650:	88 27       	eor	r24, r24
    2652:	31 97       	sbiw	r30, 0x01	; 1
    2654:	20 81       	ld	r18, Z
    2656:	82 2b       	or	r24, r18
    2658:	85 35       	cpi	r24, 0x55	; 85
    265a:	9a 4a       	sbci	r25, 0xAA	; 170
    265c:	09 f0       	breq	.+2      	; 0x2660 <find_volume+0x4b4>
    265e:	88 c0       	rjmp	.+272    	; 0x2770 <find_volume+0x5c4>
    2660:	f8 01       	movw	r30, r16
    2662:	21 a9       	ldd	r18, Z+49	; 0x31
    2664:	80 a9       	ldd	r24, Z+48	; 0x30
    2666:	90 e0       	ldi	r25, 0x00	; 0
    2668:	a0 e0       	ldi	r26, 0x00	; 0
    266a:	b0 e0       	ldi	r27, 0x00	; 0
    266c:	dc 01       	movw	r26, r24
    266e:	99 27       	eor	r25, r25
    2670:	88 27       	eor	r24, r24
    2672:	b2 2b       	or	r27, r18
    2674:	26 a5       	ldd	r18, Z+46	; 0x2e
    2676:	ac 01       	movw	r20, r24
    2678:	bd 01       	movw	r22, r26
    267a:	42 2b       	or	r20, r18
    267c:	27 a5       	ldd	r18, Z+47	; 0x2f
    267e:	30 e0       	ldi	r19, 0x00	; 0
    2680:	92 2f       	mov	r25, r18
    2682:	88 27       	eor	r24, r24
    2684:	a0 e0       	ldi	r26, 0x00	; 0
    2686:	b0 e0       	ldi	r27, 0x00	; 0
    2688:	84 2b       	or	r24, r20
    268a:	95 2b       	or	r25, r21
    268c:	a6 2b       	or	r26, r22
    268e:	b7 2b       	or	r27, r23
    2690:	82 35       	cpi	r24, 0x52	; 82
    2692:	92 45       	sbci	r25, 0x52	; 82
    2694:	a1 46       	sbci	r26, 0x61	; 97
    2696:	b1 44       	sbci	r27, 0x41	; 65
    2698:	09 f0       	breq	.+2      	; 0x269c <find_volume+0x4f0>
    269a:	6d c0       	rjmp	.+218    	; 0x2776 <find_volume+0x5ca>
    269c:	f8 01       	movw	r30, r16
    269e:	eb 5e       	subi	r30, 0xEB	; 235
    26a0:	fd 4f       	sbci	r31, 0xFD	; 253
    26a2:	20 81       	ld	r18, Z
    26a4:	31 97       	sbiw	r30, 0x01	; 1
    26a6:	80 81       	ld	r24, Z
    26a8:	90 e0       	ldi	r25, 0x00	; 0
    26aa:	a0 e0       	ldi	r26, 0x00	; 0
    26ac:	b0 e0       	ldi	r27, 0x00	; 0
    26ae:	dc 01       	movw	r26, r24
    26b0:	99 27       	eor	r25, r25
    26b2:	88 27       	eor	r24, r24
    26b4:	b2 2b       	or	r27, r18
    26b6:	32 97       	sbiw	r30, 0x02	; 2
    26b8:	20 81       	ld	r18, Z
    26ba:	ac 01       	movw	r20, r24
    26bc:	bd 01       	movw	r22, r26
    26be:	42 2b       	or	r20, r18
    26c0:	31 96       	adiw	r30, 0x01	; 1
    26c2:	20 81       	ld	r18, Z
    26c4:	30 e0       	ldi	r19, 0x00	; 0
    26c6:	92 2f       	mov	r25, r18
    26c8:	88 27       	eor	r24, r24
    26ca:	a0 e0       	ldi	r26, 0x00	; 0
    26cc:	b0 e0       	ldi	r27, 0x00	; 0
    26ce:	84 2b       	or	r24, r20
    26d0:	95 2b       	or	r25, r21
    26d2:	a6 2b       	or	r26, r22
    26d4:	b7 2b       	or	r27, r23
    26d6:	82 37       	cpi	r24, 0x72	; 114
    26d8:	92 47       	sbci	r25, 0x72	; 114
    26da:	a1 44       	sbci	r26, 0x41	; 65
    26dc:	b1 46       	sbci	r27, 0x61	; 97
    26de:	09 f0       	breq	.+2      	; 0x26e2 <find_volume+0x536>
    26e0:	4d c0       	rjmp	.+154    	; 0x277c <find_volume+0x5d0>
    26e2:	36 96       	adiw	r30, 0x06	; 6
    26e4:	20 81       	ld	r18, Z
    26e6:	31 97       	sbiw	r30, 0x01	; 1
    26e8:	80 81       	ld	r24, Z
    26ea:	90 e0       	ldi	r25, 0x00	; 0
    26ec:	a0 e0       	ldi	r26, 0x00	; 0
    26ee:	b0 e0       	ldi	r27, 0x00	; 0
    26f0:	dc 01       	movw	r26, r24
    26f2:	99 27       	eor	r25, r25
    26f4:	88 27       	eor	r24, r24
    26f6:	b2 2b       	or	r27, r18
    26f8:	32 97       	sbiw	r30, 0x02	; 2
    26fa:	20 81       	ld	r18, Z
    26fc:	ac 01       	movw	r20, r24
    26fe:	bd 01       	movw	r22, r26
    2700:	42 2b       	or	r20, r18
    2702:	31 96       	adiw	r30, 0x01	; 1
    2704:	20 81       	ld	r18, Z
    2706:	30 e0       	ldi	r19, 0x00	; 0
    2708:	92 2f       	mov	r25, r18
    270a:	88 27       	eor	r24, r24
    270c:	a0 e0       	ldi	r26, 0x00	; 0
    270e:	b0 e0       	ldi	r27, 0x00	; 0
    2710:	84 2b       	or	r24, r20
    2712:	95 2b       	or	r25, r21
    2714:	a6 2b       	or	r26, r22
    2716:	b7 2b       	or	r27, r23
    2718:	f8 01       	movw	r30, r16
    271a:	86 87       	std	Z+14, r24	; 0x0e
    271c:	97 87       	std	Z+15, r25	; 0x0f
    271e:	a0 8b       	std	Z+16, r26	; 0x10
    2720:	b1 8b       	std	Z+17, r27	; 0x11
    2722:	e3 5e       	subi	r30, 0xE3	; 227
    2724:	fd 4f       	sbci	r31, 0xFD	; 253
    2726:	20 81       	ld	r18, Z
    2728:	31 97       	sbiw	r30, 0x01	; 1
    272a:	80 81       	ld	r24, Z
    272c:	90 e0       	ldi	r25, 0x00	; 0
    272e:	a0 e0       	ldi	r26, 0x00	; 0
    2730:	b0 e0       	ldi	r27, 0x00	; 0
    2732:	dc 01       	movw	r26, r24
    2734:	99 27       	eor	r25, r25
    2736:	88 27       	eor	r24, r24
    2738:	b2 2b       	or	r27, r18
    273a:	32 97       	sbiw	r30, 0x02	; 2
    273c:	20 81       	ld	r18, Z
    273e:	ac 01       	movw	r20, r24
    2740:	bd 01       	movw	r22, r26
    2742:	42 2b       	or	r20, r18
    2744:	31 96       	adiw	r30, 0x01	; 1
    2746:	20 81       	ld	r18, Z
    2748:	30 e0       	ldi	r19, 0x00	; 0
    274a:	92 2f       	mov	r25, r18
    274c:	88 27       	eor	r24, r24
    274e:	a0 e0       	ldi	r26, 0x00	; 0
    2750:	b0 e0       	ldi	r27, 0x00	; 0
    2752:	84 2b       	or	r24, r20
    2754:	95 2b       	or	r25, r21
    2756:	a6 2b       	or	r26, r22
    2758:	b7 2b       	or	r27, r23
    275a:	f8 01       	movw	r30, r16
    275c:	82 87       	std	Z+10, r24	; 0x0a
    275e:	93 87       	std	Z+11, r25	; 0x0b
    2760:	a4 87       	std	Z+12, r26	; 0x0c
    2762:	b5 87       	std	Z+13, r27	; 0x0d
    2764:	f3 e0       	ldi	r31, 0x03	; 3
    2766:	f9 8b       	std	Y+17, r31	; 0x11
    2768:	0b c0       	rjmp	.+22     	; 0x2780 <find_volume+0x5d4>
    276a:	e3 e0       	ldi	r30, 0x03	; 3
    276c:	e9 8b       	std	Y+17, r30	; 0x11
    276e:	08 c0       	rjmp	.+16     	; 0x2780 <find_volume+0x5d4>
    2770:	f3 e0       	ldi	r31, 0x03	; 3
    2772:	f9 8b       	std	Y+17, r31	; 0x11
    2774:	05 c0       	rjmp	.+10     	; 0x2780 <find_volume+0x5d4>
    2776:	e3 e0       	ldi	r30, 0x03	; 3
    2778:	e9 8b       	std	Y+17, r30	; 0x11
    277a:	02 c0       	rjmp	.+4      	; 0x2780 <find_volume+0x5d4>
    277c:	f3 e0       	ldi	r31, 0x03	; 3
    277e:	f9 8b       	std	Y+17, r31	; 0x11
    2780:	e9 89       	ldd	r30, Y+17	; 0x11
    2782:	d8 01       	movw	r26, r16
    2784:	ec 93       	st	X, r30
    2786:	80 91 25 04 	lds	r24, 0x0425
    278a:	90 91 26 04 	lds	r25, 0x0426
    278e:	01 96       	adiw	r24, 0x01	; 1
    2790:	90 93 26 04 	sts	0x0426, r25
    2794:	80 93 25 04 	sts	0x0425, r24
    2798:	17 96       	adiw	r26, 0x07	; 7
    279a:	9c 93       	st	X, r25
    279c:	8e 93       	st	-X, r24
    279e:	16 97       	sbiw	r26, 0x06	; 6
    27a0:	80 e0       	ldi	r24, 0x00	; 0
    27a2:	ad c0       	rjmp	.+346    	; 0x28fe <find_volume+0x752>
    27a4:	8b e0       	ldi	r24, 0x0B	; 11
    27a6:	ab c0       	rjmp	.+342    	; 0x28fe <find_volume+0x752>
    27a8:	8c e0       	ldi	r24, 0x0C	; 12
    27aa:	a9 c0       	rjmp	.+338    	; 0x28fe <find_volume+0x752>
    27ac:	80 e0       	ldi	r24, 0x00	; 0
    27ae:	a7 c0       	rjmp	.+334    	; 0x28fe <find_volume+0x752>
    27b0:	80 e0       	ldi	r24, 0x00	; 0
    27b2:	a5 c0       	rjmp	.+330    	; 0x28fe <find_volume+0x752>
    27b4:	83 e0       	ldi	r24, 0x03	; 3
    27b6:	a3 c0       	rjmp	.+326    	; 0x28fe <find_volume+0x752>
    27b8:	8a e0       	ldi	r24, 0x0A	; 10
    27ba:	a1 c0       	rjmp	.+322    	; 0x28fe <find_volume+0x752>
    27bc:	81 e0       	ldi	r24, 0x01	; 1
    27be:	9f c0       	rjmp	.+318    	; 0x28fe <find_volume+0x752>
    27c0:	8d e0       	ldi	r24, 0x0D	; 13
    27c2:	9d c0       	rjmp	.+314    	; 0x28fe <find_volume+0x752>
    27c4:	8d e0       	ldi	r24, 0x0D	; 13
    27c6:	9b c0       	rjmp	.+310    	; 0x28fe <find_volume+0x752>
    27c8:	8d e0       	ldi	r24, 0x0D	; 13
    27ca:	99 c0       	rjmp	.+306    	; 0x28fe <find_volume+0x752>
    27cc:	8d e0       	ldi	r24, 0x0D	; 13
    27ce:	97 c0       	rjmp	.+302    	; 0x28fe <find_volume+0x752>
    27d0:	8d e0       	ldi	r24, 0x0D	; 13
    27d2:	95 c0       	rjmp	.+298    	; 0x28fe <find_volume+0x752>
    27d4:	8d e0       	ldi	r24, 0x0D	; 13
    27d6:	93 c0       	rjmp	.+294    	; 0x28fe <find_volume+0x752>
    27d8:	8d e0       	ldi	r24, 0x0D	; 13
    27da:	91 c0       	rjmp	.+290    	; 0x28fe <find_volume+0x752>
    27dc:	8d e0       	ldi	r24, 0x0D	; 13
    27de:	8f c0       	rjmp	.+286    	; 0x28fe <find_volume+0x752>
    27e0:	8d e0       	ldi	r24, 0x0D	; 13
    27e2:	8d c0       	rjmp	.+282    	; 0x28fe <find_volume+0x752>
    27e4:	8d e0       	ldi	r24, 0x0D	; 13
    27e6:	8b c0       	rjmp	.+278    	; 0x28fe <find_volume+0x752>
    27e8:	8d e0       	ldi	r24, 0x0D	; 13
    27ea:	89 c0       	rjmp	.+274    	; 0x28fe <find_volume+0x752>
    27ec:	8d e0       	ldi	r24, 0x0D	; 13
    27ee:	87 c0       	rjmp	.+270    	; 0x28fe <find_volume+0x752>
    27f0:	8d e0       	ldi	r24, 0x0D	; 13
    27f2:	85 c0       	rjmp	.+266    	; 0x28fe <find_volume+0x752>
    27f4:	40 e0       	ldi	r20, 0x00	; 0
    27f6:	50 e0       	ldi	r21, 0x00	; 0
    27f8:	ba 01       	movw	r22, r20
    27fa:	c8 01       	movw	r24, r16
    27fc:	4a dc       	rcall	.-1900   	; 0x2092 <check_fs>
    27fe:	81 30       	cpi	r24, 0x01	; 1
    2800:	09 f0       	breq	.+2      	; 0x2804 <find_volume+0x658>
    2802:	6e cd       	rjmp	.-1316   	; 0x22e0 <find_volume+0x134>
    2804:	9e 01       	movw	r18, r28
    2806:	2f 5f       	subi	r18, 0xFF	; 255
    2808:	3f 4f       	sbci	r19, 0xFF	; 255
    280a:	59 01       	movw	r10, r18
    280c:	f8 01       	movw	r30, r16
    280e:	e9 50       	subi	r30, 0x09	; 9
    2810:	fe 4f       	sbci	r31, 0xFE	; 254
    2812:	a8 01       	movw	r20, r16
    2814:	49 5c       	subi	r20, 0xC9	; 201
    2816:	5d 4f       	sbci	r21, 0xFD	; 253
    2818:	81 2c       	mov	r8, r1
    281a:	91 2c       	mov	r9, r1
    281c:	70 e0       	ldi	r23, 0x00	; 0
    281e:	60 e0       	ldi	r22, 0x00	; 0
    2820:	17 cd       	rjmp	.-1490   	; 0x2250 <find_volume+0xa4>
    2822:	29 01       	movw	r4, r18
    2824:	3a 01       	movw	r6, r20
    2826:	62 e0       	ldi	r22, 0x02	; 2
    2828:	46 0e       	add	r4, r22
    282a:	51 1c       	adc	r5, r1
    282c:	61 1c       	adc	r6, r1
    282e:	71 1c       	adc	r7, r1
    2830:	d8 01       	movw	r26, r16
    2832:	52 96       	adiw	r26, 0x12	; 18
    2834:	4d 92       	st	X+, r4
    2836:	5d 92       	st	X+, r5
    2838:	6d 92       	st	X+, r6
    283a:	7c 92       	st	X, r7
    283c:	55 97       	sbiw	r26, 0x15	; 21
    283e:	f8 01       	movw	r30, r16
    2840:	c2 8e       	std	Z+26, r12	; 0x1a
    2842:	d3 8e       	std	Z+27, r13	; 0x1b
    2844:	e4 8e       	std	Z+28, r14	; 0x1c
    2846:	f5 8e       	std	Z+29, r15	; 0x1d
    2848:	8e 89       	ldd	r24, Y+22	; 0x16
    284a:	9f 89       	ldd	r25, Y+23	; 0x17
    284c:	a8 8d       	ldd	r26, Y+24	; 0x18
    284e:	b9 8d       	ldd	r27, Y+25	; 0x19
    2850:	8c 0d       	add	r24, r12
    2852:	9d 1d       	adc	r25, r13
    2854:	ae 1d       	adc	r26, r14
    2856:	bf 1d       	adc	r27, r15
    2858:	86 8f       	std	Z+30, r24	; 0x1e
    285a:	97 8f       	std	Z+31, r25	; 0x1f
    285c:	a0 a3       	std	Z+32, r26	; 0x20
    285e:	b1 a3       	std	Z+33, r27	; 0x21
    2860:	8a 89       	ldd	r24, Y+18	; 0x12
    2862:	9b 89       	ldd	r25, Y+19	; 0x13
    2864:	ac 89       	ldd	r26, Y+20	; 0x14
    2866:	bd 89       	ldd	r27, Y+21	; 0x15
    2868:	8c 0d       	add	r24, r12
    286a:	9d 1d       	adc	r25, r13
    286c:	ae 1d       	adc	r26, r14
    286e:	bf 1d       	adc	r27, r15
    2870:	86 a3       	std	Z+38, r24	; 0x26
    2872:	97 a3       	std	Z+39, r25	; 0x27
    2874:	a0 a7       	std	Z+40, r26	; 0x28
    2876:	b1 a7       	std	Z+41, r27	; 0x29
    2878:	66 ce       	rjmp	.-820    	; 0x2546 <find_volume+0x39a>
    287a:	8f ef       	ldi	r24, 0xFF	; 255
    287c:	9f ef       	ldi	r25, 0xFF	; 255
    287e:	dc 01       	movw	r26, r24
    2880:	f8 01       	movw	r30, r16
    2882:	86 87       	std	Z+14, r24	; 0x0e
    2884:	97 87       	std	Z+15, r25	; 0x0f
    2886:	a0 8b       	std	Z+16, r26	; 0x10
    2888:	b1 8b       	std	Z+17, r27	; 0x11
    288a:	82 87       	std	Z+10, r24	; 0x0a
    288c:	93 87       	std	Z+11, r25	; 0x0b
    288e:	a4 87       	std	Z+12, r26	; 0x0c
    2890:	b5 87       	std	Z+13, r27	; 0x0d
    2892:	80 e8       	ldi	r24, 0x80	; 128
    2894:	85 83       	std	Z+5, r24	; 0x05
    2896:	e1 5a       	subi	r30, 0xA1	; 161
    2898:	ff 4f       	sbci	r31, 0xFF	; 255
    289a:	80 81       	ld	r24, Z
    289c:	90 e0       	ldi	r25, 0x00	; 0
    289e:	98 2f       	mov	r25, r24
    28a0:	88 27       	eor	r24, r24
    28a2:	31 97       	sbiw	r30, 0x01	; 1
    28a4:	20 81       	ld	r18, Z
    28a6:	82 2b       	or	r24, r18
    28a8:	01 97       	sbiw	r24, 0x01	; 1
    28aa:	09 f4       	brne	.+2      	; 0x28ae <find_volume+0x702>
    28ac:	be ce       	rjmp	.-644    	; 0x262a <find_volume+0x47e>
    28ae:	f3 e0       	ldi	r31, 0x03	; 3
    28b0:	f9 8b       	std	Y+17, r31	; 0x11
    28b2:	66 cf       	rjmp	.-308    	; 0x2780 <find_volume+0x5d4>
    28b4:	8f ef       	ldi	r24, 0xFF	; 255
    28b6:	9f ef       	ldi	r25, 0xFF	; 255
    28b8:	dc 01       	movw	r26, r24
    28ba:	f8 01       	movw	r30, r16
    28bc:	86 87       	std	Z+14, r24	; 0x0e
    28be:	97 87       	std	Z+15, r25	; 0x0f
    28c0:	a0 8b       	std	Z+16, r26	; 0x10
    28c2:	b1 8b       	std	Z+17, r27	; 0x11
    28c4:	82 87       	std	Z+10, r24	; 0x0a
    28c6:	93 87       	std	Z+11, r25	; 0x0b
    28c8:	a4 87       	std	Z+12, r26	; 0x0c
    28ca:	b5 87       	std	Z+13, r27	; 0x0d
    28cc:	80 e8       	ldi	r24, 0x80	; 128
    28ce:	85 83       	std	Z+5, r24	; 0x05
    28d0:	57 cf       	rjmp	.-338    	; 0x2780 <find_volume+0x5d4>
    28d2:	ff ef       	ldi	r31, 0xFF	; 255
    28d4:	4f 0e       	add	r4, r31
    28d6:	f1 e0       	ldi	r31, 0x01	; 1
    28d8:	5f 1e       	adc	r5, r31
    28da:	61 1c       	adc	r6, r1
    28dc:	71 1c       	adc	r7, r1
    28de:	03 2e       	mov	r0, r19
    28e0:	39 e0       	ldi	r19, 0x09	; 9
    28e2:	76 94       	lsr	r7
    28e4:	67 94       	ror	r6
    28e6:	57 94       	ror	r5
    28e8:	47 94       	ror	r4
    28ea:	3a 95       	dec	r19
    28ec:	d1 f7       	brne	.-12     	; 0x28e2 <find_volume+0x736>
    28ee:	30 2d       	mov	r19, r0
    28f0:	84 14       	cp	r8, r4
    28f2:	95 04       	cpc	r9, r5
    28f4:	a6 04       	cpc	r10, r6
    28f6:	b7 04       	cpc	r11, r7
    28f8:	08 f4       	brcc	.+2      	; 0x28fc <find_volume+0x750>
    28fa:	7a cf       	rjmp	.-268    	; 0x27f0 <find_volume+0x644>
    28fc:	db cf       	rjmp	.-74     	; 0x28b4 <find_volume+0x708>
    28fe:	6d 96       	adiw	r28, 0x1d	; 29
    2900:	0f b6       	in	r0, 0x3f	; 63
    2902:	f8 94       	cli
    2904:	de bf       	out	0x3e, r29	; 62
    2906:	0f be       	out	0x3f, r0	; 63
    2908:	cd bf       	out	0x3d, r28	; 61
    290a:	df 91       	pop	r29
    290c:	cf 91       	pop	r28
    290e:	1f 91       	pop	r17
    2910:	0f 91       	pop	r16
    2912:	ff 90       	pop	r15
    2914:	ef 90       	pop	r14
    2916:	df 90       	pop	r13
    2918:	cf 90       	pop	r12
    291a:	bf 90       	pop	r11
    291c:	af 90       	pop	r10
    291e:	9f 90       	pop	r9
    2920:	8f 90       	pop	r8
    2922:	7f 90       	pop	r7
    2924:	6f 90       	pop	r6
    2926:	5f 90       	pop	r5
    2928:	4f 90       	pop	r4
    292a:	3f 90       	pop	r3
    292c:	2f 90       	pop	r2
    292e:	08 95       	ret

00002930 <clust2sect>:
    2930:	cf 92       	push	r12
    2932:	df 92       	push	r13
    2934:	ef 92       	push	r14
    2936:	ff 92       	push	r15
    2938:	fc 01       	movw	r30, r24
    293a:	9a 01       	movw	r18, r20
    293c:	ab 01       	movw	r20, r22
    293e:	22 50       	subi	r18, 0x02	; 2
    2940:	31 09       	sbc	r19, r1
    2942:	41 09       	sbc	r20, r1
    2944:	51 09       	sbc	r21, r1
    2946:	c2 88       	ldd	r12, Z+18	; 0x12
    2948:	d3 88       	ldd	r13, Z+19	; 0x13
    294a:	e4 88       	ldd	r14, Z+20	; 0x14
    294c:	f5 88       	ldd	r15, Z+21	; 0x15
    294e:	82 e0       	ldi	r24, 0x02	; 2
    2950:	c8 1a       	sub	r12, r24
    2952:	d1 08       	sbc	r13, r1
    2954:	e1 08       	sbc	r14, r1
    2956:	f1 08       	sbc	r15, r1
    2958:	2c 15       	cp	r18, r12
    295a:	3d 05       	cpc	r19, r13
    295c:	4e 05       	cpc	r20, r14
    295e:	5f 05       	cpc	r21, r15
    2960:	68 f4       	brcc	.+26     	; 0x297c <clust2sect+0x4c>
    2962:	a2 81       	ldd	r26, Z+2	; 0x02
    2964:	b0 e0       	ldi	r27, 0x00	; 0
    2966:	0e 94 04 46 	call	0x8c08	; 0x8c08 <__muluhisi3>
    296a:	c6 a0       	ldd	r12, Z+38	; 0x26
    296c:	d7 a0       	ldd	r13, Z+39	; 0x27
    296e:	e0 a4       	ldd	r14, Z+40	; 0x28
    2970:	f1 a4       	ldd	r15, Z+41	; 0x29
    2972:	6c 0d       	add	r22, r12
    2974:	7d 1d       	adc	r23, r13
    2976:	8e 1d       	adc	r24, r14
    2978:	9f 1d       	adc	r25, r15
    297a:	03 c0       	rjmp	.+6      	; 0x2982 <clust2sect+0x52>
    297c:	60 e0       	ldi	r22, 0x00	; 0
    297e:	70 e0       	ldi	r23, 0x00	; 0
    2980:	cb 01       	movw	r24, r22
    2982:	ff 90       	pop	r15
    2984:	ef 90       	pop	r14
    2986:	df 90       	pop	r13
    2988:	cf 90       	pop	r12
    298a:	08 95       	ret

0000298c <get_fat>:
    298c:	af 92       	push	r10
    298e:	bf 92       	push	r11
    2990:	cf 92       	push	r12
    2992:	df 92       	push	r13
    2994:	ef 92       	push	r14
    2996:	ff 92       	push	r15
    2998:	0f 93       	push	r16
    299a:	1f 93       	push	r17
    299c:	cf 93       	push	r28
    299e:	df 93       	push	r29
    29a0:	ec 01       	movw	r28, r24
    29a2:	6a 01       	movw	r12, r20
    29a4:	7b 01       	movw	r14, r22
    29a6:	42 30       	cpi	r20, 0x02	; 2
    29a8:	51 05       	cpc	r21, r1
    29aa:	61 05       	cpc	r22, r1
    29ac:	71 05       	cpc	r23, r1
    29ae:	08 f4       	brcc	.+2      	; 0x29b2 <get_fat+0x26>
    29b0:	c3 c0       	rjmp	.+390    	; 0x2b38 <get_fat+0x1ac>
    29b2:	8a 89       	ldd	r24, Y+18	; 0x12
    29b4:	9b 89       	ldd	r25, Y+19	; 0x13
    29b6:	ac 89       	ldd	r26, Y+20	; 0x14
    29b8:	bd 89       	ldd	r27, Y+21	; 0x15
    29ba:	48 17       	cp	r20, r24
    29bc:	59 07       	cpc	r21, r25
    29be:	6a 07       	cpc	r22, r26
    29c0:	7b 07       	cpc	r23, r27
    29c2:	08 f0       	brcs	.+2      	; 0x29c6 <get_fat+0x3a>
    29c4:	be c0       	rjmp	.+380    	; 0x2b42 <get_fat+0x1b6>
    29c6:	88 81       	ld	r24, Y
    29c8:	82 30       	cpi	r24, 0x02	; 2
    29ca:	09 f4       	brne	.+2      	; 0x29ce <get_fat+0x42>
    29cc:	4b c0       	rjmp	.+150    	; 0x2a64 <get_fat+0xd8>
    29ce:	83 30       	cpi	r24, 0x03	; 3
    29d0:	09 f4       	brne	.+2      	; 0x29d4 <get_fat+0x48>
    29d2:	6c c0       	rjmp	.+216    	; 0x2aac <get_fat+0x120>
    29d4:	81 30       	cpi	r24, 0x01	; 1
    29d6:	09 f0       	breq	.+2      	; 0x29da <get_fat+0x4e>
    29d8:	b9 c0       	rjmp	.+370    	; 0x2b4c <get_fat+0x1c0>
    29da:	8a 01       	movw	r16, r20
    29dc:	16 95       	lsr	r17
    29de:	07 95       	ror	r16
    29e0:	04 0f       	add	r16, r20
    29e2:	15 1f       	adc	r17, r21
    29e4:	c8 01       	movw	r24, r16
    29e6:	89 2f       	mov	r24, r25
    29e8:	99 27       	eor	r25, r25
    29ea:	86 95       	lsr	r24
    29ec:	4e 8d       	ldd	r20, Y+30	; 0x1e
    29ee:	5f 8d       	ldd	r21, Y+31	; 0x1f
    29f0:	68 a1       	ldd	r22, Y+32	; 0x20
    29f2:	79 a1       	ldd	r23, Y+33	; 0x21
    29f4:	48 0f       	add	r20, r24
    29f6:	59 1f       	adc	r21, r25
    29f8:	61 1d       	adc	r22, r1
    29fa:	71 1d       	adc	r23, r1
    29fc:	ce 01       	movw	r24, r28
    29fe:	0d db       	rcall	.-2534   	; 0x201a <move_window>
    2a00:	81 11       	cpse	r24, r1
    2a02:	a9 c0       	rjmp	.+338    	; 0x2b56 <get_fat+0x1ca>
    2a04:	58 01       	movw	r10, r16
    2a06:	8f ef       	ldi	r24, 0xFF	; 255
    2a08:	a8 1a       	sub	r10, r24
    2a0a:	b8 0a       	sbc	r11, r24
    2a0c:	11 70       	andi	r17, 0x01	; 1
    2a0e:	fe 01       	movw	r30, r28
    2a10:	e0 0f       	add	r30, r16
    2a12:	f1 1f       	adc	r31, r17
    2a14:	16 a5       	ldd	r17, Z+46	; 0x2e
    2a16:	c5 01       	movw	r24, r10
    2a18:	89 2f       	mov	r24, r25
    2a1a:	99 27       	eor	r25, r25
    2a1c:	86 95       	lsr	r24
    2a1e:	4e 8d       	ldd	r20, Y+30	; 0x1e
    2a20:	5f 8d       	ldd	r21, Y+31	; 0x1f
    2a22:	68 a1       	ldd	r22, Y+32	; 0x20
    2a24:	79 a1       	ldd	r23, Y+33	; 0x21
    2a26:	48 0f       	add	r20, r24
    2a28:	59 1f       	adc	r21, r25
    2a2a:	61 1d       	adc	r22, r1
    2a2c:	71 1d       	adc	r23, r1
    2a2e:	ce 01       	movw	r24, r28
    2a30:	f4 da       	rcall	.-2584   	; 0x201a <move_window>
    2a32:	81 11       	cpse	r24, r1
    2a34:	94 c0       	rjmp	.+296    	; 0x2b5e <get_fat+0x1d2>
    2a36:	81 e0       	ldi	r24, 0x01	; 1
    2a38:	b8 22       	and	r11, r24
    2a3a:	ca 0d       	add	r28, r10
    2a3c:	db 1d       	adc	r29, r11
    2a3e:	8e a5       	ldd	r24, Y+46	; 0x2e
    2a40:	61 2f       	mov	r22, r17
    2a42:	70 e0       	ldi	r23, 0x00	; 0
    2a44:	78 2b       	or	r23, r24
    2a46:	c0 fe       	sbrs	r12, 0
    2a48:	09 c0       	rjmp	.+18     	; 0x2a5c <get_fat+0xd0>
    2a4a:	72 95       	swap	r23
    2a4c:	62 95       	swap	r22
    2a4e:	6f 70       	andi	r22, 0x0F	; 15
    2a50:	67 27       	eor	r22, r23
    2a52:	7f 70       	andi	r23, 0x0F	; 15
    2a54:	67 27       	eor	r22, r23
    2a56:	80 e0       	ldi	r24, 0x00	; 0
    2a58:	90 e0       	ldi	r25, 0x00	; 0
    2a5a:	8c c0       	rjmp	.+280    	; 0x2b74 <get_fat+0x1e8>
    2a5c:	7f 70       	andi	r23, 0x0F	; 15
    2a5e:	80 e0       	ldi	r24, 0x00	; 0
    2a60:	90 e0       	ldi	r25, 0x00	; 0
    2a62:	88 c0       	rjmp	.+272    	; 0x2b74 <get_fat+0x1e8>
    2a64:	45 2f       	mov	r20, r21
    2a66:	56 2f       	mov	r21, r22
    2a68:	67 2f       	mov	r22, r23
    2a6a:	77 27       	eor	r23, r23
    2a6c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2a6e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2a70:	a8 a1       	ldd	r26, Y+32	; 0x20
    2a72:	b9 a1       	ldd	r27, Y+33	; 0x21
    2a74:	48 0f       	add	r20, r24
    2a76:	59 1f       	adc	r21, r25
    2a78:	6a 1f       	adc	r22, r26
    2a7a:	7b 1f       	adc	r23, r27
    2a7c:	ce 01       	movw	r24, r28
    2a7e:	cd da       	rcall	.-2662   	; 0x201a <move_window>
    2a80:	81 11       	cpse	r24, r1
    2a82:	71 c0       	rjmp	.+226    	; 0x2b66 <get_fat+0x1da>
    2a84:	cc 0c       	add	r12, r12
    2a86:	dd 1c       	adc	r13, r13
    2a88:	ee 1c       	adc	r14, r14
    2a8a:	ff 1c       	adc	r15, r15
    2a8c:	e8 94       	clt
    2a8e:	c0 f8       	bld	r12, 0
    2a90:	81 e0       	ldi	r24, 0x01	; 1
    2a92:	d8 22       	and	r13, r24
    2a94:	ee 24       	eor	r14, r14
    2a96:	ff 24       	eor	r15, r15
    2a98:	fe 01       	movw	r30, r28
    2a9a:	ec 0d       	add	r30, r12
    2a9c:	fd 1d       	adc	r31, r13
    2a9e:	66 a5       	ldd	r22, Z+46	; 0x2e
    2aa0:	87 a5       	ldd	r24, Z+47	; 0x2f
    2aa2:	70 e0       	ldi	r23, 0x00	; 0
    2aa4:	78 2b       	or	r23, r24
    2aa6:	80 e0       	ldi	r24, 0x00	; 0
    2aa8:	90 e0       	ldi	r25, 0x00	; 0
    2aaa:	64 c0       	rjmp	.+200    	; 0x2b74 <get_fat+0x1e8>
    2aac:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2aae:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2ab0:	a8 a1       	ldd	r26, Y+32	; 0x20
    2ab2:	b9 a1       	ldd	r27, Y+33	; 0x21
    2ab4:	68 94       	set
    2ab6:	16 f8       	bld	r1, 6
    2ab8:	76 95       	lsr	r23
    2aba:	67 95       	ror	r22
    2abc:	57 95       	ror	r21
    2abe:	47 95       	ror	r20
    2ac0:	16 94       	lsr	r1
    2ac2:	d1 f7       	brne	.-12     	; 0x2ab8 <get_fat+0x12c>
    2ac4:	48 0f       	add	r20, r24
    2ac6:	59 1f       	adc	r21, r25
    2ac8:	6a 1f       	adc	r22, r26
    2aca:	7b 1f       	adc	r23, r27
    2acc:	ce 01       	movw	r24, r28
    2ace:	a5 da       	rcall	.-2742   	; 0x201a <move_window>
    2ad0:	81 11       	cpse	r24, r1
    2ad2:	4d c0       	rjmp	.+154    	; 0x2b6e <get_fat+0x1e2>
    2ad4:	cc 0c       	add	r12, r12
    2ad6:	dd 1c       	adc	r13, r13
    2ad8:	ee 1c       	adc	r14, r14
    2ada:	ff 1c       	adc	r15, r15
    2adc:	cc 0c       	add	r12, r12
    2ade:	dd 1c       	adc	r13, r13
    2ae0:	ee 1c       	adc	r14, r14
    2ae2:	ff 1c       	adc	r15, r15
    2ae4:	8c ef       	ldi	r24, 0xFC	; 252
    2ae6:	c8 22       	and	r12, r24
    2ae8:	81 e0       	ldi	r24, 0x01	; 1
    2aea:	d8 22       	and	r13, r24
    2aec:	ee 24       	eor	r14, r14
    2aee:	ff 24       	eor	r15, r15
    2af0:	f6 01       	movw	r30, r12
    2af2:	be 96       	adiw	r30, 0x2e	; 46
    2af4:	ec 0f       	add	r30, r28
    2af6:	fd 1f       	adc	r31, r29
    2af8:	22 81       	ldd	r18, Z+2	; 0x02
    2afa:	63 81       	ldd	r22, Z+3	; 0x03
    2afc:	86 2f       	mov	r24, r22
    2afe:	90 e0       	ldi	r25, 0x00	; 0
    2b00:	a0 e0       	ldi	r26, 0x00	; 0
    2b02:	b0 e0       	ldi	r27, 0x00	; 0
    2b04:	b8 2f       	mov	r27, r24
    2b06:	aa 27       	eor	r26, r26
    2b08:	99 27       	eor	r25, r25
    2b0a:	88 27       	eor	r24, r24
    2b0c:	ac 01       	movw	r20, r24
    2b0e:	bd 01       	movw	r22, r26
    2b10:	62 2b       	or	r22, r18
    2b12:	81 81       	ldd	r24, Z+1	; 0x01
    2b14:	90 e0       	ldi	r25, 0x00	; 0
    2b16:	98 2f       	mov	r25, r24
    2b18:	88 27       	eor	r24, r24
    2b1a:	a0 e0       	ldi	r26, 0x00	; 0
    2b1c:	b0 e0       	ldi	r27, 0x00	; 0
    2b1e:	84 2b       	or	r24, r20
    2b20:	95 2b       	or	r25, r21
    2b22:	a6 2b       	or	r26, r22
    2b24:	b7 2b       	or	r27, r23
    2b26:	fe 01       	movw	r30, r28
    2b28:	ec 0d       	add	r30, r12
    2b2a:	fd 1d       	adc	r31, r13
    2b2c:	26 a5       	ldd	r18, Z+46	; 0x2e
    2b2e:	82 2b       	or	r24, r18
    2b30:	bc 01       	movw	r22, r24
    2b32:	cd 01       	movw	r24, r26
    2b34:	9f 70       	andi	r25, 0x0F	; 15
    2b36:	1e c0       	rjmp	.+60     	; 0x2b74 <get_fat+0x1e8>
    2b38:	61 e0       	ldi	r22, 0x01	; 1
    2b3a:	70 e0       	ldi	r23, 0x00	; 0
    2b3c:	80 e0       	ldi	r24, 0x00	; 0
    2b3e:	90 e0       	ldi	r25, 0x00	; 0
    2b40:	19 c0       	rjmp	.+50     	; 0x2b74 <get_fat+0x1e8>
    2b42:	61 e0       	ldi	r22, 0x01	; 1
    2b44:	70 e0       	ldi	r23, 0x00	; 0
    2b46:	80 e0       	ldi	r24, 0x00	; 0
    2b48:	90 e0       	ldi	r25, 0x00	; 0
    2b4a:	14 c0       	rjmp	.+40     	; 0x2b74 <get_fat+0x1e8>
    2b4c:	61 e0       	ldi	r22, 0x01	; 1
    2b4e:	70 e0       	ldi	r23, 0x00	; 0
    2b50:	80 e0       	ldi	r24, 0x00	; 0
    2b52:	90 e0       	ldi	r25, 0x00	; 0
    2b54:	0f c0       	rjmp	.+30     	; 0x2b74 <get_fat+0x1e8>
    2b56:	6f ef       	ldi	r22, 0xFF	; 255
    2b58:	7f ef       	ldi	r23, 0xFF	; 255
    2b5a:	cb 01       	movw	r24, r22
    2b5c:	0b c0       	rjmp	.+22     	; 0x2b74 <get_fat+0x1e8>
    2b5e:	6f ef       	ldi	r22, 0xFF	; 255
    2b60:	7f ef       	ldi	r23, 0xFF	; 255
    2b62:	cb 01       	movw	r24, r22
    2b64:	07 c0       	rjmp	.+14     	; 0x2b74 <get_fat+0x1e8>
    2b66:	6f ef       	ldi	r22, 0xFF	; 255
    2b68:	7f ef       	ldi	r23, 0xFF	; 255
    2b6a:	cb 01       	movw	r24, r22
    2b6c:	03 c0       	rjmp	.+6      	; 0x2b74 <get_fat+0x1e8>
    2b6e:	6f ef       	ldi	r22, 0xFF	; 255
    2b70:	7f ef       	ldi	r23, 0xFF	; 255
    2b72:	cb 01       	movw	r24, r22
    2b74:	df 91       	pop	r29
    2b76:	cf 91       	pop	r28
    2b78:	1f 91       	pop	r17
    2b7a:	0f 91       	pop	r16
    2b7c:	ff 90       	pop	r15
    2b7e:	ef 90       	pop	r14
    2b80:	df 90       	pop	r13
    2b82:	cf 90       	pop	r12
    2b84:	bf 90       	pop	r11
    2b86:	af 90       	pop	r10
    2b88:	08 95       	ret

00002b8a <dir_sdi>:
    2b8a:	af 92       	push	r10
    2b8c:	bf 92       	push	r11
    2b8e:	cf 92       	push	r12
    2b90:	df 92       	push	r13
    2b92:	ef 92       	push	r14
    2b94:	ff 92       	push	r15
    2b96:	0f 93       	push	r16
    2b98:	1f 93       	push	r17
    2b9a:	cf 93       	push	r28
    2b9c:	df 93       	push	r29
    2b9e:	ec 01       	movw	r28, r24
    2ba0:	8b 01       	movw	r16, r22
    2ba2:	7d 83       	std	Y+5, r23	; 0x05
    2ba4:	6c 83       	std	Y+4, r22	; 0x04
    2ba6:	ce 80       	ldd	r12, Y+6	; 0x06
    2ba8:	df 80       	ldd	r13, Y+7	; 0x07
    2baa:	e8 84       	ldd	r14, Y+8	; 0x08
    2bac:	f9 84       	ldd	r15, Y+9	; 0x09
    2bae:	81 e0       	ldi	r24, 0x01	; 1
    2bb0:	c8 16       	cp	r12, r24
    2bb2:	d1 04       	cpc	r13, r1
    2bb4:	e1 04       	cpc	r14, r1
    2bb6:	f1 04       	cpc	r15, r1
    2bb8:	09 f4       	brne	.+2      	; 0x2bbc <dir_sdi+0x32>
    2bba:	8a c0       	rjmp	.+276    	; 0x2cd0 <dir_sdi+0x146>
    2bbc:	e8 81       	ld	r30, Y
    2bbe:	f9 81       	ldd	r31, Y+1	; 0x01
    2bc0:	82 89       	ldd	r24, Z+18	; 0x12
    2bc2:	93 89       	ldd	r25, Z+19	; 0x13
    2bc4:	a4 89       	ldd	r26, Z+20	; 0x14
    2bc6:	b5 89       	ldd	r27, Z+21	; 0x15
    2bc8:	c8 16       	cp	r12, r24
    2bca:	d9 06       	cpc	r13, r25
    2bcc:	ea 06       	cpc	r14, r26
    2bce:	fb 06       	cpc	r15, r27
    2bd0:	08 f0       	brcs	.+2      	; 0x2bd4 <dir_sdi+0x4a>
    2bd2:	80 c0       	rjmp	.+256    	; 0x2cd4 <dir_sdi+0x14a>
    2bd4:	c1 14       	cp	r12, r1
    2bd6:	d1 04       	cpc	r13, r1
    2bd8:	e1 04       	cpc	r14, r1
    2bda:	f1 04       	cpc	r15, r1
    2bdc:	c1 f4       	brne	.+48     	; 0x2c0e <dir_sdi+0x84>
    2bde:	80 81       	ld	r24, Z
    2be0:	83 30       	cpi	r24, 0x03	; 3
    2be2:	41 f4       	brne	.+16     	; 0x2bf4 <dir_sdi+0x6a>
    2be4:	82 a1       	ldd	r24, Z+34	; 0x22
    2be6:	93 a1       	ldd	r25, Z+35	; 0x23
    2be8:	a4 a1       	ldd	r26, Z+36	; 0x24
    2bea:	b5 a1       	ldd	r27, Z+37	; 0x25
    2bec:	00 97       	sbiw	r24, 0x00	; 0
    2bee:	a1 05       	cpc	r26, r1
    2bf0:	b1 05       	cpc	r27, r1
    2bf2:	59 f4       	brne	.+22     	; 0x2c0a <dir_sdi+0x80>
    2bf4:	80 85       	ldd	r24, Z+8	; 0x08
    2bf6:	91 85       	ldd	r25, Z+9	; 0x09
    2bf8:	08 17       	cp	r16, r24
    2bfa:	19 07       	cpc	r17, r25
    2bfc:	08 f0       	brcs	.+2      	; 0x2c00 <dir_sdi+0x76>
    2bfe:	6c c0       	rjmp	.+216    	; 0x2cd8 <dir_sdi+0x14e>
    2c00:	62 a1       	ldd	r22, Z+34	; 0x22
    2c02:	73 a1       	ldd	r23, Z+35	; 0x23
    2c04:	84 a1       	ldd	r24, Z+36	; 0x24
    2c06:	95 a1       	ldd	r25, Z+37	; 0x25
    2c08:	35 c0       	rjmp	.+106    	; 0x2c74 <dir_sdi+0xea>
    2c0a:	6c 01       	movw	r12, r24
    2c0c:	7d 01       	movw	r14, r26
    2c0e:	a2 80       	ldd	r10, Z+2	; 0x02
    2c10:	80 e1       	ldi	r24, 0x10	; 16
    2c12:	a8 9e       	mul	r10, r24
    2c14:	50 01       	movw	r10, r0
    2c16:	11 24       	eor	r1, r1
    2c18:	0a 15       	cp	r16, r10
    2c1a:	1b 05       	cpc	r17, r11
    2c1c:	30 f1       	brcs	.+76     	; 0x2c6a <dir_sdi+0xe0>
    2c1e:	b7 01       	movw	r22, r14
    2c20:	a6 01       	movw	r20, r12
    2c22:	88 81       	ld	r24, Y
    2c24:	99 81       	ldd	r25, Y+1	; 0x01
    2c26:	b2 de       	rcall	.-668    	; 0x298c <get_fat>
    2c28:	6b 01       	movw	r12, r22
    2c2a:	7c 01       	movw	r14, r24
    2c2c:	8f ef       	ldi	r24, 0xFF	; 255
    2c2e:	c8 16       	cp	r12, r24
    2c30:	d8 06       	cpc	r13, r24
    2c32:	e8 06       	cpc	r14, r24
    2c34:	f8 06       	cpc	r15, r24
    2c36:	09 f4       	brne	.+2      	; 0x2c3a <dir_sdi+0xb0>
    2c38:	51 c0       	rjmp	.+162    	; 0x2cdc <dir_sdi+0x152>
    2c3a:	82 e0       	ldi	r24, 0x02	; 2
    2c3c:	c8 16       	cp	r12, r24
    2c3e:	d1 04       	cpc	r13, r1
    2c40:	e1 04       	cpc	r14, r1
    2c42:	f1 04       	cpc	r15, r1
    2c44:	08 f4       	brcc	.+2      	; 0x2c48 <dir_sdi+0xbe>
    2c46:	4c c0       	rjmp	.+152    	; 0x2ce0 <dir_sdi+0x156>
    2c48:	e8 81       	ld	r30, Y
    2c4a:	f9 81       	ldd	r31, Y+1	; 0x01
    2c4c:	82 89       	ldd	r24, Z+18	; 0x12
    2c4e:	93 89       	ldd	r25, Z+19	; 0x13
    2c50:	a4 89       	ldd	r26, Z+20	; 0x14
    2c52:	b5 89       	ldd	r27, Z+21	; 0x15
    2c54:	c8 16       	cp	r12, r24
    2c56:	d9 06       	cpc	r13, r25
    2c58:	ea 06       	cpc	r14, r26
    2c5a:	fb 06       	cpc	r15, r27
    2c5c:	08 f0       	brcs	.+2      	; 0x2c60 <dir_sdi+0xd6>
    2c5e:	42 c0       	rjmp	.+132    	; 0x2ce4 <dir_sdi+0x15a>
    2c60:	0a 19       	sub	r16, r10
    2c62:	1b 09       	sbc	r17, r11
    2c64:	0a 15       	cp	r16, r10
    2c66:	1b 05       	cpc	r17, r11
    2c68:	d0 f6       	brcc	.-76     	; 0x2c1e <dir_sdi+0x94>
    2c6a:	b7 01       	movw	r22, r14
    2c6c:	a6 01       	movw	r20, r12
    2c6e:	88 81       	ld	r24, Y
    2c70:	99 81       	ldd	r25, Y+1	; 0x01
    2c72:	5e de       	rcall	.-836    	; 0x2930 <clust2sect>
    2c74:	ca 86       	std	Y+10, r12	; 0x0a
    2c76:	db 86       	std	Y+11, r13	; 0x0b
    2c78:	ec 86       	std	Y+12, r14	; 0x0c
    2c7a:	fd 86       	std	Y+13, r15	; 0x0d
    2c7c:	61 15       	cp	r22, r1
    2c7e:	71 05       	cpc	r23, r1
    2c80:	81 05       	cpc	r24, r1
    2c82:	91 05       	cpc	r25, r1
    2c84:	89 f1       	breq	.+98     	; 0x2ce8 <dir_sdi+0x15e>
    2c86:	98 01       	movw	r18, r16
    2c88:	32 95       	swap	r19
    2c8a:	22 95       	swap	r18
    2c8c:	2f 70       	andi	r18, 0x0F	; 15
    2c8e:	23 27       	eor	r18, r19
    2c90:	3f 70       	andi	r19, 0x0F	; 15
    2c92:	23 27       	eor	r18, r19
    2c94:	dc 01       	movw	r26, r24
    2c96:	cb 01       	movw	r24, r22
    2c98:	82 0f       	add	r24, r18
    2c9a:	93 1f       	adc	r25, r19
    2c9c:	a1 1d       	adc	r26, r1
    2c9e:	b1 1d       	adc	r27, r1
    2ca0:	8e 87       	std	Y+14, r24	; 0x0e
    2ca2:	9f 87       	std	Y+15, r25	; 0x0f
    2ca4:	a8 8b       	std	Y+16, r26	; 0x10
    2ca6:	b9 8b       	std	Y+17, r27	; 0x11
    2ca8:	0f 70       	andi	r16, 0x0F	; 15
    2caa:	11 27       	eor	r17, r17
    2cac:	00 0f       	add	r16, r16
    2cae:	11 1f       	adc	r17, r17
    2cb0:	02 95       	swap	r16
    2cb2:	12 95       	swap	r17
    2cb4:	10 7f       	andi	r17, 0xF0	; 240
    2cb6:	10 27       	eor	r17, r16
    2cb8:	00 7f       	andi	r16, 0xF0	; 240
    2cba:	10 27       	eor	r17, r16
    2cbc:	02 5d       	subi	r16, 0xD2	; 210
    2cbe:	1f 4f       	sbci	r17, 0xFF	; 255
    2cc0:	88 81       	ld	r24, Y
    2cc2:	99 81       	ldd	r25, Y+1	; 0x01
    2cc4:	80 0f       	add	r24, r16
    2cc6:	91 1f       	adc	r25, r17
    2cc8:	9b 8b       	std	Y+19, r25	; 0x13
    2cca:	8a 8b       	std	Y+18, r24	; 0x12
    2ccc:	80 e0       	ldi	r24, 0x00	; 0
    2cce:	0d c0       	rjmp	.+26     	; 0x2cea <dir_sdi+0x160>
    2cd0:	82 e0       	ldi	r24, 0x02	; 2
    2cd2:	0b c0       	rjmp	.+22     	; 0x2cea <dir_sdi+0x160>
    2cd4:	82 e0       	ldi	r24, 0x02	; 2
    2cd6:	09 c0       	rjmp	.+18     	; 0x2cea <dir_sdi+0x160>
    2cd8:	82 e0       	ldi	r24, 0x02	; 2
    2cda:	07 c0       	rjmp	.+14     	; 0x2cea <dir_sdi+0x160>
    2cdc:	81 e0       	ldi	r24, 0x01	; 1
    2cde:	05 c0       	rjmp	.+10     	; 0x2cea <dir_sdi+0x160>
    2ce0:	82 e0       	ldi	r24, 0x02	; 2
    2ce2:	03 c0       	rjmp	.+6      	; 0x2cea <dir_sdi+0x160>
    2ce4:	82 e0       	ldi	r24, 0x02	; 2
    2ce6:	01 c0       	rjmp	.+2      	; 0x2cea <dir_sdi+0x160>
    2ce8:	82 e0       	ldi	r24, 0x02	; 2
    2cea:	df 91       	pop	r29
    2cec:	cf 91       	pop	r28
    2cee:	1f 91       	pop	r17
    2cf0:	0f 91       	pop	r16
    2cf2:	ff 90       	pop	r15
    2cf4:	ef 90       	pop	r14
    2cf6:	df 90       	pop	r13
    2cf8:	cf 90       	pop	r12
    2cfa:	bf 90       	pop	r11
    2cfc:	af 90       	pop	r10
    2cfe:	08 95       	ret

00002d00 <put_fat>:
    2d00:	4f 92       	push	r4
    2d02:	5f 92       	push	r5
    2d04:	6f 92       	push	r6
    2d06:	7f 92       	push	r7
    2d08:	8f 92       	push	r8
    2d0a:	9f 92       	push	r9
    2d0c:	af 92       	push	r10
    2d0e:	bf 92       	push	r11
    2d10:	cf 92       	push	r12
    2d12:	df 92       	push	r13
    2d14:	ef 92       	push	r14
    2d16:	ff 92       	push	r15
    2d18:	0f 93       	push	r16
    2d1a:	1f 93       	push	r17
    2d1c:	cf 93       	push	r28
    2d1e:	df 93       	push	r29
    2d20:	ec 01       	movw	r28, r24
    2d22:	6a 01       	movw	r12, r20
    2d24:	7b 01       	movw	r14, r22
    2d26:	28 01       	movw	r4, r16
    2d28:	39 01       	movw	r6, r18
    2d2a:	42 30       	cpi	r20, 0x02	; 2
    2d2c:	51 05       	cpc	r21, r1
    2d2e:	61 05       	cpc	r22, r1
    2d30:	71 05       	cpc	r23, r1
    2d32:	08 f4       	brcc	.+2      	; 0x2d36 <put_fat+0x36>
    2d34:	d8 c0       	rjmp	.+432    	; 0x2ee6 <put_fat+0x1e6>
    2d36:	8a 89       	ldd	r24, Y+18	; 0x12
    2d38:	9b 89       	ldd	r25, Y+19	; 0x13
    2d3a:	ac 89       	ldd	r26, Y+20	; 0x14
    2d3c:	bd 89       	ldd	r27, Y+21	; 0x15
    2d3e:	48 17       	cp	r20, r24
    2d40:	59 07       	cpc	r21, r25
    2d42:	6a 07       	cpc	r22, r26
    2d44:	7b 07       	cpc	r23, r27
    2d46:	08 f0       	brcs	.+2      	; 0x2d4a <put_fat+0x4a>
    2d48:	d0 c0       	rjmp	.+416    	; 0x2eea <put_fat+0x1ea>
    2d4a:	88 81       	ld	r24, Y
    2d4c:	82 30       	cpi	r24, 0x02	; 2
    2d4e:	09 f4       	brne	.+2      	; 0x2d52 <put_fat+0x52>
    2d50:	62 c0       	rjmp	.+196    	; 0x2e16 <put_fat+0x116>
    2d52:	83 30       	cpi	r24, 0x03	; 3
    2d54:	09 f4       	brne	.+2      	; 0x2d58 <put_fat+0x58>
    2d56:	85 c0       	rjmp	.+266    	; 0x2e62 <put_fat+0x162>
    2d58:	81 30       	cpi	r24, 0x01	; 1
    2d5a:	09 f0       	breq	.+2      	; 0x2d5e <put_fat+0x5e>
    2d5c:	c8 c0       	rjmp	.+400    	; 0x2eee <put_fat+0x1ee>
    2d5e:	5a 01       	movw	r10, r20
    2d60:	b6 94       	lsr	r11
    2d62:	a7 94       	ror	r10
    2d64:	a4 0e       	add	r10, r20
    2d66:	b5 1e       	adc	r11, r21
    2d68:	c5 01       	movw	r24, r10
    2d6a:	89 2f       	mov	r24, r25
    2d6c:	99 27       	eor	r25, r25
    2d6e:	86 95       	lsr	r24
    2d70:	4e 8d       	ldd	r20, Y+30	; 0x1e
    2d72:	5f 8d       	ldd	r21, Y+31	; 0x1f
    2d74:	68 a1       	ldd	r22, Y+32	; 0x20
    2d76:	79 a1       	ldd	r23, Y+33	; 0x21
    2d78:	48 0f       	add	r20, r24
    2d7a:	59 1f       	adc	r21, r25
    2d7c:	61 1d       	adc	r22, r1
    2d7e:	71 1d       	adc	r23, r1
    2d80:	ce 01       	movw	r24, r28
    2d82:	4b d9       	rcall	.-3434   	; 0x201a <move_window>
    2d84:	18 2f       	mov	r17, r24
    2d86:	81 11       	cpse	r24, r1
    2d88:	d0 c0       	rjmp	.+416    	; 0x2f2a <put_fat+0x22a>
    2d8a:	45 01       	movw	r8, r10
    2d8c:	8f ef       	ldi	r24, 0xFF	; 255
    2d8e:	88 1a       	sub	r8, r24
    2d90:	98 0a       	sbc	r9, r24
    2d92:	a1 e0       	ldi	r26, 0x01	; 1
    2d94:	ba 22       	and	r11, r26
    2d96:	c0 fe       	sbrs	r12, 0
    2d98:	20 c0       	rjmp	.+64     	; 0x2dda <put_fat+0xda>
    2d9a:	fe 01       	movw	r30, r28
    2d9c:	ea 0d       	add	r30, r10
    2d9e:	fb 1d       	adc	r31, r11
    2da0:	86 a5       	ldd	r24, Z+46	; 0x2e
    2da2:	28 2f       	mov	r18, r24
    2da4:	2f 70       	andi	r18, 0x0F	; 15
    2da6:	b0 e1       	ldi	r27, 0x10	; 16
    2da8:	4b 9e       	mul	r4, r27
    2daa:	c0 01       	movw	r24, r0
    2dac:	11 24       	eor	r1, r1
    2dae:	82 2b       	or	r24, r18
    2db0:	86 a7       	std	Z+46, r24	; 0x2e
    2db2:	81 e0       	ldi	r24, 0x01	; 1
    2db4:	8c 83       	std	Y+4, r24	; 0x04
    2db6:	4e 8d       	ldd	r20, Y+30	; 0x1e
    2db8:	5f 8d       	ldd	r21, Y+31	; 0x1f
    2dba:	68 a1       	ldd	r22, Y+32	; 0x20
    2dbc:	79 a1       	ldd	r23, Y+33	; 0x21
    2dbe:	c4 01       	movw	r24, r8
    2dc0:	89 2f       	mov	r24, r25
    2dc2:	99 27       	eor	r25, r25
    2dc4:	86 95       	lsr	r24
    2dc6:	48 0f       	add	r20, r24
    2dc8:	59 1f       	adc	r21, r25
    2dca:	61 1d       	adc	r22, r1
    2dcc:	71 1d       	adc	r23, r1
    2dce:	ce 01       	movw	r24, r28
    2dd0:	24 d9       	rcall	.-3512   	; 0x201a <move_window>
    2dd2:	88 23       	and	r24, r24
    2dd4:	09 f4       	brne	.+2      	; 0x2dd8 <put_fat+0xd8>
    2dd6:	91 c0       	rjmp	.+290    	; 0x2efa <put_fat+0x1fa>
    2dd8:	8c c0       	rjmp	.+280    	; 0x2ef2 <put_fat+0x1f2>
    2dda:	fe 01       	movw	r30, r28
    2ddc:	ea 0d       	add	r30, r10
    2dde:	fb 1d       	adc	r31, r11
    2de0:	46 a6       	std	Z+46, r4	; 0x2e
    2de2:	81 e0       	ldi	r24, 0x01	; 1
    2de4:	8c 83       	std	Y+4, r24	; 0x04
    2de6:	4e 8d       	ldd	r20, Y+30	; 0x1e
    2de8:	5f 8d       	ldd	r21, Y+31	; 0x1f
    2dea:	68 a1       	ldd	r22, Y+32	; 0x20
    2dec:	79 a1       	ldd	r23, Y+33	; 0x21
    2dee:	c4 01       	movw	r24, r8
    2df0:	89 2f       	mov	r24, r25
    2df2:	99 27       	eor	r25, r25
    2df4:	86 95       	lsr	r24
    2df6:	48 0f       	add	r20, r24
    2df8:	59 1f       	adc	r21, r25
    2dfa:	61 1d       	adc	r22, r1
    2dfc:	71 1d       	adc	r23, r1
    2dfe:	ce 01       	movw	r24, r28
    2e00:	0c d9       	rcall	.-3560   	; 0x201a <move_window>
    2e02:	88 23       	and	r24, r24
    2e04:	09 f4       	brne	.+2      	; 0x2e08 <put_fat+0x108>
    2e06:	84 c0       	rjmp	.+264    	; 0x2f10 <put_fat+0x210>
    2e08:	76 c0       	rjmp	.+236    	; 0x2ef6 <put_fat+0x1f6>
    2e0a:	ec 0f       	add	r30, r28
    2e0c:	fd 1f       	adc	r31, r29
    2e0e:	46 a6       	std	Z+46, r4	; 0x2e
    2e10:	81 e0       	ldi	r24, 0x01	; 1
    2e12:	8c 83       	std	Y+4, r24	; 0x04
    2e14:	8a c0       	rjmp	.+276    	; 0x2f2a <put_fat+0x22a>
    2e16:	45 2f       	mov	r20, r21
    2e18:	56 2f       	mov	r21, r22
    2e1a:	67 2f       	mov	r22, r23
    2e1c:	77 27       	eor	r23, r23
    2e1e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2e20:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2e22:	a8 a1       	ldd	r26, Y+32	; 0x20
    2e24:	b9 a1       	ldd	r27, Y+33	; 0x21
    2e26:	48 0f       	add	r20, r24
    2e28:	59 1f       	adc	r21, r25
    2e2a:	6a 1f       	adc	r22, r26
    2e2c:	7b 1f       	adc	r23, r27
    2e2e:	ce 01       	movw	r24, r28
    2e30:	f4 d8       	rcall	.-3608   	; 0x201a <move_window>
    2e32:	18 2f       	mov	r17, r24
    2e34:	81 11       	cpse	r24, r1
    2e36:	79 c0       	rjmp	.+242    	; 0x2f2a <put_fat+0x22a>
    2e38:	cc 0c       	add	r12, r12
    2e3a:	dd 1c       	adc	r13, r13
    2e3c:	ee 1c       	adc	r14, r14
    2e3e:	ff 1c       	adc	r15, r15
    2e40:	e8 94       	clt
    2e42:	c0 f8       	bld	r12, 0
    2e44:	31 e0       	ldi	r19, 0x01	; 1
    2e46:	d3 22       	and	r13, r19
    2e48:	ee 24       	eor	r14, r14
    2e4a:	ff 24       	eor	r15, r15
    2e4c:	fe 01       	movw	r30, r28
    2e4e:	ec 0d       	add	r30, r12
    2e50:	fd 1d       	adc	r31, r13
    2e52:	46 a6       	std	Z+46, r4	; 0x2e
    2e54:	fe 01       	movw	r30, r28
    2e56:	ec 0d       	add	r30, r12
    2e58:	fd 1d       	adc	r31, r13
    2e5a:	57 a6       	std	Z+47, r5	; 0x2f
    2e5c:	81 e0       	ldi	r24, 0x01	; 1
    2e5e:	8c 83       	std	Y+4, r24	; 0x04
    2e60:	64 c0       	rjmp	.+200    	; 0x2f2a <put_fat+0x22a>
    2e62:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2e64:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2e66:	a8 a1       	ldd	r26, Y+32	; 0x20
    2e68:	b9 a1       	ldd	r27, Y+33	; 0x21
    2e6a:	68 94       	set
    2e6c:	16 f8       	bld	r1, 6
    2e6e:	76 95       	lsr	r23
    2e70:	67 95       	ror	r22
    2e72:	57 95       	ror	r21
    2e74:	47 95       	ror	r20
    2e76:	16 94       	lsr	r1
    2e78:	d1 f7       	brne	.-12     	; 0x2e6e <put_fat+0x16e>
    2e7a:	48 0f       	add	r20, r24
    2e7c:	59 1f       	adc	r21, r25
    2e7e:	6a 1f       	adc	r22, r26
    2e80:	7b 1f       	adc	r23, r27
    2e82:	ce 01       	movw	r24, r28
    2e84:	ca d8       	rcall	.-3692   	; 0x201a <move_window>
    2e86:	18 2f       	mov	r17, r24
    2e88:	81 11       	cpse	r24, r1
    2e8a:	4f c0       	rjmp	.+158    	; 0x2f2a <put_fat+0x22a>
    2e8c:	cc 0c       	add	r12, r12
    2e8e:	dd 1c       	adc	r13, r13
    2e90:	ee 1c       	adc	r14, r14
    2e92:	ff 1c       	adc	r15, r15
    2e94:	cc 0c       	add	r12, r12
    2e96:	dd 1c       	adc	r13, r13
    2e98:	ee 1c       	adc	r14, r14
    2e9a:	ff 1c       	adc	r15, r15
    2e9c:	8c ef       	ldi	r24, 0xFC	; 252
    2e9e:	c8 22       	and	r12, r24
    2ea0:	81 e0       	ldi	r24, 0x01	; 1
    2ea2:	d8 22       	and	r13, r24
    2ea4:	ee 24       	eor	r14, r14
    2ea6:	ff 24       	eor	r15, r15
    2ea8:	f6 01       	movw	r30, r12
    2eaa:	be 96       	adiw	r30, 0x2e	; 46
    2eac:	ec 0f       	add	r30, r28
    2eae:	fd 1f       	adc	r31, r29
    2eb0:	83 81       	ldd	r24, Z+3	; 0x03
    2eb2:	90 e0       	ldi	r25, 0x00	; 0
    2eb4:	a0 e0       	ldi	r26, 0x00	; 0
    2eb6:	b0 e0       	ldi	r27, 0x00	; 0
    2eb8:	b8 2f       	mov	r27, r24
    2eba:	aa 27       	eor	r26, r26
    2ebc:	99 27       	eor	r25, r25
    2ebe:	88 27       	eor	r24, r24
    2ec0:	cc 0e       	add	r12, r28
    2ec2:	dd 1e       	adc	r13, r29
    2ec4:	88 27       	eor	r24, r24
    2ec6:	99 27       	eor	r25, r25
    2ec8:	aa 27       	eor	r26, r26
    2eca:	b0 7f       	andi	r27, 0xF0	; 240
    2ecc:	48 2a       	or	r4, r24
    2ece:	59 2a       	or	r5, r25
    2ed0:	6a 2a       	or	r6, r26
    2ed2:	7b 2a       	or	r7, r27
    2ed4:	d6 01       	movw	r26, r12
    2ed6:	9e 96       	adiw	r26, 0x2e	; 46
    2ed8:	4c 92       	st	X, r4
    2eda:	51 82       	std	Z+1, r5	; 0x01
    2edc:	62 82       	std	Z+2, r6	; 0x02
    2ede:	73 82       	std	Z+3, r7	; 0x03
    2ee0:	81 e0       	ldi	r24, 0x01	; 1
    2ee2:	8c 83       	std	Y+4, r24	; 0x04
    2ee4:	22 c0       	rjmp	.+68     	; 0x2f2a <put_fat+0x22a>
    2ee6:	12 e0       	ldi	r17, 0x02	; 2
    2ee8:	20 c0       	rjmp	.+64     	; 0x2f2a <put_fat+0x22a>
    2eea:	12 e0       	ldi	r17, 0x02	; 2
    2eec:	1e c0       	rjmp	.+60     	; 0x2f2a <put_fat+0x22a>
    2eee:	12 e0       	ldi	r17, 0x02	; 2
    2ef0:	1c c0       	rjmp	.+56     	; 0x2f2a <put_fat+0x22a>
    2ef2:	18 2f       	mov	r17, r24
    2ef4:	1a c0       	rjmp	.+52     	; 0x2f2a <put_fat+0x22a>
    2ef6:	18 2f       	mov	r17, r24
    2ef8:	18 c0       	rjmp	.+48     	; 0x2f2a <put_fat+0x22a>
    2efa:	f4 01       	movw	r30, r8
    2efc:	f1 70       	andi	r31, 0x01	; 1
    2efe:	68 94       	set
    2f00:	13 f8       	bld	r1, 3
    2f02:	76 94       	lsr	r7
    2f04:	67 94       	ror	r6
    2f06:	57 94       	ror	r5
    2f08:	47 94       	ror	r4
    2f0a:	16 94       	lsr	r1
    2f0c:	d1 f7       	brne	.-12     	; 0x2f02 <put_fat+0x202>
    2f0e:	7d cf       	rjmp	.-262    	; 0x2e0a <put_fat+0x10a>
    2f10:	f4 01       	movw	r30, r8
    2f12:	f1 70       	andi	r31, 0x01	; 1
    2f14:	de 01       	movw	r26, r28
    2f16:	ae 0f       	add	r26, r30
    2f18:	bf 1f       	adc	r27, r31
    2f1a:	9e 96       	adiw	r26, 0x2e	; 46
    2f1c:	9c 91       	ld	r25, X
    2f1e:	90 7f       	andi	r25, 0xF0	; 240
    2f20:	85 2d       	mov	r24, r5
    2f22:	8f 70       	andi	r24, 0x0F	; 15
    2f24:	49 2e       	mov	r4, r25
    2f26:	48 2a       	or	r4, r24
    2f28:	70 cf       	rjmp	.-288    	; 0x2e0a <put_fat+0x10a>
    2f2a:	81 2f       	mov	r24, r17
    2f2c:	df 91       	pop	r29
    2f2e:	cf 91       	pop	r28
    2f30:	1f 91       	pop	r17
    2f32:	0f 91       	pop	r16
    2f34:	ff 90       	pop	r15
    2f36:	ef 90       	pop	r14
    2f38:	df 90       	pop	r13
    2f3a:	cf 90       	pop	r12
    2f3c:	bf 90       	pop	r11
    2f3e:	af 90       	pop	r10
    2f40:	9f 90       	pop	r9
    2f42:	8f 90       	pop	r8
    2f44:	7f 90       	pop	r7
    2f46:	6f 90       	pop	r6
    2f48:	5f 90       	pop	r5
    2f4a:	4f 90       	pop	r4
    2f4c:	08 95       	ret

00002f4e <create_chain>:
    2f4e:	2f 92       	push	r2
    2f50:	3f 92       	push	r3
    2f52:	4f 92       	push	r4
    2f54:	5f 92       	push	r5
    2f56:	6f 92       	push	r6
    2f58:	7f 92       	push	r7
    2f5a:	8f 92       	push	r8
    2f5c:	9f 92       	push	r9
    2f5e:	af 92       	push	r10
    2f60:	bf 92       	push	r11
    2f62:	cf 92       	push	r12
    2f64:	df 92       	push	r13
    2f66:	ef 92       	push	r14
    2f68:	ff 92       	push	r15
    2f6a:	0f 93       	push	r16
    2f6c:	1f 93       	push	r17
    2f6e:	cf 93       	push	r28
    2f70:	df 93       	push	r29
    2f72:	ec 01       	movw	r28, r24
    2f74:	2a 01       	movw	r4, r20
    2f76:	3b 01       	movw	r6, r22
    2f78:	41 15       	cp	r20, r1
    2f7a:	51 05       	cpc	r21, r1
    2f7c:	61 05       	cpc	r22, r1
    2f7e:	71 05       	cpc	r23, r1
    2f80:	b9 f4       	brne	.+46     	; 0x2fb0 <create_chain+0x62>
    2f82:	8a 84       	ldd	r8, Y+10	; 0x0a
    2f84:	9b 84       	ldd	r9, Y+11	; 0x0b
    2f86:	ac 84       	ldd	r10, Y+12	; 0x0c
    2f88:	bd 84       	ldd	r11, Y+13	; 0x0d
    2f8a:	81 14       	cp	r8, r1
    2f8c:	91 04       	cpc	r9, r1
    2f8e:	a1 04       	cpc	r10, r1
    2f90:	b1 04       	cpc	r11, r1
    2f92:	59 f1       	breq	.+86     	; 0x2fea <create_chain+0x9c>
    2f94:	8a 89       	ldd	r24, Y+18	; 0x12
    2f96:	9b 89       	ldd	r25, Y+19	; 0x13
    2f98:	ac 89       	ldd	r26, Y+20	; 0x14
    2f9a:	bd 89       	ldd	r27, Y+21	; 0x15
    2f9c:	88 16       	cp	r8, r24
    2f9e:	99 06       	cpc	r9, r25
    2fa0:	aa 06       	cpc	r10, r26
    2fa2:	bb 06       	cpc	r11, r27
    2fa4:	30 f1       	brcs	.+76     	; 0x2ff2 <create_chain+0xa4>
    2fa6:	81 2c       	mov	r8, r1
    2fa8:	91 2c       	mov	r9, r1
    2faa:	54 01       	movw	r10, r8
    2fac:	83 94       	inc	r8
    2fae:	21 c0       	rjmp	.+66     	; 0x2ff2 <create_chain+0xa4>
    2fb0:	ed dc       	rcall	.-1574   	; 0x298c <get_fat>
    2fb2:	6b 01       	movw	r12, r22
    2fb4:	7c 01       	movw	r14, r24
    2fb6:	62 30       	cpi	r22, 0x02	; 2
    2fb8:	71 05       	cpc	r23, r1
    2fba:	81 05       	cpc	r24, r1
    2fbc:	91 05       	cpc	r25, r1
    2fbe:	08 f4       	brcc	.+2      	; 0x2fc2 <create_chain+0x74>
    2fc0:	96 c0       	rjmp	.+300    	; 0x30ee <create_chain+0x1a0>
    2fc2:	8f ef       	ldi	r24, 0xFF	; 255
    2fc4:	c8 16       	cp	r12, r24
    2fc6:	d8 06       	cpc	r13, r24
    2fc8:	e8 06       	cpc	r14, r24
    2fca:	f8 06       	cpc	r15, r24
    2fcc:	09 f4       	brne	.+2      	; 0x2fd0 <create_chain+0x82>
    2fce:	94 c0       	rjmp	.+296    	; 0x30f8 <create_chain+0x1aa>
    2fd0:	8a 89       	ldd	r24, Y+18	; 0x12
    2fd2:	9b 89       	ldd	r25, Y+19	; 0x13
    2fd4:	ac 89       	ldd	r26, Y+20	; 0x14
    2fd6:	bd 89       	ldd	r27, Y+21	; 0x15
    2fd8:	c8 16       	cp	r12, r24
    2fda:	d9 06       	cpc	r13, r25
    2fdc:	ea 06       	cpc	r14, r26
    2fde:	fb 06       	cpc	r15, r27
    2fe0:	08 f4       	brcc	.+2      	; 0x2fe4 <create_chain+0x96>
    2fe2:	8f c0       	rjmp	.+286    	; 0x3102 <create_chain+0x1b4>
    2fe4:	53 01       	movw	r10, r6
    2fe6:	42 01       	movw	r8, r4
    2fe8:	04 c0       	rjmp	.+8      	; 0x2ff2 <create_chain+0xa4>
    2fea:	81 2c       	mov	r8, r1
    2fec:	91 2c       	mov	r9, r1
    2fee:	54 01       	movw	r10, r8
    2ff0:	83 94       	inc	r8
    2ff2:	75 01       	movw	r14, r10
    2ff4:	64 01       	movw	r12, r8
    2ff6:	68 94       	set
    2ff8:	22 24       	eor	r2, r2
    2ffa:	21 f8       	bld	r2, 1
    2ffc:	31 2c       	mov	r3, r1
    2ffe:	00 e0       	ldi	r16, 0x00	; 0
    3000:	10 e0       	ldi	r17, 0x00	; 0
    3002:	2f ef       	ldi	r18, 0xFF	; 255
    3004:	c2 1a       	sub	r12, r18
    3006:	d2 0a       	sbc	r13, r18
    3008:	e2 0a       	sbc	r14, r18
    300a:	f2 0a       	sbc	r15, r18
    300c:	8a 89       	ldd	r24, Y+18	; 0x12
    300e:	9b 89       	ldd	r25, Y+19	; 0x13
    3010:	ac 89       	ldd	r26, Y+20	; 0x14
    3012:	bd 89       	ldd	r27, Y+21	; 0x15
    3014:	c8 16       	cp	r12, r24
    3016:	d9 06       	cpc	r13, r25
    3018:	ea 06       	cpc	r14, r26
    301a:	fb 06       	cpc	r15, r27
    301c:	58 f0       	brcs	.+22     	; 0x3034 <create_chain+0xe6>
    301e:	82 e0       	ldi	r24, 0x02	; 2
    3020:	88 16       	cp	r8, r24
    3022:	91 04       	cpc	r9, r1
    3024:	a1 04       	cpc	r10, r1
    3026:	b1 04       	cpc	r11, r1
    3028:	08 f4       	brcc	.+2      	; 0x302c <create_chain+0xde>
    302a:	70 c0       	rjmp	.+224    	; 0x310c <create_chain+0x1be>
    302c:	c2 2c       	mov	r12, r2
    302e:	d3 2c       	mov	r13, r3
    3030:	e0 2e       	mov	r14, r16
    3032:	f1 2e       	mov	r15, r17
    3034:	b7 01       	movw	r22, r14
    3036:	a6 01       	movw	r20, r12
    3038:	ce 01       	movw	r24, r28
    303a:	a8 dc       	rcall	.-1712   	; 0x298c <get_fat>
    303c:	61 15       	cp	r22, r1
    303e:	71 05       	cpc	r23, r1
    3040:	81 05       	cpc	r24, r1
    3042:	91 05       	cpc	r25, r1
    3044:	99 f0       	breq	.+38     	; 0x306c <create_chain+0x11e>
    3046:	6f 3f       	cpi	r22, 0xFF	; 255
    3048:	2f ef       	ldi	r18, 0xFF	; 255
    304a:	72 07       	cpc	r23, r18
    304c:	82 07       	cpc	r24, r18
    304e:	92 07       	cpc	r25, r18
    3050:	09 f4       	brne	.+2      	; 0x3054 <create_chain+0x106>
    3052:	61 c0       	rjmp	.+194    	; 0x3116 <create_chain+0x1c8>
    3054:	61 30       	cpi	r22, 0x01	; 1
    3056:	71 05       	cpc	r23, r1
    3058:	81 05       	cpc	r24, r1
    305a:	91 05       	cpc	r25, r1
    305c:	09 f4       	brne	.+2      	; 0x3060 <create_chain+0x112>
    305e:	60 c0       	rjmp	.+192    	; 0x3120 <create_chain+0x1d2>
    3060:	c8 14       	cp	r12, r8
    3062:	d9 04       	cpc	r13, r9
    3064:	ea 04       	cpc	r14, r10
    3066:	fb 04       	cpc	r15, r11
    3068:	61 f6       	brne	.-104    	; 0x3002 <create_chain+0xb4>
    306a:	5f c0       	rjmp	.+190    	; 0x312a <create_chain+0x1dc>
    306c:	8c 2c       	mov	r8, r12
    306e:	9d 2c       	mov	r9, r13
    3070:	ae 2c       	mov	r10, r14
    3072:	bf 2c       	mov	r11, r15
    3074:	0f ef       	ldi	r16, 0xFF	; 255
    3076:	1f ef       	ldi	r17, 0xFF	; 255
    3078:	2f ef       	ldi	r18, 0xFF	; 255
    307a:	3f e0       	ldi	r19, 0x0F	; 15
    307c:	b7 01       	movw	r22, r14
    307e:	a6 01       	movw	r20, r12
    3080:	ce 01       	movw	r24, r28
    3082:	3e de       	rcall	.-900    	; 0x2d00 <put_fat>
    3084:	81 11       	cpse	r24, r1
    3086:	2c c0       	rjmp	.+88     	; 0x30e0 <create_chain+0x192>
    3088:	41 14       	cp	r4, r1
    308a:	51 04       	cpc	r5, r1
    308c:	61 04       	cpc	r6, r1
    308e:	71 04       	cpc	r7, r1
    3090:	51 f0       	breq	.+20     	; 0x30a6 <create_chain+0x158>
    3092:	0c 2d       	mov	r16, r12
    3094:	1d 2d       	mov	r17, r13
    3096:	2e 2d       	mov	r18, r14
    3098:	3f 2d       	mov	r19, r15
    309a:	b3 01       	movw	r22, r6
    309c:	a2 01       	movw	r20, r4
    309e:	ce 01       	movw	r24, r28
    30a0:	2f de       	rcall	.-930    	; 0x2d00 <put_fat>
    30a2:	81 11       	cpse	r24, r1
    30a4:	1d c0       	rjmp	.+58     	; 0x30e0 <create_chain+0x192>
    30a6:	8a 86       	std	Y+10, r8	; 0x0a
    30a8:	9b 86       	std	Y+11, r9	; 0x0b
    30aa:	ac 86       	std	Y+12, r10	; 0x0c
    30ac:	bd 86       	std	Y+13, r11	; 0x0d
    30ae:	8e 85       	ldd	r24, Y+14	; 0x0e
    30b0:	9f 85       	ldd	r25, Y+15	; 0x0f
    30b2:	a8 89       	ldd	r26, Y+16	; 0x10
    30b4:	b9 89       	ldd	r27, Y+17	; 0x11
    30b6:	8f 3f       	cpi	r24, 0xFF	; 255
    30b8:	2f ef       	ldi	r18, 0xFF	; 255
    30ba:	92 07       	cpc	r25, r18
    30bc:	a2 07       	cpc	r26, r18
    30be:	b2 07       	cpc	r27, r18
    30c0:	c9 f1       	breq	.+114    	; 0x3134 <create_chain+0x1e6>
    30c2:	01 97       	sbiw	r24, 0x01	; 1
    30c4:	a1 09       	sbc	r26, r1
    30c6:	b1 09       	sbc	r27, r1
    30c8:	8e 87       	std	Y+14, r24	; 0x0e
    30ca:	9f 87       	std	Y+15, r25	; 0x0f
    30cc:	a8 8b       	std	Y+16, r26	; 0x10
    30ce:	b9 8b       	std	Y+17, r27	; 0x11
    30d0:	8d 81       	ldd	r24, Y+5	; 0x05
    30d2:	81 60       	ori	r24, 0x01	; 1
    30d4:	8d 83       	std	Y+5, r24	; 0x05
    30d6:	6c 2d       	mov	r22, r12
    30d8:	7d 2d       	mov	r23, r13
    30da:	8e 2d       	mov	r24, r14
    30dc:	9f 2d       	mov	r25, r15
    30de:	33 c0       	rjmp	.+102    	; 0x3146 <create_chain+0x1f8>
    30e0:	81 30       	cpi	r24, 0x01	; 1
    30e2:	69 f1       	breq	.+90     	; 0x313e <create_chain+0x1f0>
    30e4:	61 e0       	ldi	r22, 0x01	; 1
    30e6:	70 e0       	ldi	r23, 0x00	; 0
    30e8:	80 e0       	ldi	r24, 0x00	; 0
    30ea:	90 e0       	ldi	r25, 0x00	; 0
    30ec:	2c c0       	rjmp	.+88     	; 0x3146 <create_chain+0x1f8>
    30ee:	61 e0       	ldi	r22, 0x01	; 1
    30f0:	70 e0       	ldi	r23, 0x00	; 0
    30f2:	80 e0       	ldi	r24, 0x00	; 0
    30f4:	90 e0       	ldi	r25, 0x00	; 0
    30f6:	27 c0       	rjmp	.+78     	; 0x3146 <create_chain+0x1f8>
    30f8:	6f ef       	ldi	r22, 0xFF	; 255
    30fa:	7f ef       	ldi	r23, 0xFF	; 255
    30fc:	8f ef       	ldi	r24, 0xFF	; 255
    30fe:	9f ef       	ldi	r25, 0xFF	; 255
    3100:	22 c0       	rjmp	.+68     	; 0x3146 <create_chain+0x1f8>
    3102:	6c 2d       	mov	r22, r12
    3104:	7d 2d       	mov	r23, r13
    3106:	8e 2d       	mov	r24, r14
    3108:	9f 2d       	mov	r25, r15
    310a:	1d c0       	rjmp	.+58     	; 0x3146 <create_chain+0x1f8>
    310c:	60 e0       	ldi	r22, 0x00	; 0
    310e:	70 e0       	ldi	r23, 0x00	; 0
    3110:	80 e0       	ldi	r24, 0x00	; 0
    3112:	90 e0       	ldi	r25, 0x00	; 0
    3114:	18 c0       	rjmp	.+48     	; 0x3146 <create_chain+0x1f8>
    3116:	6f ef       	ldi	r22, 0xFF	; 255
    3118:	7f ef       	ldi	r23, 0xFF	; 255
    311a:	8f ef       	ldi	r24, 0xFF	; 255
    311c:	9f ef       	ldi	r25, 0xFF	; 255
    311e:	13 c0       	rjmp	.+38     	; 0x3146 <create_chain+0x1f8>
    3120:	61 e0       	ldi	r22, 0x01	; 1
    3122:	70 e0       	ldi	r23, 0x00	; 0
    3124:	80 e0       	ldi	r24, 0x00	; 0
    3126:	90 e0       	ldi	r25, 0x00	; 0
    3128:	0e c0       	rjmp	.+28     	; 0x3146 <create_chain+0x1f8>
    312a:	60 e0       	ldi	r22, 0x00	; 0
    312c:	70 e0       	ldi	r23, 0x00	; 0
    312e:	80 e0       	ldi	r24, 0x00	; 0
    3130:	90 e0       	ldi	r25, 0x00	; 0
    3132:	09 c0       	rjmp	.+18     	; 0x3146 <create_chain+0x1f8>
    3134:	6c 2d       	mov	r22, r12
    3136:	7d 2d       	mov	r23, r13
    3138:	8e 2d       	mov	r24, r14
    313a:	9f 2d       	mov	r25, r15
    313c:	04 c0       	rjmp	.+8      	; 0x3146 <create_chain+0x1f8>
    313e:	6f ef       	ldi	r22, 0xFF	; 255
    3140:	7f ef       	ldi	r23, 0xFF	; 255
    3142:	8f ef       	ldi	r24, 0xFF	; 255
    3144:	9f ef       	ldi	r25, 0xFF	; 255
    3146:	df 91       	pop	r29
    3148:	cf 91       	pop	r28
    314a:	1f 91       	pop	r17
    314c:	0f 91       	pop	r16
    314e:	ff 90       	pop	r15
    3150:	ef 90       	pop	r14
    3152:	df 90       	pop	r13
    3154:	cf 90       	pop	r12
    3156:	bf 90       	pop	r11
    3158:	af 90       	pop	r10
    315a:	9f 90       	pop	r9
    315c:	8f 90       	pop	r8
    315e:	7f 90       	pop	r7
    3160:	6f 90       	pop	r6
    3162:	5f 90       	pop	r5
    3164:	4f 90       	pop	r4
    3166:	3f 90       	pop	r3
    3168:	2f 90       	pop	r2
    316a:	08 95       	ret

0000316c <dir_next>:
    316c:	7f 92       	push	r7
    316e:	8f 92       	push	r8
    3170:	9f 92       	push	r9
    3172:	af 92       	push	r10
    3174:	bf 92       	push	r11
    3176:	cf 92       	push	r12
    3178:	df 92       	push	r13
    317a:	ef 92       	push	r14
    317c:	ff 92       	push	r15
    317e:	0f 93       	push	r16
    3180:	1f 93       	push	r17
    3182:	cf 93       	push	r28
    3184:	df 93       	push	r29
    3186:	dc 01       	movw	r26, r24
    3188:	14 96       	adiw	r26, 0x04	; 4
    318a:	cd 91       	ld	r28, X+
    318c:	dc 91       	ld	r29, X
    318e:	15 97       	sbiw	r26, 0x05	; 5
    3190:	21 96       	adiw	r28, 0x01	; 1
    3192:	09 f4       	brne	.+2      	; 0x3196 <dir_next+0x2a>
    3194:	03 c1       	rjmp	.+518    	; 0x339c <dir_next+0x230>
    3196:	1e 96       	adiw	r26, 0x0e	; 14
    3198:	8d 90       	ld	r8, X+
    319a:	9d 90       	ld	r9, X+
    319c:	ad 90       	ld	r10, X+
    319e:	bc 90       	ld	r11, X
    31a0:	51 97       	sbiw	r26, 0x11	; 17
    31a2:	81 14       	cp	r8, r1
    31a4:	91 04       	cpc	r9, r1
    31a6:	a1 04       	cpc	r10, r1
    31a8:	b1 04       	cpc	r11, r1
    31aa:	09 f4       	brne	.+2      	; 0x31ae <dir_next+0x42>
    31ac:	f9 c0       	rjmp	.+498    	; 0x33a0 <dir_next+0x234>
    31ae:	7b 01       	movw	r14, r22
    31b0:	8c 01       	movw	r16, r24
    31b2:	6e 01       	movw	r12, r28
    31b4:	bf e0       	ldi	r27, 0x0F	; 15
    31b6:	cb 22       	and	r12, r27
    31b8:	dd 24       	eor	r13, r13
    31ba:	c1 14       	cp	r12, r1
    31bc:	d1 04       	cpc	r13, r1
    31be:	09 f0       	breq	.+2      	; 0x31c2 <dir_next+0x56>
    31c0:	d1 c0       	rjmp	.+418    	; 0x3364 <dir_next+0x1f8>
    31c2:	ef ef       	ldi	r30, 0xFF	; 255
    31c4:	8e 1a       	sub	r8, r30
    31c6:	9e 0a       	sbc	r9, r30
    31c8:	ae 0a       	sbc	r10, r30
    31ca:	be 0a       	sbc	r11, r30
    31cc:	dc 01       	movw	r26, r24
    31ce:	1e 96       	adiw	r26, 0x0e	; 14
    31d0:	8d 92       	st	X+, r8
    31d2:	9d 92       	st	X+, r9
    31d4:	ad 92       	st	X+, r10
    31d6:	bc 92       	st	X, r11
    31d8:	51 97       	sbiw	r26, 0x11	; 17
    31da:	1a 96       	adiw	r26, 0x0a	; 10
    31dc:	4d 91       	ld	r20, X+
    31de:	5d 91       	ld	r21, X+
    31e0:	6d 91       	ld	r22, X+
    31e2:	7c 91       	ld	r23, X
    31e4:	1d 97       	sbiw	r26, 0x0d	; 13
    31e6:	41 15       	cp	r20, r1
    31e8:	51 05       	cpc	r21, r1
    31ea:	61 05       	cpc	r22, r1
    31ec:	71 05       	cpc	r23, r1
    31ee:	49 f4       	brne	.+18     	; 0x3202 <dir_next+0x96>
    31f0:	ed 91       	ld	r30, X+
    31f2:	fc 91       	ld	r31, X
    31f4:	80 85       	ldd	r24, Z+8	; 0x08
    31f6:	91 85       	ldd	r25, Z+9	; 0x09
    31f8:	c8 17       	cp	r28, r24
    31fa:	d9 07       	cpc	r29, r25
    31fc:	08 f0       	brcs	.+2      	; 0x3200 <dir_next+0x94>
    31fe:	d2 c0       	rjmp	.+420    	; 0x33a4 <dir_next+0x238>
    3200:	b1 c0       	rjmp	.+354    	; 0x3364 <dir_next+0x1f8>
    3202:	dc 01       	movw	r26, r24
    3204:	ed 91       	ld	r30, X+
    3206:	fc 91       	ld	r31, X
    3208:	22 81       	ldd	r18, Z+2	; 0x02
    320a:	30 e0       	ldi	r19, 0x00	; 0
    320c:	21 50       	subi	r18, 0x01	; 1
    320e:	31 09       	sbc	r19, r1
    3210:	ce 01       	movw	r24, r28
    3212:	92 95       	swap	r25
    3214:	82 95       	swap	r24
    3216:	8f 70       	andi	r24, 0x0F	; 15
    3218:	89 27       	eor	r24, r25
    321a:	9f 70       	andi	r25, 0x0F	; 15
    321c:	89 27       	eor	r24, r25
    321e:	28 23       	and	r18, r24
    3220:	39 23       	and	r19, r25
    3222:	23 2b       	or	r18, r19
    3224:	09 f0       	breq	.+2      	; 0x3228 <dir_next+0xbc>
    3226:	9e c0       	rjmp	.+316    	; 0x3364 <dir_next+0x1f8>
    3228:	cf 01       	movw	r24, r30
    322a:	b0 db       	rcall	.-2208   	; 0x298c <get_fat>
    322c:	4b 01       	movw	r8, r22
    322e:	5c 01       	movw	r10, r24
    3230:	62 30       	cpi	r22, 0x02	; 2
    3232:	71 05       	cpc	r23, r1
    3234:	81 05       	cpc	r24, r1
    3236:	91 05       	cpc	r25, r1
    3238:	08 f4       	brcc	.+2      	; 0x323c <dir_next+0xd0>
    323a:	b6 c0       	rjmp	.+364    	; 0x33a8 <dir_next+0x23c>
    323c:	6f 3f       	cpi	r22, 0xFF	; 255
    323e:	7f 4f       	sbci	r23, 0xFF	; 255
    3240:	8f 4f       	sbci	r24, 0xFF	; 255
    3242:	9f 4f       	sbci	r25, 0xFF	; 255
    3244:	09 f4       	brne	.+2      	; 0x3248 <dir_next+0xdc>
    3246:	b2 c0       	rjmp	.+356    	; 0x33ac <dir_next+0x240>
    3248:	d8 01       	movw	r26, r16
    324a:	ed 91       	ld	r30, X+
    324c:	fc 91       	ld	r31, X
    324e:	82 89       	ldd	r24, Z+18	; 0x12
    3250:	93 89       	ldd	r25, Z+19	; 0x13
    3252:	a4 89       	ldd	r26, Z+20	; 0x14
    3254:	b5 89       	ldd	r27, Z+21	; 0x15
    3256:	88 16       	cp	r8, r24
    3258:	99 06       	cpc	r9, r25
    325a:	aa 06       	cpc	r10, r26
    325c:	bb 06       	cpc	r11, r27
    325e:	08 f4       	brcc	.+2      	; 0x3262 <dir_next+0xf6>
    3260:	70 c0       	rjmp	.+224    	; 0x3342 <dir_next+0x1d6>
    3262:	ef 28       	or	r14, r15
    3264:	09 f4       	brne	.+2      	; 0x3268 <dir_next+0xfc>
    3266:	a4 c0       	rjmp	.+328    	; 0x33b0 <dir_next+0x244>
    3268:	d8 01       	movw	r26, r16
    326a:	1a 96       	adiw	r26, 0x0a	; 10
    326c:	4d 91       	ld	r20, X+
    326e:	5d 91       	ld	r21, X+
    3270:	6d 91       	ld	r22, X+
    3272:	7c 91       	ld	r23, X
    3274:	1d 97       	sbiw	r26, 0x0d	; 13
    3276:	cf 01       	movw	r24, r30
    3278:	6a de       	rcall	.-812    	; 0x2f4e <create_chain>
    327a:	4b 01       	movw	r8, r22
    327c:	5c 01       	movw	r10, r24
    327e:	61 15       	cp	r22, r1
    3280:	71 05       	cpc	r23, r1
    3282:	81 05       	cpc	r24, r1
    3284:	91 05       	cpc	r25, r1
    3286:	09 f4       	brne	.+2      	; 0x328a <dir_next+0x11e>
    3288:	95 c0       	rjmp	.+298    	; 0x33b4 <dir_next+0x248>
    328a:	61 30       	cpi	r22, 0x01	; 1
    328c:	71 05       	cpc	r23, r1
    328e:	81 05       	cpc	r24, r1
    3290:	91 05       	cpc	r25, r1
    3292:	09 f4       	brne	.+2      	; 0x3296 <dir_next+0x12a>
    3294:	91 c0       	rjmp	.+290    	; 0x33b8 <dir_next+0x24c>
    3296:	6f 3f       	cpi	r22, 0xFF	; 255
    3298:	7f 4f       	sbci	r23, 0xFF	; 255
    329a:	8f 4f       	sbci	r24, 0xFF	; 255
    329c:	9f 4f       	sbci	r25, 0xFF	; 255
    329e:	09 f4       	brne	.+2      	; 0x32a2 <dir_next+0x136>
    32a0:	8d c0       	rjmp	.+282    	; 0x33bc <dir_next+0x250>
    32a2:	d8 01       	movw	r26, r16
    32a4:	8d 91       	ld	r24, X+
    32a6:	9c 91       	ld	r25, X
    32a8:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <sync_window>
    32ac:	81 11       	cpse	r24, r1
    32ae:	88 c0       	rjmp	.+272    	; 0x33c0 <dir_next+0x254>
    32b0:	f8 01       	movw	r30, r16
    32b2:	80 81       	ld	r24, Z
    32b4:	91 81       	ldd	r25, Z+1	; 0x01
    32b6:	fc 01       	movw	r30, r24
    32b8:	be 96       	adiw	r30, 0x2e	; 46
    32ba:	82 5d       	subi	r24, 0xD2	; 210
    32bc:	9d 4f       	sbci	r25, 0xFD	; 253
    32be:	11 92       	st	Z+, r1
    32c0:	e8 17       	cp	r30, r24
    32c2:	f9 07       	cpc	r31, r25
    32c4:	e1 f7       	brne	.-8      	; 0x32be <dir_next+0x152>
    32c6:	d8 01       	movw	r26, r16
    32c8:	ed 90       	ld	r14, X+
    32ca:	fc 90       	ld	r15, X
    32cc:	b5 01       	movw	r22, r10
    32ce:	a4 01       	movw	r20, r8
    32d0:	c7 01       	movw	r24, r14
    32d2:	2e db       	rcall	.-2468   	; 0x2930 <clust2sect>
    32d4:	f7 01       	movw	r30, r14
    32d6:	62 a7       	std	Z+42, r22	; 0x2a
    32d8:	73 a7       	std	Z+43, r23	; 0x2b
    32da:	84 a7       	std	Z+44, r24	; 0x2c
    32dc:	95 a7       	std	Z+45, r25	; 0x2d
    32de:	e1 2c       	mov	r14, r1
    32e0:	f1 2c       	mov	r15, r1
    32e2:	77 24       	eor	r7, r7
    32e4:	73 94       	inc	r7
    32e6:	19 c0       	rjmp	.+50     	; 0x331a <dir_next+0x1ae>
    32e8:	74 82       	std	Z+4, r7	; 0x04
    32ea:	d8 01       	movw	r26, r16
    32ec:	8d 91       	ld	r24, X+
    32ee:	9c 91       	ld	r25, X
    32f0:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <sync_window>
    32f4:	81 11       	cpse	r24, r1
    32f6:	66 c0       	rjmp	.+204    	; 0x33c4 <dir_next+0x258>
    32f8:	d8 01       	movw	r26, r16
    32fa:	ed 91       	ld	r30, X+
    32fc:	fc 91       	ld	r31, X
    32fe:	82 a5       	ldd	r24, Z+42	; 0x2a
    3300:	93 a5       	ldd	r25, Z+43	; 0x2b
    3302:	a4 a5       	ldd	r26, Z+44	; 0x2c
    3304:	b5 a5       	ldd	r27, Z+45	; 0x2d
    3306:	01 96       	adiw	r24, 0x01	; 1
    3308:	a1 1d       	adc	r26, r1
    330a:	b1 1d       	adc	r27, r1
    330c:	82 a7       	std	Z+42, r24	; 0x2a
    330e:	93 a7       	std	Z+43, r25	; 0x2b
    3310:	a4 a7       	std	Z+44, r26	; 0x2c
    3312:	b5 a7       	std	Z+45, r27	; 0x2d
    3314:	bf ef       	ldi	r27, 0xFF	; 255
    3316:	eb 1a       	sub	r14, r27
    3318:	fb 0a       	sbc	r15, r27
    331a:	d8 01       	movw	r26, r16
    331c:	ed 91       	ld	r30, X+
    331e:	fc 91       	ld	r31, X
    3320:	82 81       	ldd	r24, Z+2	; 0x02
    3322:	90 e0       	ldi	r25, 0x00	; 0
    3324:	e8 16       	cp	r14, r24
    3326:	f9 06       	cpc	r15, r25
    3328:	f8 f2       	brcs	.-66     	; 0x32e8 <dir_next+0x17c>
    332a:	82 a5       	ldd	r24, Z+42	; 0x2a
    332c:	93 a5       	ldd	r25, Z+43	; 0x2b
    332e:	a4 a5       	ldd	r26, Z+44	; 0x2c
    3330:	b5 a5       	ldd	r27, Z+45	; 0x2d
    3332:	8e 19       	sub	r24, r14
    3334:	9f 09       	sbc	r25, r15
    3336:	a1 09       	sbc	r26, r1
    3338:	b1 09       	sbc	r27, r1
    333a:	82 a7       	std	Z+42, r24	; 0x2a
    333c:	93 a7       	std	Z+43, r25	; 0x2b
    333e:	a4 a7       	std	Z+44, r26	; 0x2c
    3340:	b5 a7       	std	Z+45, r27	; 0x2d
    3342:	f8 01       	movw	r30, r16
    3344:	82 86       	std	Z+10, r8	; 0x0a
    3346:	93 86       	std	Z+11, r9	; 0x0b
    3348:	a4 86       	std	Z+12, r10	; 0x0c
    334a:	b5 86       	std	Z+13, r11	; 0x0d
    334c:	b5 01       	movw	r22, r10
    334e:	a4 01       	movw	r20, r8
    3350:	80 81       	ld	r24, Z
    3352:	91 81       	ldd	r25, Z+1	; 0x01
    3354:	ed da       	rcall	.-2598   	; 0x2930 <clust2sect>
    3356:	d8 01       	movw	r26, r16
    3358:	1e 96       	adiw	r26, 0x0e	; 14
    335a:	6d 93       	st	X+, r22
    335c:	7d 93       	st	X+, r23
    335e:	8d 93       	st	X+, r24
    3360:	9c 93       	st	X, r25
    3362:	51 97       	sbiw	r26, 0x11	; 17
    3364:	f8 01       	movw	r30, r16
    3366:	d5 83       	std	Z+5, r29	; 0x05
    3368:	c4 83       	std	Z+4, r28	; 0x04
    336a:	cc 0c       	add	r12, r12
    336c:	dd 1c       	adc	r13, r13
    336e:	cc 0c       	add	r12, r12
    3370:	dd 1c       	adc	r13, r13
    3372:	cc 0c       	add	r12, r12
    3374:	dd 1c       	adc	r13, r13
    3376:	cc 0c       	add	r12, r12
    3378:	dd 1c       	adc	r13, r13
    337a:	cc 0c       	add	r12, r12
    337c:	dd 1c       	adc	r13, r13
    337e:	fe e2       	ldi	r31, 0x2E	; 46
    3380:	cf 0e       	add	r12, r31
    3382:	d1 1c       	adc	r13, r1
    3384:	d8 01       	movw	r26, r16
    3386:	8d 91       	ld	r24, X+
    3388:	9c 91       	ld	r25, X
    338a:	11 97       	sbiw	r26, 0x01	; 1
    338c:	c8 0e       	add	r12, r24
    338e:	d9 1e       	adc	r13, r25
    3390:	53 96       	adiw	r26, 0x13	; 19
    3392:	dc 92       	st	X, r13
    3394:	ce 92       	st	-X, r12
    3396:	52 97       	sbiw	r26, 0x12	; 18
    3398:	80 e0       	ldi	r24, 0x00	; 0
    339a:	15 c0       	rjmp	.+42     	; 0x33c6 <dir_next+0x25a>
    339c:	84 e0       	ldi	r24, 0x04	; 4
    339e:	13 c0       	rjmp	.+38     	; 0x33c6 <dir_next+0x25a>
    33a0:	84 e0       	ldi	r24, 0x04	; 4
    33a2:	11 c0       	rjmp	.+34     	; 0x33c6 <dir_next+0x25a>
    33a4:	84 e0       	ldi	r24, 0x04	; 4
    33a6:	0f c0       	rjmp	.+30     	; 0x33c6 <dir_next+0x25a>
    33a8:	82 e0       	ldi	r24, 0x02	; 2
    33aa:	0d c0       	rjmp	.+26     	; 0x33c6 <dir_next+0x25a>
    33ac:	81 e0       	ldi	r24, 0x01	; 1
    33ae:	0b c0       	rjmp	.+22     	; 0x33c6 <dir_next+0x25a>
    33b0:	84 e0       	ldi	r24, 0x04	; 4
    33b2:	09 c0       	rjmp	.+18     	; 0x33c6 <dir_next+0x25a>
    33b4:	87 e0       	ldi	r24, 0x07	; 7
    33b6:	07 c0       	rjmp	.+14     	; 0x33c6 <dir_next+0x25a>
    33b8:	82 e0       	ldi	r24, 0x02	; 2
    33ba:	05 c0       	rjmp	.+10     	; 0x33c6 <dir_next+0x25a>
    33bc:	81 e0       	ldi	r24, 0x01	; 1
    33be:	03 c0       	rjmp	.+6      	; 0x33c6 <dir_next+0x25a>
    33c0:	81 e0       	ldi	r24, 0x01	; 1
    33c2:	01 c0       	rjmp	.+2      	; 0x33c6 <dir_next+0x25a>
    33c4:	81 e0       	ldi	r24, 0x01	; 1
    33c6:	df 91       	pop	r29
    33c8:	cf 91       	pop	r28
    33ca:	1f 91       	pop	r17
    33cc:	0f 91       	pop	r16
    33ce:	ff 90       	pop	r15
    33d0:	ef 90       	pop	r14
    33d2:	df 90       	pop	r13
    33d4:	cf 90       	pop	r12
    33d6:	bf 90       	pop	r11
    33d8:	af 90       	pop	r10
    33da:	9f 90       	pop	r9
    33dc:	8f 90       	pop	r8
    33de:	7f 90       	pop	r7
    33e0:	08 95       	ret

000033e2 <f_mount>:
    33e2:	1f 93       	push	r17
    33e4:	cf 93       	push	r28
    33e6:	df 93       	push	r29
    33e8:	00 d0       	rcall	.+0      	; 0x33ea <f_mount+0x8>
    33ea:	00 d0       	rcall	.+0      	; 0x33ec <f_mount+0xa>
    33ec:	00 d0       	rcall	.+0      	; 0x33ee <f_mount+0xc>
    33ee:	cd b7       	in	r28, 0x3d	; 61
    33f0:	de b7       	in	r29, 0x3e	; 62
    33f2:	9c 83       	std	Y+4, r25	; 0x04
    33f4:	8b 83       	std	Y+3, r24	; 0x03
    33f6:	7e 83       	std	Y+6, r23	; 0x06
    33f8:	6d 83       	std	Y+5, r22	; 0x05
    33fa:	14 2f       	mov	r17, r20
    33fc:	7a 83       	std	Y+2, r23	; 0x02
    33fe:	69 83       	std	Y+1, r22	; 0x01
    3400:	ce 01       	movw	r24, r28
    3402:	01 96       	adiw	r24, 0x01	; 1
    3404:	0e 94 6d 0f 	call	0x1eda	; 0x1eda <get_ldnumber>
    3408:	99 23       	and	r25, r25
    340a:	34 f1       	brlt	.+76     	; 0x3458 <f_mount+0x76>
    340c:	fc 01       	movw	r30, r24
    340e:	ee 0f       	add	r30, r30
    3410:	ff 1f       	adc	r31, r31
    3412:	e9 5d       	subi	r30, 0xD9	; 217
    3414:	fb 4f       	sbci	r31, 0xFB	; 251
    3416:	01 90       	ld	r0, Z+
    3418:	f0 81       	ld	r31, Z
    341a:	e0 2d       	mov	r30, r0
    341c:	30 97       	sbiw	r30, 0x00	; 0
    341e:	09 f0       	breq	.+2      	; 0x3422 <f_mount+0x40>
    3420:	10 82       	st	Z, r1
    3422:	eb 81       	ldd	r30, Y+3	; 0x03
    3424:	fc 81       	ldd	r31, Y+4	; 0x04
    3426:	30 97       	sbiw	r30, 0x00	; 0
    3428:	e9 f0       	breq	.+58     	; 0x3464 <f_mount+0x82>
    342a:	10 82       	st	Z, r1
    342c:	2b 81       	ldd	r18, Y+3	; 0x03
    342e:	3c 81       	ldd	r19, Y+4	; 0x04
    3430:	88 0f       	add	r24, r24
    3432:	99 1f       	adc	r25, r25
    3434:	fc 01       	movw	r30, r24
    3436:	e9 5d       	subi	r30, 0xD9	; 217
    3438:	fb 4f       	sbci	r31, 0xFB	; 251
    343a:	31 83       	std	Z+1, r19	; 0x01
    343c:	20 83       	st	Z, r18
    343e:	23 2b       	or	r18, r19
    3440:	69 f0       	breq	.+26     	; 0x345c <f_mount+0x7a>
    3442:	11 30       	cpi	r17, 0x01	; 1
    3444:	69 f4       	brne	.+26     	; 0x3460 <f_mount+0x7e>
    3446:	40 e0       	ldi	r20, 0x00	; 0
    3448:	be 01       	movw	r22, r28
    344a:	6b 5f       	subi	r22, 0xFB	; 251
    344c:	7f 4f       	sbci	r23, 0xFF	; 255
    344e:	ce 01       	movw	r24, r28
    3450:	03 96       	adiw	r24, 0x03	; 3
    3452:	0e 94 d6 10 	call	0x21ac	; 0x21ac <find_volume>
    3456:	0e c0       	rjmp	.+28     	; 0x3474 <f_mount+0x92>
    3458:	8b e0       	ldi	r24, 0x0B	; 11
    345a:	0c c0       	rjmp	.+24     	; 0x3474 <f_mount+0x92>
    345c:	80 e0       	ldi	r24, 0x00	; 0
    345e:	0a c0       	rjmp	.+20     	; 0x3474 <f_mount+0x92>
    3460:	80 e0       	ldi	r24, 0x00	; 0
    3462:	08 c0       	rjmp	.+16     	; 0x3474 <f_mount+0x92>
    3464:	88 0f       	add	r24, r24
    3466:	99 1f       	adc	r25, r25
    3468:	fc 01       	movw	r30, r24
    346a:	e9 5d       	subi	r30, 0xD9	; 217
    346c:	fb 4f       	sbci	r31, 0xFB	; 251
    346e:	11 82       	std	Z+1, r1	; 0x01
    3470:	10 82       	st	Z, r1
    3472:	80 e0       	ldi	r24, 0x00	; 0
    3474:	26 96       	adiw	r28, 0x06	; 6
    3476:	0f b6       	in	r0, 0x3f	; 63
    3478:	f8 94       	cli
    347a:	de bf       	out	0x3e, r29	; 62
    347c:	0f be       	out	0x3f, r0	; 63
    347e:	cd bf       	out	0x3d, r28	; 61
    3480:	df 91       	pop	r29
    3482:	cf 91       	pop	r28
    3484:	1f 91       	pop	r17
    3486:	08 95       	ret

00003488 <f_open>:
    3488:	2f 92       	push	r2
    348a:	3f 92       	push	r3
    348c:	4f 92       	push	r4
    348e:	5f 92       	push	r5
    3490:	6f 92       	push	r6
    3492:	7f 92       	push	r7
    3494:	8f 92       	push	r8
    3496:	9f 92       	push	r9
    3498:	af 92       	push	r10
    349a:	bf 92       	push	r11
    349c:	cf 92       	push	r12
    349e:	df 92       	push	r13
    34a0:	ef 92       	push	r14
    34a2:	ff 92       	push	r15
    34a4:	0f 93       	push	r16
    34a6:	1f 93       	push	r17
    34a8:	cf 93       	push	r28
    34aa:	df 93       	push	r29
    34ac:	cd b7       	in	r28, 0x3d	; 61
    34ae:	de b7       	in	r29, 0x3e	; 62
    34b0:	ae 97       	sbiw	r28, 0x2e	; 46
    34b2:	0f b6       	in	r0, 0x3f	; 63
    34b4:	f8 94       	cli
    34b6:	de bf       	out	0x3e, r29	; 62
    34b8:	0f be       	out	0x3f, r0	; 63
    34ba:	cd bf       	out	0x3d, r28	; 61
    34bc:	7c a3       	std	Y+36, r23	; 0x24
    34be:	6b a3       	std	Y+35, r22	; 0x23
    34c0:	00 97       	sbiw	r24, 0x00	; 0
    34c2:	09 f4       	brne	.+2      	; 0x34c6 <f_open+0x3e>
    34c4:	83 c2       	rjmp	.+1286   	; 0x39cc <f_open+0x544>
    34c6:	4d a3       	std	Y+37, r20	; 0x25
    34c8:	1c 01       	movw	r2, r24
    34ca:	dc 01       	movw	r26, r24
    34cc:	1d 92       	st	X+, r1
    34ce:	1c 92       	st	X, r1
    34d0:	4e 71       	andi	r20, 0x1E	; 30
    34d2:	be 01       	movw	r22, r28
    34d4:	6d 5d       	subi	r22, 0xDD	; 221
    34d6:	7f 4f       	sbci	r23, 0xFF	; 255
    34d8:	ce 01       	movw	r24, r28
    34da:	01 96       	adiw	r24, 0x01	; 1
    34dc:	0e 94 d6 10 	call	0x21ac	; 0x21ac <find_volume>
    34e0:	81 11       	cpse	r24, r1
    34e2:	03 c3       	rjmp	.+1542   	; 0x3aea <f_open+0x662>
    34e4:	ce 01       	movw	r24, r28
    34e6:	47 96       	adiw	r24, 0x17	; 23
    34e8:	9e 8b       	std	Y+22, r25	; 0x16
    34ea:	8d 8b       	std	Y+21, r24	; 0x15
    34ec:	cb a0       	ldd	r12, Y+35	; 0x23
    34ee:	dc a0       	ldd	r13, Y+36	; 0x24
    34f0:	f6 01       	movw	r30, r12
    34f2:	80 81       	ld	r24, Z
    34f4:	8f 32       	cpi	r24, 0x2F	; 47
    34f6:	11 f0       	breq	.+4      	; 0x34fc <f_open+0x74>
    34f8:	8c 35       	cpi	r24, 0x5C	; 92
    34fa:	19 f4       	brne	.+6      	; 0x3502 <f_open+0x7a>
    34fc:	ff ef       	ldi	r31, 0xFF	; 255
    34fe:	cf 1a       	sub	r12, r31
    3500:	df 0a       	sbc	r13, r31
    3502:	2d a1       	ldd	r18, Y+37	; 0x25
    3504:	2f 71       	andi	r18, 0x1F	; 31
    3506:	29 a7       	std	Y+41, r18	; 0x29
    3508:	1f 82       	std	Y+7, r1	; 0x07
    350a:	18 86       	std	Y+8, r1	; 0x08
    350c:	19 86       	std	Y+9, r1	; 0x09
    350e:	1a 86       	std	Y+10, r1	; 0x0a
    3510:	d6 01       	movw	r26, r12
    3512:	8c 91       	ld	r24, X
    3514:	80 32       	cpi	r24, 0x20	; 32
    3516:	68 f4       	brcc	.+26     	; 0x3532 <f_open+0xaa>
    3518:	60 e0       	ldi	r22, 0x00	; 0
    351a:	70 e0       	ldi	r23, 0x00	; 0
    351c:	ce 01       	movw	r24, r28
    351e:	01 96       	adiw	r24, 0x01	; 1
    3520:	34 db       	rcall	.-2456   	; 0x2b8a <dir_sdi>
    3522:	1c 8a       	std	Y+20, r1	; 0x14
    3524:	1b 8a       	std	Y+19, r1	; 0x13
    3526:	e1 2c       	mov	r14, r1
    3528:	f1 2c       	mov	r15, r1
    352a:	88 23       	and	r24, r24
    352c:	09 f4       	brne	.+2      	; 0x3530 <f_open+0xa8>
    352e:	91 c2       	rjmp	.+1314   	; 0x3a52 <f_open+0x5ca>
    3530:	87 c2       	rjmp	.+1294   	; 0x3a40 <f_open+0x5b8>
    3532:	68 94       	set
    3534:	bb 24       	eor	r11, r11
    3536:	b5 f8       	bld	r11, 5
    3538:	a1 2c       	mov	r10, r1
    353a:	71 2c       	mov	r7, r1
    353c:	68 94       	set
    353e:	66 24       	eor	r6, r6
    3540:	63 f8       	bld	r6, 3
    3542:	51 2c       	mov	r5, r1
    3544:	41 2c       	mov	r4, r1
    3546:	6a a6       	std	Y+42, r6	; 0x2a
    3548:	5e a6       	std	Y+46, r5	; 0x2e
    354a:	f6 01       	movw	r30, r12
    354c:	af 01       	movw	r20, r30
    354e:	81 91       	ld	r24, Z+
    3550:	8f 32       	cpi	r24, 0x2F	; 47
    3552:	e1 f3       	breq	.-8      	; 0x354c <f_open+0xc4>
    3554:	8c 35       	cpi	r24, 0x5C	; 92
    3556:	d1 f3       	breq	.-12     	; 0x354c <f_open+0xc4>
    3558:	0d 89       	ldd	r16, Y+21	; 0x15
    355a:	1e 89       	ldd	r17, Y+22	; 0x16
    355c:	f8 01       	movw	r30, r16
    355e:	c8 01       	movw	r24, r16
    3560:	0b 96       	adiw	r24, 0x0b	; 11
    3562:	b1 92       	st	Z+, r11
    3564:	e8 17       	cp	r30, r24
    3566:	f9 07       	cpc	r31, r25
    3568:	e1 f7       	brne	.-8      	; 0x3562 <f_open+0xda>
    356a:	6a 01       	movw	r12, r20
    356c:	ea 2c       	mov	r14, r10
    356e:	f7 2c       	mov	r15, r7
    3570:	8a 2d       	mov	r24, r10
    3572:	97 2d       	mov	r25, r7
    3574:	86 2c       	mov	r8, r6
    3576:	95 2c       	mov	r9, r5
    3578:	74 2d       	mov	r23, r4
    357a:	da 01       	movw	r26, r20
    357c:	01 96       	adiw	r24, 0x01	; 1
    357e:	6d 91       	ld	r22, X+
    3580:	61 32       	cpi	r22, 0x21	; 33
    3582:	08 f4       	brcc	.+2      	; 0x3586 <f_open+0xfe>
    3584:	3c c2       	rjmp	.+1144   	; 0x39fe <f_open+0x576>
    3586:	6f 32       	cpi	r22, 0x2F	; 47
    3588:	09 f4       	brne	.+2      	; 0x358c <f_open+0x104>
    358a:	3e c2       	rjmp	.+1148   	; 0x3a08 <f_open+0x580>
    358c:	6c 35       	cpi	r22, 0x5C	; 92
    358e:	09 f4       	brne	.+2      	; 0x3592 <f_open+0x10a>
    3590:	3b c2       	rjmp	.+1142   	; 0x3a08 <f_open+0x580>
    3592:	6e 32       	cpi	r22, 0x2E	; 46
    3594:	09 f4       	brne	.+2      	; 0x3598 <f_open+0x110>
    3596:	1c c2       	rjmp	.+1080   	; 0x39d0 <f_open+0x548>
    3598:	e8 14       	cp	r14, r8
    359a:	f9 04       	cpc	r15, r9
    359c:	08 f0       	brcs	.+2      	; 0x35a0 <f_open+0x118>
    359e:	79 c2       	rjmp	.+1266   	; 0x3a92 <f_open+0x60a>
    35a0:	0a c0       	rjmp	.+20     	; 0x35b6 <f_open+0x12e>
    35a2:	77 0f       	add	r23, r23
    35a4:	77 0f       	add	r23, r23
    35a6:	ea a4       	ldd	r14, Y+42	; 0x2a
    35a8:	fe a4       	ldd	r15, Y+46	; 0x2e
    35aa:	0f 2e       	mov	r0, r31
    35ac:	fb e0       	ldi	r31, 0x0B	; 11
    35ae:	8f 2e       	mov	r8, r31
    35b0:	f0 2d       	mov	r31, r0
    35b2:	91 2c       	mov	r9, r1
    35b4:	e3 cf       	rjmp	.-58     	; 0x357c <f_open+0xf4>
    35b6:	66 23       	and	r22, r22
    35b8:	0c f0       	brlt	.+2      	; 0x35bc <f_open+0x134>
    35ba:	10 c2       	rjmp	.+1056   	; 0x39dc <f_open+0x554>
    35bc:	73 60       	ori	r23, 0x03	; 3
    35be:	e6 2f       	mov	r30, r22
    35c0:	f0 e0       	ldi	r31, 0x00	; 0
    35c2:	ea 56       	subi	r30, 0x6A	; 106
    35c4:	ff 4f       	sbci	r31, 0xFF	; 255
    35c6:	60 81       	ld	r22, Z
    35c8:	09 c2       	rjmp	.+1042   	; 0x39dc <f_open+0x554>
    35ca:	81 91       	ld	r24, Z+
    35cc:	88 23       	and	r24, r24
    35ce:	09 f4       	brne	.+2      	; 0x35d2 <f_open+0x14a>
    35d0:	0f c2       	rjmp	.+1054   	; 0x39f0 <f_open+0x568>
    35d2:	90 e0       	ldi	r25, 0x00	; 0
    35d4:	48 17       	cp	r20, r24
    35d6:	59 07       	cpc	r21, r25
    35d8:	c1 f7       	brne	.-16     	; 0x35ca <f_open+0x142>
    35da:	86 e0       	ldi	r24, 0x06	; 6
    35dc:	77 c2       	rjmp	.+1262   	; 0x3acc <f_open+0x644>
    35de:	72 60       	ori	r23, 0x02	; 2
    35e0:	06 c0       	rjmp	.+12     	; 0x35ee <f_open+0x166>
    35e2:	2f e9       	ldi	r18, 0x9F	; 159
    35e4:	26 0f       	add	r18, r22
    35e6:	2a 31       	cpi	r18, 0x1A	; 26
    35e8:	10 f4       	brcc	.+4      	; 0x35ee <f_open+0x166>
    35ea:	71 60       	ori	r23, 0x01	; 1
    35ec:	60 52       	subi	r22, 0x20	; 32
    35ee:	f8 01       	movw	r30, r16
    35f0:	ee 0d       	add	r30, r14
    35f2:	ff 1d       	adc	r31, r15
    35f4:	60 83       	st	Z, r22
    35f6:	f7 01       	movw	r30, r14
    35f8:	31 96       	adiw	r30, 0x01	; 1
    35fa:	7f 01       	movw	r14, r30
    35fc:	bf cf       	rjmp	.-130    	; 0x357c <f_open+0xf4>
    35fe:	ef 28       	or	r14, r15
    3600:	09 f4       	brne	.+2      	; 0x3604 <f_open+0x17c>
    3602:	47 c2       	rjmp	.+1166   	; 0x3a92 <f_open+0x60a>
    3604:	d8 01       	movw	r26, r16
    3606:	2c 91       	ld	r18, X
    3608:	25 3e       	cpi	r18, 0xE5	; 229
    360a:	11 f4       	brne	.+4      	; 0x3610 <f_open+0x188>
    360c:	e5 e0       	ldi	r30, 0x05	; 5
    360e:	ec 93       	st	X, r30
    3610:	f8 e0       	ldi	r31, 0x08	; 8
    3612:	8f 16       	cp	r8, r31
    3614:	91 04       	cpc	r9, r1
    3616:	19 f4       	brne	.+6      	; 0x361e <f_open+0x196>
    3618:	79 2f       	mov	r23, r25
    361a:	77 0f       	add	r23, r23
    361c:	77 0f       	add	r23, r23
    361e:	97 2f       	mov	r25, r23
    3620:	93 70       	andi	r25, 0x03	; 3
    3622:	91 30       	cpi	r25, 0x01	; 1
    3624:	09 f4       	brne	.+2      	; 0x3628 <f_open+0x1a0>
    3626:	80 61       	ori	r24, 0x10	; 16
    3628:	97 2f       	mov	r25, r23
    362a:	9c 70       	andi	r25, 0x0C	; 12
    362c:	94 30       	cpi	r25, 0x04	; 4
    362e:	09 f4       	brne	.+2      	; 0x3632 <f_open+0x1aa>
    3630:	88 60       	ori	r24, 0x08	; 8
    3632:	d8 01       	movw	r26, r16
    3634:	1b 96       	adiw	r26, 0x0b	; 11
    3636:	8c 93       	st	X, r24
    3638:	6a 2d       	mov	r22, r10
    363a:	77 2d       	mov	r23, r7
    363c:	ce 01       	movw	r24, r28
    363e:	01 96       	adiw	r24, 0x01	; 1
    3640:	a4 da       	rcall	.-2744   	; 0x2b8a <dir_sdi>
    3642:	81 11       	cpse	r24, r1
    3644:	ec c1       	rjmp	.+984    	; 0x3a1e <f_open+0x596>
    3646:	4f 85       	ldd	r20, Y+15	; 0x0f
    3648:	58 89       	ldd	r21, Y+16	; 0x10
    364a:	69 89       	ldd	r22, Y+17	; 0x11
    364c:	7a 89       	ldd	r23, Y+18	; 0x12
    364e:	89 81       	ldd	r24, Y+1	; 0x01
    3650:	9a 81       	ldd	r25, Y+2	; 0x02
    3652:	0e 94 0d 10 	call	0x201a	; 0x201a <move_window>
    3656:	81 11       	cpse	r24, r1
    3658:	e2 c1       	rjmp	.+964    	; 0x3a1e <f_open+0x596>
    365a:	6b 89       	ldd	r22, Y+19	; 0x13
    365c:	7c 89       	ldd	r23, Y+20	; 0x14
    365e:	fb 01       	movw	r30, r22
    3660:	80 81       	ld	r24, Z
    3662:	88 23       	and	r24, r24
    3664:	d1 f0       	breq	.+52     	; 0x369a <f_open+0x212>
    3666:	83 85       	ldd	r24, Z+11	; 0x0b
    3668:	83 fd       	sbrc	r24, 3
    366a:	0f c0       	rjmp	.+30     	; 0x368a <f_open+0x202>
    366c:	4d 89       	ldd	r20, Y+21	; 0x15
    366e:	5e 89       	ldd	r21, Y+22	; 0x16
    3670:	da 01       	movw	r26, r20
    3672:	9b 01       	movw	r18, r22
    3674:	25 5f       	subi	r18, 0xF5	; 245
    3676:	3f 4f       	sbci	r19, 0xFF	; 255
    3678:	04 c0       	rjmp	.+8      	; 0x3682 <f_open+0x1fa>
    367a:	e2 17       	cp	r30, r18
    367c:	f3 07       	cpc	r31, r19
    367e:	09 f4       	brne	.+2      	; 0x3682 <f_open+0x1fa>
    3680:	c8 c1       	rjmp	.+912    	; 0x3a12 <f_open+0x58a>
    3682:	91 91       	ld	r25, Z+
    3684:	8d 91       	ld	r24, X+
    3686:	98 17       	cp	r25, r24
    3688:	c1 f3       	breq	.-16     	; 0x367a <f_open+0x1f2>
    368a:	6a 2d       	mov	r22, r10
    368c:	77 2d       	mov	r23, r7
    368e:	ce 01       	movw	r24, r28
    3690:	01 96       	adiw	r24, 0x01	; 1
    3692:	6c dd       	rcall	.-1320   	; 0x316c <dir_next>
    3694:	88 23       	and	r24, r24
    3696:	b9 f2       	breq	.-82     	; 0x3646 <f_open+0x1be>
    3698:	c2 c1       	rjmp	.+900    	; 0x3a1e <f_open+0x596>
    369a:	ed 89       	ldd	r30, Y+21	; 0x15
    369c:	fe 89       	ldd	r31, Y+22	; 0x16
    369e:	93 85       	ldd	r25, Z+11	; 0x0b
    36a0:	92 fd       	sbrc	r25, 2
    36a2:	0d c2       	rjmp	.+1050   	; 0x3abe <f_open+0x636>
    36a4:	85 e0       	ldi	r24, 0x05	; 5
    36a6:	12 c2       	rjmp	.+1060   	; 0x3acc <f_open+0x644>
    36a8:	db 01       	movw	r26, r22
    36aa:	1b 96       	adiw	r26, 0x0b	; 11
    36ac:	8c 91       	ld	r24, X
    36ae:	84 ff       	sbrs	r24, 4
    36b0:	08 c2       	rjmp	.+1040   	; 0x3ac2 <f_open+0x63a>
    36b2:	89 81       	ldd	r24, Y+1	; 0x01
    36b4:	9a 81       	ldd	r25, Y+2	; 0x02
    36b6:	0e 94 4b 0f 	call	0x1e96	; 0x1e96 <ld_clust>
    36ba:	6f 83       	std	Y+7, r22	; 0x07
    36bc:	78 87       	std	Y+8, r23	; 0x08
    36be:	89 87       	std	Y+9, r24	; 0x09
    36c0:	9a 87       	std	Y+10, r25	; 0x0a
    36c2:	43 cf       	rjmp	.-378    	; 0x354a <f_open+0xc2>
    36c4:	81 11       	cpse	r24, r1
    36c6:	ef c1       	rjmp	.+990    	; 0x3aa6 <f_open+0x61e>
    36c8:	44 c0       	rjmp	.+136    	; 0x3752 <f_open+0x2ca>
    36ca:	60 e0       	ldi	r22, 0x00	; 0
    36cc:	70 e0       	ldi	r23, 0x00	; 0
    36ce:	ce 01       	movw	r24, r28
    36d0:	01 96       	adiw	r24, 0x01	; 1
    36d2:	5b da       	rcall	.-2890   	; 0x2b8a <dir_sdi>
    36d4:	81 11       	cpse	r24, r1
    36d6:	06 c2       	rjmp	.+1036   	; 0x3ae4 <f_open+0x65c>
    36d8:	4f 85       	ldd	r20, Y+15	; 0x0f
    36da:	58 89       	ldd	r21, Y+16	; 0x10
    36dc:	69 89       	ldd	r22, Y+17	; 0x11
    36de:	7a 89       	ldd	r23, Y+18	; 0x12
    36e0:	89 81       	ldd	r24, Y+1	; 0x01
    36e2:	9a 81       	ldd	r25, Y+2	; 0x02
    36e4:	0e 94 0d 10 	call	0x201a	; 0x201a <move_window>
    36e8:	81 11       	cpse	r24, r1
    36ea:	fc c1       	rjmp	.+1016   	; 0x3ae4 <f_open+0x65c>
    36ec:	eb 89       	ldd	r30, Y+19	; 0x13
    36ee:	fc 89       	ldd	r31, Y+20	; 0x14
    36f0:	80 81       	ld	r24, Z
    36f2:	85 3e       	cpi	r24, 0xE5	; 229
    36f4:	51 f0       	breq	.+20     	; 0x370a <f_open+0x282>
    36f6:	88 23       	and	r24, r24
    36f8:	41 f0       	breq	.+16     	; 0x370a <f_open+0x282>
    36fa:	61 e0       	ldi	r22, 0x01	; 1
    36fc:	70 e0       	ldi	r23, 0x00	; 0
    36fe:	ce 01       	movw	r24, r28
    3700:	01 96       	adiw	r24, 0x01	; 1
    3702:	34 dd       	rcall	.-1432   	; 0x316c <dir_next>
    3704:	88 23       	and	r24, r24
    3706:	41 f3       	breq	.-48     	; 0x36d8 <f_open+0x250>
    3708:	ed c1       	rjmp	.+986    	; 0x3ae4 <f_open+0x65c>
    370a:	4f 85       	ldd	r20, Y+15	; 0x0f
    370c:	58 89       	ldd	r21, Y+16	; 0x10
    370e:	69 89       	ldd	r22, Y+17	; 0x11
    3710:	7a 89       	ldd	r23, Y+18	; 0x12
    3712:	89 81       	ldd	r24, Y+1	; 0x01
    3714:	9a 81       	ldd	r25, Y+2	; 0x02
    3716:	0e 94 0d 10 	call	0x201a	; 0x201a <move_window>
    371a:	81 11       	cpse	r24, r1
    371c:	ca c1       	rjmp	.+916    	; 0x3ab2 <f_open+0x62a>
    371e:	eb 89       	ldd	r30, Y+19	; 0x13
    3720:	fc 89       	ldd	r31, Y+20	; 0x14
    3722:	cf 01       	movw	r24, r30
    3724:	80 96       	adiw	r24, 0x20	; 32
    3726:	11 92       	st	Z+, r1
    3728:	e8 17       	cp	r30, r24
    372a:	f9 07       	cpc	r31, r25
    372c:	e1 f7       	brne	.-8      	; 0x3726 <f_open+0x29e>
    372e:	6d 89       	ldd	r22, Y+21	; 0x15
    3730:	7e 89       	ldd	r23, Y+22	; 0x16
    3732:	4b e0       	ldi	r20, 0x0B	; 11
    3734:	50 e0       	ldi	r21, 0x00	; 0
    3736:	8b 89       	ldd	r24, Y+19	; 0x13
    3738:	9c 89       	ldd	r25, Y+20	; 0x14
    373a:	0e 94 3d 0f 	call	0x1e7a	; 0x1e7a <mem_cpy>
    373e:	e9 81       	ldd	r30, Y+1	; 0x01
    3740:	fa 81       	ldd	r31, Y+2	; 0x02
    3742:	81 e0       	ldi	r24, 0x01	; 1
    3744:	84 83       	std	Z+4, r24	; 0x04
    3746:	b9 a5       	ldd	r27, Y+41	; 0x29
    3748:	b8 60       	ori	r27, 0x08	; 8
    374a:	b9 a7       	std	Y+41, r27	; 0x29
    374c:	eb 88       	ldd	r14, Y+19	; 0x13
    374e:	fc 88       	ldd	r15, Y+20	; 0x14
    3750:	08 c0       	rjmp	.+16     	; 0x3762 <f_open+0x2da>
    3752:	f7 01       	movw	r30, r14
    3754:	83 85       	ldd	r24, Z+11	; 0x0b
    3756:	81 71       	andi	r24, 0x11	; 17
    3758:	09 f0       	breq	.+2      	; 0x375c <f_open+0x2d4>
    375a:	82 c1       	rjmp	.+772    	; 0x3a60 <f_open+0x5d8>
    375c:	fd a1       	ldd	r31, Y+37	; 0x25
    375e:	f2 fd       	sbrc	r31, 2
    3760:	81 c1       	rjmp	.+770    	; 0x3a64 <f_open+0x5dc>
    3762:	29 a5       	ldd	r18, Y+41	; 0x29
    3764:	23 ff       	sbrs	r18, 3
    3766:	db c0       	rjmp	.+438    	; 0x391e <f_open+0x496>
    3768:	0e 94 aa 2c 	call	0x5954	; 0x5954 <get_fattime>
    376c:	d7 01       	movw	r26, r14
    376e:	1e 96       	adiw	r26, 0x0e	; 14
    3770:	6c 93       	st	X, r22
    3772:	1e 97       	sbiw	r26, 0x0e	; 14
    3774:	47 2f       	mov	r20, r23
    3776:	55 27       	eor	r21, r21
    3778:	1f 96       	adiw	r26, 0x0f	; 15
    377a:	4c 93       	st	X, r20
    377c:	1f 97       	sbiw	r26, 0x0f	; 15
    377e:	4c 01       	movw	r8, r24
    3780:	aa 24       	eor	r10, r10
    3782:	bb 24       	eor	r11, r11
    3784:	50 96       	adiw	r26, 0x10	; 16
    3786:	8c 92       	st	X, r8
    3788:	50 97       	sbiw	r26, 0x10	; 16
    378a:	09 2f       	mov	r16, r25
    378c:	11 27       	eor	r17, r17
    378e:	22 27       	eor	r18, r18
    3790:	33 27       	eor	r19, r19
    3792:	51 96       	adiw	r26, 0x11	; 17
    3794:	0c 93       	st	X, r16
    3796:	51 97       	sbiw	r26, 0x11	; 17
    3798:	56 96       	adiw	r26, 0x16	; 22
    379a:	6c 93       	st	X, r22
    379c:	56 97       	sbiw	r26, 0x16	; 22
    379e:	57 96       	adiw	r26, 0x17	; 23
    37a0:	4c 93       	st	X, r20
    37a2:	57 97       	sbiw	r26, 0x17	; 23
    37a4:	58 96       	adiw	r26, 0x18	; 24
    37a6:	8c 92       	st	X, r8
    37a8:	58 97       	sbiw	r26, 0x18	; 24
    37aa:	59 96       	adiw	r26, 0x19	; 25
    37ac:	0c 93       	st	X, r16
    37ae:	59 97       	sbiw	r26, 0x19	; 25
    37b0:	1b 96       	adiw	r26, 0x0b	; 11
    37b2:	1c 92       	st	X, r1
    37b4:	1b 97       	sbiw	r26, 0x0b	; 11
    37b6:	5c 96       	adiw	r26, 0x1c	; 28
    37b8:	1c 92       	st	X, r1
    37ba:	5c 97       	sbiw	r26, 0x1c	; 28
    37bc:	5d 96       	adiw	r26, 0x1d	; 29
    37be:	1c 92       	st	X, r1
    37c0:	5d 97       	sbiw	r26, 0x1d	; 29
    37c2:	5e 96       	adiw	r26, 0x1e	; 30
    37c4:	1c 92       	st	X, r1
    37c6:	5e 97       	sbiw	r26, 0x1e	; 30
    37c8:	5f 96       	adiw	r26, 0x1f	; 31
    37ca:	1c 92       	st	X, r1
    37cc:	c9 80       	ldd	r12, Y+1	; 0x01
    37ce:	da 80       	ldd	r13, Y+2	; 0x02
    37d0:	b7 01       	movw	r22, r14
    37d2:	c6 01       	movw	r24, r12
    37d4:	0e 94 4b 0f 	call	0x1e96	; 0x1e96 <ld_clust>
    37d8:	4b 01       	movw	r8, r22
    37da:	5c 01       	movw	r10, r24
    37dc:	f7 01       	movw	r30, r14
    37de:	12 8e       	std	Z+26, r1	; 0x1a
    37e0:	13 8e       	std	Z+27, r1	; 0x1b
    37e2:	14 8a       	std	Z+20, r1	; 0x14
    37e4:	15 8a       	std	Z+21, r1	; 0x15
    37e6:	81 e0       	ldi	r24, 0x01	; 1
    37e8:	d6 01       	movw	r26, r12
    37ea:	14 96       	adiw	r26, 0x04	; 4
    37ec:	8c 93       	st	X, r24
    37ee:	14 97       	sbiw	r26, 0x04	; 4
    37f0:	81 14       	cp	r8, r1
    37f2:	91 04       	cpc	r9, r1
    37f4:	a1 04       	cpc	r10, r1
    37f6:	b1 04       	cpc	r11, r1
    37f8:	09 f4       	brne	.+2      	; 0x37fc <f_open+0x374>
    37fa:	91 c0       	rjmp	.+290    	; 0x391e <f_open+0x496>
    37fc:	9a 96       	adiw	r26, 0x2a	; 42
    37fe:	2d 91       	ld	r18, X+
    3800:	3d 91       	ld	r19, X+
    3802:	4d 91       	ld	r20, X+
    3804:	5c 91       	ld	r21, X
    3806:	9d 97       	sbiw	r26, 0x2d	; 45
    3808:	2a a7       	std	Y+42, r18	; 0x2a
    380a:	3b a7       	std	Y+43, r19	; 0x2b
    380c:	4c a7       	std	Y+44, r20	; 0x2c
    380e:	5d a7       	std	Y+45, r21	; 0x2d
    3810:	b2 e0       	ldi	r27, 0x02	; 2
    3812:	8b 16       	cp	r8, r27
    3814:	91 04       	cpc	r9, r1
    3816:	a1 04       	cpc	r10, r1
    3818:	b1 04       	cpc	r11, r1
    381a:	08 f4       	brcc	.+2      	; 0x381e <f_open+0x396>
    381c:	28 c1       	rjmp	.+592    	; 0x3a6e <f_open+0x5e6>
    381e:	f6 01       	movw	r30, r12
    3820:	82 89       	ldd	r24, Z+18	; 0x12
    3822:	93 89       	ldd	r25, Z+19	; 0x13
    3824:	a4 89       	ldd	r26, Z+20	; 0x14
    3826:	b5 89       	ldd	r27, Z+21	; 0x15
    3828:	88 16       	cp	r8, r24
    382a:	99 06       	cpc	r9, r25
    382c:	aa 06       	cpc	r10, r26
    382e:	bb 06       	cpc	r11, r27
    3830:	08 f0       	brcs	.+2      	; 0x3834 <f_open+0x3ac>
    3832:	1f c1       	rjmp	.+574    	; 0x3a72 <f_open+0x5ea>
    3834:	8d a2       	std	Y+37, r8	; 0x25
    3836:	9e a2       	std	Y+38, r9	; 0x26
    3838:	af a2       	std	Y+39, r10	; 0x27
    383a:	b8 a6       	std	Y+40, r11	; 0x28
    383c:	3f c0       	rjmp	.+126    	; 0x38bc <f_open+0x434>
    383e:	4d a1       	ldd	r20, Y+37	; 0x25
    3840:	5e a1       	ldd	r21, Y+38	; 0x26
    3842:	6f a1       	ldd	r22, Y+39	; 0x27
    3844:	78 a5       	ldd	r23, Y+40	; 0x28
    3846:	c6 01       	movw	r24, r12
    3848:	a1 d8       	rcall	.-3774   	; 0x298c <get_fat>
    384a:	2b 01       	movw	r4, r22
    384c:	3c 01       	movw	r6, r24
    384e:	61 15       	cp	r22, r1
    3850:	71 05       	cpc	r23, r1
    3852:	81 05       	cpc	r24, r1
    3854:	91 05       	cpc	r25, r1
    3856:	09 f4       	brne	.+2      	; 0x385a <f_open+0x3d2>
    3858:	40 c0       	rjmp	.+128    	; 0x38da <f_open+0x452>
    385a:	61 30       	cpi	r22, 0x01	; 1
    385c:	71 05       	cpc	r23, r1
    385e:	81 05       	cpc	r24, r1
    3860:	91 05       	cpc	r25, r1
    3862:	09 f4       	brne	.+2      	; 0x3866 <f_open+0x3de>
    3864:	08 c1       	rjmp	.+528    	; 0x3a76 <f_open+0x5ee>
    3866:	6f 3f       	cpi	r22, 0xFF	; 255
    3868:	7f 4f       	sbci	r23, 0xFF	; 255
    386a:	8f 4f       	sbci	r24, 0xFF	; 255
    386c:	9f 4f       	sbci	r25, 0xFF	; 255
    386e:	09 f4       	brne	.+2      	; 0x3872 <f_open+0x3ea>
    3870:	04 c1       	rjmp	.+520    	; 0x3a7a <f_open+0x5f2>
    3872:	00 e0       	ldi	r16, 0x00	; 0
    3874:	10 e0       	ldi	r17, 0x00	; 0
    3876:	98 01       	movw	r18, r16
    3878:	4d a1       	ldd	r20, Y+37	; 0x25
    387a:	5e a1       	ldd	r21, Y+38	; 0x26
    387c:	6f a1       	ldd	r22, Y+39	; 0x27
    387e:	78 a5       	ldd	r23, Y+40	; 0x28
    3880:	c6 01       	movw	r24, r12
    3882:	3e da       	rcall	.-2948   	; 0x2d00 <put_fat>
    3884:	81 11       	cpse	r24, r1
    3886:	fa c0       	rjmp	.+500    	; 0x3a7c <f_open+0x5f4>
    3888:	f6 01       	movw	r30, r12
    388a:	86 85       	ldd	r24, Z+14	; 0x0e
    388c:	97 85       	ldd	r25, Z+15	; 0x0f
    388e:	a0 89       	ldd	r26, Z+16	; 0x10
    3890:	b1 89       	ldd	r27, Z+17	; 0x11
    3892:	8f 3f       	cpi	r24, 0xFF	; 255
    3894:	ff ef       	ldi	r31, 0xFF	; 255
    3896:	9f 07       	cpc	r25, r31
    3898:	af 07       	cpc	r26, r31
    389a:	bf 07       	cpc	r27, r31
    389c:	59 f0       	breq	.+22     	; 0x38b4 <f_open+0x42c>
    389e:	01 96       	adiw	r24, 0x01	; 1
    38a0:	a1 1d       	adc	r26, r1
    38a2:	b1 1d       	adc	r27, r1
    38a4:	f6 01       	movw	r30, r12
    38a6:	86 87       	std	Z+14, r24	; 0x0e
    38a8:	97 87       	std	Z+15, r25	; 0x0f
    38aa:	a0 8b       	std	Z+16, r26	; 0x10
    38ac:	b1 8b       	std	Z+17, r27	; 0x11
    38ae:	85 81       	ldd	r24, Z+5	; 0x05
    38b0:	81 60       	ori	r24, 0x01	; 1
    38b2:	85 83       	std	Z+5, r24	; 0x05
    38b4:	4d a2       	std	Y+37, r4	; 0x25
    38b6:	5e a2       	std	Y+38, r5	; 0x26
    38b8:	6f a2       	std	Y+39, r6	; 0x27
    38ba:	78 a6       	std	Y+40, r7	; 0x28
    38bc:	f6 01       	movw	r30, r12
    38be:	82 89       	ldd	r24, Z+18	; 0x12
    38c0:	93 89       	ldd	r25, Z+19	; 0x13
    38c2:	a4 89       	ldd	r26, Z+20	; 0x14
    38c4:	b5 89       	ldd	r27, Z+21	; 0x15
    38c6:	2d a1       	ldd	r18, Y+37	; 0x25
    38c8:	3e a1       	ldd	r19, Y+38	; 0x26
    38ca:	4f a1       	ldd	r20, Y+39	; 0x27
    38cc:	58 a5       	ldd	r21, Y+40	; 0x28
    38ce:	28 17       	cp	r18, r24
    38d0:	39 07       	cpc	r19, r25
    38d2:	4a 07       	cpc	r20, r26
    38d4:	5b 07       	cpc	r21, r27
    38d6:	08 f4       	brcc	.+2      	; 0x38da <f_open+0x452>
    38d8:	b2 cf       	rjmp	.-156    	; 0x383e <f_open+0x3b6>
    38da:	89 81       	ldd	r24, Y+1	; 0x01
    38dc:	9a 81       	ldd	r25, Y+2	; 0x02
    38de:	31 e0       	ldi	r19, 0x01	; 1
    38e0:	83 1a       	sub	r8, r19
    38e2:	91 08       	sbc	r9, r1
    38e4:	a1 08       	sbc	r10, r1
    38e6:	b1 08       	sbc	r11, r1
    38e8:	dc 01       	movw	r26, r24
    38ea:	1a 96       	adiw	r26, 0x0a	; 10
    38ec:	8d 92       	st	X+, r8
    38ee:	9d 92       	st	X+, r9
    38f0:	ad 92       	st	X+, r10
    38f2:	bc 92       	st	X, r11
    38f4:	1d 97       	sbiw	r26, 0x0d	; 13
    38f6:	4a a5       	ldd	r20, Y+42	; 0x2a
    38f8:	5b a5       	ldd	r21, Y+43	; 0x2b
    38fa:	6c a5       	ldd	r22, Y+44	; 0x2c
    38fc:	7d a5       	ldd	r23, Y+45	; 0x2d
    38fe:	0e 94 0d 10 	call	0x201a	; 0x201a <move_window>
    3902:	88 23       	and	r24, r24
    3904:	79 f0       	breq	.+30     	; 0x3924 <f_open+0x49c>
    3906:	f1 c0       	rjmp	.+482    	; 0x3aea <f_open+0x662>
    3908:	81 11       	cpse	r24, r1
    390a:	bf c0       	rjmp	.+382    	; 0x3a8a <f_open+0x602>
    390c:	f7 01       	movw	r30, r14
    390e:	83 85       	ldd	r24, Z+11	; 0x0b
    3910:	84 fd       	sbrc	r24, 4
    3912:	b8 c0       	rjmp	.+368    	; 0x3a84 <f_open+0x5fc>
    3914:	fd a1       	ldd	r31, Y+37	; 0x25
    3916:	f1 ff       	sbrs	r31, 1
    3918:	02 c0       	rjmp	.+4      	; 0x391e <f_open+0x496>
    391a:	80 fd       	sbrc	r24, 0
    391c:	b5 c0       	rjmp	.+362    	; 0x3a88 <f_open+0x600>
    391e:	29 a5       	ldd	r18, Y+41	; 0x29
    3920:	23 ff       	sbrs	r18, 3
    3922:	03 c0       	rjmp	.+6      	; 0x392a <f_open+0x4a2>
    3924:	39 a5       	ldd	r19, Y+41	; 0x29
    3926:	30 62       	ori	r19, 0x20	; 32
    3928:	39 a7       	std	Y+41, r19	; 0x29
    392a:	e9 81       	ldd	r30, Y+1	; 0x01
    392c:	fa 81       	ldd	r31, Y+2	; 0x02
    392e:	82 a5       	ldd	r24, Z+42	; 0x2a
    3930:	93 a5       	ldd	r25, Z+43	; 0x2b
    3932:	a4 a5       	ldd	r26, Z+44	; 0x2c
    3934:	b5 a5       	ldd	r27, Z+45	; 0x2d
    3936:	f1 01       	movw	r30, r2
    3938:	82 8f       	std	Z+26, r24	; 0x1a
    393a:	93 8f       	std	Z+27, r25	; 0x1b
    393c:	a4 8f       	std	Z+28, r26	; 0x1c
    393e:	b5 8f       	std	Z+29, r27	; 0x1d
    3940:	f7 8e       	std	Z+31, r15	; 0x1f
    3942:	e6 8e       	std	Z+30, r14	; 0x1e
    3944:	e9 a5       	ldd	r30, Y+41	; 0x29
    3946:	d1 01       	movw	r26, r2
    3948:	14 96       	adiw	r26, 0x04	; 4
    394a:	ec 93       	st	X, r30
    394c:	14 97       	sbiw	r26, 0x04	; 4
    394e:	15 96       	adiw	r26, 0x05	; 5
    3950:	1c 92       	st	X, r1
    3952:	09 81       	ldd	r16, Y+1	; 0x01
    3954:	1a 81       	ldd	r17, Y+2	; 0x02
    3956:	b7 01       	movw	r22, r14
    3958:	c8 01       	movw	r24, r16
    395a:	0e 94 4b 0f 	call	0x1e96	; 0x1e96 <ld_clust>
    395e:	d1 01       	movw	r26, r2
    3960:	1e 96       	adiw	r26, 0x0e	; 14
    3962:	6d 93       	st	X+, r22
    3964:	7d 93       	st	X+, r23
    3966:	8d 93       	st	X+, r24
    3968:	9c 93       	st	X, r25
    396a:	51 97       	sbiw	r26, 0x11	; 17
    396c:	f7 01       	movw	r30, r14
    396e:	27 8d       	ldd	r18, Z+31	; 0x1f
    3970:	86 8d       	ldd	r24, Z+30	; 0x1e
    3972:	90 e0       	ldi	r25, 0x00	; 0
    3974:	a0 e0       	ldi	r26, 0x00	; 0
    3976:	b0 e0       	ldi	r27, 0x00	; 0
    3978:	dc 01       	movw	r26, r24
    397a:	99 27       	eor	r25, r25
    397c:	88 27       	eor	r24, r24
    397e:	b2 2b       	or	r27, r18
    3980:	24 8d       	ldd	r18, Z+28	; 0x1c
    3982:	ac 01       	movw	r20, r24
    3984:	bd 01       	movw	r22, r26
    3986:	42 2b       	or	r20, r18
    3988:	25 8d       	ldd	r18, Z+29	; 0x1d
    398a:	30 e0       	ldi	r19, 0x00	; 0
    398c:	92 2f       	mov	r25, r18
    398e:	88 27       	eor	r24, r24
    3990:	a0 e0       	ldi	r26, 0x00	; 0
    3992:	b0 e0       	ldi	r27, 0x00	; 0
    3994:	84 2b       	or	r24, r20
    3996:	95 2b       	or	r25, r21
    3998:	a6 2b       	or	r26, r22
    399a:	b7 2b       	or	r27, r23
    399c:	f1 01       	movw	r30, r2
    399e:	82 87       	std	Z+10, r24	; 0x0a
    39a0:	93 87       	std	Z+11, r25	; 0x0b
    39a2:	a4 87       	std	Z+12, r26	; 0x0c
    39a4:	b5 87       	std	Z+13, r27	; 0x0d
    39a6:	16 82       	std	Z+6, r1	; 0x06
    39a8:	17 82       	std	Z+7, r1	; 0x07
    39aa:	10 86       	std	Z+8, r1	; 0x08
    39ac:	11 86       	std	Z+9, r1	; 0x09
    39ae:	16 8a       	std	Z+22, r1	; 0x16
    39b0:	17 8a       	std	Z+23, r1	; 0x17
    39b2:	10 8e       	std	Z+24, r1	; 0x18
    39b4:	11 8e       	std	Z+25, r1	; 0x19
    39b6:	11 83       	std	Z+1, r17	; 0x01
    39b8:	00 83       	st	Z, r16
    39ba:	d8 01       	movw	r26, r16
    39bc:	16 96       	adiw	r26, 0x06	; 6
    39be:	8d 91       	ld	r24, X+
    39c0:	9c 91       	ld	r25, X
    39c2:	17 97       	sbiw	r26, 0x07	; 7
    39c4:	93 83       	std	Z+3, r25	; 0x03
    39c6:	82 83       	std	Z+2, r24	; 0x02
    39c8:	80 e0       	ldi	r24, 0x00	; 0
    39ca:	8f c0       	rjmp	.+286    	; 0x3aea <f_open+0x662>
    39cc:	89 e0       	ldi	r24, 0x09	; 9
    39ce:	8d c0       	rjmp	.+282    	; 0x3aea <f_open+0x662>
    39d0:	e8 e0       	ldi	r30, 0x08	; 8
    39d2:	8e 16       	cp	r8, r30
    39d4:	91 04       	cpc	r9, r1
    39d6:	09 f4       	brne	.+2      	; 0x39da <f_open+0x552>
    39d8:	e4 cd       	rjmp	.-1080   	; 0x35a2 <f_open+0x11a>
    39da:	75 c0       	rjmp	.+234    	; 0x3ac6 <f_open+0x63e>
    39dc:	46 2f       	mov	r20, r22
    39de:	50 e0       	ldi	r21, 0x00	; 0
    39e0:	42 32       	cpi	r20, 0x22	; 34
    39e2:	51 05       	cpc	r21, r1
    39e4:	09 f4       	brne	.+2      	; 0x39e8 <f_open+0x560>
    39e6:	71 c0       	rjmp	.+226    	; 0x3aca <f_open+0x642>
    39e8:	e8 e0       	ldi	r30, 0x08	; 8
    39ea:	f1 e0       	ldi	r31, 0x01	; 1
    39ec:	9c 01       	movw	r18, r24
    39ee:	ed cd       	rjmp	.-1062   	; 0x35ca <f_open+0x142>
    39f0:	c9 01       	movw	r24, r18
    39f2:	2f eb       	ldi	r18, 0xBF	; 191
    39f4:	26 0f       	add	r18, r22
    39f6:	2a 31       	cpi	r18, 0x1A	; 26
    39f8:	08 f4       	brcc	.+2      	; 0x39fc <f_open+0x574>
    39fa:	f1 cd       	rjmp	.-1054   	; 0x35de <f_open+0x156>
    39fc:	f2 cd       	rjmp	.-1052   	; 0x35e2 <f_open+0x15a>
    39fe:	c8 0e       	add	r12, r24
    3a00:	d9 1e       	adc	r13, r25
    3a02:	97 2f       	mov	r25, r23
    3a04:	84 e0       	ldi	r24, 0x04	; 4
    3a06:	fb cd       	rjmp	.-1034   	; 0x35fe <f_open+0x176>
    3a08:	c8 0e       	add	r12, r24
    3a0a:	d9 1e       	adc	r13, r25
    3a0c:	97 2f       	mov	r25, r23
    3a0e:	84 2d       	mov	r24, r4
    3a10:	f6 cd       	rjmp	.-1044   	; 0x35fe <f_open+0x176>
    3a12:	da 01       	movw	r26, r20
    3a14:	1b 96       	adiw	r26, 0x0b	; 11
    3a16:	8c 91       	ld	r24, X
    3a18:	82 ff       	sbrs	r24, 2
    3a1a:	46 ce       	rjmp	.-884    	; 0x36a8 <f_open+0x220>
    3a1c:	0d c0       	rjmp	.+26     	; 0x3a38 <f_open+0x5b0>
    3a1e:	ed 89       	ldd	r30, Y+21	; 0x15
    3a20:	fe 89       	ldd	r31, Y+22	; 0x16
    3a22:	93 85       	ldd	r25, Z+11	; 0x0b
    3a24:	84 30       	cpi	r24, 0x04	; 4
    3a26:	09 f4       	brne	.+2      	; 0x3a2a <f_open+0x5a2>
    3a28:	3b ce       	rjmp	.-906    	; 0x36a0 <f_open+0x218>
    3a2a:	eb 88       	ldd	r14, Y+19	; 0x13
    3a2c:	fc 88       	ldd	r15, Y+20	; 0x14
    3a2e:	9d a1       	ldd	r25, Y+37	; 0x25
    3a30:	9c 71       	andi	r25, 0x1C	; 28
    3a32:	09 f0       	breq	.+2      	; 0x3a36 <f_open+0x5ae>
    3a34:	47 ce       	rjmp	.-882    	; 0x36c4 <f_open+0x23c>
    3a36:	68 cf       	rjmp	.-304    	; 0x3908 <f_open+0x480>
    3a38:	7b 01       	movw	r14, r22
    3a3a:	67 2b       	or	r22, r23
    3a3c:	29 f4       	brne	.+10     	; 0x3a48 <f_open+0x5c0>
    3a3e:	09 c0       	rjmp	.+18     	; 0x3a52 <f_open+0x5ca>
    3a40:	0d a1       	ldd	r16, Y+37	; 0x25
    3a42:	0c 71       	andi	r16, 0x1C	; 28
    3a44:	81 f5       	brne	.+96     	; 0x3aa6 <f_open+0x61e>
    3a46:	21 c0       	rjmp	.+66     	; 0x3a8a <f_open+0x602>
    3a48:	8d a1       	ldd	r24, Y+37	; 0x25
    3a4a:	8c 71       	andi	r24, 0x1C	; 28
    3a4c:	09 f0       	breq	.+2      	; 0x3a50 <f_open+0x5c8>
    3a4e:	81 ce       	rjmp	.-766    	; 0x3752 <f_open+0x2ca>
    3a50:	5d cf       	rjmp	.-326    	; 0x390c <f_open+0x484>
    3a52:	0d a1       	ldd	r16, Y+37	; 0x25
    3a54:	0c 71       	andi	r16, 0x1C	; 28
    3a56:	51 f5       	brne	.+84     	; 0x3aac <f_open+0x624>
    3a58:	e1 2c       	mov	r14, r1
    3a5a:	f1 2c       	mov	r15, r1
    3a5c:	86 e0       	ldi	r24, 0x06	; 6
    3a5e:	15 c0       	rjmp	.+42     	; 0x3a8a <f_open+0x602>
    3a60:	87 e0       	ldi	r24, 0x07	; 7
    3a62:	01 c0       	rjmp	.+2      	; 0x3a66 <f_open+0x5de>
    3a64:	88 e0       	ldi	r24, 0x08	; 8
    3a66:	88 23       	and	r24, r24
    3a68:	09 f4       	brne	.+2      	; 0x3a6c <f_open+0x5e4>
    3a6a:	59 cf       	rjmp	.-334    	; 0x391e <f_open+0x496>
    3a6c:	3e c0       	rjmp	.+124    	; 0x3aea <f_open+0x662>
    3a6e:	82 e0       	ldi	r24, 0x02	; 2
    3a70:	05 c0       	rjmp	.+10     	; 0x3a7c <f_open+0x5f4>
    3a72:	82 e0       	ldi	r24, 0x02	; 2
    3a74:	03 c0       	rjmp	.+6      	; 0x3a7c <f_open+0x5f4>
    3a76:	82 e0       	ldi	r24, 0x02	; 2
    3a78:	01 c0       	rjmp	.+2      	; 0x3a7c <f_open+0x5f4>
    3a7a:	81 e0       	ldi	r24, 0x01	; 1
    3a7c:	88 23       	and	r24, r24
    3a7e:	09 f4       	brne	.+2      	; 0x3a82 <f_open+0x5fa>
    3a80:	51 cf       	rjmp	.-350    	; 0x3924 <f_open+0x49c>
    3a82:	33 c0       	rjmp	.+102    	; 0x3aea <f_open+0x662>
    3a84:	84 e0       	ldi	r24, 0x04	; 4
    3a86:	01 c0       	rjmp	.+2      	; 0x3a8a <f_open+0x602>
    3a88:	87 e0       	ldi	r24, 0x07	; 7
    3a8a:	88 23       	and	r24, r24
    3a8c:	09 f4       	brne	.+2      	; 0x3a90 <f_open+0x608>
    3a8e:	5a cf       	rjmp	.-332    	; 0x3944 <f_open+0x4bc>
    3a90:	2c c0       	rjmp	.+88     	; 0x3aea <f_open+0x662>
    3a92:	eb 88       	ldd	r14, Y+19	; 0x13
    3a94:	fc 88       	ldd	r15, Y+20	; 0x14
    3a96:	86 e0       	ldi	r24, 0x06	; 6
    3a98:	d3 cf       	rjmp	.-90     	; 0x3a40 <f_open+0x5b8>
    3a9a:	b9 a5       	ldd	r27, Y+41	; 0x29
    3a9c:	b8 60       	ori	r27, 0x08	; 8
    3a9e:	b9 a7       	std	Y+41, r27	; 0x29
    3aa0:	eb 88       	ldd	r14, Y+19	; 0x13
    3aa2:	fc 88       	ldd	r15, Y+20	; 0x14
    3aa4:	f2 cf       	rjmp	.-28     	; 0x3a8a <f_open+0x602>
    3aa6:	84 30       	cpi	r24, 0x04	; 4
    3aa8:	c1 f7       	brne	.-16     	; 0x3a9a <f_open+0x612>
    3aaa:	0f ce       	rjmp	.-994    	; 0x36ca <f_open+0x242>
    3aac:	86 e0       	ldi	r24, 0x06	; 6
    3aae:	01 c0       	rjmp	.+2      	; 0x3ab2 <f_open+0x62a>
    3ab0:	87 e0       	ldi	r24, 0x07	; 7
    3ab2:	e9 a5       	ldd	r30, Y+41	; 0x29
    3ab4:	e8 60       	ori	r30, 0x08	; 8
    3ab6:	e9 a7       	std	Y+41, r30	; 0x29
    3ab8:	eb 88       	ldd	r14, Y+19	; 0x13
    3aba:	fc 88       	ldd	r15, Y+20	; 0x14
    3abc:	e6 cf       	rjmp	.-52     	; 0x3a8a <f_open+0x602>
    3abe:	84 e0       	ldi	r24, 0x04	; 4
    3ac0:	05 c0       	rjmp	.+10     	; 0x3acc <f_open+0x644>
    3ac2:	85 e0       	ldi	r24, 0x05	; 5
    3ac4:	03 c0       	rjmp	.+6      	; 0x3acc <f_open+0x644>
    3ac6:	86 e0       	ldi	r24, 0x06	; 6
    3ac8:	01 c0       	rjmp	.+2      	; 0x3acc <f_open+0x644>
    3aca:	86 e0       	ldi	r24, 0x06	; 6
    3acc:	eb 88       	ldd	r14, Y+19	; 0x13
    3ace:	fc 88       	ldd	r15, Y+20	; 0x14
    3ad0:	9d a1       	ldd	r25, Y+37	; 0x25
    3ad2:	9c 71       	andi	r25, 0x1C	; 28
    3ad4:	41 f7       	brne	.-48     	; 0x3aa6 <f_open+0x61e>
    3ad6:	18 cf       	rjmp	.-464    	; 0x3908 <f_open+0x480>
    3ad8:	f9 a5       	ldd	r31, Y+41	; 0x29
    3ada:	f8 60       	ori	r31, 0x08	; 8
    3adc:	f9 a7       	std	Y+41, r31	; 0x29
    3ade:	eb 88       	ldd	r14, Y+19	; 0x13
    3ae0:	fc 88       	ldd	r15, Y+20	; 0x14
    3ae2:	d3 cf       	rjmp	.-90     	; 0x3a8a <f_open+0x602>
    3ae4:	84 30       	cpi	r24, 0x04	; 4
    3ae6:	21 f3       	breq	.-56     	; 0x3ab0 <f_open+0x628>
    3ae8:	f7 cf       	rjmp	.-18     	; 0x3ad8 <f_open+0x650>
    3aea:	ae 96       	adiw	r28, 0x2e	; 46
    3aec:	0f b6       	in	r0, 0x3f	; 63
    3aee:	f8 94       	cli
    3af0:	de bf       	out	0x3e, r29	; 62
    3af2:	0f be       	out	0x3f, r0	; 63
    3af4:	cd bf       	out	0x3d, r28	; 61
    3af6:	df 91       	pop	r29
    3af8:	cf 91       	pop	r28
    3afa:	1f 91       	pop	r17
    3afc:	0f 91       	pop	r16
    3afe:	ff 90       	pop	r15
    3b00:	ef 90       	pop	r14
    3b02:	df 90       	pop	r13
    3b04:	cf 90       	pop	r12
    3b06:	bf 90       	pop	r11
    3b08:	af 90       	pop	r10
    3b0a:	9f 90       	pop	r9
    3b0c:	8f 90       	pop	r8
    3b0e:	7f 90       	pop	r7
    3b10:	6f 90       	pop	r6
    3b12:	5f 90       	pop	r5
    3b14:	4f 90       	pop	r4
    3b16:	3f 90       	pop	r3
    3b18:	2f 90       	pop	r2
    3b1a:	08 95       	ret

00003b1c <f_write>:
    3b1c:	3f 92       	push	r3
    3b1e:	4f 92       	push	r4
    3b20:	5f 92       	push	r5
    3b22:	6f 92       	push	r6
    3b24:	7f 92       	push	r7
    3b26:	8f 92       	push	r8
    3b28:	9f 92       	push	r9
    3b2a:	af 92       	push	r10
    3b2c:	bf 92       	push	r11
    3b2e:	cf 92       	push	r12
    3b30:	df 92       	push	r13
    3b32:	ef 92       	push	r14
    3b34:	ff 92       	push	r15
    3b36:	0f 93       	push	r16
    3b38:	1f 93       	push	r17
    3b3a:	cf 93       	push	r28
    3b3c:	df 93       	push	r29
    3b3e:	00 d0       	rcall	.+0      	; 0x3b40 <f_write+0x24>
    3b40:	00 d0       	rcall	.+0      	; 0x3b42 <f_write+0x26>
    3b42:	00 d0       	rcall	.+0      	; 0x3b44 <f_write+0x28>
    3b44:	cd b7       	in	r28, 0x3d	; 61
    3b46:	de b7       	in	r29, 0x3e	; 62
    3b48:	9e 83       	std	Y+6, r25	; 0x06
    3b4a:	8d 83       	std	Y+5, r24	; 0x05
    3b4c:	4b 01       	movw	r8, r22
    3b4e:	6a 01       	movw	r12, r20
    3b50:	59 01       	movw	r10, r18
    3b52:	d9 01       	movw	r26, r18
    3b54:	1d 92       	st	X+, r1
    3b56:	1c 92       	st	X, r1
    3b58:	0e 94 b1 10 	call	0x2162	; 0x2162 <validate>
    3b5c:	81 11       	cpse	r24, r1
    3b5e:	c0 c1       	rjmp	.+896    	; 0x3ee0 <f_write+0x3c4>
    3b60:	ed 81       	ldd	r30, Y+5	; 0x05
    3b62:	fe 81       	ldd	r31, Y+6	; 0x06
    3b64:	85 81       	ldd	r24, Z+5	; 0x05
    3b66:	81 11       	cpse	r24, r1
    3b68:	bb c1       	rjmp	.+886    	; 0x3ee0 <f_write+0x3c4>
    3b6a:	84 81       	ldd	r24, Z+4	; 0x04
    3b6c:	81 ff       	sbrs	r24, 1
    3b6e:	b7 c1       	rjmp	.+878    	; 0x3ede <f_write+0x3c2>
    3b70:	86 81       	ldd	r24, Z+6	; 0x06
    3b72:	97 81       	ldd	r25, Z+7	; 0x07
    3b74:	a0 85       	ldd	r26, Z+8	; 0x08
    3b76:	b1 85       	ldd	r27, Z+9	; 0x09
    3b78:	ac 01       	movw	r20, r24
    3b7a:	bd 01       	movw	r22, r26
    3b7c:	4c 0d       	add	r20, r12
    3b7e:	5d 1d       	adc	r21, r13
    3b80:	61 1d       	adc	r22, r1
    3b82:	71 1d       	adc	r23, r1
    3b84:	48 17       	cp	r20, r24
    3b86:	59 07       	cpc	r21, r25
    3b88:	6a 07       	cpc	r22, r26
    3b8a:	7b 07       	cpc	r23, r27
    3b8c:	08 f4       	brcc	.+2      	; 0x3b90 <f_write+0x74>
    3b8e:	8a c1       	rjmp	.+788    	; 0x3ea4 <f_write+0x388>
    3b90:	c1 14       	cp	r12, r1
    3b92:	d1 04       	cpc	r13, r1
    3b94:	09 f4       	brne	.+2      	; 0x3b98 <f_write+0x7c>
    3b96:	86 c1       	rjmp	.+780    	; 0x3ea4 <f_write+0x388>
    3b98:	b0 96       	adiw	r30, 0x20	; 32
    3b9a:	fc 83       	std	Y+4, r31	; 0x04
    3b9c:	eb 83       	std	Y+3, r30	; 0x03
    3b9e:	ed 81       	ldd	r30, Y+5	; 0x05
    3ba0:	fe 81       	ldd	r31, Y+6	; 0x06
    3ba2:	86 81       	ldd	r24, Z+6	; 0x06
    3ba4:	97 81       	ldd	r25, Z+7	; 0x07
    3ba6:	a0 85       	ldd	r26, Z+8	; 0x08
    3ba8:	b1 85       	ldd	r27, Z+9	; 0x09
    3baa:	ac 01       	movw	r20, r24
    3bac:	bd 01       	movw	r22, r26
    3bae:	51 70       	andi	r21, 0x01	; 1
    3bb0:	66 27       	eor	r22, r22
    3bb2:	77 27       	eor	r23, r23
    3bb4:	45 2b       	or	r20, r21
    3bb6:	46 2b       	or	r20, r22
    3bb8:	47 2b       	or	r20, r23
    3bba:	09 f0       	breq	.+2      	; 0x3bbe <f_write+0xa2>
    3bbc:	32 c1       	rjmp	.+612    	; 0x3e22 <f_write+0x306>
    3bbe:	e0 80       	ld	r14, Z
    3bc0:	f1 80       	ldd	r15, Z+1	; 0x01
    3bc2:	f7 01       	movw	r30, r14
    3bc4:	22 81       	ldd	r18, Z+2	; 0x02
    3bc6:	21 50       	subi	r18, 0x01	; 1
    3bc8:	ac 01       	movw	r20, r24
    3bca:	bd 01       	movw	r22, r26
    3bcc:	03 2e       	mov	r0, r19
    3bce:	39 e0       	ldi	r19, 0x09	; 9
    3bd0:	76 95       	lsr	r23
    3bd2:	67 95       	ror	r22
    3bd4:	57 95       	ror	r21
    3bd6:	47 95       	ror	r20
    3bd8:	3a 95       	dec	r19
    3bda:	d1 f7       	brne	.-12     	; 0x3bd0 <f_write+0xb4>
    3bdc:	30 2d       	mov	r19, r0
    3bde:	32 2e       	mov	r3, r18
    3be0:	34 22       	and	r3, r20
    3be2:	09 f0       	breq	.+2      	; 0x3be6 <f_write+0xca>
    3be4:	52 c0       	rjmp	.+164    	; 0x3c8a <f_write+0x16e>
    3be6:	89 2b       	or	r24, r25
    3be8:	8a 2b       	or	r24, r26
    3bea:	8b 2b       	or	r24, r27
    3bec:	99 f4       	brne	.+38     	; 0x3c14 <f_write+0xf8>
    3bee:	ad 81       	ldd	r26, Y+5	; 0x05
    3bf0:	be 81       	ldd	r27, Y+6	; 0x06
    3bf2:	1e 96       	adiw	r26, 0x0e	; 14
    3bf4:	6d 91       	ld	r22, X+
    3bf6:	7d 91       	ld	r23, X+
    3bf8:	8d 91       	ld	r24, X+
    3bfa:	9c 91       	ld	r25, X
    3bfc:	51 97       	sbiw	r26, 0x11	; 17
    3bfe:	61 15       	cp	r22, r1
    3c00:	71 05       	cpc	r23, r1
    3c02:	81 05       	cpc	r24, r1
    3c04:	91 05       	cpc	r25, r1
    3c06:	a1 f4       	brne	.+40     	; 0x3c30 <f_write+0x114>
    3c08:	40 e0       	ldi	r20, 0x00	; 0
    3c0a:	50 e0       	ldi	r21, 0x00	; 0
    3c0c:	ba 01       	movw	r22, r20
    3c0e:	c7 01       	movw	r24, r14
    3c10:	9e d9       	rcall	.-3268   	; 0x2f4e <create_chain>
    3c12:	08 c0       	rjmp	.+16     	; 0x3c24 <f_write+0x108>
    3c14:	ed 81       	ldd	r30, Y+5	; 0x05
    3c16:	fe 81       	ldd	r31, Y+6	; 0x06
    3c18:	42 89       	ldd	r20, Z+18	; 0x12
    3c1a:	53 89       	ldd	r21, Z+19	; 0x13
    3c1c:	64 89       	ldd	r22, Z+20	; 0x14
    3c1e:	75 89       	ldd	r23, Z+21	; 0x15
    3c20:	c7 01       	movw	r24, r14
    3c22:	95 d9       	rcall	.-3286   	; 0x2f4e <create_chain>
    3c24:	61 15       	cp	r22, r1
    3c26:	71 05       	cpc	r23, r1
    3c28:	81 05       	cpc	r24, r1
    3c2a:	91 05       	cpc	r25, r1
    3c2c:	09 f4       	brne	.+2      	; 0x3c30 <f_write+0x114>
    3c2e:	3a c1       	rjmp	.+628    	; 0x3ea4 <f_write+0x388>
    3c30:	61 30       	cpi	r22, 0x01	; 1
    3c32:	71 05       	cpc	r23, r1
    3c34:	81 05       	cpc	r24, r1
    3c36:	91 05       	cpc	r25, r1
    3c38:	31 f4       	brne	.+12     	; 0x3c46 <f_write+0x12a>
    3c3a:	82 e0       	ldi	r24, 0x02	; 2
    3c3c:	ad 81       	ldd	r26, Y+5	; 0x05
    3c3e:	be 81       	ldd	r27, Y+6	; 0x06
    3c40:	15 96       	adiw	r26, 0x05	; 5
    3c42:	8c 93       	st	X, r24
    3c44:	4d c1       	rjmp	.+666    	; 0x3ee0 <f_write+0x3c4>
    3c46:	6f 3f       	cpi	r22, 0xFF	; 255
    3c48:	bf ef       	ldi	r27, 0xFF	; 255
    3c4a:	7b 07       	cpc	r23, r27
    3c4c:	8b 07       	cpc	r24, r27
    3c4e:	9b 07       	cpc	r25, r27
    3c50:	29 f4       	brne	.+10     	; 0x3c5c <f_write+0x140>
    3c52:	81 e0       	ldi	r24, 0x01	; 1
    3c54:	ed 81       	ldd	r30, Y+5	; 0x05
    3c56:	fe 81       	ldd	r31, Y+6	; 0x06
    3c58:	85 83       	std	Z+5, r24	; 0x05
    3c5a:	42 c1       	rjmp	.+644    	; 0x3ee0 <f_write+0x3c4>
    3c5c:	ad 81       	ldd	r26, Y+5	; 0x05
    3c5e:	be 81       	ldd	r27, Y+6	; 0x06
    3c60:	52 96       	adiw	r26, 0x12	; 18
    3c62:	6d 93       	st	X+, r22
    3c64:	7d 93       	st	X+, r23
    3c66:	8d 93       	st	X+, r24
    3c68:	9c 93       	st	X, r25
    3c6a:	55 97       	sbiw	r26, 0x15	; 21
    3c6c:	1e 96       	adiw	r26, 0x0e	; 14
    3c6e:	4d 90       	ld	r4, X+
    3c70:	5d 90       	ld	r5, X+
    3c72:	6d 90       	ld	r6, X+
    3c74:	7c 90       	ld	r7, X
    3c76:	51 97       	sbiw	r26, 0x11	; 17
    3c78:	45 28       	or	r4, r5
    3c7a:	46 28       	or	r4, r6
    3c7c:	47 28       	or	r4, r7
    3c7e:	29 f4       	brne	.+10     	; 0x3c8a <f_write+0x16e>
    3c80:	fd 01       	movw	r30, r26
    3c82:	66 87       	std	Z+14, r22	; 0x0e
    3c84:	77 87       	std	Z+15, r23	; 0x0f
    3c86:	80 8b       	std	Z+16, r24	; 0x10
    3c88:	91 8b       	std	Z+17, r25	; 0x11
    3c8a:	ad 81       	ldd	r26, Y+5	; 0x05
    3c8c:	be 81       	ldd	r27, Y+6	; 0x06
    3c8e:	14 96       	adiw	r26, 0x04	; 4
    3c90:	8c 91       	ld	r24, X
    3c92:	14 97       	sbiw	r26, 0x04	; 4
    3c94:	86 ff       	sbrs	r24, 6
    3c96:	1e c0       	rjmp	.+60     	; 0x3cd4 <f_write+0x1b8>
    3c98:	56 96       	adiw	r26, 0x16	; 22
    3c9a:	2d 91       	ld	r18, X+
    3c9c:	3d 91       	ld	r19, X+
    3c9e:	4d 91       	ld	r20, X+
    3ca0:	5c 91       	ld	r21, X
    3ca2:	59 97       	sbiw	r26, 0x19	; 25
    3ca4:	ed 91       	ld	r30, X+
    3ca6:	fc 91       	ld	r31, X
    3ca8:	01 e0       	ldi	r16, 0x01	; 1
    3caa:	10 e0       	ldi	r17, 0x00	; 0
    3cac:	6b 81       	ldd	r22, Y+3	; 0x03
    3cae:	7c 81       	ldd	r23, Y+4	; 0x04
    3cb0:	81 81       	ldd	r24, Z+1	; 0x01
    3cb2:	0e 94 bc 08 	call	0x1178	; 0x1178 <disk_write>
    3cb6:	88 23       	and	r24, r24
    3cb8:	29 f0       	breq	.+10     	; 0x3cc4 <f_write+0x1a8>
    3cba:	81 e0       	ldi	r24, 0x01	; 1
    3cbc:	ed 81       	ldd	r30, Y+5	; 0x05
    3cbe:	fe 81       	ldd	r31, Y+6	; 0x06
    3cc0:	85 83       	std	Z+5, r24	; 0x05
    3cc2:	0e c1       	rjmp	.+540    	; 0x3ee0 <f_write+0x3c4>
    3cc4:	ad 81       	ldd	r26, Y+5	; 0x05
    3cc6:	be 81       	ldd	r27, Y+6	; 0x06
    3cc8:	14 96       	adiw	r26, 0x04	; 4
    3cca:	8c 91       	ld	r24, X
    3ccc:	14 97       	sbiw	r26, 0x04	; 4
    3cce:	8f 7b       	andi	r24, 0xBF	; 191
    3cd0:	14 96       	adiw	r26, 0x04	; 4
    3cd2:	8c 93       	st	X, r24
    3cd4:	ed 81       	ldd	r30, Y+5	; 0x05
    3cd6:	fe 81       	ldd	r31, Y+6	; 0x06
    3cd8:	01 90       	ld	r0, Z+
    3cda:	f0 81       	ld	r31, Z
    3cdc:	e0 2d       	mov	r30, r0
    3cde:	fa 83       	std	Y+2, r31	; 0x02
    3ce0:	e9 83       	std	Y+1, r30	; 0x01
    3ce2:	ad 81       	ldd	r26, Y+5	; 0x05
    3ce4:	be 81       	ldd	r27, Y+6	; 0x06
    3ce6:	52 96       	adiw	r26, 0x12	; 18
    3ce8:	4d 91       	ld	r20, X+
    3cea:	5d 91       	ld	r21, X+
    3cec:	6d 91       	ld	r22, X+
    3cee:	7c 91       	ld	r23, X
    3cf0:	55 97       	sbiw	r26, 0x15	; 21
    3cf2:	cf 01       	movw	r24, r30
    3cf4:	0e 94 98 14 	call	0x2930	; 0x2930 <clust2sect>
    3cf8:	61 15       	cp	r22, r1
    3cfa:	71 05       	cpc	r23, r1
    3cfc:	81 05       	cpc	r24, r1
    3cfe:	91 05       	cpc	r25, r1
    3d00:	29 f4       	brne	.+10     	; 0x3d0c <f_write+0x1f0>
    3d02:	82 e0       	ldi	r24, 0x02	; 2
    3d04:	ed 81       	ldd	r30, Y+5	; 0x05
    3d06:	fe 81       	ldd	r31, Y+6	; 0x06
    3d08:	85 83       	std	Z+5, r24	; 0x05
    3d0a:	ea c0       	rjmp	.+468    	; 0x3ee0 <f_write+0x3c4>
    3d0c:	2b 01       	movw	r4, r22
    3d0e:	3c 01       	movw	r6, r24
    3d10:	43 0c       	add	r4, r3
    3d12:	51 1c       	adc	r5, r1
    3d14:	61 1c       	adc	r6, r1
    3d16:	71 1c       	adc	r7, r1
    3d18:	76 01       	movw	r14, r12
    3d1a:	ef 2c       	mov	r14, r15
    3d1c:	ff 24       	eor	r15, r15
    3d1e:	e6 94       	lsr	r14
    3d20:	e1 14       	cp	r14, r1
    3d22:	f1 04       	cpc	r15, r1
    3d24:	09 f4       	brne	.+2      	; 0x3d28 <f_write+0x20c>
    3d26:	4a c0       	rjmp	.+148    	; 0x3dbc <f_write+0x2a0>
    3d28:	a9 81       	ldd	r26, Y+1	; 0x01
    3d2a:	ba 81       	ldd	r27, Y+2	; 0x02
    3d2c:	12 96       	adiw	r26, 0x02	; 2
    3d2e:	4c 91       	ld	r20, X
    3d30:	24 2f       	mov	r18, r20
    3d32:	30 e0       	ldi	r19, 0x00	; 0
    3d34:	c7 01       	movw	r24, r14
    3d36:	83 0d       	add	r24, r3
    3d38:	91 1d       	adc	r25, r1
    3d3a:	28 17       	cp	r18, r24
    3d3c:	39 07       	cpc	r19, r25
    3d3e:	18 f4       	brcc	.+6      	; 0x3d46 <f_write+0x22a>
    3d40:	79 01       	movw	r14, r18
    3d42:	e3 18       	sub	r14, r3
    3d44:	f1 08       	sbc	r15, r1
    3d46:	87 01       	movw	r16, r14
    3d48:	a3 01       	movw	r20, r6
    3d4a:	92 01       	movw	r18, r4
    3d4c:	b4 01       	movw	r22, r8
    3d4e:	e9 81       	ldd	r30, Y+1	; 0x01
    3d50:	fa 81       	ldd	r31, Y+2	; 0x02
    3d52:	81 81       	ldd	r24, Z+1	; 0x01
    3d54:	0e 94 bc 08 	call	0x1178	; 0x1178 <disk_write>
    3d58:	88 23       	and	r24, r24
    3d5a:	31 f0       	breq	.+12     	; 0x3d68 <f_write+0x24c>
    3d5c:	81 e0       	ldi	r24, 0x01	; 1
    3d5e:	ad 81       	ldd	r26, Y+5	; 0x05
    3d60:	be 81       	ldd	r27, Y+6	; 0x06
    3d62:	15 96       	adiw	r26, 0x05	; 5
    3d64:	8c 93       	st	X, r24
    3d66:	bc c0       	rjmp	.+376    	; 0x3ee0 <f_write+0x3c4>
    3d68:	ed 81       	ldd	r30, Y+5	; 0x05
    3d6a:	fe 81       	ldd	r31, Y+6	; 0x06
    3d6c:	86 89       	ldd	r24, Z+22	; 0x16
    3d6e:	97 89       	ldd	r25, Z+23	; 0x17
    3d70:	a0 8d       	ldd	r26, Z+24	; 0x18
    3d72:	b1 8d       	ldd	r27, Z+25	; 0x19
    3d74:	84 19       	sub	r24, r4
    3d76:	95 09       	sbc	r25, r5
    3d78:	a6 09       	sbc	r26, r6
    3d7a:	b7 09       	sbc	r27, r7
    3d7c:	a7 01       	movw	r20, r14
    3d7e:	60 e0       	ldi	r22, 0x00	; 0
    3d80:	70 e0       	ldi	r23, 0x00	; 0
    3d82:	84 17       	cp	r24, r20
    3d84:	95 07       	cpc	r25, r21
    3d86:	a6 07       	cpc	r26, r22
    3d88:	b7 07       	cpc	r27, r23
    3d8a:	a0 f4       	brcc	.+40     	; 0x3db4 <f_write+0x298>
    3d8c:	98 2f       	mov	r25, r24
    3d8e:	88 27       	eor	r24, r24
    3d90:	99 0f       	add	r25, r25
    3d92:	b4 01       	movw	r22, r8
    3d94:	68 0f       	add	r22, r24
    3d96:	79 1f       	adc	r23, r25
    3d98:	40 e0       	ldi	r20, 0x00	; 0
    3d9a:	52 e0       	ldi	r21, 0x02	; 2
    3d9c:	8b 81       	ldd	r24, Y+3	; 0x03
    3d9e:	9c 81       	ldd	r25, Y+4	; 0x04
    3da0:	0e 94 3d 0f 	call	0x1e7a	; 0x1e7a <mem_cpy>
    3da4:	ad 81       	ldd	r26, Y+5	; 0x05
    3da6:	be 81       	ldd	r27, Y+6	; 0x06
    3da8:	14 96       	adiw	r26, 0x04	; 4
    3daa:	8c 91       	ld	r24, X
    3dac:	14 97       	sbiw	r26, 0x04	; 4
    3dae:	8f 7b       	andi	r24, 0xBF	; 191
    3db0:	14 96       	adiw	r26, 0x04	; 4
    3db2:	8c 93       	st	X, r24
    3db4:	fe 2c       	mov	r15, r14
    3db6:	ee 24       	eor	r14, r14
    3db8:	ff 0c       	add	r15, r15
    3dba:	58 c0       	rjmp	.+176    	; 0x3e6c <f_write+0x350>
    3dbc:	ed 81       	ldd	r30, Y+5	; 0x05
    3dbe:	fe 81       	ldd	r31, Y+6	; 0x06
    3dc0:	86 89       	ldd	r24, Z+22	; 0x16
    3dc2:	97 89       	ldd	r25, Z+23	; 0x17
    3dc4:	a0 8d       	ldd	r26, Z+24	; 0x18
    3dc6:	b1 8d       	ldd	r27, Z+25	; 0x19
    3dc8:	84 15       	cp	r24, r4
    3dca:	95 05       	cpc	r25, r5
    3dcc:	a6 05       	cpc	r26, r6
    3dce:	b7 05       	cpc	r27, r7
    3dd0:	01 f1       	breq	.+64     	; 0x3e12 <f_write+0x2f6>
    3dd2:	46 81       	ldd	r20, Z+6	; 0x06
    3dd4:	57 81       	ldd	r21, Z+7	; 0x07
    3dd6:	60 85       	ldd	r22, Z+8	; 0x08
    3dd8:	71 85       	ldd	r23, Z+9	; 0x09
    3dda:	82 85       	ldd	r24, Z+10	; 0x0a
    3ddc:	93 85       	ldd	r25, Z+11	; 0x0b
    3dde:	a4 85       	ldd	r26, Z+12	; 0x0c
    3de0:	b5 85       	ldd	r27, Z+13	; 0x0d
    3de2:	48 17       	cp	r20, r24
    3de4:	59 07       	cpc	r21, r25
    3de6:	6a 07       	cpc	r22, r26
    3de8:	7b 07       	cpc	r23, r27
    3dea:	98 f4       	brcc	.+38     	; 0x3e12 <f_write+0x2f6>
    3dec:	01 e0       	ldi	r16, 0x01	; 1
    3dee:	10 e0       	ldi	r17, 0x00	; 0
    3df0:	a3 01       	movw	r20, r6
    3df2:	92 01       	movw	r18, r4
    3df4:	6b 81       	ldd	r22, Y+3	; 0x03
    3df6:	7c 81       	ldd	r23, Y+4	; 0x04
    3df8:	a9 81       	ldd	r26, Y+1	; 0x01
    3dfa:	ba 81       	ldd	r27, Y+2	; 0x02
    3dfc:	11 96       	adiw	r26, 0x01	; 1
    3dfe:	8c 91       	ld	r24, X
    3e00:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <disk_read>
    3e04:	88 23       	and	r24, r24
    3e06:	29 f0       	breq	.+10     	; 0x3e12 <f_write+0x2f6>
    3e08:	81 e0       	ldi	r24, 0x01	; 1
    3e0a:	ed 81       	ldd	r30, Y+5	; 0x05
    3e0c:	fe 81       	ldd	r31, Y+6	; 0x06
    3e0e:	85 83       	std	Z+5, r24	; 0x05
    3e10:	67 c0       	rjmp	.+206    	; 0x3ee0 <f_write+0x3c4>
    3e12:	ad 81       	ldd	r26, Y+5	; 0x05
    3e14:	be 81       	ldd	r27, Y+6	; 0x06
    3e16:	56 96       	adiw	r26, 0x16	; 22
    3e18:	4d 92       	st	X+, r4
    3e1a:	5d 92       	st	X+, r5
    3e1c:	6d 92       	st	X+, r6
    3e1e:	7c 92       	st	X, r7
    3e20:	59 97       	sbiw	r26, 0x19	; 25
    3e22:	ed 81       	ldd	r30, Y+5	; 0x05
    3e24:	fe 81       	ldd	r31, Y+6	; 0x06
    3e26:	86 81       	ldd	r24, Z+6	; 0x06
    3e28:	97 81       	ldd	r25, Z+7	; 0x07
    3e2a:	a0 85       	ldd	r26, Z+8	; 0x08
    3e2c:	b1 85       	ldd	r27, Z+9	; 0x09
    3e2e:	ac 01       	movw	r20, r24
    3e30:	51 70       	andi	r21, 0x01	; 1
    3e32:	20 e0       	ldi	r18, 0x00	; 0
    3e34:	32 e0       	ldi	r19, 0x02	; 2
    3e36:	24 1b       	sub	r18, r20
    3e38:	35 0b       	sbc	r19, r21
    3e3a:	76 01       	movw	r14, r12
    3e3c:	2c 15       	cp	r18, r12
    3e3e:	3d 05       	cpc	r19, r13
    3e40:	08 f4       	brcc	.+2      	; 0x3e44 <f_write+0x328>
    3e42:	79 01       	movw	r14, r18
    3e44:	91 70       	andi	r25, 0x01	; 1
    3e46:	aa 27       	eor	r26, r26
    3e48:	bb 27       	eor	r27, r27
    3e4a:	80 96       	adiw	r24, 0x20	; 32
    3e4c:	a7 01       	movw	r20, r14
    3e4e:	b4 01       	movw	r22, r8
    3e50:	2d 81       	ldd	r18, Y+5	; 0x05
    3e52:	3e 81       	ldd	r19, Y+6	; 0x06
    3e54:	82 0f       	add	r24, r18
    3e56:	93 1f       	adc	r25, r19
    3e58:	0e 94 3d 0f 	call	0x1e7a	; 0x1e7a <mem_cpy>
    3e5c:	ad 81       	ldd	r26, Y+5	; 0x05
    3e5e:	be 81       	ldd	r27, Y+6	; 0x06
    3e60:	14 96       	adiw	r26, 0x04	; 4
    3e62:	8c 91       	ld	r24, X
    3e64:	14 97       	sbiw	r26, 0x04	; 4
    3e66:	80 64       	ori	r24, 0x40	; 64
    3e68:	14 96       	adiw	r26, 0x04	; 4
    3e6a:	8c 93       	st	X, r24
    3e6c:	8e 0c       	add	r8, r14
    3e6e:	9f 1c       	adc	r9, r15
    3e70:	ed 81       	ldd	r30, Y+5	; 0x05
    3e72:	fe 81       	ldd	r31, Y+6	; 0x06
    3e74:	86 81       	ldd	r24, Z+6	; 0x06
    3e76:	97 81       	ldd	r25, Z+7	; 0x07
    3e78:	a0 85       	ldd	r26, Z+8	; 0x08
    3e7a:	b1 85       	ldd	r27, Z+9	; 0x09
    3e7c:	8e 0d       	add	r24, r14
    3e7e:	9f 1d       	adc	r25, r15
    3e80:	a1 1d       	adc	r26, r1
    3e82:	b1 1d       	adc	r27, r1
    3e84:	86 83       	std	Z+6, r24	; 0x06
    3e86:	97 83       	std	Z+7, r25	; 0x07
    3e88:	a0 87       	std	Z+8, r26	; 0x08
    3e8a:	b1 87       	std	Z+9, r27	; 0x09
    3e8c:	d5 01       	movw	r26, r10
    3e8e:	8d 91       	ld	r24, X+
    3e90:	9c 91       	ld	r25, X
    3e92:	11 97       	sbiw	r26, 0x01	; 1
    3e94:	8e 0d       	add	r24, r14
    3e96:	9f 1d       	adc	r25, r15
    3e98:	8d 93       	st	X+, r24
    3e9a:	9c 93       	st	X, r25
    3e9c:	ce 18       	sub	r12, r14
    3e9e:	df 08       	sbc	r13, r15
    3ea0:	09 f0       	breq	.+2      	; 0x3ea4 <f_write+0x388>
    3ea2:	7d ce       	rjmp	.-774    	; 0x3b9e <f_write+0x82>
    3ea4:	ed 81       	ldd	r30, Y+5	; 0x05
    3ea6:	fe 81       	ldd	r31, Y+6	; 0x06
    3ea8:	86 81       	ldd	r24, Z+6	; 0x06
    3eaa:	97 81       	ldd	r25, Z+7	; 0x07
    3eac:	a0 85       	ldd	r26, Z+8	; 0x08
    3eae:	b1 85       	ldd	r27, Z+9	; 0x09
    3eb0:	42 85       	ldd	r20, Z+10	; 0x0a
    3eb2:	53 85       	ldd	r21, Z+11	; 0x0b
    3eb4:	64 85       	ldd	r22, Z+12	; 0x0c
    3eb6:	75 85       	ldd	r23, Z+13	; 0x0d
    3eb8:	48 17       	cp	r20, r24
    3eba:	59 07       	cpc	r21, r25
    3ebc:	6a 07       	cpc	r22, r26
    3ebe:	7b 07       	cpc	r23, r27
    3ec0:	20 f4       	brcc	.+8      	; 0x3eca <f_write+0x3ae>
    3ec2:	82 87       	std	Z+10, r24	; 0x0a
    3ec4:	93 87       	std	Z+11, r25	; 0x0b
    3ec6:	a4 87       	std	Z+12, r26	; 0x0c
    3ec8:	b5 87       	std	Z+13, r27	; 0x0d
    3eca:	ad 81       	ldd	r26, Y+5	; 0x05
    3ecc:	be 81       	ldd	r27, Y+6	; 0x06
    3ece:	14 96       	adiw	r26, 0x04	; 4
    3ed0:	8c 91       	ld	r24, X
    3ed2:	14 97       	sbiw	r26, 0x04	; 4
    3ed4:	80 62       	ori	r24, 0x20	; 32
    3ed6:	14 96       	adiw	r26, 0x04	; 4
    3ed8:	8c 93       	st	X, r24
    3eda:	80 e0       	ldi	r24, 0x00	; 0
    3edc:	01 c0       	rjmp	.+2      	; 0x3ee0 <f_write+0x3c4>
    3ede:	87 e0       	ldi	r24, 0x07	; 7
    3ee0:	26 96       	adiw	r28, 0x06	; 6
    3ee2:	0f b6       	in	r0, 0x3f	; 63
    3ee4:	f8 94       	cli
    3ee6:	de bf       	out	0x3e, r29	; 62
    3ee8:	0f be       	out	0x3f, r0	; 63
    3eea:	cd bf       	out	0x3d, r28	; 61
    3eec:	df 91       	pop	r29
    3eee:	cf 91       	pop	r28
    3ef0:	1f 91       	pop	r17
    3ef2:	0f 91       	pop	r16
    3ef4:	ff 90       	pop	r15
    3ef6:	ef 90       	pop	r14
    3ef8:	df 90       	pop	r13
    3efa:	cf 90       	pop	r12
    3efc:	bf 90       	pop	r11
    3efe:	af 90       	pop	r10
    3f00:	9f 90       	pop	r9
    3f02:	8f 90       	pop	r8
    3f04:	7f 90       	pop	r7
    3f06:	6f 90       	pop	r6
    3f08:	5f 90       	pop	r5
    3f0a:	4f 90       	pop	r4
    3f0c:	3f 90       	pop	r3
    3f0e:	08 95       	ret

00003f10 <putc_bfd>:
    3f10:	ef 92       	push	r14
    3f12:	ff 92       	push	r15
    3f14:	0f 93       	push	r16
    3f16:	1f 93       	push	r17
    3f18:	cf 93       	push	r28
    3f1a:	df 93       	push	r29
    3f1c:	00 d0       	rcall	.+0      	; 0x3f1e <putc_bfd+0xe>
    3f1e:	cd b7       	in	r28, 0x3d	; 61
    3f20:	de b7       	in	r29, 0x3e	; 62
    3f22:	fc 01       	movw	r30, r24
    3f24:	22 81       	ldd	r18, Z+2	; 0x02
    3f26:	33 81       	ldd	r19, Z+3	; 0x03
    3f28:	33 23       	and	r19, r19
    3f2a:	6c f1       	brlt	.+90     	; 0x3f86 <putc_bfd+0x76>
    3f2c:	8c 01       	movw	r16, r24
    3f2e:	79 01       	movw	r14, r18
    3f30:	ff ef       	ldi	r31, 0xFF	; 255
    3f32:	ef 1a       	sub	r14, r31
    3f34:	ff 0a       	sbc	r15, r31
    3f36:	fc 01       	movw	r30, r24
    3f38:	e2 0f       	add	r30, r18
    3f3a:	f3 1f       	adc	r31, r19
    3f3c:	66 83       	std	Z+6, r22	; 0x06
    3f3e:	8d e3       	ldi	r24, 0x3D	; 61
    3f40:	e8 16       	cp	r14, r24
    3f42:	f1 04       	cpc	r15, r1
    3f44:	c4 f0       	brlt	.+48     	; 0x3f76 <putc_bfd+0x66>
    3f46:	9e 01       	movw	r18, r28
    3f48:	2f 5f       	subi	r18, 0xFF	; 255
    3f4a:	3f 4f       	sbci	r19, 0xFF	; 255
    3f4c:	a7 01       	movw	r20, r14
    3f4e:	b8 01       	movw	r22, r16
    3f50:	6a 5f       	subi	r22, 0xFA	; 250
    3f52:	7f 4f       	sbci	r23, 0xFF	; 255
    3f54:	f8 01       	movw	r30, r16
    3f56:	80 81       	ld	r24, Z
    3f58:	91 81       	ldd	r25, Z+1	; 0x01
    3f5a:	e0 dd       	rcall	.-1088   	; 0x3b1c <f_write>
    3f5c:	81 e0       	ldi	r24, 0x01	; 1
    3f5e:	90 e0       	ldi	r25, 0x00	; 0
    3f60:	29 81       	ldd	r18, Y+1	; 0x01
    3f62:	3a 81       	ldd	r19, Y+2	; 0x02
    3f64:	e2 16       	cp	r14, r18
    3f66:	f3 06       	cpc	r15, r19
    3f68:	11 f4       	brne	.+4      	; 0x3f6e <putc_bfd+0x5e>
    3f6a:	80 e0       	ldi	r24, 0x00	; 0
    3f6c:	90 e0       	ldi	r25, 0x00	; 0
    3f6e:	ee 24       	eor	r14, r14
    3f70:	ff 24       	eor	r15, r15
    3f72:	e8 1a       	sub	r14, r24
    3f74:	f9 0a       	sbc	r15, r25
    3f76:	f8 01       	movw	r30, r16
    3f78:	f3 82       	std	Z+3, r15	; 0x03
    3f7a:	e2 82       	std	Z+2, r14	; 0x02
    3f7c:	84 81       	ldd	r24, Z+4	; 0x04
    3f7e:	95 81       	ldd	r25, Z+5	; 0x05
    3f80:	01 96       	adiw	r24, 0x01	; 1
    3f82:	95 83       	std	Z+5, r25	; 0x05
    3f84:	84 83       	std	Z+4, r24	; 0x04
    3f86:	0f 90       	pop	r0
    3f88:	0f 90       	pop	r0
    3f8a:	df 91       	pop	r29
    3f8c:	cf 91       	pop	r28
    3f8e:	1f 91       	pop	r17
    3f90:	0f 91       	pop	r16
    3f92:	ff 90       	pop	r15
    3f94:	ef 90       	pop	r14
    3f96:	08 95       	ret

00003f98 <f_sync>:
    3f98:	0f 93       	push	r16
    3f9a:	1f 93       	push	r17
    3f9c:	cf 93       	push	r28
    3f9e:	df 93       	push	r29
    3fa0:	ec 01       	movw	r28, r24
    3fa2:	0e 94 b1 10 	call	0x2162	; 0x2162 <validate>
    3fa6:	81 11       	cpse	r24, r1
    3fa8:	b5 c0       	rjmp	.+362    	; 0x4114 <__stack+0x15>
    3faa:	8c 81       	ldd	r24, Y+4	; 0x04
    3fac:	85 ff       	sbrs	r24, 5
    3fae:	b4 c0       	rjmp	.+360    	; 0x4118 <__stack+0x19>
    3fb0:	86 ff       	sbrs	r24, 6
    3fb2:	13 c0       	rjmp	.+38     	; 0x3fda <f_sync+0x42>
    3fb4:	2e 89       	ldd	r18, Y+22	; 0x16
    3fb6:	3f 89       	ldd	r19, Y+23	; 0x17
    3fb8:	48 8d       	ldd	r20, Y+24	; 0x18
    3fba:	59 8d       	ldd	r21, Y+25	; 0x19
    3fbc:	e8 81       	ld	r30, Y
    3fbe:	f9 81       	ldd	r31, Y+1	; 0x01
    3fc0:	01 e0       	ldi	r16, 0x01	; 1
    3fc2:	10 e0       	ldi	r17, 0x00	; 0
    3fc4:	be 01       	movw	r22, r28
    3fc6:	60 5e       	subi	r22, 0xE0	; 224
    3fc8:	7f 4f       	sbci	r23, 0xFF	; 255
    3fca:	81 81       	ldd	r24, Z+1	; 0x01
    3fcc:	0e 94 bc 08 	call	0x1178	; 0x1178 <disk_write>
    3fd0:	81 11       	cpse	r24, r1
    3fd2:	a4 c0       	rjmp	.+328    	; 0x411c <__stack+0x1d>
    3fd4:	8c 81       	ldd	r24, Y+4	; 0x04
    3fd6:	8f 7b       	andi	r24, 0xBF	; 191
    3fd8:	8c 83       	std	Y+4, r24	; 0x04
    3fda:	4a 8d       	ldd	r20, Y+26	; 0x1a
    3fdc:	5b 8d       	ldd	r21, Y+27	; 0x1b
    3fde:	6c 8d       	ldd	r22, Y+28	; 0x1c
    3fe0:	7d 8d       	ldd	r23, Y+29	; 0x1d
    3fe2:	88 81       	ld	r24, Y
    3fe4:	99 81       	ldd	r25, Y+1	; 0x01
    3fe6:	0e 94 0d 10 	call	0x201a	; 0x201a <move_window>
    3fea:	81 11       	cpse	r24, r1
    3fec:	99 c0       	rjmp	.+306    	; 0x4120 <__stack+0x21>
    3fee:	0e 8d       	ldd	r16, Y+30	; 0x1e
    3ff0:	1f 8d       	ldd	r17, Y+31	; 0x1f
    3ff2:	f8 01       	movw	r30, r16
    3ff4:	83 85       	ldd	r24, Z+11	; 0x0b
    3ff6:	80 62       	ori	r24, 0x20	; 32
    3ff8:	83 87       	std	Z+11, r24	; 0x0b
    3ffa:	8a 85       	ldd	r24, Y+10	; 0x0a
    3ffc:	84 8f       	std	Z+28, r24	; 0x1c
    3ffe:	8b 85       	ldd	r24, Y+11	; 0x0b
    4000:	85 8f       	std	Z+29, r24	; 0x1d
    4002:	8c 85       	ldd	r24, Y+12	; 0x0c
    4004:	86 8f       	std	Z+30, r24	; 0x1e
    4006:	8d 85       	ldd	r24, Y+13	; 0x0d
    4008:	87 8f       	std	Z+31, r24	; 0x1f
    400a:	8e 85       	ldd	r24, Y+14	; 0x0e
    400c:	9f 85       	ldd	r25, Y+15	; 0x0f
    400e:	a8 89       	ldd	r26, Y+16	; 0x10
    4010:	b9 89       	ldd	r27, Y+17	; 0x11
    4012:	82 8f       	std	Z+26, r24	; 0x1a
    4014:	93 8f       	std	Z+27, r25	; 0x1b
    4016:	cd 01       	movw	r24, r26
    4018:	aa 27       	eor	r26, r26
    401a:	bb 27       	eor	r27, r27
    401c:	84 8b       	std	Z+20, r24	; 0x14
    401e:	95 8b       	std	Z+21, r25	; 0x15
    4020:	0e 94 aa 2c 	call	0x5954	; 0x5954 <get_fattime>
    4024:	f8 01       	movw	r30, r16
    4026:	66 8b       	std	Z+22, r22	; 0x16
    4028:	77 8b       	std	Z+23, r23	; 0x17
    402a:	80 8f       	std	Z+24, r24	; 0x18
    402c:	91 8f       	std	Z+25, r25	; 0x19
    402e:	12 8a       	std	Z+18, r1	; 0x12
    4030:	13 8a       	std	Z+19, r1	; 0x13
    4032:	8c 81       	ldd	r24, Y+4	; 0x04
    4034:	8f 7d       	andi	r24, 0xDF	; 223
    4036:	8c 83       	std	Y+4, r24	; 0x04
    4038:	e8 81       	ld	r30, Y
    403a:	f9 81       	ldd	r31, Y+1	; 0x01
    403c:	81 e0       	ldi	r24, 0x01	; 1
    403e:	84 83       	std	Z+4, r24	; 0x04
    4040:	09 90       	ld	r0, Y+
    4042:	d8 81       	ld	r29, Y
    4044:	c0 2d       	mov	r28, r0
    4046:	ce 01       	movw	r24, r28
    4048:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <sync_window>
    404c:	81 11       	cpse	r24, r1
    404e:	6a c0       	rjmp	.+212    	; 0x4124 <__stack+0x25>
    4050:	88 81       	ld	r24, Y
    4052:	83 30       	cpi	r24, 0x03	; 3
    4054:	09 f0       	breq	.+2      	; 0x4058 <f_sync+0xc0>
    4056:	53 c0       	rjmp	.+166    	; 0x40fe <f_sync+0x166>
    4058:	8d 81       	ldd	r24, Y+5	; 0x05
    405a:	81 30       	cpi	r24, 0x01	; 1
    405c:	09 f0       	breq	.+2      	; 0x4060 <f_sync+0xc8>
    405e:	4f c0       	rjmp	.+158    	; 0x40fe <f_sync+0x166>
    4060:	be 01       	movw	r22, r28
    4062:	62 5d       	subi	r22, 0xD2	; 210
    4064:	7f 4f       	sbci	r23, 0xFF	; 255
    4066:	fb 01       	movw	r30, r22
    4068:	ce 01       	movw	r24, r28
    406a:	82 5d       	subi	r24, 0xD2	; 210
    406c:	9d 4f       	sbci	r25, 0xFD	; 253
    406e:	11 92       	st	Z+, r1
    4070:	e8 17       	cp	r30, r24
    4072:	f9 07       	cpc	r31, r25
    4074:	e1 f7       	brne	.-8      	; 0x406e <f_sync+0xd6>
    4076:	85 e5       	ldi	r24, 0x55	; 85
    4078:	fe 01       	movw	r30, r28
    407a:	e4 5d       	subi	r30, 0xD4	; 212
    407c:	fd 4f       	sbci	r31, 0xFD	; 253
    407e:	80 83       	st	Z, r24
    4080:	8a ea       	ldi	r24, 0xAA	; 170
    4082:	31 96       	adiw	r30, 0x01	; 1
    4084:	80 83       	st	Z, r24
    4086:	82 e5       	ldi	r24, 0x52	; 82
    4088:	8e a7       	std	Y+46, r24	; 0x2e
    408a:	8f a7       	std	Y+47, r24	; 0x2f
    408c:	81 e6       	ldi	r24, 0x61	; 97
    408e:	88 ab       	std	Y+48, r24	; 0x30
    4090:	91 e4       	ldi	r25, 0x41	; 65
    4092:	99 ab       	std	Y+49, r25	; 0x31
    4094:	22 e7       	ldi	r18, 0x72	; 114
    4096:	7b 97       	sbiw	r30, 0x1b	; 27
    4098:	20 83       	st	Z, r18
    409a:	31 96       	adiw	r30, 0x01	; 1
    409c:	20 83       	st	Z, r18
    409e:	31 96       	adiw	r30, 0x01	; 1
    40a0:	90 83       	st	Z, r25
    40a2:	31 96       	adiw	r30, 0x01	; 1
    40a4:	80 83       	st	Z, r24
    40a6:	3e 85       	ldd	r19, Y+14	; 0x0e
    40a8:	2f 85       	ldd	r18, Y+15	; 0x0f
    40aa:	98 89       	ldd	r25, Y+16	; 0x10
    40ac:	89 89       	ldd	r24, Y+17	; 0x11
    40ae:	31 96       	adiw	r30, 0x01	; 1
    40b0:	30 83       	st	Z, r19
    40b2:	31 96       	adiw	r30, 0x01	; 1
    40b4:	20 83       	st	Z, r18
    40b6:	31 96       	adiw	r30, 0x01	; 1
    40b8:	90 83       	st	Z, r25
    40ba:	31 96       	adiw	r30, 0x01	; 1
    40bc:	80 83       	st	Z, r24
    40be:	3a 85       	ldd	r19, Y+10	; 0x0a
    40c0:	2b 85       	ldd	r18, Y+11	; 0x0b
    40c2:	9c 85       	ldd	r25, Y+12	; 0x0c
    40c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    40c6:	31 96       	adiw	r30, 0x01	; 1
    40c8:	30 83       	st	Z, r19
    40ca:	31 96       	adiw	r30, 0x01	; 1
    40cc:	20 83       	st	Z, r18
    40ce:	31 96       	adiw	r30, 0x01	; 1
    40d0:	90 83       	st	Z, r25
    40d2:	31 96       	adiw	r30, 0x01	; 1
    40d4:	80 83       	st	Z, r24
    40d6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    40d8:	9b 8d       	ldd	r25, Y+27	; 0x1b
    40da:	ac 8d       	ldd	r26, Y+28	; 0x1c
    40dc:	bd 8d       	ldd	r27, Y+29	; 0x1d
    40de:	9c 01       	movw	r18, r24
    40e0:	ad 01       	movw	r20, r26
    40e2:	2f 5f       	subi	r18, 0xFF	; 255
    40e4:	3f 4f       	sbci	r19, 0xFF	; 255
    40e6:	4f 4f       	sbci	r20, 0xFF	; 255
    40e8:	5f 4f       	sbci	r21, 0xFF	; 255
    40ea:	2a a7       	std	Y+42, r18	; 0x2a
    40ec:	3b a7       	std	Y+43, r19	; 0x2b
    40ee:	4c a7       	std	Y+44, r20	; 0x2c
    40f0:	5d a7       	std	Y+45, r21	; 0x2d
    40f2:	01 e0       	ldi	r16, 0x01	; 1
    40f4:	10 e0       	ldi	r17, 0x00	; 0
    40f6:	89 81       	ldd	r24, Y+1	; 0x01
    40f8:	0e 94 bc 08 	call	0x1178	; 0x1178 <disk_write>
    40fc:	1d 82       	std	Y+5, r1	; 0x05
    40fe:	40 e0       	ldi	r20, 0x00	; 0
    4100:	50 e0       	ldi	r21, 0x00	; 0
    4102:	60 e0       	ldi	r22, 0x00	; 0
    4104:	89 81       	ldd	r24, Y+1	; 0x01
    4106:	0e 94 2a 09 	call	0x1254	; 0x1254 <disk_ioctl>
    410a:	91 e0       	ldi	r25, 0x01	; 1
    410c:	81 11       	cpse	r24, r1
    410e:	0b c0       	rjmp	.+22     	; 0x4126 <__stack+0x27>
    4110:	90 e0       	ldi	r25, 0x00	; 0
    4112:	09 c0       	rjmp	.+18     	; 0x4126 <__stack+0x27>
    4114:	98 2f       	mov	r25, r24
    4116:	07 c0       	rjmp	.+14     	; 0x4126 <__stack+0x27>
    4118:	90 e0       	ldi	r25, 0x00	; 0
    411a:	05 c0       	rjmp	.+10     	; 0x4126 <__stack+0x27>
    411c:	91 e0       	ldi	r25, 0x01	; 1
    411e:	03 c0       	rjmp	.+6      	; 0x4126 <__stack+0x27>
    4120:	98 2f       	mov	r25, r24
    4122:	01 c0       	rjmp	.+2      	; 0x4126 <__stack+0x27>
    4124:	98 2f       	mov	r25, r24
    4126:	89 2f       	mov	r24, r25
    4128:	df 91       	pop	r29
    412a:	cf 91       	pop	r28
    412c:	1f 91       	pop	r17
    412e:	0f 91       	pop	r16
    4130:	08 95       	ret

00004132 <f_close>:
    4132:	cf 93       	push	r28
    4134:	df 93       	push	r29
    4136:	ec 01       	movw	r28, r24
    4138:	2f df       	rcall	.-418    	; 0x3f98 <f_sync>
    413a:	81 11       	cpse	r24, r1
    413c:	07 c0       	rjmp	.+14     	; 0x414c <f_close+0x1a>
    413e:	ce 01       	movw	r24, r28
    4140:	0e 94 b1 10 	call	0x2162	; 0x2162 <validate>
    4144:	81 11       	cpse	r24, r1
    4146:	02 c0       	rjmp	.+4      	; 0x414c <f_close+0x1a>
    4148:	19 82       	std	Y+1, r1	; 0x01
    414a:	18 82       	st	Y, r1
    414c:	df 91       	pop	r29
    414e:	cf 91       	pop	r28
    4150:	08 95       	ret

00004152 <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
    4152:	2f 92       	push	r2
    4154:	3f 92       	push	r3
    4156:	4f 92       	push	r4
    4158:	5f 92       	push	r5
    415a:	6f 92       	push	r6
    415c:	7f 92       	push	r7
    415e:	8f 92       	push	r8
    4160:	9f 92       	push	r9
    4162:	af 92       	push	r10
    4164:	bf 92       	push	r11
    4166:	cf 92       	push	r12
    4168:	df 92       	push	r13
    416a:	ef 92       	push	r14
    416c:	ff 92       	push	r15
    416e:	0f 93       	push	r16
    4170:	1f 93       	push	r17
    4172:	cf 93       	push	r28
    4174:	df 93       	push	r29
    4176:	cd b7       	in	r28, 0x3d	; 61
    4178:	de b7       	in	r29, 0x3e	; 62
    417a:	cc 55       	subi	r28, 0x5C	; 92
    417c:	d1 09       	sbc	r29, r1
    417e:	0f b6       	in	r0, 0x3f	; 63
    4180:	f8 94       	cli
    4182:	de bf       	out	0x3e, r29	; 62
    4184:	0f be       	out	0x3f, r0	; 63
    4186:	cd bf       	out	0x3d, r28	; 61
    4188:	e5 96       	adiw	r28, 0x35	; 53
    418a:	ee ac       	ldd	r14, Y+62	; 0x3e
    418c:	ff ac       	ldd	r15, Y+63	; 0x3f
    418e:	e5 97       	sbiw	r28, 0x35	; 53
	DWORD v;
	TCHAR c, d, s[16], *p;
	putbuff pb;


	pb.fp = fp;				/* Initialize output buffer */
    4190:	e3 96       	adiw	r28, 0x33	; 51
    4192:	8e ad       	ldd	r24, Y+62	; 0x3e
    4194:	9f ad       	ldd	r25, Y+63	; 0x3f
    4196:	e3 97       	sbiw	r28, 0x33	; 51
    4198:	9c 8b       	std	Y+20, r25	; 0x14
    419a:	8b 8b       	std	Y+19, r24	; 0x13
	pb.nchr = pb.idx = 0;
    419c:	1e 8a       	std	Y+22, r1	; 0x16
    419e:	1d 8a       	std	Y+21, r1	; 0x15
    41a0:	18 8e       	std	Y+24, r1	; 0x18
    41a2:	1f 8a       	std	Y+23, r1	; 0x17

	va_start(arp, fmt);
    41a4:	2e 01       	movw	r4, r28
    41a6:	25 e7       	ldi	r18, 0x75	; 117
    41a8:	42 0e       	add	r4, r18
    41aa:	51 1c       	adc	r5, r1
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
		if (d == 'D' && (v & 0x80000000)) {
			v = 0 - v;
			f |= 8;
		}
		i = 0;
    41ac:	21 2c       	mov	r2, r1
		do {
			d = (TCHAR)(v % r); v /= r;
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
    41ae:	0f 2e       	mov	r0, r31
    41b0:	f7 e0       	ldi	r31, 0x07	; 7
    41b2:	3f 2e       	mov	r3, r31
    41b4:	f0 2d       	mov	r31, r0
	pb.nchr = pb.idx = 0;

	va_start(arp, fmt);

	for (;;) {
		c = *fmt++;
    41b6:	d7 01       	movw	r26, r14
    41b8:	6c 91       	ld	r22, X
		if (c == 0) break;			/* End of string */
    41ba:	66 23       	and	r22, r22
    41bc:	09 f4       	brne	.+2      	; 0x41c0 <f_printf+0x6e>
    41be:	8e c1       	rjmp	.+796    	; 0x44dc <f_printf+0x38a>
		if (c != '%') {				/* Non escape character */
    41c0:	65 32       	cpi	r22, 0x25	; 37
    41c2:	39 f0       	breq	.+14     	; 0x41d2 <f_printf+0x80>
	pb.nchr = pb.idx = 0;

	va_start(arp, fmt);

	for (;;) {
		c = *fmt++;
    41c4:	bf ef       	ldi	r27, 0xFF	; 255
    41c6:	eb 1a       	sub	r14, r27
    41c8:	fb 0a       	sbc	r15, r27
		if (c == 0) break;			/* End of string */
		if (c != '%') {				/* Non escape character */
			putc_bfd(&pb, c);
    41ca:	ce 01       	movw	r24, r28
    41cc:	43 96       	adiw	r24, 0x13	; 19
    41ce:	a0 de       	rcall	.-704    	; 0x3f10 <putc_bfd>
			continue;
    41d0:	f2 cf       	rjmp	.-28     	; 0x41b6 <f_printf+0x64>
		}
		w = f = 0;
		c = *fmt++;
    41d2:	f7 01       	movw	r30, r14
    41d4:	d1 80       	ldd	r13, Z+1	; 0x01
		if (c == '0') {				/* Flag: '0' padding */
    41d6:	f0 e3       	ldi	r31, 0x30	; 48
    41d8:	df 12       	cpse	r13, r31
    41da:	09 c0       	rjmp	.+18     	; 0x41ee <f_printf+0x9c>
			f = 1; c = *fmt++;
    41dc:	d7 01       	movw	r26, r14
    41de:	12 96       	adiw	r26, 0x02	; 2
    41e0:	dc 90       	ld	r13, X
    41e2:	f7 01       	movw	r30, r14
    41e4:	33 96       	adiw	r30, 0x03	; 3
    41e6:	7f 01       	movw	r14, r30
    41e8:	77 24       	eor	r7, r7
    41ea:	73 94       	inc	r7
    41ec:	11 c0       	rjmp	.+34     	; 0x4210 <f_printf+0xbe>
		} else {
			if (c == '-') {			/* Flag: left justified */
    41ee:	fd e2       	ldi	r31, 0x2D	; 45
    41f0:	df 16       	cp	r13, r31
    41f2:	29 f0       	breq	.+10     	; 0x41fe <f_printf+0xac>
		if (c != '%') {				/* Non escape character */
			putc_bfd(&pb, c);
			continue;
		}
		w = f = 0;
		c = *fmt++;
    41f4:	22 e0       	ldi	r18, 0x02	; 2
    41f6:	e2 0e       	add	r14, r18
    41f8:	f1 1c       	adc	r15, r1
		if (c == 0) break;			/* End of string */
		if (c != '%') {				/* Non escape character */
			putc_bfd(&pb, c);
			continue;
		}
		w = f = 0;
    41fa:	71 2c       	mov	r7, r1
    41fc:	09 c0       	rjmp	.+18     	; 0x4210 <f_printf+0xbe>
		c = *fmt++;
		if (c == '0') {				/* Flag: '0' padding */
			f = 1; c = *fmt++;
		} else {
			if (c == '-') {			/* Flag: left justified */
				f = 2; c = *fmt++;
    41fe:	d7 01       	movw	r26, r14
    4200:	12 96       	adiw	r26, 0x02	; 2
    4202:	dc 90       	ld	r13, X
    4204:	f7 01       	movw	r30, r14
    4206:	33 96       	adiw	r30, 0x03	; 3
    4208:	7f 01       	movw	r14, r30
    420a:	68 94       	set
    420c:	77 24       	eor	r7, r7
    420e:	71 f8       	bld	r7, 1
			}
		}
		while (IsDigit(c)) {		/* Precision */
    4210:	80 ed       	ldi	r24, 0xD0	; 208
    4212:	8d 0d       	add	r24, r13
    4214:	8a 30       	cpi	r24, 0x0A	; 10
    4216:	f0 f4       	brcc	.+60     	; 0x4254 <f_printf+0x102>
    4218:	02 2d       	mov	r16, r2
    421a:	10 e0       	ldi	r17, 0x00	; 0
    421c:	8d 2d       	mov	r24, r13
			w = w * 10 + c - '0';
    421e:	98 01       	movw	r18, r16
    4220:	22 0f       	add	r18, r18
    4222:	33 1f       	adc	r19, r19
    4224:	00 0f       	add	r16, r16
    4226:	11 1f       	adc	r17, r17
    4228:	00 0f       	add	r16, r16
    422a:	11 1f       	adc	r17, r17
    422c:	00 0f       	add	r16, r16
    422e:	11 1f       	adc	r17, r17
    4230:	02 0f       	add	r16, r18
    4232:	13 1f       	adc	r17, r19
    4234:	08 0f       	add	r16, r24
    4236:	11 1d       	adc	r17, r1
    4238:	00 53       	subi	r16, 0x30	; 48
    423a:	11 09       	sbc	r17, r1
			c = *fmt++;
    423c:	ff ef       	ldi	r31, 0xFF	; 255
    423e:	ef 1a       	sub	r14, r31
    4240:	ff 0a       	sbc	r15, r31
    4242:	f7 01       	movw	r30, r14
    4244:	31 97       	sbiw	r30, 0x01	; 1
    4246:	80 81       	ld	r24, Z
		} else {
			if (c == '-') {			/* Flag: left justified */
				f = 2; c = *fmt++;
			}
		}
		while (IsDigit(c)) {		/* Precision */
    4248:	90 ed       	ldi	r25, 0xD0	; 208
    424a:	98 0f       	add	r25, r24
    424c:	9a 30       	cpi	r25, 0x0A	; 10
    424e:	38 f3       	brcs	.-50     	; 0x421e <f_printf+0xcc>
    4250:	d8 2e       	mov	r13, r24
    4252:	02 c0       	rjmp	.+4      	; 0x4258 <f_printf+0x106>
    4254:	02 2d       	mov	r16, r2
    4256:	10 e0       	ldi	r17, 0x00	; 0
			w = w * 10 + c - '0';
			c = *fmt++;
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
    4258:	8d 2d       	mov	r24, r13
    425a:	8f 7d       	andi	r24, 0xDF	; 223
    425c:	8c 34       	cpi	r24, 0x4C	; 76
    425e:	41 f4       	brne	.+16     	; 0x4270 <f_printf+0x11e>
			f |= 4; c = *fmt++;
    4260:	27 2d       	mov	r18, r7
    4262:	24 60       	ori	r18, 0x04	; 4
    4264:	72 2e       	mov	r7, r18
    4266:	d7 01       	movw	r26, r14
    4268:	dc 90       	ld	r13, X
    426a:	f7 01       	movw	r30, r14
    426c:	31 96       	adiw	r30, 0x01	; 1
    426e:	7f 01       	movw	r14, r30
		}
		if (!c) break;
    4270:	dd 20       	and	r13, r13
    4272:	09 f4       	brne	.+2      	; 0x4276 <f_printf+0x124>
    4274:	33 c1       	rjmp	.+614    	; 0x44dc <f_printf+0x38a>
		d = c;
		if (IsLower(d)) d -= 0x20;
    4276:	8f e9       	ldi	r24, 0x9F	; 159
    4278:	8d 0d       	add	r24, r13
    427a:	8a 31       	cpi	r24, 0x1A	; 26
    427c:	18 f4       	brcc	.+6      	; 0x4284 <f_printf+0x132>
    427e:	30 ee       	ldi	r19, 0xE0	; 224
    4280:	3d 0d       	add	r19, r13
    4282:	01 c0       	rjmp	.+2      	; 0x4286 <f_printf+0x134>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
			f |= 4; c = *fmt++;
		}
		if (!c) break;
		d = c;
    4284:	3d 2d       	mov	r19, r13
		if (IsLower(d)) d -= 0x20;
		switch (d) {				/* Type is... */
    4286:	83 2f       	mov	r24, r19
    4288:	90 e0       	ldi	r25, 0x00	; 0
    428a:	fc 01       	movw	r30, r24
    428c:	e2 54       	subi	r30, 0x42	; 66
    428e:	f1 09       	sbc	r31, r1
    4290:	e7 31       	cpi	r30, 0x17	; 23
    4292:	f1 05       	cpc	r31, r1
    4294:	08 f0       	brcs	.+2      	; 0x4298 <f_printf+0x146>
    4296:	58 c0       	rjmp	.+176    	; 0x4348 <f_printf+0x1f6>
    4298:	e3 58       	subi	r30, 0x83	; 131
    429a:	ff 4f       	sbci	r31, 0xFF	; 255
    429c:	0c 94 ec 45 	jmp	0x8bd8	; 0x8bd8 <__tablejump2__>
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
    42a0:	f2 01       	movw	r30, r4
    42a2:	a0 80       	ld	r10, Z
    42a4:	b1 80       	ldd	r11, Z+1	; 0x01
    42a6:	f2 e0       	ldi	r31, 0x02	; 2
    42a8:	4f 0e       	add	r4, r31
    42aa:	51 1c       	adc	r5, r1
			for (j = 0; p[j]; j++) ;
    42ac:	d5 01       	movw	r26, r10
    42ae:	6c 91       	ld	r22, X
    42b0:	66 23       	and	r22, r22
    42b2:	09 f4       	brne	.+2      	; 0x42b6 <f_printf+0x164>
    42b4:	38 c1       	rjmp	.+624    	; 0x4526 <f_printf+0x3d4>
    42b6:	f5 01       	movw	r30, r10
    42b8:	31 96       	adiw	r30, 0x01	; 1
    42ba:	c2 2c       	mov	r12, r2
    42bc:	d1 2c       	mov	r13, r1
    42be:	bf ef       	ldi	r27, 0xFF	; 255
    42c0:	cb 1a       	sub	r12, r27
    42c2:	db 0a       	sbc	r13, r27
    42c4:	81 91       	ld	r24, Z+
    42c6:	81 11       	cpse	r24, r1
    42c8:	fa cf       	rjmp	.-12     	; 0x42be <f_printf+0x16c>
    42ca:	2a c1       	rjmp	.+596    	; 0x4520 <f_printf+0x3ce>
    42cc:	c2 2c       	mov	r12, r2
    42ce:	d1 2c       	mov	r13, r1
			if (!(f & 2)) {
				while (j++ < w) putc_bfd(&pb, ' ');
    42d0:	66 24       	eor	r6, r6
    42d2:	63 94       	inc	r6
    42d4:	71 2c       	mov	r7, r1
    42d6:	46 01       	movw	r8, r12
    42d8:	60 e2       	ldi	r22, 0x20	; 32
    42da:	ce 01       	movw	r24, r28
    42dc:	43 96       	adiw	r24, 0x13	; 19
    42de:	18 de       	rcall	.-976    	; 0x3f10 <putc_bfd>
    42e0:	ef ef       	ldi	r30, 0xFF	; 255
    42e2:	8e 1a       	sub	r8, r30
    42e4:	9e 0a       	sbc	r9, r30
    42e6:	80 16       	cp	r8, r16
    42e8:	91 06       	cpc	r9, r17
    42ea:	b0 f3       	brcs	.-20     	; 0x42d8 <f_printf+0x186>
    42ec:	93 01       	movw	r18, r6
    42ee:	2c 19       	sub	r18, r12
    42f0:	3d 09       	sbc	r19, r13
    42f2:	69 01       	movw	r12, r18
    42f4:	c0 0e       	add	r12, r16
    42f6:	d1 1e       	adc	r13, r17
			}
			while (*p) putc_bfd(&pb, *p++);
    42f8:	d5 01       	movw	r26, r10
    42fa:	6c 91       	ld	r22, X
    42fc:	66 23       	and	r22, r22
    42fe:	59 f0       	breq	.+22     	; 0x4316 <f_printf+0x1c4>
    4300:	bf ef       	ldi	r27, 0xFF	; 255
    4302:	ab 1a       	sub	r10, r27
    4304:	bb 0a       	sbc	r11, r27
    4306:	ce 01       	movw	r24, r28
    4308:	43 96       	adiw	r24, 0x13	; 19
    430a:	02 de       	rcall	.-1020   	; 0x3f10 <putc_bfd>
    430c:	f5 01       	movw	r30, r10
    430e:	61 91       	ld	r22, Z+
    4310:	5f 01       	movw	r10, r30
    4312:	61 11       	cpse	r22, r1
    4314:	f8 cf       	rjmp	.-16     	; 0x4306 <f_printf+0x1b4>
			while (j++ < w) putc_bfd(&pb, ' ');
    4316:	c0 16       	cp	r12, r16
    4318:	d1 06       	cpc	r13, r17
    431a:	08 f0       	brcs	.+2      	; 0x431e <f_printf+0x1cc>
    431c:	4c cf       	rjmp	.-360    	; 0x41b6 <f_printf+0x64>
    431e:	60 e2       	ldi	r22, 0x20	; 32
    4320:	ce 01       	movw	r24, r28
    4322:	43 96       	adiw	r24, 0x13	; 19
    4324:	f5 dd       	rcall	.-1046   	; 0x3f10 <putc_bfd>
    4326:	ff ef       	ldi	r31, 0xFF	; 255
    4328:	cf 1a       	sub	r12, r31
    432a:	df 0a       	sbc	r13, r31
    432c:	c0 16       	cp	r12, r16
    432e:	d1 06       	cpc	r13, r17
    4330:	b0 f3       	brcs	.-20     	; 0x431e <f_printf+0x1cc>
    4332:	41 cf       	rjmp	.-382    	; 0x41b6 <f_printf+0x64>
			continue;
		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
    4334:	82 01       	movw	r16, r4
    4336:	0e 5f       	subi	r16, 0xFE	; 254
    4338:	1f 4f       	sbci	r17, 0xFF	; 255
    433a:	d2 01       	movw	r26, r4
    433c:	6c 91       	ld	r22, X
    433e:	ce 01       	movw	r24, r28
    4340:	43 96       	adiw	r24, 0x13	; 19
    4342:	e6 dd       	rcall	.-1076   	; 0x3f10 <putc_bfd>
    4344:	28 01       	movw	r4, r16
    4346:	37 cf       	rjmp	.-402    	; 0x41b6 <f_printf+0x64>
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
		case 'X' :					/* Hexdecimal */
			r = 16; break;
		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
    4348:	6d 2d       	mov	r22, r13
    434a:	ce 01       	movw	r24, r28
    434c:	43 96       	adiw	r24, 0x13	; 19
    434e:	e0 dd       	rcall	.-1088   	; 0x3f10 <putc_bfd>
    4350:	32 cf       	rjmp	.-412    	; 0x41b6 <f_printf+0x64>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
    4352:	72 fe       	sbrs	r7, 2
    4354:	0e c0       	rjmp	.+28     	; 0x4372 <f_printf+0x220>
			r = 2; break;
		case 'O' :					/* Octal */
			r = 8; break;
		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
    4356:	aa e0       	ldi	r26, 0x0A	; 10
    4358:	01 c0       	rjmp	.+2      	; 0x435c <f_printf+0x20a>
		case 'X' :					/* Hexdecimal */
			r = 16; break;
    435a:	a0 e1       	ldi	r26, 0x10	; 16
		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
    435c:	f2 01       	movw	r30, r4
    435e:	60 81       	ld	r22, Z
    4360:	71 81       	ldd	r23, Z+1	; 0x01
    4362:	82 81       	ldd	r24, Z+2	; 0x02
    4364:	93 81       	ldd	r25, Z+3	; 0x03
    4366:	b4 e0       	ldi	r27, 0x04	; 4
    4368:	4b 0e       	add	r4, r27
    436a:	51 1c       	adc	r5, r1
		if (d == 'D' && (v & 0x80000000)) {
    436c:	34 34       	cpi	r19, 0x44	; 68
    436e:	31 f5       	brne	.+76     	; 0x43bc <f_printf+0x26a>
    4370:	19 c0       	rjmp	.+50     	; 0x43a4 <f_printf+0x252>
			r = 2; break;
		case 'O' :					/* Octal */
			r = 8; break;
		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
    4372:	aa e0       	ldi	r26, 0x0A	; 10
		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
    4374:	34 34       	cpi	r19, 0x44	; 68
    4376:	61 f4       	brne	.+24     	; 0x4390 <f_printf+0x23e>
    4378:	f2 01       	movw	r30, r4
    437a:	60 81       	ld	r22, Z
    437c:	71 81       	ldd	r23, Z+1	; 0x01
    437e:	07 2e       	mov	r0, r23
    4380:	00 0c       	add	r0, r0
    4382:	88 0b       	sbc	r24, r24
    4384:	99 0b       	sbc	r25, r25
    4386:	92 01       	movw	r18, r4
    4388:	2e 5f       	subi	r18, 0xFE	; 254
    438a:	3f 4f       	sbci	r19, 0xFF	; 255
    438c:	29 01       	movw	r4, r18
    438e:	0a c0       	rjmp	.+20     	; 0x43a4 <f_printf+0x252>
    4390:	f2 01       	movw	r30, r4
    4392:	60 81       	ld	r22, Z
    4394:	71 81       	ldd	r23, Z+1	; 0x01
    4396:	80 e0       	ldi	r24, 0x00	; 0
    4398:	90 e0       	ldi	r25, 0x00	; 0
    439a:	92 01       	movw	r18, r4
    439c:	2e 5f       	subi	r18, 0xFE	; 254
    439e:	3f 4f       	sbci	r19, 0xFF	; 255
    43a0:	29 01       	movw	r4, r18
    43a2:	0c c0       	rjmp	.+24     	; 0x43bc <f_printf+0x26a>
		if (d == 'D' && (v & 0x80000000)) {
    43a4:	99 23       	and	r25, r25
    43a6:	54 f4       	brge	.+20     	; 0x43bc <f_printf+0x26a>
			v = 0 - v;
    43a8:	90 95       	com	r25
    43aa:	80 95       	com	r24
    43ac:	70 95       	com	r23
    43ae:	61 95       	neg	r22
    43b0:	7f 4f       	sbci	r23, 0xFF	; 255
    43b2:	8f 4f       	sbci	r24, 0xFF	; 255
    43b4:	9f 4f       	sbci	r25, 0xFF	; 255
			f |= 8;
    43b6:	37 2d       	mov	r19, r7
    43b8:	38 60       	ori	r19, 0x08	; 8
    43ba:	73 2e       	mov	r7, r19
    43bc:	ae 01       	movw	r20, r28
    43be:	4d 5f       	subi	r20, 0xFD	; 253
    43c0:	5f 4f       	sbci	r21, 0xFF	; 255
    43c2:	5a 01       	movw	r10, r20
		}
		i = 0;
    43c4:	82 2c       	mov	r8, r2
    43c6:	91 2c       	mov	r9, r1
		do {
			d = (TCHAR)(v % r); v /= r;
    43c8:	2a 2f       	mov	r18, r26
    43ca:	30 e0       	ldi	r19, 0x00	; 0
    43cc:	40 e0       	ldi	r20, 0x00	; 0
    43ce:	50 e0       	ldi	r21, 0x00	; 0
    43d0:	6d 96       	adiw	r28, 0x1d	; 29
    43d2:	2c af       	std	Y+60, r18	; 0x3c
    43d4:	3d af       	std	Y+61, r19	; 0x3d
    43d6:	4e af       	std	Y+62, r20	; 0x3e
    43d8:	5f af       	std	Y+63, r21	; 0x3f
    43da:	6d 97       	sbiw	r28, 0x1d	; 29
    43dc:	97 01       	movw	r18, r14
    43de:	78 01       	movw	r14, r16
    43e0:	1d 2d       	mov	r17, r13
    43e2:	69 01       	movw	r12, r18
    43e4:	6d 96       	adiw	r28, 0x1d	; 29
    43e6:	2c ad       	ldd	r18, Y+60	; 0x3c
    43e8:	3d ad       	ldd	r19, Y+61	; 0x3d
    43ea:	4e ad       	ldd	r20, Y+62	; 0x3e
    43ec:	5f ad       	ldd	r21, Y+63	; 0x3f
    43ee:	6d 97       	sbiw	r28, 0x1d	; 29
    43f0:	0e 94 ae 45 	call	0x8b5c	; 0x8b5c <__udivmodsi4>
    43f4:	f6 2f       	mov	r31, r22
    43f6:	e6 2f       	mov	r30, r22
    43f8:	62 2f       	mov	r22, r18
    43fa:	73 2f       	mov	r23, r19
    43fc:	84 2f       	mov	r24, r20
    43fe:	95 2f       	mov	r25, r21
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
    4400:	fa 30       	cpi	r31, 0x0A	; 10
    4402:	30 f0       	brcs	.+12     	; 0x4410 <f_printf+0x2be>
    4404:	18 37       	cpi	r17, 0x78	; 120
    4406:	11 f0       	breq	.+4      	; 0x440c <f_printf+0x2ba>
    4408:	e3 2d       	mov	r30, r3
    440a:	01 c0       	rjmp	.+2      	; 0x440e <f_printf+0x2bc>
    440c:	e7 e2       	ldi	r30, 0x27	; 39
    440e:	ef 0f       	add	r30, r31
			s[i++] = d + '0';
    4410:	3f ef       	ldi	r19, 0xFF	; 255
    4412:	83 1a       	sub	r8, r19
    4414:	93 0a       	sbc	r9, r19
    4416:	e0 5d       	subi	r30, 0xD0	; 208
    4418:	d5 01       	movw	r26, r10
    441a:	ed 93       	st	X+, r30
    441c:	5d 01       	movw	r10, r26
		} while (v && i < sizeof s / sizeof s[0]);
    441e:	61 15       	cp	r22, r1
    4420:	71 05       	cpc	r23, r1
    4422:	81 05       	cpc	r24, r1
    4424:	91 05       	cpc	r25, r1
    4426:	21 f0       	breq	.+8      	; 0x4430 <f_printf+0x2de>
    4428:	b0 e1       	ldi	r27, 0x10	; 16
    442a:	8b 16       	cp	r8, r27
    442c:	91 04       	cpc	r9, r1
    442e:	d1 f6       	brne	.-76     	; 0x43e4 <f_printf+0x292>
    4430:	87 01       	movw	r16, r14
    4432:	76 01       	movw	r14, r12
		if (f & 8) s[i++] = '-';
    4434:	73 fe       	sbrs	r7, 3
    4436:	0c c0       	rjmp	.+24     	; 0x4450 <f_printf+0x2fe>
    4438:	e3 e0       	ldi	r30, 0x03	; 3
    443a:	f0 e0       	ldi	r31, 0x00	; 0
    443c:	ec 0f       	add	r30, r28
    443e:	fd 1f       	adc	r31, r29
    4440:	e8 0d       	add	r30, r8
    4442:	f9 1d       	adc	r31, r9
    4444:	2d e2       	ldi	r18, 0x2D	; 45
    4446:	20 83       	st	Z, r18
    4448:	a4 01       	movw	r20, r8
    444a:	4f 5f       	subi	r20, 0xFF	; 255
    444c:	5f 4f       	sbci	r21, 0xFF	; 255
    444e:	4a 01       	movw	r8, r20
		j = i; d = (f & 1) ? '0' : ' ';
    4450:	70 fc       	sbrc	r7, 0
    4452:	04 c0       	rjmp	.+8      	; 0x445c <f_printf+0x30a>
    4454:	68 94       	set
    4456:	66 24       	eor	r6, r6
    4458:	65 f8       	bld	r6, 5
    445a:	04 c0       	rjmp	.+8      	; 0x4464 <f_printf+0x312>
    445c:	0f 2e       	mov	r0, r31
    445e:	f0 e3       	ldi	r31, 0x30	; 48
    4460:	6f 2e       	mov	r6, r31
    4462:	f0 2d       	mov	r31, r0
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
    4464:	71 fc       	sbrc	r7, 1
    4466:	15 c0       	rjmp	.+42     	; 0x4492 <f_printf+0x340>
    4468:	64 01       	movw	r12, r8
    446a:	5f ef       	ldi	r21, 0xFF	; 255
    446c:	c5 1a       	sub	r12, r21
    446e:	d5 0a       	sbc	r13, r21
    4470:	80 16       	cp	r8, r16
    4472:	91 06       	cpc	r9, r17
    4474:	08 f4       	brcc	.+2      	; 0x4478 <f_printf+0x326>
    4476:	65 c0       	rjmp	.+202    	; 0x4542 <f_printf+0x3f0>
    4478:	0d c0       	rjmp	.+26     	; 0x4494 <f_printf+0x342>
    447a:	8f ef       	ldi	r24, 0xFF	; 255
    447c:	c8 1a       	sub	r12, r24
    447e:	d8 0a       	sbc	r13, r24
    4480:	c0 16       	cp	r12, r16
    4482:	d1 06       	cpc	r13, r17
    4484:	08 f4       	brcc	.+2      	; 0x4488 <f_printf+0x336>
    4486:	58 c0       	rjmp	.+176    	; 0x4538 <f_printf+0x3e6>
    4488:	68 01       	movw	r12, r16
    448a:	9f ef       	ldi	r25, 0xFF	; 255
    448c:	c9 1a       	sub	r12, r25
    448e:	d9 0a       	sbc	r13, r25
    4490:	01 c0       	rjmp	.+2      	; 0x4494 <f_printf+0x342>
			d = (TCHAR)(v % r); v /= r;
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
			s[i++] = d + '0';
		} while (v && i < sizeof s / sizeof s[0]);
		if (f & 8) s[i++] = '-';
		j = i; d = (f & 1) ? '0' : ' ';
    4492:	64 01       	movw	r12, r8
    4494:	0f 2e       	mov	r0, r31
    4496:	f3 e0       	ldi	r31, 0x03	; 3
    4498:	af 2e       	mov	r10, r31
    449a:	b1 2c       	mov	r11, r1
    449c:	f0 2d       	mov	r31, r0
    449e:	ac 0e       	add	r10, r28
    44a0:	bd 1e       	adc	r11, r29
    44a2:	a8 0c       	add	r10, r8
    44a4:	b9 1c       	adc	r11, r9
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
		do putc_bfd(&pb, s[--i]); while (i);
    44a6:	a1 e0       	ldi	r26, 0x01	; 1
    44a8:	8a 1a       	sub	r8, r26
    44aa:	91 08       	sbc	r9, r1
    44ac:	f5 01       	movw	r30, r10
    44ae:	62 91       	ld	r22, -Z
    44b0:	5f 01       	movw	r10, r30
    44b2:	ce 01       	movw	r24, r28
    44b4:	43 96       	adiw	r24, 0x13	; 19
    44b6:	2c dd       	rcall	.-1448   	; 0x3f10 <putc_bfd>
    44b8:	81 14       	cp	r8, r1
    44ba:	91 04       	cpc	r9, r1
    44bc:	a1 f7       	brne	.-24     	; 0x44a6 <f_printf+0x354>
		while (j++ < w) putc_bfd(&pb, d);
    44be:	c0 16       	cp	r12, r16
    44c0:	d1 06       	cpc	r13, r17
    44c2:	08 f0       	brcs	.+2      	; 0x44c6 <f_printf+0x374>
    44c4:	78 ce       	rjmp	.-784    	; 0x41b6 <f_printf+0x64>
    44c6:	66 2d       	mov	r22, r6
    44c8:	ce 01       	movw	r24, r28
    44ca:	43 96       	adiw	r24, 0x13	; 19
    44cc:	21 dd       	rcall	.-1470   	; 0x3f10 <putc_bfd>
    44ce:	ff ef       	ldi	r31, 0xFF	; 255
    44d0:	cf 1a       	sub	r12, r31
    44d2:	df 0a       	sbc	r13, r31
    44d4:	c0 16       	cp	r12, r16
    44d6:	d1 06       	cpc	r13, r17
    44d8:	b0 f3       	brcs	.-20     	; 0x44c6 <f_printf+0x374>
    44da:	6d ce       	rjmp	.-806    	; 0x41b6 <f_printf+0x64>
	}

	va_end(arp);

	if (   pb.idx >= 0		/* Flush buffered characters to the file */
    44dc:	4d 89       	ldd	r20, Y+21	; 0x15
    44de:	5e 89       	ldd	r21, Y+22	; 0x16
    44e0:	55 23       	and	r21, r21
    44e2:	ac f0       	brlt	.+42     	; 0x450e <f_printf+0x3bc>
		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
    44e4:	9e 01       	movw	r18, r28
    44e6:	2f 5f       	subi	r18, 0xFF	; 255
    44e8:	3f 4f       	sbci	r19, 0xFF	; 255
    44ea:	be 01       	movw	r22, r28
    44ec:	67 5e       	subi	r22, 0xE7	; 231
    44ee:	7f 4f       	sbci	r23, 0xFF	; 255
    44f0:	8b 89       	ldd	r24, Y+19	; 0x13
    44f2:	9c 89       	ldd	r25, Y+20	; 0x14
    44f4:	13 db       	rcall	.-2522   	; 0x3b1c <f_write>
    44f6:	81 11       	cpse	r24, r1
    44f8:	0d c0       	rjmp	.+26     	; 0x4514 <f_printf+0x3c2>
		&& (UINT)pb.idx == nw) return pb.nchr;
    44fa:	2d 89       	ldd	r18, Y+21	; 0x15
    44fc:	3e 89       	ldd	r19, Y+22	; 0x16
    44fe:	89 81       	ldd	r24, Y+1	; 0x01
    4500:	9a 81       	ldd	r25, Y+2	; 0x02
    4502:	28 17       	cp	r18, r24
    4504:	39 07       	cpc	r19, r25
    4506:	49 f4       	brne	.+18     	; 0x451a <f_printf+0x3c8>
    4508:	8f 89       	ldd	r24, Y+23	; 0x17
    450a:	98 8d       	ldd	r25, Y+24	; 0x18
    450c:	52 c0       	rjmp	.+164    	; 0x45b2 <f_printf+0x460>
	return EOF;
    450e:	8f ef       	ldi	r24, 0xFF	; 255
    4510:	9f ef       	ldi	r25, 0xFF	; 255
    4512:	4f c0       	rjmp	.+158    	; 0x45b2 <f_printf+0x460>
    4514:	8f ef       	ldi	r24, 0xFF	; 255
    4516:	9f ef       	ldi	r25, 0xFF	; 255
    4518:	4c c0       	rjmp	.+152    	; 0x45b2 <f_printf+0x460>
    451a:	8f ef       	ldi	r24, 0xFF	; 255
    451c:	9f ef       	ldi	r25, 0xFF	; 255
    451e:	49 c0       	rjmp	.+146    	; 0x45b2 <f_printf+0x460>
		if (IsLower(d)) d -= 0x20;
		switch (d) {				/* Type is... */
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
			for (j = 0; p[j]; j++) ;
			if (!(f & 2)) {
    4520:	71 fe       	sbrs	r7, 1
    4522:	19 c0       	rjmp	.+50     	; 0x4556 <f_printf+0x404>
    4524:	ed ce       	rjmp	.-550    	; 0x4300 <f_printf+0x1ae>
    4526:	71 fe       	sbrs	r7, 1
    4528:	1f c0       	rjmp	.+62     	; 0x4568 <f_printf+0x416>
		d = c;
		if (IsLower(d)) d -= 0x20;
		switch (d) {				/* Type is... */
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
			for (j = 0; p[j]; j++) ;
    452a:	c2 2c       	mov	r12, r2
    452c:	d1 2c       	mov	r13, r1
    452e:	f3 ce       	rjmp	.-538    	; 0x4316 <f_printf+0x1c4>
		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
    4530:	72 fc       	sbrc	r7, 2
    4532:	13 cf       	rjmp	.-474    	; 0x435a <f_printf+0x208>
			r = 8; break;
		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
		case 'X' :					/* Hexdecimal */
			r = 16; break;
    4534:	a0 e1       	ldi	r26, 0x10	; 16
    4536:	2c cf       	rjmp	.-424    	; 0x4390 <f_printf+0x23e>
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
			s[i++] = d + '0';
		} while (v && i < sizeof s / sizeof s[0]);
		if (f & 8) s[i++] = '-';
		j = i; d = (f & 1) ? '0' : ' ';
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
    4538:	66 2d       	mov	r22, r6
    453a:	ce 01       	movw	r24, r28
    453c:	43 96       	adiw	r24, 0x13	; 19
    453e:	e8 dc       	rcall	.-1584   	; 0x3f10 <putc_bfd>
    4540:	9c cf       	rjmp	.-200    	; 0x447a <f_printf+0x328>
    4542:	66 2d       	mov	r22, r6
    4544:	ce 01       	movw	r24, r28
    4546:	43 96       	adiw	r24, 0x13	; 19
    4548:	e3 dc       	rcall	.-1594   	; 0x3f10 <putc_bfd>
    454a:	64 01       	movw	r12, r8
    454c:	96 cf       	rjmp	.-212    	; 0x447a <f_printf+0x328>
			p = va_arg(arp, TCHAR*);
			for (j = 0; p[j]; j++) ;
			if (!(f & 2)) {
				while (j++ < w) putc_bfd(&pb, ' ');
			}
			while (*p) putc_bfd(&pb, *p++);
    454e:	d5 01       	movw	r26, r10
    4550:	6c 91       	ld	r22, X
		switch (d) {				/* Type is... */
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
			for (j = 0; p[j]; j++) ;
			if (!(f & 2)) {
				while (j++ < w) putc_bfd(&pb, ' ');
    4552:	63 01       	movw	r12, r6
    4554:	d5 ce       	rjmp	.-598    	; 0x4300 <f_printf+0x1ae>
    4556:	36 01       	movw	r6, r12
    4558:	bf ef       	ldi	r27, 0xFF	; 255
    455a:	6b 1a       	sub	r6, r27
    455c:	7b 0a       	sbc	r7, r27
    455e:	c0 16       	cp	r12, r16
    4560:	d1 06       	cpc	r13, r17
    4562:	08 f4       	brcc	.+2      	; 0x4566 <f_printf+0x414>
    4564:	b8 ce       	rjmp	.-656    	; 0x42d6 <f_printf+0x184>
    4566:	f3 cf       	rjmp	.-26     	; 0x454e <f_printf+0x3fc>
    4568:	01 15       	cp	r16, r1
    456a:	11 05       	cpc	r17, r1
    456c:	09 f0       	breq	.+2      	; 0x4570 <f_printf+0x41e>
    456e:	ae ce       	rjmp	.-676    	; 0x42cc <f_printf+0x17a>
    4570:	cc 24       	eor	r12, r12
    4572:	c3 94       	inc	r12
    4574:	d1 2c       	mov	r13, r1
    4576:	cf ce       	rjmp	.-610    	; 0x4316 <f_printf+0x1c4>
		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
    4578:	f2 01       	movw	r30, r4
    457a:	60 81       	ld	r22, Z
    457c:	71 81       	ldd	r23, Z+1	; 0x01
    457e:	82 81       	ldd	r24, Z+2	; 0x02
    4580:	93 81       	ldd	r25, Z+3	; 0x03
    4582:	92 01       	movw	r18, r4
    4584:	2c 5f       	subi	r18, 0xFC	; 252
    4586:	3f 4f       	sbci	r19, 0xFF	; 255
    4588:	29 01       	movw	r4, r18
			while (j++ < w) putc_bfd(&pb, ' ');
			continue;
		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
		case 'B' :					/* Binary */
			r = 2; break;
    458a:	a2 e0       	ldi	r26, 0x02	; 2
    458c:	17 cf       	rjmp	.-466    	; 0x43bc <f_printf+0x26a>
		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
    458e:	72 fc       	sbrc	r7, 2
    4590:	f3 cf       	rjmp	.-26     	; 0x4578 <f_printf+0x426>
			while (j++ < w) putc_bfd(&pb, ' ');
			continue;
		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
		case 'B' :					/* Binary */
			r = 2; break;
    4592:	a2 e0       	ldi	r26, 0x02	; 2
    4594:	ef ce       	rjmp	.-546    	; 0x4374 <f_printf+0x222>
		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
    4596:	d2 01       	movw	r26, r4
    4598:	6d 91       	ld	r22, X+
    459a:	7d 91       	ld	r23, X+
    459c:	8d 91       	ld	r24, X+
    459e:	9c 91       	ld	r25, X
    45a0:	f2 01       	movw	r30, r4
    45a2:	34 96       	adiw	r30, 0x04	; 4
    45a4:	2f 01       	movw	r4, r30
		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
		case 'B' :					/* Binary */
			r = 2; break;
		case 'O' :					/* Octal */
			r = 8; break;
    45a6:	a8 e0       	ldi	r26, 0x08	; 8
    45a8:	09 cf       	rjmp	.-494    	; 0x43bc <f_printf+0x26a>
		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
    45aa:	72 fc       	sbrc	r7, 2
    45ac:	f4 cf       	rjmp	.-24     	; 0x4596 <f_printf+0x444>
		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
		case 'B' :					/* Binary */
			r = 2; break;
		case 'O' :					/* Octal */
			r = 8; break;
    45ae:	a8 e0       	ldi	r26, 0x08	; 8
    45b0:	ef ce       	rjmp	.-546    	; 0x4390 <f_printf+0x23e>

	if (   pb.idx >= 0		/* Flush buffered characters to the file */
		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
		&& (UINT)pb.idx == nw) return pb.nchr;
	return EOF;
}
    45b2:	c4 5a       	subi	r28, 0xA4	; 164
    45b4:	df 4f       	sbci	r29, 0xFF	; 255
    45b6:	0f b6       	in	r0, 0x3f	; 63
    45b8:	f8 94       	cli
    45ba:	de bf       	out	0x3e, r29	; 62
    45bc:	0f be       	out	0x3f, r0	; 63
    45be:	cd bf       	out	0x3d, r28	; 61
    45c0:	df 91       	pop	r29
    45c2:	cf 91       	pop	r28
    45c4:	1f 91       	pop	r17
    45c6:	0f 91       	pop	r16
    45c8:	ff 90       	pop	r15
    45ca:	ef 90       	pop	r14
    45cc:	df 90       	pop	r13
    45ce:	cf 90       	pop	r12
    45d0:	bf 90       	pop	r11
    45d2:	af 90       	pop	r10
    45d4:	9f 90       	pop	r9
    45d6:	8f 90       	pop	r8
    45d8:	7f 90       	pop	r7
    45da:	6f 90       	pop	r6
    45dc:	5f 90       	pop	r5
    45de:	4f 90       	pop	r4
    45e0:	3f 90       	pop	r3
    45e2:	2f 90       	pop	r2
    45e4:	08 95       	ret

000045e6 <_ZN3I2CC1Ev>:
void I2C::twi_ack(){
	TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);
}
void I2C::twi_nack(){
	TWCR = (1<<TWINT) | (1<<TWEN);
	TWCR &= ~(1<<TWEA);
    45e6:	82 e0       	ldi	r24, 0x02	; 2
    45e8:	80 93 b8 00 	sts	0x00B8, r24
    45ec:	08 95       	ret

000045ee <_ZN3I2CD1Ev>:
    45ee:	08 95       	ret

000045f0 <_ZN3I2C9twi_startEv>:
    45f0:	84 ea       	ldi	r24, 0xA4	; 164
    45f2:	80 93 bc 00 	sts	0x00BC, r24
    45f6:	08 95       	ret

000045f8 <_ZN3I2C8twi_stopEv>:
    45f8:	84 e9       	ldi	r24, 0x94	; 148
    45fa:	80 93 bc 00 	sts	0x00BC, r24
    45fe:	08 95       	ret

00004600 <_ZN3I2C9twi_writeEh>:
}

void I2C::twi_write(uint8_t data){
	while(!(TWCR & (1<<TWINT)));
    4600:	ec eb       	ldi	r30, 0xBC	; 188
    4602:	f0 e0       	ldi	r31, 0x00	; 0
    4604:	80 81       	ld	r24, Z
    4606:	88 23       	and	r24, r24
    4608:	ec f7       	brge	.-6      	; 0x4604 <_ZN3I2C9twi_writeEh+0x4>
	TWDR = data;
    460a:	60 93 bb 00 	sts	0x00BB, r22
	TWCR = (1<<TWINT) | (1<<TWEN);
    460e:	84 e8       	ldi	r24, 0x84	; 132
    4610:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));
    4614:	ec eb       	ldi	r30, 0xBC	; 188
    4616:	f0 e0       	ldi	r31, 0x00	; 0
    4618:	80 81       	ld	r24, Z
    461a:	88 23       	and	r24, r24
    461c:	ec f7       	brge	.-6      	; 0x4618 <_ZN3I2C9twi_writeEh+0x18>
}
    461e:	08 95       	ret

00004620 <_ZN3I2C8twi_readEh>:

uint8_t I2C::twi_read(uint8_t ack){
	if (ack)
    4620:	66 23       	and	r22, r22
    4622:	21 f0       	breq	.+8      	; 0x462c <_ZN3I2C8twi_readEh+0xc>
	{
		TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    4624:	84 ec       	ldi	r24, 0xC4	; 196
    4626:	80 93 bc 00 	sts	0x00BC, r24
    462a:	03 c0       	rjmp	.+6      	; 0x4632 <_ZN3I2C8twi_readEh+0x12>
	}
	else{
		TWCR = (1<<TWINT) | (1<<TWEN);
    462c:	84 e8       	ldi	r24, 0x84	; 132
    462e:	80 93 bc 00 	sts	0x00BC, r24
	}
	
	while(!(TWCR & (1<<TWINT)));
    4632:	ec eb       	ldi	r30, 0xBC	; 188
    4634:	f0 e0       	ldi	r31, 0x00	; 0
    4636:	80 81       	ld	r24, Z
    4638:	88 23       	and	r24, r24
    463a:	ec f7       	brge	.-6      	; 0x4636 <_ZN3I2C8twi_readEh+0x16>
	return TWDR;
    463c:	80 91 bb 00 	lds	r24, 0x00BB
    4640:	08 95       	ret

00004642 <_ZN9InterfaceC1Ev>:
		default:
		abfrage = 0;
		break;
	}
	return abfrage;
}
    4642:	2a b1       	in	r18, 0x0a	; 10
    4644:	20 66       	ori	r18, 0x60	; 96
    4646:	2a b9       	out	0x0a, r18	; 10
    4648:	28 b1       	in	r18, 0x08	; 8
    464a:	23 7f       	andi	r18, 0xF3	; 243
    464c:	28 b9       	out	0x08, r18	; 8
    464e:	27 b1       	in	r18, 0x07	; 7
    4650:	2c 60       	ori	r18, 0x0C	; 12
    4652:	27 b9       	out	0x07, r18	; 7
    4654:	2a b1       	in	r18, 0x0a	; 10
    4656:	23 7e       	andi	r18, 0xE3	; 227
    4658:	2a b9       	out	0x0a, r18	; 10
    465a:	fc 01       	movw	r30, r24
    465c:	0c 96       	adiw	r24, 0x0c	; 12
    465e:	11 92       	st	Z+, r1
    4660:	e8 17       	cp	r30, r24
    4662:	f9 07       	cpc	r31, r25
    4664:	e1 f7       	brne	.-8      	; 0x465e <_ZN9InterfaceC1Ev+0x1c>
    4666:	08 95       	ret

00004668 <_ZN9InterfaceD1Ev>:
    4668:	08 95       	ret

0000466a <_ZN9Interface7paradebEPVhhPh>:
    466a:	fb 01       	movw	r30, r22
    466c:	80 81       	ld	r24, Z
    466e:	90 e0       	ldi	r25, 0x00	; 0
    4670:	04 2e       	mov	r0, r20
    4672:	02 c0       	rjmp	.+4      	; 0x4678 <_ZN9Interface7paradebEPVhhPh+0xe>
    4674:	95 95       	asr	r25
    4676:	87 95       	ror	r24
    4678:	0a 94       	dec	r0
    467a:	e2 f7       	brpl	.-8      	; 0x4674 <_ZN9Interface7paradebEPVhhPh+0xa>
    467c:	80 ff       	sbrs	r24, 0
    467e:	05 c0       	rjmp	.+10     	; 0x468a <_ZN9Interface7paradebEPVhhPh+0x20>
    4680:	81 e0       	ldi	r24, 0x01	; 1
    4682:	f9 01       	movw	r30, r18
    4684:	80 83       	st	Z, r24
    4686:	80 e0       	ldi	r24, 0x00	; 0
    4688:	08 95       	ret
    468a:	f9 01       	movw	r30, r18
    468c:	80 81       	ld	r24, Z
    468e:	81 30       	cpi	r24, 0x01	; 1
    4690:	71 f4       	brne	.+28     	; 0x46ae <_ZN9Interface7paradebEPVhhPh+0x44>
    4692:	fb 01       	movw	r30, r22
    4694:	60 81       	ld	r22, Z
    4696:	70 e0       	ldi	r23, 0x00	; 0
    4698:	fb 01       	movw	r30, r22
    469a:	02 c0       	rjmp	.+4      	; 0x46a0 <_ZN9Interface7paradebEPVhhPh+0x36>
    469c:	f5 95       	asr	r31
    469e:	e7 95       	ror	r30
    46a0:	4a 95       	dec	r20
    46a2:	e2 f7       	brpl	.-8      	; 0x469c <_ZN9Interface7paradebEPVhhPh+0x32>
    46a4:	e0 fd       	sbrc	r30, 0
    46a6:	03 c0       	rjmp	.+6      	; 0x46ae <_ZN9Interface7paradebEPVhhPh+0x44>
    46a8:	f9 01       	movw	r30, r18
    46aa:	10 82       	st	Z, r1
    46ac:	08 95       	ret
    46ae:	f9 01       	movw	r30, r18
    46b0:	10 82       	st	Z, r1
    46b2:	80 e0       	ldi	r24, 0x00	; 0
    46b4:	08 95       	ret

000046b6 <_ZN9Interface6TasterEv>:

uint8_t Interface::Taster(){
    46b6:	1f 93       	push	r17
    46b8:	cf 93       	push	r28
    46ba:	df 93       	push	r29
    46bc:	ec 01       	movw	r28, r24
	uint8_t taste = ' ';
	
	//erste Zeile
	PORTC |= (1<<PORTC3);
    46be:	43 9a       	sbi	0x08, 3	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    46c0:	82 e0       	ldi	r24, 0x02	; 2
    46c2:	8a 95       	dec	r24
    46c4:	f1 f7       	brne	.-4      	; 0x46c2 <_ZN9Interface6TasterEv+0xc>
    46c6:	00 c0       	rjmp	.+0      	; 0x46c8 <_ZN9Interface6TasterEv+0x12>
	_delay_us(1);
	if(paradeb(&PIND,PIND4,&stat[2])){//debounce(&PIND,PIND4)){
    46c8:	9e 01       	movw	r18, r28
    46ca:	2e 5f       	subi	r18, 0xFE	; 254
    46cc:	3f 4f       	sbci	r19, 0xFF	; 255
    46ce:	44 e0       	ldi	r20, 0x04	; 4
    46d0:	69 e2       	ldi	r22, 0x29	; 41
    46d2:	70 e0       	ldi	r23, 0x00	; 0
    46d4:	ce 01       	movw	r24, r28
    46d6:	c9 df       	rcall	.-110    	; 0x466a <_ZN9Interface7paradebEPVhhPh>
    46d8:	81 11       	cpse	r24, r1
    46da:	14 c0       	rjmp	.+40     	; 0x4704 <_ZN9Interface6TasterEv+0x4e>
		taste = '3';
	}
	else if (paradeb(&PIND,PIND3,&stat[1]))//debounce(&PIND,PIND3))
    46dc:	9e 01       	movw	r18, r28
    46de:	2f 5f       	subi	r18, 0xFF	; 255
    46e0:	3f 4f       	sbci	r19, 0xFF	; 255
    46e2:	43 e0       	ldi	r20, 0x03	; 3
    46e4:	69 e2       	ldi	r22, 0x29	; 41
    46e6:	70 e0       	ldi	r23, 0x00	; 0
    46e8:	ce 01       	movw	r24, r28
    46ea:	bf df       	rcall	.-130    	; 0x466a <_ZN9Interface7paradebEPVhhPh>
    46ec:	81 11       	cpse	r24, r1
    46ee:	0c c0       	rjmp	.+24     	; 0x4708 <_ZN9Interface6TasterEv+0x52>
	{
		taste = '2';
	}
	else if (paradeb(&PIND,PIND2,&stat[0]))//debounce(&PIND,PIND2))
    46f0:	9e 01       	movw	r18, r28
    46f2:	42 e0       	ldi	r20, 0x02	; 2
    46f4:	69 e2       	ldi	r22, 0x29	; 41
    46f6:	70 e0       	ldi	r23, 0x00	; 0
    46f8:	ce 01       	movw	r24, r28
    46fa:	b7 df       	rcall	.-146    	; 0x466a <_ZN9Interface7paradebEPVhhPh>
    46fc:	88 23       	and	r24, r24
    46fe:	31 f0       	breq	.+12     	; 0x470c <_ZN9Interface6TasterEv+0x56>
	{
		taste = '1';
    4700:	11 e3       	ldi	r17, 0x31	; 49
    4702:	05 c0       	rjmp	.+10     	; 0x470e <_ZN9Interface6TasterEv+0x58>
	
	//erste Zeile
	PORTC |= (1<<PORTC3);
	_delay_us(1);
	if(paradeb(&PIND,PIND4,&stat[2])){//debounce(&PIND,PIND4)){
		taste = '3';
    4704:	13 e3       	ldi	r17, 0x33	; 51
    4706:	03 c0       	rjmp	.+6      	; 0x470e <_ZN9Interface6TasterEv+0x58>
	}
	else if (paradeb(&PIND,PIND3,&stat[1]))//debounce(&PIND,PIND3))
	{
		taste = '2';
    4708:	12 e3       	ldi	r17, 0x32	; 50
    470a:	01 c0       	rjmp	.+2      	; 0x470e <_ZN9Interface6TasterEv+0x58>
	}
	return abfrage;
}

uint8_t Interface::Taster(){
	uint8_t taste = ' ';
    470c:	10 e2       	ldi	r17, 0x20	; 32
	}
	else if (paradeb(&PIND,PIND2,&stat[0]))//debounce(&PIND,PIND2))
	{
		taste = '1';
	}
	PORTC &= ~(1<<PORTC3);
    470e:	43 98       	cbi	0x08, 3	; 8
	
	//zweite Zeile
	PORTC |= (1<<PORTC2);
    4710:	42 9a       	sbi	0x08, 2	; 8
    4712:	82 e0       	ldi	r24, 0x02	; 2
    4714:	8a 95       	dec	r24
    4716:	f1 f7       	brne	.-4      	; 0x4714 <_ZN9Interface6TasterEv+0x5e>
    4718:	00 c0       	rjmp	.+0      	; 0x471a <_ZN9Interface6TasterEv+0x64>
	_delay_us(1);
	if(paradeb(&PIND,PIND4,&stat[5])){//debounce(&PIND,PIND4)){
    471a:	9e 01       	movw	r18, r28
    471c:	2b 5f       	subi	r18, 0xFB	; 251
    471e:	3f 4f       	sbci	r19, 0xFF	; 255
    4720:	44 e0       	ldi	r20, 0x04	; 4
    4722:	69 e2       	ldi	r22, 0x29	; 41
    4724:	70 e0       	ldi	r23, 0x00	; 0
    4726:	ce 01       	movw	r24, r28
    4728:	a0 df       	rcall	.-192    	; 0x466a <_ZN9Interface7paradebEPVhhPh>
    472a:	81 11       	cpse	r24, r1
    472c:	16 c0       	rjmp	.+44     	; 0x475a <_ZN9Interface6TasterEv+0xa4>
		taste = '6';
	}
	else if (paradeb(&PIND,PIND3,&stat[4]))//debounce(&PIND,PIND3))
    472e:	9e 01       	movw	r18, r28
    4730:	2c 5f       	subi	r18, 0xFC	; 252
    4732:	3f 4f       	sbci	r19, 0xFF	; 255
    4734:	43 e0       	ldi	r20, 0x03	; 3
    4736:	69 e2       	ldi	r22, 0x29	; 41
    4738:	70 e0       	ldi	r23, 0x00	; 0
    473a:	ce 01       	movw	r24, r28
    473c:	96 df       	rcall	.-212    	; 0x466a <_ZN9Interface7paradebEPVhhPh>
    473e:	81 11       	cpse	r24, r1
    4740:	0e c0       	rjmp	.+28     	; 0x475e <_ZN9Interface6TasterEv+0xa8>
	{
		taste = '5';
	}
	else if (paradeb(&PIND,PIND2,&stat[3]))//debounce(&PIND,PIND2))
    4742:	9e 01       	movw	r18, r28
    4744:	2d 5f       	subi	r18, 0xFD	; 253
    4746:	3f 4f       	sbci	r19, 0xFF	; 255
    4748:	42 e0       	ldi	r20, 0x02	; 2
    474a:	69 e2       	ldi	r22, 0x29	; 41
    474c:	70 e0       	ldi	r23, 0x00	; 0
    474e:	ce 01       	movw	r24, r28
    4750:	8c df       	rcall	.-232    	; 0x466a <_ZN9Interface7paradebEPVhhPh>
    4752:	88 23       	and	r24, r24
    4754:	29 f0       	breq	.+10     	; 0x4760 <_ZN9Interface6TasterEv+0xaa>
	{
		taste = '4';
    4756:	14 e3       	ldi	r17, 0x34	; 52
    4758:	03 c0       	rjmp	.+6      	; 0x4760 <_ZN9Interface6TasterEv+0xaa>
	
	//zweite Zeile
	PORTC |= (1<<PORTC2);
	_delay_us(1);
	if(paradeb(&PIND,PIND4,&stat[5])){//debounce(&PIND,PIND4)){
		taste = '6';
    475a:	16 e3       	ldi	r17, 0x36	; 54
    475c:	01 c0       	rjmp	.+2      	; 0x4760 <_ZN9Interface6TasterEv+0xaa>
	}
	else if (paradeb(&PIND,PIND3,&stat[4]))//debounce(&PIND,PIND3))
	{
		taste = '5';
    475e:	15 e3       	ldi	r17, 0x35	; 53
	}
	else if (paradeb(&PIND,PIND2,&stat[3]))//debounce(&PIND,PIND2))
	{
		taste = '4';
	}
	PORTC &= ~(1<<PORTC2);
    4760:	42 98       	cbi	0x08, 2	; 8
	
	//dritte Zeile
	PORTD |= (1<<PORTD6);
    4762:	5e 9a       	sbi	0x0b, 6	; 11
    4764:	82 e0       	ldi	r24, 0x02	; 2
    4766:	8a 95       	dec	r24
    4768:	f1 f7       	brne	.-4      	; 0x4766 <_ZN9Interface6TasterEv+0xb0>
    476a:	00 c0       	rjmp	.+0      	; 0x476c <_ZN9Interface6TasterEv+0xb6>
	_delay_us(1);
	if(paradeb(&PIND,PIND4,&stat[8])){//debounce(&PIND,PIND4)){
    476c:	9e 01       	movw	r18, r28
    476e:	28 5f       	subi	r18, 0xF8	; 248
    4770:	3f 4f       	sbci	r19, 0xFF	; 255
    4772:	44 e0       	ldi	r20, 0x04	; 4
    4774:	69 e2       	ldi	r22, 0x29	; 41
    4776:	70 e0       	ldi	r23, 0x00	; 0
    4778:	ce 01       	movw	r24, r28
    477a:	77 df       	rcall	.-274    	; 0x466a <_ZN9Interface7paradebEPVhhPh>
    477c:	81 11       	cpse	r24, r1
    477e:	16 c0       	rjmp	.+44     	; 0x47ac <_ZN9Interface6TasterEv+0xf6>
		taste = '9';
	}
	else if (paradeb(&PIND,PIND3,&stat[7]))//debounce(&PIND,PIND3))
    4780:	9e 01       	movw	r18, r28
    4782:	29 5f       	subi	r18, 0xF9	; 249
    4784:	3f 4f       	sbci	r19, 0xFF	; 255
    4786:	43 e0       	ldi	r20, 0x03	; 3
    4788:	69 e2       	ldi	r22, 0x29	; 41
    478a:	70 e0       	ldi	r23, 0x00	; 0
    478c:	ce 01       	movw	r24, r28
    478e:	6d df       	rcall	.-294    	; 0x466a <_ZN9Interface7paradebEPVhhPh>
    4790:	81 11       	cpse	r24, r1
    4792:	0e c0       	rjmp	.+28     	; 0x47b0 <_ZN9Interface6TasterEv+0xfa>
	{
		taste = '8';
	}
	else if (paradeb(&PIND,PIND2,&stat[6]))//debounce(&PIND,PIND2))
    4794:	9e 01       	movw	r18, r28
    4796:	2a 5f       	subi	r18, 0xFA	; 250
    4798:	3f 4f       	sbci	r19, 0xFF	; 255
    479a:	42 e0       	ldi	r20, 0x02	; 2
    479c:	69 e2       	ldi	r22, 0x29	; 41
    479e:	70 e0       	ldi	r23, 0x00	; 0
    47a0:	ce 01       	movw	r24, r28
    47a2:	63 df       	rcall	.-314    	; 0x466a <_ZN9Interface7paradebEPVhhPh>
    47a4:	88 23       	and	r24, r24
    47a6:	29 f0       	breq	.+10     	; 0x47b2 <_ZN9Interface6TasterEv+0xfc>
	{
		taste = '7';
    47a8:	17 e3       	ldi	r17, 0x37	; 55
    47aa:	03 c0       	rjmp	.+6      	; 0x47b2 <_ZN9Interface6TasterEv+0xfc>
	
	//dritte Zeile
	PORTD |= (1<<PORTD6);
	_delay_us(1);
	if(paradeb(&PIND,PIND4,&stat[8])){//debounce(&PIND,PIND4)){
		taste = '9';
    47ac:	19 e3       	ldi	r17, 0x39	; 57
    47ae:	01 c0       	rjmp	.+2      	; 0x47b2 <_ZN9Interface6TasterEv+0xfc>
	}
	else if (paradeb(&PIND,PIND3,&stat[7]))//debounce(&PIND,PIND3))
	{
		taste = '8';
    47b0:	18 e3       	ldi	r17, 0x38	; 56
	}
	else if (paradeb(&PIND,PIND2,&stat[6]))//debounce(&PIND,PIND2))
	{
		taste = '7';
	}
	PORTD &= ~(1<<PORTD6);
    47b2:	5e 98       	cbi	0x0b, 6	; 11
	
	//vierte Zeile
	PORTD |= (1<<PORTD5);
    47b4:	5d 9a       	sbi	0x0b, 5	; 11
    47b6:	82 e0       	ldi	r24, 0x02	; 2
    47b8:	8a 95       	dec	r24
    47ba:	f1 f7       	brne	.-4      	; 0x47b8 <_ZN9Interface6TasterEv+0x102>
    47bc:	00 c0       	rjmp	.+0      	; 0x47be <_ZN9Interface6TasterEv+0x108>
	_delay_us(1);
	if(paradeb(&PIND,PIND4,&stat[11])){//debounce(&PIND,PIND4)){
    47be:	9e 01       	movw	r18, r28
    47c0:	25 5f       	subi	r18, 0xF5	; 245
    47c2:	3f 4f       	sbci	r19, 0xFF	; 255
    47c4:	44 e0       	ldi	r20, 0x04	; 4
    47c6:	69 e2       	ldi	r22, 0x29	; 41
    47c8:	70 e0       	ldi	r23, 0x00	; 0
    47ca:	ce 01       	movw	r24, r28
    47cc:	4e df       	rcall	.-356    	; 0x466a <_ZN9Interface7paradebEPVhhPh>
    47ce:	81 11       	cpse	r24, r1
    47d0:	16 c0       	rjmp	.+44     	; 0x47fe <_ZN9Interface6TasterEv+0x148>
		taste = '#';
	}
	else if (paradeb(&PIND,PIND3,&stat[10]))//debounce(&PIND,PIND3))
    47d2:	9e 01       	movw	r18, r28
    47d4:	26 5f       	subi	r18, 0xF6	; 246
    47d6:	3f 4f       	sbci	r19, 0xFF	; 255
    47d8:	43 e0       	ldi	r20, 0x03	; 3
    47da:	69 e2       	ldi	r22, 0x29	; 41
    47dc:	70 e0       	ldi	r23, 0x00	; 0
    47de:	ce 01       	movw	r24, r28
    47e0:	44 df       	rcall	.-376    	; 0x466a <_ZN9Interface7paradebEPVhhPh>
    47e2:	81 11       	cpse	r24, r1
    47e4:	0e c0       	rjmp	.+28     	; 0x4802 <_ZN9Interface6TasterEv+0x14c>
	{
		taste = '0';
	}
	else if (paradeb(&PIND,PIND2,&stat[9]))//debounce(&PIND,PIND2))
    47e6:	9e 01       	movw	r18, r28
    47e8:	27 5f       	subi	r18, 0xF7	; 247
    47ea:	3f 4f       	sbci	r19, 0xFF	; 255
    47ec:	42 e0       	ldi	r20, 0x02	; 2
    47ee:	69 e2       	ldi	r22, 0x29	; 41
    47f0:	70 e0       	ldi	r23, 0x00	; 0
    47f2:	ce 01       	movw	r24, r28
    47f4:	3a df       	rcall	.-396    	; 0x466a <_ZN9Interface7paradebEPVhhPh>
    47f6:	88 23       	and	r24, r24
    47f8:	29 f0       	breq	.+10     	; 0x4804 <_ZN9Interface6TasterEv+0x14e>
	{
		taste = '*';
    47fa:	1a e2       	ldi	r17, 0x2A	; 42
    47fc:	03 c0       	rjmp	.+6      	; 0x4804 <_ZN9Interface6TasterEv+0x14e>
	
	//vierte Zeile
	PORTD |= (1<<PORTD5);
	_delay_us(1);
	if(paradeb(&PIND,PIND4,&stat[11])){//debounce(&PIND,PIND4)){
		taste = '#';
    47fe:	13 e2       	ldi	r17, 0x23	; 35
    4800:	01 c0       	rjmp	.+2      	; 0x4804 <_ZN9Interface6TasterEv+0x14e>
	}
	else if (paradeb(&PIND,PIND3,&stat[10]))//debounce(&PIND,PIND3))
	{
		taste = '0';
    4802:	10 e3       	ldi	r17, 0x30	; 48
	}
	else if (paradeb(&PIND,PIND2,&stat[9]))//debounce(&PIND,PIND2))
	{
		taste = '*';
	}
	PORTD &= ~(1<<PORTD5);
    4804:	5d 98       	cbi	0x0b, 5	; 11
	
	return taste;
}
    4806:	81 2f       	mov	r24, r17
    4808:	df 91       	pop	r29
    480a:	cf 91       	pop	r28
    480c:	1f 91       	pop	r17
    480e:	08 95       	ret

00004810 <_ZN9Interface7unifiedEv>:

uint8_t Interface::unified(){
	switch (Taster())
    4810:	52 df       	rcall	.-348    	; 0x46b6 <_ZN9Interface6TasterEv>
    4812:	48 2f       	mov	r20, r24
    4814:	50 e0       	ldi	r21, 0x00	; 0
    4816:	fa 01       	movw	r30, r20
    4818:	b3 97       	sbiw	r30, 0x23	; 35
    481a:	e7 31       	cpi	r30, 0x17	; 23
    481c:	f1 05       	cpc	r31, r1
    481e:	c0 f4       	brcc	.+48     	; 0x4850 <_ZN9Interface7unifiedEv+0x40>
    4820:	ec 56       	subi	r30, 0x6C	; 108
    4822:	ff 4f       	sbci	r31, 0xFF	; 255
    4824:	0c 94 ec 45 	jmp	0x8bd8	; 0x8bd8 <__tablejump2__>
	{
	case '1':
		return 'B';
		break;
	case '2':
		return 'u';
    4828:	85 e7       	ldi	r24, 0x75	; 117
    482a:	08 95       	ret
		break;
	case '3':
		return 'A';
    482c:	81 e4       	ldi	r24, 0x41	; 65
    482e:	08 95       	ret
		break;
	case '4':
		return 'l';
    4830:	8c e6       	ldi	r24, 0x6C	; 108
    4832:	08 95       	ret
		break;
	case '5':
		return 'o';
    4834:	8f e6       	ldi	r24, 0x6F	; 111
    4836:	08 95       	ret
		break;
	case '6':
		return 'r';
    4838:	82 e7       	ldi	r24, 0x72	; 114
    483a:	08 95       	ret
		break;
	case '7':
		return 'Y';
    483c:	89 e5       	ldi	r24, 0x59	; 89
    483e:	08 95       	ret
		break;
	case '8':
		return 'd';
    4840:	84 e6       	ldi	r24, 0x64	; 100
    4842:	08 95       	ret
		break;
	case '9':
		return 'X';
    4844:	88 e5       	ldi	r24, 0x58	; 88
    4846:	08 95       	ret
		break;
	case '*':
		return 'e';
    4848:	85 e6       	ldi	r24, 0x65	; 101
    484a:	08 95       	ret
		break;
	case '0':
		return '0';
		break;
	case '#':
		return 'm';
    484c:	8d e6       	ldi	r24, 0x6D	; 109
    484e:	08 95       	ret
		break;
	default:
		return ' ';
    4850:	80 e2       	ldi	r24, 0x20	; 32
    4852:	08 95       	ret

uint8_t Interface::unified(){
	switch (Taster())
	{
	case '1':
		return 'B';
    4854:	82 e4       	ldi	r24, 0x42	; 66
		break;
	default:
		return ' ';
		break;
	}
}
    4856:	08 95       	ret

00004858 <_ZN9Interface17ZahlenausTastaturEv>:

uint8_t Interface::ZahlenausTastatur(){
    4858:	cf 93       	push	r28
    485a:	df 93       	push	r29
    485c:	ec 01       	movw	r28, r24
	while(true){
		uint8_t taste = Taster();
    485e:	ce 01       	movw	r24, r28
    4860:	2a df       	rcall	.-428    	; 0x46b6 <_ZN9Interface6TasterEv>
		if(taste>='0' && taste<='9'){
    4862:	80 53       	subi	r24, 0x30	; 48
    4864:	8a 30       	cpi	r24, 0x0A	; 10
    4866:	d8 f7       	brcc	.-10     	; 0x485e <_ZN9Interface17ZahlenausTastaturEv+0x6>
			return taste - '0';
		}
	}
}
    4868:	df 91       	pop	r29
    486a:	cf 91       	pop	r28
    486c:	08 95       	ret

0000486e <_ZN7LSM303DD1Ev>:
	//FIFO Bypass Mode
	ACCBypassmode();
}

void LSM303D::ACCStreammode(){
	LSM303_command(FIFO_CTRL,(1<<FM1));
    486e:	46 96       	adiw	r24, 0x16	; 22
    4870:	be ce       	rjmp	.-644    	; 0x45ee <_ZN3I2CD1Ev>
    4872:	08 95       	ret

00004874 <_ZN7LSM303D14LSM303_commandEhh>:
    4874:	0f 93       	push	r16
    4876:	1f 93       	push	r17
    4878:	cf 93       	push	r28
    487a:	df 93       	push	r29
    487c:	06 2f       	mov	r16, r22
    487e:	14 2f       	mov	r17, r20
    4880:	ec 01       	movw	r28, r24
    4882:	66 96       	adiw	r28, 0x16	; 22
    4884:	ce 01       	movw	r24, r28
    4886:	b4 de       	rcall	.-664    	; 0x45f0 <_ZN3I2C9twi_startEv>
    4888:	6a e3       	ldi	r22, 0x3A	; 58
    488a:	ce 01       	movw	r24, r28
    488c:	b9 de       	rcall	.-654    	; 0x4600 <_ZN3I2C9twi_writeEh>
    488e:	60 2f       	mov	r22, r16
    4890:	ce 01       	movw	r24, r28
    4892:	b6 de       	rcall	.-660    	; 0x4600 <_ZN3I2C9twi_writeEh>
    4894:	61 2f       	mov	r22, r17
    4896:	ce 01       	movw	r24, r28
    4898:	b3 de       	rcall	.-666    	; 0x4600 <_ZN3I2C9twi_writeEh>
    489a:	ce 01       	movw	r24, r28
    489c:	ad de       	rcall	.-678    	; 0x45f8 <_ZN3I2C8twi_stopEv>
    489e:	df 91       	pop	r29
    48a0:	cf 91       	pop	r28
    48a2:	1f 91       	pop	r17
    48a4:	0f 91       	pop	r16
    48a6:	08 95       	ret

000048a8 <_ZN7LSM303D13ACCBypassmodeEv>:
}

void LSM303D::ACCBypassmode(){
	LSM303_command(FIFO_CTRL,0x00);
    48a8:	40 e0       	ldi	r20, 0x00	; 0
    48aa:	6e e2       	ldi	r22, 0x2E	; 46
    48ac:	e3 cf       	rjmp	.-58     	; 0x4874 <_ZN7LSM303D14LSM303_commandEhh>
    48ae:	08 95       	ret

000048b0 <_ZN7LSM303D9acce_initEv>:
// default destructor
LSM303D::~LSM303D()
{
} //~LSM303D

void LSM303D::acce_init(){
    48b0:	cf 93       	push	r28
    48b2:	df 93       	push	r29
    48b4:	ec 01       	movw	r28, r24
	//ACC Activ und 25Hz ohne Block dataread
	LSM303_command(CTRL1,(1<<AXEN)|(1<<AYEN)|(1<<AZEN)|(1<<AODR2));
    48b6:	47 e4       	ldi	r20, 0x47	; 71
    48b8:	60 e2       	ldi	r22, 0x20	; 32
    48ba:	dc df       	rcall	.-72     	; 0x4874 <_ZN7LSM303D14LSM303_commandEhh>
	
	//ACC fuer +-2g
	LSM303_command(CTRL2,0x00);
    48bc:	40 e0       	ldi	r20, 0x00	; 0
    48be:	61 e2       	ldi	r22, 0x21	; 33
    48c0:	ce 01       	movw	r24, r28
    48c2:	d8 df       	rcall	.-80     	; 0x4874 <_ZN7LSM303D14LSM303_commandEhh>
	
	//Temperatursensor an
	LSM303_command(CTRL5,(1<<TEMP_EN));
    48c4:	40 e8       	ldi	r20, 0x80	; 128
    48c6:	64 e2       	ldi	r22, 0x24	; 36
    48c8:	ce 01       	movw	r24, r28
    48ca:	d4 df       	rcall	.-88     	; 0x4874 <_ZN7LSM303D14LSM303_commandEhh>
	
	//FIFO Bypass Mode
	ACCBypassmode();
    48cc:	ce 01       	movw	r24, r28
    48ce:	ec df       	rcall	.-40     	; 0x48a8 <_ZN7LSM303D13ACCBypassmodeEv>
}
    48d0:	df 91       	pop	r29
    48d2:	cf 91       	pop	r28
    48d4:	08 95       	ret

000048d6 <_ZN7LSM303DC1Ev>:


#include "LSM303D.h"

// default constructor
LSM303D::LSM303D()
    48d6:	cf 93       	push	r28
    48d8:	df 93       	push	r29
    48da:	ec 01       	movw	r28, r24
    48dc:	46 96       	adiw	r24, 0x16	; 22
    48de:	83 de       	rcall	.-762    	; 0x45e6 <_ZN3I2CC1Ev>
{
	//Variablen initialisieren
	Tempera=0;
    48e0:	1f 82       	std	Y+7, r1	; 0x07
    48e2:	1e 82       	std	Y+6, r1	; 0x06
	roll=0.0;
    48e4:	18 86       	std	Y+8, r1	; 0x08
    48e6:	19 86       	std	Y+9, r1	; 0x09
    48e8:	1a 86       	std	Y+10, r1	; 0x0a
    48ea:	1b 86       	std	Y+11, r1	; 0x0b
	pitch=0.0;
    48ec:	1c 86       	std	Y+12, r1	; 0x0c
    48ee:	1d 86       	std	Y+13, r1	; 0x0d
    48f0:	1e 86       	std	Y+14, r1	; 0x0e
    48f2:	1f 86       	std	Y+15, r1	; 0x0f
	Schrittzaehler=0;
    48f4:	19 8a       	std	Y+17, r1	; 0x11
    48f6:	18 8a       	std	Y+16, r1	; 0x10
	gravity=0;
    48f8:	1a 8a       	std	Y+18, r1	; 0x12
    48fa:	1b 8a       	std	Y+19, r1	; 0x13
    48fc:	1c 8a       	std	Y+20, r1	; 0x14
    48fe:	1d 8a       	std	Y+21, r1	; 0x15
	higher=0;
    4900:	de 01       	movw	r26, r28
    4902:	a1 52       	subi	r26, 0x21	; 33
    4904:	bf 4f       	sbci	r27, 0xFF	; 255
    4906:	1d 92       	st	X+, r1
    4908:	1d 92       	st	X+, r1
    490a:	1d 92       	st	X+, r1
    490c:	1c 92       	st	X, r1
    490e:	13 97       	sbiw	r26, 0x03	; 3
	lower=0;
    4910:	fe 01       	movw	r30, r28
    4912:	ed 51       	subi	r30, 0x1D	; 29
    4914:	ff 4f       	sbci	r31, 0xFF	; 255
    4916:	10 82       	st	Z, r1
    4918:	11 82       	std	Z+1, r1	; 0x01
    491a:	12 82       	std	Z+2, r1	; 0x02
    491c:	13 82       	std	Z+3, r1	; 0x03
	threschold=27;	//aus Erfahrung
    491e:	34 96       	adiw	r30, 0x04	; 4
    4920:	8b e1       	ldi	r24, 0x1B	; 27
    4922:	90 e0       	ldi	r25, 0x00	; 0
    4924:	91 83       	std	Z+1, r25	; 0x01
    4926:	80 83       	st	Z, r24
	for (uint8_t i=0;i<3;i++)
	{
		achsen_A[i]=0;
    4928:	19 82       	std	Y+1, r1	; 0x01
    492a:	18 82       	st	Y, r1
    492c:	1b 82       	std	Y+3, r1	; 0x03
    492e:	1a 82       	std	Y+2, r1	; 0x02
    4930:	1d 82       	std	Y+5, r1	; 0x05
    4932:	1c 82       	std	Y+4, r1	; 0x04
    4934:	e0 5d       	subi	r30, 0xD0	; 208
    4936:	f1 09       	sbc	r31, r1
    4938:	9d 01       	movw	r18, r26
	}
	for (uint8_t i=0;i<50;i++)
	{
		Daten[i]=0;
    493a:	11 92       	st	Z+, r1
    493c:	11 92       	st	Z+, r1
    493e:	11 92       	st	Z+, r1
    4940:	11 92       	st	Z+, r1
	threschold=27;	//aus Erfahrung
	for (uint8_t i=0;i<3;i++)
	{
		achsen_A[i]=0;
	}
	for (uint8_t i=0;i<50;i++)
    4942:	e2 17       	cp	r30, r18
    4944:	f3 07       	cpc	r31, r19
    4946:	c9 f7       	brne	.-14     	; 0x493a <_ZN7LSM303DC1Ev+0x64>
	{
		Daten[i]=0;
	}
	
	//ACC init
	acce_init();
    4948:	ce 01       	movw	r24, r28
    494a:	b2 df       	rcall	.-156    	; 0x48b0 <_ZN7LSM303D9acce_initEv>
} //LSM303D
    494c:	df 91       	pop	r29
    494e:	cf 91       	pop	r28
    4950:	08 95       	ret

00004952 <_ZN7monitor11tastendruckEPh>:
	for (uint8_t i = 0; i < nsamples; ++i ) {
		sum += ADC_Read( channel );
	}
	
	return (uint16_t)( sum / nsamples );
}
    4952:	80 e0       	ldi	r24, 0x00	; 0
    4954:	08 95       	ret

00004956 <_ZN3uhr11tastendruckEPh>:
    4956:	fc 01       	movw	r30, r24
    4958:	db 01       	movw	r26, r22
    495a:	9c 91       	ld	r25, X
    495c:	95 36       	cpi	r25, 0x65	; 101
    495e:	39 f4       	brne	.+14     	; 0x496e <_ZN3uhr11tastendruckEPh+0x18>
    4960:	81 a5       	ldd	r24, Z+41	; 0x29
    4962:	81 30       	cpi	r24, 0x01	; 1
    4964:	11 f4       	brne	.+4      	; 0x496a <_ZN3uhr11tastendruckEPh+0x14>
    4966:	11 a6       	std	Z+41, r1	; 0x29
    4968:	02 c0       	rjmp	.+4      	; 0x496e <_ZN3uhr11tastendruckEPh+0x18>
    496a:	81 e0       	ldi	r24, 0x01	; 1
    496c:	81 a7       	std	Z+41, r24	; 0x29
    496e:	80 e0       	ldi	r24, 0x00	; 0
    4970:	08 95       	ret

00004972 <_ZN13einstellungen11tastendruckEPh>:
    4972:	80 e0       	ldi	r24, 0x00	; 0
    4974:	08 95       	ret

00004976 <_ZN5menue11tastendruckEPh>:
    4976:	80 e0       	ldi	r24, 0x00	; 0
    4978:	08 95       	ret

0000497a <_ZN9offscreen4drawEv>:
    497a:	cf 93       	push	r28
    497c:	df 93       	push	r29
    497e:	ec 01       	movw	r28, r24
    4980:	8f 89       	ldd	r24, Y+23	; 0x17
    4982:	98 8d       	ldd	r25, Y+24	; 0x18
    4984:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <_ZN7Display10clearFrameEv>
    4988:	8f 89       	ldd	r24, Y+23	; 0x17
    498a:	98 8d       	ldd	r25, Y+24	; 0x18
    498c:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <_ZN7Display9sendFrameEv>
    4990:	df 91       	pop	r29
    4992:	cf 91       	pop	r28
    4994:	08 95       	ret

00004996 <_ZN9wilkommen4drawEv>:
    4996:	ef 92       	push	r14
    4998:	ff 92       	push	r15
    499a:	0f 93       	push	r16
    499c:	1f 93       	push	r17
    499e:	cf 93       	push	r28
    49a0:	df 93       	push	r29
    49a2:	ec 01       	movw	r28, r24
    49a4:	8f 89       	ldd	r24, Y+23	; 0x17
    49a6:	98 8d       	ldd	r25, Y+24	; 0x18
    49a8:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <_ZN7Display10clearFrameEv>
    49ac:	7e 01       	movw	r14, r28
    49ae:	22 e0       	ldi	r18, 0x02	; 2
    49b0:	e2 0e       	add	r14, r18
    49b2:	f1 1c       	adc	r15, r1
    49b4:	8f e0       	ldi	r24, 0x0F	; 15
    49b6:	e6 e9       	ldi	r30, 0x96	; 150
    49b8:	f1 e0       	ldi	r31, 0x01	; 1
    49ba:	d7 01       	movw	r26, r14
    49bc:	01 90       	ld	r0, Z+
    49be:	0d 92       	st	X+, r0
    49c0:	8a 95       	dec	r24
    49c2:	e1 f7       	brne	.-8      	; 0x49bc <_ZN9wilkommen4drawEv+0x26>
    49c4:	8e e0       	ldi	r24, 0x0E	; 14
    49c6:	8e 8b       	std	Y+22, r24	; 0x16
    49c8:	00 e0       	ldi	r16, 0x00	; 0
    49ca:	10 e0       	ldi	r17, 0x00	; 0
    49cc:	fe 01       	movw	r30, r28
    49ce:	e1 0f       	add	r30, r17
    49d0:	f1 1d       	adc	r31, r1
    49d2:	20 e0       	ldi	r18, 0x00	; 0
    49d4:	40 2f       	mov	r20, r16
    49d6:	62 81       	ldd	r22, Z+2	; 0x02
    49d8:	8f 89       	ldd	r24, Y+23	; 0x17
    49da:	98 8d       	ldd	r25, Y+24	; 0x18
    49dc:	0e 94 00 0c 	call	0x1800	; 0x1800 <_ZN7Display9draw_ASCIEhhh>
    49e0:	1f 5f       	subi	r17, 0xFF	; 255
    49e2:	0a 5f       	subi	r16, 0xFA	; 250
    49e4:	8e 89       	ldd	r24, Y+22	; 0x16
    49e6:	18 17       	cp	r17, r24
    49e8:	88 f3       	brcs	.-30     	; 0x49cc <_ZN9wilkommen4drawEv+0x36>
    49ea:	8f e0       	ldi	r24, 0x0F	; 15
    49ec:	e5 ea       	ldi	r30, 0xA5	; 165
    49ee:	f1 e0       	ldi	r31, 0x01	; 1
    49f0:	d7 01       	movw	r26, r14
    49f2:	01 90       	ld	r0, Z+
    49f4:	0d 92       	st	X+, r0
    49f6:	8a 95       	dec	r24
    49f8:	e1 f7       	brne	.-8      	; 0x49f2 <_ZN9wilkommen4drawEv+0x5c>
    49fa:	8e e0       	ldi	r24, 0x0E	; 14
    49fc:	8e 8b       	std	Y+22, r24	; 0x16
    49fe:	00 e0       	ldi	r16, 0x00	; 0
    4a00:	10 e0       	ldi	r17, 0x00	; 0
    4a02:	fe 01       	movw	r30, r28
    4a04:	e1 0f       	add	r30, r17
    4a06:	f1 1d       	adc	r31, r1
    4a08:	28 e0       	ldi	r18, 0x08	; 8
    4a0a:	40 2f       	mov	r20, r16
    4a0c:	62 81       	ldd	r22, Z+2	; 0x02
    4a0e:	8f 89       	ldd	r24, Y+23	; 0x17
    4a10:	98 8d       	ldd	r25, Y+24	; 0x18
    4a12:	0e 94 00 0c 	call	0x1800	; 0x1800 <_ZN7Display9draw_ASCIEhhh>
    4a16:	1f 5f       	subi	r17, 0xFF	; 255
    4a18:	0a 5f       	subi	r16, 0xFA	; 250
    4a1a:	8e 89       	ldd	r24, Y+22	; 0x16
    4a1c:	18 17       	cp	r17, r24
    4a1e:	88 f3       	brcs	.-30     	; 0x4a02 <_ZN9wilkommen4drawEv+0x6c>
    4a20:	80 e4       	ldi	r24, 0x40	; 64
    4a22:	8f 93       	push	r24
    4a24:	81 e4       	ldi	r24, 0x41	; 65
    4a26:	8f 93       	push	r24
    4a28:	8b ee       	ldi	r24, 0xEB	; 235
    4a2a:	8f 93       	push	r24
    4a2c:	85 e8       	ldi	r24, 0x85	; 133
    4a2e:	8f 93       	push	r24
    4a30:	84 eb       	ldi	r24, 0xB4	; 180
    4a32:	91 e0       	ldi	r25, 0x01	; 1
    4a34:	9f 93       	push	r25
    4a36:	8f 93       	push	r24
    4a38:	ff 92       	push	r15
    4a3a:	ef 92       	push	r14
    4a3c:	0e 94 67 48 	call	0x90ce	; 0x90ce <sprintf>
    4a40:	8e 8b       	std	Y+22, r24	; 0x16
    4a42:	2d b7       	in	r18, 0x3d	; 61
    4a44:	3e b7       	in	r19, 0x3e	; 62
    4a46:	28 5f       	subi	r18, 0xF8	; 248
    4a48:	3f 4f       	sbci	r19, 0xFF	; 255
    4a4a:	0f b6       	in	r0, 0x3f	; 63
    4a4c:	f8 94       	cli
    4a4e:	3e bf       	out	0x3e, r19	; 62
    4a50:	0f be       	out	0x3f, r0	; 63
    4a52:	2d bf       	out	0x3d, r18	; 61
    4a54:	88 23       	and	r24, r24
    4a56:	89 f0       	breq	.+34     	; 0x4a7a <_ZN9wilkommen4drawEv+0xe4>
    4a58:	00 e0       	ldi	r16, 0x00	; 0
    4a5a:	10 e0       	ldi	r17, 0x00	; 0
    4a5c:	fe 01       	movw	r30, r28
    4a5e:	e1 0f       	add	r30, r17
    4a60:	f1 1d       	adc	r31, r1
    4a62:	20 e2       	ldi	r18, 0x20	; 32
    4a64:	40 2f       	mov	r20, r16
    4a66:	62 81       	ldd	r22, Z+2	; 0x02
    4a68:	8f 89       	ldd	r24, Y+23	; 0x17
    4a6a:	98 8d       	ldd	r25, Y+24	; 0x18
    4a6c:	0e 94 00 0c 	call	0x1800	; 0x1800 <_ZN7Display9draw_ASCIEhhh>
    4a70:	1f 5f       	subi	r17, 0xFF	; 255
    4a72:	0a 5f       	subi	r16, 0xFA	; 250
    4a74:	8e 89       	ldd	r24, Y+22	; 0x16
    4a76:	18 17       	cp	r17, r24
    4a78:	88 f3       	brcs	.-30     	; 0x4a5c <_ZN9wilkommen4drawEv+0xc6>
    4a7a:	8f 89       	ldd	r24, Y+23	; 0x17
    4a7c:	98 8d       	ldd	r25, Y+24	; 0x18
    4a7e:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <_ZN7Display9sendFrameEv>
    4a82:	df 91       	pop	r29
    4a84:	cf 91       	pop	r28
    4a86:	1f 91       	pop	r17
    4a88:	0f 91       	pop	r16
    4a8a:	ff 90       	pop	r15
    4a8c:	ef 90       	pop	r14
    4a8e:	08 95       	ret

00004a90 <_Z8ADC_Readh>:
    4a90:	ec e7       	ldi	r30, 0x7C	; 124
    4a92:	f0 e0       	ldi	r31, 0x00	; 0
    4a94:	90 81       	ld	r25, Z
    4a96:	8f 71       	andi	r24, 0x1F	; 31
    4a98:	90 7e       	andi	r25, 0xE0	; 224
    4a9a:	89 2b       	or	r24, r25
    4a9c:	80 83       	st	Z, r24
    4a9e:	ea e7       	ldi	r30, 0x7A	; 122
    4aa0:	f0 e0       	ldi	r31, 0x00	; 0
    4aa2:	80 81       	ld	r24, Z
    4aa4:	80 64       	ori	r24, 0x40	; 64
    4aa6:	80 83       	st	Z, r24
    4aa8:	80 81       	ld	r24, Z
    4aaa:	86 fd       	sbrc	r24, 6
    4aac:	fd cf       	rjmp	.-6      	; 0x4aa8 <_Z8ADC_Readh+0x18>
    4aae:	80 91 78 00 	lds	r24, 0x0078
    4ab2:	90 91 79 00 	lds	r25, 0x0079
    4ab6:	08 95       	ret

00004ab8 <_Z14Batteriestatusv>:

#ifndef BATMIN
#define BATMIN 3.0
#endif

int8_t Batteriestatus(){
    4ab8:	cf 92       	push	r12
    4aba:	df 92       	push	r13
    4abc:	ef 92       	push	r14
    4abe:	ff 92       	push	r15
	uint16_t ADCwert=ADC_Read(0);
    4ac0:	80 e0       	ldi	r24, 0x00	; 0
    4ac2:	e6 df       	rcall	.-52     	; 0x4a90 <_Z8ADC_Readh>
	batterie = (ADCwert/1023.0)*3.29*SPANNUNGSTEILER;
    4ac4:	bc 01       	movw	r22, r24
    4ac6:	80 e0       	ldi	r24, 0x00	; 0
    4ac8:	90 e0       	ldi	r25, 0x00	; 0
    4aca:	0e 94 49 3f 	call	0x7e92	; 0x7e92 <__floatunsisf>
    4ace:	20 e0       	ldi	r18, 0x00	; 0
    4ad0:	30 ec       	ldi	r19, 0xC0	; 192
    4ad2:	4f e7       	ldi	r20, 0x7F	; 127
    4ad4:	54 e4       	ldi	r21, 0x44	; 68
    4ad6:	0e 94 b0 3e 	call	0x7d60	; 0x7d60 <__divsf3>
    4ada:	2c e5       	ldi	r18, 0x5C	; 92
    4adc:	3f e8       	ldi	r19, 0x8F	; 143
    4ade:	42 e5       	ldi	r20, 0x52	; 82
    4ae0:	50 e4       	ldi	r21, 0x40	; 64
    4ae2:	0e 94 64 40 	call	0x80c8	; 0x80c8 <__mulsf3>
    4ae6:	2d e0       	ldi	r18, 0x0D	; 13
    4ae8:	31 e7       	ldi	r19, 0x71	; 113
    4aea:	40 e0       	ldi	r20, 0x00	; 0
    4aec:	50 e4       	ldi	r21, 0x40	; 64
    4aee:	0e 94 64 40 	call	0x80c8	; 0x80c8 <__mulsf3>
    4af2:	60 93 ed 08 	sts	0x08ED, r22
    4af6:	70 93 ee 08 	sts	0x08EE, r23
    4afa:	80 93 ef 08 	sts	0x08EF, r24
    4afe:	90 93 f0 08 	sts	0x08F0, r25
	float stat = ((batterie-BATMIN)/(4.2-BATMIN)*100);
    4b02:	26 e6       	ldi	r18, 0x66	; 102
    4b04:	36 e6       	ldi	r19, 0x66	; 102
    4b06:	46 e6       	ldi	r20, 0x66	; 102
    4b08:	50 e4       	ldi	r21, 0x40	; 64
    4b0a:	0e 94 48 3e 	call	0x7c90	; 0x7c90 <__subsf3>
    4b0e:	28 e9       	ldi	r18, 0x98	; 152
    4b10:	39 e9       	ldi	r19, 0x99	; 153
    4b12:	49 e1       	ldi	r20, 0x19	; 25
    4b14:	5f e3       	ldi	r21, 0x3F	; 63
    4b16:	0e 94 b0 3e 	call	0x7d60	; 0x7d60 <__divsf3>
    4b1a:	20 e0       	ldi	r18, 0x00	; 0
    4b1c:	30 e0       	ldi	r19, 0x00	; 0
    4b1e:	48 ec       	ldi	r20, 0xC8	; 200
    4b20:	52 e4       	ldi	r21, 0x42	; 66
    4b22:	0e 94 64 40 	call	0x80c8	; 0x80c8 <__mulsf3>
    4b26:	6b 01       	movw	r12, r22
    4b28:	7c 01       	movw	r14, r24
	uint8_t temp =(uint8_t) (stat*10);
    4b2a:	20 e0       	ldi	r18, 0x00	; 0
    4b2c:	30 e0       	ldi	r19, 0x00	; 0
    4b2e:	40 e2       	ldi	r20, 0x20	; 32
    4b30:	51 e4       	ldi	r21, 0x41	; 65
    4b32:	0e 94 64 40 	call	0x80c8	; 0x80c8 <__mulsf3>
    4b36:	0e 94 1d 3f 	call	0x7e3a	; 0x7e3a <__fixunssfsi>
	if (temp%10>=5)
    4b3a:	8d ec       	ldi	r24, 0xCD	; 205
    4b3c:	68 9f       	mul	r22, r24
    4b3e:	81 2d       	mov	r24, r1
    4b40:	11 24       	eor	r1, r1
    4b42:	86 95       	lsr	r24
    4b44:	86 95       	lsr	r24
    4b46:	86 95       	lsr	r24
    4b48:	88 0f       	add	r24, r24
    4b4a:	28 2f       	mov	r18, r24
    4b4c:	22 0f       	add	r18, r18
    4b4e:	22 0f       	add	r18, r18
    4b50:	82 0f       	add	r24, r18
    4b52:	96 2f       	mov	r25, r22
    4b54:	98 1b       	sub	r25, r24
    4b56:	95 30       	cpi	r25, 0x05	; 5
    4b58:	70 f0       	brcs	.+28     	; 0x4b76 <_Z14Batteriestatusv+0xbe>
	{
		stat = (uint8_t)stat+1;
    4b5a:	c7 01       	movw	r24, r14
    4b5c:	b6 01       	movw	r22, r12
    4b5e:	0e 94 1d 3f 	call	0x7e3a	; 0x7e3a <__fixunssfsi>
    4b62:	70 e0       	ldi	r23, 0x00	; 0
    4b64:	6f 5f       	subi	r22, 0xFF	; 255
    4b66:	7f 4f       	sbci	r23, 0xFF	; 255
    4b68:	07 2e       	mov	r0, r23
    4b6a:	00 0c       	add	r0, r0
    4b6c:	88 0b       	sbc	r24, r24
    4b6e:	99 0b       	sbc	r25, r25
    4b70:	0e 94 4b 3f 	call	0x7e96	; 0x7e96 <__floatsisf>
    4b74:	09 c0       	rjmp	.+18     	; 0x4b88 <_Z14Batteriestatusv+0xd0>
	}
	else
	{
		stat = (uint8_t)stat;
    4b76:	c7 01       	movw	r24, r14
    4b78:	b6 01       	movw	r22, r12
    4b7a:	0e 94 1d 3f 	call	0x7e3a	; 0x7e3a <__fixunssfsi>
    4b7e:	70 e0       	ldi	r23, 0x00	; 0
    4b80:	80 e0       	ldi	r24, 0x00	; 0
    4b82:	90 e0       	ldi	r25, 0x00	; 0
    4b84:	0e 94 49 3f 	call	0x7e92	; 0x7e92 <__floatunsisf>
	}
	return stat;
    4b88:	0e 94 18 3f 	call	0x7e30	; 0x7e30 <__fixsfsi>
    4b8c:	86 2f       	mov	r24, r22
}
    4b8e:	ff 90       	pop	r15
    4b90:	ef 90       	pop	r14
    4b92:	df 90       	pop	r13
    4b94:	cf 90       	pop	r12
    4b96:	08 95       	ret

00004b98 <_ZN5menue4drawEv>:
	
	uint8_t tastendruck(uint8_t *tast){
		return 0;
	}

	void draw(){
    4b98:	cf 92       	push	r12
    4b9a:	df 92       	push	r13
    4b9c:	ef 92       	push	r14
    4b9e:	ff 92       	push	r15
    4ba0:	0f 93       	push	r16
    4ba2:	1f 93       	push	r17
    4ba4:	cf 93       	push	r28
    4ba6:	df 93       	push	r29
    4ba8:	ec 01       	movw	r28, r24
		return 0;
	}
	
	//drawfunktion
	virtual void draw(){
		oled->clearFrame();
    4baa:	8f 89       	ldd	r24, Y+23	; 0x17
    4bac:	98 8d       	ldd	r25, Y+24	; 0x18
    4bae:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <_ZN7Display10clearFrameEv>
    4bb2:	10 e0       	ldi	r17, 0x00	; 0
    4bb4:	e1 2c       	mov	r14, r1
    4bb6:	f1 2c       	mov	r15, r1
	}
	
	//draw header and overload it
	void header(){
		for(uint8_t i=0;i<8;i++){
			oled->draw_ASCI(rtc->msg_uhr[i],i*charsize,0);
    4bb8:	e9 8d       	ldd	r30, Y+25	; 0x19
    4bba:	fa 8d       	ldd	r31, Y+26	; 0x1a
    4bbc:	ee 0d       	add	r30, r14
    4bbe:	ff 1d       	adc	r31, r15
    4bc0:	20 e0       	ldi	r18, 0x00	; 0
    4bc2:	41 2f       	mov	r20, r17
    4bc4:	60 81       	ld	r22, Z
    4bc6:	8f 89       	ldd	r24, Y+23	; 0x17
    4bc8:	98 8d       	ldd	r25, Y+24	; 0x18
    4bca:	0e 94 00 0c 	call	0x1800	; 0x1800 <_ZN7Display9draw_ASCIEhhh>
    4bce:	8f ef       	ldi	r24, 0xFF	; 255
    4bd0:	e8 1a       	sub	r14, r24
    4bd2:	f8 0a       	sbc	r15, r24
    4bd4:	1a 5f       	subi	r17, 0xFA	; 250
		return &name[0];
	}
	
	//draw header and overload it
	void header(){
		for(uint8_t i=0;i<8;i++){
    4bd6:	10 33       	cpi	r17, 0x30	; 48
    4bd8:	79 f7       	brne	.-34     	; 0x4bb8 <_ZN5menue4drawEv+0x20>
			oled->draw_ASCI(rtc->msg_uhr[i],i*charsize,0);
		}
		buffersize=sprintf(buffer,"Bat: %i%%",Batteriestatus());
    4bda:	6e df       	rcall	.-292    	; 0x4ab8 <_Z14Batteriestatusv>
    4bdc:	7e 01       	movw	r14, r28
    4bde:	92 e0       	ldi	r25, 0x02	; 2
    4be0:	e9 0e       	add	r14, r25
    4be2:	f1 1c       	adc	r15, r1
    4be4:	28 2f       	mov	r18, r24
    4be6:	08 2e       	mov	r0, r24
    4be8:	00 0c       	add	r0, r0
    4bea:	33 0b       	sbc	r19, r19
    4bec:	3f 93       	push	r19
    4bee:	8f 93       	push	r24
    4bf0:	82 ec       	ldi	r24, 0xC2	; 194
    4bf2:	91 e0       	ldi	r25, 0x01	; 1
    4bf4:	9f 93       	push	r25
    4bf6:	8f 93       	push	r24
    4bf8:	ff 92       	push	r15
    4bfa:	ef 92       	push	r14
    4bfc:	0e 94 67 48 	call	0x90ce	; 0x90ce <sprintf>
    4c00:	8e 8b       	std	Y+22, r24	; 0x16
		for(uint8_t i=((SSD1306_WIDTH/charsize)-buffersize);i<(SSD1306_WIDTH/charsize);i++){
    4c02:	15 e1       	ldi	r17, 0x15	; 21
    4c04:	18 1b       	sub	r17, r24
    4c06:	0f 90       	pop	r0
    4c08:	0f 90       	pop	r0
    4c0a:	0f 90       	pop	r0
    4c0c:	0f 90       	pop	r0
    4c0e:	0f 90       	pop	r0
    4c10:	0f 90       	pop	r0
    4c12:	15 31       	cpi	r17, 0x15	; 21
    4c14:	08 f0       	brcs	.+2      	; 0x4c18 <_ZN5menue4drawEv+0x80>
    4c16:	bf c0       	rjmp	.+382    	; 0x4d96 <_ZN5menue4drawEv+0x1fe>
    4c18:	01 2f       	mov	r16, r17
    4c1a:	00 0f       	add	r16, r16
    4c1c:	01 0f       	add	r16, r17
    4c1e:	00 0f       	add	r16, r16
			oled->draw_ASCI(buffer[i-((SSD1306_WIDTH/charsize)-buffersize)],i*charsize,0);
    4c20:	8e 89       	ldd	r24, Y+22	; 0x16
    4c22:	fe 01       	movw	r30, r28
    4c24:	e1 0f       	add	r30, r17
    4c26:	f1 1d       	adc	r31, r1
    4c28:	e8 0f       	add	r30, r24
    4c2a:	f1 1d       	adc	r31, r1
    4c2c:	73 97       	sbiw	r30, 0x13	; 19
    4c2e:	20 e0       	ldi	r18, 0x00	; 0
    4c30:	40 2f       	mov	r20, r16
    4c32:	60 81       	ld	r22, Z
    4c34:	8f 89       	ldd	r24, Y+23	; 0x17
    4c36:	98 8d       	ldd	r25, Y+24	; 0x18
    4c38:	0e 94 00 0c 	call	0x1800	; 0x1800 <_ZN7Display9draw_ASCIEhhh>
	void header(){
		for(uint8_t i=0;i<8;i++){
			oled->draw_ASCI(rtc->msg_uhr[i],i*charsize,0);
		}
		buffersize=sprintf(buffer,"Bat: %i%%",Batteriestatus());
		for(uint8_t i=((SSD1306_WIDTH/charsize)-buffersize);i<(SSD1306_WIDTH/charsize);i++){
    4c3c:	1f 5f       	subi	r17, 0xFF	; 255
    4c3e:	0a 5f       	subi	r16, 0xFA	; 250
    4c40:	15 31       	cpi	r17, 0x15	; 21
    4c42:	71 f7       	brne	.-36     	; 0x4c20 <_ZN5menue4drawEv+0x88>
    4c44:	a8 c0       	rjmp	.+336    	; 0x4d96 <_ZN5menue4drawEv+0x1fe>
	}
	
	//draw bottom and overload it
	void bottom(){
		for(uint8_t i=0;i<8;i++){
			oled->draw_ASCI(rtc->msg_dat[i],i*charsize+(SSD1306_WIDTH-bitsderrtc*charsize),7*charhighte);
    4c46:	e9 8d       	ldd	r30, Y+25	; 0x19
    4c48:	fa 8d       	ldd	r31, Y+26	; 0x1a
    4c4a:	ec 0d       	add	r30, r12
    4c4c:	fd 1d       	adc	r31, r13
    4c4e:	28 e3       	ldi	r18, 0x38	; 56
    4c50:	41 2f       	mov	r20, r17
    4c52:	60 85       	ldd	r22, Z+8	; 0x08
    4c54:	8f 89       	ldd	r24, Y+23	; 0x17
    4c56:	98 8d       	ldd	r25, Y+24	; 0x18
    4c58:	0e 94 00 0c 	call	0x1800	; 0x1800 <_ZN7Display9draw_ASCIEhhh>
    4c5c:	8f ef       	ldi	r24, 0xFF	; 255
    4c5e:	c8 1a       	sub	r12, r24
    4c60:	d8 0a       	sbc	r13, r24
    4c62:	1a 5f       	subi	r17, 0xFA	; 250
		}
	}
	
	//draw bottom and overload it
	void bottom(){
		for(uint8_t i=0;i<8;i++){
    4c64:	10 38       	cpi	r17, 0x80	; 128
    4c66:	79 f7       	brne	.-34     	; 0x4c46 <_ZN5menue4drawEv+0xae>
	void draw(){
		monitor::draw();
		header();
		bottom();
		//menueeintrag zeichnen
		buffersize=sprintf(buffer,"Uhr");
    4c68:	85 e5       	ldi	r24, 0x55	; 85
    4c6a:	98 e6       	ldi	r25, 0x68	; 104
    4c6c:	a2 e7       	ldi	r26, 0x72	; 114
    4c6e:	b0 e0       	ldi	r27, 0x00	; 0
    4c70:	8a 83       	std	Y+2, r24	; 0x02
    4c72:	9b 83       	std	Y+3, r25	; 0x03
    4c74:	ac 83       	std	Y+4, r26	; 0x04
    4c76:	bd 83       	std	Y+5, r27	; 0x05
    4c78:	83 e0       	ldi	r24, 0x03	; 3
    4c7a:	8e 8b       	std	Y+22, r24	; 0x16
    4c7c:	0c e0       	ldi	r16, 0x0C	; 12
    4c7e:	10 e0       	ldi	r17, 0x00	; 0
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+2*charsize,2*charhighte);}
    4c80:	fe 01       	movw	r30, r28
    4c82:	e1 0f       	add	r30, r17
    4c84:	f1 1d       	adc	r31, r1
    4c86:	20 e1       	ldi	r18, 0x10	; 16
    4c88:	40 2f       	mov	r20, r16
    4c8a:	62 81       	ldd	r22, Z+2	; 0x02
    4c8c:	8f 89       	ldd	r24, Y+23	; 0x17
    4c8e:	98 8d       	ldd	r25, Y+24	; 0x18
    4c90:	0e 94 00 0c 	call	0x1800	; 0x1800 <_ZN7Display9draw_ASCIEhhh>
    4c94:	1f 5f       	subi	r17, 0xFF	; 255
    4c96:	0a 5f       	subi	r16, 0xFA	; 250
    4c98:	8e 89       	ldd	r24, Y+22	; 0x16
    4c9a:	18 17       	cp	r17, r24
    4c9c:	88 f3       	brcs	.-30     	; 0x4c80 <_ZN5menue4drawEv+0xe8>
		buffersize=sprintf(buffer,"Tacho");
    4c9e:	86 e0       	ldi	r24, 0x06	; 6
    4ca0:	ec ec       	ldi	r30, 0xCC	; 204
    4ca2:	f1 e0       	ldi	r31, 0x01	; 1
    4ca4:	d7 01       	movw	r26, r14
    4ca6:	01 90       	ld	r0, Z+
    4ca8:	0d 92       	st	X+, r0
    4caa:	8a 95       	dec	r24
    4cac:	e1 f7       	brne	.-8      	; 0x4ca6 <_ZN5menue4drawEv+0x10e>
    4cae:	85 e0       	ldi	r24, 0x05	; 5
    4cb0:	8e 8b       	std	Y+22, r24	; 0x16
    4cb2:	0c e0       	ldi	r16, 0x0C	; 12
    4cb4:	10 e0       	ldi	r17, 0x00	; 0
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+2*charsize,3*charhighte);}
    4cb6:	fe 01       	movw	r30, r28
    4cb8:	e1 0f       	add	r30, r17
    4cba:	f1 1d       	adc	r31, r1
    4cbc:	28 e1       	ldi	r18, 0x18	; 24
    4cbe:	40 2f       	mov	r20, r16
    4cc0:	62 81       	ldd	r22, Z+2	; 0x02
    4cc2:	8f 89       	ldd	r24, Y+23	; 0x17
    4cc4:	98 8d       	ldd	r25, Y+24	; 0x18
    4cc6:	0e 94 00 0c 	call	0x1800	; 0x1800 <_ZN7Display9draw_ASCIEhhh>
    4cca:	1f 5f       	subi	r17, 0xFF	; 255
    4ccc:	0a 5f       	subi	r16, 0xFA	; 250
    4cce:	8e 89       	ldd	r24, Y+22	; 0x16
    4cd0:	18 17       	cp	r17, r24
    4cd2:	88 f3       	brcs	.-30     	; 0x4cb6 <_ZN5menue4drawEv+0x11e>
		buffersize=sprintf(buffer,"Wandern");
    4cd4:	88 e0       	ldi	r24, 0x08	; 8
    4cd6:	e2 ed       	ldi	r30, 0xD2	; 210
    4cd8:	f1 e0       	ldi	r31, 0x01	; 1
    4cda:	d7 01       	movw	r26, r14
    4cdc:	01 90       	ld	r0, Z+
    4cde:	0d 92       	st	X+, r0
    4ce0:	8a 95       	dec	r24
    4ce2:	e1 f7       	brne	.-8      	; 0x4cdc <_ZN5menue4drawEv+0x144>
    4ce4:	87 e0       	ldi	r24, 0x07	; 7
    4ce6:	8e 8b       	std	Y+22, r24	; 0x16
    4ce8:	0c e0       	ldi	r16, 0x0C	; 12
    4cea:	10 e0       	ldi	r17, 0x00	; 0
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+2*charsize,4*charhighte);}
    4cec:	fe 01       	movw	r30, r28
    4cee:	e1 0f       	add	r30, r17
    4cf0:	f1 1d       	adc	r31, r1
    4cf2:	20 e2       	ldi	r18, 0x20	; 32
    4cf4:	40 2f       	mov	r20, r16
    4cf6:	62 81       	ldd	r22, Z+2	; 0x02
    4cf8:	8f 89       	ldd	r24, Y+23	; 0x17
    4cfa:	98 8d       	ldd	r25, Y+24	; 0x18
    4cfc:	0e 94 00 0c 	call	0x1800	; 0x1800 <_ZN7Display9draw_ASCIEhhh>
    4d00:	1f 5f       	subi	r17, 0xFF	; 255
    4d02:	0a 5f       	subi	r16, 0xFA	; 250
    4d04:	8e 89       	ldd	r24, Y+22	; 0x16
    4d06:	18 17       	cp	r17, r24
    4d08:	88 f3       	brcs	.-30     	; 0x4cec <_ZN5menue4drawEv+0x154>
		buffersize=sprintf(buffer,"Einstellungen");
    4d0a:	8e e0       	ldi	r24, 0x0E	; 14
    4d0c:	ea ed       	ldi	r30, 0xDA	; 218
    4d0e:	f1 e0       	ldi	r31, 0x01	; 1
    4d10:	d7 01       	movw	r26, r14
    4d12:	01 90       	ld	r0, Z+
    4d14:	0d 92       	st	X+, r0
    4d16:	8a 95       	dec	r24
    4d18:	e1 f7       	brne	.-8      	; 0x4d12 <_ZN5menue4drawEv+0x17a>
    4d1a:	8d e0       	ldi	r24, 0x0D	; 13
    4d1c:	8e 8b       	std	Y+22, r24	; 0x16
    4d1e:	0c e0       	ldi	r16, 0x0C	; 12
    4d20:	10 e0       	ldi	r17, 0x00	; 0
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+2*charsize,5*charhighte);}
    4d22:	fe 01       	movw	r30, r28
    4d24:	e1 0f       	add	r30, r17
    4d26:	f1 1d       	adc	r31, r1
    4d28:	28 e2       	ldi	r18, 0x28	; 40
    4d2a:	40 2f       	mov	r20, r16
    4d2c:	62 81       	ldd	r22, Z+2	; 0x02
    4d2e:	8f 89       	ldd	r24, Y+23	; 0x17
    4d30:	98 8d       	ldd	r25, Y+24	; 0x18
    4d32:	0e 94 00 0c 	call	0x1800	; 0x1800 <_ZN7Display9draw_ASCIEhhh>
    4d36:	1f 5f       	subi	r17, 0xFF	; 255
    4d38:	0a 5f       	subi	r16, 0xFA	; 250
    4d3a:	8e 89       	ldd	r24, Y+22	; 0x16
    4d3c:	18 17       	cp	r17, r24
    4d3e:	88 f3       	brcs	.-30     	; 0x4d22 <_ZN5menue4drawEv+0x18a>
		buffersize=sprintf(buffer,"Display aus");
    4d40:	8c e0       	ldi	r24, 0x0C	; 12
    4d42:	e8 ee       	ldi	r30, 0xE8	; 232
    4d44:	f1 e0       	ldi	r31, 0x01	; 1
    4d46:	d7 01       	movw	r26, r14
    4d48:	01 90       	ld	r0, Z+
    4d4a:	0d 92       	st	X+, r0
    4d4c:	8a 95       	dec	r24
    4d4e:	e1 f7       	brne	.-8      	; 0x4d48 <_ZN5menue4drawEv+0x1b0>
    4d50:	8b e0       	ldi	r24, 0x0B	; 11
    4d52:	8e 8b       	std	Y+22, r24	; 0x16
    4d54:	0c e0       	ldi	r16, 0x0C	; 12
    4d56:	10 e0       	ldi	r17, 0x00	; 0
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+2*charsize,6*charhighte);}
    4d58:	fe 01       	movw	r30, r28
    4d5a:	e1 0f       	add	r30, r17
    4d5c:	f1 1d       	adc	r31, r1
    4d5e:	20 e3       	ldi	r18, 0x30	; 48
    4d60:	40 2f       	mov	r20, r16
    4d62:	62 81       	ldd	r22, Z+2	; 0x02
    4d64:	8f 89       	ldd	r24, Y+23	; 0x17
    4d66:	98 8d       	ldd	r25, Y+24	; 0x18
    4d68:	0e 94 00 0c 	call	0x1800	; 0x1800 <_ZN7Display9draw_ASCIEhhh>
    4d6c:	1f 5f       	subi	r17, 0xFF	; 255
    4d6e:	0a 5f       	subi	r16, 0xFA	; 250
    4d70:	8e 89       	ldd	r24, Y+22	; 0x16
    4d72:	18 17       	cp	r17, r24
    4d74:	88 f3       	brcs	.-30     	; 0x4d58 <_ZN5menue4drawEv+0x1c0>
		oled->draw_ASCI('>',0*charsize,(posy+2)*charhighte);
    4d76:	2d a1       	ldd	r18, Y+37	; 0x25
    4d78:	22 0f       	add	r18, r18
    4d7a:	22 0f       	add	r18, r18
    4d7c:	22 0f       	add	r18, r18
    4d7e:	20 5f       	subi	r18, 0xF0	; 240
    4d80:	40 e0       	ldi	r20, 0x00	; 0
    4d82:	6e e3       	ldi	r22, 0x3E	; 62
    4d84:	8f 89       	ldd	r24, Y+23	; 0x17
    4d86:	98 8d       	ldd	r25, Y+24	; 0x18
    4d88:	0e 94 00 0c 	call	0x1800	; 0x1800 <_ZN7Display9draw_ASCIEhhh>
		oled->clearFrame();
	}

	//send the frame to the display
	void send(){
		oled->sendFrame();	
    4d8c:	8f 89       	ldd	r24, Y+23	; 0x17
    4d8e:	98 8d       	ldd	r25, Y+24	; 0x18
    4d90:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <_ZN7Display9sendFrameEv>
    4d94:	04 c0       	rjmp	.+8      	; 0x4d9e <_ZN5menue4drawEv+0x206>
		return 0;
	}
	
	//drawfunktion
	virtual void draw(){
		oled->clearFrame();
    4d96:	10 e5       	ldi	r17, 0x50	; 80
    4d98:	c1 2c       	mov	r12, r1
    4d9a:	d1 2c       	mov	r13, r1
    4d9c:	54 cf       	rjmp	.-344    	; 0x4c46 <_ZN5menue4drawEv+0xae>
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+2*charsize,5*charhighte);}
		buffersize=sprintf(buffer,"Display aus");
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+2*charsize,6*charhighte);}
		oled->draw_ASCI('>',0*charsize,(posy+2)*charhighte);
		send();
	}
    4d9e:	df 91       	pop	r29
    4da0:	cf 91       	pop	r28
    4da2:	1f 91       	pop	r17
    4da4:	0f 91       	pop	r16
    4da6:	ff 90       	pop	r15
    4da8:	ef 90       	pop	r14
    4daa:	df 90       	pop	r13
    4dac:	cf 90       	pop	r12
    4dae:	08 95       	ret

00004db0 <_ZN5tacho4drawEv>:
		}
		return 0;
	}

	//Anzeige schalten
	void draw(){
    4db0:	af 92       	push	r10
    4db2:	bf 92       	push	r11
    4db4:	cf 92       	push	r12
    4db6:	df 92       	push	r13
    4db8:	ef 92       	push	r14
    4dba:	ff 92       	push	r15
    4dbc:	0f 93       	push	r16
    4dbe:	1f 93       	push	r17
    4dc0:	cf 93       	push	r28
    4dc2:	df 93       	push	r29
    4dc4:	ec 01       	movw	r28, r24
		return 0;
	}
	
	//drawfunktion
	virtual void draw(){
		oled->clearFrame();
    4dc6:	8f 89       	ldd	r24, Y+23	; 0x17
    4dc8:	98 8d       	ldd	r25, Y+24	; 0x18
    4dca:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <_ZN7Display10clearFrameEv>
				for(uint8_t i=((SSD1306_WIDTH/charsize)-buffersize);i<(SSD1306_WIDTH/charsize);i++){
					oled->draw_ASCI(buffer[i-((SSD1306_WIDTH/charsize)-buffersize)],i*charsize,0);
				}
				break;
			case 2:	//standard Header fuer fast alle Pages
				buffersize=sprintf(buffer,"Bat.: %i%%",Batteriestatus());
    4dce:	74 de       	rcall	.-792    	; 0x4ab8 <_Z14Batteriestatusv>
    4dd0:	5e 01       	movw	r10, r28
    4dd2:	22 e0       	ldi	r18, 0x02	; 2
    4dd4:	a2 0e       	add	r10, r18
    4dd6:	b1 1c       	adc	r11, r1
    4dd8:	28 2f       	mov	r18, r24
    4dda:	08 2e       	mov	r0, r24
    4ddc:	00 0c       	add	r0, r0
    4dde:	33 0b       	sbc	r19, r19
    4de0:	3f 93       	push	r19
    4de2:	8f 93       	push	r24
    4de4:	84 ef       	ldi	r24, 0xF4	; 244
    4de6:	91 e0       	ldi	r25, 0x01	; 1
    4de8:	9f 93       	push	r25
    4dea:	8f 93       	push	r24
    4dec:	bf 92       	push	r11
    4dee:	af 92       	push	r10
    4df0:	0e 94 67 48 	call	0x90ce	; 0x90ce <sprintf>
    4df4:	8e 8b       	std	Y+22, r24	; 0x16
				for(uint8_t i=((SSD1306_WIDTH/charsize)-buffersize);i<(SSD1306_WIDTH/charsize);i++){
    4df6:	95 e1       	ldi	r25, 0x15	; 21
    4df8:	09 2f       	mov	r16, r25
    4dfa:	08 1b       	sub	r16, r24
    4dfc:	0f 90       	pop	r0
    4dfe:	0f 90       	pop	r0
    4e00:	0f 90       	pop	r0
    4e02:	0f 90       	pop	r0
    4e04:	0f 90       	pop	r0
    4e06:	0f 90       	pop	r0
    4e08:	05 31       	cpi	r16, 0x15	; 21
    4e0a:	08 f0       	brcs	.+2      	; 0x4e0e <_ZN5tacho4drawEv+0x5e>
    4e0c:	d4 c1       	rjmp	.+936    	; 0x51b6 <_ZN5tacho4drawEv+0x406>
    4e0e:	e0 2e       	mov	r14, r16
    4e10:	ee 0c       	add	r14, r14
    4e12:	e0 0e       	add	r14, r16
    4e14:	1e 2d       	mov	r17, r14
    4e16:	11 0f       	add	r17, r17
					oled->draw_ASCI(buffer[i-((SSD1306_WIDTH/charsize)-buffersize)],i*charsize,0);
    4e18:	8e 89       	ldd	r24, Y+22	; 0x16
    4e1a:	fe 01       	movw	r30, r28
    4e1c:	e0 0f       	add	r30, r16
    4e1e:	f1 1d       	adc	r31, r1
    4e20:	e8 0f       	add	r30, r24
    4e22:	f1 1d       	adc	r31, r1
    4e24:	73 97       	sbiw	r30, 0x13	; 19
    4e26:	20 e0       	ldi	r18, 0x00	; 0
    4e28:	41 2f       	mov	r20, r17
    4e2a:	60 81       	ld	r22, Z
    4e2c:	8f 89       	ldd	r24, Y+23	; 0x17
    4e2e:	98 8d       	ldd	r25, Y+24	; 0x18
    4e30:	0e 94 00 0c 	call	0x1800	; 0x1800 <_ZN7Display9draw_ASCIEhhh>
					oled->draw_ASCI(buffer[i-((SSD1306_WIDTH/charsize)-buffersize)],i*charsize,0);
				}
				break;
			case 2:	//standard Header fuer fast alle Pages
				buffersize=sprintf(buffer,"Bat.: %i%%",Batteriestatus());
				for(uint8_t i=((SSD1306_WIDTH/charsize)-buffersize);i<(SSD1306_WIDTH/charsize);i++){
    4e34:	0f 5f       	subi	r16, 0xFF	; 255
    4e36:	1a 5f       	subi	r17, 0xFA	; 250
    4e38:	05 31       	cpi	r16, 0x15	; 21
    4e3a:	71 f7       	brne	.-36     	; 0x4e18 <_ZN5tacho4drawEv+0x68>
    4e3c:	bc c1       	rjmp	.+888    	; 0x51b6 <_ZN5tacho4drawEv+0x406>
	}
	
	//draw bottom and overload it
	void bottom(){
		for(uint8_t i=0;i<8;i++){
			oled->draw_ASCI(rtc->msg_dat[i],i*charsize+(SSD1306_WIDTH-bitsderrtc*charsize),7*charhighte);
    4e3e:	e9 8d       	ldd	r30, Y+25	; 0x19
    4e40:	fa 8d       	ldd	r31, Y+26	; 0x1a
    4e42:	ec 0d       	add	r30, r12
    4e44:	fd 1d       	adc	r31, r13
    4e46:	28 e3       	ldi	r18, 0x38	; 56
    4e48:	41 2f       	mov	r20, r17
    4e4a:	60 85       	ldd	r22, Z+8	; 0x08
    4e4c:	8f 89       	ldd	r24, Y+23	; 0x17
    4e4e:	98 8d       	ldd	r25, Y+24	; 0x18
    4e50:	0e 94 00 0c 	call	0x1800	; 0x1800 <_ZN7Display9draw_ASCIEhhh>
    4e54:	3f ef       	ldi	r19, 0xFF	; 255
    4e56:	c3 1a       	sub	r12, r19
    4e58:	d3 0a       	sbc	r13, r19
    4e5a:	1a 5f       	subi	r17, 0xFA	; 250
		}
	}
	
	//draw bottom and overload it
	void bottom(){
		for(uint8_t i=0;i<8;i++){
    4e5c:	10 38       	cpi	r17, 0x80	; 128
    4e5e:	79 f7       	brne	.-34     	; 0x4e3e <_ZN5tacho4drawEv+0x8e>
		monitor::draw();
		header(2);
		bottom();

		//Rahmen zeichnen
		oled->drawHLine(0,SSD1306_HEIGHT-9,SSD1306_WIDTH);
    4e60:	20 e8       	ldi	r18, 0x80	; 128
    4e62:	47 e3       	ldi	r20, 0x37	; 55
    4e64:	60 e0       	ldi	r22, 0x00	; 0
    4e66:	8f 89       	ldd	r24, Y+23	; 0x17
    4e68:	98 8d       	ldd	r25, Y+24	; 0x18
    4e6a:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <_ZN7Display9drawHLineEhhh>
		oled->drawHLine(0,numbersmalhight-1,SSD1306_WIDTH/2+5);
    4e6e:	25 e4       	ldi	r18, 0x45	; 69
    4e70:	4f e0       	ldi	r20, 0x0F	; 15
    4e72:	60 e0       	ldi	r22, 0x00	; 0
    4e74:	8f 89       	ldd	r24, Y+23	; 0x17
    4e76:	98 8d       	ldd	r25, Y+24	; 0x18
    4e78:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <_ZN7Display9drawHLineEhhh>
		oled->drawHLine(SSD1306_WIDTH/2+5,charhighte-1,SSD1306_WIDTH/2-5);
    4e7c:	2b e3       	ldi	r18, 0x3B	; 59
    4e7e:	47 e0       	ldi	r20, 0x07	; 7
    4e80:	65 e4       	ldi	r22, 0x45	; 69
    4e82:	8f 89       	ldd	r24, Y+23	; 0x17
    4e84:	98 8d       	ldd	r25, Y+24	; 0x18
    4e86:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <_ZN7Display9drawHLineEhhh>
		oled->drawVLine(SSD1306_WIDTH/2+5,0,numbersmalhight);
    4e8a:	20 e1       	ldi	r18, 0x10	; 16
    4e8c:	40 e0       	ldi	r20, 0x00	; 0
    4e8e:	65 e4       	ldi	r22, 0x45	; 69
    4e90:	8f 89       	ldd	r24, Y+23	; 0x17
    4e92:	98 8d       	ldd	r25, Y+24	; 0x18
    4e94:	0e 94 cc 0b 	call	0x1798	; 0x1798 <_ZN7Display9drawVLineEhhh>
		oled->drawHLine(SSD1306_WIDTH-4*numbersmalsize-1,5*charhighte-1,4*numbersmalsize+1);
    4e98:	21 e4       	ldi	r18, 0x41	; 65
    4e9a:	47 e2       	ldi	r20, 0x27	; 39
    4e9c:	6f e3       	ldi	r22, 0x3F	; 63
    4e9e:	8f 89       	ldd	r24, Y+23	; 0x17
    4ea0:	98 8d       	ldd	r25, Y+24	; 0x18
    4ea2:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <_ZN7Display9drawHLineEhhh>
		oled->drawVLine(SSD1306_WIDTH-4*numbersmalsize-1,numbersmalhight,SSD1306_HEIGHT-numbersmalhight);
    4ea6:	20 e3       	ldi	r18, 0x30	; 48
    4ea8:	40 e1       	ldi	r20, 0x10	; 16
    4eaa:	6f e3       	ldi	r22, 0x3F	; 63
    4eac:	8f 89       	ldd	r24, Y+23	; 0x17
    4eae:	98 8d       	ldd	r25, Y+24	; 0x18
    4eb0:	0e 94 cc 0b 	call	0x1798	; 0x1798 <_ZN7Display9drawVLineEhhh>
		oled->drawHLine(SSD1306_WIDTH-4*numbersmalsize-1,3*charhighte,4*numbersmalsize+1);
    4eb4:	21 e4       	ldi	r18, 0x41	; 65
    4eb6:	48 e1       	ldi	r20, 0x18	; 24
    4eb8:	6f e3       	ldi	r22, 0x3F	; 63
    4eba:	8f 89       	ldd	r24, Y+23	; 0x17
    4ebc:	98 8d       	ldd	r25, Y+24	; 0x18
    4ebe:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <_ZN7Display9drawHLineEhhh>

		//lesbare Uhr
		oled->draw_number16x16(rtc->msg_uhr[0]-'0',0*numbersmalsize,0*charhighte);
    4ec2:	e9 8d       	ldd	r30, Y+25	; 0x19
    4ec4:	fa 8d       	ldd	r31, Y+26	; 0x1a
    4ec6:	60 81       	ld	r22, Z
    4ec8:	60 53       	subi	r22, 0x30	; 48
    4eca:	20 e0       	ldi	r18, 0x00	; 0
    4ecc:	40 e0       	ldi	r20, 0x00	; 0
    4ece:	8f 89       	ldd	r24, Y+23	; 0x17
    4ed0:	98 8d       	ldd	r25, Y+24	; 0x18
    4ed2:	0e 94 4a 0c 	call	0x1894	; 0x1894 <_ZN7Display16draw_number16x16Ehhh>
		oled->draw_number16x16(rtc->msg_uhr[1]-'0',1*numbersmalsize,0*charhighte);
    4ed6:	e9 8d       	ldd	r30, Y+25	; 0x19
    4ed8:	fa 8d       	ldd	r31, Y+26	; 0x1a
    4eda:	61 81       	ldd	r22, Z+1	; 0x01
    4edc:	60 53       	subi	r22, 0x30	; 48
    4ede:	20 e0       	ldi	r18, 0x00	; 0
    4ee0:	40 e1       	ldi	r20, 0x10	; 16
    4ee2:	8f 89       	ldd	r24, Y+23	; 0x17
    4ee4:	98 8d       	ldd	r25, Y+24	; 0x18
    4ee6:	0e 94 4a 0c 	call	0x1894	; 0x1894 <_ZN7Display16draw_number16x16Ehhh>
		oled->draw_number16x16(rtc->msg_uhr[3]-'0',2.33*numbersmalsize,0*charhighte);
    4eea:	e9 8d       	ldd	r30, Y+25	; 0x19
    4eec:	fa 8d       	ldd	r31, Y+26	; 0x1a
    4eee:	63 81       	ldd	r22, Z+3	; 0x03
    4ef0:	60 53       	subi	r22, 0x30	; 48
    4ef2:	20 e0       	ldi	r18, 0x00	; 0
    4ef4:	45 e2       	ldi	r20, 0x25	; 37
    4ef6:	8f 89       	ldd	r24, Y+23	; 0x17
    4ef8:	98 8d       	ldd	r25, Y+24	; 0x18
    4efa:	0e 94 4a 0c 	call	0x1894	; 0x1894 <_ZN7Display16draw_number16x16Ehhh>
		oled->draw_number16x16(rtc->msg_uhr[4]-'0',3.33*numbersmalsize,0*charhighte);
    4efe:	e9 8d       	ldd	r30, Y+25	; 0x19
    4f00:	fa 8d       	ldd	r31, Y+26	; 0x1a
    4f02:	64 81       	ldd	r22, Z+4	; 0x04
    4f04:	60 53       	subi	r22, 0x30	; 48
    4f06:	20 e0       	ldi	r18, 0x00	; 0
    4f08:	45 e3       	ldi	r20, 0x35	; 53
    4f0a:	8f 89       	ldd	r24, Y+23	; 0x17
    4f0c:	98 8d       	ldd	r25, Y+24	; 0x18
    4f0e:	0e 94 4a 0c 	call	0x1894	; 0x1894 <_ZN7Display16draw_number16x16Ehhh>

		//Ausgabe der Geschwidigkeit
		buffersize=sprintf(buffer,"%3.1f",geschw);
    4f12:	80 91 86 08 	lds	r24, 0x0886
    4f16:	8f 93       	push	r24
    4f18:	80 91 85 08 	lds	r24, 0x0885
    4f1c:	8f 93       	push	r24
    4f1e:	80 91 84 08 	lds	r24, 0x0884
    4f22:	8f 93       	push	r24
    4f24:	80 91 83 08 	lds	r24, 0x0883
    4f28:	8f 93       	push	r24
    4f2a:	8f ef       	ldi	r24, 0xFF	; 255
    4f2c:	91 e0       	ldi	r25, 0x01	; 1
    4f2e:	9f 93       	push	r25
    4f30:	8f 93       	push	r24
    4f32:	bf 92       	push	r11
    4f34:	af 92       	push	r10
    4f36:	0e 94 67 48 	call	0x90ce	; 0x90ce <sprintf>
    4f3a:	8e 8b       	std	Y+22, r24	; 0x16
		for(uint8_t i=((SSD1306_WIDTH/numbersmalsize)-buffersize);i<((SSD1306_WIDTH/numbersmalsize));i++){
    4f3c:	98 e0       	ldi	r25, 0x08	; 8
    4f3e:	09 2f       	mov	r16, r25
    4f40:	08 1b       	sub	r16, r24
    4f42:	8d b7       	in	r24, 0x3d	; 61
    4f44:	9e b7       	in	r25, 0x3e	; 62
    4f46:	08 96       	adiw	r24, 0x08	; 8
    4f48:	0f b6       	in	r0, 0x3f	; 63
    4f4a:	f8 94       	cli
    4f4c:	9e bf       	out	0x3e, r25	; 62
    4f4e:	0f be       	out	0x3f, r0	; 63
    4f50:	8d bf       	out	0x3d, r24	; 61
    4f52:	08 30       	cpi	r16, 0x08	; 8
    4f54:	f8 f4       	brcc	.+62     	; 0x4f94 <_ZN5tacho4drawEv+0x1e4>
    4f56:	10 2f       	mov	r17, r16
    4f58:	12 95       	swap	r17
    4f5a:	10 7f       	andi	r17, 0xF0	; 240
			if(buffer[i-((SSD1306_WIDTH/numbersmalsize)-buffersize)]=='.'){
    4f5c:	8e 89       	ldd	r24, Y+22	; 0x16
    4f5e:	fe 01       	movw	r30, r28
    4f60:	e0 0f       	add	r30, r16
    4f62:	f1 1d       	adc	r31, r1
    4f64:	e8 0f       	add	r30, r24
    4f66:	f1 1d       	adc	r31, r1
    4f68:	36 97       	sbiw	r30, 0x06	; 6
    4f6a:	60 81       	ld	r22, Z
    4f6c:	6e 32       	cpi	r22, 0x2E	; 46
    4f6e:	39 f4       	brne	.+14     	; 0x4f7e <_ZN5tacho4drawEv+0x1ce>
				oled->draw_ASCI(buffer[i-((SSD1306_WIDTH/numbersmalsize)-buffersize)],i*numbersmalsize,4*charhighte);
    4f70:	20 e2       	ldi	r18, 0x20	; 32
    4f72:	41 2f       	mov	r20, r17
    4f74:	8f 89       	ldd	r24, Y+23	; 0x17
    4f76:	98 8d       	ldd	r25, Y+24	; 0x18
    4f78:	0e 94 00 0c 	call	0x1800	; 0x1800 <_ZN7Display9draw_ASCIEhhh>
    4f7c:	07 c0       	rjmp	.+14     	; 0x4f8c <_ZN5tacho4drawEv+0x1dc>
			}
			else{
				oled->draw_number16x16(buffer[i-((SSD1306_WIDTH/numbersmalsize)-buffersize)]-'0',i*numbersmalsize,3*charhighte);
    4f7e:	60 53       	subi	r22, 0x30	; 48
    4f80:	28 e1       	ldi	r18, 0x18	; 24
    4f82:	41 2f       	mov	r20, r17
    4f84:	8f 89       	ldd	r24, Y+23	; 0x17
    4f86:	98 8d       	ldd	r25, Y+24	; 0x18
    4f88:	0e 94 4a 0c 	call	0x1894	; 0x1894 <_ZN7Display16draw_number16x16Ehhh>
		oled->draw_number16x16(rtc->msg_uhr[3]-'0',2.33*numbersmalsize,0*charhighte);
		oled->draw_number16x16(rtc->msg_uhr[4]-'0',3.33*numbersmalsize,0*charhighte);

		//Ausgabe der Geschwidigkeit
		buffersize=sprintf(buffer,"%3.1f",geschw);
		for(uint8_t i=((SSD1306_WIDTH/numbersmalsize)-buffersize);i<((SSD1306_WIDTH/numbersmalsize));i++){
    4f8c:	0f 5f       	subi	r16, 0xFF	; 255
    4f8e:	10 5f       	subi	r17, 0xF0	; 240
    4f90:	08 30       	cpi	r16, 0x08	; 8
    4f92:	21 f7       	brne	.-56     	; 0x4f5c <_ZN5tacho4drawEv+0x1ac>
		//Nadel erst, wenn Kompass implementiert
		//Anzeige der Richtung als Alternative
		//anzeige_kleinenadel(31,31+8,angle);

		//anzeige der gesammtstrecke
		buffersize=sprintf(buffer,"%.3fkm",strecke/1000);
    4f94:	20 e0       	ldi	r18, 0x00	; 0
    4f96:	30 e0       	ldi	r19, 0x00	; 0
    4f98:	4a e7       	ldi	r20, 0x7A	; 122
    4f9a:	54 e4       	ldi	r21, 0x44	; 68
    4f9c:	60 91 7f 08 	lds	r22, 0x087F
    4fa0:	70 91 80 08 	lds	r23, 0x0880
    4fa4:	80 91 81 08 	lds	r24, 0x0881
    4fa8:	90 91 82 08 	lds	r25, 0x0882
    4fac:	0e 94 b0 3e 	call	0x7d60	; 0x7d60 <__divsf3>
    4fb0:	9f 93       	push	r25
    4fb2:	8f 93       	push	r24
    4fb4:	7f 93       	push	r23
    4fb6:	6f 93       	push	r22
    4fb8:	85 e0       	ldi	r24, 0x05	; 5
    4fba:	92 e0       	ldi	r25, 0x02	; 2
    4fbc:	9f 93       	push	r25
    4fbe:	8f 93       	push	r24
    4fc0:	bf 92       	push	r11
    4fc2:	af 92       	push	r10
    4fc4:	0e 94 67 48 	call	0x90ce	; 0x90ce <sprintf>
    4fc8:	8e 8b       	std	Y+22, r24	; 0x16
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+70,2*charhighte);}
    4fca:	2d b7       	in	r18, 0x3d	; 61
    4fcc:	3e b7       	in	r19, 0x3e	; 62
    4fce:	28 5f       	subi	r18, 0xF8	; 248
    4fd0:	3f 4f       	sbci	r19, 0xFF	; 255
    4fd2:	0f b6       	in	r0, 0x3f	; 63
    4fd4:	f8 94       	cli
    4fd6:	3e bf       	out	0x3e, r19	; 62
    4fd8:	0f be       	out	0x3f, r0	; 63
    4fda:	2d bf       	out	0x3d, r18	; 61
    4fdc:	88 23       	and	r24, r24
    4fde:	89 f0       	breq	.+34     	; 0x5002 <_ZN5tacho4drawEv+0x252>
    4fe0:	16 e4       	ldi	r17, 0x46	; 70
    4fe2:	f1 2c       	mov	r15, r1
    4fe4:	fe 01       	movw	r30, r28
    4fe6:	ef 0d       	add	r30, r15
    4fe8:	f1 1d       	adc	r31, r1
    4fea:	20 e1       	ldi	r18, 0x10	; 16
    4fec:	41 2f       	mov	r20, r17
    4fee:	62 81       	ldd	r22, Z+2	; 0x02
    4ff0:	8f 89       	ldd	r24, Y+23	; 0x17
    4ff2:	98 8d       	ldd	r25, Y+24	; 0x18
    4ff4:	0e 94 00 0c 	call	0x1800	; 0x1800 <_ZN7Display9draw_ASCIEhhh>
    4ff8:	f3 94       	inc	r15
    4ffa:	1a 5f       	subi	r17, 0xFA	; 250
    4ffc:	8e 89       	ldd	r24, Y+22	; 0x16
    4ffe:	f8 16       	cp	r15, r24
    5000:	88 f3       	brcs	.-30     	; 0x4fe4 <_ZN5tacho4drawEv+0x234>

		//anzeige der max geschwindigkeit
		buffersize=sprintf(buffer,"%.1fkm/h",maxgeschw);
    5002:	80 91 7e 08 	lds	r24, 0x087E
    5006:	8f 93       	push	r24
    5008:	80 91 7d 08 	lds	r24, 0x087D
    500c:	8f 93       	push	r24
    500e:	80 91 7c 08 	lds	r24, 0x087C
    5012:	8f 93       	push	r24
    5014:	80 91 7b 08 	lds	r24, 0x087B
    5018:	8f 93       	push	r24
    501a:	8c e0       	ldi	r24, 0x0C	; 12
    501c:	92 e0       	ldi	r25, 0x02	; 2
    501e:	9f 93       	push	r25
    5020:	8f 93       	push	r24
    5022:	bf 92       	push	r11
    5024:	af 92       	push	r10
    5026:	0e 94 67 48 	call	0x90ce	; 0x90ce <sprintf>
    502a:	8e 8b       	std	Y+22, r24	; 0x16
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+70,5*charhighte);}
    502c:	2d b7       	in	r18, 0x3d	; 61
    502e:	3e b7       	in	r19, 0x3e	; 62
    5030:	28 5f       	subi	r18, 0xF8	; 248
    5032:	3f 4f       	sbci	r19, 0xFF	; 255
    5034:	0f b6       	in	r0, 0x3f	; 63
    5036:	f8 94       	cli
    5038:	3e bf       	out	0x3e, r19	; 62
    503a:	0f be       	out	0x3f, r0	; 63
    503c:	2d bf       	out	0x3d, r18	; 61
    503e:	88 23       	and	r24, r24
    5040:	89 f0       	breq	.+34     	; 0x5064 <_ZN5tacho4drawEv+0x2b4>
    5042:	16 e4       	ldi	r17, 0x46	; 70
    5044:	f1 2c       	mov	r15, r1
    5046:	fe 01       	movw	r30, r28
    5048:	ef 0d       	add	r30, r15
    504a:	f1 1d       	adc	r31, r1
    504c:	28 e2       	ldi	r18, 0x28	; 40
    504e:	41 2f       	mov	r20, r17
    5050:	62 81       	ldd	r22, Z+2	; 0x02
    5052:	8f 89       	ldd	r24, Y+23	; 0x17
    5054:	98 8d       	ldd	r25, Y+24	; 0x18
    5056:	0e 94 00 0c 	call	0x1800	; 0x1800 <_ZN7Display9draw_ASCIEhhh>
    505a:	f3 94       	inc	r15
    505c:	1a 5f       	subi	r17, 0xFA	; 250
    505e:	8e 89       	ldd	r24, Y+22	; 0x16
    5060:	f8 16       	cp	r15, r24
    5062:	88 f3       	brcs	.-30     	; 0x5046 <_ZN5tacho4drawEv+0x296>

		//anzeige der Fahrtzeit
		buffersize=sprintf(buffer,"%02i:%02i:%02i",uint8_t(Fahrtzeit/3600),uint8_t(Fahrtzeit/60),uint8_t(Fahrtzeit%60));
    5064:	c0 90 77 08 	lds	r12, 0x0877
    5068:	d0 90 78 08 	lds	r13, 0x0878
    506c:	e0 90 79 08 	lds	r14, 0x0879
    5070:	f0 90 7a 08 	lds	r15, 0x087A
    5074:	c7 01       	movw	r24, r14
    5076:	b6 01       	movw	r22, r12
    5078:	2c e3       	ldi	r18, 0x3C	; 60
    507a:	30 e0       	ldi	r19, 0x00	; 0
    507c:	40 e0       	ldi	r20, 0x00	; 0
    507e:	50 e0       	ldi	r21, 0x00	; 0
    5080:	0e 94 ae 45 	call	0x8b5c	; 0x8b5c <__udivmodsi4>
    5084:	1f 92       	push	r1
    5086:	6f 93       	push	r22
    5088:	1f 92       	push	r1
    508a:	2f 93       	push	r18
    508c:	c7 01       	movw	r24, r14
    508e:	b6 01       	movw	r22, r12
    5090:	20 e1       	ldi	r18, 0x10	; 16
    5092:	3e e0       	ldi	r19, 0x0E	; 14
    5094:	40 e0       	ldi	r20, 0x00	; 0
    5096:	50 e0       	ldi	r21, 0x00	; 0
    5098:	0e 94 ae 45 	call	0x8b5c	; 0x8b5c <__udivmodsi4>
    509c:	1f 92       	push	r1
    509e:	2f 93       	push	r18
    50a0:	85 e1       	ldi	r24, 0x15	; 21
    50a2:	92 e0       	ldi	r25, 0x02	; 2
    50a4:	9f 93       	push	r25
    50a6:	8f 93       	push	r24
    50a8:	bf 92       	push	r11
    50aa:	af 92       	push	r10
    50ac:	0e 94 67 48 	call	0x90ce	; 0x90ce <sprintf>
    50b0:	8e 8b       	std	Y+22, r24	; 0x16
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+70,6*charhighte);}
    50b2:	2d b7       	in	r18, 0x3d	; 61
    50b4:	3e b7       	in	r19, 0x3e	; 62
    50b6:	26 5f       	subi	r18, 0xF6	; 246
    50b8:	3f 4f       	sbci	r19, 0xFF	; 255
    50ba:	0f b6       	in	r0, 0x3f	; 63
    50bc:	f8 94       	cli
    50be:	3e bf       	out	0x3e, r19	; 62
    50c0:	0f be       	out	0x3f, r0	; 63
    50c2:	2d bf       	out	0x3d, r18	; 61
    50c4:	88 23       	and	r24, r24
    50c6:	89 f0       	breq	.+34     	; 0x50ea <_ZN5tacho4drawEv+0x33a>
    50c8:	16 e4       	ldi	r17, 0x46	; 70
    50ca:	f1 2c       	mov	r15, r1
    50cc:	fe 01       	movw	r30, r28
    50ce:	ef 0d       	add	r30, r15
    50d0:	f1 1d       	adc	r31, r1
    50d2:	20 e3       	ldi	r18, 0x30	; 48
    50d4:	41 2f       	mov	r20, r17
    50d6:	62 81       	ldd	r22, Z+2	; 0x02
    50d8:	8f 89       	ldd	r24, Y+23	; 0x17
    50da:	98 8d       	ldd	r25, Y+24	; 0x18
    50dc:	0e 94 00 0c 	call	0x1800	; 0x1800 <_ZN7Display9draw_ASCIEhhh>
    50e0:	f3 94       	inc	r15
    50e2:	1a 5f       	subi	r17, 0xFA	; 250
    50e4:	8e 89       	ldd	r24, Y+22	; 0x16
    50e6:	f8 16       	cp	r15, r24
    50e8:	88 f3       	brcs	.-30     	; 0x50cc <_ZN5tacho4drawEv+0x31c>
		
		//anzeige der durschschnittsgeschw
		if (Fahrtzeit==0)
    50ea:	60 91 77 08 	lds	r22, 0x0877
    50ee:	70 91 78 08 	lds	r23, 0x0878
    50f2:	80 91 79 08 	lds	r24, 0x0879
    50f6:	90 91 7a 08 	lds	r25, 0x087A
    50fa:	61 15       	cp	r22, r1
    50fc:	71 05       	cpc	r23, r1
    50fe:	81 05       	cpc	r24, r1
    5100:	91 05       	cpc	r25, r1
    5102:	b1 f4       	brne	.+44     	; 0x5130 <_ZN5tacho4drawEv+0x380>
		{
			buffersize=sprintf(buffer,"%.1fkm/h",0.0);
    5104:	1f 92       	push	r1
    5106:	1f 92       	push	r1
    5108:	1f 92       	push	r1
    510a:	1f 92       	push	r1
    510c:	8c e0       	ldi	r24, 0x0C	; 12
    510e:	92 e0       	ldi	r25, 0x02	; 2
    5110:	9f 93       	push	r25
    5112:	8f 93       	push	r24
    5114:	bf 92       	push	r11
    5116:	af 92       	push	r10
    5118:	0e 94 67 48 	call	0x90ce	; 0x90ce <sprintf>
    511c:	8e 8b       	std	Y+22, r24	; 0x16
    511e:	8d b7       	in	r24, 0x3d	; 61
    5120:	9e b7       	in	r25, 0x3e	; 62
    5122:	08 96       	adiw	r24, 0x08	; 8
    5124:	0f b6       	in	r0, 0x3f	; 63
    5126:	f8 94       	cli
    5128:	9e bf       	out	0x3e, r25	; 62
    512a:	0f be       	out	0x3f, r0	; 63
    512c:	8d bf       	out	0x3d, r24	; 61
    512e:	2a c0       	rjmp	.+84     	; 0x5184 <_ZN5tacho4drawEv+0x3d4>
		}
		else {
			buffersize=sprintf(buffer,"%.1fkm/h",(strecke/Fahrtzeit)*3.6);
    5130:	0e 94 49 3f 	call	0x7e92	; 0x7e92 <__floatunsisf>
    5134:	9b 01       	movw	r18, r22
    5136:	ac 01       	movw	r20, r24
    5138:	60 91 7f 08 	lds	r22, 0x087F
    513c:	70 91 80 08 	lds	r23, 0x0880
    5140:	80 91 81 08 	lds	r24, 0x0881
    5144:	90 91 82 08 	lds	r25, 0x0882
    5148:	0e 94 b0 3e 	call	0x7d60	; 0x7d60 <__divsf3>
    514c:	26 e6       	ldi	r18, 0x66	; 102
    514e:	36 e6       	ldi	r19, 0x66	; 102
    5150:	46 e6       	ldi	r20, 0x66	; 102
    5152:	50 e4       	ldi	r21, 0x40	; 64
    5154:	0e 94 64 40 	call	0x80c8	; 0x80c8 <__mulsf3>
    5158:	9f 93       	push	r25
    515a:	8f 93       	push	r24
    515c:	7f 93       	push	r23
    515e:	6f 93       	push	r22
    5160:	8c e0       	ldi	r24, 0x0C	; 12
    5162:	92 e0       	ldi	r25, 0x02	; 2
    5164:	9f 93       	push	r25
    5166:	8f 93       	push	r24
    5168:	bf 92       	push	r11
    516a:	af 92       	push	r10
    516c:	0e 94 67 48 	call	0x90ce	; 0x90ce <sprintf>
    5170:	8e 8b       	std	Y+22, r24	; 0x16
    5172:	2d b7       	in	r18, 0x3d	; 61
    5174:	3e b7       	in	r19, 0x3e	; 62
    5176:	28 5f       	subi	r18, 0xF8	; 248
    5178:	3f 4f       	sbci	r19, 0xFF	; 255
    517a:	0f b6       	in	r0, 0x3f	; 63
    517c:	f8 94       	cli
    517e:	3e bf       	out	0x3e, r19	; 62
    5180:	0f be       	out	0x3f, r0	; 63
    5182:	2d bf       	out	0x3d, r18	; 61
		}
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+75,1*charhighte);}
    5184:	8e 89       	ldd	r24, Y+22	; 0x16
    5186:	88 23       	and	r24, r24
    5188:	89 f0       	breq	.+34     	; 0x51ac <_ZN5tacho4drawEv+0x3fc>
    518a:	0b e4       	ldi	r16, 0x4B	; 75
    518c:	10 e0       	ldi	r17, 0x00	; 0
    518e:	fe 01       	movw	r30, r28
    5190:	e1 0f       	add	r30, r17
    5192:	f1 1d       	adc	r31, r1
    5194:	28 e0       	ldi	r18, 0x08	; 8
    5196:	40 2f       	mov	r20, r16
    5198:	62 81       	ldd	r22, Z+2	; 0x02
    519a:	8f 89       	ldd	r24, Y+23	; 0x17
    519c:	98 8d       	ldd	r25, Y+24	; 0x18
    519e:	0e 94 00 0c 	call	0x1800	; 0x1800 <_ZN7Display9draw_ASCIEhhh>
    51a2:	1f 5f       	subi	r17, 0xFF	; 255
    51a4:	0a 5f       	subi	r16, 0xFA	; 250
    51a6:	8e 89       	ldd	r24, Y+22	; 0x16
    51a8:	18 17       	cp	r17, r24
    51aa:	88 f3       	brcs	.-30     	; 0x518e <_ZN5tacho4drawEv+0x3de>
		oled->clearFrame();
	}

	//send the frame to the display
	void send(){
		oled->sendFrame();	
    51ac:	8f 89       	ldd	r24, Y+23	; 0x17
    51ae:	98 8d       	ldd	r25, Y+24	; 0x18
    51b0:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <_ZN7Display9sendFrameEv>
    51b4:	04 c0       	rjmp	.+8      	; 0x51be <_ZN5tacho4drawEv+0x40e>
		}
		return 0;
	}

	//Anzeige schalten
	void draw(){
    51b6:	10 e5       	ldi	r17, 0x50	; 80
    51b8:	c1 2c       	mov	r12, r1
    51ba:	d1 2c       	mov	r13, r1
    51bc:	40 ce       	rjmp	.-896    	; 0x4e3e <_ZN5tacho4drawEv+0x8e>
			buffersize=sprintf(buffer,"%.1fkm/h",(strecke/Fahrtzeit)*3.6);
		}
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+75,1*charhighte);}

		send();
	}
    51be:	df 91       	pop	r29
    51c0:	cf 91       	pop	r28
    51c2:	1f 91       	pop	r17
    51c4:	0f 91       	pop	r16
    51c6:	ff 90       	pop	r15
    51c8:	ef 90       	pop	r14
    51ca:	df 90       	pop	r13
    51cc:	cf 90       	pop	r12
    51ce:	bf 90       	pop	r11
    51d0:	af 90       	pop	r10
    51d2:	08 95       	ret

000051d4 <_ZN3uhr4drawEv>:
		}
	return 0;
	}

	//anzeige vorbereiten
	void draw()
    51d4:	ef 92       	push	r14
    51d6:	ff 92       	push	r15
    51d8:	0f 93       	push	r16
    51da:	1f 93       	push	r17
    51dc:	cf 93       	push	r28
    51de:	df 93       	push	r29
    51e0:	ec 01       	movw	r28, r24
		return 0;
	}
	
	//drawfunktion
	virtual void draw(){
		oled->clearFrame();
    51e2:	8f 89       	ldd	r24, Y+23	; 0x17
    51e4:	98 8d       	ldd	r25, Y+24	; 0x18
    51e6:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <_ZN7Display10clearFrameEv>
    51ea:	11 e4       	ldi	r17, 0x41	; 65
    51ec:	e1 2c       	mov	r14, r1
    51ee:	f1 2c       	mov	r15, r1
				for(uint8_t i=((SSD1306_WIDTH/charsize)-buffersize);i<(SSD1306_WIDTH/charsize);i++){
					oled->draw_ASCI(buffer[i-((SSD1306_WIDTH/charsize)-buffersize)],i*charsize,0);
				}
				break;
			case 1:	//standard Header fuer fast alle Pages
				for(uint8_t i=0;i<(bitsderrtc-3);i++){oled->draw_ASCI(rtc->msg_uhr[i],65+i*charsize,0*charhighte);}
    51f0:	e9 8d       	ldd	r30, Y+25	; 0x19
    51f2:	fa 8d       	ldd	r31, Y+26	; 0x1a
    51f4:	ee 0d       	add	r30, r14
    51f6:	ff 1d       	adc	r31, r15
    51f8:	20 e0       	ldi	r18, 0x00	; 0
    51fa:	41 2f       	mov	r20, r17
    51fc:	60 81       	ld	r22, Z
    51fe:	8f 89       	ldd	r24, Y+23	; 0x17
    5200:	98 8d       	ldd	r25, Y+24	; 0x18
    5202:	0e 94 00 0c 	call	0x1800	; 0x1800 <_ZN7Display9draw_ASCIEhhh>
    5206:	8f ef       	ldi	r24, 0xFF	; 255
    5208:	e8 1a       	sub	r14, r24
    520a:	f8 0a       	sbc	r15, r24
    520c:	1a 5f       	subi	r17, 0xFA	; 250
    520e:	1f 35       	cpi	r17, 0x5F	; 95
    5210:	79 f7       	brne	.-34     	; 0x51f0 <_ZN3uhr4drawEv+0x1c>
				buffersize=sprintf(buffer,"%i%%",Batteriestatus());
    5212:	52 dc       	rcall	.-1884   	; 0x4ab8 <_Z14Batteriestatusv>
    5214:	28 2f       	mov	r18, r24
    5216:	08 2e       	mov	r0, r24
    5218:	00 0c       	add	r0, r0
    521a:	33 0b       	sbc	r19, r19
    521c:	3f 93       	push	r19
    521e:	8f 93       	push	r24
    5220:	8a ef       	ldi	r24, 0xFA	; 250
    5222:	91 e0       	ldi	r25, 0x01	; 1
    5224:	9f 93       	push	r25
    5226:	8f 93       	push	r24
    5228:	ce 01       	movw	r24, r28
    522a:	02 96       	adiw	r24, 0x02	; 2
    522c:	9f 93       	push	r25
    522e:	8f 93       	push	r24
    5230:	0e 94 67 48 	call	0x90ce	; 0x90ce <sprintf>
    5234:	8e 8b       	std	Y+22, r24	; 0x16
				for(uint8_t i=((SSD1306_WIDTH/charsize)-buffersize);i<(SSD1306_WIDTH/charsize);i++){
    5236:	15 e1       	ldi	r17, 0x15	; 21
    5238:	18 1b       	sub	r17, r24
    523a:	0f 90       	pop	r0
    523c:	0f 90       	pop	r0
    523e:	0f 90       	pop	r0
    5240:	0f 90       	pop	r0
    5242:	0f 90       	pop	r0
    5244:	0f 90       	pop	r0
    5246:	15 31       	cpi	r17, 0x15	; 21
    5248:	08 f0       	brcs	.+2      	; 0x524c <_ZN3uhr4drawEv+0x78>
    524a:	5f c0       	rjmp	.+190    	; 0x530a <_ZN3uhr4drawEv+0x136>
    524c:	01 2f       	mov	r16, r17
    524e:	00 0f       	add	r16, r16
    5250:	01 0f       	add	r16, r17
    5252:	00 0f       	add	r16, r16
					oled->draw_ASCI(buffer[i-((SSD1306_WIDTH/charsize)-buffersize)],i*charsize,0);
    5254:	8e 89       	ldd	r24, Y+22	; 0x16
    5256:	fe 01       	movw	r30, r28
    5258:	e1 0f       	add	r30, r17
    525a:	f1 1d       	adc	r31, r1
    525c:	e8 0f       	add	r30, r24
    525e:	f1 1d       	adc	r31, r1
    5260:	73 97       	sbiw	r30, 0x13	; 19
    5262:	20 e0       	ldi	r18, 0x00	; 0
    5264:	40 2f       	mov	r20, r16
    5266:	60 81       	ld	r22, Z
    5268:	8f 89       	ldd	r24, Y+23	; 0x17
    526a:	98 8d       	ldd	r25, Y+24	; 0x18
    526c:	0e 94 00 0c 	call	0x1800	; 0x1800 <_ZN7Display9draw_ASCIEhhh>
				}
				break;
			case 1:	//standard Header fuer fast alle Pages
				for(uint8_t i=0;i<(bitsderrtc-3);i++){oled->draw_ASCI(rtc->msg_uhr[i],65+i*charsize,0*charhighte);}
				buffersize=sprintf(buffer,"%i%%",Batteriestatus());
				for(uint8_t i=((SSD1306_WIDTH/charsize)-buffersize);i<(SSD1306_WIDTH/charsize);i++){
    5270:	1f 5f       	subi	r17, 0xFF	; 255
    5272:	0a 5f       	subi	r16, 0xFA	; 250
    5274:	15 31       	cpi	r17, 0x15	; 21
    5276:	71 f7       	brne	.-36     	; 0x5254 <_ZN3uhr4drawEv+0x80>
    5278:	48 c0       	rjmp	.+144    	; 0x530a <_ZN3uhr4drawEv+0x136>
				for(uint8_t i=0;i<8;i++){
					oled->draw_ASCI(rtc->msg_dat[i],5+i*charsize,7*charhighte);
				}
				break;
			case 2:
				for(uint8_t i=0;i<bitsderrtc;i++){oled->draw_ASCI(rtc->msg_dat[i],65+i*charsize,7*charhighte);}
    527a:	e9 8d       	ldd	r30, Y+25	; 0x19
    527c:	fa 8d       	ldd	r31, Y+26	; 0x1a
    527e:	ee 0d       	add	r30, r14
    5280:	ff 1d       	adc	r31, r15
    5282:	28 e3       	ldi	r18, 0x38	; 56
    5284:	41 2f       	mov	r20, r17
    5286:	60 85       	ldd	r22, Z+8	; 0x08
    5288:	8f 89       	ldd	r24, Y+23	; 0x17
    528a:	98 8d       	ldd	r25, Y+24	; 0x18
    528c:	0e 94 00 0c 	call	0x1800	; 0x1800 <_ZN7Display9draw_ASCIEhhh>
    5290:	8f ef       	ldi	r24, 0xFF	; 255
    5292:	e8 1a       	sub	r14, r24
    5294:	f8 0a       	sbc	r15, r24
    5296:	1a 5f       	subi	r17, 0xFA	; 250
    5298:	11 37       	cpi	r17, 0x71	; 113
    529a:	79 f7       	brne	.-34     	; 0x527a <_ZN3uhr4drawEv+0xa6>
	{
		monitor::draw();
		header(1);
		bottom(2);

		oled->analog(rtc->Stunden,rtc->Minuten,rtc->Sekunden,Zeiger);
    529c:	e9 8d       	ldd	r30, Y+25	; 0x19
    529e:	fa 8d       	ldd	r31, Y+26	; 0x1a
    52a0:	09 a5       	ldd	r16, Y+41	; 0x29
    52a2:	22 89       	ldd	r18, Z+18	; 0x12
    52a4:	41 89       	ldd	r20, Z+17	; 0x11
    52a6:	60 89       	ldd	r22, Z+16	; 0x10
    52a8:	8f 89       	ldd	r24, Y+23	; 0x17
    52aa:	98 8d       	ldd	r25, Y+24	; 0x18
    52ac:	0e 94 c4 0c 	call	0x1988	; 0x1988 <_ZN7Display6analogEhhhh>
		//draw large number
		oled->draw_number16x16(rtc->msg_uhr[0]-'0',70,1.66*charhighte);
    52b0:	e9 8d       	ldd	r30, Y+25	; 0x19
    52b2:	fa 8d       	ldd	r31, Y+26	; 0x1a
    52b4:	60 81       	ld	r22, Z
    52b6:	60 53       	subi	r22, 0x30	; 48
    52b8:	2d e0       	ldi	r18, 0x0D	; 13
    52ba:	46 e4       	ldi	r20, 0x46	; 70
    52bc:	8f 89       	ldd	r24, Y+23	; 0x17
    52be:	98 8d       	ldd	r25, Y+24	; 0x18
    52c0:	0e 94 4a 0c 	call	0x1894	; 0x1894 <_ZN7Display16draw_number16x16Ehhh>
		oled->draw_number16x16(rtc->msg_uhr[1]-'0',70+numbersmalsize,1.66*charhighte);
    52c4:	e9 8d       	ldd	r30, Y+25	; 0x19
    52c6:	fa 8d       	ldd	r31, Y+26	; 0x1a
    52c8:	61 81       	ldd	r22, Z+1	; 0x01
    52ca:	60 53       	subi	r22, 0x30	; 48
    52cc:	2d e0       	ldi	r18, 0x0D	; 13
    52ce:	46 e5       	ldi	r20, 0x56	; 86
    52d0:	8f 89       	ldd	r24, Y+23	; 0x17
    52d2:	98 8d       	ldd	r25, Y+24	; 0x18
    52d4:	0e 94 4a 0c 	call	0x1894	; 0x1894 <_ZN7Display16draw_number16x16Ehhh>
		oled->draw_number16x16(rtc->msg_uhr[3]-'0',70,2.33*charhighte+numbersmalhight);
    52d8:	e9 8d       	ldd	r30, Y+25	; 0x19
    52da:	fa 8d       	ldd	r31, Y+26	; 0x1a
    52dc:	63 81       	ldd	r22, Z+3	; 0x03
    52de:	60 53       	subi	r22, 0x30	; 48
    52e0:	22 e2       	ldi	r18, 0x22	; 34
    52e2:	46 e4       	ldi	r20, 0x46	; 70
    52e4:	8f 89       	ldd	r24, Y+23	; 0x17
    52e6:	98 8d       	ldd	r25, Y+24	; 0x18
    52e8:	0e 94 4a 0c 	call	0x1894	; 0x1894 <_ZN7Display16draw_number16x16Ehhh>
		oled->draw_number16x16(rtc->msg_uhr[4]-'0',70+numbersmalsize,2.33*charhighte+numbersmalhight);
    52ec:	e9 8d       	ldd	r30, Y+25	; 0x19
    52ee:	fa 8d       	ldd	r31, Y+26	; 0x1a
    52f0:	64 81       	ldd	r22, Z+4	; 0x04
    52f2:	60 53       	subi	r22, 0x30	; 48
    52f4:	22 e2       	ldi	r18, 0x22	; 34
    52f6:	46 e5       	ldi	r20, 0x56	; 86
    52f8:	8f 89       	ldd	r24, Y+23	; 0x17
    52fa:	98 8d       	ldd	r25, Y+24	; 0x18
    52fc:	0e 94 4a 0c 	call	0x1894	; 0x1894 <_ZN7Display16draw_number16x16Ehhh>
		oled->clearFrame();
	}

	//send the frame to the display
	void send(){
		oled->sendFrame();	
    5300:	8f 89       	ldd	r24, Y+23	; 0x17
    5302:	98 8d       	ldd	r25, Y+24	; 0x18
    5304:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <_ZN7Display9sendFrameEv>
    5308:	04 c0       	rjmp	.+8      	; 0x5312 <_ZN3uhr4drawEv+0x13e>
		return 0;
	}
	
	//drawfunktion
	virtual void draw(){
		oled->clearFrame();
    530a:	11 e4       	ldi	r17, 0x41	; 65
    530c:	e1 2c       	mov	r14, r1
    530e:	f1 2c       	mov	r15, r1
    5310:	b4 cf       	rjmp	.-152    	; 0x527a <_ZN3uhr4drawEv+0xa6>
		oled->draw_number16x16(rtc->msg_uhr[1]-'0',70+numbersmalsize,1.66*charhighte);
		oled->draw_number16x16(rtc->msg_uhr[3]-'0',70,2.33*charhighte+numbersmalhight);
		oled->draw_number16x16(rtc->msg_uhr[4]-'0',70+numbersmalsize,2.33*charhighte+numbersmalhight);

		send();
	}
    5312:	df 91       	pop	r29
    5314:	cf 91       	pop	r28
    5316:	1f 91       	pop	r17
    5318:	0f 91       	pop	r16
    531a:	ff 90       	pop	r15
    531c:	ef 90       	pop	r14
    531e:	08 95       	ret

00005320 <_ZN7wandern4drawEv>:
			EEPROM_Write(EEJAHR,rtc->Jahr);
		}
		return 0;
	}
	
	void draw(){
    5320:	cf 92       	push	r12
    5322:	df 92       	push	r13
    5324:	ef 92       	push	r14
    5326:	ff 92       	push	r15
    5328:	0f 93       	push	r16
    532a:	1f 93       	push	r17
    532c:	cf 93       	push	r28
    532e:	df 93       	push	r29
    5330:	ec 01       	movw	r28, r24
		return 0;
	}
	
	//drawfunktion
	virtual void draw(){
		oled->clearFrame();
    5332:	8f 89       	ldd	r24, Y+23	; 0x17
    5334:	98 8d       	ldd	r25, Y+24	; 0x18
    5336:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <_ZN7Display10clearFrameEv>
    533a:	10 e0       	ldi	r17, 0x00	; 0
    533c:	e1 2c       	mov	r14, r1
    533e:	f1 2c       	mov	r15, r1
	}
	
	//draw header and overload it
	void header(){
		for(uint8_t i=0;i<8;i++){
			oled->draw_ASCI(rtc->msg_uhr[i],i*charsize,0);
    5340:	e9 8d       	ldd	r30, Y+25	; 0x19
    5342:	fa 8d       	ldd	r31, Y+26	; 0x1a
    5344:	ee 0d       	add	r30, r14
    5346:	ff 1d       	adc	r31, r15
    5348:	20 e0       	ldi	r18, 0x00	; 0
    534a:	41 2f       	mov	r20, r17
    534c:	60 81       	ld	r22, Z
    534e:	8f 89       	ldd	r24, Y+23	; 0x17
    5350:	98 8d       	ldd	r25, Y+24	; 0x18
    5352:	0e 94 00 0c 	call	0x1800	; 0x1800 <_ZN7Display9draw_ASCIEhhh>
    5356:	2f ef       	ldi	r18, 0xFF	; 255
    5358:	e2 1a       	sub	r14, r18
    535a:	f2 0a       	sbc	r15, r18
    535c:	1a 5f       	subi	r17, 0xFA	; 250
		return &name[0];
	}
	
	//draw header and overload it
	void header(){
		for(uint8_t i=0;i<8;i++){
    535e:	10 33       	cpi	r17, 0x30	; 48
    5360:	79 f7       	brne	.-34     	; 0x5340 <_ZN7wandern4drawEv+0x20>
			oled->draw_ASCI(rtc->msg_uhr[i],i*charsize,0);
		}
		buffersize=sprintf(buffer,"Bat: %i%%",Batteriestatus());
    5362:	aa db       	rcall	.-2220   	; 0x4ab8 <_Z14Batteriestatusv>
    5364:	7e 01       	movw	r14, r28
    5366:	32 e0       	ldi	r19, 0x02	; 2
    5368:	e3 0e       	add	r14, r19
    536a:	f1 1c       	adc	r15, r1
    536c:	28 2f       	mov	r18, r24
    536e:	08 2e       	mov	r0, r24
    5370:	00 0c       	add	r0, r0
    5372:	33 0b       	sbc	r19, r19
    5374:	3f 93       	push	r19
    5376:	8f 93       	push	r24
    5378:	82 ec       	ldi	r24, 0xC2	; 194
    537a:	91 e0       	ldi	r25, 0x01	; 1
    537c:	9f 93       	push	r25
    537e:	8f 93       	push	r24
    5380:	ff 92       	push	r15
    5382:	ef 92       	push	r14
    5384:	0e 94 67 48 	call	0x90ce	; 0x90ce <sprintf>
    5388:	8e 8b       	std	Y+22, r24	; 0x16
		for(uint8_t i=((SSD1306_WIDTH/charsize)-buffersize);i<(SSD1306_WIDTH/charsize);i++){
    538a:	15 e1       	ldi	r17, 0x15	; 21
    538c:	18 1b       	sub	r17, r24
    538e:	0f 90       	pop	r0
    5390:	0f 90       	pop	r0
    5392:	0f 90       	pop	r0
    5394:	0f 90       	pop	r0
    5396:	0f 90       	pop	r0
    5398:	0f 90       	pop	r0
    539a:	15 31       	cpi	r17, 0x15	; 21
    539c:	08 f0       	brcs	.+2      	; 0x53a0 <_ZN7wandern4drawEv+0x80>
    539e:	fd c0       	rjmp	.+506    	; 0x559a <_ZN7wandern4drawEv+0x27a>
    53a0:	01 2f       	mov	r16, r17
    53a2:	00 0f       	add	r16, r16
    53a4:	01 0f       	add	r16, r17
    53a6:	00 0f       	add	r16, r16
			oled->draw_ASCI(buffer[i-((SSD1306_WIDTH/charsize)-buffersize)],i*charsize,0);
    53a8:	8e 89       	ldd	r24, Y+22	; 0x16
    53aa:	fe 01       	movw	r30, r28
    53ac:	e1 0f       	add	r30, r17
    53ae:	f1 1d       	adc	r31, r1
    53b0:	e8 0f       	add	r30, r24
    53b2:	f1 1d       	adc	r31, r1
    53b4:	73 97       	sbiw	r30, 0x13	; 19
    53b6:	20 e0       	ldi	r18, 0x00	; 0
    53b8:	40 2f       	mov	r20, r16
    53ba:	60 81       	ld	r22, Z
    53bc:	8f 89       	ldd	r24, Y+23	; 0x17
    53be:	98 8d       	ldd	r25, Y+24	; 0x18
    53c0:	0e 94 00 0c 	call	0x1800	; 0x1800 <_ZN7Display9draw_ASCIEhhh>
	void header(){
		for(uint8_t i=0;i<8;i++){
			oled->draw_ASCI(rtc->msg_uhr[i],i*charsize,0);
		}
		buffersize=sprintf(buffer,"Bat: %i%%",Batteriestatus());
		for(uint8_t i=((SSD1306_WIDTH/charsize)-buffersize);i<(SSD1306_WIDTH/charsize);i++){
    53c4:	1f 5f       	subi	r17, 0xFF	; 255
    53c6:	0a 5f       	subi	r16, 0xFA	; 250
    53c8:	15 31       	cpi	r17, 0x15	; 21
    53ca:	71 f7       	brne	.-36     	; 0x53a8 <_ZN7wandern4drawEv+0x88>
    53cc:	e6 c0       	rjmp	.+460    	; 0x559a <_ZN7wandern4drawEv+0x27a>
	}
	
	//draw bottom and overload it
	void bottom(){
		for(uint8_t i=0;i<8;i++){
			oled->draw_ASCI(rtc->msg_dat[i],i*charsize+(SSD1306_WIDTH-bitsderrtc*charsize),7*charhighte);
    53ce:	e9 8d       	ldd	r30, Y+25	; 0x19
    53d0:	fa 8d       	ldd	r31, Y+26	; 0x1a
    53d2:	ec 0d       	add	r30, r12
    53d4:	fd 1d       	adc	r31, r13
    53d6:	28 e3       	ldi	r18, 0x38	; 56
    53d8:	41 2f       	mov	r20, r17
    53da:	60 85       	ldd	r22, Z+8	; 0x08
    53dc:	8f 89       	ldd	r24, Y+23	; 0x17
    53de:	98 8d       	ldd	r25, Y+24	; 0x18
    53e0:	0e 94 00 0c 	call	0x1800	; 0x1800 <_ZN7Display9draw_ASCIEhhh>
    53e4:	8f ef       	ldi	r24, 0xFF	; 255
    53e6:	c8 1a       	sub	r12, r24
    53e8:	d8 0a       	sbc	r13, r24
    53ea:	1a 5f       	subi	r17, 0xFA	; 250
		}
	}
	
	//draw bottom and overload it
	void bottom(){
		for(uint8_t i=0;i<8;i++){
    53ec:	10 38       	cpi	r17, 0x80	; 128
    53ee:	79 f7       	brne	.-34     	; 0x53ce <_ZN7wandern4drawEv+0xae>
		buffersize=sprintf(buffer,"%.02f",druck.altitude);
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize,4*charhighte);}
		*/
		
		//Latitude
		buffersize=sprintf(buffer,"Lat: %.7f",lat);
    53f0:	80 91 98 08 	lds	r24, 0x0898
    53f4:	8f 93       	push	r24
    53f6:	80 91 97 08 	lds	r24, 0x0897
    53fa:	8f 93       	push	r24
    53fc:	80 91 96 08 	lds	r24, 0x0896
    5400:	8f 93       	push	r24
    5402:	80 91 95 08 	lds	r24, 0x0895
    5406:	8f 93       	push	r24
    5408:	84 e2       	ldi	r24, 0x24	; 36
    540a:	92 e0       	ldi	r25, 0x02	; 2
    540c:	9f 93       	push	r25
    540e:	8f 93       	push	r24
    5410:	ff 92       	push	r15
    5412:	ef 92       	push	r14
    5414:	0e 94 67 48 	call	0x90ce	; 0x90ce <sprintf>
    5418:	8e 8b       	std	Y+22, r24	; 0x16
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize,2*charhighte);}
    541a:	2d b7       	in	r18, 0x3d	; 61
    541c:	3e b7       	in	r19, 0x3e	; 62
    541e:	28 5f       	subi	r18, 0xF8	; 248
    5420:	3f 4f       	sbci	r19, 0xFF	; 255
    5422:	0f b6       	in	r0, 0x3f	; 63
    5424:	f8 94       	cli
    5426:	3e bf       	out	0x3e, r19	; 62
    5428:	0f be       	out	0x3f, r0	; 63
    542a:	2d bf       	out	0x3d, r18	; 61
    542c:	88 23       	and	r24, r24
    542e:	89 f0       	breq	.+34     	; 0x5452 <_ZN7wandern4drawEv+0x132>
    5430:	00 e0       	ldi	r16, 0x00	; 0
    5432:	10 e0       	ldi	r17, 0x00	; 0
    5434:	fe 01       	movw	r30, r28
    5436:	e1 0f       	add	r30, r17
    5438:	f1 1d       	adc	r31, r1
    543a:	20 e1       	ldi	r18, 0x10	; 16
    543c:	40 2f       	mov	r20, r16
    543e:	62 81       	ldd	r22, Z+2	; 0x02
    5440:	8f 89       	ldd	r24, Y+23	; 0x17
    5442:	98 8d       	ldd	r25, Y+24	; 0x18
    5444:	0e 94 00 0c 	call	0x1800	; 0x1800 <_ZN7Display9draw_ASCIEhhh>
    5448:	1f 5f       	subi	r17, 0xFF	; 255
    544a:	0a 5f       	subi	r16, 0xFA	; 250
    544c:	8e 89       	ldd	r24, Y+22	; 0x16
    544e:	18 17       	cp	r17, r24
    5450:	88 f3       	brcs	.-30     	; 0x5434 <_ZN7wandern4drawEv+0x114>
			
		//Longitude
		buffersize=sprintf(buffer,"Lon: %.7f",lon);
    5452:	80 91 94 08 	lds	r24, 0x0894
    5456:	8f 93       	push	r24
    5458:	80 91 93 08 	lds	r24, 0x0893
    545c:	8f 93       	push	r24
    545e:	80 91 92 08 	lds	r24, 0x0892
    5462:	8f 93       	push	r24
    5464:	80 91 91 08 	lds	r24, 0x0891
    5468:	8f 93       	push	r24
    546a:	8e e2       	ldi	r24, 0x2E	; 46
    546c:	92 e0       	ldi	r25, 0x02	; 2
    546e:	9f 93       	push	r25
    5470:	8f 93       	push	r24
    5472:	ff 92       	push	r15
    5474:	ef 92       	push	r14
    5476:	0e 94 67 48 	call	0x90ce	; 0x90ce <sprintf>
    547a:	8e 8b       	std	Y+22, r24	; 0x16
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize,3*charhighte);}
    547c:	2d b7       	in	r18, 0x3d	; 61
    547e:	3e b7       	in	r19, 0x3e	; 62
    5480:	28 5f       	subi	r18, 0xF8	; 248
    5482:	3f 4f       	sbci	r19, 0xFF	; 255
    5484:	0f b6       	in	r0, 0x3f	; 63
    5486:	f8 94       	cli
    5488:	3e bf       	out	0x3e, r19	; 62
    548a:	0f be       	out	0x3f, r0	; 63
    548c:	2d bf       	out	0x3d, r18	; 61
    548e:	88 23       	and	r24, r24
    5490:	89 f0       	breq	.+34     	; 0x54b4 <_ZN7wandern4drawEv+0x194>
    5492:	00 e0       	ldi	r16, 0x00	; 0
    5494:	10 e0       	ldi	r17, 0x00	; 0
    5496:	fe 01       	movw	r30, r28
    5498:	e1 0f       	add	r30, r17
    549a:	f1 1d       	adc	r31, r1
    549c:	28 e1       	ldi	r18, 0x18	; 24
    549e:	40 2f       	mov	r20, r16
    54a0:	62 81       	ldd	r22, Z+2	; 0x02
    54a2:	8f 89       	ldd	r24, Y+23	; 0x17
    54a4:	98 8d       	ldd	r25, Y+24	; 0x18
    54a6:	0e 94 00 0c 	call	0x1800	; 0x1800 <_ZN7Display9draw_ASCIEhhh>
    54aa:	1f 5f       	subi	r17, 0xFF	; 255
    54ac:	0a 5f       	subi	r16, 0xFA	; 250
    54ae:	8e 89       	ldd	r24, Y+22	; 0x16
    54b0:	18 17       	cp	r17, r24
    54b2:	88 f3       	brcs	.-30     	; 0x5496 <_ZN7wandern4drawEv+0x176>
			
		//Speed
		buffersize=sprintf(buffer,"Spe: %.4f",gpsspeed);
    54b4:	80 91 90 08 	lds	r24, 0x0890
    54b8:	8f 93       	push	r24
    54ba:	80 91 8f 08 	lds	r24, 0x088F
    54be:	8f 93       	push	r24
    54c0:	80 91 8e 08 	lds	r24, 0x088E
    54c4:	8f 93       	push	r24
    54c6:	80 91 8d 08 	lds	r24, 0x088D
    54ca:	8f 93       	push	r24
    54cc:	88 e3       	ldi	r24, 0x38	; 56
    54ce:	92 e0       	ldi	r25, 0x02	; 2
    54d0:	9f 93       	push	r25
    54d2:	8f 93       	push	r24
    54d4:	ff 92       	push	r15
    54d6:	ef 92       	push	r14
    54d8:	0e 94 67 48 	call	0x90ce	; 0x90ce <sprintf>
    54dc:	8e 8b       	std	Y+22, r24	; 0x16
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize,4*charhighte);}
    54de:	2d b7       	in	r18, 0x3d	; 61
    54e0:	3e b7       	in	r19, 0x3e	; 62
    54e2:	28 5f       	subi	r18, 0xF8	; 248
    54e4:	3f 4f       	sbci	r19, 0xFF	; 255
    54e6:	0f b6       	in	r0, 0x3f	; 63
    54e8:	f8 94       	cli
    54ea:	3e bf       	out	0x3e, r19	; 62
    54ec:	0f be       	out	0x3f, r0	; 63
    54ee:	2d bf       	out	0x3d, r18	; 61
    54f0:	88 23       	and	r24, r24
    54f2:	89 f0       	breq	.+34     	; 0x5516 <_ZN7wandern4drawEv+0x1f6>
    54f4:	00 e0       	ldi	r16, 0x00	; 0
    54f6:	10 e0       	ldi	r17, 0x00	; 0
    54f8:	fe 01       	movw	r30, r28
    54fa:	e1 0f       	add	r30, r17
    54fc:	f1 1d       	adc	r31, r1
    54fe:	20 e2       	ldi	r18, 0x20	; 32
    5500:	40 2f       	mov	r20, r16
    5502:	62 81       	ldd	r22, Z+2	; 0x02
    5504:	8f 89       	ldd	r24, Y+23	; 0x17
    5506:	98 8d       	ldd	r25, Y+24	; 0x18
    5508:	0e 94 00 0c 	call	0x1800	; 0x1800 <_ZN7Display9draw_ASCIEhhh>
    550c:	1f 5f       	subi	r17, 0xFF	; 255
    550e:	0a 5f       	subi	r16, 0xFA	; 250
    5510:	8e 89       	ldd	r24, Y+22	; 0x16
    5512:	18 17       	cp	r17, r24
    5514:	88 f3       	brcs	.-30     	; 0x54f8 <_ZN7wandern4drawEv+0x1d8>
			
		//gpstime
		buffersize=sprintf(buffer,"%02i:%02i:%02i %02i.%02i.%02i",gpsstunde,gpsminute,gpssekunde,gpsTag,gpsMonat,gpsJahr);
    5516:	80 91 87 08 	lds	r24, 0x0887
    551a:	1f 92       	push	r1
    551c:	8f 93       	push	r24
    551e:	80 91 88 08 	lds	r24, 0x0888
    5522:	1f 92       	push	r1
    5524:	8f 93       	push	r24
    5526:	80 91 89 08 	lds	r24, 0x0889
    552a:	1f 92       	push	r1
    552c:	8f 93       	push	r24
    552e:	80 91 8a 08 	lds	r24, 0x088A
    5532:	1f 92       	push	r1
    5534:	8f 93       	push	r24
    5536:	80 91 8b 08 	lds	r24, 0x088B
    553a:	1f 92       	push	r1
    553c:	8f 93       	push	r24
    553e:	80 91 8c 08 	lds	r24, 0x088C
    5542:	1f 92       	push	r1
    5544:	8f 93       	push	r24
    5546:	82 e4       	ldi	r24, 0x42	; 66
    5548:	92 e0       	ldi	r25, 0x02	; 2
    554a:	9f 93       	push	r25
    554c:	8f 93       	push	r24
    554e:	ff 92       	push	r15
    5550:	ef 92       	push	r14
    5552:	0e 94 67 48 	call	0x90ce	; 0x90ce <sprintf>
    5556:	8e 8b       	std	Y+22, r24	; 0x16
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize,5*charhighte);}
    5558:	2d b7       	in	r18, 0x3d	; 61
    555a:	3e b7       	in	r19, 0x3e	; 62
    555c:	20 5f       	subi	r18, 0xF0	; 240
    555e:	3f 4f       	sbci	r19, 0xFF	; 255
    5560:	0f b6       	in	r0, 0x3f	; 63
    5562:	f8 94       	cli
    5564:	3e bf       	out	0x3e, r19	; 62
    5566:	0f be       	out	0x3f, r0	; 63
    5568:	2d bf       	out	0x3d, r18	; 61
    556a:	88 23       	and	r24, r24
    556c:	89 f0       	breq	.+34     	; 0x5590 <_ZN7wandern4drawEv+0x270>
    556e:	00 e0       	ldi	r16, 0x00	; 0
    5570:	10 e0       	ldi	r17, 0x00	; 0
    5572:	fe 01       	movw	r30, r28
    5574:	e1 0f       	add	r30, r17
    5576:	f1 1d       	adc	r31, r1
    5578:	28 e2       	ldi	r18, 0x28	; 40
    557a:	40 2f       	mov	r20, r16
    557c:	62 81       	ldd	r22, Z+2	; 0x02
    557e:	8f 89       	ldd	r24, Y+23	; 0x17
    5580:	98 8d       	ldd	r25, Y+24	; 0x18
    5582:	0e 94 00 0c 	call	0x1800	; 0x1800 <_ZN7Display9draw_ASCIEhhh>
    5586:	1f 5f       	subi	r17, 0xFF	; 255
    5588:	0a 5f       	subi	r16, 0xFA	; 250
    558a:	8e 89       	ldd	r24, Y+22	; 0x16
    558c:	18 17       	cp	r17, r24
    558e:	88 f3       	brcs	.-30     	; 0x5572 <_ZN7wandern4drawEv+0x252>
		oled->clearFrame();
	}

	//send the frame to the display
	void send(){
		oled->sendFrame();	
    5590:	8f 89       	ldd	r24, Y+23	; 0x17
    5592:	98 8d       	ldd	r25, Y+24	; 0x18
    5594:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <_ZN7Display9sendFrameEv>
    5598:	04 c0       	rjmp	.+8      	; 0x55a2 <_ZN7wandern4drawEv+0x282>
		return 0;
	}
	
	//drawfunktion
	virtual void draw(){
		oled->clearFrame();
    559a:	10 e5       	ldi	r17, 0x50	; 80
    559c:	c1 2c       	mov	r12, r1
    559e:	d1 2c       	mov	r13, r1
    55a0:	16 cf       	rjmp	.-468    	; 0x53ce <_ZN7wandern4drawEv+0xae>
		//gpstime
		buffersize=sprintf(buffer,"%02i:%02i:%02i %02i.%02i.%02i",gpsstunde,gpsminute,gpssekunde,gpsTag,gpsMonat,gpsJahr);
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize,5*charhighte);}
		
		send();	
	}
    55a2:	df 91       	pop	r29
    55a4:	cf 91       	pop	r28
    55a6:	1f 91       	pop	r17
    55a8:	0f 91       	pop	r16
    55aa:	ff 90       	pop	r15
    55ac:	ef 90       	pop	r14
    55ae:	df 90       	pop	r13
    55b0:	cf 90       	pop	r12
    55b2:	08 95       	ret

000055b4 <_Z12EEPROM_Writejh>:

#ifndef EEPROM_H_
#define EEPROM_H_

void EEPROM_Write(uint16_t adresse, uint8_t data){
	cli();	//zur sicherheit interrupts ausschalten
    55b4:	f8 94       	cli
	while(EECR&(1<<EEPE));
    55b6:	f9 99       	sbic	0x1f, 1	; 31
    55b8:	fe cf       	rjmp	.-4      	; 0x55b6 <_Z12EEPROM_Writejh+0x2>
	
	//schreibe adresse und data
	EEAR = adresse;
    55ba:	92 bd       	out	0x22, r25	; 34
    55bc:	81 bd       	out	0x21, r24	; 33
	EEDR = data;
    55be:	60 bd       	out	0x20, r22	; 32
	//fuehre schreiben aus
	EECR |= (1<<EEMPE);
    55c0:	fa 9a       	sbi	0x1f, 2	; 31
	EECR |= (1<<EEPE);
    55c2:	f9 9a       	sbi	0x1f, 1	; 31
	
	sei();
    55c4:	78 94       	sei
    55c6:	08 95       	ret

000055c8 <_ZN7wandern11tastendruckEPh>:
				name[i] = ' ';
			}
		}
	}
	
	uint8_t tastendruck(uint8_t *tast){
    55c8:	cf 93       	push	r28
    55ca:	df 93       	push	r29
    55cc:	ec 01       	movw	r28, r24
		if (*tast=='e')
    55ce:	fb 01       	movw	r30, r22
    55d0:	90 81       	ld	r25, Z
    55d2:	95 36       	cpi	r25, 0x65	; 101
    55d4:	09 f0       	breq	.+2      	; 0x55d8 <_ZN7wandern11tastendruckEPh+0x10>
    55d6:	40 c0       	rjmp	.+128    	; 0x5658 <_ZN7wandern11tastendruckEPh+0x90>
		{
			rtc->Stunden	= gpsstunde;
    55d8:	e9 8d       	ldd	r30, Y+25	; 0x19
    55da:	fa 8d       	ldd	r31, Y+26	; 0x1a
    55dc:	80 91 8c 08 	lds	r24, 0x088C
    55e0:	80 8b       	std	Z+16, r24	; 0x10
			rtc->Minuten	= gpsminute;
    55e2:	e9 8d       	ldd	r30, Y+25	; 0x19
    55e4:	fa 8d       	ldd	r31, Y+26	; 0x1a
    55e6:	80 91 8b 08 	lds	r24, 0x088B
    55ea:	81 8b       	std	Z+17, r24	; 0x11
			rtc->Sekunden	= gpssekunde;
    55ec:	e9 8d       	ldd	r30, Y+25	; 0x19
    55ee:	fa 8d       	ldd	r31, Y+26	; 0x1a
    55f0:	80 91 8a 08 	lds	r24, 0x088A
    55f4:	82 8b       	std	Z+18, r24	; 0x12
			
			rtc->Tag		= gpsTag;
    55f6:	e9 8d       	ldd	r30, Y+25	; 0x19
    55f8:	fa 8d       	ldd	r31, Y+26	; 0x1a
    55fa:	80 91 89 08 	lds	r24, 0x0889
    55fe:	84 8b       	std	Z+20, r24	; 0x14
			rtc->Monat		= gpsMonat;
    5600:	e9 8d       	ldd	r30, Y+25	; 0x19
    5602:	fa 8d       	ldd	r31, Y+26	; 0x1a
    5604:	80 91 88 08 	lds	r24, 0x0888
    5608:	86 8b       	std	Z+22, r24	; 0x16
			rtc->Jahr		= gpsJahr;
    560a:	e9 8d       	ldd	r30, Y+25	; 0x19
    560c:	fa 8d       	ldd	r31, Y+26	; 0x1a
    560e:	80 91 87 08 	lds	r24, 0x0887
    5612:	87 8b       	std	Z+23, r24	; 0x17
			rtc->ausgabedatumneu();
    5614:	89 8d       	ldd	r24, Y+25	; 0x19
    5616:	9a 8d       	ldd	r25, Y+26	; 0x1a
    5618:	0e 94 47 3d 	call	0x7a8e	; 0x7a8e <_ZN3RTC15ausgabedatumneuEv>
			//speichern der neuen Zeit im EEPROM
			EEPROM_Write(EEMINUTEN,rtc->Minuten);
    561c:	e9 8d       	ldd	r30, Y+25	; 0x19
    561e:	fa 8d       	ldd	r31, Y+26	; 0x1a
    5620:	61 89       	ldd	r22, Z+17	; 0x11
    5622:	80 e0       	ldi	r24, 0x00	; 0
    5624:	90 e0       	ldi	r25, 0x00	; 0
    5626:	c6 df       	rcall	.-116    	; 0x55b4 <_Z12EEPROM_Writejh>
			EEPROM_Write(EESTUNDEN,rtc->Stunden);
    5628:	e9 8d       	ldd	r30, Y+25	; 0x19
    562a:	fa 8d       	ldd	r31, Y+26	; 0x1a
    562c:	60 89       	ldd	r22, Z+16	; 0x10
    562e:	81 e0       	ldi	r24, 0x01	; 1
    5630:	90 e0       	ldi	r25, 0x00	; 0
    5632:	c0 df       	rcall	.-128    	; 0x55b4 <_Z12EEPROM_Writejh>
			EEPROM_Write(EETAGE,rtc->Tag);
    5634:	e9 8d       	ldd	r30, Y+25	; 0x19
    5636:	fa 8d       	ldd	r31, Y+26	; 0x1a
    5638:	64 89       	ldd	r22, Z+20	; 0x14
    563a:	82 e0       	ldi	r24, 0x02	; 2
    563c:	90 e0       	ldi	r25, 0x00	; 0
    563e:	ba df       	rcall	.-140    	; 0x55b4 <_Z12EEPROM_Writejh>
			EEPROM_Write(EEMONAT,rtc->Monat);
    5640:	e9 8d       	ldd	r30, Y+25	; 0x19
    5642:	fa 8d       	ldd	r31, Y+26	; 0x1a
    5644:	66 89       	ldd	r22, Z+22	; 0x16
    5646:	83 e0       	ldi	r24, 0x03	; 3
    5648:	90 e0       	ldi	r25, 0x00	; 0
    564a:	b4 df       	rcall	.-152    	; 0x55b4 <_Z12EEPROM_Writejh>
			EEPROM_Write(EEJAHR,rtc->Jahr);
    564c:	e9 8d       	ldd	r30, Y+25	; 0x19
    564e:	fa 8d       	ldd	r31, Y+26	; 0x1a
    5650:	67 89       	ldd	r22, Z+23	; 0x17
    5652:	84 e0       	ldi	r24, 0x04	; 4
    5654:	90 e0       	ldi	r25, 0x00	; 0
    5656:	ae df       	rcall	.-164    	; 0x55b4 <_Z12EEPROM_Writejh>
		}
		return 0;
	}
    5658:	80 e0       	ldi	r24, 0x00	; 0
    565a:	df 91       	pop	r29
    565c:	cf 91       	pop	r28
    565e:	08 95       	ret

00005660 <_Z11EEPROM_Readj>:
}

uint8_t EEPROM_Read(uint16_t adresse){
	cli();	//zur sicherheit interrupts ausschalten
    5660:	f8 94       	cli
	while(EECR&(1<<EEPE));
    5662:	f9 99       	sbic	0x1f, 1	; 31
    5664:	fe cf       	rjmp	.-4      	; 0x5662 <_Z11EEPROM_Readj+0x2>
	
	//schreibe adresse
	EEAR = adresse;
    5666:	92 bd       	out	0x22, r25	; 34
    5668:	81 bd       	out	0x21, r24	; 33
	//fuehre lesen aus
	EECR |= (1<<EERE);
    566a:	f8 9a       	sbi	0x1f, 0	; 31
	
	sei();
    566c:	78 94       	sei
	return EEDR;
    566e:	80 b5       	in	r24, 0x20	; 32
}
    5670:	08 95       	ret

00005672 <__vector_16>:

//schlechte variante der Uhreinstellung
void uhreinstellen();

//SD karten Timer
ISR(TIMER0_COMPA_vect){
    5672:	1f 92       	push	r1
    5674:	0f 92       	push	r0
    5676:	0f b6       	in	r0, 0x3f	; 63
    5678:	0f 92       	push	r0
    567a:	11 24       	eor	r1, r1
    567c:	0b b6       	in	r0, 0x3b	; 59
    567e:	0f 92       	push	r0
    5680:	2f 93       	push	r18
    5682:	3f 93       	push	r19
    5684:	4f 93       	push	r20
    5686:	5f 93       	push	r21
    5688:	6f 93       	push	r22
    568a:	7f 93       	push	r23
    568c:	8f 93       	push	r24
    568e:	9f 93       	push	r25
    5690:	af 93       	push	r26
    5692:	bf 93       	push	r27
    5694:	ef 93       	push	r30
    5696:	ff 93       	push	r31
	disk_timerproc();	//Timer der SD Karte
    5698:	0e 94 c6 0a 	call	0x158c	; 0x158c <disk_timerproc>
}
    569c:	ff 91       	pop	r31
    569e:	ef 91       	pop	r30
    56a0:	bf 91       	pop	r27
    56a2:	af 91       	pop	r26
    56a4:	9f 91       	pop	r25
    56a6:	8f 91       	pop	r24
    56a8:	7f 91       	pop	r23
    56aa:	6f 91       	pop	r22
    56ac:	5f 91       	pop	r21
    56ae:	4f 91       	pop	r20
    56b0:	3f 91       	pop	r19
    56b2:	2f 91       	pop	r18
    56b4:	0f 90       	pop	r0
    56b6:	0b be       	out	0x3b, r0	; 59
    56b8:	0f 90       	pop	r0
    56ba:	0f be       	out	0x3f, r0	; 63
    56bc:	0f 90       	pop	r0
    56be:	1f 90       	pop	r1
    56c0:	18 95       	reti

000056c2 <__vector_11>:

ISR(TIMER2_OVF_vect){	//Vektor fuer die RTC
    56c2:	1f 92       	push	r1
    56c4:	0f 92       	push	r0
    56c6:	0f b6       	in	r0, 0x3f	; 63
    56c8:	0f 92       	push	r0
    56ca:	11 24       	eor	r1, r1
    56cc:	0b b6       	in	r0, 0x3b	; 59
    56ce:	0f 92       	push	r0
    56d0:	8f 93       	push	r24
    56d2:	ef 93       	push	r30
    56d4:	ff 93       	push	r31
	//TCNT2=TIMER2RTCTIME;
	rtc.Sekunden++;
    56d6:	e2 e1       	ldi	r30, 0x12	; 18
    56d8:	fe e0       	ldi	r31, 0x0E	; 14
    56da:	82 89       	ldd	r24, Z+18	; 0x12
    56dc:	8f 5f       	subi	r24, 0xFF	; 255
    56de:	82 8b       	std	Z+18, r24	; 0x12
	rtc.interupts|= (1<<sekundeninterupt);
    56e0:	80 8d       	ldd	r24, Z+24	; 0x18
    56e2:	82 60       	ori	r24, 0x02	; 2
    56e4:	80 8f       	std	Z+24, r24	; 0x18
}
    56e6:	ff 91       	pop	r31
    56e8:	ef 91       	pop	r30
    56ea:	8f 91       	pop	r24
    56ec:	0f 90       	pop	r0
    56ee:	0b be       	out	0x3b, r0	; 59
    56f0:	0f 90       	pop	r0
    56f2:	0f be       	out	0x3f, r0	; 63
    56f4:	0f 90       	pop	r0
    56f6:	1f 90       	pop	r1
    56f8:	18 95       	reti

000056fa <__vector_13>:

ISR(TIMER1_COMPA_vect){
    56fa:	1f 92       	push	r1
    56fc:	0f 92       	push	r0
    56fe:	0f b6       	in	r0, 0x3f	; 63
    5700:	0f 92       	push	r0
    5702:	11 24       	eor	r1, r1
    5704:	8f 93       	push	r24
	statusreg |= (1<<updaterate);
    5706:	80 91 e5 08 	lds	r24, 0x08E5
    570a:	81 60       	ori	r24, 0x01	; 1
    570c:	80 93 e5 08 	sts	0x08E5, r24
}
    5710:	8f 91       	pop	r24
    5712:	0f 90       	pop	r0
    5714:	0f be       	out	0x3f, r0	; 63
    5716:	0f 90       	pop	r0
    5718:	1f 90       	pop	r1
    571a:	18 95       	reti

0000571c <__vector_20>:
uint8_t gpssekunde;
uint8_t gpsTag;
uint8_t gpsMonat;
uint8_t gpsJahr;

ISR(USART0_RX_vect){
    571c:	1f 92       	push	r1
    571e:	0f 92       	push	r0
    5720:	0f b6       	in	r0, 0x3f	; 63
    5722:	0f 92       	push	r0
    5724:	11 24       	eor	r1, r1
    5726:	0b b6       	in	r0, 0x3b	; 59
    5728:	0f 92       	push	r0
    572a:	2f 93       	push	r18
    572c:	8f 93       	push	r24
    572e:	9f 93       	push	r25
    5730:	ef 93       	push	r30
    5732:	ff 93       	push	r31
	uint8_t temp = UDR0;
    5734:	20 91 c6 00 	lds	r18, 0x00C6
	if (temp == '$' && !(gpsstatus&(1<<complete)) && !(gpsstatus&(1<<completenotvalid)))
    5738:	24 32       	cpi	r18, 0x24	; 36
    573a:	51 f4       	brne	.+20     	; 0x5750 <__vector_20+0x34>
    573c:	80 91 e2 08 	lds	r24, 0x08E2
    5740:	98 2f       	mov	r25, r24
    5742:	9c 70       	andi	r25, 0x0C	; 12
    5744:	29 f4       	brne	.+10     	; 0x5750 <__vector_20+0x34>
	{
		gpscounter = 0;
    5746:	10 92 99 08 	sts	0x0899, r1
		gpsstatus |= (1<<message);
    574a:	81 60       	ori	r24, 0x01	; 1
    574c:	80 93 e2 08 	sts	0x08E2, r24
	}
	if ((gpsstatus&(1<<message)))
    5750:	90 91 e2 08 	lds	r25, 0x08E2
    5754:	90 ff       	sbrs	r25, 0
    5756:	3c c0       	rjmp	.+120    	; 0x57d0 <__vector_20+0xb4>
	{
		gpsdata[gpscounter] = temp;
    5758:	80 91 99 08 	lds	r24, 0x0899
    575c:	e8 2f       	mov	r30, r24
    575e:	f0 e0       	ldi	r31, 0x00	; 0
    5760:	e6 56       	subi	r30, 0x66	; 102
    5762:	f7 4f       	sbci	r31, 0xF7	; 247
    5764:	20 83       	st	Z, r18
		gpscounter++;
    5766:	8f 5f       	subi	r24, 0xFF	; 255
    5768:	80 93 99 08 	sts	0x0899, r24
		if (gpscounter>72)
    576c:	89 34       	cpi	r24, 0x49	; 73
    576e:	20 f0       	brcs	.+8      	; 0x5778 <__vector_20+0x5c>
		{
			gpsstatus &= ~(1<<message);
    5770:	9e 7f       	andi	r25, 0xFE	; 254
    5772:	90 93 e2 08 	sts	0x08E2, r25
    5776:	2c c0       	rjmp	.+88     	; 0x57d0 <__vector_20+0xb4>
		}
		else if (gpscounter==19)
    5778:	83 31       	cpi	r24, 0x13	; 19
    577a:	c9 f4       	brne	.+50     	; 0x57ae <__vector_20+0x92>
		{
			if (gpsdata[4]=='M' && gpsdata[5]=='C')
    577c:	80 91 9e 08 	lds	r24, 0x089E
    5780:	8d 34       	cpi	r24, 0x4D	; 77
    5782:	89 f4       	brne	.+34     	; 0x57a6 <__vector_20+0x8a>
    5784:	80 91 9f 08 	lds	r24, 0x089F
    5788:	83 34       	cpi	r24, 0x43	; 67
    578a:	69 f4       	brne	.+26     	; 0x57a6 <__vector_20+0x8a>
			{
				if (gpsdata[18]!='A')
    578c:	80 91 ac 08 	lds	r24, 0x08AC
    5790:	81 34       	cpi	r24, 0x41	; 65
    5792:	29 f0       	breq	.+10     	; 0x579e <__vector_20+0x82>
				{
					gpsstatus &= ~((1<<valid));
    5794:	9d 7f       	andi	r25, 0xFD	; 253
					gpsstatus |= (1<<notvalidgetdate);
    5796:	90 61       	ori	r25, 0x10	; 16
    5798:	90 93 e2 08 	sts	0x08E2, r25
    579c:	19 c0       	rjmp	.+50     	; 0x57d0 <__vector_20+0xb4>
				}
				else{
					gpsstatus |= (1<<valid);
    579e:	92 60       	ori	r25, 0x02	; 2
    57a0:	90 93 e2 08 	sts	0x08E2, r25
    57a4:	15 c0       	rjmp	.+42     	; 0x57d0 <__vector_20+0xb4>
				}
			}
			else{
				gpsstatus &= ~(1<<valid);
				gpsstatus &= ~(1<<message);
    57a6:	9c 7f       	andi	r25, 0xFC	; 252
    57a8:	90 93 e2 08 	sts	0x08E2, r25
    57ac:	11 c0       	rjmp	.+34     	; 0x57d0 <__vector_20+0xb4>
			}
		}
		else if (gpscounter == 42 && (gpsstatus&(1<<notvalidgetdate)))
    57ae:	8a 32       	cpi	r24, 0x2A	; 42
    57b0:	39 f4       	brne	.+14     	; 0x57c0 <__vector_20+0xa4>
    57b2:	94 ff       	sbrs	r25, 4
    57b4:	0d c0       	rjmp	.+26     	; 0x57d0 <__vector_20+0xb4>
		{
			gpsstatus |= (1<<completenotvalid);
			gpsstatus &= ~((1<<message) | (1<<notvalidgetdate));
    57b6:	9e 7e       	andi	r25, 0xEE	; 238
    57b8:	98 60       	ori	r25, 0x08	; 8
    57ba:	90 93 e2 08 	sts	0x08E2, r25
    57be:	08 c0       	rjmp	.+16     	; 0x57d0 <__vector_20+0xb4>
		}
		else if (gpscounter == 70 && (gpsstatus&(1<<valid)))
    57c0:	86 34       	cpi	r24, 0x46	; 70
    57c2:	31 f4       	brne	.+12     	; 0x57d0 <__vector_20+0xb4>
    57c4:	91 ff       	sbrs	r25, 1
    57c6:	04 c0       	rjmp	.+8      	; 0x57d0 <__vector_20+0xb4>
		{
			gpsstatus |= (1<<complete);
			gpsstatus &= ~((1<<message) | (1<<valid));
    57c8:	9c 7f       	andi	r25, 0xFC	; 252
    57ca:	94 60       	ori	r25, 0x04	; 4
    57cc:	90 93 e2 08 	sts	0x08E2, r25
		}
	}
}
    57d0:	ff 91       	pop	r31
    57d2:	ef 91       	pop	r30
    57d4:	9f 91       	pop	r25
    57d6:	8f 91       	pop	r24
    57d8:	2f 91       	pop	r18
    57da:	0f 90       	pop	r0
    57dc:	0b be       	out	0x3b, r0	; 59
    57de:	0f 90       	pop	r0
    57e0:	0f be       	out	0x3f, r0	; 63
    57e2:	0f 90       	pop	r0
    57e4:	1f 90       	pop	r1
    57e6:	18 95       	reti

000057e8 <_Z6nullenv>:
double geschw;
double strecke;
double maxgeschw;
uint32_t Fahrtzeit;
void nullen(){
	geschw = 0;
    57e8:	10 92 83 08 	sts	0x0883, r1
    57ec:	10 92 84 08 	sts	0x0884, r1
    57f0:	10 92 85 08 	sts	0x0885, r1
    57f4:	10 92 86 08 	sts	0x0886, r1
	strecke = 0;
    57f8:	10 92 7f 08 	sts	0x087F, r1
    57fc:	10 92 80 08 	sts	0x0880, r1
    5800:	10 92 81 08 	sts	0x0881, r1
    5804:	10 92 82 08 	sts	0x0882, r1
	maxgeschw = 0;
    5808:	10 92 7b 08 	sts	0x087B, r1
    580c:	10 92 7c 08 	sts	0x087C, r1
    5810:	10 92 7d 08 	sts	0x087D, r1
    5814:	10 92 7e 08 	sts	0x087E, r1
	Fahrtzeit = 0;
    5818:	10 92 77 08 	sts	0x0877, r1
    581c:	10 92 78 08 	sts	0x0878, r1
    5820:	10 92 79 08 	sts	0x0879, r1
    5824:	10 92 7a 08 	sts	0x087A, r1
    5828:	08 95       	ret

0000582a <_ZN5tacho11tastendruckEPh>:
		nullen();
	}

	//Tasterhandler
	uint8_t tastendruck(uint8_t *tast){
		if (*tast=='e')
    582a:	fb 01       	movw	r30, r22
    582c:	80 81       	ld	r24, Z
    582e:	85 36       	cpi	r24, 0x65	; 101
    5830:	09 f4       	brne	.+2      	; 0x5834 <_ZN5tacho11tastendruckEPh+0xa>
		{
			nullen();
    5832:	da df       	rcall	.-76     	; 0x57e8 <_Z6nullenv>
		}
		return 0;
	}
    5834:	80 e0       	ldi	r24, 0x00	; 0
    5836:	08 95       	ret

00005838 <_Z13reed_debouncePVhh>:
}
uint8_t reed_debounce(volatile uint8_t *port, uint8_t pin)
{
	if ( (*port & (1 << pin)) )
    5838:	fc 01       	movw	r30, r24
    583a:	20 81       	ld	r18, Z
    583c:	30 e0       	ldi	r19, 0x00	; 0
    583e:	06 2e       	mov	r0, r22
    5840:	02 c0       	rjmp	.+4      	; 0x5846 <_Z13reed_debouncePVhh+0xe>
    5842:	35 95       	asr	r19
    5844:	27 95       	ror	r18
    5846:	0a 94       	dec	r0
    5848:	e2 f7       	brpl	.-8      	; 0x5842 <_Z13reed_debouncePVhh+0xa>
    584a:	20 ff       	sbrs	r18, 0
    584c:	16 c0       	rjmp	.+44     	; 0x587a <_Z13reed_debouncePVhh+0x42>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    584e:	ef e0       	ldi	r30, 0x0F	; 15
    5850:	f7 e2       	ldi	r31, 0x27	; 39
    5852:	31 97       	sbiw	r30, 0x01	; 1
    5854:	f1 f7       	brne	.-4      	; 0x5852 <_Z13reed_debouncePVhh+0x1a>
    5856:	00 c0       	rjmp	.+0      	; 0x5858 <_Z13reed_debouncePVhh+0x20>
    5858:	00 00       	nop
	{
		/* Pin wurde auf Masse gezogen, ms warten   */
		_delay_ms(REEDMS);
		if ( !(*port & (1 << pin)) )
    585a:	fc 01       	movw	r30, r24
    585c:	80 81       	ld	r24, Z
    585e:	90 e0       	ldi	r25, 0x00	; 0
    5860:	02 c0       	rjmp	.+4      	; 0x5866 <_Z13reed_debouncePVhh+0x2e>
    5862:	95 95       	asr	r25
    5864:	87 95       	ror	r24
    5866:	6a 95       	dec	r22
    5868:	e2 f7       	brpl	.-8      	; 0x5862 <_Z13reed_debouncePVhh+0x2a>
    586a:	80 fd       	sbrc	r24, 0
    586c:	08 c0       	rjmp	.+16     	; 0x587e <_Z13reed_debouncePVhh+0x46>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    586e:	f2 e0       	ldi	r31, 0x02	; 2
    5870:	fa 95       	dec	r31
    5872:	f1 f7       	brne	.-4      	; 0x5870 <_Z13reed_debouncePVhh+0x38>
    5874:	00 c0       	rjmp	.+0      	; 0x5876 <_Z13reed_debouncePVhh+0x3e>
		{
			/* Anwender Zeit zum Loslassen des Tasters geben */
			_delay_us(1);
			return 1;
    5876:	81 e0       	ldi	r24, 0x01	; 1
    5878:	08 95       	ret
		}
	}
	return 0;
    587a:	80 e0       	ldi	r24, 0x00	; 0
    587c:	08 95       	ret
    587e:	80 e0       	ldi	r24, 0x00	; 0
}
    5880:	08 95       	ret

00005882 <_Z15geschwindigkeitf>:
//Berechnung der Geschwindigkeit
void geschwindigkeit(float durch){
    5882:	cf 92       	push	r12
    5884:	df 92       	push	r13
    5886:	ef 92       	push	r14
    5888:	ff 92       	push	r15
    588a:	cf 93       	push	r28
    588c:	df 93       	push	r29
	//Einholen der Daten und ruecksetzen
	uint16_t zaehlungen = TCNT1;
    588e:	e4 e8       	ldi	r30, 0x84	; 132
    5890:	f0 e0       	ldi	r31, 0x00	; 0
    5892:	c0 81       	ld	r28, Z
    5894:	d1 81       	ldd	r29, Z+1	; 0x01
	TCNT1 = 0;
    5896:	11 82       	std	Z+1, r1	; 0x01
    5898:	10 82       	st	Z, r1
	//Berechnung
	double temp = geschw;
	double umlaufzeit = (REEDMS/1000.0+(zaehlungen/zaehlungenprozeiteinheit)*zeitproachtzaehlungen);
	geschw = (durch)*M_PI*3.6;
    589a:	2b ed       	ldi	r18, 0xDB	; 219
    589c:	3f e0       	ldi	r19, 0x0F	; 15
    589e:	49 e4       	ldi	r20, 0x49	; 73
    58a0:	50 e4       	ldi	r21, 0x40	; 64
    58a2:	0e 94 64 40 	call	0x80c8	; 0x80c8 <__mulsf3>
    58a6:	26 e6       	ldi	r18, 0x66	; 102
    58a8:	36 e6       	ldi	r19, 0x66	; 102
    58aa:	46 e6       	ldi	r20, 0x66	; 102
    58ac:	50 e4       	ldi	r21, 0x40	; 64
    58ae:	0e 94 64 40 	call	0x80c8	; 0x80c8 <__mulsf3>
    58b2:	6b 01       	movw	r12, r22
    58b4:	7c 01       	movw	r14, r24
	//Einholen der Daten und ruecksetzen
	uint16_t zaehlungen = TCNT1;
	TCNT1 = 0;
	//Berechnung
	double temp = geschw;
	double umlaufzeit = (REEDMS/1000.0+(zaehlungen/zaehlungenprozeiteinheit)*zeitproachtzaehlungen);
    58b6:	be 01       	movw	r22, r28
    58b8:	80 e0       	ldi	r24, 0x00	; 0
    58ba:	90 e0       	ldi	r25, 0x00	; 0
    58bc:	0e 94 49 3f 	call	0x7e92	; 0x7e92 <__floatunsisf>
    58c0:	20 e0       	ldi	r18, 0x00	; 0
    58c2:	30 e0       	ldi	r19, 0x00	; 0
    58c4:	40 e0       	ldi	r20, 0x00	; 0
    58c6:	5e e3       	ldi	r21, 0x3E	; 62
    58c8:	0e 94 64 40 	call	0x80c8	; 0x80c8 <__mulsf3>
    58cc:	2d eb       	ldi	r18, 0xBD	; 189
    58ce:	37 e3       	ldi	r19, 0x37	; 55
    58d0:	46 e8       	ldi	r20, 0x86	; 134
    58d2:	5a e3       	ldi	r21, 0x3A	; 58
    58d4:	0e 94 64 40 	call	0x80c8	; 0x80c8 <__mulsf3>
    58d8:	2a e0       	ldi	r18, 0x0A	; 10
    58da:	37 ed       	ldi	r19, 0xD7	; 215
    58dc:	43 ea       	ldi	r20, 0xA3	; 163
    58de:	5b e3       	ldi	r21, 0x3B	; 59
    58e0:	0e 94 49 3e 	call	0x7c92	; 0x7c92 <__addsf3>
    58e4:	9b 01       	movw	r18, r22
    58e6:	ac 01       	movw	r20, r24
	geschw = (durch)*M_PI*3.6;
	geschw /= umlaufzeit;
    58e8:	c7 01       	movw	r24, r14
    58ea:	b6 01       	movw	r22, r12
    58ec:	0e 94 b0 3e 	call	0x7d60	; 0x7d60 <__divsf3>
	//Mittelwert aus der letzten Messung zum Fehler minimieren
	geschw += temp;
    58f0:	20 91 83 08 	lds	r18, 0x0883
    58f4:	30 91 84 08 	lds	r19, 0x0884
    58f8:	40 91 85 08 	lds	r20, 0x0885
    58fc:	50 91 86 08 	lds	r21, 0x0886
    5900:	0e 94 49 3e 	call	0x7c92	; 0x7c92 <__addsf3>
	geschw /= 2.0;
    5904:	20 e0       	ldi	r18, 0x00	; 0
    5906:	30 e0       	ldi	r19, 0x00	; 0
    5908:	40 e0       	ldi	r20, 0x00	; 0
    590a:	5f e3       	ldi	r21, 0x3F	; 63
    590c:	0e 94 64 40 	call	0x80c8	; 0x80c8 <__mulsf3>
    5910:	6b 01       	movw	r12, r22
    5912:	7c 01       	movw	r14, r24
	if (geschw >=160)
    5914:	20 e0       	ldi	r18, 0x00	; 0
    5916:	30 e0       	ldi	r19, 0x00	; 0
    5918:	40 e2       	ldi	r20, 0x20	; 32
    591a:	53 e4       	ldi	r21, 0x43	; 67
    591c:	0e 94 59 40 	call	0x80b2	; 0x80b2 <__gesf2>
    5920:	88 23       	and	r24, r24
    5922:	4c f4       	brge	.+18     	; 0x5936 <_Z15geschwindigkeitf+0xb4>
	double umlaufzeit = (REEDMS/1000.0+(zaehlungen/zaehlungenprozeiteinheit)*zeitproachtzaehlungen);
	geschw = (durch)*M_PI*3.6;
	geschw /= umlaufzeit;
	//Mittelwert aus der letzten Messung zum Fehler minimieren
	geschw += temp;
	geschw /= 2.0;
    5924:	c0 92 83 08 	sts	0x0883, r12
    5928:	d0 92 84 08 	sts	0x0884, r13
    592c:	e0 92 85 08 	sts	0x0885, r14
    5930:	f0 92 86 08 	sts	0x0886, r15
    5934:	08 c0       	rjmp	.+16     	; 0x5946 <_Z15geschwindigkeitf+0xc4>
	if (geschw >=160)
	{
		geschw=0;
    5936:	10 92 83 08 	sts	0x0883, r1
    593a:	10 92 84 08 	sts	0x0884, r1
    593e:	10 92 85 08 	sts	0x0885, r1
    5942:	10 92 86 08 	sts	0x0886, r1
	}
}
    5946:	df 91       	pop	r29
    5948:	cf 91       	pop	r28
    594a:	ff 90       	pop	r15
    594c:	ef 90       	pop	r14
    594e:	df 90       	pop	r13
    5950:	cf 90       	pop	r12
    5952:	08 95       	ret

00005954 <get_fattime>:

FATFS FATFS_Obj;
FIL logger;

DWORD get_fattime (void)
{
    5954:	0f 93       	push	r16
    5956:	1f 93       	push	r17
	/* Pack date and time into a DWORD variable */
	return	  ((DWORD)((2000+rtc.Jahr) - 1980) << 25)
	| ((DWORD)rtc.Monat << 21)
	| ((DWORD)rtc.Tag << 16)
    5958:	e2 e1       	ldi	r30, 0x12	; 18
    595a:	fe e0       	ldi	r31, 0x0E	; 14
    595c:	24 89       	ldd	r18, Z+20	; 0x14

DWORD get_fattime (void)
{
	/* Pack date and time into a DWORD variable */
	return	  ((DWORD)((2000+rtc.Jahr) - 1980) << 25)
	| ((DWORD)rtc.Monat << 21)
    595e:	86 89       	ldd	r24, Z+22	; 0x16
    5960:	90 e0       	ldi	r25, 0x00	; 0
    5962:	a0 e0       	ldi	r26, 0x00	; 0
    5964:	b0 e0       	ldi	r27, 0x00	; 0
    5966:	07 2e       	mov	r0, r23
    5968:	75 e1       	ldi	r23, 0x15	; 21
    596a:	88 0f       	add	r24, r24
    596c:	99 1f       	adc	r25, r25
    596e:	aa 1f       	adc	r26, r26
    5970:	bb 1f       	adc	r27, r27
    5972:	7a 95       	dec	r23
    5974:	d1 f7       	brne	.-12     	; 0x596a <get_fattime+0x16>
    5976:	70 2d       	mov	r23, r0
    5978:	a2 2b       	or	r26, r18
	| ((DWORD)rtc.Tag << 16)
	| ((DWORD)rtc.Stunden << 11)
    597a:	40 89       	ldd	r20, Z+16	; 0x10
    597c:	50 e0       	ldi	r21, 0x00	; 0
    597e:	60 e0       	ldi	r22, 0x00	; 0
    5980:	70 e0       	ldi	r23, 0x00	; 0
    5982:	03 2e       	mov	r0, r19
    5984:	3b e0       	ldi	r19, 0x0B	; 11
    5986:	44 0f       	add	r20, r20
    5988:	55 1f       	adc	r21, r21
    598a:	66 1f       	adc	r22, r22
    598c:	77 1f       	adc	r23, r23
    598e:	3a 95       	dec	r19
    5990:	d1 f7       	brne	.-12     	; 0x5986 <get_fattime+0x32>
    5992:	30 2d       	mov	r19, r0
    5994:	84 2b       	or	r24, r20
    5996:	95 2b       	or	r25, r21
    5998:	a6 2b       	or	r26, r22
    599a:	b7 2b       	or	r27, r23
	| ((DWORD)rtc.Minuten << 5)
    599c:	41 89       	ldd	r20, Z+17	; 0x11
    599e:	50 e0       	ldi	r21, 0x00	; 0
    59a0:	60 e0       	ldi	r22, 0x00	; 0
    59a2:	70 e0       	ldi	r23, 0x00	; 0
    59a4:	44 0f       	add	r20, r20
    59a6:	55 1f       	adc	r21, r21
    59a8:	66 1f       	adc	r22, r22
    59aa:	77 1f       	adc	r23, r23
    59ac:	44 0f       	add	r20, r20
    59ae:	55 1f       	adc	r21, r21
    59b0:	66 1f       	adc	r22, r22
    59b2:	77 1f       	adc	r23, r23
    59b4:	44 0f       	add	r20, r20
    59b6:	55 1f       	adc	r21, r21
    59b8:	66 1f       	adc	r22, r22
    59ba:	77 1f       	adc	r23, r23
    59bc:	44 0f       	add	r20, r20
    59be:	55 1f       	adc	r21, r21
    59c0:	66 1f       	adc	r22, r22
    59c2:	77 1f       	adc	r23, r23
    59c4:	44 0f       	add	r20, r20
    59c6:	55 1f       	adc	r21, r21
    59c8:	66 1f       	adc	r22, r22
    59ca:	77 1f       	adc	r23, r23
    59cc:	84 2b       	or	r24, r20
    59ce:	95 2b       	or	r25, r21
    59d0:	a6 2b       	or	r26, r22
    59d2:	b7 2b       	or	r27, r23
	| ((DWORD)rtc.Sekunden >> 1);
    59d4:	42 89       	ldd	r20, Z+18	; 0x12
    59d6:	50 e0       	ldi	r21, 0x00	; 0
    59d8:	60 e0       	ldi	r22, 0x00	; 0
    59da:	70 e0       	ldi	r23, 0x00	; 0
    59dc:	76 95       	lsr	r23
    59de:	67 95       	ror	r22
    59e0:	57 95       	ror	r21
    59e2:	47 95       	ror	r20
    59e4:	48 2b       	or	r20, r24
    59e6:	59 2b       	or	r21, r25
    59e8:	6a 2b       	or	r22, r26
    59ea:	7b 2b       	or	r23, r27
FIL logger;

DWORD get_fattime (void)
{
	/* Pack date and time into a DWORD variable */
	return	  ((DWORD)((2000+rtc.Jahr) - 1980) << 25)
    59ec:	87 89       	ldd	r24, Z+23	; 0x17
    59ee:	90 e0       	ldi	r25, 0x00	; 0
    59f0:	44 96       	adiw	r24, 0x14	; 20
    59f2:	09 2e       	mov	r0, r25
    59f4:	00 0c       	add	r0, r0
    59f6:	aa 0b       	sbc	r26, r26
    59f8:	bb 0b       	sbc	r27, r27
    59fa:	07 2e       	mov	r0, r23
    59fc:	79 e1       	ldi	r23, 0x19	; 25
    59fe:	88 0f       	add	r24, r24
    5a00:	99 1f       	adc	r25, r25
    5a02:	aa 1f       	adc	r26, r26
    5a04:	bb 1f       	adc	r27, r27
    5a06:	7a 95       	dec	r23
    5a08:	d1 f7       	brne	.-12     	; 0x59fe <get_fattime+0xaa>
    5a0a:	70 2d       	mov	r23, r0
	| ((DWORD)rtc.Monat << 21)
	| ((DWORD)rtc.Tag << 16)
	| ((DWORD)rtc.Stunden << 11)
	| ((DWORD)rtc.Minuten << 5)
	| ((DWORD)rtc.Sekunden >> 1);
    5a0c:	8a 01       	movw	r16, r20
    5a0e:	9b 01       	movw	r18, r22
    5a10:	08 2b       	or	r16, r24
    5a12:	19 2b       	or	r17, r25
    5a14:	2a 2b       	or	r18, r26
    5a16:	3b 2b       	or	r19, r27
    5a18:	c9 01       	movw	r24, r18
    5a1a:	b8 01       	movw	r22, r16
}
    5a1c:	1f 91       	pop	r17
    5a1e:	0f 91       	pop	r16
    5a20:	08 95       	ret

00005a22 <_Z15initialisierungv>:
		maininterupthandler(Folien[position]);
		gpshandler();
    }
}

void initialisierung(){	
    5a22:	ff 92       	push	r15
    5a24:	0f 93       	push	r16
    5a26:	1f 93       	push	r17
    5a28:	cf 93       	push	r28
    5a2a:	df 93       	push	r29
    5a2c:	cd b7       	in	r28, 0x3d	; 61
    5a2e:	de b7       	in	r29, 0x3e	; 62
    5a30:	a9 97       	sbiw	r28, 0x29	; 41
    5a32:	0f b6       	in	r0, 0x3f	; 63
    5a34:	f8 94       	cli
    5a36:	de bf       	out	0x3e, r29	; 62
    5a38:	0f be       	out	0x3f, r0	; 63
    5a3a:	cd bf       	out	0x3d, r28	; 61
	//nullen der Flagregister
	anzeige=0;
    5a3c:	10 92 e6 08 	sts	0x08E6, r1
	statusreg=0;
    5a40:	10 92 e5 08 	sts	0x08E5, r1
	position=0;
    5a44:	10 92 e4 08 	sts	0x08E4, r1
	FPS=0;
    5a48:	10 92 e3 08 	sts	0x08E3, r1
	
	//initialisieren des Zaehler fuer die Winkelgeschw sowie den Timer
	TCNT1 = 0;
    5a4c:	10 92 85 00 	sts	0x0085, r1
    5a50:	10 92 84 00 	sts	0x0084, r1
	TIMSK1 = 0;
    5a54:	10 92 6f 00 	sts	0x006F, r1
	TCCR1B = ((1<<CS12) | (1<<CS10));
    5a58:	85 e0       	ldi	r24, 0x05	; 5
    5a5a:	80 93 81 00 	sts	0x0081, r24
	
	//Eingang fuer den Reedkontak schalten mit internem Pullup
	DDRA |= ((1<<PORTA6));
    5a5e:	0e 9a       	sbi	0x01, 6	; 1
	PORTA |= (1<<PORTA6);
    5a60:	16 9a       	sbi	0x02, 6	; 2
	
	//ADC Initialisieren auf CH0
	ADMUX = (1<<REFS0);
    5a62:	80 e4       	ldi	r24, 0x40	; 64
    5a64:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA = (1<<ADPS1) | (1<<ADPS0);
    5a68:	ea e7       	ldi	r30, 0x7A	; 122
    5a6a:	f0 e0       	ldi	r31, 0x00	; 0
    5a6c:	83 e0       	ldi	r24, 0x03	; 3
    5a6e:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADEN);
    5a70:	80 81       	ld	r24, Z
    5a72:	80 68       	ori	r24, 0x80	; 128
    5a74:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);
    5a76:	80 81       	ld	r24, Z
    5a78:	80 64       	ori	r24, 0x40	; 64
    5a7a:	80 83       	st	Z, r24
	while (ADCSRA & (1<<ADSC) ) {}
    5a7c:	80 81       	ld	r24, Z
    5a7e:	18 2f       	mov	r17, r24
    5a80:	10 74       	andi	r17, 0x40	; 64
    5a82:	86 fd       	sbrc	r24, 6
    5a84:	fb cf       	rjmp	.-10     	; 0x5a7c <_Z15initialisierungv+0x5a>
	(void) ADCW;
    5a86:	80 91 78 00 	lds	r24, 0x0078
    5a8a:	90 91 79 00 	lds	r25, 0x0079
	
	//USART initalisieren, aktivieren erst spaeter
	PIND &= ~((1<<PIND1) | (1<<PIND2));
    5a8e:	89 b1       	in	r24, 0x09	; 9
    5a90:	89 7f       	andi	r24, 0xF9	; 249
    5a92:	89 b9       	out	0x09, r24	; 9
	DDRD &= ~((1<<PIND1) | (1<<PIND2));
    5a94:	8a b1       	in	r24, 0x0a	; 10
    5a96:	89 7f       	andi	r24, 0xF9	; 249
    5a98:	8a b9       	out	0x0a, r24	; 10
	UBRR0H = 0;
    5a9a:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = 51;							//9600 Baud
    5a9e:	83 e3       	ldi	r24, 0x33	; 51
    5aa0:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0C = (1<<UCSZ00) | (1<<UCSZ01);	// 8Bit Frame
    5aa4:	86 e0       	ldi	r24, 0x06	; 6
    5aa6:	80 93 c2 00 	sts	0x00C2, r24
	UCSR0B = (1<<RXCIE0);
    5aaa:	80 e8       	ldi	r24, 0x80	; 128
    5aac:	80 93 c1 00 	sts	0x00C1, r24
	gpscounter = 0;
    5ab0:	10 92 99 08 	sts	0x0899, r1
	gpsstatus = (1<<fix);
    5ab4:	80 93 e2 08 	sts	0x08E2, r24
	lat = 0;
    5ab8:	10 92 95 08 	sts	0x0895, r1
    5abc:	10 92 96 08 	sts	0x0896, r1
    5ac0:	10 92 97 08 	sts	0x0897, r1
    5ac4:	10 92 98 08 	sts	0x0898, r1
	lon = 0;
    5ac8:	10 92 91 08 	sts	0x0891, r1
    5acc:	10 92 92 08 	sts	0x0892, r1
    5ad0:	10 92 93 08 	sts	0x0893, r1
    5ad4:	10 92 94 08 	sts	0x0894, r1
	gpsspeed = 0;
    5ad8:	10 92 8d 08 	sts	0x088D, r1
    5adc:	10 92 8e 08 	sts	0x088E, r1
    5ae0:	10 92 8f 08 	sts	0x088F, r1
    5ae4:	10 92 90 08 	sts	0x0890, r1
	gpsstunde = 0;
    5ae8:	10 92 8c 08 	sts	0x088C, r1
	gpsminute = 0;
    5aec:	10 92 8b 08 	sts	0x088B, r1
	gpssekunde = 0;
    5af0:	10 92 8a 08 	sts	0x088A, r1
	gpsTag = 0;
    5af4:	10 92 89 08 	sts	0x0889, r1
	gpsMonat = 0;
    5af8:	10 92 88 08 	sts	0x0888, r1
	gpsJahr = 0;
    5afc:	10 92 87 08 	sts	0x0887, r1
		uint8_t posx;
		uint8_t maxentries;
		uint8_t maxentriesx;
	monitor(Display *ol, RTC *rt)
	{
		buffersize = 0;
    5b00:	1f 8a       	std	Y+23, r1	; 0x17
		oled = ol;
    5b02:	81 e1       	ldi	r24, 0x11	; 17
    5b04:	9a e0       	ldi	r25, 0x0A	; 10
    5b06:	99 8f       	std	Y+25, r25	; 0x19
    5b08:	88 8f       	std	Y+24, r24	; 0x18
		rtc = rt;
    5b0a:	82 e1       	ldi	r24, 0x12	; 18
    5b0c:	9e e0       	ldi	r25, 0x0E	; 14
    5b0e:	9b 8f       	std	Y+27, r25	; 0x1b
    5b10:	8a 8f       	std	Y+26, r24	; 0x1a
		posy=0;
    5b12:	1e a2       	std	Y+38, r1	; 0x26
		posx=0;
    5b14:	1f a2       	std	Y+39, r1	; 0x27
		maxentriesx = 1;
    5b16:	81 e0       	ldi	r24, 0x01	; 1
    5b18:	89 a7       	std	Y+41, r24	; 0x29
class wilkommen: public monitor
{
	private:
	
	public:
	wilkommen(Display *ol, RTC *rt):monitor(ol,rt)
    5b1a:	8e e0       	ldi	r24, 0x0E	; 14
    5b1c:	94 e0       	ldi	r25, 0x04	; 4
    5b1e:	9a 83       	std	Y+2, r25	; 0x02
    5b20:	89 83       	std	Y+1, r24	; 0x01
	{

	}
	
	void draw(){
		oled->clearFrame();
    5b22:	81 e1       	ldi	r24, 0x11	; 17
    5b24:	9a e0       	ldi	r25, 0x0A	; 10
    5b26:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <_ZN7Display10clearFrameEv>
		
		buffersize=sprintf(buffer,"Fahradcomputer");
    5b2a:	8f e0       	ldi	r24, 0x0F	; 15
    5b2c:	e6 e9       	ldi	r30, 0x96	; 150
    5b2e:	f1 e0       	ldi	r31, 0x01	; 1
    5b30:	de 01       	movw	r26, r28
    5b32:	13 96       	adiw	r26, 0x03	; 3
    5b34:	01 90       	ld	r0, Z+
    5b36:	0d 92       	st	X+, r0
    5b38:	8a 95       	dec	r24
    5b3a:	e1 f7       	brne	.-8      	; 0x5b34 <_Z15initialisierungv+0x112>
    5b3c:	8e e0       	ldi	r24, 0x0E	; 14
    5b3e:	8f 8b       	std	Y+23, r24	; 0x17
    5b40:	f1 2e       	mov	r15, r17
    5b42:	00 e0       	ldi	r16, 0x00	; 0
		for(uint8_t i=0; i < buffersize;i++){
			oled->draw_ASCI(buffer[i],i*charsize,0);
    5b44:	e3 e0       	ldi	r30, 0x03	; 3
    5b46:	f0 e0       	ldi	r31, 0x00	; 0
    5b48:	ec 0f       	add	r30, r28
    5b4a:	fd 1f       	adc	r31, r29
    5b4c:	e0 0f       	add	r30, r16
    5b4e:	f1 1d       	adc	r31, r1
    5b50:	20 e0       	ldi	r18, 0x00	; 0
    5b52:	4f 2d       	mov	r20, r15
    5b54:	60 81       	ld	r22, Z
    5b56:	88 8d       	ldd	r24, Y+24	; 0x18
    5b58:	99 8d       	ldd	r25, Y+25	; 0x19
    5b5a:	0e 94 00 0c 	call	0x1800	; 0x1800 <_ZN7Display9draw_ASCIEhhh>
	
	void draw(){
		oled->clearFrame();
		
		buffersize=sprintf(buffer,"Fahradcomputer");
		for(uint8_t i=0; i < buffersize;i++){
    5b5e:	0f 5f       	subi	r16, 0xFF	; 255
    5b60:	26 e0       	ldi	r18, 0x06	; 6
    5b62:	f2 0e       	add	r15, r18
    5b64:	8f 89       	ldd	r24, Y+23	; 0x17
    5b66:	08 17       	cp	r16, r24
    5b68:	68 f3       	brcs	.-38     	; 0x5b44 <_Z15initialisierungv+0x122>
			oled->draw_ASCI(buffer[i],i*charsize,0);
		}
		buffersize=sprintf(buffer,"--------------");
    5b6a:	8f e0       	ldi	r24, 0x0F	; 15
    5b6c:	e5 ea       	ldi	r30, 0xA5	; 165
    5b6e:	f1 e0       	ldi	r31, 0x01	; 1
    5b70:	de 01       	movw	r26, r28
    5b72:	13 96       	adiw	r26, 0x03	; 3
    5b74:	01 90       	ld	r0, Z+
    5b76:	0d 92       	st	X+, r0
    5b78:	8a 95       	dec	r24
    5b7a:	e1 f7       	brne	.-8      	; 0x5b74 <_Z15initialisierungv+0x152>
    5b7c:	8e e0       	ldi	r24, 0x0E	; 14
    5b7e:	8f 8b       	std	Y+23, r24	; 0x17
    5b80:	f1 2e       	mov	r15, r17
    5b82:	00 e0       	ldi	r16, 0x00	; 0
		for(uint8_t i=0; i < buffersize;i++){
			oled->draw_ASCI(buffer[i],i*charsize,8);
    5b84:	e3 e0       	ldi	r30, 0x03	; 3
    5b86:	f0 e0       	ldi	r31, 0x00	; 0
    5b88:	ec 0f       	add	r30, r28
    5b8a:	fd 1f       	adc	r31, r29
    5b8c:	e0 0f       	add	r30, r16
    5b8e:	f1 1d       	adc	r31, r1
    5b90:	28 e0       	ldi	r18, 0x08	; 8
    5b92:	4f 2d       	mov	r20, r15
    5b94:	60 81       	ld	r22, Z
    5b96:	88 8d       	ldd	r24, Y+24	; 0x18
    5b98:	99 8d       	ldd	r25, Y+25	; 0x19
    5b9a:	0e 94 00 0c 	call	0x1800	; 0x1800 <_ZN7Display9draw_ASCIEhhh>
		buffersize=sprintf(buffer,"Fahradcomputer");
		for(uint8_t i=0; i < buffersize;i++){
			oled->draw_ASCI(buffer[i],i*charsize,0);
		}
		buffersize=sprintf(buffer,"--------------");
		for(uint8_t i=0; i < buffersize;i++){
    5b9e:	0f 5f       	subi	r16, 0xFF	; 255
    5ba0:	36 e0       	ldi	r19, 0x06	; 6
    5ba2:	f3 0e       	add	r15, r19
    5ba4:	8f 89       	ldd	r24, Y+23	; 0x17
    5ba6:	08 17       	cp	r16, r24
    5ba8:	68 f3       	brcs	.-38     	; 0x5b84 <_Z15initialisierungv+0x162>
			oled->draw_ASCI(buffer[i],i*charsize,8);
		}
		buffersize=sprintf(buffer,"Version: %.2f",(double)VERSIONSNUMMER);
    5baa:	80 e4       	ldi	r24, 0x40	; 64
    5bac:	8f 93       	push	r24
    5bae:	81 e4       	ldi	r24, 0x41	; 65
    5bb0:	8f 93       	push	r24
    5bb2:	8b ee       	ldi	r24, 0xEB	; 235
    5bb4:	8f 93       	push	r24
    5bb6:	85 e8       	ldi	r24, 0x85	; 133
    5bb8:	8f 93       	push	r24
    5bba:	84 eb       	ldi	r24, 0xB4	; 180
    5bbc:	91 e0       	ldi	r25, 0x01	; 1
    5bbe:	9f 93       	push	r25
    5bc0:	8f 93       	push	r24
    5bc2:	ce 01       	movw	r24, r28
    5bc4:	03 96       	adiw	r24, 0x03	; 3
    5bc6:	9f 93       	push	r25
    5bc8:	8f 93       	push	r24
    5bca:	0e 94 67 48 	call	0x90ce	; 0x90ce <sprintf>
    5bce:	8f 8b       	std	Y+23, r24	; 0x17
		for(uint8_t i=0; i < buffersize;i++){
    5bd0:	0f b6       	in	r0, 0x3f	; 63
    5bd2:	f8 94       	cli
    5bd4:	de bf       	out	0x3e, r29	; 62
    5bd6:	0f be       	out	0x3f, r0	; 63
    5bd8:	cd bf       	out	0x3d, r28	; 61
    5bda:	88 23       	and	r24, r24
    5bdc:	99 f0       	breq	.+38     	; 0x5c04 <_Z15initialisierungv+0x1e2>
    5bde:	00 e0       	ldi	r16, 0x00	; 0
			oled->draw_ASCI(buffer[i],i*charsize,32);
    5be0:	e3 e0       	ldi	r30, 0x03	; 3
    5be2:	f0 e0       	ldi	r31, 0x00	; 0
    5be4:	ec 0f       	add	r30, r28
    5be6:	fd 1f       	adc	r31, r29
    5be8:	e0 0f       	add	r30, r16
    5bea:	f1 1d       	adc	r31, r1
    5bec:	20 e2       	ldi	r18, 0x20	; 32
    5bee:	41 2f       	mov	r20, r17
    5bf0:	60 81       	ld	r22, Z
    5bf2:	88 8d       	ldd	r24, Y+24	; 0x18
    5bf4:	99 8d       	ldd	r25, Y+25	; 0x19
    5bf6:	0e 94 00 0c 	call	0x1800	; 0x1800 <_ZN7Display9draw_ASCIEhhh>
		buffersize=sprintf(buffer,"--------------");
		for(uint8_t i=0; i < buffersize;i++){
			oled->draw_ASCI(buffer[i],i*charsize,8);
		}
		buffersize=sprintf(buffer,"Version: %.2f",(double)VERSIONSNUMMER);
		for(uint8_t i=0; i < buffersize;i++){
    5bfa:	0f 5f       	subi	r16, 0xFF	; 255
    5bfc:	1a 5f       	subi	r17, 0xFA	; 250
    5bfe:	8f 89       	ldd	r24, Y+23	; 0x17
    5c00:	08 17       	cp	r16, r24
    5c02:	70 f3       	brcs	.-36     	; 0x5be0 <_Z15initialisierungv+0x1be>
		oled->clearFrame();
	}

	//send the frame to the display
	void send(){
		oled->sendFrame();	
    5c04:	88 8d       	ldd	r24, Y+24	; 0x18
    5c06:	99 8d       	ldd	r25, Y+25	; 0x19
    5c08:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <_ZN7Display9sendFrameEv>
    5c0c:	8a e0       	ldi	r24, 0x0A	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    5c0e:	ff e7       	ldi	r31, 0x7F	; 127
    5c10:	28 e3       	ldi	r18, 0x38	; 56
    5c12:	31 e0       	ldi	r19, 0x01	; 1
    5c14:	f1 50       	subi	r31, 0x01	; 1
    5c16:	20 40       	sbci	r18, 0x00	; 0
    5c18:	30 40       	sbci	r19, 0x00	; 0
    5c1a:	e1 f7       	brne	.-8      	; 0x5c14 <_Z15initialisierungv+0x1f2>
    5c1c:	00 c0       	rjmp	.+0      	; 0x5c1e <_Z15initialisierungv+0x1fc>
    5c1e:	00 00       	nop
    5c20:	9f e7       	ldi	r25, 0x7F	; 127
    5c22:	e8 e3       	ldi	r30, 0x38	; 56
    5c24:	f1 e0       	ldi	r31, 0x01	; 1
    5c26:	91 50       	subi	r25, 0x01	; 1
    5c28:	e0 40       	sbci	r30, 0x00	; 0
    5c2a:	f0 40       	sbci	r31, 0x00	; 0
    5c2c:	e1 f7       	brne	.-8      	; 0x5c26 <_Z15initialisierungv+0x204>
    5c2e:	00 c0       	rjmp	.+0      	; 0x5c30 <_Z15initialisierungv+0x20e>
    5c30:	00 00       	nop
    5c32:	81 50       	subi	r24, 0x01	; 1
	
	//Wilkommensanzeige
	wilkommen wil(&oled,&rtc);
	wil.draw();
	for (uint8_t i=0; i<10;i++)
    5c34:	61 f7       	brne	.-40     	; 0x5c0e <_Z15initialisierungv+0x1ec>
		_delay_ms(50);
		_delay_ms(50);
	}

	//letzten Zeitpunkt holen und RTC starten
	rtc.Sekunden= 0;
    5c36:	02 e1       	ldi	r16, 0x12	; 18
    5c38:	1e e0       	ldi	r17, 0x0E	; 14
    5c3a:	f8 01       	movw	r30, r16
    5c3c:	12 8a       	std	Z+18, r1	; 0x12
	rtc.Minuten	= EEPROM_Read(EEMINUTEN);
    5c3e:	80 e0       	ldi	r24, 0x00	; 0
    5c40:	90 e0       	ldi	r25, 0x00	; 0
    5c42:	0e dd       	rcall	.-1508   	; 0x5660 <_Z11EEPROM_Readj>
    5c44:	f8 01       	movw	r30, r16
    5c46:	81 8b       	std	Z+17, r24	; 0x11
	rtc.Stunden	= EEPROM_Read(EESTUNDEN);
    5c48:	81 e0       	ldi	r24, 0x01	; 1
    5c4a:	90 e0       	ldi	r25, 0x00	; 0
    5c4c:	09 dd       	rcall	.-1518   	; 0x5660 <_Z11EEPROM_Readj>
    5c4e:	f8 01       	movw	r30, r16
    5c50:	80 8b       	std	Z+16, r24	; 0x10
	rtc.Tag		= EEPROM_Read(EETAGE);
    5c52:	82 e0       	ldi	r24, 0x02	; 2
    5c54:	90 e0       	ldi	r25, 0x00	; 0
    5c56:	04 dd       	rcall	.-1528   	; 0x5660 <_Z11EEPROM_Readj>
    5c58:	f8 01       	movw	r30, r16
    5c5a:	84 8b       	std	Z+20, r24	; 0x14
	rtc.Monat	= EEPROM_Read(EEMONAT);
    5c5c:	83 e0       	ldi	r24, 0x03	; 3
    5c5e:	90 e0       	ldi	r25, 0x00	; 0
    5c60:	ff dc       	rcall	.-1538   	; 0x5660 <_Z11EEPROM_Readj>
    5c62:	f8 01       	movw	r30, r16
    5c64:	86 8b       	std	Z+22, r24	; 0x16
	rtc.Jahr	= EEPROM_Read(EEJAHR);
    5c66:	84 e0       	ldi	r24, 0x04	; 4
    5c68:	90 e0       	ldi	r25, 0x00	; 0
    5c6a:	fa dc       	rcall	.-1548   	; 0x5660 <_Z11EEPROM_Readj>
    5c6c:	f8 01       	movw	r30, r16
    5c6e:	87 8b       	std	Z+23, r24	; 0x17
	rtc.ausgabedatumneu();
    5c70:	c8 01       	movw	r24, r16
    5c72:	0e 94 47 3d 	call	0x7a8e	; 0x7a8e <_ZN3RTC15ausgabedatumneuEv>
	rtc.RTCstart();
    5c76:	c8 01       	movw	r24, r16
    5c78:	0e 94 28 3e 	call	0x7c50	; 0x7c50 <_ZN3RTC8RTCstartEv>
	
	//AD deaktivieren zum stromsparen
	ACSR |= (1<<ACD);
    5c7c:	80 b7       	in	r24, 0x30	; 48
    5c7e:	80 68       	ori	r24, 0x80	; 128
    5c80:	80 bf       	out	0x30, r24	; 48
	
	//USART aktivieren jetzt nur hier zum testen
	UCSR0B |= (1<<RXEN0);
    5c82:	e1 ec       	ldi	r30, 0xC1	; 193
    5c84:	f0 e0       	ldi	r31, 0x00	; 0
    5c86:	80 81       	ld	r24, Z
    5c88:	80 61       	ori	r24, 0x10	; 16
    5c8a:	80 83       	st	Z, r24
	
	//SD Karten timer init
	TCCR0A	 = (1<<WGM01);		//Timer im ctc Mode
    5c8c:	82 e0       	ldi	r24, 0x02	; 2
    5c8e:	84 bd       	out	0x24, r24	; 36
	OCR0A	 = 38;		//ctc counter ende
    5c90:	86 e2       	ldi	r24, 0x26	; 38
    5c92:	87 bd       	out	0x27, r24	; 39
	TIMSK0	|= (1<<OCIE0A);
    5c94:	ee e6       	ldi	r30, 0x6E	; 110
    5c96:	f0 e0       	ldi	r31, 0x00	; 0
    5c98:	80 81       	ld	r24, Z
    5c9a:	82 60       	ori	r24, 0x02	; 2
    5c9c:	80 83       	st	Z, r24
	TCCR0B	|= (1<<CS02) | (1<<CS00);	//presc=1024
    5c9e:	85 b5       	in	r24, 0x25	; 37
    5ca0:	85 60       	ori	r24, 0x05	; 5
    5ca2:	85 bd       	out	0x25, r24	; 37
	sei();
    5ca4:	78 94       	sei
}
    5ca6:	a9 96       	adiw	r28, 0x29	; 41
    5ca8:	0f b6       	in	r0, 0x3f	; 63
    5caa:	f8 94       	cli
    5cac:	de bf       	out	0x3e, r29	; 62
    5cae:	0f be       	out	0x3f, r0	; 63
    5cb0:	cd bf       	out	0x3d, r28	; 61
    5cb2:	df 91       	pop	r29
    5cb4:	cf 91       	pop	r28
    5cb6:	1f 91       	pop	r17
    5cb8:	0f 91       	pop	r16
    5cba:	ff 90       	pop	r15
    5cbc:	08 95       	ret

00005cbe <_Z15tastaturhandlerP7monitorh>:

void tastaturhandler(monitor *mon, uint8_t taste){
    5cbe:	cf 93       	push	r28
    5cc0:	df 93       	push	r29
    5cc2:	1f 92       	push	r1
    5cc4:	cd b7       	in	r28, 0x3d	; 61
    5cc6:	de b7       	in	r29, 0x3e	; 62
    5cc8:	69 83       	std	Y+1, r22	; 0x01
	if (taste!=' ')
    5cca:	60 32       	cpi	r22, 0x20	; 32
    5ccc:	09 f4       	brne	.+2      	; 0x5cd0 <_Z15tastaturhandlerP7monitorh+0x12>
    5cce:	8e c0       	rjmp	.+284    	; 0x5dec <_Z15tastaturhandlerP7monitorh+0x12e>
    5cd0:	dc 01       	movw	r26, r24
	{
		anzeige |= (1<<refreshdisplay);
    5cd2:	80 91 e6 08 	lds	r24, 0x08E6
    5cd6:	81 60       	ori	r24, 0x01	; 1
    5cd8:	80 93 e6 08 	sts	0x08E6, r24
		switch (taste)							//Tastendruck ueberpruefen
    5cdc:	46 2f       	mov	r20, r22
    5cde:	50 e0       	ldi	r21, 0x00	; 0
    5ce0:	fa 01       	movw	r30, r20
    5ce2:	f0 97       	sbiw	r30, 0x30	; 48
    5ce4:	e6 34       	cpi	r30, 0x46	; 70
    5ce6:	f1 05       	cpc	r31, r1
    5ce8:	08 f0       	brcs	.+2      	; 0x5cec <_Z15tastaturhandlerP7monitorh+0x2e>
    5cea:	75 c0       	rjmp	.+234    	; 0x5dd6 <_Z15tastaturhandlerP7monitorh+0x118>
    5cec:	e5 55       	subi	r30, 0x55	; 85
    5cee:	ff 4f       	sbci	r31, 0xFF	; 255
    5cf0:	0c 94 ec 45 	jmp	0x8bd8	; 0x8bd8 <__tablejump2__>
		{
			case 'm':
			position = numberofpages;
    5cf4:	85 e0       	ldi	r24, 0x05	; 5
    5cf6:	80 93 e4 08 	sts	0x08E4, r24
			break;
    5cfa:	78 c0       	rjmp	.+240    	; 0x5dec <_Z15tastaturhandlerP7monitorh+0x12e>
			case 'l':
			if (mon->posx==0)
    5cfc:	96 96       	adiw	r26, 0x26	; 38
    5cfe:	8c 91       	ld	r24, X
    5d00:	96 97       	sbiw	r26, 0x26	; 38
    5d02:	81 11       	cpse	r24, r1
    5d04:	04 c0       	rjmp	.+8      	; 0x5d0e <_Z15tastaturhandlerP7monitorh+0x50>
			{
				position = numberofpages;
    5d06:	85 e0       	ldi	r24, 0x05	; 5
    5d08:	80 93 e4 08 	sts	0x08E4, r24
    5d0c:	6f c0       	rjmp	.+222    	; 0x5dec <_Z15tastaturhandlerP7monitorh+0x12e>
			}
			else{
				mon->posx--;
    5d0e:	81 50       	subi	r24, 0x01	; 1
    5d10:	96 96       	adiw	r26, 0x26	; 38
    5d12:	8c 93       	st	X, r24
    5d14:	6b c0       	rjmp	.+214    	; 0x5dec <_Z15tastaturhandlerP7monitorh+0x12e>
			}
			break;
			case 'r':
			if (position==numberofpages)
    5d16:	80 91 e4 08 	lds	r24, 0x08E4
    5d1a:	85 30       	cpi	r24, 0x05	; 5
    5d1c:	29 f4       	brne	.+10     	; 0x5d28 <_Z15tastaturhandlerP7monitorh+0x6a>
			{
				position=mon->posy;
    5d1e:	95 96       	adiw	r26, 0x25	; 37
    5d20:	8c 91       	ld	r24, X
    5d22:	80 93 e4 08 	sts	0x08E4, r24
    5d26:	62 c0       	rjmp	.+196    	; 0x5dec <_Z15tastaturhandlerP7monitorh+0x12e>
			}
			else if (!(mon->posx >= mon->maxentriesx))
    5d28:	96 96       	adiw	r26, 0x26	; 38
    5d2a:	8c 91       	ld	r24, X
    5d2c:	96 97       	sbiw	r26, 0x26	; 38
    5d2e:	98 96       	adiw	r26, 0x28	; 40
    5d30:	9c 91       	ld	r25, X
    5d32:	98 97       	sbiw	r26, 0x28	; 40
    5d34:	89 17       	cp	r24, r25
    5d36:	08 f0       	brcs	.+2      	; 0x5d3a <_Z15tastaturhandlerP7monitorh+0x7c>
    5d38:	59 c0       	rjmp	.+178    	; 0x5dec <_Z15tastaturhandlerP7monitorh+0x12e>
			{
				mon->posx++;
    5d3a:	8f 5f       	subi	r24, 0xFF	; 255
    5d3c:	96 96       	adiw	r26, 0x26	; 38
    5d3e:	8c 93       	st	X, r24
    5d40:	55 c0       	rjmp	.+170    	; 0x5dec <_Z15tastaturhandlerP7monitorh+0x12e>
			}
			break;
			case 'o':
			if (position==numberofpages)
    5d42:	80 91 e4 08 	lds	r24, 0x08E4
    5d46:	85 30       	cpi	r24, 0x05	; 5
    5d48:	29 f4       	brne	.+10     	; 0x5d54 <_Z15tastaturhandlerP7monitorh+0x96>
			{
				position=mon->posy;
    5d4a:	95 96       	adiw	r26, 0x25	; 37
    5d4c:	8c 91       	ld	r24, X
    5d4e:	80 93 e4 08 	sts	0x08E4, r24
    5d52:	4c c0       	rjmp	.+152    	; 0x5dec <_Z15tastaturhandlerP7monitorh+0x12e>
			}
			else if (!(mon->posx >= mon->maxentriesx))
    5d54:	96 96       	adiw	r26, 0x26	; 38
    5d56:	8c 91       	ld	r24, X
    5d58:	96 97       	sbiw	r26, 0x26	; 38
    5d5a:	98 96       	adiw	r26, 0x28	; 40
    5d5c:	9c 91       	ld	r25, X
    5d5e:	98 97       	sbiw	r26, 0x28	; 40
    5d60:	89 17       	cp	r24, r25
    5d62:	08 f0       	brcs	.+2      	; 0x5d66 <_Z15tastaturhandlerP7monitorh+0xa8>
    5d64:	43 c0       	rjmp	.+134    	; 0x5dec <_Z15tastaturhandlerP7monitorh+0x12e>
			{
				mon->posx++;
    5d66:	8f 5f       	subi	r24, 0xFF	; 255
    5d68:	96 96       	adiw	r26, 0x26	; 38
    5d6a:	8c 93       	st	X, r24
    5d6c:	3f c0       	rjmp	.+126    	; 0x5dec <_Z15tastaturhandlerP7monitorh+0x12e>
			}
			break;
			case 'd':
			if (!(mon->posy >= mon->maxentries-1))
    5d6e:	95 96       	adiw	r26, 0x25	; 37
    5d70:	2c 91       	ld	r18, X
    5d72:	95 97       	sbiw	r26, 0x25	; 37
    5d74:	42 2f       	mov	r20, r18
    5d76:	50 e0       	ldi	r21, 0x00	; 0
    5d78:	97 96       	adiw	r26, 0x27	; 39
    5d7a:	8c 91       	ld	r24, X
    5d7c:	97 97       	sbiw	r26, 0x27	; 39
    5d7e:	90 e0       	ldi	r25, 0x00	; 0
    5d80:	01 97       	sbiw	r24, 0x01	; 1
    5d82:	48 17       	cp	r20, r24
    5d84:	59 07       	cpc	r21, r25
    5d86:	24 f4       	brge	.+8      	; 0x5d90 <_Z15tastaturhandlerP7monitorh+0xd2>
			{
				mon->posy++;
    5d88:	2f 5f       	subi	r18, 0xFF	; 255
    5d8a:	95 96       	adiw	r26, 0x25	; 37
    5d8c:	2c 93       	st	X, r18
    5d8e:	2e c0       	rjmp	.+92     	; 0x5dec <_Z15tastaturhandlerP7monitorh+0x12e>
			}
			else{
				mon->posy = 0;
    5d90:	95 96       	adiw	r26, 0x25	; 37
    5d92:	1c 92       	st	X, r1
    5d94:	2b c0       	rjmp	.+86     	; 0x5dec <_Z15tastaturhandlerP7monitorh+0x12e>
			}
			break;
			case 'u':
			if (!(mon->posy == 0))
    5d96:	95 96       	adiw	r26, 0x25	; 37
    5d98:	8c 91       	ld	r24, X
    5d9a:	95 97       	sbiw	r26, 0x25	; 37
    5d9c:	88 23       	and	r24, r24
    5d9e:	21 f0       	breq	.+8      	; 0x5da8 <_Z15tastaturhandlerP7monitorh+0xea>
			{
				mon->posy--;
    5da0:	81 50       	subi	r24, 0x01	; 1
    5da2:	95 96       	adiw	r26, 0x25	; 37
    5da4:	8c 93       	st	X, r24
    5da6:	22 c0       	rjmp	.+68     	; 0x5dec <_Z15tastaturhandlerP7monitorh+0x12e>
			}
			else{
				mon->posy=mon->maxentries-1;
    5da8:	97 96       	adiw	r26, 0x27	; 39
    5daa:	8c 91       	ld	r24, X
    5dac:	97 97       	sbiw	r26, 0x27	; 39
    5dae:	81 50       	subi	r24, 0x01	; 1
    5db0:	95 96       	adiw	r26, 0x25	; 37
    5db2:	8c 93       	st	X, r24
    5db4:	1b c0       	rjmp	.+54     	; 0x5dec <_Z15tastaturhandlerP7monitorh+0x12e>
			}
			break;
			case '0':
			//Licht an/aus
			if (LED.ison())
    5db6:	8b ee       	ldi	r24, 0xEB	; 235
    5db8:	98 e0       	ldi	r25, 0x08	; 8
    5dba:	0e 94 80 3c 	call	0x7900	; 0x7900 <_ZN6Output4isonEv>
    5dbe:	88 23       	and	r24, r24
    5dc0:	29 f0       	breq	.+10     	; 0x5dcc <_Z15tastaturhandlerP7monitorh+0x10e>
			{
				LED.off();
    5dc2:	8b ee       	ldi	r24, 0xEB	; 235
    5dc4:	98 e0       	ldi	r25, 0x08	; 8
    5dc6:	0e 94 bb 3c 	call	0x7976	; 0x7976 <_ZN6Output3offEv>
    5dca:	10 c0       	rjmp	.+32     	; 0x5dec <_Z15tastaturhandlerP7monitorh+0x12e>
			}
			else{
				LED.on();
    5dcc:	8b ee       	ldi	r24, 0xEB	; 235
    5dce:	98 e0       	ldi	r25, 0x08	; 8
    5dd0:	0e 94 43 3c 	call	0x7886	; 0x7886 <_ZN6Output2onEv>
    5dd4:	0b c0       	rjmp	.+22     	; 0x5dec <_Z15tastaturhandlerP7monitorh+0x12e>
			}
			break;
			default:
			//alle anderen Tasten werden an den jeweiligen Handler weiter gegeben
			mon->tastendruck(&taste);
    5dd6:	ed 91       	ld	r30, X+
    5dd8:	fc 91       	ld	r31, X
    5dda:	11 97       	sbiw	r26, 0x01	; 1
    5ddc:	01 90       	ld	r0, Z+
    5dde:	f0 81       	ld	r31, Z
    5de0:	e0 2d       	mov	r30, r0
    5de2:	be 01       	movw	r22, r28
    5de4:	6f 5f       	subi	r22, 0xFF	; 255
    5de6:	7f 4f       	sbci	r23, 0xFF	; 255
    5de8:	cd 01       	movw	r24, r26
    5dea:	09 95       	icall
			break;
		}
	}
}
    5dec:	0f 90       	pop	r0
    5dee:	df 91       	pop	r29
    5df0:	cf 91       	pop	r28
    5df2:	08 95       	ret

00005df4 <_Z19maininterupthandlerP7monitor>:

void maininterupthandler(monitor *mon){
    5df4:	af 92       	push	r10
    5df6:	bf 92       	push	r11
    5df8:	cf 92       	push	r12
    5dfa:	df 92       	push	r13
    5dfc:	ef 92       	push	r14
    5dfe:	ff 92       	push	r15
    5e00:	0f 93       	push	r16
    5e02:	1f 93       	push	r17
    5e04:	cf 93       	push	r28
    5e06:	df 93       	push	r29
    5e08:	cd b7       	in	r28, 0x3d	; 61
    5e0a:	de b7       	in	r29, 0x3e	; 62
    5e0c:	2c 97       	sbiw	r28, 0x0c	; 12
    5e0e:	0f b6       	in	r0, 0x3f	; 63
    5e10:	f8 94       	cli
    5e12:	de bf       	out	0x3e, r29	; 62
    5e14:	0f be       	out	0x3f, r0	; 63
    5e16:	cd bf       	out	0x3d, r28	; 61
    5e18:	8c 01       	movw	r16, r24
	if (position==1)							//Berechnung der Geschwindigkeit fuer Tacho
    5e1a:	90 91 e4 08 	lds	r25, 0x08E4
    5e1e:	91 30       	cpi	r25, 0x01	; 1
    5e20:	09 f5       	brne	.+66     	; 0x5e64 <_Z19maininterupthandlerP7monitor+0x70>
	{
		//debounce Funktion fuer den Reedswitch
		if (reed_debounce(&PINA,PINA7))
    5e22:	67 e0       	ldi	r22, 0x07	; 7
    5e24:	80 e2       	ldi	r24, 0x20	; 32
    5e26:	90 e0       	ldi	r25, 0x00	; 0
    5e28:	07 dd       	rcall	.-1522   	; 0x5838 <_Z13reed_debouncePVhh>
    5e2a:	88 23       	and	r24, r24
    5e2c:	31 f0       	breq	.+12     	; 0x5e3a <_Z19maininterupthandlerP7monitor+0x46>
		{
			//Durchmesser ist 28 Zoll
			geschwindigkeit(28.0*2.54/100.0);
    5e2e:	63 e3       	ldi	r22, 0x33	; 51
    5e30:	71 e1       	ldi	r23, 0x11	; 17
    5e32:	86 e3       	ldi	r24, 0x36	; 54
    5e34:	9f e3       	ldi	r25, 0x3F	; 63
    5e36:	25 dd       	rcall	.-1462   	; 0x5882 <_Z15geschwindigkeitf>
    5e38:	aa c0       	rjmp	.+340    	; 0x5f8e <_Z19maininterupthandlerP7monitor+0x19a>
		}
		//Hier mit werden geschwindigkeiten, die kleiner als 2.6km/h betragen gefiltert
		//Somit wird die letzte Geschwindigkeit nach 3 Sekunden geloescht
		//Das ist noch nicht die beste Variante
		else if (TCNT1>23437)
    5e3a:	80 91 84 00 	lds	r24, 0x0084
    5e3e:	90 91 85 00 	lds	r25, 0x0085
    5e42:	8e 38       	cpi	r24, 0x8E	; 142
    5e44:	9b 45       	sbci	r25, 0x5B	; 91
    5e46:	08 f4       	brcc	.+2      	; 0x5e4a <_Z19maininterupthandlerP7monitor+0x56>
    5e48:	a2 c0       	rjmp	.+324    	; 0x5f8e <_Z19maininterupthandlerP7monitor+0x19a>
		{
			TCNT1=0;
    5e4a:	10 92 85 00 	sts	0x0085, r1
    5e4e:	10 92 84 00 	sts	0x0084, r1
			geschw=0;
    5e52:	10 92 83 08 	sts	0x0883, r1
    5e56:	10 92 84 08 	sts	0x0884, r1
    5e5a:	10 92 85 08 	sts	0x0885, r1
    5e5e:	10 92 86 08 	sts	0x0886, r1
    5e62:	95 c0       	rjmp	.+298    	; 0x5f8e <_Z19maininterupthandlerP7monitor+0x19a>
		}
	}
	//SD Karte mounten bzw. aufnahme starten
	else if (position==3)
    5e64:	93 30       	cpi	r25, 0x03	; 3
    5e66:	09 f0       	breq	.+2      	; 0x5e6a <_Z19maininterupthandlerP7monitor+0x76>
    5e68:	92 c0       	rjmp	.+292    	; 0x5f8e <_Z19maininterupthandlerP7monitor+0x19a>
	{
		if (mon->posy==3 && mon->posx==1)
    5e6a:	d8 01       	movw	r26, r16
    5e6c:	95 96       	adiw	r26, 0x25	; 37
    5e6e:	8c 91       	ld	r24, X
    5e70:	95 97       	sbiw	r26, 0x25	; 37
    5e72:	83 30       	cpi	r24, 0x03	; 3
    5e74:	81 f5       	brne	.+96     	; 0x5ed6 <_Z19maininterupthandlerP7monitor+0xe2>
    5e76:	96 96       	adiw	r26, 0x26	; 38
    5e78:	8c 91       	ld	r24, X
    5e7a:	81 30       	cpi	r24, 0x01	; 1
    5e7c:	09 f0       	breq	.+2      	; 0x5e80 <_Z19maininterupthandlerP7monitor+0x8c>
    5e7e:	87 c0       	rjmp	.+270    	; 0x5f8e <_Z19maininterupthandlerP7monitor+0x19a>
		{
			if (!(statusreg&(1<<mounttingstat)))
    5e80:	80 91 e5 08 	lds	r24, 0x08E5
    5e84:	81 fd       	sbrc	r24, 1
    5e86:	14 c0       	rjmp	.+40     	; 0x5eb0 <_Z19maininterupthandlerP7monitor+0xbc>
			{
				//mounting sd Karte
				if (disk_initialize(0) == 0)
    5e88:	80 e0       	ldi	r24, 0x00	; 0
    5e8a:	0e 94 a2 07 	call	0xf44	; 0xf44 <disk_initialize>
    5e8e:	81 11       	cpse	r24, r1
    5e90:	1d c0       	rjmp	.+58     	; 0x5ecc <_Z19maininterupthandlerP7monitor+0xd8>
				{
					if (f_mount(&FATFS_Obj,"",0) == 0)
    5e92:	40 e0       	ldi	r20, 0x00	; 0
    5e94:	64 ef       	ldi	r22, 0xF4	; 244
    5e96:	72 e0       	ldi	r23, 0x02	; 2
    5e98:	89 e4       	ldi	r24, 0x49	; 73
    5e9a:	96 e0       	ldi	r25, 0x06	; 6
    5e9c:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <f_mount>
    5ea0:	81 11       	cpse	r24, r1
    5ea2:	14 c0       	rjmp	.+40     	; 0x5ecc <_Z19maininterupthandlerP7monitor+0xd8>
					{
						statusreg |= (1<<mounttingstat);
    5ea4:	80 91 e5 08 	lds	r24, 0x08E5
    5ea8:	82 60       	ori	r24, 0x02	; 2
    5eaa:	80 93 e5 08 	sts	0x08E5, r24
    5eae:	0e c0       	rjmp	.+28     	; 0x5ecc <_Z19maininterupthandlerP7monitor+0xd8>
					}
				}
			}
			else if (!(statusreg&(1<<loggingstat)))
    5eb0:	82 fd       	sbrc	r24, 2
    5eb2:	0c c0       	rjmp	.+24     	; 0x5ecc <_Z19maininterupthandlerP7monitor+0xd8>
			{
				f_mount(0,"",0);
    5eb4:	40 e0       	ldi	r20, 0x00	; 0
    5eb6:	64 ef       	ldi	r22, 0xF4	; 244
    5eb8:	72 e0       	ldi	r23, 0x02	; 2
    5eba:	80 e0       	ldi	r24, 0x00	; 0
    5ebc:	90 e0       	ldi	r25, 0x00	; 0
    5ebe:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <f_mount>
				statusreg &= ~(1<<mounttingstat);
    5ec2:	80 91 e5 08 	lds	r24, 0x08E5
    5ec6:	8d 7f       	andi	r24, 0xFD	; 253
    5ec8:	80 93 e5 08 	sts	0x08E5, r24
			}
			mon->posx--;
    5ecc:	f8 01       	movw	r30, r16
    5ece:	86 a1       	ldd	r24, Z+38	; 0x26
    5ed0:	81 50       	subi	r24, 0x01	; 1
    5ed2:	86 a3       	std	Z+38, r24	; 0x26
    5ed4:	5c c0       	rjmp	.+184    	; 0x5f8e <_Z19maininterupthandlerP7monitor+0x19a>
		}
		else if (mon->posy==4 && mon->posx==1)
    5ed6:	84 30       	cpi	r24, 0x04	; 4
    5ed8:	09 f0       	breq	.+2      	; 0x5edc <_Z19maininterupthandlerP7monitor+0xe8>
    5eda:	59 c0       	rjmp	.+178    	; 0x5f8e <_Z19maininterupthandlerP7monitor+0x19a>
    5edc:	d8 01       	movw	r26, r16
    5ede:	96 96       	adiw	r26, 0x26	; 38
    5ee0:	8c 91       	ld	r24, X
    5ee2:	81 30       	cpi	r24, 0x01	; 1
    5ee4:	09 f0       	breq	.+2      	; 0x5ee8 <_Z19maininterupthandlerP7monitor+0xf4>
    5ee6:	53 c0       	rjmp	.+166    	; 0x5f8e <_Z19maininterupthandlerP7monitor+0x19a>
		{
			if (!(statusreg&(1<<loggingstat)) && (statusreg&(1<<mounttingstat)) )
    5ee8:	80 91 e5 08 	lds	r24, 0x08E5
    5eec:	82 fd       	sbrc	r24, 2
    5eee:	3b c0       	rjmp	.+118    	; 0x5f66 <_Z19maininterupthandlerP7monitor+0x172>
    5ef0:	81 ff       	sbrs	r24, 1
    5ef2:	39 c0       	rjmp	.+114    	; 0x5f66 <_Z19maininterupthandlerP7monitor+0x172>
			{
				if (disk_status(0) == 0)
    5ef4:	80 e0       	ldi	r24, 0x00	; 0
    5ef6:	0e 94 63 08 	call	0x10c6	; 0x10c6 <disk_status>
    5efa:	81 11       	cpse	r24, r1
    5efc:	2e c0       	rjmp	.+92     	; 0x5f5a <_Z19maininterupthandlerP7monitor+0x166>
				{
					char name[12];
					sprintf(name,"%02u%02u%02u%02u.txt",rtc.Monat,rtc.Tag,rtc.Stunden,rtc.Minuten);
    5efe:	e2 e1       	ldi	r30, 0x12	; 18
    5f00:	fe e0       	ldi	r31, 0x0E	; 14
    5f02:	81 89       	ldd	r24, Z+17	; 0x11
    5f04:	1f 92       	push	r1
    5f06:	8f 93       	push	r24
    5f08:	80 89       	ldd	r24, Z+16	; 0x10
    5f0a:	1f 92       	push	r1
    5f0c:	8f 93       	push	r24
    5f0e:	84 89       	ldd	r24, Z+20	; 0x14
    5f10:	1f 92       	push	r1
    5f12:	8f 93       	push	r24
    5f14:	86 89       	ldd	r24, Z+22	; 0x16
    5f16:	1f 92       	push	r1
    5f18:	8f 93       	push	r24
    5f1a:	80 e6       	ldi	r24, 0x60	; 96
    5f1c:	92 e0       	ldi	r25, 0x02	; 2
    5f1e:	9f 93       	push	r25
    5f20:	8f 93       	push	r24
    5f22:	fe 01       	movw	r30, r28
    5f24:	31 96       	adiw	r30, 0x01	; 1
    5f26:	7f 01       	movw	r14, r30
    5f28:	ff 93       	push	r31
    5f2a:	ef 93       	push	r30
    5f2c:	0e 94 67 48 	call	0x90ce	; 0x90ce <sprintf>
					f_open(&logger, name, FA_OPEN_ALWAYS | FA_WRITE);
    5f30:	42 e1       	ldi	r20, 0x12	; 18
    5f32:	b7 01       	movw	r22, r14
    5f34:	89 e2       	ldi	r24, 0x29	; 41
    5f36:	94 e0       	ldi	r25, 0x04	; 4
    5f38:	0e 94 44 1a 	call	0x3488	; 0x3488 <f_open>
					f_printf(&logger,"#Zeit [s]\tlongitude [1e6]\tLatitude [1e5]\tGPSSpeed [1e2 km/h] \tTacho [1e2 km/h] \tTemperatur [10 C] \tDruck [Pa] \tHoeheSee [10 m]\n");
    5f3c:	85 e7       	ldi	r24, 0x75	; 117
    5f3e:	92 e0       	ldi	r25, 0x02	; 2
    5f40:	9f 93       	push	r25
    5f42:	8f 93       	push	r24
    5f44:	89 e2       	ldi	r24, 0x29	; 41
    5f46:	94 e0       	ldi	r25, 0x04	; 4
    5f48:	9f 93       	push	r25
    5f4a:	8f 93       	push	r24
    5f4c:	0e 94 a9 20 	call	0x4152	; 0x4152 <f_printf>
    5f50:	0f b6       	in	r0, 0x3f	; 63
    5f52:	f8 94       	cli
    5f54:	de bf       	out	0x3e, r29	; 62
    5f56:	0f be       	out	0x3f, r0	; 63
    5f58:	cd bf       	out	0x3d, r28	; 61
				}
				
				statusreg |= (1<<loggingstat);
    5f5a:	80 91 e5 08 	lds	r24, 0x08E5
    5f5e:	84 60       	ori	r24, 0x04	; 4
    5f60:	80 93 e5 08 	sts	0x08E5, r24
    5f64:	0d c0       	rjmp	.+26     	; 0x5f80 <_Z19maininterupthandlerP7monitor+0x18c>
			}
			else{
				f_sync(&logger);
    5f66:	89 e2       	ldi	r24, 0x29	; 41
    5f68:	94 e0       	ldi	r25, 0x04	; 4
    5f6a:	0e 94 cc 1f 	call	0x3f98	; 0x3f98 <f_sync>
				f_close(&logger);
    5f6e:	89 e2       	ldi	r24, 0x29	; 41
    5f70:	94 e0       	ldi	r25, 0x04	; 4
    5f72:	0e 94 99 20 	call	0x4132	; 0x4132 <f_close>
				statusreg &= ~(1<<loggingstat);
    5f76:	80 91 e5 08 	lds	r24, 0x08E5
    5f7a:	8b 7f       	andi	r24, 0xFB	; 251
    5f7c:	80 93 e5 08 	sts	0x08E5, r24
			}
			mon->posx--;
    5f80:	d8 01       	movw	r26, r16
    5f82:	96 96       	adiw	r26, 0x26	; 38
    5f84:	8c 91       	ld	r24, X
    5f86:	96 97       	sbiw	r26, 0x26	; 38
    5f88:	81 50       	subi	r24, 0x01	; 1
    5f8a:	96 96       	adiw	r26, 0x26	; 38
    5f8c:	8c 93       	st	X, r24
	if (statusreg&(1<<updaterate))				//24 FPS fuer schnelle anzeigen
	{
		//anzeige &= (1<<refreshdisplay);
	}
	
	if ((rtc.interupts&(1<<sekundeninterupt)))	//Sekunden
    5f8e:	80 91 2a 0e 	lds	r24, 0x0E2A
    5f92:	81 ff       	sbrs	r24, 1
    5f94:	28 c1       	rjmp	.+592    	; 0x61e6 <_Z19maininterupthandlerP7monitor+0x3f2>
	{
		rtc.zeit();
    5f96:	82 e1       	ldi	r24, 0x12	; 18
    5f98:	9e e0       	ldi	r25, 0x0E	; 14
    5f9a:	0e 94 ed 3d 	call	0x7bda	; 0x7bda <_ZN3RTC4zeitEv>
		druck.bmp180_getaltitude();
    5f9e:	81 ef       	ldi	r24, 0xF1	; 241
    5fa0:	98 e0       	ldi	r25, 0x08	; 8
    5fa2:	0e 94 ae 06 	call	0xd5c	; 0xd5c <_ZN6BMP18018bmp180_getaltitudeEv>
		if (position==1)
    5fa6:	80 91 e4 08 	lds	r24, 0x08E4
    5faa:	81 30       	cpi	r24, 0x01	; 1
    5fac:	09 f0       	breq	.+2      	; 0x5fb0 <_Z19maininterupthandlerP7monitor+0x1bc>
    5fae:	57 c0       	rjmp	.+174    	; 0x605e <_Z19maininterupthandlerP7monitor+0x26a>
		{
			if (geschw>maxgeschw)
    5fb0:	c0 90 83 08 	lds	r12, 0x0883
    5fb4:	d0 90 84 08 	lds	r13, 0x0884
    5fb8:	e0 90 85 08 	lds	r14, 0x0885
    5fbc:	f0 90 86 08 	lds	r15, 0x0886
    5fc0:	20 91 7b 08 	lds	r18, 0x087B
    5fc4:	30 91 7c 08 	lds	r19, 0x087C
    5fc8:	40 91 7d 08 	lds	r20, 0x087D
    5fcc:	50 91 7e 08 	lds	r21, 0x087E
    5fd0:	c7 01       	movw	r24, r14
    5fd2:	b6 01       	movw	r22, r12
    5fd4:	0e 94 59 40 	call	0x80b2	; 0x80b2 <__gesf2>
    5fd8:	18 16       	cp	r1, r24
    5fda:	44 f4       	brge	.+16     	; 0x5fec <_Z19maininterupthandlerP7monitor+0x1f8>
			{
				maxgeschw=geschw;
    5fdc:	c0 92 7b 08 	sts	0x087B, r12
    5fe0:	d0 92 7c 08 	sts	0x087C, r13
    5fe4:	e0 92 7d 08 	sts	0x087D, r14
    5fe8:	f0 92 7e 08 	sts	0x087E, r15
			}
			if (geschw >= 1.0)
    5fec:	20 e0       	ldi	r18, 0x00	; 0
    5fee:	30 e0       	ldi	r19, 0x00	; 0
    5ff0:	40 e8       	ldi	r20, 0x80	; 128
    5ff2:	5f e3       	ldi	r21, 0x3F	; 63
    5ff4:	c7 01       	movw	r24, r14
    5ff6:	b6 01       	movw	r22, r12
    5ff8:	0e 94 59 40 	call	0x80b2	; 0x80b2 <__gesf2>
    5ffc:	88 23       	and	r24, r24
    5ffe:	9c f0       	brlt	.+38     	; 0x6026 <_Z19maininterupthandlerP7monitor+0x232>
			{
				Fahrtzeit++;
    6000:	80 91 77 08 	lds	r24, 0x0877
    6004:	90 91 78 08 	lds	r25, 0x0878
    6008:	a0 91 79 08 	lds	r26, 0x0879
    600c:	b0 91 7a 08 	lds	r27, 0x087A
    6010:	01 96       	adiw	r24, 0x01	; 1
    6012:	a1 1d       	adc	r26, r1
    6014:	b1 1d       	adc	r27, r1
    6016:	80 93 77 08 	sts	0x0877, r24
    601a:	90 93 78 08 	sts	0x0878, r25
    601e:	a0 93 79 08 	sts	0x0879, r26
    6022:	b0 93 7a 08 	sts	0x087A, r27
			}
			strecke+=geschw/3.6;
    6026:	26 e6       	ldi	r18, 0x66	; 102
    6028:	36 e6       	ldi	r19, 0x66	; 102
    602a:	46 e6       	ldi	r20, 0x66	; 102
    602c:	50 e4       	ldi	r21, 0x40	; 64
    602e:	c7 01       	movw	r24, r14
    6030:	b6 01       	movw	r22, r12
    6032:	0e 94 b0 3e 	call	0x7d60	; 0x7d60 <__divsf3>
    6036:	9b 01       	movw	r18, r22
    6038:	ac 01       	movw	r20, r24
    603a:	60 91 7f 08 	lds	r22, 0x087F
    603e:	70 91 80 08 	lds	r23, 0x0880
    6042:	80 91 81 08 	lds	r24, 0x0881
    6046:	90 91 82 08 	lds	r25, 0x0882
    604a:	0e 94 49 3e 	call	0x7c92	; 0x7c92 <__addsf3>
    604e:	60 93 7f 08 	sts	0x087F, r22
    6052:	70 93 80 08 	sts	0x0880, r23
    6056:	80 93 81 08 	sts	0x0881, r24
    605a:	90 93 82 08 	sts	0x0882, r25
    605e:	80 91 e5 08 	lds	r24, 0x08E5
    6062:	86 70       	andi	r24, 0x06	; 6
		}
		
		if ((statusreg&(1<<mounttingstat)) && (statusreg&(1<<loggingstat)))
    6064:	86 30       	cpi	r24, 0x06	; 6
    6066:	09 f0       	breq	.+2      	; 0x606a <_Z19maininterupthandlerP7monitor+0x276>
    6068:	b4 c0       	rjmp	.+360    	; 0x61d2 <_Z19maininterupthandlerP7monitor+0x3de>
		{
			uint16_t Sekundenges = rtc.Stunden*3600;
    606a:	0f 2e       	mov	r0, r31
    606c:	f2 e1       	ldi	r31, 0x12	; 18
    606e:	cf 2e       	mov	r12, r31
    6070:	fe e0       	ldi	r31, 0x0E	; 14
    6072:	df 2e       	mov	r13, r31
    6074:	f0 2d       	mov	r31, r0
    6076:	f6 01       	movw	r30, r12
    6078:	40 89       	ldd	r20, Z+16	; 0x10
    607a:	20 e1       	ldi	r18, 0x10	; 16
    607c:	3e e0       	ldi	r19, 0x0E	; 14
    607e:	42 9f       	mul	r20, r18
    6080:	c0 01       	movw	r24, r0
    6082:	43 9f       	mul	r20, r19
    6084:	90 0d       	add	r25, r0
    6086:	11 24       	eor	r1, r1
			Sekundenges += rtc.Minuten*60;
    6088:	21 89       	ldd	r18, Z+17	; 0x11
    608a:	7c 01       	movw	r14, r24
    608c:	fc e3       	ldi	r31, 0x3C	; 60
    608e:	2f 9f       	mul	r18, r31
    6090:	e0 0c       	add	r14, r0
    6092:	f1 1c       	adc	r15, r1
    6094:	11 24       	eor	r1, r1
			Sekundenges += rtc.Sekunden;
			f_printf(&logger,"%u\t%ld\t%ld\t%ld\t%ld\t%d\t%u\t%d\n",(uint16_t)Sekundenges,(int32_t)(lon*1000000),(int32_t)(lat*100000),(int32_t)(gpsspeed*100),(int32_t)(geschw*100),(int16_t)(druck.temperature*10),(uint16_t)(druck.pressure*100),(int16_t)(druck.altitude*10));
    6096:	0f 2e       	mov	r0, r31
    6098:	f1 ef       	ldi	r31, 0xF1	; 241
    609a:	af 2e       	mov	r10, r31
    609c:	f8 e0       	ldi	r31, 0x08	; 8
    609e:	bf 2e       	mov	r11, r31
    60a0:	f0 2d       	mov	r31, r0
    60a2:	20 e0       	ldi	r18, 0x00	; 0
    60a4:	30 e0       	ldi	r19, 0x00	; 0
    60a6:	40 e2       	ldi	r20, 0x20	; 32
    60a8:	51 e4       	ldi	r21, 0x41	; 65
    60aa:	d5 01       	movw	r26, r10
    60ac:	18 96       	adiw	r26, 0x08	; 8
    60ae:	6d 91       	ld	r22, X+
    60b0:	7d 91       	ld	r23, X+
    60b2:	8d 91       	ld	r24, X+
    60b4:	9c 91       	ld	r25, X
    60b6:	1b 97       	sbiw	r26, 0x0b	; 11
    60b8:	0e 94 64 40 	call	0x80c8	; 0x80c8 <__mulsf3>
    60bc:	0e 94 18 3f 	call	0x7e30	; 0x7e30 <__fixsfsi>
    60c0:	7f 93       	push	r23
    60c2:	6f 93       	push	r22
    60c4:	20 e0       	ldi	r18, 0x00	; 0
    60c6:	30 e0       	ldi	r19, 0x00	; 0
    60c8:	48 ec       	ldi	r20, 0xC8	; 200
    60ca:	52 e4       	ldi	r21, 0x42	; 66
    60cc:	f5 01       	movw	r30, r10
    60ce:	60 81       	ld	r22, Z
    60d0:	71 81       	ldd	r23, Z+1	; 0x01
    60d2:	82 81       	ldd	r24, Z+2	; 0x02
    60d4:	93 81       	ldd	r25, Z+3	; 0x03
    60d6:	0e 94 64 40 	call	0x80c8	; 0x80c8 <__mulsf3>
    60da:	0e 94 1d 3f 	call	0x7e3a	; 0x7e3a <__fixunssfsi>
    60de:	7f 93       	push	r23
    60e0:	6f 93       	push	r22
    60e2:	20 e0       	ldi	r18, 0x00	; 0
    60e4:	30 e0       	ldi	r19, 0x00	; 0
    60e6:	40 e2       	ldi	r20, 0x20	; 32
    60e8:	51 e4       	ldi	r21, 0x41	; 65
    60ea:	d5 01       	movw	r26, r10
    60ec:	14 96       	adiw	r26, 0x04	; 4
    60ee:	6d 91       	ld	r22, X+
    60f0:	7d 91       	ld	r23, X+
    60f2:	8d 91       	ld	r24, X+
    60f4:	9c 91       	ld	r25, X
    60f6:	17 97       	sbiw	r26, 0x07	; 7
    60f8:	0e 94 64 40 	call	0x80c8	; 0x80c8 <__mulsf3>
    60fc:	0e 94 18 3f 	call	0x7e30	; 0x7e30 <__fixsfsi>
    6100:	7f 93       	push	r23
    6102:	6f 93       	push	r22
    6104:	20 e0       	ldi	r18, 0x00	; 0
    6106:	30 e0       	ldi	r19, 0x00	; 0
    6108:	48 ec       	ldi	r20, 0xC8	; 200
    610a:	52 e4       	ldi	r21, 0x42	; 66
    610c:	60 91 83 08 	lds	r22, 0x0883
    6110:	70 91 84 08 	lds	r23, 0x0884
    6114:	80 91 85 08 	lds	r24, 0x0885
    6118:	90 91 86 08 	lds	r25, 0x0886
    611c:	0e 94 64 40 	call	0x80c8	; 0x80c8 <__mulsf3>
    6120:	0e 94 18 3f 	call	0x7e30	; 0x7e30 <__fixsfsi>
    6124:	9f 93       	push	r25
    6126:	8f 93       	push	r24
    6128:	7f 93       	push	r23
    612a:	6f 93       	push	r22
    612c:	20 e0       	ldi	r18, 0x00	; 0
    612e:	30 e0       	ldi	r19, 0x00	; 0
    6130:	48 ec       	ldi	r20, 0xC8	; 200
    6132:	52 e4       	ldi	r21, 0x42	; 66
    6134:	60 91 8d 08 	lds	r22, 0x088D
    6138:	70 91 8e 08 	lds	r23, 0x088E
    613c:	80 91 8f 08 	lds	r24, 0x088F
    6140:	90 91 90 08 	lds	r25, 0x0890
    6144:	0e 94 64 40 	call	0x80c8	; 0x80c8 <__mulsf3>
    6148:	0e 94 18 3f 	call	0x7e30	; 0x7e30 <__fixsfsi>
    614c:	9f 93       	push	r25
    614e:	8f 93       	push	r24
    6150:	7f 93       	push	r23
    6152:	6f 93       	push	r22
    6154:	20 e0       	ldi	r18, 0x00	; 0
    6156:	30 e5       	ldi	r19, 0x50	; 80
    6158:	43 ec       	ldi	r20, 0xC3	; 195
    615a:	57 e4       	ldi	r21, 0x47	; 71
    615c:	60 91 95 08 	lds	r22, 0x0895
    6160:	70 91 96 08 	lds	r23, 0x0896
    6164:	80 91 97 08 	lds	r24, 0x0897
    6168:	90 91 98 08 	lds	r25, 0x0898
    616c:	0e 94 64 40 	call	0x80c8	; 0x80c8 <__mulsf3>
    6170:	0e 94 18 3f 	call	0x7e30	; 0x7e30 <__fixsfsi>
    6174:	9f 93       	push	r25
    6176:	8f 93       	push	r24
    6178:	7f 93       	push	r23
    617a:	6f 93       	push	r22
    617c:	20 e0       	ldi	r18, 0x00	; 0
    617e:	34 e2       	ldi	r19, 0x24	; 36
    6180:	44 e7       	ldi	r20, 0x74	; 116
    6182:	59 e4       	ldi	r21, 0x49	; 73
    6184:	60 91 91 08 	lds	r22, 0x0891
    6188:	70 91 92 08 	lds	r23, 0x0892
    618c:	80 91 93 08 	lds	r24, 0x0893
    6190:	90 91 94 08 	lds	r25, 0x0894
    6194:	0e 94 64 40 	call	0x80c8	; 0x80c8 <__mulsf3>
    6198:	0e 94 18 3f 	call	0x7e30	; 0x7e30 <__fixsfsi>
    619c:	9f 93       	push	r25
    619e:	8f 93       	push	r24
    61a0:	7f 93       	push	r23
    61a2:	6f 93       	push	r22
		
		if ((statusreg&(1<<mounttingstat)) && (statusreg&(1<<loggingstat)))
		{
			uint16_t Sekundenges = rtc.Stunden*3600;
			Sekundenges += rtc.Minuten*60;
			Sekundenges += rtc.Sekunden;
    61a4:	f6 01       	movw	r30, r12
    61a6:	82 89       	ldd	r24, Z+18	; 0x12
    61a8:	97 01       	movw	r18, r14
    61aa:	28 0f       	add	r18, r24
    61ac:	31 1d       	adc	r19, r1
    61ae:	c9 01       	movw	r24, r18
			f_printf(&logger,"%u\t%ld\t%ld\t%ld\t%ld\t%d\t%u\t%d\n",(uint16_t)Sekundenges,(int32_t)(lon*1000000),(int32_t)(lat*100000),(int32_t)(gpsspeed*100),(int32_t)(geschw*100),(int16_t)(druck.temperature*10),(uint16_t)(druck.pressure*100),(int16_t)(druck.altitude*10));
    61b0:	9f 93       	push	r25
    61b2:	2f 93       	push	r18
    61b4:	85 ef       	ldi	r24, 0xF5	; 245
    61b6:	92 e0       	ldi	r25, 0x02	; 2
    61b8:	9f 93       	push	r25
    61ba:	8f 93       	push	r24
    61bc:	89 e2       	ldi	r24, 0x29	; 41
    61be:	94 e0       	ldi	r25, 0x04	; 4
    61c0:	9f 93       	push	r25
    61c2:	8f 93       	push	r24
    61c4:	0e 94 a9 20 	call	0x4152	; 0x4152 <f_printf>
    61c8:	0f b6       	in	r0, 0x3f	; 63
    61ca:	f8 94       	cli
    61cc:	de bf       	out	0x3e, r29	; 62
    61ce:	0f be       	out	0x3f, r0	; 63
    61d0:	cd bf       	out	0x3d, r28	; 61
		}
		
		anzeige |= (1<<refreshdisplay);
    61d2:	80 91 e6 08 	lds	r24, 0x08E6
    61d6:	81 60       	ori	r24, 0x01	; 1
    61d8:	80 93 e6 08 	sts	0x08E6, r24
		rtc.interupts &= ~(1<<sekundeninterupt);
    61dc:	e2 e1       	ldi	r30, 0x12	; 18
    61de:	fe e0       	ldi	r31, 0x0E	; 14
    61e0:	80 8d       	ldd	r24, Z+24	; 0x18
    61e2:	8d 7f       	andi	r24, 0xFD	; 253
    61e4:	80 8f       	std	Z+24, r24	; 0x18
	}
	if ((rtc.interupts&(1<<minuteninterupt)))		//Minuten
    61e6:	80 91 2a 0e 	lds	r24, 0x0E2A
    61ea:	82 ff       	sbrs	r24, 2
    61ec:	13 c0       	rjmp	.+38     	; 0x6214 <_Z19maininterupthandlerP7monitor+0x420>
    61ee:	80 91 e5 08 	lds	r24, 0x08E5
    61f2:	86 70       	andi	r24, 0x06	; 6
	{
		if ((statusreg&(1<<mounttingstat)) && (statusreg&(1<<loggingstat)))
    61f4:	86 30       	cpi	r24, 0x06	; 6
    61f6:	21 f4       	brne	.+8      	; 0x6200 <_Z19maininterupthandlerP7monitor+0x40c>
		{
			f_sync(&logger);
    61f8:	89 e2       	ldi	r24, 0x29	; 41
    61fa:	94 e0       	ldi	r25, 0x04	; 4
    61fc:	0e 94 cc 1f 	call	0x3f98	; 0x3f98 <f_sync>
		}
		anzeige |= (1<<refreshdisplay);
    6200:	80 91 e6 08 	lds	r24, 0x08E6
    6204:	81 60       	ori	r24, 0x01	; 1
    6206:	80 93 e6 08 	sts	0x08E6, r24
		rtc.interupts &= ~(1<<minuteninterupt);
    620a:	e2 e1       	ldi	r30, 0x12	; 18
    620c:	fe e0       	ldi	r31, 0x0E	; 14
    620e:	80 8d       	ldd	r24, Z+24	; 0x18
    6210:	8b 7f       	andi	r24, 0xFB	; 251
    6212:	80 8f       	std	Z+24, r24	; 0x18
	}
	
	if ((anzeige&(1<<refreshdisplay)))			//Anzeige aktualieseren
    6214:	80 91 e6 08 	lds	r24, 0x08E6
    6218:	80 ff       	sbrs	r24, 0
    621a:	0d c0       	rjmp	.+26     	; 0x6236 <_Z19maininterupthandlerP7monitor+0x442>
	{
		//Hier aktuelle seite neu ausgeben
		mon->draw();
    621c:	d8 01       	movw	r26, r16
    621e:	ed 91       	ld	r30, X+
    6220:	fc 91       	ld	r31, X
    6222:	02 80       	ldd	r0, Z+2	; 0x02
    6224:	f3 81       	ldd	r31, Z+3	; 0x03
    6226:	e0 2d       	mov	r30, r0
    6228:	c8 01       	movw	r24, r16
    622a:	09 95       	icall
		anzeige &= ~(1<<refreshdisplay);
    622c:	80 91 e6 08 	lds	r24, 0x08E6
    6230:	8e 7f       	andi	r24, 0xFE	; 254
    6232:	80 93 e6 08 	sts	0x08E6, r24
		{
			anzeige |= (1<<blinkflag) | (1<<refreshdisplay);
			rtc.interupts &= ~(1<<Weckerein);
		}
	}*/
}
    6236:	2c 96       	adiw	r28, 0x0c	; 12
    6238:	0f b6       	in	r0, 0x3f	; 63
    623a:	f8 94       	cli
    623c:	de bf       	out	0x3e, r29	; 62
    623e:	0f be       	out	0x3f, r0	; 63
    6240:	cd bf       	out	0x3d, r28	; 61
    6242:	df 91       	pop	r29
    6244:	cf 91       	pop	r28
    6246:	1f 91       	pop	r17
    6248:	0f 91       	pop	r16
    624a:	ff 90       	pop	r15
    624c:	ef 90       	pop	r14
    624e:	df 90       	pop	r13
    6250:	cf 90       	pop	r12
    6252:	bf 90       	pop	r11
    6254:	af 90       	pop	r10
    6256:	08 95       	ret

00006258 <_Z10gpshandlerv>:

void gpshandler(){
    6258:	4f 92       	push	r4
    625a:	5f 92       	push	r5
    625c:	6f 92       	push	r6
    625e:	7f 92       	push	r7
    6260:	8f 92       	push	r8
    6262:	9f 92       	push	r9
    6264:	af 92       	push	r10
    6266:	bf 92       	push	r11
    6268:	ef 92       	push	r14
    626a:	ff 92       	push	r15
    626c:	0f 93       	push	r16
    626e:	1f 93       	push	r17
    6270:	cf 93       	push	r28
    6272:	df 93       	push	r29
    6274:	00 d0       	rcall	.+0      	; 0x6276 <_Z10gpshandlerv+0x1e>
    6276:	00 d0       	rcall	.+0      	; 0x6278 <_Z10gpshandlerv+0x20>
    6278:	cd b7       	in	r28, 0x3d	; 61
    627a:	de b7       	in	r29, 0x3e	; 62
	if ((gpsstatus&(1<<complete)) && (gpsstatus&(1<<fix)))
    627c:	e0 90 e2 08 	lds	r14, 0x08E2
    6280:	e2 fe       	sbrs	r14, 2
    6282:	e3 c2       	rjmp	.+1478   	; 0x684a <_Z10gpshandlerv+0x5f2>
    6284:	ee 20       	and	r14, r14
    6286:	0c f0       	brlt	.+2      	; 0x628a <_Z10gpshandlerv+0x32>
    6288:	84 c3       	rjmp	.+1800   	; 0x6992 <_Z10gpshandlerv+0x73a>
	{
		//brechnung von Latitutde, Longitude, Zeit und Datum
		//Zeit
		gpsstunde =		(gpsdata[7] - '0')*10;
		gpsstunde +=	(gpsdata[8] - '0');
    628a:	0a e9       	ldi	r16, 0x9A	; 154
    628c:	18 e0       	ldi	r17, 0x08	; 8
    628e:	f8 01       	movw	r30, r16
    6290:	80 85       	ldd	r24, Z+8	; 0x08
    6292:	21 ed       	ldi	r18, 0xD1	; 209
    6294:	28 0f       	add	r18, r24
void gpshandler(){
	if ((gpsstatus&(1<<complete)) && (gpsstatus&(1<<fix)))
	{
		//brechnung von Latitutde, Longitude, Zeit und Datum
		//Zeit
		gpsstunde =		(gpsdata[7] - '0')*10;
    6296:	87 81       	ldd	r24, Z+7	; 0x07
    6298:	88 0f       	add	r24, r24
    629a:	80 56       	subi	r24, 0x60	; 96
    629c:	98 2f       	mov	r25, r24
    629e:	99 0f       	add	r25, r25
    62a0:	99 0f       	add	r25, r25
    62a2:	89 0f       	add	r24, r25
		gpsstunde +=	(gpsdata[8] - '0');
		gpsstunde += GMT;
    62a4:	82 0f       	add	r24, r18
    62a6:	80 93 8c 08 	sts	0x088C, r24
    62aa:	82 85       	ldd	r24, Z+10	; 0x0a
    62ac:	20 ed       	ldi	r18, 0xD0	; 208
    62ae:	28 0f       	add	r18, r24
		gpsminute =		(gpsdata[9] - '0')*10;
    62b0:	81 85       	ldd	r24, Z+9	; 0x09
    62b2:	88 0f       	add	r24, r24
    62b4:	80 56       	subi	r24, 0x60	; 96
    62b6:	98 2f       	mov	r25, r24
    62b8:	99 0f       	add	r25, r25
    62ba:	99 0f       	add	r25, r25
    62bc:	89 0f       	add	r24, r25
		gpsminute +=	(gpsdata[10] - '0');
    62be:	82 0f       	add	r24, r18
    62c0:	80 93 8b 08 	sts	0x088B, r24
    62c4:	84 85       	ldd	r24, Z+12	; 0x0c
    62c6:	20 ed       	ldi	r18, 0xD0	; 208
    62c8:	28 0f       	add	r18, r24
		gpssekunde =	(gpsdata[11] - '0')*10;
    62ca:	83 85       	ldd	r24, Z+11	; 0x0b
    62cc:	88 0f       	add	r24, r24
    62ce:	80 56       	subi	r24, 0x60	; 96
    62d0:	98 2f       	mov	r25, r24
    62d2:	99 0f       	add	r25, r25
    62d4:	99 0f       	add	r25, r25
    62d6:	89 0f       	add	r24, r25
		gpssekunde +=	(gpsdata[12] - '0');
    62d8:	82 0f       	add	r24, r18
    62da:	80 93 8a 08 	sts	0x088A, r24
		
		//Latitude
		lat =	(gpsdata[20] - '0')*10;
		lat +=	(gpsdata[21] - '0');
		float latmin =	(gpsdata[22] - '0')*10;
    62de:	86 89       	ldd	r24, Z+22	; 0x16
    62e0:	90 e0       	ldi	r25, 0x00	; 0
    62e2:	c0 97       	sbiw	r24, 0x30	; 48
    62e4:	bc 01       	movw	r22, r24
    62e6:	66 0f       	add	r22, r22
    62e8:	77 1f       	adc	r23, r23
    62ea:	88 0f       	add	r24, r24
    62ec:	99 1f       	adc	r25, r25
    62ee:	88 0f       	add	r24, r24
    62f0:	99 1f       	adc	r25, r25
    62f2:	88 0f       	add	r24, r24
    62f4:	99 1f       	adc	r25, r25
    62f6:	68 0f       	add	r22, r24
    62f8:	79 1f       	adc	r23, r25
    62fa:	07 2e       	mov	r0, r23
    62fc:	00 0c       	add	r0, r0
    62fe:	88 0b       	sbc	r24, r24
    6300:	99 0b       	sbc	r25, r25
    6302:	0e 94 4b 3f 	call	0x7e96	; 0x7e96 <__floatsisf>
    6306:	4b 01       	movw	r8, r22
    6308:	5c 01       	movw	r10, r24
		latmin +=		(gpsdata[23] - '0');
    630a:	f8 01       	movw	r30, r16
    630c:	87 89       	ldd	r24, Z+23	; 0x17
    630e:	90 e0       	ldi	r25, 0x00	; 0
    6310:	c0 97       	sbiw	r24, 0x30	; 48
    6312:	bc 01       	movw	r22, r24
    6314:	99 0f       	add	r25, r25
    6316:	88 0b       	sbc	r24, r24
    6318:	99 0b       	sbc	r25, r25
    631a:	0e 94 4b 3f 	call	0x7e96	; 0x7e96 <__floatsisf>
    631e:	a5 01       	movw	r20, r10
    6320:	94 01       	movw	r18, r8
    6322:	0e 94 49 3e 	call	0x7c92	; 0x7c92 <__addsf3>
    6326:	4b 01       	movw	r8, r22
    6328:	5c 01       	movw	r10, r24
		latmin +=		(gpsdata[25] - '0')/10.0;
    632a:	f8 01       	movw	r30, r16
    632c:	81 8d       	ldd	r24, Z+25	; 0x19
    632e:	90 e0       	ldi	r25, 0x00	; 0
    6330:	c0 97       	sbiw	r24, 0x30	; 48
    6332:	bc 01       	movw	r22, r24
    6334:	99 0f       	add	r25, r25
    6336:	88 0b       	sbc	r24, r24
    6338:	99 0b       	sbc	r25, r25
    633a:	0e 94 4b 3f 	call	0x7e96	; 0x7e96 <__floatsisf>
    633e:	20 e0       	ldi	r18, 0x00	; 0
    6340:	30 e0       	ldi	r19, 0x00	; 0
    6342:	40 e2       	ldi	r20, 0x20	; 32
    6344:	51 e4       	ldi	r21, 0x41	; 65
    6346:	0e 94 b0 3e 	call	0x7d60	; 0x7d60 <__divsf3>
    634a:	a5 01       	movw	r20, r10
    634c:	94 01       	movw	r18, r8
    634e:	0e 94 49 3e 	call	0x7c92	; 0x7c92 <__addsf3>
    6352:	4b 01       	movw	r8, r22
    6354:	5c 01       	movw	r10, r24
		latmin +=		(gpsdata[26] - '0')/100.0;
    6356:	f8 01       	movw	r30, r16
    6358:	82 8d       	ldd	r24, Z+26	; 0x1a
    635a:	90 e0       	ldi	r25, 0x00	; 0
    635c:	c0 97       	sbiw	r24, 0x30	; 48
    635e:	bc 01       	movw	r22, r24
    6360:	99 0f       	add	r25, r25
    6362:	88 0b       	sbc	r24, r24
    6364:	99 0b       	sbc	r25, r25
    6366:	0e 94 4b 3f 	call	0x7e96	; 0x7e96 <__floatsisf>
    636a:	20 e0       	ldi	r18, 0x00	; 0
    636c:	30 e0       	ldi	r19, 0x00	; 0
    636e:	48 ec       	ldi	r20, 0xC8	; 200
    6370:	52 e4       	ldi	r21, 0x42	; 66
    6372:	0e 94 b0 3e 	call	0x7d60	; 0x7d60 <__divsf3>
    6376:	a5 01       	movw	r20, r10
    6378:	94 01       	movw	r18, r8
    637a:	0e 94 49 3e 	call	0x7c92	; 0x7c92 <__addsf3>
    637e:	4b 01       	movw	r8, r22
    6380:	5c 01       	movw	r10, r24
		latmin +=		(gpsdata[27] - '0')/1000.0;
    6382:	f8 01       	movw	r30, r16
    6384:	83 8d       	ldd	r24, Z+27	; 0x1b
    6386:	90 e0       	ldi	r25, 0x00	; 0
    6388:	c0 97       	sbiw	r24, 0x30	; 48
    638a:	bc 01       	movw	r22, r24
    638c:	99 0f       	add	r25, r25
    638e:	88 0b       	sbc	r24, r24
    6390:	99 0b       	sbc	r25, r25
    6392:	0e 94 4b 3f 	call	0x7e96	; 0x7e96 <__floatsisf>
    6396:	20 e0       	ldi	r18, 0x00	; 0
    6398:	30 e0       	ldi	r19, 0x00	; 0
    639a:	4a e7       	ldi	r20, 0x7A	; 122
    639c:	54 e4       	ldi	r21, 0x44	; 68
    639e:	0e 94 b0 3e 	call	0x7d60	; 0x7d60 <__divsf3>
    63a2:	a5 01       	movw	r20, r10
    63a4:	94 01       	movw	r18, r8
    63a6:	0e 94 49 3e 	call	0x7c92	; 0x7c92 <__addsf3>
    63aa:	4b 01       	movw	r8, r22
    63ac:	5c 01       	movw	r10, r24
		gpsminute +=	(gpsdata[10] - '0');
		gpssekunde =	(gpsdata[11] - '0')*10;
		gpssekunde +=	(gpsdata[12] - '0');
		
		//Latitude
		lat =	(gpsdata[20] - '0')*10;
    63ae:	f8 01       	movw	r30, r16
    63b0:	44 89       	ldd	r20, Z+20	; 0x14
    63b2:	50 e0       	ldi	r21, 0x00	; 0
    63b4:	40 53       	subi	r20, 0x30	; 48
    63b6:	51 09       	sbc	r21, r1
    63b8:	ca 01       	movw	r24, r20
    63ba:	88 0f       	add	r24, r24
    63bc:	99 1f       	adc	r25, r25
    63be:	44 0f       	add	r20, r20
    63c0:	55 1f       	adc	r21, r21
    63c2:	44 0f       	add	r20, r20
    63c4:	55 1f       	adc	r21, r21
    63c6:	44 0f       	add	r20, r20
    63c8:	55 1f       	adc	r21, r21
    63ca:	84 0f       	add	r24, r20
    63cc:	95 1f       	adc	r25, r21
    63ce:	bc 01       	movw	r22, r24
    63d0:	99 0f       	add	r25, r25
    63d2:	88 0b       	sbc	r24, r24
    63d4:	99 0b       	sbc	r25, r25
    63d6:	0e 94 4b 3f 	call	0x7e96	; 0x7e96 <__floatsisf>
    63da:	2b 01       	movw	r4, r22
    63dc:	3c 01       	movw	r6, r24
		lat +=	(gpsdata[21] - '0');
    63de:	f8 01       	movw	r30, r16
    63e0:	85 89       	ldd	r24, Z+21	; 0x15
    63e2:	90 e0       	ldi	r25, 0x00	; 0
    63e4:	c0 97       	sbiw	r24, 0x30	; 48
    63e6:	bc 01       	movw	r22, r24
    63e8:	99 0f       	add	r25, r25
    63ea:	88 0b       	sbc	r24, r24
    63ec:	99 0b       	sbc	r25, r25
    63ee:	0e 94 4b 3f 	call	0x7e96	; 0x7e96 <__floatsisf>
    63f2:	9b 01       	movw	r18, r22
    63f4:	ac 01       	movw	r20, r24
    63f6:	c3 01       	movw	r24, r6
    63f8:	b2 01       	movw	r22, r4
    63fa:	0e 94 49 3e 	call	0x7c92	; 0x7c92 <__addsf3>
    63fe:	2b 01       	movw	r4, r22
    6400:	3c 01       	movw	r6, r24
		float latmin =	(gpsdata[22] - '0')*10;
		latmin +=		(gpsdata[23] - '0');
		latmin +=		(gpsdata[25] - '0')/10.0;
		latmin +=		(gpsdata[26] - '0')/100.0;
		latmin +=		(gpsdata[27] - '0')/1000.0;
		latmin +=		(gpsdata[28] - '0')/10000.0;
    6402:	f8 01       	movw	r30, r16
    6404:	84 8d       	ldd	r24, Z+28	; 0x1c
    6406:	90 e0       	ldi	r25, 0x00	; 0
    6408:	c0 97       	sbiw	r24, 0x30	; 48
    640a:	bc 01       	movw	r22, r24
    640c:	99 0f       	add	r25, r25
    640e:	88 0b       	sbc	r24, r24
    6410:	99 0b       	sbc	r25, r25
    6412:	0e 94 4b 3f 	call	0x7e96	; 0x7e96 <__floatsisf>
    6416:	20 e0       	ldi	r18, 0x00	; 0
    6418:	30 e4       	ldi	r19, 0x40	; 64
    641a:	4c e1       	ldi	r20, 0x1C	; 28
    641c:	56 e4       	ldi	r21, 0x46	; 70
    641e:	0e 94 b0 3e 	call	0x7d60	; 0x7d60 <__divsf3>
    6422:	a5 01       	movw	r20, r10
    6424:	94 01       	movw	r18, r8
    6426:	0e 94 49 3e 	call	0x7c92	; 0x7c92 <__addsf3>
		lat +=	latmin/60.0;
    642a:	20 e0       	ldi	r18, 0x00	; 0
    642c:	30 e0       	ldi	r19, 0x00	; 0
    642e:	40 e7       	ldi	r20, 0x70	; 112
    6430:	52 e4       	ldi	r21, 0x42	; 66
    6432:	0e 94 b0 3e 	call	0x7d60	; 0x7d60 <__divsf3>
    6436:	9b 01       	movw	r18, r22
    6438:	ac 01       	movw	r20, r24
    643a:	c3 01       	movw	r24, r6
    643c:	b2 01       	movw	r22, r4
    643e:	0e 94 49 3e 	call	0x7c92	; 0x7c92 <__addsf3>
    6442:	60 93 95 08 	sts	0x0895, r22
    6446:	70 93 96 08 	sts	0x0896, r23
    644a:	80 93 97 08 	sts	0x0897, r24
    644e:	90 93 98 08 	sts	0x0898, r25
		if (gpsdata[30] != 'N')
    6452:	f8 01       	movw	r30, r16
    6454:	26 8d       	ldd	r18, Z+30	; 0x1e
    6456:	2e 34       	cpi	r18, 0x4E	; 78
    6458:	59 f0       	breq	.+22     	; 0x6470 <_Z10gpshandlerv+0x218>
		{
			lat *= -1;
    645a:	dc 01       	movw	r26, r24
    645c:	cb 01       	movw	r24, r22
    645e:	b0 58       	subi	r27, 0x80	; 128
    6460:	80 93 95 08 	sts	0x0895, r24
    6464:	90 93 96 08 	sts	0x0896, r25
    6468:	a0 93 97 08 	sts	0x0897, r26
    646c:	b0 93 98 08 	sts	0x0898, r27
		
		//Longitude
		lon =	(gpsdata[32] - '0')*100;
		lon +=	(gpsdata[33] - '0')*10;
		lon +=	(gpsdata[34] - '0');
		float lonmin =	(gpsdata[35] - '0')*10;
    6470:	0a e9       	ldi	r16, 0x9A	; 154
    6472:	18 e0       	ldi	r17, 0x08	; 8
    6474:	f8 01       	movw	r30, r16
    6476:	83 a1       	ldd	r24, Z+35	; 0x23
    6478:	90 e0       	ldi	r25, 0x00	; 0
    647a:	c0 97       	sbiw	r24, 0x30	; 48
    647c:	bc 01       	movw	r22, r24
    647e:	66 0f       	add	r22, r22
    6480:	77 1f       	adc	r23, r23
    6482:	88 0f       	add	r24, r24
    6484:	99 1f       	adc	r25, r25
    6486:	88 0f       	add	r24, r24
    6488:	99 1f       	adc	r25, r25
    648a:	88 0f       	add	r24, r24
    648c:	99 1f       	adc	r25, r25
    648e:	68 0f       	add	r22, r24
    6490:	79 1f       	adc	r23, r25
    6492:	07 2e       	mov	r0, r23
    6494:	00 0c       	add	r0, r0
    6496:	88 0b       	sbc	r24, r24
    6498:	99 0b       	sbc	r25, r25
    649a:	0e 94 4b 3f 	call	0x7e96	; 0x7e96 <__floatsisf>
    649e:	4b 01       	movw	r8, r22
    64a0:	5c 01       	movw	r10, r24
		lonmin +=		(gpsdata[36] - '0');
    64a2:	f8 01       	movw	r30, r16
    64a4:	84 a1       	ldd	r24, Z+36	; 0x24
    64a6:	90 e0       	ldi	r25, 0x00	; 0
    64a8:	c0 97       	sbiw	r24, 0x30	; 48
    64aa:	bc 01       	movw	r22, r24
    64ac:	99 0f       	add	r25, r25
    64ae:	88 0b       	sbc	r24, r24
    64b0:	99 0b       	sbc	r25, r25
    64b2:	0e 94 4b 3f 	call	0x7e96	; 0x7e96 <__floatsisf>
    64b6:	a5 01       	movw	r20, r10
    64b8:	94 01       	movw	r18, r8
    64ba:	0e 94 49 3e 	call	0x7c92	; 0x7c92 <__addsf3>
    64be:	4b 01       	movw	r8, r22
    64c0:	5c 01       	movw	r10, r24
		lonmin +=		(gpsdata[38] - '0')/10.0;
    64c2:	f8 01       	movw	r30, r16
    64c4:	86 a1       	ldd	r24, Z+38	; 0x26
    64c6:	90 e0       	ldi	r25, 0x00	; 0
    64c8:	c0 97       	sbiw	r24, 0x30	; 48
    64ca:	bc 01       	movw	r22, r24
    64cc:	99 0f       	add	r25, r25
    64ce:	88 0b       	sbc	r24, r24
    64d0:	99 0b       	sbc	r25, r25
    64d2:	0e 94 4b 3f 	call	0x7e96	; 0x7e96 <__floatsisf>
    64d6:	20 e0       	ldi	r18, 0x00	; 0
    64d8:	30 e0       	ldi	r19, 0x00	; 0
    64da:	40 e2       	ldi	r20, 0x20	; 32
    64dc:	51 e4       	ldi	r21, 0x41	; 65
    64de:	0e 94 b0 3e 	call	0x7d60	; 0x7d60 <__divsf3>
    64e2:	a5 01       	movw	r20, r10
    64e4:	94 01       	movw	r18, r8
    64e6:	0e 94 49 3e 	call	0x7c92	; 0x7c92 <__addsf3>
    64ea:	4b 01       	movw	r8, r22
    64ec:	5c 01       	movw	r10, r24
		lonmin +=		(gpsdata[39] - '0')/100.0;
    64ee:	f8 01       	movw	r30, r16
    64f0:	87 a1       	ldd	r24, Z+39	; 0x27
    64f2:	90 e0       	ldi	r25, 0x00	; 0
    64f4:	c0 97       	sbiw	r24, 0x30	; 48
    64f6:	bc 01       	movw	r22, r24
    64f8:	99 0f       	add	r25, r25
    64fa:	88 0b       	sbc	r24, r24
    64fc:	99 0b       	sbc	r25, r25
    64fe:	0e 94 4b 3f 	call	0x7e96	; 0x7e96 <__floatsisf>
    6502:	20 e0       	ldi	r18, 0x00	; 0
    6504:	30 e0       	ldi	r19, 0x00	; 0
    6506:	48 ec       	ldi	r20, 0xC8	; 200
    6508:	52 e4       	ldi	r21, 0x42	; 66
    650a:	0e 94 b0 3e 	call	0x7d60	; 0x7d60 <__divsf3>
    650e:	a5 01       	movw	r20, r10
    6510:	94 01       	movw	r18, r8
    6512:	0e 94 49 3e 	call	0x7c92	; 0x7c92 <__addsf3>
    6516:	4b 01       	movw	r8, r22
    6518:	5c 01       	movw	r10, r24
		lonmin +=		(gpsdata[40] - '0')/1000.0;
    651a:	f8 01       	movw	r30, r16
    651c:	80 a5       	ldd	r24, Z+40	; 0x28
    651e:	90 e0       	ldi	r25, 0x00	; 0
    6520:	c0 97       	sbiw	r24, 0x30	; 48
    6522:	bc 01       	movw	r22, r24
    6524:	99 0f       	add	r25, r25
    6526:	88 0b       	sbc	r24, r24
    6528:	99 0b       	sbc	r25, r25
    652a:	0e 94 4b 3f 	call	0x7e96	; 0x7e96 <__floatsisf>
    652e:	20 e0       	ldi	r18, 0x00	; 0
    6530:	30 e0       	ldi	r19, 0x00	; 0
    6532:	4a e7       	ldi	r20, 0x7A	; 122
    6534:	54 e4       	ldi	r21, 0x44	; 68
    6536:	0e 94 b0 3e 	call	0x7d60	; 0x7d60 <__divsf3>
    653a:	a5 01       	movw	r20, r10
    653c:	94 01       	movw	r18, r8
    653e:	0e 94 49 3e 	call	0x7c92	; 0x7c92 <__addsf3>
    6542:	4b 01       	movw	r8, r22
    6544:	5c 01       	movw	r10, r24
		{
			lat *= -1;
		}
		
		//Longitude
		lon =	(gpsdata[32] - '0')*100;
    6546:	f8 01       	movw	r30, r16
    6548:	80 a1       	ldd	r24, Z+32	; 0x20
    654a:	90 e0       	ldi	r25, 0x00	; 0
    654c:	c0 97       	sbiw	r24, 0x30	; 48
    654e:	24 e6       	ldi	r18, 0x64	; 100
    6550:	28 9f       	mul	r18, r24
    6552:	b0 01       	movw	r22, r0
    6554:	29 9f       	mul	r18, r25
    6556:	70 0d       	add	r23, r0
    6558:	11 24       	eor	r1, r1
    655a:	07 2e       	mov	r0, r23
    655c:	00 0c       	add	r0, r0
    655e:	88 0b       	sbc	r24, r24
    6560:	99 0b       	sbc	r25, r25
    6562:	0e 94 4b 3f 	call	0x7e96	; 0x7e96 <__floatsisf>
    6566:	2b 01       	movw	r4, r22
    6568:	3c 01       	movw	r6, r24
		lon +=	(gpsdata[33] - '0')*10;
    656a:	f8 01       	movw	r30, r16
    656c:	21 a1       	ldd	r18, Z+33	; 0x21
    656e:	30 e0       	ldi	r19, 0x00	; 0
    6570:	20 53       	subi	r18, 0x30	; 48
    6572:	31 09       	sbc	r19, r1
    6574:	c9 01       	movw	r24, r18
    6576:	88 0f       	add	r24, r24
    6578:	99 1f       	adc	r25, r25
    657a:	22 0f       	add	r18, r18
    657c:	33 1f       	adc	r19, r19
    657e:	22 0f       	add	r18, r18
    6580:	33 1f       	adc	r19, r19
    6582:	22 0f       	add	r18, r18
    6584:	33 1f       	adc	r19, r19
    6586:	82 0f       	add	r24, r18
    6588:	93 1f       	adc	r25, r19
    658a:	bc 01       	movw	r22, r24
    658c:	99 0f       	add	r25, r25
    658e:	88 0b       	sbc	r24, r24
    6590:	99 0b       	sbc	r25, r25
    6592:	0e 94 4b 3f 	call	0x7e96	; 0x7e96 <__floatsisf>
    6596:	9b 01       	movw	r18, r22
    6598:	ac 01       	movw	r20, r24
    659a:	c3 01       	movw	r24, r6
    659c:	b2 01       	movw	r22, r4
    659e:	0e 94 49 3e 	call	0x7c92	; 0x7c92 <__addsf3>
    65a2:	2b 01       	movw	r4, r22
    65a4:	3c 01       	movw	r6, r24
		lon +=	(gpsdata[34] - '0');
    65a6:	f8 01       	movw	r30, r16
    65a8:	82 a1       	ldd	r24, Z+34	; 0x22
    65aa:	90 e0       	ldi	r25, 0x00	; 0
    65ac:	c0 97       	sbiw	r24, 0x30	; 48
    65ae:	bc 01       	movw	r22, r24
    65b0:	99 0f       	add	r25, r25
    65b2:	88 0b       	sbc	r24, r24
    65b4:	99 0b       	sbc	r25, r25
    65b6:	0e 94 4b 3f 	call	0x7e96	; 0x7e96 <__floatsisf>
    65ba:	9b 01       	movw	r18, r22
    65bc:	ac 01       	movw	r20, r24
    65be:	c3 01       	movw	r24, r6
    65c0:	b2 01       	movw	r22, r4
    65c2:	0e 94 49 3e 	call	0x7c92	; 0x7c92 <__addsf3>
    65c6:	2b 01       	movw	r4, r22
    65c8:	3c 01       	movw	r6, r24
		float lonmin =	(gpsdata[35] - '0')*10;
		lonmin +=		(gpsdata[36] - '0');
		lonmin +=		(gpsdata[38] - '0')/10.0;
		lonmin +=		(gpsdata[39] - '0')/100.0;
		lonmin +=		(gpsdata[40] - '0')/1000.0;
		lonmin +=		(gpsdata[41] - '0')/10000.0;
    65ca:	f8 01       	movw	r30, r16
    65cc:	81 a5       	ldd	r24, Z+41	; 0x29
    65ce:	90 e0       	ldi	r25, 0x00	; 0
    65d0:	c0 97       	sbiw	r24, 0x30	; 48
    65d2:	bc 01       	movw	r22, r24
    65d4:	99 0f       	add	r25, r25
    65d6:	88 0b       	sbc	r24, r24
    65d8:	99 0b       	sbc	r25, r25
    65da:	0e 94 4b 3f 	call	0x7e96	; 0x7e96 <__floatsisf>
    65de:	20 e0       	ldi	r18, 0x00	; 0
    65e0:	30 e4       	ldi	r19, 0x40	; 64
    65e2:	4c e1       	ldi	r20, 0x1C	; 28
    65e4:	56 e4       	ldi	r21, 0x46	; 70
    65e6:	0e 94 b0 3e 	call	0x7d60	; 0x7d60 <__divsf3>
    65ea:	a5 01       	movw	r20, r10
    65ec:	94 01       	movw	r18, r8
    65ee:	0e 94 49 3e 	call	0x7c92	; 0x7c92 <__addsf3>
		lon +=			lonmin/60.0;
    65f2:	20 e0       	ldi	r18, 0x00	; 0
    65f4:	30 e0       	ldi	r19, 0x00	; 0
    65f6:	40 e7       	ldi	r20, 0x70	; 112
    65f8:	52 e4       	ldi	r21, 0x42	; 66
    65fa:	0e 94 b0 3e 	call	0x7d60	; 0x7d60 <__divsf3>
    65fe:	9b 01       	movw	r18, r22
    6600:	ac 01       	movw	r20, r24
    6602:	c3 01       	movw	r24, r6
    6604:	b2 01       	movw	r22, r4
    6606:	0e 94 49 3e 	call	0x7c92	; 0x7c92 <__addsf3>
    660a:	60 93 91 08 	sts	0x0891, r22
    660e:	70 93 92 08 	sts	0x0892, r23
    6612:	80 93 93 08 	sts	0x0893, r24
    6616:	90 93 94 08 	sts	0x0894, r25
		if (gpsdata[43] != 'E')
    661a:	f8 01       	movw	r30, r16
    661c:	23 a5       	ldd	r18, Z+43	; 0x2b
    661e:	25 34       	cpi	r18, 0x45	; 69
    6620:	59 f0       	breq	.+22     	; 0x6638 <_Z10gpshandlerv+0x3e0>
		{
			lon *= -1;
    6622:	dc 01       	movw	r26, r24
    6624:	cb 01       	movw	r24, r22
    6626:	b0 58       	subi	r27, 0x80	; 128
    6628:	80 93 91 08 	sts	0x0891, r24
    662c:	90 93 92 08 	sts	0x0892, r25
    6630:	a0 93 93 08 	sts	0x0893, r26
    6634:	b0 93 94 08 	sts	0x0894, r27
		}
		//Speed 
		volatile uint8_t counter = 45;
    6638:	8d e2       	ldi	r24, 0x2D	; 45
    663a:	8c 83       	std	Y+4, r24	; 0x04
		uint8_t weiter = true;
		while (weiter)
		{
			if (gpsdata[counter]=='.')
    663c:	ec 81       	ldd	r30, Y+4	; 0x04
    663e:	f0 e0       	ldi	r31, 0x00	; 0
    6640:	e6 56       	subi	r30, 0x66	; 102
    6642:	f7 4f       	sbci	r31, 0xF7	; 247
    6644:	80 81       	ld	r24, Z
    6646:	8e 32       	cpi	r24, 0x2E	; 46
    6648:	91 f4       	brne	.+36     	; 0x666e <_Z10gpshandlerv+0x416>
			{
				weiter=false;
				counter--;
    664a:	8c 81       	ldd	r24, Y+4	; 0x04
    664c:	81 50       	subi	r24, 0x01	; 1
    664e:	8c 83       	std	Y+4, r24	; 0x04
			}
			counter++;
    6650:	8c 81       	ldd	r24, Y+4	; 0x04
    6652:	8f 5f       	subi	r24, 0xFF	; 255
    6654:	8c 83       	std	Y+4, r24	; 0x04
		}
		
		gpsspeed = 0;
    6656:	10 92 8d 08 	sts	0x088D, r1
    665a:	10 92 8e 08 	sts	0x088E, r1
    665e:	10 92 8f 08 	sts	0x088F, r1
    6662:	10 92 90 08 	sts	0x0890, r1
		for(uint8_t i=45;i<counter;i++){
    6666:	8c 81       	ldd	r24, Y+4	; 0x04
    6668:	8e 32       	cpi	r24, 0x2E	; 46
    666a:	28 f4       	brcc	.+10     	; 0x6676 <_Z10gpshandlerv+0x41e>
    666c:	47 c0       	rjmp	.+142    	; 0x66fc <_Z10gpshandlerv+0x4a4>
			if (gpsdata[counter]=='.')
			{
				weiter=false;
				counter--;
			}
			counter++;
    666e:	8c 81       	ldd	r24, Y+4	; 0x04
    6670:	8f 5f       	subi	r24, 0xFF	; 255
    6672:	8c 83       	std	Y+4, r24	; 0x04
    6674:	e3 cf       	rjmp	.-58     	; 0x663c <_Z10gpshandlerv+0x3e4>
		}
		
		gpsspeed = 0;
		for(uint8_t i=45;i<counter;i++){
    6676:	81 2c       	mov	r8, r1
    6678:	91 2c       	mov	r9, r1
    667a:	54 01       	movw	r10, r8
    667c:	0f 2e       	mov	r0, r31
    667e:	fd e2       	ldi	r31, 0x2D	; 45
    6680:	ff 2e       	mov	r15, r31
    6682:	f0 2d       	mov	r31, r0
			gpsspeed += (gpsdata[i]-'0')*pow(10,(counter-i-1));
    6684:	0f 2d       	mov	r16, r15
    6686:	10 e0       	ldi	r17, 0x00	; 0
    6688:	8c 81       	ldd	r24, Y+4	; 0x04
    668a:	90 e0       	ldi	r25, 0x00	; 0
    668c:	80 1b       	sub	r24, r16
    668e:	91 0b       	sbc	r25, r17
    6690:	01 97       	sbiw	r24, 0x01	; 1
    6692:	bc 01       	movw	r22, r24
    6694:	99 0f       	add	r25, r25
    6696:	88 0b       	sbc	r24, r24
    6698:	99 0b       	sbc	r25, r25
    669a:	0e 94 4b 3f 	call	0x7e96	; 0x7e96 <__floatsisf>
    669e:	9b 01       	movw	r18, r22
    66a0:	ac 01       	movw	r20, r24
    66a2:	60 e0       	ldi	r22, 0x00	; 0
    66a4:	70 e0       	ldi	r23, 0x00	; 0
    66a6:	80 e2       	ldi	r24, 0x20	; 32
    66a8:	91 e4       	ldi	r25, 0x41	; 65
    66aa:	0e 94 c7 40 	call	0x818e	; 0x818e <pow>
    66ae:	2b 01       	movw	r4, r22
    66b0:	3c 01       	movw	r6, r24
    66b2:	f8 01       	movw	r30, r16
    66b4:	e6 56       	subi	r30, 0x66	; 102
    66b6:	f7 4f       	sbci	r31, 0xF7	; 247
    66b8:	60 81       	ld	r22, Z
    66ba:	70 e0       	ldi	r23, 0x00	; 0
    66bc:	60 53       	subi	r22, 0x30	; 48
    66be:	71 09       	sbc	r23, r1
    66c0:	07 2e       	mov	r0, r23
    66c2:	00 0c       	add	r0, r0
    66c4:	88 0b       	sbc	r24, r24
    66c6:	99 0b       	sbc	r25, r25
    66c8:	0e 94 4b 3f 	call	0x7e96	; 0x7e96 <__floatsisf>
    66cc:	a3 01       	movw	r20, r6
    66ce:	92 01       	movw	r18, r4
    66d0:	0e 94 64 40 	call	0x80c8	; 0x80c8 <__mulsf3>
    66d4:	9b 01       	movw	r18, r22
    66d6:	ac 01       	movw	r20, r24
    66d8:	c5 01       	movw	r24, r10
    66da:	b4 01       	movw	r22, r8
    66dc:	0e 94 49 3e 	call	0x7c92	; 0x7c92 <__addsf3>
    66e0:	4b 01       	movw	r8, r22
    66e2:	5c 01       	movw	r10, r24
			}
			counter++;
		}
		
		gpsspeed = 0;
		for(uint8_t i=45;i<counter;i++){
    66e4:	f3 94       	inc	r15
    66e6:	8c 81       	ldd	r24, Y+4	; 0x04
    66e8:	f8 16       	cp	r15, r24
    66ea:	60 f2       	brcs	.-104    	; 0x6684 <_Z10gpshandlerv+0x42c>
    66ec:	80 92 8d 08 	sts	0x088D, r8
    66f0:	90 92 8e 08 	sts	0x088E, r9
    66f4:	a0 92 8f 08 	sts	0x088F, r10
    66f8:	b0 92 90 08 	sts	0x0890, r11
			gpsspeed += (gpsdata[i]-'0')*pow(10,(counter-i-1));
		}
		gpsspeed += (gpsdata[counter+1]-'0')*0.1;
    66fc:	ec 81       	ldd	r30, Y+4	; 0x04
		gpsspeed += (gpsdata[counter+2]-'0')*0.01;
    66fe:	1c 81       	ldd	r17, Y+4	; 0x04
		
		gpsspeed = 0;
		for(uint8_t i=45;i<counter;i++){
			gpsspeed += (gpsdata[i]-'0')*pow(10,(counter-i-1));
		}
		gpsspeed += (gpsdata[counter+1]-'0')*0.1;
    6700:	f0 e0       	ldi	r31, 0x00	; 0
    6702:	e6 56       	subi	r30, 0x66	; 102
    6704:	f7 4f       	sbci	r31, 0xF7	; 247
    6706:	61 81       	ldd	r22, Z+1	; 0x01
    6708:	70 e0       	ldi	r23, 0x00	; 0
    670a:	60 53       	subi	r22, 0x30	; 48
    670c:	71 09       	sbc	r23, r1
    670e:	07 2e       	mov	r0, r23
    6710:	00 0c       	add	r0, r0
    6712:	88 0b       	sbc	r24, r24
    6714:	99 0b       	sbc	r25, r25
    6716:	0e 94 4b 3f 	call	0x7e96	; 0x7e96 <__floatsisf>
    671a:	2d ec       	ldi	r18, 0xCD	; 205
    671c:	3c ec       	ldi	r19, 0xCC	; 204
    671e:	4c ec       	ldi	r20, 0xCC	; 204
    6720:	5d e3       	ldi	r21, 0x3D	; 61
    6722:	0e 94 64 40 	call	0x80c8	; 0x80c8 <__mulsf3>
    6726:	20 91 8d 08 	lds	r18, 0x088D
    672a:	30 91 8e 08 	lds	r19, 0x088E
    672e:	40 91 8f 08 	lds	r20, 0x088F
    6732:	50 91 90 08 	lds	r21, 0x0890
    6736:	0e 94 49 3e 	call	0x7c92	; 0x7c92 <__addsf3>
    673a:	4b 01       	movw	r8, r22
    673c:	5c 01       	movw	r10, r24
		gpsspeed += (gpsdata[counter+2]-'0')*0.01;
    673e:	e1 2f       	mov	r30, r17
    6740:	f0 e0       	ldi	r31, 0x00	; 0
    6742:	e6 56       	subi	r30, 0x66	; 102
    6744:	f7 4f       	sbci	r31, 0xF7	; 247
    6746:	82 81       	ldd	r24, Z+2	; 0x02
    6748:	90 e0       	ldi	r25, 0x00	; 0
    674a:	c0 97       	sbiw	r24, 0x30	; 48
    674c:	bc 01       	movw	r22, r24
    674e:	99 0f       	add	r25, r25
    6750:	88 0b       	sbc	r24, r24
    6752:	99 0b       	sbc	r25, r25
    6754:	0e 94 4b 3f 	call	0x7e96	; 0x7e96 <__floatsisf>
    6758:	2a e0       	ldi	r18, 0x0A	; 10
    675a:	37 ed       	ldi	r19, 0xD7	; 215
    675c:	43 e2       	ldi	r20, 0x23	; 35
    675e:	5c e3       	ldi	r21, 0x3C	; 60
    6760:	0e 94 64 40 	call	0x80c8	; 0x80c8 <__mulsf3>
    6764:	9b 01       	movw	r18, r22
    6766:	ac 01       	movw	r20, r24
    6768:	c5 01       	movw	r24, r10
    676a:	b4 01       	movw	r22, r8
    676c:	0e 94 49 3e 	call	0x7c92	; 0x7c92 <__addsf3>
		//umrechnen knoten in kmh
		gpsspeed *= 1.852;
    6770:	26 e5       	ldi	r18, 0x56	; 86
    6772:	3e e0       	ldi	r19, 0x0E	; 14
    6774:	4d ee       	ldi	r20, 0xED	; 237
    6776:	5f e3       	ldi	r21, 0x3F	; 63
    6778:	0e 94 64 40 	call	0x80c8	; 0x80c8 <__mulsf3>
    677c:	60 93 8d 08 	sts	0x088D, r22
    6780:	70 93 8e 08 	sts	0x088E, r23
    6784:	80 93 8f 08 	sts	0x088F, r24
    6788:	90 93 90 08 	sts	0x0890, r25
		
		//date
		counter =19;
    678c:	83 e1       	ldi	r24, 0x13	; 19
    678e:	8c 83       	std	Y+4, r24	; 0x04
		volatile uint8_t nichterreicht = 0;
    6790:	1b 82       	std	Y+3, r1	; 0x03
		
		while (nichterreicht < 7)
    6792:	8b 81       	ldd	r24, Y+3	; 0x03
    6794:	87 30       	cpi	r24, 0x07	; 7
    6796:	80 f4       	brcc	.+32     	; 0x67b8 <_Z10gpshandlerv+0x560>
		{
			if (gpsdata[counter] == ',')
    6798:	ec 81       	ldd	r30, Y+4	; 0x04
    679a:	f0 e0       	ldi	r31, 0x00	; 0
    679c:	e6 56       	subi	r30, 0x66	; 102
    679e:	f7 4f       	sbci	r31, 0xF7	; 247
    67a0:	80 81       	ld	r24, Z
    67a2:	8c 32       	cpi	r24, 0x2C	; 44
    67a4:	19 f4       	brne	.+6      	; 0x67ac <_Z10gpshandlerv+0x554>
			{
				nichterreicht++;
    67a6:	8b 81       	ldd	r24, Y+3	; 0x03
    67a8:	8f 5f       	subi	r24, 0xFF	; 255
    67aa:	8b 83       	std	Y+3, r24	; 0x03
			}
			counter++;
    67ac:	8c 81       	ldd	r24, Y+4	; 0x04
    67ae:	8f 5f       	subi	r24, 0xFF	; 255
    67b0:	8c 83       	std	Y+4, r24	; 0x04
		
		//date
		counter =19;
		volatile uint8_t nichterreicht = 0;
		
		while (nichterreicht < 7)
    67b2:	8b 81       	ldd	r24, Y+3	; 0x03
    67b4:	87 30       	cpi	r24, 0x07	; 7
    67b6:	80 f3       	brcs	.-32     	; 0x6798 <_Z10gpshandlerv+0x540>
			}
			counter++;
		}
		
		//Datum
		gpsTag =	(gpsdata[counter+0] - '0')*10;
    67b8:	ac 81       	ldd	r26, Y+4	; 0x04
		gpsTag +=	(gpsdata[counter+1] - '0');
    67ba:	ec 81       	ldd	r30, Y+4	; 0x04
			}
			counter++;
		}
		
		//Datum
		gpsTag =	(gpsdata[counter+0] - '0')*10;
    67bc:	b0 e0       	ldi	r27, 0x00	; 0
    67be:	a6 56       	subi	r26, 0x66	; 102
    67c0:	b7 4f       	sbci	r27, 0xF7	; 247
    67c2:	8c 91       	ld	r24, X
    67c4:	88 0f       	add	r24, r24
    67c6:	80 56       	subi	r24, 0x60	; 96
    67c8:	28 2f       	mov	r18, r24
    67ca:	22 0f       	add	r18, r18
    67cc:	22 0f       	add	r18, r18
    67ce:	28 0f       	add	r18, r24
		gpsTag +=	(gpsdata[counter+1] - '0');
    67d0:	f0 e0       	ldi	r31, 0x00	; 0
    67d2:	e6 56       	subi	r30, 0x66	; 102
    67d4:	f7 4f       	sbci	r31, 0xF7	; 247
    67d6:	81 81       	ldd	r24, Z+1	; 0x01
    67d8:	90 e0       	ldi	r25, 0x00	; 0
    67da:	c0 97       	sbiw	r24, 0x30	; 48
    67dc:	82 0f       	add	r24, r18
    67de:	91 1d       	adc	r25, r1
    67e0:	80 93 89 08 	sts	0x0889, r24
		gpsMonat =	(gpsdata[counter+2] - '0')*10;
    67e4:	ac 81       	ldd	r26, Y+4	; 0x04
		gpsMonat +=	(gpsdata[counter+3] - '0');
    67e6:	ec 81       	ldd	r30, Y+4	; 0x04
		}
		
		//Datum
		gpsTag =	(gpsdata[counter+0] - '0')*10;
		gpsTag +=	(gpsdata[counter+1] - '0');
		gpsMonat =	(gpsdata[counter+2] - '0')*10;
    67e8:	b0 e0       	ldi	r27, 0x00	; 0
    67ea:	a6 56       	subi	r26, 0x66	; 102
    67ec:	b7 4f       	sbci	r27, 0xF7	; 247
    67ee:	12 96       	adiw	r26, 0x02	; 2
    67f0:	8c 91       	ld	r24, X
    67f2:	88 0f       	add	r24, r24
    67f4:	80 56       	subi	r24, 0x60	; 96
    67f6:	28 2f       	mov	r18, r24
    67f8:	22 0f       	add	r18, r18
    67fa:	22 0f       	add	r18, r18
    67fc:	28 0f       	add	r18, r24
		gpsMonat +=	(gpsdata[counter+3] - '0');
    67fe:	f0 e0       	ldi	r31, 0x00	; 0
    6800:	e6 56       	subi	r30, 0x66	; 102
    6802:	f7 4f       	sbci	r31, 0xF7	; 247
    6804:	83 81       	ldd	r24, Z+3	; 0x03
    6806:	90 e0       	ldi	r25, 0x00	; 0
    6808:	c0 97       	sbiw	r24, 0x30	; 48
    680a:	82 0f       	add	r24, r18
    680c:	91 1d       	adc	r25, r1
    680e:	80 93 88 08 	sts	0x0888, r24
		gpsJahr =	(gpsdata[counter+4] - '0')*10;
    6812:	ac 81       	ldd	r26, Y+4	; 0x04
		gpsJahr +=	(gpsdata[counter+5] - '0');
    6814:	ec 81       	ldd	r30, Y+4	; 0x04
		//Datum
		gpsTag =	(gpsdata[counter+0] - '0')*10;
		gpsTag +=	(gpsdata[counter+1] - '0');
		gpsMonat =	(gpsdata[counter+2] - '0')*10;
		gpsMonat +=	(gpsdata[counter+3] - '0');
		gpsJahr =	(gpsdata[counter+4] - '0')*10;
    6816:	b0 e0       	ldi	r27, 0x00	; 0
    6818:	a6 56       	subi	r26, 0x66	; 102
    681a:	b7 4f       	sbci	r27, 0xF7	; 247
    681c:	14 96       	adiw	r26, 0x04	; 4
    681e:	8c 91       	ld	r24, X
    6820:	88 0f       	add	r24, r24
    6822:	80 56       	subi	r24, 0x60	; 96
    6824:	28 2f       	mov	r18, r24
    6826:	22 0f       	add	r18, r18
    6828:	22 0f       	add	r18, r18
    682a:	28 0f       	add	r18, r24
		gpsJahr +=	(gpsdata[counter+5] - '0');
    682c:	f0 e0       	ldi	r31, 0x00	; 0
    682e:	e6 56       	subi	r30, 0x66	; 102
    6830:	f7 4f       	sbci	r31, 0xF7	; 247
    6832:	85 81       	ldd	r24, Z+5	; 0x05
    6834:	90 e0       	ldi	r25, 0x00	; 0
    6836:	c0 97       	sbiw	r24, 0x30	; 48
    6838:	82 0f       	add	r24, r18
    683a:	91 1d       	adc	r25, r1
    683c:	80 93 87 08 	sts	0x0887, r24
		
		gpsstatus &= ~(1<<complete);
    6840:	8e 2d       	mov	r24, r14
    6842:	8b 7f       	andi	r24, 0xFB	; 251
    6844:	80 93 e2 08 	sts	0x08E2, r24
    6848:	a4 c0       	rjmp	.+328    	; 0x6992 <_Z10gpshandlerv+0x73a>
	}
	else if ((gpsstatus&(1<<completenotvalid))  && (gpsstatus&(1<<fix)))
    684a:	e3 fe       	sbrs	r14, 3
    684c:	a2 c0       	rjmp	.+324    	; 0x6992 <_Z10gpshandlerv+0x73a>
    684e:	ee 20       	and	r14, r14
    6850:	0c f0       	brlt	.+2      	; 0x6854 <_Z10gpshandlerv+0x5fc>
    6852:	9f c0       	rjmp	.+318    	; 0x6992 <_Z10gpshandlerv+0x73a>
	{
		//Andere Daten vernichten
		lat = 0;
    6854:	10 92 95 08 	sts	0x0895, r1
    6858:	10 92 96 08 	sts	0x0896, r1
    685c:	10 92 97 08 	sts	0x0897, r1
    6860:	10 92 98 08 	sts	0x0898, r1
		lon = 0;
    6864:	10 92 91 08 	sts	0x0891, r1
    6868:	10 92 92 08 	sts	0x0892, r1
    686c:	10 92 93 08 	sts	0x0893, r1
    6870:	10 92 94 08 	sts	0x0894, r1
		gpsspeed = 0;
    6874:	10 92 8d 08 	sts	0x088D, r1
    6878:	10 92 8e 08 	sts	0x088E, r1
    687c:	10 92 8f 08 	sts	0x088F, r1
    6880:	10 92 90 08 	sts	0x0890, r1
		//Zeit
		gpsstunde =		(gpsdata[7] - '0')*10;
		gpsstunde +=	(gpsdata[8] - '0');
    6884:	ea e9       	ldi	r30, 0x9A	; 154
    6886:	f8 e0       	ldi	r31, 0x08	; 8
    6888:	80 85       	ldd	r24, Z+8	; 0x08
    688a:	21 ed       	ldi	r18, 0xD1	; 209
    688c:	28 0f       	add	r18, r24
		//Andere Daten vernichten
		lat = 0;
		lon = 0;
		gpsspeed = 0;
		//Zeit
		gpsstunde =		(gpsdata[7] - '0')*10;
    688e:	87 81       	ldd	r24, Z+7	; 0x07
    6890:	88 0f       	add	r24, r24
    6892:	80 56       	subi	r24, 0x60	; 96
    6894:	98 2f       	mov	r25, r24
    6896:	99 0f       	add	r25, r25
    6898:	99 0f       	add	r25, r25
    689a:	89 0f       	add	r24, r25
		gpsstunde +=	(gpsdata[8] - '0');
		gpsstunde += GMT;
    689c:	82 0f       	add	r24, r18
    689e:	80 93 8c 08 	sts	0x088C, r24
    68a2:	82 85       	ldd	r24, Z+10	; 0x0a
    68a4:	20 ed       	ldi	r18, 0xD0	; 208
    68a6:	28 0f       	add	r18, r24
		gpsminute =		(gpsdata[9] - '0')*10;
    68a8:	81 85       	ldd	r24, Z+9	; 0x09
    68aa:	88 0f       	add	r24, r24
    68ac:	80 56       	subi	r24, 0x60	; 96
    68ae:	98 2f       	mov	r25, r24
    68b0:	99 0f       	add	r25, r25
    68b2:	99 0f       	add	r25, r25
    68b4:	89 0f       	add	r24, r25
		gpsminute +=	(gpsdata[10] - '0');
    68b6:	82 0f       	add	r24, r18
    68b8:	80 93 8b 08 	sts	0x088B, r24
    68bc:	84 85       	ldd	r24, Z+12	; 0x0c
    68be:	20 ed       	ldi	r18, 0xD0	; 208
    68c0:	28 0f       	add	r18, r24
		gpssekunde =	(gpsdata[11] - '0')*10;
    68c2:	83 85       	ldd	r24, Z+11	; 0x0b
    68c4:	88 0f       	add	r24, r24
    68c6:	80 56       	subi	r24, 0x60	; 96
    68c8:	98 2f       	mov	r25, r24
    68ca:	99 0f       	add	r25, r25
    68cc:	99 0f       	add	r25, r25
    68ce:	89 0f       	add	r24, r25
		gpssekunde +=	(gpsdata[12] - '0');
    68d0:	82 0f       	add	r24, r18
    68d2:	80 93 8a 08 	sts	0x088A, r24
		
		volatile uint8_t counter = 19;
    68d6:	83 e1       	ldi	r24, 0x13	; 19
    68d8:	8a 83       	std	Y+2, r24	; 0x02
		volatile uint8_t nichterreicht = 0;
    68da:	19 82       	std	Y+1, r1	; 0x01
		
		while (nichterreicht < 7)
    68dc:	89 81       	ldd	r24, Y+1	; 0x01
    68de:	87 30       	cpi	r24, 0x07	; 7
    68e0:	80 f4       	brcc	.+32     	; 0x6902 <_Z10gpshandlerv+0x6aa>
		{
			if (gpsdata[counter] == ',')
    68e2:	ea 81       	ldd	r30, Y+2	; 0x02
    68e4:	f0 e0       	ldi	r31, 0x00	; 0
    68e6:	e6 56       	subi	r30, 0x66	; 102
    68e8:	f7 4f       	sbci	r31, 0xF7	; 247
    68ea:	80 81       	ld	r24, Z
    68ec:	8c 32       	cpi	r24, 0x2C	; 44
    68ee:	19 f4       	brne	.+6      	; 0x68f6 <_Z10gpshandlerv+0x69e>
			{
				nichterreicht++;
    68f0:	89 81       	ldd	r24, Y+1	; 0x01
    68f2:	8f 5f       	subi	r24, 0xFF	; 255
    68f4:	89 83       	std	Y+1, r24	; 0x01
			}
			counter++;
    68f6:	8a 81       	ldd	r24, Y+2	; 0x02
    68f8:	8f 5f       	subi	r24, 0xFF	; 255
    68fa:	8a 83       	std	Y+2, r24	; 0x02
		gpssekunde +=	(gpsdata[12] - '0');
		
		volatile uint8_t counter = 19;
		volatile uint8_t nichterreicht = 0;
		
		while (nichterreicht < 7)
    68fc:	89 81       	ldd	r24, Y+1	; 0x01
    68fe:	87 30       	cpi	r24, 0x07	; 7
    6900:	80 f3       	brcs	.-32     	; 0x68e2 <_Z10gpshandlerv+0x68a>
			}
			counter++;
		}
		
		//Datum
		gpsTag =	(gpsdata[counter+0] - '0')*10;
    6902:	aa 81       	ldd	r26, Y+2	; 0x02
		gpsTag +=	(gpsdata[counter+1] - '0');
    6904:	ea 81       	ldd	r30, Y+2	; 0x02
			}
			counter++;
		}
		
		//Datum
		gpsTag =	(gpsdata[counter+0] - '0')*10;
    6906:	b0 e0       	ldi	r27, 0x00	; 0
    6908:	a6 56       	subi	r26, 0x66	; 102
    690a:	b7 4f       	sbci	r27, 0xF7	; 247
    690c:	8c 91       	ld	r24, X
    690e:	88 0f       	add	r24, r24
    6910:	80 56       	subi	r24, 0x60	; 96
    6912:	28 2f       	mov	r18, r24
    6914:	22 0f       	add	r18, r18
    6916:	22 0f       	add	r18, r18
    6918:	28 0f       	add	r18, r24
		gpsTag +=	(gpsdata[counter+1] - '0');
    691a:	f0 e0       	ldi	r31, 0x00	; 0
    691c:	e6 56       	subi	r30, 0x66	; 102
    691e:	f7 4f       	sbci	r31, 0xF7	; 247
    6920:	81 81       	ldd	r24, Z+1	; 0x01
    6922:	90 e0       	ldi	r25, 0x00	; 0
    6924:	c0 97       	sbiw	r24, 0x30	; 48
    6926:	82 0f       	add	r24, r18
    6928:	91 1d       	adc	r25, r1
    692a:	80 93 89 08 	sts	0x0889, r24
		gpsMonat =	(gpsdata[counter+2] - '0')*10;
    692e:	aa 81       	ldd	r26, Y+2	; 0x02
		gpsMonat +=	(gpsdata[counter+3] - '0');
    6930:	ea 81       	ldd	r30, Y+2	; 0x02
		}
		
		//Datum
		gpsTag =	(gpsdata[counter+0] - '0')*10;
		gpsTag +=	(gpsdata[counter+1] - '0');
		gpsMonat =	(gpsdata[counter+2] - '0')*10;
    6932:	b0 e0       	ldi	r27, 0x00	; 0
    6934:	a6 56       	subi	r26, 0x66	; 102
    6936:	b7 4f       	sbci	r27, 0xF7	; 247
    6938:	12 96       	adiw	r26, 0x02	; 2
    693a:	8c 91       	ld	r24, X
    693c:	88 0f       	add	r24, r24
    693e:	80 56       	subi	r24, 0x60	; 96
    6940:	28 2f       	mov	r18, r24
    6942:	22 0f       	add	r18, r18
    6944:	22 0f       	add	r18, r18
    6946:	28 0f       	add	r18, r24
		gpsMonat +=	(gpsdata[counter+3] - '0');
    6948:	f0 e0       	ldi	r31, 0x00	; 0
    694a:	e6 56       	subi	r30, 0x66	; 102
    694c:	f7 4f       	sbci	r31, 0xF7	; 247
    694e:	83 81       	ldd	r24, Z+3	; 0x03
    6950:	90 e0       	ldi	r25, 0x00	; 0
    6952:	c0 97       	sbiw	r24, 0x30	; 48
    6954:	82 0f       	add	r24, r18
    6956:	91 1d       	adc	r25, r1
    6958:	80 93 88 08 	sts	0x0888, r24
		gpsJahr =	(gpsdata[counter+4] - '0')*10;
    695c:	aa 81       	ldd	r26, Y+2	; 0x02
		gpsJahr +=	(gpsdata[counter+5] - '0');
    695e:	ea 81       	ldd	r30, Y+2	; 0x02
		//Datum
		gpsTag =	(gpsdata[counter+0] - '0')*10;
		gpsTag +=	(gpsdata[counter+1] - '0');
		gpsMonat =	(gpsdata[counter+2] - '0')*10;
		gpsMonat +=	(gpsdata[counter+3] - '0');
		gpsJahr =	(gpsdata[counter+4] - '0')*10;
    6960:	b0 e0       	ldi	r27, 0x00	; 0
    6962:	a6 56       	subi	r26, 0x66	; 102
    6964:	b7 4f       	sbci	r27, 0xF7	; 247
    6966:	14 96       	adiw	r26, 0x04	; 4
    6968:	8c 91       	ld	r24, X
    696a:	88 0f       	add	r24, r24
    696c:	80 56       	subi	r24, 0x60	; 96
    696e:	28 2f       	mov	r18, r24
    6970:	22 0f       	add	r18, r18
    6972:	22 0f       	add	r18, r18
    6974:	28 0f       	add	r18, r24
		gpsJahr +=	(gpsdata[counter+5] - '0');
    6976:	f0 e0       	ldi	r31, 0x00	; 0
    6978:	e6 56       	subi	r30, 0x66	; 102
    697a:	f7 4f       	sbci	r31, 0xF7	; 247
    697c:	85 81       	ldd	r24, Z+5	; 0x05
    697e:	90 e0       	ldi	r25, 0x00	; 0
    6980:	c0 97       	sbiw	r24, 0x30	; 48
    6982:	82 0f       	add	r24, r18
    6984:	91 1d       	adc	r25, r1
    6986:	80 93 87 08 	sts	0x0887, r24
		
		gpsstatus &= ~(1<<completenotvalid);
    698a:	8e 2d       	mov	r24, r14
    698c:	87 7f       	andi	r24, 0xF7	; 247
    698e:	80 93 e2 08 	sts	0x08E2, r24
	}
	//fix status pruefen, wenn implementiert
}
    6992:	0f 90       	pop	r0
    6994:	0f 90       	pop	r0
    6996:	0f 90       	pop	r0
    6998:	0f 90       	pop	r0
    699a:	df 91       	pop	r29
    699c:	cf 91       	pop	r28
    699e:	1f 91       	pop	r17
    69a0:	0f 91       	pop	r16
    69a2:	ff 90       	pop	r15
    69a4:	ef 90       	pop	r14
    69a6:	bf 90       	pop	r11
    69a8:	af 90       	pop	r10
    69aa:	9f 90       	pop	r9
    69ac:	8f 90       	pop	r8
    69ae:	7f 90       	pop	r7
    69b0:	6f 90       	pop	r6
    69b2:	5f 90       	pop	r5
    69b4:	4f 90       	pop	r4
    69b6:	08 95       	ret

000069b8 <main>:
	| ((DWORD)rtc.Minuten << 5)
	| ((DWORD)rtc.Sekunden >> 1);
}

int main(void)
{
    69b8:	cf 93       	push	r28
    69ba:	df 93       	push	r29
    69bc:	cd b7       	in	r28, 0x3d	; 61
    69be:	de b7       	in	r29, 0x3e	; 62
    69c0:	65 97       	sbiw	r28, 0x15	; 21
    69c2:	0f b6       	in	r0, 0x3f	; 63
    69c4:	f8 94       	cli
    69c6:	de bf       	out	0x3e, r29	; 62
    69c8:	0f be       	out	0x3f, r0	; 63
    69ca:	cd bf       	out	0x3d, r28	; 61
    initialisierung();
    69cc:	2a d8       	rcall	.-4012   	; 0x5a22 <_Z15initialisierungv>
#include <avr/interrupt.h>

//define new and delete operator
void * operator new(size_t size)
{
	return malloc(size);
    69ce:	8a e2       	ldi	r24, 0x2A	; 42
    69d0:	90 e0       	ldi	r25, 0x00	; 0
    69d2:	0e 94 14 46 	call	0x8c28	; 0x8c28 <malloc>
    69d6:	fc 01       	movw	r30, r24
		uint8_t posx;
		uint8_t maxentries;
		uint8_t maxentriesx;
	monitor(Display *ol, RTC *rt)
	{
		buffersize = 0;
    69d8:	16 8a       	std	Z+22, r1	; 0x16
		oled = ol;
    69da:	81 e1       	ldi	r24, 0x11	; 17
    69dc:	9a e0       	ldi	r25, 0x0A	; 10
    69de:	90 8f       	std	Z+24, r25	; 0x18
    69e0:	87 8b       	std	Z+23, r24	; 0x17
		rtc = rt;
    69e2:	82 e1       	ldi	r24, 0x12	; 18
    69e4:	9e e0       	ldi	r25, 0x0E	; 14
    69e6:	92 8f       	std	Z+26, r25	; 0x1a
    69e8:	81 8f       	std	Z+25, r24	; 0x19
		posy=0;
    69ea:	15 a2       	std	Z+37, r1	; 0x25
		posx=0;
    69ec:	16 a2       	std	Z+38, r1	; 0x26
		maxentriesx = 1;
    69ee:	81 e0       	ldi	r24, 0x01	; 1
    69f0:	80 a7       	std	Z+40, r24	; 0x28
class uhr:public monitor
{
	private:
	uint8_t Zeiger;
	public:
	uhr(Display *ol, RTC *rt):monitor(ol,rt)
    69f2:	8e ee       	ldi	r24, 0xEE	; 238
    69f4:	93 e0       	ldi	r25, 0x03	; 3
    69f6:	91 83       	std	Z+1, r25	; 0x01
    69f8:	80 83       	st	Z, r24
	{
		char na[] = "Uhr";
    69fa:	85 e5       	ldi	r24, 0x55	; 85
    69fc:	98 e6       	ldi	r25, 0x68	; 104
    69fe:	a2 e7       	ldi	r26, 0x72	; 114
    6a00:	b0 e0       	ldi	r27, 0x00	; 0
    6a02:	89 83       	std	Y+1, r24	; 0x01
    6a04:	9a 83       	std	Y+2, r25	; 0x02
    6a06:	ab 83       	std	Y+3, r26	; 0x03
    6a08:	bc 83       	std	Y+4, r27	; 0x04
    6a0a:	9e 01       	movw	r18, r28
    6a0c:	2f 5f       	subi	r18, 0xFF	; 255
    6a0e:	3f 4f       	sbci	r19, 0xFF	; 255
    6a10:	cf 01       	movw	r24, r30
    6a12:	4b 96       	adiw	r24, 0x1b	; 27
    6a14:	be 01       	movw	r22, r28
    6a16:	65 5f       	subi	r22, 0xF5	; 245
    6a18:	7f 4f       	sbci	r23, 0xFF	; 255
    6a1a:	89 01       	movw	r16, r18
			{
				name[i] = na[i];
			}
			else
			{
				name[i] = ' ';
    6a1c:	40 e2       	ldi	r20, 0x20	; 32
    6a1e:	50 2f       	mov	r21, r16
    6a20:	52 1b       	sub	r21, r18
	public:
	uhr(Display *ol, RTC *rt):monitor(ol,rt)
	{
		char na[] = "Uhr";
		for(uint8_t i =0; i< namesize;i++){
			if (i<sizeof(na))
    6a22:	54 30       	cpi	r21, 0x04	; 4
    6a24:	28 f4       	brcc	.+10     	; 0x6a30 <main+0x78>
			{
				name[i] = na[i];
    6a26:	d8 01       	movw	r26, r16
    6a28:	5c 91       	ld	r21, X
    6a2a:	dc 01       	movw	r26, r24
    6a2c:	5c 93       	st	X, r21
    6a2e:	02 c0       	rjmp	.+4      	; 0x6a34 <main+0x7c>
			}
			else
			{
				name[i] = ' ';
    6a30:	dc 01       	movw	r26, r24
    6a32:	4c 93       	st	X, r20
    6a34:	0f 5f       	subi	r16, 0xFF	; 255
    6a36:	1f 4f       	sbci	r17, 0xFF	; 255
    6a38:	01 96       	adiw	r24, 0x01	; 1
	uint8_t Zeiger;
	public:
	uhr(Display *ol, RTC *rt):monitor(ol,rt)
	{
		char na[] = "Uhr";
		for(uint8_t i =0; i< namesize;i++){
    6a3a:	06 17       	cp	r16, r22
    6a3c:	17 07       	cpc	r17, r23
    6a3e:	79 f7       	brne	.-34     	; 0x6a1e <main+0x66>
			else
			{
				name[i] = ' ';
			}
		}
		Zeiger = 0;
    6a40:	11 a6       	std	Z+41, r1	; 0x29
		maxentries = 3;
    6a42:	83 e0       	ldi	r24, 0x03	; 3
    6a44:	87 a3       	std	Z+39, r24	; 0x27
		new tacho(&oled,&rtc),
		new wandern(&oled,&rtc),
		new einstellungen(&oled,&rtc),
		new offscreen(&oled,&rtc),
		new menue(&oled,&rtc)
	};
    6a46:	fa 83       	std	Y+2, r31	; 0x02
    6a48:	e9 83       	std	Y+1, r30	; 0x01
#include <avr/interrupt.h>

//define new and delete operator
void * operator new(size_t size)
{
	return malloc(size);
    6a4a:	89 e2       	ldi	r24, 0x29	; 41
    6a4c:	90 e0       	ldi	r25, 0x00	; 0
    6a4e:	0e 94 14 46 	call	0x8c28	; 0x8c28 <malloc>
    6a52:	8c 01       	movw	r16, r24
		uint8_t posx;
		uint8_t maxentries;
		uint8_t maxentriesx;
	monitor(Display *ol, RTC *rt)
	{
		buffersize = 0;
    6a54:	fc 01       	movw	r30, r24
    6a56:	16 8a       	std	Z+22, r1	; 0x16
		oled = ol;
    6a58:	81 e1       	ldi	r24, 0x11	; 17
    6a5a:	9a e0       	ldi	r25, 0x0A	; 10
    6a5c:	90 8f       	std	Z+24, r25	; 0x18
    6a5e:	87 8b       	std	Z+23, r24	; 0x17
		rtc = rt;
    6a60:	82 e1       	ldi	r24, 0x12	; 18
    6a62:	9e e0       	ldi	r25, 0x0E	; 14
    6a64:	92 8f       	std	Z+26, r25	; 0x1a
    6a66:	81 8f       	std	Z+25, r24	; 0x19
		posy=0;
    6a68:	15 a2       	std	Z+37, r1	; 0x25
		posx=0;
    6a6a:	16 a2       	std	Z+38, r1	; 0x26
		maxentriesx = 1;
    6a6c:	81 e0       	ldi	r24, 0x01	; 1
    6a6e:	80 a7       	std	Z+40, r24	; 0x28
class tacho: public monitor
{
	private:
		
	public:
	tacho(Display *ol,RTC *rtc):monitor(ol,rtc)
    6a70:	86 ef       	ldi	r24, 0xF6	; 246
    6a72:	93 e0       	ldi	r25, 0x03	; 3
    6a74:	91 83       	std	Z+1, r25	; 0x01
    6a76:	80 83       	st	Z, r24
	{
		char na[] = "Tacho";
    6a78:	86 e0       	ldi	r24, 0x06	; 6
    6a7a:	ec ec       	ldi	r30, 0xCC	; 204
    6a7c:	f1 e0       	ldi	r31, 0x01	; 1
    6a7e:	de 01       	movw	r26, r28
    6a80:	1d 96       	adiw	r26, 0x0d	; 13
    6a82:	01 90       	ld	r0, Z+
    6a84:	0d 92       	st	X+, r0
    6a86:	8a 95       	dec	r24
    6a88:	e1 f7       	brne	.-8      	; 0x6a82 <main+0xca>
    6a8a:	ce 01       	movw	r24, r28
    6a8c:	0d 96       	adiw	r24, 0x0d	; 13
    6a8e:	d8 01       	movw	r26, r16
    6a90:	5b 96       	adiw	r26, 0x1b	; 27
    6a92:	ae 01       	movw	r20, r28
    6a94:	49 5e       	subi	r20, 0xE9	; 233
    6a96:	5f 4f       	sbci	r21, 0xFF	; 255
    6a98:	fc 01       	movw	r30, r24
			{
				name[i] = na[i];
			}
			else
			{
				name[i] = ' ';
    6a9a:	20 e2       	ldi	r18, 0x20	; 32
    6a9c:	3e 2f       	mov	r19, r30
    6a9e:	38 1b       	sub	r19, r24
	public:
	tacho(Display *ol,RTC *rtc):monitor(ol,rtc)
	{
		char na[] = "Tacho";
		for(uint8_t i =0; i< namesize;i++){
			if (i<sizeof(na))
    6aa0:	36 30       	cpi	r19, 0x06	; 6
    6aa2:	18 f4       	brcc	.+6      	; 0x6aaa <main+0xf2>
			{
				name[i] = na[i];
    6aa4:	30 81       	ld	r19, Z
    6aa6:	3c 93       	st	X, r19
    6aa8:	01 c0       	rjmp	.+2      	; 0x6aac <main+0xf4>
			}
			else
			{
				name[i] = ' ';
    6aaa:	2c 93       	st	X, r18
    6aac:	31 96       	adiw	r30, 0x01	; 1
    6aae:	11 96       	adiw	r26, 0x01	; 1
		
	public:
	tacho(Display *ol,RTC *rtc):monitor(ol,rtc)
	{
		char na[] = "Tacho";
		for(uint8_t i =0; i< namesize;i++){
    6ab0:	e4 17       	cp	r30, r20
    6ab2:	f5 07       	cpc	r31, r21
    6ab4:	99 f7       	brne	.-26     	; 0x6a9c <main+0xe4>
			else
			{
				name[i] = ' ';
			}
		}
		nullen();
    6ab6:	0e 94 f4 2b 	call	0x57e8	; 0x57e8 <_Z6nullenv>
		new tacho(&oled,&rtc),
		new wandern(&oled,&rtc),
		new einstellungen(&oled,&rtc),
		new offscreen(&oled,&rtc),
		new menue(&oled,&rtc)
	};
    6aba:	1c 83       	std	Y+4, r17	; 0x04
    6abc:	0b 83       	std	Y+3, r16	; 0x03
#include <avr/interrupt.h>

//define new and delete operator
void * operator new(size_t size)
{
	return malloc(size);
    6abe:	89 e2       	ldi	r24, 0x29	; 41
    6ac0:	90 e0       	ldi	r25, 0x00	; 0
    6ac2:	0e 94 14 46 	call	0x8c28	; 0x8c28 <malloc>
		uint8_t posx;
		uint8_t maxentries;
		uint8_t maxentriesx;
	monitor(Display *ol, RTC *rt)
	{
		buffersize = 0;
    6ac6:	dc 01       	movw	r26, r24
    6ac8:	56 96       	adiw	r26, 0x16	; 22
    6aca:	1c 92       	st	X, r1
    6acc:	56 97       	sbiw	r26, 0x16	; 22
		oled = ol;
    6ace:	21 e1       	ldi	r18, 0x11	; 17
    6ad0:	3a e0       	ldi	r19, 0x0A	; 10
    6ad2:	58 96       	adiw	r26, 0x18	; 24
    6ad4:	3c 93       	st	X, r19
    6ad6:	2e 93       	st	-X, r18
    6ad8:	57 97       	sbiw	r26, 0x17	; 23
		rtc = rt;
    6ada:	22 e1       	ldi	r18, 0x12	; 18
    6adc:	3e e0       	ldi	r19, 0x0E	; 14
    6ade:	5a 96       	adiw	r26, 0x1a	; 26
    6ae0:	3c 93       	st	X, r19
    6ae2:	2e 93       	st	-X, r18
    6ae4:	59 97       	sbiw	r26, 0x19	; 25
		posy=0;
    6ae6:	95 96       	adiw	r26, 0x25	; 37
    6ae8:	1c 92       	st	X, r1
    6aea:	95 97       	sbiw	r26, 0x25	; 37
		posx=0;
    6aec:	96 96       	adiw	r26, 0x26	; 38
    6aee:	1c 92       	st	X, r1
    6af0:	96 97       	sbiw	r26, 0x26	; 38
		maxentriesx = 1;
    6af2:	21 e0       	ldi	r18, 0x01	; 1
    6af4:	98 96       	adiw	r26, 0x28	; 40
    6af6:	2c 93       	st	X, r18
    6af8:	98 97       	sbiw	r26, 0x28	; 40
class wandern: public monitor
{
	private:
	
	public:	
	wandern(Display *ol,RTC *rtc):monitor(ol,rtc)
    6afa:	2e ef       	ldi	r18, 0xFE	; 254
    6afc:	33 e0       	ldi	r19, 0x03	; 3
    6afe:	2d 93       	st	X+, r18
    6b00:	3c 93       	st	X, r19
	{
		char na[] = "Wandern";
    6b02:	28 e0       	ldi	r18, 0x08	; 8
    6b04:	e2 ed       	ldi	r30, 0xD2	; 210
    6b06:	f1 e0       	ldi	r31, 0x01	; 1
    6b08:	de 01       	movw	r26, r28
    6b0a:	1d 96       	adiw	r26, 0x0d	; 13
    6b0c:	01 90       	ld	r0, Z+
    6b0e:	0d 92       	st	X+, r0
    6b10:	2a 95       	dec	r18
    6b12:	e1 f7       	brne	.-8      	; 0x6b0c <main+0x154>
    6b14:	9e 01       	movw	r18, r28
    6b16:	23 5f       	subi	r18, 0xF3	; 243
    6b18:	3f 4f       	sbci	r19, 0xFF	; 255
    6b1a:	dc 01       	movw	r26, r24
    6b1c:	5b 96       	adiw	r26, 0x1b	; 27
    6b1e:	be 01       	movw	r22, r28
    6b20:	69 5e       	subi	r22, 0xE9	; 233
    6b22:	7f 4f       	sbci	r23, 0xFF	; 255
    6b24:	f9 01       	movw	r30, r18
			{
				name[i] = na[i];
			}
			else
			{
				name[i] = ' ';
    6b26:	40 e2       	ldi	r20, 0x20	; 32
    6b28:	5e 2f       	mov	r21, r30
    6b2a:	52 1b       	sub	r21, r18
	public:	
	wandern(Display *ol,RTC *rtc):monitor(ol,rtc)
	{
		char na[] = "Wandern";
		for(uint8_t i =0; i< namesize;i++){
			if (i<sizeof(na))
    6b2c:	58 30       	cpi	r21, 0x08	; 8
    6b2e:	18 f4       	brcc	.+6      	; 0x6b36 <main+0x17e>
			{
				name[i] = na[i];
    6b30:	50 81       	ld	r21, Z
    6b32:	5c 93       	st	X, r21
    6b34:	01 c0       	rjmp	.+2      	; 0x6b38 <main+0x180>
			}
			else
			{
				name[i] = ' ';
    6b36:	4c 93       	st	X, r20
    6b38:	31 96       	adiw	r30, 0x01	; 1
    6b3a:	11 96       	adiw	r26, 0x01	; 1
	
	public:	
	wandern(Display *ol,RTC *rtc):monitor(ol,rtc)
	{
		char na[] = "Wandern";
		for(uint8_t i =0; i< namesize;i++){
    6b3c:	e6 17       	cp	r30, r22
    6b3e:	f7 07       	cpc	r31, r23
    6b40:	99 f7       	brne	.-26     	; 0x6b28 <main+0x170>
		new tacho(&oled,&rtc),
		new wandern(&oled,&rtc),
		new einstellungen(&oled,&rtc),
		new offscreen(&oled,&rtc),
		new menue(&oled,&rtc)
	};
    6b42:	9e 83       	std	Y+6, r25	; 0x06
    6b44:	8d 83       	std	Y+5, r24	; 0x05
#include <avr/interrupt.h>

//define new and delete operator
void * operator new(size_t size)
{
	return malloc(size);
    6b46:	89 e2       	ldi	r24, 0x29	; 41
    6b48:	90 e0       	ldi	r25, 0x00	; 0
    6b4a:	0e 94 14 46 	call	0x8c28	; 0x8c28 <malloc>
		uint8_t posx;
		uint8_t maxentries;
		uint8_t maxentriesx;
	monitor(Display *ol, RTC *rt)
	{
		buffersize = 0;
    6b4e:	fc 01       	movw	r30, r24
    6b50:	16 8a       	std	Z+22, r1	; 0x16
		oled = ol;
    6b52:	21 e1       	ldi	r18, 0x11	; 17
    6b54:	3a e0       	ldi	r19, 0x0A	; 10
    6b56:	30 8f       	std	Z+24, r19	; 0x18
    6b58:	27 8b       	std	Z+23, r18	; 0x17
		rtc = rt;
    6b5a:	22 e1       	ldi	r18, 0x12	; 18
    6b5c:	3e e0       	ldi	r19, 0x0E	; 14
    6b5e:	32 8f       	std	Z+26, r19	; 0x1a
    6b60:	21 8f       	std	Z+25, r18	; 0x19
		posy=0;
    6b62:	15 a2       	std	Z+37, r1	; 0x25
		posx=0;
    6b64:	16 a2       	std	Z+38, r1	; 0x26
		maxentriesx = 1;
    6b66:	21 e0       	ldi	r18, 0x01	; 1
    6b68:	20 a7       	std	Z+40, r18	; 0x28

class einstellungen: public monitor
{
	private:
	public:
	einstellungen(Display *ol,RTC *rt): monitor(ol,rt)
    6b6a:	26 e0       	ldi	r18, 0x06	; 6
    6b6c:	34 e0       	ldi	r19, 0x04	; 4
    6b6e:	31 83       	std	Z+1, r19	; 0x01
    6b70:	20 83       	st	Z, r18
	{
		char na[] = "Settings";
    6b72:	29 e0       	ldi	r18, 0x09	; 9
    6b74:	e2 e1       	ldi	r30, 0x12	; 18
    6b76:	f3 e0       	ldi	r31, 0x03	; 3
    6b78:	de 01       	movw	r26, r28
    6b7a:	1d 96       	adiw	r26, 0x0d	; 13
    6b7c:	01 90       	ld	r0, Z+
    6b7e:	0d 92       	st	X+, r0
    6b80:	2a 95       	dec	r18
    6b82:	e1 f7       	brne	.-8      	; 0x6b7c <main+0x1c4>
    6b84:	9e 01       	movw	r18, r28
    6b86:	23 5f       	subi	r18, 0xF3	; 243
    6b88:	3f 4f       	sbci	r19, 0xFF	; 255
    6b8a:	dc 01       	movw	r26, r24
    6b8c:	5b 96       	adiw	r26, 0x1b	; 27
    6b8e:	be 01       	movw	r22, r28
    6b90:	69 5e       	subi	r22, 0xE9	; 233
    6b92:	7f 4f       	sbci	r23, 0xFF	; 255
    6b94:	f9 01       	movw	r30, r18
			{
				name[i] = na[i];
			}
			else
			{
				name[i] = ' ';
    6b96:	40 e2       	ldi	r20, 0x20	; 32
    6b98:	5e 2f       	mov	r21, r30
    6b9a:	52 1b       	sub	r21, r18
	public:
	einstellungen(Display *ol,RTC *rt): monitor(ol,rt)
	{
		char na[] = "Settings";
		for(uint8_t i =0; i< namesize;i++){
			if (i<sizeof(na))
    6b9c:	59 30       	cpi	r21, 0x09	; 9
    6b9e:	18 f4       	brcc	.+6      	; 0x6ba6 <main+0x1ee>
			{
				name[i] = na[i];
    6ba0:	50 81       	ld	r21, Z
    6ba2:	5c 93       	st	X, r21
    6ba4:	01 c0       	rjmp	.+2      	; 0x6ba8 <main+0x1f0>
			}
			else
			{
				name[i] = ' ';
    6ba6:	4c 93       	st	X, r20
    6ba8:	31 96       	adiw	r30, 0x01	; 1
    6baa:	11 96       	adiw	r26, 0x01	; 1
	private:
	public:
	einstellungen(Display *ol,RTC *rt): monitor(ol,rt)
	{
		char na[] = "Settings";
		for(uint8_t i =0; i< namesize;i++){
    6bac:	e6 17       	cp	r30, r22
    6bae:	f7 07       	cpc	r31, r23
    6bb0:	99 f7       	brne	.-26     	; 0x6b98 <main+0x1e0>
			else
			{
				name[i] = ' ';
			}
		}
		maxentries = 5;
    6bb2:	25 e0       	ldi	r18, 0x05	; 5
    6bb4:	dc 01       	movw	r26, r24
    6bb6:	97 96       	adiw	r26, 0x27	; 39
    6bb8:	2c 93       	st	X, r18
		new tacho(&oled,&rtc),
		new wandern(&oled,&rtc),
		new einstellungen(&oled,&rtc),
		new offscreen(&oled,&rtc),
		new menue(&oled,&rtc)
	};
    6bba:	98 87       	std	Y+8, r25	; 0x08
    6bbc:	8f 83       	std	Y+7, r24	; 0x07
#include <avr/interrupt.h>

//define new and delete operator
void * operator new(size_t size)
{
	return malloc(size);
    6bbe:	89 e2       	ldi	r24, 0x29	; 41
    6bc0:	90 e0       	ldi	r25, 0x00	; 0
    6bc2:	0e 94 14 46 	call	0x8c28	; 0x8c28 <malloc>
    6bc6:	fc 01       	movw	r30, r24
		uint8_t posx;
		uint8_t maxentries;
		uint8_t maxentriesx;
	monitor(Display *ol, RTC *rt)
	{
		buffersize = 0;
    6bc8:	16 8a       	std	Z+22, r1	; 0x16
		oled = ol;
    6bca:	0f 2e       	mov	r0, r31
    6bcc:	f1 e1       	ldi	r31, 0x11	; 17
    6bce:	cf 2e       	mov	r12, r31
    6bd0:	fa e0       	ldi	r31, 0x0A	; 10
    6bd2:	df 2e       	mov	r13, r31
    6bd4:	f0 2d       	mov	r31, r0
    6bd6:	d0 8e       	std	Z+24, r13	; 0x18
    6bd8:	c7 8a       	std	Z+23, r12	; 0x17
		rtc = rt;
    6bda:	0f 2e       	mov	r0, r31
    6bdc:	f2 e1       	ldi	r31, 0x12	; 18
    6bde:	ef 2e       	mov	r14, r31
    6be0:	fe e0       	ldi	r31, 0x0E	; 14
    6be2:	ff 2e       	mov	r15, r31
    6be4:	f0 2d       	mov	r31, r0
    6be6:	f2 8e       	std	Z+26, r15	; 0x1a
    6be8:	e1 8e       	std	Z+25, r14	; 0x19
		posy=0;
    6bea:	15 a2       	std	Z+37, r1	; 0x25
		posx=0;
    6bec:	16 a2       	std	Z+38, r1	; 0x26
		maxentriesx = 1;
    6bee:	11 e0       	ldi	r17, 0x01	; 1
    6bf0:	10 a7       	std	Z+40, r17	; 0x28
class offscreen: public monitor
{
	private:
	
	public:
	offscreen(Display *ol, RTC *rt):monitor(ol,rt){
    6bf2:	8e e1       	ldi	r24, 0x1E	; 30
    6bf4:	94 e0       	ldi	r25, 0x04	; 4
    6bf6:	91 83       	std	Z+1, r25	; 0x01
    6bf8:	80 83       	st	Z, r24
		new tacho(&oled,&rtc),
		new wandern(&oled,&rtc),
		new einstellungen(&oled,&rtc),
		new offscreen(&oled,&rtc),
		new menue(&oled,&rtc)
	};
    6bfa:	fa 87       	std	Y+10, r31	; 0x0a
    6bfc:	e9 87       	std	Y+9, r30	; 0x09
#include <avr/interrupt.h>

//define new and delete operator
void * operator new(size_t size)
{
	return malloc(size);
    6bfe:	89 e2       	ldi	r24, 0x29	; 41
    6c00:	90 e0       	ldi	r25, 0x00	; 0
    6c02:	0e 94 14 46 	call	0x8c28	; 0x8c28 <malloc>
		uint8_t posx;
		uint8_t maxentries;
		uint8_t maxentriesx;
	monitor(Display *ol, RTC *rt)
	{
		buffersize = 0;
    6c06:	fc 01       	movw	r30, r24
    6c08:	16 8a       	std	Z+22, r1	; 0x16
		oled = ol;
    6c0a:	d0 8e       	std	Z+24, r13	; 0x18
    6c0c:	c7 8a       	std	Z+23, r12	; 0x17
		rtc = rt;
    6c0e:	f2 8e       	std	Z+26, r15	; 0x1a
    6c10:	e1 8e       	std	Z+25, r14	; 0x19
		posy=0;
    6c12:	15 a2       	std	Z+37, r1	; 0x25
		posx=0;
    6c14:	16 a2       	std	Z+38, r1	; 0x26
		maxentriesx = 1;
    6c16:	10 a7       	std	Z+40, r17	; 0x28

class menue: public monitor
{
	private:
	public:
	menue(Display *ol, RTC *rt):monitor(ol,rt)
    6c18:	26 e1       	ldi	r18, 0x16	; 22
    6c1a:	34 e0       	ldi	r19, 0x04	; 4
    6c1c:	31 83       	std	Z+1, r19	; 0x01
    6c1e:	20 83       	st	Z, r18
	{
		char na[] = "Menue";
    6c20:	26 e0       	ldi	r18, 0x06	; 6
    6c22:	eb e1       	ldi	r30, 0x1B	; 27
    6c24:	f3 e0       	ldi	r31, 0x03	; 3
    6c26:	de 01       	movw	r26, r28
    6c28:	1d 96       	adiw	r26, 0x0d	; 13
    6c2a:	01 90       	ld	r0, Z+
    6c2c:	0d 92       	st	X+, r0
    6c2e:	2a 95       	dec	r18
    6c30:	e1 f7       	brne	.-8      	; 0x6c2a <main+0x272>
    6c32:	9e 01       	movw	r18, r28
    6c34:	23 5f       	subi	r18, 0xF3	; 243
    6c36:	3f 4f       	sbci	r19, 0xFF	; 255
    6c38:	dc 01       	movw	r26, r24
    6c3a:	5b 96       	adiw	r26, 0x1b	; 27
    6c3c:	be 01       	movw	r22, r28
    6c3e:	69 5e       	subi	r22, 0xE9	; 233
    6c40:	7f 4f       	sbci	r23, 0xFF	; 255
    6c42:	f9 01       	movw	r30, r18
			{
				name[i] = na[i];
			}
			else
			{
				name[i] = ' ';
    6c44:	40 e2       	ldi	r20, 0x20	; 32
    6c46:	5e 2f       	mov	r21, r30
    6c48:	52 1b       	sub	r21, r18
	public:
	menue(Display *ol, RTC *rt):monitor(ol,rt)
	{
		char na[] = "Menue";
		for(uint8_t i =0; i< namesize;i++)
			if (i<sizeof(na))
    6c4a:	56 30       	cpi	r21, 0x06	; 6
    6c4c:	18 f4       	brcc	.+6      	; 0x6c54 <main+0x29c>
			{
				name[i] = na[i];
    6c4e:	50 81       	ld	r21, Z
    6c50:	5c 93       	st	X, r21
    6c52:	01 c0       	rjmp	.+2      	; 0x6c56 <main+0x29e>
			}
			else
			{
				name[i] = ' ';
    6c54:	4c 93       	st	X, r20
    6c56:	31 96       	adiw	r30, 0x01	; 1
    6c58:	11 96       	adiw	r26, 0x01	; 1
	private:
	public:
	menue(Display *ol, RTC *rt):monitor(ol,rt)
	{
		char na[] = "Menue";
		for(uint8_t i =0; i< namesize;i++)
    6c5a:	e6 17       	cp	r30, r22
    6c5c:	f7 07       	cpc	r31, r23
    6c5e:	99 f7       	brne	.-26     	; 0x6c46 <main+0x28e>
			}
			else
			{
				name[i] = ' ';
			}
			maxentriesx = 0;
    6c60:	dc 01       	movw	r26, r24
    6c62:	98 96       	adiw	r26, 0x28	; 40
    6c64:	1c 92       	st	X, r1
    6c66:	98 97       	sbiw	r26, 0x28	; 40
			maxentries = numberofpages;
    6c68:	25 e0       	ldi	r18, 0x05	; 5
    6c6a:	97 96       	adiw	r26, 0x27	; 39
    6c6c:	2c 93       	st	X, r18
		new tacho(&oled,&rtc),
		new wandern(&oled,&rtc),
		new einstellungen(&oled,&rtc),
		new offscreen(&oled,&rtc),
		new menue(&oled,&rtc)
	};
    6c6e:	9c 87       	std	Y+12, r25	; 0x0c
    6c70:	8b 87       	std	Y+11, r24	; 0x0b
	
	druck.bmp180_getcalibration();
    6c72:	81 ef       	ldi	r24, 0xF1	; 241
    6c74:	98 e0       	ldi	r25, 0x08	; 8
    6c76:	0e 94 a7 03 	call	0x74e	; 0x74e <_ZN6BMP18021bmp180_getcalibrationEv>
	
	while (1) 
    {
		tastaturhandler(Folien[position],Tastatur.unified());
    6c7a:	85 e0       	ldi	r24, 0x05	; 5
    6c7c:	9a e0       	ldi	r25, 0x0A	; 10
    6c7e:	0e 94 08 24 	call	0x4810	; 0x4810 <_ZN9Interface7unifiedEv>
    6c82:	e0 91 e4 08 	lds	r30, 0x08E4
    6c86:	f0 e0       	ldi	r31, 0x00	; 0
    6c88:	ee 0f       	add	r30, r30
    6c8a:	ff 1f       	adc	r31, r31
    6c8c:	21 e0       	ldi	r18, 0x01	; 1
    6c8e:	30 e0       	ldi	r19, 0x00	; 0
    6c90:	2c 0f       	add	r18, r28
    6c92:	3d 1f       	adc	r19, r29
    6c94:	e2 0f       	add	r30, r18
    6c96:	f3 1f       	adc	r31, r19
    6c98:	68 2f       	mov	r22, r24
    6c9a:	80 81       	ld	r24, Z
    6c9c:	91 81       	ldd	r25, Z+1	; 0x01
    6c9e:	0f d8       	rcall	.-4066   	; 0x5cbe <_Z15tastaturhandlerP7monitorh>
		maininterupthandler(Folien[position]);
    6ca0:	e0 91 e4 08 	lds	r30, 0x08E4
    6ca4:	f0 e0       	ldi	r31, 0x00	; 0
    6ca6:	ee 0f       	add	r30, r30
    6ca8:	ff 1f       	adc	r31, r31
    6caa:	81 e0       	ldi	r24, 0x01	; 1
    6cac:	90 e0       	ldi	r25, 0x00	; 0
    6cae:	8c 0f       	add	r24, r28
    6cb0:	9d 1f       	adc	r25, r29
    6cb2:	e8 0f       	add	r30, r24
    6cb4:	f9 1f       	adc	r31, r25
    6cb6:	80 81       	ld	r24, Z
    6cb8:	91 81       	ldd	r25, Z+1	; 0x01
    6cba:	9c d8       	rcall	.-3784   	; 0x5df4 <_Z19maininterupthandlerP7monitor>
		gpshandler();
    6cbc:	cd da       	rcall	.-2662   	; 0x6258 <_Z10gpshandlerv>
    }
    6cbe:	dd cf       	rjmp	.-70     	; 0x6c7a <main+0x2c2>

00006cc0 <_Z13uhreinstellenv>:
		gpsstatus &= ~(1<<completenotvalid);
	}
	//fix status pruefen, wenn implementiert
}

void uhreinstellen(){
    6cc0:	2f 92       	push	r2
    6cc2:	3f 92       	push	r3
    6cc4:	4f 92       	push	r4
    6cc6:	5f 92       	push	r5
    6cc8:	6f 92       	push	r6
    6cca:	7f 92       	push	r7
    6ccc:	8f 92       	push	r8
    6cce:	9f 92       	push	r9
    6cd0:	af 92       	push	r10
    6cd2:	bf 92       	push	r11
    6cd4:	cf 92       	push	r12
    6cd6:	df 92       	push	r13
    6cd8:	ef 92       	push	r14
    6cda:	ff 92       	push	r15
    6cdc:	0f 93       	push	r16
    6cde:	1f 93       	push	r17
    6ce0:	cf 93       	push	r28
    6ce2:	df 93       	push	r29
    6ce4:	cd b7       	in	r28, 0x3d	; 61
    6ce6:	de b7       	in	r29, 0x3e	; 62
    6ce8:	66 97       	sbiw	r28, 0x16	; 22
    6cea:	0f b6       	in	r0, 0x3f	; 63
    6cec:	f8 94       	cli
    6cee:	de bf       	out	0x3e, r29	; 62
    6cf0:	0f be       	out	0x3f, r0	; 63
    6cf2:	cd bf       	out	0x3d, r28	; 61
	rtc.RTCstop();
    6cf4:	82 e1       	ldi	r24, 0x12	; 18
    6cf6:	9e e0       	ldi	r25, 0x0E	; 14
    6cf8:	c5 d7       	rcall	.+3978   	; 0x7c84 <_ZN3RTC7RTCstopEv>
	
	oled.clearFrame();
    6cfa:	81 e1       	ldi	r24, 0x11	; 17
    6cfc:	9a e0       	ldi	r25, 0x0A	; 10
    6cfe:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <_ZN7Display10clearFrameEv>
	char buffer[20];
	uint8_t buffersize;
	uint8_t pos=0;
    6d02:	91 2c       	mov	r9, r1
	while(pos<11){
		buffersize=sprintf(buffer,"Uhreinstellung");
    6d04:	0f 2e       	mov	r0, r31
    6d06:	ff e0       	ldi	r31, 0x0F	; 15
    6d08:	7f 2e       	mov	r7, r31
    6d0a:	f0 2d       	mov	r31, r0
    6d0c:	ce 01       	movw	r24, r28
    6d0e:	01 96       	adiw	r24, 0x01	; 1
    6d10:	2c 01       	movw	r4, r24
    6d12:	f1 2c       	mov	r15, r1
		for(uint8_t i = 0; i<buffersize;i++){
			oled.draw_ASCI(buffer[i],charsize*i,0);
		}
		buffersize=sprintf(buffer,"--------------");
    6d14:	8d 8b       	std	Y+21, r24	; 0x15
    6d16:	5e 8a       	std	Y+22, r5	; 0x16
		for(uint8_t i = 0; i<buffersize;i++){
			oled.draw_ASCI(buffer[i],charsize*i,8);
		}
		buffer[0]=rtc.Stunden/10;
    6d18:	0f 2e       	mov	r0, r31
    6d1a:	f2 e1       	ldi	r31, 0x12	; 18
    6d1c:	cf 2e       	mov	r12, r31
    6d1e:	fe e0       	ldi	r31, 0x0E	; 14
    6d20:	df 2e       	mov	r13, r31
    6d22:	f0 2d       	mov	r31, r0
    6d24:	0f 2e       	mov	r0, r31
    6d26:	fd ec       	ldi	r31, 0xCD	; 205
    6d28:	8f 2e       	mov	r8, r31
    6d2a:	f0 2d       	mov	r31, r0
		buffer[1]=rtc.Stunden%10;
		buffer[2]=':';
		buffer[3]=rtc.Minuten/10;
		buffer[4]=rtc.Minuten%10;
		buffer[5]=' ';
    6d2c:	68 94       	set
    6d2e:	ee 24       	eor	r14, r14
    6d30:	e5 f8       	bld	r14, 5
		buffer[6]=rtc.Tag/10;
		buffer[7]=rtc.Tag%10;
		buffer[8]='.';
    6d32:	0f 2e       	mov	r0, r31
    6d34:	fe e2       	ldi	r31, 0x2E	; 46
    6d36:	6f 2e       	mov	r6, r31
    6d38:	f0 2d       	mov	r31, r0
	oled.clearFrame();
	char buffer[20];
	uint8_t buffersize;
	uint8_t pos=0;
	while(pos<11){
		buffersize=sprintf(buffer,"Uhreinstellung");
    6d3a:	e1 e2       	ldi	r30, 0x21	; 33
    6d3c:	f3 e0       	ldi	r31, 0x03	; 3
    6d3e:	d2 01       	movw	r26, r4
    6d40:	87 2d       	mov	r24, r7
    6d42:	01 90       	ld	r0, Z+
    6d44:	0d 92       	st	X+, r0
    6d46:	8a 95       	dec	r24
    6d48:	e1 f7       	brne	.-8      	; 0x6d42 <_Z13uhreinstellenv+0x82>
    6d4a:	52 01       	movw	r10, r4
    6d4c:	12 01       	movw	r2, r4
    6d4e:	1f 2d       	mov	r17, r15
		for(uint8_t i = 0; i<buffersize;i++){
			oled.draw_ASCI(buffer[i],charsize*i,0);
    6d50:	f1 01       	movw	r30, r2
    6d52:	61 91       	ld	r22, Z+
    6d54:	1f 01       	movw	r2, r30
    6d56:	2f 2d       	mov	r18, r15
    6d58:	41 2f       	mov	r20, r17
    6d5a:	81 e1       	ldi	r24, 0x11	; 17
    6d5c:	9a e0       	ldi	r25, 0x0A	; 10
    6d5e:	0e 94 00 0c 	call	0x1800	; 0x1800 <_ZN7Display9draw_ASCIEhhh>
    6d62:	1a 5f       	subi	r17, 0xFA	; 250
	char buffer[20];
	uint8_t buffersize;
	uint8_t pos=0;
	while(pos<11){
		buffersize=sprintf(buffer,"Uhreinstellung");
		for(uint8_t i = 0; i<buffersize;i++){
    6d64:	14 35       	cpi	r17, 0x54	; 84
    6d66:	a1 f7       	brne	.-24     	; 0x6d50 <_Z13uhreinstellenv+0x90>
			oled.draw_ASCI(buffer[i],charsize*i,0);
		}
		buffersize=sprintf(buffer,"--------------");
    6d68:	e5 ea       	ldi	r30, 0xA5	; 165
    6d6a:	f1 e0       	ldi	r31, 0x01	; 1
    6d6c:	d2 01       	movw	r26, r4
    6d6e:	87 2d       	mov	r24, r7
    6d70:	01 90       	ld	r0, Z+
    6d72:	0d 92       	st	X+, r0
    6d74:	8a 95       	dec	r24
    6d76:	e1 f7       	brne	.-8      	; 0x6d70 <_Z13uhreinstellenv+0xb0>
    6d78:	2d 88       	ldd	r2, Y+21	; 0x15
    6d7a:	3e 88       	ldd	r3, Y+22	; 0x16
    6d7c:	1f 2d       	mov	r17, r15
		for(uint8_t i = 0; i<buffersize;i++){
			oled.draw_ASCI(buffer[i],charsize*i,8);
    6d7e:	f1 01       	movw	r30, r2
    6d80:	61 91       	ld	r22, Z+
    6d82:	1f 01       	movw	r2, r30
    6d84:	28 e0       	ldi	r18, 0x08	; 8
    6d86:	41 2f       	mov	r20, r17
    6d88:	81 e1       	ldi	r24, 0x11	; 17
    6d8a:	9a e0       	ldi	r25, 0x0A	; 10
    6d8c:	0e 94 00 0c 	call	0x1800	; 0x1800 <_ZN7Display9draw_ASCIEhhh>
    6d90:	1a 5f       	subi	r17, 0xFA	; 250
		buffersize=sprintf(buffer,"Uhreinstellung");
		for(uint8_t i = 0; i<buffersize;i++){
			oled.draw_ASCI(buffer[i],charsize*i,0);
		}
		buffersize=sprintf(buffer,"--------------");
		for(uint8_t i = 0; i<buffersize;i++){
    6d92:	14 35       	cpi	r17, 0x54	; 84
    6d94:	a1 f7       	brne	.-24     	; 0x6d7e <_Z13uhreinstellenv+0xbe>
			oled.draw_ASCI(buffer[i],charsize*i,8);
		}
		buffer[0]=rtc.Stunden/10;
    6d96:	f6 01       	movw	r30, r12
    6d98:	90 89       	ldd	r25, Z+16	; 0x10
    6d9a:	98 9d       	mul	r25, r8
    6d9c:	81 2d       	mov	r24, r1
    6d9e:	11 24       	eor	r1, r1
    6da0:	86 95       	lsr	r24
    6da2:	86 95       	lsr	r24
    6da4:	86 95       	lsr	r24
    6da6:	89 83       	std	Y+1, r24	; 0x01
		buffer[1]=rtc.Stunden%10;
    6da8:	88 0f       	add	r24, r24
    6daa:	28 2f       	mov	r18, r24
    6dac:	22 0f       	add	r18, r18
    6dae:	22 0f       	add	r18, r18
    6db0:	82 0f       	add	r24, r18
    6db2:	98 1b       	sub	r25, r24
    6db4:	9a 83       	std	Y+2, r25	; 0x02
		buffer[2]=':';
    6db6:	fa e3       	ldi	r31, 0x3A	; 58
    6db8:	fb 83       	std	Y+3, r31	; 0x03
		buffer[3]=rtc.Minuten/10;
    6dba:	f6 01       	movw	r30, r12
    6dbc:	91 89       	ldd	r25, Z+17	; 0x11
    6dbe:	98 9d       	mul	r25, r8
    6dc0:	81 2d       	mov	r24, r1
    6dc2:	11 24       	eor	r1, r1
    6dc4:	86 95       	lsr	r24
    6dc6:	86 95       	lsr	r24
    6dc8:	86 95       	lsr	r24
    6dca:	8c 83       	std	Y+4, r24	; 0x04
		buffer[4]=rtc.Minuten%10;
    6dcc:	88 0f       	add	r24, r24
    6dce:	28 2f       	mov	r18, r24
    6dd0:	22 0f       	add	r18, r18
    6dd2:	22 0f       	add	r18, r18
    6dd4:	82 0f       	add	r24, r18
    6dd6:	98 1b       	sub	r25, r24
    6dd8:	9d 83       	std	Y+5, r25	; 0x05
		buffer[5]=' ';
    6dda:	ee 82       	std	Y+6, r14	; 0x06
		buffer[6]=rtc.Tag/10;
    6ddc:	94 89       	ldd	r25, Z+20	; 0x14
    6dde:	98 9d       	mul	r25, r8
    6de0:	81 2d       	mov	r24, r1
    6de2:	11 24       	eor	r1, r1
    6de4:	86 95       	lsr	r24
    6de6:	86 95       	lsr	r24
    6de8:	86 95       	lsr	r24
    6dea:	8f 83       	std	Y+7, r24	; 0x07
		buffer[7]=rtc.Tag%10;
    6dec:	88 0f       	add	r24, r24
    6dee:	28 2f       	mov	r18, r24
    6df0:	22 0f       	add	r18, r18
    6df2:	22 0f       	add	r18, r18
    6df4:	82 0f       	add	r24, r18
    6df6:	98 1b       	sub	r25, r24
    6df8:	98 87       	std	Y+8, r25	; 0x08
		buffer[8]='.';
    6dfa:	69 86       	std	Y+9, r6	; 0x09
		buffer[9]=rtc.Monat/10;
    6dfc:	96 89       	ldd	r25, Z+22	; 0x16
    6dfe:	98 9d       	mul	r25, r8
    6e00:	81 2d       	mov	r24, r1
    6e02:	11 24       	eor	r1, r1
    6e04:	86 95       	lsr	r24
    6e06:	86 95       	lsr	r24
    6e08:	86 95       	lsr	r24
    6e0a:	8a 87       	std	Y+10, r24	; 0x0a
		buffer[10]=rtc.Monat%10;
    6e0c:	88 0f       	add	r24, r24
    6e0e:	28 2f       	mov	r18, r24
    6e10:	22 0f       	add	r18, r18
    6e12:	22 0f       	add	r18, r18
    6e14:	82 0f       	add	r24, r18
    6e16:	98 1b       	sub	r25, r24
    6e18:	9b 87       	std	Y+11, r25	; 0x0b
		buffer[11]='.';
    6e1a:	6c 86       	std	Y+12, r6	; 0x0c
		buffer[12]=rtc.Jahr/10;
    6e1c:	97 89       	ldd	r25, Z+23	; 0x17
    6e1e:	98 9d       	mul	r25, r8
    6e20:	81 2d       	mov	r24, r1
    6e22:	11 24       	eor	r1, r1
    6e24:	86 95       	lsr	r24
    6e26:	86 95       	lsr	r24
    6e28:	86 95       	lsr	r24
    6e2a:	8d 87       	std	Y+13, r24	; 0x0d
		buffer[13]=rtc.Jahr%10;
    6e2c:	88 0f       	add	r24, r24
    6e2e:	28 2f       	mov	r18, r24
    6e30:	22 0f       	add	r18, r18
    6e32:	22 0f       	add	r18, r18
    6e34:	82 0f       	add	r24, r18
    6e36:	98 1b       	sub	r25, r24
    6e38:	9e 87       	std	Y+14, r25	; 0x0e
    6e3a:	0d 89       	ldd	r16, Y+21	; 0x15
    6e3c:	1e 89       	ldd	r17, Y+22	; 0x16
    6e3e:	2f 2c       	mov	r2, r15
    6e40:	33 24       	eor	r3, r3
    6e42:	33 94       	inc	r3
    6e44:	05 c0       	rjmp	.+10     	; 0x6e50 <_Z13uhreinstellenv+0x190>
    6e46:	33 94       	inc	r3
    6e48:	0f 5f       	subi	r16, 0xFF	; 255
    6e4a:	1f 4f       	sbci	r17, 0xFF	; 255
    6e4c:	f0 e1       	ldi	r31, 0x10	; 16
    6e4e:	2f 0e       	add	r2, r31
		buffersize=14;
		for(uint8_t i = 0; i<5;i++){
			if(i!=2){
    6e50:	83 e0       	ldi	r24, 0x03	; 3
    6e52:	38 16       	cp	r3, r24
    6e54:	61 f0       	breq	.+24     	; 0x6e6e <_Z13uhreinstellenv+0x1ae>
				oled.draw_number16x16(buffer[i],i*numbersmalsize,2*charhighte);
    6e56:	20 e1       	ldi	r18, 0x10	; 16
    6e58:	42 2d       	mov	r20, r2
    6e5a:	f8 01       	movw	r30, r16
    6e5c:	60 81       	ld	r22, Z
    6e5e:	81 e1       	ldi	r24, 0x11	; 17
    6e60:	9a e0       	ldi	r25, 0x0A	; 10
    6e62:	0e 94 4a 0c 	call	0x1894	; 0x1894 <_ZN7Display16draw_number16x16Ehhh>
		buffer[10]=rtc.Monat%10;
		buffer[11]='.';
		buffer[12]=rtc.Jahr/10;
		buffer[13]=rtc.Jahr%10;
		buffersize=14;
		for(uint8_t i = 0; i<5;i++){
    6e66:	f4 e0       	ldi	r31, 0x04	; 4
    6e68:	f3 15       	cp	r31, r3
    6e6a:	68 f7       	brcc	.-38     	; 0x6e46 <_Z13uhreinstellenv+0x186>
    6e6c:	08 c0       	rjmp	.+16     	; 0x6e7e <_Z13uhreinstellenv+0x1be>
			if(i!=2){
				oled.draw_number16x16(buffer[i],i*numbersmalsize,2*charhighte);
			}
			else {
				oled.draw_ASCI(buffer[i],i*numbersmalsize+numbersmalsize/2,2*charhighte+charhighte/2);
    6e6e:	24 e1       	ldi	r18, 0x14	; 20
    6e70:	48 e2       	ldi	r20, 0x28	; 40
    6e72:	6b 81       	ldd	r22, Y+3	; 0x03
    6e74:	81 e1       	ldi	r24, 0x11	; 17
    6e76:	9a e0       	ldi	r25, 0x0A	; 10
    6e78:	0e 94 00 0c 	call	0x1800	; 0x1800 <_ZN7Display9draw_ASCIEhhh>
    6e7c:	e4 cf       	rjmp	.-56     	; 0x6e46 <_Z13uhreinstellenv+0x186>
    6e7e:	8e 01       	movw	r16, r28
    6e80:	09 5f       	subi	r16, 0xF9	; 249
    6e82:	1f 4f       	sbci	r17, 0xFF	; 255
		buffer[10]=rtc.Monat%10;
		buffer[11]='.';
		buffer[12]=rtc.Jahr/10;
		buffer[13]=rtc.Jahr%10;
		buffersize=14;
		for(uint8_t i = 0; i<5;i++){
    6e84:	2f 2c       	mov	r2, r15
    6e86:	0f 2e       	mov	r0, r31
    6e88:	f6 e0       	ldi	r31, 0x06	; 6
    6e8a:	3f 2e       	mov	r3, r31
    6e8c:	f0 2d       	mov	r31, r0
			else {
				oled.draw_ASCI(buffer[i],i*numbersmalsize+numbersmalsize/2,2*charhighte+charhighte/2);
			}
		}
		for(uint8_t i = 6; i<buffersize;i++){
			if(i!=8 && i!=11){
    6e8e:	88 e0       	ldi	r24, 0x08	; 8
    6e90:	38 16       	cp	r3, r24
    6e92:	61 f0       	breq	.+24     	; 0x6eac <_Z13uhreinstellenv+0x1ec>
    6e94:	9b e0       	ldi	r25, 0x0B	; 11
    6e96:	39 16       	cp	r3, r25
    6e98:	49 f0       	breq	.+18     	; 0x6eac <_Z13uhreinstellenv+0x1ec>
				oled.draw_number16x16(buffer[i],i*numbersmalsize-6*numbersmalsize,4*charhighte);
    6e9a:	2e 2d       	mov	r18, r14
    6e9c:	42 2d       	mov	r20, r2
    6e9e:	f8 01       	movw	r30, r16
    6ea0:	60 81       	ld	r22, Z
    6ea2:	81 e1       	ldi	r24, 0x11	; 17
    6ea4:	9a e0       	ldi	r25, 0x0A	; 10
    6ea6:	0e 94 4a 0c 	call	0x1894	; 0x1894 <_ZN7Display16draw_number16x16Ehhh>
    6eaa:	09 c0       	rjmp	.+18     	; 0x6ebe <_Z13uhreinstellenv+0x1fe>
			}
			else {
				oled.draw_ASCI(buffer[i],i*numbersmalsize+numbersmalsize/2-6*numbersmalsize,5*charhighte);
    6eac:	28 e2       	ldi	r18, 0x28	; 40
    6eae:	48 e0       	ldi	r20, 0x08	; 8
    6eb0:	42 0d       	add	r20, r2
    6eb2:	f8 01       	movw	r30, r16
    6eb4:	60 81       	ld	r22, Z
    6eb6:	81 e1       	ldi	r24, 0x11	; 17
    6eb8:	9a e0       	ldi	r25, 0x0A	; 10
    6eba:	0e 94 00 0c 	call	0x1800	; 0x1800 <_ZN7Display9draw_ASCIEhhh>
			}
			else {
				oled.draw_ASCI(buffer[i],i*numbersmalsize+numbersmalsize/2,2*charhighte+charhighte/2);
			}
		}
		for(uint8_t i = 6; i<buffersize;i++){
    6ebe:	33 94       	inc	r3
    6ec0:	0f 5f       	subi	r16, 0xFF	; 255
    6ec2:	1f 4f       	sbci	r17, 0xFF	; 255
    6ec4:	f0 e1       	ldi	r31, 0x10	; 16
    6ec6:	2f 0e       	add	r2, r31
    6ec8:	8e e0       	ldi	r24, 0x0E	; 14
    6eca:	38 12       	cpse	r3, r24
    6ecc:	e0 cf       	rjmp	.-64     	; 0x6e8e <_Z13uhreinstellenv+0x1ce>
			else {
				oled.draw_ASCI(buffer[i],i*numbersmalsize+numbersmalsize/2-6*numbersmalsize,5*charhighte);
			}
		}

		oled.sendFrame();
    6ece:	81 e1       	ldi	r24, 0x11	; 17
    6ed0:	9a e0       	ldi	r25, 0x0A	; 10
    6ed2:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <_ZN7Display9sendFrameEv>
		oled.clearFrame();
    6ed6:	81 e1       	ldi	r24, 0x11	; 17
    6ed8:	9a e0       	ldi	r25, 0x0A	; 10
    6eda:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <_ZN7Display10clearFrameEv>
		switch (pos) {
    6ede:	89 2d       	mov	r24, r9
    6ee0:	90 e0       	ldi	r25, 0x00	; 0
    6ee2:	8a 30       	cpi	r24, 0x0A	; 10
    6ee4:	91 05       	cpc	r25, r1
    6ee6:	08 f0       	brcs	.+2      	; 0x6eea <_Z13uhreinstellenv+0x22a>
    6ee8:	2c c2       	rjmp	.+1112   	; 0x7342 <_Z13uhreinstellenv+0x682>
    6eea:	fc 01       	movw	r30, r24
    6eec:	ef 50       	subi	r30, 0x0F	; 15
    6eee:	ff 4f       	sbci	r31, 0xFF	; 255
    6ef0:	0c 94 ec 45 	jmp	0x8bd8	; 0x8bd8 <__tablejump2__>
			case 0:
			rtc.Stunden=Tastatur.ZahlenausTastatur()*10;
    6ef4:	85 e0       	ldi	r24, 0x05	; 5
    6ef6:	9a e0       	ldi	r25, 0x0A	; 10
    6ef8:	0e 94 2c 24 	call	0x4858	; 0x4858 <_ZN9Interface17ZahlenausTastaturEv>
    6efc:	88 0f       	add	r24, r24
    6efe:	98 2f       	mov	r25, r24
    6f00:	99 0f       	add	r25, r25
    6f02:	99 0f       	add	r25, r25
    6f04:	89 0f       	add	r24, r25
			if(rtc.Stunden>=24){
    6f06:	88 31       	cpi	r24, 0x18	; 24
    6f08:	08 f4       	brcc	.+2      	; 0x6f0c <_Z13uhreinstellenv+0x24c>
    6f0a:	57 c2       	rjmp	.+1198   	; 0x73ba <_Z13uhreinstellenv+0x6fa>
				rtc.Stunden=0;
    6f0c:	f6 01       	movw	r30, r12
    6f0e:	10 8a       	std	Z+16, r1	; 0x10
				pos=-1;
				buffersize=sprintf(buffer,"Stunden falsch");
    6f10:	e0 e3       	ldi	r30, 0x30	; 48
    6f12:	f3 e0       	ldi	r31, 0x03	; 3
    6f14:	d2 01       	movw	r26, r4
    6f16:	87 2d       	mov	r24, r7
    6f18:	01 90       	ld	r0, Z+
    6f1a:	0d 92       	st	X+, r0
    6f1c:	8a 95       	dec	r24
    6f1e:	e1 f7       	brne	.-8      	; 0x6f18 <_Z13uhreinstellenv+0x258>
    6f20:	1f 2d       	mov	r17, r15
				for(uint8_t i = 0; i<buffersize;i++){
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
    6f22:	f5 01       	movw	r30, r10
    6f24:	61 91       	ld	r22, Z+
    6f26:	5f 01       	movw	r10, r30
    6f28:	28 e3       	ldi	r18, 0x38	; 56
    6f2a:	41 2f       	mov	r20, r17
    6f2c:	81 e1       	ldi	r24, 0x11	; 17
    6f2e:	9a e0       	ldi	r25, 0x0A	; 10
    6f30:	0e 94 00 0c 	call	0x1800	; 0x1800 <_ZN7Display9draw_ASCIEhhh>
    6f34:	1a 5f       	subi	r17, 0xFA	; 250
			rtc.Stunden=Tastatur.ZahlenausTastatur()*10;
			if(rtc.Stunden>=24){
				rtc.Stunden=0;
				pos=-1;
				buffersize=sprintf(buffer,"Stunden falsch");
				for(uint8_t i = 0; i<buffersize;i++){
    6f36:	14 35       	cpi	r17, 0x54	; 84
    6f38:	a1 f7       	brne	.-24     	; 0x6f22 <_Z13uhreinstellenv+0x262>
		switch (pos) {
			case 0:
			rtc.Stunden=Tastatur.ZahlenausTastatur()*10;
			if(rtc.Stunden>=24){
				rtc.Stunden=0;
				pos=-1;
    6f3a:	99 24       	eor	r9, r9
    6f3c:	9a 94       	dec	r9
    6f3e:	3f c2       	rjmp	.+1150   	; 0x73be <_Z13uhreinstellenv+0x6fe>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 1:
			rtc.Stunden+=Tastatur.ZahlenausTastatur();
    6f40:	85 e0       	ldi	r24, 0x05	; 5
    6f42:	9a e0       	ldi	r25, 0x0A	; 10
    6f44:	0e 94 2c 24 	call	0x4858	; 0x4858 <_ZN9Interface17ZahlenausTastaturEv>
    6f48:	f6 01       	movw	r30, r12
    6f4a:	20 89       	ldd	r18, Z+16	; 0x10
    6f4c:	90 e0       	ldi	r25, 0x00	; 0
    6f4e:	82 0f       	add	r24, r18
    6f50:	91 1d       	adc	r25, r1
			if(rtc.Stunden>=24){
    6f52:	88 31       	cpi	r24, 0x18	; 24
    6f54:	10 f4       	brcc	.+4      	; 0x6f5a <_Z13uhreinstellenv+0x29a>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 1:
			rtc.Stunden+=Tastatur.ZahlenausTastatur();
    6f56:	80 8b       	std	Z+16, r24	; 0x10
    6f58:	32 c2       	rjmp	.+1124   	; 0x73be <_Z13uhreinstellenv+0x6fe>
			if(rtc.Stunden>=24){
				rtc.Stunden=0;
    6f5a:	f6 01       	movw	r30, r12
    6f5c:	10 8a       	std	Z+16, r1	; 0x10
				pos=-1;
				buffersize=sprintf(buffer,"Stunden falsch");
    6f5e:	e0 e3       	ldi	r30, 0x30	; 48
    6f60:	f3 e0       	ldi	r31, 0x03	; 3
    6f62:	d2 01       	movw	r26, r4
    6f64:	87 2d       	mov	r24, r7
    6f66:	01 90       	ld	r0, Z+
    6f68:	0d 92       	st	X+, r0
    6f6a:	8a 95       	dec	r24
    6f6c:	e1 f7       	brne	.-8      	; 0x6f66 <_Z13uhreinstellenv+0x2a6>
    6f6e:	1f 2d       	mov	r17, r15
				for(uint8_t i = 0; i<buffersize;i++){
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
    6f70:	f5 01       	movw	r30, r10
    6f72:	61 91       	ld	r22, Z+
    6f74:	5f 01       	movw	r10, r30
    6f76:	28 e3       	ldi	r18, 0x38	; 56
    6f78:	41 2f       	mov	r20, r17
    6f7a:	81 e1       	ldi	r24, 0x11	; 17
    6f7c:	9a e0       	ldi	r25, 0x0A	; 10
    6f7e:	0e 94 00 0c 	call	0x1800	; 0x1800 <_ZN7Display9draw_ASCIEhhh>
    6f82:	1a 5f       	subi	r17, 0xFA	; 250
			rtc.Stunden+=Tastatur.ZahlenausTastatur();
			if(rtc.Stunden>=24){
				rtc.Stunden=0;
				pos=-1;
				buffersize=sprintf(buffer,"Stunden falsch");
				for(uint8_t i = 0; i<buffersize;i++){
    6f84:	14 35       	cpi	r17, 0x54	; 84
    6f86:	a1 f7       	brne	.-24     	; 0x6f70 <_Z13uhreinstellenv+0x2b0>
			break;
			case 1:
			rtc.Stunden+=Tastatur.ZahlenausTastatur();
			if(rtc.Stunden>=24){
				rtc.Stunden=0;
				pos=-1;
    6f88:	99 24       	eor	r9, r9
    6f8a:	9a 94       	dec	r9
    6f8c:	18 c2       	rjmp	.+1072   	; 0x73be <_Z13uhreinstellenv+0x6fe>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 2:
			rtc.Minuten=Tastatur.ZahlenausTastatur()*10;
    6f8e:	85 e0       	ldi	r24, 0x05	; 5
    6f90:	9a e0       	ldi	r25, 0x0A	; 10
    6f92:	0e 94 2c 24 	call	0x4858	; 0x4858 <_ZN9Interface17ZahlenausTastaturEv>
    6f96:	88 0f       	add	r24, r24
    6f98:	98 2f       	mov	r25, r24
    6f9a:	99 0f       	add	r25, r25
    6f9c:	99 0f       	add	r25, r25
    6f9e:	89 0f       	add	r24, r25
			if(rtc.Minuten>=60){
    6fa0:	8c 33       	cpi	r24, 0x3C	; 60
    6fa2:	18 f4       	brcc	.+6      	; 0x6faa <_Z13uhreinstellenv+0x2ea>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 2:
			rtc.Minuten=Tastatur.ZahlenausTastatur()*10;
    6fa4:	f6 01       	movw	r30, r12
    6fa6:	81 8b       	std	Z+17, r24	; 0x11
    6fa8:	0a c2       	rjmp	.+1044   	; 0x73be <_Z13uhreinstellenv+0x6fe>
			if(rtc.Minuten>=60){
				rtc.Minuten=0;
    6faa:	f6 01       	movw	r30, r12
    6fac:	11 8a       	std	Z+17, r1	; 0x11
				pos=1;
				buffersize=sprintf(buffer,"Minuten falsch");
    6fae:	ef e3       	ldi	r30, 0x3F	; 63
    6fb0:	f3 e0       	ldi	r31, 0x03	; 3
    6fb2:	d2 01       	movw	r26, r4
    6fb4:	87 2d       	mov	r24, r7
    6fb6:	01 90       	ld	r0, Z+
    6fb8:	0d 92       	st	X+, r0
    6fba:	8a 95       	dec	r24
    6fbc:	e1 f7       	brne	.-8      	; 0x6fb6 <_Z13uhreinstellenv+0x2f6>
    6fbe:	1f 2d       	mov	r17, r15
				for(uint8_t i = 0; i<buffersize;i++){
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
    6fc0:	f5 01       	movw	r30, r10
    6fc2:	61 91       	ld	r22, Z+
    6fc4:	5f 01       	movw	r10, r30
    6fc6:	28 e3       	ldi	r18, 0x38	; 56
    6fc8:	41 2f       	mov	r20, r17
    6fca:	81 e1       	ldi	r24, 0x11	; 17
    6fcc:	9a e0       	ldi	r25, 0x0A	; 10
    6fce:	0e 94 00 0c 	call	0x1800	; 0x1800 <_ZN7Display9draw_ASCIEhhh>
    6fd2:	1a 5f       	subi	r17, 0xFA	; 250
			rtc.Minuten=Tastatur.ZahlenausTastatur()*10;
			if(rtc.Minuten>=60){
				rtc.Minuten=0;
				pos=1;
				buffersize=sprintf(buffer,"Minuten falsch");
				for(uint8_t i = 0; i<buffersize;i++){
    6fd4:	14 35       	cpi	r17, 0x54	; 84
    6fd6:	a1 f7       	brne	.-24     	; 0x6fc0 <_Z13uhreinstellenv+0x300>
			break;
			case 2:
			rtc.Minuten=Tastatur.ZahlenausTastatur()*10;
			if(rtc.Minuten>=60){
				rtc.Minuten=0;
				pos=1;
    6fd8:	99 24       	eor	r9, r9
    6fda:	93 94       	inc	r9
    6fdc:	f0 c1       	rjmp	.+992    	; 0x73be <_Z13uhreinstellenv+0x6fe>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 3:
			rtc.Minuten+=Tastatur.ZahlenausTastatur();
    6fde:	85 e0       	ldi	r24, 0x05	; 5
    6fe0:	9a e0       	ldi	r25, 0x0A	; 10
    6fe2:	0e 94 2c 24 	call	0x4858	; 0x4858 <_ZN9Interface17ZahlenausTastaturEv>
    6fe6:	f6 01       	movw	r30, r12
    6fe8:	21 89       	ldd	r18, Z+17	; 0x11
    6fea:	90 e0       	ldi	r25, 0x00	; 0
    6fec:	82 0f       	add	r24, r18
    6fee:	91 1d       	adc	r25, r1
			if(rtc.Minuten>=60){
    6ff0:	8c 33       	cpi	r24, 0x3C	; 60
    6ff2:	10 f4       	brcc	.+4      	; 0x6ff8 <_Z13uhreinstellenv+0x338>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 3:
			rtc.Minuten+=Tastatur.ZahlenausTastatur();
    6ff4:	81 8b       	std	Z+17, r24	; 0x11
    6ff6:	e3 c1       	rjmp	.+966    	; 0x73be <_Z13uhreinstellenv+0x6fe>
			if(rtc.Minuten>=60){
				rtc.Minuten=0;
    6ff8:	f6 01       	movw	r30, r12
    6ffa:	11 8a       	std	Z+17, r1	; 0x11
				pos=1;
				buffersize=sprintf(buffer,"Minuten falsch");
    6ffc:	ef e3       	ldi	r30, 0x3F	; 63
    6ffe:	f3 e0       	ldi	r31, 0x03	; 3
    7000:	d2 01       	movw	r26, r4
    7002:	87 2d       	mov	r24, r7
    7004:	01 90       	ld	r0, Z+
    7006:	0d 92       	st	X+, r0
    7008:	8a 95       	dec	r24
    700a:	e1 f7       	brne	.-8      	; 0x7004 <_Z13uhreinstellenv+0x344>
    700c:	1f 2d       	mov	r17, r15
				for(uint8_t i = 0; i<buffersize;i++){
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
    700e:	f5 01       	movw	r30, r10
    7010:	61 91       	ld	r22, Z+
    7012:	5f 01       	movw	r10, r30
    7014:	28 e3       	ldi	r18, 0x38	; 56
    7016:	41 2f       	mov	r20, r17
    7018:	81 e1       	ldi	r24, 0x11	; 17
    701a:	9a e0       	ldi	r25, 0x0A	; 10
    701c:	0e 94 00 0c 	call	0x1800	; 0x1800 <_ZN7Display9draw_ASCIEhhh>
    7020:	1a 5f       	subi	r17, 0xFA	; 250
			rtc.Minuten+=Tastatur.ZahlenausTastatur();
			if(rtc.Minuten>=60){
				rtc.Minuten=0;
				pos=1;
				buffersize=sprintf(buffer,"Minuten falsch");
				for(uint8_t i = 0; i<buffersize;i++){
    7022:	14 35       	cpi	r17, 0x54	; 84
    7024:	a1 f7       	brne	.-24     	; 0x700e <_Z13uhreinstellenv+0x34e>
			break;
			case 3:
			rtc.Minuten+=Tastatur.ZahlenausTastatur();
			if(rtc.Minuten>=60){
				rtc.Minuten=0;
				pos=1;
    7026:	99 24       	eor	r9, r9
    7028:	93 94       	inc	r9
    702a:	c9 c1       	rjmp	.+914    	; 0x73be <_Z13uhreinstellenv+0x6fe>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 4:
			rtc.Tag=Tastatur.ZahlenausTastatur()*10;
    702c:	85 e0       	ldi	r24, 0x05	; 5
    702e:	9a e0       	ldi	r25, 0x0A	; 10
    7030:	0e 94 2c 24 	call	0x4858	; 0x4858 <_ZN9Interface17ZahlenausTastaturEv>
    7034:	88 0f       	add	r24, r24
    7036:	98 2f       	mov	r25, r24
    7038:	99 0f       	add	r25, r25
    703a:	99 0f       	add	r25, r25
    703c:	89 0f       	add	r24, r25
			if(rtc.Tag>=32){
    703e:	80 32       	cpi	r24, 0x20	; 32
    7040:	18 f4       	brcc	.+6      	; 0x7048 <_Z13uhreinstellenv+0x388>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 4:
			rtc.Tag=Tastatur.ZahlenausTastatur()*10;
    7042:	f6 01       	movw	r30, r12
    7044:	84 8b       	std	Z+20, r24	; 0x14
    7046:	bb c1       	rjmp	.+886    	; 0x73be <_Z13uhreinstellenv+0x6fe>
			if(rtc.Tag>=32){
				rtc.Tag=0;
    7048:	f6 01       	movw	r30, r12
    704a:	14 8a       	std	Z+20, r1	; 0x14
				pos=3;
				buffersize=sprintf(buffer,"Tag falsch");
    704c:	8b e0       	ldi	r24, 0x0B	; 11
    704e:	ee e4       	ldi	r30, 0x4E	; 78
    7050:	f3 e0       	ldi	r31, 0x03	; 3
    7052:	d2 01       	movw	r26, r4
    7054:	01 90       	ld	r0, Z+
    7056:	0d 92       	st	X+, r0
    7058:	8a 95       	dec	r24
    705a:	e1 f7       	brne	.-8      	; 0x7054 <_Z13uhreinstellenv+0x394>
    705c:	1f 2d       	mov	r17, r15
				for(uint8_t i = 0; i<buffersize;i++){
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
    705e:	f5 01       	movw	r30, r10
    7060:	61 91       	ld	r22, Z+
    7062:	5f 01       	movw	r10, r30
    7064:	28 e3       	ldi	r18, 0x38	; 56
    7066:	41 2f       	mov	r20, r17
    7068:	81 e1       	ldi	r24, 0x11	; 17
    706a:	9a e0       	ldi	r25, 0x0A	; 10
    706c:	0e 94 00 0c 	call	0x1800	; 0x1800 <_ZN7Display9draw_ASCIEhhh>
    7070:	1a 5f       	subi	r17, 0xFA	; 250
			rtc.Tag=Tastatur.ZahlenausTastatur()*10;
			if(rtc.Tag>=32){
				rtc.Tag=0;
				pos=3;
				buffersize=sprintf(buffer,"Tag falsch");
				for(uint8_t i = 0; i<buffersize;i++){
    7072:	1c 33       	cpi	r17, 0x3C	; 60
    7074:	a1 f7       	brne	.-24     	; 0x705e <_Z13uhreinstellenv+0x39e>
			break;
			case 4:
			rtc.Tag=Tastatur.ZahlenausTastatur()*10;
			if(rtc.Tag>=32){
				rtc.Tag=0;
				pos=3;
    7076:	0f 2e       	mov	r0, r31
    7078:	f3 e0       	ldi	r31, 0x03	; 3
    707a:	9f 2e       	mov	r9, r31
    707c:	f0 2d       	mov	r31, r0
    707e:	9f c1       	rjmp	.+830    	; 0x73be <_Z13uhreinstellenv+0x6fe>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 5:
			rtc.Tag+=Tastatur.ZahlenausTastatur();
    7080:	85 e0       	ldi	r24, 0x05	; 5
    7082:	9a e0       	ldi	r25, 0x0A	; 10
    7084:	0e 94 2c 24 	call	0x4858	; 0x4858 <_ZN9Interface17ZahlenausTastaturEv>
    7088:	f6 01       	movw	r30, r12
    708a:	24 89       	ldd	r18, Z+20	; 0x14
    708c:	90 e0       	ldi	r25, 0x00	; 0
    708e:	82 0f       	add	r24, r18
    7090:	91 1d       	adc	r25, r1
			if(rtc.Tag>=32){
    7092:	80 32       	cpi	r24, 0x20	; 32
    7094:	10 f4       	brcc	.+4      	; 0x709a <_Z13uhreinstellenv+0x3da>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 5:
			rtc.Tag+=Tastatur.ZahlenausTastatur();
    7096:	84 8b       	std	Z+20, r24	; 0x14
    7098:	92 c1       	rjmp	.+804    	; 0x73be <_Z13uhreinstellenv+0x6fe>
			if(rtc.Tag>=32){
				rtc.Tag=0;
    709a:	f6 01       	movw	r30, r12
    709c:	14 8a       	std	Z+20, r1	; 0x14
				pos=3;
				buffersize=sprintf(buffer,"Tag falsch");
    709e:	8b e0       	ldi	r24, 0x0B	; 11
    70a0:	ee e4       	ldi	r30, 0x4E	; 78
    70a2:	f3 e0       	ldi	r31, 0x03	; 3
    70a4:	d2 01       	movw	r26, r4
    70a6:	01 90       	ld	r0, Z+
    70a8:	0d 92       	st	X+, r0
    70aa:	8a 95       	dec	r24
    70ac:	e1 f7       	brne	.-8      	; 0x70a6 <_Z13uhreinstellenv+0x3e6>
    70ae:	1f 2d       	mov	r17, r15
				for(uint8_t i = 0; i<buffersize;i++){
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
    70b0:	f5 01       	movw	r30, r10
    70b2:	61 91       	ld	r22, Z+
    70b4:	5f 01       	movw	r10, r30
    70b6:	28 e3       	ldi	r18, 0x38	; 56
    70b8:	41 2f       	mov	r20, r17
    70ba:	81 e1       	ldi	r24, 0x11	; 17
    70bc:	9a e0       	ldi	r25, 0x0A	; 10
    70be:	0e 94 00 0c 	call	0x1800	; 0x1800 <_ZN7Display9draw_ASCIEhhh>
    70c2:	1a 5f       	subi	r17, 0xFA	; 250
			rtc.Tag+=Tastatur.ZahlenausTastatur();
			if(rtc.Tag>=32){
				rtc.Tag=0;
				pos=3;
				buffersize=sprintf(buffer,"Tag falsch");
				for(uint8_t i = 0; i<buffersize;i++){
    70c4:	1c 33       	cpi	r17, 0x3C	; 60
    70c6:	a1 f7       	brne	.-24     	; 0x70b0 <_Z13uhreinstellenv+0x3f0>
			break;
			case 5:
			rtc.Tag+=Tastatur.ZahlenausTastatur();
			if(rtc.Tag>=32){
				rtc.Tag=0;
				pos=3;
    70c8:	0f 2e       	mov	r0, r31
    70ca:	f3 e0       	ldi	r31, 0x03	; 3
    70cc:	9f 2e       	mov	r9, r31
    70ce:	f0 2d       	mov	r31, r0
    70d0:	76 c1       	rjmp	.+748    	; 0x73be <_Z13uhreinstellenv+0x6fe>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 6:
			rtc.Monat=Tastatur.ZahlenausTastatur()*10;
    70d2:	85 e0       	ldi	r24, 0x05	; 5
    70d4:	9a e0       	ldi	r25, 0x0A	; 10
    70d6:	0e 94 2c 24 	call	0x4858	; 0x4858 <_ZN9Interface17ZahlenausTastaturEv>
    70da:	88 0f       	add	r24, r24
    70dc:	98 2f       	mov	r25, r24
    70de:	99 0f       	add	r25, r25
    70e0:	99 0f       	add	r25, r25
    70e2:	89 0f       	add	r24, r25
			if(rtc.Monat>=13){
    70e4:	8d 30       	cpi	r24, 0x0D	; 13
    70e6:	18 f4       	brcc	.+6      	; 0x70ee <_Z13uhreinstellenv+0x42e>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 6:
			rtc.Monat=Tastatur.ZahlenausTastatur()*10;
    70e8:	f6 01       	movw	r30, r12
    70ea:	86 8b       	std	Z+22, r24	; 0x16
    70ec:	68 c1       	rjmp	.+720    	; 0x73be <_Z13uhreinstellenv+0x6fe>
			if(rtc.Monat>=13){
				rtc.Monat=0;
    70ee:	f6 01       	movw	r30, r12
    70f0:	16 8a       	std	Z+22, r1	; 0x16
				pos=5;
				buffersize=sprintf(buffer,"Monat falsch");
    70f2:	8d e0       	ldi	r24, 0x0D	; 13
    70f4:	e9 e5       	ldi	r30, 0x59	; 89
    70f6:	f3 e0       	ldi	r31, 0x03	; 3
    70f8:	d2 01       	movw	r26, r4
    70fa:	01 90       	ld	r0, Z+
    70fc:	0d 92       	st	X+, r0
    70fe:	8a 95       	dec	r24
    7100:	e1 f7       	brne	.-8      	; 0x70fa <_Z13uhreinstellenv+0x43a>
    7102:	1f 2d       	mov	r17, r15
				for(uint8_t i = 0; i<buffersize;i++){
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
    7104:	f5 01       	movw	r30, r10
    7106:	61 91       	ld	r22, Z+
    7108:	5f 01       	movw	r10, r30
    710a:	28 e3       	ldi	r18, 0x38	; 56
    710c:	41 2f       	mov	r20, r17
    710e:	81 e1       	ldi	r24, 0x11	; 17
    7110:	9a e0       	ldi	r25, 0x0A	; 10
    7112:	0e 94 00 0c 	call	0x1800	; 0x1800 <_ZN7Display9draw_ASCIEhhh>
    7116:	1a 5f       	subi	r17, 0xFA	; 250
			rtc.Monat=Tastatur.ZahlenausTastatur()*10;
			if(rtc.Monat>=13){
				rtc.Monat=0;
				pos=5;
				buffersize=sprintf(buffer,"Monat falsch");
				for(uint8_t i = 0; i<buffersize;i++){
    7118:	18 34       	cpi	r17, 0x48	; 72
    711a:	a1 f7       	brne	.-24     	; 0x7104 <_Z13uhreinstellenv+0x444>
			break;
			case 6:
			rtc.Monat=Tastatur.ZahlenausTastatur()*10;
			if(rtc.Monat>=13){
				rtc.Monat=0;
				pos=5;
    711c:	0f 2e       	mov	r0, r31
    711e:	f5 e0       	ldi	r31, 0x05	; 5
    7120:	9f 2e       	mov	r9, r31
    7122:	f0 2d       	mov	r31, r0
    7124:	4c c1       	rjmp	.+664    	; 0x73be <_Z13uhreinstellenv+0x6fe>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 7:
			rtc.Monat+=Tastatur.ZahlenausTastatur();
    7126:	85 e0       	ldi	r24, 0x05	; 5
    7128:	9a e0       	ldi	r25, 0x0A	; 10
    712a:	0e 94 2c 24 	call	0x4858	; 0x4858 <_ZN9Interface17ZahlenausTastaturEv>
    712e:	f6 01       	movw	r30, r12
    7130:	26 89       	ldd	r18, Z+22	; 0x16
    7132:	90 e0       	ldi	r25, 0x00	; 0
    7134:	82 0f       	add	r24, r18
    7136:	91 1d       	adc	r25, r1
			if(rtc.Monat>=13){
    7138:	8d 30       	cpi	r24, 0x0D	; 13
    713a:	10 f4       	brcc	.+4      	; 0x7140 <_Z13uhreinstellenv+0x480>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 7:
			rtc.Monat+=Tastatur.ZahlenausTastatur();
    713c:	86 8b       	std	Z+22, r24	; 0x16
    713e:	1d c0       	rjmp	.+58     	; 0x717a <_Z13uhreinstellenv+0x4ba>
			if(rtc.Monat>=13){
				rtc.Monat=0;
    7140:	f6 01       	movw	r30, r12
    7142:	16 8a       	std	Z+22, r1	; 0x16
				pos=5;
				buffersize=sprintf(buffer,"Monat falsch");
    7144:	8d e0       	ldi	r24, 0x0D	; 13
    7146:	e9 e5       	ldi	r30, 0x59	; 89
    7148:	f3 e0       	ldi	r31, 0x03	; 3
    714a:	d2 01       	movw	r26, r4
    714c:	01 90       	ld	r0, Z+
    714e:	0d 92       	st	X+, r0
    7150:	8a 95       	dec	r24
    7152:	e1 f7       	brne	.-8      	; 0x714c <_Z13uhreinstellenv+0x48c>
    7154:	2d 88       	ldd	r2, Y+21	; 0x15
    7156:	3e 88       	ldd	r3, Y+22	; 0x16
    7158:	1f 2d       	mov	r17, r15
				for(uint8_t i = 0; i<buffersize;i++){
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
    715a:	f1 01       	movw	r30, r2
    715c:	61 91       	ld	r22, Z+
    715e:	1f 01       	movw	r2, r30
    7160:	28 e3       	ldi	r18, 0x38	; 56
    7162:	41 2f       	mov	r20, r17
    7164:	81 e1       	ldi	r24, 0x11	; 17
    7166:	9a e0       	ldi	r25, 0x0A	; 10
    7168:	0e 94 00 0c 	call	0x1800	; 0x1800 <_ZN7Display9draw_ASCIEhhh>
    716c:	1a 5f       	subi	r17, 0xFA	; 250
			rtc.Monat+=Tastatur.ZahlenausTastatur();
			if(rtc.Monat>=13){
				rtc.Monat=0;
				pos=5;
				buffersize=sprintf(buffer,"Monat falsch");
				for(uint8_t i = 0; i<buffersize;i++){
    716e:	18 34       	cpi	r17, 0x48	; 72
    7170:	a1 f7       	brne	.-24     	; 0x715a <_Z13uhreinstellenv+0x49a>
			break;
			case 7:
			rtc.Monat+=Tastatur.ZahlenausTastatur();
			if(rtc.Monat>=13){
				rtc.Monat=0;
				pos=5;
    7172:	0f 2e       	mov	r0, r31
    7174:	f5 e0       	ldi	r31, 0x05	; 5
    7176:	9f 2e       	mov	r9, r31
    7178:	f0 2d       	mov	r31, r0
				buffersize=sprintf(buffer,"Monat falsch");
				for(uint8_t i = 0; i<buffersize;i++){
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			if(rtc.Monat==4||rtc.Monat==6||rtc.Monat==9||rtc.Monat==11){
    717a:	f6 01       	movw	r30, r12
    717c:	96 89       	ldd	r25, Z+22	; 0x16
    717e:	89 2f       	mov	r24, r25
    7180:	8d 7f       	andi	r24, 0xFD	; 253
    7182:	84 30       	cpi	r24, 0x04	; 4
    7184:	11 f0       	breq	.+4      	; 0x718a <_Z13uhreinstellenv+0x4ca>
    7186:	89 30       	cpi	r24, 0x09	; 9
    7188:	09 f5       	brne	.+66     	; 0x71cc <_Z13uhreinstellenv+0x50c>
				if(rtc.Tag>=31){
    718a:	f6 01       	movw	r30, r12
    718c:	84 89       	ldd	r24, Z+20	; 0x14
    718e:	8f 31       	cpi	r24, 0x1F	; 31
    7190:	08 f4       	brcc	.+2      	; 0x7194 <_Z13uhreinstellenv+0x4d4>
    7192:	d8 c0       	rjmp	.+432    	; 0x7344 <_Z13uhreinstellenv+0x684>
					rtc.Tag=0;
    7194:	14 8a       	std	Z+20, r1	; 0x14
					rtc.Monat=0;
    7196:	16 8a       	std	Z+22, r1	; 0x16
					pos=3;
					buffersize=sprintf(buffer,"Tag falsch");
    7198:	8b e0       	ldi	r24, 0x0B	; 11
    719a:	ee e4       	ldi	r30, 0x4E	; 78
    719c:	f3 e0       	ldi	r31, 0x03	; 3
    719e:	d2 01       	movw	r26, r4
    71a0:	01 90       	ld	r0, Z+
    71a2:	0d 92       	st	X+, r0
    71a4:	8a 95       	dec	r24
    71a6:	e1 f7       	brne	.-8      	; 0x71a0 <_Z13uhreinstellenv+0x4e0>
    71a8:	1f 2d       	mov	r17, r15
					for(uint8_t i = 0; i<buffersize;i++){
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
    71aa:	f5 01       	movw	r30, r10
    71ac:	61 91       	ld	r22, Z+
    71ae:	5f 01       	movw	r10, r30
    71b0:	28 e3       	ldi	r18, 0x38	; 56
    71b2:	41 2f       	mov	r20, r17
    71b4:	81 e1       	ldi	r24, 0x11	; 17
    71b6:	9a e0       	ldi	r25, 0x0A	; 10
    71b8:	0e 94 00 0c 	call	0x1800	; 0x1800 <_ZN7Display9draw_ASCIEhhh>
    71bc:	1a 5f       	subi	r17, 0xFA	; 250
				if(rtc.Tag>=31){
					rtc.Tag=0;
					rtc.Monat=0;
					pos=3;
					buffersize=sprintf(buffer,"Tag falsch");
					for(uint8_t i = 0; i<buffersize;i++){
    71be:	1c 33       	cpi	r17, 0x3C	; 60
    71c0:	a1 f7       	brne	.-24     	; 0x71aa <_Z13uhreinstellenv+0x4ea>
			}
			if(rtc.Monat==4||rtc.Monat==6||rtc.Monat==9||rtc.Monat==11){
				if(rtc.Tag>=31){
					rtc.Tag=0;
					rtc.Monat=0;
					pos=3;
    71c2:	0f 2e       	mov	r0, r31
    71c4:	f3 e0       	ldi	r31, 0x03	; 3
    71c6:	9f 2e       	mov	r9, r31
    71c8:	f0 2d       	mov	r31, r0
    71ca:	f9 c0       	rjmp	.+498    	; 0x73be <_Z13uhreinstellenv+0x6fe>
					for(uint8_t i = 0; i<buffersize;i++){
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
			}
			else if(rtc.Monat==2){
    71cc:	92 30       	cpi	r25, 0x02	; 2
    71ce:	09 f0       	breq	.+2      	; 0x71d2 <_Z13uhreinstellenv+0x512>
    71d0:	b9 c0       	rjmp	.+370    	; 0x7344 <_Z13uhreinstellenv+0x684>
				if(rtc.Tag>=30){
    71d2:	f6 01       	movw	r30, r12
    71d4:	84 89       	ldd	r24, Z+20	; 0x14
    71d6:	8e 31       	cpi	r24, 0x1E	; 30
    71d8:	08 f4       	brcc	.+2      	; 0x71dc <_Z13uhreinstellenv+0x51c>
    71da:	b4 c0       	rjmp	.+360    	; 0x7344 <_Z13uhreinstellenv+0x684>
					rtc.Tag=0;
    71dc:	14 8a       	std	Z+20, r1	; 0x14
					rtc.Monat=0;
    71de:	16 8a       	std	Z+22, r1	; 0x16
					pos=3;
					buffersize=sprintf(buffer,"Tag falsch");
    71e0:	8b e0       	ldi	r24, 0x0B	; 11
    71e2:	ee e4       	ldi	r30, 0x4E	; 78
    71e4:	f3 e0       	ldi	r31, 0x03	; 3
    71e6:	d2 01       	movw	r26, r4
    71e8:	01 90       	ld	r0, Z+
    71ea:	0d 92       	st	X+, r0
    71ec:	8a 95       	dec	r24
    71ee:	e1 f7       	brne	.-8      	; 0x71e8 <_Z13uhreinstellenv+0x528>
    71f0:	1f 2d       	mov	r17, r15
					for(uint8_t i = 0; i<buffersize;i++){
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
    71f2:	f5 01       	movw	r30, r10
    71f4:	61 91       	ld	r22, Z+
    71f6:	5f 01       	movw	r10, r30
    71f8:	28 e3       	ldi	r18, 0x38	; 56
    71fa:	41 2f       	mov	r20, r17
    71fc:	81 e1       	ldi	r24, 0x11	; 17
    71fe:	9a e0       	ldi	r25, 0x0A	; 10
    7200:	0e 94 00 0c 	call	0x1800	; 0x1800 <_ZN7Display9draw_ASCIEhhh>
    7204:	1a 5f       	subi	r17, 0xFA	; 250
				if(rtc.Tag>=30){
					rtc.Tag=0;
					rtc.Monat=0;
					pos=3;
					buffersize=sprintf(buffer,"Tag falsch");
					for(uint8_t i = 0; i<buffersize;i++){
    7206:	1c 33       	cpi	r17, 0x3C	; 60
    7208:	a1 f7       	brne	.-24     	; 0x71f2 <_Z13uhreinstellenv+0x532>
			}
			else if(rtc.Monat==2){
				if(rtc.Tag>=30){
					rtc.Tag=0;
					rtc.Monat=0;
					pos=3;
    720a:	0f 2e       	mov	r0, r31
    720c:	f3 e0       	ldi	r31, 0x03	; 3
    720e:	9f 2e       	mov	r9, r31
    7210:	f0 2d       	mov	r31, r0
    7212:	d5 c0       	rjmp	.+426    	; 0x73be <_Z13uhreinstellenv+0x6fe>
					}
				}
			}
			break;
			case 8:
			rtc.Jahr=Tastatur.ZahlenausTastatur()*10;
    7214:	85 e0       	ldi	r24, 0x05	; 5
    7216:	9a e0       	ldi	r25, 0x0A	; 10
    7218:	0e 94 2c 24 	call	0x4858	; 0x4858 <_ZN9Interface17ZahlenausTastaturEv>
    721c:	88 0f       	add	r24, r24
    721e:	98 2f       	mov	r25, r24
    7220:	99 0f       	add	r25, r25
    7222:	99 0f       	add	r25, r25
    7224:	89 0f       	add	r24, r25
			if(rtc.Jahr>=50){
    7226:	82 33       	cpi	r24, 0x32	; 50
    7228:	18 f4       	brcc	.+6      	; 0x7230 <_Z13uhreinstellenv+0x570>
					}
				}
			}
			break;
			case 8:
			rtc.Jahr=Tastatur.ZahlenausTastatur()*10;
    722a:	f6 01       	movw	r30, r12
    722c:	87 8b       	std	Z+23, r24	; 0x17
    722e:	c7 c0       	rjmp	.+398    	; 0x73be <_Z13uhreinstellenv+0x6fe>
			if(rtc.Jahr>=50){
				rtc.Jahr=0;
    7230:	f6 01       	movw	r30, r12
    7232:	17 8a       	std	Z+23, r1	; 0x17
				pos=7;
				buffersize=sprintf(buffer,"Jahr falsch");
    7234:	8c e0       	ldi	r24, 0x0C	; 12
    7236:	e6 e6       	ldi	r30, 0x66	; 102
    7238:	f3 e0       	ldi	r31, 0x03	; 3
    723a:	d2 01       	movw	r26, r4
    723c:	01 90       	ld	r0, Z+
    723e:	0d 92       	st	X+, r0
    7240:	8a 95       	dec	r24
    7242:	e1 f7       	brne	.-8      	; 0x723c <_Z13uhreinstellenv+0x57c>
    7244:	1f 2d       	mov	r17, r15
				for(uint8_t i = 0; i<buffersize;i++){
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
    7246:	f5 01       	movw	r30, r10
    7248:	61 91       	ld	r22, Z+
    724a:	5f 01       	movw	r10, r30
    724c:	28 e3       	ldi	r18, 0x38	; 56
    724e:	41 2f       	mov	r20, r17
    7250:	81 e1       	ldi	r24, 0x11	; 17
    7252:	9a e0       	ldi	r25, 0x0A	; 10
    7254:	0e 94 00 0c 	call	0x1800	; 0x1800 <_ZN7Display9draw_ASCIEhhh>
    7258:	1a 5f       	subi	r17, 0xFA	; 250
			rtc.Jahr=Tastatur.ZahlenausTastatur()*10;
			if(rtc.Jahr>=50){
				rtc.Jahr=0;
				pos=7;
				buffersize=sprintf(buffer,"Jahr falsch");
				for(uint8_t i = 0; i<buffersize;i++){
    725a:	12 34       	cpi	r17, 0x42	; 66
    725c:	a1 f7       	brne	.-24     	; 0x7246 <_Z13uhreinstellenv+0x586>
			break;
			case 8:
			rtc.Jahr=Tastatur.ZahlenausTastatur()*10;
			if(rtc.Jahr>=50){
				rtc.Jahr=0;
				pos=7;
    725e:	0f 2e       	mov	r0, r31
    7260:	f7 e0       	ldi	r31, 0x07	; 7
    7262:	9f 2e       	mov	r9, r31
    7264:	f0 2d       	mov	r31, r0
    7266:	ab c0       	rjmp	.+342    	; 0x73be <_Z13uhreinstellenv+0x6fe>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 9:
			rtc.Jahr+=Tastatur.ZahlenausTastatur();
    7268:	85 e0       	ldi	r24, 0x05	; 5
    726a:	9a e0       	ldi	r25, 0x0A	; 10
    726c:	0e 94 2c 24 	call	0x4858	; 0x4858 <_ZN9Interface17ZahlenausTastaturEv>
    7270:	f6 01       	movw	r30, r12
    7272:	27 89       	ldd	r18, Z+23	; 0x17
    7274:	90 e0       	ldi	r25, 0x00	; 0
    7276:	82 0f       	add	r24, r18
    7278:	91 1d       	adc	r25, r1
			if(rtc.Jahr>=50){
    727a:	82 33       	cpi	r24, 0x32	; 50
    727c:	08 f4       	brcc	.+2      	; 0x7280 <_Z13uhreinstellenv+0x5c0>
    727e:	96 c0       	rjmp	.+300    	; 0x73ac <_Z13uhreinstellenv+0x6ec>
				rtc.Jahr=0;
    7280:	17 8a       	std	Z+23, r1	; 0x17
				pos=7;
				buffersize=sprintf(buffer,"Jahr falsch");
    7282:	8c e0       	ldi	r24, 0x0C	; 12
    7284:	e6 e6       	ldi	r30, 0x66	; 102
    7286:	f3 e0       	ldi	r31, 0x03	; 3
    7288:	d2 01       	movw	r26, r4
    728a:	01 90       	ld	r0, Z+
    728c:	0d 92       	st	X+, r0
    728e:	8a 95       	dec	r24
    7290:	e1 f7       	brne	.-8      	; 0x728a <_Z13uhreinstellenv+0x5ca>
    7292:	2d 88       	ldd	r2, Y+21	; 0x15
    7294:	3e 88       	ldd	r3, Y+22	; 0x16
    7296:	1f 2d       	mov	r17, r15
				for(uint8_t i = 0; i<buffersize;i++){
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
    7298:	f1 01       	movw	r30, r2
    729a:	61 91       	ld	r22, Z+
    729c:	1f 01       	movw	r2, r30
    729e:	28 e3       	ldi	r18, 0x38	; 56
    72a0:	41 2f       	mov	r20, r17
    72a2:	81 e1       	ldi	r24, 0x11	; 17
    72a4:	9a e0       	ldi	r25, 0x0A	; 10
    72a6:	0e 94 00 0c 	call	0x1800	; 0x1800 <_ZN7Display9draw_ASCIEhhh>
    72aa:	1a 5f       	subi	r17, 0xFA	; 250
			rtc.Jahr+=Tastatur.ZahlenausTastatur();
			if(rtc.Jahr>=50){
				rtc.Jahr=0;
				pos=7;
				buffersize=sprintf(buffer,"Jahr falsch");
				for(uint8_t i = 0; i<buffersize;i++){
    72ac:	12 34       	cpi	r17, 0x42	; 66
    72ae:	a1 f7       	brne	.-24     	; 0x7298 <_Z13uhreinstellenv+0x5d8>
			break;
			case 9:
			rtc.Jahr+=Tastatur.ZahlenausTastatur();
			if(rtc.Jahr>=50){
				rtc.Jahr=0;
				pos=7;
    72b0:	0f 2e       	mov	r0, r31
    72b2:	f7 e0       	ldi	r31, 0x07	; 7
    72b4:	9f 2e       	mov	r9, r31
    72b6:	f0 2d       	mov	r31, r0
    72b8:	7b c0       	rjmp	.+246    	; 0x73b0 <_Z13uhreinstellenv+0x6f0>
				for(uint8_t i = 0; i<buffersize;i++){
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			if(rtc.Monat==2){
				if(rtc.Jahr%4==0){
    72ba:	f6 01       	movw	r30, r12
    72bc:	17 89       	ldd	r17, Z+23	; 0x17
    72be:	13 70       	andi	r17, 0x03	; 3
    72c0:	f9 f4       	brne	.+62     	; 0x7300 <_Z13uhreinstellenv+0x640>
					if (rtc.Tag>=30)
    72c2:	84 89       	ldd	r24, Z+20	; 0x14
    72c4:	8e 31       	cpi	r24, 0x1E	; 30
    72c6:	f0 f1       	brcs	.+124    	; 0x7344 <_Z13uhreinstellenv+0x684>
					{
						rtc.Tag=0;
    72c8:	14 8a       	std	Z+20, r1	; 0x14
						rtc.Monat=0;
    72ca:	16 8a       	std	Z+22, r1	; 0x16
						rtc.Jahr=0;
    72cc:	17 8a       	std	Z+23, r1	; 0x17
						pos=3;
						buffersize=sprintf(buffer,"Tag falsch");
    72ce:	8b e0       	ldi	r24, 0x0B	; 11
    72d0:	ee e4       	ldi	r30, 0x4E	; 78
    72d2:	f3 e0       	ldi	r31, 0x03	; 3
    72d4:	d2 01       	movw	r26, r4
    72d6:	01 90       	ld	r0, Z+
    72d8:	0d 92       	st	X+, r0
    72da:	8a 95       	dec	r24
    72dc:	e1 f7       	brne	.-8      	; 0x72d6 <_Z13uhreinstellenv+0x616>
						for(uint8_t i = 0; i<buffersize;i++){
							oled.draw_ASCI(buffer[i],charsize*i,7*8);
    72de:	f5 01       	movw	r30, r10
    72e0:	61 91       	ld	r22, Z+
    72e2:	5f 01       	movw	r10, r30
    72e4:	28 e3       	ldi	r18, 0x38	; 56
    72e6:	41 2f       	mov	r20, r17
    72e8:	81 e1       	ldi	r24, 0x11	; 17
    72ea:	9a e0       	ldi	r25, 0x0A	; 10
    72ec:	0e 94 00 0c 	call	0x1800	; 0x1800 <_ZN7Display9draw_ASCIEhhh>
    72f0:	1a 5f       	subi	r17, 0xFA	; 250
						rtc.Tag=0;
						rtc.Monat=0;
						rtc.Jahr=0;
						pos=3;
						buffersize=sprintf(buffer,"Tag falsch");
						for(uint8_t i = 0; i<buffersize;i++){
    72f2:	1c 33       	cpi	r17, 0x3C	; 60
    72f4:	a1 f7       	brne	.-24     	; 0x72de <_Z13uhreinstellenv+0x61e>
					if (rtc.Tag>=30)
					{
						rtc.Tag=0;
						rtc.Monat=0;
						rtc.Jahr=0;
						pos=3;
    72f6:	0f 2e       	mov	r0, r31
    72f8:	f3 e0       	ldi	r31, 0x03	; 3
    72fa:	9f 2e       	mov	r9, r31
    72fc:	f0 2d       	mov	r31, r0
    72fe:	5f c0       	rjmp	.+190    	; 0x73be <_Z13uhreinstellenv+0x6fe>
							oled.draw_ASCI(buffer[i],charsize*i,7*8);
						}
					}
				}
				else{
					if(rtc.Tag>=29){
    7300:	f6 01       	movw	r30, r12
    7302:	84 89       	ldd	r24, Z+20	; 0x14
    7304:	8d 31       	cpi	r24, 0x1D	; 29
    7306:	f0 f0       	brcs	.+60     	; 0x7344 <_Z13uhreinstellenv+0x684>
						rtc.Tag=0;
    7308:	14 8a       	std	Z+20, r1	; 0x14
						rtc.Monat=0;
    730a:	16 8a       	std	Z+22, r1	; 0x16
						rtc.Jahr=0;
    730c:	17 8a       	std	Z+23, r1	; 0x17
						pos=3;
						buffersize=sprintf(buffer,"Tag falsch");
    730e:	8b e0       	ldi	r24, 0x0B	; 11
    7310:	ee e4       	ldi	r30, 0x4E	; 78
    7312:	f3 e0       	ldi	r31, 0x03	; 3
    7314:	d2 01       	movw	r26, r4
    7316:	01 90       	ld	r0, Z+
    7318:	0d 92       	st	X+, r0
    731a:	8a 95       	dec	r24
    731c:	e1 f7       	brne	.-8      	; 0x7316 <_Z13uhreinstellenv+0x656>
    731e:	1f 2d       	mov	r17, r15
						for(uint8_t i = 0; i<buffersize;i++){
							oled.draw_ASCI(buffer[i],charsize*i,7*8);
    7320:	f5 01       	movw	r30, r10
    7322:	61 91       	ld	r22, Z+
    7324:	5f 01       	movw	r10, r30
    7326:	28 e3       	ldi	r18, 0x38	; 56
    7328:	41 2f       	mov	r20, r17
    732a:	81 e1       	ldi	r24, 0x11	; 17
    732c:	9a e0       	ldi	r25, 0x0A	; 10
    732e:	0e 94 00 0c 	call	0x1800	; 0x1800 <_ZN7Display9draw_ASCIEhhh>
    7332:	1a 5f       	subi	r17, 0xFA	; 250
						rtc.Tag=0;
						rtc.Monat=0;
						rtc.Jahr=0;
						pos=3;
						buffersize=sprintf(buffer,"Tag falsch");
						for(uint8_t i = 0; i<buffersize;i++){
    7334:	1c 33       	cpi	r17, 0x3C	; 60
    7336:	a1 f7       	brne	.-24     	; 0x7320 <_Z13uhreinstellenv+0x660>
				else{
					if(rtc.Tag>=29){
						rtc.Tag=0;
						rtc.Monat=0;
						rtc.Jahr=0;
						pos=3;
    7338:	0f 2e       	mov	r0, r31
    733a:	f3 e0       	ldi	r31, 0x03	; 3
    733c:	9f 2e       	mov	r9, r31
    733e:	f0 2d       	mov	r31, r0
    7340:	3e c0       	rjmp	.+124    	; 0x73be <_Z13uhreinstellenv+0x6fe>
					}
				}
			}
			break;
			default:
			pos++;
    7342:	93 94       	inc	r9
			break;
		}
		pos++;
    7344:	93 94       	inc	r9
	
	oled.clearFrame();
	char buffer[20];
	uint8_t buffersize;
	uint8_t pos=0;
	while(pos<11){
    7346:	fa e0       	ldi	r31, 0x0A	; 10
    7348:	f9 15       	cp	r31, r9
    734a:	08 f0       	brcs	.+2      	; 0x734e <_Z13uhreinstellenv+0x68e>
    734c:	f6 cc       	rjmp	.-1556   	; 0x6d3a <_Z13uhreinstellenv+0x7a>
			break;
		}
		pos++;
	}
	
	rtc.Sekunden		= 0;
    734e:	02 e1       	ldi	r16, 0x12	; 18
    7350:	1e e0       	ldi	r17, 0x0E	; 14
    7352:	f8 01       	movw	r30, r16
    7354:	12 8a       	std	Z+18, r1	; 0x12
	rtc.HundSekunden	= 0;
    7356:	13 8a       	std	Z+19, r1	; 0x13
	//speichern der neuen Zeit im EEPROM
	EEPROM_Write(EEMINUTEN,rtc.Minuten);
    7358:	61 89       	ldd	r22, Z+17	; 0x11
    735a:	80 e0       	ldi	r24, 0x00	; 0
    735c:	90 e0       	ldi	r25, 0x00	; 0
    735e:	0e 94 da 2a 	call	0x55b4	; 0x55b4 <_Z12EEPROM_Writejh>
	EEPROM_Write(EESTUNDEN,rtc.Stunden);
    7362:	f8 01       	movw	r30, r16
    7364:	60 89       	ldd	r22, Z+16	; 0x10
    7366:	81 e0       	ldi	r24, 0x01	; 1
    7368:	90 e0       	ldi	r25, 0x00	; 0
    736a:	0e 94 da 2a 	call	0x55b4	; 0x55b4 <_Z12EEPROM_Writejh>
	EEPROM_Write(EETAGE,rtc.Tag);
    736e:	f8 01       	movw	r30, r16
    7370:	64 89       	ldd	r22, Z+20	; 0x14
    7372:	82 e0       	ldi	r24, 0x02	; 2
    7374:	90 e0       	ldi	r25, 0x00	; 0
    7376:	0e 94 da 2a 	call	0x55b4	; 0x55b4 <_Z12EEPROM_Writejh>
	EEPROM_Write(EEMONAT,rtc.Monat);
    737a:	f8 01       	movw	r30, r16
    737c:	66 89       	ldd	r22, Z+22	; 0x16
    737e:	83 e0       	ldi	r24, 0x03	; 3
    7380:	90 e0       	ldi	r25, 0x00	; 0
    7382:	0e 94 da 2a 	call	0x55b4	; 0x55b4 <_Z12EEPROM_Writejh>
	EEPROM_Write(EEJAHR,rtc.Jahr);
    7386:	f8 01       	movw	r30, r16
    7388:	67 89       	ldd	r22, Z+23	; 0x17
    738a:	84 e0       	ldi	r24, 0x04	; 4
    738c:	90 e0       	ldi	r25, 0x00	; 0
    738e:	0e 94 da 2a 	call	0x55b4	; 0x55b4 <_Z12EEPROM_Writejh>
	
	oled.clearFrame();
    7392:	81 e1       	ldi	r24, 0x11	; 17
    7394:	9a e0       	ldi	r25, 0x0A	; 10
    7396:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <_ZN7Display10clearFrameEv>
	rtc.ausgabedatumneu();
    739a:	c8 01       	movw	r24, r16
    739c:	78 d3       	rcall	.+1776   	; 0x7a8e <_ZN3RTC15ausgabedatumneuEv>
	rtc.ausgabezeitneu();
    739e:	c8 01       	movw	r24, r16
    73a0:	3d d3       	rcall	.+1658   	; 0x7a1c <_ZN3RTC14ausgabezeitneuEv>
	rtc.RTCstart();
    73a2:	c8 01       	movw	r24, r16
    73a4:	55 d4       	rcall	.+2218   	; 0x7c50 <_ZN3RTC8RTCstartEv>
    73a6:	0d c0       	rjmp	.+26     	; 0x73c2 <_Z13uhreinstellenv+0x702>
			break;
			default:
			pos++;
			break;
		}
		pos++;
    73a8:	93 94       	inc	r9
    73aa:	c7 cc       	rjmp	.-1650   	; 0x6d3a <_Z13uhreinstellenv+0x7a>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 9:
			rtc.Jahr+=Tastatur.ZahlenausTastatur();
    73ac:	f6 01       	movw	r30, r12
    73ae:	87 8b       	std	Z+23, r24	; 0x17
				buffersize=sprintf(buffer,"Jahr falsch");
				for(uint8_t i = 0; i<buffersize;i++){
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			if(rtc.Monat==2){
    73b0:	f6 01       	movw	r30, r12
    73b2:	86 89       	ldd	r24, Z+22	; 0x16
    73b4:	82 30       	cpi	r24, 0x02	; 2
    73b6:	c1 f7       	brne	.-16     	; 0x73a8 <_Z13uhreinstellenv+0x6e8>
    73b8:	80 cf       	rjmp	.-256    	; 0x72ba <_Z13uhreinstellenv+0x5fa>

		oled.sendFrame();
		oled.clearFrame();
		switch (pos) {
			case 0:
			rtc.Stunden=Tastatur.ZahlenausTastatur()*10;
    73ba:	f6 01       	movw	r30, r12
    73bc:	80 8b       	std	Z+16, r24	; 0x10
			break;
			default:
			pos++;
			break;
		}
		pos++;
    73be:	93 94       	inc	r9
    73c0:	bc cc       	rjmp	.-1672   	; 0x6d3a <_Z13uhreinstellenv+0x7a>
	
	oled.clearFrame();
	rtc.ausgabedatumneu();
	rtc.ausgabezeitneu();
	rtc.RTCstart();
}
    73c2:	66 96       	adiw	r28, 0x16	; 22
    73c4:	0f b6       	in	r0, 0x3f	; 63
    73c6:	f8 94       	cli
    73c8:	de bf       	out	0x3e, r29	; 62
    73ca:	0f be       	out	0x3f, r0	; 63
    73cc:	cd bf       	out	0x3d, r28	; 61
    73ce:	df 91       	pop	r29
    73d0:	cf 91       	pop	r28
    73d2:	1f 91       	pop	r17
    73d4:	0f 91       	pop	r16
    73d6:	ff 90       	pop	r15
    73d8:	ef 90       	pop	r14
    73da:	df 90       	pop	r13
    73dc:	cf 90       	pop	r12
    73de:	bf 90       	pop	r11
    73e0:	af 90       	pop	r10
    73e2:	9f 90       	pop	r9
    73e4:	8f 90       	pop	r8
    73e6:	7f 90       	pop	r7
    73e8:	6f 90       	pop	r6
    73ea:	5f 90       	pop	r5
    73ec:	4f 90       	pop	r4
    73ee:	3f 90       	pop	r3
    73f0:	2f 90       	pop	r2
    73f2:	08 95       	ret

000073f4 <_ZN13einstellungen4drawEv>:
	uint8_t tastendruck(uint8_t *tast){
		return 0;
	}
	
	//anzeige erstellen
	void draw(){
    73f4:	cf 92       	push	r12
    73f6:	df 92       	push	r13
    73f8:	ef 92       	push	r14
    73fa:	ff 92       	push	r15
    73fc:	0f 93       	push	r16
    73fe:	1f 93       	push	r17
    7400:	cf 93       	push	r28
    7402:	df 93       	push	r29
    7404:	ec 01       	movw	r28, r24
		return 0;
	}
	
	//drawfunktion
	virtual void draw(){
		oled->clearFrame();
    7406:	8f 89       	ldd	r24, Y+23	; 0x17
    7408:	98 8d       	ldd	r25, Y+24	; 0x18
    740a:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <_ZN7Display10clearFrameEv>
    740e:	10 e0       	ldi	r17, 0x00	; 0
    7410:	e1 2c       	mov	r14, r1
    7412:	f1 2c       	mov	r15, r1
	}
	
	//draw header and overload it
	void header(){
		for(uint8_t i=0;i<8;i++){
			oled->draw_ASCI(rtc->msg_uhr[i],i*charsize,0);
    7414:	e9 8d       	ldd	r30, Y+25	; 0x19
    7416:	fa 8d       	ldd	r31, Y+26	; 0x1a
    7418:	ee 0d       	add	r30, r14
    741a:	ff 1d       	adc	r31, r15
    741c:	20 e0       	ldi	r18, 0x00	; 0
    741e:	41 2f       	mov	r20, r17
    7420:	60 81       	ld	r22, Z
    7422:	8f 89       	ldd	r24, Y+23	; 0x17
    7424:	98 8d       	ldd	r25, Y+24	; 0x18
    7426:	0e 94 00 0c 	call	0x1800	; 0x1800 <_ZN7Display9draw_ASCIEhhh>
    742a:	2f ef       	ldi	r18, 0xFF	; 255
    742c:	e2 1a       	sub	r14, r18
    742e:	f2 0a       	sbc	r15, r18
    7430:	1a 5f       	subi	r17, 0xFA	; 250
		return &name[0];
	}
	
	//draw header and overload it
	void header(){
		for(uint8_t i=0;i<8;i++){
    7432:	10 33       	cpi	r17, 0x30	; 48
    7434:	79 f7       	brne	.-34     	; 0x7414 <_ZN13einstellungen4drawEv+0x20>
			oled->draw_ASCI(rtc->msg_uhr[i],i*charsize,0);
		}
		buffersize=sprintf(buffer,"Bat: %i%%",Batteriestatus());
    7436:	0e 94 5c 25 	call	0x4ab8	; 0x4ab8 <_Z14Batteriestatusv>
    743a:	7e 01       	movw	r14, r28
    743c:	32 e0       	ldi	r19, 0x02	; 2
    743e:	e3 0e       	add	r14, r19
    7440:	f1 1c       	adc	r15, r1
    7442:	28 2f       	mov	r18, r24
    7444:	08 2e       	mov	r0, r24
    7446:	00 0c       	add	r0, r0
    7448:	33 0b       	sbc	r19, r19
    744a:	3f 93       	push	r19
    744c:	8f 93       	push	r24
    744e:	82 ec       	ldi	r24, 0xC2	; 194
    7450:	91 e0       	ldi	r25, 0x01	; 1
    7452:	9f 93       	push	r25
    7454:	8f 93       	push	r24
    7456:	ff 92       	push	r15
    7458:	ef 92       	push	r14
    745a:	0e 94 67 48 	call	0x90ce	; 0x90ce <sprintf>
    745e:	8e 8b       	std	Y+22, r24	; 0x16
		for(uint8_t i=((SSD1306_WIDTH/charsize)-buffersize);i<(SSD1306_WIDTH/charsize);i++){
    7460:	15 e1       	ldi	r17, 0x15	; 21
    7462:	18 1b       	sub	r17, r24
    7464:	0f 90       	pop	r0
    7466:	0f 90       	pop	r0
    7468:	0f 90       	pop	r0
    746a:	0f 90       	pop	r0
    746c:	0f 90       	pop	r0
    746e:	0f 90       	pop	r0
    7470:	15 31       	cpi	r17, 0x15	; 21
    7472:	08 f0       	brcs	.+2      	; 0x7476 <_ZN13einstellungen4drawEv+0x82>
    7474:	80 c1       	rjmp	.+768    	; 0x7776 <_ZN13einstellungen4drawEv+0x382>
    7476:	01 2f       	mov	r16, r17
    7478:	00 0f       	add	r16, r16
    747a:	01 0f       	add	r16, r17
    747c:	00 0f       	add	r16, r16
			oled->draw_ASCI(buffer[i-((SSD1306_WIDTH/charsize)-buffersize)],i*charsize,0);
    747e:	8e 89       	ldd	r24, Y+22	; 0x16
    7480:	fe 01       	movw	r30, r28
    7482:	e1 0f       	add	r30, r17
    7484:	f1 1d       	adc	r31, r1
    7486:	e8 0f       	add	r30, r24
    7488:	f1 1d       	adc	r31, r1
    748a:	73 97       	sbiw	r30, 0x13	; 19
    748c:	20 e0       	ldi	r18, 0x00	; 0
    748e:	40 2f       	mov	r20, r16
    7490:	60 81       	ld	r22, Z
    7492:	8f 89       	ldd	r24, Y+23	; 0x17
    7494:	98 8d       	ldd	r25, Y+24	; 0x18
    7496:	0e 94 00 0c 	call	0x1800	; 0x1800 <_ZN7Display9draw_ASCIEhhh>
	void header(){
		for(uint8_t i=0;i<8;i++){
			oled->draw_ASCI(rtc->msg_uhr[i],i*charsize,0);
		}
		buffersize=sprintf(buffer,"Bat: %i%%",Batteriestatus());
		for(uint8_t i=((SSD1306_WIDTH/charsize)-buffersize);i<(SSD1306_WIDTH/charsize);i++){
    749a:	1f 5f       	subi	r17, 0xFF	; 255
    749c:	0a 5f       	subi	r16, 0xFA	; 250
    749e:	15 31       	cpi	r17, 0x15	; 21
    74a0:	71 f7       	brne	.-36     	; 0x747e <_ZN13einstellungen4drawEv+0x8a>
    74a2:	69 c1       	rjmp	.+722    	; 0x7776 <_ZN13einstellungen4drawEv+0x382>
	}
	
	//draw bottom and overload it
	void bottom(){
		for(uint8_t i=0;i<8;i++){
			oled->draw_ASCI(rtc->msg_dat[i],i*charsize+(SSD1306_WIDTH-bitsderrtc*charsize),7*charhighte);
    74a4:	e9 8d       	ldd	r30, Y+25	; 0x19
    74a6:	fa 8d       	ldd	r31, Y+26	; 0x1a
    74a8:	ec 0d       	add	r30, r12
    74aa:	fd 1d       	adc	r31, r13
    74ac:	28 e3       	ldi	r18, 0x38	; 56
    74ae:	41 2f       	mov	r20, r17
    74b0:	60 85       	ldd	r22, Z+8	; 0x08
    74b2:	8f 89       	ldd	r24, Y+23	; 0x17
    74b4:	98 8d       	ldd	r25, Y+24	; 0x18
    74b6:	0e 94 00 0c 	call	0x1800	; 0x1800 <_ZN7Display9draw_ASCIEhhh>
    74ba:	8f ef       	ldi	r24, 0xFF	; 255
    74bc:	c8 1a       	sub	r12, r24
    74be:	d8 0a       	sbc	r13, r24
    74c0:	1a 5f       	subi	r17, 0xFA	; 250
		}
	}
	
	//draw bottom and overload it
	void bottom(){
		for(uint8_t i=0;i<8;i++){
    74c2:	10 38       	cpi	r17, 0x80	; 128
    74c4:	79 f7       	brne	.-34     	; 0x74a4 <_ZN13einstellungen4drawEv+0xb0>
	//anzeige erstellen
	void draw(){
		monitor::draw();
		header();
		bottom();
		if (posx==0)
    74c6:	8e a1       	ldd	r24, Y+38	; 0x26
    74c8:	81 11       	cpse	r24, r1
    74ca:	ae c0       	rjmp	.+348    	; 0x7628 <_ZN13einstellungen4drawEv+0x234>
		{
			buffersize=sprintf(buffer,"Zeit einstellen");
    74cc:	80 e1       	ldi	r24, 0x10	; 16
    74ce:	e2 e7       	ldi	r30, 0x72	; 114
    74d0:	f3 e0       	ldi	r31, 0x03	; 3
    74d2:	d7 01       	movw	r26, r14
    74d4:	01 90       	ld	r0, Z+
    74d6:	0d 92       	st	X+, r0
    74d8:	8a 95       	dec	r24
    74da:	e1 f7       	brne	.-8      	; 0x74d4 <_ZN13einstellungen4drawEv+0xe0>
    74dc:	8f e0       	ldi	r24, 0x0F	; 15
    74de:	8e 8b       	std	Y+22, r24	; 0x16
    74e0:	0c e0       	ldi	r16, 0x0C	; 12
    74e2:	10 e0       	ldi	r17, 0x00	; 0
			for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+2*charsize,2*charhighte);}
    74e4:	fe 01       	movw	r30, r28
    74e6:	e1 0f       	add	r30, r17
    74e8:	f1 1d       	adc	r31, r1
    74ea:	20 e1       	ldi	r18, 0x10	; 16
    74ec:	40 2f       	mov	r20, r16
    74ee:	62 81       	ldd	r22, Z+2	; 0x02
    74f0:	8f 89       	ldd	r24, Y+23	; 0x17
    74f2:	98 8d       	ldd	r25, Y+24	; 0x18
    74f4:	0e 94 00 0c 	call	0x1800	; 0x1800 <_ZN7Display9draw_ASCIEhhh>
    74f8:	1f 5f       	subi	r17, 0xFF	; 255
    74fa:	0a 5f       	subi	r16, 0xFA	; 250
    74fc:	8e 89       	ldd	r24, Y+22	; 0x16
    74fe:	18 17       	cp	r17, r24
    7500:	88 f3       	brcs	.-30     	; 0x74e4 <_ZN13einstellungen4drawEv+0xf0>
			buffersize=sprintf(buffer,"g bestimmen");
    7502:	8c e0       	ldi	r24, 0x0C	; 12
    7504:	e2 e8       	ldi	r30, 0x82	; 130
    7506:	f3 e0       	ldi	r31, 0x03	; 3
    7508:	d7 01       	movw	r26, r14
    750a:	01 90       	ld	r0, Z+
    750c:	0d 92       	st	X+, r0
    750e:	8a 95       	dec	r24
    7510:	e1 f7       	brne	.-8      	; 0x750a <_ZN13einstellungen4drawEv+0x116>
    7512:	8b e0       	ldi	r24, 0x0B	; 11
    7514:	8e 8b       	std	Y+22, r24	; 0x16
    7516:	0c e0       	ldi	r16, 0x0C	; 12
    7518:	10 e0       	ldi	r17, 0x00	; 0
			for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+2*charsize,3*charhighte);}
    751a:	fe 01       	movw	r30, r28
    751c:	e1 0f       	add	r30, r17
    751e:	f1 1d       	adc	r31, r1
    7520:	28 e1       	ldi	r18, 0x18	; 24
    7522:	40 2f       	mov	r20, r16
    7524:	62 81       	ldd	r22, Z+2	; 0x02
    7526:	8f 89       	ldd	r24, Y+23	; 0x17
    7528:	98 8d       	ldd	r25, Y+24	; 0x18
    752a:	0e 94 00 0c 	call	0x1800	; 0x1800 <_ZN7Display9draw_ASCIEhhh>
    752e:	1f 5f       	subi	r17, 0xFF	; 255
    7530:	0a 5f       	subi	r16, 0xFA	; 250
    7532:	8e 89       	ldd	r24, Y+22	; 0x16
    7534:	18 17       	cp	r17, r24
    7536:	88 f3       	brcs	.-30     	; 0x751a <_ZN13einstellungen4drawEv+0x126>
			buffersize=sprintf(buffer,"Versionsnummer");
    7538:	8f e0       	ldi	r24, 0x0F	; 15
    753a:	ee e8       	ldi	r30, 0x8E	; 142
    753c:	f3 e0       	ldi	r31, 0x03	; 3
    753e:	d7 01       	movw	r26, r14
    7540:	01 90       	ld	r0, Z+
    7542:	0d 92       	st	X+, r0
    7544:	8a 95       	dec	r24
    7546:	e1 f7       	brne	.-8      	; 0x7540 <_ZN13einstellungen4drawEv+0x14c>
    7548:	8e e0       	ldi	r24, 0x0E	; 14
    754a:	8e 8b       	std	Y+22, r24	; 0x16
    754c:	0c e0       	ldi	r16, 0x0C	; 12
    754e:	10 e0       	ldi	r17, 0x00	; 0
			for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+2*charsize,4*charhighte);}
    7550:	fe 01       	movw	r30, r28
    7552:	e1 0f       	add	r30, r17
    7554:	f1 1d       	adc	r31, r1
    7556:	20 e2       	ldi	r18, 0x20	; 32
    7558:	40 2f       	mov	r20, r16
    755a:	62 81       	ldd	r22, Z+2	; 0x02
    755c:	8f 89       	ldd	r24, Y+23	; 0x17
    755e:	98 8d       	ldd	r25, Y+24	; 0x18
    7560:	0e 94 00 0c 	call	0x1800	; 0x1800 <_ZN7Display9draw_ASCIEhhh>
    7564:	1f 5f       	subi	r17, 0xFF	; 255
    7566:	0a 5f       	subi	r16, 0xFA	; 250
    7568:	8e 89       	ldd	r24, Y+22	; 0x16
    756a:	18 17       	cp	r17, r24
    756c:	88 f3       	brcs	.-30     	; 0x7550 <_ZN13einstellungen4drawEv+0x15c>
			buffersize=sprintf(buffer,"Mount SD: %u", (bool)(statusreg&(1<<mounttingstat)));
    756e:	80 91 e5 08 	lds	r24, 0x08E5
    7572:	86 95       	lsr	r24
    7574:	81 70       	andi	r24, 0x01	; 1
    7576:	1f 92       	push	r1
    7578:	8f 93       	push	r24
    757a:	8d e9       	ldi	r24, 0x9D	; 157
    757c:	93 e0       	ldi	r25, 0x03	; 3
    757e:	9f 93       	push	r25
    7580:	8f 93       	push	r24
    7582:	ff 92       	push	r15
    7584:	ef 92       	push	r14
    7586:	0e 94 67 48 	call	0x90ce	; 0x90ce <sprintf>
    758a:	8e 8b       	std	Y+22, r24	; 0x16
			for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+2*charsize,5*charhighte);}
    758c:	0f 90       	pop	r0
    758e:	0f 90       	pop	r0
    7590:	0f 90       	pop	r0
    7592:	0f 90       	pop	r0
    7594:	0f 90       	pop	r0
    7596:	0f 90       	pop	r0
    7598:	88 23       	and	r24, r24
    759a:	89 f0       	breq	.+34     	; 0x75be <_ZN13einstellungen4drawEv+0x1ca>
    759c:	0c e0       	ldi	r16, 0x0C	; 12
    759e:	10 e0       	ldi	r17, 0x00	; 0
    75a0:	fe 01       	movw	r30, r28
    75a2:	e1 0f       	add	r30, r17
    75a4:	f1 1d       	adc	r31, r1
    75a6:	28 e2       	ldi	r18, 0x28	; 40
    75a8:	40 2f       	mov	r20, r16
    75aa:	62 81       	ldd	r22, Z+2	; 0x02
    75ac:	8f 89       	ldd	r24, Y+23	; 0x17
    75ae:	98 8d       	ldd	r25, Y+24	; 0x18
    75b0:	0e 94 00 0c 	call	0x1800	; 0x1800 <_ZN7Display9draw_ASCIEhhh>
    75b4:	1f 5f       	subi	r17, 0xFF	; 255
    75b6:	0a 5f       	subi	r16, 0xFA	; 250
    75b8:	8e 89       	ldd	r24, Y+22	; 0x16
    75ba:	18 17       	cp	r17, r24
    75bc:	88 f3       	brcs	.-30     	; 0x75a0 <_ZN13einstellungen4drawEv+0x1ac>
			buffersize=sprintf(buffer,"Logging:  %u", (bool)(statusreg&(1<<loggingstat)));
    75be:	80 91 e5 08 	lds	r24, 0x08E5
    75c2:	82 fb       	bst	r24, 2
    75c4:	88 27       	eor	r24, r24
    75c6:	80 f9       	bld	r24, 0
    75c8:	1f 92       	push	r1
    75ca:	8f 93       	push	r24
    75cc:	8a ea       	ldi	r24, 0xAA	; 170
    75ce:	93 e0       	ldi	r25, 0x03	; 3
    75d0:	9f 93       	push	r25
    75d2:	8f 93       	push	r24
    75d4:	ff 92       	push	r15
    75d6:	ef 92       	push	r14
    75d8:	0e 94 67 48 	call	0x90ce	; 0x90ce <sprintf>
    75dc:	8e 8b       	std	Y+22, r24	; 0x16
			for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+2*charsize,6*charhighte);}
    75de:	0f 90       	pop	r0
    75e0:	0f 90       	pop	r0
    75e2:	0f 90       	pop	r0
    75e4:	0f 90       	pop	r0
    75e6:	0f 90       	pop	r0
    75e8:	0f 90       	pop	r0
    75ea:	88 23       	and	r24, r24
    75ec:	89 f0       	breq	.+34     	; 0x7610 <_ZN13einstellungen4drawEv+0x21c>
    75ee:	0c e0       	ldi	r16, 0x0C	; 12
    75f0:	10 e0       	ldi	r17, 0x00	; 0
    75f2:	fe 01       	movw	r30, r28
    75f4:	e1 0f       	add	r30, r17
    75f6:	f1 1d       	adc	r31, r1
    75f8:	20 e3       	ldi	r18, 0x30	; 48
    75fa:	40 2f       	mov	r20, r16
    75fc:	62 81       	ldd	r22, Z+2	; 0x02
    75fe:	8f 89       	ldd	r24, Y+23	; 0x17
    7600:	98 8d       	ldd	r25, Y+24	; 0x18
    7602:	0e 94 00 0c 	call	0x1800	; 0x1800 <_ZN7Display9draw_ASCIEhhh>
    7606:	1f 5f       	subi	r17, 0xFF	; 255
    7608:	0a 5f       	subi	r16, 0xFA	; 250
    760a:	8e 89       	ldd	r24, Y+22	; 0x16
    760c:	18 17       	cp	r17, r24
    760e:	88 f3       	brcs	.-30     	; 0x75f2 <_ZN13einstellungen4drawEv+0x1fe>
			oled->draw_ASCI('>',0*charsize,(posy+2)*charhighte);
    7610:	2d a1       	ldd	r18, Y+37	; 0x25
    7612:	22 0f       	add	r18, r18
    7614:	22 0f       	add	r18, r18
    7616:	22 0f       	add	r18, r18
    7618:	20 5f       	subi	r18, 0xF0	; 240
    761a:	40 e0       	ldi	r20, 0x00	; 0
    761c:	6e e3       	ldi	r22, 0x3E	; 62
    761e:	8f 89       	ldd	r24, Y+23	; 0x17
    7620:	98 8d       	ldd	r25, Y+24	; 0x18
    7622:	0e 94 00 0c 	call	0x1800	; 0x1800 <_ZN7Display9draw_ASCIEhhh>
    7626:	a2 c0       	rjmp	.+324    	; 0x776c <_ZN13einstellungen4drawEv+0x378>
		}
		else if (posy==0 && posx==1)
    7628:	9d a1       	ldd	r25, Y+37	; 0x25
    762a:	91 11       	cpse	r25, r1
    762c:	06 c0       	rjmp	.+12     	; 0x763a <_ZN13einstellungen4drawEv+0x246>
    762e:	81 30       	cpi	r24, 0x01	; 1
    7630:	09 f0       	breq	.+2      	; 0x7634 <_ZN13einstellungen4drawEv+0x240>
    7632:	9c c0       	rjmp	.+312    	; 0x776c <_ZN13einstellungen4drawEv+0x378>
		{
			//Uhreinstellung machen
			//noch etwas bloed, aber mit eigener Funktion
			uhreinstellen();
    7634:	45 db       	rcall	.-2422   	; 0x6cc0 <_Z13uhreinstellenv>
			posx=0;
    7636:	1e a2       	std	Y+38, r1	; 0x26
    7638:	99 c0       	rjmp	.+306    	; 0x776c <_ZN13einstellungen4drawEv+0x378>
		}
		else if (posy==1 && posx==1)
    763a:	91 30       	cpi	r25, 0x01	; 1
    763c:	09 f0       	breq	.+2      	; 0x7640 <_ZN13einstellungen4drawEv+0x24c>
    763e:	60 c0       	rjmp	.+192    	; 0x7700 <_ZN13einstellungen4drawEv+0x30c>
    7640:	81 30       	cpi	r24, 0x01	; 1
    7642:	09 f0       	breq	.+2      	; 0x7646 <_ZN13einstellungen4drawEv+0x252>
    7644:	93 c0       	rjmp	.+294    	; 0x776c <_ZN13einstellungen4drawEv+0x378>
		{
			//g bestimmen einbauen
			buffersize=sprintf(buffer,"Geraet nicht bewegen");
    7646:	85 e1       	ldi	r24, 0x15	; 21
    7648:	e7 eb       	ldi	r30, 0xB7	; 183
    764a:	f3 e0       	ldi	r31, 0x03	; 3
    764c:	d7 01       	movw	r26, r14
    764e:	01 90       	ld	r0, Z+
    7650:	0d 92       	st	X+, r0
    7652:	8a 95       	dec	r24
    7654:	e1 f7       	brne	.-8      	; 0x764e <_ZN13einstellungen4drawEv+0x25a>
    7656:	84 e1       	ldi	r24, 0x14	; 20
    7658:	8e 8b       	std	Y+22, r24	; 0x16
    765a:	00 e0       	ldi	r16, 0x00	; 0
    765c:	10 e0       	ldi	r17, 0x00	; 0
			for (uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize,2*charhighte);}
    765e:	fe 01       	movw	r30, r28
    7660:	e1 0f       	add	r30, r17
    7662:	f1 1d       	adc	r31, r1
    7664:	20 e1       	ldi	r18, 0x10	; 16
    7666:	40 2f       	mov	r20, r16
    7668:	62 81       	ldd	r22, Z+2	; 0x02
    766a:	8f 89       	ldd	r24, Y+23	; 0x17
    766c:	98 8d       	ldd	r25, Y+24	; 0x18
    766e:	0e 94 00 0c 	call	0x1800	; 0x1800 <_ZN7Display9draw_ASCIEhhh>
    7672:	1f 5f       	subi	r17, 0xFF	; 255
    7674:	0a 5f       	subi	r16, 0xFA	; 250
    7676:	8e 89       	ldd	r24, Y+22	; 0x16
    7678:	18 17       	cp	r17, r24
    767a:	88 f3       	brcs	.-30     	; 0x765e <_ZN13einstellungen4drawEv+0x26a>
			buffersize=sprintf(buffer,"* fuer start");
    767c:	8d e0       	ldi	r24, 0x0D	; 13
    767e:	ec ec       	ldi	r30, 0xCC	; 204
    7680:	f3 e0       	ldi	r31, 0x03	; 3
    7682:	d7 01       	movw	r26, r14
    7684:	01 90       	ld	r0, Z+
    7686:	0d 92       	st	X+, r0
    7688:	8a 95       	dec	r24
    768a:	e1 f7       	brne	.-8      	; 0x7684 <_ZN13einstellungen4drawEv+0x290>
    768c:	8c e0       	ldi	r24, 0x0C	; 12
    768e:	8e 8b       	std	Y+22, r24	; 0x16
    7690:	00 e0       	ldi	r16, 0x00	; 0
    7692:	10 e0       	ldi	r17, 0x00	; 0
			for (uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize,3*charhighte);}
    7694:	fe 01       	movw	r30, r28
    7696:	e1 0f       	add	r30, r17
    7698:	f1 1d       	adc	r31, r1
    769a:	28 e1       	ldi	r18, 0x18	; 24
    769c:	40 2f       	mov	r20, r16
    769e:	62 81       	ldd	r22, Z+2	; 0x02
    76a0:	8f 89       	ldd	r24, Y+23	; 0x17
    76a2:	98 8d       	ldd	r25, Y+24	; 0x18
    76a4:	0e 94 00 0c 	call	0x1800	; 0x1800 <_ZN7Display9draw_ASCIEhhh>
    76a8:	1f 5f       	subi	r17, 0xFF	; 255
    76aa:	0a 5f       	subi	r16, 0xFA	; 250
    76ac:	8e 89       	ldd	r24, Y+22	; 0x16
    76ae:	18 17       	cp	r17, r24
    76b0:	88 f3       	brcs	.-30     	; 0x7694 <_ZN13einstellungen4drawEv+0x2a0>
			if (5<6&&5>0)
			{
				buffersize=sprintf(buffer,"Noch %i Sekunden",5);
    76b2:	1f 92       	push	r1
    76b4:	85 e0       	ldi	r24, 0x05	; 5
    76b6:	8f 93       	push	r24
    76b8:	89 ed       	ldi	r24, 0xD9	; 217
    76ba:	93 e0       	ldi	r25, 0x03	; 3
    76bc:	9f 93       	push	r25
    76be:	8f 93       	push	r24
    76c0:	ff 92       	push	r15
    76c2:	ef 92       	push	r14
    76c4:	0e 94 67 48 	call	0x90ce	; 0x90ce <sprintf>
    76c8:	8e 8b       	std	Y+22, r24	; 0x16
				for (uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize,5*charhighte);}
    76ca:	0f 90       	pop	r0
    76cc:	0f 90       	pop	r0
    76ce:	0f 90       	pop	r0
    76d0:	0f 90       	pop	r0
    76d2:	0f 90       	pop	r0
    76d4:	0f 90       	pop	r0
    76d6:	88 23       	and	r24, r24
    76d8:	09 f4       	brne	.+2      	; 0x76dc <_ZN13einstellungen4drawEv+0x2e8>
    76da:	48 c0       	rjmp	.+144    	; 0x776c <_ZN13einstellungen4drawEv+0x378>
    76dc:	00 e0       	ldi	r16, 0x00	; 0
    76de:	10 e0       	ldi	r17, 0x00	; 0
    76e0:	fe 01       	movw	r30, r28
    76e2:	e1 0f       	add	r30, r17
    76e4:	f1 1d       	adc	r31, r1
    76e6:	28 e2       	ldi	r18, 0x28	; 40
    76e8:	40 2f       	mov	r20, r16
    76ea:	62 81       	ldd	r22, Z+2	; 0x02
    76ec:	8f 89       	ldd	r24, Y+23	; 0x17
    76ee:	98 8d       	ldd	r25, Y+24	; 0x18
    76f0:	0e 94 00 0c 	call	0x1800	; 0x1800 <_ZN7Display9draw_ASCIEhhh>
    76f4:	1f 5f       	subi	r17, 0xFF	; 255
    76f6:	0a 5f       	subi	r16, 0xFA	; 250
    76f8:	8e 89       	ldd	r24, Y+22	; 0x16
    76fa:	18 17       	cp	r17, r24
    76fc:	88 f3       	brcs	.-30     	; 0x76e0 <_ZN13einstellungen4drawEv+0x2ec>
    76fe:	36 c0       	rjmp	.+108    	; 0x776c <_ZN13einstellungen4drawEv+0x378>
			else if (5==0)
			{
				posx--;
			}
		}
		else if (posy==2 && posx==1)
    7700:	92 30       	cpi	r25, 0x02	; 2
    7702:	a1 f5       	brne	.+104    	; 0x776c <_ZN13einstellungen4drawEv+0x378>
    7704:	81 30       	cpi	r24, 0x01	; 1
    7706:	91 f5       	brne	.+100    	; 0x776c <_ZN13einstellungen4drawEv+0x378>
		{
			buffersize=sprintf(buffer,"Version: %.2f",(double)VERSIONSNUMMER);
    7708:	80 e4       	ldi	r24, 0x40	; 64
    770a:	8f 93       	push	r24
    770c:	81 e4       	ldi	r24, 0x41	; 65
    770e:	8f 93       	push	r24
    7710:	8b ee       	ldi	r24, 0xEB	; 235
    7712:	8f 93       	push	r24
    7714:	85 e8       	ldi	r24, 0x85	; 133
    7716:	8f 93       	push	r24
    7718:	84 eb       	ldi	r24, 0xB4	; 180
    771a:	91 e0       	ldi	r25, 0x01	; 1
    771c:	9f 93       	push	r25
    771e:	8f 93       	push	r24
    7720:	ff 92       	push	r15
    7722:	ef 92       	push	r14
    7724:	0e 94 67 48 	call	0x90ce	; 0x90ce <sprintf>
    7728:	8e 8b       	std	Y+22, r24	; 0x16
			for(uint8_t i=0; i < buffersize;i++){
    772a:	2d b7       	in	r18, 0x3d	; 61
    772c:	3e b7       	in	r19, 0x3e	; 62
    772e:	28 5f       	subi	r18, 0xF8	; 248
    7730:	3f 4f       	sbci	r19, 0xFF	; 255
    7732:	0f b6       	in	r0, 0x3f	; 63
    7734:	f8 94       	cli
    7736:	3e bf       	out	0x3e, r19	; 62
    7738:	0f be       	out	0x3f, r0	; 63
    773a:	2d bf       	out	0x3d, r18	; 61
    773c:	88 23       	and	r24, r24
    773e:	b1 f0       	breq	.+44     	; 0x776c <_ZN13einstellungen4drawEv+0x378>
    7740:	10 e0       	ldi	r17, 0x00	; 0
				oled->draw_ASCI(buffer[i],(i+2)*charsize,3.5*charhighte);
    7742:	21 2f       	mov	r18, r17
    7744:	30 e0       	ldi	r19, 0x00	; 0
    7746:	c9 01       	movw	r24, r18
    7748:	02 96       	adiw	r24, 0x02	; 2
    774a:	48 2f       	mov	r20, r24
    774c:	44 0f       	add	r20, r20
    774e:	48 0f       	add	r20, r24
    7750:	44 0f       	add	r20, r20
    7752:	fe 01       	movw	r30, r28
    7754:	e2 0f       	add	r30, r18
    7756:	f3 1f       	adc	r31, r19
    7758:	2c e1       	ldi	r18, 0x1C	; 28
    775a:	62 81       	ldd	r22, Z+2	; 0x02
    775c:	8f 89       	ldd	r24, Y+23	; 0x17
    775e:	98 8d       	ldd	r25, Y+24	; 0x18
    7760:	0e 94 00 0c 	call	0x1800	; 0x1800 <_ZN7Display9draw_ASCIEhhh>
			}
		}
		else if (posy==2 && posx==1)
		{
			buffersize=sprintf(buffer,"Version: %.2f",(double)VERSIONSNUMMER);
			for(uint8_t i=0; i < buffersize;i++){
    7764:	1f 5f       	subi	r17, 0xFF	; 255
    7766:	8e 89       	ldd	r24, Y+22	; 0x16
    7768:	18 17       	cp	r17, r24
    776a:	58 f3       	brcs	.-42     	; 0x7742 <_ZN13einstellungen4drawEv+0x34e>
		oled->clearFrame();
	}

	//send the frame to the display
	void send(){
		oled->sendFrame();	
    776c:	8f 89       	ldd	r24, Y+23	; 0x17
    776e:	98 8d       	ldd	r25, Y+24	; 0x18
    7770:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <_ZN7Display9sendFrameEv>
    7774:	04 c0       	rjmp	.+8      	; 0x777e <_ZN13einstellungen4drawEv+0x38a>
		return 0;
	}
	
	//drawfunktion
	virtual void draw(){
		oled->clearFrame();
    7776:	10 e5       	ldi	r17, 0x50	; 80
    7778:	c1 2c       	mov	r12, r1
    777a:	d1 2c       	mov	r13, r1
    777c:	93 ce       	rjmp	.-730    	; 0x74a4 <_ZN13einstellungen4drawEv+0xb0>
				oled->draw_ASCI(buffer[i],(i+2)*charsize,3.5*charhighte);

			}
		}
		send();	
	}
    777e:	df 91       	pop	r29
    7780:	cf 91       	pop	r28
    7782:	1f 91       	pop	r17
    7784:	0f 91       	pop	r16
    7786:	ff 90       	pop	r15
    7788:	ef 90       	pop	r14
    778a:	df 90       	pop	r13
    778c:	cf 90       	pop	r12
    778e:	08 95       	ret

00007790 <_GLOBAL__sub_I__Znwj>:
{
	free(ptr);
}

#include "RTC.h"
RTC rtc;
    7790:	82 e1       	ldi	r24, 0x12	; 18
    7792:	9e e0       	ldi	r25, 0x0E	; 14
    7794:	b5 d1       	rcall	.+874    	; 0x7b00 <_ZN3RTCC1Ev>

#include "Display.h"
Display oled;
    7796:	81 e1       	ldi	r24, 0x11	; 17
    7798:	9a e0       	ldi	r25, 0x0A	; 10
    779a:	0e 94 50 0b 	call	0x16a0	; 0x16a0 <_ZN7DisplayC1Ev>

#include "Interface.h"
Interface Tastatur;
    779e:	85 e0       	ldi	r24, 0x05	; 5
    77a0:	9a e0       	ldi	r25, 0x0A	; 10
    77a2:	0e 94 21 23 	call	0x4642	; 0x4642 <_ZN9InterfaceC1Ev>
//nicht mehr verwendet
//#include "SOUND.h"
//SOUND Lautsprecher;

#include "LSM303D.h"
LSM303D Accelerometer;
    77a6:	8c e1       	ldi	r24, 0x1C	; 28
    77a8:	99 e0       	ldi	r25, 0x09	; 9
    77aa:	0e 94 6b 24 	call	0x48d6	; 0x48d6 <_ZN7LSM303DC1Ev>

#include "BMP180.h"
BMP180 druck;
    77ae:	81 ef       	ldi	r24, 0xF1	; 241
    77b0:	98 e0       	ldi	r25, 0x08	; 8
    77b2:	0e 94 79 04 	call	0x8f2	; 0x8f2 <_ZN6BMP180C1Ev>
//Kompass kompass;

#include "ADC.h"

#include "Output.h"
Output LED('B',PORTB1);
    77b6:	41 e0       	ldi	r20, 0x01	; 1
    77b8:	62 e4       	ldi	r22, 0x42	; 66
    77ba:	8b ee       	ldi	r24, 0xEB	; 235
    77bc:	98 e0       	ldi	r25, 0x08	; 8
    77be:	28 d0       	rcall	.+80     	; 0x7810 <_ZN6OutputC1Ehh>
Output Vibrationsmotor('B',PORTB2);
    77c0:	42 e0       	ldi	r20, 0x02	; 2
    77c2:	62 e4       	ldi	r22, 0x42	; 66
    77c4:	89 ee       	ldi	r24, 0xE9	; 233
    77c6:	98 e0       	ldi	r25, 0x08	; 8
    77c8:	23 d0       	rcall	.+70     	; 0x7810 <_ZN6OutputC1Ehh>
Output IRLED('D',PORTD7);
    77ca:	47 e0       	ldi	r20, 0x07	; 7
    77cc:	64 e4       	ldi	r22, 0x44	; 68
    77ce:	87 ee       	ldi	r24, 0xE7	; 231
    77d0:	98 e0       	ldi	r25, 0x08	; 8
    77d2:	1e c0       	rjmp	.+60     	; 0x7810 <_ZN6OutputC1Ehh>
    77d4:	08 95       	ret

000077d6 <_GLOBAL__sub_D__Znwj>:
    77d6:	87 ee       	ldi	r24, 0xE7	; 231
    77d8:	98 e0       	ldi	r25, 0x08	; 8
    77da:	54 d0       	rcall	.+168    	; 0x7884 <_ZN6OutputD1Ev>

#include "ADC.h"

#include "Output.h"
Output LED('B',PORTB1);
Output Vibrationsmotor('B',PORTB2);
    77dc:	89 ee       	ldi	r24, 0xE9	; 233
    77de:	98 e0       	ldi	r25, 0x08	; 8
    77e0:	51 d0       	rcall	.+162    	; 0x7884 <_ZN6OutputD1Ev>
//Kompass kompass;

#include "ADC.h"

#include "Output.h"
Output LED('B',PORTB1);
    77e2:	8b ee       	ldi	r24, 0xEB	; 235
    77e4:	98 e0       	ldi	r25, 0x08	; 8
    77e6:	4e d0       	rcall	.+156    	; 0x7884 <_ZN6OutputD1Ev>

#include "LSM303D.h"
LSM303D Accelerometer;

#include "BMP180.h"
BMP180 druck;
    77e8:	81 ef       	ldi	r24, 0xF1	; 241
    77ea:	98 e0       	ldi	r25, 0x08	; 8
    77ec:	0e 94 84 03 	call	0x708	; 0x708 <_ZN6BMP180D1Ev>
//nicht mehr verwendet
//#include "SOUND.h"
//SOUND Lautsprecher;

#include "LSM303D.h"
LSM303D Accelerometer;
    77f0:	8c e1       	ldi	r24, 0x1C	; 28
    77f2:	99 e0       	ldi	r25, 0x09	; 9
    77f4:	0e 94 37 24 	call	0x486e	; 0x486e <_ZN7LSM303DD1Ev>

#include "Display.h"
Display oled;

#include "Interface.h"
Interface Tastatur;
    77f8:	85 e0       	ldi	r24, 0x05	; 5
    77fa:	9a e0       	ldi	r25, 0x0A	; 10
    77fc:	0e 94 34 23 	call	0x4668	; 0x4668 <_ZN9InterfaceD1Ev>

#include "RTC.h"
RTC rtc;

#include "Display.h"
Display oled;
    7800:	81 e1       	ldi	r24, 0x11	; 17
    7802:	9a e0       	ldi	r25, 0x0A	; 10
    7804:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <_ZN7DisplayD1Ev>
{
	free(ptr);
}

#include "RTC.h"
RTC rtc;
    7808:	82 e1       	ldi	r24, 0x12	; 18
    780a:	9e e0       	ldi	r25, 0x0E	; 14
    780c:	f5 c0       	rjmp	.+490    	; 0x79f8 <_ZN3RTCD1Ev>
    780e:	08 95       	ret

00007810 <_ZN6OutputC1Ehh>:
#include "Output.h"

// default constructor
Output::Output(uint8_t Portpraefix, uint8_t Pinnumber)
{
	Pin=Pinnumber;
    7810:	fc 01       	movw	r30, r24
    7812:	41 83       	std	Z+1, r20	; 0x01
	Port=Portpraefix;
    7814:	60 83       	st	Z, r22
	switch (Portpraefix)
    7816:	62 34       	cpi	r22, 0x42	; 66
    7818:	a1 f0       	breq	.+40     	; 0x7842 <_ZN6OutputC1Ehh+0x32>
    781a:	18 f4       	brcc	.+6      	; 0x7822 <_ZN6OutputC1Ehh+0x12>
    781c:	61 34       	cpi	r22, 0x41	; 65
    781e:	31 f0       	breq	.+12     	; 0x782c <_ZN6OutputC1Ehh+0x1c>
    7820:	08 95       	ret
    7822:	63 34       	cpi	r22, 0x43	; 67
    7824:	c9 f0       	breq	.+50     	; 0x7858 <_ZN6OutputC1Ehh+0x48>
    7826:	64 34       	cpi	r22, 0x44	; 68
    7828:	11 f1       	breq	.+68     	; 0x786e <_ZN6OutputC1Ehh+0x5e>
    782a:	08 95       	ret
	{
		case 'A':
			DDRA |= (1<<Pin);
    782c:	21 b1       	in	r18, 0x01	; 1
    782e:	81 e0       	ldi	r24, 0x01	; 1
    7830:	90 e0       	ldi	r25, 0x00	; 0
    7832:	02 c0       	rjmp	.+4      	; 0x7838 <_ZN6OutputC1Ehh+0x28>
    7834:	88 0f       	add	r24, r24
    7836:	99 1f       	adc	r25, r25
    7838:	4a 95       	dec	r20
    783a:	e2 f7       	brpl	.-8      	; 0x7834 <_ZN6OutputC1Ehh+0x24>
    783c:	82 2b       	or	r24, r18
    783e:	81 b9       	out	0x01, r24	; 1
			break;
    7840:	08 95       	ret
		case 'B':
			DDRB |= (1<<Pin);
    7842:	24 b1       	in	r18, 0x04	; 4
    7844:	81 e0       	ldi	r24, 0x01	; 1
    7846:	90 e0       	ldi	r25, 0x00	; 0
    7848:	02 c0       	rjmp	.+4      	; 0x784e <_ZN6OutputC1Ehh+0x3e>
    784a:	88 0f       	add	r24, r24
    784c:	99 1f       	adc	r25, r25
    784e:	4a 95       	dec	r20
    7850:	e2 f7       	brpl	.-8      	; 0x784a <_ZN6OutputC1Ehh+0x3a>
    7852:	82 2b       	or	r24, r18
    7854:	84 b9       	out	0x04, r24	; 4
			break;
    7856:	08 95       	ret
		case 'C':
			DDRC |= (1<<Pin);
    7858:	27 b1       	in	r18, 0x07	; 7
    785a:	81 e0       	ldi	r24, 0x01	; 1
    785c:	90 e0       	ldi	r25, 0x00	; 0
    785e:	02 c0       	rjmp	.+4      	; 0x7864 <_ZN6OutputC1Ehh+0x54>
    7860:	88 0f       	add	r24, r24
    7862:	99 1f       	adc	r25, r25
    7864:	4a 95       	dec	r20
    7866:	e2 f7       	brpl	.-8      	; 0x7860 <_ZN6OutputC1Ehh+0x50>
    7868:	82 2b       	or	r24, r18
    786a:	87 b9       	out	0x07, r24	; 7
			break;
    786c:	08 95       	ret
		case 'D':
			DDRD |= (1<<Pin);
    786e:	2a b1       	in	r18, 0x0a	; 10
    7870:	81 e0       	ldi	r24, 0x01	; 1
    7872:	90 e0       	ldi	r25, 0x00	; 0
    7874:	02 c0       	rjmp	.+4      	; 0x787a <_ZN6OutputC1Ehh+0x6a>
    7876:	88 0f       	add	r24, r24
    7878:	99 1f       	adc	r25, r25
    787a:	4a 95       	dec	r20
    787c:	e2 f7       	brpl	.-8      	; 0x7876 <_ZN6OutputC1Ehh+0x66>
    787e:	82 2b       	or	r24, r18
    7880:	8a b9       	out	0x0a, r24	; 10
    7882:	08 95       	ret

00007884 <_ZN6OutputD1Ev>:
			break;
	}
} //Output

// default destructor
Output::~Output()
    7884:	08 95       	ret

00007886 <_ZN6Output2onEv>:
{
} //~Output

void Output::on(){
    7886:	fc 01       	movw	r30, r24
	switch (Port)
    7888:	90 81       	ld	r25, Z
    788a:	92 34       	cpi	r25, 0x42	; 66
    788c:	a9 f0       	breq	.+42     	; 0x78b8 <_ZN6Output2onEv+0x32>
    788e:	18 f4       	brcc	.+6      	; 0x7896 <_ZN6Output2onEv+0x10>
    7890:	91 34       	cpi	r25, 0x41	; 65
    7892:	31 f0       	breq	.+12     	; 0x78a0 <_ZN6Output2onEv+0x1a>
    7894:	08 95       	ret
    7896:	93 34       	cpi	r25, 0x43	; 67
    7898:	d9 f0       	breq	.+54     	; 0x78d0 <_ZN6Output2onEv+0x4a>
    789a:	94 34       	cpi	r25, 0x44	; 68
    789c:	29 f1       	breq	.+74     	; 0x78e8 <_ZN6Output2onEv+0x62>
    789e:	08 95       	ret
	{
		case 'A':
			PORTA |= (1<<Pin);
    78a0:	22 b1       	in	r18, 0x02	; 2
    78a2:	81 e0       	ldi	r24, 0x01	; 1
    78a4:	90 e0       	ldi	r25, 0x00	; 0
    78a6:	01 80       	ldd	r0, Z+1	; 0x01
    78a8:	02 c0       	rjmp	.+4      	; 0x78ae <_ZN6Output2onEv+0x28>
    78aa:	88 0f       	add	r24, r24
    78ac:	99 1f       	adc	r25, r25
    78ae:	0a 94       	dec	r0
    78b0:	e2 f7       	brpl	.-8      	; 0x78aa <_ZN6Output2onEv+0x24>
    78b2:	82 2b       	or	r24, r18
    78b4:	82 b9       	out	0x02, r24	; 2
			break;
    78b6:	08 95       	ret
		case 'B':
			PORTB |= (1<<Pin);
    78b8:	25 b1       	in	r18, 0x05	; 5
    78ba:	81 e0       	ldi	r24, 0x01	; 1
    78bc:	90 e0       	ldi	r25, 0x00	; 0
    78be:	01 80       	ldd	r0, Z+1	; 0x01
    78c0:	02 c0       	rjmp	.+4      	; 0x78c6 <_ZN6Output2onEv+0x40>
    78c2:	88 0f       	add	r24, r24
    78c4:	99 1f       	adc	r25, r25
    78c6:	0a 94       	dec	r0
    78c8:	e2 f7       	brpl	.-8      	; 0x78c2 <_ZN6Output2onEv+0x3c>
    78ca:	82 2b       	or	r24, r18
    78cc:	85 b9       	out	0x05, r24	; 5
			break;
    78ce:	08 95       	ret
		case 'C':
			PORTC |= (1<<Pin);
    78d0:	28 b1       	in	r18, 0x08	; 8
    78d2:	81 e0       	ldi	r24, 0x01	; 1
    78d4:	90 e0       	ldi	r25, 0x00	; 0
    78d6:	01 80       	ldd	r0, Z+1	; 0x01
    78d8:	02 c0       	rjmp	.+4      	; 0x78de <_ZN6Output2onEv+0x58>
    78da:	88 0f       	add	r24, r24
    78dc:	99 1f       	adc	r25, r25
    78de:	0a 94       	dec	r0
    78e0:	e2 f7       	brpl	.-8      	; 0x78da <_ZN6Output2onEv+0x54>
    78e2:	82 2b       	or	r24, r18
    78e4:	88 b9       	out	0x08, r24	; 8
			break;
    78e6:	08 95       	ret
		case 'D':
			PORTD |= (1<<Pin);
    78e8:	2b b1       	in	r18, 0x0b	; 11
    78ea:	81 e0       	ldi	r24, 0x01	; 1
    78ec:	90 e0       	ldi	r25, 0x00	; 0
    78ee:	01 80       	ldd	r0, Z+1	; 0x01
    78f0:	02 c0       	rjmp	.+4      	; 0x78f6 <_ZN6Output2onEv+0x70>
    78f2:	88 0f       	add	r24, r24
    78f4:	99 1f       	adc	r25, r25
    78f6:	0a 94       	dec	r0
    78f8:	e2 f7       	brpl	.-8      	; 0x78f2 <_ZN6Output2onEv+0x6c>
    78fa:	82 2b       	or	r24, r18
    78fc:	8b b9       	out	0x0b, r24	; 11
    78fe:	08 95       	ret

00007900 <_ZN6Output4isonEv>:
		default:
			break;
	}
}

uint8_t Output::ison(){
    7900:	fc 01       	movw	r30, r24
	uint8_t returnparam=0;
	switch (Port)
    7902:	90 81       	ld	r25, Z
    7904:	92 34       	cpi	r25, 0x42	; 66
    7906:	a1 f0       	breq	.+40     	; 0x7930 <_ZN6Output4isonEv+0x30>
    7908:	18 f4       	brcc	.+6      	; 0x7910 <_ZN6Output4isonEv+0x10>
    790a:	91 34       	cpi	r25, 0x41	; 65
    790c:	31 f0       	breq	.+12     	; 0x791a <_ZN6Output4isonEv+0x1a>
    790e:	31 c0       	rjmp	.+98     	; 0x7972 <_ZN6Output4isonEv+0x72>
    7910:	93 34       	cpi	r25, 0x43	; 67
    7912:	c9 f0       	breq	.+50     	; 0x7946 <_ZN6Output4isonEv+0x46>
    7914:	94 34       	cpi	r25, 0x44	; 68
    7916:	11 f1       	breq	.+68     	; 0x795c <_ZN6Output4isonEv+0x5c>
    7918:	2c c0       	rjmp	.+88     	; 0x7972 <_ZN6Output4isonEv+0x72>
	{
		case 'A':
			if ((PORTA&(1<<Pin)))
    791a:	22 b1       	in	r18, 0x02	; 2
    791c:	30 e0       	ldi	r19, 0x00	; 0
    791e:	c9 01       	movw	r24, r18
    7920:	01 80       	ldd	r0, Z+1	; 0x01
    7922:	02 c0       	rjmp	.+4      	; 0x7928 <_ZN6Output4isonEv+0x28>
    7924:	95 95       	asr	r25
    7926:	87 95       	ror	r24
    7928:	0a 94       	dec	r0
    792a:	e2 f7       	brpl	.-8      	; 0x7924 <_ZN6Output4isonEv+0x24>
    792c:	81 70       	andi	r24, 0x01	; 1
    792e:	08 95       	ret
			{
				returnparam = 1;
			}
			break;
		case 'B':
			if ((PORTB&(1<<Pin)))
    7930:	25 b1       	in	r18, 0x05	; 5
    7932:	30 e0       	ldi	r19, 0x00	; 0
    7934:	c9 01       	movw	r24, r18
    7936:	01 80       	ldd	r0, Z+1	; 0x01
    7938:	02 c0       	rjmp	.+4      	; 0x793e <_ZN6Output4isonEv+0x3e>
    793a:	95 95       	asr	r25
    793c:	87 95       	ror	r24
    793e:	0a 94       	dec	r0
    7940:	e2 f7       	brpl	.-8      	; 0x793a <_ZN6Output4isonEv+0x3a>
    7942:	81 70       	andi	r24, 0x01	; 1
    7944:	08 95       	ret
			{
				returnparam = 1;
			}
			break;
		case 'C':
			if ((PORTC&(1<<Pin)))
    7946:	28 b1       	in	r18, 0x08	; 8
    7948:	30 e0       	ldi	r19, 0x00	; 0
    794a:	c9 01       	movw	r24, r18
    794c:	01 80       	ldd	r0, Z+1	; 0x01
    794e:	02 c0       	rjmp	.+4      	; 0x7954 <_ZN6Output4isonEv+0x54>
    7950:	95 95       	asr	r25
    7952:	87 95       	ror	r24
    7954:	0a 94       	dec	r0
    7956:	e2 f7       	brpl	.-8      	; 0x7950 <_ZN6Output4isonEv+0x50>
    7958:	81 70       	andi	r24, 0x01	; 1
    795a:	08 95       	ret
			{
				returnparam = 1;
			}
			break;
		case 'D':
			if ((PORTD&(1<<Pin)))
    795c:	2b b1       	in	r18, 0x0b	; 11
    795e:	30 e0       	ldi	r19, 0x00	; 0
    7960:	c9 01       	movw	r24, r18
    7962:	01 80       	ldd	r0, Z+1	; 0x01
    7964:	02 c0       	rjmp	.+4      	; 0x796a <_ZN6Output4isonEv+0x6a>
    7966:	95 95       	asr	r25
    7968:	87 95       	ror	r24
    796a:	0a 94       	dec	r0
    796c:	e2 f7       	brpl	.-8      	; 0x7966 <_ZN6Output4isonEv+0x66>
    796e:	81 70       	andi	r24, 0x01	; 1
    7970:	08 95       	ret
			{
				returnparam = 1;
			}
			break;
		default:
		returnparam = 2;
    7972:	82 e0       	ldi	r24, 0x02	; 2
			break;
	}
	return returnparam;
}
    7974:	08 95       	ret

00007976 <_ZN6Output3offEv>:

void Output::off(){
    7976:	fc 01       	movw	r30, r24
	switch (Port)
    7978:	90 81       	ld	r25, Z
    797a:	92 34       	cpi	r25, 0x42	; 66
    797c:	b1 f0       	breq	.+44     	; 0x79aa <_ZN6Output3offEv+0x34>
    797e:	18 f4       	brcc	.+6      	; 0x7986 <_ZN6Output3offEv+0x10>
    7980:	91 34       	cpi	r25, 0x41	; 65
    7982:	31 f0       	breq	.+12     	; 0x7990 <_ZN6Output3offEv+0x1a>
    7984:	08 95       	ret
    7986:	93 34       	cpi	r25, 0x43	; 67
    7988:	e9 f0       	breq	.+58     	; 0x79c4 <_ZN6Output3offEv+0x4e>
    798a:	94 34       	cpi	r25, 0x44	; 68
    798c:	41 f1       	breq	.+80     	; 0x79de <_ZN6Output3offEv+0x68>
    798e:	08 95       	ret
	{
		case 'A':
			PORTA &= ~(1<<Pin);
    7990:	22 b1       	in	r18, 0x02	; 2
    7992:	81 e0       	ldi	r24, 0x01	; 1
    7994:	90 e0       	ldi	r25, 0x00	; 0
    7996:	01 80       	ldd	r0, Z+1	; 0x01
    7998:	02 c0       	rjmp	.+4      	; 0x799e <_ZN6Output3offEv+0x28>
    799a:	88 0f       	add	r24, r24
    799c:	99 1f       	adc	r25, r25
    799e:	0a 94       	dec	r0
    79a0:	e2 f7       	brpl	.-8      	; 0x799a <_ZN6Output3offEv+0x24>
    79a2:	80 95       	com	r24
    79a4:	82 23       	and	r24, r18
    79a6:	82 b9       	out	0x02, r24	; 2
			break;
    79a8:	08 95       	ret
		case 'B':
			PORTB &= ~(1<<Pin);
    79aa:	25 b1       	in	r18, 0x05	; 5
    79ac:	81 e0       	ldi	r24, 0x01	; 1
    79ae:	90 e0       	ldi	r25, 0x00	; 0
    79b0:	01 80       	ldd	r0, Z+1	; 0x01
    79b2:	02 c0       	rjmp	.+4      	; 0x79b8 <_ZN6Output3offEv+0x42>
    79b4:	88 0f       	add	r24, r24
    79b6:	99 1f       	adc	r25, r25
    79b8:	0a 94       	dec	r0
    79ba:	e2 f7       	brpl	.-8      	; 0x79b4 <_ZN6Output3offEv+0x3e>
    79bc:	80 95       	com	r24
    79be:	82 23       	and	r24, r18
    79c0:	85 b9       	out	0x05, r24	; 5
			break;
    79c2:	08 95       	ret
		case 'C':
			PORTC &= ~(1<<Pin);
    79c4:	28 b1       	in	r18, 0x08	; 8
    79c6:	81 e0       	ldi	r24, 0x01	; 1
    79c8:	90 e0       	ldi	r25, 0x00	; 0
    79ca:	01 80       	ldd	r0, Z+1	; 0x01
    79cc:	02 c0       	rjmp	.+4      	; 0x79d2 <_ZN6Output3offEv+0x5c>
    79ce:	88 0f       	add	r24, r24
    79d0:	99 1f       	adc	r25, r25
    79d2:	0a 94       	dec	r0
    79d4:	e2 f7       	brpl	.-8      	; 0x79ce <_ZN6Output3offEv+0x58>
    79d6:	80 95       	com	r24
    79d8:	82 23       	and	r24, r18
    79da:	88 b9       	out	0x08, r24	; 8
			break;
    79dc:	08 95       	ret
		case 'D':
			PORTD &= ~(1<<Pin);
    79de:	2b b1       	in	r18, 0x0b	; 11
    79e0:	81 e0       	ldi	r24, 0x01	; 1
    79e2:	90 e0       	ldi	r25, 0x00	; 0
    79e4:	01 80       	ldd	r0, Z+1	; 0x01
    79e6:	02 c0       	rjmp	.+4      	; 0x79ec <_ZN6Output3offEv+0x76>
    79e8:	88 0f       	add	r24, r24
    79ea:	99 1f       	adc	r25, r25
    79ec:	0a 94       	dec	r0
    79ee:	e2 f7       	brpl	.-8      	; 0x79e8 <_ZN6Output3offEv+0x72>
    79f0:	80 95       	com	r24
    79f2:	82 23       	and	r24, r18
    79f4:	8b b9       	out	0x0b, r24	; 11
    79f6:	08 95       	ret

000079f8 <_ZN3RTCD1Ev>:
	Tag=7;
	Monat=9;
	Jahr=15;
	ausgabedatumneu();
	ausgabezeitneu();
}
    79f8:	08 95       	ret

000079fa <_ZN3RTC6WeckerEv>:
    79fa:	fc 01       	movw	r30, r24
    79fc:	80 8d       	ldd	r24, Z+24	; 0x18
    79fe:	83 ff       	sbrs	r24, 3
    7a00:	0c c0       	rjmp	.+24     	; 0x7a1a <_ZN3RTC6WeckerEv+0x20>
    7a02:	84 fd       	sbrc	r24, 4
    7a04:	0a c0       	rjmp	.+20     	; 0x7a1a <_ZN3RTC6WeckerEv+0x20>
    7a06:	22 8d       	ldd	r18, Z+26	; 0x1a
    7a08:	90 89       	ldd	r25, Z+16	; 0x10
    7a0a:	29 13       	cpse	r18, r25
    7a0c:	06 c0       	rjmp	.+12     	; 0x7a1a <_ZN3RTC6WeckerEv+0x20>
    7a0e:	21 8d       	ldd	r18, Z+25	; 0x19
    7a10:	91 89       	ldd	r25, Z+17	; 0x11
    7a12:	29 13       	cpse	r18, r25
    7a14:	02 c0       	rjmp	.+4      	; 0x7a1a <_ZN3RTC6WeckerEv+0x20>
    7a16:	80 61       	ori	r24, 0x10	; 16
    7a18:	80 8f       	std	Z+24, r24	; 0x18
    7a1a:	08 95       	ret

00007a1c <_ZN3RTC14ausgabezeitneuEv>:
    7a1c:	fc 01       	movw	r30, r24
    7a1e:	20 89       	ldd	r18, Z+16	; 0x10
    7a20:	9d ec       	ldi	r25, 0xCD	; 205
    7a22:	29 9f       	mul	r18, r25
    7a24:	81 2d       	mov	r24, r1
    7a26:	11 24       	eor	r1, r1
    7a28:	86 95       	lsr	r24
    7a2a:	86 95       	lsr	r24
    7a2c:	86 95       	lsr	r24
    7a2e:	30 e3       	ldi	r19, 0x30	; 48
    7a30:	38 0f       	add	r19, r24
    7a32:	30 83       	st	Z, r19
    7a34:	88 0f       	add	r24, r24
    7a36:	38 2f       	mov	r19, r24
    7a38:	33 0f       	add	r19, r19
    7a3a:	33 0f       	add	r19, r19
    7a3c:	83 0f       	add	r24, r19
    7a3e:	28 1b       	sub	r18, r24
    7a40:	20 5d       	subi	r18, 0xD0	; 208
    7a42:	21 83       	std	Z+1, r18	; 0x01
    7a44:	21 89       	ldd	r18, Z+17	; 0x11
    7a46:	29 9f       	mul	r18, r25
    7a48:	81 2d       	mov	r24, r1
    7a4a:	11 24       	eor	r1, r1
    7a4c:	86 95       	lsr	r24
    7a4e:	86 95       	lsr	r24
    7a50:	86 95       	lsr	r24
    7a52:	30 e3       	ldi	r19, 0x30	; 48
    7a54:	38 0f       	add	r19, r24
    7a56:	33 83       	std	Z+3, r19	; 0x03
    7a58:	88 0f       	add	r24, r24
    7a5a:	38 2f       	mov	r19, r24
    7a5c:	33 0f       	add	r19, r19
    7a5e:	33 0f       	add	r19, r19
    7a60:	83 0f       	add	r24, r19
    7a62:	28 1b       	sub	r18, r24
    7a64:	20 5d       	subi	r18, 0xD0	; 208
    7a66:	24 83       	std	Z+4, r18	; 0x04
    7a68:	82 89       	ldd	r24, Z+18	; 0x12
    7a6a:	89 9f       	mul	r24, r25
    7a6c:	91 2d       	mov	r25, r1
    7a6e:	11 24       	eor	r1, r1
    7a70:	96 95       	lsr	r25
    7a72:	96 95       	lsr	r25
    7a74:	96 95       	lsr	r25
    7a76:	20 e3       	ldi	r18, 0x30	; 48
    7a78:	29 0f       	add	r18, r25
    7a7a:	26 83       	std	Z+6, r18	; 0x06
    7a7c:	99 0f       	add	r25, r25
    7a7e:	29 2f       	mov	r18, r25
    7a80:	22 0f       	add	r18, r18
    7a82:	22 0f       	add	r18, r18
    7a84:	92 0f       	add	r25, r18
    7a86:	89 1b       	sub	r24, r25
    7a88:	80 5d       	subi	r24, 0xD0	; 208
    7a8a:	87 83       	std	Z+7, r24	; 0x07
    7a8c:	08 95       	ret

00007a8e <_ZN3RTC15ausgabedatumneuEv>:
    7a8e:	fc 01       	movw	r30, r24
    7a90:	24 89       	ldd	r18, Z+20	; 0x14
    7a92:	9d ec       	ldi	r25, 0xCD	; 205
    7a94:	29 9f       	mul	r18, r25
    7a96:	81 2d       	mov	r24, r1
    7a98:	11 24       	eor	r1, r1
    7a9a:	86 95       	lsr	r24
    7a9c:	86 95       	lsr	r24
    7a9e:	86 95       	lsr	r24
    7aa0:	30 e3       	ldi	r19, 0x30	; 48
    7aa2:	38 0f       	add	r19, r24
    7aa4:	30 87       	std	Z+8, r19	; 0x08
    7aa6:	88 0f       	add	r24, r24
    7aa8:	38 2f       	mov	r19, r24
    7aaa:	33 0f       	add	r19, r19
    7aac:	33 0f       	add	r19, r19
    7aae:	83 0f       	add	r24, r19
    7ab0:	28 1b       	sub	r18, r24
    7ab2:	20 5d       	subi	r18, 0xD0	; 208
    7ab4:	21 87       	std	Z+9, r18	; 0x09
    7ab6:	26 89       	ldd	r18, Z+22	; 0x16
    7ab8:	29 9f       	mul	r18, r25
    7aba:	81 2d       	mov	r24, r1
    7abc:	11 24       	eor	r1, r1
    7abe:	86 95       	lsr	r24
    7ac0:	86 95       	lsr	r24
    7ac2:	86 95       	lsr	r24
    7ac4:	30 e3       	ldi	r19, 0x30	; 48
    7ac6:	38 0f       	add	r19, r24
    7ac8:	33 87       	std	Z+11, r19	; 0x0b
    7aca:	88 0f       	add	r24, r24
    7acc:	38 2f       	mov	r19, r24
    7ace:	33 0f       	add	r19, r19
    7ad0:	33 0f       	add	r19, r19
    7ad2:	83 0f       	add	r24, r19
    7ad4:	28 1b       	sub	r18, r24
    7ad6:	20 5d       	subi	r18, 0xD0	; 208
    7ad8:	24 87       	std	Z+12, r18	; 0x0c
    7ada:	87 89       	ldd	r24, Z+23	; 0x17
    7adc:	89 9f       	mul	r24, r25
    7ade:	91 2d       	mov	r25, r1
    7ae0:	11 24       	eor	r1, r1
    7ae2:	96 95       	lsr	r25
    7ae4:	96 95       	lsr	r25
    7ae6:	96 95       	lsr	r25
    7ae8:	20 e3       	ldi	r18, 0x30	; 48
    7aea:	29 0f       	add	r18, r25
    7aec:	26 87       	std	Z+14, r18	; 0x0e
    7aee:	99 0f       	add	r25, r25
    7af0:	29 2f       	mov	r18, r25
    7af2:	22 0f       	add	r18, r18
    7af4:	22 0f       	add	r18, r18
    7af6:	92 0f       	add	r25, r18
    7af8:	89 1b       	sub	r24, r25
    7afa:	80 5d       	subi	r24, 0xD0	; 208
    7afc:	87 87       	std	Z+15, r24	; 0x0f
    7afe:	08 95       	ret

00007b00 <_ZN3RTCC1Ev>:
    7b00:	cf 93       	push	r28
    7b02:	df 93       	push	r29
    7b04:	ec 01       	movw	r28, r24
    7b06:	1a 8a       	std	Y+18, r1	; 0x12
    7b08:	1b 8a       	std	Y+19, r1	; 0x13
    7b0a:	19 8a       	std	Y+17, r1	; 0x11
    7b0c:	18 8a       	std	Y+16, r1	; 0x10
    7b0e:	1c 8a       	std	Y+20, r1	; 0x14
    7b10:	1e 8a       	std	Y+22, r1	; 0x16
    7b12:	1f 8a       	std	Y+23, r1	; 0x17
    7b14:	1d 8a       	std	Y+21, r1	; 0x15
    7b16:	88 e2       	ldi	r24, 0x28	; 40
    7b18:	89 8f       	std	Y+25, r24	; 0x19
    7b1a:	8a e0       	ldi	r24, 0x0A	; 10
    7b1c:	8a 8f       	std	Y+26, r24	; 0x1a
    7b1e:	1c 8e       	std	Y+28, r1	; 0x1c
    7b20:	1b 8e       	std	Y+27, r1	; 0x1b
    7b22:	1e 8e       	std	Y+30, r1	; 0x1e
    7b24:	1d 8e       	std	Y+29, r1	; 0x1d
    7b26:	fe 01       	movw	r30, r28
    7b28:	ce 01       	movw	r24, r28
    7b2a:	08 96       	adiw	r24, 0x08	; 8
    7b2c:	dc 01       	movw	r26, r24
    7b2e:	11 92       	st	Z+, r1
    7b30:	1d 92       	st	X+, r1
    7b32:	e8 17       	cp	r30, r24
    7b34:	f9 07       	cpc	r31, r25
    7b36:	d9 f7       	brne	.-10     	; 0x7b2e <_ZN3RTCC1Ev+0x2e>
    7b38:	8a e3       	ldi	r24, 0x3A	; 58
    7b3a:	8a 83       	std	Y+2, r24	; 0x02
    7b3c:	8d 83       	std	Y+5, r24	; 0x05
    7b3e:	8e e2       	ldi	r24, 0x2E	; 46
    7b40:	8a 87       	std	Y+10, r24	; 0x0a
    7b42:	8d 87       	std	Y+13, r24	; 0x0d
    7b44:	ce 01       	movw	r24, r28
    7b46:	6a df       	rcall	.-300    	; 0x7a1c <_ZN3RTC14ausgabezeitneuEv>
    7b48:	ce 01       	movw	r24, r28
    7b4a:	a1 df       	rcall	.-190    	; 0x7a8e <_ZN3RTC15ausgabedatumneuEv>
    7b4c:	df 91       	pop	r29
    7b4e:	cf 91       	pop	r28
    7b50:	08 95       	ret

00007b52 <_ZN3RTC8kalenderEv>:
    7b52:	fc 01       	movw	r30, r24
    7b54:	26 89       	ldd	r18, Z+22	; 0x16
    7b56:	32 2f       	mov	r19, r18
    7b58:	3d 7f       	andi	r19, 0xFD	; 253
    7b5a:	34 30       	cpi	r19, 0x04	; 4
    7b5c:	11 f0       	breq	.+4      	; 0x7b62 <_ZN3RTC8kalenderEv+0x10>
    7b5e:	39 30       	cpi	r19, 0x09	; 9
    7b60:	91 f4       	brne	.+36     	; 0x7b86 <_ZN3RTC8kalenderEv+0x34>
    7b62:	fc 01       	movw	r30, r24
    7b64:	34 89       	ldd	r19, Z+20	; 0x14
    7b66:	3f 31       	cpi	r19, 0x1F	; 31
    7b68:	b0 f1       	brcs	.+108    	; 0x7bd6 <_ZN3RTC8kalenderEv+0x84>
    7b6a:	31 e0       	ldi	r19, 0x01	; 1
    7b6c:	34 8b       	std	Z+20, r19	; 0x14
    7b6e:	2f 5f       	subi	r18, 0xFF	; 255
    7b70:	2d 30       	cpi	r18, 0x0D	; 13
    7b72:	10 f4       	brcc	.+4      	; 0x7b78 <_ZN3RTC8kalenderEv+0x26>
    7b74:	26 8b       	std	Z+22, r18	; 0x16
    7b76:	2f c0       	rjmp	.+94     	; 0x7bd6 <_ZN3RTC8kalenderEv+0x84>
    7b78:	21 e0       	ldi	r18, 0x01	; 1
    7b7a:	fc 01       	movw	r30, r24
    7b7c:	26 8b       	std	Z+22, r18	; 0x16
    7b7e:	27 89       	ldd	r18, Z+23	; 0x17
    7b80:	2f 5f       	subi	r18, 0xFF	; 255
    7b82:	27 8b       	std	Z+23, r18	; 0x17
    7b84:	28 c0       	rjmp	.+80     	; 0x7bd6 <_ZN3RTC8kalenderEv+0x84>
    7b86:	22 30       	cpi	r18, 0x02	; 2
    7b88:	a9 f4       	brne	.+42     	; 0x7bb4 <_ZN3RTC8kalenderEv+0x62>
    7b8a:	fc 01       	movw	r30, r24
    7b8c:	27 89       	ldd	r18, Z+23	; 0x17
    7b8e:	23 70       	andi	r18, 0x03	; 3
    7b90:	41 f4       	brne	.+16     	; 0x7ba2 <_ZN3RTC8kalenderEv+0x50>
    7b92:	24 89       	ldd	r18, Z+20	; 0x14
    7b94:	2e 31       	cpi	r18, 0x1E	; 30
    7b96:	f8 f0       	brcs	.+62     	; 0x7bd6 <_ZN3RTC8kalenderEv+0x84>
    7b98:	21 e0       	ldi	r18, 0x01	; 1
    7b9a:	24 8b       	std	Z+20, r18	; 0x14
    7b9c:	23 e0       	ldi	r18, 0x03	; 3
    7b9e:	26 8b       	std	Z+22, r18	; 0x16
    7ba0:	1a c0       	rjmp	.+52     	; 0x7bd6 <_ZN3RTC8kalenderEv+0x84>
    7ba2:	fc 01       	movw	r30, r24
    7ba4:	24 89       	ldd	r18, Z+20	; 0x14
    7ba6:	2d 31       	cpi	r18, 0x1D	; 29
    7ba8:	b0 f0       	brcs	.+44     	; 0x7bd6 <_ZN3RTC8kalenderEv+0x84>
    7baa:	21 e0       	ldi	r18, 0x01	; 1
    7bac:	24 8b       	std	Z+20, r18	; 0x14
    7bae:	23 e0       	ldi	r18, 0x03	; 3
    7bb0:	26 8b       	std	Z+22, r18	; 0x16
    7bb2:	11 c0       	rjmp	.+34     	; 0x7bd6 <_ZN3RTC8kalenderEv+0x84>
    7bb4:	fc 01       	movw	r30, r24
    7bb6:	34 89       	ldd	r19, Z+20	; 0x14
    7bb8:	30 32       	cpi	r19, 0x20	; 32
    7bba:	68 f0       	brcs	.+26     	; 0x7bd6 <_ZN3RTC8kalenderEv+0x84>
    7bbc:	31 e0       	ldi	r19, 0x01	; 1
    7bbe:	34 8b       	std	Z+20, r19	; 0x14
    7bc0:	2f 5f       	subi	r18, 0xFF	; 255
    7bc2:	2d 30       	cpi	r18, 0x0D	; 13
    7bc4:	10 f4       	brcc	.+4      	; 0x7bca <_ZN3RTC8kalenderEv+0x78>
    7bc6:	26 8b       	std	Z+22, r18	; 0x16
    7bc8:	06 c0       	rjmp	.+12     	; 0x7bd6 <_ZN3RTC8kalenderEv+0x84>
    7bca:	21 e0       	ldi	r18, 0x01	; 1
    7bcc:	fc 01       	movw	r30, r24
    7bce:	26 8b       	std	Z+22, r18	; 0x16
    7bd0:	27 89       	ldd	r18, Z+23	; 0x17
    7bd2:	2f 5f       	subi	r18, 0xFF	; 255
    7bd4:	27 8b       	std	Z+23, r18	; 0x17
    7bd6:	5b cf       	rjmp	.-330    	; 0x7a8e <_ZN3RTC15ausgabedatumneuEv>
    7bd8:	08 95       	ret

00007bda <_ZN3RTC4zeitEv>:
    7bda:	cf 93       	push	r28
    7bdc:	df 93       	push	r29
    7bde:	ec 01       	movw	r28, r24
    7be0:	8a 89       	ldd	r24, Y+18	; 0x12
    7be2:	8c 53       	subi	r24, 0x3C	; 60
    7be4:	8d 38       	cpi	r24, 0x8D	; 141
    7be6:	c0 f4       	brcc	.+48     	; 0x7c18 <_ZN3RTC4zeitEv+0x3e>
    7be8:	1a 8a       	std	Y+18, r1	; 0x12
    7bea:	89 89       	ldd	r24, Y+17	; 0x11
    7bec:	8f 5f       	subi	r24, 0xFF	; 255
    7bee:	89 8b       	std	Y+17, r24	; 0x11
    7bf0:	98 8d       	ldd	r25, Y+24	; 0x18
    7bf2:	94 60       	ori	r25, 0x04	; 4
    7bf4:	98 8f       	std	Y+24, r25	; 0x18
    7bf6:	8c 33       	cpi	r24, 0x3C	; 60
    7bf8:	68 f0       	brcs	.+26     	; 0x7c14 <_ZN3RTC4zeitEv+0x3a>
    7bfa:	19 8a       	std	Y+17, r1	; 0x11
    7bfc:	88 89       	ldd	r24, Y+16	; 0x10
    7bfe:	8f 5f       	subi	r24, 0xFF	; 255
    7c00:	88 31       	cpi	r24, 0x18	; 24
    7c02:	10 f4       	brcc	.+4      	; 0x7c08 <_ZN3RTC4zeitEv+0x2e>
    7c04:	88 8b       	std	Y+16, r24	; 0x10
    7c06:	06 c0       	rjmp	.+12     	; 0x7c14 <_ZN3RTC4zeitEv+0x3a>
    7c08:	18 8a       	std	Y+16, r1	; 0x10
    7c0a:	8c 89       	ldd	r24, Y+20	; 0x14
    7c0c:	8f 5f       	subi	r24, 0xFF	; 255
    7c0e:	8c 8b       	std	Y+20, r24	; 0x14
    7c10:	ce 01       	movw	r24, r28
    7c12:	9f df       	rcall	.-194    	; 0x7b52 <_ZN3RTC8kalenderEv>
    7c14:	ce 01       	movw	r24, r28
    7c16:	f1 de       	rcall	.-542    	; 0x79fa <_ZN3RTC6WeckerEv>
    7c18:	ce 01       	movw	r24, r28
    7c1a:	00 df       	rcall	.-512    	; 0x7a1c <_ZN3RTC14ausgabezeitneuEv>
    7c1c:	88 8d       	ldd	r24, Y+24	; 0x18
    7c1e:	85 ff       	sbrs	r24, 5
    7c20:	0b c0       	rjmp	.+22     	; 0x7c38 <_ZN3RTC4zeitEv+0x5e>
    7c22:	2b 8d       	ldd	r18, Y+27	; 0x1b
    7c24:	3c 8d       	ldd	r19, Y+28	; 0x1c
    7c26:	21 50       	subi	r18, 0x01	; 1
    7c28:	31 09       	sbc	r19, r1
    7c2a:	3c 8f       	std	Y+28, r19	; 0x1c
    7c2c:	2b 8f       	std	Y+27, r18	; 0x1b
    7c2e:	23 2b       	or	r18, r19
    7c30:	19 f4       	brne	.+6      	; 0x7c38 <_ZN3RTC4zeitEv+0x5e>
    7c32:	8f 7d       	andi	r24, 0xDF	; 223
    7c34:	81 60       	ori	r24, 0x01	; 1
    7c36:	88 8f       	std	Y+24, r24	; 0x18
    7c38:	88 8d       	ldd	r24, Y+24	; 0x18
    7c3a:	86 ff       	sbrs	r24, 6
    7c3c:	05 c0       	rjmp	.+10     	; 0x7c48 <_ZN3RTC4zeitEv+0x6e>
    7c3e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    7c40:	9e 8d       	ldd	r25, Y+30	; 0x1e
    7c42:	01 96       	adiw	r24, 0x01	; 1
    7c44:	9e 8f       	std	Y+30, r25	; 0x1e
    7c46:	8d 8f       	std	Y+29, r24	; 0x1d
    7c48:	80 e0       	ldi	r24, 0x00	; 0
    7c4a:	df 91       	pop	r29
    7c4c:	cf 91       	pop	r28
    7c4e:	08 95       	ret

00007c50 <_ZN3RTC8RTCstartEv>:

void RTC::RTCstart(){
    7c50:	fc 01       	movw	r30, r24
	//Einstellungen des Ausgabebuffers
	msg_uhr[0]='0';
    7c52:	80 e3       	ldi	r24, 0x30	; 48
    7c54:	80 83       	st	Z, r24
	msg_uhr[1]='0';
    7c56:	81 83       	std	Z+1, r24	; 0x01
	msg_uhr[2]=':';
    7c58:	9a e3       	ldi	r25, 0x3A	; 58
    7c5a:	92 83       	std	Z+2, r25	; 0x02
	msg_uhr[3]='0';
    7c5c:	83 83       	std	Z+3, r24	; 0x03
	msg_uhr[4]='0';
    7c5e:	84 83       	std	Z+4, r24	; 0x04
	msg_uhr[5]=':';
    7c60:	95 83       	std	Z+5, r25	; 0x05
	msg_uhr[6]='0';
    7c62:	86 83       	std	Z+6, r24	; 0x06
	msg_uhr[7]='0';
    7c64:	87 83       	std	Z+7, r24	; 0x07
	interupts = 0;
    7c66:	10 8e       	std	Z+24, r1	; 0x18
	//Timer2 als 1ms Timer fuer die RTC
	//asynchron mit 32.768 kHz 
	TCNT2 = TIMER2RTCTIME;
    7c68:	10 92 b2 00 	sts	0x00B2, r1
	ASSR |= (1<<AS2);
    7c6c:	e6 eb       	ldi	r30, 0xB6	; 182
    7c6e:	f0 e0       	ldi	r31, 0x00	; 0
    7c70:	80 81       	ld	r24, Z
    7c72:	80 62       	ori	r24, 0x20	; 32
    7c74:	80 83       	st	Z, r24
	TIMSK2 = (1<<TOIE2);
    7c76:	81 e0       	ldi	r24, 0x01	; 1
    7c78:	80 93 70 00 	sts	0x0070, r24
	TCCR2B = (1<<CS22) | (1<<CS20);		//Vorteiler 256
    7c7c:	85 e0       	ldi	r24, 0x05	; 5
    7c7e:	80 93 b1 00 	sts	0x00B1, r24
    7c82:	08 95       	ret

00007c84 <_ZN3RTC7RTCstopEv>:
}

void RTC::RTCstop(){
	TCCR2B &= ~((1<<CS22) | (1<<CS21));
    7c84:	e1 eb       	ldi	r30, 0xB1	; 177
    7c86:	f0 e0       	ldi	r31, 0x00	; 0
    7c88:	80 81       	ld	r24, Z
    7c8a:	89 7f       	andi	r24, 0xF9	; 249
    7c8c:	80 83       	st	Z, r24
    7c8e:	08 95       	ret

00007c90 <__subsf3>:
    7c90:	50 58       	subi	r21, 0x80	; 128

00007c92 <__addsf3>:
    7c92:	bb 27       	eor	r27, r27
    7c94:	aa 27       	eor	r26, r26
    7c96:	0e d0       	rcall	.+28     	; 0x7cb4 <__addsf3x>
    7c98:	c1 c1       	rjmp	.+898    	; 0x801c <__fp_round>
    7c9a:	8a d1       	rcall	.+788    	; 0x7fb0 <__fp_pscA>
    7c9c:	30 f0       	brcs	.+12     	; 0x7caa <__addsf3+0x18>
    7c9e:	8f d1       	rcall	.+798    	; 0x7fbe <__fp_pscB>
    7ca0:	20 f0       	brcs	.+8      	; 0x7caa <__addsf3+0x18>
    7ca2:	31 f4       	brne	.+12     	; 0x7cb0 <__addsf3+0x1e>
    7ca4:	9f 3f       	cpi	r25, 0xFF	; 255
    7ca6:	11 f4       	brne	.+4      	; 0x7cac <__addsf3+0x1a>
    7ca8:	1e f4       	brtc	.+6      	; 0x7cb0 <__addsf3+0x1e>
    7caa:	5a c1       	rjmp	.+692    	; 0x7f60 <__fp_nan>
    7cac:	0e f4       	brtc	.+2      	; 0x7cb0 <__addsf3+0x1e>
    7cae:	e0 95       	com	r30
    7cb0:	e7 fb       	bst	r30, 7
    7cb2:	50 c1       	rjmp	.+672    	; 0x7f54 <__fp_inf>

00007cb4 <__addsf3x>:
    7cb4:	e9 2f       	mov	r30, r25
    7cb6:	d4 d1       	rcall	.+936    	; 0x8060 <__fp_split3>
    7cb8:	80 f3       	brcs	.-32     	; 0x7c9a <__addsf3+0x8>
    7cba:	ba 17       	cp	r27, r26
    7cbc:	62 07       	cpc	r22, r18
    7cbe:	73 07       	cpc	r23, r19
    7cc0:	84 07       	cpc	r24, r20
    7cc2:	95 07       	cpc	r25, r21
    7cc4:	18 f0       	brcs	.+6      	; 0x7ccc <__addsf3x+0x18>
    7cc6:	71 f4       	brne	.+28     	; 0x7ce4 <__addsf3x+0x30>
    7cc8:	9e f5       	brtc	.+102    	; 0x7d30 <__addsf3x+0x7c>
    7cca:	ec c1       	rjmp	.+984    	; 0x80a4 <__fp_zero>
    7ccc:	0e f4       	brtc	.+2      	; 0x7cd0 <__addsf3x+0x1c>
    7cce:	e0 95       	com	r30
    7cd0:	0b 2e       	mov	r0, r27
    7cd2:	ba 2f       	mov	r27, r26
    7cd4:	a0 2d       	mov	r26, r0
    7cd6:	0b 01       	movw	r0, r22
    7cd8:	b9 01       	movw	r22, r18
    7cda:	90 01       	movw	r18, r0
    7cdc:	0c 01       	movw	r0, r24
    7cde:	ca 01       	movw	r24, r20
    7ce0:	a0 01       	movw	r20, r0
    7ce2:	11 24       	eor	r1, r1
    7ce4:	ff 27       	eor	r31, r31
    7ce6:	59 1b       	sub	r21, r25
    7ce8:	99 f0       	breq	.+38     	; 0x7d10 <__addsf3x+0x5c>
    7cea:	59 3f       	cpi	r21, 0xF9	; 249
    7cec:	50 f4       	brcc	.+20     	; 0x7d02 <__addsf3x+0x4e>
    7cee:	50 3e       	cpi	r21, 0xE0	; 224
    7cf0:	68 f1       	brcs	.+90     	; 0x7d4c <__addsf3x+0x98>
    7cf2:	1a 16       	cp	r1, r26
    7cf4:	f0 40       	sbci	r31, 0x00	; 0
    7cf6:	a2 2f       	mov	r26, r18
    7cf8:	23 2f       	mov	r18, r19
    7cfa:	34 2f       	mov	r19, r20
    7cfc:	44 27       	eor	r20, r20
    7cfe:	58 5f       	subi	r21, 0xF8	; 248
    7d00:	f3 cf       	rjmp	.-26     	; 0x7ce8 <__addsf3x+0x34>
    7d02:	46 95       	lsr	r20
    7d04:	37 95       	ror	r19
    7d06:	27 95       	ror	r18
    7d08:	a7 95       	ror	r26
    7d0a:	f0 40       	sbci	r31, 0x00	; 0
    7d0c:	53 95       	inc	r21
    7d0e:	c9 f7       	brne	.-14     	; 0x7d02 <__addsf3x+0x4e>
    7d10:	7e f4       	brtc	.+30     	; 0x7d30 <__addsf3x+0x7c>
    7d12:	1f 16       	cp	r1, r31
    7d14:	ba 0b       	sbc	r27, r26
    7d16:	62 0b       	sbc	r22, r18
    7d18:	73 0b       	sbc	r23, r19
    7d1a:	84 0b       	sbc	r24, r20
    7d1c:	ba f0       	brmi	.+46     	; 0x7d4c <__addsf3x+0x98>
    7d1e:	91 50       	subi	r25, 0x01	; 1
    7d20:	a1 f0       	breq	.+40     	; 0x7d4a <__addsf3x+0x96>
    7d22:	ff 0f       	add	r31, r31
    7d24:	bb 1f       	adc	r27, r27
    7d26:	66 1f       	adc	r22, r22
    7d28:	77 1f       	adc	r23, r23
    7d2a:	88 1f       	adc	r24, r24
    7d2c:	c2 f7       	brpl	.-16     	; 0x7d1e <__addsf3x+0x6a>
    7d2e:	0e c0       	rjmp	.+28     	; 0x7d4c <__addsf3x+0x98>
    7d30:	ba 0f       	add	r27, r26
    7d32:	62 1f       	adc	r22, r18
    7d34:	73 1f       	adc	r23, r19
    7d36:	84 1f       	adc	r24, r20
    7d38:	48 f4       	brcc	.+18     	; 0x7d4c <__addsf3x+0x98>
    7d3a:	87 95       	ror	r24
    7d3c:	77 95       	ror	r23
    7d3e:	67 95       	ror	r22
    7d40:	b7 95       	ror	r27
    7d42:	f7 95       	ror	r31
    7d44:	9e 3f       	cpi	r25, 0xFE	; 254
    7d46:	08 f0       	brcs	.+2      	; 0x7d4a <__addsf3x+0x96>
    7d48:	b3 cf       	rjmp	.-154    	; 0x7cb0 <__addsf3+0x1e>
    7d4a:	93 95       	inc	r25
    7d4c:	88 0f       	add	r24, r24
    7d4e:	08 f0       	brcs	.+2      	; 0x7d52 <__addsf3x+0x9e>
    7d50:	99 27       	eor	r25, r25
    7d52:	ee 0f       	add	r30, r30
    7d54:	97 95       	ror	r25
    7d56:	87 95       	ror	r24
    7d58:	08 95       	ret

00007d5a <cos>:
    7d5a:	39 d1       	rcall	.+626    	; 0x7fce <__fp_rempio2>
    7d5c:	e3 95       	inc	r30
    7d5e:	6f c1       	rjmp	.+734    	; 0x803e <__fp_sinus>

00007d60 <__divsf3>:
    7d60:	0c d0       	rcall	.+24     	; 0x7d7a <__divsf3x>
    7d62:	5c c1       	rjmp	.+696    	; 0x801c <__fp_round>
    7d64:	2c d1       	rcall	.+600    	; 0x7fbe <__fp_pscB>
    7d66:	40 f0       	brcs	.+16     	; 0x7d78 <__divsf3+0x18>
    7d68:	23 d1       	rcall	.+582    	; 0x7fb0 <__fp_pscA>
    7d6a:	30 f0       	brcs	.+12     	; 0x7d78 <__divsf3+0x18>
    7d6c:	21 f4       	brne	.+8      	; 0x7d76 <__divsf3+0x16>
    7d6e:	5f 3f       	cpi	r21, 0xFF	; 255
    7d70:	19 f0       	breq	.+6      	; 0x7d78 <__divsf3+0x18>
    7d72:	f0 c0       	rjmp	.+480    	; 0x7f54 <__fp_inf>
    7d74:	51 11       	cpse	r21, r1
    7d76:	97 c1       	rjmp	.+814    	; 0x80a6 <__fp_szero>
    7d78:	f3 c0       	rjmp	.+486    	; 0x7f60 <__fp_nan>

00007d7a <__divsf3x>:
    7d7a:	72 d1       	rcall	.+740    	; 0x8060 <__fp_split3>
    7d7c:	98 f3       	brcs	.-26     	; 0x7d64 <__divsf3+0x4>

00007d7e <__divsf3_pse>:
    7d7e:	99 23       	and	r25, r25
    7d80:	c9 f3       	breq	.-14     	; 0x7d74 <__divsf3+0x14>
    7d82:	55 23       	and	r21, r21
    7d84:	b1 f3       	breq	.-20     	; 0x7d72 <__divsf3+0x12>
    7d86:	95 1b       	sub	r25, r21
    7d88:	55 0b       	sbc	r21, r21
    7d8a:	bb 27       	eor	r27, r27
    7d8c:	aa 27       	eor	r26, r26
    7d8e:	62 17       	cp	r22, r18
    7d90:	73 07       	cpc	r23, r19
    7d92:	84 07       	cpc	r24, r20
    7d94:	38 f0       	brcs	.+14     	; 0x7da4 <__divsf3_pse+0x26>
    7d96:	9f 5f       	subi	r25, 0xFF	; 255
    7d98:	5f 4f       	sbci	r21, 0xFF	; 255
    7d9a:	22 0f       	add	r18, r18
    7d9c:	33 1f       	adc	r19, r19
    7d9e:	44 1f       	adc	r20, r20
    7da0:	aa 1f       	adc	r26, r26
    7da2:	a9 f3       	breq	.-22     	; 0x7d8e <__divsf3_pse+0x10>
    7da4:	33 d0       	rcall	.+102    	; 0x7e0c <__divsf3_pse+0x8e>
    7da6:	0e 2e       	mov	r0, r30
    7da8:	3a f0       	brmi	.+14     	; 0x7db8 <__divsf3_pse+0x3a>
    7daa:	e0 e8       	ldi	r30, 0x80	; 128
    7dac:	30 d0       	rcall	.+96     	; 0x7e0e <__divsf3_pse+0x90>
    7dae:	91 50       	subi	r25, 0x01	; 1
    7db0:	50 40       	sbci	r21, 0x00	; 0
    7db2:	e6 95       	lsr	r30
    7db4:	00 1c       	adc	r0, r0
    7db6:	ca f7       	brpl	.-14     	; 0x7daa <__divsf3_pse+0x2c>
    7db8:	29 d0       	rcall	.+82     	; 0x7e0c <__divsf3_pse+0x8e>
    7dba:	fe 2f       	mov	r31, r30
    7dbc:	27 d0       	rcall	.+78     	; 0x7e0c <__divsf3_pse+0x8e>
    7dbe:	66 0f       	add	r22, r22
    7dc0:	77 1f       	adc	r23, r23
    7dc2:	88 1f       	adc	r24, r24
    7dc4:	bb 1f       	adc	r27, r27
    7dc6:	26 17       	cp	r18, r22
    7dc8:	37 07       	cpc	r19, r23
    7dca:	48 07       	cpc	r20, r24
    7dcc:	ab 07       	cpc	r26, r27
    7dce:	b0 e8       	ldi	r27, 0x80	; 128
    7dd0:	09 f0       	breq	.+2      	; 0x7dd4 <__divsf3_pse+0x56>
    7dd2:	bb 0b       	sbc	r27, r27
    7dd4:	80 2d       	mov	r24, r0
    7dd6:	bf 01       	movw	r22, r30
    7dd8:	ff 27       	eor	r31, r31
    7dda:	93 58       	subi	r25, 0x83	; 131
    7ddc:	5f 4f       	sbci	r21, 0xFF	; 255
    7dde:	2a f0       	brmi	.+10     	; 0x7dea <__divsf3_pse+0x6c>
    7de0:	9e 3f       	cpi	r25, 0xFE	; 254
    7de2:	51 05       	cpc	r21, r1
    7de4:	68 f0       	brcs	.+26     	; 0x7e00 <__divsf3_pse+0x82>
    7de6:	b6 c0       	rjmp	.+364    	; 0x7f54 <__fp_inf>
    7de8:	5e c1       	rjmp	.+700    	; 0x80a6 <__fp_szero>
    7dea:	5f 3f       	cpi	r21, 0xFF	; 255
    7dec:	ec f3       	brlt	.-6      	; 0x7de8 <__divsf3_pse+0x6a>
    7dee:	98 3e       	cpi	r25, 0xE8	; 232
    7df0:	dc f3       	brlt	.-10     	; 0x7de8 <__divsf3_pse+0x6a>
    7df2:	86 95       	lsr	r24
    7df4:	77 95       	ror	r23
    7df6:	67 95       	ror	r22
    7df8:	b7 95       	ror	r27
    7dfa:	f7 95       	ror	r31
    7dfc:	9f 5f       	subi	r25, 0xFF	; 255
    7dfe:	c9 f7       	brne	.-14     	; 0x7df2 <__divsf3_pse+0x74>
    7e00:	88 0f       	add	r24, r24
    7e02:	91 1d       	adc	r25, r1
    7e04:	96 95       	lsr	r25
    7e06:	87 95       	ror	r24
    7e08:	97 f9       	bld	r25, 7
    7e0a:	08 95       	ret
    7e0c:	e1 e0       	ldi	r30, 0x01	; 1
    7e0e:	66 0f       	add	r22, r22
    7e10:	77 1f       	adc	r23, r23
    7e12:	88 1f       	adc	r24, r24
    7e14:	bb 1f       	adc	r27, r27
    7e16:	62 17       	cp	r22, r18
    7e18:	73 07       	cpc	r23, r19
    7e1a:	84 07       	cpc	r24, r20
    7e1c:	ba 07       	cpc	r27, r26
    7e1e:	20 f0       	brcs	.+8      	; 0x7e28 <__divsf3_pse+0xaa>
    7e20:	62 1b       	sub	r22, r18
    7e22:	73 0b       	sbc	r23, r19
    7e24:	84 0b       	sbc	r24, r20
    7e26:	ba 0b       	sbc	r27, r26
    7e28:	ee 1f       	adc	r30, r30
    7e2a:	88 f7       	brcc	.-30     	; 0x7e0e <__divsf3_pse+0x90>
    7e2c:	e0 95       	com	r30
    7e2e:	08 95       	ret

00007e30 <__fixsfsi>:
    7e30:	04 d0       	rcall	.+8      	; 0x7e3a <__fixunssfsi>
    7e32:	68 94       	set
    7e34:	b1 11       	cpse	r27, r1
    7e36:	37 c1       	rjmp	.+622    	; 0x80a6 <__fp_szero>
    7e38:	08 95       	ret

00007e3a <__fixunssfsi>:
    7e3a:	1a d1       	rcall	.+564    	; 0x8070 <__fp_splitA>
    7e3c:	88 f0       	brcs	.+34     	; 0x7e60 <__fixunssfsi+0x26>
    7e3e:	9f 57       	subi	r25, 0x7F	; 127
    7e40:	90 f0       	brcs	.+36     	; 0x7e66 <__fixunssfsi+0x2c>
    7e42:	b9 2f       	mov	r27, r25
    7e44:	99 27       	eor	r25, r25
    7e46:	b7 51       	subi	r27, 0x17	; 23
    7e48:	a0 f0       	brcs	.+40     	; 0x7e72 <__fixunssfsi+0x38>
    7e4a:	d1 f0       	breq	.+52     	; 0x7e80 <__fixunssfsi+0x46>
    7e4c:	66 0f       	add	r22, r22
    7e4e:	77 1f       	adc	r23, r23
    7e50:	88 1f       	adc	r24, r24
    7e52:	99 1f       	adc	r25, r25
    7e54:	1a f0       	brmi	.+6      	; 0x7e5c <__fixunssfsi+0x22>
    7e56:	ba 95       	dec	r27
    7e58:	c9 f7       	brne	.-14     	; 0x7e4c <__fixunssfsi+0x12>
    7e5a:	12 c0       	rjmp	.+36     	; 0x7e80 <__fixunssfsi+0x46>
    7e5c:	b1 30       	cpi	r27, 0x01	; 1
    7e5e:	81 f0       	breq	.+32     	; 0x7e80 <__fixunssfsi+0x46>
    7e60:	21 d1       	rcall	.+578    	; 0x80a4 <__fp_zero>
    7e62:	b1 e0       	ldi	r27, 0x01	; 1
    7e64:	08 95       	ret
    7e66:	1e c1       	rjmp	.+572    	; 0x80a4 <__fp_zero>
    7e68:	67 2f       	mov	r22, r23
    7e6a:	78 2f       	mov	r23, r24
    7e6c:	88 27       	eor	r24, r24
    7e6e:	b8 5f       	subi	r27, 0xF8	; 248
    7e70:	39 f0       	breq	.+14     	; 0x7e80 <__fixunssfsi+0x46>
    7e72:	b9 3f       	cpi	r27, 0xF9	; 249
    7e74:	cc f3       	brlt	.-14     	; 0x7e68 <__fixunssfsi+0x2e>
    7e76:	86 95       	lsr	r24
    7e78:	77 95       	ror	r23
    7e7a:	67 95       	ror	r22
    7e7c:	b3 95       	inc	r27
    7e7e:	d9 f7       	brne	.-10     	; 0x7e76 <__fixunssfsi+0x3c>
    7e80:	3e f4       	brtc	.+14     	; 0x7e90 <__fixunssfsi+0x56>
    7e82:	90 95       	com	r25
    7e84:	80 95       	com	r24
    7e86:	70 95       	com	r23
    7e88:	61 95       	neg	r22
    7e8a:	7f 4f       	sbci	r23, 0xFF	; 255
    7e8c:	8f 4f       	sbci	r24, 0xFF	; 255
    7e8e:	9f 4f       	sbci	r25, 0xFF	; 255
    7e90:	08 95       	ret

00007e92 <__floatunsisf>:
    7e92:	e8 94       	clt
    7e94:	09 c0       	rjmp	.+18     	; 0x7ea8 <__floatsisf+0x12>

00007e96 <__floatsisf>:
    7e96:	97 fb       	bst	r25, 7
    7e98:	3e f4       	brtc	.+14     	; 0x7ea8 <__floatsisf+0x12>
    7e9a:	90 95       	com	r25
    7e9c:	80 95       	com	r24
    7e9e:	70 95       	com	r23
    7ea0:	61 95       	neg	r22
    7ea2:	7f 4f       	sbci	r23, 0xFF	; 255
    7ea4:	8f 4f       	sbci	r24, 0xFF	; 255
    7ea6:	9f 4f       	sbci	r25, 0xFF	; 255
    7ea8:	99 23       	and	r25, r25
    7eaa:	a9 f0       	breq	.+42     	; 0x7ed6 <__floatsisf+0x40>
    7eac:	f9 2f       	mov	r31, r25
    7eae:	96 e9       	ldi	r25, 0x96	; 150
    7eb0:	bb 27       	eor	r27, r27
    7eb2:	93 95       	inc	r25
    7eb4:	f6 95       	lsr	r31
    7eb6:	87 95       	ror	r24
    7eb8:	77 95       	ror	r23
    7eba:	67 95       	ror	r22
    7ebc:	b7 95       	ror	r27
    7ebe:	f1 11       	cpse	r31, r1
    7ec0:	f8 cf       	rjmp	.-16     	; 0x7eb2 <__floatsisf+0x1c>
    7ec2:	fa f4       	brpl	.+62     	; 0x7f02 <__floatsisf+0x6c>
    7ec4:	bb 0f       	add	r27, r27
    7ec6:	11 f4       	brne	.+4      	; 0x7ecc <__floatsisf+0x36>
    7ec8:	60 ff       	sbrs	r22, 0
    7eca:	1b c0       	rjmp	.+54     	; 0x7f02 <__floatsisf+0x6c>
    7ecc:	6f 5f       	subi	r22, 0xFF	; 255
    7ece:	7f 4f       	sbci	r23, 0xFF	; 255
    7ed0:	8f 4f       	sbci	r24, 0xFF	; 255
    7ed2:	9f 4f       	sbci	r25, 0xFF	; 255
    7ed4:	16 c0       	rjmp	.+44     	; 0x7f02 <__floatsisf+0x6c>
    7ed6:	88 23       	and	r24, r24
    7ed8:	11 f0       	breq	.+4      	; 0x7ede <__floatsisf+0x48>
    7eda:	96 e9       	ldi	r25, 0x96	; 150
    7edc:	11 c0       	rjmp	.+34     	; 0x7f00 <__floatsisf+0x6a>
    7ede:	77 23       	and	r23, r23
    7ee0:	21 f0       	breq	.+8      	; 0x7eea <__floatsisf+0x54>
    7ee2:	9e e8       	ldi	r25, 0x8E	; 142
    7ee4:	87 2f       	mov	r24, r23
    7ee6:	76 2f       	mov	r23, r22
    7ee8:	05 c0       	rjmp	.+10     	; 0x7ef4 <__floatsisf+0x5e>
    7eea:	66 23       	and	r22, r22
    7eec:	71 f0       	breq	.+28     	; 0x7f0a <__floatsisf+0x74>
    7eee:	96 e8       	ldi	r25, 0x86	; 134
    7ef0:	86 2f       	mov	r24, r22
    7ef2:	70 e0       	ldi	r23, 0x00	; 0
    7ef4:	60 e0       	ldi	r22, 0x00	; 0
    7ef6:	2a f0       	brmi	.+10     	; 0x7f02 <__floatsisf+0x6c>
    7ef8:	9a 95       	dec	r25
    7efa:	66 0f       	add	r22, r22
    7efc:	77 1f       	adc	r23, r23
    7efe:	88 1f       	adc	r24, r24
    7f00:	da f7       	brpl	.-10     	; 0x7ef8 <__floatsisf+0x62>
    7f02:	88 0f       	add	r24, r24
    7f04:	96 95       	lsr	r25
    7f06:	87 95       	ror	r24
    7f08:	97 f9       	bld	r25, 7
    7f0a:	08 95       	ret

00007f0c <__fp_cmp>:
    7f0c:	99 0f       	add	r25, r25
    7f0e:	00 08       	sbc	r0, r0
    7f10:	55 0f       	add	r21, r21
    7f12:	aa 0b       	sbc	r26, r26
    7f14:	e0 e8       	ldi	r30, 0x80	; 128
    7f16:	fe ef       	ldi	r31, 0xFE	; 254
    7f18:	16 16       	cp	r1, r22
    7f1a:	17 06       	cpc	r1, r23
    7f1c:	e8 07       	cpc	r30, r24
    7f1e:	f9 07       	cpc	r31, r25
    7f20:	c0 f0       	brcs	.+48     	; 0x7f52 <__fp_cmp+0x46>
    7f22:	12 16       	cp	r1, r18
    7f24:	13 06       	cpc	r1, r19
    7f26:	e4 07       	cpc	r30, r20
    7f28:	f5 07       	cpc	r31, r21
    7f2a:	98 f0       	brcs	.+38     	; 0x7f52 <__fp_cmp+0x46>
    7f2c:	62 1b       	sub	r22, r18
    7f2e:	73 0b       	sbc	r23, r19
    7f30:	84 0b       	sbc	r24, r20
    7f32:	95 0b       	sbc	r25, r21
    7f34:	39 f4       	brne	.+14     	; 0x7f44 <__fp_cmp+0x38>
    7f36:	0a 26       	eor	r0, r26
    7f38:	61 f0       	breq	.+24     	; 0x7f52 <__fp_cmp+0x46>
    7f3a:	23 2b       	or	r18, r19
    7f3c:	24 2b       	or	r18, r20
    7f3e:	25 2b       	or	r18, r21
    7f40:	21 f4       	brne	.+8      	; 0x7f4a <__fp_cmp+0x3e>
    7f42:	08 95       	ret
    7f44:	0a 26       	eor	r0, r26
    7f46:	09 f4       	brne	.+2      	; 0x7f4a <__fp_cmp+0x3e>
    7f48:	a1 40       	sbci	r26, 0x01	; 1
    7f4a:	a6 95       	lsr	r26
    7f4c:	8f ef       	ldi	r24, 0xFF	; 255
    7f4e:	81 1d       	adc	r24, r1
    7f50:	81 1d       	adc	r24, r1
    7f52:	08 95       	ret

00007f54 <__fp_inf>:
    7f54:	97 f9       	bld	r25, 7
    7f56:	9f 67       	ori	r25, 0x7F	; 127
    7f58:	80 e8       	ldi	r24, 0x80	; 128
    7f5a:	70 e0       	ldi	r23, 0x00	; 0
    7f5c:	60 e0       	ldi	r22, 0x00	; 0
    7f5e:	08 95       	ret

00007f60 <__fp_nan>:
    7f60:	9f ef       	ldi	r25, 0xFF	; 255
    7f62:	80 ec       	ldi	r24, 0xC0	; 192
    7f64:	08 95       	ret

00007f66 <__fp_powser>:
    7f66:	df 93       	push	r29
    7f68:	cf 93       	push	r28
    7f6a:	1f 93       	push	r17
    7f6c:	0f 93       	push	r16
    7f6e:	ff 92       	push	r15
    7f70:	ef 92       	push	r14
    7f72:	df 92       	push	r13
    7f74:	7b 01       	movw	r14, r22
    7f76:	8c 01       	movw	r16, r24
    7f78:	68 94       	set
    7f7a:	05 c0       	rjmp	.+10     	; 0x7f86 <__fp_powser+0x20>
    7f7c:	da 2e       	mov	r13, r26
    7f7e:	ef 01       	movw	r28, r30
    7f80:	af d0       	rcall	.+350    	; 0x80e0 <__mulsf3x>
    7f82:	fe 01       	movw	r30, r28
    7f84:	e8 94       	clt
    7f86:	a5 91       	lpm	r26, Z+
    7f88:	25 91       	lpm	r18, Z+
    7f8a:	35 91       	lpm	r19, Z+
    7f8c:	45 91       	lpm	r20, Z+
    7f8e:	55 91       	lpm	r21, Z+
    7f90:	ae f3       	brts	.-22     	; 0x7f7c <__fp_powser+0x16>
    7f92:	ef 01       	movw	r28, r30
    7f94:	8f de       	rcall	.-738    	; 0x7cb4 <__addsf3x>
    7f96:	fe 01       	movw	r30, r28
    7f98:	97 01       	movw	r18, r14
    7f9a:	a8 01       	movw	r20, r16
    7f9c:	da 94       	dec	r13
    7f9e:	79 f7       	brne	.-34     	; 0x7f7e <__fp_powser+0x18>
    7fa0:	df 90       	pop	r13
    7fa2:	ef 90       	pop	r14
    7fa4:	ff 90       	pop	r15
    7fa6:	0f 91       	pop	r16
    7fa8:	1f 91       	pop	r17
    7faa:	cf 91       	pop	r28
    7fac:	df 91       	pop	r29
    7fae:	08 95       	ret

00007fb0 <__fp_pscA>:
    7fb0:	00 24       	eor	r0, r0
    7fb2:	0a 94       	dec	r0
    7fb4:	16 16       	cp	r1, r22
    7fb6:	17 06       	cpc	r1, r23
    7fb8:	18 06       	cpc	r1, r24
    7fba:	09 06       	cpc	r0, r25
    7fbc:	08 95       	ret

00007fbe <__fp_pscB>:
    7fbe:	00 24       	eor	r0, r0
    7fc0:	0a 94       	dec	r0
    7fc2:	12 16       	cp	r1, r18
    7fc4:	13 06       	cpc	r1, r19
    7fc6:	14 06       	cpc	r1, r20
    7fc8:	05 06       	cpc	r0, r21
    7fca:	08 95       	ret
    7fcc:	c9 cf       	rjmp	.-110    	; 0x7f60 <__fp_nan>

00007fce <__fp_rempio2>:
    7fce:	50 d0       	rcall	.+160    	; 0x8070 <__fp_splitA>
    7fd0:	e8 f3       	brcs	.-6      	; 0x7fcc <__fp_pscB+0xe>
    7fd2:	e8 94       	clt
    7fd4:	e0 e0       	ldi	r30, 0x00	; 0
    7fd6:	bb 27       	eor	r27, r27
    7fd8:	9f 57       	subi	r25, 0x7F	; 127
    7fda:	f0 f0       	brcs	.+60     	; 0x8018 <__fp_rempio2+0x4a>
    7fdc:	2a ed       	ldi	r18, 0xDA	; 218
    7fde:	3f e0       	ldi	r19, 0x0F	; 15
    7fe0:	49 ec       	ldi	r20, 0xC9	; 201
    7fe2:	06 c0       	rjmp	.+12     	; 0x7ff0 <__fp_rempio2+0x22>
    7fe4:	ee 0f       	add	r30, r30
    7fe6:	bb 0f       	add	r27, r27
    7fe8:	66 1f       	adc	r22, r22
    7fea:	77 1f       	adc	r23, r23
    7fec:	88 1f       	adc	r24, r24
    7fee:	28 f0       	brcs	.+10     	; 0x7ffa <__fp_rempio2+0x2c>
    7ff0:	b2 3a       	cpi	r27, 0xA2	; 162
    7ff2:	62 07       	cpc	r22, r18
    7ff4:	73 07       	cpc	r23, r19
    7ff6:	84 07       	cpc	r24, r20
    7ff8:	28 f0       	brcs	.+10     	; 0x8004 <__fp_rempio2+0x36>
    7ffa:	b2 5a       	subi	r27, 0xA2	; 162
    7ffc:	62 0b       	sbc	r22, r18
    7ffe:	73 0b       	sbc	r23, r19
    8000:	84 0b       	sbc	r24, r20
    8002:	e3 95       	inc	r30
    8004:	9a 95       	dec	r25
    8006:	72 f7       	brpl	.-36     	; 0x7fe4 <__fp_rempio2+0x16>
    8008:	80 38       	cpi	r24, 0x80	; 128
    800a:	30 f4       	brcc	.+12     	; 0x8018 <__fp_rempio2+0x4a>
    800c:	9a 95       	dec	r25
    800e:	bb 0f       	add	r27, r27
    8010:	66 1f       	adc	r22, r22
    8012:	77 1f       	adc	r23, r23
    8014:	88 1f       	adc	r24, r24
    8016:	d2 f7       	brpl	.-12     	; 0x800c <__fp_rempio2+0x3e>
    8018:	90 48       	sbci	r25, 0x80	; 128
    801a:	3e c1       	rjmp	.+636    	; 0x8298 <__fp_mpack_finite>

0000801c <__fp_round>:
    801c:	09 2e       	mov	r0, r25
    801e:	03 94       	inc	r0
    8020:	00 0c       	add	r0, r0
    8022:	11 f4       	brne	.+4      	; 0x8028 <__fp_round+0xc>
    8024:	88 23       	and	r24, r24
    8026:	52 f0       	brmi	.+20     	; 0x803c <__fp_round+0x20>
    8028:	bb 0f       	add	r27, r27
    802a:	40 f4       	brcc	.+16     	; 0x803c <__fp_round+0x20>
    802c:	bf 2b       	or	r27, r31
    802e:	11 f4       	brne	.+4      	; 0x8034 <__fp_round+0x18>
    8030:	60 ff       	sbrs	r22, 0
    8032:	04 c0       	rjmp	.+8      	; 0x803c <__fp_round+0x20>
    8034:	6f 5f       	subi	r22, 0xFF	; 255
    8036:	7f 4f       	sbci	r23, 0xFF	; 255
    8038:	8f 4f       	sbci	r24, 0xFF	; 255
    803a:	9f 4f       	sbci	r25, 0xFF	; 255
    803c:	08 95       	ret

0000803e <__fp_sinus>:
    803e:	ef 93       	push	r30
    8040:	e0 ff       	sbrs	r30, 0
    8042:	06 c0       	rjmp	.+12     	; 0x8050 <__fp_sinus+0x12>
    8044:	a2 ea       	ldi	r26, 0xA2	; 162
    8046:	2a ed       	ldi	r18, 0xDA	; 218
    8048:	3f e0       	ldi	r19, 0x0F	; 15
    804a:	49 ec       	ldi	r20, 0xC9	; 201
    804c:	5f eb       	ldi	r21, 0xBF	; 191
    804e:	32 de       	rcall	.-924    	; 0x7cb4 <__addsf3x>
    8050:	e5 df       	rcall	.-54     	; 0x801c <__fp_round>
    8052:	0f 90       	pop	r0
    8054:	03 94       	inc	r0
    8056:	01 fc       	sbrc	r0, 1
    8058:	90 58       	subi	r25, 0x80	; 128
    805a:	e6 ef       	ldi	r30, 0xF6	; 246
    805c:	f1 e0       	ldi	r31, 0x01	; 1
    805e:	28 c1       	rjmp	.+592    	; 0x82b0 <__fp_powsodd>

00008060 <__fp_split3>:
    8060:	57 fd       	sbrc	r21, 7
    8062:	90 58       	subi	r25, 0x80	; 128
    8064:	44 0f       	add	r20, r20
    8066:	55 1f       	adc	r21, r21
    8068:	59 f0       	breq	.+22     	; 0x8080 <__fp_splitA+0x10>
    806a:	5f 3f       	cpi	r21, 0xFF	; 255
    806c:	71 f0       	breq	.+28     	; 0x808a <__fp_splitA+0x1a>
    806e:	47 95       	ror	r20

00008070 <__fp_splitA>:
    8070:	88 0f       	add	r24, r24
    8072:	97 fb       	bst	r25, 7
    8074:	99 1f       	adc	r25, r25
    8076:	61 f0       	breq	.+24     	; 0x8090 <__fp_splitA+0x20>
    8078:	9f 3f       	cpi	r25, 0xFF	; 255
    807a:	79 f0       	breq	.+30     	; 0x809a <__fp_splitA+0x2a>
    807c:	87 95       	ror	r24
    807e:	08 95       	ret
    8080:	12 16       	cp	r1, r18
    8082:	13 06       	cpc	r1, r19
    8084:	14 06       	cpc	r1, r20
    8086:	55 1f       	adc	r21, r21
    8088:	f2 cf       	rjmp	.-28     	; 0x806e <__fp_split3+0xe>
    808a:	46 95       	lsr	r20
    808c:	f1 df       	rcall	.-30     	; 0x8070 <__fp_splitA>
    808e:	08 c0       	rjmp	.+16     	; 0x80a0 <__fp_splitA+0x30>
    8090:	16 16       	cp	r1, r22
    8092:	17 06       	cpc	r1, r23
    8094:	18 06       	cpc	r1, r24
    8096:	99 1f       	adc	r25, r25
    8098:	f1 cf       	rjmp	.-30     	; 0x807c <__fp_splitA+0xc>
    809a:	86 95       	lsr	r24
    809c:	71 05       	cpc	r23, r1
    809e:	61 05       	cpc	r22, r1
    80a0:	08 94       	sec
    80a2:	08 95       	ret

000080a4 <__fp_zero>:
    80a4:	e8 94       	clt

000080a6 <__fp_szero>:
    80a6:	bb 27       	eor	r27, r27
    80a8:	66 27       	eor	r22, r22
    80aa:	77 27       	eor	r23, r23
    80ac:	cb 01       	movw	r24, r22
    80ae:	97 f9       	bld	r25, 7
    80b0:	08 95       	ret

000080b2 <__gesf2>:
    80b2:	2c df       	rcall	.-424    	; 0x7f0c <__fp_cmp>
    80b4:	08 f4       	brcc	.+2      	; 0x80b8 <__gesf2+0x6>
    80b6:	8f ef       	ldi	r24, 0xFF	; 255
    80b8:	08 95       	ret

000080ba <inverse>:
    80ba:	9b 01       	movw	r18, r22
    80bc:	ac 01       	movw	r20, r24
    80be:	60 e0       	ldi	r22, 0x00	; 0
    80c0:	70 e0       	ldi	r23, 0x00	; 0
    80c2:	80 e8       	ldi	r24, 0x80	; 128
    80c4:	9f e3       	ldi	r25, 0x3F	; 63
    80c6:	4c ce       	rjmp	.-872    	; 0x7d60 <__divsf3>

000080c8 <__mulsf3>:
    80c8:	0b d0       	rcall	.+22     	; 0x80e0 <__mulsf3x>
    80ca:	a8 cf       	rjmp	.-176    	; 0x801c <__fp_round>
    80cc:	71 df       	rcall	.-286    	; 0x7fb0 <__fp_pscA>
    80ce:	28 f0       	brcs	.+10     	; 0x80da <__mulsf3+0x12>
    80d0:	76 df       	rcall	.-276    	; 0x7fbe <__fp_pscB>
    80d2:	18 f0       	brcs	.+6      	; 0x80da <__mulsf3+0x12>
    80d4:	95 23       	and	r25, r21
    80d6:	09 f0       	breq	.+2      	; 0x80da <__mulsf3+0x12>
    80d8:	3d cf       	rjmp	.-390    	; 0x7f54 <__fp_inf>
    80da:	42 cf       	rjmp	.-380    	; 0x7f60 <__fp_nan>
    80dc:	11 24       	eor	r1, r1
    80de:	e3 cf       	rjmp	.-58     	; 0x80a6 <__fp_szero>

000080e0 <__mulsf3x>:
    80e0:	bf df       	rcall	.-130    	; 0x8060 <__fp_split3>
    80e2:	a0 f3       	brcs	.-24     	; 0x80cc <__mulsf3+0x4>

000080e4 <__mulsf3_pse>:
    80e4:	95 9f       	mul	r25, r21
    80e6:	d1 f3       	breq	.-12     	; 0x80dc <__mulsf3+0x14>
    80e8:	95 0f       	add	r25, r21
    80ea:	50 e0       	ldi	r21, 0x00	; 0
    80ec:	55 1f       	adc	r21, r21
    80ee:	62 9f       	mul	r22, r18
    80f0:	f0 01       	movw	r30, r0
    80f2:	72 9f       	mul	r23, r18
    80f4:	bb 27       	eor	r27, r27
    80f6:	f0 0d       	add	r31, r0
    80f8:	b1 1d       	adc	r27, r1
    80fa:	63 9f       	mul	r22, r19
    80fc:	aa 27       	eor	r26, r26
    80fe:	f0 0d       	add	r31, r0
    8100:	b1 1d       	adc	r27, r1
    8102:	aa 1f       	adc	r26, r26
    8104:	64 9f       	mul	r22, r20
    8106:	66 27       	eor	r22, r22
    8108:	b0 0d       	add	r27, r0
    810a:	a1 1d       	adc	r26, r1
    810c:	66 1f       	adc	r22, r22
    810e:	82 9f       	mul	r24, r18
    8110:	22 27       	eor	r18, r18
    8112:	b0 0d       	add	r27, r0
    8114:	a1 1d       	adc	r26, r1
    8116:	62 1f       	adc	r22, r18
    8118:	73 9f       	mul	r23, r19
    811a:	b0 0d       	add	r27, r0
    811c:	a1 1d       	adc	r26, r1
    811e:	62 1f       	adc	r22, r18
    8120:	83 9f       	mul	r24, r19
    8122:	a0 0d       	add	r26, r0
    8124:	61 1d       	adc	r22, r1
    8126:	22 1f       	adc	r18, r18
    8128:	74 9f       	mul	r23, r20
    812a:	33 27       	eor	r19, r19
    812c:	a0 0d       	add	r26, r0
    812e:	61 1d       	adc	r22, r1
    8130:	23 1f       	adc	r18, r19
    8132:	84 9f       	mul	r24, r20
    8134:	60 0d       	add	r22, r0
    8136:	21 1d       	adc	r18, r1
    8138:	82 2f       	mov	r24, r18
    813a:	76 2f       	mov	r23, r22
    813c:	6a 2f       	mov	r22, r26
    813e:	11 24       	eor	r1, r1
    8140:	9f 57       	subi	r25, 0x7F	; 127
    8142:	50 40       	sbci	r21, 0x00	; 0
    8144:	8a f0       	brmi	.+34     	; 0x8168 <__mulsf3_pse+0x84>
    8146:	e1 f0       	breq	.+56     	; 0x8180 <__mulsf3_pse+0x9c>
    8148:	88 23       	and	r24, r24
    814a:	4a f0       	brmi	.+18     	; 0x815e <__mulsf3_pse+0x7a>
    814c:	ee 0f       	add	r30, r30
    814e:	ff 1f       	adc	r31, r31
    8150:	bb 1f       	adc	r27, r27
    8152:	66 1f       	adc	r22, r22
    8154:	77 1f       	adc	r23, r23
    8156:	88 1f       	adc	r24, r24
    8158:	91 50       	subi	r25, 0x01	; 1
    815a:	50 40       	sbci	r21, 0x00	; 0
    815c:	a9 f7       	brne	.-22     	; 0x8148 <__mulsf3_pse+0x64>
    815e:	9e 3f       	cpi	r25, 0xFE	; 254
    8160:	51 05       	cpc	r21, r1
    8162:	70 f0       	brcs	.+28     	; 0x8180 <__mulsf3_pse+0x9c>
    8164:	f7 ce       	rjmp	.-530    	; 0x7f54 <__fp_inf>
    8166:	9f cf       	rjmp	.-194    	; 0x80a6 <__fp_szero>
    8168:	5f 3f       	cpi	r21, 0xFF	; 255
    816a:	ec f3       	brlt	.-6      	; 0x8166 <__mulsf3_pse+0x82>
    816c:	98 3e       	cpi	r25, 0xE8	; 232
    816e:	dc f3       	brlt	.-10     	; 0x8166 <__mulsf3_pse+0x82>
    8170:	86 95       	lsr	r24
    8172:	77 95       	ror	r23
    8174:	67 95       	ror	r22
    8176:	b7 95       	ror	r27
    8178:	f7 95       	ror	r31
    817a:	e7 95       	ror	r30
    817c:	9f 5f       	subi	r25, 0xFF	; 255
    817e:	c1 f7       	brne	.-16     	; 0x8170 <__mulsf3_pse+0x8c>
    8180:	fe 2b       	or	r31, r30
    8182:	88 0f       	add	r24, r24
    8184:	91 1d       	adc	r25, r1
    8186:	96 95       	lsr	r25
    8188:	87 95       	ror	r24
    818a:	97 f9       	bld	r25, 7
    818c:	08 95       	ret

0000818e <pow>:
    818e:	fa 01       	movw	r30, r20
    8190:	ee 0f       	add	r30, r30
    8192:	ff 1f       	adc	r31, r31
    8194:	30 96       	adiw	r30, 0x00	; 0
    8196:	21 05       	cpc	r18, r1
    8198:	31 05       	cpc	r19, r1
    819a:	99 f1       	breq	.+102    	; 0x8202 <pow+0x74>
    819c:	61 15       	cp	r22, r1
    819e:	71 05       	cpc	r23, r1
    81a0:	61 f4       	brne	.+24     	; 0x81ba <pow+0x2c>
    81a2:	80 38       	cpi	r24, 0x80	; 128
    81a4:	bf e3       	ldi	r27, 0x3F	; 63
    81a6:	9b 07       	cpc	r25, r27
    81a8:	49 f1       	breq	.+82     	; 0x81fc <pow+0x6e>
    81aa:	68 94       	set
    81ac:	90 38       	cpi	r25, 0x80	; 128
    81ae:	81 05       	cpc	r24, r1
    81b0:	61 f0       	breq	.+24     	; 0x81ca <pow+0x3c>
    81b2:	80 38       	cpi	r24, 0x80	; 128
    81b4:	bf ef       	ldi	r27, 0xFF	; 255
    81b6:	9b 07       	cpc	r25, r27
    81b8:	41 f0       	breq	.+16     	; 0x81ca <pow+0x3c>
    81ba:	99 23       	and	r25, r25
    81bc:	42 f5       	brpl	.+80     	; 0x820e <pow+0x80>
    81be:	ff 3f       	cpi	r31, 0xFF	; 255
    81c0:	e1 05       	cpc	r30, r1
    81c2:	31 05       	cpc	r19, r1
    81c4:	21 05       	cpc	r18, r1
    81c6:	11 f1       	breq	.+68     	; 0x820c <pow+0x7e>
    81c8:	e8 94       	clt
    81ca:	08 94       	sec
    81cc:	e7 95       	ror	r30
    81ce:	d9 01       	movw	r26, r18
    81d0:	aa 23       	and	r26, r26
    81d2:	29 f4       	brne	.+10     	; 0x81de <pow+0x50>
    81d4:	ab 2f       	mov	r26, r27
    81d6:	be 2f       	mov	r27, r30
    81d8:	f8 5f       	subi	r31, 0xF8	; 248
    81da:	d0 f3       	brcs	.-12     	; 0x81d0 <pow+0x42>
    81dc:	10 c0       	rjmp	.+32     	; 0x81fe <pow+0x70>
    81de:	ff 5f       	subi	r31, 0xFF	; 255
    81e0:	70 f4       	brcc	.+28     	; 0x81fe <pow+0x70>
    81e2:	a6 95       	lsr	r26
    81e4:	e0 f7       	brcc	.-8      	; 0x81de <pow+0x50>
    81e6:	f7 39       	cpi	r31, 0x97	; 151
    81e8:	50 f0       	brcs	.+20     	; 0x81fe <pow+0x70>
    81ea:	19 f0       	breq	.+6      	; 0x81f2 <pow+0x64>
    81ec:	ff 3a       	cpi	r31, 0xAF	; 175
    81ee:	38 f4       	brcc	.+14     	; 0x81fe <pow+0x70>
    81f0:	9f 77       	andi	r25, 0x7F	; 127
    81f2:	9f 93       	push	r25
    81f4:	0c d0       	rcall	.+24     	; 0x820e <pow+0x80>
    81f6:	0f 90       	pop	r0
    81f8:	07 fc       	sbrc	r0, 7
    81fa:	90 58       	subi	r25, 0x80	; 128
    81fc:	08 95       	ret
    81fe:	3e f0       	brts	.+14     	; 0x820e <pow+0x80>
    8200:	af ce       	rjmp	.-674    	; 0x7f60 <__fp_nan>
    8202:	60 e0       	ldi	r22, 0x00	; 0
    8204:	70 e0       	ldi	r23, 0x00	; 0
    8206:	80 e8       	ldi	r24, 0x80	; 128
    8208:	9f e3       	ldi	r25, 0x3F	; 63
    820a:	08 95       	ret
    820c:	4f e7       	ldi	r20, 0x7F	; 127
    820e:	9f 77       	andi	r25, 0x7F	; 127
    8210:	5f 93       	push	r21
    8212:	4f 93       	push	r20
    8214:	3f 93       	push	r19
    8216:	2f 93       	push	r18
    8218:	97 d0       	rcall	.+302    	; 0x8348 <log>
    821a:	2f 91       	pop	r18
    821c:	3f 91       	pop	r19
    821e:	4f 91       	pop	r20
    8220:	5f 91       	pop	r21
    8222:	52 df       	rcall	.-348    	; 0x80c8 <__mulsf3>
    8224:	0b c0       	rjmp	.+22     	; 0x823c <exp>

00008226 <sin>:
    8226:	9f 93       	push	r25
    8228:	d2 de       	rcall	.-604    	; 0x7fce <__fp_rempio2>
    822a:	0f 90       	pop	r0
    822c:	07 fc       	sbrc	r0, 7
    822e:	ee 5f       	subi	r30, 0xFE	; 254
    8230:	06 cf       	rjmp	.-500    	; 0x803e <__fp_sinus>
    8232:	19 f4       	brne	.+6      	; 0x823a <sin+0x14>
    8234:	0e f0       	brts	.+2      	; 0x8238 <sin+0x12>
    8236:	8e ce       	rjmp	.-740    	; 0x7f54 <__fp_inf>
    8238:	35 cf       	rjmp	.-406    	; 0x80a4 <__fp_zero>
    823a:	92 ce       	rjmp	.-732    	; 0x7f60 <__fp_nan>

0000823c <exp>:
    823c:	19 df       	rcall	.-462    	; 0x8070 <__fp_splitA>
    823e:	c8 f3       	brcs	.-14     	; 0x8232 <sin+0xc>
    8240:	96 38       	cpi	r25, 0x86	; 134
    8242:	c0 f7       	brcc	.-16     	; 0x8234 <sin+0xe>
    8244:	07 f8       	bld	r0, 7
    8246:	0f 92       	push	r0
    8248:	e8 94       	clt
    824a:	2b e3       	ldi	r18, 0x3B	; 59
    824c:	3a ea       	ldi	r19, 0xAA	; 170
    824e:	48 eb       	ldi	r20, 0xB8	; 184
    8250:	5f e7       	ldi	r21, 0x7F	; 127
    8252:	48 df       	rcall	.-368    	; 0x80e4 <__mulsf3_pse>
    8254:	0f 92       	push	r0
    8256:	0f 92       	push	r0
    8258:	0f 92       	push	r0
    825a:	4d b7       	in	r20, 0x3d	; 61
    825c:	5e b7       	in	r21, 0x3e	; 62
    825e:	0f 92       	push	r0
    8260:	b3 d0       	rcall	.+358    	; 0x83c8 <modf>
    8262:	e4 e1       	ldi	r30, 0x14	; 20
    8264:	f2 e0       	ldi	r31, 0x02	; 2
    8266:	7f de       	rcall	.-770    	; 0x7f66 <__fp_powser>
    8268:	4f 91       	pop	r20
    826a:	5f 91       	pop	r21
    826c:	ef 91       	pop	r30
    826e:	ff 91       	pop	r31
    8270:	e5 95       	asr	r30
    8272:	ee 1f       	adc	r30, r30
    8274:	ff 1f       	adc	r31, r31
    8276:	49 f0       	breq	.+18     	; 0x828a <exp+0x4e>
    8278:	fe 57       	subi	r31, 0x7E	; 126
    827a:	e0 68       	ori	r30, 0x80	; 128
    827c:	44 27       	eor	r20, r20
    827e:	ee 0f       	add	r30, r30
    8280:	44 1f       	adc	r20, r20
    8282:	fa 95       	dec	r31
    8284:	e1 f7       	brne	.-8      	; 0x827e <exp+0x42>
    8286:	41 95       	neg	r20
    8288:	55 0b       	sbc	r21, r21
    828a:	25 d0       	rcall	.+74     	; 0x82d6 <ldexp>
    828c:	0f 90       	pop	r0
    828e:	07 fe       	sbrs	r0, 7
    8290:	14 cf       	rjmp	.-472    	; 0x80ba <inverse>
    8292:	08 95       	ret

00008294 <__fp_mpack>:
    8294:	9f 3f       	cpi	r25, 0xFF	; 255
    8296:	31 f0       	breq	.+12     	; 0x82a4 <__fp_mpack_finite+0xc>

00008298 <__fp_mpack_finite>:
    8298:	91 50       	subi	r25, 0x01	; 1
    829a:	20 f4       	brcc	.+8      	; 0x82a4 <__fp_mpack_finite+0xc>
    829c:	87 95       	ror	r24
    829e:	77 95       	ror	r23
    82a0:	67 95       	ror	r22
    82a2:	b7 95       	ror	r27
    82a4:	88 0f       	add	r24, r24
    82a6:	91 1d       	adc	r25, r1
    82a8:	96 95       	lsr	r25
    82aa:	87 95       	ror	r24
    82ac:	97 f9       	bld	r25, 7
    82ae:	08 95       	ret

000082b0 <__fp_powsodd>:
    82b0:	9f 93       	push	r25
    82b2:	8f 93       	push	r24
    82b4:	7f 93       	push	r23
    82b6:	6f 93       	push	r22
    82b8:	ff 93       	push	r31
    82ba:	ef 93       	push	r30
    82bc:	9b 01       	movw	r18, r22
    82be:	ac 01       	movw	r20, r24
    82c0:	03 df       	rcall	.-506    	; 0x80c8 <__mulsf3>
    82c2:	ef 91       	pop	r30
    82c4:	ff 91       	pop	r31
    82c6:	4f de       	rcall	.-866    	; 0x7f66 <__fp_powser>
    82c8:	2f 91       	pop	r18
    82ca:	3f 91       	pop	r19
    82cc:	4f 91       	pop	r20
    82ce:	5f 91       	pop	r21
    82d0:	fb ce       	rjmp	.-522    	; 0x80c8 <__mulsf3>
    82d2:	40 ce       	rjmp	.-896    	; 0x7f54 <__fp_inf>
    82d4:	df cf       	rjmp	.-66     	; 0x8294 <__fp_mpack>

000082d6 <ldexp>:
    82d6:	cc de       	rcall	.-616    	; 0x8070 <__fp_splitA>
    82d8:	e8 f3       	brcs	.-6      	; 0x82d4 <__fp_powsodd+0x24>
    82da:	99 23       	and	r25, r25
    82dc:	d9 f3       	breq	.-10     	; 0x82d4 <__fp_powsodd+0x24>
    82de:	94 0f       	add	r25, r20
    82e0:	51 1d       	adc	r21, r1
    82e2:	bb f3       	brvs	.-18     	; 0x82d2 <__fp_powsodd+0x22>
    82e4:	91 50       	subi	r25, 0x01	; 1
    82e6:	50 40       	sbci	r21, 0x00	; 0
    82e8:	94 f0       	brlt	.+36     	; 0x830e <ldexp+0x38>
    82ea:	59 f0       	breq	.+22     	; 0x8302 <ldexp+0x2c>
    82ec:	88 23       	and	r24, r24
    82ee:	32 f0       	brmi	.+12     	; 0x82fc <ldexp+0x26>
    82f0:	66 0f       	add	r22, r22
    82f2:	77 1f       	adc	r23, r23
    82f4:	88 1f       	adc	r24, r24
    82f6:	91 50       	subi	r25, 0x01	; 1
    82f8:	50 40       	sbci	r21, 0x00	; 0
    82fa:	c1 f7       	brne	.-16     	; 0x82ec <ldexp+0x16>
    82fc:	9e 3f       	cpi	r25, 0xFE	; 254
    82fe:	51 05       	cpc	r21, r1
    8300:	44 f7       	brge	.-48     	; 0x82d2 <__fp_powsodd+0x22>
    8302:	88 0f       	add	r24, r24
    8304:	91 1d       	adc	r25, r1
    8306:	96 95       	lsr	r25
    8308:	87 95       	ror	r24
    830a:	97 f9       	bld	r25, 7
    830c:	08 95       	ret
    830e:	5f 3f       	cpi	r21, 0xFF	; 255
    8310:	ac f0       	brlt	.+42     	; 0x833c <ldexp+0x66>
    8312:	98 3e       	cpi	r25, 0xE8	; 232
    8314:	9c f0       	brlt	.+38     	; 0x833c <ldexp+0x66>
    8316:	bb 27       	eor	r27, r27
    8318:	86 95       	lsr	r24
    831a:	77 95       	ror	r23
    831c:	67 95       	ror	r22
    831e:	b7 95       	ror	r27
    8320:	08 f4       	brcc	.+2      	; 0x8324 <ldexp+0x4e>
    8322:	b1 60       	ori	r27, 0x01	; 1
    8324:	93 95       	inc	r25
    8326:	c1 f7       	brne	.-16     	; 0x8318 <ldexp+0x42>
    8328:	bb 0f       	add	r27, r27
    832a:	58 f7       	brcc	.-42     	; 0x8302 <ldexp+0x2c>
    832c:	11 f4       	brne	.+4      	; 0x8332 <ldexp+0x5c>
    832e:	60 ff       	sbrs	r22, 0
    8330:	e8 cf       	rjmp	.-48     	; 0x8302 <ldexp+0x2c>
    8332:	6f 5f       	subi	r22, 0xFF	; 255
    8334:	7f 4f       	sbci	r23, 0xFF	; 255
    8336:	8f 4f       	sbci	r24, 0xFF	; 255
    8338:	9f 4f       	sbci	r25, 0xFF	; 255
    833a:	e3 cf       	rjmp	.-58     	; 0x8302 <ldexp+0x2c>
    833c:	b4 ce       	rjmp	.-664    	; 0x80a6 <__fp_szero>
    833e:	0e f0       	brts	.+2      	; 0x8342 <ldexp+0x6c>
    8340:	a9 cf       	rjmp	.-174    	; 0x8294 <__fp_mpack>
    8342:	0e ce       	rjmp	.-996    	; 0x7f60 <__fp_nan>
    8344:	68 94       	set
    8346:	06 ce       	rjmp	.-1012   	; 0x7f54 <__fp_inf>

00008348 <log>:
    8348:	93 de       	rcall	.-730    	; 0x8070 <__fp_splitA>
    834a:	c8 f3       	brcs	.-14     	; 0x833e <ldexp+0x68>
    834c:	99 23       	and	r25, r25
    834e:	d1 f3       	breq	.-12     	; 0x8344 <ldexp+0x6e>
    8350:	c6 f3       	brts	.-16     	; 0x8342 <ldexp+0x6c>
    8352:	df 93       	push	r29
    8354:	cf 93       	push	r28
    8356:	1f 93       	push	r17
    8358:	0f 93       	push	r16
    835a:	ff 92       	push	r15
    835c:	c9 2f       	mov	r28, r25
    835e:	dd 27       	eor	r29, r29
    8360:	88 23       	and	r24, r24
    8362:	2a f0       	brmi	.+10     	; 0x836e <log+0x26>
    8364:	21 97       	sbiw	r28, 0x01	; 1
    8366:	66 0f       	add	r22, r22
    8368:	77 1f       	adc	r23, r23
    836a:	88 1f       	adc	r24, r24
    836c:	da f7       	brpl	.-10     	; 0x8364 <log+0x1c>
    836e:	20 e0       	ldi	r18, 0x00	; 0
    8370:	30 e0       	ldi	r19, 0x00	; 0
    8372:	40 e8       	ldi	r20, 0x80	; 128
    8374:	5f eb       	ldi	r21, 0xBF	; 191
    8376:	9f e3       	ldi	r25, 0x3F	; 63
    8378:	88 39       	cpi	r24, 0x98	; 152
    837a:	20 f0       	brcs	.+8      	; 0x8384 <log+0x3c>
    837c:	80 3e       	cpi	r24, 0xE0	; 224
    837e:	30 f0       	brcs	.+12     	; 0x838c <log+0x44>
    8380:	21 96       	adiw	r28, 0x01	; 1
    8382:	8f 77       	andi	r24, 0x7F	; 127
    8384:	86 dc       	rcall	.-1780   	; 0x7c92 <__addsf3>
    8386:	ec e3       	ldi	r30, 0x3C	; 60
    8388:	f2 e0       	ldi	r31, 0x02	; 2
    838a:	03 c0       	rjmp	.+6      	; 0x8392 <log+0x4a>
    838c:	82 dc       	rcall	.-1788   	; 0x7c92 <__addsf3>
    838e:	e9 e6       	ldi	r30, 0x69	; 105
    8390:	f2 e0       	ldi	r31, 0x02	; 2
    8392:	e9 dd       	rcall	.-1070   	; 0x7f66 <__fp_powser>
    8394:	8b 01       	movw	r16, r22
    8396:	be 01       	movw	r22, r28
    8398:	ec 01       	movw	r28, r24
    839a:	fb 2e       	mov	r15, r27
    839c:	6f 57       	subi	r22, 0x7F	; 127
    839e:	71 09       	sbc	r23, r1
    83a0:	75 95       	asr	r23
    83a2:	77 1f       	adc	r23, r23
    83a4:	88 0b       	sbc	r24, r24
    83a6:	99 0b       	sbc	r25, r25
    83a8:	76 dd       	rcall	.-1300   	; 0x7e96 <__floatsisf>
    83aa:	28 e1       	ldi	r18, 0x18	; 24
    83ac:	32 e7       	ldi	r19, 0x72	; 114
    83ae:	41 e3       	ldi	r20, 0x31	; 49
    83b0:	5f e3       	ldi	r21, 0x3F	; 63
    83b2:	96 de       	rcall	.-724    	; 0x80e0 <__mulsf3x>
    83b4:	af 2d       	mov	r26, r15
    83b6:	98 01       	movw	r18, r16
    83b8:	ae 01       	movw	r20, r28
    83ba:	ff 90       	pop	r15
    83bc:	0f 91       	pop	r16
    83be:	1f 91       	pop	r17
    83c0:	cf 91       	pop	r28
    83c2:	df 91       	pop	r29
    83c4:	77 dc       	rcall	.-1810   	; 0x7cb4 <__addsf3x>
    83c6:	2a ce       	rjmp	.-940    	; 0x801c <__fp_round>

000083c8 <modf>:
    83c8:	fa 01       	movw	r30, r20
    83ca:	dc 01       	movw	r26, r24
    83cc:	aa 0f       	add	r26, r26
    83ce:	bb 1f       	adc	r27, r27
    83d0:	9b 01       	movw	r18, r22
    83d2:	ac 01       	movw	r20, r24
    83d4:	bf 57       	subi	r27, 0x7F	; 127
    83d6:	28 f4       	brcc	.+10     	; 0x83e2 <modf+0x1a>
    83d8:	22 27       	eor	r18, r18
    83da:	33 27       	eor	r19, r19
    83dc:	44 27       	eor	r20, r20
    83de:	50 78       	andi	r21, 0x80	; 128
    83e0:	1f c0       	rjmp	.+62     	; 0x8420 <modf+0x58>
    83e2:	b7 51       	subi	r27, 0x17	; 23
    83e4:	88 f4       	brcc	.+34     	; 0x8408 <modf+0x40>
    83e6:	ab 2f       	mov	r26, r27
    83e8:	00 24       	eor	r0, r0
    83ea:	46 95       	lsr	r20
    83ec:	37 95       	ror	r19
    83ee:	27 95       	ror	r18
    83f0:	01 1c       	adc	r0, r1
    83f2:	a3 95       	inc	r26
    83f4:	d2 f3       	brmi	.-12     	; 0x83ea <modf+0x22>
    83f6:	00 20       	and	r0, r0
    83f8:	69 f0       	breq	.+26     	; 0x8414 <modf+0x4c>
    83fa:	22 0f       	add	r18, r18
    83fc:	33 1f       	adc	r19, r19
    83fe:	44 1f       	adc	r20, r20
    8400:	b3 95       	inc	r27
    8402:	da f3       	brmi	.-10     	; 0x83fa <modf+0x32>
    8404:	0d d0       	rcall	.+26     	; 0x8420 <modf+0x58>
    8406:	44 cc       	rjmp	.-1912   	; 0x7c90 <__subsf3>
    8408:	61 30       	cpi	r22, 0x01	; 1
    840a:	71 05       	cpc	r23, r1
    840c:	a0 e8       	ldi	r26, 0x80	; 128
    840e:	8a 07       	cpc	r24, r26
    8410:	b9 46       	sbci	r27, 0x69	; 105
    8412:	30 f4       	brcc	.+12     	; 0x8420 <modf+0x58>
    8414:	9b 01       	movw	r18, r22
    8416:	ac 01       	movw	r20, r24
    8418:	66 27       	eor	r22, r22
    841a:	77 27       	eor	r23, r23
    841c:	88 27       	eor	r24, r24
    841e:	90 78       	andi	r25, 0x80	; 128
    8420:	30 96       	adiw	r30, 0x00	; 0
    8422:	21 f0       	breq	.+8      	; 0x842c <modf+0x64>
    8424:	20 83       	st	Z, r18
    8426:	31 83       	std	Z+1, r19	; 0x01
    8428:	42 83       	std	Z+2, r20	; 0x02
    842a:	53 83       	std	Z+3, r21	; 0x03
    842c:	08 95       	ret

0000842e <vfprintf>:
    842e:	2f 92       	push	r2
    8430:	3f 92       	push	r3
    8432:	4f 92       	push	r4
    8434:	5f 92       	push	r5
    8436:	6f 92       	push	r6
    8438:	7f 92       	push	r7
    843a:	8f 92       	push	r8
    843c:	9f 92       	push	r9
    843e:	af 92       	push	r10
    8440:	bf 92       	push	r11
    8442:	cf 92       	push	r12
    8444:	df 92       	push	r13
    8446:	ef 92       	push	r14
    8448:	ff 92       	push	r15
    844a:	0f 93       	push	r16
    844c:	1f 93       	push	r17
    844e:	cf 93       	push	r28
    8450:	df 93       	push	r29
    8452:	cd b7       	in	r28, 0x3d	; 61
    8454:	de b7       	in	r29, 0x3e	; 62
    8456:	63 97       	sbiw	r28, 0x13	; 19
    8458:	0f b6       	in	r0, 0x3f	; 63
    845a:	f8 94       	cli
    845c:	de bf       	out	0x3e, r29	; 62
    845e:	0f be       	out	0x3f, r0	; 63
    8460:	cd bf       	out	0x3d, r28	; 61
    8462:	6c 01       	movw	r12, r24
    8464:	4b 01       	movw	r8, r22
    8466:	2a 01       	movw	r4, r20
    8468:	fc 01       	movw	r30, r24
    846a:	17 82       	std	Z+7, r1	; 0x07
    846c:	16 82       	std	Z+6, r1	; 0x06
    846e:	83 81       	ldd	r24, Z+3	; 0x03
    8470:	81 ff       	sbrs	r24, 1
    8472:	29 c3       	rjmp	.+1618   	; 0x8ac6 <vfprintf+0x698>
    8474:	ae 01       	movw	r20, r28
    8476:	4f 5f       	subi	r20, 0xFF	; 255
    8478:	5f 4f       	sbci	r21, 0xFF	; 255
    847a:	3a 01       	movw	r6, r20
    847c:	f6 01       	movw	r30, r12
    847e:	93 81       	ldd	r25, Z+3	; 0x03
    8480:	f4 01       	movw	r30, r8
    8482:	93 fd       	sbrc	r25, 3
    8484:	85 91       	lpm	r24, Z+
    8486:	93 ff       	sbrs	r25, 3
    8488:	81 91       	ld	r24, Z+
    848a:	4f 01       	movw	r8, r30
    848c:	88 23       	and	r24, r24
    848e:	09 f4       	brne	.+2      	; 0x8492 <vfprintf+0x64>
    8490:	16 c3       	rjmp	.+1580   	; 0x8abe <vfprintf+0x690>
    8492:	85 32       	cpi	r24, 0x25	; 37
    8494:	39 f4       	brne	.+14     	; 0x84a4 <vfprintf+0x76>
    8496:	93 fd       	sbrc	r25, 3
    8498:	85 91       	lpm	r24, Z+
    849a:	93 ff       	sbrs	r25, 3
    849c:	81 91       	ld	r24, Z+
    849e:	4f 01       	movw	r8, r30
    84a0:	85 32       	cpi	r24, 0x25	; 37
    84a2:	31 f4       	brne	.+12     	; 0x84b0 <vfprintf+0x82>
    84a4:	b6 01       	movw	r22, r12
    84a6:	90 e0       	ldi	r25, 0x00	; 0
    84a8:	da d5       	rcall	.+2996   	; 0x905e <fputc>
    84aa:	52 01       	movw	r10, r4
    84ac:	25 01       	movw	r4, r10
    84ae:	e6 cf       	rjmp	.-52     	; 0x847c <vfprintf+0x4e>
    84b0:	10 e0       	ldi	r17, 0x00	; 0
    84b2:	f1 2c       	mov	r15, r1
    84b4:	20 e0       	ldi	r18, 0x00	; 0
    84b6:	20 32       	cpi	r18, 0x20	; 32
    84b8:	a0 f4       	brcc	.+40     	; 0x84e2 <vfprintf+0xb4>
    84ba:	8b 32       	cpi	r24, 0x2B	; 43
    84bc:	69 f0       	breq	.+26     	; 0x84d8 <vfprintf+0xaa>
    84be:	30 f4       	brcc	.+12     	; 0x84cc <vfprintf+0x9e>
    84c0:	80 32       	cpi	r24, 0x20	; 32
    84c2:	59 f0       	breq	.+22     	; 0x84da <vfprintf+0xac>
    84c4:	83 32       	cpi	r24, 0x23	; 35
    84c6:	69 f4       	brne	.+26     	; 0x84e2 <vfprintf+0xb4>
    84c8:	20 61       	ori	r18, 0x10	; 16
    84ca:	2c c0       	rjmp	.+88     	; 0x8524 <vfprintf+0xf6>
    84cc:	8d 32       	cpi	r24, 0x2D	; 45
    84ce:	39 f0       	breq	.+14     	; 0x84de <vfprintf+0xb0>
    84d0:	80 33       	cpi	r24, 0x30	; 48
    84d2:	39 f4       	brne	.+14     	; 0x84e2 <vfprintf+0xb4>
    84d4:	21 60       	ori	r18, 0x01	; 1
    84d6:	26 c0       	rjmp	.+76     	; 0x8524 <vfprintf+0xf6>
    84d8:	22 60       	ori	r18, 0x02	; 2
    84da:	24 60       	ori	r18, 0x04	; 4
    84dc:	23 c0       	rjmp	.+70     	; 0x8524 <vfprintf+0xf6>
    84de:	28 60       	ori	r18, 0x08	; 8
    84e0:	21 c0       	rjmp	.+66     	; 0x8524 <vfprintf+0xf6>
    84e2:	27 fd       	sbrc	r18, 7
    84e4:	27 c0       	rjmp	.+78     	; 0x8534 <vfprintf+0x106>
    84e6:	30 ed       	ldi	r19, 0xD0	; 208
    84e8:	38 0f       	add	r19, r24
    84ea:	3a 30       	cpi	r19, 0x0A	; 10
    84ec:	78 f4       	brcc	.+30     	; 0x850c <vfprintf+0xde>
    84ee:	26 ff       	sbrs	r18, 6
    84f0:	06 c0       	rjmp	.+12     	; 0x84fe <vfprintf+0xd0>
    84f2:	fa e0       	ldi	r31, 0x0A	; 10
    84f4:	1f 9f       	mul	r17, r31
    84f6:	30 0d       	add	r19, r0
    84f8:	11 24       	eor	r1, r1
    84fa:	13 2f       	mov	r17, r19
    84fc:	13 c0       	rjmp	.+38     	; 0x8524 <vfprintf+0xf6>
    84fe:	4a e0       	ldi	r20, 0x0A	; 10
    8500:	f4 9e       	mul	r15, r20
    8502:	30 0d       	add	r19, r0
    8504:	11 24       	eor	r1, r1
    8506:	f3 2e       	mov	r15, r19
    8508:	20 62       	ori	r18, 0x20	; 32
    850a:	0c c0       	rjmp	.+24     	; 0x8524 <vfprintf+0xf6>
    850c:	8e 32       	cpi	r24, 0x2E	; 46
    850e:	21 f4       	brne	.+8      	; 0x8518 <vfprintf+0xea>
    8510:	26 fd       	sbrc	r18, 6
    8512:	d5 c2       	rjmp	.+1450   	; 0x8abe <vfprintf+0x690>
    8514:	20 64       	ori	r18, 0x40	; 64
    8516:	06 c0       	rjmp	.+12     	; 0x8524 <vfprintf+0xf6>
    8518:	8c 36       	cpi	r24, 0x6C	; 108
    851a:	11 f4       	brne	.+4      	; 0x8520 <vfprintf+0xf2>
    851c:	20 68       	ori	r18, 0x80	; 128
    851e:	02 c0       	rjmp	.+4      	; 0x8524 <vfprintf+0xf6>
    8520:	88 36       	cpi	r24, 0x68	; 104
    8522:	41 f4       	brne	.+16     	; 0x8534 <vfprintf+0x106>
    8524:	f4 01       	movw	r30, r8
    8526:	93 fd       	sbrc	r25, 3
    8528:	85 91       	lpm	r24, Z+
    852a:	93 ff       	sbrs	r25, 3
    852c:	81 91       	ld	r24, Z+
    852e:	4f 01       	movw	r8, r30
    8530:	81 11       	cpse	r24, r1
    8532:	c1 cf       	rjmp	.-126    	; 0x84b6 <vfprintf+0x88>
    8534:	9b eb       	ldi	r25, 0xBB	; 187
    8536:	98 0f       	add	r25, r24
    8538:	93 30       	cpi	r25, 0x03	; 3
    853a:	18 f4       	brcc	.+6      	; 0x8542 <vfprintf+0x114>
    853c:	20 61       	ori	r18, 0x10	; 16
    853e:	80 5e       	subi	r24, 0xE0	; 224
    8540:	06 c0       	rjmp	.+12     	; 0x854e <vfprintf+0x120>
    8542:	9b e9       	ldi	r25, 0x9B	; 155
    8544:	98 0f       	add	r25, r24
    8546:	93 30       	cpi	r25, 0x03	; 3
    8548:	08 f0       	brcs	.+2      	; 0x854c <vfprintf+0x11e>
    854a:	64 c1       	rjmp	.+712    	; 0x8814 <vfprintf+0x3e6>
    854c:	2f 7e       	andi	r18, 0xEF	; 239
    854e:	26 ff       	sbrs	r18, 6
    8550:	16 e0       	ldi	r17, 0x06	; 6
    8552:	2f 73       	andi	r18, 0x3F	; 63
    8554:	32 2e       	mov	r3, r18
    8556:	85 36       	cpi	r24, 0x65	; 101
    8558:	19 f4       	brne	.+6      	; 0x8560 <vfprintf+0x132>
    855a:	20 64       	ori	r18, 0x40	; 64
    855c:	32 2e       	mov	r3, r18
    855e:	08 c0       	rjmp	.+16     	; 0x8570 <vfprintf+0x142>
    8560:	86 36       	cpi	r24, 0x66	; 102
    8562:	21 f4       	brne	.+8      	; 0x856c <vfprintf+0x13e>
    8564:	f2 2f       	mov	r31, r18
    8566:	f0 68       	ori	r31, 0x80	; 128
    8568:	3f 2e       	mov	r3, r31
    856a:	02 c0       	rjmp	.+4      	; 0x8570 <vfprintf+0x142>
    856c:	11 11       	cpse	r17, r1
    856e:	11 50       	subi	r17, 0x01	; 1
    8570:	37 fe       	sbrs	r3, 7
    8572:	07 c0       	rjmp	.+14     	; 0x8582 <vfprintf+0x154>
    8574:	1c 33       	cpi	r17, 0x3C	; 60
    8576:	50 f4       	brcc	.+20     	; 0x858c <vfprintf+0x15e>
    8578:	ee 24       	eor	r14, r14
    857a:	e3 94       	inc	r14
    857c:	e1 0e       	add	r14, r17
    857e:	27 e0       	ldi	r18, 0x07	; 7
    8580:	0b c0       	rjmp	.+22     	; 0x8598 <vfprintf+0x16a>
    8582:	18 30       	cpi	r17, 0x08	; 8
    8584:	38 f0       	brcs	.+14     	; 0x8594 <vfprintf+0x166>
    8586:	27 e0       	ldi	r18, 0x07	; 7
    8588:	17 e0       	ldi	r17, 0x07	; 7
    858a:	05 c0       	rjmp	.+10     	; 0x8596 <vfprintf+0x168>
    858c:	27 e0       	ldi	r18, 0x07	; 7
    858e:	4c e3       	ldi	r20, 0x3C	; 60
    8590:	e4 2e       	mov	r14, r20
    8592:	02 c0       	rjmp	.+4      	; 0x8598 <vfprintf+0x16a>
    8594:	21 2f       	mov	r18, r17
    8596:	e1 2c       	mov	r14, r1
    8598:	52 01       	movw	r10, r4
    859a:	44 e0       	ldi	r20, 0x04	; 4
    859c:	a4 0e       	add	r10, r20
    859e:	b1 1c       	adc	r11, r1
    85a0:	f2 01       	movw	r30, r4
    85a2:	60 81       	ld	r22, Z
    85a4:	71 81       	ldd	r23, Z+1	; 0x01
    85a6:	82 81       	ldd	r24, Z+2	; 0x02
    85a8:	93 81       	ldd	r25, Z+3	; 0x03
    85aa:	0e 2d       	mov	r16, r14
    85ac:	a3 01       	movw	r20, r6
    85ae:	69 d4       	rcall	.+2258   	; 0x8e82 <__ftoa_engine>
    85b0:	2c 01       	movw	r4, r24
    85b2:	09 81       	ldd	r16, Y+1	; 0x01
    85b4:	00 ff       	sbrs	r16, 0
    85b6:	02 c0       	rjmp	.+4      	; 0x85bc <vfprintf+0x18e>
    85b8:	03 ff       	sbrs	r16, 3
    85ba:	07 c0       	rjmp	.+14     	; 0x85ca <vfprintf+0x19c>
    85bc:	31 fc       	sbrc	r3, 1
    85be:	08 c0       	rjmp	.+16     	; 0x85d0 <vfprintf+0x1a2>
    85c0:	32 fe       	sbrs	r3, 2
    85c2:	09 c0       	rjmp	.+18     	; 0x85d6 <vfprintf+0x1a8>
    85c4:	30 e2       	ldi	r19, 0x20	; 32
    85c6:	23 2e       	mov	r2, r19
    85c8:	07 c0       	rjmp	.+14     	; 0x85d8 <vfprintf+0x1aa>
    85ca:	2d e2       	ldi	r18, 0x2D	; 45
    85cc:	22 2e       	mov	r2, r18
    85ce:	04 c0       	rjmp	.+8      	; 0x85d8 <vfprintf+0x1aa>
    85d0:	9b e2       	ldi	r25, 0x2B	; 43
    85d2:	29 2e       	mov	r2, r25
    85d4:	01 c0       	rjmp	.+2      	; 0x85d8 <vfprintf+0x1aa>
    85d6:	21 2c       	mov	r2, r1
    85d8:	80 2f       	mov	r24, r16
    85da:	8c 70       	andi	r24, 0x0C	; 12
    85dc:	19 f0       	breq	.+6      	; 0x85e4 <vfprintf+0x1b6>
    85de:	21 10       	cpse	r2, r1
    85e0:	51 c2       	rjmp	.+1186   	; 0x8a84 <vfprintf+0x656>
    85e2:	8d c2       	rjmp	.+1306   	; 0x8afe <vfprintf+0x6d0>
    85e4:	37 fe       	sbrs	r3, 7
    85e6:	0f c0       	rjmp	.+30     	; 0x8606 <vfprintf+0x1d8>
    85e8:	e4 0c       	add	r14, r4
    85ea:	04 ff       	sbrs	r16, 4
    85ec:	04 c0       	rjmp	.+8      	; 0x85f6 <vfprintf+0x1c8>
    85ee:	8a 81       	ldd	r24, Y+2	; 0x02
    85f0:	81 33       	cpi	r24, 0x31	; 49
    85f2:	09 f4       	brne	.+2      	; 0x85f6 <vfprintf+0x1c8>
    85f4:	ea 94       	dec	r14
    85f6:	1e 14       	cp	r1, r14
    85f8:	74 f5       	brge	.+92     	; 0x8656 <vfprintf+0x228>
    85fa:	f8 e0       	ldi	r31, 0x08	; 8
    85fc:	fe 15       	cp	r31, r14
    85fe:	78 f5       	brcc	.+94     	; 0x865e <vfprintf+0x230>
    8600:	88 e0       	ldi	r24, 0x08	; 8
    8602:	e8 2e       	mov	r14, r24
    8604:	2c c0       	rjmp	.+88     	; 0x865e <vfprintf+0x230>
    8606:	36 fc       	sbrc	r3, 6
    8608:	2a c0       	rjmp	.+84     	; 0x865e <vfprintf+0x230>
    860a:	81 2f       	mov	r24, r17
    860c:	90 e0       	ldi	r25, 0x00	; 0
    860e:	84 15       	cp	r24, r4
    8610:	95 05       	cpc	r25, r5
    8612:	9c f0       	brlt	.+38     	; 0x863a <vfprintf+0x20c>
    8614:	2c ef       	ldi	r18, 0xFC	; 252
    8616:	42 16       	cp	r4, r18
    8618:	2f ef       	ldi	r18, 0xFF	; 255
    861a:	52 06       	cpc	r5, r18
    861c:	74 f0       	brlt	.+28     	; 0x863a <vfprintf+0x20c>
    861e:	43 2d       	mov	r20, r3
    8620:	40 68       	ori	r20, 0x80	; 128
    8622:	34 2e       	mov	r3, r20
    8624:	0a c0       	rjmp	.+20     	; 0x863a <vfprintf+0x20c>
    8626:	e2 e0       	ldi	r30, 0x02	; 2
    8628:	f0 e0       	ldi	r31, 0x00	; 0
    862a:	ec 0f       	add	r30, r28
    862c:	fd 1f       	adc	r31, r29
    862e:	e1 0f       	add	r30, r17
    8630:	f1 1d       	adc	r31, r1
    8632:	80 81       	ld	r24, Z
    8634:	80 33       	cpi	r24, 0x30	; 48
    8636:	19 f4       	brne	.+6      	; 0x863e <vfprintf+0x210>
    8638:	11 50       	subi	r17, 0x01	; 1
    863a:	11 11       	cpse	r17, r1
    863c:	f4 cf       	rjmp	.-24     	; 0x8626 <vfprintf+0x1f8>
    863e:	37 fe       	sbrs	r3, 7
    8640:	0e c0       	rjmp	.+28     	; 0x865e <vfprintf+0x230>
    8642:	ee 24       	eor	r14, r14
    8644:	e3 94       	inc	r14
    8646:	e1 0e       	add	r14, r17
    8648:	81 2f       	mov	r24, r17
    864a:	90 e0       	ldi	r25, 0x00	; 0
    864c:	48 16       	cp	r4, r24
    864e:	59 06       	cpc	r5, r25
    8650:	2c f4       	brge	.+10     	; 0x865c <vfprintf+0x22e>
    8652:	14 19       	sub	r17, r4
    8654:	04 c0       	rjmp	.+8      	; 0x865e <vfprintf+0x230>
    8656:	ee 24       	eor	r14, r14
    8658:	e3 94       	inc	r14
    865a:	01 c0       	rjmp	.+2      	; 0x865e <vfprintf+0x230>
    865c:	10 e0       	ldi	r17, 0x00	; 0
    865e:	37 fe       	sbrs	r3, 7
    8660:	06 c0       	rjmp	.+12     	; 0x866e <vfprintf+0x240>
    8662:	14 14       	cp	r1, r4
    8664:	15 04       	cpc	r1, r5
    8666:	34 f4       	brge	.+12     	; 0x8674 <vfprintf+0x246>
    8668:	c2 01       	movw	r24, r4
    866a:	01 96       	adiw	r24, 0x01	; 1
    866c:	05 c0       	rjmp	.+10     	; 0x8678 <vfprintf+0x24a>
    866e:	85 e0       	ldi	r24, 0x05	; 5
    8670:	90 e0       	ldi	r25, 0x00	; 0
    8672:	02 c0       	rjmp	.+4      	; 0x8678 <vfprintf+0x24a>
    8674:	81 e0       	ldi	r24, 0x01	; 1
    8676:	90 e0       	ldi	r25, 0x00	; 0
    8678:	21 10       	cpse	r2, r1
    867a:	01 96       	adiw	r24, 0x01	; 1
    867c:	11 23       	and	r17, r17
    867e:	31 f0       	breq	.+12     	; 0x868c <vfprintf+0x25e>
    8680:	21 2f       	mov	r18, r17
    8682:	30 e0       	ldi	r19, 0x00	; 0
    8684:	2f 5f       	subi	r18, 0xFF	; 255
    8686:	3f 4f       	sbci	r19, 0xFF	; 255
    8688:	82 0f       	add	r24, r18
    868a:	93 1f       	adc	r25, r19
    868c:	2f 2d       	mov	r18, r15
    868e:	30 e0       	ldi	r19, 0x00	; 0
    8690:	82 17       	cp	r24, r18
    8692:	93 07       	cpc	r25, r19
    8694:	14 f4       	brge	.+4      	; 0x869a <vfprintf+0x26c>
    8696:	f8 1a       	sub	r15, r24
    8698:	01 c0       	rjmp	.+2      	; 0x869c <vfprintf+0x26e>
    869a:	f1 2c       	mov	r15, r1
    869c:	83 2d       	mov	r24, r3
    869e:	89 70       	andi	r24, 0x09	; 9
    86a0:	41 f4       	brne	.+16     	; 0x86b2 <vfprintf+0x284>
    86a2:	ff 20       	and	r15, r15
    86a4:	31 f0       	breq	.+12     	; 0x86b2 <vfprintf+0x284>
    86a6:	b6 01       	movw	r22, r12
    86a8:	80 e2       	ldi	r24, 0x20	; 32
    86aa:	90 e0       	ldi	r25, 0x00	; 0
    86ac:	d8 d4       	rcall	.+2480   	; 0x905e <fputc>
    86ae:	fa 94       	dec	r15
    86b0:	f8 cf       	rjmp	.-16     	; 0x86a2 <vfprintf+0x274>
    86b2:	22 20       	and	r2, r2
    86b4:	21 f0       	breq	.+8      	; 0x86be <vfprintf+0x290>
    86b6:	b6 01       	movw	r22, r12
    86b8:	82 2d       	mov	r24, r2
    86ba:	90 e0       	ldi	r25, 0x00	; 0
    86bc:	d0 d4       	rcall	.+2464   	; 0x905e <fputc>
    86be:	33 fc       	sbrc	r3, 3
    86c0:	08 c0       	rjmp	.+16     	; 0x86d2 <vfprintf+0x2a4>
    86c2:	ff 20       	and	r15, r15
    86c4:	31 f0       	breq	.+12     	; 0x86d2 <vfprintf+0x2a4>
    86c6:	b6 01       	movw	r22, r12
    86c8:	80 e3       	ldi	r24, 0x30	; 48
    86ca:	90 e0       	ldi	r25, 0x00	; 0
    86cc:	c8 d4       	rcall	.+2448   	; 0x905e <fputc>
    86ce:	fa 94       	dec	r15
    86d0:	f8 cf       	rjmp	.-16     	; 0x86c2 <vfprintf+0x294>
    86d2:	37 fe       	sbrs	r3, 7
    86d4:	58 c0       	rjmp	.+176    	; 0x8786 <vfprintf+0x358>
    86d6:	94 2d       	mov	r25, r4
    86d8:	85 2d       	mov	r24, r5
    86da:	57 fe       	sbrs	r5, 7
    86dc:	02 c0       	rjmp	.+4      	; 0x86e2 <vfprintf+0x2b4>
    86de:	90 e0       	ldi	r25, 0x00	; 0
    86e0:	80 e0       	ldi	r24, 0x00	; 0
    86e2:	29 2e       	mov	r2, r25
    86e4:	38 2e       	mov	r3, r24
    86e6:	20 e0       	ldi	r18, 0x00	; 0
    86e8:	30 e0       	ldi	r19, 0x00	; 0
    86ea:	a2 01       	movw	r20, r4
    86ec:	4e 19       	sub	r20, r14
    86ee:	51 09       	sbc	r21, r1
    86f0:	5d 87       	std	Y+13, r21	; 0x0d
    86f2:	4c 87       	std	Y+12, r20	; 0x0c
    86f4:	a2 01       	movw	r20, r4
    86f6:	42 19       	sub	r20, r2
    86f8:	53 09       	sbc	r21, r3
    86fa:	5f 87       	std	Y+15, r21	; 0x0f
    86fc:	4e 87       	std	Y+14, r20	; 0x0e
    86fe:	61 2f       	mov	r22, r17
    8700:	70 e0       	ldi	r23, 0x00	; 0
    8702:	44 27       	eor	r20, r20
    8704:	55 27       	eor	r21, r21
    8706:	46 1b       	sub	r20, r22
    8708:	57 0b       	sbc	r21, r23
    870a:	59 8b       	std	Y+17, r21	; 0x11
    870c:	48 8b       	std	Y+16, r20	; 0x10
    870e:	5f ef       	ldi	r21, 0xFF	; 255
    8710:	25 16       	cp	r2, r21
    8712:	35 06       	cpc	r3, r21
    8714:	41 f4       	brne	.+16     	; 0x8726 <vfprintf+0x2f8>
    8716:	b6 01       	movw	r22, r12
    8718:	8e e2       	ldi	r24, 0x2E	; 46
    871a:	90 e0       	ldi	r25, 0x00	; 0
    871c:	2a 8b       	std	Y+18, r18	; 0x12
    871e:	3b 8b       	std	Y+19, r19	; 0x13
    8720:	9e d4       	rcall	.+2364   	; 0x905e <fputc>
    8722:	3b 89       	ldd	r19, Y+19	; 0x13
    8724:	2a 89       	ldd	r18, Y+18	; 0x12
    8726:	42 14       	cp	r4, r2
    8728:	53 04       	cpc	r5, r3
    872a:	6c f0       	brlt	.+26     	; 0x8746 <vfprintf+0x318>
    872c:	4c 85       	ldd	r20, Y+12	; 0x0c
    872e:	5d 85       	ldd	r21, Y+13	; 0x0d
    8730:	42 15       	cp	r20, r2
    8732:	53 05       	cpc	r21, r3
    8734:	44 f4       	brge	.+16     	; 0x8746 <vfprintf+0x318>
    8736:	ee 85       	ldd	r30, Y+14	; 0x0e
    8738:	ff 85       	ldd	r31, Y+15	; 0x0f
    873a:	e2 0f       	add	r30, r18
    873c:	f3 1f       	adc	r31, r19
    873e:	e6 0d       	add	r30, r6
    8740:	f7 1d       	adc	r31, r7
    8742:	81 81       	ldd	r24, Z+1	; 0x01
    8744:	01 c0       	rjmp	.+2      	; 0x8748 <vfprintf+0x31a>
    8746:	80 e3       	ldi	r24, 0x30	; 48
    8748:	51 e0       	ldi	r21, 0x01	; 1
    874a:	25 1a       	sub	r2, r21
    874c:	31 08       	sbc	r3, r1
    874e:	2f 5f       	subi	r18, 0xFF	; 255
    8750:	3f 4f       	sbci	r19, 0xFF	; 255
    8752:	48 89       	ldd	r20, Y+16	; 0x10
    8754:	59 89       	ldd	r21, Y+17	; 0x11
    8756:	24 16       	cp	r2, r20
    8758:	35 06       	cpc	r3, r21
    875a:	44 f0       	brlt	.+16     	; 0x876c <vfprintf+0x33e>
    875c:	b6 01       	movw	r22, r12
    875e:	90 e0       	ldi	r25, 0x00	; 0
    8760:	2a 8b       	std	Y+18, r18	; 0x12
    8762:	3b 8b       	std	Y+19, r19	; 0x13
    8764:	7c d4       	rcall	.+2296   	; 0x905e <fputc>
    8766:	2a 89       	ldd	r18, Y+18	; 0x12
    8768:	3b 89       	ldd	r19, Y+19	; 0x13
    876a:	d1 cf       	rjmp	.-94     	; 0x870e <vfprintf+0x2e0>
    876c:	24 14       	cp	r2, r4
    876e:	35 04       	cpc	r3, r5
    8770:	39 f4       	brne	.+14     	; 0x8780 <vfprintf+0x352>
    8772:	9a 81       	ldd	r25, Y+2	; 0x02
    8774:	96 33       	cpi	r25, 0x36	; 54
    8776:	18 f4       	brcc	.+6      	; 0x877e <vfprintf+0x350>
    8778:	95 33       	cpi	r25, 0x35	; 53
    877a:	11 f4       	brne	.+4      	; 0x8780 <vfprintf+0x352>
    877c:	04 ff       	sbrs	r16, 4
    877e:	81 e3       	ldi	r24, 0x31	; 49
    8780:	b6 01       	movw	r22, r12
    8782:	90 e0       	ldi	r25, 0x00	; 0
    8784:	45 c0       	rjmp	.+138    	; 0x8810 <vfprintf+0x3e2>
    8786:	8a 81       	ldd	r24, Y+2	; 0x02
    8788:	81 33       	cpi	r24, 0x31	; 49
    878a:	09 f0       	breq	.+2      	; 0x878e <vfprintf+0x360>
    878c:	0f 7e       	andi	r16, 0xEF	; 239
    878e:	b6 01       	movw	r22, r12
    8790:	90 e0       	ldi	r25, 0x00	; 0
    8792:	65 d4       	rcall	.+2250   	; 0x905e <fputc>
    8794:	11 11       	cpse	r17, r1
    8796:	05 c0       	rjmp	.+10     	; 0x87a2 <vfprintf+0x374>
    8798:	34 fc       	sbrc	r3, 4
    879a:	16 c0       	rjmp	.+44     	; 0x87c8 <vfprintf+0x39a>
    879c:	85 e6       	ldi	r24, 0x65	; 101
    879e:	90 e0       	ldi	r25, 0x00	; 0
    87a0:	15 c0       	rjmp	.+42     	; 0x87cc <vfprintf+0x39e>
    87a2:	b6 01       	movw	r22, r12
    87a4:	8e e2       	ldi	r24, 0x2E	; 46
    87a6:	90 e0       	ldi	r25, 0x00	; 0
    87a8:	5a d4       	rcall	.+2228   	; 0x905e <fputc>
    87aa:	82 e0       	ldi	r24, 0x02	; 2
    87ac:	ee 24       	eor	r14, r14
    87ae:	e3 94       	inc	r14
    87b0:	e8 0e       	add	r14, r24
    87b2:	f3 01       	movw	r30, r6
    87b4:	e8 0f       	add	r30, r24
    87b6:	f1 1d       	adc	r31, r1
    87b8:	80 81       	ld	r24, Z
    87ba:	b6 01       	movw	r22, r12
    87bc:	90 e0       	ldi	r25, 0x00	; 0
    87be:	4f d4       	rcall	.+2206   	; 0x905e <fputc>
    87c0:	11 50       	subi	r17, 0x01	; 1
    87c2:	8e 2d       	mov	r24, r14
    87c4:	99 f7       	brne	.-26     	; 0x87ac <vfprintf+0x37e>
    87c6:	e8 cf       	rjmp	.-48     	; 0x8798 <vfprintf+0x36a>
    87c8:	85 e4       	ldi	r24, 0x45	; 69
    87ca:	90 e0       	ldi	r25, 0x00	; 0
    87cc:	b6 01       	movw	r22, r12
    87ce:	47 d4       	rcall	.+2190   	; 0x905e <fputc>
    87d0:	57 fc       	sbrc	r5, 7
    87d2:	05 c0       	rjmp	.+10     	; 0x87de <vfprintf+0x3b0>
    87d4:	41 14       	cp	r4, r1
    87d6:	51 04       	cpc	r5, r1
    87d8:	39 f4       	brne	.+14     	; 0x87e8 <vfprintf+0x3ba>
    87da:	04 ff       	sbrs	r16, 4
    87dc:	05 c0       	rjmp	.+10     	; 0x87e8 <vfprintf+0x3ba>
    87de:	51 94       	neg	r5
    87e0:	41 94       	neg	r4
    87e2:	51 08       	sbc	r5, r1
    87e4:	8d e2       	ldi	r24, 0x2D	; 45
    87e6:	01 c0       	rjmp	.+2      	; 0x87ea <vfprintf+0x3bc>
    87e8:	8b e2       	ldi	r24, 0x2B	; 43
    87ea:	b6 01       	movw	r22, r12
    87ec:	90 e0       	ldi	r25, 0x00	; 0
    87ee:	37 d4       	rcall	.+2158   	; 0x905e <fputc>
    87f0:	80 e3       	ldi	r24, 0x30	; 48
    87f2:	9a e0       	ldi	r25, 0x0A	; 10
    87f4:	49 16       	cp	r4, r25
    87f6:	51 04       	cpc	r5, r1
    87f8:	2c f0       	brlt	.+10     	; 0x8804 <vfprintf+0x3d6>
    87fa:	8f 5f       	subi	r24, 0xFF	; 255
    87fc:	5a e0       	ldi	r21, 0x0A	; 10
    87fe:	45 1a       	sub	r4, r21
    8800:	51 08       	sbc	r5, r1
    8802:	f7 cf       	rjmp	.-18     	; 0x87f2 <vfprintf+0x3c4>
    8804:	b6 01       	movw	r22, r12
    8806:	90 e0       	ldi	r25, 0x00	; 0
    8808:	2a d4       	rcall	.+2132   	; 0x905e <fputc>
    880a:	b6 01       	movw	r22, r12
    880c:	c2 01       	movw	r24, r4
    880e:	c0 96       	adiw	r24, 0x30	; 48
    8810:	26 d4       	rcall	.+2124   	; 0x905e <fputc>
    8812:	4c c1       	rjmp	.+664    	; 0x8aac <vfprintf+0x67e>
    8814:	83 36       	cpi	r24, 0x63	; 99
    8816:	31 f0       	breq	.+12     	; 0x8824 <vfprintf+0x3f6>
    8818:	83 37       	cpi	r24, 0x73	; 115
    881a:	79 f0       	breq	.+30     	; 0x883a <vfprintf+0x40c>
    881c:	83 35       	cpi	r24, 0x53	; 83
    881e:	09 f0       	breq	.+2      	; 0x8822 <vfprintf+0x3f4>
    8820:	54 c0       	rjmp	.+168    	; 0x88ca <vfprintf+0x49c>
    8822:	20 c0       	rjmp	.+64     	; 0x8864 <vfprintf+0x436>
    8824:	52 01       	movw	r10, r4
    8826:	e2 e0       	ldi	r30, 0x02	; 2
    8828:	ae 0e       	add	r10, r30
    882a:	b1 1c       	adc	r11, r1
    882c:	f2 01       	movw	r30, r4
    882e:	80 81       	ld	r24, Z
    8830:	89 83       	std	Y+1, r24	; 0x01
    8832:	01 e0       	ldi	r16, 0x01	; 1
    8834:	10 e0       	ldi	r17, 0x00	; 0
    8836:	23 01       	movw	r4, r6
    8838:	13 c0       	rjmp	.+38     	; 0x8860 <vfprintf+0x432>
    883a:	52 01       	movw	r10, r4
    883c:	f2 e0       	ldi	r31, 0x02	; 2
    883e:	af 0e       	add	r10, r31
    8840:	b1 1c       	adc	r11, r1
    8842:	f2 01       	movw	r30, r4
    8844:	40 80       	ld	r4, Z
    8846:	51 80       	ldd	r5, Z+1	; 0x01
    8848:	26 ff       	sbrs	r18, 6
    884a:	03 c0       	rjmp	.+6      	; 0x8852 <vfprintf+0x424>
    884c:	61 2f       	mov	r22, r17
    884e:	70 e0       	ldi	r23, 0x00	; 0
    8850:	02 c0       	rjmp	.+4      	; 0x8856 <vfprintf+0x428>
    8852:	6f ef       	ldi	r22, 0xFF	; 255
    8854:	7f ef       	ldi	r23, 0xFF	; 255
    8856:	c2 01       	movw	r24, r4
    8858:	2a 8b       	std	Y+18, r18	; 0x12
    885a:	f6 d3       	rcall	.+2028   	; 0x9048 <strnlen>
    885c:	8c 01       	movw	r16, r24
    885e:	2a 89       	ldd	r18, Y+18	; 0x12
    8860:	2f 77       	andi	r18, 0x7F	; 127
    8862:	14 c0       	rjmp	.+40     	; 0x888c <vfprintf+0x45e>
    8864:	52 01       	movw	r10, r4
    8866:	f2 e0       	ldi	r31, 0x02	; 2
    8868:	af 0e       	add	r10, r31
    886a:	b1 1c       	adc	r11, r1
    886c:	f2 01       	movw	r30, r4
    886e:	40 80       	ld	r4, Z
    8870:	51 80       	ldd	r5, Z+1	; 0x01
    8872:	26 ff       	sbrs	r18, 6
    8874:	03 c0       	rjmp	.+6      	; 0x887c <vfprintf+0x44e>
    8876:	61 2f       	mov	r22, r17
    8878:	70 e0       	ldi	r23, 0x00	; 0
    887a:	02 c0       	rjmp	.+4      	; 0x8880 <vfprintf+0x452>
    887c:	6f ef       	ldi	r22, 0xFF	; 255
    887e:	7f ef       	ldi	r23, 0xFF	; 255
    8880:	c2 01       	movw	r24, r4
    8882:	2a 8b       	std	Y+18, r18	; 0x12
    8884:	d6 d3       	rcall	.+1964   	; 0x9032 <strnlen_P>
    8886:	8c 01       	movw	r16, r24
    8888:	2a 89       	ldd	r18, Y+18	; 0x12
    888a:	20 68       	ori	r18, 0x80	; 128
    888c:	32 2e       	mov	r3, r18
    888e:	23 fd       	sbrc	r18, 3
    8890:	18 c0       	rjmp	.+48     	; 0x88c2 <vfprintf+0x494>
    8892:	8f 2d       	mov	r24, r15
    8894:	90 e0       	ldi	r25, 0x00	; 0
    8896:	08 17       	cp	r16, r24
    8898:	19 07       	cpc	r17, r25
    889a:	98 f4       	brcc	.+38     	; 0x88c2 <vfprintf+0x494>
    889c:	b6 01       	movw	r22, r12
    889e:	80 e2       	ldi	r24, 0x20	; 32
    88a0:	90 e0       	ldi	r25, 0x00	; 0
    88a2:	dd d3       	rcall	.+1978   	; 0x905e <fputc>
    88a4:	fa 94       	dec	r15
    88a6:	f5 cf       	rjmp	.-22     	; 0x8892 <vfprintf+0x464>
    88a8:	f2 01       	movw	r30, r4
    88aa:	37 fc       	sbrc	r3, 7
    88ac:	85 91       	lpm	r24, Z+
    88ae:	37 fe       	sbrs	r3, 7
    88b0:	81 91       	ld	r24, Z+
    88b2:	2f 01       	movw	r4, r30
    88b4:	b6 01       	movw	r22, r12
    88b6:	90 e0       	ldi	r25, 0x00	; 0
    88b8:	d2 d3       	rcall	.+1956   	; 0x905e <fputc>
    88ba:	f1 10       	cpse	r15, r1
    88bc:	fa 94       	dec	r15
    88be:	01 50       	subi	r16, 0x01	; 1
    88c0:	11 09       	sbc	r17, r1
    88c2:	01 15       	cp	r16, r1
    88c4:	11 05       	cpc	r17, r1
    88c6:	81 f7       	brne	.-32     	; 0x88a8 <vfprintf+0x47a>
    88c8:	f1 c0       	rjmp	.+482    	; 0x8aac <vfprintf+0x67e>
    88ca:	84 36       	cpi	r24, 0x64	; 100
    88cc:	11 f0       	breq	.+4      	; 0x88d2 <vfprintf+0x4a4>
    88ce:	89 36       	cpi	r24, 0x69	; 105
    88d0:	51 f5       	brne	.+84     	; 0x8926 <vfprintf+0x4f8>
    88d2:	52 01       	movw	r10, r4
    88d4:	27 ff       	sbrs	r18, 7
    88d6:	09 c0       	rjmp	.+18     	; 0x88ea <vfprintf+0x4bc>
    88d8:	f4 e0       	ldi	r31, 0x04	; 4
    88da:	af 0e       	add	r10, r31
    88dc:	b1 1c       	adc	r11, r1
    88de:	f2 01       	movw	r30, r4
    88e0:	60 81       	ld	r22, Z
    88e2:	71 81       	ldd	r23, Z+1	; 0x01
    88e4:	82 81       	ldd	r24, Z+2	; 0x02
    88e6:	93 81       	ldd	r25, Z+3	; 0x03
    88e8:	0a c0       	rjmp	.+20     	; 0x88fe <vfprintf+0x4d0>
    88ea:	f2 e0       	ldi	r31, 0x02	; 2
    88ec:	af 0e       	add	r10, r31
    88ee:	b1 1c       	adc	r11, r1
    88f0:	f2 01       	movw	r30, r4
    88f2:	60 81       	ld	r22, Z
    88f4:	71 81       	ldd	r23, Z+1	; 0x01
    88f6:	07 2e       	mov	r0, r23
    88f8:	00 0c       	add	r0, r0
    88fa:	88 0b       	sbc	r24, r24
    88fc:	99 0b       	sbc	r25, r25
    88fe:	2f 76       	andi	r18, 0x6F	; 111
    8900:	32 2e       	mov	r3, r18
    8902:	97 ff       	sbrs	r25, 7
    8904:	09 c0       	rjmp	.+18     	; 0x8918 <vfprintf+0x4ea>
    8906:	90 95       	com	r25
    8908:	80 95       	com	r24
    890a:	70 95       	com	r23
    890c:	61 95       	neg	r22
    890e:	7f 4f       	sbci	r23, 0xFF	; 255
    8910:	8f 4f       	sbci	r24, 0xFF	; 255
    8912:	9f 4f       	sbci	r25, 0xFF	; 255
    8914:	20 68       	ori	r18, 0x80	; 128
    8916:	32 2e       	mov	r3, r18
    8918:	2a e0       	ldi	r18, 0x0A	; 10
    891a:	30 e0       	ldi	r19, 0x00	; 0
    891c:	a3 01       	movw	r20, r6
    891e:	06 d4       	rcall	.+2060   	; 0x912c <__ultoa_invert>
    8920:	e8 2e       	mov	r14, r24
    8922:	e6 18       	sub	r14, r6
    8924:	3e c0       	rjmp	.+124    	; 0x89a2 <vfprintf+0x574>
    8926:	02 2f       	mov	r16, r18
    8928:	85 37       	cpi	r24, 0x75	; 117
    892a:	21 f4       	brne	.+8      	; 0x8934 <vfprintf+0x506>
    892c:	0f 7e       	andi	r16, 0xEF	; 239
    892e:	2a e0       	ldi	r18, 0x0A	; 10
    8930:	30 e0       	ldi	r19, 0x00	; 0
    8932:	1d c0       	rjmp	.+58     	; 0x896e <vfprintf+0x540>
    8934:	09 7f       	andi	r16, 0xF9	; 249
    8936:	8f 36       	cpi	r24, 0x6F	; 111
    8938:	91 f0       	breq	.+36     	; 0x895e <vfprintf+0x530>
    893a:	18 f4       	brcc	.+6      	; 0x8942 <vfprintf+0x514>
    893c:	88 35       	cpi	r24, 0x58	; 88
    893e:	59 f0       	breq	.+22     	; 0x8956 <vfprintf+0x528>
    8940:	be c0       	rjmp	.+380    	; 0x8abe <vfprintf+0x690>
    8942:	80 37       	cpi	r24, 0x70	; 112
    8944:	19 f0       	breq	.+6      	; 0x894c <vfprintf+0x51e>
    8946:	88 37       	cpi	r24, 0x78	; 120
    8948:	11 f0       	breq	.+4      	; 0x894e <vfprintf+0x520>
    894a:	b9 c0       	rjmp	.+370    	; 0x8abe <vfprintf+0x690>
    894c:	00 61       	ori	r16, 0x10	; 16
    894e:	04 ff       	sbrs	r16, 4
    8950:	09 c0       	rjmp	.+18     	; 0x8964 <vfprintf+0x536>
    8952:	04 60       	ori	r16, 0x04	; 4
    8954:	07 c0       	rjmp	.+14     	; 0x8964 <vfprintf+0x536>
    8956:	24 ff       	sbrs	r18, 4
    8958:	08 c0       	rjmp	.+16     	; 0x896a <vfprintf+0x53c>
    895a:	06 60       	ori	r16, 0x06	; 6
    895c:	06 c0       	rjmp	.+12     	; 0x896a <vfprintf+0x53c>
    895e:	28 e0       	ldi	r18, 0x08	; 8
    8960:	30 e0       	ldi	r19, 0x00	; 0
    8962:	05 c0       	rjmp	.+10     	; 0x896e <vfprintf+0x540>
    8964:	20 e1       	ldi	r18, 0x10	; 16
    8966:	30 e0       	ldi	r19, 0x00	; 0
    8968:	02 c0       	rjmp	.+4      	; 0x896e <vfprintf+0x540>
    896a:	20 e1       	ldi	r18, 0x10	; 16
    896c:	32 e0       	ldi	r19, 0x02	; 2
    896e:	52 01       	movw	r10, r4
    8970:	07 ff       	sbrs	r16, 7
    8972:	09 c0       	rjmp	.+18     	; 0x8986 <vfprintf+0x558>
    8974:	f4 e0       	ldi	r31, 0x04	; 4
    8976:	af 0e       	add	r10, r31
    8978:	b1 1c       	adc	r11, r1
    897a:	f2 01       	movw	r30, r4
    897c:	60 81       	ld	r22, Z
    897e:	71 81       	ldd	r23, Z+1	; 0x01
    8980:	82 81       	ldd	r24, Z+2	; 0x02
    8982:	93 81       	ldd	r25, Z+3	; 0x03
    8984:	08 c0       	rjmp	.+16     	; 0x8996 <vfprintf+0x568>
    8986:	f2 e0       	ldi	r31, 0x02	; 2
    8988:	af 0e       	add	r10, r31
    898a:	b1 1c       	adc	r11, r1
    898c:	f2 01       	movw	r30, r4
    898e:	60 81       	ld	r22, Z
    8990:	71 81       	ldd	r23, Z+1	; 0x01
    8992:	80 e0       	ldi	r24, 0x00	; 0
    8994:	90 e0       	ldi	r25, 0x00	; 0
    8996:	a3 01       	movw	r20, r6
    8998:	c9 d3       	rcall	.+1938   	; 0x912c <__ultoa_invert>
    899a:	e8 2e       	mov	r14, r24
    899c:	e6 18       	sub	r14, r6
    899e:	0f 77       	andi	r16, 0x7F	; 127
    89a0:	30 2e       	mov	r3, r16
    89a2:	36 fe       	sbrs	r3, 6
    89a4:	0b c0       	rjmp	.+22     	; 0x89bc <vfprintf+0x58e>
    89a6:	33 2d       	mov	r19, r3
    89a8:	3e 7f       	andi	r19, 0xFE	; 254
    89aa:	e1 16       	cp	r14, r17
    89ac:	50 f4       	brcc	.+20     	; 0x89c2 <vfprintf+0x594>
    89ae:	34 fe       	sbrs	r3, 4
    89b0:	0a c0       	rjmp	.+20     	; 0x89c6 <vfprintf+0x598>
    89b2:	32 fc       	sbrc	r3, 2
    89b4:	08 c0       	rjmp	.+16     	; 0x89c6 <vfprintf+0x598>
    89b6:	33 2d       	mov	r19, r3
    89b8:	3e 7e       	andi	r19, 0xEE	; 238
    89ba:	05 c0       	rjmp	.+10     	; 0x89c6 <vfprintf+0x598>
    89bc:	0e 2d       	mov	r16, r14
    89be:	33 2d       	mov	r19, r3
    89c0:	03 c0       	rjmp	.+6      	; 0x89c8 <vfprintf+0x59a>
    89c2:	0e 2d       	mov	r16, r14
    89c4:	01 c0       	rjmp	.+2      	; 0x89c8 <vfprintf+0x59a>
    89c6:	01 2f       	mov	r16, r17
    89c8:	34 ff       	sbrs	r19, 4
    89ca:	0c c0       	rjmp	.+24     	; 0x89e4 <vfprintf+0x5b6>
    89cc:	fe 01       	movw	r30, r28
    89ce:	ee 0d       	add	r30, r14
    89d0:	f1 1d       	adc	r31, r1
    89d2:	80 81       	ld	r24, Z
    89d4:	80 33       	cpi	r24, 0x30	; 48
    89d6:	11 f4       	brne	.+4      	; 0x89dc <vfprintf+0x5ae>
    89d8:	39 7e       	andi	r19, 0xE9	; 233
    89da:	08 c0       	rjmp	.+16     	; 0x89ec <vfprintf+0x5be>
    89dc:	32 ff       	sbrs	r19, 2
    89de:	05 c0       	rjmp	.+10     	; 0x89ea <vfprintf+0x5bc>
    89e0:	0e 5f       	subi	r16, 0xFE	; 254
    89e2:	04 c0       	rjmp	.+8      	; 0x89ec <vfprintf+0x5be>
    89e4:	83 2f       	mov	r24, r19
    89e6:	86 78       	andi	r24, 0x86	; 134
    89e8:	09 f0       	breq	.+2      	; 0x89ec <vfprintf+0x5be>
    89ea:	0f 5f       	subi	r16, 0xFF	; 255
    89ec:	33 fd       	sbrc	r19, 3
    89ee:	12 c0       	rjmp	.+36     	; 0x8a14 <vfprintf+0x5e6>
    89f0:	30 ff       	sbrs	r19, 0
    89f2:	06 c0       	rjmp	.+12     	; 0x8a00 <vfprintf+0x5d2>
    89f4:	1e 2d       	mov	r17, r14
    89f6:	0f 15       	cp	r16, r15
    89f8:	18 f4       	brcc	.+6      	; 0x8a00 <vfprintf+0x5d2>
    89fa:	1f 0d       	add	r17, r15
    89fc:	10 1b       	sub	r17, r16
    89fe:	0f 2d       	mov	r16, r15
    8a00:	0f 15       	cp	r16, r15
    8a02:	60 f4       	brcc	.+24     	; 0x8a1c <vfprintf+0x5ee>
    8a04:	b6 01       	movw	r22, r12
    8a06:	80 e2       	ldi	r24, 0x20	; 32
    8a08:	90 e0       	ldi	r25, 0x00	; 0
    8a0a:	3b 8b       	std	Y+19, r19	; 0x13
    8a0c:	28 d3       	rcall	.+1616   	; 0x905e <fputc>
    8a0e:	0f 5f       	subi	r16, 0xFF	; 255
    8a10:	3b 89       	ldd	r19, Y+19	; 0x13
    8a12:	f6 cf       	rjmp	.-20     	; 0x8a00 <vfprintf+0x5d2>
    8a14:	0f 15       	cp	r16, r15
    8a16:	10 f4       	brcc	.+4      	; 0x8a1c <vfprintf+0x5ee>
    8a18:	f0 1a       	sub	r15, r16
    8a1a:	01 c0       	rjmp	.+2      	; 0x8a1e <vfprintf+0x5f0>
    8a1c:	f1 2c       	mov	r15, r1
    8a1e:	34 ff       	sbrs	r19, 4
    8a20:	11 c0       	rjmp	.+34     	; 0x8a44 <vfprintf+0x616>
    8a22:	b6 01       	movw	r22, r12
    8a24:	80 e3       	ldi	r24, 0x30	; 48
    8a26:	90 e0       	ldi	r25, 0x00	; 0
    8a28:	3b 8b       	std	Y+19, r19	; 0x13
    8a2a:	19 d3       	rcall	.+1586   	; 0x905e <fputc>
    8a2c:	3b 89       	ldd	r19, Y+19	; 0x13
    8a2e:	32 ff       	sbrs	r19, 2
    8a30:	16 c0       	rjmp	.+44     	; 0x8a5e <vfprintf+0x630>
    8a32:	31 fd       	sbrc	r19, 1
    8a34:	03 c0       	rjmp	.+6      	; 0x8a3c <vfprintf+0x60e>
    8a36:	88 e7       	ldi	r24, 0x78	; 120
    8a38:	90 e0       	ldi	r25, 0x00	; 0
    8a3a:	02 c0       	rjmp	.+4      	; 0x8a40 <vfprintf+0x612>
    8a3c:	88 e5       	ldi	r24, 0x58	; 88
    8a3e:	90 e0       	ldi	r25, 0x00	; 0
    8a40:	b6 01       	movw	r22, r12
    8a42:	0c c0       	rjmp	.+24     	; 0x8a5c <vfprintf+0x62e>
    8a44:	83 2f       	mov	r24, r19
    8a46:	86 78       	andi	r24, 0x86	; 134
    8a48:	51 f0       	breq	.+20     	; 0x8a5e <vfprintf+0x630>
    8a4a:	31 ff       	sbrs	r19, 1
    8a4c:	02 c0       	rjmp	.+4      	; 0x8a52 <vfprintf+0x624>
    8a4e:	8b e2       	ldi	r24, 0x2B	; 43
    8a50:	01 c0       	rjmp	.+2      	; 0x8a54 <vfprintf+0x626>
    8a52:	80 e2       	ldi	r24, 0x20	; 32
    8a54:	37 fd       	sbrc	r19, 7
    8a56:	8d e2       	ldi	r24, 0x2D	; 45
    8a58:	b6 01       	movw	r22, r12
    8a5a:	90 e0       	ldi	r25, 0x00	; 0
    8a5c:	00 d3       	rcall	.+1536   	; 0x905e <fputc>
    8a5e:	e1 16       	cp	r14, r17
    8a60:	30 f4       	brcc	.+12     	; 0x8a6e <vfprintf+0x640>
    8a62:	b6 01       	movw	r22, r12
    8a64:	80 e3       	ldi	r24, 0x30	; 48
    8a66:	90 e0       	ldi	r25, 0x00	; 0
    8a68:	fa d2       	rcall	.+1524   	; 0x905e <fputc>
    8a6a:	11 50       	subi	r17, 0x01	; 1
    8a6c:	f8 cf       	rjmp	.-16     	; 0x8a5e <vfprintf+0x630>
    8a6e:	ea 94       	dec	r14
    8a70:	f3 01       	movw	r30, r6
    8a72:	ee 0d       	add	r30, r14
    8a74:	f1 1d       	adc	r31, r1
    8a76:	80 81       	ld	r24, Z
    8a78:	b6 01       	movw	r22, r12
    8a7a:	90 e0       	ldi	r25, 0x00	; 0
    8a7c:	f0 d2       	rcall	.+1504   	; 0x905e <fputc>
    8a7e:	e1 10       	cpse	r14, r1
    8a80:	f6 cf       	rjmp	.-20     	; 0x8a6e <vfprintf+0x640>
    8a82:	14 c0       	rjmp	.+40     	; 0x8aac <vfprintf+0x67e>
    8a84:	f4 e0       	ldi	r31, 0x04	; 4
    8a86:	ff 15       	cp	r31, r15
    8a88:	48 f5       	brcc	.+82     	; 0x8adc <vfprintf+0x6ae>
    8a8a:	84 e0       	ldi	r24, 0x04	; 4
    8a8c:	f8 1a       	sub	r15, r24
    8a8e:	33 fe       	sbrs	r3, 3
    8a90:	1d c0       	rjmp	.+58     	; 0x8acc <vfprintf+0x69e>
    8a92:	21 10       	cpse	r2, r1
    8a94:	24 c0       	rjmp	.+72     	; 0x8ade <vfprintf+0x6b0>
    8a96:	03 ff       	sbrs	r16, 3
    8a98:	27 c0       	rjmp	.+78     	; 0x8ae8 <vfprintf+0x6ba>
    8a9a:	0c ea       	ldi	r16, 0xAC	; 172
    8a9c:	15 e0       	ldi	r17, 0x05	; 5
    8a9e:	f3 2d       	mov	r31, r3
    8aa0:	f0 71       	andi	r31, 0x10	; 16
    8aa2:	3f 2e       	mov	r3, r31
    8aa4:	f8 01       	movw	r30, r16
    8aa6:	84 91       	lpm	r24, Z
    8aa8:	81 11       	cpse	r24, r1
    8aaa:	21 c0       	rjmp	.+66     	; 0x8aee <vfprintf+0x6c0>
    8aac:	ff 20       	and	r15, r15
    8aae:	09 f4       	brne	.+2      	; 0x8ab2 <vfprintf+0x684>
    8ab0:	fd cc       	rjmp	.-1542   	; 0x84ac <vfprintf+0x7e>
    8ab2:	b6 01       	movw	r22, r12
    8ab4:	80 e2       	ldi	r24, 0x20	; 32
    8ab6:	90 e0       	ldi	r25, 0x00	; 0
    8ab8:	d2 d2       	rcall	.+1444   	; 0x905e <fputc>
    8aba:	fa 94       	dec	r15
    8abc:	f7 cf       	rjmp	.-18     	; 0x8aac <vfprintf+0x67e>
    8abe:	f6 01       	movw	r30, r12
    8ac0:	86 81       	ldd	r24, Z+6	; 0x06
    8ac2:	97 81       	ldd	r25, Z+7	; 0x07
    8ac4:	23 c0       	rjmp	.+70     	; 0x8b0c <vfprintf+0x6de>
    8ac6:	8f ef       	ldi	r24, 0xFF	; 255
    8ac8:	9f ef       	ldi	r25, 0xFF	; 255
    8aca:	20 c0       	rjmp	.+64     	; 0x8b0c <vfprintf+0x6de>
    8acc:	b6 01       	movw	r22, r12
    8ace:	80 e2       	ldi	r24, 0x20	; 32
    8ad0:	90 e0       	ldi	r25, 0x00	; 0
    8ad2:	c5 d2       	rcall	.+1418   	; 0x905e <fputc>
    8ad4:	fa 94       	dec	r15
    8ad6:	f1 10       	cpse	r15, r1
    8ad8:	f9 cf       	rjmp	.-14     	; 0x8acc <vfprintf+0x69e>
    8ada:	db cf       	rjmp	.-74     	; 0x8a92 <vfprintf+0x664>
    8adc:	f1 2c       	mov	r15, r1
    8ade:	b6 01       	movw	r22, r12
    8ae0:	82 2d       	mov	r24, r2
    8ae2:	90 e0       	ldi	r25, 0x00	; 0
    8ae4:	bc d2       	rcall	.+1400   	; 0x905e <fputc>
    8ae6:	d7 cf       	rjmp	.-82     	; 0x8a96 <vfprintf+0x668>
    8ae8:	00 eb       	ldi	r16, 0xB0	; 176
    8aea:	15 e0       	ldi	r17, 0x05	; 5
    8aec:	d8 cf       	rjmp	.-80     	; 0x8a9e <vfprintf+0x670>
    8aee:	31 10       	cpse	r3, r1
    8af0:	80 52       	subi	r24, 0x20	; 32
    8af2:	b6 01       	movw	r22, r12
    8af4:	90 e0       	ldi	r25, 0x00	; 0
    8af6:	b3 d2       	rcall	.+1382   	; 0x905e <fputc>
    8af8:	0f 5f       	subi	r16, 0xFF	; 255
    8afa:	1f 4f       	sbci	r17, 0xFF	; 255
    8afc:	d3 cf       	rjmp	.-90     	; 0x8aa4 <vfprintf+0x676>
    8afe:	23 e0       	ldi	r18, 0x03	; 3
    8b00:	2f 15       	cp	r18, r15
    8b02:	10 f4       	brcc	.+4      	; 0x8b08 <vfprintf+0x6da>
    8b04:	83 e0       	ldi	r24, 0x03	; 3
    8b06:	c2 cf       	rjmp	.-124    	; 0x8a8c <vfprintf+0x65e>
    8b08:	f1 2c       	mov	r15, r1
    8b0a:	c5 cf       	rjmp	.-118    	; 0x8a96 <vfprintf+0x668>
    8b0c:	63 96       	adiw	r28, 0x13	; 19
    8b0e:	0f b6       	in	r0, 0x3f	; 63
    8b10:	f8 94       	cli
    8b12:	de bf       	out	0x3e, r29	; 62
    8b14:	0f be       	out	0x3f, r0	; 63
    8b16:	cd bf       	out	0x3d, r28	; 61
    8b18:	df 91       	pop	r29
    8b1a:	cf 91       	pop	r28
    8b1c:	1f 91       	pop	r17
    8b1e:	0f 91       	pop	r16
    8b20:	ff 90       	pop	r15
    8b22:	ef 90       	pop	r14
    8b24:	df 90       	pop	r13
    8b26:	cf 90       	pop	r12
    8b28:	bf 90       	pop	r11
    8b2a:	af 90       	pop	r10
    8b2c:	9f 90       	pop	r9
    8b2e:	8f 90       	pop	r8
    8b30:	7f 90       	pop	r7
    8b32:	6f 90       	pop	r6
    8b34:	5f 90       	pop	r5
    8b36:	4f 90       	pop	r4
    8b38:	3f 90       	pop	r3
    8b3a:	2f 90       	pop	r2
    8b3c:	08 95       	ret

00008b3e <__mulsi3>:
    8b3e:	db 01       	movw	r26, r22
    8b40:	8f 93       	push	r24
    8b42:	9f 93       	push	r25
    8b44:	61 d0       	rcall	.+194    	; 0x8c08 <__muluhisi3>
    8b46:	bf 91       	pop	r27
    8b48:	af 91       	pop	r26
    8b4a:	a2 9f       	mul	r26, r18
    8b4c:	80 0d       	add	r24, r0
    8b4e:	91 1d       	adc	r25, r1
    8b50:	a3 9f       	mul	r26, r19
    8b52:	90 0d       	add	r25, r0
    8b54:	b2 9f       	mul	r27, r18
    8b56:	90 0d       	add	r25, r0
    8b58:	11 24       	eor	r1, r1
    8b5a:	08 95       	ret

00008b5c <__udivmodsi4>:
    8b5c:	a1 e2       	ldi	r26, 0x21	; 33
    8b5e:	1a 2e       	mov	r1, r26
    8b60:	aa 1b       	sub	r26, r26
    8b62:	bb 1b       	sub	r27, r27
    8b64:	fd 01       	movw	r30, r26
    8b66:	0d c0       	rjmp	.+26     	; 0x8b82 <__udivmodsi4_ep>

00008b68 <__udivmodsi4_loop>:
    8b68:	aa 1f       	adc	r26, r26
    8b6a:	bb 1f       	adc	r27, r27
    8b6c:	ee 1f       	adc	r30, r30
    8b6e:	ff 1f       	adc	r31, r31
    8b70:	a2 17       	cp	r26, r18
    8b72:	b3 07       	cpc	r27, r19
    8b74:	e4 07       	cpc	r30, r20
    8b76:	f5 07       	cpc	r31, r21
    8b78:	20 f0       	brcs	.+8      	; 0x8b82 <__udivmodsi4_ep>
    8b7a:	a2 1b       	sub	r26, r18
    8b7c:	b3 0b       	sbc	r27, r19
    8b7e:	e4 0b       	sbc	r30, r20
    8b80:	f5 0b       	sbc	r31, r21

00008b82 <__udivmodsi4_ep>:
    8b82:	66 1f       	adc	r22, r22
    8b84:	77 1f       	adc	r23, r23
    8b86:	88 1f       	adc	r24, r24
    8b88:	99 1f       	adc	r25, r25
    8b8a:	1a 94       	dec	r1
    8b8c:	69 f7       	brne	.-38     	; 0x8b68 <__udivmodsi4_loop>
    8b8e:	60 95       	com	r22
    8b90:	70 95       	com	r23
    8b92:	80 95       	com	r24
    8b94:	90 95       	com	r25
    8b96:	9b 01       	movw	r18, r22
    8b98:	ac 01       	movw	r20, r24
    8b9a:	bd 01       	movw	r22, r26
    8b9c:	cf 01       	movw	r24, r30
    8b9e:	08 95       	ret

00008ba0 <__divmodsi4>:
    8ba0:	05 2e       	mov	r0, r21
    8ba2:	97 fb       	bst	r25, 7
    8ba4:	16 f4       	brtc	.+4      	; 0x8baa <__divmodsi4+0xa>
    8ba6:	00 94       	com	r0
    8ba8:	0f d0       	rcall	.+30     	; 0x8bc8 <__negsi2>
    8baa:	57 fd       	sbrc	r21, 7
    8bac:	05 d0       	rcall	.+10     	; 0x8bb8 <__divmodsi4_neg2>
    8bae:	d6 df       	rcall	.-84     	; 0x8b5c <__udivmodsi4>
    8bb0:	07 fc       	sbrc	r0, 7
    8bb2:	02 d0       	rcall	.+4      	; 0x8bb8 <__divmodsi4_neg2>
    8bb4:	46 f4       	brtc	.+16     	; 0x8bc6 <__divmodsi4_exit>
    8bb6:	08 c0       	rjmp	.+16     	; 0x8bc8 <__negsi2>

00008bb8 <__divmodsi4_neg2>:
    8bb8:	50 95       	com	r21
    8bba:	40 95       	com	r20
    8bbc:	30 95       	com	r19
    8bbe:	21 95       	neg	r18
    8bc0:	3f 4f       	sbci	r19, 0xFF	; 255
    8bc2:	4f 4f       	sbci	r20, 0xFF	; 255
    8bc4:	5f 4f       	sbci	r21, 0xFF	; 255

00008bc6 <__divmodsi4_exit>:
    8bc6:	08 95       	ret

00008bc8 <__negsi2>:
    8bc8:	90 95       	com	r25
    8bca:	80 95       	com	r24
    8bcc:	70 95       	com	r23
    8bce:	61 95       	neg	r22
    8bd0:	7f 4f       	sbci	r23, 0xFF	; 255
    8bd2:	8f 4f       	sbci	r24, 0xFF	; 255
    8bd4:	9f 4f       	sbci	r25, 0xFF	; 255
    8bd6:	08 95       	ret

00008bd8 <__tablejump2__>:
    8bd8:	ee 0f       	add	r30, r30
    8bda:	ff 1f       	adc	r31, r31
    8bdc:	00 24       	eor	r0, r0
    8bde:	00 1c       	adc	r0, r0
    8be0:	0b be       	out	0x3b, r0	; 59
    8be2:	07 90       	elpm	r0, Z+
    8be4:	f6 91       	elpm	r31, Z
    8be6:	e0 2d       	mov	r30, r0
    8be8:	09 94       	ijmp

00008bea <__umulhisi3>:
    8bea:	a2 9f       	mul	r26, r18
    8bec:	b0 01       	movw	r22, r0
    8bee:	b3 9f       	mul	r27, r19
    8bf0:	c0 01       	movw	r24, r0
    8bf2:	a3 9f       	mul	r26, r19
    8bf4:	70 0d       	add	r23, r0
    8bf6:	81 1d       	adc	r24, r1
    8bf8:	11 24       	eor	r1, r1
    8bfa:	91 1d       	adc	r25, r1
    8bfc:	b2 9f       	mul	r27, r18
    8bfe:	70 0d       	add	r23, r0
    8c00:	81 1d       	adc	r24, r1
    8c02:	11 24       	eor	r1, r1
    8c04:	91 1d       	adc	r25, r1
    8c06:	08 95       	ret

00008c08 <__muluhisi3>:
    8c08:	f0 df       	rcall	.-32     	; 0x8bea <__umulhisi3>
    8c0a:	a5 9f       	mul	r26, r21
    8c0c:	90 0d       	add	r25, r0
    8c0e:	b4 9f       	mul	r27, r20
    8c10:	90 0d       	add	r25, r0
    8c12:	a4 9f       	mul	r26, r20
    8c14:	80 0d       	add	r24, r0
    8c16:	91 1d       	adc	r25, r1
    8c18:	11 24       	eor	r1, r1
    8c1a:	08 95       	ret

00008c1c <__mulshisi3>:
    8c1c:	b7 ff       	sbrs	r27, 7
    8c1e:	f4 cf       	rjmp	.-24     	; 0x8c08 <__muluhisi3>

00008c20 <__mulohisi3>:
    8c20:	f3 df       	rcall	.-26     	; 0x8c08 <__muluhisi3>
    8c22:	82 1b       	sub	r24, r18
    8c24:	93 0b       	sbc	r25, r19
    8c26:	08 95       	ret

00008c28 <malloc>:
    8c28:	cf 93       	push	r28
    8c2a:	df 93       	push	r29
    8c2c:	82 30       	cpi	r24, 0x02	; 2
    8c2e:	91 05       	cpc	r25, r1
    8c30:	10 f4       	brcc	.+4      	; 0x8c36 <malloc+0xe>
    8c32:	82 e0       	ldi	r24, 0x02	; 2
    8c34:	90 e0       	ldi	r25, 0x00	; 0
    8c36:	e0 91 33 0e 	lds	r30, 0x0E33
    8c3a:	f0 91 34 0e 	lds	r31, 0x0E34
    8c3e:	20 e0       	ldi	r18, 0x00	; 0
    8c40:	30 e0       	ldi	r19, 0x00	; 0
    8c42:	c0 e0       	ldi	r28, 0x00	; 0
    8c44:	d0 e0       	ldi	r29, 0x00	; 0
    8c46:	30 97       	sbiw	r30, 0x00	; 0
    8c48:	11 f1       	breq	.+68     	; 0x8c8e <malloc+0x66>
    8c4a:	40 81       	ld	r20, Z
    8c4c:	51 81       	ldd	r21, Z+1	; 0x01
    8c4e:	48 17       	cp	r20, r24
    8c50:	59 07       	cpc	r21, r25
    8c52:	c0 f0       	brcs	.+48     	; 0x8c84 <malloc+0x5c>
    8c54:	48 17       	cp	r20, r24
    8c56:	59 07       	cpc	r21, r25
    8c58:	61 f4       	brne	.+24     	; 0x8c72 <malloc+0x4a>
    8c5a:	82 81       	ldd	r24, Z+2	; 0x02
    8c5c:	93 81       	ldd	r25, Z+3	; 0x03
    8c5e:	20 97       	sbiw	r28, 0x00	; 0
    8c60:	19 f0       	breq	.+6      	; 0x8c68 <malloc+0x40>
    8c62:	9b 83       	std	Y+3, r25	; 0x03
    8c64:	8a 83       	std	Y+2, r24	; 0x02
    8c66:	2b c0       	rjmp	.+86     	; 0x8cbe <malloc+0x96>
    8c68:	90 93 34 0e 	sts	0x0E34, r25
    8c6c:	80 93 33 0e 	sts	0x0E33, r24
    8c70:	26 c0       	rjmp	.+76     	; 0x8cbe <malloc+0x96>
    8c72:	21 15       	cp	r18, r1
    8c74:	31 05       	cpc	r19, r1
    8c76:	19 f0       	breq	.+6      	; 0x8c7e <malloc+0x56>
    8c78:	42 17       	cp	r20, r18
    8c7a:	53 07       	cpc	r21, r19
    8c7c:	18 f4       	brcc	.+6      	; 0x8c84 <malloc+0x5c>
    8c7e:	9a 01       	movw	r18, r20
    8c80:	be 01       	movw	r22, r28
    8c82:	df 01       	movw	r26, r30
    8c84:	ef 01       	movw	r28, r30
    8c86:	02 80       	ldd	r0, Z+2	; 0x02
    8c88:	f3 81       	ldd	r31, Z+3	; 0x03
    8c8a:	e0 2d       	mov	r30, r0
    8c8c:	dc cf       	rjmp	.-72     	; 0x8c46 <malloc+0x1e>
    8c8e:	21 15       	cp	r18, r1
    8c90:	31 05       	cpc	r19, r1
    8c92:	09 f1       	breq	.+66     	; 0x8cd6 <malloc+0xae>
    8c94:	28 1b       	sub	r18, r24
    8c96:	39 0b       	sbc	r19, r25
    8c98:	24 30       	cpi	r18, 0x04	; 4
    8c9a:	31 05       	cpc	r19, r1
    8c9c:	90 f4       	brcc	.+36     	; 0x8cc2 <malloc+0x9a>
    8c9e:	12 96       	adiw	r26, 0x02	; 2
    8ca0:	8d 91       	ld	r24, X+
    8ca2:	9c 91       	ld	r25, X
    8ca4:	13 97       	sbiw	r26, 0x03	; 3
    8ca6:	61 15       	cp	r22, r1
    8ca8:	71 05       	cpc	r23, r1
    8caa:	21 f0       	breq	.+8      	; 0x8cb4 <malloc+0x8c>
    8cac:	fb 01       	movw	r30, r22
    8cae:	93 83       	std	Z+3, r25	; 0x03
    8cb0:	82 83       	std	Z+2, r24	; 0x02
    8cb2:	04 c0       	rjmp	.+8      	; 0x8cbc <malloc+0x94>
    8cb4:	90 93 34 0e 	sts	0x0E34, r25
    8cb8:	80 93 33 0e 	sts	0x0E33, r24
    8cbc:	fd 01       	movw	r30, r26
    8cbe:	32 96       	adiw	r30, 0x02	; 2
    8cc0:	44 c0       	rjmp	.+136    	; 0x8d4a <malloc+0x122>
    8cc2:	fd 01       	movw	r30, r26
    8cc4:	e2 0f       	add	r30, r18
    8cc6:	f3 1f       	adc	r31, r19
    8cc8:	81 93       	st	Z+, r24
    8cca:	91 93       	st	Z+, r25
    8ccc:	22 50       	subi	r18, 0x02	; 2
    8cce:	31 09       	sbc	r19, r1
    8cd0:	2d 93       	st	X+, r18
    8cd2:	3c 93       	st	X, r19
    8cd4:	3a c0       	rjmp	.+116    	; 0x8d4a <malloc+0x122>
    8cd6:	20 91 31 0e 	lds	r18, 0x0E31
    8cda:	30 91 32 0e 	lds	r19, 0x0E32
    8cde:	23 2b       	or	r18, r19
    8ce0:	41 f4       	brne	.+16     	; 0x8cf2 <malloc+0xca>
    8ce2:	20 91 02 01 	lds	r18, 0x0102
    8ce6:	30 91 03 01 	lds	r19, 0x0103
    8cea:	30 93 32 0e 	sts	0x0E32, r19
    8cee:	20 93 31 0e 	sts	0x0E31, r18
    8cf2:	20 91 00 01 	lds	r18, 0x0100
    8cf6:	30 91 01 01 	lds	r19, 0x0101
    8cfa:	21 15       	cp	r18, r1
    8cfc:	31 05       	cpc	r19, r1
    8cfe:	41 f4       	brne	.+16     	; 0x8d10 <malloc+0xe8>
    8d00:	2d b7       	in	r18, 0x3d	; 61
    8d02:	3e b7       	in	r19, 0x3e	; 62
    8d04:	40 91 04 01 	lds	r20, 0x0104
    8d08:	50 91 05 01 	lds	r21, 0x0105
    8d0c:	24 1b       	sub	r18, r20
    8d0e:	35 0b       	sbc	r19, r21
    8d10:	e0 91 31 0e 	lds	r30, 0x0E31
    8d14:	f0 91 32 0e 	lds	r31, 0x0E32
    8d18:	e2 17       	cp	r30, r18
    8d1a:	f3 07       	cpc	r31, r19
    8d1c:	a0 f4       	brcc	.+40     	; 0x8d46 <malloc+0x11e>
    8d1e:	2e 1b       	sub	r18, r30
    8d20:	3f 0b       	sbc	r19, r31
    8d22:	28 17       	cp	r18, r24
    8d24:	39 07       	cpc	r19, r25
    8d26:	78 f0       	brcs	.+30     	; 0x8d46 <malloc+0x11e>
    8d28:	ac 01       	movw	r20, r24
    8d2a:	4e 5f       	subi	r20, 0xFE	; 254
    8d2c:	5f 4f       	sbci	r21, 0xFF	; 255
    8d2e:	24 17       	cp	r18, r20
    8d30:	35 07       	cpc	r19, r21
    8d32:	48 f0       	brcs	.+18     	; 0x8d46 <malloc+0x11e>
    8d34:	4e 0f       	add	r20, r30
    8d36:	5f 1f       	adc	r21, r31
    8d38:	50 93 32 0e 	sts	0x0E32, r21
    8d3c:	40 93 31 0e 	sts	0x0E31, r20
    8d40:	81 93       	st	Z+, r24
    8d42:	91 93       	st	Z+, r25
    8d44:	02 c0       	rjmp	.+4      	; 0x8d4a <malloc+0x122>
    8d46:	e0 e0       	ldi	r30, 0x00	; 0
    8d48:	f0 e0       	ldi	r31, 0x00	; 0
    8d4a:	cf 01       	movw	r24, r30
    8d4c:	df 91       	pop	r29
    8d4e:	cf 91       	pop	r28
    8d50:	08 95       	ret

00008d52 <free>:
    8d52:	0f 93       	push	r16
    8d54:	1f 93       	push	r17
    8d56:	cf 93       	push	r28
    8d58:	df 93       	push	r29
    8d5a:	00 97       	sbiw	r24, 0x00	; 0
    8d5c:	09 f4       	brne	.+2      	; 0x8d60 <free+0xe>
    8d5e:	8c c0       	rjmp	.+280    	; 0x8e78 <free+0x126>
    8d60:	fc 01       	movw	r30, r24
    8d62:	32 97       	sbiw	r30, 0x02	; 2
    8d64:	13 82       	std	Z+3, r1	; 0x03
    8d66:	12 82       	std	Z+2, r1	; 0x02
    8d68:	00 91 33 0e 	lds	r16, 0x0E33
    8d6c:	10 91 34 0e 	lds	r17, 0x0E34
    8d70:	01 15       	cp	r16, r1
    8d72:	11 05       	cpc	r17, r1
    8d74:	81 f4       	brne	.+32     	; 0x8d96 <free+0x44>
    8d76:	20 81       	ld	r18, Z
    8d78:	31 81       	ldd	r19, Z+1	; 0x01
    8d7a:	82 0f       	add	r24, r18
    8d7c:	93 1f       	adc	r25, r19
    8d7e:	20 91 31 0e 	lds	r18, 0x0E31
    8d82:	30 91 32 0e 	lds	r19, 0x0E32
    8d86:	28 17       	cp	r18, r24
    8d88:	39 07       	cpc	r19, r25
    8d8a:	79 f5       	brne	.+94     	; 0x8dea <free+0x98>
    8d8c:	f0 93 32 0e 	sts	0x0E32, r31
    8d90:	e0 93 31 0e 	sts	0x0E31, r30
    8d94:	71 c0       	rjmp	.+226    	; 0x8e78 <free+0x126>
    8d96:	d8 01       	movw	r26, r16
    8d98:	40 e0       	ldi	r20, 0x00	; 0
    8d9a:	50 e0       	ldi	r21, 0x00	; 0
    8d9c:	ae 17       	cp	r26, r30
    8d9e:	bf 07       	cpc	r27, r31
    8da0:	50 f4       	brcc	.+20     	; 0x8db6 <free+0x64>
    8da2:	12 96       	adiw	r26, 0x02	; 2
    8da4:	2d 91       	ld	r18, X+
    8da6:	3c 91       	ld	r19, X
    8da8:	13 97       	sbiw	r26, 0x03	; 3
    8daa:	ad 01       	movw	r20, r26
    8dac:	21 15       	cp	r18, r1
    8dae:	31 05       	cpc	r19, r1
    8db0:	09 f1       	breq	.+66     	; 0x8df4 <free+0xa2>
    8db2:	d9 01       	movw	r26, r18
    8db4:	f3 cf       	rjmp	.-26     	; 0x8d9c <free+0x4a>
    8db6:	9d 01       	movw	r18, r26
    8db8:	da 01       	movw	r26, r20
    8dba:	33 83       	std	Z+3, r19	; 0x03
    8dbc:	22 83       	std	Z+2, r18	; 0x02
    8dbe:	60 81       	ld	r22, Z
    8dc0:	71 81       	ldd	r23, Z+1	; 0x01
    8dc2:	86 0f       	add	r24, r22
    8dc4:	97 1f       	adc	r25, r23
    8dc6:	82 17       	cp	r24, r18
    8dc8:	93 07       	cpc	r25, r19
    8dca:	69 f4       	brne	.+26     	; 0x8de6 <free+0x94>
    8dcc:	ec 01       	movw	r28, r24
    8dce:	28 81       	ld	r18, Y
    8dd0:	39 81       	ldd	r19, Y+1	; 0x01
    8dd2:	26 0f       	add	r18, r22
    8dd4:	37 1f       	adc	r19, r23
    8dd6:	2e 5f       	subi	r18, 0xFE	; 254
    8dd8:	3f 4f       	sbci	r19, 0xFF	; 255
    8dda:	31 83       	std	Z+1, r19	; 0x01
    8ddc:	20 83       	st	Z, r18
    8dde:	8a 81       	ldd	r24, Y+2	; 0x02
    8de0:	9b 81       	ldd	r25, Y+3	; 0x03
    8de2:	93 83       	std	Z+3, r25	; 0x03
    8de4:	82 83       	std	Z+2, r24	; 0x02
    8de6:	45 2b       	or	r20, r21
    8de8:	29 f4       	brne	.+10     	; 0x8df4 <free+0xa2>
    8dea:	f0 93 34 0e 	sts	0x0E34, r31
    8dee:	e0 93 33 0e 	sts	0x0E33, r30
    8df2:	42 c0       	rjmp	.+132    	; 0x8e78 <free+0x126>
    8df4:	13 96       	adiw	r26, 0x03	; 3
    8df6:	fc 93       	st	X, r31
    8df8:	ee 93       	st	-X, r30
    8dfa:	12 97       	sbiw	r26, 0x02	; 2
    8dfc:	ed 01       	movw	r28, r26
    8dfe:	49 91       	ld	r20, Y+
    8e00:	59 91       	ld	r21, Y+
    8e02:	9e 01       	movw	r18, r28
    8e04:	24 0f       	add	r18, r20
    8e06:	35 1f       	adc	r19, r21
    8e08:	e2 17       	cp	r30, r18
    8e0a:	f3 07       	cpc	r31, r19
    8e0c:	71 f4       	brne	.+28     	; 0x8e2a <free+0xd8>
    8e0e:	80 81       	ld	r24, Z
    8e10:	91 81       	ldd	r25, Z+1	; 0x01
    8e12:	84 0f       	add	r24, r20
    8e14:	95 1f       	adc	r25, r21
    8e16:	02 96       	adiw	r24, 0x02	; 2
    8e18:	11 96       	adiw	r26, 0x01	; 1
    8e1a:	9c 93       	st	X, r25
    8e1c:	8e 93       	st	-X, r24
    8e1e:	82 81       	ldd	r24, Z+2	; 0x02
    8e20:	93 81       	ldd	r25, Z+3	; 0x03
    8e22:	13 96       	adiw	r26, 0x03	; 3
    8e24:	9c 93       	st	X, r25
    8e26:	8e 93       	st	-X, r24
    8e28:	12 97       	sbiw	r26, 0x02	; 2
    8e2a:	e0 e0       	ldi	r30, 0x00	; 0
    8e2c:	f0 e0       	ldi	r31, 0x00	; 0
    8e2e:	d8 01       	movw	r26, r16
    8e30:	12 96       	adiw	r26, 0x02	; 2
    8e32:	8d 91       	ld	r24, X+
    8e34:	9c 91       	ld	r25, X
    8e36:	13 97       	sbiw	r26, 0x03	; 3
    8e38:	00 97       	sbiw	r24, 0x00	; 0
    8e3a:	19 f0       	breq	.+6      	; 0x8e42 <free+0xf0>
    8e3c:	f8 01       	movw	r30, r16
    8e3e:	8c 01       	movw	r16, r24
    8e40:	f6 cf       	rjmp	.-20     	; 0x8e2e <free+0xdc>
    8e42:	8d 91       	ld	r24, X+
    8e44:	9c 91       	ld	r25, X
    8e46:	98 01       	movw	r18, r16
    8e48:	2e 5f       	subi	r18, 0xFE	; 254
    8e4a:	3f 4f       	sbci	r19, 0xFF	; 255
    8e4c:	82 0f       	add	r24, r18
    8e4e:	93 1f       	adc	r25, r19
    8e50:	20 91 31 0e 	lds	r18, 0x0E31
    8e54:	30 91 32 0e 	lds	r19, 0x0E32
    8e58:	28 17       	cp	r18, r24
    8e5a:	39 07       	cpc	r19, r25
    8e5c:	69 f4       	brne	.+26     	; 0x8e78 <free+0x126>
    8e5e:	30 97       	sbiw	r30, 0x00	; 0
    8e60:	29 f4       	brne	.+10     	; 0x8e6c <free+0x11a>
    8e62:	10 92 34 0e 	sts	0x0E34, r1
    8e66:	10 92 33 0e 	sts	0x0E33, r1
    8e6a:	02 c0       	rjmp	.+4      	; 0x8e70 <free+0x11e>
    8e6c:	13 82       	std	Z+3, r1	; 0x03
    8e6e:	12 82       	std	Z+2, r1	; 0x02
    8e70:	10 93 32 0e 	sts	0x0E32, r17
    8e74:	00 93 31 0e 	sts	0x0E31, r16
    8e78:	df 91       	pop	r29
    8e7a:	cf 91       	pop	r28
    8e7c:	1f 91       	pop	r17
    8e7e:	0f 91       	pop	r16
    8e80:	08 95       	ret

00008e82 <__ftoa_engine>:
    8e82:	28 30       	cpi	r18, 0x08	; 8
    8e84:	08 f0       	brcs	.+2      	; 0x8e88 <__ftoa_engine+0x6>
    8e86:	27 e0       	ldi	r18, 0x07	; 7
    8e88:	33 27       	eor	r19, r19
    8e8a:	da 01       	movw	r26, r20
    8e8c:	99 0f       	add	r25, r25
    8e8e:	31 1d       	adc	r19, r1
    8e90:	87 fd       	sbrc	r24, 7
    8e92:	91 60       	ori	r25, 0x01	; 1
    8e94:	00 96       	adiw	r24, 0x00	; 0
    8e96:	61 05       	cpc	r22, r1
    8e98:	71 05       	cpc	r23, r1
    8e9a:	39 f4       	brne	.+14     	; 0x8eaa <__ftoa_engine+0x28>
    8e9c:	32 60       	ori	r19, 0x02	; 2
    8e9e:	2e 5f       	subi	r18, 0xFE	; 254
    8ea0:	3d 93       	st	X+, r19
    8ea2:	30 e3       	ldi	r19, 0x30	; 48
    8ea4:	2a 95       	dec	r18
    8ea6:	e1 f7       	brne	.-8      	; 0x8ea0 <__ftoa_engine+0x1e>
    8ea8:	08 95       	ret
    8eaa:	9f 3f       	cpi	r25, 0xFF	; 255
    8eac:	30 f0       	brcs	.+12     	; 0x8eba <__ftoa_engine+0x38>
    8eae:	80 38       	cpi	r24, 0x80	; 128
    8eb0:	71 05       	cpc	r23, r1
    8eb2:	61 05       	cpc	r22, r1
    8eb4:	09 f0       	breq	.+2      	; 0x8eb8 <__ftoa_engine+0x36>
    8eb6:	3c 5f       	subi	r19, 0xFC	; 252
    8eb8:	3c 5f       	subi	r19, 0xFC	; 252
    8eba:	3d 93       	st	X+, r19
    8ebc:	91 30       	cpi	r25, 0x01	; 1
    8ebe:	08 f0       	brcs	.+2      	; 0x8ec2 <__ftoa_engine+0x40>
    8ec0:	80 68       	ori	r24, 0x80	; 128
    8ec2:	91 1d       	adc	r25, r1
    8ec4:	df 93       	push	r29
    8ec6:	cf 93       	push	r28
    8ec8:	1f 93       	push	r17
    8eca:	0f 93       	push	r16
    8ecc:	ff 92       	push	r15
    8ece:	ef 92       	push	r14
    8ed0:	19 2f       	mov	r17, r25
    8ed2:	98 7f       	andi	r25, 0xF8	; 248
    8ed4:	96 95       	lsr	r25
    8ed6:	e9 2f       	mov	r30, r25
    8ed8:	96 95       	lsr	r25
    8eda:	96 95       	lsr	r25
    8edc:	e9 0f       	add	r30, r25
    8ede:	ff 27       	eor	r31, r31
    8ee0:	e2 5f       	subi	r30, 0xF2	; 242
    8ee2:	f9 4f       	sbci	r31, 0xF9	; 249
    8ee4:	99 27       	eor	r25, r25
    8ee6:	33 27       	eor	r19, r19
    8ee8:	ee 24       	eor	r14, r14
    8eea:	ff 24       	eor	r15, r15
    8eec:	a7 01       	movw	r20, r14
    8eee:	e7 01       	movw	r28, r14
    8ef0:	05 90       	lpm	r0, Z+
    8ef2:	08 94       	sec
    8ef4:	07 94       	ror	r0
    8ef6:	28 f4       	brcc	.+10     	; 0x8f02 <__ftoa_engine+0x80>
    8ef8:	36 0f       	add	r19, r22
    8efa:	e7 1e       	adc	r14, r23
    8efc:	f8 1e       	adc	r15, r24
    8efe:	49 1f       	adc	r20, r25
    8f00:	51 1d       	adc	r21, r1
    8f02:	66 0f       	add	r22, r22
    8f04:	77 1f       	adc	r23, r23
    8f06:	88 1f       	adc	r24, r24
    8f08:	99 1f       	adc	r25, r25
    8f0a:	06 94       	lsr	r0
    8f0c:	a1 f7       	brne	.-24     	; 0x8ef6 <__ftoa_engine+0x74>
    8f0e:	05 90       	lpm	r0, Z+
    8f10:	07 94       	ror	r0
    8f12:	28 f4       	brcc	.+10     	; 0x8f1e <__ftoa_engine+0x9c>
    8f14:	e7 0e       	add	r14, r23
    8f16:	f8 1e       	adc	r15, r24
    8f18:	49 1f       	adc	r20, r25
    8f1a:	56 1f       	adc	r21, r22
    8f1c:	c1 1d       	adc	r28, r1
    8f1e:	77 0f       	add	r23, r23
    8f20:	88 1f       	adc	r24, r24
    8f22:	99 1f       	adc	r25, r25
    8f24:	66 1f       	adc	r22, r22
    8f26:	06 94       	lsr	r0
    8f28:	a1 f7       	brne	.-24     	; 0x8f12 <__ftoa_engine+0x90>
    8f2a:	05 90       	lpm	r0, Z+
    8f2c:	07 94       	ror	r0
    8f2e:	28 f4       	brcc	.+10     	; 0x8f3a <__ftoa_engine+0xb8>
    8f30:	f8 0e       	add	r15, r24
    8f32:	49 1f       	adc	r20, r25
    8f34:	56 1f       	adc	r21, r22
    8f36:	c7 1f       	adc	r28, r23
    8f38:	d1 1d       	adc	r29, r1
    8f3a:	88 0f       	add	r24, r24
    8f3c:	99 1f       	adc	r25, r25
    8f3e:	66 1f       	adc	r22, r22
    8f40:	77 1f       	adc	r23, r23
    8f42:	06 94       	lsr	r0
    8f44:	a1 f7       	brne	.-24     	; 0x8f2e <__ftoa_engine+0xac>
    8f46:	05 90       	lpm	r0, Z+
    8f48:	07 94       	ror	r0
    8f4a:	20 f4       	brcc	.+8      	; 0x8f54 <__ftoa_engine+0xd2>
    8f4c:	49 0f       	add	r20, r25
    8f4e:	56 1f       	adc	r21, r22
    8f50:	c7 1f       	adc	r28, r23
    8f52:	d8 1f       	adc	r29, r24
    8f54:	99 0f       	add	r25, r25
    8f56:	66 1f       	adc	r22, r22
    8f58:	77 1f       	adc	r23, r23
    8f5a:	88 1f       	adc	r24, r24
    8f5c:	06 94       	lsr	r0
    8f5e:	a9 f7       	brne	.-22     	; 0x8f4a <__ftoa_engine+0xc8>
    8f60:	84 91       	lpm	r24, Z
    8f62:	10 95       	com	r17
    8f64:	17 70       	andi	r17, 0x07	; 7
    8f66:	41 f0       	breq	.+16     	; 0x8f78 <__ftoa_engine+0xf6>
    8f68:	d6 95       	lsr	r29
    8f6a:	c7 95       	ror	r28
    8f6c:	57 95       	ror	r21
    8f6e:	47 95       	ror	r20
    8f70:	f7 94       	ror	r15
    8f72:	e7 94       	ror	r14
    8f74:	1a 95       	dec	r17
    8f76:	c1 f7       	brne	.-16     	; 0x8f68 <__ftoa_engine+0xe6>
    8f78:	e4 eb       	ldi	r30, 0xB4	; 180
    8f7a:	f5 e0       	ldi	r31, 0x05	; 5
    8f7c:	68 94       	set
    8f7e:	15 90       	lpm	r1, Z+
    8f80:	15 91       	lpm	r17, Z+
    8f82:	35 91       	lpm	r19, Z+
    8f84:	65 91       	lpm	r22, Z+
    8f86:	95 91       	lpm	r25, Z+
    8f88:	05 90       	lpm	r0, Z+
    8f8a:	7f e2       	ldi	r23, 0x2F	; 47
    8f8c:	73 95       	inc	r23
    8f8e:	e1 18       	sub	r14, r1
    8f90:	f1 0a       	sbc	r15, r17
    8f92:	43 0b       	sbc	r20, r19
    8f94:	56 0b       	sbc	r21, r22
    8f96:	c9 0b       	sbc	r28, r25
    8f98:	d0 09       	sbc	r29, r0
    8f9a:	c0 f7       	brcc	.-16     	; 0x8f8c <__ftoa_engine+0x10a>
    8f9c:	e1 0c       	add	r14, r1
    8f9e:	f1 1e       	adc	r15, r17
    8fa0:	43 1f       	adc	r20, r19
    8fa2:	56 1f       	adc	r21, r22
    8fa4:	c9 1f       	adc	r28, r25
    8fa6:	d0 1d       	adc	r29, r0
    8fa8:	7e f4       	brtc	.+30     	; 0x8fc8 <__ftoa_engine+0x146>
    8faa:	70 33       	cpi	r23, 0x30	; 48
    8fac:	11 f4       	brne	.+4      	; 0x8fb2 <__ftoa_engine+0x130>
    8fae:	8a 95       	dec	r24
    8fb0:	e6 cf       	rjmp	.-52     	; 0x8f7e <__ftoa_engine+0xfc>
    8fb2:	e8 94       	clt
    8fb4:	01 50       	subi	r16, 0x01	; 1
    8fb6:	30 f0       	brcs	.+12     	; 0x8fc4 <__ftoa_engine+0x142>
    8fb8:	08 0f       	add	r16, r24
    8fba:	0a f4       	brpl	.+2      	; 0x8fbe <__ftoa_engine+0x13c>
    8fbc:	00 27       	eor	r16, r16
    8fbe:	02 17       	cp	r16, r18
    8fc0:	08 f4       	brcc	.+2      	; 0x8fc4 <__ftoa_engine+0x142>
    8fc2:	20 2f       	mov	r18, r16
    8fc4:	23 95       	inc	r18
    8fc6:	02 2f       	mov	r16, r18
    8fc8:	7a 33       	cpi	r23, 0x3A	; 58
    8fca:	28 f0       	brcs	.+10     	; 0x8fd6 <__ftoa_engine+0x154>
    8fcc:	79 e3       	ldi	r23, 0x39	; 57
    8fce:	7d 93       	st	X+, r23
    8fd0:	2a 95       	dec	r18
    8fd2:	e9 f7       	brne	.-6      	; 0x8fce <__ftoa_engine+0x14c>
    8fd4:	10 c0       	rjmp	.+32     	; 0x8ff6 <__ftoa_engine+0x174>
    8fd6:	7d 93       	st	X+, r23
    8fd8:	2a 95       	dec	r18
    8fda:	89 f6       	brne	.-94     	; 0x8f7e <__ftoa_engine+0xfc>
    8fdc:	06 94       	lsr	r0
    8fde:	97 95       	ror	r25
    8fe0:	67 95       	ror	r22
    8fe2:	37 95       	ror	r19
    8fe4:	17 95       	ror	r17
    8fe6:	17 94       	ror	r1
    8fe8:	e1 18       	sub	r14, r1
    8fea:	f1 0a       	sbc	r15, r17
    8fec:	43 0b       	sbc	r20, r19
    8fee:	56 0b       	sbc	r21, r22
    8ff0:	c9 0b       	sbc	r28, r25
    8ff2:	d0 09       	sbc	r29, r0
    8ff4:	98 f0       	brcs	.+38     	; 0x901c <__ftoa_engine+0x19a>
    8ff6:	23 95       	inc	r18
    8ff8:	7e 91       	ld	r23, -X
    8ffa:	73 95       	inc	r23
    8ffc:	7a 33       	cpi	r23, 0x3A	; 58
    8ffe:	08 f0       	brcs	.+2      	; 0x9002 <__ftoa_engine+0x180>
    9000:	70 e3       	ldi	r23, 0x30	; 48
    9002:	7c 93       	st	X, r23
    9004:	20 13       	cpse	r18, r16
    9006:	b8 f7       	brcc	.-18     	; 0x8ff6 <__ftoa_engine+0x174>
    9008:	7e 91       	ld	r23, -X
    900a:	70 61       	ori	r23, 0x10	; 16
    900c:	7d 93       	st	X+, r23
    900e:	30 f0       	brcs	.+12     	; 0x901c <__ftoa_engine+0x19a>
    9010:	83 95       	inc	r24
    9012:	71 e3       	ldi	r23, 0x31	; 49
    9014:	7d 93       	st	X+, r23
    9016:	70 e3       	ldi	r23, 0x30	; 48
    9018:	2a 95       	dec	r18
    901a:	e1 f7       	brne	.-8      	; 0x9014 <__ftoa_engine+0x192>
    901c:	11 24       	eor	r1, r1
    901e:	ef 90       	pop	r14
    9020:	ff 90       	pop	r15
    9022:	0f 91       	pop	r16
    9024:	1f 91       	pop	r17
    9026:	cf 91       	pop	r28
    9028:	df 91       	pop	r29
    902a:	99 27       	eor	r25, r25
    902c:	87 fd       	sbrc	r24, 7
    902e:	90 95       	com	r25
    9030:	08 95       	ret

00009032 <strnlen_P>:
    9032:	fc 01       	movw	r30, r24
    9034:	05 90       	lpm	r0, Z+
    9036:	61 50       	subi	r22, 0x01	; 1
    9038:	70 40       	sbci	r23, 0x00	; 0
    903a:	01 10       	cpse	r0, r1
    903c:	d8 f7       	brcc	.-10     	; 0x9034 <strnlen_P+0x2>
    903e:	80 95       	com	r24
    9040:	90 95       	com	r25
    9042:	8e 0f       	add	r24, r30
    9044:	9f 1f       	adc	r25, r31
    9046:	08 95       	ret

00009048 <strnlen>:
    9048:	fc 01       	movw	r30, r24
    904a:	61 50       	subi	r22, 0x01	; 1
    904c:	70 40       	sbci	r23, 0x00	; 0
    904e:	01 90       	ld	r0, Z+
    9050:	01 10       	cpse	r0, r1
    9052:	d8 f7       	brcc	.-10     	; 0x904a <strnlen+0x2>
    9054:	80 95       	com	r24
    9056:	90 95       	com	r25
    9058:	8e 0f       	add	r24, r30
    905a:	9f 1f       	adc	r25, r31
    905c:	08 95       	ret

0000905e <fputc>:
    905e:	0f 93       	push	r16
    9060:	1f 93       	push	r17
    9062:	cf 93       	push	r28
    9064:	df 93       	push	r29
    9066:	fb 01       	movw	r30, r22
    9068:	23 81       	ldd	r18, Z+3	; 0x03
    906a:	21 fd       	sbrc	r18, 1
    906c:	03 c0       	rjmp	.+6      	; 0x9074 <fputc+0x16>
    906e:	8f ef       	ldi	r24, 0xFF	; 255
    9070:	9f ef       	ldi	r25, 0xFF	; 255
    9072:	28 c0       	rjmp	.+80     	; 0x90c4 <fputc+0x66>
    9074:	22 ff       	sbrs	r18, 2
    9076:	16 c0       	rjmp	.+44     	; 0x90a4 <fputc+0x46>
    9078:	46 81       	ldd	r20, Z+6	; 0x06
    907a:	57 81       	ldd	r21, Z+7	; 0x07
    907c:	24 81       	ldd	r18, Z+4	; 0x04
    907e:	35 81       	ldd	r19, Z+5	; 0x05
    9080:	42 17       	cp	r20, r18
    9082:	53 07       	cpc	r21, r19
    9084:	44 f4       	brge	.+16     	; 0x9096 <fputc+0x38>
    9086:	a0 81       	ld	r26, Z
    9088:	b1 81       	ldd	r27, Z+1	; 0x01
    908a:	9d 01       	movw	r18, r26
    908c:	2f 5f       	subi	r18, 0xFF	; 255
    908e:	3f 4f       	sbci	r19, 0xFF	; 255
    9090:	31 83       	std	Z+1, r19	; 0x01
    9092:	20 83       	st	Z, r18
    9094:	8c 93       	st	X, r24
    9096:	26 81       	ldd	r18, Z+6	; 0x06
    9098:	37 81       	ldd	r19, Z+7	; 0x07
    909a:	2f 5f       	subi	r18, 0xFF	; 255
    909c:	3f 4f       	sbci	r19, 0xFF	; 255
    909e:	37 83       	std	Z+7, r19	; 0x07
    90a0:	26 83       	std	Z+6, r18	; 0x06
    90a2:	10 c0       	rjmp	.+32     	; 0x90c4 <fputc+0x66>
    90a4:	eb 01       	movw	r28, r22
    90a6:	09 2f       	mov	r16, r25
    90a8:	18 2f       	mov	r17, r24
    90aa:	00 84       	ldd	r0, Z+8	; 0x08
    90ac:	f1 85       	ldd	r31, Z+9	; 0x09
    90ae:	e0 2d       	mov	r30, r0
    90b0:	09 95       	icall
    90b2:	89 2b       	or	r24, r25
    90b4:	e1 f6       	brne	.-72     	; 0x906e <fputc+0x10>
    90b6:	8e 81       	ldd	r24, Y+6	; 0x06
    90b8:	9f 81       	ldd	r25, Y+7	; 0x07
    90ba:	01 96       	adiw	r24, 0x01	; 1
    90bc:	9f 83       	std	Y+7, r25	; 0x07
    90be:	8e 83       	std	Y+6, r24	; 0x06
    90c0:	81 2f       	mov	r24, r17
    90c2:	90 2f       	mov	r25, r16
    90c4:	df 91       	pop	r29
    90c6:	cf 91       	pop	r28
    90c8:	1f 91       	pop	r17
    90ca:	0f 91       	pop	r16
    90cc:	08 95       	ret

000090ce <sprintf>:
    90ce:	0f 93       	push	r16
    90d0:	1f 93       	push	r17
    90d2:	cf 93       	push	r28
    90d4:	df 93       	push	r29
    90d6:	cd b7       	in	r28, 0x3d	; 61
    90d8:	de b7       	in	r29, 0x3e	; 62
    90da:	2e 97       	sbiw	r28, 0x0e	; 14
    90dc:	0f b6       	in	r0, 0x3f	; 63
    90de:	f8 94       	cli
    90e0:	de bf       	out	0x3e, r29	; 62
    90e2:	0f be       	out	0x3f, r0	; 63
    90e4:	cd bf       	out	0x3d, r28	; 61
    90e6:	0d 89       	ldd	r16, Y+21	; 0x15
    90e8:	1e 89       	ldd	r17, Y+22	; 0x16
    90ea:	86 e0       	ldi	r24, 0x06	; 6
    90ec:	8c 83       	std	Y+4, r24	; 0x04
    90ee:	1a 83       	std	Y+2, r17	; 0x02
    90f0:	09 83       	std	Y+1, r16	; 0x01
    90f2:	8f ef       	ldi	r24, 0xFF	; 255
    90f4:	9f e7       	ldi	r25, 0x7F	; 127
    90f6:	9e 83       	std	Y+6, r25	; 0x06
    90f8:	8d 83       	std	Y+5, r24	; 0x05
    90fa:	ae 01       	movw	r20, r28
    90fc:	47 5e       	subi	r20, 0xE7	; 231
    90fe:	5f 4f       	sbci	r21, 0xFF	; 255
    9100:	6f 89       	ldd	r22, Y+23	; 0x17
    9102:	78 8d       	ldd	r23, Y+24	; 0x18
    9104:	ce 01       	movw	r24, r28
    9106:	01 96       	adiw	r24, 0x01	; 1
    9108:	92 d9       	rcall	.-3292   	; 0x842e <vfprintf>
    910a:	2f 81       	ldd	r18, Y+7	; 0x07
    910c:	38 85       	ldd	r19, Y+8	; 0x08
    910e:	f8 01       	movw	r30, r16
    9110:	e2 0f       	add	r30, r18
    9112:	f3 1f       	adc	r31, r19
    9114:	10 82       	st	Z, r1
    9116:	2e 96       	adiw	r28, 0x0e	; 14
    9118:	0f b6       	in	r0, 0x3f	; 63
    911a:	f8 94       	cli
    911c:	de bf       	out	0x3e, r29	; 62
    911e:	0f be       	out	0x3f, r0	; 63
    9120:	cd bf       	out	0x3d, r28	; 61
    9122:	df 91       	pop	r29
    9124:	cf 91       	pop	r28
    9126:	1f 91       	pop	r17
    9128:	0f 91       	pop	r16
    912a:	08 95       	ret

0000912c <__ultoa_invert>:
    912c:	fa 01       	movw	r30, r20
    912e:	aa 27       	eor	r26, r26
    9130:	28 30       	cpi	r18, 0x08	; 8
    9132:	51 f1       	breq	.+84     	; 0x9188 <__ultoa_invert+0x5c>
    9134:	20 31       	cpi	r18, 0x10	; 16
    9136:	81 f1       	breq	.+96     	; 0x9198 <__ultoa_invert+0x6c>
    9138:	e8 94       	clt
    913a:	6f 93       	push	r22
    913c:	6e 7f       	andi	r22, 0xFE	; 254
    913e:	6e 5f       	subi	r22, 0xFE	; 254
    9140:	7f 4f       	sbci	r23, 0xFF	; 255
    9142:	8f 4f       	sbci	r24, 0xFF	; 255
    9144:	9f 4f       	sbci	r25, 0xFF	; 255
    9146:	af 4f       	sbci	r26, 0xFF	; 255
    9148:	b1 e0       	ldi	r27, 0x01	; 1
    914a:	3e d0       	rcall	.+124    	; 0x91c8 <__ultoa_invert+0x9c>
    914c:	b4 e0       	ldi	r27, 0x04	; 4
    914e:	3c d0       	rcall	.+120    	; 0x91c8 <__ultoa_invert+0x9c>
    9150:	67 0f       	add	r22, r23
    9152:	78 1f       	adc	r23, r24
    9154:	89 1f       	adc	r24, r25
    9156:	9a 1f       	adc	r25, r26
    9158:	a1 1d       	adc	r26, r1
    915a:	68 0f       	add	r22, r24
    915c:	79 1f       	adc	r23, r25
    915e:	8a 1f       	adc	r24, r26
    9160:	91 1d       	adc	r25, r1
    9162:	a1 1d       	adc	r26, r1
    9164:	6a 0f       	add	r22, r26
    9166:	71 1d       	adc	r23, r1
    9168:	81 1d       	adc	r24, r1
    916a:	91 1d       	adc	r25, r1
    916c:	a1 1d       	adc	r26, r1
    916e:	20 d0       	rcall	.+64     	; 0x91b0 <__ultoa_invert+0x84>
    9170:	09 f4       	brne	.+2      	; 0x9174 <__ultoa_invert+0x48>
    9172:	68 94       	set
    9174:	3f 91       	pop	r19
    9176:	2a e0       	ldi	r18, 0x0A	; 10
    9178:	26 9f       	mul	r18, r22
    917a:	11 24       	eor	r1, r1
    917c:	30 19       	sub	r19, r0
    917e:	30 5d       	subi	r19, 0xD0	; 208
    9180:	31 93       	st	Z+, r19
    9182:	de f6       	brtc	.-74     	; 0x913a <__ultoa_invert+0xe>
    9184:	cf 01       	movw	r24, r30
    9186:	08 95       	ret
    9188:	46 2f       	mov	r20, r22
    918a:	47 70       	andi	r20, 0x07	; 7
    918c:	40 5d       	subi	r20, 0xD0	; 208
    918e:	41 93       	st	Z+, r20
    9190:	b3 e0       	ldi	r27, 0x03	; 3
    9192:	0f d0       	rcall	.+30     	; 0x91b2 <__ultoa_invert+0x86>
    9194:	c9 f7       	brne	.-14     	; 0x9188 <__ultoa_invert+0x5c>
    9196:	f6 cf       	rjmp	.-20     	; 0x9184 <__ultoa_invert+0x58>
    9198:	46 2f       	mov	r20, r22
    919a:	4f 70       	andi	r20, 0x0F	; 15
    919c:	40 5d       	subi	r20, 0xD0	; 208
    919e:	4a 33       	cpi	r20, 0x3A	; 58
    91a0:	18 f0       	brcs	.+6      	; 0x91a8 <__ultoa_invert+0x7c>
    91a2:	49 5d       	subi	r20, 0xD9	; 217
    91a4:	31 fd       	sbrc	r19, 1
    91a6:	40 52       	subi	r20, 0x20	; 32
    91a8:	41 93       	st	Z+, r20
    91aa:	02 d0       	rcall	.+4      	; 0x91b0 <__ultoa_invert+0x84>
    91ac:	a9 f7       	brne	.-22     	; 0x9198 <__ultoa_invert+0x6c>
    91ae:	ea cf       	rjmp	.-44     	; 0x9184 <__ultoa_invert+0x58>
    91b0:	b4 e0       	ldi	r27, 0x04	; 4
    91b2:	a6 95       	lsr	r26
    91b4:	97 95       	ror	r25
    91b6:	87 95       	ror	r24
    91b8:	77 95       	ror	r23
    91ba:	67 95       	ror	r22
    91bc:	ba 95       	dec	r27
    91be:	c9 f7       	brne	.-14     	; 0x91b2 <__ultoa_invert+0x86>
    91c0:	00 97       	sbiw	r24, 0x00	; 0
    91c2:	61 05       	cpc	r22, r1
    91c4:	71 05       	cpc	r23, r1
    91c6:	08 95       	ret
    91c8:	9b 01       	movw	r18, r22
    91ca:	ac 01       	movw	r20, r24
    91cc:	0a 2e       	mov	r0, r26
    91ce:	06 94       	lsr	r0
    91d0:	57 95       	ror	r21
    91d2:	47 95       	ror	r20
    91d4:	37 95       	ror	r19
    91d6:	27 95       	ror	r18
    91d8:	ba 95       	dec	r27
    91da:	c9 f7       	brne	.-14     	; 0x91ce <__ultoa_invert+0xa2>
    91dc:	62 0f       	add	r22, r18
    91de:	73 1f       	adc	r23, r19
    91e0:	84 1f       	adc	r24, r20
    91e2:	95 1f       	adc	r25, r21
    91e4:	a0 1d       	adc	r26, r0
    91e6:	08 95       	ret

000091e8 <__do_global_dtors>:
    91e8:	13 e0       	ldi	r17, 0x03	; 3
    91ea:	c8 e5       	ldi	r28, 0x58	; 88
    91ec:	d3 e0       	ldi	r29, 0x03	; 3
    91ee:	03 c0       	rjmp	.+6      	; 0x91f6 <__do_global_dtors+0xe>
    91f0:	fe 01       	movw	r30, r28
    91f2:	f2 dc       	rcall	.-1564   	; 0x8bd8 <__tablejump2__>
    91f4:	21 96       	adiw	r28, 0x01	; 1
    91f6:	c9 35       	cpi	r28, 0x59	; 89
    91f8:	d1 07       	cpc	r29, r17
    91fa:	d1 f7       	brne	.-12     	; 0x91f0 <__do_global_dtors+0x8>
    91fc:	f8 94       	cli

000091fe <__stop_program>:
    91fe:	ff cf       	rjmp	.-2      	; 0x91fe <__stop_program>
