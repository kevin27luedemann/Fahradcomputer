
FWCP_MK3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000330  00800100  00009bb2  00009c46  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00009bb2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000a37  00800430  00800430  00009f76  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00009f76  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00009fd4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000005b0  00000000  00000000  0000a014  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000dfc3  00000000  00000000  0000a5c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002067  00000000  00000000  00018587  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00005bb8  00000000  00000000  0001a5ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001b64  00000000  00000000  000201a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001c39  00000000  00000000  00021d0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000db48  00000000  00000000  00023945  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000006e0  00000000  00000000  0003148d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	58 c3       	rjmp	.+1712   	; 0x6b2 <__dtors_end>
       2:	00 00       	nop
       4:	80 c3       	rjmp	.+1792   	; 0x706 <__bad_interrupt>
       6:	00 00       	nop
       8:	7e c3       	rjmp	.+1788   	; 0x706 <__bad_interrupt>
       a:	00 00       	nop
       c:	7c c3       	rjmp	.+1784   	; 0x706 <__bad_interrupt>
       e:	00 00       	nop
      10:	7a c3       	rjmp	.+1780   	; 0x706 <__bad_interrupt>
      12:	00 00       	nop
      14:	78 c3       	rjmp	.+1776   	; 0x706 <__bad_interrupt>
      16:	00 00       	nop
      18:	76 c3       	rjmp	.+1772   	; 0x706 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	74 c3       	rjmp	.+1768   	; 0x706 <__bad_interrupt>
      1e:	00 00       	nop
      20:	72 c3       	rjmp	.+1764   	; 0x706 <__bad_interrupt>
      22:	00 00       	nop
      24:	70 c3       	rjmp	.+1760   	; 0x706 <__bad_interrupt>
      26:	00 00       	nop
      28:	6e c3       	rjmp	.+1756   	; 0x706 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	0c 94 0d 2e 	jmp	0x5c1a	; 0x5c1a <__vector_11>
      30:	6a c3       	rjmp	.+1748   	; 0x706 <__bad_interrupt>
      32:	00 00       	nop
      34:	0c 94 29 2e 	jmp	0x5c52	; 0x5c52 <__vector_13>
      38:	66 c3       	rjmp	.+1740   	; 0x706 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	64 c3       	rjmp	.+1736   	; 0x706 <__bad_interrupt>
      3e:	00 00       	nop
      40:	0c 94 e5 2d 	jmp	0x5bca	; 0x5bca <__vector_16>
      44:	60 c3       	rjmp	.+1728   	; 0x706 <__bad_interrupt>
      46:	00 00       	nop
      48:	5e c3       	rjmp	.+1724   	; 0x706 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	5c c3       	rjmp	.+1720   	; 0x706 <__bad_interrupt>
      4e:	00 00       	nop
      50:	0c 94 3a 2e 	jmp	0x5c74	; 0x5c74 <__vector_20>
      54:	58 c3       	rjmp	.+1712   	; 0x706 <__bad_interrupt>
      56:	00 00       	nop
      58:	56 c3       	rjmp	.+1708   	; 0x706 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	54 c3       	rjmp	.+1704   	; 0x706 <__bad_interrupt>
      5e:	00 00       	nop
      60:	52 c3       	rjmp	.+1700   	; 0x706 <__bad_interrupt>
      62:	00 00       	nop
      64:	50 c3       	rjmp	.+1696   	; 0x706 <__bad_interrupt>
      66:	00 00       	nop
      68:	4e c3       	rjmp	.+1692   	; 0x706 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	4c c3       	rjmp	.+1688   	; 0x706 <__bad_interrupt>
      6e:	00 00       	nop
      70:	4a c3       	rjmp	.+1684   	; 0x706 <__bad_interrupt>
      72:	00 00       	nop
      74:	48 c3       	rjmp	.+1680   	; 0x706 <__bad_interrupt>
      76:	00 00       	nop
      78:	46 c3       	rjmp	.+1676   	; 0x706 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	44 c3       	rjmp	.+1672   	; 0x706 <__bad_interrupt>
      7e:	00 00       	nop
      80:	42 c3       	rjmp	.+1668   	; 0x706 <__bad_interrupt>
      82:	00 00       	nop
      84:	40 c3       	rjmp	.+1664   	; 0x706 <__bad_interrupt>
      86:	00 00       	nop
      88:	3e c3       	rjmp	.+1660   	; 0x706 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	7b 0b       	sbc	r23, r27
      8e:	82 0b       	sbc	r24, r18
      90:	cf 0c       	add	r12, r15
      92:	f2 0b       	sbc	r31, r18
      94:	cf 0c       	add	r12, r15
      96:	cf 0c       	add	r12, r15
      98:	cf 0c       	add	r12, r15
      9a:	c7 0c       	add	r12, r7
      9c:	cf 0c       	add	r12, r15
      9e:	cf 0c       	add	r12, r15
      a0:	cf 0c       	add	r12, r15
      a2:	cf 0c       	add	r12, r15
      a4:	cf 0c       	add	r12, r15
      a6:	cf 0c       	add	r12, r15
      a8:	cf 0c       	add	r12, r15
      aa:	cf 0c       	add	r12, r15
      ac:	cf 0c       	add	r12, r15
      ae:	cf 0c       	add	r12, r15
      b0:	cf 0c       	add	r12, r15
      b2:	cf 0c       	add	r12, r15
      b4:	cf 0c       	add	r12, r15
      b6:	cf 0c       	add	r12, r15
      b8:	cf 0c       	add	r12, r15
      ba:	cf 0c       	add	r12, r15
      bc:	cf 0c       	add	r12, r15
      be:	cf 0c       	add	r12, r15
      c0:	cf 0c       	add	r12, r15
      c2:	cf 0c       	add	r12, r15
      c4:	cf 0c       	add	r12, r15
      c6:	cf 0c       	add	r12, r15
      c8:	cf 0c       	add	r12, r15
      ca:	cf 0c       	add	r12, r15
      cc:	cf 0c       	add	r12, r15
      ce:	cf 0c       	add	r12, r15
      d0:	cf 0c       	add	r12, r15
      d2:	cf 0c       	add	r12, r15
      d4:	cf 0c       	add	r12, r15
      d6:	cf 0c       	add	r12, r15
      d8:	cf 0c       	add	r12, r15
      da:	cf 0c       	add	r12, r15
      dc:	cf 0c       	add	r12, r15
      de:	cf 0c       	add	r12, r15
      e0:	cf 0c       	add	r12, r15
      e2:	cf 0c       	add	r12, r15
      e4:	cf 0c       	add	r12, r15
      e6:	cf 0c       	add	r12, r15
      e8:	cf 0c       	add	r12, r15
      ea:	cf 0c       	add	r12, r15
      ec:	cf 0c       	add	r12, r15
      ee:	cf 0c       	add	r12, r15
      f0:	78 0c       	add	r7, r8
      f2:	7e 0c       	add	r7, r14
      f4:	8f 0c       	add	r8, r15
      f6:	a0 0c       	add	r10, r0
      f8:	b5 0c       	add	r11, r5
      fa:	f8 24       	eor	r15, r8
      fc:	cb 23       	and	r28, r27
      fe:	da 23       	and	r29, r26
     100:	d5 23       	and	r29, r21
     102:	d5 23       	and	r29, r21
     104:	d5 23       	and	r29, r21
     106:	d5 23       	and	r29, r21
     108:	d5 23       	and	r29, r21
     10a:	d5 23       	and	r29, r21
     10c:	d5 23       	and	r29, r21
     10e:	d5 23       	and	r29, r21
     110:	d5 23       	and	r29, r21
     112:	d5 23       	and	r29, r21
     114:	06 25       	eor	r16, r6
     116:	d5 23       	and	r29, r21
     118:	d5 23       	and	r29, r21
     11a:	d5 23       	and	r29, r21
     11c:	81 23       	and	r24, r17
     11e:	d5 23       	and	r29, r21
     120:	da 23       	and	r29, r26
     122:	d5 23       	and	r29, r21
     124:	d5 23       	and	r29, r21
     126:	c9 24       	eor	r12, r9
     128:	57 26       	eor	r5, r23
     12a:	59 26       	eor	r5, r25
     12c:	59 26       	eor	r5, r25
     12e:	59 26       	eor	r5, r25
     130:	59 26       	eor	r5, r25
     132:	59 26       	eor	r5, r25
     134:	59 26       	eor	r5, r25
     136:	55 26       	eor	r5, r21
     138:	59 26       	eor	r5, r25
     13a:	59 26       	eor	r5, r25
     13c:	59 26       	eor	r5, r25
     13e:	59 26       	eor	r5, r25
     140:	59 26       	eor	r5, r25
     142:	5c 26       	eor	r5, r28
     144:	5b 26       	eor	r5, r27
     146:	45 26       	eor	r4, r21
     148:	47 26       	eor	r4, r23
     14a:	49 26       	eor	r4, r25
     14c:	4b 26       	eor	r4, r27
     14e:	4d 26       	eor	r4, r29
     150:	4f 26       	eor	r4, r31
     152:	51 26       	eor	r5, r17
     154:	53 26       	eor	r5, r19
     156:	89 31       	cpi	r24, 0x19	; 25
     158:	99 31       	cpi	r25, 0x19	; 25
     15a:	99 31       	cpi	r25, 0x19	; 25
     15c:	99 31       	cpi	r25, 0x19	; 25
     15e:	99 31       	cpi	r25, 0x19	; 25
     160:	99 31       	cpi	r25, 0x19	; 25
     162:	99 31       	cpi	r25, 0x19	; 25
     164:	99 31       	cpi	r25, 0x19	; 25
     166:	99 31       	cpi	r25, 0x19	; 25
     168:	99 31       	cpi	r25, 0x19	; 25
     16a:	99 31       	cpi	r25, 0x19	; 25
     16c:	99 31       	cpi	r25, 0x19	; 25
     16e:	99 31       	cpi	r25, 0x19	; 25
     170:	99 31       	cpi	r25, 0x19	; 25
     172:	99 31       	cpi	r25, 0x19	; 25
     174:	99 31       	cpi	r25, 0x19	; 25
     176:	99 31       	cpi	r25, 0x19	; 25
     178:	99 31       	cpi	r25, 0x19	; 25
     17a:	99 31       	cpi	r25, 0x19	; 25
     17c:	99 31       	cpi	r25, 0x19	; 25
     17e:	99 31       	cpi	r25, 0x19	; 25
     180:	99 31       	cpi	r25, 0x19	; 25
     182:	99 31       	cpi	r25, 0x19	; 25
     184:	99 31       	cpi	r25, 0x19	; 25
     186:	99 31       	cpi	r25, 0x19	; 25
     188:	99 31       	cpi	r25, 0x19	; 25
     18a:	99 31       	cpi	r25, 0x19	; 25
     18c:	99 31       	cpi	r25, 0x19	; 25
     18e:	99 31       	cpi	r25, 0x19	; 25
     190:	99 31       	cpi	r25, 0x19	; 25
     192:	99 31       	cpi	r25, 0x19	; 25
     194:	99 31       	cpi	r25, 0x19	; 25
     196:	99 31       	cpi	r25, 0x19	; 25
     198:	99 31       	cpi	r25, 0x19	; 25
     19a:	99 31       	cpi	r25, 0x19	; 25
     19c:	99 31       	cpi	r25, 0x19	; 25
     19e:	99 31       	cpi	r25, 0x19	; 25
     1a0:	99 31       	cpi	r25, 0x19	; 25
     1a2:	99 31       	cpi	r25, 0x19	; 25
     1a4:	99 31       	cpi	r25, 0x19	; 25
     1a6:	99 31       	cpi	r25, 0x19	; 25
     1a8:	99 31       	cpi	r25, 0x19	; 25
     1aa:	99 31       	cpi	r25, 0x19	; 25
     1ac:	99 31       	cpi	r25, 0x19	; 25
     1ae:	99 31       	cpi	r25, 0x19	; 25
     1b0:	99 31       	cpi	r25, 0x19	; 25
     1b2:	99 31       	cpi	r25, 0x19	; 25
     1b4:	99 31       	cpi	r25, 0x19	; 25
     1b6:	99 31       	cpi	r25, 0x19	; 25
     1b8:	99 31       	cpi	r25, 0x19	; 25
     1ba:	99 31       	cpi	r25, 0x19	; 25
     1bc:	99 31       	cpi	r25, 0x19	; 25
     1be:	65 31       	cpi	r22, 0x15	; 21
     1c0:	99 31       	cpi	r25, 0x19	; 25
     1c2:	99 31       	cpi	r25, 0x19	; 25
     1c4:	99 31       	cpi	r25, 0x19	; 25
     1c6:	99 31       	cpi	r25, 0x19	; 25
     1c8:	99 31       	cpi	r25, 0x19	; 25
     1ca:	99 31       	cpi	r25, 0x19	; 25
     1cc:	99 31       	cpi	r25, 0x19	; 25
     1ce:	2c 31       	cpi	r18, 0x1C	; 28
     1d0:	28 31       	cpi	r18, 0x18	; 24
     1d2:	99 31       	cpi	r25, 0x19	; 25
     1d4:	4f 31       	cpi	r20, 0x1F	; 31
     1d6:	99 31       	cpi	r25, 0x19	; 25
     1d8:	99 31       	cpi	r25, 0x19	; 25
     1da:	39 31       	cpi	r19, 0x19	; 25
     1dc:	99 31       	cpi	r25, 0x19	; 25
     1de:	99 31       	cpi	r25, 0x19	; 25
     1e0:	79 31       	cpi	r23, 0x19	; 25
     1e2:	c4 3a       	cpi	r28, 0xA4	; 164
     1e4:	ea 3a       	cpi	r30, 0xAA	; 170
     1e6:	11 3b       	cpi	r17, 0xB1	; 177
     1e8:	39 3b       	cpi	r19, 0xB9	; 185
     1ea:	60 3b       	cpi	r22, 0xB0	; 176
     1ec:	8a 3b       	cpi	r24, 0xBA	; 186
     1ee:	b3 3b       	cpi	r27, 0xB3	; 179
     1f0:	dd 3b       	cpi	r29, 0xBD	; 189
     1f2:	54 3c       	cpi	r21, 0xC4	; 196
     1f4:	7e 3c       	cpi	r23, 0xCE	; 206
     1f6:	05 a8       	ldd	r0, Z+53	; 0x35
     1f8:	4c cd       	rjmp	.-1384   	; 0xfffffc92 <__eeprom_end+0xff7efc92>
     1fa:	b2 d4       	rcall	.+2404   	; 0xb60 <_ZN6BMP18018bmp180_getpressureEv+0x6a>
     1fc:	4e b9       	out	0x0e, r20	; 14
     1fe:	38 36       	cpi	r19, 0x68	; 104
     200:	a9 02       	muls	r26, r25
     202:	0c 50       	subi	r16, 0x0C	; 12
     204:	b9 91       	ld	r27, Y+
     206:	86 88       	ldd	r8, Z+22	; 0x16
     208:	08 3c       	cpi	r16, 0xC8	; 200
     20a:	a6 aa       	std	Z+54, r10	; 0x36
     20c:	aa 2a       	or	r10, r26
     20e:	be 00       	.word	0x00be	; ????
     210:	00 00       	nop
     212:	80 3f       	cpi	r24, 0xF0	; 240
     214:	07 63       	ori	r16, 0x37	; 55
     216:	42 36       	cpi	r20, 0x62	; 98
     218:	b7 9b       	sbis	0x16, 7	; 22
     21a:	d8 a7       	std	Y+40, r29	; 0x28
     21c:	1a 39       	cpi	r17, 0x9A	; 154
     21e:	68 56       	subi	r22, 0x68	; 104
     220:	18 ae       	std	Y+56, r1	; 0x38
     222:	ba ab       	std	Y+50, r27	; 0x32
     224:	55 8c       	ldd	r5, Z+29	; 0x1d
     226:	1d 3c       	cpi	r17, 0xCD	; 205
     228:	b7 cc       	rjmp	.-1682   	; 0xfffffb98 <__eeprom_end+0xff7efb98>
     22a:	57 63       	ori	r21, 0x37	; 55
     22c:	bd 6d       	ori	r27, 0xDD	; 221
     22e:	ed fd       	.word	0xfded	; ????
     230:	75 3e       	cpi	r23, 0xE5	; 229
     232:	f6 17       	cp	r31, r22
     234:	72 31       	cpi	r23, 0x12	; 18
     236:	bf 00       	.word	0x00bf	; ????
     238:	00 00       	nop
     23a:	80 3f       	cpi	r24, 0xF0	; 240
     23c:	08 00       	.word	0x0008	; ????
     23e:	00 00       	nop
     240:	be 92       	st	-X, r11
     242:	24 49       	sbci	r18, 0x94	; 148
     244:	12 3e       	cpi	r17, 0xE2	; 226
     246:	ab aa       	std	Y+51, r10	; 0x33
     248:	aa 2a       	or	r10, r26
     24a:	be cd       	rjmp	.-1156   	; 0xfffffdc8 <__eeprom_end+0xff7efdc8>
     24c:	cc cc       	rjmp	.-1640   	; 0xfffffbe6 <__eeprom_end+0xff7efbe6>
     24e:	4c 3e       	cpi	r20, 0xEC	; 236
     250:	00 00       	nop
     252:	00 80       	ld	r0, Z
     254:	be ab       	std	Y+54, r27	; 0x36
     256:	aa aa       	std	Y+50, r10	; 0x32
     258:	aa 3e       	cpi	r26, 0xEA	; 234
     25a:	00 00       	nop
     25c:	00 00       	nop
     25e:	bf 00       	.word	0x00bf	; ????
     260:	00 00       	nop
     262:	80 3f       	cpi	r24, 0xF0	; 240
     264:	00 00       	nop
     266:	00 00       	nop
     268:	00 08       	sbc	r0, r0
     26a:	41 78       	andi	r20, 0x81	; 129
     26c:	d3 bb       	out	0x13, r29	; 19
     26e:	43 87       	std	Z+11, r20	; 0x0b
     270:	d1 13       	cpse	r29, r17
     272:	3d 19       	sub	r19, r13
     274:	0e 3c       	cpi	r16, 0xCE	; 206
     276:	c3 bd       	out	0x23, r28	; 35
     278:	42 82       	std	Z+2, r4	; 0x02
     27a:	ad 2b       	or	r26, r29
     27c:	3e 68       	ori	r19, 0x8E	; 142
     27e:	ec 82       	std	Y+4, r14	; 0x04
     280:	76 be       	out	0x36, r7	; 54
     282:	d9 8f       	std	Y+25, r29	; 0x19
     284:	e1 a9       	ldd	r30, Z+49	; 0x31
     286:	3e 4c       	sbci	r19, 0xCE	; 206
     288:	80 ef       	ldi	r24, 0xF0	; 240
     28a:	ff be       	out	0x3f, r15	; 63
     28c:	01 c4       	rjmp	.+2050   	; 0xa90 <_ZN6BMP18021bmp180_gettemperatureEv+0x130>
     28e:	ff 7f       	andi	r31, 0xFF	; 255
     290:	3f 00       	.word	0x003f	; ????
     292:	00 00       	nop
	...

00000296 <__trampolines_end>:
     296:	00 e0       	ldi	r16, 0x00	; 0
     298:	f8 fc       	.word	0xfcf8	; ????
     29a:	fe 1e       	adc	r15, r30
     29c:	07 07       	cpc	r16, r23
     29e:	07 07       	cpc	r16, r23
     2a0:	1e fe       	.word	0xfe1e	; ????
     2a2:	fc f8       	.word	0xf8fc	; ????
     2a4:	f0 00       	.word	0x00f0	; ????
     2a6:	00 07       	cpc	r16, r16
     2a8:	0f 3f       	cpi	r16, 0xFF	; 255
     2aa:	3f 7c       	andi	r19, 0xCF	; 207
     2ac:	70 70       	andi	r23, 0x00	; 0
     2ae:	70 70       	andi	r23, 0x00	; 0
     2b0:	7c 3f       	cpi	r23, 0xFC	; 252
     2b2:	1f 1f       	adc	r17, r31
     2b4:	07 00       	.word	0x0007	; ????
     2b6:	00 00       	nop
     2b8:	00 06       	cpc	r0, r16
     2ba:	07 07       	cpc	r16, r23
     2bc:	ff ff       	.word	0xffff	; ????
     2be:	ff ff       	.word	0xffff	; ????
	...
     2cc:	7f 7f       	andi	r23, 0xFF	; 255
     2ce:	7f 7f       	andi	r23, 0xFF	; 255
     2d0:	00 00       	nop
     2d2:	00 00       	nop
     2d4:	00 00       	nop
     2d6:	00 38       	cpi	r16, 0x80	; 128
     2d8:	3c 3e       	cpi	r19, 0xEC	; 236
     2da:	3e 0f       	add	r19, r30
     2dc:	07 07       	cpc	r16, r23
     2de:	07 cf       	rjmp	.-498    	; 0xee <__SREG__+0xaf>
     2e0:	ff fe       	.word	0xfeff	; ????
     2e2:	fe 38       	cpi	r31, 0x8E	; 142
     2e4:	00 00       	nop
     2e6:	00 40       	sbci	r16, 0x00	; 0
     2e8:	40 60       	ori	r20, 0x00	; 0
     2ea:	70 78       	andi	r23, 0x80	; 128
     2ec:	7c 7e       	andi	r23, 0xEC	; 236
     2ee:	7f 77       	andi	r23, 0x7F	; 127
     2f0:	73 71       	andi	r23, 0x13	; 19
     2f2:	70 70       	andi	r23, 0x00	; 0
     2f4:	00 00       	nop
     2f6:	00 18       	sub	r0, r0
     2f8:	1c 1e       	adc	r1, r28
     2fa:	1e 0f       	add	r17, r30
     2fc:	c7 c7       	rjmp	.+3982   	; 0x128c <send_cmd+0xe>
     2fe:	e7 ff       	sbrs	r30, 7
     300:	fe be       	out	0x3e, r15	; 62
     302:	9c 00       	.word	0x009c	; ????
     304:	00 00       	nop
     306:	00 0c       	add	r0, r0
     308:	1c 3c       	cpi	r17, 0xCC	; 204
     30a:	3c 78       	andi	r19, 0x8C	; 140
     30c:	70 70       	andi	r23, 0x00	; 0
     30e:	70 79       	andi	r23, 0x90	; 144
     310:	7f 3f       	cpi	r23, 0xFF	; 255
     312:	1f 0f       	add	r17, r31
     314:	00 00       	nop
     316:	00 00       	nop
     318:	80 c0       	rjmp	.+256    	; 0x41a <_ZL7font5x8+0x44>
     31a:	e0 70       	andi	r30, 0x00	; 0
     31c:	38 1c       	adc	r3, r8
     31e:	1e ff       	.word	0xff1e	; ????
     320:	ff ff       	.word	0xffff	; ????
     322:	ff 00       	.word	0x00ff	; ????
     324:	00 00       	nop
     326:	06 07       	cpc	r16, r22
     328:	07 07       	cpc	r16, r23
     32a:	06 06       	cpc	r0, r22
     32c:	06 06       	cpc	r0, r22
     32e:	06 7f       	andi	r16, 0xF6	; 246
     330:	7f 7f       	andi	r23, 0xFF	; 255
     332:	7f 06       	cpc	r7, r31
     334:	06 00       	.word	0x0006	; ????
     336:	00 00       	nop
     338:	00 00       	nop
     33a:	f0 ff       	sbrs	r31, 0
     33c:	ff ff       	.word	0xffff	; ????
     33e:	e7 e7       	ldi	r30, 0x77	; 119
     340:	e7 e7       	ldi	r30, 0x77	; 119
     342:	c7 87       	std	Z+15, r28	; 0x0f
     344:	00 00       	nop
     346:	00 00       	nop
     348:	38 78       	andi	r19, 0x88	; 136
     34a:	71 70       	andi	r23, 0x01	; 1
     34c:	70 70       	andi	r23, 0x00	; 0
     34e:	70 70       	andi	r23, 0x00	; 0
     350:	39 3f       	cpi	r19, 0xF9	; 249
     352:	3f 1f       	adc	r19, r31
     354:	0f 00       	.word	0x000f	; ????
     356:	00 80       	ld	r0, Z
     358:	e0 f0       	brcs	.+56     	; 0x392 <__trampolines_end+0xfc>
     35a:	f8 fc       	.word	0xfcf8	; ????
     35c:	7f 7f       	andi	r23, 0xFF	; 255
     35e:	6f 67       	ori	r22, 0x7F	; 127
     360:	e1 e1       	ldi	r30, 0x11	; 17
     362:	c0 80       	ld	r12, Z
     364:	00 00       	nop
     366:	00 0f       	add	r16, r16
     368:	1f 3f       	cpi	r17, 0xFF	; 255
     36a:	3f 78       	andi	r19, 0x8F	; 143
     36c:	70 70       	andi	r23, 0x00	; 0
     36e:	70 70       	andi	r23, 0x00	; 0
     370:	78 3f       	cpi	r23, 0xF8	; 248
     372:	3f 1f       	adc	r19, r31
     374:	0f 00       	.word	0x000f	; ????
     376:	00 07       	cpc	r16, r16
     378:	07 07       	cpc	r16, r23
     37a:	07 07       	cpc	r16, r23
     37c:	c7 e7       	ldi	r28, 0x77	; 119
     37e:	f7 ff       	sbrs	r31, 7
     380:	7f 3f       	cpi	r23, 0xFF	; 255
     382:	1f 07       	cpc	r17, r31
     384:	03 01       	movw	r0, r6
     386:	00 20       	and	r0, r0
     388:	38 7c       	andi	r19, 0xC8	; 200
     38a:	7e 3f       	cpi	r23, 0xFE	; 254
     38c:	0f 07       	cpc	r16, r31
     38e:	03 00       	.word	0x0003	; ????
	...
     398:	00 1c       	adc	r0, r0
     39a:	be fe       	.word	0xfebe	; ????
     39c:	ff e7       	ldi	r31, 0x7F	; 127
     39e:	c3 c3       	rjmp	.+1926   	; 0xb26 <_ZN6BMP18018bmp180_getpressureEv+0x30>
     3a0:	e7 ff       	sbrs	r30, 7
     3a2:	fe be       	out	0x3e, r15	; 62
     3a4:	1c 00       	.word	0x001c	; ????
     3a6:	00 00       	nop
     3a8:	0e 3f       	cpi	r16, 0xFE	; 254
     3aa:	3f 7f       	andi	r19, 0xFF	; 255
     3ac:	71 60       	ori	r23, 0x01	; 1
     3ae:	60 60       	ori	r22, 0x00	; 0
     3b0:	71 7f       	andi	r23, 0xF1	; 241
     3b2:	3f 3f       	cpi	r19, 0xFF	; 255
     3b4:	0f 00       	.word	0x000f	; ????
     3b6:	00 78       	andi	r16, 0x80	; 128
     3b8:	fc fe       	.word	0xfefc	; ????
     3ba:	fe 8f       	std	Y+30, r31	; 0x1e
     3bc:	07 07       	cpc	r16, r23
     3be:	07 07       	cpc	r16, r23
     3c0:	8f fe       	.word	0xfe8f	; ????
     3c2:	fe fc       	.word	0xfcfe	; ????
     3c4:	f8 00       	.word	0x00f8	; ????
     3c6:	00 00       	nop
     3c8:	00 01       	movw	r0, r0
     3ca:	43 43       	sbci	r20, 0x33	; 51
     3cc:	73 7b       	andi	r23, 0xB3	; 179
     3ce:	7f 7f       	andi	r23, 0xFF	; 255
     3d0:	1f 0f       	add	r17, r31
     3d2:	07 03       	mulsu	r16, r23
	...

000003d6 <_ZL7font5x8>:
     3d6:	00 00 5f 00 00 00 07 00 07 00 14 7f 14 7f 14 24     .._............$
     3e6:	2a 7f 2a 12 23 13 08 64 62 36 49 55 22 50 00 05     *.*.#..db6IU"P..
     3f6:	03 00 00 00 1c 22 41 00 00 41 22 1c 00 14 08 3e     ....."A..A"....>
     406:	08 14 08 08 3e 08 08 00 50 30 00 00 08 08 08 08     ....>...P0......
     416:	08 00 60 60 00 00 20 10 08 04 02 3e 51 49 45 3e     ..``.. ....>QIE>
     426:	00 42 7f 40 00 42 61 51 49 46 21 41 45 4b 31 18     .B.@.BaQIF!AEK1.
     436:	14 12 7f 10 27 45 45 45 39 3c 4a 49 49 30 01 71     ....'EEE9<JII0.q
     446:	09 05 03 36 49 49 49 36 06 49 49 29 1e 00 36 36     ...6III6.II)..66
     456:	00 00 00 56 36 00 00 08 14 22 41 00 14 14 14 14     ...V6...."A.....
     466:	14 00 41 22 14 08 02 01 51 09 06 32 49 79 41 3e     ..A"....Q..2IyA>
     476:	7e 11 11 11 7e 7f 49 49 49 36 3e 41 41 41 22 7f     ~...~.III6>AAA".
     486:	41 41 22 1c 7f 49 49 49 41 7f 09 09 09 01 3e 41     AA"..IIIA.....>A
     496:	49 49 7a 7f 08 08 08 7f 00 41 7f 41 00 20 40 41     IIz......A.A. @A
     4a6:	3f 01 7f 08 14 22 41 7f 40 40 40 40 7f 02 0c 02     ?...."A.@@@@....
     4b6:	7f 7f 04 08 10 7f 3e 41 41 41 3e 7f 09 09 09 06     ......>AAA>.....
     4c6:	3e 41 51 21 5e 7f 09 19 29 46 46 49 49 49 31 01     >AQ!^...)FFIII1.
     4d6:	01 7f 01 01 3f 40 40 40 3f 1f 20 40 20 1f 3f 40     ....?@@@?. @ .?@
     4e6:	38 40 3f 63 14 08 14 63 07 08 70 08 07 61 51 49     8@?c...c..p..aQI
     4f6:	45 43 00 7f 41 41 00 02 04 08 10 20 00 41 41 7f     EC..AA..... .AA.
     506:	00 04 02 01 02 04 40 40 40 40 40 00 01 02 04 00     ......@@@@@.....
     516:	20 54 54 54 78 7f 48 44 44 38 38 44 44 44 20 38      TTTx.HDD88DDD 8
     526:	44 44 48 7f 38 54 54 54 18 08 7e 09 01 02 0c 52     DDH.8TTT..~....R
     536:	52 52 3e 7f 08 04 04 78 00 44 7d 40 00 20 40 44     RR>....x.D}@. @D
     546:	3d 00 7f 10 28 44 00 00 41 7f 40 00 7c 04 18 04     =...(D..A.@.|...
     556:	78 7c 08 04 04 78 38 44 44 44 38 7c 14 14 14 08     x|...x8DDD8|....
     566:	08 14 14 18 7c 7c 08 04 04 08 48 54 54 54 20 04     ....||....HTTT .
     576:	3f 44 40 20 3c 40 40 20 7c 1c 20 40 20 1c 3c 40     ?D@ <@@ |. @ .<@
     586:	30 40 3c 44 28 10 28 44 0c 50 50 50 3c 44 64 54     0@<D(.(D.PPP<DdT
     596:	4c 44 00 08 36 41 00 00 00 7f 00 00 00 41 36 08     LD..6A.......A6.
     5a6:	00 10 08 08 10 08                                   ......

000005ac <__c.2179>:
     5ac:	6e 61 6e 00                                         nan.

000005b0 <__c.2177>:
     5b0:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     5c0:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     5d0:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     5e0:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     5f0:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     600:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     610:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     620:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     630:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     640:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     650:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     660:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     670:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     680:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     690:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     6a0:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

000006ae <__ctors_start>:
     6ae:	12 3f       	cpi	r17, 0xF2	; 242

000006b0 <__ctors_end>:
     6b0:	35 3f       	cpi	r19, 0xF5	; 245

000006b2 <__dtors_end>:
     6b2:	11 24       	eor	r1, r1
     6b4:	1f be       	out	0x3f, r1	; 63
     6b6:	cf ef       	ldi	r28, 0xFF	; 255
     6b8:	d0 e4       	ldi	r29, 0x40	; 64
     6ba:	de bf       	out	0x3e, r29	; 62
     6bc:	cd bf       	out	0x3d, r28	; 61

000006be <__do_copy_data>:
     6be:	14 e0       	ldi	r17, 0x04	; 4
     6c0:	a0 e0       	ldi	r26, 0x00	; 0
     6c2:	b1 e0       	ldi	r27, 0x01	; 1
     6c4:	e2 eb       	ldi	r30, 0xB2	; 178
     6c6:	fb e9       	ldi	r31, 0x9B	; 155
     6c8:	00 e0       	ldi	r16, 0x00	; 0
     6ca:	0b bf       	out	0x3b, r16	; 59
     6cc:	02 c0       	rjmp	.+4      	; 0x6d2 <__do_copy_data+0x14>
     6ce:	07 90       	elpm	r0, Z+
     6d0:	0d 92       	st	X+, r0
     6d2:	a0 33       	cpi	r26, 0x30	; 48
     6d4:	b1 07       	cpc	r27, r17
     6d6:	d9 f7       	brne	.-10     	; 0x6ce <__do_copy_data+0x10>

000006d8 <__do_clear_bss>:
     6d8:	2e e0       	ldi	r18, 0x0E	; 14
     6da:	a0 e3       	ldi	r26, 0x30	; 48
     6dc:	b4 e0       	ldi	r27, 0x04	; 4
     6de:	01 c0       	rjmp	.+2      	; 0x6e2 <.do_clear_bss_start>

000006e0 <.do_clear_bss_loop>:
     6e0:	1d 92       	st	X+, r1

000006e2 <.do_clear_bss_start>:
     6e2:	a7 36       	cpi	r26, 0x67	; 103
     6e4:	b2 07       	cpc	r27, r18
     6e6:	e1 f7       	brne	.-8      	; 0x6e0 <.do_clear_bss_loop>

000006e8 <__do_global_ctors>:
     6e8:	13 e0       	ldi	r17, 0x03	; 3
     6ea:	c8 e5       	ldi	r28, 0x58	; 88
     6ec:	d3 e0       	ldi	r29, 0x03	; 3
     6ee:	04 c0       	rjmp	.+8      	; 0x6f8 <__do_global_ctors+0x10>
     6f0:	21 97       	sbiw	r28, 0x01	; 1
     6f2:	fe 01       	movw	r30, r28
     6f4:	0e 94 55 49 	call	0x92aa	; 0x92aa <__tablejump2__>
     6f8:	c7 35       	cpi	r28, 0x57	; 87
     6fa:	d1 07       	cpc	r29, r17
     6fc:	c9 f7       	brne	.-14     	; 0x6f0 <__do_global_ctors+0x8>
     6fe:	0e 94 24 38 	call	0x7048	; 0x7048 <main>
     702:	0c 94 cd 4d 	jmp	0x9b9a	; 0x9b9a <__do_global_dtors>

00000706 <__bad_interrupt>:
     706:	7c cc       	rjmp	.-1800   	; 0x0 <__vectors>

00000708 <_ZN6BMP180D1Ev>:
	bmp180_getcalibration();
	
} //BMP180

// default destructor
BMP180::~BMP180()
     708:	8e 96       	adiw	r24, 0x2e	; 46
     70a:	0c 94 28 25 	jmp	0x4a50	; 0x4a50 <_ZN3I2CD1Ev>
     70e:	08 95       	ret

00000710 <_ZN6BMP18015bmp180_writememEhh>:
{
} //~BMP180bmp180_regac2

void BMP180::bmp180_writemem(uint8_t reg, uint8_t value){
     710:	0f 93       	push	r16
     712:	1f 93       	push	r17
     714:	cf 93       	push	r28
     716:	df 93       	push	r29
     718:	06 2f       	mov	r16, r22
     71a:	14 2f       	mov	r17, r20
	i2c.twi_start();
     71c:	ec 01       	movw	r28, r24
     71e:	ae 96       	adiw	r28, 0x2e	; 46
     720:	ce 01       	movw	r24, r28
     722:	0e 94 29 25 	call	0x4a52	; 0x4a52 <_ZN3I2C9twi_startEv>
	i2c.twi_write(BMP180_ADDR | I2C_WRITE);
     726:	6e ee       	ldi	r22, 0xEE	; 238
     728:	ce 01       	movw	r24, r28
     72a:	0e 94 31 25 	call	0x4a62	; 0x4a62 <_ZN3I2C9twi_writeEh>
	i2c.twi_write(reg);
     72e:	60 2f       	mov	r22, r16
     730:	ce 01       	movw	r24, r28
     732:	0e 94 31 25 	call	0x4a62	; 0x4a62 <_ZN3I2C9twi_writeEh>
	i2c.twi_write(value);
     736:	61 2f       	mov	r22, r17
     738:	ce 01       	movw	r24, r28
     73a:	0e 94 31 25 	call	0x4a62	; 0x4a62 <_ZN3I2C9twi_writeEh>
	i2c.twi_stop();
     73e:	ce 01       	movw	r24, r28
     740:	0e 94 2d 25 	call	0x4a5a	; 0x4a5a <_ZN3I2C8twi_stopEv>
}
     744:	df 91       	pop	r29
     746:	cf 91       	pop	r28
     748:	1f 91       	pop	r17
     74a:	0f 91       	pop	r16
     74c:	08 95       	ret

0000074e <_ZN6BMP1806readS8Eh>:

int8_t BMP180::readS8(uint8_t reg){
     74e:	1f 93       	push	r17
     750:	cf 93       	push	r28
     752:	df 93       	push	r29
     754:	16 2f       	mov	r17, r22
	i2c.twi_start();
     756:	ec 01       	movw	r28, r24
     758:	ae 96       	adiw	r28, 0x2e	; 46
     75a:	ce 01       	movw	r24, r28
     75c:	0e 94 29 25 	call	0x4a52	; 0x4a52 <_ZN3I2C9twi_startEv>
	i2c.twi_write((BMP180_ADDR | I2C_WRITE));
     760:	6e ee       	ldi	r22, 0xEE	; 238
     762:	ce 01       	movw	r24, r28
     764:	0e 94 31 25 	call	0x4a62	; 0x4a62 <_ZN3I2C9twi_writeEh>
	i2c.twi_write(reg);
     768:	61 2f       	mov	r22, r17
     76a:	ce 01       	movw	r24, r28
     76c:	0e 94 31 25 	call	0x4a62	; 0x4a62 <_ZN3I2C9twi_writeEh>
	i2c.twi_start();
     770:	ce 01       	movw	r24, r28
     772:	0e 94 29 25 	call	0x4a52	; 0x4a52 <_ZN3I2C9twi_startEv>
	i2c.twi_write((BMP180_ADDR | I2C_READ));
     776:	6f ee       	ldi	r22, 0xEF	; 239
     778:	ce 01       	movw	r24, r28
     77a:	0e 94 31 25 	call	0x4a62	; 0x4a62 <_ZN3I2C9twi_writeEh>
	int8_t ergeb = i2c.twi_read(0);
     77e:	60 e0       	ldi	r22, 0x00	; 0
     780:	ce 01       	movw	r24, r28
     782:	0e 94 41 25 	call	0x4a82	; 0x4a82 <_ZN3I2C8twi_readEh>
     786:	18 2f       	mov	r17, r24
	i2c.twi_stop();
     788:	ce 01       	movw	r24, r28
     78a:	0e 94 2d 25 	call	0x4a5a	; 0x4a5a <_ZN3I2C8twi_stopEv>
	return ergeb;
}
     78e:	81 2f       	mov	r24, r17
     790:	df 91       	pop	r29
     792:	cf 91       	pop	r28
     794:	1f 91       	pop	r17
     796:	08 95       	ret

00000798 <_ZN6BMP1806readU8Eh>:
int16_t BMP180::readS16(uint8_t reg){
	int8_t	hi = readS8(reg);
	uint8_t	lo = readU8(reg+1);
	return ( hi << 8) + lo;
}
uint8_t BMP180::readU8(uint8_t reg){
     798:	1f 93       	push	r17
     79a:	cf 93       	push	r28
     79c:	df 93       	push	r29
     79e:	16 2f       	mov	r17, r22
		i2c.twi_start();
     7a0:	ec 01       	movw	r28, r24
     7a2:	ae 96       	adiw	r28, 0x2e	; 46
     7a4:	ce 01       	movw	r24, r28
     7a6:	0e 94 29 25 	call	0x4a52	; 0x4a52 <_ZN3I2C9twi_startEv>
		i2c.twi_write((BMP180_ADDR | I2C_WRITE));
     7aa:	6e ee       	ldi	r22, 0xEE	; 238
     7ac:	ce 01       	movw	r24, r28
     7ae:	0e 94 31 25 	call	0x4a62	; 0x4a62 <_ZN3I2C9twi_writeEh>
		i2c.twi_write(reg);
     7b2:	61 2f       	mov	r22, r17
     7b4:	ce 01       	movw	r24, r28
     7b6:	0e 94 31 25 	call	0x4a62	; 0x4a62 <_ZN3I2C9twi_writeEh>
		i2c.twi_start();
     7ba:	ce 01       	movw	r24, r28
     7bc:	0e 94 29 25 	call	0x4a52	; 0x4a52 <_ZN3I2C9twi_startEv>
		i2c.twi_write((BMP180_ADDR | I2C_READ));
     7c0:	6f ee       	ldi	r22, 0xEF	; 239
     7c2:	ce 01       	movw	r24, r28
     7c4:	0e 94 31 25 	call	0x4a62	; 0x4a62 <_ZN3I2C9twi_writeEh>
		uint8_t ergeb = i2c.twi_read(0);
     7c8:	60 e0       	ldi	r22, 0x00	; 0
     7ca:	ce 01       	movw	r24, r28
     7cc:	0e 94 41 25 	call	0x4a82	; 0x4a82 <_ZN3I2C8twi_readEh>
     7d0:	18 2f       	mov	r17, r24
		i2c.twi_stop();
     7d2:	ce 01       	movw	r24, r28
     7d4:	0e 94 2d 25 	call	0x4a5a	; 0x4a5a <_ZN3I2C8twi_stopEv>
		return ergeb;
}
     7d8:	81 2f       	mov	r24, r17
     7da:	df 91       	pop	r29
     7dc:	cf 91       	pop	r28
     7de:	1f 91       	pop	r17
     7e0:	08 95       	ret

000007e2 <_ZN6BMP1807readS16Eh>:
	i2c.twi_write((BMP180_ADDR | I2C_READ));
	int8_t ergeb = i2c.twi_read(0);
	i2c.twi_stop();
	return ergeb;
}
int16_t BMP180::readS16(uint8_t reg){
     7e2:	0f 93       	push	r16
     7e4:	1f 93       	push	r17
     7e6:	cf 93       	push	r28
     7e8:	df 93       	push	r29
     7ea:	8c 01       	movw	r16, r24
     7ec:	d6 2f       	mov	r29, r22
	int8_t	hi = readS8(reg);
     7ee:	af df       	rcall	.-162    	; 0x74e <_ZN6BMP1806readS8Eh>
     7f0:	c8 2f       	mov	r28, r24
	uint8_t	lo = readU8(reg+1);
     7f2:	61 e0       	ldi	r22, 0x01	; 1
     7f4:	6d 0f       	add	r22, r29
     7f6:	c8 01       	movw	r24, r16
     7f8:	cf df       	rcall	.-98     	; 0x798 <_ZN6BMP1806readU8Eh>
	return ( hi << 8) + lo;
     7fa:	2c 2f       	mov	r18, r28
     7fc:	cc 0f       	add	r28, r28
     7fe:	33 0b       	sbc	r19, r19
     800:	32 2f       	mov	r19, r18
     802:	22 27       	eor	r18, r18
}
     804:	a9 01       	movw	r20, r18
     806:	48 0f       	add	r20, r24
     808:	51 1d       	adc	r21, r1
     80a:	ca 01       	movw	r24, r20
     80c:	df 91       	pop	r29
     80e:	cf 91       	pop	r28
     810:	1f 91       	pop	r17
     812:	0f 91       	pop	r16
     814:	08 95       	ret

00000816 <_ZN6BMP1807readU16Eh>:
		i2c.twi_write((BMP180_ADDR | I2C_READ));
		uint8_t ergeb = i2c.twi_read(0);
		i2c.twi_stop();
		return ergeb;
}
uint16_t BMP180::readU16(uint8_t reg){
     816:	0f 93       	push	r16
     818:	1f 93       	push	r17
     81a:	cf 93       	push	r28
     81c:	df 93       	push	r29
     81e:	8c 01       	movw	r16, r24
     820:	d6 2f       	mov	r29, r22
	uint8_t	hi = readU8(reg);
     822:	ba df       	rcall	.-140    	; 0x798 <_ZN6BMP1806readU8Eh>
     824:	c8 2f       	mov	r28, r24
	uint8_t	lo = readU8(reg+1);
     826:	61 e0       	ldi	r22, 0x01	; 1
     828:	6d 0f       	add	r22, r29
     82a:	c8 01       	movw	r24, r16
     82c:	b5 df       	rcall	.-150    	; 0x798 <_ZN6BMP1806readU8Eh>
	return (hi << 8) + lo;
     82e:	2c 2f       	mov	r18, r28
     830:	30 e0       	ldi	r19, 0x00	; 0
     832:	32 2f       	mov	r19, r18
     834:	22 27       	eor	r18, r18
}
     836:	a9 01       	movw	r20, r18
     838:	48 0f       	add	r20, r24
     83a:	51 1d       	adc	r21, r1
     83c:	ca 01       	movw	r24, r20
     83e:	df 91       	pop	r29
     840:	cf 91       	pop	r28
     842:	1f 91       	pop	r17
     844:	0f 91       	pop	r16
     846:	08 95       	ret

00000848 <_ZN6BMP1807readU32Eh>:
uint32_t BMP180::readU32(uint8_t reg){
     848:	ef 92       	push	r14
     84a:	ff 92       	push	r15
     84c:	0f 93       	push	r16
     84e:	1f 93       	push	r17
     850:	cf 93       	push	r28
     852:	df 93       	push	r29
     854:	7c 01       	movw	r14, r24
     856:	16 2f       	mov	r17, r22
	uint8_t hix	= readS8(reg);
     858:	7a df       	rcall	.-268    	; 0x74e <_ZN6BMP1806readS8Eh>
     85a:	c8 2f       	mov	r28, r24
	uint8_t hi	= readU8(reg+1);
     85c:	61 e0       	ldi	r22, 0x01	; 1
     85e:	61 0f       	add	r22, r17
     860:	c7 01       	movw	r24, r14
     862:	9a df       	rcall	.-204    	; 0x798 <_ZN6BMP1806readU8Eh>
     864:	d8 2f       	mov	r29, r24
	uint8_t lo	= readU8(reg+2);
     866:	62 e0       	ldi	r22, 0x02	; 2
     868:	61 0f       	add	r22, r17
     86a:	c7 01       	movw	r24, r14
     86c:	95 df       	rcall	.-214    	; 0x798 <_ZN6BMP1806readU8Eh>
	return (((int32_t) hix << 16) + ((uint32_t) hi << 8) +(uint32_t) lo);
     86e:	4d 2f       	mov	r20, r29
     870:	50 e0       	ldi	r21, 0x00	; 0
     872:	60 e0       	ldi	r22, 0x00	; 0
     874:	70 e0       	ldi	r23, 0x00	; 0
     876:	76 2f       	mov	r23, r22
     878:	65 2f       	mov	r22, r21
     87a:	54 2f       	mov	r21, r20
     87c:	44 27       	eor	r20, r20
     87e:	48 0f       	add	r20, r24
     880:	51 1d       	adc	r21, r1
     882:	61 1d       	adc	r22, r1
     884:	71 1d       	adc	r23, r1
     886:	8c 2f       	mov	r24, r28
     888:	90 e0       	ldi	r25, 0x00	; 0
     88a:	a0 e0       	ldi	r26, 0x00	; 0
     88c:	b0 e0       	ldi	r27, 0x00	; 0
     88e:	dc 01       	movw	r26, r24
     890:	99 27       	eor	r25, r25
     892:	88 27       	eor	r24, r24
     894:	8a 01       	movw	r16, r20
     896:	9b 01       	movw	r18, r22
     898:	08 0f       	add	r16, r24
     89a:	19 1f       	adc	r17, r25
     89c:	2a 1f       	adc	r18, r26
     89e:	3b 1f       	adc	r19, r27
     8a0:	c9 01       	movw	r24, r18
     8a2:	b8 01       	movw	r22, r16
}
     8a4:	df 91       	pop	r29
     8a6:	cf 91       	pop	r28
     8a8:	1f 91       	pop	r17
     8aa:	0f 91       	pop	r16
     8ac:	ff 90       	pop	r15
     8ae:	ef 90       	pop	r14
     8b0:	08 95       	ret

000008b2 <_ZN6BMP18021bmp180_getcalibrationEv>:

void BMP180::bmp180_getcalibration() {
     8b2:	cf 93       	push	r28
     8b4:	df 93       	push	r29
     8b6:	ec 01       	movw	r28, r24
	bmp180_regac1	= readS16(BMP180_RAC1);
     8b8:	6a ea       	ldi	r22, 0xAA	; 170
     8ba:	93 df       	rcall	.-218    	; 0x7e2 <_ZN6BMP1807readS16Eh>
     8bc:	99 8b       	std	Y+17, r25	; 0x11
     8be:	88 8b       	std	Y+16, r24	; 0x10
	bmp180_regac2	= readS16(BMP180_RAC2);
     8c0:	6c ea       	ldi	r22, 0xAC	; 172
     8c2:	ce 01       	movw	r24, r28
     8c4:	8e df       	rcall	.-228    	; 0x7e2 <_ZN6BMP1807readS16Eh>
     8c6:	9b 8b       	std	Y+19, r25	; 0x13
     8c8:	8a 8b       	std	Y+18, r24	; 0x12
	bmp180_regac3	= readS16(BMP180_RAC3);
     8ca:	6e ea       	ldi	r22, 0xAE	; 174
     8cc:	ce 01       	movw	r24, r28
     8ce:	89 df       	rcall	.-238    	; 0x7e2 <_ZN6BMP1807readS16Eh>
     8d0:	9d 8b       	std	Y+21, r25	; 0x15
     8d2:	8c 8b       	std	Y+20, r24	; 0x14
	bmp180_regac4	= readU16(BMP180_RAC4);
     8d4:	60 eb       	ldi	r22, 0xB0	; 176
     8d6:	ce 01       	movw	r24, r28
     8d8:	9e df       	rcall	.-196    	; 0x816 <_ZN6BMP1807readU16Eh>
     8da:	99 a3       	std	Y+33, r25	; 0x21
     8dc:	88 a3       	std	Y+32, r24	; 0x20
	bmp180_regac5	= readU16(BMP180_RAC5);
     8de:	62 eb       	ldi	r22, 0xB2	; 178
     8e0:	ce 01       	movw	r24, r28
     8e2:	99 df       	rcall	.-206    	; 0x816 <_ZN6BMP1807readU16Eh>
     8e4:	9b a3       	std	Y+35, r25	; 0x23
     8e6:	8a a3       	std	Y+34, r24	; 0x22
	bmp180_regac6	= readU16(BMP180_RAC6);
     8e8:	64 eb       	ldi	r22, 0xB4	; 180
     8ea:	ce 01       	movw	r24, r28
     8ec:	94 df       	rcall	.-216    	; 0x816 <_ZN6BMP1807readU16Eh>
     8ee:	9d a3       	std	Y+37, r25	; 0x25
     8f0:	8c a3       	std	Y+36, r24	; 0x24
	bmp180_regb1	= readS16(BMP180_RB1);
     8f2:	66 eb       	ldi	r22, 0xB6	; 182
     8f4:	ce 01       	movw	r24, r28
     8f6:	75 df       	rcall	.-278    	; 0x7e2 <_ZN6BMP1807readS16Eh>
     8f8:	9f 8b       	std	Y+23, r25	; 0x17
     8fa:	8e 8b       	std	Y+22, r24	; 0x16
	bmp180_regb2	= readS16(BMP180_RB2);
     8fc:	68 eb       	ldi	r22, 0xB8	; 184
     8fe:	ce 01       	movw	r24, r28
     900:	70 df       	rcall	.-288    	; 0x7e2 <_ZN6BMP1807readS16Eh>
     902:	99 8f       	std	Y+25, r25	; 0x19
     904:	88 8f       	std	Y+24, r24	; 0x18
	bmp180_regmb	= readS16(BMP180_RMB);
     906:	6a eb       	ldi	r22, 0xBA	; 186
     908:	ce 01       	movw	r24, r28
     90a:	6b df       	rcall	.-298    	; 0x7e2 <_ZN6BMP1807readS16Eh>
     90c:	9b 8f       	std	Y+27, r25	; 0x1b
     90e:	8a 8f       	std	Y+26, r24	; 0x1a
	bmp180_regmc	= readS16(BMP180_RMC);
     910:	6c eb       	ldi	r22, 0xBC	; 188
     912:	ce 01       	movw	r24, r28
     914:	66 df       	rcall	.-308    	; 0x7e2 <_ZN6BMP1807readS16Eh>
     916:	9d 8f       	std	Y+29, r25	; 0x1d
     918:	8c 8f       	std	Y+28, r24	; 0x1c
	bmp180_regmd	= readS16(BMP180_RMD);
     91a:	6e eb       	ldi	r22, 0xBE	; 190
     91c:	ce 01       	movw	r24, r28
     91e:	61 df       	rcall	.-318    	; 0x7e2 <_ZN6BMP1807readS16Eh>
     920:	9f 8f       	std	Y+31, r25	; 0x1f
     922:	8e 8f       	std	Y+30, r24	; 0x1e
	bmp180_regb2	= 41;
	bmp180_regmb	= -32768;
	bmp180_regmc	= -11786;
	bmp180_regmd	= 2331;
	*/
}
     924:	df 91       	pop	r29
     926:	cf 91       	pop	r28
     928:	08 95       	ret

0000092a <_ZN6BMP180C1Ev>:


#include "BMP180.h"

// default constructor
BMP180::BMP180()
     92a:	cf 93       	push	r28
     92c:	df 93       	push	r29
     92e:	ec 01       	movw	r28, r24
     930:	8e 96       	adiw	r24, 0x2e	; 46
     932:	0e 94 24 25 	call	0x4a48	; 0x4a48 <_ZN3I2CC1Ev>
{
	bmp180_rawtemperature = 0;
     936:	1e a2       	std	Y+38, r1	; 0x26
     938:	1f a2       	std	Y+39, r1	; 0x27
     93a:	18 a6       	std	Y+40, r1	; 0x28
     93c:	19 a6       	std	Y+41, r1	; 0x29
	bmp180_rawpressure = 0;
     93e:	1a a6       	std	Y+42, r1	; 0x2a
     940:	1b a6       	std	Y+43, r1	; 0x2b
     942:	1c a6       	std	Y+44, r1	; 0x2c
     944:	1d a6       	std	Y+45, r1	; 0x2d
	pressure0 = PRESSURE00;
     946:	80 e0       	ldi	r24, 0x00	; 0
     948:	90 e5       	ldi	r25, 0x50	; 80
     94a:	ad e7       	ldi	r26, 0x7D	; 125
     94c:	b4 e4       	ldi	r27, 0x44	; 68
     94e:	8c 83       	std	Y+4, r24	; 0x04
     950:	9d 83       	std	Y+5, r25	; 0x05
     952:	ae 83       	std	Y+6, r26	; 0x06
     954:	bf 83       	std	Y+7, r27	; 0x07
	
	bmp180_getcalibration();
     956:	ce 01       	movw	r24, r28
     958:	ac df       	rcall	.-168    	; 0x8b2 <_ZN6BMP18021bmp180_getcalibrationEv>
	
} //BMP180
     95a:	df 91       	pop	r29
     95c:	cf 91       	pop	r28
     95e:	08 95       	ret

00000960 <_ZN6BMP18021bmp180_gettemperatureEv>:
	altitude  = pow(altitude,1/5.255);
	altitude  = 1-altitude;
	altitude *= 44330;
}

void BMP180::bmp180_gettemperature(){
     960:	2f 92       	push	r2
     962:	3f 92       	push	r3
     964:	4f 92       	push	r4
     966:	5f 92       	push	r5
     968:	6f 92       	push	r6
     96a:	7f 92       	push	r7
     96c:	8f 92       	push	r8
     96e:	9f 92       	push	r9
     970:	af 92       	push	r10
     972:	bf 92       	push	r11
     974:	cf 92       	push	r12
     976:	df 92       	push	r13
     978:	ef 92       	push	r14
     97a:	ff 92       	push	r15
     97c:	0f 93       	push	r16
     97e:	1f 93       	push	r17
     980:	cf 93       	push	r28
     982:	df 93       	push	r29
     984:	cd b7       	in	r28, 0x3d	; 61
     986:	de b7       	in	r29, 0x3e	; 62
     988:	28 97       	sbiw	r28, 0x08	; 8
     98a:	0f b6       	in	r0, 0x3f	; 63
     98c:	f8 94       	cli
     98e:	de bf       	out	0x3e, r29	; 62
     990:	0f be       	out	0x3f, r0	; 63
     992:	cd bf       	out	0x3d, r28	; 61
     994:	2c 01       	movw	r4, r24
	
	int16_t ut;
	int64_t x1,x2;

	//read raw temperature
	bmp180_writemem(BMP180_REGCONTROL, BMP180_REGREADTEMPERATURE);
     996:	4e e2       	ldi	r20, 0x2E	; 46
     998:	64 ef       	ldi	r22, 0xF4	; 244
     99a:	ba de       	rcall	.-652    	; 0x710 <_ZN6BMP18015bmp180_writememEhh>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     99c:	8f e0       	ldi	r24, 0x0F	; 15
     99e:	97 e2       	ldi	r25, 0x27	; 39
     9a0:	01 97       	sbiw	r24, 0x01	; 1
     9a2:	f1 f7       	brne	.-4      	; 0x9a0 <_ZN6BMP18021bmp180_gettemperatureEv+0x40>
     9a4:	00 c0       	rjmp	.+0      	; 0x9a6 <_ZN6BMP18021bmp180_gettemperatureEv+0x46>
     9a6:	00 00       	nop
	_delay_ms(5); // min. 4.5ms read Temp delay
	//bmp180_readmem(BMP180_REGCONTROLOUTPUT, buff, 2);
	ut  = readS16(BMP180_REGCONTROLOUTPUT);
     9a8:	66 ef       	ldi	r22, 0xF6	; 246
     9aa:	c2 01       	movw	r24, r4
     9ac:	1a df       	rcall	.-460    	; 0x7e2 <_ZN6BMP1807readS16Eh>

	//calculate raw temperature
	x1	  = ( ut - bmp180_regac6);
     9ae:	f2 01       	movw	r30, r4
     9b0:	24 a1       	ldd	r18, Z+36	; 0x24
     9b2:	35 a1       	ldd	r19, Z+37	; 0x25
     9b4:	82 1b       	sub	r24, r18
     9b6:	93 0b       	sbc	r25, r19
     9b8:	6c 01       	movw	r12, r24
	x1	 *= bmp180_regac5;
     9ba:	42 a1       	ldd	r20, Z+34	; 0x22
     9bc:	53 a1       	ldd	r21, Z+35	; 0x23
     9be:	ac 2c       	mov	r10, r12
     9c0:	bd 2c       	mov	r11, r13
     9c2:	c1 2c       	mov	r12, r1
     9c4:	d1 2c       	mov	r13, r1
     9c6:	e1 2c       	mov	r14, r1
     9c8:	f1 2c       	mov	r15, r1
     9ca:	00 e0       	ldi	r16, 0x00	; 0
     9cc:	10 e0       	ldi	r17, 0x00	; 0
     9ce:	24 2f       	mov	r18, r20
     9d0:	35 2f       	mov	r19, r21
     9d2:	40 e0       	ldi	r20, 0x00	; 0
     9d4:	50 e0       	ldi	r21, 0x00	; 0
     9d6:	60 e0       	ldi	r22, 0x00	; 0
     9d8:	70 e0       	ldi	r23, 0x00	; 0
     9da:	80 e0       	ldi	r24, 0x00	; 0
     9dc:	90 e0       	ldi	r25, 0x00	; 0
     9de:	0e 94 77 49 	call	0x92ee	; 0x92ee <__muldi3>
	x1	>>= 15;
     9e2:	0f e0       	ldi	r16, 0x0F	; 15
     9e4:	0e 94 b1 4a 	call	0x9562	; 0x9562 <__ashrdi3>
     9e8:	29 83       	std	Y+1, r18	; 0x01
     9ea:	3a 83       	std	Y+2, r19	; 0x02
     9ec:	4b 83       	std	Y+3, r20	; 0x03
     9ee:	5c 83       	std	Y+4, r21	; 0x04
     9f0:	6d 83       	std	Y+5, r22	; 0x05
     9f2:	7e 83       	std	Y+6, r23	; 0x06
     9f4:	8f 83       	std	Y+7, r24	; 0x07
     9f6:	98 87       	std	Y+8, r25	; 0x08
	x2	  = bmp180_regmc;
     9f8:	f2 01       	movw	r30, r4
     9fa:	35 8d       	ldd	r19, Z+29	; 0x1d
     9fc:	24 8d       	ldd	r18, Z+28	; 0x1c
     9fe:	93 2f       	mov	r25, r19
     a00:	99 0f       	add	r25, r25
     a02:	99 0b       	sbc	r25, r25
	x2	<<= 11;
     a04:	49 2f       	mov	r20, r25
     a06:	59 2f       	mov	r21, r25
     a08:	69 2f       	mov	r22, r25
     a0a:	79 2f       	mov	r23, r25
     a0c:	89 2f       	mov	r24, r25
     a0e:	0b e0       	ldi	r16, 0x0B	; 11
     a10:	0e 94 98 4a 	call	0x9530	; 0x9530 <__ashldi3>
     a14:	62 2e       	mov	r6, r18
     a16:	73 2e       	mov	r7, r19
     a18:	84 2e       	mov	r8, r20
     a1a:	95 2e       	mov	r9, r21
     a1c:	b6 2f       	mov	r27, r22
     a1e:	a7 2f       	mov	r26, r23
     a20:	28 2e       	mov	r2, r24
     a22:	39 2e       	mov	r3, r25
	x2	 /= (x1 + bmp180_regmd);
     a24:	37 8d       	ldd	r19, Z+31	; 0x1f
     a26:	26 8d       	ldd	r18, Z+30	; 0x1e
     a28:	93 2f       	mov	r25, r19
     a2a:	99 0f       	add	r25, r25
     a2c:	99 0b       	sbc	r25, r25
     a2e:	49 2f       	mov	r20, r25
     a30:	59 2f       	mov	r21, r25
     a32:	69 2f       	mov	r22, r25
     a34:	79 2f       	mov	r23, r25
     a36:	89 2f       	mov	r24, r25
     a38:	a9 80       	ldd	r10, Y+1	; 0x01
     a3a:	ba 80       	ldd	r11, Y+2	; 0x02
     a3c:	cb 80       	ldd	r12, Y+3	; 0x03
     a3e:	dc 80       	ldd	r13, Y+4	; 0x04
     a40:	ed 80       	ldd	r14, Y+5	; 0x05
     a42:	fe 80       	ldd	r15, Y+6	; 0x06
     a44:	0f 81       	ldd	r16, Y+7	; 0x07
     a46:	18 85       	ldd	r17, Y+8	; 0x08
     a48:	0e 94 cf 4a 	call	0x959e	; 0x959e <__adddi3>
     a4c:	a2 2e       	mov	r10, r18
     a4e:	b3 2e       	mov	r11, r19
     a50:	c4 2e       	mov	r12, r20
     a52:	d5 2e       	mov	r13, r21
     a54:	e6 2e       	mov	r14, r22
     a56:	f7 2e       	mov	r15, r23
     a58:	08 2f       	mov	r16, r24
     a5a:	19 2f       	mov	r17, r25
     a5c:	26 2d       	mov	r18, r6
     a5e:	37 2d       	mov	r19, r7
     a60:	48 2d       	mov	r20, r8
     a62:	59 2d       	mov	r21, r9
     a64:	6b 2f       	mov	r22, r27
     a66:	7a 2f       	mov	r23, r26
     a68:	82 2d       	mov	r24, r2
     a6a:	93 2d       	mov	r25, r3
     a6c:	0e 94 ca 49 	call	0x9394	; 0x9394 <__divdi3>
     a70:	82 2e       	mov	r8, r18
     a72:	93 2e       	mov	r9, r19
     a74:	a4 2e       	mov	r10, r20
     a76:	b5 2e       	mov	r11, r21
	bmp180_rawtemperature = x1 + x2;
     a78:	89 81       	ldd	r24, Y+1	; 0x01
     a7a:	9a 81       	ldd	r25, Y+2	; 0x02
     a7c:	ab 81       	ldd	r26, Y+3	; 0x03
     a7e:	bc 81       	ldd	r27, Y+4	; 0x04
     a80:	88 0d       	add	r24, r8
     a82:	99 1d       	adc	r25, r9
     a84:	aa 1d       	adc	r26, r10
     a86:	bb 1d       	adc	r27, r11
     a88:	f2 01       	movw	r30, r4
     a8a:	86 a3       	std	Z+38, r24	; 0x26
     a8c:	97 a3       	std	Z+39, r25	; 0x27
     a8e:	a0 a7       	std	Z+40, r26	; 0x28
     a90:	b1 a7       	std	Z+41, r27	; 0x29
	
	//bmp180_rawtemperature = 4008;
	temperature	 = (bmp180_rawtemperature+8);
     a92:	bc 01       	movw	r22, r24
     a94:	cd 01       	movw	r24, r26
     a96:	68 5f       	subi	r22, 0xF8	; 248
     a98:	7f 4f       	sbci	r23, 0xFF	; 255
     a9a:	8f 4f       	sbci	r24, 0xFF	; 255
     a9c:	9f 4f       	sbci	r25, 0xFF	; 255
     a9e:	0e 94 cf 42 	call	0x859e	; 0x859e <__floatsisf>
	temperature	/= 16.0;
     aa2:	20 e0       	ldi	r18, 0x00	; 0
     aa4:	30 e0       	ldi	r19, 0x00	; 0
     aa6:	40 e8       	ldi	r20, 0x80	; 128
     aa8:	5d e3       	ldi	r21, 0x3D	; 61
     aaa:	0e 94 f8 43 	call	0x87f0	; 0x87f0 <__mulsf3>
	temperature	/= 10.0;
     aae:	20 e0       	ldi	r18, 0x00	; 0
     ab0:	30 e0       	ldi	r19, 0x00	; 0
     ab2:	40 e2       	ldi	r20, 0x20	; 32
     ab4:	51 e4       	ldi	r21, 0x41	; 65
     ab6:	0e 94 fa 41 	call	0x83f4	; 0x83f4 <__divsf3>
     aba:	f2 01       	movw	r30, r4
     abc:	60 87       	std	Z+8, r22	; 0x08
     abe:	71 87       	std	Z+9, r23	; 0x09
     ac0:	82 87       	std	Z+10, r24	; 0x0a
     ac2:	93 87       	std	Z+11, r25	; 0x0b
	
}
     ac4:	28 96       	adiw	r28, 0x08	; 8
     ac6:	0f b6       	in	r0, 0x3f	; 63
     ac8:	f8 94       	cli
     aca:	de bf       	out	0x3e, r29	; 62
     acc:	0f be       	out	0x3f, r0	; 63
     ace:	cd bf       	out	0x3d, r28	; 61
     ad0:	df 91       	pop	r29
     ad2:	cf 91       	pop	r28
     ad4:	1f 91       	pop	r17
     ad6:	0f 91       	pop	r16
     ad8:	ff 90       	pop	r15
     ada:	ef 90       	pop	r14
     adc:	df 90       	pop	r13
     ade:	cf 90       	pop	r12
     ae0:	bf 90       	pop	r11
     ae2:	af 90       	pop	r10
     ae4:	9f 90       	pop	r9
     ae6:	8f 90       	pop	r8
     ae8:	7f 90       	pop	r7
     aea:	6f 90       	pop	r6
     aec:	5f 90       	pop	r5
     aee:	4f 90       	pop	r4
     af0:	3f 90       	pop	r3
     af2:	2f 90       	pop	r2
     af4:	08 95       	ret

00000af6 <_ZN6BMP18018bmp180_getpressureEv>:
	bmp180_regmc	= -11786;
	bmp180_regmd	= 2331;
	*/
}

void BMP180::bmp180_getpressure(){
     af6:	2f 92       	push	r2
     af8:	3f 92       	push	r3
     afa:	4f 92       	push	r4
     afc:	5f 92       	push	r5
     afe:	6f 92       	push	r6
     b00:	7f 92       	push	r7
     b02:	8f 92       	push	r8
     b04:	9f 92       	push	r9
     b06:	af 92       	push	r10
     b08:	bf 92       	push	r11
     b0a:	cf 92       	push	r12
     b0c:	df 92       	push	r13
     b0e:	ef 92       	push	r14
     b10:	ff 92       	push	r15
     b12:	0f 93       	push	r16
     b14:	1f 93       	push	r17
     b16:	cf 93       	push	r28
     b18:	df 93       	push	r29
     b1a:	cd b7       	in	r28, 0x3d	; 61
     b1c:	de b7       	in	r29, 0x3e	; 62
     b1e:	a2 97       	sbiw	r28, 0x22	; 34
     b20:	0f b6       	in	r0, 0x3f	; 63
     b22:	f8 94       	cli
     b24:	de bf       	out	0x3e, r29	; 62
     b26:	0f be       	out	0x3f, r0	; 63
     b28:	cd bf       	out	0x3d, r28	; 61
     b2a:	1c 01       	movw	r2, r24
	int64_t up;
	int64_t x1,x2,x3,b3,b6,p;
	uint64_t b4,b7;

	bmp180_gettemperature();
     b2c:	19 df       	rcall	.-462    	; 0x960 <_ZN6BMP18021bmp180_gettemperatureEv>

	//read raw pressure
	bmp180_writemem(BMP180_REGCONTROL, BMP180_REGREADPRESSURE+(BMP180_MODE << 6));
     b2e:	44 ef       	ldi	r20, 0xF4	; 244
     b30:	64 ef       	ldi	r22, 0xF4	; 244
     b32:	c1 01       	movw	r24, r2
     b34:	ed dd       	rcall	.-1062   	; 0x710 <_ZN6BMP18015bmp180_writememEhh>
     b36:	8f e1       	ldi	r24, 0x1F	; 31
     b38:	9b ec       	ldi	r25, 0xCB	; 203
     b3a:	01 97       	sbiw	r24, 0x01	; 1
     b3c:	f1 f7       	brne	.-4      	; 0xb3a <_ZN6BMP18018bmp180_getpressureEv+0x44>
     b3e:	00 c0       	rjmp	.+0      	; 0xb40 <_ZN6BMP18018bmp180_getpressureEv+0x4a>
     b40:	00 00       	nop
	_delay_ms(2 + (3<<BMP180_MODE));
	
	up   = readU32(BMP180_REGCONTROLOUTPUT);
     b42:	66 ef       	ldi	r22, 0xF6	; 246
     b44:	c1 01       	movw	r24, r2
     b46:	80 de       	rcall	.-768    	; 0x848 <_ZN6BMP1807readU32Eh>
     b48:	5b 01       	movw	r10, r22
     b4a:	6c 01       	movw	r12, r24
     b4c:	e1 2c       	mov	r14, r1
     b4e:	f1 2c       	mov	r15, r1
     b50:	87 01       	movw	r16, r14
     b52:	6c 87       	std	Y+12, r22	; 0x0c
     b54:	bd 86       	std	Y+13, r11	; 0x0d
     b56:	ce 86       	std	Y+14, r12	; 0x0e
     b58:	df 86       	std	Y+15, r13	; 0x0f
     b5a:	e8 8a       	std	Y+16, r14	; 0x10
     b5c:	f9 8a       	std	Y+17, r15	; 0x11
     b5e:	0a 8b       	std	Y+18, r16	; 0x12
     b60:	1b 8b       	std	Y+19, r17	; 0x13
	up >>= (8-BMP180_MODE);

	//calculate raw pressure
	b6   = bmp180_rawtemperature - 4000;
     b62:	f1 01       	movw	r30, r2
     b64:	86 a1       	ldd	r24, Z+38	; 0x26
     b66:	97 a1       	ldd	r25, Z+39	; 0x27
     b68:	a0 a5       	ldd	r26, Z+40	; 0x28
     b6a:	b1 a5       	ldd	r27, Z+41	; 0x29
     b6c:	2c 01       	movw	r4, r24
     b6e:	3d 01       	movw	r6, r26
     b70:	f0 ea       	ldi	r31, 0xA0	; 160
     b72:	4f 1a       	sub	r4, r31
     b74:	ff e0       	ldi	r31, 0x0F	; 15
     b76:	5f 0a       	sbc	r5, r31
     b78:	61 08       	sbc	r6, r1
     b7a:	71 08       	sbc	r7, r1
     b7c:	63 01       	movw	r12, r6
     b7e:	52 01       	movw	r10, r4
     b80:	dd 0c       	add	r13, r13
     b82:	aa 08       	sbc	r10, r10
     b84:	ba 2c       	mov	r11, r10
     b86:	65 01       	movw	r12, r10
     b88:	a9 82       	std	Y+1, r10	; 0x01
     b8a:	ba 82       	std	Y+2, r11	; 0x02
     b8c:	cb 82       	std	Y+3, r12	; 0x03
     b8e:	dc 82       	std	Y+4, r13	; 0x04
	x1   = b6*b6;
     b90:	a4 2c       	mov	r10, r4
     b92:	b5 2c       	mov	r11, r5
     b94:	c6 2c       	mov	r12, r6
     b96:	d7 2c       	mov	r13, r7
     b98:	e9 80       	ldd	r14, Y+1	; 0x01
     b9a:	fe 2c       	mov	r15, r14
     b9c:	0e 2d       	mov	r16, r14
     b9e:	1e 2d       	mov	r17, r14
     ba0:	24 2d       	mov	r18, r4
     ba2:	35 2d       	mov	r19, r5
     ba4:	46 2d       	mov	r20, r6
     ba6:	57 2d       	mov	r21, r7
     ba8:	60 2f       	mov	r22, r16
     baa:	70 2f       	mov	r23, r16
     bac:	80 2f       	mov	r24, r16
     bae:	9e 2d       	mov	r25, r14
     bb0:	0e 94 77 49 	call	0x92ee	; 0x92ee <__muldi3>
	x1 >>= 12;
     bb4:	0c e0       	ldi	r16, 0x0C	; 12
     bb6:	0e 94 b1 4a 	call	0x9562	; 0x9562 <__ashrdi3>
     bba:	2c 8b       	std	Y+20, r18	; 0x14
     bbc:	3d 8b       	std	Y+21, r19	; 0x15
     bbe:	4e 8b       	std	Y+22, r20	; 0x16
     bc0:	5f 8b       	std	Y+23, r21	; 0x17
     bc2:	6a 8f       	std	Y+26, r22	; 0x1a
     bc4:	7b 8f       	std	Y+27, r23	; 0x1b
     bc6:	8c 8f       	std	Y+28, r24	; 0x1c
     bc8:	9d 8f       	std	Y+29, r25	; 0x1d
	x1  *= bmp180_regb2;
     bca:	d1 01       	movw	r26, r2
     bcc:	59 96       	adiw	r26, 0x19	; 25
     bce:	3c 91       	ld	r19, X
     bd0:	59 97       	sbiw	r26, 0x19	; 25
     bd2:	58 96       	adiw	r26, 0x18	; 24
     bd4:	2c 91       	ld	r18, X
     bd6:	93 2f       	mov	r25, r19
     bd8:	99 0f       	add	r25, r25
     bda:	99 0b       	sbc	r25, r25
     bdc:	ac 88       	ldd	r10, Y+20	; 0x14
     bde:	bd 88       	ldd	r11, Y+21	; 0x15
     be0:	c4 2e       	mov	r12, r20
     be2:	d5 2e       	mov	r13, r21
     be4:	e6 2e       	mov	r14, r22
     be6:	f7 2e       	mov	r15, r23
     be8:	08 2f       	mov	r16, r24
     bea:	1d 8d       	ldd	r17, Y+29	; 0x1d
     bec:	49 2f       	mov	r20, r25
     bee:	59 2f       	mov	r21, r25
     bf0:	69 2f       	mov	r22, r25
     bf2:	79 2f       	mov	r23, r25
     bf4:	89 2f       	mov	r24, r25
     bf6:	0e 94 77 49 	call	0x92ee	; 0x92ee <__muldi3>
     bfa:	29 87       	std	Y+9, r18	; 0x09
     bfc:	3a 87       	std	Y+10, r19	; 0x0a
     bfe:	4b 87       	std	Y+11, r20	; 0x0b
     c00:	58 8f       	std	Y+24, r21	; 0x18
     c02:	86 2e       	mov	r8, r22
     c04:	97 2e       	mov	r9, r23
     c06:	8f 8f       	std	Y+31, r24	; 0x1f
     c08:	9e 8f       	std	Y+30, r25	; 0x1e
	x1 >>= 11;
	x2   = bmp180_regac2 * b6;
     c0a:	f1 01       	movw	r30, r2
     c0c:	33 89       	ldd	r19, Z+19	; 0x13
     c0e:	22 89       	ldd	r18, Z+18	; 0x12
     c10:	93 2f       	mov	r25, r19
     c12:	99 0f       	add	r25, r25
     c14:	99 0b       	sbc	r25, r25
     c16:	a4 2c       	mov	r10, r4
     c18:	b5 2c       	mov	r11, r5
     c1a:	c6 2c       	mov	r12, r6
     c1c:	d7 2c       	mov	r13, r7
     c1e:	e9 80       	ldd	r14, Y+1	; 0x01
     c20:	fe 2c       	mov	r15, r14
     c22:	0e 2d       	mov	r16, r14
     c24:	1e 2d       	mov	r17, r14
     c26:	49 2f       	mov	r20, r25
     c28:	59 2f       	mov	r21, r25
     c2a:	69 2f       	mov	r22, r25
     c2c:	79 2f       	mov	r23, r25
     c2e:	89 2f       	mov	r24, r25
     c30:	0e 94 77 49 	call	0x92ee	; 0x92ee <__muldi3>
     c34:	a2 2e       	mov	r10, r18
     c36:	b3 2e       	mov	r11, r19
     c38:	c4 2e       	mov	r12, r20
     c3a:	d5 2e       	mov	r13, r21
     c3c:	e6 2e       	mov	r14, r22
     c3e:	f7 2e       	mov	r15, r23
     c40:	18 2f       	mov	r17, r24
     c42:	a9 2f       	mov	r26, r25
	x2 >>= 11;
	x3   = x1 + x2;
	b3   = bmp180_regac1 * 4 +x3;
     c44:	f1 01       	movw	r30, r2
     c46:	80 89       	ldd	r24, Z+16	; 0x10
     c48:	91 89       	ldd	r25, Z+17	; 0x11
     c4a:	fc 01       	movw	r30, r24
     c4c:	ee 0f       	add	r30, r30
     c4e:	ff 1f       	adc	r31, r31
     c50:	ee 0f       	add	r30, r30
     c52:	ff 1f       	adc	r31, r31
     c54:	fa a3       	std	Y+34, r31	; 0x22
     c56:	e9 a3       	std	Y+33, r30	; 0x21
     c58:	ef 2f       	mov	r30, r31
     c5a:	ee 0f       	add	r30, r30
     c5c:	ee 0b       	sbc	r30, r30
	//calculate raw pressure
	b6   = bmp180_rawtemperature - 4000;
	x1   = b6*b6;
	x1 >>= 12;
	x1  *= bmp180_regb2;
	x1 >>= 11;
     c5e:	29 85       	ldd	r18, Y+9	; 0x09
     c60:	3a 85       	ldd	r19, Y+10	; 0x0a
     c62:	4b 85       	ldd	r20, Y+11	; 0x0b
     c64:	58 8d       	ldd	r21, Y+24	; 0x18
     c66:	68 2d       	mov	r22, r8
     c68:	79 2d       	mov	r23, r9
     c6a:	8f 8d       	ldd	r24, Y+31	; 0x1f
     c6c:	9e 8d       	ldd	r25, Y+30	; 0x1e
     c6e:	0b e0       	ldi	r16, 0x0B	; 11
     c70:	0e 94 b1 4a 	call	0x9562	; 0x9562 <__ashrdi3>
     c74:	b2 2f       	mov	r27, r18
     c76:	3a 87       	std	Y+10, r19	; 0x0a
     c78:	84 2e       	mov	r8, r20
     c7a:	95 2e       	mov	r9, r21
     c7c:	6e 8f       	std	Y+30, r22	; 0x1e
     c7e:	78 8f       	std	Y+24, r23	; 0x18
     c80:	8b 87       	std	Y+11, r24	; 0x0b
     c82:	f9 2f       	mov	r31, r25
	x2   = bmp180_regac2 * b6;
	x2 >>= 11;
     c84:	2a 2d       	mov	r18, r10
     c86:	3b 2d       	mov	r19, r11
     c88:	4c 2d       	mov	r20, r12
     c8a:	5d 2d       	mov	r21, r13
     c8c:	6e 2d       	mov	r22, r14
     c8e:	7f 2d       	mov	r23, r15
     c90:	81 2f       	mov	r24, r17
     c92:	9a 2f       	mov	r25, r26
     c94:	0e 94 b1 4a 	call	0x9562	; 0x9562 <__ashrdi3>
     c98:	a2 2e       	mov	r10, r18
     c9a:	b3 2e       	mov	r11, r19
     c9c:	c4 2e       	mov	r12, r20
     c9e:	d5 2e       	mov	r13, r21
     ca0:	e6 2e       	mov	r14, r22
     ca2:	f7 2e       	mov	r15, r23
     ca4:	08 2f       	mov	r16, r24
     ca6:	19 2f       	mov	r17, r25
	x3   = x1 + x2;
     ca8:	2b 2f       	mov	r18, r27
     caa:	3a 85       	ldd	r19, Y+10	; 0x0a
     cac:	48 2d       	mov	r20, r8
     cae:	59 2d       	mov	r21, r9
     cb0:	6e 8d       	ldd	r22, Y+30	; 0x1e
     cb2:	78 8d       	ldd	r23, Y+24	; 0x18
     cb4:	8b 85       	ldd	r24, Y+11	; 0x0b
     cb6:	9f 2f       	mov	r25, r31
     cb8:	0e 94 cf 4a 	call	0x959e	; 0x959e <__adddi3>
     cbc:	a2 2e       	mov	r10, r18
     cbe:	b3 2e       	mov	r11, r19
     cc0:	c4 2e       	mov	r12, r20
     cc2:	d5 2e       	mov	r13, r21
     cc4:	e6 2e       	mov	r14, r22
     cc6:	f7 2e       	mov	r15, r23
     cc8:	08 2f       	mov	r16, r24
     cca:	19 2f       	mov	r17, r25
	b3   = bmp180_regac1 * 4 +x3;
     ccc:	29 a1       	ldd	r18, Y+33	; 0x21
     cce:	3a a1       	ldd	r19, Y+34	; 0x22
     cd0:	4e 2f       	mov	r20, r30
     cd2:	5e 2f       	mov	r21, r30
     cd4:	6e 2f       	mov	r22, r30
     cd6:	7e 2f       	mov	r23, r30
     cd8:	8e 2f       	mov	r24, r30
     cda:	9e 2f       	mov	r25, r30
     cdc:	0e 94 cf 4a 	call	0x959e	; 0x959e <__adddi3>
	b3 <<= BMP180_MODE;
     ce0:	03 e0       	ldi	r16, 0x03	; 3
     ce2:	0e 94 98 4a 	call	0x9530	; 0x9530 <__ashldi3>
	b3  += 2;
     ce6:	a2 e0       	ldi	r26, 0x02	; 2
     ce8:	0e 94 d8 4a 	call	0x95b0	; 0x95b0 <__adddi3_s8>
     cec:	29 87       	std	Y+9, r18	; 0x09
     cee:	3a 87       	std	Y+10, r19	; 0x0a
     cf0:	4b 87       	std	Y+11, r20	; 0x0b
     cf2:	58 8f       	std	Y+24, r21	; 0x18
     cf4:	69 8f       	std	Y+25, r22	; 0x19
     cf6:	7e 8f       	std	Y+30, r23	; 0x1e
     cf8:	8f 8f       	std	Y+31, r24	; 0x1f
     cfa:	98 a3       	std	Y+32, r25	; 0x20
	b3  >>= 2;
	x1   = bmp180_regac3 * b6;
     cfc:	d1 01       	movw	r26, r2
     cfe:	55 96       	adiw	r26, 0x15	; 21
     d00:	3c 91       	ld	r19, X
     d02:	55 97       	sbiw	r26, 0x15	; 21
     d04:	54 96       	adiw	r26, 0x14	; 20
     d06:	2c 91       	ld	r18, X
     d08:	93 2f       	mov	r25, r19
     d0a:	99 0f       	add	r25, r25
     d0c:	99 0b       	sbc	r25, r25
     d0e:	a4 2c       	mov	r10, r4
     d10:	b5 2c       	mov	r11, r5
     d12:	c6 2c       	mov	r12, r6
     d14:	d7 2c       	mov	r13, r7
     d16:	e9 80       	ldd	r14, Y+1	; 0x01
     d18:	fe 2c       	mov	r15, r14
     d1a:	0e 2d       	mov	r16, r14
     d1c:	1e 2d       	mov	r17, r14
     d1e:	49 2f       	mov	r20, r25
     d20:	59 2f       	mov	r21, r25
     d22:	69 2f       	mov	r22, r25
     d24:	79 2f       	mov	r23, r25
     d26:	89 2f       	mov	r24, r25
     d28:	0e 94 77 49 	call	0x92ee	; 0x92ee <__muldi3>
     d2c:	72 2e       	mov	r7, r18
     d2e:	43 2e       	mov	r4, r19
     d30:	54 2e       	mov	r5, r20
     d32:	65 2e       	mov	r6, r21
     d34:	86 2e       	mov	r8, r22
     d36:	97 2e       	mov	r9, r23
     d38:	89 a3       	std	Y+33, r24	; 0x21
     d3a:	99 83       	std	Y+1, r25	; 0x01
	x1 >>= 13;
	x2   = b6*b6;
	x2 >>= 12;
	x2  *= bmp180_regb1;
     d3c:	f1 01       	movw	r30, r2
     d3e:	b7 88       	ldd	r11, Z+23	; 0x17
     d40:	a6 88       	ldd	r10, Z+22	; 0x16
     d42:	1b 2d       	mov	r17, r11
     d44:	11 0f       	add	r17, r17
     d46:	11 0b       	sbc	r17, r17
     d48:	c1 2e       	mov	r12, r17
     d4a:	d1 2e       	mov	r13, r17
     d4c:	e1 2e       	mov	r14, r17
     d4e:	f1 2e       	mov	r15, r17
     d50:	01 2f       	mov	r16, r17
     d52:	2c 89       	ldd	r18, Y+20	; 0x14
     d54:	3d 89       	ldd	r19, Y+21	; 0x15
     d56:	4e 89       	ldd	r20, Y+22	; 0x16
     d58:	5f 89       	ldd	r21, Y+23	; 0x17
     d5a:	6a 8d       	ldd	r22, Y+26	; 0x1a
     d5c:	7b 8d       	ldd	r23, Y+27	; 0x1b
     d5e:	8c 8d       	ldd	r24, Y+28	; 0x1c
     d60:	9d 8d       	ldd	r25, Y+29	; 0x1d
     d62:	0e 94 77 49 	call	0x92ee	; 0x92ee <__muldi3>
     d66:	a2 2e       	mov	r10, r18
     d68:	b3 2e       	mov	r11, r19
     d6a:	c4 2e       	mov	r12, r20
     d6c:	d5 2e       	mov	r13, r21
     d6e:	e6 2e       	mov	r14, r22
     d70:	f7 2e       	mov	r15, r23
     d72:	18 2f       	mov	r17, r24
     d74:	b9 2f       	mov	r27, r25
	b3   = bmp180_regac1 * 4 +x3;
	b3 <<= BMP180_MODE;
	b3  += 2;
	b3  >>= 2;
	x1   = bmp180_regac3 * b6;
	x1 >>= 13;
     d76:	27 2d       	mov	r18, r7
     d78:	34 2d       	mov	r19, r4
     d7a:	45 2d       	mov	r20, r5
     d7c:	56 2d       	mov	r21, r6
     d7e:	68 2d       	mov	r22, r8
     d80:	79 2d       	mov	r23, r9
     d82:	89 a1       	ldd	r24, Y+33	; 0x21
     d84:	99 81       	ldd	r25, Y+1	; 0x01
     d86:	0d e0       	ldi	r16, 0x0D	; 13
     d88:	0e 94 b1 4a 	call	0x9562	; 0x9562 <__ashrdi3>
     d8c:	62 2e       	mov	r6, r18
     d8e:	83 2e       	mov	r8, r19
     d90:	94 2e       	mov	r9, r20
     d92:	55 2e       	mov	r5, r21
     d94:	76 2e       	mov	r7, r22
     d96:	a7 2f       	mov	r26, r23
     d98:	f8 2f       	mov	r31, r24
     d9a:	e9 2f       	mov	r30, r25
	x2   = b6*b6;
	x2 >>= 12;
	x2  *= bmp180_regb1;
	x2 >>= 16;
     d9c:	2a 2d       	mov	r18, r10
     d9e:	3b 2d       	mov	r19, r11
     da0:	4c 2d       	mov	r20, r12
     da2:	5d 2d       	mov	r21, r13
     da4:	6e 2d       	mov	r22, r14
     da6:	7f 2d       	mov	r23, r15
     da8:	81 2f       	mov	r24, r17
     daa:	9b 2f       	mov	r25, r27
     dac:	00 e1       	ldi	r16, 0x10	; 16
     dae:	0e 94 b1 4a 	call	0x9562	; 0x9562 <__ashrdi3>
     db2:	a2 2e       	mov	r10, r18
     db4:	b3 2e       	mov	r11, r19
     db6:	c4 2e       	mov	r12, r20
     db8:	d5 2e       	mov	r13, r21
     dba:	e6 2e       	mov	r14, r22
     dbc:	f7 2e       	mov	r15, r23
     dbe:	08 2f       	mov	r16, r24
     dc0:	19 2f       	mov	r17, r25
	x3   = x1 + x2;
     dc2:	26 2d       	mov	r18, r6
     dc4:	38 2d       	mov	r19, r8
     dc6:	49 2d       	mov	r20, r9
     dc8:	55 2d       	mov	r21, r5
     dca:	67 2d       	mov	r22, r7
     dcc:	7a 2f       	mov	r23, r26
     dce:	8f 2f       	mov	r24, r31
     dd0:	9e 2f       	mov	r25, r30
     dd2:	0e 94 cf 4a 	call	0x959e	; 0x959e <__adddi3>
	x3  += 2;
     dd6:	a2 e0       	ldi	r26, 0x02	; 2
     dd8:	0e 94 d8 4a 	call	0x95b0	; 0x95b0 <__adddi3_s8>
	x3 >>= 2;
     ddc:	02 e0       	ldi	r16, 0x02	; 2
     dde:	0e 94 b1 4a 	call	0x9562	; 0x9562 <__ashrdi3>
	b4   = (uint64_t)(x3+32768);
     de2:	30 58       	subi	r19, 0x80	; 128
     de4:	4f 4f       	sbci	r20, 0xFF	; 255
     de6:	5f 4f       	sbci	r21, 0xFF	; 255
     de8:	6f 4f       	sbci	r22, 0xFF	; 255
     dea:	7f 4f       	sbci	r23, 0xFF	; 255
     dec:	8f 4f       	sbci	r24, 0xFF	; 255
     dee:	9f 4f       	sbci	r25, 0xFF	; 255
	b4  *= bmp180_regac4;
     df0:	d1 01       	movw	r26, r2
     df2:	90 96       	adiw	r26, 0x20	; 32
     df4:	ed 91       	ld	r30, X+
     df6:	fc 91       	ld	r31, X
     df8:	91 97       	sbiw	r26, 0x21	; 33
     dfa:	5f 01       	movw	r10, r30
     dfc:	c1 2c       	mov	r12, r1
     dfe:	d1 2c       	mov	r13, r1
     e00:	e1 2c       	mov	r14, r1
     e02:	f1 2c       	mov	r15, r1
     e04:	87 01       	movw	r16, r14
     e06:	e9 83       	std	Y+1, r30	; 0x01
     e08:	ba 82       	std	Y+2, r11	; 0x02
     e0a:	cb 82       	std	Y+3, r12	; 0x03
     e0c:	dc 82       	std	Y+4, r13	; 0x04
     e0e:	ed 82       	std	Y+5, r14	; 0x05
     e10:	fe 82       	std	Y+6, r15	; 0x06
     e12:	0f 83       	std	Y+7, r16	; 0x07
     e14:	18 87       	std	Y+8, r17	; 0x08
     e16:	c1 2c       	mov	r12, r1
     e18:	d1 2c       	mov	r13, r1
     e1a:	e1 2c       	mov	r14, r1
     e1c:	f1 2c       	mov	r15, r1
     e1e:	00 e0       	ldi	r16, 0x00	; 0
     e20:	10 e0       	ldi	r17, 0x00	; 0
     e22:	0e 94 77 49 	call	0x92ee	; 0x92ee <__muldi3>
	b4 >>= 15;
     e26:	0f e0       	ldi	r16, 0x0F	; 15
     e28:	0e 94 b3 4a 	call	0x9566	; 0x9566 <__lshrdi3>
     e2c:	62 2e       	mov	r6, r18
     e2e:	53 2e       	mov	r5, r19
     e30:	44 2e       	mov	r4, r20
     e32:	59 83       	std	Y+1, r21	; 0x01
     e34:	6c 8b       	std	Y+20, r22	; 0x14
     e36:	7d 8b       	std	Y+21, r23	; 0x15
     e38:	8e 8b       	std	Y+22, r24	; 0x16
     e3a:	9f 8b       	std	Y+23, r25	; 0x17
	//read raw pressure
	bmp180_writemem(BMP180_REGCONTROL, BMP180_REGREADPRESSURE+(BMP180_MODE << 6));
	_delay_ms(2 + (3<<BMP180_MODE));
	
	up   = readU32(BMP180_REGCONTROLOUTPUT);
	up >>= (8-BMP180_MODE);
     e3c:	2c 85       	ldd	r18, Y+12	; 0x0c
     e3e:	3d 85       	ldd	r19, Y+13	; 0x0d
     e40:	4e 85       	ldd	r20, Y+14	; 0x0e
     e42:	5f 85       	ldd	r21, Y+15	; 0x0f
     e44:	60 e0       	ldi	r22, 0x00	; 0
     e46:	70 e0       	ldi	r23, 0x00	; 0
     e48:	80 e0       	ldi	r24, 0x00	; 0
     e4a:	90 e0       	ldi	r25, 0x00	; 0
     e4c:	05 e0       	ldi	r16, 0x05	; 5
     e4e:	0e 94 b1 4a 	call	0x9562	; 0x9562 <__ashrdi3>
     e52:	82 2e       	mov	r8, r18
     e54:	93 2e       	mov	r9, r19
     e56:	e4 2f       	mov	r30, r20
     e58:	75 2e       	mov	r7, r21
     e5a:	b6 2f       	mov	r27, r22
     e5c:	a7 2f       	mov	r26, r23
     e5e:	8c 87       	std	Y+12, r24	; 0x0c
     e60:	f9 2f       	mov	r31, r25
	x2 >>= 11;
	x3   = x1 + x2;
	b3   = bmp180_regac1 * 4 +x3;
	b3 <<= BMP180_MODE;
	b3  += 2;
	b3  >>= 2;
     e62:	29 85       	ldd	r18, Y+9	; 0x09
     e64:	3a 85       	ldd	r19, Y+10	; 0x0a
     e66:	4b 85       	ldd	r20, Y+11	; 0x0b
     e68:	58 8d       	ldd	r21, Y+24	; 0x18
     e6a:	69 8d       	ldd	r22, Y+25	; 0x19
     e6c:	7e 8d       	ldd	r23, Y+30	; 0x1e
     e6e:	8f 8d       	ldd	r24, Y+31	; 0x1f
     e70:	98 a1       	ldd	r25, Y+32	; 0x20
     e72:	02 e0       	ldi	r16, 0x02	; 2
     e74:	0e 94 b1 4a 	call	0x9562	; 0x9562 <__ashrdi3>
     e78:	a2 2e       	mov	r10, r18
     e7a:	b3 2e       	mov	r11, r19
     e7c:	c4 2e       	mov	r12, r20
     e7e:	d5 2e       	mov	r13, r21
     e80:	e6 2e       	mov	r14, r22
     e82:	f7 2e       	mov	r15, r23
     e84:	08 2f       	mov	r16, r24
     e86:	19 2f       	mov	r17, r25
	x3  += 2;
	x3 >>= 2;
	b4   = (uint64_t)(x3+32768);
	b4  *= bmp180_regac4;
	b4 >>= 15;
	b7   = ((uint64_t)up - b3);
     e88:	28 2d       	mov	r18, r8
     e8a:	39 2d       	mov	r19, r9
     e8c:	4e 2f       	mov	r20, r30
     e8e:	57 2d       	mov	r21, r7
     e90:	6b 2f       	mov	r22, r27
     e92:	7a 2f       	mov	r23, r26
     e94:	8c 85       	ldd	r24, Y+12	; 0x0c
     e96:	9f 2f       	mov	r25, r31
     e98:	0e 94 e4 4a 	call	0x95c8	; 0x95c8 <__subdi3>
     e9c:	82 2e       	mov	r8, r18
     e9e:	93 2e       	mov	r9, r19
     ea0:	4a 87       	std	Y+10, r20	; 0x0a
     ea2:	59 87       	std	Y+9, r21	; 0x09
     ea4:	b6 2f       	mov	r27, r22
     ea6:	a7 2f       	mov	r26, r23
     ea8:	f8 2f       	mov	r31, r24
     eaa:	e9 2f       	mov	r30, r25
	b7  *= (50000 >> BMP180_MODE);
     eac:	03 e0       	ldi	r16, 0x03	; 3
     eae:	0e 94 98 4a 	call	0x9530	; 0x9530 <__ashldi3>
     eb2:	a8 2c       	mov	r10, r8
     eb4:	b9 2c       	mov	r11, r9
     eb6:	ca 84       	ldd	r12, Y+10	; 0x0a
     eb8:	d9 84       	ldd	r13, Y+9	; 0x09
     eba:	eb 2e       	mov	r14, r27
     ebc:	fa 2e       	mov	r15, r26
     ebe:	0f 2f       	mov	r16, r31
     ec0:	1e 2f       	mov	r17, r30
     ec2:	0e 94 e4 4a 	call	0x95c8	; 0x95c8 <__subdi3>
     ec6:	a2 2e       	mov	r10, r18
     ec8:	b3 2e       	mov	r11, r19
     eca:	c4 2e       	mov	r12, r20
     ecc:	d5 2e       	mov	r13, r21
     ece:	e6 2e       	mov	r14, r22
     ed0:	f7 2e       	mov	r15, r23
     ed2:	78 2e       	mov	r7, r24
     ed4:	19 2f       	mov	r17, r25
     ed6:	03 e0       	ldi	r16, 0x03	; 3
     ed8:	0e 94 98 4a 	call	0x9530	; 0x9530 <__ashldi3>
     edc:	07 2d       	mov	r16, r7
     ede:	0e 94 e4 4a 	call	0x95c8	; 0x95c8 <__subdi3>
     ee2:	03 e0       	ldi	r16, 0x03	; 3
     ee4:	0e 94 98 4a 	call	0x9530	; 0x9530 <__ashldi3>
     ee8:	a8 2c       	mov	r10, r8
     eea:	b9 2c       	mov	r11, r9
     eec:	ca 84       	ldd	r12, Y+10	; 0x0a
     eee:	d9 84       	ldd	r13, Y+9	; 0x09
     ef0:	eb 2e       	mov	r14, r27
     ef2:	fa 2e       	mov	r15, r26
     ef4:	0f 2f       	mov	r16, r31
     ef6:	1e 2f       	mov	r17, r30
     ef8:	0e 94 e4 4a 	call	0x95c8	; 0x95c8 <__subdi3>
     efc:	02 e0       	ldi	r16, 0x02	; 2
     efe:	0e 94 98 4a 	call	0x9530	; 0x9530 <__ashldi3>
     f02:	0f 2f       	mov	r16, r31
     f04:	0e 94 e4 4a 	call	0x95c8	; 0x95c8 <__subdi3>
     f08:	01 e0       	ldi	r16, 0x01	; 1
     f0a:	0e 94 98 4a 	call	0x9530	; 0x9530 <__ashldi3>
     f0e:	0f 2f       	mov	r16, r31
     f10:	0e 94 e4 4a 	call	0x95c8	; 0x95c8 <__subdi3>
     f14:	01 e0       	ldi	r16, 0x01	; 1
     f16:	0e 94 98 4a 	call	0x9530	; 0x9530 <__ashldi3>
     f1a:	82 2e       	mov	r8, r18
     f1c:	93 2e       	mov	r9, r19
     f1e:	f4 2f       	mov	r31, r20
     f20:	75 2e       	mov	r7, r21
     f22:	b6 2f       	mov	r27, r22
     f24:	a7 2f       	mov	r26, r23
     f26:	89 87       	std	Y+9, r24	; 0x09
     f28:	9a 87       	std	Y+10, r25	; 0x0a
	if (b7 < 0x80000000){
     f2a:	2f 3f       	cpi	r18, 0xFF	; 255
     f2c:	0f ef       	ldi	r16, 0xFF	; 255
     f2e:	30 07       	cpc	r19, r16
     f30:	40 07       	cpc	r20, r16
     f32:	0f e7       	ldi	r16, 0x7F	; 127
     f34:	50 07       	cpc	r21, r16
     f36:	61 05       	cpc	r22, r1
     f38:	71 05       	cpc	r23, r1
     f3a:	81 05       	cpc	r24, r1
     f3c:	91 05       	cpc	r25, r1
     f3e:	09 f0       	breq	.+2      	; 0xf42 <_ZN6BMP18018bmp180_getpressureEv+0x44c>
     f40:	b0 f4       	brcc	.+44     	; 0xf6e <_ZN6BMP18018bmp180_getpressureEv+0x478>
		p  = b7*2;
     f42:	01 e0       	ldi	r16, 0x01	; 1
     f44:	0e 94 98 4a 	call	0x9530	; 0x9530 <__ashldi3>
		p /= b4;
     f48:	a6 2c       	mov	r10, r6
     f4a:	b5 2c       	mov	r11, r5
     f4c:	c4 2c       	mov	r12, r4
     f4e:	d9 80       	ldd	r13, Y+1	; 0x01
     f50:	ec 88       	ldd	r14, Y+20	; 0x14
     f52:	fd 88       	ldd	r15, Y+21	; 0x15
     f54:	0e 89       	ldd	r16, Y+22	; 0x16
     f56:	1f 89       	ldd	r17, Y+23	; 0x17
     f58:	0e 94 f5 49 	call	0x93ea	; 0x93ea <__udivdi3>
     f5c:	29 83       	std	Y+1, r18	; 0x01
     f5e:	3a 83       	std	Y+2, r19	; 0x02
     f60:	4b 83       	std	Y+3, r20	; 0x03
     f62:	5c 83       	std	Y+4, r21	; 0x04
     f64:	6d 83       	std	Y+5, r22	; 0x05
     f66:	7e 83       	std	Y+6, r23	; 0x06
     f68:	8f 83       	std	Y+7, r24	; 0x07
     f6a:	98 87       	std	Y+8, r25	; 0x08
     f6c:	24 c0       	rjmp	.+72     	; 0xfb6 <_ZN6BMP18018bmp180_getpressureEv+0x4c0>
	}
	else {
		p  = b7/b4;
     f6e:	a6 2c       	mov	r10, r6
     f70:	b5 2c       	mov	r11, r5
     f72:	c4 2c       	mov	r12, r4
     f74:	d9 80       	ldd	r13, Y+1	; 0x01
     f76:	ec 88       	ldd	r14, Y+20	; 0x14
     f78:	fd 88       	ldd	r15, Y+21	; 0x15
     f7a:	0e 89       	ldd	r16, Y+22	; 0x16
     f7c:	1f 89       	ldd	r17, Y+23	; 0x17
     f7e:	28 2d       	mov	r18, r8
     f80:	39 2d       	mov	r19, r9
     f82:	4f 2f       	mov	r20, r31
     f84:	57 2d       	mov	r21, r7
     f86:	6b 2f       	mov	r22, r27
     f88:	7a 2f       	mov	r23, r26
     f8a:	89 85       	ldd	r24, Y+9	; 0x09
     f8c:	9a 85       	ldd	r25, Y+10	; 0x0a
     f8e:	0e 94 f5 49 	call	0x93ea	; 0x93ea <__udivdi3>
		p *= p;
     f92:	a2 2e       	mov	r10, r18
     f94:	b3 2e       	mov	r11, r19
     f96:	c4 2e       	mov	r12, r20
     f98:	d5 2e       	mov	r13, r21
     f9a:	e6 2e       	mov	r14, r22
     f9c:	f7 2e       	mov	r15, r23
     f9e:	08 2f       	mov	r16, r24
     fa0:	19 2f       	mov	r17, r25
     fa2:	0e 94 77 49 	call	0x92ee	; 0x92ee <__muldi3>
     fa6:	29 83       	std	Y+1, r18	; 0x01
     fa8:	3a 83       	std	Y+2, r19	; 0x02
     faa:	4b 83       	std	Y+3, r20	; 0x03
     fac:	5c 83       	std	Y+4, r21	; 0x04
     fae:	6d 83       	std	Y+5, r22	; 0x05
     fb0:	7e 83       	std	Y+6, r23	; 0x06
     fb2:	8f 83       	std	Y+7, r24	; 0x07
     fb4:	98 87       	std	Y+8, r25	; 0x08
	}
	x1   = (p >> 8);
     fb6:	29 81       	ldd	r18, Y+1	; 0x01
     fb8:	3a 81       	ldd	r19, Y+2	; 0x02
     fba:	4b 81       	ldd	r20, Y+3	; 0x03
     fbc:	5c 81       	ldd	r21, Y+4	; 0x04
     fbe:	6d 81       	ldd	r22, Y+5	; 0x05
     fc0:	7e 81       	ldd	r23, Y+6	; 0x06
     fc2:	8f 81       	ldd	r24, Y+7	; 0x07
     fc4:	98 85       	ldd	r25, Y+8	; 0x08
     fc6:	08 e0       	ldi	r16, 0x08	; 8
     fc8:	0e 94 b1 4a 	call	0x9562	; 0x9562 <__ashrdi3>
	x1  *= (p >> 8);
     fcc:	a2 2e       	mov	r10, r18
     fce:	b3 2e       	mov	r11, r19
     fd0:	c4 2e       	mov	r12, r20
     fd2:	d5 2e       	mov	r13, r21
     fd4:	e6 2e       	mov	r14, r22
     fd6:	f7 2e       	mov	r15, r23
     fd8:	08 2f       	mov	r16, r24
     fda:	19 2f       	mov	r17, r25
     fdc:	0e 94 77 49 	call	0x92ee	; 0x92ee <__muldi3>
     fe0:	a2 2e       	mov	r10, r18
     fe2:	b3 2e       	mov	r11, r19
     fe4:	c4 2e       	mov	r12, r20
     fe6:	d5 2e       	mov	r13, r21
     fe8:	e6 2e       	mov	r14, r22
     fea:	f7 2e       	mov	r15, r23
     fec:	e8 2f       	mov	r30, r24
     fee:	19 2f       	mov	r17, r25
	x1   = (x1 * 3038);
     ff0:	03 e0       	ldi	r16, 0x03	; 3
     ff2:	0e 94 98 4a 	call	0x9530	; 0x9530 <__ashldi3>
     ff6:	0e 2f       	mov	r16, r30
     ff8:	0e 94 e4 4a 	call	0x95c8	; 0x95c8 <__subdi3>
     ffc:	a2 2e       	mov	r10, r18
     ffe:	b3 2e       	mov	r11, r19
    1000:	c4 2e       	mov	r12, r20
    1002:	d5 2e       	mov	r13, r21
    1004:	e6 2e       	mov	r14, r22
    1006:	f7 2e       	mov	r15, r23
    1008:	e8 2f       	mov	r30, r24
    100a:	19 2f       	mov	r17, r25
    100c:	03 e0       	ldi	r16, 0x03	; 3
    100e:	0e 94 98 4a 	call	0x9530	; 0x9530 <__ashldi3>
    1012:	0e 2f       	mov	r16, r30
    1014:	0e 94 e4 4a 	call	0x95c8	; 0x95c8 <__subdi3>
    1018:	a2 2e       	mov	r10, r18
    101a:	b3 2e       	mov	r11, r19
    101c:	c4 2e       	mov	r12, r20
    101e:	d5 2e       	mov	r13, r21
    1020:	e6 2e       	mov	r14, r22
    1022:	f7 2e       	mov	r15, r23
    1024:	e8 2f       	mov	r30, r24
    1026:	19 2f       	mov	r17, r25
    1028:	05 e0       	ldi	r16, 0x05	; 5
    102a:	0e 94 98 4a 	call	0x9530	; 0x9530 <__ashldi3>
    102e:	0e 2f       	mov	r16, r30
    1030:	0e 94 e4 4a 	call	0x95c8	; 0x95c8 <__subdi3>
    1034:	01 e0       	ldi	r16, 0x01	; 1
    1036:	0e 94 98 4a 	call	0x9530	; 0x9530 <__ashldi3>
    103a:	72 2e       	mov	r7, r18
    103c:	53 2e       	mov	r5, r19
    103e:	64 2e       	mov	r6, r20
    1040:	f5 2f       	mov	r31, r21
    1042:	46 2e       	mov	r4, r22
    1044:	b7 2f       	mov	r27, r23
    1046:	a8 2f       	mov	r26, r24
    1048:	99 87       	std	Y+9, r25	; 0x09
	x1 >>= 16;
	x2   = (-7357 * p);
    104a:	29 81       	ldd	r18, Y+1	; 0x01
    104c:	3a 81       	ldd	r19, Y+2	; 0x02
    104e:	4b 81       	ldd	r20, Y+3	; 0x03
    1050:	5c 81       	ldd	r21, Y+4	; 0x04
    1052:	6d 81       	ldd	r22, Y+5	; 0x05
    1054:	7e 81       	ldd	r23, Y+6	; 0x06
    1056:	8f 81       	ldd	r24, Y+7	; 0x07
    1058:	98 85       	ldd	r25, Y+8	; 0x08
    105a:	05 e0       	ldi	r16, 0x05	; 5
    105c:	0e 94 98 4a 	call	0x9530	; 0x9530 <__ashldi3>
    1060:	a9 80       	ldd	r10, Y+1	; 0x01
    1062:	ba 80       	ldd	r11, Y+2	; 0x02
    1064:	cb 80       	ldd	r12, Y+3	; 0x03
    1066:	dc 80       	ldd	r13, Y+4	; 0x04
    1068:	ed 80       	ldd	r14, Y+5	; 0x05
    106a:	fe 80       	ldd	r15, Y+6	; 0x06
    106c:	0f 81       	ldd	r16, Y+7	; 0x07
    106e:	18 85       	ldd	r17, Y+8	; 0x08
    1070:	0e 94 cf 4a 	call	0x959e	; 0x959e <__adddi3>
    1074:	03 e0       	ldi	r16, 0x03	; 3
    1076:	0e 94 98 4a 	call	0x9530	; 0x9530 <__ashldi3>
    107a:	0f 81       	ldd	r16, Y+7	; 0x07
    107c:	0e 94 e4 4a 	call	0x95c8	; 0x95c8 <__subdi3>
    1080:	02 e0       	ldi	r16, 0x02	; 2
    1082:	0e 94 98 4a 	call	0x9530	; 0x9530 <__ashldi3>
    1086:	0f 81       	ldd	r16, Y+7	; 0x07
    1088:	0e 94 e4 4a 	call	0x95c8	; 0x95c8 <__subdi3>
    108c:	a2 2e       	mov	r10, r18
    108e:	b3 2e       	mov	r11, r19
    1090:	c4 2e       	mov	r12, r20
    1092:	d5 2e       	mov	r13, r21
    1094:	e6 2e       	mov	r14, r22
    1096:	f7 2e       	mov	r15, r23
    1098:	e8 2f       	mov	r30, r24
    109a:	19 2f       	mov	r17, r25
    109c:	03 e0       	ldi	r16, 0x03	; 3
    109e:	0e 94 98 4a 	call	0x9530	; 0x9530 <__ashldi3>
    10a2:	0e 2f       	mov	r16, r30
    10a4:	0e 94 e4 4a 	call	0x95c8	; 0x95c8 <__subdi3>
    10a8:	0e 94 51 4a 	call	0x94a2	; 0x94a2 <__negdi2>
	x2 >>= 16;
    10ac:	00 e1       	ldi	r16, 0x10	; 16
    10ae:	0e 94 b1 4a 	call	0x9562	; 0x9562 <__ashrdi3>
    10b2:	82 2e       	mov	r8, r18
    10b4:	93 2e       	mov	r9, r19
    10b6:	a4 2e       	mov	r10, r20
    10b8:	b5 2e       	mov	r11, r21
    10ba:	75 01       	movw	r14, r10
    10bc:	64 01       	movw	r12, r8
    10be:	1f ec       	ldi	r17, 0xCF	; 207
    10c0:	c1 0e       	add	r12, r17
    10c2:	1e e0       	ldi	r17, 0x0E	; 14
    10c4:	d1 1e       	adc	r13, r17
    10c6:	e1 1c       	adc	r14, r1
    10c8:	f1 1c       	adc	r15, r1
		p *= p;
	}
	x1   = (p >> 8);
	x1  *= (p >> 8);
	x1   = (x1 * 3038);
	x1 >>= 16;
    10ca:	27 2d       	mov	r18, r7
    10cc:	35 2d       	mov	r19, r5
    10ce:	46 2d       	mov	r20, r6
    10d0:	5f 2f       	mov	r21, r31
    10d2:	64 2d       	mov	r22, r4
    10d4:	7b 2f       	mov	r23, r27
    10d6:	8a 2f       	mov	r24, r26
    10d8:	99 85       	ldd	r25, Y+9	; 0x09
    10da:	0e 94 b1 4a 	call	0x9562	; 0x9562 <__ashrdi3>
    10de:	42 2e       	mov	r4, r18
    10e0:	53 2e       	mov	r5, r19
    10e2:	64 2e       	mov	r6, r20
    10e4:	75 2e       	mov	r7, r21
	x2   = (-7357 * p);
	x2 >>= 16;
	bmp180_rawpressure   = (x1 + x2 + 3791);
    10e6:	d7 01       	movw	r26, r14
    10e8:	c6 01       	movw	r24, r12
    10ea:	84 0d       	add	r24, r4
    10ec:	95 1d       	adc	r25, r5
    10ee:	a6 1d       	adc	r26, r6
    10f0:	b7 1d       	adc	r27, r7
	bmp180_rawpressure >>= 4;
    10f2:	68 94       	set
    10f4:	13 f8       	bld	r1, 3
    10f6:	b5 95       	asr	r27
    10f8:	a7 95       	ror	r26
    10fa:	97 95       	ror	r25
    10fc:	87 95       	ror	r24
    10fe:	16 94       	lsr	r1
    1100:	d1 f7       	brne	.-12     	; 0x10f6 <_ZN6BMP18018bmp180_getpressureEv+0x600>
	bmp180_rawpressure  += p;
    1102:	29 81       	ldd	r18, Y+1	; 0x01
    1104:	3a 81       	ldd	r19, Y+2	; 0x02
    1106:	4b 81       	ldd	r20, Y+3	; 0x03
    1108:	5c 81       	ldd	r21, Y+4	; 0x04
    110a:	28 0f       	add	r18, r24
    110c:	39 1f       	adc	r19, r25
    110e:	4a 1f       	adc	r20, r26
    1110:	5b 1f       	adc	r21, r27
    1112:	ca 01       	movw	r24, r20
    1114:	b9 01       	movw	r22, r18
    1116:	d1 01       	movw	r26, r2
    1118:	9a 96       	adiw	r26, 0x2a	; 42
    111a:	2d 93       	st	X+, r18
    111c:	3d 93       	st	X+, r19
    111e:	4d 93       	st	X+, r20
    1120:	5c 93       	st	X, r21
    1122:	9d 97       	sbiw	r26, 0x2d	; 45
	//Korrektur heuristisch 
	//bmp180_rawpressure  -= 24000;
	
	pressure = (bmp180_rawpressure+BMP180_UNITPAOFFSET)/100.0;
    1124:	0e 94 cf 42 	call	0x859e	; 0x859e <__floatsisf>
    1128:	20 e0       	ldi	r18, 0x00	; 0
    112a:	30 e0       	ldi	r19, 0x00	; 0
    112c:	48 ec       	ldi	r20, 0xC8	; 200
    112e:	52 e4       	ldi	r21, 0x42	; 66
    1130:	0e 94 fa 41 	call	0x83f4	; 0x83f4 <__divsf3>
    1134:	f1 01       	movw	r30, r2
    1136:	60 83       	st	Z, r22
    1138:	71 83       	std	Z+1, r23	; 0x01
    113a:	82 83       	std	Z+2, r24	; 0x02
    113c:	93 83       	std	Z+3, r25	; 0x03
	
}
    113e:	a2 96       	adiw	r28, 0x22	; 34
    1140:	0f b6       	in	r0, 0x3f	; 63
    1142:	f8 94       	cli
    1144:	de bf       	out	0x3e, r29	; 62
    1146:	0f be       	out	0x3f, r0	; 63
    1148:	cd bf       	out	0x3d, r28	; 61
    114a:	df 91       	pop	r29
    114c:	cf 91       	pop	r28
    114e:	1f 91       	pop	r17
    1150:	0f 91       	pop	r16
    1152:	ff 90       	pop	r15
    1154:	ef 90       	pop	r14
    1156:	df 90       	pop	r13
    1158:	cf 90       	pop	r12
    115a:	bf 90       	pop	r11
    115c:	af 90       	pop	r10
    115e:	9f 90       	pop	r9
    1160:	8f 90       	pop	r8
    1162:	7f 90       	pop	r7
    1164:	6f 90       	pop	r6
    1166:	5f 90       	pop	r5
    1168:	4f 90       	pop	r4
    116a:	3f 90       	pop	r3
    116c:	2f 90       	pop	r2
    116e:	08 95       	ret

00001170 <_ZN6BMP18018bmp180_getaltitudeEv>:

void BMP180::bmp180_getaltitude(){
    1170:	cf 93       	push	r28
    1172:	df 93       	push	r29
    1174:	ec 01       	movw	r28, r24
	bmp180_getpressure();
    1176:	bf dc       	rcall	.-1666   	; 0xaf6 <_ZN6BMP18018bmp180_getpressureEv>
	altitude  = pressure/pressure0;
    1178:	2c 81       	ldd	r18, Y+4	; 0x04
    117a:	3d 81       	ldd	r19, Y+5	; 0x05
    117c:	4e 81       	ldd	r20, Y+6	; 0x06
    117e:	5f 81       	ldd	r21, Y+7	; 0x07
    1180:	68 81       	ld	r22, Y
    1182:	79 81       	ldd	r23, Y+1	; 0x01
    1184:	8a 81       	ldd	r24, Y+2	; 0x02
    1186:	9b 81       	ldd	r25, Y+3	; 0x03
    1188:	0e 94 fa 41 	call	0x83f4	; 0x83f4 <__divsf3>
	altitude  = pow(altitude,1/5.255);
    118c:	2e ea       	ldi	r18, 0xAE	; 174
    118e:	3c ed       	ldi	r19, 0xDC	; 220
    1190:	42 e4       	ldi	r20, 0x42	; 66
    1192:	5e e3       	ldi	r21, 0x3E	; 62
    1194:	0e 94 5b 44 	call	0x88b6	; 0x88b6 <pow>
    1198:	9b 01       	movw	r18, r22
    119a:	ac 01       	movw	r20, r24
	altitude  = 1-altitude;
    119c:	60 e0       	ldi	r22, 0x00	; 0
    119e:	70 e0       	ldi	r23, 0x00	; 0
    11a0:	80 e8       	ldi	r24, 0x80	; 128
    11a2:	9f e3       	ldi	r25, 0x3F	; 63
    11a4:	0e 94 92 41 	call	0x8324	; 0x8324 <__subsf3>
	altitude *= 44330;
    11a8:	20 e0       	ldi	r18, 0x00	; 0
    11aa:	3a e2       	ldi	r19, 0x2A	; 42
    11ac:	4d e2       	ldi	r20, 0x2D	; 45
    11ae:	57 e4       	ldi	r21, 0x47	; 71
    11b0:	0e 94 f8 43 	call	0x87f0	; 0x87f0 <__mulsf3>
    11b4:	6c 87       	std	Y+12, r22	; 0x0c
    11b6:	7d 87       	std	Y+13, r23	; 0x0d
    11b8:	8e 87       	std	Y+14, r24	; 0x0e
    11ba:	9f 87       	std	Y+15, r25	; 0x0f
}
    11bc:	df 91       	pop	r29
    11be:	cf 91       	pop	r28
    11c0:	08 95       	ret

000011c2 <power_off>:
}

static
void power_off (void)
{
	SPCR = 0;				/* Disable SPI function */
    11c2:	1c bc       	out	0x2c, r1	; 44

	DDRB  &= ~((1<<PORTB7) | (1<<PORTB5));// | (1<<PORTB4));	/* Set SCK/MOSI/CS as hi-z, INS#/WP as pull-up */
    11c4:	84 b1       	in	r24, 0x04	; 4
    11c6:	8f 75       	andi	r24, 0x5F	; 95
    11c8:	84 b9       	out	0x04, r24	; 4
	CS_HIGH();
    11ca:	2c 9a       	sbi	0x05, 4	; 5
    11cc:	08 95       	ret

000011ce <xchg_spi>:
static
BYTE xchg_spi (		/* Returns received data */
BYTE dat		/* Data to be sent */
)
{
	SPDR = dat;
    11ce:	8e bd       	out	0x2e, r24	; 46
	loop_until_bit_is_set(SPSR, SPIF);
    11d0:	0d b4       	in	r0, 0x2d	; 45
    11d2:	07 fe       	sbrs	r0, 7
    11d4:	fd cf       	rjmp	.-6      	; 0x11d0 <xchg_spi+0x2>
	return SPDR;
    11d6:	8e b5       	in	r24, 0x2e	; 46
}
    11d8:	08 95       	ret

000011da <deselect>:
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();		/* Set CS# high */
    11da:	2c 9a       	sbi	0x05, 4	; 5
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
    11dc:	8f ef       	ldi	r24, 0xFF	; 255
    11de:	f7 cf       	rjmp	.-18     	; 0x11ce <xchg_spi>
    11e0:	08 95       	ret

000011e2 <select>:
/*-----------------------------------------------------------------------*/

static
int select (void)	/* 1:Successful, 0:Timeout */
{
	CS_LOW();		/* Set CS# low */
    11e2:	2c 98       	cbi	0x05, 4	; 5
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
    11e4:	8f ef       	ldi	r24, 0xFF	; 255
    11e6:	f3 df       	rcall	.-26     	; 0x11ce <xchg_spi>
)
{
	BYTE d;


	Timer2 = wt / 10;
    11e8:	82 e3       	ldi	r24, 0x32	; 50
    11ea:	80 93 31 04 	sts	0x0431, r24
	do{
		d = xchg_spi(0xFF);
    11ee:	8f ef       	ldi	r24, 0xFF	; 255
    11f0:	ee df       	rcall	.-36     	; 0x11ce <xchg_spi>
	}while (d != 0xFF && Timer2);
    11f2:	8f 3f       	cpi	r24, 0xFF	; 255
    11f4:	41 f0       	breq	.+16     	; 0x1206 <select+0x24>
    11f6:	80 91 31 04 	lds	r24, 0x0431
    11fa:	81 11       	cpse	r24, r1
    11fc:	f8 cf       	rjmp	.-16     	; 0x11ee <select+0xc>
{
	CS_LOW();		/* Set CS# low */
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
	if (wait_ready(500)) return 1;	/* Wait for card ready */

	deselect();
    11fe:	ed df       	rcall	.-38     	; 0x11da <deselect>
	return 0;	/* Timeout */
    1200:	80 e0       	ldi	r24, 0x00	; 0
    1202:	90 e0       	ldi	r25, 0x00	; 0
    1204:	08 95       	ret
static
int select (void)	/* 1:Successful, 0:Timeout */
{
	CS_LOW();		/* Set CS# low */
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
	if (wait_ready(500)) return 1;	/* Wait for card ready */
    1206:	81 e0       	ldi	r24, 0x01	; 1
    1208:	90 e0       	ldi	r25, 0x00	; 0

	deselect();
	return 0;	/* Timeout */
}
    120a:	08 95       	ret

0000120c <rcvr_datablock>:
static
int rcvr_datablock (
BYTE *buff,			/* Data buffer to store received data */
UINT btr			/* Byte count (must be multiple of 4) */
)
{
    120c:	0f 93       	push	r16
    120e:	1f 93       	push	r17
    1210:	cf 93       	push	r28
    1212:	df 93       	push	r29
    1214:	ec 01       	movw	r28, r24
    1216:	8b 01       	movw	r16, r22
	BYTE token;


	Timer1 = 20;
    1218:	84 e1       	ldi	r24, 0x14	; 20
    121a:	80 93 32 04 	sts	0x0432, r24
	do {							/* Wait for data packet in timeout of 200ms */
		token = xchg_spi(0xFF);
    121e:	8f ef       	ldi	r24, 0xFF	; 255
    1220:	d6 df       	rcall	.-84     	; 0x11ce <xchg_spi>
	} while ((token == 0xFF) && Timer1);
    1222:	8f 3f       	cpi	r24, 0xFF	; 255
    1224:	39 f4       	brne	.+14     	; 0x1234 <rcvr_datablock+0x28>
    1226:	90 91 32 04 	lds	r25, 0x0432
    122a:	91 11       	cpse	r25, r1
    122c:	f8 cf       	rjmp	.-16     	; 0x121e <rcvr_datablock+0x12>
	if (token != 0xFE) return 0;	/* If not valid data token, return with error */
    122e:	80 e0       	ldi	r24, 0x00	; 0
    1230:	90 e0       	ldi	r25, 0x00	; 0
    1232:	20 c0       	rjmp	.+64     	; 0x1274 <rcvr_datablock+0x68>
    1234:	8e 3f       	cpi	r24, 0xFE	; 254
    1236:	e1 f4       	brne	.+56     	; 0x1270 <rcvr_datablock+0x64>
void rcvr_spi_multi (
BYTE *p,	/* Data buffer */
UINT cnt	/* Size of data block (must be multiple of 2) */
)
{
	cli();
    1238:	f8 94       	cli
	do {
		SPDR = 0xFF; loop_until_bit_is_set(SPSR,SPIF); *p++ = SPDR;
    123a:	8f ef       	ldi	r24, 0xFF	; 255
    123c:	8e bd       	out	0x2e, r24	; 46
    123e:	0d b4       	in	r0, 0x2d	; 45
    1240:	07 fe       	sbrs	r0, 7
    1242:	fd cf       	rjmp	.-6      	; 0x123e <rcvr_datablock+0x32>
    1244:	9e b5       	in	r25, 0x2e	; 46
    1246:	98 83       	st	Y, r25
		SPDR = 0xFF; loop_until_bit_is_set(SPSR,SPIF); *p++ = SPDR;
    1248:	8e bd       	out	0x2e, r24	; 46
    124a:	0d b4       	in	r0, 0x2d	; 45
    124c:	07 fe       	sbrs	r0, 7
    124e:	fd cf       	rjmp	.-6      	; 0x124a <rcvr_datablock+0x3e>
    1250:	22 96       	adiw	r28, 0x02	; 2
    1252:	9e b5       	in	r25, 0x2e	; 46
    1254:	fe 01       	movw	r30, r28
    1256:	31 97       	sbiw	r30, 0x01	; 1
    1258:	90 83       	st	Z, r25
	} while (cnt -= 2);
    125a:	02 50       	subi	r16, 0x02	; 2
    125c:	11 09       	sbc	r17, r1
    125e:	71 f7       	brne	.-36     	; 0x123c <rcvr_datablock+0x30>
	sei();
    1260:	78 94       	sei
		token = xchg_spi(0xFF);
	} while ((token == 0xFF) && Timer1);
	if (token != 0xFE) return 0;	/* If not valid data token, return with error */

	rcvr_spi_multi(buff, btr);		/* Receive the data block into buffer */
	xchg_spi(0xFF);					/* Discard CRC */
    1262:	8f ef       	ldi	r24, 0xFF	; 255
    1264:	b4 df       	rcall	.-152    	; 0x11ce <xchg_spi>
	xchg_spi(0xFF);
    1266:	8f ef       	ldi	r24, 0xFF	; 255
    1268:	b2 df       	rcall	.-156    	; 0x11ce <xchg_spi>

	return 1;						/* Return with success */
    126a:	81 e0       	ldi	r24, 0x01	; 1
    126c:	90 e0       	ldi	r25, 0x00	; 0
    126e:	02 c0       	rjmp	.+4      	; 0x1274 <rcvr_datablock+0x68>

	Timer1 = 20;
	do {							/* Wait for data packet in timeout of 200ms */
		token = xchg_spi(0xFF);
	} while ((token == 0xFF) && Timer1);
	if (token != 0xFE) return 0;	/* If not valid data token, return with error */
    1270:	80 e0       	ldi	r24, 0x00	; 0
    1272:	90 e0       	ldi	r25, 0x00	; 0
	rcvr_spi_multi(buff, btr);		/* Receive the data block into buffer */
	xchg_spi(0xFF);					/* Discard CRC */
	xchg_spi(0xFF);

	return 1;						/* Return with success */
}
    1274:	df 91       	pop	r29
    1276:	cf 91       	pop	r28
    1278:	1f 91       	pop	r17
    127a:	0f 91       	pop	r16
    127c:	08 95       	ret

0000127e <send_cmd>:
static
BYTE send_cmd (		/* Returns R1 resp (bit7==1:Send failed) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
    127e:	ff 92       	push	r15
    1280:	0f 93       	push	r16
    1282:	1f 93       	push	r17
    1284:	cf 93       	push	r28
    1286:	df 93       	push	r29
    1288:	c8 2f       	mov	r28, r24
    128a:	d4 2f       	mov	r29, r20
    128c:	15 2f       	mov	r17, r21
    128e:	06 2f       	mov	r16, r22
    1290:	f7 2e       	mov	r15, r23
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
    1292:	88 23       	and	r24, r24
    1294:	4c f4       	brge	.+18     	; 0x12a8 <send_cmd+0x2a>
		cmd &= 0x7F;
		res = send_cmd(CMD55, 0);
    1296:	40 e0       	ldi	r20, 0x00	; 0
    1298:	50 e0       	ldi	r21, 0x00	; 0
    129a:	ba 01       	movw	r22, r20
    129c:	87 e3       	ldi	r24, 0x37	; 55
    129e:	ef df       	rcall	.-34     	; 0x127e <send_cmd>
		if (res > 1) return res;
    12a0:	82 30       	cpi	r24, 0x02	; 2
    12a2:	08 f0       	brcs	.+2      	; 0x12a6 <send_cmd+0x28>
    12a4:	3c c0       	rjmp	.+120    	; 0x131e <send_cmd+0xa0>
{
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
		cmd &= 0x7F;
    12a6:	cf 77       	andi	r28, 0x7F	; 127
		res = send_cmd(CMD55, 0);
		if (res > 1) return res;
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
    12a8:	cc 30       	cpi	r28, 0x0C	; 12
    12aa:	f1 f0       	breq	.+60     	; 0x12e8 <send_cmd+0x6a>
		deselect();
    12ac:	96 df       	rcall	.-212    	; 0x11da <deselect>
		if (!select()) return 0xFF;
    12ae:	99 df       	rcall	.-206    	; 0x11e2 <select>
    12b0:	89 2b       	or	r24, r25
    12b2:	c1 f0       	breq	.+48     	; 0x12e4 <send_cmd+0x66>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + Command index */
    12b4:	8c 2f       	mov	r24, r28
    12b6:	80 64       	ori	r24, 0x40	; 64
    12b8:	8a df       	rcall	.-236    	; 0x11ce <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
    12ba:	8f 2d       	mov	r24, r15
    12bc:	88 df       	rcall	.-240    	; 0x11ce <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
    12be:	80 2f       	mov	r24, r16
    12c0:	86 df       	rcall	.-244    	; 0x11ce <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
    12c2:	81 2f       	mov	r24, r17
    12c4:	84 df       	rcall	.-248    	; 0x11ce <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
    12c6:	8d 2f       	mov	r24, r29
    12c8:	82 df       	rcall	.-252    	; 0x11ce <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) + Stop */
    12ca:	cc 23       	and	r28, r28
    12cc:	29 f1       	breq	.+74     	; 0x1318 <send_cmd+0x9a>
    12ce:	21 c0       	rjmp	.+66     	; 0x1312 <send_cmd+0x94>
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) Stop */
	xchg_spi(n);

	/* Receive command response */
	if (cmd == CMD12) xchg_spi(0xFF);		/* Skip a stuff byte when stop reading */
    12d0:	8f ef       	ldi	r24, 0xFF	; 255
    12d2:	7d df       	rcall	.-262    	; 0x11ce <xchg_spi>
static
BYTE send_cmd (		/* Returns R1 resp (bit7==1:Send failed) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
    12d4:	ca e0       	ldi	r28, 0x0A	; 10

	/* Receive command response */
	if (cmd == CMD12) xchg_spi(0xFF);		/* Skip a stuff byte when stop reading */
	n = 10;								/* Wait for a valid response in timeout of 10 attempts */
	do
		res = xchg_spi(0xFF);
    12d6:	8f ef       	ldi	r24, 0xFF	; 255
    12d8:	7a df       	rcall	.-268    	; 0x11ce <xchg_spi>
	while ((res & 0x80) && --n);
    12da:	88 23       	and	r24, r24
    12dc:	04 f5       	brge	.+64     	; 0x131e <send_cmd+0xa0>
    12de:	c1 50       	subi	r28, 0x01	; 1
    12e0:	d1 f7       	brne	.-12     	; 0x12d6 <send_cmd+0x58>
    12e2:	1d c0       	rjmp	.+58     	; 0x131e <send_cmd+0xa0>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
		deselect();
		if (!select()) return 0xFF;
    12e4:	8f ef       	ldi	r24, 0xFF	; 255
    12e6:	1b c0       	rjmp	.+54     	; 0x131e <send_cmd+0xa0>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + Command index */
    12e8:	8c e4       	ldi	r24, 0x4C	; 76
    12ea:	71 df       	rcall	.-286    	; 0x11ce <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
    12ec:	8f 2d       	mov	r24, r15
    12ee:	6f df       	rcall	.-290    	; 0x11ce <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
    12f0:	80 2f       	mov	r24, r16
    12f2:	6d df       	rcall	.-294    	; 0x11ce <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
    12f4:	81 2f       	mov	r24, r17
    12f6:	6b df       	rcall	.-298    	; 0x11ce <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
    12f8:	8d 2f       	mov	r24, r29
    12fa:	69 df       	rcall	.-302    	; 0x11ce <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) + Stop */
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) Stop */
	xchg_spi(n);
    12fc:	81 e0       	ldi	r24, 0x01	; 1
    12fe:	67 df       	rcall	.-306    	; 0x11ce <xchg_spi>

	/* Receive command response */
	if (cmd == CMD12) xchg_spi(0xFF);		/* Skip a stuff byte when stop reading */
    1300:	cc 30       	cpi	r28, 0x0C	; 12
    1302:	31 f3       	breq	.-52     	; 0x12d0 <send_cmd+0x52>
    1304:	e7 cf       	rjmp	.-50     	; 0x12d4 <send_cmd+0x56>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) + Stop */
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) Stop */
	xchg_spi(n);
    1306:	87 e8       	ldi	r24, 0x87	; 135
    1308:	62 df       	rcall	.-316    	; 0x11ce <xchg_spi>
    130a:	e4 cf       	rjmp	.-56     	; 0x12d4 <send_cmd+0x56>
    130c:	81 e0       	ldi	r24, 0x01	; 1
    130e:	5f df       	rcall	.-322    	; 0x11ce <xchg_spi>
    1310:	e1 cf       	rjmp	.-62     	; 0x12d4 <send_cmd+0x56>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) + Stop */
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) Stop */
    1312:	c8 30       	cpi	r28, 0x08	; 8
    1314:	c1 f3       	breq	.-16     	; 0x1306 <send_cmd+0x88>
    1316:	fa cf       	rjmp	.-12     	; 0x130c <send_cmd+0x8e>
	xchg_spi(n);
    1318:	85 e9       	ldi	r24, 0x95	; 149
    131a:	59 df       	rcall	.-334    	; 0x11ce <xchg_spi>
    131c:	db cf       	rjmp	.-74     	; 0x12d4 <send_cmd+0x56>
	do
		res = xchg_spi(0xFF);
	while ((res & 0x80) && --n);

	return res;			/* Return with the response value */
}
    131e:	df 91       	pop	r29
    1320:	cf 91       	pop	r28
    1322:	1f 91       	pop	r17
    1324:	0f 91       	pop	r16
    1326:	ff 90       	pop	r15
    1328:	08 95       	ret

0000132a <xmit_datablock>:
static
int xmit_datablock (
const BYTE *buff,	/* 512 byte data block to be transmitted */
BYTE token			/* Data/Stop token */
)
{
    132a:	1f 93       	push	r17
    132c:	cf 93       	push	r28
    132e:	df 93       	push	r29
    1330:	ec 01       	movw	r28, r24
    1332:	16 2f       	mov	r17, r22
)
{
	BYTE d;


	Timer2 = wt / 10;
    1334:	92 e3       	ldi	r25, 0x32	; 50
    1336:	90 93 31 04 	sts	0x0431, r25
	do{
		d = xchg_spi(0xFF);
    133a:	8f ef       	ldi	r24, 0xFF	; 255
    133c:	48 df       	rcall	.-368    	; 0x11ce <xchg_spi>
	}while (d != 0xFF && Timer2);
    133e:	8f 3f       	cpi	r24, 0xFF	; 255
    1340:	31 f0       	breq	.+12     	; 0x134e <xmit_datablock+0x24>
    1342:	90 91 31 04 	lds	r25, 0x0431
    1346:	91 11       	cpse	r25, r1
    1348:	f8 cf       	rjmp	.-16     	; 0x133a <xmit_datablock+0x10>
)
{
	BYTE resp;


	if (!wait_ready(500)) return 0;
    134a:	80 e0       	ldi	r24, 0x00	; 0
    134c:	28 c0       	rjmp	.+80     	; 0x139e <xmit_datablock+0x74>

	xchg_spi(token);					/* Xmit data token */
    134e:	81 2f       	mov	r24, r17
    1350:	3e df       	rcall	.-388    	; 0x11ce <xchg_spi>
	if (token != 0xFD) {	/* Is data token */
    1352:	1d 3f       	cpi	r17, 0xFD	; 253
    1354:	11 f1       	breq	.+68     	; 0x139a <xmit_datablock+0x70>
void xmit_spi_multi (
const BYTE *p,	/* Data block to be sent */
UINT cnt		/* Size of data block (must be multiple of 2) */
)
{
	cli();
    1356:	f8 94       	cli
    1358:	9e 01       	movw	r18, r28
    135a:	3e 5f       	subi	r19, 0xFE	; 254
	do {
		SPDR = *p++; loop_until_bit_is_set(SPSR,SPIF);
    135c:	88 81       	ld	r24, Y
    135e:	8e bd       	out	0x2e, r24	; 46
    1360:	0d b4       	in	r0, 0x2d	; 45
    1362:	07 fe       	sbrs	r0, 7
    1364:	fd cf       	rjmp	.-6      	; 0x1360 <xmit_datablock+0x36>
    1366:	22 96       	adiw	r28, 0x02	; 2
    1368:	fe 01       	movw	r30, r28
    136a:	31 97       	sbiw	r30, 0x01	; 1
		SPDR = *p++; loop_until_bit_is_set(SPSR,SPIF);
    136c:	80 81       	ld	r24, Z
    136e:	8e bd       	out	0x2e, r24	; 46
    1370:	0d b4       	in	r0, 0x2d	; 45
    1372:	07 fe       	sbrs	r0, 7
    1374:	fd cf       	rjmp	.-6      	; 0x1370 <xmit_datablock+0x46>
	} while (cnt -= 2);
    1376:	2c 17       	cp	r18, r28
    1378:	3d 07       	cpc	r19, r29
    137a:	81 f7       	brne	.-32     	; 0x135c <xmit_datablock+0x32>
	sei();
    137c:	78 94       	sei
	if (!wait_ready(500)) return 0;

	xchg_spi(token);					/* Xmit data token */
	if (token != 0xFD) {	/* Is data token */
		xmit_spi_multi(buff, CLUSTERSIZE);		/* Xmit the data block to the MMC */
		xchg_spi(0xFF);					/* CRC (Dummy) */
    137e:	8f ef       	ldi	r24, 0xFF	; 255
    1380:	26 df       	rcall	.-436    	; 0x11ce <xchg_spi>
		xchg_spi(0xFF);
    1382:	8f ef       	ldi	r24, 0xFF	; 255
    1384:	24 df       	rcall	.-440    	; 0x11ce <xchg_spi>
		resp = xchg_spi(0xFF);			/* Reveive data response */
    1386:	8f ef       	ldi	r24, 0xFF	; 255
    1388:	22 df       	rcall	.-444    	; 0x11ce <xchg_spi>
		if ((resp & 0x1F) != 0x05)		/* If not accepted, return with error */
    138a:	28 2f       	mov	r18, r24
    138c:	2f 71       	andi	r18, 0x1F	; 31
    138e:	81 e0       	ldi	r24, 0x01	; 1
    1390:	90 e0       	ldi	r25, 0x00	; 0
    1392:	25 30       	cpi	r18, 0x05	; 5
    1394:	21 f0       	breq	.+8      	; 0x139e <xmit_datablock+0x74>
    1396:	80 e0       	ldi	r24, 0x00	; 0
    1398:	02 c0       	rjmp	.+4      	; 0x139e <xmit_datablock+0x74>
		return 0;
	}

	return 1;
    139a:	81 e0       	ldi	r24, 0x01	; 1
    139c:	90 e0       	ldi	r25, 0x00	; 0
}
    139e:	df 91       	pop	r29
    13a0:	cf 91       	pop	r28
    13a2:	1f 91       	pop	r17
    13a4:	08 95       	ret

000013a6 <disk_initialize>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
	BYTE pdrv		/* Physical drive number (0) */
)
{
    13a6:	cf 92       	push	r12
    13a8:	df 92       	push	r13
    13aa:	ef 92       	push	r14
    13ac:	ff 92       	push	r15
    13ae:	0f 93       	push	r16
    13b0:	1f 93       	push	r17
    13b2:	cf 93       	push	r28
    13b4:	df 93       	push	r29
    13b6:	00 d0       	rcall	.+0      	; 0x13b8 <disk_initialize+0x12>
    13b8:	00 d0       	rcall	.+0      	; 0x13ba <disk_initialize+0x14>
    13ba:	cd b7       	in	r28, 0x3d	; 61
    13bc:	de b7       	in	r29, 0x3e	; 62
	BYTE n, cmd, ty, ocr[4];


	if (pdrv) return STA_NOINIT;		/* Supports only single drive */
    13be:	81 11       	cpse	r24, r1
    13c0:	9b c0       	rjmp	.+310    	; 0x14f8 <disk_initialize+0x152>
	power_off();						/* Turn off the socket power to reset the card */
    13c2:	ff de       	rcall	.-514    	; 0x11c2 <power_off>
	if (Stat & (1<<STA_NODISK)) return Stat;	/* No card in the socket */
    13c4:	80 91 06 01 	lds	r24, 0x0106
    13c8:	82 ff       	sbrs	r24, 2
    13ca:	03 c0       	rjmp	.+6      	; 0x13d2 <disk_initialize+0x2c>
    13cc:	80 91 06 01 	lds	r24, 0x0106
    13d0:	9e c0       	rjmp	.+316    	; 0x150e <disk_initialize+0x168>

static
void power_on (void)
{
	//PORTB |= (1<<PORTB7) | (1<<PORTB5) | (1<<PORTB4);	/* Configure SCK/MOSI/CS as output */
	DDRB |= (1<<PORTB7) | (1<<PORTB5) | (1<<PORTB4);
    13d2:	84 b1       	in	r24, 0x04	; 4
    13d4:	80 6b       	ori	r24, 0xB0	; 176
    13d6:	84 b9       	out	0x04, r24	; 4
	DDRB &= ~(1<<PORTB6);
    13d8:	26 98       	cbi	0x04, 6	; 4
	CS_HIGH();
    13da:	2c 9a       	sbi	0x05, 4	; 5

	SPSR = 0x01;			/* SPI 2x mode */
    13dc:	81 e0       	ldi	r24, 0x01	; 1
    13de:	8d bd       	out	0x2d, r24	; 45
	SPCR = 0x52;			/* Enable SPI function in mode 0 */
    13e0:	82 e5       	ldi	r24, 0x52	; 82
    13e2:	8c bd       	out	0x2c, r24	; 44
    13e4:	1a e0       	ldi	r17, 0x0A	; 10
	if (pdrv) return STA_NOINIT;		/* Supports only single drive */
	power_off();						/* Turn off the socket power to reset the card */
	if (Stat & (1<<STA_NODISK)) return Stat;	/* No card in the socket */
	power_on();							/* Turn on the socket power */
//	FCLK_SLOW();
	for (n = 10; n; n--) xchg_spi(0xFF);	/* 80 dummy clocks */
    13e6:	8f ef       	ldi	r24, 0xFF	; 255
    13e8:	f2 de       	rcall	.-540    	; 0x11ce <xchg_spi>
    13ea:	11 50       	subi	r17, 0x01	; 1
    13ec:	e1 f7       	brne	.-8      	; 0x13e6 <disk_initialize+0x40>

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
    13ee:	40 e0       	ldi	r20, 0x00	; 0
    13f0:	50 e0       	ldi	r21, 0x00	; 0
    13f2:	ba 01       	movw	r22, r20
    13f4:	80 e0       	ldi	r24, 0x00	; 0
    13f6:	43 df       	rcall	.-378    	; 0x127e <send_cmd>
    13f8:	81 30       	cpi	r24, 0x01	; 1
    13fa:	09 f0       	breq	.+2      	; 0x13fe <disk_initialize+0x58>
    13fc:	84 c0       	rjmp	.+264    	; 0x1506 <disk_initialize+0x160>
		Timer1 = 100;						/* Initialization timeout of 1000 msec */
    13fe:	84 e6       	ldi	r24, 0x64	; 100
    1400:	80 93 32 04 	sts	0x0432, r24
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
    1404:	4a ea       	ldi	r20, 0xAA	; 170
    1406:	51 e0       	ldi	r21, 0x01	; 1
    1408:	60 e0       	ldi	r22, 0x00	; 0
    140a:	70 e0       	ldi	r23, 0x00	; 0
    140c:	88 e0       	ldi	r24, 0x08	; 8
    140e:	37 df       	rcall	.-402    	; 0x127e <send_cmd>
    1410:	81 30       	cpi	r24, 0x01	; 1
    1412:	09 f0       	breq	.+2      	; 0x1416 <disk_initialize+0x70>
    1414:	3f c0       	rjmp	.+126    	; 0x1494 <disk_initialize+0xee>
    1416:	ce 01       	movw	r24, r28
    1418:	01 96       	adiw	r24, 0x01	; 1
    141a:	6c 01       	movw	r12, r24
    141c:	7e 01       	movw	r14, r28
    141e:	95 e0       	ldi	r25, 0x05	; 5
    1420:	e9 0e       	add	r14, r25
    1422:	f1 1c       	adc	r15, r1
    1424:	86 01       	movw	r16, r12
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);		/* Get trailing return value of R7 resp */
    1426:	8f ef       	ldi	r24, 0xFF	; 255
    1428:	d2 de       	rcall	.-604    	; 0x11ce <xchg_spi>
    142a:	f8 01       	movw	r30, r16
    142c:	81 93       	st	Z+, r24
    142e:	8f 01       	movw	r16, r30
    1430:	ee 15       	cp	r30, r14
    1432:	ff 05       	cpc	r31, r15
    1434:	c1 f7       	brne	.-16     	; 0x1426 <disk_initialize+0x80>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
    1436:	8b 81       	ldd	r24, Y+3	; 0x03
    1438:	81 30       	cpi	r24, 0x01	; 1
    143a:	09 f0       	breq	.+2      	; 0x143e <disk_initialize+0x98>
    143c:	64 c0       	rjmp	.+200    	; 0x1506 <disk_initialize+0x160>
    143e:	8c 81       	ldd	r24, Y+4	; 0x04
    1440:	8a 3a       	cpi	r24, 0xAA	; 170
    1442:	09 f0       	breq	.+2      	; 0x1446 <disk_initialize+0xa0>
    1444:	60 c0       	rjmp	.+192    	; 0x1506 <disk_initialize+0x160>
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
    1446:	80 91 32 04 	lds	r24, 0x0432
    144a:	88 23       	and	r24, r24
    144c:	41 f0       	breq	.+16     	; 0x145e <disk_initialize+0xb8>
    144e:	40 e0       	ldi	r20, 0x00	; 0
    1450:	50 e0       	ldi	r21, 0x00	; 0
    1452:	60 e0       	ldi	r22, 0x00	; 0
    1454:	70 e4       	ldi	r23, 0x40	; 64
    1456:	89 ea       	ldi	r24, 0xA9	; 169
    1458:	12 df       	rcall	.-476    	; 0x127e <send_cmd>
    145a:	81 11       	cpse	r24, r1
    145c:	f4 cf       	rjmp	.-24     	; 0x1446 <disk_initialize+0xa0>
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
    145e:	80 91 32 04 	lds	r24, 0x0432
    1462:	88 23       	and	r24, r24
    1464:	09 f4       	brne	.+2      	; 0x1468 <disk_initialize+0xc2>
    1466:	4f c0       	rjmp	.+158    	; 0x1506 <disk_initialize+0x160>
    1468:	40 e0       	ldi	r20, 0x00	; 0
    146a:	50 e0       	ldi	r21, 0x00	; 0
    146c:	ba 01       	movw	r22, r20
    146e:	8a e3       	ldi	r24, 0x3A	; 58
    1470:	06 df       	rcall	.-500    	; 0x127e <send_cmd>
    1472:	81 11       	cpse	r24, r1
    1474:	48 c0       	rjmp	.+144    	; 0x1506 <disk_initialize+0x160>
    1476:	76 01       	movw	r14, r12
    1478:	14 e0       	ldi	r17, 0x04	; 4
    147a:	1c 0d       	add	r17, r12
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
    147c:	8f ef       	ldi	r24, 0xFF	; 255
    147e:	a7 de       	rcall	.-690    	; 0x11ce <xchg_spi>
    1480:	f7 01       	movw	r30, r14
    1482:	81 93       	st	Z+, r24
    1484:	7f 01       	movw	r14, r30
    1486:	1e 13       	cpse	r17, r30
    1488:	f9 cf       	rjmp	.-14     	; 0x147c <disk_initialize+0xd6>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
    148a:	89 81       	ldd	r24, Y+1	; 0x01
    148c:	86 fd       	sbrc	r24, 6
    148e:	36 c0       	rjmp	.+108    	; 0x14fc <disk_initialize+0x156>
    1490:	84 e0       	ldi	r24, 0x04	; 4
    1492:	35 c0       	rjmp	.+106    	; 0x14fe <disk_initialize+0x158>
				}
			}
		} else {							/* SDv1 or MMCv3 */
			if (send_cmd(ACMD41, 0) <= 1) 	{
    1494:	40 e0       	ldi	r20, 0x00	; 0
    1496:	50 e0       	ldi	r21, 0x00	; 0
    1498:	ba 01       	movw	r22, r20
    149a:	89 ea       	ldi	r24, 0xA9	; 169
    149c:	f0 de       	rcall	.-544    	; 0x127e <send_cmd>
    149e:	82 30       	cpi	r24, 0x02	; 2
    14a0:	18 f0       	brcs	.+6      	; 0x14a8 <disk_initialize+0x102>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
    14a2:	01 e0       	ldi	r16, 0x01	; 1
    14a4:	11 e0       	ldi	r17, 0x01	; 1
    14a6:	02 c0       	rjmp	.+4      	; 0x14ac <disk_initialize+0x106>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
				}
			}
		} else {							/* SDv1 or MMCv3 */
			if (send_cmd(ACMD41, 0) <= 1) 	{
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
    14a8:	02 e0       	ldi	r16, 0x02	; 2
    14aa:	19 ea       	ldi	r17, 0xA9	; 169
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
			}
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
    14ac:	90 91 32 04 	lds	r25, 0x0432
    14b0:	99 23       	and	r25, r25
    14b2:	39 f0       	breq	.+14     	; 0x14c2 <disk_initialize+0x11c>
    14b4:	40 e0       	ldi	r20, 0x00	; 0
    14b6:	50 e0       	ldi	r21, 0x00	; 0
    14b8:	ba 01       	movw	r22, r20
    14ba:	81 2f       	mov	r24, r17
    14bc:	e0 de       	rcall	.-576    	; 0x127e <send_cmd>
    14be:	81 11       	cpse	r24, r1
    14c0:	f5 cf       	rjmp	.-22     	; 0x14ac <disk_initialize+0x106>
			if (!Timer1 || send_cmd(CMD16, CLUSTERSIZE) != 0)	/* Set R/W block length to 512 */
    14c2:	80 91 32 04 	lds	r24, 0x0432
    14c6:	88 23       	and	r24, r24
    14c8:	f1 f0       	breq	.+60     	; 0x1506 <disk_initialize+0x160>
    14ca:	40 e0       	ldi	r20, 0x00	; 0
    14cc:	52 e0       	ldi	r21, 0x02	; 2
    14ce:	60 e0       	ldi	r22, 0x00	; 0
    14d0:	70 e0       	ldi	r23, 0x00	; 0
    14d2:	80 e1       	ldi	r24, 0x10	; 16
    14d4:	d4 de       	rcall	.-600    	; 0x127e <send_cmd>
    14d6:	81 11       	cpse	r24, r1
    14d8:	16 c0       	rjmp	.+44     	; 0x1506 <disk_initialize+0x160>
				ty = 0;
		}
	}
	CardType = ty;
    14da:	00 93 30 04 	sts	0x0430, r16
	deselect();
    14de:	7d de       	rcall	.-774    	; 0x11da <deselect>

	if (ty) {			/* Initialization succeded */
    14e0:	00 23       	and	r16, r16
    14e2:	31 f0       	breq	.+12     	; 0x14f0 <disk_initialize+0x14a>
		Stat &= ~STA_NOINIT;		/* Clear STA_NOINIT */
    14e4:	80 91 06 01 	lds	r24, 0x0106
    14e8:	8e 7f       	andi	r24, 0xFE	; 254
    14ea:	80 93 06 01 	sts	0x0106, r24
    14ee:	01 c0       	rjmp	.+2      	; 0x14f2 <disk_initialize+0x14c>
//		FCLK_FAST();
	} else {			/* Initialization failed */
		power_off();
    14f0:	68 de       	rcall	.-816    	; 0x11c2 <power_off>
	}

	return Stat;
    14f2:	80 91 06 01 	lds	r24, 0x0106
    14f6:	0b c0       	rjmp	.+22     	; 0x150e <disk_initialize+0x168>
)
{
	BYTE n, cmd, ty, ocr[4];


	if (pdrv) return STA_NOINIT;		/* Supports only single drive */
    14f8:	81 e0       	ldi	r24, 0x01	; 1
    14fa:	09 c0       	rjmp	.+18     	; 0x150e <disk_initialize+0x168>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);		/* Get trailing return value of R7 resp */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
    14fc:	8c e0       	ldi	r24, 0x0C	; 12
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
			if (!Timer1 || send_cmd(CMD16, CLUSTERSIZE) != 0)	/* Set R/W block length to 512 */
				ty = 0;
		}
	}
	CardType = ty;
    14fe:	80 93 30 04 	sts	0x0430, r24
	deselect();
    1502:	6b de       	rcall	.-810    	; 0x11da <deselect>
    1504:	ef cf       	rjmp	.-34     	; 0x14e4 <disk_initialize+0x13e>
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
			if (!Timer1 || send_cmd(CMD16, CLUSTERSIZE) != 0)	/* Set R/W block length to 512 */
				ty = 0;
		}
	}
	CardType = ty;
    1506:	10 92 30 04 	sts	0x0430, r1
	deselect();
    150a:	67 de       	rcall	.-818    	; 0x11da <deselect>
    150c:	f1 cf       	rjmp	.-30     	; 0x14f0 <disk_initialize+0x14a>
	} else {			/* Initialization failed */
		power_off();
	}

	return Stat;
}
    150e:	0f 90       	pop	r0
    1510:	0f 90       	pop	r0
    1512:	0f 90       	pop	r0
    1514:	0f 90       	pop	r0
    1516:	df 91       	pop	r29
    1518:	cf 91       	pop	r28
    151a:	1f 91       	pop	r17
    151c:	0f 91       	pop	r16
    151e:	ff 90       	pop	r15
    1520:	ef 90       	pop	r14
    1522:	df 90       	pop	r13
    1524:	cf 90       	pop	r12
    1526:	08 95       	ret

00001528 <disk_status>:

DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber (0) */
)
{
	if (pdrv) return STA_NOINIT;	/* Supports only single drive */
    1528:	81 11       	cpse	r24, r1
    152a:	03 c0       	rjmp	.+6      	; 0x1532 <disk_status+0xa>
	return Stat;
    152c:	80 91 06 01 	lds	r24, 0x0106
    1530:	08 95       	ret

DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber (0) */
)
{
	if (pdrv) return STA_NOINIT;	/* Supports only single drive */
    1532:	81 e0       	ldi	r24, 0x01	; 1
	return Stat;
}
    1534:	08 95       	ret

00001536 <disk_read>:
	BYTE pdrv,			/* Physical drive nmuber (0) */
	BYTE *buff,			/* Pointer to the data buffer to store read data */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
    1536:	ff 92       	push	r15
    1538:	0f 93       	push	r16
    153a:	1f 93       	push	r17
    153c:	cf 93       	push	r28
    153e:	df 93       	push	r29
    1540:	eb 01       	movw	r28, r22
	BYTE cmd;


	if (pdrv || !count) return RES_PARERR;
    1542:	81 11       	cpse	r24, r1
    1544:	3f c0       	rjmp	.+126    	; 0x15c4 <disk_read+0x8e>
    1546:	01 15       	cp	r16, r1
    1548:	11 05       	cpc	r17, r1
    154a:	09 f4       	brne	.+2      	; 0x154e <disk_read+0x18>
    154c:	3d c0       	rjmp	.+122    	; 0x15c8 <disk_read+0x92>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    154e:	80 91 06 01 	lds	r24, 0x0106
    1552:	80 fd       	sbrc	r24, 0
    1554:	3b c0       	rjmp	.+118    	; 0x15cc <disk_read+0x96>

	if (!(CardType & CT_BLOCK)) sector *= CLUSTERSIZE;	/* Convert to byte address if needed */
    1556:	80 91 30 04 	lds	r24, 0x0430
    155a:	83 fd       	sbrc	r24, 3
    155c:	09 c0       	rjmp	.+18     	; 0x1570 <disk_read+0x3a>
    155e:	01 2e       	mov	r0, r17
    1560:	19 e0       	ldi	r17, 0x09	; 9
    1562:	22 0f       	add	r18, r18
    1564:	33 1f       	adc	r19, r19
    1566:	44 1f       	adc	r20, r20
    1568:	55 1f       	adc	r21, r21
    156a:	1a 95       	dec	r17
    156c:	d1 f7       	brne	.-12     	; 0x1562 <disk_read+0x2c>
    156e:	10 2d       	mov	r17, r0

	cmd = count > 1 ? CMD18 : CMD17;			/*  READ_MULTIPLE_BLOCK : READ_SINGLE_BLOCK */
    1570:	02 30       	cpi	r16, 0x02	; 2
    1572:	11 05       	cpc	r17, r1
    1574:	28 f4       	brcc	.+10     	; 0x1580 <disk_read+0x4a>
    1576:	0f 2e       	mov	r0, r31
    1578:	f1 e1       	ldi	r31, 0x11	; 17
    157a:	ff 2e       	mov	r15, r31
    157c:	f0 2d       	mov	r31, r0
    157e:	04 c0       	rjmp	.+8      	; 0x1588 <disk_read+0x52>
    1580:	0f 2e       	mov	r0, r31
    1582:	f2 e1       	ldi	r31, 0x12	; 18
    1584:	ff 2e       	mov	r15, r31
    1586:	f0 2d       	mov	r31, r0
	if (send_cmd(cmd, sector) == 0) {
    1588:	ba 01       	movw	r22, r20
    158a:	a9 01       	movw	r20, r18
    158c:	8f 2d       	mov	r24, r15
    158e:	77 de       	rcall	.-786    	; 0x127e <send_cmd>
    1590:	81 11       	cpse	r24, r1
    1592:	12 c0       	rjmp	.+36     	; 0x15b8 <disk_read+0x82>
		do {
			if (!rcvr_datablock(buff, CLUSTERSIZE)) break;
    1594:	60 e0       	ldi	r22, 0x00	; 0
    1596:	72 e0       	ldi	r23, 0x02	; 2
    1598:	ce 01       	movw	r24, r28
    159a:	38 de       	rcall	.-912    	; 0x120c <rcvr_datablock>
    159c:	89 2b       	or	r24, r25
    159e:	21 f0       	breq	.+8      	; 0x15a8 <disk_read+0x72>
			buff += CLUSTERSIZE;
    15a0:	de 5f       	subi	r29, 0xFE	; 254
		} while (--count);
    15a2:	01 50       	subi	r16, 0x01	; 1
    15a4:	11 09       	sbc	r17, r1
    15a6:	b1 f7       	brne	.-20     	; 0x1594 <disk_read+0x5e>
		if (cmd == CMD18) send_cmd(CMD12, 0);	/* STOP_TRANSMISSION */
    15a8:	82 e1       	ldi	r24, 0x12	; 18
    15aa:	f8 12       	cpse	r15, r24
    15ac:	05 c0       	rjmp	.+10     	; 0x15b8 <disk_read+0x82>
    15ae:	40 e0       	ldi	r20, 0x00	; 0
    15b0:	50 e0       	ldi	r21, 0x00	; 0
    15b2:	ba 01       	movw	r22, r20
    15b4:	8c e0       	ldi	r24, 0x0C	; 12
    15b6:	63 de       	rcall	.-826    	; 0x127e <send_cmd>
	}
	deselect();
    15b8:	10 de       	rcall	.-992    	; 0x11da <deselect>

	return count ? RES_ERROR : RES_OK;
    15ba:	81 e0       	ldi	r24, 0x01	; 1
    15bc:	01 2b       	or	r16, r17
    15be:	39 f4       	brne	.+14     	; 0x15ce <disk_read+0x98>
    15c0:	80 e0       	ldi	r24, 0x00	; 0
    15c2:	05 c0       	rjmp	.+10     	; 0x15ce <disk_read+0x98>
)
{
	BYTE cmd;


	if (pdrv || !count) return RES_PARERR;
    15c4:	84 e0       	ldi	r24, 0x04	; 4
    15c6:	03 c0       	rjmp	.+6      	; 0x15ce <disk_read+0x98>
    15c8:	84 e0       	ldi	r24, 0x04	; 4
    15ca:	01 c0       	rjmp	.+2      	; 0x15ce <disk_read+0x98>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    15cc:	83 e0       	ldi	r24, 0x03	; 3
		if (cmd == CMD18) send_cmd(CMD12, 0);	/* STOP_TRANSMISSION */
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
}
    15ce:	df 91       	pop	r29
    15d0:	cf 91       	pop	r28
    15d2:	1f 91       	pop	r17
    15d4:	0f 91       	pop	r16
    15d6:	ff 90       	pop	r15
    15d8:	08 95       	ret

000015da <disk_write>:
	BYTE pdrv,			/* Physical drive nmuber (0) */
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
    15da:	cf 92       	push	r12
    15dc:	df 92       	push	r13
    15de:	ef 92       	push	r14
    15e0:	ff 92       	push	r15
    15e2:	0f 93       	push	r16
    15e4:	1f 93       	push	r17
    15e6:	cf 93       	push	r28
    15e8:	df 93       	push	r29
    15ea:	eb 01       	movw	r28, r22
    15ec:	69 01       	movw	r12, r18
    15ee:	7a 01       	movw	r14, r20
	if (pdrv || !count) return RES_PARERR;
    15f0:	81 11       	cpse	r24, r1
    15f2:	51 c0       	rjmp	.+162    	; 0x1696 <disk_write+0xbc>
    15f4:	01 15       	cp	r16, r1
    15f6:	11 05       	cpc	r17, r1
    15f8:	09 f4       	brne	.+2      	; 0x15fc <disk_write+0x22>
    15fa:	4f c0       	rjmp	.+158    	; 0x169a <disk_write+0xc0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    15fc:	80 91 06 01 	lds	r24, 0x0106
    1600:	80 fd       	sbrc	r24, 0
    1602:	4d c0       	rjmp	.+154    	; 0x169e <disk_write+0xc4>
	if (Stat & STA_PROTECT) return RES_WRPRT;
    1604:	80 91 06 01 	lds	r24, 0x0106
    1608:	82 fd       	sbrc	r24, 2
    160a:	4b c0       	rjmp	.+150    	; 0x16a2 <disk_write+0xc8>

	if (!(CardType & CT_BLOCK)) sector *= CLUSTERSIZE;	/* Convert to byte address if needed */
    160c:	80 91 30 04 	lds	r24, 0x0430
    1610:	83 fd       	sbrc	r24, 3
    1612:	09 c0       	rjmp	.+18     	; 0x1626 <disk_write+0x4c>
    1614:	0b 2e       	mov	r0, r27
    1616:	b9 e0       	ldi	r27, 0x09	; 9
    1618:	cc 0c       	add	r12, r12
    161a:	dd 1c       	adc	r13, r13
    161c:	ee 1c       	adc	r14, r14
    161e:	ff 1c       	adc	r15, r15
    1620:	ba 95       	dec	r27
    1622:	d1 f7       	brne	.-12     	; 0x1618 <disk_write+0x3e>
    1624:	b0 2d       	mov	r27, r0

	if (count == 1) {	/* Single block write */
    1626:	01 30       	cpi	r16, 0x01	; 1
    1628:	11 05       	cpc	r17, r1
    162a:	89 f4       	brne	.+34     	; 0x164e <disk_write+0x74>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
    162c:	b7 01       	movw	r22, r14
    162e:	a6 01       	movw	r20, r12
    1630:	88 e1       	ldi	r24, 0x18	; 24
    1632:	25 de       	rcall	.-950    	; 0x127e <send_cmd>
    1634:	81 11       	cpse	r24, r1
    1636:	29 c0       	rjmp	.+82     	; 0x168a <disk_write+0xb0>
			&& xmit_datablock(buff, 0xFE))
    1638:	6e ef       	ldi	r22, 0xFE	; 254
    163a:	ce 01       	movw	r24, r28
    163c:	76 de       	rcall	.-788    	; 0x132a <xmit_datablock>
    163e:	31 e0       	ldi	r19, 0x01	; 1
    1640:	20 e0       	ldi	r18, 0x00	; 0
    1642:	89 2b       	or	r24, r25
    1644:	09 f0       	breq	.+2      	; 0x1648 <disk_write+0x6e>
    1646:	30 e0       	ldi	r19, 0x00	; 0
    1648:	03 2f       	mov	r16, r19
    164a:	12 2f       	mov	r17, r18
    164c:	1e c0       	rjmp	.+60     	; 0x168a <disk_write+0xb0>
			count = 0;
	}
	else {				/* Multiple block write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
    164e:	86 70       	andi	r24, 0x06	; 6
    1650:	29 f0       	breq	.+10     	; 0x165c <disk_write+0x82>
    1652:	a8 01       	movw	r20, r16
    1654:	60 e0       	ldi	r22, 0x00	; 0
    1656:	70 e0       	ldi	r23, 0x00	; 0
    1658:	87 e9       	ldi	r24, 0x97	; 151
    165a:	11 de       	rcall	.-990    	; 0x127e <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
    165c:	b7 01       	movw	r22, r14
    165e:	a6 01       	movw	r20, r12
    1660:	89 e1       	ldi	r24, 0x19	; 25
    1662:	0d de       	rcall	.-998    	; 0x127e <send_cmd>
    1664:	81 11       	cpse	r24, r1
    1666:	11 c0       	rjmp	.+34     	; 0x168a <disk_write+0xb0>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
    1668:	6c ef       	ldi	r22, 0xFC	; 252
    166a:	ce 01       	movw	r24, r28
    166c:	5e de       	rcall	.-836    	; 0x132a <xmit_datablock>
    166e:	89 2b       	or	r24, r25
    1670:	21 f0       	breq	.+8      	; 0x167a <disk_write+0xa0>
				buff += CLUSTERSIZE;
    1672:	de 5f       	subi	r29, 0xFE	; 254
			} while (--count);
    1674:	01 50       	subi	r16, 0x01	; 1
    1676:	11 09       	sbc	r17, r1
    1678:	b9 f7       	brne	.-18     	; 0x1668 <disk_write+0x8e>
			if (!xmit_datablock(0, 0xFD))	/* STOP_TRAN token */
    167a:	6d ef       	ldi	r22, 0xFD	; 253
    167c:	80 e0       	ldi	r24, 0x00	; 0
    167e:	90 e0       	ldi	r25, 0x00	; 0
    1680:	54 de       	rcall	.-856    	; 0x132a <xmit_datablock>
    1682:	89 2b       	or	r24, r25
    1684:	11 f4       	brne	.+4      	; 0x168a <disk_write+0xb0>
				count = 1;
    1686:	01 e0       	ldi	r16, 0x01	; 1
    1688:	10 e0       	ldi	r17, 0x00	; 0
		}
	}
	deselect();
    168a:	a7 dd       	rcall	.-1202   	; 0x11da <deselect>

	return count ? RES_ERROR : RES_OK;
    168c:	81 e0       	ldi	r24, 0x01	; 1
    168e:	01 2b       	or	r16, r17
    1690:	49 f4       	brne	.+18     	; 0x16a4 <disk_write+0xca>
    1692:	80 e0       	ldi	r24, 0x00	; 0
    1694:	07 c0       	rjmp	.+14     	; 0x16a4 <disk_write+0xca>
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
	if (pdrv || !count) return RES_PARERR;
    1696:	84 e0       	ldi	r24, 0x04	; 4
    1698:	05 c0       	rjmp	.+10     	; 0x16a4 <disk_write+0xca>
    169a:	84 e0       	ldi	r24, 0x04	; 4
    169c:	03 c0       	rjmp	.+6      	; 0x16a4 <disk_write+0xca>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    169e:	83 e0       	ldi	r24, 0x03	; 3
    16a0:	01 c0       	rjmp	.+2      	; 0x16a4 <disk_write+0xca>
	if (Stat & STA_PROTECT) return RES_WRPRT;
    16a2:	82 e0       	ldi	r24, 0x02	; 2
		}
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
}
    16a4:	df 91       	pop	r29
    16a6:	cf 91       	pop	r28
    16a8:	1f 91       	pop	r17
    16aa:	0f 91       	pop	r16
    16ac:	ff 90       	pop	r15
    16ae:	ef 90       	pop	r14
    16b0:	df 90       	pop	r13
    16b2:	cf 90       	pop	r12
    16b4:	08 95       	ret

000016b6 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
    16b6:	ef 92       	push	r14
    16b8:	ff 92       	push	r15
    16ba:	0f 93       	push	r16
    16bc:	1f 93       	push	r17
    16be:	cf 93       	push	r28
    16c0:	df 93       	push	r29
    16c2:	cd b7       	in	r28, 0x3d	; 61
    16c4:	de b7       	in	r29, 0x3e	; 62
    16c6:	60 97       	sbiw	r28, 0x10	; 16
    16c8:	0f b6       	in	r0, 0x3f	; 63
    16ca:	f8 94       	cli
    16cc:	de bf       	out	0x3e, r29	; 62
    16ce:	0f be       	out	0x3f, r0	; 63
    16d0:	cd bf       	out	0x3d, r28	; 61
	DRESULT res;
	BYTE n, csd[16], *ptr = buff;
	DWORD csize;


	if (pdrv) return RES_PARERR;
    16d2:	81 11       	cpse	r24, r1
    16d4:	7c c1       	rjmp	.+760    	; 0x19ce <disk_ioctl+0x318>

	res = RES_ERROR;

	if (Stat & STA_NOINIT) return RES_NOTRDY;
    16d6:	80 91 06 01 	lds	r24, 0x0106
    16da:	80 fd       	sbrc	r24, 0
    16dc:	7a c1       	rjmp	.+756    	; 0x19d2 <disk_ioctl+0x31c>
    16de:	7a 01       	movw	r14, r20

	switch (cmd) {
    16e0:	06 2f       	mov	r16, r22
    16e2:	10 e0       	ldi	r17, 0x00	; 0
    16e4:	07 33       	cpi	r16, 0x37	; 55
    16e6:	11 05       	cpc	r17, r1
    16e8:	08 f0       	brcs	.+2      	; 0x16ec <disk_ioctl+0x36>
    16ea:	59 c1       	rjmp	.+690    	; 0x199e <disk_ioctl+0x2e8>
    16ec:	f8 01       	movw	r30, r16
    16ee:	ea 5b       	subi	r30, 0xBA	; 186
    16f0:	ff 4f       	sbci	r31, 0xFF	; 255
    16f2:	0c 94 55 49 	jmp	0x92aa	; 0x92aa <__tablejump2__>
	case CTRL_SYNC :		/* Make sure that no pending write process. Do not remove this or written sector might not left updated. */
		if (select()) res = RES_OK;
    16f6:	75 dd       	rcall	.-1302   	; 0x11e2 <select>
    16f8:	11 e0       	ldi	r17, 0x01	; 1
    16fa:	89 2b       	or	r24, r25
    16fc:	09 f4       	brne	.+2      	; 0x1700 <disk_ioctl+0x4a>
    16fe:	64 c1       	rjmp	.+712    	; 0x19c8 <disk_ioctl+0x312>
    1700:	10 e0       	ldi	r17, 0x00	; 0
    1702:	62 c1       	rjmp	.+708    	; 0x19c8 <disk_ioctl+0x312>
		break;

	case GET_SECTOR_COUNT :	/* Get number of sectors on the disk (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
    1704:	40 e0       	ldi	r20, 0x00	; 0
    1706:	50 e0       	ldi	r21, 0x00	; 0
    1708:	ba 01       	movw	r22, r20
    170a:	89 e0       	ldi	r24, 0x09	; 9
    170c:	b8 dd       	rcall	.-1168   	; 0x127e <send_cmd>
    170e:	81 11       	cpse	r24, r1
    1710:	48 c1       	rjmp	.+656    	; 0x19a2 <disk_ioctl+0x2ec>
    1712:	60 e1       	ldi	r22, 0x10	; 16
    1714:	70 e0       	ldi	r23, 0x00	; 0
    1716:	ce 01       	movw	r24, r28
    1718:	01 96       	adiw	r24, 0x01	; 1
    171a:	78 dd       	rcall	.-1296   	; 0x120c <rcvr_datablock>
    171c:	89 2b       	or	r24, r25
    171e:	09 f4       	brne	.+2      	; 0x1722 <disk_ioctl+0x6c>
    1720:	42 c1       	rjmp	.+644    	; 0x19a6 <disk_ioctl+0x2f0>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
    1722:	89 81       	ldd	r24, Y+1	; 0x01
    1724:	82 95       	swap	r24
    1726:	86 95       	lsr	r24
    1728:	86 95       	lsr	r24
    172a:	83 70       	andi	r24, 0x03	; 3
    172c:	81 30       	cpi	r24, 0x01	; 1
    172e:	31 f5       	brne	.+76     	; 0x177c <disk_ioctl+0xc6>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
    1730:	88 85       	ldd	r24, Y+8	; 0x08
    1732:	8f 73       	andi	r24, 0x3F	; 63
    1734:	90 e0       	ldi	r25, 0x00	; 0
    1736:	a0 e0       	ldi	r26, 0x00	; 0
    1738:	b0 e0       	ldi	r27, 0x00	; 0
    173a:	dc 01       	movw	r26, r24
    173c:	99 27       	eor	r25, r25
    173e:	88 27       	eor	r24, r24
    1740:	01 96       	adiw	r24, 0x01	; 1
    1742:	a1 1d       	adc	r26, r1
    1744:	b1 1d       	adc	r27, r1
    1746:	29 85       	ldd	r18, Y+9	; 0x09
    1748:	30 e0       	ldi	r19, 0x00	; 0
    174a:	32 2f       	mov	r19, r18
    174c:	22 27       	eor	r18, r18
    174e:	4a 85       	ldd	r20, Y+10	; 0x0a
    1750:	24 0f       	add	r18, r20
    1752:	31 1d       	adc	r19, r1
    1754:	82 0f       	add	r24, r18
    1756:	93 1f       	adc	r25, r19
    1758:	a1 1d       	adc	r26, r1
    175a:	b1 1d       	adc	r27, r1
				*(DWORD*)buff = csize << 10;
    175c:	07 2e       	mov	r0, r23
    175e:	7a e0       	ldi	r23, 0x0A	; 10
    1760:	88 0f       	add	r24, r24
    1762:	99 1f       	adc	r25, r25
    1764:	aa 1f       	adc	r26, r26
    1766:	bb 1f       	adc	r27, r27
    1768:	7a 95       	dec	r23
    176a:	d1 f7       	brne	.-12     	; 0x1760 <disk_ioctl+0xaa>
    176c:	70 2d       	mov	r23, r0
    176e:	f7 01       	movw	r30, r14
    1770:	80 83       	st	Z, r24
    1772:	91 83       	std	Z+1, r25	; 0x01
    1774:	a2 83       	std	Z+2, r26	; 0x02
    1776:	b3 83       	std	Z+3, r27	; 0x03
			} else {					/* SDC ver 1.XX or MMC*/
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
				*(DWORD*)buff = csize << (n - 9);
			}
			res = RES_OK;
    1778:	10 e0       	ldi	r17, 0x00	; 0
    177a:	26 c1       	rjmp	.+588    	; 0x19c8 <disk_ioctl+0x312>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
				*(DWORD*)buff = csize << 10;
			} else {					/* SDC ver 1.XX or MMC*/
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
    177c:	89 85       	ldd	r24, Y+9	; 0x09
    177e:	82 95       	swap	r24
    1780:	86 95       	lsr	r24
    1782:	86 95       	lsr	r24
    1784:	83 70       	andi	r24, 0x03	; 3
    1786:	28 85       	ldd	r18, Y+8	; 0x08
    1788:	90 e0       	ldi	r25, 0x00	; 0
    178a:	f4 e0       	ldi	r31, 0x04	; 4
    178c:	2f 9f       	mul	r18, r31
    178e:	80 0d       	add	r24, r0
    1790:	91 1d       	adc	r25, r1
    1792:	11 24       	eor	r1, r1
    1794:	9c 01       	movw	r18, r24
    1796:	2f 5f       	subi	r18, 0xFF	; 255
    1798:	3f 4f       	sbci	r19, 0xFF	; 255
    179a:	8f 81       	ldd	r24, Y+7	; 0x07
    179c:	83 70       	andi	r24, 0x03	; 3
    179e:	90 e0       	ldi	r25, 0x00	; 0
    17a0:	98 2f       	mov	r25, r24
    17a2:	88 27       	eor	r24, r24
    17a4:	99 0f       	add	r25, r25
    17a6:	99 0f       	add	r25, r25
    17a8:	82 0f       	add	r24, r18
    17aa:	93 1f       	adc	r25, r19
    17ac:	a0 e0       	ldi	r26, 0x00	; 0
    17ae:	b0 e0       	ldi	r27, 0x00	; 0
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
				*(DWORD*)buff = csize << 10;
			} else {					/* SDC ver 1.XX or MMC*/
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
    17b0:	3e 81       	ldd	r19, Y+6	; 0x06
    17b2:	3f 70       	andi	r19, 0x0F	; 15
    17b4:	2b 85       	ldd	r18, Y+11	; 0x0b
    17b6:	22 1f       	adc	r18, r18
    17b8:	22 27       	eor	r18, r18
    17ba:	22 1f       	adc	r18, r18
    17bc:	32 0f       	add	r19, r18
    17be:	2a 85       	ldd	r18, Y+10	; 0x0a
    17c0:	23 70       	andi	r18, 0x03	; 3
    17c2:	22 0f       	add	r18, r18
    17c4:	23 0f       	add	r18, r19
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
				*(DWORD*)buff = csize << (n - 9);
    17c6:	27 50       	subi	r18, 0x07	; 7
    17c8:	04 c0       	rjmp	.+8      	; 0x17d2 <disk_ioctl+0x11c>
    17ca:	88 0f       	add	r24, r24
    17cc:	99 1f       	adc	r25, r25
    17ce:	aa 1f       	adc	r26, r26
    17d0:	bb 1f       	adc	r27, r27
    17d2:	2a 95       	dec	r18
    17d4:	d2 f7       	brpl	.-12     	; 0x17ca <disk_ioctl+0x114>
    17d6:	f7 01       	movw	r30, r14
    17d8:	80 83       	st	Z, r24
    17da:	91 83       	std	Z+1, r25	; 0x01
    17dc:	a2 83       	std	Z+2, r26	; 0x02
    17de:	b3 83       	std	Z+3, r27	; 0x03
			}
			res = RES_OK;
    17e0:	10 e0       	ldi	r17, 0x00	; 0
    17e2:	f2 c0       	rjmp	.+484    	; 0x19c8 <disk_ioctl+0x312>
		}
		break;

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDv2? */
    17e4:	10 91 30 04 	lds	r17, 0x0430
    17e8:	12 ff       	sbrs	r17, 2
    17ea:	2a c0       	rjmp	.+84     	; 0x1840 <disk_ioctl+0x18a>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
    17ec:	40 e0       	ldi	r20, 0x00	; 0
    17ee:	50 e0       	ldi	r21, 0x00	; 0
    17f0:	ba 01       	movw	r22, r20
    17f2:	8d e8       	ldi	r24, 0x8D	; 141
    17f4:	44 dd       	rcall	.-1400   	; 0x127e <send_cmd>
    17f6:	81 11       	cpse	r24, r1
    17f8:	d8 c0       	rjmp	.+432    	; 0x19aa <disk_ioctl+0x2f4>
				xchg_spi(0xFF);
    17fa:	8f ef       	ldi	r24, 0xFF	; 255
    17fc:	e8 dc       	rcall	.-1584   	; 0x11ce <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
    17fe:	60 e1       	ldi	r22, 0x10	; 16
    1800:	70 e0       	ldi	r23, 0x00	; 0
    1802:	ce 01       	movw	r24, r28
    1804:	01 96       	adiw	r24, 0x01	; 1
    1806:	02 dd       	rcall	.-1532   	; 0x120c <rcvr_datablock>
    1808:	89 2b       	or	r24, r25
    180a:	09 f4       	brne	.+2      	; 0x180e <disk_ioctl+0x158>
    180c:	d0 c0       	rjmp	.+416    	; 0x19ae <disk_ioctl+0x2f8>
    180e:	10 e3       	ldi	r17, 0x30	; 48
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
    1810:	8f ef       	ldi	r24, 0xFF	; 255
    1812:	dd dc       	rcall	.-1606   	; 0x11ce <xchg_spi>
    1814:	11 50       	subi	r17, 0x01	; 1
    1816:	e1 f7       	brne	.-8      	; 0x1810 <disk_ioctl+0x15a>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
    1818:	2b 85       	ldd	r18, Y+11	; 0x0b
    181a:	22 95       	swap	r18
    181c:	2f 70       	andi	r18, 0x0F	; 15
    181e:	80 e1       	ldi	r24, 0x10	; 16
    1820:	90 e0       	ldi	r25, 0x00	; 0
    1822:	a0 e0       	ldi	r26, 0x00	; 0
    1824:	b0 e0       	ldi	r27, 0x00	; 0
    1826:	04 c0       	rjmp	.+8      	; 0x1830 <disk_ioctl+0x17a>
    1828:	88 0f       	add	r24, r24
    182a:	99 1f       	adc	r25, r25
    182c:	aa 1f       	adc	r26, r26
    182e:	bb 1f       	adc	r27, r27
    1830:	2a 95       	dec	r18
    1832:	d2 f7       	brpl	.-12     	; 0x1828 <disk_ioctl+0x172>
    1834:	f7 01       	movw	r30, r14
    1836:	80 83       	st	Z, r24
    1838:	91 83       	std	Z+1, r25	; 0x01
    183a:	a2 83       	std	Z+2, r26	; 0x02
    183c:	b3 83       	std	Z+3, r27	; 0x03
    183e:	c4 c0       	rjmp	.+392    	; 0x19c8 <disk_ioctl+0x312>
					res = RES_OK;
				}
			}
		} else {					/* SDv1 or MMCv3 */
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
    1840:	40 e0       	ldi	r20, 0x00	; 0
    1842:	50 e0       	ldi	r21, 0x00	; 0
    1844:	ba 01       	movw	r22, r20
    1846:	89 e0       	ldi	r24, 0x09	; 9
    1848:	1a dd       	rcall	.-1484   	; 0x127e <send_cmd>
    184a:	81 11       	cpse	r24, r1
    184c:	b2 c0       	rjmp	.+356    	; 0x19b2 <disk_ioctl+0x2fc>
    184e:	60 e1       	ldi	r22, 0x10	; 16
    1850:	70 e0       	ldi	r23, 0x00	; 0
    1852:	ce 01       	movw	r24, r28
    1854:	01 96       	adiw	r24, 0x01	; 1
    1856:	da dc       	rcall	.-1612   	; 0x120c <rcvr_datablock>
    1858:	89 2b       	or	r24, r25
    185a:	09 f4       	brne	.+2      	; 0x185e <disk_ioctl+0x1a8>
    185c:	ac c0       	rjmp	.+344    	; 0x19b6 <disk_ioctl+0x300>
				if (CardType & CT_SD1) {	/* SDv1 */
    185e:	11 ff       	sbrs	r17, 1
    1860:	20 c0       	rjmp	.+64     	; 0x18a2 <disk_ioctl+0x1ec>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
    1862:	8c 85       	ldd	r24, Y+12	; 0x0c
    1864:	88 1f       	adc	r24, r24
    1866:	88 27       	eor	r24, r24
    1868:	88 1f       	adc	r24, r24
    186a:	90 e0       	ldi	r25, 0x00	; 0
    186c:	01 96       	adiw	r24, 0x01	; 1
    186e:	2b 85       	ldd	r18, Y+11	; 0x0b
    1870:	2f 73       	andi	r18, 0x3F	; 63
    1872:	82 0f       	add	r24, r18
    1874:	91 1d       	adc	r25, r1
    1876:	82 0f       	add	r24, r18
    1878:	91 1d       	adc	r25, r1
    187a:	2e 85       	ldd	r18, Y+14	; 0x0e
    187c:	22 95       	swap	r18
    187e:	26 95       	lsr	r18
    1880:	26 95       	lsr	r18
    1882:	23 70       	andi	r18, 0x03	; 3
    1884:	21 50       	subi	r18, 0x01	; 1
    1886:	02 c0       	rjmp	.+4      	; 0x188c <disk_ioctl+0x1d6>
    1888:	88 0f       	add	r24, r24
    188a:	99 1f       	adc	r25, r25
    188c:	2a 95       	dec	r18
    188e:	e2 f7       	brpl	.-8      	; 0x1888 <disk_ioctl+0x1d2>
    1890:	a0 e0       	ldi	r26, 0x00	; 0
    1892:	b0 e0       	ldi	r27, 0x00	; 0
    1894:	f7 01       	movw	r30, r14
    1896:	80 83       	st	Z, r24
    1898:	91 83       	std	Z+1, r25	; 0x01
    189a:	a2 83       	std	Z+2, r26	; 0x02
    189c:	b3 83       	std	Z+3, r27	; 0x03
				} else {					/* MMCv3 */
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
    189e:	10 e0       	ldi	r17, 0x00	; 0
    18a0:	93 c0       	rjmp	.+294    	; 0x19c8 <disk_ioctl+0x312>
		} else {					/* SDv1 or MMCv3 */
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
				if (CardType & CT_SD1) {	/* SDv1 */
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
				} else {					/* MMCv3 */
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
    18a2:	8c 85       	ldd	r24, Y+12	; 0x0c
    18a4:	28 2f       	mov	r18, r24
    18a6:	23 70       	andi	r18, 0x03	; 3
    18a8:	82 95       	swap	r24
    18aa:	86 95       	lsr	r24
    18ac:	87 70       	andi	r24, 0x07	; 7
    18ae:	90 e0       	ldi	r25, 0x00	; 0
    18b0:	f8 e0       	ldi	r31, 0x08	; 8
    18b2:	2f 9f       	mul	r18, r31
    18b4:	80 0d       	add	r24, r0
    18b6:	91 1d       	adc	r25, r1
    18b8:	11 24       	eor	r1, r1
    18ba:	01 96       	adiw	r24, 0x01	; 1
    18bc:	2b 85       	ldd	r18, Y+11	; 0x0b
    18be:	2c 77       	andi	r18, 0x7C	; 124
    18c0:	30 e0       	ldi	r19, 0x00	; 0
    18c2:	35 95       	asr	r19
    18c4:	27 95       	ror	r18
    18c6:	35 95       	asr	r19
    18c8:	27 95       	ror	r18
    18ca:	2f 5f       	subi	r18, 0xFF	; 255
    18cc:	3f 4f       	sbci	r19, 0xFF	; 255
    18ce:	82 9f       	mul	r24, r18
    18d0:	a0 01       	movw	r20, r0
    18d2:	83 9f       	mul	r24, r19
    18d4:	50 0d       	add	r21, r0
    18d6:	92 9f       	mul	r25, r18
    18d8:	50 0d       	add	r21, r0
    18da:	11 24       	eor	r1, r1
    18dc:	ca 01       	movw	r24, r20
    18de:	a0 e0       	ldi	r26, 0x00	; 0
    18e0:	b0 e0       	ldi	r27, 0x00	; 0
    18e2:	f7 01       	movw	r30, r14
    18e4:	80 83       	st	Z, r24
    18e6:	91 83       	std	Z+1, r25	; 0x01
    18e8:	a2 83       	std	Z+2, r26	; 0x02
    18ea:	b3 83       	std	Z+3, r27	; 0x03
				}
				res = RES_OK;
    18ec:	10 e0       	ldi	r17, 0x00	; 0
    18ee:	6c c0       	rjmp	.+216    	; 0x19c8 <disk_ioctl+0x312>
		break;

	/* Following commands are never used by FatFs module */

	case MMC_GET_TYPE :		/* Get card type flags (1 byte) */
		*ptr = CardType;
    18f0:	80 91 30 04 	lds	r24, 0x0430
    18f4:	fa 01       	movw	r30, r20
    18f6:	80 83       	st	Z, r24
		res = RES_OK;
    18f8:	10 e0       	ldi	r17, 0x00	; 0
		break;
    18fa:	66 c0       	rjmp	.+204    	; 0x19c8 <disk_ioctl+0x312>

	case MMC_GET_CSD :		/* Receive CSD as a data block (16 bytes) */
		if (send_cmd(CMD9, 0) == 0		/* READ_CSD */
    18fc:	40 e0       	ldi	r20, 0x00	; 0
    18fe:	50 e0       	ldi	r21, 0x00	; 0
    1900:	ba 01       	movw	r22, r20
    1902:	89 e0       	ldi	r24, 0x09	; 9
    1904:	bc dc       	rcall	.-1672   	; 0x127e <send_cmd>
    1906:	81 11       	cpse	r24, r1
    1908:	58 c0       	rjmp	.+176    	; 0x19ba <disk_ioctl+0x304>
			&& rcvr_datablock(ptr, 16))
    190a:	60 e1       	ldi	r22, 0x10	; 16
    190c:	70 e0       	ldi	r23, 0x00	; 0
    190e:	c7 01       	movw	r24, r14
    1910:	7d dc       	rcall	.-1798   	; 0x120c <rcvr_datablock>
    1912:	11 e0       	ldi	r17, 0x01	; 1
    1914:	89 2b       	or	r24, r25
    1916:	09 f4       	brne	.+2      	; 0x191a <disk_ioctl+0x264>
    1918:	57 c0       	rjmp	.+174    	; 0x19c8 <disk_ioctl+0x312>
    191a:	10 e0       	ldi	r17, 0x00	; 0
    191c:	55 c0       	rjmp	.+170    	; 0x19c8 <disk_ioctl+0x312>
			res = RES_OK;
		break;

	case MMC_GET_CID :		/* Receive CID as a data block (16 bytes) */
		if (send_cmd(CMD10, 0) == 0		/* READ_CID */
    191e:	40 e0       	ldi	r20, 0x00	; 0
    1920:	50 e0       	ldi	r21, 0x00	; 0
    1922:	ba 01       	movw	r22, r20
    1924:	8a e0       	ldi	r24, 0x0A	; 10
    1926:	ab dc       	rcall	.-1706   	; 0x127e <send_cmd>
    1928:	81 11       	cpse	r24, r1
    192a:	49 c0       	rjmp	.+146    	; 0x19be <disk_ioctl+0x308>
			&& rcvr_datablock(ptr, 16))
    192c:	60 e1       	ldi	r22, 0x10	; 16
    192e:	70 e0       	ldi	r23, 0x00	; 0
    1930:	c7 01       	movw	r24, r14
    1932:	6c dc       	rcall	.-1832   	; 0x120c <rcvr_datablock>
    1934:	11 e0       	ldi	r17, 0x01	; 1
    1936:	89 2b       	or	r24, r25
    1938:	09 f4       	brne	.+2      	; 0x193c <disk_ioctl+0x286>
    193a:	46 c0       	rjmp	.+140    	; 0x19c8 <disk_ioctl+0x312>
    193c:	10 e0       	ldi	r17, 0x00	; 0
    193e:	44 c0       	rjmp	.+136    	; 0x19c8 <disk_ioctl+0x312>
			res = RES_OK;
		break;

	case MMC_GET_OCR :		/* Receive OCR as an R3 resp (4 bytes) */
		if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
    1940:	40 e0       	ldi	r20, 0x00	; 0
    1942:	50 e0       	ldi	r21, 0x00	; 0
    1944:	ba 01       	movw	r22, r20
    1946:	8a e3       	ldi	r24, 0x3A	; 58
    1948:	9a dc       	rcall	.-1740   	; 0x127e <send_cmd>
    194a:	81 11       	cpse	r24, r1
    194c:	3a c0       	rjmp	.+116    	; 0x19c2 <disk_ioctl+0x30c>
    194e:	87 01       	movw	r16, r14
    1950:	f4 e0       	ldi	r31, 0x04	; 4
    1952:	ef 0e       	add	r14, r31
    1954:	f1 1c       	adc	r15, r1
			for (n = 4; n; n--) *ptr++ = xchg_spi(0xFF);
    1956:	8f ef       	ldi	r24, 0xFF	; 255
    1958:	3a dc       	rcall	.-1932   	; 0x11ce <xchg_spi>
    195a:	f8 01       	movw	r30, r16
    195c:	81 93       	st	Z+, r24
    195e:	8f 01       	movw	r16, r30
    1960:	ee 15       	cp	r30, r14
    1962:	ff 05       	cpc	r31, r15
    1964:	c1 f7       	brne	.-16     	; 0x1956 <disk_ioctl+0x2a0>
			res = RES_OK;
    1966:	10 e0       	ldi	r17, 0x00	; 0
    1968:	2f c0       	rjmp	.+94     	; 0x19c8 <disk_ioctl+0x312>
		}
		break;

	case MMC_GET_SDSTAT :	/* Receive SD statsu as a data block (64 bytes) */
		if (send_cmd(ACMD13, 0) == 0) {	/* SD_STATUS */
    196a:	40 e0       	ldi	r20, 0x00	; 0
    196c:	50 e0       	ldi	r21, 0x00	; 0
    196e:	ba 01       	movw	r22, r20
    1970:	8d e8       	ldi	r24, 0x8D	; 141
    1972:	85 dc       	rcall	.-1782   	; 0x127e <send_cmd>
    1974:	81 11       	cpse	r24, r1
    1976:	27 c0       	rjmp	.+78     	; 0x19c6 <disk_ioctl+0x310>
			xchg_spi(0xFF);
    1978:	8f ef       	ldi	r24, 0xFF	; 255
    197a:	29 dc       	rcall	.-1966   	; 0x11ce <xchg_spi>
			if (rcvr_datablock(ptr, 64))
    197c:	60 e4       	ldi	r22, 0x40	; 64
    197e:	70 e0       	ldi	r23, 0x00	; 0
    1980:	c7 01       	movw	r24, r14
    1982:	44 dc       	rcall	.-1912   	; 0x120c <rcvr_datablock>
    1984:	11 e0       	ldi	r17, 0x01	; 1
    1986:	89 2b       	or	r24, r25
    1988:	f9 f0       	breq	.+62     	; 0x19c8 <disk_ioctl+0x312>
    198a:	10 e0       	ldi	r17, 0x00	; 0
    198c:	1d c0       	rjmp	.+58     	; 0x19c8 <disk_ioctl+0x312>
				res = RES_OK;
		}
		break;

	case CTRL_POWER_OFF :	/* Power off */
		power_off();
    198e:	19 dc       	rcall	.-1998   	; 0x11c2 <power_off>
		Stat |= STA_NOINIT;
    1990:	80 91 06 01 	lds	r24, 0x0106
    1994:	81 60       	ori	r24, 0x01	; 1
    1996:	80 93 06 01 	sts	0x0106, r24
		res = RES_OK;
    199a:	10 e0       	ldi	r17, 0x00	; 0
		break;
    199c:	15 c0       	rjmp	.+42     	; 0x19c8 <disk_ioctl+0x312>

	default:
		res = RES_PARERR;
    199e:	14 e0       	ldi	r17, 0x04	; 4
    19a0:	13 c0       	rjmp	.+38     	; 0x19c8 <disk_ioctl+0x312>
	DWORD csize;


	if (pdrv) return RES_PARERR;

	res = RES_ERROR;
    19a2:	11 e0       	ldi	r17, 0x01	; 1
    19a4:	11 c0       	rjmp	.+34     	; 0x19c8 <disk_ioctl+0x312>
    19a6:	11 e0       	ldi	r17, 0x01	; 1
    19a8:	0f c0       	rjmp	.+30     	; 0x19c8 <disk_ioctl+0x312>
    19aa:	11 e0       	ldi	r17, 0x01	; 1
    19ac:	0d c0       	rjmp	.+26     	; 0x19c8 <disk_ioctl+0x312>
    19ae:	11 e0       	ldi	r17, 0x01	; 1
    19b0:	0b c0       	rjmp	.+22     	; 0x19c8 <disk_ioctl+0x312>
    19b2:	11 e0       	ldi	r17, 0x01	; 1
    19b4:	09 c0       	rjmp	.+18     	; 0x19c8 <disk_ioctl+0x312>
    19b6:	11 e0       	ldi	r17, 0x01	; 1
    19b8:	07 c0       	rjmp	.+14     	; 0x19c8 <disk_ioctl+0x312>
    19ba:	11 e0       	ldi	r17, 0x01	; 1
    19bc:	05 c0       	rjmp	.+10     	; 0x19c8 <disk_ioctl+0x312>
    19be:	11 e0       	ldi	r17, 0x01	; 1
    19c0:	03 c0       	rjmp	.+6      	; 0x19c8 <disk_ioctl+0x312>
    19c2:	11 e0       	ldi	r17, 0x01	; 1
    19c4:	01 c0       	rjmp	.+2      	; 0x19c8 <disk_ioctl+0x312>
    19c6:	11 e0       	ldi	r17, 0x01	; 1

	default:
		res = RES_PARERR;
	}

	deselect();
    19c8:	08 dc       	rcall	.-2032   	; 0x11da <deselect>

	return res;
    19ca:	81 2f       	mov	r24, r17
    19cc:	03 c0       	rjmp	.+6      	; 0x19d4 <disk_ioctl+0x31e>
	DRESULT res;
	BYTE n, csd[16], *ptr = buff;
	DWORD csize;


	if (pdrv) return RES_PARERR;
    19ce:	84 e0       	ldi	r24, 0x04	; 4
    19d0:	01 c0       	rjmp	.+2      	; 0x19d4 <disk_ioctl+0x31e>

	res = RES_ERROR;

	if (Stat & STA_NOINIT) return RES_NOTRDY;
    19d2:	83 e0       	ldi	r24, 0x03	; 3
	}

	deselect();

	return res;
}
    19d4:	60 96       	adiw	r28, 0x10	; 16
    19d6:	0f b6       	in	r0, 0x3f	; 63
    19d8:	f8 94       	cli
    19da:	de bf       	out	0x3e, r29	; 62
    19dc:	0f be       	out	0x3f, r0	; 63
    19de:	cd bf       	out	0x3d, r28	; 61
    19e0:	df 91       	pop	r29
    19e2:	cf 91       	pop	r28
    19e4:	1f 91       	pop	r17
    19e6:	0f 91       	pop	r16
    19e8:	ff 90       	pop	r15
    19ea:	ef 90       	pop	r14
    19ec:	08 95       	ret

000019ee <disk_timerproc>:
void disk_timerproc (void)
{
	BYTE n, s;


	n = Timer1;				/* 100Hz decrement timer */
    19ee:	80 91 32 04 	lds	r24, 0x0432
	if (n) Timer1 = --n;
    19f2:	88 23       	and	r24, r24
    19f4:	19 f0       	breq	.+6      	; 0x19fc <disk_timerproc+0xe>
    19f6:	81 50       	subi	r24, 0x01	; 1
    19f8:	80 93 32 04 	sts	0x0432, r24
	n = Timer2;
    19fc:	80 91 31 04 	lds	r24, 0x0431
	if (n) Timer2 = --n;
    1a00:	88 23       	and	r24, r24
    1a02:	19 f0       	breq	.+6      	; 0x1a0a <disk_timerproc+0x1c>
    1a04:	81 50       	subi	r24, 0x01	; 1
    1a06:	80 93 31 04 	sts	0x0431, r24
	
	s = Stat;
    1a0a:	80 91 06 01 	lds	r24, 0x0106
//	if (MMC_CD)				/* Card inserted */
//		s &= ~STA_NODISK;
//	else					/* Socket empty */
//		s |= (STA_NODISK | STA_NOINIT);

	Stat = s;				/* Update MMC status */
    1a0e:	80 93 06 01 	sts	0x0106, r24
    1a12:	08 95       	ret

00001a14 <_ZN7DisplayD1Ev>:
	else{
		for(uint8_t i = 0; i < 7; i++){
			Displayframe[x+(y/8)*SSD1306_WIDTH+i] |= 0;
		}
	}
}
    1a14:	9c 5f       	subi	r25, 0xFC	; 252
    1a16:	0c 94 28 25 	jmp	0x4a50	; 0x4a50 <_ZN3I2CD1Ev>
    1a1a:	08 95       	ret

00001a1c <_ZN7Display10clearFrameEv>:
    1a1c:	fc 01       	movw	r30, r24
    1a1e:	9c 5f       	subi	r25, 0xFC	; 252
    1a20:	11 92       	st	Z+, r1
    1a22:	e8 17       	cp	r30, r24
    1a24:	f9 07       	cpc	r31, r25
    1a26:	e1 f7       	brne	.-8      	; 0x1a20 <_ZN7Display10clearFrameEv+0x4>
    1a28:	08 95       	ret

00001a2a <_ZN7Display15ssd1306_commandEh>:
    1a2a:	1f 93       	push	r17
    1a2c:	cf 93       	push	r28
    1a2e:	df 93       	push	r29
    1a30:	16 2f       	mov	r17, r22
    1a32:	ec 01       	movw	r28, r24
    1a34:	dc 5f       	subi	r29, 0xFC	; 252
    1a36:	ce 01       	movw	r24, r28
    1a38:	0e 94 29 25 	call	0x4a52	; 0x4a52 <_ZN3I2C9twi_startEv>
    1a3c:	68 e7       	ldi	r22, 0x78	; 120
    1a3e:	ce 01       	movw	r24, r28
    1a40:	0e 94 31 25 	call	0x4a62	; 0x4a62 <_ZN3I2C9twi_writeEh>
    1a44:	60 e0       	ldi	r22, 0x00	; 0
    1a46:	ce 01       	movw	r24, r28
    1a48:	0e 94 31 25 	call	0x4a62	; 0x4a62 <_ZN3I2C9twi_writeEh>
    1a4c:	61 2f       	mov	r22, r17
    1a4e:	ce 01       	movw	r24, r28
    1a50:	0e 94 31 25 	call	0x4a62	; 0x4a62 <_ZN3I2C9twi_writeEh>
    1a54:	ce 01       	movw	r24, r28
    1a56:	0e 94 2d 25 	call	0x4a5a	; 0x4a5a <_ZN3I2C8twi_stopEv>
    1a5a:	df 91       	pop	r29
    1a5c:	cf 91       	pop	r28
    1a5e:	1f 91       	pop	r17
    1a60:	08 95       	ret

00001a62 <_ZN7Display17InitializeDisplayEv>:
    1a62:	cf 93       	push	r28
    1a64:	df 93       	push	r29
    1a66:	ec 01       	movw	r28, r24
    1a68:	6e ea       	ldi	r22, 0xAE	; 174
    1a6a:	df df       	rcall	.-66     	; 0x1a2a <_ZN7Display15ssd1306_commandEh>
    1a6c:	65 ed       	ldi	r22, 0xD5	; 213
    1a6e:	ce 01       	movw	r24, r28
    1a70:	dc df       	rcall	.-72     	; 0x1a2a <_ZN7Display15ssd1306_commandEh>
    1a72:	60 e8       	ldi	r22, 0x80	; 128
    1a74:	ce 01       	movw	r24, r28
    1a76:	d9 df       	rcall	.-78     	; 0x1a2a <_ZN7Display15ssd1306_commandEh>
    1a78:	68 ea       	ldi	r22, 0xA8	; 168
    1a7a:	ce 01       	movw	r24, r28
    1a7c:	d6 df       	rcall	.-84     	; 0x1a2a <_ZN7Display15ssd1306_commandEh>
    1a7e:	6f e3       	ldi	r22, 0x3F	; 63
    1a80:	ce 01       	movw	r24, r28
    1a82:	d3 df       	rcall	.-90     	; 0x1a2a <_ZN7Display15ssd1306_commandEh>
    1a84:	63 ed       	ldi	r22, 0xD3	; 211
    1a86:	ce 01       	movw	r24, r28
    1a88:	d0 df       	rcall	.-96     	; 0x1a2a <_ZN7Display15ssd1306_commandEh>
    1a8a:	60 e0       	ldi	r22, 0x00	; 0
    1a8c:	ce 01       	movw	r24, r28
    1a8e:	cd df       	rcall	.-102    	; 0x1a2a <_ZN7Display15ssd1306_commandEh>
    1a90:	60 e4       	ldi	r22, 0x40	; 64
    1a92:	ce 01       	movw	r24, r28
    1a94:	ca df       	rcall	.-108    	; 0x1a2a <_ZN7Display15ssd1306_commandEh>
    1a96:	6d e8       	ldi	r22, 0x8D	; 141
    1a98:	ce 01       	movw	r24, r28
    1a9a:	c7 df       	rcall	.-114    	; 0x1a2a <_ZN7Display15ssd1306_commandEh>
    1a9c:	64 e1       	ldi	r22, 0x14	; 20
    1a9e:	ce 01       	movw	r24, r28
    1aa0:	c4 df       	rcall	.-120    	; 0x1a2a <_ZN7Display15ssd1306_commandEh>
    1aa2:	60 e2       	ldi	r22, 0x20	; 32
    1aa4:	ce 01       	movw	r24, r28
    1aa6:	c1 df       	rcall	.-126    	; 0x1a2a <_ZN7Display15ssd1306_commandEh>
    1aa8:	60 e0       	ldi	r22, 0x00	; 0
    1aaa:	ce 01       	movw	r24, r28
    1aac:	be df       	rcall	.-132    	; 0x1a2a <_ZN7Display15ssd1306_commandEh>
    1aae:	61 ea       	ldi	r22, 0xA1	; 161
    1ab0:	ce 01       	movw	r24, r28
    1ab2:	bb df       	rcall	.-138    	; 0x1a2a <_ZN7Display15ssd1306_commandEh>
    1ab4:	68 ec       	ldi	r22, 0xC8	; 200
    1ab6:	ce 01       	movw	r24, r28
    1ab8:	b8 df       	rcall	.-144    	; 0x1a2a <_ZN7Display15ssd1306_commandEh>
    1aba:	6a ed       	ldi	r22, 0xDA	; 218
    1abc:	ce 01       	movw	r24, r28
    1abe:	b5 df       	rcall	.-150    	; 0x1a2a <_ZN7Display15ssd1306_commandEh>
    1ac0:	62 e1       	ldi	r22, 0x12	; 18
    1ac2:	ce 01       	movw	r24, r28
    1ac4:	b2 df       	rcall	.-156    	; 0x1a2a <_ZN7Display15ssd1306_commandEh>
    1ac6:	61 e8       	ldi	r22, 0x81	; 129
    1ac8:	ce 01       	movw	r24, r28
    1aca:	af df       	rcall	.-162    	; 0x1a2a <_ZN7Display15ssd1306_commandEh>
    1acc:	6f ec       	ldi	r22, 0xCF	; 207
    1ace:	ce 01       	movw	r24, r28
    1ad0:	ac df       	rcall	.-168    	; 0x1a2a <_ZN7Display15ssd1306_commandEh>
    1ad2:	69 ed       	ldi	r22, 0xD9	; 217
    1ad4:	ce 01       	movw	r24, r28
    1ad6:	a9 df       	rcall	.-174    	; 0x1a2a <_ZN7Display15ssd1306_commandEh>
    1ad8:	61 ef       	ldi	r22, 0xF1	; 241
    1ada:	ce 01       	movw	r24, r28
    1adc:	a6 df       	rcall	.-180    	; 0x1a2a <_ZN7Display15ssd1306_commandEh>
    1ade:	6b ed       	ldi	r22, 0xDB	; 219
    1ae0:	ce 01       	movw	r24, r28
    1ae2:	a3 df       	rcall	.-186    	; 0x1a2a <_ZN7Display15ssd1306_commandEh>
    1ae4:	60 e4       	ldi	r22, 0x40	; 64
    1ae6:	ce 01       	movw	r24, r28
    1ae8:	a0 df       	rcall	.-192    	; 0x1a2a <_ZN7Display15ssd1306_commandEh>
    1aea:	64 ea       	ldi	r22, 0xA4	; 164
    1aec:	ce 01       	movw	r24, r28
    1aee:	9d df       	rcall	.-198    	; 0x1a2a <_ZN7Display15ssd1306_commandEh>
    1af0:	66 ea       	ldi	r22, 0xA6	; 166
    1af2:	ce 01       	movw	r24, r28
    1af4:	9a df       	rcall	.-204    	; 0x1a2a <_ZN7Display15ssd1306_commandEh>
    1af6:	6f ea       	ldi	r22, 0xAF	; 175
    1af8:	ce 01       	movw	r24, r28
    1afa:	97 df       	rcall	.-210    	; 0x1a2a <_ZN7Display15ssd1306_commandEh>
    1afc:	df 91       	pop	r29
    1afe:	cf 91       	pop	r28
    1b00:	08 95       	ret

00001b02 <_ZN7DisplayC1Ev>:
    1b02:	cf 93       	push	r28
    1b04:	df 93       	push	r29
    1b06:	ec 01       	movw	r28, r24
    1b08:	9c 5f       	subi	r25, 0xFC	; 252
    1b0a:	0e 94 24 25 	call	0x4a48	; 0x4a48 <_ZN3I2CC1Ev>
    1b0e:	ce 01       	movw	r24, r28
    1b10:	a8 df       	rcall	.-176    	; 0x1a62 <_ZN7Display17InitializeDisplayEv>
    1b12:	ce 01       	movw	r24, r28
    1b14:	83 df       	rcall	.-250    	; 0x1a1c <_ZN7Display10clearFrameEv>
    1b16:	df 91       	pop	r29
    1b18:	cf 91       	pop	r28
    1b1a:	08 95       	ret

00001b1c <_ZN7Display9sendFrameEv>:
    1b1c:	ef 92       	push	r14
    1b1e:	ff 92       	push	r15
    1b20:	0f 93       	push	r16
    1b22:	1f 93       	push	r17
    1b24:	cf 93       	push	r28
    1b26:	df 93       	push	r29
    1b28:	ec 01       	movw	r28, r24
    1b2a:	61 e2       	ldi	r22, 0x21	; 33
    1b2c:	7e df       	rcall	.-260    	; 0x1a2a <_ZN7Display15ssd1306_commandEh>
    1b2e:	60 e0       	ldi	r22, 0x00	; 0
    1b30:	ce 01       	movw	r24, r28
    1b32:	7b df       	rcall	.-266    	; 0x1a2a <_ZN7Display15ssd1306_commandEh>
    1b34:	6f e7       	ldi	r22, 0x7F	; 127
    1b36:	ce 01       	movw	r24, r28
    1b38:	78 df       	rcall	.-272    	; 0x1a2a <_ZN7Display15ssd1306_commandEh>
    1b3a:	62 e2       	ldi	r22, 0x22	; 34
    1b3c:	ce 01       	movw	r24, r28
    1b3e:	75 df       	rcall	.-278    	; 0x1a2a <_ZN7Display15ssd1306_commandEh>
    1b40:	60 e0       	ldi	r22, 0x00	; 0
    1b42:	ce 01       	movw	r24, r28
    1b44:	72 df       	rcall	.-284    	; 0x1a2a <_ZN7Display15ssd1306_commandEh>
    1b46:	67 e0       	ldi	r22, 0x07	; 7
    1b48:	ce 01       	movw	r24, r28
    1b4a:	6f df       	rcall	.-290    	; 0x1a2a <_ZN7Display15ssd1306_commandEh>
    1b4c:	8e 01       	movw	r16, r28
    1b4e:	1c 5f       	subi	r17, 0xFC	; 252
    1b50:	c8 01       	movw	r24, r16
    1b52:	0e 94 29 25 	call	0x4a52	; 0x4a52 <_ZN3I2C9twi_startEv>
    1b56:	68 e7       	ldi	r22, 0x78	; 120
    1b58:	c8 01       	movw	r24, r16
    1b5a:	0e 94 31 25 	call	0x4a62	; 0x4a62 <_ZN3I2C9twi_writeEh>
    1b5e:	60 e4       	ldi	r22, 0x40	; 64
    1b60:	c8 01       	movw	r24, r16
    1b62:	0e 94 31 25 	call	0x4a62	; 0x4a62 <_ZN3I2C9twi_writeEh>
    1b66:	78 01       	movw	r14, r16
    1b68:	69 91       	ld	r22, Y+
    1b6a:	c8 01       	movw	r24, r16
    1b6c:	0e 94 31 25 	call	0x4a62	; 0x4a62 <_ZN3I2C9twi_writeEh>
    1b70:	ce 15       	cp	r28, r14
    1b72:	df 05       	cpc	r29, r15
    1b74:	c9 f7       	brne	.-14     	; 0x1b68 <_ZN7Display9sendFrameEv+0x4c>
    1b76:	c8 01       	movw	r24, r16
    1b78:	0e 94 2d 25 	call	0x4a5a	; 0x4a5a <_ZN3I2C8twi_stopEv>
    1b7c:	df 91       	pop	r29
    1b7e:	cf 91       	pop	r28
    1b80:	1f 91       	pop	r17
    1b82:	0f 91       	pop	r16
    1b84:	ff 90       	pop	r15
    1b86:	ef 90       	pop	r14
    1b88:	08 95       	ret

00001b8a <_ZN7Display9drawPixelEhhh>:
    1b8a:	66 23       	and	r22, r22
    1b8c:	ac f1       	brlt	.+106    	; 0x1bf8 <_ZN7Display9drawPixelEhhh+0x6e>
    1b8e:	40 34       	cpi	r20, 0x40	; 64
    1b90:	98 f5       	brcc	.+102    	; 0x1bf8 <_ZN7Display9drawPixelEhhh+0x6e>
    1b92:	21 11       	cpse	r18, r1
    1b94:	19 c0       	rjmp	.+50     	; 0x1bc8 <_ZN7Display9drawPixelEhhh+0x3e>
    1b96:	24 2f       	mov	r18, r20
    1b98:	26 95       	lsr	r18
    1b9a:	26 95       	lsr	r18
    1b9c:	26 95       	lsr	r18
    1b9e:	50 e8       	ldi	r21, 0x80	; 128
    1ba0:	25 9f       	mul	r18, r21
    1ba2:	90 01       	movw	r18, r0
    1ba4:	11 24       	eor	r1, r1
    1ba6:	26 0f       	add	r18, r22
    1ba8:	31 1d       	adc	r19, r1
    1baa:	fc 01       	movw	r30, r24
    1bac:	e2 0f       	add	r30, r18
    1bae:	f3 1f       	adc	r31, r19
    1bb0:	47 70       	andi	r20, 0x07	; 7
    1bb2:	81 e0       	ldi	r24, 0x01	; 1
    1bb4:	90 e0       	ldi	r25, 0x00	; 0
    1bb6:	02 c0       	rjmp	.+4      	; 0x1bbc <_ZN7Display9drawPixelEhhh+0x32>
    1bb8:	88 0f       	add	r24, r24
    1bba:	99 1f       	adc	r25, r25
    1bbc:	4a 95       	dec	r20
    1bbe:	e2 f7       	brpl	.-8      	; 0x1bb8 <_ZN7Display9drawPixelEhhh+0x2e>
    1bc0:	90 81       	ld	r25, Z
    1bc2:	89 2b       	or	r24, r25
    1bc4:	80 83       	st	Z, r24
    1bc6:	08 95       	ret
    1bc8:	24 2f       	mov	r18, r20
    1bca:	26 95       	lsr	r18
    1bcc:	26 95       	lsr	r18
    1bce:	26 95       	lsr	r18
    1bd0:	30 e8       	ldi	r19, 0x80	; 128
    1bd2:	23 9f       	mul	r18, r19
    1bd4:	f0 01       	movw	r30, r0
    1bd6:	11 24       	eor	r1, r1
    1bd8:	e6 0f       	add	r30, r22
    1bda:	f1 1d       	adc	r31, r1
    1bdc:	e8 0f       	add	r30, r24
    1bde:	f9 1f       	adc	r31, r25
    1be0:	47 70       	andi	r20, 0x07	; 7
    1be2:	81 e0       	ldi	r24, 0x01	; 1
    1be4:	90 e0       	ldi	r25, 0x00	; 0
    1be6:	02 c0       	rjmp	.+4      	; 0x1bec <_ZN7Display9drawPixelEhhh+0x62>
    1be8:	88 0f       	add	r24, r24
    1bea:	99 1f       	adc	r25, r25
    1bec:	4a 95       	dec	r20
    1bee:	e2 f7       	brpl	.-8      	; 0x1be8 <_ZN7Display9drawPixelEhhh+0x5e>
    1bf0:	80 95       	com	r24
    1bf2:	90 81       	ld	r25, Z
    1bf4:	89 23       	and	r24, r25
    1bf6:	80 83       	st	Z, r24
    1bf8:	08 95       	ret

00001bfa <_ZN7Display9drawVLineEhhh>:
    1bfa:	ff 92       	push	r15
    1bfc:	0f 93       	push	r16
    1bfe:	1f 93       	push	r17
    1c00:	cf 93       	push	r28
    1c02:	df 93       	push	r29
    1c04:	22 23       	and	r18, r18
    1c06:	69 f0       	breq	.+26     	; 0x1c22 <_ZN7Display9drawVLineEhhh+0x28>
    1c08:	c4 2f       	mov	r28, r20
    1c0a:	f6 2e       	mov	r15, r22
    1c0c:	8c 01       	movw	r16, r24
    1c0e:	d2 2f       	mov	r29, r18
    1c10:	d4 0f       	add	r29, r20
    1c12:	20 e0       	ldi	r18, 0x00	; 0
    1c14:	4c 2f       	mov	r20, r28
    1c16:	6f 2d       	mov	r22, r15
    1c18:	c8 01       	movw	r24, r16
    1c1a:	b7 df       	rcall	.-146    	; 0x1b8a <_ZN7Display9drawPixelEhhh>
    1c1c:	cf 5f       	subi	r28, 0xFF	; 255
    1c1e:	cd 13       	cpse	r28, r29
    1c20:	f8 cf       	rjmp	.-16     	; 0x1c12 <_ZN7Display9drawVLineEhhh+0x18>
    1c22:	df 91       	pop	r29
    1c24:	cf 91       	pop	r28
    1c26:	1f 91       	pop	r17
    1c28:	0f 91       	pop	r16
    1c2a:	ff 90       	pop	r15
    1c2c:	08 95       	ret

00001c2e <_ZN7Display9drawHLineEhhh>:
    1c2e:	ff 92       	push	r15
    1c30:	0f 93       	push	r16
    1c32:	1f 93       	push	r17
    1c34:	cf 93       	push	r28
    1c36:	df 93       	push	r29
    1c38:	22 23       	and	r18, r18
    1c3a:	69 f0       	breq	.+26     	; 0x1c56 <_ZN7Display9drawHLineEhhh+0x28>
    1c3c:	f4 2e       	mov	r15, r20
    1c3e:	c6 2f       	mov	r28, r22
    1c40:	8c 01       	movw	r16, r24
    1c42:	d2 2f       	mov	r29, r18
    1c44:	d6 0f       	add	r29, r22
    1c46:	20 e0       	ldi	r18, 0x00	; 0
    1c48:	4f 2d       	mov	r20, r15
    1c4a:	6c 2f       	mov	r22, r28
    1c4c:	c8 01       	movw	r24, r16
    1c4e:	9d df       	rcall	.-198    	; 0x1b8a <_ZN7Display9drawPixelEhhh>
    1c50:	cf 5f       	subi	r28, 0xFF	; 255
    1c52:	cd 13       	cpse	r28, r29
    1c54:	f8 cf       	rjmp	.-16     	; 0x1c46 <_ZN7Display9drawHLineEhhh+0x18>
    1c56:	df 91       	pop	r29
    1c58:	cf 91       	pop	r28
    1c5a:	1f 91       	pop	r17
    1c5c:	0f 91       	pop	r16
    1c5e:	ff 90       	pop	r15
    1c60:	08 95       	ret

00001c62 <_ZN7Display9draw_ASCIEhhh>:
    1c62:	0f 93       	push	r16
    1c64:	1f 93       	push	r17
    1c66:	cf 93       	push	r28
    1c68:	df 93       	push	r29
    1c6a:	61 32       	cpi	r22, 0x21	; 33
    1c6c:	08 f4       	brcc	.+2      	; 0x1c70 <_ZN7Display9draw_ASCIEhhh+0xe>
    1c6e:	3e c0       	rjmp	.+124    	; 0x1cec <_ZN7Display9draw_ASCIEhhh+0x8a>
    1c70:	a4 2f       	mov	r26, r20
    1c72:	b0 e0       	ldi	r27, 0x00	; 0
    1c74:	02 2f       	mov	r16, r18
    1c76:	06 95       	lsr	r16
    1c78:	06 95       	lsr	r16
    1c7a:	06 95       	lsr	r16
    1c7c:	30 e8       	ldi	r19, 0x80	; 128
    1c7e:	03 9f       	mul	r16, r19
    1c80:	80 01       	movw	r16, r0
    1c82:	11 24       	eor	r1, r1
    1c84:	61 52       	subi	r22, 0x21	; 33
    1c86:	70 e0       	ldi	r23, 0x00	; 0
    1c88:	fb 01       	movw	r30, r22
    1c8a:	ee 0f       	add	r30, r30
    1c8c:	ff 1f       	adc	r31, r31
    1c8e:	ee 0f       	add	r30, r30
    1c90:	ff 1f       	adc	r31, r31
    1c92:	e6 0f       	add	r30, r22
    1c94:	f7 1f       	adc	r31, r23
    1c96:	ea 52       	subi	r30, 0x2A	; 42
    1c98:	fc 4f       	sbci	r31, 0xFC	; 252
    1c9a:	ad 01       	movw	r20, r26
    1c9c:	40 0f       	add	r20, r16
    1c9e:	51 1f       	adc	r21, r17
    1ca0:	ec 01       	movw	r28, r24
    1ca2:	c4 0f       	add	r28, r20
    1ca4:	d5 1f       	adc	r29, r21
    1ca6:	00 58       	subi	r16, 0x80	; 128
    1ca8:	1f 4f       	sbci	r17, 0xFF	; 255
    1caa:	a0 0f       	add	r26, r16
    1cac:	b1 1f       	adc	r27, r17
    1cae:	a8 0f       	add	r26, r24
    1cb0:	b9 1f       	adc	r27, r25
    1cb2:	4b 5f       	subi	r20, 0xFB	; 251
    1cb4:	5f 4f       	sbci	r21, 0xFF	; 255
    1cb6:	48 0f       	add	r20, r24
    1cb8:	59 1f       	adc	r21, r25
    1cba:	27 70       	andi	r18, 0x07	; 7
    1cbc:	64 91       	lpm	r22, Z
    1cbe:	70 e0       	ldi	r23, 0x00	; 0
    1cc0:	02 2e       	mov	r0, r18
    1cc2:	02 c0       	rjmp	.+4      	; 0x1cc8 <_ZN7Display9draw_ASCIEhhh+0x66>
    1cc4:	66 0f       	add	r22, r22
    1cc6:	77 1f       	adc	r23, r23
    1cc8:	0a 94       	dec	r0
    1cca:	e2 f7       	brpl	.-8      	; 0x1cc4 <_ZN7Display9draw_ASCIEhhh+0x62>
    1ccc:	98 81       	ld	r25, Y
    1cce:	96 2b       	or	r25, r22
    1cd0:	99 93       	st	Y+, r25
    1cd2:	67 2f       	mov	r22, r23
    1cd4:	77 27       	eor	r23, r23
    1cd6:	61 15       	cp	r22, r1
    1cd8:	71 05       	cpc	r23, r1
    1cda:	19 f0       	breq	.+6      	; 0x1ce2 <_ZN7Display9draw_ASCIEhhh+0x80>
    1cdc:	8c 91       	ld	r24, X
    1cde:	68 2b       	or	r22, r24
    1ce0:	6c 93       	st	X, r22
    1ce2:	31 96       	adiw	r30, 0x01	; 1
    1ce4:	11 96       	adiw	r26, 0x01	; 1
    1ce6:	c4 17       	cp	r28, r20
    1ce8:	d5 07       	cpc	r29, r21
    1cea:	41 f7       	brne	.-48     	; 0x1cbc <_ZN7Display9draw_ASCIEhhh+0x5a>
    1cec:	df 91       	pop	r29
    1cee:	cf 91       	pop	r28
    1cf0:	1f 91       	pop	r17
    1cf2:	0f 91       	pop	r16
    1cf4:	08 95       	ret

00001cf6 <_ZN7Display16draw_number16x16Ehhh>:
    1cf6:	cf 92       	push	r12
    1cf8:	df 92       	push	r13
    1cfa:	ef 92       	push	r14
    1cfc:	ff 92       	push	r15
    1cfe:	0f 93       	push	r16
    1d00:	1f 93       	push	r17
    1d02:	cf 93       	push	r28
    1d04:	df 93       	push	r29
    1d06:	6a 30       	cpi	r22, 0x0A	; 10
    1d08:	08 f0       	brcs	.+2      	; 0x1d0c <_ZN7Display16draw_number16x16Ehhh+0x16>
    1d0a:	66 c0       	rjmp	.+204    	; 0x1dd8 <_ZN7Display16draw_number16x16Ehhh+0xe2>
    1d0c:	50 e0       	ldi	r21, 0x00	; 0
    1d0e:	02 2f       	mov	r16, r18
    1d10:	06 95       	lsr	r16
    1d12:	06 95       	lsr	r16
    1d14:	06 95       	lsr	r16
    1d16:	10 e0       	ldi	r17, 0x00	; 0
    1d18:	d8 01       	movw	r26, r16
    1d1a:	b6 95       	lsr	r27
    1d1c:	ba 2f       	mov	r27, r26
    1d1e:	aa 27       	eor	r26, r26
    1d20:	b7 95       	ror	r27
    1d22:	a7 95       	ror	r26
    1d24:	0f 5f       	subi	r16, 0xFF	; 255
    1d26:	1f 4f       	sbci	r17, 0xFF	; 255
    1d28:	16 95       	lsr	r17
    1d2a:	10 2f       	mov	r17, r16
    1d2c:	00 27       	eor	r16, r16
    1d2e:	17 95       	ror	r17
    1d30:	07 95       	ror	r16
    1d32:	7d 01       	movw	r14, r26
    1d34:	30 e8       	ldi	r19, 0x80	; 128
    1d36:	e3 0e       	add	r14, r19
    1d38:	f1 1c       	adc	r15, r1
    1d3a:	e4 0e       	add	r14, r20
    1d3c:	f5 1e       	adc	r15, r21
    1d3e:	e8 0e       	add	r14, r24
    1d40:	f9 1e       	adc	r15, r25
    1d42:	ea 01       	movw	r28, r20
    1d44:	c0 0f       	add	r28, r16
    1d46:	d1 1f       	adc	r29, r17
    1d48:	60 97       	sbiw	r28, 0x10	; 16
    1d4a:	c8 0f       	add	r28, r24
    1d4c:	d9 1f       	adc	r29, r25
    1d4e:	04 0f       	add	r16, r20
    1d50:	15 1f       	adc	r17, r21
    1d52:	00 59       	subi	r16, 0x90	; 144
    1d54:	1f 4f       	sbci	r17, 0xFF	; 255
    1d56:	08 0f       	add	r16, r24
    1d58:	19 1f       	adc	r17, r25
    1d5a:	a4 0f       	add	r26, r20
    1d5c:	b5 1f       	adc	r27, r21
    1d5e:	a8 0f       	add	r26, r24
    1d60:	b9 1f       	adc	r27, r25
    1d62:	80 e2       	ldi	r24, 0x20	; 32
    1d64:	68 9f       	mul	r22, r24
    1d66:	b0 01       	movw	r22, r0
    1d68:	11 24       	eor	r1, r1
    1d6a:	40 e0       	ldi	r20, 0x00	; 0
    1d6c:	50 e0       	ldi	r21, 0x00	; 0
    1d6e:	27 70       	andi	r18, 0x07	; 7
    1d70:	fa 01       	movw	r30, r20
    1d72:	e6 0f       	add	r30, r22
    1d74:	f7 1f       	adc	r31, r23
    1d76:	ea 56       	subi	r30, 0x6A	; 106
    1d78:	fd 4f       	sbci	r31, 0xFD	; 253
    1d7a:	e4 91       	lpm	r30, Z
    1d7c:	f0 e0       	ldi	r31, 0x00	; 0
    1d7e:	02 2e       	mov	r0, r18
    1d80:	02 c0       	rjmp	.+4      	; 0x1d86 <_ZN7Display16draw_number16x16Ehhh+0x90>
    1d82:	ee 0f       	add	r30, r30
    1d84:	ff 1f       	adc	r31, r31
    1d86:	0a 94       	dec	r0
    1d88:	e2 f7       	brpl	.-8      	; 0x1d82 <_ZN7Display16draw_number16x16Ehhh+0x8c>
    1d8a:	40 31       	cpi	r20, 0x10	; 16
    1d8c:	68 f4       	brcc	.+26     	; 0x1da8 <_ZN7Display16draw_number16x16Ehhh+0xb2>
    1d8e:	8c 91       	ld	r24, X
    1d90:	8e 2b       	or	r24, r30
    1d92:	8c 93       	st	X, r24
    1d94:	cf 2e       	mov	r12, r31
    1d96:	dd 24       	eor	r13, r13
    1d98:	c1 14       	cp	r12, r1
    1d9a:	d1 04       	cpc	r13, r1
    1d9c:	89 f0       	breq	.+34     	; 0x1dc0 <_ZN7Display16draw_number16x16Ehhh+0xca>
    1d9e:	f7 01       	movw	r30, r14
    1da0:	80 81       	ld	r24, Z
    1da2:	8c 29       	or	r24, r12
    1da4:	80 83       	st	Z, r24
    1da6:	0c c0       	rjmp	.+24     	; 0x1dc0 <_ZN7Display16draw_number16x16Ehhh+0xca>
    1da8:	88 81       	ld	r24, Y
    1daa:	8e 2b       	or	r24, r30
    1dac:	88 83       	st	Y, r24
    1dae:	cf 2e       	mov	r12, r31
    1db0:	dd 24       	eor	r13, r13
    1db2:	c1 14       	cp	r12, r1
    1db4:	d1 04       	cpc	r13, r1
    1db6:	21 f0       	breq	.+8      	; 0x1dc0 <_ZN7Display16draw_number16x16Ehhh+0xca>
    1db8:	f8 01       	movw	r30, r16
    1dba:	80 81       	ld	r24, Z
    1dbc:	8c 29       	or	r24, r12
    1dbe:	80 83       	st	Z, r24
    1dc0:	4f 5f       	subi	r20, 0xFF	; 255
    1dc2:	5f 4f       	sbci	r21, 0xFF	; 255
    1dc4:	ff ef       	ldi	r31, 0xFF	; 255
    1dc6:	ef 1a       	sub	r14, r31
    1dc8:	ff 0a       	sbc	r15, r31
    1dca:	21 96       	adiw	r28, 0x01	; 1
    1dcc:	0f 5f       	subi	r16, 0xFF	; 255
    1dce:	1f 4f       	sbci	r17, 0xFF	; 255
    1dd0:	11 96       	adiw	r26, 0x01	; 1
    1dd2:	40 32       	cpi	r20, 0x20	; 32
    1dd4:	51 05       	cpc	r21, r1
    1dd6:	61 f6       	brne	.-104    	; 0x1d70 <_ZN7Display16draw_number16x16Ehhh+0x7a>
    1dd8:	df 91       	pop	r29
    1dda:	cf 91       	pop	r28
    1ddc:	1f 91       	pop	r17
    1dde:	0f 91       	pop	r16
    1de0:	ff 90       	pop	r15
    1de2:	ef 90       	pop	r14
    1de4:	df 90       	pop	r13
    1de6:	cf 90       	pop	r12
    1de8:	08 95       	ret

00001dea <_ZN7Display6analogEhhhh>:

void Display::analog(uint8_t stunde, uint8_t minute, uint8_t sekunde, uint8_t sekanzeige){
    1dea:	2f 92       	push	r2
    1dec:	3f 92       	push	r3
    1dee:	4f 92       	push	r4
    1df0:	5f 92       	push	r5
    1df2:	6f 92       	push	r6
    1df4:	7f 92       	push	r7
    1df6:	8f 92       	push	r8
    1df8:	9f 92       	push	r9
    1dfa:	af 92       	push	r10
    1dfc:	bf 92       	push	r11
    1dfe:	cf 92       	push	r12
    1e00:	df 92       	push	r13
    1e02:	ef 92       	push	r14
    1e04:	ff 92       	push	r15
    1e06:	0f 93       	push	r16
    1e08:	1f 93       	push	r17
    1e0a:	cf 93       	push	r28
    1e0c:	df 93       	push	r29
    1e0e:	cd b7       	in	r28, 0x3d	; 61
    1e10:	de b7       	in	r29, 0x3e	; 62
    1e12:	27 97       	sbiw	r28, 0x07	; 7
    1e14:	0f b6       	in	r0, 0x3f	; 63
    1e16:	f8 94       	cli
    1e18:	de bf       	out	0x3e, r29	; 62
    1e1a:	0f be       	out	0x3f, r0	; 63
    1e1c:	cd bf       	out	0x3d, r28	; 61
    1e1e:	9f 83       	std	Y+7, r25	; 0x07
    1e20:	8e 83       	std	Y+6, r24	; 0x06
    1e22:	6d 83       	std	Y+5, r22	; 0x05
    1e24:	34 2e       	mov	r3, r20
	uint8_t Px=32-1;
	uint8_t Py=32-1;
	uint8_t x=0,y=0;
	float winkel=0;
	
	if (sekanzeige)
    1e26:	00 23       	and	r16, r16
    1e28:	09 f4       	brne	.+2      	; 0x1e2c <_ZN7Display6analogEhhhh+0x42>
    1e2a:	26 c1       	rjmp	.+588    	; 0x2078 <_ZN7Display6analogEhhhh+0x28e>
	{
		//Berechnen des Sekundenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(sekunde*6.0)*M_PI/180.0-M_PI/2.0;
    1e2c:	62 2f       	mov	r22, r18
    1e2e:	70 e0       	ldi	r23, 0x00	; 0
    1e30:	80 e0       	ldi	r24, 0x00	; 0
    1e32:	90 e0       	ldi	r25, 0x00	; 0
    1e34:	0e 94 cf 42 	call	0x859e	; 0x859e <__floatsisf>
    1e38:	20 e0       	ldi	r18, 0x00	; 0
    1e3a:	30 e0       	ldi	r19, 0x00	; 0
    1e3c:	40 ec       	ldi	r20, 0xC0	; 192
    1e3e:	50 e4       	ldi	r21, 0x40	; 64
    1e40:	0e 94 f8 43 	call	0x87f0	; 0x87f0 <__mulsf3>
    1e44:	2b ed       	ldi	r18, 0xDB	; 219
    1e46:	3f e0       	ldi	r19, 0x0F	; 15
    1e48:	49 e4       	ldi	r20, 0x49	; 73
    1e4a:	50 e4       	ldi	r21, 0x40	; 64
    1e4c:	0e 94 f8 43 	call	0x87f0	; 0x87f0 <__mulsf3>
    1e50:	20 e0       	ldi	r18, 0x00	; 0
    1e52:	30 e0       	ldi	r19, 0x00	; 0
    1e54:	44 e3       	ldi	r20, 0x34	; 52
    1e56:	53 e4       	ldi	r21, 0x43	; 67
    1e58:	0e 94 fa 41 	call	0x83f4	; 0x83f4 <__divsf3>
    1e5c:	2b ed       	ldi	r18, 0xDB	; 219
    1e5e:	3f e0       	ldi	r19, 0x0F	; 15
    1e60:	49 ec       	ldi	r20, 0xC9	; 201
    1e62:	5f e3       	ldi	r21, 0x3F	; 63
    1e64:	0e 94 92 41 	call	0x8324	; 0x8324 <__subsf3>
    1e68:	6b 01       	movw	r12, r22
    1e6a:	7c 01       	movw	r14, r24
			x=(uint8_t) i*cos(winkel)+Px;
    1e6c:	0e 94 f7 41 	call	0x83ee	; 0x83ee <cos>
    1e70:	4b 01       	movw	r8, r22
    1e72:	5c 01       	movw	r10, r24
			y=(uint8_t) i*sin(winkel)+Py;
    1e74:	c7 01       	movw	r24, r14
    1e76:	b6 01       	movw	r22, r12
    1e78:	0e 94 a7 44 	call	0x894e	; 0x894e <sin>
    1e7c:	2b 01       	movw	r4, r22
    1e7e:	3c 01       	movw	r6, r24
    1e80:	00 e0       	ldi	r16, 0x00	; 0
    1e82:	10 e0       	ldi	r17, 0x00	; 0
	if (sekanzeige)
	{
		//Berechnen des Sekundenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(sekunde*6.0)*M_PI/180.0-M_PI/2.0;
			x=(uint8_t) i*cos(winkel)+Px;
    1e84:	b8 01       	movw	r22, r16
    1e86:	01 2e       	mov	r0, r17
    1e88:	00 0c       	add	r0, r0
    1e8a:	88 0b       	sbc	r24, r24
    1e8c:	99 0b       	sbc	r25, r25
    1e8e:	0e 94 cf 42 	call	0x859e	; 0x859e <__floatsisf>
    1e92:	6b 01       	movw	r12, r22
    1e94:	7c 01       	movw	r14, r24
			y=(uint8_t) i*sin(winkel)+Py;
    1e96:	a3 01       	movw	r20, r6
    1e98:	92 01       	movw	r18, r4
    1e9a:	0e 94 f8 43 	call	0x87f0	; 0x87f0 <__mulsf3>
    1e9e:	20 e0       	ldi	r18, 0x00	; 0
    1ea0:	30 e0       	ldi	r19, 0x00	; 0
    1ea2:	48 ef       	ldi	r20, 0xF8	; 248
    1ea4:	51 e4       	ldi	r21, 0x41	; 65
    1ea6:	0e 94 93 41 	call	0x8326	; 0x8326 <__addsf3>
    1eaa:	0e 94 a1 42 	call	0x8542	; 0x8542 <__fixunssfsi>
    1eae:	26 2e       	mov	r2, r22
	if (sekanzeige)
	{
		//Berechnen des Sekundenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(sekunde*6.0)*M_PI/180.0-M_PI/2.0;
			x=(uint8_t) i*cos(winkel)+Px;
    1eb0:	a5 01       	movw	r20, r10
    1eb2:	94 01       	movw	r18, r8
    1eb4:	c7 01       	movw	r24, r14
    1eb6:	b6 01       	movw	r22, r12
    1eb8:	0e 94 f8 43 	call	0x87f0	; 0x87f0 <__mulsf3>
    1ebc:	20 e0       	ldi	r18, 0x00	; 0
    1ebe:	30 e0       	ldi	r19, 0x00	; 0
    1ec0:	48 ef       	ldi	r20, 0xF8	; 248
    1ec2:	51 e4       	ldi	r21, 0x41	; 65
    1ec4:	0e 94 93 41 	call	0x8326	; 0x8326 <__addsf3>
    1ec8:	0e 94 a1 42 	call	0x8542	; 0x8542 <__fixunssfsi>
			y=(uint8_t) i*sin(winkel)+Py;

			drawPixel(x,y,0);
    1ecc:	20 e0       	ldi	r18, 0x00	; 0
    1ece:	42 2d       	mov	r20, r2
    1ed0:	8e 81       	ldd	r24, Y+6	; 0x06
    1ed2:	9f 81       	ldd	r25, Y+7	; 0x07
    1ed4:	5a de       	rcall	.-844    	; 0x1b8a <_ZN7Display9drawPixelEhhh>
    1ed6:	0f 5f       	subi	r16, 0xFF	; 255
    1ed8:	1f 4f       	sbci	r17, 0xFF	; 255
	float winkel=0;
	
	if (sekanzeige)
	{
		//Berechnen des Sekundenzeigers
		for(uint8_t i=0;i<r;i++){
    1eda:	09 31       	cpi	r16, 0x19	; 25
    1edc:	11 05       	cpc	r17, r1
    1ede:	91 f6       	brne	.-92     	; 0x1e84 <_ZN7Display6analogEhhhh+0x9a>
		}

		r=21;
		//Berechnen des Minutenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(minute*6.0)*M_PI/180.0-M_PI/2.0;
    1ee0:	63 2d       	mov	r22, r3
    1ee2:	70 e0       	ldi	r23, 0x00	; 0
    1ee4:	80 e0       	ldi	r24, 0x00	; 0
    1ee6:	90 e0       	ldi	r25, 0x00	; 0
    1ee8:	0e 94 cf 42 	call	0x859e	; 0x859e <__floatsisf>
    1eec:	69 83       	std	Y+1, r22	; 0x01
    1eee:	7a 83       	std	Y+2, r23	; 0x02
    1ef0:	8b 83       	std	Y+3, r24	; 0x03
    1ef2:	9c 83       	std	Y+4, r25	; 0x04
    1ef4:	20 e0       	ldi	r18, 0x00	; 0
    1ef6:	30 e0       	ldi	r19, 0x00	; 0
    1ef8:	40 ec       	ldi	r20, 0xC0	; 192
    1efa:	50 e4       	ldi	r21, 0x40	; 64
    1efc:	0e 94 f8 43 	call	0x87f0	; 0x87f0 <__mulsf3>
    1f00:	2b ed       	ldi	r18, 0xDB	; 219
    1f02:	3f e0       	ldi	r19, 0x0F	; 15
    1f04:	49 e4       	ldi	r20, 0x49	; 73
    1f06:	50 e4       	ldi	r21, 0x40	; 64
    1f08:	0e 94 f8 43 	call	0x87f0	; 0x87f0 <__mulsf3>
    1f0c:	20 e0       	ldi	r18, 0x00	; 0
    1f0e:	30 e0       	ldi	r19, 0x00	; 0
    1f10:	44 e3       	ldi	r20, 0x34	; 52
    1f12:	53 e4       	ldi	r21, 0x43	; 67
    1f14:	0e 94 fa 41 	call	0x83f4	; 0x83f4 <__divsf3>
    1f18:	2b ed       	ldi	r18, 0xDB	; 219
    1f1a:	3f e0       	ldi	r19, 0x0F	; 15
    1f1c:	49 ec       	ldi	r20, 0xC9	; 201
    1f1e:	5f e3       	ldi	r21, 0x3F	; 63
    1f20:	0e 94 92 41 	call	0x8324	; 0x8324 <__subsf3>
    1f24:	6b 01       	movw	r12, r22
    1f26:	7c 01       	movw	r14, r24
			x=(uint8_t) i*cos(winkel)+Px;
    1f28:	0e 94 f7 41 	call	0x83ee	; 0x83ee <cos>
    1f2c:	2b 01       	movw	r4, r22
    1f2e:	3c 01       	movw	r6, r24
			y=(uint8_t) i*sin(winkel)+Py;
    1f30:	c7 01       	movw	r24, r14
    1f32:	b6 01       	movw	r22, r12
    1f34:	0e 94 a7 44 	call	0x894e	; 0x894e <sin>
    1f38:	4b 01       	movw	r8, r22
    1f3a:	5c 01       	movw	r10, r24
    1f3c:	00 e0       	ldi	r16, 0x00	; 0
    1f3e:	10 e0       	ldi	r17, 0x00	; 0

		r=21;
		//Berechnen des Minutenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(minute*6.0)*M_PI/180.0-M_PI/2.0;
			x=(uint8_t) i*cos(winkel)+Px;
    1f40:	b8 01       	movw	r22, r16
    1f42:	01 2e       	mov	r0, r17
    1f44:	00 0c       	add	r0, r0
    1f46:	88 0b       	sbc	r24, r24
    1f48:	99 0b       	sbc	r25, r25
    1f4a:	0e 94 cf 42 	call	0x859e	; 0x859e <__floatsisf>
    1f4e:	6b 01       	movw	r12, r22
    1f50:	7c 01       	movw	r14, r24
			y=(uint8_t) i*sin(winkel)+Py;
    1f52:	a5 01       	movw	r20, r10
    1f54:	94 01       	movw	r18, r8
    1f56:	0e 94 f8 43 	call	0x87f0	; 0x87f0 <__mulsf3>
    1f5a:	20 e0       	ldi	r18, 0x00	; 0
    1f5c:	30 e0       	ldi	r19, 0x00	; 0
    1f5e:	48 ef       	ldi	r20, 0xF8	; 248
    1f60:	51 e4       	ldi	r21, 0x41	; 65
    1f62:	0e 94 93 41 	call	0x8326	; 0x8326 <__addsf3>
    1f66:	0e 94 a1 42 	call	0x8542	; 0x8542 <__fixunssfsi>
    1f6a:	36 2e       	mov	r3, r22

		r=21;
		//Berechnen des Minutenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(minute*6.0)*M_PI/180.0-M_PI/2.0;
			x=(uint8_t) i*cos(winkel)+Px;
    1f6c:	a3 01       	movw	r20, r6
    1f6e:	92 01       	movw	r18, r4
    1f70:	c7 01       	movw	r24, r14
    1f72:	b6 01       	movw	r22, r12
    1f74:	0e 94 f8 43 	call	0x87f0	; 0x87f0 <__mulsf3>
    1f78:	20 e0       	ldi	r18, 0x00	; 0
    1f7a:	30 e0       	ldi	r19, 0x00	; 0
    1f7c:	48 ef       	ldi	r20, 0xF8	; 248
    1f7e:	51 e4       	ldi	r21, 0x41	; 65
    1f80:	0e 94 93 41 	call	0x8326	; 0x8326 <__addsf3>
    1f84:	0e 94 a1 42 	call	0x8542	; 0x8542 <__fixunssfsi>
			y=(uint8_t) i*sin(winkel)+Py;

			drawPixel(x,y,0);
    1f88:	20 e0       	ldi	r18, 0x00	; 0
    1f8a:	43 2d       	mov	r20, r3
    1f8c:	8e 81       	ldd	r24, Y+6	; 0x06
    1f8e:	9f 81       	ldd	r25, Y+7	; 0x07
    1f90:	fc dd       	rcall	.-1032   	; 0x1b8a <_ZN7Display9drawPixelEhhh>
    1f92:	0f 5f       	subi	r16, 0xFF	; 255
    1f94:	1f 4f       	sbci	r17, 0xFF	; 255
			drawPixel(x,y,0);
		}

		r=21;
		//Berechnen des Minutenzeigers
		for(uint8_t i=0;i<r;i++){
    1f96:	05 31       	cpi	r16, 0x15	; 21
    1f98:	11 05       	cpc	r17, r1
    1f9a:	91 f6       	brne	.-92     	; 0x1f40 <_ZN7Display6analogEhhhh+0x156>
		}

		r=13;
		//Berechnen des Stundenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(stunde*30.0+minute/2.0)*M_PI/180.0-M_PI/2.0;
    1f9c:	2d 81       	ldd	r18, Y+5	; 0x05
    1f9e:	62 2f       	mov	r22, r18
    1fa0:	70 e0       	ldi	r23, 0x00	; 0
    1fa2:	80 e0       	ldi	r24, 0x00	; 0
    1fa4:	90 e0       	ldi	r25, 0x00	; 0
    1fa6:	0e 94 cf 42 	call	0x859e	; 0x859e <__floatsisf>
    1faa:	20 e0       	ldi	r18, 0x00	; 0
    1fac:	30 e0       	ldi	r19, 0x00	; 0
    1fae:	40 ef       	ldi	r20, 0xF0	; 240
    1fb0:	51 e4       	ldi	r21, 0x41	; 65
    1fb2:	0e 94 f8 43 	call	0x87f0	; 0x87f0 <__mulsf3>
    1fb6:	6b 01       	movw	r12, r22
    1fb8:	7c 01       	movw	r14, r24
    1fba:	20 e0       	ldi	r18, 0x00	; 0
    1fbc:	30 e0       	ldi	r19, 0x00	; 0
    1fbe:	40 e0       	ldi	r20, 0x00	; 0
    1fc0:	5f e3       	ldi	r21, 0x3F	; 63
    1fc2:	69 81       	ldd	r22, Y+1	; 0x01
    1fc4:	7a 81       	ldd	r23, Y+2	; 0x02
    1fc6:	8b 81       	ldd	r24, Y+3	; 0x03
    1fc8:	9c 81       	ldd	r25, Y+4	; 0x04
    1fca:	0e 94 f8 43 	call	0x87f0	; 0x87f0 <__mulsf3>
    1fce:	9b 01       	movw	r18, r22
    1fd0:	ac 01       	movw	r20, r24
    1fd2:	c7 01       	movw	r24, r14
    1fd4:	b6 01       	movw	r22, r12
    1fd6:	0e 94 93 41 	call	0x8326	; 0x8326 <__addsf3>
    1fda:	2b ed       	ldi	r18, 0xDB	; 219
    1fdc:	3f e0       	ldi	r19, 0x0F	; 15
    1fde:	49 e4       	ldi	r20, 0x49	; 73
    1fe0:	50 e4       	ldi	r21, 0x40	; 64
    1fe2:	0e 94 f8 43 	call	0x87f0	; 0x87f0 <__mulsf3>
    1fe6:	20 e0       	ldi	r18, 0x00	; 0
    1fe8:	30 e0       	ldi	r19, 0x00	; 0
    1fea:	44 e3       	ldi	r20, 0x34	; 52
    1fec:	53 e4       	ldi	r21, 0x43	; 67
    1fee:	0e 94 fa 41 	call	0x83f4	; 0x83f4 <__divsf3>
    1ff2:	2b ed       	ldi	r18, 0xDB	; 219
    1ff4:	3f e0       	ldi	r19, 0x0F	; 15
    1ff6:	49 ec       	ldi	r20, 0xC9	; 201
    1ff8:	5f e3       	ldi	r21, 0x3F	; 63
    1ffa:	0e 94 92 41 	call	0x8324	; 0x8324 <__subsf3>
    1ffe:	6b 01       	movw	r12, r22
    2000:	7c 01       	movw	r14, r24
			x= (uint8_t) i*cos(winkel) +Px;
    2002:	0e 94 f7 41 	call	0x83ee	; 0x83ee <cos>
    2006:	4b 01       	movw	r8, r22
    2008:	5c 01       	movw	r10, r24
			y= (uint8_t) i*sin(winkel) +Py;
    200a:	c7 01       	movw	r24, r14
    200c:	b6 01       	movw	r22, r12
    200e:	0e 94 a7 44 	call	0x894e	; 0x894e <sin>
    2012:	2b 01       	movw	r4, r22
    2014:	3c 01       	movw	r6, r24
    2016:	00 e0       	ldi	r16, 0x00	; 0
    2018:	10 e0       	ldi	r17, 0x00	; 0

		r=13;
		//Berechnen des Stundenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(stunde*30.0+minute/2.0)*M_PI/180.0-M_PI/2.0;
			x= (uint8_t) i*cos(winkel) +Px;
    201a:	b8 01       	movw	r22, r16
    201c:	01 2e       	mov	r0, r17
    201e:	00 0c       	add	r0, r0
    2020:	88 0b       	sbc	r24, r24
    2022:	99 0b       	sbc	r25, r25
    2024:	0e 94 cf 42 	call	0x859e	; 0x859e <__floatsisf>
    2028:	6b 01       	movw	r12, r22
    202a:	7c 01       	movw	r14, r24
			y= (uint8_t) i*sin(winkel) +Py;
    202c:	a3 01       	movw	r20, r6
    202e:	92 01       	movw	r18, r4
    2030:	0e 94 f8 43 	call	0x87f0	; 0x87f0 <__mulsf3>
    2034:	20 e0       	ldi	r18, 0x00	; 0
    2036:	30 e0       	ldi	r19, 0x00	; 0
    2038:	48 ef       	ldi	r20, 0xF8	; 248
    203a:	51 e4       	ldi	r21, 0x41	; 65
    203c:	0e 94 93 41 	call	0x8326	; 0x8326 <__addsf3>
    2040:	0e 94 a1 42 	call	0x8542	; 0x8542 <__fixunssfsi>
    2044:	36 2e       	mov	r3, r22

		r=13;
		//Berechnen des Stundenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(stunde*30.0+minute/2.0)*M_PI/180.0-M_PI/2.0;
			x= (uint8_t) i*cos(winkel) +Px;
    2046:	a5 01       	movw	r20, r10
    2048:	94 01       	movw	r18, r8
    204a:	c7 01       	movw	r24, r14
    204c:	b6 01       	movw	r22, r12
    204e:	0e 94 f8 43 	call	0x87f0	; 0x87f0 <__mulsf3>
    2052:	20 e0       	ldi	r18, 0x00	; 0
    2054:	30 e0       	ldi	r19, 0x00	; 0
    2056:	48 ef       	ldi	r20, 0xF8	; 248
    2058:	51 e4       	ldi	r21, 0x41	; 65
    205a:	0e 94 93 41 	call	0x8326	; 0x8326 <__addsf3>
    205e:	0e 94 a1 42 	call	0x8542	; 0x8542 <__fixunssfsi>
			y= (uint8_t) i*sin(winkel) +Py;

			drawPixel(x,y,0);
    2062:	20 e0       	ldi	r18, 0x00	; 0
    2064:	43 2d       	mov	r20, r3
    2066:	8e 81       	ldd	r24, Y+6	; 0x06
    2068:	9f 81       	ldd	r25, Y+7	; 0x07
    206a:	8f dd       	rcall	.-1250   	; 0x1b8a <_ZN7Display9drawPixelEhhh>
    206c:	0f 5f       	subi	r16, 0xFF	; 255
    206e:	1f 4f       	sbci	r17, 0xFF	; 255
			drawPixel(x,y,0);
		}

		r=13;
		//Berechnen des Stundenzeigers
		for(uint8_t i=0;i<r;i++){
    2070:	0d 30       	cpi	r16, 0x0D	; 13
    2072:	11 05       	cpc	r17, r1
    2074:	91 f6       	brne	.-92     	; 0x201a <_ZN7Display6analogEhhhh+0x230>
    2076:	cb c0       	rjmp	.+406    	; 0x220e <_ZN7Display6analogEhhhh+0x424>
	}
	else{
		r=25;
		//Berechnen des Minutenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(minute*6.0)*M_PI/180.0-M_PI/2.0;
    2078:	64 2f       	mov	r22, r20
    207a:	70 e0       	ldi	r23, 0x00	; 0
    207c:	80 e0       	ldi	r24, 0x00	; 0
    207e:	90 e0       	ldi	r25, 0x00	; 0
    2080:	0e 94 cf 42 	call	0x859e	; 0x859e <__floatsisf>
    2084:	69 83       	std	Y+1, r22	; 0x01
    2086:	7a 83       	std	Y+2, r23	; 0x02
    2088:	8b 83       	std	Y+3, r24	; 0x03
    208a:	9c 83       	std	Y+4, r25	; 0x04
    208c:	20 e0       	ldi	r18, 0x00	; 0
    208e:	30 e0       	ldi	r19, 0x00	; 0
    2090:	40 ec       	ldi	r20, 0xC0	; 192
    2092:	50 e4       	ldi	r21, 0x40	; 64
    2094:	0e 94 f8 43 	call	0x87f0	; 0x87f0 <__mulsf3>
    2098:	2b ed       	ldi	r18, 0xDB	; 219
    209a:	3f e0       	ldi	r19, 0x0F	; 15
    209c:	49 e4       	ldi	r20, 0x49	; 73
    209e:	50 e4       	ldi	r21, 0x40	; 64
    20a0:	0e 94 f8 43 	call	0x87f0	; 0x87f0 <__mulsf3>
    20a4:	20 e0       	ldi	r18, 0x00	; 0
    20a6:	30 e0       	ldi	r19, 0x00	; 0
    20a8:	44 e3       	ldi	r20, 0x34	; 52
    20aa:	53 e4       	ldi	r21, 0x43	; 67
    20ac:	0e 94 fa 41 	call	0x83f4	; 0x83f4 <__divsf3>
    20b0:	2b ed       	ldi	r18, 0xDB	; 219
    20b2:	3f e0       	ldi	r19, 0x0F	; 15
    20b4:	49 ec       	ldi	r20, 0xC9	; 201
    20b6:	5f e3       	ldi	r21, 0x3F	; 63
    20b8:	0e 94 92 41 	call	0x8324	; 0x8324 <__subsf3>
    20bc:	6b 01       	movw	r12, r22
    20be:	7c 01       	movw	r14, r24
			x=(uint8_t) i*cos(winkel)+Px;
    20c0:	0e 94 f7 41 	call	0x83ee	; 0x83ee <cos>
    20c4:	2b 01       	movw	r4, r22
    20c6:	3c 01       	movw	r6, r24
			y=(uint8_t) i*sin(winkel)+Py;
    20c8:	c7 01       	movw	r24, r14
    20ca:	b6 01       	movw	r22, r12
    20cc:	0e 94 a7 44 	call	0x894e	; 0x894e <sin>
    20d0:	4b 01       	movw	r8, r22
    20d2:	5c 01       	movw	r10, r24
    20d4:	00 e0       	ldi	r16, 0x00	; 0
    20d6:	10 e0       	ldi	r17, 0x00	; 0
	else{
		r=25;
		//Berechnen des Minutenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(minute*6.0)*M_PI/180.0-M_PI/2.0;
			x=(uint8_t) i*cos(winkel)+Px;
    20d8:	b8 01       	movw	r22, r16
    20da:	01 2e       	mov	r0, r17
    20dc:	00 0c       	add	r0, r0
    20de:	88 0b       	sbc	r24, r24
    20e0:	99 0b       	sbc	r25, r25
    20e2:	0e 94 cf 42 	call	0x859e	; 0x859e <__floatsisf>
    20e6:	6b 01       	movw	r12, r22
    20e8:	7c 01       	movw	r14, r24
			y=(uint8_t) i*sin(winkel)+Py;
    20ea:	a5 01       	movw	r20, r10
    20ec:	94 01       	movw	r18, r8
    20ee:	0e 94 f8 43 	call	0x87f0	; 0x87f0 <__mulsf3>
    20f2:	20 e0       	ldi	r18, 0x00	; 0
    20f4:	30 e0       	ldi	r19, 0x00	; 0
    20f6:	48 ef       	ldi	r20, 0xF8	; 248
    20f8:	51 e4       	ldi	r21, 0x41	; 65
    20fa:	0e 94 93 41 	call	0x8326	; 0x8326 <__addsf3>
    20fe:	0e 94 a1 42 	call	0x8542	; 0x8542 <__fixunssfsi>
    2102:	36 2e       	mov	r3, r22
	else{
		r=25;
		//Berechnen des Minutenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(minute*6.0)*M_PI/180.0-M_PI/2.0;
			x=(uint8_t) i*cos(winkel)+Px;
    2104:	a3 01       	movw	r20, r6
    2106:	92 01       	movw	r18, r4
    2108:	c7 01       	movw	r24, r14
    210a:	b6 01       	movw	r22, r12
    210c:	0e 94 f8 43 	call	0x87f0	; 0x87f0 <__mulsf3>
    2110:	20 e0       	ldi	r18, 0x00	; 0
    2112:	30 e0       	ldi	r19, 0x00	; 0
    2114:	48 ef       	ldi	r20, 0xF8	; 248
    2116:	51 e4       	ldi	r21, 0x41	; 65
    2118:	0e 94 93 41 	call	0x8326	; 0x8326 <__addsf3>
    211c:	0e 94 a1 42 	call	0x8542	; 0x8542 <__fixunssfsi>
			y=(uint8_t) i*sin(winkel)+Py;

			drawPixel(x,y,0);
    2120:	20 e0       	ldi	r18, 0x00	; 0
    2122:	43 2d       	mov	r20, r3
    2124:	8e 81       	ldd	r24, Y+6	; 0x06
    2126:	9f 81       	ldd	r25, Y+7	; 0x07
    2128:	30 dd       	rcall	.-1440   	; 0x1b8a <_ZN7Display9drawPixelEhhh>
    212a:	0f 5f       	subi	r16, 0xFF	; 255
    212c:	1f 4f       	sbci	r17, 0xFF	; 255
		}
	}
	else{
		r=25;
		//Berechnen des Minutenzeigers
		for(uint8_t i=0;i<r;i++){
    212e:	09 31       	cpi	r16, 0x19	; 25
    2130:	11 05       	cpc	r17, r1
    2132:	91 f6       	brne	.-92     	; 0x20d8 <_ZN7Display6analogEhhhh+0x2ee>
		}

		r=17;
		//Berechnen des Stundenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(stunde*30.0+minute/2.0)*M_PI/180.0-M_PI/2.0;
    2134:	ed 81       	ldd	r30, Y+5	; 0x05
    2136:	6e 2f       	mov	r22, r30
    2138:	70 e0       	ldi	r23, 0x00	; 0
    213a:	80 e0       	ldi	r24, 0x00	; 0
    213c:	90 e0       	ldi	r25, 0x00	; 0
    213e:	0e 94 cf 42 	call	0x859e	; 0x859e <__floatsisf>
    2142:	20 e0       	ldi	r18, 0x00	; 0
    2144:	30 e0       	ldi	r19, 0x00	; 0
    2146:	40 ef       	ldi	r20, 0xF0	; 240
    2148:	51 e4       	ldi	r21, 0x41	; 65
    214a:	0e 94 f8 43 	call	0x87f0	; 0x87f0 <__mulsf3>
    214e:	6b 01       	movw	r12, r22
    2150:	7c 01       	movw	r14, r24
    2152:	20 e0       	ldi	r18, 0x00	; 0
    2154:	30 e0       	ldi	r19, 0x00	; 0
    2156:	40 e0       	ldi	r20, 0x00	; 0
    2158:	5f e3       	ldi	r21, 0x3F	; 63
    215a:	69 81       	ldd	r22, Y+1	; 0x01
    215c:	7a 81       	ldd	r23, Y+2	; 0x02
    215e:	8b 81       	ldd	r24, Y+3	; 0x03
    2160:	9c 81       	ldd	r25, Y+4	; 0x04
    2162:	0e 94 f8 43 	call	0x87f0	; 0x87f0 <__mulsf3>
    2166:	9b 01       	movw	r18, r22
    2168:	ac 01       	movw	r20, r24
    216a:	c7 01       	movw	r24, r14
    216c:	b6 01       	movw	r22, r12
    216e:	0e 94 93 41 	call	0x8326	; 0x8326 <__addsf3>
    2172:	2b ed       	ldi	r18, 0xDB	; 219
    2174:	3f e0       	ldi	r19, 0x0F	; 15
    2176:	49 e4       	ldi	r20, 0x49	; 73
    2178:	50 e4       	ldi	r21, 0x40	; 64
    217a:	0e 94 f8 43 	call	0x87f0	; 0x87f0 <__mulsf3>
    217e:	20 e0       	ldi	r18, 0x00	; 0
    2180:	30 e0       	ldi	r19, 0x00	; 0
    2182:	44 e3       	ldi	r20, 0x34	; 52
    2184:	53 e4       	ldi	r21, 0x43	; 67
    2186:	0e 94 fa 41 	call	0x83f4	; 0x83f4 <__divsf3>
    218a:	2b ed       	ldi	r18, 0xDB	; 219
    218c:	3f e0       	ldi	r19, 0x0F	; 15
    218e:	49 ec       	ldi	r20, 0xC9	; 201
    2190:	5f e3       	ldi	r21, 0x3F	; 63
    2192:	0e 94 92 41 	call	0x8324	; 0x8324 <__subsf3>
    2196:	6b 01       	movw	r12, r22
    2198:	7c 01       	movw	r14, r24
			x= (uint8_t) i*cos(winkel) +Px;
    219a:	0e 94 f7 41 	call	0x83ee	; 0x83ee <cos>
    219e:	4b 01       	movw	r8, r22
    21a0:	5c 01       	movw	r10, r24
			y= (uint8_t) i*sin(winkel) +Py;
    21a2:	c7 01       	movw	r24, r14
    21a4:	b6 01       	movw	r22, r12
    21a6:	0e 94 a7 44 	call	0x894e	; 0x894e <sin>
    21aa:	2b 01       	movw	r4, r22
    21ac:	3c 01       	movw	r6, r24
    21ae:	00 e0       	ldi	r16, 0x00	; 0
    21b0:	10 e0       	ldi	r17, 0x00	; 0

		r=17;
		//Berechnen des Stundenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(stunde*30.0+minute/2.0)*M_PI/180.0-M_PI/2.0;
			x= (uint8_t) i*cos(winkel) +Px;
    21b2:	b8 01       	movw	r22, r16
    21b4:	01 2e       	mov	r0, r17
    21b6:	00 0c       	add	r0, r0
    21b8:	88 0b       	sbc	r24, r24
    21ba:	99 0b       	sbc	r25, r25
    21bc:	0e 94 cf 42 	call	0x859e	; 0x859e <__floatsisf>
    21c0:	6b 01       	movw	r12, r22
    21c2:	7c 01       	movw	r14, r24
			y= (uint8_t) i*sin(winkel) +Py;
    21c4:	a3 01       	movw	r20, r6
    21c6:	92 01       	movw	r18, r4
    21c8:	0e 94 f8 43 	call	0x87f0	; 0x87f0 <__mulsf3>
    21cc:	20 e0       	ldi	r18, 0x00	; 0
    21ce:	30 e0       	ldi	r19, 0x00	; 0
    21d0:	48 ef       	ldi	r20, 0xF8	; 248
    21d2:	51 e4       	ldi	r21, 0x41	; 65
    21d4:	0e 94 93 41 	call	0x8326	; 0x8326 <__addsf3>
    21d8:	0e 94 a1 42 	call	0x8542	; 0x8542 <__fixunssfsi>
    21dc:	36 2e       	mov	r3, r22

		r=17;
		//Berechnen des Stundenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(stunde*30.0+minute/2.0)*M_PI/180.0-M_PI/2.0;
			x= (uint8_t) i*cos(winkel) +Px;
    21de:	a5 01       	movw	r20, r10
    21e0:	94 01       	movw	r18, r8
    21e2:	c7 01       	movw	r24, r14
    21e4:	b6 01       	movw	r22, r12
    21e6:	0e 94 f8 43 	call	0x87f0	; 0x87f0 <__mulsf3>
    21ea:	20 e0       	ldi	r18, 0x00	; 0
    21ec:	30 e0       	ldi	r19, 0x00	; 0
    21ee:	48 ef       	ldi	r20, 0xF8	; 248
    21f0:	51 e4       	ldi	r21, 0x41	; 65
    21f2:	0e 94 93 41 	call	0x8326	; 0x8326 <__addsf3>
    21f6:	0e 94 a1 42 	call	0x8542	; 0x8542 <__fixunssfsi>
			y= (uint8_t) i*sin(winkel) +Py;

			drawPixel(x,y,0);
    21fa:	20 e0       	ldi	r18, 0x00	; 0
    21fc:	43 2d       	mov	r20, r3
    21fe:	8e 81       	ldd	r24, Y+6	; 0x06
    2200:	9f 81       	ldd	r25, Y+7	; 0x07
    2202:	c3 dc       	rcall	.-1658   	; 0x1b8a <_ZN7Display9drawPixelEhhh>
    2204:	0f 5f       	subi	r16, 0xFF	; 255
    2206:	1f 4f       	sbci	r17, 0xFF	; 255
			drawPixel(x,y,0);
		}

		r=17;
		//Berechnen des Stundenzeigers
		for(uint8_t i=0;i<r;i++){
    2208:	01 31       	cpi	r16, 0x11	; 17
    220a:	11 05       	cpc	r17, r1
    220c:	91 f6       	brne	.-92     	; 0x21b2 <_ZN7Display6analogEhhhh+0x3c8>
		}
	}
	

	//Anzeige der Zahlen
	draw_ASCI('1',32-charsize,0);
    220e:	20 e0       	ldi	r18, 0x00	; 0
    2210:	4a e1       	ldi	r20, 0x1A	; 26
    2212:	61 e3       	ldi	r22, 0x31	; 49
    2214:	8e 81       	ldd	r24, Y+6	; 0x06
    2216:	9f 81       	ldd	r25, Y+7	; 0x07
    2218:	24 dd       	rcall	.-1464   	; 0x1c62 <_ZN7Display9draw_ASCIEhhh>
	draw_ASCI('2',32,0);
    221a:	20 e0       	ldi	r18, 0x00	; 0
    221c:	40 e2       	ldi	r20, 0x20	; 32
    221e:	62 e3       	ldi	r22, 0x32	; 50
    2220:	8e 81       	ldd	r24, Y+6	; 0x06
    2222:	9f 81       	ldd	r25, Y+7	; 0x07
    2224:	1e dd       	rcall	.-1476   	; 0x1c62 <_ZN7Display9draw_ASCIEhhh>
	draw_ASCI('3',64-charsize,4*charhighte-charhighte/2);
    2226:	2c e1       	ldi	r18, 0x1C	; 28
    2228:	4a e3       	ldi	r20, 0x3A	; 58
    222a:	63 e3       	ldi	r22, 0x33	; 51
    222c:	8e 81       	ldd	r24, Y+6	; 0x06
    222e:	9f 81       	ldd	r25, Y+7	; 0x07
    2230:	18 dd       	rcall	.-1488   	; 0x1c62 <_ZN7Display9draw_ASCIEhhh>
	draw_ASCI('6',32-charsize/2,7*charhighte);
    2232:	28 e3       	ldi	r18, 0x38	; 56
    2234:	4d e1       	ldi	r20, 0x1D	; 29
    2236:	66 e3       	ldi	r22, 0x36	; 54
    2238:	8e 81       	ldd	r24, Y+6	; 0x06
    223a:	9f 81       	ldd	r25, Y+7	; 0x07
    223c:	12 dd       	rcall	.-1500   	; 0x1c62 <_ZN7Display9draw_ASCIEhhh>
	draw_ASCI('9',0,4*charhighte-charhighte/2);
    223e:	2c e1       	ldi	r18, 0x1C	; 28
    2240:	40 e0       	ldi	r20, 0x00	; 0
    2242:	69 e3       	ldi	r22, 0x39	; 57
    2244:	8e 81       	ldd	r24, Y+6	; 0x06
    2246:	9f 81       	ldd	r25, Y+7	; 0x07
    2248:	0c dd       	rcall	.-1512   	; 0x1c62 <_ZN7Display9draw_ASCIEhhh>

	//anzeige des Rings fuer die Restlichen Stunden Zahlen
	//1
	drawPixel(26*cos((30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
    224a:	20 e0       	ldi	r18, 0x00	; 0
    224c:	48 e0       	ldi	r20, 0x08	; 8
    224e:	6c e2       	ldi	r22, 0x2C	; 44
    2250:	8e 81       	ldd	r24, Y+6	; 0x06
    2252:	9f 81       	ldd	r25, Y+7	; 0x07
    2254:	9a dc       	rcall	.-1740   	; 0x1b8a <_ZN7Display9drawPixelEhhh>
	//2
	drawPixel(26*cos((2*30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((2*30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
    2256:	20 e0       	ldi	r18, 0x00	; 0
    2258:	42 e1       	ldi	r20, 0x12	; 18
    225a:	65 e3       	ldi	r22, 0x35	; 53
    225c:	8e 81       	ldd	r24, Y+6	; 0x06
    225e:	9f 81       	ldd	r25, Y+7	; 0x07
    2260:	94 dc       	rcall	.-1752   	; 0x1b8a <_ZN7Display9drawPixelEhhh>
	//4
	drawPixel(26*cos((4*30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((4*30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
    2262:	20 e0       	ldi	r18, 0x00	; 0
    2264:	4c e2       	ldi	r20, 0x2C	; 44
    2266:	65 e3       	ldi	r22, 0x35	; 53
    2268:	8e 81       	ldd	r24, Y+6	; 0x06
    226a:	9f 81       	ldd	r25, Y+7	; 0x07
    226c:	8e dc       	rcall	.-1764   	; 0x1b8a <_ZN7Display9drawPixelEhhh>
	//5
	drawPixel(26*cos((5*30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((5*30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
    226e:	20 e0       	ldi	r18, 0x00	; 0
    2270:	45 e3       	ldi	r20, 0x35	; 53
    2272:	6b e2       	ldi	r22, 0x2B	; 43
    2274:	8e 81       	ldd	r24, Y+6	; 0x06
    2276:	9f 81       	ldd	r25, Y+7	; 0x07
    2278:	88 dc       	rcall	.-1776   	; 0x1b8a <_ZN7Display9drawPixelEhhh>
	//7
	drawPixel(26*cos((7*30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((7*30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
    227a:	20 e0       	ldi	r18, 0x00	; 0
    227c:	45 e3       	ldi	r20, 0x35	; 53
    227e:	61 e1       	ldi	r22, 0x11	; 17
    2280:	8e 81       	ldd	r24, Y+6	; 0x06
    2282:	9f 81       	ldd	r25, Y+7	; 0x07
    2284:	82 dc       	rcall	.-1788   	; 0x1b8a <_ZN7Display9drawPixelEhhh>
	//8
	drawPixel(26*cos((8*30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((8*30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
    2286:	20 e0       	ldi	r18, 0x00	; 0
    2288:	4c e2       	ldi	r20, 0x2C	; 44
    228a:	68 e0       	ldi	r22, 0x08	; 8
    228c:	8e 81       	ldd	r24, Y+6	; 0x06
    228e:	9f 81       	ldd	r25, Y+7	; 0x07
    2290:	7c dc       	rcall	.-1800   	; 0x1b8a <_ZN7Display9drawPixelEhhh>
	//10
	drawPixel(26*cos((10*30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((10*30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
    2292:	20 e0       	ldi	r18, 0x00	; 0
    2294:	41 e1       	ldi	r20, 0x11	; 17
    2296:	68 e0       	ldi	r22, 0x08	; 8
    2298:	8e 81       	ldd	r24, Y+6	; 0x06
    229a:	9f 81       	ldd	r25, Y+7	; 0x07
    229c:	76 dc       	rcall	.-1812   	; 0x1b8a <_ZN7Display9drawPixelEhhh>
	//11
	drawPixel(26*cos((11*30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((11*30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
    229e:	20 e0       	ldi	r18, 0x00	; 0
    22a0:	48 e0       	ldi	r20, 0x08	; 8
    22a2:	62 e1       	ldi	r22, 0x12	; 18
    22a4:	8e 81       	ldd	r24, Y+6	; 0x06
    22a6:	9f 81       	ldd	r25, Y+7	; 0x07
    22a8:	70 dc       	rcall	.-1824   	; 0x1b8a <_ZN7Display9drawPixelEhhh>
}
    22aa:	27 96       	adiw	r28, 0x07	; 7
    22ac:	0f b6       	in	r0, 0x3f	; 63
    22ae:	f8 94       	cli
    22b0:	de bf       	out	0x3e, r29	; 62
    22b2:	0f be       	out	0x3f, r0	; 63
    22b4:	cd bf       	out	0x3d, r28	; 61
    22b6:	df 91       	pop	r29
    22b8:	cf 91       	pop	r28
    22ba:	1f 91       	pop	r17
    22bc:	0f 91       	pop	r16
    22be:	ff 90       	pop	r15
    22c0:	ef 90       	pop	r14
    22c2:	df 90       	pop	r13
    22c4:	cf 90       	pop	r12
    22c6:	bf 90       	pop	r11
    22c8:	af 90       	pop	r10
    22ca:	9f 90       	pop	r9
    22cc:	8f 90       	pop	r8
    22ce:	7f 90       	pop	r7
    22d0:	6f 90       	pop	r6
    22d2:	5f 90       	pop	r5
    22d4:	4f 90       	pop	r4
    22d6:	3f 90       	pop	r3
    22d8:	2f 90       	pop	r2
    22da:	08 95       	ret

000022dc <mem_cpy>:

	if (   pb.idx >= 0		/* Flush buffered characters to the file */
		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
		&& (UINT)pb.idx == nw) return pb.nchr;
	return EOF;
}
    22dc:	41 15       	cp	r20, r1
    22de:	51 05       	cpc	r21, r1
    22e0:	51 f0       	breq	.+20     	; 0x22f6 <mem_cpy+0x1a>
    22e2:	a6 2f       	mov	r26, r22
    22e4:	b7 2f       	mov	r27, r23
    22e6:	fc 01       	movw	r30, r24
    22e8:	48 0f       	add	r20, r24
    22ea:	59 1f       	adc	r21, r25
    22ec:	9d 91       	ld	r25, X+
    22ee:	91 93       	st	Z+, r25
    22f0:	e4 17       	cp	r30, r20
    22f2:	f5 07       	cpc	r31, r21
    22f4:	d9 f7       	brne	.-10     	; 0x22ec <mem_cpy+0x10>
    22f6:	08 95       	ret

000022f8 <ld_clust>:
    22f8:	0f 93       	push	r16
    22fa:	1f 93       	push	r17
    22fc:	dc 01       	movw	r26, r24
    22fe:	fb 01       	movw	r30, r22
    2300:	93 8d       	ldd	r25, Z+27	; 0x1b
    2302:	69 2f       	mov	r22, r25
    2304:	70 e0       	ldi	r23, 0x00	; 0
    2306:	76 2f       	mov	r23, r22
    2308:	66 27       	eor	r22, r22
    230a:	82 8d       	ldd	r24, Z+26	; 0x1a
    230c:	68 2b       	or	r22, r24
    230e:	80 e0       	ldi	r24, 0x00	; 0
    2310:	90 e0       	ldi	r25, 0x00	; 0
    2312:	2c 91       	ld	r18, X
    2314:	23 30       	cpi	r18, 0x03	; 3
    2316:	79 f4       	brne	.+30     	; 0x2336 <ld_clust+0x3e>
    2318:	05 89       	ldd	r16, Z+21	; 0x15
    231a:	10 e0       	ldi	r17, 0x00	; 0
    231c:	10 2f       	mov	r17, r16
    231e:	00 27       	eor	r16, r16
    2320:	24 89       	ldd	r18, Z+20	; 0x14
    2322:	02 2b       	or	r16, r18
    2324:	20 e0       	ldi	r18, 0x00	; 0
    2326:	30 e0       	ldi	r19, 0x00	; 0
    2328:	98 01       	movw	r18, r16
    232a:	11 27       	eor	r17, r17
    232c:	00 27       	eor	r16, r16
    232e:	60 2b       	or	r22, r16
    2330:	71 2b       	or	r23, r17
    2332:	82 2b       	or	r24, r18
    2334:	93 2b       	or	r25, r19
    2336:	1f 91       	pop	r17
    2338:	0f 91       	pop	r16
    233a:	08 95       	ret

0000233c <get_ldnumber>:
    233c:	cf 93       	push	r28
    233e:	df 93       	push	r29
    2340:	ec 01       	movw	r28, r24
    2342:	a8 81       	ld	r26, Y
    2344:	b9 81       	ldd	r27, Y+1	; 0x01
    2346:	10 97       	sbiw	r26, 0x00	; 0
    2348:	f9 f0       	breq	.+62     	; 0x2388 <get_ldnumber+0x4c>
    234a:	4c 91       	ld	r20, X
    234c:	41 32       	cpi	r20, 0x21	; 33
    234e:	58 f0       	brcs	.+22     	; 0x2366 <get_ldnumber+0x2a>
    2350:	4a 33       	cpi	r20, 0x3A	; 58
    2352:	31 f1       	breq	.+76     	; 0x23a0 <get_ldnumber+0x64>
    2354:	fd 01       	movw	r30, r26
    2356:	31 96       	adiw	r30, 0x01	; 1
    2358:	9f 01       	movw	r18, r30
    235a:	91 91       	ld	r25, Z+
    235c:	91 32       	cpi	r25, 0x21	; 33
    235e:	28 f0       	brcs	.+10     	; 0x236a <get_ldnumber+0x2e>
    2360:	9a 33       	cpi	r25, 0x3A	; 58
    2362:	d1 f7       	brne	.-12     	; 0x2358 <get_ldnumber+0x1c>
    2364:	04 c0       	rjmp	.+8      	; 0x236e <get_ldnumber+0x32>
    2366:	94 2f       	mov	r25, r20
    2368:	9d 01       	movw	r18, r26
    236a:	9a 33       	cpi	r25, 0x3A	; 58
    236c:	81 f4       	brne	.+32     	; 0x238e <get_ldnumber+0x52>
    236e:	cd 01       	movw	r24, r26
    2370:	01 96       	adiw	r24, 0x01	; 1
    2372:	28 17       	cp	r18, r24
    2374:	39 07       	cpc	r19, r25
    2376:	71 f4       	brne	.+28     	; 0x2394 <get_ldnumber+0x58>
    2378:	40 33       	cpi	r20, 0x30	; 48
    237a:	79 f4       	brne	.+30     	; 0x239a <get_ldnumber+0x5e>
    237c:	12 96       	adiw	r26, 0x02	; 2
    237e:	b9 83       	std	Y+1, r27	; 0x01
    2380:	a8 83       	st	Y, r26
    2382:	80 e0       	ldi	r24, 0x00	; 0
    2384:	90 e0       	ldi	r25, 0x00	; 0
    2386:	0e c0       	rjmp	.+28     	; 0x23a4 <get_ldnumber+0x68>
    2388:	8f ef       	ldi	r24, 0xFF	; 255
    238a:	9f ef       	ldi	r25, 0xFF	; 255
    238c:	0b c0       	rjmp	.+22     	; 0x23a4 <get_ldnumber+0x68>
    238e:	80 e0       	ldi	r24, 0x00	; 0
    2390:	90 e0       	ldi	r25, 0x00	; 0
    2392:	08 c0       	rjmp	.+16     	; 0x23a4 <get_ldnumber+0x68>
    2394:	8f ef       	ldi	r24, 0xFF	; 255
    2396:	9f ef       	ldi	r25, 0xFF	; 255
    2398:	05 c0       	rjmp	.+10     	; 0x23a4 <get_ldnumber+0x68>
    239a:	8f ef       	ldi	r24, 0xFF	; 255
    239c:	9f ef       	ldi	r25, 0xFF	; 255
    239e:	02 c0       	rjmp	.+4      	; 0x23a4 <get_ldnumber+0x68>
    23a0:	9d 01       	movw	r18, r26
    23a2:	e5 cf       	rjmp	.-54     	; 0x236e <get_ldnumber+0x32>
    23a4:	df 91       	pop	r29
    23a6:	cf 91       	pop	r28
    23a8:	08 95       	ret

000023aa <sync_window>:
    23aa:	8f 92       	push	r8
    23ac:	9f 92       	push	r9
    23ae:	af 92       	push	r10
    23b0:	bf 92       	push	r11
    23b2:	cf 92       	push	r12
    23b4:	df 92       	push	r13
    23b6:	ef 92       	push	r14
    23b8:	ff 92       	push	r15
    23ba:	0f 93       	push	r16
    23bc:	1f 93       	push	r17
    23be:	cf 93       	push	r28
    23c0:	df 93       	push	r29
    23c2:	fc 01       	movw	r30, r24
    23c4:	24 81       	ldd	r18, Z+4	; 0x04
    23c6:	22 23       	and	r18, r18
    23c8:	09 f4       	brne	.+2      	; 0x23cc <sync_window+0x22>
    23ca:	44 c0       	rjmp	.+136    	; 0x2454 <sync_window+0xaa>
    23cc:	ec 01       	movw	r28, r24
    23ce:	c2 a4       	ldd	r12, Z+42	; 0x2a
    23d0:	d3 a4       	ldd	r13, Z+43	; 0x2b
    23d2:	e4 a4       	ldd	r14, Z+44	; 0x2c
    23d4:	f5 a4       	ldd	r15, Z+45	; 0x2d
    23d6:	5c 01       	movw	r10, r24
    23d8:	fe e2       	ldi	r31, 0x2E	; 46
    23da:	af 0e       	add	r10, r31
    23dc:	b1 1c       	adc	r11, r1
    23de:	01 e0       	ldi	r16, 0x01	; 1
    23e0:	10 e0       	ldi	r17, 0x00	; 0
    23e2:	a7 01       	movw	r20, r14
    23e4:	96 01       	movw	r18, r12
    23e6:	b5 01       	movw	r22, r10
    23e8:	89 81       	ldd	r24, Y+1	; 0x01
    23ea:	f7 d8       	rcall	.-3602   	; 0x15da <disk_write>
    23ec:	81 11       	cpse	r24, r1
    23ee:	34 c0       	rjmp	.+104    	; 0x2458 <sync_window+0xae>
    23f0:	1c 82       	std	Y+4, r1	; 0x04
    23f2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    23f4:	9f 8d       	ldd	r25, Y+31	; 0x1f
    23f6:	a8 a1       	ldd	r26, Y+32	; 0x20
    23f8:	b9 a1       	ldd	r27, Y+33	; 0x21
    23fa:	b7 01       	movw	r22, r14
    23fc:	a6 01       	movw	r20, r12
    23fe:	48 1b       	sub	r20, r24
    2400:	59 0b       	sbc	r21, r25
    2402:	6a 0b       	sbc	r22, r26
    2404:	7b 0b       	sbc	r23, r27
    2406:	8e 89       	ldd	r24, Y+22	; 0x16
    2408:	9f 89       	ldd	r25, Y+23	; 0x17
    240a:	a8 8d       	ldd	r26, Y+24	; 0x18
    240c:	b9 8d       	ldd	r27, Y+25	; 0x19
    240e:	48 17       	cp	r20, r24
    2410:	59 07       	cpc	r21, r25
    2412:	6a 07       	cpc	r22, r26
    2414:	7b 07       	cpc	r23, r27
    2416:	10 f5       	brcc	.+68     	; 0x245c <sync_window+0xb2>
    2418:	8b 80       	ldd	r8, Y+3	; 0x03
    241a:	91 2c       	mov	r9, r1
    241c:	82 e0       	ldi	r24, 0x02	; 2
    241e:	88 16       	cp	r8, r24
    2420:	91 04       	cpc	r9, r1
    2422:	f0 f0       	brcs	.+60     	; 0x2460 <sync_window+0xb6>
    2424:	8e 89       	ldd	r24, Y+22	; 0x16
    2426:	9f 89       	ldd	r25, Y+23	; 0x17
    2428:	a8 8d       	ldd	r26, Y+24	; 0x18
    242a:	b9 8d       	ldd	r27, Y+25	; 0x19
    242c:	c8 0e       	add	r12, r24
    242e:	d9 1e       	adc	r13, r25
    2430:	ea 1e       	adc	r14, r26
    2432:	fb 1e       	adc	r15, r27
    2434:	01 e0       	ldi	r16, 0x01	; 1
    2436:	10 e0       	ldi	r17, 0x00	; 0
    2438:	a7 01       	movw	r20, r14
    243a:	96 01       	movw	r18, r12
    243c:	b5 01       	movw	r22, r10
    243e:	89 81       	ldd	r24, Y+1	; 0x01
    2440:	cc d8       	rcall	.-3688   	; 0x15da <disk_write>
    2442:	e1 e0       	ldi	r30, 0x01	; 1
    2444:	8e 1a       	sub	r8, r30
    2446:	91 08       	sbc	r9, r1
    2448:	f1 e0       	ldi	r31, 0x01	; 1
    244a:	8f 16       	cp	r8, r31
    244c:	91 04       	cpc	r9, r1
    244e:	51 f7       	brne	.-44     	; 0x2424 <sync_window+0x7a>
    2450:	80 e0       	ldi	r24, 0x00	; 0
    2452:	07 c0       	rjmp	.+14     	; 0x2462 <sync_window+0xb8>
    2454:	80 e0       	ldi	r24, 0x00	; 0
    2456:	05 c0       	rjmp	.+10     	; 0x2462 <sync_window+0xb8>
    2458:	81 e0       	ldi	r24, 0x01	; 1
    245a:	03 c0       	rjmp	.+6      	; 0x2462 <sync_window+0xb8>
    245c:	80 e0       	ldi	r24, 0x00	; 0
    245e:	01 c0       	rjmp	.+2      	; 0x2462 <sync_window+0xb8>
    2460:	80 e0       	ldi	r24, 0x00	; 0
    2462:	df 91       	pop	r29
    2464:	cf 91       	pop	r28
    2466:	1f 91       	pop	r17
    2468:	0f 91       	pop	r16
    246a:	ff 90       	pop	r15
    246c:	ef 90       	pop	r14
    246e:	df 90       	pop	r13
    2470:	cf 90       	pop	r12
    2472:	bf 90       	pop	r11
    2474:	af 90       	pop	r10
    2476:	9f 90       	pop	r9
    2478:	8f 90       	pop	r8
    247a:	08 95       	ret

0000247c <move_window>:
    247c:	8f 92       	push	r8
    247e:	9f 92       	push	r9
    2480:	af 92       	push	r10
    2482:	bf 92       	push	r11
    2484:	ff 92       	push	r15
    2486:	0f 93       	push	r16
    2488:	1f 93       	push	r17
    248a:	cf 93       	push	r28
    248c:	df 93       	push	r29
    248e:	ec 01       	movw	r28, r24
    2490:	4a 01       	movw	r8, r20
    2492:	5b 01       	movw	r10, r22
    2494:	8a a5       	ldd	r24, Y+42	; 0x2a
    2496:	9b a5       	ldd	r25, Y+43	; 0x2b
    2498:	ac a5       	ldd	r26, Y+44	; 0x2c
    249a:	bd a5       	ldd	r27, Y+45	; 0x2d
    249c:	84 17       	cp	r24, r20
    249e:	95 07       	cpc	r25, r21
    24a0:	a6 07       	cpc	r26, r22
    24a2:	b7 07       	cpc	r27, r23
    24a4:	d9 f0       	breq	.+54     	; 0x24dc <move_window+0x60>
    24a6:	ce 01       	movw	r24, r28
    24a8:	80 df       	rcall	.-256    	; 0x23aa <sync_window>
    24aa:	f8 2e       	mov	r15, r24
    24ac:	81 11       	cpse	r24, r1
    24ae:	17 c0       	rjmp	.+46     	; 0x24de <move_window+0x62>
    24b0:	01 e0       	ldi	r16, 0x01	; 1
    24b2:	10 e0       	ldi	r17, 0x00	; 0
    24b4:	a5 01       	movw	r20, r10
    24b6:	94 01       	movw	r18, r8
    24b8:	be 01       	movw	r22, r28
    24ba:	62 5d       	subi	r22, 0xD2	; 210
    24bc:	7f 4f       	sbci	r23, 0xFF	; 255
    24be:	89 81       	ldd	r24, Y+1	; 0x01
    24c0:	3a d8       	rcall	.-3980   	; 0x1536 <disk_read>
    24c2:	88 23       	and	r24, r24
    24c4:	31 f0       	breq	.+12     	; 0x24d2 <move_window+0x56>
    24c6:	ff 24       	eor	r15, r15
    24c8:	f3 94       	inc	r15
    24ca:	88 24       	eor	r8, r8
    24cc:	8a 94       	dec	r8
    24ce:	98 2c       	mov	r9, r8
    24d0:	54 01       	movw	r10, r8
    24d2:	8a a6       	std	Y+42, r8	; 0x2a
    24d4:	9b a6       	std	Y+43, r9	; 0x2b
    24d6:	ac a6       	std	Y+44, r10	; 0x2c
    24d8:	bd a6       	std	Y+45, r11	; 0x2d
    24da:	01 c0       	rjmp	.+2      	; 0x24de <move_window+0x62>
    24dc:	f1 2c       	mov	r15, r1
    24de:	8f 2d       	mov	r24, r15
    24e0:	df 91       	pop	r29
    24e2:	cf 91       	pop	r28
    24e4:	1f 91       	pop	r17
    24e6:	0f 91       	pop	r16
    24e8:	ff 90       	pop	r15
    24ea:	bf 90       	pop	r11
    24ec:	af 90       	pop	r10
    24ee:	9f 90       	pop	r9
    24f0:	8f 90       	pop	r8
    24f2:	08 95       	ret

000024f4 <check_fs>:
    24f4:	cf 93       	push	r28
    24f6:	df 93       	push	r29
    24f8:	ec 01       	movw	r28, r24
    24fa:	1c 82       	std	Y+4, r1	; 0x04
    24fc:	8f ef       	ldi	r24, 0xFF	; 255
    24fe:	9f ef       	ldi	r25, 0xFF	; 255
    2500:	dc 01       	movw	r26, r24
    2502:	8a a7       	std	Y+42, r24	; 0x2a
    2504:	9b a7       	std	Y+43, r25	; 0x2b
    2506:	ac a7       	std	Y+44, r26	; 0x2c
    2508:	bd a7       	std	Y+45, r27	; 0x2d
    250a:	ce 01       	movw	r24, r28
    250c:	b7 df       	rcall	.-146    	; 0x247c <move_window>
    250e:	81 11       	cpse	r24, r1
    2510:	51 c0       	rjmp	.+162    	; 0x25b4 <check_fs+0xc0>
    2512:	fe 01       	movw	r30, r28
    2514:	e3 5d       	subi	r30, 0xD3	; 211
    2516:	fd 4f       	sbci	r31, 0xFD	; 253
    2518:	80 81       	ld	r24, Z
    251a:	90 e0       	ldi	r25, 0x00	; 0
    251c:	98 2f       	mov	r25, r24
    251e:	88 27       	eor	r24, r24
    2520:	31 97       	sbiw	r30, 0x01	; 1
    2522:	20 81       	ld	r18, Z
    2524:	82 2b       	or	r24, r18
    2526:	85 35       	cpi	r24, 0x55	; 85
    2528:	9a 4a       	sbci	r25, 0xAA	; 170
    252a:	09 f0       	breq	.+2      	; 0x252e <check_fs+0x3a>
    252c:	45 c0       	rjmp	.+138    	; 0x25b8 <check_fs+0xc4>
    252e:	e5 5c       	subi	r30, 0xC5	; 197
    2530:	f1 40       	sbci	r31, 0x01	; 1
    2532:	20 81       	ld	r18, Z
    2534:	31 97       	sbiw	r30, 0x01	; 1
    2536:	80 81       	ld	r24, Z
    2538:	90 e0       	ldi	r25, 0x00	; 0
    253a:	a0 e0       	ldi	r26, 0x00	; 0
    253c:	b0 e0       	ldi	r27, 0x00	; 0
    253e:	dc 01       	movw	r26, r24
    2540:	99 27       	eor	r25, r25
    2542:	88 27       	eor	r24, r24
    2544:	b2 2b       	or	r27, r18
    2546:	32 97       	sbiw	r30, 0x02	; 2
    2548:	20 81       	ld	r18, Z
    254a:	82 2b       	or	r24, r18
    254c:	31 96       	adiw	r30, 0x01	; 1
    254e:	40 81       	ld	r20, Z
    2550:	50 e0       	ldi	r21, 0x00	; 0
    2552:	54 2f       	mov	r21, r20
    2554:	44 27       	eor	r20, r20
    2556:	60 e0       	ldi	r22, 0x00	; 0
    2558:	70 e0       	ldi	r23, 0x00	; 0
    255a:	84 2b       	or	r24, r20
    255c:	95 2b       	or	r25, r21
    255e:	a6 2b       	or	r26, r22
    2560:	b7 2b       	or	r27, r23
    2562:	bb 27       	eor	r27, r27
    2564:	86 34       	cpi	r24, 0x46	; 70
    2566:	91 44       	sbci	r25, 0x41	; 65
    2568:	a4 45       	sbci	r26, 0x54	; 84
    256a:	b1 05       	cpc	r27, r1
    256c:	39 f1       	breq	.+78     	; 0x25bc <check_fs+0xc8>
    256e:	7e 96       	adiw	r30, 0x1e	; 30
    2570:	80 81       	ld	r24, Z
    2572:	31 97       	sbiw	r30, 0x01	; 1
    2574:	40 81       	ld	r20, Z
    2576:	50 e0       	ldi	r21, 0x00	; 0
    2578:	60 e0       	ldi	r22, 0x00	; 0
    257a:	70 e0       	ldi	r23, 0x00	; 0
    257c:	ba 01       	movw	r22, r20
    257e:	55 27       	eor	r21, r21
    2580:	44 27       	eor	r20, r20
    2582:	78 2b       	or	r23, r24
    2584:	32 97       	sbiw	r30, 0x02	; 2
    2586:	80 81       	ld	r24, Z
    2588:	48 2b       	or	r20, r24
    258a:	cf 57       	subi	r28, 0x7F	; 127
    258c:	df 4f       	sbci	r29, 0xFF	; 255
    258e:	88 81       	ld	r24, Y
    2590:	90 e0       	ldi	r25, 0x00	; 0
    2592:	98 2f       	mov	r25, r24
    2594:	88 27       	eor	r24, r24
    2596:	a0 e0       	ldi	r26, 0x00	; 0
    2598:	b0 e0       	ldi	r27, 0x00	; 0
    259a:	48 2b       	or	r20, r24
    259c:	59 2b       	or	r21, r25
    259e:	6a 2b       	or	r22, r26
    25a0:	7b 2b       	or	r23, r27
    25a2:	77 27       	eor	r23, r23
    25a4:	81 e0       	ldi	r24, 0x01	; 1
    25a6:	46 34       	cpi	r20, 0x46	; 70
    25a8:	51 44       	sbci	r21, 0x41	; 65
    25aa:	64 45       	sbci	r22, 0x54	; 84
    25ac:	71 05       	cpc	r23, r1
    25ae:	39 f4       	brne	.+14     	; 0x25be <check_fs+0xca>
    25b0:	80 e0       	ldi	r24, 0x00	; 0
    25b2:	05 c0       	rjmp	.+10     	; 0x25be <check_fs+0xca>
    25b4:	83 e0       	ldi	r24, 0x03	; 3
    25b6:	03 c0       	rjmp	.+6      	; 0x25be <check_fs+0xca>
    25b8:	82 e0       	ldi	r24, 0x02	; 2
    25ba:	01 c0       	rjmp	.+2      	; 0x25be <check_fs+0xca>
    25bc:	80 e0       	ldi	r24, 0x00	; 0
    25be:	df 91       	pop	r29
    25c0:	cf 91       	pop	r28
    25c2:	08 95       	ret

000025c4 <validate>:
    25c4:	00 97       	sbiw	r24, 0x00	; 0
    25c6:	c9 f0       	breq	.+50     	; 0x25fa <validate+0x36>
    25c8:	dc 01       	movw	r26, r24
    25ca:	ed 91       	ld	r30, X+
    25cc:	fc 91       	ld	r31, X
    25ce:	11 97       	sbiw	r26, 0x01	; 1
    25d0:	30 97       	sbiw	r30, 0x00	; 0
    25d2:	a9 f0       	breq	.+42     	; 0x25fe <validate+0x3a>
    25d4:	20 81       	ld	r18, Z
    25d6:	22 23       	and	r18, r18
    25d8:	a1 f0       	breq	.+40     	; 0x2602 <validate+0x3e>
    25da:	26 81       	ldd	r18, Z+6	; 0x06
    25dc:	37 81       	ldd	r19, Z+7	; 0x07
    25de:	12 96       	adiw	r26, 0x02	; 2
    25e0:	8d 91       	ld	r24, X+
    25e2:	9c 91       	ld	r25, X
    25e4:	13 97       	sbiw	r26, 0x03	; 3
    25e6:	28 17       	cp	r18, r24
    25e8:	39 07       	cpc	r19, r25
    25ea:	69 f4       	brne	.+26     	; 0x2606 <validate+0x42>
    25ec:	81 81       	ldd	r24, Z+1	; 0x01
    25ee:	0e 94 94 0a 	call	0x1528	; 0x1528 <disk_status>
    25f2:	80 ff       	sbrs	r24, 0
    25f4:	0a c0       	rjmp	.+20     	; 0x260a <validate+0x46>
    25f6:	89 e0       	ldi	r24, 0x09	; 9
    25f8:	08 95       	ret
    25fa:	89 e0       	ldi	r24, 0x09	; 9
    25fc:	08 95       	ret
    25fe:	89 e0       	ldi	r24, 0x09	; 9
    2600:	08 95       	ret
    2602:	89 e0       	ldi	r24, 0x09	; 9
    2604:	08 95       	ret
    2606:	89 e0       	ldi	r24, 0x09	; 9
    2608:	08 95       	ret
    260a:	80 e0       	ldi	r24, 0x00	; 0
    260c:	08 95       	ret

0000260e <find_volume>:
    260e:	2f 92       	push	r2
    2610:	3f 92       	push	r3
    2612:	4f 92       	push	r4
    2614:	5f 92       	push	r5
    2616:	6f 92       	push	r6
    2618:	7f 92       	push	r7
    261a:	8f 92       	push	r8
    261c:	9f 92       	push	r9
    261e:	af 92       	push	r10
    2620:	bf 92       	push	r11
    2622:	cf 92       	push	r12
    2624:	df 92       	push	r13
    2626:	ef 92       	push	r14
    2628:	ff 92       	push	r15
    262a:	0f 93       	push	r16
    262c:	1f 93       	push	r17
    262e:	cf 93       	push	r28
    2630:	df 93       	push	r29
    2632:	cd b7       	in	r28, 0x3d	; 61
    2634:	de b7       	in	r29, 0x3e	; 62
    2636:	6d 97       	sbiw	r28, 0x1d	; 29
    2638:	0f b6       	in	r0, 0x3f	; 63
    263a:	f8 94       	cli
    263c:	de bf       	out	0x3e, r29	; 62
    263e:	0f be       	out	0x3f, r0	; 63
    2640:	cd bf       	out	0x3d, r28	; 61
    2642:	6c 01       	movw	r12, r24
    2644:	cb 01       	movw	r24, r22
    2646:	b4 2e       	mov	r11, r20
    2648:	d6 01       	movw	r26, r12
    264a:	1d 92       	st	X+, r1
    264c:	1c 92       	st	X, r1
    264e:	76 de       	rcall	.-788    	; 0x233c <get_ldnumber>
    2650:	7c 01       	movw	r14, r24
    2652:	99 23       	and	r25, r25
    2654:	0c f4       	brge	.+2      	; 0x2658 <find_volume+0x4a>
    2656:	d7 c2       	rjmp	.+1454   	; 0x2c06 <find_volume+0x5f8>
    2658:	fc 01       	movw	r30, r24
    265a:	ee 0f       	add	r30, r30
    265c:	ff 1f       	adc	r31, r31
    265e:	eb 5c       	subi	r30, 0xCB	; 203
    2660:	fb 4f       	sbci	r31, 0xFB	; 251
    2662:	00 81       	ld	r16, Z
    2664:	11 81       	ldd	r17, Z+1	; 0x01
    2666:	01 15       	cp	r16, r1
    2668:	11 05       	cpc	r17, r1
    266a:	09 f4       	brne	.+2      	; 0x266e <find_volume+0x60>
    266c:	ce c2       	rjmp	.+1436   	; 0x2c0a <find_volume+0x5fc>
    266e:	f6 01       	movw	r30, r12
    2670:	11 83       	std	Z+1, r17	; 0x01
    2672:	00 83       	st	Z, r16
    2674:	d8 01       	movw	r26, r16
    2676:	8c 91       	ld	r24, X
    2678:	88 23       	and	r24, r24
    267a:	69 f0       	breq	.+26     	; 0x2696 <find_volume+0x88>
    267c:	11 96       	adiw	r26, 0x01	; 1
    267e:	8c 91       	ld	r24, X
    2680:	0e 94 94 0a 	call	0x1528	; 0x1528 <disk_status>
    2684:	80 fd       	sbrc	r24, 0
    2686:	07 c0       	rjmp	.+14     	; 0x2696 <find_volume+0x88>
    2688:	bb 20       	and	r11, r11
    268a:	09 f4       	brne	.+2      	; 0x268e <find_volume+0x80>
    268c:	c0 c2       	rjmp	.+1408   	; 0x2c0e <find_volume+0x600>
    268e:	82 ff       	sbrs	r24, 2
    2690:	c0 c2       	rjmp	.+1408   	; 0x2c12 <find_volume+0x604>
    2692:	8a e0       	ldi	r24, 0x0A	; 10
    2694:	65 c3       	rjmp	.+1738   	; 0x2d60 <find_volume+0x752>
    2696:	f8 01       	movw	r30, r16
    2698:	10 82       	st	Z, r1
    269a:	e1 82       	std	Z+1, r14	; 0x01
    269c:	8e 2d       	mov	r24, r14
    269e:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <disk_initialize>
    26a2:	80 fd       	sbrc	r24, 0
    26a4:	b8 c2       	rjmp	.+1392   	; 0x2c16 <find_volume+0x608>
    26a6:	bb 20       	and	r11, r11
    26a8:	09 f4       	brne	.+2      	; 0x26ac <find_volume+0x9e>
    26aa:	d5 c2       	rjmp	.+1450   	; 0x2c56 <find_volume+0x648>
    26ac:	82 fd       	sbrc	r24, 2
    26ae:	b5 c2       	rjmp	.+1386   	; 0x2c1a <find_volume+0x60c>
    26b0:	d2 c2       	rjmp	.+1444   	; 0x2c56 <find_volume+0x648>
    26b2:	df 01       	movw	r26, r30
    26b4:	17 97       	sbiw	r26, 0x07	; 7
    26b6:	8c 91       	ld	r24, X
    26b8:	88 23       	and	r24, r24
    26ba:	b9 f0       	breq	.+46     	; 0x26ea <find_volume+0xdc>
    26bc:	14 96       	adiw	r26, 0x04	; 4
    26be:	cc 90       	ld	r12, X
    26c0:	80 81       	ld	r24, Z
    26c2:	d1 2c       	mov	r13, r1
    26c4:	e1 2c       	mov	r14, r1
    26c6:	f1 2c       	mov	r15, r1
    26c8:	f8 2a       	or	r15, r24
    26ca:	12 96       	adiw	r26, 0x02	; 2
    26cc:	8c 91       	ld	r24, X
    26ce:	e8 2a       	or	r14, r24
    26d0:	11 97       	sbiw	r26, 0x01	; 1
    26d2:	ac 91       	ld	r26, X
    26d4:	b0 e0       	ldi	r27, 0x00	; 0
    26d6:	ba 2f       	mov	r27, r26
    26d8:	aa 27       	eor	r26, r26
    26da:	cd 01       	movw	r24, r26
    26dc:	a0 e0       	ldi	r26, 0x00	; 0
    26de:	b0 e0       	ldi	r27, 0x00	; 0
    26e0:	c8 2a       	or	r12, r24
    26e2:	d9 2a       	or	r13, r25
    26e4:	ea 2a       	or	r14, r26
    26e6:	fb 2a       	or	r15, r27
    26e8:	04 c0       	rjmp	.+8      	; 0x26f2 <find_volume+0xe4>
    26ea:	c8 2c       	mov	r12, r8
    26ec:	d9 2c       	mov	r13, r9
    26ee:	e7 2e       	mov	r14, r23
    26f0:	f6 2e       	mov	r15, r22
    26f2:	d9 01       	movw	r26, r18
    26f4:	cd 92       	st	X+, r12
    26f6:	dd 92       	st	X+, r13
    26f8:	ed 92       	st	X+, r14
    26fa:	fd 92       	st	X+, r15
    26fc:	9d 01       	movw	r18, r26
    26fe:	70 96       	adiw	r30, 0x10	; 16
    2700:	e4 17       	cp	r30, r20
    2702:	f5 07       	cpc	r31, r21
    2704:	b1 f6       	brne	.-84     	; 0x26b2 <find_volume+0xa4>
    2706:	4e 01       	movw	r8, r28
    2708:	b1 e1       	ldi	r27, 0x11	; 17
    270a:	8b 0e       	add	r8, r27
    270c:	91 1c       	adc	r9, r1
    270e:	68 94       	set
    2710:	77 24       	eor	r7, r7
    2712:	71 f8       	bld	r7, 1
    2714:	f5 01       	movw	r30, r10
    2716:	c1 90       	ld	r12, Z+
    2718:	d1 90       	ld	r13, Z+
    271a:	e1 90       	ld	r14, Z+
    271c:	f1 90       	ld	r15, Z+
    271e:	5f 01       	movw	r10, r30
    2720:	c1 14       	cp	r12, r1
    2722:	d1 04       	cpc	r13, r1
    2724:	e1 04       	cpc	r14, r1
    2726:	f1 04       	cpc	r15, r1
    2728:	39 f0       	breq	.+14     	; 0x2738 <find_volume+0x12a>
    272a:	b7 01       	movw	r22, r14
    272c:	a6 01       	movw	r20, r12
    272e:	c8 01       	movw	r24, r16
    2730:	e1 de       	rcall	.-574    	; 0x24f4 <check_fs>
    2732:	81 11       	cpse	r24, r1
    2734:	02 c0       	rjmp	.+4      	; 0x273a <find_volume+0x12c>
    2736:	0d c0       	rjmp	.+26     	; 0x2752 <find_volume+0x144>
    2738:	87 2d       	mov	r24, r7
    273a:	a8 14       	cp	r10, r8
    273c:	b9 04       	cpc	r11, r9
    273e:	51 f7       	brne	.-44     	; 0x2714 <find_volume+0x106>
    2740:	03 c0       	rjmp	.+6      	; 0x2748 <find_volume+0x13a>
    2742:	c1 2c       	mov	r12, r1
    2744:	d1 2c       	mov	r13, r1
    2746:	76 01       	movw	r14, r12
    2748:	83 30       	cpi	r24, 0x03	; 3
    274a:	09 f4       	brne	.+2      	; 0x274e <find_volume+0x140>
    274c:	68 c2       	rjmp	.+1232   	; 0x2c1e <find_volume+0x610>
    274e:	81 11       	cpse	r24, r1
    2750:	68 c2       	rjmp	.+1232   	; 0x2c22 <find_volume+0x614>
    2752:	d8 01       	movw	r26, r16
    2754:	da 96       	adiw	r26, 0x3a	; 58
    2756:	8c 91       	ld	r24, X
    2758:	da 97       	sbiw	r26, 0x3a	; 58
    275a:	90 e0       	ldi	r25, 0x00	; 0
    275c:	98 2f       	mov	r25, r24
    275e:	88 27       	eor	r24, r24
    2760:	d9 96       	adiw	r26, 0x39	; 57
    2762:	2c 91       	ld	r18, X
    2764:	82 2b       	or	r24, r18
    2766:	81 15       	cp	r24, r1
    2768:	92 40       	sbci	r25, 0x02	; 2
    276a:	09 f0       	breq	.+2      	; 0x276e <find_volume+0x160>
    276c:	5c c2       	rjmp	.+1208   	; 0x2c26 <find_volume+0x618>
    276e:	f8 01       	movw	r30, r16
    2770:	eb 5b       	subi	r30, 0xBB	; 187
    2772:	ff 4f       	sbci	r31, 0xFF	; 255
    2774:	80 80       	ld	r8, Z
    2776:	91 2c       	mov	r9, r1
    2778:	98 2c       	mov	r9, r8
    277a:	88 24       	eor	r8, r8
    277c:	31 97       	sbiw	r30, 0x01	; 1
    277e:	80 81       	ld	r24, Z
    2780:	88 2a       	or	r8, r24
    2782:	a1 2c       	mov	r10, r1
    2784:	b1 2c       	mov	r11, r1
    2786:	81 14       	cp	r8, r1
    2788:	91 04       	cpc	r9, r1
    278a:	a1 04       	cpc	r10, r1
    278c:	b1 04       	cpc	r11, r1
    278e:	e9 f4       	brne	.+58     	; 0x27ca <find_volume+0x1bc>
    2790:	71 96       	adiw	r30, 0x11	; 17
    2792:	80 81       	ld	r24, Z
    2794:	31 97       	sbiw	r30, 0x01	; 1
    2796:	80 80       	ld	r8, Z
    2798:	91 2c       	mov	r9, r1
    279a:	a1 2c       	mov	r10, r1
    279c:	b1 2c       	mov	r11, r1
    279e:	54 01       	movw	r10, r8
    27a0:	99 24       	eor	r9, r9
    27a2:	88 24       	eor	r8, r8
    27a4:	b8 2a       	or	r11, r24
    27a6:	32 97       	sbiw	r30, 0x02	; 2
    27a8:	80 81       	ld	r24, Z
    27aa:	a5 01       	movw	r20, r10
    27ac:	94 01       	movw	r18, r8
    27ae:	28 2b       	or	r18, r24
    27b0:	da 01       	movw	r26, r20
    27b2:	c9 01       	movw	r24, r18
    27b4:	31 96       	adiw	r30, 0x01	; 1
    27b6:	80 80       	ld	r8, Z
    27b8:	91 2c       	mov	r9, r1
    27ba:	98 2c       	mov	r9, r8
    27bc:	88 24       	eor	r8, r8
    27be:	a1 2c       	mov	r10, r1
    27c0:	b1 2c       	mov	r11, r1
    27c2:	88 2a       	or	r8, r24
    27c4:	99 2a       	or	r9, r25
    27c6:	aa 2a       	or	r10, r26
    27c8:	bb 2a       	or	r11, r27
    27ca:	d8 01       	movw	r26, r16
    27cc:	56 96       	adiw	r26, 0x16	; 22
    27ce:	8d 92       	st	X+, r8
    27d0:	9d 92       	st	X+, r9
    27d2:	ad 92       	st	X+, r10
    27d4:	bc 92       	st	X, r11
    27d6:	59 97       	sbiw	r26, 0x19	; 25
    27d8:	de 96       	adiw	r26, 0x3e	; 62
    27da:	ac 91       	ld	r26, X
    27dc:	f8 01       	movw	r30, r16
    27de:	a3 83       	std	Z+3, r26	; 0x03
    27e0:	8f ef       	ldi	r24, 0xFF	; 255
    27e2:	8a 0f       	add	r24, r26
    27e4:	82 30       	cpi	r24, 0x02	; 2
    27e6:	08 f0       	brcs	.+2      	; 0x27ea <find_volume+0x1dc>
    27e8:	20 c2       	rjmp	.+1088   	; 0x2c2a <find_volume+0x61c>
    27ea:	f3 ad       	ldd	r31, Z+59	; 0x3b
    27ec:	f9 8b       	std	Y+17, r31	; 0x11
    27ee:	2f 2f       	mov	r18, r31
    27f0:	f8 01       	movw	r30, r16
    27f2:	22 83       	std	Z+2, r18	; 0x02
    27f4:	22 23       	and	r18, r18
    27f6:	09 f4       	brne	.+2      	; 0x27fa <find_volume+0x1ec>
    27f8:	1a c2       	rjmp	.+1076   	; 0x2c2e <find_volume+0x620>
    27fa:	82 2f       	mov	r24, r18
    27fc:	90 e0       	ldi	r25, 0x00	; 0
    27fe:	9c 01       	movw	r18, r24
    2800:	21 50       	subi	r18, 0x01	; 1
    2802:	31 09       	sbc	r19, r1
    2804:	82 23       	and	r24, r18
    2806:	93 23       	and	r25, r19
    2808:	89 2b       	or	r24, r25
    280a:	09 f0       	breq	.+2      	; 0x280e <find_volume+0x200>
    280c:	12 c2       	rjmp	.+1060   	; 0x2c32 <find_volume+0x624>
    280e:	e0 5c       	subi	r30, 0xC0	; 192
    2810:	ff 4f       	sbci	r31, 0xFF	; 255
    2812:	80 81       	ld	r24, Z
    2814:	90 e0       	ldi	r25, 0x00	; 0
    2816:	98 2f       	mov	r25, r24
    2818:	88 27       	eor	r24, r24
    281a:	f8 01       	movw	r30, r16
    281c:	27 ad       	ldd	r18, Z+63	; 0x3f
    281e:	1c 01       	movw	r2, r24
    2820:	22 2a       	or	r2, r18
    2822:	31 86       	std	Z+9, r3	; 0x09
    2824:	20 86       	std	Z+8, r2	; 0x08
    2826:	c1 01       	movw	r24, r2
    2828:	8f 70       	andi	r24, 0x0F	; 15
    282a:	99 27       	eor	r25, r25
    282c:	89 2b       	or	r24, r25
    282e:	09 f0       	breq	.+2      	; 0x2832 <find_volume+0x224>
    2830:	02 c2       	rjmp	.+1028   	; 0x2c36 <find_volume+0x628>
    2832:	ee 5b       	subi	r30, 0xBE	; 190
    2834:	ff 4f       	sbci	r31, 0xFF	; 255
    2836:	40 80       	ld	r4, Z
    2838:	51 2c       	mov	r5, r1
    283a:	54 2c       	mov	r5, r4
    283c:	44 24       	eor	r4, r4
    283e:	31 97       	sbiw	r30, 0x01	; 1
    2840:	80 81       	ld	r24, Z
    2842:	48 2a       	or	r4, r24
    2844:	61 2c       	mov	r6, r1
    2846:	71 2c       	mov	r7, r1
    2848:	41 14       	cp	r4, r1
    284a:	51 04       	cpc	r5, r1
    284c:	61 04       	cpc	r6, r1
    284e:	71 04       	cpc	r7, r1
    2850:	d1 f4       	brne	.+52     	; 0x2886 <find_volume+0x278>
    2852:	70 96       	adiw	r30, 0x10	; 16
    2854:	80 81       	ld	r24, Z
    2856:	31 97       	sbiw	r30, 0x01	; 1
    2858:	40 80       	ld	r4, Z
    285a:	51 2c       	mov	r5, r1
    285c:	61 2c       	mov	r6, r1
    285e:	71 2c       	mov	r7, r1
    2860:	32 01       	movw	r6, r4
    2862:	55 24       	eor	r5, r5
    2864:	44 24       	eor	r4, r4
    2866:	78 2a       	or	r7, r24
    2868:	32 97       	sbiw	r30, 0x02	; 2
    286a:	80 81       	ld	r24, Z
    286c:	48 2a       	or	r4, r24
    286e:	31 96       	adiw	r30, 0x01	; 1
    2870:	80 81       	ld	r24, Z
    2872:	90 e0       	ldi	r25, 0x00	; 0
    2874:	98 2f       	mov	r25, r24
    2876:	88 27       	eor	r24, r24
    2878:	ac 01       	movw	r20, r24
    287a:	60 e0       	ldi	r22, 0x00	; 0
    287c:	70 e0       	ldi	r23, 0x00	; 0
    287e:	44 2a       	or	r4, r20
    2880:	55 2a       	or	r5, r21
    2882:	66 2a       	or	r6, r22
    2884:	77 2a       	or	r7, r23
    2886:	f8 01       	movw	r30, r16
    2888:	85 ad       	ldd	r24, Z+61	; 0x3d
    288a:	e8 2f       	mov	r30, r24
    288c:	f0 e0       	ldi	r31, 0x00	; 0
    288e:	3e 2f       	mov	r19, r30
    2890:	22 27       	eor	r18, r18
    2892:	f8 01       	movw	r30, r16
    2894:	84 ad       	ldd	r24, Z+60	; 0x3c
    2896:	f9 01       	movw	r30, r18
    2898:	e8 2b       	or	r30, r24
    289a:	30 97       	sbiw	r30, 0x00	; 0
    289c:	09 f4       	brne	.+2      	; 0x28a0 <find_volume+0x292>
    289e:	cd c1       	rjmp	.+922    	; 0x2c3a <find_volume+0x62c>
    28a0:	b0 e0       	ldi	r27, 0x00	; 0
    28a2:	a5 01       	movw	r20, r10
    28a4:	94 01       	movw	r18, r8
    28a6:	0e 94 6d 49 	call	0x92da	; 0x92da <__muluhisi3>
    28aa:	6a 8f       	std	Y+26, r22	; 0x1a
    28ac:	7b 8f       	std	Y+27, r23	; 0x1b
    28ae:	8c 8f       	std	Y+28, r24	; 0x1c
    28b0:	9d 8f       	std	Y+29, r25	; 0x1d
    28b2:	9f 01       	movw	r18, r30
    28b4:	40 e0       	ldi	r20, 0x00	; 0
    28b6:	50 e0       	ldi	r21, 0x00	; 0
    28b8:	2e 8b       	std	Y+22, r18	; 0x16
    28ba:	3f 8b       	std	Y+23, r19	; 0x17
    28bc:	48 8f       	std	Y+24, r20	; 0x18
    28be:	59 8f       	std	Y+25, r21	; 0x19
    28c0:	c1 01       	movw	r24, r2
    28c2:	92 95       	swap	r25
    28c4:	82 95       	swap	r24
    28c6:	8f 70       	andi	r24, 0x0F	; 15
    28c8:	89 27       	eor	r24, r25
    28ca:	9f 70       	andi	r25, 0x0F	; 15
    28cc:	89 27       	eor	r24, r25
    28ce:	28 0f       	add	r18, r24
    28d0:	39 1f       	adc	r19, r25
    28d2:	41 1d       	adc	r20, r1
    28d4:	51 1d       	adc	r21, r1
    28d6:	da 01       	movw	r26, r20
    28d8:	c9 01       	movw	r24, r18
    28da:	2a 8d       	ldd	r18, Y+26	; 0x1a
    28dc:	3b 8d       	ldd	r19, Y+27	; 0x1b
    28de:	4c 8d       	ldd	r20, Y+28	; 0x1c
    28e0:	5d 8d       	ldd	r21, Y+29	; 0x1d
    28e2:	28 0f       	add	r18, r24
    28e4:	39 1f       	adc	r19, r25
    28e6:	4a 1f       	adc	r20, r26
    28e8:	5b 1f       	adc	r21, r27
    28ea:	2a 8b       	std	Y+18, r18	; 0x12
    28ec:	3b 8b       	std	Y+19, r19	; 0x13
    28ee:	4c 8b       	std	Y+20, r20	; 0x14
    28f0:	5d 8b       	std	Y+21, r21	; 0x15
    28f2:	42 16       	cp	r4, r18
    28f4:	53 06       	cpc	r5, r19
    28f6:	64 06       	cpc	r6, r20
    28f8:	75 06       	cpc	r7, r21
    28fa:	08 f4       	brcc	.+2      	; 0x28fe <find_volume+0x2f0>
    28fc:	a0 c1       	rjmp	.+832    	; 0x2c3e <find_volume+0x630>
    28fe:	c3 01       	movw	r24, r6
    2900:	b2 01       	movw	r22, r4
    2902:	62 1b       	sub	r22, r18
    2904:	73 0b       	sbc	r23, r19
    2906:	84 0b       	sbc	r24, r20
    2908:	95 0b       	sbc	r25, r21
    290a:	e9 89       	ldd	r30, Y+17	; 0x11
    290c:	2e 2f       	mov	r18, r30
    290e:	30 e0       	ldi	r19, 0x00	; 0
    2910:	40 e0       	ldi	r20, 0x00	; 0
    2912:	50 e0       	ldi	r21, 0x00	; 0
    2914:	0e 94 33 49 	call	0x9266	; 0x9266 <__udivmodsi4>
    2918:	da 01       	movw	r26, r20
    291a:	c9 01       	movw	r24, r18
    291c:	21 15       	cp	r18, r1
    291e:	31 05       	cpc	r19, r1
    2920:	41 05       	cpc	r20, r1
    2922:	51 05       	cpc	r21, r1
    2924:	09 f4       	brne	.+2      	; 0x2928 <find_volume+0x31a>
    2926:	8d c1       	rjmp	.+794    	; 0x2c42 <find_volume+0x634>
    2928:	26 3f       	cpi	r18, 0xF6	; 246
    292a:	ff e0       	ldi	r31, 0x0F	; 15
    292c:	3f 07       	cpc	r19, r31
    292e:	41 05       	cpc	r20, r1
    2930:	51 05       	cpc	r21, r1
    2932:	18 f0       	brcs	.+6      	; 0x293a <find_volume+0x32c>
    2934:	e2 e0       	ldi	r30, 0x02	; 2
    2936:	e9 8b       	std	Y+17, r30	; 0x11
    2938:	02 c0       	rjmp	.+4      	; 0x293e <find_volume+0x330>
    293a:	f1 e0       	ldi	r31, 0x01	; 1
    293c:	f9 8b       	std	Y+17, r31	; 0x11
    293e:	86 3f       	cpi	r24, 0xF6	; 246
    2940:	9f 4f       	sbci	r25, 0xFF	; 255
    2942:	a1 05       	cpc	r26, r1
    2944:	b1 05       	cpc	r27, r1
    2946:	08 f0       	brcs	.+2      	; 0x294a <find_volume+0x33c>
    2948:	9d c1       	rjmp	.+826    	; 0x2c84 <find_volume+0x676>
    294a:	29 01       	movw	r4, r18
    294c:	3a 01       	movw	r6, r20
    294e:	82 e0       	ldi	r24, 0x02	; 2
    2950:	48 0e       	add	r4, r24
    2952:	51 1c       	adc	r5, r1
    2954:	61 1c       	adc	r6, r1
    2956:	71 1c       	adc	r7, r1
    2958:	d8 01       	movw	r26, r16
    295a:	52 96       	adiw	r26, 0x12	; 18
    295c:	4d 92       	st	X+, r4
    295e:	5d 92       	st	X+, r5
    2960:	6d 92       	st	X+, r6
    2962:	7c 92       	st	X, r7
    2964:	55 97       	sbiw	r26, 0x15	; 21
    2966:	f8 01       	movw	r30, r16
    2968:	c2 8e       	std	Z+26, r12	; 0x1a
    296a:	d3 8e       	std	Z+27, r13	; 0x1b
    296c:	e4 8e       	std	Z+28, r14	; 0x1c
    296e:	f5 8e       	std	Z+29, r15	; 0x1d
    2970:	8e 89       	ldd	r24, Y+22	; 0x16
    2972:	9f 89       	ldd	r25, Y+23	; 0x17
    2974:	a8 8d       	ldd	r26, Y+24	; 0x18
    2976:	b9 8d       	ldd	r27, Y+25	; 0x19
    2978:	8c 0d       	add	r24, r12
    297a:	9d 1d       	adc	r25, r13
    297c:	ae 1d       	adc	r26, r14
    297e:	bf 1d       	adc	r27, r15
    2980:	86 8f       	std	Z+30, r24	; 0x1e
    2982:	97 8f       	std	Z+31, r25	; 0x1f
    2984:	a0 a3       	std	Z+32, r26	; 0x20
    2986:	b1 a3       	std	Z+33, r27	; 0x21
    2988:	4a 89       	ldd	r20, Y+18	; 0x12
    298a:	5b 89       	ldd	r21, Y+19	; 0x13
    298c:	6c 89       	ldd	r22, Y+20	; 0x14
    298e:	7d 89       	ldd	r23, Y+21	; 0x15
    2990:	4c 0d       	add	r20, r12
    2992:	5d 1d       	adc	r21, r13
    2994:	6e 1d       	adc	r22, r14
    2996:	7f 1d       	adc	r23, r15
    2998:	46 a3       	std	Z+38, r20	; 0x26
    299a:	57 a3       	std	Z+39, r21	; 0x27
    299c:	60 a7       	std	Z+40, r22	; 0x28
    299e:	71 a7       	std	Z+41, r23	; 0x29
    29a0:	f9 89       	ldd	r31, Y+17	; 0x11
    29a2:	f3 30       	cpi	r31, 0x03	; 3
    29a4:	09 f0       	breq	.+2      	; 0x29a8 <find_volume+0x39a>
    29a6:	44 c0       	rjmp	.+136    	; 0x2a30 <find_volume+0x422>
    29a8:	23 28       	or	r2, r3
    29aa:	09 f0       	breq	.+2      	; 0x29ae <find_volume+0x3a0>
    29ac:	4c c1       	rjmp	.+664    	; 0x2c46 <find_volume+0x638>
    29ae:	f8 01       	movw	r30, r16
    29b0:	e3 5a       	subi	r30, 0xA3	; 163
    29b2:	ff 4f       	sbci	r31, 0xFF	; 255
    29b4:	20 81       	ld	r18, Z
    29b6:	31 97       	sbiw	r30, 0x01	; 1
    29b8:	80 81       	ld	r24, Z
    29ba:	90 e0       	ldi	r25, 0x00	; 0
    29bc:	a0 e0       	ldi	r26, 0x00	; 0
    29be:	b0 e0       	ldi	r27, 0x00	; 0
    29c0:	dc 01       	movw	r26, r24
    29c2:	99 27       	eor	r25, r25
    29c4:	88 27       	eor	r24, r24
    29c6:	b2 2b       	or	r27, r18
    29c8:	32 97       	sbiw	r30, 0x02	; 2
    29ca:	20 81       	ld	r18, Z
    29cc:	ac 01       	movw	r20, r24
    29ce:	bd 01       	movw	r22, r26
    29d0:	42 2b       	or	r20, r18
    29d2:	31 96       	adiw	r30, 0x01	; 1
    29d4:	80 81       	ld	r24, Z
    29d6:	28 2f       	mov	r18, r24
    29d8:	30 e0       	ldi	r19, 0x00	; 0
    29da:	92 2f       	mov	r25, r18
    29dc:	88 27       	eor	r24, r24
    29de:	a0 e0       	ldi	r26, 0x00	; 0
    29e0:	b0 e0       	ldi	r27, 0x00	; 0
    29e2:	84 2b       	or	r24, r20
    29e4:	95 2b       	or	r25, r21
    29e6:	a6 2b       	or	r26, r22
    29e8:	b7 2b       	or	r27, r23
    29ea:	f8 01       	movw	r30, r16
    29ec:	82 a3       	std	Z+34, r24	; 0x22
    29ee:	93 a3       	std	Z+35, r25	; 0x23
    29f0:	a4 a3       	std	Z+36, r26	; 0x24
    29f2:	b5 a3       	std	Z+37, r27	; 0x25
    29f4:	44 0c       	add	r4, r4
    29f6:	55 1c       	adc	r5, r5
    29f8:	66 1c       	adc	r6, r6
    29fa:	77 1c       	adc	r7, r7
    29fc:	44 0c       	add	r4, r4
    29fe:	55 1c       	adc	r5, r5
    2a00:	66 1c       	adc	r6, r6
    2a02:	77 1c       	adc	r7, r7
    2a04:	ff ef       	ldi	r31, 0xFF	; 255
    2a06:	4f 0e       	add	r4, r31
    2a08:	f1 e0       	ldi	r31, 0x01	; 1
    2a0a:	5f 1e       	adc	r5, r31
    2a0c:	61 1c       	adc	r6, r1
    2a0e:	71 1c       	adc	r7, r1
    2a10:	03 2e       	mov	r0, r19
    2a12:	39 e0       	ldi	r19, 0x09	; 9
    2a14:	76 94       	lsr	r7
    2a16:	67 94       	ror	r6
    2a18:	57 94       	ror	r5
    2a1a:	47 94       	ror	r4
    2a1c:	3a 95       	dec	r19
    2a1e:	d1 f7       	brne	.-12     	; 0x2a14 <find_volume+0x406>
    2a20:	30 2d       	mov	r19, r0
    2a22:	84 14       	cp	r8, r4
    2a24:	95 04       	cpc	r9, r5
    2a26:	a6 04       	cpc	r10, r6
    2a28:	b7 04       	cpc	r11, r7
    2a2a:	08 f4       	brcc	.+2      	; 0x2a2e <find_volume+0x420>
    2a2c:	0e c1       	rjmp	.+540    	; 0x2c4a <find_volume+0x63c>
    2a2e:	56 c1       	rjmp	.+684    	; 0x2cdc <find_volume+0x6ce>
    2a30:	23 28       	or	r2, r3
    2a32:	09 f4       	brne	.+2      	; 0x2a36 <find_volume+0x428>
    2a34:	0c c1       	rjmp	.+536    	; 0x2c4e <find_volume+0x640>
    2a36:	2a 8d       	ldd	r18, Y+26	; 0x1a
    2a38:	3b 8d       	ldd	r19, Y+27	; 0x1b
    2a3a:	4c 8d       	ldd	r20, Y+28	; 0x1c
    2a3c:	5d 8d       	ldd	r21, Y+29	; 0x1d
    2a3e:	82 0f       	add	r24, r18
    2a40:	93 1f       	adc	r25, r19
    2a42:	a4 1f       	adc	r26, r20
    2a44:	b5 1f       	adc	r27, r21
    2a46:	f8 01       	movw	r30, r16
    2a48:	82 a3       	std	Z+34, r24	; 0x22
    2a4a:	93 a3       	std	Z+35, r25	; 0x23
    2a4c:	a4 a3       	std	Z+36, r26	; 0x24
    2a4e:	b5 a3       	std	Z+37, r27	; 0x25
    2a50:	f9 89       	ldd	r31, Y+17	; 0x11
    2a52:	f2 30       	cpi	r31, 0x02	; 2
    2a54:	29 f4       	brne	.+10     	; 0x2a60 <find_volume+0x452>
    2a56:	44 0c       	add	r4, r4
    2a58:	55 1c       	adc	r5, r5
    2a5a:	66 1c       	adc	r6, r6
    2a5c:	77 1c       	adc	r7, r7
    2a5e:	6a c1       	rjmp	.+724    	; 0x2d34 <find_volume+0x726>
    2a60:	a3 e0       	ldi	r26, 0x03	; 3
    2a62:	b0 e0       	ldi	r27, 0x00	; 0
    2a64:	a3 01       	movw	r20, r6
    2a66:	92 01       	movw	r18, r4
    2a68:	0e 94 6d 49 	call	0x92da	; 0x92da <__muluhisi3>
    2a6c:	dc 01       	movw	r26, r24
    2a6e:	cb 01       	movw	r24, r22
    2a70:	b6 95       	lsr	r27
    2a72:	a7 95       	ror	r26
    2a74:	97 95       	ror	r25
    2a76:	87 95       	ror	r24
    2a78:	21 e0       	ldi	r18, 0x01	; 1
    2a7a:	42 22       	and	r4, r18
    2a7c:	55 24       	eor	r5, r5
    2a7e:	66 24       	eor	r6, r6
    2a80:	77 24       	eor	r7, r7
    2a82:	48 0e       	add	r4, r24
    2a84:	59 1e       	adc	r5, r25
    2a86:	6a 1e       	adc	r6, r26
    2a88:	7b 1e       	adc	r7, r27
    2a8a:	54 c1       	rjmp	.+680    	; 0x2d34 <find_volume+0x726>
    2a8c:	b7 01       	movw	r22, r14
    2a8e:	a6 01       	movw	r20, r12
    2a90:	4f 5f       	subi	r20, 0xFF	; 255
    2a92:	5f 4f       	sbci	r21, 0xFF	; 255
    2a94:	6f 4f       	sbci	r22, 0xFF	; 255
    2a96:	7f 4f       	sbci	r23, 0xFF	; 255
    2a98:	c8 01       	movw	r24, r16
    2a9a:	f0 dc       	rcall	.-1568   	; 0x247c <move_window>
    2a9c:	81 11       	cpse	r24, r1
    2a9e:	96 c0       	rjmp	.+300    	; 0x2bcc <find_volume+0x5be>
    2aa0:	d8 01       	movw	r26, r16
    2aa2:	15 96       	adiw	r26, 0x05	; 5
    2aa4:	1c 92       	st	X, r1
    2aa6:	f8 01       	movw	r30, r16
    2aa8:	e3 5d       	subi	r30, 0xD3	; 211
    2aaa:	fd 4f       	sbci	r31, 0xFD	; 253
    2aac:	80 81       	ld	r24, Z
    2aae:	90 e0       	ldi	r25, 0x00	; 0
    2ab0:	98 2f       	mov	r25, r24
    2ab2:	88 27       	eor	r24, r24
    2ab4:	31 97       	sbiw	r30, 0x01	; 1
    2ab6:	20 81       	ld	r18, Z
    2ab8:	82 2b       	or	r24, r18
    2aba:	85 35       	cpi	r24, 0x55	; 85
    2abc:	9a 4a       	sbci	r25, 0xAA	; 170
    2abe:	09 f0       	breq	.+2      	; 0x2ac2 <find_volume+0x4b4>
    2ac0:	88 c0       	rjmp	.+272    	; 0x2bd2 <find_volume+0x5c4>
    2ac2:	f8 01       	movw	r30, r16
    2ac4:	21 a9       	ldd	r18, Z+49	; 0x31
    2ac6:	80 a9       	ldd	r24, Z+48	; 0x30
    2ac8:	90 e0       	ldi	r25, 0x00	; 0
    2aca:	a0 e0       	ldi	r26, 0x00	; 0
    2acc:	b0 e0       	ldi	r27, 0x00	; 0
    2ace:	dc 01       	movw	r26, r24
    2ad0:	99 27       	eor	r25, r25
    2ad2:	88 27       	eor	r24, r24
    2ad4:	b2 2b       	or	r27, r18
    2ad6:	26 a5       	ldd	r18, Z+46	; 0x2e
    2ad8:	ac 01       	movw	r20, r24
    2ada:	bd 01       	movw	r22, r26
    2adc:	42 2b       	or	r20, r18
    2ade:	27 a5       	ldd	r18, Z+47	; 0x2f
    2ae0:	30 e0       	ldi	r19, 0x00	; 0
    2ae2:	92 2f       	mov	r25, r18
    2ae4:	88 27       	eor	r24, r24
    2ae6:	a0 e0       	ldi	r26, 0x00	; 0
    2ae8:	b0 e0       	ldi	r27, 0x00	; 0
    2aea:	84 2b       	or	r24, r20
    2aec:	95 2b       	or	r25, r21
    2aee:	a6 2b       	or	r26, r22
    2af0:	b7 2b       	or	r27, r23
    2af2:	82 35       	cpi	r24, 0x52	; 82
    2af4:	92 45       	sbci	r25, 0x52	; 82
    2af6:	a1 46       	sbci	r26, 0x61	; 97
    2af8:	b1 44       	sbci	r27, 0x41	; 65
    2afa:	09 f0       	breq	.+2      	; 0x2afe <find_volume+0x4f0>
    2afc:	6d c0       	rjmp	.+218    	; 0x2bd8 <find_volume+0x5ca>
    2afe:	f8 01       	movw	r30, r16
    2b00:	eb 5e       	subi	r30, 0xEB	; 235
    2b02:	fd 4f       	sbci	r31, 0xFD	; 253
    2b04:	20 81       	ld	r18, Z
    2b06:	31 97       	sbiw	r30, 0x01	; 1
    2b08:	80 81       	ld	r24, Z
    2b0a:	90 e0       	ldi	r25, 0x00	; 0
    2b0c:	a0 e0       	ldi	r26, 0x00	; 0
    2b0e:	b0 e0       	ldi	r27, 0x00	; 0
    2b10:	dc 01       	movw	r26, r24
    2b12:	99 27       	eor	r25, r25
    2b14:	88 27       	eor	r24, r24
    2b16:	b2 2b       	or	r27, r18
    2b18:	32 97       	sbiw	r30, 0x02	; 2
    2b1a:	20 81       	ld	r18, Z
    2b1c:	ac 01       	movw	r20, r24
    2b1e:	bd 01       	movw	r22, r26
    2b20:	42 2b       	or	r20, r18
    2b22:	31 96       	adiw	r30, 0x01	; 1
    2b24:	20 81       	ld	r18, Z
    2b26:	30 e0       	ldi	r19, 0x00	; 0
    2b28:	92 2f       	mov	r25, r18
    2b2a:	88 27       	eor	r24, r24
    2b2c:	a0 e0       	ldi	r26, 0x00	; 0
    2b2e:	b0 e0       	ldi	r27, 0x00	; 0
    2b30:	84 2b       	or	r24, r20
    2b32:	95 2b       	or	r25, r21
    2b34:	a6 2b       	or	r26, r22
    2b36:	b7 2b       	or	r27, r23
    2b38:	82 37       	cpi	r24, 0x72	; 114
    2b3a:	92 47       	sbci	r25, 0x72	; 114
    2b3c:	a1 44       	sbci	r26, 0x41	; 65
    2b3e:	b1 46       	sbci	r27, 0x61	; 97
    2b40:	09 f0       	breq	.+2      	; 0x2b44 <find_volume+0x536>
    2b42:	4d c0       	rjmp	.+154    	; 0x2bde <find_volume+0x5d0>
    2b44:	36 96       	adiw	r30, 0x06	; 6
    2b46:	20 81       	ld	r18, Z
    2b48:	31 97       	sbiw	r30, 0x01	; 1
    2b4a:	80 81       	ld	r24, Z
    2b4c:	90 e0       	ldi	r25, 0x00	; 0
    2b4e:	a0 e0       	ldi	r26, 0x00	; 0
    2b50:	b0 e0       	ldi	r27, 0x00	; 0
    2b52:	dc 01       	movw	r26, r24
    2b54:	99 27       	eor	r25, r25
    2b56:	88 27       	eor	r24, r24
    2b58:	b2 2b       	or	r27, r18
    2b5a:	32 97       	sbiw	r30, 0x02	; 2
    2b5c:	20 81       	ld	r18, Z
    2b5e:	ac 01       	movw	r20, r24
    2b60:	bd 01       	movw	r22, r26
    2b62:	42 2b       	or	r20, r18
    2b64:	31 96       	adiw	r30, 0x01	; 1
    2b66:	20 81       	ld	r18, Z
    2b68:	30 e0       	ldi	r19, 0x00	; 0
    2b6a:	92 2f       	mov	r25, r18
    2b6c:	88 27       	eor	r24, r24
    2b6e:	a0 e0       	ldi	r26, 0x00	; 0
    2b70:	b0 e0       	ldi	r27, 0x00	; 0
    2b72:	84 2b       	or	r24, r20
    2b74:	95 2b       	or	r25, r21
    2b76:	a6 2b       	or	r26, r22
    2b78:	b7 2b       	or	r27, r23
    2b7a:	f8 01       	movw	r30, r16
    2b7c:	86 87       	std	Z+14, r24	; 0x0e
    2b7e:	97 87       	std	Z+15, r25	; 0x0f
    2b80:	a0 8b       	std	Z+16, r26	; 0x10
    2b82:	b1 8b       	std	Z+17, r27	; 0x11
    2b84:	e3 5e       	subi	r30, 0xE3	; 227
    2b86:	fd 4f       	sbci	r31, 0xFD	; 253
    2b88:	20 81       	ld	r18, Z
    2b8a:	31 97       	sbiw	r30, 0x01	; 1
    2b8c:	80 81       	ld	r24, Z
    2b8e:	90 e0       	ldi	r25, 0x00	; 0
    2b90:	a0 e0       	ldi	r26, 0x00	; 0
    2b92:	b0 e0       	ldi	r27, 0x00	; 0
    2b94:	dc 01       	movw	r26, r24
    2b96:	99 27       	eor	r25, r25
    2b98:	88 27       	eor	r24, r24
    2b9a:	b2 2b       	or	r27, r18
    2b9c:	32 97       	sbiw	r30, 0x02	; 2
    2b9e:	20 81       	ld	r18, Z
    2ba0:	ac 01       	movw	r20, r24
    2ba2:	bd 01       	movw	r22, r26
    2ba4:	42 2b       	or	r20, r18
    2ba6:	31 96       	adiw	r30, 0x01	; 1
    2ba8:	20 81       	ld	r18, Z
    2baa:	30 e0       	ldi	r19, 0x00	; 0
    2bac:	92 2f       	mov	r25, r18
    2bae:	88 27       	eor	r24, r24
    2bb0:	a0 e0       	ldi	r26, 0x00	; 0
    2bb2:	b0 e0       	ldi	r27, 0x00	; 0
    2bb4:	84 2b       	or	r24, r20
    2bb6:	95 2b       	or	r25, r21
    2bb8:	a6 2b       	or	r26, r22
    2bba:	b7 2b       	or	r27, r23
    2bbc:	f8 01       	movw	r30, r16
    2bbe:	82 87       	std	Z+10, r24	; 0x0a
    2bc0:	93 87       	std	Z+11, r25	; 0x0b
    2bc2:	a4 87       	std	Z+12, r26	; 0x0c
    2bc4:	b5 87       	std	Z+13, r27	; 0x0d
    2bc6:	f3 e0       	ldi	r31, 0x03	; 3
    2bc8:	f9 8b       	std	Y+17, r31	; 0x11
    2bca:	0b c0       	rjmp	.+22     	; 0x2be2 <find_volume+0x5d4>
    2bcc:	e3 e0       	ldi	r30, 0x03	; 3
    2bce:	e9 8b       	std	Y+17, r30	; 0x11
    2bd0:	08 c0       	rjmp	.+16     	; 0x2be2 <find_volume+0x5d4>
    2bd2:	f3 e0       	ldi	r31, 0x03	; 3
    2bd4:	f9 8b       	std	Y+17, r31	; 0x11
    2bd6:	05 c0       	rjmp	.+10     	; 0x2be2 <find_volume+0x5d4>
    2bd8:	e3 e0       	ldi	r30, 0x03	; 3
    2bda:	e9 8b       	std	Y+17, r30	; 0x11
    2bdc:	02 c0       	rjmp	.+4      	; 0x2be2 <find_volume+0x5d4>
    2bde:	f3 e0       	ldi	r31, 0x03	; 3
    2be0:	f9 8b       	std	Y+17, r31	; 0x11
    2be2:	e9 89       	ldd	r30, Y+17	; 0x11
    2be4:	d8 01       	movw	r26, r16
    2be6:	ec 93       	st	X, r30
    2be8:	80 91 33 04 	lds	r24, 0x0433
    2bec:	90 91 34 04 	lds	r25, 0x0434
    2bf0:	01 96       	adiw	r24, 0x01	; 1
    2bf2:	90 93 34 04 	sts	0x0434, r25
    2bf6:	80 93 33 04 	sts	0x0433, r24
    2bfa:	17 96       	adiw	r26, 0x07	; 7
    2bfc:	9c 93       	st	X, r25
    2bfe:	8e 93       	st	-X, r24
    2c00:	16 97       	sbiw	r26, 0x06	; 6
    2c02:	80 e0       	ldi	r24, 0x00	; 0
    2c04:	ad c0       	rjmp	.+346    	; 0x2d60 <find_volume+0x752>
    2c06:	8b e0       	ldi	r24, 0x0B	; 11
    2c08:	ab c0       	rjmp	.+342    	; 0x2d60 <find_volume+0x752>
    2c0a:	8c e0       	ldi	r24, 0x0C	; 12
    2c0c:	a9 c0       	rjmp	.+338    	; 0x2d60 <find_volume+0x752>
    2c0e:	80 e0       	ldi	r24, 0x00	; 0
    2c10:	a7 c0       	rjmp	.+334    	; 0x2d60 <find_volume+0x752>
    2c12:	80 e0       	ldi	r24, 0x00	; 0
    2c14:	a5 c0       	rjmp	.+330    	; 0x2d60 <find_volume+0x752>
    2c16:	83 e0       	ldi	r24, 0x03	; 3
    2c18:	a3 c0       	rjmp	.+326    	; 0x2d60 <find_volume+0x752>
    2c1a:	8a e0       	ldi	r24, 0x0A	; 10
    2c1c:	a1 c0       	rjmp	.+322    	; 0x2d60 <find_volume+0x752>
    2c1e:	81 e0       	ldi	r24, 0x01	; 1
    2c20:	9f c0       	rjmp	.+318    	; 0x2d60 <find_volume+0x752>
    2c22:	8d e0       	ldi	r24, 0x0D	; 13
    2c24:	9d c0       	rjmp	.+314    	; 0x2d60 <find_volume+0x752>
    2c26:	8d e0       	ldi	r24, 0x0D	; 13
    2c28:	9b c0       	rjmp	.+310    	; 0x2d60 <find_volume+0x752>
    2c2a:	8d e0       	ldi	r24, 0x0D	; 13
    2c2c:	99 c0       	rjmp	.+306    	; 0x2d60 <find_volume+0x752>
    2c2e:	8d e0       	ldi	r24, 0x0D	; 13
    2c30:	97 c0       	rjmp	.+302    	; 0x2d60 <find_volume+0x752>
    2c32:	8d e0       	ldi	r24, 0x0D	; 13
    2c34:	95 c0       	rjmp	.+298    	; 0x2d60 <find_volume+0x752>
    2c36:	8d e0       	ldi	r24, 0x0D	; 13
    2c38:	93 c0       	rjmp	.+294    	; 0x2d60 <find_volume+0x752>
    2c3a:	8d e0       	ldi	r24, 0x0D	; 13
    2c3c:	91 c0       	rjmp	.+290    	; 0x2d60 <find_volume+0x752>
    2c3e:	8d e0       	ldi	r24, 0x0D	; 13
    2c40:	8f c0       	rjmp	.+286    	; 0x2d60 <find_volume+0x752>
    2c42:	8d e0       	ldi	r24, 0x0D	; 13
    2c44:	8d c0       	rjmp	.+282    	; 0x2d60 <find_volume+0x752>
    2c46:	8d e0       	ldi	r24, 0x0D	; 13
    2c48:	8b c0       	rjmp	.+278    	; 0x2d60 <find_volume+0x752>
    2c4a:	8d e0       	ldi	r24, 0x0D	; 13
    2c4c:	89 c0       	rjmp	.+274    	; 0x2d60 <find_volume+0x752>
    2c4e:	8d e0       	ldi	r24, 0x0D	; 13
    2c50:	87 c0       	rjmp	.+270    	; 0x2d60 <find_volume+0x752>
    2c52:	8d e0       	ldi	r24, 0x0D	; 13
    2c54:	85 c0       	rjmp	.+266    	; 0x2d60 <find_volume+0x752>
    2c56:	40 e0       	ldi	r20, 0x00	; 0
    2c58:	50 e0       	ldi	r21, 0x00	; 0
    2c5a:	ba 01       	movw	r22, r20
    2c5c:	c8 01       	movw	r24, r16
    2c5e:	4a dc       	rcall	.-1900   	; 0x24f4 <check_fs>
    2c60:	81 30       	cpi	r24, 0x01	; 1
    2c62:	09 f0       	breq	.+2      	; 0x2c66 <find_volume+0x658>
    2c64:	6e cd       	rjmp	.-1316   	; 0x2742 <find_volume+0x134>
    2c66:	9e 01       	movw	r18, r28
    2c68:	2f 5f       	subi	r18, 0xFF	; 255
    2c6a:	3f 4f       	sbci	r19, 0xFF	; 255
    2c6c:	59 01       	movw	r10, r18
    2c6e:	f8 01       	movw	r30, r16
    2c70:	e9 50       	subi	r30, 0x09	; 9
    2c72:	fe 4f       	sbci	r31, 0xFE	; 254
    2c74:	a8 01       	movw	r20, r16
    2c76:	49 5c       	subi	r20, 0xC9	; 201
    2c78:	5d 4f       	sbci	r21, 0xFD	; 253
    2c7a:	81 2c       	mov	r8, r1
    2c7c:	91 2c       	mov	r9, r1
    2c7e:	70 e0       	ldi	r23, 0x00	; 0
    2c80:	60 e0       	ldi	r22, 0x00	; 0
    2c82:	17 cd       	rjmp	.-1490   	; 0x26b2 <find_volume+0xa4>
    2c84:	29 01       	movw	r4, r18
    2c86:	3a 01       	movw	r6, r20
    2c88:	62 e0       	ldi	r22, 0x02	; 2
    2c8a:	46 0e       	add	r4, r22
    2c8c:	51 1c       	adc	r5, r1
    2c8e:	61 1c       	adc	r6, r1
    2c90:	71 1c       	adc	r7, r1
    2c92:	d8 01       	movw	r26, r16
    2c94:	52 96       	adiw	r26, 0x12	; 18
    2c96:	4d 92       	st	X+, r4
    2c98:	5d 92       	st	X+, r5
    2c9a:	6d 92       	st	X+, r6
    2c9c:	7c 92       	st	X, r7
    2c9e:	55 97       	sbiw	r26, 0x15	; 21
    2ca0:	f8 01       	movw	r30, r16
    2ca2:	c2 8e       	std	Z+26, r12	; 0x1a
    2ca4:	d3 8e       	std	Z+27, r13	; 0x1b
    2ca6:	e4 8e       	std	Z+28, r14	; 0x1c
    2ca8:	f5 8e       	std	Z+29, r15	; 0x1d
    2caa:	8e 89       	ldd	r24, Y+22	; 0x16
    2cac:	9f 89       	ldd	r25, Y+23	; 0x17
    2cae:	a8 8d       	ldd	r26, Y+24	; 0x18
    2cb0:	b9 8d       	ldd	r27, Y+25	; 0x19
    2cb2:	8c 0d       	add	r24, r12
    2cb4:	9d 1d       	adc	r25, r13
    2cb6:	ae 1d       	adc	r26, r14
    2cb8:	bf 1d       	adc	r27, r15
    2cba:	86 8f       	std	Z+30, r24	; 0x1e
    2cbc:	97 8f       	std	Z+31, r25	; 0x1f
    2cbe:	a0 a3       	std	Z+32, r26	; 0x20
    2cc0:	b1 a3       	std	Z+33, r27	; 0x21
    2cc2:	8a 89       	ldd	r24, Y+18	; 0x12
    2cc4:	9b 89       	ldd	r25, Y+19	; 0x13
    2cc6:	ac 89       	ldd	r26, Y+20	; 0x14
    2cc8:	bd 89       	ldd	r27, Y+21	; 0x15
    2cca:	8c 0d       	add	r24, r12
    2ccc:	9d 1d       	adc	r25, r13
    2cce:	ae 1d       	adc	r26, r14
    2cd0:	bf 1d       	adc	r27, r15
    2cd2:	86 a3       	std	Z+38, r24	; 0x26
    2cd4:	97 a3       	std	Z+39, r25	; 0x27
    2cd6:	a0 a7       	std	Z+40, r26	; 0x28
    2cd8:	b1 a7       	std	Z+41, r27	; 0x29
    2cda:	66 ce       	rjmp	.-820    	; 0x29a8 <find_volume+0x39a>
    2cdc:	8f ef       	ldi	r24, 0xFF	; 255
    2cde:	9f ef       	ldi	r25, 0xFF	; 255
    2ce0:	dc 01       	movw	r26, r24
    2ce2:	f8 01       	movw	r30, r16
    2ce4:	86 87       	std	Z+14, r24	; 0x0e
    2ce6:	97 87       	std	Z+15, r25	; 0x0f
    2ce8:	a0 8b       	std	Z+16, r26	; 0x10
    2cea:	b1 8b       	std	Z+17, r27	; 0x11
    2cec:	82 87       	std	Z+10, r24	; 0x0a
    2cee:	93 87       	std	Z+11, r25	; 0x0b
    2cf0:	a4 87       	std	Z+12, r26	; 0x0c
    2cf2:	b5 87       	std	Z+13, r27	; 0x0d
    2cf4:	80 e8       	ldi	r24, 0x80	; 128
    2cf6:	85 83       	std	Z+5, r24	; 0x05
    2cf8:	e1 5a       	subi	r30, 0xA1	; 161
    2cfa:	ff 4f       	sbci	r31, 0xFF	; 255
    2cfc:	80 81       	ld	r24, Z
    2cfe:	90 e0       	ldi	r25, 0x00	; 0
    2d00:	98 2f       	mov	r25, r24
    2d02:	88 27       	eor	r24, r24
    2d04:	31 97       	sbiw	r30, 0x01	; 1
    2d06:	20 81       	ld	r18, Z
    2d08:	82 2b       	or	r24, r18
    2d0a:	01 97       	sbiw	r24, 0x01	; 1
    2d0c:	09 f4       	brne	.+2      	; 0x2d10 <find_volume+0x702>
    2d0e:	be ce       	rjmp	.-644    	; 0x2a8c <find_volume+0x47e>
    2d10:	f3 e0       	ldi	r31, 0x03	; 3
    2d12:	f9 8b       	std	Y+17, r31	; 0x11
    2d14:	66 cf       	rjmp	.-308    	; 0x2be2 <find_volume+0x5d4>
    2d16:	8f ef       	ldi	r24, 0xFF	; 255
    2d18:	9f ef       	ldi	r25, 0xFF	; 255
    2d1a:	dc 01       	movw	r26, r24
    2d1c:	f8 01       	movw	r30, r16
    2d1e:	86 87       	std	Z+14, r24	; 0x0e
    2d20:	97 87       	std	Z+15, r25	; 0x0f
    2d22:	a0 8b       	std	Z+16, r26	; 0x10
    2d24:	b1 8b       	std	Z+17, r27	; 0x11
    2d26:	82 87       	std	Z+10, r24	; 0x0a
    2d28:	93 87       	std	Z+11, r25	; 0x0b
    2d2a:	a4 87       	std	Z+12, r26	; 0x0c
    2d2c:	b5 87       	std	Z+13, r27	; 0x0d
    2d2e:	80 e8       	ldi	r24, 0x80	; 128
    2d30:	85 83       	std	Z+5, r24	; 0x05
    2d32:	57 cf       	rjmp	.-338    	; 0x2be2 <find_volume+0x5d4>
    2d34:	ff ef       	ldi	r31, 0xFF	; 255
    2d36:	4f 0e       	add	r4, r31
    2d38:	f1 e0       	ldi	r31, 0x01	; 1
    2d3a:	5f 1e       	adc	r5, r31
    2d3c:	61 1c       	adc	r6, r1
    2d3e:	71 1c       	adc	r7, r1
    2d40:	03 2e       	mov	r0, r19
    2d42:	39 e0       	ldi	r19, 0x09	; 9
    2d44:	76 94       	lsr	r7
    2d46:	67 94       	ror	r6
    2d48:	57 94       	ror	r5
    2d4a:	47 94       	ror	r4
    2d4c:	3a 95       	dec	r19
    2d4e:	d1 f7       	brne	.-12     	; 0x2d44 <find_volume+0x736>
    2d50:	30 2d       	mov	r19, r0
    2d52:	84 14       	cp	r8, r4
    2d54:	95 04       	cpc	r9, r5
    2d56:	a6 04       	cpc	r10, r6
    2d58:	b7 04       	cpc	r11, r7
    2d5a:	08 f4       	brcc	.+2      	; 0x2d5e <find_volume+0x750>
    2d5c:	7a cf       	rjmp	.-268    	; 0x2c52 <find_volume+0x644>
    2d5e:	db cf       	rjmp	.-74     	; 0x2d16 <find_volume+0x708>
    2d60:	6d 96       	adiw	r28, 0x1d	; 29
    2d62:	0f b6       	in	r0, 0x3f	; 63
    2d64:	f8 94       	cli
    2d66:	de bf       	out	0x3e, r29	; 62
    2d68:	0f be       	out	0x3f, r0	; 63
    2d6a:	cd bf       	out	0x3d, r28	; 61
    2d6c:	df 91       	pop	r29
    2d6e:	cf 91       	pop	r28
    2d70:	1f 91       	pop	r17
    2d72:	0f 91       	pop	r16
    2d74:	ff 90       	pop	r15
    2d76:	ef 90       	pop	r14
    2d78:	df 90       	pop	r13
    2d7a:	cf 90       	pop	r12
    2d7c:	bf 90       	pop	r11
    2d7e:	af 90       	pop	r10
    2d80:	9f 90       	pop	r9
    2d82:	8f 90       	pop	r8
    2d84:	7f 90       	pop	r7
    2d86:	6f 90       	pop	r6
    2d88:	5f 90       	pop	r5
    2d8a:	4f 90       	pop	r4
    2d8c:	3f 90       	pop	r3
    2d8e:	2f 90       	pop	r2
    2d90:	08 95       	ret

00002d92 <clust2sect>:
    2d92:	cf 92       	push	r12
    2d94:	df 92       	push	r13
    2d96:	ef 92       	push	r14
    2d98:	ff 92       	push	r15
    2d9a:	fc 01       	movw	r30, r24
    2d9c:	9a 01       	movw	r18, r20
    2d9e:	ab 01       	movw	r20, r22
    2da0:	22 50       	subi	r18, 0x02	; 2
    2da2:	31 09       	sbc	r19, r1
    2da4:	41 09       	sbc	r20, r1
    2da6:	51 09       	sbc	r21, r1
    2da8:	c2 88       	ldd	r12, Z+18	; 0x12
    2daa:	d3 88       	ldd	r13, Z+19	; 0x13
    2dac:	e4 88       	ldd	r14, Z+20	; 0x14
    2dae:	f5 88       	ldd	r15, Z+21	; 0x15
    2db0:	82 e0       	ldi	r24, 0x02	; 2
    2db2:	c8 1a       	sub	r12, r24
    2db4:	d1 08       	sbc	r13, r1
    2db6:	e1 08       	sbc	r14, r1
    2db8:	f1 08       	sbc	r15, r1
    2dba:	2c 15       	cp	r18, r12
    2dbc:	3d 05       	cpc	r19, r13
    2dbe:	4e 05       	cpc	r20, r14
    2dc0:	5f 05       	cpc	r21, r15
    2dc2:	68 f4       	brcc	.+26     	; 0x2dde <clust2sect+0x4c>
    2dc4:	a2 81       	ldd	r26, Z+2	; 0x02
    2dc6:	b0 e0       	ldi	r27, 0x00	; 0
    2dc8:	0e 94 6d 49 	call	0x92da	; 0x92da <__muluhisi3>
    2dcc:	c6 a0       	ldd	r12, Z+38	; 0x26
    2dce:	d7 a0       	ldd	r13, Z+39	; 0x27
    2dd0:	e0 a4       	ldd	r14, Z+40	; 0x28
    2dd2:	f1 a4       	ldd	r15, Z+41	; 0x29
    2dd4:	6c 0d       	add	r22, r12
    2dd6:	7d 1d       	adc	r23, r13
    2dd8:	8e 1d       	adc	r24, r14
    2dda:	9f 1d       	adc	r25, r15
    2ddc:	03 c0       	rjmp	.+6      	; 0x2de4 <clust2sect+0x52>
    2dde:	60 e0       	ldi	r22, 0x00	; 0
    2de0:	70 e0       	ldi	r23, 0x00	; 0
    2de2:	cb 01       	movw	r24, r22
    2de4:	ff 90       	pop	r15
    2de6:	ef 90       	pop	r14
    2de8:	df 90       	pop	r13
    2dea:	cf 90       	pop	r12
    2dec:	08 95       	ret

00002dee <get_fat>:
    2dee:	af 92       	push	r10
    2df0:	bf 92       	push	r11
    2df2:	cf 92       	push	r12
    2df4:	df 92       	push	r13
    2df6:	ef 92       	push	r14
    2df8:	ff 92       	push	r15
    2dfa:	0f 93       	push	r16
    2dfc:	1f 93       	push	r17
    2dfe:	cf 93       	push	r28
    2e00:	df 93       	push	r29
    2e02:	ec 01       	movw	r28, r24
    2e04:	6a 01       	movw	r12, r20
    2e06:	7b 01       	movw	r14, r22
    2e08:	42 30       	cpi	r20, 0x02	; 2
    2e0a:	51 05       	cpc	r21, r1
    2e0c:	61 05       	cpc	r22, r1
    2e0e:	71 05       	cpc	r23, r1
    2e10:	08 f4       	brcc	.+2      	; 0x2e14 <get_fat+0x26>
    2e12:	c3 c0       	rjmp	.+390    	; 0x2f9a <get_fat+0x1ac>
    2e14:	8a 89       	ldd	r24, Y+18	; 0x12
    2e16:	9b 89       	ldd	r25, Y+19	; 0x13
    2e18:	ac 89       	ldd	r26, Y+20	; 0x14
    2e1a:	bd 89       	ldd	r27, Y+21	; 0x15
    2e1c:	48 17       	cp	r20, r24
    2e1e:	59 07       	cpc	r21, r25
    2e20:	6a 07       	cpc	r22, r26
    2e22:	7b 07       	cpc	r23, r27
    2e24:	08 f0       	brcs	.+2      	; 0x2e28 <get_fat+0x3a>
    2e26:	be c0       	rjmp	.+380    	; 0x2fa4 <get_fat+0x1b6>
    2e28:	88 81       	ld	r24, Y
    2e2a:	82 30       	cpi	r24, 0x02	; 2
    2e2c:	09 f4       	brne	.+2      	; 0x2e30 <get_fat+0x42>
    2e2e:	4b c0       	rjmp	.+150    	; 0x2ec6 <get_fat+0xd8>
    2e30:	83 30       	cpi	r24, 0x03	; 3
    2e32:	09 f4       	brne	.+2      	; 0x2e36 <get_fat+0x48>
    2e34:	6c c0       	rjmp	.+216    	; 0x2f0e <get_fat+0x120>
    2e36:	81 30       	cpi	r24, 0x01	; 1
    2e38:	09 f0       	breq	.+2      	; 0x2e3c <get_fat+0x4e>
    2e3a:	b9 c0       	rjmp	.+370    	; 0x2fae <get_fat+0x1c0>
    2e3c:	8a 01       	movw	r16, r20
    2e3e:	16 95       	lsr	r17
    2e40:	07 95       	ror	r16
    2e42:	04 0f       	add	r16, r20
    2e44:	15 1f       	adc	r17, r21
    2e46:	c8 01       	movw	r24, r16
    2e48:	89 2f       	mov	r24, r25
    2e4a:	99 27       	eor	r25, r25
    2e4c:	86 95       	lsr	r24
    2e4e:	4e 8d       	ldd	r20, Y+30	; 0x1e
    2e50:	5f 8d       	ldd	r21, Y+31	; 0x1f
    2e52:	68 a1       	ldd	r22, Y+32	; 0x20
    2e54:	79 a1       	ldd	r23, Y+33	; 0x21
    2e56:	48 0f       	add	r20, r24
    2e58:	59 1f       	adc	r21, r25
    2e5a:	61 1d       	adc	r22, r1
    2e5c:	71 1d       	adc	r23, r1
    2e5e:	ce 01       	movw	r24, r28
    2e60:	0d db       	rcall	.-2534   	; 0x247c <move_window>
    2e62:	81 11       	cpse	r24, r1
    2e64:	a9 c0       	rjmp	.+338    	; 0x2fb8 <get_fat+0x1ca>
    2e66:	58 01       	movw	r10, r16
    2e68:	8f ef       	ldi	r24, 0xFF	; 255
    2e6a:	a8 1a       	sub	r10, r24
    2e6c:	b8 0a       	sbc	r11, r24
    2e6e:	11 70       	andi	r17, 0x01	; 1
    2e70:	fe 01       	movw	r30, r28
    2e72:	e0 0f       	add	r30, r16
    2e74:	f1 1f       	adc	r31, r17
    2e76:	16 a5       	ldd	r17, Z+46	; 0x2e
    2e78:	c5 01       	movw	r24, r10
    2e7a:	89 2f       	mov	r24, r25
    2e7c:	99 27       	eor	r25, r25
    2e7e:	86 95       	lsr	r24
    2e80:	4e 8d       	ldd	r20, Y+30	; 0x1e
    2e82:	5f 8d       	ldd	r21, Y+31	; 0x1f
    2e84:	68 a1       	ldd	r22, Y+32	; 0x20
    2e86:	79 a1       	ldd	r23, Y+33	; 0x21
    2e88:	48 0f       	add	r20, r24
    2e8a:	59 1f       	adc	r21, r25
    2e8c:	61 1d       	adc	r22, r1
    2e8e:	71 1d       	adc	r23, r1
    2e90:	ce 01       	movw	r24, r28
    2e92:	f4 da       	rcall	.-2584   	; 0x247c <move_window>
    2e94:	81 11       	cpse	r24, r1
    2e96:	94 c0       	rjmp	.+296    	; 0x2fc0 <get_fat+0x1d2>
    2e98:	81 e0       	ldi	r24, 0x01	; 1
    2e9a:	b8 22       	and	r11, r24
    2e9c:	ca 0d       	add	r28, r10
    2e9e:	db 1d       	adc	r29, r11
    2ea0:	8e a5       	ldd	r24, Y+46	; 0x2e
    2ea2:	61 2f       	mov	r22, r17
    2ea4:	70 e0       	ldi	r23, 0x00	; 0
    2ea6:	78 2b       	or	r23, r24
    2ea8:	c0 fe       	sbrs	r12, 0
    2eaa:	09 c0       	rjmp	.+18     	; 0x2ebe <get_fat+0xd0>
    2eac:	72 95       	swap	r23
    2eae:	62 95       	swap	r22
    2eb0:	6f 70       	andi	r22, 0x0F	; 15
    2eb2:	67 27       	eor	r22, r23
    2eb4:	7f 70       	andi	r23, 0x0F	; 15
    2eb6:	67 27       	eor	r22, r23
    2eb8:	80 e0       	ldi	r24, 0x00	; 0
    2eba:	90 e0       	ldi	r25, 0x00	; 0
    2ebc:	8c c0       	rjmp	.+280    	; 0x2fd6 <get_fat+0x1e8>
    2ebe:	7f 70       	andi	r23, 0x0F	; 15
    2ec0:	80 e0       	ldi	r24, 0x00	; 0
    2ec2:	90 e0       	ldi	r25, 0x00	; 0
    2ec4:	88 c0       	rjmp	.+272    	; 0x2fd6 <get_fat+0x1e8>
    2ec6:	45 2f       	mov	r20, r21
    2ec8:	56 2f       	mov	r21, r22
    2eca:	67 2f       	mov	r22, r23
    2ecc:	77 27       	eor	r23, r23
    2ece:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2ed0:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2ed2:	a8 a1       	ldd	r26, Y+32	; 0x20
    2ed4:	b9 a1       	ldd	r27, Y+33	; 0x21
    2ed6:	48 0f       	add	r20, r24
    2ed8:	59 1f       	adc	r21, r25
    2eda:	6a 1f       	adc	r22, r26
    2edc:	7b 1f       	adc	r23, r27
    2ede:	ce 01       	movw	r24, r28
    2ee0:	cd da       	rcall	.-2662   	; 0x247c <move_window>
    2ee2:	81 11       	cpse	r24, r1
    2ee4:	71 c0       	rjmp	.+226    	; 0x2fc8 <get_fat+0x1da>
    2ee6:	cc 0c       	add	r12, r12
    2ee8:	dd 1c       	adc	r13, r13
    2eea:	ee 1c       	adc	r14, r14
    2eec:	ff 1c       	adc	r15, r15
    2eee:	e8 94       	clt
    2ef0:	c0 f8       	bld	r12, 0
    2ef2:	81 e0       	ldi	r24, 0x01	; 1
    2ef4:	d8 22       	and	r13, r24
    2ef6:	ee 24       	eor	r14, r14
    2ef8:	ff 24       	eor	r15, r15
    2efa:	fe 01       	movw	r30, r28
    2efc:	ec 0d       	add	r30, r12
    2efe:	fd 1d       	adc	r31, r13
    2f00:	66 a5       	ldd	r22, Z+46	; 0x2e
    2f02:	87 a5       	ldd	r24, Z+47	; 0x2f
    2f04:	70 e0       	ldi	r23, 0x00	; 0
    2f06:	78 2b       	or	r23, r24
    2f08:	80 e0       	ldi	r24, 0x00	; 0
    2f0a:	90 e0       	ldi	r25, 0x00	; 0
    2f0c:	64 c0       	rjmp	.+200    	; 0x2fd6 <get_fat+0x1e8>
    2f0e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2f10:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2f12:	a8 a1       	ldd	r26, Y+32	; 0x20
    2f14:	b9 a1       	ldd	r27, Y+33	; 0x21
    2f16:	68 94       	set
    2f18:	16 f8       	bld	r1, 6
    2f1a:	76 95       	lsr	r23
    2f1c:	67 95       	ror	r22
    2f1e:	57 95       	ror	r21
    2f20:	47 95       	ror	r20
    2f22:	16 94       	lsr	r1
    2f24:	d1 f7       	brne	.-12     	; 0x2f1a <get_fat+0x12c>
    2f26:	48 0f       	add	r20, r24
    2f28:	59 1f       	adc	r21, r25
    2f2a:	6a 1f       	adc	r22, r26
    2f2c:	7b 1f       	adc	r23, r27
    2f2e:	ce 01       	movw	r24, r28
    2f30:	a5 da       	rcall	.-2742   	; 0x247c <move_window>
    2f32:	81 11       	cpse	r24, r1
    2f34:	4d c0       	rjmp	.+154    	; 0x2fd0 <get_fat+0x1e2>
    2f36:	cc 0c       	add	r12, r12
    2f38:	dd 1c       	adc	r13, r13
    2f3a:	ee 1c       	adc	r14, r14
    2f3c:	ff 1c       	adc	r15, r15
    2f3e:	cc 0c       	add	r12, r12
    2f40:	dd 1c       	adc	r13, r13
    2f42:	ee 1c       	adc	r14, r14
    2f44:	ff 1c       	adc	r15, r15
    2f46:	8c ef       	ldi	r24, 0xFC	; 252
    2f48:	c8 22       	and	r12, r24
    2f4a:	81 e0       	ldi	r24, 0x01	; 1
    2f4c:	d8 22       	and	r13, r24
    2f4e:	ee 24       	eor	r14, r14
    2f50:	ff 24       	eor	r15, r15
    2f52:	f6 01       	movw	r30, r12
    2f54:	be 96       	adiw	r30, 0x2e	; 46
    2f56:	ec 0f       	add	r30, r28
    2f58:	fd 1f       	adc	r31, r29
    2f5a:	22 81       	ldd	r18, Z+2	; 0x02
    2f5c:	63 81       	ldd	r22, Z+3	; 0x03
    2f5e:	86 2f       	mov	r24, r22
    2f60:	90 e0       	ldi	r25, 0x00	; 0
    2f62:	a0 e0       	ldi	r26, 0x00	; 0
    2f64:	b0 e0       	ldi	r27, 0x00	; 0
    2f66:	b8 2f       	mov	r27, r24
    2f68:	aa 27       	eor	r26, r26
    2f6a:	99 27       	eor	r25, r25
    2f6c:	88 27       	eor	r24, r24
    2f6e:	ac 01       	movw	r20, r24
    2f70:	bd 01       	movw	r22, r26
    2f72:	62 2b       	or	r22, r18
    2f74:	81 81       	ldd	r24, Z+1	; 0x01
    2f76:	90 e0       	ldi	r25, 0x00	; 0
    2f78:	98 2f       	mov	r25, r24
    2f7a:	88 27       	eor	r24, r24
    2f7c:	a0 e0       	ldi	r26, 0x00	; 0
    2f7e:	b0 e0       	ldi	r27, 0x00	; 0
    2f80:	84 2b       	or	r24, r20
    2f82:	95 2b       	or	r25, r21
    2f84:	a6 2b       	or	r26, r22
    2f86:	b7 2b       	or	r27, r23
    2f88:	fe 01       	movw	r30, r28
    2f8a:	ec 0d       	add	r30, r12
    2f8c:	fd 1d       	adc	r31, r13
    2f8e:	26 a5       	ldd	r18, Z+46	; 0x2e
    2f90:	82 2b       	or	r24, r18
    2f92:	bc 01       	movw	r22, r24
    2f94:	cd 01       	movw	r24, r26
    2f96:	9f 70       	andi	r25, 0x0F	; 15
    2f98:	1e c0       	rjmp	.+60     	; 0x2fd6 <get_fat+0x1e8>
    2f9a:	61 e0       	ldi	r22, 0x01	; 1
    2f9c:	70 e0       	ldi	r23, 0x00	; 0
    2f9e:	80 e0       	ldi	r24, 0x00	; 0
    2fa0:	90 e0       	ldi	r25, 0x00	; 0
    2fa2:	19 c0       	rjmp	.+50     	; 0x2fd6 <get_fat+0x1e8>
    2fa4:	61 e0       	ldi	r22, 0x01	; 1
    2fa6:	70 e0       	ldi	r23, 0x00	; 0
    2fa8:	80 e0       	ldi	r24, 0x00	; 0
    2faa:	90 e0       	ldi	r25, 0x00	; 0
    2fac:	14 c0       	rjmp	.+40     	; 0x2fd6 <get_fat+0x1e8>
    2fae:	61 e0       	ldi	r22, 0x01	; 1
    2fb0:	70 e0       	ldi	r23, 0x00	; 0
    2fb2:	80 e0       	ldi	r24, 0x00	; 0
    2fb4:	90 e0       	ldi	r25, 0x00	; 0
    2fb6:	0f c0       	rjmp	.+30     	; 0x2fd6 <get_fat+0x1e8>
    2fb8:	6f ef       	ldi	r22, 0xFF	; 255
    2fba:	7f ef       	ldi	r23, 0xFF	; 255
    2fbc:	cb 01       	movw	r24, r22
    2fbe:	0b c0       	rjmp	.+22     	; 0x2fd6 <get_fat+0x1e8>
    2fc0:	6f ef       	ldi	r22, 0xFF	; 255
    2fc2:	7f ef       	ldi	r23, 0xFF	; 255
    2fc4:	cb 01       	movw	r24, r22
    2fc6:	07 c0       	rjmp	.+14     	; 0x2fd6 <get_fat+0x1e8>
    2fc8:	6f ef       	ldi	r22, 0xFF	; 255
    2fca:	7f ef       	ldi	r23, 0xFF	; 255
    2fcc:	cb 01       	movw	r24, r22
    2fce:	03 c0       	rjmp	.+6      	; 0x2fd6 <get_fat+0x1e8>
    2fd0:	6f ef       	ldi	r22, 0xFF	; 255
    2fd2:	7f ef       	ldi	r23, 0xFF	; 255
    2fd4:	cb 01       	movw	r24, r22
    2fd6:	df 91       	pop	r29
    2fd8:	cf 91       	pop	r28
    2fda:	1f 91       	pop	r17
    2fdc:	0f 91       	pop	r16
    2fde:	ff 90       	pop	r15
    2fe0:	ef 90       	pop	r14
    2fe2:	df 90       	pop	r13
    2fe4:	cf 90       	pop	r12
    2fe6:	bf 90       	pop	r11
    2fe8:	af 90       	pop	r10
    2fea:	08 95       	ret

00002fec <dir_sdi>:
    2fec:	af 92       	push	r10
    2fee:	bf 92       	push	r11
    2ff0:	cf 92       	push	r12
    2ff2:	df 92       	push	r13
    2ff4:	ef 92       	push	r14
    2ff6:	ff 92       	push	r15
    2ff8:	0f 93       	push	r16
    2ffa:	1f 93       	push	r17
    2ffc:	cf 93       	push	r28
    2ffe:	df 93       	push	r29
    3000:	ec 01       	movw	r28, r24
    3002:	8b 01       	movw	r16, r22
    3004:	7d 83       	std	Y+5, r23	; 0x05
    3006:	6c 83       	std	Y+4, r22	; 0x04
    3008:	ce 80       	ldd	r12, Y+6	; 0x06
    300a:	df 80       	ldd	r13, Y+7	; 0x07
    300c:	e8 84       	ldd	r14, Y+8	; 0x08
    300e:	f9 84       	ldd	r15, Y+9	; 0x09
    3010:	81 e0       	ldi	r24, 0x01	; 1
    3012:	c8 16       	cp	r12, r24
    3014:	d1 04       	cpc	r13, r1
    3016:	e1 04       	cpc	r14, r1
    3018:	f1 04       	cpc	r15, r1
    301a:	09 f4       	brne	.+2      	; 0x301e <dir_sdi+0x32>
    301c:	8a c0       	rjmp	.+276    	; 0x3132 <dir_sdi+0x146>
    301e:	e8 81       	ld	r30, Y
    3020:	f9 81       	ldd	r31, Y+1	; 0x01
    3022:	82 89       	ldd	r24, Z+18	; 0x12
    3024:	93 89       	ldd	r25, Z+19	; 0x13
    3026:	a4 89       	ldd	r26, Z+20	; 0x14
    3028:	b5 89       	ldd	r27, Z+21	; 0x15
    302a:	c8 16       	cp	r12, r24
    302c:	d9 06       	cpc	r13, r25
    302e:	ea 06       	cpc	r14, r26
    3030:	fb 06       	cpc	r15, r27
    3032:	08 f0       	brcs	.+2      	; 0x3036 <dir_sdi+0x4a>
    3034:	80 c0       	rjmp	.+256    	; 0x3136 <dir_sdi+0x14a>
    3036:	c1 14       	cp	r12, r1
    3038:	d1 04       	cpc	r13, r1
    303a:	e1 04       	cpc	r14, r1
    303c:	f1 04       	cpc	r15, r1
    303e:	c1 f4       	brne	.+48     	; 0x3070 <dir_sdi+0x84>
    3040:	80 81       	ld	r24, Z
    3042:	83 30       	cpi	r24, 0x03	; 3
    3044:	41 f4       	brne	.+16     	; 0x3056 <dir_sdi+0x6a>
    3046:	82 a1       	ldd	r24, Z+34	; 0x22
    3048:	93 a1       	ldd	r25, Z+35	; 0x23
    304a:	a4 a1       	ldd	r26, Z+36	; 0x24
    304c:	b5 a1       	ldd	r27, Z+37	; 0x25
    304e:	00 97       	sbiw	r24, 0x00	; 0
    3050:	a1 05       	cpc	r26, r1
    3052:	b1 05       	cpc	r27, r1
    3054:	59 f4       	brne	.+22     	; 0x306c <dir_sdi+0x80>
    3056:	80 85       	ldd	r24, Z+8	; 0x08
    3058:	91 85       	ldd	r25, Z+9	; 0x09
    305a:	08 17       	cp	r16, r24
    305c:	19 07       	cpc	r17, r25
    305e:	08 f0       	brcs	.+2      	; 0x3062 <dir_sdi+0x76>
    3060:	6c c0       	rjmp	.+216    	; 0x313a <dir_sdi+0x14e>
    3062:	62 a1       	ldd	r22, Z+34	; 0x22
    3064:	73 a1       	ldd	r23, Z+35	; 0x23
    3066:	84 a1       	ldd	r24, Z+36	; 0x24
    3068:	95 a1       	ldd	r25, Z+37	; 0x25
    306a:	35 c0       	rjmp	.+106    	; 0x30d6 <dir_sdi+0xea>
    306c:	6c 01       	movw	r12, r24
    306e:	7d 01       	movw	r14, r26
    3070:	a2 80       	ldd	r10, Z+2	; 0x02
    3072:	80 e1       	ldi	r24, 0x10	; 16
    3074:	a8 9e       	mul	r10, r24
    3076:	50 01       	movw	r10, r0
    3078:	11 24       	eor	r1, r1
    307a:	0a 15       	cp	r16, r10
    307c:	1b 05       	cpc	r17, r11
    307e:	30 f1       	brcs	.+76     	; 0x30cc <dir_sdi+0xe0>
    3080:	b7 01       	movw	r22, r14
    3082:	a6 01       	movw	r20, r12
    3084:	88 81       	ld	r24, Y
    3086:	99 81       	ldd	r25, Y+1	; 0x01
    3088:	b2 de       	rcall	.-668    	; 0x2dee <get_fat>
    308a:	6b 01       	movw	r12, r22
    308c:	7c 01       	movw	r14, r24
    308e:	8f ef       	ldi	r24, 0xFF	; 255
    3090:	c8 16       	cp	r12, r24
    3092:	d8 06       	cpc	r13, r24
    3094:	e8 06       	cpc	r14, r24
    3096:	f8 06       	cpc	r15, r24
    3098:	09 f4       	brne	.+2      	; 0x309c <dir_sdi+0xb0>
    309a:	51 c0       	rjmp	.+162    	; 0x313e <dir_sdi+0x152>
    309c:	82 e0       	ldi	r24, 0x02	; 2
    309e:	c8 16       	cp	r12, r24
    30a0:	d1 04       	cpc	r13, r1
    30a2:	e1 04       	cpc	r14, r1
    30a4:	f1 04       	cpc	r15, r1
    30a6:	08 f4       	brcc	.+2      	; 0x30aa <dir_sdi+0xbe>
    30a8:	4c c0       	rjmp	.+152    	; 0x3142 <dir_sdi+0x156>
    30aa:	e8 81       	ld	r30, Y
    30ac:	f9 81       	ldd	r31, Y+1	; 0x01
    30ae:	82 89       	ldd	r24, Z+18	; 0x12
    30b0:	93 89       	ldd	r25, Z+19	; 0x13
    30b2:	a4 89       	ldd	r26, Z+20	; 0x14
    30b4:	b5 89       	ldd	r27, Z+21	; 0x15
    30b6:	c8 16       	cp	r12, r24
    30b8:	d9 06       	cpc	r13, r25
    30ba:	ea 06       	cpc	r14, r26
    30bc:	fb 06       	cpc	r15, r27
    30be:	08 f0       	brcs	.+2      	; 0x30c2 <dir_sdi+0xd6>
    30c0:	42 c0       	rjmp	.+132    	; 0x3146 <dir_sdi+0x15a>
    30c2:	0a 19       	sub	r16, r10
    30c4:	1b 09       	sbc	r17, r11
    30c6:	0a 15       	cp	r16, r10
    30c8:	1b 05       	cpc	r17, r11
    30ca:	d0 f6       	brcc	.-76     	; 0x3080 <dir_sdi+0x94>
    30cc:	b7 01       	movw	r22, r14
    30ce:	a6 01       	movw	r20, r12
    30d0:	88 81       	ld	r24, Y
    30d2:	99 81       	ldd	r25, Y+1	; 0x01
    30d4:	5e de       	rcall	.-836    	; 0x2d92 <clust2sect>
    30d6:	ca 86       	std	Y+10, r12	; 0x0a
    30d8:	db 86       	std	Y+11, r13	; 0x0b
    30da:	ec 86       	std	Y+12, r14	; 0x0c
    30dc:	fd 86       	std	Y+13, r15	; 0x0d
    30de:	61 15       	cp	r22, r1
    30e0:	71 05       	cpc	r23, r1
    30e2:	81 05       	cpc	r24, r1
    30e4:	91 05       	cpc	r25, r1
    30e6:	89 f1       	breq	.+98     	; 0x314a <dir_sdi+0x15e>
    30e8:	98 01       	movw	r18, r16
    30ea:	32 95       	swap	r19
    30ec:	22 95       	swap	r18
    30ee:	2f 70       	andi	r18, 0x0F	; 15
    30f0:	23 27       	eor	r18, r19
    30f2:	3f 70       	andi	r19, 0x0F	; 15
    30f4:	23 27       	eor	r18, r19
    30f6:	dc 01       	movw	r26, r24
    30f8:	cb 01       	movw	r24, r22
    30fa:	82 0f       	add	r24, r18
    30fc:	93 1f       	adc	r25, r19
    30fe:	a1 1d       	adc	r26, r1
    3100:	b1 1d       	adc	r27, r1
    3102:	8e 87       	std	Y+14, r24	; 0x0e
    3104:	9f 87       	std	Y+15, r25	; 0x0f
    3106:	a8 8b       	std	Y+16, r26	; 0x10
    3108:	b9 8b       	std	Y+17, r27	; 0x11
    310a:	0f 70       	andi	r16, 0x0F	; 15
    310c:	11 27       	eor	r17, r17
    310e:	00 0f       	add	r16, r16
    3110:	11 1f       	adc	r17, r17
    3112:	02 95       	swap	r16
    3114:	12 95       	swap	r17
    3116:	10 7f       	andi	r17, 0xF0	; 240
    3118:	10 27       	eor	r17, r16
    311a:	00 7f       	andi	r16, 0xF0	; 240
    311c:	10 27       	eor	r17, r16
    311e:	02 5d       	subi	r16, 0xD2	; 210
    3120:	1f 4f       	sbci	r17, 0xFF	; 255
    3122:	88 81       	ld	r24, Y
    3124:	99 81       	ldd	r25, Y+1	; 0x01
    3126:	80 0f       	add	r24, r16
    3128:	91 1f       	adc	r25, r17
    312a:	9b 8b       	std	Y+19, r25	; 0x13
    312c:	8a 8b       	std	Y+18, r24	; 0x12
    312e:	80 e0       	ldi	r24, 0x00	; 0
    3130:	0d c0       	rjmp	.+26     	; 0x314c <dir_sdi+0x160>
    3132:	82 e0       	ldi	r24, 0x02	; 2
    3134:	0b c0       	rjmp	.+22     	; 0x314c <dir_sdi+0x160>
    3136:	82 e0       	ldi	r24, 0x02	; 2
    3138:	09 c0       	rjmp	.+18     	; 0x314c <dir_sdi+0x160>
    313a:	82 e0       	ldi	r24, 0x02	; 2
    313c:	07 c0       	rjmp	.+14     	; 0x314c <dir_sdi+0x160>
    313e:	81 e0       	ldi	r24, 0x01	; 1
    3140:	05 c0       	rjmp	.+10     	; 0x314c <dir_sdi+0x160>
    3142:	82 e0       	ldi	r24, 0x02	; 2
    3144:	03 c0       	rjmp	.+6      	; 0x314c <dir_sdi+0x160>
    3146:	82 e0       	ldi	r24, 0x02	; 2
    3148:	01 c0       	rjmp	.+2      	; 0x314c <dir_sdi+0x160>
    314a:	82 e0       	ldi	r24, 0x02	; 2
    314c:	df 91       	pop	r29
    314e:	cf 91       	pop	r28
    3150:	1f 91       	pop	r17
    3152:	0f 91       	pop	r16
    3154:	ff 90       	pop	r15
    3156:	ef 90       	pop	r14
    3158:	df 90       	pop	r13
    315a:	cf 90       	pop	r12
    315c:	bf 90       	pop	r11
    315e:	af 90       	pop	r10
    3160:	08 95       	ret

00003162 <put_fat>:
    3162:	4f 92       	push	r4
    3164:	5f 92       	push	r5
    3166:	6f 92       	push	r6
    3168:	7f 92       	push	r7
    316a:	8f 92       	push	r8
    316c:	9f 92       	push	r9
    316e:	af 92       	push	r10
    3170:	bf 92       	push	r11
    3172:	cf 92       	push	r12
    3174:	df 92       	push	r13
    3176:	ef 92       	push	r14
    3178:	ff 92       	push	r15
    317a:	0f 93       	push	r16
    317c:	1f 93       	push	r17
    317e:	cf 93       	push	r28
    3180:	df 93       	push	r29
    3182:	ec 01       	movw	r28, r24
    3184:	6a 01       	movw	r12, r20
    3186:	7b 01       	movw	r14, r22
    3188:	28 01       	movw	r4, r16
    318a:	39 01       	movw	r6, r18
    318c:	42 30       	cpi	r20, 0x02	; 2
    318e:	51 05       	cpc	r21, r1
    3190:	61 05       	cpc	r22, r1
    3192:	71 05       	cpc	r23, r1
    3194:	08 f4       	brcc	.+2      	; 0x3198 <put_fat+0x36>
    3196:	d8 c0       	rjmp	.+432    	; 0x3348 <put_fat+0x1e6>
    3198:	8a 89       	ldd	r24, Y+18	; 0x12
    319a:	9b 89       	ldd	r25, Y+19	; 0x13
    319c:	ac 89       	ldd	r26, Y+20	; 0x14
    319e:	bd 89       	ldd	r27, Y+21	; 0x15
    31a0:	48 17       	cp	r20, r24
    31a2:	59 07       	cpc	r21, r25
    31a4:	6a 07       	cpc	r22, r26
    31a6:	7b 07       	cpc	r23, r27
    31a8:	08 f0       	brcs	.+2      	; 0x31ac <put_fat+0x4a>
    31aa:	d0 c0       	rjmp	.+416    	; 0x334c <put_fat+0x1ea>
    31ac:	88 81       	ld	r24, Y
    31ae:	82 30       	cpi	r24, 0x02	; 2
    31b0:	09 f4       	brne	.+2      	; 0x31b4 <put_fat+0x52>
    31b2:	62 c0       	rjmp	.+196    	; 0x3278 <put_fat+0x116>
    31b4:	83 30       	cpi	r24, 0x03	; 3
    31b6:	09 f4       	brne	.+2      	; 0x31ba <put_fat+0x58>
    31b8:	85 c0       	rjmp	.+266    	; 0x32c4 <put_fat+0x162>
    31ba:	81 30       	cpi	r24, 0x01	; 1
    31bc:	09 f0       	breq	.+2      	; 0x31c0 <put_fat+0x5e>
    31be:	c8 c0       	rjmp	.+400    	; 0x3350 <put_fat+0x1ee>
    31c0:	5a 01       	movw	r10, r20
    31c2:	b6 94       	lsr	r11
    31c4:	a7 94       	ror	r10
    31c6:	a4 0e       	add	r10, r20
    31c8:	b5 1e       	adc	r11, r21
    31ca:	c5 01       	movw	r24, r10
    31cc:	89 2f       	mov	r24, r25
    31ce:	99 27       	eor	r25, r25
    31d0:	86 95       	lsr	r24
    31d2:	4e 8d       	ldd	r20, Y+30	; 0x1e
    31d4:	5f 8d       	ldd	r21, Y+31	; 0x1f
    31d6:	68 a1       	ldd	r22, Y+32	; 0x20
    31d8:	79 a1       	ldd	r23, Y+33	; 0x21
    31da:	48 0f       	add	r20, r24
    31dc:	59 1f       	adc	r21, r25
    31de:	61 1d       	adc	r22, r1
    31e0:	71 1d       	adc	r23, r1
    31e2:	ce 01       	movw	r24, r28
    31e4:	4b d9       	rcall	.-3434   	; 0x247c <move_window>
    31e6:	18 2f       	mov	r17, r24
    31e8:	81 11       	cpse	r24, r1
    31ea:	d0 c0       	rjmp	.+416    	; 0x338c <put_fat+0x22a>
    31ec:	45 01       	movw	r8, r10
    31ee:	8f ef       	ldi	r24, 0xFF	; 255
    31f0:	88 1a       	sub	r8, r24
    31f2:	98 0a       	sbc	r9, r24
    31f4:	a1 e0       	ldi	r26, 0x01	; 1
    31f6:	ba 22       	and	r11, r26
    31f8:	c0 fe       	sbrs	r12, 0
    31fa:	20 c0       	rjmp	.+64     	; 0x323c <put_fat+0xda>
    31fc:	fe 01       	movw	r30, r28
    31fe:	ea 0d       	add	r30, r10
    3200:	fb 1d       	adc	r31, r11
    3202:	86 a5       	ldd	r24, Z+46	; 0x2e
    3204:	28 2f       	mov	r18, r24
    3206:	2f 70       	andi	r18, 0x0F	; 15
    3208:	b0 e1       	ldi	r27, 0x10	; 16
    320a:	4b 9e       	mul	r4, r27
    320c:	c0 01       	movw	r24, r0
    320e:	11 24       	eor	r1, r1
    3210:	82 2b       	or	r24, r18
    3212:	86 a7       	std	Z+46, r24	; 0x2e
    3214:	81 e0       	ldi	r24, 0x01	; 1
    3216:	8c 83       	std	Y+4, r24	; 0x04
    3218:	4e 8d       	ldd	r20, Y+30	; 0x1e
    321a:	5f 8d       	ldd	r21, Y+31	; 0x1f
    321c:	68 a1       	ldd	r22, Y+32	; 0x20
    321e:	79 a1       	ldd	r23, Y+33	; 0x21
    3220:	c4 01       	movw	r24, r8
    3222:	89 2f       	mov	r24, r25
    3224:	99 27       	eor	r25, r25
    3226:	86 95       	lsr	r24
    3228:	48 0f       	add	r20, r24
    322a:	59 1f       	adc	r21, r25
    322c:	61 1d       	adc	r22, r1
    322e:	71 1d       	adc	r23, r1
    3230:	ce 01       	movw	r24, r28
    3232:	24 d9       	rcall	.-3512   	; 0x247c <move_window>
    3234:	88 23       	and	r24, r24
    3236:	09 f4       	brne	.+2      	; 0x323a <put_fat+0xd8>
    3238:	91 c0       	rjmp	.+290    	; 0x335c <put_fat+0x1fa>
    323a:	8c c0       	rjmp	.+280    	; 0x3354 <put_fat+0x1f2>
    323c:	fe 01       	movw	r30, r28
    323e:	ea 0d       	add	r30, r10
    3240:	fb 1d       	adc	r31, r11
    3242:	46 a6       	std	Z+46, r4	; 0x2e
    3244:	81 e0       	ldi	r24, 0x01	; 1
    3246:	8c 83       	std	Y+4, r24	; 0x04
    3248:	4e 8d       	ldd	r20, Y+30	; 0x1e
    324a:	5f 8d       	ldd	r21, Y+31	; 0x1f
    324c:	68 a1       	ldd	r22, Y+32	; 0x20
    324e:	79 a1       	ldd	r23, Y+33	; 0x21
    3250:	c4 01       	movw	r24, r8
    3252:	89 2f       	mov	r24, r25
    3254:	99 27       	eor	r25, r25
    3256:	86 95       	lsr	r24
    3258:	48 0f       	add	r20, r24
    325a:	59 1f       	adc	r21, r25
    325c:	61 1d       	adc	r22, r1
    325e:	71 1d       	adc	r23, r1
    3260:	ce 01       	movw	r24, r28
    3262:	0c d9       	rcall	.-3560   	; 0x247c <move_window>
    3264:	88 23       	and	r24, r24
    3266:	09 f4       	brne	.+2      	; 0x326a <put_fat+0x108>
    3268:	84 c0       	rjmp	.+264    	; 0x3372 <put_fat+0x210>
    326a:	76 c0       	rjmp	.+236    	; 0x3358 <put_fat+0x1f6>
    326c:	ec 0f       	add	r30, r28
    326e:	fd 1f       	adc	r31, r29
    3270:	46 a6       	std	Z+46, r4	; 0x2e
    3272:	81 e0       	ldi	r24, 0x01	; 1
    3274:	8c 83       	std	Y+4, r24	; 0x04
    3276:	8a c0       	rjmp	.+276    	; 0x338c <put_fat+0x22a>
    3278:	45 2f       	mov	r20, r21
    327a:	56 2f       	mov	r21, r22
    327c:	67 2f       	mov	r22, r23
    327e:	77 27       	eor	r23, r23
    3280:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3282:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3284:	a8 a1       	ldd	r26, Y+32	; 0x20
    3286:	b9 a1       	ldd	r27, Y+33	; 0x21
    3288:	48 0f       	add	r20, r24
    328a:	59 1f       	adc	r21, r25
    328c:	6a 1f       	adc	r22, r26
    328e:	7b 1f       	adc	r23, r27
    3290:	ce 01       	movw	r24, r28
    3292:	f4 d8       	rcall	.-3608   	; 0x247c <move_window>
    3294:	18 2f       	mov	r17, r24
    3296:	81 11       	cpse	r24, r1
    3298:	79 c0       	rjmp	.+242    	; 0x338c <put_fat+0x22a>
    329a:	cc 0c       	add	r12, r12
    329c:	dd 1c       	adc	r13, r13
    329e:	ee 1c       	adc	r14, r14
    32a0:	ff 1c       	adc	r15, r15
    32a2:	e8 94       	clt
    32a4:	c0 f8       	bld	r12, 0
    32a6:	31 e0       	ldi	r19, 0x01	; 1
    32a8:	d3 22       	and	r13, r19
    32aa:	ee 24       	eor	r14, r14
    32ac:	ff 24       	eor	r15, r15
    32ae:	fe 01       	movw	r30, r28
    32b0:	ec 0d       	add	r30, r12
    32b2:	fd 1d       	adc	r31, r13
    32b4:	46 a6       	std	Z+46, r4	; 0x2e
    32b6:	fe 01       	movw	r30, r28
    32b8:	ec 0d       	add	r30, r12
    32ba:	fd 1d       	adc	r31, r13
    32bc:	57 a6       	std	Z+47, r5	; 0x2f
    32be:	81 e0       	ldi	r24, 0x01	; 1
    32c0:	8c 83       	std	Y+4, r24	; 0x04
    32c2:	64 c0       	rjmp	.+200    	; 0x338c <put_fat+0x22a>
    32c4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    32c6:	9f 8d       	ldd	r25, Y+31	; 0x1f
    32c8:	a8 a1       	ldd	r26, Y+32	; 0x20
    32ca:	b9 a1       	ldd	r27, Y+33	; 0x21
    32cc:	68 94       	set
    32ce:	16 f8       	bld	r1, 6
    32d0:	76 95       	lsr	r23
    32d2:	67 95       	ror	r22
    32d4:	57 95       	ror	r21
    32d6:	47 95       	ror	r20
    32d8:	16 94       	lsr	r1
    32da:	d1 f7       	brne	.-12     	; 0x32d0 <put_fat+0x16e>
    32dc:	48 0f       	add	r20, r24
    32de:	59 1f       	adc	r21, r25
    32e0:	6a 1f       	adc	r22, r26
    32e2:	7b 1f       	adc	r23, r27
    32e4:	ce 01       	movw	r24, r28
    32e6:	ca d8       	rcall	.-3692   	; 0x247c <move_window>
    32e8:	18 2f       	mov	r17, r24
    32ea:	81 11       	cpse	r24, r1
    32ec:	4f c0       	rjmp	.+158    	; 0x338c <put_fat+0x22a>
    32ee:	cc 0c       	add	r12, r12
    32f0:	dd 1c       	adc	r13, r13
    32f2:	ee 1c       	adc	r14, r14
    32f4:	ff 1c       	adc	r15, r15
    32f6:	cc 0c       	add	r12, r12
    32f8:	dd 1c       	adc	r13, r13
    32fa:	ee 1c       	adc	r14, r14
    32fc:	ff 1c       	adc	r15, r15
    32fe:	8c ef       	ldi	r24, 0xFC	; 252
    3300:	c8 22       	and	r12, r24
    3302:	81 e0       	ldi	r24, 0x01	; 1
    3304:	d8 22       	and	r13, r24
    3306:	ee 24       	eor	r14, r14
    3308:	ff 24       	eor	r15, r15
    330a:	f6 01       	movw	r30, r12
    330c:	be 96       	adiw	r30, 0x2e	; 46
    330e:	ec 0f       	add	r30, r28
    3310:	fd 1f       	adc	r31, r29
    3312:	83 81       	ldd	r24, Z+3	; 0x03
    3314:	90 e0       	ldi	r25, 0x00	; 0
    3316:	a0 e0       	ldi	r26, 0x00	; 0
    3318:	b0 e0       	ldi	r27, 0x00	; 0
    331a:	b8 2f       	mov	r27, r24
    331c:	aa 27       	eor	r26, r26
    331e:	99 27       	eor	r25, r25
    3320:	88 27       	eor	r24, r24
    3322:	cc 0e       	add	r12, r28
    3324:	dd 1e       	adc	r13, r29
    3326:	88 27       	eor	r24, r24
    3328:	99 27       	eor	r25, r25
    332a:	aa 27       	eor	r26, r26
    332c:	b0 7f       	andi	r27, 0xF0	; 240
    332e:	48 2a       	or	r4, r24
    3330:	59 2a       	or	r5, r25
    3332:	6a 2a       	or	r6, r26
    3334:	7b 2a       	or	r7, r27
    3336:	d6 01       	movw	r26, r12
    3338:	9e 96       	adiw	r26, 0x2e	; 46
    333a:	4c 92       	st	X, r4
    333c:	51 82       	std	Z+1, r5	; 0x01
    333e:	62 82       	std	Z+2, r6	; 0x02
    3340:	73 82       	std	Z+3, r7	; 0x03
    3342:	81 e0       	ldi	r24, 0x01	; 1
    3344:	8c 83       	std	Y+4, r24	; 0x04
    3346:	22 c0       	rjmp	.+68     	; 0x338c <put_fat+0x22a>
    3348:	12 e0       	ldi	r17, 0x02	; 2
    334a:	20 c0       	rjmp	.+64     	; 0x338c <put_fat+0x22a>
    334c:	12 e0       	ldi	r17, 0x02	; 2
    334e:	1e c0       	rjmp	.+60     	; 0x338c <put_fat+0x22a>
    3350:	12 e0       	ldi	r17, 0x02	; 2
    3352:	1c c0       	rjmp	.+56     	; 0x338c <put_fat+0x22a>
    3354:	18 2f       	mov	r17, r24
    3356:	1a c0       	rjmp	.+52     	; 0x338c <put_fat+0x22a>
    3358:	18 2f       	mov	r17, r24
    335a:	18 c0       	rjmp	.+48     	; 0x338c <put_fat+0x22a>
    335c:	f4 01       	movw	r30, r8
    335e:	f1 70       	andi	r31, 0x01	; 1
    3360:	68 94       	set
    3362:	13 f8       	bld	r1, 3
    3364:	76 94       	lsr	r7
    3366:	67 94       	ror	r6
    3368:	57 94       	ror	r5
    336a:	47 94       	ror	r4
    336c:	16 94       	lsr	r1
    336e:	d1 f7       	brne	.-12     	; 0x3364 <put_fat+0x202>
    3370:	7d cf       	rjmp	.-262    	; 0x326c <put_fat+0x10a>
    3372:	f4 01       	movw	r30, r8
    3374:	f1 70       	andi	r31, 0x01	; 1
    3376:	de 01       	movw	r26, r28
    3378:	ae 0f       	add	r26, r30
    337a:	bf 1f       	adc	r27, r31
    337c:	9e 96       	adiw	r26, 0x2e	; 46
    337e:	9c 91       	ld	r25, X
    3380:	90 7f       	andi	r25, 0xF0	; 240
    3382:	85 2d       	mov	r24, r5
    3384:	8f 70       	andi	r24, 0x0F	; 15
    3386:	49 2e       	mov	r4, r25
    3388:	48 2a       	or	r4, r24
    338a:	70 cf       	rjmp	.-288    	; 0x326c <put_fat+0x10a>
    338c:	81 2f       	mov	r24, r17
    338e:	df 91       	pop	r29
    3390:	cf 91       	pop	r28
    3392:	1f 91       	pop	r17
    3394:	0f 91       	pop	r16
    3396:	ff 90       	pop	r15
    3398:	ef 90       	pop	r14
    339a:	df 90       	pop	r13
    339c:	cf 90       	pop	r12
    339e:	bf 90       	pop	r11
    33a0:	af 90       	pop	r10
    33a2:	9f 90       	pop	r9
    33a4:	8f 90       	pop	r8
    33a6:	7f 90       	pop	r7
    33a8:	6f 90       	pop	r6
    33aa:	5f 90       	pop	r5
    33ac:	4f 90       	pop	r4
    33ae:	08 95       	ret

000033b0 <create_chain>:
    33b0:	2f 92       	push	r2
    33b2:	3f 92       	push	r3
    33b4:	4f 92       	push	r4
    33b6:	5f 92       	push	r5
    33b8:	6f 92       	push	r6
    33ba:	7f 92       	push	r7
    33bc:	8f 92       	push	r8
    33be:	9f 92       	push	r9
    33c0:	af 92       	push	r10
    33c2:	bf 92       	push	r11
    33c4:	cf 92       	push	r12
    33c6:	df 92       	push	r13
    33c8:	ef 92       	push	r14
    33ca:	ff 92       	push	r15
    33cc:	0f 93       	push	r16
    33ce:	1f 93       	push	r17
    33d0:	cf 93       	push	r28
    33d2:	df 93       	push	r29
    33d4:	ec 01       	movw	r28, r24
    33d6:	2a 01       	movw	r4, r20
    33d8:	3b 01       	movw	r6, r22
    33da:	41 15       	cp	r20, r1
    33dc:	51 05       	cpc	r21, r1
    33de:	61 05       	cpc	r22, r1
    33e0:	71 05       	cpc	r23, r1
    33e2:	b9 f4       	brne	.+46     	; 0x3412 <create_chain+0x62>
    33e4:	8a 84       	ldd	r8, Y+10	; 0x0a
    33e6:	9b 84       	ldd	r9, Y+11	; 0x0b
    33e8:	ac 84       	ldd	r10, Y+12	; 0x0c
    33ea:	bd 84       	ldd	r11, Y+13	; 0x0d
    33ec:	81 14       	cp	r8, r1
    33ee:	91 04       	cpc	r9, r1
    33f0:	a1 04       	cpc	r10, r1
    33f2:	b1 04       	cpc	r11, r1
    33f4:	59 f1       	breq	.+86     	; 0x344c <create_chain+0x9c>
    33f6:	8a 89       	ldd	r24, Y+18	; 0x12
    33f8:	9b 89       	ldd	r25, Y+19	; 0x13
    33fa:	ac 89       	ldd	r26, Y+20	; 0x14
    33fc:	bd 89       	ldd	r27, Y+21	; 0x15
    33fe:	88 16       	cp	r8, r24
    3400:	99 06       	cpc	r9, r25
    3402:	aa 06       	cpc	r10, r26
    3404:	bb 06       	cpc	r11, r27
    3406:	30 f1       	brcs	.+76     	; 0x3454 <create_chain+0xa4>
    3408:	81 2c       	mov	r8, r1
    340a:	91 2c       	mov	r9, r1
    340c:	54 01       	movw	r10, r8
    340e:	83 94       	inc	r8
    3410:	21 c0       	rjmp	.+66     	; 0x3454 <create_chain+0xa4>
    3412:	ed dc       	rcall	.-1574   	; 0x2dee <get_fat>
    3414:	6b 01       	movw	r12, r22
    3416:	7c 01       	movw	r14, r24
    3418:	62 30       	cpi	r22, 0x02	; 2
    341a:	71 05       	cpc	r23, r1
    341c:	81 05       	cpc	r24, r1
    341e:	91 05       	cpc	r25, r1
    3420:	08 f4       	brcc	.+2      	; 0x3424 <create_chain+0x74>
    3422:	96 c0       	rjmp	.+300    	; 0x3550 <create_chain+0x1a0>
    3424:	8f ef       	ldi	r24, 0xFF	; 255
    3426:	c8 16       	cp	r12, r24
    3428:	d8 06       	cpc	r13, r24
    342a:	e8 06       	cpc	r14, r24
    342c:	f8 06       	cpc	r15, r24
    342e:	09 f4       	brne	.+2      	; 0x3432 <create_chain+0x82>
    3430:	94 c0       	rjmp	.+296    	; 0x355a <create_chain+0x1aa>
    3432:	8a 89       	ldd	r24, Y+18	; 0x12
    3434:	9b 89       	ldd	r25, Y+19	; 0x13
    3436:	ac 89       	ldd	r26, Y+20	; 0x14
    3438:	bd 89       	ldd	r27, Y+21	; 0x15
    343a:	c8 16       	cp	r12, r24
    343c:	d9 06       	cpc	r13, r25
    343e:	ea 06       	cpc	r14, r26
    3440:	fb 06       	cpc	r15, r27
    3442:	08 f4       	brcc	.+2      	; 0x3446 <create_chain+0x96>
    3444:	8f c0       	rjmp	.+286    	; 0x3564 <create_chain+0x1b4>
    3446:	53 01       	movw	r10, r6
    3448:	42 01       	movw	r8, r4
    344a:	04 c0       	rjmp	.+8      	; 0x3454 <create_chain+0xa4>
    344c:	81 2c       	mov	r8, r1
    344e:	91 2c       	mov	r9, r1
    3450:	54 01       	movw	r10, r8
    3452:	83 94       	inc	r8
    3454:	75 01       	movw	r14, r10
    3456:	64 01       	movw	r12, r8
    3458:	68 94       	set
    345a:	22 24       	eor	r2, r2
    345c:	21 f8       	bld	r2, 1
    345e:	31 2c       	mov	r3, r1
    3460:	00 e0       	ldi	r16, 0x00	; 0
    3462:	10 e0       	ldi	r17, 0x00	; 0
    3464:	2f ef       	ldi	r18, 0xFF	; 255
    3466:	c2 1a       	sub	r12, r18
    3468:	d2 0a       	sbc	r13, r18
    346a:	e2 0a       	sbc	r14, r18
    346c:	f2 0a       	sbc	r15, r18
    346e:	8a 89       	ldd	r24, Y+18	; 0x12
    3470:	9b 89       	ldd	r25, Y+19	; 0x13
    3472:	ac 89       	ldd	r26, Y+20	; 0x14
    3474:	bd 89       	ldd	r27, Y+21	; 0x15
    3476:	c8 16       	cp	r12, r24
    3478:	d9 06       	cpc	r13, r25
    347a:	ea 06       	cpc	r14, r26
    347c:	fb 06       	cpc	r15, r27
    347e:	58 f0       	brcs	.+22     	; 0x3496 <create_chain+0xe6>
    3480:	82 e0       	ldi	r24, 0x02	; 2
    3482:	88 16       	cp	r8, r24
    3484:	91 04       	cpc	r9, r1
    3486:	a1 04       	cpc	r10, r1
    3488:	b1 04       	cpc	r11, r1
    348a:	08 f4       	brcc	.+2      	; 0x348e <create_chain+0xde>
    348c:	70 c0       	rjmp	.+224    	; 0x356e <create_chain+0x1be>
    348e:	c2 2c       	mov	r12, r2
    3490:	d3 2c       	mov	r13, r3
    3492:	e0 2e       	mov	r14, r16
    3494:	f1 2e       	mov	r15, r17
    3496:	b7 01       	movw	r22, r14
    3498:	a6 01       	movw	r20, r12
    349a:	ce 01       	movw	r24, r28
    349c:	a8 dc       	rcall	.-1712   	; 0x2dee <get_fat>
    349e:	61 15       	cp	r22, r1
    34a0:	71 05       	cpc	r23, r1
    34a2:	81 05       	cpc	r24, r1
    34a4:	91 05       	cpc	r25, r1
    34a6:	99 f0       	breq	.+38     	; 0x34ce <create_chain+0x11e>
    34a8:	6f 3f       	cpi	r22, 0xFF	; 255
    34aa:	2f ef       	ldi	r18, 0xFF	; 255
    34ac:	72 07       	cpc	r23, r18
    34ae:	82 07       	cpc	r24, r18
    34b0:	92 07       	cpc	r25, r18
    34b2:	09 f4       	brne	.+2      	; 0x34b6 <create_chain+0x106>
    34b4:	61 c0       	rjmp	.+194    	; 0x3578 <create_chain+0x1c8>
    34b6:	61 30       	cpi	r22, 0x01	; 1
    34b8:	71 05       	cpc	r23, r1
    34ba:	81 05       	cpc	r24, r1
    34bc:	91 05       	cpc	r25, r1
    34be:	09 f4       	brne	.+2      	; 0x34c2 <create_chain+0x112>
    34c0:	60 c0       	rjmp	.+192    	; 0x3582 <create_chain+0x1d2>
    34c2:	c8 14       	cp	r12, r8
    34c4:	d9 04       	cpc	r13, r9
    34c6:	ea 04       	cpc	r14, r10
    34c8:	fb 04       	cpc	r15, r11
    34ca:	61 f6       	brne	.-104    	; 0x3464 <create_chain+0xb4>
    34cc:	5f c0       	rjmp	.+190    	; 0x358c <create_chain+0x1dc>
    34ce:	8c 2c       	mov	r8, r12
    34d0:	9d 2c       	mov	r9, r13
    34d2:	ae 2c       	mov	r10, r14
    34d4:	bf 2c       	mov	r11, r15
    34d6:	0f ef       	ldi	r16, 0xFF	; 255
    34d8:	1f ef       	ldi	r17, 0xFF	; 255
    34da:	2f ef       	ldi	r18, 0xFF	; 255
    34dc:	3f e0       	ldi	r19, 0x0F	; 15
    34de:	b7 01       	movw	r22, r14
    34e0:	a6 01       	movw	r20, r12
    34e2:	ce 01       	movw	r24, r28
    34e4:	3e de       	rcall	.-900    	; 0x3162 <put_fat>
    34e6:	81 11       	cpse	r24, r1
    34e8:	2c c0       	rjmp	.+88     	; 0x3542 <create_chain+0x192>
    34ea:	41 14       	cp	r4, r1
    34ec:	51 04       	cpc	r5, r1
    34ee:	61 04       	cpc	r6, r1
    34f0:	71 04       	cpc	r7, r1
    34f2:	51 f0       	breq	.+20     	; 0x3508 <create_chain+0x158>
    34f4:	0c 2d       	mov	r16, r12
    34f6:	1d 2d       	mov	r17, r13
    34f8:	2e 2d       	mov	r18, r14
    34fa:	3f 2d       	mov	r19, r15
    34fc:	b3 01       	movw	r22, r6
    34fe:	a2 01       	movw	r20, r4
    3500:	ce 01       	movw	r24, r28
    3502:	2f de       	rcall	.-930    	; 0x3162 <put_fat>
    3504:	81 11       	cpse	r24, r1
    3506:	1d c0       	rjmp	.+58     	; 0x3542 <create_chain+0x192>
    3508:	8a 86       	std	Y+10, r8	; 0x0a
    350a:	9b 86       	std	Y+11, r9	; 0x0b
    350c:	ac 86       	std	Y+12, r10	; 0x0c
    350e:	bd 86       	std	Y+13, r11	; 0x0d
    3510:	8e 85       	ldd	r24, Y+14	; 0x0e
    3512:	9f 85       	ldd	r25, Y+15	; 0x0f
    3514:	a8 89       	ldd	r26, Y+16	; 0x10
    3516:	b9 89       	ldd	r27, Y+17	; 0x11
    3518:	8f 3f       	cpi	r24, 0xFF	; 255
    351a:	2f ef       	ldi	r18, 0xFF	; 255
    351c:	92 07       	cpc	r25, r18
    351e:	a2 07       	cpc	r26, r18
    3520:	b2 07       	cpc	r27, r18
    3522:	c9 f1       	breq	.+114    	; 0x3596 <create_chain+0x1e6>
    3524:	01 97       	sbiw	r24, 0x01	; 1
    3526:	a1 09       	sbc	r26, r1
    3528:	b1 09       	sbc	r27, r1
    352a:	8e 87       	std	Y+14, r24	; 0x0e
    352c:	9f 87       	std	Y+15, r25	; 0x0f
    352e:	a8 8b       	std	Y+16, r26	; 0x10
    3530:	b9 8b       	std	Y+17, r27	; 0x11
    3532:	8d 81       	ldd	r24, Y+5	; 0x05
    3534:	81 60       	ori	r24, 0x01	; 1
    3536:	8d 83       	std	Y+5, r24	; 0x05
    3538:	6c 2d       	mov	r22, r12
    353a:	7d 2d       	mov	r23, r13
    353c:	8e 2d       	mov	r24, r14
    353e:	9f 2d       	mov	r25, r15
    3540:	33 c0       	rjmp	.+102    	; 0x35a8 <create_chain+0x1f8>
    3542:	81 30       	cpi	r24, 0x01	; 1
    3544:	69 f1       	breq	.+90     	; 0x35a0 <create_chain+0x1f0>
    3546:	61 e0       	ldi	r22, 0x01	; 1
    3548:	70 e0       	ldi	r23, 0x00	; 0
    354a:	80 e0       	ldi	r24, 0x00	; 0
    354c:	90 e0       	ldi	r25, 0x00	; 0
    354e:	2c c0       	rjmp	.+88     	; 0x35a8 <create_chain+0x1f8>
    3550:	61 e0       	ldi	r22, 0x01	; 1
    3552:	70 e0       	ldi	r23, 0x00	; 0
    3554:	80 e0       	ldi	r24, 0x00	; 0
    3556:	90 e0       	ldi	r25, 0x00	; 0
    3558:	27 c0       	rjmp	.+78     	; 0x35a8 <create_chain+0x1f8>
    355a:	6f ef       	ldi	r22, 0xFF	; 255
    355c:	7f ef       	ldi	r23, 0xFF	; 255
    355e:	8f ef       	ldi	r24, 0xFF	; 255
    3560:	9f ef       	ldi	r25, 0xFF	; 255
    3562:	22 c0       	rjmp	.+68     	; 0x35a8 <create_chain+0x1f8>
    3564:	6c 2d       	mov	r22, r12
    3566:	7d 2d       	mov	r23, r13
    3568:	8e 2d       	mov	r24, r14
    356a:	9f 2d       	mov	r25, r15
    356c:	1d c0       	rjmp	.+58     	; 0x35a8 <create_chain+0x1f8>
    356e:	60 e0       	ldi	r22, 0x00	; 0
    3570:	70 e0       	ldi	r23, 0x00	; 0
    3572:	80 e0       	ldi	r24, 0x00	; 0
    3574:	90 e0       	ldi	r25, 0x00	; 0
    3576:	18 c0       	rjmp	.+48     	; 0x35a8 <create_chain+0x1f8>
    3578:	6f ef       	ldi	r22, 0xFF	; 255
    357a:	7f ef       	ldi	r23, 0xFF	; 255
    357c:	8f ef       	ldi	r24, 0xFF	; 255
    357e:	9f ef       	ldi	r25, 0xFF	; 255
    3580:	13 c0       	rjmp	.+38     	; 0x35a8 <create_chain+0x1f8>
    3582:	61 e0       	ldi	r22, 0x01	; 1
    3584:	70 e0       	ldi	r23, 0x00	; 0
    3586:	80 e0       	ldi	r24, 0x00	; 0
    3588:	90 e0       	ldi	r25, 0x00	; 0
    358a:	0e c0       	rjmp	.+28     	; 0x35a8 <create_chain+0x1f8>
    358c:	60 e0       	ldi	r22, 0x00	; 0
    358e:	70 e0       	ldi	r23, 0x00	; 0
    3590:	80 e0       	ldi	r24, 0x00	; 0
    3592:	90 e0       	ldi	r25, 0x00	; 0
    3594:	09 c0       	rjmp	.+18     	; 0x35a8 <create_chain+0x1f8>
    3596:	6c 2d       	mov	r22, r12
    3598:	7d 2d       	mov	r23, r13
    359a:	8e 2d       	mov	r24, r14
    359c:	9f 2d       	mov	r25, r15
    359e:	04 c0       	rjmp	.+8      	; 0x35a8 <create_chain+0x1f8>
    35a0:	6f ef       	ldi	r22, 0xFF	; 255
    35a2:	7f ef       	ldi	r23, 0xFF	; 255
    35a4:	8f ef       	ldi	r24, 0xFF	; 255
    35a6:	9f ef       	ldi	r25, 0xFF	; 255
    35a8:	df 91       	pop	r29
    35aa:	cf 91       	pop	r28
    35ac:	1f 91       	pop	r17
    35ae:	0f 91       	pop	r16
    35b0:	ff 90       	pop	r15
    35b2:	ef 90       	pop	r14
    35b4:	df 90       	pop	r13
    35b6:	cf 90       	pop	r12
    35b8:	bf 90       	pop	r11
    35ba:	af 90       	pop	r10
    35bc:	9f 90       	pop	r9
    35be:	8f 90       	pop	r8
    35c0:	7f 90       	pop	r7
    35c2:	6f 90       	pop	r6
    35c4:	5f 90       	pop	r5
    35c6:	4f 90       	pop	r4
    35c8:	3f 90       	pop	r3
    35ca:	2f 90       	pop	r2
    35cc:	08 95       	ret

000035ce <dir_next>:
    35ce:	7f 92       	push	r7
    35d0:	8f 92       	push	r8
    35d2:	9f 92       	push	r9
    35d4:	af 92       	push	r10
    35d6:	bf 92       	push	r11
    35d8:	cf 92       	push	r12
    35da:	df 92       	push	r13
    35dc:	ef 92       	push	r14
    35de:	ff 92       	push	r15
    35e0:	0f 93       	push	r16
    35e2:	1f 93       	push	r17
    35e4:	cf 93       	push	r28
    35e6:	df 93       	push	r29
    35e8:	dc 01       	movw	r26, r24
    35ea:	14 96       	adiw	r26, 0x04	; 4
    35ec:	cd 91       	ld	r28, X+
    35ee:	dc 91       	ld	r29, X
    35f0:	15 97       	sbiw	r26, 0x05	; 5
    35f2:	21 96       	adiw	r28, 0x01	; 1
    35f4:	09 f4       	brne	.+2      	; 0x35f8 <dir_next+0x2a>
    35f6:	03 c1       	rjmp	.+518    	; 0x37fe <dir_next+0x230>
    35f8:	1e 96       	adiw	r26, 0x0e	; 14
    35fa:	8d 90       	ld	r8, X+
    35fc:	9d 90       	ld	r9, X+
    35fe:	ad 90       	ld	r10, X+
    3600:	bc 90       	ld	r11, X
    3602:	51 97       	sbiw	r26, 0x11	; 17
    3604:	81 14       	cp	r8, r1
    3606:	91 04       	cpc	r9, r1
    3608:	a1 04       	cpc	r10, r1
    360a:	b1 04       	cpc	r11, r1
    360c:	09 f4       	brne	.+2      	; 0x3610 <dir_next+0x42>
    360e:	f9 c0       	rjmp	.+498    	; 0x3802 <dir_next+0x234>
    3610:	7b 01       	movw	r14, r22
    3612:	8c 01       	movw	r16, r24
    3614:	6e 01       	movw	r12, r28
    3616:	bf e0       	ldi	r27, 0x0F	; 15
    3618:	cb 22       	and	r12, r27
    361a:	dd 24       	eor	r13, r13
    361c:	c1 14       	cp	r12, r1
    361e:	d1 04       	cpc	r13, r1
    3620:	09 f0       	breq	.+2      	; 0x3624 <dir_next+0x56>
    3622:	d1 c0       	rjmp	.+418    	; 0x37c6 <dir_next+0x1f8>
    3624:	ef ef       	ldi	r30, 0xFF	; 255
    3626:	8e 1a       	sub	r8, r30
    3628:	9e 0a       	sbc	r9, r30
    362a:	ae 0a       	sbc	r10, r30
    362c:	be 0a       	sbc	r11, r30
    362e:	dc 01       	movw	r26, r24
    3630:	1e 96       	adiw	r26, 0x0e	; 14
    3632:	8d 92       	st	X+, r8
    3634:	9d 92       	st	X+, r9
    3636:	ad 92       	st	X+, r10
    3638:	bc 92       	st	X, r11
    363a:	51 97       	sbiw	r26, 0x11	; 17
    363c:	1a 96       	adiw	r26, 0x0a	; 10
    363e:	4d 91       	ld	r20, X+
    3640:	5d 91       	ld	r21, X+
    3642:	6d 91       	ld	r22, X+
    3644:	7c 91       	ld	r23, X
    3646:	1d 97       	sbiw	r26, 0x0d	; 13
    3648:	41 15       	cp	r20, r1
    364a:	51 05       	cpc	r21, r1
    364c:	61 05       	cpc	r22, r1
    364e:	71 05       	cpc	r23, r1
    3650:	49 f4       	brne	.+18     	; 0x3664 <dir_next+0x96>
    3652:	ed 91       	ld	r30, X+
    3654:	fc 91       	ld	r31, X
    3656:	80 85       	ldd	r24, Z+8	; 0x08
    3658:	91 85       	ldd	r25, Z+9	; 0x09
    365a:	c8 17       	cp	r28, r24
    365c:	d9 07       	cpc	r29, r25
    365e:	08 f0       	brcs	.+2      	; 0x3662 <dir_next+0x94>
    3660:	d2 c0       	rjmp	.+420    	; 0x3806 <dir_next+0x238>
    3662:	b1 c0       	rjmp	.+354    	; 0x37c6 <dir_next+0x1f8>
    3664:	dc 01       	movw	r26, r24
    3666:	ed 91       	ld	r30, X+
    3668:	fc 91       	ld	r31, X
    366a:	22 81       	ldd	r18, Z+2	; 0x02
    366c:	30 e0       	ldi	r19, 0x00	; 0
    366e:	21 50       	subi	r18, 0x01	; 1
    3670:	31 09       	sbc	r19, r1
    3672:	ce 01       	movw	r24, r28
    3674:	92 95       	swap	r25
    3676:	82 95       	swap	r24
    3678:	8f 70       	andi	r24, 0x0F	; 15
    367a:	89 27       	eor	r24, r25
    367c:	9f 70       	andi	r25, 0x0F	; 15
    367e:	89 27       	eor	r24, r25
    3680:	28 23       	and	r18, r24
    3682:	39 23       	and	r19, r25
    3684:	23 2b       	or	r18, r19
    3686:	09 f0       	breq	.+2      	; 0x368a <dir_next+0xbc>
    3688:	9e c0       	rjmp	.+316    	; 0x37c6 <dir_next+0x1f8>
    368a:	cf 01       	movw	r24, r30
    368c:	b0 db       	rcall	.-2208   	; 0x2dee <get_fat>
    368e:	4b 01       	movw	r8, r22
    3690:	5c 01       	movw	r10, r24
    3692:	62 30       	cpi	r22, 0x02	; 2
    3694:	71 05       	cpc	r23, r1
    3696:	81 05       	cpc	r24, r1
    3698:	91 05       	cpc	r25, r1
    369a:	08 f4       	brcc	.+2      	; 0x369e <dir_next+0xd0>
    369c:	b6 c0       	rjmp	.+364    	; 0x380a <dir_next+0x23c>
    369e:	6f 3f       	cpi	r22, 0xFF	; 255
    36a0:	7f 4f       	sbci	r23, 0xFF	; 255
    36a2:	8f 4f       	sbci	r24, 0xFF	; 255
    36a4:	9f 4f       	sbci	r25, 0xFF	; 255
    36a6:	09 f4       	brne	.+2      	; 0x36aa <dir_next+0xdc>
    36a8:	b2 c0       	rjmp	.+356    	; 0x380e <dir_next+0x240>
    36aa:	d8 01       	movw	r26, r16
    36ac:	ed 91       	ld	r30, X+
    36ae:	fc 91       	ld	r31, X
    36b0:	82 89       	ldd	r24, Z+18	; 0x12
    36b2:	93 89       	ldd	r25, Z+19	; 0x13
    36b4:	a4 89       	ldd	r26, Z+20	; 0x14
    36b6:	b5 89       	ldd	r27, Z+21	; 0x15
    36b8:	88 16       	cp	r8, r24
    36ba:	99 06       	cpc	r9, r25
    36bc:	aa 06       	cpc	r10, r26
    36be:	bb 06       	cpc	r11, r27
    36c0:	08 f4       	brcc	.+2      	; 0x36c4 <dir_next+0xf6>
    36c2:	70 c0       	rjmp	.+224    	; 0x37a4 <dir_next+0x1d6>
    36c4:	ef 28       	or	r14, r15
    36c6:	09 f4       	brne	.+2      	; 0x36ca <dir_next+0xfc>
    36c8:	a4 c0       	rjmp	.+328    	; 0x3812 <dir_next+0x244>
    36ca:	d8 01       	movw	r26, r16
    36cc:	1a 96       	adiw	r26, 0x0a	; 10
    36ce:	4d 91       	ld	r20, X+
    36d0:	5d 91       	ld	r21, X+
    36d2:	6d 91       	ld	r22, X+
    36d4:	7c 91       	ld	r23, X
    36d6:	1d 97       	sbiw	r26, 0x0d	; 13
    36d8:	cf 01       	movw	r24, r30
    36da:	6a de       	rcall	.-812    	; 0x33b0 <create_chain>
    36dc:	4b 01       	movw	r8, r22
    36de:	5c 01       	movw	r10, r24
    36e0:	61 15       	cp	r22, r1
    36e2:	71 05       	cpc	r23, r1
    36e4:	81 05       	cpc	r24, r1
    36e6:	91 05       	cpc	r25, r1
    36e8:	09 f4       	brne	.+2      	; 0x36ec <dir_next+0x11e>
    36ea:	95 c0       	rjmp	.+298    	; 0x3816 <dir_next+0x248>
    36ec:	61 30       	cpi	r22, 0x01	; 1
    36ee:	71 05       	cpc	r23, r1
    36f0:	81 05       	cpc	r24, r1
    36f2:	91 05       	cpc	r25, r1
    36f4:	09 f4       	brne	.+2      	; 0x36f8 <dir_next+0x12a>
    36f6:	91 c0       	rjmp	.+290    	; 0x381a <dir_next+0x24c>
    36f8:	6f 3f       	cpi	r22, 0xFF	; 255
    36fa:	7f 4f       	sbci	r23, 0xFF	; 255
    36fc:	8f 4f       	sbci	r24, 0xFF	; 255
    36fe:	9f 4f       	sbci	r25, 0xFF	; 255
    3700:	09 f4       	brne	.+2      	; 0x3704 <dir_next+0x136>
    3702:	8d c0       	rjmp	.+282    	; 0x381e <dir_next+0x250>
    3704:	d8 01       	movw	r26, r16
    3706:	8d 91       	ld	r24, X+
    3708:	9c 91       	ld	r25, X
    370a:	0e 94 d5 11 	call	0x23aa	; 0x23aa <sync_window>
    370e:	81 11       	cpse	r24, r1
    3710:	88 c0       	rjmp	.+272    	; 0x3822 <dir_next+0x254>
    3712:	f8 01       	movw	r30, r16
    3714:	80 81       	ld	r24, Z
    3716:	91 81       	ldd	r25, Z+1	; 0x01
    3718:	fc 01       	movw	r30, r24
    371a:	be 96       	adiw	r30, 0x2e	; 46
    371c:	82 5d       	subi	r24, 0xD2	; 210
    371e:	9d 4f       	sbci	r25, 0xFD	; 253
    3720:	11 92       	st	Z+, r1
    3722:	e8 17       	cp	r30, r24
    3724:	f9 07       	cpc	r31, r25
    3726:	e1 f7       	brne	.-8      	; 0x3720 <dir_next+0x152>
    3728:	d8 01       	movw	r26, r16
    372a:	ed 90       	ld	r14, X+
    372c:	fc 90       	ld	r15, X
    372e:	b5 01       	movw	r22, r10
    3730:	a4 01       	movw	r20, r8
    3732:	c7 01       	movw	r24, r14
    3734:	2e db       	rcall	.-2468   	; 0x2d92 <clust2sect>
    3736:	f7 01       	movw	r30, r14
    3738:	62 a7       	std	Z+42, r22	; 0x2a
    373a:	73 a7       	std	Z+43, r23	; 0x2b
    373c:	84 a7       	std	Z+44, r24	; 0x2c
    373e:	95 a7       	std	Z+45, r25	; 0x2d
    3740:	e1 2c       	mov	r14, r1
    3742:	f1 2c       	mov	r15, r1
    3744:	77 24       	eor	r7, r7
    3746:	73 94       	inc	r7
    3748:	19 c0       	rjmp	.+50     	; 0x377c <dir_next+0x1ae>
    374a:	74 82       	std	Z+4, r7	; 0x04
    374c:	d8 01       	movw	r26, r16
    374e:	8d 91       	ld	r24, X+
    3750:	9c 91       	ld	r25, X
    3752:	0e 94 d5 11 	call	0x23aa	; 0x23aa <sync_window>
    3756:	81 11       	cpse	r24, r1
    3758:	66 c0       	rjmp	.+204    	; 0x3826 <dir_next+0x258>
    375a:	d8 01       	movw	r26, r16
    375c:	ed 91       	ld	r30, X+
    375e:	fc 91       	ld	r31, X
    3760:	82 a5       	ldd	r24, Z+42	; 0x2a
    3762:	93 a5       	ldd	r25, Z+43	; 0x2b
    3764:	a4 a5       	ldd	r26, Z+44	; 0x2c
    3766:	b5 a5       	ldd	r27, Z+45	; 0x2d
    3768:	01 96       	adiw	r24, 0x01	; 1
    376a:	a1 1d       	adc	r26, r1
    376c:	b1 1d       	adc	r27, r1
    376e:	82 a7       	std	Z+42, r24	; 0x2a
    3770:	93 a7       	std	Z+43, r25	; 0x2b
    3772:	a4 a7       	std	Z+44, r26	; 0x2c
    3774:	b5 a7       	std	Z+45, r27	; 0x2d
    3776:	bf ef       	ldi	r27, 0xFF	; 255
    3778:	eb 1a       	sub	r14, r27
    377a:	fb 0a       	sbc	r15, r27
    377c:	d8 01       	movw	r26, r16
    377e:	ed 91       	ld	r30, X+
    3780:	fc 91       	ld	r31, X
    3782:	82 81       	ldd	r24, Z+2	; 0x02
    3784:	90 e0       	ldi	r25, 0x00	; 0
    3786:	e8 16       	cp	r14, r24
    3788:	f9 06       	cpc	r15, r25
    378a:	f8 f2       	brcs	.-66     	; 0x374a <dir_next+0x17c>
    378c:	82 a5       	ldd	r24, Z+42	; 0x2a
    378e:	93 a5       	ldd	r25, Z+43	; 0x2b
    3790:	a4 a5       	ldd	r26, Z+44	; 0x2c
    3792:	b5 a5       	ldd	r27, Z+45	; 0x2d
    3794:	8e 19       	sub	r24, r14
    3796:	9f 09       	sbc	r25, r15
    3798:	a1 09       	sbc	r26, r1
    379a:	b1 09       	sbc	r27, r1
    379c:	82 a7       	std	Z+42, r24	; 0x2a
    379e:	93 a7       	std	Z+43, r25	; 0x2b
    37a0:	a4 a7       	std	Z+44, r26	; 0x2c
    37a2:	b5 a7       	std	Z+45, r27	; 0x2d
    37a4:	f8 01       	movw	r30, r16
    37a6:	82 86       	std	Z+10, r8	; 0x0a
    37a8:	93 86       	std	Z+11, r9	; 0x0b
    37aa:	a4 86       	std	Z+12, r10	; 0x0c
    37ac:	b5 86       	std	Z+13, r11	; 0x0d
    37ae:	b5 01       	movw	r22, r10
    37b0:	a4 01       	movw	r20, r8
    37b2:	80 81       	ld	r24, Z
    37b4:	91 81       	ldd	r25, Z+1	; 0x01
    37b6:	ed da       	rcall	.-2598   	; 0x2d92 <clust2sect>
    37b8:	d8 01       	movw	r26, r16
    37ba:	1e 96       	adiw	r26, 0x0e	; 14
    37bc:	6d 93       	st	X+, r22
    37be:	7d 93       	st	X+, r23
    37c0:	8d 93       	st	X+, r24
    37c2:	9c 93       	st	X, r25
    37c4:	51 97       	sbiw	r26, 0x11	; 17
    37c6:	f8 01       	movw	r30, r16
    37c8:	d5 83       	std	Z+5, r29	; 0x05
    37ca:	c4 83       	std	Z+4, r28	; 0x04
    37cc:	cc 0c       	add	r12, r12
    37ce:	dd 1c       	adc	r13, r13
    37d0:	cc 0c       	add	r12, r12
    37d2:	dd 1c       	adc	r13, r13
    37d4:	cc 0c       	add	r12, r12
    37d6:	dd 1c       	adc	r13, r13
    37d8:	cc 0c       	add	r12, r12
    37da:	dd 1c       	adc	r13, r13
    37dc:	cc 0c       	add	r12, r12
    37de:	dd 1c       	adc	r13, r13
    37e0:	fe e2       	ldi	r31, 0x2E	; 46
    37e2:	cf 0e       	add	r12, r31
    37e4:	d1 1c       	adc	r13, r1
    37e6:	d8 01       	movw	r26, r16
    37e8:	8d 91       	ld	r24, X+
    37ea:	9c 91       	ld	r25, X
    37ec:	11 97       	sbiw	r26, 0x01	; 1
    37ee:	c8 0e       	add	r12, r24
    37f0:	d9 1e       	adc	r13, r25
    37f2:	53 96       	adiw	r26, 0x13	; 19
    37f4:	dc 92       	st	X, r13
    37f6:	ce 92       	st	-X, r12
    37f8:	52 97       	sbiw	r26, 0x12	; 18
    37fa:	80 e0       	ldi	r24, 0x00	; 0
    37fc:	15 c0       	rjmp	.+42     	; 0x3828 <dir_next+0x25a>
    37fe:	84 e0       	ldi	r24, 0x04	; 4
    3800:	13 c0       	rjmp	.+38     	; 0x3828 <dir_next+0x25a>
    3802:	84 e0       	ldi	r24, 0x04	; 4
    3804:	11 c0       	rjmp	.+34     	; 0x3828 <dir_next+0x25a>
    3806:	84 e0       	ldi	r24, 0x04	; 4
    3808:	0f c0       	rjmp	.+30     	; 0x3828 <dir_next+0x25a>
    380a:	82 e0       	ldi	r24, 0x02	; 2
    380c:	0d c0       	rjmp	.+26     	; 0x3828 <dir_next+0x25a>
    380e:	81 e0       	ldi	r24, 0x01	; 1
    3810:	0b c0       	rjmp	.+22     	; 0x3828 <dir_next+0x25a>
    3812:	84 e0       	ldi	r24, 0x04	; 4
    3814:	09 c0       	rjmp	.+18     	; 0x3828 <dir_next+0x25a>
    3816:	87 e0       	ldi	r24, 0x07	; 7
    3818:	07 c0       	rjmp	.+14     	; 0x3828 <dir_next+0x25a>
    381a:	82 e0       	ldi	r24, 0x02	; 2
    381c:	05 c0       	rjmp	.+10     	; 0x3828 <dir_next+0x25a>
    381e:	81 e0       	ldi	r24, 0x01	; 1
    3820:	03 c0       	rjmp	.+6      	; 0x3828 <dir_next+0x25a>
    3822:	81 e0       	ldi	r24, 0x01	; 1
    3824:	01 c0       	rjmp	.+2      	; 0x3828 <dir_next+0x25a>
    3826:	81 e0       	ldi	r24, 0x01	; 1
    3828:	df 91       	pop	r29
    382a:	cf 91       	pop	r28
    382c:	1f 91       	pop	r17
    382e:	0f 91       	pop	r16
    3830:	ff 90       	pop	r15
    3832:	ef 90       	pop	r14
    3834:	df 90       	pop	r13
    3836:	cf 90       	pop	r12
    3838:	bf 90       	pop	r11
    383a:	af 90       	pop	r10
    383c:	9f 90       	pop	r9
    383e:	8f 90       	pop	r8
    3840:	7f 90       	pop	r7
    3842:	08 95       	ret

00003844 <f_mount>:
    3844:	1f 93       	push	r17
    3846:	cf 93       	push	r28
    3848:	df 93       	push	r29
    384a:	00 d0       	rcall	.+0      	; 0x384c <f_mount+0x8>
    384c:	00 d0       	rcall	.+0      	; 0x384e <f_mount+0xa>
    384e:	00 d0       	rcall	.+0      	; 0x3850 <f_mount+0xc>
    3850:	cd b7       	in	r28, 0x3d	; 61
    3852:	de b7       	in	r29, 0x3e	; 62
    3854:	9c 83       	std	Y+4, r25	; 0x04
    3856:	8b 83       	std	Y+3, r24	; 0x03
    3858:	7e 83       	std	Y+6, r23	; 0x06
    385a:	6d 83       	std	Y+5, r22	; 0x05
    385c:	14 2f       	mov	r17, r20
    385e:	7a 83       	std	Y+2, r23	; 0x02
    3860:	69 83       	std	Y+1, r22	; 0x01
    3862:	ce 01       	movw	r24, r28
    3864:	01 96       	adiw	r24, 0x01	; 1
    3866:	0e 94 9e 11 	call	0x233c	; 0x233c <get_ldnumber>
    386a:	99 23       	and	r25, r25
    386c:	34 f1       	brlt	.+76     	; 0x38ba <f_mount+0x76>
    386e:	fc 01       	movw	r30, r24
    3870:	ee 0f       	add	r30, r30
    3872:	ff 1f       	adc	r31, r31
    3874:	eb 5c       	subi	r30, 0xCB	; 203
    3876:	fb 4f       	sbci	r31, 0xFB	; 251
    3878:	01 90       	ld	r0, Z+
    387a:	f0 81       	ld	r31, Z
    387c:	e0 2d       	mov	r30, r0
    387e:	30 97       	sbiw	r30, 0x00	; 0
    3880:	09 f0       	breq	.+2      	; 0x3884 <f_mount+0x40>
    3882:	10 82       	st	Z, r1
    3884:	eb 81       	ldd	r30, Y+3	; 0x03
    3886:	fc 81       	ldd	r31, Y+4	; 0x04
    3888:	30 97       	sbiw	r30, 0x00	; 0
    388a:	e9 f0       	breq	.+58     	; 0x38c6 <f_mount+0x82>
    388c:	10 82       	st	Z, r1
    388e:	2b 81       	ldd	r18, Y+3	; 0x03
    3890:	3c 81       	ldd	r19, Y+4	; 0x04
    3892:	88 0f       	add	r24, r24
    3894:	99 1f       	adc	r25, r25
    3896:	fc 01       	movw	r30, r24
    3898:	eb 5c       	subi	r30, 0xCB	; 203
    389a:	fb 4f       	sbci	r31, 0xFB	; 251
    389c:	31 83       	std	Z+1, r19	; 0x01
    389e:	20 83       	st	Z, r18
    38a0:	23 2b       	or	r18, r19
    38a2:	69 f0       	breq	.+26     	; 0x38be <f_mount+0x7a>
    38a4:	11 30       	cpi	r17, 0x01	; 1
    38a6:	69 f4       	brne	.+26     	; 0x38c2 <f_mount+0x7e>
    38a8:	40 e0       	ldi	r20, 0x00	; 0
    38aa:	be 01       	movw	r22, r28
    38ac:	6b 5f       	subi	r22, 0xFB	; 251
    38ae:	7f 4f       	sbci	r23, 0xFF	; 255
    38b0:	ce 01       	movw	r24, r28
    38b2:	03 96       	adiw	r24, 0x03	; 3
    38b4:	0e 94 07 13 	call	0x260e	; 0x260e <find_volume>
    38b8:	0e c0       	rjmp	.+28     	; 0x38d6 <f_mount+0x92>
    38ba:	8b e0       	ldi	r24, 0x0B	; 11
    38bc:	0c c0       	rjmp	.+24     	; 0x38d6 <f_mount+0x92>
    38be:	80 e0       	ldi	r24, 0x00	; 0
    38c0:	0a c0       	rjmp	.+20     	; 0x38d6 <f_mount+0x92>
    38c2:	80 e0       	ldi	r24, 0x00	; 0
    38c4:	08 c0       	rjmp	.+16     	; 0x38d6 <f_mount+0x92>
    38c6:	88 0f       	add	r24, r24
    38c8:	99 1f       	adc	r25, r25
    38ca:	fc 01       	movw	r30, r24
    38cc:	eb 5c       	subi	r30, 0xCB	; 203
    38ce:	fb 4f       	sbci	r31, 0xFB	; 251
    38d0:	11 82       	std	Z+1, r1	; 0x01
    38d2:	10 82       	st	Z, r1
    38d4:	80 e0       	ldi	r24, 0x00	; 0
    38d6:	26 96       	adiw	r28, 0x06	; 6
    38d8:	0f b6       	in	r0, 0x3f	; 63
    38da:	f8 94       	cli
    38dc:	de bf       	out	0x3e, r29	; 62
    38de:	0f be       	out	0x3f, r0	; 63
    38e0:	cd bf       	out	0x3d, r28	; 61
    38e2:	df 91       	pop	r29
    38e4:	cf 91       	pop	r28
    38e6:	1f 91       	pop	r17
    38e8:	08 95       	ret

000038ea <f_open>:
    38ea:	2f 92       	push	r2
    38ec:	3f 92       	push	r3
    38ee:	4f 92       	push	r4
    38f0:	5f 92       	push	r5
    38f2:	6f 92       	push	r6
    38f4:	7f 92       	push	r7
    38f6:	8f 92       	push	r8
    38f8:	9f 92       	push	r9
    38fa:	af 92       	push	r10
    38fc:	bf 92       	push	r11
    38fe:	cf 92       	push	r12
    3900:	df 92       	push	r13
    3902:	ef 92       	push	r14
    3904:	ff 92       	push	r15
    3906:	0f 93       	push	r16
    3908:	1f 93       	push	r17
    390a:	cf 93       	push	r28
    390c:	df 93       	push	r29
    390e:	cd b7       	in	r28, 0x3d	; 61
    3910:	de b7       	in	r29, 0x3e	; 62
    3912:	ae 97       	sbiw	r28, 0x2e	; 46
    3914:	0f b6       	in	r0, 0x3f	; 63
    3916:	f8 94       	cli
    3918:	de bf       	out	0x3e, r29	; 62
    391a:	0f be       	out	0x3f, r0	; 63
    391c:	cd bf       	out	0x3d, r28	; 61
    391e:	7c a3       	std	Y+36, r23	; 0x24
    3920:	6b a3       	std	Y+35, r22	; 0x23
    3922:	00 97       	sbiw	r24, 0x00	; 0
    3924:	09 f4       	brne	.+2      	; 0x3928 <f_open+0x3e>
    3926:	83 c2       	rjmp	.+1286   	; 0x3e2e <f_open+0x544>
    3928:	4d a3       	std	Y+37, r20	; 0x25
    392a:	1c 01       	movw	r2, r24
    392c:	dc 01       	movw	r26, r24
    392e:	1d 92       	st	X+, r1
    3930:	1c 92       	st	X, r1
    3932:	4e 71       	andi	r20, 0x1E	; 30
    3934:	be 01       	movw	r22, r28
    3936:	6d 5d       	subi	r22, 0xDD	; 221
    3938:	7f 4f       	sbci	r23, 0xFF	; 255
    393a:	ce 01       	movw	r24, r28
    393c:	01 96       	adiw	r24, 0x01	; 1
    393e:	0e 94 07 13 	call	0x260e	; 0x260e <find_volume>
    3942:	81 11       	cpse	r24, r1
    3944:	03 c3       	rjmp	.+1542   	; 0x3f4c <f_open+0x662>
    3946:	ce 01       	movw	r24, r28
    3948:	47 96       	adiw	r24, 0x17	; 23
    394a:	9e 8b       	std	Y+22, r25	; 0x16
    394c:	8d 8b       	std	Y+21, r24	; 0x15
    394e:	cb a0       	ldd	r12, Y+35	; 0x23
    3950:	dc a0       	ldd	r13, Y+36	; 0x24
    3952:	f6 01       	movw	r30, r12
    3954:	80 81       	ld	r24, Z
    3956:	8f 32       	cpi	r24, 0x2F	; 47
    3958:	11 f0       	breq	.+4      	; 0x395e <f_open+0x74>
    395a:	8c 35       	cpi	r24, 0x5C	; 92
    395c:	19 f4       	brne	.+6      	; 0x3964 <f_open+0x7a>
    395e:	ff ef       	ldi	r31, 0xFF	; 255
    3960:	cf 1a       	sub	r12, r31
    3962:	df 0a       	sbc	r13, r31
    3964:	2d a1       	ldd	r18, Y+37	; 0x25
    3966:	2f 71       	andi	r18, 0x1F	; 31
    3968:	29 a7       	std	Y+41, r18	; 0x29
    396a:	1f 82       	std	Y+7, r1	; 0x07
    396c:	18 86       	std	Y+8, r1	; 0x08
    396e:	19 86       	std	Y+9, r1	; 0x09
    3970:	1a 86       	std	Y+10, r1	; 0x0a
    3972:	d6 01       	movw	r26, r12
    3974:	8c 91       	ld	r24, X
    3976:	80 32       	cpi	r24, 0x20	; 32
    3978:	68 f4       	brcc	.+26     	; 0x3994 <f_open+0xaa>
    397a:	60 e0       	ldi	r22, 0x00	; 0
    397c:	70 e0       	ldi	r23, 0x00	; 0
    397e:	ce 01       	movw	r24, r28
    3980:	01 96       	adiw	r24, 0x01	; 1
    3982:	34 db       	rcall	.-2456   	; 0x2fec <dir_sdi>
    3984:	1c 8a       	std	Y+20, r1	; 0x14
    3986:	1b 8a       	std	Y+19, r1	; 0x13
    3988:	e1 2c       	mov	r14, r1
    398a:	f1 2c       	mov	r15, r1
    398c:	88 23       	and	r24, r24
    398e:	09 f4       	brne	.+2      	; 0x3992 <f_open+0xa8>
    3990:	91 c2       	rjmp	.+1314   	; 0x3eb4 <f_open+0x5ca>
    3992:	87 c2       	rjmp	.+1294   	; 0x3ea2 <f_open+0x5b8>
    3994:	68 94       	set
    3996:	bb 24       	eor	r11, r11
    3998:	b5 f8       	bld	r11, 5
    399a:	a1 2c       	mov	r10, r1
    399c:	71 2c       	mov	r7, r1
    399e:	68 94       	set
    39a0:	66 24       	eor	r6, r6
    39a2:	63 f8       	bld	r6, 3
    39a4:	51 2c       	mov	r5, r1
    39a6:	41 2c       	mov	r4, r1
    39a8:	6a a6       	std	Y+42, r6	; 0x2a
    39aa:	5e a6       	std	Y+46, r5	; 0x2e
    39ac:	f6 01       	movw	r30, r12
    39ae:	af 01       	movw	r20, r30
    39b0:	81 91       	ld	r24, Z+
    39b2:	8f 32       	cpi	r24, 0x2F	; 47
    39b4:	e1 f3       	breq	.-8      	; 0x39ae <f_open+0xc4>
    39b6:	8c 35       	cpi	r24, 0x5C	; 92
    39b8:	d1 f3       	breq	.-12     	; 0x39ae <f_open+0xc4>
    39ba:	0d 89       	ldd	r16, Y+21	; 0x15
    39bc:	1e 89       	ldd	r17, Y+22	; 0x16
    39be:	f8 01       	movw	r30, r16
    39c0:	c8 01       	movw	r24, r16
    39c2:	0b 96       	adiw	r24, 0x0b	; 11
    39c4:	b1 92       	st	Z+, r11
    39c6:	e8 17       	cp	r30, r24
    39c8:	f9 07       	cpc	r31, r25
    39ca:	e1 f7       	brne	.-8      	; 0x39c4 <f_open+0xda>
    39cc:	6a 01       	movw	r12, r20
    39ce:	ea 2c       	mov	r14, r10
    39d0:	f7 2c       	mov	r15, r7
    39d2:	8a 2d       	mov	r24, r10
    39d4:	97 2d       	mov	r25, r7
    39d6:	86 2c       	mov	r8, r6
    39d8:	95 2c       	mov	r9, r5
    39da:	74 2d       	mov	r23, r4
    39dc:	da 01       	movw	r26, r20
    39de:	01 96       	adiw	r24, 0x01	; 1
    39e0:	6d 91       	ld	r22, X+
    39e2:	61 32       	cpi	r22, 0x21	; 33
    39e4:	08 f4       	brcc	.+2      	; 0x39e8 <f_open+0xfe>
    39e6:	3c c2       	rjmp	.+1144   	; 0x3e60 <f_open+0x576>
    39e8:	6f 32       	cpi	r22, 0x2F	; 47
    39ea:	09 f4       	brne	.+2      	; 0x39ee <f_open+0x104>
    39ec:	3e c2       	rjmp	.+1148   	; 0x3e6a <f_open+0x580>
    39ee:	6c 35       	cpi	r22, 0x5C	; 92
    39f0:	09 f4       	brne	.+2      	; 0x39f4 <f_open+0x10a>
    39f2:	3b c2       	rjmp	.+1142   	; 0x3e6a <f_open+0x580>
    39f4:	6e 32       	cpi	r22, 0x2E	; 46
    39f6:	09 f4       	brne	.+2      	; 0x39fa <f_open+0x110>
    39f8:	1c c2       	rjmp	.+1080   	; 0x3e32 <f_open+0x548>
    39fa:	e8 14       	cp	r14, r8
    39fc:	f9 04       	cpc	r15, r9
    39fe:	08 f0       	brcs	.+2      	; 0x3a02 <f_open+0x118>
    3a00:	79 c2       	rjmp	.+1266   	; 0x3ef4 <f_open+0x60a>
    3a02:	0a c0       	rjmp	.+20     	; 0x3a18 <f_open+0x12e>
    3a04:	77 0f       	add	r23, r23
    3a06:	77 0f       	add	r23, r23
    3a08:	ea a4       	ldd	r14, Y+42	; 0x2a
    3a0a:	fe a4       	ldd	r15, Y+46	; 0x2e
    3a0c:	0f 2e       	mov	r0, r31
    3a0e:	fb e0       	ldi	r31, 0x0B	; 11
    3a10:	8f 2e       	mov	r8, r31
    3a12:	f0 2d       	mov	r31, r0
    3a14:	91 2c       	mov	r9, r1
    3a16:	e3 cf       	rjmp	.-58     	; 0x39de <f_open+0xf4>
    3a18:	66 23       	and	r22, r22
    3a1a:	0c f0       	brlt	.+2      	; 0x3a1e <f_open+0x134>
    3a1c:	10 c2       	rjmp	.+1056   	; 0x3e3e <f_open+0x554>
    3a1e:	73 60       	ori	r23, 0x03	; 3
    3a20:	e6 2f       	mov	r30, r22
    3a22:	f0 e0       	ldi	r31, 0x00	; 0
    3a24:	ea 56       	subi	r30, 0x6A	; 106
    3a26:	ff 4f       	sbci	r31, 0xFF	; 255
    3a28:	60 81       	ld	r22, Z
    3a2a:	09 c2       	rjmp	.+1042   	; 0x3e3e <f_open+0x554>
    3a2c:	81 91       	ld	r24, Z+
    3a2e:	88 23       	and	r24, r24
    3a30:	09 f4       	brne	.+2      	; 0x3a34 <f_open+0x14a>
    3a32:	0f c2       	rjmp	.+1054   	; 0x3e52 <f_open+0x568>
    3a34:	90 e0       	ldi	r25, 0x00	; 0
    3a36:	48 17       	cp	r20, r24
    3a38:	59 07       	cpc	r21, r25
    3a3a:	c1 f7       	brne	.-16     	; 0x3a2c <f_open+0x142>
    3a3c:	86 e0       	ldi	r24, 0x06	; 6
    3a3e:	77 c2       	rjmp	.+1262   	; 0x3f2e <f_open+0x644>
    3a40:	72 60       	ori	r23, 0x02	; 2
    3a42:	06 c0       	rjmp	.+12     	; 0x3a50 <f_open+0x166>
    3a44:	2f e9       	ldi	r18, 0x9F	; 159
    3a46:	26 0f       	add	r18, r22
    3a48:	2a 31       	cpi	r18, 0x1A	; 26
    3a4a:	10 f4       	brcc	.+4      	; 0x3a50 <f_open+0x166>
    3a4c:	71 60       	ori	r23, 0x01	; 1
    3a4e:	60 52       	subi	r22, 0x20	; 32
    3a50:	f8 01       	movw	r30, r16
    3a52:	ee 0d       	add	r30, r14
    3a54:	ff 1d       	adc	r31, r15
    3a56:	60 83       	st	Z, r22
    3a58:	f7 01       	movw	r30, r14
    3a5a:	31 96       	adiw	r30, 0x01	; 1
    3a5c:	7f 01       	movw	r14, r30
    3a5e:	bf cf       	rjmp	.-130    	; 0x39de <f_open+0xf4>
    3a60:	ef 28       	or	r14, r15
    3a62:	09 f4       	brne	.+2      	; 0x3a66 <f_open+0x17c>
    3a64:	47 c2       	rjmp	.+1166   	; 0x3ef4 <f_open+0x60a>
    3a66:	d8 01       	movw	r26, r16
    3a68:	2c 91       	ld	r18, X
    3a6a:	25 3e       	cpi	r18, 0xE5	; 229
    3a6c:	11 f4       	brne	.+4      	; 0x3a72 <f_open+0x188>
    3a6e:	e5 e0       	ldi	r30, 0x05	; 5
    3a70:	ec 93       	st	X, r30
    3a72:	f8 e0       	ldi	r31, 0x08	; 8
    3a74:	8f 16       	cp	r8, r31
    3a76:	91 04       	cpc	r9, r1
    3a78:	19 f4       	brne	.+6      	; 0x3a80 <f_open+0x196>
    3a7a:	79 2f       	mov	r23, r25
    3a7c:	77 0f       	add	r23, r23
    3a7e:	77 0f       	add	r23, r23
    3a80:	97 2f       	mov	r25, r23
    3a82:	93 70       	andi	r25, 0x03	; 3
    3a84:	91 30       	cpi	r25, 0x01	; 1
    3a86:	09 f4       	brne	.+2      	; 0x3a8a <f_open+0x1a0>
    3a88:	80 61       	ori	r24, 0x10	; 16
    3a8a:	97 2f       	mov	r25, r23
    3a8c:	9c 70       	andi	r25, 0x0C	; 12
    3a8e:	94 30       	cpi	r25, 0x04	; 4
    3a90:	09 f4       	brne	.+2      	; 0x3a94 <f_open+0x1aa>
    3a92:	88 60       	ori	r24, 0x08	; 8
    3a94:	d8 01       	movw	r26, r16
    3a96:	1b 96       	adiw	r26, 0x0b	; 11
    3a98:	8c 93       	st	X, r24
    3a9a:	6a 2d       	mov	r22, r10
    3a9c:	77 2d       	mov	r23, r7
    3a9e:	ce 01       	movw	r24, r28
    3aa0:	01 96       	adiw	r24, 0x01	; 1
    3aa2:	a4 da       	rcall	.-2744   	; 0x2fec <dir_sdi>
    3aa4:	81 11       	cpse	r24, r1
    3aa6:	ec c1       	rjmp	.+984    	; 0x3e80 <f_open+0x596>
    3aa8:	4f 85       	ldd	r20, Y+15	; 0x0f
    3aaa:	58 89       	ldd	r21, Y+16	; 0x10
    3aac:	69 89       	ldd	r22, Y+17	; 0x11
    3aae:	7a 89       	ldd	r23, Y+18	; 0x12
    3ab0:	89 81       	ldd	r24, Y+1	; 0x01
    3ab2:	9a 81       	ldd	r25, Y+2	; 0x02
    3ab4:	0e 94 3e 12 	call	0x247c	; 0x247c <move_window>
    3ab8:	81 11       	cpse	r24, r1
    3aba:	e2 c1       	rjmp	.+964    	; 0x3e80 <f_open+0x596>
    3abc:	6b 89       	ldd	r22, Y+19	; 0x13
    3abe:	7c 89       	ldd	r23, Y+20	; 0x14
    3ac0:	fb 01       	movw	r30, r22
    3ac2:	80 81       	ld	r24, Z
    3ac4:	88 23       	and	r24, r24
    3ac6:	d1 f0       	breq	.+52     	; 0x3afc <f_open+0x212>
    3ac8:	83 85       	ldd	r24, Z+11	; 0x0b
    3aca:	83 fd       	sbrc	r24, 3
    3acc:	0f c0       	rjmp	.+30     	; 0x3aec <f_open+0x202>
    3ace:	4d 89       	ldd	r20, Y+21	; 0x15
    3ad0:	5e 89       	ldd	r21, Y+22	; 0x16
    3ad2:	da 01       	movw	r26, r20
    3ad4:	9b 01       	movw	r18, r22
    3ad6:	25 5f       	subi	r18, 0xF5	; 245
    3ad8:	3f 4f       	sbci	r19, 0xFF	; 255
    3ada:	04 c0       	rjmp	.+8      	; 0x3ae4 <f_open+0x1fa>
    3adc:	e2 17       	cp	r30, r18
    3ade:	f3 07       	cpc	r31, r19
    3ae0:	09 f4       	brne	.+2      	; 0x3ae4 <f_open+0x1fa>
    3ae2:	c8 c1       	rjmp	.+912    	; 0x3e74 <f_open+0x58a>
    3ae4:	91 91       	ld	r25, Z+
    3ae6:	8d 91       	ld	r24, X+
    3ae8:	98 17       	cp	r25, r24
    3aea:	c1 f3       	breq	.-16     	; 0x3adc <f_open+0x1f2>
    3aec:	6a 2d       	mov	r22, r10
    3aee:	77 2d       	mov	r23, r7
    3af0:	ce 01       	movw	r24, r28
    3af2:	01 96       	adiw	r24, 0x01	; 1
    3af4:	6c dd       	rcall	.-1320   	; 0x35ce <dir_next>
    3af6:	88 23       	and	r24, r24
    3af8:	b9 f2       	breq	.-82     	; 0x3aa8 <f_open+0x1be>
    3afa:	c2 c1       	rjmp	.+900    	; 0x3e80 <f_open+0x596>
    3afc:	ed 89       	ldd	r30, Y+21	; 0x15
    3afe:	fe 89       	ldd	r31, Y+22	; 0x16
    3b00:	93 85       	ldd	r25, Z+11	; 0x0b
    3b02:	92 fd       	sbrc	r25, 2
    3b04:	0d c2       	rjmp	.+1050   	; 0x3f20 <f_open+0x636>
    3b06:	85 e0       	ldi	r24, 0x05	; 5
    3b08:	12 c2       	rjmp	.+1060   	; 0x3f2e <f_open+0x644>
    3b0a:	db 01       	movw	r26, r22
    3b0c:	1b 96       	adiw	r26, 0x0b	; 11
    3b0e:	8c 91       	ld	r24, X
    3b10:	84 ff       	sbrs	r24, 4
    3b12:	08 c2       	rjmp	.+1040   	; 0x3f24 <f_open+0x63a>
    3b14:	89 81       	ldd	r24, Y+1	; 0x01
    3b16:	9a 81       	ldd	r25, Y+2	; 0x02
    3b18:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <ld_clust>
    3b1c:	6f 83       	std	Y+7, r22	; 0x07
    3b1e:	78 87       	std	Y+8, r23	; 0x08
    3b20:	89 87       	std	Y+9, r24	; 0x09
    3b22:	9a 87       	std	Y+10, r25	; 0x0a
    3b24:	43 cf       	rjmp	.-378    	; 0x39ac <f_open+0xc2>
    3b26:	81 11       	cpse	r24, r1
    3b28:	ef c1       	rjmp	.+990    	; 0x3f08 <f_open+0x61e>
    3b2a:	44 c0       	rjmp	.+136    	; 0x3bb4 <f_open+0x2ca>
    3b2c:	60 e0       	ldi	r22, 0x00	; 0
    3b2e:	70 e0       	ldi	r23, 0x00	; 0
    3b30:	ce 01       	movw	r24, r28
    3b32:	01 96       	adiw	r24, 0x01	; 1
    3b34:	5b da       	rcall	.-2890   	; 0x2fec <dir_sdi>
    3b36:	81 11       	cpse	r24, r1
    3b38:	06 c2       	rjmp	.+1036   	; 0x3f46 <f_open+0x65c>
    3b3a:	4f 85       	ldd	r20, Y+15	; 0x0f
    3b3c:	58 89       	ldd	r21, Y+16	; 0x10
    3b3e:	69 89       	ldd	r22, Y+17	; 0x11
    3b40:	7a 89       	ldd	r23, Y+18	; 0x12
    3b42:	89 81       	ldd	r24, Y+1	; 0x01
    3b44:	9a 81       	ldd	r25, Y+2	; 0x02
    3b46:	0e 94 3e 12 	call	0x247c	; 0x247c <move_window>
    3b4a:	81 11       	cpse	r24, r1
    3b4c:	fc c1       	rjmp	.+1016   	; 0x3f46 <f_open+0x65c>
    3b4e:	eb 89       	ldd	r30, Y+19	; 0x13
    3b50:	fc 89       	ldd	r31, Y+20	; 0x14
    3b52:	80 81       	ld	r24, Z
    3b54:	85 3e       	cpi	r24, 0xE5	; 229
    3b56:	51 f0       	breq	.+20     	; 0x3b6c <f_open+0x282>
    3b58:	88 23       	and	r24, r24
    3b5a:	41 f0       	breq	.+16     	; 0x3b6c <f_open+0x282>
    3b5c:	61 e0       	ldi	r22, 0x01	; 1
    3b5e:	70 e0       	ldi	r23, 0x00	; 0
    3b60:	ce 01       	movw	r24, r28
    3b62:	01 96       	adiw	r24, 0x01	; 1
    3b64:	34 dd       	rcall	.-1432   	; 0x35ce <dir_next>
    3b66:	88 23       	and	r24, r24
    3b68:	41 f3       	breq	.-48     	; 0x3b3a <f_open+0x250>
    3b6a:	ed c1       	rjmp	.+986    	; 0x3f46 <f_open+0x65c>
    3b6c:	4f 85       	ldd	r20, Y+15	; 0x0f
    3b6e:	58 89       	ldd	r21, Y+16	; 0x10
    3b70:	69 89       	ldd	r22, Y+17	; 0x11
    3b72:	7a 89       	ldd	r23, Y+18	; 0x12
    3b74:	89 81       	ldd	r24, Y+1	; 0x01
    3b76:	9a 81       	ldd	r25, Y+2	; 0x02
    3b78:	0e 94 3e 12 	call	0x247c	; 0x247c <move_window>
    3b7c:	81 11       	cpse	r24, r1
    3b7e:	ca c1       	rjmp	.+916    	; 0x3f14 <f_open+0x62a>
    3b80:	eb 89       	ldd	r30, Y+19	; 0x13
    3b82:	fc 89       	ldd	r31, Y+20	; 0x14
    3b84:	cf 01       	movw	r24, r30
    3b86:	80 96       	adiw	r24, 0x20	; 32
    3b88:	11 92       	st	Z+, r1
    3b8a:	e8 17       	cp	r30, r24
    3b8c:	f9 07       	cpc	r31, r25
    3b8e:	e1 f7       	brne	.-8      	; 0x3b88 <f_open+0x29e>
    3b90:	6d 89       	ldd	r22, Y+21	; 0x15
    3b92:	7e 89       	ldd	r23, Y+22	; 0x16
    3b94:	4b e0       	ldi	r20, 0x0B	; 11
    3b96:	50 e0       	ldi	r21, 0x00	; 0
    3b98:	8b 89       	ldd	r24, Y+19	; 0x13
    3b9a:	9c 89       	ldd	r25, Y+20	; 0x14
    3b9c:	0e 94 6e 11 	call	0x22dc	; 0x22dc <mem_cpy>
    3ba0:	e9 81       	ldd	r30, Y+1	; 0x01
    3ba2:	fa 81       	ldd	r31, Y+2	; 0x02
    3ba4:	81 e0       	ldi	r24, 0x01	; 1
    3ba6:	84 83       	std	Z+4, r24	; 0x04
    3ba8:	b9 a5       	ldd	r27, Y+41	; 0x29
    3baa:	b8 60       	ori	r27, 0x08	; 8
    3bac:	b9 a7       	std	Y+41, r27	; 0x29
    3bae:	eb 88       	ldd	r14, Y+19	; 0x13
    3bb0:	fc 88       	ldd	r15, Y+20	; 0x14
    3bb2:	08 c0       	rjmp	.+16     	; 0x3bc4 <f_open+0x2da>
    3bb4:	f7 01       	movw	r30, r14
    3bb6:	83 85       	ldd	r24, Z+11	; 0x0b
    3bb8:	81 71       	andi	r24, 0x11	; 17
    3bba:	09 f0       	breq	.+2      	; 0x3bbe <f_open+0x2d4>
    3bbc:	82 c1       	rjmp	.+772    	; 0x3ec2 <f_open+0x5d8>
    3bbe:	fd a1       	ldd	r31, Y+37	; 0x25
    3bc0:	f2 fd       	sbrc	r31, 2
    3bc2:	81 c1       	rjmp	.+770    	; 0x3ec6 <f_open+0x5dc>
    3bc4:	29 a5       	ldd	r18, Y+41	; 0x29
    3bc6:	23 ff       	sbrs	r18, 3
    3bc8:	db c0       	rjmp	.+438    	; 0x3d80 <f_open+0x496>
    3bca:	0e 94 56 2f 	call	0x5eac	; 0x5eac <get_fattime>
    3bce:	d7 01       	movw	r26, r14
    3bd0:	1e 96       	adiw	r26, 0x0e	; 14
    3bd2:	6c 93       	st	X, r22
    3bd4:	1e 97       	sbiw	r26, 0x0e	; 14
    3bd6:	47 2f       	mov	r20, r23
    3bd8:	55 27       	eor	r21, r21
    3bda:	1f 96       	adiw	r26, 0x0f	; 15
    3bdc:	4c 93       	st	X, r20
    3bde:	1f 97       	sbiw	r26, 0x0f	; 15
    3be0:	4c 01       	movw	r8, r24
    3be2:	aa 24       	eor	r10, r10
    3be4:	bb 24       	eor	r11, r11
    3be6:	50 96       	adiw	r26, 0x10	; 16
    3be8:	8c 92       	st	X, r8
    3bea:	50 97       	sbiw	r26, 0x10	; 16
    3bec:	09 2f       	mov	r16, r25
    3bee:	11 27       	eor	r17, r17
    3bf0:	22 27       	eor	r18, r18
    3bf2:	33 27       	eor	r19, r19
    3bf4:	51 96       	adiw	r26, 0x11	; 17
    3bf6:	0c 93       	st	X, r16
    3bf8:	51 97       	sbiw	r26, 0x11	; 17
    3bfa:	56 96       	adiw	r26, 0x16	; 22
    3bfc:	6c 93       	st	X, r22
    3bfe:	56 97       	sbiw	r26, 0x16	; 22
    3c00:	57 96       	adiw	r26, 0x17	; 23
    3c02:	4c 93       	st	X, r20
    3c04:	57 97       	sbiw	r26, 0x17	; 23
    3c06:	58 96       	adiw	r26, 0x18	; 24
    3c08:	8c 92       	st	X, r8
    3c0a:	58 97       	sbiw	r26, 0x18	; 24
    3c0c:	59 96       	adiw	r26, 0x19	; 25
    3c0e:	0c 93       	st	X, r16
    3c10:	59 97       	sbiw	r26, 0x19	; 25
    3c12:	1b 96       	adiw	r26, 0x0b	; 11
    3c14:	1c 92       	st	X, r1
    3c16:	1b 97       	sbiw	r26, 0x0b	; 11
    3c18:	5c 96       	adiw	r26, 0x1c	; 28
    3c1a:	1c 92       	st	X, r1
    3c1c:	5c 97       	sbiw	r26, 0x1c	; 28
    3c1e:	5d 96       	adiw	r26, 0x1d	; 29
    3c20:	1c 92       	st	X, r1
    3c22:	5d 97       	sbiw	r26, 0x1d	; 29
    3c24:	5e 96       	adiw	r26, 0x1e	; 30
    3c26:	1c 92       	st	X, r1
    3c28:	5e 97       	sbiw	r26, 0x1e	; 30
    3c2a:	5f 96       	adiw	r26, 0x1f	; 31
    3c2c:	1c 92       	st	X, r1
    3c2e:	c9 80       	ldd	r12, Y+1	; 0x01
    3c30:	da 80       	ldd	r13, Y+2	; 0x02
    3c32:	b7 01       	movw	r22, r14
    3c34:	c6 01       	movw	r24, r12
    3c36:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <ld_clust>
    3c3a:	4b 01       	movw	r8, r22
    3c3c:	5c 01       	movw	r10, r24
    3c3e:	f7 01       	movw	r30, r14
    3c40:	12 8e       	std	Z+26, r1	; 0x1a
    3c42:	13 8e       	std	Z+27, r1	; 0x1b
    3c44:	14 8a       	std	Z+20, r1	; 0x14
    3c46:	15 8a       	std	Z+21, r1	; 0x15
    3c48:	81 e0       	ldi	r24, 0x01	; 1
    3c4a:	d6 01       	movw	r26, r12
    3c4c:	14 96       	adiw	r26, 0x04	; 4
    3c4e:	8c 93       	st	X, r24
    3c50:	14 97       	sbiw	r26, 0x04	; 4
    3c52:	81 14       	cp	r8, r1
    3c54:	91 04       	cpc	r9, r1
    3c56:	a1 04       	cpc	r10, r1
    3c58:	b1 04       	cpc	r11, r1
    3c5a:	09 f4       	brne	.+2      	; 0x3c5e <f_open+0x374>
    3c5c:	91 c0       	rjmp	.+290    	; 0x3d80 <f_open+0x496>
    3c5e:	9a 96       	adiw	r26, 0x2a	; 42
    3c60:	2d 91       	ld	r18, X+
    3c62:	3d 91       	ld	r19, X+
    3c64:	4d 91       	ld	r20, X+
    3c66:	5c 91       	ld	r21, X
    3c68:	9d 97       	sbiw	r26, 0x2d	; 45
    3c6a:	2a a7       	std	Y+42, r18	; 0x2a
    3c6c:	3b a7       	std	Y+43, r19	; 0x2b
    3c6e:	4c a7       	std	Y+44, r20	; 0x2c
    3c70:	5d a7       	std	Y+45, r21	; 0x2d
    3c72:	b2 e0       	ldi	r27, 0x02	; 2
    3c74:	8b 16       	cp	r8, r27
    3c76:	91 04       	cpc	r9, r1
    3c78:	a1 04       	cpc	r10, r1
    3c7a:	b1 04       	cpc	r11, r1
    3c7c:	08 f4       	brcc	.+2      	; 0x3c80 <f_open+0x396>
    3c7e:	28 c1       	rjmp	.+592    	; 0x3ed0 <f_open+0x5e6>
    3c80:	f6 01       	movw	r30, r12
    3c82:	82 89       	ldd	r24, Z+18	; 0x12
    3c84:	93 89       	ldd	r25, Z+19	; 0x13
    3c86:	a4 89       	ldd	r26, Z+20	; 0x14
    3c88:	b5 89       	ldd	r27, Z+21	; 0x15
    3c8a:	88 16       	cp	r8, r24
    3c8c:	99 06       	cpc	r9, r25
    3c8e:	aa 06       	cpc	r10, r26
    3c90:	bb 06       	cpc	r11, r27
    3c92:	08 f0       	brcs	.+2      	; 0x3c96 <f_open+0x3ac>
    3c94:	1f c1       	rjmp	.+574    	; 0x3ed4 <f_open+0x5ea>
    3c96:	8d a2       	std	Y+37, r8	; 0x25
    3c98:	9e a2       	std	Y+38, r9	; 0x26
    3c9a:	af a2       	std	Y+39, r10	; 0x27
    3c9c:	b8 a6       	std	Y+40, r11	; 0x28
    3c9e:	3f c0       	rjmp	.+126    	; 0x3d1e <f_open+0x434>
    3ca0:	4d a1       	ldd	r20, Y+37	; 0x25
    3ca2:	5e a1       	ldd	r21, Y+38	; 0x26
    3ca4:	6f a1       	ldd	r22, Y+39	; 0x27
    3ca6:	78 a5       	ldd	r23, Y+40	; 0x28
    3ca8:	c6 01       	movw	r24, r12
    3caa:	a1 d8       	rcall	.-3774   	; 0x2dee <get_fat>
    3cac:	2b 01       	movw	r4, r22
    3cae:	3c 01       	movw	r6, r24
    3cb0:	61 15       	cp	r22, r1
    3cb2:	71 05       	cpc	r23, r1
    3cb4:	81 05       	cpc	r24, r1
    3cb6:	91 05       	cpc	r25, r1
    3cb8:	09 f4       	brne	.+2      	; 0x3cbc <f_open+0x3d2>
    3cba:	40 c0       	rjmp	.+128    	; 0x3d3c <f_open+0x452>
    3cbc:	61 30       	cpi	r22, 0x01	; 1
    3cbe:	71 05       	cpc	r23, r1
    3cc0:	81 05       	cpc	r24, r1
    3cc2:	91 05       	cpc	r25, r1
    3cc4:	09 f4       	brne	.+2      	; 0x3cc8 <f_open+0x3de>
    3cc6:	08 c1       	rjmp	.+528    	; 0x3ed8 <f_open+0x5ee>
    3cc8:	6f 3f       	cpi	r22, 0xFF	; 255
    3cca:	7f 4f       	sbci	r23, 0xFF	; 255
    3ccc:	8f 4f       	sbci	r24, 0xFF	; 255
    3cce:	9f 4f       	sbci	r25, 0xFF	; 255
    3cd0:	09 f4       	brne	.+2      	; 0x3cd4 <f_open+0x3ea>
    3cd2:	04 c1       	rjmp	.+520    	; 0x3edc <f_open+0x5f2>
    3cd4:	00 e0       	ldi	r16, 0x00	; 0
    3cd6:	10 e0       	ldi	r17, 0x00	; 0
    3cd8:	98 01       	movw	r18, r16
    3cda:	4d a1       	ldd	r20, Y+37	; 0x25
    3cdc:	5e a1       	ldd	r21, Y+38	; 0x26
    3cde:	6f a1       	ldd	r22, Y+39	; 0x27
    3ce0:	78 a5       	ldd	r23, Y+40	; 0x28
    3ce2:	c6 01       	movw	r24, r12
    3ce4:	3e da       	rcall	.-2948   	; 0x3162 <put_fat>
    3ce6:	81 11       	cpse	r24, r1
    3ce8:	fa c0       	rjmp	.+500    	; 0x3ede <f_open+0x5f4>
    3cea:	f6 01       	movw	r30, r12
    3cec:	86 85       	ldd	r24, Z+14	; 0x0e
    3cee:	97 85       	ldd	r25, Z+15	; 0x0f
    3cf0:	a0 89       	ldd	r26, Z+16	; 0x10
    3cf2:	b1 89       	ldd	r27, Z+17	; 0x11
    3cf4:	8f 3f       	cpi	r24, 0xFF	; 255
    3cf6:	ff ef       	ldi	r31, 0xFF	; 255
    3cf8:	9f 07       	cpc	r25, r31
    3cfa:	af 07       	cpc	r26, r31
    3cfc:	bf 07       	cpc	r27, r31
    3cfe:	59 f0       	breq	.+22     	; 0x3d16 <f_open+0x42c>
    3d00:	01 96       	adiw	r24, 0x01	; 1
    3d02:	a1 1d       	adc	r26, r1
    3d04:	b1 1d       	adc	r27, r1
    3d06:	f6 01       	movw	r30, r12
    3d08:	86 87       	std	Z+14, r24	; 0x0e
    3d0a:	97 87       	std	Z+15, r25	; 0x0f
    3d0c:	a0 8b       	std	Z+16, r26	; 0x10
    3d0e:	b1 8b       	std	Z+17, r27	; 0x11
    3d10:	85 81       	ldd	r24, Z+5	; 0x05
    3d12:	81 60       	ori	r24, 0x01	; 1
    3d14:	85 83       	std	Z+5, r24	; 0x05
    3d16:	4d a2       	std	Y+37, r4	; 0x25
    3d18:	5e a2       	std	Y+38, r5	; 0x26
    3d1a:	6f a2       	std	Y+39, r6	; 0x27
    3d1c:	78 a6       	std	Y+40, r7	; 0x28
    3d1e:	f6 01       	movw	r30, r12
    3d20:	82 89       	ldd	r24, Z+18	; 0x12
    3d22:	93 89       	ldd	r25, Z+19	; 0x13
    3d24:	a4 89       	ldd	r26, Z+20	; 0x14
    3d26:	b5 89       	ldd	r27, Z+21	; 0x15
    3d28:	2d a1       	ldd	r18, Y+37	; 0x25
    3d2a:	3e a1       	ldd	r19, Y+38	; 0x26
    3d2c:	4f a1       	ldd	r20, Y+39	; 0x27
    3d2e:	58 a5       	ldd	r21, Y+40	; 0x28
    3d30:	28 17       	cp	r18, r24
    3d32:	39 07       	cpc	r19, r25
    3d34:	4a 07       	cpc	r20, r26
    3d36:	5b 07       	cpc	r21, r27
    3d38:	08 f4       	brcc	.+2      	; 0x3d3c <f_open+0x452>
    3d3a:	b2 cf       	rjmp	.-156    	; 0x3ca0 <f_open+0x3b6>
    3d3c:	89 81       	ldd	r24, Y+1	; 0x01
    3d3e:	9a 81       	ldd	r25, Y+2	; 0x02
    3d40:	31 e0       	ldi	r19, 0x01	; 1
    3d42:	83 1a       	sub	r8, r19
    3d44:	91 08       	sbc	r9, r1
    3d46:	a1 08       	sbc	r10, r1
    3d48:	b1 08       	sbc	r11, r1
    3d4a:	dc 01       	movw	r26, r24
    3d4c:	1a 96       	adiw	r26, 0x0a	; 10
    3d4e:	8d 92       	st	X+, r8
    3d50:	9d 92       	st	X+, r9
    3d52:	ad 92       	st	X+, r10
    3d54:	bc 92       	st	X, r11
    3d56:	1d 97       	sbiw	r26, 0x0d	; 13
    3d58:	4a a5       	ldd	r20, Y+42	; 0x2a
    3d5a:	5b a5       	ldd	r21, Y+43	; 0x2b
    3d5c:	6c a5       	ldd	r22, Y+44	; 0x2c
    3d5e:	7d a5       	ldd	r23, Y+45	; 0x2d
    3d60:	0e 94 3e 12 	call	0x247c	; 0x247c <move_window>
    3d64:	88 23       	and	r24, r24
    3d66:	79 f0       	breq	.+30     	; 0x3d86 <f_open+0x49c>
    3d68:	f1 c0       	rjmp	.+482    	; 0x3f4c <f_open+0x662>
    3d6a:	81 11       	cpse	r24, r1
    3d6c:	bf c0       	rjmp	.+382    	; 0x3eec <f_open+0x602>
    3d6e:	f7 01       	movw	r30, r14
    3d70:	83 85       	ldd	r24, Z+11	; 0x0b
    3d72:	84 fd       	sbrc	r24, 4
    3d74:	b8 c0       	rjmp	.+368    	; 0x3ee6 <f_open+0x5fc>
    3d76:	fd a1       	ldd	r31, Y+37	; 0x25
    3d78:	f1 ff       	sbrs	r31, 1
    3d7a:	02 c0       	rjmp	.+4      	; 0x3d80 <f_open+0x496>
    3d7c:	80 fd       	sbrc	r24, 0
    3d7e:	b5 c0       	rjmp	.+362    	; 0x3eea <f_open+0x600>
    3d80:	29 a5       	ldd	r18, Y+41	; 0x29
    3d82:	23 ff       	sbrs	r18, 3
    3d84:	03 c0       	rjmp	.+6      	; 0x3d8c <f_open+0x4a2>
    3d86:	39 a5       	ldd	r19, Y+41	; 0x29
    3d88:	30 62       	ori	r19, 0x20	; 32
    3d8a:	39 a7       	std	Y+41, r19	; 0x29
    3d8c:	e9 81       	ldd	r30, Y+1	; 0x01
    3d8e:	fa 81       	ldd	r31, Y+2	; 0x02
    3d90:	82 a5       	ldd	r24, Z+42	; 0x2a
    3d92:	93 a5       	ldd	r25, Z+43	; 0x2b
    3d94:	a4 a5       	ldd	r26, Z+44	; 0x2c
    3d96:	b5 a5       	ldd	r27, Z+45	; 0x2d
    3d98:	f1 01       	movw	r30, r2
    3d9a:	82 8f       	std	Z+26, r24	; 0x1a
    3d9c:	93 8f       	std	Z+27, r25	; 0x1b
    3d9e:	a4 8f       	std	Z+28, r26	; 0x1c
    3da0:	b5 8f       	std	Z+29, r27	; 0x1d
    3da2:	f7 8e       	std	Z+31, r15	; 0x1f
    3da4:	e6 8e       	std	Z+30, r14	; 0x1e
    3da6:	e9 a5       	ldd	r30, Y+41	; 0x29
    3da8:	d1 01       	movw	r26, r2
    3daa:	14 96       	adiw	r26, 0x04	; 4
    3dac:	ec 93       	st	X, r30
    3dae:	14 97       	sbiw	r26, 0x04	; 4
    3db0:	15 96       	adiw	r26, 0x05	; 5
    3db2:	1c 92       	st	X, r1
    3db4:	09 81       	ldd	r16, Y+1	; 0x01
    3db6:	1a 81       	ldd	r17, Y+2	; 0x02
    3db8:	b7 01       	movw	r22, r14
    3dba:	c8 01       	movw	r24, r16
    3dbc:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <ld_clust>
    3dc0:	d1 01       	movw	r26, r2
    3dc2:	1e 96       	adiw	r26, 0x0e	; 14
    3dc4:	6d 93       	st	X+, r22
    3dc6:	7d 93       	st	X+, r23
    3dc8:	8d 93       	st	X+, r24
    3dca:	9c 93       	st	X, r25
    3dcc:	51 97       	sbiw	r26, 0x11	; 17
    3dce:	f7 01       	movw	r30, r14
    3dd0:	27 8d       	ldd	r18, Z+31	; 0x1f
    3dd2:	86 8d       	ldd	r24, Z+30	; 0x1e
    3dd4:	90 e0       	ldi	r25, 0x00	; 0
    3dd6:	a0 e0       	ldi	r26, 0x00	; 0
    3dd8:	b0 e0       	ldi	r27, 0x00	; 0
    3dda:	dc 01       	movw	r26, r24
    3ddc:	99 27       	eor	r25, r25
    3dde:	88 27       	eor	r24, r24
    3de0:	b2 2b       	or	r27, r18
    3de2:	24 8d       	ldd	r18, Z+28	; 0x1c
    3de4:	ac 01       	movw	r20, r24
    3de6:	bd 01       	movw	r22, r26
    3de8:	42 2b       	or	r20, r18
    3dea:	25 8d       	ldd	r18, Z+29	; 0x1d
    3dec:	30 e0       	ldi	r19, 0x00	; 0
    3dee:	92 2f       	mov	r25, r18
    3df0:	88 27       	eor	r24, r24
    3df2:	a0 e0       	ldi	r26, 0x00	; 0
    3df4:	b0 e0       	ldi	r27, 0x00	; 0
    3df6:	84 2b       	or	r24, r20
    3df8:	95 2b       	or	r25, r21
    3dfa:	a6 2b       	or	r26, r22
    3dfc:	b7 2b       	or	r27, r23
    3dfe:	f1 01       	movw	r30, r2
    3e00:	82 87       	std	Z+10, r24	; 0x0a
    3e02:	93 87       	std	Z+11, r25	; 0x0b
    3e04:	a4 87       	std	Z+12, r26	; 0x0c
    3e06:	b5 87       	std	Z+13, r27	; 0x0d
    3e08:	16 82       	std	Z+6, r1	; 0x06
    3e0a:	17 82       	std	Z+7, r1	; 0x07
    3e0c:	10 86       	std	Z+8, r1	; 0x08
    3e0e:	11 86       	std	Z+9, r1	; 0x09
    3e10:	16 8a       	std	Z+22, r1	; 0x16
    3e12:	17 8a       	std	Z+23, r1	; 0x17
    3e14:	10 8e       	std	Z+24, r1	; 0x18
    3e16:	11 8e       	std	Z+25, r1	; 0x19
    3e18:	11 83       	std	Z+1, r17	; 0x01
    3e1a:	00 83       	st	Z, r16
    3e1c:	d8 01       	movw	r26, r16
    3e1e:	16 96       	adiw	r26, 0x06	; 6
    3e20:	8d 91       	ld	r24, X+
    3e22:	9c 91       	ld	r25, X
    3e24:	17 97       	sbiw	r26, 0x07	; 7
    3e26:	93 83       	std	Z+3, r25	; 0x03
    3e28:	82 83       	std	Z+2, r24	; 0x02
    3e2a:	80 e0       	ldi	r24, 0x00	; 0
    3e2c:	8f c0       	rjmp	.+286    	; 0x3f4c <f_open+0x662>
    3e2e:	89 e0       	ldi	r24, 0x09	; 9
    3e30:	8d c0       	rjmp	.+282    	; 0x3f4c <f_open+0x662>
    3e32:	e8 e0       	ldi	r30, 0x08	; 8
    3e34:	8e 16       	cp	r8, r30
    3e36:	91 04       	cpc	r9, r1
    3e38:	09 f4       	brne	.+2      	; 0x3e3c <f_open+0x552>
    3e3a:	e4 cd       	rjmp	.-1080   	; 0x3a04 <f_open+0x11a>
    3e3c:	75 c0       	rjmp	.+234    	; 0x3f28 <f_open+0x63e>
    3e3e:	46 2f       	mov	r20, r22
    3e40:	50 e0       	ldi	r21, 0x00	; 0
    3e42:	42 32       	cpi	r20, 0x22	; 34
    3e44:	51 05       	cpc	r21, r1
    3e46:	09 f4       	brne	.+2      	; 0x3e4a <f_open+0x560>
    3e48:	71 c0       	rjmp	.+226    	; 0x3f2c <f_open+0x642>
    3e4a:	e8 e0       	ldi	r30, 0x08	; 8
    3e4c:	f1 e0       	ldi	r31, 0x01	; 1
    3e4e:	9c 01       	movw	r18, r24
    3e50:	ed cd       	rjmp	.-1062   	; 0x3a2c <f_open+0x142>
    3e52:	c9 01       	movw	r24, r18
    3e54:	2f eb       	ldi	r18, 0xBF	; 191
    3e56:	26 0f       	add	r18, r22
    3e58:	2a 31       	cpi	r18, 0x1A	; 26
    3e5a:	08 f4       	brcc	.+2      	; 0x3e5e <f_open+0x574>
    3e5c:	f1 cd       	rjmp	.-1054   	; 0x3a40 <f_open+0x156>
    3e5e:	f2 cd       	rjmp	.-1052   	; 0x3a44 <f_open+0x15a>
    3e60:	c8 0e       	add	r12, r24
    3e62:	d9 1e       	adc	r13, r25
    3e64:	97 2f       	mov	r25, r23
    3e66:	84 e0       	ldi	r24, 0x04	; 4
    3e68:	fb cd       	rjmp	.-1034   	; 0x3a60 <f_open+0x176>
    3e6a:	c8 0e       	add	r12, r24
    3e6c:	d9 1e       	adc	r13, r25
    3e6e:	97 2f       	mov	r25, r23
    3e70:	84 2d       	mov	r24, r4
    3e72:	f6 cd       	rjmp	.-1044   	; 0x3a60 <f_open+0x176>
    3e74:	da 01       	movw	r26, r20
    3e76:	1b 96       	adiw	r26, 0x0b	; 11
    3e78:	8c 91       	ld	r24, X
    3e7a:	82 ff       	sbrs	r24, 2
    3e7c:	46 ce       	rjmp	.-884    	; 0x3b0a <f_open+0x220>
    3e7e:	0d c0       	rjmp	.+26     	; 0x3e9a <f_open+0x5b0>
    3e80:	ed 89       	ldd	r30, Y+21	; 0x15
    3e82:	fe 89       	ldd	r31, Y+22	; 0x16
    3e84:	93 85       	ldd	r25, Z+11	; 0x0b
    3e86:	84 30       	cpi	r24, 0x04	; 4
    3e88:	09 f4       	brne	.+2      	; 0x3e8c <f_open+0x5a2>
    3e8a:	3b ce       	rjmp	.-906    	; 0x3b02 <f_open+0x218>
    3e8c:	eb 88       	ldd	r14, Y+19	; 0x13
    3e8e:	fc 88       	ldd	r15, Y+20	; 0x14
    3e90:	9d a1       	ldd	r25, Y+37	; 0x25
    3e92:	9c 71       	andi	r25, 0x1C	; 28
    3e94:	09 f0       	breq	.+2      	; 0x3e98 <f_open+0x5ae>
    3e96:	47 ce       	rjmp	.-882    	; 0x3b26 <f_open+0x23c>
    3e98:	68 cf       	rjmp	.-304    	; 0x3d6a <f_open+0x480>
    3e9a:	7b 01       	movw	r14, r22
    3e9c:	67 2b       	or	r22, r23
    3e9e:	29 f4       	brne	.+10     	; 0x3eaa <f_open+0x5c0>
    3ea0:	09 c0       	rjmp	.+18     	; 0x3eb4 <f_open+0x5ca>
    3ea2:	0d a1       	ldd	r16, Y+37	; 0x25
    3ea4:	0c 71       	andi	r16, 0x1C	; 28
    3ea6:	81 f5       	brne	.+96     	; 0x3f08 <f_open+0x61e>
    3ea8:	21 c0       	rjmp	.+66     	; 0x3eec <f_open+0x602>
    3eaa:	8d a1       	ldd	r24, Y+37	; 0x25
    3eac:	8c 71       	andi	r24, 0x1C	; 28
    3eae:	09 f0       	breq	.+2      	; 0x3eb2 <f_open+0x5c8>
    3eb0:	81 ce       	rjmp	.-766    	; 0x3bb4 <f_open+0x2ca>
    3eb2:	5d cf       	rjmp	.-326    	; 0x3d6e <f_open+0x484>
    3eb4:	0d a1       	ldd	r16, Y+37	; 0x25
    3eb6:	0c 71       	andi	r16, 0x1C	; 28
    3eb8:	51 f5       	brne	.+84     	; 0x3f0e <f_open+0x624>
    3eba:	e1 2c       	mov	r14, r1
    3ebc:	f1 2c       	mov	r15, r1
    3ebe:	86 e0       	ldi	r24, 0x06	; 6
    3ec0:	15 c0       	rjmp	.+42     	; 0x3eec <f_open+0x602>
    3ec2:	87 e0       	ldi	r24, 0x07	; 7
    3ec4:	01 c0       	rjmp	.+2      	; 0x3ec8 <f_open+0x5de>
    3ec6:	88 e0       	ldi	r24, 0x08	; 8
    3ec8:	88 23       	and	r24, r24
    3eca:	09 f4       	brne	.+2      	; 0x3ece <f_open+0x5e4>
    3ecc:	59 cf       	rjmp	.-334    	; 0x3d80 <f_open+0x496>
    3ece:	3e c0       	rjmp	.+124    	; 0x3f4c <f_open+0x662>
    3ed0:	82 e0       	ldi	r24, 0x02	; 2
    3ed2:	05 c0       	rjmp	.+10     	; 0x3ede <f_open+0x5f4>
    3ed4:	82 e0       	ldi	r24, 0x02	; 2
    3ed6:	03 c0       	rjmp	.+6      	; 0x3ede <f_open+0x5f4>
    3ed8:	82 e0       	ldi	r24, 0x02	; 2
    3eda:	01 c0       	rjmp	.+2      	; 0x3ede <f_open+0x5f4>
    3edc:	81 e0       	ldi	r24, 0x01	; 1
    3ede:	88 23       	and	r24, r24
    3ee0:	09 f4       	brne	.+2      	; 0x3ee4 <f_open+0x5fa>
    3ee2:	51 cf       	rjmp	.-350    	; 0x3d86 <f_open+0x49c>
    3ee4:	33 c0       	rjmp	.+102    	; 0x3f4c <f_open+0x662>
    3ee6:	84 e0       	ldi	r24, 0x04	; 4
    3ee8:	01 c0       	rjmp	.+2      	; 0x3eec <f_open+0x602>
    3eea:	87 e0       	ldi	r24, 0x07	; 7
    3eec:	88 23       	and	r24, r24
    3eee:	09 f4       	brne	.+2      	; 0x3ef2 <f_open+0x608>
    3ef0:	5a cf       	rjmp	.-332    	; 0x3da6 <f_open+0x4bc>
    3ef2:	2c c0       	rjmp	.+88     	; 0x3f4c <f_open+0x662>
    3ef4:	eb 88       	ldd	r14, Y+19	; 0x13
    3ef6:	fc 88       	ldd	r15, Y+20	; 0x14
    3ef8:	86 e0       	ldi	r24, 0x06	; 6
    3efa:	d3 cf       	rjmp	.-90     	; 0x3ea2 <f_open+0x5b8>
    3efc:	b9 a5       	ldd	r27, Y+41	; 0x29
    3efe:	b8 60       	ori	r27, 0x08	; 8
    3f00:	b9 a7       	std	Y+41, r27	; 0x29
    3f02:	eb 88       	ldd	r14, Y+19	; 0x13
    3f04:	fc 88       	ldd	r15, Y+20	; 0x14
    3f06:	f2 cf       	rjmp	.-28     	; 0x3eec <f_open+0x602>
    3f08:	84 30       	cpi	r24, 0x04	; 4
    3f0a:	c1 f7       	brne	.-16     	; 0x3efc <f_open+0x612>
    3f0c:	0f ce       	rjmp	.-994    	; 0x3b2c <f_open+0x242>
    3f0e:	86 e0       	ldi	r24, 0x06	; 6
    3f10:	01 c0       	rjmp	.+2      	; 0x3f14 <f_open+0x62a>
    3f12:	87 e0       	ldi	r24, 0x07	; 7
    3f14:	e9 a5       	ldd	r30, Y+41	; 0x29
    3f16:	e8 60       	ori	r30, 0x08	; 8
    3f18:	e9 a7       	std	Y+41, r30	; 0x29
    3f1a:	eb 88       	ldd	r14, Y+19	; 0x13
    3f1c:	fc 88       	ldd	r15, Y+20	; 0x14
    3f1e:	e6 cf       	rjmp	.-52     	; 0x3eec <f_open+0x602>
    3f20:	84 e0       	ldi	r24, 0x04	; 4
    3f22:	05 c0       	rjmp	.+10     	; 0x3f2e <f_open+0x644>
    3f24:	85 e0       	ldi	r24, 0x05	; 5
    3f26:	03 c0       	rjmp	.+6      	; 0x3f2e <f_open+0x644>
    3f28:	86 e0       	ldi	r24, 0x06	; 6
    3f2a:	01 c0       	rjmp	.+2      	; 0x3f2e <f_open+0x644>
    3f2c:	86 e0       	ldi	r24, 0x06	; 6
    3f2e:	eb 88       	ldd	r14, Y+19	; 0x13
    3f30:	fc 88       	ldd	r15, Y+20	; 0x14
    3f32:	9d a1       	ldd	r25, Y+37	; 0x25
    3f34:	9c 71       	andi	r25, 0x1C	; 28
    3f36:	41 f7       	brne	.-48     	; 0x3f08 <f_open+0x61e>
    3f38:	18 cf       	rjmp	.-464    	; 0x3d6a <f_open+0x480>
    3f3a:	f9 a5       	ldd	r31, Y+41	; 0x29
    3f3c:	f8 60       	ori	r31, 0x08	; 8
    3f3e:	f9 a7       	std	Y+41, r31	; 0x29
    3f40:	eb 88       	ldd	r14, Y+19	; 0x13
    3f42:	fc 88       	ldd	r15, Y+20	; 0x14
    3f44:	d3 cf       	rjmp	.-90     	; 0x3eec <f_open+0x602>
    3f46:	84 30       	cpi	r24, 0x04	; 4
    3f48:	21 f3       	breq	.-56     	; 0x3f12 <f_open+0x628>
    3f4a:	f7 cf       	rjmp	.-18     	; 0x3f3a <f_open+0x650>
    3f4c:	ae 96       	adiw	r28, 0x2e	; 46
    3f4e:	0f b6       	in	r0, 0x3f	; 63
    3f50:	f8 94       	cli
    3f52:	de bf       	out	0x3e, r29	; 62
    3f54:	0f be       	out	0x3f, r0	; 63
    3f56:	cd bf       	out	0x3d, r28	; 61
    3f58:	df 91       	pop	r29
    3f5a:	cf 91       	pop	r28
    3f5c:	1f 91       	pop	r17
    3f5e:	0f 91       	pop	r16
    3f60:	ff 90       	pop	r15
    3f62:	ef 90       	pop	r14
    3f64:	df 90       	pop	r13
    3f66:	cf 90       	pop	r12
    3f68:	bf 90       	pop	r11
    3f6a:	af 90       	pop	r10
    3f6c:	9f 90       	pop	r9
    3f6e:	8f 90       	pop	r8
    3f70:	7f 90       	pop	r7
    3f72:	6f 90       	pop	r6
    3f74:	5f 90       	pop	r5
    3f76:	4f 90       	pop	r4
    3f78:	3f 90       	pop	r3
    3f7a:	2f 90       	pop	r2
    3f7c:	08 95       	ret

00003f7e <f_write>:
    3f7e:	3f 92       	push	r3
    3f80:	4f 92       	push	r4
    3f82:	5f 92       	push	r5
    3f84:	6f 92       	push	r6
    3f86:	7f 92       	push	r7
    3f88:	8f 92       	push	r8
    3f8a:	9f 92       	push	r9
    3f8c:	af 92       	push	r10
    3f8e:	bf 92       	push	r11
    3f90:	cf 92       	push	r12
    3f92:	df 92       	push	r13
    3f94:	ef 92       	push	r14
    3f96:	ff 92       	push	r15
    3f98:	0f 93       	push	r16
    3f9a:	1f 93       	push	r17
    3f9c:	cf 93       	push	r28
    3f9e:	df 93       	push	r29
    3fa0:	00 d0       	rcall	.+0      	; 0x3fa2 <f_write+0x24>
    3fa2:	00 d0       	rcall	.+0      	; 0x3fa4 <f_write+0x26>
    3fa4:	00 d0       	rcall	.+0      	; 0x3fa6 <f_write+0x28>
    3fa6:	cd b7       	in	r28, 0x3d	; 61
    3fa8:	de b7       	in	r29, 0x3e	; 62
    3faa:	9e 83       	std	Y+6, r25	; 0x06
    3fac:	8d 83       	std	Y+5, r24	; 0x05
    3fae:	4b 01       	movw	r8, r22
    3fb0:	6a 01       	movw	r12, r20
    3fb2:	59 01       	movw	r10, r18
    3fb4:	d9 01       	movw	r26, r18
    3fb6:	1d 92       	st	X+, r1
    3fb8:	1c 92       	st	X, r1
    3fba:	0e 94 e2 12 	call	0x25c4	; 0x25c4 <validate>
    3fbe:	81 11       	cpse	r24, r1
    3fc0:	c0 c1       	rjmp	.+896    	; 0x4342 <__stack+0x243>
    3fc2:	ed 81       	ldd	r30, Y+5	; 0x05
    3fc4:	fe 81       	ldd	r31, Y+6	; 0x06
    3fc6:	85 81       	ldd	r24, Z+5	; 0x05
    3fc8:	81 11       	cpse	r24, r1
    3fca:	bb c1       	rjmp	.+886    	; 0x4342 <__stack+0x243>
    3fcc:	84 81       	ldd	r24, Z+4	; 0x04
    3fce:	81 ff       	sbrs	r24, 1
    3fd0:	b7 c1       	rjmp	.+878    	; 0x4340 <__stack+0x241>
    3fd2:	86 81       	ldd	r24, Z+6	; 0x06
    3fd4:	97 81       	ldd	r25, Z+7	; 0x07
    3fd6:	a0 85       	ldd	r26, Z+8	; 0x08
    3fd8:	b1 85       	ldd	r27, Z+9	; 0x09
    3fda:	ac 01       	movw	r20, r24
    3fdc:	bd 01       	movw	r22, r26
    3fde:	4c 0d       	add	r20, r12
    3fe0:	5d 1d       	adc	r21, r13
    3fe2:	61 1d       	adc	r22, r1
    3fe4:	71 1d       	adc	r23, r1
    3fe6:	48 17       	cp	r20, r24
    3fe8:	59 07       	cpc	r21, r25
    3fea:	6a 07       	cpc	r22, r26
    3fec:	7b 07       	cpc	r23, r27
    3fee:	08 f4       	brcc	.+2      	; 0x3ff2 <f_write+0x74>
    3ff0:	8a c1       	rjmp	.+788    	; 0x4306 <__stack+0x207>
    3ff2:	c1 14       	cp	r12, r1
    3ff4:	d1 04       	cpc	r13, r1
    3ff6:	09 f4       	brne	.+2      	; 0x3ffa <f_write+0x7c>
    3ff8:	86 c1       	rjmp	.+780    	; 0x4306 <__stack+0x207>
    3ffa:	b0 96       	adiw	r30, 0x20	; 32
    3ffc:	fc 83       	std	Y+4, r31	; 0x04
    3ffe:	eb 83       	std	Y+3, r30	; 0x03
    4000:	ed 81       	ldd	r30, Y+5	; 0x05
    4002:	fe 81       	ldd	r31, Y+6	; 0x06
    4004:	86 81       	ldd	r24, Z+6	; 0x06
    4006:	97 81       	ldd	r25, Z+7	; 0x07
    4008:	a0 85       	ldd	r26, Z+8	; 0x08
    400a:	b1 85       	ldd	r27, Z+9	; 0x09
    400c:	ac 01       	movw	r20, r24
    400e:	bd 01       	movw	r22, r26
    4010:	51 70       	andi	r21, 0x01	; 1
    4012:	66 27       	eor	r22, r22
    4014:	77 27       	eor	r23, r23
    4016:	45 2b       	or	r20, r21
    4018:	46 2b       	or	r20, r22
    401a:	47 2b       	or	r20, r23
    401c:	09 f0       	breq	.+2      	; 0x4020 <f_write+0xa2>
    401e:	32 c1       	rjmp	.+612    	; 0x4284 <__stack+0x185>
    4020:	e0 80       	ld	r14, Z
    4022:	f1 80       	ldd	r15, Z+1	; 0x01
    4024:	f7 01       	movw	r30, r14
    4026:	22 81       	ldd	r18, Z+2	; 0x02
    4028:	21 50       	subi	r18, 0x01	; 1
    402a:	ac 01       	movw	r20, r24
    402c:	bd 01       	movw	r22, r26
    402e:	03 2e       	mov	r0, r19
    4030:	39 e0       	ldi	r19, 0x09	; 9
    4032:	76 95       	lsr	r23
    4034:	67 95       	ror	r22
    4036:	57 95       	ror	r21
    4038:	47 95       	ror	r20
    403a:	3a 95       	dec	r19
    403c:	d1 f7       	brne	.-12     	; 0x4032 <f_write+0xb4>
    403e:	30 2d       	mov	r19, r0
    4040:	32 2e       	mov	r3, r18
    4042:	34 22       	and	r3, r20
    4044:	09 f0       	breq	.+2      	; 0x4048 <f_write+0xca>
    4046:	52 c0       	rjmp	.+164    	; 0x40ec <f_write+0x16e>
    4048:	89 2b       	or	r24, r25
    404a:	8a 2b       	or	r24, r26
    404c:	8b 2b       	or	r24, r27
    404e:	99 f4       	brne	.+38     	; 0x4076 <f_write+0xf8>
    4050:	ad 81       	ldd	r26, Y+5	; 0x05
    4052:	be 81       	ldd	r27, Y+6	; 0x06
    4054:	1e 96       	adiw	r26, 0x0e	; 14
    4056:	6d 91       	ld	r22, X+
    4058:	7d 91       	ld	r23, X+
    405a:	8d 91       	ld	r24, X+
    405c:	9c 91       	ld	r25, X
    405e:	51 97       	sbiw	r26, 0x11	; 17
    4060:	61 15       	cp	r22, r1
    4062:	71 05       	cpc	r23, r1
    4064:	81 05       	cpc	r24, r1
    4066:	91 05       	cpc	r25, r1
    4068:	a1 f4       	brne	.+40     	; 0x4092 <f_write+0x114>
    406a:	40 e0       	ldi	r20, 0x00	; 0
    406c:	50 e0       	ldi	r21, 0x00	; 0
    406e:	ba 01       	movw	r22, r20
    4070:	c7 01       	movw	r24, r14
    4072:	9e d9       	rcall	.-3268   	; 0x33b0 <create_chain>
    4074:	08 c0       	rjmp	.+16     	; 0x4086 <f_write+0x108>
    4076:	ed 81       	ldd	r30, Y+5	; 0x05
    4078:	fe 81       	ldd	r31, Y+6	; 0x06
    407a:	42 89       	ldd	r20, Z+18	; 0x12
    407c:	53 89       	ldd	r21, Z+19	; 0x13
    407e:	64 89       	ldd	r22, Z+20	; 0x14
    4080:	75 89       	ldd	r23, Z+21	; 0x15
    4082:	c7 01       	movw	r24, r14
    4084:	95 d9       	rcall	.-3286   	; 0x33b0 <create_chain>
    4086:	61 15       	cp	r22, r1
    4088:	71 05       	cpc	r23, r1
    408a:	81 05       	cpc	r24, r1
    408c:	91 05       	cpc	r25, r1
    408e:	09 f4       	brne	.+2      	; 0x4092 <f_write+0x114>
    4090:	3a c1       	rjmp	.+628    	; 0x4306 <__stack+0x207>
    4092:	61 30       	cpi	r22, 0x01	; 1
    4094:	71 05       	cpc	r23, r1
    4096:	81 05       	cpc	r24, r1
    4098:	91 05       	cpc	r25, r1
    409a:	31 f4       	brne	.+12     	; 0x40a8 <f_write+0x12a>
    409c:	82 e0       	ldi	r24, 0x02	; 2
    409e:	ad 81       	ldd	r26, Y+5	; 0x05
    40a0:	be 81       	ldd	r27, Y+6	; 0x06
    40a2:	15 96       	adiw	r26, 0x05	; 5
    40a4:	8c 93       	st	X, r24
    40a6:	4d c1       	rjmp	.+666    	; 0x4342 <__stack+0x243>
    40a8:	6f 3f       	cpi	r22, 0xFF	; 255
    40aa:	bf ef       	ldi	r27, 0xFF	; 255
    40ac:	7b 07       	cpc	r23, r27
    40ae:	8b 07       	cpc	r24, r27
    40b0:	9b 07       	cpc	r25, r27
    40b2:	29 f4       	brne	.+10     	; 0x40be <f_write+0x140>
    40b4:	81 e0       	ldi	r24, 0x01	; 1
    40b6:	ed 81       	ldd	r30, Y+5	; 0x05
    40b8:	fe 81       	ldd	r31, Y+6	; 0x06
    40ba:	85 83       	std	Z+5, r24	; 0x05
    40bc:	42 c1       	rjmp	.+644    	; 0x4342 <__stack+0x243>
    40be:	ad 81       	ldd	r26, Y+5	; 0x05
    40c0:	be 81       	ldd	r27, Y+6	; 0x06
    40c2:	52 96       	adiw	r26, 0x12	; 18
    40c4:	6d 93       	st	X+, r22
    40c6:	7d 93       	st	X+, r23
    40c8:	8d 93       	st	X+, r24
    40ca:	9c 93       	st	X, r25
    40cc:	55 97       	sbiw	r26, 0x15	; 21
    40ce:	1e 96       	adiw	r26, 0x0e	; 14
    40d0:	4d 90       	ld	r4, X+
    40d2:	5d 90       	ld	r5, X+
    40d4:	6d 90       	ld	r6, X+
    40d6:	7c 90       	ld	r7, X
    40d8:	51 97       	sbiw	r26, 0x11	; 17
    40da:	45 28       	or	r4, r5
    40dc:	46 28       	or	r4, r6
    40de:	47 28       	or	r4, r7
    40e0:	29 f4       	brne	.+10     	; 0x40ec <f_write+0x16e>
    40e2:	fd 01       	movw	r30, r26
    40e4:	66 87       	std	Z+14, r22	; 0x0e
    40e6:	77 87       	std	Z+15, r23	; 0x0f
    40e8:	80 8b       	std	Z+16, r24	; 0x10
    40ea:	91 8b       	std	Z+17, r25	; 0x11
    40ec:	ad 81       	ldd	r26, Y+5	; 0x05
    40ee:	be 81       	ldd	r27, Y+6	; 0x06
    40f0:	14 96       	adiw	r26, 0x04	; 4
    40f2:	8c 91       	ld	r24, X
    40f4:	14 97       	sbiw	r26, 0x04	; 4
    40f6:	86 ff       	sbrs	r24, 6
    40f8:	1e c0       	rjmp	.+60     	; 0x4136 <__stack+0x37>
    40fa:	56 96       	adiw	r26, 0x16	; 22
    40fc:	2d 91       	ld	r18, X+
    40fe:	3d 91       	ld	r19, X+
    4100:	4d 91       	ld	r20, X+
    4102:	5c 91       	ld	r21, X
    4104:	59 97       	sbiw	r26, 0x19	; 25
    4106:	ed 91       	ld	r30, X+
    4108:	fc 91       	ld	r31, X
    410a:	01 e0       	ldi	r16, 0x01	; 1
    410c:	10 e0       	ldi	r17, 0x00	; 0
    410e:	6b 81       	ldd	r22, Y+3	; 0x03
    4110:	7c 81       	ldd	r23, Y+4	; 0x04
    4112:	81 81       	ldd	r24, Z+1	; 0x01
    4114:	0e 94 ed 0a 	call	0x15da	; 0x15da <disk_write>
    4118:	88 23       	and	r24, r24
    411a:	29 f0       	breq	.+10     	; 0x4126 <__stack+0x27>
    411c:	81 e0       	ldi	r24, 0x01	; 1
    411e:	ed 81       	ldd	r30, Y+5	; 0x05
    4120:	fe 81       	ldd	r31, Y+6	; 0x06
    4122:	85 83       	std	Z+5, r24	; 0x05
    4124:	0e c1       	rjmp	.+540    	; 0x4342 <__stack+0x243>
    4126:	ad 81       	ldd	r26, Y+5	; 0x05
    4128:	be 81       	ldd	r27, Y+6	; 0x06
    412a:	14 96       	adiw	r26, 0x04	; 4
    412c:	8c 91       	ld	r24, X
    412e:	14 97       	sbiw	r26, 0x04	; 4
    4130:	8f 7b       	andi	r24, 0xBF	; 191
    4132:	14 96       	adiw	r26, 0x04	; 4
    4134:	8c 93       	st	X, r24
    4136:	ed 81       	ldd	r30, Y+5	; 0x05
    4138:	fe 81       	ldd	r31, Y+6	; 0x06
    413a:	01 90       	ld	r0, Z+
    413c:	f0 81       	ld	r31, Z
    413e:	e0 2d       	mov	r30, r0
    4140:	fa 83       	std	Y+2, r31	; 0x02
    4142:	e9 83       	std	Y+1, r30	; 0x01
    4144:	ad 81       	ldd	r26, Y+5	; 0x05
    4146:	be 81       	ldd	r27, Y+6	; 0x06
    4148:	52 96       	adiw	r26, 0x12	; 18
    414a:	4d 91       	ld	r20, X+
    414c:	5d 91       	ld	r21, X+
    414e:	6d 91       	ld	r22, X+
    4150:	7c 91       	ld	r23, X
    4152:	55 97       	sbiw	r26, 0x15	; 21
    4154:	cf 01       	movw	r24, r30
    4156:	0e 94 c9 16 	call	0x2d92	; 0x2d92 <clust2sect>
    415a:	61 15       	cp	r22, r1
    415c:	71 05       	cpc	r23, r1
    415e:	81 05       	cpc	r24, r1
    4160:	91 05       	cpc	r25, r1
    4162:	29 f4       	brne	.+10     	; 0x416e <__stack+0x6f>
    4164:	82 e0       	ldi	r24, 0x02	; 2
    4166:	ed 81       	ldd	r30, Y+5	; 0x05
    4168:	fe 81       	ldd	r31, Y+6	; 0x06
    416a:	85 83       	std	Z+5, r24	; 0x05
    416c:	ea c0       	rjmp	.+468    	; 0x4342 <__stack+0x243>
    416e:	2b 01       	movw	r4, r22
    4170:	3c 01       	movw	r6, r24
    4172:	43 0c       	add	r4, r3
    4174:	51 1c       	adc	r5, r1
    4176:	61 1c       	adc	r6, r1
    4178:	71 1c       	adc	r7, r1
    417a:	76 01       	movw	r14, r12
    417c:	ef 2c       	mov	r14, r15
    417e:	ff 24       	eor	r15, r15
    4180:	e6 94       	lsr	r14
    4182:	e1 14       	cp	r14, r1
    4184:	f1 04       	cpc	r15, r1
    4186:	09 f4       	brne	.+2      	; 0x418a <__stack+0x8b>
    4188:	4a c0       	rjmp	.+148    	; 0x421e <__stack+0x11f>
    418a:	a9 81       	ldd	r26, Y+1	; 0x01
    418c:	ba 81       	ldd	r27, Y+2	; 0x02
    418e:	12 96       	adiw	r26, 0x02	; 2
    4190:	4c 91       	ld	r20, X
    4192:	24 2f       	mov	r18, r20
    4194:	30 e0       	ldi	r19, 0x00	; 0
    4196:	c7 01       	movw	r24, r14
    4198:	83 0d       	add	r24, r3
    419a:	91 1d       	adc	r25, r1
    419c:	28 17       	cp	r18, r24
    419e:	39 07       	cpc	r19, r25
    41a0:	18 f4       	brcc	.+6      	; 0x41a8 <__stack+0xa9>
    41a2:	79 01       	movw	r14, r18
    41a4:	e3 18       	sub	r14, r3
    41a6:	f1 08       	sbc	r15, r1
    41a8:	87 01       	movw	r16, r14
    41aa:	a3 01       	movw	r20, r6
    41ac:	92 01       	movw	r18, r4
    41ae:	b4 01       	movw	r22, r8
    41b0:	e9 81       	ldd	r30, Y+1	; 0x01
    41b2:	fa 81       	ldd	r31, Y+2	; 0x02
    41b4:	81 81       	ldd	r24, Z+1	; 0x01
    41b6:	0e 94 ed 0a 	call	0x15da	; 0x15da <disk_write>
    41ba:	88 23       	and	r24, r24
    41bc:	31 f0       	breq	.+12     	; 0x41ca <__stack+0xcb>
    41be:	81 e0       	ldi	r24, 0x01	; 1
    41c0:	ad 81       	ldd	r26, Y+5	; 0x05
    41c2:	be 81       	ldd	r27, Y+6	; 0x06
    41c4:	15 96       	adiw	r26, 0x05	; 5
    41c6:	8c 93       	st	X, r24
    41c8:	bc c0       	rjmp	.+376    	; 0x4342 <__stack+0x243>
    41ca:	ed 81       	ldd	r30, Y+5	; 0x05
    41cc:	fe 81       	ldd	r31, Y+6	; 0x06
    41ce:	86 89       	ldd	r24, Z+22	; 0x16
    41d0:	97 89       	ldd	r25, Z+23	; 0x17
    41d2:	a0 8d       	ldd	r26, Z+24	; 0x18
    41d4:	b1 8d       	ldd	r27, Z+25	; 0x19
    41d6:	84 19       	sub	r24, r4
    41d8:	95 09       	sbc	r25, r5
    41da:	a6 09       	sbc	r26, r6
    41dc:	b7 09       	sbc	r27, r7
    41de:	a7 01       	movw	r20, r14
    41e0:	60 e0       	ldi	r22, 0x00	; 0
    41e2:	70 e0       	ldi	r23, 0x00	; 0
    41e4:	84 17       	cp	r24, r20
    41e6:	95 07       	cpc	r25, r21
    41e8:	a6 07       	cpc	r26, r22
    41ea:	b7 07       	cpc	r27, r23
    41ec:	a0 f4       	brcc	.+40     	; 0x4216 <__stack+0x117>
    41ee:	98 2f       	mov	r25, r24
    41f0:	88 27       	eor	r24, r24
    41f2:	99 0f       	add	r25, r25
    41f4:	b4 01       	movw	r22, r8
    41f6:	68 0f       	add	r22, r24
    41f8:	79 1f       	adc	r23, r25
    41fa:	40 e0       	ldi	r20, 0x00	; 0
    41fc:	52 e0       	ldi	r21, 0x02	; 2
    41fe:	8b 81       	ldd	r24, Y+3	; 0x03
    4200:	9c 81       	ldd	r25, Y+4	; 0x04
    4202:	0e 94 6e 11 	call	0x22dc	; 0x22dc <mem_cpy>
    4206:	ad 81       	ldd	r26, Y+5	; 0x05
    4208:	be 81       	ldd	r27, Y+6	; 0x06
    420a:	14 96       	adiw	r26, 0x04	; 4
    420c:	8c 91       	ld	r24, X
    420e:	14 97       	sbiw	r26, 0x04	; 4
    4210:	8f 7b       	andi	r24, 0xBF	; 191
    4212:	14 96       	adiw	r26, 0x04	; 4
    4214:	8c 93       	st	X, r24
    4216:	fe 2c       	mov	r15, r14
    4218:	ee 24       	eor	r14, r14
    421a:	ff 0c       	add	r15, r15
    421c:	58 c0       	rjmp	.+176    	; 0x42ce <__stack+0x1cf>
    421e:	ed 81       	ldd	r30, Y+5	; 0x05
    4220:	fe 81       	ldd	r31, Y+6	; 0x06
    4222:	86 89       	ldd	r24, Z+22	; 0x16
    4224:	97 89       	ldd	r25, Z+23	; 0x17
    4226:	a0 8d       	ldd	r26, Z+24	; 0x18
    4228:	b1 8d       	ldd	r27, Z+25	; 0x19
    422a:	84 15       	cp	r24, r4
    422c:	95 05       	cpc	r25, r5
    422e:	a6 05       	cpc	r26, r6
    4230:	b7 05       	cpc	r27, r7
    4232:	01 f1       	breq	.+64     	; 0x4274 <__stack+0x175>
    4234:	46 81       	ldd	r20, Z+6	; 0x06
    4236:	57 81       	ldd	r21, Z+7	; 0x07
    4238:	60 85       	ldd	r22, Z+8	; 0x08
    423a:	71 85       	ldd	r23, Z+9	; 0x09
    423c:	82 85       	ldd	r24, Z+10	; 0x0a
    423e:	93 85       	ldd	r25, Z+11	; 0x0b
    4240:	a4 85       	ldd	r26, Z+12	; 0x0c
    4242:	b5 85       	ldd	r27, Z+13	; 0x0d
    4244:	48 17       	cp	r20, r24
    4246:	59 07       	cpc	r21, r25
    4248:	6a 07       	cpc	r22, r26
    424a:	7b 07       	cpc	r23, r27
    424c:	98 f4       	brcc	.+38     	; 0x4274 <__stack+0x175>
    424e:	01 e0       	ldi	r16, 0x01	; 1
    4250:	10 e0       	ldi	r17, 0x00	; 0
    4252:	a3 01       	movw	r20, r6
    4254:	92 01       	movw	r18, r4
    4256:	6b 81       	ldd	r22, Y+3	; 0x03
    4258:	7c 81       	ldd	r23, Y+4	; 0x04
    425a:	a9 81       	ldd	r26, Y+1	; 0x01
    425c:	ba 81       	ldd	r27, Y+2	; 0x02
    425e:	11 96       	adiw	r26, 0x01	; 1
    4260:	8c 91       	ld	r24, X
    4262:	0e 94 9b 0a 	call	0x1536	; 0x1536 <disk_read>
    4266:	88 23       	and	r24, r24
    4268:	29 f0       	breq	.+10     	; 0x4274 <__stack+0x175>
    426a:	81 e0       	ldi	r24, 0x01	; 1
    426c:	ed 81       	ldd	r30, Y+5	; 0x05
    426e:	fe 81       	ldd	r31, Y+6	; 0x06
    4270:	85 83       	std	Z+5, r24	; 0x05
    4272:	67 c0       	rjmp	.+206    	; 0x4342 <__stack+0x243>
    4274:	ad 81       	ldd	r26, Y+5	; 0x05
    4276:	be 81       	ldd	r27, Y+6	; 0x06
    4278:	56 96       	adiw	r26, 0x16	; 22
    427a:	4d 92       	st	X+, r4
    427c:	5d 92       	st	X+, r5
    427e:	6d 92       	st	X+, r6
    4280:	7c 92       	st	X, r7
    4282:	59 97       	sbiw	r26, 0x19	; 25
    4284:	ed 81       	ldd	r30, Y+5	; 0x05
    4286:	fe 81       	ldd	r31, Y+6	; 0x06
    4288:	86 81       	ldd	r24, Z+6	; 0x06
    428a:	97 81       	ldd	r25, Z+7	; 0x07
    428c:	a0 85       	ldd	r26, Z+8	; 0x08
    428e:	b1 85       	ldd	r27, Z+9	; 0x09
    4290:	ac 01       	movw	r20, r24
    4292:	51 70       	andi	r21, 0x01	; 1
    4294:	20 e0       	ldi	r18, 0x00	; 0
    4296:	32 e0       	ldi	r19, 0x02	; 2
    4298:	24 1b       	sub	r18, r20
    429a:	35 0b       	sbc	r19, r21
    429c:	76 01       	movw	r14, r12
    429e:	2c 15       	cp	r18, r12
    42a0:	3d 05       	cpc	r19, r13
    42a2:	08 f4       	brcc	.+2      	; 0x42a6 <__stack+0x1a7>
    42a4:	79 01       	movw	r14, r18
    42a6:	91 70       	andi	r25, 0x01	; 1
    42a8:	aa 27       	eor	r26, r26
    42aa:	bb 27       	eor	r27, r27
    42ac:	80 96       	adiw	r24, 0x20	; 32
    42ae:	a7 01       	movw	r20, r14
    42b0:	b4 01       	movw	r22, r8
    42b2:	2d 81       	ldd	r18, Y+5	; 0x05
    42b4:	3e 81       	ldd	r19, Y+6	; 0x06
    42b6:	82 0f       	add	r24, r18
    42b8:	93 1f       	adc	r25, r19
    42ba:	0e 94 6e 11 	call	0x22dc	; 0x22dc <mem_cpy>
    42be:	ad 81       	ldd	r26, Y+5	; 0x05
    42c0:	be 81       	ldd	r27, Y+6	; 0x06
    42c2:	14 96       	adiw	r26, 0x04	; 4
    42c4:	8c 91       	ld	r24, X
    42c6:	14 97       	sbiw	r26, 0x04	; 4
    42c8:	80 64       	ori	r24, 0x40	; 64
    42ca:	14 96       	adiw	r26, 0x04	; 4
    42cc:	8c 93       	st	X, r24
    42ce:	8e 0c       	add	r8, r14
    42d0:	9f 1c       	adc	r9, r15
    42d2:	ed 81       	ldd	r30, Y+5	; 0x05
    42d4:	fe 81       	ldd	r31, Y+6	; 0x06
    42d6:	86 81       	ldd	r24, Z+6	; 0x06
    42d8:	97 81       	ldd	r25, Z+7	; 0x07
    42da:	a0 85       	ldd	r26, Z+8	; 0x08
    42dc:	b1 85       	ldd	r27, Z+9	; 0x09
    42de:	8e 0d       	add	r24, r14
    42e0:	9f 1d       	adc	r25, r15
    42e2:	a1 1d       	adc	r26, r1
    42e4:	b1 1d       	adc	r27, r1
    42e6:	86 83       	std	Z+6, r24	; 0x06
    42e8:	97 83       	std	Z+7, r25	; 0x07
    42ea:	a0 87       	std	Z+8, r26	; 0x08
    42ec:	b1 87       	std	Z+9, r27	; 0x09
    42ee:	d5 01       	movw	r26, r10
    42f0:	8d 91       	ld	r24, X+
    42f2:	9c 91       	ld	r25, X
    42f4:	11 97       	sbiw	r26, 0x01	; 1
    42f6:	8e 0d       	add	r24, r14
    42f8:	9f 1d       	adc	r25, r15
    42fa:	8d 93       	st	X+, r24
    42fc:	9c 93       	st	X, r25
    42fe:	ce 18       	sub	r12, r14
    4300:	df 08       	sbc	r13, r15
    4302:	09 f0       	breq	.+2      	; 0x4306 <__stack+0x207>
    4304:	7d ce       	rjmp	.-774    	; 0x4000 <f_write+0x82>
    4306:	ed 81       	ldd	r30, Y+5	; 0x05
    4308:	fe 81       	ldd	r31, Y+6	; 0x06
    430a:	86 81       	ldd	r24, Z+6	; 0x06
    430c:	97 81       	ldd	r25, Z+7	; 0x07
    430e:	a0 85       	ldd	r26, Z+8	; 0x08
    4310:	b1 85       	ldd	r27, Z+9	; 0x09
    4312:	42 85       	ldd	r20, Z+10	; 0x0a
    4314:	53 85       	ldd	r21, Z+11	; 0x0b
    4316:	64 85       	ldd	r22, Z+12	; 0x0c
    4318:	75 85       	ldd	r23, Z+13	; 0x0d
    431a:	48 17       	cp	r20, r24
    431c:	59 07       	cpc	r21, r25
    431e:	6a 07       	cpc	r22, r26
    4320:	7b 07       	cpc	r23, r27
    4322:	20 f4       	brcc	.+8      	; 0x432c <__stack+0x22d>
    4324:	82 87       	std	Z+10, r24	; 0x0a
    4326:	93 87       	std	Z+11, r25	; 0x0b
    4328:	a4 87       	std	Z+12, r26	; 0x0c
    432a:	b5 87       	std	Z+13, r27	; 0x0d
    432c:	ad 81       	ldd	r26, Y+5	; 0x05
    432e:	be 81       	ldd	r27, Y+6	; 0x06
    4330:	14 96       	adiw	r26, 0x04	; 4
    4332:	8c 91       	ld	r24, X
    4334:	14 97       	sbiw	r26, 0x04	; 4
    4336:	80 62       	ori	r24, 0x20	; 32
    4338:	14 96       	adiw	r26, 0x04	; 4
    433a:	8c 93       	st	X, r24
    433c:	80 e0       	ldi	r24, 0x00	; 0
    433e:	01 c0       	rjmp	.+2      	; 0x4342 <__stack+0x243>
    4340:	87 e0       	ldi	r24, 0x07	; 7
    4342:	26 96       	adiw	r28, 0x06	; 6
    4344:	0f b6       	in	r0, 0x3f	; 63
    4346:	f8 94       	cli
    4348:	de bf       	out	0x3e, r29	; 62
    434a:	0f be       	out	0x3f, r0	; 63
    434c:	cd bf       	out	0x3d, r28	; 61
    434e:	df 91       	pop	r29
    4350:	cf 91       	pop	r28
    4352:	1f 91       	pop	r17
    4354:	0f 91       	pop	r16
    4356:	ff 90       	pop	r15
    4358:	ef 90       	pop	r14
    435a:	df 90       	pop	r13
    435c:	cf 90       	pop	r12
    435e:	bf 90       	pop	r11
    4360:	af 90       	pop	r10
    4362:	9f 90       	pop	r9
    4364:	8f 90       	pop	r8
    4366:	7f 90       	pop	r7
    4368:	6f 90       	pop	r6
    436a:	5f 90       	pop	r5
    436c:	4f 90       	pop	r4
    436e:	3f 90       	pop	r3
    4370:	08 95       	ret

00004372 <putc_bfd>:
    4372:	ef 92       	push	r14
    4374:	ff 92       	push	r15
    4376:	0f 93       	push	r16
    4378:	1f 93       	push	r17
    437a:	cf 93       	push	r28
    437c:	df 93       	push	r29
    437e:	00 d0       	rcall	.+0      	; 0x4380 <putc_bfd+0xe>
    4380:	cd b7       	in	r28, 0x3d	; 61
    4382:	de b7       	in	r29, 0x3e	; 62
    4384:	fc 01       	movw	r30, r24
    4386:	22 81       	ldd	r18, Z+2	; 0x02
    4388:	33 81       	ldd	r19, Z+3	; 0x03
    438a:	33 23       	and	r19, r19
    438c:	6c f1       	brlt	.+90     	; 0x43e8 <putc_bfd+0x76>
    438e:	8c 01       	movw	r16, r24
    4390:	79 01       	movw	r14, r18
    4392:	ff ef       	ldi	r31, 0xFF	; 255
    4394:	ef 1a       	sub	r14, r31
    4396:	ff 0a       	sbc	r15, r31
    4398:	fc 01       	movw	r30, r24
    439a:	e2 0f       	add	r30, r18
    439c:	f3 1f       	adc	r31, r19
    439e:	66 83       	std	Z+6, r22	; 0x06
    43a0:	8d e3       	ldi	r24, 0x3D	; 61
    43a2:	e8 16       	cp	r14, r24
    43a4:	f1 04       	cpc	r15, r1
    43a6:	c4 f0       	brlt	.+48     	; 0x43d8 <putc_bfd+0x66>
    43a8:	9e 01       	movw	r18, r28
    43aa:	2f 5f       	subi	r18, 0xFF	; 255
    43ac:	3f 4f       	sbci	r19, 0xFF	; 255
    43ae:	a7 01       	movw	r20, r14
    43b0:	b8 01       	movw	r22, r16
    43b2:	6a 5f       	subi	r22, 0xFA	; 250
    43b4:	7f 4f       	sbci	r23, 0xFF	; 255
    43b6:	f8 01       	movw	r30, r16
    43b8:	80 81       	ld	r24, Z
    43ba:	91 81       	ldd	r25, Z+1	; 0x01
    43bc:	e0 dd       	rcall	.-1088   	; 0x3f7e <f_write>
    43be:	81 e0       	ldi	r24, 0x01	; 1
    43c0:	90 e0       	ldi	r25, 0x00	; 0
    43c2:	29 81       	ldd	r18, Y+1	; 0x01
    43c4:	3a 81       	ldd	r19, Y+2	; 0x02
    43c6:	e2 16       	cp	r14, r18
    43c8:	f3 06       	cpc	r15, r19
    43ca:	11 f4       	brne	.+4      	; 0x43d0 <putc_bfd+0x5e>
    43cc:	80 e0       	ldi	r24, 0x00	; 0
    43ce:	90 e0       	ldi	r25, 0x00	; 0
    43d0:	ee 24       	eor	r14, r14
    43d2:	ff 24       	eor	r15, r15
    43d4:	e8 1a       	sub	r14, r24
    43d6:	f9 0a       	sbc	r15, r25
    43d8:	f8 01       	movw	r30, r16
    43da:	f3 82       	std	Z+3, r15	; 0x03
    43dc:	e2 82       	std	Z+2, r14	; 0x02
    43de:	84 81       	ldd	r24, Z+4	; 0x04
    43e0:	95 81       	ldd	r25, Z+5	; 0x05
    43e2:	01 96       	adiw	r24, 0x01	; 1
    43e4:	95 83       	std	Z+5, r25	; 0x05
    43e6:	84 83       	std	Z+4, r24	; 0x04
    43e8:	0f 90       	pop	r0
    43ea:	0f 90       	pop	r0
    43ec:	df 91       	pop	r29
    43ee:	cf 91       	pop	r28
    43f0:	1f 91       	pop	r17
    43f2:	0f 91       	pop	r16
    43f4:	ff 90       	pop	r15
    43f6:	ef 90       	pop	r14
    43f8:	08 95       	ret

000043fa <f_sync>:
    43fa:	0f 93       	push	r16
    43fc:	1f 93       	push	r17
    43fe:	cf 93       	push	r28
    4400:	df 93       	push	r29
    4402:	ec 01       	movw	r28, r24
    4404:	0e 94 e2 12 	call	0x25c4	; 0x25c4 <validate>
    4408:	81 11       	cpse	r24, r1
    440a:	b5 c0       	rjmp	.+362    	; 0x4576 <f_sync+0x17c>
    440c:	8c 81       	ldd	r24, Y+4	; 0x04
    440e:	85 ff       	sbrs	r24, 5
    4410:	b4 c0       	rjmp	.+360    	; 0x457a <f_sync+0x180>
    4412:	86 ff       	sbrs	r24, 6
    4414:	13 c0       	rjmp	.+38     	; 0x443c <f_sync+0x42>
    4416:	2e 89       	ldd	r18, Y+22	; 0x16
    4418:	3f 89       	ldd	r19, Y+23	; 0x17
    441a:	48 8d       	ldd	r20, Y+24	; 0x18
    441c:	59 8d       	ldd	r21, Y+25	; 0x19
    441e:	e8 81       	ld	r30, Y
    4420:	f9 81       	ldd	r31, Y+1	; 0x01
    4422:	01 e0       	ldi	r16, 0x01	; 1
    4424:	10 e0       	ldi	r17, 0x00	; 0
    4426:	be 01       	movw	r22, r28
    4428:	60 5e       	subi	r22, 0xE0	; 224
    442a:	7f 4f       	sbci	r23, 0xFF	; 255
    442c:	81 81       	ldd	r24, Z+1	; 0x01
    442e:	0e 94 ed 0a 	call	0x15da	; 0x15da <disk_write>
    4432:	81 11       	cpse	r24, r1
    4434:	a4 c0       	rjmp	.+328    	; 0x457e <f_sync+0x184>
    4436:	8c 81       	ldd	r24, Y+4	; 0x04
    4438:	8f 7b       	andi	r24, 0xBF	; 191
    443a:	8c 83       	std	Y+4, r24	; 0x04
    443c:	4a 8d       	ldd	r20, Y+26	; 0x1a
    443e:	5b 8d       	ldd	r21, Y+27	; 0x1b
    4440:	6c 8d       	ldd	r22, Y+28	; 0x1c
    4442:	7d 8d       	ldd	r23, Y+29	; 0x1d
    4444:	88 81       	ld	r24, Y
    4446:	99 81       	ldd	r25, Y+1	; 0x01
    4448:	0e 94 3e 12 	call	0x247c	; 0x247c <move_window>
    444c:	81 11       	cpse	r24, r1
    444e:	99 c0       	rjmp	.+306    	; 0x4582 <f_sync+0x188>
    4450:	0e 8d       	ldd	r16, Y+30	; 0x1e
    4452:	1f 8d       	ldd	r17, Y+31	; 0x1f
    4454:	f8 01       	movw	r30, r16
    4456:	83 85       	ldd	r24, Z+11	; 0x0b
    4458:	80 62       	ori	r24, 0x20	; 32
    445a:	83 87       	std	Z+11, r24	; 0x0b
    445c:	8a 85       	ldd	r24, Y+10	; 0x0a
    445e:	84 8f       	std	Z+28, r24	; 0x1c
    4460:	8b 85       	ldd	r24, Y+11	; 0x0b
    4462:	85 8f       	std	Z+29, r24	; 0x1d
    4464:	8c 85       	ldd	r24, Y+12	; 0x0c
    4466:	86 8f       	std	Z+30, r24	; 0x1e
    4468:	8d 85       	ldd	r24, Y+13	; 0x0d
    446a:	87 8f       	std	Z+31, r24	; 0x1f
    446c:	8e 85       	ldd	r24, Y+14	; 0x0e
    446e:	9f 85       	ldd	r25, Y+15	; 0x0f
    4470:	a8 89       	ldd	r26, Y+16	; 0x10
    4472:	b9 89       	ldd	r27, Y+17	; 0x11
    4474:	82 8f       	std	Z+26, r24	; 0x1a
    4476:	93 8f       	std	Z+27, r25	; 0x1b
    4478:	cd 01       	movw	r24, r26
    447a:	aa 27       	eor	r26, r26
    447c:	bb 27       	eor	r27, r27
    447e:	84 8b       	std	Z+20, r24	; 0x14
    4480:	95 8b       	std	Z+21, r25	; 0x15
    4482:	0e 94 56 2f 	call	0x5eac	; 0x5eac <get_fattime>
    4486:	f8 01       	movw	r30, r16
    4488:	66 8b       	std	Z+22, r22	; 0x16
    448a:	77 8b       	std	Z+23, r23	; 0x17
    448c:	80 8f       	std	Z+24, r24	; 0x18
    448e:	91 8f       	std	Z+25, r25	; 0x19
    4490:	12 8a       	std	Z+18, r1	; 0x12
    4492:	13 8a       	std	Z+19, r1	; 0x13
    4494:	8c 81       	ldd	r24, Y+4	; 0x04
    4496:	8f 7d       	andi	r24, 0xDF	; 223
    4498:	8c 83       	std	Y+4, r24	; 0x04
    449a:	e8 81       	ld	r30, Y
    449c:	f9 81       	ldd	r31, Y+1	; 0x01
    449e:	81 e0       	ldi	r24, 0x01	; 1
    44a0:	84 83       	std	Z+4, r24	; 0x04
    44a2:	09 90       	ld	r0, Y+
    44a4:	d8 81       	ld	r29, Y
    44a6:	c0 2d       	mov	r28, r0
    44a8:	ce 01       	movw	r24, r28
    44aa:	0e 94 d5 11 	call	0x23aa	; 0x23aa <sync_window>
    44ae:	81 11       	cpse	r24, r1
    44b0:	6a c0       	rjmp	.+212    	; 0x4586 <f_sync+0x18c>
    44b2:	88 81       	ld	r24, Y
    44b4:	83 30       	cpi	r24, 0x03	; 3
    44b6:	09 f0       	breq	.+2      	; 0x44ba <f_sync+0xc0>
    44b8:	53 c0       	rjmp	.+166    	; 0x4560 <f_sync+0x166>
    44ba:	8d 81       	ldd	r24, Y+5	; 0x05
    44bc:	81 30       	cpi	r24, 0x01	; 1
    44be:	09 f0       	breq	.+2      	; 0x44c2 <f_sync+0xc8>
    44c0:	4f c0       	rjmp	.+158    	; 0x4560 <f_sync+0x166>
    44c2:	be 01       	movw	r22, r28
    44c4:	62 5d       	subi	r22, 0xD2	; 210
    44c6:	7f 4f       	sbci	r23, 0xFF	; 255
    44c8:	fb 01       	movw	r30, r22
    44ca:	ce 01       	movw	r24, r28
    44cc:	82 5d       	subi	r24, 0xD2	; 210
    44ce:	9d 4f       	sbci	r25, 0xFD	; 253
    44d0:	11 92       	st	Z+, r1
    44d2:	e8 17       	cp	r30, r24
    44d4:	f9 07       	cpc	r31, r25
    44d6:	e1 f7       	brne	.-8      	; 0x44d0 <f_sync+0xd6>
    44d8:	85 e5       	ldi	r24, 0x55	; 85
    44da:	fe 01       	movw	r30, r28
    44dc:	e4 5d       	subi	r30, 0xD4	; 212
    44de:	fd 4f       	sbci	r31, 0xFD	; 253
    44e0:	80 83       	st	Z, r24
    44e2:	8a ea       	ldi	r24, 0xAA	; 170
    44e4:	31 96       	adiw	r30, 0x01	; 1
    44e6:	80 83       	st	Z, r24
    44e8:	82 e5       	ldi	r24, 0x52	; 82
    44ea:	8e a7       	std	Y+46, r24	; 0x2e
    44ec:	8f a7       	std	Y+47, r24	; 0x2f
    44ee:	81 e6       	ldi	r24, 0x61	; 97
    44f0:	88 ab       	std	Y+48, r24	; 0x30
    44f2:	91 e4       	ldi	r25, 0x41	; 65
    44f4:	99 ab       	std	Y+49, r25	; 0x31
    44f6:	22 e7       	ldi	r18, 0x72	; 114
    44f8:	7b 97       	sbiw	r30, 0x1b	; 27
    44fa:	20 83       	st	Z, r18
    44fc:	31 96       	adiw	r30, 0x01	; 1
    44fe:	20 83       	st	Z, r18
    4500:	31 96       	adiw	r30, 0x01	; 1
    4502:	90 83       	st	Z, r25
    4504:	31 96       	adiw	r30, 0x01	; 1
    4506:	80 83       	st	Z, r24
    4508:	3e 85       	ldd	r19, Y+14	; 0x0e
    450a:	2f 85       	ldd	r18, Y+15	; 0x0f
    450c:	98 89       	ldd	r25, Y+16	; 0x10
    450e:	89 89       	ldd	r24, Y+17	; 0x11
    4510:	31 96       	adiw	r30, 0x01	; 1
    4512:	30 83       	st	Z, r19
    4514:	31 96       	adiw	r30, 0x01	; 1
    4516:	20 83       	st	Z, r18
    4518:	31 96       	adiw	r30, 0x01	; 1
    451a:	90 83       	st	Z, r25
    451c:	31 96       	adiw	r30, 0x01	; 1
    451e:	80 83       	st	Z, r24
    4520:	3a 85       	ldd	r19, Y+10	; 0x0a
    4522:	2b 85       	ldd	r18, Y+11	; 0x0b
    4524:	9c 85       	ldd	r25, Y+12	; 0x0c
    4526:	8d 85       	ldd	r24, Y+13	; 0x0d
    4528:	31 96       	adiw	r30, 0x01	; 1
    452a:	30 83       	st	Z, r19
    452c:	31 96       	adiw	r30, 0x01	; 1
    452e:	20 83       	st	Z, r18
    4530:	31 96       	adiw	r30, 0x01	; 1
    4532:	90 83       	st	Z, r25
    4534:	31 96       	adiw	r30, 0x01	; 1
    4536:	80 83       	st	Z, r24
    4538:	8a 8d       	ldd	r24, Y+26	; 0x1a
    453a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    453c:	ac 8d       	ldd	r26, Y+28	; 0x1c
    453e:	bd 8d       	ldd	r27, Y+29	; 0x1d
    4540:	9c 01       	movw	r18, r24
    4542:	ad 01       	movw	r20, r26
    4544:	2f 5f       	subi	r18, 0xFF	; 255
    4546:	3f 4f       	sbci	r19, 0xFF	; 255
    4548:	4f 4f       	sbci	r20, 0xFF	; 255
    454a:	5f 4f       	sbci	r21, 0xFF	; 255
    454c:	2a a7       	std	Y+42, r18	; 0x2a
    454e:	3b a7       	std	Y+43, r19	; 0x2b
    4550:	4c a7       	std	Y+44, r20	; 0x2c
    4552:	5d a7       	std	Y+45, r21	; 0x2d
    4554:	01 e0       	ldi	r16, 0x01	; 1
    4556:	10 e0       	ldi	r17, 0x00	; 0
    4558:	89 81       	ldd	r24, Y+1	; 0x01
    455a:	0e 94 ed 0a 	call	0x15da	; 0x15da <disk_write>
    455e:	1d 82       	std	Y+5, r1	; 0x05
    4560:	40 e0       	ldi	r20, 0x00	; 0
    4562:	50 e0       	ldi	r21, 0x00	; 0
    4564:	60 e0       	ldi	r22, 0x00	; 0
    4566:	89 81       	ldd	r24, Y+1	; 0x01
    4568:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <disk_ioctl>
    456c:	91 e0       	ldi	r25, 0x01	; 1
    456e:	81 11       	cpse	r24, r1
    4570:	0b c0       	rjmp	.+22     	; 0x4588 <f_sync+0x18e>
    4572:	90 e0       	ldi	r25, 0x00	; 0
    4574:	09 c0       	rjmp	.+18     	; 0x4588 <f_sync+0x18e>
    4576:	98 2f       	mov	r25, r24
    4578:	07 c0       	rjmp	.+14     	; 0x4588 <f_sync+0x18e>
    457a:	90 e0       	ldi	r25, 0x00	; 0
    457c:	05 c0       	rjmp	.+10     	; 0x4588 <f_sync+0x18e>
    457e:	91 e0       	ldi	r25, 0x01	; 1
    4580:	03 c0       	rjmp	.+6      	; 0x4588 <f_sync+0x18e>
    4582:	98 2f       	mov	r25, r24
    4584:	01 c0       	rjmp	.+2      	; 0x4588 <f_sync+0x18e>
    4586:	98 2f       	mov	r25, r24
    4588:	89 2f       	mov	r24, r25
    458a:	df 91       	pop	r29
    458c:	cf 91       	pop	r28
    458e:	1f 91       	pop	r17
    4590:	0f 91       	pop	r16
    4592:	08 95       	ret

00004594 <f_close>:
    4594:	cf 93       	push	r28
    4596:	df 93       	push	r29
    4598:	ec 01       	movw	r28, r24
    459a:	2f df       	rcall	.-418    	; 0x43fa <f_sync>
    459c:	81 11       	cpse	r24, r1
    459e:	07 c0       	rjmp	.+14     	; 0x45ae <f_close+0x1a>
    45a0:	ce 01       	movw	r24, r28
    45a2:	0e 94 e2 12 	call	0x25c4	; 0x25c4 <validate>
    45a6:	81 11       	cpse	r24, r1
    45a8:	02 c0       	rjmp	.+4      	; 0x45ae <f_close+0x1a>
    45aa:	19 82       	std	Y+1, r1	; 0x01
    45ac:	18 82       	st	Y, r1
    45ae:	df 91       	pop	r29
    45b0:	cf 91       	pop	r28
    45b2:	08 95       	ret

000045b4 <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
    45b4:	2f 92       	push	r2
    45b6:	3f 92       	push	r3
    45b8:	4f 92       	push	r4
    45ba:	5f 92       	push	r5
    45bc:	6f 92       	push	r6
    45be:	7f 92       	push	r7
    45c0:	8f 92       	push	r8
    45c2:	9f 92       	push	r9
    45c4:	af 92       	push	r10
    45c6:	bf 92       	push	r11
    45c8:	cf 92       	push	r12
    45ca:	df 92       	push	r13
    45cc:	ef 92       	push	r14
    45ce:	ff 92       	push	r15
    45d0:	0f 93       	push	r16
    45d2:	1f 93       	push	r17
    45d4:	cf 93       	push	r28
    45d6:	df 93       	push	r29
    45d8:	cd b7       	in	r28, 0x3d	; 61
    45da:	de b7       	in	r29, 0x3e	; 62
    45dc:	cc 55       	subi	r28, 0x5C	; 92
    45de:	d1 09       	sbc	r29, r1
    45e0:	0f b6       	in	r0, 0x3f	; 63
    45e2:	f8 94       	cli
    45e4:	de bf       	out	0x3e, r29	; 62
    45e6:	0f be       	out	0x3f, r0	; 63
    45e8:	cd bf       	out	0x3d, r28	; 61
    45ea:	e5 96       	adiw	r28, 0x35	; 53
    45ec:	ee ac       	ldd	r14, Y+62	; 0x3e
    45ee:	ff ac       	ldd	r15, Y+63	; 0x3f
    45f0:	e5 97       	sbiw	r28, 0x35	; 53
	DWORD v;
	TCHAR c, d, s[16], *p;
	putbuff pb;


	pb.fp = fp;				/* Initialize output buffer */
    45f2:	e3 96       	adiw	r28, 0x33	; 51
    45f4:	8e ad       	ldd	r24, Y+62	; 0x3e
    45f6:	9f ad       	ldd	r25, Y+63	; 0x3f
    45f8:	e3 97       	sbiw	r28, 0x33	; 51
    45fa:	9c 8b       	std	Y+20, r25	; 0x14
    45fc:	8b 8b       	std	Y+19, r24	; 0x13
	pb.nchr = pb.idx = 0;
    45fe:	1e 8a       	std	Y+22, r1	; 0x16
    4600:	1d 8a       	std	Y+21, r1	; 0x15
    4602:	18 8e       	std	Y+24, r1	; 0x18
    4604:	1f 8a       	std	Y+23, r1	; 0x17

	va_start(arp, fmt);
    4606:	2e 01       	movw	r4, r28
    4608:	25 e7       	ldi	r18, 0x75	; 117
    460a:	42 0e       	add	r4, r18
    460c:	51 1c       	adc	r5, r1
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
		if (d == 'D' && (v & 0x80000000)) {
			v = 0 - v;
			f |= 8;
		}
		i = 0;
    460e:	21 2c       	mov	r2, r1
		do {
			d = (TCHAR)(v % r); v /= r;
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
    4610:	0f 2e       	mov	r0, r31
    4612:	f7 e0       	ldi	r31, 0x07	; 7
    4614:	3f 2e       	mov	r3, r31
    4616:	f0 2d       	mov	r31, r0
	pb.nchr = pb.idx = 0;

	va_start(arp, fmt);

	for (;;) {
		c = *fmt++;
    4618:	d7 01       	movw	r26, r14
    461a:	6c 91       	ld	r22, X
		if (c == 0) break;			/* End of string */
    461c:	66 23       	and	r22, r22
    461e:	09 f4       	brne	.+2      	; 0x4622 <f_printf+0x6e>
    4620:	8e c1       	rjmp	.+796    	; 0x493e <f_printf+0x38a>
		if (c != '%') {				/* Non escape character */
    4622:	65 32       	cpi	r22, 0x25	; 37
    4624:	39 f0       	breq	.+14     	; 0x4634 <f_printf+0x80>
	pb.nchr = pb.idx = 0;

	va_start(arp, fmt);

	for (;;) {
		c = *fmt++;
    4626:	bf ef       	ldi	r27, 0xFF	; 255
    4628:	eb 1a       	sub	r14, r27
    462a:	fb 0a       	sbc	r15, r27
		if (c == 0) break;			/* End of string */
		if (c != '%') {				/* Non escape character */
			putc_bfd(&pb, c);
    462c:	ce 01       	movw	r24, r28
    462e:	43 96       	adiw	r24, 0x13	; 19
    4630:	a0 de       	rcall	.-704    	; 0x4372 <putc_bfd>
			continue;
    4632:	f2 cf       	rjmp	.-28     	; 0x4618 <f_printf+0x64>
		}
		w = f = 0;
		c = *fmt++;
    4634:	f7 01       	movw	r30, r14
    4636:	d1 80       	ldd	r13, Z+1	; 0x01
		if (c == '0') {				/* Flag: '0' padding */
    4638:	f0 e3       	ldi	r31, 0x30	; 48
    463a:	df 12       	cpse	r13, r31
    463c:	09 c0       	rjmp	.+18     	; 0x4650 <f_printf+0x9c>
			f = 1; c = *fmt++;
    463e:	d7 01       	movw	r26, r14
    4640:	12 96       	adiw	r26, 0x02	; 2
    4642:	dc 90       	ld	r13, X
    4644:	f7 01       	movw	r30, r14
    4646:	33 96       	adiw	r30, 0x03	; 3
    4648:	7f 01       	movw	r14, r30
    464a:	77 24       	eor	r7, r7
    464c:	73 94       	inc	r7
    464e:	11 c0       	rjmp	.+34     	; 0x4672 <f_printf+0xbe>
		} else {
			if (c == '-') {			/* Flag: left justified */
    4650:	fd e2       	ldi	r31, 0x2D	; 45
    4652:	df 16       	cp	r13, r31
    4654:	29 f0       	breq	.+10     	; 0x4660 <f_printf+0xac>
		if (c != '%') {				/* Non escape character */
			putc_bfd(&pb, c);
			continue;
		}
		w = f = 0;
		c = *fmt++;
    4656:	22 e0       	ldi	r18, 0x02	; 2
    4658:	e2 0e       	add	r14, r18
    465a:	f1 1c       	adc	r15, r1
		if (c == 0) break;			/* End of string */
		if (c != '%') {				/* Non escape character */
			putc_bfd(&pb, c);
			continue;
		}
		w = f = 0;
    465c:	71 2c       	mov	r7, r1
    465e:	09 c0       	rjmp	.+18     	; 0x4672 <f_printf+0xbe>
		c = *fmt++;
		if (c == '0') {				/* Flag: '0' padding */
			f = 1; c = *fmt++;
		} else {
			if (c == '-') {			/* Flag: left justified */
				f = 2; c = *fmt++;
    4660:	d7 01       	movw	r26, r14
    4662:	12 96       	adiw	r26, 0x02	; 2
    4664:	dc 90       	ld	r13, X
    4666:	f7 01       	movw	r30, r14
    4668:	33 96       	adiw	r30, 0x03	; 3
    466a:	7f 01       	movw	r14, r30
    466c:	68 94       	set
    466e:	77 24       	eor	r7, r7
    4670:	71 f8       	bld	r7, 1
			}
		}
		while (IsDigit(c)) {		/* Precision */
    4672:	80 ed       	ldi	r24, 0xD0	; 208
    4674:	8d 0d       	add	r24, r13
    4676:	8a 30       	cpi	r24, 0x0A	; 10
    4678:	f0 f4       	brcc	.+60     	; 0x46b6 <f_printf+0x102>
    467a:	02 2d       	mov	r16, r2
    467c:	10 e0       	ldi	r17, 0x00	; 0
    467e:	8d 2d       	mov	r24, r13
			w = w * 10 + c - '0';
    4680:	98 01       	movw	r18, r16
    4682:	22 0f       	add	r18, r18
    4684:	33 1f       	adc	r19, r19
    4686:	00 0f       	add	r16, r16
    4688:	11 1f       	adc	r17, r17
    468a:	00 0f       	add	r16, r16
    468c:	11 1f       	adc	r17, r17
    468e:	00 0f       	add	r16, r16
    4690:	11 1f       	adc	r17, r17
    4692:	02 0f       	add	r16, r18
    4694:	13 1f       	adc	r17, r19
    4696:	08 0f       	add	r16, r24
    4698:	11 1d       	adc	r17, r1
    469a:	00 53       	subi	r16, 0x30	; 48
    469c:	11 09       	sbc	r17, r1
			c = *fmt++;
    469e:	ff ef       	ldi	r31, 0xFF	; 255
    46a0:	ef 1a       	sub	r14, r31
    46a2:	ff 0a       	sbc	r15, r31
    46a4:	f7 01       	movw	r30, r14
    46a6:	31 97       	sbiw	r30, 0x01	; 1
    46a8:	80 81       	ld	r24, Z
		} else {
			if (c == '-') {			/* Flag: left justified */
				f = 2; c = *fmt++;
			}
		}
		while (IsDigit(c)) {		/* Precision */
    46aa:	90 ed       	ldi	r25, 0xD0	; 208
    46ac:	98 0f       	add	r25, r24
    46ae:	9a 30       	cpi	r25, 0x0A	; 10
    46b0:	38 f3       	brcs	.-50     	; 0x4680 <f_printf+0xcc>
    46b2:	d8 2e       	mov	r13, r24
    46b4:	02 c0       	rjmp	.+4      	; 0x46ba <f_printf+0x106>
    46b6:	02 2d       	mov	r16, r2
    46b8:	10 e0       	ldi	r17, 0x00	; 0
			w = w * 10 + c - '0';
			c = *fmt++;
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
    46ba:	8d 2d       	mov	r24, r13
    46bc:	8f 7d       	andi	r24, 0xDF	; 223
    46be:	8c 34       	cpi	r24, 0x4C	; 76
    46c0:	41 f4       	brne	.+16     	; 0x46d2 <f_printf+0x11e>
			f |= 4; c = *fmt++;
    46c2:	27 2d       	mov	r18, r7
    46c4:	24 60       	ori	r18, 0x04	; 4
    46c6:	72 2e       	mov	r7, r18
    46c8:	d7 01       	movw	r26, r14
    46ca:	dc 90       	ld	r13, X
    46cc:	f7 01       	movw	r30, r14
    46ce:	31 96       	adiw	r30, 0x01	; 1
    46d0:	7f 01       	movw	r14, r30
		}
		if (!c) break;
    46d2:	dd 20       	and	r13, r13
    46d4:	09 f4       	brne	.+2      	; 0x46d8 <f_printf+0x124>
    46d6:	33 c1       	rjmp	.+614    	; 0x493e <f_printf+0x38a>
		d = c;
		if (IsLower(d)) d -= 0x20;
    46d8:	8f e9       	ldi	r24, 0x9F	; 159
    46da:	8d 0d       	add	r24, r13
    46dc:	8a 31       	cpi	r24, 0x1A	; 26
    46de:	18 f4       	brcc	.+6      	; 0x46e6 <f_printf+0x132>
    46e0:	30 ee       	ldi	r19, 0xE0	; 224
    46e2:	3d 0d       	add	r19, r13
    46e4:	01 c0       	rjmp	.+2      	; 0x46e8 <f_printf+0x134>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
			f |= 4; c = *fmt++;
		}
		if (!c) break;
		d = c;
    46e6:	3d 2d       	mov	r19, r13
		if (IsLower(d)) d -= 0x20;
		switch (d) {				/* Type is... */
    46e8:	83 2f       	mov	r24, r19
    46ea:	90 e0       	ldi	r25, 0x00	; 0
    46ec:	fc 01       	movw	r30, r24
    46ee:	e2 54       	subi	r30, 0x42	; 66
    46f0:	f1 09       	sbc	r31, r1
    46f2:	e7 31       	cpi	r30, 0x17	; 23
    46f4:	f1 05       	cpc	r31, r1
    46f6:	08 f0       	brcs	.+2      	; 0x46fa <f_printf+0x146>
    46f8:	58 c0       	rjmp	.+176    	; 0x47aa <f_printf+0x1f6>
    46fa:	e3 58       	subi	r30, 0x83	; 131
    46fc:	ff 4f       	sbci	r31, 0xFF	; 255
    46fe:	0c 94 55 49 	jmp	0x92aa	; 0x92aa <__tablejump2__>
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
    4702:	f2 01       	movw	r30, r4
    4704:	a0 80       	ld	r10, Z
    4706:	b1 80       	ldd	r11, Z+1	; 0x01
    4708:	f2 e0       	ldi	r31, 0x02	; 2
    470a:	4f 0e       	add	r4, r31
    470c:	51 1c       	adc	r5, r1
			for (j = 0; p[j]; j++) ;
    470e:	d5 01       	movw	r26, r10
    4710:	6c 91       	ld	r22, X
    4712:	66 23       	and	r22, r22
    4714:	09 f4       	brne	.+2      	; 0x4718 <f_printf+0x164>
    4716:	38 c1       	rjmp	.+624    	; 0x4988 <f_printf+0x3d4>
    4718:	f5 01       	movw	r30, r10
    471a:	31 96       	adiw	r30, 0x01	; 1
    471c:	c2 2c       	mov	r12, r2
    471e:	d1 2c       	mov	r13, r1
    4720:	bf ef       	ldi	r27, 0xFF	; 255
    4722:	cb 1a       	sub	r12, r27
    4724:	db 0a       	sbc	r13, r27
    4726:	81 91       	ld	r24, Z+
    4728:	81 11       	cpse	r24, r1
    472a:	fa cf       	rjmp	.-12     	; 0x4720 <f_printf+0x16c>
    472c:	2a c1       	rjmp	.+596    	; 0x4982 <f_printf+0x3ce>
    472e:	c2 2c       	mov	r12, r2
    4730:	d1 2c       	mov	r13, r1
			if (!(f & 2)) {
				while (j++ < w) putc_bfd(&pb, ' ');
    4732:	66 24       	eor	r6, r6
    4734:	63 94       	inc	r6
    4736:	71 2c       	mov	r7, r1
    4738:	46 01       	movw	r8, r12
    473a:	60 e2       	ldi	r22, 0x20	; 32
    473c:	ce 01       	movw	r24, r28
    473e:	43 96       	adiw	r24, 0x13	; 19
    4740:	18 de       	rcall	.-976    	; 0x4372 <putc_bfd>
    4742:	ef ef       	ldi	r30, 0xFF	; 255
    4744:	8e 1a       	sub	r8, r30
    4746:	9e 0a       	sbc	r9, r30
    4748:	80 16       	cp	r8, r16
    474a:	91 06       	cpc	r9, r17
    474c:	b0 f3       	brcs	.-20     	; 0x473a <f_printf+0x186>
    474e:	93 01       	movw	r18, r6
    4750:	2c 19       	sub	r18, r12
    4752:	3d 09       	sbc	r19, r13
    4754:	69 01       	movw	r12, r18
    4756:	c0 0e       	add	r12, r16
    4758:	d1 1e       	adc	r13, r17
			}
			while (*p) putc_bfd(&pb, *p++);
    475a:	d5 01       	movw	r26, r10
    475c:	6c 91       	ld	r22, X
    475e:	66 23       	and	r22, r22
    4760:	59 f0       	breq	.+22     	; 0x4778 <f_printf+0x1c4>
    4762:	bf ef       	ldi	r27, 0xFF	; 255
    4764:	ab 1a       	sub	r10, r27
    4766:	bb 0a       	sbc	r11, r27
    4768:	ce 01       	movw	r24, r28
    476a:	43 96       	adiw	r24, 0x13	; 19
    476c:	02 de       	rcall	.-1020   	; 0x4372 <putc_bfd>
    476e:	f5 01       	movw	r30, r10
    4770:	61 91       	ld	r22, Z+
    4772:	5f 01       	movw	r10, r30
    4774:	61 11       	cpse	r22, r1
    4776:	f8 cf       	rjmp	.-16     	; 0x4768 <f_printf+0x1b4>
			while (j++ < w) putc_bfd(&pb, ' ');
    4778:	c0 16       	cp	r12, r16
    477a:	d1 06       	cpc	r13, r17
    477c:	08 f0       	brcs	.+2      	; 0x4780 <f_printf+0x1cc>
    477e:	4c cf       	rjmp	.-360    	; 0x4618 <f_printf+0x64>
    4780:	60 e2       	ldi	r22, 0x20	; 32
    4782:	ce 01       	movw	r24, r28
    4784:	43 96       	adiw	r24, 0x13	; 19
    4786:	f5 dd       	rcall	.-1046   	; 0x4372 <putc_bfd>
    4788:	ff ef       	ldi	r31, 0xFF	; 255
    478a:	cf 1a       	sub	r12, r31
    478c:	df 0a       	sbc	r13, r31
    478e:	c0 16       	cp	r12, r16
    4790:	d1 06       	cpc	r13, r17
    4792:	b0 f3       	brcs	.-20     	; 0x4780 <f_printf+0x1cc>
    4794:	41 cf       	rjmp	.-382    	; 0x4618 <f_printf+0x64>
			continue;
		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
    4796:	82 01       	movw	r16, r4
    4798:	0e 5f       	subi	r16, 0xFE	; 254
    479a:	1f 4f       	sbci	r17, 0xFF	; 255
    479c:	d2 01       	movw	r26, r4
    479e:	6c 91       	ld	r22, X
    47a0:	ce 01       	movw	r24, r28
    47a2:	43 96       	adiw	r24, 0x13	; 19
    47a4:	e6 dd       	rcall	.-1076   	; 0x4372 <putc_bfd>
    47a6:	28 01       	movw	r4, r16
    47a8:	37 cf       	rjmp	.-402    	; 0x4618 <f_printf+0x64>
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
		case 'X' :					/* Hexdecimal */
			r = 16; break;
		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
    47aa:	6d 2d       	mov	r22, r13
    47ac:	ce 01       	movw	r24, r28
    47ae:	43 96       	adiw	r24, 0x13	; 19
    47b0:	e0 dd       	rcall	.-1088   	; 0x4372 <putc_bfd>
    47b2:	32 cf       	rjmp	.-412    	; 0x4618 <f_printf+0x64>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
    47b4:	72 fe       	sbrs	r7, 2
    47b6:	0e c0       	rjmp	.+28     	; 0x47d4 <f_printf+0x220>
			r = 2; break;
		case 'O' :					/* Octal */
			r = 8; break;
		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
    47b8:	aa e0       	ldi	r26, 0x0A	; 10
    47ba:	01 c0       	rjmp	.+2      	; 0x47be <f_printf+0x20a>
		case 'X' :					/* Hexdecimal */
			r = 16; break;
    47bc:	a0 e1       	ldi	r26, 0x10	; 16
		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
    47be:	f2 01       	movw	r30, r4
    47c0:	60 81       	ld	r22, Z
    47c2:	71 81       	ldd	r23, Z+1	; 0x01
    47c4:	82 81       	ldd	r24, Z+2	; 0x02
    47c6:	93 81       	ldd	r25, Z+3	; 0x03
    47c8:	b4 e0       	ldi	r27, 0x04	; 4
    47ca:	4b 0e       	add	r4, r27
    47cc:	51 1c       	adc	r5, r1
		if (d == 'D' && (v & 0x80000000)) {
    47ce:	34 34       	cpi	r19, 0x44	; 68
    47d0:	31 f5       	brne	.+76     	; 0x481e <f_printf+0x26a>
    47d2:	19 c0       	rjmp	.+50     	; 0x4806 <f_printf+0x252>
			r = 2; break;
		case 'O' :					/* Octal */
			r = 8; break;
		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
    47d4:	aa e0       	ldi	r26, 0x0A	; 10
		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
    47d6:	34 34       	cpi	r19, 0x44	; 68
    47d8:	61 f4       	brne	.+24     	; 0x47f2 <f_printf+0x23e>
    47da:	f2 01       	movw	r30, r4
    47dc:	60 81       	ld	r22, Z
    47de:	71 81       	ldd	r23, Z+1	; 0x01
    47e0:	07 2e       	mov	r0, r23
    47e2:	00 0c       	add	r0, r0
    47e4:	88 0b       	sbc	r24, r24
    47e6:	99 0b       	sbc	r25, r25
    47e8:	92 01       	movw	r18, r4
    47ea:	2e 5f       	subi	r18, 0xFE	; 254
    47ec:	3f 4f       	sbci	r19, 0xFF	; 255
    47ee:	29 01       	movw	r4, r18
    47f0:	0a c0       	rjmp	.+20     	; 0x4806 <f_printf+0x252>
    47f2:	f2 01       	movw	r30, r4
    47f4:	60 81       	ld	r22, Z
    47f6:	71 81       	ldd	r23, Z+1	; 0x01
    47f8:	80 e0       	ldi	r24, 0x00	; 0
    47fa:	90 e0       	ldi	r25, 0x00	; 0
    47fc:	92 01       	movw	r18, r4
    47fe:	2e 5f       	subi	r18, 0xFE	; 254
    4800:	3f 4f       	sbci	r19, 0xFF	; 255
    4802:	29 01       	movw	r4, r18
    4804:	0c c0       	rjmp	.+24     	; 0x481e <f_printf+0x26a>
		if (d == 'D' && (v & 0x80000000)) {
    4806:	99 23       	and	r25, r25
    4808:	54 f4       	brge	.+20     	; 0x481e <f_printf+0x26a>
			v = 0 - v;
    480a:	90 95       	com	r25
    480c:	80 95       	com	r24
    480e:	70 95       	com	r23
    4810:	61 95       	neg	r22
    4812:	7f 4f       	sbci	r23, 0xFF	; 255
    4814:	8f 4f       	sbci	r24, 0xFF	; 255
    4816:	9f 4f       	sbci	r25, 0xFF	; 255
			f |= 8;
    4818:	37 2d       	mov	r19, r7
    481a:	38 60       	ori	r19, 0x08	; 8
    481c:	73 2e       	mov	r7, r19
    481e:	ae 01       	movw	r20, r28
    4820:	4d 5f       	subi	r20, 0xFD	; 253
    4822:	5f 4f       	sbci	r21, 0xFF	; 255
    4824:	5a 01       	movw	r10, r20
		}
		i = 0;
    4826:	82 2c       	mov	r8, r2
    4828:	91 2c       	mov	r9, r1
		do {
			d = (TCHAR)(v % r); v /= r;
    482a:	2a 2f       	mov	r18, r26
    482c:	30 e0       	ldi	r19, 0x00	; 0
    482e:	40 e0       	ldi	r20, 0x00	; 0
    4830:	50 e0       	ldi	r21, 0x00	; 0
    4832:	6d 96       	adiw	r28, 0x1d	; 29
    4834:	2c af       	std	Y+60, r18	; 0x3c
    4836:	3d af       	std	Y+61, r19	; 0x3d
    4838:	4e af       	std	Y+62, r20	; 0x3e
    483a:	5f af       	std	Y+63, r21	; 0x3f
    483c:	6d 97       	sbiw	r28, 0x1d	; 29
    483e:	97 01       	movw	r18, r14
    4840:	78 01       	movw	r14, r16
    4842:	1d 2d       	mov	r17, r13
    4844:	69 01       	movw	r12, r18
    4846:	6d 96       	adiw	r28, 0x1d	; 29
    4848:	2c ad       	ldd	r18, Y+60	; 0x3c
    484a:	3d ad       	ldd	r19, Y+61	; 0x3d
    484c:	4e ad       	ldd	r20, Y+62	; 0x3e
    484e:	5f ad       	ldd	r21, Y+63	; 0x3f
    4850:	6d 97       	sbiw	r28, 0x1d	; 29
    4852:	0e 94 33 49 	call	0x9266	; 0x9266 <__udivmodsi4>
    4856:	f6 2f       	mov	r31, r22
    4858:	e6 2f       	mov	r30, r22
    485a:	62 2f       	mov	r22, r18
    485c:	73 2f       	mov	r23, r19
    485e:	84 2f       	mov	r24, r20
    4860:	95 2f       	mov	r25, r21
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
    4862:	fa 30       	cpi	r31, 0x0A	; 10
    4864:	30 f0       	brcs	.+12     	; 0x4872 <f_printf+0x2be>
    4866:	18 37       	cpi	r17, 0x78	; 120
    4868:	11 f0       	breq	.+4      	; 0x486e <f_printf+0x2ba>
    486a:	e3 2d       	mov	r30, r3
    486c:	01 c0       	rjmp	.+2      	; 0x4870 <f_printf+0x2bc>
    486e:	e7 e2       	ldi	r30, 0x27	; 39
    4870:	ef 0f       	add	r30, r31
			s[i++] = d + '0';
    4872:	3f ef       	ldi	r19, 0xFF	; 255
    4874:	83 1a       	sub	r8, r19
    4876:	93 0a       	sbc	r9, r19
    4878:	e0 5d       	subi	r30, 0xD0	; 208
    487a:	d5 01       	movw	r26, r10
    487c:	ed 93       	st	X+, r30
    487e:	5d 01       	movw	r10, r26
		} while (v && i < sizeof s / sizeof s[0]);
    4880:	61 15       	cp	r22, r1
    4882:	71 05       	cpc	r23, r1
    4884:	81 05       	cpc	r24, r1
    4886:	91 05       	cpc	r25, r1
    4888:	21 f0       	breq	.+8      	; 0x4892 <f_printf+0x2de>
    488a:	b0 e1       	ldi	r27, 0x10	; 16
    488c:	8b 16       	cp	r8, r27
    488e:	91 04       	cpc	r9, r1
    4890:	d1 f6       	brne	.-76     	; 0x4846 <f_printf+0x292>
    4892:	87 01       	movw	r16, r14
    4894:	76 01       	movw	r14, r12
		if (f & 8) s[i++] = '-';
    4896:	73 fe       	sbrs	r7, 3
    4898:	0c c0       	rjmp	.+24     	; 0x48b2 <f_printf+0x2fe>
    489a:	e3 e0       	ldi	r30, 0x03	; 3
    489c:	f0 e0       	ldi	r31, 0x00	; 0
    489e:	ec 0f       	add	r30, r28
    48a0:	fd 1f       	adc	r31, r29
    48a2:	e8 0d       	add	r30, r8
    48a4:	f9 1d       	adc	r31, r9
    48a6:	2d e2       	ldi	r18, 0x2D	; 45
    48a8:	20 83       	st	Z, r18
    48aa:	a4 01       	movw	r20, r8
    48ac:	4f 5f       	subi	r20, 0xFF	; 255
    48ae:	5f 4f       	sbci	r21, 0xFF	; 255
    48b0:	4a 01       	movw	r8, r20
		j = i; d = (f & 1) ? '0' : ' ';
    48b2:	70 fc       	sbrc	r7, 0
    48b4:	04 c0       	rjmp	.+8      	; 0x48be <f_printf+0x30a>
    48b6:	68 94       	set
    48b8:	66 24       	eor	r6, r6
    48ba:	65 f8       	bld	r6, 5
    48bc:	04 c0       	rjmp	.+8      	; 0x48c6 <f_printf+0x312>
    48be:	0f 2e       	mov	r0, r31
    48c0:	f0 e3       	ldi	r31, 0x30	; 48
    48c2:	6f 2e       	mov	r6, r31
    48c4:	f0 2d       	mov	r31, r0
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
    48c6:	71 fc       	sbrc	r7, 1
    48c8:	15 c0       	rjmp	.+42     	; 0x48f4 <f_printf+0x340>
    48ca:	64 01       	movw	r12, r8
    48cc:	5f ef       	ldi	r21, 0xFF	; 255
    48ce:	c5 1a       	sub	r12, r21
    48d0:	d5 0a       	sbc	r13, r21
    48d2:	80 16       	cp	r8, r16
    48d4:	91 06       	cpc	r9, r17
    48d6:	08 f4       	brcc	.+2      	; 0x48da <f_printf+0x326>
    48d8:	65 c0       	rjmp	.+202    	; 0x49a4 <f_printf+0x3f0>
    48da:	0d c0       	rjmp	.+26     	; 0x48f6 <f_printf+0x342>
    48dc:	8f ef       	ldi	r24, 0xFF	; 255
    48de:	c8 1a       	sub	r12, r24
    48e0:	d8 0a       	sbc	r13, r24
    48e2:	c0 16       	cp	r12, r16
    48e4:	d1 06       	cpc	r13, r17
    48e6:	08 f4       	brcc	.+2      	; 0x48ea <f_printf+0x336>
    48e8:	58 c0       	rjmp	.+176    	; 0x499a <f_printf+0x3e6>
    48ea:	68 01       	movw	r12, r16
    48ec:	9f ef       	ldi	r25, 0xFF	; 255
    48ee:	c9 1a       	sub	r12, r25
    48f0:	d9 0a       	sbc	r13, r25
    48f2:	01 c0       	rjmp	.+2      	; 0x48f6 <f_printf+0x342>
			d = (TCHAR)(v % r); v /= r;
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
			s[i++] = d + '0';
		} while (v && i < sizeof s / sizeof s[0]);
		if (f & 8) s[i++] = '-';
		j = i; d = (f & 1) ? '0' : ' ';
    48f4:	64 01       	movw	r12, r8
    48f6:	0f 2e       	mov	r0, r31
    48f8:	f3 e0       	ldi	r31, 0x03	; 3
    48fa:	af 2e       	mov	r10, r31
    48fc:	b1 2c       	mov	r11, r1
    48fe:	f0 2d       	mov	r31, r0
    4900:	ac 0e       	add	r10, r28
    4902:	bd 1e       	adc	r11, r29
    4904:	a8 0c       	add	r10, r8
    4906:	b9 1c       	adc	r11, r9
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
		do putc_bfd(&pb, s[--i]); while (i);
    4908:	a1 e0       	ldi	r26, 0x01	; 1
    490a:	8a 1a       	sub	r8, r26
    490c:	91 08       	sbc	r9, r1
    490e:	f5 01       	movw	r30, r10
    4910:	62 91       	ld	r22, -Z
    4912:	5f 01       	movw	r10, r30
    4914:	ce 01       	movw	r24, r28
    4916:	43 96       	adiw	r24, 0x13	; 19
    4918:	2c dd       	rcall	.-1448   	; 0x4372 <putc_bfd>
    491a:	81 14       	cp	r8, r1
    491c:	91 04       	cpc	r9, r1
    491e:	a1 f7       	brne	.-24     	; 0x4908 <f_printf+0x354>
		while (j++ < w) putc_bfd(&pb, d);
    4920:	c0 16       	cp	r12, r16
    4922:	d1 06       	cpc	r13, r17
    4924:	08 f0       	brcs	.+2      	; 0x4928 <f_printf+0x374>
    4926:	78 ce       	rjmp	.-784    	; 0x4618 <f_printf+0x64>
    4928:	66 2d       	mov	r22, r6
    492a:	ce 01       	movw	r24, r28
    492c:	43 96       	adiw	r24, 0x13	; 19
    492e:	21 dd       	rcall	.-1470   	; 0x4372 <putc_bfd>
    4930:	ff ef       	ldi	r31, 0xFF	; 255
    4932:	cf 1a       	sub	r12, r31
    4934:	df 0a       	sbc	r13, r31
    4936:	c0 16       	cp	r12, r16
    4938:	d1 06       	cpc	r13, r17
    493a:	b0 f3       	brcs	.-20     	; 0x4928 <f_printf+0x374>
    493c:	6d ce       	rjmp	.-806    	; 0x4618 <f_printf+0x64>
	}

	va_end(arp);

	if (   pb.idx >= 0		/* Flush buffered characters to the file */
    493e:	4d 89       	ldd	r20, Y+21	; 0x15
    4940:	5e 89       	ldd	r21, Y+22	; 0x16
    4942:	55 23       	and	r21, r21
    4944:	ac f0       	brlt	.+42     	; 0x4970 <f_printf+0x3bc>
		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
    4946:	9e 01       	movw	r18, r28
    4948:	2f 5f       	subi	r18, 0xFF	; 255
    494a:	3f 4f       	sbci	r19, 0xFF	; 255
    494c:	be 01       	movw	r22, r28
    494e:	67 5e       	subi	r22, 0xE7	; 231
    4950:	7f 4f       	sbci	r23, 0xFF	; 255
    4952:	8b 89       	ldd	r24, Y+19	; 0x13
    4954:	9c 89       	ldd	r25, Y+20	; 0x14
    4956:	13 db       	rcall	.-2522   	; 0x3f7e <f_write>
    4958:	81 11       	cpse	r24, r1
    495a:	0d c0       	rjmp	.+26     	; 0x4976 <f_printf+0x3c2>
		&& (UINT)pb.idx == nw) return pb.nchr;
    495c:	2d 89       	ldd	r18, Y+21	; 0x15
    495e:	3e 89       	ldd	r19, Y+22	; 0x16
    4960:	89 81       	ldd	r24, Y+1	; 0x01
    4962:	9a 81       	ldd	r25, Y+2	; 0x02
    4964:	28 17       	cp	r18, r24
    4966:	39 07       	cpc	r19, r25
    4968:	49 f4       	brne	.+18     	; 0x497c <f_printf+0x3c8>
    496a:	8f 89       	ldd	r24, Y+23	; 0x17
    496c:	98 8d       	ldd	r25, Y+24	; 0x18
    496e:	52 c0       	rjmp	.+164    	; 0x4a14 <f_printf+0x460>
	return EOF;
    4970:	8f ef       	ldi	r24, 0xFF	; 255
    4972:	9f ef       	ldi	r25, 0xFF	; 255
    4974:	4f c0       	rjmp	.+158    	; 0x4a14 <f_printf+0x460>
    4976:	8f ef       	ldi	r24, 0xFF	; 255
    4978:	9f ef       	ldi	r25, 0xFF	; 255
    497a:	4c c0       	rjmp	.+152    	; 0x4a14 <f_printf+0x460>
    497c:	8f ef       	ldi	r24, 0xFF	; 255
    497e:	9f ef       	ldi	r25, 0xFF	; 255
    4980:	49 c0       	rjmp	.+146    	; 0x4a14 <f_printf+0x460>
		if (IsLower(d)) d -= 0x20;
		switch (d) {				/* Type is... */
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
			for (j = 0; p[j]; j++) ;
			if (!(f & 2)) {
    4982:	71 fe       	sbrs	r7, 1
    4984:	19 c0       	rjmp	.+50     	; 0x49b8 <f_printf+0x404>
    4986:	ed ce       	rjmp	.-550    	; 0x4762 <f_printf+0x1ae>
    4988:	71 fe       	sbrs	r7, 1
    498a:	1f c0       	rjmp	.+62     	; 0x49ca <f_printf+0x416>
		d = c;
		if (IsLower(d)) d -= 0x20;
		switch (d) {				/* Type is... */
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
			for (j = 0; p[j]; j++) ;
    498c:	c2 2c       	mov	r12, r2
    498e:	d1 2c       	mov	r13, r1
    4990:	f3 ce       	rjmp	.-538    	; 0x4778 <f_printf+0x1c4>
		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
    4992:	72 fc       	sbrc	r7, 2
    4994:	13 cf       	rjmp	.-474    	; 0x47bc <f_printf+0x208>
			r = 8; break;
		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
		case 'X' :					/* Hexdecimal */
			r = 16; break;
    4996:	a0 e1       	ldi	r26, 0x10	; 16
    4998:	2c cf       	rjmp	.-424    	; 0x47f2 <f_printf+0x23e>
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
			s[i++] = d + '0';
		} while (v && i < sizeof s / sizeof s[0]);
		if (f & 8) s[i++] = '-';
		j = i; d = (f & 1) ? '0' : ' ';
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
    499a:	66 2d       	mov	r22, r6
    499c:	ce 01       	movw	r24, r28
    499e:	43 96       	adiw	r24, 0x13	; 19
    49a0:	e8 dc       	rcall	.-1584   	; 0x4372 <putc_bfd>
    49a2:	9c cf       	rjmp	.-200    	; 0x48dc <f_printf+0x328>
    49a4:	66 2d       	mov	r22, r6
    49a6:	ce 01       	movw	r24, r28
    49a8:	43 96       	adiw	r24, 0x13	; 19
    49aa:	e3 dc       	rcall	.-1594   	; 0x4372 <putc_bfd>
    49ac:	64 01       	movw	r12, r8
    49ae:	96 cf       	rjmp	.-212    	; 0x48dc <f_printf+0x328>
			p = va_arg(arp, TCHAR*);
			for (j = 0; p[j]; j++) ;
			if (!(f & 2)) {
				while (j++ < w) putc_bfd(&pb, ' ');
			}
			while (*p) putc_bfd(&pb, *p++);
    49b0:	d5 01       	movw	r26, r10
    49b2:	6c 91       	ld	r22, X
		switch (d) {				/* Type is... */
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
			for (j = 0; p[j]; j++) ;
			if (!(f & 2)) {
				while (j++ < w) putc_bfd(&pb, ' ');
    49b4:	63 01       	movw	r12, r6
    49b6:	d5 ce       	rjmp	.-598    	; 0x4762 <f_printf+0x1ae>
    49b8:	36 01       	movw	r6, r12
    49ba:	bf ef       	ldi	r27, 0xFF	; 255
    49bc:	6b 1a       	sub	r6, r27
    49be:	7b 0a       	sbc	r7, r27
    49c0:	c0 16       	cp	r12, r16
    49c2:	d1 06       	cpc	r13, r17
    49c4:	08 f4       	brcc	.+2      	; 0x49c8 <f_printf+0x414>
    49c6:	b8 ce       	rjmp	.-656    	; 0x4738 <f_printf+0x184>
    49c8:	f3 cf       	rjmp	.-26     	; 0x49b0 <f_printf+0x3fc>
    49ca:	01 15       	cp	r16, r1
    49cc:	11 05       	cpc	r17, r1
    49ce:	09 f0       	breq	.+2      	; 0x49d2 <f_printf+0x41e>
    49d0:	ae ce       	rjmp	.-676    	; 0x472e <f_printf+0x17a>
    49d2:	cc 24       	eor	r12, r12
    49d4:	c3 94       	inc	r12
    49d6:	d1 2c       	mov	r13, r1
    49d8:	cf ce       	rjmp	.-610    	; 0x4778 <f_printf+0x1c4>
		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
    49da:	f2 01       	movw	r30, r4
    49dc:	60 81       	ld	r22, Z
    49de:	71 81       	ldd	r23, Z+1	; 0x01
    49e0:	82 81       	ldd	r24, Z+2	; 0x02
    49e2:	93 81       	ldd	r25, Z+3	; 0x03
    49e4:	92 01       	movw	r18, r4
    49e6:	2c 5f       	subi	r18, 0xFC	; 252
    49e8:	3f 4f       	sbci	r19, 0xFF	; 255
    49ea:	29 01       	movw	r4, r18
			while (j++ < w) putc_bfd(&pb, ' ');
			continue;
		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
		case 'B' :					/* Binary */
			r = 2; break;
    49ec:	a2 e0       	ldi	r26, 0x02	; 2
    49ee:	17 cf       	rjmp	.-466    	; 0x481e <f_printf+0x26a>
		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
    49f0:	72 fc       	sbrc	r7, 2
    49f2:	f3 cf       	rjmp	.-26     	; 0x49da <f_printf+0x426>
			while (j++ < w) putc_bfd(&pb, ' ');
			continue;
		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
		case 'B' :					/* Binary */
			r = 2; break;
    49f4:	a2 e0       	ldi	r26, 0x02	; 2
    49f6:	ef ce       	rjmp	.-546    	; 0x47d6 <f_printf+0x222>
		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
    49f8:	d2 01       	movw	r26, r4
    49fa:	6d 91       	ld	r22, X+
    49fc:	7d 91       	ld	r23, X+
    49fe:	8d 91       	ld	r24, X+
    4a00:	9c 91       	ld	r25, X
    4a02:	f2 01       	movw	r30, r4
    4a04:	34 96       	adiw	r30, 0x04	; 4
    4a06:	2f 01       	movw	r4, r30
		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
		case 'B' :					/* Binary */
			r = 2; break;
		case 'O' :					/* Octal */
			r = 8; break;
    4a08:	a8 e0       	ldi	r26, 0x08	; 8
    4a0a:	09 cf       	rjmp	.-494    	; 0x481e <f_printf+0x26a>
		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
    4a0c:	72 fc       	sbrc	r7, 2
    4a0e:	f4 cf       	rjmp	.-24     	; 0x49f8 <f_printf+0x444>
		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
		case 'B' :					/* Binary */
			r = 2; break;
		case 'O' :					/* Octal */
			r = 8; break;
    4a10:	a8 e0       	ldi	r26, 0x08	; 8
    4a12:	ef ce       	rjmp	.-546    	; 0x47f2 <f_printf+0x23e>

	if (   pb.idx >= 0		/* Flush buffered characters to the file */
		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
		&& (UINT)pb.idx == nw) return pb.nchr;
	return EOF;
}
    4a14:	c4 5a       	subi	r28, 0xA4	; 164
    4a16:	df 4f       	sbci	r29, 0xFF	; 255
    4a18:	0f b6       	in	r0, 0x3f	; 63
    4a1a:	f8 94       	cli
    4a1c:	de bf       	out	0x3e, r29	; 62
    4a1e:	0f be       	out	0x3f, r0	; 63
    4a20:	cd bf       	out	0x3d, r28	; 61
    4a22:	df 91       	pop	r29
    4a24:	cf 91       	pop	r28
    4a26:	1f 91       	pop	r17
    4a28:	0f 91       	pop	r16
    4a2a:	ff 90       	pop	r15
    4a2c:	ef 90       	pop	r14
    4a2e:	df 90       	pop	r13
    4a30:	cf 90       	pop	r12
    4a32:	bf 90       	pop	r11
    4a34:	af 90       	pop	r10
    4a36:	9f 90       	pop	r9
    4a38:	8f 90       	pop	r8
    4a3a:	7f 90       	pop	r7
    4a3c:	6f 90       	pop	r6
    4a3e:	5f 90       	pop	r5
    4a40:	4f 90       	pop	r4
    4a42:	3f 90       	pop	r3
    4a44:	2f 90       	pop	r2
    4a46:	08 95       	ret

00004a48 <_ZN3I2CC1Ev>:
void I2C::twi_ack(){
	TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);
}
void I2C::twi_nack(){
	TWCR = (1<<TWINT) | (1<<TWEN);
	TWCR &= ~(1<<TWEA);
    4a48:	82 e0       	ldi	r24, 0x02	; 2
    4a4a:	80 93 b8 00 	sts	0x00B8, r24
    4a4e:	08 95       	ret

00004a50 <_ZN3I2CD1Ev>:
    4a50:	08 95       	ret

00004a52 <_ZN3I2C9twi_startEv>:
    4a52:	84 ea       	ldi	r24, 0xA4	; 164
    4a54:	80 93 bc 00 	sts	0x00BC, r24
    4a58:	08 95       	ret

00004a5a <_ZN3I2C8twi_stopEv>:
    4a5a:	84 e9       	ldi	r24, 0x94	; 148
    4a5c:	80 93 bc 00 	sts	0x00BC, r24
    4a60:	08 95       	ret

00004a62 <_ZN3I2C9twi_writeEh>:
}

void I2C::twi_write(uint8_t data){
	while(!(TWCR & (1<<TWINT)));
    4a62:	ec eb       	ldi	r30, 0xBC	; 188
    4a64:	f0 e0       	ldi	r31, 0x00	; 0
    4a66:	80 81       	ld	r24, Z
    4a68:	88 23       	and	r24, r24
    4a6a:	ec f7       	brge	.-6      	; 0x4a66 <_ZN3I2C9twi_writeEh+0x4>
	TWDR = data;
    4a6c:	60 93 bb 00 	sts	0x00BB, r22
	TWCR = (1<<TWINT) | (1<<TWEN);
    4a70:	84 e8       	ldi	r24, 0x84	; 132
    4a72:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));
    4a76:	ec eb       	ldi	r30, 0xBC	; 188
    4a78:	f0 e0       	ldi	r31, 0x00	; 0
    4a7a:	80 81       	ld	r24, Z
    4a7c:	88 23       	and	r24, r24
    4a7e:	ec f7       	brge	.-6      	; 0x4a7a <_ZN3I2C9twi_writeEh+0x18>
}
    4a80:	08 95       	ret

00004a82 <_ZN3I2C8twi_readEh>:

uint8_t I2C::twi_read(uint8_t ack){
	if (ack)
    4a82:	66 23       	and	r22, r22
    4a84:	21 f0       	breq	.+8      	; 0x4a8e <_ZN3I2C8twi_readEh+0xc>
	{
		TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    4a86:	84 ec       	ldi	r24, 0xC4	; 196
    4a88:	80 93 bc 00 	sts	0x00BC, r24
    4a8c:	03 c0       	rjmp	.+6      	; 0x4a94 <_ZN3I2C8twi_readEh+0x12>
	}
	else{
		TWCR = (1<<TWINT) | (1<<TWEN);
    4a8e:	84 e8       	ldi	r24, 0x84	; 132
    4a90:	80 93 bc 00 	sts	0x00BC, r24
	}
	
	while(!(TWCR & (1<<TWINT)));
    4a94:	ec eb       	ldi	r30, 0xBC	; 188
    4a96:	f0 e0       	ldi	r31, 0x00	; 0
    4a98:	80 81       	ld	r24, Z
    4a9a:	88 23       	and	r24, r24
    4a9c:	ec f7       	brge	.-6      	; 0x4a98 <_ZN3I2C8twi_readEh+0x16>
	return TWDR;
    4a9e:	80 91 bb 00 	lds	r24, 0x00BB
    4aa2:	08 95       	ret

00004aa4 <_ZN9InterfaceC1Ev>:
		default:
		abfrage = 0;
		break;
	}
	return abfrage;
}
    4aa4:	2a b1       	in	r18, 0x0a	; 10
    4aa6:	20 66       	ori	r18, 0x60	; 96
    4aa8:	2a b9       	out	0x0a, r18	; 10
    4aaa:	28 b1       	in	r18, 0x08	; 8
    4aac:	23 7f       	andi	r18, 0xF3	; 243
    4aae:	28 b9       	out	0x08, r18	; 8
    4ab0:	27 b1       	in	r18, 0x07	; 7
    4ab2:	2c 60       	ori	r18, 0x0C	; 12
    4ab4:	27 b9       	out	0x07, r18	; 7
    4ab6:	2a b1       	in	r18, 0x0a	; 10
    4ab8:	23 7e       	andi	r18, 0xE3	; 227
    4aba:	2a b9       	out	0x0a, r18	; 10
    4abc:	fc 01       	movw	r30, r24
    4abe:	0c 96       	adiw	r24, 0x0c	; 12
    4ac0:	11 92       	st	Z+, r1
    4ac2:	e8 17       	cp	r30, r24
    4ac4:	f9 07       	cpc	r31, r25
    4ac6:	e1 f7       	brne	.-8      	; 0x4ac0 <_ZN9InterfaceC1Ev+0x1c>
    4ac8:	08 95       	ret

00004aca <_ZN9InterfaceD1Ev>:
    4aca:	08 95       	ret

00004acc <_ZN9Interface7paradebEPVhhPh>:
    4acc:	fb 01       	movw	r30, r22
    4ace:	80 81       	ld	r24, Z
    4ad0:	90 e0       	ldi	r25, 0x00	; 0
    4ad2:	04 2e       	mov	r0, r20
    4ad4:	02 c0       	rjmp	.+4      	; 0x4ada <_ZN9Interface7paradebEPVhhPh+0xe>
    4ad6:	95 95       	asr	r25
    4ad8:	87 95       	ror	r24
    4ada:	0a 94       	dec	r0
    4adc:	e2 f7       	brpl	.-8      	; 0x4ad6 <_ZN9Interface7paradebEPVhhPh+0xa>
    4ade:	80 ff       	sbrs	r24, 0
    4ae0:	05 c0       	rjmp	.+10     	; 0x4aec <_ZN9Interface7paradebEPVhhPh+0x20>
    4ae2:	81 e0       	ldi	r24, 0x01	; 1
    4ae4:	f9 01       	movw	r30, r18
    4ae6:	80 83       	st	Z, r24
    4ae8:	80 e0       	ldi	r24, 0x00	; 0
    4aea:	08 95       	ret
    4aec:	f9 01       	movw	r30, r18
    4aee:	80 81       	ld	r24, Z
    4af0:	81 30       	cpi	r24, 0x01	; 1
    4af2:	71 f4       	brne	.+28     	; 0x4b10 <_ZN9Interface7paradebEPVhhPh+0x44>
    4af4:	fb 01       	movw	r30, r22
    4af6:	60 81       	ld	r22, Z
    4af8:	70 e0       	ldi	r23, 0x00	; 0
    4afa:	fb 01       	movw	r30, r22
    4afc:	02 c0       	rjmp	.+4      	; 0x4b02 <_ZN9Interface7paradebEPVhhPh+0x36>
    4afe:	f5 95       	asr	r31
    4b00:	e7 95       	ror	r30
    4b02:	4a 95       	dec	r20
    4b04:	e2 f7       	brpl	.-8      	; 0x4afe <_ZN9Interface7paradebEPVhhPh+0x32>
    4b06:	e0 fd       	sbrc	r30, 0
    4b08:	03 c0       	rjmp	.+6      	; 0x4b10 <_ZN9Interface7paradebEPVhhPh+0x44>
    4b0a:	f9 01       	movw	r30, r18
    4b0c:	10 82       	st	Z, r1
    4b0e:	08 95       	ret
    4b10:	f9 01       	movw	r30, r18
    4b12:	10 82       	st	Z, r1
    4b14:	80 e0       	ldi	r24, 0x00	; 0
    4b16:	08 95       	ret

00004b18 <_ZN9Interface6TasterEv>:

uint8_t Interface::Taster(){
    4b18:	1f 93       	push	r17
    4b1a:	cf 93       	push	r28
    4b1c:	df 93       	push	r29
    4b1e:	ec 01       	movw	r28, r24
	uint8_t taste = ' ';
	
	//erste Zeile
	PORTC |= (1<<PORTC3);
    4b20:	43 9a       	sbi	0x08, 3	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    4b22:	82 e0       	ldi	r24, 0x02	; 2
    4b24:	8a 95       	dec	r24
    4b26:	f1 f7       	brne	.-4      	; 0x4b24 <_ZN9Interface6TasterEv+0xc>
    4b28:	00 c0       	rjmp	.+0      	; 0x4b2a <_ZN9Interface6TasterEv+0x12>
	_delay_us(1);
	if(paradeb(&PIND,PIND4,&stat[2])){//debounce(&PIND,PIND4)){
    4b2a:	9e 01       	movw	r18, r28
    4b2c:	2e 5f       	subi	r18, 0xFE	; 254
    4b2e:	3f 4f       	sbci	r19, 0xFF	; 255
    4b30:	44 e0       	ldi	r20, 0x04	; 4
    4b32:	69 e2       	ldi	r22, 0x29	; 41
    4b34:	70 e0       	ldi	r23, 0x00	; 0
    4b36:	ce 01       	movw	r24, r28
    4b38:	c9 df       	rcall	.-110    	; 0x4acc <_ZN9Interface7paradebEPVhhPh>
    4b3a:	81 11       	cpse	r24, r1
    4b3c:	14 c0       	rjmp	.+40     	; 0x4b66 <_ZN9Interface6TasterEv+0x4e>
		taste = '3';
	}
	else if (paradeb(&PIND,PIND3,&stat[1]))//debounce(&PIND,PIND3))
    4b3e:	9e 01       	movw	r18, r28
    4b40:	2f 5f       	subi	r18, 0xFF	; 255
    4b42:	3f 4f       	sbci	r19, 0xFF	; 255
    4b44:	43 e0       	ldi	r20, 0x03	; 3
    4b46:	69 e2       	ldi	r22, 0x29	; 41
    4b48:	70 e0       	ldi	r23, 0x00	; 0
    4b4a:	ce 01       	movw	r24, r28
    4b4c:	bf df       	rcall	.-130    	; 0x4acc <_ZN9Interface7paradebEPVhhPh>
    4b4e:	81 11       	cpse	r24, r1
    4b50:	0c c0       	rjmp	.+24     	; 0x4b6a <_ZN9Interface6TasterEv+0x52>
	{
		taste = '2';
	}
	else if (paradeb(&PIND,PIND2,&stat[0]))//debounce(&PIND,PIND2))
    4b52:	9e 01       	movw	r18, r28
    4b54:	42 e0       	ldi	r20, 0x02	; 2
    4b56:	69 e2       	ldi	r22, 0x29	; 41
    4b58:	70 e0       	ldi	r23, 0x00	; 0
    4b5a:	ce 01       	movw	r24, r28
    4b5c:	b7 df       	rcall	.-146    	; 0x4acc <_ZN9Interface7paradebEPVhhPh>
    4b5e:	88 23       	and	r24, r24
    4b60:	31 f0       	breq	.+12     	; 0x4b6e <_ZN9Interface6TasterEv+0x56>
	{
		taste = '1';
    4b62:	11 e3       	ldi	r17, 0x31	; 49
    4b64:	05 c0       	rjmp	.+10     	; 0x4b70 <_ZN9Interface6TasterEv+0x58>
	
	//erste Zeile
	PORTC |= (1<<PORTC3);
	_delay_us(1);
	if(paradeb(&PIND,PIND4,&stat[2])){//debounce(&PIND,PIND4)){
		taste = '3';
    4b66:	13 e3       	ldi	r17, 0x33	; 51
    4b68:	03 c0       	rjmp	.+6      	; 0x4b70 <_ZN9Interface6TasterEv+0x58>
	}
	else if (paradeb(&PIND,PIND3,&stat[1]))//debounce(&PIND,PIND3))
	{
		taste = '2';
    4b6a:	12 e3       	ldi	r17, 0x32	; 50
    4b6c:	01 c0       	rjmp	.+2      	; 0x4b70 <_ZN9Interface6TasterEv+0x58>
	}
	return abfrage;
}

uint8_t Interface::Taster(){
	uint8_t taste = ' ';
    4b6e:	10 e2       	ldi	r17, 0x20	; 32
	}
	else if (paradeb(&PIND,PIND2,&stat[0]))//debounce(&PIND,PIND2))
	{
		taste = '1';
	}
	PORTC &= ~(1<<PORTC3);
    4b70:	43 98       	cbi	0x08, 3	; 8
	
	//zweite Zeile
	PORTC |= (1<<PORTC2);
    4b72:	42 9a       	sbi	0x08, 2	; 8
    4b74:	82 e0       	ldi	r24, 0x02	; 2
    4b76:	8a 95       	dec	r24
    4b78:	f1 f7       	brne	.-4      	; 0x4b76 <_ZN9Interface6TasterEv+0x5e>
    4b7a:	00 c0       	rjmp	.+0      	; 0x4b7c <_ZN9Interface6TasterEv+0x64>
	_delay_us(1);
	if(paradeb(&PIND,PIND4,&stat[5])){//debounce(&PIND,PIND4)){
    4b7c:	9e 01       	movw	r18, r28
    4b7e:	2b 5f       	subi	r18, 0xFB	; 251
    4b80:	3f 4f       	sbci	r19, 0xFF	; 255
    4b82:	44 e0       	ldi	r20, 0x04	; 4
    4b84:	69 e2       	ldi	r22, 0x29	; 41
    4b86:	70 e0       	ldi	r23, 0x00	; 0
    4b88:	ce 01       	movw	r24, r28
    4b8a:	a0 df       	rcall	.-192    	; 0x4acc <_ZN9Interface7paradebEPVhhPh>
    4b8c:	81 11       	cpse	r24, r1
    4b8e:	16 c0       	rjmp	.+44     	; 0x4bbc <_ZN9Interface6TasterEv+0xa4>
		taste = '6';
	}
	else if (paradeb(&PIND,PIND3,&stat[4]))//debounce(&PIND,PIND3))
    4b90:	9e 01       	movw	r18, r28
    4b92:	2c 5f       	subi	r18, 0xFC	; 252
    4b94:	3f 4f       	sbci	r19, 0xFF	; 255
    4b96:	43 e0       	ldi	r20, 0x03	; 3
    4b98:	69 e2       	ldi	r22, 0x29	; 41
    4b9a:	70 e0       	ldi	r23, 0x00	; 0
    4b9c:	ce 01       	movw	r24, r28
    4b9e:	96 df       	rcall	.-212    	; 0x4acc <_ZN9Interface7paradebEPVhhPh>
    4ba0:	81 11       	cpse	r24, r1
    4ba2:	0e c0       	rjmp	.+28     	; 0x4bc0 <_ZN9Interface6TasterEv+0xa8>
	{
		taste = '5';
	}
	else if (paradeb(&PIND,PIND2,&stat[3]))//debounce(&PIND,PIND2))
    4ba4:	9e 01       	movw	r18, r28
    4ba6:	2d 5f       	subi	r18, 0xFD	; 253
    4ba8:	3f 4f       	sbci	r19, 0xFF	; 255
    4baa:	42 e0       	ldi	r20, 0x02	; 2
    4bac:	69 e2       	ldi	r22, 0x29	; 41
    4bae:	70 e0       	ldi	r23, 0x00	; 0
    4bb0:	ce 01       	movw	r24, r28
    4bb2:	8c df       	rcall	.-232    	; 0x4acc <_ZN9Interface7paradebEPVhhPh>
    4bb4:	88 23       	and	r24, r24
    4bb6:	29 f0       	breq	.+10     	; 0x4bc2 <_ZN9Interface6TasterEv+0xaa>
	{
		taste = '4';
    4bb8:	14 e3       	ldi	r17, 0x34	; 52
    4bba:	03 c0       	rjmp	.+6      	; 0x4bc2 <_ZN9Interface6TasterEv+0xaa>
	
	//zweite Zeile
	PORTC |= (1<<PORTC2);
	_delay_us(1);
	if(paradeb(&PIND,PIND4,&stat[5])){//debounce(&PIND,PIND4)){
		taste = '6';
    4bbc:	16 e3       	ldi	r17, 0x36	; 54
    4bbe:	01 c0       	rjmp	.+2      	; 0x4bc2 <_ZN9Interface6TasterEv+0xaa>
	}
	else if (paradeb(&PIND,PIND3,&stat[4]))//debounce(&PIND,PIND3))
	{
		taste = '5';
    4bc0:	15 e3       	ldi	r17, 0x35	; 53
	}
	else if (paradeb(&PIND,PIND2,&stat[3]))//debounce(&PIND,PIND2))
	{
		taste = '4';
	}
	PORTC &= ~(1<<PORTC2);
    4bc2:	42 98       	cbi	0x08, 2	; 8
	
	//dritte Zeile
	PORTD |= (1<<PORTD6);
    4bc4:	5e 9a       	sbi	0x0b, 6	; 11
    4bc6:	82 e0       	ldi	r24, 0x02	; 2
    4bc8:	8a 95       	dec	r24
    4bca:	f1 f7       	brne	.-4      	; 0x4bc8 <_ZN9Interface6TasterEv+0xb0>
    4bcc:	00 c0       	rjmp	.+0      	; 0x4bce <_ZN9Interface6TasterEv+0xb6>
	_delay_us(1);
	if(paradeb(&PIND,PIND4,&stat[8])){//debounce(&PIND,PIND4)){
    4bce:	9e 01       	movw	r18, r28
    4bd0:	28 5f       	subi	r18, 0xF8	; 248
    4bd2:	3f 4f       	sbci	r19, 0xFF	; 255
    4bd4:	44 e0       	ldi	r20, 0x04	; 4
    4bd6:	69 e2       	ldi	r22, 0x29	; 41
    4bd8:	70 e0       	ldi	r23, 0x00	; 0
    4bda:	ce 01       	movw	r24, r28
    4bdc:	77 df       	rcall	.-274    	; 0x4acc <_ZN9Interface7paradebEPVhhPh>
    4bde:	81 11       	cpse	r24, r1
    4be0:	16 c0       	rjmp	.+44     	; 0x4c0e <_ZN9Interface6TasterEv+0xf6>
		taste = '9';
	}
	else if (paradeb(&PIND,PIND3,&stat[7]))//debounce(&PIND,PIND3))
    4be2:	9e 01       	movw	r18, r28
    4be4:	29 5f       	subi	r18, 0xF9	; 249
    4be6:	3f 4f       	sbci	r19, 0xFF	; 255
    4be8:	43 e0       	ldi	r20, 0x03	; 3
    4bea:	69 e2       	ldi	r22, 0x29	; 41
    4bec:	70 e0       	ldi	r23, 0x00	; 0
    4bee:	ce 01       	movw	r24, r28
    4bf0:	6d df       	rcall	.-294    	; 0x4acc <_ZN9Interface7paradebEPVhhPh>
    4bf2:	81 11       	cpse	r24, r1
    4bf4:	0e c0       	rjmp	.+28     	; 0x4c12 <_ZN9Interface6TasterEv+0xfa>
	{
		taste = '8';
	}
	else if (paradeb(&PIND,PIND2,&stat[6]))//debounce(&PIND,PIND2))
    4bf6:	9e 01       	movw	r18, r28
    4bf8:	2a 5f       	subi	r18, 0xFA	; 250
    4bfa:	3f 4f       	sbci	r19, 0xFF	; 255
    4bfc:	42 e0       	ldi	r20, 0x02	; 2
    4bfe:	69 e2       	ldi	r22, 0x29	; 41
    4c00:	70 e0       	ldi	r23, 0x00	; 0
    4c02:	ce 01       	movw	r24, r28
    4c04:	63 df       	rcall	.-314    	; 0x4acc <_ZN9Interface7paradebEPVhhPh>
    4c06:	88 23       	and	r24, r24
    4c08:	29 f0       	breq	.+10     	; 0x4c14 <_ZN9Interface6TasterEv+0xfc>
	{
		taste = '7';
    4c0a:	17 e3       	ldi	r17, 0x37	; 55
    4c0c:	03 c0       	rjmp	.+6      	; 0x4c14 <_ZN9Interface6TasterEv+0xfc>
	
	//dritte Zeile
	PORTD |= (1<<PORTD6);
	_delay_us(1);
	if(paradeb(&PIND,PIND4,&stat[8])){//debounce(&PIND,PIND4)){
		taste = '9';
    4c0e:	19 e3       	ldi	r17, 0x39	; 57
    4c10:	01 c0       	rjmp	.+2      	; 0x4c14 <_ZN9Interface6TasterEv+0xfc>
	}
	else if (paradeb(&PIND,PIND3,&stat[7]))//debounce(&PIND,PIND3))
	{
		taste = '8';
    4c12:	18 e3       	ldi	r17, 0x38	; 56
	}
	else if (paradeb(&PIND,PIND2,&stat[6]))//debounce(&PIND,PIND2))
	{
		taste = '7';
	}
	PORTD &= ~(1<<PORTD6);
    4c14:	5e 98       	cbi	0x0b, 6	; 11
	
	//vierte Zeile
	PORTD |= (1<<PORTD5);
    4c16:	5d 9a       	sbi	0x0b, 5	; 11
    4c18:	82 e0       	ldi	r24, 0x02	; 2
    4c1a:	8a 95       	dec	r24
    4c1c:	f1 f7       	brne	.-4      	; 0x4c1a <_ZN9Interface6TasterEv+0x102>
    4c1e:	00 c0       	rjmp	.+0      	; 0x4c20 <_ZN9Interface6TasterEv+0x108>
	_delay_us(1);
	if(paradeb(&PIND,PIND4,&stat[11])){//debounce(&PIND,PIND4)){
    4c20:	9e 01       	movw	r18, r28
    4c22:	25 5f       	subi	r18, 0xF5	; 245
    4c24:	3f 4f       	sbci	r19, 0xFF	; 255
    4c26:	44 e0       	ldi	r20, 0x04	; 4
    4c28:	69 e2       	ldi	r22, 0x29	; 41
    4c2a:	70 e0       	ldi	r23, 0x00	; 0
    4c2c:	ce 01       	movw	r24, r28
    4c2e:	4e df       	rcall	.-356    	; 0x4acc <_ZN9Interface7paradebEPVhhPh>
    4c30:	81 11       	cpse	r24, r1
    4c32:	16 c0       	rjmp	.+44     	; 0x4c60 <_ZN9Interface6TasterEv+0x148>
		taste = '#';
	}
	else if (paradeb(&PIND,PIND3,&stat[10]))//debounce(&PIND,PIND3))
    4c34:	9e 01       	movw	r18, r28
    4c36:	26 5f       	subi	r18, 0xF6	; 246
    4c38:	3f 4f       	sbci	r19, 0xFF	; 255
    4c3a:	43 e0       	ldi	r20, 0x03	; 3
    4c3c:	69 e2       	ldi	r22, 0x29	; 41
    4c3e:	70 e0       	ldi	r23, 0x00	; 0
    4c40:	ce 01       	movw	r24, r28
    4c42:	44 df       	rcall	.-376    	; 0x4acc <_ZN9Interface7paradebEPVhhPh>
    4c44:	81 11       	cpse	r24, r1
    4c46:	0e c0       	rjmp	.+28     	; 0x4c64 <_ZN9Interface6TasterEv+0x14c>
	{
		taste = '0';
	}
	else if (paradeb(&PIND,PIND2,&stat[9]))//debounce(&PIND,PIND2))
    4c48:	9e 01       	movw	r18, r28
    4c4a:	27 5f       	subi	r18, 0xF7	; 247
    4c4c:	3f 4f       	sbci	r19, 0xFF	; 255
    4c4e:	42 e0       	ldi	r20, 0x02	; 2
    4c50:	69 e2       	ldi	r22, 0x29	; 41
    4c52:	70 e0       	ldi	r23, 0x00	; 0
    4c54:	ce 01       	movw	r24, r28
    4c56:	3a df       	rcall	.-396    	; 0x4acc <_ZN9Interface7paradebEPVhhPh>
    4c58:	88 23       	and	r24, r24
    4c5a:	29 f0       	breq	.+10     	; 0x4c66 <_ZN9Interface6TasterEv+0x14e>
	{
		taste = '*';
    4c5c:	1a e2       	ldi	r17, 0x2A	; 42
    4c5e:	03 c0       	rjmp	.+6      	; 0x4c66 <_ZN9Interface6TasterEv+0x14e>
	
	//vierte Zeile
	PORTD |= (1<<PORTD5);
	_delay_us(1);
	if(paradeb(&PIND,PIND4,&stat[11])){//debounce(&PIND,PIND4)){
		taste = '#';
    4c60:	13 e2       	ldi	r17, 0x23	; 35
    4c62:	01 c0       	rjmp	.+2      	; 0x4c66 <_ZN9Interface6TasterEv+0x14e>
	}
	else if (paradeb(&PIND,PIND3,&stat[10]))//debounce(&PIND,PIND3))
	{
		taste = '0';
    4c64:	10 e3       	ldi	r17, 0x30	; 48
	}
	else if (paradeb(&PIND,PIND2,&stat[9]))//debounce(&PIND,PIND2))
	{
		taste = '*';
	}
	PORTD &= ~(1<<PORTD5);
    4c66:	5d 98       	cbi	0x0b, 5	; 11
	
	return taste;
}
    4c68:	81 2f       	mov	r24, r17
    4c6a:	df 91       	pop	r29
    4c6c:	cf 91       	pop	r28
    4c6e:	1f 91       	pop	r17
    4c70:	08 95       	ret

00004c72 <_ZN9Interface7unifiedEv>:

uint8_t Interface::unified(){
	switch (Taster())
    4c72:	52 df       	rcall	.-348    	; 0x4b18 <_ZN9Interface6TasterEv>
    4c74:	48 2f       	mov	r20, r24
    4c76:	50 e0       	ldi	r21, 0x00	; 0
    4c78:	fa 01       	movw	r30, r20
    4c7a:	b3 97       	sbiw	r30, 0x23	; 35
    4c7c:	e7 31       	cpi	r30, 0x17	; 23
    4c7e:	f1 05       	cpc	r31, r1
    4c80:	c0 f4       	brcc	.+48     	; 0x4cb2 <_ZN9Interface7unifiedEv+0x40>
    4c82:	ec 56       	subi	r30, 0x6C	; 108
    4c84:	ff 4f       	sbci	r31, 0xFF	; 255
    4c86:	0c 94 55 49 	jmp	0x92aa	; 0x92aa <__tablejump2__>
	{
	case '1':
		return 'B';
		break;
	case '2':
		return 'u';
    4c8a:	85 e7       	ldi	r24, 0x75	; 117
    4c8c:	08 95       	ret
		break;
	case '3':
		return 'A';
    4c8e:	81 e4       	ldi	r24, 0x41	; 65
    4c90:	08 95       	ret
		break;
	case '4':
		return 'l';
    4c92:	8c e6       	ldi	r24, 0x6C	; 108
    4c94:	08 95       	ret
		break;
	case '5':
		return 'o';
    4c96:	8f e6       	ldi	r24, 0x6F	; 111
    4c98:	08 95       	ret
		break;
	case '6':
		return 'r';
    4c9a:	82 e7       	ldi	r24, 0x72	; 114
    4c9c:	08 95       	ret
		break;
	case '7':
		return 'Y';
    4c9e:	89 e5       	ldi	r24, 0x59	; 89
    4ca0:	08 95       	ret
		break;
	case '8':
		return 'd';
    4ca2:	84 e6       	ldi	r24, 0x64	; 100
    4ca4:	08 95       	ret
		break;
	case '9':
		return 'X';
    4ca6:	88 e5       	ldi	r24, 0x58	; 88
    4ca8:	08 95       	ret
		break;
	case '*':
		return 'e';
    4caa:	85 e6       	ldi	r24, 0x65	; 101
    4cac:	08 95       	ret
		break;
	case '0':
		return '0';
		break;
	case '#':
		return 'm';
    4cae:	8d e6       	ldi	r24, 0x6D	; 109
    4cb0:	08 95       	ret
		break;
	default:
		return ' ';
    4cb2:	80 e2       	ldi	r24, 0x20	; 32
    4cb4:	08 95       	ret

uint8_t Interface::unified(){
	switch (Taster())
	{
	case '1':
		return 'B';
    4cb6:	82 e4       	ldi	r24, 0x42	; 66
		break;
	default:
		return ' ';
		break;
	}
}
    4cb8:	08 95       	ret

00004cba <_ZN9Interface17ZahlenausTastaturEv>:

uint8_t Interface::ZahlenausTastatur(){
    4cba:	cf 93       	push	r28
    4cbc:	df 93       	push	r29
    4cbe:	ec 01       	movw	r28, r24
	while(true){
		uint8_t taste = Taster();
    4cc0:	ce 01       	movw	r24, r28
    4cc2:	2a df       	rcall	.-428    	; 0x4b18 <_ZN9Interface6TasterEv>
		if(taste>='0' && taste<='9'){
    4cc4:	80 53       	subi	r24, 0x30	; 48
    4cc6:	8a 30       	cpi	r24, 0x0A	; 10
    4cc8:	d8 f7       	brcc	.-10     	; 0x4cc0 <_ZN9Interface17ZahlenausTastaturEv+0x6>
			return taste - '0';
		}
	}
}
    4cca:	df 91       	pop	r29
    4ccc:	cf 91       	pop	r28
    4cce:	08 95       	ret

00004cd0 <_ZN7LSM303DD1Ev>:
	//FIFO Bypass Mode
	ACCBypassmode();
}

void LSM303D::ACCStreammode(){
	LSM303_command(FIFO_CTRL,(1<<FM1));
    4cd0:	46 96       	adiw	r24, 0x16	; 22
    4cd2:	be ce       	rjmp	.-644    	; 0x4a50 <_ZN3I2CD1Ev>
    4cd4:	08 95       	ret

00004cd6 <_ZN7LSM303D14LSM303_commandEhh>:
    4cd6:	0f 93       	push	r16
    4cd8:	1f 93       	push	r17
    4cda:	cf 93       	push	r28
    4cdc:	df 93       	push	r29
    4cde:	06 2f       	mov	r16, r22
    4ce0:	14 2f       	mov	r17, r20
    4ce2:	ec 01       	movw	r28, r24
    4ce4:	66 96       	adiw	r28, 0x16	; 22
    4ce6:	ce 01       	movw	r24, r28
    4ce8:	b4 de       	rcall	.-664    	; 0x4a52 <_ZN3I2C9twi_startEv>
    4cea:	6a e3       	ldi	r22, 0x3A	; 58
    4cec:	ce 01       	movw	r24, r28
    4cee:	b9 de       	rcall	.-654    	; 0x4a62 <_ZN3I2C9twi_writeEh>
    4cf0:	60 2f       	mov	r22, r16
    4cf2:	ce 01       	movw	r24, r28
    4cf4:	b6 de       	rcall	.-660    	; 0x4a62 <_ZN3I2C9twi_writeEh>
    4cf6:	61 2f       	mov	r22, r17
    4cf8:	ce 01       	movw	r24, r28
    4cfa:	b3 de       	rcall	.-666    	; 0x4a62 <_ZN3I2C9twi_writeEh>
    4cfc:	ce 01       	movw	r24, r28
    4cfe:	ad de       	rcall	.-678    	; 0x4a5a <_ZN3I2C8twi_stopEv>
    4d00:	df 91       	pop	r29
    4d02:	cf 91       	pop	r28
    4d04:	1f 91       	pop	r17
    4d06:	0f 91       	pop	r16
    4d08:	08 95       	ret

00004d0a <_ZN7LSM303D13ACCBypassmodeEv>:
}

void LSM303D::ACCBypassmode(){
	LSM303_command(FIFO_CTRL,0x00);
    4d0a:	40 e0       	ldi	r20, 0x00	; 0
    4d0c:	6e e2       	ldi	r22, 0x2E	; 46
    4d0e:	e3 cf       	rjmp	.-58     	; 0x4cd6 <_ZN7LSM303D14LSM303_commandEhh>
    4d10:	08 95       	ret

00004d12 <_ZN7LSM303D9acce_initEv>:
// default destructor
LSM303D::~LSM303D()
{
} //~LSM303D

void LSM303D::acce_init(){
    4d12:	cf 93       	push	r28
    4d14:	df 93       	push	r29
    4d16:	ec 01       	movw	r28, r24
	//ACC Activ und 25Hz ohne Block dataread
	LSM303_command(CTRL1,(1<<AXEN)|(1<<AYEN)|(1<<AZEN)|(1<<AODR2));
    4d18:	47 e4       	ldi	r20, 0x47	; 71
    4d1a:	60 e2       	ldi	r22, 0x20	; 32
    4d1c:	dc df       	rcall	.-72     	; 0x4cd6 <_ZN7LSM303D14LSM303_commandEhh>
	
	//ACC fuer +-2g
	LSM303_command(CTRL2,0x00);
    4d1e:	40 e0       	ldi	r20, 0x00	; 0
    4d20:	61 e2       	ldi	r22, 0x21	; 33
    4d22:	ce 01       	movw	r24, r28
    4d24:	d8 df       	rcall	.-80     	; 0x4cd6 <_ZN7LSM303D14LSM303_commandEhh>
	
	//Temperatursensor an
	LSM303_command(CTRL5,(1<<TEMP_EN));
    4d26:	40 e8       	ldi	r20, 0x80	; 128
    4d28:	64 e2       	ldi	r22, 0x24	; 36
    4d2a:	ce 01       	movw	r24, r28
    4d2c:	d4 df       	rcall	.-88     	; 0x4cd6 <_ZN7LSM303D14LSM303_commandEhh>
	
	//FIFO Bypass Mode
	ACCBypassmode();
    4d2e:	ce 01       	movw	r24, r28
    4d30:	ec df       	rcall	.-40     	; 0x4d0a <_ZN7LSM303D13ACCBypassmodeEv>
}
    4d32:	df 91       	pop	r29
    4d34:	cf 91       	pop	r28
    4d36:	08 95       	ret

00004d38 <_ZN7LSM303DC1Ev>:


#include "LSM303D.h"

// default constructor
LSM303D::LSM303D()
    4d38:	cf 93       	push	r28
    4d3a:	df 93       	push	r29
    4d3c:	ec 01       	movw	r28, r24
    4d3e:	46 96       	adiw	r24, 0x16	; 22
    4d40:	83 de       	rcall	.-762    	; 0x4a48 <_ZN3I2CC1Ev>
{
	//Variablen initialisieren
	Tempera=0;
    4d42:	1f 82       	std	Y+7, r1	; 0x07
    4d44:	1e 82       	std	Y+6, r1	; 0x06
	roll=0.0;
    4d46:	18 86       	std	Y+8, r1	; 0x08
    4d48:	19 86       	std	Y+9, r1	; 0x09
    4d4a:	1a 86       	std	Y+10, r1	; 0x0a
    4d4c:	1b 86       	std	Y+11, r1	; 0x0b
	pitch=0.0;
    4d4e:	1c 86       	std	Y+12, r1	; 0x0c
    4d50:	1d 86       	std	Y+13, r1	; 0x0d
    4d52:	1e 86       	std	Y+14, r1	; 0x0e
    4d54:	1f 86       	std	Y+15, r1	; 0x0f
	Schrittzaehler=0;
    4d56:	19 8a       	std	Y+17, r1	; 0x11
    4d58:	18 8a       	std	Y+16, r1	; 0x10
	gravity=0;
    4d5a:	1a 8a       	std	Y+18, r1	; 0x12
    4d5c:	1b 8a       	std	Y+19, r1	; 0x13
    4d5e:	1c 8a       	std	Y+20, r1	; 0x14
    4d60:	1d 8a       	std	Y+21, r1	; 0x15
	higher=0;
    4d62:	de 01       	movw	r26, r28
    4d64:	a1 52       	subi	r26, 0x21	; 33
    4d66:	bf 4f       	sbci	r27, 0xFF	; 255
    4d68:	1d 92       	st	X+, r1
    4d6a:	1d 92       	st	X+, r1
    4d6c:	1d 92       	st	X+, r1
    4d6e:	1c 92       	st	X, r1
    4d70:	13 97       	sbiw	r26, 0x03	; 3
	lower=0;
    4d72:	fe 01       	movw	r30, r28
    4d74:	ed 51       	subi	r30, 0x1D	; 29
    4d76:	ff 4f       	sbci	r31, 0xFF	; 255
    4d78:	10 82       	st	Z, r1
    4d7a:	11 82       	std	Z+1, r1	; 0x01
    4d7c:	12 82       	std	Z+2, r1	; 0x02
    4d7e:	13 82       	std	Z+3, r1	; 0x03
	threschold=27;	//aus Erfahrung
    4d80:	34 96       	adiw	r30, 0x04	; 4
    4d82:	8b e1       	ldi	r24, 0x1B	; 27
    4d84:	90 e0       	ldi	r25, 0x00	; 0
    4d86:	91 83       	std	Z+1, r25	; 0x01
    4d88:	80 83       	st	Z, r24
	for (uint8_t i=0;i<3;i++)
	{
		achsen_A[i]=0;
    4d8a:	19 82       	std	Y+1, r1	; 0x01
    4d8c:	18 82       	st	Y, r1
    4d8e:	1b 82       	std	Y+3, r1	; 0x03
    4d90:	1a 82       	std	Y+2, r1	; 0x02
    4d92:	1d 82       	std	Y+5, r1	; 0x05
    4d94:	1c 82       	std	Y+4, r1	; 0x04
    4d96:	e0 5d       	subi	r30, 0xD0	; 208
    4d98:	f1 09       	sbc	r31, r1
    4d9a:	9d 01       	movw	r18, r26
	}
	for (uint8_t i=0;i<50;i++)
	{
		Daten[i]=0;
    4d9c:	11 92       	st	Z+, r1
    4d9e:	11 92       	st	Z+, r1
    4da0:	11 92       	st	Z+, r1
    4da2:	11 92       	st	Z+, r1
	threschold=27;	//aus Erfahrung
	for (uint8_t i=0;i<3;i++)
	{
		achsen_A[i]=0;
	}
	for (uint8_t i=0;i<50;i++)
    4da4:	e2 17       	cp	r30, r18
    4da6:	f3 07       	cpc	r31, r19
    4da8:	c9 f7       	brne	.-14     	; 0x4d9c <_ZN7LSM303DC1Ev+0x64>
	{
		Daten[i]=0;
	}
	
	//ACC init
	acce_init();
    4daa:	ce 01       	movw	r24, r28
    4dac:	b2 df       	rcall	.-156    	; 0x4d12 <_ZN7LSM303D9acce_initEv>
} //LSM303D
    4dae:	df 91       	pop	r29
    4db0:	cf 91       	pop	r28
    4db2:	08 95       	ret

00004db4 <_ZN7monitor11tastendruckEPh>:
	for (uint8_t i = 0; i < nsamples; ++i ) {
		sum += ADC_Read( channel );
	}
	
	return (uint16_t)( sum / nsamples );
}
    4db4:	80 e0       	ldi	r24, 0x00	; 0
    4db6:	08 95       	ret

00004db8 <_ZN3uhr11tastendruckEPh>:
    4db8:	fc 01       	movw	r30, r24
    4dba:	db 01       	movw	r26, r22
    4dbc:	9c 91       	ld	r25, X
    4dbe:	95 36       	cpi	r25, 0x65	; 101
    4dc0:	39 f4       	brne	.+14     	; 0x4dd0 <_ZN3uhr11tastendruckEPh+0x18>
    4dc2:	81 a5       	ldd	r24, Z+41	; 0x29
    4dc4:	81 30       	cpi	r24, 0x01	; 1
    4dc6:	11 f4       	brne	.+4      	; 0x4dcc <_ZN3uhr11tastendruckEPh+0x14>
    4dc8:	11 a6       	std	Z+41, r1	; 0x29
    4dca:	02 c0       	rjmp	.+4      	; 0x4dd0 <_ZN3uhr11tastendruckEPh+0x18>
    4dcc:	81 e0       	ldi	r24, 0x01	; 1
    4dce:	81 a7       	std	Z+41, r24	; 0x29
    4dd0:	80 e0       	ldi	r24, 0x00	; 0
    4dd2:	08 95       	ret

00004dd4 <_ZN13einstellungen11tastendruckEPh>:
    4dd4:	80 e0       	ldi	r24, 0x00	; 0
    4dd6:	08 95       	ret

00004dd8 <_ZN5menue11tastendruckEPh>:
    4dd8:	80 e0       	ldi	r24, 0x00	; 0
    4dda:	08 95       	ret

00004ddc <_ZN9offscreen4drawEv>:
    4ddc:	cf 93       	push	r28
    4dde:	df 93       	push	r29
    4de0:	ec 01       	movw	r28, r24
    4de2:	8f 89       	ldd	r24, Y+23	; 0x17
    4de4:	98 8d       	ldd	r25, Y+24	; 0x18
    4de6:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <_ZN7Display10clearFrameEv>
    4dea:	8f 89       	ldd	r24, Y+23	; 0x17
    4dec:	98 8d       	ldd	r25, Y+24	; 0x18
    4dee:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <_ZN7Display9sendFrameEv>
    4df2:	df 91       	pop	r29
    4df4:	cf 91       	pop	r28
    4df6:	08 95       	ret

00004df8 <_ZN9wilkommen4drawEv>:
    4df8:	ef 92       	push	r14
    4dfa:	ff 92       	push	r15
    4dfc:	0f 93       	push	r16
    4dfe:	1f 93       	push	r17
    4e00:	cf 93       	push	r28
    4e02:	df 93       	push	r29
    4e04:	ec 01       	movw	r28, r24
    4e06:	8f 89       	ldd	r24, Y+23	; 0x17
    4e08:	98 8d       	ldd	r25, Y+24	; 0x18
    4e0a:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <_ZN7Display10clearFrameEv>
    4e0e:	7e 01       	movw	r14, r28
    4e10:	22 e0       	ldi	r18, 0x02	; 2
    4e12:	e2 0e       	add	r14, r18
    4e14:	f1 1c       	adc	r15, r1
    4e16:	8f e0       	ldi	r24, 0x0F	; 15
    4e18:	e6 e9       	ldi	r30, 0x96	; 150
    4e1a:	f1 e0       	ldi	r31, 0x01	; 1
    4e1c:	d7 01       	movw	r26, r14
    4e1e:	01 90       	ld	r0, Z+
    4e20:	0d 92       	st	X+, r0
    4e22:	8a 95       	dec	r24
    4e24:	e1 f7       	brne	.-8      	; 0x4e1e <_ZN9wilkommen4drawEv+0x26>
    4e26:	8e e0       	ldi	r24, 0x0E	; 14
    4e28:	8e 8b       	std	Y+22, r24	; 0x16
    4e2a:	00 e0       	ldi	r16, 0x00	; 0
    4e2c:	10 e0       	ldi	r17, 0x00	; 0
    4e2e:	fe 01       	movw	r30, r28
    4e30:	e1 0f       	add	r30, r17
    4e32:	f1 1d       	adc	r31, r1
    4e34:	20 e0       	ldi	r18, 0x00	; 0
    4e36:	40 2f       	mov	r20, r16
    4e38:	62 81       	ldd	r22, Z+2	; 0x02
    4e3a:	8f 89       	ldd	r24, Y+23	; 0x17
    4e3c:	98 8d       	ldd	r25, Y+24	; 0x18
    4e3e:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <_ZN7Display9draw_ASCIEhhh>
    4e42:	1f 5f       	subi	r17, 0xFF	; 255
    4e44:	0a 5f       	subi	r16, 0xFA	; 250
    4e46:	8e 89       	ldd	r24, Y+22	; 0x16
    4e48:	18 17       	cp	r17, r24
    4e4a:	88 f3       	brcs	.-30     	; 0x4e2e <_ZN9wilkommen4drawEv+0x36>
    4e4c:	8f e0       	ldi	r24, 0x0F	; 15
    4e4e:	e5 ea       	ldi	r30, 0xA5	; 165
    4e50:	f1 e0       	ldi	r31, 0x01	; 1
    4e52:	d7 01       	movw	r26, r14
    4e54:	01 90       	ld	r0, Z+
    4e56:	0d 92       	st	X+, r0
    4e58:	8a 95       	dec	r24
    4e5a:	e1 f7       	brne	.-8      	; 0x4e54 <_ZN9wilkommen4drawEv+0x5c>
    4e5c:	8e e0       	ldi	r24, 0x0E	; 14
    4e5e:	8e 8b       	std	Y+22, r24	; 0x16
    4e60:	00 e0       	ldi	r16, 0x00	; 0
    4e62:	10 e0       	ldi	r17, 0x00	; 0
    4e64:	fe 01       	movw	r30, r28
    4e66:	e1 0f       	add	r30, r17
    4e68:	f1 1d       	adc	r31, r1
    4e6a:	28 e0       	ldi	r18, 0x08	; 8
    4e6c:	40 2f       	mov	r20, r16
    4e6e:	62 81       	ldd	r22, Z+2	; 0x02
    4e70:	8f 89       	ldd	r24, Y+23	; 0x17
    4e72:	98 8d       	ldd	r25, Y+24	; 0x18
    4e74:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <_ZN7Display9draw_ASCIEhhh>
    4e78:	1f 5f       	subi	r17, 0xFF	; 255
    4e7a:	0a 5f       	subi	r16, 0xFA	; 250
    4e7c:	8e 89       	ldd	r24, Y+22	; 0x16
    4e7e:	18 17       	cp	r17, r24
    4e80:	88 f3       	brcs	.-30     	; 0x4e64 <_ZN9wilkommen4drawEv+0x6c>
    4e82:	80 e4       	ldi	r24, 0x40	; 64
    4e84:	8f 93       	push	r24
    4e86:	83 e4       	ldi	r24, 0x43	; 67
    4e88:	8f 93       	push	r24
    4e8a:	87 ed       	ldi	r24, 0xD7	; 215
    4e8c:	8f 93       	push	r24
    4e8e:	8a e0       	ldi	r24, 0x0A	; 10
    4e90:	8f 93       	push	r24
    4e92:	84 eb       	ldi	r24, 0xB4	; 180
    4e94:	91 e0       	ldi	r25, 0x01	; 1
    4e96:	9f 93       	push	r25
    4e98:	8f 93       	push	r24
    4e9a:	ff 92       	push	r15
    4e9c:	ef 92       	push	r14
    4e9e:	0e 94 40 4d 	call	0x9a80	; 0x9a80 <sprintf>
    4ea2:	8e 8b       	std	Y+22, r24	; 0x16
    4ea4:	2d b7       	in	r18, 0x3d	; 61
    4ea6:	3e b7       	in	r19, 0x3e	; 62
    4ea8:	28 5f       	subi	r18, 0xF8	; 248
    4eaa:	3f 4f       	sbci	r19, 0xFF	; 255
    4eac:	0f b6       	in	r0, 0x3f	; 63
    4eae:	f8 94       	cli
    4eb0:	3e bf       	out	0x3e, r19	; 62
    4eb2:	0f be       	out	0x3f, r0	; 63
    4eb4:	2d bf       	out	0x3d, r18	; 61
    4eb6:	88 23       	and	r24, r24
    4eb8:	89 f0       	breq	.+34     	; 0x4edc <_ZN9wilkommen4drawEv+0xe4>
    4eba:	00 e0       	ldi	r16, 0x00	; 0
    4ebc:	10 e0       	ldi	r17, 0x00	; 0
    4ebe:	fe 01       	movw	r30, r28
    4ec0:	e1 0f       	add	r30, r17
    4ec2:	f1 1d       	adc	r31, r1
    4ec4:	20 e2       	ldi	r18, 0x20	; 32
    4ec6:	40 2f       	mov	r20, r16
    4ec8:	62 81       	ldd	r22, Z+2	; 0x02
    4eca:	8f 89       	ldd	r24, Y+23	; 0x17
    4ecc:	98 8d       	ldd	r25, Y+24	; 0x18
    4ece:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <_ZN7Display9draw_ASCIEhhh>
    4ed2:	1f 5f       	subi	r17, 0xFF	; 255
    4ed4:	0a 5f       	subi	r16, 0xFA	; 250
    4ed6:	8e 89       	ldd	r24, Y+22	; 0x16
    4ed8:	18 17       	cp	r17, r24
    4eda:	88 f3       	brcs	.-30     	; 0x4ebe <_ZN9wilkommen4drawEv+0xc6>
    4edc:	8f 89       	ldd	r24, Y+23	; 0x17
    4ede:	98 8d       	ldd	r25, Y+24	; 0x18
    4ee0:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <_ZN7Display9sendFrameEv>
    4ee4:	df 91       	pop	r29
    4ee6:	cf 91       	pop	r28
    4ee8:	1f 91       	pop	r17
    4eea:	0f 91       	pop	r16
    4eec:	ff 90       	pop	r15
    4eee:	ef 90       	pop	r14
    4ef0:	08 95       	ret

00004ef2 <_Z8ADC_Readh>:
    4ef2:	ec e7       	ldi	r30, 0x7C	; 124
    4ef4:	f0 e0       	ldi	r31, 0x00	; 0
    4ef6:	90 81       	ld	r25, Z
    4ef8:	8f 71       	andi	r24, 0x1F	; 31
    4efa:	90 7e       	andi	r25, 0xE0	; 224
    4efc:	89 2b       	or	r24, r25
    4efe:	80 83       	st	Z, r24
    4f00:	ea e7       	ldi	r30, 0x7A	; 122
    4f02:	f0 e0       	ldi	r31, 0x00	; 0
    4f04:	80 81       	ld	r24, Z
    4f06:	80 64       	ori	r24, 0x40	; 64
    4f08:	80 83       	st	Z, r24
    4f0a:	80 81       	ld	r24, Z
    4f0c:	86 fd       	sbrc	r24, 6
    4f0e:	fd cf       	rjmp	.-6      	; 0x4f0a <_Z8ADC_Readh+0x18>
    4f10:	80 91 78 00 	lds	r24, 0x0078
    4f14:	90 91 79 00 	lds	r25, 0x0079
    4f18:	08 95       	ret

00004f1a <_Z14Batteriestatusv>:
#endif
#ifndef BATMAX
#define BATMAX	4.2
#endif

int8_t Batteriestatus(){
    4f1a:	cf 92       	push	r12
    4f1c:	df 92       	push	r13
    4f1e:	ef 92       	push	r14
    4f20:	ff 92       	push	r15
	uint16_t ADCwert=ADC_Read(0);
    4f22:	80 e0       	ldi	r24, 0x00	; 0
    4f24:	e6 df       	rcall	.-52     	; 0x4ef2 <_Z8ADC_Readh>
	batterie = (ADCwert/1023.0)*3.29*SPANNUNGSTEILER;
    4f26:	bc 01       	movw	r22, r24
    4f28:	80 e0       	ldi	r24, 0x00	; 0
    4f2a:	90 e0       	ldi	r25, 0x00	; 0
    4f2c:	0e 94 cd 42 	call	0x859a	; 0x859a <__floatunsisf>
    4f30:	20 e0       	ldi	r18, 0x00	; 0
    4f32:	30 ec       	ldi	r19, 0xC0	; 192
    4f34:	4f e7       	ldi	r20, 0x7F	; 127
    4f36:	54 e4       	ldi	r21, 0x44	; 68
    4f38:	0e 94 fa 41 	call	0x83f4	; 0x83f4 <__divsf3>
    4f3c:	2c e5       	ldi	r18, 0x5C	; 92
    4f3e:	3f e8       	ldi	r19, 0x8F	; 143
    4f40:	42 e5       	ldi	r20, 0x52	; 82
    4f42:	50 e4       	ldi	r21, 0x40	; 64
    4f44:	0e 94 f8 43 	call	0x87f0	; 0x87f0 <__mulsf3>
    4f48:	2d e0       	ldi	r18, 0x0D	; 13
    4f4a:	31 e7       	ldi	r19, 0x71	; 113
    4f4c:	40 e0       	ldi	r20, 0x00	; 0
    4f4e:	50 e4       	ldi	r21, 0x40	; 64
    4f50:	0e 94 f8 43 	call	0x87f0	; 0x87f0 <__mulsf3>
    4f54:	60 93 1b 09 	sts	0x091B, r22
    4f58:	70 93 1c 09 	sts	0x091C, r23
    4f5c:	80 93 1d 09 	sts	0x091D, r24
    4f60:	90 93 1e 09 	sts	0x091E, r25
	float stat = ((batterie-BATMIN)/(BATMAX-BATMIN)*100);
    4f64:	26 e6       	ldi	r18, 0x66	; 102
    4f66:	36 e6       	ldi	r19, 0x66	; 102
    4f68:	46 e6       	ldi	r20, 0x66	; 102
    4f6a:	50 e4       	ldi	r21, 0x40	; 64
    4f6c:	0e 94 92 41 	call	0x8324	; 0x8324 <__subsf3>
    4f70:	28 e9       	ldi	r18, 0x98	; 152
    4f72:	39 e9       	ldi	r19, 0x99	; 153
    4f74:	49 e1       	ldi	r20, 0x19	; 25
    4f76:	5f e3       	ldi	r21, 0x3F	; 63
    4f78:	0e 94 fa 41 	call	0x83f4	; 0x83f4 <__divsf3>
    4f7c:	20 e0       	ldi	r18, 0x00	; 0
    4f7e:	30 e0       	ldi	r19, 0x00	; 0
    4f80:	48 ec       	ldi	r20, 0xC8	; 200
    4f82:	52 e4       	ldi	r21, 0x42	; 66
    4f84:	0e 94 f8 43 	call	0x87f0	; 0x87f0 <__mulsf3>
    4f88:	6b 01       	movw	r12, r22
    4f8a:	7c 01       	movw	r14, r24
	uint8_t temp =(uint8_t) (stat*10);
    4f8c:	20 e0       	ldi	r18, 0x00	; 0
    4f8e:	30 e0       	ldi	r19, 0x00	; 0
    4f90:	40 e2       	ldi	r20, 0x20	; 32
    4f92:	51 e4       	ldi	r21, 0x41	; 65
    4f94:	0e 94 f8 43 	call	0x87f0	; 0x87f0 <__mulsf3>
    4f98:	0e 94 a1 42 	call	0x8542	; 0x8542 <__fixunssfsi>
	if (temp%10>=5)
    4f9c:	8d ec       	ldi	r24, 0xCD	; 205
    4f9e:	68 9f       	mul	r22, r24
    4fa0:	81 2d       	mov	r24, r1
    4fa2:	11 24       	eor	r1, r1
    4fa4:	86 95       	lsr	r24
    4fa6:	86 95       	lsr	r24
    4fa8:	86 95       	lsr	r24
    4faa:	88 0f       	add	r24, r24
    4fac:	28 2f       	mov	r18, r24
    4fae:	22 0f       	add	r18, r18
    4fb0:	22 0f       	add	r18, r18
    4fb2:	82 0f       	add	r24, r18
    4fb4:	96 2f       	mov	r25, r22
    4fb6:	98 1b       	sub	r25, r24
    4fb8:	95 30       	cpi	r25, 0x05	; 5
    4fba:	70 f0       	brcs	.+28     	; 0x4fd8 <_Z14Batteriestatusv+0xbe>
	{
		stat = (uint8_t)stat+1;
    4fbc:	c7 01       	movw	r24, r14
    4fbe:	b6 01       	movw	r22, r12
    4fc0:	0e 94 a1 42 	call	0x8542	; 0x8542 <__fixunssfsi>
    4fc4:	70 e0       	ldi	r23, 0x00	; 0
    4fc6:	6f 5f       	subi	r22, 0xFF	; 255
    4fc8:	7f 4f       	sbci	r23, 0xFF	; 255
    4fca:	07 2e       	mov	r0, r23
    4fcc:	00 0c       	add	r0, r0
    4fce:	88 0b       	sbc	r24, r24
    4fd0:	99 0b       	sbc	r25, r25
    4fd2:	0e 94 cf 42 	call	0x859e	; 0x859e <__floatsisf>
    4fd6:	09 c0       	rjmp	.+18     	; 0x4fea <_Z14Batteriestatusv+0xd0>
	}
	else
	{
		stat = (uint8_t)stat;
    4fd8:	c7 01       	movw	r24, r14
    4fda:	b6 01       	movw	r22, r12
    4fdc:	0e 94 a1 42 	call	0x8542	; 0x8542 <__fixunssfsi>
    4fe0:	70 e0       	ldi	r23, 0x00	; 0
    4fe2:	80 e0       	ldi	r24, 0x00	; 0
    4fe4:	90 e0       	ldi	r25, 0x00	; 0
    4fe6:	0e 94 cd 42 	call	0x859a	; 0x859a <__floatunsisf>
	}
	return stat;
    4fea:	0e 94 9c 42 	call	0x8538	; 0x8538 <__fixsfsi>
    4fee:	86 2f       	mov	r24, r22
}
    4ff0:	ff 90       	pop	r15
    4ff2:	ef 90       	pop	r14
    4ff4:	df 90       	pop	r13
    4ff6:	cf 90       	pop	r12
    4ff8:	08 95       	ret

00004ffa <_ZN7wandern4drawEv>:
			druck.pressure0 = druck.pressure;
		}
		return 0;
	}
	
	void draw(){
    4ffa:	cf 92       	push	r12
    4ffc:	df 92       	push	r13
    4ffe:	ef 92       	push	r14
    5000:	ff 92       	push	r15
    5002:	0f 93       	push	r16
    5004:	1f 93       	push	r17
    5006:	cf 93       	push	r28
    5008:	df 93       	push	r29
    500a:	ec 01       	movw	r28, r24
		return 0;
	}
	
	//drawfunktion
	virtual void draw(){
		oled->clearFrame();
    500c:	8f 89       	ldd	r24, Y+23	; 0x17
    500e:	98 8d       	ldd	r25, Y+24	; 0x18
    5010:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <_ZN7Display10clearFrameEv>
    5014:	10 e0       	ldi	r17, 0x00	; 0
    5016:	e1 2c       	mov	r14, r1
    5018:	f1 2c       	mov	r15, r1
	}
	
	//draw header and overload it
	void header(){
		for(uint8_t i=0;i<8;i++){
			oled->draw_ASCI(rtc->msg_uhr[i],i*charsize,0);
    501a:	e9 8d       	ldd	r30, Y+25	; 0x19
    501c:	fa 8d       	ldd	r31, Y+26	; 0x1a
    501e:	ee 0d       	add	r30, r14
    5020:	ff 1d       	adc	r31, r15
    5022:	20 e0       	ldi	r18, 0x00	; 0
    5024:	41 2f       	mov	r20, r17
    5026:	60 81       	ld	r22, Z
    5028:	8f 89       	ldd	r24, Y+23	; 0x17
    502a:	98 8d       	ldd	r25, Y+24	; 0x18
    502c:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <_ZN7Display9draw_ASCIEhhh>
    5030:	2f ef       	ldi	r18, 0xFF	; 255
    5032:	e2 1a       	sub	r14, r18
    5034:	f2 0a       	sbc	r15, r18
    5036:	1a 5f       	subi	r17, 0xFA	; 250
		return &name[0];
	}
	
	//draw header and overload it
	void header(){
		for(uint8_t i=0;i<8;i++){
    5038:	10 33       	cpi	r17, 0x30	; 48
    503a:	79 f7       	brne	.-34     	; 0x501a <_ZN7wandern4drawEv+0x20>
			oled->draw_ASCI(rtc->msg_uhr[i],i*charsize,0);
		}
		buffersize=sprintf(buffer,"Bat: %i%%",Batteriestatus());
    503c:	6e df       	rcall	.-292    	; 0x4f1a <_Z14Batteriestatusv>
    503e:	7e 01       	movw	r14, r28
    5040:	32 e0       	ldi	r19, 0x02	; 2
    5042:	e3 0e       	add	r14, r19
    5044:	f1 1c       	adc	r15, r1
    5046:	28 2f       	mov	r18, r24
    5048:	08 2e       	mov	r0, r24
    504a:	00 0c       	add	r0, r0
    504c:	33 0b       	sbc	r19, r19
    504e:	3f 93       	push	r19
    5050:	8f 93       	push	r24
    5052:	82 ec       	ldi	r24, 0xC2	; 194
    5054:	91 e0       	ldi	r25, 0x01	; 1
    5056:	9f 93       	push	r25
    5058:	8f 93       	push	r24
    505a:	ff 92       	push	r15
    505c:	ef 92       	push	r14
    505e:	0e 94 40 4d 	call	0x9a80	; 0x9a80 <sprintf>
    5062:	8e 8b       	std	Y+22, r24	; 0x16
		for(uint8_t i=((SSD1306_WIDTH/charsize)-buffersize);i<(SSD1306_WIDTH/charsize);i++){
    5064:	15 e1       	ldi	r17, 0x15	; 21
    5066:	18 1b       	sub	r17, r24
    5068:	0f 90       	pop	r0
    506a:	0f 90       	pop	r0
    506c:	0f 90       	pop	r0
    506e:	0f 90       	pop	r0
    5070:	0f 90       	pop	r0
    5072:	0f 90       	pop	r0
    5074:	15 31       	cpi	r17, 0x15	; 21
    5076:	08 f0       	brcs	.+2      	; 0x507a <_ZN7wandern4drawEv+0x80>
    5078:	63 c1       	rjmp	.+710    	; 0x5340 <_ZN7wandern4drawEv+0x346>
    507a:	01 2f       	mov	r16, r17
    507c:	00 0f       	add	r16, r16
    507e:	01 0f       	add	r16, r17
    5080:	00 0f       	add	r16, r16
			oled->draw_ASCI(buffer[i-((SSD1306_WIDTH/charsize)-buffersize)],i*charsize,0);
    5082:	8e 89       	ldd	r24, Y+22	; 0x16
    5084:	fe 01       	movw	r30, r28
    5086:	e1 0f       	add	r30, r17
    5088:	f1 1d       	adc	r31, r1
    508a:	e8 0f       	add	r30, r24
    508c:	f1 1d       	adc	r31, r1
    508e:	73 97       	sbiw	r30, 0x13	; 19
    5090:	20 e0       	ldi	r18, 0x00	; 0
    5092:	40 2f       	mov	r20, r16
    5094:	60 81       	ld	r22, Z
    5096:	8f 89       	ldd	r24, Y+23	; 0x17
    5098:	98 8d       	ldd	r25, Y+24	; 0x18
    509a:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <_ZN7Display9draw_ASCIEhhh>
	void header(){
		for(uint8_t i=0;i<8;i++){
			oled->draw_ASCI(rtc->msg_uhr[i],i*charsize,0);
		}
		buffersize=sprintf(buffer,"Bat: %i%%",Batteriestatus());
		for(uint8_t i=((SSD1306_WIDTH/charsize)-buffersize);i<(SSD1306_WIDTH/charsize);i++){
    509e:	1f 5f       	subi	r17, 0xFF	; 255
    50a0:	0a 5f       	subi	r16, 0xFA	; 250
    50a2:	15 31       	cpi	r17, 0x15	; 21
    50a4:	71 f7       	brne	.-36     	; 0x5082 <_ZN7wandern4drawEv+0x88>
    50a6:	4c c1       	rjmp	.+664    	; 0x5340 <_ZN7wandern4drawEv+0x346>
	}
	
	//draw bottom and overload it
	void bottom(){
		for(uint8_t i=0;i<8;i++){
			oled->draw_ASCI(rtc->msg_dat[i],i*charsize+(SSD1306_WIDTH-bitsderrtc*charsize),7*charhighte);
    50a8:	e9 8d       	ldd	r30, Y+25	; 0x19
    50aa:	fa 8d       	ldd	r31, Y+26	; 0x1a
    50ac:	ec 0d       	add	r30, r12
    50ae:	fd 1d       	adc	r31, r13
    50b0:	28 e3       	ldi	r18, 0x38	; 56
    50b2:	41 2f       	mov	r20, r17
    50b4:	60 85       	ldd	r22, Z+8	; 0x08
    50b6:	8f 89       	ldd	r24, Y+23	; 0x17
    50b8:	98 8d       	ldd	r25, Y+24	; 0x18
    50ba:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <_ZN7Display9draw_ASCIEhhh>
    50be:	8f ef       	ldi	r24, 0xFF	; 255
    50c0:	c8 1a       	sub	r12, r24
    50c2:	d8 0a       	sbc	r13, r24
    50c4:	1a 5f       	subi	r17, 0xFA	; 250
		}
	}
	
	//draw bottom and overload it
	void bottom(){
		for(uint8_t i=0;i<8;i++){
    50c6:	10 38       	cpi	r17, 0x80	; 128
    50c8:	79 f7       	brne	.-34     	; 0x50a8 <_ZN7wandern4drawEv+0xae>
		buffersize=sprintf(buffer,"Data: %c%c%c%c%c",gpsdata[0],gpsdata[1],gpsdata[2],gpsdata[3],gpsdata[4]);
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize,3*charhighte);}
		*/

		//Latitude
		buffersize=sprintf(buffer,"Lat: %.7f",lat);
    50ca:	80 91 c6 08 	lds	r24, 0x08C6
    50ce:	8f 93       	push	r24
    50d0:	80 91 c5 08 	lds	r24, 0x08C5
    50d4:	8f 93       	push	r24
    50d6:	80 91 c4 08 	lds	r24, 0x08C4
    50da:	8f 93       	push	r24
    50dc:	80 91 c3 08 	lds	r24, 0x08C3
    50e0:	8f 93       	push	r24
    50e2:	8c ec       	ldi	r24, 0xCC	; 204
    50e4:	91 e0       	ldi	r25, 0x01	; 1
    50e6:	9f 93       	push	r25
    50e8:	8f 93       	push	r24
    50ea:	ff 92       	push	r15
    50ec:	ef 92       	push	r14
    50ee:	0e 94 40 4d 	call	0x9a80	; 0x9a80 <sprintf>
    50f2:	8e 8b       	std	Y+22, r24	; 0x16
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize,2*charhighte);}
    50f4:	2d b7       	in	r18, 0x3d	; 61
    50f6:	3e b7       	in	r19, 0x3e	; 62
    50f8:	28 5f       	subi	r18, 0xF8	; 248
    50fa:	3f 4f       	sbci	r19, 0xFF	; 255
    50fc:	0f b6       	in	r0, 0x3f	; 63
    50fe:	f8 94       	cli
    5100:	3e bf       	out	0x3e, r19	; 62
    5102:	0f be       	out	0x3f, r0	; 63
    5104:	2d bf       	out	0x3d, r18	; 61
    5106:	88 23       	and	r24, r24
    5108:	89 f0       	breq	.+34     	; 0x512c <_ZN7wandern4drawEv+0x132>
    510a:	00 e0       	ldi	r16, 0x00	; 0
    510c:	10 e0       	ldi	r17, 0x00	; 0
    510e:	fe 01       	movw	r30, r28
    5110:	e1 0f       	add	r30, r17
    5112:	f1 1d       	adc	r31, r1
    5114:	20 e1       	ldi	r18, 0x10	; 16
    5116:	40 2f       	mov	r20, r16
    5118:	62 81       	ldd	r22, Z+2	; 0x02
    511a:	8f 89       	ldd	r24, Y+23	; 0x17
    511c:	98 8d       	ldd	r25, Y+24	; 0x18
    511e:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <_ZN7Display9draw_ASCIEhhh>
    5122:	1f 5f       	subi	r17, 0xFF	; 255
    5124:	0a 5f       	subi	r16, 0xFA	; 250
    5126:	8e 89       	ldd	r24, Y+22	; 0x16
    5128:	18 17       	cp	r17, r24
    512a:	88 f3       	brcs	.-30     	; 0x510e <_ZN7wandern4drawEv+0x114>
		
		//Longitude
		buffersize=sprintf(buffer,"Lon: %.7f",lon);
    512c:	80 91 b2 08 	lds	r24, 0x08B2
    5130:	8f 93       	push	r24
    5132:	80 91 b1 08 	lds	r24, 0x08B1
    5136:	8f 93       	push	r24
    5138:	80 91 b0 08 	lds	r24, 0x08B0
    513c:	8f 93       	push	r24
    513e:	80 91 af 08 	lds	r24, 0x08AF
    5142:	8f 93       	push	r24
    5144:	86 ed       	ldi	r24, 0xD6	; 214
    5146:	91 e0       	ldi	r25, 0x01	; 1
    5148:	9f 93       	push	r25
    514a:	8f 93       	push	r24
    514c:	ff 92       	push	r15
    514e:	ef 92       	push	r14
    5150:	0e 94 40 4d 	call	0x9a80	; 0x9a80 <sprintf>
    5154:	8e 8b       	std	Y+22, r24	; 0x16
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize,3*charhighte);}
    5156:	2d b7       	in	r18, 0x3d	; 61
    5158:	3e b7       	in	r19, 0x3e	; 62
    515a:	28 5f       	subi	r18, 0xF8	; 248
    515c:	3f 4f       	sbci	r19, 0xFF	; 255
    515e:	0f b6       	in	r0, 0x3f	; 63
    5160:	f8 94       	cli
    5162:	3e bf       	out	0x3e, r19	; 62
    5164:	0f be       	out	0x3f, r0	; 63
    5166:	2d bf       	out	0x3d, r18	; 61
    5168:	88 23       	and	r24, r24
    516a:	89 f0       	breq	.+34     	; 0x518e <_ZN7wandern4drawEv+0x194>
    516c:	00 e0       	ldi	r16, 0x00	; 0
    516e:	10 e0       	ldi	r17, 0x00	; 0
    5170:	fe 01       	movw	r30, r28
    5172:	e1 0f       	add	r30, r17
    5174:	f1 1d       	adc	r31, r1
    5176:	28 e1       	ldi	r18, 0x18	; 24
    5178:	40 2f       	mov	r20, r16
    517a:	62 81       	ldd	r22, Z+2	; 0x02
    517c:	8f 89       	ldd	r24, Y+23	; 0x17
    517e:	98 8d       	ldd	r25, Y+24	; 0x18
    5180:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <_ZN7Display9draw_ASCIEhhh>
    5184:	1f 5f       	subi	r17, 0xFF	; 255
    5186:	0a 5f       	subi	r16, 0xFA	; 250
    5188:	8e 89       	ldd	r24, Y+22	; 0x16
    518a:	18 17       	cp	r17, r24
    518c:	88 f3       	brcs	.-30     	; 0x5170 <_ZN7wandern4drawEv+0x176>
			
		//Speed
		buffersize=sprintf(buffer,"Spe: %.2f",gpsspeed);
    518e:	80 91 9e 08 	lds	r24, 0x089E
    5192:	8f 93       	push	r24
    5194:	80 91 9d 08 	lds	r24, 0x089D
    5198:	8f 93       	push	r24
    519a:	80 91 9c 08 	lds	r24, 0x089C
    519e:	8f 93       	push	r24
    51a0:	80 91 9b 08 	lds	r24, 0x089B
    51a4:	8f 93       	push	r24
    51a6:	80 ee       	ldi	r24, 0xE0	; 224
    51a8:	91 e0       	ldi	r25, 0x01	; 1
    51aa:	9f 93       	push	r25
    51ac:	8f 93       	push	r24
    51ae:	ff 92       	push	r15
    51b0:	ef 92       	push	r14
    51b2:	0e 94 40 4d 	call	0x9a80	; 0x9a80 <sprintf>
    51b6:	8e 8b       	std	Y+22, r24	; 0x16
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize,4*charhighte);}
    51b8:	2d b7       	in	r18, 0x3d	; 61
    51ba:	3e b7       	in	r19, 0x3e	; 62
    51bc:	28 5f       	subi	r18, 0xF8	; 248
    51be:	3f 4f       	sbci	r19, 0xFF	; 255
    51c0:	0f b6       	in	r0, 0x3f	; 63
    51c2:	f8 94       	cli
    51c4:	3e bf       	out	0x3e, r19	; 62
    51c6:	0f be       	out	0x3f, r0	; 63
    51c8:	2d bf       	out	0x3d, r18	; 61
    51ca:	88 23       	and	r24, r24
    51cc:	89 f0       	breq	.+34     	; 0x51f0 <_ZN7wandern4drawEv+0x1f6>
    51ce:	00 e0       	ldi	r16, 0x00	; 0
    51d0:	10 e0       	ldi	r17, 0x00	; 0
    51d2:	fe 01       	movw	r30, r28
    51d4:	e1 0f       	add	r30, r17
    51d6:	f1 1d       	adc	r31, r1
    51d8:	20 e2       	ldi	r18, 0x20	; 32
    51da:	40 2f       	mov	r20, r16
    51dc:	62 81       	ldd	r22, Z+2	; 0x02
    51de:	8f 89       	ldd	r24, Y+23	; 0x17
    51e0:	98 8d       	ldd	r25, Y+24	; 0x18
    51e2:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <_ZN7Display9draw_ASCIEhhh>
    51e6:	1f 5f       	subi	r17, 0xFF	; 255
    51e8:	0a 5f       	subi	r16, 0xFA	; 250
    51ea:	8e 89       	ldd	r24, Y+22	; 0x16
    51ec:	18 17       	cp	r17, r24
    51ee:	88 f3       	brcs	.-30     	; 0x51d2 <_ZN7wandern4drawEv+0x1d8>
			
		//gpstime
		buffersize=sprintf(buffer,"%02i:%02i:%02i %02i.%02i.%02i",gpsstunde,gpsminute,gpssekunde,gpsTag,gpsMonat,gpsJahr);
    51f0:	80 91 95 08 	lds	r24, 0x0895
    51f4:	1f 92       	push	r1
    51f6:	8f 93       	push	r24
    51f8:	80 91 96 08 	lds	r24, 0x0896
    51fc:	1f 92       	push	r1
    51fe:	8f 93       	push	r24
    5200:	80 91 97 08 	lds	r24, 0x0897
    5204:	1f 92       	push	r1
    5206:	8f 93       	push	r24
    5208:	80 91 98 08 	lds	r24, 0x0898
    520c:	1f 92       	push	r1
    520e:	8f 93       	push	r24
    5210:	80 91 99 08 	lds	r24, 0x0899
    5214:	1f 92       	push	r1
    5216:	8f 93       	push	r24
    5218:	80 91 9a 08 	lds	r24, 0x089A
    521c:	1f 92       	push	r1
    521e:	8f 93       	push	r24
    5220:	8a ee       	ldi	r24, 0xEA	; 234
    5222:	91 e0       	ldi	r25, 0x01	; 1
    5224:	9f 93       	push	r25
    5226:	8f 93       	push	r24
    5228:	ff 92       	push	r15
    522a:	ef 92       	push	r14
    522c:	0e 94 40 4d 	call	0x9a80	; 0x9a80 <sprintf>
    5230:	8e 8b       	std	Y+22, r24	; 0x16
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize,5*charhighte);}
    5232:	2d b7       	in	r18, 0x3d	; 61
    5234:	3e b7       	in	r19, 0x3e	; 62
    5236:	20 5f       	subi	r18, 0xF0	; 240
    5238:	3f 4f       	sbci	r19, 0xFF	; 255
    523a:	0f b6       	in	r0, 0x3f	; 63
    523c:	f8 94       	cli
    523e:	3e bf       	out	0x3e, r19	; 62
    5240:	0f be       	out	0x3f, r0	; 63
    5242:	2d bf       	out	0x3d, r18	; 61
    5244:	88 23       	and	r24, r24
    5246:	89 f0       	breq	.+34     	; 0x526a <_ZN7wandern4drawEv+0x270>
    5248:	00 e0       	ldi	r16, 0x00	; 0
    524a:	10 e0       	ldi	r17, 0x00	; 0
    524c:	fe 01       	movw	r30, r28
    524e:	e1 0f       	add	r30, r17
    5250:	f1 1d       	adc	r31, r1
    5252:	28 e2       	ldi	r18, 0x28	; 40
    5254:	40 2f       	mov	r20, r16
    5256:	62 81       	ldd	r22, Z+2	; 0x02
    5258:	8f 89       	ldd	r24, Y+23	; 0x17
    525a:	98 8d       	ldd	r25, Y+24	; 0x18
    525c:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <_ZN7Display9draw_ASCIEhhh>
    5260:	1f 5f       	subi	r17, 0xFF	; 255
    5262:	0a 5f       	subi	r16, 0xFA	; 250
    5264:	8e 89       	ldd	r24, Y+22	; 0x16
    5266:	18 17       	cp	r17, r24
    5268:	88 f3       	brcs	.-30     	; 0x524c <_ZN7wandern4drawEv+0x252>
		
		
		//Druckdaten	
		buffersize=sprintf(buffer,"%.02f  %.02f",druck.pressure,druck.temperature);
    526a:	ef e1       	ldi	r30, 0x1F	; 31
    526c:	f9 e0       	ldi	r31, 0x09	; 9
    526e:	83 85       	ldd	r24, Z+11	; 0x0b
    5270:	8f 93       	push	r24
    5272:	82 85       	ldd	r24, Z+10	; 0x0a
    5274:	8f 93       	push	r24
    5276:	81 85       	ldd	r24, Z+9	; 0x09
    5278:	8f 93       	push	r24
    527a:	80 85       	ldd	r24, Z+8	; 0x08
    527c:	8f 93       	push	r24
    527e:	83 81       	ldd	r24, Z+3	; 0x03
    5280:	8f 93       	push	r24
    5282:	82 81       	ldd	r24, Z+2	; 0x02
    5284:	8f 93       	push	r24
    5286:	81 81       	ldd	r24, Z+1	; 0x01
    5288:	8f 93       	push	r24
    528a:	80 81       	ld	r24, Z
    528c:	8f 93       	push	r24
    528e:	88 e0       	ldi	r24, 0x08	; 8
    5290:	92 e0       	ldi	r25, 0x02	; 2
    5292:	9f 93       	push	r25
    5294:	8f 93       	push	r24
    5296:	ff 92       	push	r15
    5298:	ef 92       	push	r14
    529a:	0e 94 40 4d 	call	0x9a80	; 0x9a80 <sprintf>
    529e:	8e 8b       	std	Y+22, r24	; 0x16
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize,6*charhighte);}
    52a0:	2d b7       	in	r18, 0x3d	; 61
    52a2:	3e b7       	in	r19, 0x3e	; 62
    52a4:	24 5f       	subi	r18, 0xF4	; 244
    52a6:	3f 4f       	sbci	r19, 0xFF	; 255
    52a8:	0f b6       	in	r0, 0x3f	; 63
    52aa:	f8 94       	cli
    52ac:	3e bf       	out	0x3e, r19	; 62
    52ae:	0f be       	out	0x3f, r0	; 63
    52b0:	2d bf       	out	0x3d, r18	; 61
    52b2:	88 23       	and	r24, r24
    52b4:	89 f0       	breq	.+34     	; 0x52d8 <_ZN7wandern4drawEv+0x2de>
    52b6:	00 e0       	ldi	r16, 0x00	; 0
    52b8:	10 e0       	ldi	r17, 0x00	; 0
    52ba:	fe 01       	movw	r30, r28
    52bc:	e1 0f       	add	r30, r17
    52be:	f1 1d       	adc	r31, r1
    52c0:	20 e3       	ldi	r18, 0x30	; 48
    52c2:	40 2f       	mov	r20, r16
    52c4:	62 81       	ldd	r22, Z+2	; 0x02
    52c6:	8f 89       	ldd	r24, Y+23	; 0x17
    52c8:	98 8d       	ldd	r25, Y+24	; 0x18
    52ca:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <_ZN7Display9draw_ASCIEhhh>
    52ce:	1f 5f       	subi	r17, 0xFF	; 255
    52d0:	0a 5f       	subi	r16, 0xFA	; 250
    52d2:	8e 89       	ldd	r24, Y+22	; 0x16
    52d4:	18 17       	cp	r17, r24
    52d6:	88 f3       	brcs	.-30     	; 0x52ba <_ZN7wandern4drawEv+0x2c0>
		
		buffersize=sprintf(buffer,"%.02f",druck.altitude);
    52d8:	ef e1       	ldi	r30, 0x1F	; 31
    52da:	f9 e0       	ldi	r31, 0x09	; 9
    52dc:	87 85       	ldd	r24, Z+15	; 0x0f
    52de:	8f 93       	push	r24
    52e0:	86 85       	ldd	r24, Z+14	; 0x0e
    52e2:	8f 93       	push	r24
    52e4:	85 85       	ldd	r24, Z+13	; 0x0d
    52e6:	8f 93       	push	r24
    52e8:	84 85       	ldd	r24, Z+12	; 0x0c
    52ea:	8f 93       	push	r24
    52ec:	8f e0       	ldi	r24, 0x0F	; 15
    52ee:	92 e0       	ldi	r25, 0x02	; 2
    52f0:	9f 93       	push	r25
    52f2:	8f 93       	push	r24
    52f4:	ff 92       	push	r15
    52f6:	ef 92       	push	r14
    52f8:	0e 94 40 4d 	call	0x9a80	; 0x9a80 <sprintf>
    52fc:	8e 8b       	std	Y+22, r24	; 0x16
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize,7*charhighte);}
    52fe:	2d b7       	in	r18, 0x3d	; 61
    5300:	3e b7       	in	r19, 0x3e	; 62
    5302:	28 5f       	subi	r18, 0xF8	; 248
    5304:	3f 4f       	sbci	r19, 0xFF	; 255
    5306:	0f b6       	in	r0, 0x3f	; 63
    5308:	f8 94       	cli
    530a:	3e bf       	out	0x3e, r19	; 62
    530c:	0f be       	out	0x3f, r0	; 63
    530e:	2d bf       	out	0x3d, r18	; 61
    5310:	88 23       	and	r24, r24
    5312:	89 f0       	breq	.+34     	; 0x5336 <_ZN7wandern4drawEv+0x33c>
    5314:	00 e0       	ldi	r16, 0x00	; 0
    5316:	10 e0       	ldi	r17, 0x00	; 0
    5318:	fe 01       	movw	r30, r28
    531a:	e1 0f       	add	r30, r17
    531c:	f1 1d       	adc	r31, r1
    531e:	28 e3       	ldi	r18, 0x38	; 56
    5320:	40 2f       	mov	r20, r16
    5322:	62 81       	ldd	r22, Z+2	; 0x02
    5324:	8f 89       	ldd	r24, Y+23	; 0x17
    5326:	98 8d       	ldd	r25, Y+24	; 0x18
    5328:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <_ZN7Display9draw_ASCIEhhh>
    532c:	1f 5f       	subi	r17, 0xFF	; 255
    532e:	0a 5f       	subi	r16, 0xFA	; 250
    5330:	8e 89       	ldd	r24, Y+22	; 0x16
    5332:	18 17       	cp	r17, r24
    5334:	88 f3       	brcs	.-30     	; 0x5318 <_ZN7wandern4drawEv+0x31e>
		oled->clearFrame();
	}

	//send the frame to the display
	void send(){
		oled->sendFrame();	
    5336:	8f 89       	ldd	r24, Y+23	; 0x17
    5338:	98 8d       	ldd	r25, Y+24	; 0x18
    533a:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <_ZN7Display9sendFrameEv>
    533e:	04 c0       	rjmp	.+8      	; 0x5348 <_ZN7wandern4drawEv+0x34e>
		return 0;
	}
	
	//drawfunktion
	virtual void draw(){
		oled->clearFrame();
    5340:	10 e5       	ldi	r17, 0x50	; 80
    5342:	c1 2c       	mov	r12, r1
    5344:	d1 2c       	mov	r13, r1
    5346:	b0 ce       	rjmp	.-672    	; 0x50a8 <_ZN7wandern4drawEv+0xae>
		buffersize=sprintf(buffer,"%.02f",druck.altitude);
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize,7*charhighte);}
		
			
		send();	
	}
    5348:	df 91       	pop	r29
    534a:	cf 91       	pop	r28
    534c:	1f 91       	pop	r17
    534e:	0f 91       	pop	r16
    5350:	ff 90       	pop	r15
    5352:	ef 90       	pop	r14
    5354:	df 90       	pop	r13
    5356:	cf 90       	pop	r12
    5358:	08 95       	ret

0000535a <_ZN5tacho4drawEv>:
		}
		return 0;
	}

	//Anzeige schalten
	void draw(){
    535a:	af 92       	push	r10
    535c:	bf 92       	push	r11
    535e:	cf 92       	push	r12
    5360:	df 92       	push	r13
    5362:	ef 92       	push	r14
    5364:	ff 92       	push	r15
    5366:	0f 93       	push	r16
    5368:	1f 93       	push	r17
    536a:	cf 93       	push	r28
    536c:	df 93       	push	r29
    536e:	ec 01       	movw	r28, r24
		return 0;
	}
	
	//drawfunktion
	virtual void draw(){
		oled->clearFrame();
    5370:	8f 89       	ldd	r24, Y+23	; 0x17
    5372:	98 8d       	ldd	r25, Y+24	; 0x18
    5374:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <_ZN7Display10clearFrameEv>
				for(uint8_t i=((SSD1306_WIDTH/charsize)-buffersize);i<(SSD1306_WIDTH/charsize);i++){
					oled->draw_ASCI(buffer[i-((SSD1306_WIDTH/charsize)-buffersize)],i*charsize,0);
				}
				break;
			case 2:	//standard Header fuer fast alle Pages
				buffersize=sprintf(buffer,"Bat.: %i%%",Batteriestatus());
    5378:	d0 dd       	rcall	.-1120   	; 0x4f1a <_Z14Batteriestatusv>
    537a:	5e 01       	movw	r10, r28
    537c:	22 e0       	ldi	r18, 0x02	; 2
    537e:	a2 0e       	add	r10, r18
    5380:	b1 1c       	adc	r11, r1
    5382:	28 2f       	mov	r18, r24
    5384:	08 2e       	mov	r0, r24
    5386:	00 0c       	add	r0, r0
    5388:	33 0b       	sbc	r19, r19
    538a:	3f 93       	push	r19
    538c:	8f 93       	push	r24
    538e:	85 e1       	ldi	r24, 0x15	; 21
    5390:	92 e0       	ldi	r25, 0x02	; 2
    5392:	9f 93       	push	r25
    5394:	8f 93       	push	r24
    5396:	bf 92       	push	r11
    5398:	af 92       	push	r10
    539a:	0e 94 40 4d 	call	0x9a80	; 0x9a80 <sprintf>
    539e:	8e 8b       	std	Y+22, r24	; 0x16
				for(uint8_t i=((SSD1306_WIDTH/charsize)-buffersize);i<(SSD1306_WIDTH/charsize);i++){
    53a0:	95 e1       	ldi	r25, 0x15	; 21
    53a2:	09 2f       	mov	r16, r25
    53a4:	08 1b       	sub	r16, r24
    53a6:	0f 90       	pop	r0
    53a8:	0f 90       	pop	r0
    53aa:	0f 90       	pop	r0
    53ac:	0f 90       	pop	r0
    53ae:	0f 90       	pop	r0
    53b0:	0f 90       	pop	r0
    53b2:	05 31       	cpi	r16, 0x15	; 21
    53b4:	08 f0       	brcs	.+2      	; 0x53b8 <_ZN5tacho4drawEv+0x5e>
    53b6:	d4 c1       	rjmp	.+936    	; 0x5760 <_ZN5tacho4drawEv+0x406>
    53b8:	e0 2e       	mov	r14, r16
    53ba:	ee 0c       	add	r14, r14
    53bc:	e0 0e       	add	r14, r16
    53be:	1e 2d       	mov	r17, r14
    53c0:	11 0f       	add	r17, r17
					oled->draw_ASCI(buffer[i-((SSD1306_WIDTH/charsize)-buffersize)],i*charsize,0);
    53c2:	8e 89       	ldd	r24, Y+22	; 0x16
    53c4:	fe 01       	movw	r30, r28
    53c6:	e0 0f       	add	r30, r16
    53c8:	f1 1d       	adc	r31, r1
    53ca:	e8 0f       	add	r30, r24
    53cc:	f1 1d       	adc	r31, r1
    53ce:	73 97       	sbiw	r30, 0x13	; 19
    53d0:	20 e0       	ldi	r18, 0x00	; 0
    53d2:	41 2f       	mov	r20, r17
    53d4:	60 81       	ld	r22, Z
    53d6:	8f 89       	ldd	r24, Y+23	; 0x17
    53d8:	98 8d       	ldd	r25, Y+24	; 0x18
    53da:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <_ZN7Display9draw_ASCIEhhh>
					oled->draw_ASCI(buffer[i-((SSD1306_WIDTH/charsize)-buffersize)],i*charsize,0);
				}
				break;
			case 2:	//standard Header fuer fast alle Pages
				buffersize=sprintf(buffer,"Bat.: %i%%",Batteriestatus());
				for(uint8_t i=((SSD1306_WIDTH/charsize)-buffersize);i<(SSD1306_WIDTH/charsize);i++){
    53de:	0f 5f       	subi	r16, 0xFF	; 255
    53e0:	1a 5f       	subi	r17, 0xFA	; 250
    53e2:	05 31       	cpi	r16, 0x15	; 21
    53e4:	71 f7       	brne	.-36     	; 0x53c2 <_ZN5tacho4drawEv+0x68>
    53e6:	bc c1       	rjmp	.+888    	; 0x5760 <_ZN5tacho4drawEv+0x406>
	}
	
	//draw bottom and overload it
	void bottom(){
		for(uint8_t i=0;i<8;i++){
			oled->draw_ASCI(rtc->msg_dat[i],i*charsize+(SSD1306_WIDTH-bitsderrtc*charsize),7*charhighte);
    53e8:	e9 8d       	ldd	r30, Y+25	; 0x19
    53ea:	fa 8d       	ldd	r31, Y+26	; 0x1a
    53ec:	ec 0d       	add	r30, r12
    53ee:	fd 1d       	adc	r31, r13
    53f0:	28 e3       	ldi	r18, 0x38	; 56
    53f2:	41 2f       	mov	r20, r17
    53f4:	60 85       	ldd	r22, Z+8	; 0x08
    53f6:	8f 89       	ldd	r24, Y+23	; 0x17
    53f8:	98 8d       	ldd	r25, Y+24	; 0x18
    53fa:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <_ZN7Display9draw_ASCIEhhh>
    53fe:	3f ef       	ldi	r19, 0xFF	; 255
    5400:	c3 1a       	sub	r12, r19
    5402:	d3 0a       	sbc	r13, r19
    5404:	1a 5f       	subi	r17, 0xFA	; 250
		}
	}
	
	//draw bottom and overload it
	void bottom(){
		for(uint8_t i=0;i<8;i++){
    5406:	10 38       	cpi	r17, 0x80	; 128
    5408:	79 f7       	brne	.-34     	; 0x53e8 <_ZN5tacho4drawEv+0x8e>
		monitor::draw();
		header(2);
		bottom();

		//Rahmen zeichnen
		oled->drawHLine(0,SSD1306_HEIGHT-9,SSD1306_WIDTH);
    540a:	20 e8       	ldi	r18, 0x80	; 128
    540c:	47 e3       	ldi	r20, 0x37	; 55
    540e:	60 e0       	ldi	r22, 0x00	; 0
    5410:	8f 89       	ldd	r24, Y+23	; 0x17
    5412:	98 8d       	ldd	r25, Y+24	; 0x18
    5414:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <_ZN7Display9drawHLineEhhh>
		oled->drawHLine(0,numbersmalhight-1,SSD1306_WIDTH/2+5);
    5418:	25 e4       	ldi	r18, 0x45	; 69
    541a:	4f e0       	ldi	r20, 0x0F	; 15
    541c:	60 e0       	ldi	r22, 0x00	; 0
    541e:	8f 89       	ldd	r24, Y+23	; 0x17
    5420:	98 8d       	ldd	r25, Y+24	; 0x18
    5422:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <_ZN7Display9drawHLineEhhh>
		oled->drawHLine(SSD1306_WIDTH/2+5,charhighte-1,SSD1306_WIDTH/2-5);
    5426:	2b e3       	ldi	r18, 0x3B	; 59
    5428:	47 e0       	ldi	r20, 0x07	; 7
    542a:	65 e4       	ldi	r22, 0x45	; 69
    542c:	8f 89       	ldd	r24, Y+23	; 0x17
    542e:	98 8d       	ldd	r25, Y+24	; 0x18
    5430:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <_ZN7Display9drawHLineEhhh>
		oled->drawVLine(SSD1306_WIDTH/2+5,0,numbersmalhight);
    5434:	20 e1       	ldi	r18, 0x10	; 16
    5436:	40 e0       	ldi	r20, 0x00	; 0
    5438:	65 e4       	ldi	r22, 0x45	; 69
    543a:	8f 89       	ldd	r24, Y+23	; 0x17
    543c:	98 8d       	ldd	r25, Y+24	; 0x18
    543e:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <_ZN7Display9drawVLineEhhh>
		oled->drawHLine(SSD1306_WIDTH-4*numbersmalsize-1,5*charhighte-1,4*numbersmalsize+1);
    5442:	21 e4       	ldi	r18, 0x41	; 65
    5444:	47 e2       	ldi	r20, 0x27	; 39
    5446:	6f e3       	ldi	r22, 0x3F	; 63
    5448:	8f 89       	ldd	r24, Y+23	; 0x17
    544a:	98 8d       	ldd	r25, Y+24	; 0x18
    544c:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <_ZN7Display9drawHLineEhhh>
		oled->drawVLine(SSD1306_WIDTH-4*numbersmalsize-1,numbersmalhight,SSD1306_HEIGHT-numbersmalhight);
    5450:	20 e3       	ldi	r18, 0x30	; 48
    5452:	40 e1       	ldi	r20, 0x10	; 16
    5454:	6f e3       	ldi	r22, 0x3F	; 63
    5456:	8f 89       	ldd	r24, Y+23	; 0x17
    5458:	98 8d       	ldd	r25, Y+24	; 0x18
    545a:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <_ZN7Display9drawVLineEhhh>
		oled->drawHLine(SSD1306_WIDTH-4*numbersmalsize-1,3*charhighte,4*numbersmalsize+1);
    545e:	21 e4       	ldi	r18, 0x41	; 65
    5460:	48 e1       	ldi	r20, 0x18	; 24
    5462:	6f e3       	ldi	r22, 0x3F	; 63
    5464:	8f 89       	ldd	r24, Y+23	; 0x17
    5466:	98 8d       	ldd	r25, Y+24	; 0x18
    5468:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <_ZN7Display9drawHLineEhhh>

		//lesbare Uhr
		oled->draw_number16x16(rtc->msg_uhr[0]-'0',0*numbersmalsize,0*charhighte);
    546c:	e9 8d       	ldd	r30, Y+25	; 0x19
    546e:	fa 8d       	ldd	r31, Y+26	; 0x1a
    5470:	60 81       	ld	r22, Z
    5472:	60 53       	subi	r22, 0x30	; 48
    5474:	20 e0       	ldi	r18, 0x00	; 0
    5476:	40 e0       	ldi	r20, 0x00	; 0
    5478:	8f 89       	ldd	r24, Y+23	; 0x17
    547a:	98 8d       	ldd	r25, Y+24	; 0x18
    547c:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <_ZN7Display16draw_number16x16Ehhh>
		oled->draw_number16x16(rtc->msg_uhr[1]-'0',1*numbersmalsize,0*charhighte);
    5480:	e9 8d       	ldd	r30, Y+25	; 0x19
    5482:	fa 8d       	ldd	r31, Y+26	; 0x1a
    5484:	61 81       	ldd	r22, Z+1	; 0x01
    5486:	60 53       	subi	r22, 0x30	; 48
    5488:	20 e0       	ldi	r18, 0x00	; 0
    548a:	40 e1       	ldi	r20, 0x10	; 16
    548c:	8f 89       	ldd	r24, Y+23	; 0x17
    548e:	98 8d       	ldd	r25, Y+24	; 0x18
    5490:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <_ZN7Display16draw_number16x16Ehhh>
		oled->draw_number16x16(rtc->msg_uhr[3]-'0',2.33*numbersmalsize,0*charhighte);
    5494:	e9 8d       	ldd	r30, Y+25	; 0x19
    5496:	fa 8d       	ldd	r31, Y+26	; 0x1a
    5498:	63 81       	ldd	r22, Z+3	; 0x03
    549a:	60 53       	subi	r22, 0x30	; 48
    549c:	20 e0       	ldi	r18, 0x00	; 0
    549e:	45 e2       	ldi	r20, 0x25	; 37
    54a0:	8f 89       	ldd	r24, Y+23	; 0x17
    54a2:	98 8d       	ldd	r25, Y+24	; 0x18
    54a4:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <_ZN7Display16draw_number16x16Ehhh>
		oled->draw_number16x16(rtc->msg_uhr[4]-'0',3.33*numbersmalsize,0*charhighte);
    54a8:	e9 8d       	ldd	r30, Y+25	; 0x19
    54aa:	fa 8d       	ldd	r31, Y+26	; 0x1a
    54ac:	64 81       	ldd	r22, Z+4	; 0x04
    54ae:	60 53       	subi	r22, 0x30	; 48
    54b0:	20 e0       	ldi	r18, 0x00	; 0
    54b2:	45 e3       	ldi	r20, 0x35	; 53
    54b4:	8f 89       	ldd	r24, Y+23	; 0x17
    54b6:	98 8d       	ldd	r25, Y+24	; 0x18
    54b8:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <_ZN7Display16draw_number16x16Ehhh>

		//Ausgabe der Geschwidigkeit
		buffersize=sprintf(buffer,"%3.1f",geschw);
    54bc:	80 91 94 08 	lds	r24, 0x0894
    54c0:	8f 93       	push	r24
    54c2:	80 91 93 08 	lds	r24, 0x0893
    54c6:	8f 93       	push	r24
    54c8:	80 91 92 08 	lds	r24, 0x0892
    54cc:	8f 93       	push	r24
    54ce:	80 91 91 08 	lds	r24, 0x0891
    54d2:	8f 93       	push	r24
    54d4:	80 e2       	ldi	r24, 0x20	; 32
    54d6:	92 e0       	ldi	r25, 0x02	; 2
    54d8:	9f 93       	push	r25
    54da:	8f 93       	push	r24
    54dc:	bf 92       	push	r11
    54de:	af 92       	push	r10
    54e0:	0e 94 40 4d 	call	0x9a80	; 0x9a80 <sprintf>
    54e4:	8e 8b       	std	Y+22, r24	; 0x16
		for(uint8_t i=((SSD1306_WIDTH/numbersmalsize)-buffersize);i<((SSD1306_WIDTH/numbersmalsize));i++){
    54e6:	98 e0       	ldi	r25, 0x08	; 8
    54e8:	09 2f       	mov	r16, r25
    54ea:	08 1b       	sub	r16, r24
    54ec:	8d b7       	in	r24, 0x3d	; 61
    54ee:	9e b7       	in	r25, 0x3e	; 62
    54f0:	08 96       	adiw	r24, 0x08	; 8
    54f2:	0f b6       	in	r0, 0x3f	; 63
    54f4:	f8 94       	cli
    54f6:	9e bf       	out	0x3e, r25	; 62
    54f8:	0f be       	out	0x3f, r0	; 63
    54fa:	8d bf       	out	0x3d, r24	; 61
    54fc:	08 30       	cpi	r16, 0x08	; 8
    54fe:	f8 f4       	brcc	.+62     	; 0x553e <_ZN5tacho4drawEv+0x1e4>
    5500:	10 2f       	mov	r17, r16
    5502:	12 95       	swap	r17
    5504:	10 7f       	andi	r17, 0xF0	; 240
			if(buffer[i-((SSD1306_WIDTH/numbersmalsize)-buffersize)]=='.'){
    5506:	8e 89       	ldd	r24, Y+22	; 0x16
    5508:	fe 01       	movw	r30, r28
    550a:	e0 0f       	add	r30, r16
    550c:	f1 1d       	adc	r31, r1
    550e:	e8 0f       	add	r30, r24
    5510:	f1 1d       	adc	r31, r1
    5512:	36 97       	sbiw	r30, 0x06	; 6
    5514:	60 81       	ld	r22, Z
    5516:	6e 32       	cpi	r22, 0x2E	; 46
    5518:	39 f4       	brne	.+14     	; 0x5528 <_ZN5tacho4drawEv+0x1ce>
				oled->draw_ASCI(buffer[i-((SSD1306_WIDTH/numbersmalsize)-buffersize)],i*numbersmalsize,4*charhighte);
    551a:	20 e2       	ldi	r18, 0x20	; 32
    551c:	41 2f       	mov	r20, r17
    551e:	8f 89       	ldd	r24, Y+23	; 0x17
    5520:	98 8d       	ldd	r25, Y+24	; 0x18
    5522:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <_ZN7Display9draw_ASCIEhhh>
    5526:	07 c0       	rjmp	.+14     	; 0x5536 <_ZN5tacho4drawEv+0x1dc>
			}
			else{
				oled->draw_number16x16(buffer[i-((SSD1306_WIDTH/numbersmalsize)-buffersize)]-'0',i*numbersmalsize,3*charhighte);
    5528:	60 53       	subi	r22, 0x30	; 48
    552a:	28 e1       	ldi	r18, 0x18	; 24
    552c:	41 2f       	mov	r20, r17
    552e:	8f 89       	ldd	r24, Y+23	; 0x17
    5530:	98 8d       	ldd	r25, Y+24	; 0x18
    5532:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <_ZN7Display16draw_number16x16Ehhh>
		oled->draw_number16x16(rtc->msg_uhr[3]-'0',2.33*numbersmalsize,0*charhighte);
		oled->draw_number16x16(rtc->msg_uhr[4]-'0',3.33*numbersmalsize,0*charhighte);

		//Ausgabe der Geschwidigkeit
		buffersize=sprintf(buffer,"%3.1f",geschw);
		for(uint8_t i=((SSD1306_WIDTH/numbersmalsize)-buffersize);i<((SSD1306_WIDTH/numbersmalsize));i++){
    5536:	0f 5f       	subi	r16, 0xFF	; 255
    5538:	10 5f       	subi	r17, 0xF0	; 240
    553a:	08 30       	cpi	r16, 0x08	; 8
    553c:	21 f7       	brne	.-56     	; 0x5506 <_ZN5tacho4drawEv+0x1ac>
		//Nadel erst, wenn Kompass implementiert
		//Anzeige der Richtung als Alternative
		//anzeige_kleinenadel(31,31+8,angle);

		//anzeige der gesammtstrecke
		buffersize=sprintf(buffer,"%.3fkm",strecke/1000);
    553e:	20 e0       	ldi	r18, 0x00	; 0
    5540:	30 e0       	ldi	r19, 0x00	; 0
    5542:	4a e7       	ldi	r20, 0x7A	; 122
    5544:	54 e4       	ldi	r21, 0x44	; 68
    5546:	60 91 8d 08 	lds	r22, 0x088D
    554a:	70 91 8e 08 	lds	r23, 0x088E
    554e:	80 91 8f 08 	lds	r24, 0x088F
    5552:	90 91 90 08 	lds	r25, 0x0890
    5556:	0e 94 fa 41 	call	0x83f4	; 0x83f4 <__divsf3>
    555a:	9f 93       	push	r25
    555c:	8f 93       	push	r24
    555e:	7f 93       	push	r23
    5560:	6f 93       	push	r22
    5562:	86 e2       	ldi	r24, 0x26	; 38
    5564:	92 e0       	ldi	r25, 0x02	; 2
    5566:	9f 93       	push	r25
    5568:	8f 93       	push	r24
    556a:	bf 92       	push	r11
    556c:	af 92       	push	r10
    556e:	0e 94 40 4d 	call	0x9a80	; 0x9a80 <sprintf>
    5572:	8e 8b       	std	Y+22, r24	; 0x16
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+70,2*charhighte);}
    5574:	2d b7       	in	r18, 0x3d	; 61
    5576:	3e b7       	in	r19, 0x3e	; 62
    5578:	28 5f       	subi	r18, 0xF8	; 248
    557a:	3f 4f       	sbci	r19, 0xFF	; 255
    557c:	0f b6       	in	r0, 0x3f	; 63
    557e:	f8 94       	cli
    5580:	3e bf       	out	0x3e, r19	; 62
    5582:	0f be       	out	0x3f, r0	; 63
    5584:	2d bf       	out	0x3d, r18	; 61
    5586:	88 23       	and	r24, r24
    5588:	89 f0       	breq	.+34     	; 0x55ac <_ZN5tacho4drawEv+0x252>
    558a:	16 e4       	ldi	r17, 0x46	; 70
    558c:	f1 2c       	mov	r15, r1
    558e:	fe 01       	movw	r30, r28
    5590:	ef 0d       	add	r30, r15
    5592:	f1 1d       	adc	r31, r1
    5594:	20 e1       	ldi	r18, 0x10	; 16
    5596:	41 2f       	mov	r20, r17
    5598:	62 81       	ldd	r22, Z+2	; 0x02
    559a:	8f 89       	ldd	r24, Y+23	; 0x17
    559c:	98 8d       	ldd	r25, Y+24	; 0x18
    559e:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <_ZN7Display9draw_ASCIEhhh>
    55a2:	f3 94       	inc	r15
    55a4:	1a 5f       	subi	r17, 0xFA	; 250
    55a6:	8e 89       	ldd	r24, Y+22	; 0x16
    55a8:	f8 16       	cp	r15, r24
    55aa:	88 f3       	brcs	.-30     	; 0x558e <_ZN5tacho4drawEv+0x234>

		//anzeige der max geschwindigkeit
		buffersize=sprintf(buffer,"%.1fkm/h",maxgeschw);
    55ac:	80 91 8c 08 	lds	r24, 0x088C
    55b0:	8f 93       	push	r24
    55b2:	80 91 8b 08 	lds	r24, 0x088B
    55b6:	8f 93       	push	r24
    55b8:	80 91 8a 08 	lds	r24, 0x088A
    55bc:	8f 93       	push	r24
    55be:	80 91 89 08 	lds	r24, 0x0889
    55c2:	8f 93       	push	r24
    55c4:	8d e2       	ldi	r24, 0x2D	; 45
    55c6:	92 e0       	ldi	r25, 0x02	; 2
    55c8:	9f 93       	push	r25
    55ca:	8f 93       	push	r24
    55cc:	bf 92       	push	r11
    55ce:	af 92       	push	r10
    55d0:	0e 94 40 4d 	call	0x9a80	; 0x9a80 <sprintf>
    55d4:	8e 8b       	std	Y+22, r24	; 0x16
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+70,5*charhighte);}
    55d6:	2d b7       	in	r18, 0x3d	; 61
    55d8:	3e b7       	in	r19, 0x3e	; 62
    55da:	28 5f       	subi	r18, 0xF8	; 248
    55dc:	3f 4f       	sbci	r19, 0xFF	; 255
    55de:	0f b6       	in	r0, 0x3f	; 63
    55e0:	f8 94       	cli
    55e2:	3e bf       	out	0x3e, r19	; 62
    55e4:	0f be       	out	0x3f, r0	; 63
    55e6:	2d bf       	out	0x3d, r18	; 61
    55e8:	88 23       	and	r24, r24
    55ea:	89 f0       	breq	.+34     	; 0x560e <_ZN5tacho4drawEv+0x2b4>
    55ec:	16 e4       	ldi	r17, 0x46	; 70
    55ee:	f1 2c       	mov	r15, r1
    55f0:	fe 01       	movw	r30, r28
    55f2:	ef 0d       	add	r30, r15
    55f4:	f1 1d       	adc	r31, r1
    55f6:	28 e2       	ldi	r18, 0x28	; 40
    55f8:	41 2f       	mov	r20, r17
    55fa:	62 81       	ldd	r22, Z+2	; 0x02
    55fc:	8f 89       	ldd	r24, Y+23	; 0x17
    55fe:	98 8d       	ldd	r25, Y+24	; 0x18
    5600:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <_ZN7Display9draw_ASCIEhhh>
    5604:	f3 94       	inc	r15
    5606:	1a 5f       	subi	r17, 0xFA	; 250
    5608:	8e 89       	ldd	r24, Y+22	; 0x16
    560a:	f8 16       	cp	r15, r24
    560c:	88 f3       	brcs	.-30     	; 0x55f0 <_ZN5tacho4drawEv+0x296>

		//anzeige der Fahrtzeit
		buffersize=sprintf(buffer,"%02i:%02i:%02i",uint8_t(Fahrtzeit/3600),uint8_t(Fahrtzeit/60),uint8_t(Fahrtzeit%60));
    560e:	c0 90 85 08 	lds	r12, 0x0885
    5612:	d0 90 86 08 	lds	r13, 0x0886
    5616:	e0 90 87 08 	lds	r14, 0x0887
    561a:	f0 90 88 08 	lds	r15, 0x0888
    561e:	c7 01       	movw	r24, r14
    5620:	b6 01       	movw	r22, r12
    5622:	2c e3       	ldi	r18, 0x3C	; 60
    5624:	30 e0       	ldi	r19, 0x00	; 0
    5626:	40 e0       	ldi	r20, 0x00	; 0
    5628:	50 e0       	ldi	r21, 0x00	; 0
    562a:	0e 94 33 49 	call	0x9266	; 0x9266 <__udivmodsi4>
    562e:	1f 92       	push	r1
    5630:	6f 93       	push	r22
    5632:	1f 92       	push	r1
    5634:	2f 93       	push	r18
    5636:	c7 01       	movw	r24, r14
    5638:	b6 01       	movw	r22, r12
    563a:	20 e1       	ldi	r18, 0x10	; 16
    563c:	3e e0       	ldi	r19, 0x0E	; 14
    563e:	40 e0       	ldi	r20, 0x00	; 0
    5640:	50 e0       	ldi	r21, 0x00	; 0
    5642:	0e 94 33 49 	call	0x9266	; 0x9266 <__udivmodsi4>
    5646:	1f 92       	push	r1
    5648:	2f 93       	push	r18
    564a:	86 e3       	ldi	r24, 0x36	; 54
    564c:	92 e0       	ldi	r25, 0x02	; 2
    564e:	9f 93       	push	r25
    5650:	8f 93       	push	r24
    5652:	bf 92       	push	r11
    5654:	af 92       	push	r10
    5656:	0e 94 40 4d 	call	0x9a80	; 0x9a80 <sprintf>
    565a:	8e 8b       	std	Y+22, r24	; 0x16
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+70,6*charhighte);}
    565c:	2d b7       	in	r18, 0x3d	; 61
    565e:	3e b7       	in	r19, 0x3e	; 62
    5660:	26 5f       	subi	r18, 0xF6	; 246
    5662:	3f 4f       	sbci	r19, 0xFF	; 255
    5664:	0f b6       	in	r0, 0x3f	; 63
    5666:	f8 94       	cli
    5668:	3e bf       	out	0x3e, r19	; 62
    566a:	0f be       	out	0x3f, r0	; 63
    566c:	2d bf       	out	0x3d, r18	; 61
    566e:	88 23       	and	r24, r24
    5670:	89 f0       	breq	.+34     	; 0x5694 <_ZN5tacho4drawEv+0x33a>
    5672:	16 e4       	ldi	r17, 0x46	; 70
    5674:	f1 2c       	mov	r15, r1
    5676:	fe 01       	movw	r30, r28
    5678:	ef 0d       	add	r30, r15
    567a:	f1 1d       	adc	r31, r1
    567c:	20 e3       	ldi	r18, 0x30	; 48
    567e:	41 2f       	mov	r20, r17
    5680:	62 81       	ldd	r22, Z+2	; 0x02
    5682:	8f 89       	ldd	r24, Y+23	; 0x17
    5684:	98 8d       	ldd	r25, Y+24	; 0x18
    5686:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <_ZN7Display9draw_ASCIEhhh>
    568a:	f3 94       	inc	r15
    568c:	1a 5f       	subi	r17, 0xFA	; 250
    568e:	8e 89       	ldd	r24, Y+22	; 0x16
    5690:	f8 16       	cp	r15, r24
    5692:	88 f3       	brcs	.-30     	; 0x5676 <_ZN5tacho4drawEv+0x31c>
		
		//anzeige der durschschnittsgeschw
		if (Fahrtzeit==0)
    5694:	60 91 85 08 	lds	r22, 0x0885
    5698:	70 91 86 08 	lds	r23, 0x0886
    569c:	80 91 87 08 	lds	r24, 0x0887
    56a0:	90 91 88 08 	lds	r25, 0x0888
    56a4:	61 15       	cp	r22, r1
    56a6:	71 05       	cpc	r23, r1
    56a8:	81 05       	cpc	r24, r1
    56aa:	91 05       	cpc	r25, r1
    56ac:	b1 f4       	brne	.+44     	; 0x56da <_ZN5tacho4drawEv+0x380>
		{
			buffersize=sprintf(buffer,"%.1fkm/h",0.0);
    56ae:	1f 92       	push	r1
    56b0:	1f 92       	push	r1
    56b2:	1f 92       	push	r1
    56b4:	1f 92       	push	r1
    56b6:	8d e2       	ldi	r24, 0x2D	; 45
    56b8:	92 e0       	ldi	r25, 0x02	; 2
    56ba:	9f 93       	push	r25
    56bc:	8f 93       	push	r24
    56be:	bf 92       	push	r11
    56c0:	af 92       	push	r10
    56c2:	0e 94 40 4d 	call	0x9a80	; 0x9a80 <sprintf>
    56c6:	8e 8b       	std	Y+22, r24	; 0x16
    56c8:	8d b7       	in	r24, 0x3d	; 61
    56ca:	9e b7       	in	r25, 0x3e	; 62
    56cc:	08 96       	adiw	r24, 0x08	; 8
    56ce:	0f b6       	in	r0, 0x3f	; 63
    56d0:	f8 94       	cli
    56d2:	9e bf       	out	0x3e, r25	; 62
    56d4:	0f be       	out	0x3f, r0	; 63
    56d6:	8d bf       	out	0x3d, r24	; 61
    56d8:	2a c0       	rjmp	.+84     	; 0x572e <_ZN5tacho4drawEv+0x3d4>
		}
		else {
			buffersize=sprintf(buffer,"%.1fkm/h",(strecke/Fahrtzeit)*3.6);
    56da:	0e 94 cd 42 	call	0x859a	; 0x859a <__floatunsisf>
    56de:	9b 01       	movw	r18, r22
    56e0:	ac 01       	movw	r20, r24
    56e2:	60 91 8d 08 	lds	r22, 0x088D
    56e6:	70 91 8e 08 	lds	r23, 0x088E
    56ea:	80 91 8f 08 	lds	r24, 0x088F
    56ee:	90 91 90 08 	lds	r25, 0x0890
    56f2:	0e 94 fa 41 	call	0x83f4	; 0x83f4 <__divsf3>
    56f6:	26 e6       	ldi	r18, 0x66	; 102
    56f8:	36 e6       	ldi	r19, 0x66	; 102
    56fa:	46 e6       	ldi	r20, 0x66	; 102
    56fc:	50 e4       	ldi	r21, 0x40	; 64
    56fe:	0e 94 f8 43 	call	0x87f0	; 0x87f0 <__mulsf3>
    5702:	9f 93       	push	r25
    5704:	8f 93       	push	r24
    5706:	7f 93       	push	r23
    5708:	6f 93       	push	r22
    570a:	8d e2       	ldi	r24, 0x2D	; 45
    570c:	92 e0       	ldi	r25, 0x02	; 2
    570e:	9f 93       	push	r25
    5710:	8f 93       	push	r24
    5712:	bf 92       	push	r11
    5714:	af 92       	push	r10
    5716:	0e 94 40 4d 	call	0x9a80	; 0x9a80 <sprintf>
    571a:	8e 8b       	std	Y+22, r24	; 0x16
    571c:	2d b7       	in	r18, 0x3d	; 61
    571e:	3e b7       	in	r19, 0x3e	; 62
    5720:	28 5f       	subi	r18, 0xF8	; 248
    5722:	3f 4f       	sbci	r19, 0xFF	; 255
    5724:	0f b6       	in	r0, 0x3f	; 63
    5726:	f8 94       	cli
    5728:	3e bf       	out	0x3e, r19	; 62
    572a:	0f be       	out	0x3f, r0	; 63
    572c:	2d bf       	out	0x3d, r18	; 61
		}
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+75,1*charhighte);}
    572e:	8e 89       	ldd	r24, Y+22	; 0x16
    5730:	88 23       	and	r24, r24
    5732:	89 f0       	breq	.+34     	; 0x5756 <_ZN5tacho4drawEv+0x3fc>
    5734:	0b e4       	ldi	r16, 0x4B	; 75
    5736:	10 e0       	ldi	r17, 0x00	; 0
    5738:	fe 01       	movw	r30, r28
    573a:	e1 0f       	add	r30, r17
    573c:	f1 1d       	adc	r31, r1
    573e:	28 e0       	ldi	r18, 0x08	; 8
    5740:	40 2f       	mov	r20, r16
    5742:	62 81       	ldd	r22, Z+2	; 0x02
    5744:	8f 89       	ldd	r24, Y+23	; 0x17
    5746:	98 8d       	ldd	r25, Y+24	; 0x18
    5748:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <_ZN7Display9draw_ASCIEhhh>
    574c:	1f 5f       	subi	r17, 0xFF	; 255
    574e:	0a 5f       	subi	r16, 0xFA	; 250
    5750:	8e 89       	ldd	r24, Y+22	; 0x16
    5752:	18 17       	cp	r17, r24
    5754:	88 f3       	brcs	.-30     	; 0x5738 <_ZN5tacho4drawEv+0x3de>
		oled->clearFrame();
	}

	//send the frame to the display
	void send(){
		oled->sendFrame();	
    5756:	8f 89       	ldd	r24, Y+23	; 0x17
    5758:	98 8d       	ldd	r25, Y+24	; 0x18
    575a:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <_ZN7Display9sendFrameEv>
    575e:	04 c0       	rjmp	.+8      	; 0x5768 <_ZN5tacho4drawEv+0x40e>
		}
		return 0;
	}

	//Anzeige schalten
	void draw(){
    5760:	10 e5       	ldi	r17, 0x50	; 80
    5762:	c1 2c       	mov	r12, r1
    5764:	d1 2c       	mov	r13, r1
    5766:	40 ce       	rjmp	.-896    	; 0x53e8 <_ZN5tacho4drawEv+0x8e>
			buffersize=sprintf(buffer,"%.1fkm/h",(strecke/Fahrtzeit)*3.6);
		}
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+75,1*charhighte);}

		send();
	}
    5768:	df 91       	pop	r29
    576a:	cf 91       	pop	r28
    576c:	1f 91       	pop	r17
    576e:	0f 91       	pop	r16
    5770:	ff 90       	pop	r15
    5772:	ef 90       	pop	r14
    5774:	df 90       	pop	r13
    5776:	cf 90       	pop	r12
    5778:	bf 90       	pop	r11
    577a:	af 90       	pop	r10
    577c:	08 95       	ret

0000577e <_ZN3uhr4drawEv>:
		}
	return 0;
	}

	//anzeige vorbereiten
	void draw()
    577e:	ef 92       	push	r14
    5780:	ff 92       	push	r15
    5782:	0f 93       	push	r16
    5784:	1f 93       	push	r17
    5786:	cf 93       	push	r28
    5788:	df 93       	push	r29
    578a:	ec 01       	movw	r28, r24
		return 0;
	}
	
	//drawfunktion
	virtual void draw(){
		oled->clearFrame();
    578c:	8f 89       	ldd	r24, Y+23	; 0x17
    578e:	98 8d       	ldd	r25, Y+24	; 0x18
    5790:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <_ZN7Display10clearFrameEv>
    5794:	11 e4       	ldi	r17, 0x41	; 65
    5796:	e1 2c       	mov	r14, r1
    5798:	f1 2c       	mov	r15, r1
				for(uint8_t i=((SSD1306_WIDTH/charsize)-buffersize);i<(SSD1306_WIDTH/charsize);i++){
					oled->draw_ASCI(buffer[i-((SSD1306_WIDTH/charsize)-buffersize)],i*charsize,0);
				}
				break;
			case 1:	//standard Header fuer fast alle Pages
				for(uint8_t i=0;i<(bitsderrtc-3);i++){oled->draw_ASCI(rtc->msg_uhr[i],65+i*charsize,0*charhighte);}
    579a:	e9 8d       	ldd	r30, Y+25	; 0x19
    579c:	fa 8d       	ldd	r31, Y+26	; 0x1a
    579e:	ee 0d       	add	r30, r14
    57a0:	ff 1d       	adc	r31, r15
    57a2:	20 e0       	ldi	r18, 0x00	; 0
    57a4:	41 2f       	mov	r20, r17
    57a6:	60 81       	ld	r22, Z
    57a8:	8f 89       	ldd	r24, Y+23	; 0x17
    57aa:	98 8d       	ldd	r25, Y+24	; 0x18
    57ac:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <_ZN7Display9draw_ASCIEhhh>
    57b0:	8f ef       	ldi	r24, 0xFF	; 255
    57b2:	e8 1a       	sub	r14, r24
    57b4:	f8 0a       	sbc	r15, r24
    57b6:	1a 5f       	subi	r17, 0xFA	; 250
    57b8:	1f 35       	cpi	r17, 0x5F	; 95
    57ba:	79 f7       	brne	.-34     	; 0x579a <_ZN3uhr4drawEv+0x1c>
				buffersize=sprintf(buffer,"%i%%",Batteriestatus());
    57bc:	ae db       	rcall	.-2212   	; 0x4f1a <_Z14Batteriestatusv>
    57be:	28 2f       	mov	r18, r24
    57c0:	08 2e       	mov	r0, r24
    57c2:	00 0c       	add	r0, r0
    57c4:	33 0b       	sbc	r19, r19
    57c6:	3f 93       	push	r19
    57c8:	8f 93       	push	r24
    57ca:	8b e1       	ldi	r24, 0x1B	; 27
    57cc:	92 e0       	ldi	r25, 0x02	; 2
    57ce:	9f 93       	push	r25
    57d0:	8f 93       	push	r24
    57d2:	ce 01       	movw	r24, r28
    57d4:	02 96       	adiw	r24, 0x02	; 2
    57d6:	9f 93       	push	r25
    57d8:	8f 93       	push	r24
    57da:	0e 94 40 4d 	call	0x9a80	; 0x9a80 <sprintf>
    57de:	8e 8b       	std	Y+22, r24	; 0x16
				for(uint8_t i=((SSD1306_WIDTH/charsize)-buffersize);i<(SSD1306_WIDTH/charsize);i++){
    57e0:	15 e1       	ldi	r17, 0x15	; 21
    57e2:	18 1b       	sub	r17, r24
    57e4:	0f 90       	pop	r0
    57e6:	0f 90       	pop	r0
    57e8:	0f 90       	pop	r0
    57ea:	0f 90       	pop	r0
    57ec:	0f 90       	pop	r0
    57ee:	0f 90       	pop	r0
    57f0:	15 31       	cpi	r17, 0x15	; 21
    57f2:	08 f0       	brcs	.+2      	; 0x57f6 <_ZN3uhr4drawEv+0x78>
    57f4:	5f c0       	rjmp	.+190    	; 0x58b4 <_ZN3uhr4drawEv+0x136>
    57f6:	01 2f       	mov	r16, r17
    57f8:	00 0f       	add	r16, r16
    57fa:	01 0f       	add	r16, r17
    57fc:	00 0f       	add	r16, r16
					oled->draw_ASCI(buffer[i-((SSD1306_WIDTH/charsize)-buffersize)],i*charsize,0);
    57fe:	8e 89       	ldd	r24, Y+22	; 0x16
    5800:	fe 01       	movw	r30, r28
    5802:	e1 0f       	add	r30, r17
    5804:	f1 1d       	adc	r31, r1
    5806:	e8 0f       	add	r30, r24
    5808:	f1 1d       	adc	r31, r1
    580a:	73 97       	sbiw	r30, 0x13	; 19
    580c:	20 e0       	ldi	r18, 0x00	; 0
    580e:	40 2f       	mov	r20, r16
    5810:	60 81       	ld	r22, Z
    5812:	8f 89       	ldd	r24, Y+23	; 0x17
    5814:	98 8d       	ldd	r25, Y+24	; 0x18
    5816:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <_ZN7Display9draw_ASCIEhhh>
				}
				break;
			case 1:	//standard Header fuer fast alle Pages
				for(uint8_t i=0;i<(bitsderrtc-3);i++){oled->draw_ASCI(rtc->msg_uhr[i],65+i*charsize,0*charhighte);}
				buffersize=sprintf(buffer,"%i%%",Batteriestatus());
				for(uint8_t i=((SSD1306_WIDTH/charsize)-buffersize);i<(SSD1306_WIDTH/charsize);i++){
    581a:	1f 5f       	subi	r17, 0xFF	; 255
    581c:	0a 5f       	subi	r16, 0xFA	; 250
    581e:	15 31       	cpi	r17, 0x15	; 21
    5820:	71 f7       	brne	.-36     	; 0x57fe <_ZN3uhr4drawEv+0x80>
    5822:	48 c0       	rjmp	.+144    	; 0x58b4 <_ZN3uhr4drawEv+0x136>
				for(uint8_t i=0;i<8;i++){
					oled->draw_ASCI(rtc->msg_dat[i],5+i*charsize,7*charhighte);
				}
				break;
			case 2:
				for(uint8_t i=0;i<bitsderrtc;i++){oled->draw_ASCI(rtc->msg_dat[i],65+i*charsize,7*charhighte);}
    5824:	e9 8d       	ldd	r30, Y+25	; 0x19
    5826:	fa 8d       	ldd	r31, Y+26	; 0x1a
    5828:	ee 0d       	add	r30, r14
    582a:	ff 1d       	adc	r31, r15
    582c:	28 e3       	ldi	r18, 0x38	; 56
    582e:	41 2f       	mov	r20, r17
    5830:	60 85       	ldd	r22, Z+8	; 0x08
    5832:	8f 89       	ldd	r24, Y+23	; 0x17
    5834:	98 8d       	ldd	r25, Y+24	; 0x18
    5836:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <_ZN7Display9draw_ASCIEhhh>
    583a:	8f ef       	ldi	r24, 0xFF	; 255
    583c:	e8 1a       	sub	r14, r24
    583e:	f8 0a       	sbc	r15, r24
    5840:	1a 5f       	subi	r17, 0xFA	; 250
    5842:	11 37       	cpi	r17, 0x71	; 113
    5844:	79 f7       	brne	.-34     	; 0x5824 <_ZN3uhr4drawEv+0xa6>
	{
		monitor::draw();
		header(1);
		bottom(2);

		oled->analog(rtc->Stunden,rtc->Minuten,rtc->Sekunden,Zeiger);
    5846:	e9 8d       	ldd	r30, Y+25	; 0x19
    5848:	fa 8d       	ldd	r31, Y+26	; 0x1a
    584a:	09 a5       	ldd	r16, Y+41	; 0x29
    584c:	22 89       	ldd	r18, Z+18	; 0x12
    584e:	41 89       	ldd	r20, Z+17	; 0x11
    5850:	60 89       	ldd	r22, Z+16	; 0x10
    5852:	8f 89       	ldd	r24, Y+23	; 0x17
    5854:	98 8d       	ldd	r25, Y+24	; 0x18
    5856:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <_ZN7Display6analogEhhhh>
		//draw large number
		oled->draw_number16x16(rtc->msg_uhr[0]-'0',70,1.66*charhighte);
    585a:	e9 8d       	ldd	r30, Y+25	; 0x19
    585c:	fa 8d       	ldd	r31, Y+26	; 0x1a
    585e:	60 81       	ld	r22, Z
    5860:	60 53       	subi	r22, 0x30	; 48
    5862:	2d e0       	ldi	r18, 0x0D	; 13
    5864:	46 e4       	ldi	r20, 0x46	; 70
    5866:	8f 89       	ldd	r24, Y+23	; 0x17
    5868:	98 8d       	ldd	r25, Y+24	; 0x18
    586a:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <_ZN7Display16draw_number16x16Ehhh>
		oled->draw_number16x16(rtc->msg_uhr[1]-'0',70+numbersmalsize,1.66*charhighte);
    586e:	e9 8d       	ldd	r30, Y+25	; 0x19
    5870:	fa 8d       	ldd	r31, Y+26	; 0x1a
    5872:	61 81       	ldd	r22, Z+1	; 0x01
    5874:	60 53       	subi	r22, 0x30	; 48
    5876:	2d e0       	ldi	r18, 0x0D	; 13
    5878:	46 e5       	ldi	r20, 0x56	; 86
    587a:	8f 89       	ldd	r24, Y+23	; 0x17
    587c:	98 8d       	ldd	r25, Y+24	; 0x18
    587e:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <_ZN7Display16draw_number16x16Ehhh>
		oled->draw_number16x16(rtc->msg_uhr[3]-'0',70,2.33*charhighte+numbersmalhight);
    5882:	e9 8d       	ldd	r30, Y+25	; 0x19
    5884:	fa 8d       	ldd	r31, Y+26	; 0x1a
    5886:	63 81       	ldd	r22, Z+3	; 0x03
    5888:	60 53       	subi	r22, 0x30	; 48
    588a:	22 e2       	ldi	r18, 0x22	; 34
    588c:	46 e4       	ldi	r20, 0x46	; 70
    588e:	8f 89       	ldd	r24, Y+23	; 0x17
    5890:	98 8d       	ldd	r25, Y+24	; 0x18
    5892:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <_ZN7Display16draw_number16x16Ehhh>
		oled->draw_number16x16(rtc->msg_uhr[4]-'0',70+numbersmalsize,2.33*charhighte+numbersmalhight);
    5896:	e9 8d       	ldd	r30, Y+25	; 0x19
    5898:	fa 8d       	ldd	r31, Y+26	; 0x1a
    589a:	64 81       	ldd	r22, Z+4	; 0x04
    589c:	60 53       	subi	r22, 0x30	; 48
    589e:	22 e2       	ldi	r18, 0x22	; 34
    58a0:	46 e5       	ldi	r20, 0x56	; 86
    58a2:	8f 89       	ldd	r24, Y+23	; 0x17
    58a4:	98 8d       	ldd	r25, Y+24	; 0x18
    58a6:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <_ZN7Display16draw_number16x16Ehhh>
		oled->clearFrame();
	}

	//send the frame to the display
	void send(){
		oled->sendFrame();	
    58aa:	8f 89       	ldd	r24, Y+23	; 0x17
    58ac:	98 8d       	ldd	r25, Y+24	; 0x18
    58ae:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <_ZN7Display9sendFrameEv>
    58b2:	04 c0       	rjmp	.+8      	; 0x58bc <_ZN3uhr4drawEv+0x13e>
		return 0;
	}
	
	//drawfunktion
	virtual void draw(){
		oled->clearFrame();
    58b4:	11 e4       	ldi	r17, 0x41	; 65
    58b6:	e1 2c       	mov	r14, r1
    58b8:	f1 2c       	mov	r15, r1
    58ba:	b4 cf       	rjmp	.-152    	; 0x5824 <_ZN3uhr4drawEv+0xa6>
		oled->draw_number16x16(rtc->msg_uhr[1]-'0',70+numbersmalsize,1.66*charhighte);
		oled->draw_number16x16(rtc->msg_uhr[3]-'0',70,2.33*charhighte+numbersmalhight);
		oled->draw_number16x16(rtc->msg_uhr[4]-'0',70+numbersmalsize,2.33*charhighte+numbersmalhight);

		send();
	}
    58bc:	df 91       	pop	r29
    58be:	cf 91       	pop	r28
    58c0:	1f 91       	pop	r17
    58c2:	0f 91       	pop	r16
    58c4:	ff 90       	pop	r15
    58c6:	ef 90       	pop	r14
    58c8:	08 95       	ret

000058ca <_ZN5menue4drawEv>:
	
	uint8_t tastendruck(uint8_t *tast){
		return 0;
	}

	void draw(){
    58ca:	cf 92       	push	r12
    58cc:	df 92       	push	r13
    58ce:	ef 92       	push	r14
    58d0:	ff 92       	push	r15
    58d2:	0f 93       	push	r16
    58d4:	1f 93       	push	r17
    58d6:	cf 93       	push	r28
    58d8:	df 93       	push	r29
    58da:	ec 01       	movw	r28, r24
		return 0;
	}
	
	//drawfunktion
	virtual void draw(){
		oled->clearFrame();
    58dc:	8f 89       	ldd	r24, Y+23	; 0x17
    58de:	98 8d       	ldd	r25, Y+24	; 0x18
    58e0:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <_ZN7Display10clearFrameEv>
    58e4:	10 e0       	ldi	r17, 0x00	; 0
    58e6:	e1 2c       	mov	r14, r1
    58e8:	f1 2c       	mov	r15, r1
	}
	
	//draw header and overload it
	void header(){
		for(uint8_t i=0;i<8;i++){
			oled->draw_ASCI(rtc->msg_uhr[i],i*charsize,0);
    58ea:	e9 8d       	ldd	r30, Y+25	; 0x19
    58ec:	fa 8d       	ldd	r31, Y+26	; 0x1a
    58ee:	ee 0d       	add	r30, r14
    58f0:	ff 1d       	adc	r31, r15
    58f2:	20 e0       	ldi	r18, 0x00	; 0
    58f4:	41 2f       	mov	r20, r17
    58f6:	60 81       	ld	r22, Z
    58f8:	8f 89       	ldd	r24, Y+23	; 0x17
    58fa:	98 8d       	ldd	r25, Y+24	; 0x18
    58fc:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <_ZN7Display9draw_ASCIEhhh>
    5900:	8f ef       	ldi	r24, 0xFF	; 255
    5902:	e8 1a       	sub	r14, r24
    5904:	f8 0a       	sbc	r15, r24
    5906:	1a 5f       	subi	r17, 0xFA	; 250
		return &name[0];
	}
	
	//draw header and overload it
	void header(){
		for(uint8_t i=0;i<8;i++){
    5908:	10 33       	cpi	r17, 0x30	; 48
    590a:	79 f7       	brne	.-34     	; 0x58ea <_ZN5menue4drawEv+0x20>
			oled->draw_ASCI(rtc->msg_uhr[i],i*charsize,0);
		}
		buffersize=sprintf(buffer,"Bat: %i%%",Batteriestatus());
    590c:	06 db       	rcall	.-2548   	; 0x4f1a <_Z14Batteriestatusv>
    590e:	7e 01       	movw	r14, r28
    5910:	92 e0       	ldi	r25, 0x02	; 2
    5912:	e9 0e       	add	r14, r25
    5914:	f1 1c       	adc	r15, r1
    5916:	28 2f       	mov	r18, r24
    5918:	08 2e       	mov	r0, r24
    591a:	00 0c       	add	r0, r0
    591c:	33 0b       	sbc	r19, r19
    591e:	3f 93       	push	r19
    5920:	8f 93       	push	r24
    5922:	82 ec       	ldi	r24, 0xC2	; 194
    5924:	91 e0       	ldi	r25, 0x01	; 1
    5926:	9f 93       	push	r25
    5928:	8f 93       	push	r24
    592a:	ff 92       	push	r15
    592c:	ef 92       	push	r14
    592e:	0e 94 40 4d 	call	0x9a80	; 0x9a80 <sprintf>
    5932:	8e 8b       	std	Y+22, r24	; 0x16
		for(uint8_t i=((SSD1306_WIDTH/charsize)-buffersize);i<(SSD1306_WIDTH/charsize);i++){
    5934:	15 e1       	ldi	r17, 0x15	; 21
    5936:	18 1b       	sub	r17, r24
    5938:	0f 90       	pop	r0
    593a:	0f 90       	pop	r0
    593c:	0f 90       	pop	r0
    593e:	0f 90       	pop	r0
    5940:	0f 90       	pop	r0
    5942:	0f 90       	pop	r0
    5944:	15 31       	cpi	r17, 0x15	; 21
    5946:	08 f0       	brcs	.+2      	; 0x594a <_ZN5menue4drawEv+0x80>
    5948:	bf c0       	rjmp	.+382    	; 0x5ac8 <_ZN5menue4drawEv+0x1fe>
    594a:	01 2f       	mov	r16, r17
    594c:	00 0f       	add	r16, r16
    594e:	01 0f       	add	r16, r17
    5950:	00 0f       	add	r16, r16
			oled->draw_ASCI(buffer[i-((SSD1306_WIDTH/charsize)-buffersize)],i*charsize,0);
    5952:	8e 89       	ldd	r24, Y+22	; 0x16
    5954:	fe 01       	movw	r30, r28
    5956:	e1 0f       	add	r30, r17
    5958:	f1 1d       	adc	r31, r1
    595a:	e8 0f       	add	r30, r24
    595c:	f1 1d       	adc	r31, r1
    595e:	73 97       	sbiw	r30, 0x13	; 19
    5960:	20 e0       	ldi	r18, 0x00	; 0
    5962:	40 2f       	mov	r20, r16
    5964:	60 81       	ld	r22, Z
    5966:	8f 89       	ldd	r24, Y+23	; 0x17
    5968:	98 8d       	ldd	r25, Y+24	; 0x18
    596a:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <_ZN7Display9draw_ASCIEhhh>
	void header(){
		for(uint8_t i=0;i<8;i++){
			oled->draw_ASCI(rtc->msg_uhr[i],i*charsize,0);
		}
		buffersize=sprintf(buffer,"Bat: %i%%",Batteriestatus());
		for(uint8_t i=((SSD1306_WIDTH/charsize)-buffersize);i<(SSD1306_WIDTH/charsize);i++){
    596e:	1f 5f       	subi	r17, 0xFF	; 255
    5970:	0a 5f       	subi	r16, 0xFA	; 250
    5972:	15 31       	cpi	r17, 0x15	; 21
    5974:	71 f7       	brne	.-36     	; 0x5952 <_ZN5menue4drawEv+0x88>
    5976:	a8 c0       	rjmp	.+336    	; 0x5ac8 <_ZN5menue4drawEv+0x1fe>
	}
	
	//draw bottom and overload it
	void bottom(){
		for(uint8_t i=0;i<8;i++){
			oled->draw_ASCI(rtc->msg_dat[i],i*charsize+(SSD1306_WIDTH-bitsderrtc*charsize),7*charhighte);
    5978:	e9 8d       	ldd	r30, Y+25	; 0x19
    597a:	fa 8d       	ldd	r31, Y+26	; 0x1a
    597c:	ec 0d       	add	r30, r12
    597e:	fd 1d       	adc	r31, r13
    5980:	28 e3       	ldi	r18, 0x38	; 56
    5982:	41 2f       	mov	r20, r17
    5984:	60 85       	ldd	r22, Z+8	; 0x08
    5986:	8f 89       	ldd	r24, Y+23	; 0x17
    5988:	98 8d       	ldd	r25, Y+24	; 0x18
    598a:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <_ZN7Display9draw_ASCIEhhh>
    598e:	8f ef       	ldi	r24, 0xFF	; 255
    5990:	c8 1a       	sub	r12, r24
    5992:	d8 0a       	sbc	r13, r24
    5994:	1a 5f       	subi	r17, 0xFA	; 250
		}
	}
	
	//draw bottom and overload it
	void bottom(){
		for(uint8_t i=0;i<8;i++){
    5996:	10 38       	cpi	r17, 0x80	; 128
    5998:	79 f7       	brne	.-34     	; 0x5978 <_ZN5menue4drawEv+0xae>
	void draw(){
		monitor::draw();
		header();
		bottom();
		//menueeintrag zeichnen
		buffersize=sprintf(buffer,"Uhr");
    599a:	85 e5       	ldi	r24, 0x55	; 85
    599c:	98 e6       	ldi	r25, 0x68	; 104
    599e:	a2 e7       	ldi	r26, 0x72	; 114
    59a0:	b0 e0       	ldi	r27, 0x00	; 0
    59a2:	8a 83       	std	Y+2, r24	; 0x02
    59a4:	9b 83       	std	Y+3, r25	; 0x03
    59a6:	ac 83       	std	Y+4, r26	; 0x04
    59a8:	bd 83       	std	Y+5, r27	; 0x05
    59aa:	83 e0       	ldi	r24, 0x03	; 3
    59ac:	8e 8b       	std	Y+22, r24	; 0x16
    59ae:	0c e0       	ldi	r16, 0x0C	; 12
    59b0:	10 e0       	ldi	r17, 0x00	; 0
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+2*charsize,2*charhighte);}
    59b2:	fe 01       	movw	r30, r28
    59b4:	e1 0f       	add	r30, r17
    59b6:	f1 1d       	adc	r31, r1
    59b8:	20 e1       	ldi	r18, 0x10	; 16
    59ba:	40 2f       	mov	r20, r16
    59bc:	62 81       	ldd	r22, Z+2	; 0x02
    59be:	8f 89       	ldd	r24, Y+23	; 0x17
    59c0:	98 8d       	ldd	r25, Y+24	; 0x18
    59c2:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <_ZN7Display9draw_ASCIEhhh>
    59c6:	1f 5f       	subi	r17, 0xFF	; 255
    59c8:	0a 5f       	subi	r16, 0xFA	; 250
    59ca:	8e 89       	ldd	r24, Y+22	; 0x16
    59cc:	18 17       	cp	r17, r24
    59ce:	88 f3       	brcs	.-30     	; 0x59b2 <_ZN5menue4drawEv+0xe8>
		buffersize=sprintf(buffer,"Tacho");
    59d0:	86 e0       	ldi	r24, 0x06	; 6
    59d2:	e5 e4       	ldi	r30, 0x45	; 69
    59d4:	f2 e0       	ldi	r31, 0x02	; 2
    59d6:	d7 01       	movw	r26, r14
    59d8:	01 90       	ld	r0, Z+
    59da:	0d 92       	st	X+, r0
    59dc:	8a 95       	dec	r24
    59de:	e1 f7       	brne	.-8      	; 0x59d8 <_ZN5menue4drawEv+0x10e>
    59e0:	85 e0       	ldi	r24, 0x05	; 5
    59e2:	8e 8b       	std	Y+22, r24	; 0x16
    59e4:	0c e0       	ldi	r16, 0x0C	; 12
    59e6:	10 e0       	ldi	r17, 0x00	; 0
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+2*charsize,3*charhighte);}
    59e8:	fe 01       	movw	r30, r28
    59ea:	e1 0f       	add	r30, r17
    59ec:	f1 1d       	adc	r31, r1
    59ee:	28 e1       	ldi	r18, 0x18	; 24
    59f0:	40 2f       	mov	r20, r16
    59f2:	62 81       	ldd	r22, Z+2	; 0x02
    59f4:	8f 89       	ldd	r24, Y+23	; 0x17
    59f6:	98 8d       	ldd	r25, Y+24	; 0x18
    59f8:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <_ZN7Display9draw_ASCIEhhh>
    59fc:	1f 5f       	subi	r17, 0xFF	; 255
    59fe:	0a 5f       	subi	r16, 0xFA	; 250
    5a00:	8e 89       	ldd	r24, Y+22	; 0x16
    5a02:	18 17       	cp	r17, r24
    5a04:	88 f3       	brcs	.-30     	; 0x59e8 <_ZN5menue4drawEv+0x11e>
		buffersize=sprintf(buffer,"Wandern");
    5a06:	88 e0       	ldi	r24, 0x08	; 8
    5a08:	eb e4       	ldi	r30, 0x4B	; 75
    5a0a:	f2 e0       	ldi	r31, 0x02	; 2
    5a0c:	d7 01       	movw	r26, r14
    5a0e:	01 90       	ld	r0, Z+
    5a10:	0d 92       	st	X+, r0
    5a12:	8a 95       	dec	r24
    5a14:	e1 f7       	brne	.-8      	; 0x5a0e <_ZN5menue4drawEv+0x144>
    5a16:	87 e0       	ldi	r24, 0x07	; 7
    5a18:	8e 8b       	std	Y+22, r24	; 0x16
    5a1a:	0c e0       	ldi	r16, 0x0C	; 12
    5a1c:	10 e0       	ldi	r17, 0x00	; 0
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+2*charsize,4*charhighte);}
    5a1e:	fe 01       	movw	r30, r28
    5a20:	e1 0f       	add	r30, r17
    5a22:	f1 1d       	adc	r31, r1
    5a24:	20 e2       	ldi	r18, 0x20	; 32
    5a26:	40 2f       	mov	r20, r16
    5a28:	62 81       	ldd	r22, Z+2	; 0x02
    5a2a:	8f 89       	ldd	r24, Y+23	; 0x17
    5a2c:	98 8d       	ldd	r25, Y+24	; 0x18
    5a2e:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <_ZN7Display9draw_ASCIEhhh>
    5a32:	1f 5f       	subi	r17, 0xFF	; 255
    5a34:	0a 5f       	subi	r16, 0xFA	; 250
    5a36:	8e 89       	ldd	r24, Y+22	; 0x16
    5a38:	18 17       	cp	r17, r24
    5a3a:	88 f3       	brcs	.-30     	; 0x5a1e <_ZN5menue4drawEv+0x154>
		buffersize=sprintf(buffer,"Einstellungen");
    5a3c:	8e e0       	ldi	r24, 0x0E	; 14
    5a3e:	e3 e5       	ldi	r30, 0x53	; 83
    5a40:	f2 e0       	ldi	r31, 0x02	; 2
    5a42:	d7 01       	movw	r26, r14
    5a44:	01 90       	ld	r0, Z+
    5a46:	0d 92       	st	X+, r0
    5a48:	8a 95       	dec	r24
    5a4a:	e1 f7       	brne	.-8      	; 0x5a44 <_ZN5menue4drawEv+0x17a>
    5a4c:	8d e0       	ldi	r24, 0x0D	; 13
    5a4e:	8e 8b       	std	Y+22, r24	; 0x16
    5a50:	0c e0       	ldi	r16, 0x0C	; 12
    5a52:	10 e0       	ldi	r17, 0x00	; 0
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+2*charsize,5*charhighte);}
    5a54:	fe 01       	movw	r30, r28
    5a56:	e1 0f       	add	r30, r17
    5a58:	f1 1d       	adc	r31, r1
    5a5a:	28 e2       	ldi	r18, 0x28	; 40
    5a5c:	40 2f       	mov	r20, r16
    5a5e:	62 81       	ldd	r22, Z+2	; 0x02
    5a60:	8f 89       	ldd	r24, Y+23	; 0x17
    5a62:	98 8d       	ldd	r25, Y+24	; 0x18
    5a64:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <_ZN7Display9draw_ASCIEhhh>
    5a68:	1f 5f       	subi	r17, 0xFF	; 255
    5a6a:	0a 5f       	subi	r16, 0xFA	; 250
    5a6c:	8e 89       	ldd	r24, Y+22	; 0x16
    5a6e:	18 17       	cp	r17, r24
    5a70:	88 f3       	brcs	.-30     	; 0x5a54 <_ZN5menue4drawEv+0x18a>
		buffersize=sprintf(buffer,"Display aus");
    5a72:	8c e0       	ldi	r24, 0x0C	; 12
    5a74:	e1 e6       	ldi	r30, 0x61	; 97
    5a76:	f2 e0       	ldi	r31, 0x02	; 2
    5a78:	d7 01       	movw	r26, r14
    5a7a:	01 90       	ld	r0, Z+
    5a7c:	0d 92       	st	X+, r0
    5a7e:	8a 95       	dec	r24
    5a80:	e1 f7       	brne	.-8      	; 0x5a7a <_ZN5menue4drawEv+0x1b0>
    5a82:	8b e0       	ldi	r24, 0x0B	; 11
    5a84:	8e 8b       	std	Y+22, r24	; 0x16
    5a86:	0c e0       	ldi	r16, 0x0C	; 12
    5a88:	10 e0       	ldi	r17, 0x00	; 0
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+2*charsize,6*charhighte);}
    5a8a:	fe 01       	movw	r30, r28
    5a8c:	e1 0f       	add	r30, r17
    5a8e:	f1 1d       	adc	r31, r1
    5a90:	20 e3       	ldi	r18, 0x30	; 48
    5a92:	40 2f       	mov	r20, r16
    5a94:	62 81       	ldd	r22, Z+2	; 0x02
    5a96:	8f 89       	ldd	r24, Y+23	; 0x17
    5a98:	98 8d       	ldd	r25, Y+24	; 0x18
    5a9a:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <_ZN7Display9draw_ASCIEhhh>
    5a9e:	1f 5f       	subi	r17, 0xFF	; 255
    5aa0:	0a 5f       	subi	r16, 0xFA	; 250
    5aa2:	8e 89       	ldd	r24, Y+22	; 0x16
    5aa4:	18 17       	cp	r17, r24
    5aa6:	88 f3       	brcs	.-30     	; 0x5a8a <_ZN5menue4drawEv+0x1c0>
		oled->draw_ASCI('>',0*charsize,(posy+2)*charhighte);
    5aa8:	2d a1       	ldd	r18, Y+37	; 0x25
    5aaa:	22 0f       	add	r18, r18
    5aac:	22 0f       	add	r18, r18
    5aae:	22 0f       	add	r18, r18
    5ab0:	20 5f       	subi	r18, 0xF0	; 240
    5ab2:	40 e0       	ldi	r20, 0x00	; 0
    5ab4:	6e e3       	ldi	r22, 0x3E	; 62
    5ab6:	8f 89       	ldd	r24, Y+23	; 0x17
    5ab8:	98 8d       	ldd	r25, Y+24	; 0x18
    5aba:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <_ZN7Display9draw_ASCIEhhh>
		oled->clearFrame();
	}

	//send the frame to the display
	void send(){
		oled->sendFrame();	
    5abe:	8f 89       	ldd	r24, Y+23	; 0x17
    5ac0:	98 8d       	ldd	r25, Y+24	; 0x18
    5ac2:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <_ZN7Display9sendFrameEv>
    5ac6:	04 c0       	rjmp	.+8      	; 0x5ad0 <_ZN5menue4drawEv+0x206>
		return 0;
	}
	
	//drawfunktion
	virtual void draw(){
		oled->clearFrame();
    5ac8:	10 e5       	ldi	r17, 0x50	; 80
    5aca:	c1 2c       	mov	r12, r1
    5acc:	d1 2c       	mov	r13, r1
    5ace:	54 cf       	rjmp	.-344    	; 0x5978 <_ZN5menue4drawEv+0xae>
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+2*charsize,5*charhighte);}
		buffersize=sprintf(buffer,"Display aus");
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+2*charsize,6*charhighte);}
		oled->draw_ASCI('>',0*charsize,(posy+2)*charhighte);
		send();
	}
    5ad0:	df 91       	pop	r29
    5ad2:	cf 91       	pop	r28
    5ad4:	1f 91       	pop	r17
    5ad6:	0f 91       	pop	r16
    5ad8:	ff 90       	pop	r15
    5ada:	ef 90       	pop	r14
    5adc:	df 90       	pop	r13
    5ade:	cf 90       	pop	r12
    5ae0:	08 95       	ret

00005ae2 <_Z12EEPROM_Writejh>:

#ifndef EEPROM_H_
#define EEPROM_H_

void EEPROM_Write(uint16_t adresse, uint8_t data){
	cli();	//zur sicherheit interrupts ausschalten
    5ae2:	f8 94       	cli
	while(EECR&(1<<EEPE));
    5ae4:	f9 99       	sbic	0x1f, 1	; 31
    5ae6:	fe cf       	rjmp	.-4      	; 0x5ae4 <_Z12EEPROM_Writejh+0x2>
	
	//schreibe adresse und data
	EEAR = adresse;
    5ae8:	92 bd       	out	0x22, r25	; 34
    5aea:	81 bd       	out	0x21, r24	; 33
	EEDR = data;
    5aec:	60 bd       	out	0x20, r22	; 32
	//fuehre schreiben aus
	EECR |= (1<<EEMPE);
    5aee:	fa 9a       	sbi	0x1f, 2	; 31
	EECR |= (1<<EEPE);
    5af0:	f9 9a       	sbi	0x1f, 1	; 31
	
	sei();
    5af2:	78 94       	sei
    5af4:	08 95       	ret

00005af6 <_ZN7wandern11tastendruckEPh>:
				name[i] = ' ';
			}
		}
	}
	
	uint8_t tastendruck(uint8_t *tast){
    5af6:	cf 93       	push	r28
    5af8:	df 93       	push	r29
    5afa:	ec 01       	movw	r28, r24
		if (*tast=='e')
    5afc:	fb 01       	movw	r30, r22
    5afe:	90 81       	ld	r25, Z
    5b00:	95 36       	cpi	r25, 0x65	; 101
    5b02:	09 f0       	breq	.+2      	; 0x5b06 <_ZN7wandern11tastendruckEPh+0x10>
    5b04:	41 c0       	rjmp	.+130    	; 0x5b88 <_ZN7wandern11tastendruckEPh+0x92>
		{
			rtc->Stunden	= gpsstunde;
    5b06:	e9 8d       	ldd	r30, Y+25	; 0x19
    5b08:	fa 8d       	ldd	r31, Y+26	; 0x1a
    5b0a:	80 91 9a 08 	lds	r24, 0x089A
    5b0e:	80 8b       	std	Z+16, r24	; 0x10
			rtc->Minuten	= gpsminute;
    5b10:	e9 8d       	ldd	r30, Y+25	; 0x19
    5b12:	fa 8d       	ldd	r31, Y+26	; 0x1a
    5b14:	80 91 99 08 	lds	r24, 0x0899
    5b18:	81 8b       	std	Z+17, r24	; 0x11
			rtc->Sekunden	= gpssekunde;
    5b1a:	e9 8d       	ldd	r30, Y+25	; 0x19
    5b1c:	fa 8d       	ldd	r31, Y+26	; 0x1a
    5b1e:	80 91 98 08 	lds	r24, 0x0898
    5b22:	82 8b       	std	Z+18, r24	; 0x12
			
			rtc->Tag		= gpsTag;
    5b24:	e9 8d       	ldd	r30, Y+25	; 0x19
    5b26:	fa 8d       	ldd	r31, Y+26	; 0x1a
    5b28:	80 91 97 08 	lds	r24, 0x0897
    5b2c:	84 8b       	std	Z+20, r24	; 0x14
			rtc->Monat		= gpsMonat;
    5b2e:	e9 8d       	ldd	r30, Y+25	; 0x19
    5b30:	fa 8d       	ldd	r31, Y+26	; 0x1a
    5b32:	80 91 96 08 	lds	r24, 0x0896
    5b36:	86 8b       	std	Z+22, r24	; 0x16
			rtc->Jahr		= gpsJahr;
    5b38:	e9 8d       	ldd	r30, Y+25	; 0x19
    5b3a:	fa 8d       	ldd	r31, Y+26	; 0x1a
    5b3c:	80 91 95 08 	lds	r24, 0x0895
    5b40:	87 8b       	std	Z+23, r24	; 0x17
			rtc->ausgabedatumneu();
    5b42:	89 8d       	ldd	r24, Y+25	; 0x19
    5b44:	9a 8d       	ldd	r25, Y+26	; 0x1a
    5b46:	0e 94 91 40 	call	0x8122	; 0x8122 <_ZN3RTC15ausgabedatumneuEv>
			//speichern der neuen Zeit im EEPROM
			EEPROM_Write(EEMINUTEN,rtc->Minuten);
    5b4a:	e9 8d       	ldd	r30, Y+25	; 0x19
    5b4c:	fa 8d       	ldd	r31, Y+26	; 0x1a
    5b4e:	61 89       	ldd	r22, Z+17	; 0x11
    5b50:	80 e0       	ldi	r24, 0x00	; 0
    5b52:	90 e0       	ldi	r25, 0x00	; 0
    5b54:	c6 df       	rcall	.-116    	; 0x5ae2 <_Z12EEPROM_Writejh>
			EEPROM_Write(EESTUNDEN,rtc->Stunden);
    5b56:	e9 8d       	ldd	r30, Y+25	; 0x19
    5b58:	fa 8d       	ldd	r31, Y+26	; 0x1a
    5b5a:	60 89       	ldd	r22, Z+16	; 0x10
    5b5c:	81 e0       	ldi	r24, 0x01	; 1
    5b5e:	90 e0       	ldi	r25, 0x00	; 0
    5b60:	c0 df       	rcall	.-128    	; 0x5ae2 <_Z12EEPROM_Writejh>
			EEPROM_Write(EETAGE,rtc->Tag);
    5b62:	e9 8d       	ldd	r30, Y+25	; 0x19
    5b64:	fa 8d       	ldd	r31, Y+26	; 0x1a
    5b66:	64 89       	ldd	r22, Z+20	; 0x14
    5b68:	82 e0       	ldi	r24, 0x02	; 2
    5b6a:	90 e0       	ldi	r25, 0x00	; 0
    5b6c:	ba df       	rcall	.-140    	; 0x5ae2 <_Z12EEPROM_Writejh>
			EEPROM_Write(EEMONAT,rtc->Monat);
    5b6e:	e9 8d       	ldd	r30, Y+25	; 0x19
    5b70:	fa 8d       	ldd	r31, Y+26	; 0x1a
    5b72:	66 89       	ldd	r22, Z+22	; 0x16
    5b74:	83 e0       	ldi	r24, 0x03	; 3
    5b76:	90 e0       	ldi	r25, 0x00	; 0
    5b78:	b4 df       	rcall	.-152    	; 0x5ae2 <_Z12EEPROM_Writejh>
			EEPROM_Write(EEJAHR,rtc->Jahr);
    5b7a:	e9 8d       	ldd	r30, Y+25	; 0x19
    5b7c:	fa 8d       	ldd	r31, Y+26	; 0x1a
    5b7e:	67 89       	ldd	r22, Z+23	; 0x17
    5b80:	84 e0       	ldi	r24, 0x04	; 4
    5b82:	90 e0       	ldi	r25, 0x00	; 0
    5b84:	ae df       	rcall	.-164    	; 0x5ae2 <_Z12EEPROM_Writejh>
    5b86:	14 c0       	rjmp	.+40     	; 0x5bb0 <_ZN7wandern11tastendruckEPh+0xba>
		}
		else if (*tast=='A')
    5b88:	91 34       	cpi	r25, 0x41	; 65
    5b8a:	11 f4       	brne	.+4      	; 0x5b90 <_ZN7wandern11tastendruckEPh+0x9a>
		{
			GPSENABLE();
    5b8c:	44 9a       	sbi	0x08, 4	; 8
    5b8e:	10 c0       	rjmp	.+32     	; 0x5bb0 <_ZN7wandern11tastendruckEPh+0xba>
		}
		else if (*tast=='B')
    5b90:	92 34       	cpi	r25, 0x42	; 66
    5b92:	11 f4       	brne	.+4      	; 0x5b98 <_ZN7wandern11tastendruckEPh+0xa2>
		{
			GPSDISABLE();
    5b94:	44 98       	cbi	0x08, 4	; 8
    5b96:	0c c0       	rjmp	.+24     	; 0x5bb0 <_ZN7wandern11tastendruckEPh+0xba>
		}
		else if (*tast=='X')
    5b98:	98 35       	cpi	r25, 0x58	; 88
    5b9a:	51 f4       	brne	.+20     	; 0x5bb0 <_ZN7wandern11tastendruckEPh+0xba>
		{
			druck.pressure0 = druck.pressure;
    5b9c:	ef e1       	ldi	r30, 0x1F	; 31
    5b9e:	f9 e0       	ldi	r31, 0x09	; 9
    5ba0:	80 81       	ld	r24, Z
    5ba2:	91 81       	ldd	r25, Z+1	; 0x01
    5ba4:	a2 81       	ldd	r26, Z+2	; 0x02
    5ba6:	b3 81       	ldd	r27, Z+3	; 0x03
    5ba8:	84 83       	std	Z+4, r24	; 0x04
    5baa:	95 83       	std	Z+5, r25	; 0x05
    5bac:	a6 83       	std	Z+6, r26	; 0x06
    5bae:	b7 83       	std	Z+7, r27	; 0x07
		}
		return 0;
	}
    5bb0:	80 e0       	ldi	r24, 0x00	; 0
    5bb2:	df 91       	pop	r29
    5bb4:	cf 91       	pop	r28
    5bb6:	08 95       	ret

00005bb8 <_Z11EEPROM_Readj>:
}

uint8_t EEPROM_Read(uint16_t adresse){
	cli();	//zur sicherheit interrupts ausschalten
    5bb8:	f8 94       	cli
	while(EECR&(1<<EEPE));
    5bba:	f9 99       	sbic	0x1f, 1	; 31
    5bbc:	fe cf       	rjmp	.-4      	; 0x5bba <_Z11EEPROM_Readj+0x2>
	
	//schreibe adresse
	EEAR = adresse;
    5bbe:	92 bd       	out	0x22, r25	; 34
    5bc0:	81 bd       	out	0x21, r24	; 33
	//fuehre lesen aus
	EECR |= (1<<EERE);
    5bc2:	f8 9a       	sbi	0x1f, 0	; 31
	
	sei();
    5bc4:	78 94       	sei
	return EEDR;
    5bc6:	80 b5       	in	r24, 0x20	; 32
}
    5bc8:	08 95       	ret

00005bca <__vector_16>:

//schlechte variante der Uhreinstellung
void uhreinstellen();

//SD karten Timer
ISR(TIMER0_COMPA_vect){
    5bca:	1f 92       	push	r1
    5bcc:	0f 92       	push	r0
    5bce:	0f b6       	in	r0, 0x3f	; 63
    5bd0:	0f 92       	push	r0
    5bd2:	11 24       	eor	r1, r1
    5bd4:	0b b6       	in	r0, 0x3b	; 59
    5bd6:	0f 92       	push	r0
    5bd8:	2f 93       	push	r18
    5bda:	3f 93       	push	r19
    5bdc:	4f 93       	push	r20
    5bde:	5f 93       	push	r21
    5be0:	6f 93       	push	r22
    5be2:	7f 93       	push	r23
    5be4:	8f 93       	push	r24
    5be6:	9f 93       	push	r25
    5be8:	af 93       	push	r26
    5bea:	bf 93       	push	r27
    5bec:	ef 93       	push	r30
    5bee:	ff 93       	push	r31
	disk_timerproc();	//Timer der SD Karte
    5bf0:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <disk_timerproc>
}
    5bf4:	ff 91       	pop	r31
    5bf6:	ef 91       	pop	r30
    5bf8:	bf 91       	pop	r27
    5bfa:	af 91       	pop	r26
    5bfc:	9f 91       	pop	r25
    5bfe:	8f 91       	pop	r24
    5c00:	7f 91       	pop	r23
    5c02:	6f 91       	pop	r22
    5c04:	5f 91       	pop	r21
    5c06:	4f 91       	pop	r20
    5c08:	3f 91       	pop	r19
    5c0a:	2f 91       	pop	r18
    5c0c:	0f 90       	pop	r0
    5c0e:	0b be       	out	0x3b, r0	; 59
    5c10:	0f 90       	pop	r0
    5c12:	0f be       	out	0x3f, r0	; 63
    5c14:	0f 90       	pop	r0
    5c16:	1f 90       	pop	r1
    5c18:	18 95       	reti

00005c1a <__vector_11>:

ISR(TIMER2_OVF_vect){	//Vektor fuer die RTC
    5c1a:	1f 92       	push	r1
    5c1c:	0f 92       	push	r0
    5c1e:	0f b6       	in	r0, 0x3f	; 63
    5c20:	0f 92       	push	r0
    5c22:	11 24       	eor	r1, r1
    5c24:	0b b6       	in	r0, 0x3b	; 59
    5c26:	0f 92       	push	r0
    5c28:	8f 93       	push	r24
    5c2a:	ef 93       	push	r30
    5c2c:	ff 93       	push	r31
	//TCNT2=TIMER2RTCTIME;
	rtc.Sekunden++;
    5c2e:	e4 e4       	ldi	r30, 0x44	; 68
    5c30:	fe e0       	ldi	r31, 0x0E	; 14
    5c32:	82 89       	ldd	r24, Z+18	; 0x12
    5c34:	8f 5f       	subi	r24, 0xFF	; 255
    5c36:	82 8b       	std	Z+18, r24	; 0x12
	rtc.interupts|= (1<<sekundeninterupt);
    5c38:	80 8d       	ldd	r24, Z+24	; 0x18
    5c3a:	82 60       	ori	r24, 0x02	; 2
    5c3c:	80 8f       	std	Z+24, r24	; 0x18
}
    5c3e:	ff 91       	pop	r31
    5c40:	ef 91       	pop	r30
    5c42:	8f 91       	pop	r24
    5c44:	0f 90       	pop	r0
    5c46:	0b be       	out	0x3b, r0	; 59
    5c48:	0f 90       	pop	r0
    5c4a:	0f be       	out	0x3f, r0	; 63
    5c4c:	0f 90       	pop	r0
    5c4e:	1f 90       	pop	r1
    5c50:	18 95       	reti

00005c52 <__vector_13>:

ISR(TIMER1_COMPA_vect){
    5c52:	1f 92       	push	r1
    5c54:	0f 92       	push	r0
    5c56:	0f b6       	in	r0, 0x3f	; 63
    5c58:	0f 92       	push	r0
    5c5a:	11 24       	eor	r1, r1
    5c5c:	8f 93       	push	r24
	statusreg |= (1<<updaterate);
    5c5e:	80 91 13 09 	lds	r24, 0x0913
    5c62:	81 60       	ori	r24, 0x01	; 1
    5c64:	80 93 13 09 	sts	0x0913, r24
}
    5c68:	8f 91       	pop	r24
    5c6a:	0f 90       	pop	r0
    5c6c:	0f be       	out	0x3f, r0	; 63
    5c6e:	0f 90       	pop	r0
    5c70:	1f 90       	pop	r1
    5c72:	18 95       	reti

00005c74 <__vector_20>:
uint8_t gpssekunde;
uint8_t gpsTag;
uint8_t gpsMonat;
uint8_t gpsJahr;

ISR(USART0_RX_vect){
    5c74:	1f 92       	push	r1
    5c76:	0f 92       	push	r0
    5c78:	0f b6       	in	r0, 0x3f	; 63
    5c7a:	0f 92       	push	r0
    5c7c:	11 24       	eor	r1, r1
    5c7e:	0b b6       	in	r0, 0x3b	; 59
    5c80:	0f 92       	push	r0
    5c82:	2f 93       	push	r18
    5c84:	8f 93       	push	r24
    5c86:	9f 93       	push	r25
    5c88:	ef 93       	push	r30
    5c8a:	ff 93       	push	r31
	uint8_t temp = UDR0;
    5c8c:	20 91 c6 00 	lds	r18, 0x00C6
	if (temp == '$' && !(gpsstatus&(1<<complete)) && !(gpsstatus&(1<<completenotvalid)))
    5c90:	24 32       	cpi	r18, 0x24	; 36
    5c92:	51 f4       	brne	.+20     	; 0x5ca8 <__vector_20+0x34>
    5c94:	80 91 10 09 	lds	r24, 0x0910
    5c98:	98 2f       	mov	r25, r24
    5c9a:	9c 70       	andi	r25, 0x0C	; 12
    5c9c:	29 f4       	brne	.+10     	; 0x5ca8 <__vector_20+0x34>
	{
		gpscounter = 0;
    5c9e:	10 92 c7 08 	sts	0x08C7, r1
		gpsstatus |= (1<<message);
    5ca2:	81 60       	ori	r24, 0x01	; 1
    5ca4:	80 93 10 09 	sts	0x0910, r24
	}
	if ((gpsstatus&(1<<message)))
    5ca8:	90 91 10 09 	lds	r25, 0x0910
    5cac:	90 ff       	sbrs	r25, 0
    5cae:	3c c0       	rjmp	.+120    	; 0x5d28 <__vector_20+0xb4>
	{
		gpsdata[gpscounter] = temp;
    5cb0:	80 91 c7 08 	lds	r24, 0x08C7
    5cb4:	e8 2f       	mov	r30, r24
    5cb6:	f0 e0       	ldi	r31, 0x00	; 0
    5cb8:	e8 53       	subi	r30, 0x38	; 56
    5cba:	f7 4f       	sbci	r31, 0xF7	; 247
    5cbc:	20 83       	st	Z, r18
		gpscounter++;
    5cbe:	8f 5f       	subi	r24, 0xFF	; 255
    5cc0:	80 93 c7 08 	sts	0x08C7, r24
		if (gpscounter>72)
    5cc4:	89 34       	cpi	r24, 0x49	; 73
    5cc6:	20 f0       	brcs	.+8      	; 0x5cd0 <__vector_20+0x5c>
		{
			gpsstatus &= ~(1<<message);
    5cc8:	9e 7f       	andi	r25, 0xFE	; 254
    5cca:	90 93 10 09 	sts	0x0910, r25
    5cce:	2c c0       	rjmp	.+88     	; 0x5d28 <__vector_20+0xb4>
		}
		else if (gpscounter==19)
    5cd0:	83 31       	cpi	r24, 0x13	; 19
    5cd2:	c9 f4       	brne	.+50     	; 0x5d06 <__vector_20+0x92>
		{
			if (gpsdata[4]=='M' && gpsdata[5]=='C')
    5cd4:	80 91 cc 08 	lds	r24, 0x08CC
    5cd8:	8d 34       	cpi	r24, 0x4D	; 77
    5cda:	89 f4       	brne	.+34     	; 0x5cfe <__vector_20+0x8a>
    5cdc:	80 91 cd 08 	lds	r24, 0x08CD
    5ce0:	83 34       	cpi	r24, 0x43	; 67
    5ce2:	69 f4       	brne	.+26     	; 0x5cfe <__vector_20+0x8a>
			{
				if (gpsdata[18]!='A')
    5ce4:	80 91 da 08 	lds	r24, 0x08DA
    5ce8:	81 34       	cpi	r24, 0x41	; 65
    5cea:	29 f0       	breq	.+10     	; 0x5cf6 <__vector_20+0x82>
				{
					gpsstatus &= ~((1<<valid));
    5cec:	9d 7f       	andi	r25, 0xFD	; 253
					gpsstatus |= (1<<notvalidgetdate);
    5cee:	90 61       	ori	r25, 0x10	; 16
    5cf0:	90 93 10 09 	sts	0x0910, r25
    5cf4:	19 c0       	rjmp	.+50     	; 0x5d28 <__vector_20+0xb4>
				}
				else{
					gpsstatus |= (1<<valid);
    5cf6:	92 60       	ori	r25, 0x02	; 2
    5cf8:	90 93 10 09 	sts	0x0910, r25
    5cfc:	15 c0       	rjmp	.+42     	; 0x5d28 <__vector_20+0xb4>
				}
			}
			else{
				gpsstatus &= ~(1<<valid);
				gpsstatus &= ~(1<<message);
    5cfe:	9c 7f       	andi	r25, 0xFC	; 252
    5d00:	90 93 10 09 	sts	0x0910, r25
    5d04:	11 c0       	rjmp	.+34     	; 0x5d28 <__vector_20+0xb4>
			}
		}
		else if (gpscounter == 42 && (gpsstatus&(1<<notvalidgetdate)))
    5d06:	8a 32       	cpi	r24, 0x2A	; 42
    5d08:	39 f4       	brne	.+14     	; 0x5d18 <__vector_20+0xa4>
    5d0a:	94 ff       	sbrs	r25, 4
    5d0c:	0d c0       	rjmp	.+26     	; 0x5d28 <__vector_20+0xb4>
		{
			gpsstatus |= (1<<completenotvalid);
			gpsstatus &= ~((1<<message) | (1<<notvalidgetdate));
    5d0e:	9e 7e       	andi	r25, 0xEE	; 238
    5d10:	98 60       	ori	r25, 0x08	; 8
    5d12:	90 93 10 09 	sts	0x0910, r25
    5d16:	08 c0       	rjmp	.+16     	; 0x5d28 <__vector_20+0xb4>
		}
		else if (gpscounter == 70 && (gpsstatus&(1<<valid)))
    5d18:	86 34       	cpi	r24, 0x46	; 70
    5d1a:	31 f4       	brne	.+12     	; 0x5d28 <__vector_20+0xb4>
    5d1c:	91 ff       	sbrs	r25, 1
    5d1e:	04 c0       	rjmp	.+8      	; 0x5d28 <__vector_20+0xb4>
		{
			gpsstatus |= (1<<complete);
			gpsstatus &= ~((1<<message) | (1<<valid));
    5d20:	9c 7f       	andi	r25, 0xFC	; 252
    5d22:	94 60       	ori	r25, 0x04	; 4
    5d24:	90 93 10 09 	sts	0x0910, r25
		}
	}
}
    5d28:	ff 91       	pop	r31
    5d2a:	ef 91       	pop	r30
    5d2c:	9f 91       	pop	r25
    5d2e:	8f 91       	pop	r24
    5d30:	2f 91       	pop	r18
    5d32:	0f 90       	pop	r0
    5d34:	0b be       	out	0x3b, r0	; 59
    5d36:	0f 90       	pop	r0
    5d38:	0f be       	out	0x3f, r0	; 63
    5d3a:	0f 90       	pop	r0
    5d3c:	1f 90       	pop	r1
    5d3e:	18 95       	reti

00005d40 <_Z6nullenv>:
double geschw;
double strecke;
double maxgeschw;
uint32_t Fahrtzeit;
void nullen(){
	geschw = 0;
    5d40:	10 92 91 08 	sts	0x0891, r1
    5d44:	10 92 92 08 	sts	0x0892, r1
    5d48:	10 92 93 08 	sts	0x0893, r1
    5d4c:	10 92 94 08 	sts	0x0894, r1
	strecke = 0;
    5d50:	10 92 8d 08 	sts	0x088D, r1
    5d54:	10 92 8e 08 	sts	0x088E, r1
    5d58:	10 92 8f 08 	sts	0x088F, r1
    5d5c:	10 92 90 08 	sts	0x0890, r1
	maxgeschw = 0;
    5d60:	10 92 89 08 	sts	0x0889, r1
    5d64:	10 92 8a 08 	sts	0x088A, r1
    5d68:	10 92 8b 08 	sts	0x088B, r1
    5d6c:	10 92 8c 08 	sts	0x088C, r1
	Fahrtzeit = 0;
    5d70:	10 92 85 08 	sts	0x0885, r1
    5d74:	10 92 86 08 	sts	0x0886, r1
    5d78:	10 92 87 08 	sts	0x0887, r1
    5d7c:	10 92 88 08 	sts	0x0888, r1
    5d80:	08 95       	ret

00005d82 <_ZN5tacho11tastendruckEPh>:
		nullen();
	}

	//Tasterhandler
	uint8_t tastendruck(uint8_t *tast){
		if (*tast=='e')
    5d82:	fb 01       	movw	r30, r22
    5d84:	80 81       	ld	r24, Z
    5d86:	85 36       	cpi	r24, 0x65	; 101
    5d88:	09 f4       	brne	.+2      	; 0x5d8c <_ZN5tacho11tastendruckEPh+0xa>
		{
			nullen();
    5d8a:	da df       	rcall	.-76     	; 0x5d40 <_Z6nullenv>
		}
		return 0;
	}
    5d8c:	80 e0       	ldi	r24, 0x00	; 0
    5d8e:	08 95       	ret

00005d90 <_Z13reed_debouncePVhh>:
}
uint8_t reed_debounce(volatile uint8_t *port, uint8_t pin)
{
	if ( (*port & (1 << pin)) )
    5d90:	fc 01       	movw	r30, r24
    5d92:	20 81       	ld	r18, Z
    5d94:	30 e0       	ldi	r19, 0x00	; 0
    5d96:	06 2e       	mov	r0, r22
    5d98:	02 c0       	rjmp	.+4      	; 0x5d9e <_Z13reed_debouncePVhh+0xe>
    5d9a:	35 95       	asr	r19
    5d9c:	27 95       	ror	r18
    5d9e:	0a 94       	dec	r0
    5da0:	e2 f7       	brpl	.-8      	; 0x5d9a <_Z13reed_debouncePVhh+0xa>
    5da2:	20 ff       	sbrs	r18, 0
    5da4:	16 c0       	rjmp	.+44     	; 0x5dd2 <_Z13reed_debouncePVhh+0x42>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    5da6:	ef e0       	ldi	r30, 0x0F	; 15
    5da8:	f7 e2       	ldi	r31, 0x27	; 39
    5daa:	31 97       	sbiw	r30, 0x01	; 1
    5dac:	f1 f7       	brne	.-4      	; 0x5daa <_Z13reed_debouncePVhh+0x1a>
    5dae:	00 c0       	rjmp	.+0      	; 0x5db0 <_Z13reed_debouncePVhh+0x20>
    5db0:	00 00       	nop
	{
		/* Pin wurde auf Masse gezogen, ms warten   */
		_delay_ms(REEDMS);
		if ( !(*port & (1 << pin)) )
    5db2:	fc 01       	movw	r30, r24
    5db4:	80 81       	ld	r24, Z
    5db6:	90 e0       	ldi	r25, 0x00	; 0
    5db8:	02 c0       	rjmp	.+4      	; 0x5dbe <_Z13reed_debouncePVhh+0x2e>
    5dba:	95 95       	asr	r25
    5dbc:	87 95       	ror	r24
    5dbe:	6a 95       	dec	r22
    5dc0:	e2 f7       	brpl	.-8      	; 0x5dba <_Z13reed_debouncePVhh+0x2a>
    5dc2:	80 fd       	sbrc	r24, 0
    5dc4:	08 c0       	rjmp	.+16     	; 0x5dd6 <_Z13reed_debouncePVhh+0x46>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    5dc6:	f2 e0       	ldi	r31, 0x02	; 2
    5dc8:	fa 95       	dec	r31
    5dca:	f1 f7       	brne	.-4      	; 0x5dc8 <_Z13reed_debouncePVhh+0x38>
    5dcc:	00 c0       	rjmp	.+0      	; 0x5dce <_Z13reed_debouncePVhh+0x3e>
		{
			/* Anwender Zeit zum Loslassen des Tasters geben */
			_delay_us(1);
			return 1;
    5dce:	81 e0       	ldi	r24, 0x01	; 1
    5dd0:	08 95       	ret
		}
	}
	return 0;
    5dd2:	80 e0       	ldi	r24, 0x00	; 0
    5dd4:	08 95       	ret
    5dd6:	80 e0       	ldi	r24, 0x00	; 0
}
    5dd8:	08 95       	ret

00005dda <_Z15geschwindigkeitf>:
//Berechnung der Geschwindigkeit
void geschwindigkeit(float durch){
    5dda:	cf 92       	push	r12
    5ddc:	df 92       	push	r13
    5dde:	ef 92       	push	r14
    5de0:	ff 92       	push	r15
    5de2:	cf 93       	push	r28
    5de4:	df 93       	push	r29
	//Einholen der Daten und ruecksetzen
	uint16_t zaehlungen = TCNT1;
    5de6:	e4 e8       	ldi	r30, 0x84	; 132
    5de8:	f0 e0       	ldi	r31, 0x00	; 0
    5dea:	c0 81       	ld	r28, Z
    5dec:	d1 81       	ldd	r29, Z+1	; 0x01
	TCNT1 = 0;
    5dee:	11 82       	std	Z+1, r1	; 0x01
    5df0:	10 82       	st	Z, r1
	//Berechnung
	double temp = geschw;
	double umlaufzeit = (REEDMS/1000.0+(zaehlungen/zaehlungenprozeiteinheit)*zeitproachtzaehlungen);
	geschw = (durch)*M_PI*3.6;
    5df2:	2b ed       	ldi	r18, 0xDB	; 219
    5df4:	3f e0       	ldi	r19, 0x0F	; 15
    5df6:	49 e4       	ldi	r20, 0x49	; 73
    5df8:	50 e4       	ldi	r21, 0x40	; 64
    5dfa:	0e 94 f8 43 	call	0x87f0	; 0x87f0 <__mulsf3>
    5dfe:	26 e6       	ldi	r18, 0x66	; 102
    5e00:	36 e6       	ldi	r19, 0x66	; 102
    5e02:	46 e6       	ldi	r20, 0x66	; 102
    5e04:	50 e4       	ldi	r21, 0x40	; 64
    5e06:	0e 94 f8 43 	call	0x87f0	; 0x87f0 <__mulsf3>
    5e0a:	6b 01       	movw	r12, r22
    5e0c:	7c 01       	movw	r14, r24
	//Einholen der Daten und ruecksetzen
	uint16_t zaehlungen = TCNT1;
	TCNT1 = 0;
	//Berechnung
	double temp = geschw;
	double umlaufzeit = (REEDMS/1000.0+(zaehlungen/zaehlungenprozeiteinheit)*zeitproachtzaehlungen);
    5e0e:	be 01       	movw	r22, r28
    5e10:	80 e0       	ldi	r24, 0x00	; 0
    5e12:	90 e0       	ldi	r25, 0x00	; 0
    5e14:	0e 94 cd 42 	call	0x859a	; 0x859a <__floatunsisf>
    5e18:	20 e0       	ldi	r18, 0x00	; 0
    5e1a:	30 e0       	ldi	r19, 0x00	; 0
    5e1c:	40 e0       	ldi	r20, 0x00	; 0
    5e1e:	5e e3       	ldi	r21, 0x3E	; 62
    5e20:	0e 94 f8 43 	call	0x87f0	; 0x87f0 <__mulsf3>
    5e24:	2d eb       	ldi	r18, 0xBD	; 189
    5e26:	37 e3       	ldi	r19, 0x37	; 55
    5e28:	46 e8       	ldi	r20, 0x86	; 134
    5e2a:	5a e3       	ldi	r21, 0x3A	; 58
    5e2c:	0e 94 f8 43 	call	0x87f0	; 0x87f0 <__mulsf3>
    5e30:	2a e0       	ldi	r18, 0x0A	; 10
    5e32:	37 ed       	ldi	r19, 0xD7	; 215
    5e34:	43 ea       	ldi	r20, 0xA3	; 163
    5e36:	5b e3       	ldi	r21, 0x3B	; 59
    5e38:	0e 94 93 41 	call	0x8326	; 0x8326 <__addsf3>
    5e3c:	9b 01       	movw	r18, r22
    5e3e:	ac 01       	movw	r20, r24
	geschw = (durch)*M_PI*3.6;
	geschw /= umlaufzeit;
    5e40:	c7 01       	movw	r24, r14
    5e42:	b6 01       	movw	r22, r12
    5e44:	0e 94 fa 41 	call	0x83f4	; 0x83f4 <__divsf3>
	//Mittelwert aus der letzten Messung zum Fehler minimieren
	geschw += temp;
    5e48:	20 91 91 08 	lds	r18, 0x0891
    5e4c:	30 91 92 08 	lds	r19, 0x0892
    5e50:	40 91 93 08 	lds	r20, 0x0893
    5e54:	50 91 94 08 	lds	r21, 0x0894
    5e58:	0e 94 93 41 	call	0x8326	; 0x8326 <__addsf3>
	geschw /= 2.0;
    5e5c:	20 e0       	ldi	r18, 0x00	; 0
    5e5e:	30 e0       	ldi	r19, 0x00	; 0
    5e60:	40 e0       	ldi	r20, 0x00	; 0
    5e62:	5f e3       	ldi	r21, 0x3F	; 63
    5e64:	0e 94 f8 43 	call	0x87f0	; 0x87f0 <__mulsf3>
    5e68:	6b 01       	movw	r12, r22
    5e6a:	7c 01       	movw	r14, r24
	if (geschw >=160)
    5e6c:	20 e0       	ldi	r18, 0x00	; 0
    5e6e:	30 e0       	ldi	r19, 0x00	; 0
    5e70:	40 e2       	ldi	r20, 0x20	; 32
    5e72:	53 e4       	ldi	r21, 0x43	; 67
    5e74:	0e 94 ed 43 	call	0x87da	; 0x87da <__gesf2>
    5e78:	88 23       	and	r24, r24
    5e7a:	4c f4       	brge	.+18     	; 0x5e8e <_Z15geschwindigkeitf+0xb4>
	double umlaufzeit = (REEDMS/1000.0+(zaehlungen/zaehlungenprozeiteinheit)*zeitproachtzaehlungen);
	geschw = (durch)*M_PI*3.6;
	geschw /= umlaufzeit;
	//Mittelwert aus der letzten Messung zum Fehler minimieren
	geschw += temp;
	geschw /= 2.0;
    5e7c:	c0 92 91 08 	sts	0x0891, r12
    5e80:	d0 92 92 08 	sts	0x0892, r13
    5e84:	e0 92 93 08 	sts	0x0893, r14
    5e88:	f0 92 94 08 	sts	0x0894, r15
    5e8c:	08 c0       	rjmp	.+16     	; 0x5e9e <_Z15geschwindigkeitf+0xc4>
	if (geschw >=160)
	{
		geschw=0;
    5e8e:	10 92 91 08 	sts	0x0891, r1
    5e92:	10 92 92 08 	sts	0x0892, r1
    5e96:	10 92 93 08 	sts	0x0893, r1
    5e9a:	10 92 94 08 	sts	0x0894, r1
	}
}
    5e9e:	df 91       	pop	r29
    5ea0:	cf 91       	pop	r28
    5ea2:	ff 90       	pop	r15
    5ea4:	ef 90       	pop	r14
    5ea6:	df 90       	pop	r13
    5ea8:	cf 90       	pop	r12
    5eaa:	08 95       	ret

00005eac <get_fattime>:

FATFS FATFS_Obj;
FIL logger;

DWORD get_fattime (void)
{
    5eac:	0f 93       	push	r16
    5eae:	1f 93       	push	r17
	/* Pack date and time into a DWORD variable */
	return	  ((DWORD)((2000+rtc.Jahr) - 1980) << 25)
	| ((DWORD)rtc.Monat << 21)
	| ((DWORD)rtc.Tag << 16)
    5eb0:	e4 e4       	ldi	r30, 0x44	; 68
    5eb2:	fe e0       	ldi	r31, 0x0E	; 14
    5eb4:	24 89       	ldd	r18, Z+20	; 0x14

DWORD get_fattime (void)
{
	/* Pack date and time into a DWORD variable */
	return	  ((DWORD)((2000+rtc.Jahr) - 1980) << 25)
	| ((DWORD)rtc.Monat << 21)
    5eb6:	86 89       	ldd	r24, Z+22	; 0x16
    5eb8:	90 e0       	ldi	r25, 0x00	; 0
    5eba:	a0 e0       	ldi	r26, 0x00	; 0
    5ebc:	b0 e0       	ldi	r27, 0x00	; 0
    5ebe:	07 2e       	mov	r0, r23
    5ec0:	75 e1       	ldi	r23, 0x15	; 21
    5ec2:	88 0f       	add	r24, r24
    5ec4:	99 1f       	adc	r25, r25
    5ec6:	aa 1f       	adc	r26, r26
    5ec8:	bb 1f       	adc	r27, r27
    5eca:	7a 95       	dec	r23
    5ecc:	d1 f7       	brne	.-12     	; 0x5ec2 <get_fattime+0x16>
    5ece:	70 2d       	mov	r23, r0
    5ed0:	a2 2b       	or	r26, r18
	| ((DWORD)rtc.Tag << 16)
	| ((DWORD)rtc.Stunden << 11)
    5ed2:	40 89       	ldd	r20, Z+16	; 0x10
    5ed4:	50 e0       	ldi	r21, 0x00	; 0
    5ed6:	60 e0       	ldi	r22, 0x00	; 0
    5ed8:	70 e0       	ldi	r23, 0x00	; 0
    5eda:	03 2e       	mov	r0, r19
    5edc:	3b e0       	ldi	r19, 0x0B	; 11
    5ede:	44 0f       	add	r20, r20
    5ee0:	55 1f       	adc	r21, r21
    5ee2:	66 1f       	adc	r22, r22
    5ee4:	77 1f       	adc	r23, r23
    5ee6:	3a 95       	dec	r19
    5ee8:	d1 f7       	brne	.-12     	; 0x5ede <get_fattime+0x32>
    5eea:	30 2d       	mov	r19, r0
    5eec:	84 2b       	or	r24, r20
    5eee:	95 2b       	or	r25, r21
    5ef0:	a6 2b       	or	r26, r22
    5ef2:	b7 2b       	or	r27, r23
	| ((DWORD)rtc.Minuten << 5)
    5ef4:	41 89       	ldd	r20, Z+17	; 0x11
    5ef6:	50 e0       	ldi	r21, 0x00	; 0
    5ef8:	60 e0       	ldi	r22, 0x00	; 0
    5efa:	70 e0       	ldi	r23, 0x00	; 0
    5efc:	44 0f       	add	r20, r20
    5efe:	55 1f       	adc	r21, r21
    5f00:	66 1f       	adc	r22, r22
    5f02:	77 1f       	adc	r23, r23
    5f04:	44 0f       	add	r20, r20
    5f06:	55 1f       	adc	r21, r21
    5f08:	66 1f       	adc	r22, r22
    5f0a:	77 1f       	adc	r23, r23
    5f0c:	44 0f       	add	r20, r20
    5f0e:	55 1f       	adc	r21, r21
    5f10:	66 1f       	adc	r22, r22
    5f12:	77 1f       	adc	r23, r23
    5f14:	44 0f       	add	r20, r20
    5f16:	55 1f       	adc	r21, r21
    5f18:	66 1f       	adc	r22, r22
    5f1a:	77 1f       	adc	r23, r23
    5f1c:	44 0f       	add	r20, r20
    5f1e:	55 1f       	adc	r21, r21
    5f20:	66 1f       	adc	r22, r22
    5f22:	77 1f       	adc	r23, r23
    5f24:	84 2b       	or	r24, r20
    5f26:	95 2b       	or	r25, r21
    5f28:	a6 2b       	or	r26, r22
    5f2a:	b7 2b       	or	r27, r23
	| ((DWORD)rtc.Sekunden >> 1);
    5f2c:	42 89       	ldd	r20, Z+18	; 0x12
    5f2e:	50 e0       	ldi	r21, 0x00	; 0
    5f30:	60 e0       	ldi	r22, 0x00	; 0
    5f32:	70 e0       	ldi	r23, 0x00	; 0
    5f34:	76 95       	lsr	r23
    5f36:	67 95       	ror	r22
    5f38:	57 95       	ror	r21
    5f3a:	47 95       	ror	r20
    5f3c:	48 2b       	or	r20, r24
    5f3e:	59 2b       	or	r21, r25
    5f40:	6a 2b       	or	r22, r26
    5f42:	7b 2b       	or	r23, r27
FIL logger;

DWORD get_fattime (void)
{
	/* Pack date and time into a DWORD variable */
	return	  ((DWORD)((2000+rtc.Jahr) - 1980) << 25)
    5f44:	87 89       	ldd	r24, Z+23	; 0x17
    5f46:	90 e0       	ldi	r25, 0x00	; 0
    5f48:	44 96       	adiw	r24, 0x14	; 20
    5f4a:	09 2e       	mov	r0, r25
    5f4c:	00 0c       	add	r0, r0
    5f4e:	aa 0b       	sbc	r26, r26
    5f50:	bb 0b       	sbc	r27, r27
    5f52:	07 2e       	mov	r0, r23
    5f54:	79 e1       	ldi	r23, 0x19	; 25
    5f56:	88 0f       	add	r24, r24
    5f58:	99 1f       	adc	r25, r25
    5f5a:	aa 1f       	adc	r26, r26
    5f5c:	bb 1f       	adc	r27, r27
    5f5e:	7a 95       	dec	r23
    5f60:	d1 f7       	brne	.-12     	; 0x5f56 <get_fattime+0xaa>
    5f62:	70 2d       	mov	r23, r0
	| ((DWORD)rtc.Monat << 21)
	| ((DWORD)rtc.Tag << 16)
	| ((DWORD)rtc.Stunden << 11)
	| ((DWORD)rtc.Minuten << 5)
	| ((DWORD)rtc.Sekunden >> 1);
    5f64:	8a 01       	movw	r16, r20
    5f66:	9b 01       	movw	r18, r22
    5f68:	08 2b       	or	r16, r24
    5f6a:	19 2b       	or	r17, r25
    5f6c:	2a 2b       	or	r18, r26
    5f6e:	3b 2b       	or	r19, r27
    5f70:	c9 01       	movw	r24, r18
    5f72:	b8 01       	movw	r22, r16
}
    5f74:	1f 91       	pop	r17
    5f76:	0f 91       	pop	r16
    5f78:	08 95       	ret

00005f7a <_Z15initialisierungv>:
		maininterupthandler(Folien[position]);
		gpshandler();
    }
}

void initialisierung(){
    5f7a:	ff 92       	push	r15
    5f7c:	0f 93       	push	r16
    5f7e:	1f 93       	push	r17
    5f80:	cf 93       	push	r28
    5f82:	df 93       	push	r29
    5f84:	cd b7       	in	r28, 0x3d	; 61
    5f86:	de b7       	in	r29, 0x3e	; 62
    5f88:	a9 97       	sbiw	r28, 0x29	; 41
    5f8a:	0f b6       	in	r0, 0x3f	; 63
    5f8c:	f8 94       	cli
    5f8e:	de bf       	out	0x3e, r29	; 62
    5f90:	0f be       	out	0x3f, r0	; 63
    5f92:	cd bf       	out	0x3d, r28	; 61
	//GPS EN aktivieren	
	DDRC |= (1<<PINC4);
    5f94:	3c 9a       	sbi	0x07, 4	; 7
	GPSDISABLE();
    5f96:	44 98       	cbi	0x08, 4	; 8
	//GPSENABLE();
	//nullen der Flagregister
	anzeige=0;
    5f98:	10 92 14 09 	sts	0x0914, r1
	statusreg=0;
    5f9c:	10 92 13 09 	sts	0x0913, r1
	position=0;
    5fa0:	10 92 12 09 	sts	0x0912, r1
	FPS=0;
    5fa4:	10 92 11 09 	sts	0x0911, r1
	
	//initialisieren des Zaehler fuer die Winkelgeschw sowie den Timer
	TCNT1 = 0;
    5fa8:	10 92 85 00 	sts	0x0085, r1
    5fac:	10 92 84 00 	sts	0x0084, r1
	TIMSK1 = 0;
    5fb0:	10 92 6f 00 	sts	0x006F, r1
	TCCR1B = ((1<<CS12) | (1<<CS10));
    5fb4:	85 e0       	ldi	r24, 0x05	; 5
    5fb6:	80 93 81 00 	sts	0x0081, r24
	
	//Eingang fuer den Reedkontak schalten mit internem Pullup
	DDRA |= ((1<<PORTA6));
    5fba:	0e 9a       	sbi	0x01, 6	; 1
	PORTA |= (1<<PORTA6);
    5fbc:	16 9a       	sbi	0x02, 6	; 2
	
	//ADC Initialisieren auf CH0
	ADMUX = (1<<REFS0);
    5fbe:	80 e4       	ldi	r24, 0x40	; 64
    5fc0:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA = (1<<ADPS1) | (1<<ADPS0);
    5fc4:	ea e7       	ldi	r30, 0x7A	; 122
    5fc6:	f0 e0       	ldi	r31, 0x00	; 0
    5fc8:	83 e0       	ldi	r24, 0x03	; 3
    5fca:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADEN);
    5fcc:	80 81       	ld	r24, Z
    5fce:	80 68       	ori	r24, 0x80	; 128
    5fd0:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);
    5fd2:	80 81       	ld	r24, Z
    5fd4:	80 64       	ori	r24, 0x40	; 64
    5fd6:	80 83       	st	Z, r24
	while (ADCSRA & (1<<ADSC) ) {}
    5fd8:	80 81       	ld	r24, Z
    5fda:	18 2f       	mov	r17, r24
    5fdc:	10 74       	andi	r17, 0x40	; 64
    5fde:	86 fd       	sbrc	r24, 6
    5fe0:	fb cf       	rjmp	.-10     	; 0x5fd8 <_Z15initialisierungv+0x5e>
	(void) ADCW;
    5fe2:	80 91 78 00 	lds	r24, 0x0078
    5fe6:	90 91 79 00 	lds	r25, 0x0079
	
	//USART initalisieren, aktivieren erst spaeter
	PIND &= ~((1<<PIND1) | (1<<PIND2));
    5fea:	89 b1       	in	r24, 0x09	; 9
    5fec:	89 7f       	andi	r24, 0xF9	; 249
    5fee:	89 b9       	out	0x09, r24	; 9
	DDRD &= ~((1<<PIND1) | (1<<PIND2));
    5ff0:	8a b1       	in	r24, 0x0a	; 10
    5ff2:	89 7f       	andi	r24, 0xF9	; 249
    5ff4:	8a b9       	out	0x0a, r24	; 10
	UBRR0H = 0;
    5ff6:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = 51;							//9600 Baud
    5ffa:	83 e3       	ldi	r24, 0x33	; 51
    5ffc:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0C = (1<<UCSZ00) | (1<<UCSZ01);	// 8Bit Frame
    6000:	86 e0       	ldi	r24, 0x06	; 6
    6002:	80 93 c2 00 	sts	0x00C2, r24
	UCSR0B = (1<<RXCIE0);
    6006:	80 e8       	ldi	r24, 0x80	; 128
    6008:	80 93 c1 00 	sts	0x00C1, r24
	gpscounter = 0;
    600c:	10 92 c7 08 	sts	0x08C7, r1
	gpsstatus = (1<<fix);
    6010:	80 93 10 09 	sts	0x0910, r24
	lat = 0;
    6014:	10 92 c3 08 	sts	0x08C3, r1
    6018:	10 92 c4 08 	sts	0x08C4, r1
    601c:	10 92 c5 08 	sts	0x08C5, r1
    6020:	10 92 c6 08 	sts	0x08C6, r1
	lon = 0;
    6024:	10 92 af 08 	sts	0x08AF, r1
    6028:	10 92 b0 08 	sts	0x08B0, r1
    602c:	10 92 b1 08 	sts	0x08B1, r1
    6030:	10 92 b2 08 	sts	0x08B2, r1
	gpsspeed = 0;
    6034:	10 92 9b 08 	sts	0x089B, r1
    6038:	10 92 9c 08 	sts	0x089C, r1
    603c:	10 92 9d 08 	sts	0x089D, r1
    6040:	10 92 9e 08 	sts	0x089E, r1
	gpsstunde = 0;
    6044:	10 92 9a 08 	sts	0x089A, r1
	gpsminute = 0;
    6048:	10 92 99 08 	sts	0x0899, r1
	gpssekunde = 0;
    604c:	10 92 98 08 	sts	0x0898, r1
	gpsTag = 0;
    6050:	10 92 97 08 	sts	0x0897, r1
	gpsMonat = 0;
    6054:	10 92 96 08 	sts	0x0896, r1
	gpsJahr = 0;
    6058:	10 92 95 08 	sts	0x0895, r1
		uint8_t posx;
		uint8_t maxentries;
		uint8_t maxentriesx;
	monitor(Display *ol, RTC *rt)
	{
		buffersize = 0;
    605c:	1f 8a       	std	Y+23, r1	; 0x17
		oled = ol;
    605e:	83 e4       	ldi	r24, 0x43	; 67
    6060:	9a e0       	ldi	r25, 0x0A	; 10
    6062:	99 8f       	std	Y+25, r25	; 0x19
    6064:	88 8f       	std	Y+24, r24	; 0x18
		rtc = rt;
    6066:	84 e4       	ldi	r24, 0x44	; 68
    6068:	9e e0       	ldi	r25, 0x0E	; 14
    606a:	9b 8f       	std	Y+27, r25	; 0x1b
    606c:	8a 8f       	std	Y+26, r24	; 0x1a
		posy=0;
    606e:	1e a2       	std	Y+38, r1	; 0x26
		posx=0;
    6070:	1f a2       	std	Y+39, r1	; 0x27
		maxentriesx = 1;
    6072:	81 e0       	ldi	r24, 0x01	; 1
    6074:	89 a7       	std	Y+41, r24	; 0x29
class wilkommen: public monitor
{
	private:
	
	public:
	wilkommen(Display *ol, RTC *rt):monitor(ol,rt)
    6076:	8b e1       	ldi	r24, 0x1B	; 27
    6078:	94 e0       	ldi	r25, 0x04	; 4
    607a:	9a 83       	std	Y+2, r25	; 0x02
    607c:	89 83       	std	Y+1, r24	; 0x01
	{

	}
	
	void draw(){
		oled->clearFrame();
    607e:	83 e4       	ldi	r24, 0x43	; 67
    6080:	9a e0       	ldi	r25, 0x0A	; 10
    6082:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <_ZN7Display10clearFrameEv>
		
		buffersize=sprintf(buffer,"Fahradcomputer");
    6086:	8f e0       	ldi	r24, 0x0F	; 15
    6088:	e6 e9       	ldi	r30, 0x96	; 150
    608a:	f1 e0       	ldi	r31, 0x01	; 1
    608c:	de 01       	movw	r26, r28
    608e:	13 96       	adiw	r26, 0x03	; 3
    6090:	01 90       	ld	r0, Z+
    6092:	0d 92       	st	X+, r0
    6094:	8a 95       	dec	r24
    6096:	e1 f7       	brne	.-8      	; 0x6090 <_Z15initialisierungv+0x116>
    6098:	8e e0       	ldi	r24, 0x0E	; 14
    609a:	8f 8b       	std	Y+23, r24	; 0x17
    609c:	f1 2e       	mov	r15, r17
    609e:	00 e0       	ldi	r16, 0x00	; 0
		for(uint8_t i=0; i < buffersize;i++){
			oled->draw_ASCI(buffer[i],i*charsize,0);
    60a0:	e3 e0       	ldi	r30, 0x03	; 3
    60a2:	f0 e0       	ldi	r31, 0x00	; 0
    60a4:	ec 0f       	add	r30, r28
    60a6:	fd 1f       	adc	r31, r29
    60a8:	e0 0f       	add	r30, r16
    60aa:	f1 1d       	adc	r31, r1
    60ac:	20 e0       	ldi	r18, 0x00	; 0
    60ae:	4f 2d       	mov	r20, r15
    60b0:	60 81       	ld	r22, Z
    60b2:	88 8d       	ldd	r24, Y+24	; 0x18
    60b4:	99 8d       	ldd	r25, Y+25	; 0x19
    60b6:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <_ZN7Display9draw_ASCIEhhh>
	
	void draw(){
		oled->clearFrame();
		
		buffersize=sprintf(buffer,"Fahradcomputer");
		for(uint8_t i=0; i < buffersize;i++){
    60ba:	0f 5f       	subi	r16, 0xFF	; 255
    60bc:	26 e0       	ldi	r18, 0x06	; 6
    60be:	f2 0e       	add	r15, r18
    60c0:	8f 89       	ldd	r24, Y+23	; 0x17
    60c2:	08 17       	cp	r16, r24
    60c4:	68 f3       	brcs	.-38     	; 0x60a0 <_Z15initialisierungv+0x126>
			oled->draw_ASCI(buffer[i],i*charsize,0);
		}
		buffersize=sprintf(buffer,"--------------");
    60c6:	8f e0       	ldi	r24, 0x0F	; 15
    60c8:	e5 ea       	ldi	r30, 0xA5	; 165
    60ca:	f1 e0       	ldi	r31, 0x01	; 1
    60cc:	de 01       	movw	r26, r28
    60ce:	13 96       	adiw	r26, 0x03	; 3
    60d0:	01 90       	ld	r0, Z+
    60d2:	0d 92       	st	X+, r0
    60d4:	8a 95       	dec	r24
    60d6:	e1 f7       	brne	.-8      	; 0x60d0 <_Z15initialisierungv+0x156>
    60d8:	8e e0       	ldi	r24, 0x0E	; 14
    60da:	8f 8b       	std	Y+23, r24	; 0x17
    60dc:	f1 2e       	mov	r15, r17
    60de:	00 e0       	ldi	r16, 0x00	; 0
		for(uint8_t i=0; i < buffersize;i++){
			oled->draw_ASCI(buffer[i],i*charsize,8);
    60e0:	e3 e0       	ldi	r30, 0x03	; 3
    60e2:	f0 e0       	ldi	r31, 0x00	; 0
    60e4:	ec 0f       	add	r30, r28
    60e6:	fd 1f       	adc	r31, r29
    60e8:	e0 0f       	add	r30, r16
    60ea:	f1 1d       	adc	r31, r1
    60ec:	28 e0       	ldi	r18, 0x08	; 8
    60ee:	4f 2d       	mov	r20, r15
    60f0:	60 81       	ld	r22, Z
    60f2:	88 8d       	ldd	r24, Y+24	; 0x18
    60f4:	99 8d       	ldd	r25, Y+25	; 0x19
    60f6:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <_ZN7Display9draw_ASCIEhhh>
		buffersize=sprintf(buffer,"Fahradcomputer");
		for(uint8_t i=0; i < buffersize;i++){
			oled->draw_ASCI(buffer[i],i*charsize,0);
		}
		buffersize=sprintf(buffer,"--------------");
		for(uint8_t i=0; i < buffersize;i++){
    60fa:	0f 5f       	subi	r16, 0xFF	; 255
    60fc:	36 e0       	ldi	r19, 0x06	; 6
    60fe:	f3 0e       	add	r15, r19
    6100:	8f 89       	ldd	r24, Y+23	; 0x17
    6102:	08 17       	cp	r16, r24
    6104:	68 f3       	brcs	.-38     	; 0x60e0 <_Z15initialisierungv+0x166>
			oled->draw_ASCI(buffer[i],i*charsize,8);
		}
		buffersize=sprintf(buffer,"Version: %.2f",(double)VERSIONSNUMMER);
    6106:	80 e4       	ldi	r24, 0x40	; 64
    6108:	8f 93       	push	r24
    610a:	83 e4       	ldi	r24, 0x43	; 67
    610c:	8f 93       	push	r24
    610e:	87 ed       	ldi	r24, 0xD7	; 215
    6110:	8f 93       	push	r24
    6112:	8a e0       	ldi	r24, 0x0A	; 10
    6114:	8f 93       	push	r24
    6116:	84 eb       	ldi	r24, 0xB4	; 180
    6118:	91 e0       	ldi	r25, 0x01	; 1
    611a:	9f 93       	push	r25
    611c:	8f 93       	push	r24
    611e:	ce 01       	movw	r24, r28
    6120:	03 96       	adiw	r24, 0x03	; 3
    6122:	9f 93       	push	r25
    6124:	8f 93       	push	r24
    6126:	0e 94 40 4d 	call	0x9a80	; 0x9a80 <sprintf>
    612a:	8f 8b       	std	Y+23, r24	; 0x17
		for(uint8_t i=0; i < buffersize;i++){
    612c:	0f b6       	in	r0, 0x3f	; 63
    612e:	f8 94       	cli
    6130:	de bf       	out	0x3e, r29	; 62
    6132:	0f be       	out	0x3f, r0	; 63
    6134:	cd bf       	out	0x3d, r28	; 61
    6136:	88 23       	and	r24, r24
    6138:	99 f0       	breq	.+38     	; 0x6160 <_Z15initialisierungv+0x1e6>
    613a:	00 e0       	ldi	r16, 0x00	; 0
			oled->draw_ASCI(buffer[i],i*charsize,32);
    613c:	e3 e0       	ldi	r30, 0x03	; 3
    613e:	f0 e0       	ldi	r31, 0x00	; 0
    6140:	ec 0f       	add	r30, r28
    6142:	fd 1f       	adc	r31, r29
    6144:	e0 0f       	add	r30, r16
    6146:	f1 1d       	adc	r31, r1
    6148:	20 e2       	ldi	r18, 0x20	; 32
    614a:	41 2f       	mov	r20, r17
    614c:	60 81       	ld	r22, Z
    614e:	88 8d       	ldd	r24, Y+24	; 0x18
    6150:	99 8d       	ldd	r25, Y+25	; 0x19
    6152:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <_ZN7Display9draw_ASCIEhhh>
		buffersize=sprintf(buffer,"--------------");
		for(uint8_t i=0; i < buffersize;i++){
			oled->draw_ASCI(buffer[i],i*charsize,8);
		}
		buffersize=sprintf(buffer,"Version: %.2f",(double)VERSIONSNUMMER);
		for(uint8_t i=0; i < buffersize;i++){
    6156:	0f 5f       	subi	r16, 0xFF	; 255
    6158:	1a 5f       	subi	r17, 0xFA	; 250
    615a:	8f 89       	ldd	r24, Y+23	; 0x17
    615c:	08 17       	cp	r16, r24
    615e:	70 f3       	brcs	.-36     	; 0x613c <_Z15initialisierungv+0x1c2>
		oled->clearFrame();
	}

	//send the frame to the display
	void send(){
		oled->sendFrame();	
    6160:	88 8d       	ldd	r24, Y+24	; 0x18
    6162:	99 8d       	ldd	r25, Y+25	; 0x19
    6164:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <_ZN7Display9sendFrameEv>
    6168:	8a e0       	ldi	r24, 0x0A	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    616a:	ff e7       	ldi	r31, 0x7F	; 127
    616c:	28 e3       	ldi	r18, 0x38	; 56
    616e:	31 e0       	ldi	r19, 0x01	; 1
    6170:	f1 50       	subi	r31, 0x01	; 1
    6172:	20 40       	sbci	r18, 0x00	; 0
    6174:	30 40       	sbci	r19, 0x00	; 0
    6176:	e1 f7       	brne	.-8      	; 0x6170 <_Z15initialisierungv+0x1f6>
    6178:	00 c0       	rjmp	.+0      	; 0x617a <_Z15initialisierungv+0x200>
    617a:	00 00       	nop
    617c:	9f e7       	ldi	r25, 0x7F	; 127
    617e:	e8 e3       	ldi	r30, 0x38	; 56
    6180:	f1 e0       	ldi	r31, 0x01	; 1
    6182:	91 50       	subi	r25, 0x01	; 1
    6184:	e0 40       	sbci	r30, 0x00	; 0
    6186:	f0 40       	sbci	r31, 0x00	; 0
    6188:	e1 f7       	brne	.-8      	; 0x6182 <_Z15initialisierungv+0x208>
    618a:	00 c0       	rjmp	.+0      	; 0x618c <_Z15initialisierungv+0x212>
    618c:	00 00       	nop
    618e:	81 50       	subi	r24, 0x01	; 1
	
	//Wilkommensanzeige
	wilkommen wil(&oled,&rtc);
	wil.draw();
	for (uint8_t i=0; i<10;i++)
    6190:	61 f7       	brne	.-40     	; 0x616a <_Z15initialisierungv+0x1f0>
	{
		_delay_ms(50);
		_delay_ms(50);
	}
	//Zeit aus speicher
	rtc.Sekunden= 0;
    6192:	04 e4       	ldi	r16, 0x44	; 68
    6194:	1e e0       	ldi	r17, 0x0E	; 14
    6196:	f8 01       	movw	r30, r16
    6198:	12 8a       	std	Z+18, r1	; 0x12
	rtc.Minuten	= EEPROM_Read(EEMINUTEN);
    619a:	80 e0       	ldi	r24, 0x00	; 0
    619c:	90 e0       	ldi	r25, 0x00	; 0
    619e:	0c dd       	rcall	.-1512   	; 0x5bb8 <_Z11EEPROM_Readj>
    61a0:	f8 01       	movw	r30, r16
    61a2:	81 8b       	std	Z+17, r24	; 0x11
	rtc.Stunden	= EEPROM_Read(EESTUNDEN);
    61a4:	81 e0       	ldi	r24, 0x01	; 1
    61a6:	90 e0       	ldi	r25, 0x00	; 0
    61a8:	07 dd       	rcall	.-1522   	; 0x5bb8 <_Z11EEPROM_Readj>
    61aa:	f8 01       	movw	r30, r16
    61ac:	80 8b       	std	Z+16, r24	; 0x10
	rtc.Tag		= EEPROM_Read(EETAGE);
    61ae:	82 e0       	ldi	r24, 0x02	; 2
    61b0:	90 e0       	ldi	r25, 0x00	; 0
    61b2:	02 dd       	rcall	.-1532   	; 0x5bb8 <_Z11EEPROM_Readj>
    61b4:	f8 01       	movw	r30, r16
    61b6:	84 8b       	std	Z+20, r24	; 0x14
	rtc.Monat	= EEPROM_Read(EEMONAT);
    61b8:	83 e0       	ldi	r24, 0x03	; 3
    61ba:	90 e0       	ldi	r25, 0x00	; 0
    61bc:	fd dc       	rcall	.-1542   	; 0x5bb8 <_Z11EEPROM_Readj>
    61be:	f8 01       	movw	r30, r16
    61c0:	86 8b       	std	Z+22, r24	; 0x16
	rtc.Jahr	= EEPROM_Read(EEJAHR);
    61c2:	84 e0       	ldi	r24, 0x04	; 4
    61c4:	90 e0       	ldi	r25, 0x00	; 0
    61c6:	f8 dc       	rcall	.-1552   	; 0x5bb8 <_Z11EEPROM_Readj>
    61c8:	f8 01       	movw	r30, r16
    61ca:	87 8b       	std	Z+23, r24	; 0x17
	rtc.ausgabedatumneu();
    61cc:	c8 01       	movw	r24, r16
    61ce:	0e 94 91 40 	call	0x8122	; 0x8122 <_ZN3RTC15ausgabedatumneuEv>
	rtc.RTCstart();
    61d2:	c8 01       	movw	r24, r16
    61d4:	0e 94 72 41 	call	0x82e4	; 0x82e4 <_ZN3RTC8RTCstartEv>
	
	//AD deaktivieren zum stromsparen
	ACSR |= (1<<ACD);
    61d8:	80 b7       	in	r24, 0x30	; 48
    61da:	80 68       	ori	r24, 0x80	; 128
    61dc:	80 bf       	out	0x30, r24	; 48
	
	//USART aktivieren jetzt nur hier zum testen
	UCSR0B |= (1<<RXEN0);
    61de:	e1 ec       	ldi	r30, 0xC1	; 193
    61e0:	f0 e0       	ldi	r31, 0x00	; 0
    61e2:	80 81       	ld	r24, Z
    61e4:	80 61       	ori	r24, 0x10	; 16
    61e6:	80 83       	st	Z, r24
	
	//SD Karten timer init
	TCCR0A	 = (1<<WGM01);		//Timer im ctc Mode
    61e8:	82 e0       	ldi	r24, 0x02	; 2
    61ea:	84 bd       	out	0x24, r24	; 36
	OCR0A	 = 38;		//ctc counter ende
    61ec:	86 e2       	ldi	r24, 0x26	; 38
    61ee:	87 bd       	out	0x27, r24	; 39
	TIMSK0	|= (1<<OCIE0A);
    61f0:	ee e6       	ldi	r30, 0x6E	; 110
    61f2:	f0 e0       	ldi	r31, 0x00	; 0
    61f4:	80 81       	ld	r24, Z
    61f6:	82 60       	ori	r24, 0x02	; 2
    61f8:	80 83       	st	Z, r24
	TCCR0B	|= (1<<CS02) | (1<<CS00);	//presc=1024
    61fa:	85 b5       	in	r24, 0x25	; 37
    61fc:	85 60       	ori	r24, 0x05	; 5
    61fe:	85 bd       	out	0x25, r24	; 37
	
	sei();
    6200:	78 94       	sei
}
    6202:	a9 96       	adiw	r28, 0x29	; 41
    6204:	0f b6       	in	r0, 0x3f	; 63
    6206:	f8 94       	cli
    6208:	de bf       	out	0x3e, r29	; 62
    620a:	0f be       	out	0x3f, r0	; 63
    620c:	cd bf       	out	0x3d, r28	; 61
    620e:	df 91       	pop	r29
    6210:	cf 91       	pop	r28
    6212:	1f 91       	pop	r17
    6214:	0f 91       	pop	r16
    6216:	ff 90       	pop	r15
    6218:	08 95       	ret

0000621a <_Z15tastaturhandlerP7monitorh>:

void tastaturhandler(monitor *mon, uint8_t taste){
    621a:	cf 93       	push	r28
    621c:	df 93       	push	r29
    621e:	1f 92       	push	r1
    6220:	cd b7       	in	r28, 0x3d	; 61
    6222:	de b7       	in	r29, 0x3e	; 62
    6224:	69 83       	std	Y+1, r22	; 0x01
	if (taste!=' ')
    6226:	60 32       	cpi	r22, 0x20	; 32
    6228:	09 f4       	brne	.+2      	; 0x622c <_Z15tastaturhandlerP7monitorh+0x12>
    622a:	8e c0       	rjmp	.+284    	; 0x6348 <_Z15tastaturhandlerP7monitorh+0x12e>
    622c:	dc 01       	movw	r26, r24
	{
		anzeige |= (1<<refreshdisplay);
    622e:	80 91 14 09 	lds	r24, 0x0914
    6232:	81 60       	ori	r24, 0x01	; 1
    6234:	80 93 14 09 	sts	0x0914, r24
		switch (taste)							//Tastendruck ueberpruefen
    6238:	46 2f       	mov	r20, r22
    623a:	50 e0       	ldi	r21, 0x00	; 0
    623c:	fa 01       	movw	r30, r20
    623e:	f0 97       	sbiw	r30, 0x30	; 48
    6240:	e6 34       	cpi	r30, 0x46	; 70
    6242:	f1 05       	cpc	r31, r1
    6244:	08 f0       	brcs	.+2      	; 0x6248 <_Z15tastaturhandlerP7monitorh+0x2e>
    6246:	75 c0       	rjmp	.+234    	; 0x6332 <_Z15tastaturhandlerP7monitorh+0x118>
    6248:	e5 55       	subi	r30, 0x55	; 85
    624a:	ff 4f       	sbci	r31, 0xFF	; 255
    624c:	0c 94 55 49 	jmp	0x92aa	; 0x92aa <__tablejump2__>
		{
			case 'm':
			position = numberofpages;
    6250:	85 e0       	ldi	r24, 0x05	; 5
    6252:	80 93 12 09 	sts	0x0912, r24
			break;
    6256:	78 c0       	rjmp	.+240    	; 0x6348 <_Z15tastaturhandlerP7monitorh+0x12e>
			case 'l':
			if (mon->posx==0)
    6258:	96 96       	adiw	r26, 0x26	; 38
    625a:	8c 91       	ld	r24, X
    625c:	96 97       	sbiw	r26, 0x26	; 38
    625e:	81 11       	cpse	r24, r1
    6260:	04 c0       	rjmp	.+8      	; 0x626a <_Z15tastaturhandlerP7monitorh+0x50>
			{
				position = numberofpages;
    6262:	85 e0       	ldi	r24, 0x05	; 5
    6264:	80 93 12 09 	sts	0x0912, r24
    6268:	6f c0       	rjmp	.+222    	; 0x6348 <_Z15tastaturhandlerP7monitorh+0x12e>
			}
			else{
				mon->posx--;
    626a:	81 50       	subi	r24, 0x01	; 1
    626c:	96 96       	adiw	r26, 0x26	; 38
    626e:	8c 93       	st	X, r24
    6270:	6b c0       	rjmp	.+214    	; 0x6348 <_Z15tastaturhandlerP7monitorh+0x12e>
			}
			break;
			case 'r':
			if (position==numberofpages)
    6272:	80 91 12 09 	lds	r24, 0x0912
    6276:	85 30       	cpi	r24, 0x05	; 5
    6278:	29 f4       	brne	.+10     	; 0x6284 <_Z15tastaturhandlerP7monitorh+0x6a>
			{
				position=mon->posy;
    627a:	95 96       	adiw	r26, 0x25	; 37
    627c:	8c 91       	ld	r24, X
    627e:	80 93 12 09 	sts	0x0912, r24
    6282:	62 c0       	rjmp	.+196    	; 0x6348 <_Z15tastaturhandlerP7monitorh+0x12e>
			}
			else if (!(mon->posx >= mon->maxentriesx))
    6284:	96 96       	adiw	r26, 0x26	; 38
    6286:	8c 91       	ld	r24, X
    6288:	96 97       	sbiw	r26, 0x26	; 38
    628a:	98 96       	adiw	r26, 0x28	; 40
    628c:	9c 91       	ld	r25, X
    628e:	98 97       	sbiw	r26, 0x28	; 40
    6290:	89 17       	cp	r24, r25
    6292:	08 f0       	brcs	.+2      	; 0x6296 <_Z15tastaturhandlerP7monitorh+0x7c>
    6294:	59 c0       	rjmp	.+178    	; 0x6348 <_Z15tastaturhandlerP7monitorh+0x12e>
			{
				mon->posx++;
    6296:	8f 5f       	subi	r24, 0xFF	; 255
    6298:	96 96       	adiw	r26, 0x26	; 38
    629a:	8c 93       	st	X, r24
    629c:	55 c0       	rjmp	.+170    	; 0x6348 <_Z15tastaturhandlerP7monitorh+0x12e>
			}
			break;
			case 'o':
			if (position==numberofpages)
    629e:	80 91 12 09 	lds	r24, 0x0912
    62a2:	85 30       	cpi	r24, 0x05	; 5
    62a4:	29 f4       	brne	.+10     	; 0x62b0 <_Z15tastaturhandlerP7monitorh+0x96>
			{
				position=mon->posy;
    62a6:	95 96       	adiw	r26, 0x25	; 37
    62a8:	8c 91       	ld	r24, X
    62aa:	80 93 12 09 	sts	0x0912, r24
    62ae:	4c c0       	rjmp	.+152    	; 0x6348 <_Z15tastaturhandlerP7monitorh+0x12e>
			}
			else if (!(mon->posx >= mon->maxentriesx))
    62b0:	96 96       	adiw	r26, 0x26	; 38
    62b2:	8c 91       	ld	r24, X
    62b4:	96 97       	sbiw	r26, 0x26	; 38
    62b6:	98 96       	adiw	r26, 0x28	; 40
    62b8:	9c 91       	ld	r25, X
    62ba:	98 97       	sbiw	r26, 0x28	; 40
    62bc:	89 17       	cp	r24, r25
    62be:	08 f0       	brcs	.+2      	; 0x62c2 <_Z15tastaturhandlerP7monitorh+0xa8>
    62c0:	43 c0       	rjmp	.+134    	; 0x6348 <_Z15tastaturhandlerP7monitorh+0x12e>
			{
				mon->posx++;
    62c2:	8f 5f       	subi	r24, 0xFF	; 255
    62c4:	96 96       	adiw	r26, 0x26	; 38
    62c6:	8c 93       	st	X, r24
    62c8:	3f c0       	rjmp	.+126    	; 0x6348 <_Z15tastaturhandlerP7monitorh+0x12e>
			}
			break;
			case 'd':
			if (!(mon->posy >= mon->maxentries-1))
    62ca:	95 96       	adiw	r26, 0x25	; 37
    62cc:	2c 91       	ld	r18, X
    62ce:	95 97       	sbiw	r26, 0x25	; 37
    62d0:	42 2f       	mov	r20, r18
    62d2:	50 e0       	ldi	r21, 0x00	; 0
    62d4:	97 96       	adiw	r26, 0x27	; 39
    62d6:	8c 91       	ld	r24, X
    62d8:	97 97       	sbiw	r26, 0x27	; 39
    62da:	90 e0       	ldi	r25, 0x00	; 0
    62dc:	01 97       	sbiw	r24, 0x01	; 1
    62de:	48 17       	cp	r20, r24
    62e0:	59 07       	cpc	r21, r25
    62e2:	24 f4       	brge	.+8      	; 0x62ec <_Z15tastaturhandlerP7monitorh+0xd2>
			{
				mon->posy++;
    62e4:	2f 5f       	subi	r18, 0xFF	; 255
    62e6:	95 96       	adiw	r26, 0x25	; 37
    62e8:	2c 93       	st	X, r18
    62ea:	2e c0       	rjmp	.+92     	; 0x6348 <_Z15tastaturhandlerP7monitorh+0x12e>
			}
			else{
				mon->posy = 0;
    62ec:	95 96       	adiw	r26, 0x25	; 37
    62ee:	1c 92       	st	X, r1
    62f0:	2b c0       	rjmp	.+86     	; 0x6348 <_Z15tastaturhandlerP7monitorh+0x12e>
			}
			break;
			case 'u':
			if (!(mon->posy == 0))
    62f2:	95 96       	adiw	r26, 0x25	; 37
    62f4:	8c 91       	ld	r24, X
    62f6:	95 97       	sbiw	r26, 0x25	; 37
    62f8:	88 23       	and	r24, r24
    62fa:	21 f0       	breq	.+8      	; 0x6304 <_Z15tastaturhandlerP7monitorh+0xea>
			{
				mon->posy--;
    62fc:	81 50       	subi	r24, 0x01	; 1
    62fe:	95 96       	adiw	r26, 0x25	; 37
    6300:	8c 93       	st	X, r24
    6302:	22 c0       	rjmp	.+68     	; 0x6348 <_Z15tastaturhandlerP7monitorh+0x12e>
			}
			else{
				mon->posy=mon->maxentries-1;
    6304:	97 96       	adiw	r26, 0x27	; 39
    6306:	8c 91       	ld	r24, X
    6308:	97 97       	sbiw	r26, 0x27	; 39
    630a:	81 50       	subi	r24, 0x01	; 1
    630c:	95 96       	adiw	r26, 0x25	; 37
    630e:	8c 93       	st	X, r24
    6310:	1b c0       	rjmp	.+54     	; 0x6348 <_Z15tastaturhandlerP7monitorh+0x12e>
			}
			break;
			case '0':
			//Licht an/aus
			if (LED.ison())
    6312:	89 e1       	ldi	r24, 0x19	; 25
    6314:	99 e0       	ldi	r25, 0x09	; 9
    6316:	0e 94 ca 3f 	call	0x7f94	; 0x7f94 <_ZN6Output4isonEv>
    631a:	88 23       	and	r24, r24
    631c:	29 f0       	breq	.+10     	; 0x6328 <_Z15tastaturhandlerP7monitorh+0x10e>
			{
				LED.off();
    631e:	89 e1       	ldi	r24, 0x19	; 25
    6320:	99 e0       	ldi	r25, 0x09	; 9
    6322:	0e 94 05 40 	call	0x800a	; 0x800a <_ZN6Output3offEv>
    6326:	10 c0       	rjmp	.+32     	; 0x6348 <_Z15tastaturhandlerP7monitorh+0x12e>
			}
			else{
				LED.on();
    6328:	89 e1       	ldi	r24, 0x19	; 25
    632a:	99 e0       	ldi	r25, 0x09	; 9
    632c:	0e 94 8d 3f 	call	0x7f1a	; 0x7f1a <_ZN6Output2onEv>
    6330:	0b c0       	rjmp	.+22     	; 0x6348 <_Z15tastaturhandlerP7monitorh+0x12e>
			}
			break;
			default:
			//alle anderen Tasten werden an den jeweiligen Handler weiter gegeben
			mon->tastendruck(&taste);
    6332:	ed 91       	ld	r30, X+
    6334:	fc 91       	ld	r31, X
    6336:	11 97       	sbiw	r26, 0x01	; 1
    6338:	01 90       	ld	r0, Z+
    633a:	f0 81       	ld	r31, Z
    633c:	e0 2d       	mov	r30, r0
    633e:	be 01       	movw	r22, r28
    6340:	6f 5f       	subi	r22, 0xFF	; 255
    6342:	7f 4f       	sbci	r23, 0xFF	; 255
    6344:	cd 01       	movw	r24, r26
    6346:	09 95       	icall
			break;
		}
	}
}
    6348:	0f 90       	pop	r0
    634a:	df 91       	pop	r29
    634c:	cf 91       	pop	r28
    634e:	08 95       	ret

00006350 <_Z19maininterupthandlerP7monitor>:

void maininterupthandler(monitor *mon){
    6350:	cf 92       	push	r12
    6352:	df 92       	push	r13
    6354:	ef 92       	push	r14
    6356:	ff 92       	push	r15
    6358:	0f 93       	push	r16
    635a:	1f 93       	push	r17
    635c:	cf 93       	push	r28
    635e:	df 93       	push	r29
    6360:	cd b7       	in	r28, 0x3d	; 61
    6362:	de b7       	in	r29, 0x3e	; 62
    6364:	2d 97       	sbiw	r28, 0x0d	; 13
    6366:	0f b6       	in	r0, 0x3f	; 63
    6368:	f8 94       	cli
    636a:	de bf       	out	0x3e, r29	; 62
    636c:	0f be       	out	0x3f, r0	; 63
    636e:	cd bf       	out	0x3d, r28	; 61
    6370:	8c 01       	movw	r16, r24
	if (position==1)							//Berechnung der Geschwindigkeit fuer Tacho
    6372:	90 91 12 09 	lds	r25, 0x0912
    6376:	91 30       	cpi	r25, 0x01	; 1
    6378:	09 f5       	brne	.+66     	; 0x63bc <_Z19maininterupthandlerP7monitor+0x6c>
	{
		//debounce Funktion fuer den Reedswitch
		if (reed_debounce(&PINA,PINA7))
    637a:	67 e0       	ldi	r22, 0x07	; 7
    637c:	80 e2       	ldi	r24, 0x20	; 32
    637e:	90 e0       	ldi	r25, 0x00	; 0
    6380:	07 dd       	rcall	.-1522   	; 0x5d90 <_Z13reed_debouncePVhh>
    6382:	88 23       	and	r24, r24
    6384:	31 f0       	breq	.+12     	; 0x6392 <_Z19maininterupthandlerP7monitor+0x42>
		{
			//Durchmesser ist 28 Zoll
			geschwindigkeit(28.0*2.54/100.0);
    6386:	63 e3       	ldi	r22, 0x33	; 51
    6388:	71 e1       	ldi	r23, 0x11	; 17
    638a:	86 e3       	ldi	r24, 0x36	; 54
    638c:	9f e3       	ldi	r25, 0x3F	; 63
    638e:	25 dd       	rcall	.-1462   	; 0x5dda <_Z15geschwindigkeitf>
    6390:	be c0       	rjmp	.+380    	; 0x650e <_Z19maininterupthandlerP7monitor+0x1be>
		}
		//Hier mit werden geschwindigkeiten, die kleiner als 2.6km/h betragen gefiltert
		//Somit wird die letzte Geschwindigkeit nach 3 Sekunden geloescht
		//Das ist noch nicht die beste Variante
		else if (TCNT1>23437)
    6392:	80 91 84 00 	lds	r24, 0x0084
    6396:	90 91 85 00 	lds	r25, 0x0085
    639a:	8e 38       	cpi	r24, 0x8E	; 142
    639c:	9b 45       	sbci	r25, 0x5B	; 91
    639e:	08 f4       	brcc	.+2      	; 0x63a2 <_Z19maininterupthandlerP7monitor+0x52>
    63a0:	b6 c0       	rjmp	.+364    	; 0x650e <_Z19maininterupthandlerP7monitor+0x1be>
		{
			TCNT1=0;
    63a2:	10 92 85 00 	sts	0x0085, r1
    63a6:	10 92 84 00 	sts	0x0084, r1
			geschw=0;
    63aa:	10 92 91 08 	sts	0x0891, r1
    63ae:	10 92 92 08 	sts	0x0892, r1
    63b2:	10 92 93 08 	sts	0x0893, r1
    63b6:	10 92 94 08 	sts	0x0894, r1
    63ba:	a9 c0       	rjmp	.+338    	; 0x650e <_Z19maininterupthandlerP7monitor+0x1be>
		}
	}
	//SD Karte mounten bzw. aufnahme starten
	else if (position==3)
    63bc:	93 30       	cpi	r25, 0x03	; 3
    63be:	09 f0       	breq	.+2      	; 0x63c2 <_Z19maininterupthandlerP7monitor+0x72>
    63c0:	a6 c0       	rjmp	.+332    	; 0x650e <_Z19maininterupthandlerP7monitor+0x1be>
	{
		if (mon->posy==3 && mon->posx==1)
    63c2:	d8 01       	movw	r26, r16
    63c4:	95 96       	adiw	r26, 0x25	; 37
    63c6:	8c 91       	ld	r24, X
    63c8:	95 97       	sbiw	r26, 0x25	; 37
    63ca:	83 30       	cpi	r24, 0x03	; 3
    63cc:	81 f5       	brne	.+96     	; 0x642e <_Z19maininterupthandlerP7monitor+0xde>
    63ce:	96 96       	adiw	r26, 0x26	; 38
    63d0:	8c 91       	ld	r24, X
    63d2:	81 30       	cpi	r24, 0x01	; 1
    63d4:	09 f0       	breq	.+2      	; 0x63d8 <_Z19maininterupthandlerP7monitor+0x88>
    63d6:	9b c0       	rjmp	.+310    	; 0x650e <_Z19maininterupthandlerP7monitor+0x1be>
		{
			if (!(statusreg&(1<<mounttingstat)))
    63d8:	80 91 13 09 	lds	r24, 0x0913
    63dc:	81 fd       	sbrc	r24, 1
    63de:	14 c0       	rjmp	.+40     	; 0x6408 <_Z19maininterupthandlerP7monitor+0xb8>
			{
				//mounting sd Karte
				if (disk_initialize(0) == 0)
    63e0:	80 e0       	ldi	r24, 0x00	; 0
    63e2:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <disk_initialize>
    63e6:	81 11       	cpse	r24, r1
    63e8:	1d c0       	rjmp	.+58     	; 0x6424 <_Z19maininterupthandlerP7monitor+0xd4>
				{
					if (f_mount(&FATFS_Obj,"",0) == 0)
    63ea:	40 e0       	ldi	r20, 0x00	; 0
    63ec:	63 e1       	ldi	r22, 0x13	; 19
    63ee:	73 e0       	ldi	r23, 0x03	; 3
    63f0:	87 e5       	ldi	r24, 0x57	; 87
    63f2:	96 e0       	ldi	r25, 0x06	; 6
    63f4:	0e 94 22 1c 	call	0x3844	; 0x3844 <f_mount>
    63f8:	81 11       	cpse	r24, r1
    63fa:	14 c0       	rjmp	.+40     	; 0x6424 <_Z19maininterupthandlerP7monitor+0xd4>
					{
						statusreg |= (1<<mounttingstat);
    63fc:	80 91 13 09 	lds	r24, 0x0913
    6400:	82 60       	ori	r24, 0x02	; 2
    6402:	80 93 13 09 	sts	0x0913, r24
    6406:	0e c0       	rjmp	.+28     	; 0x6424 <_Z19maininterupthandlerP7monitor+0xd4>
					}
				}
			}
			else if (!(statusreg&(1<<loggingstat)))
    6408:	82 fd       	sbrc	r24, 2
    640a:	0c c0       	rjmp	.+24     	; 0x6424 <_Z19maininterupthandlerP7monitor+0xd4>
			{
				f_mount(0,"",0);
    640c:	40 e0       	ldi	r20, 0x00	; 0
    640e:	63 e1       	ldi	r22, 0x13	; 19
    6410:	73 e0       	ldi	r23, 0x03	; 3
    6412:	80 e0       	ldi	r24, 0x00	; 0
    6414:	90 e0       	ldi	r25, 0x00	; 0
    6416:	0e 94 22 1c 	call	0x3844	; 0x3844 <f_mount>
				statusreg &= ~(1<<mounttingstat);
    641a:	80 91 13 09 	lds	r24, 0x0913
    641e:	8d 7f       	andi	r24, 0xFD	; 253
    6420:	80 93 13 09 	sts	0x0913, r24
			}
			mon->posx--;
    6424:	f8 01       	movw	r30, r16
    6426:	86 a1       	ldd	r24, Z+38	; 0x26
    6428:	81 50       	subi	r24, 0x01	; 1
    642a:	86 a3       	std	Z+38, r24	; 0x26
    642c:	70 c0       	rjmp	.+224    	; 0x650e <_Z19maininterupthandlerP7monitor+0x1be>
		}
		else if (mon->posy==4 && mon->posx==1)
    642e:	84 30       	cpi	r24, 0x04	; 4
    6430:	09 f0       	breq	.+2      	; 0x6434 <_Z19maininterupthandlerP7monitor+0xe4>
    6432:	6d c0       	rjmp	.+218    	; 0x650e <_Z19maininterupthandlerP7monitor+0x1be>
    6434:	d8 01       	movw	r26, r16
    6436:	96 96       	adiw	r26, 0x26	; 38
    6438:	8c 91       	ld	r24, X
    643a:	81 30       	cpi	r24, 0x01	; 1
    643c:	09 f0       	breq	.+2      	; 0x6440 <_Z19maininterupthandlerP7monitor+0xf0>
    643e:	67 c0       	rjmp	.+206    	; 0x650e <_Z19maininterupthandlerP7monitor+0x1be>
		{
			if (!(statusreg&(1<<loggingstat)) && (statusreg&(1<<mounttingstat)) )
    6440:	80 91 13 09 	lds	r24, 0x0913
    6444:	82 fd       	sbrc	r24, 2
    6446:	4f c0       	rjmp	.+158    	; 0x64e6 <_Z19maininterupthandlerP7monitor+0x196>
    6448:	81 ff       	sbrs	r24, 1
    644a:	4d c0       	rjmp	.+154    	; 0x64e6 <_Z19maininterupthandlerP7monitor+0x196>
			{
				if (disk_status(0) == 0)
    644c:	80 e0       	ldi	r24, 0x00	; 0
    644e:	0e 94 94 0a 	call	0x1528	; 0x1528 <disk_status>
    6452:	81 11       	cpse	r24, r1
    6454:	42 c0       	rjmp	.+132    	; 0x64da <_Z19maininterupthandlerP7monitor+0x18a>
				{
					char name[13];
					sprintf(name,"%02u%02u%02u%02u.txt",rtc.Monat,rtc.Tag,rtc.Stunden,rtc.Minuten);
    6456:	e4 e4       	ldi	r30, 0x44	; 68
    6458:	fe e0       	ldi	r31, 0x0E	; 14
    645a:	81 89       	ldd	r24, Z+17	; 0x11
    645c:	1f 92       	push	r1
    645e:	8f 93       	push	r24
    6460:	80 89       	ldd	r24, Z+16	; 0x10
    6462:	1f 92       	push	r1
    6464:	8f 93       	push	r24
    6466:	84 89       	ldd	r24, Z+20	; 0x14
    6468:	1f 92       	push	r1
    646a:	8f 93       	push	r24
    646c:	86 89       	ldd	r24, Z+22	; 0x16
    646e:	1f 92       	push	r1
    6470:	8f 93       	push	r24
    6472:	8d e6       	ldi	r24, 0x6D	; 109
    6474:	92 e0       	ldi	r25, 0x02	; 2
    6476:	9f 93       	push	r25
    6478:	8f 93       	push	r24
    647a:	fe 01       	movw	r30, r28
    647c:	31 96       	adiw	r30, 0x01	; 1
    647e:	7f 01       	movw	r14, r30
    6480:	ff 93       	push	r31
    6482:	ef 93       	push	r30
    6484:	0e 94 40 4d 	call	0x9a80	; 0x9a80 <sprintf>
					f_open(&logger, name, FA_OPEN_ALWAYS | FA_WRITE);
    6488:	42 e1       	ldi	r20, 0x12	; 18
    648a:	b7 01       	movw	r22, r14
    648c:	87 e3       	ldi	r24, 0x37	; 55
    648e:	94 e0       	ldi	r25, 0x04	; 4
    6490:	0e 94 75 1c 	call	0x38ea	; 0x38ea <f_open>
					//Zeit und GPS
					f_printf(&logger,"#Zeit [s]\tlongitude [1e6]\tLatitude [1e5]\tGPSSpeed [1e2 km/h] ");
    6494:	82 e8       	ldi	r24, 0x82	; 130
    6496:	92 e0       	ldi	r25, 0x02	; 2
    6498:	9f 93       	push	r25
    649a:	8f 93       	push	r24
    649c:	0f 2e       	mov	r0, r31
    649e:	f7 e3       	ldi	r31, 0x37	; 55
    64a0:	ef 2e       	mov	r14, r31
    64a2:	f4 e0       	ldi	r31, 0x04	; 4
    64a4:	ff 2e       	mov	r15, r31
    64a6:	f0 2d       	mov	r31, r0
    64a8:	ff 92       	push	r15
    64aa:	ef 92       	push	r14
    64ac:	0e 94 da 22 	call	0x45b4	; 0x45b4 <f_printf>
					//Tacho
					f_printf(&logger,"\tTacho [1e2 km/h] ");
    64b0:	80 ec       	ldi	r24, 0xC0	; 192
    64b2:	92 e0       	ldi	r25, 0x02	; 2
    64b4:	9f 93       	push	r25
    64b6:	8f 93       	push	r24
    64b8:	ff 92       	push	r15
    64ba:	ef 92       	push	r14
    64bc:	0e 94 da 22 	call	0x45b4	; 0x45b4 <f_printf>
					//Barometer
					f_printf(&logger,"\tTemperatur [10 C] \tDruck [Pa] \tHoeheSee [10 m]\n");
    64c0:	83 ed       	ldi	r24, 0xD3	; 211
    64c2:	92 e0       	ldi	r25, 0x02	; 2
    64c4:	9f 93       	push	r25
    64c6:	8f 93       	push	r24
    64c8:	ff 92       	push	r15
    64ca:	ef 92       	push	r14
    64cc:	0e 94 da 22 	call	0x45b4	; 0x45b4 <f_printf>
    64d0:	0f b6       	in	r0, 0x3f	; 63
    64d2:	f8 94       	cli
    64d4:	de bf       	out	0x3e, r29	; 62
    64d6:	0f be       	out	0x3f, r0	; 63
    64d8:	cd bf       	out	0x3d, r28	; 61
				}
				
				statusreg |= (1<<loggingstat);
    64da:	80 91 13 09 	lds	r24, 0x0913
    64de:	84 60       	ori	r24, 0x04	; 4
    64e0:	80 93 13 09 	sts	0x0913, r24
    64e4:	0d c0       	rjmp	.+26     	; 0x6500 <_Z19maininterupthandlerP7monitor+0x1b0>
			}
			else{
				f_sync(&logger);
    64e6:	87 e3       	ldi	r24, 0x37	; 55
    64e8:	94 e0       	ldi	r25, 0x04	; 4
    64ea:	0e 94 fd 21 	call	0x43fa	; 0x43fa <f_sync>
				f_close(&logger);
    64ee:	87 e3       	ldi	r24, 0x37	; 55
    64f0:	94 e0       	ldi	r25, 0x04	; 4
    64f2:	0e 94 ca 22 	call	0x4594	; 0x4594 <f_close>
				statusreg &= ~(1<<loggingstat);
    64f6:	80 91 13 09 	lds	r24, 0x0913
    64fa:	8b 7f       	andi	r24, 0xFB	; 251
    64fc:	80 93 13 09 	sts	0x0913, r24
			}
			mon->posx--;
    6500:	d8 01       	movw	r26, r16
    6502:	96 96       	adiw	r26, 0x26	; 38
    6504:	8c 91       	ld	r24, X
    6506:	96 97       	sbiw	r26, 0x26	; 38
    6508:	81 50       	subi	r24, 0x01	; 1
    650a:	96 96       	adiw	r26, 0x26	; 38
    650c:	8c 93       	st	X, r24
	if (statusreg&(1<<updaterate))				//24 FPS fuer schnelle anzeigen
	{
		//anzeige &= (1<<refreshdisplay);
	}
	
	if ((rtc.interupts&(1<<sekundeninterupt)))	//Sekunden
    650e:	80 91 5c 0e 	lds	r24, 0x0E5C
    6512:	81 ff       	sbrs	r24, 1
    6514:	4c c1       	rjmp	.+664    	; 0x67ae <_Z19maininterupthandlerP7monitor+0x45e>
	{
		rtc.zeit();
    6516:	84 e4       	ldi	r24, 0x44	; 68
    6518:	9e e0       	ldi	r25, 0x0E	; 14
    651a:	0e 94 37 41 	call	0x826e	; 0x826e <_ZN3RTC4zeitEv>
		druck.bmp180_getaltitude();
    651e:	8f e1       	ldi	r24, 0x1F	; 31
    6520:	99 e0       	ldi	r25, 0x09	; 9
    6522:	0e 94 b8 08 	call	0x1170	; 0x1170 <_ZN6BMP18018bmp180_getaltitudeEv>
		if (position==1)
    6526:	80 91 12 09 	lds	r24, 0x0912
    652a:	81 30       	cpi	r24, 0x01	; 1
    652c:	09 f0       	breq	.+2      	; 0x6530 <_Z19maininterupthandlerP7monitor+0x1e0>
    652e:	57 c0       	rjmp	.+174    	; 0x65de <_Z19maininterupthandlerP7monitor+0x28e>
		{
			if (geschw>maxgeschw)
    6530:	c0 90 91 08 	lds	r12, 0x0891
    6534:	d0 90 92 08 	lds	r13, 0x0892
    6538:	e0 90 93 08 	lds	r14, 0x0893
    653c:	f0 90 94 08 	lds	r15, 0x0894
    6540:	20 91 89 08 	lds	r18, 0x0889
    6544:	30 91 8a 08 	lds	r19, 0x088A
    6548:	40 91 8b 08 	lds	r20, 0x088B
    654c:	50 91 8c 08 	lds	r21, 0x088C
    6550:	c7 01       	movw	r24, r14
    6552:	b6 01       	movw	r22, r12
    6554:	0e 94 ed 43 	call	0x87da	; 0x87da <__gesf2>
    6558:	18 16       	cp	r1, r24
    655a:	44 f4       	brge	.+16     	; 0x656c <_Z19maininterupthandlerP7monitor+0x21c>
			{
				maxgeschw=geschw;
    655c:	c0 92 89 08 	sts	0x0889, r12
    6560:	d0 92 8a 08 	sts	0x088A, r13
    6564:	e0 92 8b 08 	sts	0x088B, r14
    6568:	f0 92 8c 08 	sts	0x088C, r15
			}
			if (geschw >= 1.0)
    656c:	20 e0       	ldi	r18, 0x00	; 0
    656e:	30 e0       	ldi	r19, 0x00	; 0
    6570:	40 e8       	ldi	r20, 0x80	; 128
    6572:	5f e3       	ldi	r21, 0x3F	; 63
    6574:	c7 01       	movw	r24, r14
    6576:	b6 01       	movw	r22, r12
    6578:	0e 94 ed 43 	call	0x87da	; 0x87da <__gesf2>
    657c:	88 23       	and	r24, r24
    657e:	9c f0       	brlt	.+38     	; 0x65a6 <_Z19maininterupthandlerP7monitor+0x256>
			{
				Fahrtzeit++;
    6580:	80 91 85 08 	lds	r24, 0x0885
    6584:	90 91 86 08 	lds	r25, 0x0886
    6588:	a0 91 87 08 	lds	r26, 0x0887
    658c:	b0 91 88 08 	lds	r27, 0x0888
    6590:	01 96       	adiw	r24, 0x01	; 1
    6592:	a1 1d       	adc	r26, r1
    6594:	b1 1d       	adc	r27, r1
    6596:	80 93 85 08 	sts	0x0885, r24
    659a:	90 93 86 08 	sts	0x0886, r25
    659e:	a0 93 87 08 	sts	0x0887, r26
    65a2:	b0 93 88 08 	sts	0x0888, r27
			}
			strecke+=geschw/3.6;
    65a6:	26 e6       	ldi	r18, 0x66	; 102
    65a8:	36 e6       	ldi	r19, 0x66	; 102
    65aa:	46 e6       	ldi	r20, 0x66	; 102
    65ac:	50 e4       	ldi	r21, 0x40	; 64
    65ae:	c7 01       	movw	r24, r14
    65b0:	b6 01       	movw	r22, r12
    65b2:	0e 94 fa 41 	call	0x83f4	; 0x83f4 <__divsf3>
    65b6:	9b 01       	movw	r18, r22
    65b8:	ac 01       	movw	r20, r24
    65ba:	60 91 8d 08 	lds	r22, 0x088D
    65be:	70 91 8e 08 	lds	r23, 0x088E
    65c2:	80 91 8f 08 	lds	r24, 0x088F
    65c6:	90 91 90 08 	lds	r25, 0x0890
    65ca:	0e 94 93 41 	call	0x8326	; 0x8326 <__addsf3>
    65ce:	60 93 8d 08 	sts	0x088D, r22
    65d2:	70 93 8e 08 	sts	0x088E, r23
    65d6:	80 93 8f 08 	sts	0x088F, r24
    65da:	90 93 90 08 	sts	0x0890, r25
    65de:	80 91 13 09 	lds	r24, 0x0913
    65e2:	86 70       	andi	r24, 0x06	; 6
		}
		
		if ((statusreg&(1<<mounttingstat)) && (statusreg&(1<<loggingstat)))
    65e4:	86 30       	cpi	r24, 0x06	; 6
    65e6:	09 f0       	breq	.+2      	; 0x65ea <_Z19maininterupthandlerP7monitor+0x29a>
    65e8:	d8 c0       	rjmp	.+432    	; 0x679a <_Z19maininterupthandlerP7monitor+0x44a>
		{
			uint16_t Sekundenges = rtc.Stunden*3600;
    65ea:	0f 2e       	mov	r0, r31
    65ec:	f4 e4       	ldi	r31, 0x44	; 68
    65ee:	cf 2e       	mov	r12, r31
    65f0:	fe e0       	ldi	r31, 0x0E	; 14
    65f2:	df 2e       	mov	r13, r31
    65f4:	f0 2d       	mov	r31, r0
    65f6:	f6 01       	movw	r30, r12
    65f8:	40 89       	ldd	r20, Z+16	; 0x10
    65fa:	20 e1       	ldi	r18, 0x10	; 16
    65fc:	3e e0       	ldi	r19, 0x0E	; 14
    65fe:	42 9f       	mul	r20, r18
    6600:	c0 01       	movw	r24, r0
    6602:	43 9f       	mul	r20, r19
    6604:	90 0d       	add	r25, r0
    6606:	11 24       	eor	r1, r1
			Sekundenges += rtc.Minuten*60;
    6608:	21 89       	ldd	r18, Z+17	; 0x11
    660a:	7c 01       	movw	r14, r24
    660c:	fc e3       	ldi	r31, 0x3C	; 60
    660e:	2f 9f       	mul	r18, r31
    6610:	e0 0c       	add	r14, r0
    6612:	f1 1c       	adc	r15, r1
    6614:	11 24       	eor	r1, r1
			Sekundenges += rtc.Sekunden;
			//GPS Daten und Zeit
			f_printf(&logger,"%u\t%ld\t%ld\t%ld\t",(uint16_t)Sekundenges,(int64_t)(lon*1000000),(int64_t)(lat*100000),(int32_t)(gpsspeed*100));
    6616:	20 e0       	ldi	r18, 0x00	; 0
    6618:	30 e0       	ldi	r19, 0x00	; 0
    661a:	48 ec       	ldi	r20, 0xC8	; 200
    661c:	52 e4       	ldi	r21, 0x42	; 66
    661e:	60 91 9b 08 	lds	r22, 0x089B
    6622:	70 91 9c 08 	lds	r23, 0x089C
    6626:	80 91 9d 08 	lds	r24, 0x089D
    662a:	90 91 9e 08 	lds	r25, 0x089E
    662e:	0e 94 f8 43 	call	0x87f0	; 0x87f0 <__mulsf3>
    6632:	0e 94 9c 42 	call	0x8538	; 0x8538 <__fixsfsi>
    6636:	9f 93       	push	r25
    6638:	8f 93       	push	r24
    663a:	7f 93       	push	r23
    663c:	6f 93       	push	r22
    663e:	20 e0       	ldi	r18, 0x00	; 0
    6640:	30 e5       	ldi	r19, 0x50	; 80
    6642:	43 ec       	ldi	r20, 0xC3	; 195
    6644:	57 e4       	ldi	r21, 0x47	; 71
    6646:	60 91 c3 08 	lds	r22, 0x08C3
    664a:	70 91 c4 08 	lds	r23, 0x08C4
    664e:	80 91 c5 08 	lds	r24, 0x08C5
    6652:	90 91 c6 08 	lds	r25, 0x08C6
    6656:	0e 94 f8 43 	call	0x87f0	; 0x87f0 <__mulsf3>
    665a:	0e 94 62 42 	call	0x84c4	; 0x84c4 <__fixsfdi>
    665e:	9f 93       	push	r25
    6660:	8f 93       	push	r24
    6662:	7f 93       	push	r23
    6664:	6f 93       	push	r22
    6666:	5f 93       	push	r21
    6668:	4f 93       	push	r20
    666a:	3f 93       	push	r19
    666c:	2f 93       	push	r18
    666e:	20 e0       	ldi	r18, 0x00	; 0
    6670:	34 e2       	ldi	r19, 0x24	; 36
    6672:	44 e7       	ldi	r20, 0x74	; 116
    6674:	59 e4       	ldi	r21, 0x49	; 73
    6676:	60 91 af 08 	lds	r22, 0x08AF
    667a:	70 91 b0 08 	lds	r23, 0x08B0
    667e:	80 91 b1 08 	lds	r24, 0x08B1
    6682:	90 91 b2 08 	lds	r25, 0x08B2
    6686:	0e 94 f8 43 	call	0x87f0	; 0x87f0 <__mulsf3>
    668a:	0e 94 62 42 	call	0x84c4	; 0x84c4 <__fixsfdi>
    668e:	9f 93       	push	r25
    6690:	8f 93       	push	r24
    6692:	7f 93       	push	r23
    6694:	6f 93       	push	r22
    6696:	5f 93       	push	r21
    6698:	4f 93       	push	r20
    669a:	3f 93       	push	r19
    669c:	2f 93       	push	r18
		
		if ((statusreg&(1<<mounttingstat)) && (statusreg&(1<<loggingstat)))
		{
			uint16_t Sekundenges = rtc.Stunden*3600;
			Sekundenges += rtc.Minuten*60;
			Sekundenges += rtc.Sekunden;
    669e:	d6 01       	movw	r26, r12
    66a0:	52 96       	adiw	r26, 0x12	; 18
    66a2:	8c 91       	ld	r24, X
    66a4:	f7 01       	movw	r30, r14
    66a6:	e8 0f       	add	r30, r24
    66a8:	f1 1d       	adc	r31, r1
    66aa:	cf 01       	movw	r24, r30
			//GPS Daten und Zeit
			f_printf(&logger,"%u\t%ld\t%ld\t%ld\t",(uint16_t)Sekundenges,(int64_t)(lon*1000000),(int64_t)(lat*100000),(int32_t)(gpsspeed*100));
    66ac:	9f 93       	push	r25
    66ae:	ef 93       	push	r30
    66b0:	84 e0       	ldi	r24, 0x04	; 4
    66b2:	93 e0       	ldi	r25, 0x03	; 3
    66b4:	9f 93       	push	r25
    66b6:	8f 93       	push	r24
    66b8:	0f 2e       	mov	r0, r31
    66ba:	f7 e3       	ldi	r31, 0x37	; 55
    66bc:	ef 2e       	mov	r14, r31
    66be:	f4 e0       	ldi	r31, 0x04	; 4
    66c0:	ff 2e       	mov	r15, r31
    66c2:	f0 2d       	mov	r31, r0
    66c4:	ff 92       	push	r15
    66c6:	ef 92       	push	r14
    66c8:	0e 94 da 22 	call	0x45b4	; 0x45b4 <f_printf>
			//Tacho
			f_printf(&logger,"%ld\t",(int32_t)(geschw*100));
    66cc:	20 e0       	ldi	r18, 0x00	; 0
    66ce:	30 e0       	ldi	r19, 0x00	; 0
    66d0:	48 ec       	ldi	r20, 0xC8	; 200
    66d2:	52 e4       	ldi	r21, 0x42	; 66
    66d4:	60 91 91 08 	lds	r22, 0x0891
    66d8:	70 91 92 08 	lds	r23, 0x0892
    66dc:	80 91 93 08 	lds	r24, 0x0893
    66e0:	90 91 94 08 	lds	r25, 0x0894
    66e4:	0e 94 f8 43 	call	0x87f0	; 0x87f0 <__mulsf3>
    66e8:	0e 94 9c 42 	call	0x8538	; 0x8538 <__fixsfsi>
    66ec:	9f 93       	push	r25
    66ee:	8f 93       	push	r24
    66f0:	7f 93       	push	r23
    66f2:	6f 93       	push	r22
    66f4:	8f e0       	ldi	r24, 0x0F	; 15
    66f6:	93 e0       	ldi	r25, 0x03	; 3
    66f8:	9f 93       	push	r25
    66fa:	8f 93       	push	r24
    66fc:	ff 92       	push	r15
    66fe:	ef 92       	push	r14
    6700:	0e 94 da 22 	call	0x45b4	; 0x45b4 <f_printf>
			//Barometer
			f_printf(&logger,"%d\t%lu\t%d\n",(int16_t)(druck.temperature*10),(uint32_t)(druck.pressure*100),(int16_t)(druck.altitude*10));
    6704:	0f b6       	in	r0, 0x3f	; 63
    6706:	f8 94       	cli
    6708:	de bf       	out	0x3e, r29	; 62
    670a:	0f be       	out	0x3f, r0	; 63
    670c:	cd bf       	out	0x3d, r28	; 61
    670e:	0f 2e       	mov	r0, r31
    6710:	ff e1       	ldi	r31, 0x1F	; 31
    6712:	cf 2e       	mov	r12, r31
    6714:	f9 e0       	ldi	r31, 0x09	; 9
    6716:	df 2e       	mov	r13, r31
    6718:	f0 2d       	mov	r31, r0
    671a:	20 e0       	ldi	r18, 0x00	; 0
    671c:	30 e0       	ldi	r19, 0x00	; 0
    671e:	40 e2       	ldi	r20, 0x20	; 32
    6720:	51 e4       	ldi	r21, 0x41	; 65
    6722:	d6 01       	movw	r26, r12
    6724:	1c 96       	adiw	r26, 0x0c	; 12
    6726:	6d 91       	ld	r22, X+
    6728:	7d 91       	ld	r23, X+
    672a:	8d 91       	ld	r24, X+
    672c:	9c 91       	ld	r25, X
    672e:	1f 97       	sbiw	r26, 0x0f	; 15
    6730:	0e 94 f8 43 	call	0x87f0	; 0x87f0 <__mulsf3>
    6734:	0e 94 9c 42 	call	0x8538	; 0x8538 <__fixsfsi>
    6738:	7f 93       	push	r23
    673a:	6f 93       	push	r22
    673c:	20 e0       	ldi	r18, 0x00	; 0
    673e:	30 e0       	ldi	r19, 0x00	; 0
    6740:	48 ec       	ldi	r20, 0xC8	; 200
    6742:	52 e4       	ldi	r21, 0x42	; 66
    6744:	f6 01       	movw	r30, r12
    6746:	60 81       	ld	r22, Z
    6748:	71 81       	ldd	r23, Z+1	; 0x01
    674a:	82 81       	ldd	r24, Z+2	; 0x02
    674c:	93 81       	ldd	r25, Z+3	; 0x03
    674e:	0e 94 f8 43 	call	0x87f0	; 0x87f0 <__mulsf3>
    6752:	0e 94 a1 42 	call	0x8542	; 0x8542 <__fixunssfsi>
    6756:	9f 93       	push	r25
    6758:	8f 93       	push	r24
    675a:	7f 93       	push	r23
    675c:	6f 93       	push	r22
    675e:	20 e0       	ldi	r18, 0x00	; 0
    6760:	30 e0       	ldi	r19, 0x00	; 0
    6762:	40 e2       	ldi	r20, 0x20	; 32
    6764:	51 e4       	ldi	r21, 0x41	; 65
    6766:	d6 01       	movw	r26, r12
    6768:	18 96       	adiw	r26, 0x08	; 8
    676a:	6d 91       	ld	r22, X+
    676c:	7d 91       	ld	r23, X+
    676e:	8d 91       	ld	r24, X+
    6770:	9c 91       	ld	r25, X
    6772:	1b 97       	sbiw	r26, 0x0b	; 11
    6774:	0e 94 f8 43 	call	0x87f0	; 0x87f0 <__mulsf3>
    6778:	0e 94 9c 42 	call	0x8538	; 0x8538 <__fixsfsi>
    677c:	7f 93       	push	r23
    677e:	6f 93       	push	r22
    6780:	84 e1       	ldi	r24, 0x14	; 20
    6782:	93 e0       	ldi	r25, 0x03	; 3
    6784:	9f 93       	push	r25
    6786:	8f 93       	push	r24
    6788:	ff 92       	push	r15
    678a:	ef 92       	push	r14
    678c:	0e 94 da 22 	call	0x45b4	; 0x45b4 <f_printf>
    6790:	0f b6       	in	r0, 0x3f	; 63
    6792:	f8 94       	cli
    6794:	de bf       	out	0x3e, r29	; 62
    6796:	0f be       	out	0x3f, r0	; 63
    6798:	cd bf       	out	0x3d, r28	; 61
		}
		
		anzeige |= (1<<refreshdisplay);
    679a:	80 91 14 09 	lds	r24, 0x0914
    679e:	81 60       	ori	r24, 0x01	; 1
    67a0:	80 93 14 09 	sts	0x0914, r24
		rtc.interupts &= ~(1<<sekundeninterupt);
    67a4:	e4 e4       	ldi	r30, 0x44	; 68
    67a6:	fe e0       	ldi	r31, 0x0E	; 14
    67a8:	80 8d       	ldd	r24, Z+24	; 0x18
    67aa:	8d 7f       	andi	r24, 0xFD	; 253
    67ac:	80 8f       	std	Z+24, r24	; 0x18
	}
	if ((rtc.interupts&(1<<minuteninterupt)))		//Minuten
    67ae:	80 91 5c 0e 	lds	r24, 0x0E5C
    67b2:	82 ff       	sbrs	r24, 2
    67b4:	13 c0       	rjmp	.+38     	; 0x67dc <_Z19maininterupthandlerP7monitor+0x48c>
    67b6:	80 91 13 09 	lds	r24, 0x0913
    67ba:	86 70       	andi	r24, 0x06	; 6
	{
		if ((statusreg&(1<<mounttingstat)) && (statusreg&(1<<loggingstat)))
    67bc:	86 30       	cpi	r24, 0x06	; 6
    67be:	21 f4       	brne	.+8      	; 0x67c8 <_Z19maininterupthandlerP7monitor+0x478>
		{
			f_sync(&logger);
    67c0:	87 e3       	ldi	r24, 0x37	; 55
    67c2:	94 e0       	ldi	r25, 0x04	; 4
    67c4:	0e 94 fd 21 	call	0x43fa	; 0x43fa <f_sync>
		}
		anzeige |= (1<<refreshdisplay);
    67c8:	80 91 14 09 	lds	r24, 0x0914
    67cc:	81 60       	ori	r24, 0x01	; 1
    67ce:	80 93 14 09 	sts	0x0914, r24
		rtc.interupts &= ~(1<<minuteninterupt);
    67d2:	e4 e4       	ldi	r30, 0x44	; 68
    67d4:	fe e0       	ldi	r31, 0x0E	; 14
    67d6:	80 8d       	ldd	r24, Z+24	; 0x18
    67d8:	8b 7f       	andi	r24, 0xFB	; 251
    67da:	80 8f       	std	Z+24, r24	; 0x18
	}
	
	if ((anzeige&(1<<refreshdisplay)))			//Anzeige aktualieseren
    67dc:	80 91 14 09 	lds	r24, 0x0914
    67e0:	80 ff       	sbrs	r24, 0
    67e2:	0d c0       	rjmp	.+26     	; 0x67fe <_Z19maininterupthandlerP7monitor+0x4ae>
	{
		//Hier aktuelle seite neu ausgeben
		mon->draw();
    67e4:	d8 01       	movw	r26, r16
    67e6:	ed 91       	ld	r30, X+
    67e8:	fc 91       	ld	r31, X
    67ea:	02 80       	ldd	r0, Z+2	; 0x02
    67ec:	f3 81       	ldd	r31, Z+3	; 0x03
    67ee:	e0 2d       	mov	r30, r0
    67f0:	c8 01       	movw	r24, r16
    67f2:	09 95       	icall
		anzeige &= ~(1<<refreshdisplay);
    67f4:	80 91 14 09 	lds	r24, 0x0914
    67f8:	8e 7f       	andi	r24, 0xFE	; 254
    67fa:	80 93 14 09 	sts	0x0914, r24
		{
			anzeige |= (1<<blinkflag) | (1<<refreshdisplay);
			rtc.interupts &= ~(1<<Weckerein);
		}
	}*/
}
    67fe:	2d 96       	adiw	r28, 0x0d	; 13
    6800:	0f b6       	in	r0, 0x3f	; 63
    6802:	f8 94       	cli
    6804:	de bf       	out	0x3e, r29	; 62
    6806:	0f be       	out	0x3f, r0	; 63
    6808:	cd bf       	out	0x3d, r28	; 61
    680a:	df 91       	pop	r29
    680c:	cf 91       	pop	r28
    680e:	1f 91       	pop	r17
    6810:	0f 91       	pop	r16
    6812:	ff 90       	pop	r15
    6814:	ef 90       	pop	r14
    6816:	df 90       	pop	r13
    6818:	cf 90       	pop	r12
    681a:	08 95       	ret

0000681c <_Z12gpsmovingavvdd>:

#define gpsmovavvnumber	4.0
void gpsmovingavv(double latneu, double lonneu){
    681c:	4f 92       	push	r4
    681e:	5f 92       	push	r5
    6820:	6f 92       	push	r6
    6822:	7f 92       	push	r7
    6824:	af 92       	push	r10
    6826:	bf 92       	push	r11
    6828:	cf 92       	push	r12
    682a:	df 92       	push	r13
    682c:	ef 92       	push	r14
    682e:	ff 92       	push	r15
    6830:	0f 93       	push	r16
    6832:	1f 93       	push	r17
    6834:	cf 93       	push	r28
    6836:	df 93       	push	r29
    6838:	2b 01       	movw	r4, r22
    683a:	3c 01       	movw	r6, r24
    683c:	69 01       	movw	r12, r18
    683e:	7a 01       	movw	r14, r20
    6840:	e3 ec       	ldi	r30, 0xC3	; 195
    6842:	f8 e0       	ldi	r31, 0x08	; 8
    6844:	af ea       	ldi	r26, 0xAF	; 175
    6846:	b8 e0       	ldi	r27, 0x08	; 8
    6848:	03 eb       	ldi	r16, 0xB3	; 179
    684a:	18 e0       	ldi	r17, 0x08	; 8
	for (uint8_t i = gpsmovavvnumber; i >= 1; i--)
	{
		latavv[i]	= latavv[i-1];
    684c:	72 91       	ld	r23, -Z
    684e:	62 91       	ld	r22, -Z
    6850:	52 91       	ld	r21, -Z
    6852:	42 91       	ld	r20, -Z
    6854:	44 83       	std	Z+4, r20	; 0x04
    6856:	55 83       	std	Z+5, r21	; 0x05
    6858:	66 83       	std	Z+6, r22	; 0x06
    685a:	77 83       	std	Z+7, r23	; 0x07
		lonavv[i]	= lonavv[i-1];
    685c:	7e 91       	ld	r23, -X
    685e:	6e 91       	ld	r22, -X
    6860:	5e 91       	ld	r21, -X
    6862:	4e 91       	ld	r20, -X
    6864:	14 96       	adiw	r26, 0x04	; 4
    6866:	4d 93       	st	X+, r20
    6868:	5d 93       	st	X+, r21
    686a:	6d 93       	st	X+, r22
    686c:	7c 93       	st	X, r23
    686e:	17 97       	sbiw	r26, 0x07	; 7
	}*/
}

#define gpsmovavvnumber	4.0
void gpsmovingavv(double latneu, double lonneu){
	for (uint8_t i = gpsmovavvnumber; i >= 1; i--)
    6870:	e0 17       	cp	r30, r16
    6872:	f1 07       	cpc	r31, r17
    6874:	59 f7       	brne	.-42     	; 0x684c <_Z12gpsmovingavvdd+0x30>
	{
		latavv[i]	= latavv[i-1];
		lonavv[i]	= lonavv[i-1];
	}
	latavv[0]	= latneu;
    6876:	40 92 b3 08 	sts	0x08B3, r4
    687a:	50 92 b4 08 	sts	0x08B4, r5
    687e:	60 92 b5 08 	sts	0x08B5, r6
    6882:	70 92 b6 08 	sts	0x08B6, r7
	lonavv[0]	= lonneu;
    6886:	c0 92 9f 08 	sts	0x089F, r12
    688a:	d0 92 a0 08 	sts	0x08A0, r13
    688e:	e0 92 a1 08 	sts	0x08A1, r14
    6892:	f0 92 a2 08 	sts	0x08A2, r15
    6896:	0f 2e       	mov	r0, r31
    6898:	ff e9       	ldi	r31, 0x9F	; 159
    689a:	af 2e       	mov	r10, r31
    689c:	f8 e0       	ldi	r31, 0x08	; 8
    689e:	bf 2e       	mov	r11, r31
    68a0:	f0 2d       	mov	r31, r0
    68a2:	c1 e0       	ldi	r28, 0x01	; 1
    68a4:	d0 e0       	ldi	r29, 0x00	; 0
    68a6:	c1 2c       	mov	r12, r1
    68a8:	d1 2c       	mov	r13, r1
    68aa:	76 01       	movw	r14, r12
    68ac:	26 01       	movw	r4, r12
    68ae:	37 01       	movw	r6, r14
	
	double summelat	= 0;
	double summelon	= 0;
	for (uint8_t i = 0; i < gpsmovavvnumber; i++)
	{
		summelat	+= latavv[i];
    68b0:	f8 01       	movw	r30, r16
    68b2:	21 91       	ld	r18, Z+
    68b4:	31 91       	ld	r19, Z+
    68b6:	41 91       	ld	r20, Z+
    68b8:	51 91       	ld	r21, Z+
    68ba:	8f 01       	movw	r16, r30
    68bc:	c3 01       	movw	r24, r6
    68be:	b2 01       	movw	r22, r4
    68c0:	0e 94 93 41 	call	0x8326	; 0x8326 <__addsf3>
    68c4:	2b 01       	movw	r4, r22
    68c6:	3c 01       	movw	r6, r24
		summelon	+= lonavv[i];
    68c8:	f5 01       	movw	r30, r10
    68ca:	21 91       	ld	r18, Z+
    68cc:	31 91       	ld	r19, Z+
    68ce:	41 91       	ld	r20, Z+
    68d0:	51 91       	ld	r21, Z+
    68d2:	5f 01       	movw	r10, r30
    68d4:	c7 01       	movw	r24, r14
    68d6:	b6 01       	movw	r22, r12
    68d8:	0e 94 93 41 	call	0x8326	; 0x8326 <__addsf3>
    68dc:	6b 01       	movw	r12, r22
    68de:	7c 01       	movw	r14, r24
    68e0:	21 96       	adiw	r28, 0x01	; 1
	latavv[0]	= latneu;
	lonavv[0]	= lonneu;
	
	double summelat	= 0;
	double summelon	= 0;
	for (uint8_t i = 0; i < gpsmovavvnumber; i++)
    68e2:	c5 30       	cpi	r28, 0x05	; 5
    68e4:	d1 05       	cpc	r29, r1
    68e6:	21 f7       	brne	.-56     	; 0x68b0 <_Z12gpsmovingavvdd+0x94>
	{
		summelat	+= latavv[i];
		summelon	+= lonavv[i];
	}
	lat	= summelat/gpsmovavvnumber;
    68e8:	20 e0       	ldi	r18, 0x00	; 0
    68ea:	30 e0       	ldi	r19, 0x00	; 0
    68ec:	40 e8       	ldi	r20, 0x80	; 128
    68ee:	5e e3       	ldi	r21, 0x3E	; 62
    68f0:	c3 01       	movw	r24, r6
    68f2:	b2 01       	movw	r22, r4
    68f4:	0e 94 f8 43 	call	0x87f0	; 0x87f0 <__mulsf3>
    68f8:	60 93 c3 08 	sts	0x08C3, r22
    68fc:	70 93 c4 08 	sts	0x08C4, r23
    6900:	80 93 c5 08 	sts	0x08C5, r24
    6904:	90 93 c6 08 	sts	0x08C6, r25
	lon	= summelon/gpsmovavvnumber;
    6908:	20 e0       	ldi	r18, 0x00	; 0
    690a:	30 e0       	ldi	r19, 0x00	; 0
    690c:	40 e8       	ldi	r20, 0x80	; 128
    690e:	5e e3       	ldi	r21, 0x3E	; 62
    6910:	c7 01       	movw	r24, r14
    6912:	b6 01       	movw	r22, r12
    6914:	0e 94 f8 43 	call	0x87f0	; 0x87f0 <__mulsf3>
    6918:	60 93 af 08 	sts	0x08AF, r22
    691c:	70 93 b0 08 	sts	0x08B0, r23
    6920:	80 93 b1 08 	sts	0x08B1, r24
    6924:	90 93 b2 08 	sts	0x08B2, r25
}
    6928:	df 91       	pop	r29
    692a:	cf 91       	pop	r28
    692c:	1f 91       	pop	r17
    692e:	0f 91       	pop	r16
    6930:	ff 90       	pop	r15
    6932:	ef 90       	pop	r14
    6934:	df 90       	pop	r13
    6936:	cf 90       	pop	r12
    6938:	bf 90       	pop	r11
    693a:	af 90       	pop	r10
    693c:	7f 90       	pop	r7
    693e:	6f 90       	pop	r6
    6940:	5f 90       	pop	r5
    6942:	4f 90       	pop	r4
    6944:	08 95       	ret

00006946 <_Z10gpshandlerv>:

void gpshandler(){
    6946:	4f 92       	push	r4
    6948:	5f 92       	push	r5
    694a:	6f 92       	push	r6
    694c:	7f 92       	push	r7
    694e:	8f 92       	push	r8
    6950:	9f 92       	push	r9
    6952:	af 92       	push	r10
    6954:	bf 92       	push	r11
    6956:	cf 92       	push	r12
    6958:	df 92       	push	r13
    695a:	ef 92       	push	r14
    695c:	ff 92       	push	r15
    695e:	0f 93       	push	r16
    6960:	1f 93       	push	r17
    6962:	cf 93       	push	r28
    6964:	df 93       	push	r29
    6966:	00 d0       	rcall	.+0      	; 0x6968 <_Z10gpshandlerv+0x22>
    6968:	00 d0       	rcall	.+0      	; 0x696a <_Z10gpshandlerv+0x24>
    696a:	cd b7       	in	r28, 0x3d	; 61
    696c:	de b7       	in	r29, 0x3e	; 62
	if ((gpsstatus&(1<<complete)) && (gpsstatus&(1<<fix)))
    696e:	90 91 10 09 	lds	r25, 0x0910
    6972:	92 ff       	sbrs	r25, 2
    6974:	c6 c2       	rjmp	.+1420   	; 0x6f02 <_Z10gpshandlerv+0x5bc>
    6976:	99 23       	and	r25, r25
    6978:	0c f0       	brlt	.+2      	; 0x697c <_Z10gpshandlerv+0x36>
    697a:	51 c3       	rjmp	.+1698   	; 0x701e <_Z10gpshandlerv+0x6d8>
		double la	= 0;
		double lo	= 0;
		//brechnung von Latitutde, Longitude, Zeit und Datum
		//Zeit
		gpsstunde =		(gpsdata[7] - '0')*10;
		gpsstunde +=	(gpsdata[8] - '0');
    697c:	08 ec       	ldi	r16, 0xC8	; 200
    697e:	18 e0       	ldi	r17, 0x08	; 8
    6980:	f8 01       	movw	r30, r16
    6982:	80 85       	ldd	r24, Z+8	; 0x08
    6984:	21 ed       	ldi	r18, 0xD1	; 209
    6986:	28 0f       	add	r18, r24
	{
		double la	= 0;
		double lo	= 0;
		//brechnung von Latitutde, Longitude, Zeit und Datum
		//Zeit
		gpsstunde =		(gpsdata[7] - '0')*10;
    6988:	87 81       	ldd	r24, Z+7	; 0x07
    698a:	88 0f       	add	r24, r24
    698c:	80 56       	subi	r24, 0x60	; 96
    698e:	98 2f       	mov	r25, r24
    6990:	99 0f       	add	r25, r25
    6992:	99 0f       	add	r25, r25
    6994:	89 0f       	add	r24, r25
		gpsstunde +=	(gpsdata[8] - '0');
		gpsstunde += GMT;
    6996:	82 0f       	add	r24, r18
    6998:	80 93 9a 08 	sts	0x089A, r24
    699c:	82 85       	ldd	r24, Z+10	; 0x0a
    699e:	20 ed       	ldi	r18, 0xD0	; 208
    69a0:	28 0f       	add	r18, r24
		gpsminute =		(gpsdata[9] - '0')*10;
    69a2:	81 85       	ldd	r24, Z+9	; 0x09
    69a4:	88 0f       	add	r24, r24
    69a6:	80 56       	subi	r24, 0x60	; 96
    69a8:	98 2f       	mov	r25, r24
    69aa:	99 0f       	add	r25, r25
    69ac:	99 0f       	add	r25, r25
    69ae:	89 0f       	add	r24, r25
		gpsminute +=	(gpsdata[10] - '0');
    69b0:	82 0f       	add	r24, r18
    69b2:	80 93 99 08 	sts	0x0899, r24
    69b6:	84 85       	ldd	r24, Z+12	; 0x0c
    69b8:	20 ed       	ldi	r18, 0xD0	; 208
    69ba:	28 0f       	add	r18, r24
		gpssekunde =	(gpsdata[11] - '0')*10;
    69bc:	83 85       	ldd	r24, Z+11	; 0x0b
    69be:	88 0f       	add	r24, r24
    69c0:	80 56       	subi	r24, 0x60	; 96
    69c2:	98 2f       	mov	r25, r24
    69c4:	99 0f       	add	r25, r25
    69c6:	99 0f       	add	r25, r25
    69c8:	89 0f       	add	r24, r25
		gpssekunde +=	(gpsdata[12] - '0');
    69ca:	82 0f       	add	r24, r18
    69cc:	80 93 98 08 	sts	0x0898, r24
		
		//Latitude
		la =	(gpsdata[20] - '0')*10;
    69d0:	84 89       	ldd	r24, Z+20	; 0x14
    69d2:	90 e0       	ldi	r25, 0x00	; 0
    69d4:	c0 97       	sbiw	r24, 0x30	; 48
    69d6:	bc 01       	movw	r22, r24
    69d8:	66 0f       	add	r22, r22
    69da:	77 1f       	adc	r23, r23
    69dc:	88 0f       	add	r24, r24
    69de:	99 1f       	adc	r25, r25
    69e0:	88 0f       	add	r24, r24
    69e2:	99 1f       	adc	r25, r25
    69e4:	88 0f       	add	r24, r24
    69e6:	99 1f       	adc	r25, r25
    69e8:	68 0f       	add	r22, r24
    69ea:	79 1f       	adc	r23, r25
    69ec:	07 2e       	mov	r0, r23
    69ee:	00 0c       	add	r0, r0
    69f0:	88 0b       	sbc	r24, r24
    69f2:	99 0b       	sbc	r25, r25
    69f4:	0e 94 cf 42 	call	0x859e	; 0x859e <__floatsisf>
    69f8:	6b 01       	movw	r12, r22
    69fa:	7c 01       	movw	r14, r24
		la +=	(gpsdata[21] - '0');
    69fc:	f8 01       	movw	r30, r16
    69fe:	85 89       	ldd	r24, Z+21	; 0x15
    6a00:	90 e0       	ldi	r25, 0x00	; 0
    6a02:	c0 97       	sbiw	r24, 0x30	; 48
    6a04:	bc 01       	movw	r22, r24
    6a06:	99 0f       	add	r25, r25
    6a08:	88 0b       	sbc	r24, r24
    6a0a:	99 0b       	sbc	r25, r25
    6a0c:	0e 94 cf 42 	call	0x859e	; 0x859e <__floatsisf>
    6a10:	a7 01       	movw	r20, r14
    6a12:	96 01       	movw	r18, r12
    6a14:	0e 94 93 41 	call	0x8326	; 0x8326 <__addsf3>
    6a18:	6b 01       	movw	r12, r22
    6a1a:	7c 01       	movw	r14, r24
		float lamin =	(gpsdata[22] - '0')*10;
    6a1c:	f8 01       	movw	r30, r16
    6a1e:	46 89       	ldd	r20, Z+22	; 0x16
    6a20:	50 e0       	ldi	r21, 0x00	; 0
    6a22:	40 53       	subi	r20, 0x30	; 48
    6a24:	51 09       	sbc	r21, r1
    6a26:	ca 01       	movw	r24, r20
    6a28:	88 0f       	add	r24, r24
    6a2a:	99 1f       	adc	r25, r25
    6a2c:	44 0f       	add	r20, r20
    6a2e:	55 1f       	adc	r21, r21
    6a30:	44 0f       	add	r20, r20
    6a32:	55 1f       	adc	r21, r21
    6a34:	44 0f       	add	r20, r20
    6a36:	55 1f       	adc	r21, r21
    6a38:	84 0f       	add	r24, r20
    6a3a:	95 1f       	adc	r25, r21
    6a3c:	bc 01       	movw	r22, r24
    6a3e:	99 0f       	add	r25, r25
    6a40:	88 0b       	sbc	r24, r24
    6a42:	99 0b       	sbc	r25, r25
    6a44:	0e 94 cf 42 	call	0x859e	; 0x859e <__floatsisf>
    6a48:	4b 01       	movw	r8, r22
    6a4a:	5c 01       	movw	r10, r24
		lamin +=		(gpsdata[23] - '0');
    6a4c:	f8 01       	movw	r30, r16
    6a4e:	67 89       	ldd	r22, Z+23	; 0x17
    6a50:	70 e0       	ldi	r23, 0x00	; 0
    6a52:	60 53       	subi	r22, 0x30	; 48
    6a54:	71 09       	sbc	r23, r1
    6a56:	07 2e       	mov	r0, r23
    6a58:	00 0c       	add	r0, r0
    6a5a:	88 0b       	sbc	r24, r24
    6a5c:	99 0b       	sbc	r25, r25
    6a5e:	0e 94 cf 42 	call	0x859e	; 0x859e <__floatsisf>
    6a62:	a5 01       	movw	r20, r10
    6a64:	94 01       	movw	r18, r8
    6a66:	0e 94 93 41 	call	0x8326	; 0x8326 <__addsf3>
    6a6a:	4b 01       	movw	r8, r22
    6a6c:	5c 01       	movw	r10, r24
		lamin +=		(gpsdata[25] - '0')/10.0;
    6a6e:	f8 01       	movw	r30, r16
    6a70:	81 8d       	ldd	r24, Z+25	; 0x19
    6a72:	90 e0       	ldi	r25, 0x00	; 0
    6a74:	c0 97       	sbiw	r24, 0x30	; 48
    6a76:	bc 01       	movw	r22, r24
    6a78:	99 0f       	add	r25, r25
    6a7a:	88 0b       	sbc	r24, r24
    6a7c:	99 0b       	sbc	r25, r25
    6a7e:	0e 94 cf 42 	call	0x859e	; 0x859e <__floatsisf>
    6a82:	20 e0       	ldi	r18, 0x00	; 0
    6a84:	30 e0       	ldi	r19, 0x00	; 0
    6a86:	40 e2       	ldi	r20, 0x20	; 32
    6a88:	51 e4       	ldi	r21, 0x41	; 65
    6a8a:	0e 94 fa 41 	call	0x83f4	; 0x83f4 <__divsf3>
    6a8e:	a5 01       	movw	r20, r10
    6a90:	94 01       	movw	r18, r8
    6a92:	0e 94 93 41 	call	0x8326	; 0x8326 <__addsf3>
    6a96:	4b 01       	movw	r8, r22
    6a98:	5c 01       	movw	r10, r24
		lamin +=		(gpsdata[26] - '0')/100.0;
    6a9a:	f8 01       	movw	r30, r16
    6a9c:	82 8d       	ldd	r24, Z+26	; 0x1a
    6a9e:	90 e0       	ldi	r25, 0x00	; 0
    6aa0:	c0 97       	sbiw	r24, 0x30	; 48
    6aa2:	bc 01       	movw	r22, r24
    6aa4:	99 0f       	add	r25, r25
    6aa6:	88 0b       	sbc	r24, r24
    6aa8:	99 0b       	sbc	r25, r25
    6aaa:	0e 94 cf 42 	call	0x859e	; 0x859e <__floatsisf>
    6aae:	20 e0       	ldi	r18, 0x00	; 0
    6ab0:	30 e0       	ldi	r19, 0x00	; 0
    6ab2:	48 ec       	ldi	r20, 0xC8	; 200
    6ab4:	52 e4       	ldi	r21, 0x42	; 66
    6ab6:	0e 94 fa 41 	call	0x83f4	; 0x83f4 <__divsf3>
    6aba:	a5 01       	movw	r20, r10
    6abc:	94 01       	movw	r18, r8
    6abe:	0e 94 93 41 	call	0x8326	; 0x8326 <__addsf3>
    6ac2:	4b 01       	movw	r8, r22
    6ac4:	5c 01       	movw	r10, r24
		lamin +=		(gpsdata[27] - '0')/1000.0;
    6ac6:	f8 01       	movw	r30, r16
    6ac8:	83 8d       	ldd	r24, Z+27	; 0x1b
    6aca:	90 e0       	ldi	r25, 0x00	; 0
    6acc:	c0 97       	sbiw	r24, 0x30	; 48
    6ace:	bc 01       	movw	r22, r24
    6ad0:	99 0f       	add	r25, r25
    6ad2:	88 0b       	sbc	r24, r24
    6ad4:	99 0b       	sbc	r25, r25
    6ad6:	0e 94 cf 42 	call	0x859e	; 0x859e <__floatsisf>
    6ada:	20 e0       	ldi	r18, 0x00	; 0
    6adc:	30 e0       	ldi	r19, 0x00	; 0
    6ade:	4a e7       	ldi	r20, 0x7A	; 122
    6ae0:	54 e4       	ldi	r21, 0x44	; 68
    6ae2:	0e 94 fa 41 	call	0x83f4	; 0x83f4 <__divsf3>
    6ae6:	a5 01       	movw	r20, r10
    6ae8:	94 01       	movw	r18, r8
    6aea:	0e 94 93 41 	call	0x8326	; 0x8326 <__addsf3>
    6aee:	4b 01       	movw	r8, r22
    6af0:	5c 01       	movw	r10, r24
		lamin +=		(gpsdata[28] - '0')/10000.0;
    6af2:	f8 01       	movw	r30, r16
    6af4:	84 8d       	ldd	r24, Z+28	; 0x1c
    6af6:	90 e0       	ldi	r25, 0x00	; 0
    6af8:	c0 97       	sbiw	r24, 0x30	; 48
    6afa:	bc 01       	movw	r22, r24
    6afc:	99 0f       	add	r25, r25
    6afe:	88 0b       	sbc	r24, r24
    6b00:	99 0b       	sbc	r25, r25
    6b02:	0e 94 cf 42 	call	0x859e	; 0x859e <__floatsisf>
    6b06:	20 e0       	ldi	r18, 0x00	; 0
    6b08:	30 e4       	ldi	r19, 0x40	; 64
    6b0a:	4c e1       	ldi	r20, 0x1C	; 28
    6b0c:	56 e4       	ldi	r21, 0x46	; 70
    6b0e:	0e 94 fa 41 	call	0x83f4	; 0x83f4 <__divsf3>
    6b12:	a5 01       	movw	r20, r10
    6b14:	94 01       	movw	r18, r8
    6b16:	0e 94 93 41 	call	0x8326	; 0x8326 <__addsf3>
		la +=	lamin/60.0;
    6b1a:	20 e0       	ldi	r18, 0x00	; 0
    6b1c:	30 e0       	ldi	r19, 0x00	; 0
    6b1e:	40 e7       	ldi	r20, 0x70	; 112
    6b20:	52 e4       	ldi	r21, 0x42	; 66
    6b22:	0e 94 fa 41 	call	0x83f4	; 0x83f4 <__divsf3>
    6b26:	a7 01       	movw	r20, r14
    6b28:	96 01       	movw	r18, r12
    6b2a:	0e 94 93 41 	call	0x8326	; 0x8326 <__addsf3>
    6b2e:	4b 01       	movw	r8, r22
    6b30:	5c 01       	movw	r10, r24
		if (gpsdata[30] != 'N')
    6b32:	f8 01       	movw	r30, r16
    6b34:	86 8d       	ldd	r24, Z+30	; 0x1e
    6b36:	8e 34       	cpi	r24, 0x4E	; 78
    6b38:	21 f0       	breq	.+8      	; 0x6b42 <_Z10gpshandlerv+0x1fc>
		{
			la *= -1;
    6b3a:	b7 fa       	bst	r11, 7
    6b3c:	b0 94       	com	r11
    6b3e:	b7 f8       	bld	r11, 7
    6b40:	b0 94       	com	r11
		}
		
		//Longitude
		lo =	(gpsdata[32] - '0')*100;
    6b42:	08 ec       	ldi	r16, 0xC8	; 200
    6b44:	18 e0       	ldi	r17, 0x08	; 8
    6b46:	f8 01       	movw	r30, r16
    6b48:	80 a1       	ldd	r24, Z+32	; 0x20
    6b4a:	90 e0       	ldi	r25, 0x00	; 0
    6b4c:	c0 97       	sbiw	r24, 0x30	; 48
    6b4e:	24 e6       	ldi	r18, 0x64	; 100
    6b50:	28 9f       	mul	r18, r24
    6b52:	b0 01       	movw	r22, r0
    6b54:	29 9f       	mul	r18, r25
    6b56:	70 0d       	add	r23, r0
    6b58:	11 24       	eor	r1, r1
    6b5a:	07 2e       	mov	r0, r23
    6b5c:	00 0c       	add	r0, r0
    6b5e:	88 0b       	sbc	r24, r24
    6b60:	99 0b       	sbc	r25, r25
    6b62:	0e 94 cf 42 	call	0x859e	; 0x859e <__floatsisf>
    6b66:	6b 01       	movw	r12, r22
    6b68:	7c 01       	movw	r14, r24
		lo +=	(gpsdata[33] - '0')*10;
    6b6a:	f8 01       	movw	r30, r16
    6b6c:	81 a1       	ldd	r24, Z+33	; 0x21
    6b6e:	90 e0       	ldi	r25, 0x00	; 0
    6b70:	c0 97       	sbiw	r24, 0x30	; 48
    6b72:	bc 01       	movw	r22, r24
    6b74:	66 0f       	add	r22, r22
    6b76:	77 1f       	adc	r23, r23
    6b78:	88 0f       	add	r24, r24
    6b7a:	99 1f       	adc	r25, r25
    6b7c:	88 0f       	add	r24, r24
    6b7e:	99 1f       	adc	r25, r25
    6b80:	88 0f       	add	r24, r24
    6b82:	99 1f       	adc	r25, r25
    6b84:	68 0f       	add	r22, r24
    6b86:	79 1f       	adc	r23, r25
    6b88:	07 2e       	mov	r0, r23
    6b8a:	00 0c       	add	r0, r0
    6b8c:	88 0b       	sbc	r24, r24
    6b8e:	99 0b       	sbc	r25, r25
    6b90:	0e 94 cf 42 	call	0x859e	; 0x859e <__floatsisf>
    6b94:	a7 01       	movw	r20, r14
    6b96:	96 01       	movw	r18, r12
    6b98:	0e 94 93 41 	call	0x8326	; 0x8326 <__addsf3>
    6b9c:	6b 01       	movw	r12, r22
    6b9e:	7c 01       	movw	r14, r24
		lo +=	(gpsdata[34] - '0');
    6ba0:	f8 01       	movw	r30, r16
    6ba2:	62 a1       	ldd	r22, Z+34	; 0x22
    6ba4:	70 e0       	ldi	r23, 0x00	; 0
    6ba6:	60 53       	subi	r22, 0x30	; 48
    6ba8:	71 09       	sbc	r23, r1
    6baa:	07 2e       	mov	r0, r23
    6bac:	00 0c       	add	r0, r0
    6bae:	88 0b       	sbc	r24, r24
    6bb0:	99 0b       	sbc	r25, r25
    6bb2:	0e 94 cf 42 	call	0x859e	; 0x859e <__floatsisf>
    6bb6:	a7 01       	movw	r20, r14
    6bb8:	96 01       	movw	r18, r12
    6bba:	0e 94 93 41 	call	0x8326	; 0x8326 <__addsf3>
    6bbe:	6b 01       	movw	r12, r22
    6bc0:	7c 01       	movw	r14, r24
		float lomin =	(gpsdata[35] - '0')*10;
    6bc2:	f8 01       	movw	r30, r16
    6bc4:	83 a1       	ldd	r24, Z+35	; 0x23
    6bc6:	90 e0       	ldi	r25, 0x00	; 0
    6bc8:	c0 97       	sbiw	r24, 0x30	; 48
    6bca:	bc 01       	movw	r22, r24
    6bcc:	66 0f       	add	r22, r22
    6bce:	77 1f       	adc	r23, r23
    6bd0:	88 0f       	add	r24, r24
    6bd2:	99 1f       	adc	r25, r25
    6bd4:	88 0f       	add	r24, r24
    6bd6:	99 1f       	adc	r25, r25
    6bd8:	88 0f       	add	r24, r24
    6bda:	99 1f       	adc	r25, r25
    6bdc:	68 0f       	add	r22, r24
    6bde:	79 1f       	adc	r23, r25
    6be0:	07 2e       	mov	r0, r23
    6be2:	00 0c       	add	r0, r0
    6be4:	88 0b       	sbc	r24, r24
    6be6:	99 0b       	sbc	r25, r25
    6be8:	0e 94 cf 42 	call	0x859e	; 0x859e <__floatsisf>
    6bec:	2b 01       	movw	r4, r22
    6bee:	3c 01       	movw	r6, r24
		lomin +=		(gpsdata[36] - '0');
    6bf0:	f8 01       	movw	r30, r16
    6bf2:	64 a1       	ldd	r22, Z+36	; 0x24
    6bf4:	70 e0       	ldi	r23, 0x00	; 0
    6bf6:	60 53       	subi	r22, 0x30	; 48
    6bf8:	71 09       	sbc	r23, r1
    6bfa:	07 2e       	mov	r0, r23
    6bfc:	00 0c       	add	r0, r0
    6bfe:	88 0b       	sbc	r24, r24
    6c00:	99 0b       	sbc	r25, r25
    6c02:	0e 94 cf 42 	call	0x859e	; 0x859e <__floatsisf>
    6c06:	a3 01       	movw	r20, r6
    6c08:	92 01       	movw	r18, r4
    6c0a:	0e 94 93 41 	call	0x8326	; 0x8326 <__addsf3>
    6c0e:	2b 01       	movw	r4, r22
    6c10:	3c 01       	movw	r6, r24
		lomin +=		(gpsdata[38] - '0')/10.0;
    6c12:	f8 01       	movw	r30, r16
    6c14:	66 a1       	ldd	r22, Z+38	; 0x26
    6c16:	70 e0       	ldi	r23, 0x00	; 0
    6c18:	60 53       	subi	r22, 0x30	; 48
    6c1a:	71 09       	sbc	r23, r1
    6c1c:	07 2e       	mov	r0, r23
    6c1e:	00 0c       	add	r0, r0
    6c20:	88 0b       	sbc	r24, r24
    6c22:	99 0b       	sbc	r25, r25
    6c24:	0e 94 cf 42 	call	0x859e	; 0x859e <__floatsisf>
    6c28:	20 e0       	ldi	r18, 0x00	; 0
    6c2a:	30 e0       	ldi	r19, 0x00	; 0
    6c2c:	40 e2       	ldi	r20, 0x20	; 32
    6c2e:	51 e4       	ldi	r21, 0x41	; 65
    6c30:	0e 94 fa 41 	call	0x83f4	; 0x83f4 <__divsf3>
    6c34:	a3 01       	movw	r20, r6
    6c36:	92 01       	movw	r18, r4
    6c38:	0e 94 93 41 	call	0x8326	; 0x8326 <__addsf3>
    6c3c:	2b 01       	movw	r4, r22
    6c3e:	3c 01       	movw	r6, r24
		lomin +=		(gpsdata[39] - '0')/100.0;
    6c40:	f8 01       	movw	r30, r16
    6c42:	67 a1       	ldd	r22, Z+39	; 0x27
    6c44:	70 e0       	ldi	r23, 0x00	; 0
    6c46:	60 53       	subi	r22, 0x30	; 48
    6c48:	71 09       	sbc	r23, r1
    6c4a:	07 2e       	mov	r0, r23
    6c4c:	00 0c       	add	r0, r0
    6c4e:	88 0b       	sbc	r24, r24
    6c50:	99 0b       	sbc	r25, r25
    6c52:	0e 94 cf 42 	call	0x859e	; 0x859e <__floatsisf>
    6c56:	20 e0       	ldi	r18, 0x00	; 0
    6c58:	30 e0       	ldi	r19, 0x00	; 0
    6c5a:	48 ec       	ldi	r20, 0xC8	; 200
    6c5c:	52 e4       	ldi	r21, 0x42	; 66
    6c5e:	0e 94 fa 41 	call	0x83f4	; 0x83f4 <__divsf3>
    6c62:	a3 01       	movw	r20, r6
    6c64:	92 01       	movw	r18, r4
    6c66:	0e 94 93 41 	call	0x8326	; 0x8326 <__addsf3>
    6c6a:	2b 01       	movw	r4, r22
    6c6c:	3c 01       	movw	r6, r24
		lomin +=		(gpsdata[40] - '0')/1000.0;
    6c6e:	f8 01       	movw	r30, r16
    6c70:	60 a5       	ldd	r22, Z+40	; 0x28
    6c72:	70 e0       	ldi	r23, 0x00	; 0
    6c74:	60 53       	subi	r22, 0x30	; 48
    6c76:	71 09       	sbc	r23, r1
    6c78:	07 2e       	mov	r0, r23
    6c7a:	00 0c       	add	r0, r0
    6c7c:	88 0b       	sbc	r24, r24
    6c7e:	99 0b       	sbc	r25, r25
    6c80:	0e 94 cf 42 	call	0x859e	; 0x859e <__floatsisf>
    6c84:	20 e0       	ldi	r18, 0x00	; 0
    6c86:	30 e0       	ldi	r19, 0x00	; 0
    6c88:	4a e7       	ldi	r20, 0x7A	; 122
    6c8a:	54 e4       	ldi	r21, 0x44	; 68
    6c8c:	0e 94 fa 41 	call	0x83f4	; 0x83f4 <__divsf3>
    6c90:	a3 01       	movw	r20, r6
    6c92:	92 01       	movw	r18, r4
    6c94:	0e 94 93 41 	call	0x8326	; 0x8326 <__addsf3>
    6c98:	2b 01       	movw	r4, r22
    6c9a:	3c 01       	movw	r6, r24
		lomin +=		(gpsdata[41] - '0')/10000.0;
    6c9c:	f8 01       	movw	r30, r16
    6c9e:	61 a5       	ldd	r22, Z+41	; 0x29
    6ca0:	70 e0       	ldi	r23, 0x00	; 0
    6ca2:	60 53       	subi	r22, 0x30	; 48
    6ca4:	71 09       	sbc	r23, r1
    6ca6:	07 2e       	mov	r0, r23
    6ca8:	00 0c       	add	r0, r0
    6caa:	88 0b       	sbc	r24, r24
    6cac:	99 0b       	sbc	r25, r25
    6cae:	0e 94 cf 42 	call	0x859e	; 0x859e <__floatsisf>
    6cb2:	20 e0       	ldi	r18, 0x00	; 0
    6cb4:	30 e4       	ldi	r19, 0x40	; 64
    6cb6:	4c e1       	ldi	r20, 0x1C	; 28
    6cb8:	56 e4       	ldi	r21, 0x46	; 70
    6cba:	0e 94 fa 41 	call	0x83f4	; 0x83f4 <__divsf3>
    6cbe:	a3 01       	movw	r20, r6
    6cc0:	92 01       	movw	r18, r4
    6cc2:	0e 94 93 41 	call	0x8326	; 0x8326 <__addsf3>
		lo +=			lomin/60.0;
    6cc6:	20 e0       	ldi	r18, 0x00	; 0
    6cc8:	30 e0       	ldi	r19, 0x00	; 0
    6cca:	40 e7       	ldi	r20, 0x70	; 112
    6ccc:	52 e4       	ldi	r21, 0x42	; 66
    6cce:	0e 94 fa 41 	call	0x83f4	; 0x83f4 <__divsf3>
    6cd2:	a7 01       	movw	r20, r14
    6cd4:	96 01       	movw	r18, r12
    6cd6:	0e 94 93 41 	call	0x8326	; 0x8326 <__addsf3>
    6cda:	9b 01       	movw	r18, r22
    6cdc:	ac 01       	movw	r20, r24
		if (gpsdata[43] != 'E')
    6cde:	f8 01       	movw	r30, r16
    6ce0:	83 a5       	ldd	r24, Z+43	; 0x2b
    6ce2:	85 34       	cpi	r24, 0x45	; 69
    6ce4:	09 f0       	breq	.+2      	; 0x6ce8 <_Z10gpshandlerv+0x3a2>
		{
			lo *= -1;
    6ce6:	50 58       	subi	r21, 0x80	; 128
		}
		
		//Avvaragging
		gpsmovingavv(la,lo);
    6ce8:	c5 01       	movw	r24, r10
    6cea:	b4 01       	movw	r22, r8
    6cec:	97 dd       	rcall	.-1234   	; 0x681c <_Z12gpsmovingavvdd>
		
		//Speed 
		volatile uint8_t counter = 45;
    6cee:	8d e2       	ldi	r24, 0x2D	; 45
    6cf0:	8c 83       	std	Y+4, r24	; 0x04
		uint8_t weiter = true;
		while (weiter)
		{
			if (gpsdata[counter]=='.')
    6cf2:	ec 81       	ldd	r30, Y+4	; 0x04
    6cf4:	f0 e0       	ldi	r31, 0x00	; 0
    6cf6:	e8 53       	subi	r30, 0x38	; 56
    6cf8:	f7 4f       	sbci	r31, 0xF7	; 247
    6cfa:	80 81       	ld	r24, Z
    6cfc:	8e 32       	cpi	r24, 0x2E	; 46
    6cfe:	91 f4       	brne	.+36     	; 0x6d24 <_Z10gpshandlerv+0x3de>
			{
				weiter=false;
				counter--;
    6d00:	8c 81       	ldd	r24, Y+4	; 0x04
    6d02:	81 50       	subi	r24, 0x01	; 1
    6d04:	8c 83       	std	Y+4, r24	; 0x04
			}
			counter++;
    6d06:	8c 81       	ldd	r24, Y+4	; 0x04
    6d08:	8f 5f       	subi	r24, 0xFF	; 255
    6d0a:	8c 83       	std	Y+4, r24	; 0x04
		}
		
		gpsspeed = 0;
    6d0c:	10 92 9b 08 	sts	0x089B, r1
    6d10:	10 92 9c 08 	sts	0x089C, r1
    6d14:	10 92 9d 08 	sts	0x089D, r1
    6d18:	10 92 9e 08 	sts	0x089E, r1
		for(uint8_t i=45;i<counter;i++){
    6d1c:	8c 81       	ldd	r24, Y+4	; 0x04
    6d1e:	8e 32       	cpi	r24, 0x2E	; 46
    6d20:	28 f4       	brcc	.+10     	; 0x6d2c <_Z10gpshandlerv+0x3e6>
    6d22:	47 c0       	rjmp	.+142    	; 0x6db2 <_Z10gpshandlerv+0x46c>
			if (gpsdata[counter]=='.')
			{
				weiter=false;
				counter--;
			}
			counter++;
    6d24:	8c 81       	ldd	r24, Y+4	; 0x04
    6d26:	8f 5f       	subi	r24, 0xFF	; 255
    6d28:	8c 83       	std	Y+4, r24	; 0x04
    6d2a:	e3 cf       	rjmp	.-58     	; 0x6cf2 <_Z10gpshandlerv+0x3ac>
		}
		
		gpsspeed = 0;
		for(uint8_t i=45;i<counter;i++){
    6d2c:	81 2c       	mov	r8, r1
    6d2e:	91 2c       	mov	r9, r1
    6d30:	54 01       	movw	r10, r8
    6d32:	0f 2e       	mov	r0, r31
    6d34:	fd e2       	ldi	r31, 0x2D	; 45
    6d36:	ff 2e       	mov	r15, r31
    6d38:	f0 2d       	mov	r31, r0
			gpsspeed += (gpsdata[i]-'0')*pow(10,(counter-i-1));
    6d3a:	0f 2d       	mov	r16, r15
    6d3c:	10 e0       	ldi	r17, 0x00	; 0
    6d3e:	8c 81       	ldd	r24, Y+4	; 0x04
    6d40:	90 e0       	ldi	r25, 0x00	; 0
    6d42:	80 1b       	sub	r24, r16
    6d44:	91 0b       	sbc	r25, r17
    6d46:	01 97       	sbiw	r24, 0x01	; 1
    6d48:	bc 01       	movw	r22, r24
    6d4a:	99 0f       	add	r25, r25
    6d4c:	88 0b       	sbc	r24, r24
    6d4e:	99 0b       	sbc	r25, r25
    6d50:	0e 94 cf 42 	call	0x859e	; 0x859e <__floatsisf>
    6d54:	9b 01       	movw	r18, r22
    6d56:	ac 01       	movw	r20, r24
    6d58:	60 e0       	ldi	r22, 0x00	; 0
    6d5a:	70 e0       	ldi	r23, 0x00	; 0
    6d5c:	80 e2       	ldi	r24, 0x20	; 32
    6d5e:	91 e4       	ldi	r25, 0x41	; 65
    6d60:	0e 94 5b 44 	call	0x88b6	; 0x88b6 <pow>
    6d64:	2b 01       	movw	r4, r22
    6d66:	3c 01       	movw	r6, r24
    6d68:	f8 01       	movw	r30, r16
    6d6a:	e8 53       	subi	r30, 0x38	; 56
    6d6c:	f7 4f       	sbci	r31, 0xF7	; 247
    6d6e:	60 81       	ld	r22, Z
    6d70:	70 e0       	ldi	r23, 0x00	; 0
    6d72:	60 53       	subi	r22, 0x30	; 48
    6d74:	71 09       	sbc	r23, r1
    6d76:	07 2e       	mov	r0, r23
    6d78:	00 0c       	add	r0, r0
    6d7a:	88 0b       	sbc	r24, r24
    6d7c:	99 0b       	sbc	r25, r25
    6d7e:	0e 94 cf 42 	call	0x859e	; 0x859e <__floatsisf>
    6d82:	a3 01       	movw	r20, r6
    6d84:	92 01       	movw	r18, r4
    6d86:	0e 94 f8 43 	call	0x87f0	; 0x87f0 <__mulsf3>
    6d8a:	9b 01       	movw	r18, r22
    6d8c:	ac 01       	movw	r20, r24
    6d8e:	c5 01       	movw	r24, r10
    6d90:	b4 01       	movw	r22, r8
    6d92:	0e 94 93 41 	call	0x8326	; 0x8326 <__addsf3>
    6d96:	4b 01       	movw	r8, r22
    6d98:	5c 01       	movw	r10, r24
			}
			counter++;
		}
		
		gpsspeed = 0;
		for(uint8_t i=45;i<counter;i++){
    6d9a:	f3 94       	inc	r15
    6d9c:	8c 81       	ldd	r24, Y+4	; 0x04
    6d9e:	f8 16       	cp	r15, r24
    6da0:	60 f2       	brcs	.-104    	; 0x6d3a <_Z10gpshandlerv+0x3f4>
    6da2:	80 92 9b 08 	sts	0x089B, r8
    6da6:	90 92 9c 08 	sts	0x089C, r9
    6daa:	a0 92 9d 08 	sts	0x089D, r10
    6dae:	b0 92 9e 08 	sts	0x089E, r11
			gpsspeed += (gpsdata[i]-'0')*pow(10,(counter-i-1));
		}
		gpsspeed += (gpsdata[counter+1]-'0')*0.1;
    6db2:	ec 81       	ldd	r30, Y+4	; 0x04
		gpsspeed += (gpsdata[counter+2]-'0')*0.01;
    6db4:	1c 81       	ldd	r17, Y+4	; 0x04
		
		gpsspeed = 0;
		for(uint8_t i=45;i<counter;i++){
			gpsspeed += (gpsdata[i]-'0')*pow(10,(counter-i-1));
		}
		gpsspeed += (gpsdata[counter+1]-'0')*0.1;
    6db6:	f0 e0       	ldi	r31, 0x00	; 0
    6db8:	e8 53       	subi	r30, 0x38	; 56
    6dba:	f7 4f       	sbci	r31, 0xF7	; 247
    6dbc:	61 81       	ldd	r22, Z+1	; 0x01
    6dbe:	70 e0       	ldi	r23, 0x00	; 0
    6dc0:	60 53       	subi	r22, 0x30	; 48
    6dc2:	71 09       	sbc	r23, r1
    6dc4:	07 2e       	mov	r0, r23
    6dc6:	00 0c       	add	r0, r0
    6dc8:	88 0b       	sbc	r24, r24
    6dca:	99 0b       	sbc	r25, r25
    6dcc:	0e 94 cf 42 	call	0x859e	; 0x859e <__floatsisf>
    6dd0:	2d ec       	ldi	r18, 0xCD	; 205
    6dd2:	3c ec       	ldi	r19, 0xCC	; 204
    6dd4:	4c ec       	ldi	r20, 0xCC	; 204
    6dd6:	5d e3       	ldi	r21, 0x3D	; 61
    6dd8:	0e 94 f8 43 	call	0x87f0	; 0x87f0 <__mulsf3>
    6ddc:	20 91 9b 08 	lds	r18, 0x089B
    6de0:	30 91 9c 08 	lds	r19, 0x089C
    6de4:	40 91 9d 08 	lds	r20, 0x089D
    6de8:	50 91 9e 08 	lds	r21, 0x089E
    6dec:	0e 94 93 41 	call	0x8326	; 0x8326 <__addsf3>
    6df0:	6b 01       	movw	r12, r22
    6df2:	7c 01       	movw	r14, r24
		gpsspeed += (gpsdata[counter+2]-'0')*0.01;
    6df4:	e1 2f       	mov	r30, r17
    6df6:	f0 e0       	ldi	r31, 0x00	; 0
    6df8:	e8 53       	subi	r30, 0x38	; 56
    6dfa:	f7 4f       	sbci	r31, 0xF7	; 247
    6dfc:	82 81       	ldd	r24, Z+2	; 0x02
    6dfe:	90 e0       	ldi	r25, 0x00	; 0
    6e00:	c0 97       	sbiw	r24, 0x30	; 48
    6e02:	bc 01       	movw	r22, r24
    6e04:	99 0f       	add	r25, r25
    6e06:	88 0b       	sbc	r24, r24
    6e08:	99 0b       	sbc	r25, r25
    6e0a:	0e 94 cf 42 	call	0x859e	; 0x859e <__floatsisf>
    6e0e:	2a e0       	ldi	r18, 0x0A	; 10
    6e10:	37 ed       	ldi	r19, 0xD7	; 215
    6e12:	43 e2       	ldi	r20, 0x23	; 35
    6e14:	5c e3       	ldi	r21, 0x3C	; 60
    6e16:	0e 94 f8 43 	call	0x87f0	; 0x87f0 <__mulsf3>
    6e1a:	9b 01       	movw	r18, r22
    6e1c:	ac 01       	movw	r20, r24
    6e1e:	c7 01       	movw	r24, r14
    6e20:	b6 01       	movw	r22, r12
    6e22:	0e 94 93 41 	call	0x8326	; 0x8326 <__addsf3>
		//umrechnen knoten in kmh
		gpsspeed *= 1.852;
    6e26:	26 e5       	ldi	r18, 0x56	; 86
    6e28:	3e e0       	ldi	r19, 0x0E	; 14
    6e2a:	4d ee       	ldi	r20, 0xED	; 237
    6e2c:	5f e3       	ldi	r21, 0x3F	; 63
    6e2e:	0e 94 f8 43 	call	0x87f0	; 0x87f0 <__mulsf3>
    6e32:	60 93 9b 08 	sts	0x089B, r22
    6e36:	70 93 9c 08 	sts	0x089C, r23
    6e3a:	80 93 9d 08 	sts	0x089D, r24
    6e3e:	90 93 9e 08 	sts	0x089E, r25
		
		//date
		counter =19;
    6e42:	83 e1       	ldi	r24, 0x13	; 19
    6e44:	8c 83       	std	Y+4, r24	; 0x04
		volatile uint8_t nichterreicht = 0;
    6e46:	1b 82       	std	Y+3, r1	; 0x03
		
		while (nichterreicht < 7)
    6e48:	8b 81       	ldd	r24, Y+3	; 0x03
    6e4a:	87 30       	cpi	r24, 0x07	; 7
    6e4c:	80 f4       	brcc	.+32     	; 0x6e6e <_Z10gpshandlerv+0x528>
		{
			if (gpsdata[counter] == ',')
    6e4e:	ec 81       	ldd	r30, Y+4	; 0x04
    6e50:	f0 e0       	ldi	r31, 0x00	; 0
    6e52:	e8 53       	subi	r30, 0x38	; 56
    6e54:	f7 4f       	sbci	r31, 0xF7	; 247
    6e56:	80 81       	ld	r24, Z
    6e58:	8c 32       	cpi	r24, 0x2C	; 44
    6e5a:	19 f4       	brne	.+6      	; 0x6e62 <_Z10gpshandlerv+0x51c>
			{
				nichterreicht++;
    6e5c:	8b 81       	ldd	r24, Y+3	; 0x03
    6e5e:	8f 5f       	subi	r24, 0xFF	; 255
    6e60:	8b 83       	std	Y+3, r24	; 0x03
			}
			counter++;
    6e62:	8c 81       	ldd	r24, Y+4	; 0x04
    6e64:	8f 5f       	subi	r24, 0xFF	; 255
    6e66:	8c 83       	std	Y+4, r24	; 0x04
		
		//date
		counter =19;
		volatile uint8_t nichterreicht = 0;
		
		while (nichterreicht < 7)
    6e68:	8b 81       	ldd	r24, Y+3	; 0x03
    6e6a:	87 30       	cpi	r24, 0x07	; 7
    6e6c:	80 f3       	brcs	.-32     	; 0x6e4e <_Z10gpshandlerv+0x508>
			}
			counter++;
		}
		
		//Datum
		gpsTag =	(gpsdata[counter+0] - '0')*10;
    6e6e:	ac 81       	ldd	r26, Y+4	; 0x04
		gpsTag +=	(gpsdata[counter+1] - '0');
    6e70:	ec 81       	ldd	r30, Y+4	; 0x04
			}
			counter++;
		}
		
		//Datum
		gpsTag =	(gpsdata[counter+0] - '0')*10;
    6e72:	b0 e0       	ldi	r27, 0x00	; 0
    6e74:	a8 53       	subi	r26, 0x38	; 56
    6e76:	b7 4f       	sbci	r27, 0xF7	; 247
    6e78:	8c 91       	ld	r24, X
    6e7a:	88 0f       	add	r24, r24
    6e7c:	80 56       	subi	r24, 0x60	; 96
    6e7e:	28 2f       	mov	r18, r24
    6e80:	22 0f       	add	r18, r18
    6e82:	22 0f       	add	r18, r18
    6e84:	28 0f       	add	r18, r24
		gpsTag +=	(gpsdata[counter+1] - '0');
    6e86:	f0 e0       	ldi	r31, 0x00	; 0
    6e88:	e8 53       	subi	r30, 0x38	; 56
    6e8a:	f7 4f       	sbci	r31, 0xF7	; 247
    6e8c:	81 81       	ldd	r24, Z+1	; 0x01
    6e8e:	90 e0       	ldi	r25, 0x00	; 0
    6e90:	c0 97       	sbiw	r24, 0x30	; 48
    6e92:	82 0f       	add	r24, r18
    6e94:	91 1d       	adc	r25, r1
    6e96:	80 93 97 08 	sts	0x0897, r24
		gpsMonat =	(gpsdata[counter+2] - '0')*10;
    6e9a:	ac 81       	ldd	r26, Y+4	; 0x04
		gpsMonat +=	(gpsdata[counter+3] - '0');
    6e9c:	ec 81       	ldd	r30, Y+4	; 0x04
		}
		
		//Datum
		gpsTag =	(gpsdata[counter+0] - '0')*10;
		gpsTag +=	(gpsdata[counter+1] - '0');
		gpsMonat =	(gpsdata[counter+2] - '0')*10;
    6e9e:	b0 e0       	ldi	r27, 0x00	; 0
    6ea0:	a8 53       	subi	r26, 0x38	; 56
    6ea2:	b7 4f       	sbci	r27, 0xF7	; 247
    6ea4:	12 96       	adiw	r26, 0x02	; 2
    6ea6:	8c 91       	ld	r24, X
    6ea8:	88 0f       	add	r24, r24
    6eaa:	80 56       	subi	r24, 0x60	; 96
    6eac:	28 2f       	mov	r18, r24
    6eae:	22 0f       	add	r18, r18
    6eb0:	22 0f       	add	r18, r18
    6eb2:	28 0f       	add	r18, r24
		gpsMonat +=	(gpsdata[counter+3] - '0');
    6eb4:	f0 e0       	ldi	r31, 0x00	; 0
    6eb6:	e8 53       	subi	r30, 0x38	; 56
    6eb8:	f7 4f       	sbci	r31, 0xF7	; 247
    6eba:	83 81       	ldd	r24, Z+3	; 0x03
    6ebc:	90 e0       	ldi	r25, 0x00	; 0
    6ebe:	c0 97       	sbiw	r24, 0x30	; 48
    6ec0:	82 0f       	add	r24, r18
    6ec2:	91 1d       	adc	r25, r1
    6ec4:	80 93 96 08 	sts	0x0896, r24
		gpsJahr =	(gpsdata[counter+4] - '0')*10;
    6ec8:	ac 81       	ldd	r26, Y+4	; 0x04
		gpsJahr +=	(gpsdata[counter+5] - '0');
    6eca:	ec 81       	ldd	r30, Y+4	; 0x04
		//Datum
		gpsTag =	(gpsdata[counter+0] - '0')*10;
		gpsTag +=	(gpsdata[counter+1] - '0');
		gpsMonat =	(gpsdata[counter+2] - '0')*10;
		gpsMonat +=	(gpsdata[counter+3] - '0');
		gpsJahr =	(gpsdata[counter+4] - '0')*10;
    6ecc:	b0 e0       	ldi	r27, 0x00	; 0
    6ece:	a8 53       	subi	r26, 0x38	; 56
    6ed0:	b7 4f       	sbci	r27, 0xF7	; 247
    6ed2:	14 96       	adiw	r26, 0x04	; 4
    6ed4:	8c 91       	ld	r24, X
    6ed6:	88 0f       	add	r24, r24
    6ed8:	80 56       	subi	r24, 0x60	; 96
    6eda:	28 2f       	mov	r18, r24
    6edc:	22 0f       	add	r18, r18
    6ede:	22 0f       	add	r18, r18
    6ee0:	28 0f       	add	r18, r24
		gpsJahr +=	(gpsdata[counter+5] - '0');
    6ee2:	f0 e0       	ldi	r31, 0x00	; 0
    6ee4:	e8 53       	subi	r30, 0x38	; 56
    6ee6:	f7 4f       	sbci	r31, 0xF7	; 247
    6ee8:	85 81       	ldd	r24, Z+5	; 0x05
    6eea:	90 e0       	ldi	r25, 0x00	; 0
    6eec:	c0 97       	sbiw	r24, 0x30	; 48
    6eee:	82 0f       	add	r24, r18
    6ef0:	91 1d       	adc	r25, r1
    6ef2:	80 93 95 08 	sts	0x0895, r24
		
		gpsstatus &= ~(1<<complete);
    6ef6:	80 91 10 09 	lds	r24, 0x0910
    6efa:	8b 7f       	andi	r24, 0xFB	; 251
    6efc:	80 93 10 09 	sts	0x0910, r24
    6f00:	8e c0       	rjmp	.+284    	; 0x701e <_Z10gpshandlerv+0x6d8>
	}
	else if ((gpsstatus&(1<<completenotvalid))  && (gpsstatus&(1<<fix)))
    6f02:	93 ff       	sbrs	r25, 3
    6f04:	8c c0       	rjmp	.+280    	; 0x701e <_Z10gpshandlerv+0x6d8>
    6f06:	99 23       	and	r25, r25
    6f08:	0c f0       	brlt	.+2      	; 0x6f0c <_Z10gpshandlerv+0x5c6>
    6f0a:	89 c0       	rjmp	.+274    	; 0x701e <_Z10gpshandlerv+0x6d8>
	{
		//Zeit
		gpsstunde =		(gpsdata[7] - '0')*10;
		gpsstunde +=	(gpsdata[8] - '0');
    6f0c:	e8 ec       	ldi	r30, 0xC8	; 200
    6f0e:	f8 e0       	ldi	r31, 0x08	; 8
    6f10:	80 85       	ldd	r24, Z+8	; 0x08
    6f12:	31 ed       	ldi	r19, 0xD1	; 209
    6f14:	38 0f       	add	r19, r24
		gpsstatus &= ~(1<<complete);
	}
	else if ((gpsstatus&(1<<completenotvalid))  && (gpsstatus&(1<<fix)))
	{
		//Zeit
		gpsstunde =		(gpsdata[7] - '0')*10;
    6f16:	87 81       	ldd	r24, Z+7	; 0x07
    6f18:	88 0f       	add	r24, r24
    6f1a:	80 56       	subi	r24, 0x60	; 96
    6f1c:	28 2f       	mov	r18, r24
    6f1e:	22 0f       	add	r18, r18
    6f20:	22 0f       	add	r18, r18
    6f22:	82 0f       	add	r24, r18
		gpsstunde +=	(gpsdata[8] - '0');
		gpsstunde += GMT;
    6f24:	83 0f       	add	r24, r19
    6f26:	80 93 9a 08 	sts	0x089A, r24
    6f2a:	82 85       	ldd	r24, Z+10	; 0x0a
    6f2c:	30 ed       	ldi	r19, 0xD0	; 208
    6f2e:	38 0f       	add	r19, r24
		gpsminute =		(gpsdata[9] - '0')*10;
    6f30:	81 85       	ldd	r24, Z+9	; 0x09
    6f32:	88 0f       	add	r24, r24
    6f34:	80 56       	subi	r24, 0x60	; 96
    6f36:	28 2f       	mov	r18, r24
    6f38:	22 0f       	add	r18, r18
    6f3a:	22 0f       	add	r18, r18
    6f3c:	82 0f       	add	r24, r18
		gpsminute +=	(gpsdata[10] - '0');
    6f3e:	83 0f       	add	r24, r19
    6f40:	80 93 99 08 	sts	0x0899, r24
    6f44:	84 85       	ldd	r24, Z+12	; 0x0c
    6f46:	30 ed       	ldi	r19, 0xD0	; 208
    6f48:	38 0f       	add	r19, r24
		gpssekunde =	(gpsdata[11] - '0')*10;
    6f4a:	83 85       	ldd	r24, Z+11	; 0x0b
    6f4c:	88 0f       	add	r24, r24
    6f4e:	80 56       	subi	r24, 0x60	; 96
    6f50:	28 2f       	mov	r18, r24
    6f52:	22 0f       	add	r18, r18
    6f54:	22 0f       	add	r18, r18
    6f56:	82 0f       	add	r24, r18
		gpssekunde +=	(gpsdata[12] - '0');
    6f58:	83 0f       	add	r24, r19
    6f5a:	80 93 98 08 	sts	0x0898, r24
		
		volatile uint8_t counter = 19;
    6f5e:	83 e1       	ldi	r24, 0x13	; 19
    6f60:	8a 83       	std	Y+2, r24	; 0x02
		volatile uint8_t nichterreicht = 0;
    6f62:	19 82       	std	Y+1, r1	; 0x01
		
		while (nichterreicht < 7)
    6f64:	89 81       	ldd	r24, Y+1	; 0x01
    6f66:	87 30       	cpi	r24, 0x07	; 7
    6f68:	80 f4       	brcc	.+32     	; 0x6f8a <_Z10gpshandlerv+0x644>
		{
			if (gpsdata[counter] == ',')
    6f6a:	ea 81       	ldd	r30, Y+2	; 0x02
    6f6c:	f0 e0       	ldi	r31, 0x00	; 0
    6f6e:	e8 53       	subi	r30, 0x38	; 56
    6f70:	f7 4f       	sbci	r31, 0xF7	; 247
    6f72:	80 81       	ld	r24, Z
    6f74:	8c 32       	cpi	r24, 0x2C	; 44
    6f76:	19 f4       	brne	.+6      	; 0x6f7e <_Z10gpshandlerv+0x638>
			{
				nichterreicht++;
    6f78:	89 81       	ldd	r24, Y+1	; 0x01
    6f7a:	8f 5f       	subi	r24, 0xFF	; 255
    6f7c:	89 83       	std	Y+1, r24	; 0x01
			}
			counter++;
    6f7e:	8a 81       	ldd	r24, Y+2	; 0x02
    6f80:	8f 5f       	subi	r24, 0xFF	; 255
    6f82:	8a 83       	std	Y+2, r24	; 0x02
		gpssekunde +=	(gpsdata[12] - '0');
		
		volatile uint8_t counter = 19;
		volatile uint8_t nichterreicht = 0;
		
		while (nichterreicht < 7)
    6f84:	89 81       	ldd	r24, Y+1	; 0x01
    6f86:	87 30       	cpi	r24, 0x07	; 7
    6f88:	80 f3       	brcs	.-32     	; 0x6f6a <_Z10gpshandlerv+0x624>
			}
			counter++;
		}
		
		//Datum
		gpsTag =	(gpsdata[counter+0] - '0')*10;
    6f8a:	aa 81       	ldd	r26, Y+2	; 0x02
		gpsTag +=	(gpsdata[counter+1] - '0');
    6f8c:	ea 81       	ldd	r30, Y+2	; 0x02
			}
			counter++;
		}
		
		//Datum
		gpsTag =	(gpsdata[counter+0] - '0')*10;
    6f8e:	b0 e0       	ldi	r27, 0x00	; 0
    6f90:	a8 53       	subi	r26, 0x38	; 56
    6f92:	b7 4f       	sbci	r27, 0xF7	; 247
    6f94:	8c 91       	ld	r24, X
    6f96:	88 0f       	add	r24, r24
    6f98:	80 56       	subi	r24, 0x60	; 96
    6f9a:	28 2f       	mov	r18, r24
    6f9c:	22 0f       	add	r18, r18
    6f9e:	22 0f       	add	r18, r18
    6fa0:	82 0f       	add	r24, r18
		gpsTag +=	(gpsdata[counter+1] - '0');
    6fa2:	f0 e0       	ldi	r31, 0x00	; 0
    6fa4:	e8 53       	subi	r30, 0x38	; 56
    6fa6:	f7 4f       	sbci	r31, 0xF7	; 247
    6fa8:	21 81       	ldd	r18, Z+1	; 0x01
    6faa:	30 e0       	ldi	r19, 0x00	; 0
    6fac:	20 53       	subi	r18, 0x30	; 48
    6fae:	31 09       	sbc	r19, r1
    6fb0:	28 0f       	add	r18, r24
    6fb2:	31 1d       	adc	r19, r1
    6fb4:	20 93 97 08 	sts	0x0897, r18
		gpsMonat =	(gpsdata[counter+2] - '0')*10;
    6fb8:	aa 81       	ldd	r26, Y+2	; 0x02
		gpsMonat +=	(gpsdata[counter+3] - '0');
    6fba:	ea 81       	ldd	r30, Y+2	; 0x02
		}
		
		//Datum
		gpsTag =	(gpsdata[counter+0] - '0')*10;
		gpsTag +=	(gpsdata[counter+1] - '0');
		gpsMonat =	(gpsdata[counter+2] - '0')*10;
    6fbc:	b0 e0       	ldi	r27, 0x00	; 0
    6fbe:	a8 53       	subi	r26, 0x38	; 56
    6fc0:	b7 4f       	sbci	r27, 0xF7	; 247
    6fc2:	12 96       	adiw	r26, 0x02	; 2
    6fc4:	8c 91       	ld	r24, X
    6fc6:	88 0f       	add	r24, r24
    6fc8:	80 56       	subi	r24, 0x60	; 96
    6fca:	28 2f       	mov	r18, r24
    6fcc:	22 0f       	add	r18, r18
    6fce:	22 0f       	add	r18, r18
    6fd0:	82 0f       	add	r24, r18
		gpsMonat +=	(gpsdata[counter+3] - '0');
    6fd2:	f0 e0       	ldi	r31, 0x00	; 0
    6fd4:	e8 53       	subi	r30, 0x38	; 56
    6fd6:	f7 4f       	sbci	r31, 0xF7	; 247
    6fd8:	23 81       	ldd	r18, Z+3	; 0x03
    6fda:	30 e0       	ldi	r19, 0x00	; 0
    6fdc:	20 53       	subi	r18, 0x30	; 48
    6fde:	31 09       	sbc	r19, r1
    6fe0:	28 0f       	add	r18, r24
    6fe2:	31 1d       	adc	r19, r1
    6fe4:	20 93 96 08 	sts	0x0896, r18
		gpsJahr =	(gpsdata[counter+4] - '0')*10;
    6fe8:	aa 81       	ldd	r26, Y+2	; 0x02
		gpsJahr +=	(gpsdata[counter+5] - '0');
    6fea:	ea 81       	ldd	r30, Y+2	; 0x02
		//Datum
		gpsTag =	(gpsdata[counter+0] - '0')*10;
		gpsTag +=	(gpsdata[counter+1] - '0');
		gpsMonat =	(gpsdata[counter+2] - '0')*10;
		gpsMonat +=	(gpsdata[counter+3] - '0');
		gpsJahr =	(gpsdata[counter+4] - '0')*10;
    6fec:	b0 e0       	ldi	r27, 0x00	; 0
    6fee:	a8 53       	subi	r26, 0x38	; 56
    6ff0:	b7 4f       	sbci	r27, 0xF7	; 247
    6ff2:	14 96       	adiw	r26, 0x04	; 4
    6ff4:	8c 91       	ld	r24, X
    6ff6:	88 0f       	add	r24, r24
    6ff8:	80 56       	subi	r24, 0x60	; 96
    6ffa:	28 2f       	mov	r18, r24
    6ffc:	22 0f       	add	r18, r18
    6ffe:	22 0f       	add	r18, r18
    7000:	82 0f       	add	r24, r18
		gpsJahr +=	(gpsdata[counter+5] - '0');
    7002:	f0 e0       	ldi	r31, 0x00	; 0
    7004:	e8 53       	subi	r30, 0x38	; 56
    7006:	f7 4f       	sbci	r31, 0xF7	; 247
    7008:	25 81       	ldd	r18, Z+5	; 0x05
    700a:	30 e0       	ldi	r19, 0x00	; 0
    700c:	20 53       	subi	r18, 0x30	; 48
    700e:	31 09       	sbc	r19, r1
    7010:	28 0f       	add	r18, r24
    7012:	31 1d       	adc	r19, r1
    7014:	20 93 95 08 	sts	0x0895, r18
		
		gpsstatus &= ~(1<<completenotvalid);
    7018:	97 7f       	andi	r25, 0xF7	; 247
    701a:	90 93 10 09 	sts	0x0910, r25
	}
	//fix status pruefen, wenn implementiert
}
    701e:	0f 90       	pop	r0
    7020:	0f 90       	pop	r0
    7022:	0f 90       	pop	r0
    7024:	0f 90       	pop	r0
    7026:	df 91       	pop	r29
    7028:	cf 91       	pop	r28
    702a:	1f 91       	pop	r17
    702c:	0f 91       	pop	r16
    702e:	ff 90       	pop	r15
    7030:	ef 90       	pop	r14
    7032:	df 90       	pop	r13
    7034:	cf 90       	pop	r12
    7036:	bf 90       	pop	r11
    7038:	af 90       	pop	r10
    703a:	9f 90       	pop	r9
    703c:	8f 90       	pop	r8
    703e:	7f 90       	pop	r7
    7040:	6f 90       	pop	r6
    7042:	5f 90       	pop	r5
    7044:	4f 90       	pop	r4
    7046:	08 95       	ret

00007048 <main>:
	| ((DWORD)rtc.Minuten << 5)
	| ((DWORD)rtc.Sekunden >> 1);
}

int main(void)
{
    7048:	cf 93       	push	r28
    704a:	df 93       	push	r29
    704c:	cd b7       	in	r28, 0x3d	; 61
    704e:	de b7       	in	r29, 0x3e	; 62
    7050:	65 97       	sbiw	r28, 0x15	; 21
    7052:	0f b6       	in	r0, 0x3f	; 63
    7054:	f8 94       	cli
    7056:	de bf       	out	0x3e, r29	; 62
    7058:	0f be       	out	0x3f, r0	; 63
    705a:	cd bf       	out	0x3d, r28	; 61
    initialisierung();
    705c:	0e 94 bd 2f 	call	0x5f7a	; 0x5f7a <_Z15initialisierungv>
#include <avr/interrupt.h>

//define new and delete operator
void * operator new(size_t size)
{
	return malloc(size);
    7060:	8a e2       	ldi	r24, 0x2A	; 42
    7062:	90 e0       	ldi	r25, 0x00	; 0
    7064:	0e 94 ed 4a 	call	0x95da	; 0x95da <malloc>
    7068:	fc 01       	movw	r30, r24
		uint8_t posx;
		uint8_t maxentries;
		uint8_t maxentriesx;
	monitor(Display *ol, RTC *rt)
	{
		buffersize = 0;
    706a:	16 8a       	std	Z+22, r1	; 0x16
		oled = ol;
    706c:	83 e4       	ldi	r24, 0x43	; 67
    706e:	9a e0       	ldi	r25, 0x0A	; 10
    7070:	90 8f       	std	Z+24, r25	; 0x18
    7072:	87 8b       	std	Z+23, r24	; 0x17
		rtc = rt;
    7074:	84 e4       	ldi	r24, 0x44	; 68
    7076:	9e e0       	ldi	r25, 0x0E	; 14
    7078:	92 8f       	std	Z+26, r25	; 0x1a
    707a:	81 8f       	std	Z+25, r24	; 0x19
		posy=0;
    707c:	15 a2       	std	Z+37, r1	; 0x25
		posx=0;
    707e:	16 a2       	std	Z+38, r1	; 0x26
		maxentriesx = 1;
    7080:	81 e0       	ldi	r24, 0x01	; 1
    7082:	80 a7       	std	Z+40, r24	; 0x28
class uhr:public monitor
{
	private:
	uint8_t Zeiger;
	public:
	uhr(Display *ol, RTC *rt):monitor(ol,rt)
    7084:	8b ef       	ldi	r24, 0xFB	; 251
    7086:	93 e0       	ldi	r25, 0x03	; 3
    7088:	91 83       	std	Z+1, r25	; 0x01
    708a:	80 83       	st	Z, r24
	{
		char na[] = "Uhr";
    708c:	85 e5       	ldi	r24, 0x55	; 85
    708e:	98 e6       	ldi	r25, 0x68	; 104
    7090:	a2 e7       	ldi	r26, 0x72	; 114
    7092:	b0 e0       	ldi	r27, 0x00	; 0
    7094:	89 83       	std	Y+1, r24	; 0x01
    7096:	9a 83       	std	Y+2, r25	; 0x02
    7098:	ab 83       	std	Y+3, r26	; 0x03
    709a:	bc 83       	std	Y+4, r27	; 0x04
    709c:	9e 01       	movw	r18, r28
    709e:	2f 5f       	subi	r18, 0xFF	; 255
    70a0:	3f 4f       	sbci	r19, 0xFF	; 255
    70a2:	cf 01       	movw	r24, r30
    70a4:	4b 96       	adiw	r24, 0x1b	; 27
    70a6:	be 01       	movw	r22, r28
    70a8:	65 5f       	subi	r22, 0xF5	; 245
    70aa:	7f 4f       	sbci	r23, 0xFF	; 255
    70ac:	89 01       	movw	r16, r18
			{
				name[i] = na[i];
			}
			else
			{
				name[i] = ' ';
    70ae:	40 e2       	ldi	r20, 0x20	; 32
    70b0:	50 2f       	mov	r21, r16
    70b2:	52 1b       	sub	r21, r18
	public:
	uhr(Display *ol, RTC *rt):monitor(ol,rt)
	{
		char na[] = "Uhr";
		for(uint8_t i =0; i< namesize;i++){
			if (i<sizeof(na))
    70b4:	54 30       	cpi	r21, 0x04	; 4
    70b6:	28 f4       	brcc	.+10     	; 0x70c2 <main+0x7a>
			{
				name[i] = na[i];
    70b8:	d8 01       	movw	r26, r16
    70ba:	5c 91       	ld	r21, X
    70bc:	dc 01       	movw	r26, r24
    70be:	5c 93       	st	X, r21
    70c0:	02 c0       	rjmp	.+4      	; 0x70c6 <main+0x7e>
			}
			else
			{
				name[i] = ' ';
    70c2:	dc 01       	movw	r26, r24
    70c4:	4c 93       	st	X, r20
    70c6:	0f 5f       	subi	r16, 0xFF	; 255
    70c8:	1f 4f       	sbci	r17, 0xFF	; 255
    70ca:	01 96       	adiw	r24, 0x01	; 1
	uint8_t Zeiger;
	public:
	uhr(Display *ol, RTC *rt):monitor(ol,rt)
	{
		char na[] = "Uhr";
		for(uint8_t i =0; i< namesize;i++){
    70cc:	06 17       	cp	r16, r22
    70ce:	17 07       	cpc	r17, r23
    70d0:	79 f7       	brne	.-34     	; 0x70b0 <main+0x68>
			else
			{
				name[i] = ' ';
			}
		}
		Zeiger = 0;
    70d2:	11 a6       	std	Z+41, r1	; 0x29
		maxentries = 3;
    70d4:	83 e0       	ldi	r24, 0x03	; 3
    70d6:	87 a3       	std	Z+39, r24	; 0x27
		new tacho(&oled,&rtc),
		new wandern(&oled,&rtc),
		new einstellungen(&oled,&rtc),
		new offscreen(&oled,&rtc),
		new menue(&oled,&rtc)
	};
    70d8:	fa 83       	std	Y+2, r31	; 0x02
    70da:	e9 83       	std	Y+1, r30	; 0x01
#include <avr/interrupt.h>

//define new and delete operator
void * operator new(size_t size)
{
	return malloc(size);
    70dc:	89 e2       	ldi	r24, 0x29	; 41
    70de:	90 e0       	ldi	r25, 0x00	; 0
    70e0:	0e 94 ed 4a 	call	0x95da	; 0x95da <malloc>
    70e4:	8c 01       	movw	r16, r24
		uint8_t posx;
		uint8_t maxentries;
		uint8_t maxentriesx;
	monitor(Display *ol, RTC *rt)
	{
		buffersize = 0;
    70e6:	fc 01       	movw	r30, r24
    70e8:	16 8a       	std	Z+22, r1	; 0x16
		oled = ol;
    70ea:	83 e4       	ldi	r24, 0x43	; 67
    70ec:	9a e0       	ldi	r25, 0x0A	; 10
    70ee:	90 8f       	std	Z+24, r25	; 0x18
    70f0:	87 8b       	std	Z+23, r24	; 0x17
		rtc = rt;
    70f2:	84 e4       	ldi	r24, 0x44	; 68
    70f4:	9e e0       	ldi	r25, 0x0E	; 14
    70f6:	92 8f       	std	Z+26, r25	; 0x1a
    70f8:	81 8f       	std	Z+25, r24	; 0x19
		posy=0;
    70fa:	15 a2       	std	Z+37, r1	; 0x25
		posx=0;
    70fc:	16 a2       	std	Z+38, r1	; 0x26
		maxentriesx = 1;
    70fe:	81 e0       	ldi	r24, 0x01	; 1
    7100:	80 a7       	std	Z+40, r24	; 0x28
class tacho: public monitor
{
	private:
		
	public:
	tacho(Display *ol,RTC *rtc):monitor(ol,rtc)
    7102:	83 e0       	ldi	r24, 0x03	; 3
    7104:	94 e0       	ldi	r25, 0x04	; 4
    7106:	91 83       	std	Z+1, r25	; 0x01
    7108:	80 83       	st	Z, r24
	{
		char na[] = "Tacho";
    710a:	86 e0       	ldi	r24, 0x06	; 6
    710c:	e5 e4       	ldi	r30, 0x45	; 69
    710e:	f2 e0       	ldi	r31, 0x02	; 2
    7110:	de 01       	movw	r26, r28
    7112:	1d 96       	adiw	r26, 0x0d	; 13
    7114:	01 90       	ld	r0, Z+
    7116:	0d 92       	st	X+, r0
    7118:	8a 95       	dec	r24
    711a:	e1 f7       	brne	.-8      	; 0x7114 <main+0xcc>
    711c:	ce 01       	movw	r24, r28
    711e:	0d 96       	adiw	r24, 0x0d	; 13
    7120:	d8 01       	movw	r26, r16
    7122:	5b 96       	adiw	r26, 0x1b	; 27
    7124:	ae 01       	movw	r20, r28
    7126:	49 5e       	subi	r20, 0xE9	; 233
    7128:	5f 4f       	sbci	r21, 0xFF	; 255
    712a:	fc 01       	movw	r30, r24
			{
				name[i] = na[i];
			}
			else
			{
				name[i] = ' ';
    712c:	20 e2       	ldi	r18, 0x20	; 32
    712e:	3e 2f       	mov	r19, r30
    7130:	38 1b       	sub	r19, r24
	public:
	tacho(Display *ol,RTC *rtc):monitor(ol,rtc)
	{
		char na[] = "Tacho";
		for(uint8_t i =0; i< namesize;i++){
			if (i<sizeof(na))
    7132:	36 30       	cpi	r19, 0x06	; 6
    7134:	18 f4       	brcc	.+6      	; 0x713c <main+0xf4>
			{
				name[i] = na[i];
    7136:	30 81       	ld	r19, Z
    7138:	3c 93       	st	X, r19
    713a:	01 c0       	rjmp	.+2      	; 0x713e <main+0xf6>
			}
			else
			{
				name[i] = ' ';
    713c:	2c 93       	st	X, r18
    713e:	31 96       	adiw	r30, 0x01	; 1
    7140:	11 96       	adiw	r26, 0x01	; 1
		
	public:
	tacho(Display *ol,RTC *rtc):monitor(ol,rtc)
	{
		char na[] = "Tacho";
		for(uint8_t i =0; i< namesize;i++){
    7142:	e4 17       	cp	r30, r20
    7144:	f5 07       	cpc	r31, r21
    7146:	99 f7       	brne	.-26     	; 0x712e <main+0xe6>
			else
			{
				name[i] = ' ';
			}
		}
		nullen();
    7148:	0e 94 a0 2e 	call	0x5d40	; 0x5d40 <_Z6nullenv>
		new tacho(&oled,&rtc),
		new wandern(&oled,&rtc),
		new einstellungen(&oled,&rtc),
		new offscreen(&oled,&rtc),
		new menue(&oled,&rtc)
	};
    714c:	1c 83       	std	Y+4, r17	; 0x04
    714e:	0b 83       	std	Y+3, r16	; 0x03
#include <avr/interrupt.h>

//define new and delete operator
void * operator new(size_t size)
{
	return malloc(size);
    7150:	89 e2       	ldi	r24, 0x29	; 41
    7152:	90 e0       	ldi	r25, 0x00	; 0
    7154:	0e 94 ed 4a 	call	0x95da	; 0x95da <malloc>
		uint8_t posx;
		uint8_t maxentries;
		uint8_t maxentriesx;
	monitor(Display *ol, RTC *rt)
	{
		buffersize = 0;
    7158:	dc 01       	movw	r26, r24
    715a:	56 96       	adiw	r26, 0x16	; 22
    715c:	1c 92       	st	X, r1
    715e:	56 97       	sbiw	r26, 0x16	; 22
		oled = ol;
    7160:	23 e4       	ldi	r18, 0x43	; 67
    7162:	3a e0       	ldi	r19, 0x0A	; 10
    7164:	58 96       	adiw	r26, 0x18	; 24
    7166:	3c 93       	st	X, r19
    7168:	2e 93       	st	-X, r18
    716a:	57 97       	sbiw	r26, 0x17	; 23
		rtc = rt;
    716c:	24 e4       	ldi	r18, 0x44	; 68
    716e:	3e e0       	ldi	r19, 0x0E	; 14
    7170:	5a 96       	adiw	r26, 0x1a	; 26
    7172:	3c 93       	st	X, r19
    7174:	2e 93       	st	-X, r18
    7176:	59 97       	sbiw	r26, 0x19	; 25
		posy=0;
    7178:	95 96       	adiw	r26, 0x25	; 37
    717a:	1c 92       	st	X, r1
    717c:	95 97       	sbiw	r26, 0x25	; 37
		posx=0;
    717e:	96 96       	adiw	r26, 0x26	; 38
    7180:	1c 92       	st	X, r1
    7182:	96 97       	sbiw	r26, 0x26	; 38
		maxentriesx = 1;
    7184:	21 e0       	ldi	r18, 0x01	; 1
    7186:	98 96       	adiw	r26, 0x28	; 40
    7188:	2c 93       	st	X, r18
    718a:	98 97       	sbiw	r26, 0x28	; 40
class wandern: public monitor
{
	private:
	
	public:	
	wandern(Display *ol,RTC *rtc):monitor(ol,rtc)
    718c:	2b e0       	ldi	r18, 0x0B	; 11
    718e:	34 e0       	ldi	r19, 0x04	; 4
    7190:	2d 93       	st	X+, r18
    7192:	3c 93       	st	X, r19
	{
		char na[] = "Wandern";
    7194:	28 e0       	ldi	r18, 0x08	; 8
    7196:	eb e4       	ldi	r30, 0x4B	; 75
    7198:	f2 e0       	ldi	r31, 0x02	; 2
    719a:	de 01       	movw	r26, r28
    719c:	1d 96       	adiw	r26, 0x0d	; 13
    719e:	01 90       	ld	r0, Z+
    71a0:	0d 92       	st	X+, r0
    71a2:	2a 95       	dec	r18
    71a4:	e1 f7       	brne	.-8      	; 0x719e <main+0x156>
    71a6:	9e 01       	movw	r18, r28
    71a8:	23 5f       	subi	r18, 0xF3	; 243
    71aa:	3f 4f       	sbci	r19, 0xFF	; 255
    71ac:	dc 01       	movw	r26, r24
    71ae:	5b 96       	adiw	r26, 0x1b	; 27
    71b0:	be 01       	movw	r22, r28
    71b2:	69 5e       	subi	r22, 0xE9	; 233
    71b4:	7f 4f       	sbci	r23, 0xFF	; 255
    71b6:	f9 01       	movw	r30, r18
			{
				name[i] = na[i];
			}
			else
			{
				name[i] = ' ';
    71b8:	40 e2       	ldi	r20, 0x20	; 32
    71ba:	5e 2f       	mov	r21, r30
    71bc:	52 1b       	sub	r21, r18
	public:	
	wandern(Display *ol,RTC *rtc):monitor(ol,rtc)
	{
		char na[] = "Wandern";
		for(uint8_t i =0; i< namesize;i++){
			if (i<sizeof(na))
    71be:	58 30       	cpi	r21, 0x08	; 8
    71c0:	18 f4       	brcc	.+6      	; 0x71c8 <main+0x180>
			{
				name[i] = na[i];
    71c2:	50 81       	ld	r21, Z
    71c4:	5c 93       	st	X, r21
    71c6:	01 c0       	rjmp	.+2      	; 0x71ca <main+0x182>
			}
			else
			{
				name[i] = ' ';
    71c8:	4c 93       	st	X, r20
    71ca:	31 96       	adiw	r30, 0x01	; 1
    71cc:	11 96       	adiw	r26, 0x01	; 1
	
	public:	
	wandern(Display *ol,RTC *rtc):monitor(ol,rtc)
	{
		char na[] = "Wandern";
		for(uint8_t i =0; i< namesize;i++){
    71ce:	e6 17       	cp	r30, r22
    71d0:	f7 07       	cpc	r31, r23
    71d2:	99 f7       	brne	.-26     	; 0x71ba <main+0x172>
		new tacho(&oled,&rtc),
		new wandern(&oled,&rtc),
		new einstellungen(&oled,&rtc),
		new offscreen(&oled,&rtc),
		new menue(&oled,&rtc)
	};
    71d4:	9e 83       	std	Y+6, r25	; 0x06
    71d6:	8d 83       	std	Y+5, r24	; 0x05
#include <avr/interrupt.h>

//define new and delete operator
void * operator new(size_t size)
{
	return malloc(size);
    71d8:	89 e2       	ldi	r24, 0x29	; 41
    71da:	90 e0       	ldi	r25, 0x00	; 0
    71dc:	0e 94 ed 4a 	call	0x95da	; 0x95da <malloc>
		uint8_t posx;
		uint8_t maxentries;
		uint8_t maxentriesx;
	monitor(Display *ol, RTC *rt)
	{
		buffersize = 0;
    71e0:	fc 01       	movw	r30, r24
    71e2:	16 8a       	std	Z+22, r1	; 0x16
		oled = ol;
    71e4:	23 e4       	ldi	r18, 0x43	; 67
    71e6:	3a e0       	ldi	r19, 0x0A	; 10
    71e8:	30 8f       	std	Z+24, r19	; 0x18
    71ea:	27 8b       	std	Z+23, r18	; 0x17
		rtc = rt;
    71ec:	24 e4       	ldi	r18, 0x44	; 68
    71ee:	3e e0       	ldi	r19, 0x0E	; 14
    71f0:	32 8f       	std	Z+26, r19	; 0x1a
    71f2:	21 8f       	std	Z+25, r18	; 0x19
		posy=0;
    71f4:	15 a2       	std	Z+37, r1	; 0x25
		posx=0;
    71f6:	16 a2       	std	Z+38, r1	; 0x26
		maxentriesx = 1;
    71f8:	21 e0       	ldi	r18, 0x01	; 1
    71fa:	20 a7       	std	Z+40, r18	; 0x28

class einstellungen: public monitor
{
	private:
	public:
	einstellungen(Display *ol,RTC *rt): monitor(ol,rt)
    71fc:	23 e1       	ldi	r18, 0x13	; 19
    71fe:	34 e0       	ldi	r19, 0x04	; 4
    7200:	31 83       	std	Z+1, r19	; 0x01
    7202:	20 83       	st	Z, r18
	{
		char na[] = "Settings";
    7204:	29 e0       	ldi	r18, 0x09	; 9
    7206:	ef e1       	ldi	r30, 0x1F	; 31
    7208:	f3 e0       	ldi	r31, 0x03	; 3
    720a:	de 01       	movw	r26, r28
    720c:	1d 96       	adiw	r26, 0x0d	; 13
    720e:	01 90       	ld	r0, Z+
    7210:	0d 92       	st	X+, r0
    7212:	2a 95       	dec	r18
    7214:	e1 f7       	brne	.-8      	; 0x720e <main+0x1c6>
    7216:	9e 01       	movw	r18, r28
    7218:	23 5f       	subi	r18, 0xF3	; 243
    721a:	3f 4f       	sbci	r19, 0xFF	; 255
    721c:	dc 01       	movw	r26, r24
    721e:	5b 96       	adiw	r26, 0x1b	; 27
    7220:	be 01       	movw	r22, r28
    7222:	69 5e       	subi	r22, 0xE9	; 233
    7224:	7f 4f       	sbci	r23, 0xFF	; 255
    7226:	f9 01       	movw	r30, r18
			{
				name[i] = na[i];
			}
			else
			{
				name[i] = ' ';
    7228:	40 e2       	ldi	r20, 0x20	; 32
    722a:	5e 2f       	mov	r21, r30
    722c:	52 1b       	sub	r21, r18
	public:
	einstellungen(Display *ol,RTC *rt): monitor(ol,rt)
	{
		char na[] = "Settings";
		for(uint8_t i =0; i< namesize;i++){
			if (i<sizeof(na))
    722e:	59 30       	cpi	r21, 0x09	; 9
    7230:	18 f4       	brcc	.+6      	; 0x7238 <main+0x1f0>
			{
				name[i] = na[i];
    7232:	50 81       	ld	r21, Z
    7234:	5c 93       	st	X, r21
    7236:	01 c0       	rjmp	.+2      	; 0x723a <main+0x1f2>
			}
			else
			{
				name[i] = ' ';
    7238:	4c 93       	st	X, r20
    723a:	31 96       	adiw	r30, 0x01	; 1
    723c:	11 96       	adiw	r26, 0x01	; 1
	private:
	public:
	einstellungen(Display *ol,RTC *rt): monitor(ol,rt)
	{
		char na[] = "Settings";
		for(uint8_t i =0; i< namesize;i++){
    723e:	e6 17       	cp	r30, r22
    7240:	f7 07       	cpc	r31, r23
    7242:	99 f7       	brne	.-26     	; 0x722a <main+0x1e2>
			else
			{
				name[i] = ' ';
			}
		}
		maxentries = 5;
    7244:	25 e0       	ldi	r18, 0x05	; 5
    7246:	dc 01       	movw	r26, r24
    7248:	97 96       	adiw	r26, 0x27	; 39
    724a:	2c 93       	st	X, r18
		new tacho(&oled,&rtc),
		new wandern(&oled,&rtc),
		new einstellungen(&oled,&rtc),
		new offscreen(&oled,&rtc),
		new menue(&oled,&rtc)
	};
    724c:	98 87       	std	Y+8, r25	; 0x08
    724e:	8f 83       	std	Y+7, r24	; 0x07
#include <avr/interrupt.h>

//define new and delete operator
void * operator new(size_t size)
{
	return malloc(size);
    7250:	89 e2       	ldi	r24, 0x29	; 41
    7252:	90 e0       	ldi	r25, 0x00	; 0
    7254:	0e 94 ed 4a 	call	0x95da	; 0x95da <malloc>
    7258:	fc 01       	movw	r30, r24
		uint8_t posx;
		uint8_t maxentries;
		uint8_t maxentriesx;
	monitor(Display *ol, RTC *rt)
	{
		buffersize = 0;
    725a:	16 8a       	std	Z+22, r1	; 0x16
		oled = ol;
    725c:	0f 2e       	mov	r0, r31
    725e:	f3 e4       	ldi	r31, 0x43	; 67
    7260:	cf 2e       	mov	r12, r31
    7262:	fa e0       	ldi	r31, 0x0A	; 10
    7264:	df 2e       	mov	r13, r31
    7266:	f0 2d       	mov	r31, r0
    7268:	d0 8e       	std	Z+24, r13	; 0x18
    726a:	c7 8a       	std	Z+23, r12	; 0x17
		rtc = rt;
    726c:	0f 2e       	mov	r0, r31
    726e:	f4 e4       	ldi	r31, 0x44	; 68
    7270:	ef 2e       	mov	r14, r31
    7272:	fe e0       	ldi	r31, 0x0E	; 14
    7274:	ff 2e       	mov	r15, r31
    7276:	f0 2d       	mov	r31, r0
    7278:	f2 8e       	std	Z+26, r15	; 0x1a
    727a:	e1 8e       	std	Z+25, r14	; 0x19
		posy=0;
    727c:	15 a2       	std	Z+37, r1	; 0x25
		posx=0;
    727e:	16 a2       	std	Z+38, r1	; 0x26
		maxentriesx = 1;
    7280:	11 e0       	ldi	r17, 0x01	; 1
    7282:	10 a7       	std	Z+40, r17	; 0x28
class offscreen: public monitor
{
	private:
	
	public:
	offscreen(Display *ol, RTC *rt):monitor(ol,rt){
    7284:	8b e2       	ldi	r24, 0x2B	; 43
    7286:	94 e0       	ldi	r25, 0x04	; 4
    7288:	91 83       	std	Z+1, r25	; 0x01
    728a:	80 83       	st	Z, r24
		new tacho(&oled,&rtc),
		new wandern(&oled,&rtc),
		new einstellungen(&oled,&rtc),
		new offscreen(&oled,&rtc),
		new menue(&oled,&rtc)
	};
    728c:	fa 87       	std	Y+10, r31	; 0x0a
    728e:	e9 87       	std	Y+9, r30	; 0x09
#include <avr/interrupt.h>

//define new and delete operator
void * operator new(size_t size)
{
	return malloc(size);
    7290:	89 e2       	ldi	r24, 0x29	; 41
    7292:	90 e0       	ldi	r25, 0x00	; 0
    7294:	0e 94 ed 4a 	call	0x95da	; 0x95da <malloc>
		uint8_t posx;
		uint8_t maxentries;
		uint8_t maxentriesx;
	monitor(Display *ol, RTC *rt)
	{
		buffersize = 0;
    7298:	fc 01       	movw	r30, r24
    729a:	16 8a       	std	Z+22, r1	; 0x16
		oled = ol;
    729c:	d0 8e       	std	Z+24, r13	; 0x18
    729e:	c7 8a       	std	Z+23, r12	; 0x17
		rtc = rt;
    72a0:	f2 8e       	std	Z+26, r15	; 0x1a
    72a2:	e1 8e       	std	Z+25, r14	; 0x19
		posy=0;
    72a4:	15 a2       	std	Z+37, r1	; 0x25
		posx=0;
    72a6:	16 a2       	std	Z+38, r1	; 0x26
		maxentriesx = 1;
    72a8:	10 a7       	std	Z+40, r17	; 0x28

class menue: public monitor
{
	private:
	public:
	menue(Display *ol, RTC *rt):monitor(ol,rt)
    72aa:	23 e2       	ldi	r18, 0x23	; 35
    72ac:	34 e0       	ldi	r19, 0x04	; 4
    72ae:	31 83       	std	Z+1, r19	; 0x01
    72b0:	20 83       	st	Z, r18
	{
		char na[] = "Menue";
    72b2:	26 e0       	ldi	r18, 0x06	; 6
    72b4:	e8 e2       	ldi	r30, 0x28	; 40
    72b6:	f3 e0       	ldi	r31, 0x03	; 3
    72b8:	de 01       	movw	r26, r28
    72ba:	1d 96       	adiw	r26, 0x0d	; 13
    72bc:	01 90       	ld	r0, Z+
    72be:	0d 92       	st	X+, r0
    72c0:	2a 95       	dec	r18
    72c2:	e1 f7       	brne	.-8      	; 0x72bc <main+0x274>
    72c4:	9e 01       	movw	r18, r28
    72c6:	23 5f       	subi	r18, 0xF3	; 243
    72c8:	3f 4f       	sbci	r19, 0xFF	; 255
    72ca:	dc 01       	movw	r26, r24
    72cc:	5b 96       	adiw	r26, 0x1b	; 27
    72ce:	be 01       	movw	r22, r28
    72d0:	69 5e       	subi	r22, 0xE9	; 233
    72d2:	7f 4f       	sbci	r23, 0xFF	; 255
    72d4:	f9 01       	movw	r30, r18
			{
				name[i] = na[i];
			}
			else
			{
				name[i] = ' ';
    72d6:	40 e2       	ldi	r20, 0x20	; 32
    72d8:	5e 2f       	mov	r21, r30
    72da:	52 1b       	sub	r21, r18
	public:
	menue(Display *ol, RTC *rt):monitor(ol,rt)
	{
		char na[] = "Menue";
		for(uint8_t i =0; i< namesize;i++)
			if (i<sizeof(na))
    72dc:	56 30       	cpi	r21, 0x06	; 6
    72de:	18 f4       	brcc	.+6      	; 0x72e6 <main+0x29e>
			{
				name[i] = na[i];
    72e0:	50 81       	ld	r21, Z
    72e2:	5c 93       	st	X, r21
    72e4:	01 c0       	rjmp	.+2      	; 0x72e8 <main+0x2a0>
			}
			else
			{
				name[i] = ' ';
    72e6:	4c 93       	st	X, r20
    72e8:	31 96       	adiw	r30, 0x01	; 1
    72ea:	11 96       	adiw	r26, 0x01	; 1
	private:
	public:
	menue(Display *ol, RTC *rt):monitor(ol,rt)
	{
		char na[] = "Menue";
		for(uint8_t i =0; i< namesize;i++)
    72ec:	e6 17       	cp	r30, r22
    72ee:	f7 07       	cpc	r31, r23
    72f0:	99 f7       	brne	.-26     	; 0x72d8 <main+0x290>
			}
			else
			{
				name[i] = ' ';
			}
			maxentriesx = 0;
    72f2:	dc 01       	movw	r26, r24
    72f4:	98 96       	adiw	r26, 0x28	; 40
    72f6:	1c 92       	st	X, r1
    72f8:	98 97       	sbiw	r26, 0x28	; 40
			maxentries = numberofpages;
    72fa:	25 e0       	ldi	r18, 0x05	; 5
    72fc:	97 96       	adiw	r26, 0x27	; 39
    72fe:	2c 93       	st	X, r18
		new tacho(&oled,&rtc),
		new wandern(&oled,&rtc),
		new einstellungen(&oled,&rtc),
		new offscreen(&oled,&rtc),
		new menue(&oled,&rtc)
	};
    7300:	9c 87       	std	Y+12, r25	; 0x0c
    7302:	8b 87       	std	Y+11, r24	; 0x0b
	
	druck.bmp180_getcalibration();
    7304:	8f e1       	ldi	r24, 0x1F	; 31
    7306:	99 e0       	ldi	r25, 0x09	; 9
    7308:	0e 94 59 04 	call	0x8b2	; 0x8b2 <_ZN6BMP18021bmp180_getcalibrationEv>
	//speichern der Werte und per hand rechnen
	
	
	while (1) 
    {
		tastaturhandler(Folien[position],Tastatur.unified());
    730c:	87 e3       	ldi	r24, 0x37	; 55
    730e:	9a e0       	ldi	r25, 0x0A	; 10
    7310:	0e 94 39 26 	call	0x4c72	; 0x4c72 <_ZN9Interface7unifiedEv>
    7314:	e0 91 12 09 	lds	r30, 0x0912
    7318:	f0 e0       	ldi	r31, 0x00	; 0
    731a:	ee 0f       	add	r30, r30
    731c:	ff 1f       	adc	r31, r31
    731e:	21 e0       	ldi	r18, 0x01	; 1
    7320:	30 e0       	ldi	r19, 0x00	; 0
    7322:	2c 0f       	add	r18, r28
    7324:	3d 1f       	adc	r19, r29
    7326:	e2 0f       	add	r30, r18
    7328:	f3 1f       	adc	r31, r19
    732a:	68 2f       	mov	r22, r24
    732c:	80 81       	ld	r24, Z
    732e:	91 81       	ldd	r25, Z+1	; 0x01
    7330:	0e 94 0d 31 	call	0x621a	; 0x621a <_Z15tastaturhandlerP7monitorh>
		maininterupthandler(Folien[position]);
    7334:	e0 91 12 09 	lds	r30, 0x0912
    7338:	f0 e0       	ldi	r31, 0x00	; 0
    733a:	ee 0f       	add	r30, r30
    733c:	ff 1f       	adc	r31, r31
    733e:	81 e0       	ldi	r24, 0x01	; 1
    7340:	90 e0       	ldi	r25, 0x00	; 0
    7342:	8c 0f       	add	r24, r28
    7344:	9d 1f       	adc	r25, r29
    7346:	e8 0f       	add	r30, r24
    7348:	f9 1f       	adc	r31, r25
    734a:	80 81       	ld	r24, Z
    734c:	91 81       	ldd	r25, Z+1	; 0x01
    734e:	00 d8       	rcall	.-4096   	; 0x6350 <_Z19maininterupthandlerP7monitor>
		gpshandler();
    7350:	fa da       	rcall	.-2572   	; 0x6946 <_Z10gpshandlerv>
    }
    7352:	dc cf       	rjmp	.-72     	; 0x730c <main+0x2c4>

00007354 <_Z13uhreinstellenv>:
		gpsstatus &= ~(1<<completenotvalid);
	}
	//fix status pruefen, wenn implementiert
}

void uhreinstellen(){
    7354:	2f 92       	push	r2
    7356:	3f 92       	push	r3
    7358:	4f 92       	push	r4
    735a:	5f 92       	push	r5
    735c:	6f 92       	push	r6
    735e:	7f 92       	push	r7
    7360:	8f 92       	push	r8
    7362:	9f 92       	push	r9
    7364:	af 92       	push	r10
    7366:	bf 92       	push	r11
    7368:	cf 92       	push	r12
    736a:	df 92       	push	r13
    736c:	ef 92       	push	r14
    736e:	ff 92       	push	r15
    7370:	0f 93       	push	r16
    7372:	1f 93       	push	r17
    7374:	cf 93       	push	r28
    7376:	df 93       	push	r29
    7378:	cd b7       	in	r28, 0x3d	; 61
    737a:	de b7       	in	r29, 0x3e	; 62
    737c:	66 97       	sbiw	r28, 0x16	; 22
    737e:	0f b6       	in	r0, 0x3f	; 63
    7380:	f8 94       	cli
    7382:	de bf       	out	0x3e, r29	; 62
    7384:	0f be       	out	0x3f, r0	; 63
    7386:	cd bf       	out	0x3d, r28	; 61
	rtc.RTCstop();
    7388:	84 e4       	ldi	r24, 0x44	; 68
    738a:	9e e0       	ldi	r25, 0x0E	; 14
    738c:	c5 d7       	rcall	.+3978   	; 0x8318 <_ZN3RTC7RTCstopEv>
	
	oled.clearFrame();
    738e:	83 e4       	ldi	r24, 0x43	; 67
    7390:	9a e0       	ldi	r25, 0x0A	; 10
    7392:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <_ZN7Display10clearFrameEv>
	char buffer[20];
	uint8_t buffersize;
	uint8_t pos=0;
    7396:	91 2c       	mov	r9, r1
	while(pos<11){
		buffersize=sprintf(buffer,"Uhreinstellung");
    7398:	0f 2e       	mov	r0, r31
    739a:	ff e0       	ldi	r31, 0x0F	; 15
    739c:	7f 2e       	mov	r7, r31
    739e:	f0 2d       	mov	r31, r0
    73a0:	ce 01       	movw	r24, r28
    73a2:	01 96       	adiw	r24, 0x01	; 1
    73a4:	2c 01       	movw	r4, r24
    73a6:	f1 2c       	mov	r15, r1
		for(uint8_t i = 0; i<buffersize;i++){
			oled.draw_ASCI(buffer[i],charsize*i,0);
		}
		buffersize=sprintf(buffer,"--------------");
    73a8:	8d 8b       	std	Y+21, r24	; 0x15
    73aa:	5e 8a       	std	Y+22, r5	; 0x16
		for(uint8_t i = 0; i<buffersize;i++){
			oled.draw_ASCI(buffer[i],charsize*i,8);
		}
		buffer[0]=rtc.Stunden/10;
    73ac:	0f 2e       	mov	r0, r31
    73ae:	f4 e4       	ldi	r31, 0x44	; 68
    73b0:	cf 2e       	mov	r12, r31
    73b2:	fe e0       	ldi	r31, 0x0E	; 14
    73b4:	df 2e       	mov	r13, r31
    73b6:	f0 2d       	mov	r31, r0
    73b8:	0f 2e       	mov	r0, r31
    73ba:	fd ec       	ldi	r31, 0xCD	; 205
    73bc:	8f 2e       	mov	r8, r31
    73be:	f0 2d       	mov	r31, r0
		buffer[1]=rtc.Stunden%10;
		buffer[2]=':';
		buffer[3]=rtc.Minuten/10;
		buffer[4]=rtc.Minuten%10;
		buffer[5]=' ';
    73c0:	68 94       	set
    73c2:	ee 24       	eor	r14, r14
    73c4:	e5 f8       	bld	r14, 5
		buffer[6]=rtc.Tag/10;
		buffer[7]=rtc.Tag%10;
		buffer[8]='.';
    73c6:	0f 2e       	mov	r0, r31
    73c8:	fe e2       	ldi	r31, 0x2E	; 46
    73ca:	6f 2e       	mov	r6, r31
    73cc:	f0 2d       	mov	r31, r0
	oled.clearFrame();
	char buffer[20];
	uint8_t buffersize;
	uint8_t pos=0;
	while(pos<11){
		buffersize=sprintf(buffer,"Uhreinstellung");
    73ce:	ee e2       	ldi	r30, 0x2E	; 46
    73d0:	f3 e0       	ldi	r31, 0x03	; 3
    73d2:	d2 01       	movw	r26, r4
    73d4:	87 2d       	mov	r24, r7
    73d6:	01 90       	ld	r0, Z+
    73d8:	0d 92       	st	X+, r0
    73da:	8a 95       	dec	r24
    73dc:	e1 f7       	brne	.-8      	; 0x73d6 <_Z13uhreinstellenv+0x82>
    73de:	52 01       	movw	r10, r4
    73e0:	12 01       	movw	r2, r4
    73e2:	1f 2d       	mov	r17, r15
		for(uint8_t i = 0; i<buffersize;i++){
			oled.draw_ASCI(buffer[i],charsize*i,0);
    73e4:	f1 01       	movw	r30, r2
    73e6:	61 91       	ld	r22, Z+
    73e8:	1f 01       	movw	r2, r30
    73ea:	2f 2d       	mov	r18, r15
    73ec:	41 2f       	mov	r20, r17
    73ee:	83 e4       	ldi	r24, 0x43	; 67
    73f0:	9a e0       	ldi	r25, 0x0A	; 10
    73f2:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <_ZN7Display9draw_ASCIEhhh>
    73f6:	1a 5f       	subi	r17, 0xFA	; 250
	char buffer[20];
	uint8_t buffersize;
	uint8_t pos=0;
	while(pos<11){
		buffersize=sprintf(buffer,"Uhreinstellung");
		for(uint8_t i = 0; i<buffersize;i++){
    73f8:	14 35       	cpi	r17, 0x54	; 84
    73fa:	a1 f7       	brne	.-24     	; 0x73e4 <_Z13uhreinstellenv+0x90>
			oled.draw_ASCI(buffer[i],charsize*i,0);
		}
		buffersize=sprintf(buffer,"--------------");
    73fc:	e5 ea       	ldi	r30, 0xA5	; 165
    73fe:	f1 e0       	ldi	r31, 0x01	; 1
    7400:	d2 01       	movw	r26, r4
    7402:	87 2d       	mov	r24, r7
    7404:	01 90       	ld	r0, Z+
    7406:	0d 92       	st	X+, r0
    7408:	8a 95       	dec	r24
    740a:	e1 f7       	brne	.-8      	; 0x7404 <_Z13uhreinstellenv+0xb0>
    740c:	2d 88       	ldd	r2, Y+21	; 0x15
    740e:	3e 88       	ldd	r3, Y+22	; 0x16
    7410:	1f 2d       	mov	r17, r15
		for(uint8_t i = 0; i<buffersize;i++){
			oled.draw_ASCI(buffer[i],charsize*i,8);
    7412:	f1 01       	movw	r30, r2
    7414:	61 91       	ld	r22, Z+
    7416:	1f 01       	movw	r2, r30
    7418:	28 e0       	ldi	r18, 0x08	; 8
    741a:	41 2f       	mov	r20, r17
    741c:	83 e4       	ldi	r24, 0x43	; 67
    741e:	9a e0       	ldi	r25, 0x0A	; 10
    7420:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <_ZN7Display9draw_ASCIEhhh>
    7424:	1a 5f       	subi	r17, 0xFA	; 250
		buffersize=sprintf(buffer,"Uhreinstellung");
		for(uint8_t i = 0; i<buffersize;i++){
			oled.draw_ASCI(buffer[i],charsize*i,0);
		}
		buffersize=sprintf(buffer,"--------------");
		for(uint8_t i = 0; i<buffersize;i++){
    7426:	14 35       	cpi	r17, 0x54	; 84
    7428:	a1 f7       	brne	.-24     	; 0x7412 <_Z13uhreinstellenv+0xbe>
			oled.draw_ASCI(buffer[i],charsize*i,8);
		}
		buffer[0]=rtc.Stunden/10;
    742a:	f6 01       	movw	r30, r12
    742c:	90 89       	ldd	r25, Z+16	; 0x10
    742e:	98 9d       	mul	r25, r8
    7430:	81 2d       	mov	r24, r1
    7432:	11 24       	eor	r1, r1
    7434:	86 95       	lsr	r24
    7436:	86 95       	lsr	r24
    7438:	86 95       	lsr	r24
    743a:	89 83       	std	Y+1, r24	; 0x01
		buffer[1]=rtc.Stunden%10;
    743c:	88 0f       	add	r24, r24
    743e:	28 2f       	mov	r18, r24
    7440:	22 0f       	add	r18, r18
    7442:	22 0f       	add	r18, r18
    7444:	82 0f       	add	r24, r18
    7446:	98 1b       	sub	r25, r24
    7448:	9a 83       	std	Y+2, r25	; 0x02
		buffer[2]=':';
    744a:	fa e3       	ldi	r31, 0x3A	; 58
    744c:	fb 83       	std	Y+3, r31	; 0x03
		buffer[3]=rtc.Minuten/10;
    744e:	f6 01       	movw	r30, r12
    7450:	91 89       	ldd	r25, Z+17	; 0x11
    7452:	98 9d       	mul	r25, r8
    7454:	81 2d       	mov	r24, r1
    7456:	11 24       	eor	r1, r1
    7458:	86 95       	lsr	r24
    745a:	86 95       	lsr	r24
    745c:	86 95       	lsr	r24
    745e:	8c 83       	std	Y+4, r24	; 0x04
		buffer[4]=rtc.Minuten%10;
    7460:	88 0f       	add	r24, r24
    7462:	28 2f       	mov	r18, r24
    7464:	22 0f       	add	r18, r18
    7466:	22 0f       	add	r18, r18
    7468:	82 0f       	add	r24, r18
    746a:	98 1b       	sub	r25, r24
    746c:	9d 83       	std	Y+5, r25	; 0x05
		buffer[5]=' ';
    746e:	ee 82       	std	Y+6, r14	; 0x06
		buffer[6]=rtc.Tag/10;
    7470:	94 89       	ldd	r25, Z+20	; 0x14
    7472:	98 9d       	mul	r25, r8
    7474:	81 2d       	mov	r24, r1
    7476:	11 24       	eor	r1, r1
    7478:	86 95       	lsr	r24
    747a:	86 95       	lsr	r24
    747c:	86 95       	lsr	r24
    747e:	8f 83       	std	Y+7, r24	; 0x07
		buffer[7]=rtc.Tag%10;
    7480:	88 0f       	add	r24, r24
    7482:	28 2f       	mov	r18, r24
    7484:	22 0f       	add	r18, r18
    7486:	22 0f       	add	r18, r18
    7488:	82 0f       	add	r24, r18
    748a:	98 1b       	sub	r25, r24
    748c:	98 87       	std	Y+8, r25	; 0x08
		buffer[8]='.';
    748e:	69 86       	std	Y+9, r6	; 0x09
		buffer[9]=rtc.Monat/10;
    7490:	96 89       	ldd	r25, Z+22	; 0x16
    7492:	98 9d       	mul	r25, r8
    7494:	81 2d       	mov	r24, r1
    7496:	11 24       	eor	r1, r1
    7498:	86 95       	lsr	r24
    749a:	86 95       	lsr	r24
    749c:	86 95       	lsr	r24
    749e:	8a 87       	std	Y+10, r24	; 0x0a
		buffer[10]=rtc.Monat%10;
    74a0:	88 0f       	add	r24, r24
    74a2:	28 2f       	mov	r18, r24
    74a4:	22 0f       	add	r18, r18
    74a6:	22 0f       	add	r18, r18
    74a8:	82 0f       	add	r24, r18
    74aa:	98 1b       	sub	r25, r24
    74ac:	9b 87       	std	Y+11, r25	; 0x0b
		buffer[11]='.';
    74ae:	6c 86       	std	Y+12, r6	; 0x0c
		buffer[12]=rtc.Jahr/10;
    74b0:	97 89       	ldd	r25, Z+23	; 0x17
    74b2:	98 9d       	mul	r25, r8
    74b4:	81 2d       	mov	r24, r1
    74b6:	11 24       	eor	r1, r1
    74b8:	86 95       	lsr	r24
    74ba:	86 95       	lsr	r24
    74bc:	86 95       	lsr	r24
    74be:	8d 87       	std	Y+13, r24	; 0x0d
		buffer[13]=rtc.Jahr%10;
    74c0:	88 0f       	add	r24, r24
    74c2:	28 2f       	mov	r18, r24
    74c4:	22 0f       	add	r18, r18
    74c6:	22 0f       	add	r18, r18
    74c8:	82 0f       	add	r24, r18
    74ca:	98 1b       	sub	r25, r24
    74cc:	9e 87       	std	Y+14, r25	; 0x0e
    74ce:	0d 89       	ldd	r16, Y+21	; 0x15
    74d0:	1e 89       	ldd	r17, Y+22	; 0x16
    74d2:	2f 2c       	mov	r2, r15
    74d4:	33 24       	eor	r3, r3
    74d6:	33 94       	inc	r3
    74d8:	05 c0       	rjmp	.+10     	; 0x74e4 <_Z13uhreinstellenv+0x190>
    74da:	33 94       	inc	r3
    74dc:	0f 5f       	subi	r16, 0xFF	; 255
    74de:	1f 4f       	sbci	r17, 0xFF	; 255
    74e0:	f0 e1       	ldi	r31, 0x10	; 16
    74e2:	2f 0e       	add	r2, r31
		buffersize=14;
		for(uint8_t i = 0; i<5;i++){
			if(i!=2){
    74e4:	83 e0       	ldi	r24, 0x03	; 3
    74e6:	38 16       	cp	r3, r24
    74e8:	61 f0       	breq	.+24     	; 0x7502 <_Z13uhreinstellenv+0x1ae>
				oled.draw_number16x16(buffer[i],i*numbersmalsize,2*charhighte);
    74ea:	20 e1       	ldi	r18, 0x10	; 16
    74ec:	42 2d       	mov	r20, r2
    74ee:	f8 01       	movw	r30, r16
    74f0:	60 81       	ld	r22, Z
    74f2:	83 e4       	ldi	r24, 0x43	; 67
    74f4:	9a e0       	ldi	r25, 0x0A	; 10
    74f6:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <_ZN7Display16draw_number16x16Ehhh>
		buffer[10]=rtc.Monat%10;
		buffer[11]='.';
		buffer[12]=rtc.Jahr/10;
		buffer[13]=rtc.Jahr%10;
		buffersize=14;
		for(uint8_t i = 0; i<5;i++){
    74fa:	f4 e0       	ldi	r31, 0x04	; 4
    74fc:	f3 15       	cp	r31, r3
    74fe:	68 f7       	brcc	.-38     	; 0x74da <_Z13uhreinstellenv+0x186>
    7500:	08 c0       	rjmp	.+16     	; 0x7512 <_Z13uhreinstellenv+0x1be>
			if(i!=2){
				oled.draw_number16x16(buffer[i],i*numbersmalsize,2*charhighte);
			}
			else {
				oled.draw_ASCI(buffer[i],i*numbersmalsize+numbersmalsize/2,2*charhighte+charhighte/2);
    7502:	24 e1       	ldi	r18, 0x14	; 20
    7504:	48 e2       	ldi	r20, 0x28	; 40
    7506:	6b 81       	ldd	r22, Y+3	; 0x03
    7508:	83 e4       	ldi	r24, 0x43	; 67
    750a:	9a e0       	ldi	r25, 0x0A	; 10
    750c:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <_ZN7Display9draw_ASCIEhhh>
    7510:	e4 cf       	rjmp	.-56     	; 0x74da <_Z13uhreinstellenv+0x186>
    7512:	8e 01       	movw	r16, r28
    7514:	09 5f       	subi	r16, 0xF9	; 249
    7516:	1f 4f       	sbci	r17, 0xFF	; 255
		buffer[10]=rtc.Monat%10;
		buffer[11]='.';
		buffer[12]=rtc.Jahr/10;
		buffer[13]=rtc.Jahr%10;
		buffersize=14;
		for(uint8_t i = 0; i<5;i++){
    7518:	2f 2c       	mov	r2, r15
    751a:	0f 2e       	mov	r0, r31
    751c:	f6 e0       	ldi	r31, 0x06	; 6
    751e:	3f 2e       	mov	r3, r31
    7520:	f0 2d       	mov	r31, r0
			else {
				oled.draw_ASCI(buffer[i],i*numbersmalsize+numbersmalsize/2,2*charhighte+charhighte/2);
			}
		}
		for(uint8_t i = 6; i<buffersize;i++){
			if(i!=8 && i!=11){
    7522:	88 e0       	ldi	r24, 0x08	; 8
    7524:	38 16       	cp	r3, r24
    7526:	61 f0       	breq	.+24     	; 0x7540 <_Z13uhreinstellenv+0x1ec>
    7528:	9b e0       	ldi	r25, 0x0B	; 11
    752a:	39 16       	cp	r3, r25
    752c:	49 f0       	breq	.+18     	; 0x7540 <_Z13uhreinstellenv+0x1ec>
				oled.draw_number16x16(buffer[i],i*numbersmalsize-6*numbersmalsize,4*charhighte);
    752e:	2e 2d       	mov	r18, r14
    7530:	42 2d       	mov	r20, r2
    7532:	f8 01       	movw	r30, r16
    7534:	60 81       	ld	r22, Z
    7536:	83 e4       	ldi	r24, 0x43	; 67
    7538:	9a e0       	ldi	r25, 0x0A	; 10
    753a:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <_ZN7Display16draw_number16x16Ehhh>
    753e:	09 c0       	rjmp	.+18     	; 0x7552 <_Z13uhreinstellenv+0x1fe>
			}
			else {
				oled.draw_ASCI(buffer[i],i*numbersmalsize+numbersmalsize/2-6*numbersmalsize,5*charhighte);
    7540:	28 e2       	ldi	r18, 0x28	; 40
    7542:	48 e0       	ldi	r20, 0x08	; 8
    7544:	42 0d       	add	r20, r2
    7546:	f8 01       	movw	r30, r16
    7548:	60 81       	ld	r22, Z
    754a:	83 e4       	ldi	r24, 0x43	; 67
    754c:	9a e0       	ldi	r25, 0x0A	; 10
    754e:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <_ZN7Display9draw_ASCIEhhh>
			}
			else {
				oled.draw_ASCI(buffer[i],i*numbersmalsize+numbersmalsize/2,2*charhighte+charhighte/2);
			}
		}
		for(uint8_t i = 6; i<buffersize;i++){
    7552:	33 94       	inc	r3
    7554:	0f 5f       	subi	r16, 0xFF	; 255
    7556:	1f 4f       	sbci	r17, 0xFF	; 255
    7558:	f0 e1       	ldi	r31, 0x10	; 16
    755a:	2f 0e       	add	r2, r31
    755c:	8e e0       	ldi	r24, 0x0E	; 14
    755e:	38 12       	cpse	r3, r24
    7560:	e0 cf       	rjmp	.-64     	; 0x7522 <_Z13uhreinstellenv+0x1ce>
			else {
				oled.draw_ASCI(buffer[i],i*numbersmalsize+numbersmalsize/2-6*numbersmalsize,5*charhighte);
			}
		}

		oled.sendFrame();
    7562:	83 e4       	ldi	r24, 0x43	; 67
    7564:	9a e0       	ldi	r25, 0x0A	; 10
    7566:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <_ZN7Display9sendFrameEv>
		oled.clearFrame();
    756a:	83 e4       	ldi	r24, 0x43	; 67
    756c:	9a e0       	ldi	r25, 0x0A	; 10
    756e:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <_ZN7Display10clearFrameEv>
		switch (pos) {
    7572:	89 2d       	mov	r24, r9
    7574:	90 e0       	ldi	r25, 0x00	; 0
    7576:	8a 30       	cpi	r24, 0x0A	; 10
    7578:	91 05       	cpc	r25, r1
    757a:	08 f0       	brcs	.+2      	; 0x757e <_Z13uhreinstellenv+0x22a>
    757c:	2c c2       	rjmp	.+1112   	; 0x79d6 <_Z13uhreinstellenv+0x682>
    757e:	fc 01       	movw	r30, r24
    7580:	ef 50       	subi	r30, 0x0F	; 15
    7582:	ff 4f       	sbci	r31, 0xFF	; 255
    7584:	0c 94 55 49 	jmp	0x92aa	; 0x92aa <__tablejump2__>
			case 0:
			rtc.Stunden=Tastatur.ZahlenausTastatur()*10;
    7588:	87 e3       	ldi	r24, 0x37	; 55
    758a:	9a e0       	ldi	r25, 0x0A	; 10
    758c:	0e 94 5d 26 	call	0x4cba	; 0x4cba <_ZN9Interface17ZahlenausTastaturEv>
    7590:	88 0f       	add	r24, r24
    7592:	98 2f       	mov	r25, r24
    7594:	99 0f       	add	r25, r25
    7596:	99 0f       	add	r25, r25
    7598:	89 0f       	add	r24, r25
			if(rtc.Stunden>=24){
    759a:	88 31       	cpi	r24, 0x18	; 24
    759c:	08 f4       	brcc	.+2      	; 0x75a0 <_Z13uhreinstellenv+0x24c>
    759e:	57 c2       	rjmp	.+1198   	; 0x7a4e <_Z13uhreinstellenv+0x6fa>
				rtc.Stunden=0;
    75a0:	f6 01       	movw	r30, r12
    75a2:	10 8a       	std	Z+16, r1	; 0x10
				pos=-1;
				buffersize=sprintf(buffer,"Stunden falsch");
    75a4:	ed e3       	ldi	r30, 0x3D	; 61
    75a6:	f3 e0       	ldi	r31, 0x03	; 3
    75a8:	d2 01       	movw	r26, r4
    75aa:	87 2d       	mov	r24, r7
    75ac:	01 90       	ld	r0, Z+
    75ae:	0d 92       	st	X+, r0
    75b0:	8a 95       	dec	r24
    75b2:	e1 f7       	brne	.-8      	; 0x75ac <_Z13uhreinstellenv+0x258>
    75b4:	1f 2d       	mov	r17, r15
				for(uint8_t i = 0; i<buffersize;i++){
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
    75b6:	f5 01       	movw	r30, r10
    75b8:	61 91       	ld	r22, Z+
    75ba:	5f 01       	movw	r10, r30
    75bc:	28 e3       	ldi	r18, 0x38	; 56
    75be:	41 2f       	mov	r20, r17
    75c0:	83 e4       	ldi	r24, 0x43	; 67
    75c2:	9a e0       	ldi	r25, 0x0A	; 10
    75c4:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <_ZN7Display9draw_ASCIEhhh>
    75c8:	1a 5f       	subi	r17, 0xFA	; 250
			rtc.Stunden=Tastatur.ZahlenausTastatur()*10;
			if(rtc.Stunden>=24){
				rtc.Stunden=0;
				pos=-1;
				buffersize=sprintf(buffer,"Stunden falsch");
				for(uint8_t i = 0; i<buffersize;i++){
    75ca:	14 35       	cpi	r17, 0x54	; 84
    75cc:	a1 f7       	brne	.-24     	; 0x75b6 <_Z13uhreinstellenv+0x262>
		switch (pos) {
			case 0:
			rtc.Stunden=Tastatur.ZahlenausTastatur()*10;
			if(rtc.Stunden>=24){
				rtc.Stunden=0;
				pos=-1;
    75ce:	99 24       	eor	r9, r9
    75d0:	9a 94       	dec	r9
    75d2:	3f c2       	rjmp	.+1150   	; 0x7a52 <_Z13uhreinstellenv+0x6fe>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 1:
			rtc.Stunden+=Tastatur.ZahlenausTastatur();
    75d4:	87 e3       	ldi	r24, 0x37	; 55
    75d6:	9a e0       	ldi	r25, 0x0A	; 10
    75d8:	0e 94 5d 26 	call	0x4cba	; 0x4cba <_ZN9Interface17ZahlenausTastaturEv>
    75dc:	f6 01       	movw	r30, r12
    75de:	20 89       	ldd	r18, Z+16	; 0x10
    75e0:	90 e0       	ldi	r25, 0x00	; 0
    75e2:	82 0f       	add	r24, r18
    75e4:	91 1d       	adc	r25, r1
			if(rtc.Stunden>=24){
    75e6:	88 31       	cpi	r24, 0x18	; 24
    75e8:	10 f4       	brcc	.+4      	; 0x75ee <_Z13uhreinstellenv+0x29a>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 1:
			rtc.Stunden+=Tastatur.ZahlenausTastatur();
    75ea:	80 8b       	std	Z+16, r24	; 0x10
    75ec:	32 c2       	rjmp	.+1124   	; 0x7a52 <_Z13uhreinstellenv+0x6fe>
			if(rtc.Stunden>=24){
				rtc.Stunden=0;
    75ee:	f6 01       	movw	r30, r12
    75f0:	10 8a       	std	Z+16, r1	; 0x10
				pos=-1;
				buffersize=sprintf(buffer,"Stunden falsch");
    75f2:	ed e3       	ldi	r30, 0x3D	; 61
    75f4:	f3 e0       	ldi	r31, 0x03	; 3
    75f6:	d2 01       	movw	r26, r4
    75f8:	87 2d       	mov	r24, r7
    75fa:	01 90       	ld	r0, Z+
    75fc:	0d 92       	st	X+, r0
    75fe:	8a 95       	dec	r24
    7600:	e1 f7       	brne	.-8      	; 0x75fa <_Z13uhreinstellenv+0x2a6>
    7602:	1f 2d       	mov	r17, r15
				for(uint8_t i = 0; i<buffersize;i++){
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
    7604:	f5 01       	movw	r30, r10
    7606:	61 91       	ld	r22, Z+
    7608:	5f 01       	movw	r10, r30
    760a:	28 e3       	ldi	r18, 0x38	; 56
    760c:	41 2f       	mov	r20, r17
    760e:	83 e4       	ldi	r24, 0x43	; 67
    7610:	9a e0       	ldi	r25, 0x0A	; 10
    7612:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <_ZN7Display9draw_ASCIEhhh>
    7616:	1a 5f       	subi	r17, 0xFA	; 250
			rtc.Stunden+=Tastatur.ZahlenausTastatur();
			if(rtc.Stunden>=24){
				rtc.Stunden=0;
				pos=-1;
				buffersize=sprintf(buffer,"Stunden falsch");
				for(uint8_t i = 0; i<buffersize;i++){
    7618:	14 35       	cpi	r17, 0x54	; 84
    761a:	a1 f7       	brne	.-24     	; 0x7604 <_Z13uhreinstellenv+0x2b0>
			break;
			case 1:
			rtc.Stunden+=Tastatur.ZahlenausTastatur();
			if(rtc.Stunden>=24){
				rtc.Stunden=0;
				pos=-1;
    761c:	99 24       	eor	r9, r9
    761e:	9a 94       	dec	r9
    7620:	18 c2       	rjmp	.+1072   	; 0x7a52 <_Z13uhreinstellenv+0x6fe>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 2:
			rtc.Minuten=Tastatur.ZahlenausTastatur()*10;
    7622:	87 e3       	ldi	r24, 0x37	; 55
    7624:	9a e0       	ldi	r25, 0x0A	; 10
    7626:	0e 94 5d 26 	call	0x4cba	; 0x4cba <_ZN9Interface17ZahlenausTastaturEv>
    762a:	88 0f       	add	r24, r24
    762c:	98 2f       	mov	r25, r24
    762e:	99 0f       	add	r25, r25
    7630:	99 0f       	add	r25, r25
    7632:	89 0f       	add	r24, r25
			if(rtc.Minuten>=60){
    7634:	8c 33       	cpi	r24, 0x3C	; 60
    7636:	18 f4       	brcc	.+6      	; 0x763e <_Z13uhreinstellenv+0x2ea>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 2:
			rtc.Minuten=Tastatur.ZahlenausTastatur()*10;
    7638:	f6 01       	movw	r30, r12
    763a:	81 8b       	std	Z+17, r24	; 0x11
    763c:	0a c2       	rjmp	.+1044   	; 0x7a52 <_Z13uhreinstellenv+0x6fe>
			if(rtc.Minuten>=60){
				rtc.Minuten=0;
    763e:	f6 01       	movw	r30, r12
    7640:	11 8a       	std	Z+17, r1	; 0x11
				pos=1;
				buffersize=sprintf(buffer,"Minuten falsch");
    7642:	ec e4       	ldi	r30, 0x4C	; 76
    7644:	f3 e0       	ldi	r31, 0x03	; 3
    7646:	d2 01       	movw	r26, r4
    7648:	87 2d       	mov	r24, r7
    764a:	01 90       	ld	r0, Z+
    764c:	0d 92       	st	X+, r0
    764e:	8a 95       	dec	r24
    7650:	e1 f7       	brne	.-8      	; 0x764a <_Z13uhreinstellenv+0x2f6>
    7652:	1f 2d       	mov	r17, r15
				for(uint8_t i = 0; i<buffersize;i++){
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
    7654:	f5 01       	movw	r30, r10
    7656:	61 91       	ld	r22, Z+
    7658:	5f 01       	movw	r10, r30
    765a:	28 e3       	ldi	r18, 0x38	; 56
    765c:	41 2f       	mov	r20, r17
    765e:	83 e4       	ldi	r24, 0x43	; 67
    7660:	9a e0       	ldi	r25, 0x0A	; 10
    7662:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <_ZN7Display9draw_ASCIEhhh>
    7666:	1a 5f       	subi	r17, 0xFA	; 250
			rtc.Minuten=Tastatur.ZahlenausTastatur()*10;
			if(rtc.Minuten>=60){
				rtc.Minuten=0;
				pos=1;
				buffersize=sprintf(buffer,"Minuten falsch");
				for(uint8_t i = 0; i<buffersize;i++){
    7668:	14 35       	cpi	r17, 0x54	; 84
    766a:	a1 f7       	brne	.-24     	; 0x7654 <_Z13uhreinstellenv+0x300>
			break;
			case 2:
			rtc.Minuten=Tastatur.ZahlenausTastatur()*10;
			if(rtc.Minuten>=60){
				rtc.Minuten=0;
				pos=1;
    766c:	99 24       	eor	r9, r9
    766e:	93 94       	inc	r9
    7670:	f0 c1       	rjmp	.+992    	; 0x7a52 <_Z13uhreinstellenv+0x6fe>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 3:
			rtc.Minuten+=Tastatur.ZahlenausTastatur();
    7672:	87 e3       	ldi	r24, 0x37	; 55
    7674:	9a e0       	ldi	r25, 0x0A	; 10
    7676:	0e 94 5d 26 	call	0x4cba	; 0x4cba <_ZN9Interface17ZahlenausTastaturEv>
    767a:	f6 01       	movw	r30, r12
    767c:	21 89       	ldd	r18, Z+17	; 0x11
    767e:	90 e0       	ldi	r25, 0x00	; 0
    7680:	82 0f       	add	r24, r18
    7682:	91 1d       	adc	r25, r1
			if(rtc.Minuten>=60){
    7684:	8c 33       	cpi	r24, 0x3C	; 60
    7686:	10 f4       	brcc	.+4      	; 0x768c <_Z13uhreinstellenv+0x338>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 3:
			rtc.Minuten+=Tastatur.ZahlenausTastatur();
    7688:	81 8b       	std	Z+17, r24	; 0x11
    768a:	e3 c1       	rjmp	.+966    	; 0x7a52 <_Z13uhreinstellenv+0x6fe>
			if(rtc.Minuten>=60){
				rtc.Minuten=0;
    768c:	f6 01       	movw	r30, r12
    768e:	11 8a       	std	Z+17, r1	; 0x11
				pos=1;
				buffersize=sprintf(buffer,"Minuten falsch");
    7690:	ec e4       	ldi	r30, 0x4C	; 76
    7692:	f3 e0       	ldi	r31, 0x03	; 3
    7694:	d2 01       	movw	r26, r4
    7696:	87 2d       	mov	r24, r7
    7698:	01 90       	ld	r0, Z+
    769a:	0d 92       	st	X+, r0
    769c:	8a 95       	dec	r24
    769e:	e1 f7       	brne	.-8      	; 0x7698 <_Z13uhreinstellenv+0x344>
    76a0:	1f 2d       	mov	r17, r15
				for(uint8_t i = 0; i<buffersize;i++){
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
    76a2:	f5 01       	movw	r30, r10
    76a4:	61 91       	ld	r22, Z+
    76a6:	5f 01       	movw	r10, r30
    76a8:	28 e3       	ldi	r18, 0x38	; 56
    76aa:	41 2f       	mov	r20, r17
    76ac:	83 e4       	ldi	r24, 0x43	; 67
    76ae:	9a e0       	ldi	r25, 0x0A	; 10
    76b0:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <_ZN7Display9draw_ASCIEhhh>
    76b4:	1a 5f       	subi	r17, 0xFA	; 250
			rtc.Minuten+=Tastatur.ZahlenausTastatur();
			if(rtc.Minuten>=60){
				rtc.Minuten=0;
				pos=1;
				buffersize=sprintf(buffer,"Minuten falsch");
				for(uint8_t i = 0; i<buffersize;i++){
    76b6:	14 35       	cpi	r17, 0x54	; 84
    76b8:	a1 f7       	brne	.-24     	; 0x76a2 <_Z13uhreinstellenv+0x34e>
			break;
			case 3:
			rtc.Minuten+=Tastatur.ZahlenausTastatur();
			if(rtc.Minuten>=60){
				rtc.Minuten=0;
				pos=1;
    76ba:	99 24       	eor	r9, r9
    76bc:	93 94       	inc	r9
    76be:	c9 c1       	rjmp	.+914    	; 0x7a52 <_Z13uhreinstellenv+0x6fe>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 4:
			rtc.Tag=Tastatur.ZahlenausTastatur()*10;
    76c0:	87 e3       	ldi	r24, 0x37	; 55
    76c2:	9a e0       	ldi	r25, 0x0A	; 10
    76c4:	0e 94 5d 26 	call	0x4cba	; 0x4cba <_ZN9Interface17ZahlenausTastaturEv>
    76c8:	88 0f       	add	r24, r24
    76ca:	98 2f       	mov	r25, r24
    76cc:	99 0f       	add	r25, r25
    76ce:	99 0f       	add	r25, r25
    76d0:	89 0f       	add	r24, r25
			if(rtc.Tag>=32){
    76d2:	80 32       	cpi	r24, 0x20	; 32
    76d4:	18 f4       	brcc	.+6      	; 0x76dc <_Z13uhreinstellenv+0x388>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 4:
			rtc.Tag=Tastatur.ZahlenausTastatur()*10;
    76d6:	f6 01       	movw	r30, r12
    76d8:	84 8b       	std	Z+20, r24	; 0x14
    76da:	bb c1       	rjmp	.+886    	; 0x7a52 <_Z13uhreinstellenv+0x6fe>
			if(rtc.Tag>=32){
				rtc.Tag=0;
    76dc:	f6 01       	movw	r30, r12
    76de:	14 8a       	std	Z+20, r1	; 0x14
				pos=3;
				buffersize=sprintf(buffer,"Tag falsch");
    76e0:	8b e0       	ldi	r24, 0x0B	; 11
    76e2:	eb e5       	ldi	r30, 0x5B	; 91
    76e4:	f3 e0       	ldi	r31, 0x03	; 3
    76e6:	d2 01       	movw	r26, r4
    76e8:	01 90       	ld	r0, Z+
    76ea:	0d 92       	st	X+, r0
    76ec:	8a 95       	dec	r24
    76ee:	e1 f7       	brne	.-8      	; 0x76e8 <_Z13uhreinstellenv+0x394>
    76f0:	1f 2d       	mov	r17, r15
				for(uint8_t i = 0; i<buffersize;i++){
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
    76f2:	f5 01       	movw	r30, r10
    76f4:	61 91       	ld	r22, Z+
    76f6:	5f 01       	movw	r10, r30
    76f8:	28 e3       	ldi	r18, 0x38	; 56
    76fa:	41 2f       	mov	r20, r17
    76fc:	83 e4       	ldi	r24, 0x43	; 67
    76fe:	9a e0       	ldi	r25, 0x0A	; 10
    7700:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <_ZN7Display9draw_ASCIEhhh>
    7704:	1a 5f       	subi	r17, 0xFA	; 250
			rtc.Tag=Tastatur.ZahlenausTastatur()*10;
			if(rtc.Tag>=32){
				rtc.Tag=0;
				pos=3;
				buffersize=sprintf(buffer,"Tag falsch");
				for(uint8_t i = 0; i<buffersize;i++){
    7706:	1c 33       	cpi	r17, 0x3C	; 60
    7708:	a1 f7       	brne	.-24     	; 0x76f2 <_Z13uhreinstellenv+0x39e>
			break;
			case 4:
			rtc.Tag=Tastatur.ZahlenausTastatur()*10;
			if(rtc.Tag>=32){
				rtc.Tag=0;
				pos=3;
    770a:	0f 2e       	mov	r0, r31
    770c:	f3 e0       	ldi	r31, 0x03	; 3
    770e:	9f 2e       	mov	r9, r31
    7710:	f0 2d       	mov	r31, r0
    7712:	9f c1       	rjmp	.+830    	; 0x7a52 <_Z13uhreinstellenv+0x6fe>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 5:
			rtc.Tag+=Tastatur.ZahlenausTastatur();
    7714:	87 e3       	ldi	r24, 0x37	; 55
    7716:	9a e0       	ldi	r25, 0x0A	; 10
    7718:	0e 94 5d 26 	call	0x4cba	; 0x4cba <_ZN9Interface17ZahlenausTastaturEv>
    771c:	f6 01       	movw	r30, r12
    771e:	24 89       	ldd	r18, Z+20	; 0x14
    7720:	90 e0       	ldi	r25, 0x00	; 0
    7722:	82 0f       	add	r24, r18
    7724:	91 1d       	adc	r25, r1
			if(rtc.Tag>=32){
    7726:	80 32       	cpi	r24, 0x20	; 32
    7728:	10 f4       	brcc	.+4      	; 0x772e <_Z13uhreinstellenv+0x3da>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 5:
			rtc.Tag+=Tastatur.ZahlenausTastatur();
    772a:	84 8b       	std	Z+20, r24	; 0x14
    772c:	92 c1       	rjmp	.+804    	; 0x7a52 <_Z13uhreinstellenv+0x6fe>
			if(rtc.Tag>=32){
				rtc.Tag=0;
    772e:	f6 01       	movw	r30, r12
    7730:	14 8a       	std	Z+20, r1	; 0x14
				pos=3;
				buffersize=sprintf(buffer,"Tag falsch");
    7732:	8b e0       	ldi	r24, 0x0B	; 11
    7734:	eb e5       	ldi	r30, 0x5B	; 91
    7736:	f3 e0       	ldi	r31, 0x03	; 3
    7738:	d2 01       	movw	r26, r4
    773a:	01 90       	ld	r0, Z+
    773c:	0d 92       	st	X+, r0
    773e:	8a 95       	dec	r24
    7740:	e1 f7       	brne	.-8      	; 0x773a <_Z13uhreinstellenv+0x3e6>
    7742:	1f 2d       	mov	r17, r15
				for(uint8_t i = 0; i<buffersize;i++){
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
    7744:	f5 01       	movw	r30, r10
    7746:	61 91       	ld	r22, Z+
    7748:	5f 01       	movw	r10, r30
    774a:	28 e3       	ldi	r18, 0x38	; 56
    774c:	41 2f       	mov	r20, r17
    774e:	83 e4       	ldi	r24, 0x43	; 67
    7750:	9a e0       	ldi	r25, 0x0A	; 10
    7752:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <_ZN7Display9draw_ASCIEhhh>
    7756:	1a 5f       	subi	r17, 0xFA	; 250
			rtc.Tag+=Tastatur.ZahlenausTastatur();
			if(rtc.Tag>=32){
				rtc.Tag=0;
				pos=3;
				buffersize=sprintf(buffer,"Tag falsch");
				for(uint8_t i = 0; i<buffersize;i++){
    7758:	1c 33       	cpi	r17, 0x3C	; 60
    775a:	a1 f7       	brne	.-24     	; 0x7744 <_Z13uhreinstellenv+0x3f0>
			break;
			case 5:
			rtc.Tag+=Tastatur.ZahlenausTastatur();
			if(rtc.Tag>=32){
				rtc.Tag=0;
				pos=3;
    775c:	0f 2e       	mov	r0, r31
    775e:	f3 e0       	ldi	r31, 0x03	; 3
    7760:	9f 2e       	mov	r9, r31
    7762:	f0 2d       	mov	r31, r0
    7764:	76 c1       	rjmp	.+748    	; 0x7a52 <_Z13uhreinstellenv+0x6fe>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 6:
			rtc.Monat=Tastatur.ZahlenausTastatur()*10;
    7766:	87 e3       	ldi	r24, 0x37	; 55
    7768:	9a e0       	ldi	r25, 0x0A	; 10
    776a:	0e 94 5d 26 	call	0x4cba	; 0x4cba <_ZN9Interface17ZahlenausTastaturEv>
    776e:	88 0f       	add	r24, r24
    7770:	98 2f       	mov	r25, r24
    7772:	99 0f       	add	r25, r25
    7774:	99 0f       	add	r25, r25
    7776:	89 0f       	add	r24, r25
			if(rtc.Monat>=13){
    7778:	8d 30       	cpi	r24, 0x0D	; 13
    777a:	18 f4       	brcc	.+6      	; 0x7782 <_Z13uhreinstellenv+0x42e>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 6:
			rtc.Monat=Tastatur.ZahlenausTastatur()*10;
    777c:	f6 01       	movw	r30, r12
    777e:	86 8b       	std	Z+22, r24	; 0x16
    7780:	68 c1       	rjmp	.+720    	; 0x7a52 <_Z13uhreinstellenv+0x6fe>
			if(rtc.Monat>=13){
				rtc.Monat=0;
    7782:	f6 01       	movw	r30, r12
    7784:	16 8a       	std	Z+22, r1	; 0x16
				pos=5;
				buffersize=sprintf(buffer,"Monat falsch");
    7786:	8d e0       	ldi	r24, 0x0D	; 13
    7788:	e6 e6       	ldi	r30, 0x66	; 102
    778a:	f3 e0       	ldi	r31, 0x03	; 3
    778c:	d2 01       	movw	r26, r4
    778e:	01 90       	ld	r0, Z+
    7790:	0d 92       	st	X+, r0
    7792:	8a 95       	dec	r24
    7794:	e1 f7       	brne	.-8      	; 0x778e <_Z13uhreinstellenv+0x43a>
    7796:	1f 2d       	mov	r17, r15
				for(uint8_t i = 0; i<buffersize;i++){
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
    7798:	f5 01       	movw	r30, r10
    779a:	61 91       	ld	r22, Z+
    779c:	5f 01       	movw	r10, r30
    779e:	28 e3       	ldi	r18, 0x38	; 56
    77a0:	41 2f       	mov	r20, r17
    77a2:	83 e4       	ldi	r24, 0x43	; 67
    77a4:	9a e0       	ldi	r25, 0x0A	; 10
    77a6:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <_ZN7Display9draw_ASCIEhhh>
    77aa:	1a 5f       	subi	r17, 0xFA	; 250
			rtc.Monat=Tastatur.ZahlenausTastatur()*10;
			if(rtc.Monat>=13){
				rtc.Monat=0;
				pos=5;
				buffersize=sprintf(buffer,"Monat falsch");
				for(uint8_t i = 0; i<buffersize;i++){
    77ac:	18 34       	cpi	r17, 0x48	; 72
    77ae:	a1 f7       	brne	.-24     	; 0x7798 <_Z13uhreinstellenv+0x444>
			break;
			case 6:
			rtc.Monat=Tastatur.ZahlenausTastatur()*10;
			if(rtc.Monat>=13){
				rtc.Monat=0;
				pos=5;
    77b0:	0f 2e       	mov	r0, r31
    77b2:	f5 e0       	ldi	r31, 0x05	; 5
    77b4:	9f 2e       	mov	r9, r31
    77b6:	f0 2d       	mov	r31, r0
    77b8:	4c c1       	rjmp	.+664    	; 0x7a52 <_Z13uhreinstellenv+0x6fe>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 7:
			rtc.Monat+=Tastatur.ZahlenausTastatur();
    77ba:	87 e3       	ldi	r24, 0x37	; 55
    77bc:	9a e0       	ldi	r25, 0x0A	; 10
    77be:	0e 94 5d 26 	call	0x4cba	; 0x4cba <_ZN9Interface17ZahlenausTastaturEv>
    77c2:	f6 01       	movw	r30, r12
    77c4:	26 89       	ldd	r18, Z+22	; 0x16
    77c6:	90 e0       	ldi	r25, 0x00	; 0
    77c8:	82 0f       	add	r24, r18
    77ca:	91 1d       	adc	r25, r1
			if(rtc.Monat>=13){
    77cc:	8d 30       	cpi	r24, 0x0D	; 13
    77ce:	10 f4       	brcc	.+4      	; 0x77d4 <_Z13uhreinstellenv+0x480>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 7:
			rtc.Monat+=Tastatur.ZahlenausTastatur();
    77d0:	86 8b       	std	Z+22, r24	; 0x16
    77d2:	1d c0       	rjmp	.+58     	; 0x780e <_Z13uhreinstellenv+0x4ba>
			if(rtc.Monat>=13){
				rtc.Monat=0;
    77d4:	f6 01       	movw	r30, r12
    77d6:	16 8a       	std	Z+22, r1	; 0x16
				pos=5;
				buffersize=sprintf(buffer,"Monat falsch");
    77d8:	8d e0       	ldi	r24, 0x0D	; 13
    77da:	e6 e6       	ldi	r30, 0x66	; 102
    77dc:	f3 e0       	ldi	r31, 0x03	; 3
    77de:	d2 01       	movw	r26, r4
    77e0:	01 90       	ld	r0, Z+
    77e2:	0d 92       	st	X+, r0
    77e4:	8a 95       	dec	r24
    77e6:	e1 f7       	brne	.-8      	; 0x77e0 <_Z13uhreinstellenv+0x48c>
    77e8:	2d 88       	ldd	r2, Y+21	; 0x15
    77ea:	3e 88       	ldd	r3, Y+22	; 0x16
    77ec:	1f 2d       	mov	r17, r15
				for(uint8_t i = 0; i<buffersize;i++){
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
    77ee:	f1 01       	movw	r30, r2
    77f0:	61 91       	ld	r22, Z+
    77f2:	1f 01       	movw	r2, r30
    77f4:	28 e3       	ldi	r18, 0x38	; 56
    77f6:	41 2f       	mov	r20, r17
    77f8:	83 e4       	ldi	r24, 0x43	; 67
    77fa:	9a e0       	ldi	r25, 0x0A	; 10
    77fc:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <_ZN7Display9draw_ASCIEhhh>
    7800:	1a 5f       	subi	r17, 0xFA	; 250
			rtc.Monat+=Tastatur.ZahlenausTastatur();
			if(rtc.Monat>=13){
				rtc.Monat=0;
				pos=5;
				buffersize=sprintf(buffer,"Monat falsch");
				for(uint8_t i = 0; i<buffersize;i++){
    7802:	18 34       	cpi	r17, 0x48	; 72
    7804:	a1 f7       	brne	.-24     	; 0x77ee <_Z13uhreinstellenv+0x49a>
			break;
			case 7:
			rtc.Monat+=Tastatur.ZahlenausTastatur();
			if(rtc.Monat>=13){
				rtc.Monat=0;
				pos=5;
    7806:	0f 2e       	mov	r0, r31
    7808:	f5 e0       	ldi	r31, 0x05	; 5
    780a:	9f 2e       	mov	r9, r31
    780c:	f0 2d       	mov	r31, r0
				buffersize=sprintf(buffer,"Monat falsch");
				for(uint8_t i = 0; i<buffersize;i++){
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			if(rtc.Monat==4||rtc.Monat==6||rtc.Monat==9||rtc.Monat==11){
    780e:	f6 01       	movw	r30, r12
    7810:	96 89       	ldd	r25, Z+22	; 0x16
    7812:	89 2f       	mov	r24, r25
    7814:	8d 7f       	andi	r24, 0xFD	; 253
    7816:	84 30       	cpi	r24, 0x04	; 4
    7818:	11 f0       	breq	.+4      	; 0x781e <_Z13uhreinstellenv+0x4ca>
    781a:	89 30       	cpi	r24, 0x09	; 9
    781c:	09 f5       	brne	.+66     	; 0x7860 <_Z13uhreinstellenv+0x50c>
				if(rtc.Tag>=31){
    781e:	f6 01       	movw	r30, r12
    7820:	84 89       	ldd	r24, Z+20	; 0x14
    7822:	8f 31       	cpi	r24, 0x1F	; 31
    7824:	08 f4       	brcc	.+2      	; 0x7828 <_Z13uhreinstellenv+0x4d4>
    7826:	d8 c0       	rjmp	.+432    	; 0x79d8 <_Z13uhreinstellenv+0x684>
					rtc.Tag=0;
    7828:	14 8a       	std	Z+20, r1	; 0x14
					rtc.Monat=0;
    782a:	16 8a       	std	Z+22, r1	; 0x16
					pos=3;
					buffersize=sprintf(buffer,"Tag falsch");
    782c:	8b e0       	ldi	r24, 0x0B	; 11
    782e:	eb e5       	ldi	r30, 0x5B	; 91
    7830:	f3 e0       	ldi	r31, 0x03	; 3
    7832:	d2 01       	movw	r26, r4
    7834:	01 90       	ld	r0, Z+
    7836:	0d 92       	st	X+, r0
    7838:	8a 95       	dec	r24
    783a:	e1 f7       	brne	.-8      	; 0x7834 <_Z13uhreinstellenv+0x4e0>
    783c:	1f 2d       	mov	r17, r15
					for(uint8_t i = 0; i<buffersize;i++){
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
    783e:	f5 01       	movw	r30, r10
    7840:	61 91       	ld	r22, Z+
    7842:	5f 01       	movw	r10, r30
    7844:	28 e3       	ldi	r18, 0x38	; 56
    7846:	41 2f       	mov	r20, r17
    7848:	83 e4       	ldi	r24, 0x43	; 67
    784a:	9a e0       	ldi	r25, 0x0A	; 10
    784c:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <_ZN7Display9draw_ASCIEhhh>
    7850:	1a 5f       	subi	r17, 0xFA	; 250
				if(rtc.Tag>=31){
					rtc.Tag=0;
					rtc.Monat=0;
					pos=3;
					buffersize=sprintf(buffer,"Tag falsch");
					for(uint8_t i = 0; i<buffersize;i++){
    7852:	1c 33       	cpi	r17, 0x3C	; 60
    7854:	a1 f7       	brne	.-24     	; 0x783e <_Z13uhreinstellenv+0x4ea>
			}
			if(rtc.Monat==4||rtc.Monat==6||rtc.Monat==9||rtc.Monat==11){
				if(rtc.Tag>=31){
					rtc.Tag=0;
					rtc.Monat=0;
					pos=3;
    7856:	0f 2e       	mov	r0, r31
    7858:	f3 e0       	ldi	r31, 0x03	; 3
    785a:	9f 2e       	mov	r9, r31
    785c:	f0 2d       	mov	r31, r0
    785e:	f9 c0       	rjmp	.+498    	; 0x7a52 <_Z13uhreinstellenv+0x6fe>
					for(uint8_t i = 0; i<buffersize;i++){
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
			}
			else if(rtc.Monat==2){
    7860:	92 30       	cpi	r25, 0x02	; 2
    7862:	09 f0       	breq	.+2      	; 0x7866 <_Z13uhreinstellenv+0x512>
    7864:	b9 c0       	rjmp	.+370    	; 0x79d8 <_Z13uhreinstellenv+0x684>
				if(rtc.Tag>=30){
    7866:	f6 01       	movw	r30, r12
    7868:	84 89       	ldd	r24, Z+20	; 0x14
    786a:	8e 31       	cpi	r24, 0x1E	; 30
    786c:	08 f4       	brcc	.+2      	; 0x7870 <_Z13uhreinstellenv+0x51c>
    786e:	b4 c0       	rjmp	.+360    	; 0x79d8 <_Z13uhreinstellenv+0x684>
					rtc.Tag=0;
    7870:	14 8a       	std	Z+20, r1	; 0x14
					rtc.Monat=0;
    7872:	16 8a       	std	Z+22, r1	; 0x16
					pos=3;
					buffersize=sprintf(buffer,"Tag falsch");
    7874:	8b e0       	ldi	r24, 0x0B	; 11
    7876:	eb e5       	ldi	r30, 0x5B	; 91
    7878:	f3 e0       	ldi	r31, 0x03	; 3
    787a:	d2 01       	movw	r26, r4
    787c:	01 90       	ld	r0, Z+
    787e:	0d 92       	st	X+, r0
    7880:	8a 95       	dec	r24
    7882:	e1 f7       	brne	.-8      	; 0x787c <_Z13uhreinstellenv+0x528>
    7884:	1f 2d       	mov	r17, r15
					for(uint8_t i = 0; i<buffersize;i++){
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
    7886:	f5 01       	movw	r30, r10
    7888:	61 91       	ld	r22, Z+
    788a:	5f 01       	movw	r10, r30
    788c:	28 e3       	ldi	r18, 0x38	; 56
    788e:	41 2f       	mov	r20, r17
    7890:	83 e4       	ldi	r24, 0x43	; 67
    7892:	9a e0       	ldi	r25, 0x0A	; 10
    7894:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <_ZN7Display9draw_ASCIEhhh>
    7898:	1a 5f       	subi	r17, 0xFA	; 250
				if(rtc.Tag>=30){
					rtc.Tag=0;
					rtc.Monat=0;
					pos=3;
					buffersize=sprintf(buffer,"Tag falsch");
					for(uint8_t i = 0; i<buffersize;i++){
    789a:	1c 33       	cpi	r17, 0x3C	; 60
    789c:	a1 f7       	brne	.-24     	; 0x7886 <_Z13uhreinstellenv+0x532>
			}
			else if(rtc.Monat==2){
				if(rtc.Tag>=30){
					rtc.Tag=0;
					rtc.Monat=0;
					pos=3;
    789e:	0f 2e       	mov	r0, r31
    78a0:	f3 e0       	ldi	r31, 0x03	; 3
    78a2:	9f 2e       	mov	r9, r31
    78a4:	f0 2d       	mov	r31, r0
    78a6:	d5 c0       	rjmp	.+426    	; 0x7a52 <_Z13uhreinstellenv+0x6fe>
					}
				}
			}
			break;
			case 8:
			rtc.Jahr=Tastatur.ZahlenausTastatur()*10;
    78a8:	87 e3       	ldi	r24, 0x37	; 55
    78aa:	9a e0       	ldi	r25, 0x0A	; 10
    78ac:	0e 94 5d 26 	call	0x4cba	; 0x4cba <_ZN9Interface17ZahlenausTastaturEv>
    78b0:	88 0f       	add	r24, r24
    78b2:	98 2f       	mov	r25, r24
    78b4:	99 0f       	add	r25, r25
    78b6:	99 0f       	add	r25, r25
    78b8:	89 0f       	add	r24, r25
			if(rtc.Jahr>=50){
    78ba:	82 33       	cpi	r24, 0x32	; 50
    78bc:	18 f4       	brcc	.+6      	; 0x78c4 <_Z13uhreinstellenv+0x570>
					}
				}
			}
			break;
			case 8:
			rtc.Jahr=Tastatur.ZahlenausTastatur()*10;
    78be:	f6 01       	movw	r30, r12
    78c0:	87 8b       	std	Z+23, r24	; 0x17
    78c2:	c7 c0       	rjmp	.+398    	; 0x7a52 <_Z13uhreinstellenv+0x6fe>
			if(rtc.Jahr>=50){
				rtc.Jahr=0;
    78c4:	f6 01       	movw	r30, r12
    78c6:	17 8a       	std	Z+23, r1	; 0x17
				pos=7;
				buffersize=sprintf(buffer,"Jahr falsch");
    78c8:	8c e0       	ldi	r24, 0x0C	; 12
    78ca:	e3 e7       	ldi	r30, 0x73	; 115
    78cc:	f3 e0       	ldi	r31, 0x03	; 3
    78ce:	d2 01       	movw	r26, r4
    78d0:	01 90       	ld	r0, Z+
    78d2:	0d 92       	st	X+, r0
    78d4:	8a 95       	dec	r24
    78d6:	e1 f7       	brne	.-8      	; 0x78d0 <_Z13uhreinstellenv+0x57c>
    78d8:	1f 2d       	mov	r17, r15
				for(uint8_t i = 0; i<buffersize;i++){
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
    78da:	f5 01       	movw	r30, r10
    78dc:	61 91       	ld	r22, Z+
    78de:	5f 01       	movw	r10, r30
    78e0:	28 e3       	ldi	r18, 0x38	; 56
    78e2:	41 2f       	mov	r20, r17
    78e4:	83 e4       	ldi	r24, 0x43	; 67
    78e6:	9a e0       	ldi	r25, 0x0A	; 10
    78e8:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <_ZN7Display9draw_ASCIEhhh>
    78ec:	1a 5f       	subi	r17, 0xFA	; 250
			rtc.Jahr=Tastatur.ZahlenausTastatur()*10;
			if(rtc.Jahr>=50){
				rtc.Jahr=0;
				pos=7;
				buffersize=sprintf(buffer,"Jahr falsch");
				for(uint8_t i = 0; i<buffersize;i++){
    78ee:	12 34       	cpi	r17, 0x42	; 66
    78f0:	a1 f7       	brne	.-24     	; 0x78da <_Z13uhreinstellenv+0x586>
			break;
			case 8:
			rtc.Jahr=Tastatur.ZahlenausTastatur()*10;
			if(rtc.Jahr>=50){
				rtc.Jahr=0;
				pos=7;
    78f2:	0f 2e       	mov	r0, r31
    78f4:	f7 e0       	ldi	r31, 0x07	; 7
    78f6:	9f 2e       	mov	r9, r31
    78f8:	f0 2d       	mov	r31, r0
    78fa:	ab c0       	rjmp	.+342    	; 0x7a52 <_Z13uhreinstellenv+0x6fe>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 9:
			rtc.Jahr+=Tastatur.ZahlenausTastatur();
    78fc:	87 e3       	ldi	r24, 0x37	; 55
    78fe:	9a e0       	ldi	r25, 0x0A	; 10
    7900:	0e 94 5d 26 	call	0x4cba	; 0x4cba <_ZN9Interface17ZahlenausTastaturEv>
    7904:	f6 01       	movw	r30, r12
    7906:	27 89       	ldd	r18, Z+23	; 0x17
    7908:	90 e0       	ldi	r25, 0x00	; 0
    790a:	82 0f       	add	r24, r18
    790c:	91 1d       	adc	r25, r1
			if(rtc.Jahr>=50){
    790e:	82 33       	cpi	r24, 0x32	; 50
    7910:	08 f4       	brcc	.+2      	; 0x7914 <_Z13uhreinstellenv+0x5c0>
    7912:	96 c0       	rjmp	.+300    	; 0x7a40 <_Z13uhreinstellenv+0x6ec>
				rtc.Jahr=0;
    7914:	17 8a       	std	Z+23, r1	; 0x17
				pos=7;
				buffersize=sprintf(buffer,"Jahr falsch");
    7916:	8c e0       	ldi	r24, 0x0C	; 12
    7918:	e3 e7       	ldi	r30, 0x73	; 115
    791a:	f3 e0       	ldi	r31, 0x03	; 3
    791c:	d2 01       	movw	r26, r4
    791e:	01 90       	ld	r0, Z+
    7920:	0d 92       	st	X+, r0
    7922:	8a 95       	dec	r24
    7924:	e1 f7       	brne	.-8      	; 0x791e <_Z13uhreinstellenv+0x5ca>
    7926:	2d 88       	ldd	r2, Y+21	; 0x15
    7928:	3e 88       	ldd	r3, Y+22	; 0x16
    792a:	1f 2d       	mov	r17, r15
				for(uint8_t i = 0; i<buffersize;i++){
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
    792c:	f1 01       	movw	r30, r2
    792e:	61 91       	ld	r22, Z+
    7930:	1f 01       	movw	r2, r30
    7932:	28 e3       	ldi	r18, 0x38	; 56
    7934:	41 2f       	mov	r20, r17
    7936:	83 e4       	ldi	r24, 0x43	; 67
    7938:	9a e0       	ldi	r25, 0x0A	; 10
    793a:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <_ZN7Display9draw_ASCIEhhh>
    793e:	1a 5f       	subi	r17, 0xFA	; 250
			rtc.Jahr+=Tastatur.ZahlenausTastatur();
			if(rtc.Jahr>=50){
				rtc.Jahr=0;
				pos=7;
				buffersize=sprintf(buffer,"Jahr falsch");
				for(uint8_t i = 0; i<buffersize;i++){
    7940:	12 34       	cpi	r17, 0x42	; 66
    7942:	a1 f7       	brne	.-24     	; 0x792c <_Z13uhreinstellenv+0x5d8>
			break;
			case 9:
			rtc.Jahr+=Tastatur.ZahlenausTastatur();
			if(rtc.Jahr>=50){
				rtc.Jahr=0;
				pos=7;
    7944:	0f 2e       	mov	r0, r31
    7946:	f7 e0       	ldi	r31, 0x07	; 7
    7948:	9f 2e       	mov	r9, r31
    794a:	f0 2d       	mov	r31, r0
    794c:	7b c0       	rjmp	.+246    	; 0x7a44 <_Z13uhreinstellenv+0x6f0>
				for(uint8_t i = 0; i<buffersize;i++){
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			if(rtc.Monat==2){
				if(rtc.Jahr%4==0){
    794e:	f6 01       	movw	r30, r12
    7950:	17 89       	ldd	r17, Z+23	; 0x17
    7952:	13 70       	andi	r17, 0x03	; 3
    7954:	f9 f4       	brne	.+62     	; 0x7994 <_Z13uhreinstellenv+0x640>
					if (rtc.Tag>=30)
    7956:	84 89       	ldd	r24, Z+20	; 0x14
    7958:	8e 31       	cpi	r24, 0x1E	; 30
    795a:	f0 f1       	brcs	.+124    	; 0x79d8 <_Z13uhreinstellenv+0x684>
					{
						rtc.Tag=0;
    795c:	14 8a       	std	Z+20, r1	; 0x14
						rtc.Monat=0;
    795e:	16 8a       	std	Z+22, r1	; 0x16
						rtc.Jahr=0;
    7960:	17 8a       	std	Z+23, r1	; 0x17
						pos=3;
						buffersize=sprintf(buffer,"Tag falsch");
    7962:	8b e0       	ldi	r24, 0x0B	; 11
    7964:	eb e5       	ldi	r30, 0x5B	; 91
    7966:	f3 e0       	ldi	r31, 0x03	; 3
    7968:	d2 01       	movw	r26, r4
    796a:	01 90       	ld	r0, Z+
    796c:	0d 92       	st	X+, r0
    796e:	8a 95       	dec	r24
    7970:	e1 f7       	brne	.-8      	; 0x796a <_Z13uhreinstellenv+0x616>
						for(uint8_t i = 0; i<buffersize;i++){
							oled.draw_ASCI(buffer[i],charsize*i,7*8);
    7972:	f5 01       	movw	r30, r10
    7974:	61 91       	ld	r22, Z+
    7976:	5f 01       	movw	r10, r30
    7978:	28 e3       	ldi	r18, 0x38	; 56
    797a:	41 2f       	mov	r20, r17
    797c:	83 e4       	ldi	r24, 0x43	; 67
    797e:	9a e0       	ldi	r25, 0x0A	; 10
    7980:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <_ZN7Display9draw_ASCIEhhh>
    7984:	1a 5f       	subi	r17, 0xFA	; 250
						rtc.Tag=0;
						rtc.Monat=0;
						rtc.Jahr=0;
						pos=3;
						buffersize=sprintf(buffer,"Tag falsch");
						for(uint8_t i = 0; i<buffersize;i++){
    7986:	1c 33       	cpi	r17, 0x3C	; 60
    7988:	a1 f7       	brne	.-24     	; 0x7972 <_Z13uhreinstellenv+0x61e>
					if (rtc.Tag>=30)
					{
						rtc.Tag=0;
						rtc.Monat=0;
						rtc.Jahr=0;
						pos=3;
    798a:	0f 2e       	mov	r0, r31
    798c:	f3 e0       	ldi	r31, 0x03	; 3
    798e:	9f 2e       	mov	r9, r31
    7990:	f0 2d       	mov	r31, r0
    7992:	5f c0       	rjmp	.+190    	; 0x7a52 <_Z13uhreinstellenv+0x6fe>
							oled.draw_ASCI(buffer[i],charsize*i,7*8);
						}
					}
				}
				else{
					if(rtc.Tag>=29){
    7994:	f6 01       	movw	r30, r12
    7996:	84 89       	ldd	r24, Z+20	; 0x14
    7998:	8d 31       	cpi	r24, 0x1D	; 29
    799a:	f0 f0       	brcs	.+60     	; 0x79d8 <_Z13uhreinstellenv+0x684>
						rtc.Tag=0;
    799c:	14 8a       	std	Z+20, r1	; 0x14
						rtc.Monat=0;
    799e:	16 8a       	std	Z+22, r1	; 0x16
						rtc.Jahr=0;
    79a0:	17 8a       	std	Z+23, r1	; 0x17
						pos=3;
						buffersize=sprintf(buffer,"Tag falsch");
    79a2:	8b e0       	ldi	r24, 0x0B	; 11
    79a4:	eb e5       	ldi	r30, 0x5B	; 91
    79a6:	f3 e0       	ldi	r31, 0x03	; 3
    79a8:	d2 01       	movw	r26, r4
    79aa:	01 90       	ld	r0, Z+
    79ac:	0d 92       	st	X+, r0
    79ae:	8a 95       	dec	r24
    79b0:	e1 f7       	brne	.-8      	; 0x79aa <_Z13uhreinstellenv+0x656>
    79b2:	1f 2d       	mov	r17, r15
						for(uint8_t i = 0; i<buffersize;i++){
							oled.draw_ASCI(buffer[i],charsize*i,7*8);
    79b4:	f5 01       	movw	r30, r10
    79b6:	61 91       	ld	r22, Z+
    79b8:	5f 01       	movw	r10, r30
    79ba:	28 e3       	ldi	r18, 0x38	; 56
    79bc:	41 2f       	mov	r20, r17
    79be:	83 e4       	ldi	r24, 0x43	; 67
    79c0:	9a e0       	ldi	r25, 0x0A	; 10
    79c2:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <_ZN7Display9draw_ASCIEhhh>
    79c6:	1a 5f       	subi	r17, 0xFA	; 250
						rtc.Tag=0;
						rtc.Monat=0;
						rtc.Jahr=0;
						pos=3;
						buffersize=sprintf(buffer,"Tag falsch");
						for(uint8_t i = 0; i<buffersize;i++){
    79c8:	1c 33       	cpi	r17, 0x3C	; 60
    79ca:	a1 f7       	brne	.-24     	; 0x79b4 <_Z13uhreinstellenv+0x660>
				else{
					if(rtc.Tag>=29){
						rtc.Tag=0;
						rtc.Monat=0;
						rtc.Jahr=0;
						pos=3;
    79cc:	0f 2e       	mov	r0, r31
    79ce:	f3 e0       	ldi	r31, 0x03	; 3
    79d0:	9f 2e       	mov	r9, r31
    79d2:	f0 2d       	mov	r31, r0
    79d4:	3e c0       	rjmp	.+124    	; 0x7a52 <_Z13uhreinstellenv+0x6fe>
					}
				}
			}
			break;
			default:
			pos++;
    79d6:	93 94       	inc	r9
			break;
		}
		pos++;
    79d8:	93 94       	inc	r9
	
	oled.clearFrame();
	char buffer[20];
	uint8_t buffersize;
	uint8_t pos=0;
	while(pos<11){
    79da:	fa e0       	ldi	r31, 0x0A	; 10
    79dc:	f9 15       	cp	r31, r9
    79de:	08 f0       	brcs	.+2      	; 0x79e2 <_Z13uhreinstellenv+0x68e>
    79e0:	f6 cc       	rjmp	.-1556   	; 0x73ce <_Z13uhreinstellenv+0x7a>
			break;
		}
		pos++;
	}
	
	rtc.Sekunden		= 0;
    79e2:	04 e4       	ldi	r16, 0x44	; 68
    79e4:	1e e0       	ldi	r17, 0x0E	; 14
    79e6:	f8 01       	movw	r30, r16
    79e8:	12 8a       	std	Z+18, r1	; 0x12
	rtc.HundSekunden	= 0;
    79ea:	13 8a       	std	Z+19, r1	; 0x13
	//speichern der neuen Zeit im EEPROM
	EEPROM_Write(EEMINUTEN,rtc.Minuten);
    79ec:	61 89       	ldd	r22, Z+17	; 0x11
    79ee:	80 e0       	ldi	r24, 0x00	; 0
    79f0:	90 e0       	ldi	r25, 0x00	; 0
    79f2:	0e 94 71 2d 	call	0x5ae2	; 0x5ae2 <_Z12EEPROM_Writejh>
	EEPROM_Write(EESTUNDEN,rtc.Stunden);
    79f6:	f8 01       	movw	r30, r16
    79f8:	60 89       	ldd	r22, Z+16	; 0x10
    79fa:	81 e0       	ldi	r24, 0x01	; 1
    79fc:	90 e0       	ldi	r25, 0x00	; 0
    79fe:	0e 94 71 2d 	call	0x5ae2	; 0x5ae2 <_Z12EEPROM_Writejh>
	EEPROM_Write(EETAGE,rtc.Tag);
    7a02:	f8 01       	movw	r30, r16
    7a04:	64 89       	ldd	r22, Z+20	; 0x14
    7a06:	82 e0       	ldi	r24, 0x02	; 2
    7a08:	90 e0       	ldi	r25, 0x00	; 0
    7a0a:	0e 94 71 2d 	call	0x5ae2	; 0x5ae2 <_Z12EEPROM_Writejh>
	EEPROM_Write(EEMONAT,rtc.Monat);
    7a0e:	f8 01       	movw	r30, r16
    7a10:	66 89       	ldd	r22, Z+22	; 0x16
    7a12:	83 e0       	ldi	r24, 0x03	; 3
    7a14:	90 e0       	ldi	r25, 0x00	; 0
    7a16:	0e 94 71 2d 	call	0x5ae2	; 0x5ae2 <_Z12EEPROM_Writejh>
	EEPROM_Write(EEJAHR,rtc.Jahr);
    7a1a:	f8 01       	movw	r30, r16
    7a1c:	67 89       	ldd	r22, Z+23	; 0x17
    7a1e:	84 e0       	ldi	r24, 0x04	; 4
    7a20:	90 e0       	ldi	r25, 0x00	; 0
    7a22:	0e 94 71 2d 	call	0x5ae2	; 0x5ae2 <_Z12EEPROM_Writejh>
	
	oled.clearFrame();
    7a26:	83 e4       	ldi	r24, 0x43	; 67
    7a28:	9a e0       	ldi	r25, 0x0A	; 10
    7a2a:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <_ZN7Display10clearFrameEv>
	rtc.ausgabedatumneu();
    7a2e:	c8 01       	movw	r24, r16
    7a30:	78 d3       	rcall	.+1776   	; 0x8122 <_ZN3RTC15ausgabedatumneuEv>
	rtc.ausgabezeitneu();
    7a32:	c8 01       	movw	r24, r16
    7a34:	3d d3       	rcall	.+1658   	; 0x80b0 <_ZN3RTC14ausgabezeitneuEv>
	rtc.RTCstart();
    7a36:	c8 01       	movw	r24, r16
    7a38:	55 d4       	rcall	.+2218   	; 0x82e4 <_ZN3RTC8RTCstartEv>
    7a3a:	0d c0       	rjmp	.+26     	; 0x7a56 <_Z13uhreinstellenv+0x702>
			break;
			default:
			pos++;
			break;
		}
		pos++;
    7a3c:	93 94       	inc	r9
    7a3e:	c7 cc       	rjmp	.-1650   	; 0x73ce <_Z13uhreinstellenv+0x7a>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 9:
			rtc.Jahr+=Tastatur.ZahlenausTastatur();
    7a40:	f6 01       	movw	r30, r12
    7a42:	87 8b       	std	Z+23, r24	; 0x17
				buffersize=sprintf(buffer,"Jahr falsch");
				for(uint8_t i = 0; i<buffersize;i++){
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			if(rtc.Monat==2){
    7a44:	f6 01       	movw	r30, r12
    7a46:	86 89       	ldd	r24, Z+22	; 0x16
    7a48:	82 30       	cpi	r24, 0x02	; 2
    7a4a:	c1 f7       	brne	.-16     	; 0x7a3c <_Z13uhreinstellenv+0x6e8>
    7a4c:	80 cf       	rjmp	.-256    	; 0x794e <_Z13uhreinstellenv+0x5fa>

		oled.sendFrame();
		oled.clearFrame();
		switch (pos) {
			case 0:
			rtc.Stunden=Tastatur.ZahlenausTastatur()*10;
    7a4e:	f6 01       	movw	r30, r12
    7a50:	80 8b       	std	Z+16, r24	; 0x10
			break;
			default:
			pos++;
			break;
		}
		pos++;
    7a52:	93 94       	inc	r9
    7a54:	bc cc       	rjmp	.-1672   	; 0x73ce <_Z13uhreinstellenv+0x7a>
	
	oled.clearFrame();
	rtc.ausgabedatumneu();
	rtc.ausgabezeitneu();
	rtc.RTCstart();
}
    7a56:	66 96       	adiw	r28, 0x16	; 22
    7a58:	0f b6       	in	r0, 0x3f	; 63
    7a5a:	f8 94       	cli
    7a5c:	de bf       	out	0x3e, r29	; 62
    7a5e:	0f be       	out	0x3f, r0	; 63
    7a60:	cd bf       	out	0x3d, r28	; 61
    7a62:	df 91       	pop	r29
    7a64:	cf 91       	pop	r28
    7a66:	1f 91       	pop	r17
    7a68:	0f 91       	pop	r16
    7a6a:	ff 90       	pop	r15
    7a6c:	ef 90       	pop	r14
    7a6e:	df 90       	pop	r13
    7a70:	cf 90       	pop	r12
    7a72:	bf 90       	pop	r11
    7a74:	af 90       	pop	r10
    7a76:	9f 90       	pop	r9
    7a78:	8f 90       	pop	r8
    7a7a:	7f 90       	pop	r7
    7a7c:	6f 90       	pop	r6
    7a7e:	5f 90       	pop	r5
    7a80:	4f 90       	pop	r4
    7a82:	3f 90       	pop	r3
    7a84:	2f 90       	pop	r2
    7a86:	08 95       	ret

00007a88 <_ZN13einstellungen4drawEv>:
	uint8_t tastendruck(uint8_t *tast){
		return 0;
	}
	
	//anzeige erstellen
	void draw(){
    7a88:	cf 92       	push	r12
    7a8a:	df 92       	push	r13
    7a8c:	ef 92       	push	r14
    7a8e:	ff 92       	push	r15
    7a90:	0f 93       	push	r16
    7a92:	1f 93       	push	r17
    7a94:	cf 93       	push	r28
    7a96:	df 93       	push	r29
    7a98:	ec 01       	movw	r28, r24
		return 0;
	}
	
	//drawfunktion
	virtual void draw(){
		oled->clearFrame();
    7a9a:	8f 89       	ldd	r24, Y+23	; 0x17
    7a9c:	98 8d       	ldd	r25, Y+24	; 0x18
    7a9e:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <_ZN7Display10clearFrameEv>
    7aa2:	10 e0       	ldi	r17, 0x00	; 0
    7aa4:	e1 2c       	mov	r14, r1
    7aa6:	f1 2c       	mov	r15, r1
	}
	
	//draw header and overload it
	void header(){
		for(uint8_t i=0;i<8;i++){
			oled->draw_ASCI(rtc->msg_uhr[i],i*charsize,0);
    7aa8:	e9 8d       	ldd	r30, Y+25	; 0x19
    7aaa:	fa 8d       	ldd	r31, Y+26	; 0x1a
    7aac:	ee 0d       	add	r30, r14
    7aae:	ff 1d       	adc	r31, r15
    7ab0:	20 e0       	ldi	r18, 0x00	; 0
    7ab2:	41 2f       	mov	r20, r17
    7ab4:	60 81       	ld	r22, Z
    7ab6:	8f 89       	ldd	r24, Y+23	; 0x17
    7ab8:	98 8d       	ldd	r25, Y+24	; 0x18
    7aba:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <_ZN7Display9draw_ASCIEhhh>
    7abe:	2f ef       	ldi	r18, 0xFF	; 255
    7ac0:	e2 1a       	sub	r14, r18
    7ac2:	f2 0a       	sbc	r15, r18
    7ac4:	1a 5f       	subi	r17, 0xFA	; 250
		return &name[0];
	}
	
	//draw header and overload it
	void header(){
		for(uint8_t i=0;i<8;i++){
    7ac6:	10 33       	cpi	r17, 0x30	; 48
    7ac8:	79 f7       	brne	.-34     	; 0x7aa8 <_ZN13einstellungen4drawEv+0x20>
			oled->draw_ASCI(rtc->msg_uhr[i],i*charsize,0);
		}
		buffersize=sprintf(buffer,"Bat: %i%%",Batteriestatus());
    7aca:	0e 94 8d 27 	call	0x4f1a	; 0x4f1a <_Z14Batteriestatusv>
    7ace:	7e 01       	movw	r14, r28
    7ad0:	32 e0       	ldi	r19, 0x02	; 2
    7ad2:	e3 0e       	add	r14, r19
    7ad4:	f1 1c       	adc	r15, r1
    7ad6:	28 2f       	mov	r18, r24
    7ad8:	08 2e       	mov	r0, r24
    7ada:	00 0c       	add	r0, r0
    7adc:	33 0b       	sbc	r19, r19
    7ade:	3f 93       	push	r19
    7ae0:	8f 93       	push	r24
    7ae2:	82 ec       	ldi	r24, 0xC2	; 194
    7ae4:	91 e0       	ldi	r25, 0x01	; 1
    7ae6:	9f 93       	push	r25
    7ae8:	8f 93       	push	r24
    7aea:	ff 92       	push	r15
    7aec:	ef 92       	push	r14
    7aee:	0e 94 40 4d 	call	0x9a80	; 0x9a80 <sprintf>
    7af2:	8e 8b       	std	Y+22, r24	; 0x16
		for(uint8_t i=((SSD1306_WIDTH/charsize)-buffersize);i<(SSD1306_WIDTH/charsize);i++){
    7af4:	15 e1       	ldi	r17, 0x15	; 21
    7af6:	18 1b       	sub	r17, r24
    7af8:	0f 90       	pop	r0
    7afa:	0f 90       	pop	r0
    7afc:	0f 90       	pop	r0
    7afe:	0f 90       	pop	r0
    7b00:	0f 90       	pop	r0
    7b02:	0f 90       	pop	r0
    7b04:	15 31       	cpi	r17, 0x15	; 21
    7b06:	08 f0       	brcs	.+2      	; 0x7b0a <_ZN13einstellungen4drawEv+0x82>
    7b08:	80 c1       	rjmp	.+768    	; 0x7e0a <_ZN13einstellungen4drawEv+0x382>
    7b0a:	01 2f       	mov	r16, r17
    7b0c:	00 0f       	add	r16, r16
    7b0e:	01 0f       	add	r16, r17
    7b10:	00 0f       	add	r16, r16
			oled->draw_ASCI(buffer[i-((SSD1306_WIDTH/charsize)-buffersize)],i*charsize,0);
    7b12:	8e 89       	ldd	r24, Y+22	; 0x16
    7b14:	fe 01       	movw	r30, r28
    7b16:	e1 0f       	add	r30, r17
    7b18:	f1 1d       	adc	r31, r1
    7b1a:	e8 0f       	add	r30, r24
    7b1c:	f1 1d       	adc	r31, r1
    7b1e:	73 97       	sbiw	r30, 0x13	; 19
    7b20:	20 e0       	ldi	r18, 0x00	; 0
    7b22:	40 2f       	mov	r20, r16
    7b24:	60 81       	ld	r22, Z
    7b26:	8f 89       	ldd	r24, Y+23	; 0x17
    7b28:	98 8d       	ldd	r25, Y+24	; 0x18
    7b2a:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <_ZN7Display9draw_ASCIEhhh>
	void header(){
		for(uint8_t i=0;i<8;i++){
			oled->draw_ASCI(rtc->msg_uhr[i],i*charsize,0);
		}
		buffersize=sprintf(buffer,"Bat: %i%%",Batteriestatus());
		for(uint8_t i=((SSD1306_WIDTH/charsize)-buffersize);i<(SSD1306_WIDTH/charsize);i++){
    7b2e:	1f 5f       	subi	r17, 0xFF	; 255
    7b30:	0a 5f       	subi	r16, 0xFA	; 250
    7b32:	15 31       	cpi	r17, 0x15	; 21
    7b34:	71 f7       	brne	.-36     	; 0x7b12 <_ZN13einstellungen4drawEv+0x8a>
    7b36:	69 c1       	rjmp	.+722    	; 0x7e0a <_ZN13einstellungen4drawEv+0x382>
	}
	
	//draw bottom and overload it
	void bottom(){
		for(uint8_t i=0;i<8;i++){
			oled->draw_ASCI(rtc->msg_dat[i],i*charsize+(SSD1306_WIDTH-bitsderrtc*charsize),7*charhighte);
    7b38:	e9 8d       	ldd	r30, Y+25	; 0x19
    7b3a:	fa 8d       	ldd	r31, Y+26	; 0x1a
    7b3c:	ec 0d       	add	r30, r12
    7b3e:	fd 1d       	adc	r31, r13
    7b40:	28 e3       	ldi	r18, 0x38	; 56
    7b42:	41 2f       	mov	r20, r17
    7b44:	60 85       	ldd	r22, Z+8	; 0x08
    7b46:	8f 89       	ldd	r24, Y+23	; 0x17
    7b48:	98 8d       	ldd	r25, Y+24	; 0x18
    7b4a:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <_ZN7Display9draw_ASCIEhhh>
    7b4e:	8f ef       	ldi	r24, 0xFF	; 255
    7b50:	c8 1a       	sub	r12, r24
    7b52:	d8 0a       	sbc	r13, r24
    7b54:	1a 5f       	subi	r17, 0xFA	; 250
		}
	}
	
	//draw bottom and overload it
	void bottom(){
		for(uint8_t i=0;i<8;i++){
    7b56:	10 38       	cpi	r17, 0x80	; 128
    7b58:	79 f7       	brne	.-34     	; 0x7b38 <_ZN13einstellungen4drawEv+0xb0>
	//anzeige erstellen
	void draw(){
		monitor::draw();
		header();
		bottom();
		if (posx==0)
    7b5a:	8e a1       	ldd	r24, Y+38	; 0x26
    7b5c:	81 11       	cpse	r24, r1
    7b5e:	ae c0       	rjmp	.+348    	; 0x7cbc <_ZN13einstellungen4drawEv+0x234>
		{
			buffersize=sprintf(buffer,"Zeit einstellen");
    7b60:	80 e1       	ldi	r24, 0x10	; 16
    7b62:	ef e7       	ldi	r30, 0x7F	; 127
    7b64:	f3 e0       	ldi	r31, 0x03	; 3
    7b66:	d7 01       	movw	r26, r14
    7b68:	01 90       	ld	r0, Z+
    7b6a:	0d 92       	st	X+, r0
    7b6c:	8a 95       	dec	r24
    7b6e:	e1 f7       	brne	.-8      	; 0x7b68 <_ZN13einstellungen4drawEv+0xe0>
    7b70:	8f e0       	ldi	r24, 0x0F	; 15
    7b72:	8e 8b       	std	Y+22, r24	; 0x16
    7b74:	0c e0       	ldi	r16, 0x0C	; 12
    7b76:	10 e0       	ldi	r17, 0x00	; 0
			for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+2*charsize,2*charhighte);}
    7b78:	fe 01       	movw	r30, r28
    7b7a:	e1 0f       	add	r30, r17
    7b7c:	f1 1d       	adc	r31, r1
    7b7e:	20 e1       	ldi	r18, 0x10	; 16
    7b80:	40 2f       	mov	r20, r16
    7b82:	62 81       	ldd	r22, Z+2	; 0x02
    7b84:	8f 89       	ldd	r24, Y+23	; 0x17
    7b86:	98 8d       	ldd	r25, Y+24	; 0x18
    7b88:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <_ZN7Display9draw_ASCIEhhh>
    7b8c:	1f 5f       	subi	r17, 0xFF	; 255
    7b8e:	0a 5f       	subi	r16, 0xFA	; 250
    7b90:	8e 89       	ldd	r24, Y+22	; 0x16
    7b92:	18 17       	cp	r17, r24
    7b94:	88 f3       	brcs	.-30     	; 0x7b78 <_ZN13einstellungen4drawEv+0xf0>
			buffersize=sprintf(buffer,"g bestimmen");
    7b96:	8c e0       	ldi	r24, 0x0C	; 12
    7b98:	ef e8       	ldi	r30, 0x8F	; 143
    7b9a:	f3 e0       	ldi	r31, 0x03	; 3
    7b9c:	d7 01       	movw	r26, r14
    7b9e:	01 90       	ld	r0, Z+
    7ba0:	0d 92       	st	X+, r0
    7ba2:	8a 95       	dec	r24
    7ba4:	e1 f7       	brne	.-8      	; 0x7b9e <_ZN13einstellungen4drawEv+0x116>
    7ba6:	8b e0       	ldi	r24, 0x0B	; 11
    7ba8:	8e 8b       	std	Y+22, r24	; 0x16
    7baa:	0c e0       	ldi	r16, 0x0C	; 12
    7bac:	10 e0       	ldi	r17, 0x00	; 0
			for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+2*charsize,3*charhighte);}
    7bae:	fe 01       	movw	r30, r28
    7bb0:	e1 0f       	add	r30, r17
    7bb2:	f1 1d       	adc	r31, r1
    7bb4:	28 e1       	ldi	r18, 0x18	; 24
    7bb6:	40 2f       	mov	r20, r16
    7bb8:	62 81       	ldd	r22, Z+2	; 0x02
    7bba:	8f 89       	ldd	r24, Y+23	; 0x17
    7bbc:	98 8d       	ldd	r25, Y+24	; 0x18
    7bbe:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <_ZN7Display9draw_ASCIEhhh>
    7bc2:	1f 5f       	subi	r17, 0xFF	; 255
    7bc4:	0a 5f       	subi	r16, 0xFA	; 250
    7bc6:	8e 89       	ldd	r24, Y+22	; 0x16
    7bc8:	18 17       	cp	r17, r24
    7bca:	88 f3       	brcs	.-30     	; 0x7bae <_ZN13einstellungen4drawEv+0x126>
			buffersize=sprintf(buffer,"Versionsnummer");
    7bcc:	8f e0       	ldi	r24, 0x0F	; 15
    7bce:	eb e9       	ldi	r30, 0x9B	; 155
    7bd0:	f3 e0       	ldi	r31, 0x03	; 3
    7bd2:	d7 01       	movw	r26, r14
    7bd4:	01 90       	ld	r0, Z+
    7bd6:	0d 92       	st	X+, r0
    7bd8:	8a 95       	dec	r24
    7bda:	e1 f7       	brne	.-8      	; 0x7bd4 <_ZN13einstellungen4drawEv+0x14c>
    7bdc:	8e e0       	ldi	r24, 0x0E	; 14
    7bde:	8e 8b       	std	Y+22, r24	; 0x16
    7be0:	0c e0       	ldi	r16, 0x0C	; 12
    7be2:	10 e0       	ldi	r17, 0x00	; 0
			for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+2*charsize,4*charhighte);}
    7be4:	fe 01       	movw	r30, r28
    7be6:	e1 0f       	add	r30, r17
    7be8:	f1 1d       	adc	r31, r1
    7bea:	20 e2       	ldi	r18, 0x20	; 32
    7bec:	40 2f       	mov	r20, r16
    7bee:	62 81       	ldd	r22, Z+2	; 0x02
    7bf0:	8f 89       	ldd	r24, Y+23	; 0x17
    7bf2:	98 8d       	ldd	r25, Y+24	; 0x18
    7bf4:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <_ZN7Display9draw_ASCIEhhh>
    7bf8:	1f 5f       	subi	r17, 0xFF	; 255
    7bfa:	0a 5f       	subi	r16, 0xFA	; 250
    7bfc:	8e 89       	ldd	r24, Y+22	; 0x16
    7bfe:	18 17       	cp	r17, r24
    7c00:	88 f3       	brcs	.-30     	; 0x7be4 <_ZN13einstellungen4drawEv+0x15c>
			buffersize=sprintf(buffer,"Mount SD: %u", (bool)(statusreg&(1<<mounttingstat)));
    7c02:	80 91 13 09 	lds	r24, 0x0913
    7c06:	86 95       	lsr	r24
    7c08:	81 70       	andi	r24, 0x01	; 1
    7c0a:	1f 92       	push	r1
    7c0c:	8f 93       	push	r24
    7c0e:	8a ea       	ldi	r24, 0xAA	; 170
    7c10:	93 e0       	ldi	r25, 0x03	; 3
    7c12:	9f 93       	push	r25
    7c14:	8f 93       	push	r24
    7c16:	ff 92       	push	r15
    7c18:	ef 92       	push	r14
    7c1a:	0e 94 40 4d 	call	0x9a80	; 0x9a80 <sprintf>
    7c1e:	8e 8b       	std	Y+22, r24	; 0x16
			for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+2*charsize,5*charhighte);}
    7c20:	0f 90       	pop	r0
    7c22:	0f 90       	pop	r0
    7c24:	0f 90       	pop	r0
    7c26:	0f 90       	pop	r0
    7c28:	0f 90       	pop	r0
    7c2a:	0f 90       	pop	r0
    7c2c:	88 23       	and	r24, r24
    7c2e:	89 f0       	breq	.+34     	; 0x7c52 <_ZN13einstellungen4drawEv+0x1ca>
    7c30:	0c e0       	ldi	r16, 0x0C	; 12
    7c32:	10 e0       	ldi	r17, 0x00	; 0
    7c34:	fe 01       	movw	r30, r28
    7c36:	e1 0f       	add	r30, r17
    7c38:	f1 1d       	adc	r31, r1
    7c3a:	28 e2       	ldi	r18, 0x28	; 40
    7c3c:	40 2f       	mov	r20, r16
    7c3e:	62 81       	ldd	r22, Z+2	; 0x02
    7c40:	8f 89       	ldd	r24, Y+23	; 0x17
    7c42:	98 8d       	ldd	r25, Y+24	; 0x18
    7c44:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <_ZN7Display9draw_ASCIEhhh>
    7c48:	1f 5f       	subi	r17, 0xFF	; 255
    7c4a:	0a 5f       	subi	r16, 0xFA	; 250
    7c4c:	8e 89       	ldd	r24, Y+22	; 0x16
    7c4e:	18 17       	cp	r17, r24
    7c50:	88 f3       	brcs	.-30     	; 0x7c34 <_ZN13einstellungen4drawEv+0x1ac>
			buffersize=sprintf(buffer,"Logging:  %u", (bool)(statusreg&(1<<loggingstat)));
    7c52:	80 91 13 09 	lds	r24, 0x0913
    7c56:	82 fb       	bst	r24, 2
    7c58:	88 27       	eor	r24, r24
    7c5a:	80 f9       	bld	r24, 0
    7c5c:	1f 92       	push	r1
    7c5e:	8f 93       	push	r24
    7c60:	87 eb       	ldi	r24, 0xB7	; 183
    7c62:	93 e0       	ldi	r25, 0x03	; 3
    7c64:	9f 93       	push	r25
    7c66:	8f 93       	push	r24
    7c68:	ff 92       	push	r15
    7c6a:	ef 92       	push	r14
    7c6c:	0e 94 40 4d 	call	0x9a80	; 0x9a80 <sprintf>
    7c70:	8e 8b       	std	Y+22, r24	; 0x16
			for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+2*charsize,6*charhighte);}
    7c72:	0f 90       	pop	r0
    7c74:	0f 90       	pop	r0
    7c76:	0f 90       	pop	r0
    7c78:	0f 90       	pop	r0
    7c7a:	0f 90       	pop	r0
    7c7c:	0f 90       	pop	r0
    7c7e:	88 23       	and	r24, r24
    7c80:	89 f0       	breq	.+34     	; 0x7ca4 <_ZN13einstellungen4drawEv+0x21c>
    7c82:	0c e0       	ldi	r16, 0x0C	; 12
    7c84:	10 e0       	ldi	r17, 0x00	; 0
    7c86:	fe 01       	movw	r30, r28
    7c88:	e1 0f       	add	r30, r17
    7c8a:	f1 1d       	adc	r31, r1
    7c8c:	20 e3       	ldi	r18, 0x30	; 48
    7c8e:	40 2f       	mov	r20, r16
    7c90:	62 81       	ldd	r22, Z+2	; 0x02
    7c92:	8f 89       	ldd	r24, Y+23	; 0x17
    7c94:	98 8d       	ldd	r25, Y+24	; 0x18
    7c96:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <_ZN7Display9draw_ASCIEhhh>
    7c9a:	1f 5f       	subi	r17, 0xFF	; 255
    7c9c:	0a 5f       	subi	r16, 0xFA	; 250
    7c9e:	8e 89       	ldd	r24, Y+22	; 0x16
    7ca0:	18 17       	cp	r17, r24
    7ca2:	88 f3       	brcs	.-30     	; 0x7c86 <_ZN13einstellungen4drawEv+0x1fe>
			oled->draw_ASCI('>',0*charsize,(posy+2)*charhighte);
    7ca4:	2d a1       	ldd	r18, Y+37	; 0x25
    7ca6:	22 0f       	add	r18, r18
    7ca8:	22 0f       	add	r18, r18
    7caa:	22 0f       	add	r18, r18
    7cac:	20 5f       	subi	r18, 0xF0	; 240
    7cae:	40 e0       	ldi	r20, 0x00	; 0
    7cb0:	6e e3       	ldi	r22, 0x3E	; 62
    7cb2:	8f 89       	ldd	r24, Y+23	; 0x17
    7cb4:	98 8d       	ldd	r25, Y+24	; 0x18
    7cb6:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <_ZN7Display9draw_ASCIEhhh>
    7cba:	a2 c0       	rjmp	.+324    	; 0x7e00 <_ZN13einstellungen4drawEv+0x378>
		}
		else if (posy==0 && posx==1)
    7cbc:	9d a1       	ldd	r25, Y+37	; 0x25
    7cbe:	91 11       	cpse	r25, r1
    7cc0:	06 c0       	rjmp	.+12     	; 0x7cce <_ZN13einstellungen4drawEv+0x246>
    7cc2:	81 30       	cpi	r24, 0x01	; 1
    7cc4:	09 f0       	breq	.+2      	; 0x7cc8 <_ZN13einstellungen4drawEv+0x240>
    7cc6:	9c c0       	rjmp	.+312    	; 0x7e00 <_ZN13einstellungen4drawEv+0x378>
		{
			//Uhreinstellung machen
			//noch etwas bloed, aber mit eigener Funktion
			uhreinstellen();
    7cc8:	45 db       	rcall	.-2422   	; 0x7354 <_Z13uhreinstellenv>
			posx=0;
    7cca:	1e a2       	std	Y+38, r1	; 0x26
    7ccc:	99 c0       	rjmp	.+306    	; 0x7e00 <_ZN13einstellungen4drawEv+0x378>
		}
		else if (posy==1 && posx==1)
    7cce:	91 30       	cpi	r25, 0x01	; 1
    7cd0:	09 f0       	breq	.+2      	; 0x7cd4 <_ZN13einstellungen4drawEv+0x24c>
    7cd2:	60 c0       	rjmp	.+192    	; 0x7d94 <_ZN13einstellungen4drawEv+0x30c>
    7cd4:	81 30       	cpi	r24, 0x01	; 1
    7cd6:	09 f0       	breq	.+2      	; 0x7cda <_ZN13einstellungen4drawEv+0x252>
    7cd8:	93 c0       	rjmp	.+294    	; 0x7e00 <_ZN13einstellungen4drawEv+0x378>
		{
			//g bestimmen einbauen
			buffersize=sprintf(buffer,"Geraet nicht bewegen");
    7cda:	85 e1       	ldi	r24, 0x15	; 21
    7cdc:	e4 ec       	ldi	r30, 0xC4	; 196
    7cde:	f3 e0       	ldi	r31, 0x03	; 3
    7ce0:	d7 01       	movw	r26, r14
    7ce2:	01 90       	ld	r0, Z+
    7ce4:	0d 92       	st	X+, r0
    7ce6:	8a 95       	dec	r24
    7ce8:	e1 f7       	brne	.-8      	; 0x7ce2 <_ZN13einstellungen4drawEv+0x25a>
    7cea:	84 e1       	ldi	r24, 0x14	; 20
    7cec:	8e 8b       	std	Y+22, r24	; 0x16
    7cee:	00 e0       	ldi	r16, 0x00	; 0
    7cf0:	10 e0       	ldi	r17, 0x00	; 0
			for (uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize,2*charhighte);}
    7cf2:	fe 01       	movw	r30, r28
    7cf4:	e1 0f       	add	r30, r17
    7cf6:	f1 1d       	adc	r31, r1
    7cf8:	20 e1       	ldi	r18, 0x10	; 16
    7cfa:	40 2f       	mov	r20, r16
    7cfc:	62 81       	ldd	r22, Z+2	; 0x02
    7cfe:	8f 89       	ldd	r24, Y+23	; 0x17
    7d00:	98 8d       	ldd	r25, Y+24	; 0x18
    7d02:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <_ZN7Display9draw_ASCIEhhh>
    7d06:	1f 5f       	subi	r17, 0xFF	; 255
    7d08:	0a 5f       	subi	r16, 0xFA	; 250
    7d0a:	8e 89       	ldd	r24, Y+22	; 0x16
    7d0c:	18 17       	cp	r17, r24
    7d0e:	88 f3       	brcs	.-30     	; 0x7cf2 <_ZN13einstellungen4drawEv+0x26a>
			buffersize=sprintf(buffer,"* fuer start");
    7d10:	8d e0       	ldi	r24, 0x0D	; 13
    7d12:	e9 ed       	ldi	r30, 0xD9	; 217
    7d14:	f3 e0       	ldi	r31, 0x03	; 3
    7d16:	d7 01       	movw	r26, r14
    7d18:	01 90       	ld	r0, Z+
    7d1a:	0d 92       	st	X+, r0
    7d1c:	8a 95       	dec	r24
    7d1e:	e1 f7       	brne	.-8      	; 0x7d18 <_ZN13einstellungen4drawEv+0x290>
    7d20:	8c e0       	ldi	r24, 0x0C	; 12
    7d22:	8e 8b       	std	Y+22, r24	; 0x16
    7d24:	00 e0       	ldi	r16, 0x00	; 0
    7d26:	10 e0       	ldi	r17, 0x00	; 0
			for (uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize,3*charhighte);}
    7d28:	fe 01       	movw	r30, r28
    7d2a:	e1 0f       	add	r30, r17
    7d2c:	f1 1d       	adc	r31, r1
    7d2e:	28 e1       	ldi	r18, 0x18	; 24
    7d30:	40 2f       	mov	r20, r16
    7d32:	62 81       	ldd	r22, Z+2	; 0x02
    7d34:	8f 89       	ldd	r24, Y+23	; 0x17
    7d36:	98 8d       	ldd	r25, Y+24	; 0x18
    7d38:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <_ZN7Display9draw_ASCIEhhh>
    7d3c:	1f 5f       	subi	r17, 0xFF	; 255
    7d3e:	0a 5f       	subi	r16, 0xFA	; 250
    7d40:	8e 89       	ldd	r24, Y+22	; 0x16
    7d42:	18 17       	cp	r17, r24
    7d44:	88 f3       	brcs	.-30     	; 0x7d28 <_ZN13einstellungen4drawEv+0x2a0>
			if (5<6&&5>0)
			{
				buffersize=sprintf(buffer,"Noch %i Sekunden",5);
    7d46:	1f 92       	push	r1
    7d48:	85 e0       	ldi	r24, 0x05	; 5
    7d4a:	8f 93       	push	r24
    7d4c:	86 ee       	ldi	r24, 0xE6	; 230
    7d4e:	93 e0       	ldi	r25, 0x03	; 3
    7d50:	9f 93       	push	r25
    7d52:	8f 93       	push	r24
    7d54:	ff 92       	push	r15
    7d56:	ef 92       	push	r14
    7d58:	0e 94 40 4d 	call	0x9a80	; 0x9a80 <sprintf>
    7d5c:	8e 8b       	std	Y+22, r24	; 0x16
				for (uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize,5*charhighte);}
    7d5e:	0f 90       	pop	r0
    7d60:	0f 90       	pop	r0
    7d62:	0f 90       	pop	r0
    7d64:	0f 90       	pop	r0
    7d66:	0f 90       	pop	r0
    7d68:	0f 90       	pop	r0
    7d6a:	88 23       	and	r24, r24
    7d6c:	09 f4       	brne	.+2      	; 0x7d70 <_ZN13einstellungen4drawEv+0x2e8>
    7d6e:	48 c0       	rjmp	.+144    	; 0x7e00 <_ZN13einstellungen4drawEv+0x378>
    7d70:	00 e0       	ldi	r16, 0x00	; 0
    7d72:	10 e0       	ldi	r17, 0x00	; 0
    7d74:	fe 01       	movw	r30, r28
    7d76:	e1 0f       	add	r30, r17
    7d78:	f1 1d       	adc	r31, r1
    7d7a:	28 e2       	ldi	r18, 0x28	; 40
    7d7c:	40 2f       	mov	r20, r16
    7d7e:	62 81       	ldd	r22, Z+2	; 0x02
    7d80:	8f 89       	ldd	r24, Y+23	; 0x17
    7d82:	98 8d       	ldd	r25, Y+24	; 0x18
    7d84:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <_ZN7Display9draw_ASCIEhhh>
    7d88:	1f 5f       	subi	r17, 0xFF	; 255
    7d8a:	0a 5f       	subi	r16, 0xFA	; 250
    7d8c:	8e 89       	ldd	r24, Y+22	; 0x16
    7d8e:	18 17       	cp	r17, r24
    7d90:	88 f3       	brcs	.-30     	; 0x7d74 <_ZN13einstellungen4drawEv+0x2ec>
    7d92:	36 c0       	rjmp	.+108    	; 0x7e00 <_ZN13einstellungen4drawEv+0x378>
			else if (5==0)
			{
				posx--;
			}
		}
		else if (posy==2 && posx==1)
    7d94:	92 30       	cpi	r25, 0x02	; 2
    7d96:	a1 f5       	brne	.+104    	; 0x7e00 <_ZN13einstellungen4drawEv+0x378>
    7d98:	81 30       	cpi	r24, 0x01	; 1
    7d9a:	91 f5       	brne	.+100    	; 0x7e00 <_ZN13einstellungen4drawEv+0x378>
		{
			buffersize=sprintf(buffer,"Version: %.2f",(double)VERSIONSNUMMER);
    7d9c:	80 e4       	ldi	r24, 0x40	; 64
    7d9e:	8f 93       	push	r24
    7da0:	83 e4       	ldi	r24, 0x43	; 67
    7da2:	8f 93       	push	r24
    7da4:	87 ed       	ldi	r24, 0xD7	; 215
    7da6:	8f 93       	push	r24
    7da8:	8a e0       	ldi	r24, 0x0A	; 10
    7daa:	8f 93       	push	r24
    7dac:	84 eb       	ldi	r24, 0xB4	; 180
    7dae:	91 e0       	ldi	r25, 0x01	; 1
    7db0:	9f 93       	push	r25
    7db2:	8f 93       	push	r24
    7db4:	ff 92       	push	r15
    7db6:	ef 92       	push	r14
    7db8:	0e 94 40 4d 	call	0x9a80	; 0x9a80 <sprintf>
    7dbc:	8e 8b       	std	Y+22, r24	; 0x16
			for(uint8_t i=0; i < buffersize;i++){
    7dbe:	2d b7       	in	r18, 0x3d	; 61
    7dc0:	3e b7       	in	r19, 0x3e	; 62
    7dc2:	28 5f       	subi	r18, 0xF8	; 248
    7dc4:	3f 4f       	sbci	r19, 0xFF	; 255
    7dc6:	0f b6       	in	r0, 0x3f	; 63
    7dc8:	f8 94       	cli
    7dca:	3e bf       	out	0x3e, r19	; 62
    7dcc:	0f be       	out	0x3f, r0	; 63
    7dce:	2d bf       	out	0x3d, r18	; 61
    7dd0:	88 23       	and	r24, r24
    7dd2:	b1 f0       	breq	.+44     	; 0x7e00 <_ZN13einstellungen4drawEv+0x378>
    7dd4:	10 e0       	ldi	r17, 0x00	; 0
				oled->draw_ASCI(buffer[i],(i+2)*charsize,3.5*charhighte);
    7dd6:	21 2f       	mov	r18, r17
    7dd8:	30 e0       	ldi	r19, 0x00	; 0
    7dda:	c9 01       	movw	r24, r18
    7ddc:	02 96       	adiw	r24, 0x02	; 2
    7dde:	48 2f       	mov	r20, r24
    7de0:	44 0f       	add	r20, r20
    7de2:	48 0f       	add	r20, r24
    7de4:	44 0f       	add	r20, r20
    7de6:	fe 01       	movw	r30, r28
    7de8:	e2 0f       	add	r30, r18
    7dea:	f3 1f       	adc	r31, r19
    7dec:	2c e1       	ldi	r18, 0x1C	; 28
    7dee:	62 81       	ldd	r22, Z+2	; 0x02
    7df0:	8f 89       	ldd	r24, Y+23	; 0x17
    7df2:	98 8d       	ldd	r25, Y+24	; 0x18
    7df4:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <_ZN7Display9draw_ASCIEhhh>
			}
		}
		else if (posy==2 && posx==1)
		{
			buffersize=sprintf(buffer,"Version: %.2f",(double)VERSIONSNUMMER);
			for(uint8_t i=0; i < buffersize;i++){
    7df8:	1f 5f       	subi	r17, 0xFF	; 255
    7dfa:	8e 89       	ldd	r24, Y+22	; 0x16
    7dfc:	18 17       	cp	r17, r24
    7dfe:	58 f3       	brcs	.-42     	; 0x7dd6 <_ZN13einstellungen4drawEv+0x34e>
		oled->clearFrame();
	}

	//send the frame to the display
	void send(){
		oled->sendFrame();	
    7e00:	8f 89       	ldd	r24, Y+23	; 0x17
    7e02:	98 8d       	ldd	r25, Y+24	; 0x18
    7e04:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <_ZN7Display9sendFrameEv>
    7e08:	04 c0       	rjmp	.+8      	; 0x7e12 <_ZN13einstellungen4drawEv+0x38a>
		return 0;
	}
	
	//drawfunktion
	virtual void draw(){
		oled->clearFrame();
    7e0a:	10 e5       	ldi	r17, 0x50	; 80
    7e0c:	c1 2c       	mov	r12, r1
    7e0e:	d1 2c       	mov	r13, r1
    7e10:	93 ce       	rjmp	.-730    	; 0x7b38 <_ZN13einstellungen4drawEv+0xb0>
				oled->draw_ASCI(buffer[i],(i+2)*charsize,3.5*charhighte);

			}
		}
		send();	
	}
    7e12:	df 91       	pop	r29
    7e14:	cf 91       	pop	r28
    7e16:	1f 91       	pop	r17
    7e18:	0f 91       	pop	r16
    7e1a:	ff 90       	pop	r15
    7e1c:	ef 90       	pop	r14
    7e1e:	df 90       	pop	r13
    7e20:	cf 90       	pop	r12
    7e22:	08 95       	ret

00007e24 <_GLOBAL__sub_I__Znwj>:
{
	free(ptr);
}

#include "RTC.h"
RTC rtc;
    7e24:	84 e4       	ldi	r24, 0x44	; 68
    7e26:	9e e0       	ldi	r25, 0x0E	; 14
    7e28:	b5 d1       	rcall	.+874    	; 0x8194 <_ZN3RTCC1Ev>

#include "Display.h"
Display oled;
    7e2a:	83 e4       	ldi	r24, 0x43	; 67
    7e2c:	9a e0       	ldi	r25, 0x0A	; 10
    7e2e:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <_ZN7DisplayC1Ev>

#include "Interface.h"
Interface Tastatur;
    7e32:	87 e3       	ldi	r24, 0x37	; 55
    7e34:	9a e0       	ldi	r25, 0x0A	; 10
    7e36:	0e 94 52 25 	call	0x4aa4	; 0x4aa4 <_ZN9InterfaceC1Ev>
//nicht mehr verwendet
//#include "SOUND.h"
//SOUND Lautsprecher;

#include "LSM303D.h"
LSM303D Accelerometer;
    7e3a:	8e e4       	ldi	r24, 0x4E	; 78
    7e3c:	99 e0       	ldi	r25, 0x09	; 9
    7e3e:	0e 94 9c 26 	call	0x4d38	; 0x4d38 <_ZN7LSM303DC1Ev>

#include "BMP180.h"
BMP180 druck;
    7e42:	8f e1       	ldi	r24, 0x1F	; 31
    7e44:	99 e0       	ldi	r25, 0x09	; 9
    7e46:	0e 94 95 04 	call	0x92a	; 0x92a <_ZN6BMP180C1Ev>

#include "ADC.h"

#include "Output.h"
Output LED('B',PORTB1);
    7e4a:	41 e0       	ldi	r20, 0x01	; 1
    7e4c:	62 e4       	ldi	r22, 0x42	; 66
    7e4e:	89 e1       	ldi	r24, 0x19	; 25
    7e50:	99 e0       	ldi	r25, 0x09	; 9
    7e52:	28 d0       	rcall	.+80     	; 0x7ea4 <_ZN6OutputC1Ehh>
Output Vibrationsmotor('B',PORTB2);
    7e54:	42 e0       	ldi	r20, 0x02	; 2
    7e56:	62 e4       	ldi	r22, 0x42	; 66
    7e58:	87 e1       	ldi	r24, 0x17	; 23
    7e5a:	99 e0       	ldi	r25, 0x09	; 9
    7e5c:	23 d0       	rcall	.+70     	; 0x7ea4 <_ZN6OutputC1Ehh>
Output IRLED('D',PORTD7);
    7e5e:	47 e0       	ldi	r20, 0x07	; 7
    7e60:	64 e4       	ldi	r22, 0x44	; 68
    7e62:	85 e1       	ldi	r24, 0x15	; 21
    7e64:	99 e0       	ldi	r25, 0x09	; 9
    7e66:	1e c0       	rjmp	.+60     	; 0x7ea4 <_ZN6OutputC1Ehh>
    7e68:	08 95       	ret

00007e6a <_GLOBAL__sub_D__Znwj>:
    7e6a:	85 e1       	ldi	r24, 0x15	; 21
    7e6c:	99 e0       	ldi	r25, 0x09	; 9
    7e6e:	54 d0       	rcall	.+168    	; 0x7f18 <_ZN6OutputD1Ev>

#include "ADC.h"

#include "Output.h"
Output LED('B',PORTB1);
Output Vibrationsmotor('B',PORTB2);
    7e70:	87 e1       	ldi	r24, 0x17	; 23
    7e72:	99 e0       	ldi	r25, 0x09	; 9
    7e74:	51 d0       	rcall	.+162    	; 0x7f18 <_ZN6OutputD1Ev>
BMP180 druck;

#include "ADC.h"

#include "Output.h"
Output LED('B',PORTB1);
    7e76:	89 e1       	ldi	r24, 0x19	; 25
    7e78:	99 e0       	ldi	r25, 0x09	; 9
    7e7a:	4e d0       	rcall	.+156    	; 0x7f18 <_ZN6OutputD1Ev>

#include "LSM303D.h"
LSM303D Accelerometer;

#include "BMP180.h"
BMP180 druck;
    7e7c:	8f e1       	ldi	r24, 0x1F	; 31
    7e7e:	99 e0       	ldi	r25, 0x09	; 9
    7e80:	0e 94 84 03 	call	0x708	; 0x708 <_ZN6BMP180D1Ev>
//nicht mehr verwendet
//#include "SOUND.h"
//SOUND Lautsprecher;

#include "LSM303D.h"
LSM303D Accelerometer;
    7e84:	8e e4       	ldi	r24, 0x4E	; 78
    7e86:	99 e0       	ldi	r25, 0x09	; 9
    7e88:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <_ZN7LSM303DD1Ev>

#include "Display.h"
Display oled;

#include "Interface.h"
Interface Tastatur;
    7e8c:	87 e3       	ldi	r24, 0x37	; 55
    7e8e:	9a e0       	ldi	r25, 0x0A	; 10
    7e90:	0e 94 65 25 	call	0x4aca	; 0x4aca <_ZN9InterfaceD1Ev>

#include "RTC.h"
RTC rtc;

#include "Display.h"
Display oled;
    7e94:	83 e4       	ldi	r24, 0x43	; 67
    7e96:	9a e0       	ldi	r25, 0x0A	; 10
    7e98:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <_ZN7DisplayD1Ev>
{
	free(ptr);
}

#include "RTC.h"
RTC rtc;
    7e9c:	84 e4       	ldi	r24, 0x44	; 68
    7e9e:	9e e0       	ldi	r25, 0x0E	; 14
    7ea0:	f5 c0       	rjmp	.+490    	; 0x808c <_ZN3RTCD1Ev>
    7ea2:	08 95       	ret

00007ea4 <_ZN6OutputC1Ehh>:
#include "Output.h"

// default constructor
Output::Output(uint8_t Portpraefix, uint8_t Pinnumber)
{
	Pin=Pinnumber;
    7ea4:	fc 01       	movw	r30, r24
    7ea6:	41 83       	std	Z+1, r20	; 0x01
	Port=Portpraefix;
    7ea8:	60 83       	st	Z, r22
	switch (Portpraefix)
    7eaa:	62 34       	cpi	r22, 0x42	; 66
    7eac:	a1 f0       	breq	.+40     	; 0x7ed6 <_ZN6OutputC1Ehh+0x32>
    7eae:	18 f4       	brcc	.+6      	; 0x7eb6 <_ZN6OutputC1Ehh+0x12>
    7eb0:	61 34       	cpi	r22, 0x41	; 65
    7eb2:	31 f0       	breq	.+12     	; 0x7ec0 <_ZN6OutputC1Ehh+0x1c>
    7eb4:	08 95       	ret
    7eb6:	63 34       	cpi	r22, 0x43	; 67
    7eb8:	c9 f0       	breq	.+50     	; 0x7eec <_ZN6OutputC1Ehh+0x48>
    7eba:	64 34       	cpi	r22, 0x44	; 68
    7ebc:	11 f1       	breq	.+68     	; 0x7f02 <_ZN6OutputC1Ehh+0x5e>
    7ebe:	08 95       	ret
	{
		case 'A':
			DDRA |= (1<<Pin);
    7ec0:	21 b1       	in	r18, 0x01	; 1
    7ec2:	81 e0       	ldi	r24, 0x01	; 1
    7ec4:	90 e0       	ldi	r25, 0x00	; 0
    7ec6:	02 c0       	rjmp	.+4      	; 0x7ecc <_ZN6OutputC1Ehh+0x28>
    7ec8:	88 0f       	add	r24, r24
    7eca:	99 1f       	adc	r25, r25
    7ecc:	4a 95       	dec	r20
    7ece:	e2 f7       	brpl	.-8      	; 0x7ec8 <_ZN6OutputC1Ehh+0x24>
    7ed0:	82 2b       	or	r24, r18
    7ed2:	81 b9       	out	0x01, r24	; 1
			break;
    7ed4:	08 95       	ret
		case 'B':
			DDRB |= (1<<Pin);
    7ed6:	24 b1       	in	r18, 0x04	; 4
    7ed8:	81 e0       	ldi	r24, 0x01	; 1
    7eda:	90 e0       	ldi	r25, 0x00	; 0
    7edc:	02 c0       	rjmp	.+4      	; 0x7ee2 <_ZN6OutputC1Ehh+0x3e>
    7ede:	88 0f       	add	r24, r24
    7ee0:	99 1f       	adc	r25, r25
    7ee2:	4a 95       	dec	r20
    7ee4:	e2 f7       	brpl	.-8      	; 0x7ede <_ZN6OutputC1Ehh+0x3a>
    7ee6:	82 2b       	or	r24, r18
    7ee8:	84 b9       	out	0x04, r24	; 4
			break;
    7eea:	08 95       	ret
		case 'C':
			DDRC |= (1<<Pin);
    7eec:	27 b1       	in	r18, 0x07	; 7
    7eee:	81 e0       	ldi	r24, 0x01	; 1
    7ef0:	90 e0       	ldi	r25, 0x00	; 0
    7ef2:	02 c0       	rjmp	.+4      	; 0x7ef8 <_ZN6OutputC1Ehh+0x54>
    7ef4:	88 0f       	add	r24, r24
    7ef6:	99 1f       	adc	r25, r25
    7ef8:	4a 95       	dec	r20
    7efa:	e2 f7       	brpl	.-8      	; 0x7ef4 <_ZN6OutputC1Ehh+0x50>
    7efc:	82 2b       	or	r24, r18
    7efe:	87 b9       	out	0x07, r24	; 7
			break;
    7f00:	08 95       	ret
		case 'D':
			DDRD |= (1<<Pin);
    7f02:	2a b1       	in	r18, 0x0a	; 10
    7f04:	81 e0       	ldi	r24, 0x01	; 1
    7f06:	90 e0       	ldi	r25, 0x00	; 0
    7f08:	02 c0       	rjmp	.+4      	; 0x7f0e <_ZN6OutputC1Ehh+0x6a>
    7f0a:	88 0f       	add	r24, r24
    7f0c:	99 1f       	adc	r25, r25
    7f0e:	4a 95       	dec	r20
    7f10:	e2 f7       	brpl	.-8      	; 0x7f0a <_ZN6OutputC1Ehh+0x66>
    7f12:	82 2b       	or	r24, r18
    7f14:	8a b9       	out	0x0a, r24	; 10
    7f16:	08 95       	ret

00007f18 <_ZN6OutputD1Ev>:
			break;
	}
} //Output

// default destructor
Output::~Output()
    7f18:	08 95       	ret

00007f1a <_ZN6Output2onEv>:
{
} //~Output

void Output::on(){
    7f1a:	fc 01       	movw	r30, r24
	switch (Port)
    7f1c:	90 81       	ld	r25, Z
    7f1e:	92 34       	cpi	r25, 0x42	; 66
    7f20:	a9 f0       	breq	.+42     	; 0x7f4c <_ZN6Output2onEv+0x32>
    7f22:	18 f4       	brcc	.+6      	; 0x7f2a <_ZN6Output2onEv+0x10>
    7f24:	91 34       	cpi	r25, 0x41	; 65
    7f26:	31 f0       	breq	.+12     	; 0x7f34 <_ZN6Output2onEv+0x1a>
    7f28:	08 95       	ret
    7f2a:	93 34       	cpi	r25, 0x43	; 67
    7f2c:	d9 f0       	breq	.+54     	; 0x7f64 <_ZN6Output2onEv+0x4a>
    7f2e:	94 34       	cpi	r25, 0x44	; 68
    7f30:	29 f1       	breq	.+74     	; 0x7f7c <_ZN6Output2onEv+0x62>
    7f32:	08 95       	ret
	{
		case 'A':
			PORTA |= (1<<Pin);
    7f34:	22 b1       	in	r18, 0x02	; 2
    7f36:	81 e0       	ldi	r24, 0x01	; 1
    7f38:	90 e0       	ldi	r25, 0x00	; 0
    7f3a:	01 80       	ldd	r0, Z+1	; 0x01
    7f3c:	02 c0       	rjmp	.+4      	; 0x7f42 <_ZN6Output2onEv+0x28>
    7f3e:	88 0f       	add	r24, r24
    7f40:	99 1f       	adc	r25, r25
    7f42:	0a 94       	dec	r0
    7f44:	e2 f7       	brpl	.-8      	; 0x7f3e <_ZN6Output2onEv+0x24>
    7f46:	82 2b       	or	r24, r18
    7f48:	82 b9       	out	0x02, r24	; 2
			break;
    7f4a:	08 95       	ret
		case 'B':
			PORTB |= (1<<Pin);
    7f4c:	25 b1       	in	r18, 0x05	; 5
    7f4e:	81 e0       	ldi	r24, 0x01	; 1
    7f50:	90 e0       	ldi	r25, 0x00	; 0
    7f52:	01 80       	ldd	r0, Z+1	; 0x01
    7f54:	02 c0       	rjmp	.+4      	; 0x7f5a <_ZN6Output2onEv+0x40>
    7f56:	88 0f       	add	r24, r24
    7f58:	99 1f       	adc	r25, r25
    7f5a:	0a 94       	dec	r0
    7f5c:	e2 f7       	brpl	.-8      	; 0x7f56 <_ZN6Output2onEv+0x3c>
    7f5e:	82 2b       	or	r24, r18
    7f60:	85 b9       	out	0x05, r24	; 5
			break;
    7f62:	08 95       	ret
		case 'C':
			PORTC |= (1<<Pin);
    7f64:	28 b1       	in	r18, 0x08	; 8
    7f66:	81 e0       	ldi	r24, 0x01	; 1
    7f68:	90 e0       	ldi	r25, 0x00	; 0
    7f6a:	01 80       	ldd	r0, Z+1	; 0x01
    7f6c:	02 c0       	rjmp	.+4      	; 0x7f72 <_ZN6Output2onEv+0x58>
    7f6e:	88 0f       	add	r24, r24
    7f70:	99 1f       	adc	r25, r25
    7f72:	0a 94       	dec	r0
    7f74:	e2 f7       	brpl	.-8      	; 0x7f6e <_ZN6Output2onEv+0x54>
    7f76:	82 2b       	or	r24, r18
    7f78:	88 b9       	out	0x08, r24	; 8
			break;
    7f7a:	08 95       	ret
		case 'D':
			PORTD |= (1<<Pin);
    7f7c:	2b b1       	in	r18, 0x0b	; 11
    7f7e:	81 e0       	ldi	r24, 0x01	; 1
    7f80:	90 e0       	ldi	r25, 0x00	; 0
    7f82:	01 80       	ldd	r0, Z+1	; 0x01
    7f84:	02 c0       	rjmp	.+4      	; 0x7f8a <_ZN6Output2onEv+0x70>
    7f86:	88 0f       	add	r24, r24
    7f88:	99 1f       	adc	r25, r25
    7f8a:	0a 94       	dec	r0
    7f8c:	e2 f7       	brpl	.-8      	; 0x7f86 <_ZN6Output2onEv+0x6c>
    7f8e:	82 2b       	or	r24, r18
    7f90:	8b b9       	out	0x0b, r24	; 11
    7f92:	08 95       	ret

00007f94 <_ZN6Output4isonEv>:
		default:
			break;
	}
}

uint8_t Output::ison(){
    7f94:	fc 01       	movw	r30, r24
	uint8_t returnparam=0;
	switch (Port)
    7f96:	90 81       	ld	r25, Z
    7f98:	92 34       	cpi	r25, 0x42	; 66
    7f9a:	a1 f0       	breq	.+40     	; 0x7fc4 <_ZN6Output4isonEv+0x30>
    7f9c:	18 f4       	brcc	.+6      	; 0x7fa4 <_ZN6Output4isonEv+0x10>
    7f9e:	91 34       	cpi	r25, 0x41	; 65
    7fa0:	31 f0       	breq	.+12     	; 0x7fae <_ZN6Output4isonEv+0x1a>
    7fa2:	31 c0       	rjmp	.+98     	; 0x8006 <_ZN6Output4isonEv+0x72>
    7fa4:	93 34       	cpi	r25, 0x43	; 67
    7fa6:	c9 f0       	breq	.+50     	; 0x7fda <_ZN6Output4isonEv+0x46>
    7fa8:	94 34       	cpi	r25, 0x44	; 68
    7faa:	11 f1       	breq	.+68     	; 0x7ff0 <_ZN6Output4isonEv+0x5c>
    7fac:	2c c0       	rjmp	.+88     	; 0x8006 <_ZN6Output4isonEv+0x72>
	{
		case 'A':
			if ((PORTA&(1<<Pin)))
    7fae:	22 b1       	in	r18, 0x02	; 2
    7fb0:	30 e0       	ldi	r19, 0x00	; 0
    7fb2:	c9 01       	movw	r24, r18
    7fb4:	01 80       	ldd	r0, Z+1	; 0x01
    7fb6:	02 c0       	rjmp	.+4      	; 0x7fbc <_ZN6Output4isonEv+0x28>
    7fb8:	95 95       	asr	r25
    7fba:	87 95       	ror	r24
    7fbc:	0a 94       	dec	r0
    7fbe:	e2 f7       	brpl	.-8      	; 0x7fb8 <_ZN6Output4isonEv+0x24>
    7fc0:	81 70       	andi	r24, 0x01	; 1
    7fc2:	08 95       	ret
			{
				returnparam = 1;
			}
			break;
		case 'B':
			if ((PORTB&(1<<Pin)))
    7fc4:	25 b1       	in	r18, 0x05	; 5
    7fc6:	30 e0       	ldi	r19, 0x00	; 0
    7fc8:	c9 01       	movw	r24, r18
    7fca:	01 80       	ldd	r0, Z+1	; 0x01
    7fcc:	02 c0       	rjmp	.+4      	; 0x7fd2 <_ZN6Output4isonEv+0x3e>
    7fce:	95 95       	asr	r25
    7fd0:	87 95       	ror	r24
    7fd2:	0a 94       	dec	r0
    7fd4:	e2 f7       	brpl	.-8      	; 0x7fce <_ZN6Output4isonEv+0x3a>
    7fd6:	81 70       	andi	r24, 0x01	; 1
    7fd8:	08 95       	ret
			{
				returnparam = 1;
			}
			break;
		case 'C':
			if ((PORTC&(1<<Pin)))
    7fda:	28 b1       	in	r18, 0x08	; 8
    7fdc:	30 e0       	ldi	r19, 0x00	; 0
    7fde:	c9 01       	movw	r24, r18
    7fe0:	01 80       	ldd	r0, Z+1	; 0x01
    7fe2:	02 c0       	rjmp	.+4      	; 0x7fe8 <_ZN6Output4isonEv+0x54>
    7fe4:	95 95       	asr	r25
    7fe6:	87 95       	ror	r24
    7fe8:	0a 94       	dec	r0
    7fea:	e2 f7       	brpl	.-8      	; 0x7fe4 <_ZN6Output4isonEv+0x50>
    7fec:	81 70       	andi	r24, 0x01	; 1
    7fee:	08 95       	ret
			{
				returnparam = 1;
			}
			break;
		case 'D':
			if ((PORTD&(1<<Pin)))
    7ff0:	2b b1       	in	r18, 0x0b	; 11
    7ff2:	30 e0       	ldi	r19, 0x00	; 0
    7ff4:	c9 01       	movw	r24, r18
    7ff6:	01 80       	ldd	r0, Z+1	; 0x01
    7ff8:	02 c0       	rjmp	.+4      	; 0x7ffe <_ZN6Output4isonEv+0x6a>
    7ffa:	95 95       	asr	r25
    7ffc:	87 95       	ror	r24
    7ffe:	0a 94       	dec	r0
    8000:	e2 f7       	brpl	.-8      	; 0x7ffa <_ZN6Output4isonEv+0x66>
    8002:	81 70       	andi	r24, 0x01	; 1
    8004:	08 95       	ret
			{
				returnparam = 1;
			}
			break;
		default:
		returnparam = 2;
    8006:	82 e0       	ldi	r24, 0x02	; 2
			break;
	}
	return returnparam;
}
    8008:	08 95       	ret

0000800a <_ZN6Output3offEv>:

void Output::off(){
    800a:	fc 01       	movw	r30, r24
	switch (Port)
    800c:	90 81       	ld	r25, Z
    800e:	92 34       	cpi	r25, 0x42	; 66
    8010:	b1 f0       	breq	.+44     	; 0x803e <_ZN6Output3offEv+0x34>
    8012:	18 f4       	brcc	.+6      	; 0x801a <_ZN6Output3offEv+0x10>
    8014:	91 34       	cpi	r25, 0x41	; 65
    8016:	31 f0       	breq	.+12     	; 0x8024 <_ZN6Output3offEv+0x1a>
    8018:	08 95       	ret
    801a:	93 34       	cpi	r25, 0x43	; 67
    801c:	e9 f0       	breq	.+58     	; 0x8058 <_ZN6Output3offEv+0x4e>
    801e:	94 34       	cpi	r25, 0x44	; 68
    8020:	41 f1       	breq	.+80     	; 0x8072 <_ZN6Output3offEv+0x68>
    8022:	08 95       	ret
	{
		case 'A':
			PORTA &= ~(1<<Pin);
    8024:	22 b1       	in	r18, 0x02	; 2
    8026:	81 e0       	ldi	r24, 0x01	; 1
    8028:	90 e0       	ldi	r25, 0x00	; 0
    802a:	01 80       	ldd	r0, Z+1	; 0x01
    802c:	02 c0       	rjmp	.+4      	; 0x8032 <_ZN6Output3offEv+0x28>
    802e:	88 0f       	add	r24, r24
    8030:	99 1f       	adc	r25, r25
    8032:	0a 94       	dec	r0
    8034:	e2 f7       	brpl	.-8      	; 0x802e <_ZN6Output3offEv+0x24>
    8036:	80 95       	com	r24
    8038:	82 23       	and	r24, r18
    803a:	82 b9       	out	0x02, r24	; 2
			break;
    803c:	08 95       	ret
		case 'B':
			PORTB &= ~(1<<Pin);
    803e:	25 b1       	in	r18, 0x05	; 5
    8040:	81 e0       	ldi	r24, 0x01	; 1
    8042:	90 e0       	ldi	r25, 0x00	; 0
    8044:	01 80       	ldd	r0, Z+1	; 0x01
    8046:	02 c0       	rjmp	.+4      	; 0x804c <_ZN6Output3offEv+0x42>
    8048:	88 0f       	add	r24, r24
    804a:	99 1f       	adc	r25, r25
    804c:	0a 94       	dec	r0
    804e:	e2 f7       	brpl	.-8      	; 0x8048 <_ZN6Output3offEv+0x3e>
    8050:	80 95       	com	r24
    8052:	82 23       	and	r24, r18
    8054:	85 b9       	out	0x05, r24	; 5
			break;
    8056:	08 95       	ret
		case 'C':
			PORTC &= ~(1<<Pin);
    8058:	28 b1       	in	r18, 0x08	; 8
    805a:	81 e0       	ldi	r24, 0x01	; 1
    805c:	90 e0       	ldi	r25, 0x00	; 0
    805e:	01 80       	ldd	r0, Z+1	; 0x01
    8060:	02 c0       	rjmp	.+4      	; 0x8066 <_ZN6Output3offEv+0x5c>
    8062:	88 0f       	add	r24, r24
    8064:	99 1f       	adc	r25, r25
    8066:	0a 94       	dec	r0
    8068:	e2 f7       	brpl	.-8      	; 0x8062 <_ZN6Output3offEv+0x58>
    806a:	80 95       	com	r24
    806c:	82 23       	and	r24, r18
    806e:	88 b9       	out	0x08, r24	; 8
			break;
    8070:	08 95       	ret
		case 'D':
			PORTD &= ~(1<<Pin);
    8072:	2b b1       	in	r18, 0x0b	; 11
    8074:	81 e0       	ldi	r24, 0x01	; 1
    8076:	90 e0       	ldi	r25, 0x00	; 0
    8078:	01 80       	ldd	r0, Z+1	; 0x01
    807a:	02 c0       	rjmp	.+4      	; 0x8080 <_ZN6Output3offEv+0x76>
    807c:	88 0f       	add	r24, r24
    807e:	99 1f       	adc	r25, r25
    8080:	0a 94       	dec	r0
    8082:	e2 f7       	brpl	.-8      	; 0x807c <_ZN6Output3offEv+0x72>
    8084:	80 95       	com	r24
    8086:	82 23       	and	r24, r18
    8088:	8b b9       	out	0x0b, r24	; 11
    808a:	08 95       	ret

0000808c <_ZN3RTCD1Ev>:
	Tag=7;
	Monat=9;
	Jahr=15;
	ausgabedatumneu();
	ausgabezeitneu();
}
    808c:	08 95       	ret

0000808e <_ZN3RTC6WeckerEv>:
    808e:	fc 01       	movw	r30, r24
    8090:	80 8d       	ldd	r24, Z+24	; 0x18
    8092:	83 ff       	sbrs	r24, 3
    8094:	0c c0       	rjmp	.+24     	; 0x80ae <_ZN3RTC6WeckerEv+0x20>
    8096:	84 fd       	sbrc	r24, 4
    8098:	0a c0       	rjmp	.+20     	; 0x80ae <_ZN3RTC6WeckerEv+0x20>
    809a:	22 8d       	ldd	r18, Z+26	; 0x1a
    809c:	90 89       	ldd	r25, Z+16	; 0x10
    809e:	29 13       	cpse	r18, r25
    80a0:	06 c0       	rjmp	.+12     	; 0x80ae <_ZN3RTC6WeckerEv+0x20>
    80a2:	21 8d       	ldd	r18, Z+25	; 0x19
    80a4:	91 89       	ldd	r25, Z+17	; 0x11
    80a6:	29 13       	cpse	r18, r25
    80a8:	02 c0       	rjmp	.+4      	; 0x80ae <_ZN3RTC6WeckerEv+0x20>
    80aa:	80 61       	ori	r24, 0x10	; 16
    80ac:	80 8f       	std	Z+24, r24	; 0x18
    80ae:	08 95       	ret

000080b0 <_ZN3RTC14ausgabezeitneuEv>:
    80b0:	fc 01       	movw	r30, r24
    80b2:	20 89       	ldd	r18, Z+16	; 0x10
    80b4:	9d ec       	ldi	r25, 0xCD	; 205
    80b6:	29 9f       	mul	r18, r25
    80b8:	81 2d       	mov	r24, r1
    80ba:	11 24       	eor	r1, r1
    80bc:	86 95       	lsr	r24
    80be:	86 95       	lsr	r24
    80c0:	86 95       	lsr	r24
    80c2:	30 e3       	ldi	r19, 0x30	; 48
    80c4:	38 0f       	add	r19, r24
    80c6:	30 83       	st	Z, r19
    80c8:	88 0f       	add	r24, r24
    80ca:	38 2f       	mov	r19, r24
    80cc:	33 0f       	add	r19, r19
    80ce:	33 0f       	add	r19, r19
    80d0:	83 0f       	add	r24, r19
    80d2:	28 1b       	sub	r18, r24
    80d4:	20 5d       	subi	r18, 0xD0	; 208
    80d6:	21 83       	std	Z+1, r18	; 0x01
    80d8:	21 89       	ldd	r18, Z+17	; 0x11
    80da:	29 9f       	mul	r18, r25
    80dc:	81 2d       	mov	r24, r1
    80de:	11 24       	eor	r1, r1
    80e0:	86 95       	lsr	r24
    80e2:	86 95       	lsr	r24
    80e4:	86 95       	lsr	r24
    80e6:	30 e3       	ldi	r19, 0x30	; 48
    80e8:	38 0f       	add	r19, r24
    80ea:	33 83       	std	Z+3, r19	; 0x03
    80ec:	88 0f       	add	r24, r24
    80ee:	38 2f       	mov	r19, r24
    80f0:	33 0f       	add	r19, r19
    80f2:	33 0f       	add	r19, r19
    80f4:	83 0f       	add	r24, r19
    80f6:	28 1b       	sub	r18, r24
    80f8:	20 5d       	subi	r18, 0xD0	; 208
    80fa:	24 83       	std	Z+4, r18	; 0x04
    80fc:	82 89       	ldd	r24, Z+18	; 0x12
    80fe:	89 9f       	mul	r24, r25
    8100:	91 2d       	mov	r25, r1
    8102:	11 24       	eor	r1, r1
    8104:	96 95       	lsr	r25
    8106:	96 95       	lsr	r25
    8108:	96 95       	lsr	r25
    810a:	20 e3       	ldi	r18, 0x30	; 48
    810c:	29 0f       	add	r18, r25
    810e:	26 83       	std	Z+6, r18	; 0x06
    8110:	99 0f       	add	r25, r25
    8112:	29 2f       	mov	r18, r25
    8114:	22 0f       	add	r18, r18
    8116:	22 0f       	add	r18, r18
    8118:	92 0f       	add	r25, r18
    811a:	89 1b       	sub	r24, r25
    811c:	80 5d       	subi	r24, 0xD0	; 208
    811e:	87 83       	std	Z+7, r24	; 0x07
    8120:	08 95       	ret

00008122 <_ZN3RTC15ausgabedatumneuEv>:
    8122:	fc 01       	movw	r30, r24
    8124:	24 89       	ldd	r18, Z+20	; 0x14
    8126:	9d ec       	ldi	r25, 0xCD	; 205
    8128:	29 9f       	mul	r18, r25
    812a:	81 2d       	mov	r24, r1
    812c:	11 24       	eor	r1, r1
    812e:	86 95       	lsr	r24
    8130:	86 95       	lsr	r24
    8132:	86 95       	lsr	r24
    8134:	30 e3       	ldi	r19, 0x30	; 48
    8136:	38 0f       	add	r19, r24
    8138:	30 87       	std	Z+8, r19	; 0x08
    813a:	88 0f       	add	r24, r24
    813c:	38 2f       	mov	r19, r24
    813e:	33 0f       	add	r19, r19
    8140:	33 0f       	add	r19, r19
    8142:	83 0f       	add	r24, r19
    8144:	28 1b       	sub	r18, r24
    8146:	20 5d       	subi	r18, 0xD0	; 208
    8148:	21 87       	std	Z+9, r18	; 0x09
    814a:	26 89       	ldd	r18, Z+22	; 0x16
    814c:	29 9f       	mul	r18, r25
    814e:	81 2d       	mov	r24, r1
    8150:	11 24       	eor	r1, r1
    8152:	86 95       	lsr	r24
    8154:	86 95       	lsr	r24
    8156:	86 95       	lsr	r24
    8158:	30 e3       	ldi	r19, 0x30	; 48
    815a:	38 0f       	add	r19, r24
    815c:	33 87       	std	Z+11, r19	; 0x0b
    815e:	88 0f       	add	r24, r24
    8160:	38 2f       	mov	r19, r24
    8162:	33 0f       	add	r19, r19
    8164:	33 0f       	add	r19, r19
    8166:	83 0f       	add	r24, r19
    8168:	28 1b       	sub	r18, r24
    816a:	20 5d       	subi	r18, 0xD0	; 208
    816c:	24 87       	std	Z+12, r18	; 0x0c
    816e:	87 89       	ldd	r24, Z+23	; 0x17
    8170:	89 9f       	mul	r24, r25
    8172:	91 2d       	mov	r25, r1
    8174:	11 24       	eor	r1, r1
    8176:	96 95       	lsr	r25
    8178:	96 95       	lsr	r25
    817a:	96 95       	lsr	r25
    817c:	20 e3       	ldi	r18, 0x30	; 48
    817e:	29 0f       	add	r18, r25
    8180:	26 87       	std	Z+14, r18	; 0x0e
    8182:	99 0f       	add	r25, r25
    8184:	29 2f       	mov	r18, r25
    8186:	22 0f       	add	r18, r18
    8188:	22 0f       	add	r18, r18
    818a:	92 0f       	add	r25, r18
    818c:	89 1b       	sub	r24, r25
    818e:	80 5d       	subi	r24, 0xD0	; 208
    8190:	87 87       	std	Z+15, r24	; 0x0f
    8192:	08 95       	ret

00008194 <_ZN3RTCC1Ev>:
    8194:	cf 93       	push	r28
    8196:	df 93       	push	r29
    8198:	ec 01       	movw	r28, r24
    819a:	1a 8a       	std	Y+18, r1	; 0x12
    819c:	1b 8a       	std	Y+19, r1	; 0x13
    819e:	19 8a       	std	Y+17, r1	; 0x11
    81a0:	18 8a       	std	Y+16, r1	; 0x10
    81a2:	1c 8a       	std	Y+20, r1	; 0x14
    81a4:	1e 8a       	std	Y+22, r1	; 0x16
    81a6:	1f 8a       	std	Y+23, r1	; 0x17
    81a8:	1d 8a       	std	Y+21, r1	; 0x15
    81aa:	88 e2       	ldi	r24, 0x28	; 40
    81ac:	89 8f       	std	Y+25, r24	; 0x19
    81ae:	8a e0       	ldi	r24, 0x0A	; 10
    81b0:	8a 8f       	std	Y+26, r24	; 0x1a
    81b2:	1c 8e       	std	Y+28, r1	; 0x1c
    81b4:	1b 8e       	std	Y+27, r1	; 0x1b
    81b6:	1e 8e       	std	Y+30, r1	; 0x1e
    81b8:	1d 8e       	std	Y+29, r1	; 0x1d
    81ba:	fe 01       	movw	r30, r28
    81bc:	ce 01       	movw	r24, r28
    81be:	08 96       	adiw	r24, 0x08	; 8
    81c0:	dc 01       	movw	r26, r24
    81c2:	11 92       	st	Z+, r1
    81c4:	1d 92       	st	X+, r1
    81c6:	e8 17       	cp	r30, r24
    81c8:	f9 07       	cpc	r31, r25
    81ca:	d9 f7       	brne	.-10     	; 0x81c2 <_ZN3RTCC1Ev+0x2e>
    81cc:	8a e3       	ldi	r24, 0x3A	; 58
    81ce:	8a 83       	std	Y+2, r24	; 0x02
    81d0:	8d 83       	std	Y+5, r24	; 0x05
    81d2:	8e e2       	ldi	r24, 0x2E	; 46
    81d4:	8a 87       	std	Y+10, r24	; 0x0a
    81d6:	8d 87       	std	Y+13, r24	; 0x0d
    81d8:	ce 01       	movw	r24, r28
    81da:	6a df       	rcall	.-300    	; 0x80b0 <_ZN3RTC14ausgabezeitneuEv>
    81dc:	ce 01       	movw	r24, r28
    81de:	a1 df       	rcall	.-190    	; 0x8122 <_ZN3RTC15ausgabedatumneuEv>
    81e0:	df 91       	pop	r29
    81e2:	cf 91       	pop	r28
    81e4:	08 95       	ret

000081e6 <_ZN3RTC8kalenderEv>:
    81e6:	fc 01       	movw	r30, r24
    81e8:	26 89       	ldd	r18, Z+22	; 0x16
    81ea:	32 2f       	mov	r19, r18
    81ec:	3d 7f       	andi	r19, 0xFD	; 253
    81ee:	34 30       	cpi	r19, 0x04	; 4
    81f0:	11 f0       	breq	.+4      	; 0x81f6 <_ZN3RTC8kalenderEv+0x10>
    81f2:	39 30       	cpi	r19, 0x09	; 9
    81f4:	91 f4       	brne	.+36     	; 0x821a <_ZN3RTC8kalenderEv+0x34>
    81f6:	fc 01       	movw	r30, r24
    81f8:	34 89       	ldd	r19, Z+20	; 0x14
    81fa:	3f 31       	cpi	r19, 0x1F	; 31
    81fc:	b0 f1       	brcs	.+108    	; 0x826a <_ZN3RTC8kalenderEv+0x84>
    81fe:	31 e0       	ldi	r19, 0x01	; 1
    8200:	34 8b       	std	Z+20, r19	; 0x14
    8202:	2f 5f       	subi	r18, 0xFF	; 255
    8204:	2d 30       	cpi	r18, 0x0D	; 13
    8206:	10 f4       	brcc	.+4      	; 0x820c <_ZN3RTC8kalenderEv+0x26>
    8208:	26 8b       	std	Z+22, r18	; 0x16
    820a:	2f c0       	rjmp	.+94     	; 0x826a <_ZN3RTC8kalenderEv+0x84>
    820c:	21 e0       	ldi	r18, 0x01	; 1
    820e:	fc 01       	movw	r30, r24
    8210:	26 8b       	std	Z+22, r18	; 0x16
    8212:	27 89       	ldd	r18, Z+23	; 0x17
    8214:	2f 5f       	subi	r18, 0xFF	; 255
    8216:	27 8b       	std	Z+23, r18	; 0x17
    8218:	28 c0       	rjmp	.+80     	; 0x826a <_ZN3RTC8kalenderEv+0x84>
    821a:	22 30       	cpi	r18, 0x02	; 2
    821c:	a9 f4       	brne	.+42     	; 0x8248 <_ZN3RTC8kalenderEv+0x62>
    821e:	fc 01       	movw	r30, r24
    8220:	27 89       	ldd	r18, Z+23	; 0x17
    8222:	23 70       	andi	r18, 0x03	; 3
    8224:	41 f4       	brne	.+16     	; 0x8236 <_ZN3RTC8kalenderEv+0x50>
    8226:	24 89       	ldd	r18, Z+20	; 0x14
    8228:	2e 31       	cpi	r18, 0x1E	; 30
    822a:	f8 f0       	brcs	.+62     	; 0x826a <_ZN3RTC8kalenderEv+0x84>
    822c:	21 e0       	ldi	r18, 0x01	; 1
    822e:	24 8b       	std	Z+20, r18	; 0x14
    8230:	23 e0       	ldi	r18, 0x03	; 3
    8232:	26 8b       	std	Z+22, r18	; 0x16
    8234:	1a c0       	rjmp	.+52     	; 0x826a <_ZN3RTC8kalenderEv+0x84>
    8236:	fc 01       	movw	r30, r24
    8238:	24 89       	ldd	r18, Z+20	; 0x14
    823a:	2d 31       	cpi	r18, 0x1D	; 29
    823c:	b0 f0       	brcs	.+44     	; 0x826a <_ZN3RTC8kalenderEv+0x84>
    823e:	21 e0       	ldi	r18, 0x01	; 1
    8240:	24 8b       	std	Z+20, r18	; 0x14
    8242:	23 e0       	ldi	r18, 0x03	; 3
    8244:	26 8b       	std	Z+22, r18	; 0x16
    8246:	11 c0       	rjmp	.+34     	; 0x826a <_ZN3RTC8kalenderEv+0x84>
    8248:	fc 01       	movw	r30, r24
    824a:	34 89       	ldd	r19, Z+20	; 0x14
    824c:	30 32       	cpi	r19, 0x20	; 32
    824e:	68 f0       	brcs	.+26     	; 0x826a <_ZN3RTC8kalenderEv+0x84>
    8250:	31 e0       	ldi	r19, 0x01	; 1
    8252:	34 8b       	std	Z+20, r19	; 0x14
    8254:	2f 5f       	subi	r18, 0xFF	; 255
    8256:	2d 30       	cpi	r18, 0x0D	; 13
    8258:	10 f4       	brcc	.+4      	; 0x825e <_ZN3RTC8kalenderEv+0x78>
    825a:	26 8b       	std	Z+22, r18	; 0x16
    825c:	06 c0       	rjmp	.+12     	; 0x826a <_ZN3RTC8kalenderEv+0x84>
    825e:	21 e0       	ldi	r18, 0x01	; 1
    8260:	fc 01       	movw	r30, r24
    8262:	26 8b       	std	Z+22, r18	; 0x16
    8264:	27 89       	ldd	r18, Z+23	; 0x17
    8266:	2f 5f       	subi	r18, 0xFF	; 255
    8268:	27 8b       	std	Z+23, r18	; 0x17
    826a:	5b cf       	rjmp	.-330    	; 0x8122 <_ZN3RTC15ausgabedatumneuEv>
    826c:	08 95       	ret

0000826e <_ZN3RTC4zeitEv>:
    826e:	cf 93       	push	r28
    8270:	df 93       	push	r29
    8272:	ec 01       	movw	r28, r24
    8274:	8a 89       	ldd	r24, Y+18	; 0x12
    8276:	8c 53       	subi	r24, 0x3C	; 60
    8278:	8d 38       	cpi	r24, 0x8D	; 141
    827a:	c0 f4       	brcc	.+48     	; 0x82ac <_ZN3RTC4zeitEv+0x3e>
    827c:	1a 8a       	std	Y+18, r1	; 0x12
    827e:	89 89       	ldd	r24, Y+17	; 0x11
    8280:	8f 5f       	subi	r24, 0xFF	; 255
    8282:	89 8b       	std	Y+17, r24	; 0x11
    8284:	98 8d       	ldd	r25, Y+24	; 0x18
    8286:	94 60       	ori	r25, 0x04	; 4
    8288:	98 8f       	std	Y+24, r25	; 0x18
    828a:	8c 33       	cpi	r24, 0x3C	; 60
    828c:	68 f0       	brcs	.+26     	; 0x82a8 <_ZN3RTC4zeitEv+0x3a>
    828e:	19 8a       	std	Y+17, r1	; 0x11
    8290:	88 89       	ldd	r24, Y+16	; 0x10
    8292:	8f 5f       	subi	r24, 0xFF	; 255
    8294:	88 31       	cpi	r24, 0x18	; 24
    8296:	10 f4       	brcc	.+4      	; 0x829c <_ZN3RTC4zeitEv+0x2e>
    8298:	88 8b       	std	Y+16, r24	; 0x10
    829a:	06 c0       	rjmp	.+12     	; 0x82a8 <_ZN3RTC4zeitEv+0x3a>
    829c:	18 8a       	std	Y+16, r1	; 0x10
    829e:	8c 89       	ldd	r24, Y+20	; 0x14
    82a0:	8f 5f       	subi	r24, 0xFF	; 255
    82a2:	8c 8b       	std	Y+20, r24	; 0x14
    82a4:	ce 01       	movw	r24, r28
    82a6:	9f df       	rcall	.-194    	; 0x81e6 <_ZN3RTC8kalenderEv>
    82a8:	ce 01       	movw	r24, r28
    82aa:	f1 de       	rcall	.-542    	; 0x808e <_ZN3RTC6WeckerEv>
    82ac:	ce 01       	movw	r24, r28
    82ae:	00 df       	rcall	.-512    	; 0x80b0 <_ZN3RTC14ausgabezeitneuEv>
    82b0:	88 8d       	ldd	r24, Y+24	; 0x18
    82b2:	85 ff       	sbrs	r24, 5
    82b4:	0b c0       	rjmp	.+22     	; 0x82cc <_ZN3RTC4zeitEv+0x5e>
    82b6:	2b 8d       	ldd	r18, Y+27	; 0x1b
    82b8:	3c 8d       	ldd	r19, Y+28	; 0x1c
    82ba:	21 50       	subi	r18, 0x01	; 1
    82bc:	31 09       	sbc	r19, r1
    82be:	3c 8f       	std	Y+28, r19	; 0x1c
    82c0:	2b 8f       	std	Y+27, r18	; 0x1b
    82c2:	23 2b       	or	r18, r19
    82c4:	19 f4       	brne	.+6      	; 0x82cc <_ZN3RTC4zeitEv+0x5e>
    82c6:	8f 7d       	andi	r24, 0xDF	; 223
    82c8:	81 60       	ori	r24, 0x01	; 1
    82ca:	88 8f       	std	Y+24, r24	; 0x18
    82cc:	88 8d       	ldd	r24, Y+24	; 0x18
    82ce:	86 ff       	sbrs	r24, 6
    82d0:	05 c0       	rjmp	.+10     	; 0x82dc <_ZN3RTC4zeitEv+0x6e>
    82d2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    82d4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    82d6:	01 96       	adiw	r24, 0x01	; 1
    82d8:	9e 8f       	std	Y+30, r25	; 0x1e
    82da:	8d 8f       	std	Y+29, r24	; 0x1d
    82dc:	80 e0       	ldi	r24, 0x00	; 0
    82de:	df 91       	pop	r29
    82e0:	cf 91       	pop	r28
    82e2:	08 95       	ret

000082e4 <_ZN3RTC8RTCstartEv>:

void RTC::RTCstart(){
    82e4:	fc 01       	movw	r30, r24
	//Einstellungen des Ausgabebuffers
	msg_uhr[0]='0';
    82e6:	80 e3       	ldi	r24, 0x30	; 48
    82e8:	80 83       	st	Z, r24
	msg_uhr[1]='0';
    82ea:	81 83       	std	Z+1, r24	; 0x01
	msg_uhr[2]=':';
    82ec:	9a e3       	ldi	r25, 0x3A	; 58
    82ee:	92 83       	std	Z+2, r25	; 0x02
	msg_uhr[3]='0';
    82f0:	83 83       	std	Z+3, r24	; 0x03
	msg_uhr[4]='0';
    82f2:	84 83       	std	Z+4, r24	; 0x04
	msg_uhr[5]=':';
    82f4:	95 83       	std	Z+5, r25	; 0x05
	msg_uhr[6]='0';
    82f6:	86 83       	std	Z+6, r24	; 0x06
	msg_uhr[7]='0';
    82f8:	87 83       	std	Z+7, r24	; 0x07
	interupts = 0;
    82fa:	10 8e       	std	Z+24, r1	; 0x18
	//Timer2 als 1ms Timer fuer die RTC
	//asynchron mit 32.768 kHz 
	TCNT2 = TIMER2RTCTIME;
    82fc:	10 92 b2 00 	sts	0x00B2, r1
	ASSR |= (1<<AS2);
    8300:	e6 eb       	ldi	r30, 0xB6	; 182
    8302:	f0 e0       	ldi	r31, 0x00	; 0
    8304:	80 81       	ld	r24, Z
    8306:	80 62       	ori	r24, 0x20	; 32
    8308:	80 83       	st	Z, r24
	TIMSK2 = (1<<TOIE2);
    830a:	81 e0       	ldi	r24, 0x01	; 1
    830c:	80 93 70 00 	sts	0x0070, r24
	TCCR2B = (1<<CS22) | (1<<CS20);		//Vorteiler 256
    8310:	85 e0       	ldi	r24, 0x05	; 5
    8312:	80 93 b1 00 	sts	0x00B1, r24
    8316:	08 95       	ret

00008318 <_ZN3RTC7RTCstopEv>:
}

void RTC::RTCstop(){
	TCCR2B &= ~((1<<CS22) | (1<<CS21));
    8318:	e1 eb       	ldi	r30, 0xB1	; 177
    831a:	f0 e0       	ldi	r31, 0x00	; 0
    831c:	80 81       	ld	r24, Z
    831e:	89 7f       	andi	r24, 0xF9	; 249
    8320:	80 83       	st	Z, r24
    8322:	08 95       	ret

00008324 <__subsf3>:
    8324:	50 58       	subi	r21, 0x80	; 128

00008326 <__addsf3>:
    8326:	bb 27       	eor	r27, r27
    8328:	aa 27       	eor	r26, r26
    832a:	0e d0       	rcall	.+28     	; 0x8348 <__addsf3x>
    832c:	0b c2       	rjmp	.+1046   	; 0x8744 <__fp_round>
    832e:	d4 d1       	rcall	.+936    	; 0x86d8 <__fp_pscA>
    8330:	30 f0       	brcs	.+12     	; 0x833e <__addsf3+0x18>
    8332:	d9 d1       	rcall	.+946    	; 0x86e6 <__fp_pscB>
    8334:	20 f0       	brcs	.+8      	; 0x833e <__addsf3+0x18>
    8336:	31 f4       	brne	.+12     	; 0x8344 <__addsf3+0x1e>
    8338:	9f 3f       	cpi	r25, 0xFF	; 255
    833a:	11 f4       	brne	.+4      	; 0x8340 <__addsf3+0x1a>
    833c:	1e f4       	brtc	.+6      	; 0x8344 <__addsf3+0x1e>
    833e:	94 c1       	rjmp	.+808    	; 0x8668 <__fp_nan>
    8340:	0e f4       	brtc	.+2      	; 0x8344 <__addsf3+0x1e>
    8342:	e0 95       	com	r30
    8344:	e7 fb       	bst	r30, 7
    8346:	8a c1       	rjmp	.+788    	; 0x865c <__fp_inf>

00008348 <__addsf3x>:
    8348:	e9 2f       	mov	r30, r25
    834a:	1e d2       	rcall	.+1084   	; 0x8788 <__fp_split3>
    834c:	80 f3       	brcs	.-32     	; 0x832e <__addsf3+0x8>
    834e:	ba 17       	cp	r27, r26
    8350:	62 07       	cpc	r22, r18
    8352:	73 07       	cpc	r23, r19
    8354:	84 07       	cpc	r24, r20
    8356:	95 07       	cpc	r25, r21
    8358:	18 f0       	brcs	.+6      	; 0x8360 <__addsf3x+0x18>
    835a:	71 f4       	brne	.+28     	; 0x8378 <__addsf3x+0x30>
    835c:	9e f5       	brtc	.+102    	; 0x83c4 <__addsf3x+0x7c>
    835e:	36 c2       	rjmp	.+1132   	; 0x87cc <__fp_zero>
    8360:	0e f4       	brtc	.+2      	; 0x8364 <__addsf3x+0x1c>
    8362:	e0 95       	com	r30
    8364:	0b 2e       	mov	r0, r27
    8366:	ba 2f       	mov	r27, r26
    8368:	a0 2d       	mov	r26, r0
    836a:	0b 01       	movw	r0, r22
    836c:	b9 01       	movw	r22, r18
    836e:	90 01       	movw	r18, r0
    8370:	0c 01       	movw	r0, r24
    8372:	ca 01       	movw	r24, r20
    8374:	a0 01       	movw	r20, r0
    8376:	11 24       	eor	r1, r1
    8378:	ff 27       	eor	r31, r31
    837a:	59 1b       	sub	r21, r25
    837c:	99 f0       	breq	.+38     	; 0x83a4 <__addsf3x+0x5c>
    837e:	59 3f       	cpi	r21, 0xF9	; 249
    8380:	50 f4       	brcc	.+20     	; 0x8396 <__addsf3x+0x4e>
    8382:	50 3e       	cpi	r21, 0xE0	; 224
    8384:	68 f1       	brcs	.+90     	; 0x83e0 <__addsf3x+0x98>
    8386:	1a 16       	cp	r1, r26
    8388:	f0 40       	sbci	r31, 0x00	; 0
    838a:	a2 2f       	mov	r26, r18
    838c:	23 2f       	mov	r18, r19
    838e:	34 2f       	mov	r19, r20
    8390:	44 27       	eor	r20, r20
    8392:	58 5f       	subi	r21, 0xF8	; 248
    8394:	f3 cf       	rjmp	.-26     	; 0x837c <__addsf3x+0x34>
    8396:	46 95       	lsr	r20
    8398:	37 95       	ror	r19
    839a:	27 95       	ror	r18
    839c:	a7 95       	ror	r26
    839e:	f0 40       	sbci	r31, 0x00	; 0
    83a0:	53 95       	inc	r21
    83a2:	c9 f7       	brne	.-14     	; 0x8396 <__addsf3x+0x4e>
    83a4:	7e f4       	brtc	.+30     	; 0x83c4 <__addsf3x+0x7c>
    83a6:	1f 16       	cp	r1, r31
    83a8:	ba 0b       	sbc	r27, r26
    83aa:	62 0b       	sbc	r22, r18
    83ac:	73 0b       	sbc	r23, r19
    83ae:	84 0b       	sbc	r24, r20
    83b0:	ba f0       	brmi	.+46     	; 0x83e0 <__addsf3x+0x98>
    83b2:	91 50       	subi	r25, 0x01	; 1
    83b4:	a1 f0       	breq	.+40     	; 0x83de <__addsf3x+0x96>
    83b6:	ff 0f       	add	r31, r31
    83b8:	bb 1f       	adc	r27, r27
    83ba:	66 1f       	adc	r22, r22
    83bc:	77 1f       	adc	r23, r23
    83be:	88 1f       	adc	r24, r24
    83c0:	c2 f7       	brpl	.-16     	; 0x83b2 <__addsf3x+0x6a>
    83c2:	0e c0       	rjmp	.+28     	; 0x83e0 <__addsf3x+0x98>
    83c4:	ba 0f       	add	r27, r26
    83c6:	62 1f       	adc	r22, r18
    83c8:	73 1f       	adc	r23, r19
    83ca:	84 1f       	adc	r24, r20
    83cc:	48 f4       	brcc	.+18     	; 0x83e0 <__addsf3x+0x98>
    83ce:	87 95       	ror	r24
    83d0:	77 95       	ror	r23
    83d2:	67 95       	ror	r22
    83d4:	b7 95       	ror	r27
    83d6:	f7 95       	ror	r31
    83d8:	9e 3f       	cpi	r25, 0xFE	; 254
    83da:	08 f0       	brcs	.+2      	; 0x83de <__addsf3x+0x96>
    83dc:	b3 cf       	rjmp	.-154    	; 0x8344 <__addsf3+0x1e>
    83de:	93 95       	inc	r25
    83e0:	88 0f       	add	r24, r24
    83e2:	08 f0       	brcs	.+2      	; 0x83e6 <__addsf3x+0x9e>
    83e4:	99 27       	eor	r25, r25
    83e6:	ee 0f       	add	r30, r30
    83e8:	97 95       	ror	r25
    83ea:	87 95       	ror	r24
    83ec:	08 95       	ret

000083ee <cos>:
    83ee:	83 d1       	rcall	.+774    	; 0x86f6 <__fp_rempio2>
    83f0:	e3 95       	inc	r30
    83f2:	b9 c1       	rjmp	.+882    	; 0x8766 <__fp_sinus>

000083f4 <__divsf3>:
    83f4:	0c d0       	rcall	.+24     	; 0x840e <__divsf3x>
    83f6:	a6 c1       	rjmp	.+844    	; 0x8744 <__fp_round>
    83f8:	76 d1       	rcall	.+748    	; 0x86e6 <__fp_pscB>
    83fa:	40 f0       	brcs	.+16     	; 0x840c <__divsf3+0x18>
    83fc:	6d d1       	rcall	.+730    	; 0x86d8 <__fp_pscA>
    83fe:	30 f0       	brcs	.+12     	; 0x840c <__divsf3+0x18>
    8400:	21 f4       	brne	.+8      	; 0x840a <__divsf3+0x16>
    8402:	5f 3f       	cpi	r21, 0xFF	; 255
    8404:	19 f0       	breq	.+6      	; 0x840c <__divsf3+0x18>
    8406:	2a c1       	rjmp	.+596    	; 0x865c <__fp_inf>
    8408:	51 11       	cpse	r21, r1
    840a:	e1 c1       	rjmp	.+962    	; 0x87ce <__fp_szero>
    840c:	2d c1       	rjmp	.+602    	; 0x8668 <__fp_nan>

0000840e <__divsf3x>:
    840e:	bc d1       	rcall	.+888    	; 0x8788 <__fp_split3>
    8410:	98 f3       	brcs	.-26     	; 0x83f8 <__divsf3+0x4>

00008412 <__divsf3_pse>:
    8412:	99 23       	and	r25, r25
    8414:	c9 f3       	breq	.-14     	; 0x8408 <__divsf3+0x14>
    8416:	55 23       	and	r21, r21
    8418:	b1 f3       	breq	.-20     	; 0x8406 <__divsf3+0x12>
    841a:	95 1b       	sub	r25, r21
    841c:	55 0b       	sbc	r21, r21
    841e:	bb 27       	eor	r27, r27
    8420:	aa 27       	eor	r26, r26
    8422:	62 17       	cp	r22, r18
    8424:	73 07       	cpc	r23, r19
    8426:	84 07       	cpc	r24, r20
    8428:	38 f0       	brcs	.+14     	; 0x8438 <__divsf3_pse+0x26>
    842a:	9f 5f       	subi	r25, 0xFF	; 255
    842c:	5f 4f       	sbci	r21, 0xFF	; 255
    842e:	22 0f       	add	r18, r18
    8430:	33 1f       	adc	r19, r19
    8432:	44 1f       	adc	r20, r20
    8434:	aa 1f       	adc	r26, r26
    8436:	a9 f3       	breq	.-22     	; 0x8422 <__divsf3_pse+0x10>
    8438:	33 d0       	rcall	.+102    	; 0x84a0 <__divsf3_pse+0x8e>
    843a:	0e 2e       	mov	r0, r30
    843c:	3a f0       	brmi	.+14     	; 0x844c <__divsf3_pse+0x3a>
    843e:	e0 e8       	ldi	r30, 0x80	; 128
    8440:	30 d0       	rcall	.+96     	; 0x84a2 <__divsf3_pse+0x90>
    8442:	91 50       	subi	r25, 0x01	; 1
    8444:	50 40       	sbci	r21, 0x00	; 0
    8446:	e6 95       	lsr	r30
    8448:	00 1c       	adc	r0, r0
    844a:	ca f7       	brpl	.-14     	; 0x843e <__divsf3_pse+0x2c>
    844c:	29 d0       	rcall	.+82     	; 0x84a0 <__divsf3_pse+0x8e>
    844e:	fe 2f       	mov	r31, r30
    8450:	27 d0       	rcall	.+78     	; 0x84a0 <__divsf3_pse+0x8e>
    8452:	66 0f       	add	r22, r22
    8454:	77 1f       	adc	r23, r23
    8456:	88 1f       	adc	r24, r24
    8458:	bb 1f       	adc	r27, r27
    845a:	26 17       	cp	r18, r22
    845c:	37 07       	cpc	r19, r23
    845e:	48 07       	cpc	r20, r24
    8460:	ab 07       	cpc	r26, r27
    8462:	b0 e8       	ldi	r27, 0x80	; 128
    8464:	09 f0       	breq	.+2      	; 0x8468 <__divsf3_pse+0x56>
    8466:	bb 0b       	sbc	r27, r27
    8468:	80 2d       	mov	r24, r0
    846a:	bf 01       	movw	r22, r30
    846c:	ff 27       	eor	r31, r31
    846e:	93 58       	subi	r25, 0x83	; 131
    8470:	5f 4f       	sbci	r21, 0xFF	; 255
    8472:	2a f0       	brmi	.+10     	; 0x847e <__divsf3_pse+0x6c>
    8474:	9e 3f       	cpi	r25, 0xFE	; 254
    8476:	51 05       	cpc	r21, r1
    8478:	68 f0       	brcs	.+26     	; 0x8494 <__divsf3_pse+0x82>
    847a:	f0 c0       	rjmp	.+480    	; 0x865c <__fp_inf>
    847c:	a8 c1       	rjmp	.+848    	; 0x87ce <__fp_szero>
    847e:	5f 3f       	cpi	r21, 0xFF	; 255
    8480:	ec f3       	brlt	.-6      	; 0x847c <__divsf3_pse+0x6a>
    8482:	98 3e       	cpi	r25, 0xE8	; 232
    8484:	dc f3       	brlt	.-10     	; 0x847c <__divsf3_pse+0x6a>
    8486:	86 95       	lsr	r24
    8488:	77 95       	ror	r23
    848a:	67 95       	ror	r22
    848c:	b7 95       	ror	r27
    848e:	f7 95       	ror	r31
    8490:	9f 5f       	subi	r25, 0xFF	; 255
    8492:	c9 f7       	brne	.-14     	; 0x8486 <__divsf3_pse+0x74>
    8494:	88 0f       	add	r24, r24
    8496:	91 1d       	adc	r25, r1
    8498:	96 95       	lsr	r25
    849a:	87 95       	ror	r24
    849c:	97 f9       	bld	r25, 7
    849e:	08 95       	ret
    84a0:	e1 e0       	ldi	r30, 0x01	; 1
    84a2:	66 0f       	add	r22, r22
    84a4:	77 1f       	adc	r23, r23
    84a6:	88 1f       	adc	r24, r24
    84a8:	bb 1f       	adc	r27, r27
    84aa:	62 17       	cp	r22, r18
    84ac:	73 07       	cpc	r23, r19
    84ae:	84 07       	cpc	r24, r20
    84b0:	ba 07       	cpc	r27, r26
    84b2:	20 f0       	brcs	.+8      	; 0x84bc <__divsf3_pse+0xaa>
    84b4:	62 1b       	sub	r22, r18
    84b6:	73 0b       	sbc	r23, r19
    84b8:	84 0b       	sbc	r24, r20
    84ba:	ba 0b       	sbc	r27, r26
    84bc:	ee 1f       	adc	r30, r30
    84be:	88 f7       	brcc	.-30     	; 0x84a2 <__divsf3_pse+0x90>
    84c0:	e0 95       	com	r30
    84c2:	08 95       	ret

000084c4 <__fixsfdi>:
    84c4:	be e3       	ldi	r27, 0x3E	; 62
    84c6:	04 d0       	rcall	.+8      	; 0x84d0 <__fixunssfdi+0x2>
    84c8:	08 f4       	brcc	.+2      	; 0x84cc <__fixsfdi+0x8>
    84ca:	90 e8       	ldi	r25, 0x80	; 128
    84cc:	08 95       	ret

000084ce <__fixunssfdi>:
    84ce:	bf e3       	ldi	r27, 0x3F	; 63
    84d0:	22 27       	eor	r18, r18
    84d2:	33 27       	eor	r19, r19
    84d4:	a9 01       	movw	r20, r18
    84d6:	60 d1       	rcall	.+704    	; 0x8798 <__fp_splitA>
    84d8:	58 f1       	brcs	.+86     	; 0x8530 <__fixunssfdi+0x62>
    84da:	9f 57       	subi	r25, 0x7F	; 127
    84dc:	40 f1       	brcs	.+80     	; 0x852e <__fixunssfdi+0x60>
    84de:	b9 17       	cp	r27, r25
    84e0:	38 f1       	brcs	.+78     	; 0x8530 <__fixunssfdi+0x62>
    84e2:	bf e3       	ldi	r27, 0x3F	; 63
    84e4:	b9 1b       	sub	r27, r25
    84e6:	99 27       	eor	r25, r25
    84e8:	b8 50       	subi	r27, 0x08	; 8
    84ea:	3a f4       	brpl	.+14     	; 0x84fa <__fixunssfdi+0x2c>
    84ec:	66 0f       	add	r22, r22
    84ee:	77 1f       	adc	r23, r23
    84f0:	88 1f       	adc	r24, r24
    84f2:	99 1f       	adc	r25, r25
    84f4:	b3 95       	inc	r27
    84f6:	d2 f3       	brmi	.-12     	; 0x84ec <__fixunssfdi+0x1e>
    84f8:	16 c0       	rjmp	.+44     	; 0x8526 <__fixunssfdi+0x58>
    84fa:	b8 50       	subi	r27, 0x08	; 8
    84fc:	4a f0       	brmi	.+18     	; 0x8510 <__fixunssfdi+0x42>
    84fe:	23 2f       	mov	r18, r19
    8500:	34 2f       	mov	r19, r20
    8502:	45 2f       	mov	r20, r21
    8504:	56 2f       	mov	r21, r22
    8506:	67 2f       	mov	r22, r23
    8508:	78 2f       	mov	r23, r24
    850a:	88 27       	eor	r24, r24
    850c:	b8 50       	subi	r27, 0x08	; 8
    850e:	ba f7       	brpl	.-18     	; 0x84fe <__fixunssfdi+0x30>
    8510:	b8 5f       	subi	r27, 0xF8	; 248
    8512:	49 f0       	breq	.+18     	; 0x8526 <__fixunssfdi+0x58>
    8514:	86 95       	lsr	r24
    8516:	77 95       	ror	r23
    8518:	67 95       	ror	r22
    851a:	57 95       	ror	r21
    851c:	47 95       	ror	r20
    851e:	37 95       	ror	r19
    8520:	27 95       	ror	r18
    8522:	ba 95       	dec	r27
    8524:	b9 f7       	brne	.-18     	; 0x8514 <__fixunssfdi+0x46>
    8526:	0e f4       	brtc	.+2      	; 0x852a <__fixunssfdi+0x5c>
    8528:	a2 d0       	rcall	.+324    	; 0x866e <__fp_negdi>
    852a:	88 94       	clc
    852c:	08 95       	ret
    852e:	88 94       	clc
    8530:	60 e0       	ldi	r22, 0x00	; 0
    8532:	70 e0       	ldi	r23, 0x00	; 0
    8534:	cb 01       	movw	r24, r22
    8536:	08 95       	ret

00008538 <__fixsfsi>:
    8538:	04 d0       	rcall	.+8      	; 0x8542 <__fixunssfsi>
    853a:	68 94       	set
    853c:	b1 11       	cpse	r27, r1
    853e:	47 c1       	rjmp	.+654    	; 0x87ce <__fp_szero>
    8540:	08 95       	ret

00008542 <__fixunssfsi>:
    8542:	2a d1       	rcall	.+596    	; 0x8798 <__fp_splitA>
    8544:	88 f0       	brcs	.+34     	; 0x8568 <__fixunssfsi+0x26>
    8546:	9f 57       	subi	r25, 0x7F	; 127
    8548:	90 f0       	brcs	.+36     	; 0x856e <__fixunssfsi+0x2c>
    854a:	b9 2f       	mov	r27, r25
    854c:	99 27       	eor	r25, r25
    854e:	b7 51       	subi	r27, 0x17	; 23
    8550:	a0 f0       	brcs	.+40     	; 0x857a <__fixunssfsi+0x38>
    8552:	d1 f0       	breq	.+52     	; 0x8588 <__fixunssfsi+0x46>
    8554:	66 0f       	add	r22, r22
    8556:	77 1f       	adc	r23, r23
    8558:	88 1f       	adc	r24, r24
    855a:	99 1f       	adc	r25, r25
    855c:	1a f0       	brmi	.+6      	; 0x8564 <__fixunssfsi+0x22>
    855e:	ba 95       	dec	r27
    8560:	c9 f7       	brne	.-14     	; 0x8554 <__fixunssfsi+0x12>
    8562:	12 c0       	rjmp	.+36     	; 0x8588 <__fixunssfsi+0x46>
    8564:	b1 30       	cpi	r27, 0x01	; 1
    8566:	81 f0       	breq	.+32     	; 0x8588 <__fixunssfsi+0x46>
    8568:	31 d1       	rcall	.+610    	; 0x87cc <__fp_zero>
    856a:	b1 e0       	ldi	r27, 0x01	; 1
    856c:	08 95       	ret
    856e:	2e c1       	rjmp	.+604    	; 0x87cc <__fp_zero>
    8570:	67 2f       	mov	r22, r23
    8572:	78 2f       	mov	r23, r24
    8574:	88 27       	eor	r24, r24
    8576:	b8 5f       	subi	r27, 0xF8	; 248
    8578:	39 f0       	breq	.+14     	; 0x8588 <__fixunssfsi+0x46>
    857a:	b9 3f       	cpi	r27, 0xF9	; 249
    857c:	cc f3       	brlt	.-14     	; 0x8570 <__fixunssfsi+0x2e>
    857e:	86 95       	lsr	r24
    8580:	77 95       	ror	r23
    8582:	67 95       	ror	r22
    8584:	b3 95       	inc	r27
    8586:	d9 f7       	brne	.-10     	; 0x857e <__fixunssfsi+0x3c>
    8588:	3e f4       	brtc	.+14     	; 0x8598 <__fixunssfsi+0x56>
    858a:	90 95       	com	r25
    858c:	80 95       	com	r24
    858e:	70 95       	com	r23
    8590:	61 95       	neg	r22
    8592:	7f 4f       	sbci	r23, 0xFF	; 255
    8594:	8f 4f       	sbci	r24, 0xFF	; 255
    8596:	9f 4f       	sbci	r25, 0xFF	; 255
    8598:	08 95       	ret

0000859a <__floatunsisf>:
    859a:	e8 94       	clt
    859c:	09 c0       	rjmp	.+18     	; 0x85b0 <__floatsisf+0x12>

0000859e <__floatsisf>:
    859e:	97 fb       	bst	r25, 7
    85a0:	3e f4       	brtc	.+14     	; 0x85b0 <__floatsisf+0x12>
    85a2:	90 95       	com	r25
    85a4:	80 95       	com	r24
    85a6:	70 95       	com	r23
    85a8:	61 95       	neg	r22
    85aa:	7f 4f       	sbci	r23, 0xFF	; 255
    85ac:	8f 4f       	sbci	r24, 0xFF	; 255
    85ae:	9f 4f       	sbci	r25, 0xFF	; 255
    85b0:	99 23       	and	r25, r25
    85b2:	a9 f0       	breq	.+42     	; 0x85de <__floatsisf+0x40>
    85b4:	f9 2f       	mov	r31, r25
    85b6:	96 e9       	ldi	r25, 0x96	; 150
    85b8:	bb 27       	eor	r27, r27
    85ba:	93 95       	inc	r25
    85bc:	f6 95       	lsr	r31
    85be:	87 95       	ror	r24
    85c0:	77 95       	ror	r23
    85c2:	67 95       	ror	r22
    85c4:	b7 95       	ror	r27
    85c6:	f1 11       	cpse	r31, r1
    85c8:	f8 cf       	rjmp	.-16     	; 0x85ba <__floatsisf+0x1c>
    85ca:	fa f4       	brpl	.+62     	; 0x860a <__floatsisf+0x6c>
    85cc:	bb 0f       	add	r27, r27
    85ce:	11 f4       	brne	.+4      	; 0x85d4 <__floatsisf+0x36>
    85d0:	60 ff       	sbrs	r22, 0
    85d2:	1b c0       	rjmp	.+54     	; 0x860a <__floatsisf+0x6c>
    85d4:	6f 5f       	subi	r22, 0xFF	; 255
    85d6:	7f 4f       	sbci	r23, 0xFF	; 255
    85d8:	8f 4f       	sbci	r24, 0xFF	; 255
    85da:	9f 4f       	sbci	r25, 0xFF	; 255
    85dc:	16 c0       	rjmp	.+44     	; 0x860a <__floatsisf+0x6c>
    85de:	88 23       	and	r24, r24
    85e0:	11 f0       	breq	.+4      	; 0x85e6 <__floatsisf+0x48>
    85e2:	96 e9       	ldi	r25, 0x96	; 150
    85e4:	11 c0       	rjmp	.+34     	; 0x8608 <__floatsisf+0x6a>
    85e6:	77 23       	and	r23, r23
    85e8:	21 f0       	breq	.+8      	; 0x85f2 <__floatsisf+0x54>
    85ea:	9e e8       	ldi	r25, 0x8E	; 142
    85ec:	87 2f       	mov	r24, r23
    85ee:	76 2f       	mov	r23, r22
    85f0:	05 c0       	rjmp	.+10     	; 0x85fc <__floatsisf+0x5e>
    85f2:	66 23       	and	r22, r22
    85f4:	71 f0       	breq	.+28     	; 0x8612 <__floatsisf+0x74>
    85f6:	96 e8       	ldi	r25, 0x86	; 134
    85f8:	86 2f       	mov	r24, r22
    85fa:	70 e0       	ldi	r23, 0x00	; 0
    85fc:	60 e0       	ldi	r22, 0x00	; 0
    85fe:	2a f0       	brmi	.+10     	; 0x860a <__floatsisf+0x6c>
    8600:	9a 95       	dec	r25
    8602:	66 0f       	add	r22, r22
    8604:	77 1f       	adc	r23, r23
    8606:	88 1f       	adc	r24, r24
    8608:	da f7       	brpl	.-10     	; 0x8600 <__floatsisf+0x62>
    860a:	88 0f       	add	r24, r24
    860c:	96 95       	lsr	r25
    860e:	87 95       	ror	r24
    8610:	97 f9       	bld	r25, 7
    8612:	08 95       	ret

00008614 <__fp_cmp>:
    8614:	99 0f       	add	r25, r25
    8616:	00 08       	sbc	r0, r0
    8618:	55 0f       	add	r21, r21
    861a:	aa 0b       	sbc	r26, r26
    861c:	e0 e8       	ldi	r30, 0x80	; 128
    861e:	fe ef       	ldi	r31, 0xFE	; 254
    8620:	16 16       	cp	r1, r22
    8622:	17 06       	cpc	r1, r23
    8624:	e8 07       	cpc	r30, r24
    8626:	f9 07       	cpc	r31, r25
    8628:	c0 f0       	brcs	.+48     	; 0x865a <__fp_cmp+0x46>
    862a:	12 16       	cp	r1, r18
    862c:	13 06       	cpc	r1, r19
    862e:	e4 07       	cpc	r30, r20
    8630:	f5 07       	cpc	r31, r21
    8632:	98 f0       	brcs	.+38     	; 0x865a <__fp_cmp+0x46>
    8634:	62 1b       	sub	r22, r18
    8636:	73 0b       	sbc	r23, r19
    8638:	84 0b       	sbc	r24, r20
    863a:	95 0b       	sbc	r25, r21
    863c:	39 f4       	brne	.+14     	; 0x864c <__fp_cmp+0x38>
    863e:	0a 26       	eor	r0, r26
    8640:	61 f0       	breq	.+24     	; 0x865a <__fp_cmp+0x46>
    8642:	23 2b       	or	r18, r19
    8644:	24 2b       	or	r18, r20
    8646:	25 2b       	or	r18, r21
    8648:	21 f4       	brne	.+8      	; 0x8652 <__fp_cmp+0x3e>
    864a:	08 95       	ret
    864c:	0a 26       	eor	r0, r26
    864e:	09 f4       	brne	.+2      	; 0x8652 <__fp_cmp+0x3e>
    8650:	a1 40       	sbci	r26, 0x01	; 1
    8652:	a6 95       	lsr	r26
    8654:	8f ef       	ldi	r24, 0xFF	; 255
    8656:	81 1d       	adc	r24, r1
    8658:	81 1d       	adc	r24, r1
    865a:	08 95       	ret

0000865c <__fp_inf>:
    865c:	97 f9       	bld	r25, 7
    865e:	9f 67       	ori	r25, 0x7F	; 127
    8660:	80 e8       	ldi	r24, 0x80	; 128
    8662:	70 e0       	ldi	r23, 0x00	; 0
    8664:	60 e0       	ldi	r22, 0x00	; 0
    8666:	08 95       	ret

00008668 <__fp_nan>:
    8668:	9f ef       	ldi	r25, 0xFF	; 255
    866a:	80 ec       	ldi	r24, 0xC0	; 192
    866c:	08 95       	ret

0000866e <__fp_negdi>:
    866e:	90 95       	com	r25
    8670:	80 95       	com	r24
    8672:	70 95       	com	r23
    8674:	60 95       	com	r22
    8676:	50 95       	com	r21
    8678:	40 95       	com	r20
    867a:	30 95       	com	r19
    867c:	21 95       	neg	r18
    867e:	3f 4f       	sbci	r19, 0xFF	; 255
    8680:	4f 4f       	sbci	r20, 0xFF	; 255
    8682:	5f 4f       	sbci	r21, 0xFF	; 255
    8684:	6f 4f       	sbci	r22, 0xFF	; 255
    8686:	7f 4f       	sbci	r23, 0xFF	; 255
    8688:	8f 4f       	sbci	r24, 0xFF	; 255
    868a:	9f 4f       	sbci	r25, 0xFF	; 255
    868c:	08 95       	ret

0000868e <__fp_powser>:
    868e:	df 93       	push	r29
    8690:	cf 93       	push	r28
    8692:	1f 93       	push	r17
    8694:	0f 93       	push	r16
    8696:	ff 92       	push	r15
    8698:	ef 92       	push	r14
    869a:	df 92       	push	r13
    869c:	7b 01       	movw	r14, r22
    869e:	8c 01       	movw	r16, r24
    86a0:	68 94       	set
    86a2:	05 c0       	rjmp	.+10     	; 0x86ae <__fp_powser+0x20>
    86a4:	da 2e       	mov	r13, r26
    86a6:	ef 01       	movw	r28, r30
    86a8:	af d0       	rcall	.+350    	; 0x8808 <__mulsf3x>
    86aa:	fe 01       	movw	r30, r28
    86ac:	e8 94       	clt
    86ae:	a5 91       	lpm	r26, Z+
    86b0:	25 91       	lpm	r18, Z+
    86b2:	35 91       	lpm	r19, Z+
    86b4:	45 91       	lpm	r20, Z+
    86b6:	55 91       	lpm	r21, Z+
    86b8:	ae f3       	brts	.-22     	; 0x86a4 <__fp_powser+0x16>
    86ba:	ef 01       	movw	r28, r30
    86bc:	45 de       	rcall	.-886    	; 0x8348 <__addsf3x>
    86be:	fe 01       	movw	r30, r28
    86c0:	97 01       	movw	r18, r14
    86c2:	a8 01       	movw	r20, r16
    86c4:	da 94       	dec	r13
    86c6:	79 f7       	brne	.-34     	; 0x86a6 <__fp_powser+0x18>
    86c8:	df 90       	pop	r13
    86ca:	ef 90       	pop	r14
    86cc:	ff 90       	pop	r15
    86ce:	0f 91       	pop	r16
    86d0:	1f 91       	pop	r17
    86d2:	cf 91       	pop	r28
    86d4:	df 91       	pop	r29
    86d6:	08 95       	ret

000086d8 <__fp_pscA>:
    86d8:	00 24       	eor	r0, r0
    86da:	0a 94       	dec	r0
    86dc:	16 16       	cp	r1, r22
    86de:	17 06       	cpc	r1, r23
    86e0:	18 06       	cpc	r1, r24
    86e2:	09 06       	cpc	r0, r25
    86e4:	08 95       	ret

000086e6 <__fp_pscB>:
    86e6:	00 24       	eor	r0, r0
    86e8:	0a 94       	dec	r0
    86ea:	12 16       	cp	r1, r18
    86ec:	13 06       	cpc	r1, r19
    86ee:	14 06       	cpc	r1, r20
    86f0:	05 06       	cpc	r0, r21
    86f2:	08 95       	ret
    86f4:	b9 cf       	rjmp	.-142    	; 0x8668 <__fp_nan>

000086f6 <__fp_rempio2>:
    86f6:	50 d0       	rcall	.+160    	; 0x8798 <__fp_splitA>
    86f8:	e8 f3       	brcs	.-6      	; 0x86f4 <__fp_pscB+0xe>
    86fa:	e8 94       	clt
    86fc:	e0 e0       	ldi	r30, 0x00	; 0
    86fe:	bb 27       	eor	r27, r27
    8700:	9f 57       	subi	r25, 0x7F	; 127
    8702:	f0 f0       	brcs	.+60     	; 0x8740 <__fp_rempio2+0x4a>
    8704:	2a ed       	ldi	r18, 0xDA	; 218
    8706:	3f e0       	ldi	r19, 0x0F	; 15
    8708:	49 ec       	ldi	r20, 0xC9	; 201
    870a:	06 c0       	rjmp	.+12     	; 0x8718 <__fp_rempio2+0x22>
    870c:	ee 0f       	add	r30, r30
    870e:	bb 0f       	add	r27, r27
    8710:	66 1f       	adc	r22, r22
    8712:	77 1f       	adc	r23, r23
    8714:	88 1f       	adc	r24, r24
    8716:	28 f0       	brcs	.+10     	; 0x8722 <__fp_rempio2+0x2c>
    8718:	b2 3a       	cpi	r27, 0xA2	; 162
    871a:	62 07       	cpc	r22, r18
    871c:	73 07       	cpc	r23, r19
    871e:	84 07       	cpc	r24, r20
    8720:	28 f0       	brcs	.+10     	; 0x872c <__fp_rempio2+0x36>
    8722:	b2 5a       	subi	r27, 0xA2	; 162
    8724:	62 0b       	sbc	r22, r18
    8726:	73 0b       	sbc	r23, r19
    8728:	84 0b       	sbc	r24, r20
    872a:	e3 95       	inc	r30
    872c:	9a 95       	dec	r25
    872e:	72 f7       	brpl	.-36     	; 0x870c <__fp_rempio2+0x16>
    8730:	80 38       	cpi	r24, 0x80	; 128
    8732:	30 f4       	brcc	.+12     	; 0x8740 <__fp_rempio2+0x4a>
    8734:	9a 95       	dec	r25
    8736:	bb 0f       	add	r27, r27
    8738:	66 1f       	adc	r22, r22
    873a:	77 1f       	adc	r23, r23
    873c:	88 1f       	adc	r24, r24
    873e:	d2 f7       	brpl	.-12     	; 0x8734 <__fp_rempio2+0x3e>
    8740:	90 48       	sbci	r25, 0x80	; 128
    8742:	3e c1       	rjmp	.+636    	; 0x89c0 <__fp_mpack_finite>

00008744 <__fp_round>:
    8744:	09 2e       	mov	r0, r25
    8746:	03 94       	inc	r0
    8748:	00 0c       	add	r0, r0
    874a:	11 f4       	brne	.+4      	; 0x8750 <__fp_round+0xc>
    874c:	88 23       	and	r24, r24
    874e:	52 f0       	brmi	.+20     	; 0x8764 <__fp_round+0x20>
    8750:	bb 0f       	add	r27, r27
    8752:	40 f4       	brcc	.+16     	; 0x8764 <__fp_round+0x20>
    8754:	bf 2b       	or	r27, r31
    8756:	11 f4       	brne	.+4      	; 0x875c <__fp_round+0x18>
    8758:	60 ff       	sbrs	r22, 0
    875a:	04 c0       	rjmp	.+8      	; 0x8764 <__fp_round+0x20>
    875c:	6f 5f       	subi	r22, 0xFF	; 255
    875e:	7f 4f       	sbci	r23, 0xFF	; 255
    8760:	8f 4f       	sbci	r24, 0xFF	; 255
    8762:	9f 4f       	sbci	r25, 0xFF	; 255
    8764:	08 95       	ret

00008766 <__fp_sinus>:
    8766:	ef 93       	push	r30
    8768:	e0 ff       	sbrs	r30, 0
    876a:	06 c0       	rjmp	.+12     	; 0x8778 <__fp_sinus+0x12>
    876c:	a2 ea       	ldi	r26, 0xA2	; 162
    876e:	2a ed       	ldi	r18, 0xDA	; 218
    8770:	3f e0       	ldi	r19, 0x0F	; 15
    8772:	49 ec       	ldi	r20, 0xC9	; 201
    8774:	5f eb       	ldi	r21, 0xBF	; 191
    8776:	e8 dd       	rcall	.-1072   	; 0x8348 <__addsf3x>
    8778:	e5 df       	rcall	.-54     	; 0x8744 <__fp_round>
    877a:	0f 90       	pop	r0
    877c:	03 94       	inc	r0
    877e:	01 fc       	sbrc	r0, 1
    8780:	90 58       	subi	r25, 0x80	; 128
    8782:	e6 ef       	ldi	r30, 0xF6	; 246
    8784:	f1 e0       	ldi	r31, 0x01	; 1
    8786:	28 c1       	rjmp	.+592    	; 0x89d8 <__fp_powsodd>

00008788 <__fp_split3>:
    8788:	57 fd       	sbrc	r21, 7
    878a:	90 58       	subi	r25, 0x80	; 128
    878c:	44 0f       	add	r20, r20
    878e:	55 1f       	adc	r21, r21
    8790:	59 f0       	breq	.+22     	; 0x87a8 <__fp_splitA+0x10>
    8792:	5f 3f       	cpi	r21, 0xFF	; 255
    8794:	71 f0       	breq	.+28     	; 0x87b2 <__fp_splitA+0x1a>
    8796:	47 95       	ror	r20

00008798 <__fp_splitA>:
    8798:	88 0f       	add	r24, r24
    879a:	97 fb       	bst	r25, 7
    879c:	99 1f       	adc	r25, r25
    879e:	61 f0       	breq	.+24     	; 0x87b8 <__fp_splitA+0x20>
    87a0:	9f 3f       	cpi	r25, 0xFF	; 255
    87a2:	79 f0       	breq	.+30     	; 0x87c2 <__fp_splitA+0x2a>
    87a4:	87 95       	ror	r24
    87a6:	08 95       	ret
    87a8:	12 16       	cp	r1, r18
    87aa:	13 06       	cpc	r1, r19
    87ac:	14 06       	cpc	r1, r20
    87ae:	55 1f       	adc	r21, r21
    87b0:	f2 cf       	rjmp	.-28     	; 0x8796 <__fp_split3+0xe>
    87b2:	46 95       	lsr	r20
    87b4:	f1 df       	rcall	.-30     	; 0x8798 <__fp_splitA>
    87b6:	08 c0       	rjmp	.+16     	; 0x87c8 <__fp_splitA+0x30>
    87b8:	16 16       	cp	r1, r22
    87ba:	17 06       	cpc	r1, r23
    87bc:	18 06       	cpc	r1, r24
    87be:	99 1f       	adc	r25, r25
    87c0:	f1 cf       	rjmp	.-30     	; 0x87a4 <__fp_splitA+0xc>
    87c2:	86 95       	lsr	r24
    87c4:	71 05       	cpc	r23, r1
    87c6:	61 05       	cpc	r22, r1
    87c8:	08 94       	sec
    87ca:	08 95       	ret

000087cc <__fp_zero>:
    87cc:	e8 94       	clt

000087ce <__fp_szero>:
    87ce:	bb 27       	eor	r27, r27
    87d0:	66 27       	eor	r22, r22
    87d2:	77 27       	eor	r23, r23
    87d4:	cb 01       	movw	r24, r22
    87d6:	97 f9       	bld	r25, 7
    87d8:	08 95       	ret

000087da <__gesf2>:
    87da:	1c df       	rcall	.-456    	; 0x8614 <__fp_cmp>
    87dc:	08 f4       	brcc	.+2      	; 0x87e0 <__gesf2+0x6>
    87de:	8f ef       	ldi	r24, 0xFF	; 255
    87e0:	08 95       	ret

000087e2 <inverse>:
    87e2:	9b 01       	movw	r18, r22
    87e4:	ac 01       	movw	r20, r24
    87e6:	60 e0       	ldi	r22, 0x00	; 0
    87e8:	70 e0       	ldi	r23, 0x00	; 0
    87ea:	80 e8       	ldi	r24, 0x80	; 128
    87ec:	9f e3       	ldi	r25, 0x3F	; 63
    87ee:	02 ce       	rjmp	.-1020   	; 0x83f4 <__divsf3>

000087f0 <__mulsf3>:
    87f0:	0b d0       	rcall	.+22     	; 0x8808 <__mulsf3x>
    87f2:	a8 cf       	rjmp	.-176    	; 0x8744 <__fp_round>
    87f4:	71 df       	rcall	.-286    	; 0x86d8 <__fp_pscA>
    87f6:	28 f0       	brcs	.+10     	; 0x8802 <__mulsf3+0x12>
    87f8:	76 df       	rcall	.-276    	; 0x86e6 <__fp_pscB>
    87fa:	18 f0       	brcs	.+6      	; 0x8802 <__mulsf3+0x12>
    87fc:	95 23       	and	r25, r21
    87fe:	09 f0       	breq	.+2      	; 0x8802 <__mulsf3+0x12>
    8800:	2d cf       	rjmp	.-422    	; 0x865c <__fp_inf>
    8802:	32 cf       	rjmp	.-412    	; 0x8668 <__fp_nan>
    8804:	11 24       	eor	r1, r1
    8806:	e3 cf       	rjmp	.-58     	; 0x87ce <__fp_szero>

00008808 <__mulsf3x>:
    8808:	bf df       	rcall	.-130    	; 0x8788 <__fp_split3>
    880a:	a0 f3       	brcs	.-24     	; 0x87f4 <__mulsf3+0x4>

0000880c <__mulsf3_pse>:
    880c:	95 9f       	mul	r25, r21
    880e:	d1 f3       	breq	.-12     	; 0x8804 <__mulsf3+0x14>
    8810:	95 0f       	add	r25, r21
    8812:	50 e0       	ldi	r21, 0x00	; 0
    8814:	55 1f       	adc	r21, r21
    8816:	62 9f       	mul	r22, r18
    8818:	f0 01       	movw	r30, r0
    881a:	72 9f       	mul	r23, r18
    881c:	bb 27       	eor	r27, r27
    881e:	f0 0d       	add	r31, r0
    8820:	b1 1d       	adc	r27, r1
    8822:	63 9f       	mul	r22, r19
    8824:	aa 27       	eor	r26, r26
    8826:	f0 0d       	add	r31, r0
    8828:	b1 1d       	adc	r27, r1
    882a:	aa 1f       	adc	r26, r26
    882c:	64 9f       	mul	r22, r20
    882e:	66 27       	eor	r22, r22
    8830:	b0 0d       	add	r27, r0
    8832:	a1 1d       	adc	r26, r1
    8834:	66 1f       	adc	r22, r22
    8836:	82 9f       	mul	r24, r18
    8838:	22 27       	eor	r18, r18
    883a:	b0 0d       	add	r27, r0
    883c:	a1 1d       	adc	r26, r1
    883e:	62 1f       	adc	r22, r18
    8840:	73 9f       	mul	r23, r19
    8842:	b0 0d       	add	r27, r0
    8844:	a1 1d       	adc	r26, r1
    8846:	62 1f       	adc	r22, r18
    8848:	83 9f       	mul	r24, r19
    884a:	a0 0d       	add	r26, r0
    884c:	61 1d       	adc	r22, r1
    884e:	22 1f       	adc	r18, r18
    8850:	74 9f       	mul	r23, r20
    8852:	33 27       	eor	r19, r19
    8854:	a0 0d       	add	r26, r0
    8856:	61 1d       	adc	r22, r1
    8858:	23 1f       	adc	r18, r19
    885a:	84 9f       	mul	r24, r20
    885c:	60 0d       	add	r22, r0
    885e:	21 1d       	adc	r18, r1
    8860:	82 2f       	mov	r24, r18
    8862:	76 2f       	mov	r23, r22
    8864:	6a 2f       	mov	r22, r26
    8866:	11 24       	eor	r1, r1
    8868:	9f 57       	subi	r25, 0x7F	; 127
    886a:	50 40       	sbci	r21, 0x00	; 0
    886c:	8a f0       	brmi	.+34     	; 0x8890 <__mulsf3_pse+0x84>
    886e:	e1 f0       	breq	.+56     	; 0x88a8 <__mulsf3_pse+0x9c>
    8870:	88 23       	and	r24, r24
    8872:	4a f0       	brmi	.+18     	; 0x8886 <__mulsf3_pse+0x7a>
    8874:	ee 0f       	add	r30, r30
    8876:	ff 1f       	adc	r31, r31
    8878:	bb 1f       	adc	r27, r27
    887a:	66 1f       	adc	r22, r22
    887c:	77 1f       	adc	r23, r23
    887e:	88 1f       	adc	r24, r24
    8880:	91 50       	subi	r25, 0x01	; 1
    8882:	50 40       	sbci	r21, 0x00	; 0
    8884:	a9 f7       	brne	.-22     	; 0x8870 <__mulsf3_pse+0x64>
    8886:	9e 3f       	cpi	r25, 0xFE	; 254
    8888:	51 05       	cpc	r21, r1
    888a:	70 f0       	brcs	.+28     	; 0x88a8 <__mulsf3_pse+0x9c>
    888c:	e7 ce       	rjmp	.-562    	; 0x865c <__fp_inf>
    888e:	9f cf       	rjmp	.-194    	; 0x87ce <__fp_szero>
    8890:	5f 3f       	cpi	r21, 0xFF	; 255
    8892:	ec f3       	brlt	.-6      	; 0x888e <__mulsf3_pse+0x82>
    8894:	98 3e       	cpi	r25, 0xE8	; 232
    8896:	dc f3       	brlt	.-10     	; 0x888e <__mulsf3_pse+0x82>
    8898:	86 95       	lsr	r24
    889a:	77 95       	ror	r23
    889c:	67 95       	ror	r22
    889e:	b7 95       	ror	r27
    88a0:	f7 95       	ror	r31
    88a2:	e7 95       	ror	r30
    88a4:	9f 5f       	subi	r25, 0xFF	; 255
    88a6:	c1 f7       	brne	.-16     	; 0x8898 <__mulsf3_pse+0x8c>
    88a8:	fe 2b       	or	r31, r30
    88aa:	88 0f       	add	r24, r24
    88ac:	91 1d       	adc	r25, r1
    88ae:	96 95       	lsr	r25
    88b0:	87 95       	ror	r24
    88b2:	97 f9       	bld	r25, 7
    88b4:	08 95       	ret

000088b6 <pow>:
    88b6:	fa 01       	movw	r30, r20
    88b8:	ee 0f       	add	r30, r30
    88ba:	ff 1f       	adc	r31, r31
    88bc:	30 96       	adiw	r30, 0x00	; 0
    88be:	21 05       	cpc	r18, r1
    88c0:	31 05       	cpc	r19, r1
    88c2:	99 f1       	breq	.+102    	; 0x892a <pow+0x74>
    88c4:	61 15       	cp	r22, r1
    88c6:	71 05       	cpc	r23, r1
    88c8:	61 f4       	brne	.+24     	; 0x88e2 <pow+0x2c>
    88ca:	80 38       	cpi	r24, 0x80	; 128
    88cc:	bf e3       	ldi	r27, 0x3F	; 63
    88ce:	9b 07       	cpc	r25, r27
    88d0:	49 f1       	breq	.+82     	; 0x8924 <pow+0x6e>
    88d2:	68 94       	set
    88d4:	90 38       	cpi	r25, 0x80	; 128
    88d6:	81 05       	cpc	r24, r1
    88d8:	61 f0       	breq	.+24     	; 0x88f2 <pow+0x3c>
    88da:	80 38       	cpi	r24, 0x80	; 128
    88dc:	bf ef       	ldi	r27, 0xFF	; 255
    88de:	9b 07       	cpc	r25, r27
    88e0:	41 f0       	breq	.+16     	; 0x88f2 <pow+0x3c>
    88e2:	99 23       	and	r25, r25
    88e4:	42 f5       	brpl	.+80     	; 0x8936 <pow+0x80>
    88e6:	ff 3f       	cpi	r31, 0xFF	; 255
    88e8:	e1 05       	cpc	r30, r1
    88ea:	31 05       	cpc	r19, r1
    88ec:	21 05       	cpc	r18, r1
    88ee:	11 f1       	breq	.+68     	; 0x8934 <pow+0x7e>
    88f0:	e8 94       	clt
    88f2:	08 94       	sec
    88f4:	e7 95       	ror	r30
    88f6:	d9 01       	movw	r26, r18
    88f8:	aa 23       	and	r26, r26
    88fa:	29 f4       	brne	.+10     	; 0x8906 <pow+0x50>
    88fc:	ab 2f       	mov	r26, r27
    88fe:	be 2f       	mov	r27, r30
    8900:	f8 5f       	subi	r31, 0xF8	; 248
    8902:	d0 f3       	brcs	.-12     	; 0x88f8 <pow+0x42>
    8904:	10 c0       	rjmp	.+32     	; 0x8926 <pow+0x70>
    8906:	ff 5f       	subi	r31, 0xFF	; 255
    8908:	70 f4       	brcc	.+28     	; 0x8926 <pow+0x70>
    890a:	a6 95       	lsr	r26
    890c:	e0 f7       	brcc	.-8      	; 0x8906 <pow+0x50>
    890e:	f7 39       	cpi	r31, 0x97	; 151
    8910:	50 f0       	brcs	.+20     	; 0x8926 <pow+0x70>
    8912:	19 f0       	breq	.+6      	; 0x891a <pow+0x64>
    8914:	ff 3a       	cpi	r31, 0xAF	; 175
    8916:	38 f4       	brcc	.+14     	; 0x8926 <pow+0x70>
    8918:	9f 77       	andi	r25, 0x7F	; 127
    891a:	9f 93       	push	r25
    891c:	0c d0       	rcall	.+24     	; 0x8936 <pow+0x80>
    891e:	0f 90       	pop	r0
    8920:	07 fc       	sbrc	r0, 7
    8922:	90 58       	subi	r25, 0x80	; 128
    8924:	08 95       	ret
    8926:	3e f0       	brts	.+14     	; 0x8936 <pow+0x80>
    8928:	9f ce       	rjmp	.-706    	; 0x8668 <__fp_nan>
    892a:	60 e0       	ldi	r22, 0x00	; 0
    892c:	70 e0       	ldi	r23, 0x00	; 0
    892e:	80 e8       	ldi	r24, 0x80	; 128
    8930:	9f e3       	ldi	r25, 0x3F	; 63
    8932:	08 95       	ret
    8934:	4f e7       	ldi	r20, 0x7F	; 127
    8936:	9f 77       	andi	r25, 0x7F	; 127
    8938:	5f 93       	push	r21
    893a:	4f 93       	push	r20
    893c:	3f 93       	push	r19
    893e:	2f 93       	push	r18
    8940:	97 d0       	rcall	.+302    	; 0x8a70 <log>
    8942:	2f 91       	pop	r18
    8944:	3f 91       	pop	r19
    8946:	4f 91       	pop	r20
    8948:	5f 91       	pop	r21
    894a:	52 df       	rcall	.-348    	; 0x87f0 <__mulsf3>
    894c:	0b c0       	rjmp	.+22     	; 0x8964 <exp>

0000894e <sin>:
    894e:	9f 93       	push	r25
    8950:	d2 de       	rcall	.-604    	; 0x86f6 <__fp_rempio2>
    8952:	0f 90       	pop	r0
    8954:	07 fc       	sbrc	r0, 7
    8956:	ee 5f       	subi	r30, 0xFE	; 254
    8958:	06 cf       	rjmp	.-500    	; 0x8766 <__fp_sinus>
    895a:	19 f4       	brne	.+6      	; 0x8962 <sin+0x14>
    895c:	0e f0       	brts	.+2      	; 0x8960 <sin+0x12>
    895e:	7e ce       	rjmp	.-772    	; 0x865c <__fp_inf>
    8960:	35 cf       	rjmp	.-406    	; 0x87cc <__fp_zero>
    8962:	82 ce       	rjmp	.-764    	; 0x8668 <__fp_nan>

00008964 <exp>:
    8964:	19 df       	rcall	.-462    	; 0x8798 <__fp_splitA>
    8966:	c8 f3       	brcs	.-14     	; 0x895a <sin+0xc>
    8968:	96 38       	cpi	r25, 0x86	; 134
    896a:	c0 f7       	brcc	.-16     	; 0x895c <sin+0xe>
    896c:	07 f8       	bld	r0, 7
    896e:	0f 92       	push	r0
    8970:	e8 94       	clt
    8972:	2b e3       	ldi	r18, 0x3B	; 59
    8974:	3a ea       	ldi	r19, 0xAA	; 170
    8976:	48 eb       	ldi	r20, 0xB8	; 184
    8978:	5f e7       	ldi	r21, 0x7F	; 127
    897a:	48 df       	rcall	.-368    	; 0x880c <__mulsf3_pse>
    897c:	0f 92       	push	r0
    897e:	0f 92       	push	r0
    8980:	0f 92       	push	r0
    8982:	4d b7       	in	r20, 0x3d	; 61
    8984:	5e b7       	in	r21, 0x3e	; 62
    8986:	0f 92       	push	r0
    8988:	b3 d0       	rcall	.+358    	; 0x8af0 <modf>
    898a:	e4 e1       	ldi	r30, 0x14	; 20
    898c:	f2 e0       	ldi	r31, 0x02	; 2
    898e:	7f de       	rcall	.-770    	; 0x868e <__fp_powser>
    8990:	4f 91       	pop	r20
    8992:	5f 91       	pop	r21
    8994:	ef 91       	pop	r30
    8996:	ff 91       	pop	r31
    8998:	e5 95       	asr	r30
    899a:	ee 1f       	adc	r30, r30
    899c:	ff 1f       	adc	r31, r31
    899e:	49 f0       	breq	.+18     	; 0x89b2 <exp+0x4e>
    89a0:	fe 57       	subi	r31, 0x7E	; 126
    89a2:	e0 68       	ori	r30, 0x80	; 128
    89a4:	44 27       	eor	r20, r20
    89a6:	ee 0f       	add	r30, r30
    89a8:	44 1f       	adc	r20, r20
    89aa:	fa 95       	dec	r31
    89ac:	e1 f7       	brne	.-8      	; 0x89a6 <exp+0x42>
    89ae:	41 95       	neg	r20
    89b0:	55 0b       	sbc	r21, r21
    89b2:	25 d0       	rcall	.+74     	; 0x89fe <ldexp>
    89b4:	0f 90       	pop	r0
    89b6:	07 fe       	sbrs	r0, 7
    89b8:	14 cf       	rjmp	.-472    	; 0x87e2 <inverse>
    89ba:	08 95       	ret

000089bc <__fp_mpack>:
    89bc:	9f 3f       	cpi	r25, 0xFF	; 255
    89be:	31 f0       	breq	.+12     	; 0x89cc <__fp_mpack_finite+0xc>

000089c0 <__fp_mpack_finite>:
    89c0:	91 50       	subi	r25, 0x01	; 1
    89c2:	20 f4       	brcc	.+8      	; 0x89cc <__fp_mpack_finite+0xc>
    89c4:	87 95       	ror	r24
    89c6:	77 95       	ror	r23
    89c8:	67 95       	ror	r22
    89ca:	b7 95       	ror	r27
    89cc:	88 0f       	add	r24, r24
    89ce:	91 1d       	adc	r25, r1
    89d0:	96 95       	lsr	r25
    89d2:	87 95       	ror	r24
    89d4:	97 f9       	bld	r25, 7
    89d6:	08 95       	ret

000089d8 <__fp_powsodd>:
    89d8:	9f 93       	push	r25
    89da:	8f 93       	push	r24
    89dc:	7f 93       	push	r23
    89de:	6f 93       	push	r22
    89e0:	ff 93       	push	r31
    89e2:	ef 93       	push	r30
    89e4:	9b 01       	movw	r18, r22
    89e6:	ac 01       	movw	r20, r24
    89e8:	03 df       	rcall	.-506    	; 0x87f0 <__mulsf3>
    89ea:	ef 91       	pop	r30
    89ec:	ff 91       	pop	r31
    89ee:	4f de       	rcall	.-866    	; 0x868e <__fp_powser>
    89f0:	2f 91       	pop	r18
    89f2:	3f 91       	pop	r19
    89f4:	4f 91       	pop	r20
    89f6:	5f 91       	pop	r21
    89f8:	fb ce       	rjmp	.-522    	; 0x87f0 <__mulsf3>
    89fa:	30 ce       	rjmp	.-928    	; 0x865c <__fp_inf>
    89fc:	df cf       	rjmp	.-66     	; 0x89bc <__fp_mpack>

000089fe <ldexp>:
    89fe:	cc de       	rcall	.-616    	; 0x8798 <__fp_splitA>
    8a00:	e8 f3       	brcs	.-6      	; 0x89fc <__fp_powsodd+0x24>
    8a02:	99 23       	and	r25, r25
    8a04:	d9 f3       	breq	.-10     	; 0x89fc <__fp_powsodd+0x24>
    8a06:	94 0f       	add	r25, r20
    8a08:	51 1d       	adc	r21, r1
    8a0a:	bb f3       	brvs	.-18     	; 0x89fa <__fp_powsodd+0x22>
    8a0c:	91 50       	subi	r25, 0x01	; 1
    8a0e:	50 40       	sbci	r21, 0x00	; 0
    8a10:	94 f0       	brlt	.+36     	; 0x8a36 <ldexp+0x38>
    8a12:	59 f0       	breq	.+22     	; 0x8a2a <ldexp+0x2c>
    8a14:	88 23       	and	r24, r24
    8a16:	32 f0       	brmi	.+12     	; 0x8a24 <ldexp+0x26>
    8a18:	66 0f       	add	r22, r22
    8a1a:	77 1f       	adc	r23, r23
    8a1c:	88 1f       	adc	r24, r24
    8a1e:	91 50       	subi	r25, 0x01	; 1
    8a20:	50 40       	sbci	r21, 0x00	; 0
    8a22:	c1 f7       	brne	.-16     	; 0x8a14 <ldexp+0x16>
    8a24:	9e 3f       	cpi	r25, 0xFE	; 254
    8a26:	51 05       	cpc	r21, r1
    8a28:	44 f7       	brge	.-48     	; 0x89fa <__fp_powsodd+0x22>
    8a2a:	88 0f       	add	r24, r24
    8a2c:	91 1d       	adc	r25, r1
    8a2e:	96 95       	lsr	r25
    8a30:	87 95       	ror	r24
    8a32:	97 f9       	bld	r25, 7
    8a34:	08 95       	ret
    8a36:	5f 3f       	cpi	r21, 0xFF	; 255
    8a38:	ac f0       	brlt	.+42     	; 0x8a64 <ldexp+0x66>
    8a3a:	98 3e       	cpi	r25, 0xE8	; 232
    8a3c:	9c f0       	brlt	.+38     	; 0x8a64 <ldexp+0x66>
    8a3e:	bb 27       	eor	r27, r27
    8a40:	86 95       	lsr	r24
    8a42:	77 95       	ror	r23
    8a44:	67 95       	ror	r22
    8a46:	b7 95       	ror	r27
    8a48:	08 f4       	brcc	.+2      	; 0x8a4c <ldexp+0x4e>
    8a4a:	b1 60       	ori	r27, 0x01	; 1
    8a4c:	93 95       	inc	r25
    8a4e:	c1 f7       	brne	.-16     	; 0x8a40 <ldexp+0x42>
    8a50:	bb 0f       	add	r27, r27
    8a52:	58 f7       	brcc	.-42     	; 0x8a2a <ldexp+0x2c>
    8a54:	11 f4       	brne	.+4      	; 0x8a5a <ldexp+0x5c>
    8a56:	60 ff       	sbrs	r22, 0
    8a58:	e8 cf       	rjmp	.-48     	; 0x8a2a <ldexp+0x2c>
    8a5a:	6f 5f       	subi	r22, 0xFF	; 255
    8a5c:	7f 4f       	sbci	r23, 0xFF	; 255
    8a5e:	8f 4f       	sbci	r24, 0xFF	; 255
    8a60:	9f 4f       	sbci	r25, 0xFF	; 255
    8a62:	e3 cf       	rjmp	.-58     	; 0x8a2a <ldexp+0x2c>
    8a64:	b4 ce       	rjmp	.-664    	; 0x87ce <__fp_szero>
    8a66:	0e f0       	brts	.+2      	; 0x8a6a <ldexp+0x6c>
    8a68:	a9 cf       	rjmp	.-174    	; 0x89bc <__fp_mpack>
    8a6a:	fe cd       	rjmp	.-1028   	; 0x8668 <__fp_nan>
    8a6c:	68 94       	set
    8a6e:	f6 cd       	rjmp	.-1044   	; 0x865c <__fp_inf>

00008a70 <log>:
    8a70:	93 de       	rcall	.-730    	; 0x8798 <__fp_splitA>
    8a72:	c8 f3       	brcs	.-14     	; 0x8a66 <ldexp+0x68>
    8a74:	99 23       	and	r25, r25
    8a76:	d1 f3       	breq	.-12     	; 0x8a6c <ldexp+0x6e>
    8a78:	c6 f3       	brts	.-16     	; 0x8a6a <ldexp+0x6c>
    8a7a:	df 93       	push	r29
    8a7c:	cf 93       	push	r28
    8a7e:	1f 93       	push	r17
    8a80:	0f 93       	push	r16
    8a82:	ff 92       	push	r15
    8a84:	c9 2f       	mov	r28, r25
    8a86:	dd 27       	eor	r29, r29
    8a88:	88 23       	and	r24, r24
    8a8a:	2a f0       	brmi	.+10     	; 0x8a96 <log+0x26>
    8a8c:	21 97       	sbiw	r28, 0x01	; 1
    8a8e:	66 0f       	add	r22, r22
    8a90:	77 1f       	adc	r23, r23
    8a92:	88 1f       	adc	r24, r24
    8a94:	da f7       	brpl	.-10     	; 0x8a8c <log+0x1c>
    8a96:	20 e0       	ldi	r18, 0x00	; 0
    8a98:	30 e0       	ldi	r19, 0x00	; 0
    8a9a:	40 e8       	ldi	r20, 0x80	; 128
    8a9c:	5f eb       	ldi	r21, 0xBF	; 191
    8a9e:	9f e3       	ldi	r25, 0x3F	; 63
    8aa0:	88 39       	cpi	r24, 0x98	; 152
    8aa2:	20 f0       	brcs	.+8      	; 0x8aac <log+0x3c>
    8aa4:	80 3e       	cpi	r24, 0xE0	; 224
    8aa6:	30 f0       	brcs	.+12     	; 0x8ab4 <log+0x44>
    8aa8:	21 96       	adiw	r28, 0x01	; 1
    8aaa:	8f 77       	andi	r24, 0x7F	; 127
    8aac:	3c dc       	rcall	.-1928   	; 0x8326 <__addsf3>
    8aae:	ec e3       	ldi	r30, 0x3C	; 60
    8ab0:	f2 e0       	ldi	r31, 0x02	; 2
    8ab2:	03 c0       	rjmp	.+6      	; 0x8aba <log+0x4a>
    8ab4:	38 dc       	rcall	.-1936   	; 0x8326 <__addsf3>
    8ab6:	e9 e6       	ldi	r30, 0x69	; 105
    8ab8:	f2 e0       	ldi	r31, 0x02	; 2
    8aba:	e9 dd       	rcall	.-1070   	; 0x868e <__fp_powser>
    8abc:	8b 01       	movw	r16, r22
    8abe:	be 01       	movw	r22, r28
    8ac0:	ec 01       	movw	r28, r24
    8ac2:	fb 2e       	mov	r15, r27
    8ac4:	6f 57       	subi	r22, 0x7F	; 127
    8ac6:	71 09       	sbc	r23, r1
    8ac8:	75 95       	asr	r23
    8aca:	77 1f       	adc	r23, r23
    8acc:	88 0b       	sbc	r24, r24
    8ace:	99 0b       	sbc	r25, r25
    8ad0:	66 dd       	rcall	.-1332   	; 0x859e <__floatsisf>
    8ad2:	28 e1       	ldi	r18, 0x18	; 24
    8ad4:	32 e7       	ldi	r19, 0x72	; 114
    8ad6:	41 e3       	ldi	r20, 0x31	; 49
    8ad8:	5f e3       	ldi	r21, 0x3F	; 63
    8ada:	96 de       	rcall	.-724    	; 0x8808 <__mulsf3x>
    8adc:	af 2d       	mov	r26, r15
    8ade:	98 01       	movw	r18, r16
    8ae0:	ae 01       	movw	r20, r28
    8ae2:	ff 90       	pop	r15
    8ae4:	0f 91       	pop	r16
    8ae6:	1f 91       	pop	r17
    8ae8:	cf 91       	pop	r28
    8aea:	df 91       	pop	r29
    8aec:	2d dc       	rcall	.-1958   	; 0x8348 <__addsf3x>
    8aee:	2a ce       	rjmp	.-940    	; 0x8744 <__fp_round>

00008af0 <modf>:
    8af0:	fa 01       	movw	r30, r20
    8af2:	dc 01       	movw	r26, r24
    8af4:	aa 0f       	add	r26, r26
    8af6:	bb 1f       	adc	r27, r27
    8af8:	9b 01       	movw	r18, r22
    8afa:	ac 01       	movw	r20, r24
    8afc:	bf 57       	subi	r27, 0x7F	; 127
    8afe:	28 f4       	brcc	.+10     	; 0x8b0a <modf+0x1a>
    8b00:	22 27       	eor	r18, r18
    8b02:	33 27       	eor	r19, r19
    8b04:	44 27       	eor	r20, r20
    8b06:	50 78       	andi	r21, 0x80	; 128
    8b08:	1f c0       	rjmp	.+62     	; 0x8b48 <modf+0x58>
    8b0a:	b7 51       	subi	r27, 0x17	; 23
    8b0c:	88 f4       	brcc	.+34     	; 0x8b30 <modf+0x40>
    8b0e:	ab 2f       	mov	r26, r27
    8b10:	00 24       	eor	r0, r0
    8b12:	46 95       	lsr	r20
    8b14:	37 95       	ror	r19
    8b16:	27 95       	ror	r18
    8b18:	01 1c       	adc	r0, r1
    8b1a:	a3 95       	inc	r26
    8b1c:	d2 f3       	brmi	.-12     	; 0x8b12 <modf+0x22>
    8b1e:	00 20       	and	r0, r0
    8b20:	69 f0       	breq	.+26     	; 0x8b3c <modf+0x4c>
    8b22:	22 0f       	add	r18, r18
    8b24:	33 1f       	adc	r19, r19
    8b26:	44 1f       	adc	r20, r20
    8b28:	b3 95       	inc	r27
    8b2a:	da f3       	brmi	.-10     	; 0x8b22 <modf+0x32>
    8b2c:	0d d0       	rcall	.+26     	; 0x8b48 <modf+0x58>
    8b2e:	fa cb       	rjmp	.-2060   	; 0x8324 <__subsf3>
    8b30:	61 30       	cpi	r22, 0x01	; 1
    8b32:	71 05       	cpc	r23, r1
    8b34:	a0 e8       	ldi	r26, 0x80	; 128
    8b36:	8a 07       	cpc	r24, r26
    8b38:	b9 46       	sbci	r27, 0x69	; 105
    8b3a:	30 f4       	brcc	.+12     	; 0x8b48 <modf+0x58>
    8b3c:	9b 01       	movw	r18, r22
    8b3e:	ac 01       	movw	r20, r24
    8b40:	66 27       	eor	r22, r22
    8b42:	77 27       	eor	r23, r23
    8b44:	88 27       	eor	r24, r24
    8b46:	90 78       	andi	r25, 0x80	; 128
    8b48:	30 96       	adiw	r30, 0x00	; 0
    8b4a:	21 f0       	breq	.+8      	; 0x8b54 <modf+0x64>
    8b4c:	20 83       	st	Z, r18
    8b4e:	31 83       	std	Z+1, r19	; 0x01
    8b50:	42 83       	std	Z+2, r20	; 0x02
    8b52:	53 83       	std	Z+3, r21	; 0x03
    8b54:	08 95       	ret

00008b56 <vfprintf>:
    8b56:	2f 92       	push	r2
    8b58:	3f 92       	push	r3
    8b5a:	4f 92       	push	r4
    8b5c:	5f 92       	push	r5
    8b5e:	6f 92       	push	r6
    8b60:	7f 92       	push	r7
    8b62:	8f 92       	push	r8
    8b64:	9f 92       	push	r9
    8b66:	af 92       	push	r10
    8b68:	bf 92       	push	r11
    8b6a:	cf 92       	push	r12
    8b6c:	df 92       	push	r13
    8b6e:	ef 92       	push	r14
    8b70:	ff 92       	push	r15
    8b72:	0f 93       	push	r16
    8b74:	1f 93       	push	r17
    8b76:	cf 93       	push	r28
    8b78:	df 93       	push	r29
    8b7a:	cd b7       	in	r28, 0x3d	; 61
    8b7c:	de b7       	in	r29, 0x3e	; 62
    8b7e:	63 97       	sbiw	r28, 0x13	; 19
    8b80:	0f b6       	in	r0, 0x3f	; 63
    8b82:	f8 94       	cli
    8b84:	de bf       	out	0x3e, r29	; 62
    8b86:	0f be       	out	0x3f, r0	; 63
    8b88:	cd bf       	out	0x3d, r28	; 61
    8b8a:	6c 01       	movw	r12, r24
    8b8c:	4b 01       	movw	r8, r22
    8b8e:	2a 01       	movw	r4, r20
    8b90:	fc 01       	movw	r30, r24
    8b92:	17 82       	std	Z+7, r1	; 0x07
    8b94:	16 82       	std	Z+6, r1	; 0x06
    8b96:	83 81       	ldd	r24, Z+3	; 0x03
    8b98:	81 ff       	sbrs	r24, 1
    8b9a:	29 c3       	rjmp	.+1618   	; 0x91ee <vfprintf+0x698>
    8b9c:	ae 01       	movw	r20, r28
    8b9e:	4f 5f       	subi	r20, 0xFF	; 255
    8ba0:	5f 4f       	sbci	r21, 0xFF	; 255
    8ba2:	3a 01       	movw	r6, r20
    8ba4:	f6 01       	movw	r30, r12
    8ba6:	93 81       	ldd	r25, Z+3	; 0x03
    8ba8:	f4 01       	movw	r30, r8
    8baa:	93 fd       	sbrc	r25, 3
    8bac:	85 91       	lpm	r24, Z+
    8bae:	93 ff       	sbrs	r25, 3
    8bb0:	81 91       	ld	r24, Z+
    8bb2:	4f 01       	movw	r8, r30
    8bb4:	88 23       	and	r24, r24
    8bb6:	09 f4       	brne	.+2      	; 0x8bba <vfprintf+0x64>
    8bb8:	16 c3       	rjmp	.+1580   	; 0x91e6 <vfprintf+0x690>
    8bba:	85 32       	cpi	r24, 0x25	; 37
    8bbc:	39 f4       	brne	.+14     	; 0x8bcc <vfprintf+0x76>
    8bbe:	93 fd       	sbrc	r25, 3
    8bc0:	85 91       	lpm	r24, Z+
    8bc2:	93 ff       	sbrs	r25, 3
    8bc4:	81 91       	ld	r24, Z+
    8bc6:	4f 01       	movw	r8, r30
    8bc8:	85 32       	cpi	r24, 0x25	; 37
    8bca:	31 f4       	brne	.+12     	; 0x8bd8 <vfprintf+0x82>
    8bcc:	b6 01       	movw	r22, r12
    8bce:	90 e0       	ldi	r25, 0x00	; 0
    8bd0:	1f d7       	rcall	.+3646   	; 0x9a10 <fputc>
    8bd2:	52 01       	movw	r10, r4
    8bd4:	25 01       	movw	r4, r10
    8bd6:	e6 cf       	rjmp	.-52     	; 0x8ba4 <vfprintf+0x4e>
    8bd8:	10 e0       	ldi	r17, 0x00	; 0
    8bda:	f1 2c       	mov	r15, r1
    8bdc:	20 e0       	ldi	r18, 0x00	; 0
    8bde:	20 32       	cpi	r18, 0x20	; 32
    8be0:	a0 f4       	brcc	.+40     	; 0x8c0a <vfprintf+0xb4>
    8be2:	8b 32       	cpi	r24, 0x2B	; 43
    8be4:	69 f0       	breq	.+26     	; 0x8c00 <vfprintf+0xaa>
    8be6:	30 f4       	brcc	.+12     	; 0x8bf4 <vfprintf+0x9e>
    8be8:	80 32       	cpi	r24, 0x20	; 32
    8bea:	59 f0       	breq	.+22     	; 0x8c02 <vfprintf+0xac>
    8bec:	83 32       	cpi	r24, 0x23	; 35
    8bee:	69 f4       	brne	.+26     	; 0x8c0a <vfprintf+0xb4>
    8bf0:	20 61       	ori	r18, 0x10	; 16
    8bf2:	2c c0       	rjmp	.+88     	; 0x8c4c <vfprintf+0xf6>
    8bf4:	8d 32       	cpi	r24, 0x2D	; 45
    8bf6:	39 f0       	breq	.+14     	; 0x8c06 <vfprintf+0xb0>
    8bf8:	80 33       	cpi	r24, 0x30	; 48
    8bfa:	39 f4       	brne	.+14     	; 0x8c0a <vfprintf+0xb4>
    8bfc:	21 60       	ori	r18, 0x01	; 1
    8bfe:	26 c0       	rjmp	.+76     	; 0x8c4c <vfprintf+0xf6>
    8c00:	22 60       	ori	r18, 0x02	; 2
    8c02:	24 60       	ori	r18, 0x04	; 4
    8c04:	23 c0       	rjmp	.+70     	; 0x8c4c <vfprintf+0xf6>
    8c06:	28 60       	ori	r18, 0x08	; 8
    8c08:	21 c0       	rjmp	.+66     	; 0x8c4c <vfprintf+0xf6>
    8c0a:	27 fd       	sbrc	r18, 7
    8c0c:	27 c0       	rjmp	.+78     	; 0x8c5c <vfprintf+0x106>
    8c0e:	30 ed       	ldi	r19, 0xD0	; 208
    8c10:	38 0f       	add	r19, r24
    8c12:	3a 30       	cpi	r19, 0x0A	; 10
    8c14:	78 f4       	brcc	.+30     	; 0x8c34 <vfprintf+0xde>
    8c16:	26 ff       	sbrs	r18, 6
    8c18:	06 c0       	rjmp	.+12     	; 0x8c26 <vfprintf+0xd0>
    8c1a:	fa e0       	ldi	r31, 0x0A	; 10
    8c1c:	1f 9f       	mul	r17, r31
    8c1e:	30 0d       	add	r19, r0
    8c20:	11 24       	eor	r1, r1
    8c22:	13 2f       	mov	r17, r19
    8c24:	13 c0       	rjmp	.+38     	; 0x8c4c <vfprintf+0xf6>
    8c26:	4a e0       	ldi	r20, 0x0A	; 10
    8c28:	f4 9e       	mul	r15, r20
    8c2a:	30 0d       	add	r19, r0
    8c2c:	11 24       	eor	r1, r1
    8c2e:	f3 2e       	mov	r15, r19
    8c30:	20 62       	ori	r18, 0x20	; 32
    8c32:	0c c0       	rjmp	.+24     	; 0x8c4c <vfprintf+0xf6>
    8c34:	8e 32       	cpi	r24, 0x2E	; 46
    8c36:	21 f4       	brne	.+8      	; 0x8c40 <vfprintf+0xea>
    8c38:	26 fd       	sbrc	r18, 6
    8c3a:	d5 c2       	rjmp	.+1450   	; 0x91e6 <vfprintf+0x690>
    8c3c:	20 64       	ori	r18, 0x40	; 64
    8c3e:	06 c0       	rjmp	.+12     	; 0x8c4c <vfprintf+0xf6>
    8c40:	8c 36       	cpi	r24, 0x6C	; 108
    8c42:	11 f4       	brne	.+4      	; 0x8c48 <vfprintf+0xf2>
    8c44:	20 68       	ori	r18, 0x80	; 128
    8c46:	02 c0       	rjmp	.+4      	; 0x8c4c <vfprintf+0xf6>
    8c48:	88 36       	cpi	r24, 0x68	; 104
    8c4a:	41 f4       	brne	.+16     	; 0x8c5c <vfprintf+0x106>
    8c4c:	f4 01       	movw	r30, r8
    8c4e:	93 fd       	sbrc	r25, 3
    8c50:	85 91       	lpm	r24, Z+
    8c52:	93 ff       	sbrs	r25, 3
    8c54:	81 91       	ld	r24, Z+
    8c56:	4f 01       	movw	r8, r30
    8c58:	81 11       	cpse	r24, r1
    8c5a:	c1 cf       	rjmp	.-126    	; 0x8bde <vfprintf+0x88>
    8c5c:	9b eb       	ldi	r25, 0xBB	; 187
    8c5e:	98 0f       	add	r25, r24
    8c60:	93 30       	cpi	r25, 0x03	; 3
    8c62:	18 f4       	brcc	.+6      	; 0x8c6a <vfprintf+0x114>
    8c64:	20 61       	ori	r18, 0x10	; 16
    8c66:	80 5e       	subi	r24, 0xE0	; 224
    8c68:	06 c0       	rjmp	.+12     	; 0x8c76 <vfprintf+0x120>
    8c6a:	9b e9       	ldi	r25, 0x9B	; 155
    8c6c:	98 0f       	add	r25, r24
    8c6e:	93 30       	cpi	r25, 0x03	; 3
    8c70:	08 f0       	brcs	.+2      	; 0x8c74 <vfprintf+0x11e>
    8c72:	64 c1       	rjmp	.+712    	; 0x8f3c <vfprintf+0x3e6>
    8c74:	2f 7e       	andi	r18, 0xEF	; 239
    8c76:	26 ff       	sbrs	r18, 6
    8c78:	16 e0       	ldi	r17, 0x06	; 6
    8c7a:	2f 73       	andi	r18, 0x3F	; 63
    8c7c:	32 2e       	mov	r3, r18
    8c7e:	85 36       	cpi	r24, 0x65	; 101
    8c80:	19 f4       	brne	.+6      	; 0x8c88 <vfprintf+0x132>
    8c82:	20 64       	ori	r18, 0x40	; 64
    8c84:	32 2e       	mov	r3, r18
    8c86:	08 c0       	rjmp	.+16     	; 0x8c98 <vfprintf+0x142>
    8c88:	86 36       	cpi	r24, 0x66	; 102
    8c8a:	21 f4       	brne	.+8      	; 0x8c94 <vfprintf+0x13e>
    8c8c:	f2 2f       	mov	r31, r18
    8c8e:	f0 68       	ori	r31, 0x80	; 128
    8c90:	3f 2e       	mov	r3, r31
    8c92:	02 c0       	rjmp	.+4      	; 0x8c98 <vfprintf+0x142>
    8c94:	11 11       	cpse	r17, r1
    8c96:	11 50       	subi	r17, 0x01	; 1
    8c98:	37 fe       	sbrs	r3, 7
    8c9a:	07 c0       	rjmp	.+14     	; 0x8caa <vfprintf+0x154>
    8c9c:	1c 33       	cpi	r17, 0x3C	; 60
    8c9e:	50 f4       	brcc	.+20     	; 0x8cb4 <vfprintf+0x15e>
    8ca0:	ee 24       	eor	r14, r14
    8ca2:	e3 94       	inc	r14
    8ca4:	e1 0e       	add	r14, r17
    8ca6:	27 e0       	ldi	r18, 0x07	; 7
    8ca8:	0b c0       	rjmp	.+22     	; 0x8cc0 <vfprintf+0x16a>
    8caa:	18 30       	cpi	r17, 0x08	; 8
    8cac:	38 f0       	brcs	.+14     	; 0x8cbc <vfprintf+0x166>
    8cae:	27 e0       	ldi	r18, 0x07	; 7
    8cb0:	17 e0       	ldi	r17, 0x07	; 7
    8cb2:	05 c0       	rjmp	.+10     	; 0x8cbe <vfprintf+0x168>
    8cb4:	27 e0       	ldi	r18, 0x07	; 7
    8cb6:	4c e3       	ldi	r20, 0x3C	; 60
    8cb8:	e4 2e       	mov	r14, r20
    8cba:	02 c0       	rjmp	.+4      	; 0x8cc0 <vfprintf+0x16a>
    8cbc:	21 2f       	mov	r18, r17
    8cbe:	e1 2c       	mov	r14, r1
    8cc0:	52 01       	movw	r10, r4
    8cc2:	44 e0       	ldi	r20, 0x04	; 4
    8cc4:	a4 0e       	add	r10, r20
    8cc6:	b1 1c       	adc	r11, r1
    8cc8:	f2 01       	movw	r30, r4
    8cca:	60 81       	ld	r22, Z
    8ccc:	71 81       	ldd	r23, Z+1	; 0x01
    8cce:	82 81       	ldd	r24, Z+2	; 0x02
    8cd0:	93 81       	ldd	r25, Z+3	; 0x03
    8cd2:	0e 2d       	mov	r16, r14
    8cd4:	a3 01       	movw	r20, r6
    8cd6:	ae d5       	rcall	.+2908   	; 0x9834 <__ftoa_engine>
    8cd8:	2c 01       	movw	r4, r24
    8cda:	09 81       	ldd	r16, Y+1	; 0x01
    8cdc:	00 ff       	sbrs	r16, 0
    8cde:	02 c0       	rjmp	.+4      	; 0x8ce4 <vfprintf+0x18e>
    8ce0:	03 ff       	sbrs	r16, 3
    8ce2:	07 c0       	rjmp	.+14     	; 0x8cf2 <vfprintf+0x19c>
    8ce4:	31 fc       	sbrc	r3, 1
    8ce6:	08 c0       	rjmp	.+16     	; 0x8cf8 <vfprintf+0x1a2>
    8ce8:	32 fe       	sbrs	r3, 2
    8cea:	09 c0       	rjmp	.+18     	; 0x8cfe <vfprintf+0x1a8>
    8cec:	30 e2       	ldi	r19, 0x20	; 32
    8cee:	23 2e       	mov	r2, r19
    8cf0:	07 c0       	rjmp	.+14     	; 0x8d00 <vfprintf+0x1aa>
    8cf2:	2d e2       	ldi	r18, 0x2D	; 45
    8cf4:	22 2e       	mov	r2, r18
    8cf6:	04 c0       	rjmp	.+8      	; 0x8d00 <vfprintf+0x1aa>
    8cf8:	9b e2       	ldi	r25, 0x2B	; 43
    8cfa:	29 2e       	mov	r2, r25
    8cfc:	01 c0       	rjmp	.+2      	; 0x8d00 <vfprintf+0x1aa>
    8cfe:	21 2c       	mov	r2, r1
    8d00:	80 2f       	mov	r24, r16
    8d02:	8c 70       	andi	r24, 0x0C	; 12
    8d04:	19 f0       	breq	.+6      	; 0x8d0c <vfprintf+0x1b6>
    8d06:	21 10       	cpse	r2, r1
    8d08:	51 c2       	rjmp	.+1186   	; 0x91ac <vfprintf+0x656>
    8d0a:	8d c2       	rjmp	.+1306   	; 0x9226 <vfprintf+0x6d0>
    8d0c:	37 fe       	sbrs	r3, 7
    8d0e:	0f c0       	rjmp	.+30     	; 0x8d2e <vfprintf+0x1d8>
    8d10:	e4 0c       	add	r14, r4
    8d12:	04 ff       	sbrs	r16, 4
    8d14:	04 c0       	rjmp	.+8      	; 0x8d1e <vfprintf+0x1c8>
    8d16:	8a 81       	ldd	r24, Y+2	; 0x02
    8d18:	81 33       	cpi	r24, 0x31	; 49
    8d1a:	09 f4       	brne	.+2      	; 0x8d1e <vfprintf+0x1c8>
    8d1c:	ea 94       	dec	r14
    8d1e:	1e 14       	cp	r1, r14
    8d20:	74 f5       	brge	.+92     	; 0x8d7e <vfprintf+0x228>
    8d22:	f8 e0       	ldi	r31, 0x08	; 8
    8d24:	fe 15       	cp	r31, r14
    8d26:	78 f5       	brcc	.+94     	; 0x8d86 <vfprintf+0x230>
    8d28:	88 e0       	ldi	r24, 0x08	; 8
    8d2a:	e8 2e       	mov	r14, r24
    8d2c:	2c c0       	rjmp	.+88     	; 0x8d86 <vfprintf+0x230>
    8d2e:	36 fc       	sbrc	r3, 6
    8d30:	2a c0       	rjmp	.+84     	; 0x8d86 <vfprintf+0x230>
    8d32:	81 2f       	mov	r24, r17
    8d34:	90 e0       	ldi	r25, 0x00	; 0
    8d36:	84 15       	cp	r24, r4
    8d38:	95 05       	cpc	r25, r5
    8d3a:	9c f0       	brlt	.+38     	; 0x8d62 <vfprintf+0x20c>
    8d3c:	2c ef       	ldi	r18, 0xFC	; 252
    8d3e:	42 16       	cp	r4, r18
    8d40:	2f ef       	ldi	r18, 0xFF	; 255
    8d42:	52 06       	cpc	r5, r18
    8d44:	74 f0       	brlt	.+28     	; 0x8d62 <vfprintf+0x20c>
    8d46:	43 2d       	mov	r20, r3
    8d48:	40 68       	ori	r20, 0x80	; 128
    8d4a:	34 2e       	mov	r3, r20
    8d4c:	0a c0       	rjmp	.+20     	; 0x8d62 <vfprintf+0x20c>
    8d4e:	e2 e0       	ldi	r30, 0x02	; 2
    8d50:	f0 e0       	ldi	r31, 0x00	; 0
    8d52:	ec 0f       	add	r30, r28
    8d54:	fd 1f       	adc	r31, r29
    8d56:	e1 0f       	add	r30, r17
    8d58:	f1 1d       	adc	r31, r1
    8d5a:	80 81       	ld	r24, Z
    8d5c:	80 33       	cpi	r24, 0x30	; 48
    8d5e:	19 f4       	brne	.+6      	; 0x8d66 <vfprintf+0x210>
    8d60:	11 50       	subi	r17, 0x01	; 1
    8d62:	11 11       	cpse	r17, r1
    8d64:	f4 cf       	rjmp	.-24     	; 0x8d4e <vfprintf+0x1f8>
    8d66:	37 fe       	sbrs	r3, 7
    8d68:	0e c0       	rjmp	.+28     	; 0x8d86 <vfprintf+0x230>
    8d6a:	ee 24       	eor	r14, r14
    8d6c:	e3 94       	inc	r14
    8d6e:	e1 0e       	add	r14, r17
    8d70:	81 2f       	mov	r24, r17
    8d72:	90 e0       	ldi	r25, 0x00	; 0
    8d74:	48 16       	cp	r4, r24
    8d76:	59 06       	cpc	r5, r25
    8d78:	2c f4       	brge	.+10     	; 0x8d84 <vfprintf+0x22e>
    8d7a:	14 19       	sub	r17, r4
    8d7c:	04 c0       	rjmp	.+8      	; 0x8d86 <vfprintf+0x230>
    8d7e:	ee 24       	eor	r14, r14
    8d80:	e3 94       	inc	r14
    8d82:	01 c0       	rjmp	.+2      	; 0x8d86 <vfprintf+0x230>
    8d84:	10 e0       	ldi	r17, 0x00	; 0
    8d86:	37 fe       	sbrs	r3, 7
    8d88:	06 c0       	rjmp	.+12     	; 0x8d96 <vfprintf+0x240>
    8d8a:	14 14       	cp	r1, r4
    8d8c:	15 04       	cpc	r1, r5
    8d8e:	34 f4       	brge	.+12     	; 0x8d9c <vfprintf+0x246>
    8d90:	c2 01       	movw	r24, r4
    8d92:	01 96       	adiw	r24, 0x01	; 1
    8d94:	05 c0       	rjmp	.+10     	; 0x8da0 <vfprintf+0x24a>
    8d96:	85 e0       	ldi	r24, 0x05	; 5
    8d98:	90 e0       	ldi	r25, 0x00	; 0
    8d9a:	02 c0       	rjmp	.+4      	; 0x8da0 <vfprintf+0x24a>
    8d9c:	81 e0       	ldi	r24, 0x01	; 1
    8d9e:	90 e0       	ldi	r25, 0x00	; 0
    8da0:	21 10       	cpse	r2, r1
    8da2:	01 96       	adiw	r24, 0x01	; 1
    8da4:	11 23       	and	r17, r17
    8da6:	31 f0       	breq	.+12     	; 0x8db4 <vfprintf+0x25e>
    8da8:	21 2f       	mov	r18, r17
    8daa:	30 e0       	ldi	r19, 0x00	; 0
    8dac:	2f 5f       	subi	r18, 0xFF	; 255
    8dae:	3f 4f       	sbci	r19, 0xFF	; 255
    8db0:	82 0f       	add	r24, r18
    8db2:	93 1f       	adc	r25, r19
    8db4:	2f 2d       	mov	r18, r15
    8db6:	30 e0       	ldi	r19, 0x00	; 0
    8db8:	82 17       	cp	r24, r18
    8dba:	93 07       	cpc	r25, r19
    8dbc:	14 f4       	brge	.+4      	; 0x8dc2 <vfprintf+0x26c>
    8dbe:	f8 1a       	sub	r15, r24
    8dc0:	01 c0       	rjmp	.+2      	; 0x8dc4 <vfprintf+0x26e>
    8dc2:	f1 2c       	mov	r15, r1
    8dc4:	83 2d       	mov	r24, r3
    8dc6:	89 70       	andi	r24, 0x09	; 9
    8dc8:	41 f4       	brne	.+16     	; 0x8dda <vfprintf+0x284>
    8dca:	ff 20       	and	r15, r15
    8dcc:	31 f0       	breq	.+12     	; 0x8dda <vfprintf+0x284>
    8dce:	b6 01       	movw	r22, r12
    8dd0:	80 e2       	ldi	r24, 0x20	; 32
    8dd2:	90 e0       	ldi	r25, 0x00	; 0
    8dd4:	1d d6       	rcall	.+3130   	; 0x9a10 <fputc>
    8dd6:	fa 94       	dec	r15
    8dd8:	f8 cf       	rjmp	.-16     	; 0x8dca <vfprintf+0x274>
    8dda:	22 20       	and	r2, r2
    8ddc:	21 f0       	breq	.+8      	; 0x8de6 <vfprintf+0x290>
    8dde:	b6 01       	movw	r22, r12
    8de0:	82 2d       	mov	r24, r2
    8de2:	90 e0       	ldi	r25, 0x00	; 0
    8de4:	15 d6       	rcall	.+3114   	; 0x9a10 <fputc>
    8de6:	33 fc       	sbrc	r3, 3
    8de8:	08 c0       	rjmp	.+16     	; 0x8dfa <vfprintf+0x2a4>
    8dea:	ff 20       	and	r15, r15
    8dec:	31 f0       	breq	.+12     	; 0x8dfa <vfprintf+0x2a4>
    8dee:	b6 01       	movw	r22, r12
    8df0:	80 e3       	ldi	r24, 0x30	; 48
    8df2:	90 e0       	ldi	r25, 0x00	; 0
    8df4:	0d d6       	rcall	.+3098   	; 0x9a10 <fputc>
    8df6:	fa 94       	dec	r15
    8df8:	f8 cf       	rjmp	.-16     	; 0x8dea <vfprintf+0x294>
    8dfa:	37 fe       	sbrs	r3, 7
    8dfc:	58 c0       	rjmp	.+176    	; 0x8eae <vfprintf+0x358>
    8dfe:	94 2d       	mov	r25, r4
    8e00:	85 2d       	mov	r24, r5
    8e02:	57 fe       	sbrs	r5, 7
    8e04:	02 c0       	rjmp	.+4      	; 0x8e0a <vfprintf+0x2b4>
    8e06:	90 e0       	ldi	r25, 0x00	; 0
    8e08:	80 e0       	ldi	r24, 0x00	; 0
    8e0a:	29 2e       	mov	r2, r25
    8e0c:	38 2e       	mov	r3, r24
    8e0e:	20 e0       	ldi	r18, 0x00	; 0
    8e10:	30 e0       	ldi	r19, 0x00	; 0
    8e12:	a2 01       	movw	r20, r4
    8e14:	4e 19       	sub	r20, r14
    8e16:	51 09       	sbc	r21, r1
    8e18:	5d 87       	std	Y+13, r21	; 0x0d
    8e1a:	4c 87       	std	Y+12, r20	; 0x0c
    8e1c:	a2 01       	movw	r20, r4
    8e1e:	42 19       	sub	r20, r2
    8e20:	53 09       	sbc	r21, r3
    8e22:	5f 87       	std	Y+15, r21	; 0x0f
    8e24:	4e 87       	std	Y+14, r20	; 0x0e
    8e26:	61 2f       	mov	r22, r17
    8e28:	70 e0       	ldi	r23, 0x00	; 0
    8e2a:	44 27       	eor	r20, r20
    8e2c:	55 27       	eor	r21, r21
    8e2e:	46 1b       	sub	r20, r22
    8e30:	57 0b       	sbc	r21, r23
    8e32:	59 8b       	std	Y+17, r21	; 0x11
    8e34:	48 8b       	std	Y+16, r20	; 0x10
    8e36:	5f ef       	ldi	r21, 0xFF	; 255
    8e38:	25 16       	cp	r2, r21
    8e3a:	35 06       	cpc	r3, r21
    8e3c:	41 f4       	brne	.+16     	; 0x8e4e <vfprintf+0x2f8>
    8e3e:	b6 01       	movw	r22, r12
    8e40:	8e e2       	ldi	r24, 0x2E	; 46
    8e42:	90 e0       	ldi	r25, 0x00	; 0
    8e44:	2a 8b       	std	Y+18, r18	; 0x12
    8e46:	3b 8b       	std	Y+19, r19	; 0x13
    8e48:	e3 d5       	rcall	.+3014   	; 0x9a10 <fputc>
    8e4a:	3b 89       	ldd	r19, Y+19	; 0x13
    8e4c:	2a 89       	ldd	r18, Y+18	; 0x12
    8e4e:	42 14       	cp	r4, r2
    8e50:	53 04       	cpc	r5, r3
    8e52:	6c f0       	brlt	.+26     	; 0x8e6e <vfprintf+0x318>
    8e54:	4c 85       	ldd	r20, Y+12	; 0x0c
    8e56:	5d 85       	ldd	r21, Y+13	; 0x0d
    8e58:	42 15       	cp	r20, r2
    8e5a:	53 05       	cpc	r21, r3
    8e5c:	44 f4       	brge	.+16     	; 0x8e6e <vfprintf+0x318>
    8e5e:	ee 85       	ldd	r30, Y+14	; 0x0e
    8e60:	ff 85       	ldd	r31, Y+15	; 0x0f
    8e62:	e2 0f       	add	r30, r18
    8e64:	f3 1f       	adc	r31, r19
    8e66:	e6 0d       	add	r30, r6
    8e68:	f7 1d       	adc	r31, r7
    8e6a:	81 81       	ldd	r24, Z+1	; 0x01
    8e6c:	01 c0       	rjmp	.+2      	; 0x8e70 <vfprintf+0x31a>
    8e6e:	80 e3       	ldi	r24, 0x30	; 48
    8e70:	51 e0       	ldi	r21, 0x01	; 1
    8e72:	25 1a       	sub	r2, r21
    8e74:	31 08       	sbc	r3, r1
    8e76:	2f 5f       	subi	r18, 0xFF	; 255
    8e78:	3f 4f       	sbci	r19, 0xFF	; 255
    8e7a:	48 89       	ldd	r20, Y+16	; 0x10
    8e7c:	59 89       	ldd	r21, Y+17	; 0x11
    8e7e:	24 16       	cp	r2, r20
    8e80:	35 06       	cpc	r3, r21
    8e82:	44 f0       	brlt	.+16     	; 0x8e94 <vfprintf+0x33e>
    8e84:	b6 01       	movw	r22, r12
    8e86:	90 e0       	ldi	r25, 0x00	; 0
    8e88:	2a 8b       	std	Y+18, r18	; 0x12
    8e8a:	3b 8b       	std	Y+19, r19	; 0x13
    8e8c:	c1 d5       	rcall	.+2946   	; 0x9a10 <fputc>
    8e8e:	2a 89       	ldd	r18, Y+18	; 0x12
    8e90:	3b 89       	ldd	r19, Y+19	; 0x13
    8e92:	d1 cf       	rjmp	.-94     	; 0x8e36 <vfprintf+0x2e0>
    8e94:	24 14       	cp	r2, r4
    8e96:	35 04       	cpc	r3, r5
    8e98:	39 f4       	brne	.+14     	; 0x8ea8 <vfprintf+0x352>
    8e9a:	9a 81       	ldd	r25, Y+2	; 0x02
    8e9c:	96 33       	cpi	r25, 0x36	; 54
    8e9e:	18 f4       	brcc	.+6      	; 0x8ea6 <vfprintf+0x350>
    8ea0:	95 33       	cpi	r25, 0x35	; 53
    8ea2:	11 f4       	brne	.+4      	; 0x8ea8 <vfprintf+0x352>
    8ea4:	04 ff       	sbrs	r16, 4
    8ea6:	81 e3       	ldi	r24, 0x31	; 49
    8ea8:	b6 01       	movw	r22, r12
    8eaa:	90 e0       	ldi	r25, 0x00	; 0
    8eac:	45 c0       	rjmp	.+138    	; 0x8f38 <vfprintf+0x3e2>
    8eae:	8a 81       	ldd	r24, Y+2	; 0x02
    8eb0:	81 33       	cpi	r24, 0x31	; 49
    8eb2:	09 f0       	breq	.+2      	; 0x8eb6 <vfprintf+0x360>
    8eb4:	0f 7e       	andi	r16, 0xEF	; 239
    8eb6:	b6 01       	movw	r22, r12
    8eb8:	90 e0       	ldi	r25, 0x00	; 0
    8eba:	aa d5       	rcall	.+2900   	; 0x9a10 <fputc>
    8ebc:	11 11       	cpse	r17, r1
    8ebe:	05 c0       	rjmp	.+10     	; 0x8eca <vfprintf+0x374>
    8ec0:	34 fc       	sbrc	r3, 4
    8ec2:	16 c0       	rjmp	.+44     	; 0x8ef0 <vfprintf+0x39a>
    8ec4:	85 e6       	ldi	r24, 0x65	; 101
    8ec6:	90 e0       	ldi	r25, 0x00	; 0
    8ec8:	15 c0       	rjmp	.+42     	; 0x8ef4 <vfprintf+0x39e>
    8eca:	b6 01       	movw	r22, r12
    8ecc:	8e e2       	ldi	r24, 0x2E	; 46
    8ece:	90 e0       	ldi	r25, 0x00	; 0
    8ed0:	9f d5       	rcall	.+2878   	; 0x9a10 <fputc>
    8ed2:	82 e0       	ldi	r24, 0x02	; 2
    8ed4:	ee 24       	eor	r14, r14
    8ed6:	e3 94       	inc	r14
    8ed8:	e8 0e       	add	r14, r24
    8eda:	f3 01       	movw	r30, r6
    8edc:	e8 0f       	add	r30, r24
    8ede:	f1 1d       	adc	r31, r1
    8ee0:	80 81       	ld	r24, Z
    8ee2:	b6 01       	movw	r22, r12
    8ee4:	90 e0       	ldi	r25, 0x00	; 0
    8ee6:	94 d5       	rcall	.+2856   	; 0x9a10 <fputc>
    8ee8:	11 50       	subi	r17, 0x01	; 1
    8eea:	8e 2d       	mov	r24, r14
    8eec:	99 f7       	brne	.-26     	; 0x8ed4 <vfprintf+0x37e>
    8eee:	e8 cf       	rjmp	.-48     	; 0x8ec0 <vfprintf+0x36a>
    8ef0:	85 e4       	ldi	r24, 0x45	; 69
    8ef2:	90 e0       	ldi	r25, 0x00	; 0
    8ef4:	b6 01       	movw	r22, r12
    8ef6:	8c d5       	rcall	.+2840   	; 0x9a10 <fputc>
    8ef8:	57 fc       	sbrc	r5, 7
    8efa:	05 c0       	rjmp	.+10     	; 0x8f06 <vfprintf+0x3b0>
    8efc:	41 14       	cp	r4, r1
    8efe:	51 04       	cpc	r5, r1
    8f00:	39 f4       	brne	.+14     	; 0x8f10 <vfprintf+0x3ba>
    8f02:	04 ff       	sbrs	r16, 4
    8f04:	05 c0       	rjmp	.+10     	; 0x8f10 <vfprintf+0x3ba>
    8f06:	51 94       	neg	r5
    8f08:	41 94       	neg	r4
    8f0a:	51 08       	sbc	r5, r1
    8f0c:	8d e2       	ldi	r24, 0x2D	; 45
    8f0e:	01 c0       	rjmp	.+2      	; 0x8f12 <vfprintf+0x3bc>
    8f10:	8b e2       	ldi	r24, 0x2B	; 43
    8f12:	b6 01       	movw	r22, r12
    8f14:	90 e0       	ldi	r25, 0x00	; 0
    8f16:	7c d5       	rcall	.+2808   	; 0x9a10 <fputc>
    8f18:	80 e3       	ldi	r24, 0x30	; 48
    8f1a:	9a e0       	ldi	r25, 0x0A	; 10
    8f1c:	49 16       	cp	r4, r25
    8f1e:	51 04       	cpc	r5, r1
    8f20:	2c f0       	brlt	.+10     	; 0x8f2c <vfprintf+0x3d6>
    8f22:	8f 5f       	subi	r24, 0xFF	; 255
    8f24:	5a e0       	ldi	r21, 0x0A	; 10
    8f26:	45 1a       	sub	r4, r21
    8f28:	51 08       	sbc	r5, r1
    8f2a:	f7 cf       	rjmp	.-18     	; 0x8f1a <vfprintf+0x3c4>
    8f2c:	b6 01       	movw	r22, r12
    8f2e:	90 e0       	ldi	r25, 0x00	; 0
    8f30:	6f d5       	rcall	.+2782   	; 0x9a10 <fputc>
    8f32:	b6 01       	movw	r22, r12
    8f34:	c2 01       	movw	r24, r4
    8f36:	c0 96       	adiw	r24, 0x30	; 48
    8f38:	6b d5       	rcall	.+2774   	; 0x9a10 <fputc>
    8f3a:	4c c1       	rjmp	.+664    	; 0x91d4 <vfprintf+0x67e>
    8f3c:	83 36       	cpi	r24, 0x63	; 99
    8f3e:	31 f0       	breq	.+12     	; 0x8f4c <vfprintf+0x3f6>
    8f40:	83 37       	cpi	r24, 0x73	; 115
    8f42:	79 f0       	breq	.+30     	; 0x8f62 <vfprintf+0x40c>
    8f44:	83 35       	cpi	r24, 0x53	; 83
    8f46:	09 f0       	breq	.+2      	; 0x8f4a <vfprintf+0x3f4>
    8f48:	54 c0       	rjmp	.+168    	; 0x8ff2 <vfprintf+0x49c>
    8f4a:	20 c0       	rjmp	.+64     	; 0x8f8c <vfprintf+0x436>
    8f4c:	52 01       	movw	r10, r4
    8f4e:	e2 e0       	ldi	r30, 0x02	; 2
    8f50:	ae 0e       	add	r10, r30
    8f52:	b1 1c       	adc	r11, r1
    8f54:	f2 01       	movw	r30, r4
    8f56:	80 81       	ld	r24, Z
    8f58:	89 83       	std	Y+1, r24	; 0x01
    8f5a:	01 e0       	ldi	r16, 0x01	; 1
    8f5c:	10 e0       	ldi	r17, 0x00	; 0
    8f5e:	23 01       	movw	r4, r6
    8f60:	13 c0       	rjmp	.+38     	; 0x8f88 <vfprintf+0x432>
    8f62:	52 01       	movw	r10, r4
    8f64:	f2 e0       	ldi	r31, 0x02	; 2
    8f66:	af 0e       	add	r10, r31
    8f68:	b1 1c       	adc	r11, r1
    8f6a:	f2 01       	movw	r30, r4
    8f6c:	40 80       	ld	r4, Z
    8f6e:	51 80       	ldd	r5, Z+1	; 0x01
    8f70:	26 ff       	sbrs	r18, 6
    8f72:	03 c0       	rjmp	.+6      	; 0x8f7a <vfprintf+0x424>
    8f74:	61 2f       	mov	r22, r17
    8f76:	70 e0       	ldi	r23, 0x00	; 0
    8f78:	02 c0       	rjmp	.+4      	; 0x8f7e <vfprintf+0x428>
    8f7a:	6f ef       	ldi	r22, 0xFF	; 255
    8f7c:	7f ef       	ldi	r23, 0xFF	; 255
    8f7e:	c2 01       	movw	r24, r4
    8f80:	2a 8b       	std	Y+18, r18	; 0x12
    8f82:	3b d5       	rcall	.+2678   	; 0x99fa <strnlen>
    8f84:	8c 01       	movw	r16, r24
    8f86:	2a 89       	ldd	r18, Y+18	; 0x12
    8f88:	2f 77       	andi	r18, 0x7F	; 127
    8f8a:	14 c0       	rjmp	.+40     	; 0x8fb4 <vfprintf+0x45e>
    8f8c:	52 01       	movw	r10, r4
    8f8e:	f2 e0       	ldi	r31, 0x02	; 2
    8f90:	af 0e       	add	r10, r31
    8f92:	b1 1c       	adc	r11, r1
    8f94:	f2 01       	movw	r30, r4
    8f96:	40 80       	ld	r4, Z
    8f98:	51 80       	ldd	r5, Z+1	; 0x01
    8f9a:	26 ff       	sbrs	r18, 6
    8f9c:	03 c0       	rjmp	.+6      	; 0x8fa4 <vfprintf+0x44e>
    8f9e:	61 2f       	mov	r22, r17
    8fa0:	70 e0       	ldi	r23, 0x00	; 0
    8fa2:	02 c0       	rjmp	.+4      	; 0x8fa8 <vfprintf+0x452>
    8fa4:	6f ef       	ldi	r22, 0xFF	; 255
    8fa6:	7f ef       	ldi	r23, 0xFF	; 255
    8fa8:	c2 01       	movw	r24, r4
    8faa:	2a 8b       	std	Y+18, r18	; 0x12
    8fac:	1b d5       	rcall	.+2614   	; 0x99e4 <strnlen_P>
    8fae:	8c 01       	movw	r16, r24
    8fb0:	2a 89       	ldd	r18, Y+18	; 0x12
    8fb2:	20 68       	ori	r18, 0x80	; 128
    8fb4:	32 2e       	mov	r3, r18
    8fb6:	23 fd       	sbrc	r18, 3
    8fb8:	18 c0       	rjmp	.+48     	; 0x8fea <vfprintf+0x494>
    8fba:	8f 2d       	mov	r24, r15
    8fbc:	90 e0       	ldi	r25, 0x00	; 0
    8fbe:	08 17       	cp	r16, r24
    8fc0:	19 07       	cpc	r17, r25
    8fc2:	98 f4       	brcc	.+38     	; 0x8fea <vfprintf+0x494>
    8fc4:	b6 01       	movw	r22, r12
    8fc6:	80 e2       	ldi	r24, 0x20	; 32
    8fc8:	90 e0       	ldi	r25, 0x00	; 0
    8fca:	22 d5       	rcall	.+2628   	; 0x9a10 <fputc>
    8fcc:	fa 94       	dec	r15
    8fce:	f5 cf       	rjmp	.-22     	; 0x8fba <vfprintf+0x464>
    8fd0:	f2 01       	movw	r30, r4
    8fd2:	37 fc       	sbrc	r3, 7
    8fd4:	85 91       	lpm	r24, Z+
    8fd6:	37 fe       	sbrs	r3, 7
    8fd8:	81 91       	ld	r24, Z+
    8fda:	2f 01       	movw	r4, r30
    8fdc:	b6 01       	movw	r22, r12
    8fde:	90 e0       	ldi	r25, 0x00	; 0
    8fe0:	17 d5       	rcall	.+2606   	; 0x9a10 <fputc>
    8fe2:	f1 10       	cpse	r15, r1
    8fe4:	fa 94       	dec	r15
    8fe6:	01 50       	subi	r16, 0x01	; 1
    8fe8:	11 09       	sbc	r17, r1
    8fea:	01 15       	cp	r16, r1
    8fec:	11 05       	cpc	r17, r1
    8fee:	81 f7       	brne	.-32     	; 0x8fd0 <vfprintf+0x47a>
    8ff0:	f1 c0       	rjmp	.+482    	; 0x91d4 <vfprintf+0x67e>
    8ff2:	84 36       	cpi	r24, 0x64	; 100
    8ff4:	11 f0       	breq	.+4      	; 0x8ffa <vfprintf+0x4a4>
    8ff6:	89 36       	cpi	r24, 0x69	; 105
    8ff8:	51 f5       	brne	.+84     	; 0x904e <vfprintf+0x4f8>
    8ffa:	52 01       	movw	r10, r4
    8ffc:	27 ff       	sbrs	r18, 7
    8ffe:	09 c0       	rjmp	.+18     	; 0x9012 <vfprintf+0x4bc>
    9000:	f4 e0       	ldi	r31, 0x04	; 4
    9002:	af 0e       	add	r10, r31
    9004:	b1 1c       	adc	r11, r1
    9006:	f2 01       	movw	r30, r4
    9008:	60 81       	ld	r22, Z
    900a:	71 81       	ldd	r23, Z+1	; 0x01
    900c:	82 81       	ldd	r24, Z+2	; 0x02
    900e:	93 81       	ldd	r25, Z+3	; 0x03
    9010:	0a c0       	rjmp	.+20     	; 0x9026 <vfprintf+0x4d0>
    9012:	f2 e0       	ldi	r31, 0x02	; 2
    9014:	af 0e       	add	r10, r31
    9016:	b1 1c       	adc	r11, r1
    9018:	f2 01       	movw	r30, r4
    901a:	60 81       	ld	r22, Z
    901c:	71 81       	ldd	r23, Z+1	; 0x01
    901e:	07 2e       	mov	r0, r23
    9020:	00 0c       	add	r0, r0
    9022:	88 0b       	sbc	r24, r24
    9024:	99 0b       	sbc	r25, r25
    9026:	2f 76       	andi	r18, 0x6F	; 111
    9028:	32 2e       	mov	r3, r18
    902a:	97 ff       	sbrs	r25, 7
    902c:	09 c0       	rjmp	.+18     	; 0x9040 <vfprintf+0x4ea>
    902e:	90 95       	com	r25
    9030:	80 95       	com	r24
    9032:	70 95       	com	r23
    9034:	61 95       	neg	r22
    9036:	7f 4f       	sbci	r23, 0xFF	; 255
    9038:	8f 4f       	sbci	r24, 0xFF	; 255
    903a:	9f 4f       	sbci	r25, 0xFF	; 255
    903c:	20 68       	ori	r18, 0x80	; 128
    903e:	32 2e       	mov	r3, r18
    9040:	2a e0       	ldi	r18, 0x0A	; 10
    9042:	30 e0       	ldi	r19, 0x00	; 0
    9044:	a3 01       	movw	r20, r6
    9046:	4b d5       	rcall	.+2710   	; 0x9ade <__ultoa_invert>
    9048:	e8 2e       	mov	r14, r24
    904a:	e6 18       	sub	r14, r6
    904c:	3e c0       	rjmp	.+124    	; 0x90ca <vfprintf+0x574>
    904e:	02 2f       	mov	r16, r18
    9050:	85 37       	cpi	r24, 0x75	; 117
    9052:	21 f4       	brne	.+8      	; 0x905c <vfprintf+0x506>
    9054:	0f 7e       	andi	r16, 0xEF	; 239
    9056:	2a e0       	ldi	r18, 0x0A	; 10
    9058:	30 e0       	ldi	r19, 0x00	; 0
    905a:	1d c0       	rjmp	.+58     	; 0x9096 <vfprintf+0x540>
    905c:	09 7f       	andi	r16, 0xF9	; 249
    905e:	8f 36       	cpi	r24, 0x6F	; 111
    9060:	91 f0       	breq	.+36     	; 0x9086 <vfprintf+0x530>
    9062:	18 f4       	brcc	.+6      	; 0x906a <vfprintf+0x514>
    9064:	88 35       	cpi	r24, 0x58	; 88
    9066:	59 f0       	breq	.+22     	; 0x907e <vfprintf+0x528>
    9068:	be c0       	rjmp	.+380    	; 0x91e6 <vfprintf+0x690>
    906a:	80 37       	cpi	r24, 0x70	; 112
    906c:	19 f0       	breq	.+6      	; 0x9074 <vfprintf+0x51e>
    906e:	88 37       	cpi	r24, 0x78	; 120
    9070:	11 f0       	breq	.+4      	; 0x9076 <vfprintf+0x520>
    9072:	b9 c0       	rjmp	.+370    	; 0x91e6 <vfprintf+0x690>
    9074:	00 61       	ori	r16, 0x10	; 16
    9076:	04 ff       	sbrs	r16, 4
    9078:	09 c0       	rjmp	.+18     	; 0x908c <vfprintf+0x536>
    907a:	04 60       	ori	r16, 0x04	; 4
    907c:	07 c0       	rjmp	.+14     	; 0x908c <vfprintf+0x536>
    907e:	24 ff       	sbrs	r18, 4
    9080:	08 c0       	rjmp	.+16     	; 0x9092 <vfprintf+0x53c>
    9082:	06 60       	ori	r16, 0x06	; 6
    9084:	06 c0       	rjmp	.+12     	; 0x9092 <vfprintf+0x53c>
    9086:	28 e0       	ldi	r18, 0x08	; 8
    9088:	30 e0       	ldi	r19, 0x00	; 0
    908a:	05 c0       	rjmp	.+10     	; 0x9096 <vfprintf+0x540>
    908c:	20 e1       	ldi	r18, 0x10	; 16
    908e:	30 e0       	ldi	r19, 0x00	; 0
    9090:	02 c0       	rjmp	.+4      	; 0x9096 <vfprintf+0x540>
    9092:	20 e1       	ldi	r18, 0x10	; 16
    9094:	32 e0       	ldi	r19, 0x02	; 2
    9096:	52 01       	movw	r10, r4
    9098:	07 ff       	sbrs	r16, 7
    909a:	09 c0       	rjmp	.+18     	; 0x90ae <vfprintf+0x558>
    909c:	f4 e0       	ldi	r31, 0x04	; 4
    909e:	af 0e       	add	r10, r31
    90a0:	b1 1c       	adc	r11, r1
    90a2:	f2 01       	movw	r30, r4
    90a4:	60 81       	ld	r22, Z
    90a6:	71 81       	ldd	r23, Z+1	; 0x01
    90a8:	82 81       	ldd	r24, Z+2	; 0x02
    90aa:	93 81       	ldd	r25, Z+3	; 0x03
    90ac:	08 c0       	rjmp	.+16     	; 0x90be <vfprintf+0x568>
    90ae:	f2 e0       	ldi	r31, 0x02	; 2
    90b0:	af 0e       	add	r10, r31
    90b2:	b1 1c       	adc	r11, r1
    90b4:	f2 01       	movw	r30, r4
    90b6:	60 81       	ld	r22, Z
    90b8:	71 81       	ldd	r23, Z+1	; 0x01
    90ba:	80 e0       	ldi	r24, 0x00	; 0
    90bc:	90 e0       	ldi	r25, 0x00	; 0
    90be:	a3 01       	movw	r20, r6
    90c0:	0e d5       	rcall	.+2588   	; 0x9ade <__ultoa_invert>
    90c2:	e8 2e       	mov	r14, r24
    90c4:	e6 18       	sub	r14, r6
    90c6:	0f 77       	andi	r16, 0x7F	; 127
    90c8:	30 2e       	mov	r3, r16
    90ca:	36 fe       	sbrs	r3, 6
    90cc:	0b c0       	rjmp	.+22     	; 0x90e4 <vfprintf+0x58e>
    90ce:	33 2d       	mov	r19, r3
    90d0:	3e 7f       	andi	r19, 0xFE	; 254
    90d2:	e1 16       	cp	r14, r17
    90d4:	50 f4       	brcc	.+20     	; 0x90ea <vfprintf+0x594>
    90d6:	34 fe       	sbrs	r3, 4
    90d8:	0a c0       	rjmp	.+20     	; 0x90ee <vfprintf+0x598>
    90da:	32 fc       	sbrc	r3, 2
    90dc:	08 c0       	rjmp	.+16     	; 0x90ee <vfprintf+0x598>
    90de:	33 2d       	mov	r19, r3
    90e0:	3e 7e       	andi	r19, 0xEE	; 238
    90e2:	05 c0       	rjmp	.+10     	; 0x90ee <vfprintf+0x598>
    90e4:	0e 2d       	mov	r16, r14
    90e6:	33 2d       	mov	r19, r3
    90e8:	03 c0       	rjmp	.+6      	; 0x90f0 <vfprintf+0x59a>
    90ea:	0e 2d       	mov	r16, r14
    90ec:	01 c0       	rjmp	.+2      	; 0x90f0 <vfprintf+0x59a>
    90ee:	01 2f       	mov	r16, r17
    90f0:	34 ff       	sbrs	r19, 4
    90f2:	0c c0       	rjmp	.+24     	; 0x910c <vfprintf+0x5b6>
    90f4:	fe 01       	movw	r30, r28
    90f6:	ee 0d       	add	r30, r14
    90f8:	f1 1d       	adc	r31, r1
    90fa:	80 81       	ld	r24, Z
    90fc:	80 33       	cpi	r24, 0x30	; 48
    90fe:	11 f4       	brne	.+4      	; 0x9104 <vfprintf+0x5ae>
    9100:	39 7e       	andi	r19, 0xE9	; 233
    9102:	08 c0       	rjmp	.+16     	; 0x9114 <vfprintf+0x5be>
    9104:	32 ff       	sbrs	r19, 2
    9106:	05 c0       	rjmp	.+10     	; 0x9112 <vfprintf+0x5bc>
    9108:	0e 5f       	subi	r16, 0xFE	; 254
    910a:	04 c0       	rjmp	.+8      	; 0x9114 <vfprintf+0x5be>
    910c:	83 2f       	mov	r24, r19
    910e:	86 78       	andi	r24, 0x86	; 134
    9110:	09 f0       	breq	.+2      	; 0x9114 <vfprintf+0x5be>
    9112:	0f 5f       	subi	r16, 0xFF	; 255
    9114:	33 fd       	sbrc	r19, 3
    9116:	12 c0       	rjmp	.+36     	; 0x913c <vfprintf+0x5e6>
    9118:	30 ff       	sbrs	r19, 0
    911a:	06 c0       	rjmp	.+12     	; 0x9128 <vfprintf+0x5d2>
    911c:	1e 2d       	mov	r17, r14
    911e:	0f 15       	cp	r16, r15
    9120:	18 f4       	brcc	.+6      	; 0x9128 <vfprintf+0x5d2>
    9122:	1f 0d       	add	r17, r15
    9124:	10 1b       	sub	r17, r16
    9126:	0f 2d       	mov	r16, r15
    9128:	0f 15       	cp	r16, r15
    912a:	60 f4       	brcc	.+24     	; 0x9144 <vfprintf+0x5ee>
    912c:	b6 01       	movw	r22, r12
    912e:	80 e2       	ldi	r24, 0x20	; 32
    9130:	90 e0       	ldi	r25, 0x00	; 0
    9132:	3b 8b       	std	Y+19, r19	; 0x13
    9134:	6d d4       	rcall	.+2266   	; 0x9a10 <fputc>
    9136:	0f 5f       	subi	r16, 0xFF	; 255
    9138:	3b 89       	ldd	r19, Y+19	; 0x13
    913a:	f6 cf       	rjmp	.-20     	; 0x9128 <vfprintf+0x5d2>
    913c:	0f 15       	cp	r16, r15
    913e:	10 f4       	brcc	.+4      	; 0x9144 <vfprintf+0x5ee>
    9140:	f0 1a       	sub	r15, r16
    9142:	01 c0       	rjmp	.+2      	; 0x9146 <vfprintf+0x5f0>
    9144:	f1 2c       	mov	r15, r1
    9146:	34 ff       	sbrs	r19, 4
    9148:	11 c0       	rjmp	.+34     	; 0x916c <vfprintf+0x616>
    914a:	b6 01       	movw	r22, r12
    914c:	80 e3       	ldi	r24, 0x30	; 48
    914e:	90 e0       	ldi	r25, 0x00	; 0
    9150:	3b 8b       	std	Y+19, r19	; 0x13
    9152:	5e d4       	rcall	.+2236   	; 0x9a10 <fputc>
    9154:	3b 89       	ldd	r19, Y+19	; 0x13
    9156:	32 ff       	sbrs	r19, 2
    9158:	16 c0       	rjmp	.+44     	; 0x9186 <vfprintf+0x630>
    915a:	31 fd       	sbrc	r19, 1
    915c:	03 c0       	rjmp	.+6      	; 0x9164 <vfprintf+0x60e>
    915e:	88 e7       	ldi	r24, 0x78	; 120
    9160:	90 e0       	ldi	r25, 0x00	; 0
    9162:	02 c0       	rjmp	.+4      	; 0x9168 <vfprintf+0x612>
    9164:	88 e5       	ldi	r24, 0x58	; 88
    9166:	90 e0       	ldi	r25, 0x00	; 0
    9168:	b6 01       	movw	r22, r12
    916a:	0c c0       	rjmp	.+24     	; 0x9184 <vfprintf+0x62e>
    916c:	83 2f       	mov	r24, r19
    916e:	86 78       	andi	r24, 0x86	; 134
    9170:	51 f0       	breq	.+20     	; 0x9186 <vfprintf+0x630>
    9172:	31 ff       	sbrs	r19, 1
    9174:	02 c0       	rjmp	.+4      	; 0x917a <vfprintf+0x624>
    9176:	8b e2       	ldi	r24, 0x2B	; 43
    9178:	01 c0       	rjmp	.+2      	; 0x917c <vfprintf+0x626>
    917a:	80 e2       	ldi	r24, 0x20	; 32
    917c:	37 fd       	sbrc	r19, 7
    917e:	8d e2       	ldi	r24, 0x2D	; 45
    9180:	b6 01       	movw	r22, r12
    9182:	90 e0       	ldi	r25, 0x00	; 0
    9184:	45 d4       	rcall	.+2186   	; 0x9a10 <fputc>
    9186:	e1 16       	cp	r14, r17
    9188:	30 f4       	brcc	.+12     	; 0x9196 <vfprintf+0x640>
    918a:	b6 01       	movw	r22, r12
    918c:	80 e3       	ldi	r24, 0x30	; 48
    918e:	90 e0       	ldi	r25, 0x00	; 0
    9190:	3f d4       	rcall	.+2174   	; 0x9a10 <fputc>
    9192:	11 50       	subi	r17, 0x01	; 1
    9194:	f8 cf       	rjmp	.-16     	; 0x9186 <vfprintf+0x630>
    9196:	ea 94       	dec	r14
    9198:	f3 01       	movw	r30, r6
    919a:	ee 0d       	add	r30, r14
    919c:	f1 1d       	adc	r31, r1
    919e:	80 81       	ld	r24, Z
    91a0:	b6 01       	movw	r22, r12
    91a2:	90 e0       	ldi	r25, 0x00	; 0
    91a4:	35 d4       	rcall	.+2154   	; 0x9a10 <fputc>
    91a6:	e1 10       	cpse	r14, r1
    91a8:	f6 cf       	rjmp	.-20     	; 0x9196 <vfprintf+0x640>
    91aa:	14 c0       	rjmp	.+40     	; 0x91d4 <vfprintf+0x67e>
    91ac:	f4 e0       	ldi	r31, 0x04	; 4
    91ae:	ff 15       	cp	r31, r15
    91b0:	48 f5       	brcc	.+82     	; 0x9204 <vfprintf+0x6ae>
    91b2:	84 e0       	ldi	r24, 0x04	; 4
    91b4:	f8 1a       	sub	r15, r24
    91b6:	33 fe       	sbrs	r3, 3
    91b8:	1d c0       	rjmp	.+58     	; 0x91f4 <vfprintf+0x69e>
    91ba:	21 10       	cpse	r2, r1
    91bc:	24 c0       	rjmp	.+72     	; 0x9206 <vfprintf+0x6b0>
    91be:	03 ff       	sbrs	r16, 3
    91c0:	27 c0       	rjmp	.+78     	; 0x9210 <vfprintf+0x6ba>
    91c2:	0c ea       	ldi	r16, 0xAC	; 172
    91c4:	15 e0       	ldi	r17, 0x05	; 5
    91c6:	f3 2d       	mov	r31, r3
    91c8:	f0 71       	andi	r31, 0x10	; 16
    91ca:	3f 2e       	mov	r3, r31
    91cc:	f8 01       	movw	r30, r16
    91ce:	84 91       	lpm	r24, Z
    91d0:	81 11       	cpse	r24, r1
    91d2:	21 c0       	rjmp	.+66     	; 0x9216 <vfprintf+0x6c0>
    91d4:	ff 20       	and	r15, r15
    91d6:	09 f4       	brne	.+2      	; 0x91da <vfprintf+0x684>
    91d8:	fd cc       	rjmp	.-1542   	; 0x8bd4 <vfprintf+0x7e>
    91da:	b6 01       	movw	r22, r12
    91dc:	80 e2       	ldi	r24, 0x20	; 32
    91de:	90 e0       	ldi	r25, 0x00	; 0
    91e0:	17 d4       	rcall	.+2094   	; 0x9a10 <fputc>
    91e2:	fa 94       	dec	r15
    91e4:	f7 cf       	rjmp	.-18     	; 0x91d4 <vfprintf+0x67e>
    91e6:	f6 01       	movw	r30, r12
    91e8:	86 81       	ldd	r24, Z+6	; 0x06
    91ea:	97 81       	ldd	r25, Z+7	; 0x07
    91ec:	23 c0       	rjmp	.+70     	; 0x9234 <vfprintf+0x6de>
    91ee:	8f ef       	ldi	r24, 0xFF	; 255
    91f0:	9f ef       	ldi	r25, 0xFF	; 255
    91f2:	20 c0       	rjmp	.+64     	; 0x9234 <vfprintf+0x6de>
    91f4:	b6 01       	movw	r22, r12
    91f6:	80 e2       	ldi	r24, 0x20	; 32
    91f8:	90 e0       	ldi	r25, 0x00	; 0
    91fa:	0a d4       	rcall	.+2068   	; 0x9a10 <fputc>
    91fc:	fa 94       	dec	r15
    91fe:	f1 10       	cpse	r15, r1
    9200:	f9 cf       	rjmp	.-14     	; 0x91f4 <vfprintf+0x69e>
    9202:	db cf       	rjmp	.-74     	; 0x91ba <vfprintf+0x664>
    9204:	f1 2c       	mov	r15, r1
    9206:	b6 01       	movw	r22, r12
    9208:	82 2d       	mov	r24, r2
    920a:	90 e0       	ldi	r25, 0x00	; 0
    920c:	01 d4       	rcall	.+2050   	; 0x9a10 <fputc>
    920e:	d7 cf       	rjmp	.-82     	; 0x91be <vfprintf+0x668>
    9210:	00 eb       	ldi	r16, 0xB0	; 176
    9212:	15 e0       	ldi	r17, 0x05	; 5
    9214:	d8 cf       	rjmp	.-80     	; 0x91c6 <vfprintf+0x670>
    9216:	31 10       	cpse	r3, r1
    9218:	80 52       	subi	r24, 0x20	; 32
    921a:	b6 01       	movw	r22, r12
    921c:	90 e0       	ldi	r25, 0x00	; 0
    921e:	f8 d3       	rcall	.+2032   	; 0x9a10 <fputc>
    9220:	0f 5f       	subi	r16, 0xFF	; 255
    9222:	1f 4f       	sbci	r17, 0xFF	; 255
    9224:	d3 cf       	rjmp	.-90     	; 0x91cc <vfprintf+0x676>
    9226:	23 e0       	ldi	r18, 0x03	; 3
    9228:	2f 15       	cp	r18, r15
    922a:	10 f4       	brcc	.+4      	; 0x9230 <vfprintf+0x6da>
    922c:	83 e0       	ldi	r24, 0x03	; 3
    922e:	c2 cf       	rjmp	.-124    	; 0x91b4 <vfprintf+0x65e>
    9230:	f1 2c       	mov	r15, r1
    9232:	c5 cf       	rjmp	.-118    	; 0x91be <vfprintf+0x668>
    9234:	63 96       	adiw	r28, 0x13	; 19
    9236:	0f b6       	in	r0, 0x3f	; 63
    9238:	f8 94       	cli
    923a:	de bf       	out	0x3e, r29	; 62
    923c:	0f be       	out	0x3f, r0	; 63
    923e:	cd bf       	out	0x3d, r28	; 61
    9240:	df 91       	pop	r29
    9242:	cf 91       	pop	r28
    9244:	1f 91       	pop	r17
    9246:	0f 91       	pop	r16
    9248:	ff 90       	pop	r15
    924a:	ef 90       	pop	r14
    924c:	df 90       	pop	r13
    924e:	cf 90       	pop	r12
    9250:	bf 90       	pop	r11
    9252:	af 90       	pop	r10
    9254:	9f 90       	pop	r9
    9256:	8f 90       	pop	r8
    9258:	7f 90       	pop	r7
    925a:	6f 90       	pop	r6
    925c:	5f 90       	pop	r5
    925e:	4f 90       	pop	r4
    9260:	3f 90       	pop	r3
    9262:	2f 90       	pop	r2
    9264:	08 95       	ret

00009266 <__udivmodsi4>:
    9266:	a1 e2       	ldi	r26, 0x21	; 33
    9268:	1a 2e       	mov	r1, r26
    926a:	aa 1b       	sub	r26, r26
    926c:	bb 1b       	sub	r27, r27
    926e:	fd 01       	movw	r30, r26
    9270:	0d c0       	rjmp	.+26     	; 0x928c <__udivmodsi4_ep>

00009272 <__udivmodsi4_loop>:
    9272:	aa 1f       	adc	r26, r26
    9274:	bb 1f       	adc	r27, r27
    9276:	ee 1f       	adc	r30, r30
    9278:	ff 1f       	adc	r31, r31
    927a:	a2 17       	cp	r26, r18
    927c:	b3 07       	cpc	r27, r19
    927e:	e4 07       	cpc	r30, r20
    9280:	f5 07       	cpc	r31, r21
    9282:	20 f0       	brcs	.+8      	; 0x928c <__udivmodsi4_ep>
    9284:	a2 1b       	sub	r26, r18
    9286:	b3 0b       	sbc	r27, r19
    9288:	e4 0b       	sbc	r30, r20
    928a:	f5 0b       	sbc	r31, r21

0000928c <__udivmodsi4_ep>:
    928c:	66 1f       	adc	r22, r22
    928e:	77 1f       	adc	r23, r23
    9290:	88 1f       	adc	r24, r24
    9292:	99 1f       	adc	r25, r25
    9294:	1a 94       	dec	r1
    9296:	69 f7       	brne	.-38     	; 0x9272 <__udivmodsi4_loop>
    9298:	60 95       	com	r22
    929a:	70 95       	com	r23
    929c:	80 95       	com	r24
    929e:	90 95       	com	r25
    92a0:	9b 01       	movw	r18, r22
    92a2:	ac 01       	movw	r20, r24
    92a4:	bd 01       	movw	r22, r26
    92a6:	cf 01       	movw	r24, r30
    92a8:	08 95       	ret

000092aa <__tablejump2__>:
    92aa:	ee 0f       	add	r30, r30
    92ac:	ff 1f       	adc	r31, r31
    92ae:	00 24       	eor	r0, r0
    92b0:	00 1c       	adc	r0, r0
    92b2:	0b be       	out	0x3b, r0	; 59
    92b4:	07 90       	elpm	r0, Z+
    92b6:	f6 91       	elpm	r31, Z
    92b8:	e0 2d       	mov	r30, r0
    92ba:	09 94       	ijmp

000092bc <__umulhisi3>:
    92bc:	a2 9f       	mul	r26, r18
    92be:	b0 01       	movw	r22, r0
    92c0:	b3 9f       	mul	r27, r19
    92c2:	c0 01       	movw	r24, r0
    92c4:	a3 9f       	mul	r26, r19
    92c6:	70 0d       	add	r23, r0
    92c8:	81 1d       	adc	r24, r1
    92ca:	11 24       	eor	r1, r1
    92cc:	91 1d       	adc	r25, r1
    92ce:	b2 9f       	mul	r27, r18
    92d0:	70 0d       	add	r23, r0
    92d2:	81 1d       	adc	r24, r1
    92d4:	11 24       	eor	r1, r1
    92d6:	91 1d       	adc	r25, r1
    92d8:	08 95       	ret

000092da <__muluhisi3>:
    92da:	f0 df       	rcall	.-32     	; 0x92bc <__umulhisi3>
    92dc:	a5 9f       	mul	r26, r21
    92de:	90 0d       	add	r25, r0
    92e0:	b4 9f       	mul	r27, r20
    92e2:	90 0d       	add	r25, r0
    92e4:	a4 9f       	mul	r26, r20
    92e6:	80 0d       	add	r24, r0
    92e8:	91 1d       	adc	r25, r1
    92ea:	11 24       	eor	r1, r1
    92ec:	08 95       	ret

000092ee <__muldi3>:
    92ee:	df 93       	push	r29
    92f0:	cf 93       	push	r28
    92f2:	1f 93       	push	r17
    92f4:	0f 93       	push	r16
    92f6:	9a 9d       	mul	r25, r10
    92f8:	f0 2d       	mov	r31, r0
    92fa:	21 9f       	mul	r18, r17
    92fc:	f0 0d       	add	r31, r0
    92fe:	8b 9d       	mul	r24, r11
    9300:	f0 0d       	add	r31, r0
    9302:	8a 9d       	mul	r24, r10
    9304:	e0 2d       	mov	r30, r0
    9306:	f1 0d       	add	r31, r1
    9308:	03 9f       	mul	r16, r19
    930a:	f0 0d       	add	r31, r0
    930c:	02 9f       	mul	r16, r18
    930e:	e0 0d       	add	r30, r0
    9310:	f1 1d       	adc	r31, r1
    9312:	4e 9d       	mul	r20, r14
    9314:	e0 0d       	add	r30, r0
    9316:	f1 1d       	adc	r31, r1
    9318:	5e 9d       	mul	r21, r14
    931a:	f0 0d       	add	r31, r0
    931c:	4f 9d       	mul	r20, r15
    931e:	f0 0d       	add	r31, r0
    9320:	7f 93       	push	r23
    9322:	6f 93       	push	r22
    9324:	bf 92       	push	r11
    9326:	af 92       	push	r10
    9328:	5f 93       	push	r21
    932a:	4f 93       	push	r20
    932c:	d5 01       	movw	r26, r10
    932e:	c6 df       	rcall	.-116    	; 0x92bc <__umulhisi3>
    9330:	8b 01       	movw	r16, r22
    9332:	ac 01       	movw	r20, r24
    9334:	d7 01       	movw	r26, r14
    9336:	c2 df       	rcall	.-124    	; 0x92bc <__umulhisi3>
    9338:	eb 01       	movw	r28, r22
    933a:	e8 0f       	add	r30, r24
    933c:	f9 1f       	adc	r31, r25
    933e:	d6 01       	movw	r26, r12
    9340:	1f d0       	rcall	.+62     	; 0x9380 <__muldi3_6>
    9342:	2f 91       	pop	r18
    9344:	3f 91       	pop	r19
    9346:	d6 01       	movw	r26, r12
    9348:	b9 df       	rcall	.-142    	; 0x92bc <__umulhisi3>
    934a:	c6 0f       	add	r28, r22
    934c:	d7 1f       	adc	r29, r23
    934e:	e8 1f       	adc	r30, r24
    9350:	f9 1f       	adc	r31, r25
    9352:	af 91       	pop	r26
    9354:	bf 91       	pop	r27
    9356:	14 d0       	rcall	.+40     	; 0x9380 <__muldi3_6>
    9358:	2f 91       	pop	r18
    935a:	3f 91       	pop	r19
    935c:	af df       	rcall	.-162    	; 0x92bc <__umulhisi3>
    935e:	c6 0f       	add	r28, r22
    9360:	d7 1f       	adc	r29, r23
    9362:	e8 1f       	adc	r30, r24
    9364:	f9 1f       	adc	r31, r25
    9366:	d6 01       	movw	r26, r12
    9368:	a9 df       	rcall	.-174    	; 0x92bc <__umulhisi3>
    936a:	e6 0f       	add	r30, r22
    936c:	f7 1f       	adc	r31, r23
    936e:	98 01       	movw	r18, r16
    9370:	be 01       	movw	r22, r28
    9372:	cf 01       	movw	r24, r30
    9374:	11 24       	eor	r1, r1
    9376:	0f 91       	pop	r16
    9378:	1f 91       	pop	r17
    937a:	cf 91       	pop	r28
    937c:	df 91       	pop	r29
    937e:	08 95       	ret

00009380 <__muldi3_6>:
    9380:	9d df       	rcall	.-198    	; 0x92bc <__umulhisi3>
    9382:	46 0f       	add	r20, r22
    9384:	57 1f       	adc	r21, r23
    9386:	c8 1f       	adc	r28, r24
    9388:	d9 1f       	adc	r29, r25
    938a:	08 f4       	brcc	.+2      	; 0x938e <__muldi3_6+0xe>
    938c:	31 96       	adiw	r30, 0x01	; 1
    938e:	08 95       	ret

00009390 <__moddi3>:
    9390:	68 94       	set
    9392:	01 c0       	rjmp	.+2      	; 0x9396 <__divdi3_moddi3>

00009394 <__divdi3>:
    9394:	e8 94       	clt

00009396 <__divdi3_moddi3>:
    9396:	f9 2f       	mov	r31, r25
    9398:	f1 2b       	or	r31, r17
    939a:	0a f0       	brmi	.+2      	; 0x939e <__divdi3_moddi3+0x8>
    939c:	27 c0       	rjmp	.+78     	; 0x93ec <__udivdi3_umoddi3>
    939e:	a0 e0       	ldi	r26, 0x00	; 0
    93a0:	b0 e0       	ldi	r27, 0x00	; 0
    93a2:	e4 ed       	ldi	r30, 0xD4	; 212
    93a4:	f9 e4       	ldi	r31, 0x49	; 73
    93a6:	93 c0       	rjmp	.+294    	; 0x94ce <__prologue_saves__+0xc>
    93a8:	09 2e       	mov	r0, r25
    93aa:	05 94       	asr	r0
    93ac:	1a f4       	brpl	.+6      	; 0x93b4 <__divdi3_moddi3+0x1e>
    93ae:	79 d0       	rcall	.+242    	; 0x94a2 <__negdi2>
    93b0:	11 23       	and	r17, r17
    93b2:	92 f4       	brpl	.+36     	; 0x93d8 <__divdi3_moddi3+0x42>
    93b4:	f0 e8       	ldi	r31, 0x80	; 128
    93b6:	0f 26       	eor	r0, r31
    93b8:	ff ef       	ldi	r31, 0xFF	; 255
    93ba:	e0 94       	com	r14
    93bc:	f0 94       	com	r15
    93be:	00 95       	com	r16
    93c0:	10 95       	com	r17
    93c2:	b0 94       	com	r11
    93c4:	c0 94       	com	r12
    93c6:	d0 94       	com	r13
    93c8:	a1 94       	neg	r10
    93ca:	bf 0a       	sbc	r11, r31
    93cc:	cf 0a       	sbc	r12, r31
    93ce:	df 0a       	sbc	r13, r31
    93d0:	ef 0a       	sbc	r14, r31
    93d2:	ff 0a       	sbc	r15, r31
    93d4:	0f 0b       	sbc	r16, r31
    93d6:	1f 0b       	sbc	r17, r31
    93d8:	13 d0       	rcall	.+38     	; 0x9400 <__udivmod64>
    93da:	07 fc       	sbrc	r0, 7
    93dc:	62 d0       	rcall	.+196    	; 0x94a2 <__negdi2>
    93de:	cd b7       	in	r28, 0x3d	; 61
    93e0:	de b7       	in	r29, 0x3e	; 62
    93e2:	ec e0       	ldi	r30, 0x0C	; 12
    93e4:	90 c0       	rjmp	.+288    	; 0x9506 <__epilogue_restores__+0xc>

000093e6 <__umoddi3>:
    93e6:	68 94       	set
    93e8:	01 c0       	rjmp	.+2      	; 0x93ec <__udivdi3_umoddi3>

000093ea <__udivdi3>:
    93ea:	e8 94       	clt

000093ec <__udivdi3_umoddi3>:
    93ec:	8f 92       	push	r8
    93ee:	9f 92       	push	r9
    93f0:	cf 93       	push	r28
    93f2:	df 93       	push	r29
    93f4:	05 d0       	rcall	.+10     	; 0x9400 <__udivmod64>
    93f6:	df 91       	pop	r29
    93f8:	cf 91       	pop	r28
    93fa:	9f 90       	pop	r9
    93fc:	8f 90       	pop	r8
    93fe:	08 95       	ret

00009400 <__udivmod64>:
    9400:	88 24       	eor	r8, r8
    9402:	99 24       	eor	r9, r9
    9404:	f4 01       	movw	r30, r8
    9406:	e4 01       	movw	r28, r8
    9408:	b0 e4       	ldi	r27, 0x40	; 64
    940a:	9f 93       	push	r25
    940c:	aa 27       	eor	r26, r26
    940e:	9a 15       	cp	r25, r10
    9410:	8b 04       	cpc	r8, r11
    9412:	9c 04       	cpc	r9, r12
    9414:	ed 05       	cpc	r30, r13
    9416:	fe 05       	cpc	r31, r14
    9418:	cf 05       	cpc	r28, r15
    941a:	d0 07       	cpc	r29, r16
    941c:	a1 07       	cpc	r26, r17
    941e:	98 f4       	brcc	.+38     	; 0x9446 <__udivmod64+0x46>
    9420:	ad 2f       	mov	r26, r29
    9422:	dc 2f       	mov	r29, r28
    9424:	cf 2f       	mov	r28, r31
    9426:	fe 2f       	mov	r31, r30
    9428:	e9 2d       	mov	r30, r9
    942a:	98 2c       	mov	r9, r8
    942c:	89 2e       	mov	r8, r25
    942e:	98 2f       	mov	r25, r24
    9430:	87 2f       	mov	r24, r23
    9432:	76 2f       	mov	r23, r22
    9434:	65 2f       	mov	r22, r21
    9436:	54 2f       	mov	r21, r20
    9438:	43 2f       	mov	r20, r19
    943a:	32 2f       	mov	r19, r18
    943c:	22 27       	eor	r18, r18
    943e:	b8 50       	subi	r27, 0x08	; 8
    9440:	31 f7       	brne	.-52     	; 0x940e <__udivmod64+0xe>
    9442:	bf 91       	pop	r27
    9444:	27 c0       	rjmp	.+78     	; 0x9494 <__udivmod64+0x94>
    9446:	1b 2e       	mov	r1, r27
    9448:	bf 91       	pop	r27
    944a:	bb 27       	eor	r27, r27
    944c:	22 0f       	add	r18, r18
    944e:	33 1f       	adc	r19, r19
    9450:	44 1f       	adc	r20, r20
    9452:	55 1f       	adc	r21, r21
    9454:	66 1f       	adc	r22, r22
    9456:	77 1f       	adc	r23, r23
    9458:	88 1f       	adc	r24, r24
    945a:	99 1f       	adc	r25, r25
    945c:	88 1c       	adc	r8, r8
    945e:	99 1c       	adc	r9, r9
    9460:	ee 1f       	adc	r30, r30
    9462:	ff 1f       	adc	r31, r31
    9464:	cc 1f       	adc	r28, r28
    9466:	dd 1f       	adc	r29, r29
    9468:	aa 1f       	adc	r26, r26
    946a:	bb 1f       	adc	r27, r27
    946c:	8a 14       	cp	r8, r10
    946e:	9b 04       	cpc	r9, r11
    9470:	ec 05       	cpc	r30, r12
    9472:	fd 05       	cpc	r31, r13
    9474:	ce 05       	cpc	r28, r14
    9476:	df 05       	cpc	r29, r15
    9478:	a0 07       	cpc	r26, r16
    947a:	b1 07       	cpc	r27, r17
    947c:	48 f0       	brcs	.+18     	; 0x9490 <__udivmod64+0x90>
    947e:	8a 18       	sub	r8, r10
    9480:	9b 08       	sbc	r9, r11
    9482:	ec 09       	sbc	r30, r12
    9484:	fd 09       	sbc	r31, r13
    9486:	ce 09       	sbc	r28, r14
    9488:	df 09       	sbc	r29, r15
    948a:	a0 0b       	sbc	r26, r16
    948c:	b1 0b       	sbc	r27, r17
    948e:	21 60       	ori	r18, 0x01	; 1
    9490:	1a 94       	dec	r1
    9492:	e1 f6       	brne	.-72     	; 0x944c <__udivmod64+0x4c>
    9494:	2e f4       	brtc	.+10     	; 0x94a0 <__udivmod64+0xa0>
    9496:	94 01       	movw	r18, r8
    9498:	af 01       	movw	r20, r30
    949a:	be 01       	movw	r22, r28
    949c:	cd 01       	movw	r24, r26
    949e:	00 0c       	add	r0, r0
    94a0:	08 95       	ret

000094a2 <__negdi2>:
    94a2:	60 95       	com	r22
    94a4:	70 95       	com	r23
    94a6:	80 95       	com	r24
    94a8:	90 95       	com	r25
    94aa:	30 95       	com	r19
    94ac:	40 95       	com	r20
    94ae:	50 95       	com	r21
    94b0:	21 95       	neg	r18
    94b2:	3f 4f       	sbci	r19, 0xFF	; 255
    94b4:	4f 4f       	sbci	r20, 0xFF	; 255
    94b6:	5f 4f       	sbci	r21, 0xFF	; 255
    94b8:	6f 4f       	sbci	r22, 0xFF	; 255
    94ba:	7f 4f       	sbci	r23, 0xFF	; 255
    94bc:	8f 4f       	sbci	r24, 0xFF	; 255
    94be:	9f 4f       	sbci	r25, 0xFF	; 255
    94c0:	08 95       	ret

000094c2 <__prologue_saves__>:
    94c2:	2f 92       	push	r2
    94c4:	3f 92       	push	r3
    94c6:	4f 92       	push	r4
    94c8:	5f 92       	push	r5
    94ca:	6f 92       	push	r6
    94cc:	7f 92       	push	r7
    94ce:	8f 92       	push	r8
    94d0:	9f 92       	push	r9
    94d2:	af 92       	push	r10
    94d4:	bf 92       	push	r11
    94d6:	cf 92       	push	r12
    94d8:	df 92       	push	r13
    94da:	ef 92       	push	r14
    94dc:	ff 92       	push	r15
    94de:	0f 93       	push	r16
    94e0:	1f 93       	push	r17
    94e2:	cf 93       	push	r28
    94e4:	df 93       	push	r29
    94e6:	cd b7       	in	r28, 0x3d	; 61
    94e8:	de b7       	in	r29, 0x3e	; 62
    94ea:	ca 1b       	sub	r28, r26
    94ec:	db 0b       	sbc	r29, r27
    94ee:	0f b6       	in	r0, 0x3f	; 63
    94f0:	f8 94       	cli
    94f2:	de bf       	out	0x3e, r29	; 62
    94f4:	0f be       	out	0x3f, r0	; 63
    94f6:	cd bf       	out	0x3d, r28	; 61
    94f8:	09 94       	ijmp

000094fa <__epilogue_restores__>:
    94fa:	2a 88       	ldd	r2, Y+18	; 0x12
    94fc:	39 88       	ldd	r3, Y+17	; 0x11
    94fe:	48 88       	ldd	r4, Y+16	; 0x10
    9500:	5f 84       	ldd	r5, Y+15	; 0x0f
    9502:	6e 84       	ldd	r6, Y+14	; 0x0e
    9504:	7d 84       	ldd	r7, Y+13	; 0x0d
    9506:	8c 84       	ldd	r8, Y+12	; 0x0c
    9508:	9b 84       	ldd	r9, Y+11	; 0x0b
    950a:	aa 84       	ldd	r10, Y+10	; 0x0a
    950c:	b9 84       	ldd	r11, Y+9	; 0x09
    950e:	c8 84       	ldd	r12, Y+8	; 0x08
    9510:	df 80       	ldd	r13, Y+7	; 0x07
    9512:	ee 80       	ldd	r14, Y+6	; 0x06
    9514:	fd 80       	ldd	r15, Y+5	; 0x05
    9516:	0c 81       	ldd	r16, Y+4	; 0x04
    9518:	1b 81       	ldd	r17, Y+3	; 0x03
    951a:	aa 81       	ldd	r26, Y+2	; 0x02
    951c:	b9 81       	ldd	r27, Y+1	; 0x01
    951e:	ce 0f       	add	r28, r30
    9520:	d1 1d       	adc	r29, r1
    9522:	0f b6       	in	r0, 0x3f	; 63
    9524:	f8 94       	cli
    9526:	de bf       	out	0x3e, r29	; 62
    9528:	0f be       	out	0x3f, r0	; 63
    952a:	cd bf       	out	0x3d, r28	; 61
    952c:	ed 01       	movw	r28, r26
    952e:	08 95       	ret

00009530 <__ashldi3>:
    9530:	0f 93       	push	r16
    9532:	08 30       	cpi	r16, 0x08	; 8
    9534:	90 f0       	brcs	.+36     	; 0x955a <__ashldi3+0x2a>
    9536:	98 2f       	mov	r25, r24
    9538:	87 2f       	mov	r24, r23
    953a:	76 2f       	mov	r23, r22
    953c:	65 2f       	mov	r22, r21
    953e:	54 2f       	mov	r21, r20
    9540:	43 2f       	mov	r20, r19
    9542:	32 2f       	mov	r19, r18
    9544:	22 27       	eor	r18, r18
    9546:	08 50       	subi	r16, 0x08	; 8
    9548:	f4 cf       	rjmp	.-24     	; 0x9532 <__ashldi3+0x2>
    954a:	22 0f       	add	r18, r18
    954c:	33 1f       	adc	r19, r19
    954e:	44 1f       	adc	r20, r20
    9550:	55 1f       	adc	r21, r21
    9552:	66 1f       	adc	r22, r22
    9554:	77 1f       	adc	r23, r23
    9556:	88 1f       	adc	r24, r24
    9558:	99 1f       	adc	r25, r25
    955a:	0a 95       	dec	r16
    955c:	b2 f7       	brpl	.-20     	; 0x954a <__ashldi3+0x1a>
    955e:	0f 91       	pop	r16
    9560:	08 95       	ret

00009562 <__ashrdi3>:
    9562:	97 fb       	bst	r25, 7
    9564:	10 f8       	bld	r1, 0

00009566 <__lshrdi3>:
    9566:	16 94       	lsr	r1
    9568:	00 08       	sbc	r0, r0
    956a:	0f 93       	push	r16
    956c:	08 30       	cpi	r16, 0x08	; 8
    956e:	98 f0       	brcs	.+38     	; 0x9596 <__lshrdi3+0x30>
    9570:	08 50       	subi	r16, 0x08	; 8
    9572:	23 2f       	mov	r18, r19
    9574:	34 2f       	mov	r19, r20
    9576:	45 2f       	mov	r20, r21
    9578:	56 2f       	mov	r21, r22
    957a:	67 2f       	mov	r22, r23
    957c:	78 2f       	mov	r23, r24
    957e:	89 2f       	mov	r24, r25
    9580:	90 2d       	mov	r25, r0
    9582:	f4 cf       	rjmp	.-24     	; 0x956c <__lshrdi3+0x6>
    9584:	05 94       	asr	r0
    9586:	97 95       	ror	r25
    9588:	87 95       	ror	r24
    958a:	77 95       	ror	r23
    958c:	67 95       	ror	r22
    958e:	57 95       	ror	r21
    9590:	47 95       	ror	r20
    9592:	37 95       	ror	r19
    9594:	27 95       	ror	r18
    9596:	0a 95       	dec	r16
    9598:	aa f7       	brpl	.-22     	; 0x9584 <__lshrdi3+0x1e>
    959a:	0f 91       	pop	r16
    959c:	08 95       	ret

0000959e <__adddi3>:
    959e:	2a 0d       	add	r18, r10
    95a0:	3b 1d       	adc	r19, r11
    95a2:	4c 1d       	adc	r20, r12
    95a4:	5d 1d       	adc	r21, r13
    95a6:	6e 1d       	adc	r22, r14
    95a8:	7f 1d       	adc	r23, r15
    95aa:	80 1f       	adc	r24, r16
    95ac:	91 1f       	adc	r25, r17
    95ae:	08 95       	ret

000095b0 <__adddi3_s8>:
    95b0:	00 24       	eor	r0, r0
    95b2:	a7 fd       	sbrc	r26, 7
    95b4:	00 94       	com	r0
    95b6:	2a 0f       	add	r18, r26
    95b8:	30 1d       	adc	r19, r0
    95ba:	40 1d       	adc	r20, r0
    95bc:	50 1d       	adc	r21, r0
    95be:	60 1d       	adc	r22, r0
    95c0:	70 1d       	adc	r23, r0
    95c2:	80 1d       	adc	r24, r0
    95c4:	90 1d       	adc	r25, r0
    95c6:	08 95       	ret

000095c8 <__subdi3>:
    95c8:	2a 19       	sub	r18, r10
    95ca:	3b 09       	sbc	r19, r11
    95cc:	4c 09       	sbc	r20, r12
    95ce:	5d 09       	sbc	r21, r13
    95d0:	6e 09       	sbc	r22, r14
    95d2:	7f 09       	sbc	r23, r15
    95d4:	80 0b       	sbc	r24, r16
    95d6:	91 0b       	sbc	r25, r17
    95d8:	08 95       	ret

000095da <malloc>:
    95da:	cf 93       	push	r28
    95dc:	df 93       	push	r29
    95de:	82 30       	cpi	r24, 0x02	; 2
    95e0:	91 05       	cpc	r25, r1
    95e2:	10 f4       	brcc	.+4      	; 0x95e8 <malloc+0xe>
    95e4:	82 e0       	ldi	r24, 0x02	; 2
    95e6:	90 e0       	ldi	r25, 0x00	; 0
    95e8:	e0 91 65 0e 	lds	r30, 0x0E65
    95ec:	f0 91 66 0e 	lds	r31, 0x0E66
    95f0:	20 e0       	ldi	r18, 0x00	; 0
    95f2:	30 e0       	ldi	r19, 0x00	; 0
    95f4:	c0 e0       	ldi	r28, 0x00	; 0
    95f6:	d0 e0       	ldi	r29, 0x00	; 0
    95f8:	30 97       	sbiw	r30, 0x00	; 0
    95fa:	11 f1       	breq	.+68     	; 0x9640 <malloc+0x66>
    95fc:	40 81       	ld	r20, Z
    95fe:	51 81       	ldd	r21, Z+1	; 0x01
    9600:	48 17       	cp	r20, r24
    9602:	59 07       	cpc	r21, r25
    9604:	c0 f0       	brcs	.+48     	; 0x9636 <malloc+0x5c>
    9606:	48 17       	cp	r20, r24
    9608:	59 07       	cpc	r21, r25
    960a:	61 f4       	brne	.+24     	; 0x9624 <malloc+0x4a>
    960c:	82 81       	ldd	r24, Z+2	; 0x02
    960e:	93 81       	ldd	r25, Z+3	; 0x03
    9610:	20 97       	sbiw	r28, 0x00	; 0
    9612:	19 f0       	breq	.+6      	; 0x961a <malloc+0x40>
    9614:	9b 83       	std	Y+3, r25	; 0x03
    9616:	8a 83       	std	Y+2, r24	; 0x02
    9618:	2b c0       	rjmp	.+86     	; 0x9670 <malloc+0x96>
    961a:	90 93 66 0e 	sts	0x0E66, r25
    961e:	80 93 65 0e 	sts	0x0E65, r24
    9622:	26 c0       	rjmp	.+76     	; 0x9670 <malloc+0x96>
    9624:	21 15       	cp	r18, r1
    9626:	31 05       	cpc	r19, r1
    9628:	19 f0       	breq	.+6      	; 0x9630 <malloc+0x56>
    962a:	42 17       	cp	r20, r18
    962c:	53 07       	cpc	r21, r19
    962e:	18 f4       	brcc	.+6      	; 0x9636 <malloc+0x5c>
    9630:	9a 01       	movw	r18, r20
    9632:	be 01       	movw	r22, r28
    9634:	df 01       	movw	r26, r30
    9636:	ef 01       	movw	r28, r30
    9638:	02 80       	ldd	r0, Z+2	; 0x02
    963a:	f3 81       	ldd	r31, Z+3	; 0x03
    963c:	e0 2d       	mov	r30, r0
    963e:	dc cf       	rjmp	.-72     	; 0x95f8 <malloc+0x1e>
    9640:	21 15       	cp	r18, r1
    9642:	31 05       	cpc	r19, r1
    9644:	09 f1       	breq	.+66     	; 0x9688 <malloc+0xae>
    9646:	28 1b       	sub	r18, r24
    9648:	39 0b       	sbc	r19, r25
    964a:	24 30       	cpi	r18, 0x04	; 4
    964c:	31 05       	cpc	r19, r1
    964e:	90 f4       	brcc	.+36     	; 0x9674 <malloc+0x9a>
    9650:	12 96       	adiw	r26, 0x02	; 2
    9652:	8d 91       	ld	r24, X+
    9654:	9c 91       	ld	r25, X
    9656:	13 97       	sbiw	r26, 0x03	; 3
    9658:	61 15       	cp	r22, r1
    965a:	71 05       	cpc	r23, r1
    965c:	21 f0       	breq	.+8      	; 0x9666 <malloc+0x8c>
    965e:	fb 01       	movw	r30, r22
    9660:	93 83       	std	Z+3, r25	; 0x03
    9662:	82 83       	std	Z+2, r24	; 0x02
    9664:	04 c0       	rjmp	.+8      	; 0x966e <malloc+0x94>
    9666:	90 93 66 0e 	sts	0x0E66, r25
    966a:	80 93 65 0e 	sts	0x0E65, r24
    966e:	fd 01       	movw	r30, r26
    9670:	32 96       	adiw	r30, 0x02	; 2
    9672:	44 c0       	rjmp	.+136    	; 0x96fc <malloc+0x122>
    9674:	fd 01       	movw	r30, r26
    9676:	e2 0f       	add	r30, r18
    9678:	f3 1f       	adc	r31, r19
    967a:	81 93       	st	Z+, r24
    967c:	91 93       	st	Z+, r25
    967e:	22 50       	subi	r18, 0x02	; 2
    9680:	31 09       	sbc	r19, r1
    9682:	2d 93       	st	X+, r18
    9684:	3c 93       	st	X, r19
    9686:	3a c0       	rjmp	.+116    	; 0x96fc <malloc+0x122>
    9688:	20 91 63 0e 	lds	r18, 0x0E63
    968c:	30 91 64 0e 	lds	r19, 0x0E64
    9690:	23 2b       	or	r18, r19
    9692:	41 f4       	brne	.+16     	; 0x96a4 <malloc+0xca>
    9694:	20 91 02 01 	lds	r18, 0x0102
    9698:	30 91 03 01 	lds	r19, 0x0103
    969c:	30 93 64 0e 	sts	0x0E64, r19
    96a0:	20 93 63 0e 	sts	0x0E63, r18
    96a4:	20 91 00 01 	lds	r18, 0x0100
    96a8:	30 91 01 01 	lds	r19, 0x0101
    96ac:	21 15       	cp	r18, r1
    96ae:	31 05       	cpc	r19, r1
    96b0:	41 f4       	brne	.+16     	; 0x96c2 <malloc+0xe8>
    96b2:	2d b7       	in	r18, 0x3d	; 61
    96b4:	3e b7       	in	r19, 0x3e	; 62
    96b6:	40 91 04 01 	lds	r20, 0x0104
    96ba:	50 91 05 01 	lds	r21, 0x0105
    96be:	24 1b       	sub	r18, r20
    96c0:	35 0b       	sbc	r19, r21
    96c2:	e0 91 63 0e 	lds	r30, 0x0E63
    96c6:	f0 91 64 0e 	lds	r31, 0x0E64
    96ca:	e2 17       	cp	r30, r18
    96cc:	f3 07       	cpc	r31, r19
    96ce:	a0 f4       	brcc	.+40     	; 0x96f8 <malloc+0x11e>
    96d0:	2e 1b       	sub	r18, r30
    96d2:	3f 0b       	sbc	r19, r31
    96d4:	28 17       	cp	r18, r24
    96d6:	39 07       	cpc	r19, r25
    96d8:	78 f0       	brcs	.+30     	; 0x96f8 <malloc+0x11e>
    96da:	ac 01       	movw	r20, r24
    96dc:	4e 5f       	subi	r20, 0xFE	; 254
    96de:	5f 4f       	sbci	r21, 0xFF	; 255
    96e0:	24 17       	cp	r18, r20
    96e2:	35 07       	cpc	r19, r21
    96e4:	48 f0       	brcs	.+18     	; 0x96f8 <malloc+0x11e>
    96e6:	4e 0f       	add	r20, r30
    96e8:	5f 1f       	adc	r21, r31
    96ea:	50 93 64 0e 	sts	0x0E64, r21
    96ee:	40 93 63 0e 	sts	0x0E63, r20
    96f2:	81 93       	st	Z+, r24
    96f4:	91 93       	st	Z+, r25
    96f6:	02 c0       	rjmp	.+4      	; 0x96fc <malloc+0x122>
    96f8:	e0 e0       	ldi	r30, 0x00	; 0
    96fa:	f0 e0       	ldi	r31, 0x00	; 0
    96fc:	cf 01       	movw	r24, r30
    96fe:	df 91       	pop	r29
    9700:	cf 91       	pop	r28
    9702:	08 95       	ret

00009704 <free>:
    9704:	0f 93       	push	r16
    9706:	1f 93       	push	r17
    9708:	cf 93       	push	r28
    970a:	df 93       	push	r29
    970c:	00 97       	sbiw	r24, 0x00	; 0
    970e:	09 f4       	brne	.+2      	; 0x9712 <free+0xe>
    9710:	8c c0       	rjmp	.+280    	; 0x982a <free+0x126>
    9712:	fc 01       	movw	r30, r24
    9714:	32 97       	sbiw	r30, 0x02	; 2
    9716:	13 82       	std	Z+3, r1	; 0x03
    9718:	12 82       	std	Z+2, r1	; 0x02
    971a:	00 91 65 0e 	lds	r16, 0x0E65
    971e:	10 91 66 0e 	lds	r17, 0x0E66
    9722:	01 15       	cp	r16, r1
    9724:	11 05       	cpc	r17, r1
    9726:	81 f4       	brne	.+32     	; 0x9748 <free+0x44>
    9728:	20 81       	ld	r18, Z
    972a:	31 81       	ldd	r19, Z+1	; 0x01
    972c:	82 0f       	add	r24, r18
    972e:	93 1f       	adc	r25, r19
    9730:	20 91 63 0e 	lds	r18, 0x0E63
    9734:	30 91 64 0e 	lds	r19, 0x0E64
    9738:	28 17       	cp	r18, r24
    973a:	39 07       	cpc	r19, r25
    973c:	79 f5       	brne	.+94     	; 0x979c <free+0x98>
    973e:	f0 93 64 0e 	sts	0x0E64, r31
    9742:	e0 93 63 0e 	sts	0x0E63, r30
    9746:	71 c0       	rjmp	.+226    	; 0x982a <free+0x126>
    9748:	d8 01       	movw	r26, r16
    974a:	40 e0       	ldi	r20, 0x00	; 0
    974c:	50 e0       	ldi	r21, 0x00	; 0
    974e:	ae 17       	cp	r26, r30
    9750:	bf 07       	cpc	r27, r31
    9752:	50 f4       	brcc	.+20     	; 0x9768 <free+0x64>
    9754:	12 96       	adiw	r26, 0x02	; 2
    9756:	2d 91       	ld	r18, X+
    9758:	3c 91       	ld	r19, X
    975a:	13 97       	sbiw	r26, 0x03	; 3
    975c:	ad 01       	movw	r20, r26
    975e:	21 15       	cp	r18, r1
    9760:	31 05       	cpc	r19, r1
    9762:	09 f1       	breq	.+66     	; 0x97a6 <free+0xa2>
    9764:	d9 01       	movw	r26, r18
    9766:	f3 cf       	rjmp	.-26     	; 0x974e <free+0x4a>
    9768:	9d 01       	movw	r18, r26
    976a:	da 01       	movw	r26, r20
    976c:	33 83       	std	Z+3, r19	; 0x03
    976e:	22 83       	std	Z+2, r18	; 0x02
    9770:	60 81       	ld	r22, Z
    9772:	71 81       	ldd	r23, Z+1	; 0x01
    9774:	86 0f       	add	r24, r22
    9776:	97 1f       	adc	r25, r23
    9778:	82 17       	cp	r24, r18
    977a:	93 07       	cpc	r25, r19
    977c:	69 f4       	brne	.+26     	; 0x9798 <free+0x94>
    977e:	ec 01       	movw	r28, r24
    9780:	28 81       	ld	r18, Y
    9782:	39 81       	ldd	r19, Y+1	; 0x01
    9784:	26 0f       	add	r18, r22
    9786:	37 1f       	adc	r19, r23
    9788:	2e 5f       	subi	r18, 0xFE	; 254
    978a:	3f 4f       	sbci	r19, 0xFF	; 255
    978c:	31 83       	std	Z+1, r19	; 0x01
    978e:	20 83       	st	Z, r18
    9790:	8a 81       	ldd	r24, Y+2	; 0x02
    9792:	9b 81       	ldd	r25, Y+3	; 0x03
    9794:	93 83       	std	Z+3, r25	; 0x03
    9796:	82 83       	std	Z+2, r24	; 0x02
    9798:	45 2b       	or	r20, r21
    979a:	29 f4       	brne	.+10     	; 0x97a6 <free+0xa2>
    979c:	f0 93 66 0e 	sts	0x0E66, r31
    97a0:	e0 93 65 0e 	sts	0x0E65, r30
    97a4:	42 c0       	rjmp	.+132    	; 0x982a <free+0x126>
    97a6:	13 96       	adiw	r26, 0x03	; 3
    97a8:	fc 93       	st	X, r31
    97aa:	ee 93       	st	-X, r30
    97ac:	12 97       	sbiw	r26, 0x02	; 2
    97ae:	ed 01       	movw	r28, r26
    97b0:	49 91       	ld	r20, Y+
    97b2:	59 91       	ld	r21, Y+
    97b4:	9e 01       	movw	r18, r28
    97b6:	24 0f       	add	r18, r20
    97b8:	35 1f       	adc	r19, r21
    97ba:	e2 17       	cp	r30, r18
    97bc:	f3 07       	cpc	r31, r19
    97be:	71 f4       	brne	.+28     	; 0x97dc <free+0xd8>
    97c0:	80 81       	ld	r24, Z
    97c2:	91 81       	ldd	r25, Z+1	; 0x01
    97c4:	84 0f       	add	r24, r20
    97c6:	95 1f       	adc	r25, r21
    97c8:	02 96       	adiw	r24, 0x02	; 2
    97ca:	11 96       	adiw	r26, 0x01	; 1
    97cc:	9c 93       	st	X, r25
    97ce:	8e 93       	st	-X, r24
    97d0:	82 81       	ldd	r24, Z+2	; 0x02
    97d2:	93 81       	ldd	r25, Z+3	; 0x03
    97d4:	13 96       	adiw	r26, 0x03	; 3
    97d6:	9c 93       	st	X, r25
    97d8:	8e 93       	st	-X, r24
    97da:	12 97       	sbiw	r26, 0x02	; 2
    97dc:	e0 e0       	ldi	r30, 0x00	; 0
    97de:	f0 e0       	ldi	r31, 0x00	; 0
    97e0:	d8 01       	movw	r26, r16
    97e2:	12 96       	adiw	r26, 0x02	; 2
    97e4:	8d 91       	ld	r24, X+
    97e6:	9c 91       	ld	r25, X
    97e8:	13 97       	sbiw	r26, 0x03	; 3
    97ea:	00 97       	sbiw	r24, 0x00	; 0
    97ec:	19 f0       	breq	.+6      	; 0x97f4 <free+0xf0>
    97ee:	f8 01       	movw	r30, r16
    97f0:	8c 01       	movw	r16, r24
    97f2:	f6 cf       	rjmp	.-20     	; 0x97e0 <free+0xdc>
    97f4:	8d 91       	ld	r24, X+
    97f6:	9c 91       	ld	r25, X
    97f8:	98 01       	movw	r18, r16
    97fa:	2e 5f       	subi	r18, 0xFE	; 254
    97fc:	3f 4f       	sbci	r19, 0xFF	; 255
    97fe:	82 0f       	add	r24, r18
    9800:	93 1f       	adc	r25, r19
    9802:	20 91 63 0e 	lds	r18, 0x0E63
    9806:	30 91 64 0e 	lds	r19, 0x0E64
    980a:	28 17       	cp	r18, r24
    980c:	39 07       	cpc	r19, r25
    980e:	69 f4       	brne	.+26     	; 0x982a <free+0x126>
    9810:	30 97       	sbiw	r30, 0x00	; 0
    9812:	29 f4       	brne	.+10     	; 0x981e <free+0x11a>
    9814:	10 92 66 0e 	sts	0x0E66, r1
    9818:	10 92 65 0e 	sts	0x0E65, r1
    981c:	02 c0       	rjmp	.+4      	; 0x9822 <free+0x11e>
    981e:	13 82       	std	Z+3, r1	; 0x03
    9820:	12 82       	std	Z+2, r1	; 0x02
    9822:	10 93 64 0e 	sts	0x0E64, r17
    9826:	00 93 63 0e 	sts	0x0E63, r16
    982a:	df 91       	pop	r29
    982c:	cf 91       	pop	r28
    982e:	1f 91       	pop	r17
    9830:	0f 91       	pop	r16
    9832:	08 95       	ret

00009834 <__ftoa_engine>:
    9834:	28 30       	cpi	r18, 0x08	; 8
    9836:	08 f0       	brcs	.+2      	; 0x983a <__ftoa_engine+0x6>
    9838:	27 e0       	ldi	r18, 0x07	; 7
    983a:	33 27       	eor	r19, r19
    983c:	da 01       	movw	r26, r20
    983e:	99 0f       	add	r25, r25
    9840:	31 1d       	adc	r19, r1
    9842:	87 fd       	sbrc	r24, 7
    9844:	91 60       	ori	r25, 0x01	; 1
    9846:	00 96       	adiw	r24, 0x00	; 0
    9848:	61 05       	cpc	r22, r1
    984a:	71 05       	cpc	r23, r1
    984c:	39 f4       	brne	.+14     	; 0x985c <__ftoa_engine+0x28>
    984e:	32 60       	ori	r19, 0x02	; 2
    9850:	2e 5f       	subi	r18, 0xFE	; 254
    9852:	3d 93       	st	X+, r19
    9854:	30 e3       	ldi	r19, 0x30	; 48
    9856:	2a 95       	dec	r18
    9858:	e1 f7       	brne	.-8      	; 0x9852 <__ftoa_engine+0x1e>
    985a:	08 95       	ret
    985c:	9f 3f       	cpi	r25, 0xFF	; 255
    985e:	30 f0       	brcs	.+12     	; 0x986c <__ftoa_engine+0x38>
    9860:	80 38       	cpi	r24, 0x80	; 128
    9862:	71 05       	cpc	r23, r1
    9864:	61 05       	cpc	r22, r1
    9866:	09 f0       	breq	.+2      	; 0x986a <__ftoa_engine+0x36>
    9868:	3c 5f       	subi	r19, 0xFC	; 252
    986a:	3c 5f       	subi	r19, 0xFC	; 252
    986c:	3d 93       	st	X+, r19
    986e:	91 30       	cpi	r25, 0x01	; 1
    9870:	08 f0       	brcs	.+2      	; 0x9874 <__ftoa_engine+0x40>
    9872:	80 68       	ori	r24, 0x80	; 128
    9874:	91 1d       	adc	r25, r1
    9876:	df 93       	push	r29
    9878:	cf 93       	push	r28
    987a:	1f 93       	push	r17
    987c:	0f 93       	push	r16
    987e:	ff 92       	push	r15
    9880:	ef 92       	push	r14
    9882:	19 2f       	mov	r17, r25
    9884:	98 7f       	andi	r25, 0xF8	; 248
    9886:	96 95       	lsr	r25
    9888:	e9 2f       	mov	r30, r25
    988a:	96 95       	lsr	r25
    988c:	96 95       	lsr	r25
    988e:	e9 0f       	add	r30, r25
    9890:	ff 27       	eor	r31, r31
    9892:	e2 5f       	subi	r30, 0xF2	; 242
    9894:	f9 4f       	sbci	r31, 0xF9	; 249
    9896:	99 27       	eor	r25, r25
    9898:	33 27       	eor	r19, r19
    989a:	ee 24       	eor	r14, r14
    989c:	ff 24       	eor	r15, r15
    989e:	a7 01       	movw	r20, r14
    98a0:	e7 01       	movw	r28, r14
    98a2:	05 90       	lpm	r0, Z+
    98a4:	08 94       	sec
    98a6:	07 94       	ror	r0
    98a8:	28 f4       	brcc	.+10     	; 0x98b4 <__ftoa_engine+0x80>
    98aa:	36 0f       	add	r19, r22
    98ac:	e7 1e       	adc	r14, r23
    98ae:	f8 1e       	adc	r15, r24
    98b0:	49 1f       	adc	r20, r25
    98b2:	51 1d       	adc	r21, r1
    98b4:	66 0f       	add	r22, r22
    98b6:	77 1f       	adc	r23, r23
    98b8:	88 1f       	adc	r24, r24
    98ba:	99 1f       	adc	r25, r25
    98bc:	06 94       	lsr	r0
    98be:	a1 f7       	brne	.-24     	; 0x98a8 <__ftoa_engine+0x74>
    98c0:	05 90       	lpm	r0, Z+
    98c2:	07 94       	ror	r0
    98c4:	28 f4       	brcc	.+10     	; 0x98d0 <__ftoa_engine+0x9c>
    98c6:	e7 0e       	add	r14, r23
    98c8:	f8 1e       	adc	r15, r24
    98ca:	49 1f       	adc	r20, r25
    98cc:	56 1f       	adc	r21, r22
    98ce:	c1 1d       	adc	r28, r1
    98d0:	77 0f       	add	r23, r23
    98d2:	88 1f       	adc	r24, r24
    98d4:	99 1f       	adc	r25, r25
    98d6:	66 1f       	adc	r22, r22
    98d8:	06 94       	lsr	r0
    98da:	a1 f7       	brne	.-24     	; 0x98c4 <__ftoa_engine+0x90>
    98dc:	05 90       	lpm	r0, Z+
    98de:	07 94       	ror	r0
    98e0:	28 f4       	brcc	.+10     	; 0x98ec <__ftoa_engine+0xb8>
    98e2:	f8 0e       	add	r15, r24
    98e4:	49 1f       	adc	r20, r25
    98e6:	56 1f       	adc	r21, r22
    98e8:	c7 1f       	adc	r28, r23
    98ea:	d1 1d       	adc	r29, r1
    98ec:	88 0f       	add	r24, r24
    98ee:	99 1f       	adc	r25, r25
    98f0:	66 1f       	adc	r22, r22
    98f2:	77 1f       	adc	r23, r23
    98f4:	06 94       	lsr	r0
    98f6:	a1 f7       	brne	.-24     	; 0x98e0 <__ftoa_engine+0xac>
    98f8:	05 90       	lpm	r0, Z+
    98fa:	07 94       	ror	r0
    98fc:	20 f4       	brcc	.+8      	; 0x9906 <__ftoa_engine+0xd2>
    98fe:	49 0f       	add	r20, r25
    9900:	56 1f       	adc	r21, r22
    9902:	c7 1f       	adc	r28, r23
    9904:	d8 1f       	adc	r29, r24
    9906:	99 0f       	add	r25, r25
    9908:	66 1f       	adc	r22, r22
    990a:	77 1f       	adc	r23, r23
    990c:	88 1f       	adc	r24, r24
    990e:	06 94       	lsr	r0
    9910:	a9 f7       	brne	.-22     	; 0x98fc <__ftoa_engine+0xc8>
    9912:	84 91       	lpm	r24, Z
    9914:	10 95       	com	r17
    9916:	17 70       	andi	r17, 0x07	; 7
    9918:	41 f0       	breq	.+16     	; 0x992a <__ftoa_engine+0xf6>
    991a:	d6 95       	lsr	r29
    991c:	c7 95       	ror	r28
    991e:	57 95       	ror	r21
    9920:	47 95       	ror	r20
    9922:	f7 94       	ror	r15
    9924:	e7 94       	ror	r14
    9926:	1a 95       	dec	r17
    9928:	c1 f7       	brne	.-16     	; 0x991a <__ftoa_engine+0xe6>
    992a:	e4 eb       	ldi	r30, 0xB4	; 180
    992c:	f5 e0       	ldi	r31, 0x05	; 5
    992e:	68 94       	set
    9930:	15 90       	lpm	r1, Z+
    9932:	15 91       	lpm	r17, Z+
    9934:	35 91       	lpm	r19, Z+
    9936:	65 91       	lpm	r22, Z+
    9938:	95 91       	lpm	r25, Z+
    993a:	05 90       	lpm	r0, Z+
    993c:	7f e2       	ldi	r23, 0x2F	; 47
    993e:	73 95       	inc	r23
    9940:	e1 18       	sub	r14, r1
    9942:	f1 0a       	sbc	r15, r17
    9944:	43 0b       	sbc	r20, r19
    9946:	56 0b       	sbc	r21, r22
    9948:	c9 0b       	sbc	r28, r25
    994a:	d0 09       	sbc	r29, r0
    994c:	c0 f7       	brcc	.-16     	; 0x993e <__ftoa_engine+0x10a>
    994e:	e1 0c       	add	r14, r1
    9950:	f1 1e       	adc	r15, r17
    9952:	43 1f       	adc	r20, r19
    9954:	56 1f       	adc	r21, r22
    9956:	c9 1f       	adc	r28, r25
    9958:	d0 1d       	adc	r29, r0
    995a:	7e f4       	brtc	.+30     	; 0x997a <__ftoa_engine+0x146>
    995c:	70 33       	cpi	r23, 0x30	; 48
    995e:	11 f4       	brne	.+4      	; 0x9964 <__ftoa_engine+0x130>
    9960:	8a 95       	dec	r24
    9962:	e6 cf       	rjmp	.-52     	; 0x9930 <__ftoa_engine+0xfc>
    9964:	e8 94       	clt
    9966:	01 50       	subi	r16, 0x01	; 1
    9968:	30 f0       	brcs	.+12     	; 0x9976 <__ftoa_engine+0x142>
    996a:	08 0f       	add	r16, r24
    996c:	0a f4       	brpl	.+2      	; 0x9970 <__ftoa_engine+0x13c>
    996e:	00 27       	eor	r16, r16
    9970:	02 17       	cp	r16, r18
    9972:	08 f4       	brcc	.+2      	; 0x9976 <__ftoa_engine+0x142>
    9974:	20 2f       	mov	r18, r16
    9976:	23 95       	inc	r18
    9978:	02 2f       	mov	r16, r18
    997a:	7a 33       	cpi	r23, 0x3A	; 58
    997c:	28 f0       	brcs	.+10     	; 0x9988 <__ftoa_engine+0x154>
    997e:	79 e3       	ldi	r23, 0x39	; 57
    9980:	7d 93       	st	X+, r23
    9982:	2a 95       	dec	r18
    9984:	e9 f7       	brne	.-6      	; 0x9980 <__ftoa_engine+0x14c>
    9986:	10 c0       	rjmp	.+32     	; 0x99a8 <__ftoa_engine+0x174>
    9988:	7d 93       	st	X+, r23
    998a:	2a 95       	dec	r18
    998c:	89 f6       	brne	.-94     	; 0x9930 <__ftoa_engine+0xfc>
    998e:	06 94       	lsr	r0
    9990:	97 95       	ror	r25
    9992:	67 95       	ror	r22
    9994:	37 95       	ror	r19
    9996:	17 95       	ror	r17
    9998:	17 94       	ror	r1
    999a:	e1 18       	sub	r14, r1
    999c:	f1 0a       	sbc	r15, r17
    999e:	43 0b       	sbc	r20, r19
    99a0:	56 0b       	sbc	r21, r22
    99a2:	c9 0b       	sbc	r28, r25
    99a4:	d0 09       	sbc	r29, r0
    99a6:	98 f0       	brcs	.+38     	; 0x99ce <__ftoa_engine+0x19a>
    99a8:	23 95       	inc	r18
    99aa:	7e 91       	ld	r23, -X
    99ac:	73 95       	inc	r23
    99ae:	7a 33       	cpi	r23, 0x3A	; 58
    99b0:	08 f0       	brcs	.+2      	; 0x99b4 <__ftoa_engine+0x180>
    99b2:	70 e3       	ldi	r23, 0x30	; 48
    99b4:	7c 93       	st	X, r23
    99b6:	20 13       	cpse	r18, r16
    99b8:	b8 f7       	brcc	.-18     	; 0x99a8 <__ftoa_engine+0x174>
    99ba:	7e 91       	ld	r23, -X
    99bc:	70 61       	ori	r23, 0x10	; 16
    99be:	7d 93       	st	X+, r23
    99c0:	30 f0       	brcs	.+12     	; 0x99ce <__ftoa_engine+0x19a>
    99c2:	83 95       	inc	r24
    99c4:	71 e3       	ldi	r23, 0x31	; 49
    99c6:	7d 93       	st	X+, r23
    99c8:	70 e3       	ldi	r23, 0x30	; 48
    99ca:	2a 95       	dec	r18
    99cc:	e1 f7       	brne	.-8      	; 0x99c6 <__ftoa_engine+0x192>
    99ce:	11 24       	eor	r1, r1
    99d0:	ef 90       	pop	r14
    99d2:	ff 90       	pop	r15
    99d4:	0f 91       	pop	r16
    99d6:	1f 91       	pop	r17
    99d8:	cf 91       	pop	r28
    99da:	df 91       	pop	r29
    99dc:	99 27       	eor	r25, r25
    99de:	87 fd       	sbrc	r24, 7
    99e0:	90 95       	com	r25
    99e2:	08 95       	ret

000099e4 <strnlen_P>:
    99e4:	fc 01       	movw	r30, r24
    99e6:	05 90       	lpm	r0, Z+
    99e8:	61 50       	subi	r22, 0x01	; 1
    99ea:	70 40       	sbci	r23, 0x00	; 0
    99ec:	01 10       	cpse	r0, r1
    99ee:	d8 f7       	brcc	.-10     	; 0x99e6 <strnlen_P+0x2>
    99f0:	80 95       	com	r24
    99f2:	90 95       	com	r25
    99f4:	8e 0f       	add	r24, r30
    99f6:	9f 1f       	adc	r25, r31
    99f8:	08 95       	ret

000099fa <strnlen>:
    99fa:	fc 01       	movw	r30, r24
    99fc:	61 50       	subi	r22, 0x01	; 1
    99fe:	70 40       	sbci	r23, 0x00	; 0
    9a00:	01 90       	ld	r0, Z+
    9a02:	01 10       	cpse	r0, r1
    9a04:	d8 f7       	brcc	.-10     	; 0x99fc <strnlen+0x2>
    9a06:	80 95       	com	r24
    9a08:	90 95       	com	r25
    9a0a:	8e 0f       	add	r24, r30
    9a0c:	9f 1f       	adc	r25, r31
    9a0e:	08 95       	ret

00009a10 <fputc>:
    9a10:	0f 93       	push	r16
    9a12:	1f 93       	push	r17
    9a14:	cf 93       	push	r28
    9a16:	df 93       	push	r29
    9a18:	fb 01       	movw	r30, r22
    9a1a:	23 81       	ldd	r18, Z+3	; 0x03
    9a1c:	21 fd       	sbrc	r18, 1
    9a1e:	03 c0       	rjmp	.+6      	; 0x9a26 <fputc+0x16>
    9a20:	8f ef       	ldi	r24, 0xFF	; 255
    9a22:	9f ef       	ldi	r25, 0xFF	; 255
    9a24:	28 c0       	rjmp	.+80     	; 0x9a76 <fputc+0x66>
    9a26:	22 ff       	sbrs	r18, 2
    9a28:	16 c0       	rjmp	.+44     	; 0x9a56 <fputc+0x46>
    9a2a:	46 81       	ldd	r20, Z+6	; 0x06
    9a2c:	57 81       	ldd	r21, Z+7	; 0x07
    9a2e:	24 81       	ldd	r18, Z+4	; 0x04
    9a30:	35 81       	ldd	r19, Z+5	; 0x05
    9a32:	42 17       	cp	r20, r18
    9a34:	53 07       	cpc	r21, r19
    9a36:	44 f4       	brge	.+16     	; 0x9a48 <fputc+0x38>
    9a38:	a0 81       	ld	r26, Z
    9a3a:	b1 81       	ldd	r27, Z+1	; 0x01
    9a3c:	9d 01       	movw	r18, r26
    9a3e:	2f 5f       	subi	r18, 0xFF	; 255
    9a40:	3f 4f       	sbci	r19, 0xFF	; 255
    9a42:	31 83       	std	Z+1, r19	; 0x01
    9a44:	20 83       	st	Z, r18
    9a46:	8c 93       	st	X, r24
    9a48:	26 81       	ldd	r18, Z+6	; 0x06
    9a4a:	37 81       	ldd	r19, Z+7	; 0x07
    9a4c:	2f 5f       	subi	r18, 0xFF	; 255
    9a4e:	3f 4f       	sbci	r19, 0xFF	; 255
    9a50:	37 83       	std	Z+7, r19	; 0x07
    9a52:	26 83       	std	Z+6, r18	; 0x06
    9a54:	10 c0       	rjmp	.+32     	; 0x9a76 <fputc+0x66>
    9a56:	eb 01       	movw	r28, r22
    9a58:	09 2f       	mov	r16, r25
    9a5a:	18 2f       	mov	r17, r24
    9a5c:	00 84       	ldd	r0, Z+8	; 0x08
    9a5e:	f1 85       	ldd	r31, Z+9	; 0x09
    9a60:	e0 2d       	mov	r30, r0
    9a62:	09 95       	icall
    9a64:	89 2b       	or	r24, r25
    9a66:	e1 f6       	brne	.-72     	; 0x9a20 <fputc+0x10>
    9a68:	8e 81       	ldd	r24, Y+6	; 0x06
    9a6a:	9f 81       	ldd	r25, Y+7	; 0x07
    9a6c:	01 96       	adiw	r24, 0x01	; 1
    9a6e:	9f 83       	std	Y+7, r25	; 0x07
    9a70:	8e 83       	std	Y+6, r24	; 0x06
    9a72:	81 2f       	mov	r24, r17
    9a74:	90 2f       	mov	r25, r16
    9a76:	df 91       	pop	r29
    9a78:	cf 91       	pop	r28
    9a7a:	1f 91       	pop	r17
    9a7c:	0f 91       	pop	r16
    9a7e:	08 95       	ret

00009a80 <sprintf>:
    9a80:	0f 93       	push	r16
    9a82:	1f 93       	push	r17
    9a84:	cf 93       	push	r28
    9a86:	df 93       	push	r29
    9a88:	cd b7       	in	r28, 0x3d	; 61
    9a8a:	de b7       	in	r29, 0x3e	; 62
    9a8c:	2e 97       	sbiw	r28, 0x0e	; 14
    9a8e:	0f b6       	in	r0, 0x3f	; 63
    9a90:	f8 94       	cli
    9a92:	de bf       	out	0x3e, r29	; 62
    9a94:	0f be       	out	0x3f, r0	; 63
    9a96:	cd bf       	out	0x3d, r28	; 61
    9a98:	0d 89       	ldd	r16, Y+21	; 0x15
    9a9a:	1e 89       	ldd	r17, Y+22	; 0x16
    9a9c:	86 e0       	ldi	r24, 0x06	; 6
    9a9e:	8c 83       	std	Y+4, r24	; 0x04
    9aa0:	1a 83       	std	Y+2, r17	; 0x02
    9aa2:	09 83       	std	Y+1, r16	; 0x01
    9aa4:	8f ef       	ldi	r24, 0xFF	; 255
    9aa6:	9f e7       	ldi	r25, 0x7F	; 127
    9aa8:	9e 83       	std	Y+6, r25	; 0x06
    9aaa:	8d 83       	std	Y+5, r24	; 0x05
    9aac:	ae 01       	movw	r20, r28
    9aae:	47 5e       	subi	r20, 0xE7	; 231
    9ab0:	5f 4f       	sbci	r21, 0xFF	; 255
    9ab2:	6f 89       	ldd	r22, Y+23	; 0x17
    9ab4:	78 8d       	ldd	r23, Y+24	; 0x18
    9ab6:	ce 01       	movw	r24, r28
    9ab8:	01 96       	adiw	r24, 0x01	; 1
    9aba:	4d d8       	rcall	.-3942   	; 0x8b56 <vfprintf>
    9abc:	2f 81       	ldd	r18, Y+7	; 0x07
    9abe:	38 85       	ldd	r19, Y+8	; 0x08
    9ac0:	f8 01       	movw	r30, r16
    9ac2:	e2 0f       	add	r30, r18
    9ac4:	f3 1f       	adc	r31, r19
    9ac6:	10 82       	st	Z, r1
    9ac8:	2e 96       	adiw	r28, 0x0e	; 14
    9aca:	0f b6       	in	r0, 0x3f	; 63
    9acc:	f8 94       	cli
    9ace:	de bf       	out	0x3e, r29	; 62
    9ad0:	0f be       	out	0x3f, r0	; 63
    9ad2:	cd bf       	out	0x3d, r28	; 61
    9ad4:	df 91       	pop	r29
    9ad6:	cf 91       	pop	r28
    9ad8:	1f 91       	pop	r17
    9ada:	0f 91       	pop	r16
    9adc:	08 95       	ret

00009ade <__ultoa_invert>:
    9ade:	fa 01       	movw	r30, r20
    9ae0:	aa 27       	eor	r26, r26
    9ae2:	28 30       	cpi	r18, 0x08	; 8
    9ae4:	51 f1       	breq	.+84     	; 0x9b3a <__ultoa_invert+0x5c>
    9ae6:	20 31       	cpi	r18, 0x10	; 16
    9ae8:	81 f1       	breq	.+96     	; 0x9b4a <__ultoa_invert+0x6c>
    9aea:	e8 94       	clt
    9aec:	6f 93       	push	r22
    9aee:	6e 7f       	andi	r22, 0xFE	; 254
    9af0:	6e 5f       	subi	r22, 0xFE	; 254
    9af2:	7f 4f       	sbci	r23, 0xFF	; 255
    9af4:	8f 4f       	sbci	r24, 0xFF	; 255
    9af6:	9f 4f       	sbci	r25, 0xFF	; 255
    9af8:	af 4f       	sbci	r26, 0xFF	; 255
    9afa:	b1 e0       	ldi	r27, 0x01	; 1
    9afc:	3e d0       	rcall	.+124    	; 0x9b7a <__ultoa_invert+0x9c>
    9afe:	b4 e0       	ldi	r27, 0x04	; 4
    9b00:	3c d0       	rcall	.+120    	; 0x9b7a <__ultoa_invert+0x9c>
    9b02:	67 0f       	add	r22, r23
    9b04:	78 1f       	adc	r23, r24
    9b06:	89 1f       	adc	r24, r25
    9b08:	9a 1f       	adc	r25, r26
    9b0a:	a1 1d       	adc	r26, r1
    9b0c:	68 0f       	add	r22, r24
    9b0e:	79 1f       	adc	r23, r25
    9b10:	8a 1f       	adc	r24, r26
    9b12:	91 1d       	adc	r25, r1
    9b14:	a1 1d       	adc	r26, r1
    9b16:	6a 0f       	add	r22, r26
    9b18:	71 1d       	adc	r23, r1
    9b1a:	81 1d       	adc	r24, r1
    9b1c:	91 1d       	adc	r25, r1
    9b1e:	a1 1d       	adc	r26, r1
    9b20:	20 d0       	rcall	.+64     	; 0x9b62 <__ultoa_invert+0x84>
    9b22:	09 f4       	brne	.+2      	; 0x9b26 <__ultoa_invert+0x48>
    9b24:	68 94       	set
    9b26:	3f 91       	pop	r19
    9b28:	2a e0       	ldi	r18, 0x0A	; 10
    9b2a:	26 9f       	mul	r18, r22
    9b2c:	11 24       	eor	r1, r1
    9b2e:	30 19       	sub	r19, r0
    9b30:	30 5d       	subi	r19, 0xD0	; 208
    9b32:	31 93       	st	Z+, r19
    9b34:	de f6       	brtc	.-74     	; 0x9aec <__ultoa_invert+0xe>
    9b36:	cf 01       	movw	r24, r30
    9b38:	08 95       	ret
    9b3a:	46 2f       	mov	r20, r22
    9b3c:	47 70       	andi	r20, 0x07	; 7
    9b3e:	40 5d       	subi	r20, 0xD0	; 208
    9b40:	41 93       	st	Z+, r20
    9b42:	b3 e0       	ldi	r27, 0x03	; 3
    9b44:	0f d0       	rcall	.+30     	; 0x9b64 <__ultoa_invert+0x86>
    9b46:	c9 f7       	brne	.-14     	; 0x9b3a <__ultoa_invert+0x5c>
    9b48:	f6 cf       	rjmp	.-20     	; 0x9b36 <__ultoa_invert+0x58>
    9b4a:	46 2f       	mov	r20, r22
    9b4c:	4f 70       	andi	r20, 0x0F	; 15
    9b4e:	40 5d       	subi	r20, 0xD0	; 208
    9b50:	4a 33       	cpi	r20, 0x3A	; 58
    9b52:	18 f0       	brcs	.+6      	; 0x9b5a <__ultoa_invert+0x7c>
    9b54:	49 5d       	subi	r20, 0xD9	; 217
    9b56:	31 fd       	sbrc	r19, 1
    9b58:	40 52       	subi	r20, 0x20	; 32
    9b5a:	41 93       	st	Z+, r20
    9b5c:	02 d0       	rcall	.+4      	; 0x9b62 <__ultoa_invert+0x84>
    9b5e:	a9 f7       	brne	.-22     	; 0x9b4a <__ultoa_invert+0x6c>
    9b60:	ea cf       	rjmp	.-44     	; 0x9b36 <__ultoa_invert+0x58>
    9b62:	b4 e0       	ldi	r27, 0x04	; 4
    9b64:	a6 95       	lsr	r26
    9b66:	97 95       	ror	r25
    9b68:	87 95       	ror	r24
    9b6a:	77 95       	ror	r23
    9b6c:	67 95       	ror	r22
    9b6e:	ba 95       	dec	r27
    9b70:	c9 f7       	brne	.-14     	; 0x9b64 <__ultoa_invert+0x86>
    9b72:	00 97       	sbiw	r24, 0x00	; 0
    9b74:	61 05       	cpc	r22, r1
    9b76:	71 05       	cpc	r23, r1
    9b78:	08 95       	ret
    9b7a:	9b 01       	movw	r18, r22
    9b7c:	ac 01       	movw	r20, r24
    9b7e:	0a 2e       	mov	r0, r26
    9b80:	06 94       	lsr	r0
    9b82:	57 95       	ror	r21
    9b84:	47 95       	ror	r20
    9b86:	37 95       	ror	r19
    9b88:	27 95       	ror	r18
    9b8a:	ba 95       	dec	r27
    9b8c:	c9 f7       	brne	.-14     	; 0x9b80 <__ultoa_invert+0xa2>
    9b8e:	62 0f       	add	r22, r18
    9b90:	73 1f       	adc	r23, r19
    9b92:	84 1f       	adc	r24, r20
    9b94:	95 1f       	adc	r25, r21
    9b96:	a0 1d       	adc	r26, r0
    9b98:	08 95       	ret

00009b9a <__do_global_dtors>:
    9b9a:	13 e0       	ldi	r17, 0x03	; 3
    9b9c:	c8 e5       	ldi	r28, 0x58	; 88
    9b9e:	d3 e0       	ldi	r29, 0x03	; 3
    9ba0:	03 c0       	rjmp	.+6      	; 0x9ba8 <__do_global_dtors+0xe>
    9ba2:	fe 01       	movw	r30, r28
    9ba4:	82 db       	rcall	.-2300   	; 0x92aa <__tablejump2__>
    9ba6:	21 96       	adiw	r28, 0x01	; 1
    9ba8:	c9 35       	cpi	r28, 0x59	; 89
    9baa:	d1 07       	cpc	r29, r17
    9bac:	d1 f7       	brne	.-12     	; 0x9ba2 <__do_global_dtors+0x8>
    9bae:	f8 94       	cli

00009bb0 <__stop_program>:
    9bb0:	ff cf       	rjmp	.-2      	; 0x9bb0 <__stop_program>
